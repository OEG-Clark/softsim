{"home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.utils.adversarial_test.create_targeted_perturbation_matrix": [[13, 85], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "enumerate", "model.eval", "model", "torch.max", "torch.max", "torch.max", "enumerate", "data.to", "target.to", "torch.softmax", "torch.softmax", "torch.softmax", "attack.set_model", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "data.repeat", "target.new_empty", "range", "attack.perturb", "model", "torch.max", "torch.max", "torch.max", "range", "pathlib.Path().mkdir", "matplotlib.subplots", "range", "fig.savefig", "matplotlib.close", "torch.softmax", "torch.softmax", "torch.softmax", "data_perturbed[].to", "data[].detach().cpu().permute", "ax[].axis", "ax[].title.set_text", "range", "pathlib.Path", "data[].detach().cpu().permute.squeeze_", "ax[].imshow", "ax[].imshow", "data_targeted_attacked[].permute", "ax[].axis", "ax[].title.set_text", "data[].detach().cpu", "orig_pred[].item", "orig_conf[].item", "data_targeted_attacked[].permute.squeeze_", "ax[].imshow", "ax[].imshow", "pred_targeted_attacked[].item", "conf_targeted_attacked[].item", "data[].detach"], "function", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models.ebm_wrn.gradient_attack_wrapper.eval", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.adversarial_attacks.adversarialattack.AdversarialAttack.set_model", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.adversarial_attacks.restartattack.RestartAttack.perturb"], ["def", "create_targeted_perturbation_matrix", "(", "model_list", ",", "attacks", ",", "device", ",", "dataloaders_list", ",", "num_classes", ",", "base_dir", ",", "batches", "=", "None", ")", ":", "\n", "#create a targeted attack for each class in dataset starting from all datapoints for x batches", "\n", "    ", "for", "(", "dataloader_name", ",", "dataloader", ")", "in", "dataloaders_list", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "batch_idx", ",", "(", "data", ",", "target", ")", "in", "enumerate", "(", "dataloader", ")", ":", "\n", "                ", "if", "batches", "is", "not", "None", "and", "batch_idx", ">=", "batches", ":", "\n", "                    ", "break", "\n", "", "for", "(", "model_dir", ",", "model", ")", "in", "model_list", ":", "\n", "                    ", "model", ".", "eval", "(", ")", "\n", "data", ",", "target", "=", "data", ".", "to", "(", "device", ")", ",", "target", ".", "to", "(", "device", ")", "\n", "\n", "orig_out", "=", "model", "(", "data", ")", "\n", "\n", "orig_conf", ",", "orig_pred", "=", "torch", ".", "max", "(", "torch", ".", "softmax", "(", "orig_out", ",", "dim", "=", "1", ")", ",", "1", ")", "\n", "\n", "for", "a_i", ",", "(", "attack_name", ",", "attack", ")", "in", "enumerate", "(", "attacks", ")", ":", "\n", "                        ", "attack", ".", "set_model", "(", "model", ")", "\n", "\n", "#cpu", "\n", "data_targeted_attacked", "=", "torch", ".", "zeros", "(", "(", "num_classes", ",", ")", "+", "data", ".", "shape", ")", "\n", "pred_targeted_attacked", "=", "torch", ".", "zeros", "(", "(", "num_classes", ",", "data", ".", "shape", "[", "0", "]", ")", ",", "dtype", "=", "torch", ".", "int32", ")", "\n", "conf_targeted_attacked", "=", "torch", ".", "zeros", "(", "(", "num_classes", ",", "data", ".", "shape", "[", "0", "]", ")", ")", "\n", "\n", "#creates batches that have dimension batch_size * num_classes", "\n", "stacked_data", "=", "data", ".", "repeat", "(", "num_classes", ",", "1", ",", "1", ",", "1", ")", "\n", "stacked_targets", "=", "target", ".", "new_empty", "(", "target", ".", "shape", "[", "0", "]", "*", "num_classes", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "for", "c", "in", "range", "(", "num_classes", ")", ":", "\n", "                            ", "stacked_targets", "[", "(", "c", "*", "num_classes", ")", ":", "(", "(", "c", "+", "1", ")", "*", "num_classes", ")", "]", "=", "c", "\n", "\n", "", "data_perturbed", "=", "attack", ".", "perturb", "(", "stacked_data", ",", "stacked_targets", ",", "True", ")", "\n", "out", "=", "model", "(", "data_perturbed", ")", "\n", "conf", ",", "pred", "=", "torch", ".", "max", "(", "torch", ".", "softmax", "(", "out", ",", "dim", "=", "1", ")", ",", "1", ")", "\n", "\n", "#might be possible to reshape this?", "\n", "for", "c", "in", "range", "(", "num_classes", ")", ":", "\n", "                            ", "conf_targeted_attacked", "[", "c", ",", ":", "]", "=", "conf", "[", "(", "c", "*", "num_classes", ")", ":", "(", "(", "c", "+", "1", ")", "*", "num_classes", ")", "]", "\n", "pred_targeted_attacked", "[", "c", ",", ":", "]", "=", "pred", "[", "(", "c", "*", "num_classes", ")", ":", "(", "(", "c", "+", "1", ")", "*", "num_classes", ")", "]", "\n", "data_targeted_attacked", "[", "c", ",", ":", "]", "=", "data_perturbed", "[", "(", "c", "*", "num_classes", ")", ":", "(", "(", "c", "+", "1", ")", "*", "num_classes", ")", "]", ".", "to", "(", "'cpu'", ")", "\n", "\n", "#print with", "\n", "", "out_folder", "=", "f'{base_dir}/{model_dir}/{dataloader_name}'", "\n", "out_file", "=", "f'{out_folder}/{attack_name}_{batch_idx}.png'", "\n", "pathlib", ".", "Path", "(", "out_folder", ")", ".", "mkdir", "(", "parents", "=", "True", ",", "exist_ok", "=", "True", ")", "\n", "\n", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", "data", ".", "shape", "[", "0", "]", ",", "num_classes", "+", "1", ",", "figsize", "=", "(", "20", ",", "22", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "data", ".", "shape", "[", "0", "]", ")", ":", "\n", "#plot original", "\n", "                            ", "img_orig", "=", "data", "[", "i", ",", ":", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "permute", "(", "1", ",", "2", ",", "0", ")", "\n", "if", "img_orig", ".", "shape", "[", "2", "]", "==", "1", ":", "\n", "                                ", "img_orig", ".", "squeeze_", "(", ")", "\n", "ax", "[", "i", ",", "0", "]", ".", "imshow", "(", "img_orig", ",", "cmap", "=", "'gray'", ")", "\n", "", "else", ":", "\n", "                                ", "ax", "[", "i", ",", "0", "]", ".", "imshow", "(", "img_orig", ")", "\n", "\n", "", "ax", "[", "i", ",", "0", "]", ".", "axis", "(", "'off'", ")", "\n", "ax", "[", "i", ",", "0", "]", ".", "title", ".", "set_text", "(", "'{:d} - {:0.2f}'", ".", "format", "(", "orig_pred", "[", "i", "]", ".", "item", "(", ")", ",", "\n", "orig_conf", "[", "i", "]", ".", "item", "(", ")", ")", ")", "\n", "\n", "for", "j", "in", "range", "(", "num_classes", ")", ":", "\n", "                                ", "img_ij", "=", "data_targeted_attacked", "[", "j", ",", "i", ",", ":", "]", ".", "permute", "(", "1", ",", "2", ",", "0", ")", "\n", "if", "img_ij", ".", "shape", "[", "2", "]", "==", "1", ":", "\n", "                                    ", "img_ij", ".", "squeeze_", "(", ")", "\n", "ax", "[", "i", ",", "j", "+", "1", "]", ".", "imshow", "(", "img_ij", ",", "cmap", "=", "'gray'", ")", "\n", "", "else", ":", "\n", "                                    ", "ax", "[", "i", ",", "j", "+", "1", "]", ".", "imshow", "(", "img_ij", ")", "\n", "\n", "", "ax", "[", "i", ",", "j", "+", "1", "]", ".", "axis", "(", "'off'", ")", "\n", "ax", "[", "i", ",", "j", "+", "1", "]", ".", "title", ".", "set_text", "(", "'{:d} - {:0.2f}'", ".", "format", "(", "pred_targeted_attacked", "[", "j", ",", "i", "]", ".", "item", "(", ")", ",", "conf_targeted_attacked", "[", "j", ",", "i", "]", ".", "item", "(", ")", ")", ")", "\n", "\n", "", "", "fig", ".", "savefig", "(", "out_file", ")", "\n", "plt", ".", "close", "(", "fig", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.utils.adversarial_test.test_robustness": [[86, 118], ["model.eval", "numpy.zeros", "numpy.zeros", "numpy.zeros", "len", "len", "len", "len", "len", "len", "attack.set_model", "torch.no_grad", "torch.no_grad", "torch.no_grad", "enumerate", "data.to", "target.to", "attack.perturb", "model", "torch.cross_entropy", "torch.cross_entropy().item", "model.max", "pred.eq().sum().item", "c.exp().sum().item", "F.cross_entropy.item", "torch.cross_entropy", "pred.eq().sum", "c.exp().sum", "pred.eq", "c.exp", "target.view_as"], "function", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models.ebm_wrn.gradient_attack_wrapper.eval", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.adversarial_attacks.adversarialattack.AdversarialAttack.set_model", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.adversarial_attacks.restartattack.RestartAttack.perturb"], ["", "", "", "", "", "", "def", "test_robustness", "(", "model", ",", "attacks", ",", "device", ",", "test_loader", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "\n", "test_loss", "=", "np", ".", "zeros", "(", "len", "(", "attacks", ")", ")", "\n", "correct", "=", "np", ".", "zeros", "(", "len", "(", "attacks", ")", ")", "\n", "av_conf", "=", "np", ".", "zeros", "(", "len", "(", "attacks", ")", ")", "\n", "\n", "for", "attack", "in", "attacks", ":", "\n", "        ", "attack", ".", "set_model", "(", "model", ")", "\n", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "data", ",", "target", "in", "test_loader", ":", "\n", "            ", "data", ",", "target", "=", "data", ".", "to", "(", "device", ")", ",", "target", ".", "to", "(", "device", ")", "\n", "\n", "for", "a_i", ",", "attack", "in", "enumerate", "(", "attacks", ")", ":", "\n", "                ", "data_perturbed", "=", "attack", ".", "perturb", "(", "data", ",", "target", ")", "\n", "output", "=", "model", "(", "data_perturbed", ")", "\n", "\n", "loss", "=", "F", ".", "cross_entropy", "(", "output", ",", "target", ")", "\n", "test_loss", "[", "a_i", "]", "+=", "F", ".", "cross_entropy", "(", "output", ",", "target", ",", "reduction", "=", "'sum'", ")", ".", "item", "(", ")", "# sum up batch loss", "\n", "\n", "c", ",", "pred", "=", "output", ".", "max", "(", "1", ",", "keepdim", "=", "True", ")", "# get the index of the max log-probability", "\n", "correct", "[", "a_i", "]", "+=", "(", "pred", ".", "eq", "(", "target", ".", "view_as", "(", "pred", ")", ")", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "av_conf", "[", "a_i", "]", "+=", "c", ".", "exp", "(", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "test_loss", "+=", "loss", ".", "item", "(", ")", "\n", "\n", "\n", "", "", "", "test_loss", "/=", "len", "(", "test_loader", ".", "dataset", ")", "\n", "av_conf", "/=", "len", "(", "test_loader", ".", "dataset", ")", "\n", "correct", "/=", "len", "(", "test_loader", ".", "dataset", ")", "\n", "\n", "return", "correct", ",", "av_conf", ",", "test_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.utils.load_trained_model.load_non_native_model": [[20, 94], ["model_utils.make_and_restore_model", "MadryWrapper", "utils.models.models_32x32.wideresnet_carmon.WideResNet.to", "utils.models.models_32x32.wideresnet_carmon.WideResNet.eval", "torchvision.models.resnet50", "torch.load", "torch.load", "utils.models.models_32x32.wideresnet_carmon.WideResNet.load_state_dict", "utils.model_normalization.ImageNetWrapper", "utils.models.models_32x32.wideresnet_carmon.WideResNet.to", "utils.models.models_32x32.wideresnet_carmon.WideResNet.eval", "super().__init__", "load_trained_model..normalizer", "load_trained_model..model", "utils.datasets.paths.get_imagenet_path", "utils.models.models_32x32.resnet.ResNet50", "torch.load", "torch.load", "utils.models.models_32x32.wideresnet_carmon.WideResNet.load_state_dict", "utils.models.models_32x32.wideresnet_carmon.WideResNet.to", "utils.models.models_32x32.wideresnet_carmon.WideResNet.eval", "utils.datasets.paths.get_imagenet_path", "NotImplementedError", "utils.models.models_32x32.wideresnet_carmon.WideResNet", "torch.load", "torch.load", "torch.load.get", "torch.load.get", "torch.load.get", "utils.models.models_32x32.wideresnet_carmon.WideResNet.load_state_dict", "utils.models.models_32x32.wideresnet_carmon.WideResNet.to", "utils.models.models_32x32.wideresnet_carmon.WideResNet.eval", "ValueError", "utils.datasets.paths.get_CIFAR10_path", "s.startswith", "load_trained_model.load_non_native_model.strip_data_parallel"], "function", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models.ebm_wrn.gradient_attack_wrapper.eval", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.schedulers.scheduler.Scheduler.load_state_dict", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.utils.model_normalization.ImageNetWrapper", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models.ebm_wrn.gradient_attack_wrapper.eval", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models_32x32.shake_pyramidnet.ShakePyramidNet.__init__", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.datasets.paths.get_imagenet_path", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models_32x32.resnet.ResNet50", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.schedulers.scheduler.Scheduler.load_state_dict", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models.ebm_wrn.gradient_attack_wrapper.eval", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.datasets.paths.get_imagenet_path", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.schedulers.scheduler.Scheduler.load_state_dict", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models.ebm_wrn.gradient_attack_wrapper.eval", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.datasets.paths.get_CIFAR10_path"], ["def", "load_non_native_model", "(", "type", ",", "folder", ",", "device", ")", ":", "\n", "    ", "if", "'Madry'", "in", "type", ":", "\n", "        ", "from", "robustness", "import", "model_utils", ",", "datasets", "\n", "\n", "class", "MadryWrapper", "(", "torch", ".", "nn", ".", "Module", ")", ":", "\n", "            ", "def", "__init__", "(", "self", ",", "model", ",", "normalizer", ")", ":", "\n", "                ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "model", "=", "model", "\n", "self", ".", "normalizer", "=", "normalizer", "\n", "\n", "", "def", "forward", "(", "self", ",", "img", ")", ":", "\n", "                ", "normalized_inp", "=", "self", ".", "normalizer", "(", "img", ")", "\n", "output", "=", "self", ".", "model", "(", "normalized_inp", ",", "with_latent", "=", "False", ",", "\n", "fake_relu", "=", "False", ",", "no_relu", "=", "False", ")", "\n", "return", "output", "\n", "\n", "", "", "if", "type", "==", "'MadryRestrictedImageNet50'", ":", "\n", "            ", "dataset", "=", "datasets", ".", "DATASETS", "[", "'restricted_imagenet'", "]", "(", "get_imagenet_path", "(", ")", ")", "\n", "resume_path", "=", "f'RestrictedImageNetModels/MadryModels/ResNet50/{folder}.pt'", "\n", "", "elif", "type", "==", "'MadryImageNet50'", ":", "\n", "            ", "dataset", "=", "datasets", ".", "DATASETS", "[", "'imagenet'", "]", "(", "get_imagenet_path", "(", ")", ")", "\n", "resume_path", "=", "f'ImageNetModels/MadryModels/ResNet50/{folder}.pt'", "\n", "", "elif", "type", "==", "'MadryCifar50'", ":", "\n", "            ", "dataset", "=", "datasets", ".", "DATASETS", "[", "'cifar'", "]", "(", "get_CIFAR10_path", "(", ")", ")", "\n", "resume_path", "=", "f'Cifar10Models/MadryModels/ResNet50/{folder}.pt'", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", ")", "\n", "\n", "", "model_kwargs", "=", "{", "\n", "'arch'", ":", "'resnet50'", ",", "\n", "'dataset'", ":", "dataset", ",", "\n", "'resume_path'", ":", "resume_path", ",", "\n", "'parallel'", ":", "False", "\n", "}", "\n", "model_madry", ",", "_", "=", "model_utils", ".", "make_and_restore_model", "(", "**", "model_kwargs", ")", "\n", "\n", "model", "=", "MadryWrapper", "(", "model_madry", ".", "model", ",", "model_madry", ".", "normalizer", ")", "\n", "model", ".", "to", "(", "device", ")", "\n", "model", ".", "eval", "(", ")", "\n", "", "elif", "type", "==", "'PytorchResNet50'", ":", "\n", "        ", "model", "=", "torch_models", ".", "resnet50", "(", ")", "\n", "state_dict_file", "=", "f'ImageNetModels/PytorchModels/ResNet50/{folder}.pt'", "\n", "state_dict", "=", "torch", ".", "load", "(", "state_dict_file", ",", "map_location", "=", "device", ")", "\n", "model", ".", "load_state_dict", "(", "state_dict", ")", "\n", "model", "=", "ImageNetWrapper", "(", "model", ")", "\n", "model", "=", "model", ".", "to", "(", "device", ")", "\n", "model", ".", "eval", "(", ")", "\n", "", "elif", "type", "==", "'TRADESReference'", ":", "\n", "        ", "model", "=", "ResNet50", "(", "num_classes", "=", "10", ")", "\n", "state_dict_file", "=", "f'{folder}.pt'", "\n", "state_dict", "=", "torch", ".", "load", "(", "state_dict_file", ",", "map_location", "=", "device", ")", "\n", "model", ".", "load_state_dict", "(", "state_dict", ")", "\n", "model", ".", "to", "(", "device", ")", "\n", "model", ".", "eval", "(", ")", "\n", "", "elif", "type", "==", "'Carmon'", ":", "\n", "        ", "model", "=", "WideResNetCarmon", "(", "num_classes", "=", "10", ",", "depth", "=", "28", ",", "widen_factor", "=", "10", ")", "\n", "state_dict_file", "=", "f'Cifar10Models/{folder}.pt'", "\n", "checkpoint", "=", "torch", ".", "load", "(", "state_dict_file", ",", "map_location", "=", "device", ")", "\n", "state_dict", "=", "checkpoint", ".", "get", "(", "'state_dict'", ",", "checkpoint", ")", "\n", "num_classes", "=", "checkpoint", ".", "get", "(", "'num_classes'", ",", "10", ")", "\n", "normalize_input", "=", "checkpoint", ".", "get", "(", "'normalize_input'", ",", "False", ")", "\n", "def", "strip_data_parallel", "(", "s", ")", ":", "\n", "            ", "if", "s", ".", "startswith", "(", "'module'", ")", ":", "\n", "                ", "return", "s", "[", "len", "(", "'module.'", ")", ":", "]", "\n", "", "else", ":", "\n", "                ", "return", "s", "\n", "", "", "state_dict", "=", "{", "strip_data_parallel", "(", "k", ")", ":", "v", "for", "k", ",", "v", "in", "state_dict", ".", "items", "(", ")", "}", "\n", "model", ".", "load_state_dict", "(", "state_dict", ")", "\n", "model", ".", "to", "(", "device", ")", "\n", "model", ".", "eval", "(", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'Type not supported'", ")", "\n", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.utils.load_trained_model.get_filename": [[96, 108], ["checkpoint.isnumeric", "int"], "function", ["None"], ["", "def", "get_filename", "(", "folder", ",", "architecture_folder", ",", "checkpoint", ",", "load_temp", ")", ":", "\n", "    ", "if", "load_temp", ":", "\n", "        ", "load_folder_name", "=", "f'_temp_{folder}'", "\n", "", "else", ":", "\n", "        ", "load_folder_name", "=", "f'{folder}'", "\n", "\n", "", "if", "not", "checkpoint", ".", "isnumeric", "(", ")", ":", "\n", "        ", "state_dict_file", "=", "f'{architecture_folder}/{load_folder_name}/{checkpoint}.pth'", "\n", "", "else", ":", "\n", "        ", "epoch", "=", "int", "(", "checkpoint", ")", "\n", "state_dict_file", "=", "f'{architecture_folder}/{load_folder_name}/checkpoints/{epoch}.pth'", "\n", "", "return", "state_dict_file", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.utils.load_trained_model.load_cifar_family_model": [[112, 118], ["utils.models.model_factory_32.build_model", "load_trained_model.get_filename", "torch.load", "torch.load", "model.load_state_dict", "os.path.join"], "function", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models.model_factory_224.build_model", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.utils.load_trained_model.get_filename", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.schedulers.scheduler.Scheduler.load_state_dict"], ["def", "load_cifar_family_model", "(", "type", ",", "folder", ",", "checkpoint", ",", "device", ",", "dataset_dir", ",", "num_classes", ",", "load_temp", "=", "False", ",", "model_params", "=", "None", ")", ":", "\n", "    ", "model", ",", "model_folder_post", ",", "_", ",", "img_size", "=", "build_model32", "(", "type", ",", "num_classes", ",", "model_params", "=", "model_params", ")", "\n", "state_dict_file", "=", "get_filename", "(", "folder", ",", "os", ".", "path", ".", "join", "(", "dataset_dir", ",", "model_folder_post", ")", ",", "checkpoint", ",", "load_temp", ")", "\n", "state_dict", "=", "torch", ".", "load", "(", "state_dict_file", ",", "map_location", "=", "device", ")", "\n", "model", ".", "load_state_dict", "(", "state_dict", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.utils.load_trained_model.load_big_transfer_model": [[119, 125], ["utils.models.big_transfer_factory.build_model_big_transfer", "load_trained_model.get_filename", "torch.load", "torch.load", "model.load_state_dict", "os.path.join"], "function", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models.big_transfer_factory.build_model_big_transfer", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.utils.load_trained_model.get_filename", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.schedulers.scheduler.Scheduler.load_state_dict"], ["", "def", "load_big_transfer_model", "(", "type", ",", "folder", ",", "checkpoint", ",", "device", ",", "dataset_dir", ",", "num_classes", ",", "load_temp", "=", "False", ",", "model_params", "=", "None", ")", ":", "\n", "    ", "model", ",", "model_folder_post", "=", "build_model_big_transfer", "(", "type", ",", "num_classes", ")", "\n", "state_dict_file", "=", "get_filename", "(", "folder", ",", "os", ".", "path", ".", "join", "(", "dataset_dir", ",", "model_folder_post", ")", ",", "checkpoint", ",", "load_temp", ")", "\n", "state_dict", "=", "torch", ".", "load", "(", "state_dict_file", ",", "map_location", "=", "device", ")", "\n", "model", ".", "load_state_dict", "(", "state_dict", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.utils.load_trained_model.load_imagenet_family_model": [[126, 133], ["utils.models.model_factory_224.build_model", "load_trained_model.get_filename", "torch.load", "torch.load", "model.load_state_dict"], "function", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models.model_factory_224.build_model", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.utils.load_trained_model.get_filename", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.schedulers.scheduler.Scheduler.load_state_dict"], ["", "def", "load_imagenet_family_model", "(", "type", ",", "folder", ",", "checkpoint", ",", "device", ",", "dataset_dir", ",", "num_classes", ",", "load_temp", "=", "False", ",", "model_params", "=", "None", ")", ":", "\n", "    ", "model", ",", "model_folder_post", ",", "_", "=", "build_model224", "(", "type", ",", "num_classes", ",", "**", "model_params", ")", "\n", "state_dict_file", "=", "get_filename", "(", "folder", ",", "f'{dataset_dir}/{model_folder_post}'", ",", "checkpoint", ",", "load_temp", ")", "\n", "state_dict", "=", "torch", ".", "load", "(", "state_dict_file", ",", "map_location", "=", "device", ")", "\n", "model", ".", "load_state_dict", "(", "state_dict", ")", "\n", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.utils.load_trained_model.load_model": [[134, 241], ["dataset.lower.lower", "utils.model_normalization.ImageNetWrapper.to", "utils.model_normalization.ImageNetWrapper.eval", "load_trained_model.load_non_native_model", "load_trained_model.load_big_transfer_model", "utils.model_normalization.BigTransferWrapper", "utils.temperature_wrapper.TemperatureWrapper", "utils.temperature_wrapper.TemperatureWrapper", "load_trained_model.load_cifar_family_model", "utils.model_normalization.Cifar10Wrapper", "load_trained_model.load_imagenet_family_model", "ValueError", "utils.model_normalization.Cifar100Wrapper", "utils.model_normalization.SVHNWrapper", "utils.model_normalization.Cifar100Wrapper", "utils.model_normalization.ImageNetWrapper", "utils.model_normalization.RestrictedImageNetWrapper", "utils.model_normalization.ImageNetWrapper", "utils.model_normalization.ImageNetWrapper", "utils.model_normalization.ImageNetWrapper", "utils.model_normalization.ImageNetWrapper", "ValueError", "utils.model_normalization.ImageNetWrapper", "utils.model_normalization.ImageNetWrapper", "ValueError"], "function", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models.ebm_wrn.gradient_attack_wrapper.eval", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.utils.load_trained_model.load_non_native_model", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.utils.load_trained_model.load_big_transfer_model", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.utils.model_normalization.BigTransferWrapper", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.utils.load_trained_model.load_cifar_family_model", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.utils.model_normalization.Cifar10Wrapper", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.utils.load_trained_model.load_imagenet_family_model", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.utils.model_normalization.Cifar100Wrapper", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.utils.model_normalization.SVHNWrapper", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.utils.model_normalization.Cifar100Wrapper", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.utils.model_normalization.ImageNetWrapper", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.utils.model_normalization.RestrictedImageNetWrapper", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.utils.model_normalization.ImageNetWrapper", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.utils.model_normalization.ImageNetWrapper", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.utils.model_normalization.ImageNetWrapper", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.utils.model_normalization.ImageNetWrapper", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.utils.model_normalization.ImageNetWrapper", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.utils.model_normalization.ImageNetWrapper"], ["", "def", "load_model", "(", "type", ",", "folder", ",", "checkpoint", ",", "temperature", ",", "device", ",", "dataset", "=", "'cifar10'", ",", "load_temp", "=", "False", ",", "model_params", "=", "None", ")", ":", "\n", "    ", "dataset", "=", "dataset", ".", "lower", "(", ")", "\n", "if", "dataset", "==", "'cifar10'", ":", "\n", "        ", "dataset_dir", "=", "'Cifar10Models'", "\n", "num_classes", "=", "10", "\n", "model_family", "=", "'Cifar32'", "\n", "", "elif", "dataset", "==", "'cifar100'", ":", "\n", "        ", "dataset_dir", "=", "'Cifar100Models'", "\n", "num_classes", "=", "100", "\n", "model_family", "=", "'Cifar32'", "\n", "", "elif", "dataset", "==", "'svhn'", ":", "\n", "        ", "dataset_dir", "=", "'SVHNModels'", "\n", "num_classes", "=", "10", "\n", "model_family", "=", "'Cifar32'", "\n", "", "elif", "dataset", "==", "'tinyImageNet'", ":", "\n", "        ", "dataset_dir", "=", "'TinyImageNetModels'", "\n", "num_classes", "=", "200", "\n", "model_family", "=", "'ImageNet224'", "\n", "", "elif", "dataset", "==", "'restrictedimagenet'", ":", "\n", "#dataset_dir = 'RestrictedImageNetModels'", "\n", "        ", "dataset_dir", "=", "'RestrictedImageNetModels'", "\n", "num_classes", "=", "9", "\n", "model_family", "=", "'ImageNet224'", "\n", "", "elif", "dataset", "==", "'imagenet'", ":", "\n", "        ", "dataset_dir", "=", "'ImageNetModels'", "\n", "num_classes", "=", "1000", "\n", "model_family", "=", "'ImageNet224'", "\n", "", "elif", "dataset", "==", "'imagenet100'", ":", "\n", "        ", "dataset_dir", "=", "'ImageNet100Models'", "\n", "num_classes", "=", "100", "\n", "model_family", "=", "'ImageNet224'", "\n", "", "elif", "dataset", "==", "'pets'", ":", "\n", "        ", "dataset_dir", "=", "'PetsModels'", "\n", "num_classes", "=", "37", "\n", "model_family", "=", "'ImageNet224'", "\n", "", "elif", "dataset", "==", "'flowers'", ":", "\n", "        ", "dataset_dir", "=", "'FlowersModels'", "\n", "num_classes", "=", "102", "\n", "model_family", "=", "'ImageNet224'", "\n", "", "elif", "dataset", "==", "'cars'", ":", "\n", "        ", "dataset_dir", "=", "'CarsModels'", "\n", "num_classes", "=", "196", "\n", "model_family", "=", "'ImageNet224'", "\n", "", "elif", "dataset", "==", "'food-101'", ":", "\n", "        ", "dataset_dir", "=", "'Food-101Models'", "\n", "num_classes", "=", "101", "\n", "model_family", "=", "'ImageNet224'", "\n", "", "elif", "dataset", "==", "'lsun_scenes'", ":", "\n", "        ", "dataset_dir", "=", "'LSUNScenesModels'", "\n", "num_classes", "=", "10", "\n", "model_family", "=", "'ImageNet224'", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'Dataset not supported'", ")", "\n", "\n", "", "if", "type", "in", "non_native_model", ":", "\n", "        ", "model", "=", "load_non_native_model", "(", "type", ",", "folder", ",", "device", ")", "\n", "if", "temperature", "is", "not", "None", ":", "\n", "            ", "model", "=", "TemperatureWrapper", "(", "model", ",", "temperature", ")", "\n", "", "return", "model", "\n", "\n", "", "if", "'BiT'", "in", "type", ":", "\n", "        ", "model", "=", "load_big_transfer_model", "(", "type", ",", "folder", ",", "checkpoint", ",", "device", ",", "dataset_dir", ",", "num_classes", ",", "load_temp", "=", "load_temp", ")", "\n", "model", "=", "BigTransferWrapper", "(", "model", ")", "\n", "", "else", ":", "\n", "        ", "if", "model_family", "==", "'Cifar32'", ":", "\n", "            ", "model", "=", "load_cifar_family_model", "(", "type", ",", "folder", ",", "checkpoint", ",", "device", ",", "dataset_dir", ",", "num_classes", ",", "\n", "load_temp", "=", "load_temp", ",", "model_params", "=", "model_params", ")", "\n", "", "elif", "model_family", "==", "'ImageNet224'", ":", "\n", "            ", "model", "=", "load_imagenet_family_model", "(", "type", ",", "folder", ",", "checkpoint", ",", "device", ",", "dataset_dir", ",", "num_classes", ",", "\n", "load_temp", "=", "load_temp", ",", "model_params", "=", "model_params", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", ")", "\n", "\n", "", "if", "dataset", "==", "'cifar10'", ":", "\n", "            ", "model", "=", "Cifar10Wrapper", "(", "model", ")", "\n", "", "elif", "dataset", "==", "'cifar100'", ":", "\n", "            ", "model", "=", "Cifar100Wrapper", "(", "model", ")", "\n", "", "elif", "dataset", "==", "'svhn'", ":", "\n", "            ", "model", "=", "SVHNWrapper", "(", "model", ")", "\n", "", "elif", "dataset", "==", "'tinyimagenet'", ":", "\n", "            ", "model", "=", "Cifar100Wrapper", "(", "model", ")", "\n", "", "elif", "dataset", "==", "'imagenet'", ":", "\n", "            ", "model", "=", "ImageNetWrapper", "(", "model", ")", "\n", "", "elif", "dataset", "==", "'restrictedimagenet'", ":", "\n", "            ", "model", "=", "RestrictedImageNetWrapper", "(", "model", ")", "\n", "", "elif", "dataset", "==", "'imagenet100'", ":", "\n", "            ", "model", "=", "ImageNetWrapper", "(", "model", ")", "\n", "", "elif", "dataset", "==", "'pets'", ":", "\n", "            ", "model", "=", "ImageNetWrapper", "(", "model", ")", "\n", "", "elif", "dataset", "==", "'food-101'", ":", "\n", "            ", "model", "=", "ImageNetWrapper", "(", "model", ")", "\n", "", "elif", "dataset", "==", "'cars'", ":", "\n", "            ", "model", "=", "ImageNetWrapper", "(", "model", ")", "\n", "", "elif", "dataset", "==", "'flowers'", ":", "\n", "            ", "model", "=", "ImageNetWrapper", "(", "model", ")", "\n", "", "elif", "dataset", "==", "'lsun_scenes'", ":", "\n", "            ", "model", "=", "ImageNetWrapper", "(", "model", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'Dataset not supported'", ")", "\n", "\n", "", "", "model", ".", "to", "(", "device", ")", "\n", "\n", "if", "temperature", "is", "not", "None", ":", "\n", "        ", "model", "=", "TemperatureWrapper", "(", "model", ",", "temperature", ")", "\n", "\n", "", "model", ".", "eval", "(", ")", "\n", "return", "model", "", "", ""]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.utils.models.Metric.__init__": [[22, 24], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models_32x32.shake_pyramidnet.ShakePyramidNet.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.utils.models.Metric.forward": [[25, 27], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "y", ",", "dim", "=", "None", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.utils.models.Metric.__add__": [[28, 30], ["models.SumMetric"], "methods", ["None"], ["", "def", "__add__", "(", "self", ",", "other", ")", ":", "\n", "        ", "return", "SumMetric", "(", "self", ",", "other", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.utils.models.Metric.__rmul__": [[31, 33], ["models.ScaleMetric"], "methods", ["None"], ["", "def", "__rmul__", "(", "self", ",", "scalar", ")", ":", "\n", "        ", "return", "ScaleMetric", "(", "scalar", ",", "self", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.utils.models.SumMetric.__init__": [[36, 40], ["models.Metric.__init__"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models_32x32.shake_pyramidnet.ShakePyramidNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "metric1", ",", "metric2", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "metric1", "=", "metric1", "\n", "self", ".", "metric2", "=", "metric2", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.utils.models.SumMetric.forward": [[41, 43], ["models.SumMetric.metric1", "models.SumMetric.metric2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "y", ",", "dim", "=", "None", ")", ":", "\n", "        ", "return", "self", ".", "metric1", "(", "x", ",", "y", ",", "dim", "=", "dim", ")", "+", "self", ".", "metric2", "(", "x", ",", "y", ",", "dim", "=", "dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.utils.models.ScaleMetric.__init__": [[46, 50], ["models.Metric.__init__"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models_32x32.shake_pyramidnet.ShakePyramidNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "metric1", ",", "factor", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "metric1", "=", "metric1", "\n", "self", ".", "factor", "=", "factor", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.utils.models.ScaleMetric.forward": [[51, 53], ["models.ScaleMetric.metric1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "y", ",", "dim", "=", "None", ")", ":", "\n", "        ", "return", "self", ".", "factor", "*", "self", ".", "metric1", "(", "x", ",", "y", ",", "dim", "=", "dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.utils.models.LpMetric.__init__": [[56, 60], ["models.Metric.__init__"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models_32x32.shake_pyramidnet.ShakePyramidNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "p", "=", "2", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "p", "=", "p", "\n", "self", ".", "norm_const", "=", "0.", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.utils.models.LpMetric.forward": [[61, 63], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "y", ",", "dim", "=", "None", ")", ":", "\n", "        ", "return", "(", "x", "-", "y", ")", ".", "norm", "(", "p", "=", "self", ".", "p", ",", "dim", "=", "dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.utils.models.PerceptualMetric.__init__": [[66, 79], ["models.Metric.__init__", "int", "sorted", "numpy.random.choice", "numpy.random.choice"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models_32x32.shake_pyramidnet.ShakePyramidNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "model", ",", "p", "=", "2", ",", "latent_dim", "=", "122880", ",", "indices", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "model", "=", "model", "\n", "self", ".", "p", "=", "p", "\n", "self", ".", "norm_const", "=", "0.", "\n", "\n", "self", ".", "latent_dim", "=", "latent_dim", "\n", "reduced_latent_dim", "=", "int", "(", "0.01", "*", "latent_dim", ")", "\n", "\n", "if", "indices", "is", "None", ":", "\n", "            ", "self", ".", "indices", "=", "sorted", "(", "np", ".", "random", ".", "choice", "(", "latent_dim", ",", "size", "=", "reduced_latent_dim", ",", "replace", "=", "False", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "indices", "=", "indices", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.utils.models.PerceptualMetric.forward": [[80, 83], ["models.PerceptualMetric.model", "models.PerceptualMetric.model"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ",", "y", ",", "dim", "=", "None", ")", ":", "\n", "        ", "return", "(", "self", ".", "model", "(", "x", ")", "[", ":", ",", "self", ".", "indices", "]", "[", "None", ",", ":", ",", ":", "]", "\n", "-", "self", ".", "model", "(", "y", ")", "[", ":", ",", "self", ".", "indices", "]", "[", ":", ",", "None", ",", ":", "]", ")", ".", "norm", "(", "p", "=", "self", ".", "p", ",", "dim", "=", "dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.utils.models.PerceptualPCA.__init__": [[86, 96], ["models.Metric.__init__", "sorted", "numpy.random.choice", "numpy.random.choice"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models_32x32.shake_pyramidnet.ShakePyramidNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "model", ",", "pca", ",", "indices", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "model", "=", "model", "\n", "\n", "self", ".", "pca", "=", "pca", "\n", "\n", "if", "indices", "is", "None", ":", "\n", "            ", "self", ".", "indices", "=", "sorted", "(", "np", ".", "random", ".", "choice", "(", "latent_dim", ",", "size", "=", "reduced_latent_dim", ",", "replace", "=", "False", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "indices", "=", "indices", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.utils.models.PerceptualPCA.forward": [[98, 101], ["models.PerceptualPCA.pca", "models.PerceptualPCA.model", "models.PerceptualPCA.model"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ",", "y", ",", "dim", "=", "None", ")", ":", "\n", "        ", "return", "self", ".", "pca", "(", "self", ".", "model", "(", "x", ")", "[", ":", ",", "self", ".", "indices", "]", "[", "None", ",", ":", ",", ":", "]", ",", "\n", "self", ".", "model", "(", "y", ")", "[", ":", ",", "self", ".", "indices", "]", "[", ":", ",", "None", ",", ":", "]", ",", "dim", "=", "dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.utils.models.PCAMetric.__init__": [[104, 127], ["models.Metric.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "models.PCAMetric.singular_values.log().sum", "numpy.array", "numpy.array", "sklearn.decomposition.PCA", "sklearn.decomposition.PCA.fit", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "numpy.linalg.eig", "numpy.linalg.eig", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "models.PCAMetric.singular_values.sqrt", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "models.PCAMetric.singular_values.log"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models_32x32.shake_pyramidnet.ShakePyramidNet.__init__", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_loss.DistanceLogger.log"], ["    ", "def", "__init__", "(", "self", ",", "X", ",", "p", "=", "2", ",", "min_sv_factor", "=", "100.", ",", "covar", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "p", "=", "p", "\n", "\n", "if", "covar", "is", "None", ":", "\n", "            ", "X", "=", "np", ".", "array", "(", "X", ")", "\n", "pca", "=", "PCA", "(", ")", "\n", "pca", ".", "fit", "(", "X", ")", "\n", "\n", "self", ".", "comp_vecs", "=", "nn", ".", "Parameter", "(", "torch", ".", "tensor", "(", "pca", ".", "components_", ")", ",", "requires_grad", "=", "False", ")", "\n", "self", ".", "singular_values", "=", "torch", ".", "tensor", "(", "pca", ".", "singular_values_", ")", "\n", "", "else", ":", "\n", "            ", "singular_values", ",", "comp_vecs", "=", "np", ".", "linalg", ".", "eig", "(", "covar", ")", "\n", "\n", "self", ".", "comp_vecs", "=", "nn", ".", "Parameter", "(", "torch", ".", "tensor", "(", "comp_vecs", ",", "dtype", "=", "torch", ".", "float", ")", ",", "requires_grad", "=", "False", ")", "\n", "self", ".", "singular_values", "=", "torch", ".", "tensor", "(", "singular_values", ",", "dtype", "=", "torch", ".", "float", ")", "\n", "\n", "", "self", ".", "min_sv", "=", "self", ".", "singular_values", "[", "0", "]", "/", "min_sv_factor", "\n", "self", ".", "singular_values", "[", "self", ".", "singular_values", "<", "self", ".", "min_sv", "]", "=", "self", ".", "min_sv", "\n", "self", ".", "singular_values", "=", "nn", ".", "Parameter", "(", "self", ".", "singular_values", ",", "requires_grad", "=", "False", ")", "\n", "self", ".", "singular_values_sqrt", "=", "nn", ".", "Parameter", "(", "self", ".", "singular_values", ".", "sqrt", "(", ")", ",", "requires_grad", "=", "False", ")", "\n", "\n", "self", ".", "norm_const", "=", "self", ".", "singular_values", ".", "log", "(", ")", ".", "sum", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.utils.models.PCAMetric.forward": [[128, 132], ["torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "rescaled_dist.norm"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "y", ",", "dim", "=", "None", ")", ":", "\n", "        ", "rotated_dist", "=", "torch", ".", "einsum", "(", "\"ijk,lk->ijl\"", ",", "(", "x", "-", "y", ",", "self", ".", "comp_vecs", ")", ")", "\n", "rescaled_dist", "=", "rotated_dist", "/", "self", ".", "singular_values_sqrt", "[", "None", ",", "None", ",", ":", "]", "\n", "return", "rescaled_dist", ".", "norm", "(", "dim", "=", "2", ",", "p", "=", "self", ".", "p", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.utils.models.MyPCA.__init__": [[139, 146], ["models.MyPCA.comp_vecs.inverse", "singular_values.sqrt", "tuple", "torch.tensor().prod().item", "torch.tensor().prod().item", "torch.tensor().prod().item", "torch.tensor().prod().item", "torch.tensor().prod().item", "torch.tensor().prod().item", "torch.tensor().prod().item", "torch.tensor().prod().item", "torch.tensor().prod().item", "torch.tensor().prod().item", "torch.tensor().prod().item", "torch.tensor().prod().item", "torch.tensor().prod().item", "torch.tensor().prod().item", "torch.tensor().prod().item", "torch.tensor().prod().item", "torch.tensor().prod", "torch.tensor().prod", "torch.tensor().prod", "torch.tensor().prod", "torch.tensor().prod", "torch.tensor().prod", "torch.tensor().prod", "torch.tensor().prod", "torch.tensor().prod", "torch.tensor().prod", "torch.tensor().prod", "torch.tensor().prod", "torch.tensor().prod", "torch.tensor().prod", "torch.tensor().prod", "torch.tensor().prod", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "comp_vecs", ",", "singular_values", ",", "shape", ")", ":", "\n", "        ", "self", ".", "comp_vecs", "=", "comp_vecs", "\n", "self", ".", "comp_vecs_inverse", "=", "self", ".", "comp_vecs", ".", "inverse", "(", ")", "\n", "self", ".", "singular_values", "=", "singular_values", "\n", "self", ".", "singular_values_sqrt", "=", "singular_values", ".", "sqrt", "(", ")", "\n", "self", ".", "shape", "=", "tuple", "(", "shape", ")", "\n", "self", ".", "D", "=", "torch", ".", "tensor", "(", "shape", ")", ".", "prod", "(", ")", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.utils.models.MyPCA.inv_trans": [[147, 150], ["x.view", "tuple"], "methods", ["None"], ["", "def", "inv_trans", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "(", "(", "x", "*", "self", ".", "singular_values_sqrt", "[", "None", ",", ":", "]", ")", "@", "self", ".", "comp_vecs_inverse", ")", "\n", "return", "x", ".", "view", "(", "tuple", "(", "[", "x", ".", "shape", "[", "0", "]", "]", ")", "+", "self", ".", "shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.utils.models.MyPCA.trans": [[151, 154], ["x.view.view.view"], "methods", ["None"], ["", "def", "trans", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "x", ".", "view", "(", "-", "1", ",", "self", ".", "D", ")", "\n", "return", "(", "(", "x", "@", "self", ".", "comp_vecs", ")", "/", "self", ".", "singular_values_sqrt", "[", "None", ",", ":", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.utils.models.LeNet.__init__": [[157, 167], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models_32x32.shake_pyramidnet.ShakePyramidNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "normalize", "=", "True", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "1", ",", "32", ",", "5", ",", "1", ",", "padding", "=", "2", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "32", ",", "64", ",", "5", ",", "1", ",", "padding", "=", "2", ")", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "7", "*", "7", "*", "64", ",", "1024", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "1024", ",", "10", ")", "\n", "\n", "self", ".", "normalize", "=", "normalize", "\n", "self", ".", "mean", "=", "0.1307", "\n", "self", ".", "std", "=", "0.3081", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.utils.models.LeNet.forward": [[168, 179], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "models.LeNet.view", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "models.LeNet.fc2", "models.LeNet.conv1", "models.LeNet.conv2", "models.LeNet.fc1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "normalize", ":", "\n", "            ", "x", "=", "(", "x", "-", "self", ".", "mean", ")", "/", "self", ".", "std", "\n", "", "x", "=", "F", ".", "relu", "(", "self", ".", "conv1", "(", "x", ")", ")", "\n", "x", "=", "F", ".", "max_pool2d", "(", "x", ",", "2", ",", "2", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "conv2", "(", "x", ")", ")", "\n", "x", "=", "F", ".", "max_pool2d", "(", "x", ",", "2", ",", "2", ")", "\n", "x", "=", "x", ".", "view", "(", "-", "1", ",", "7", "*", "7", "*", "64", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "fc1", "(", "x", ")", ")", "\n", "x", "=", "self", ".", "fc2", "(", "x", ")", "\n", "return", "x", "\n", "", "", ""]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.utils.plotting.plot_samples": [[4, 22], ["range", "matplotlib.show", "print", "matplotlib.subplot", "matplotlib.title", "matplotlib.xticks", "matplotlib.yticks", "matplotlib.imshow", "data[].squeeze().detach().cpu", "matplotlib.imshow", "y[].max().exp().item", "data[].transpose().transpose().detach().cpu", "data[].squeeze().detach", "[].item", "y[].max().exp", "data[].transpose().transpose().detach", "data[].squeeze", "y[].max", "data[].transpose().transpose", "y.argmax", "data[].transpose"], "function", ["None"], ["def", "plot_samples", "(", "Y", ",", "data", ",", "dataset", "=", "'MNIST'", ")", ":", "\n", "    ", "for", "i", "in", "range", "(", "10", ")", ":", "\n", "        ", "plt", ".", "subplot", "(", "2", ",", "5", ",", "i", "+", "1", ")", "\n", "string", "=", "''", "\n", "for", "y", "in", "Y", ":", "\n", "            ", "string", "+=", "(", "'\\n'", "\n", "+", "classes_dict", "[", "dataset", "]", "[", "y", ".", "argmax", "(", "1", ")", "[", "i", "]", ".", "item", "(", ")", "]", "\n", "+", "\": %.3f\"", "%", "y", "[", "i", "]", ".", "max", "(", ")", ".", "exp", "(", ")", ".", "item", "(", ")", ")", "\n", "\n", "", "plt", ".", "title", "(", "string", ")", "\n", "if", "dataset", "in", "[", "'MNIST'", ",", "'FMNIST'", "]", ":", "\n", "            ", "plt", ".", "imshow", "(", "data", "[", "i", "]", ".", "squeeze", "(", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ",", "cmap", "=", "'gray'", ",", "interpolation", "=", "'none'", ")", "\n", "", "elif", "dataset", "in", "[", "'CIFAR10'", ",", "'SVHN'", ",", "'CIFAR100'", "]", ":", "\n", "            ", "plt", ".", "imshow", "(", "data", "[", "i", "]", ".", "transpose", "(", "0", ",", "2", ")", ".", "transpose", "(", "0", ",", "1", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ",", "interpolation", "=", "'none'", ")", "\n", "", "plt", ".", "xticks", "(", "[", "]", ")", "\n", "plt", ".", "yticks", "(", "[", "]", ")", "\n", "", "plt", ".", "show", "(", ")", "\n", "print", "(", "'\\n'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.utils.average_model.AveragedModel.__init__": [[11, 23], ["torch.nn.Module.__init__", "copy.deepcopy", "average_model.AveragedModel.register_buffer", "average_model.AveragedModel.module.to", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models_32x32.shake_pyramidnet.ShakePyramidNet.__init__"], ["def", "__init__", "(", "self", ",", "model", ",", "avg_type", "=", "'ema'", ",", "ema_decay", "=", "0.990", ",", "avg_batchnorm", "=", "False", ",", "device", "=", "None", ")", ":", "\n", "        ", "super", "(", "AveragedModel", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "module", "=", "deepcopy", "(", "model", ")", "\n", "if", "device", "is", "not", "None", ":", "\n", "            ", "self", ".", "module", "=", "self", ".", "module", ".", "to", "(", "device", ")", "\n", "", "self", ".", "register_buffer", "(", "'n_averaged'", ",", "\n", "torch", ".", "tensor", "(", "0", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "device", ")", ")", "\n", "\n", "assert", "avg_type", "in", "[", "'ema'", ",", "'swa'", "]", "\n", "self", ".", "avg_type", "=", "avg_type", "\n", "self", ".", "ema_decay", "=", "ema_decay", "\n", "self", ".", "avg_batchnorm", "=", "avg_batchnorm", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.utils.average_model.AveragedModel.forward": [[24, 26], ["average_model.AveragedModel.module"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "self", ".", "module", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.utils.average_model.AveragedModel.update_parameters": [[27, 66], ["average_model.AveragedModel.n_averaged.item", "zip", "min", "average_model.AveragedModel.parameters", "model.parameters", "p_model.detach().to", "zip", "NotImplementedError", "p_swa.detach().copy_", "p_swa.detach().copy_", "average_model.AveragedModel.module.modules", "model.modules", "issubclass", "p_model.detach", "avg_fn", "type", "model_mod.running_mean.detach().to", "model_mod.running_var.detach().to", "p_swa.detach", "p_swa.detach", "p_swa.detach", "avg_mod.running_mean.detach().copy_", "avg_mod.running_var.detach().copy_", "avg_mod.running_mean.detach().copy_", "avg_mod.running_var.detach().copy_", "model_mod.running_mean.detach", "model_mod.running_var.detach", "avg_fn", "avg_fn", "avg_mod.running_mean.detach", "avg_mod.running_var.detach", "avg_mod.running_mean.detach", "avg_mod.running_mean.detach", "avg_mod.running_var.detach", "avg_mod.running_var.detach"], "methods", ["None"], ["", "def", "update_parameters", "(", "self", ",", "model", ")", ":", "\n", "        ", "n", "=", "self", ".", "n_averaged", ".", "item", "(", ")", "\n", "if", "self", ".", "avg_type", "==", "'ema'", ":", "\n", "            ", "decay", "=", "min", "(", "\n", "self", ".", "ema_decay", ",", "\n", "(", "1", "+", "n", ")", "/", "(", "10", "+", "n", ")", "\n", ")", "\n", "avg_fn", "=", "lambda", "averaged_model_parameter", ",", "model_parameter", ":", "decay", "*", "averaged_model_parameter", "+", "(", "1.0", "-", "decay", ")", "*", "model_parameter", "\n", "", "elif", "self", ".", "avg_type", "==", "'swa'", ":", "\n", "            ", "avg_fn", "=", "lambda", "averaged_model_parameter", ",", "model_parameter", ":", "(", "model_parameter", "-", "averaged_model_parameter", ")", "/", "(", "n", "+", "1", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", ")", "\n", "\n", "", "for", "p_swa", ",", "p_model", "in", "zip", "(", "self", ".", "parameters", "(", ")", ",", "model", ".", "parameters", "(", ")", ")", ":", "\n", "            ", "device", "=", "p_swa", ".", "device", "\n", "p_model_", "=", "p_model", ".", "detach", "(", ")", ".", "to", "(", "device", ")", "\n", "if", "n", "==", "0", ":", "\n", "                ", "p_swa", ".", "detach", "(", ")", ".", "copy_", "(", "p_model_", ")", "\n", "", "else", ":", "\n", "                ", "p_swa", ".", "detach", "(", ")", ".", "copy_", "(", "avg_fn", "(", "p_swa", ".", "detach", "(", ")", ",", "p_model_", ",", ")", ")", "\n", "\n", "", "", "if", "self", ".", "avg_batchnorm", ":", "\n", "            ", "for", "avg_mod", ",", "model_mod", "in", "zip", "(", "self", ".", "module", ".", "modules", "(", ")", ",", "model", ".", "modules", "(", ")", ")", ":", "\n", "                ", "if", "issubclass", "(", "type", "(", "model_mod", ")", ",", "_BatchNorm", ")", ":", "\n", "                    ", "device", "=", "avg_mod", ".", "running_mean", ".", "device", "\n", "mean_model_", "=", "model_mod", ".", "running_mean", ".", "detach", "(", ")", ".", "to", "(", "device", ")", "\n", "var_model_", "=", "model_mod", ".", "running_var", ".", "detach", "(", ")", ".", "to", "(", "device", ")", "\n", "if", "n", "==", "0", ":", "\n", "                        ", "avg_mod", ".", "running_mean", ".", "detach", "(", ")", ".", "copy_", "(", "mean_model_", ")", "\n", "avg_mod", ".", "running_var", ".", "detach", "(", ")", ".", "copy_", "(", "var_model_", ")", "\n", "", "else", ":", "\n", "                        ", "avg_mod", ".", "running_mean", ".", "detach", "(", ")", ".", "copy_", "(", "\n", "avg_fn", "(", "avg_mod", ".", "running_mean", ".", "detach", "(", ")", ",", "mean_model_", ")", ")", "\n", "avg_mod", ".", "running_var", ".", "detach", "(", ")", ".", "copy_", "(", "\n", "avg_fn", "(", "avg_mod", ".", "running_var", ".", "detach", "(", ")", ",", "var_model_", ")", ")", "\n", "\n", "", "", "", "", "self", ".", "n_averaged", "+=", "1", "", "", "", ""]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.utils.od_radius_confidence.od_radius_confidence": [[20, 193], ["torch.zeros", "torch.zeros", "torch.zeros", "len", "int", "iter", "pathlib.Path().mkdir", "range", "len", "len", "numpy.ceil", "data_batches.append", "torch.no_grad", "torch.no_grad", "torch.no_grad", "enumerate", "pathlib.Path", "next", "NotImplementedError", "print", "pathlib.Path().mkdir", "pathlib.Path().mkdir", "utils.load_trained_model.load_model", "nn.DataParallel.eval", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "enumerate", "torch.mean", "torch.mean", "torch.mean", "print", "print", "range", "torch.DataParallel", "data.to.to", "torch.max", "torch.max", "torch.max", "enumerate", "matplotlib.subplots", "range", "matplotlib.tight_layout", "fig.savefig", "fig.savefig", "matplotlib.close", "pathlib.Path", "pathlib.Path", "len", "len", "len", "len", "nn.DataParallel.", "torch.max", "torch.max", "torch.max", "att.perturb().detach.detach().cpu", "predicted_class.detach().cpu", "max_conf.detach().cpu", "len", "utils.ArgminPGD", "at.ArgminPGD.perturb().detach", "torch.softmax", "axs[].axis", "axs[].title.set_text", "imgs[].permute", "axs[].imshow", "NotImplementedError", "nn.DataParallel.", "att.perturb().detach.detach", "predicted_class.detach", "max_conf.detach", "at.ArgminPGD.perturb"], "function", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.utils.load_trained_model.load_model", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models.ebm_wrn.gradient_attack_wrapper.eval", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.adversarial_attacks.restartattack.RestartAttack.perturb"], ["def", "od_radius_confidence", "(", "model_descriptions", ",", "radii", ",", "plot_radii", ",", "dataloader", ",", "bs", ",", "datapoints", ",", "class_labels", ",", "device", ",", "eval_dir", ",", "dataset", ",", "img_size", "=", "32", ",", "norm", "=", "'L2'", ",", "steps", "=", "500", ",", "stepsize", "=", "0.1", ",", "device_ids", "=", "None", ")", ":", "\n", "    ", "model_radii_mmc", "=", "torch", ".", "zeros", "(", "len", "(", "model_descriptions", ")", ",", "len", "(", "radii", ")", ")", "\n", "num_classes", "=", "len", "(", "class_labels", ")", "\n", "\n", "num_batches", "=", "int", "(", "np", ".", "ceil", "(", "datapoints", "/", "bs", ")", ")", "\n", "\n", "data_iterator", "=", "iter", "(", "dataloader", ")", "\n", "\n", "data_batches", "=", "[", "]", "\n", "dir", "=", "f'{eval_dir}/Original/ODWorstCaseConfidence_new/'", "\n", "pathlib", ".", "Path", "(", "dir", ")", ".", "mkdir", "(", "parents", "=", "True", ",", "exist_ok", "=", "True", ")", "\n", "example_idx", "=", "0", "\n", "samples_collected", "=", "0", "\n", "for", "_", "in", "range", "(", "num_batches", ")", ":", "\n", "        ", "data", "=", "next", "(", "data_iterator", ")", "[", "0", "]", "\n", "if", "(", "samples_collected", "+", "data", ".", "shape", "[", "0", "]", ")", ">", "datapoints", ":", "\n", "            ", "raise", "NotImplementedError", "(", ")", "\n", "\n", "", "samples_collected", "+=", "data", ".", "shape", "[", "0", "]", "\n", "data_batches", ".", "append", "(", "data", ")", "\n", "# for img_idx in range(ref_data.shape[0]):", "\n", "#     img = ref_data[img_idx,:]", "\n", "#     file_pre = f'{dir}{example_idx}_gt.png'", "\n", "#     img_pil = transforms.ToPILImage()(img)", "\n", "#     img_pil.save(file_pre)", "\n", "#     example_idx += 1", "\n", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "model_idx", ",", "(", "type", ",", "folder", ",", "checkpoint", ",", "temperature", ",", "temp", ")", "in", "enumerate", "(", "model_descriptions", ")", ":", "\n", "            ", "dir", "=", "f'{eval_dir}/{folder}_{checkpoint}/ODWorstCaseConfidence_new/'", "\n", "print", "(", "f'Starting OD process: {folder}'", ")", "\n", "pathlib", ".", "Path", "(", "dir", ")", ".", "mkdir", "(", "parents", "=", "True", ",", "exist_ok", "=", "True", ")", "\n", "indiv_dir", "=", "f'{dir}SingleImages/'", "\n", "pathlib", ".", "Path", "(", "indiv_dir", ")", ".", "mkdir", "(", "parents", "=", "True", ",", "exist_ok", "=", "True", ")", "\n", "\n", "model", "=", "load_model", "(", "type", ",", "folder", ",", "checkpoint", ",", "temperature", ",", "device", ",", "load_temp", "=", "temp", ",", "dataset", "=", "dataset", ")", "\n", "if", "device_ids", "is", "not", "None", "and", "len", "(", "device_ids", ")", ">", "1", ":", "\n", "                ", "model", "=", "nn", ".", "DataParallel", "(", "model", ",", "device_ids", "=", "device_ids", ")", "\n", "", "model", ".", "eval", "(", ")", "\n", "\n", "\n", "imgs", "=", "torch", ".", "zeros", "(", "(", "len", "(", "radii", ")", ",", "datapoints", ",", "3", ",", "img_size", ",", "img_size", ")", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "predictions", "=", "torch", ".", "zeros", "(", "(", "len", "(", "radii", ")", ",", "datapoints", ")", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "confidences", "=", "torch", ".", "zeros", "(", "(", "len", "(", "radii", ")", ",", "datapoints", ")", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "\n", "datapoint_idx", "=", "0", "\n", "for", "batch_idx", ",", "data", "in", "enumerate", "(", "data_batches", ")", ":", "\n", "                ", "data", "=", "data", ".", "to", "(", "device", ")", "\n", "_", ",", "model_predictions", "=", "torch", ".", "max", "(", "model", "(", "data", ")", ",", "dim", "=", "1", ")", "\n", "#attack current ref_data for all radi", "\n", "for", "radius_idx", ",", "radius", "in", "enumerate", "(", "radii", ")", ":", "\n", "                    ", "if", "radius", ">", "1e-8", ":", "\n", "                        ", "step_multiplier", "=", "5", "\n", "eps", "=", "radii", "[", "radius_idx", "]", "\n", "\n", "if", "temperature", "is", "not", "None", "and", "temperature", "<", "0.2", ":", "\n", "                            ", "loss", "=", "'logit_max_target'", "\n", "raise", "NotImplementedError", "(", ")", "\n", "", "else", ":", "\n", "                            ", "loss", "=", "'conf'", "\n", "\n", "# att = at.APGDAttack(density_model, num_classes, n_restarts=1, n_iter=100 * step_multiplier,", "\n", "#                   eps=eps, norm='L2', loss=loss, eot_iter=1)", "\n", "\n", "", "att", "=", "at", ".", "ArgminPGD", "(", "eps", ",", "steps", ",", "stepsize", ",", "num_classes", ",", "norm", "=", "norm", ",", "loss", "=", "loss", ",", "model", "=", "model", ")", "\n", "adv_samples", "=", "att", ".", "perturb", "(", "data", ",", "model_predictions", ",", "targeted", "=", "True", ")", ".", "detach", "(", ")", "\n", "", "else", ":", "\n", "                        ", "adv_samples", "=", "data", "\n", "\n", "", "max_conf", ",", "predicted_class", "=", "torch", ".", "max", "(", "F", ".", "softmax", "(", "model", "(", "adv_samples", ")", ",", "dim", "=", "1", ")", ",", "dim", "=", "1", ")", "\n", "\n", "imgs", "[", "radius_idx", ",", "datapoint_idx", ":", "(", "datapoint_idx", "+", "data", ".", "shape", "[", "0", "]", ")", ",", ":", "]", "=", "adv_samples", ".", "detach", "(", ")", ".", "cpu", "(", ")", "\n", "predictions", "[", "radius_idx", ",", "datapoint_idx", ":", "(", "datapoint_idx", "+", "data", ".", "shape", "[", "0", "]", ")", "]", "=", "predicted_class", ".", "detach", "(", ")", ".", "cpu", "(", ")", "\n", "confidences", "[", "radius_idx", ",", "datapoint_idx", ":", "(", "datapoint_idx", "+", "data", ".", "shape", "[", "0", "]", ")", "]", "=", "max_conf", ".", "detach", "(", ")", ".", "cpu", "(", ")", "\n", "\n", "# #individual imgs", "\n", "# for img_idx in range(adv_samples.shape[0]):", "\n", "#     img_cpu = adv_samples[img_idx,:].detach().cpu()", "\n", "#     img_pil = transforms.ToPILImage()(img_cpu)", "\n", "#     file = f'{indiv_dir}batch_{batch_idx}_img_{img_idx}_radius_{radius_idx}-{radius}.png'", "\n", "#     img_pil.save(file)", "\n", "\n", "#jump to next ref_data batch", "\n", "", "datapoint_idx", "+=", "adv_samples", ".", "shape", "[", "0", "]", "\n", "\n", "", "model_radii_mmc", "[", "model_idx", ",", ":", "]", "=", "torch", ".", "mean", "(", "confidences", ",", "dim", "=", "1", ")", "\n", "\n", "print", "(", "f'{folder}'", ")", "\n", "print", "(", "f'Max confs: {model_radii_mmc[model_idx, :]}'", ")", "\n", "\n", "# plt combo plot", "\n", "num_radii_to_plot", "=", "0", "\n", "for", "plot_radius", "in", "plot_radii", ":", "\n", "                ", "if", "plot_radius", ":", "\n", "                    ", "num_radii_to_plot", "+=", "1", "\n", "\n", "", "", "for", "img_idx", "in", "range", "(", "datapoints", ")", ":", "\n", "                ", "scale_factor", "=", "1.5", "\n", "fig", ",", "axs", "=", "plt", ".", "subplots", "(", "1", ",", "num_radii_to_plot", ",", "figsize", "=", "(", "scale_factor", "*", "num_radii_to_plot", ",", "1.3", "*", "scale_factor", ")", ")", "\n", "\n", "col_idx", "=", "0", "\n", "for", "radius_idx", "in", "range", "(", "len", "(", "radii", ")", ")", ":", "\n", "                    ", "if", "plot_radii", "[", "radius_idx", "]", ":", "\n", "                        ", "axs", "[", "col_idx", "]", ".", "axis", "(", "'off'", ")", "\n", "axs", "[", "col_idx", "]", ".", "title", ".", "set_text", "(", "\n", "f'{class_labels[predictions[radius_idx, img_idx]]} - {confidences[radius_idx, img_idx]:.2f}'", ")", "\n", "img_cpu", "=", "imgs", "[", "radius_idx", ",", "img_idx", ",", ":", "]", ".", "permute", "(", "1", ",", "2", ",", "0", ")", "\n", "axs", "[", "col_idx", "]", ".", "imshow", "(", "img_cpu", ",", "interpolation", "=", "'lanczos'", ")", "\n", "col_idx", "+=", "1", "\n", "\n", "", "", "plt", ".", "tight_layout", "(", ")", "\n", "fig", ".", "savefig", "(", "f'{dir}img_{img_idx}.png'", ")", "\n", "fig", ".", "savefig", "(", "f'{dir}img_{img_idx}.pdf'", ")", "\n", "plt", ".", "close", "(", "fig", ")", "\n", "\n", "# # plt combo plot with diff", "\n", "# for img_idx in range(datapoints):", "\n", "#     scale_factor = 1.5", "\n", "#     fig, axs = plt.subplots(2, num_radii_to_plot, figsize=(scale_factor * num_radii_to_plot, 2 * 1.3 * scale_factor))", "\n", "#", "\n", "#     orig_img = imgs[0, img_idx, :].permute(1, 2, 0)", "\n", "#", "\n", "#     col_idx = 0", "\n", "#     for radius_idx in range(len(radii)):", "\n", "#         if plot_radii[radius_idx]:", "\n", "#             axs[0, col_idx].axis('off')", "\n", "#             axs[0, col_idx].title.set_text(", "\n", "#                 f'{class_labels[predictions[radius_idx, img_idx]]} - {confidences[radius_idx, img_idx]:.2f}')", "\n", "#             img_cpu = imgs[radius_idx, img_idx, :].permute(1, 2, 0)", "\n", "#             axs[0, col_idx].imshow(img_cpu, interpolation='lanczos')", "\n", "#", "\n", "#             amplification = 5", "\n", "#", "\n", "#             diff = torch.sum((orig_img - img_cpu) ** 2, dim=2, keepdim=True)", "\n", "#             diff_total = torch.sum(diff.view(diff.shape[0], -1))[..., None, None, None]", "\n", "#             diff_normalized = torch.sqrt(diff) / torch.sqrt(diff_total)", "\n", "#             diff_normalized = torch.cat([diff_normalized, diff_normalized, diff_normalized], dim=2)", "\n", "#             diff_normalized = torch.clamp(amplification * diff_normalized, 0, 1)", "\n", "#             axs[1, col_idx].axis('off')", "\n", "#             axs[1, col_idx].imshow(diff_normalized, interpolation='lanczos')", "\n", "#             col_idx += 1", "\n", "#", "\n", "#     plt.tight_layout()", "\n", "#     fig.savefig(f'{dir}img_{img_idx}_diff.png')", "\n", "#     fig.savefig(f'{dir}img_{img_idx}_diff.pdf')", "\n", "#     plt.close(fig)", "\n", "\n", "# # animated gif parts", "\n", "# rows = int(np.sqrt(datapoints))", "\n", "# cols = int(np.ceil(datapoints / rows))", "\n", "# scale_factor = 4", "\n", "#", "\n", "# for radius_idx, radius in enumerate(radii):", "\n", "#     if plot_radii[radius_idx]:", "\n", "#         fig, axs = plt.subplots(rows, cols, figsize=(scale_factor * cols, scale_factor * rows))", "\n", "#         fig.suptitle(f'Radius: {radius}')", "\n", "#         for img_idx in range(datapoints):", "\n", "#             row_idx = int(img_idx / cols)", "\n", "#             col_idx = int(img_idx % cols)", "\n", "#", "\n", "#             img_cpu = imgs[radius_idx, img_idx, :].permute(1, 2, 0)", "\n", "#", "\n", "#             axs[row_idx, col_idx].axis('off')", "\n", "#             # axs[row_idx, col_idx].title.set_text(", "\n", "#             #     f'{class_labels[predictions[radius_idx, img_idx]]} - {confidences[radius_idx, img_idx]:.2f} - r {radii[radius_idx]:.2f}')", "\n", "#             axs[row_idx, col_idx].imshow(img_cpu, interpolation='lanczos')", "\n", "#", "\n", "#         fig.savefig(f'{dir}img_gif_part_{radius_idx}.png')", "\n", "#         fig.savefig(f'{dir}img_gif_part_{radius_idx}.pdf')", "\n", "#         plt.close(fig)", "\n", "\n", "#torch.save(model_radii_mmc, f'{eval_dir}OD_model_radii_mmc.pt')", "\n", "", "", "", "return", "model_radii_mmc", "", "", ""]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.utils.eval.StatsContainer.__init__": [[228, 233], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "stats", ",", "bounds", ",", "seeds", ",", "samples", ")", ":", "\n", "        ", "self", ".", "stats", "=", "stats", "\n", "self", ".", "bounds", "=", "bounds", "\n", "self", ".", "seeds", "=", "seeds", "\n", "self", ".", "samples", "=", "samples", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.utils.eval.StatsContainer.forward": [[233, 235], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "x", "\n", "", "", ""]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.utils.eval.test_metrics": [[22, 55], ["torch.no_grad", "torch.no_grad", "model.eval", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat().cpu().numpy", "torch.cat().cpu().numpy", "torch.cat().cpu().numpy", "torch.cat().cpu().numpy", "torch.cat.exp().mean().item", "sklearn.metrics.roc_auc_score", "data_in.to.to", "torch.log_softmax", "torch.cat.append", "data_out.to.to", "torch.log_softmax", "torch.cat.append", "model", "F.log_softmax.max", "model", "F.log_softmax.max", "torch.cat().cpu", "torch.cat().cpu", "torch.cat().cpu", "torch.cat().cpu", "torch.cat.exp().mean", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat.exp", "torch.ones_like", "torch.ones_like", "torch.zeros_like", "torch.zeros_like", "torch.cat.exp"], "function", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models.ebm_wrn.gradient_attack_wrapper.eval"], ["def", "test_metrics", "(", "model", ",", "device", ",", "in_loader", ",", "out_loader", ")", ":", "\n", "    ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "model", ".", "eval", "(", ")", "\n", "conf_in", "=", "[", "]", "\n", "conf_out", "=", "[", "]", "\n", "\n", "\n", "for", "data_in", ",", "_", "in", "in_loader", ":", "\n", "            ", "data_in", "=", "data_in", ".", "to", "(", "device", ")", "\n", "out", "=", "F", ".", "log_softmax", "(", "model", "(", "data_in", ")", ",", "dim", "=", "1", ")", "\n", "output_in", "=", "out", ".", "max", "(", "1", ")", "[", "0", "]", "\n", "\n", "conf_in", ".", "append", "(", "output_in", ")", "\n", "\n", "", "for", "data_out", ",", "_", "in", "out_loader", ":", "\n", "            ", "data_out", "=", "data_out", ".", "to", "(", "device", ")", "\n", "out", "=", "F", ".", "log_softmax", "(", "model", "(", "data_out", ")", ",", "dim", "=", "1", ")", "\n", "output_out", "=", "out", ".", "max", "(", "1", ")", "[", "0", "]", "\n", "\n", "conf_out", ".", "append", "(", "output_out", ")", "\n", "\n", "", "conf_in", "=", "torch", ".", "cat", "(", "conf_in", ")", "\n", "conf_out", "=", "torch", ".", "cat", "(", "conf_out", ")", "\n", "\n", "y_true", "=", "torch", ".", "cat", "(", "[", "torch", ".", "ones_like", "(", "conf_in", ")", ",", "\n", "torch", ".", "zeros_like", "(", "conf_out", ")", "]", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "y_scores", "=", "torch", ".", "cat", "(", "[", "conf_in", ",", "\n", "conf_out", "]", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "mmc", "=", "conf_out", ".", "exp", "(", ")", ".", "mean", "(", ")", ".", "item", "(", ")", "\n", "auroc", "=", "roc_auc_score", "(", "y_true", ",", "y_scores", ")", "\n", "fp95", "=", "(", "(", "conf_out", ".", "exp", "(", ")", ">", "0.95", ")", ".", "float", "(", ")", ".", "mean", "(", ")", ".", "item", "(", ")", ")", "\n", "return", "mmc", ",", "auroc", ",", "fp95", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.utils.eval.evaluate_model": [[57, 76], ["pd.DataFrame.set_index", "pandas.DataFrame", "eval.test_metrics", "metrics.append", "pandas.DataFrame", "eval.test_metrics", "metrics.append", "eval.test_metrics", "metrics.append"], "function", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.utils.eval.test_metrics", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.utils.eval.test_metrics", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.utils.eval.test_metrics"], ["", "", "def", "evaluate_model", "(", "model", ",", "device", ",", "base_loader", ",", "loaders", ",", "drop_mmc", "=", "False", ")", ":", "\n", "    ", "metrics", "=", "[", "]", "\n", "if", "drop_mmc", ":", "\n", "# mmc, _, _ = test_metrics(density_model, device, base_loader, base_loader)", "\n", "# metrics.append(['orig', 0.])", "\n", "        ", "for", "(", "name", ",", "data_loader", ")", "in", "loaders", ":", "\n", "            ", "mmc", ",", "auroc", ",", "fp95", "=", "test_metrics", "(", "model", ",", "device", ",", "base_loader", ",", "data_loader", ")", "\n", "metrics", ".", "append", "(", "[", "name", ",", "100", "*", "auroc", "]", ")", "\n", "\n", "", "df", "=", "pd", ".", "DataFrame", "(", "metrics", ",", "columns", "=", "[", "'DataSet'", ",", "'AUC'", "]", ")", "\n", "", "else", ":", "\n", "        ", "mmc", ",", "_", ",", "_", "=", "test_metrics", "(", "model", ",", "device", ",", "base_loader", ",", "base_loader", ")", "\n", "metrics", ".", "append", "(", "[", "'orig'", ",", "(", "\"%.2f\"", "%", "(", "100", "*", "mmc", ")", ",", "\"%.2f\"", "%", "(", "0.", ")", ")", "]", ")", "\n", "for", "(", "name", ",", "data_loader", ")", "in", "loaders", ":", "\n", "            ", "mmc", ",", "auroc", ",", "fp95", "=", "test_metrics", "(", "model", ",", "device", ",", "base_loader", ",", "data_loader", ")", "\n", "metrics", ".", "append", "(", "[", "name", ",", "(", "\"%.2f\"", "%", "(", "100", "*", "mmc", ")", ",", "\"%.2f\"", "%", "(", "100", "*", "auroc", ")", ")", "]", ")", "\n", "\n", "", "df", "=", "pd", ".", "DataFrame", "(", "metrics", ",", "columns", "=", "[", "'DataSet'", ",", "'MMC/AUC'", "]", ")", "\n", "", "return", "df", ".", "set_index", "(", "'DataSet'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.utils.eval.write_log": [[78, 83], ["writer.add_scalar", "writer.add_scalar"], "function", ["None"], ["", "def", "write_log", "(", "df", ",", "writer", ",", "epoch", "=", "0", ")", ":", "\n", "    ", "for", "i", "in", "df", ".", "index", ":", "\n", "        ", "if", "i", "!=", "'orig'", ":", "\n", "            ", "writer", ".", "add_scalar", "(", "'AUC/'", "+", "i", ",", "df", ".", "loc", "[", "i", "]", "[", "'AUC'", "]", ",", "epoch", ")", "\n", "writer", ".", "add_scalar", "(", "'MMC/'", "+", "i", ",", "df", ".", "loc", "[", "i", "]", "[", "'MMC'", "]", ",", "epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.utils.eval.evaluate": [[85, 107], ["eval.evaluate_model", "print", "utils.create_adv_noise_loader", "utils.create_adv_sample_loader", "eval.write_log"], "function", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.utils.eval.evaluate_model", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.utils.eval.write_log"], ["", "", "", "def", "evaluate", "(", "model", ",", "device", ",", "dataset", ",", "loaders", ",", "load_adversaries", "=", "False", ",", "\n", "writer", "=", "None", ",", "epoch", "=", "0", ",", "drop_mmc", "=", "False", ")", ":", "\n", "    ", "if", "load_adversaries", ":", "\n", "        ", "NoiseLoader", "=", "loaders", "[", "-", "1", "]", "[", "1", "]", "\n", "print", "(", "'[INFO] Loading Adversaries...'", ")", "\n", "AdversarialNoiseLoader", "=", "adv", ".", "create_adv_noise_loader", "(", "model", ",", "NoiseLoader", ",", "device", ",", "batches", "=", "5", ")", "\n", "AdversarialSampleLoader", "=", "adv", ".", "create_adv_sample_loader", "(", "model", ",", "\n", "dl", ".", "datasets_dict", "[", "dataset", "]", "(", "train", "=", "False", ")", ",", "\n", "device", ",", "batches", "=", "5", ")", "\n", "temp", "=", "loaders", "+", "(", "\n", "[", "\n", "(", "'Adv. Noise'", ",", "AdversarialNoiseLoader", ")", ",", "\n", "(", "'Adv. Sample'", ",", "AdversarialSampleLoader", ")", "]", "\n", ")", "\n", "", "else", ":", "\n", "        ", "temp", "=", "loaders", "\n", "", "df", "=", "evaluate_model", "(", "model", ",", "device", ",", "dl", ".", "datasets_dict", "[", "dataset", "]", "(", "train", "=", "False", ")", ",", "\n", "temp", ",", "drop_mmc", "=", "drop_mmc", ")", "\n", "\n", "if", "writer", "is", "not", "None", ":", "\n", "        ", "write_log", "(", "df", ",", "writer", ",", "epoch", ")", "\n", "", "return", "df", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.utils.eval.aggregate_adv_stats": [[109, 158], ["utils.MyPCA", "range", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "gmm.metric.comp_vecs.t", "torch.rand", "torch.rand", "torch.tensor", "torch.tensor", "torch.cat.append", "enumerate", "torch.stack.append", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.cat.append", "torch.stack.append", "torch.tensor.append", "torch.tensor.clone().cpu", "model.eval", "utils.gen_pca_noise", "[].detach().cpu().clone", "torch.stack.append", "torch.stack.append", "torch.rand.cpu", "torch.stack.clone", "torch.stack.clone", "tuple", "scipy.optimize.brentq", "adv_noise.detach().cpu", "torch.tensor.clone", "[].detach().cpu", "adv_noise.detach", "[].detach", "model().max", "model"], "function", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models.ebm_wrn.gradient_attack_wrapper.eval"], ["", "def", "aggregate_adv_stats", "(", "model_list", ",", "gmm", ",", "device", ",", "shape", ",", "classes", "=", "10", ",", "\n", "batches", "=", "10", ",", "batch_size", "=", "100", ",", "steps", "=", "200", ",", "\n", "restarts", "=", "10", ",", "alpha", "=", "1.", ",", "lam", "=", "1.", ")", ":", "\n", "\n", "    ", "pca", "=", "models", ".", "MyPCA", "(", "gmm", ".", "metric", ".", "comp_vecs", ".", "t", "(", ")", ",", "gmm", ".", "metric", ".", "singular_values", ",", "shape", ")", "\n", "\n", "f", "=", "1.1", "\n", "b", "=", "lam", "*", "(", "f", "-", "1.", ")", "/", "(", "classes", "-", "f", ")", "\n", "\n", "bounds", "=", "[", "]", "\n", "stats", "=", "[", "]", "\n", "samples", "=", "[", "]", "\n", "seeds", "=", "[", "]", "\n", "\n", "for", "_", "in", "range", "(", "batches", ")", ":", "\n", "        ", "seed", "=", "torch", ".", "rand", "(", "(", "batch_size", ",", ")", "+", "tuple", "(", "shape", ")", ",", "device", "=", "device", ")", "\n", "batch_bounds", "=", "[", "]", "\n", "batch_samples", "=", "[", "]", "\n", "\n", "for", "x", "in", "seed", ":", "\n", "            ", "batch_bounds", ".", "append", "(", "scipy", ".", "optimize", ".", "brentq", "(", "gmm_helpers", ".", "get_b", ",", "0", ",", "10000.", ",", "args", "=", "(", "x", ",", "gmm", ",", "b", ")", ")", ")", "\n", "", "batch_bounds", "=", "torch", ".", "tensor", "(", "batch_bounds", ",", "device", "=", "device", ")", "\n", "bounds", ".", "append", "(", "batch_bounds", ".", "clone", "(", ")", ".", "cpu", "(", ")", ")", "\n", "\n", "batch_stats", "=", "[", "]", "\n", "for", "i", ",", "model", "in", "enumerate", "(", "model_list", ")", ":", "\n", "            ", "model", ".", "eval", "(", ")", "\n", "adv_noise", ",", "_", "=", "adv", ".", "gen_pca_noise", "(", "model", ",", "device", ",", "seed", ",", "pca", ",", "\n", "epsilon", "=", "batch_bounds", ",", "perturb", "=", "True", ",", "\n", "restarts", "=", "restarts", ",", "steps", "=", "steps", ",", "alpha", "=", "alpha", ")", "\n", "out", "=", "model", "(", "adv_noise", ")", ".", "max", "(", "1", ")", "[", "0", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "clone", "(", ")", "\n", "#idx = out<(1./classes)", "\n", "#out[idx] = (1./classes)", "\n", "batch_stats", ".", "append", "(", "out", ")", "\n", "batch_samples", ".", "append", "(", "adv_noise", ".", "detach", "(", ")", ".", "cpu", "(", ")", ")", "\n", "\n", "", "seeds", ".", "append", "(", "seed", ".", "cpu", "(", ")", ")", "\n", "\n", "batch_samples", "=", "torch", ".", "stack", "(", "batch_samples", ",", "0", ")", "\n", "batch_stats", "=", "torch", ".", "stack", "(", "batch_stats", ",", "0", ")", "\n", "stats", ".", "append", "(", "batch_stats", ".", "clone", "(", ")", ")", "\n", "samples", ".", "append", "(", "batch_samples", ".", "clone", "(", ")", ")", "\n", "\n", "", "seeds", "=", "torch", ".", "stack", "(", "seeds", ",", "0", ")", "\n", "samples", "=", "torch", ".", "stack", "(", "samples", ",", "0", ")", "\n", "stats", "=", "torch", ".", "cat", "(", "stats", ",", "-", "1", ")", "\n", "bounds", "=", "torch", ".", "cat", "(", "bounds", ",", "0", ")", "\n", "\n", "return", "stats", ",", "bounds", ",", "seeds", ",", "samples", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.utils.eval.aggregate_adv_stats_out": [[160, 224], ["utils.MyPCA", "range", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "gmm.metric.comp_vecs.t", "iter", "torch.tensor", "torch.tensor", "torch.cat.append", "enumerate", "torch.stack.append", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.cat.append", "torch.stack.append", "utils.TinyImages", "[].to", "torch.rand", "torch.rand", "gmm_helpers.get_b_out", "torch.tensor.clone().cpu", "model.eval", "utils.gen_pca_noise", "[].detach().cpu().clone", "torch.stack.append", "torch.stack.append", "torch.rand.cpu", "torch.stack.clone", "torch.stack.clone", "torch.tensor.append", "torch.tensor.append", "adv_noise.detach().cpu", "tuple", "scipy.optimize.brentq", "torch.tensor.clone", "[].detach().cpu", "next", "adv_noise.detach", "[].detach", "model().max", "model"], "function", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models.ebm_wrn.gradient_attack_wrapper.eval"], ["", "def", "aggregate_adv_stats_out", "(", "model_list", ",", "gmm", ",", "gmm_out", ",", "device", ",", "shape", ",", "classes", "=", "10", ",", "\n", "batches", "=", "10", ",", "batch_size", "=", "100", ",", "steps", "=", "200", ",", "out_seeds", "=", "False", ",", "\n", "restarts", "=", "10", ",", "alpha", "=", "1.", ",", "lam", "=", "1.", ")", ":", "\n", "\n", "    ", "pca", "=", "models", ".", "MyPCA", "(", "gmm", ".", "metric", ".", "comp_vecs", ".", "t", "(", ")", ",", "gmm", ".", "metric", ".", "singular_values", ",", "shape", ")", "\n", "\n", "f", "=", "1.1", "\n", "b", "=", "lam", "*", "(", "f", "-", "1.", ")", "/", "(", "classes", "-", "f", ")", "\n", "\n", "bounds", "=", "[", "]", "\n", "stats", "=", "[", "]", "\n", "samples", "=", "[", "]", "\n", "seeds", "=", "[", "]", "\n", "\n", "if", "out_seeds", ":", "\n", "        ", "if", "shape", "[", "0", "]", "==", "1", ":", "\n", "            ", "dataset", "=", "'MNIST'", "\n", "", "else", ":", "\n", "            ", "dataset", "=", "'CIFAR10'", "\n", "", "out_loader", "=", "iter", "(", "dl", ".", "TinyImages", "(", "dataset", ",", "batch_size", "=", "batch_size", ",", "train", "=", "False", ")", ")", "\n", "\n", "", "for", "_", "in", "range", "(", "batches", ")", ":", "\n", "        ", "if", "out_seeds", ":", "\n", "            ", "seed", "=", "next", "(", "out_loader", ")", "[", "0", "]", ".", "to", "(", "device", ")", "\n", "", "else", ":", "\n", "            ", "seed", "=", "torch", ".", "rand", "(", "(", "batch_size", ",", ")", "+", "tuple", "(", "shape", ")", ",", "device", "=", "device", ")", "\n", "", "batch_bounds", "=", "[", "]", "\n", "batch_samples", "=", "[", "]", "\n", "\n", "for", "x", "in", "seed", ":", "\n", "            ", "a", "=", "gmm_helpers", ".", "get_b_out", "(", "0.", ",", "x", ",", "gmm", ",", "gmm_out", ",", "b", ")", "\n", "if", "a", ">=", "0", ":", "\n", "                ", "batch_bounds", ".", "append", "(", "0.", ")", "\n", "", "else", ":", "\n", "                ", "batch_bounds", ".", "append", "(", "scipy", ".", "optimize", ".", "brentq", "(", "gmm_helpers", ".", "get_b_out", ",", "0", ",", "\n", "10000.", ",", "args", "=", "(", "x", ",", "gmm", ",", "gmm_out", ",", "b", ")", ",", "\n", "maxiter", "=", "10000", ")", ")", "\n", "", "", "batch_bounds", "=", "torch", ".", "tensor", "(", "batch_bounds", ",", "device", "=", "device", ")", "\n", "bounds", ".", "append", "(", "batch_bounds", ".", "clone", "(", ")", ".", "cpu", "(", ")", ")", "\n", "\n", "batch_stats", "=", "[", "]", "\n", "for", "i", ",", "model", "in", "enumerate", "(", "model_list", ")", ":", "\n", "            ", "model", ".", "eval", "(", ")", "\n", "adv_noise", ",", "_", "=", "adv", ".", "gen_pca_noise", "(", "model", ",", "device", ",", "seed", ",", "pca", ",", "\n", "epsilon", "=", "batch_bounds", ",", "perturb", "=", "True", ",", "\n", "restarts", "=", "restarts", ",", "steps", "=", "steps", ",", "alpha", "=", "alpha", ")", "\n", "out", "=", "model", "(", "adv_noise", ")", ".", "max", "(", "1", ")", "[", "0", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "clone", "(", ")", "\n", "\n", "batch_stats", ".", "append", "(", "out", ")", "\n", "batch_samples", ".", "append", "(", "adv_noise", ".", "detach", "(", ")", ".", "cpu", "(", ")", ")", "\n", "\n", "", "seeds", ".", "append", "(", "seed", ".", "cpu", "(", ")", ")", "\n", "\n", "batch_samples", "=", "torch", ".", "stack", "(", "batch_samples", ",", "0", ")", "\n", "batch_stats", "=", "torch", ".", "stack", "(", "batch_stats", ",", "0", ")", "\n", "stats", ".", "append", "(", "batch_stats", ".", "clone", "(", ")", ")", "\n", "samples", ".", "append", "(", "batch_samples", ".", "clone", "(", ")", ")", "\n", "\n", "", "seeds", "=", "torch", ".", "stack", "(", "seeds", ",", "0", ")", "\n", "samples", "=", "torch", ".", "stack", "(", "samples", ",", "0", ")", "\n", "stats", "=", "torch", ".", "cat", "(", "stats", ",", "-", "1", ")", "\n", "bounds", "=", "torch", ".", "cat", "(", "bounds", ",", "0", ")", "\n", "\n", "return", "stats", ",", "bounds", ",", "seeds", ",", "samples", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.utils.visual_counterfactual_generation._prepare_targeted_translations": [[17, 59], ["len", "len", "len", "torch.zeros", "torch.zeros", "torch.zeros", "tqdm.trange", "max", "torch.empty().fill_", "torch.empty().fill_", "torch.empty().fill_", "range", "torch.zeros", "torch.zeros", "torch.zeros", "range", "utils.load_trained_model.load_model", "nn.DataParallel.eval", "torch.empty().fill_", "torch.empty().fill_", "torch.empty().fill_", "enumerate", "len", "torch.DataParallel", "torch.no_grad", "torch.no_grad", "torch.no_grad", "int", "range", "len", "torch.empty", "torch.empty", "torch.empty", "len", "numpy.ceil", "min", "data.to.to", "nn.DataParallel.", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax.detach().cpu", "torch.empty", "torch.empty", "torch.empty", "torch.softmax.detach"], "function", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.utils.load_trained_model.load_model", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models.ebm_wrn.gradient_attack_wrapper.eval"], ["def", "_prepare_targeted_translations", "(", "model_descriptions", ",", "imgs", ",", "target_list", ",", "\n", "class_labels", ",", "device", ",", "dataset", ",", "bs", ",", "device_ids", "=", "None", ")", ":", "\n", "    ", "num_classes", "=", "len", "(", "class_labels", ")", "\n", "num_datapoints", "=", "len", "(", "imgs", ")", "\n", "num_models", "=", "len", "(", "model_descriptions", ")", "\n", "probabilities", "=", "torch", ".", "zeros", "(", "(", "num_datapoints", ",", "len", "(", "model_descriptions", ")", ",", "num_classes", ")", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "\n", "for", "model_idx", "in", "trange", "(", "num_models", ",", "desc", "=", "'Models progress'", ")", ":", "\n", "        ", "type", ",", "folder", ",", "checkpoint", ",", "temperature", ",", "temp", "=", "model_descriptions", "[", "model_idx", "]", "\n", "model", "=", "load_model", "(", "type", ",", "folder", ",", "checkpoint", ",", "temperature", ",", "device", ",", "load_temp", "=", "temp", ",", "dataset", "=", "dataset", ")", "\n", "# search failure cases", "\n", "if", "device_ids", "is", "not", "None", "and", "len", "(", "device_ids", ")", ">", "1", ":", "\n", "            ", "model", "=", "nn", ".", "DataParallel", "(", "model", ",", "device_ids", "=", "device_ids", ")", "\n", "", "model", ".", "eval", "(", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "n_batches", "=", "int", "(", "np", ".", "ceil", "(", "num_datapoints", "/", "bs", ")", ")", "\n", "for", "batch_idx", "in", "range", "(", "n_batches", ")", ":", "\n", "                ", "datapoint_idx", "=", "batch_idx", "*", "bs", "\n", "datapoint_end_idx", "=", "min", "(", "(", "batch_idx", "+", "1", ")", "*", "bs", ",", "num_datapoints", ")", "\n", "data", "=", "imgs", "[", "datapoint_idx", ":", "datapoint_end_idx", "]", "\n", "data", "=", "data", ".", "to", "(", "device", ")", "\n", "orig_out", "=", "model", "(", "data", ")", "\n", "orig_confidences", "=", "torch", ".", "softmax", "(", "orig_out", ",", "dim", "=", "1", ")", "\n", "probabilities", "[", "datapoint_idx", ":", "datapoint_end_idx", ",", "model_idx", "]", "=", "orig_confidences", ".", "detach", "(", ")", ".", "cpu", "(", ")", "\n", "\n", "", "", "", "all_models_original_probabilities", "=", "probabilities", "\n", "\n", "max_num_targets", "=", "max", "(", "[", "len", "(", "T", ")", "for", "T", "in", "target_list", "]", ")", "\n", "perturbation_targets", "=", "torch", ".", "empty", "(", "(", "num_datapoints", ",", "max_num_targets", ")", ",", "dtype", "=", "torch", ".", "long", ")", ".", "fill_", "(", "-", "1", ")", "\n", "for", "i", "in", "range", "(", "num_datapoints", ")", ":", "\n", "        ", "datapoint_target_list", "=", "target_list", "[", "i", "]", "\n", "datapoint_target_vector", "=", "torch", ".", "empty", "(", "max_num_targets", ")", ".", "fill_", "(", "-", "1", ")", "\n", "for", "j", ",", "val", "in", "enumerate", "(", "datapoint_target_list", ")", ":", "\n", "            ", "datapoint_target_vector", "[", "j", "]", "=", "val", "\n", "", "perturbation_targets", "[", "i", "]", "=", "datapoint_target_vector", "\n", "\n", "", "all_models_perturbation_targets", "=", "torch", ".", "zeros", "(", "(", "num_datapoints", ",", "num_models", ",", "max_num_targets", ")", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "for", "i", "in", "range", "(", "num_models", ")", ":", "\n", "        ", "all_models_perturbation_targets", "[", ":", ",", "i", ",", ":", "]", "=", "perturbation_targets", "\n", "\n", "", "return", "all_models_perturbation_targets", ",", "all_models_original_probabilities", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.utils.visual_counterfactual_generation._find_wrong_examples": [[61, 121], ["len", "len", "len", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.no_grad", "torch.no_grad", "torch.no_grad", "tqdm.trange", "torch.nonzero().squeeze", "torch.nonzero().squeeze", "torch.nonzero().squeeze", "min", "torch.zeros", "torch.zeros", "torch.zeros", "range", "print", "next", "len", "len", "len", "utils.load_trained_model.load_model", "nn.DataParallel.eval", "torch.sum", "torch.sum", "torch.sum", "len", "iter", "torch.DataParallel", "torch.no_grad", "torch.no_grad", "torch.no_grad", "enumerate", "torch.nonzero", "torch.nonzero", "torch.nonzero", "len", "nn.DataParallel.", "torch.softmax", "torch.softmax", "torch.softmax", "torch.max", "torch.max", "torch.max", "orig_pred.eq", "orig_pred.detach().cpu", "torch.softmax.detach().cpu", "data.to", "target.to", "orig_pred.detach", "torch.softmax.detach"], "function", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.utils.load_trained_model.load_model", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models.ebm_wrn.gradient_attack_wrapper.eval"], ["", "def", "_find_wrong_examples", "(", "model_descriptions", ",", "dataloader", ",", "num_examples", ",", "class_labels", ",", "device", ",", "dataset", ",", "device_ids", "=", "None", ")", ":", "\n", "    ", "num_classes", "=", "len", "(", "class_labels", ")", "\n", "num_datapoints", "=", "len", "(", "dataloader", ".", "dataset", ")", "\n", "num_models", "=", "len", "(", "model_descriptions", ")", "\n", "batch_shape", "=", "next", "(", "iter", "(", "dataloader", ")", ")", "[", "0", "]", ".", "shape", "\n", "\n", "img_dimensions", "=", "batch_shape", "[", "1", ":", "]", "\n", "imgs", "=", "torch", ".", "zeros", "(", "(", "num_datapoints", ",", ")", "+", "img_dimensions", ",", "dtype", "=", "torch", ".", "float", ")", "\n", "\n", "targets", "=", "torch", ".", "zeros", "(", "num_datapoints", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "predictions", "=", "torch", ".", "zeros", "(", "(", "num_datapoints", ",", "len", "(", "model_descriptions", ")", ")", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "probabilities", "=", "torch", ".", "zeros", "(", "(", "num_datapoints", ",", "len", "(", "model_descriptions", ")", ",", "num_classes", ")", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "failure", "=", "torch", ".", "zeros", "(", "(", "num_datapoints", ",", "len", "(", "model_descriptions", ")", ")", ",", "dtype", "=", "torch", ".", "bool", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "model_idx", "in", "trange", "(", "num_models", ",", "desc", "=", "'Models progress'", ")", ":", "\n", "            ", "type", ",", "folder", ",", "checkpoint", ",", "temperature", ",", "temp", "=", "model_descriptions", "[", "model_idx", "]", "\n", "model", "=", "load_model", "(", "type", ",", "folder", ",", "checkpoint", ",", "temperature", ",", "device", ",", "load_temp", "=", "temp", ",", "dataset", "=", "dataset", ")", "\n", "# search failure cases", "\n", "if", "device_ids", "is", "not", "None", "and", "len", "(", "device_ids", ")", ">", "1", ":", "\n", "                ", "model", "=", "nn", ".", "DataParallel", "(", "model", ",", "device_ids", "=", "device_ids", ")", "\n", "", "model", ".", "eval", "(", ")", "\n", "\n", "datapoint_idx", "=", "0", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "for", "batch_idx", ",", "(", "data", ",", "target", ")", "in", "enumerate", "(", "dataloader", ")", ":", "\n", "                    ", "if", "model_idx", "==", "0", ":", "\n", "                        ", "imgs", "[", "datapoint_idx", ":", "(", "datapoint_idx", "+", "data", ".", "shape", "[", "0", "]", ")", ",", ":", "]", "=", "data", "\n", "targets", "[", "datapoint_idx", ":", "(", "datapoint_idx", "+", "data", ".", "shape", "[", "0", "]", ")", "]", "=", "target", "\n", "\n", "", "data", ",", "target", "=", "data", ".", "to", "(", "device", ")", ",", "target", ".", "to", "(", "device", ")", "\n", "\n", "orig_out", "=", "model", "(", "data", ")", "\n", "orig_confidences", "=", "torch", ".", "softmax", "(", "orig_out", ",", "dim", "=", "1", ")", "\n", "_", ",", "orig_pred", "=", "torch", ".", "max", "(", "orig_confidences", ",", "1", ")", "\n", "correct", "=", "orig_pred", ".", "eq", "(", "target", ")", "\n", "\n", "predictions", "[", "datapoint_idx", ":", "(", "datapoint_idx", "+", "data", ".", "shape", "[", "0", "]", ")", ",", "model_idx", "]", "=", "orig_pred", ".", "detach", "(", ")", ".", "cpu", "(", ")", "\n", "probabilities", "[", "datapoint_idx", ":", "(", "datapoint_idx", "+", "data", ".", "shape", "[", "0", "]", ")", ",", "model_idx", "]", "=", "orig_confidences", ".", "detach", "(", ")", ".", "cpu", "(", ")", "\n", "failure", "[", "datapoint_idx", ":", "(", "datapoint_idx", "+", "data", ".", "shape", "[", "0", "]", ")", ",", "model_idx", "]", "=", "~", "correct", "\n", "\n", "datapoint_idx", "+=", "data", ".", "shape", "[", "0", "]", "\n", "\n", "", "", "", "all_model_failure", "=", "torch", ".", "sum", "(", "failure", ",", "dim", "=", "1", ")", ">=", "len", "(", "model_descriptions", ")", "\n", "all_model_failure_idcs", "=", "torch", ".", "nonzero", "(", "all_model_failure", ",", "as_tuple", "=", "False", ")", ".", "squeeze", "(", ")", "\n", "\n", "examples_found", "=", "min", "(", "all_model_failure_idcs", ".", "shape", "[", "0", "]", ",", "num_examples", ")", "\n", "all_model_failure_idcs", "=", "all_model_failure_idcs", "[", ":", "examples_found", "]", "\n", "\n", "imgs", "=", "imgs", "[", "all_model_failure_idcs", ",", ":", "]", "\n", "all_models_targets", "=", "targets", "[", "all_model_failure_idcs", "]", "\n", "all_models_original_probabilities", "=", "probabilities", "[", "all_model_failure_idcs", ",", ":", "]", "\n", "\n", "perturbation_targets", "=", "torch", ".", "zeros", "(", "(", "examples_found", ",", "num_models", ",", "2", ")", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "for", "i", "in", "range", "(", "num_models", ")", ":", "\n", "            ", "perturbation_targets", "[", ":", ",", "i", ",", "0", "]", "=", "all_models_targets", "\n", "perturbation_targets", "[", ":", ",", "i", ",", "1", "]", "=", "predictions", "[", "all_model_failure_idcs", ",", "i", "]", "\n", "\n", "", "print", "(", "f'Found {examples_found} out of {num_examples} falsely classified images'", ")", "\n", "return", "imgs", ",", "perturbation_targets", ",", "all_models_original_probabilities", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.utils.visual_counterfactual_generation._plot_diff_image": [[122, 133], ["diff.min", "diff.max", "matplotlib.get_cmap", "plt.get_cmap.", "PIL.Image.fromarray", "Image.fromarray.save", "max", "diff_scaled.numpy", "numpy.uint8", "abs"], "function", ["None"], ["", "", "def", "_plot_diff_image", "(", "a", ",", "b", ",", "filepath", ")", ":", "\n", "    ", "diff", "=", "(", "a", "-", "b", ")", ".", "sum", "(", "2", ")", "\n", "min_diff_pixels", "=", "diff", ".", "min", "(", ")", "\n", "max_diff_pixels", "=", "diff", ".", "max", "(", ")", "\n", "min_diff_pixels", "=", "-", "max", "(", "abs", "(", "min_diff_pixels", ")", ",", "max_diff_pixels", ")", "\n", "max_diff_pixels", "=", "-", "min_diff_pixels", "\n", "diff_scaled", "=", "(", "diff", "-", "min_diff_pixels", ")", "/", "(", "max_diff_pixels", "-", "min_diff_pixels", ")", "\n", "cm", "=", "plt", ".", "get_cmap", "(", "'seismic'", ")", "\n", "colored_image", "=", "cm", "(", "diff_scaled", ".", "numpy", "(", ")", ")", "\n", "pil_img", "=", "Image", ".", "fromarray", "(", "np", ".", "uint8", "(", "colored_image", "*", "255.", ")", ")", "\n", "pil_img", ".", "save", "(", "filepath", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.utils.visual_counterfactual_generation._plot_single_img": [[134, 137], ["PIL.Image.fromarray", "Image.fromarray.save", "numpy.uint8", "torch_img.numpy"], "function", ["None"], ["", "def", "_plot_single_img", "(", "torch_img", ",", "filepath", ")", ":", "\n", "    ", "pil_img", "=", "Image", ".", "fromarray", "(", "np", ".", "uint8", "(", "torch_img", ".", "numpy", "(", ")", "*", "255.", ")", ")", "\n", "pil_img", ".", "save", "(", "filepath", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.utils.visual_counterfactual_generation._plot_counterfactuals": [[138, 223], ["len", "tqdm.trange", "torch.nonzero().squeeze", "torch.nonzero().squeeze", "torch.nonzero().squeeze", "len", "matplotlib.subplots", "original_imgs[].permute().cpu().detach", "torch.max", "torch.max", "torch.max", "ax[].axis", "ax[].set_title", "ax[].imshow", "range", "range", "matplotlib.tight_layout", "matplotlib.close", "os.path.join", "os.path.join", "pathlib.Path().mkdir", "numpy.expand_dims", "visual_counterfactual_generation._plot_single_img", "ax[].axis", "range", "fig.savefig", "fig.savefig", "fig.savefig", "fig.savefig", "torch.nonzero", "torch.nonzero", "torch.nonzero", "original_imgs[].permute().cpu", "os.path.join", "len", "torch.clamp", "torch.clamp", "torch.clamp", "ax[].axis", "ax[].imshow", "ax[].set_title", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.splitext", "pathlib.Path", "perturbed_imgs[].permute", "visual_counterfactual_generation._plot_single_img", "visual_counterfactual_generation._plot_diff_image", "original_imgs[].permute", "os.path.join", "os.path.join"], "function", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.utils.visual_counterfactual_generation._plot_single_img", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.utils.visual_counterfactual_generation._plot_single_img", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.utils.visual_counterfactual_generation._plot_diff_image"], ["", "def", "_plot_counterfactuals", "(", "dir", ",", "model_name", ",", "model_checkpoint", ",", "original_imgs", ",", "original_probabilities", ",", "targets", ",", "\n", "perturbed_imgs", ",", "perturbed_probabilities", ",", "radii", ",", "class_labels", ",", "filenames", "=", "None", ",", "\n", "plot_single_images", "=", "False", ",", "show_distances", "=", "False", ")", ":", "\n", "\n", "\n", "    ", "num_imgs", "=", "targets", ".", "shape", "[", "0", "]", "\n", "num_radii", "=", "len", "(", "radii", ")", "\n", "scale_factor", "=", "1.5", "\n", "for", "img_idx", "in", "trange", "(", "num_imgs", ",", "desc", "=", "f'{model_name} {model_checkpoint} - Image write'", ")", ":", "\n", "        ", "if", "filenames", "is", "None", ":", "\n", "            ", "single_img_dir", "=", "os", ".", "path", ".", "join", "(", "dir", ",", "f'{img_idx}'", ")", "\n", "", "else", ":", "\n", "            ", "single_img_dir", "=", "os", ".", "path", ".", "join", "(", "dir", ",", "os", ".", "path", ".", "splitext", "(", "filenames", "[", "img_idx", "]", ")", "[", "0", "]", ")", "\n", "\n", "", "if", "plot_single_images", ":", "\n", "            ", "pathlib", ".", "Path", "(", "single_img_dir", ")", ".", "mkdir", "(", "parents", "=", "True", ",", "exist_ok", "=", "True", ")", "\n", "\n", "", "img_targets", "=", "targets", "[", "img_idx", ",", ":", "]", "\n", "valid_target_idcs", "=", "torch", ".", "nonzero", "(", "img_targets", "!=", "-", "1", ",", "as_tuple", "=", "False", ")", ".", "squeeze", "(", "dim", "=", "1", ")", "\n", "num_targets", "=", "len", "(", "valid_target_idcs", ")", "\n", "\n", "num_rows", "=", "num_targets", "\n", "num_cols", "=", "num_radii", "+", "1", "\n", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", "num_rows", ",", "num_cols", ",", "figsize", "=", "(", "scale_factor", "*", "num_cols", ",", "num_rows", "*", "1.3", "*", "scale_factor", ")", ")", "\n", "if", "num_rows", "==", "1", ":", "\n", "            ", "ax", "=", "np", ".", "expand_dims", "(", "ax", ",", "0", ")", "\n", "", "img_original", "=", "original_imgs", "[", "img_idx", ",", ":", "]", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ".", "cpu", "(", ")", ".", "detach", "(", ")", "\n", "img_probabilities", "=", "original_probabilities", "[", "img_idx", ",", ":", "]", "\n", "img_confidence", ",", "img_prediction", "=", "torch", ".", "max", "(", "img_probabilities", ",", "dim", "=", "0", ")", "\n", "\n", "if", "plot_single_images", ":", "\n", "            ", "_plot_single_img", "(", "img_original", ",", "os", ".", "path", ".", "join", "(", "single_img_dir", ",", "'original.png'", ")", ")", "\n", "\n", "", "if", "num_targets", "==", "2", ":", "\n", "            ", "title", "=", "f'{class_labels[img_targets[0]]}: {img_probabilities[img_targets[0]]:.2f}\\n'", "f'{class_labels[img_targets[1]]}: {img_probabilities[img_targets[1]]:.2f}'", "\n", "", "else", ":", "\n", "            ", "title", "=", "f'{class_labels[img_prediction]}: {img_confidence:.2f}'", "\n", "\n", "# plot original:", "\n", "", "ax", "[", "0", ",", "0", "]", ".", "axis", "(", "'off'", ")", "\n", "ax", "[", "0", ",", "0", "]", ".", "set_title", "(", "title", ")", "\n", "ax", "[", "0", ",", "0", "]", ".", "imshow", "(", "img_original", ",", "interpolation", "=", "'lanczos'", ")", "\n", "\n", "for", "j", "in", "range", "(", "1", ",", "num_rows", ")", ":", "\n", "            ", "ax", "[", "j", ",", "0", "]", ".", "axis", "(", "'off'", ")", "\n", "\n", "#plot counterfactuals", "\n", "", "for", "target_idx_idx", "in", "range", "(", "num_targets", ")", ":", "\n", "            ", "target_idx", "=", "valid_target_idcs", "[", "target_idx_idx", "]", "\n", "for", "radius_idx", "in", "range", "(", "len", "(", "radii", ")", ")", ":", "\n", "                ", "img", "=", "torch", ".", "clamp", "(", "perturbed_imgs", "[", "img_idx", ",", "target_idx", ",", "radius_idx", "]", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ",", "min", "=", "0.0", ",", "max", "=", "1.0", ")", "\n", "img_target", "=", "targets", "[", "img_idx", ",", "target_idx", "]", "\n", "img_probabilities", "=", "perturbed_probabilities", "[", "img_idx", ",", "target_idx", ",", "radius_idx", "]", "\n", "\n", "target_conf", "=", "img_probabilities", "[", "img_target", "]", "\n", "\n", "ax", "[", "target_idx", ",", "radius_idx", "+", "1", "]", ".", "axis", "(", "'off'", ")", "\n", "ax", "[", "target_idx", ",", "radius_idx", "+", "1", "]", ".", "imshow", "(", "img", ",", "interpolation", "=", "'lanczos'", ")", "\n", "\n", "if", "num_targets", "==", "2", ":", "\n", "                    ", "title", "=", "f'{class_labels[img_targets[0]]}: {img_probabilities[img_targets[0]]:.2f}\\n'", "f'{class_labels[img_targets[1]]}: {img_probabilities[img_targets[1]]:.2f}'", "\n", "", "else", ":", "\n", "                    ", "title", "=", "f'{class_labels[img_target]}: {target_conf:.2f}'", "\n", "\n", "", "if", "show_distances", ":", "\n", "                    ", "pass", "\n", "\n", "", "ax", "[", "target_idx", ",", "radius_idx", "+", "1", "]", ".", "set_title", "(", "title", ")", "\n", "\n", "if", "plot_single_images", ":", "\n", "                    ", "_plot_single_img", "(", "img", ",", "os", ".", "path", ".", "join", "(", "single_img_dir", ",", "f'target_{target_idx}_radius_{radius_idx}.png'", ")", ")", "\n", "_plot_diff_image", "(", "img_original", ",", "img", ",", "\n", "os", ".", "path", ".", "join", "(", "single_img_dir", ",", "f'target_{target_idx}_radius_{radius_idx}_diff.png'", ")", ")", "\n", "\n", "", "", "", "plt", ".", "tight_layout", "(", ")", "\n", "if", "filenames", "is", "not", "None", ":", "\n", "            ", "fig", ".", "savefig", "(", "os", ".", "path", ".", "join", "(", "dir", ",", "f'{filenames[img_idx]}.png'", ")", ")", "\n", "fig", ".", "savefig", "(", "os", ".", "path", ".", "join", "(", "dir", ",", "f'{filenames[img_idx]}.pdf'", ")", ")", "\n", "", "else", ":", "\n", "            ", "fig", ".", "savefig", "(", "os", ".", "path", ".", "join", "(", "dir", ",", "f'{img_idx}.png'", ")", ")", "\n", "fig", ".", "savefig", "(", "os", ".", "path", ".", "join", "(", "dir", ",", "f'{img_idx}.pdf'", ")", ")", "\n", "\n", "", "plt", ".", "close", "(", "fig", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.utils.visual_counterfactual_generation._inner_generation": [[224, 318], ["len", "len", "len", "torch.no_grad", "torch.no_grad", "torch.no_grad", "range", "len", "numpy.isscalar", "print", "pathlib.Path().mkdir", "utils.load_trained_model.load_model", "nn.DataParallel.eval", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "int", "tqdm.trange", "print", "visual_counterfactual_generation._plot_counterfactuals", "os.path.join", "torch.save", "torch.save", "torch.save", "torch.DataParallel", "numpy.ceil", "time.sleep", "min", "range", "pathlib.Path", "len", "len", "batch_data.to.to", "batch_targets.to.to", "train_types.helpers.create_attack_config", "train_types.helpers.get_adversarial_attack", "range", "NotImplementedError", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.min().item", "torch.min().item", "torch.min().item", "torch.max().item", "torch.max().item", "torch.max().item", "train_types.helpers.get_adversarial_attack.perturb().detach", "nn.DataParallel.", "torch.softmax", "torch.softmax", "torch.softmax", "torch.zeros_like.cpu().detach", "torch.softmax.cpu().detach", "torch.sum", "torch.sum", "torch.sum", "torch.min", "torch.min", "torch.min", "torch.max", "torch.max", "torch.max", "train_types.helpers.get_adversarial_attack.perturb", "torch.zeros_like.cpu", "torch.softmax.cpu"], "function", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.utils.load_trained_model.load_model", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models.ebm_wrn.gradient_attack_wrapper.eval", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.utils.visual_counterfactual_generation._plot_counterfactuals", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.helpers.create_attack_config", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.helpers.get_adversarial_attack", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.adversarial_attacks.restartattack.RestartAttack.perturb"], ["", "", "def", "_inner_generation", "(", "original_imgs", ",", "perturbation_targets", ",", "all_model_original_probabilities", ",", "model_descriptions", ",", "radii", ",", "\n", "bs", ",", "class_labels", ",", "device", ",", "eval_dir", ",", "dataset", ",", "norm", ",", "steps", ",", "stepsize", ",", "attack_type", ",", "filenames", "=", "None", ",", "\n", "plot_single_images", "=", "False", ",", "show_distanes", "=", "False", ",", "device_ids", "=", "None", ")", ":", "\n", "    ", "num_classes", "=", "len", "(", "class_labels", ")", "\n", "img_dimensions", "=", "original_imgs", ".", "shape", "[", "1", ":", "]", "\n", "num_targets", "=", "perturbation_targets", ".", "shape", "[", "2", "]", "\n", "num_radii", "=", "len", "(", "radii", ")", "\n", "num_imgs", "=", "len", "(", "original_imgs", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "\n", "        ", "for", "model_idx", "in", "range", "(", "len", "(", "model_descriptions", ")", ")", ":", "\n", "            ", "if", "np", ".", "isscalar", "(", "bs", ")", ":", "\n", "                ", "model_bs", "=", "bs", "\n", "", "else", ":", "\n", "                ", "model_bs", "=", "bs", "[", "model_idx", "]", "\n", "\n", "", "type", ",", "model_folder", ",", "model_checkpoint", ",", "temperature", ",", "temp", "=", "model_descriptions", "[", "model_idx", "]", "\n", "print", "(", "f'{model_folder} {model_checkpoint} - bs {model_bs}'", ")", "\n", "\n", "dir", "=", "f'{eval_dir}/{model_folder}_{model_checkpoint}/VisualCounterfactuals/'", "\n", "pathlib", ".", "Path", "(", "dir", ")", ".", "mkdir", "(", "parents", "=", "True", ",", "exist_ok", "=", "True", ")", "\n", "\n", "model", "=", "load_model", "(", "type", ",", "model_folder", ",", "model_checkpoint", ",", "temperature", ",", "device", ",", "load_temp", "=", "temp", ",", "dataset", "=", "dataset", ")", "\n", "if", "device_ids", "is", "not", "None", "and", "len", "(", "device_ids", ")", ">", "1", ":", "\n", "                ", "model", "=", "nn", ".", "DataParallel", "(", "model", ",", "device_ids", "=", "device_ids", ")", "\n", "", "model", ".", "eval", "(", ")", "\n", "\n", "out_imgs", "=", "torch", ".", "zeros", "(", "(", "num_imgs", ",", "num_targets", ",", "num_radii", ")", "+", "img_dimensions", ")", "\n", "out_probabilities", "=", "torch", ".", "zeros", "(", "(", "num_imgs", ",", "num_targets", ",", "num_radii", ",", "num_classes", ")", ")", "\n", "\n", "n_batches", "=", "int", "(", "np", ".", "ceil", "(", "num_imgs", "/", "model_bs", ")", ")", "\n", "\n", "for", "batch_idx", "in", "trange", "(", "n_batches", ",", "desc", "=", "f'{model_folder} {model_checkpoint} - Batches progress'", ")", ":", "\n", "                ", "sleep", "(", "0.1", ")", "\n", "batch_start_idx", "=", "batch_idx", "*", "model_bs", "\n", "batch_end_idx", "=", "min", "(", "num_imgs", ",", "(", "batch_idx", "+", "1", ")", "*", "model_bs", ")", "\n", "\n", "batch_data", "=", "original_imgs", "[", "batch_start_idx", ":", "batch_end_idx", ",", ":", "]", "\n", "batch_targets", "=", "perturbation_targets", "[", "batch_start_idx", ":", "batch_end_idx", ",", "model_idx", "]", "\n", "\n", "for", "radius_idx", "in", "range", "(", "len", "(", "radii", ")", ")", ":", "\n", "                    ", "eps", "=", "radii", "[", "radius_idx", "]", "\n", "\n", "if", "temperature", "is", "not", "None", "and", "temperature", "<", "0.2", ":", "\n", "                        ", "loss", "=", "'logit_max_target'", "\n", "raise", "NotImplementedError", "(", ")", "\n", "", "else", ":", "\n", "                        ", "loss", "=", "'conf'", "\n", "\n", "", "batch_data", "=", "batch_data", ".", "to", "(", "device", ")", "\n", "batch_targets", "=", "batch_targets", ".", "to", "(", "device", ")", "\n", "\n", "attack_config", "=", "create_attack_config", "(", "eps", ",", "steps", ",", "stepsize", ",", "norm", ",", "\n", "pgd", "=", "attack_type", ",", "normalize_gradient", "=", "True", ")", "\n", "att", "=", "get_adversarial_attack", "(", "attack_config", ",", "model", ",", "loss", ",", "num_classes", ")", "\n", "\n", "for", "target_idx", "in", "range", "(", "num_targets", ")", ":", "\n", "                        ", "batch_targets_i", "=", "batch_targets", "[", ":", ",", "target_idx", "]", "\n", "\n", "#use -1 as invalid index", "\n", "valid_batch_targets", "=", "batch_targets_i", "!=", "-", "1", "\n", "num_valid_batch_targets", "=", "torch", ".", "sum", "(", "valid_batch_targets", ")", ".", "item", "(", ")", "\n", "batch_adv_samples_i", "=", "torch", ".", "zeros_like", "(", "batch_data", ")", "\n", "if", "num_valid_batch_targets", ">", "0", ":", "\n", "                            ", "batch_valid_adv_samples_i", "=", "att", ".", "perturb", "(", "batch_data", "[", "valid_batch_targets", "]", ",", "\n", "batch_targets_i", "[", "valid_batch_targets", "]", ",", "\n", "targeted", "=", "True", ")", ".", "detach", "(", ")", "\n", "batch_adv_samples_i", "[", "valid_batch_targets", "]", "=", "batch_valid_adv_samples_i", "\n", "batch_model_out_i", "=", "model", "(", "batch_adv_samples_i", ")", "\n", "batch_probs_i", "=", "torch", ".", "softmax", "(", "batch_model_out_i", ",", "dim", "=", "1", ")", "\n", "\n", "out_imgs", "[", "batch_start_idx", ":", "batch_end_idx", ",", "target_idx", ",", "radius_idx", ",", ":", "]", "=", "batch_adv_samples_i", ".", "cpu", "(", ")", ".", "detach", "(", ")", "\n", "out_probabilities", "[", "batch_start_idx", ":", "batch_end_idx", ",", "target_idx", ",", "radius_idx", ",", ":", "]", "=", "batch_probs_i", ".", "cpu", "(", ")", ".", "detach", "(", ")", "\n", "\n", "", "", "", "", "model_original_probabilities", "=", "all_model_original_probabilities", "[", ":", ",", "model_idx", "]", "\n", "\n", "\n", "print", "(", "f'min: {torch.min(out_imgs).item()} - max {torch.max(out_imgs).item()}'", ")", "\n", "\n", "_plot_counterfactuals", "(", "dir", ",", "model_folder", ",", "model_checkpoint", ",", "original_imgs", ",", "model_original_probabilities", ",", "\n", "perturbation_targets", "[", ":", ",", "model_idx", ",", ":", "]", ",", "out_imgs", ",", "out_probabilities", ",", "radii", ",", "\n", "class_labels", ",", "filenames", "=", "filenames", ",", "plot_single_images", "=", "plot_single_images", ",", "\n", "show_distances", "=", "show_distanes", ")", "\n", "\n", "out_dict", "=", "{", "'model_original_probabilities'", ":", "model_original_probabilities", ",", "\n", "'perturbation_targets'", ":", "perturbation_targets", "[", ":", ",", "model_idx", ",", ":", "]", ",", "\n", "'out_probabilities'", ":", "out_probabilities", ",", "\n", "'radii'", ":", "radii", ",", "\n", "'class_labels'", ":", "class_labels", "\n", "}", "\n", "\n", "out_file", "=", "os", ".", "path", ".", "join", "(", "dir", ",", "'info.pt'", ")", "\n", "torch", ".", "save", "(", "out_dict", ",", "out_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.utils.visual_counterfactual_generation.visual_counterfactuals": [[321, 331], ["visual_counterfactual_generation._find_wrong_examples", "visual_counterfactual_generation._inner_generation"], "function", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.utils.visual_counterfactual_generation._find_wrong_examples", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.utils.visual_counterfactual_generation._inner_generation"], ["", "", "", "def", "visual_counterfactuals", "(", "model_descriptions", ",", "radii", ",", "dataloader", ",", "bs", ",", "num_examples", ",", "class_labels", ",", "device", ",", "eval_dir", ",", "\n", "dataset", ",", "norm", "=", "'L2'", ",", "steps", "=", "500", ",", "stepsize", "=", "0.1", ",", "attack_type", "=", "'apgd'", ",", "\n", "device_ids", "=", "None", ")", ":", "\n", "    ", "original_imgs", ",", "perturbation_targets", ",", "all_models_original_probabilities", "=", "_find_wrong_examples", "(", "model_descriptions", ",", "dataloader", ",", "num_examples", ",", "class_labels", ",", "device", ",", "dataset", ",", "\n", "device_ids", "=", "device_ids", ")", "\n", "\n", "_inner_generation", "(", "original_imgs", ",", "perturbation_targets", ",", "all_models_original_probabilities", ",", "model_descriptions", ",", "radii", ",", "\n", "bs", ",", "class_labels", ",", "device", ",", "eval_dir", ",", "dataset", ",", "norm", ",", "steps", ",", "stepsize", ",", "attack_type", ",", "\n", "device_ids", "=", "device_ids", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.utils.visual_counterfactual_generation.targeted_translations": [[334, 344], ["visual_counterfactual_generation._prepare_targeted_translations", "visual_counterfactual_generation._inner_generation"], "function", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.utils.visual_counterfactual_generation._prepare_targeted_translations", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.utils.visual_counterfactual_generation._inner_generation"], ["", "def", "targeted_translations", "(", "model_descriptions", ",", "radii", ",", "imgs", ",", "target_list", ",", "bs", ",", "class_labels", ",", "device", ",", "eval_dir", ",", "dataset", ",", "\n", "norm", "=", "'L2'", ",", "steps", "=", "500", ",", "stepsize", "=", "0.1", ",", "attack_type", "=", "'apgd'", ",", "show_distanes", "=", "False", ",", "filenames", "=", "None", ",", "\n", "device_ids", "=", "None", ")", ":", "\n", "    ", "perturbation_targets", ",", "all_models_original_probabilities", "=", "_prepare_targeted_translations", "(", "model_descriptions", ",", "imgs", ",", "target_list", ",", "\n", "class_labels", ",", "device", ",", "dataset", ",", "bs", ",", "device_ids", "=", "device_ids", ")", "\n", "\n", "_inner_generation", "(", "imgs", ",", "perturbation_targets", ",", "all_models_original_probabilities", ",", "model_descriptions", ",", "radii", ",", "bs", ",", "\n", "class_labels", ",", "device", ",", "eval_dir", ",", "dataset", ",", "norm", ",", "steps", ",", "stepsize", ",", "attack_type", ",", "filenames", "=", "filenames", ",", "\n", "plot_single_images", "=", "True", ",", "show_distanes", "=", "show_distanes", ",", "device_ids", "=", "device_ids", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.utils.compute_auc.fpr_at_tpr": [[7, 13], ["values_in.detach().cpu().numpy", "values_out.detach().cpu().numpy", "numpy.quantile", "values_in.detach().cpu", "values_out.detach().cpu", "values_in.detach", "values_out.detach"], "function", ["None"], ["def", "fpr_at_tpr", "(", "values_in", ",", "values_out", ",", "tpr", ")", ":", "\n", "    ", "in_np", "=", "values_in", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "out_np", "=", "values_out", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "t", "=", "np", ".", "quantile", "(", "in_np", ",", "(", "1", "-", "tpr", ")", ")", "\n", "fpr", "=", "(", "out_np", ">=", "t", ")", ".", "mean", "(", ")", "\n", "return", "fpr", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.utils.compute_auc.auprc": [[14, 18], ["numpy.concatenate", "sklearn.metrics.average_precision_score", "len", "len"], "function", ["None"], ["", "def", "auprc", "(", "values_in", ",", "values_out", ")", ":", "\n", "    ", "y_true", "=", "len", "(", "values_in", ")", "*", "[", "1", "]", "+", "len", "(", "values_out", ")", "*", "[", "0", "]", "\n", "y_score", "=", "np", ".", "concatenate", "(", "[", "values_in", ",", "values_out", "]", ")", "\n", "return", "sklearn", ".", "metrics", ".", "average_precision_score", "(", "y_true", ",", "y_score", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.utils.compute_auc._get_conf": [[21, 55], ["torch.cat", "torch.cat", "torch.no_grad", "torch.no_grad", "min", "model", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.cat.append", "data.to", "target.to", "torch.softmax().max", "torch.zeros_like", "torch.zeros_like", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid.cpu", "model.dim", "model.squeeze", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.softmax", "torch.zeros_like.eq"], "function", ["None"], ["", "def", "_get_conf", "(", "model", ",", "device", ",", "test_loader", ",", "max_samples", "=", "1e13", ")", ":", "\n", "    ", "conf", "=", "[", "]", "\n", "mean_conf", "=", "0", "\n", "correct", "=", "0", "\n", "\n", "samples_collected", "=", "0", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "data", ",", "target", "in", "test_loader", ":", "\n", "            ", "if", "samples_collected", ">=", "max_samples", ":", "\n", "                ", "break", "\n", "\n", "", "samples_left", "=", "min", "(", "data", ".", "shape", "[", "0", "]", ",", "max_samples", "-", "samples_collected", ")", "\n", "data", "=", "data", "[", ":", "samples_left", ",", ":", "]", "\n", "target", "=", "target", "[", ":", "samples_left", "]", "\n", "\n", "data", ",", "target", "=", "data", ".", "to", "(", "device", ")", ",", "target", ".", "to", "(", "device", ")", "\n", "out", "=", "model", "(", "data", ")", "\n", "\n", "if", "out", ".", "dim", "(", ")", ">", "1", "and", "out", ".", "shape", "[", "1", "]", ">", "1", ":", "\n", "                ", "c", ",", "pred", "=", "F", ".", "softmax", "(", "out", ",", "dim", "=", "1", ")", ".", "max", "(", "dim", "=", "1", ")", "\n", "", "else", ":", "\n", "                ", "pred", "=", "torch", ".", "zeros_like", "(", "out", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "c", "=", "torch", ".", "sigmoid", "(", "out", ".", "squeeze", "(", ")", ")", "\n", "\n", "", "correct", "+=", "torch", ".", "sum", "(", "pred", ".", "eq", "(", "target", ")", ")", ".", "item", "(", ")", "\n", "mean_conf", "+=", "torch", ".", "sum", "(", "c", ")", ".", "item", "(", ")", "\n", "conf", ".", "append", "(", "c", ".", "cpu", "(", ")", ")", "\n", "\n", "samples_collected", "+=", "c", ".", "shape", "[", "0", "]", "\n", "\n", "", "", "conf", "=", "torch", ".", "cat", "(", "conf", ",", "0", ")", "\n", "acc", "=", "correct", "/", "samples_collected", "\n", "mean_conf", "=", "mean_conf", "/", "samples_collected", "\n", "return", "conf", ",", "acc", ",", "mean_conf", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.utils.compute_auc._get_wc_conf": [[56, 92], ["utils.train_types.train_loss.NegativeWrapper", "utils.adversarial_attacks.APGDAttack", "torch.cat", "torch.cat", "utils.train_types.train_loss.MaxConfidenceLoss", "torch.no_grad", "torch.no_grad", "min", "utils.adversarial_attacks.APGDAttack.", "model", "torch.softmax().max", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.cat.append", "data.to", "target.to", "c.cpu", "torch.softmax", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "pred.eq"], "function", ["None"], ["", "def", "_get_wc_conf", "(", "model", ",", "device", ",", "test_loader", ",", "eps", ",", "num_classes", ",", "max_samples", "=", "1e13", ")", ":", "\n", "    ", "conf", "=", "[", "]", "\n", "mean_conf", "=", "0", "\n", "correct", "=", "0", "\n", "\n", "loss", "=", "NegativeWrapper", "(", "MaxConfidenceLoss", "(", ")", ")", "\n", "att", "=", "APGDAttack", "(", "model", ",", "num_classes", ",", "eps", "=", "eps", ",", "n_iter", "=", "100", ",", "norm", "=", "'L2'", ",", "n_restarts", "=", "1", ",", "loss", "=", "loss", ",", "eot_iter", "=", "1", ")", "\n", "\n", "samples_collected", "=", "0", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "data", ",", "target", "in", "test_loader", ":", "\n", "            ", "if", "samples_collected", ">=", "max_samples", ":", "\n", "                ", "break", "\n", "\n", "", "samples_left", "=", "min", "(", "data", ".", "shape", "[", "0", "]", ",", "max_samples", "-", "samples_collected", ")", "\n", "data", "=", "data", "[", ":", "samples_left", ",", ":", "]", "\n", "target", "=", "target", "[", ":", "samples_left", "]", "\n", "\n", "data", ",", "target", "=", "data", ".", "to", "(", "device", ")", ",", "target", ".", "to", "(", "device", ")", "\n", "adv_samples", "=", "att", "(", "data", ",", "target", ")", "\n", "\n", "out", "=", "model", "(", "adv_samples", ")", "\n", "\n", "c", ",", "pred", "=", "F", ".", "softmax", "(", "out", ",", "dim", "=", "1", ")", ".", "max", "(", "dim", "=", "1", ")", "\n", "\n", "correct", "+=", "torch", ".", "sum", "(", "pred", ".", "eq", "(", "target", ")", ")", ".", "item", "(", ")", "\n", "mean_conf", "+=", "torch", ".", "sum", "(", "c", ")", ".", "item", "(", ")", "\n", "conf", ".", "append", "(", "c", ".", "cpu", "(", ")", ")", "\n", "\n", "samples_collected", "+=", "c", ".", "shape", "[", "0", "]", "\n", "\n", "", "", "conf", "=", "torch", ".", "cat", "(", "conf", ",", "0", ")", "\n", "acc", "=", "correct", "/", "samples_collected", "\n", "mean_conf", "=", "mean_conf", "/", "samples_collected", "\n", "return", "conf", ",", "acc", ",", "mean_conf", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.utils.compute_auc._get_auroc": [[93, 101], ["torch.cat().cpu().numpy", "torch.cat().cpu().numpy", "torch.cat().cpu().numpy", "torch.cat().cpu().numpy", "sklearn.metrics.roc_auc_score", "torch.cat().cpu", "torch.cat().cpu", "torch.cat().cpu", "torch.cat().cpu", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.ones_like", "torch.ones_like", "torch.zeros_like", "torch.zeros_like", "conf_in.cpu", "conf_in.cpu", "conf_in.median"], "function", ["None"], ["", "def", "_get_auroc", "(", "conf_in", ",", "conf_out", ")", ":", "\n", "    ", "y_true", "=", "torch", ".", "cat", "(", "[", "torch", ".", "ones_like", "(", "conf_in", ".", "cpu", "(", ")", ")", ",", "\n", "torch", ".", "zeros_like", "(", "conf_out", ")", "]", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "y_scores", "=", "torch", ".", "cat", "(", "[", "conf_in", ".", "cpu", "(", ")", ",", "\n", "conf_out", "]", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "success_rate", "=", "(", "conf_out", ">=", "conf_in", ".", "median", "(", ")", ")", ".", "float", "(", ")", ".", "mean", "(", ")", ".", "item", "(", ")", "\n", "auroc", "=", "roc_auc_score", "(", "y_true", ",", "y_scores", ")", "\n", "return", "auroc", ",", "success_rate", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.utils.compute_auc.compute_auc": [[102, 129], ["torch.zeros", "torch.zeros", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "compute_auc._get_conf", "print", "enumerate", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "print", "print", "print", "len", "compute_auc._get_conf", "compute_auc.fpr_at_tpr", "print", "compute_auc._get_auroc"], "function", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.utils.compute_auc._get_conf", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.utils.compute_auc._get_conf", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.utils.compute_auc.fpr_at_tpr", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.utils.compute_auc._get_auroc"], ["", "def", "compute_auc", "(", "model", ",", "in_loader", ",", "out_loaders", ",", "device", ",", "auc_samples", "=", "1e13", ")", ":", "\n", "    ", "od_mmcs", "=", "torch", ".", "zeros", "(", "len", "(", "out_loaders", ")", ")", "\n", "aucs", "=", "torch", ".", "zeros_like", "(", "od_mmcs", ")", "\n", "fpr95", "=", "torch", ".", "zeros_like", "(", "od_mmcs", ")", "\n", "\n", "conf_in", ",", "acc_in", ",", "mean_conf", "=", "_get_conf", "(", "model", ",", "device", ",", "in_loader", ",", "max_samples", "=", "auc_samples", ")", "\n", "print", "(", "f'ID Accuracy {acc_in} - ID MMC {mean_conf}'", ")", "\n", "\n", "for", "loader_idx", ",", "(", "dataset_name", ",", "loader", ")", "in", "enumerate", "(", "out_loaders", ")", ":", "\n", "        ", "eps_conf_out", ",", "_", ",", "od_mean_conf", "=", "_get_conf", "(", "model", ",", "device", ",", "loader", ",", "max_samples", "=", "auc_samples", ")", "\n", "\n", "auc", "=", "_get_auroc", "(", "conf_in", ",", "eps_conf_out", ")", "[", "0", "]", "\n", "fpr", "=", "fpr_at_tpr", "(", "conf_in", ",", "eps_conf_out", ",", "0.95", ")", "\n", "\n", "aucs", "[", "loader_idx", "]", "=", "auc", "\n", "od_mmcs", "[", "loader_idx", "]", "=", "od_mean_conf", "\n", "fpr95", "[", "loader_idx", "]", "=", "fpr", "\n", "print", "(", "f'AUC {dataset_name} - {auc} - FPR95 {fpr} - MMC {od_mean_conf}'", ")", "\n", "\n", "", "eps_auc_average", "=", "torch", ".", "mean", "(", "aucs", ",", "dim", "=", "0", ")", "\n", "eps_mmc_avergage", "=", "torch", ".", "mean", "(", "od_mmcs", ",", "dim", "=", "0", ")", "\n", "eps_fpr_avergage", "=", "torch", ".", "mean", "(", "fpr95", ",", "dim", "=", "0", ")", "\n", "\n", "print", "(", "f'AUC average {eps_auc_average}'", ")", "\n", "print", "(", "f'MMC average {eps_mmc_avergage}'", ")", "\n", "print", "(", "f'FPR average {eps_fpr_avergage}'", ")", "\n", "return", "aucs", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.utils.compute_auc.compute_wc_auc": [[130, 161], ["torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "enumerate", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "print", "print", "print", "compute_auc._get_conf", "print", "enumerate", "len", "len", "len", "len", "len", "len", "compute_auc.fpr_at_tpr", "print", "compute_auc._get_wc_conf", "compute_auc._get_conf", "compute_auc._get_auroc"], "function", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.utils.compute_auc._get_conf", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.utils.compute_auc.fpr_at_tpr", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.utils.compute_auc._get_wc_conf", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.utils.compute_auc._get_conf", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.utils.compute_auc._get_auroc"], ["", "def", "compute_wc_auc", "(", "model", ",", "in_loader", ",", "out_loaders", ",", "device", ",", "num_classes", ",", "auc_samples", ",", "auc_eps", ")", ":", "\n", "    ", "od_mmcs", "=", "torch", ".", "zeros", "(", "(", "len", "(", "out_loaders", ")", ",", "len", "(", "auc_eps", ")", ")", ")", "\n", "aucs", "=", "torch", ".", "zeros", "(", "(", "len", "(", "out_loaders", ")", ",", "len", "(", "auc_eps", ")", ")", ")", "\n", "fpr95", "=", "torch", ".", "zeros", "(", "(", "len", "(", "out_loaders", ")", ",", "len", "(", "auc_eps", ")", ")", ")", "\n", "\n", "for", "eps_idx", ",", "eps", "in", "enumerate", "(", "auc_eps", ")", ":", "\n", "        ", "conf_in", ",", "acc_in", ",", "mean_conf", "=", "_get_conf", "(", "model", ",", "device", ",", "in_loader", ",", "max_samples", "=", "auc_samples", "[", "eps_idx", "]", ")", "\n", "print", "(", "f'ID Accuracy {acc_in} - ID MMC {mean_conf}'", ")", "\n", "\n", "for", "loader_idx", ",", "(", "dataset_name", ",", "loader", ")", "in", "enumerate", "(", "out_loaders", ")", ":", "\n", "            ", "if", "eps", ">", "0", ":", "\n", "                ", "eps_conf_out", ",", "_", ",", "od_mean_conf", "=", "_get_wc_conf", "(", "model", ",", "device", ",", "loader", ",", "eps", ",", "num_classes", ",", "max_samples", "=", "auc_samples", "[", "eps_idx", "]", ")", "\n", "", "else", ":", "\n", "                ", "eps_conf_out", ",", "_", ",", "od_mean_conf", "=", "_get_conf", "(", "model", ",", "device", ",", "loader", ",", "max_samples", "=", "auc_samples", "[", "eps_idx", "]", ")", "\n", "\n", "", "eps_auc", "=", "_get_auroc", "(", "conf_in", ",", "eps_conf_out", ")", "[", "0", "]", "\n", "eps_fpr", "=", "fpr_at_tpr", "(", "conf_in", ",", "eps_conf_out", ",", "0.95", ")", "\n", "\n", "aucs", "[", "loader_idx", ",", "eps_idx", "]", "=", "eps_auc", "\n", "od_mmcs", "[", "loader_idx", ",", "eps_idx", "]", "=", "od_mean_conf", "\n", "fpr95", "[", "loader_idx", ",", "eps_idx", "]", "=", "eps_fpr", "\n", "print", "(", "f'WorstCase AUC {dataset_name} - {eps} - {eps_auc} - FPR95 {eps_fpr} - MMC {od_mean_conf}'", ")", "\n", "\n", "", "", "eps_auc_average", "=", "torch", ".", "mean", "(", "aucs", ",", "dim", "=", "0", ")", "\n", "eps_mmc_avergage", "=", "torch", ".", "mean", "(", "od_mmcs", ",", "dim", "=", "0", ")", "\n", "eps_fpr_avergage", "=", "torch", ".", "mean", "(", "fpr95", ",", "dim", "=", "0", ")", "\n", "print", "(", "f'AUC average {eps_auc_average}'", ")", "\n", "print", "(", "f'MMC average {eps_mmc_avergage}'", ")", "\n", "print", "(", "f'FPR average {eps_fpr_avergage}'", ")", "\n", "\n", "return", "aucs", "\n", "", ""]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.utils.id_radius_confidence.id_radius_confidence": [[18, 135], ["torch.zeros", "torch.zeros", "torch.zeros", "int", "iter", "range", "enumerate", "torch.save", "torch.save", "torch.save", "len", "len", "numpy.ceil", "next", "data_batches.append", "pathlib.Path().mkdir", "utils.load_trained_model.load_model", "nn.DataParallel.eval", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "enumerate", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "print", "print", "print", "range", "int", "int", "enumerate", "torch.DataParallel", "data.to.to", "target.to.to", "enumerate", "matplotlib.subplots", "range", "matplotlib.tight_layout", "fig.savefig", "fig.savefig", "matplotlib.close", "numpy.sqrt", "numpy.ceil", "matplotlib.subplots", "range", "fig.savefig", "matplotlib.close", "pathlib.Path", "len", "len", "len", "len", "len", "adv_samples.detach().cpu", "target.to.detach().cpu", "torch.softmax", "gt_confidence.detach().cpu", "torch.max", "torch.max", "torch.max", "other_conf.detach().cpu", "len", "int", "int", "imgs[].permute", "axs[].axis", "axs[].imshow", "auto_attack.autopgd_pt.APGDAttack_singlestepsize", "nn.DataParallel.", "axs[].axis", "axs[].title.set_text", "imgs[].permute", "axs[].imshow", "auto_attack.autopgd_pt.APGDAttack_singlestepsize.perturb", "adv_samples.detach", "target.to.detach", "gt_confidence.detach", "other_conf.detach", "range", "range"], "function", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.utils.load_trained_model.load_model", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models.ebm_wrn.gradient_attack_wrapper.eval", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.adversarial_attacks.restartattack.RestartAttack.perturb"], ["def", "id_radius_confidence", "(", "model_descriptions", ",", "radii", ",", "plot_radii", ",", "dataloader", ",", "bs", ",", "datapoints", ",", "class_labels", ",", "device", ",", "eval_dir", ",", "dataset", ",", "device_ids", "=", "None", ")", ":", "\n", "#[,,0] = gt conf", "\n", "#[,,1]= other conf", "\n", "    ", "model_radii_confs", "=", "torch", ".", "zeros", "(", "len", "(", "model_descriptions", ")", ",", "len", "(", "radii", ")", ",", "2", ")", "\n", "\n", "num_batches", "=", "int", "(", "np", ".", "ceil", "(", "datapoints", "/", "bs", ")", ")", "\n", "\n", "data_iterator", "=", "iter", "(", "dataloader", ")", "\n", "\n", "data_batches", "=", "[", "]", "\n", "for", "_", "in", "range", "(", "num_batches", ")", ":", "\n", "        ", "data", ",", "target", "=", "next", "(", "data_iterator", ")", "\n", "data_batches", ".", "append", "(", "(", "data", ",", "target", ")", ")", "\n", "\n", "\n", "", "for", "model_idx", ",", "(", "type", ",", "folder", ",", "checkpoint", ",", "temperature", ",", "temp", ")", "in", "enumerate", "(", "model_descriptions", ")", ":", "\n", "        ", "dir", "=", "f'{eval_dir}/{folder}_{checkpoint}/IDWorstCase/'", "\n", "pathlib", ".", "Path", "(", "dir", ")", ".", "mkdir", "(", "parents", "=", "True", ",", "exist_ok", "=", "True", ")", "\n", "\n", "model", "=", "load_model", "(", "type", ",", "folder", ",", "checkpoint", ",", "temperature", ",", "device", ",", "load_temp", "=", "temp", ",", "dataset", "=", "dataset", ")", "\n", "if", "device_ids", "is", "not", "None", "and", "len", "(", "device_ids", ")", ">", "1", ":", "\n", "            ", "model", "=", "nn", ".", "DataParallel", "(", "model", ",", "device_ids", "=", "device_ids", ")", "\n", "", "model", ".", "eval", "(", ")", "\n", "\n", "imgs", "=", "torch", ".", "zeros", "(", "(", "len", "(", "radii", ")", ",", "datapoints", ",", "3", ",", "32", ",", "32", ")", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "targets", "=", "torch", ".", "zeros", "(", "datapoints", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "gt_confidences", "=", "torch", ".", "zeros", "(", "(", "len", "(", "radii", ")", ",", "datapoints", ")", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "others_confidences", "=", "torch", ".", "zeros", "(", "(", "len", "(", "radii", ")", ",", "datapoints", ")", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "others_predictions", "=", "torch", ".", "zeros", "(", "(", "len", "(", "radii", ")", ",", "datapoints", ")", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "\n", "datapoint_idx", "=", "0", "\n", "for", "batch_idx", ",", "(", "data", ",", "target", ")", "in", "enumerate", "(", "data_batches", ")", ":", "\n", "            ", "data", "=", "data", ".", "to", "(", "device", ")", "\n", "target", "=", "target", ".", "to", "(", "device", ")", "\n", "for", "radius_idx", ",", "radius", "in", "enumerate", "(", "radii", ")", ":", "\n", "                ", "if", "radius", ">", "1e-8", ":", "\n", "                    ", "step_multiplier", "=", "5", "\n", "att", "=", "APGDAttack", "(", "model", ",", "n_restarts", "=", "1", ",", "n_iter", "=", "100", "*", "step_multiplier", ",", "n_iter_2", "=", "22", "*", "step_multiplier", ",", "\n", "n_iter_min", "=", "6", "*", "step_multiplier", ",", "size_decr", "=", "3", ",", "\n", "eps", "=", "radius", ",", "show_loss", "=", "False", ",", "norm", "=", "'L2'", ",", "loss", "=", "'diff_logit_target'", ",", "eot_iter", "=", "1", ",", "\n", "thr_decr", "=", ".75", ",", "seed", "=", "0", ",", "normalize_logits", "=", "True", ",", "\n", "show_acc", "=", "False", ")", "\n", "\n", "# adv_samples = att(ref_data, None)", "\n", "adv_samples", "=", "att", ".", "perturb", "(", "data", ",", "target", ")", "[", "1", "]", "\n", "", "else", ":", "\n", "                    ", "adv_samples", "=", "data", "\n", "\n", "", "imgs", "[", "radius_idx", ",", "datapoint_idx", ":", "(", "datapoint_idx", "+", "data", ".", "shape", "[", "0", "]", ")", ",", ":", "]", "=", "adv_samples", ".", "detach", "(", ")", ".", "cpu", "(", ")", "\n", "targets", "[", "datapoint_idx", ":", "(", "datapoint_idx", "+", "data", ".", "shape", "[", "0", "]", ")", "]", "=", "target", ".", "detach", "(", ")", ".", "cpu", "(", ")", "\n", "\n", "confidences", "=", "F", ".", "softmax", "(", "model", "(", "adv_samples", ")", ",", "dim", "=", "1", ")", "\n", "gt_confidence", "=", "confidences", "[", "range", "(", "data", ".", "shape", "[", "0", "]", ")", ",", "target", "]", "\n", "\n", "gt_confidences", "[", "radius_idx", ",", "datapoint_idx", ":", "(", "datapoint_idx", "+", "data", ".", "shape", "[", "0", "]", ")", "]", "=", "gt_confidence", ".", "detach", "(", ")", ".", "cpu", "(", ")", "\n", "\n", "confidences", "[", "range", "(", "data", ".", "shape", "[", "0", "]", ")", ",", "target", "]", "=", "-", "1e13", "\n", "other_conf", ",", "other_pred", "=", "torch", ".", "max", "(", "confidences", ",", "dim", "=", "1", ")", "\n", "\n", "others_confidences", "[", "radius_idx", ",", "datapoint_idx", ":", "(", "datapoint_idx", "+", "data", ".", "shape", "[", "0", "]", ")", "]", "=", "other_conf", ".", "detach", "(", ")", ".", "cpu", "(", ")", "\n", "others_predictions", "[", "radius_idx", ",", "datapoint_idx", ":", "(", "datapoint_idx", "+", "data", ".", "shape", "[", "0", "]", ")", "]", "=", "other_pred", "\n", "\n", "", "datapoint_idx", "+=", "adv_samples", ".", "shape", "[", "0", "]", "\n", "\n", "", "model_radii_confs", "[", "model_idx", ",", ":", ",", "0", "]", "=", "torch", ".", "mean", "(", "gt_confidences", ",", "dim", "=", "1", ")", "\n", "model_radii_confs", "[", "model_idx", ",", ":", ",", "1", "]", "=", "torch", ".", "mean", "(", "others_confidences", ",", "dim", "=", "1", ")", "\n", "\n", "print", "(", "f'{folder}'", ")", "\n", "print", "(", "f'GT: {model_radii_confs[model_idx, :, 0]}'", ")", "\n", "print", "(", "f'Other: {model_radii_confs[model_idx, :, 1]}'", ")", "\n", "\n", "num_radii_to_plot", "=", "0", "\n", "for", "plot_radius", "in", "plot_radii", ":", "\n", "            ", "if", "plot_radius", ":", "\n", "                ", "num_radii_to_plot", "+=", "1", "\n", "\n", "", "", "for", "img_idx", "in", "range", "(", "datapoints", ")", ":", "\n", "            ", "scale_factor", "=", "1.5", "\n", "fig", ",", "axs", "=", "plt", ".", "subplots", "(", "1", ",", "num_radii_to_plot", ",", "\n", "figsize", "=", "(", "scale_factor", "*", "num_radii_to_plot", ",", "1.3", "*", "scale_factor", ")", ")", "\n", "\n", "col_idx", "=", "0", "\n", "for", "radius_idx", "in", "range", "(", "len", "(", "radii", ")", ")", ":", "\n", "                ", "if", "plot_radii", "[", "radius_idx", "]", ":", "\n", "                    ", "axs", "[", "col_idx", "]", ".", "axis", "(", "'off'", ")", "\n", "axs", "[", "col_idx", "]", ".", "title", ".", "set_text", "(", "\n", "f'{class_labels[targets[img_idx]]} - {gt_confidences[radius_idx, img_idx]:.2f}\\n{class_labels[others_predictions[radius_idx, img_idx]]} - {others_confidences[radius_idx, img_idx]:.2f}'", ")", "\n", "img_cpu", "=", "imgs", "[", "radius_idx", ",", "img_idx", ",", ":", "]", ".", "permute", "(", "1", ",", "2", ",", "0", ")", "\n", "axs", "[", "col_idx", "]", ".", "imshow", "(", "img_cpu", ",", "interpolation", "=", "'lanczos'", ")", "\n", "col_idx", "+=", "1", "\n", "\n", "", "", "plt", ".", "tight_layout", "(", ")", "\n", "fig", ".", "savefig", "(", "f'{dir}img_{img_idx}.png'", ")", "\n", "fig", ".", "savefig", "(", "f'{dir}img_{img_idx}.pdf'", ")", "\n", "plt", ".", "close", "(", "fig", ")", "\n", "\n", "#animated gif parts", "\n", "", "rows", "=", "int", "(", "np", ".", "sqrt", "(", "bs", ")", ")", "\n", "cols", "=", "int", "(", "np", ".", "ceil", "(", "bs", "/", "rows", ")", ")", "\n", "scale_factor", "=", "4", "\n", "\n", "for", "radius_idx", ",", "radius", "in", "enumerate", "(", "radii", ")", ":", "\n", "            ", "fig", ",", "axs", "=", "plt", ".", "subplots", "(", "rows", ",", "cols", ",", "figsize", "=", "(", "scale_factor", "*", "cols", ",", "scale_factor", "*", "rows", ")", ")", "\n", "for", "img_idx", "in", "range", "(", "data", ".", "shape", "[", "0", "]", ")", ":", "\n", "                ", "row_idx", "=", "int", "(", "img_idx", "/", "cols", ")", "\n", "col_idx", "=", "int", "(", "img_idx", "%", "cols", ")", "\n", "\n", "img_cpu", "=", "imgs", "[", "radius_idx", ",", "img_idx", ",", ":", "]", ".", "permute", "(", "1", ",", "2", ",", "0", ")", "\n", "\n", "axs", "[", "row_idx", ",", "col_idx", "]", ".", "axis", "(", "'off'", ")", "\n", "axs", "[", "row_idx", ",", "col_idx", "]", ".", "imshow", "(", "img_cpu", ")", "\n", "\n", "", "fig", ".", "savefig", "(", "f'{dir}img_gif_part_{radius_idx}.png'", ")", "\n", "plt", ".", "close", "(", "fig", ")", "\n", "\n", "", "", "torch", ".", "save", "(", "model_radii_confs", ",", "f'{eval_dir}ID_model_radii_confs.pt'", ")", "\n", "return", "model_radii_confs", "", "", ""]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.utils.distances.Distance.__init__": [[17, 19], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models_32x32.shake_pyramidnet.ShakePyramidNet.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.utils.distances.Distance.__call__": [[20, 22], ["distances.Distance.dist"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.utils.distances.MSReconstructionLoss.dist"], ["", "def", "__call__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "self", ".", "dist", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.utils.distances.Distance.dist": [[23, 25], ["NotImplementedError"], "methods", ["None"], ["", "def", "dist", "(", "self", ",", "X", ",", "Y", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.utils.distances.Distance.get_config": [[26, 28], ["NotImplementedError"], "methods", ["None"], ["", "def", "get_config", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.utils.distances.Distance.compute_distance_matrix": [[29, 35], ["X.new_zeros", "range", "distances.Distance.dist", "y.expand_as"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.utils.distances.MSReconstructionLoss.dist"], ["", "def", "compute_distance_matrix", "(", "self", ",", "X", ",", "Y", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "D", "=", "X", ".", "new_zeros", "(", "(", "X", ".", "shape", "[", "0", "]", ",", "Y", ".", "shape", "[", "0", "]", ")", ")", "\n", "for", "y_idx", "in", "range", "(", "Y", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "y", "=", "Y", "[", "y_idx", ",", ":", "]", "\n", "D", "[", ":", ",", "y_idx", "]", "=", "self", ".", "dist", "(", "X", ",", "y", ".", "expand_as", "(", "X", ")", ")", "\n", "", "return", "D", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.utils.distances.SquaredEuclideanDistance.dist": [[38, 42], ["torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "X.view", "Y.view"], "methods", ["None"], ["    ", "def", "dist", "(", "self", ",", "X", ",", "Y", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "N", "=", "X", ".", "shape", "[", "0", "]", "\n", "diff", "=", "X", ".", "view", "(", "N", ",", "-", "1", ")", "-", "Y", ".", "view", "(", "N", ",", "-", "1", ")", "\n", "return", "torch", ".", "sum", "(", "diff", "**", "2", ",", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.utils.distances.LPDistance.__init__": [[45, 48], ["distances.Distance.__init__", "float"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models_32x32.shake_pyramidnet.ShakePyramidNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "p", "=", "2.0", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "p", "=", "float", "(", "p", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.utils.distances.LPDistance.dist": [[49, 53], ["X.view", "Y.view"], "methods", ["None"], ["", "def", "dist", "(", "self", ",", "X", ",", "Y", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "#X, Y batches [N, C, H, W]", "\n", "        ", "N", "=", "X", ".", "shape", "[", "0", "]", "\n", "return", "(", "X", ".", "view", "(", "N", ",", "-", "1", ")", "-", "Y", ".", "view", "(", "N", ",", "-", "1", ")", ")", ".", "norm", "(", "p", "=", "self", ".", "p", ",", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.utils.distances.LPDistance.get_config": [[54, 56], ["None"], "methods", ["None"], ["", "def", "get_config", "(", "self", ")", ":", "\n", "        ", "return", "{", "'Distance'", ":", "'LP'", ",", "'p'", ":", "self", ".", "p", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.utils.distances.SSIMDistance.__init__": [[58, 63], ["distances.Distance.__init__", "pytorch_msssim.SSIM"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models_32x32.shake_pyramidnet.ShakePyramidNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "kernel_w", "=", "3", ",", "sigma", "=", "1.5", ",", "channels", "=", "1", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "kernel_w", "=", "kernel_w", "\n", "self", ".", "ssim_d", "=", "SSIM", "(", "win_size", "=", "kernel_w", ",", "win_sigma", "=", "sigma", ",", "data_range", "=", "1.0", ",", "size_average", "=", "False", ",", "channel", "=", "channels", ")", "\n", "self", ".", "config", "=", "{", "'Distance'", ":", "'SSIM'", ",", "'win_size'", ":", "kernel_w", ",", "'win_sigma'", ":", "sigma", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.utils.distances.SSIMDistance.dist": [[64, 69], ["torch.clamp_min", "torch.clamp_min", "torch.clamp_min", "torch.clamp_min", "torch.clamp_min", "torch.clamp_min", "torch.clamp_min", "torch.clamp_min", "torch.clamp_min", "distances.SSIMDistance.ssim_d().view().mean", "distances.SSIMDistance.ssim_d().view", "distances.SSIMDistance.ssim_d"], "methods", ["None"], ["", "def", "dist", "(", "self", ",", "X", ",", "Y", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "#X, Y batches [N, C, H, W]", "\n", "        ", "N", "=", "X", ".", "shape", "[", "0", "]", "\n", "d1", "=", "torch", ".", "clamp_min", "(", "1", "-", "(", "self", ".", "ssim_d", "(", "X", ",", "Y", ")", ")", ".", "view", "(", "N", ",", "-", "1", ")", ".", "mean", "(", "dim", "=", "1", ")", ",", "0.0", ")", "\n", "return", "d1", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.utils.distances.MSSSIMDistance.__init__": [[71, 86], ["distances.Distance.__init__", "pytorch_msssim.MS_SSIM"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models_32x32.shake_pyramidnet.ShakePyramidNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "kernel_w", "=", "3", ",", "sigma", "=", "1.5", ",", "channels", "=", "1", ",", "weights", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "kernel_w", "=", "kernel_w", "\n", "self", ".", "sigma", "=", "sigma", "\n", "\n", "#number of weights determines the depth of the pyramid", "\n", "#standard are 5, too deep for MNist resolution", "\n", "if", "weights", "is", "None", ":", "\n", "            ", "self", ".", "weights", "=", "[", "0.0516", ",", "0.32949", ",", "0.34622", ",", "0.27261", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "weights", "=", "weights", "\n", "", "self", ".", "ssim_d", "=", "MS_SSIM", "(", "win_size", "=", "kernel_w", ",", "win_sigma", "=", "sigma", ",", "data_range", "=", "1.0", ",", "\n", "channel", "=", "channels", ",", "weights", "=", "self", ".", "weights", ",", "size_average", "=", "False", ")", "\n", "\n", "self", ".", "config", "=", "{", "'Distance'", ":", "'SSIM'", ",", "'win_size'", ":", "kernel_w", ",", "'win_sigma'", ":", "sigma", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.utils.distances.MSSSIMDistance.dist": [[87, 92], ["torch.clamp_min", "torch.clamp_min", "torch.clamp_min", "torch.clamp_min", "torch.clamp_min", "torch.clamp_min", "torch.clamp_min", "torch.clamp_min", "torch.clamp_min", "distances.MSSSIMDistance.ssim_d().view().mean", "distances.MSSSIMDistance.ssim_d().view", "distances.MSSSIMDistance.ssim_d"], "methods", ["None"], ["", "def", "dist", "(", "self", ",", "X", ",", "Y", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "#X, Y batches [N, C, H, W]", "\n", "        ", "N", "=", "X", ".", "shape", "[", "0", "]", "\n", "d1", "=", "torch", ".", "clamp_min", "(", "1", "-", "(", "self", ".", "ssim_d", "(", "X", ",", "Y", ")", ")", ".", "view", "(", "N", ",", "-", "1", ")", ".", "mean", "(", "dim", "=", "1", ")", ",", "0.0", ")", "\n", "return", "d1", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.utils.distances.ReconstructionLoss.__init__": [[95, 101], ["super.__init__", "pytorch_msssim.SSIM"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models_32x32.shake_pyramidnet.ShakePyramidNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "alpha", "=", "0.84", ",", "kernel_w", "=", "3", ",", "sigma", "=", "1.5", ",", "channels", "=", "1", ")", ":", "\n", "        ", "super", ".", "__init__", "(", ")", "\n", "self", ".", "alpha", "=", "alpha", "\n", "self", ".", "kernel_w", "=", "kernel_w", "\n", "self", ".", "ssim_d", "=", "SSIM", "(", "win_size", "=", "kernel_w", ",", "win_sigma", "=", "sigma", ",", "data_range", "=", "1.0", ",", "size_average", "=", "False", ",", "channel", "=", "channels", ")", "\n", "self", ".", "config", "=", "{", "'Distance'", ":", "'L1 + SSIM'", ",", "'alpha'", ":", "alpha", ",", "'win_size'", ":", "kernel_w", ",", "'win_sigma'", ":", "sigma", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.utils.distances.ReconstructionLoss.dist": [[102, 109], ["torch.clamp_min", "torch.clamp_min", "torch.clamp_min", "torch.clamp_min", "torch.clamp_min", "torch.clamp_min", "torch.clamp_min", "torch.clamp_min", "torch.clamp_min", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "distances.ReconstructionLoss.ssim_d().view().mean", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "distances.ReconstructionLoss.ssim_d().view", "X.view", "Y.view", "distances.ReconstructionLoss.ssim_d"], "methods", ["None"], ["", "def", "dist", "(", "self", ",", "X", ",", "Y", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "#X, Y batches [N, C, H, W]", "\n", "        ", "N", "=", "X", ".", "shape", "[", "0", "]", "\n", "numel", "=", "X", ".", "shape", "[", "1", "]", "*", "X", ".", "shape", "[", "2", "]", "*", "X", ".", "shape", "[", "3", "]", "\n", "d1", "=", "torch", ".", "clamp_min", "(", "1", "-", "(", "self", ".", "ssim_d", "(", "X", ",", "Y", ")", ")", ".", "view", "(", "N", ",", "-", "1", ")", ".", "mean", "(", "dim", "=", "1", ")", ",", "0.0", ")", "\n", "d2", "=", "(", "self", ".", "kernel_w", "/", "numel", ")", "*", "torch", ".", "sum", "(", "torch", ".", "abs", "(", "X", ".", "view", "(", "N", ",", "-", "1", ")", "-", "Y", ".", "view", "(", "N", ",", "-", "1", ")", ")", ",", "dim", "=", "1", ")", "\n", "return", "self", ".", "alpha", "*", "d1", "+", "(", "1.", "-", "self", ".", "alpha", ")", "*", "d2", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.utils.distances.ReconstructionLoss.get_config": [[110, 112], ["None"], "methods", ["None"], ["", "def", "get_config", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "config", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.utils.distances.MSReconstructionLoss.__init__": [[116, 131], ["distances.Distance.__init__"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models_32x32.shake_pyramidnet.ShakePyramidNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "alpha", "=", "0.84", ",", "kernel_w", "=", "3", ",", "sigma", "=", "1.5", ",", "channels", "=", "1", ",", "weights", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "alpha", "=", "alpha", "\n", "self", ".", "kernel_w", "=", "kernel_w", "\n", "self", ".", "sigma", "=", "sigma", "\n", "\n", "#number of weights determines the depth of the pyramid", "\n", "#standard are 5, too deep for MNist resolution", "\n", "if", "weights", "is", "None", ":", "\n", "            ", "self", ".", "weights", "=", "[", "0.0516", ",", "0.32949", ",", "0.34622", ",", "0.27261", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "weights", "=", "weights", "\n", "\n", "", "self", ".", "config", "=", "{", "'Distance'", ":", "'L1 + MS_SSIM'", ",", "'alpha'", ":", "alpha", ",", "\n", "'win_size'", ":", "kernel_w", ",", "'win_sigma'", ":", "sigma", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.utils.distances.MSReconstructionLoss.dist": [[133, 146], ["torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.clamp_min", "torch.clamp_min", "torch.clamp_min", "torch.clamp_min", "torch.clamp_min", "torch.clamp_min", "torch.clamp_min", "torch.clamp_min", "torch.clamp_min", "ms_ssim", "torch.clamp_min.view().mean", "torch.clamp_min.view().mean", "torch.clamp_min.view().mean", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.clamp_min.view", "torch.clamp_min.view", "torch.clamp_min.view", "X.view", "Y.view"], "methods", ["None"], ["", "def", "dist", "(", "self", ",", "X", ",", "Y", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "#X, Y batches [N, C, H, W]", "\n", "\n", "        ", "N", "=", "X", ".", "shape", "[", "0", "]", "\n", "numel", "=", "X", ".", "shape", "[", "1", "]", "*", "X", ".", "shape", "[", "2", "]", "*", "X", ".", "shape", "[", "3", "]", "\n", "\n", "weights", "=", "torch", ".", "FloatTensor", "(", "self", ".", "weights", ")", ".", "to", "(", "X", ".", "device", ",", "dtype", "=", "X", ".", "dtype", ")", "\n", "d1", "=", "torch", ".", "clamp_min", "(", "ms_ssim", "(", "X", ",", "Y", ",", "win_size", "=", "self", ".", "kernel_w", ",", "win_sigma", "=", "self", ".", "sigma", ",", "data_range", "=", "1.0", ",", "size_average", "=", "False", ",", "weights", "=", "weights", ")", ",", "0.0", ")", "\n", "d1", "=", "1.", "-", "d1", ".", "view", "(", "N", ",", "-", "1", ")", ".", "mean", "(", "dim", "=", "1", ")", "\n", "\n", "d2", "=", "(", "self", ".", "kernel_w", "/", "numel", ")", "*", "torch", ".", "sum", "(", "torch", ".", "abs", "(", "X", ".", "view", "(", "N", ",", "-", "1", ")", "-", "Y", ".", "view", "(", "N", ",", "-", "1", ")", ")", ")", "\n", "\n", "return", "self", ".", "alpha", "*", "d1", "+", "(", "1.", "-", "self", ".", "alpha", ")", "*", "d2", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.utils.distances.MSReconstructionLoss.get_config": [[147, 149], ["None"], "methods", ["None"], ["", "def", "get_config", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "config", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.utils.find_nearest_neighbours.L2.__init__": [[12, 14], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models_32x32.shake_pyramidnet.ShakePyramidNet.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.utils.find_nearest_neighbours.L2.forward": [[15, 21], ["batch.view.view.view", "ref_point.view.view.view", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sum", "torch.sum", "torch.sum", "torch.sum"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "ref_point", ",", "batch", ")", ":", "\n", "        ", "batch", "=", "batch", ".", "view", "(", "batch", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", "ref_point", "=", "ref_point", ".", "view", "(", "1", ",", "-", "1", ")", "\n", "\n", "l2", "=", "torch", ".", "sqrt", "(", "torch", ".", "sum", "(", "(", "(", "batch", "-", "ref_point", ")", "**", "2", ")", ",", "dim", "=", "1", ")", ")", "\n", "return", "l2", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.utils.find_nearest_neighbours.FeatureDist.__init__": [[23, 26], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models_32x32.shake_pyramidnet.ShakePyramidNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "model", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "model", "=", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.utils.find_nearest_neighbours.FeatureDist.forward": [[27, 34], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "find_nearest_neighbours.FeatureDist.model", "out[].view", "out[].view", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sum", "torch.sum", "torch.sum", "torch.sum"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "ref_point", ",", "batch", ")", ":", "\n", "        ", "all_data", "=", "torch", ".", "cat", "(", "[", "ref_point", ",", "batch", "]", ")", "\n", "out", "=", "self", ".", "model", "(", "all_data", ")", "\n", "ref_feature", "=", "out", "[", "0", ",", ":", "]", ".", "view", "(", "1", ",", "-", "1", ")", "\n", "batch_features", "=", "out", "[", "1", ":", ",", ":", "]", ".", "view", "(", "batch", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", "l2", "=", "torch", ".", "sqrt", "(", "torch", ".", "sum", "(", "(", "(", "batch_features", "-", "ref_feature", ")", "**", "2", ")", ",", "dim", "=", "1", ")", ")", "\n", "return", "l2", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.utils.find_nearest_neighbours.LPIPS.__init__": [[37, 40], ["super().__init__", "lpips.LPIPS"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models_32x32.shake_pyramidnet.ShakePyramidNet.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "loss_fn", "=", "lpips", ".", "LPIPS", "(", "net", "=", "'alex'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.utils.find_nearest_neighbours.LPIPS.forward": [[41, 45], ["ref_point.expand_as", "find_nearest_neighbours.LPIPS.loss_fn().squeeze", "find_nearest_neighbours.LPIPS.loss_fn"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "ref_point", ",", "batch", ")", ":", "\n", "        ", "ref_batch", "=", "ref_point", ".", "expand_as", "(", "batch", ")", "\n", "sim", "=", "self", ".", "loss_fn", "(", "ref_batch", ",", "batch", ")", ".", "squeeze", "(", ")", "\n", "return", "sim", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.utils.find_nearest_neighbours.find_nearest_neighbours": [[46, 95], ["torch.zeros", "torch.zeros", "ref_batch.to.to", "pathlib.Path().mkdir", "range", "len", "torch.no_grad", "torch.no_grad", "matplotlib.subplots", "numpy.expand_dims", "ax[].axis", "ax[].title.set_text", "ref_batch[].permute().cpu().detach", "ax[].imshow", "range", "matplotlib.tight_layout", "fig.savefig", "fig.savefig", "matplotlib.close", "data.to.to", "range", "pathlib.Path", "torch.argsort", "torch.argsort", "torch.argsort", "torch.argsort", "[].permute().cpu().detach", "ax[].axis", "ax[].imshow", "ax[].title.set_text", "os.path.join", "os.path.join", "ref_batch[].unsqueeze", "dist_function", "dist_function.detach().cpu", "ref_batch[].permute().cpu", "[].permute().cpu", "dist_function.detach", "ref_batch[].permute", "[].permute"], "function", ["None"], ["", "", "def", "find_nearest_neighbours", "(", "dist_function", ",", "ref_batch", ",", "data_loader", ",", "data_set", ",", "device", ",", "num_neighbours", ",", "out_dir", ",", "out_prefix", ",", "is_similarity", "=", "False", ")", ":", "\n", "    ", "distances", "=", "torch", ".", "zeros", "(", "ref_batch", ".", "shape", "[", "0", "]", ",", "len", "(", "data_set", ")", ")", "\n", "ref_batch", "=", "ref_batch", ".", "to", "(", "device", ")", "\n", "\n", "data_idx", "=", "0", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "data", ",", "_", "in", "data_loader", ":", "\n", "            ", "data", "=", "data", ".", "to", "(", "device", ")", "\n", "\n", "for", "ref_i", "in", "range", "(", "ref_batch", ".", "shape", "[", "0", "]", ")", ":", "\n", "                ", "ref_point", "=", "ref_batch", "[", "ref_i", "]", ".", "unsqueeze", "(", "0", ")", "\n", "d_data", "=", "dist_function", "(", "ref_point", ",", "data", ")", "\n", "\n", "distances", "[", "ref_i", ",", "data_idx", ":", "(", "data_idx", "+", "data", ".", "shape", "[", "0", "]", ")", "]", "=", "d_data", ".", "detach", "(", ")", ".", "cpu", "(", ")", "\n", "\n", "", "data_idx", "+=", "data", ".", "shape", "[", "0", "]", "\n", "\n", "", "", "pathlib", ".", "Path", "(", "out_dir", ")", ".", "mkdir", "(", "parents", "=", "True", ",", "exist_ok", "=", "True", ")", "\n", "for", "ref_i", "in", "range", "(", "ref_batch", ".", "shape", "[", "0", "]", ")", ":", "\n", "\n", "        ", "num_cols", "=", "1", "+", "num_neighbours", "\n", "scale_factor", "=", "2", "\n", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", "1", ",", "num_cols", ",", "figsize", "=", "(", "scale_factor", "*", "num_cols", ",", "1.3", "*", "scale_factor", ")", ")", "\n", "ax", "=", "np", ".", "expand_dims", "(", "ax", ",", "axis", "=", "0", ")", "\n", "# plot original:", "\n", "ax", "[", "0", ",", "0", "]", ".", "axis", "(", "'off'", ")", "\n", "ax", "[", "0", ",", "0", "]", ".", "title", ".", "set_text", "(", "f'Target'", ")", "\n", "target_img", "=", "ref_batch", "[", "ref_i", ",", ":", "]", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ".", "cpu", "(", ")", ".", "detach", "(", ")", "\n", "ax", "[", "0", ",", "0", "]", ".", "imshow", "(", "target_img", ",", "interpolation", "=", "'lanczos'", ")", "\n", "\n", "d_i", "=", "distances", "[", "ref_i", ",", ":", "]", "\n", "if", "is_similarity", ":", "\n", "            ", "d_i_sort_idcs", "=", "torch", ".", "argsort", "(", "d_i", ",", "descending", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "d_i_sort_idcs", "=", "torch", ".", "argsort", "(", "d_i", ",", "descending", "=", "False", ")", "\n", "\n", "", "for", "j", "in", "range", "(", "num_neighbours", ")", ":", "\n", "            ", "j_idx", "=", "d_i_sort_idcs", "[", "j", "]", "\n", "ref_img", "=", "data_set", "[", "j_idx", "]", "[", "0", "]", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ".", "cpu", "(", ")", ".", "detach", "(", ")", "\n", "ax", "[", "0", ",", "j", "+", "1", "]", ".", "axis", "(", "'off'", ")", "\n", "ax", "[", "0", ",", "j", "+", "1", "]", ".", "imshow", "(", "ref_img", ",", "interpolation", "=", "'lanczos'", ")", "\n", "d_j", "=", "d_i", "[", "j_idx", "]", "\n", "ax", "[", "0", ",", "j", "+", "1", "]", ".", "title", ".", "set_text", "(", "f'{d_j:.3f}'", ")", "\n", "\n", "", "plt", ".", "tight_layout", "(", ")", "\n", "\n", "fig", ".", "savefig", "(", "os", ".", "path", ".", "join", "(", "out_dir", ",", "f'{out_prefix}_{ref_i}.png'", ")", ")", "\n", "fig", ".", "savefig", "(", "os", ".", "path", ".", "join", "(", "out_dir", ",", "f'{out_prefix}_{ref_i}.pdf'", ")", ")", "\n", "plt", ".", "close", "(", "fig", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.utils.bit_downstream_schedule.get_bit_scheduler_optim_configs": [[5, 40], ["int", "utils.create_piecewise_consant_scheduler_config", "utils.create_optimizer_config", "numpy.ceil"], "function", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.schedulers.config_creators.create_piecewise_consant_scheduler_config", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.optimizers.config_creators.create_optimizer_config"], ["def", "get_bit_scheduler_optim_configs", "(", "dataset_size", ",", "dataloader_length", ",", "lr", "=", "0.001", ",", "decay", "=", "0", ",", "nesterov", "=", "False", ")", ":", "\n", "# Bit hyperrule", "\n", "# https://github.com/google-research/big_transfer/blob/0bb237d6e34ab770b56502c90424d262e565a7f3/bit_hyperrule.py#L30", "\n", "    ", "if", "dataset_size", "<", "20_000", ":", "\n", "        ", "decay_steps", "=", "[", "200", ",", "300", ",", "400", "]", "\n", "total_updates", "=", "500", "\n", "warmup_steps", "=", "100", "\n", "", "elif", "dataset_size", "<", "250_000", ":", "\n", "        ", "decay_steps", "=", "[", "3000", ",", "6000", ",", "9000", "]", "\n", "total_updates", "=", "10000", "\n", "warmup_steps", "=", "500", "\n", "# elif dataset_size < 500_000:", "\n", "#     decay_steps = [4500, 9000, 13500]", "\n", "#     total_updates = 15000", "\n", "#     warmup_steps = 500", "\n", "", "else", ":", "\n", "        ", "decay_steps", "=", "[", "6000", ",", "12_000", ",", "18_000", "]", "\n", "total_updates", "=", "20000", "\n", "warmup_steps", "=", "500", "\n", "\n", "", "decay_rate", "=", "0.1", "\n", "epochs", "=", "int", "(", "np", ".", "ceil", "(", "total_updates", "/", "dataloader_length", ")", ")", "\n", "\n", "# convert from batch to epoch", "\n", "decay_epochs", "=", "[", "decay_step", "/", "dataloader_length", "for", "decay_step", "in", "decay_steps", "]", "\n", "warmup_length_epochs", "=", "warmup_steps", "/", "dataloader_length", "\n", "\n", "scheduler_config", "=", "schedulers", ".", "create_piecewise_consant_scheduler_config", "(", "epochs", ",", "decay_epochs", ",", "decay_rate", ",", "\n", "warmup_length", "=", "warmup_length_epochs", ")", "\n", "\n", "#########OPTIMIZER", "\n", "optimizer_config", "=", "optimizers", ".", "create_optimizer_config", "(", "'SGD'", ",", "lr", ",", "momentum", "=", "0.9", ",", "\n", "weight_decay", "=", "decay", ",", "nesterov", "=", "nesterov", ")", "\n", "\n", "return", "scheduler_config", ",", "optimizer_config", ",", "epochs", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.utils.bit_downstream_schedule.get_ssL_bit_scheduler_optim_configs": [[41, 80], ["int", "utils.create_piecewise_consant_scheduler_config", "utils.create_optimizer_config", "numpy.ceil"], "function", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.schedulers.config_creators.create_piecewise_consant_scheduler_config", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.optimizers.config_creators.create_optimizer_config"], ["", "def", "get_ssL_bit_scheduler_optim_configs", "(", "dataset_size", ",", "dataloader_length", ",", "lr", "=", "0.001", ",", "decay", "=", "0", ",", "nesterov", "=", "False", ")", ":", "\n", "# Bit hyperrule", "\n", "# https://github.com/google-research/big_transfer/blob/0bb237d6e34ab770b56502c90424d262e565a7f3/bit_hyperrule.py#L30", "\n", "    ", "if", "dataset_size", "<", "10_000", ":", "\n", "        ", "decay_steps", "=", "[", "200", ",", "300", ",", "400", "]", "\n", "total_updates", "=", "500", "\n", "warmup_steps", "=", "100", "\n", "", "if", "dataset_size", "<", "20_000", ":", "\n", "        ", "decay_steps", "=", "[", "200", ",", "300", ",", "400", "]", "\n", "total_updates", "=", "500", "\n", "warmup_steps", "=", "100", "\n", "", "elif", "dataset_size", "<", "250_000", ":", "\n", "        ", "decay_steps", "=", "[", "3000", ",", "6000", ",", "9000", "]", "\n", "total_updates", "=", "10000", "\n", "warmup_steps", "=", "500", "\n", "# elif dataset_size < 500_000:", "\n", "#     decay_steps = [4500, 9000, 13500]", "\n", "#     total_updates = 15000", "\n", "#     warmup_steps = 500", "\n", "", "else", ":", "\n", "        ", "decay_steps", "=", "[", "6000", ",", "12_000", ",", "18_000", "]", "\n", "total_updates", "=", "20000", "\n", "warmup_steps", "=", "500", "\n", "\n", "", "decay_rate", "=", "0.1", "\n", "epochs", "=", "int", "(", "np", ".", "ceil", "(", "total_updates", "/", "dataloader_length", ")", ")", "\n", "\n", "# convert from batch to epoch", "\n", "decay_epochs", "=", "[", "decay_step", "/", "dataloader_length", "for", "decay_step", "in", "decay_steps", "]", "\n", "warmup_length_epochs", "=", "warmup_steps", "/", "dataloader_length", "\n", "\n", "scheduler_config", "=", "schedulers", ".", "create_piecewise_consant_scheduler_config", "(", "epochs", ",", "decay_epochs", ",", "decay_rate", ",", "\n", "warmup_length", "=", "warmup_length_epochs", ")", "\n", "\n", "#########OPTIMIZER", "\n", "optimizer_config", "=", "optimizers", ".", "create_optimizer_config", "(", "'SGD'", ",", "lr", ",", "momentum", "=", "0.9", ",", "\n", "weight_decay", "=", "decay", ",", "nesterov", "=", "nesterov", ")", "\n", "\n", "return", "scheduler_config", ",", "optimizer_config", ",", "epochs", "\n", "", ""]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.utils.run_file_helpers.parser_add_commons": [[10, 67], ["parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "bool", "bool", "bool", "bool", "distutils.util.strtobool", "distutils.util.strtobool", "distutils.util.strtobool", "distutils.util.strtobool"], "function", ["None"], ["def", "parser_add_commons", "(", "parser", ")", ":", "\n", "    ", "parser", ".", "add_argument", "(", "'--gpu'", ",", "'--list'", ",", "nargs", "=", "'+'", ",", "default", "=", "[", "0", "]", ",", "\n", "help", "=", "'GPU indices, if more than 1 parallel modules will be called'", ")", "\n", "parser", ".", "add_argument", "(", "'--lr'", ",", "type", "=", "float", ",", "default", "=", "0.1", ",", "help", "=", "'Learning rate for training'", ")", "\n", "parser", ".", "add_argument", "(", "'--bs'", ",", "type", "=", "int", ",", "default", "=", "128", ",", "help", "=", "'Training batch_size'", ")", "\n", "parser", ".", "add_argument", "(", "'--decay'", ",", "type", "=", "float", ",", "default", "=", "5e-4", ",", "help", "=", "'weight decay'", ")", "\n", "parser", ".", "add_argument", "(", "'--momentum'", ",", "type", "=", "float", ",", "default", "=", "0.9", ",", "help", "=", "'SGD momentum'", ")", "\n", "parser", ".", "add_argument", "(", "'--epochs'", ",", "type", "=", "int", ",", "default", "=", "100", ",", "help", "=", "'Total number of epochs'", ")", "\n", "parser", ".", "add_argument", "(", "'--test_epochs'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "help", "=", "'Test frequency'", ")", "\n", "parser", ".", "add_argument", "(", "'--train_type'", ",", "type", "=", "str", ",", "default", "=", "'plain'", ",", "help", "=", "'Train type'", ")", "\n", "parser", ".", "add_argument", "(", "'--optim'", ",", "type", "=", "str", ",", "default", "=", "'sgd'", ",", "help", "=", "'Optimizer'", ")", "\n", "parser", ".", "add_argument", "(", "'--continue'", ",", "dest", "=", "'continue_trained'", ",", "nargs", "=", "3", ",", "type", "=", "str", ",", "\n", "default", "=", "None", ",", "help", "=", "'Filename Load_epoch Start_epoch of model to continue'", ")", "\n", "parser", ".", "add_argument", "(", "'--augm'", ",", "type", "=", "str", ",", "default", "=", "'default'", ",", "\n", "help", "=", "(", "'Augmentation type'", ")", ")", "\n", "parser", ".", "add_argument", "(", "'--warmup_epochs'", ",", "type", "=", "int", ",", "\n", "default", "=", "'0'", ",", "help", "=", "'Warmup length'", ")", "\n", "parser", ".", "add_argument", "(", "'--schedule'", ",", "type", "=", "str", ",", "\n", "default", "=", "'step_lr'", ",", "help", "=", "'LR scheduler'", ")", "\n", "parser", ".", "add_argument", "(", "'--nesterov'", ",", "dest", "=", "'nesterov'", ",", "type", "=", "lambda", "x", ":", "bool", "(", "strtobool", "(", "x", ")", ")", ",", "\n", "default", "=", "True", ",", "help", "=", "'Nesterov SGD'", ")", "\n", "parser", ".", "add_argument", "(", "'--msda'", ",", "type", "=", "str", ",", "\n", "default", "=", "'none'", ",", "help", "=", "'MSDA: None, mixup or fmix'", ")", "\n", "parser", ".", "add_argument", "(", "'--msda_alpha'", ",", "type", "=", "float", ",", "\n", "default", "=", "1.0", ",", "help", "=", "'MSDA Alpha'", ")", "\n", "parser", ".", "add_argument", "(", "'--mixed_precision'", ",", "type", "=", "lambda", "x", ":", "bool", "(", "strtobool", "(", "x", ")", ")", ",", "\n", "default", "=", "False", ",", "help", "=", "'Mixed precision training'", ")", "\n", "parser", ".", "add_argument", "(", "'--ema'", ",", "type", "=", "lambda", "x", ":", "bool", "(", "strtobool", "(", "x", ")", ")", ",", "\n", "default", "=", "False", ",", "help", "=", "'Exponential moving average'", ")", "\n", "parser", ".", "add_argument", "(", "'--ema_decay'", ",", "type", "=", "float", ",", "\n", "default", "=", "0.999", ",", "\n", "help", "=", "'EMA decay'", ")", "\n", "parser", ".", "add_argument", "(", "'--sam_rho'", ",", "type", "=", "float", ",", "\n", "default", "=", "0.05", ",", "\n", "help", "=", "'SAM rho'", ")", "\n", "parser", ".", "add_argument", "(", "'--sam_adaptive'", ",", "type", "=", "lambda", "x", ":", "bool", "(", "strtobool", "(", "x", ")", ")", ",", "\n", "default", "=", "False", ",", "\n", "help", "=", "'SAM adaptive toggle'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--swa'", ",", "type", "=", "str", ",", "\n", "default", "=", "None", ",", "help", "=", "'SWA cosine or const'", ")", "\n", "parser", ".", "add_argument", "(", "'--swa_epochs'", ",", "type", "=", "int", ",", "\n", "default", "=", "500", ",", "help", "=", "'SWA epochs after regular training'", ")", "\n", "parser", ".", "add_argument", "(", "'--swa_cycle_length'", ",", "type", "=", "int", ",", "\n", "default", "=", "200", ",", "\n", "help", "=", "'In Cosine mode, SWA repeats epochs [SWA_END - SWA_CYCLE_LENGTH, SWA_END] for a total number of SWA_epochs'", ")", "\n", "parser", ".", "add_argument", "(", "'--swa_virtual_schedule_length'", ",", "type", "=", "int", ",", "\n", "default", "=", "1800", ",", "\n", "help", "=", "'In Cosine mode, SWA repeats epochs [SWA_END - SWA_CYCLE_LENGTH, SWA_END] for a total number of SWA_epochs'", ")", "\n", "parser", ".", "add_argument", "(", "'--swa_virtual_schedule_swa_end'", ",", "type", "=", "int", ",", "\n", "default", "=", "1500", ",", "\n", "help", "=", "'In Cosine mode, SWA repeats epochs [SWA_END - SWA_CYCLE_LENGTH, SWA_END] for a total number of SWA_epochs'", ")", "\n", "parser", ".", "add_argument", "(", "'--swa_lr'", ",", "type", "=", "float", ",", "\n", "default", "=", "0.025", ",", "\n", "help", "=", "'SWA LR'", ")", "\n", "parser", ".", "add_argument", "(", "'--swa_update_frequency'", ",", "type", "=", "int", ",", "\n", "default", "=", "20", ",", "help", "=", "'SWA epochs after regular training'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.utils.run_file_helpers.parser_add_adversarial_commons": [[70, 105], ["parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "bool", "distutils.util.strtobool"], "function", ["None"], ["", "def", "parser_add_adversarial_commons", "(", "parser", ")", ":", "\n", "    ", "parser", ".", "add_argument", "(", "'--od_weight'", ",", "type", "=", "float", ",", "default", "=", "1.", ",", "help", "=", "'Weight for out-distribution term in ACET (derivates)'", ")", "\n", "parser", ".", "add_argument", "(", "'--trades_weight'", ",", "type", "=", "float", ",", "default", "=", "6.", ",", "help", "=", "'Weight for TRADES term in TRADES (derivates)'", ")", "\n", "parser", ".", "add_argument", "(", "'--od_trades_weight'", ",", "type", "=", "float", ",", "default", "=", "6.", ",", "help", "=", "'Weight for OD-TRADES term'", ")", "\n", "parser", ".", "add_argument", "(", "'--train_clean'", ",", "dest", "=", "'train_clean'", ",", "type", "=", "lambda", "x", ":", "bool", "(", "strtobool", "(", "x", ")", ")", ",", "\n", "default", "=", "False", ",", "help", "=", "'Train on additional clean data or purely adversarial'", ")", "\n", "parser", ".", "add_argument", "(", "'--norm'", ",", "type", "=", "str", ",", "default", "=", "'l2'", ",", "\n", "help", "=", "(", "'l2 or linf'", ")", ")", "\n", "parser", ".", "add_argument", "(", "'--od_bs_factor'", ",", "default", "=", "1", ",", "type", "=", "float", ",", "help", "=", "'OD batch out_size factor'", ")", "\n", "\n", "#ID PGD for AT/TRADES", "\n", "parser", ".", "add_argument", "(", "'--id_steps'", ",", "type", "=", "int", ",", "default", "=", "20", ",", "help", "=", "'steps in ID attack'", ")", "\n", "parser", ".", "add_argument", "(", "'--id_pgd'", ",", "type", "=", "str", ",", "default", "=", "'argmin'", ",", "\n", "help", "=", "'PGD variation for ID attack: pgd, argmin, monotone'", ")", "\n", "\n", "#OD PGD for ACET", "\n", "parser", ".", "add_argument", "(", "'--od_steps'", ",", "type", "=", "int", ",", "default", "=", "20", ",", "help", "=", "'steps in OD attack (ACET)'", ")", "\n", "parser", ".", "add_argument", "(", "'--od_pgd'", ",", "type", "=", "str", ",", "default", "=", "'argmin'", ",", "\n", "help", "=", "'PGD variation for OD attack: pgd, argmin, monotone'", ")", "\n", "\n", "#Objectives", "\n", "parser", ".", "add_argument", "(", "'--adv_obj'", ",", "type", "=", "str", ",", "default", "=", "'ce'", ",", "\n", "help", "=", "(", "'Objective to optimize in the inner loop of adversarial training'", "\n", "'logitsDiff | crossEntropy'", ")", ")", "\n", "parser", ".", "add_argument", "(", "'--ceda_obj'", ",", "type", "=", "str", ",", "default", "=", "'KL'", ",", "\n", "help", "=", "(", "'only for ACET; what objective the adversary has'", "\n", "'conf | log_conf | entropy | KL | bhattacharyya'", ")", ")", "\n", "\n", "#Randomized smoothing", "\n", "parser", ".", "add_argument", "(", "'--rs_levels'", ",", "type", "=", "int", ",", "default", "=", "'500'", ",", "\n", "help", "=", "(", "'Number of randomized smoothing levels'", ")", ")", "\n", "parser", ".", "add_argument", "(", "'--rs_sigma_begin'", ",", "type", "=", "float", ",", "default", "=", "'1.0'", ",", "\n", "help", "=", "(", "'Randomized smoothing: start sigma'", ")", ")", "\n", "parser", ".", "add_argument", "(", "'--rs_sigma_end'", ",", "type", "=", "float", ",", "default", "=", "'0.0001'", ",", "\n", "help", "=", "(", "'Randomized smoothing: end sigma'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.utils.run_file_helpers.parser_add_adversarial_norms": [[107, 111], ["parser.add_argument", "parser.add_argument", "parser.add_argument"], "function", ["None"], ["", "def", "parser_add_adversarial_norms", "(", "parser", ",", "dataset", ")", ":", "\n", "    ", "parser", ".", "add_argument", "(", "'--eps'", ",", "type", "=", "float", ",", "default", "=", "None", ",", "help", "=", "'Epsilon'", ")", "\n", "parser", ".", "add_argument", "(", "'--stepsize'", ",", "type", "=", "float", ",", "default", "=", "None", ",", "help", "=", "'PGD stepsize'", ")", "\n", "parser", ".", "add_argument", "(", "'--od_eps_factor'", ",", "type", "=", "float", ",", "default", "=", "1.0", ",", "help", "=", "'Multiplier for ACET epsilon'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.utils.run_file_helpers.load_model_checkpoint": [[113, 142], ["int", "torch.load", "model.load_state_dict", "print", "int", "torch.load", "print"], "function", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.schedulers.scheduler.Scheduler.load_state_dict"], ["", "def", "load_model_checkpoint", "(", "model", ",", "model_dir", ",", "device", ",", "hps", ")", ":", "\n", "# load old density_model", "\n", "    ", "if", "hps", ".", "continue_trained", "is", "not", "None", ":", "\n", "        ", "load_folder", "=", "hps", ".", "continue_trained", "[", "0", "]", "\n", "load_epoch", "=", "hps", ".", "continue_trained", "[", "1", "]", "\n", "start_epoch", "=", "int", "(", "int", "(", "hps", ".", "continue_trained", "[", "2", "]", ")", ")", "# * epoch_subdivs)", "\n", "if", "load_epoch", "in", "[", "'final'", ",", "'best'", ",", "'best_avg'", ",", "'final_avg'", "]", ":", "\n", "            ", "state_dict_file", "=", "f'{model_dir}/{load_folder}/{load_epoch}.pth'", "\n", "optimizer_dict_file", "=", "f'{model_dir}/{load_folder}/{load_epoch}_optim.pth'", "\n", "", "else", ":", "\n", "            ", "state_dict_file", "=", "f'{model_dir}/{load_folder}/checkpoints/{load_epoch}.pth'", "\n", "optimizer_dict_file", "=", "f'{model_dir}/{load_folder}/checkpoints/{load_epoch}_optim.pth'", "\n", "\n", "", "state_dict", "=", "torch", ".", "load", "(", "state_dict_file", ",", "map_location", "=", "device", ")", "\n", "\n", "try", ":", "\n", "            ", "optim_state_dict", "=", "torch", ".", "load", "(", "optimizer_dict_file", ",", "map_location", "=", "device", ")", "\n", "", "except", ":", "\n", "            ", "print", "(", "'Warning: Could not load Optim State - Restarting optim'", ")", "\n", "optim_state_dict", "=", "None", "\n", "\n", "", "model", ".", "load_state_dict", "(", "state_dict", ")", "\n", "\n", "print", "(", "f'Continuing {load_folder} from epoch {load_epoch} - Starting training at epoch {start_epoch}'", ")", "\n", "", "else", ":", "\n", "        ", "start_epoch", "=", "0", "\n", "optim_state_dict", "=", "None", "\n", "\n", "", "return", "start_epoch", ",", "optim_state_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.utils.run_file_helpers.create_msda_config": [[143, 156], ["utils.create_fmix_config", "NotImplementedError", "print", "hps.augm.split"], "function", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.msda.config_creators.create_fmix_config"], ["", "def", "create_msda_config", "(", "hps", ")", ":", "\n", "    ", "if", "hps", ".", "msda", "==", "'none'", ":", "\n", "        ", "msda_config", "=", "None", "\n", "", "elif", "hps", ".", "msda", "==", "'fmix'", ":", "\n", "        ", "if", "'_cutout'", "in", "hps", ".", "augm", ":", "\n", "            ", "augm_new", "=", "hps", ".", "augm", ".", "split", "(", "'_cutout'", ")", "[", "0", "]", "\n", "print", "(", "f'Warning found augmentation {hps.augm} with cutout - changing to {augm_new}'", ")", "\n", "hps", ".", "augm", "=", "augm_new", "\n", "", "msda_config", "=", "msda", ".", "create_fmix_config", "(", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n", "", "return", "msda_config", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.utils.run_file_helpers.create_optim_scheduler_swa_configs": [[157, 228], ["utils.create_piecewise_consant_scheduler_config", "hps.optim.lower", "utils.create_sam_optimizer_config", "utils.create_optimizer_config", "utils.config_creators.add_constant_swa_to_optimizer_config", "utils.create_cosine_annealing_scheduler_config", "NotImplementedError", "utils.config_creators.add_cosine_swa_to_optimizer_config", "NotImplementedError"], "function", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.schedulers.config_creators.create_piecewise_consant_scheduler_config", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.optimizers.config_creators.create_sam_optimizer_config", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.optimizers.config_creators.create_optimizer_config", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.optimizers.config_creators.add_constant_swa_to_optimizer_config", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.schedulers.config_creators.create_cosine_annealing_scheduler_config", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.optimizers.config_creators.add_cosine_swa_to_optimizer_config"], ["", "def", "create_optim_scheduler_swa_configs", "(", "hps", ")", ":", "\n", "# SCHEDULER", "\n", "    ", "epochs", "=", "hps", ".", "epochs", "\n", "warmup_epochs", "=", "hps", ".", "warmup_epochs", "\n", "decay_rate", "=", "0.1", "\n", "\n", "if", "hps", ".", "schedule", "==", "'step_lr'", ":", "\n", "        ", "if", "epochs", "==", "25", ":", "\n", "            ", "decay_epochs", "=", "[", "10", ",", "15", ",", "20", "]", "\n", "", "if", "epochs", "==", "50", ":", "\n", "            ", "decay_epochs", "=", "[", "25", ",", "40", "]", "\n", "", "elif", "epochs", "==", "100", ":", "\n", "            ", "decay_epochs", "=", "[", "50", ",", "75", ",", "90", "]", "\n", "", "elif", "epochs", "==", "110", ":", "\n", "            ", "decay_epochs", "=", "[", "100", "]", "\n", "", "elif", "epochs", "==", "120", ":", "\n", "            ", "decay_epochs", "=", "[", "50", ",", "85", ",", "105", "]", "\n", "", "elif", "epochs", "==", "150", ":", "\n", "            ", "decay_epochs", "=", "[", "60", ",", "90", ",", "120", "]", "\n", "", "elif", "epochs", "==", "200", ":", "\n", "            ", "decay_epochs", "=", "[", "75", ",", "125", ",", "175", "]", "\n", "", "elif", "epochs", "==", "220", "or", "epochs", "==", "250", "or", "epochs", "==", "230", ":", "\n", "            ", "decay_epochs", "=", "[", "100", ",", "150", ",", "200", "]", "\n", "", "elif", "epochs", "==", "300", ":", "\n", "            ", "decay_epochs", "=", "[", "80", ",", "160", ",", "240", "]", "\n", "", "elif", "epochs", "==", "333", ":", "\n", "            ", "decay_epochs", "=", "[", "150", ",", "200", ",", "280", "]", "\n", "", "elif", "epochs", "==", "320", "or", "epochs", "==", "350", ":", "\n", "            ", "decay_epochs", "=", "[", "150", ",", "225", ",", "300", "]", "\n", "", "elif", "epochs", "==", "500", ":", "\n", "            ", "decay_epochs", "=", "[", "200", ",", "300", ",", "400", "]", "\n", "", "elif", "epochs", "==", "1000", ":", "\n", "            ", "decay_epochs", "=", "[", "400", ",", "600", ",", "800", "]", "\n", "", "elif", "epochs", "==", "5000", ":", "\n", "            ", "decay_epochs", "=", "[", "2000", ",", "3000", ",", "4000", "]", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "f'Epochs {epochs} not supported'", ")", "\n", "\n", "", "scheduler_config", "=", "schedulers", ".", "create_piecewise_consant_scheduler_config", "(", "epochs", ",", "decay_epochs", ",", "decay_rate", ",", "\n", "warmup_length", "=", "warmup_epochs", ")", "\n", "", "elif", "hps", ".", "schedule", "==", "'cosine'", ":", "\n", "        ", "scheduler_config", "=", "schedulers", ".", "create_cosine_annealing_scheduler_config", "(", "epochs", ",", "0.", ",", "\n", "warmup_length", "=", "warmup_epochs", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n", "# optimizer", "\n", "", "if", "hps", ".", "optim", ".", "lower", "(", ")", "==", "'sam'", ":", "\n", "        ", "optimizer_config", "=", "optimizers", ".", "create_sam_optimizer_config", "(", "hps", ".", "lr", ",", "momentum", "=", "hps", ".", "momentum", ",", "weight_decay", "=", "hps", ".", "decay", ",", "\n", "sam_adaptive", "=", "hps", ".", "sam_adaptive", ",", "sam_rho", "=", "hps", ".", "sam_rho", ",", "\n", "nesterov", "=", "hps", ".", "nesterov", ",", "\n", "ema", "=", "hps", ".", "ema", ",", "ema_decay", "=", "hps", ".", "ema_decay", ")", "\n", "", "else", ":", "\n", "        ", "optimizer_config", "=", "optimizers", ".", "create_optimizer_config", "(", "hps", ".", "optim", ",", "hps", ".", "lr", ",", "momentum", "=", "hps", ".", "momentum", ",", "weight_decay", "=", "hps", ".", "decay", ",", "\n", "nesterov", "=", "hps", ".", "nesterov", ",", "mixed_precision", "=", "hps", ".", "mixed_precision", ",", "\n", "ema", "=", "hps", ".", "ema", ",", "ema_decay", "=", "hps", ".", "ema_decay", ")", "\n", "\n", "", "if", "hps", ".", "swa", "==", "'const'", ":", "\n", "        ", "optimizers", ".", "config_creators", ".", "add_constant_swa_to_optimizer_config", "(", "hps", ".", "swa_epochs", ",", "\n", "hps", ".", "swa_update_frequency", ",", "\n", "hps", ".", "swa_lr", ",", "\n", "optimizer_config", ")", "\n", "", "elif", "hps", ".", "swa", "==", "'cosine'", ":", "\n", "        ", "optimizers", ".", "config_creators", ".", "add_cosine_swa_to_optimizer_config", "(", "hps", ".", "swa_epochs", ",", "hps", ".", "swa_cycle_length", ",", "\n", "hps", ".", "swa_update_frequency", ",", "\n", "hps", ".", "swa_virtual_schedule_length", ",", "\n", "hps", ".", "swa_virtual_schedule_swa_end", ",", "\n", "hps", ".", "swa_lr", ",", "\n", "optimizer_config", ")", "\n", "\n", "", "return", "scheduler_config", ",", "optimizer_config", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.utils.run_file_helpers.create_attack_config": [[230, 288], ["utils.create_attack_config", "utils.create_attack_config", "hps.norm.lower", "hps.norm.lower", "NotImplementedError", "hps.norm.lower", "hps.norm.lower", "NotImplementedError"], "function", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.helpers.create_attack_config", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.helpers.create_attack_config"], ["", "def", "create_attack_config", "(", "hps", ",", "dataset", ")", ":", "\n", "    ", "if", "hps", ".", "norm", ".", "lower", "(", ")", "in", "[", "'l2'", ",", "'2'", "]", ":", "\n", "        ", "hps", ".", "norm", "=", "'l2'", "\n", "", "elif", "hps", ".", "norm", ".", "lower", "(", ")", "in", "[", "'l1'", ",", "'1'", "]", ":", "\n", "        ", "hps", ".", "norm", "=", "'l1'", "\n", "", "elif", "hps", ".", "norm", ".", "lower", "(", ")", "in", "[", "'linf'", ",", "'inf'", "]", ":", "\n", "        ", "hps", ".", "norm", "=", "'linf'", "\n", "", "elif", "hps", ".", "norm", ".", "lower", "(", ")", "in", "[", "'l1.5'", ",", "'1.5'", "]", ":", "\n", "        ", "hps", ".", "norm", "=", "'l1.5'", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n", "", "norm_eps", "=", "{", "}", "\n", "norm_stepsizes", "=", "{", "}", "\n", "\n", "if", "dataset", "in", "[", "'cifar10'", ",", "'cifar100'", "]", ":", "\n", "        ", "norm_eps", "[", "'linf'", "]", "=", "8", "/", "255", "\n", "norm_eps", "[", "'l2'", "]", "=", "0.5", "\n", "norm_eps", "[", "'l1'", "]", "=", "12", "\n", "norm_eps", "[", "'l1.5'", "]", "=", "6", "\n", "\n", "norm_stepsizes", "[", "'linf'", "]", "=", "2", "/", "255", "\n", "norm_stepsizes", "[", "'l2'", "]", "=", "0.1", "\n", "norm_stepsizes", "[", "'l1'", "]", "=", "5", "\n", "norm_stepsizes", "[", "'l1.5'", "]", "=", "None", "\n", "", "elif", "dataset", "in", "[", "'restrictedImagenet'", ",", "'imagenet'", ",", "'lsun'", ",", "'celebA'", "]", ":", "\n", "        ", "norm_eps", "[", "'linf'", "]", "=", "8", "/", "255", "\n", "norm_eps", "[", "'l2'", "]", "=", "3.0", "\n", "norm_eps", "[", "'l1'", "]", "=", "72", "\n", "norm_eps", "[", "'l1.5'", "]", "=", "20", "\n", "\n", "norm_stepsizes", "[", "'linf'", "]", "=", "2", "/", "255", "\n", "norm_stepsizes", "[", "'l2'", "]", "=", "0.6", "\n", "norm_stepsizes", "[", "'l1'", "]", "=", "30", "\n", "norm_stepsizes", "[", "'l1.5'", "]", "=", "None", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n", "", "if", "hps", ".", "eps", "is", "not", "None", ":", "\n", "        ", "eps", "=", "hps", ".", "eps", "\n", "", "else", ":", "\n", "        ", "eps", "=", "norm_eps", "[", "hps", ".", "norm", "]", "\n", "\n", "", "if", "hps", ".", "stepsize", "is", "not", "None", ":", "\n", "        ", "stepsize", "=", "hps", ".", "stepsize", "\n", "", "else", ":", "\n", "        ", "stepsize", "=", "norm_stepsizes", "[", "hps", ".", "norm", "]", "\n", "\n", "", "od_eps", "=", "eps", "*", "hps", ".", "od_eps_factor", "\n", "\n", "id_attack_config", "=", "tt", ".", "create_attack_config", "(", "eps", ",", "hps", ".", "id_steps", ",", "stepsize", ",", "hps", ".", "norm", ",", "\n", "pgd", "=", "hps", ".", "id_pgd", ",", "\n", "normalize_gradient", "=", "True", ")", "\n", "od_attack_config", "=", "tt", ".", "create_attack_config", "(", "od_eps", ",", "hps", ".", "od_steps", ",", "stepsize", ",", "hps", ".", "norm", ",", "\n", "pgd", "=", "hps", ".", "od_pgd", ",", "\n", "normalize_gradient", "=", "True", ")", "\n", "\n", "return", "id_attack_config", ",", "od_attack_config", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.utils.run_file_helpers.create_trainer": [[289, 350], ["hps.train_type.lower", "utils.PlainTraining", "hps.train_type.lower", "utils.AdversarialTraining", "hps.train_type.lower", "utils.TRADESTraining", "hps.train_type.lower", "utils.AdversarialACET", "hps.train_type.lower", "utils.TRADESACETTraining", "hps.train_type.lower", "utils.TRADESCEDATraining", "utils.CEDATraining", "hps.train_type.lower", "utils.ACETTraining", "hps.train_type.lower", "torch.FloatTensor", "utils.RandomizedSmoothingTraining", "ValueError", "numpy.geomspace"], "function", ["None"], ["", "def", "create_trainer", "(", "hps", ",", "model", ",", "optimizer_config", ",", "scheduler_config", ",", "device", ",", "num_classes", ",", "model_dir", ",", "log_dir", ",", "\n", "msda_config", "=", "None", ",", "model_config", "=", "None", ",", "id_attack_config", "=", "None", ",", "od_attack_config", "=", "None", ")", ":", "\n", "\n", "    ", "if", "hps", ".", "train_type", ".", "lower", "(", ")", "==", "'plain'", ":", "\n", "        ", "trainer", "=", "tt", ".", "PlainTraining", "(", "model", ",", "optimizer_config", ",", "hps", ".", "epochs", ",", "device", ",", "num_classes", ",", "\n", "lr_scheduler_config", "=", "scheduler_config", ",", "\n", "msda_config", "=", "msda_config", ",", "model_config", "=", "model_config", ",", "\n", "saved_model_dir", "=", "model_dir", ",", "saved_log_dir", "=", "log_dir", ",", "test_epochs", "=", "hps", ".", "test_epochs", ")", "\n", "", "elif", "hps", ".", "train_type", ".", "lower", "(", ")", "==", "'adversarial'", ":", "\n", "# https://arxiv.org/pdf/1906.09453.pdf", "\n", "\n", "        ", "trainer", "=", "tt", ".", "AdversarialTraining", "(", "model", ",", "id_attack_config", ",", "optimizer_config", ",", "hps", ".", "epochs", ",", "device", ",", "num_classes", ",", "\n", "train_clean", "=", "hps", ".", "train_clean", ",", "attack_loss", "=", "hps", ".", "adv_obj", ",", "\n", "lr_scheduler_config", "=", "scheduler_config", ",", "model_config", "=", "model_config", ",", "\n", "saved_model_dir", "=", "model_dir", ",", "saved_log_dir", "=", "log_dir", ",", "test_epochs", "=", "hps", ".", "test_epochs", ")", "\n", "", "elif", "hps", ".", "train_type", ".", "lower", "(", ")", "in", "[", "'trades'", "]", ":", "\n", "        ", "trainer", "=", "tt", ".", "TRADESTraining", "(", "model", ",", "id_attack_config", ",", "optimizer_config", ",", "hps", ".", "epochs", ",", "device", ",", "num_classes", ",", "\n", "lr_scheduler_config", "=", "scheduler_config", ",", "model_config", "=", "model_config", ",", "\n", "trades_weight", "=", "hps", ".", "trades_weight", ",", "\n", "saved_model_dir", "=", "model_dir", ",", "saved_log_dir", "=", "log_dir", ",", "test_epochs", "=", "hps", ".", "test_epochs", ")", "\n", "", "elif", "hps", ".", "train_type", ".", "lower", "(", ")", "in", "[", "'advacet'", "]", ":", "\n", "# https://arxiv.org/pdf/1906.09453.pdf", "\n", "        ", "trainer", "=", "tt", ".", "AdversarialACET", "(", "model", ",", "id_attack_config", ",", "od_attack_config", ",", "optimizer_config", ",", "hps", ".", "epochs", ",", "device", ",", "\n", "num_classes", ",", "train_clean", "=", "hps", ".", "train_clean", ",", "attack_loss", "=", "hps", ".", "adv_obj", ",", "\n", "lr_scheduler_config", "=", "scheduler_config", ",", "model_config", "=", "model_config", ",", "\n", "train_obj", "=", "hps", ".", "ceda_obj", ",", "attack_obj", "=", "hps", ".", "ceda_obj", ",", "od_weight", "=", "hps", ".", "od_weight", ",", "\n", "saved_model_dir", "=", "model_dir", ",", "saved_log_dir", "=", "log_dir", ",", "test_epochs", "=", "hps", ".", "test_epochs", ")", "\n", "", "elif", "hps", ".", "train_type", ".", "lower", "(", ")", "==", "'tradesacet'", ":", "\n", "        ", "trainer", "=", "tt", ".", "TRADESACETTraining", "(", "model", ",", "id_attack_config", ",", "od_attack_config", ",", "optimizer_config", ",", "hps", ".", "epochs", ",", "device", ",", "\n", "num_classes", ",", "trades_weight", "=", "hps", ".", "trades_weight", ",", "\n", "lr_scheduler_config", "=", "scheduler_config", ",", "model_config", "=", "model_config", ",", "\n", "acet_obj", "=", "hps", ".", "ceda_obj", ",", "od_weight", "=", "hps", ".", "od_weight", ",", "\n", "saved_model_dir", "=", "model_dir", ",", "saved_log_dir", "=", "log_dir", ",", "test_epochs", "=", "hps", ".", "test_epochs", ")", "\n", "", "elif", "hps", ".", "train_type", ".", "lower", "(", ")", "==", "'tradesceda'", ":", "\n", "        ", "trainer", "=", "tt", ".", "TRADESCEDATraining", "(", "model", ",", "id_attack_config", ",", "od_attack_config", ",", "optimizer_config", ",", "hps", ".", "epochs", ",", "device", ",", "\n", "num_classes", ",", "id_trades_weight", "=", "hps", ".", "trades_weight", ",", "od_trades_weight", "=", "hps", ".", "od_trades_weight", ",", "\n", "lr_scheduler_config", "=", "scheduler_config", ",", "\n", "ceda_obj", "=", "hps", ".", "ceda_obj", ",", "od_weight", "=", "hps", ".", "od_weight", ",", "model_config", "=", "model_config", ",", "\n", "test_epochs", "=", "hps", ".", "test_epochs", ",", "saved_model_dir", "=", "model_dir", ",", "saved_log_dir", "=", "log_dir", ")", "\n", "", "elif", "hps", ".", "train_type", "==", "'CEDA'", ":", "\n", "        ", "trainer", "=", "tt", ".", "CEDATraining", "(", "model", ",", "optimizer_config", ",", "hps", ".", "epochs", ",", "device", ",", "num_classes", ",", "lr_scheduler_config", "=", "scheduler_config", ",", "\n", "msda_config", "=", "msda_config", ",", "model_config", "=", "model_config", ",", "\n", "train_obj", "=", "hps", ".", "ceda_obj", ",", "od_weight", "=", "hps", ".", "od_weight", ",", "saved_model_dir", "=", "model_dir", ",", "\n", "saved_log_dir", "=", "log_dir", ",", "test_epochs", "=", "hps", ".", "test_epochs", ")", "\n", "", "elif", "hps", ".", "train_type", ".", "lower", "(", ")", "==", "'acet'", ":", "\n", "# L2 disance between cifar10 and mnist is about 14 on average", "\n", "        ", "trainer", "=", "tt", ".", "ACETTraining", "(", "model", ",", "od_attack_config", ",", "optimizer_config", ",", "hps", ".", "epochs", ",", "device", ",", "num_classes", ",", "\n", "lr_scheduler_config", "=", "scheduler_config", ",", "model_config", "=", "model_config", ",", "\n", "od_weight", "=", "hps", ".", "od_weight", ",", "train_obj", "=", "hps", ".", "ceda_obj", ",", "attack_obj", "=", "hps", ".", "ceda_obj", ",", "\n", "test_epochs", "=", "hps", ".", "test_epochs", ",", "saved_model_dir", "=", "model_dir", ",", "saved_log_dir", "=", "log_dir", ")", "\n", "", "elif", "hps", ".", "train_type", ".", "lower", "(", ")", "in", "[", "'randomizedsmoothing'", ",", "'randomized_smoothing'", "]", ":", "\n", "        ", "rs_noise_scales", "=", "torch", ".", "FloatTensor", "(", "np", ".", "geomspace", "(", "hps", ".", "rs_sigma_begin", ",", "hps", ".", "rs_sigma_end", ",", "hps", ".", "rs_levels", ")", ")", "\n", "trainer", "=", "tt", ".", "RandomizedSmoothingTraining", "(", "model", ",", "optimizer_config", ",", "hps", ".", "epochs", ",", "device", ",", "num_classes", ",", "rs_noise_scales", ",", "\n", "train_clean", "=", "hps", ".", "train_clean", ",", "lr_scheduler_config", "=", "scheduler_config", ",", "\n", "model_config", "=", "model_config", ",", "\n", "saved_model_dir", "=", "model_dir", ",", "saved_log_dir", "=", "log_dir", ",", "\n", "test_epochs", "=", "hps", ".", "test_epochs", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'Train type {} is not supported'", ".", "format", "(", "hps", ".", "train_type", ")", ")", "\n", "\n", "", "return", "trainer", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.utils.temperature_wrapper.TemperatureWrapper.__init__": [[9, 16], ["torch.Module.__init__", "temperature_wrapper.TemperatureWrapper.train"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models_32x32.shake_pyramidnet.ShakePyramidNet.__init__", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_type.TrainType.train"], ["    ", "def", "__init__", "(", "self", ",", "model", ",", "T", "=", "1.", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "train", "(", "model", ".", "training", ")", "\n", "\n", "self", ".", "model", "=", "model", "\n", "self", ".", "T", "=", "T", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.utils.temperature_wrapper.TemperatureWrapper.forward": [[17, 20], ["temperature_wrapper.TemperatureWrapper.model"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "logits", "=", "self", ".", "model", "(", "x", ")", "\n", "return", "logits", "/", "self", ".", "T", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.utils.temperature_wrapper.TemperatureWrapper.compute_temperature": [[21, 45], ["model.eval", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "float", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "ca.append", "torch.stack().min", "torch.stack().min", "torch.stack().min", "torch.stack().min", "torch.stack().min", "torch.stack().min", "torch.stack().min", "torch.stack().min", "torch.stack().min", "numpy.exp", "data.to.to.to", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "model().detach().cpu", "temperature_wrapper.TemperatureWrapper._get_ece_inner", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "model().detach", "numpy.exp", "model"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models.ebm_wrn.gradient_attack_wrapper.eval", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.utils.temperature_wrapper.TemperatureWrapper._get_ece_inner"], ["", "@", "staticmethod", "\n", "def", "compute_temperature", "(", "model", ",", "loader", ",", "device", ")", ":", "\n", "        ", "model", ".", "eval", "(", ")", "\n", "logits", "=", "[", "]", "\n", "labels", "=", "[", "]", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "data", ",", "target", "in", "loader", ":", "\n", "                ", "data", "=", "data", ".", "to", "(", "device", ")", "\n", "\n", "logits", ".", "append", "(", "model", "(", "data", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ")", "\n", "labels", ".", "append", "(", "target", ")", "\n", "\n", "", "", "logits", "=", "torch", ".", "cat", "(", "logits", ",", "0", ")", "\n", "labels", "=", "torch", ".", "cat", "(", "labels", ",", "0", ")", "\n", "\n", "ca", "=", "[", "]", "\n", "log_T", "=", "torch", ".", "linspace", "(", "-", "3.", ",", "1.", ",", "2000", ")", "\n", "\n", "for", "t", "in", "log_T", ":", "\n", "            ", "ca", ".", "append", "(", "TemperatureWrapper", ".", "_get_ece_inner", "(", "logits", "/", "np", ".", "exp", "(", "t", ")", ",", "labels", ")", "[", "0", "]", ")", "\n", "ece", ",", "idx", "=", "torch", ".", "stack", "(", "ca", ",", "0", ")", ".", "min", "(", "0", ")", "\n", "\n", "", "T", "=", "float", "(", "np", ".", "exp", "(", "log_T", "[", "idx", "]", ")", ")", "\n", "return", "T", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.utils.temperature_wrapper.TemperatureWrapper.compute_ece": [[46, 62], ["model.eval", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "temperature_wrapper.TemperatureWrapper._get_ece_inner", "data.to.to.to", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "model().detach().cpu", "model().detach", "model"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models.ebm_wrn.gradient_attack_wrapper.eval", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.utils.temperature_wrapper.TemperatureWrapper._get_ece_inner"], ["", "@", "staticmethod", "\n", "def", "compute_ece", "(", "model", ",", "loader", ",", "device", ")", ":", "\n", "        ", "model", ".", "eval", "(", ")", "\n", "logits", "=", "[", "]", "\n", "labels", "=", "[", "]", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "data", ",", "target", "in", "loader", ":", "\n", "                ", "data", "=", "data", ".", "to", "(", "device", ")", "\n", "\n", "logits", ".", "append", "(", "model", "(", "data", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ")", "\n", "labels", ".", "append", "(", "target", ")", "\n", "\n", "", "", "logits", "=", "torch", ".", "cat", "(", "logits", ",", "0", ")", "\n", "labels", "=", "torch", ".", "cat", "(", "labels", ",", "0", ")", "\n", "ece", "=", "TemperatureWrapper", ".", "_get_ece_inner", "(", "logits", ",", "labels", ")", "[", "0", "]", "\n", "return", "ece", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.utils.temperature_wrapper.TemperatureWrapper._get_ece_inner": [[63, 84], ["torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.softmax", "torch.softmax", "torch.softmax", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "predictions.eq", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "zip", "in_bin.float().mean", "confidences.gt", "confidences.le", "in_bin.float().mean.item", "accuracies[].float().mean", "confidences[].mean", "bin_lower.item", "bin_upper.item", "in_bin.float", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "accuracies[].float"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_get_ece_inner", "(", "logits", ",", "labels", ",", "n_bins", "=", "20", ")", ":", "\n", "        ", "bin_boundaries", "=", "torch", ".", "linspace", "(", "0", ",", "1", ",", "n_bins", "+", "1", ")", "\n", "bin_lowers", "=", "bin_boundaries", "[", ":", "-", "1", "]", "\n", "bin_uppers", "=", "bin_boundaries", "[", "1", ":", "]", "\n", "\n", "softmaxes", "=", "F", ".", "softmax", "(", "logits", ",", "dim", "=", "1", ")", "\n", "confidences", ",", "predictions", "=", "torch", ".", "max", "(", "softmaxes", ",", "1", ")", "\n", "accuracies", "=", "predictions", ".", "eq", "(", "labels", ")", "\n", "\n", "ece", "=", "torch", ".", "zeros", "(", "1", ",", "device", "=", "logits", ".", "device", ")", "\n", "for", "bin_lower", ",", "bin_upper", "in", "zip", "(", "bin_lowers", ",", "bin_uppers", ")", ":", "\n", "# Calculated |confidence - accuracy| in each bin", "\n", "            ", "in_bin", "=", "confidences", ".", "gt", "(", "bin_lower", ".", "item", "(", ")", ")", "*", "confidences", ".", "le", "(", "bin_upper", ".", "item", "(", ")", ")", "\n", "prop_in_bin", "=", "in_bin", ".", "float", "(", ")", ".", "mean", "(", ")", "\n", "if", "prop_in_bin", ".", "item", "(", ")", ">", "0", ":", "\n", "                ", "accuracy_in_bin", "=", "accuracies", "[", "in_bin", "]", ".", "float", "(", ")", ".", "mean", "(", ")", "\n", "avg_confidence_in_bin", "=", "confidences", "[", "in_bin", "]", ".", "mean", "(", ")", "\n", "ece", "+=", "torch", ".", "abs", "(", "avg_confidence_in_bin", "-", "accuracy_in_bin", ")", "*", "prop_in_bin", "\n", "\n", "", "", "return", "ece", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.utils.generate_all_classes.generate_all_classes": [[20, 126], ["len", "torch.zeros", "torch.zeros", "torch.zeros", "enumerate", "torch.cat", "torch.cat", "torch.cat", "tqdm.trange", "len", "len", "min", "indiv_batches.append", "len", "pathlib.Path().mkdir", "utils.load_trained_model.load_model", "nn.DataParallel.eval", "int", "range", "torch.DataParallel", "numpy.ceil", "min", "source_data[].to", "nn.DataParallel.", "torch.max", "torch.max", "torch.max", "source_data[].to.repeat", "source_data[].to.new_empty", "range", "enumerate", "pathlib.Path", "len", "torch.softmax", "torch.softmax", "torch.softmax", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "auto_attack.autopgd_pt.APGDAttack_singlestepsize", "nn.DataParallel.", "torch.max", "torch.max", "torch.max", "range", "matplotlib.subplots", "range", "matplotlib.tight_layout", "fig.savefig", "fig.savefig", "matplotlib.close", "auto_attack.autopgd_pt.APGDAttack_singlestepsize.perturb", "torch.softmax", "torch.softmax", "torch.softmax", "data[].detach().cpu().permute", "ax[].axis", "ax[].title.set_text", "range", "data[].detach().cpu().permute.squeeze_", "ax[].imshow", "ax[].imshow", "data_targeted_attacked[].permute", "ax[].axis", "ax[].title.set_text", "data[].detach().cpu", "orig_pred[].item", "orig_conf[].item", "data_targeted_attacked[].permute.squeeze_", "ax[].imshow", "ax[].imshow", "pred_targeted_attacked[].item", "conf_targeted_attacked[].item", "data[].detach"], "function", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.utils.load_trained_model.load_model", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models.ebm_wrn.gradient_attack_wrapper.eval", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.adversarial_attacks.restartattack.RestartAttack.perturb"], ["def", "generate_all_classes", "(", "model_descriptions", ",", "radii", ",", "dataloader", ",", "dataloader_name", ",", "bs", ",", "datapoints", ",", "class_labels", ",", "device", ",", "eval_dir", ",", "dataset", ",", "device_ids", "=", "None", ")", ":", "\n", "    ", "num_classes", "=", "len", "(", "class_labels", ")", "\n", "model_radii_confs", "=", "torch", ".", "zeros", "(", "len", "(", "model_descriptions", ")", ",", "len", "(", "radii", ")", ",", "2", ")", "\n", "\n", "indiv_batches", "=", "[", "]", "\n", "data_collected", "=", "0", "\n", "for", "batch_idx", ",", "(", "source_data", ",", "_", ")", "in", "enumerate", "(", "dataloader", ")", ":", "\n", "        ", "num_to_collect", "=", "min", "(", "source_data", ".", "shape", "[", "0", "]", ",", "datapoints", "-", "data_collected", ")", "\n", "\n", "if", "num_to_collect", "==", "0", ":", "\n", "            ", "break", "\n", "\n", "", "source_data", "=", "source_data", "[", ":", "num_to_collect", ",", ":", "]", "\n", "indiv_batches", ".", "append", "(", "source_data", ")", "\n", "data_collected", "+=", "num_to_collect", "\n", "\n", "", "source_data", "=", "torch", ".", "cat", "(", "indiv_batches", ",", "dim", "=", "0", ")", "\n", "\n", "img_dim", "=", "source_data", ".", "shape", "[", "1", ":", "]", "\n", "datapoints", "=", "source_data", ".", "shape", "[", "0", "]", "\n", "\n", "for", "model_idx", "in", "trange", "(", "len", "(", "model_descriptions", ")", ",", "desc", "=", "'Models progress'", ")", ":", "\n", "        ", "type", ",", "folder", ",", "checkpoint", ",", "temperature", ",", "temp", "=", "model_descriptions", "[", "model_idx", "]", "\n", "dir", "=", "f'{eval_dir}/{folder}_{checkpoint}/Generative_{dataloader_name}/'", "\n", "pathlib", ".", "Path", "(", "dir", ")", ".", "mkdir", "(", "parents", "=", "True", ",", "exist_ok", "=", "True", ")", "\n", "\n", "model", "=", "load_model", "(", "type", ",", "folder", ",", "checkpoint", ",", "temperature", ",", "device", ",", "load_temp", "=", "temp", ",", "dataset", "=", "dataset", ")", "\n", "if", "device_ids", "is", "not", "None", "and", "len", "(", "device_ids", ")", ">", "1", ":", "\n", "            ", "model", "=", "nn", ".", "DataParallel", "(", "model", ",", "device_ids", "=", "device_ids", ")", "\n", "", "model", ".", "eval", "(", ")", "\n", "\n", "n_batches", "=", "int", "(", "np", ".", "ceil", "(", "datapoints", "/", "bs", ")", ")", "\n", "\n", "for", "batch_idx", "in", "range", "(", "n_batches", ")", ":", "\n", "            ", "start_idx", "=", "batch_idx", "*", "bs", "\n", "end_idx", "=", "min", "(", "datapoints", ",", "(", "batch_idx", "+", "1", ")", "*", "bs", ")", "\n", "\n", "data", "=", "source_data", "[", "start_idx", ":", "end_idx", ",", ":", "]", ".", "to", "(", "device", ")", "\n", "orig_out", "=", "model", "(", "data", ")", "\n", "orig_conf", ",", "orig_pred", "=", "torch", ".", "max", "(", "torch", ".", "softmax", "(", "orig_out", ",", "dim", "=", "1", ")", ",", "1", ")", "\n", "\n", "# creates batches that have dimension batch_size * num_classes", "\n", "stacked_data", "=", "data", ".", "repeat", "(", "num_classes", ",", "1", ",", "1", ",", "1", ")", "\n", "stacked_targets", "=", "data", ".", "new_empty", "(", "data", ".", "shape", "[", "0", "]", "*", "num_classes", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "for", "c", "in", "range", "(", "num_classes", ")", ":", "\n", "                ", "stacked_targets", "[", "(", "c", "*", "num_classes", ")", ":", "(", "(", "c", "+", "1", ")", "*", "num_classes", ")", "]", "=", "c", "\n", "\n", "", "for", "radius_idx", ",", "radius", "in", "enumerate", "(", "radii", ")", ":", "\n", "                ", "conf_targeted_attacked", "=", "torch", ".", "zeros", "(", "(", "num_classes", ",", "data", ".", "shape", "[", "0", "]", ")", ")", "\n", "pred_targeted_attacked", "=", "torch", ".", "zeros", "(", "(", "num_classes", ",", "data", ".", "shape", "[", "0", "]", ")", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "data_targeted_attacked", "=", "torch", ".", "zeros", "(", "(", "num_classes", ",", "data", ".", "shape", "[", "0", "]", ")", "+", "data", ".", "shape", "[", "1", ":", "]", ")", "\n", "if", "temperature", "<", "0.2", ":", "\n", "                    ", "loss", "=", "'logit_max_target'", "\n", "", "else", ":", "\n", "                    ", "loss", "=", "'conf_target'", "\n", "\n", "", "step_multiplier", "=", "5", "\n", "att", "=", "APGDAttack", "(", "model", ",", "n_restarts", "=", "1", ",", "n_iter", "=", "100", "*", "step_multiplier", ",", "n_iter_2", "=", "22", "*", "step_multiplier", ",", "\n", "n_iter_min", "=", "6", "*", "step_multiplier", ",", "size_decr", "=", "3", ",", "\n", "eps", "=", "radius", ",", "show_loss", "=", "False", ",", "norm", "=", "'L2'", ",", "loss", "=", "loss", ",", "eot_iter", "=", "1", ",", "\n", "thr_decr", "=", ".75", ",", "seed", "=", "0", ",", "normalize_logits", "=", "True", ",", "\n", "show_acc", "=", "False", ")", "\n", "\n", "adv_samples", "=", "att", ".", "perturb", "(", "stacked_data", ",", "stacked_targets", ")", "[", "1", "]", "\n", "\n", "out", "=", "model", "(", "adv_samples", ")", "\n", "conf", ",", "pred", "=", "torch", ".", "max", "(", "torch", ".", "softmax", "(", "out", ",", "dim", "=", "1", ")", ",", "1", ")", "\n", "\n", "# might be possible to reshape this?", "\n", "\n", "for", "c", "in", "range", "(", "num_classes", ")", ":", "\n", "                    ", "conf_targeted_attacked", "[", "c", ",", ":", "]", "=", "conf", "[", "(", "c", "*", "num_classes", ")", ":", "(", "(", "c", "+", "1", ")", "*", "num_classes", ")", "]", "\n", "pred_targeted_attacked", "[", "c", ",", ":", "]", "=", "pred", "[", "(", "c", "*", "num_classes", ")", ":", "(", "(", "c", "+", "1", ")", "*", "num_classes", ")", "]", "\n", "data_targeted_attacked", "[", "c", ",", ":", "]", "=", "adv_samples", "[", "(", "c", "*", "num_classes", ")", ":", "(", "(", "c", "+", "1", ")", "*", "num_classes", ")", ",", ":", "]", "\n", "\n", "", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", "data", ".", "shape", "[", "0", "]", ",", "num_classes", "+", "1", ",", "figsize", "=", "(", "20", ",", "22", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "data", ".", "shape", "[", "0", "]", ")", ":", "\n", "# plot original", "\n", "                    ", "img_orig", "=", "data", "[", "i", ",", ":", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "permute", "(", "1", ",", "2", ",", "0", ")", "\n", "if", "img_orig", ".", "shape", "[", "2", "]", "==", "1", ":", "\n", "                        ", "img_orig", ".", "squeeze_", "(", ")", "\n", "ax", "[", "i", ",", "0", "]", ".", "imshow", "(", "img_orig", ",", "cmap", "=", "'gray'", ")", "\n", "", "else", ":", "\n", "                        ", "ax", "[", "i", ",", "0", "]", ".", "imshow", "(", "img_orig", ")", "\n", "\n", "", "ax", "[", "i", ",", "0", "]", ".", "axis", "(", "'off'", ")", "\n", "ax", "[", "i", ",", "0", "]", ".", "title", ".", "set_text", "(", "'{:d} - {:0.2f}'", ".", "format", "(", "orig_pred", "[", "i", "]", ".", "item", "(", ")", ",", "\n", "orig_conf", "[", "i", "]", ".", "item", "(", ")", ")", ")", "\n", "\n", "for", "j", "in", "range", "(", "num_classes", ")", ":", "\n", "                        ", "img_ij", "=", "data_targeted_attacked", "[", "j", ",", "i", ",", ":", "]", ".", "permute", "(", "1", ",", "2", ",", "0", ")", "\n", "if", "img_ij", ".", "shape", "[", "2", "]", "==", "1", ":", "\n", "                            ", "img_ij", ".", "squeeze_", "(", ")", "\n", "ax", "[", "i", ",", "j", "+", "1", "]", ".", "imshow", "(", "img_ij", ",", "cmap", "=", "'gray'", ")", "\n", "", "else", ":", "\n", "                            ", "ax", "[", "i", ",", "j", "+", "1", "]", ".", "imshow", "(", "img_ij", ")", "\n", "\n", "", "ax", "[", "i", ",", "j", "+", "1", "]", ".", "axis", "(", "'off'", ")", "\n", "ax", "[", "i", ",", "j", "+", "1", "]", ".", "title", ".", "set_text", "(", "\n", "'{:d} - {:0.2f}'", ".", "format", "(", "pred_targeted_attacked", "[", "j", ",", "i", "]", ".", "item", "(", ")", ",", "conf_targeted_attacked", "[", "j", ",", "i", "]", ".", "item", "(", ")", ")", ")", "\n", "\n", "", "", "plt", ".", "tight_layout", "(", ")", "\n", "fig", ".", "savefig", "(", "f'{dir}{batch_idx}_generative_radius{radius:.2f}.png'", ")", "\n", "fig", ".", "savefig", "(", "f'{dir}{batch_idx}_generative_radius{radius:.2f}.pdf'", ")", "\n", "plt", ".", "close", "(", "fig", ")", "\n", "", "", "", "", ""]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.utils.model_normalization.NormalizationWrapper.__init__": [[4, 15], ["super().__init__", "model_normalization.NormalizationWrapper.train", "model_normalization.NormalizationWrapper.register_buffer", "model_normalization.NormalizationWrapper.register_buffer"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models_32x32.shake_pyramidnet.ShakePyramidNet.__init__", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_type.TrainType.train"], ["    ", "def", "__init__", "(", "self", ",", "model", ",", "mean", ",", "std", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "mean", "=", "mean", "[", "...", ",", "None", ",", "None", "]", "\n", "std", "=", "std", "[", "...", ",", "None", ",", "None", "]", "\n", "\n", "self", ".", "train", "(", "model", ".", "training", ")", "\n", "\n", "self", ".", "model", "=", "model", "\n", "self", ".", "register_buffer", "(", "\"mean\"", ",", "mean", ")", "\n", "self", ".", "register_buffer", "(", "\"std\"", ",", "std", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.utils.model_normalization.NormalizationWrapper.forward": [[16, 19], ["model_normalization.NormalizationWrapper.model"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "x_normalized", "=", "(", "x", "-", "self", ".", "mean", ")", "/", "self", ".", "std", "\n", "return", "self", ".", "model", "(", "x_normalized", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.utils.model_normalization.NormalizationWrapper.state_dict": [[20, 22], ["model_normalization.NormalizationWrapper.model.state_dict"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.schedulers.scheduler.Scheduler.state_dict"], ["", "def", "state_dict", "(", "self", ",", "destination", "=", "None", ",", "prefix", "=", "''", ",", "keep_vars", "=", "False", ")", ":", "\n", "        ", "return", "self", ".", "model", ".", "state_dict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.utils.model_normalization.IdentityWrapper": [[23, 27], ["torch.tensor", "torch.tensor", "model_normalization.NormalizationWrapper"], "function", ["None"], ["", "", "def", "IdentityWrapper", "(", "model", ")", ":", "\n", "    ", "mean", "=", "torch", ".", "tensor", "(", "[", "0.", ",", "0.", ",", "0.", "]", ")", "\n", "std", "=", "torch", ".", "tensor", "(", "[", "1.", ",", "1.", ",", "1.", "]", ")", "\n", "return", "NormalizationWrapper", "(", "model", ",", "mean", ",", "std", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.utils.model_normalization.Cifar10Wrapper": [[28, 32], ["torch.tensor", "torch.tensor", "model_normalization.NormalizationWrapper"], "function", ["None"], ["", "def", "Cifar10Wrapper", "(", "model", ")", ":", "\n", "    ", "mean", "=", "torch", ".", "tensor", "(", "[", "0.4913997551666284", ",", "0.48215855929893703", ",", "0.4465309133731618", "]", ")", "\n", "std", "=", "torch", ".", "tensor", "(", "[", "0.24703225141799082", ",", "0.24348516474564", ",", "0.26158783926049628", "]", ")", "\n", "return", "NormalizationWrapper", "(", "model", ",", "mean", ",", "std", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.utils.model_normalization.Cifar100Wrapper": [[33, 37], ["torch.tensor", "torch.tensor", "model_normalization.NormalizationWrapper"], "function", ["None"], ["", "def", "Cifar100Wrapper", "(", "model", ")", ":", "\n", "    ", "mean", "=", "torch", ".", "tensor", "(", "[", "0.4913997551666284", ",", "0.48215855929893703", ",", "0.4465309133731618", "]", ")", "\n", "std", "=", "torch", ".", "tensor", "(", "[", "0.24703225141799082", ",", "0.24348516474564", ",", "0.26158783926049628", "]", ")", "\n", "return", "NormalizationWrapper", "(", "model", ",", "mean", ",", "std", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.utils.model_normalization.SVHNWrapper": [[38, 42], ["torch.tensor", "torch.tensor", "model_normalization.NormalizationWrapper"], "function", ["None"], ["", "def", "SVHNWrapper", "(", "model", ")", ":", "\n", "    ", "mean", "=", "torch", ".", "tensor", "(", "[", "0.4377", ",", "0.4438", ",", "0.4728", "]", ")", "\n", "std", "=", "torch", ".", "tensor", "(", "[", "0.1201", ",", "0.1231", ",", "0.1052", "]", ")", "\n", "return", "NormalizationWrapper", "(", "model", ",", "mean", ",", "std", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.utils.model_normalization.CelebAWrapper": [[43, 47], ["torch.tensor", "torch.tensor", "model_normalization.NormalizationWrapper"], "function", ["None"], ["", "def", "CelebAWrapper", "(", "model", ")", ":", "\n", "    ", "mean", "=", "torch", ".", "tensor", "(", "[", "0.5063", ",", "0.4258", ",", "0.3832", "]", ")", "\n", "std", "=", "torch", ".", "tensor", "(", "[", "0.2632", ",", "0.2424", ",", "0.2385", "]", ")", "\n", "return", "NormalizationWrapper", "(", "model", ",", "mean", ",", "std", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.utils.model_normalization.TinyImageNetWrapper": [[48, 52], ["torch.tensor", "torch.tensor", "model_normalization.NormalizationWrapper"], "function", ["None"], ["", "def", "TinyImageNetWrapper", "(", "model", ")", ":", "\n", "    ", "mean", "=", "torch", ".", "tensor", "(", "[", "0.4802", ",", "0.4481", ",", "0.3975", "]", ")", "\n", "std", "=", "torch", ".", "tensor", "(", "[", "0.2302", ",", "0.2265", ",", "0.2262", "]", ")", "\n", "return", "NormalizationWrapper", "(", "model", ",", "mean", ",", "std", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.utils.model_normalization.ImageNetWrapper": [[53, 57], ["torch.tensor", "torch.tensor", "model_normalization.NormalizationWrapper"], "function", ["None"], ["", "def", "ImageNetWrapper", "(", "model", ")", ":", "\n", "    ", "mean", "=", "torch", ".", "tensor", "(", "[", "0.485", ",", "0.456", ",", "0.406", "]", ")", "\n", "std", "=", "torch", ".", "tensor", "(", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", "\n", "return", "NormalizationWrapper", "(", "model", ",", "mean", ",", "std", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.utils.model_normalization.RestrictedImageNetWrapper": [[58, 62], ["torch.tensor", "torch.tensor", "model_normalization.NormalizationWrapper"], "function", ["None"], ["", "def", "RestrictedImageNetWrapper", "(", "model", ")", ":", "\n", "    ", "mean", "=", "torch", ".", "tensor", "(", "[", "0.4717", ",", "0.4499", ",", "0.3837", "]", ")", "\n", "std", "=", "torch", ".", "tensor", "(", "[", "0.2600", ",", "0.2516", ",", "0.2575", "]", ")", "\n", "return", "NormalizationWrapper", "(", "model", ",", "mean", ",", "std", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.utils.model_normalization.BigTransferWrapper": [[63, 67], ["torch.tensor", "torch.tensor", "model_normalization.NormalizationWrapper"], "function", ["None"], ["", "def", "BigTransferWrapper", "(", "model", ")", ":", "\n", "    ", "mean", "=", "torch", ".", "tensor", "(", "[", "0.5", ",", "0.5", ",", "0.5", "]", ")", "\n", "std", "=", "torch", ".", "tensor", "(", "[", "0.5", ",", "0.5", ",", "0.5", "]", ")", "\n", "return", "NormalizationWrapper", "(", "model", ",", "mean", ",", "std", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.utils.model_normalization.LSUNScenesWrapper": [[68, 73], ["torch.tensor", "torch.tensor", "model_normalization.NormalizationWrapper"], "function", ["None"], ["", "def", "LSUNScenesWrapper", "(", "model", ")", ":", "\n", "#imagenet", "\n", "    ", "mean", "=", "torch", ".", "tensor", "(", "[", "0.485", ",", "0.456", ",", "0.406", "]", ")", "\n", "std", "=", "torch", ".", "tensor", "(", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", "\n", "return", "NormalizationWrapper", "(", "model", ",", "mean", ",", "std", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.resize_right.interp_methods.set_framework_dependencies": [[17, 26], ["type", "fw.finfo", "a.to"], "function", ["None"], ["", "def", "set_framework_dependencies", "(", "x", ")", ":", "\n", "    ", "if", "type", "(", "x", ")", "is", "numpy", ".", "ndarray", ":", "\n", "        ", "to_dtype", "=", "lambda", "a", ":", "a", "\n", "fw", "=", "numpy", "\n", "", "else", ":", "\n", "        ", "to_dtype", "=", "lambda", "a", ":", "a", ".", "to", "(", "x", ".", "dtype", ")", "\n", "fw", "=", "torch", "\n", "", "eps", "=", "fw", ".", "finfo", "(", "fw", ".", "float32", ")", ".", "eps", "\n", "return", "fw", ",", "to_dtype", ",", "eps", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.resize_right.interp_methods.cubic": [[28, 36], ["interp_methods.set_framework_dependencies", "fw.abs", "to_dtype", "to_dtype"], "function", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.resize_right.interp_methods.set_framework_dependencies"], ["", "def", "cubic", "(", "x", ")", ":", "\n", "    ", "fw", ",", "to_dtype", ",", "eps", "=", "set_framework_dependencies", "(", "x", ")", "\n", "absx", "=", "fw", ".", "abs", "(", "x", ")", "\n", "absx2", "=", "absx", "**", "2", "\n", "absx3", "=", "absx", "**", "3", "\n", "return", "(", "(", "1.5", "*", "absx3", "-", "2.5", "*", "absx2", "+", "1.", ")", "*", "to_dtype", "(", "absx", "<=", "1.", ")", "+", "\n", "(", "-", "0.5", "*", "absx3", "+", "2.5", "*", "absx2", "-", "4.", "*", "absx", "+", "2.", ")", "*", "\n", "to_dtype", "(", "(", "1.", "<", "absx", ")", "&", "(", "absx", "<=", "2.", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.resize_right.interp_methods.lanczos2": [[38, 42], ["interp_methods.set_framework_dependencies", "to_dtype", "abs", "fw.sin", "fw.sin"], "function", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.resize_right.interp_methods.set_framework_dependencies"], ["", "def", "lanczos2", "(", "x", ")", ":", "\n", "    ", "fw", ",", "to_dtype", ",", "eps", "=", "set_framework_dependencies", "(", "x", ")", "\n", "return", "(", "(", "(", "fw", ".", "sin", "(", "pi", "*", "x", ")", "*", "fw", ".", "sin", "(", "pi", "*", "x", "/", "2", ")", "+", "eps", ")", "/", "\n", "(", "(", "pi", "**", "2", "*", "x", "**", "2", "/", "2", ")", "+", "eps", ")", ")", "*", "to_dtype", "(", "abs", "(", "x", ")", "<", "2", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.resize_right.interp_methods.lanczos3": [[44, 48], ["interp_methods.set_framework_dependencies", "to_dtype", "abs", "fw.sin", "fw.sin"], "function", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.resize_right.interp_methods.set_framework_dependencies"], ["", "def", "lanczos3", "(", "x", ",", "fw", ")", ":", "\n", "    ", "fw", ",", "to_dtype", ",", "eps", "=", "set_framework_dependencies", "(", "x", ")", "\n", "return", "(", "(", "(", "fw", ".", "sin", "(", "pi", "*", "x", ")", "*", "fw", ".", "sin", "(", "pi", "*", "x", "/", "3", ")", "+", "eps", ")", "/", "\n", "(", "(", "pi", "**", "2", "*", "x", "**", "2", "/", "3", ")", "+", "eps", ")", ")", "*", "to_dtype", "(", "abs", "(", "x", ")", "<", "3", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.resize_right.interp_methods.linear": [[50, 54], ["interp_methods.set_framework_dependencies", "to_dtype", "to_dtype"], "function", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.resize_right.interp_methods.set_framework_dependencies"], ["", "def", "linear", "(", "x", ",", "fw", ")", ":", "\n", "    ", "fw", ",", "to_dtype", ",", "eps", "=", "set_framework_dependencies", "(", "x", ")", "\n", "return", "(", "(", "x", "+", "1", ")", "*", "to_dtype", "(", "(", "-", "1", "<=", "x", ")", "&", "(", "x", "<", "0", ")", ")", "+", "(", "1", "-", "x", ")", "*", "\n", "to_dtype", "(", "(", "0", "<=", "x", ")", "&", "(", "x", "<=", "1", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.resize_right.interp_methods.box": [[56, 59], ["interp_methods.set_framework_dependencies", "to_dtype", "to_dtype"], "function", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.resize_right.interp_methods.set_framework_dependencies"], ["", "def", "box", "(", "x", ",", "fw", ")", ":", "\n", "    ", "fw", ",", "to_dtype", ",", "eps", "=", "set_framework_dependencies", "(", "x", ")", "\n", "return", "to_dtype", "(", "(", "-", "1", "<=", "x", ")", "&", "(", "x", "<", "0", ")", ")", "+", "to_dtype", "(", "(", "0", "<=", "x", ")", "&", "(", "x", "<=", "1", ")", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.resize_right.resize_right.ResizeLayer.__init__": [[65, 109], ["nn.Module.__init__", "resize_right.set_scale_and_out_sz", "len", "nn.ParameterList", "nn.ParameterList", "fw.finfo", "resize_right.prepare_weights_and_field_of_view_1d", "weights_list.append", "field_of_view_list.append", "sorted", "nn.Parameter", "nn.Parameter", "range"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models_32x32.shake_pyramidnet.ShakePyramidNet.__init__", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.resize_right.resize_right.set_scale_and_out_sz", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.resize_right.resize_right.prepare_weights_and_field_of_view_1d"], ["    ", "def", "__init__", "(", "self", ",", "in_shape", ",", "scale_factors", "=", "None", ",", "out_shape", "=", "None", ",", "\n", "interp_method", "=", "interp_methods", ".", "cubic", ",", "support_sz", "=", "4", ",", "\n", "antialiasing", "=", "True", ")", ":", "\n", "        ", "super", "(", "ResizeLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "# fw stands for framework, that can be either numpy or torch. since", "\n", "# this is a torch layer, only one option in this case.", "\n", "fw", "=", "torch", "\n", "eps", "=", "fw", ".", "finfo", "(", "fw", ".", "float32", ")", ".", "eps", "\n", "\n", "# set missing scale factors or output shapem one according to another,", "\n", "# scream if both missing", "\n", "scale_factors", ",", "out_shape", "=", "set_scale_and_out_sz", "(", "in_shape", ",", "out_shape", ",", "\n", "scale_factors", ",", "fw", ")", "\n", "self", ".", "n_dims", "=", "len", "(", "in_shape", ")", "\n", "\n", "# sort indices of dimensions according to scale of each dimension.", "\n", "# since we are going dim by dim this is efficient", "\n", "self", ".", "sorted_filtered_dims_and_scales", "=", "[", "(", "dim", ",", "scale_factors", "[", "dim", "]", ")", "\n", "for", "dim", "in", "\n", "sorted", "(", "range", "(", "self", ".", "n_dims", ")", ",", "\n", "key", "=", "lambda", "ind", ":", "\n", "scale_factors", "[", "ind", "]", ")", "\n", "if", "scale_factors", "[", "dim", "]", "!=", "1.", "]", "\n", "\n", "# iterate over dims", "\n", "field_of_view_list", "=", "[", "]", "\n", "weights_list", "=", "[", "]", "\n", "for", "dim", ",", "scale_factor", "in", "self", ".", "sorted_filtered_dims_and_scales", ":", "\n", "\n", "# get 1d set of weights and fields of view for each output", "\n", "# location along this dim", "\n", "            ", "field_of_view", ",", "weights", "=", "prepare_weights_and_field_of_view_1d", "(", "\n", "dim", ",", "scale_factor", ",", "in_shape", "[", "dim", "]", ",", "out_shape", "[", "dim", "]", ",", "\n", "interp_method", ",", "support_sz", ",", "antialiasing", ",", "fw", ",", "eps", ")", "\n", "\n", "# keep weights and fields of views for all dims", "\n", "weights_list", ".", "append", "(", "nn", ".", "Parameter", "(", "weights", ",", "requires_grad", "=", "False", ")", ")", "\n", "field_of_view_list", ".", "append", "(", "nn", ".", "Parameter", "(", "field_of_view", ",", "\n", "requires_grad", "=", "False", ")", ")", "\n", "\n", "", "self", ".", "field_of_view", "=", "nn", ".", "ParameterList", "(", "field_of_view_list", ")", "\n", "self", ".", "weights", "=", "nn", ".", "ParameterList", "(", "weights_list", ")", "\n", "self", ".", "in_shape", "=", "in_shape", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.resize_right.resize_right.ResizeLayer.forward": [[110, 123], ["zip", "resize_right.apply_weights"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.resize_right.resize_right.apply_weights"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "# output begins identical to input and changes with each iteration", "\n", "        ", "output", "=", "input", "\n", "\n", "for", "(", "dim", ",", "scale_factor", ")", ",", "field_of_view", ",", "weights", "in", "zip", "(", "\n", "self", ".", "sorted_filtered_dims_and_scales", ",", "\n", "self", ".", "field_of_view", ",", "\n", "self", ".", "weights", ")", ":", "\n", "# multiply the weights by the values in the field of view and", "\n", "# aggreagate", "\n", "            ", "output", "=", "apply_weights", "(", "output", ",", "field_of_view", ",", "weights", ",", "dim", ",", "\n", "self", ".", "n_dims", ",", "torch", ")", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.resize_right.resize_right.resize": [[22, 62], ["resize_right.set_scale_and_out_sz", "fw.finfo", "resize_right.prepare_weights_and_field_of_view_1d", "resize_right.apply_weights", "type", "sorted", "range"], "function", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.resize_right.resize_right.set_scale_and_out_sz", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.resize_right.resize_right.prepare_weights_and_field_of_view_1d", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.resize_right.resize_right.apply_weights"], ["", "def", "resize", "(", "input", ",", "scale_factors", "=", "None", ",", "out_shape", "=", "None", ",", "\n", "interp_method", "=", "interp_methods", ".", "cubic", ",", "support_sz", "=", "4", ",", "\n", "antialiasing", "=", "True", ")", ":", "\n", "# get properties of the input tensor", "\n", "    ", "in_shape", ",", "n_dims", "=", "input", ".", "shape", ",", "input", ".", "ndim", "\n", "\n", "# fw stands for framework that can be either numpy or torch,", "\n", "# determined by the input type", "\n", "fw", "=", "numpy", "if", "type", "(", "input", ")", "is", "numpy", ".", "ndarray", "else", "torch", "\n", "eps", "=", "fw", ".", "finfo", "(", "fw", ".", "float32", ")", ".", "eps", "\n", "\n", "# set missing scale factors or output shapem one according to another,", "\n", "# scream if both missing", "\n", "scale_factors", ",", "out_shape", "=", "set_scale_and_out_sz", "(", "in_shape", ",", "out_shape", ",", "\n", "scale_factors", ",", "fw", ")", "\n", "\n", "# sort indices of dimensions according to scale of each dimension.", "\n", "# since we are going dim by dim this is efficient", "\n", "sorted_filtered_dims_and_scales", "=", "[", "(", "dim", ",", "scale_factors", "[", "dim", "]", ")", "\n", "for", "dim", "in", "sorted", "(", "range", "(", "n_dims", ")", ",", "\n", "key", "=", "lambda", "ind", ":", "scale_factors", "[", "ind", "]", ")", "\n", "if", "scale_factors", "[", "dim", "]", "!=", "1.", "]", "\n", "\n", "# output begins identical to input and changes with each iteration", "\n", "output", "=", "input", "\n", "\n", "# iterate over dims", "\n", "for", "dim", ",", "scale_factor", "in", "sorted_filtered_dims_and_scales", ":", "\n", "\n", "# get 1d set of weights and fields of view for each output location", "\n", "# along this dim", "\n", "        ", "field_of_view", ",", "weights", "=", "prepare_weights_and_field_of_view_1d", "(", "\n", "dim", ",", "scale_factor", ",", "in_shape", "[", "dim", "]", ",", "out_shape", "[", "dim", "]", ",", "interp_method", ",", "\n", "support_sz", ",", "antialiasing", ",", "fw", ",", "eps", ")", "\n", "\n", "# multiply the weights by the values in the field of view and", "\n", "# aggreagate", "\n", "output", "=", "apply_weights", "(", "output", ",", "field_of_view", ",", "weights", ",", "dim", ",", "n_dims", ",", "\n", "fw", ")", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.resize_right.resize_right.prepare_weights_and_field_of_view_1d": [[125, 150], ["resize_right.apply_antialiasing_if_needed", "resize_right.get_projected_grid", "resize_right.get_field_of_view", "resize_right.get_weights"], "function", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.resize_right.resize_right.apply_antialiasing_if_needed", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.resize_right.resize_right.get_projected_grid", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.resize_right.resize_right.get_field_of_view", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.resize_right.resize_right.get_weights"], ["", "", "def", "prepare_weights_and_field_of_view_1d", "(", "dim", ",", "scale_factor", ",", "in_sz", ",", "out_sz", ",", "\n", "interp_method", ",", "support_sz", ",", "\n", "antialiasing", ",", "fw", ",", "eps", ")", ":", "\n", "# If antialiasing is taking place, we modify the window out_size and the", "\n", "# interpolation method (see inside function)", "\n", "    ", "interp_method", ",", "cur_support_sz", "=", "apply_antialiasing_if_needed", "(", "\n", "interp_method", ",", "\n", "support_sz", ",", "\n", "scale_factor", ",", "\n", "antialiasing", ")", "\n", "\n", "# STEP 1- PROJECTED GRID: The non-integer locations of the projection of", "\n", "# output pixel locations to the input tensor", "\n", "projected_grid", "=", "get_projected_grid", "(", "in_sz", ",", "out_sz", ",", "scale_factor", ",", "fw", ")", "\n", "\n", "# STEP 2- FIELDS OF VIEW: for each output pixels, map the input pixels", "\n", "# that influence it", "\n", "field_of_view", "=", "get_field_of_view", "(", "projected_grid", ",", "cur_support_sz", ",", "in_sz", ",", "\n", "fw", ",", "eps", ")", "\n", "\n", "# STEP 3- CALCULATE WEIGHTS: Match a set of weights to the pixels in the", "\n", "# field of view for each output pixel", "\n", "weights", "=", "get_weights", "(", "interp_method", ",", "projected_grid", ",", "field_of_view", ")", "\n", "\n", "return", "field_of_view", ",", "weights", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.resize_right.resize_right.apply_weights": [[152, 187], ["resize_right.fw_swapaxes", "fw.reshape", "resize_right.fw_swapaxes", "fw.reshape.to"], "function", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.resize_right.resize_right.fw_swapaxes", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.resize_right.resize_right.fw_swapaxes"], ["", "def", "apply_weights", "(", "input", ",", "field_of_view", ",", "weights", ",", "dim", ",", "n_dims", ",", "fw", ")", ":", "\n", "# STEP 4- APPLY WEIGHTS: Each output pixel is calculated by multiplying", "\n", "# its set of weights with the pixel values in its field of view.", "\n", "# We now multiply the fields of view with their matching weights.", "\n", "# We do this by tensor multiplication and broadcasting.", "\n", "# this step is separated to a different function, so that it can be", "\n", "# repeated with the same calculated weights and fields.", "\n", "\n", "# for this operations we assume the resized dim is the first one.", "\n", "# so we transpose and will transpose back after multiplying", "\n", "    ", "tmp_input", "=", "fw_swapaxes", "(", "input", ",", "dim", ",", "0", ",", "fw", ")", "\n", "\n", "# field_of_view is a tensor of order 2: for each output (1d location", "\n", "# along cur dim)- a list of 1d neighbors locations.", "\n", "# note that this whole operations is applied to each dim separately,", "\n", "# this is why it is all in 1d.", "\n", "# neighbors = tmp_input[field_of_view] is a tensor of order image_dims+1:", "\n", "# for each output pixel (this time indicated in all dims), these are the", "\n", "# values of the neighbors in the 1d field of view. note that we only", "\n", "# consider neighbors along the current dim, but such set exists for every", "\n", "# multi-dim location, hence the final tensor order is image_dims+1.", "\n", "neighbors", "=", "tmp_input", "[", "field_of_view", "]", "\n", "\n", "# weights is an order 2 tensor: for each output location along 1d- a list", "\n", "# of weighs matching the field of view. we augment it with ones, for", "\n", "# broadcasting, so that when multiplies some tensor the weights affect", "\n", "# only its first dim.", "\n", "tmp_weights", "=", "fw", ".", "reshape", "(", "weights", ",", "(", "*", "weights", ".", "shape", ",", "*", "[", "1", "]", "*", "(", "n_dims", "-", "1", ")", ")", ")", "\n", "\n", "# now we simply multiply the weights with the neighbors, and then sum", "\n", "# along the field of view, to get a single value per out pixel", "\n", "tmp_output", "=", "(", "neighbors", "*", "tmp_weights", ".", "to", "(", "neighbors", ".", "device", ")", ")", ".", "sum", "(", "1", ")", "\n", "\n", "# we transpose back the resized dim to its original position", "\n", "return", "fw_swapaxes", "(", "tmp_output", ",", "0", ",", "dim", ",", "fw", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.resize_right.resize_right.set_scale_and_out_sz": [[189, 227], ["ValueError", "isinstance", "float", "list", "list", "list", "list", "list", "list", "math.ceil", "zip", "zip", "len", "len", "len", "len", "len", "len"], "function", ["None"], ["", "def", "set_scale_and_out_sz", "(", "in_shape", ",", "out_shape", ",", "scale_factors", ",", "fw", ")", ":", "\n", "# eventually we must have both scale-factors and out-sizes for all in/out", "\n", "# dims. however, we support many possible partial arguments", "\n", "    ", "if", "scale_factors", "is", "None", "and", "out_shape", "is", "None", ":", "\n", "        ", "raise", "ValueError", "(", "\"either scale_factors or out_shape should be \"", "\n", "\"provided\"", ")", "\n", "", "if", "out_shape", "is", "not", "None", ":", "\n", "# if out_shape has less dims than in_shape, we defaultly resize the", "\n", "# first dims for numpy and last dims for torch", "\n", "        ", "out_shape", "=", "(", "list", "(", "out_shape", ")", "+", "list", "(", "in_shape", "[", ":", "-", "len", "(", "out_shape", ")", "]", ")", "\n", "if", "fw", "is", "numpy", "\n", "else", "list", "(", "in_shape", "[", ":", "-", "len", "(", "out_shape", ")", "]", ")", "+", "list", "(", "out_shape", ")", ")", "\n", "if", "scale_factors", "is", "None", ":", "\n", "# if no scale given, we calculate it as the out to in ratio", "\n", "# (not recomended)", "\n", "            ", "scale_factors", "=", "[", "out_sz", "/", "in_sz", "for", "out_sz", ",", "in_sz", "\n", "in", "zip", "(", "out_shape", ",", "in_shape", ")", "]", "\n", "", "", "if", "scale_factors", "is", "not", "None", ":", "\n", "# by default, if a single number is given as scale, we assume resizing", "\n", "# two dims (most common are images with 2 spatial dims)", "\n", "        ", "scale_factors", "=", "(", "scale_factors", "\n", "if", "isinstance", "(", "scale_factors", ",", "(", "list", ",", "tuple", ")", ")", "\n", "else", "[", "scale_factors", ",", "scale_factors", "]", ")", "\n", "# if less scale_factors than in_shape dims, we defaultly resize the", "\n", "# first dims for numpy and last dims for torch", "\n", "scale_factors", "=", "(", "list", "(", "scale_factors", ")", "+", "[", "1", "]", "*", "\n", "(", "len", "(", "in_shape", ")", "-", "len", "(", "scale_factors", ")", ")", "if", "fw", "is", "numpy", "\n", "else", "[", "1", "]", "*", "(", "len", "(", "in_shape", ")", "-", "len", "(", "scale_factors", ")", ")", "+", "\n", "list", "(", "scale_factors", ")", ")", "\n", "if", "out_shape", "is", "None", ":", "\n", "# when no out_shape given, it is calculated by multiplying the", "\n", "# scale by the in_shape (not recomended)", "\n", "            ", "out_shape", "=", "[", "ceil", "(", "scale_factor", "*", "in_sz", ")", "\n", "for", "scale_factor", ",", "in_sz", "in", "\n", "zip", "(", "scale_factors", ",", "in_shape", ")", "]", "\n", "# next line intentionally after out_shape determined for stability", "\n", "", "scale_factors", "=", "[", "float", "(", "sf", ")", "for", "sf", "in", "scale_factors", "]", "\n", "", "return", "scale_factors", ",", "out_shape", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.resize_right.resize_right.get_projected_grid": [[229, 237], ["fw.arange"], "function", ["None"], ["", "def", "get_projected_grid", "(", "in_sz", ",", "out_sz", ",", "scale_factor", ",", "fw", ")", ":", "\n", "    ", "out_coordinates", "=", "fw", ".", "arange", "(", "out_sz", ")", "\n", "# This is projecting the ouput pixel locations in 1d to the input tensor,", "\n", "# as non-integer locations.", "\n", "# the following fomrula is derived in the paper", "\n", "# \"From Discrete to Continuous Convolutions\" by Shocher et al.", "\n", "return", "(", "out_coordinates", "/", "scale_factor", "+", "\n", "(", "in_sz", "-", "1", ")", "/", "2", "-", "(", "out_sz", "-", "1", ")", "/", "(", "2", "*", "scale_factor", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.resize_right.resize_right.get_field_of_view": [[239, 256], ["resize_right.fw_ceil", "fw.arange", "resize_right.fw_cat", "math.ceil", "fw.arange", "fw.arange", "fw.remainder"], "function", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.resize_right.resize_right.fw_ceil", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.resize_right.resize_right.fw_cat"], ["", "def", "get_field_of_view", "(", "projected_grid", ",", "cur_support_sz", ",", "in_sz", ",", "fw", ",", "eps", ")", ":", "\n", "# for each output pixel, map which input pixels influence it, in 1d.", "\n", "# we start by calculating the leftmost neighbor, using half of the window", "\n", "# out_size (eps is for when boundary is exact int)", "\n", "    ", "left_boundaries", "=", "fw_ceil", "(", "projected_grid", "-", "cur_support_sz", "/", "2", "-", "eps", ",", "fw", ")", "\n", "\n", "# then we simply take all the pixel centers in the field by counting", "\n", "# window out_size pixels from the left boundary", "\n", "ordinal_numbers", "=", "fw", ".", "arange", "(", "ceil", "(", "cur_support_sz", "-", "eps", ")", ")", "\n", "field_of_view", "=", "left_boundaries", "[", ":", ",", "None", "]", "+", "ordinal_numbers", "\n", "\n", "# next we do a trick instead of padding, we map the field of view so that", "\n", "# it would be like mirror padding, without actually padding", "\n", "# (which would require enlarging the input tensor)", "\n", "mirror", "=", "fw_cat", "(", "(", "fw", ".", "arange", "(", "in_sz", ")", ",", "fw", ".", "arange", "(", "in_sz", "-", "1", ",", "-", "1", ",", "step", "=", "-", "1", ")", ")", ",", "fw", ")", "\n", "field_of_view", "=", "mirror", "[", "fw", ".", "remainder", "(", "field_of_view", ",", "mirror", ".", "shape", "[", "0", "]", ")", "]", "\n", "return", "field_of_view", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.resize_right.resize_right.get_weights": [[258, 269], ["interp_method", "interp_method.sum"], "function", ["None"], ["", "def", "get_weights", "(", "interp_method", ",", "projected_grid", ",", "field_of_view", ")", ":", "\n", "# the set of weights per each output pixels is the result of the chosen", "\n", "# interpolation method applied to the distances between projected grid", "\n", "# locations and the pixel-centers in the field of view (distances are", "\n", "# directed, can be positive or negative)", "\n", "    ", "weights", "=", "interp_method", "(", "projected_grid", "[", ":", ",", "None", "]", "-", "field_of_view", ")", "\n", "\n", "# we now carefully normalize the weights to sum to 1 per each output pixel", "\n", "sum_weights", "=", "weights", ".", "sum", "(", "1", ",", "keepdims", "=", "True", ")", "\n", "sum_weights", "[", "sum_weights", "==", "0", "]", "=", "1", "\n", "return", "weights", "/", "sum_weights", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.resize_right.resize_right.apply_antialiasing_if_needed": [[271, 283], ["interp_method"], "function", ["None"], ["", "def", "apply_antialiasing_if_needed", "(", "interp_method", ",", "support_sz", ",", "scale_factor", ",", "\n", "antialiasing", ")", ":", "\n", "# antialiasing is \"stretching\" the field of view according to the scale", "\n", "# factor (only for downscaling). this is low-pass filtering. this", "\n", "# requires modifying both the interpolation (stretching the 1d", "\n", "# function and multiplying by the scale-factor) and the window out_size.", "\n", "    ", "if", "scale_factor", ">=", "1.0", "or", "not", "antialiasing", ":", "\n", "        ", "return", "interp_method", ",", "support_sz", "\n", "", "cur_interp_method", "=", "(", "lambda", "arg", ":", "scale_factor", "*", "\n", "interp_method", "(", "scale_factor", "*", "arg", ")", ")", "\n", "cur_support_sz", "=", "support_sz", "/", "scale_factor", "\n", "return", "cur_interp_method", ",", "cur_support_sz", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.resize_right.resize_right.fw_ceil": [[285, 290], ["fw.int_", "x.ceil().long", "fw.ceil", "x.ceil"], "function", ["None"], ["", "def", "fw_ceil", "(", "x", ",", "fw", ")", ":", "\n", "    ", "if", "fw", "is", "numpy", ":", "\n", "        ", "return", "fw", ".", "int_", "(", "fw", ".", "ceil", "(", "x", ")", ")", "\n", "", "else", ":", "\n", "        ", "return", "x", ".", "ceil", "(", ")", ".", "long", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.resize_right.resize_right.fw_cat": [[292, 297], ["fw.concatenate", "fw.cat"], "function", ["None"], ["", "", "def", "fw_cat", "(", "x", ",", "fw", ")", ":", "\n", "    ", "if", "fw", "is", "numpy", ":", "\n", "        ", "return", "fw", ".", "concatenate", "(", "x", ")", "\n", "", "else", ":", "\n", "        ", "return", "fw", ".", "cat", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.resize_right.resize_right.fw_swapaxes": [[299, 304], ["fw.swapaxes", "x.transpose"], "function", ["None"], ["", "", "def", "fw_swapaxes", "(", "x", ",", "ax_1", ",", "ax_2", ",", "fw", ")", ":", "\n", "    ", "if", "fw", "is", "numpy", ":", "\n", "        ", "return", "fw", ".", "swapaxes", "(", "x", ",", "ax_1", ",", "ax_2", ")", "\n", "", "else", ":", "\n", "        ", "return", "x", ".", "transpose", "(", "ax_1", ",", "ax_2", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.datasets.food_101N.Food101N.__init__": [[34, 60], ["food_101N.get_food_101N_labels", "print", "len", "os.path.join", "open", "csv.DictReader", "enumerate", "os.path.join", "ValueError", "food_101N.Food101N.img_label_list.append", "len", "img.split"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.datasets.food_101N.get_food_101N_labels"], ["    ", "def", "__init__", "(", "self", ",", "root", ",", "split", ",", "verified_only", "=", "True", ",", "transform", "=", "None", ")", ":", "\n", "        ", "class_labels", "=", "get_food_101N_labels", "(", ")", "\n", "self", ".", "root", "=", "root", "\n", "label_to_target", "=", "{", "label", ":", "target", "for", "target", ",", "label", "in", "enumerate", "(", "class_labels", ")", "}", "\n", "self", ".", "transform", "=", "transform", "\n", "\n", "if", "split", "==", "'train'", ":", "\n", "            ", "meta_tsv", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "'meta'", ",", "'verified_train.tsv'", ")", "\n", "", "elif", "split", "==", "'val'", ":", "\n", "            ", "meta_tsv", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "'meta'", ",", "'verified_val.tsv'", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", ")", "\n", "\n", "", "self", ".", "img_label_list", "=", "[", "]", "\n", "with", "open", "(", "meta_tsv", ")", "as", "tsvfile", ":", "\n", "            ", "reader", "=", "csv", ".", "DictReader", "(", "tsvfile", ",", "dialect", "=", "'excel-tab'", ")", "\n", "for", "row", "in", "reader", ":", "\n", "                ", "if", "verified_only", "and", "row", "[", "'verification_label'", "]", ":", "\n", "                    ", "img", "=", "row", "[", "'class_name/key'", "]", "\n", "target", "=", "label_to_target", "[", "img", ".", "split", "(", "'/'", ")", "[", "0", "]", "]", "\n", "self", ".", "img_label_list", ".", "append", "(", "(", "img", ",", "target", ")", ")", "\n", "\n", "", "", "", "print", "(", "f'Food 101N {split} - Verified only {verified_only} - {len(self.img_label_list)} Images'", ")", "\n", "\n", "self", ".", "loader", "=", "default_loader", "\n", "self", ".", "length", "=", "len", "(", "self", ".", "img_label_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.datasets.food_101N.Food101N.__getitem__": [[61, 69], ["os.path.join", "food_101N.Food101N.loader", "food_101N.Food101N.transform"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "sub_path", ",", "target", "=", "self", ".", "img_label_list", "[", "index", "]", "\n", "path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "'images'", ",", "sub_path", ")", "\n", "sample", "=", "self", ".", "loader", "(", "path", ")", "\n", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "sample", "=", "self", ".", "transform", "(", "sample", ")", "\n", "\n", "", "return", "sample", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.datasets.food_101N.Food101N.__len__": [[70, 72], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "length", "\n", "", "", ""]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.datasets.food_101N.get_food_101N_labels": [[12, 21], ["paths.get_food_101N_path", "os.path.join", "open", "enumerate", "class_list.append", "line.rstrip"], "function", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.datasets.paths.get_food_101N_path"], ["def", "get_food_101N_labels", "(", ")", ":", "\n", "    ", "path", "=", "get_food_101N_path", "(", ")", "\n", "class_list", "=", "[", "]", "\n", "classes_file", "=", "os", ".", "path", ".", "join", "(", "path", ",", "'meta'", ",", "'classes.txt'", ")", "\n", "with", "open", "(", "classes_file", ")", "as", "classestxt", ":", "\n", "        ", "for", "line_number", ",", "line", "in", "enumerate", "(", "classestxt", ")", ":", "\n", "            ", "if", "line_number", ">", "0", ":", "#skip the first line as it's no class", "\n", "                ", "class_list", ".", "append", "(", "line", ".", "rstrip", "(", ")", ")", "\n", "", "", "", "return", "class_list", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.datasets.food_101N.get_food_101N": [[23, 31], ["utils.datasets.augmentations.imagenet_augmentation.get_imageNet_augmentation", "paths.get_food_101N_path", "food_101N.Food101N", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader"], "function", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.augmentations.imagenet_augmentation.get_imageNet_augmentation", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.datasets.paths.get_food_101N_path"], ["", "def", "get_food_101N", "(", "split", "=", "'train'", ",", "batch_size", "=", "128", ",", "shuffle", "=", "True", ",", "augm_type", "=", "'none'", ",", "\n", "size", "=", "224", ",", "num_workers", "=", "8", ")", ":", "\n", "    ", "transform", "=", "get_imageNet_augmentation", "(", "augm_type", ",", "out_size", "=", "size", ")", "\n", "path", "=", "get_food_101N_path", "(", ")", "\n", "dataset", "=", "Food101N", "(", "path", ",", "split", ",", "transform", "=", "transform", ")", "\n", "loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "dataset", ",", "batch_size", "=", "batch_size", ",", "\n", "shuffle", "=", "shuffle", ",", "num_workers", "=", "num_workers", ")", "\n", "return", "loader", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.datasets.cifar.CIFAR10_1Dataset.__init__": [[120, 140], ["paths.get_base_data_dir", "torchvision.datasets.vision.VisionDataset.__init__", "numpy.load", "numpy.load().astype", "ValueError", "numpy.load"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.datasets.paths.get_base_data_dir", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models_32x32.shake_pyramidnet.ShakePyramidNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "transform", "=", "None", ",", "target_transform", "=", "None", ",", "\n", "version", "=", "'v6'", ")", ":", "\n", "\n", "        ", "root", "=", "get_base_data_dir", "(", ")", "\n", "super", "(", ")", ".", "__init__", "(", "root", ",", "transform", "=", "transform", ",", "\n", "target_transform", "=", "target_transform", ")", "\n", "\n", "subfolder", "=", "f'{root}/cifar10_1/'", "\n", "\n", "if", "version", "==", "'v4'", ":", "\n", "            ", "data_file", "=", "f'{subfolder}/cifar10.1_v4_data.npy'", "\n", "target_file", "=", "f'{subfolder}/cifar10.1_v4_labels.npy'", "\n", "", "elif", "version", "==", "'v6'", ":", "\n", "            ", "data_file", "=", "f'{subfolder}/cifar10.1_v6_data.npy'", "\n", "target_file", "=", "f'{subfolder}/cifar10.1_v6_labels.npy'", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'Version not supported'", ")", "\n", "\n", "", "self", ".", "data", "=", "np", ".", "load", "(", "data_file", ")", "\n", "self", ".", "targets", "=", "np", ".", "load", "(", "target_file", ")", ".", "astype", "(", "np", ".", "long", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.datasets.cifar.CIFAR10_1Dataset.__getitem__": [[142, 163], ["PIL.Image.fromarray", "cifar.CIFAR10_1Dataset.transform", "cifar.CIFAR10_1Dataset.target_transform"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            index (int): Index\n\n        Returns:\n            tuple: (image, target) where target is index of the target class.\n        \"\"\"", "\n", "img", ",", "target", "=", "self", ".", "data", "[", "index", ",", ":", "]", ",", "self", ".", "targets", "[", "index", "]", "\n", "\n", "# doing this so that it is consistent with all other datasets", "\n", "# to return a PIL Image", "\n", "img", "=", "Image", ".", "fromarray", "(", "img", ")", "\n", "\n", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "\n", "", "if", "self", ".", "target_transform", "is", "not", "None", ":", "\n", "            ", "target", "=", "self", ".", "target_transform", "(", "target", ")", "\n", "\n", "", "return", "img", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.datasets.cifar.CIFAR10_1Dataset.__len__": [[164, 166], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.datasets.cifar.CIFAR100MinusCIFAR10.__init__": [[184, 230], ["torch.utils.data.Dataset.__init__", "torchvision.datasets.CIFAR100", "cifar.CIFAR100MinusCIFAR10.cifar100.classes.copy", "print", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "enumerate", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "len", "cifar.CIFAR100MinusCIFAR10.classes.remove", "torch.nonzero().squeeze", "torch.nonzero().squeeze", "torch.nonzero().squeeze", "torch.nonzero().squeeze", "cifar100_idcs.append", "targets.append", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "print", "os.path.exists", "len", "torch.load", "torch.load", "torch.load", "torch.load", "print", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "print", "enumerate", "torch.save", "torch.save", "torch.save", "torch.save", "len", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "len", "len", "len", "len", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "len", "len"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models_32x32.shake_pyramidnet.ShakePyramidNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "path", ",", "train", "=", "True", ",", "samples_per_class", "=", "None", ",", "transform", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "cifar100", "=", "datasets", ".", "CIFAR100", "(", "path", ",", "train", "=", "train", ",", "transform", "=", "transform", ")", "\n", "\n", "self", ".", "excluded_idcs", "=", "[", "]", "\n", "self", ".", "classes", "=", "self", ".", "cifar100", ".", "classes", ".", "copy", "(", ")", "\n", "for", "label", "in", "CIFAR100inCIFAR10Labels", ":", "\n", "            ", "self", ".", "classes", ".", "remove", "(", "label", ")", "\n", "\n", "", "print", "(", "f'Cifar100 Minus Cifar10 - Remaining classes: {len(self.classes)}'", ")", "\n", "\n", "cifar100_targets", "=", "torch", ".", "LongTensor", "(", "self", ".", "cifar100", ".", "targets", ")", "\n", "cifar100_idcs", "=", "[", "]", "\n", "targets", "=", "[", "]", "\n", "for", "cls_idx", ",", "cls", "in", "enumerate", "(", "self", ".", "classes", ")", ":", "\n", "            ", "cifar100_class_idx", "=", "self", ".", "cifar100", ".", "class_to_idx", "[", "cls", "]", "\n", "class_idcs", "=", "torch", ".", "nonzero", "(", "cifar100_targets", "==", "cifar100_class_idx", ",", "as_tuple", "=", "False", ")", ".", "squeeze", "(", ")", "\n", "cifar100_idcs", ".", "append", "(", "class_idcs", ")", "\n", "targets", ".", "append", "(", "cls_idx", "*", "torch", ".", "ones", "(", "len", "(", "class_idcs", ")", ",", "dtype", "=", "torch", ".", "long", ")", ")", "\n", "\n", "", "self", ".", "cifar100_idcs", "=", "torch", ".", "cat", "(", "cifar100_idcs", ")", "\n", "\n", "if", "samples_per_class", "is", "None", ":", "\n", "            ", "self", ".", "subset_idcs", "=", "torch", ".", "arange", "(", "len", "(", "self", ".", "cifar100_idcs", ")", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "print", "(", "f'Using all {len(self.subset_idcs)} samples'", ")", "\n", "", "else", ":", "\n", "            ", "split", "=", "'train'", "if", "train", "else", "'test'", "\n", "idcs_filename", "=", "f'cifar100_minus_cifar10_{split}_{samples_per_class}.pt'", "\n", "if", "os", ".", "path", ".", "exists", "(", "idcs_filename", ")", ":", "\n", "                ", "self", ".", "subset_idcs", "=", "torch", ".", "load", "(", "idcs_filename", ")", "\n", "print", "(", "f'Loading an existing subset of {len(self.subset_idcs)} samples'", ")", "\n", "", "else", ":", "\n", "                ", "num_samples", "=", "samples_per_class", "*", "len", "(", "cifar100_idcs", ")", "\n", "self", ".", "subset_idcs", "=", "torch", ".", "zeros", "(", "num_samples", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "print", "(", "f'Creating a subset of {len(self.subset_idcs)} samples'", ")", "\n", "offset", "=", "0", "\n", "for", "cls_idx", ",", "cls", "in", "enumerate", "(", "self", ".", "classes", ")", ":", "\n", "                    ", "num_cls_samples", "=", "len", "(", "cifar100_idcs", "[", "cls_idx", "]", ")", "\n", "selected_cls_idcs", "=", "torch", ".", "randperm", "(", "num_cls_samples", ")", "[", ":", "samples_per_class", "]", "\n", "self", ".", "subset_idcs", "[", "cls_idx", "*", "samples_per_class", ":", "(", "cls_idx", "+", "1", ")", "*", "samples_per_class", "]", "=", "offset", "+", "selected_cls_idcs", "\n", "offset", "+=", "num_cls_samples", "\n", "\n", "", "torch", ".", "save", "(", "self", ".", "subset_idcs", ",", "idcs_filename", ")", "\n", "\n", "", "", "self", ".", "targets", "=", "torch", ".", "cat", "(", "targets", ")", "\n", "self", ".", "length", "=", "len", "(", "self", ".", "subset_idcs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.datasets.cifar.CIFAR100MinusCIFAR10.__getitem__": [[231, 239], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "sub_idx", "=", "self", ".", "subset_idcs", "[", "index", "]", "\n", "cifar100_idx", "=", "self", ".", "cifar100_idcs", "[", "sub_idx", "]", "\n", "\n", "img", ",", "_", "=", "self", ".", "cifar100", "[", "cifar100_idx", "]", "\n", "target", "=", "self", ".", "targets", "[", "sub_idx", "]", "\n", "\n", "return", "img", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.datasets.cifar.CIFAR100MinusCIFAR10.__len__": [[240, 242], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "length", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.datasets.cifar.CIFAR10MinusCIFAR100.__init__": [[277, 300], ["torch.utils.data.Dataset.__init__", "torchvision.datasets.CIFAR10", "cifar.CIFAR10MinusCIFAR100.cifar10.classes.copy", "print", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "enumerate", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "len", "cifar.CIFAR10MinusCIFAR100.classes.remove", "torch.nonzero().squeeze", "torch.nonzero().squeeze", "torch.nonzero().squeeze", "torch.nonzero().squeeze", "cifar10_idcs.append", "targets.append", "len", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "len"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models_32x32.shake_pyramidnet.ShakePyramidNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "path", ",", "train", "=", "True", ",", "transform", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "cifar10", "=", "datasets", ".", "CIFAR10", "(", "path", ",", "train", "=", "train", ",", "transform", "=", "transform", ")", "\n", "\n", "self", ".", "excluded_idcs", "=", "[", "]", "\n", "self", ".", "classes", "=", "self", ".", "cifar10", ".", "classes", ".", "copy", "(", ")", "\n", "for", "label", "in", "CIFAR10inCIFAR100Labels", ":", "\n", "            ", "self", ".", "classes", ".", "remove", "(", "label", ")", "\n", "\n", "", "print", "(", "f'Cifar10 Minus Cifar100 - Remaining classes: {len(self.classes)}'", ")", "\n", "\n", "cifar10_targets", "=", "torch", ".", "LongTensor", "(", "self", ".", "cifar10", ".", "targets", ")", "\n", "cifar10_idcs", "=", "[", "]", "\n", "targets", "=", "[", "]", "\n", "for", "cls_idx", ",", "cls", "in", "enumerate", "(", "self", ".", "classes", ")", ":", "\n", "            ", "cifar10_class_idx", "=", "self", ".", "cifar10", ".", "class_to_idx", "[", "cls", "]", "\n", "class_idcs", "=", "torch", ".", "nonzero", "(", "cifar10_targets", "==", "cifar10_class_idx", ",", "as_tuple", "=", "False", ")", ".", "squeeze", "(", ")", "\n", "cifar10_idcs", ".", "append", "(", "class_idcs", ")", "\n", "targets", ".", "append", "(", "cls_idx", "*", "torch", ".", "ones", "(", "len", "(", "class_idcs", ")", ",", "dtype", "=", "torch", ".", "long", ")", ")", "\n", "\n", "", "self", ".", "cifar10_idcs", "=", "torch", ".", "cat", "(", "cifar10_idcs", ")", "\n", "self", ".", "targets", "=", "torch", ".", "cat", "(", "targets", ")", "\n", "self", ".", "length", "=", "len", "(", "self", ".", "targets", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.datasets.cifar.CIFAR10MinusCIFAR100.__getitem__": [[301, 308], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "cifar10_idx", "=", "self", ".", "cifar10_idcs", "[", "index", "]", "\n", "\n", "img", ",", "_", "=", "self", ".", "cifar10", "[", "cifar10_idx", "]", "\n", "target", "=", "self", ".", "targets", "[", "index", "]", "\n", "\n", "return", "img", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.datasets.cifar.CIFAR10MinusCIFAR100.__len__": [[309, 311], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "length", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.datasets.cifar.GrayCIFAR10": [[19, 49], ["torchvision.transforms.Compose", "torchvision.transforms.Compose", "torchvision.transforms.RandomChoice", "paths.get_CIFAR10_path", "torchvision.datasets.CIFAR10", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torchvision.transforms.Compose", "torchvision.transforms.Resize", "torchvision.transforms.ToTensor", "preproc.Gray", "torchvision.transforms.RandomHorizontalFlip", "torchvision.transforms.RandomCrop"], "function", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.datasets.paths.get_CIFAR10_path"], ["def", "GrayCIFAR10", "(", "train", "=", "False", ",", "batch_size", "=", "None", ",", "augm_flag", "=", "False", ",", "shuffle", "=", "None", ",", "resolution", "=", "28", ")", ":", "\n", "    ", "if", "batch_size", "==", "None", ":", "\n", "        ", "if", "train", ":", "\n", "            ", "batch_size", "=", "DEFAULT_TRAIN_BATCHSIZE", "\n", "", "else", ":", "\n", "            ", "batch_size", "=", "DEFAULT_TEST_BATCHSIZE", "\n", "", "", "transform_base", "=", "[", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "Resize", "(", "resolution", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "Gray", "(", ")", "\n", "]", ")", "]", "\n", "transform_train", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "RandomCrop", "(", "resolution", ",", "padding", "=", "4", ",", "padding_mode", "=", "'reflect'", ")", ",", "\n", "]", "+", "transform_base", ")", "\n", "\n", "if", "shuffle", "is", "None", ":", "\n", "        ", "shuffle", "=", "train", "\n", "\n", "", "transform_test", "=", "transforms", ".", "Compose", "(", "transform_base", ")", "\n", "\n", "transform_train", "=", "transforms", ".", "RandomChoice", "(", "[", "transform_train", ",", "transform_test", "]", ")", "\n", "\n", "transform", "=", "transform_train", "if", "(", "augm_flag", "and", "train", ")", "else", "transform_test", "\n", "\n", "path", "=", "get_CIFAR10_path", "(", ")", "\n", "dataset", "=", "datasets", ".", "CIFAR10", "(", "path", ",", "train", "=", "train", ",", "transform", "=", "transform", ")", "\n", "loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "dataset", ",", "batch_size", "=", "batch_size", ",", "\n", "shuffle", "=", "shuffle", ",", "num_workers", "=", "1", ")", "\n", "return", "loader", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.datasets.cifar.get_CIFAR10": [[51, 77], ["augmentations.cifar_augmentation.get_cifar10_augmentation", "paths.get_CIFAR10_path", "torchvision.datasets.CIFAR10", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "print"], "function", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.augmentations.cifar_augmentation.get_cifar10_augmentation", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.datasets.paths.get_CIFAR10_path"], ["", "def", "get_CIFAR10", "(", "train", "=", "True", ",", "batch_size", "=", "None", ",", "shuffle", "=", "None", ",", "augm_type", "=", "'none'", ",", "cutout_window", "=", "16", ",", "num_workers", "=", "2", ",", "size", "=", "32", ",", "config_dict", "=", "None", ")", ":", "\n", "    ", "if", "batch_size", "==", "None", ":", "\n", "        ", "if", "train", ":", "\n", "            ", "batch_size", "=", "DEFAULT_TRAIN_BATCHSIZE", "\n", "", "else", ":", "\n", "            ", "batch_size", "=", "DEFAULT_TEST_BATCHSIZE", "\n", "\n", "", "", "augm_config", "=", "{", "}", "\n", "transform", "=", "get_cifar10_augmentation", "(", "type", "=", "augm_type", ",", "cutout_window", "=", "cutout_window", ",", "out_size", "=", "size", ",", "config_dict", "=", "augm_config", ")", "\n", "if", "not", "train", "and", "augm_type", "!=", "'none'", ":", "\n", "        ", "print", "(", "'Warning: CIFAR10 test set with ref_data augmentation'", ")", "\n", "\n", "", "if", "shuffle", "is", "None", ":", "\n", "        ", "shuffle", "=", "train", "\n", "\n", "", "path", "=", "get_CIFAR10_path", "(", ")", "\n", "dataset", "=", "datasets", ".", "CIFAR10", "(", "path", ",", "train", "=", "train", ",", "transform", "=", "transform", ",", "download", "=", "True", ")", "\n", "loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "dataset", ",", "batch_size", "=", "batch_size", ",", "\n", "shuffle", "=", "shuffle", ",", "num_workers", "=", "num_workers", ")", "\n", "\n", "if", "config_dict", "is", "not", "None", ":", "\n", "        ", "config_dict", "[", "'Dataset'", "]", "=", "'Cifar10'", "\n", "config_dict", "[", "'Batch out_size'", "]", "=", "batch_size", "\n", "config_dict", "[", "'Augmentation'", "]", "=", "augm_config", "\n", "\n", "", "return", "loader", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.datasets.cifar.get_CIFAR10_labels": [[78, 81], ["None"], "function", ["None"], ["", "def", "get_CIFAR10_labels", "(", ")", ":", "\n", "    ", "labels", "=", "[", "'plane'", ",", "'car'", ",", "'bird'", ",", "'cat'", ",", "'deer'", ",", "'dog'", ",", "'frog'", ",", "'horse'", ",", "'ship'", ",", "'truck'", "]", "\n", "return", "labels", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.datasets.cifar.get_CIFAR100": [[83, 109], ["augmentations.cifar_augmentation.get_cifar10_augmentation", "paths.get_CIFAR100_path", "torchvision.datasets.CIFAR100", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "print"], "function", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.augmentations.cifar_augmentation.get_cifar10_augmentation", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.datasets.paths.get_CIFAR100_path"], ["", "def", "get_CIFAR100", "(", "train", "=", "True", ",", "batch_size", "=", "None", ",", "shuffle", "=", "None", ",", "augm_type", "=", "'none'", ",", "cutout_window", "=", "8", ",", "num_workers", "=", "2", ",", "size", "=", "32", ",", "config_dict", "=", "None", ")", ":", "\n", "    ", "if", "batch_size", "==", "None", ":", "\n", "        ", "if", "train", ":", "\n", "            ", "batch_size", "=", "DEFAULT_TRAIN_BATCHSIZE", "\n", "", "else", ":", "\n", "            ", "batch_size", "=", "DEFAULT_TEST_BATCHSIZE", "\n", "\n", "", "", "augm_config", "=", "{", "}", "\n", "transform", "=", "get_cifar10_augmentation", "(", "type", "=", "augm_type", ",", "cutout_window", "=", "cutout_window", ",", "out_size", "=", "size", ",", "config_dict", "=", "augm_config", ")", "\n", "if", "not", "train", "and", "augm_type", "!=", "'none'", ":", "\n", "        ", "print", "(", "'Warning: CIFAR100 test set with ref_data augmentation'", ")", "\n", "\n", "", "if", "shuffle", "is", "None", ":", "\n", "        ", "shuffle", "=", "train", "\n", "\n", "", "path", "=", "get_CIFAR100_path", "(", ")", "\n", "dataset", "=", "datasets", ".", "CIFAR100", "(", "path", ",", "train", "=", "train", ",", "transform", "=", "transform", ",", "download", "=", "True", ")", "\n", "loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "dataset", ",", "batch_size", "=", "batch_size", ",", "\n", "shuffle", "=", "shuffle", ",", "num_workers", "=", "num_workers", ")", "\n", "\n", "if", "config_dict", "is", "not", "None", ":", "\n", "        ", "config_dict", "[", "'Dataset'", "]", "=", "'Cifar100'", "\n", "config_dict", "[", "'Batch out_size'", "]", "=", "batch_size", "\n", "config_dict", "[", "'Augmentation'", "]", "=", "augm_config", "\n", "\n", "", "return", "loader", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.datasets.cifar.get_CIFAR100_labels": [[111, 118], ["paths.get_CIFAR100_path", "open", "pickle.load", "open.close"], "function", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.datasets.paths.get_CIFAR100_path"], ["", "def", "get_CIFAR100_labels", "(", ")", ":", "\n", "    ", "path", "=", "get_CIFAR100_path", "(", ")", "\n", "infile", "=", "open", "(", "f'{path}/cifar-100-python/meta'", ",", "'rb'", ")", "\n", "dict", "=", "pickle", ".", "load", "(", "infile", ")", "\n", "infile", ".", "close", "(", ")", "\n", "labels", "=", "dict", "[", "'fine_label_names'", "]", "\n", "return", "labels", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.datasets.cifar.get_CIFAR10_1": [[169, 179], ["augmentations.cifar_augmentation.get_cifar10_augmentation", "cifar.CIFAR10_1Dataset", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader"], "function", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.augmentations.cifar_augmentation.get_cifar10_augmentation"], ["", "", "def", "get_CIFAR10_1", "(", "batch_size", "=", "None", ",", "shuffle", "=", "False", ",", "augm_type", "=", "'none'", ",", "size", "=", "32", ")", ":", "\n", "    ", "if", "batch_size", "==", "None", ":", "\n", "        ", "batch_size", "=", "DEFAULT_TEST_BATCHSIZE", "\n", "\n", "", "transform", "=", "get_cifar10_augmentation", "(", "type", "=", "augm_type", ",", "out_size", "=", "size", ")", "\n", "\n", "dataset", "=", "CIFAR10_1Dataset", "(", "transform", "=", "transform", ")", "\n", "loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "dataset", ",", "batch_size", "=", "batch_size", ",", "\n", "shuffle", "=", "shuffle", ",", "num_workers", "=", "8", ")", "\n", "return", "loader", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.datasets.cifar.get_CIFAR100MinusCIFAR10": [[245, 273], ["augmentations.cifar_augmentation.get_cifar10_augmentation", "paths.get_CIFAR100_path", "cifar.CIFAR100MinusCIFAR10", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "print"], "function", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.augmentations.cifar_augmentation.get_cifar10_augmentation", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.datasets.paths.get_CIFAR100_path"], ["", "", "def", "get_CIFAR100MinusCIFAR10", "(", "train", "=", "True", ",", "batch_size", "=", "None", ",", "shuffle", "=", "None", ",", "samples_per_class", "=", "None", ",", "augm_type", "=", "'none'", ",", "\n", "cutout_window", "=", "16", ",", "num_workers", "=", "2", ",", "size", "=", "32", ",", "config_dict", "=", "None", ")", ":", "\n", "    ", "if", "batch_size", "==", "None", ":", "\n", "        ", "if", "train", ":", "\n", "            ", "batch_size", "=", "DEFAULT_TRAIN_BATCHSIZE", "\n", "", "else", ":", "\n", "            ", "batch_size", "=", "DEFAULT_TEST_BATCHSIZE", "\n", "\n", "", "", "augm_config", "=", "{", "}", "\n", "transform", "=", "get_cifar10_augmentation", "(", "type", "=", "augm_type", ",", "cutout_window", "=", "cutout_window", ",", "\n", "out_size", "=", "size", ",", "config_dict", "=", "augm_config", ")", "\n", "if", "not", "train", "and", "augm_type", "!=", "'none'", ":", "\n", "        ", "print", "(", "'Warning: CIFAR10 test set with ref_data augmentation'", ")", "\n", "\n", "", "if", "shuffle", "is", "None", ":", "\n", "        ", "shuffle", "=", "train", "\n", "\n", "", "path", "=", "get_CIFAR100_path", "(", ")", "\n", "dataset", "=", "CIFAR100MinusCIFAR10", "(", "path", ",", "train", "=", "train", ",", "samples_per_class", "=", "samples_per_class", ",", "transform", "=", "transform", ")", "\n", "loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "dataset", ",", "batch_size", "=", "batch_size", ",", "\n", "shuffle", "=", "shuffle", ",", "num_workers", "=", "num_workers", ")", "\n", "\n", "if", "config_dict", "is", "not", "None", ":", "\n", "        ", "config_dict", "[", "'Dataset'", "]", "=", "'Cifar100MinusCifar10'", "\n", "config_dict", "[", "'Batch out_size'", "]", "=", "batch_size", "\n", "config_dict", "[", "'Augmentation'", "]", "=", "augm_config", "\n", "\n", "", "return", "loader", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.datasets.cifar.get_CIFAR10MinusCIFAR100": [[312, 340], ["augmentations.cifar_augmentation.get_cifar10_augmentation", "paths.get_CIFAR10_path", "cifar.CIFAR10MinusCIFAR100", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "print"], "function", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.augmentations.cifar_augmentation.get_cifar10_augmentation", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.datasets.paths.get_CIFAR10_path"], ["", "", "def", "get_CIFAR10MinusCIFAR100", "(", "train", "=", "True", ",", "batch_size", "=", "None", ",", "shuffle", "=", "None", ",", "augm_type", "=", "'none'", ",", "\n", "cutout_window", "=", "16", ",", "num_workers", "=", "2", ",", "size", "=", "32", ",", "config_dict", "=", "None", ")", ":", "\n", "    ", "if", "batch_size", "==", "None", ":", "\n", "        ", "if", "train", ":", "\n", "            ", "batch_size", "=", "DEFAULT_TRAIN_BATCHSIZE", "\n", "", "else", ":", "\n", "            ", "batch_size", "=", "DEFAULT_TEST_BATCHSIZE", "\n", "\n", "", "", "augm_config", "=", "{", "}", "\n", "transform", "=", "get_cifar10_augmentation", "(", "type", "=", "augm_type", ",", "cutout_window", "=", "cutout_window", ",", "\n", "out_size", "=", "size", ",", "config_dict", "=", "augm_config", ")", "\n", "if", "not", "train", "and", "augm_type", "!=", "'none'", ":", "\n", "        ", "print", "(", "'Warning: CIFAR10 test set with ref_data augmentation'", ")", "\n", "\n", "", "if", "shuffle", "is", "None", ":", "\n", "        ", "shuffle", "=", "train", "\n", "\n", "", "path", "=", "get_CIFAR10_path", "(", ")", "\n", "dataset", "=", "CIFAR10MinusCIFAR100", "(", "path", ",", "train", "=", "train", ",", "transform", "=", "transform", ")", "\n", "loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "dataset", ",", "batch_size", "=", "batch_size", ",", "\n", "shuffle", "=", "shuffle", ",", "num_workers", "=", "num_workers", ")", "\n", "\n", "if", "config_dict", "is", "not", "None", ":", "\n", "        ", "config_dict", "[", "'Dataset'", "]", "=", "'Cifar10MinusCifar100'", "\n", "config_dict", "[", "'Batch out_size'", "]", "=", "batch_size", "\n", "config_dict", "[", "'Augmentation'", "]", "=", "augm_config", "\n", "\n", "", "return", "loader", "\n", "", ""]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.datasets.cinic_10.get_CINIC10": [[14, 44], ["utils.datasets.augmentations.cifar_augmentation.get_cifar10_augmentation", "paths.get_CINIC10_path", "os.path.join", "torchvision.datasets.ImageFolder", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "ValueError"], "function", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.augmentations.cifar_augmentation.get_cifar10_augmentation", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.datasets.paths.get_CINIC10_path"], ["def", "get_CINIC10", "(", "split", "=", "'train'", ",", "batch_size", "=", "None", ",", "shuffle", "=", "False", ",", "\n", "augm_type", "=", "'none'", ",", "cutout_window", "=", "16", ",", "num_workers", "=", "2", ",", "size", "=", "32", ",", "config_dict", "=", "None", ")", ":", "\n", "    ", "if", "batch_size", "==", "None", ":", "\n", "        ", "batch_size", "=", "DEFAULT_TEST_BATCHSIZE", "\n", "\n", "", "augm_config", "=", "{", "}", "\n", "transform", "=", "get_cifar10_augmentation", "(", "type", "=", "augm_type", ",", "cutout_window", "=", "cutout_window", ",", "out_size", "=", "size", ",", "config_dict", "=", "augm_config", ")", "\n", "\n", "path", "=", "get_CINIC10_path", "(", ")", "\n", "if", "split", "==", "'train'", ":", "\n", "        ", "cinic_subdir", "=", "'train'", "\n", "", "elif", "split", "==", "'val'", ":", "\n", "        ", "cinic_subdir", "=", "'valid'", "\n", "", "elif", "split", "==", "'test'", ":", "\n", "        ", "cinic_subdir", "=", "'test'", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", ")", "\n", "\n", "", "cinic_directory", "=", "os", ".", "path", ".", "join", "(", "path", ",", "cinic_subdir", ")", "\n", "cinic_dataset", "=", "ImageFolder", "(", "cinic_directory", ",", "transform", "=", "transform", ")", "\n", "\n", "loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "cinic_dataset", ",", "batch_size", "=", "batch_size", ",", "\n", "shuffle", "=", "shuffle", ",", "num_workers", "=", "num_workers", ")", "\n", "\n", "if", "config_dict", "is", "not", "None", ":", "\n", "        ", "config_dict", "[", "'Dataset'", "]", "=", "'CINIC-10'", "\n", "config_dict", "[", "'Batch out_size'", "]", "=", "batch_size", "\n", "config_dict", "[", "'Augmentation'", "]", "=", "augm_config", "\n", "\n", "", "return", "loader", "\n", "", ""]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.datasets.imagenet_subsets.SubsetSampler.__init__": [[86, 88], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "indices", ")", ":", "\n", "        ", "self", ".", "indices", "=", "indices", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.datasets.imagenet_subsets.SubsetSampler.__iter__": [[89, 91], ["torch.arange", "torch.arange", "torch.arange", "torch.arange", "len"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "return", "(", "self", ".", "indices", "[", "i", "]", "for", "i", "in", "torch", ".", "arange", "(", "len", "(", "self", ".", "indices", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.datasets.imagenet_subsets.SubsetSampler.__len__": [[92, 94], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "indices", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.datasets.imagenet_subsets.RestrictedImageNet.__init__": [[114, 139], ["torchvision.datasets.ImageNet", "len", "range", "enumerate", "max", "min", "class_idcs.append", "enumerate", "sum", "range", "len", "len", "class_idcs[].append", "len"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "path", ",", "split", ",", "transform", "=", "None", ",", "balanced", "=", "True", ")", ":", "\n", "        ", "self", ".", "imagenet", "=", "datasets", ".", "ImageNet", "(", "path", ",", "split", "=", "split", ",", "transform", "=", "transform", ")", "\n", "self", ".", "balanced", "=", "balanced", "\n", "self", ".", "num_classes", "=", "len", "(", "RESTRICTED_IMAGNET_RANGES", ")", "\n", "\n", "class_idcs", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "num_classes", ")", ":", "\n", "            ", "class_idcs", ".", "append", "(", "[", "]", ")", "\n", "\n", "", "for", "i", ",", "label", "in", "enumerate", "(", "self", ".", "imagenet", ".", "targets", ")", ":", "\n", "            ", "for", "class_idx", ",", "(", "start", ",", "end", ")", "in", "enumerate", "(", "RESTRICTED_IMAGNET_RANGES", ")", ":", "\n", "                ", "if", "(", "label", ">=", "start", ")", "and", "(", "label", "<=", "end", ")", ":", "\n", "                    ", "class_idcs", "[", "class_idx", "]", ".", "append", "(", "i", ")", "\n", "break", "\n", "\n", "", "", "", "self", ".", "imagenet_linear_idcs", "=", "[", "item", "for", "sublist", "in", "class_idcs", "for", "item", "in", "sublist", "]", "\n", "self", ".", "targets", "=", "[", "class_idx", "for", "class_idx", "in", "range", "(", "self", ".", "num_classes", ")", "for", "_", "in", "class_idcs", "[", "class_idx", "]", "]", "\n", "\n", "self", ".", "max_class_imgs", "=", "max", "(", "[", "len", "(", "a", ")", "for", "a", "in", "class_idcs", "]", ")", "\n", "self", ".", "min_class_imgs", "=", "min", "(", "[", "len", "(", "a", ")", "for", "a", "in", "class_idcs", "]", ")", "\n", "\n", "if", "not", "self", ".", "balanced", ":", "\n", "            ", "self", ".", "length", "=", "sum", "(", "[", "len", "(", "a", ")", "for", "a", "in", "class_idcs", "]", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "length", "=", "self", ".", "num_classes", "*", "self", ".", "min_class_imgs", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.datasets.imagenet_subsets.RestrictedImageNet.__getitem__": [[140, 145], ["None"], "methods", ["None"], ["", "", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "imagenet_linear_idx", "=", "self", ".", "imagenet_linear_idcs", "[", "index", "]", "\n", "target", "=", "self", ".", "targets", "[", "index", "]", "\n", "img", ",", "_", "=", "self", ".", "imagenet", "[", "imagenet_linear_idx", "]", "\n", "return", "img", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.datasets.imagenet_subsets.RestrictedImageNet.__len__": [[146, 148], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "length", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.datasets.imagenet_subsets.RestrictedImagenetBalancedSampler.__init__": [[152, 164], ["torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "range", "min", "torch.utils.data.Sampler.__init__", "torch.nonzero().squeeze", "torch.nonzero().squeeze", "torch.nonzero().squeeze", "torch.nonzero().squeeze", "imagenet_subsets.RestrictedImagenetBalancedSampler.class_idcs.append", "len", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models_32x32.shake_pyramidnet.ShakePyramidNet.__init__"], ["def", "__init__", "(", "self", ",", "dataset", ",", "shuffle", ")", ":", "\n", "        ", "assert", "dataset", ".", "balanced", "\n", "self", ".", "num_classes", "=", "dataset", ".", "num_classes", "\n", "self", ".", "class_idcs", "=", "[", "]", "\n", "targets_tensor", "=", "torch", ".", "LongTensor", "(", "dataset", ".", "targets", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "num_classes", ")", ":", "\n", "            ", "class_i_idcs", "=", "torch", ".", "nonzero", "(", "targets_tensor", "==", "i", ",", "as_tuple", "=", "False", ")", ".", "squeeze", "(", ")", "\n", "self", ".", "class_idcs", ".", "append", "(", "class_i_idcs", ")", "\n", "", "self", ".", "shuffle", "=", "shuffle", "\n", "self", ".", "min_class_length", "=", "min", "(", "[", "len", "(", "a", ")", "for", "a", "in", "self", ".", "class_idcs", "]", ")", "\n", "self", ".", "length", "=", "self", ".", "num_classes", "*", "self", ".", "min_class_length", "\n", "super", "(", ")", ".", "__init__", "(", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.datasets.imagenet_subsets.RestrictedImagenetBalancedSampler.__iter__": [[165, 180], ["torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "range", "iter", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "len", "len"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "lin_idcs", "=", "torch", ".", "zeros", "(", "self", ".", "length", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "num_classes", ")", ":", "\n", "            ", "s_idx", "=", "i", "*", "self", ".", "min_class_length", "\n", "e_idx", "=", "(", "i", "+", "1", ")", "*", "self", ".", "min_class_length", "\n", "if", "self", ".", "shuffle", ":", "\n", "                ", "permutation_idcs", "=", "torch", ".", "randperm", "(", "len", "(", "self", ".", "class_idcs", "[", "i", "]", ")", ")", "[", ":", "self", ".", "min_class_length", "]", "\n", "lin_idcs", "[", "s_idx", ":", "e_idx", "]", "=", "self", ".", "class_idcs", "[", "i", "]", "[", "permutation_idcs", "]", "\n", "", "else", ":", "\n", "                ", "lin_idcs", "[", "s_idx", ":", "e_idx", "]", "=", "self", ".", "class_idcs", "[", "i", "]", "[", ":", "self", ".", "min_class_length", "]", "\n", "\n", "", "", "if", "self", ".", "shuffle", ":", "\n", "            ", "lin_idcs", "=", "lin_idcs", "[", "torch", ".", "randperm", "(", "len", "(", "lin_idcs", ")", ")", "]", "\n", "\n", "", "return", "iter", "(", "lin_idcs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.datasets.imagenet_subsets.RestrictedImagenetBalancedSampler.__len__": [[182, 184], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "length", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.datasets.imagenet_subsets.RestrictedImageNetOD.__init__": [[220, 234], ["torchvision.datasets.ImageNet", "len", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "enumerate", "torch.nonzero().squeeze", "torch.nonzero().squeeze", "torch.nonzero().squeeze", "torch.nonzero().squeeze", "len", "len", "enumerate", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "path", ",", "split", ",", "transform", "=", "None", ")", ":", "\n", "        ", "self", ".", "imagenet", "=", "datasets", ".", "ImageNet", "(", "path", ",", "split", "=", "split", ",", "transform", "=", "transform", ")", "\n", "self", ".", "num_classes", "=", "len", "(", "RESTRICTED_IMAGNET_RANGES", ")", "\n", "\n", "od_flags", "=", "torch", ".", "ones", "(", "len", "(", "self", ".", "imagenet", ")", ",", "dtype", "=", "torch", ".", "bool", ")", "\n", "\n", "for", "i", ",", "label", "in", "enumerate", "(", "self", ".", "imagenet", ".", "targets", ")", ":", "\n", "            ", "for", "class_idx", ",", "(", "start", ",", "end", ")", "in", "enumerate", "(", "RESTRICTED_IMAGNET_RANGES", ")", ":", "\n", "                ", "if", "(", "label", ">=", "start", ")", "and", "(", "label", "<=", "end", ")", ":", "\n", "                    ", "od_flags", "[", "i", "]", "=", "False", "\n", "break", "\n", "\n", "", "", "", "self", ".", "od_idcs", "=", "torch", ".", "nonzero", "(", "od_flags", ",", "as_tuple", "=", "False", ")", ".", "squeeze", "(", ")", "\n", "self", ".", "length", "=", "len", "(", "self", ".", "od_idcs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.datasets.imagenet_subsets.RestrictedImageNetOD.__getitem__": [[235, 238], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "imagenet_idx", "=", "self", ".", "od_idcs", "[", "index", "]", "\n", "return", "self", ".", "imagenet", "[", "imagenet_idx", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.datasets.imagenet_subsets.RestrictedImageNetOD.__len__": [[239, 241], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "length", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.datasets.imagenet_subsets.ImageNetWIDSubset.__init__": [[244, 263], ["torchvision.datasets.ImageNet", "len", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "len", "print", "torch.nonzero().squeeze", "torch.nonzero().squeeze", "torch.nonzero().squeeze", "torch.nonzero().squeeze", "targets.append", "class_idcs.append", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "len"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "path", ",", "split", ",", "wids", ",", "transform", "=", "None", ")", ":", "\n", "        ", "self", ".", "imagenet", "=", "datasets", ".", "ImageNet", "(", "path", ",", "split", "=", "split", ",", "transform", "=", "transform", ")", "\n", "self", ".", "num_classes", "=", "len", "(", "wids", ")", "\n", "\n", "class_idcs", "=", "[", "]", "\n", "targets", "=", "[", "]", "\n", "targets_tensor", "=", "torch", ".", "LongTensor", "(", "self", ".", "imagenet", ".", "targets", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "num_classes", ")", ":", "\n", "            ", "wid", "=", "wids", "[", "i", "]", "\n", "wid_idx", "=", "self", ".", "imagenet", ".", "wnid_to_idx", "[", "wid", "]", "\n", "wid_bool_idcs", "=", "targets_tensor", "==", "wid_idx", "\n", "wid_lin_idcs", "=", "torch", ".", "nonzero", "(", "wid_bool_idcs", ",", "as_tuple", "=", "False", ")", ".", "squeeze", "(", ")", "\n", "targets", ".", "append", "(", "i", "*", "torch", ".", "ones", "(", "len", "(", "wid_lin_idcs", ")", ",", "dtype", "=", "torch", ".", "long", ")", ")", "\n", "class_idcs", ".", "append", "(", "wid_lin_idcs", ")", "\n", "\n", "", "self", ".", "idcs", "=", "torch", ".", "cat", "(", "class_idcs", ")", "\n", "self", ".", "targets", "=", "torch", ".", "cat", "(", "targets", ")", "\n", "self", ".", "length", "=", "len", "(", "self", ".", "idcs", ")", "\n", "print", "(", "f'ImageNet subset from {self.num_classes} WIDS - Length: {self.length}'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.datasets.imagenet_subsets.ImageNetWIDSubset.__getitem__": [[265, 270], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "imagenet_linear_idx", "=", "self", ".", "idcs", "[", "index", "]", "\n", "target", "=", "self", ".", "targets", "[", "index", "]", "\n", "img", ",", "_", "=", "self", ".", "imagenet", "[", "imagenet_linear_idx", "]", "\n", "return", "img", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.datasets.imagenet_subsets.ImageNetWIDSubset.__len__": [[271, 273], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "length", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.datasets.imagenet_subsets.get_restrictedImageNet": [[13, 52], ["utils.datasets.augmentations.imagenet_augmentation.get_imageNet_augmentation", "paths.get_imagenet_path", "print", "imagenet_subsets.RestrictedImageNet", "imagenet_subsets.RestrictedImageNet", "imagenet_subsets.RestrictedImagenetBalancedSampler", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader"], "function", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.augmentations.imagenet_augmentation.get_imageNet_augmentation", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.datasets.paths.get_imagenet_path"], ["def", "get_restrictedImageNet", "(", "train", "=", "True", ",", "batch_size", "=", "None", ",", "shuffle", "=", "None", ",", "augm_type", "=", "'test'", ",", "\n", "balanced", "=", "True", ",", "num_workers", "=", "8", ",", "size", "=", "224", ",", "config_dict", "=", "None", ")", ":", "\n", "    ", "if", "batch_size", "==", "None", ":", "\n", "        ", "if", "train", ":", "\n", "            ", "batch_size", "=", "DEFAULT_TRAIN_BATCHSIZE", "\n", "", "else", ":", "\n", "            ", "batch_size", "=", "DEFAULT_TEST_BATCHSIZE", "\n", "\n", "", "", "augm_config", "=", "{", "}", "\n", "transform", "=", "get_imageNet_augmentation", "(", "type", "=", "augm_type", ",", "out_size", "=", "size", ",", "config_dict", "=", "augm_config", ")", "\n", "\n", "if", "not", "train", "and", "augm_type", "!=", "'test'", "and", "augm_type", "!=", "'none'", ":", "\n", "        ", "print", "(", "'Warning: ImageNet test set with ref_data augmentation'", ")", "\n", "\n", "", "if", "shuffle", "is", "None", ":", "\n", "        ", "shuffle", "=", "train", "\n", "\n", "", "path", "=", "get_imagenet_path", "(", ")", "\n", "\n", "if", "train", "==", "True", ":", "\n", "        ", "dataset", "=", "RestrictedImageNet", "(", "path", ",", "split", "=", "'train'", ",", "transform", "=", "transform", ",", "balanced", "=", "balanced", ")", "\n", "", "else", ":", "\n", "        ", "dataset", "=", "RestrictedImageNet", "(", "path", ",", "split", "=", "'val'", ",", "transform", "=", "transform", ",", "balanced", "=", "balanced", ")", "\n", "\n", "", "if", "balanced", ":", "\n", "        ", "sampler", "=", "RestrictedImagenetBalancedSampler", "(", "dataset", ",", "shuffle", ")", "\n", "loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "dataset", ",", "batch_size", "=", "batch_size", ",", "\n", "sampler", "=", "sampler", ",", "num_workers", "=", "num_workers", ")", "\n", "", "else", ":", "\n", "        ", "loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "dataset", ",", "batch_size", "=", "batch_size", ",", "\n", "shuffle", "=", "shuffle", ",", "num_workers", "=", "num_workers", ")", "\n", "\n", "", "if", "config_dict", "is", "not", "None", ":", "\n", "        ", "config_dict", "[", "'Dataset'", "]", "=", "'RestrictedImageNet'", "\n", "config_dict", "[", "'Balanced'", "]", "=", "balanced", "\n", "config_dict", "[", "'Batch out_size'", "]", "=", "batch_size", "\n", "config_dict", "[", "'Augmentation'", "]", "=", "augm_config", "\n", "\n", "", "return", "loader", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.datasets.imagenet_subsets.get_restrictedImageNetValidationTestSplit": [[54, 74], ["numpy.loadtxt", "utils.datasets.augmentations.imagenet_augmentation.get_imageNet_augmentation", "paths.get_imagenet_path", "imagenet_subsets.RestrictedImageNet", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "numpy.arange", "numpy.setdiff1d", "torch.utils.data.SubsetRandomSampler", "imagenet_subsets.SubsetSampler"], "function", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.augmentations.imagenet_augmentation.get_imageNet_augmentation", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.datasets.paths.get_imagenet_path"], ["", "def", "get_restrictedImageNetValidationTestSplit", "(", "val_split", "=", "True", ",", "batch_size", "=", "128", ",", "shuffle", "=", "False", ",", "augm_type", "=", "'test'", ",", "num_workers", "=", "8", ",", "size", "=", "224", ")", ":", "\n", "    ", "idxs", "=", "np", ".", "loadtxt", "(", "'idxs_rimgnet.txt'", ",", "dtype", "=", "int", ")", "\n", "\n", "if", "not", "val_split", ":", "\n", "        ", "all_idcs", "=", "np", ".", "arange", "(", "10150", ")", "\n", "idxs", "=", "np", ".", "setdiff1d", "(", "all_idcs", ",", "idxs", ")", "#test idcs", "\n", "\n", "", "if", "shuffle", ":", "\n", "        ", "sampler", "=", "SubsetRandomSampler", "(", "idxs", ")", "\n", "", "else", ":", "\n", "        ", "sampler", "=", "SubsetSampler", "(", "idxs", ")", "\n", "\n", "", "transform", "=", "get_imageNet_augmentation", "(", "type", "=", "augm_type", ",", "out_size", "=", "size", ")", "\n", "\n", "path", "=", "get_imagenet_path", "(", ")", "\n", "dataset", "=", "RestrictedImageNet", "(", "path", "=", "path", ",", "split", "=", "'val'", ",", "\n", "transform", "=", "transform", ",", "balanced", "=", "False", ")", "\n", "loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "dataset", ",", "batch_size", "=", "batch_size", ",", "sampler", "=", "sampler", ",", "\n", "num_workers", "=", "num_workers", ")", "\n", "return", "loader", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.datasets.imagenet_subsets.get_restrictedImageNetLabels": [[76, 78], ["None"], "function", ["None"], ["", "def", "get_restrictedImageNetLabels", "(", ")", ":", "\n", "    ", "return", "RESTRICTED_IMAGNET_LABELS", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.datasets.imagenet_subsets.get_restrictedImageNetOD": [[185, 217], ["utils.datasets.augmentations.imagenet_augmentation.get_imageNet_augmentation", "paths.get_imagenet_path", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "print", "imagenet_subsets.RestrictedImageNetOD", "imagenet_subsets.RestrictedImageNetOD"], "function", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.augmentations.imagenet_augmentation.get_imageNet_augmentation", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.datasets.paths.get_imagenet_path"], ["", "", "def", "get_restrictedImageNetOD", "(", "train", "=", "True", ",", "batch_size", "=", "None", ",", "shuffle", "=", "None", ",", "augm_type", "=", "'test'", ",", "\n", "num_workers", "=", "8", ",", "size", "=", "224", ",", "config_dict", "=", "None", ")", ":", "\n", "    ", "if", "batch_size", "==", "None", ":", "\n", "        ", "if", "train", ":", "\n", "            ", "batch_size", "=", "DEFAULT_TRAIN_BATCHSIZE", "\n", "", "else", ":", "\n", "            ", "batch_size", "=", "DEFAULT_TEST_BATCHSIZE", "\n", "\n", "", "", "augm_config", "=", "{", "}", "\n", "transform", "=", "get_imageNet_augmentation", "(", "type", "=", "augm_type", ",", "out_size", "=", "size", ",", "config_dict", "=", "augm_config", ")", "\n", "if", "not", "train", "and", "augm_type", "!=", "'test'", ":", "\n", "        ", "print", "(", "'Warning: ImageNet test set with ref_data augmentation'", ")", "\n", "\n", "", "if", "shuffle", "is", "None", ":", "\n", "        ", "shuffle", "=", "train", "\n", "\n", "", "path", "=", "get_imagenet_path", "(", ")", "\n", "\n", "if", "train", "==", "True", ":", "\n", "        ", "dataset", "=", "RestrictedImageNetOD", "(", "path", ",", "split", "=", "'train'", ",", "transform", "=", "transform", ")", "\n", "", "else", ":", "\n", "        ", "dataset", "=", "RestrictedImageNetOD", "(", "path", ",", "split", "=", "'val'", ",", "transform", "=", "transform", ")", "\n", "\n", "", "loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "dataset", ",", "batch_size", "=", "batch_size", ",", "\n", "shuffle", "=", "shuffle", ",", "num_workers", "=", "num_workers", ")", "\n", "\n", "if", "config_dict", "is", "not", "None", ":", "\n", "        ", "config_dict", "[", "'Dataset'", "]", "=", "'RestrictedImageNetOD'", "\n", "config_dict", "[", "'Batch out_size'", "]", "=", "batch_size", "\n", "config_dict", "[", "'Augmentation'", "]", "=", "augm_config", "\n", "\n", "", "return", "loader", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.datasets.imagenet_subsets.get_ImageNet100": [[274, 306], ["utils.datasets.augmentations.imagenet_augmentation.get_imageNet_augmentation", "paths.get_imagenet_path", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "print", "imagenet_subsets.ImageNetWIDSubset", "imagenet_subsets.ImageNetWIDSubset"], "function", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.augmentations.imagenet_augmentation.get_imageNet_augmentation", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.datasets.paths.get_imagenet_path"], ["", "", "def", "get_ImageNet100", "(", "train", "=", "True", ",", "batch_size", "=", "None", ",", "shuffle", "=", "None", ",", "augm_type", "=", "'none'", ",", "\n", "num_workers", "=", "8", ",", "size", "=", "224", ",", "config_dict", "=", "None", ")", ":", "\n", "    ", "if", "batch_size", "==", "None", ":", "\n", "        ", "if", "train", ":", "\n", "            ", "batch_size", "=", "DEFAULT_TRAIN_BATCHSIZE", "\n", "", "else", ":", "\n", "            ", "batch_size", "=", "DEFAULT_TEST_BATCHSIZE", "\n", "\n", "", "", "augm_config", "=", "{", "}", "\n", "transform", "=", "get_imageNet_augmentation", "(", "type", "=", "augm_type", ",", "out_size", "=", "size", ",", "config_dict", "=", "augm_config", ")", "\n", "if", "not", "train", "and", "augm_type", "!=", "'test'", "and", "augm_type", "!=", "'none'", ":", "\n", "        ", "print", "(", "'Warning: ImageNet test set with ref_data augmentation'", ")", "\n", "\n", "", "if", "shuffle", "is", "None", ":", "\n", "        ", "shuffle", "=", "train", "\n", "\n", "", "path", "=", "get_imagenet_path", "(", ")", "\n", "\n", "if", "train", "==", "True", ":", "\n", "        ", "dataset", "=", "ImageNetWIDSubset", "(", "path", ",", "split", "=", "'train'", ",", "wids", "=", "IMAGENET100_WIDS", ",", "transform", "=", "transform", ")", "\n", "", "else", ":", "\n", "        ", "dataset", "=", "ImageNetWIDSubset", "(", "path", ",", "split", "=", "'val'", ",", "wids", "=", "IMAGENET100_WIDS", ",", "transform", "=", "transform", ")", "\n", "\n", "", "loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "dataset", ",", "batch_size", "=", "batch_size", ",", "\n", "shuffle", "=", "shuffle", ",", "num_workers", "=", "num_workers", ")", "\n", "\n", "if", "config_dict", "is", "not", "None", ":", "\n", "        ", "config_dict", "[", "'Dataset'", "]", "=", "'ImageNet100'", "\n", "config_dict", "[", "'Batch out_size'", "]", "=", "batch_size", "\n", "config_dict", "[", "'Augmentation'", "]", "=", "augm_config", "\n", "\n", "", "return", "loader", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.datasets.imagenet_subsets.get_ImageNet100_labels": [[307, 309], ["None"], "function", ["None"], ["", "def", "get_ImageNet100_labels", "(", ")", ":", "\n", "    ", "return", "IMAGENET100_LABELS", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.datasets.imagenet_subsets.get_imagenetWID_complement": [[393, 405], ["paths.get_imagenet_path", "torchvision.datasets.ImageNet", "complement.append"], "function", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.datasets.paths.get_imagenet_path"], ["def", "get_imagenetWID_complement", "(", "wids", ")", ":", "\n", "    ", "path", "=", "get_imagenet_path", "(", ")", "\n", "imagenet", "=", "datasets", ".", "ImageNet", "(", "path", ",", "split", "=", "'val'", ",", "transform", "=", "'none'", ")", "\n", "\n", "imagenet_wids", "=", "imagenet", ".", "wnids", "\n", "complement", "=", "[", "]", "\n", "\n", "for", "wid", "in", "imagenet_wids", ":", "\n", "        ", "if", "wid", "not", "in", "wids", ":", "\n", "            ", "complement", ".", "append", "(", "wid", ")", "\n", "\n", "", "", "return", "complement", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.datasets.imagenet_subsets.get_ImageNetWithout": [[407, 447], ["utils.datasets.augmentations.imagenet_augmentation.get_imageNet_augmentation", "paths.get_imagenet_path", "imagenet_subsets.get_imagenetWID_complement", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "print", "imagenet_subsets.ImageNetWIDSubset", "imagenet_subsets.ImageNetWIDSubset", "NotImplementedError"], "function", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.augmentations.imagenet_augmentation.get_imageNet_augmentation", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.datasets.paths.get_imagenet_path", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.datasets.imagenet_subsets.get_imagenetWID_complement"], ["", "def", "get_ImageNetWithout", "(", "dataset", ",", "train", "=", "True", ",", "batch_size", "=", "None", ",", "shuffle", "=", "None", ",", "augm_type", "=", "'none'", ",", "\n", "num_workers", "=", "8", ",", "size", "=", "224", ")", ":", "\n", "    ", "if", "batch_size", "==", "None", ":", "\n", "        ", "if", "train", ":", "\n", "            ", "batch_size", "=", "DEFAULT_TRAIN_BATCHSIZE", "\n", "", "else", ":", "\n", "            ", "batch_size", "=", "DEFAULT_TEST_BATCHSIZE", "\n", "\n", "", "", "augm_config", "=", "{", "}", "\n", "transform", "=", "get_imageNet_augmentation", "(", "type", "=", "augm_type", ",", "out_size", "=", "size", ",", "config_dict", "=", "augm_config", ")", "\n", "if", "not", "train", "and", "augm_type", "!=", "'test'", "and", "augm_type", "!=", "'none'", ":", "\n", "        ", "print", "(", "'Warning: ImageNet test set with ref_data augmentation'", ")", "\n", "\n", "", "if", "shuffle", "is", "None", ":", "\n", "        ", "shuffle", "=", "train", "\n", "\n", "", "path", "=", "get_imagenet_path", "(", ")", "\n", "\n", "if", "dataset", "==", "'pets'", ":", "\n", "        ", "dataset_wids", "=", "pet_WIDS", "\n", "", "elif", "dataset", "==", "'food-101'", ":", "\n", "        ", "dataset_wids", "=", "food_101_WIDS", "\n", "", "elif", "dataset", "==", "'cars'", ":", "\n", "        ", "dataset_wids", "=", "cars_WIDS", "\n", "", "elif", "dataset", "==", "'flowers'", ":", "\n", "        ", "dataset_wids", "=", "flowers_WIDS", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n", "", "od_wids", "=", "get_imagenetWID_complement", "(", "dataset_wids", ")", "\n", "\n", "if", "train", "==", "True", ":", "\n", "        ", "dataset", "=", "ImageNetWIDSubset", "(", "path", ",", "split", "=", "'train'", ",", "wids", "=", "od_wids", ",", "transform", "=", "transform", ")", "\n", "", "else", ":", "\n", "        ", "dataset", "=", "ImageNetWIDSubset", "(", "path", ",", "split", "=", "'val'", ",", "wids", "=", "od_wids", ",", "transform", "=", "transform", ")", "\n", "\n", "", "loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "dataset", ",", "batch_size", "=", "batch_size", ",", "\n", "shuffle", "=", "shuffle", ",", "num_workers", "=", "num_workers", ")", "\n", "\n", "return", "loader", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.datasets.imagenet_subsets.get_ImageNet100OD": [[448, 482], ["utils.datasets.augmentations.imagenet_augmentation.get_imageNet_augmentation", "paths.get_imagenet_path", "imagenet_subsets.get_imagenetWID_complement", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "print", "imagenet_subsets.ImageNetWIDSubset", "imagenet_subsets.ImageNetWIDSubset"], "function", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.augmentations.imagenet_augmentation.get_imageNet_augmentation", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.datasets.paths.get_imagenet_path", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.datasets.imagenet_subsets.get_imagenetWID_complement"], ["", "def", "get_ImageNet100OD", "(", "train", "=", "True", ",", "batch_size", "=", "None", ",", "shuffle", "=", "None", ",", "augm_type", "=", "'none'", ",", "\n", "num_workers", "=", "8", ",", "size", "=", "224", ",", "config_dict", "=", "None", ")", ":", "\n", "    ", "if", "batch_size", "==", "None", ":", "\n", "        ", "if", "train", ":", "\n", "            ", "batch_size", "=", "DEFAULT_TRAIN_BATCHSIZE", "\n", "", "else", ":", "\n", "            ", "batch_size", "=", "DEFAULT_TEST_BATCHSIZE", "\n", "\n", "", "", "augm_config", "=", "{", "}", "\n", "transform", "=", "get_imageNet_augmentation", "(", "type", "=", "augm_type", ",", "out_size", "=", "size", ",", "config_dict", "=", "augm_config", ")", "\n", "if", "not", "train", "and", "augm_type", "!=", "'test'", "and", "augm_type", "!=", "'none'", ":", "\n", "        ", "print", "(", "'Warning: ImageNet test set with ref_data augmentation'", ")", "\n", "\n", "", "if", "shuffle", "is", "None", ":", "\n", "        ", "shuffle", "=", "train", "\n", "\n", "", "path", "=", "get_imagenet_path", "(", ")", "\n", "\n", "od_wids", "=", "get_imagenetWID_complement", "(", "IMAGENET100_WIDS", ")", "\n", "\n", "if", "train", "==", "True", ":", "\n", "        ", "dataset", "=", "ImageNetWIDSubset", "(", "path", ",", "split", "=", "'train'", ",", "wids", "=", "od_wids", ",", "transform", "=", "transform", ")", "\n", "", "else", ":", "\n", "        ", "dataset", "=", "ImageNetWIDSubset", "(", "path", ",", "split", "=", "'val'", ",", "wids", "=", "od_wids", ",", "transform", "=", "transform", ")", "\n", "\n", "", "loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "dataset", ",", "batch_size", "=", "batch_size", ",", "\n", "shuffle", "=", "shuffle", ",", "num_workers", "=", "num_workers", ")", "\n", "\n", "if", "config_dict", "is", "not", "None", ":", "\n", "        ", "config_dict", "[", "'Dataset'", "]", "=", "'ImageNet100OD'", "\n", "config_dict", "[", "'Batch out_size'", "]", "=", "batch_size", "\n", "config_dict", "[", "'Augmentation'", "]", "=", "augm_config", "\n", "\n", "", "return", "loader", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.datasets.imagenet_subsets.get_ImageNetCloseToCifar": [[495, 527], ["utils.datasets.augmentations.imagenet_augmentation.get_imageNet_augmentation", "paths.get_imagenet_path", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "print", "imagenet_subsets.ImageNetWIDSubset", "imagenet_subsets.ImageNetWIDSubset"], "function", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.augmentations.imagenet_augmentation.get_imageNet_augmentation", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.datasets.paths.get_imagenet_path"], ["def", "get_ImageNetCloseToCifar", "(", "train", "=", "True", ",", "batch_size", "=", "None", ",", "shuffle", "=", "None", ",", "augm_type", "=", "'none'", ",", "\n", "num_workers", "=", "8", ",", "size", "=", "224", ",", "config_dict", "=", "None", ")", ":", "\n", "    ", "if", "batch_size", "==", "None", ":", "\n", "        ", "if", "train", ":", "\n", "            ", "batch_size", "=", "DEFAULT_TRAIN_BATCHSIZE", "\n", "", "else", ":", "\n", "            ", "batch_size", "=", "DEFAULT_TEST_BATCHSIZE", "\n", "\n", "", "", "augm_config", "=", "{", "}", "\n", "transform", "=", "get_imageNet_augmentation", "(", "type", "=", "augm_type", ",", "out_size", "=", "size", ",", "config_dict", "=", "augm_config", ")", "\n", "if", "not", "train", "and", "augm_type", "!=", "'test'", "and", "augm_type", "!=", "'none'", ":", "\n", "        ", "print", "(", "'Warning: ImageNet test set with data augmentation'", ")", "\n", "\n", "", "if", "shuffle", "is", "None", ":", "\n", "        ", "shuffle", "=", "train", "\n", "\n", "", "path", "=", "get_imagenet_path", "(", ")", "\n", "\n", "if", "train", "==", "True", ":", "\n", "        ", "dataset", "=", "ImageNetWIDSubset", "(", "path", ",", "split", "=", "'train'", ",", "wids", "=", "IMAGENETCLOSETODICFAR_WIDS", ",", "transform", "=", "transform", ")", "\n", "", "else", ":", "\n", "        ", "dataset", "=", "ImageNetWIDSubset", "(", "path", ",", "split", "=", "'val'", ",", "wids", "=", "IMAGENETCLOSETODICFAR_WIDS", ",", "transform", "=", "transform", ")", "\n", "\n", "", "loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "dataset", ",", "batch_size", "=", "batch_size", ",", "\n", "shuffle", "=", "shuffle", ",", "num_workers", "=", "num_workers", ")", "\n", "\n", "if", "config_dict", "is", "not", "None", ":", "\n", "        ", "config_dict", "[", "'Dataset'", "]", "=", "'ImageNetCloseToCifar'", "\n", "config_dict", "[", "'Batch out_size'", "]", "=", "batch_size", "\n", "config_dict", "[", "'Augmentation'", "]", "=", "augm_config", "\n", "\n", "", "return", "loader", "\n", "", ""]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.datasets.mnist.MNIST": [[9, 33], ["torchvision.transforms.Compose", "torchvision.transforms.Compose", "torchvision.transforms.RandomChoice", "torchvision.datasets.MNIST", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torchvision.transforms.ToTensor", "torchvision.transforms.RandomCrop"], "function", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.datasets.mnist.MNIST"], ["def", "MNIST", "(", "train", "=", "True", ",", "batch_size", "=", "None", ",", "augm_flag", "=", "True", ",", "shuffle", "=", "None", ")", ":", "\n", "    ", "if", "batch_size", "==", "None", ":", "\n", "        ", "if", "train", ":", "\n", "            ", "batch_size", "=", "DEFAULT_TRAIN_BATCHSIZE", "\n", "", "else", ":", "\n", "            ", "batch_size", "=", "DEFAULT_TEST_BATCHSIZE", "\n", "\n", "", "", "if", "shuffle", "is", "None", ":", "\n", "        ", "shuffle", "=", "train", "\n", "\n", "", "transform_base", "=", "[", "transforms", ".", "ToTensor", "(", ")", "]", "\n", "transform_train", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "RandomCrop", "(", "28", ",", "padding", "=", "2", ")", ",", "\n", "]", "+", "transform_base", ")", "\n", "transform_test", "=", "transforms", ".", "Compose", "(", "transform_base", ")", "\n", "\n", "transform_train", "=", "transforms", ".", "RandomChoice", "(", "[", "transform_train", ",", "transform_test", "]", ")", "\n", "\n", "transform", "=", "transform_train", "if", "(", "augm_flag", "and", "train", ")", "else", "transform_test", "\n", "\n", "dataset", "=", "datasets", ".", "MNIST", "(", "path", ",", "train", "=", "train", ",", "transform", "=", "transform", ")", "\n", "loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "dataset", ",", "batch_size", "=", "batch_size", ",", "\n", "shuffle", "=", "shuffle", ",", "num_workers", "=", "4", ")", "\n", "return", "loader", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.datasets.mnist.EMNIST": [[34, 59], ["torchvision.transforms.Compose", "torchvision.transforms.Compose", "torchvision.transforms.RandomChoice", "torchvision.datasets.EMNIST", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torchvision.transforms.ToTensor", "pre.Transpose", "torchvision.transforms.RandomCrop"], "function", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.datasets.mnist.EMNIST"], ["", "def", "EMNIST", "(", "train", "=", "False", ",", "batch_size", "=", "None", ",", "augm_flag", "=", "False", ",", "shuffle", "=", "None", ")", ":", "\n", "    ", "if", "batch_size", "==", "None", ":", "\n", "        ", "if", "train", ":", "\n", "            ", "batch_size", "=", "DEFAULT_TRAIN_BATCHSIZE", "\n", "", "else", ":", "\n", "            ", "batch_size", "=", "DEFAULT_TEST_BATCHSIZE", "\n", "\n", "", "", "if", "shuffle", "is", "None", ":", "\n", "        ", "shuffle", "=", "train", "\n", "\n", "", "transform_base", "=", "[", "transforms", ".", "ToTensor", "(", ")", ",", "pre", ".", "Transpose", "(", ")", "]", "#EMNIST is rotated 90 degrees from MNIST", "\n", "transform_train", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "RandomCrop", "(", "28", ",", "padding", "=", "4", ")", ",", "\n", "]", "+", "transform_base", ")", "\n", "transform_test", "=", "transforms", ".", "Compose", "(", "transform_base", ")", "\n", "\n", "transform_train", "=", "transforms", ".", "RandomChoice", "(", "[", "transform_train", ",", "transform_test", "]", ")", "\n", "\n", "transform", "=", "transform_train", "if", "(", "augm_flag", "and", "train", ")", "else", "transform_test", "\n", "\n", "dataset", "=", "datasets", ".", "EMNIST", "(", "path", ",", "split", "=", "'letters'", ",", "\n", "train", "=", "train", ",", "transform", "=", "transform", ")", "\n", "loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "dataset", ",", "batch_size", "=", "batch_size", ",", "\n", "shuffle", "=", "shuffle", ",", "num_workers", "=", "1", ")", "\n", "return", "loader", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.datasets.mnist.FMNIST": [[61, 85], ["torchvision.transforms.Compose", "torchvision.transforms.Compose", "torchvision.transforms.RandomChoice", "torchvision.datasets.FashionMNIST", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torchvision.transforms.ToTensor", "torchvision.transforms.RandomCrop"], "function", ["None"], ["", "def", "FMNIST", "(", "train", "=", "False", ",", "batch_size", "=", "None", ",", "augm_flag", "=", "False", ",", "shuffle", "=", "None", ")", ":", "\n", "    ", "if", "batch_size", "==", "None", ":", "\n", "        ", "if", "train", ":", "\n", "            ", "batch_size", "=", "DEFAULT_TRAIN_BATCHSIZE", "\n", "", "else", ":", "\n", "            ", "batch_size", "=", "DEFAULT_TEST_BATCHSIZE", "\n", "\n", "", "", "if", "shuffle", "is", "None", ":", "\n", "        ", "shuffle", "=", "train", "\n", "\n", "", "transform_base", "=", "[", "transforms", ".", "ToTensor", "(", ")", "]", "\n", "transform_train", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "RandomCrop", "(", "28", ",", "padding", "=", "2", ")", ",", "\n", "]", "+", "transform_base", ")", "\n", "transform_test", "=", "transforms", ".", "Compose", "(", "transform_base", ")", "\n", "\n", "transform_train", "=", "transforms", ".", "RandomChoice", "(", "[", "transform_train", ",", "transform_test", "]", ")", "\n", "\n", "transform", "=", "transform_train", "if", "(", "augm_flag", "and", "train", ")", "else", "transform_test", "\n", "\n", "dataset", "=", "datasets", ".", "FashionMNIST", "(", "path", ",", "train", "=", "train", ",", "transform", "=", "transform", ")", "\n", "loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "dataset", ",", "batch_size", "=", "batch_size", ",", "\n", "shuffle", "=", "shuffle", ",", "num_workers", "=", "1", ")", "\n", "return", "loader", "\n", "", ""]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.datasets.preproc.Transpose.__init__": [[9, 11], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "", "def", "__call__", "(", "self", ",", "data", ")", ":", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.datasets.preproc.Transpose.__call__": [[11, 13], ["data.transpose"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "data", ")", ":", "\n", "        ", "return", "data", ".", "transpose", "(", "-", "1", ",", "-", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.datasets.preproc.Gray.__init__": [[16, 18], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "", "def", "__call__", "(", "self", ",", "data", ")", ":", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.datasets.preproc.Gray.__call__": [[18, 20], ["data.mean"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "data", ")", ":", "\n", "        ", "return", "data", ".", "mean", "(", "-", "3", ",", "keepdim", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.datasets.preproc.PermutationNoise.__init__": [[23, 25], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "", "def", "__call__", "(", "self", ",", "data", ")", ":", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.datasets.preproc.PermutationNoise.__call__": [[25, 32], ["enumerate", "torch.tensor", "[].view", "numpy.random.permutation", "numpy.prod", "x.view", "numpy.prod"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "data", ")", ":", "\n", "        ", "shape", "=", "data", ".", "shape", "\n", "new_data", "=", "0", "*", "data", "\n", "idx", "=", "[", "torch", ".", "tensor", "(", "np", ".", "random", ".", "permutation", "(", "np", ".", "prod", "(", "shape", "[", "-", "2", ":", "]", ")", ")", ")", "]", "\n", "for", "i", ",", "x", "in", "enumerate", "(", "data", ")", ":", "\n", "            ", "new_data", "[", "i", "]", "=", "(", "x", ".", "view", "(", "np", ".", "prod", "(", "shape", "[", "-", "2", ":", "]", ")", ")", "[", "idx", "]", ")", ".", "view", "(", "shape", "[", "-", "2", ":", "]", ")", "\n", "", "return", "new_data", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.datasets.preproc.GaussianFilter.__init__": [[35, 37], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "", "def", "__call__", "(", "self", ",", "data", ")", ":", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.datasets.preproc.GaussianFilter.__call__": [[37, 40], ["torch.tensor", "scipy.gaussian_filter", "torch.rand().item", "torch.rand"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "data", ")", ":", "\n", "        ", "sigma", "=", "1.", "+", "1.5", "*", "torch", ".", "rand", "(", "1", ")", ".", "item", "(", ")", "\n", "return", "torch", ".", "tensor", "(", "filters", ".", "gaussian_filter", "(", "data", ",", "sigma", ",", "mode", "=", "'reflect'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.datasets.preproc.ContrastRescaling.__init__": [[43, 45], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "", "def", "__call__", "(", "self", ",", "data", ")", ":", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.datasets.preproc.ContrastRescaling.__call__": [[45, 48], ["torch.sigmoid", "torch.rand().item", "torch.rand"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "data", ")", ":", "\n", "        ", "gamma", "=", "5", "+", "25.", "*", "torch", ".", "rand", "(", "1", ")", ".", "item", "(", ")", "\n", "return", "torch", ".", "sigmoid", "(", "gamma", "*", "(", "data", "-", ".5", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.datasets.preproc.AdversarialNoise.__init__": [[51, 56], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "model", ",", "device", ",", "epsilon", "=", "0.3", ")", ":", "\n", "        ", "self", ".", "model", "=", "model", "\n", "self", ".", "pretransform", "=", "dl", ".", "noise_transform", "\n", "self", ".", "device", "=", "device", "\n", "self", ".", "epsilon", "=", "epsilon", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.datasets.preproc.AdversarialNoise.__call__": [[57, 63], ["tt.generate_adv_noise", "tt.generate_adv_noise.squeeze", "data.unsqueeze"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "data", ")", ":", "\n", "        ", "perturbed", "=", "tt", ".", "generate_adv_noise", "(", "self", ".", "model", ",", "self", ".", "epsilon", ",", "\n", "device", "=", "self", ".", "device", ",", "batch_size", "=", "1", ",", "\n", "norm", "=", "20", ",", "num_of_it", "=", "40", ",", "\n", "alpha", "=", "0.01", ",", "seed_images", "=", "data", ".", "unsqueeze", "(", "0", ")", ")", "\n", "return", "perturbed", ".", "squeeze", "(", "0", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.datasets.imagenet.get_imagenet_labels": [[12, 20], ["paths.get_imagenet_path", "torchvision.datasets.ImageNet", "labels.append"], "function", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.datasets.paths.get_imagenet_path"], ["def", "get_imagenet_labels", "(", ")", ":", "\n", "    ", "path", "=", "get_imagenet_path", "(", ")", "\n", "dataset", "=", "datasets", ".", "ImageNet", "(", "path", ",", "split", "=", "'val'", ",", "transform", "=", "'none'", ")", "\n", "classes_extended", "=", "dataset", ".", "classes", "\n", "labels", "=", "[", "]", "\n", "for", "a", "in", "classes_extended", ":", "\n", "        ", "labels", ".", "append", "(", "a", "[", "0", "]", ")", "\n", "", "return", "labels", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.datasets.imagenet.get_imagenet_label_wid_pairs": [[21, 31], ["paths.get_imagenet_path", "torchvision.datasets.ImageNet", "zip", "label_wid_pairs.append"], "function", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.datasets.paths.get_imagenet_path"], ["", "def", "get_imagenet_label_wid_pairs", "(", ")", ":", "\n", "    ", "path", "=", "get_imagenet_path", "(", ")", "\n", "dataset", "=", "datasets", ".", "ImageNet", "(", "path", ",", "split", "=", "'val'", ",", "transform", "=", "'none'", ")", "\n", "classes_extended", "=", "dataset", ".", "classes", "\n", "wids", "=", "dataset", ".", "wnids", "\n", "\n", "label_wid_pairs", "=", "[", "]", "\n", "for", "a", ",", "b", "in", "zip", "(", "classes_extended", ",", "wids", ")", ":", "\n", "        ", "label_wid_pairs", ".", "append", "(", "(", "a", "[", "0", "]", ",", "b", ")", ")", "\n", "", "return", "label_wid_pairs", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.datasets.imagenet.get_ImageNet": [[32, 63], ["utils.datasets.augmentations.imagenet_augmentation.get_imageNet_augmentation", "paths.get_imagenet_path", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "print", "torchvision.datasets.ImageNet", "torchvision.datasets.ImageNet"], "function", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.augmentations.imagenet_augmentation.get_imageNet_augmentation", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.datasets.paths.get_imagenet_path"], ["", "def", "get_ImageNet", "(", "train", "=", "True", ",", "batch_size", "=", "None", ",", "shuffle", "=", "None", ",", "augm_type", "=", "'test'", ",", "num_workers", "=", "8", ",", "size", "=", "224", ",", "config_dict", "=", "None", ")", ":", "\n", "    ", "if", "batch_size", "==", "None", ":", "\n", "        ", "if", "train", ":", "\n", "            ", "batch_size", "=", "DEFAULT_TRAIN_BATCHSIZE", "\n", "", "else", ":", "\n", "            ", "batch_size", "=", "DEFAULT_TEST_BATCHSIZE", "\n", "\n", "", "", "augm_config", "=", "{", "}", "\n", "transform", "=", "get_imageNet_augmentation", "(", "type", "=", "augm_type", ",", "out_size", "=", "size", ",", "config_dict", "=", "augm_config", ")", "\n", "if", "not", "train", "and", "augm_type", "!=", "'none'", ":", "\n", "        ", "print", "(", "'Warning: ImageNet test set with ref_data augmentation'", ")", "\n", "\n", "", "if", "shuffle", "is", "None", ":", "\n", "        ", "shuffle", "=", "train", "\n", "\n", "", "path", "=", "get_imagenet_path", "(", ")", "\n", "\n", "if", "train", "==", "True", ":", "\n", "        ", "dataset", "=", "datasets", ".", "ImageNet", "(", "path", ",", "split", "=", "'train'", ",", "transform", "=", "transform", ")", "\n", "", "else", ":", "\n", "        ", "dataset", "=", "datasets", ".", "ImageNet", "(", "path", ",", "split", "=", "'val'", ",", "transform", "=", "transform", ")", "\n", "\n", "", "loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "dataset", ",", "batch_size", "=", "batch_size", ",", "\n", "shuffle", "=", "shuffle", ",", "num_workers", "=", "num_workers", ")", "\n", "\n", "if", "config_dict", "is", "not", "None", ":", "\n", "        ", "config_dict", "[", "'Dataset'", "]", "=", "'ImageNet'", "\n", "config_dict", "[", "'Batch out_size'", "]", "=", "batch_size", "\n", "config_dict", "[", "'Augmentation'", "]", "=", "augm_config", "\n", "\n", "", "return", "loader", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.datasets.lsun.get_LSUN_CR": [[15, 31], ["torchvision.transforms.Compose", "paths.get_base_data_dir", "torchvision.datasets.LSUN", "torch.utils.data.DataLoader", "ValueError", "torchvision.transforms.Resize", "torchvision.transforms.ToTensor"], "function", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.datasets.paths.get_base_data_dir"], ["def", "get_LSUN_CR", "(", "train", "=", "False", ",", "batch_size", "=", "None", ",", "size", "=", "32", ")", ":", "\n", "    ", "if", "train", ":", "\n", "        ", "ValueError", "(", "'Warning: Training set for LSUN not available'", ")", "\n", "", "if", "batch_size", "is", "None", ":", "\n", "        ", "batch_size", "=", "DEFAULT_TEST_BATCHSIZE", "\n", "\n", "", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "Resize", "(", "size", "=", "(", "size", ",", "size", ")", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", "\n", "]", ")", "\n", "path", "=", "get_base_data_dir", "(", ")", "\n", "data_dir", "=", "path", "+", "'/LSUN'", "\n", "dataset", "=", "datasets", ".", "LSUN", "(", "data_dir", ",", "classes", "=", "[", "'classroom_val'", "]", ",", "transform", "=", "transform", ")", "\n", "loader", "=", "DataLoader", "(", "dataset", ",", "batch_size", "=", "batch_size", ",", "\n", "shuffle", "=", "False", ",", "num_workers", "=", "4", ")", "\n", "return", "loader", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.datasets.lsun.get_LSUN_scenes": [[32, 66], ["paths.get_LSUN_scenes_path", "torchvision.datasets.LSUN", "utils.datasets.augmentations.imagenet_augmentation.get_imageNet_augmentation", "torch.utils.data.DataLoader", "len", "torch.zeros", "torch.zeros", "range", "idcs.view().numpy.view().numpy", "torch.utils.data.SubsetRandomSampler", "torch.utils.data.DataLoader", "NotImplementedError", "utils.datasets.augmentations.cifar_augmentation.get_cifar10_augmentation", "NotImplementedError", "torch.arange", "torch.arange", "idcs.view().numpy.view"], "function", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.datasets.paths.get_LSUN_scenes_path", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.augmentations.imagenet_augmentation.get_imageNet_augmentation", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.augmentations.cifar_augmentation.get_cifar10_augmentation"], ["", "def", "get_LSUN_scenes", "(", "split", "=", "'train'", ",", "samples_per_class", "=", "None", ",", "batch_size", "=", "None", ",", "shuffle", "=", "None", ",", "augm_type", "=", "'none'", ",", "\n", "augm_class", "=", "'imagenet'", ",", "num_workers", "=", "8", ",", "size", "=", "224", ",", "config_dict", "=", "None", ")", ":", "\n", "    ", "if", "batch_size", "is", "None", ":", "\n", "        ", "batch_size", "=", "DEFAULT_TEST_BATCHSIZE", "\n", "\n", "", "augm_config", "=", "{", "}", "\n", "\n", "if", "augm_class", "==", "'imagenet'", ":", "\n", "        ", "transform", "=", "get_imageNet_augmentation", "(", "type", "=", "augm_type", ",", "out_size", "=", "size", ",", "config_dict", "=", "augm_config", ")", "\n", "", "elif", "augm_class", "==", "'cifar'", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "transform", "=", "get_cifar10_augmentation", "(", "type", "=", "augm_type", ",", "out_size", "=", "size", ",", "in_size", "=", "224", ",", "config_dict", "=", "augm_config", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "", "path", "=", "get_LSUN_scenes_path", "(", ")", "\n", "dataset", "=", "datasets", ".", "LSUN", "(", "path", ",", "classes", "=", "split", ",", "transform", "=", "transform", ")", "\n", "\n", "if", "samples_per_class", "is", "None", ":", "\n", "        ", "loader", "=", "DataLoader", "(", "dataset", ",", "batch_size", "=", "batch_size", ",", "\n", "shuffle", "=", "shuffle", ",", "num_workers", "=", "num_workers", ")", "\n", "\n", "", "else", ":", "\n", "        ", "num_classes", "=", "len", "(", "dataset", ".", "dbs", ")", "\n", "idcs", "=", "torch", ".", "zeros", "(", "num_classes", ",", "samples_per_class", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "start_idx", "=", "0", "\n", "for", "i", "in", "range", "(", "num_classes", ")", ":", "\n", "            ", "idcs", "[", "i", ",", ":", "]", "=", "torch", ".", "arange", "(", "start_idx", ",", "start_idx", "+", "samples_per_class", ")", "\n", "start_idx", "=", "dataset", ".", "indices", "[", "i", "]", "\n", "", "idcs", "=", "idcs", ".", "view", "(", "-", "1", ")", ".", "numpy", "(", ")", "\n", "sampler", "=", "SubsetRandomSampler", "(", "idcs", ")", "\n", "loader", "=", "DataLoader", "(", "dataset", ",", "batch_size", "=", "batch_size", ",", "sampler", "=", "sampler", ",", "\n", "num_workers", "=", "num_workers", ")", "\n", "\n", "", "return", "loader", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.datasets.lsun.get_LSUN_scenes_labels": [[68, 72], ["None"], "function", ["None"], ["", "def", "get_LSUN_scenes_labels", "(", ")", ":", "\n", "    ", "return", "[", "'bedroom'", ",", "'bridge'", ",", "'church_outdoor'", ",", "'classroom'", ",", "\n", "'conference_room'", ",", "'dining_room'", ",", "'kitchen'", ",", "\n", "'living_room'", ",", "'restaurant'", ",", "'tower'", "]", "\n", "", ""]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.datasets.semisupervised_dataset.SemiSupervisedDataset.__init__": [[70, 182], ["paths.get_CIFAR10_path", "torchvision.datasets.CIFAR10", "list", "logging.getLogger", "logging.getLogger.info", "logging.getLogger.info", "logging.getLogger.info", "logging.getLogger.info", "logging.getLogger.info", "logging.getLogger.info", "list", "logging.getLogger", "logging.getLogger.info", "logging.getLogger.info", "logging.getLogger.info", "logging.getLogger.info", "paths.get_svhn_path", "list", "ValueError", "numpy.random.get_state", "numpy.random.seed", "numpy.random.choice", "numpy.random.set_state", "logging.getLogger", "logging.getLogger.info", "range", "os.path.join", "print", "len", "numpy.concatenate", "semisupervised_dataset.SemiSupervisedDataset.unsup_indices.extend", "len", "len", "len", "tuple", "numpy.shape", "range", "len", "tuple", "numpy.shape", "torchvision.datasets.SVHN", "torchvision.datasets.SVHN", "torchvision.datasets.SVHN", "numpy.concatenate", "semisupervised_dataset.SemiSupervisedDataset.targets.extend", "len", "len", "len", "open", "pickle.load", "numpy.random.get_state", "numpy.random.seed", "numpy.random.choice", "numpy.random.set_state", "logging.getLogger", "logging.getLogger.info", "semisupervised_dataset.SemiSupervisedDataset.targets.extend", "semisupervised_dataset.SemiSupervisedDataset.targets.extend", "range", "zip", "len", "zip", "len", "len", "len", "len", "numpy.unique", "numpy.unique"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.datasets.paths.get_CIFAR10_path", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.datasets.paths.get_svhn_path"], ["    ", "def", "__init__", "(", "self", ",", "\n", "base_dataset", "=", "'cifar10'", ",", "\n", "take_amount", "=", "None", ",", "\n", "take_amount_seed", "=", "13", ",", "\n", "add_svhn_extra", "=", "False", ",", "\n", "aux_data_filename", "=", "None", ",", "\n", "add_aux_labels", "=", "False", ",", "\n", "aux_take_amount", "=", "None", ",", "\n", "train", "=", "False", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"A dataset with auxiliary pseudo-labeled data\"\"\"", "\n", "\n", "if", "base_dataset", "==", "'cifar10'", ":", "\n", "            ", "cifar10_path", "=", "get_CIFAR10_path", "(", ")", "\n", "self", ".", "dataset", "=", "CIFAR10", "(", "root", "=", "cifar10_path", ",", "train", "=", "train", ",", "transform", "=", "kwargs", "[", "'transform'", "]", ")", "\n", "", "elif", "base_dataset", "==", "'svhn'", ":", "\n", "            ", "svhn_path", "=", "get_svhn_path", "(", ")", "\n", "if", "train", ":", "\n", "                ", "self", ".", "dataset", "=", "SVHN", "(", "root", "=", "svhn_path", ",", "split", "=", "'train'", ",", "transform", "=", "kwargs", "[", "'transform'", "]", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "dataset", "=", "SVHN", "(", "root", "=", "svhn_path", ",", "split", "=", "'test'", ",", "transform", "=", "kwargs", "[", "'transform'", "]", ")", "\n", "# because torchvision is annoying", "\n", "", "self", ".", "dataset", ".", "targets", "=", "self", ".", "dataset", ".", "labels", "\n", "self", ".", "targets", "=", "list", "(", "self", ".", "targets", ")", "\n", "\n", "if", "train", "and", "add_svhn_extra", ":", "\n", "                ", "svhn_extra", "=", "SVHN", "(", "root", "=", "svhn_path", ",", "split", "=", "'extra'", ",", "transform", "=", "kwargs", "[", "'transform'", "]", ")", "\n", "self", ".", "data", "=", "np", ".", "concatenate", "(", "[", "self", ".", "data", ",", "svhn_extra", ".", "data", "]", ")", "\n", "self", ".", "targets", ".", "extend", "(", "svhn_extra", ".", "labels", ")", "\n", "", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'Dataset %s not supported'", "%", "base_dataset", ")", "\n", "", "self", ".", "base_dataset", "=", "base_dataset", "\n", "self", ".", "train", "=", "train", "\n", "\n", "if", "self", ".", "train", ":", "\n", "            ", "if", "take_amount", "is", "not", "None", ":", "\n", "                ", "rng_state", "=", "np", ".", "random", ".", "get_state", "(", ")", "\n", "np", ".", "random", ".", "seed", "(", "take_amount_seed", ")", "\n", "take_inds", "=", "np", ".", "random", ".", "choice", "(", "len", "(", "self", ".", "sup_indices", ")", ",", "\n", "take_amount", ",", "replace", "=", "False", ")", "\n", "np", ".", "random", ".", "set_state", "(", "rng_state", ")", "\n", "\n", "logger", "=", "logging", ".", "getLogger", "(", ")", "\n", "logger", ".", "info", "(", "'Randomly taking only %d/%d examples from training'", "\n", "' set, seed=%d, indices=%s'", ",", "\n", "take_amount", ",", "len", "(", "self", ".", "sup_indices", ")", ",", "\n", "take_amount_seed", ",", "take_inds", ")", "\n", "self", ".", "targets", "=", "self", ".", "targets", "[", "take_inds", "]", "\n", "self", ".", "data", "=", "self", ".", "data", "[", "take_inds", "]", "\n", "\n", "", "self", ".", "sup_indices", "=", "list", "(", "range", "(", "len", "(", "self", ".", "targets", ")", ")", ")", "\n", "self", ".", "unsup_indices", "=", "[", "]", "\n", "\n", "if", "aux_data_filename", "is", "not", "None", ":", "\n", "                ", "aux_path", "=", "os", ".", "path", ".", "join", "(", "kwargs", "[", "'root'", "]", ",", "aux_data_filename", ")", "\n", "print", "(", "\"Loading data from %s\"", "%", "aux_path", ")", "\n", "with", "open", "(", "aux_path", ",", "'rb'", ")", "as", "f", ":", "\n", "                    ", "aux", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "aux_data", "=", "aux", "[", "'data'", "]", "\n", "aux_targets", "=", "aux", "[", "'extrapolated_targets'", "]", "\n", "orig_len", "=", "len", "(", "self", ".", "data", ")", "\n", "\n", "if", "aux_take_amount", "is", "not", "None", ":", "\n", "                    ", "rng_state", "=", "np", ".", "random", ".", "get_state", "(", ")", "\n", "np", ".", "random", ".", "seed", "(", "take_amount_seed", ")", "\n", "take_inds", "=", "np", ".", "random", ".", "choice", "(", "len", "(", "aux_data", ")", ",", "\n", "aux_take_amount", ",", "replace", "=", "False", ")", "\n", "np", ".", "random", ".", "set_state", "(", "rng_state", ")", "\n", "\n", "logger", "=", "logging", ".", "getLogger", "(", ")", "\n", "logger", ".", "info", "(", "\n", "'Randomly taking only %d/%d examples from aux data'", "\n", "' set, seed=%d, indices=%s'", ",", "\n", "aux_take_amount", ",", "len", "(", "aux_data", ")", ",", "\n", "take_amount_seed", ",", "take_inds", ")", "\n", "aux_data", "=", "aux_data", "[", "take_inds", "]", "\n", "aux_targets", "=", "aux_targets", "[", "take_inds", "]", "\n", "\n", "", "self", ".", "data", "=", "np", ".", "concatenate", "(", "(", "self", ".", "data", ",", "aux_data", ")", ",", "axis", "=", "0", ")", "\n", "\n", "if", "not", "add_aux_labels", ":", "\n", "                    ", "self", ".", "targets", ".", "extend", "(", "[", "-", "1", "]", "*", "len", "(", "aux_data", ")", ")", "\n", "", "else", ":", "\n", "                    ", "self", ".", "targets", ".", "extend", "(", "aux_targets", ")", "\n", "# note that we use unsup indices to track the labeled datapoints", "\n", "# whose labels are \"fake\"", "\n", "", "self", ".", "unsup_indices", ".", "extend", "(", "\n", "range", "(", "orig_len", ",", "orig_len", "+", "len", "(", "aux_data", ")", ")", ")", "\n", "\n", "", "logger", "=", "logging", ".", "getLogger", "(", ")", "\n", "logger", ".", "info", "(", "\"Training set\"", ")", "\n", "logger", ".", "info", "(", "\"Number of training samples: %d\"", ",", "len", "(", "self", ".", "targets", ")", ")", "\n", "logger", ".", "info", "(", "\"Number of supervised samples: %d\"", ",", "\n", "len", "(", "self", ".", "sup_indices", ")", ")", "\n", "logger", ".", "info", "(", "\"Number of unsup samples: %d\"", ",", "len", "(", "self", ".", "unsup_indices", ")", ")", "\n", "logger", ".", "info", "(", "\"Label (and pseudo-label) histogram: %s\"", ",", "\n", "tuple", "(", "\n", "zip", "(", "*", "np", ".", "unique", "(", "self", ".", "targets", ",", "return_counts", "=", "True", ")", ")", ")", ")", "\n", "logger", ".", "info", "(", "\"Shape of training data: %s\"", ",", "np", ".", "shape", "(", "self", ".", "data", ")", ")", "\n", "\n", "# Test set", "\n", "", "else", ":", "\n", "            ", "self", ".", "sup_indices", "=", "list", "(", "range", "(", "len", "(", "self", ".", "targets", ")", ")", ")", "\n", "self", ".", "unsup_indices", "=", "[", "]", "\n", "\n", "logger", "=", "logging", ".", "getLogger", "(", ")", "\n", "logger", ".", "info", "(", "\"Test set\"", ")", "\n", "logger", ".", "info", "(", "\"Number of samples: %d\"", ",", "len", "(", "self", ".", "targets", ")", ")", "\n", "logger", ".", "info", "(", "\"Label histogram: %s\"", ",", "\n", "tuple", "(", "\n", "zip", "(", "*", "np", ".", "unique", "(", "self", ".", "targets", ",", "return_counts", "=", "True", ")", ")", ")", ")", "\n", "logger", ".", "info", "(", "\"Shape of data: %s\"", ",", "np", ".", "shape", "(", "self", ".", "data", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.datasets.semisupervised_dataset.SemiSupervisedDataset.data": [[187, 190], ["None"], "methods", ["None"], ["", "@", "data", ".", "setter", "\n", "def", "data", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "dataset", ".", "data", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.datasets.semisupervised_dataset.SemiSupervisedDataset.targets": [[195, 198], ["None"], "methods", ["None"], ["", "@", "targets", ".", "setter", "\n", "def", "targets", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "dataset", ".", "targets", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.datasets.semisupervised_dataset.SemiSupervisedDataset.__len__": [[199, 201], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "dataset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.datasets.semisupervised_dataset.SemiSupervisedDataset.__getitem__": [[202, 205], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "item", ")", ":", "\n", "        ", "self", ".", "dataset", ".", "labels", "=", "self", ".", "targets", "# because torchvision is annoying", "\n", "return", "self", ".", "dataset", "[", "item", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.datasets.semisupervised_dataset.SemiSupervisedDataset.__repr__": [[206, 216], ["semisupervised_dataset.SemiSupervisedDataset.__len__", "semisupervised_dataset.SemiSupervisedDataset.dataset.transform.__repr__().replace", "semisupervised_dataset.SemiSupervisedDataset.dataset.target_transform.__repr__().replace", "semisupervised_dataset.SemiSupervisedDataset.dataset.transform.__repr__", "semisupervised_dataset.SemiSupervisedDataset.dataset.target_transform.__repr__", "len", "len"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.datasets.flowers.Flowers.__len__", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.augmentations.autoaugment.SVHNPolicy.__repr__", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.augmentations.autoaugment.SVHNPolicy.__repr__"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "fmt_str", "=", "'Semisupervised Dataset '", "+", "self", ".", "__class__", ".", "__name__", "+", "'\\n'", "\n", "fmt_str", "+=", "'    Number of datapoints: {}\\n'", ".", "format", "(", "self", ".", "__len__", "(", ")", ")", "\n", "fmt_str", "+=", "'    Training: {}\\n'", ".", "format", "(", "self", ".", "train", ")", "\n", "fmt_str", "+=", "'    Root Location: {}\\n'", ".", "format", "(", "self", ".", "dataset", ".", "root", ")", "\n", "tmp", "=", "'    Transforms (if any): '", "\n", "fmt_str", "+=", "'{0}{1}\\n'", ".", "format", "(", "tmp", ",", "self", ".", "dataset", ".", "transform", ".", "__repr__", "(", ")", ".", "replace", "(", "'\\n'", ",", "'\\n'", "+", "' '", "*", "len", "(", "tmp", ")", ")", ")", "\n", "tmp", "=", "'    Target Transforms (if any): '", "\n", "fmt_str", "+=", "'{0}{1}'", ".", "format", "(", "tmp", ",", "self", ".", "dataset", ".", "target_transform", ".", "__repr__", "(", ")", ".", "replace", "(", "'\\n'", ",", "'\\n'", "+", "' '", "*", "len", "(", "tmp", ")", ")", ")", "\n", "return", "fmt_str", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.datasets.semisupervised_dataset.SemiSupervisedSampler.__init__": [[220, 240], ["int", "torch.utils.data.Sampler.__init__", "int", "numpy.ceil", "len"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models_32x32.shake_pyramidnet.ShakePyramidNet.__init__"], ["def", "__init__", "(", "self", ",", "sup_inds", ",", "unsup_inds", ",", "batch_size", ",", "unsup_fraction", "=", "0.5", ",", "\n", "num_batches", "=", "None", ")", ":", "\n", "        ", "if", "unsup_fraction", "is", "None", "or", "unsup_fraction", "<", "0", ":", "\n", "            ", "self", ".", "sup_inds", "=", "sup_inds", "+", "unsup_inds", "\n", "unsup_fraction", "=", "0.0", "\n", "", "else", ":", "\n", "            ", "self", ".", "sup_inds", "=", "sup_inds", "\n", "self", ".", "unsup_inds", "=", "unsup_inds", "\n", "\n", "", "self", ".", "batch_size", "=", "batch_size", "\n", "unsup_batch_size", "=", "int", "(", "batch_size", "*", "unsup_fraction", ")", "\n", "self", ".", "sup_batch_size", "=", "batch_size", "-", "unsup_batch_size", "\n", "\n", "if", "num_batches", "is", "not", "None", ":", "\n", "            ", "self", ".", "num_batches", "=", "num_batches", "\n", "", "else", ":", "\n", "            ", "self", ".", "num_batches", "=", "int", "(", "\n", "np", ".", "ceil", "(", "len", "(", "self", ".", "sup_inds", ")", "/", "self", ".", "sup_batch_size", ")", ")", "\n", "\n", "", "super", "(", ")", ".", "__init__", "(", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.datasets.semisupervised_dataset.SemiSupervisedSampler.__iter__": [[241, 262], ["range", "len", "numpy.random.shuffle", "torch.randperm", "batch.extend", "len", "torch.randint", "len", "len"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "batch_counter", "=", "0", "\n", "while", "batch_counter", "<", "self", ".", "num_batches", ":", "\n", "            ", "sup_inds_shuffled", "=", "[", "self", ".", "sup_inds", "[", "i", "]", "\n", "for", "i", "in", "torch", ".", "randperm", "(", "len", "(", "self", ".", "sup_inds", ")", ")", "]", "\n", "for", "sup_k", "in", "range", "(", "0", ",", "len", "(", "self", ".", "sup_inds", ")", ",", "self", ".", "sup_batch_size", ")", ":", "\n", "                ", "if", "batch_counter", "==", "self", ".", "num_batches", ":", "\n", "                    ", "break", "\n", "", "batch", "=", "sup_inds_shuffled", "[", "sup_k", ":", "(", "sup_k", "+", "self", ".", "sup_batch_size", ")", "]", "\n", "if", "self", ".", "sup_batch_size", "<", "self", ".", "batch_size", ":", "\n", "                    ", "batch", ".", "extend", "(", "[", "self", ".", "unsup_inds", "[", "i", "]", "for", "i", "in", "\n", "torch", ".", "randint", "(", "high", "=", "len", "(", "self", ".", "unsup_inds", ")", ",", "\n", "size", "=", "(", "\n", "self", ".", "batch_size", "-", "len", "(", "\n", "batch", ")", ",", ")", ",", "\n", "dtype", "=", "torch", ".", "int64", ")", "]", ")", "\n", "# this shuffle operation is very important, without it", "\n", "# batch-norm / DataParallel hell ensues", "\n", "", "np", ".", "random", ".", "shuffle", "(", "batch", ")", "\n", "yield", "batch", "\n", "batch_counter", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.datasets.semisupervised_dataset.SemiSupervisedSampler.__len__": [[263, 265], ["None"], "methods", ["None"], ["", "", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "num_batches", "", "", "", ""]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.datasets.semisupervised_dataset.get_CIFAR10_ti_500k": [[23, 60], ["utils.datasets.augmentations.cifar_augmentation.get_cifar10_augmentation", "paths.get_base_data_dir", "semisupervised_dataset.SemiSupervisedDataset", "semisupervised_dataset.SemiSupervisedSampler", "torch.utils.data.DataLoader", "int", "numpy.ceil"], "function", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.augmentations.cifar_augmentation.get_cifar10_augmentation", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.datasets.paths.get_base_data_dir"], ["def", "get_CIFAR10_ti_500k", "(", "train", "=", "True", ",", "batch_size", "=", "None", ",", "augm_type", "=", "'default'", ",", "fraction", "=", "0.5", ",", "size", "=", "32", ",", "config_dict", "=", "None", ")", ":", "\n", "    ", "if", "batch_size", "==", "None", ":", "\n", "        ", "if", "train", ":", "\n", "            ", "batch_size", "=", "DEFAULT_TRAIN_BATCHSIZE", "\n", "", "else", ":", "\n", "            ", "batch_size", "=", "DEFAULT_TEST_BATCHSIZE", "\n", "\n", "", "", "augm_config", "=", "{", "}", "\n", "transform", "=", "get_cifar10_augmentation", "(", "type", "=", "augm_type", ",", "out_size", "=", "size", ",", "config_dict", "=", "augm_config", ")", "\n", "\n", "root", "=", "get_base_data_dir", "(", ")", "\n", "trainset", "=", "SemiSupervisedDataset", "(", "base_dataset", "=", "'cifar10'", ",", "\n", "add_svhn_extra", "=", "False", ",", "\n", "root", "=", "root", ",", "train", "=", "True", ",", "\n", "download", "=", "True", ",", "transform", "=", "transform", ",", "\n", "aux_data_filename", "=", "'cifar10_ti_500k/ti_500K_pseudo_labeled.pickle'", ",", "\n", "add_aux_labels", "=", "True", ",", "\n", "aux_take_amount", "=", "None", ")", "\n", "\n", "# num_batches=50000 enforces the definition of an \"epoch\" as passing through 50K", "\n", "# datapoints", "\n", "# TODO: make sure that this code works also when trainset.unsup_indices=[]", "\n", "train_batch_sampler", "=", "SemiSupervisedSampler", "(", "\n", "trainset", ".", "sup_indices", ",", "trainset", ".", "unsup_indices", ",", "\n", "batch_size", ",", "fraction", ",", "\n", "num_batches", "=", "int", "(", "np", ".", "ceil", "(", "50000", "/", "batch_size", ")", ")", ")", "\n", "\n", "kwargs", "=", "{", "'num_workers'", ":", "1", ",", "'pin_memory'", ":", "True", "}", "\n", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "trainset", ",", "batch_sampler", "=", "train_batch_sampler", ",", "**", "kwargs", ")", "\n", "\n", "if", "config_dict", "is", "not", "None", ":", "\n", "        ", "config_dict", "[", "'Dataset'", "]", "=", "'UnlabeledDataCifar10'", "\n", "config_dict", "[", "'Batch out_size'", "]", "=", "batch_size", "\n", "config_dict", "[", "'fraction'", "]", "=", "fraction", "\n", "config_dict", "[", "'Augmentation'", "]", "=", "augm_config", "\n", "\n", "", "return", "train_loader", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.datasets.fgvc_aircraft.FGVCAircraft.__init__": [[79, 108], ["os.path.expanduser", "os.path.join", "fgvc_aircraft.find_classes", "fgvc_aircraft.make_dataset", "ValueError", "ValueError", "fgvc_aircraft.FGVCAircraft.download"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.datasets.fgvc_aircraft.find_classes", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.datasets.fgvc_aircraft.make_dataset", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.datasets.fgvc_aircraft.FGVCAircraft.download"], ["def", "__init__", "(", "self", ",", "root", ",", "class_type", "=", "'variant'", ",", "split", "=", "'train'", ",", "transform", "=", "None", ",", "\n", "target_transform", "=", "None", ",", "loader", "=", "default_loader", ",", "download", "=", "False", ")", ":", "\n", "        ", "if", "split", "not", "in", "self", ".", "splits", ":", "\n", "            ", "raise", "ValueError", "(", "'Split \"{}\" not found. Valid splits are: {}'", ".", "format", "(", "\n", "split", ",", "', '", ".", "join", "(", "self", ".", "splits", ")", ",", "\n", ")", ")", "\n", "", "if", "class_type", "not", "in", "self", ".", "class_types", ":", "\n", "            ", "raise", "ValueError", "(", "'Class type \"{}\" not found. Valid class types are: {}'", ".", "format", "(", "\n", "class_type", ",", "', '", ".", "join", "(", "self", ".", "class_types", ")", ",", "\n", ")", ")", "\n", "", "self", ".", "root", "=", "os", ".", "path", ".", "expanduser", "(", "root", ")", "\n", "self", ".", "class_type", "=", "class_type", "\n", "self", ".", "split", "=", "split", "\n", "self", ".", "classes_file", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "'data'", ",", "\n", "'images_%s_%s.txt'", "%", "(", "self", ".", "class_type", ",", "self", ".", "split", ")", ")", "\n", "\n", "if", "download", ":", "\n", "            ", "self", ".", "download", "(", ")", "\n", "\n", "", "(", "image_ids", ",", "targets", ",", "classes", ",", "class_to_idx", ")", "=", "find_classes", "(", "self", ".", "classes_file", ")", "\n", "samples", "=", "make_dataset", "(", "self", ".", "root", ",", "image_ids", ",", "targets", ")", "\n", "\n", "self", ".", "transform", "=", "transform", "\n", "self", ".", "target_transform", "=", "target_transform", "\n", "self", ".", "loader", "=", "loader", "\n", "\n", "self", ".", "samples", "=", "samples", "\n", "self", ".", "classes", "=", "classes", "\n", "self", ".", "class_to_idx", "=", "class_to_idx", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.datasets.fgvc_aircraft.FGVCAircraft.__getitem__": [[109, 125], ["fgvc_aircraft.FGVCAircraft.loader", "fgvc_aircraft.FGVCAircraft.transform", "fgvc_aircraft.FGVCAircraft.target_transform"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            index (int): Index\n        Returns:\n            tuple: (sample, target) where target is class_index of the target class.\n        \"\"\"", "\n", "\n", "path", ",", "target", "=", "self", ".", "samples", "[", "index", "]", "\n", "sample", "=", "self", ".", "loader", "(", "path", ")", "\n", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "sample", "=", "self", ".", "transform", "(", "sample", ")", "\n", "", "if", "self", ".", "target_transform", "is", "not", "None", ":", "\n", "            ", "target", "=", "self", ".", "target_transform", "(", "target", ")", "\n", "\n", "", "return", "sample", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.datasets.fgvc_aircraft.FGVCAircraft.__len__": [[126, 128], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "samples", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.datasets.fgvc_aircraft.FGVCAircraft.__repr__": [[129, 138], ["fgvc_aircraft.FGVCAircraft.__len__", "fgvc_aircraft.FGVCAircraft.transform.__repr__().replace", "fgvc_aircraft.FGVCAircraft.target_transform.__repr__().replace", "fgvc_aircraft.FGVCAircraft.transform.__repr__", "fgvc_aircraft.FGVCAircraft.target_transform.__repr__", "len", "len"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.datasets.flowers.Flowers.__len__", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.augmentations.autoaugment.SVHNPolicy.__repr__", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.augmentations.autoaugment.SVHNPolicy.__repr__"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "fmt_str", "=", "'Dataset '", "+", "self", ".", "__class__", ".", "__name__", "+", "'\\n'", "\n", "fmt_str", "+=", "'    Number of datapoints: {}\\n'", ".", "format", "(", "self", ".", "__len__", "(", ")", ")", "\n", "fmt_str", "+=", "'    Root Location: {}\\n'", ".", "format", "(", "self", ".", "root", ")", "\n", "tmp", "=", "'    Transforms (if any): '", "\n", "fmt_str", "+=", "'{0}{1}\\n'", ".", "format", "(", "tmp", ",", "self", ".", "transform", ".", "__repr__", "(", ")", ".", "replace", "(", "'\\n'", ",", "'\\n'", "+", "' '", "*", "len", "(", "tmp", ")", ")", ")", "\n", "tmp", "=", "'    Target Transforms (if any): '", "\n", "fmt_str", "+=", "'{0}{1}'", ".", "format", "(", "tmp", ",", "self", ".", "target_transform", ".", "__repr__", "(", ")", ".", "replace", "(", "'\\n'", ",", "'\\n'", "+", "' '", "*", "len", "(", "tmp", ")", ")", ")", "\n", "return", "fmt_str", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.datasets.fgvc_aircraft.FGVCAircraft._check_exists": [[139, 142], ["os.path.exists", "os.path.exists", "os.path.join"], "methods", ["None"], ["", "def", "_check_exists", "(", "self", ")", ":", "\n", "        ", "return", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "'ref_data'", ",", "'images'", ")", ")", "and", "os", ".", "path", ".", "exists", "(", "self", ".", "classes_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.datasets.fgvc_aircraft.FGVCAircraft.download": [[143, 178], ["fgvc_aircraft.FGVCAircraft._check_exists", "print", "os.path.abspath", "os.path.join", "urllib.request.urlopen", "os.path.join.strip", "print", "tarfile.open", "tarfile.open.extractall", "print", "os.remove", "print", "os.path.join", "fgvc_aircraft.FGVCAircraft.url.rpartition", "open", "f.write", "os.path.samefile", "print", "os.rename", "urllib.request.urlopen.read"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.datasets.fgvc_aircraft.FGVCAircraft._check_exists"], ["", "def", "download", "(", "self", ")", ":", "\n", "        ", "\"\"\"Download the FGVC-Aircraft ref_data if it doesn't exist already.\"\"\"", "\n", "from", "six", ".", "moves", "import", "urllib", "\n", "import", "tarfile", "\n", "\n", "if", "self", ".", "_check_exists", "(", ")", ":", "\n", "            ", "return", "\n", "\n", "# prepare to download ref_data to PARENT_DIR/fgvc-aircraft-2013.tar.gz", "\n", "", "print", "(", "'Downloading %s ... (may take a few minutes)'", "%", "self", ".", "url", ")", "\n", "parent_dir", "=", "os", ".", "path", ".", "abspath", "(", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "os", ".", "pardir", ")", ")", "\n", "tar_name", "=", "self", ".", "url", ".", "rpartition", "(", "'/'", ")", "[", "-", "1", "]", "\n", "tar_path", "=", "os", ".", "path", ".", "join", "(", "parent_dir", ",", "tar_name", ")", "\n", "data", "=", "urllib", ".", "request", ".", "urlopen", "(", "self", ".", "url", ")", "\n", "\n", "# download .tar.gz file", "\n", "with", "open", "(", "tar_path", ",", "'wb'", ")", "as", "f", ":", "\n", "            ", "f", ".", "write", "(", "data", ".", "read", "(", ")", ")", "\n", "\n", "# extract .tar.gz to PARENT_DIR/fgvc-aircraft-2013b", "\n", "", "data_folder", "=", "tar_path", ".", "strip", "(", "'.tar.gz'", ")", "\n", "print", "(", "'Extracting %s to %s ... (may take a few minutes)'", "%", "(", "tar_path", ",", "data_folder", ")", ")", "\n", "tar", "=", "tarfile", ".", "open", "(", "tar_path", ")", "\n", "tar", ".", "extractall", "(", "parent_dir", ")", "\n", "\n", "# if necessary, rename ref_data folder to self.root", "\n", "if", "not", "os", ".", "path", ".", "samefile", "(", "data_folder", ",", "self", ".", "root", ")", ":", "\n", "            ", "print", "(", "'Renaming %s to %s ...'", "%", "(", "data_folder", ",", "self", ".", "root", ")", ")", "\n", "os", ".", "rename", "(", "data_folder", ",", "self", ".", "root", ")", "\n", "\n", "# delete .tar.gz file", "\n", "", "print", "(", "'Deleting %s ...'", "%", "tar_path", ")", "\n", "os", ".", "remove", "(", "tar_path", ")", "\n", "\n", "print", "(", "'Done!'", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.datasets.fgvc_aircraft.get_fgvc_aircraft_labels": [[13, 16], ["NotImplementedError"], "function", ["None"], ["def", "get_fgvc_aircraft_labels", "(", ")", ":", "\n", "    ", "raise", "NotImplementedError", "(", ")", "\n", "return", "FGVC_AIRCRAFT_LABELS", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.datasets.fgvc_aircraft.get_fgvc_aircraft": [[18, 28], ["utils.datasets.augmentations.imagenet_augmentation.get_imageNet_augmentation", "paths.get_fgvc_aircraft_path", "fgvc_aircraft.FGVCAircraft", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader"], "function", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.augmentations.imagenet_augmentation.get_imageNet_augmentation", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.datasets.paths.get_fgvc_aircraft_path"], ["", "def", "get_fgvc_aircraft", "(", "split", "=", "'train'", ",", "class_type", "=", "'variant'", ",", "batch_size", "=", "128", ",", "shuffle", "=", "True", ",", "augm_type", "=", "'none'", ",", "\n", "size", "=", "224", ",", "num_workers", "=", "8", ")", ":", "\n", "    ", "transform", "=", "get_imageNet_augmentation", "(", "type", "=", "augm_type", ",", "out_size", "=", "size", ")", "\n", "\n", "path", "=", "get_fgvc_aircraft_path", "(", ")", "\n", "dataset", "=", "FGVCAircraft", "(", "path", ",", "class_type", "=", "class_type", ",", "split", "=", "split", ",", "transform", "=", "transform", ")", "\n", "\n", "loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "dataset", ",", "batch_size", "=", "batch_size", ",", "\n", "shuffle", "=", "shuffle", ",", "num_workers", "=", "num_workers", ")", "\n", "return", "loader", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.datasets.fgvc_aircraft.make_dataset": [[30, 39], ["os.path.expanduser", "range", "len", "len", "len", "images.append", "os.path.join"], "function", ["None"], ["", "def", "make_dataset", "(", "dir", ",", "image_ids", ",", "targets", ")", ":", "\n", "    ", "assert", "(", "len", "(", "image_ids", ")", "==", "len", "(", "targets", ")", ")", "\n", "images", "=", "[", "]", "\n", "dir", "=", "os", ".", "path", ".", "expanduser", "(", "dir", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "image_ids", ")", ")", ":", "\n", "        ", "item", "=", "(", "os", ".", "path", ".", "join", "(", "dir", ",", "'data'", ",", "'images'", ",", "\n", "'%s.jpg'", "%", "image_ids", "[", "i", "]", ")", ",", "targets", "[", "i", "]", ")", "\n", "images", ".", "append", "(", "item", ")", "\n", "", "return", "images", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.datasets.fgvc_aircraft.find_classes": [[41, 58], ["open", "open.close", "numpy.unique", "line.split", "image_ids.append", "targets.append", "range", "len"], "function", ["None"], ["", "def", "find_classes", "(", "classes_file", ")", ":", "\n", "# read classes file, separating out image IDs and class names", "\n", "    ", "image_ids", "=", "[", "]", "\n", "targets", "=", "[", "]", "\n", "f", "=", "open", "(", "classes_file", ",", "'r'", ")", "\n", "for", "line", "in", "f", ":", "\n", "        ", "split_line", "=", "line", ".", "split", "(", "' '", ")", "\n", "image_ids", ".", "append", "(", "split_line", "[", "0", "]", ")", "\n", "targets", ".", "append", "(", "' '", ".", "join", "(", "split_line", "[", "1", ":", "]", ")", ")", "\n", "", "f", ".", "close", "(", ")", "\n", "\n", "# index class names", "\n", "classes", "=", "np", ".", "unique", "(", "targets", ")", "\n", "class_to_idx", "=", "{", "classes", "[", "i", "]", ":", "i", "for", "i", "in", "range", "(", "len", "(", "classes", ")", ")", "}", "\n", "targets", "=", "[", "class_to_idx", "[", "c", "]", "for", "c", "in", "targets", "]", "\n", "\n", "return", "(", "image_ids", ",", "targets", ",", "classes", ",", "class_to_idx", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.datasets.tiny_image_net.TinyImageNet.__init__": [[60, 67], ["os.path.join", "torchvision.datasets.ImageFolder.__init__", "print", "len"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models_32x32.shake_pyramidnet.ShakePyramidNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "path", ",", "split", ",", "transform_base", ")", ":", "\n", "        ", "assert", "split", "in", "[", "'train'", ",", "'test'", ",", "'val'", "]", "\n", "\n", "root", "=", "os", ".", "path", ".", "join", "(", "path", ",", "split", ")", "\n", "super", "(", ")", ".", "__init__", "(", "root", ",", "transform", "=", "transform_base", ")", "\n", "\n", "print", "(", "f'TinyImageNet {split} - Length {len(self)}'", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.datasets.tiny_image_net.get_TinyImageNetClassNames": [[13, 30], ["paths.get_tiny_imagenet_path", "open", "enumerate", "fileID.readlines", "str().split", "class_labels.append", "class_labels_cleaned.append", "line_elements[].rstrip", "str", "label.split"], "function", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.datasets.paths.get_tiny_imagenet_path"], ["def", "get_TinyImageNetClassNames", "(", "cleaned", "=", "True", ")", ":", "\n", "    ", "class_labels", "=", "[", "]", "\n", "path", "=", "get_tiny_imagenet_path", "(", ")", "\n", "with", "open", "(", "f'{path}label_clearnames.txt'", ",", "'r'", ")", "as", "fileID", ":", "\n", "        ", "for", "line_idx", ",", "line", "in", "enumerate", "(", "fileID", ".", "readlines", "(", ")", ")", ":", "\n", "            ", "line_elements", "=", "str", "(", "line", ")", ".", "split", "(", "\"\\t\"", ")", "\n", "class_labels", ".", "append", "(", "line_elements", "[", "1", "]", ".", "rstrip", "(", ")", ")", "\n", "\n", "\n", "", "", "if", "cleaned", ":", "\n", "        ", "class_labels_cleaned", "=", "[", "]", "\n", "for", "label", "in", "class_labels", ":", "\n", "            ", "class_labels_cleaned", ".", "append", "(", "label", ".", "split", "(", "','", ")", "[", "0", "]", ")", "\n", "", "", "else", ":", "\n", "        ", "class_labels_cleaned", "=", "class_labels", "\n", "\n", "", "return", "class_labels_cleaned", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.datasets.tiny_image_net.get_TinyImageNet": [[32, 58], ["utils.datasets.augmentations.cifar_augmentation.get_cifar10_augmentation", "paths.get_tiny_imagenet_path", "tiny_image_net.TinyImageNet", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader"], "function", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.augmentations.cifar_augmentation.get_cifar10_augmentation", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.datasets.paths.get_tiny_imagenet_path"], ["", "def", "get_TinyImageNet", "(", "split", ",", "batch_size", "=", "None", ",", "shuffle", "=", "None", ",", "augm_type", "=", "'none'", ",", "cutout_window", "=", "32", ",", "num_workers", "=", "8", ",", "size", "=", "64", ",", "config_dict", "=", "None", ")", ":", "\n", "    ", "if", "batch_size", "==", "None", ":", "\n", "        ", "if", "split", "==", "'train'", ":", "\n", "            ", "batch_size", "=", "DEFAULT_TRAIN_BATCHSIZE", "\n", "", "else", ":", "\n", "            ", "batch_size", "=", "DEFAULT_TEST_BATCHSIZE", "\n", "\n", "", "", "augm_config", "=", "{", "}", "\n", "transform", "=", "get_cifar10_augmentation", "(", "type", "=", "augm_type", ",", "cutout_window", "=", "cutout_window", ",", "out_size", "=", "size", ",", "\n", "in_size", "=", "64", ",", "config_dict", "=", "augm_config", ")", "\n", "\n", "if", "shuffle", "is", "None", ":", "\n", "        ", "shuffle", "=", "True", "if", "split", "==", "'train'", "else", "False", "\n", "\n", "\n", "", "path", "=", "get_tiny_imagenet_path", "(", ")", "\n", "dataset", "=", "TinyImageNet", "(", "path", ",", "split", ",", "transform_base", "=", "transform", ")", "\n", "loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "dataset", ",", "batch_size", "=", "batch_size", ",", "\n", "shuffle", "=", "shuffle", ",", "num_workers", "=", "num_workers", ")", "\n", "\n", "if", "config_dict", "is", "not", "None", ":", "\n", "        ", "config_dict", "[", "'Dataset'", "]", "=", "'TinyImageNet'", "\n", "config_dict", "[", "'Batch size'", "]", "=", "batch_size", "\n", "config_dict", "[", "'Augmentation'", "]", "=", "augm_config", "\n", "\n", "", "return", "loader", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.datasets.noise_datasets.NoiseDataset.__init__": [[32, 55], ["numpy.random.seed", "torchvision.transforms.Compose", "numpy.random.rand().astype", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "NotImplementedError", "torchvision.transforms.ToPILImage", "numpy.random.rand", "numpy.random.randn().astype", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "numpy.random.randn"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "length", ",", "type", ",", "size", ",", "transform", ")", ":", "\n", "        ", "assert", "type", "in", "[", "'uniform'", ",", "'normal'", "]", "\n", "\n", "self", ".", "type", "=", "type", "\n", "self", ".", "size", "=", "size", "\n", "self", ".", "length", "=", "length", "\n", "\n", "np", ".", "random", ".", "seed", "(", "123", ")", "\n", "if", "self", ".", "type", "==", "'uniform'", ":", "\n", "            ", "data_np", "=", "np", ".", "random", ".", "rand", "(", "length", ",", "3", ",", "self", ".", "size", ",", "self", ".", "size", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "self", ".", "data", "=", "torch", ".", "from_numpy", "(", "data_np", ")", "\n", "", "elif", "self", ".", "type", "==", "'normal'", ":", "\n", "            ", "data_np", "=", "0.5", "+", "np", ".", "random", ".", "randn", "(", "length", ",", "3", ",", "self", ".", "size", ",", "self", ".", "size", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "self", ".", "data", "=", "torch", ".", "clamp", "(", "torch", ".", "from_numpy", "(", "data_np", ")", ",", "min", "=", "0", ",", "max", "=", "1", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", ")", "\n", "\n", "\n", "", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToPILImage", "(", ")", ",", "\n", "transform", "]", ")", "\n", "\n", "self", ".", "transform", "=", "transform", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.datasets.noise_datasets.NoiseDataset.__getitem__": [[56, 62], ["noise_datasets.NoiseDataset.data[].squeeze", "noise_datasets.NoiseDataset.transform"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "target", "=", "0", "\n", "img", "=", "self", ".", "data", "[", "index", "]", ".", "squeeze", "(", "dim", "=", "0", ")", "\n", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "\n", "return", "img", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.datasets.noise_datasets.NoiseDataset.__len__": [[63, 65], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "length", "\n", "", "", ""]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.datasets.noise_datasets.get_noise_dataset": [[12, 30], ["utils.datasets.augmentations.cifar_augmentation.get_cifar10_augmentation", "noise_datasets.NoiseDataset", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader"], "function", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.augmentations.cifar_augmentation.get_cifar10_augmentation"], ["def", "get_noise_dataset", "(", "length", ",", "type", "=", "'normal'", ",", "batch_size", "=", "128", ",", "augm_type", "=", "'none'", ",", "cutout_window", "=", "32", ",", "\n", "num_workers", "=", "8", ",", "size", "=", "32", ",", "config_dict", "=", "None", ")", ":", "\n", "    ", "augm_config", "=", "{", "}", "\n", "transform", "=", "get_cifar10_augmentation", "(", "type", "=", "augm_type", ",", "cutout_window", "=", "cutout_window", ",", "out_size", "=", "size", ",", "\n", "in_size", "=", "size", ",", "config_dict", "=", "augm_config", ")", "\n", "\n", "dataset", "=", "NoiseDataset", "(", "length", ",", "type", ",", "size", ",", "transform", ")", "\n", "loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "dataset", ",", "batch_size", "=", "batch_size", ",", "\n", "shuffle", "=", "False", ",", "num_workers", "=", "num_workers", ")", "\n", "\n", "if", "config_dict", "is", "not", "None", ":", "\n", "        ", "config_dict", "[", "'Dataset'", "]", "=", "'NoiseData'", "\n", "config_dict", "[", "'Length'", "]", "=", "length", "\n", "config_dict", "[", "'Noise Type'", "]", "=", "type", "\n", "config_dict", "[", "'Batch size'", "]", "=", "batch_size", "\n", "config_dict", "[", "'Augmentation'", "]", "=", "augm_config", "\n", "\n", "", "return", "loader", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.datasets.combo_dataset.ComboDataset.__init__": [[5, 15], ["len", "torch.zeros", "enumerate", "torch.cumsum", "torch.sum", "len"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "datasets", ")", ":", "\n", "        ", "num_datasets", "=", "len", "(", "datasets", ")", "\n", "self", ".", "dataset_lengths", "=", "torch", ".", "zeros", "(", "num_datasets", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "\n", "for", "i", ",", "ds", "in", "enumerate", "(", "datasets", ")", ":", "\n", "            ", "self", ".", "dataset_lengths", "[", "i", "]", "=", "len", "(", "ds", ")", "\n", "\n", "", "self", ".", "cum_lengths", "=", "torch", ".", "cumsum", "(", "self", ".", "dataset_lengths", ",", "dim", "=", "0", ")", "\n", "self", ".", "length", "=", "torch", ".", "sum", "(", "self", ".", "dataset_lengths", ")", "\n", "self", ".", "datasets", "=", "datasets", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.datasets.combo_dataset.ComboDataset.__len__": [[16, 18], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "length", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.datasets.combo_dataset.ComboDataset.__getitem__": [[19, 27], ["torch.nonzero"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "ds_idx", "=", "torch", ".", "nonzero", "(", "self", ".", "cum_lengths", ">", "index", ",", "as_tuple", "=", "False", ")", "[", "0", "]", "\n", "if", "ds_idx", ">", "0", ":", "\n", "            ", "item_idx", "=", "index", "-", "self", ".", "cum_lengths", "[", "ds_idx", "-", "1", "]", "\n", "", "else", ":", "\n", "            ", "item_idx", "=", "index", "\n", "\n", "", "return", "self", ".", "datasets", "[", "ds_idx", "]", "[", "item_idx", "]", "\n", "", "", ""]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.datasets.various.UniormNoiseDataset.__init__": [[65, 77], ["torch.rand", "torch.rand", "torch.rand", "torch.rand"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "dim", ",", "length", "=", "100000000", ")", ":", "\n", "\n", "        ", "def", "load_image", "(", "idx", ")", ":", "\n", "            ", "return", "torch", ".", "rand", "(", "dim", ")", "\n", "\n", "", "self", ".", "load_image", "=", "load_image", "\n", "\n", "self", ".", "length", "=", "length", "\n", "\n", "transform", "=", "None", "\n", "\n", "self", ".", "transform", "=", "transform", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.datasets.various.UniormNoiseDataset.__getitem__": [[78, 85], ["various.UniormNoiseDataset.load_image", "various.UniormNoiseDataset.transform"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "\n", "        ", "img", "=", "self", ".", "load_image", "(", "index", ")", "\n", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "\n", "", "return", "img", ",", "0", "# 0 is the class", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.datasets.various.UniormNoiseDataset.__len__": [[86, 88], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "length", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.datasets.various.get_permutationNoise": [[13, 41], ["torchvision.transforms.Compose", "paths.get_base_data_dir", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torchvision.datasets.MNIST", "torchvision.transforms.ToTensor", "preproc.PermutationNoise", "preproc.GaussianFilter", "preproc.ContrastRescaling", "torchvision.datasets.FashionMNIST", "torchvision.datasets.SVHN", "paths.get_svhn_path", "torchvision.datasets.CIFAR10", "paths.get_CIFAR10_path", "torchvision.datasets.CIFAR100", "paths.get_CIFAR100_path"], "function", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.datasets.paths.get_base_data_dir", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.datasets.mnist.MNIST", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.datasets.paths.get_svhn_path", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.datasets.paths.get_CIFAR10_path", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.datasets.paths.get_CIFAR100_path"], ["def", "get_permutationNoise", "(", "dataset", ",", "train", "=", "True", ",", "batch_size", "=", "None", ")", ":", "\n", "    ", "if", "batch_size", "==", "None", ":", "\n", "        ", "if", "train", ":", "\n", "            ", "batch_size", "=", "DEFAULT_TRAIN_BATCHSIZE", "\n", "", "else", ":", "\n", "            ", "batch_size", "=", "DEFAULT_TEST_BATCHSIZE", "\n", "", "", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "PermutationNoise", "(", ")", ",", "\n", "GaussianFilter", "(", ")", ",", "\n", "ContrastRescaling", "(", ")", "\n", "]", ")", "\n", "\n", "path", "=", "get_base_data_dir", "(", ")", "\n", "if", "dataset", "==", "'MNIST'", ":", "\n", "        ", "dataset", "=", "datasets", ".", "MNIST", "(", "path", ",", "train", "=", "train", ",", "transform", "=", "transform", ")", "\n", "", "elif", "dataset", "==", "'FMNIST'", ":", "\n", "        ", "dataset", "=", "datasets", ".", "FashionMNIST", "(", "path", ",", "train", "=", "train", ",", "transform", "=", "transform", ")", "\n", "", "elif", "dataset", "==", "'SVHN'", ":", "\n", "        ", "dataset", "=", "datasets", ".", "SVHN", "(", "get_svhn_path", "(", ")", ",", "split", "=", "'train'", "if", "train", "else", "'test'", ",", "transform", "=", "transform", ")", "\n", "", "elif", "dataset", "==", "'CIFAR10'", ":", "\n", "        ", "dataset", "=", "datasets", ".", "CIFAR10", "(", "get_CIFAR10_path", "(", ")", ",", "train", "=", "train", ",", "transform", "=", "transform", ")", "\n", "", "elif", "dataset", "==", "'CIFAR100'", ":", "\n", "        ", "dataset", "=", "datasets", ".", "CIFAR100", "(", "get_CIFAR100_path", "(", ")", ",", "train", "=", "train", ",", "transform", "=", "transform", ")", "\n", "", "loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "dataset", ",", "batch_size", "=", "batch_size", ",", "\n", "shuffle", "=", "False", ",", "num_workers", "=", "4", ")", "\n", "#cifar_loader = PrecomputeLoader(cifar_loader, batch_size=batch_size, shuffle=True)", "\n", "return", "loader", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.datasets.various.get_UniformNoise": [[43, 63], ["torch.rand", "torch.rand", "data_utils.TensorDataset", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.zeros", "torch.zeros"], "function", ["None"], ["", "def", "get_UniformNoise", "(", "dataset", ",", "train", "=", "False", ",", "batch_size", "=", "None", ")", ":", "\n", "    ", "if", "batch_size", "==", "None", ":", "\n", "        ", "if", "train", ":", "\n", "            ", "batch_size", "=", "DEFAULT_TRAIN_BATCHSIZE", "\n", "", "else", ":", "\n", "            ", "batch_size", "=", "DEFAULT_TEST_BATCHSIZE", "\n", "", "", "import", "torch", ".", "utils", ".", "data", "as", "data_utils", "\n", "\n", "if", "dataset", "in", "[", "'MNIST'", ",", "'FMNIST'", "]", ":", "\n", "        ", "shape", "=", "(", "1", ",", "28", ",", "28", ")", "\n", "", "elif", "dataset", "in", "[", "'SVHN'", ",", "'CIFAR10'", ",", "'CIFAR100'", "]", ":", "\n", "        ", "shape", "=", "(", "3", ",", "32", ",", "32", ")", "\n", "", "elif", "dataset", "in", "[", "'imageNet'", ",", "'restrictedImageNet'", "]", ":", "\n", "        ", "shape", "=", "(", "3", ",", "224", ",", "224", ")", "\n", "\n", "", "data", "=", "torch", ".", "rand", "(", "(", "100", "*", "batch_size", ",", ")", "+", "shape", ")", "\n", "train", "=", "data_utils", ".", "TensorDataset", "(", "data", ",", "torch", ".", "zeros", "(", "data", ".", "shape", "[", "0", "]", ",", "device", "=", "data", ".", "device", ")", ")", "\n", "loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "train", ",", "batch_size", "=", "batch_size", ",", "\n", "shuffle", "=", "False", ",", "num_workers", "=", "1", ")", "\n", "return", "loader", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.datasets.various.ImageNetMinusCifar10": [[90, 107], ["paths.get_base_data_dir", "torchvision.transforms.ToTensor", "torch.utils.data.Subset", "torch.utils.data.Subset", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "print", "torchvision.datasets.ImageFolder", "numpy.random.permutation", "range"], "function", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.datasets.paths.get_base_data_dir"], ["", "", "def", "ImageNetMinusCifar10", "(", "train", "=", "False", ",", "batch_size", "=", "None", ",", "augm_flag", "=", "False", ")", ":", "\n", "    ", "if", "train", ":", "\n", "        ", "print", "(", "'Warning: Training set for ImageNet not available'", ")", "\n", "", "if", "batch_size", "is", "None", ":", "\n", "        ", "batch_size", "=", "DEFAULT_TEST_BATCHSIZE", "\n", "\n", "", "path", "=", "get_base_data_dir", "(", ")", "\n", "dir_imagenet", "=", "path", "+", "'/imagenet/val/'", "\n", "n_test_imagenet", "=", "30000", "\n", "\n", "transform", "=", "transforms", ".", "ToTensor", "(", ")", "\n", "\n", "dataset", "=", "torch", ".", "utils", ".", "data", ".", "Subset", "(", "datasets", ".", "ImageFolder", "(", "dir_imagenet", ",", "transform", "=", "transform", ")", ",", "\n", "np", ".", "random", ".", "permutation", "(", "range", "(", "n_test_imagenet", ")", ")", "[", ":", "10000", "]", ")", "\n", "loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "dataset", ",", "batch_size", "=", "batch_size", ",", "\n", "shuffle", "=", "False", ",", "num_workers", "=", "1", ")", "\n", "return", "loader", "\n", "", ""]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.datasets.openimages.OpenImages.__init__": [[15, 53], ["torchvision.datasets.ImageFolder.__init__", "set", "print", "os.path.join", "os.path.join", "NotImplementedError", "os.path.join", "ValueError", "open", "len", "len", "exclude_idcs.append", "int", "print", "ValueError"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models_32x32.shake_pyramidnet.ShakePyramidNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "root", ",", "split", ",", "transform", "=", "None", ",", "target_transform", "=", "None", ",", "exclude_dataset", "=", "None", ")", ":", "\n", "        ", "if", "split", "==", "'train'", ":", "\n", "            ", "path", "=", "os", ".", "path", ".", "join", "(", "root", ",", "'train'", ")", "\n", "", "elif", "split", "==", "'val'", ":", "\n", "            ", "path", "=", "os", ".", "path", ".", "join", "(", "root", ",", "'val'", ")", "\n", "", "elif", "split", "==", "'test'", ":", "\n", "            ", "raise", "NotImplementedError", "(", ")", "\n", "path", "=", "os", ".", "path", ".", "join", "(", "root", ",", "'test'", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", ")", "\n", "\n", "", "super", "(", ")", ".", "__init__", "(", "path", ",", "transform", "=", "transform", ",", "target_transform", "=", "target_transform", ")", "\n", "exclude_idcs", "=", "[", "]", "\n", "\n", "if", "exclude_dataset", "is", "not", "None", "and", "split", "==", "'train'", ":", "\n", "            ", "if", "exclude_dataset", "==", "'imageNet100'", ":", "\n", "                ", "duplicate_file", "=", "'openImages_imageNet100_duplicates.txt'", "\n", "", "elif", "exclude_dataset", "==", "'flowers'", ":", "\n", "                ", "duplicate_file", "=", "'utils/openImages_flowers_idxs.txt'", "\n", "", "elif", "exclude_dataset", "==", "'pets'", ":", "\n", "                ", "duplicate_file", "=", "'utils/openImages_pets_idxs.txt'", "\n", "", "elif", "exclude_dataset", "==", "'cars'", ":", "\n", "                ", "duplicate_file", "=", "'utils/openImages_cars_idxs.txt'", "\n", "", "elif", "exclude_dataset", "==", "'food-101'", ":", "\n", "                ", "duplicate_file", "=", "'utils/openImages_food-101_idxs.txt'", "\n", "", "elif", "exclude_dataset", "==", "'cifar10'", ":", "\n", "                ", "print", "(", "'Warning; CIFAR10 duplicates not checked'", ")", "\n", "duplicate_file", "=", "None", "\n", "", "else", ":", "\n", "                ", "raise", "ValueError", "(", "f'Exclusion dataset {exclude_dataset} not supported'", ")", "\n", "\n", "", "if", "duplicate_file", "is", "not", "None", ":", "\n", "                ", "with", "open", "(", "duplicate_file", ",", "'r'", ")", "as", "idxs", ":", "\n", "                    ", "for", "idx", "in", "idxs", ":", "\n", "                        ", "exclude_idcs", ".", "append", "(", "int", "(", "idx", ")", ")", "\n", "\n", "", "", "", "", "self", ".", "exclude_idcs", "=", "set", "(", "exclude_idcs", ")", "\n", "print", "(", "f'OpenImages {split} - Length: {len(self)} - Exclude images: {len(self.exclude_idcs)}'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.datasets.openimages.OpenImages.__getitem__": [[54, 59], ["torchvision.datasets.ImageFolder.__getitem__", "numpy.random.randint", "len"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.datasets.flowers.Flowers.__getitem__"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "while", "index", "in", "self", ".", "exclude_idcs", ":", "\n", "            ", "index", "=", "np", ".", "random", ".", "randint", "(", "len", "(", "self", ")", ")", "\n", "\n", "", "return", "super", "(", ")", ".", "__getitem__", "(", "index", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.datasets.openimages.get_openImages": [[60, 83], ["utils.datasets.augmentations.imagenet_augmentation.get_imageNet_augmentation", "paths.get_openimages_path", "openimages.OpenImages", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "len"], "function", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.augmentations.imagenet_augmentation.get_imageNet_augmentation", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.datasets.paths.get_openimages_path"], ["", "", "def", "get_openImages", "(", "split", "=", "'train'", ",", "batch_size", "=", "128", ",", "shuffle", "=", "None", ",", "augm_type", "=", "'none'", ",", "num_workers", "=", "8", ",", "size", "=", "224", ",", "\n", "exclude_dataset", "=", "None", ",", "config_dict", "=", "None", ")", ":", "\n", "\n", "    ", "augm_config", "=", "{", "}", "\n", "transform", "=", "get_imageNet_augmentation", "(", "type", "=", "augm_type", ",", "out_size", "=", "size", ",", "config_dict", "=", "augm_config", ")", "\n", "\n", "if", "shuffle", "is", "None", ":", "\n", "        ", "shuffle", "=", "True", "if", "split", "==", "'train'", "else", "False", "\n", "\n", "", "path", "=", "get_openimages_path", "(", ")", "\n", "\n", "dataset", "=", "OpenImages", "(", "path", ",", "split", ",", "transform", "=", "transform", ",", "exclude_dataset", "=", "exclude_dataset", ")", "\n", "loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "dataset", ",", "batch_size", "=", "batch_size", ",", "\n", "shuffle", "=", "shuffle", ",", "num_workers", "=", "num_workers", ")", "\n", "\n", "if", "config_dict", "is", "not", "None", ":", "\n", "        ", "config_dict", "[", "'Dataset'", "]", "=", "'OpenImages'", "\n", "config_dict", "[", "'Exclude Dataset'", "]", "=", "exclude_dataset", "\n", "config_dict", "[", "'Length'", "]", "=", "len", "(", "dataset", ")", "\n", "config_dict", "[", "'Batch out_size'", "]", "=", "batch_size", "\n", "config_dict", "[", "'Augmentation'", "]", "=", "augm_config", "\n", "\n", "", "return", "loader", "\n", "", ""]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.datasets.pets.Pets.__init__": [[40, 65], ["os.path.join", "len", "os.path.join", "open", "os.path.join", "ValueError", "line.rstrip().split", "pets.Pets.imgs.append", "pets.Pets.labels.append", "int", "line.rstrip"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "root", ",", "split", ",", "transform", "=", "None", ")", ":", "\n", "        ", "if", "split", "==", "'train'", ":", "\n", "            ", "annotations_file", "=", "os", ".", "path", ".", "join", "(", "root", ",", "'annotations/trainval.txt'", ")", "\n", "", "elif", "split", "==", "'test'", ":", "\n", "            ", "annotations_file", "=", "os", ".", "path", ".", "join", "(", "root", ",", "'annotations/test.txt'", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "f'Split {split} not supported'", ")", "\n", "\n", "", "self", ".", "img_root", "=", "os", ".", "path", ".", "join", "(", "root", ",", "'images'", ")", "\n", "\n", "self", ".", "labels", "=", "[", "]", "\n", "self", ".", "imgs", "=", "[", "]", "\n", "\n", "with", "open", "(", "annotations_file", ",", "'r'", ")", "as", "fileID", ":", "\n", "            ", "for", "line", "in", "fileID", ":", "\n", "                ", "line_parts", "=", "line", ".", "rstrip", "(", ")", ".", "split", "(", "' '", ")", "\n", "img", "=", "line_parts", "[", "0", "]", "\n", "label", "=", "int", "(", "line_parts", "[", "1", "]", ")", "-", "1", "#labels are in range 1:37, transform to 0:36", "\n", "\n", "self", ".", "imgs", ".", "append", "(", "img", ")", "\n", "self", ".", "labels", ".", "append", "(", "label", ")", "\n", "\n", "", "", "self", ".", "transform", "=", "transform", "\n", "self", ".", "loader", "=", "default_loader", "\n", "self", ".", "length", "=", "len", "(", "self", ".", "imgs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.datasets.pets.Pets.__getitem__": [[66, 75], ["os.path.join", "pets.Pets.loader", "pets.Pets.transform"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "img", "=", "self", ".", "imgs", "[", "index", "]", "\n", "target", "=", "self", ".", "labels", "[", "index", "]", "\n", "path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "img_root", ",", "f'{img}.jpg'", ")", "\n", "sample", "=", "self", ".", "loader", "(", "path", ")", "\n", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "sample", "=", "self", ".", "transform", "(", "sample", ")", "\n", "\n", "", "return", "sample", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.datasets.pets.Pets.__len__": [[76, 78], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "length", "\n", "", "", ""]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.datasets.pets.get_pets_labels": [[18, 20], ["None"], "function", ["None"], ["def", "get_pets_labels", "(", ")", ":", "\n", "    ", "return", "class_labels", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.datasets.pets.get_pets": [[21, 37], ["utils.datasets.augmentations.imagenet_augmentation.get_imageNet_augmentation", "paths.get_pets_path", "pets.Pets", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader"], "function", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.augmentations.imagenet_augmentation.get_imageNet_augmentation", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.datasets.paths.get_pets_path"], ["", "def", "get_pets", "(", "split", "=", "'train'", ",", "batch_size", "=", "128", ",", "shuffle", "=", "True", ",", "augm_type", "=", "'none'", ",", "\n", "size", "=", "224", ",", "num_workers", "=", "8", ",", "config_dict", "=", "None", ")", ":", "\n", "\n", "    ", "augm_config", "=", "{", "}", "\n", "transform", "=", "get_imageNet_augmentation", "(", "augm_type", ",", "out_size", "=", "size", ",", "config_dict", "=", "augm_config", ")", "\n", "path", "=", "get_pets_path", "(", ")", "\n", "dataset", "=", "Pets", "(", "path", ",", "split", ",", "transform", "=", "transform", ")", "\n", "loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "dataset", ",", "batch_size", "=", "batch_size", ",", "\n", "shuffle", "=", "shuffle", ",", "num_workers", "=", "num_workers", ")", "\n", "\n", "if", "config_dict", "is", "not", "None", ":", "\n", "        ", "config_dict", "[", "'Dataset'", "]", "=", "'Flowers'", "\n", "config_dict", "[", "'Batch out_size'", "]", "=", "batch_size", "\n", "config_dict", "[", "'Augmentation'", "]", "=", "augm_config", "\n", "\n", "", "return", "loader", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.datasets.paths.get_base_data_dir": [[5, 8], ["None"], "function", ["None"], ["def", "get_base_data_dir", "(", ")", ":", "\n", "    ", "path", "=", "'/scratch/datasets/'", "\n", "return", "path", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.datasets.paths.get_svhn_path": [[9, 11], ["os.path.join", "paths.get_base_data_dir"], "function", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.datasets.paths.get_base_data_dir"], ["", "def", "get_svhn_path", "(", ")", ":", "\n", "    ", "return", "os", ".", "path", ".", "join", "(", "get_base_data_dir", "(", ")", ",", "'SVHN'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.datasets.paths.get_CIFAR10_path": [[12, 14], ["os.path.join", "paths.get_base_data_dir"], "function", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.datasets.paths.get_base_data_dir"], ["", "def", "get_CIFAR10_path", "(", ")", ":", "\n", "    ", "return", "os", ".", "path", ".", "join", "(", "get_base_data_dir", "(", ")", ",", "'CIFAR10'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.datasets.paths.get_CIFAR100_path": [[15, 17], ["os.path.join", "paths.get_base_data_dir"], "function", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.datasets.paths.get_base_data_dir"], ["", "def", "get_CIFAR100_path", "(", ")", ":", "\n", "    ", "return", "os", ".", "path", ".", "join", "(", "get_base_data_dir", "(", ")", ",", "'CIFAR100'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.datasets.paths.get_CIFAR10_C_path": [[18, 20], ["os.path.join", "paths.get_base_data_dir"], "function", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.datasets.paths.get_base_data_dir"], ["", "def", "get_CIFAR10_C_path", "(", ")", ":", "\n", "    ", "return", "os", ".", "path", ".", "join", "(", "get_base_data_dir", "(", ")", ",", "'CIFAR-10-C'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.datasets.paths.get_CIFAR100_C_path": [[21, 23], ["os.path.join", "paths.get_base_data_dir"], "function", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.datasets.paths.get_base_data_dir"], ["", "def", "get_CIFAR100_C_path", "(", ")", ":", "\n", "    ", "return", "os", ".", "path", ".", "join", "(", "get_base_data_dir", "(", ")", ",", "'CIFAR-100-C'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.datasets.paths.get_CINIC10_path": [[24, 26], ["os.path.join", "paths.get_base_data_dir"], "function", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.datasets.paths.get_base_data_dir"], ["", "def", "get_CINIC10_path", "(", ")", ":", "\n", "    ", "return", "os", ".", "path", ".", "join", "(", "get_base_data_dir", "(", ")", ",", "'cinic_10'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.datasets.paths.get_celebA_path": [[27, 29], ["paths.get_base_data_dir"], "function", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.datasets.paths.get_base_data_dir"], ["", "def", "get_celebA_path", "(", ")", ":", "\n", "    ", "return", "get_base_data_dir", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.datasets.paths.get_stanford_cars_path": [[30, 32], ["os.path.join", "paths.get_base_data_dir"], "function", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.datasets.paths.get_base_data_dir"], ["", "def", "get_stanford_cars_path", "(", ")", ":", "\n", "    ", "return", "os", ".", "path", ".", "join", "(", "get_base_data_dir", "(", ")", ",", "'stanford_cars'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.datasets.paths.get_flowers_path": [[33, 35], ["os.path.join", "paths.get_base_data_dir"], "function", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.datasets.paths.get_base_data_dir"], ["", "def", "get_flowers_path", "(", ")", ":", "\n", "    ", "return", "os", ".", "path", ".", "join", "(", "get_base_data_dir", "(", ")", ",", "'flowers'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.datasets.paths.get_pets_path": [[36, 38], ["os.path.join", "paths.get_base_data_dir"], "function", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.datasets.paths.get_base_data_dir"], ["", "def", "get_pets_path", "(", ")", ":", "\n", "    ", "return", "os", ".", "path", ".", "join", "(", "get_base_data_dir", "(", ")", ",", "'pets'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.datasets.paths.get_food_101N_path": [[39, 41], ["os.path.join", "paths.get_base_data_dir"], "function", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.datasets.paths.get_base_data_dir"], ["", "def", "get_food_101N_path", "(", ")", ":", "\n", "    ", "return", "os", ".", "path", ".", "join", "(", "get_base_data_dir", "(", ")", ",", "'Food-101N'", ",", "'Food-101N_release'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.datasets.paths.get_food_101_path": [[42, 44], ["os.path.join", "paths.get_base_data_dir"], "function", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.datasets.paths.get_base_data_dir"], ["", "def", "get_food_101_path", "(", ")", ":", "\n", "    ", "return", "os", ".", "path", ".", "join", "(", "get_base_data_dir", "(", ")", ",", "'Food-101'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.datasets.paths.get_fgvc_aircraft_path": [[45, 47], ["os.path.join", "paths.get_base_data_dir"], "function", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.datasets.paths.get_base_data_dir"], ["", "def", "get_fgvc_aircraft_path", "(", ")", ":", "\n", "    ", "return", "os", ".", "path", ".", "join", "(", "get_base_data_dir", "(", ")", ",", "'FGVC/fgvc-aircraft-2013b'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.datasets.paths.get_cub_path": [[48, 50], ["os.path.join", "paths.get_base_data_dir"], "function", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.datasets.paths.get_base_data_dir"], ["", "def", "get_cub_path", "(", ")", ":", "\n", "    ", "return", "os", ".", "path", ".", "join", "(", "get_base_data_dir", "(", ")", ",", "'CUB'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.datasets.paths.get_LSUN_scenes_path": [[51, 53], ["os.path.join", "paths.get_base_data_dir"], "function", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.datasets.paths.get_base_data_dir"], ["", "def", "get_LSUN_scenes_path", "(", ")", ":", "\n", "    ", "return", "os", ".", "path", ".", "join", "(", "get_base_data_dir", "(", ")", ",", "'LSUN_scenes'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.datasets.paths.get_tiny_images_files": [[55, 60], ["NotImplementedError", "os.path.join", "paths.get_base_data_dir"], "function", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.datasets.paths.get_base_data_dir"], ["", "def", "get_tiny_images_files", "(", "shuffled", "=", "True", ")", ":", "\n", "    ", "if", "shuffled", "==", "True", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "", "else", ":", "\n", "        ", "return", "os", ".", "path", ".", "join", "(", "get_base_data_dir", "(", ")", ",", "'80M Tiny Images/tiny_images.bin'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.datasets.paths.get_tiny_images_lmdb": [[61, 63], ["NotImplementedError"], "function", ["None"], ["", "", "def", "get_tiny_images_lmdb", "(", ")", ":", "\n", "    ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.datasets.paths.get_imagenet_path": [[64, 67], ["os.path.join", "paths.get_base_data_dir"], "function", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.datasets.paths.get_base_data_dir"], ["", "def", "get_imagenet_path", "(", ")", ":", "\n", "    ", "path", "=", "os", ".", "path", ".", "join", "(", "get_base_data_dir", "(", ")", ",", "'imagenet/'", ")", "\n", "return", "path", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.datasets.paths.get_imagenet_o_path": [[68, 70], ["os.path.join", "paths.get_base_data_dir"], "function", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.datasets.paths.get_base_data_dir"], ["", "def", "get_imagenet_o_path", "(", ")", ":", "\n", "    ", "return", "os", ".", "path", ".", "join", "(", "get_base_data_dir", "(", ")", ",", "'imagenet-o/'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.datasets.paths.get_openimages_path": [[71, 74], ["os.path.join", "paths.get_base_data_dir"], "function", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.datasets.paths.get_base_data_dir"], ["", "def", "get_openimages_path", "(", ")", ":", "\n", "    ", "path", "=", "os", ".", "path", ".", "join", "(", "get_base_data_dir", "(", ")", ",", "'openimages/'", ")", "\n", "return", "path", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.datasets.paths.get_tiny_imagenet_path": [[75, 77], ["os.path.join", "paths.get_base_data_dir"], "function", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.datasets.paths.get_base_data_dir"], ["", "def", "get_tiny_imagenet_path", "(", ")", ":", "\n", "    ", "return", "os", ".", "path", ".", "join", "(", "get_base_data_dir", "(", ")", ",", "'TinyImageNet/tiny-imagenet-200/'", ")", "", "", ""]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.datasets.tinyImages.TinyImagesDataset.__init__": [[91, 114], ["paths.get_tiny_images_files", "numpy.memmap().reshape", "tinyImages._load_cifar_exclusion_idcs", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.nonzero().squeeze", "torch.nonzero().squeeze", "torch.nonzero().squeeze", "torch.nonzero().squeeze", "len", "print", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "numpy.memmap", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torchvision.transforms.ToPILImage", "torchvision.transforms.ToPILImage", "torchvision.transforms.ToTensor", "len"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.datasets.paths.get_tiny_images_files", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.datasets.tinyImages._load_cifar_exclusion_idcs"], ["    ", "def", "__init__", "(", "self", ",", "transform_base", ",", "exclude_cifar", "=", "False", ",", "exclude_cifar10_1", "=", "False", ")", ":", "\n", "        ", "self", ".", "data_location", "=", "get_tiny_images_files", "(", "False", ")", "\n", "self", ".", "memap", "=", "np", ".", "memmap", "(", "self", ".", "data_location", ",", "mode", "=", "'r'", ",", "dtype", "=", "'uint8'", ",", "order", "=", "'C'", ")", ".", "reshape", "(", "TINY_LENGTH", ",", "-", "1", ")", "\n", "\n", "if", "transform_base", "is", "not", "None", ":", "\n", "            ", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToPILImage", "(", ")", ",", "\n", "transform_base", "]", ")", "\n", "", "else", ":", "\n", "            ", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToPILImage", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", "]", ")", "\n", "\n", "", "self", ".", "transform", "=", "transform", "\n", "self", ".", "exclude_cifar", "=", "exclude_cifar", "\n", "\n", "exclusion_idcs", "=", "_load_cifar_exclusion_idcs", "(", "exclude_cifar", ",", "exclude_cifar10_1", ")", "\n", "\n", "self", ".", "included_indices", "=", "torch", ".", "ones", "(", "TINY_LENGTH", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "self", ".", "included_indices", "[", "exclusion_idcs", "]", "=", "0", "\n", "self", ".", "included_indices", "=", "torch", ".", "nonzero", "(", "self", ".", "included_indices", ",", "as_tuple", "=", "False", ")", ".", "squeeze", "(", ")", "\n", "self", ".", "length", "=", "len", "(", "self", ".", "included_indices", ")", "\n", "print", "(", "f'80M Tiny Images - Length {self.length} - Excluding {len(exclusion_idcs)} images'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.datasets.tinyImages.TinyImagesDataset.__getitem__": [[115, 123], ["tinyImages.TinyImagesDataset.memap[].reshape", "tinyImages.TinyImagesDataset.transform"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "ii", ")", ":", "\n", "        ", "index", "=", "self", ".", "included_indices", "[", "ii", "]", "\n", "img", "=", "self", ".", "memap", "[", "index", "]", ".", "reshape", "(", "32", ",", "32", ",", "3", ",", "order", "=", "\"F\"", ")", "\n", "\n", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "\n", "", "return", "img", ",", "0", "# 0 is the class", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.datasets.tinyImages.TinyImagesDataset.__len__": [[124, 126], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "length", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.datasets.tinyImages.get_80MTinyImages": [[14, 40], ["utils.datasets.augmentations.cifar_augmentation.get_cifar10_augmentation", "tinyImages.TinyImagesDataset", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader"], "function", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.augmentations.cifar_augmentation.get_cifar10_augmentation"], ["def", "get_80MTinyImages", "(", "batch_size", "=", "100", ",", "augm_type", "=", "'default'", ",", "shuffle", "=", "True", ",", "cutout_window", "=", "16", ",", "num_workers", "=", "1", ",", "\n", "size", "=", "32", ",", "exclude_cifar", "=", "False", ",", "exclude_cifar10_1", "=", "False", ",", "config_dict", "=", "None", ")", ":", "\n", "#dataset is the dataset that will be excluded, eg CIFAR10", "\n", "    ", "if", "num_workers", ">", "1", ":", "\n", "        ", "pass", "\n", "#raise ValueError('Bug in the current multithreaded tinyimages implementation')", "\n", "\n", "", "augm_config", "=", "{", "}", "\n", "transform", "=", "get_cifar10_augmentation", "(", "augm_type", ",", "cutout_window", "=", "cutout_window", ",", "out_size", "=", "size", ",", "config_dict", "=", "augm_config", ")", "\n", "\n", "dataset_out", "=", "TinyImagesDataset", "(", "transform", ",", "\n", "exclude_cifar", "=", "exclude_cifar", ",", "exclude_cifar10_1", "=", "exclude_cifar10_1", ")", "\n", "\n", "loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "dataset_out", ",", "batch_size", "=", "batch_size", ",", "\n", "shuffle", "=", "shuffle", ",", "num_workers", "=", "num_workers", ")", "\n", "\n", "if", "config_dict", "is", "not", "None", ":", "\n", "        ", "if", "config_dict", "is", "not", "None", ":", "\n", "            ", "config_dict", "[", "'Dataset'", "]", "=", "'80M Tiny Images'", "\n", "config_dict", "[", "'Shuffle'", "]", "=", "shuffle", "\n", "config_dict", "[", "'Batch out_size'", "]", "=", "batch_size", "\n", "config_dict", "[", "'Exclude CIFAR'", "]", "=", "exclude_cifar", "\n", "config_dict", "[", "'Exclude CIFAR10.1'", "]", "=", "exclude_cifar10_1", "\n", "config_dict", "[", "'Augmentation'", "]", "=", "augm_config", "\n", "\n", "", "", "return", "loader", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.datasets.tinyImages._preload_tiny_images": [[41, 46], ["numpy.zeros", "enumerate", "tinyImages._load_tiny_image", "len"], "function", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.datasets.tinyImages._load_tiny_image"], ["", "def", "_preload_tiny_images", "(", "idcs", ",", "file_id", ")", ":", "\n", "    ", "imgs", "=", "np", ".", "zeros", "(", "(", "len", "(", "idcs", ")", ",", "32", ",", "32", ",", "3", ")", ",", "dtype", "=", "'uint8'", ")", "\n", "for", "lin_idx", ",", "idx", "in", "enumerate", "(", "idcs", ")", ":", "\n", "        ", "imgs", "[", "lin_idx", ",", ":", "]", "=", "_load_tiny_image", "(", "idx", ",", "file_id", ")", "\n", "", "return", "imgs", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.datasets.tinyImages._load_tiny_image": [[47, 56], ["numpy.fromstring().reshape", "file_id.seek", "file_id.read", "numpy.fromstring"], "function", ["None"], ["", "def", "_load_tiny_image", "(", "idx", ",", "file_id", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "file_id", ".", "seek", "(", "idx", "*", "3072", ")", "\n", "data", "=", "file_id", ".", "read", "(", "3072", ")", "\n", "", "finally", ":", "\n", "        ", "pass", "\n", "\n", "", "data_np", "=", "np", ".", "fromstring", "(", "data", ",", "dtype", "=", "'uint8'", ")", ".", "reshape", "(", "32", ",", "32", ",", "3", ",", "order", "=", "\"F\"", ")", "\n", "return", "data_np", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.datasets.tinyImages._load_cifar_exclusion_idcs": [[58, 86], ["torch.unique", "torch.unique", "torch.LongTensor", "torch.LongTensor", "open", "open", "os.path.join", "torch.unique.append", "open", "os.path.join", "torch.unique.append", "os.path.join", "torch.unique.append", "int", "int", "int"], "function", ["None"], ["", "def", "_load_cifar_exclusion_idcs", "(", "exclude_cifar", ",", "exclude_cifar10_1", ")", ":", "\n", "    ", "cifar_idxs", "=", "[", "]", "\n", "main_idcs_dir", "=", "'TinyImagesExclusionIdcs/'", "\n", "\n", "our_exclusion_files", "=", "[", "\n", "'80mn_cifar10_test_idxs.txt'", ",", "\n", "'80mn_cifar100_test_idxs.txt'", ",", "\n", "'80mn_cifar10_train_idxs.txt'", ",", "\n", "'80mn_cifar100_train_idxs.txt'", ",", "\n", "]", "\n", "if", "exclude_cifar", ":", "\n", "        ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "main_idcs_dir", ",", "'80mn_cifar_idxs.txt'", ")", ",", "'r'", ")", "as", "idxs", ":", "\n", "            ", "for", "idx", "in", "idxs", ":", "\n", "# indices in file take the 80mn database to start at 1, hence \"- 1\"", "\n", "                ", "cifar_idxs", ".", "append", "(", "int", "(", "idx", ")", "-", "1", ")", "\n", "\n", "", "", "for", "file", "in", "our_exclusion_files", ":", "\n", "            ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "main_idcs_dir", ",", "file", ")", ",", "'r'", ")", "as", "idxs", ":", "\n", "                ", "for", "idx", "in", "idxs", ":", "\n", "                    ", "cifar_idxs", ".", "append", "(", "int", "(", "idx", ")", ")", "\n", "\n", "", "", "", "", "if", "exclude_cifar10_1", ":", "\n", "        ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "main_idcs_dir", ",", "'80mn_cifar101_idxs.txt'", ")", ",", "'r'", ")", "as", "idxs", ":", "\n", "            ", "for", "idx", "in", "idxs", ":", "\n", "                ", "cifar_idxs", ".", "append", "(", "int", "(", "idx", ")", ")", "\n", "\n", "", "", "", "cifar_idxs", "=", "torch", ".", "unique", "(", "torch", ".", "LongTensor", "(", "cifar_idxs", ")", ")", "\n", "return", "cifar_idxs", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.datasets.food_101.Food101.__init__": [[42, 66], ["food_101.get_food_101_labels", "print", "len", "os.path.join", "open", "enumerate", "os.path.join", "ValueError", "row.rstrip", "food_101.Food101.img_label_list.append", "len", "row.rstrip.split"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.datasets.food_101.get_food_101_labels"], ["    ", "def", "__init__", "(", "self", ",", "root", ",", "split", ",", "transform", "=", "None", ")", ":", "\n", "        ", "class_labels", "=", "get_food_101_labels", "(", ")", "\n", "self", ".", "root", "=", "root", "\n", "label_to_target", "=", "{", "label", ":", "target", "for", "target", ",", "label", "in", "enumerate", "(", "class_labels", ")", "}", "\n", "self", ".", "transform", "=", "transform", "\n", "\n", "if", "split", "==", "'train'", ":", "\n", "            ", "meta_txt", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "'meta'", ",", "'meta'", ",", "'train.txt'", ")", "\n", "", "elif", "split", "==", "'val'", ":", "\n", "            ", "meta_txt", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "'meta'", ",", "'meta'", ",", "'test.txt'", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", ")", "\n", "\n", "", "self", ".", "img_label_list", "=", "[", "]", "\n", "with", "open", "(", "meta_txt", ")", "as", "fileID", ":", "\n", "            ", "for", "row", "in", "fileID", ":", "\n", "                ", "img", "=", "row", ".", "rstrip", "(", ")", "\n", "target", "=", "label_to_target", "[", "img", ".", "split", "(", "'/'", ")", "[", "0", "]", "]", "\n", "self", ".", "img_label_list", ".", "append", "(", "(", "img", ",", "target", ")", ")", "\n", "\n", "", "", "print", "(", "f'Food 101 {split} - {len(self.img_label_list)} Images'", ")", "\n", "\n", "self", ".", "loader", "=", "default_loader", "\n", "self", ".", "length", "=", "len", "(", "self", ".", "img_label_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.datasets.food_101.Food101.__getitem__": [[67, 75], ["os.path.join", "food_101.Food101.loader", "food_101.Food101.transform"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "sub_path", ",", "target", "=", "self", ".", "img_label_list", "[", "index", "]", "\n", "path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "'images'", ",", "sub_path", "+", "'.jpg'", ")", "\n", "sample", "=", "self", ".", "loader", "(", "path", ")", "\n", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "sample", "=", "self", ".", "transform", "(", "sample", ")", "\n", "\n", "", "return", "sample", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.datasets.food_101.Food101.__len__": [[76, 78], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "length", "\n", "", "", ""]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.datasets.food_101.get_food_101_labels": [[11, 19], ["paths.get_food_101_path", "os.path.join", "open", "enumerate", "class_list.append", "line.rstrip"], "function", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.datasets.paths.get_food_101_path"], ["def", "get_food_101_labels", "(", ")", ":", "\n", "    ", "path", "=", "get_food_101_path", "(", ")", "\n", "class_list", "=", "[", "]", "\n", "classes_file", "=", "os", ".", "path", ".", "join", "(", "path", ",", "'meta'", ",", "'meta'", ",", "'classes.txt'", ")", "\n", "with", "open", "(", "classes_file", ")", "as", "classestxt", ":", "\n", "        ", "for", "line_number", ",", "line", "in", "enumerate", "(", "classestxt", ")", ":", "\n", "            ", "class_list", ".", "append", "(", "line", ".", "rstrip", "(", ")", ")", "\n", "", "", "return", "class_list", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.datasets.food_101.get_food_101": [[21, 38], ["augmentations.imagenet_augmentation.get_imageNet_augmentation", "paths.get_food_101_path", "food_101.Food101", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader"], "function", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.augmentations.imagenet_augmentation.get_imageNet_augmentation", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.datasets.paths.get_food_101_path"], ["", "def", "get_food_101", "(", "split", "=", "'train'", ",", "batch_size", "=", "128", ",", "shuffle", "=", "True", ",", "augm_type", "=", "'none'", ",", "\n", "size", "=", "224", ",", "num_workers", "=", "8", ",", "config_dict", "=", "None", ")", ":", "\n", "\n", "    ", "augm_config", "=", "{", "}", "\n", "transform", "=", "get_imageNet_augmentation", "(", "augm_type", ",", "out_size", "=", "size", ",", "config_dict", "=", "augm_config", ")", "\n", "\n", "path", "=", "get_food_101_path", "(", ")", "\n", "dataset", "=", "Food101", "(", "path", ",", "split", ",", "transform", "=", "transform", ")", "\n", "loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "dataset", ",", "batch_size", "=", "batch_size", ",", "\n", "shuffle", "=", "shuffle", ",", "num_workers", "=", "num_workers", ")", "\n", "\n", "if", "config_dict", "is", "not", "None", ":", "\n", "        ", "config_dict", "[", "'Dataset'", "]", "=", "'Food-101'", "\n", "config_dict", "[", "'Batch out_size'", "]", "=", "batch_size", "\n", "config_dict", "[", "'Augmentation'", "]", "=", "augm_config", "\n", "\n", "", "return", "loader", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.datasets.celebA.get_celebA_augmentation": [[7, 57], ["torch.tensor", "torch.tensor", "int", "int", "int", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "torchvision.transforms.Resize", "torchvision.transforms.ToTensor", "torchvision.transforms.Compose", "torchvision.transforms.Resize", "torchvision.transforms.RandomCrop", "torchvision.transforms.ToTensor", "torchvision.transforms.Compose", "torchvision.transforms.Resize", "torchvision.transforms.RandomCrop", "torchvision.transforms.RandomHorizontalFlip", "torchvision.transforms.ColorJitter", "torchvision.transforms.RandomRotation", "torchvision.transforms.ToTensor", "torchvision.transforms.Compose", "ValueError", "int", "torchvision.transforms.Resize", "torchvision.transforms.RandomCrop", "torchvision.transforms.RandomHorizontalFlip", "torchvision.transforms.ToTensor", "utils.datasets.augmentations.cutout.Cutout", "int", "torchvision.transforms.Resize", "torchvision.transforms.RandomCrop", "torchvision.transforms.RandomHorizontalFlip", "torchvision.transforms.ColorJitter", "torchvision.transforms.RandomRotation", "torchvision.transforms.ToTensor", "utils.datasets.augmentations.cutout.Cutout", "int", "int", "int", "int"], "function", ["None"], ["def", "get_celebA_augmentation", "(", "type", "=", "'default'", ",", "out_size", "=", "224", ",", "config_dict", "=", "None", ")", ":", "\n", "    ", "celebA_mean", "=", "torch", ".", "tensor", "(", "[", "0.5063", ",", "0.4258", ",", "0.3832", "]", ")", "\n", "celebA_mean_int", "=", "(", "int", "(", "255", "*", "0.5063", ")", ",", "int", "(", "255", "*", "0.4258", ")", ",", "int", "(", "255", "*", "0.3832", ")", ")", "\n", "\n", "if", "type", "==", "'none'", "or", "type", "is", "None", ":", "\n", "        ", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "Resize", "(", "out_size", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", "]", ")", "\n", "", "elif", "type", "==", "'default'", ":", "\n", "        ", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "Resize", "(", "out_size", ")", ",", "\n", "transforms", ".", "RandomCrop", "(", "out_size", ",", "padding", "=", "int", "(", "0.125", "*", "out_size", ")", ",", "fill", "=", "celebA_mean_int", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "]", ")", "\n", "", "elif", "type", "==", "'madry'", ":", "\n", "        ", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "Resize", "(", "out_size", ")", ",", "\n", "transforms", ".", "RandomCrop", "(", "out_size", ",", "padding", "=", "int", "(", "0.125", "*", "out_size", ")", ",", "fill", "=", "celebA_mean_int", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ColorJitter", "(", ".25", ",", ".25", ",", ".25", ")", ",", "\n", "transforms", ".", "RandomRotation", "(", "2", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "]", ")", "\n", "", "elif", "type", "==", "'default_cutout'", ":", "\n", "        ", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "Resize", "(", "out_size", ")", ",", "\n", "transforms", ".", "RandomCrop", "(", "out_size", ",", "padding", "=", "int", "(", "0.125", "*", "out_size", ")", ",", "fill", "=", "celebA_mean_int", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "#as we apply cutout before normalization, we have to fill with the mean and not 0", "\n", "Cutout", "(", "n_holes", "=", "1", ",", "length", "=", "int", "(", "0.25", "*", "out_size", ")", ",", "fill_color", "=", "celebA_mean", ")", "\n", "]", ")", "\n", "", "elif", "type", "==", "'madry_cutout'", ":", "\n", "        ", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "Resize", "(", "out_size", ")", ",", "\n", "transforms", ".", "RandomCrop", "(", "out_size", ",", "padding", "=", "int", "(", "0.125", "*", "out_size", ")", ",", "fill", "=", "celebA_mean_int", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ColorJitter", "(", ".25", ",", ".25", ",", ".25", ")", ",", "\n", "transforms", ".", "RandomRotation", "(", "2", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "Cutout", "(", "n_holes", "=", "1", ",", "length", "=", "int", "(", "0.4", "*", "out_size", ")", ",", "fill_color", "=", "celebA_mean", ")", "\n", "]", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "f'augmentation type - {type} - not supported'", ")", "\n", "\n", "", "if", "config_dict", "is", "not", "None", ":", "\n", "        ", "config_dict", "[", "'type'", "]", "=", "type", "\n", "config_dict", "[", "'Output out_size'", "]", "=", "out_size", "\n", "\n", "", "return", "transform", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.datasets.celebA.celebA_target_transform": [[68, 70], ["None"], "function", ["None"], ["def", "celebA_target_transform", "(", "targets", ",", "mask", ")", ":", "\n", "    ", "return", "targets", "[", "mask", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.datasets.celebA.get_celebA_target_transform": [[71, 80], ["enumerate", "torch.LongTensor", "torch.LongTensor", "celebA.celebA_target_transform", "torch.LongTensor.append"], "function", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.datasets.celebA.celebA_target_transform"], ["", "def", "get_celebA_target_transform", "(", "attributes", ")", ":", "\n", "    ", "mask", "=", "[", "]", "\n", "for", "i", ",", "attr", "in", "enumerate", "(", "celebA_attributes", ")", ":", "\n", "        ", "if", "attr", "in", "attributes", ":", "\n", "            ", "mask", ".", "append", "(", "i", ")", "\n", "\n", "", "", "mask", "=", "torch", ".", "LongTensor", "(", "mask", ")", "\n", "transform", "=", "lambda", "x", ":", "celebA_target_transform", "(", "x", ",", "mask", ")", "\n", "return", "transform", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.datasets.celebA.celebA_feature_set": [[82, 115], ["celebA.get_celebA_augmentation", "paths.get_celebA_path", "torchvision.datasets.CelebA", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "print", "celebA.get_celebA_target_transform"], "function", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.datasets.celebA.get_celebA_augmentation", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.datasets.paths.get_celebA_path", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.datasets.celebA.get_celebA_target_transform"], ["", "def", "celebA_feature_set", "(", "split", "=", "'train'", ",", "shuffle", "=", "None", ",", "batch_size", "=", "128", ",", "attributes", "=", "None", ",", "\n", "augm_type", "=", "'default'", ",", "out_size", "=", "224", ",", "config_dict", "=", "None", ")", ":", "\n", "    ", "if", "split", "==", "'test'", "and", "not", "augm_type", "==", "'none'", ":", "\n", "        ", "print", "(", "'WARNING: Test set in use with data augmentation'", ")", "\n", "\n", "", "if", "shuffle", "is", "None", ":", "\n", "        ", "if", "split", "==", "'train'", ":", "\n", "            ", "shuffle", "=", "True", "\n", "", "else", ":", "\n", "            ", "shuffle", "=", "False", "\n", "\n", "", "", "if", "attributes", "is", "None", ":", "\n", "        ", "attributes", "=", "celebA_attributes", "\n", "target_transform", "=", "None", "\n", "", "else", ":", "\n", "        ", "target_transform", "=", "get_celebA_target_transform", "(", "attributes", ")", "\n", "\n", "", "augm_config", "=", "{", "}", "\n", "augm", "=", "get_celebA_augmentation", "(", "augm_type", ",", "out_size", "=", "out_size", ",", "config_dict", "=", "augm_config", ")", "\n", "\n", "path", "=", "get_celebA_path", "(", ")", "\n", "dataset", "=", "datasets", ".", "CelebA", "(", "path", ",", "split", "=", "split", ",", "target_type", "=", "'attr'", ",", "transform", "=", "augm", ",", "target_transform", "=", "target_transform", ",", "download", "=", "False", ")", "\n", "\n", "loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "dataset", ",", "batch_size", "=", "batch_size", ",", "\n", "shuffle", "=", "shuffle", ",", "num_workers", "=", "8", ")", "\n", "\n", "if", "config_dict", "is", "not", "None", ":", "\n", "        ", "config_dict", "[", "'Dataset'", "]", "=", "'CelebA'", "\n", "config_dict", "[", "'Batch size'", "]", "=", "batch_size", "\n", "config_dict", "[", "'Augmentation'", "]", "=", "augm_config", "\n", "config_dict", "[", "'Attributes'", "]", "=", "attributes", "\n", "\n", "", "return", "loader", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.datasets.celebA.celebA_ImageNetOD": [[116, 123], ["celebA.get_celebA_augmentation", "paths.get_imagenet_path", "torchvision.datasets.ImageNet", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader"], "function", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.datasets.celebA.get_celebA_augmentation", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.datasets.paths.get_imagenet_path"], ["", "def", "celebA_ImageNetOD", "(", "shuffle", "=", "True", ",", "batch_size", "=", "128", ",", "augm_type", "=", "'default'", ")", ":", "\n", "    ", "augm", "=", "get_celebA_augmentation", "(", "augm_type", ")", "\n", "root", "=", "get_imagenet_path", "(", ")", "\n", "dataset", "=", "datasets", ".", "ImageNet", "(", "root", "=", "root", ",", "split", "=", "'train'", ",", "transform", "=", "augm", ")", "\n", "loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "dataset", ",", "batch_size", "=", "batch_size", ",", "\n", "shuffle", "=", "shuffle", ",", "num_workers", "=", "8", ")", "\n", "return", "loader", "\n", "", ""]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.datasets.utils.GaussianSmoothing.__init__": [[21, 61], ["torch.Module.__init__", "isinstance", "isinstance", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "zip", "kernel.repeat.repeat.view", "kernel.repeat.repeat.repeat", "utils.GaussianSmoothing.register_buffer", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "kernel.repeat.repeat.size", "RuntimeError", "math.sqrt", "kernel.repeat.repeat.dim"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models_32x32.shake_pyramidnet.ShakePyramidNet.__init__"], ["def", "__init__", "(", "self", ",", "channels", ",", "kernel_size", ",", "sigma", ",", "dim", "=", "2", ")", ":", "\n", "        ", "super", "(", "GaussianSmoothing", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "isinstance", "(", "kernel_size", ",", "numbers", ".", "Number", ")", ":", "\n", "            ", "kernel_size", "=", "[", "kernel_size", "]", "*", "dim", "\n", "", "if", "isinstance", "(", "sigma", ",", "numbers", ".", "Number", ")", ":", "\n", "            ", "sigma", "=", "[", "sigma", "]", "*", "dim", "\n", "\n", "# The gaussian kernel is the product of the", "\n", "# gaussian function of each dimension.", "\n", "", "kernel", "=", "1", "\n", "meshgrids", "=", "torch", ".", "meshgrid", "(", "\n", "[", "\n", "torch", ".", "arange", "(", "size", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "for", "size", "in", "kernel_size", "\n", "]", "\n", ")", "\n", "for", "size", ",", "std", ",", "mgrid", "in", "zip", "(", "kernel_size", ",", "sigma", ",", "meshgrids", ")", ":", "\n", "            ", "mean", "=", "(", "size", "-", "1", ")", "/", "2", "\n", "kernel", "*=", "1", "/", "(", "std", "*", "math", ".", "sqrt", "(", "2", "*", "math", ".", "pi", ")", ")", "*", "torch", ".", "exp", "(", "-", "(", "(", "mgrid", "-", "mean", ")", "/", "std", ")", "**", "2", "/", "2", ")", "\n", "\n", "# Make sure sum of values in gaussian kernel equals 1.", "\n", "", "kernel", "=", "kernel", "/", "torch", ".", "sum", "(", "kernel", ")", "\n", "\n", "# Reshape to depthwise convolutional weight", "\n", "kernel", "=", "kernel", ".", "view", "(", "1", ",", "1", ",", "*", "kernel", ".", "size", "(", ")", ")", "\n", "kernel", "=", "kernel", ".", "repeat", "(", "channels", ",", "*", "[", "1", "]", "*", "(", "kernel", ".", "dim", "(", ")", "-", "1", ")", ")", "\n", "\n", "self", ".", "register_buffer", "(", "'weight'", ",", "kernel", ")", "\n", "self", ".", "groups", "=", "channels", "\n", "\n", "if", "dim", "==", "1", ":", "\n", "            ", "self", ".", "conv", "=", "F", ".", "conv1d", "\n", "", "elif", "dim", "==", "2", ":", "\n", "            ", "self", ".", "conv", "=", "F", ".", "conv2d", "\n", "", "elif", "dim", "==", "3", ":", "\n", "            ", "self", ".", "conv", "=", "F", ".", "conv3d", "\n", "", "else", ":", "\n", "            ", "raise", "RuntimeError", "(", "\n", "'Only 1, 2 and 3 dimensions are supported. Received {}.'", ".", "format", "(", "dim", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.datasets.utils.GaussianSmoothing.forward": [[63, 72], ["utils.GaussianSmoothing.conv"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "\"\"\"\n        Apply gaussian filter to input.\n        Arguments:\n            input (torch.Tensor): Input to apply gaussian filter on.\n        Returns:\n            filtered (torch.Tensor): Filtered output.\n        \"\"\"", "\n", "return", "self", ".", "conv", "(", "input", ",", "weight", "=", "self", ".", "weight", ",", "groups", "=", "self", ".", "groups", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.datasets.stanford_cars.StanfordCars.__init__": [[137, 159], ["[].squeeze", "range", "len", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "len", "str", "stanford_cars.StanfordCars.img_label_list.append", "[].astype().squeeze", "scipy.io.loadmat", "[].astype"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "root", ",", "train", ",", "transform", "=", "None", ")", ":", "\n", "        ", "self", ".", "root", "=", "root", "\n", "self", ".", "transform", "=", "transform", "\n", "\n", "if", "train", ":", "\n", "            ", "annotations_file", "=", "os", ".", "path", ".", "join", "(", "root", ",", "'devkit'", ",", "'cars_train_annos.mat'", ")", "\n", "self", ".", "img_dir", "=", "os", ".", "path", ".", "join", "(", "root", ",", "'cars_train'", ")", "\n", "", "else", ":", "\n", "            ", "annotations_file", "=", "os", ".", "path", ".", "join", "(", "root", ",", "'devkit'", ",", "'cars_test_annos_withlabels.mat'", ")", "\n", "self", ".", "img_dir", "=", "os", ".", "path", ".", "join", "(", "root", ",", "'cars_test'", ")", "\n", "\n", "", "annotations", "=", "loadmat", "(", "annotations_file", ")", "[", "'annotations'", "]", ".", "squeeze", "(", ")", "\n", "\n", "self", ".", "img_label_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "annotations", ")", ")", ":", "\n", "            ", "sub_path", "=", "str", "(", "annotations", "[", "i", "]", "[", "5", "]", "[", "0", "]", ")", "\n", "#matlab indices so subtract 1", "\n", "label", "=", "annotations", "[", "i", "]", "[", "4", "]", ".", "astype", "(", "np", ".", "long", ")", ".", "squeeze", "(", ")", "-", "1", "\n", "self", ".", "img_label_list", ".", "append", "(", "(", "sub_path", ",", "label", ")", ")", "\n", "\n", "", "self", ".", "loader", "=", "default_loader", "\n", "self", ".", "length", "=", "len", "(", "self", ".", "img_label_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.datasets.stanford_cars.StanfordCars.__getitem__": [[160, 168], ["os.path.join", "stanford_cars.StanfordCars.loader", "stanford_cars.StanfordCars.transform"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "sub_path", ",", "target", "=", "self", ".", "img_label_list", "[", "index", "]", "\n", "path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "img_dir", ",", "sub_path", ")", "\n", "sample", "=", "self", ".", "loader", "(", "path", ")", "\n", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "sample", "=", "self", ".", "transform", "(", "sample", ")", "\n", "\n", "", "return", "sample", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.datasets.stanford_cars.StanfordCars.__len__": [[169, 171], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "length", "\n", "", "", ""]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.datasets.stanford_cars.get_stanford_cars_labels": [[113, 115], ["None"], "function", ["None"], ["def", "get_stanford_cars_labels", "(", ")", ":", "\n", "    ", "return", "STANFORD_CARS_LABELS", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.datasets.stanford_cars.get_stanford_cars": [[116, 135], ["utils.datasets.augmentations.imagenet_augmentation.get_imageNet_augmentation", "paths.get_stanford_cars_path", "stanford_cars.StanfordCars", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader"], "function", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.augmentations.imagenet_augmentation.get_imageNet_augmentation", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.datasets.paths.get_stanford_cars_path"], ["", "def", "get_stanford_cars", "(", "train", "=", "True", ",", "batch_size", "=", "128", ",", "augm_type", "=", "'none'", ",", "shuffle", "=", "None", ",", "size", "=", "224", ",", "\n", "num_workers", "=", "8", ",", "config_dict", "=", "None", ")", ":", "\n", "    ", "if", "shuffle", "is", "None", ":", "\n", "        ", "shuffle", "=", "train", "\n", "\n", "", "augm_config", "=", "{", "}", "\n", "transform", "=", "get_imageNet_augmentation", "(", "augm_type", ",", "out_size", "=", "size", ",", "config_dict", "=", "augm_config", ")", "\n", "\n", "path", "=", "get_stanford_cars_path", "(", ")", "\n", "dataset", "=", "StanfordCars", "(", "path", ",", "train", ",", "transform", "=", "transform", ")", "\n", "loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "dataset", ",", "batch_size", "=", "batch_size", ",", "\n", "shuffle", "=", "shuffle", ",", "num_workers", "=", "num_workers", ")", "\n", "\n", "if", "config_dict", "is", "not", "None", ":", "\n", "        ", "config_dict", "[", "'Dataset'", "]", "=", "'Stanford Cars'", "\n", "config_dict", "[", "'Batch out_size'", "]", "=", "batch_size", "\n", "config_dict", "[", "'Augmentation'", "]", "=", "augm_config", "\n", "\n", "", "return", "loader", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.datasets.cifar_corrupted.CIFARCorrupted.__init__": [[106, 142], ["os.path.join", "numpy.load", "numpy.zeros", "enumerate", "len", "os.path.join", "NotImplementedError", "numpy.load"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "path", ",", "split", "=", "'benchmark'", ",", "severity", "=", "1", ",", "transform", "=", "None", ")", ":", "\n", "        ", "self", ".", "transform", "=", "transform", "\n", "\n", "if", "split", "==", "'benchmark'", ":", "\n", "            ", "corruptions", "=", "BENCHMARK_CORRUPTIONS", "\n", "", "elif", "split", "==", "'extra'", ":", "\n", "            ", "corruptions", "=", "EXTRA_CORRUPTIONS", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", ")", "\n", "\n", "", "assert", "(", "(", "severity", ">=", "1", ")", "&", "(", "severity", "<=", "5", ")", ")", "\n", "\n", "labels_file", "=", "os", ".", "path", ".", "join", "(", "path", ",", "_LABELS_FILENAME", ")", "\n", "labels", "=", "np", ".", "load", "(", "labels_file", ")", "\n", "num_images", "=", "labels", ".", "shape", "[", "0", "]", "//", "5", "\n", "# Labels are stacked 5 times so we can just read the first iteration", "\n", "self", ".", "labels", "=", "labels", "[", ":", "num_images", "]", "\n", "\n", "total_images", "=", "len", "(", "corruptions", ")", "*", "num_images", "\n", "images", "=", "np", ".", "zeros", "(", "(", "total_images", ",", "32", ",", "32", ",", "3", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "\n", "severity_idx_start", "=", "(", "severity", "-", "1", ")", "*", "num_images", "\n", "severity_idx_end", "=", "(", "severity", ")", "*", "num_images", "\n", "\n", "for", "i", ",", "corruption", "in", "enumerate", "(", "corruptions", ")", ":", "\n", "            ", "idx_start", "=", "i", "*", "num_images", "\n", "idx_end", "=", "(", "i", "+", "1", ")", "*", "num_images", "\n", "\n", "images_i_filename", "=", "os", ".", "path", ".", "join", "(", "path", ",", "_CORRUPTIONS_TO_FILENAMES", "[", "corruption", "]", ")", "\n", "images_i", "=", "np", ".", "load", "(", "images_i_filename", ")", "[", "severity_idx_start", ":", "severity_idx_end", "]", "\n", "\n", "images", "[", "idx_start", ":", "idx_end", "]", "=", "images_i", "\n", "\n", "", "self", ".", "images", "=", "images", "\n", "self", ".", "length", "=", "total_images", "\n", "self", ".", "images_per_corruption", "=", "num_images", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.datasets.cifar_corrupted.CIFARCorrupted.__getitem__": [[143, 153], ["PIL.Image.fromarray", "cifar_corrupted.CIFARCorrupted.transform"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "img", "=", "self", ".", "images", "[", "index", "]", "\n", "img", "=", "Image", ".", "fromarray", "(", "img", ")", "\n", "\n", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "\n", "", "label_index", "=", "index", "%", "self", ".", "images_per_corruption", "\n", "label", "=", "self", ".", "labels", "[", "label_index", "]", "\n", "return", "img", ",", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.datasets.cifar_corrupted.CIFARCorrupted.__len__": [[154, 156], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "length", "\n", "", "", ""]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.datasets.cifar_corrupted.get_CIFAR10_C": [[65, 84], ["utils.datasets.augmentations.cifar_augmentation.get_cifar10_augmentation", "paths.get_CIFAR10_C_path", "cifar_corrupted.CIFARCorrupted", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader"], "function", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.augmentations.cifar_augmentation.get_cifar10_augmentation", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.datasets.paths.get_CIFAR10_C_path"], ["def", "get_CIFAR10_C", "(", "split", "=", "'benchmark'", ",", "severity", "=", "1", ",", "batch_size", "=", "None", ",", "shuffle", "=", "False", ",", "\n", "augm_type", "=", "'none'", ",", "cutout_window", "=", "16", ",", "num_workers", "=", "2", ",", "size", "=", "32", ",", "config_dict", "=", "None", ")", ":", "\n", "    ", "if", "batch_size", "==", "None", ":", "\n", "        ", "batch_size", "=", "DEFAULT_TEST_BATCHSIZE", "\n", "\n", "", "augm_config", "=", "{", "}", "\n", "transform", "=", "get_cifar10_augmentation", "(", "type", "=", "augm_type", ",", "cutout_window", "=", "cutout_window", ",", "out_size", "=", "size", ",", "config_dict", "=", "augm_config", ")", "\n", "\n", "path", "=", "get_CIFAR10_C_path", "(", ")", "\n", "dataset", "=", "CIFARCorrupted", "(", "path", ",", "split", "=", "split", ",", "severity", "=", "severity", ",", "transform", "=", "transform", ")", "\n", "loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "dataset", ",", "batch_size", "=", "batch_size", ",", "\n", "shuffle", "=", "shuffle", ",", "num_workers", "=", "num_workers", ")", "\n", "\n", "if", "config_dict", "is", "not", "None", ":", "\n", "        ", "config_dict", "[", "'Dataset'", "]", "=", "'Cifar10-C'", "\n", "config_dict", "[", "'Batch out_size'", "]", "=", "batch_size", "\n", "config_dict", "[", "'Augmentation'", "]", "=", "augm_config", "\n", "\n", "", "return", "loader", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.datasets.cifar_corrupted.get_CIFAR100_C": [[85, 104], ["utils.datasets.augmentations.cifar_augmentation.get_cifar10_augmentation", "paths.get_CIFAR100_C_path", "cifar_corrupted.CIFARCorrupted", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader"], "function", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.augmentations.cifar_augmentation.get_cifar10_augmentation", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.datasets.paths.get_CIFAR100_C_path"], ["", "def", "get_CIFAR100_C", "(", "split", "=", "'benchmark'", ",", "severity", "=", "1", ",", "batch_size", "=", "None", ",", "shuffle", "=", "False", ",", "\n", "augm_type", "=", "'none'", ",", "cutout_window", "=", "8", ",", "num_workers", "=", "2", ",", "size", "=", "32", ",", "config_dict", "=", "None", ")", ":", "\n", "    ", "if", "batch_size", "==", "None", ":", "\n", "        ", "batch_size", "=", "DEFAULT_TEST_BATCHSIZE", "\n", "\n", "", "augm_config", "=", "{", "}", "\n", "transform", "=", "get_cifar10_augmentation", "(", "type", "=", "augm_type", ",", "cutout_window", "=", "cutout_window", ",", "out_size", "=", "size", ",", "config_dict", "=", "augm_config", ")", "\n", "\n", "path", "=", "get_CIFAR100_C_path", "(", ")", "\n", "dataset", "=", "CIFARCorrupted", "(", "path", ",", "split", "=", "split", ",", "severity", "=", "severity", ",", "transform", "=", "transform", ")", "\n", "loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "dataset", ",", "batch_size", "=", "batch_size", ",", "\n", "shuffle", "=", "shuffle", ",", "num_workers", "=", "num_workers", ")", "\n", "\n", "if", "config_dict", "is", "not", "None", ":", "\n", "        ", "config_dict", "[", "'Dataset'", "]", "=", "'Cifar100-C'", "\n", "config_dict", "[", "'Batch out_size'", "]", "=", "batch_size", "\n", "config_dict", "[", "'Augmentation'", "]", "=", "augm_config", "\n", "\n", "", "return", "loader", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.datasets.flowers.Flowers.__init__": [[62, 84], ["[].astype", "scipy.io.loadmat", "len", "os.path.join", "numpy.concatenate", "scipy.io.loadmat", "ValueError", "os.path.join"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "root", ",", "split", ",", "transform", "=", "None", ")", ":", "\n", "        ", "self", ".", "root", "=", "root", "\n", "self", ".", "labels", "=", "loadmat", "(", "os", ".", "path", ".", "join", "(", "root", ",", "'imagelabels.mat'", ")", ")", "[", "'labels'", "]", "[", "0", "]", ".", "astype", "(", "np", ".", "long", ")", "\n", "self", ".", "transform", "=", "transform", "\n", "setids", "=", "loadmat", "(", "os", ".", "path", ".", "join", "(", "root", ",", "'setid.mat'", ")", ")", "\n", "\n", "if", "split", "==", "'train'", ":", "\n", "            ", "self", ".", "indices", "=", "setids", "[", "'trnid'", "]", "[", "0", "]", "\n", "", "elif", "split", "==", "'val'", ":", "\n", "            ", "self", ".", "indices", "=", "setids", "[", "'valid'", "]", "[", "0", "]", "\n", "", "elif", "split", "==", "'train_val'", ":", "\n", "            ", "trn_idcs", "=", "setids", "[", "'trnid'", "]", "[", "0", "]", "\n", "val_idcs", "=", "setids", "[", "'valid'", "]", "[", "0", "]", "\n", "self", ".", "indices", "=", "np", ".", "concatenate", "(", "[", "trn_idcs", ",", "val_idcs", "]", ")", "\n", "", "elif", "split", "==", "'test'", ":", "\n", "            ", "self", ".", "indices", "=", "setids", "[", "'tstid'", "]", "[", "0", "]", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", ")", "\n", "\n", "", "self", ".", "indices", "=", "self", ".", "indices", "\n", "self", ".", "loader", "=", "default_loader", "\n", "self", ".", "length", "=", "len", "(", "self", ".", "indices", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.datasets.flowers.Flowers.__getitem__": [[85, 95], ["os.path.join", "flowers.Flowers.loader", "flowers.Flowers.transform"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "img_idx", "=", "self", ".", "indices", "[", "index", "]", "\n", "#matlab starts with 1, so decrease both index and target idx by 1", "\n", "target", "=", "self", ".", "labels", "[", "img_idx", "-", "1", "]", "-", "1", "\n", "path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "'jpg'", ",", "f'image_{img_idx:05d}.jpg'", ")", "\n", "sample", "=", "self", ".", "loader", "(", "path", ")", "\n", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "sample", "=", "self", ".", "transform", "(", "sample", ")", "\n", "\n", "", "return", "sample", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.datasets.flowers.Flowers.__len__": [[96, 98], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "length", "\n", "", "", ""]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.datasets.flowers.get_flowers_labels": [[40, 42], ["None"], "function", ["None"], ["def", "get_flowers_labels", "(", ")", ":", "\n", "    ", "return", "FLOWERS_LABELS", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.datasets.flowers.get_flowers": [[43, 59], ["utils.datasets.augmentations.imagenet_augmentation.get_imageNet_augmentation", "paths.get_flowers_path", "flowers.Flowers", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader"], "function", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.augmentations.imagenet_augmentation.get_imageNet_augmentation", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.datasets.paths.get_flowers_path"], ["", "def", "get_flowers", "(", "split", "=", "'train'", ",", "batch_size", "=", "128", ",", "shuffle", "=", "True", ",", "augm_type", "=", "'none'", ",", "\n", "size", "=", "224", ",", "num_workers", "=", "8", ",", "config_dict", "=", "None", ")", ":", "\n", "\n", "    ", "augm_config", "=", "{", "}", "\n", "transform", "=", "get_imageNet_augmentation", "(", "augm_type", ",", "out_size", "=", "size", ",", "config_dict", "=", "augm_config", ")", "\n", "path", "=", "get_flowers_path", "(", ")", "\n", "dataset", "=", "Flowers", "(", "path", ",", "split", ",", "transform", "=", "transform", ")", "\n", "loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "dataset", ",", "batch_size", "=", "batch_size", ",", "\n", "shuffle", "=", "shuffle", ",", "num_workers", "=", "num_workers", ")", "\n", "\n", "if", "config_dict", "is", "not", "None", ":", "\n", "        ", "config_dict", "[", "'Dataset'", "]", "=", "'Flowers'", "\n", "config_dict", "[", "'Batch out_size'", "]", "=", "batch_size", "\n", "config_dict", "[", "'Augmentation'", "]", "=", "augm_config", "\n", "\n", "", "return", "loader", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.datasets.imagenet_natural_adversarials.get_imagenet_o": [[12, 25], ["utils.datasets.augmentations.imagenet_augmentation.get_imageNet_augmentation", "paths.get_imagenet_o_path", "torchvision.datasets.ImageFolder", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader"], "function", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.augmentations.imagenet_augmentation.get_imageNet_augmentation", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.datasets.paths.get_imagenet_o_path"], ["def", "get_imagenet_o", "(", "batch_size", "=", "None", ",", "shuffle", "=", "False", ",", "augm_type", "=", "'none'", ",", "\n", "num_workers", "=", "8", ",", "size", "=", "224", ")", ":", "\n", "    ", "if", "batch_size", "==", "None", ":", "\n", "        ", "batch_size", "=", "DEFAULT_TEST_BATCHSIZE", "\n", "\n", "", "transform", "=", "get_imageNet_augmentation", "(", "type", "=", "augm_type", ",", "out_size", "=", "size", ")", "\n", "\n", "path", "=", "get_imagenet_o_path", "(", ")", "\n", "\n", "dataset", "=", "datasets", ".", "ImageFolder", "(", "path", ",", "transform", "=", "transform", ")", "\n", "loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "dataset", ",", "batch_size", "=", "batch_size", ",", "\n", "shuffle", "=", "shuffle", ",", "num_workers", "=", "num_workers", ")", "\n", "return", "loader", "\n", "", ""]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.datasets.svhn.SVHNTrainExtraCombo.__init__": [[19, 26], ["paths.get_svhn_path", "torchvision.datasets.SVHN", "torchvision.datasets.SVHN", "combo_dataset.ComboDataset.__init__", "print", "len", "len"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.datasets.paths.get_svhn_path", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models_32x32.shake_pyramidnet.ShakePyramidNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "transform", "=", "None", ")", ":", "\n", "        ", "path", "=", "get_svhn_path", "(", ")", "\n", "train", "=", "datasets", ".", "SVHN", "(", "path", ",", "split", "=", "'train'", ",", "transform", "=", "transform", ",", "download", "=", "True", ")", "\n", "extra", "=", "datasets", ".", "SVHN", "(", "path", ",", "split", "=", "'extra'", ",", "transform", "=", "transform", ",", "download", "=", "True", ")", "\n", "\n", "super", "(", ")", ".", "__init__", "(", "[", "train", ",", "extra", "]", ")", "\n", "print", "(", "f'SVHN Train + Extra - Train: {len(train)} - Extra {len(extra)} - Total {self.length}'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.datasets.svhn.get_SVHN_labels": [[14, 17], ["None"], "function", ["None"], ["def", "get_SVHN_labels", "(", ")", ":", "\n", "    ", "class_labels", "=", "[", "'0'", ",", "'1'", ",", "'2'", ",", "'3'", ",", "'4'", ",", "'5'", ",", "'6'", ",", "'7'", ",", "'8'", ",", "'9'", "]", "\n", "return", "class_labels", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.datasets.svhn.get_SVHN": [[27, 59], ["utils.datasets.augmentations.svhn_augmentation.get_SVHN_augmentation", "paths.get_svhn_path", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "svhn.SVHNTrainExtraCombo", "torchvision.datasets.SVHN"], "function", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.augmentations.svhn_augmentation.get_SVHN_augmentation", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.datasets.paths.get_svhn_path"], ["", "", "def", "get_SVHN", "(", "split", "=", "'train'", ",", "shuffle", "=", "None", ",", "batch_size", "=", "None", ",", "augm_type", "=", "'none'", ",", "size", "=", "32", ",", "num_workers", "=", "4", ",", "config_dict", "=", "None", ")", ":", "\n", "    ", "if", "batch_size", "==", "None", ":", "\n", "        ", "if", "split", "in", "[", "'train'", ",", "'extra'", "]", ":", "\n", "            ", "batch_size", "=", "DEFAULT_TRAIN_BATCHSIZE", "\n", "", "else", ":", "\n", "            ", "batch_size", "=", "DEFAULT_TEST_BATCHSIZE", "\n", "\n", "", "", "if", "shuffle", "is", "None", ":", "\n", "        ", "if", "split", "in", "[", "'train'", ",", "'extra'", "]", ":", "\n", "            ", "shuffle", "=", "True", "\n", "", "else", ":", "\n", "            ", "shuffle", "=", "False", "\n", "\n", "", "", "augm_config", "=", "{", "}", "\n", "transform", "=", "get_SVHN_augmentation", "(", "augm_type", ",", "out_size", "=", "size", ",", "config_dict", "=", "augm_config", ")", "\n", "\n", "path", "=", "get_svhn_path", "(", ")", "\n", "if", "split", "==", "'svhn_train_extra'", ":", "\n", "        ", "dataset", "=", "SVHNTrainExtraCombo", "(", "transform", ")", "\n", "", "else", ":", "\n", "        ", "dataset", "=", "datasets", ".", "SVHN", "(", "path", ",", "split", "=", "split", ",", "transform", "=", "transform", ",", "download", "=", "True", ")", "\n", "\n", "", "loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "dataset", ",", "batch_size", "=", "batch_size", ",", "\n", "shuffle", "=", "shuffle", ",", "num_workers", "=", "num_workers", ")", "\n", "\n", "if", "config_dict", "is", "not", "None", ":", "\n", "        ", "config_dict", "[", "'Dataset'", "]", "=", "'SVHN'", "\n", "config_dict", "[", "'SVHN Split'", "]", "=", "split", "\n", "config_dict", "[", "'Batch out_size'", "]", "=", "batch_size", "\n", "config_dict", "[", "'Augmentation'", "]", "=", "augm_config", "\n", "\n", "", "return", "loader", "\n", "", ""]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.augmentations.imagenet_augmentation.Lighting.__init__": [[25, 29], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "alphastd", ",", "eigval", ",", "eigvec", ")", ":", "\n", "        ", "self", ".", "alphastd", "=", "alphastd", "\n", "self", ".", "eigval", "=", "eigval", "\n", "self", ".", "eigvec", "=", "eigvec", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.augmentations.imagenet_augmentation.Lighting.__call__": [[30, 41], ["img.new().resize_().normal_", "imagenet_augmentation.Lighting.eigvec.type_as().clone().mul().mul().sum().squeeze", "img.add", "imagenet_augmentation.Lighting.view().expand_as", "img.new().resize_", "imagenet_augmentation.Lighting.eigvec.type_as().clone().mul().mul().sum", "imagenet_augmentation.Lighting.view", "img.new", "imagenet_augmentation.Lighting.eigvec.type_as().clone().mul().mul", "imagenet_augmentation.Lighting.eigval.view().expand", "imagenet_augmentation.Lighting.eigvec.type_as().clone().mul", "img.new().resize_().normal_.view().expand", "imagenet_augmentation.Lighting.eigval.view", "imagenet_augmentation.Lighting.eigvec.type_as().clone", "img.new().resize_().normal_.view", "imagenet_augmentation.Lighting.eigvec.type_as"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "if", "self", ".", "alphastd", "==", "0", ":", "\n", "            ", "return", "img", "\n", "\n", "", "alpha", "=", "img", ".", "new", "(", ")", ".", "resize_", "(", "3", ")", ".", "normal_", "(", "0", ",", "self", ".", "alphastd", ")", "\n", "rgb", "=", "self", ".", "eigvec", ".", "type_as", "(", "img", ")", ".", "clone", "(", ")", ".", "mul", "(", "alpha", ".", "view", "(", "1", ",", "3", ")", ".", "expand", "(", "3", ",", "3", ")", ")", ".", "mul", "(", "self", ".", "eigval", ".", "view", "(", "1", ",", "3", ")", ".", "expand", "(", "3", ",", "3", ")", ")", ".", "sum", "(", "1", ")", ".", "squeeze", "(", ")", "\n", "\n", "return", "img", ".", "add", "(", "rgb", ".", "view", "(", "3", ",", "1", ",", "1", ")", ".", "expand_as", "(", "img", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.augmentations.imagenet_augmentation.get_imageNet_augmentation": [[46, 139], ["torchvision.transforms.Compose", "torchvision.transforms.Compose", "print", "int", "transform_list.append", "torch.FloatTensor", "transform_list.append", "transform_list.append", "torchvision.transforms.Resize", "torchvision.transforms.ToTensor", "transform_list.append", "transform_list.append", "torchvision.transforms.Compose", "torchvision.transforms.ToTensor", "cutout.Cutout", "torchvision.transforms.ToTensor", "torchvision.transforms.RandomResizedCrop", "torchvision.transforms.RandomHorizontalFlip", "torchvision.transforms.ColorJitter", "torchvision.transforms.ToTensor", "imagenet_augmentation.Lighting", "torchvision.transforms.Resize", "torchvision.transforms.CenterCrop", "int", "torchvision.transforms.transforms.RandomResizedCrop", "torchvision.transforms.RandomHorizontalFlip", "print", "torchvision.transforms.transforms.Resize", "torchvision.transforms.transforms.RandomCrop", "torchvision.transforms.transforms.RandomHorizontalFlip", "print", "int", "print", "int", "torchvision.transforms.RandomResizedCrop", "torchvision.transforms.RandomHorizontalFlip", "autoaugment.ImageNetPolicy", "int", "tuple", "ValueError", "torchvision.transforms.transforms.Resize", "torchvision.transforms.transforms.RandomCrop", "torchvision.transforms.RandomHorizontalFlip", "autoaugment.CIFAR10Policy", "int"], "function", ["None"], ["def", "get_imageNet_augmentation", "(", "type", "=", "'default'", ",", "out_size", "=", "224", ",", "config_dict", "=", "None", ")", ":", "\n", "    ", "if", "type", "==", "'none'", "or", "type", "is", "None", ":", "\n", "        ", "transform_list", "=", "[", "\n", "transforms", ".", "Resize", "(", "(", "out_size", ",", "out_size", ")", ",", "interpolation", "=", "InterpolationMode", ".", "BICUBIC", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", "\n", "]", "\n", "transform", "=", "transforms", ".", "Compose", "(", "transform_list", ")", "\n", "return", "transform", "\n", "", "elif", "type", "==", "'madry'", ":", "\n", "# Special transforms for ImageNet(s)", "\n", "        ", "\"\"\"\n        Standard training ref_data augmentation for ImageNet-scale datasets: Random crop,\n        Random flip, Color Jitter, and Lighting Transform (see https://git.io/fhBOc)\n        \"\"\"", "\n", "transform_list", "=", "[", "\n", "transforms", ".", "RandomResizedCrop", "(", "out_size", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ColorJitter", "(", "\n", "brightness", "=", "0.1", ",", "\n", "contrast", "=", "0.1", ",", "\n", "saturation", "=", "0.1", "\n", ")", ",", "]", "\n", "\n", "transform_list", ".", "append", "(", "transforms", ".", "ToTensor", "(", ")", ")", "\n", "transform_list", ".", "append", "(", "Lighting", "(", "0.05", ",", "IMAGENET_PCA", "[", "'eigval'", "]", ",", "\n", "IMAGENET_PCA", "[", "'eigvec'", "]", ")", ")", "\n", "transform", "=", "transforms", ".", "Compose", "(", "transform_list", ")", "\n", "return", "transform", "\n", "", "elif", "type", "==", "'test'", "or", "type", "is", "None", ":", "\n", "        ", "transform_list", "=", "[", "\n", "transforms", ".", "Resize", "(", "int", "(", "256", "/", "224", "*", "out_size", ")", ")", ",", "\n", "transforms", ".", "CenterCrop", "(", "out_size", ")", ",", "\n", "]", "\n", "", "elif", "type", "==", "'default'", ":", "\n", "        ", "transform_list", "=", "[", "\n", "transforms", ".", "transforms", ".", "RandomResizedCrop", "(", "out_size", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "]", "\n", "", "elif", "type", "==", "'big_transfer'", "or", "type", "==", "'big_transfer_128'", ":", "\n", "        ", "if", "type", "==", "'big_transfer'", ":", "\n", "            ", "if", "out_size", "!=", "480", ":", "\n", "                ", "print", "(", "f'Out out_size of {out_size} detected but Big Transfer is supposed to be used with 480'", ")", "\n", "pre_crop_size", "=", "int", "(", "out_size", "*", "(", "512", "/", "480", ")", ")", "\n", "", "else", ":", "\n", "                ", "pre_crop_size", "=", "512", "\n", "", "", "else", ":", "\n", "            ", "if", "out_size", "!=", "128", ":", "\n", "                ", "print", "(", "f'Out out_size of {out_size} detected but Big Transfer 128 is supposed to be used with 128'", ")", "\n", "pre_crop_size", "=", "int", "(", "out_size", "*", "(", "160", "/", "128", ")", ")", "\n", "", "else", ":", "\n", "                ", "pre_crop_size", "=", "160", "\n", "\n", "", "", "print", "(", "f'BigTransfer augmentation: Pre crop {pre_crop_size} - Out Size {out_size}'", ")", "\n", "transform_list", "=", "[", "\n", "transforms", ".", "transforms", ".", "Resize", "(", "(", "pre_crop_size", ",", "pre_crop_size", ")", ")", ",", "\n", "transforms", ".", "transforms", ".", "RandomCrop", "(", "(", "out_size", ",", "out_size", ")", ")", ",", "\n", "transforms", ".", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "]", "\n", "", "elif", "type", "==", "'autoaugment'", ":", "\n", "        ", "transform_list", "=", "[", "\n", "transforms", ".", "RandomResizedCrop", "(", "out_size", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "ImageNetPolicy", "(", "fillcolor", "=", "ImageNet_mean_int", ")", ",", "\n", "]", "\n", "", "elif", "type", "==", "'autoaugment_cutout'", ":", "\n", "        ", "padding_size", "=", "int", "(", "4", "*", "out_size", "/", "32", ")", "\n", "mean_int", "=", "tuple", "(", "int", "(", "255.", "*", "v", ")", "for", "v", "in", "CIFAR10_mean", ")", "\n", "\n", "transform_list", "=", "[", "\n", "transforms", ".", "transforms", ".", "Resize", "(", "(", "out_size", ",", "out_size", ")", ")", ",", "\n", "transforms", ".", "transforms", ".", "RandomCrop", "(", "(", "out_size", ",", "out_size", ")", ",", "padding", "=", "padding_size", ",", "fill", "=", "mean_int", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "CIFAR10Policy", "(", "fillcolor", "=", "mean_int", ")", ",", "\n", "]", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "f'augmentation type - {type} - not supported'", ")", "\n", "\n", "", "if", "'cutout'", "in", "type", ":", "\n", "        ", "print", "(", "'Warning using CIFAR10 Cutout'", ")", "\n", "cutout_size", "=", "int", "(", "0.5", "*", "out_size", ")", "\n", "transform_list", ".", "append", "(", "transforms", ".", "ToTensor", "(", ")", ")", "\n", "CIFAR10_mean_tensor", "=", "torch", ".", "FloatTensor", "(", "CIFAR10_mean", ")", "\n", "transform_list", ".", "append", "(", "Cutout", "(", "n_holes", "=", "1", ",", "length", "=", "cutout_size", ",", "fill_color", "=", "CIFAR10_mean_tensor", ")", ")", "\n", "", "else", ":", "\n", "        ", "transform_list", ".", "append", "(", "transforms", ".", "ToTensor", "(", ")", ")", "\n", "\n", "", "transform", "=", "transforms", ".", "Compose", "(", "transform_list", ")", "\n", "\n", "if", "config_dict", "is", "not", "None", ":", "\n", "        ", "config_dict", "[", "'type'", "]", "=", "type", "\n", "config_dict", "[", "'Output out_size'", "]", "=", "out_size", "\n", "\n", "", "return", "transform", "", "", ""]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.augmentations.cifar_augmentation.get_cifar10_augmentation": [[16, 123], ["torch.tensor", "tuple", "torch.FloatTensor", "int", "torchvision.transforms.Compose", "augm_parameters.items", "int", "transform_list.append", "transform_list.append", "int", "print", "transform_list.append", "transform_list.append", "transform_list.append", "print", "transform_list.append", "transform_list.append", "transform_list.append", "torchvision.transforms.RandomCrop", "torchvision.transforms.RandomHorizontalFlip", "float", "torchvision.transforms.Resize", "torchvision.transforms.ToTensor", "cutout.Cutout", "torchvision.transforms.Resize", "torchvision.transforms.ToTensor", "torchvision.transforms.ToTensor", "cutout.Cutout", "torchvision.transforms.ToTensor", "torchvision.transforms.RandomCrop", "torchvision.transforms.RandomHorizontalFlip", "torchvision.transforms.ColorJitter", "torchvision.transforms.RandomGrayscale", "torchvision.transforms.RandomCrop", "torchvision.transforms.RandomHorizontalFlip", "torchvision.transforms.ColorJitter", "torchvision.transforms.RandomRotation", "torchvision.transforms.RandomCrop", "torchvision.transforms.RandomHorizontalFlip", "autoaugment.CIFAR10Policy", "torchvision.transforms.RandomCrop", "torchvision.transforms.RandomHorizontalFlip", "autoaugment.ImageNetPolicy", "print", "ValueError", "torchvision.transforms.transforms.Resize", "torchvision.transforms.transforms.RandomCrop", "torchvision.transforms.transforms.RandomHorizontalFlip", "print", "int", "print", "int"], "function", ["None"], ["def", "get_cifar10_augmentation", "(", "type", "=", "'default'", ",", "cutout_window", "=", "16", ",", "out_size", "=", "32", ",", "in_size", "=", "32", ",", "magnitude_factor", "=", "1", ",", "\n", "augm_parameters", "=", "None", ",", "config_dict", "=", "None", ")", ":", "\n", "    ", "if", "augm_parameters", "is", "None", ":", "\n", "        ", "augm_parameters", "=", "DEFAULT_CIFAR10_PARAMETERS", "\n", "\n", "", "cutout_color", "=", "torch", ".", "tensor", "(", "[", "0.", ",", "0.", ",", "0.", "]", ")", "\n", "mean_int", "=", "tuple", "(", "int", "(", "255.", "*", "v", ")", "for", "v", "in", "augm_parameters", "[", "'mean'", "]", ")", "\n", "mean_tensor", "=", "torch", ".", "FloatTensor", "(", "augm_parameters", "[", "'mean'", "]", ")", "\n", "padding_size", "=", "int", "(", "(", "1.", "-", "augm_parameters", "[", "'crop_pct'", "]", ")", "*", "in_size", ")", "\n", "interpolation_mode", "=", "INTERPOLATION_STRING_TO_TYPE", "[", "augm_parameters", "[", "'interpolation'", "]", "]", "\n", "force_no_resize", "=", "False", "\n", "\n", "if", "type", "==", "'none'", "or", "type", "is", "None", ":", "\n", "        ", "transform_list", "=", "[", "]", "\n", "", "elif", "type", "==", "'default'", "or", "type", "==", "'default_cutout'", ":", "\n", "        ", "transform_list", "=", "[", "\n", "transforms", ".", "RandomCrop", "(", "in_size", ",", "padding", "=", "padding_size", ",", "fill", "=", "mean_int", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "]", "\n", "cutout_color", "=", "mean_tensor", "\n", "", "elif", "'jitter'", "in", "type", ":", "\n", "#jitter strength", "\n", "        ", "s", "=", "float", "(", "type", "[", "7", ":", "]", ")", "\n", "transform_list", "=", "[", "\n", "transforms", ".", "RandomCrop", "(", "in_size", ",", "padding", "=", "padding_size", ",", "fill", "=", "mean_int", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ColorJitter", "(", "0.8", "*", "s", ",", "0.8", "*", "s", ",", "0.8", "*", "s", ",", "0.2", "*", "s", ")", ",", "\n", "transforms", ".", "RandomGrayscale", "(", "p", "=", "0.2", ")", ",", "\n", "]", "\n", "cutout_color", "=", "mean_tensor", "\n", "", "elif", "type", "==", "'madry'", "or", "type", "==", "'madry_cutout'", ":", "\n", "        ", "transform_list", "=", "[", "\n", "transforms", ".", "RandomCrop", "(", "in_size", ",", "padding", "=", "padding_size", ",", "fill", "=", "mean_int", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ColorJitter", "(", ".25", ",", ".25", ",", ".25", ")", ",", "\n", "transforms", ".", "RandomRotation", "(", "2", ")", ",", "\n", "]", "\n", "cutout_color", "=", "mean_tensor", "\n", "", "elif", "type", "==", "'autoaugment'", "or", "type", "==", "'autoaugment_cutout'", ":", "\n", "        ", "transform_list", "=", "[", "\n", "transforms", ".", "RandomCrop", "(", "in_size", ",", "padding", "=", "padding_size", ",", "fill", "=", "mean_int", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "CIFAR10Policy", "(", "fillcolor", "=", "mean_int", ",", "magnitude_factor", "=", "magnitude_factor", ")", ",", "\n", "]", "\n", "cutout_color", "=", "mean_tensor", "\n", "", "elif", "type", "==", "'in_autoaugment'", "or", "type", "==", "'in_autoaugment_cutout'", ":", "\n", "        ", "transform_list", "=", "[", "\n", "transforms", ".", "RandomCrop", "(", "in_size", ",", "padding", "=", "padding_size", ",", "fill", "=", "mean_int", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "ImageNetPolicy", "(", "fillcolor", "=", "mean_int", ")", ",", "\n", "]", "\n", "cutout_color", "=", "mean_tensor", "\n", "", "elif", "type", "==", "'big_transfer'", "or", "type", "==", "'big_transfer_128'", ":", "\n", "        ", "if", "type", "==", "'big_transfer'", ":", "\n", "            ", "if", "out_size", "!=", "480", ":", "\n", "                ", "print", "(", "f'Out out_size of {out_size} detected but Big Transfer is supposed to be used with 480'", ")", "\n", "pre_crop_size", "=", "int", "(", "out_size", "*", "(", "512", "/", "480", ")", ")", "\n", "", "else", ":", "\n", "                ", "pre_crop_size", "=", "512", "\n", "", "", "else", ":", "\n", "            ", "if", "out_size", "!=", "128", ":", "\n", "                ", "print", "(", "f'Out out_size of {out_size} detected but Big Transfer 128 is supposed to be used with 128'", ")", "\n", "pre_crop_size", "=", "int", "(", "out_size", "*", "(", "160", "/", "128", ")", ")", "\n", "", "else", ":", "\n", "                ", "pre_crop_size", "=", "160", "\n", "\n", "", "", "print", "(", "f'BigTransfer augmentation: Pre crop {pre_crop_size} - Out Size {out_size}'", ")", "\n", "transform_list", "=", "[", "\n", "transforms", ".", "transforms", ".", "Resize", "(", "(", "pre_crop_size", ",", "pre_crop_size", ")", ",", "interpolation", "=", "interpolation_mode", ")", ",", "\n", "transforms", ".", "transforms", ".", "RandomCrop", "(", "(", "out_size", ",", "out_size", ")", ")", ",", "\n", "transforms", ".", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "]", "\n", "force_no_resize", "=", "True", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "f'augmentation type - {type} - not supported'", ")", "\n", "\n", "", "if", "out_size", "!=", "in_size", "and", "not", "force_no_resize", ":", "\n", "        ", "if", "'cutout'", "in", "type", ":", "\n", "            ", "transform_list", ".", "append", "(", "transforms", ".", "Resize", "(", "out_size", ",", "interpolation", "=", "interpolation_mode", ")", ")", "\n", "transform_list", ".", "append", "(", "transforms", ".", "ToTensor", "(", ")", ")", "\n", "cutout_size", "=", "int", "(", "out_size", "/", "in_size", "*", "cutout_window", ")", "\n", "print", "(", "f'Relative Cutout window {cutout_window / in_size} - Absolute Cutout window: {cutout_size}'", ")", "\n", "transform_list", ".", "append", "(", "Cutout", "(", "n_holes", "=", "1", ",", "length", "=", "cutout_size", ",", "fill_color", "=", "cutout_color", ")", ")", "\n", "", "else", ":", "\n", "            ", "transform_list", ".", "append", "(", "transforms", ".", "Resize", "(", "out_size", ",", "interpolation", "=", "interpolation_mode", ")", ")", "\n", "transform_list", ".", "append", "(", "transforms", ".", "ToTensor", "(", ")", ")", "\n", "", "", "elif", "'cutout'", "in", "type", ":", "\n", "        ", "cutout_size", "=", "cutout_window", "\n", "print", "(", "f'Relative Cutout window {cutout_size / in_size} - Absolute Cutout window: {cutout_size}'", ")", "\n", "transform_list", ".", "append", "(", "transforms", ".", "ToTensor", "(", ")", ")", "\n", "transform_list", ".", "append", "(", "Cutout", "(", "n_holes", "=", "1", ",", "length", "=", "cutout_size", ",", "fill_color", "=", "cutout_color", ")", ")", "\n", "", "else", ":", "\n", "        ", "transform_list", ".", "append", "(", "transforms", ".", "ToTensor", "(", ")", ")", "\n", "\n", "", "transform", "=", "transforms", ".", "Compose", "(", "transform_list", ")", "\n", "\n", "if", "config_dict", "is", "not", "None", ":", "\n", "        ", "config_dict", "[", "'type'", "]", "=", "type", "\n", "config_dict", "[", "'Input size'", "]", "=", "in_size", "\n", "config_dict", "[", "'Output size'", "]", "=", "out_size", "\n", "config_dict", "[", "'Magnitude factor'", "]", "=", "magnitude_factor", "\n", "if", "'cutout'", "in", "type", ":", "\n", "            ", "config_dict", "[", "'Cutout out_size'", "]", "=", "cutout_size", "\n", "", "for", "key", ",", "value", "in", "augm_parameters", ".", "items", "(", ")", ":", "\n", "            ", "config_dict", "[", "key", "]", "=", "value", "\n", "\n", "", "", "return", "transform", "", "", ""]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.augmentations.svhn_augmentation.get_SVHN_augmentation": [[15, 77], ["tuple", "torch.FloatTensor", "int", "torchvision.transforms.Compose", "augm_parameters.items", "int", "transform_list.append", "transform_list.append", "int", "print", "transform_list.append", "transform_list.append", "transform_list.append", "print", "transform_list.append", "transform_list.append", "transform_list.append", "torchvision.transforms.RandomCrop", "torchvision.transforms.Resize", "torchvision.transforms.ToTensor", "utils.datasets.augmentations.cutout.Cutout", "torchvision.transforms.Resize", "torchvision.transforms.ToTensor", "torchvision.transforms.ToTensor", "utils.datasets.augmentations.cutout.Cutout", "torchvision.transforms.ToTensor", "torchvision.transforms.RandomCrop", "utils.datasets.augmentations.autoaugment.SVHNPolicy", "ValueError", "torchvision.transforms.RandomCrop", "utils.datasets.augmentations.autoaugment.CIFAR10Policy"], "function", ["None"], ["def", "get_SVHN_augmentation", "(", "augm_type", "=", "'none'", ",", "in_size", "=", "32", ",", "out_size", "=", "32", ",", "augm_parameters", "=", "None", ",", "config_dict", "=", "None", ")", ":", "\n", "    ", "if", "augm_parameters", "is", "None", ":", "\n", "        ", "augm_parameters", "=", "DEFAULT_SVHN_PARAMETERS", "\n", "\n", "", "mean_int", "=", "tuple", "(", "int", "(", "255.", "*", "v", ")", "for", "v", "in", "augm_parameters", "[", "'mean'", "]", ")", "\n", "mean_tensor", "=", "torch", ".", "FloatTensor", "(", "augm_parameters", "[", "'mean'", "]", ")", "\n", "padding_size", "=", "int", "(", "(", "1.", "-", "augm_parameters", "[", "'crop_pct'", "]", ")", "*", "in_size", ")", "\n", "interpolation_mode", "=", "INTERPOLATION_STRING_TO_TYPE", "[", "augm_parameters", "[", "'interpolation'", "]", "]", "\n", "\n", "if", "augm_type", "==", "'none'", ":", "\n", "        ", "transform_list", "=", "[", "]", "\n", "", "elif", "augm_type", "==", "'default'", "or", "augm_type", "==", "'default_cutout'", ":", "\n", "        ", "transform_list", "=", "[", "\n", "transforms", ".", "RandomCrop", "(", "in_size", ",", "padding", "=", "padding_size", ",", "fill", "=", "mean_int", ")", ",", "\n", "]", "\n", "", "elif", "augm_type", "==", "'autoaugment'", "or", "augm_type", "==", "'autoaugment_cutout'", ":", "\n", "        ", "transform_list", "=", "[", "\n", "transforms", ".", "RandomCrop", "(", "in_size", ",", "padding", "=", "padding_size", ",", "fill", "=", "mean_int", ")", ",", "\n", "SVHNPolicy", "(", "fillcolor", "=", "mean_int", ")", ",", "\n", "]", "\n", "", "elif", "augm_type", "==", "'cifar_autoaugment'", "or", "augm_type", "==", "'cifar_autoaugment_cutout'", ":", "\n", "        ", "transform_list", "=", "[", "\n", "transforms", ".", "RandomCrop", "(", "in_size", ",", "padding", "=", "padding_size", ",", "fill", "=", "mean_int", ")", ",", "\n", "CIFAR10Policy", "(", "fillcolor", "=", "mean_int", ")", ",", "\n", "]", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", ")", "\n", "\n", "", "cutout_window", "=", "16", "\n", "cutout_color", "=", "mean_tensor", "\n", "cutout_size", "=", "0", "\n", "\n", "if", "out_size", "!=", "in_size", ":", "\n", "        ", "if", "'cutout'", "in", "augm_type", ":", "\n", "            ", "transform_list", ".", "append", "(", "transforms", ".", "Resize", "(", "out_size", ",", "interpolation", "=", "interpolation_mode", ")", ")", "\n", "transform_list", ".", "append", "(", "transforms", ".", "ToTensor", "(", ")", ")", "\n", "cutout_size", "=", "int", "(", "out_size", "/", "in_size", "*", "cutout_window", ")", "\n", "print", "(", "f'Relative Cutout window {cutout_window / in_size} - Absolute Cutout window: {cutout_size}'", ")", "\n", "transform_list", ".", "append", "(", "Cutout", "(", "n_holes", "=", "1", ",", "length", "=", "cutout_size", ",", "fill_color", "=", "cutout_color", ")", ")", "\n", "", "else", ":", "\n", "            ", "transform_list", ".", "append", "(", "transforms", ".", "Resize", "(", "out_size", ",", "interpolation", "=", "interpolation_mode", ")", ")", "\n", "transform_list", ".", "append", "(", "transforms", ".", "ToTensor", "(", ")", ")", "\n", "", "", "elif", "'cutout'", "in", "augm_type", ":", "\n", "        ", "cutout_size", "=", "cutout_window", "\n", "print", "(", "f'Relative Cutout window {cutout_size / in_size} - Absolute Cutout window: {cutout_size}'", ")", "\n", "transform_list", ".", "append", "(", "transforms", ".", "ToTensor", "(", ")", ")", "\n", "transform_list", ".", "append", "(", "Cutout", "(", "n_holes", "=", "1", ",", "length", "=", "cutout_size", ",", "fill_color", "=", "cutout_color", ")", ")", "\n", "", "else", ":", "\n", "        ", "transform_list", ".", "append", "(", "transforms", ".", "ToTensor", "(", ")", ")", "\n", "\n", "", "transform", "=", "transforms", ".", "Compose", "(", "transform_list", ")", "\n", "\n", "if", "config_dict", "is", "not", "None", ":", "\n", "        ", "config_dict", "[", "'type'", "]", "=", "type", "\n", "config_dict", "[", "'Input size'", "]", "=", "in_size", "\n", "config_dict", "[", "'Output size'", "]", "=", "out_size", "\n", "if", "'cutout'", "in", "augm_type", ":", "\n", "            ", "config_dict", "[", "'Cutout out_size'", "]", "=", "cutout_size", "\n", "", "for", "key", ",", "value", "in", "augm_parameters", ".", "items", "(", ")", ":", "\n", "            ", "config_dict", "[", "key", "]", "=", "value", "\n", "\n", "", "", "return", "transform", "", "", ""]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.augmentations.cutout.Cutout.__init__": [[13, 17], ["torch.tensor"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "n_holes", ",", "length", ",", "fill_color", "=", "torch", ".", "tensor", "(", "[", "0", ",", "0", ",", "0", "]", ")", ")", ":", "\n", "        ", "self", ".", "n_holes", "=", "n_holes", "\n", "self", ".", "length", "=", "length", "\n", "self", ".", "fill_color", "=", "fill_color", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.augmentations.cutout.Cutout.__call__": [[18, 47], ["numpy.ones", "range", "torch.from_numpy", "mask.expand_as.expand_as.expand_as", "numpy.random.randint", "numpy.random.randint", "numpy.clip", "numpy.clip", "numpy.clip", "numpy.clip"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            img (Tensor): Tensor image of out_size (C, H, W).\n        Returns:\n            Tensor: Image with n_holes of dimension length x length cut out of it.\n        \"\"\"", "\n", "h", "=", "img", ".", "shape", "[", "1", "]", "\n", "w", "=", "img", ".", "shape", "[", "2", "]", "\n", "\n", "mask", "=", "np", ".", "ones", "(", "(", "h", ",", "w", ")", ",", "np", ".", "float32", ")", "\n", "\n", "for", "n", "in", "range", "(", "self", ".", "n_holes", ")", ":", "\n", "            ", "y", "=", "np", ".", "random", ".", "randint", "(", "h", ")", "\n", "x", "=", "np", ".", "random", ".", "randint", "(", "w", ")", "\n", "\n", "y1", "=", "np", ".", "clip", "(", "y", "-", "self", ".", "length", "//", "2", ",", "0", ",", "h", ")", "\n", "y2", "=", "np", ".", "clip", "(", "y", "+", "self", ".", "length", "//", "2", ",", "0", ",", "h", ")", "\n", "x1", "=", "np", ".", "clip", "(", "x", "-", "self", ".", "length", "//", "2", ",", "0", ",", "w", ")", "\n", "x2", "=", "np", ".", "clip", "(", "x", "+", "self", ".", "length", "//", "2", ",", "0", ",", "w", ")", "\n", "\n", "mask", "[", "y1", ":", "y2", ",", "x1", ":", "x2", "]", "=", "0.", "\n", "\n", "", "mask", "=", "torch", ".", "from_numpy", "(", "mask", ")", "\n", "mask", "=", "mask", ".", "expand_as", "(", "img", ")", "\n", "\n", "img", "=", "img", "*", "mask", "+", "(", "1", "-", "mask", ")", "*", "self", ".", "fill_color", "[", ":", ",", "None", ",", "None", "]", "\n", "\n", "return", "img", "\n", "", "", ""]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.augmentations.autoaugment.ImageNetPolicy.__init__": [[17, 48], ["autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "fillcolor", "=", "(", "128", ",", "128", ",", "128", ")", ")", ":", "\n", "        ", "self", ".", "policies", "=", "[", "\n", "SubPolicy", "(", "0.4", ",", "\"posterize\"", ",", "8", ",", "0.6", ",", "\"rotate\"", ",", "9", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.6", ",", "\"solarize\"", ",", "5", ",", "0.6", ",", "\"autocontrast\"", ",", "5", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.8", ",", "\"equalize\"", ",", "8", ",", "0.6", ",", "\"equalize\"", ",", "3", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.6", ",", "\"posterize\"", ",", "7", ",", "0.6", ",", "\"posterize\"", ",", "6", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.4", ",", "\"equalize\"", ",", "7", ",", "0.2", ",", "\"solarize\"", ",", "4", ",", "fillcolor", ")", ",", "\n", "\n", "SubPolicy", "(", "0.4", ",", "\"equalize\"", ",", "4", ",", "0.8", ",", "\"rotate\"", ",", "8", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.6", ",", "\"solarize\"", ",", "3", ",", "0.6", ",", "\"equalize\"", ",", "7", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.8", ",", "\"posterize\"", ",", "5", ",", "1.0", ",", "\"equalize\"", ",", "2", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.2", ",", "\"rotate\"", ",", "3", ",", "0.6", ",", "\"solarize\"", ",", "8", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.6", ",", "\"equalize\"", ",", "8", ",", "0.4", ",", "\"posterize\"", ",", "6", ",", "fillcolor", ")", ",", "\n", "\n", "SubPolicy", "(", "0.8", ",", "\"rotate\"", ",", "8", ",", "0.4", ",", "\"color\"", ",", "0", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.4", ",", "\"rotate\"", ",", "9", ",", "0.6", ",", "\"equalize\"", ",", "2", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.0", ",", "\"equalize\"", ",", "7", ",", "0.8", ",", "\"equalize\"", ",", "8", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.6", ",", "\"invert\"", ",", "4", ",", "1.0", ",", "\"equalize\"", ",", "8", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.6", ",", "\"color\"", ",", "4", ",", "1.0", ",", "\"contrast\"", ",", "8", ",", "fillcolor", ")", ",", "\n", "\n", "SubPolicy", "(", "0.8", ",", "\"rotate\"", ",", "8", ",", "1.0", ",", "\"color\"", ",", "2", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.8", ",", "\"color\"", ",", "8", ",", "0.8", ",", "\"solarize\"", ",", "7", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.4", ",", "\"sharpness\"", ",", "7", ",", "0.6", ",", "\"invert\"", ",", "8", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.6", ",", "\"shearX\"", ",", "5", ",", "1.0", ",", "\"equalize\"", ",", "9", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.4", ",", "\"color\"", ",", "0", ",", "0.6", ",", "\"equalize\"", ",", "3", ",", "fillcolor", ")", ",", "\n", "\n", "SubPolicy", "(", "0.4", ",", "\"equalize\"", ",", "7", ",", "0.2", ",", "\"solarize\"", ",", "4", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.6", ",", "\"solarize\"", ",", "5", ",", "0.6", ",", "\"autocontrast\"", ",", "5", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.6", ",", "\"invert\"", ",", "4", ",", "1.0", ",", "\"equalize\"", ",", "8", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.6", ",", "\"color\"", ",", "4", ",", "1.0", ",", "\"contrast\"", ",", "8", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.8", ",", "\"equalize\"", ",", "8", ",", "0.6", ",", "\"equalize\"", ",", "3", ",", "fillcolor", ")", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.augmentations.autoaugment.ImageNetPolicy.__call__": [[51, 54], ["random.randint", "len"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "policy_idx", "=", "random", ".", "randint", "(", "0", ",", "len", "(", "self", ".", "policies", ")", "-", "1", ")", "\n", "return", "self", ".", "policies", "[", "policy_idx", "]", "(", "img", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.augmentations.autoaugment.ImageNetPolicy.__repr__": [[55, 57], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "\"AutoAugment ImageNet Policy\"", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.augmentations.autoaugment.CIFAR10Policy.__init__": [[70, 102], ["print", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "fillcolor", "=", "(", "128", ",", "128", ",", "128", ")", ",", "magnitude_factor", "=", "1", ")", ":", "\n", "        ", "print", "(", "f'AutoAugment CIFAR10 - Magnitude {magnitude_factor}'", ")", "\n", "self", ".", "policies", "=", "[", "\n", "SubPolicy", "(", "0.1", ",", "\"invert\"", ",", "7", ",", "0.2", ",", "\"contrast\"", ",", "6", ",", "fillcolor", ",", "magnitude_factor", ")", ",", "\n", "SubPolicy", "(", "0.7", ",", "\"rotate\"", ",", "2", ",", "0.3", ",", "\"translateX\"", ",", "9", ",", "fillcolor", ",", "magnitude_factor", ")", ",", "\n", "SubPolicy", "(", "0.8", ",", "\"sharpness\"", ",", "1", ",", "0.9", ",", "\"sharpness\"", ",", "3", ",", "fillcolor", ",", "magnitude_factor", ")", ",", "\n", "SubPolicy", "(", "0.5", ",", "\"shearY\"", ",", "8", ",", "0.7", ",", "\"translateY\"", ",", "9", ",", "fillcolor", ",", "magnitude_factor", ")", ",", "\n", "SubPolicy", "(", "0.5", ",", "\"autocontrast\"", ",", "8", ",", "0.9", ",", "\"equalize\"", ",", "2", ",", "fillcolor", ",", "magnitude_factor", ")", ",", "\n", "\n", "SubPolicy", "(", "0.2", ",", "\"shearY\"", ",", "7", ",", "0.3", ",", "\"posterize\"", ",", "7", ",", "fillcolor", ",", "magnitude_factor", ")", ",", "\n", "SubPolicy", "(", "0.4", ",", "\"color\"", ",", "3", ",", "0.6", ",", "\"brightness\"", ",", "7", ",", "fillcolor", ",", "magnitude_factor", ")", ",", "\n", "SubPolicy", "(", "0.3", ",", "\"sharpness\"", ",", "9", ",", "0.7", ",", "\"brightness\"", ",", "9", ",", "fillcolor", ",", "magnitude_factor", ")", ",", "\n", "SubPolicy", "(", "0.6", ",", "\"equalize\"", ",", "5", ",", "0.5", ",", "\"equalize\"", ",", "1", ",", "fillcolor", ",", "magnitude_factor", ")", ",", "\n", "SubPolicy", "(", "0.6", ",", "\"contrast\"", ",", "7", ",", "0.6", ",", "\"sharpness\"", ",", "5", ",", "fillcolor", ",", "magnitude_factor", ")", ",", "\n", "\n", "SubPolicy", "(", "0.7", ",", "\"color\"", ",", "7", ",", "0.5", ",", "\"translateX\"", ",", "8", ",", "fillcolor", ",", "magnitude_factor", ")", ",", "\n", "SubPolicy", "(", "0.3", ",", "\"equalize\"", ",", "7", ",", "0.4", ",", "\"autocontrast\"", ",", "8", ",", "fillcolor", ",", "magnitude_factor", ")", ",", "\n", "SubPolicy", "(", "0.4", ",", "\"translateY\"", ",", "3", ",", "0.2", ",", "\"sharpness\"", ",", "6", ",", "fillcolor", ",", "magnitude_factor", ")", ",", "\n", "SubPolicy", "(", "0.9", ",", "\"brightness\"", ",", "6", ",", "0.2", ",", "\"color\"", ",", "8", ",", "fillcolor", ",", "magnitude_factor", ")", ",", "\n", "SubPolicy", "(", "0.5", ",", "\"solarize\"", ",", "2", ",", "0.0", ",", "\"invert\"", ",", "3", ",", "fillcolor", ",", "magnitude_factor", ")", ",", "\n", "\n", "SubPolicy", "(", "0.2", ",", "\"equalize\"", ",", "0", ",", "0.6", ",", "\"autocontrast\"", ",", "0", ",", "fillcolor", ",", "magnitude_factor", ")", ",", "\n", "SubPolicy", "(", "0.2", ",", "\"equalize\"", ",", "8", ",", "0.6", ",", "\"equalize\"", ",", "4", ",", "fillcolor", ",", "magnitude_factor", ")", ",", "\n", "SubPolicy", "(", "0.9", ",", "\"color\"", ",", "9", ",", "0.6", ",", "\"equalize\"", ",", "6", ",", "fillcolor", ",", "magnitude_factor", ")", ",", "\n", "SubPolicy", "(", "0.8", ",", "\"autocontrast\"", ",", "4", ",", "0.2", ",", "\"solarize\"", ",", "8", ",", "fillcolor", ",", "magnitude_factor", ")", ",", "\n", "SubPolicy", "(", "0.1", ",", "\"brightness\"", ",", "3", ",", "0.7", ",", "\"color\"", ",", "0", ",", "fillcolor", ",", "magnitude_factor", ")", ",", "\n", "\n", "SubPolicy", "(", "0.4", ",", "\"solarize\"", ",", "5", ",", "0.9", ",", "\"autocontrast\"", ",", "3", ",", "fillcolor", ",", "magnitude_factor", ")", ",", "\n", "SubPolicy", "(", "0.9", ",", "\"translateY\"", ",", "9", ",", "0.7", ",", "\"translateY\"", ",", "9", ",", "fillcolor", ",", "magnitude_factor", ")", ",", "\n", "SubPolicy", "(", "0.9", ",", "\"autocontrast\"", ",", "2", ",", "0.8", ",", "\"solarize\"", ",", "3", ",", "fillcolor", ",", "magnitude_factor", ")", ",", "\n", "SubPolicy", "(", "0.8", ",", "\"equalize\"", ",", "8", ",", "0.1", ",", "\"invert\"", ",", "3", ",", "fillcolor", ",", "magnitude_factor", ")", ",", "\n", "SubPolicy", "(", "0.7", ",", "\"translateY\"", ",", "9", ",", "0.9", ",", "\"autocontrast\"", ",", "1", ",", "fillcolor", ",", "magnitude_factor", ")", ",", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.augmentations.autoaugment.CIFAR10Policy.__call__": [[105, 108], ["random.randint", "len"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "policy_idx", "=", "random", ".", "randint", "(", "0", ",", "len", "(", "self", ".", "policies", ")", "-", "1", ")", "\n", "return", "self", ".", "policies", "[", "policy_idx", "]", "(", "img", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.augmentations.autoaugment.CIFAR10Policy.__repr__": [[109, 111], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "\"AutoAugment CIFAR10 Policy\"", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.augmentations.autoaugment.SVHNPolicy.__init__": [[124, 155], ["autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "fillcolor", "=", "(", "128", ",", "128", ",", "128", ")", ")", ":", "\n", "        ", "self", ".", "policies", "=", "[", "\n", "SubPolicy", "(", "0.9", ",", "\"shearX\"", ",", "4", ",", "0.2", ",", "\"invert\"", ",", "3", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.9", ",", "\"shearY\"", ",", "8", ",", "0.7", ",", "\"invert\"", ",", "5", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.6", ",", "\"equalize\"", ",", "5", ",", "0.6", ",", "\"solarize\"", ",", "6", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.9", ",", "\"invert\"", ",", "3", ",", "0.6", ",", "\"equalize\"", ",", "3", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.6", ",", "\"equalize\"", ",", "1", ",", "0.9", ",", "\"rotate\"", ",", "3", ",", "fillcolor", ")", ",", "\n", "\n", "SubPolicy", "(", "0.9", ",", "\"shearX\"", ",", "4", ",", "0.8", ",", "\"autocontrast\"", ",", "3", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.9", ",", "\"shearY\"", ",", "8", ",", "0.4", ",", "\"invert\"", ",", "5", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.9", ",", "\"shearY\"", ",", "5", ",", "0.2", ",", "\"solarize\"", ",", "6", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.9", ",", "\"invert\"", ",", "6", ",", "0.8", ",", "\"autocontrast\"", ",", "1", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.6", ",", "\"equalize\"", ",", "3", ",", "0.9", ",", "\"rotate\"", ",", "3", ",", "fillcolor", ")", ",", "\n", "\n", "SubPolicy", "(", "0.9", ",", "\"shearX\"", ",", "4", ",", "0.3", ",", "\"solarize\"", ",", "3", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.8", ",", "\"shearY\"", ",", "8", ",", "0.7", ",", "\"invert\"", ",", "4", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.9", ",", "\"equalize\"", ",", "5", ",", "0.6", ",", "\"translateY\"", ",", "6", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.9", ",", "\"invert\"", ",", "4", ",", "0.6", ",", "\"equalize\"", ",", "7", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.3", ",", "\"contrast\"", ",", "3", ",", "0.8", ",", "\"rotate\"", ",", "4", ",", "fillcolor", ")", ",", "\n", "\n", "SubPolicy", "(", "0.8", ",", "\"invert\"", ",", "5", ",", "0.0", ",", "\"translateY\"", ",", "2", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.7", ",", "\"shearY\"", ",", "6", ",", "0.4", ",", "\"solarize\"", ",", "8", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.6", ",", "\"invert\"", ",", "4", ",", "0.8", ",", "\"rotate\"", ",", "4", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.3", ",", "\"shearY\"", ",", "7", ",", "0.9", ",", "\"translateX\"", ",", "3", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.1", ",", "\"shearX\"", ",", "6", ",", "0.6", ",", "\"invert\"", ",", "5", ",", "fillcolor", ")", ",", "\n", "\n", "SubPolicy", "(", "0.7", ",", "\"solarize\"", ",", "2", ",", "0.6", ",", "\"translateY\"", ",", "7", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.8", ",", "\"shearY\"", ",", "4", ",", "0.8", ",", "\"invert\"", ",", "8", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.7", ",", "\"shearX\"", ",", "9", ",", "0.8", ",", "\"translateY\"", ",", "3", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.8", ",", "\"shearY\"", ",", "5", ",", "0.7", ",", "\"autocontrast\"", ",", "3", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.7", ",", "\"shearX\"", ",", "2", ",", "0.1", ",", "\"invert\"", ",", "5", ",", "fillcolor", ")", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.augmentations.autoaugment.SVHNPolicy.__call__": [[158, 161], ["random.randint", "len"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "policy_idx", "=", "random", ".", "randint", "(", "0", ",", "len", "(", "self", ".", "policies", ")", "-", "1", ")", "\n", "return", "self", ".", "policies", "[", "policy_idx", "]", "(", "img", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.augmentations.autoaugment.SVHNPolicy.__repr__": [[162, 164], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "\"AutoAugment SVHN Policy\"", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.augmentations.autoaugment.SubPolicy.__init__": [[167, 225], ["max", "max", "numpy.linspace", "numpy.linspace", "numpy.linspace", "numpy.linspace", "numpy.linspace", "numpy.linspace", "numpy.round().astype", "numpy.linspace", "numpy.linspace", "numpy.linspace", "numpy.linspace", "img.convert().rotate", "PIL.Image.composite().convert", "min", "min", "img.transform", "img.transform", "img.transform", "img.transform", "autoaugment.SubPolicy.__init__.rotate_with_fill"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "p1", ",", "operation1", ",", "magnitude_idx1", ",", "p2", ",", "operation2", ",", "magnitude_idx2", ",", "fillcolor", "=", "(", "128", ",", "128", ",", "128", ")", ",", "magnitude_factor", "=", "1", ")", ":", "\n", "        ", "ranges", "=", "{", "\n", "\"shearX\"", ":", "np", ".", "linspace", "(", "0", ",", "0.3", ",", "10", ")", ",", "\n", "\"shearY\"", ":", "np", ".", "linspace", "(", "0", ",", "0.3", ",", "10", ")", ",", "\n", "\"translateX\"", ":", "np", ".", "linspace", "(", "0", ",", "150", "/", "331", ",", "10", ")", ",", "\n", "\"translateY\"", ":", "np", ".", "linspace", "(", "0", ",", "150", "/", "331", ",", "10", ")", ",", "\n", "\"rotate\"", ":", "np", ".", "linspace", "(", "0", ",", "30", ",", "10", ")", ",", "\n", "\"color\"", ":", "np", ".", "linspace", "(", "0.0", ",", "0.9", ",", "10", ")", ",", "\n", "\"posterize\"", ":", "np", ".", "round", "(", "np", ".", "linspace", "(", "8", ",", "4", ",", "10", ")", ",", "0", ")", ".", "astype", "(", "np", ".", "int", ")", ",", "\n", "\"solarize\"", ":", "np", ".", "linspace", "(", "256", ",", "0", ",", "10", ")", ",", "\n", "\"contrast\"", ":", "np", ".", "linspace", "(", "0.0", ",", "0.9", ",", "10", ")", ",", "\n", "\"sharpness\"", ":", "np", ".", "linspace", "(", "0.0", ",", "0.9", ",", "10", ")", ",", "\n", "\"brightness\"", ":", "np", ".", "linspace", "(", "0.0", ",", "0.9", ",", "10", ")", ",", "\n", "\"autocontrast\"", ":", "[", "0", "]", "*", "10", ",", "\n", "\"equalize\"", ":", "[", "0", "]", "*", "10", ",", "\n", "\"invert\"", ":", "[", "0", "]", "*", "10", "\n", "}", "\n", "\n", "# from https://stackoverflow.com/questions/5252170/specify-image-filling-color-when-rotating-in-python-with-pil-and-setting-expand", "\n", "def", "rotate_with_fill", "(", "img", ",", "magnitude", ")", ":", "\n", "            ", "rot", "=", "img", ".", "convert", "(", "\"RGBA\"", ")", ".", "rotate", "(", "magnitude", ")", "\n", "return", "Image", ".", "composite", "(", "rot", ",", "Image", ".", "new", "(", "\"RGBA\"", ",", "rot", ".", "size", ",", "(", "128", ",", ")", "*", "4", ")", ",", "rot", ")", ".", "convert", "(", "img", ".", "mode", ")", "\n", "\n", "", "func", "=", "{", "\n", "\"shearX\"", ":", "lambda", "img", ",", "magnitude", ":", "img", ".", "transform", "(", "\n", "img", ".", "size", ",", "Image", ".", "AFFINE", ",", "(", "1", ",", "magnitude", "*", "random", ".", "choice", "(", "[", "-", "1", ",", "1", "]", ")", ",", "0", ",", "0", ",", "1", ",", "0", ")", ",", "\n", "Image", ".", "BICUBIC", ",", "fillcolor", "=", "fillcolor", ")", ",", "\n", "\"shearY\"", ":", "lambda", "img", ",", "magnitude", ":", "img", ".", "transform", "(", "\n", "img", ".", "size", ",", "Image", ".", "AFFINE", ",", "(", "1", ",", "0", ",", "0", ",", "magnitude", "*", "random", ".", "choice", "(", "[", "-", "1", ",", "1", "]", ")", ",", "1", ",", "0", ")", ",", "\n", "Image", ".", "BICUBIC", ",", "fillcolor", "=", "fillcolor", ")", ",", "\n", "\"translateX\"", ":", "lambda", "img", ",", "magnitude", ":", "img", ".", "transform", "(", "\n", "img", ".", "size", ",", "Image", ".", "AFFINE", ",", "(", "1", ",", "0", ",", "magnitude", "*", "img", ".", "size", "[", "0", "]", "*", "random", ".", "choice", "(", "[", "-", "1", ",", "1", "]", ")", ",", "0", ",", "1", ",", "0", ")", ",", "\n", "fillcolor", "=", "fillcolor", ")", ",", "\n", "\"translateY\"", ":", "lambda", "img", ",", "magnitude", ":", "img", ".", "transform", "(", "\n", "img", ".", "size", ",", "Image", ".", "AFFINE", ",", "(", "1", ",", "0", ",", "0", ",", "0", ",", "1", ",", "magnitude", "*", "img", ".", "size", "[", "1", "]", "*", "random", ".", "choice", "(", "[", "-", "1", ",", "1", "]", ")", ")", ",", "\n", "fillcolor", "=", "fillcolor", ")", ",", "\n", "\"rotate\"", ":", "lambda", "img", ",", "magnitude", ":", "rotate_with_fill", "(", "img", ",", "magnitude", ")", ",", "\n", "\"color\"", ":", "lambda", "img", ",", "magnitude", ":", "ImageEnhance", ".", "Color", "(", "img", ")", ".", "enhance", "(", "1", "+", "magnitude", "*", "random", ".", "choice", "(", "[", "-", "1", ",", "1", "]", ")", ")", ",", "\n", "\"posterize\"", ":", "lambda", "img", ",", "magnitude", ":", "ImageOps", ".", "posterize", "(", "img", ",", "magnitude", ")", ",", "\n", "\"solarize\"", ":", "lambda", "img", ",", "magnitude", ":", "ImageOps", ".", "solarize", "(", "img", ",", "magnitude", ")", ",", "\n", "\"contrast\"", ":", "lambda", "img", ",", "magnitude", ":", "ImageEnhance", ".", "Contrast", "(", "img", ")", ".", "enhance", "(", "\n", "1", "+", "magnitude", "*", "random", ".", "choice", "(", "[", "-", "1", ",", "1", "]", ")", ")", ",", "\n", "\"sharpness\"", ":", "lambda", "img", ",", "magnitude", ":", "ImageEnhance", ".", "Sharpness", "(", "img", ")", ".", "enhance", "(", "\n", "1", "+", "magnitude", "*", "random", ".", "choice", "(", "[", "-", "1", ",", "1", "]", ")", ")", ",", "\n", "\"brightness\"", ":", "lambda", "img", ",", "magnitude", ":", "ImageEnhance", ".", "Brightness", "(", "img", ")", ".", "enhance", "(", "\n", "1", "+", "magnitude", "*", "random", ".", "choice", "(", "[", "-", "1", ",", "1", "]", ")", ")", ",", "\n", "\"autocontrast\"", ":", "lambda", "img", ",", "magnitude", ":", "ImageOps", ".", "autocontrast", "(", "img", ")", ",", "\n", "\"equalize\"", ":", "lambda", "img", ",", "magnitude", ":", "ImageOps", ".", "equalize", "(", "img", ")", ",", "\n", "\"invert\"", ":", "lambda", "img", ",", "magnitude", ":", "ImageOps", ".", "invert", "(", "img", ")", "\n", "}", "\n", "magnitude_1", "=", "max", "(", "0", ",", "min", "(", "9", ",", "int", "(", "magnitude_factor", "*", "magnitude_idx1", ")", ")", ")", "\n", "magnitude_2", "=", "max", "(", "0", ",", "min", "(", "9", ",", "int", "(", "magnitude_factor", "*", "magnitude_idx2", ")", ")", ")", "\n", "self", ".", "p1", "=", "p1", "\n", "self", ".", "operation1", "=", "func", "[", "operation1", "]", "\n", "self", ".", "magnitude1", "=", "ranges", "[", "operation1", "]", "[", "magnitude_1", "]", "\n", "self", ".", "p2", "=", "p2", "\n", "self", ".", "operation2", "=", "func", "[", "operation2", "]", "\n", "self", ".", "magnitude2", "=", "ranges", "[", "operation2", "]", "[", "magnitude_2", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.augmentations.autoaugment.SubPolicy.__call__": [[227, 231], ["random.random", "autoaugment.SubPolicy.operation1", "random.random", "autoaugment.SubPolicy.operation2"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "if", "random", ".", "random", "(", ")", "<", "self", ".", "p1", ":", "img", "=", "self", ".", "operation1", "(", "img", ",", "self", ".", "magnitude1", ")", "\n", "if", "random", ".", "random", "(", ")", "<", "self", ".", "p2", ":", "img", "=", "self", ".", "operation2", "(", "img", ",", "self", ".", "magnitude2", ")", "\n", "return", "img", "", "", "", ""]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.CEDA_training.CEDAObjective.__init__": [[12, 17], ["train_loss.acet_uniform_obj_from_name", "train_loss.MinMaxLoss.__init__"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_loss.acet_uniform_obj_from_name", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models_32x32.shake_pyramidnet.ShakePyramidNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "obj_str", ",", "K", ",", "log_stats", "=", "False", ",", "name_prefix", "=", "None", ")", ":", "\n", "        ", "f", ",", "expected_format", "=", "acet_uniform_obj_from_name", "(", "obj_str", ",", "K", ")", "\n", "self", ".", "f", "=", "f", "\n", "super", "(", ")", ".", "__init__", "(", "'CEDALoss_{}'", ".", "format", "(", "obj_str", ")", ",", "expected_format", "=", "expected_format", ",", "log_stats", "=", "log_stats", ",", "\n", "name_prefix", "=", "name_prefix", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.CEDA_training.CEDAObjective.inner_max": [[18, 20], ["None"], "methods", ["None"], ["", "def", "inner_max", "(", "self", ",", "data", ",", "target", ")", ":", "\n", "        ", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.CEDA_training.CEDAObjective.forward": [[21, 25], ["CEDA_training.CEDAObjective.f", "CEDA_training.CEDAObjective._log_stats", "train_loss.TrainLoss.reduce", "CEDA_training.CEDAObjective._prepare_input"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_loss.LoggingLoss._log_stats", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.adversarial_attacks.utils.reduce", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_loss.TrainLoss._prepare_input"], ["", "def", "forward", "(", "self", ",", "data", ",", "model_out", ",", "orig_data", ",", "y", ",", "reduction", "=", "'mean'", ")", ":", "\n", "        ", "obj_expanded", "=", "self", ".", "f", "(", "self", ".", "_prepare_input", "(", "model_out", ")", ")", "\n", "self", ".", "_log_stats", "(", "obj_expanded", ")", "\n", "return", "TrainLoss", ".", "reduce", "(", "obj_expanded", ",", "reduction", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.CEDA_training.CEDATargetedObjective.__init__": [[27, 35], ["train_loss.acet_target_obj_from_name", "train_loss.MinMaxLoss.__init__"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_loss.acet_target_obj_from_name", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models_32x32.shake_pyramidnet.ShakePyramidNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "obj_str", ",", "K", ",", "label_smoothing_eps", "=", "None", ",", "log_stats", "=", "False", ",", "name_prefix", "=", "None", ")", ":", "\n", "#if targeted loss is false: enforce unfirom, otherwise divergence between y and softmax(model_out)", "\n", "        ", "f", ",", "expected_format", "=", "acet_target_obj_from_name", "(", "obj_str", ")", "\n", "self", ".", "K", "=", "K", "\n", "self", ".", "f", "=", "f", "\n", "self", ".", "label_smoothing_eps", "=", "label_smoothing_eps", "\n", "super", "(", ")", ".", "__init__", "(", "'CEDALoss_{}'", ".", "format", "(", "obj_str", ")", ",", "expected_format", "=", "expected_format", ",", "log_stats", "=", "log_stats", ",", "\n", "name_prefix", "=", "name_prefix", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.CEDA_training.CEDATargetedObjective.inner_max": [[36, 38], ["None"], "methods", ["None"], ["", "def", "inner_max", "(", "self", ",", "data", ",", "target", ")", ":", "\n", "        ", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.CEDA_training.CEDATargetedObjective.forward": [[39, 53], ["CEDA_training.CEDATargetedObjective._log_stats", "train_loss.TrainLoss.reduce", "CEDA_training.CEDATargetedObjective.f", "CEDA_training.CEDATargetedObjective._prepare_input"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_loss.LoggingLoss._log_stats", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.adversarial_attacks.utils.reduce", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_loss.TrainLoss._prepare_input"], ["", "def", "forward", "(", "self", ",", "data", ",", "model_out", ",", "orig_data", ",", "y", ",", "reduction", "=", "'mean'", ")", ":", "\n", "        ", "if", "y", ".", "shape", "[", "1", "]", "==", "self", ".", "K", ":", "\n", "            ", "weight", "=", "1.0", "\n", "target", "=", "y", "\n", "", "else", ":", "\n", "            ", "weight", "=", "y", "[", ":", ",", "-", "1", "]", "\n", "target", "=", "y", "[", ":", ",", "0", ":", "-", "1", "]", "\n", "\n", "", "if", "self", ".", "label_smoothing_eps", "is", "not", "None", ":", "\n", "            ", "target", "=", "(", "1", "-", "self", ".", "label_smoothing_eps", ")", "*", "target", "+", "self", ".", "label_smoothing_eps", "*", "1", "/", "self", ".", "K", "\n", "\n", "", "obj_expanded", "=", "weight", "*", "self", ".", "f", "(", "self", ".", "_prepare_input", "(", "model_out", ")", ",", "target", ")", "\n", "self", ".", "_log_stats", "(", "obj_expanded", ")", "\n", "return", "TrainLoss", ".", "reduce", "(", "obj_expanded", ",", "reduction", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.CEDA_training.CEDATargetedEntropyObjective.__init__": [[56, 63], ["train_loss.acet_target_obj_from_name", "train_loss.MinMaxLoss.__init__"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_loss.acet_target_obj_from_name", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models_32x32.shake_pyramidnet.ShakePyramidNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "obj_str", ",", "K", ",", "entropy_weight", "=", "1.0", ",", "log_stats", "=", "False", ",", "name_prefix", "=", "None", ")", ":", "\n", "        ", "f", ",", "expected_format", "=", "acet_target_obj_from_name", "(", "obj_str", ")", "\n", "self", ".", "K", "=", "K", "\n", "self", ".", "f", "=", "f", "\n", "self", ".", "entropy_weight", "=", "entropy_weight", "\n", "super", "(", ")", ".", "__init__", "(", "'CEDALoss_{}'", ".", "format", "(", "obj_str", ")", ",", "expected_format", "=", "expected_format", ",", "log_stats", "=", "log_stats", ",", "\n", "num_losses", "=", "2", ",", "sub_losses_postfix", "=", "[", "''", ",", "'Entropy'", "]", ",", "name_prefix", "=", "name_prefix", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.CEDA_training.CEDATargetedEntropyObjective.inner_max": [[64, 66], ["None"], "methods", ["None"], ["", "def", "inner_max", "(", "self", ",", "data", ",", "target", ")", ":", "\n", "        ", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.CEDA_training.CEDATargetedEntropyObjective.forward": [[67, 82], ["CEDA_training.CEDATargetedEntropyObjective._prepare_input", "CEDA_training.CEDATargetedEntropyObjective.f", "train_loss.entropy", "CEDA_training.CEDATargetedEntropyObjective._log_stats", "CEDA_training.CEDATargetedEntropyObjective._log_stats", "train_loss.TrainLoss.reduce"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_loss.TrainLoss._prepare_input", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_loss.entropy", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_loss.LoggingLoss._log_stats", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_loss.LoggingLoss._log_stats", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.adversarial_attacks.utils.reduce"], ["", "def", "forward", "(", "self", ",", "data", ",", "model_out", ",", "orig_data", ",", "y", ",", "reduction", "=", "'mean'", ")", ":", "\n", "        ", "if", "y", ".", "shape", "[", "1", "]", "==", "self", ".", "K", ":", "\n", "            ", "weight", "=", "1.0", "\n", "target", "=", "y", "\n", "", "else", ":", "\n", "            ", "weight", "=", "y", "[", ":", ",", "-", "1", "]", "\n", "target", "=", "y", "[", ":", ",", "0", ":", "-", "1", "]", "\n", "\n", "", "prep_out", "=", "self", ".", "_prepare_input", "(", "model_out", ")", "\n", "obj_expanded", "=", "self", ".", "f", "(", "prep_out", ",", "target", ")", "\n", "entropy_expanded", "=", "entropy", "(", "model_out", ")", "\n", "loss_expanded", "=", "weight", "*", "(", "obj_expanded", "-", "self", ".", "entropy_weight", "*", "entropy_expanded", ")", "\n", "self", ".", "_log_stats", "(", "obj_expanded", ",", "loss_idx", "=", "0", ")", "\n", "self", ".", "_log_stats", "(", "entropy_expanded", ",", "loss_idx", "=", "1", ")", "\n", "return", "TrainLoss", ".", "reduce", "(", "loss_expanded", ",", "reduction", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.CEDA_training.CEDATraining.__init__": [[85, 102], ["utils.LPDistance", "out_distribution_training.OutDistributionTraining.__init__"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models_32x32.shake_pyramidnet.ShakePyramidNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "model", ",", "optimizer_config", ",", "epochs", ",", "device", ",", "num_classes", ",", "\n", "CEDA_variant", "=", "None", ",", "lr_scheduler_config", "=", "None", ",", "msda_config", "=", "None", ",", "model_config", "=", "None", ",", "\n", "clean_criterion", "=", "'ce'", ",", "train_obj", "=", "'log_conf'", ",", "od_weight", "=", "1.", ",", "test_epochs", "=", "1", ",", "verbose", "=", "100", ",", "\n", "saved_model_dir", "=", "'SavedModels'", ",", "saved_log_dir", "=", "'Logs'", ")", ":", "\n", "\n", "        ", "distance", "=", "d", ".", "LPDistance", "(", "p", "=", "2", ")", "\n", "super", "(", ")", ".", "__init__", "(", "'CEDA'", ",", "model", ",", "distance", ",", "optimizer_config", ",", "epochs", ",", "device", ",", "num_classes", ",", "\n", "clean_criterion", "=", "clean_criterion", ",", "lr_scheduler_config", "=", "lr_scheduler_config", ",", "\n", "msda_config", "=", "msda_config", ",", "model_config", "=", "model_config", ",", "od_weight", "=", "od_weight", ",", "\n", "test_epochs", "=", "test_epochs", ",", "verbose", "=", "verbose", ",", "saved_model_dir", "=", "saved_model_dir", ",", "\n", "saved_log_dir", "=", "saved_log_dir", ")", "\n", "\n", "if", "CEDA_variant", "is", "None", ":", "\n", "            ", "self", ".", "CEDA_variant", "=", "{", "'Type'", ":", "'CEDA'", "}", "\n", "", "else", ":", "\n", "            ", "self", ".", "CEDA_variant", "=", "CEDA_variant", "\n", "", "self", ".", "od_train_obj", "=", "train_obj", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.CEDA_training.CEDATraining._get_od_criterion": [[104, 119], ["CEDA_training.CEDATargetedObjective", "CEDA_training.CEDAObjective", "CEDA_training.CEDATraining.CEDA_variant.keys", "CEDA_training.CEDATargetedEntropyObjective", "NotImplementedError"], "methods", ["None"], ["", "def", "_get_od_criterion", "(", "self", ",", "epoch", ",", "model", ",", "name_prefix", "=", "'OD'", ")", ":", "\n", "        ", "if", "self", ".", "CEDA_variant", "[", "'Type'", "]", "==", "'CEDATargeted'", ":", "\n", "            ", "label_smoothing_eps", "=", "None", "if", "'LabelSmoothingEps'", "not", "in", "self", ".", "CEDA_variant", ".", "keys", "(", ")", "else", "self", ".", "CEDA_variant", "[", "'LabelSmoothingEps'", "]", "\n", "train_criterion", "=", "CEDATargetedObjective", "(", "self", ".", "od_train_obj", ",", "self", ".", "classes", ",", "\n", "label_smoothing_eps", "=", "label_smoothing_eps", ",", "log_stats", "=", "True", ",", "\n", "name_prefix", "=", "name_prefix", ")", "\n", "", "elif", "self", ".", "CEDA_variant", "[", "'Type'", "]", "==", "'CEDA'", ":", "\n", "            ", "train_criterion", "=", "CEDAObjective", "(", "self", ".", "od_train_obj", ",", "self", ".", "classes", ",", "log_stats", "=", "True", ",", "name_prefix", "=", "'OD'", ")", "\n", "", "elif", "self", ".", "CEDA_variant", "[", "'Type'", "]", "==", "'CEDATargetedEntropy'", ":", "\n", "            ", "train_criterion", "=", "CEDATargetedEntropyObjective", "(", "self", ".", "od_train_obj", ",", "self", ".", "classes", ",", "log_stats", "=", "True", ",", "\n", "name_prefix", "=", "name_prefix", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", ")", "\n", "\n", "", "return", "train_criterion", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.CEDA_training.CEDATraining._get_CEDA_config": [[120, 123], ["None"], "methods", ["None"], ["", "def", "_get_CEDA_config", "(", "self", ")", ":", "\n", "        ", "CEDA_config", "=", "{", "'CEDA Variant'", ":", "self", ".", "CEDA_variant", ",", "'train_obj'", ":", "self", ".", "od_train_obj", ",", "'lambda'", ":", "self", ".", "od_weight", "}", "\n", "return", "CEDA_config", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.CEDA_training.CEDATraining._get_train_type_config": [[124, 139], ["CEDA_training.CEDATraining._get_base_config", "CEDA_training.CEDATraining._get_CEDA_config"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_type.TrainType._get_base_config", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.BCECEDA_training.BCECEDATraining._get_CEDA_config"], ["", "def", "_get_train_type_config", "(", "self", ",", "loader_config", "=", "None", ")", ":", "\n", "        ", "base_config", "=", "self", ".", "_get_base_config", "(", ")", "\n", "ceda_config", "=", "self", ".", "_get_CEDA_config", "(", ")", "\n", "\n", "configs", "=", "{", "}", "\n", "configs", "[", "'Base'", "]", "=", "base_config", "\n", "configs", "[", "'CEDA'", "]", "=", "ceda_config", "\n", "configs", "[", "'Optimizer'", "]", "=", "self", ".", "optimizer_config", "\n", "configs", "[", "'Scheduler'", "]", "=", "self", ".", "lr_scheduler_config", "\n", "\n", "configs", "[", "'Data Loader'", "]", "=", "loader_config", "\n", "configs", "[", "'MSDA'", "]", "=", "self", ".", "msda_config", "\n", "configs", "[", "'Model'", "]", "=", "self", ".", "model_config", "\n", "\n", "return", "configs", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_type.TrainType.__init__": [[22, 44], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "type", ",", "model", ",", "optimizer_config", ",", "epochs", ",", "device", ",", "num_classes", ",", "lr_scheduler_config", "=", "None", ",", "\n", "msda_config", "=", "None", ",", "model_config", "=", "None", ",", "clean_criterion", "=", "'crossentropy'", ",", "test_epochs", "=", "5", ",", "verbose", "=", "100", ",", "\n", "saved_model_dir", "=", "'SavedModels'", ",", "saved_log_dir", "=", "'Logs'", ")", ":", "\n", "        ", "self", ".", "type", "=", "type", "\n", "self", ".", "model", "=", "model", "\n", "self", ".", "non_parallel_model", "=", "model", "\n", "self", ".", "optimizer_config", "=", "optimizer_config", "\n", "self", ".", "epochs", "=", "epochs", "\n", "self", ".", "device", "=", "device", "\n", "self", ".", "lr_scheduler_config", "=", "lr_scheduler_config", "\n", "self", ".", "msda_config", "=", "msda_config", "\n", "self", ".", "model_config", "=", "model_config", "\n", "self", ".", "clean_criterion", "=", "clean_criterion", "\n", "self", ".", "test_epochs", "=", "test_epochs", "\n", "self", ".", "verbose", "=", "verbose", "\n", "\n", "self", ".", "model_dir", "=", "saved_model_dir", "\n", "self", ".", "log_dir", "=", "saved_log_dir", "\n", "self", ".", "best_accuracy", "=", "0.0", "\n", "self", ".", "best_avg_model_accuracy", "=", "0.0", "\n", "\n", "self", ".", "classes", "=", "num_classes", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_type.TrainType.requires_out_distribution": [[45, 47], ["None"], "methods", ["None"], ["", "def", "requires_out_distribution", "(", "self", ")", ":", "\n", "        ", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_type.TrainType._get_train_type_config": [[48, 50], ["NotImplementedError"], "methods", ["None"], ["", "def", "_get_train_type_config", "(", "self", ",", "loader_config", "=", "None", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_type.TrainType._get_trainset_config": [[51, 55], ["None"], "methods", ["None"], ["", "def", "_get_trainset_config", "(", "self", ",", "train_loader", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "config_dict", "=", "{", "}", "\n", "config_dict", "[", "'batch out_size'", "]", "=", "train_loader", ".", "batch_size", "\n", "return", "config_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_type.TrainType._get_base_config": [[56, 62], ["None"], "methods", ["None"], ["", "def", "_get_base_config", "(", "self", ")", ":", "\n", "        ", "config_dict", "=", "{", "}", "\n", "config_dict", "[", "'type'", "]", "=", "self", ".", "type", "\n", "config_dict", "[", "'epochs'", "]", "=", "self", ".", "epochs", "\n", "config_dict", "[", "'clean loss'", "]", "=", "self", ".", "clean_criterion", "\n", "return", "config_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_type.TrainType._update_scheduler": [[63, 66], ["train_type.TrainType.scheduler.step"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.schedulers.scheduler.Scheduler.step"], ["", "def", "_update_scheduler", "(", "self", ",", "epoch", ":", "float", ")", ":", "\n", "        ", "if", "self", ".", "scheduler", "is", "not", "None", ":", "\n", "            ", "self", ".", "scheduler", ".", "step", "(", "epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_type.TrainType._create_optimizer_scheduler": [[67, 127], ["train_type.TrainType.optimizer_config[].lower", "torch.Adam", "torch.Adam", "torch.Adam", "torch.Adam", "torch.Adam", "print", "torch.GradScaler", "torch.GradScaler", "torch.GradScaler", "torch.GradScaler", "torch.GradScaler", "torch.GradScaler", "torch.GradScaler", "torch.GradScaler", "torch.GradScaler", "torch.GradScaler", "schedulers.create_scheduler", "train_type.TrainType.model.parameters", "train_type.TrainType.optimizer_config[].lower", "torch.SGD", "torch.SGD", "torch.SGD", "torch.SGD", "torch.SGD", "schedulers.create_cosine_annealing_scheduler_config", "NotImplementedError", "train_type.TrainType.model.parameters", "train_type.TrainType.optimizer_config[].lower", "optimizers.sam.SAM", "ValueError", "schedulers.create_piecewise_consant_scheduler_config", "NotImplementedError", "train_type.TrainType.model.parameters"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.schedulers.scheduler_factory.create_scheduler", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.schedulers.config_creators.create_cosine_annealing_scheduler_config", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.schedulers.config_creators.create_piecewise_consant_scheduler_config"], ["", "", "def", "_create_optimizer_scheduler", "(", "self", ")", ":", "\n", "#OPTIMIZER", "\n", "        ", "self", ".", "sam_optimizer", "=", "None", "\n", "if", "self", ".", "optimizer_config", "[", "'optimizer_type'", "]", ".", "lower", "(", ")", "==", "'adam'", ":", "\n", "            ", "self", ".", "optimizer", "=", "optim", ".", "Adam", "(", "self", ".", "model", ".", "parameters", "(", ")", ",", "lr", "=", "self", ".", "optimizer_config", "[", "'lr'", "]", ",", "weight_decay", "=", "self", ".", "optimizer_config", "[", "'weight_decay'", "]", ")", "\n", "", "elif", "self", ".", "optimizer_config", "[", "'optimizer_type'", "]", ".", "lower", "(", ")", "==", "'sgd'", ":", "\n", "            ", "self", ".", "optimizer", "=", "optim", ".", "SGD", "(", "self", ".", "model", ".", "parameters", "(", ")", ",", "lr", "=", "self", ".", "optimizer_config", "[", "'lr'", "]", ",", "weight_decay", "=", "self", ".", "optimizer_config", "[", "'weight_decay'", "]", ",", "momentum", "=", "self", ".", "optimizer_config", "[", "'momentum'", "]", ",", "\n", "nesterov", "=", "self", ".", "optimizer_config", "[", "'nesterov'", "]", ")", "\n", "", "elif", "self", ".", "optimizer_config", "[", "'optimizer_type'", "]", ".", "lower", "(", ")", "==", "'sam'", ":", "\n", "            ", "self", ".", "sam_optimizer", "=", "SAM", "(", "self", ".", "model", ".", "parameters", "(", ")", ",", "optim", ".", "SGD", ",", "lr", "=", "self", ".", "optimizer_config", "[", "'lr'", "]", ",", "\n", "weight_decay", "=", "self", ".", "optimizer_config", "[", "'weight_decay'", "]", ",", "\n", "momentum", "=", "self", ".", "optimizer_config", "[", "'momentum'", "]", ",", "\n", "nesterov", "=", "self", ".", "optimizer_config", "[", "'nesterov'", "]", ")", "\n", "self", ".", "optimizer", "=", "self", ".", "sam_optimizer", ".", "base_optimizer", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'Optimizer not supported {}'", ".", "format", "(", "self", ".", "optimizer_config", "[", "'optimizer_type'", "]", ")", ")", "\n", "\n", "", "if", "'ema'", "in", "self", ".", "optimizer_config", ":", "\n", "            ", "self", ".", "ema", "=", "self", ".", "optimizer_config", "[", "'ema'", "]", "\n", "self", ".", "ema_decay", "=", "self", ".", "optimizer_config", "[", "'ema_decay'", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "ema", "=", "False", "\n", "self", ".", "ema_decay", "=", "1.0", "\n", "\n", "#SWA", "\n", "", "if", "'swa_config'", "in", "self", ".", "optimizer_config", ":", "\n", "            ", "self", ".", "swa_epochs", "=", "self", ".", "optimizer_config", "[", "'swa_config'", "]", "[", "'epochs'", "]", "\n", "self", ".", "swa_update_frequency", "=", "self", ".", "optimizer_config", "[", "'swa_config'", "]", "[", "'update_frequency'", "]", "\n", "self", ".", "swa_virtual_schedule_lr", "=", "self", ".", "optimizer_config", "[", "'swa_config'", "]", "[", "'virtual_schedule_lr'", "]", "\n", "\n", "if", "self", ".", "optimizer_config", "[", "'swa_config'", "]", "[", "'swa_schedule_type'", "]", "==", "'cosine'", ":", "\n", "                ", "self", ".", "swa_cycle_length", "=", "self", ".", "optimizer_config", "[", "'swa_config'", "]", "[", "'cycle_length'", "]", "\n", "swa_virtual_schedule_length", "=", "self", ".", "optimizer_config", "[", "'swa_config'", "]", "[", "'virtual_schedule_length'", "]", "\n", "self", ".", "swa_virtual_schedule_swa_end", "=", "self", ".", "optimizer_config", "[", "'swa_config'", "]", "[", "'virtual_schedule_swa_end'", "]", "\n", "self", ".", "swa_scheduler_config", "=", "create_cosine_annealing_scheduler_config", "(", "swa_virtual_schedule_length", ",", "lr_min", "=", "0", ")", "\n", "", "elif", "self", ".", "optimizer_config", "[", "'swa_config'", "]", "[", "'swa_schedule_type'", "]", "==", "'constant'", ":", "\n", "                ", "self", ".", "swa_virtual_schedule_swa_end", "=", "self", ".", "swa_epochs", "\n", "self", ".", "swa_cycle_length", "=", "self", ".", "swa_epochs", "\n", "self", ".", "swa_scheduler_config", "=", "create_piecewise_consant_scheduler_config", "(", "self", ".", "swa_epochs", ",", "[", "]", ",", "1.0", ")", "\n", "", "else", ":", "\n", "                ", "raise", "NotImplementedError", "(", ")", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "swa_epochs", "=", "0", "\n", "\n", "#MIXED PRECISION", "\n", "", "if", "'mixed_precision'", "in", "self", ".", "optimizer_config", "and", "self", ".", "optimizer_config", "[", "'mixed_precision'", "]", ":", "\n", "            ", "if", "self", ".", "sam_optimizer", "is", "not", "None", ":", "\n", "                ", "raise", "NotImplementedError", "(", "'SAM and MixedPrecision not supported in combination'", ")", "\n", "", "print", "(", "'Using mixed precision training'", ")", "\n", "self", ".", "scaler", "=", "amp", ".", "GradScaler", "(", "enabled", "=", "True", ")", "\n", "self", ".", "mixed_precision", "=", "True", "\n", "", "else", ":", "\n", "            ", "self", ".", "scaler", "=", "amp", ".", "GradScaler", "(", "enabled", "=", "False", ")", "\n", "self", ".", "mixed_precision", "=", "False", "\n", "\n", "#SCHEDULER", "\n", "", "if", "self", ".", "lr_scheduler_config", "is", "not", "None", ":", "\n", "            ", "self", ".", "scheduler", ",", "self", ".", "epochs", "=", "create_scheduler", "(", "self", ".", "lr_scheduler_config", ",", "self", ".", "optimizer", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "scheduler", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_type.TrainType._create_avg_model": [[128, 143], ["ValueError", "utils.average_model.AveragedModel", "utils.average_model.AveragedModel"], "methods", ["None"], ["", "", "def", "_create_avg_model", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "ema", "and", "self", ".", "swa_epochs", ">", "0", ":", "\n", "            ", "raise", "ValueError", "(", "'SWA and EMA can not be used in combination'", ")", "\n", "\n", "", "if", "self", ".", "ema", ":", "\n", "            ", "self", ".", "non_parallel_avg_model", "=", "AveragedModel", "(", "self", ".", "non_parallel_model", ",", "avg_type", "=", "'ema'", ",", "ema_decay", "=", "self", ".", "ema_decay", ",", "avg_batchnorm", "=", "True", ")", "\n", "self", ".", "avg_model", "=", "self", ".", "non_parallel_avg_model", "\n", "", "elif", "self", ".", "swa_epochs", ">", "0", ":", "\n", "            ", "self", ".", "non_parallel_avg_model", "=", "AveragedModel", "(", "self", ".", "non_parallel_model", ",", "avg_type", "=", "'swa'", ",", "avg_batchnorm", "=", "False", ")", "\n", "self", ".", "avg_model", "=", "self", ".", "non_parallel_avg_model", "\n", "", "else", ":", "\n", "            ", "self", ".", "non_parallel_avg_model", "=", "None", "\n", "self", ".", "avg_model", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_type.TrainType._update_avg_model": [[144, 150], ["warnings.warn", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "train_type.TrainType.non_parallel_avg_model.update_parameters"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.utils.average_model.AveragedModel.update_parameters"], ["", "", "def", "_update_avg_model", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "non_parallel_avg_model", "is", "not", "None", ":", "\n", "            ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "self", ".", "non_parallel_avg_model", ".", "update_parameters", "(", "self", ".", "non_parallel_model", ")", "\n", "", "", "else", ":", "\n", "            ", "warnings", ".", "warn", "(", "'Call to _update_avg_model but avg model is not defined'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_type.TrainType._sync_parallel_avg_model": [[151, 158], ["warnings.warn", "train_type.TrainType._create_parallel_avg_model"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_type.TrainType._create_parallel_avg_model"], ["", "", "def", "_sync_parallel_avg_model", "(", "self", ",", "device_ids", ")", ":", "\n", "        ", "if", "self", ".", "non_parallel_avg_model", "is", "not", "None", ":", "\n", "            ", "if", "self", ".", "non_parallel_avg_model", ".", "avg_batchnorm", ":", "\n", "# Update the dataparallel avg model to make sure the new batchnorm parameters are used across all devices", "\n", "                ", "self", ".", "_create_parallel_avg_model", "(", "device_ids", "=", "device_ids", ")", "\n", "", "", "else", ":", "\n", "            ", "warnings", ".", "warn", "(", "'Call to _sync_parallel_avg_model but avg model is not defined'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_type.TrainType._create_parallel_model": [[160, 166], ["torch.DataParallel", "torch.DataParallel", "torch.DataParallel", "torch.DataParallel", "torch.DataParallel"], "methods", ["None"], ["", "", "def", "_create_parallel_model", "(", "self", ",", "device_ids", ")", ":", "\n", "        ", "self", ".", "in_parallel", "=", "True", "if", "device_ids", "is", "not", "None", "else", "False", "\n", "if", "device_ids", "is", "None", ":", "\n", "            ", "self", ".", "model", "=", "self", ".", "non_parallel_model", "\n", "", "else", ":", "\n", "            ", "self", ".", "model", "=", "nn", ".", "DataParallel", "(", "self", ".", "non_parallel_model", ",", "device_ids", "=", "device_ids", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_type.TrainType._create_parallel_avg_model": [[167, 174], ["train_type.TrainType.avg_model.to", "torch.DataParallel", "torch.DataParallel", "torch.DataParallel", "torch.DataParallel", "torch.DataParallel", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device"], "methods", ["None"], ["", "", "def", "_create_parallel_avg_model", "(", "self", ",", "device_ids", ")", ":", "\n", "        ", "if", "self", ".", "non_parallel_avg_model", "is", "not", "None", ":", "\n", "            ", "if", "device_ids", "is", "None", ":", "\n", "                ", "self", ".", "avg_model", "=", "self", ".", "non_parallel_avg_model", "\n", "", "else", ":", "\n", "                ", "self", ".", "avg_model", "=", "self", ".", "avg_model", ".", "to", "(", "torch", ".", "device", "(", "f'cuda:{device_ids[0]}'", ")", ")", "\n", "self", ".", "avg_model", "=", "nn", ".", "DataParallel", "(", "self", ".", "non_parallel_avg_model", ",", "device_ids", "=", "device_ids", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_type.TrainType._create_swa_optimizer_scheduler": [[175, 182], ["schedulers.create_scheduler"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.schedulers.scheduler_factory.create_scheduler"], ["", "", "", "def", "_create_swa_optimizer_scheduler", "(", "self", ")", ":", "\n", "#set base lr of optimizer to that of our virtual schedule", "\n", "        ", "for", "group", "in", "self", ".", "optimizer", ".", "param_groups", ":", "\n", "            ", "group", "[", "'lr'", "]", "=", "self", ".", "swa_virtual_schedule_lr", "\n", "\n", "#create scheduler around old optimizer", "\n", "", "self", ".", "scheduler", ",", "_", "=", "create_scheduler", "(", "self", ".", "swa_scheduler_config", ",", "self", ".", "optimizer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_type.TrainType._get_clean_criterion": [[184, 198], ["train_loss.CrossEntropyProxy", "train_loss.BCELogitsProxy", "NotImplementedError", "train_loss.CrossEntropyProxy", "train_loss.KLDivergenceProxy"], "methods", ["None"], ["", "def", "_get_clean_criterion", "(", "self", ",", "test", "=", "False", ",", "log_stats", "=", "True", ",", "name_prefix", "=", "None", ")", ":", "\n", "        ", "if", "self", ".", "clean_criterion", "in", "[", "'ce'", ",", "'crossentropy'", "]", ":", "\n", "            ", "loss", "=", "CrossEntropyProxy", "(", "log_stats", "=", "log_stats", ",", "name_prefix", "=", "name_prefix", ")", "\n", "", "elif", "self", ".", "clean_criterion", "==", "'bce'", ":", "\n", "            ", "loss", "=", "BCELogitsProxy", "(", "log_stats", "=", "log_stats", ",", "name_prefix", "=", "name_prefix", ")", "\n", "", "elif", "self", ".", "clean_criterion", "in", "[", "'kl'", ",", "'KL'", "]", ":", "\n", "            ", "if", "test", ":", "\n", "                ", "loss", "=", "CrossEntropyProxy", "(", "log_stats", "=", "log_stats", ",", "name_prefix", "=", "name_prefix", ")", "\n", "", "else", ":", "\n", "                ", "loss", "=", "KLDivergenceProxy", "(", "log_stats", "=", "log_stats", ",", "name_prefix", "=", "name_prefix", ")", "\n", "", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", ")", "\n", "\n", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_type.TrainType._get_msda": [[200, 202], ["msda.factory.get_msda"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.msda.factory.get_msda"], ["", "def", "_get_msda", "(", "self", ",", "loss", ",", "log_stats", "=", "True", ",", "name_prefix", "=", "None", ")", ":", "\n", "        ", "return", "get_msda", "(", "loss", ",", "self", ".", "msda_config", ",", "log_stats", "=", "log_stats", ",", "name_prefix", "=", "name_prefix", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_type.TrainType._get_clean_accuracy_conf_logger": [[203, 215], ["train_loss.AccuracyConfidenceLogger", "train_loss.BCAccuracyConfidenceLogger", "NotImplementedError", "train_loss.AccuracyConfidenceLogger", "train_loss.ConfidenceLogger"], "methods", ["None"], ["", "def", "_get_clean_accuracy_conf_logger", "(", "self", ",", "test", "=", "False", ",", "name_prefix", "=", "None", ")", ":", "\n", "        ", "if", "self", ".", "clean_criterion", "in", "[", "'ce'", ",", "'crossentropy'", "]", ":", "\n", "            ", "return", "AccuracyConfidenceLogger", "(", "name_prefix", "=", "name_prefix", ")", "\n", "", "elif", "self", ".", "clean_criterion", "==", "'bce'", ":", "\n", "            ", "return", "BCAccuracyConfidenceLogger", "(", "self", ".", "classes", ",", "name_prefix", "=", "name_prefix", ")", "\n", "", "elif", "self", ".", "clean_criterion", "in", "[", "'kl'", ",", "'KL'", "]", ":", "\n", "            ", "if", "test", ":", "\n", "                ", "return", "AccuracyConfidenceLogger", "(", "name_prefix", "=", "name_prefix", ")", "\n", "", "else", ":", "\n", "                ", "return", "ConfidenceLogger", "(", "name_prefix", "=", "name_prefix", ")", "\n", "", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_type.TrainType.test": [[217, 251], ["train_type.TrainType._inner_test", "enumerate", "train_type.TrainType._inner_test"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.in_distribution_training.InDistributionTraining._inner_test", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.in_distribution_training.InDistributionTraining._inner_test"], ["", "", "def", "test", "(", "self", ",", "test_loaders", ",", "epoch", ",", "test_avg_model", "=", "False", ")", ":", "\n", "        ", "new_best", "=", "False", "\n", "if", "test_avg_model", ":", "\n", "            ", "model", "=", "self", ".", "avg_model", "\n", "", "else", ":", "\n", "            ", "model", "=", "self", ".", "model", "\n", "\n", "", "if", "'test_loader'", "in", "test_loaders", ":", "\n", "            ", "if", "test_avg_model", ":", "\n", "                ", "prefix", "=", "'AVG_Clean'", "\n", "best_acc", "=", "self", ".", "best_avg_model_accuracy", "\n", "", "else", ":", "\n", "                ", "prefix", "=", "'Clean'", "\n", "best_acc", "=", "self", ".", "best_accuracy", "\n", "\n", "", "test_loader", "=", "test_loaders", "[", "'test_loader'", "]", "\n", "test_accuracy", "=", "self", ".", "_inner_test", "(", "model", ",", "test_loader", ",", "epoch", ",", "prefix", "=", "prefix", ")", "\n", "if", "test_accuracy", ">", "best_acc", ":", "\n", "                ", "new_best", "=", "True", "\n", "if", "test_avg_model", ":", "\n", "                    ", "self", ".", "best_avg_model_accuracy", "=", "test_accuracy", "\n", "", "else", ":", "\n", "                    ", "self", ".", "best_accuracy", "=", "test_accuracy", "\n", "\n", "", "", "", "if", "'extra_test_loaders'", "in", "test_loaders", ":", "\n", "            ", "for", "i", ",", "test_loader", "in", "enumerate", "(", "test_loaders", "[", "'extra_test_loaders'", "]", ")", ":", "\n", "                ", "if", "test_avg_model", ":", "\n", "                    ", "prefix", "=", "f'AVG_CleanExtra{i}'", "\n", "", "else", ":", "\n", "                    ", "prefix", "=", "f'CleanExtra{i}'", "\n", "\n", "", "self", ".", "_inner_test", "(", "model", ",", "test_loader", ",", "epoch", ",", "prefix", "=", "prefix", ")", "\n", "\n", "", "", "return", "new_best", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_type.TrainType._inner_test": [[252, 275], ["model.eval", "train_type.TrainType._get_clean_criterion", "train_type.TrainType._get_clean_accuracy_conf_logger", "len", "train_type.TrainType.output_backend.start_epoch_log", "train_type.TrainType.output_backend.end_epoch_write_summary", "train_type.TrainType.get_accuracy", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "enumerate", "model", "train_type.TrainType.", "train_type.TrainType.", "train_type.TrainType.output_backend.log_batch_summary", "data.to", "target.to"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models.ebm_wrn.gradient_attack_wrapper.eval", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_type.TrainType._get_clean_criterion", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_type.TrainType._get_clean_accuracy_conf_logger", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.output_backend.OutputBackend.start_epoch_log", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.output_backend.OutputBackend.end_epoch_write_summary", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_loss.BCAccuracyConfidenceLogger.get_accuracy", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.output_backend.OutputBackend.log_batch_summary"], ["", "def", "_inner_test", "(", "self", ",", "model", ",", "test_loader", ",", "epoch", ",", "prefix", "=", "'Clean'", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "model", ".", "eval", "(", ")", "\n", "clean_loss", "=", "self", ".", "_get_clean_criterion", "(", "test", "=", "True", ",", "log_stats", "=", "True", ",", "name_prefix", "=", "prefix", ")", "\n", "losses", "=", "[", "clean_loss", "]", "\n", "acc_conf", "=", "self", ".", "_get_clean_accuracy_conf_logger", "(", "test", "=", "True", ",", "name_prefix", "=", "prefix", ")", "\n", "loggers", "=", "[", "acc_conf", "]", "\n", "\n", "test_set_batches", "=", "len", "(", "test_loader", ")", "\n", "self", ".", "output_backend", ".", "start_epoch_log", "(", "test_set_batches", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "batch_idx", ",", "(", "data", ",", "target", ")", "in", "enumerate", "(", "test_loader", ")", ":", "\n", "                ", "data", ",", "target", "=", "data", ".", "to", "(", "self", ".", "device", ")", ",", "target", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "output", "=", "model", "(", "data", ")", "\n", "clean_loss", "(", "data", ",", "output", ",", "data", ",", "target", ")", "\n", "acc_conf", "(", "data", ",", "output", ",", "data", ",", "target", ")", "\n", "self", ".", "output_backend", ".", "log_batch_summary", "(", "epoch", ",", "batch_idx", ",", "False", ",", "losses", "=", "losses", ",", "loggers", "=", "loggers", ")", "\n", "\n", "", "", "self", ".", "output_backend", ".", "end_epoch_write_summary", "(", "losses", ",", "loggers", ",", "epoch", ",", "False", ")", "\n", "test_accuracy", "=", "acc_conf", ".", "get_accuracy", "(", ")", "\n", "\n", "return", "test_accuracy", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_type.TrainType._loss_step": [[276, 295], ["helpers.enable_running_stats", "loss_closure", "loss_closure.backward", "train_type.TrainType.sam_optimizer.first_step", "helpers.disable_running_stats", "loss_closure", "loss_closure.backward", "train_type.TrainType.sam_optimizer.second_step", "loss_closure", "train_type.TrainType.optimizer.zero_grad", "train_type.TrainType.scaler.scale().backward", "train_type.TrainType.scaler.step", "train_type.TrainType.scaler.update", "train_type.TrainType.scaler.scale"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.helpers.enable_running_stats", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models_32x32.shakedrop.ShakeDropFunction.backward", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.optimizers.sam.SAM.first_step", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.helpers.disable_running_stats", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models_32x32.shakedrop.ShakeDropFunction.backward", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.optimizers.sam.SAM.second_step", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models_32x32.shakedrop.ShakeDropFunction.backward", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.schedulers.scheduler.Scheduler.step"], ["", "def", "_loss_step", "(", "self", ",", "loss_closure", ")", ":", "\n", "        ", "if", "self", ".", "sam_optimizer", "is", "not", "None", ":", "\n", "# first forward-backward step", "\n", "            ", "enable_running_stats", "(", "self", ".", "model", ")", "# <- this is the important line", "\n", "loss", "=", "loss_closure", "(", "log", "=", "True", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "self", ".", "sam_optimizer", ".", "first_step", "(", "zero_grad", "=", "True", ")", "\n", "\n", "# second forward-backward step", "\n", "disable_running_stats", "(", "self", ".", "model", ")", "# <- this is the important line", "\n", "loss", "=", "loss_closure", "(", "log", "=", "False", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "self", ".", "sam_optimizer", ".", "second_step", "(", "zero_grad", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "loss", "=", "loss_closure", "(", "log", "=", "True", ")", "\n", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "self", ".", "scaler", ".", "scale", "(", "loss", ")", ".", "backward", "(", ")", "\n", "self", ".", "scaler", ".", "step", "(", "self", ".", "optimizer", ")", "\n", "self", ".", "scaler", ".", "update", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_type.TrainType.get_model_state_dict": [[296, 298], ["train_type.TrainType.non_parallel_model.state_dict"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.schedulers.scheduler.Scheduler.state_dict"], ["", "", "def", "get_model_state_dict", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "non_parallel_model", ".", "state_dict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_type.TrainType.get_avg_model_state_dict": [[299, 302], ["inner_avg.state_dict"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.schedulers.scheduler.Scheduler.state_dict"], ["", "def", "get_avg_model_state_dict", "(", "self", ")", ":", "\n", "        ", "inner_avg", "=", "self", ".", "non_parallel_avg_model", ".", "module", "\n", "return", "inner_avg", ".", "state_dict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_type.TrainType.get_optimizer_state_dict": [[303, 305], ["train_type.TrainType.optimizer.state_dict"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.schedulers.scheduler.Scheduler.state_dict"], ["", "def", "get_optimizer_state_dict", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "optimizer", ".", "state_dict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_type.TrainType.create_loaders_dict": [[306, 317], ["None"], "methods", ["None"], ["", "def", "create_loaders_dict", "(", "self", ",", "train_loader", ",", "test_loader", "=", "None", ",", "extra_test_loaders", "=", "None", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "train_loaders", "=", "{", "\n", "'train_loader'", ":", "train_loader", "\n", "}", "\n", "\n", "test_loaders", "=", "{", "}", "\n", "if", "test_loader", "is", "not", "None", ":", "\n", "            ", "test_loaders", "[", "'test_loader'", "]", "=", "test_loader", "\n", "", "if", "extra_test_loaders", "is", "not", "None", ":", "\n", "            ", "test_loaders", "[", "'extra_test_loaders'", "]", "=", "extra_test_loaders", "\n", "", "return", "train_loaders", ",", "test_loaders", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_type.TrainType._validate_loaders": [[318, 321], ["ValueError"], "methods", ["None"], ["", "def", "_validate_loaders", "(", "self", ",", "train_loaders", ",", "test_loaders", ")", ":", "\n", "        ", "if", "not", "'train_loader'", "in", "train_loaders", ":", "\n", "            ", "raise", "ValueError", "(", "'Train cifar_loader not given'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_type.TrainType._get_loader_batchsize": [[322, 329], ["iter", "next"], "methods", ["None"], ["", "", "def", "_get_loader_batchsize", "(", "self", ",", "loader", ")", ":", "\n", "        ", "if", "loader", ".", "batch_size", "is", "not", "None", ":", "\n", "            ", "return", "loader", ".", "batch_size", "\n", "", "else", ":", "\n", "            ", "iterator", "=", "iter", "(", "loader", ")", "\n", "a", ",", "b", "=", "next", "(", "iterator", ")", "\n", "return", "a", ".", "shape", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_type.TrainType._get_dataloader_length": [[330, 333], ["len"], "methods", ["None"], ["", "", "def", "_get_dataloader_length", "(", "self", ",", "loader", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "num_batches", "=", "len", "(", "loader", ")", "\n", "return", "num_batches", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_type.TrainType.reset_optimizer": [[335, 342], ["train_type.TrainType.optimizer.load_state_dict", "print", "train_type.TrainType._update_scheduler"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.schedulers.scheduler.Scheduler.load_state_dict", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_type.TrainType._update_scheduler"], ["", "def", "reset_optimizer", "(", "self", ",", "start_epoch", ",", "optim_state_dict", ")", ":", "\n", "        ", "if", "optim_state_dict", "is", "not", "None", ":", "\n", "            ", "self", ".", "optimizer", ".", "load_state_dict", "(", "optim_state_dict", ")", "\n", "\n", "", "if", "start_epoch", ">", "0", ":", "\n", "            ", "print", "(", "f'Resetting scheduler to epoch: {start_epoch}'", ")", "\n", "self", ".", "_update_scheduler", "(", "start_epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_type.TrainType.train": [[343, 442], ["train_type.TrainType._validate_loaders", "train_type.TrainType._get_train_type_config", "train_type.TrainType._create_optimizer_scheduler", "train_type.TrainType.reset_optimizer", "output_backend.OutputBackend", "train_type.TrainType.output_backend.save_model_configs", "train_type.TrainType._create_parallel_model", "train_type.TrainType._create_avg_model", "train_type.TrainType._create_parallel_avg_model", "range", "train_type.TrainType.output_backend.save_model_checkpoint", "train_type.TrainType.output_backend.close_backend", "time.time", "train_type.TrainType._inner_train", "train_type.TrainType.output_backend.log_epoch_time", "train_type.TrainType.get_model_state_dict", "train_type.TrainType.output_backend.save_model_checkpoint", "print", "train_type.TrainType._create_swa_optimizer_scheduler", "train_type.TrainType.scheduler.step", "range", "train_type.TrainType._update_avg_model_batch_norm", "train_type.TrainType.output_backend.save_model_checkpoint", "train_type.TrainType.output_backend.save_model_checkpoint", "train_type.TrainType.test", "train_type.TrainType.get_model_state_dict", "train_type.TrainType.get_optimizer_state_dict", "train_type.TrainType.get_avg_model_state_dict", "time.time", "train_type.TrainType._inner_train", "train_type.TrainType.output_backend.log_epoch_time", "train_type.TrainType.get_model_state_dict", "train_type.TrainType.get_model_state_dict", "train_type.TrainType.output_backend.save_model_checkpoint", "train_type.TrainType.output_backend.save_model_checkpoint", "train_type.TrainType._sync_parallel_avg_model", "train_type.TrainType.test", "train_type.TrainType.get_avg_model_state_dict", "time.time", "train_type.TrainType._update_avg_model", "train_type.TrainType.get_optimizer_state_dict", "train_type.TrainType.get_avg_model_state_dict", "train_type.TrainType.output_backend.save_model_checkpoint", "time.time", "train_type.TrainType.test", "train_type.TrainType.get_model_state_dict", "train_type.TrainType._update_avg_model_batch_norm", "train_type.TrainType.test", "train_type.TrainType.get_avg_model_state_dict", "train_type.TrainType.get_optimizer_state_dict", "train_type.TrainType.get_optimizer_state_dict", "train_type.TrainType.output_backend.save_model_checkpoint", "train_type.TrainType.output_backend.save_model_checkpoint", "train_type.TrainType.get_optimizer_state_dict"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.TRADESCEDA_training.TRADESCEDATraining._validate_loaders", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.TRADESCEDA_training.TRADESCEDATraining._get_train_type_config", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_type.TrainType._create_optimizer_scheduler", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_type.TrainType.reset_optimizer", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.output_backend.OutputBackend.save_model_configs", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_type.TrainType._create_parallel_model", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_type.TrainType._create_avg_model", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_type.TrainType._create_parallel_avg_model", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.output_backend.OutputBackend.save_model_checkpoint", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.output_backend.OutputBackend.close_backend", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.in_out_distribution_training.InOutDistributionTraining._inner_train", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.output_backend.OutputBackend.log_epoch_time", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_type.TrainType.get_model_state_dict", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.output_backend.OutputBackend.save_model_checkpoint", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_type.TrainType._create_swa_optimizer_scheduler", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.schedulers.scheduler.Scheduler.step", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.in_out_distribution_training.InOutDistributionTraining._update_avg_model_batch_norm", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.output_backend.OutputBackend.save_model_checkpoint", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.output_backend.OutputBackend.save_model_checkpoint", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models_32x32.resnet.test", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_type.TrainType.get_model_state_dict", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_type.TrainType.get_optimizer_state_dict", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_type.TrainType.get_avg_model_state_dict", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.in_out_distribution_training.InOutDistributionTraining._inner_train", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.output_backend.OutputBackend.log_epoch_time", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_type.TrainType.get_model_state_dict", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_type.TrainType.get_model_state_dict", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.output_backend.OutputBackend.save_model_checkpoint", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.output_backend.OutputBackend.save_model_checkpoint", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_type.TrainType._sync_parallel_avg_model", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models_32x32.resnet.test", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_type.TrainType.get_avg_model_state_dict", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_type.TrainType._update_avg_model", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_type.TrainType.get_optimizer_state_dict", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_type.TrainType.get_avg_model_state_dict", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.output_backend.OutputBackend.save_model_checkpoint", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models_32x32.resnet.test", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_type.TrainType.get_model_state_dict", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.in_out_distribution_training.InOutDistributionTraining._update_avg_model_batch_norm", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models_32x32.resnet.test", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_type.TrainType.get_avg_model_state_dict", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_type.TrainType.get_optimizer_state_dict", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_type.TrainType.get_optimizer_state_dict", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.output_backend.OutputBackend.save_model_checkpoint", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.output_backend.OutputBackend.save_model_checkpoint", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_type.TrainType.get_optimizer_state_dict"], ["", "", "def", "train", "(", "self", ",", "train_loaders", ",", "test_loaders", ",", "loader_config", ",", "start_epoch", "=", "0", ",", "optim_state_dict", "=", "None", ",", "device_ids", "=", "None", ")", ":", "\n", "        ", "self", ".", "_validate_loaders", "(", "train_loaders", ",", "test_loaders", ")", "\n", "\n", "config", "=", "self", ".", "_get_train_type_config", "(", "loader_config", "=", "loader_config", ")", "\n", "self", ".", "_create_optimizer_scheduler", "(", ")", "\n", "self", ".", "reset_optimizer", "(", "start_epoch", ",", "optim_state_dict", ")", "\n", "\n", "self", ".", "output_backend", "=", "OutputBackend", "(", "self", ".", "model_dir", ",", "self", ".", "log_dir", ",", "self", ".", "type", ")", "\n", "self", ".", "output_backend", ".", "save_model_configs", "(", "config", ")", "\n", "\n", "#setup dataparallel model", "\n", "self", ".", "_create_parallel_model", "(", "device_ids", "=", "device_ids", ")", "\n", "\n", "#create avg model", "\n", "self", ".", "_create_avg_model", "(", ")", "\n", "self", ".", "_create_parallel_avg_model", "(", "device_ids", "=", "device_ids", ")", "\n", "\n", "for", "epoch", "in", "range", "(", "start_epoch", ",", "self", ".", "epochs", ")", ":", "\n", "            ", "epoch_start_t", "=", "time", ".", "time", "(", ")", "\n", "\n", "#train", "\n", "self", ".", "_inner_train", "(", "train_loaders", ",", "epoch", ")", "\n", "\n", "#save model", "\n", "if", "(", "epoch", "%", "(", "5", "*", "self", ".", "test_epochs", ")", "==", "0", ")", "or", "(", "(", "epoch", "/", "self", ".", "epochs", ">=", "0.8", ")", "&", "(", "epoch", "%", "5", "==", "0", ")", ")", ":", "\n", "                ", "self", ".", "output_backend", ".", "save_model_checkpoint", "(", "self", ".", "get_model_state_dict", "(", ")", ",", "epoch", ",", "\n", "optimizer_state_dict", "=", "self", ".", "get_optimizer_state_dict", "(", ")", ")", "\n", "if", "self", ".", "ema", ":", "\n", "                    ", "self", ".", "output_backend", ".", "save_model_checkpoint", "(", "self", ".", "get_avg_model_state_dict", "(", ")", ",", "epoch", ",", "\n", "optimizer_state_dict", "=", "self", ".", "get_optimizer_state_dict", "(", ")", ",", "\n", "avg", "=", "True", ")", "\n", "\n", "#test and save best", "\n", "", "", "if", "(", "epoch", "/", "self", ".", "epochs", ">=", "0.8", ")", "|", "(", "epoch", "%", "self", ".", "test_epochs", "==", "0", ")", ":", "\n", "                ", "new_best", "=", "self", ".", "test", "(", "test_loaders", ",", "epoch", ",", "False", ")", "\n", "state_dict", "=", "self", ".", "get_model_state_dict", "(", ")", "\n", "if", "new_best", ":", "\n", "                    ", "self", ".", "output_backend", ".", "save_model_checkpoint", "(", "state_dict", ",", "'best'", ",", "\n", "optimizer_state_dict", "=", "self", ".", "get_optimizer_state_dict", "(", ")", ")", "\n", "\n", "", "if", "self", ".", "ema", ":", "\n", "#self._update_avg_model_batch_norm(train_loaders)", "\n", "                    ", "self", ".", "_sync_parallel_avg_model", "(", "device_ids", "=", "device_ids", ")", "\n", "new_best", "=", "self", ".", "test", "(", "test_loaders", ",", "epoch", ",", "True", ")", "\n", "state_dict", "=", "self", ".", "get_avg_model_state_dict", "(", ")", "\n", "if", "new_best", ":", "\n", "                        ", "self", ".", "output_backend", ".", "save_model_checkpoint", "(", "state_dict", ",", "'best'", ",", "avg", "=", "True", ")", "\n", "\n", "", "", "", "epoch_t", "=", "(", "time", ".", "time", "(", ")", "-", "epoch_start_t", ")", "/", "60", "\n", "self", ".", "output_backend", ".", "log_epoch_time", "(", "epoch_t", ",", "epoch", ",", "self", ".", "epochs", ")", "\n", "\n", "", "self", ".", "output_backend", ".", "save_model_checkpoint", "(", "self", ".", "get_model_state_dict", "(", ")", ",", "'final'", ",", "\n", "optimizer_state_dict", "=", "self", ".", "get_optimizer_state_dict", "(", ")", ")", "\n", "if", "self", ".", "ema", ":", "\n", "#self._update_avg_model_batch_norm(train_loaders)", "\n", "            ", "self", ".", "output_backend", ".", "save_model_checkpoint", "(", "self", ".", "get_avg_model_state_dict", "(", ")", ",", "'final'", ",", "avg", "=", "True", ")", "\n", "\n", "", "if", "self", ".", "swa_epochs", ">", "0", ":", "\n", "#first train for the desired number of cycle_length then start SWA", "\n", "            ", "print", "(", "f'Starting Stochastic Weight averaging for {self.swa_epochs} epochs'", ")", "\n", "self", ".", "_create_swa_optimizer_scheduler", "(", ")", "\n", "self", ".", "scheduler", ".", "step", "(", "self", ".", "swa_virtual_schedule_swa_end", "-", "self", ".", "swa_cycle_length", ")", "\n", "\n", "for", "swa_epoch", "in", "range", "(", "0", ",", "self", ".", "swa_epochs", ")", ":", "\n", "#each cycle repeats the last cycle_length epochs of a virtual schedule with total length", "\n", "#swa_virtual_schedule_length", "\n", "#so set the epoch in _inner_train accordingly", "\n", "                ", "scheduler_epoch", "=", "self", ".", "swa_virtual_schedule_swa_end", "-", "(", "self", ".", "swa_cycle_length", "-", "(", "swa_epoch", "%", "self", ".", "swa_cycle_length", ")", ")", "\n", "\n", "#epoch is the total epoch of training, ranging from epochs to epochs + swa_epochs; used for loggig", "\n", "epoch", "=", "self", ".", "epochs", "+", "swa_epoch", "\n", "\n", "epoch_start_t", "=", "time", ".", "time", "(", ")", "\n", "self", ".", "_inner_train", "(", "train_loaders", ",", "scheduler_epoch", ",", "log_epoch", "=", "epoch", ")", "\n", "epoch_t", "=", "(", "time", ".", "time", "(", ")", "-", "epoch_start_t", ")", "/", "60", "\n", "self", ".", "output_backend", ".", "log_epoch_time", "(", "epoch_t", ",", "epoch", ",", "self", ".", "epochs", "+", "self", ".", "swa_epochs", ")", "\n", "\n", "#update the swa density_model every swa_update_frequency epochs", "\n", "if", "(", "(", "swa_epoch", "+", "1", ")", "%", "self", ".", "swa_update_frequency", ")", "==", "0", ":", "\n", "                    ", "self", ".", "_update_avg_model", "(", "device_ids", ")", "\n", "\n", "if", "(", "swa_epoch", "/", "self", ".", "swa_epochs", ">=", "0.8", ")", "|", "(", "swa_epoch", "%", "self", ".", "test_epochs", "==", "0", ")", ":", "\n", "                        ", "new_best", "=", "self", ".", "test", "(", "test_loaders", ",", "epoch", ",", "False", ")", "\n", "state_dict", "=", "self", ".", "get_model_state_dict", "(", ")", "\n", "if", "new_best", ":", "\n", "                            ", "self", ".", "output_backend", ".", "save_model_checkpoint", "(", "state_dict", ",", "'best_swa'", ",", "\n", "optimizer_state_dict", "=", "self", ".", "get_optimizer_state_dict", "(", ")", ")", "\n", "\n", "", "self", ".", "_update_avg_model_batch_norm", "(", "train_loaders", ")", "\n", "new_best", "=", "self", ".", "test", "(", "test_loaders", ",", "epoch", ",", "True", ")", "\n", "state_dict", "=", "self", ".", "get_avg_model_state_dict", "(", ")", "\n", "if", "new_best", ":", "\n", "                            ", "self", ".", "output_backend", ".", "save_model_checkpoint", "(", "state_dict", ",", "'best_swa'", ",", "avg", "=", "True", ")", "\n", "\n", "", "", "", "", "self", ".", "_update_avg_model_batch_norm", "(", "train_loaders", ")", "\n", "self", ".", "output_backend", ".", "save_model_checkpoint", "(", "self", ".", "get_model_state_dict", "(", ")", ",", "'final_swa'", ",", "avg", "=", "True", ")", "\n", "\n", "", "self", ".", "output_backend", ".", "close_backend", "(", ")", "\n", "return", "self", ".", "output_backend", ".", "model_name", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_type.TrainType._inner_train": [[443, 445], ["NotImplementedError"], "methods", ["None"], ["", "def", "_inner_train", "(", "self", ",", "train_loaders", ",", "epoch", ",", "log_epoch", "=", "None", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_type.TrainType._update_avg_model_batch_norm": [[446, 448], ["NotImplementedError"], "methods", ["None"], ["", "def", "_update_avg_model_batch_norm", "(", "self", ",", "train_loaders", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.BCECEDA_training.BCEACETObjective.__init__": [[11, 19], ["train_loss.MinMaxLoss.__init__"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models_32x32.shake_pyramidnet.ShakePyramidNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "epoch", ",", "mask_features", ",", "min_features_mask", ",", "max_features_mask", ",", "num_features", ",", "\n", "log_stats", "=", "False", ",", "number_of_batches", "=", "None", ",", "name_prefix", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "'BCEACET'", ",", "expected_format", "=", "'logits'", ",", "log_stats", "=", "log_stats", ",", "name_prefix", "=", "name_prefix", ")", "\n", "self", ".", "epoch", "=", "epoch", "\n", "self", ".", "num_features", "=", "num_features", "\n", "self", ".", "mask_features", "=", "mask_features", "\n", "self", ".", "min_features_mask", "=", "min_features_mask", "\n", "self", ".", "max_features_mask", "=", "max_features_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.BCECEDA_training.BCEACETObjective._generate_mask": [[21, 32], ["torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "range", "torch.randint().item", "torch.randint().item", "torch.randint().item", "torch.randint().item", "torch.randint().item", "torch.randint().item", "torch.randint().item", "torch.randint().item", "torch.randint().item", "torch.randint().item", "torch.randint().item", "torch.randint().item", "torch.randint().item", "torch.randint().item", "torch.randint().item", "torch.randint().item", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint"], "methods", ["None"], ["", "def", "_generate_mask", "(", "self", ",", "target", ")", ":", "\n", "        ", "if", "self", ".", "mask_features", ":", "\n", "            ", "mask", "=", "torch", ".", "zeros_like", "(", "target", ",", "dtype", "=", "torch", ".", "float", ")", "\n", "for", "idx", "in", "range", "(", "mask", ".", "shape", "[", "0", "]", ")", ":", "\n", "                ", "num_non_masked", "=", "torch", ".", "randint", "(", "self", ".", "min_features_mask", ",", "self", ".", "max_features_mask", "+", "1", ",", "(", "1", ",", ")", ")", ".", "item", "(", ")", "\n", "non_masked_idcs", "=", "torch", ".", "randperm", "(", "mask", ".", "shape", "[", "1", "]", ",", "device", "=", "mask", ".", "device", ")", "[", ":", "num_non_masked", "]", "\n", "mask", "[", "idx", ",", "non_masked_idcs", "]", "=", "1", "\n", "\n", "", "self", ".", "mask", "=", "mask", "\n", "", "else", ":", "\n", "            ", "self", ".", "mask", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.BCECEDA_training.BCEACETObjective.inner_max": [[33, 35], ["None"], "methods", ["None"], ["", "", "def", "inner_max", "(", "self", ",", "data", ",", "target", ")", ":", "\n", "        ", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.BCECEDA_training.BCEACETObjective.forward": [[36, 44], ["BCECEDA_training.BCEACETObjective._prepare_input", "BCECEDA_training.BCEACETObjective._generate_mask", "train_loss.BCELogitsProxy", "train_loss.BCELogitsProxy.", "BCECEDA_training.BCEACETObjective._log_stats", "train_loss.TrainLoss.reduce", "data.new_ones"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_loss.TrainLoss._prepare_input", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.BCEACET_training.BCEACETObjective._generate_mask", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_loss.LoggingLoss._log_stats", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.adversarial_attacks.utils.reduce"], ["", "def", "forward", "(", "self", ",", "data", ",", "model_out", ",", "orig_data", ",", "y", ",", "reduction", "=", "'mean'", ")", ":", "\n", "        ", "prep_out", "=", "self", ".", "_prepare_input", "(", "model_out", ")", "\n", "uniform_target", "=", "0.5", "*", "data", ".", "new_ones", "(", "(", "data", ".", "shape", "[", "0", "]", ",", "self", ".", "num_features", ")", ",", "dtype", "=", "torch", ".", "float", ")", "\n", "self", ".", "_generate_mask", "(", "uniform_target", ")", "\n", "obj", "=", "BCELogitsProxy", "(", "mask", "=", "self", ".", "mask", ",", "log_stats", "=", "False", ")", "\n", "loss_expanded", "=", "obj", "(", "None", ",", "prep_out", ",", "None", ",", "uniform_target", ",", "reduction", "=", "'none'", ")", "\n", "self", ".", "_log_stats", "(", "loss_expanded", ")", "\n", "return", "TrainLoss", ".", "reduce", "(", "loss_expanded", ",", "reduction", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.BCECEDA_training.BCECEDATraining.__init__": [[46, 60], ["utils.LPDistance", "out_distribution_training.OutDistributionTraining.__init__"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models_32x32.shake_pyramidnet.ShakePyramidNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "model", ",", "optimizer_config", ",", "epochs", ",", "device", ",", "num_classes", ",", "\n", "mask_features", ",", "min_features_mask", ",", "max_features_mask", ",", "\n", "lr_scheduler_config", "=", "None", ",", "\n", "lam", "=", "1.", ",", "test_epochs", "=", "1", ",", "verbose", "=", "100", ",", "saved_model_dir", "=", "'SavedModels'", ",", "saved_log_dir", "=", "'Logs'", ")", ":", "\n", "\n", "        ", "distance", "=", "d", ".", "LPDistance", "(", "p", "=", "2", ")", "\n", "super", "(", ")", ".", "__init__", "(", "'BCECEDA'", ",", "model", ",", "distance", ",", "optimizer_config", ",", "epochs", ",", "device", ",", "num_classes", ",", "\n", "clean_criterion", "=", "'bce'", ",", "lr_scheduler_config", "=", "lr_scheduler_config", ",", "od_weight", "=", "lam", ",", "\n", "test_epochs", "=", "test_epochs", ",", "verbose", "=", "verbose", ",", "saved_model_dir", "=", "saved_model_dir", ",", "\n", "saved_log_dir", "=", "saved_log_dir", ")", "\n", "\n", "self", ".", "mask_features", "=", "mask_features", "\n", "self", ".", "min_features_mask", "=", "min_features_mask", "\n", "self", ".", "max_features_mask", "=", "max_features_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.BCECEDA_training.BCECEDATraining._get_od_criterion": [[61, 65], ["BCECEDA_training.BCEACETObjective"], "methods", ["None"], ["", "def", "_get_od_criterion", "(", "self", ",", "epoch", ",", "model", ")", ":", "\n", "        ", "train_criterion", "=", "BCEACETObjective", "(", "epoch", ",", "self", ".", "mask_features", ",", "self", ".", "min_features_mask", ",", "self", ".", "max_features_mask", ",", "self", ".", "classes", ",", "\n", "log_stats", "=", "True", ",", "name_prefix", "=", "'OD'", ")", "\n", "return", "None", ",", "train_criterion", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.BCECEDA_training.BCECEDATraining._get_CEDA_config": [[66, 69], ["None"], "methods", ["None"], ["", "def", "_get_CEDA_config", "(", "self", ")", ":", "\n", "        ", "CEDA_config", "=", "{", "'lambda'", ":", "self", ".", "od_weight", "}", "\n", "return", "CEDA_config", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.BCECEDA_training.BCECEDATraining._get_train_type_config": [[70, 85], ["BCECEDA_training.BCECEDATraining._get_base_config", "BCECEDA_training.BCECEDATraining._get_CEDA_config"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_type.TrainType._get_base_config", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.BCECEDA_training.BCECEDATraining._get_CEDA_config"], ["", "def", "_get_train_type_config", "(", "self", ",", "loader_config", "=", "None", ")", ":", "\n", "        ", "base_config", "=", "self", ".", "_get_base_config", "(", ")", "\n", "ceda_config", "=", "self", ".", "_get_CEDA_config", "(", ")", "\n", "\n", "configs", "=", "{", "}", "\n", "configs", "[", "'Base'", "]", "=", "base_config", "\n", "configs", "[", "'CEDA'", "]", "=", "ceda_config", "\n", "configs", "[", "'Optimizer'", "]", "=", "self", ".", "optimizer_config", "\n", "configs", "[", "'Scheduler'", "]", "=", "self", ".", "lr_scheduler_config", "\n", "\n", "configs", "[", "'Data Loader'", "]", "=", "loader_config", "\n", "configs", "[", "'MSDA'", "]", "=", "self", ".", "msda_config", "\n", "configs", "[", "'Model'", "]", "=", "model_config", "\n", "\n", "return", "configs", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_loss.Log.__init__": [[29, 36], ["isinstance", "ValueError"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "name", ",", "value", ",", "type", ")", ":", "\n", "        ", "if", "not", "isinstance", "(", "type", ",", "LogType", ")", ":", "\n", "            ", "raise", "ValueError", "(", "'Log expects LogType as type'", ")", "\n", "\n", "", "self", ".", "name", "=", "name", "\n", "self", ".", "value", "=", "value", "\n", "self", ".", "type", "=", "type", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_loss.Logger.__int__": [[38, 42], ["train_loss.Logger._reset_stats"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_loss.LoggingLoss._reset_stats"], ["    ", "def", "__int__", "(", "self", ",", "name", ",", "name_prefix", "=", "None", ")", ":", "\n", "        ", "self", ".", "name", "=", "name", "\n", "self", ".", "name_prefix", "=", "name_prefix", "\n", "self", ".", "_reset_stats", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_loss.Logger._reset_stats": [[43, 45], ["None"], "methods", ["None"], ["", "def", "_reset_stats", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_loss.Logger.log": [[46, 48], ["None"], "methods", ["None"], ["", "def", "log", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_loss.Logger.get_logs": [[49, 52], ["None"], "methods", ["None"], ["", "def", "get_logs", "(", "self", ")", ":", "\n", "#return list of Logs", "\n", "        ", "return", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_loss.SingleValueLogger.__init__": [[54, 56], ["train_loss.Logger.__int__"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_loss.Logger.__int__"], ["    ", "def", "__init__", "(", "self", ",", "name", ",", "name_prefix", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__int__", "(", "name", ",", "name_prefix", "=", "name_prefix", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_loss.SingleValueLogger._reset_stats": [[57, 59], ["train_loss.RunningAverage"], "methods", ["None"], ["", "def", "_reset_stats", "(", "self", ")", ":", "\n", "        ", "self", ".", "value", "=", "RunningAverage", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_loss.SingleValueLogger.log": [[60, 62], ["train_loss.SingleValueLogger.value.add_value"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_loss.RunningAverage.add_value"], ["", "def", "log", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "value", ".", "add_value", "(", "value", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_loss.SingleValueLogger.get_logs": [[63, 74], ["train_loss.Log"], "methods", ["None"], ["", "def", "get_logs", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "value", ".", "N", ">", "0", ":", "\n", "            ", "if", "self", ".", "name_prefix", "is", "None", ":", "\n", "                ", "tag", "=", "self", ".", "name", "\n", "", "else", ":", "\n", "                ", "tag", "=", "f'{self.name_prefix}{self.name}'", "\n", "\n", "", "log", "=", "Log", "(", "tag", ",", "self", ".", "value", ".", "mean", ",", "LogType", ".", "SCALAR", ")", "\n", "return", "[", "log", "]", "\n", "", "else", ":", "\n", "            ", "return", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_loss.SingleValueLogger.get_all_recorded_values": [[75, 77], ["None"], "methods", ["None"], ["", "", "def", "get_all_recorded_values", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "values", "[", ":", "self", ".", "idx", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_loss.SingleValueHistogramLogger.__init__": [[79, 82], ["train_loss.Logger.__int__"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_loss.Logger.__int__"], ["    ", "def", "__init__", "(", "self", ",", "name", ",", "num_batches", "=", "None", ",", "name_prefix", "=", "None", ")", ":", "\n", "        ", "self", ".", "num_batches", "=", "num_batches", "\n", "super", "(", ")", ".", "__int__", "(", "name", ",", "name_prefix", "=", "name_prefix", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_loss.SingleValueHistogramLogger._reset_stats": [[83, 89], ["torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["None"], ["", "def", "_reset_stats", "(", "self", ")", ":", "\n", "        ", "self", ".", "idx", "=", "0", "\n", "if", "self", ".", "num_batches", "is", "not", "None", ":", "\n", "            ", "self", ".", "values", "=", "torch", ".", "zeros", "(", "self", ".", "num_batches", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "values", "=", "torch", ".", "zeros", "(", "DEFAULT_LENGTH", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_loss.SingleValueHistogramLogger.log": [[90, 96], ["train_loss.double_array"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_loss.double_array"], ["", "", "def", "log", "(", "self", ",", "value", ")", ":", "\n", "        ", "if", "self", ".", "idx", ">=", "self", ".", "values", ".", "shape", "[", "0", "]", ":", "\n", "            ", "self", ".", "values", "=", "double_array", "(", "self", ".", "values", ")", "\n", "\n", "", "self", ".", "values", "[", "self", ".", "idx", "]", "=", "value", "\n", "self", ".", "idx", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_loss.SingleValueHistogramLogger.get_logs": [[97, 110], ["train_loss.Log"], "methods", ["None"], ["", "def", "get_logs", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "idx", ">", "0", ":", "\n", "            ", "if", "self", ".", "name_prefix", "is", "None", ":", "\n", "                ", "tag", "=", "self", ".", "name", "\n", "", "else", ":", "\n", "                ", "tag", "=", "f'{self.name_prefix}{self.name}'", "\n", "\n", "\n", "", "log", "=", "Log", "(", "tag", ",", "self", ".", "values", "[", ":", "self", ".", "idx", "]", ",", "LogType", ".", "HISTOGRAM", ")", "\n", "\n", "return", "[", "log", "]", "\n", "", "else", ":", "\n", "            ", "return", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_loss.SingleValueHistogramLogger.get_all_recorded_values": [[111, 113], ["None"], "methods", ["None"], ["", "", "def", "get_all_recorded_values", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "values", "[", ":", "self", ".", "idx", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_loss.CallableLogger.__init__": [[116, 118], ["train_loss.Logger.__int__"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_loss.Logger.__int__"], ["    ", "def", "__init__", "(", "self", ",", "name", ",", "name_prefix", ")", ":", "\n", "        ", "super", "(", ")", ".", "__int__", "(", "name", ",", "name_prefix", "=", "name_prefix", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_loss.CallableLogger.__call__": [[119, 121], ["train_loss.CallableLogger.log"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_loss.DistanceLogger.log"], ["", "def", "__call__", "(", "self", ",", "data", ",", "model_out", ",", "orig_data", ",", "y", ")", ":", "\n", "        ", "return", "self", ".", "log", "(", "data", ",", "model_out", ",", "orig_data", ",", "y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_loss.CallableLogger.log": [[122, 124], ["None"], "methods", ["None"], ["", "def", "log", "(", "self", ",", "data", ",", "model_out", ",", "orig_data", ",", "y", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_loss.RunningAverage.__init__": [[126, 128], ["train_loss.RunningAverage._reset_stats"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_loss.LoggingLoss._reset_stats"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "_reset_stats", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_loss.RunningAverage._reset_stats": [[129, 132], ["None"], "methods", ["None"], ["", "def", "_reset_stats", "(", "self", ")", ":", "\n", "        ", "self", ".", "N", "=", "0", "\n", "self", ".", "mean", "=", "0.", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_loss.RunningAverage.add_value": [[133, 137], ["None"], "methods", ["None"], ["", "def", "add_value", "(", "self", ",", "values_sum", ",", "values_N", "=", "1", ")", ":", "\n", "        ", "new_N", "=", "self", ".", "N", "+", "values_N", "\n", "self", ".", "mean", "=", "self", ".", "mean", "*", "(", "self", ".", "N", "/", "new_N", ")", "+", "values_sum", "/", "(", "new_N", ")", "\n", "self", ".", "N", "=", "new_N", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_loss.RunningAverage.__format__": [[138, 140], ["format"], "methods", ["None"], ["", "def", "__format__", "(", "self", ",", "format_spec", ")", ":", "\n", "        ", "return", "format", "(", "self", ".", "mean", ",", "format_spec", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_loss.AccuracyConfidenceLogger.__init__": [[143, 145], ["train_loss.Logger.__int__"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_loss.Logger.__int__"], ["    ", "def", "__init__", "(", "self", ",", "name_prefix", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__int__", "(", "'AccuracyConfidence'", ",", "name_prefix", "=", "name_prefix", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_loss.AccuracyConfidenceLogger._reset_stats": [[146, 149], ["train_loss.RunningAverage", "train_loss.RunningAverage"], "methods", ["None"], ["", "def", "_reset_stats", "(", "self", ")", ":", "\n", "        ", "self", ".", "accuracy", "=", "RunningAverage", "(", ")", "\n", "self", ".", "avg_max_confidence", "=", "RunningAverage", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_loss.AccuracyConfidenceLogger.log": [[150, 163], ["torch.softmax().max", "torch.softmax().max", "torch.softmax().max", "predicted.eq", "train_loss.AccuracyConfidenceLogger.accuracy.add_value", "train_loss.AccuracyConfidenceLogger.avg_max_confidence.add_value", "y.dim", "predicted.eq.sum().item", "conf.sum().item", "torch.softmax", "torch.softmax", "torch.softmax", "y.dim", "y.max", "ValueError", "predicted.eq.sum", "conf.sum"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_loss.RunningAverage.add_value", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_loss.RunningAverage.add_value"], ["", "def", "log", "(", "self", ",", "data", ",", "model_out", ",", "orig_data", ",", "y", ")", ":", "\n", "        ", "conf", ",", "predicted", "=", "F", ".", "softmax", "(", "model_out", ",", "dim", "=", "1", ")", ".", "max", "(", "dim", "=", "1", ")", "\n", "if", "y", ".", "dim", "(", ")", "==", "1", ":", "\n", "            ", "y_tar", "=", "y", "\n", "", "elif", "y", ".", "dim", "(", ")", "==", "2", ":", "\n", "#soft labels", "\n", "            ", "_", ",", "y_tar", "=", "y", ".", "max", "(", "dim", "=", "1", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", ")", "\n", "\n", "", "correct", "=", "predicted", ".", "eq", "(", "y_tar", ")", "\n", "self", ".", "accuracy", ".", "add_value", "(", "correct", ".", "sum", "(", ")", ".", "item", "(", ")", ",", "correct", ".", "shape", "[", "0", "]", ")", "\n", "self", ".", "avg_max_confidence", ".", "add_value", "(", "conf", ".", "sum", "(", ")", ".", "item", "(", ")", ",", "correct", ".", "shape", "[", "0", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_loss.AccuracyConfidenceLogger.get_accuracy": [[164, 166], ["None"], "methods", ["None"], ["", "def", "get_accuracy", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "accuracy", ".", "mean", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_loss.AccuracyConfidenceLogger.get_logs": [[167, 183], ["train_loss.Log", "train_loss.Log"], "methods", ["None"], ["", "def", "get_logs", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "accuracy", ".", "N", ">", "0", ":", "\n", "# (name, value, type)", "\n", "            ", "if", "self", ".", "name_prefix", "is", "None", ":", "\n", "                ", "acc_name", "=", "'Accuracy'", "\n", "conf_name", "=", "'MeanMaxConf'", "\n", "", "else", ":", "\n", "                ", "acc_name", "=", "f'{self.name_prefix}Accuracy'", "\n", "conf_name", "=", "f'{self.name_prefix}MeanMaxConf'", "\n", "\n", "", "acc_log", "=", "Log", "(", "acc_name", ",", "self", ".", "accuracy", ".", "mean", ",", "LogType", ".", "SCALAR", ")", "\n", "conf_log", "=", "Log", "(", "conf_name", ",", "self", ".", "avg_max_confidence", ".", "mean", ",", "LogType", ".", "SCALAR", ")", "\n", "\n", "return", "[", "acc_log", ",", "conf_log", "]", "\n", "", "else", ":", "\n", "            ", "return", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_loss.BCAccuracyConfidenceLogger.__init__": [[186, 189], ["train_loss.Logger.__int__"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_loss.Logger.__int__"], ["    ", "def", "__init__", "(", "self", ",", "num_attributes", ",", "name_prefix", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__int__", "(", "'BCAccuracyConfidence'", ",", "name_prefix", "=", "name_prefix", ")", "\n", "self", ".", "num_attributes", "=", "num_attributes", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_loss.BCAccuracyConfidenceLogger._reset_stats": [[190, 193], ["train_loss.RunningAverage", "train_loss.RunningAverage"], "methods", ["None"], ["", "def", "_reset_stats", "(", "self", ")", ":", "\n", "        ", "self", ".", "attribute_accuracies", "=", "RunningAverage", "(", ")", "\n", "self", ".", "attribute_avg_max_confidences", "=", "RunningAverage", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_loss.BCAccuracyConfidenceLogger.get_accuracy": [[194, 196], ["torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean"], "methods", ["None"], ["", "def", "get_accuracy", "(", "self", ")", ":", "\n", "        ", "return", "torch", ".", "mean", "(", "self", ".", "attribute_accuracies", ".", "mean", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_loss.BCAccuracyConfidenceLogger.log": [[197, 209], ["torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.sum().detach().cpu", "torch.sum().detach().cpu", "torch.sum().detach().cpu", "torch.sum().detach().cpu", "torch.sum().detach().cpu", "torch.sum().detach().cpu", "torch.sum().detach().cpu", "torch.sum().detach().cpu", "torch.sum().detach().cpu", "predicted_bool.eq", "torch.sum().float().detach().cpu", "torch.sum().float().detach().cpu", "torch.sum().float().detach().cpu", "torch.sum().float().detach().cpu", "torch.sum().float().detach().cpu", "torch.sum().float().detach().cpu", "torch.sum().float().detach().cpu", "torch.sum().float().detach().cpu", "torch.sum().float().detach().cpu", "train_loss.BCAccuracyConfidenceLogger.attribute_accuracies.add_value", "train_loss.BCAccuracyConfidenceLogger.attribute_avg_max_confidences.add_value", "torch.sum().detach", "torch.sum().detach", "torch.sum().detach", "torch.sum().detach", "torch.sum().detach", "torch.sum().detach", "torch.sum().detach", "torch.sum().detach", "torch.sum().detach", "torch.sum().float().detach", "torch.sum().float().detach", "torch.sum().float().detach", "torch.sum().float().detach", "torch.sum().float().detach", "torch.sum().float().detach", "torch.sum().float().detach", "torch.sum().float().detach", "torch.sum().float().detach", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum().float", "torch.sum().float", "torch.sum().float", "torch.sum().float", "torch.sum().float", "torch.sum().float", "torch.sum().float", "torch.sum().float", "torch.sum().float", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_loss.RunningAverage.add_value", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_loss.RunningAverage.add_value"], ["", "def", "log", "(", "self", ",", "data", ",", "model_out", ",", "orig_data", ",", "y", ")", ":", "\n", "        ", "bs", "=", "data", ".", "shape", "[", "0", "]", "\n", "sigmoid_attributes", "=", "torch", ".", "sigmoid", "(", "model_out", ")", "\n", "predicted_bool", "=", "(", "sigmoid_attributes", ">", "0.5", ")", "\n", "conf_attributes", "=", "torch", ".", "zeros_like", "(", "model_out", ")", "\n", "conf_attributes", "[", "predicted_bool", "]", "=", "sigmoid_attributes", "[", "predicted_bool", "]", "\n", "conf_attributes", "[", "~", "predicted_bool", "]", "=", "1.0", "-", "sigmoid_attributes", "[", "~", "predicted_bool", "]", "\n", "conf_attributes_sum", "=", "torch", ".", "sum", "(", "conf_attributes", ",", "dim", "=", "0", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", "\n", "correct_all", "=", "predicted_bool", ".", "eq", "(", "y", ")", "\n", "correct_per_attribute", "=", "torch", ".", "sum", "(", "correct_all", ",", "dim", "=", "0", ")", ".", "float", "(", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", "\n", "self", ".", "attribute_accuracies", ".", "add_value", "(", "correct_per_attribute", ",", "bs", ")", "\n", "self", ".", "attribute_avg_max_confidences", ".", "add_value", "(", "conf_attributes_sum", ",", "bs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_loss.BCAccuracyConfidenceLogger.get_logs": [[210, 231], ["train_loss.Log", "train_loss.Log", "train_loss.Log", "train_loss.Log", "train_loss.BCAccuracyConfidenceLogger.attribute_accuracies.mean.mean", "train_loss.BCAccuracyConfidenceLogger.attribute_avg_max_confidences.mean.mean"], "methods", ["None"], ["", "def", "get_logs", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "attribute_accuracies", ".", "N", ">", "0", ":", "\n", "# (name, value, type)", "\n", "            ", "if", "self", ".", "name_prefix", "is", "None", ":", "\n", "                ", "acc_name", "=", "'Accuracy'", "\n", "acc_histogram_name", "=", "'IndividualAccuracies'", "\n", "conf_name", "=", "'MeanMaxConf'", "\n", "conf_histogram_name", "=", "'IndividualAccuraciesMeanMaxConf'", "\n", "", "else", ":", "\n", "                ", "acc_name", "=", "f'{self.name_prefix}Accuracy'", "\n", "acc_histogram_name", "=", "f'{self.name_prefix}IndividualAccuracies'", "\n", "conf_name", "=", "f'{self.name_prefix}MeanMaxConf'", "\n", "conf_histogram_name", "=", "f'{self.name_prefix}IndividualAccuraciesMeanMaxConf'", "\n", "\n", "", "acc_log", "=", "Log", "(", "acc_name", ",", "self", ".", "attribute_accuracies", ".", "mean", ".", "mean", "(", ")", ",", "LogType", ".", "SCALAR", ")", "\n", "indiv_accs_log", "=", "Log", "(", "acc_histogram_name", ",", "self", ".", "attribute_accuracies", ".", "mean", ",", "LogType", ".", "HISTOGRAM", ")", "\n", "conf_log", "=", "Log", "(", "conf_name", ",", "self", ".", "attribute_avg_max_confidences", ".", "mean", ".", "mean", "(", ")", ",", "LogType", ".", "SCALAR", ")", "\n", "indiv_confs_log", "=", "Log", "(", "conf_histogram_name", ",", "self", ".", "attribute_avg_max_confidences", ".", "mean", ",", "LogType", ".", "HISTOGRAM", ")", "\n", "return", "[", "acc_log", ",", "indiv_accs_log", ",", "conf_log", ",", "indiv_confs_log", "]", "\n", "", "else", ":", "\n", "            ", "return", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_loss.ConfidenceLogger.__init__": [[234, 236], ["train_loss.Logger.__int__"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_loss.Logger.__int__"], ["    ", "def", "__init__", "(", "self", ",", "name_prefix", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__int__", "(", "'Confidence'", ",", "name_prefix", "=", "name_prefix", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_loss.ConfidenceLogger._reset_stats": [[237, 239], ["train_loss.RunningAverage"], "methods", ["None"], ["", "def", "_reset_stats", "(", "self", ")", ":", "\n", "        ", "self", ".", "avg_max_confidence", "=", "RunningAverage", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_loss.ConfidenceLogger.log": [[240, 243], ["torch.softmax().max", "torch.softmax().max", "torch.softmax().max", "train_loss.ConfidenceLogger.avg_max_confidence.add_value", "conf.sum().item", "torch.softmax", "torch.softmax", "torch.softmax", "conf.sum"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_loss.RunningAverage.add_value"], ["", "def", "log", "(", "self", ",", "data", ",", "model_out", ",", "orig_data", ",", "y", ")", ":", "\n", "        ", "conf", ",", "predicted", "=", "F", ".", "softmax", "(", "model_out", ",", "dim", "=", "1", ")", ".", "max", "(", "dim", "=", "1", ")", "\n", "self", ".", "avg_max_confidence", ".", "add_value", "(", "conf", ".", "sum", "(", ")", ".", "item", "(", ")", ",", "data", ".", "shape", "[", "0", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_loss.ConfidenceLogger.get_logs": [[244, 258], ["train_loss.Log"], "methods", ["None"], ["", "def", "get_logs", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "avg_max_confidence", ".", "N", ">", "0", ":", "\n", "\n", "# (name, value, type)", "\n", "            ", "if", "self", ".", "name_prefix", "is", "None", ":", "\n", "                ", "conf_name", "=", "'MeanMaxConf'", "\n", "", "else", ":", "\n", "                ", "conf_name", "=", "f'{self.name_prefix}MeanMaxConf'", "\n", "\n", "", "conf_log", "=", "Log", "(", "conf_name", ",", "self", ".", "avg_max_confidence", ".", "mean", ",", "LogType", ".", "SCALAR", ")", "\n", "\n", "return", "[", "conf_log", "]", "\n", "", "else", ":", "\n", "            ", "return", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_loss.BCConfidenceLogger.__init__": [[260, 263], ["train_loss.Logger.__int__"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_loss.Logger.__int__"], ["    ", "def", "__init__", "(", "self", ",", "num_attributes", ",", "name_prefix", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__int__", "(", "'BCConfidence'", ",", "name_prefix", "=", "name_prefix", ")", "\n", "self", ".", "num_attributes", "=", "num_attributes", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_loss.BCConfidenceLogger._reset_stats": [[264, 266], ["train_loss.RunningAverage"], "methods", ["None"], ["", "def", "_reset_stats", "(", "self", ")", ":", "\n", "        ", "self", ".", "attribute_avg_max_confidences", "=", "RunningAverage", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_loss.BCConfidenceLogger.log": [[267, 276], ["torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.sum().detach().cpu", "torch.sum().detach().cpu", "torch.sum().detach().cpu", "torch.sum().detach().cpu", "torch.sum().detach().cpu", "torch.sum().detach().cpu", "torch.sum().detach().cpu", "torch.sum().detach().cpu", "torch.sum().detach().cpu", "train_loss.BCConfidenceLogger.attribute_avg_max_confidences.add_value", "torch.sum().detach", "torch.sum().detach", "torch.sum().detach", "torch.sum().detach", "torch.sum().detach", "torch.sum().detach", "torch.sum().detach", "torch.sum().detach", "torch.sum().detach", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_loss.RunningAverage.add_value"], ["", "def", "log", "(", "self", ",", "data", ",", "model_out", ",", "orig_data", ",", "y", ")", ":", "\n", "        ", "bs", "=", "data", ".", "shape", "[", "0", "]", "\n", "sigmoid_attributes", "=", "torch", ".", "sigmoid", "(", "model_out", ")", "\n", "predicted_bool", "=", "(", "sigmoid_attributes", ">", "0.5", ")", "\n", "conf_attributes", "=", "torch", ".", "zeros_like", "(", "model_out", ")", "\n", "conf_attributes", "[", "predicted_bool", "]", "=", "sigmoid_attributes", "[", "predicted_bool", "]", "\n", "conf_attributes", "[", "~", "predicted_bool", "]", "=", "1.0", "-", "sigmoid_attributes", "[", "~", "predicted_bool", "]", "\n", "conf_attributes_sum", "=", "torch", ".", "sum", "(", "conf_attributes", ",", "dim", "=", "0", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", "\n", "self", ".", "attribute_avg_max_confidences", ".", "add_value", "(", "conf_attributes_sum", ",", "bs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_loss.BCConfidenceLogger.get_logs": [[277, 292], ["train_loss.Log", "train_loss.Log", "train_loss.BCConfidenceLogger.attribute_avg_max_confidences.mean.mean"], "methods", ["None"], ["", "def", "get_logs", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "attribute_avg_max_confidences", ".", "N", ">", "0", ":", "\n", "# (name, value, type)", "\n", "            ", "if", "self", ".", "name_prefix", "is", "None", ":", "\n", "                ", "conf_name", "=", "'MeanMaxConf'", "\n", "conf_histogram_name", "=", "'IndividualAccuraciesMeanMaxConf'", "\n", "", "else", ":", "\n", "                ", "conf_name", "=", "f'{self.name_prefix}MeanMaxConf'", "\n", "conf_histogram_name", "=", "f'{self.name_prefix}IndividualAccuraciesMeanMaxConf'", "\n", "\n", "", "conf_log", "=", "Log", "(", "conf_name", ",", "self", ".", "attribute_avg_max_confidences", ".", "mean", ".", "mean", "(", ")", ",", "LogType", ".", "SCALAR", ")", "\n", "indiv_confs_log", "=", "Log", "(", "conf_histogram_name", ",", "self", ".", "attribute_avg_max_confidences", ".", "mean", ",", "LogType", ".", "HISTOGRAM", ")", "\n", "return", "[", "conf_log", ",", "indiv_confs_log", "]", "\n", "", "else", ":", "\n", "            ", "return", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_loss.DistanceHistogramLogger.__init__": [[295, 299], ["train_loss.Logger.__int__"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_loss.Logger.__int__"], ["    ", "def", "__init__", "(", "self", ",", "distance", ",", "number_of_datapoints", "=", "None", ",", "name_prefix", "=", "None", ")", ":", "\n", "        ", "self", ".", "distance", "=", "distance", "\n", "self", ".", "number_of_datapoints", "=", "number_of_datapoints", "\n", "super", "(", ")", ".", "__int__", "(", "'DistanceHistogramLogger'", ",", "name_prefix", "=", "name_prefix", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_loss.DistanceHistogramLogger._reset_stats": [[300, 306], ["torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["None"], ["", "def", "_reset_stats", "(", "self", ")", ":", "\n", "        ", "self", ".", "idx", "=", "0", "\n", "if", "self", ".", "number_of_datapoints", "is", "not", "None", ":", "\n", "            ", "self", ".", "distances", "=", "torch", ".", "zeros", "(", "self", ".", "number_of_datapoints", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "distances", "=", "torch", ".", "zeros", "(", "DEFAULT_LENGTH", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_loss.DistanceHistogramLogger.log": [[307, 318], ["train_loss.DistanceHistogramLogger.distance", "train_loss.double_array"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_loss.double_array"], ["", "", "def", "log", "(", "self", ",", "data", ",", "model_out", ",", "orig_data", ",", "y", ")", ":", "\n", "        ", "d", "=", "self", ".", "distance", "(", "data", ",", "orig_data", ")", "\n", "free_space", "=", "(", "self", ".", "distances", ".", "shape", "[", "0", "]", "-", "self", ".", "idx", ")", "-", "1", "\n", "while", "d", ".", "shape", "[", "0", "]", ">=", "free_space", ":", "\n", "# double space", "\n", "            ", "self", ".", "distances", "=", "double_array", "(", "self", ".", "distances", ")", "\n", "free_space", "=", "(", "self", ".", "distances", ".", "shape", "[", "0", "]", "-", "self", ".", "idx", ")", "-", "1", "\n", "\n", "", "new_idx", "=", "self", ".", "idx", "+", "d", ".", "shape", "[", "0", "]", "\n", "self", ".", "distances", "[", "self", ".", "idx", ":", "new_idx", "]", "=", "d", "\n", "self", ".", "idx", "=", "new_idx", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_loss.DistanceHistogramLogger.get_logs": [[319, 348], ["train_loss.Log", "train_loss.Log", "train_loss.Log", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.var", "torch.var", "torch.var", "torch.var", "torch.var", "torch.var", "torch.var", "torch.var", "torch.var"], "methods", ["None"], ["", "def", "get_logs", "(", "self", ")", ":", "\n", "# (name, value, type)", "\n", "        ", "distances_filled", "=", "self", ".", "distances", "[", ":", "self", ".", "idx", "]", "\n", "if", "self", ".", "idx", ">", "0", ":", "\n", "            ", "if", "self", ".", "name_prefix", "is", "None", ":", "\n", "                ", "d_name", "=", "'Distance'", "\n", "", "else", ":", "\n", "                ", "d_name", "=", "f'{self.name_prefix}Distance'", "\n", "\n", "", "log_hist", "=", "Log", "(", "d_name", ",", "distances_filled", ",", "LogType", ".", "HISTOGRAM", ")", "\n", "\n", "if", "self", ".", "name_prefix", "is", "None", ":", "\n", "                ", "d_name", "=", "'MeanDistance'", "\n", "", "else", ":", "\n", "                ", "d_name", "=", "f'{self.name_prefix}MeanDistance'", "\n", "\n", "", "log_mean", "=", "Log", "(", "d_name", ",", "torch", ".", "mean", "(", "distances_filled", ")", ",", "LogType", ".", "SCALAR", ")", "\n", "\n", "if", "self", ".", "name_prefix", "is", "None", ":", "\n", "                ", "d_name", "=", "'VarianceDistance'", "\n", "", "else", ":", "\n", "                ", "d_name", "=", "f'{self.name_prefix}VarianceDistance'", "\n", "\n", "", "log_var", "=", "Log", "(", "d_name", ",", "torch", ".", "var", "(", "distances_filled", ")", ",", "LogType", ".", "SCALAR", ")", "\n", "\n", "\n", "return", "[", "log_hist", ",", "log_mean", ",", "log_var", "]", "\n", "", "else", ":", "\n", "            ", "return", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_loss.DistanceLogger.__init__": [[350, 353], ["train_loss.Logger.__int__"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_loss.Logger.__int__"], ["    ", "def", "__init__", "(", "self", ",", "distance", ",", "number_of_datapoints", "=", "None", ",", "name_prefix", "=", "None", ")", ":", "\n", "        ", "self", ".", "distance", "=", "distance", "\n", "super", "(", ")", ".", "__int__", "(", "'DistanceLogger'", ",", "name_prefix", "=", "name_prefix", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_loss.DistanceLogger._reset_stats": [[354, 356], ["train_loss.RunningAverage"], "methods", ["None"], ["", "def", "_reset_stats", "(", "self", ")", ":", "\n", "        ", "self", ".", "mean_distance", "=", "RunningAverage", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_loss.DistanceLogger.log": [[357, 360], ["train_loss.DistanceLogger.distance", "train_loss.DistanceLogger.mean_distance.add_value", "train_loss.DistanceLogger.sum().item", "train_loss.DistanceLogger.sum"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_loss.RunningAverage.add_value"], ["", "def", "log", "(", "self", ",", "data", ",", "model_out", ",", "orig_data", ",", "y", ")", ":", "\n", "        ", "d", "=", "self", ".", "distance", "(", "data", ",", "orig_data", ")", "\n", "self", ".", "mean_distance", ".", "add_value", "(", "d", ".", "sum", "(", ")", ".", "item", "(", ")", ",", "d", ".", "shape", "[", "0", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_loss.DistanceLogger.get_logs": [[362, 375], ["train_loss.Log"], "methods", ["None"], ["", "def", "get_logs", "(", "self", ")", ":", "\n", "# (name, value, type)", "\n", "        ", "if", "self", ".", "mean_distance", ".", "N", ">", "0", ":", "\n", "            ", "if", "self", ".", "name_prefix", "is", "None", ":", "\n", "                ", "d_name", "=", "'MeanDistance'", "\n", "", "else", ":", "\n", "                ", "d_name", "=", "f'{self.name_prefix}MeanDistance'", "\n", "\n", "", "log_mean", "=", "Log", "(", "d_name", ",", "self", ".", "mean_distance", ".", "mean", ",", "LogType", ".", "SCALAR", ")", "\n", "\n", "return", "[", "log_mean", "]", "\n", "", "else", ":", "\n", "            ", "return", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_loss.TrainLoss.__init__": [[378, 382], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models_32x32.shake_pyramidnet.ShakePyramidNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "name", ",", "expected_format", "=", "'log_probabilities'", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "name", "=", "name", "\n", "self", ".", "expected_format", "=", "expected_format", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_loss.TrainLoss.get_config": [[383, 385], ["None"], "methods", ["None"], ["", "def", "get_config", "(", "self", ")", ":", "\n", "        ", "return", "{", "'name'", ":", "self", ".", "name", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_loss.TrainLoss.forward": [[386, 388], ["NotImplementedError"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "data", ",", "model_out", ",", "orig_data", ",", "y", ",", "reduction", "=", "'mean'", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_loss.TrainLoss.get_logs": [[389, 391], ["None"], "methods", ["None"], ["", "def", "get_logs", "(", "self", ")", ":", "\n", "        ", "return", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_loss.TrainLoss._prepare_input": [[392, 403], ["torch.nn.functional.log_softmax", "torch.nn.functional.log_softmax", "torch.nn.functional.log_softmax", "torch.nn.functional.log_softmax", "torch.nn.functional.log_softmax", "torch.nn.functional.log_softmax", "torch.nn.functional.log_softmax", "torch.nn.functional.log_softmax", "torch.nn.functional.log_softmax", "torch.nn.functional.softmax", "torch.nn.functional.softmax", "torch.nn.functional.softmax", "torch.nn.functional.softmax", "torch.nn.functional.softmax", "torch.nn.functional.softmax", "torch.nn.functional.softmax", "torch.nn.functional.softmax", "torch.nn.functional.softmax", "ValueError"], "methods", ["None"], ["", "def", "_prepare_input", "(", "self", ",", "model_out", ")", ":", "\n", "#density_model out are logits", "\n", "        ", "if", "self", ".", "expected_format", "==", "'log_probabilities'", ":", "\n", "            ", "out", "=", "torch", ".", "nn", ".", "functional", ".", "log_softmax", "(", "model_out", ",", "dim", "=", "1", ")", "\n", "", "elif", "self", ".", "expected_format", "==", "'probabilities'", ":", "\n", "            ", "out", "=", "torch", ".", "nn", ".", "functional", ".", "softmax", "(", "model_out", ",", "dim", "=", "1", ")", "\n", "", "elif", "self", ".", "expected_format", "==", "'logits'", ":", "\n", "            ", "out", "=", "model_out", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "f'Format {self.expected_format} not supported'", ")", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_loss.TrainLoss.reduce": [[404, 414], ["loss.mean", "loss.sum", "ValueError"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "reduce", "(", "loss", ",", "reduction", ")", ":", "\n", "        ", "if", "reduction", "==", "'mean'", ":", "\n", "            ", "return", "loss", ".", "mean", "(", ")", "\n", "", "elif", "reduction", "==", "'sum'", ":", "\n", "            ", "return", "loss", ".", "sum", "(", ")", "\n", "", "elif", "reduction", "==", "'none'", ":", "\n", "            ", "return", "loss", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'reduction not supported'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_loss.LoggingLoss.__init__": [[418, 427], ["train_loss.TrainLoss.__init__", "train_loss.LoggingLoss._reset_stats"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models_32x32.shake_pyramidnet.ShakePyramidNet.__init__", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_loss.LoggingLoss._reset_stats"], ["    ", "def", "__init__", "(", "self", ",", "name", ",", "expected_format", ",", "num_losses", "=", "1", ",", "sub_losses_postfix", "=", "None", ",", "log_stats", "=", "False", ",", "name_prefix", "=", "None", ")", ":", "\n", "        ", "TrainLoss", ".", "__init__", "(", "self", ",", "name", ",", "expected_format", "=", "expected_format", ")", "\n", "\n", "self", ".", "log_stats", "=", "log_stats", "\n", "self", ".", "name_prefix", "=", "name_prefix", "\n", "self", ".", "num_Losses", "=", "num_losses", "\n", "self", ".", "sub_losses_postfix", "=", "sub_losses_postfix", "\n", "\n", "self", ".", "_reset_stats", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_loss.LoggingLoss.set_log": [[428, 430], ["None"], "methods", ["None"], ["", "def", "set_log", "(", "self", ",", "log", ")", ":", "\n", "        ", "self", ".", "log_stats", "=", "log", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_loss.LoggingLoss._reset_stats": [[431, 435], ["range", "train_loss.LoggingLoss.loss_means.append", "train_loss.RunningAverage"], "methods", ["None"], ["", "def", "_reset_stats", "(", "self", ")", ":", "\n", "        ", "self", ".", "loss_means", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "num_Losses", ")", ":", "\n", "            ", "self", ".", "loss_means", ".", "append", "(", "RunningAverage", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_loss.LoggingLoss._log_stats": [[436, 439], ["train_loss.LoggingLoss.loss_means[].add_value", "loss_expanded.sum().item", "loss_expanded.sum"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_loss.RunningAverage.add_value"], ["", "", "def", "_log_stats", "(", "self", ",", "loss_expanded", ",", "loss_idx", "=", "0", ")", ":", "\n", "        ", "if", "self", ".", "log_stats", ":", "\n", "            ", "self", ".", "loss_means", "[", "loss_idx", "]", ".", "add_value", "(", "loss_expanded", ".", "sum", "(", ")", ".", "item", "(", ")", ",", "loss_expanded", ".", "shape", "[", "0", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_loss.LoggingLoss.get_logs": [[440, 459], ["range", "logs.append", "train_loss.Log"], "methods", ["None"], ["", "", "def", "get_logs", "(", "self", ")", ":", "\n", "        ", "logs", "=", "[", "]", "\n", "\n", "if", "self", ".", "loss_means", "[", "0", "]", ".", "N", ">", "0", ":", "\n", "            ", "for", "i", "in", "range", "(", "self", ".", "num_Losses", ")", ":", "\n", "# scalar epoch wide mean loss", "\n", "                ", "if", "self", ".", "name_prefix", "is", "None", ":", "\n", "                    ", "full_name", "=", "self", ".", "name", "\n", "", "else", ":", "\n", "                    ", "full_name", "=", "f'{self.name_prefix}{self.name}'", "\n", "\n", "", "if", "self", ".", "sub_losses_postfix", "is", "not", "None", ":", "\n", "                    ", "full_name", "=", "f'{full_name}_{self.sub_losses_postfix[i]}'", "\n", "", "elif", "self", ".", "num_Losses", ">", "1", ":", "\n", "                    ", "full_name", "=", "f'{full_name}_{i}'", "\n", "\n", "", "logs", ".", "append", "(", "Log", "(", "full_name", ",", "self", ".", "loss_means", "[", "i", "]", ".", "mean", ",", "LogType", ".", "SCALAR", ")", ")", "\n", "\n", "", "", "return", "logs", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_loss.MinMaxLoss.__init__": [[461, 464], ["train_loss.LoggingLoss.__init__"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models_32x32.shake_pyramidnet.ShakePyramidNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "name", ",", "expected_format", ",", "log_stats", "=", "False", ",", "num_losses", "=", "1", ",", "sub_losses_postfix", "=", "None", ",", "name_prefix", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "name", ",", "expected_format", ",", "num_losses", "=", "num_losses", ",", "sub_losses_postfix", "=", "sub_losses_postfix", ",", "\n", "log_stats", "=", "log_stats", ",", "name_prefix", "=", "name_prefix", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_loss.MinMaxLoss.inner_max": [[465, 467], ["NotImplementedError"], "methods", ["None"], ["", "def", "inner_max", "(", "self", ",", "data", ",", "target", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_loss.ZeroLoss.__init__": [[469, 471], ["train_loss.MinMaxLoss.__init__"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models_32x32.shake_pyramidnet.ShakePyramidNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "log_stats", "=", "False", ",", "name_prefix", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "'EmptyLoss'", ",", "expected_format", "=", "'logits'", ",", "log_stats", "=", "log_stats", ",", "name_prefix", "=", "name_prefix", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_loss.ZeroLoss.forward": [[472, 475], ["torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "train_loss.TrainLoss.reduce"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.adversarial_attacks.utils.reduce"], ["", "def", "forward", "(", "self", ",", "data", ",", "model_out", ",", "orig_data", ",", "y", ",", "reduction", "=", "'mean'", ")", ":", "\n", "        ", "loss_expanded", "=", "torch", ".", "zeros", "(", "data", ".", "shape", "[", "0", "]", ",", "dtype", "=", "torch", ".", "float", ",", "device", "=", "data", ".", "device", ")", "\n", "return", "TrainLoss", ".", "reduce", "(", "loss_expanded", ",", "reduction", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_loss.ZeroLoss.inner_max": [[476, 478], ["None"], "methods", ["None"], ["", "def", "inner_max", "(", "self", ",", "data", ",", "target", ")", ":", "\n", "        ", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_loss.CrossEntropyProxy.__init__": [[480, 482], ["train_loss.LoggingLoss.__init__"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models_32x32.shake_pyramidnet.ShakePyramidNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "log_stats", "=", "False", ",", "name_prefix", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "'CrossEntropy'", ",", "expected_format", "=", "'logits'", ",", "log_stats", "=", "log_stats", ",", "name_prefix", "=", "name_prefix", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_loss.CrossEntropyProxy.forward": [[483, 488], ["train_loss.CrossEntropyProxy._prepare_input", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "train_loss.CrossEntropyProxy._log_stats", "train_loss.TrainLoss.reduce"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_loss.TrainLoss._prepare_input", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_loss.LoggingLoss._log_stats", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.adversarial_attacks.utils.reduce"], ["", "def", "forward", "(", "self", ",", "data", ",", "model_out", ",", "orig_data", ",", "y", ",", "reduction", "=", "'mean'", ")", ":", "\n", "        ", "prep_out", "=", "self", ".", "_prepare_input", "(", "model_out", ")", "\n", "loss_expanded", "=", "F", ".", "cross_entropy", "(", "prep_out", ",", "y", ",", "reduction", "=", "'none'", ")", "\n", "self", ".", "_log_stats", "(", "loss_expanded", ")", "\n", "return", "TrainLoss", ".", "reduce", "(", "loss_expanded", ",", "reduction", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_loss.BCELogitsProxy.__init__": [[490, 493], ["train_loss.LoggingLoss.__init__"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models_32x32.shake_pyramidnet.ShakePyramidNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "mask", "=", "None", ",", "log_stats", "=", "False", ",", "name_prefix", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "'BCELogits'", ",", "expected_format", "=", "'logits'", ",", "log_stats", "=", "log_stats", ",", "name_prefix", "=", "name_prefix", ")", "\n", "self", ".", "mask", "=", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_loss.BCELogitsProxy.forward": [[494, 504], ["train_loss.BCELogitsProxy._prepare_input", "torch.binary_cross_entropy_with_logits", "torch.binary_cross_entropy_with_logits", "torch.binary_cross_entropy_with_logits", "train_loss.BCELogitsProxy._log_stats", "train_loss.TrainLoss.reduce", "y.float", "loss_expanded.mean.mean.mean", "train_loss.BCELogitsProxy.mask.sum"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_loss.TrainLoss._prepare_input", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_loss.LoggingLoss._log_stats", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.adversarial_attacks.utils.reduce"], ["", "def", "forward", "(", "self", ",", "data", ",", "model_out", ",", "orig_data", ",", "y", ",", "reduction", "=", "'mean'", ")", ":", "\n", "        ", "prep_out", "=", "self", ".", "_prepare_input", "(", "model_out", ")", "\n", "loss_expanded", "=", "F", ".", "binary_cross_entropy_with_logits", "(", "prep_out", ",", "y", ".", "float", "(", ")", ",", "reduction", "=", "'none'", ")", "\n", "if", "self", ".", "mask", "is", "None", ":", "\n", "            ", "loss_expanded", "=", "loss_expanded", ".", "mean", "(", "dim", "=", "1", ")", "\n", "", "else", ":", "\n", "            ", "nnz_attributes", "=", "self", ".", "mask", ".", "sum", "(", "dim", "=", "1", ")", "\n", "loss_expanded", "=", "(", "loss_expanded", "*", "self", ".", "mask", ")", ".", "sum", "(", "dim", "=", "1", ")", "/", "nnz_attributes", "\n", "", "self", ".", "_log_stats", "(", "loss_expanded", ")", "\n", "return", "TrainLoss", ".", "reduce", "(", "loss_expanded", ",", "reduction", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_loss.NLLProxy.__init__": [[506, 508], ["train_loss.LoggingLoss.__init__"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models_32x32.shake_pyramidnet.ShakePyramidNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "log_stats", "=", "False", ",", "name_prefix", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "'NLLoss'", ",", "expected_format", "=", "'log_probabilities'", ",", "log_stats", "=", "log_stats", ",", "name_prefix", "=", "name_prefix", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_loss.NLLProxy.forward": [[509, 514], ["train_loss.NLLProxy._prepare_input", "torch.nll_loss", "torch.nll_loss", "torch.nll_loss", "train_loss.NLLProxy._log_stats", "train_loss.TrainLoss.reduce"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_loss.TrainLoss._prepare_input", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_loss.LoggingLoss._log_stats", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.adversarial_attacks.utils.reduce"], ["", "def", "forward", "(", "self", ",", "data", ",", "model_out", ",", "orig_data", ",", "y", ",", "reduction", "=", "'mean'", ")", ":", "\n", "        ", "prep_out", "=", "self", ".", "_prepare_input", "(", "model_out", ")", "\n", "loss_expanded", "=", "F", ".", "nll_loss", "(", "prep_out", ",", "y", ",", "reduction", "=", "'none'", ")", "\n", "self", ".", "_log_stats", "(", "loss_expanded", ")", "\n", "return", "TrainLoss", ".", "reduce", "(", "loss_expanded", ",", "reduction", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_loss.KLDivergenceProxy.__init__": [[516, 519], ["train_loss.LoggingLoss.__init__"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models_32x32.shake_pyramidnet.ShakePyramidNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "log_stats", "=", "False", ",", "name_prefix", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "'KLDivergence'", ",", "expected_format", "=", "'log_probabilities'", ",", "log_stats", "=", "log_stats", ",", "\n", "name_prefix", "=", "name_prefix", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_loss.KLDivergenceProxy.forward": [[520, 526], ["train_loss.KLDivergenceProxy._prepare_input", "torch.kl_div().sum", "torch.kl_div().sum", "torch.kl_div().sum", "train_loss.KLDivergenceProxy._log_stats", "train_loss.TrainLoss.reduce", "torch.kl_div", "torch.kl_div", "torch.kl_div"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_loss.TrainLoss._prepare_input", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_loss.LoggingLoss._log_stats", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.adversarial_attacks.utils.reduce"], ["", "def", "forward", "(", "self", ",", "data", ",", "model_out", ",", "orig_data", ",", "y", ",", "reduction", "=", "'mean'", ")", ":", "\n", "#unlike other losses, KL dvergence expects y to be in the one-hot format", "\n", "        ", "prep_out", "=", "self", ".", "_prepare_input", "(", "model_out", ")", "\n", "loss_expanded", "=", "F", ".", "kl_div", "(", "prep_out", ",", "y", ",", "reduction", "=", "'none'", ")", ".", "sum", "(", "dim", "=", "1", ")", "\n", "self", ".", "_log_stats", "(", "loss_expanded", ")", "\n", "return", "TrainLoss", ".", "reduce", "(", "loss_expanded", ",", "reduction", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_loss.KLDivergenceEntropyMinimizationProxy.__init__": [[534, 538], ["train_loss.LoggingLoss.__init__"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models_32x32.shake_pyramidnet.ShakePyramidNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "entropy_weight", "=", "1", ",", "log_stats", "=", "False", ",", "name_prefix", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "'KLDivergence'", ",", "expected_format", "=", "'log_probabilities'", ",", "num_losses", "=", "2", ",", "\n", "sub_losses_postfix", "=", "[", "''", ",", "'Entropy'", "]", ",", "log_stats", "=", "log_stats", ",", "name_prefix", "=", "name_prefix", ")", "\n", "self", ".", "entropy_weight", "=", "entropy_weight", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_loss.KLDivergenceEntropyMinimizationProxy.forward": [[539, 548], ["train_loss.KLDivergenceEntropyMinimizationProxy._prepare_input", "torch.kl_div().sum", "torch.kl_div().sum", "torch.kl_div().sum", "train_loss.entropy", "train_loss.KLDivergenceEntropyMinimizationProxy._log_stats", "train_loss.KLDivergenceEntropyMinimizationProxy._log_stats", "train_loss.TrainLoss.reduce", "torch.kl_div", "torch.kl_div", "torch.kl_div"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_loss.TrainLoss._prepare_input", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_loss.entropy", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_loss.LoggingLoss._log_stats", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_loss.LoggingLoss._log_stats", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.adversarial_attacks.utils.reduce"], ["", "def", "forward", "(", "self", ",", "data", ",", "model_out", ",", "orig_data", ",", "y", ",", "reduction", "=", "'mean'", ")", ":", "\n", "#unlike other losses, KL dvergence expects y to be in the one-hot format", "\n", "        ", "prep_out", "=", "self", ".", "_prepare_input", "(", "model_out", ")", "\n", "kl_expanded", "=", "F", ".", "kl_div", "(", "prep_out", ",", "y", ",", "reduction", "=", "'none'", ")", ".", "sum", "(", "dim", "=", "1", ")", "\n", "entropy_expanded", "=", "entropy", "(", "model_out", ")", "\n", "loss_expanded", "=", "kl_expanded", "+", "self", ".", "entropy_weight", "*", "entropy_expanded", "\n", "self", ".", "_log_stats", "(", "kl_expanded", ",", "loss_idx", "=", "0", ")", "\n", "self", ".", "_log_stats", "(", "entropy_expanded", ",", "loss_idx", "=", "1", ")", "\n", "return", "TrainLoss", ".", "reduce", "(", "loss_expanded", ",", "reduction", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_loss.ConfidenceLoss.__init__": [[550, 553], ["train_loss.LoggingLoss.__init__"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models_32x32.shake_pyramidnet.ShakePyramidNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "log_stats", "=", "False", ",", "name_prefix", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "'ConfidenceLoss'", ",", "expected_format", "=", "'probabilities'", ",", "log_stats", "=", "log_stats", ",", "\n", "name_prefix", "=", "name_prefix", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_loss.ConfidenceLoss.forward": [[554, 559], ["train_loss.ConfidenceLoss._prepare_input", "train_loss.ConfidenceLoss._log_stats", "train_loss.TrainLoss.reduce", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_loss.TrainLoss._prepare_input", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_loss.LoggingLoss._log_stats", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.adversarial_attacks.utils.reduce"], ["", "def", "forward", "(", "self", ",", "data", ",", "model_out", ",", "orig_data", ",", "y", ",", "reduction", "=", "'mean'", ")", ":", "\n", "        ", "prep_out", "=", "self", ".", "_prepare_input", "(", "model_out", ")", "\n", "loss_expanded", "=", "prep_out", "[", "torch", ".", "arange", "(", "0", ",", "prep_out", ".", "shape", "[", "0", "]", ")", ",", "y", "]", "\n", "self", ".", "_log_stats", "(", "loss_expanded", ")", "\n", "return", "TrainLoss", ".", "reduce", "(", "loss_expanded", ",", "reduction", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_loss.LogConfidenceLoss.__init__": [[561, 564], ["train_loss.LoggingLoss.__init__"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models_32x32.shake_pyramidnet.ShakePyramidNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "log_stats", "=", "False", ",", "name_prefix", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "'ConfidenceLoss'", ",", "expected_format", "=", "'log_probabilities'", ",", "log_stats", "=", "log_stats", ",", "\n", "name_prefix", "=", "name_prefix", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_loss.LogConfidenceLoss.forward": [[565, 570], ["train_loss.LogConfidenceLoss._prepare_input", "train_loss.LogConfidenceLoss._log_stats", "train_loss.TrainLoss.reduce", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_loss.TrainLoss._prepare_input", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_loss.LoggingLoss._log_stats", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.adversarial_attacks.utils.reduce"], ["", "def", "forward", "(", "self", ",", "data", ",", "model_out", ",", "orig_data", ",", "y", ",", "reduction", "=", "'mean'", ")", ":", "\n", "        ", "prep_out", "=", "self", ".", "_prepare_input", "(", "model_out", ")", "\n", "loss_expanded", "=", "prep_out", "[", "torch", ".", "arange", "(", "0", ",", "prep_out", ".", "shape", "[", "0", "]", ")", ",", "y", "]", "\n", "self", ".", "_log_stats", "(", "loss_expanded", ")", "\n", "return", "TrainLoss", ".", "reduce", "(", "loss_expanded", ",", "reduction", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_loss.MaxConfidenceLoss.__init__": [[572, 575], ["train_loss.LoggingLoss.__init__"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models_32x32.shake_pyramidnet.ShakePyramidNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "log_stats", "=", "False", ",", "name_prefix", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "'ConfidenceLoss'", ",", "expected_format", "=", "'probabilities'", ",", "log_stats", "=", "log_stats", ",", "\n", "name_prefix", "=", "name_prefix", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_loss.MaxConfidenceLoss.forward": [[576, 581], ["train_loss.MaxConfidenceLoss._prepare_input", "train_loss.MaxConfidenceLoss._log_stats", "train_loss.TrainLoss.reduce", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_loss.TrainLoss._prepare_input", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_loss.LoggingLoss._log_stats", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.adversarial_attacks.utils.reduce"], ["", "def", "forward", "(", "self", ",", "data", ",", "model_out", ",", "orig_data", ",", "y", ",", "reduction", "=", "'mean'", ")", ":", "\n", "        ", "prep_out", "=", "self", ".", "_prepare_input", "(", "model_out", ")", "\n", "loss_expanded", "=", "torch", ".", "max", "(", "prep_out", ",", "dim", "=", "1", ")", "[", "0", "]", "\n", "self", ".", "_log_stats", "(", "loss_expanded", ")", "\n", "return", "TrainLoss", ".", "reduce", "(", "loss_expanded", ",", "reduction", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_loss.LossWrapper.__init__": [[583, 586], ["train_loss.TrainLoss.__init__"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models_32x32.shake_pyramidnet.ShakePyramidNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "wrapper_name", ",", "train_loss", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "f'{wrapper_name}_{train_loss.name}'", ",", "expected_format", "=", "'logits'", ")", "\n", "self", ".", "train_loss", "=", "train_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_loss.LossWrapper.get_config": [[587, 589], ["train_loss.LossWrapper.train_loss.get_config"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_loss.LossWrapper.get_config"], ["", "def", "get_config", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "train_loss", ".", "get_config", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_loss.LossWrapper.get_logs": [[590, 592], ["train_loss.LossWrapper.train_loss.get_logs"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_loss.LossWrapper.get_logs"], ["", "def", "get_logs", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "train_loss", ".", "get_logs", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_loss.NegativeWrapper.__init__": [[594, 596], ["train_loss.LossWrapper.__init__"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models_32x32.shake_pyramidnet.ShakePyramidNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "train_loss", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "'NegativeWrapper'", ",", "train_loss", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_loss.NegativeWrapper.forward": [[597, 600], ["train_loss.NegativeWrapper.train_loss"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "data", ",", "model_out", ",", "orig_data", ",", "y", ",", "reduction", "=", "'mean'", ")", ":", "\n", "        ", "out", "=", "-", "self", ".", "train_loss", "(", "data", ",", "model_out", ",", "orig_data", ",", "y", ",", "reduction", "=", "reduction", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_loss.double_array": [[10, 21], ["len", "array.new_empty", "array.new_empty"], "function", ["None"], ["def", "double_array", "(", "array", ")", ":", "\n", "    ", "if", "len", "(", "array", ".", "shape", ")", "==", "1", ":", "\n", "        ", "new_shape", "=", "(", "2", "*", "array", ".", "shape", "[", "0", "]", ",", ")", "\n", "temp", "=", "array", ".", "new_empty", "(", "new_shape", ")", "\n", "temp", "[", ":", "array", ".", "shape", "[", "0", "]", "]", "=", "array", "\n", "", "else", ":", "\n", "        ", "new_shape", "=", "(", "2", "*", "array", ".", "shape", "[", "0", "]", ",", ")", "+", "array", ".", "shape", "[", "1", ":", "]", "\n", "temp", "=", "array", ".", "new_empty", "(", "new_shape", ")", "\n", "temp", "[", ":", "array", ".", "shape", "[", "0", "]", ",", ":", "]", "=", "array", "\n", "\n", "", "return", "temp", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_loss.entropy": [[528, 532], ["torch.softmax", "torch.softmax", "torch.softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.sum", "torch.sum", "torch.sum"], "function", ["None"], ["", "", "def", "entropy", "(", "logits", ")", ":", "\n", "    ", "probabilities", "=", "torch", ".", "softmax", "(", "logits", ",", "dim", "=", "1", ")", "\n", "log_probabilities", "=", "torch", ".", "log_softmax", "(", "logits", ",", "dim", "=", "1", ")", "\n", "return", "-", "torch", ".", "sum", "(", "probabilities", "*", "log_probabilities", ",", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_loss.acet_target_obj_from_name": [[601, 606], ["NotImplementedError", "train_loss.kl"], "function", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_loss.kl"], ["", "", "def", "acet_target_obj_from_name", "(", "obj_name", ")", ":", "\n", "    ", "if", "obj_name", "in", "[", "'kl'", ",", "'KL'", "]", ":", "\n", "        ", "return", "lambda", "x", ",", "y", ":", "kl", "(", "x", ",", "y", ")", ",", "'log_probabilities'", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_loss.acet_uniform_obj_from_name": [[609, 641], ["train_loss.normalized_conf", "train_loss.sqr_conf", "train_loss.minus_log_minus_conf", "train_loss.kl", "train_loss.bhattacharya", "float", "ValueError", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "train_loss.renyi_inf", "train_loss.renyi_divergence", "x.exp", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like"], "function", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_loss.normalized_conf", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_loss.sqr_conf", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_loss.minus_log_minus_conf", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_loss.kl", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_loss.bhattacharya", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_loss.renyi_inf", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_loss.renyi_divergence"], ["", "", "def", "acet_uniform_obj_from_name", "(", "obj_name", ",", "K", ")", ":", "\n", "    ", "if", "obj_name", "==", "'conf'", ":", "\n", "        ", "return", "conf", ",", "'probabilities'", "\n", "", "if", "obj_name", "==", "'logit_diff'", ":", "\n", "        ", "return", "max_diffs", ",", "'logits'", "\n", "", "if", "obj_name", "==", "'conf_diff'", ":", "\n", "        ", "return", "max_diffs", ",", "'probabilities'", "\n", "", "if", "obj_name", "==", "'norm_conf'", ":", "\n", "        ", "return", "lambda", "x", ":", "normalized_conf", "(", "x", ",", "K", ")", ",", "'probabilities'", "\n", "", "elif", "obj_name", "==", "'log_conf'", ":", "\n", "        ", "return", "log_conf", ",", "'log_probabilities'", "\n", "", "elif", "obj_name", "==", "'neg_entropy'", ":", "\n", "        ", "return", "neg_entropy", ",", "'logits'", "\n", "", "elif", "obj_name", "==", "'sqr_conf'", ":", "\n", "        ", "return", "lambda", "x", ":", "sqr_conf", "(", "x", ",", "K", ")", ",", "'probabilities'", "\n", "", "elif", "obj_name", "==", "'minus_log_minus_conf'", ":", "\n", "        ", "return", "lambda", "x", ":", "minus_log_minus_conf", "(", "x", ",", "K", ")", ",", "'probabilities'", "\n", "", "elif", "obj_name", "in", "[", "'kl'", ",", "'KL'", "]", ":", "\n", "        ", "return", "lambda", "x", ":", "kl", "(", "x", ",", "(", "1", "/", "K", ")", "*", "torch", ".", "ones_like", "(", "x", ")", ")", ",", "'log_probabilities'", "\n", "", "elif", "obj_name", "==", "'bhattacharyya'", ":", "\n", "        ", "return", "lambda", "x", ":", "bhattacharya", "(", "x", ",", "(", "1", "/", "K", ")", "*", "torch", ".", "ones_like", "(", "x", ")", ")", ",", "'probabilities'", "\n", "", "elif", "'renyi_'", "in", "obj_name", ":", "\n", "        ", "alpha_str", "=", "obj_name", "[", "6", ":", "]", "\n", "if", "alpha_str", "==", "'inf'", ":", "\n", "            ", "return", "lambda", "x", ":", "renyi_inf", "(", "x", ",", "(", "1", "/", "K", ")", "*", "torch", ".", "ones_like", "(", "x", ")", ")", ",", "'probabilities'", "\n", "", "else", ":", "\n", "            ", "alpha", "=", "float", "(", "alpha_str", ")", "\n", "return", "lambda", "x", ":", "renyi_divergence", "(", "x", ".", "exp", "(", ")", ",", "(", "1", "/", "K", ")", "*", "torch", ".", "ones_like", "(", "x", ")", ",", "alpha", ")", ",", "'probabilities'", "\n", "", "", "elif", "obj_name", "==", "'max_conf_logits'", ":", "\n", "        ", "return", "max_conf_logits", ",", "'logits'", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'Objective {} is not supported'", ".", "format", "(", "obj_name", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_loss.renyi_divergence": [[642, 644], ["torch.log", "torch.log", "torch.log", "torch.sum", "torch.sum", "torch.sum"], "function", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_loss.DistanceLogger.log", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_loss.DistanceLogger.log", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_loss.DistanceLogger.log"], ["", "", "def", "renyi_divergence", "(", "p", ",", "q", ",", "alpha", ",", "p_eps", "=", "0", ",", "q_eps", "=", "0", ")", ":", "\n", "    ", "return", "(", "1", "/", "(", "alpha", "-", "1.", ")", ")", "*", "torch", ".", "log", "(", "torch", ".", "sum", "(", "(", "p", "+", "p_eps", ")", ".", "pow", "(", "alpha", ")", "/", "(", "q", "+", "q_eps", ")", ".", "pow", "(", "alpha", "-", "1.", ")", ",", "dim", "=", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_loss.renyi_inf": [[645, 647], ["torch.log", "torch.log", "torch.log", "torch.max", "torch.max", "torch.max"], "function", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_loss.DistanceLogger.log", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_loss.DistanceLogger.log", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_loss.DistanceLogger.log"], ["", "def", "renyi_inf", "(", "p", ",", "q", ")", ":", "\n", "    ", "return", "torch", ".", "log", "(", "torch", ".", "max", "(", "p", "/", "q", ",", "dim", "=", "1", ")", "[", "0", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_loss.max_conf_logits": [[648, 652], ["logits.max", "torch.sum", "torch.sum", "torch.sum"], "function", ["None"], ["", "def", "max_conf_logits", "(", "logits", ")", ":", "\n", "    ", "max_logits", "=", "logits", ".", "max", "(", "dim", "=", "1", ")", "[", "0", "]", "\n", "other_logits_sum", "=", "torch", ".", "sum", "(", "logits", ",", "dim", "=", "1", ")", "-", "max_logits", "\n", "return", "max_logits", "-", "other_logits_sum", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_loss.max_diffs": [[654, 658], ["logits.max", "logits.min"], "function", ["None"], ["", "def", "max_diffs", "(", "logits", ")", ":", "\n", "    ", "max", ",", "_", "=", "logits", ".", "max", "(", "dim", "=", "1", ")", "\n", "min", ",", "_", "=", "logits", ".", "min", "(", "dim", "=", "1", ")", "\n", "return", "max", "-", "min", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_loss.kl": [[659, 662], ["torch.nn.functional.kl_div().sum", "torch.nn.functional.kl_div().sum", "torch.nn.functional.kl_div().sum", "torch.nn.functional.kl_div", "torch.nn.functional.kl_div", "torch.nn.functional.kl_div"], "function", ["None"], ["", "def", "kl", "(", "model_out", ",", "target", ")", ":", "\n", "    ", "KL", "=", "torch", ".", "nn", ".", "functional", ".", "kl_div", "(", "model_out", ",", "target", ",", "reduction", "=", "'none'", ")", ".", "sum", "(", "dim", "=", "1", ")", "\n", "return", "KL", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_loss.bhattacharya": [[663, 668], ["torch.sum", "torch.sum", "torch.sum", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.log", "torch.log", "torch.log"], "function", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_loss.DistanceLogger.log", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_loss.DistanceLogger.log", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_loss.DistanceLogger.log"], ["", "def", "bhattacharya", "(", "p", ",", "q", ",", "eps", "=", "1e-8", ")", ":", "\n", "#p,q probabilitie distributions over dim 1!", "\n", "    ", "BC", "=", "torch", ".", "sum", "(", "torch", ".", "sqrt", "(", "p", "*", "q", "+", "eps", ")", ",", "dim", "=", "1", ")", "\n", "d", "=", "-", "torch", ".", "log", "(", "BC", ")", "\n", "return", "d", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_loss.sqr_conf": [[669, 671], ["p.max"], "function", ["None"], ["", "def", "sqr_conf", "(", "p", ",", "K", ")", ":", "\n", "    ", "return", "(", "p", ".", "max", "(", "1", ")", "[", "0", "]", "-", "1", "/", "K", ")", "**", "2", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_loss.minus_log_minus_conf": [[672, 676], ["torch.log", "torch.log", "torch.log", "p.max"], "function", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_loss.DistanceLogger.log", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_loss.DistanceLogger.log", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_loss.DistanceLogger.log"], ["", "def", "minus_log_minus_conf", "(", "p", ",", "K", ")", ":", "\n", "# this is the convex equivalent of using confs,", "\n", "# advantages: gets flatter as max_conf approaches 1/k and is 0 at 1/k", "\n", "    ", "return", "-", "torch", ".", "log", "(", "1", "+", "1", "/", "K", "-", "p", ".", "max", "(", "1", ")", "[", "0", "]", ")", "# -ln( 1 - max(softmax out) + 1/k)", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_loss.normalized_conf": [[677, 679], ["p.max"], "function", ["None"], ["", "def", "normalized_conf", "(", "p", ",", "K", ")", ":", "\n", "    ", "return", "(", "p", ".", "max", "(", "1", ")", "[", "0", "]", "-", "1", "/", "K", ")", "/", "(", "1", "-", "1", "/", "K", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_loss.conf": [[680, 682], ["p.max"], "function", ["None"], ["", "def", "conf", "(", "p", ")", ":", "\n", "    ", "return", "p", ".", "max", "(", "1", ")", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_loss.log_conf": [[683, 685], ["p.max"], "function", ["None"], ["", "def", "log_conf", "(", "p", ")", ":", "\n", "    ", "return", "p", ".", "max", "(", "1", ")", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_loss.neg_entropy": [[686, 689], ["torch.sum", "torch.sum", "torch.sum", "torch.softmax", "torch.log_softmax"], "function", ["None"], ["", "def", "neg_entropy", "(", "logits", ")", ":", "\n", "#most stable version of calculating this", "\n", "    ", "return", "torch", ".", "sum", "(", "F", ".", "softmax", "(", "logits", ",", "dim", "=", "1", ")", "*", "F", ".", "log_softmax", "(", "logits", ",", "dim", "=", "1", ")", ",", "dim", "=", "1", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.TRADES_training.TRADESLoss.__init__": [[12, 20], ["train_loss.MinMaxLoss.__init__", "train_loss.KLDivergenceProxy", "helpers.get_adversarial_attack"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models_32x32.shake_pyramidnet.ShakePyramidNet.__init__", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.helpers.get_adversarial_attack"], ["    ", "def", "__init__", "(", "self", ",", "model", ",", "epoch", ",", "attack_config", ",", "num_classes", ",", "log_stats", "=", "False", ",", "name_prefix", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "'TRADES'", ",", "'logits'", ",", "log_stats", "=", "log_stats", ",", "name_prefix", "=", "name_prefix", ")", "\n", "self", ".", "model", "=", "model", "\n", "self", ".", "epoch", "=", "epoch", "\n", "self", ".", "attack_config", "=", "attack_config", "\n", "\n", "self", ".", "div", "=", "KLDivergenceProxy", "(", "log_stats", "=", "False", ")", "\n", "self", ".", "adv_attack", "=", "get_adversarial_attack", "(", "self", ".", "attack_config", ",", "self", ".", "model", ",", "'kl'", ",", "num_classes", ",", "epoch", "=", "self", ".", "epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.TRADES_training.TRADESLoss.inner_max": [[21, 34], ["TRADES_training.TRADESLoss.model.eval", "torch.softmax().detach", "torch.softmax().detach", "torch.softmax().detach", "torch.softmax().detach", "TRADES_training.TRADESLoss.adv_attack", "TRADES_training.TRADESLoss.detach", "TRADES_training.TRADESLoss.model.train", "TRADES_training.TRADESLoss.model.eval", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "TRADES_training.TRADESLoss.model"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models.ebm_wrn.gradient_attack_wrapper.eval", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_type.TrainType.train", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models.ebm_wrn.gradient_attack_wrapper.eval"], ["", "def", "inner_max", "(", "self", ",", "data", ",", "target", ")", ":", "\n", "        ", "is_train", "=", "self", ".", "model", ".", "training", "\n", "#attack is run in test mode so target distribution should also be estimated in test not train", "\n", "self", ".", "model", ".", "eval", "(", ")", "\n", "target_distribution", "=", "F", ".", "softmax", "(", "self", ".", "model", "(", "data", ")", ",", "dim", "=", "1", ")", ".", "detach", "(", ")", "\n", "x_adv", "=", "self", ".", "adv_attack", "(", "data", ",", "target_distribution", ")", "\n", "\n", "if", "is_train", ":", "\n", "            ", "self", ".", "model", ".", "train", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "model", ".", "eval", "(", ")", "\n", "\n", "", "return", "x_adv", ".", "detach", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.TRADES_training.TRADESLoss.forward": [[37, 42], ["TRADES_training.TRADESLoss._prepare_input", "TRADES_training.TRADESLoss.div", "TRADES_training.TRADESLoss._log_stats", "train_loss.TrainLoss.reduce"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_loss.TrainLoss._prepare_input", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_loss.LoggingLoss._log_stats", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.adversarial_attacks.utils.reduce"], ["", "def", "forward", "(", "self", ",", "data", ",", "model_out", ",", "orig_data", ",", "y", ",", "reduction", "=", "'mean'", ")", ":", "\n", "        ", "prep_out", "=", "self", ".", "_prepare_input", "(", "model_out", ")", "\n", "loss_expanded", "=", "self", ".", "div", "(", "data", ",", "prep_out", ",", "orig_data", ",", "y", ",", "reduction", "=", "'none'", ")", "\n", "self", ".", "_log_stats", "(", "loss_expanded", ")", "\n", "return", "TrainLoss", ".", "reduce", "(", "loss_expanded", ",", "reduction", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.TRADES_training.TRADESTraining.__init__": [[45, 57], ["helpers.get_distance", "in_distribution_training.InDistributionTraining.__init__"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.helpers.get_distance", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models_32x32.shake_pyramidnet.ShakePyramidNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "model", ",", "id_attack_config", ",", "optimizer_config", ",", "epochs", ",", "device", ",", "num_classes", ",", "trades_weight", "=", "1.", ",", "\n", "lr_scheduler_config", "=", "None", ",", "model_config", "=", "None", ",", "test_epochs", "=", "1", ",", "verbose", "=", "100", ",", "\n", "saved_model_dir", "=", "'SavedModels'", ",", "saved_log_dir", "=", "'Logs'", ")", ":", "\n", "\n", "        ", "distance", "=", "get_distance", "(", "id_attack_config", "[", "'norm'", "]", ")", "\n", "\n", "super", "(", ")", ".", "__init__", "(", "'TRADES'", ",", "model", ",", "distance", ",", "optimizer_config", ",", "epochs", ",", "device", ",", "num_classes", ",", "\n", "train_clean", "=", "False", ",", "id_trades", "=", "True", ",", "clean_weight", "=", "1.0", ",", "id_adv_weight", "=", "trades_weight", ",", "\n", "lr_scheduler_config", "=", "lr_scheduler_config", ",", "model_config", "=", "model_config", ",", "test_epochs", "=", "test_epochs", ",", "\n", "verbose", "=", "verbose", ",", "saved_model_dir", "=", "saved_model_dir", ",", "saved_log_dir", "=", "saved_log_dir", ")", "\n", "\n", "self", ".", "id_attack_config", "=", "id_attack_config", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.TRADES_training.TRADESTraining._get_id_criterion": [[58, 61], ["TRADES_training.TRADESLoss"], "methods", ["None"], ["", "def", "_get_id_criterion", "(", "self", ",", "epoch", ",", "model", ",", "name_prefix", "=", "'ID'", ")", ":", "\n", "        ", "trades_reg", "=", "TRADESLoss", "(", "model", ",", "epoch", ",", "self", ".", "id_attack_config", ",", "self", ".", "classes", ",", "log_stats", "=", "True", ",", "name_prefix", "=", "name_prefix", ")", "\n", "return", "trades_reg", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.TRADES_training.TRADESTraining._get_TRADES_config": [[62, 67], ["None"], "methods", ["None"], ["", "def", "_get_TRADES_config", "(", "self", ")", ":", "\n", "        ", "config_dict", "=", "{", "}", "\n", "config_dict", "[", "'Clean Weight'", "]", "=", "self", ".", "clean_weight", "\n", "config_dict", "[", "'Trades Weight'", "]", "=", "self", ".", "id_adv_weight", "\n", "return", "config_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.TRADES_training.TRADESTraining._get_train_type_config": [[68, 84], ["TRADES_training.TRADESTraining._get_base_config", "TRADES_training.TRADESTraining._get_TRADES_config"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_type.TrainType._get_base_config", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.TRADES_training.TRADESTraining._get_TRADES_config"], ["", "def", "_get_train_type_config", "(", "self", ",", "loader_config", "=", "None", ")", ":", "\n", "        ", "base_config", "=", "self", ".", "_get_base_config", "(", ")", "\n", "adv_config", "=", "self", ".", "_get_TRADES_config", "(", ")", "\n", "\n", "configs", "=", "{", "}", "\n", "configs", "[", "'Base'", "]", "=", "base_config", "\n", "configs", "[", "'TRADES'", "]", "=", "adv_config", "\n", "configs", "[", "'ID Attack'", "]", "=", "self", ".", "id_attack_config", "\n", "configs", "[", "'Optimizer'", "]", "=", "self", ".", "optimizer_config", "\n", "configs", "[", "'Scheduler'", "]", "=", "self", ".", "lr_scheduler_config", "\n", "\n", "configs", "[", "'Data Loader'", "]", "=", "loader_config", "\n", "configs", "[", "'MSDA'", "]", "=", "self", ".", "msda_config", "\n", "configs", "[", "'Model'", "]", "=", "self", ".", "model_config", "\n", "\n", "return", "configs", "\n", "", "", ""]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.AdversarialACET.AdversarialACET.__init__": [[17, 50], ["helpers.get_distance", "helpers.get_distance", "in_out_distribution_training.InOutDistributionTraining.__init__"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.helpers.get_distance", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.helpers.get_distance", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models_32x32.shake_pyramidnet.ShakePyramidNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "model", ",", "id_attack_config", ",", "od_attack_config", ",", "optimizer_config", ",", "epochs", ",", "device", ",", "num_classes", ",", "\n", "train_clean", "=", "True", ",", "\n", "attack_loss", "=", "'LogitsDiff'", ",", "lr_scheduler_config", "=", "None", ",", "model_config", "=", "None", ",", "\n", "target_confidences", "=", "False", ",", "\n", "attack_obj", "=", "'log_conf'", ",", "train_obj", "=", "'log_conf'", ",", "od_weight", "=", "1.", ",", "test_epochs", "=", "1", ",", "verbose", "=", "100", ",", "\n", "saved_model_dir", "=", "'SavedModels'", ",", "saved_log_dir", "=", "'Logs'", ")", ":", "\n", "\n", "        ", "id_distance", "=", "get_distance", "(", "id_attack_config", "[", "'norm'", "]", ")", "\n", "od_distance", "=", "get_distance", "(", "od_attack_config", "[", "'norm'", "]", ")", "\n", "\n", "if", "train_clean", ":", "\n", "            ", "id_clean_weight", "=", "1.0", "\n", "id_adv_weight", "=", "1.0", "\n", "", "else", ":", "\n", "            ", "id_clean_weight", "=", "0.0", "\n", "id_adv_weight", "=", "1.0", "\n", "\n", "", "super", "(", ")", ".", "__init__", "(", "'AdvACET'", ",", "model", ",", "id_distance", ",", "od_distance", ",", "optimizer_config", ",", "epochs", ",", "device", ",", "num_classes", ",", "\n", "train_clean", "=", "train_clean", ",", "id_weight", "=", "0.5", ",", "id_adv_weight", "=", "id_adv_weight", ",", "clean_weight", "=", "id_clean_weight", ",", "\n", "od_weight", "=", "0.5", "*", "od_weight", ",", "od_clean_weight", "=", "0.0", ",", "od_adv_weight", "=", "1.0", ",", "\n", "lr_scheduler_config", "=", "lr_scheduler_config", ",", "\n", "model_config", "=", "model_config", ",", "test_epochs", "=", "test_epochs", ",", "verbose", "=", "verbose", ",", "\n", "saved_model_dir", "=", "saved_model_dir", ",", "saved_log_dir", "=", "saved_log_dir", ")", "\n", "\n", "# Adversarial specific", "\n", "self", ".", "id_attack_config", "=", "id_attack_config", "\n", "self", ".", "attack_loss", "=", "attack_loss", "\n", "\n", "# ACET specifics", "\n", "self", ".", "target_confidences", "=", "target_confidences", "\n", "self", ".", "od_attack_config", "=", "od_attack_config", "\n", "self", ".", "od_attack_obj", "=", "attack_obj", "\n", "self", ".", "od_train_obj", "=", "train_obj", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.AdversarialACET.AdversarialACET._get_adversarialacet_config": [[52, 67], ["None"], "methods", ["None"], ["", "def", "_get_adversarialacet_config", "(", "self", ")", ":", "\n", "        ", "config_dict", "=", "{", "}", "\n", "config_dict", "[", "'Train Clean'", "]", "=", "self", ".", "train_clean", "\n", "config_dict", "[", "'Adversarial Loss'", "]", "=", "self", ".", "attack_loss", "\n", "config_dict", "[", "'ID Weight'", "]", "=", "self", ".", "id_weight", "\n", "config_dict", "[", "'Clean Weight'", "]", "=", "self", ".", "clean_weight", "\n", "config_dict", "[", "'Adversarial Weight'", "]", "=", "self", ".", "id_adv_weight", "\n", "\n", "config_dict", "[", "'OD Targeted Confidences'", "]", "=", "self", ".", "target_confidences", "\n", "config_dict", "[", "'OD Train Objective'", "]", "=", "self", ".", "od_train_obj", "\n", "config_dict", "[", "'OD Attack_obj'", "]", "=", "self", ".", "od_attack_obj", "\n", "config_dict", "[", "'OD Weight'", "]", "=", "self", ".", "od_weight", "\n", "config_dict", "[", "'OD Adversarial Weight'", "]", "=", "self", ".", "od_adv_weight", "\n", "\n", "return", "config_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.AdversarialACET.AdversarialACET._get_train_type_config": [[68, 84], ["AdversarialACET.AdversarialACET._get_base_config", "AdversarialACET.AdversarialACET._get_adversarialacet_config"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_type.TrainType._get_base_config", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.AdversarialACET.AdversarialACET._get_adversarialacet_config"], ["", "def", "_get_train_type_config", "(", "self", ",", "loader_config", "=", "None", ")", ":", "\n", "        ", "base_config", "=", "self", ".", "_get_base_config", "(", ")", "\n", "\n", "configs", "=", "{", "}", "\n", "configs", "[", "'Base'", "]", "=", "base_config", "\n", "configs", "[", "'ID Attack'", "]", "=", "self", ".", "id_attack_config", "\n", "configs", "[", "'AdversarialACET'", "]", "=", "self", ".", "_get_adversarialacet_config", "(", ")", "\n", "configs", "[", "'OD Attack'", "]", "=", "self", ".", "od_attack_config", "\n", "configs", "[", "'Optimizer'", "]", "=", "self", ".", "optimizer_config", "\n", "configs", "[", "'Scheduler'", "]", "=", "self", ".", "lr_scheduler_config", "\n", "\n", "configs", "[", "'Data Loader'", "]", "=", "loader_config", "\n", "configs", "[", "'MSDA'", "]", "=", "self", ".", "msda_config", "\n", "configs", "[", "'Model'", "]", "=", "self", ".", "model_config", "\n", "\n", "return", "configs", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.AdversarialACET.AdversarialACET._get_id_criterion": [[85, 90], ["Adversarial_training.AdversarialLoss"], "methods", ["None"], ["", "def", "_get_id_criterion", "(", "self", ",", "epoch", ",", "model", ",", "name_prefix", "=", "'ID'", ")", ":", "\n", "        ", "id_train_criterion", "=", "AdversarialLoss", "(", "model", ",", "epoch", ",", "self", ".", "id_attack_config", ",", "self", ".", "classes", ",", "\n", "inner_objective", "=", "self", ".", "attack_loss", ",", "\n", "log_stats", "=", "True", ",", "name_prefix", "=", "name_prefix", ")", "\n", "return", "id_train_criterion", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.AdversarialACET.AdversarialACET._get_od_clean_criterion": [[91, 93], ["None"], "methods", ["None"], ["", "def", "_get_od_clean_criterion", "(", "self", ",", "epoch", ",", "model", ",", "name_prefix", "=", "'OD'", ")", ":", "\n", "        ", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.AdversarialACET.AdversarialACET._get_od_criterion": [[94, 104], ["ACET_training.ACETTargetedObjective", "ACET_training.ACETObjective"], "methods", ["None"], ["", "def", "_get_od_criterion", "(", "self", ",", "epoch", ",", "model", ",", "name_prefix", "=", "'OD'", ")", ":", "\n", "        ", "if", "self", ".", "target_confidences", ":", "\n", "            ", "train_criterion", "=", "ACETTargetedObjective", "(", "model", ",", "epoch", ",", "self", ".", "od_attack_config", ",", "self", ".", "od_train_obj", ",", "\n", "self", ".", "od_attack_obj", ",", "self", ".", "classes", ",", "\n", "log_stats", "=", "True", ",", "name_prefix", "=", "name_prefix", ")", "\n", "", "else", ":", "\n", "            ", "train_criterion", "=", "ACETObjective", "(", "model", ",", "epoch", ",", "self", ".", "od_attack_config", ",", "self", ".", "od_train_obj", ",", "\n", "self", ".", "od_attack_obj", ",", "self", ".", "classes", ",", "\n", "log_stats", "=", "True", ",", "name_prefix", "=", "name_prefix", ")", "\n", "", "return", "train_criterion", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.AdversarialACET.AdversarialACET._get_od_attack": [[105, 108], ["helpers.get_adversarial_attack"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.helpers.get_adversarial_attack"], ["", "def", "_get_od_attack", "(", "self", ",", "epoch", ",", "att_criterion", ")", ":", "\n", "        ", "return", "get_adversarial_attack", "(", "self", ".", "od_attack_config", ",", "self", ".", "model", ",", "att_criterion", ",", "num_classes", "=", "self", ".", "classes", ",", "\n", "epoch", "=", "epoch", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.in_distribution_training.InDistributionTraining.__init__": [[13, 28], ["train_type.TrainType.__init__"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models_32x32.shake_pyramidnet.ShakePyramidNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "name", ",", "model", ",", "id_distance", ",", "optimizer_config", ",", "epochs", ",", "device", ",", "num_classes", ",", "\n", "clean_criterion", "=", "'ce'", ",", "train_clean", "=", "True", ",", "id_trades", "=", "False", ",", "clean_weight", "=", "1.0", ",", "id_adv_weight", "=", "1.0", ",", "\n", "lr_scheduler_config", "=", "None", ",", "msda_config", "=", "None", ",", "model_config", "=", "None", ",", "\n", "test_epochs", "=", "1", ",", "verbose", "=", "100", ",", "saved_model_dir", "=", "'SavedModels'", ",", "saved_log_dir", "=", "'Logs'", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "name", ",", "model", ",", "optimizer_config", ",", "epochs", ",", "device", ",", "num_classes", ",", "\n", "clean_criterion", "=", "clean_criterion", ",", "\n", "lr_scheduler_config", "=", "lr_scheduler_config", ",", "msda_config", "=", "msda_config", ",", "\n", "model_config", "=", "model_config", ",", "test_epochs", "=", "test_epochs", ",", "\n", "verbose", "=", "verbose", ",", "saved_model_dir", "=", "saved_model_dir", ",", "saved_log_dir", "=", "saved_log_dir", ")", "\n", "\n", "self", ".", "train_clean", "=", "train_clean", "\n", "self", ".", "id_trades", "=", "id_trades", "\n", "self", ".", "clean_weight", "=", "clean_weight", "\n", "self", ".", "id_adv_weight", "=", "id_adv_weight", "\n", "self", ".", "id_distance", "=", "id_distance", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.in_distribution_training.InDistributionTraining._get_id_criterion": [[29, 31], ["NotImplementedError"], "methods", ["None"], ["", "def", "_get_id_criterion", "(", "self", ",", "epoch", ",", "model", ",", "name_prefix", "=", "'ID'", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.in_distribution_training.InDistributionTraining._get_id_accuracy_conf_logger": [[32, 34], ["train_loss.AccuracyConfidenceLogger"], "methods", ["None"], ["", "def", "_get_id_accuracy_conf_logger", "(", "self", ",", "name_prefix", ")", ":", "\n", "        ", "return", "AccuracyConfidenceLogger", "(", "name_prefix", "=", "name_prefix", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.in_distribution_training.InDistributionTraining.test": [[35, 69], ["model.eval", "in_distribution_training.InDistributionTraining._inner_test", "enumerate", "in_distribution_training.InDistributionTraining._inner_test"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models.ebm_wrn.gradient_attack_wrapper.eval", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.in_distribution_training.InDistributionTraining._inner_test", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.in_distribution_training.InDistributionTraining._inner_test"], ["", "def", "test", "(", "self", ",", "test_loaders", ",", "epoch", ",", "test_avg_model", "=", "False", ")", ":", "\n", "        ", "if", "test_avg_model", ":", "\n", "            ", "model", "=", "self", ".", "avg_model", "\n", "", "else", ":", "\n", "            ", "model", "=", "self", ".", "model", "\n", "\n", "", "model", ".", "eval", "(", ")", "\n", "\n", "new_best", "=", "False", "\n", "if", "test_avg_model", ":", "\n", "            ", "avg_prefix", "=", "'AVG_'", "\n", "best_acc", "=", "self", ".", "best_avg_model_accuracy", "\n", "", "else", ":", "\n", "            ", "avg_prefix", "=", "''", "\n", "best_acc", "=", "self", ".", "best_accuracy", "\n", "\n", "", "if", "'test_loader'", "in", "test_loaders", ":", "\n", "\n", "            ", "test_loader", "=", "test_loaders", "[", "'test_loader'", "]", "\n", "id_acc", "=", "self", ".", "_inner_test", "(", "model", ",", "test_loader", ",", "epoch", ",", "prefix", "=", "f'{avg_prefix}Clean'", ",", "id_prefix", "=", "f'{avg_prefix}ID'", ")", "\n", "if", "id_acc", ">", "best_acc", ":", "\n", "                ", "new_best", "=", "True", "\n", "if", "test_avg_model", ":", "\n", "                    ", "self", ".", "best_avg_model_accuracy", "=", "id_acc", "\n", "", "else", ":", "\n", "                    ", "self", ".", "best_accuracy", "=", "id_acc", "\n", "\n", "", "", "", "if", "'extra_test_loaders'", "in", "test_loaders", ":", "\n", "            ", "for", "i", ",", "test_loader", "in", "enumerate", "(", "test_loaders", "[", "'extra_test_loaders'", "]", ")", ":", "\n", "                ", "prefix", "=", "f'{avg_prefix}CleanExtra{i}'", "\n", "id_prefix", "=", "f'{avg_prefix}IDExtra{i}'", "\n", "self", ".", "_inner_test", "(", "model", ",", "test_loader", ",", "epoch", ",", "prefix", "=", "prefix", ",", "id_prefix", "=", "id_prefix", ")", "\n", "\n", "", "", "return", "new_best", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.in_distribution_training.InDistributionTraining._inner_test": [[70, 108], ["len", "in_distribution_training.InDistributionTraining._get_clean_criterion", "in_distribution_training.InDistributionTraining._get_id_criterion", "in_distribution_training.InDistributionTraining._get_clean_accuracy_conf_logger", "in_distribution_training.InDistributionTraining._get_id_accuracy_conf_logger", "train_loss.DistanceLogger", "in_distribution_training.InDistributionTraining.output_backend.start_epoch_log", "in_distribution_training.InDistributionTraining.output_backend.end_epoch_write_summary", "in_distribution_training.InDistributionTraining.get_accuracy", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "enumerate", "in_distribution_training.InDistributionTraining.inner_max", "helpers.interleave_forward", "in_distribution_training.InDistributionTraining.", "in_distribution_training.InDistributionTraining.", "in_distribution_training.InDistributionTraining.", "in_distribution_training.InDistributionTraining.", "train_loss.DistanceLogger.", "in_distribution_training.InDistributionTraining.output_backend.log_batch_summary", "data.to", "target.to", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_type.TrainType._get_clean_criterion", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.TRADESCEDA_training.TRADESCEDATraining._get_id_criterion", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_type.TrainType._get_clean_accuracy_conf_logger", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.in_out_distribution_training.InOutDistributionTraining._get_id_accuracy_conf_logger", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.output_backend.OutputBackend.start_epoch_log", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.output_backend.OutputBackend.end_epoch_write_summary", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_loss.BCAccuracyConfidenceLogger.get_accuracy", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.msda.mixup.MixupLoss.inner_max", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.helpers.interleave_forward", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.output_backend.OutputBackend.log_batch_summary"], ["", "def", "_inner_test", "(", "self", ",", "model", ",", "test_loader", ",", "epoch", ",", "prefix", "=", "'Clean'", ",", "id_prefix", "=", "'ID'", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "test_set_batches", "=", "len", "(", "test_loader", ")", "\n", "clean_loss", "=", "self", ".", "_get_clean_criterion", "(", "test", "=", "True", ",", "log_stats", "=", "True", ",", "name_prefix", "=", "prefix", ")", "\n", "\n", "id_train_criterion", "=", "self", ".", "_get_id_criterion", "(", "0", ",", "model", ",", "\n", "name_prefix", "=", "id_prefix", ")", "#set 0 as epoch so it uses same attack steps every time", "\n", "losses", "=", "[", "clean_loss", ",", "id_train_criterion", "]", "\n", "\n", "acc_conf_clean", "=", "self", ".", "_get_clean_accuracy_conf_logger", "(", "name_prefix", "=", "prefix", ")", "\n", "acc_conf_adv", "=", "self", ".", "_get_id_accuracy_conf_logger", "(", "name_prefix", "=", "id_prefix", ")", "\n", "distance_adv", "=", "DistanceLogger", "(", "self", ".", "id_distance", ",", "name_prefix", "=", "id_prefix", ")", "\n", "loggers", "=", "[", "acc_conf_clean", ",", "acc_conf_adv", ",", "distance_adv", "]", "\n", "\n", "self", ".", "output_backend", ".", "start_epoch_log", "(", "test_set_batches", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "batch_idx", ",", "(", "data", ",", "target", ")", "in", "enumerate", "(", "test_loader", ")", ":", "\n", "                ", "data", ",", "target", "=", "data", ".", "to", "(", "self", ".", "device", ")", ",", "target", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "adv_samples", "=", "id_train_criterion", ".", "inner_max", "(", "data", ",", "target", ")", "\n", "clean_out", ",", "adv_out", "=", "interleave_forward", "(", "model", ",", "[", "data", ",", "adv_samples", "]", ")", "\n", "\n", "if", "self", ".", "id_trades", ":", "\n", "                    ", "id_target", "=", "F", ".", "softmax", "(", "clean_out", ",", "dim", "=", "1", ")", "\n", "", "else", ":", "\n", "                    ", "id_target", "=", "target", "\n", "\n", "", "loss0", "=", "clean_loss", "(", "data", ",", "clean_out", ",", "data", ",", "target", ")", "\n", "loss1", "=", "id_train_criterion", "(", "adv_samples", ",", "adv_out", ",", "data", ",", "id_target", ")", "\n", "\n", "acc_conf_clean", "(", "data", ",", "clean_out", ",", "data", ",", "target", ")", "\n", "acc_conf_adv", "(", "adv_samples", ",", "adv_out", ",", "data", ",", "target", ")", "\n", "distance_adv", "(", "adv_samples", ",", "adv_out", ",", "data", ",", "target", ")", "\n", "self", ".", "output_backend", ".", "log_batch_summary", "(", "epoch", ",", "batch_idx", ",", "False", ",", "losses", "=", "losses", ",", "loggers", "=", "loggers", ")", "\n", "\n", "", "", "self", ".", "output_backend", ".", "end_epoch_write_summary", "(", "losses", ",", "loggers", ",", "epoch", ",", "False", ")", "\n", "id_acc", "=", "acc_conf_adv", ".", "get_accuracy", "(", ")", "\n", "return", "id_acc", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.in_distribution_training.InDistributionTraining.__get_loss_closure": [[109, 151], ["helpers.interleave_forward", "clean_loss", "id_train_criterion", "in_distribution_training.InDistributionTraining.model", "id_train_criterion", "total_loss_logger.log", "lr_logger.log", "acc_conf_adv", "distance_adv", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "acc_conf_clean", "in_distribution_training.InDistributionTraining.scheduler.get_last_lr"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.helpers.interleave_forward", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_loss.DistanceLogger.log", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_loss.DistanceLogger.log", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.schedulers.scheduler.Scheduler.get_last_lr"], ["", "def", "__get_loss_closure", "(", "self", ",", "clean_data", ",", "clean_target", ",", "id_adv_samples", ",", "id_data", ",", "id_target", ",", "\n", "clean_loss", ",", "id_train_criterion", ",", "\n", "total_loss_logger", "=", "None", ",", "\n", "lr_logger", "=", "None", ",", "\n", "acc_conf_clean", "=", "None", ",", "\n", "acc_conf_adv", "=", "None", ",", "\n", "distance_adv", "=", "None", "\n", ")", ":", "\n", "\n", "        ", "def", "loss_closure", "(", "log", "=", "False", ")", ":", "\n", "            ", "if", "self", ".", "train_clean", "or", "self", ".", "id_trades", ":", "\n", "                ", "clean_out", ",", "adv_out", "=", "interleave_forward", "(", "self", ".", "model", ",", "[", "clean_data", ",", "id_adv_samples", "]", ")", "\n", "\n", "if", "self", ".", "id_trades", ":", "\n", "                    ", "id_hard_label", "=", "clean_target", "\n", "id_tar", "=", "F", ".", "softmax", "(", "clean_out", ",", "dim", "=", "1", ")", "\n", "", "else", ":", "\n", "                    ", "id_hard_label", "=", "id_target", "\n", "id_tar", "=", "id_target", "\n", "\n", "", "loss0", "=", "clean_loss", "(", "clean_data", ",", "clean_out", ",", "clean_data", ",", "clean_target", ")", "\n", "loss1", "=", "id_train_criterion", "(", "id_adv_samples", ",", "adv_out", ",", "id_data", ",", "id_tar", ")", "\n", "loss", "=", "self", ".", "clean_weight", "*", "loss0", "+", "self", ".", "id_adv_weight", "*", "loss1", "\n", "", "else", ":", "\n", "                ", "id_hard_label", "=", "id_target", "\n", "adv_out", "=", "self", ".", "model", "(", "id_adv_samples", ")", "\n", "clean_out", "=", "None", "\n", "loss", "=", "id_train_criterion", "(", "id_adv_samples", ",", "adv_out", ",", "id_data", ",", "id_target", ")", "\n", "\n", "", "if", "log", ":", "\n", "                ", "total_loss_logger", ".", "log", "(", "loss", ")", "\n", "lr_logger", ".", "log", "(", "self", ".", "scheduler", ".", "get_last_lr", "(", ")", "[", "0", "]", ")", "\n", "\n", "# log", "\n", "if", "self", ".", "train_clean", "or", "self", ".", "id_trades", ":", "\n", "                    ", "acc_conf_clean", "(", "clean_data", ",", "clean_out", ",", "clean_data", ",", "clean_target", ")", "\n", "\n", "", "acc_conf_adv", "(", "id_adv_samples", ",", "adv_out", ",", "id_data", ",", "id_hard_label", ")", "\n", "distance_adv", "(", "id_adv_samples", ",", "adv_out", ",", "id_data", ",", "id_hard_label", ")", "\n", "", "return", "loss", "\n", "\n", "", "return", "loss_closure", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.in_distribution_training.InDistributionTraining._inner_train": [[152, 219], ["in_distribution_training.InDistributionTraining.model.train", "in_distribution_training.InDistributionTraining._get_dataloader_length", "in_distribution_training.InDistributionTraining._get_loader_batchsize", "in_distribution_training.InDistributionTraining._get_clean_criterion", "in_distribution_training.InDistributionTraining._get_id_criterion", "in_distribution_training.InDistributionTraining._get_clean_accuracy_conf_logger", "in_distribution_training.InDistributionTraining._get_id_accuracy_conf_logger", "train_loss.DistanceLogger", "train_loss.SingleValueLogger", "train_loss.SingleValueLogger", "iter", "in_distribution_training.InDistributionTraining.output_backend.start_epoch_log", "enumerate", "in_distribution_training.InDistributionTraining._update_scheduler", "in_distribution_training.InDistributionTraining.output_backend.end_epoch_write_summary", "in_distribution_training.InDistributionTraining.inner_max", "in_distribution_training.InDistributionTraining._update_scheduler", "in_distribution_training.InDistributionTraining.output_backend.log_batch_summary", "id_data.to", "id_target.to", "torch.autocast", "torch.autocast", "torch.autocast", "torch.autocast", "in_distribution_training.InDistributionTraining.__get_loss_closure", "in_distribution_training.InDistributionTraining._loss_step", "in_distribution_training.InDistributionTraining._update_avg_model", "next", "id_data.detach().clone", "id_target.detach().clone", "id_data.detach().clone.to", "id_target.detach().clone.to", "id_data.detach", "id_target.detach"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_type.TrainType.train", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_type.TrainType._get_dataloader_length", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_type.TrainType._get_loader_batchsize", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_type.TrainType._get_clean_criterion", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.TRADESCEDA_training.TRADESCEDATraining._get_id_criterion", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_type.TrainType._get_clean_accuracy_conf_logger", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.in_out_distribution_training.InOutDistributionTraining._get_id_accuracy_conf_logger", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.output_backend.OutputBackend.start_epoch_log", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_type.TrainType._update_scheduler", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.output_backend.OutputBackend.end_epoch_write_summary", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.msda.mixup.MixupLoss.inner_max", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_type.TrainType._update_scheduler", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.output_backend.OutputBackend.log_batch_summary", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.in_out_distribution_training.InOutDistributionTraining.__get_loss_closure", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_type.TrainType._loss_step", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_type.TrainType._update_avg_model"], ["", "def", "_inner_train", "(", "self", ",", "train_loaders", ",", "epoch", ",", "log_epoch", "=", "None", ")", ":", "\n", "        ", "if", "log_epoch", "is", "None", ":", "\n", "            ", "log_epoch", "=", "epoch", "\n", "\n", "", "self", ".", "model", ".", "train", "(", ")", "\n", "train_loader", "=", "train_loaders", "[", "'train_loader'", "]", "\n", "\n", "train_set_batches", "=", "self", ".", "_get_dataloader_length", "(", "train_loader", ")", "\n", "bs", "=", "self", ".", "_get_loader_batchsize", "(", "train_loader", ")", "\n", "\n", "clean_loss", "=", "self", ".", "_get_clean_criterion", "(", "log_stats", "=", "True", ",", "name_prefix", "=", "'Clean'", ")", "\n", "id_train_criterion", "=", "self", ".", "_get_id_criterion", "(", "epoch", ",", "self", ".", "model", ")", "\n", "losses", "=", "[", "clean_loss", ",", "id_train_criterion", "]", "\n", "\n", "acc_conf_clean", "=", "self", ".", "_get_clean_accuracy_conf_logger", "(", "name_prefix", "=", "'Clean'", ")", "\n", "acc_conf_adv", "=", "self", ".", "_get_id_accuracy_conf_logger", "(", "name_prefix", "=", "'ID'", ")", "\n", "distance_adv", "=", "DistanceLogger", "(", "self", ".", "id_distance", ",", "name_prefix", "=", "'ID'", ")", "\n", "total_loss_logger", "=", "SingleValueLogger", "(", "'Loss'", ")", "\n", "lr_logger", "=", "SingleValueLogger", "(", "'LR'", ")", "\n", "loggers", "=", "[", "total_loss_logger", ",", "acc_conf_clean", ",", "acc_conf_adv", ",", "distance_adv", ",", "lr_logger", "]", "\n", "\n", "id_iterator", "=", "iter", "(", "train_loader", ")", "\n", "\n", "self", ".", "output_backend", ".", "start_epoch_log", "(", "train_set_batches", ")", "\n", "\n", "for", "batch_idx", ",", "(", "id_data", ",", "id_target", ")", "in", "enumerate", "(", "id_iterator", ")", ":", "\n", "\n", "            ", "id_data", ",", "id_target", "=", "id_data", ".", "to", "(", "self", ".", "device", ")", ",", "id_target", ".", "to", "(", "self", ".", "device", ")", "\n", "# sample clean ref_data", "\n", "if", "self", ".", "train_clean", ":", "\n", "                ", "try", ":", "\n", "                    ", "clean_data", ",", "clean_target", "=", "next", "(", "id_iterator", ")", "\n", "clean_data", ",", "clean_target", "=", "clean_data", ".", "to", "(", "self", ".", "device", ")", ",", "clean_target", ".", "to", "(", "self", ".", "device", ")", "\n", "", "except", "StopIteration", ":", "\n", "                    ", "break", "\n", "", "", "elif", "self", ".", "id_trades", ":", "\n", "                ", "clean_data", "=", "id_data", ".", "detach", "(", ")", ".", "clone", "(", ")", "\n", "clean_target", "=", "id_target", ".", "detach", "(", ")", ".", "clone", "(", ")", "\n", "", "else", ":", "\n", "                ", "clean_data", "=", "None", "\n", "clean_target", "=", "None", "\n", "\n", "", "if", "id_data", ".", "shape", "[", "0", "]", "<", "bs", "or", "(", "self", ".", "train_clean", "and", "clean_data", ".", "shape", "[", "0", "]", "<", "bs", ")", ":", "\n", "                ", "continue", "\n", "\n", "", "id_adv_samples", "=", "id_train_criterion", ".", "inner_max", "(", "id_data", ",", "id_target", ")", "\n", "with", "amp", ".", "autocast", "(", "enabled", "=", "self", ".", "mixed_precision", ")", ":", "\n", "                ", "loss_closure", "=", "self", ".", "__get_loss_closure", "(", "clean_data", ",", "clean_target", ",", "id_adv_samples", ",", "id_data", ",", "id_target", ",", "\n", "clean_loss", ",", "id_train_criterion", ",", "\n", "total_loss_logger", "=", "total_loss_logger", ",", "\n", "lr_logger", "=", "lr_logger", ",", "\n", "acc_conf_clean", "=", "acc_conf_clean", ",", "\n", "acc_conf_adv", "=", "acc_conf_adv", ",", "\n", "distance_adv", "=", "distance_adv", "\n", ")", "\n", "\n", "self", ".", "_loss_step", "(", "loss_closure", ")", "\n", "\n", "#ema", "\n", "", "if", "self", ".", "ema", ":", "\n", "                 ", "self", ".", "_update_avg_model", "(", ")", "\n", "\n", "", "self", ".", "_update_scheduler", "(", "epoch", "+", "(", "batch_idx", "+", "1", ")", "/", "train_set_batches", ")", "\n", "self", ".", "output_backend", ".", "log_batch_summary", "(", "log_epoch", ",", "batch_idx", ",", "True", ",", "losses", "=", "losses", ",", "loggers", "=", "loggers", ")", "\n", "\n", "", "self", ".", "_update_scheduler", "(", "epoch", "+", "1", ")", "\n", "self", ".", "output_backend", ".", "end_epoch_write_summary", "(", "losses", ",", "loggers", ",", "log_epoch", ",", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.in_distribution_training.InDistributionTraining._update_avg_model_batch_norm": [[220, 260], ["in_distribution_training.InDistributionTraining.avg_model.train", "in_distribution_training.InDistributionTraining._get_dataloader_length", "in_distribution_training.InDistributionTraining._get_loader_batchsize", "in_distribution_training.InDistributionTraining._get_clean_criterion", "in_distribution_training.InDistributionTraining._get_id_criterion", "iter", "in_distribution_training.InDistributionTraining.output_backend.start_epoch_log", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "enumerate", "in_distribution_training.InDistributionTraining.inner_max", "id_data.to", "id_target.to", "torch.autocast", "torch.autocast", "torch.autocast", "torch.autocast", "in_distribution_training.InDistributionTraining.__get_loss_closure", "in_distribution_training.InDistributionTraining.", "next", "id_data.detach().clone", "id_target.detach().clone", "id_data.detach().clone.to", "id_target.detach().clone.to", "id_data.detach", "id_target.detach"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_type.TrainType.train", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_type.TrainType._get_dataloader_length", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_type.TrainType._get_loader_batchsize", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_type.TrainType._get_clean_criterion", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.TRADESCEDA_training.TRADESCEDATraining._get_id_criterion", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.output_backend.OutputBackend.start_epoch_log", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.msda.mixup.MixupLoss.inner_max", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.in_out_distribution_training.InOutDistributionTraining.__get_loss_closure"], ["", "def", "_update_avg_model_batch_norm", "(", "self", ",", "train_loaders", ")", ":", "\n", "        ", "self", ".", "avg_model", ".", "train", "(", ")", "\n", "train_loader", "=", "train_loaders", "[", "'train_loader'", "]", "\n", "\n", "train_set_batches", "=", "self", ".", "_get_dataloader_length", "(", "train_loader", ")", "\n", "bs", "=", "self", ".", "_get_loader_batchsize", "(", "train_loader", ")", "\n", "\n", "clean_loss", "=", "self", ".", "_get_clean_criterion", "(", "log_stats", "=", "True", ",", "name_prefix", "=", "'Clean'", ")", "\n", "id_train_criterion", "=", "self", ".", "_get_id_criterion", "(", "0", ",", "self", ".", "avg_model", ")", "\n", "id_iterator", "=", "iter", "(", "train_loader", ")", "\n", "\n", "self", ".", "output_backend", ".", "start_epoch_log", "(", "train_set_batches", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "batch_idx", ",", "(", "id_data", ",", "id_target", ")", "in", "enumerate", "(", "id_iterator", ")", ":", "\n", "# sample clean ref_data", "\n", "\n", "                ", "id_data", ",", "id_target", "=", "id_data", ".", "to", "(", "self", ".", "device", ")", ",", "id_target", ".", "to", "(", "self", ".", "device", ")", "\n", "if", "self", ".", "train_clean", ":", "\n", "                    ", "try", ":", "\n", "                        ", "clean_data", ",", "clean_target", "=", "next", "(", "id_iterator", ")", "\n", "clean_data", ",", "clean_target", "=", "clean_data", ".", "to", "(", "self", ".", "device", ")", ",", "clean_target", ".", "to", "(", "self", ".", "device", ")", "\n", "", "except", "StopIteration", ":", "\n", "                        ", "break", "\n", "", "", "elif", "self", ".", "id_trades", ":", "\n", "                    ", "clean_data", "=", "id_data", ".", "detach", "(", ")", ".", "clone", "(", ")", "\n", "clean_target", "=", "id_target", ".", "detach", "(", ")", ".", "clone", "(", ")", "\n", "", "else", ":", "\n", "                    ", "clean_data", "=", "None", "\n", "clean_target", "=", "None", "\n", "\n", "", "if", "id_data", ".", "shape", "[", "0", "]", "<", "bs", "or", "(", "self", ".", "train_clean", "and", "clean_data", ".", "shape", "[", "0", "]", "<", "bs", ")", ":", "\n", "                        ", "continue", "\n", "\n", "", "id_adv_samples", "=", "id_train_criterion", ".", "inner_max", "(", "id_data", ",", "id_target", ")", "\n", "with", "amp", ".", "autocast", "(", "enabled", "=", "self", ".", "mixed_precision", ")", ":", "\n", "                    ", "loss_closure", "=", "self", ".", "__get_loss_closure", "(", "clean_data", ",", "clean_target", ",", "id_adv_samples", ",", "id_data", ",", "id_target", ",", "\n", "clean_loss", ",", "id_train_criterion", ")", "\n", "\n", "loss_closure", "(", "log", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.BCEAdversarial_training.BCEAdversarialLoss.__init__": [[9, 20], ["train_loss.MinMaxLoss.__init__"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models_32x32.shake_pyramidnet.ShakePyramidNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "model", ",", "epoch", ",", "attack_config", ",", "mask_features", ",", "min_features_mask", ",", "max_features_mask", ",", "num_classes", ",", "\n", "log_stats", "=", "False", ",", "name_prefix", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "'AdversarialLoss'", ",", "'logits'", ",", "log_stats", "=", "log_stats", ",", "name_prefix", "=", "name_prefix", ")", "\n", "self", ".", "attack_config", "=", "attack_config", "\n", "self", ".", "model", "=", "model", "\n", "self", ".", "epoch", "=", "epoch", "\n", "self", ".", "mask_features", "=", "mask_features", "\n", "self", ".", "min_features_mask", "=", "min_features_mask", "\n", "self", ".", "max_features_mask", "=", "max_features_mask", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "obj", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.BCEAdversarial_training.BCEAdversarialLoss._generate_mask": [[21, 32], ["torch.zeros_like", "range", "torch.randint().item", "torch.randperm", "torch.randint"], "methods", ["None"], ["", "def", "_generate_mask", "(", "self", ",", "target", ")", ":", "\n", "        ", "if", "self", ".", "mask_features", ":", "\n", "            ", "mask", "=", "torch", ".", "zeros_like", "(", "target", ",", "dtype", "=", "torch", ".", "float", ")", "\n", "for", "idx", "in", "range", "(", "mask", ".", "shape", "[", "0", "]", ")", ":", "\n", "                ", "num_non_masked", "=", "torch", ".", "randint", "(", "self", ".", "min_features_mask", ",", "self", ".", "max_features_mask", "+", "1", ",", "(", "1", ",", ")", ")", ".", "item", "(", ")", "\n", "non_masked_idcs", "=", "torch", ".", "randperm", "(", "mask", ".", "shape", "[", "1", "]", ",", "device", "=", "mask", ".", "device", ")", "[", ":", "num_non_masked", "]", "\n", "mask", "[", "idx", ",", "non_masked_idcs", "]", "=", "1", "\n", "\n", "", "self", ".", "mask", "=", "mask", "\n", "", "else", ":", "\n", "            ", "self", ".", "mask", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.BCEAdversarial_training.BCEAdversarialLoss.inner_max": [[33, 42], ["BCEAdversarial_training.BCEAdversarialLoss._generate_mask", "train_loss.BCELogitsProxy", "train_loss.NegativeWrapper", "helpers.get_adversarial_attack", "BCEAdversarial_training.BCEAdversarialLoss.attack"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.BCEACET_training.BCEACETObjective._generate_mask", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.helpers.get_adversarial_attack"], ["", "", "def", "inner_max", "(", "self", ",", "data", ",", "target", ")", ":", "\n", "        ", "self", ".", "_generate_mask", "(", "target", ")", "\n", "self", ".", "obj", "=", "BCELogitsProxy", "(", "mask", "=", "self", ".", "mask", ",", "log_stats", "=", "False", ")", "\n", "neg_obj", "=", "NegativeWrapper", "(", "self", ".", "obj", ")", "\n", "self", ".", "attack", "=", "get_adversarial_attack", "(", "self", ".", "attack_config", ",", "self", ".", "model", ",", "neg_obj", ",", "\n", "num_classes", "=", "self", ".", "num_classes", ",", "epoch", "=", "self", ".", "epoch", ")", "\n", "adv_samples", "=", "self", ".", "attack", "(", "data", ",", "target", ",", "targeted", "=", "False", ")", "\n", "\n", "return", "adv_samples", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.BCEAdversarial_training.BCEAdversarialLoss.forward": [[43, 50], ["BCEAdversarial_training.BCEAdversarialLoss._prepare_input", "BCEAdversarial_training.BCEAdversarialLoss.obj", "BCEAdversarial_training.BCEAdversarialLoss._log_stats", "train_loss.TrainLoss.reduce"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_loss.TrainLoss._prepare_input", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_loss.LoggingLoss._log_stats", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.adversarial_attacks.utils.reduce"], ["", "def", "forward", "(", "self", ",", "data", ",", "model_out", ",", "orig_data", ",", "y", ",", "reduction", "=", "'mean'", ")", ":", "\n", "        ", "prep_out", "=", "self", ".", "_prepare_input", "(", "model_out", ")", "\n", "assert", "self", ".", "obj", "is", "not", "None", ",", "'Inner Max has to be called first'", "\n", "loss_expanded", "=", "self", ".", "obj", "(", "data", ",", "prep_out", ",", "orig_data", ",", "y", ",", "reduction", "=", "'none'", ")", "\n", "self", ".", "obj", "=", "None", "\n", "self", ".", "_log_stats", "(", "loss_expanded", ")", "\n", "return", "TrainLoss", ".", "reduce", "(", "loss_expanded", ",", "reduction", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.BCEAdversarial_training.BCEAdversarialTraining.__init__": [[53, 66], ["helpers.get_distance", "in_distribution_training.InDistributionTraining.__init__"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.helpers.get_distance", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models_32x32.shake_pyramidnet.ShakePyramidNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "model", ",", "id_attack_config", ",", "optimizer_config", ",", "epochs", ",", "device", ",", "num_classes", ",", "train_clean", "=", "True", ",", "\n", "lr_scheduler_config", "=", "None", ",", "model_config", "=", "None", ",", "\n", "test_epochs", "=", "1", ",", "verbose", "=", "100", ",", "saved_model_dir", "=", "'SavedModels'", ",", "\n", "saved_log_dir", "=", "'Logs'", ")", ":", "\n", "        ", "distance", "=", "get_distance", "(", "id_attack_config", "[", "'norm'", "]", ")", "\n", "\n", "super", "(", ")", ".", "__init__", "(", "'BCEAdversarial Training'", ",", "model", ",", "distance", ",", "optimizer_config", ",", "\n", "epochs", ",", "device", ",", "num_classes", ",", "\n", "clean_criterion", "=", "'bce'", ",", "train_clean", "=", "train_clean", ",", "\n", "lr_scheduler_config", "=", "lr_scheduler_config", ",", "model_config", "=", "model_config", ",", "\n", "test_epochs", "=", "test_epochs", ",", "verbose", "=", "verbose", ",", "saved_model_dir", "=", "saved_model_dir", ",", "\n", "saved_log_dir", "=", "saved_log_dir", ")", "\n", "self", ".", "id_attack_config", "=", "id_attack_config", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.BCEAdversarial_training.BCEAdversarialTraining._get_id_criterion": [[67, 71], ["BCEAdversarial_training.BCEAdversarialLoss"], "methods", ["None"], ["", "def", "_get_id_criterion", "(", "self", ",", "epoch", ",", "model", ",", "name_prefix", "=", "'ID'", ")", ":", "\n", "        ", "id_train_criterion", "=", "BCEAdversarialLoss", "(", "model", ",", "epoch", ",", "self", ".", "id_attack_config", ",", "True", ",", "1", ",", "1", ",", "self", ".", "classes", ",", "\n", "log_stats", "=", "True", ",", "name_prefix", "=", "name_prefix", ")", "\n", "return", "id_train_criterion", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.BCEAdversarial_training.BCEAdversarialTraining._get_id_accuracy_conf_logger": [[72, 74], ["train_loss.BCAccuracyConfidenceLogger"], "methods", ["None"], ["", "def", "_get_id_accuracy_conf_logger", "(", "self", ",", "name_prefix", ")", ":", "\n", "        ", "return", "BCAccuracyConfidenceLogger", "(", "self", ".", "classes", ",", "name_prefix", "=", "name_prefix", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.BCEAdversarial_training.BCEAdversarialTraining._get_train_type_config": [[75, 91], ["BCEAdversarial_training.BCEAdversarialTraining._get_base_config", "BCEAdversarial_training.BCEAdversarialTraining._get_adversarial_training_config"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_type.TrainType._get_base_config", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.Adversarial_training.AdversarialTraining._get_adversarial_training_config"], ["", "def", "_get_train_type_config", "(", "self", ",", "loader_config", "=", "None", ")", ":", "\n", "        ", "base_config", "=", "self", ".", "_get_base_config", "(", ")", "\n", "adv_config", "=", "self", ".", "_get_adversarial_training_config", "(", ")", "\n", "\n", "configs", "=", "{", "}", "\n", "configs", "[", "'Base'", "]", "=", "base_config", "\n", "configs", "[", "'Adversarial Training'", "]", "=", "adv_config", "\n", "configs", "[", "'ID Attack'", "]", "=", "self", ".", "id_attack_config", "\n", "configs", "[", "'Optimizer'", "]", "=", "self", ".", "optimizer_config", "\n", "configs", "[", "'Scheduler'", "]", "=", "self", ".", "lr_scheduler_config", "\n", "\n", "configs", "[", "'Data Loader'", "]", "=", "loader_config", "\n", "configs", "[", "'MSDA'", "]", "=", "self", ".", "msda_config", "\n", "configs", "[", "'Model'", "]", "=", "self", ".", "model_config", "\n", "\n", "return", "configs", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.BCEAdversarial_training.BCEAdversarialTraining._get_adversarial_training_config": [[92, 96], ["None"], "methods", ["None"], ["", "def", "_get_adversarial_training_config", "(", "self", ")", ":", "\n", "        ", "config_dict", "=", "{", "}", "\n", "config_dict", "[", "'train_clean'", "]", "=", "self", ".", "train_clean", "\n", "return", "config_dict", "\n", "", "", ""]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.BCEACET_training.BCEACETObjective.__init__": [[13, 23], ["train_loss.MinMaxLoss.__init__"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models_32x32.shake_pyramidnet.ShakePyramidNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "model", ",", "epoch", ",", "attack_config", ",", "mask_features", ",", "min_features_mask", ",", "max_features_mask", ",", "num_features", ",", "\n", "log_stats", "=", "False", ",", "number_of_batches", "=", "None", ",", "name_prefix", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "'BCEACET'", ",", "expected_format", "=", "'logits'", ",", "log_stats", "=", "log_stats", ",", "name_prefix", "=", "name_prefix", ")", "\n", "self", ".", "attack_config", "=", "attack_config", "\n", "self", ".", "model", "=", "model", "\n", "self", ".", "epoch", "=", "epoch", "\n", "self", ".", "num_features", "=", "num_features", "\n", "self", ".", "mask_features", "=", "mask_features", "\n", "self", ".", "min_features_mask", "=", "min_features_mask", "\n", "self", ".", "max_features_mask", "=", "max_features_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.BCEACET_training.BCEACETObjective._generate_mask": [[25, 36], ["torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "range", "torch.randint().item", "torch.randint().item", "torch.randint().item", "torch.randint().item", "torch.randint().item", "torch.randint().item", "torch.randint().item", "torch.randint().item", "torch.randint().item", "torch.randint().item", "torch.randint().item", "torch.randint().item", "torch.randint().item", "torch.randint().item", "torch.randint().item", "torch.randint().item", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint"], "methods", ["None"], ["", "def", "_generate_mask", "(", "self", ",", "target", ")", ":", "\n", "        ", "if", "self", ".", "mask_features", ":", "\n", "            ", "mask", "=", "torch", ".", "zeros_like", "(", "target", ",", "dtype", "=", "torch", ".", "float", ")", "\n", "for", "idx", "in", "range", "(", "mask", ".", "shape", "[", "0", "]", ")", ":", "\n", "                ", "num_non_masked", "=", "torch", ".", "randint", "(", "self", ".", "min_features_mask", ",", "self", ".", "max_features_mask", "+", "1", ",", "(", "1", ",", ")", ")", ".", "item", "(", ")", "\n", "non_masked_idcs", "=", "torch", ".", "randperm", "(", "mask", ".", "shape", "[", "1", "]", ",", "device", "=", "mask", ".", "device", ")", "[", ":", "num_non_masked", "]", "\n", "mask", "[", "idx", ",", "non_masked_idcs", "]", "=", "1", "\n", "\n", "", "self", ".", "mask", "=", "mask", "\n", "", "else", ":", "\n", "            ", "self", ".", "mask", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.BCEACET_training.BCEACETObjective.inner_max": [[37, 46], ["BCEACET_training.BCEACETObjective._generate_mask", "train_loss.BCELogitsProxy", "train_loss.NegativeWrapper", "helpers.get_adversarial_attack", "BCEACET_training.BCEACETObjective.attack", "data.new_ones"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.BCEACET_training.BCEACETObjective._generate_mask", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.helpers.get_adversarial_attack"], ["", "", "def", "inner_max", "(", "self", ",", "data", ",", "target", ")", ":", "\n", "        ", "uniform_target", "=", "0.5", "*", "data", ".", "new_ones", "(", "(", "data", ".", "shape", "[", "0", "]", ",", "self", ".", "num_features", ")", ",", "dtype", "=", "torch", ".", "float", ")", "\n", "self", ".", "_generate_mask", "(", "uniform_target", ")", "\n", "self", ".", "obj", "=", "BCELogitsProxy", "(", "mask", "=", "self", ".", "mask", ",", "log_stats", "=", "False", ")", "\n", "neg_obj", "=", "NegativeWrapper", "(", "self", ".", "obj", ")", "\n", "self", ".", "attack", "=", "get_adversarial_attack", "(", "self", ".", "attack_config", ",", "self", ".", "model", ",", "neg_obj", ",", "\n", "num_classes", "=", "self", ".", "num_classes", ",", "epoch", "=", "self", ".", "epoch", ")", "\n", "adv_samples", "=", "self", ".", "attack", "(", "data", ",", "uniform_target", ",", "targeted", "=", "False", ")", "\n", "return", "adv_samples", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.BCEACET_training.BCEACETObjective.forward": [[48, 56], ["BCEACET_training.BCEACETObjective._prepare_input", "BCEACET_training.BCEACETObjective.obj", "BCEACET_training.BCEACETObjective._log_stats", "train_loss.TrainLoss.reduce", "data.new_ones"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_loss.TrainLoss._prepare_input", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_loss.LoggingLoss._log_stats", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.adversarial_attacks.utils.reduce"], ["", "def", "forward", "(", "self", ",", "data", ",", "model_out", ",", "orig_data", ",", "y", ",", "reduction", "=", "'mean'", ")", ":", "\n", "        ", "prep_out", "=", "self", ".", "_prepare_input", "(", "model_out", ")", "\n", "assert", "self", ".", "obj", "is", "not", "None", ",", "'Inner Max has to be called first'", "\n", "uniform_target", "=", "0.5", "*", "data", ".", "new_ones", "(", "(", "data", ".", "shape", "[", "0", "]", ",", "self", ".", "num_features", ")", ",", "dtype", "=", "torch", ".", "float", ")", "\n", "loss_expanded", "=", "self", ".", "obj", "(", "None", ",", "prep_out", ",", "None", ",", "uniform_target", ",", "reduction", "=", "'none'", ")", "\n", "self", ".", "obj", "=", "None", "\n", "self", ".", "_log_stats", "(", "loss_expanded", ")", "\n", "return", "TrainLoss", ".", "reduce", "(", "loss_expanded", ",", "reduction", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.BCEACET_training.BCEACETTraining.__init__": [[59, 75], ["helpers.get_distance", "out_distribution_training.OutDistributionTraining.__init__"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.helpers.get_distance", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models_32x32.shake_pyramidnet.ShakePyramidNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "model", ",", "od_attack_config", ",", "optimizer_config", ",", "epochs", ",", "device", ",", "num_classes", ",", "\n", "mask_features", ",", "min_features_mask", ",", "max_features_mask", ",", "lr_scheduler_config", "=", "None", ",", "lam", "=", "1.", ",", "\n", "test_epochs", "=", "5", ",", "verbose", "=", "100", ",", "\n", "saved_model_dir", "=", "'SavedModels'", ",", "saved_log_dir", "=", "'Logs'", ")", ":", "\n", "\n", "        ", "distance", "=", "get_distance", "(", "od_attack_config", "[", "'norm'", "]", ")", "\n", "\n", "super", "(", ")", ".", "__init__", "(", "'BCEACET'", ",", "model", ",", "distance", ",", "optimizer_config", ",", "epochs", ",", "device", ",", "num_classes", ",", "\n", "clean_criterion", "=", "'bce'", ",", "lr_scheduler_config", "=", "lr_scheduler_config", ",", "od_weight", "=", "lam", ",", "\n", "test_epochs", "=", "test_epochs", ",", "verbose", "=", "verbose", ",", "saved_model_dir", "=", "saved_model_dir", ",", "\n", "saved_log_dir", "=", "saved_log_dir", ")", "\n", "\n", "self", ".", "od_attack_config", "=", "od_attack_config", "\n", "self", ".", "mask_featrues", "=", "mask_features", "\n", "self", ".", "min_features_mask", "=", "min_features_mask", "\n", "self", ".", "max_features_mask", "=", "max_features_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.BCEACET_training.BCEACETTraining._get_od_criterion": [[77, 82], ["BCEACET_training.BCEACETObjective"], "methods", ["None"], ["", "def", "_get_od_criterion", "(", "self", ",", "epoch", ",", "model", ")", ":", "\n", "        ", "train_criterion", "=", "BCEACETObjective", "(", "model", ",", "epoch", ",", "self", ".", "od_attack_config", ",", "self", ".", "mask_featrues", ",", "\n", "self", ".", "min_features_mask", ",", "self", ".", "max_features_mask", ",", "self", ".", "classes", ",", "\n", "log_stats", "=", "True", ",", "name_prefix", "=", "'OD'", ")", "\n", "return", "train_criterion", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.BCEACET_training.BCEACETTraining._get_od_attack": [[83, 85], ["helpers.get_adversarial_attack"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.helpers.get_adversarial_attack"], ["", "def", "_get_od_attack", "(", "self", ",", "epoch", ",", "att_criterion", ")", ":", "\n", "        ", "return", "get_adversarial_attack", "(", "self", ".", "od_attack_config", ",", "self", ".", "model", ",", "att_criterion", ",", "num_classes", "=", "self", ".", "classes", ",", "epoch", "=", "epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.BCEACET_training.BCEACETTraining._get_ACET_config": [[86, 89], ["None"], "methods", ["None"], ["", "def", "_get_ACET_config", "(", "self", ")", ":", "\n", "        ", "ACET_config", "=", "{", "'lambda'", ":", "self", ".", "od_weight", "}", "\n", "return", "ACET_config", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.BCEACET_training.BCEACETTraining._get_train_type_config": [[90, 105], ["BCEACET_training.BCEACETTraining._get_base_config", "BCEACET_training.BCEACETTraining._get_ACET_config"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_type.TrainType._get_base_config", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.ACET_training.ACETTraining._get_ACET_config"], ["", "def", "_get_train_type_config", "(", "self", ",", "loader_config", "=", "None", ")", ":", "\n", "        ", "base_config", "=", "self", ".", "_get_base_config", "(", ")", "\n", "ACET_config", "=", "self", ".", "_get_ACET_config", "(", ")", "\n", "configs", "=", "{", "}", "\n", "configs", "[", "'Base'", "]", "=", "base_config", "\n", "configs", "[", "'ACET'", "]", "=", "ACET_config", "\n", "configs", "[", "'OD Attack'", "]", "=", "self", ".", "od_attack_config", "\n", "configs", "[", "'Optimizer'", "]", "=", "self", ".", "optimizer_config", "\n", "configs", "[", "'Scheduler'", "]", "=", "self", ".", "lr_scheduler_config", "\n", "\n", "configs", "[", "'Data Loader'", "]", "=", "loader_config", "\n", "configs", "[", "'MSDA'", "]", "=", "self", ".", "msda_config", "\n", "configs", "[", "'Model'", "]", "=", "model_config", "\n", "\n", "return", "configs", "", "", "", ""]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.randomized_smoothing_training.RandomizedSmoothingLoss.__init__": [[12, 15], ["train_loss.MinMaxLoss.__init__", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models_32x32.shake_pyramidnet.ShakePyramidNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "noise_scales", ",", "log_stats", "=", "False", ",", "name_prefix", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "'RandomizedSmoothingLoss'", ",", "'log_probabilities'", ",", "log_stats", "=", "log_stats", ",", "name_prefix", "=", "name_prefix", ")", "\n", "self", ".", "noise_scales", "=", "torch", ".", "FloatTensor", "(", "noise_scales", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.randomized_smoothing_training.RandomizedSmoothingLoss.inner_max": [[16, 21], ["torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "randomized_smoothing_training.RandomizedSmoothingLoss.noise_scales[].view().to", "len", "randomized_smoothing_training.RandomizedSmoothingLoss.noise_scales[].view", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "len"], "methods", ["None"], ["", "def", "inner_max", "(", "self", ",", "data", ",", "target", ")", ":", "\n", "        ", "chosen_noise_scale", "=", "torch", ".", "randint", "(", "len", "(", "self", ".", "noise_scales", ")", ",", "(", "data", ".", "shape", "[", "0", "]", ",", ")", ")", "\n", "noise_eps", "=", "self", ".", "noise_scales", "[", "chosen_noise_scale", "]", ".", "view", "(", "data", ".", "shape", "[", "0", "]", ",", "*", "(", "[", "1", "]", "*", "len", "(", "data", ".", "shape", "[", "1", ":", "]", ")", ")", ")", ".", "to", "(", "data", ".", "device", ")", "\n", "adv_samples", "=", "(", "data", "+", "noise_eps", "*", "torch", ".", "randn_like", "(", "data", ")", ")", ".", "clamp", "(", "0.0", ",", "1.0", ")", "\n", "return", "adv_samples", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.randomized_smoothing_training.RandomizedSmoothingLoss.forward": [[22, 27], ["randomized_smoothing_training.RandomizedSmoothingLoss._prepare_input", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "randomized_smoothing_training.RandomizedSmoothingLoss._log_stats", "train_loss.TrainLoss.reduce"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_loss.TrainLoss._prepare_input", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_loss.LoggingLoss._log_stats", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.adversarial_attacks.utils.reduce"], ["", "def", "forward", "(", "self", ",", "data", ",", "model_out", ",", "orig_data", ",", "y", ",", "reduction", "=", "'mean'", ")", ":", "\n", "        ", "prep_out", "=", "self", ".", "_prepare_input", "(", "model_out", ")", "\n", "loss_expanded", "=", "F", ".", "cross_entropy", "(", "prep_out", ",", "y", ",", "reduction", "=", "'none'", ")", "\n", "self", ".", "_log_stats", "(", "loss_expanded", ")", "\n", "return", "TrainLoss", ".", "reduce", "(", "loss_expanded", ",", "reduction", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.randomized_smoothing_training.RandomizedSmoothingTraining.__init__": [[29, 41], ["helpers.get_distance", "in_distribution_training.InDistributionTraining.__init__"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.helpers.get_distance", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models_32x32.shake_pyramidnet.ShakePyramidNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "model", ",", "optimizer_config", ",", "epochs", ",", "device", ",", "num_classes", ",", "noise_scales", ",", "train_clean", "=", "True", ",", "\n", "lr_scheduler_config", "=", "None", ",", "model_config", "=", "None", ",", "\n", "test_epochs", "=", "1", ",", "verbose", "=", "100", ",", "saved_model_dir", "=", "'SavedModels'", ",", "\n", "saved_log_dir", "=", "'Logs'", ")", ":", "\n", "\n", "        ", "distance", "=", "get_distance", "(", "'l2'", ")", "\n", "self", ".", "noise_scales", "=", "noise_scales", "\n", "\n", "super", "(", ")", ".", "__init__", "(", "'RandomizedSmoothing'", ",", "model", ",", "distance", ",", "optimizer_config", ",", "epochs", ",", "device", ",", "num_classes", ",", "\n", "train_clean", "=", "train_clean", ",", "lr_scheduler_config", "=", "lr_scheduler_config", ",", "model_config", "=", "model_config", ",", "\n", "test_epochs", "=", "test_epochs", ",", "verbose", "=", "verbose", ",", "saved_model_dir", "=", "saved_model_dir", ",", "\n", "saved_log_dir", "=", "saved_log_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.randomized_smoothing_training.RandomizedSmoothingTraining._get_id_criterion": [[43, 46], ["randomized_smoothing_training.RandomizedSmoothingLoss"], "methods", ["None"], ["", "def", "_get_id_criterion", "(", "self", ",", "epoch", ",", "model", ",", "name_prefix", "=", "'ID'", ")", ":", "\n", "        ", "id_train_criterion", "=", "RandomizedSmoothingLoss", "(", "self", ".", "noise_scales", ",", "log_stats", "=", "True", ",", "name_prefix", "=", "name_prefix", ")", "\n", "return", "id_train_criterion", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.randomized_smoothing_training.RandomizedSmoothingTraining._get_train_type_config": [[47, 62], ["randomized_smoothing_training.RandomizedSmoothingTraining._get_base_config", "randomized_smoothing_training.RandomizedSmoothingTraining._get_randomized_smoothing_training_config"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_type.TrainType._get_base_config", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.randomized_smoothing_training.RandomizedSmoothingTraining._get_randomized_smoothing_training_config"], ["", "def", "_get_train_type_config", "(", "self", ",", "loader_config", "=", "None", ")", ":", "\n", "        ", "base_config", "=", "self", ".", "_get_base_config", "(", ")", "\n", "adv_config", "=", "self", ".", "_get_randomized_smoothing_training_config", "(", ")", "\n", "\n", "configs", "=", "{", "}", "\n", "configs", "[", "'Base'", "]", "=", "base_config", "\n", "configs", "[", "'Randomized Smoothing Training'", "]", "=", "adv_config", "\n", "configs", "[", "'Optimizer'", "]", "=", "self", ".", "optimizer_config", "\n", "configs", "[", "'Scheduler'", "]", "=", "self", ".", "lr_scheduler_config", "\n", "configs", "[", "'MSDA'", "]", "=", "self", ".", "msda_config", "\n", "\n", "configs", "[", "'Data Loader'", "]", "=", "loader_config", "\n", "configs", "[", "'Model'", "]", "=", "self", ".", "model_config", "\n", "\n", "return", "configs", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.randomized_smoothing_training.RandomizedSmoothingTraining._get_randomized_smoothing_training_config": [[63, 69], ["len", "torch.min().item", "torch.min().item", "torch.min().item", "torch.min().item", "torch.min().item", "torch.min().item", "torch.min().item", "torch.min().item", "torch.min().item", "torch.min().item", "torch.min().item", "torch.min().item", "torch.min().item", "torch.min().item", "torch.min().item", "torch.min().item", "torch.max().item", "torch.max().item", "torch.max().item", "torch.max().item", "torch.max().item", "torch.max().item", "torch.max().item", "torch.max().item", "torch.max().item", "torch.max().item", "torch.max().item", "torch.max().item", "torch.max().item", "torch.max().item", "torch.max().item", "torch.max().item", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max"], "methods", ["None"], ["", "def", "_get_randomized_smoothing_training_config", "(", "self", ")", ":", "\n", "        ", "config_dict", "=", "{", "}", "\n", "config_dict", "[", "'Num Noise scales'", "]", "=", "len", "(", "self", ".", "noise_scales", ")", "\n", "config_dict", "[", "'Min Noise scales'", "]", "=", "torch", ".", "min", "(", "self", ".", "noise_scales", ")", ".", "item", "(", ")", "\n", "config_dict", "[", "'Max Noise scales'", "]", "=", "torch", ".", "max", "(", "self", ".", "noise_scales", ")", ".", "item", "(", ")", "\n", "return", "config_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.Adversarial_training.AdversarialLoss.__init__": [[14, 17], ["train_loss.MinMaxLoss.__init__", "helpers.get_adversarial_attack"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models_32x32.shake_pyramidnet.ShakePyramidNet.__init__", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.helpers.get_adversarial_attack"], ["    ", "def", "__init__", "(", "self", ",", "model", ",", "epoch", ",", "attack_config", ",", "num_classes", ",", "inner_objective", "=", "'crossentropy'", ",", "log_stats", "=", "False", ",", "name_prefix", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "'AdversarialLoss'", ",", "'log_probabilities'", ",", "log_stats", "=", "log_stats", ",", "name_prefix", "=", "name_prefix", ")", "\n", "self", ".", "attack", "=", "get_adversarial_attack", "(", "attack_config", ",", "model", ",", "inner_objective", ",", "num_classes", "=", "num_classes", ",", "epoch", "=", "epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.Adversarial_training.AdversarialLoss.inner_max": [[18, 21], ["Adversarial_training.AdversarialLoss.attack"], "methods", ["None"], ["", "def", "inner_max", "(", "self", ",", "data", ",", "target", ")", ":", "\n", "        ", "adv_samples", "=", "self", ".", "attack", "(", "data", ",", "target", ",", "targeted", "=", "False", ")", "\n", "return", "adv_samples", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.Adversarial_training.AdversarialLoss.forward": [[22, 27], ["Adversarial_training.AdversarialLoss._prepare_input", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "Adversarial_training.AdversarialLoss._log_stats", "train_loss.TrainLoss.reduce"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_loss.TrainLoss._prepare_input", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_loss.LoggingLoss._log_stats", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.adversarial_attacks.utils.reduce"], ["", "def", "forward", "(", "self", ",", "data", ",", "model_out", ",", "orig_data", ",", "y", ",", "reduction", "=", "'mean'", ")", ":", "\n", "        ", "prep_out", "=", "self", ".", "_prepare_input", "(", "model_out", ")", "\n", "loss_expanded", "=", "F", ".", "cross_entropy", "(", "prep_out", ",", "y", ",", "reduction", "=", "'none'", ")", "\n", "self", ".", "_log_stats", "(", "loss_expanded", ")", "\n", "return", "TrainLoss", ".", "reduce", "(", "loss_expanded", ",", "reduction", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.Adversarial_training.AdversarialTraining.__init__": [[29, 50], ["helpers.get_distance", "in_distribution_training.InDistributionTraining.__init__"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.helpers.get_distance", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models_32x32.shake_pyramidnet.ShakePyramidNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "model", ",", "id_attack_config", ",", "optimizer_config", ",", "epochs", ",", "device", ",", "num_classes", ",", "train_clean", "=", "True", ",", "\n", "attack_loss", "=", "'logits_diff'", ",", "lr_scheduler_config", "=", "None", ",", "model_config", "=", "None", ",", "\n", "test_epochs", "=", "1", ",", "verbose", "=", "100", ",", "saved_model_dir", "=", "'SavedModels'", ",", "\n", "saved_log_dir", "=", "'Logs'", ")", ":", "\n", "\n", "        ", "distance", "=", "get_distance", "(", "id_attack_config", "[", "'norm'", "]", ")", "\n", "\n", "if", "train_clean", ":", "\n", "            ", "clean_weight", "=", "0.5", "\n", "adv_weight", "=", "0.5", "\n", "", "else", ":", "\n", "            ", "clean_weight", "=", "0.0", "\n", "adv_weight", "=", "1.0", "\n", "\n", "", "super", "(", ")", ".", "__init__", "(", "'Adversarial Training'", ",", "model", ",", "distance", ",", "optimizer_config", ",", "epochs", ",", "device", ",", "num_classes", ",", "\n", "train_clean", "=", "train_clean", ",", "clean_weight", "=", "clean_weight", ",", "id_adv_weight", "=", "adv_weight", ",", "\n", "lr_scheduler_config", "=", "lr_scheduler_config", ",", "model_config", "=", "model_config", ",", "\n", "test_epochs", "=", "test_epochs", ",", "verbose", "=", "verbose", ",", "saved_model_dir", "=", "saved_model_dir", ",", "\n", "saved_log_dir", "=", "saved_log_dir", ")", "\n", "self", ".", "id_attack_config", "=", "id_attack_config", "\n", "self", ".", "attack_loss", "=", "attack_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.Adversarial_training.AdversarialTraining._get_id_criterion": [[52, 56], ["Adversarial_training.AdversarialLoss"], "methods", ["None"], ["", "def", "_get_id_criterion", "(", "self", ",", "epoch", ",", "model", ",", "name_prefix", "=", "'ID'", ")", ":", "\n", "        ", "id_train_criterion", "=", "AdversarialLoss", "(", "model", ",", "epoch", ",", "self", ".", "id_attack_config", ",", "self", ".", "classes", ",", "inner_objective", "=", "self", ".", "attack_loss", ",", "\n", "log_stats", "=", "True", ",", "name_prefix", "=", "name_prefix", ")", "\n", "return", "id_train_criterion", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.Adversarial_training.AdversarialTraining._get_train_type_config": [[57, 73], ["Adversarial_training.AdversarialTraining._get_base_config", "Adversarial_training.AdversarialTraining._get_adversarial_training_config"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_type.TrainType._get_base_config", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.Adversarial_training.AdversarialTraining._get_adversarial_training_config"], ["", "def", "_get_train_type_config", "(", "self", ",", "loader_config", "=", "None", ")", ":", "\n", "        ", "base_config", "=", "self", ".", "_get_base_config", "(", ")", "\n", "adv_config", "=", "self", ".", "_get_adversarial_training_config", "(", ")", "\n", "\n", "configs", "=", "{", "}", "\n", "configs", "[", "'Base'", "]", "=", "base_config", "\n", "configs", "[", "'Adversarial Training'", "]", "=", "adv_config", "\n", "configs", "[", "'ID Attack'", "]", "=", "self", ".", "id_attack_config", "\n", "configs", "[", "'Optimizer'", "]", "=", "self", ".", "optimizer_config", "\n", "configs", "[", "'Scheduler'", "]", "=", "self", ".", "lr_scheduler_config", "\n", "configs", "[", "'MSDA'", "]", "=", "self", ".", "msda_config", "\n", "configs", "[", "'Data Loader'", "]", "=", "loader_config", "\n", "configs", "[", "'Model'", "]", "=", "self", ".", "model_config", "\n", "\n", "\n", "return", "configs", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.Adversarial_training.AdversarialTraining._get_adversarial_training_config": [[74, 81], ["None"], "methods", ["None"], ["", "def", "_get_adversarial_training_config", "(", "self", ")", ":", "\n", "        ", "config_dict", "=", "{", "}", "\n", "config_dict", "[", "'Train Clean'", "]", "=", "self", ".", "train_clean", "\n", "config_dict", "[", "'Adversarial Loss'", "]", "=", "self", ".", "attack_loss", "\n", "config_dict", "[", "'Clean Weight'", "]", "=", "self", ".", "clean_weight", "\n", "config_dict", "[", "'Adversarial Weight'", "]", "=", "self", ".", "id_adv_weight", "\n", "return", "config_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.helpers.interleave_forward": [[9, 57], ["min", "torch.empty", "torch.empty", "range", "torch.sum().item", "torch.sum().item", "batches[].new_empty", "range", "model", "range", "torch.cat", "torch.cat", "model", "range", "len", "len", "len", "range", "torch.cat", "torch.cat", "batch_idcs.append", "len", "batches_out.append", "len", "batches_out.append", "torch.sum", "torch.sum", "bs_factors[].item", "batch_i_idcs.append", "torch.arange", "torch.arange"], "function", ["None"], ["def", "interleave_forward", "(", "model", ",", "batches", ",", "in_parallel", "=", "True", ")", ":", "\n", "# interleave ref_data to preserve batch statistics on parallel computations", "\n", "#batches are supposed to have a batch sizes that are multiples of the smallest one, eg 256 and 1024", "\n", "    ", "if", "in_parallel", ":", "\n", "        ", "min_bs", "=", "min", "(", "[", "batch", ".", "shape", "[", "0", "]", "for", "batch", "in", "batches", "]", ")", "\n", "\n", "bs_factors", "=", "torch", ".", "empty", "(", "len", "(", "batches", ")", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "bs", "=", "0", "\n", "for", "i", "in", "range", "(", "len", "(", "batches", ")", ")", ":", "\n", "            ", "bs_i", "=", "batches", "[", "i", "]", ".", "shape", "[", "0", "]", "\n", "bs", "+=", "bs_i", "\n", "bs_factors", "[", "i", "]", "=", "bs_i", "/", "min_bs", "\n", "assert", "(", "bs_i", "%", "min_bs", ")", "==", "0", "\n", "\n", "", "subdivisions", "=", "torch", ".", "sum", "(", "bs_factors", ")", ".", "item", "(", ")", "\n", "\n", "full_size", "=", "(", "bs", ",", ")", "+", "batches", "[", "0", "]", ".", "shape", "[", "1", ":", "]", "\n", "full_data_interleaved", "=", "batches", "[", "0", "]", ".", "new_empty", "(", "full_size", ")", "\n", "idx", "=", "0", "\n", "batch_idcs", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "batches", ")", ")", ":", "\n", "            ", "batch_i_idcs", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "bs_factors", "[", "i", "]", ".", "item", "(", ")", ")", ":", "\n", "                ", "batch_i_idcs", ".", "append", "(", "torch", ".", "arange", "(", "idx", ",", "full_size", "[", "0", "]", ",", "subdivisions", ",", "dtype", "=", "torch", ".", "long", ")", ")", "\n", "idx", "+=", "1", "\n", "\n", "", "batch_i_idcs_cat", "=", "torch", ".", "cat", "(", "batch_i_idcs", ")", "\n", "full_data_interleaved", "[", "batch_i_idcs_cat", ",", ":", "]", "=", "batches", "[", "i", "]", "\n", "batch_idcs", ".", "append", "(", "batch_i_idcs_cat", ")", "\n", "\n", "", "full_out", "=", "model", "(", "full_data_interleaved", ")", "\n", "\n", "batches_out", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "batches", ")", ")", ":", "\n", "            ", "batches_out", ".", "append", "(", "full_out", "[", "batch_idcs", "[", "i", "]", ",", ":", "]", ")", "\n", "\n", "", "return", "batches_out", "\n", "", "else", ":", "\n", "        ", "full_data", "=", "torch", ".", "cat", "(", "batches", ")", "\n", "full_out", "=", "model", "(", "full_data", ")", "\n", "batches_out", "=", "[", "]", "\n", "idx", "=", "0", "\n", "for", "i", "in", "range", "(", "len", "(", "batches", ")", ")", ":", "\n", "            ", "idx_next", "=", "idx", "+", "batches", "[", "i", "]", ".", "shape", "[", "0", "]", "\n", "batches_out", ".", "append", "(", "full_out", "[", "idx", ":", "idx_next", ",", ":", "]", ")", "\n", "idx", "=", "idx_next", "\n", "\n", "", "return", "batches_out", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.helpers.create_attack_config": [[59, 77], ["float", "float", "ValueError"], "function", ["None"], ["", "", "def", "create_attack_config", "(", "eps", ",", "steps", ",", "stepsize", ",", "norm", ",", "momentum", "=", "0.9", ",", "pgd", "=", "'pgd'", ",", "normalize_gradient", "=", "False", ",", "noise", "=", "None", ")", ":", "\n", "    ", "if", "noise", "is", "None", ":", "\n", "        ", "attack_config", "=", "{", "'eps'", ":", "eps", ",", "'steps'", ":", "steps", ",", "'stepsize'", ":", "stepsize", ",", "'norm'", ":", "norm", ",", "'momentum'", ":", "momentum", ",", "\n", "'pgd'", ":", "pgd", ",", "'normalize_gradient'", ":", "normalize_gradient", ",", "'noise'", ":", "None", "}", "\n", "", "elif", "'uniform'", "in", "noise", ":", "\n", "# format: uniform_sigma", "\n", "        ", "sigma", "=", "float", "(", "noise", "[", "8", ":", "]", ")", "\n", "attack_config", "=", "{", "'eps'", ":", "eps", ",", "'steps'", ":", "steps", ",", "'stepsize'", ":", "stepsize", ",", "'norm'", ":", "norm", ",", "'momentum'", ":", "momentum", ",", "\n", "'pgd'", ":", "pgd", ",", "'normalize_gradient'", ":", "normalize_gradient", ",", "'noise'", ":", "'uniform'", ",", "'noise_sigma'", ":", "sigma", "}", "\n", "", "elif", "'normal'", "in", "noise", ":", "\n", "# format: normal_sigma", "\n", "        ", "sigma", "=", "float", "(", "noise", "[", "7", ":", "]", ")", "\n", "attack_config", "=", "{", "'eps'", ":", "eps", ",", "'steps'", ":", "steps", ",", "'stepsize'", ":", "stepsize", ",", "'norm'", ":", "norm", ",", "'momentum'", ":", "momentum", ",", "\n", "'pgd'", ":", "pgd", ",", "'normalize_gradient'", ":", "normalize_gradient", ",", "'noise'", ":", "'normal'", ",", "'noise_sigma'", ":", "sigma", "}", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'Noise format not supported'", ")", "\n", "\n", "", "return", "attack_config", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.helpers.get_epoch_specific_config": [[79, 86], ["zip"], "function", ["None"], ["", "def", "get_epoch_specific_config", "(", "stages_end", ",", "stages_values", ",", "epoch", ")", ":", "\n", "    ", "value", "=", "0", "\n", "for", "stage_end", ",", "stage_values", "in", "zip", "(", "stages_end", ",", "stages_values", ")", ":", "\n", "        ", "if", "epoch", "<", "stage_end", ":", "\n", "            ", "value", "=", "stage_values", "\n", "break", "\n", "", "", "return", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.helpers.get_adversarial_attack": [[87, 147], ["isinstance", "isinstance", "helpers.get_epoch_specific_config", "helpers.get_epoch_specific_config", "utils.adversarial_attacks.MonotonePGD", "utils.adversarial_attacks.UniformNoiseGenerator", "utils.adversarial_attacks.PGD", "utils.adversarial_attacks.NormalNoiseGenerator", "ValueError", "utils.adversarial_attacks.ArgminPGD", "utils.adversarial_attacks.APGDAttack", "utils.adversarial_attacks.CutoutPGD", "ValueError", "utils.adversarial_attacks.LinfFABAttack", "utils.adversarial_attacks.L2FABAttack", "NotImplementedError"], "function", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.helpers.get_epoch_specific_config", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.helpers.get_epoch_specific_config"], ["", "def", "get_adversarial_attack", "(", "config", ",", "model", ",", "att_criterion", ",", "num_classes", ",", "epoch", "=", "0", ")", ":", "\n", "    ", "if", "isinstance", "(", "config", "[", "'steps'", "]", ",", "tuple", ")", ":", "\n", "        ", "stages_end", ",", "stages_values", "=", "config", "[", "'steps'", "]", "\n", "steps", "=", "get_epoch_specific_config", "(", "stages_end", ",", "stages_values", ",", "epoch", ")", "\n", "", "else", ":", "\n", "        ", "steps", "=", "config", "[", "'steps'", "]", "\n", "\n", "", "if", "isinstance", "(", "config", "[", "'eps'", "]", ",", "tuple", ")", ":", "\n", "        ", "stages_end", ",", "stages_values", "=", "config", "[", "'eps'", "]", "\n", "eps", "=", "get_epoch_specific_config", "(", "stages_end", ",", "stages_values", ",", "epoch", ")", "\n", "", "else", ":", "\n", "        ", "eps", "=", "config", "[", "'eps'", "]", "\n", "\n", "", "if", "config", "[", "'noise'", "]", "is", "None", ":", "\n", "        ", "noise_generator", "=", "None", "\n", "", "elif", "config", "[", "'noise'", "]", "==", "'uniform'", ":", "\n", "        ", "noise_generator", "=", "UniformNoiseGenerator", "(", "min", "=", "-", "config", "[", "'noise_sigma'", "]", ",", "\n", "max", "=", "config", "[", "'noise_sigma'", "]", ")", "\n", "", "elif", "config", "[", "'noise'", "]", "==", "'normal'", ":", "\n", "        ", "noise_generator", "=", "NormalNoiseGenerator", "(", "sigma", "=", "config", "[", "'noise_sigma'", "]", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'Noise format not supported'", ")", "\n", "\n", "", "if", "config", "[", "'pgd'", "]", "==", "'monotone'", ":", "\n", "        ", "adv_attack", "=", "MonotonePGD", "(", "eps", ",", "steps", ",", "\n", "config", "[", "'stepsize'", "]", ",", "num_classes", ",", "\n", "momentum", "=", "config", "[", "'momentum'", "]", ",", "\n", "norm", "=", "config", "[", "'norm'", "]", ",", "\n", "loss", "=", "att_criterion", ",", "normalize_grad", "=", "config", "[", "'normalize_gradient'", "]", ",", "\n", "model", "=", "model", ",", "init_noise_generator", "=", "noise_generator", ")", "\n", "", "elif", "config", "[", "'pgd'", "]", "==", "'pgd'", ":", "\n", "        ", "adv_attack", "=", "PGD", "(", "eps", ",", "steps", ",", "\n", "config", "[", "'stepsize'", "]", ",", "num_classes", ",", "\n", "momentum", "=", "config", "[", "'momentum'", "]", ",", "norm", "=", "config", "[", "'norm'", "]", ",", "\n", "loss", "=", "att_criterion", ",", "normalize_grad", "=", "config", "[", "'normalize_gradient'", "]", ",", "\n", "model", "=", "model", ",", "init_noise_generator", "=", "noise_generator", ")", "\n", "", "elif", "config", "[", "'pgd'", "]", "==", "'argmin'", ":", "\n", "        ", "adv_attack", "=", "ArgminPGD", "(", "eps", ",", "steps", ",", "\n", "config", "[", "'stepsize'", "]", ",", "num_classes", ",", "\n", "momentum", "=", "config", "[", "'momentum'", "]", ",", "norm", "=", "config", "[", "'norm'", "]", ",", "\n", "loss", "=", "att_criterion", ",", "normalize_grad", "=", "config", "[", "'normalize_gradient'", "]", ",", "\n", "model", "=", "model", ",", "init_noise_generator", "=", "noise_generator", ")", "\n", "", "elif", "config", "[", "'pgd'", "]", "==", "'apgd'", ":", "\n", "        ", "adv_attack", "=", "APGDAttack", "(", "model", ",", "num_classes", ",", "eps", "=", "eps", ",", "n_iter", "=", "steps", ",", "norm", "=", "config", "[", "'norm'", "]", ",", "loss", "=", "att_criterion", ")", "\n", "", "elif", "config", "[", "'pgd'", "]", "==", "'cutoutpgd'", ":", "\n", "        ", "adv_attack", "=", "CutoutPGD", "(", "eps", ",", "steps", ",", "\n", "config", "[", "'stepsize'", "]", ",", "num_classes", ",", "\n", "momentum", "=", "config", "[", "'momentum'", "]", ",", "norm", "=", "config", "[", "'norm'", "]", ",", "\n", "loss", "=", "att_criterion", ",", "normalize_grad", "=", "config", "[", "'normalize_gradient'", "]", ",", "\n", "model", "=", "model", ",", "init_noise_generator", "=", "noise_generator", ")", "\n", "", "elif", "config", "[", "'pgd'", "]", "==", "'fab'", ":", "\n", "        ", "if", "config", "[", "'norm'", "]", "in", "[", "'inf'", ",", "'linf'", ",", "'Linf'", "]", ":", "\n", "            ", "adv_attack", "=", "LinfFABAttack", "(", "model", ",", "n_restarts", "=", "1", ",", "n_iter", "=", "steps", ",", "eps", "=", "eps", ")", "\n", "", "elif", "config", "[", "'norm'", "]", "in", "[", "'l2'", ",", "'L2'", "]", ":", "\n", "            ", "adv_attack", "=", "L2FABAttack", "(", "model", ",", "n_restarts", "=", "1", ",", "n_iter", "=", "steps", ",", "eps", "=", "eps", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "'Norm not supported'", ")", "\n", "", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'PGD {} not supported'", ".", "format", "(", "config", "[", "'pgd'", "]", ")", ")", "\n", "", "return", "adv_attack", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.helpers.get_distance": [[149, 165], ["utils.distances.LPDistance", "isinstance", "utils.distances.LPDistance", "float", "float", "NotImplementedError", "norm.lower"], "function", ["None"], ["", "def", "get_distance", "(", "norm", ")", ":", "\n", "    ", "if", "norm", "in", "[", "'inf'", ",", "'linf'", ",", "'Linf'", ",", "'LINF'", "]", ":", "\n", "        ", "distance", "=", "LPDistance", "(", "p", "=", "'inf'", ")", "\n", "", "else", ":", "\n", "        ", "try", ":", "\n", "            ", "if", "isinstance", "(", "norm", ",", "str", ")", ":", "\n", "                ", "if", "norm", ".", "lower", "(", ")", "[", "0", "]", "==", "'l'", ":", "\n", "                    ", "norm", "=", "norm", "[", "1", ":", "]", "\n", "", "p", "=", "float", "(", "norm", ")", "\n", "", "else", ":", "\n", "                ", "p", "=", "float", "(", "norm", ")", "\n", "", "distance", "=", "LPDistance", "(", "p", "=", "p", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "            ", "raise", "NotImplementedError", "(", "'Norm not supported'", ")", "\n", "\n", "", "", "return", "distance", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.helpers.disable_running_stats": [[167, 174], ["model.apply", "issubclass", "type"], "function", ["None"], ["", "def", "disable_running_stats", "(", "model", ")", ":", "\n", "    ", "def", "_disable", "(", "module", ")", ":", "\n", "        ", "if", "issubclass", "(", "type", "(", "module", ")", ",", "_BatchNorm", ")", ":", "\n", "            ", "module", ".", "backup_momentum", "=", "module", ".", "momentum", "\n", "module", ".", "momentum", "=", "0", "\n", "\n", "", "", "model", ".", "apply", "(", "_disable", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.helpers.enable_running_stats": [[175, 181], ["model.apply", "issubclass", "hasattr", "type"], "function", ["None"], ["", "def", "enable_running_stats", "(", "model", ")", ":", "\n", "    ", "def", "_enable", "(", "module", ")", ":", "\n", "        ", "if", "issubclass", "(", "type", "(", "module", ")", ",", "_BatchNorm", ")", "and", "hasattr", "(", "module", ",", "\"backup_momentum\"", ")", ":", "\n", "            ", "module", ".", "momentum", "=", "module", ".", "backup_momentum", "\n", "\n", "", "", "model", ".", "apply", "(", "_enable", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.out_distribution_training.OutDistributionTraining.__init__": [[22, 35], ["train_type.TrainType.__init__"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models_32x32.shake_pyramidnet.ShakePyramidNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "name", ",", "model", ",", "od_distance", ",", "optimizer_config", ",", "epochs", ",", "device", ",", "num_classes", ",", "clean_criterion", "=", "'ce'", ",", "\n", "lr_scheduler_config", "=", "None", ",", "msda_config", "=", "None", ",", "model_config", "=", "None", ",", "id_weight", "=", "1.", ",", "od_weight", "=", "1.", ",", "\n", "test_epochs", "=", "5", ",", "verbose", "=", "100", ",", "saved_model_dir", "=", "'SavedModels'", ",", "saved_log_dir", "=", "'Logs'", ")", ":", "\n", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "name", ",", "model", ",", "optimizer_config", ",", "epochs", ",", "device", ",", "num_classes", ",", "\n", "clean_criterion", "=", "clean_criterion", ",", "lr_scheduler_config", "=", "lr_scheduler_config", ",", "\n", "msda_config", "=", "msda_config", ",", "model_config", "=", "model_config", ",", "test_epochs", "=", "test_epochs", ",", "\n", "verbose", "=", "verbose", ",", "saved_model_dir", "=", "saved_model_dir", ",", "saved_log_dir", "=", "saved_log_dir", ")", "\n", "\n", "self", ".", "id_weight", "=", "id_weight", "\n", "self", ".", "od_weight", "=", "od_weight", "\n", "self", ".", "od_distance", "=", "od_distance", "\n", "self", ".", "od_iterator", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.out_distribution_training.OutDistributionTraining.requires_out_distribution": [[36, 38], ["None"], "methods", ["None"], ["", "def", "requires_out_distribution", "(", "self", ")", ":", "\n", "        ", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.out_distribution_training.OutDistributionTraining._get_od_criterion": [[39, 42], ["NotImplementedError"], "methods", ["None"], ["", "def", "_get_od_criterion", "(", "self", ",", "epoch", ",", "model", ",", "name_prefix", "=", "'OD'", ")", ":", "\n", "#Should return a MinMaxLoss", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.out_distribution_training.OutDistributionTraining._get_od_conf_logger": [[43, 50], ["train_loss.ConfidenceLogger", "train_loss.BCConfidenceLogger", "NotImplementedError"], "methods", ["None"], ["", "def", "_get_od_conf_logger", "(", "self", ",", "name_prefix", "=", "None", ")", ":", "\n", "        ", "if", "self", ".", "clean_criterion", "in", "[", "'ce'", ",", "'crossentropy'", ",", "'kl'", ",", "'KL'", "]", "or", "'klEntropy'", "in", "self", ".", "clean_criterion", ":", "\n", "            ", "return", "ConfidenceLogger", "(", "name_prefix", "=", "name_prefix", ")", "\n", "", "elif", "self", ".", "clean_criterion", "==", "'bce'", ":", "\n", "            ", "return", "BCConfidenceLogger", "(", "self", ".", "classes", ",", "name_prefix", "=", "name_prefix", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.out_distribution_training.OutDistributionTraining.test": [[51, 97], ["super().test", "model.eval", "out_distribution_training.OutDistributionTraining._get_od_criterion", "train_loss.DistanceLogger", "out_distribution_training.OutDistributionTraining._get_od_conf_logger", "len", "out_distribution_training.OutDistributionTraining.output_backend.start_epoch_log", "out_distribution_training.OutDistributionTraining.output_backend.end_epoch_write_summary", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "enumerate", "out_distribution_training.OutDistributionTraining.inner_max", "model", "out_distribution_training.OutDistributionTraining.", "train_loss.DistanceLogger.", "out_distribution_training.OutDistributionTraining.", "out_distribution_training.OutDistributionTraining.output_backend.log_batch_summary", "od_data.to", "od_target.to"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models_32x32.resnet.test", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models.ebm_wrn.gradient_attack_wrapper.eval", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.TRADESCEDA_training.TRADESCEDATraining._get_od_criterion", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.out_distribution_training.OutDistributionTraining._get_od_conf_logger", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.output_backend.OutputBackend.start_epoch_log", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.output_backend.OutputBackend.end_epoch_write_summary", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.msda.mixup.MixupLoss.inner_max", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.output_backend.OutputBackend.log_batch_summary"], ["", "", "def", "test", "(", "self", ",", "test_loaders", ",", "epoch", ",", "test_avg_model", "=", "False", ")", ":", "\n", "# test set accuracy", "\n", "        ", "new_best", "=", "super", "(", ")", ".", "test", "(", "test_loaders", ",", "epoch", ",", "test_avg_model", ")", "\n", "\n", "if", "test_avg_model", ":", "\n", "            ", "model", "=", "self", ".", "avg_model", "\n", "", "else", ":", "\n", "            ", "model", "=", "self", ".", "model", "\n", "\n", "", "model", ".", "eval", "(", ")", "\n", "\n", "if", "'out_distribution_test_loader'", "in", "test_loaders", ":", "\n", "            ", "out_distribution_test_loader", "=", "test_loaders", "[", "'out_distribution_test_loader'", "]", "\n", "# other accuracy", "\n", "if", "test_avg_model", ":", "\n", "                ", "prefix", "=", "'AVG_OD'", "\n", "", "else", ":", "\n", "                ", "prefix", "=", "'OD'", "\n", "\n", "", "od_train_criterion", "=", "self", ".", "_get_od_criterion", "(", "epoch", ",", "model", ")", "\n", "losses", "=", "[", "od_train_criterion", "]", "\n", "\n", "distance_od", "=", "DistanceLogger", "(", "self", ".", "od_distance", ",", "name_prefix", "=", "prefix", ")", "\n", "confidence_od", "=", "self", ".", "_get_od_conf_logger", "(", "name_prefix", "=", "prefix", ")", "\n", "loggers", "=", "[", "distance_od", ",", "confidence_od", "]", "\n", "\n", "\n", "test_set_batches", "=", "len", "(", "out_distribution_test_loader", ")", "\n", "self", ".", "output_backend", ".", "start_epoch_log", "(", "test_set_batches", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "for", "batch_idx", ",", "(", "od_data", ",", "od_target", ")", "in", "enumerate", "(", "out_distribution_test_loader", ")", ":", "\n", "                    ", "od_data", ",", "od_target", "=", "od_data", ".", "to", "(", "self", ".", "device", ")", ",", "od_target", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "adv_noise", "=", "od_train_criterion", ".", "inner_max", "(", "od_data", ",", "od_target", ")", "\n", "out", "=", "model", "(", "adv_noise", ")", "\n", "\n", "od_train_criterion", "(", "adv_noise", ",", "out", ",", "od_data", ",", "od_target", ")", "\n", "\n", "distance_od", "(", "adv_noise", ",", "out", ",", "od_data", ",", "od_target", ")", "\n", "confidence_od", "(", "adv_noise", ",", "out", ",", "od_data", ",", "od_target", ")", "\n", "self", ".", "output_backend", ".", "log_batch_summary", "(", "epoch", ",", "batch_idx", ",", "False", ",", "losses", "=", "losses", ",", "loggers", "=", "loggers", ")", "\n", "\n", "", "", "self", ".", "output_backend", ".", "end_epoch_write_summary", "(", "losses", ",", "loggers", ",", "epoch", ",", "False", ")", "\n", "\n", "", "return", "new_best", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.out_distribution_training.OutDistributionTraining.create_loaders_dict": [[98, 114], ["None"], "methods", ["None"], ["", "def", "create_loaders_dict", "(", "self", ",", "train_loader", ",", "test_loader", "=", "None", ",", "out_distribution_loader", "=", "None", ",", "\n", "out_distribution_test_loader", "=", "None", ",", "extra_test_loaders", "=", "None", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "train_loaders", "=", "{", "\n", "'train_loader'", ":", "train_loader", ",", "\n", "'out_distribution_loader'", ":", "out_distribution_loader", "\n", "}", "\n", "\n", "test_loaders", "=", "{", "}", "\n", "if", "test_loader", "is", "not", "None", ":", "\n", "            ", "test_loaders", "[", "'test_loader'", "]", "=", "test_loader", "\n", "", "if", "out_distribution_test_loader", "is", "not", "None", ":", "\n", "            ", "test_loaders", "[", "'out_distribution_test_loader'", "]", "=", "out_distribution_test_loader", "\n", "", "if", "extra_test_loaders", "is", "not", "None", ":", "\n", "            ", "test_loaders", "[", "'extra_test_loaders'", "]", "=", "extra_test_loaders", "\n", "\n", "", "return", "train_loaders", ",", "test_loaders", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.out_distribution_training.OutDistributionTraining._validate_loaders": [[115, 120], ["ValueError", "ValueError"], "methods", ["None"], ["", "def", "_validate_loaders", "(", "self", ",", "train_loaders", ",", "test_loaders", ")", ":", "\n", "        ", "if", "not", "'train_loader'", "in", "train_loaders", ":", "\n", "            ", "raise", "ValueError", "(", "'Train cifar_loader not given'", ")", "\n", "", "if", "not", "'out_distribution_loader'", "in", "train_loaders", ":", "\n", "            ", "raise", "ValueError", "(", "'Out distribution cifar_loader is required for out distribution training'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.out_distribution_training.OutDistributionTraining.__get_loss_closure": [[121, 150], ["helpers.interleave_forward", "clean_loss", "od_train_criterion", "total_loss_logger.log", "lr_logger.log", "acc_conf_clean", "confidence_od", "distance_od", "out_distribution_training.OutDistributionTraining.scheduler.get_last_lr"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.helpers.interleave_forward", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_loss.DistanceLogger.log", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_loss.DistanceLogger.log", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.schedulers.scheduler.Scheduler.get_last_lr"], ["", "", "def", "__get_loss_closure", "(", "self", ",", "clean_data", ",", "clean_target", ",", "\n", "od_adv_samples", ",", "od_data", ",", "od_target", ",", "\n", "clean_loss", ",", "od_train_criterion", ",", "\n", "total_loss_logger", "=", "None", ",", "\n", "lr_logger", "=", "None", ",", "\n", "acc_conf_clean", "=", "None", ",", "\n", "confidence_od", "=", "None", ",", "\n", "distance_od", "=", "None", ")", ":", "\n", "\n", "        ", "def", "loss_closure", "(", "log", "=", "False", ")", ":", "\n", "            ", "clean_out", ",", "od_out", "=", "interleave_forward", "(", "self", ".", "model", ",", "[", "clean_data", ",", "od_adv_samples", "]", ",", "in_parallel", "=", "self", ".", "in_parallel", ")", "\n", "\n", "loss1", "=", "clean_loss", "(", "clean_data", ",", "clean_out", ",", "clean_data", ",", "clean_target", ")", "\n", "loss2", "=", "od_train_criterion", "(", "od_adv_samples", ",", "od_out", ",", "od_data", ",", "od_target", ")", "\n", "\n", "loss", "=", "self", ".", "id_weight", "*", "loss1", "+", "self", ".", "od_weight", "*", "loss2", "\n", "\n", "if", "log", ":", "\n", "# log", "\n", "                ", "total_loss_logger", ".", "log", "(", "loss", ")", "\n", "lr_logger", ".", "log", "(", "self", ".", "scheduler", ".", "get_last_lr", "(", ")", "[", "0", "]", ")", "\n", "\n", "acc_conf_clean", "(", "clean_data", ",", "clean_out", ",", "clean_data", ",", "clean_target", ")", "\n", "confidence_od", "(", "od_adv_samples", ",", "od_out", ",", "od_data", ",", "od_target", ")", "\n", "distance_od", "(", "od_adv_samples", ",", "od_out", ",", "od_data", ",", "od_target", ")", "\n", "\n", "", "return", "loss", "\n", "\n", "", "return", "loss_closure", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.out_distribution_training.OutDistributionTraining._inner_train": [[151, 222], ["out_distribution_training.OutDistributionTraining.model.train", "out_distribution_training.OutDistributionTraining._get_dataloader_length", "out_distribution_training.OutDistributionTraining._get_loader_batchsize", "out_distribution_training.OutDistributionTraining._get_loader_batchsize", "out_distribution_training.OutDistributionTraining._get_clean_criterion", "out_distribution_training.OutDistributionTraining._get_msda", "out_distribution_training.OutDistributionTraining._get_od_criterion", "out_distribution_training.OutDistributionTraining._get_msda", "out_distribution_training.OutDistributionTraining._get_clean_accuracy_conf_logger", "train_loss.DistanceLogger", "out_distribution_training.OutDistributionTraining._get_od_conf_logger", "train_loss.SingleValueLogger", "train_loss.SingleValueLogger", "out_distribution_training.OutDistributionTraining.output_backend.start_epoch_log", "enumerate", "out_distribution_training.OutDistributionTraining._update_scheduler", "out_distribution_training.OutDistributionTraining.output_backend.end_epoch_write_summary", "msda", "od_msda", "out_distribution_training.OutDistributionTraining.inner_max", "out_distribution_training.OutDistributionTraining._update_scheduler", "out_distribution_training.OutDistributionTraining.output_backend.log_batch_summary", "next", "msda.to", "clean_target.to", "od_msda.to", "od_target.to", "torch.autocast", "torch.autocast", "torch.autocast", "torch.autocast", "torch.autocast", "out_distribution_training.OutDistributionTraining.__get_loss_closure", "out_distribution_training.OutDistributionTraining._loss_step", "out_distribution_training.OutDistributionTraining._update_avg_model", "iter", "len", "next"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_type.TrainType.train", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_type.TrainType._get_dataloader_length", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_type.TrainType._get_loader_batchsize", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_type.TrainType._get_loader_batchsize", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_type.TrainType._get_clean_criterion", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_type.TrainType._get_msda", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.TRADESCEDA_training.TRADESCEDATraining._get_od_criterion", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_type.TrainType._get_msda", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_type.TrainType._get_clean_accuracy_conf_logger", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.out_distribution_training.OutDistributionTraining._get_od_conf_logger", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.output_backend.OutputBackend.start_epoch_log", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_type.TrainType._update_scheduler", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.output_backend.OutputBackend.end_epoch_write_summary", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.msda.mixup.MixupLoss.inner_max", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_type.TrainType._update_scheduler", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.output_backend.OutputBackend.log_batch_summary", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.in_out_distribution_training.InOutDistributionTraining.__get_loss_closure", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_type.TrainType._loss_step", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_type.TrainType._update_avg_model"], ["", "def", "_inner_train", "(", "self", ",", "train_loaders", ",", "epoch", ",", "log_epoch", "=", "None", ")", ":", "\n", "        ", "if", "log_epoch", "is", "None", ":", "\n", "            ", "log_epoch", "=", "epoch", "\n", "\n", "", "train_loader", "=", "train_loaders", "[", "'train_loader'", "]", "\n", "out_distribution_loader", "=", "train_loaders", "[", "'out_distribution_loader'", "]", "\n", "self", ".", "model", ".", "train", "(", ")", "\n", "\n", "train_set_batches", "=", "self", ".", "_get_dataloader_length", "(", "train_loader", ",", "out_distribution_loader", "=", "out_distribution_loader", ")", "\n", "\n", "# https: // github.com / pytorch / pytorch / issues / 1917  # issuecomment-433698337", "\n", "\n", "bs", "=", "self", ".", "_get_loader_batchsize", "(", "train_loader", ")", "\n", "od_bs", "=", "self", ".", "_get_loader_batchsize", "(", "out_distribution_loader", ")", "\n", "\n", "clean_loss", "=", "self", ".", "_get_clean_criterion", "(", "test", "=", "False", ",", "log_stats", "=", "True", ",", "name_prefix", "=", "'Clean'", ")", "\n", "clean_loss", ",", "msda", "=", "self", ".", "_get_msda", "(", "clean_loss", ",", "log_stats", "=", "True", ",", "name_prefix", "=", "'Clean'", ")", "\n", "\n", "od_train_criterion", "=", "self", ".", "_get_od_criterion", "(", "epoch", ",", "self", ".", "model", ")", "\n", "od_train_criterion", ",", "od_msda", "=", "self", ".", "_get_msda", "(", "od_train_criterion", ",", "log_stats", "=", "True", ")", "\n", "\n", "losses", "=", "[", "clean_loss", ",", "od_train_criterion", "]", "\n", "\n", "acc_conf_clean", "=", "self", ".", "_get_clean_accuracy_conf_logger", "(", "name_prefix", "=", "'Clean'", ")", "\n", "distance_od", "=", "DistanceLogger", "(", "self", ".", "od_distance", ",", "name_prefix", "=", "'OD'", ")", "\n", "confidence_od", "=", "self", ".", "_get_od_conf_logger", "(", "name_prefix", "=", "'OD'", ")", "\n", "total_loss_logger", "=", "SingleValueLogger", "(", "'Loss'", ")", "\n", "lr_logger", "=", "SingleValueLogger", "(", "'LR'", ")", "\n", "loggers", "=", "[", "total_loss_logger", ",", "acc_conf_clean", ",", "confidence_od", ",", "distance_od", ",", "lr_logger", "]", "\n", "\n", "self", ".", "output_backend", ".", "start_epoch_log", "(", "train_set_batches", ")", "\n", "for", "batch_idx", ",", "(", "clean_data", ",", "clean_target", ")", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "            ", "try", ":", "\n", "                ", "od_data", ",", "od_target", "=", "next", "(", "self", ".", "od_iterator", ")", "\n", "", "except", ":", "\n", "                ", "self", ".", "od_iterator", "=", "iter", "(", "out_distribution_loader", ")", "\n", "len", "(", "out_distribution_loader", ".", "dataset", ")", "\n", "od_data", ",", "od_target", "=", "next", "(", "self", ".", "od_iterator", ")", "\n", "\n", "", "if", "clean_data", ".", "shape", "[", "0", "]", "<", "bs", "or", "od_data", ".", "shape", "[", "0", "]", "<", "od_bs", ":", "\n", "                ", "continue", "\n", "\n", "", "clean_data", "=", "msda", "(", "clean_data", ")", "\n", "od_data", "=", "od_msda", "(", "od_data", ")", "\n", "\n", "clean_data", ",", "clean_target", "=", "clean_data", ".", "to", "(", "self", ".", "device", ")", ",", "clean_target", ".", "to", "(", "self", ".", "device", ")", "\n", "od_data", ",", "od_target", "=", "od_data", ".", "to", "(", "self", ".", "device", ")", ",", "od_target", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "od_adv_samples", "=", "od_train_criterion", ".", "inner_max", "(", "od_data", ",", "od_target", ")", "\n", "\n", "with", "amp", ".", "autocast", "(", "enabled", "=", "self", ".", "mixed_precision", ")", ":", "\n", "                ", "loss_closure", "=", "self", ".", "__get_loss_closure", "(", "clean_data", ",", "clean_target", ",", "\n", "od_adv_samples", ",", "od_data", ",", "od_target", ",", "\n", "clean_loss", ",", "od_train_criterion", ",", "\n", "total_loss_logger", "=", "total_loss_logger", ",", "\n", "lr_logger", "=", "lr_logger", ",", "\n", "acc_conf_clean", "=", "acc_conf_clean", ",", "\n", "confidence_od", "=", "confidence_od", ",", "\n", "distance_od", "=", "distance_od", ")", "\n", "\n", "\n", "self", ".", "_loss_step", "(", "loss_closure", ")", "\n", "#ema", "\n", "", "if", "self", ".", "ema", ":", "\n", "                ", "self", ".", "_update_avg_model", "(", ")", "\n", "\n", "", "self", ".", "_update_scheduler", "(", "epoch", "+", "(", "batch_idx", "+", "1", ")", "/", "train_set_batches", ")", "\n", "self", ".", "output_backend", ".", "log_batch_summary", "(", "log_epoch", ",", "batch_idx", ",", "True", ",", "losses", "=", "losses", ",", "loggers", "=", "loggers", ")", "\n", "\n", "", "self", ".", "_update_scheduler", "(", "epoch", "+", "1", ")", "\n", "self", ".", "output_backend", ".", "end_epoch_write_summary", "(", "losses", ",", "loggers", ",", "log_epoch", ",", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.out_distribution_training.OutDistributionTraining._update_avg_model_batch_norm": [[223, 261], ["out_distribution_training.OutDistributionTraining._get_clean_criterion", "out_distribution_training.OutDistributionTraining._get_msda", "out_distribution_training.OutDistributionTraining._get_od_criterion", "out_distribution_training.OutDistributionTraining._get_msda", "out_distribution_training.OutDistributionTraining._get_loader_batchsize", "out_distribution_training.OutDistributionTraining._get_loader_batchsize", "out_distribution_training.OutDistributionTraining.avg_model.train", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "enumerate", "msda", "od_msda", "out_distribution_training.OutDistributionTraining.inner_max", "next", "msda.to", "clean_target.to", "od_msda.to", "od_target.to", "torch.autocast", "torch.autocast", "torch.autocast", "torch.autocast", "torch.autocast", "out_distribution_training.OutDistributionTraining.__get_loss_closure", "out_distribution_training.OutDistributionTraining.", "iter", "next"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_type.TrainType._get_clean_criterion", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_type.TrainType._get_msda", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.TRADESCEDA_training.TRADESCEDATraining._get_od_criterion", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_type.TrainType._get_msda", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_type.TrainType._get_loader_batchsize", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_type.TrainType._get_loader_batchsize", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_type.TrainType.train", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.msda.mixup.MixupLoss.inner_max", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.in_out_distribution_training.InOutDistributionTraining.__get_loss_closure"], ["", "def", "_update_avg_model_batch_norm", "(", "self", ",", "train_loaders", ")", ":", "\n", "        ", "train_loader", "=", "train_loaders", "[", "'train_loader'", "]", "\n", "out_distribution_loader", "=", "train_loaders", "[", "'out_distribution_loader'", "]", "\n", "\n", "clean_loss", "=", "self", ".", "_get_clean_criterion", "(", "test", "=", "False", ",", "log_stats", "=", "True", ",", "name_prefix", "=", "'Clean'", ")", "\n", "clean_loss", ",", "msda", "=", "self", ".", "_get_msda", "(", "clean_loss", ",", "log_stats", "=", "True", ",", "name_prefix", "=", "'Clean'", ")", "\n", "\n", "od_train_criterion", "=", "self", ".", "_get_od_criterion", "(", "self", ".", "epochs", ",", "self", ".", "avg_model", ")", "\n", "od_train_criterion", ",", "od_msda", "=", "self", ".", "_get_msda", "(", "od_train_criterion", ",", "log_stats", "=", "True", ")", "\n", "bs", "=", "self", ".", "_get_loader_batchsize", "(", "train_loader", ")", "\n", "od_bs", "=", "self", ".", "_get_loader_batchsize", "(", "out_distribution_loader", ")", "\n", "\n", "self", ".", "avg_model", ".", "train", "(", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "batch_idx", ",", "(", "clean_data", ",", "clean_target", ")", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "                ", "try", ":", "\n", "                    ", "od_data", ",", "od_target", "=", "next", "(", "self", ".", "od_iterator", ")", "\n", "", "except", ":", "\n", "                    ", "self", ".", "od_iterator", "=", "iter", "(", "out_distribution_loader", ")", "\n", "od_data", ",", "od_target", "=", "next", "(", "self", ".", "od_iterator", ")", "\n", "\n", "", "if", "clean_data", ".", "shape", "[", "0", "]", "<", "bs", "or", "od_data", ".", "shape", "[", "0", "]", "<", "od_bs", ":", "\n", "                    ", "continue", "\n", "\n", "", "clean_data", "=", "msda", "(", "clean_data", ")", "\n", "od_data", "=", "od_msda", "(", "od_data", ")", "\n", "\n", "clean_data", ",", "clean_target", "=", "clean_data", ".", "to", "(", "self", ".", "device", ")", ",", "clean_target", ".", "to", "(", "self", ".", "device", ")", "\n", "od_data", ",", "od_target", "=", "od_data", ".", "to", "(", "self", ".", "device", ")", ",", "od_target", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "od_adv_samples", "=", "od_train_criterion", ".", "inner_max", "(", "od_data", ",", "od_target", ")", "\n", "with", "amp", ".", "autocast", "(", "enabled", "=", "self", ".", "mixed_precision", ")", ":", "\n", "                    ", "loss_closure", "=", "self", ".", "__get_loss_closure", "(", "clean_data", ",", "clean_target", ",", "\n", "od_adv_samples", ",", "od_data", ",", "od_target", ",", "\n", "clean_loss", ",", "od_train_criterion", ")", "\n", "\n", "loss", "=", "loss_closure", "(", "log", "=", "False", ")", "\n", "", "", "", "", "", ""]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.TRADESACET_training.TRADESACETTraining.__init__": [[19, 41], ["helpers.get_distance", "helpers.get_distance", "in_out_distribution_training.InOutDistributionTraining.__init__"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.helpers.get_distance", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.helpers.get_distance", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models_32x32.shake_pyramidnet.ShakePyramidNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "model", ",", "id_attack_config", ",", "od_attack_config", ",", "optimizer_config", ",", "epochs", ",", "device", ",", "num_classes", ",", "\n", "trades_weight", "=", "1", ",", "lr_scheduler_config", "=", "None", ",", "\n", "acet_obj", "=", "'kl'", ",", "od_weight", "=", "1.", ",", "model_config", "=", "None", ",", "\n", "test_epochs", "=", "1", ",", "verbose", "=", "100", ",", "saved_model_dir", "=", "'SavedModels'", ",", "saved_log_dir", "=", "'Logs'", ")", ":", "\n", "\n", "        ", "id_distance", "=", "get_distance", "(", "id_attack_config", "[", "'norm'", "]", ")", "\n", "od_distance", "=", "get_distance", "(", "od_attack_config", "[", "'norm'", "]", ")", "\n", "\n", "\n", "super", "(", ")", ".", "__init__", "(", "'TRADESACET'", ",", "model", ",", "id_distance", ",", "od_distance", ",", "optimizer_config", ",", "epochs", ",", "device", ",", "num_classes", ",", "\n", "train_clean", "=", "False", ",", "id_trades", "=", "True", ",", "id_weight", "=", "0.5", ",", "clean_weight", "=", "1.0", ",", "id_adv_weight", "=", "trades_weight", ",", "\n", "od_trades", "=", "False", ",", "od_weight", "=", "0.5", "*", "od_weight", ",", "od_clean_weight", "=", "0.0", ",", "od_adv_weight", "=", "1.0", ",", "\n", "lr_scheduler_config", "=", "lr_scheduler_config", ",", "\n", "model_config", "=", "model_config", ",", "test_epochs", "=", "test_epochs", ",", "\n", "verbose", "=", "verbose", ",", "saved_model_dir", "=", "saved_model_dir", ",", "saved_log_dir", "=", "saved_log_dir", ")", "\n", "\n", "#Trades", "\n", "self", ".", "id_attack_config", "=", "id_attack_config", "\n", "\n", "#od", "\n", "self", ".", "od_attack_config", "=", "od_attack_config", "\n", "self", ".", "acet_obj", "=", "acet_obj", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.TRADESACET_training.TRADESACETTraining.requires_out_distribution": [[42, 44], ["None"], "methods", ["None"], ["", "def", "requires_out_distribution", "(", "self", ")", ":", "\n", "        ", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.TRADESACET_training.TRADESACETTraining.create_loaders_dict": [[45, 58], ["None"], "methods", ["None"], ["", "def", "create_loaders_dict", "(", "self", ",", "train_loader", ",", "test_loader", "=", "None", ",", "out_distribution_loader", "=", "None", ",", "out_distribution_test_loader", "=", "None", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "train_loaders", "=", "{", "\n", "'train_loader'", ":", "train_loader", ",", "\n", "'out_distribution_loader'", ":", "out_distribution_loader", "\n", "}", "\n", "\n", "test_loaders", "=", "{", "}", "\n", "if", "test_loader", "is", "not", "None", ":", "\n", "            ", "test_loaders", "[", "'test_loader'", "]", "=", "test_loader", "\n", "", "if", "out_distribution_test_loader", "is", "not", "None", ":", "\n", "            ", "test_loaders", "[", "'out_distribution_test_loader'", "]", "=", "out_distribution_test_loader", "\n", "\n", "", "return", "train_loaders", ",", "test_loaders", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.TRADESACET_training.TRADESACETTraining._validate_loaders": [[59, 64], ["ValueError", "ValueError"], "methods", ["None"], ["", "def", "_validate_loaders", "(", "self", ",", "train_loaders", ",", "test_loaders", ")", ":", "\n", "        ", "if", "not", "'train_loader'", "in", "train_loaders", ":", "\n", "            ", "raise", "ValueError", "(", "'Train loader not given'", ")", "\n", "", "if", "not", "'out_distribution_loader'", "in", "train_loaders", ":", "\n", "            ", "raise", "ValueError", "(", "'Out distribution loader is required for out distribution training'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.TRADESACET_training.TRADESACETTraining._get_id_criterion": [[65, 68], ["TRADES_training.TRADESLoss"], "methods", ["None"], ["", "", "def", "_get_id_criterion", "(", "self", ",", "epoch", ",", "model", ",", "name_prefix", "=", "'ID'", ")", ":", "\n", "        ", "trades_reg", "=", "TRADESLoss", "(", "model", ",", "epoch", ",", "self", ".", "id_attack_config", ",", "self", ".", "classes", ",", "log_stats", "=", "True", ",", "name_prefix", "=", "name_prefix", ")", "\n", "return", "trades_reg", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.TRADESACET_training.TRADESACETTraining._get_od_clean_criterion": [[69, 72], ["None"], "methods", ["None"], ["", "def", "_get_od_clean_criterion", "(", "self", ",", "epoch", ",", "model", ",", "name_prefix", "=", "'OD'", ")", ":", "\n", "        ", "od_clean_criterion", "=", "None", "\n", "return", "od_clean_criterion", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.TRADESACET_training.TRADESACETTraining._get_od_criterion": [[73, 77], ["ACET_training.ACETObjective"], "methods", ["None"], ["", "def", "_get_od_criterion", "(", "self", ",", "epoch", ",", "model", ",", "name_prefix", "=", "'OD'", ")", ":", "\n", "        ", "od_criterion", "=", "ACETObjective", "(", "model", ",", "epoch", ",", "self", ".", "od_attack_config", ",", "self", ".", "acet_obj", ",", "self", ".", "acet_obj", ",", "\n", "self", ".", "classes", ",", "log_stats", "=", "True", ",", "name_prefix", "=", "name_prefix", ")", "\n", "return", "od_criterion", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.TRADESACET_training.TRADESACETTraining._get_TRADESACET_config": [[78, 88], ["None"], "methods", ["None"], ["", "def", "_get_TRADESACET_config", "(", "self", ")", ":", "\n", "        ", "config_dict", "=", "{", "}", "\n", "config_dict", "[", "'ID Weight'", "]", "=", "self", ".", "id_weight", "\n", "config_dict", "[", "'Clean Weight'", "]", "=", "self", ".", "clean_weight", "\n", "config_dict", "[", "'Trades Weight'", "]", "=", "self", ".", "id_adv_weight", "\n", "\n", "config_dict", "[", "'OD Weight'", "]", "=", "self", ".", "od_weight", "\n", "config_dict", "[", "'OD ACET Weight'", "]", "=", "self", ".", "od_adv_weight", "\n", "config_dict", "[", "'OD ACET Objective'", "]", "=", "self", ".", "acet_obj", "\n", "return", "config_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.TRADESACET_training.TRADESACETTraining._get_train_type_config": [[89, 105], ["TRADESACET_training.TRADESACETTraining._get_base_config", "TRADESACET_training.TRADESACETTraining._get_TRADESACET_config"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_type.TrainType._get_base_config", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.TRADESCEDA_training.TRADESCEDATraining._get_TRADESACET_config"], ["", "def", "_get_train_type_config", "(", "self", ",", "loader_config", "=", "None", ")", ":", "\n", "        ", "base_config", "=", "self", ".", "_get_base_config", "(", ")", "\n", "tradesacet_config", "=", "self", ".", "_get_TRADESACET_config", "(", ")", "\n", "configs", "=", "{", "}", "\n", "configs", "[", "'Base'", "]", "=", "base_config", "\n", "configs", "[", "'TRADESACET'", "]", "=", "tradesacet_config", "\n", "configs", "[", "'ID Attack'", "]", "=", "self", ".", "id_attack_config", "\n", "configs", "[", "'OD Attack'", "]", "=", "self", ".", "od_attack_config", "\n", "configs", "[", "'Optimizer'", "]", "=", "self", ".", "optimizer_config", "\n", "configs", "[", "'Scheduler'", "]", "=", "self", ".", "lr_scheduler_config", "\n", "\n", "configs", "[", "'Data Loader'", "]", "=", "loader_config", "\n", "configs", "[", "'MSDA'", "]", "=", "self", ".", "msda_config", "\n", "configs", "[", "'Model'", "]", "=", "self", ".", "model_config", "\n", "\n", "return", "configs", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.in_out_distribution_training.InOutDistributionTraining.__init__": [[17, 40], ["out_distribution_training.OutDistributionTraining.__init__"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models_32x32.shake_pyramidnet.ShakePyramidNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "name", ",", "model", ",", "id_distance", ",", "od_distance", ",", "optimizer_config", ",", "epochs", ",", "device", ",", "num_classes", ",", "\n", "train_clean", "=", "True", ",", "id_trades", "=", "False", ",", "id_weight", "=", "1.0", ",", "clean_weight", "=", "1.0", ",", "id_adv_weight", "=", "1.0", ",", "\n", "od_trades", "=", "False", ",", "od_weight", "=", "1.0", ",", "od_clean_weight", "=", "1.0", ",", "od_adv_weight", "=", "1.0", ",", "\n", "lr_scheduler_config", "=", "None", ",", "model_config", "=", "None", ",", "test_epochs", "=", "1", ",", "verbose", "=", "100", ",", "saved_model_dir", "=", "'SavedModels'", ",", "\n", "saved_log_dir", "=", "'Logs'", ")", ":", "\n", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "name", ",", "model", ",", "od_distance", ",", "optimizer_config", ",", "epochs", ",", "device", ",", "num_classes", ",", "\n", "lr_scheduler_config", "=", "lr_scheduler_config", ",", "model_config", "=", "model_config", ",", "od_weight", "=", "od_weight", ",", "\n", "test_epochs", "=", "test_epochs", ",", "verbose", "=", "verbose", ",", "saved_model_dir", "=", "saved_model_dir", ",", "\n", "saved_log_dir", "=", "saved_log_dir", ")", "\n", "\n", "#ID attributes", "\n", "self", ".", "train_clean", "=", "train_clean", "\n", "self", ".", "id_trades", "=", "id_trades", "\n", "self", ".", "id_weight", "=", "id_weight", "\n", "self", ".", "clean_weight", "=", "clean_weight", "\n", "self", ".", "id_adv_weight", "=", "id_adv_weight", "\n", "self", ".", "id_distance", "=", "id_distance", "\n", "\n", "#OD attribute", "\n", "self", ".", "od_trades", "=", "od_trades", "\n", "self", ".", "od_clean_weight", "=", "od_clean_weight", "\n", "self", ".", "od_adv_weight", "=", "od_adv_weight", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.in_out_distribution_training.InOutDistributionTraining._get_id_criterion": [[41, 43], ["NotImplementedError"], "methods", ["None"], ["", "def", "_get_id_criterion", "(", "self", ",", "epoch", ",", "model", ",", "name_prefix", "=", "'ID'", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.in_out_distribution_training.InOutDistributionTraining._get_od_clean_criterion": [[44, 46], ["NotImplementedError"], "methods", ["None"], ["", "def", "_get_od_clean_criterion", "(", "self", ",", "epoch", ",", "model", ",", "name_prefix", "=", "'OD'", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.in_out_distribution_training.InOutDistributionTraining._get_id_accuracy_conf_logger": [[47, 49], ["train_loss.AccuracyConfidenceLogger"], "methods", ["None"], ["", "def", "_get_id_accuracy_conf_logger", "(", "self", ",", "name_prefix", ")", ":", "\n", "        ", "return", "AccuracyConfidenceLogger", "(", "name_prefix", "=", "name_prefix", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.in_out_distribution_training.InOutDistributionTraining.test": [[50, 86], ["model.eval", "in_distribution_training.InDistributionTraining._inner_test", "enumerate", "in_distribution_training.InDistributionTraining._inner_test"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models.ebm_wrn.gradient_attack_wrapper.eval", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.in_distribution_training.InDistributionTraining._inner_test", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.in_distribution_training.InDistributionTraining._inner_test"], ["", "def", "test", "(", "self", ",", "test_loaders", ",", "epoch", ",", "test_avg_model", "=", "False", ")", ":", "\n", "        ", "if", "test_avg_model", ":", "\n", "            ", "model", "=", "self", ".", "avg_model", "\n", "", "else", ":", "\n", "            ", "model", "=", "self", ".", "model", "\n", "\n", "", "model", ".", "eval", "(", ")", "\n", "\n", "new_best", "=", "False", "\n", "if", "test_avg_model", ":", "\n", "            ", "avg_prefix", "=", "'AVG_'", "\n", "best_acc", "=", "self", ".", "best_avg_model_accuracy", "\n", "", "else", ":", "\n", "            ", "avg_prefix", "=", "''", "\n", "best_acc", "=", "self", ".", "best_accuracy", "\n", "\n", "", "if", "'test_loader'", "in", "test_loaders", ":", "\n", "\n", "            ", "test_loader", "=", "test_loaders", "[", "'test_loader'", "]", "\n", "id_acc", "=", "InDistributionTraining", ".", "_inner_test", "(", "self", ",", "model", ",", "test_loader", ",", "\n", "epoch", ",", "prefix", "=", "f'{avg_prefix}Clean'", ",", "id_prefix", "=", "f'{avg_prefix}ID'", ")", "\n", "if", "id_acc", ">", "best_acc", ":", "\n", "                ", "new_best", "=", "True", "\n", "if", "test_avg_model", ":", "\n", "                    ", "self", ".", "best_avg_model_accuracy", "=", "id_acc", "\n", "", "else", ":", "\n", "                    ", "self", ".", "best_accuracy", "=", "id_acc", "\n", "\n", "", "", "", "if", "'extra_test_loaders'", "in", "test_loaders", ":", "\n", "            ", "for", "i", ",", "test_loader", "in", "enumerate", "(", "test_loaders", "[", "'extra_test_loaders'", "]", ")", ":", "\n", "                ", "prefix", "=", "f'{avg_prefix}CleanExtra{i}'", "\n", "id_prefix", "=", "f'{avg_prefix}IDExtra{i}'", "\n", "InDistributionTraining", ".", "_inner_test", "(", "self", ",", "model", ",", "test_loader", ",", "epoch", ",", "\n", "prefix", "=", "prefix", ",", "id_prefix", "=", "id_prefix", ")", "\n", "\n", "", "", "return", "new_best", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.in_out_distribution_training.InOutDistributionTraining._forward": [[88, 112], ["helpers.interleave_forward", "data_list.append", "idcs.append", "idcs.append", "out_list.append", "out_list.append"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.helpers.interleave_forward"], ["", "def", "_forward", "(", "self", ",", "model", ",", "clean_data", ",", "id_data", ",", "clean_od_data", ",", "od_data", ")", ":", "\n", "        ", "data_list", "=", "[", "]", "\n", "data_order", "=", "[", "clean_data", ",", "id_data", ",", "clean_od_data", ",", "od_data", "]", "\n", "idcs", "=", "[", "]", "\n", "idx", "=", "0", "\n", "\n", "for", "data", "in", "data_order", ":", "\n", "            ", "if", "data", "is", "not", "None", ":", "\n", "                ", "data_list", ".", "append", "(", "data", ")", "\n", "idcs", ".", "append", "(", "idx", ")", "\n", "idx", "+=", "1", "\n", "", "else", ":", "\n", "                ", "idcs", ".", "append", "(", "-", "1", ")", "\n", "\n", "", "", "outs", "=", "interleave_forward", "(", "model", ",", "data_list", ")", "\n", "\n", "out_list", "=", "[", "]", "\n", "for", "idx", "in", "idcs", ":", "\n", "            ", "if", "idx", "==", "-", "1", ":", "\n", "                ", "out_list", ".", "append", "(", "None", ")", "\n", "", "else", ":", "\n", "                ", "out_list", ".", "append", "(", "outs", "[", "idx", "]", ")", "\n", "\n", "", "", "return", "out_list", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.in_out_distribution_training.InOutDistributionTraining.__get_loss_closure": [[113, 174], ["in_out_distribution_training.InOutDistributionTraining._forward", "id_train_criterion", "od_train_criterion", "clean_loss", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "od_clean_loss", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "total_loss_logger.log", "lr_logger.log", "acc_conf_id", "distance_id", "confidence_od", "distance_od", "acc_conf_clean", "in_out_distribution_training.InOutDistributionTraining.scheduler.get_last_lr"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.in_out_distribution_training.InOutDistributionTraining._forward", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_loss.DistanceLogger.log", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_loss.DistanceLogger.log", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.schedulers.scheduler.Scheduler.get_last_lr"], ["", "def", "__get_loss_closure", "(", "self", ",", "clean_data", ",", "clean_target", ",", "id_adv_samples", ",", "id_data", ",", "id_target", ",", "\n", "clean_od_data", ",", "clean_od_target", ",", "od_adv_samples", ",", "od_data", ",", "od_target", ",", "\n", "clean_loss", ",", "id_train_criterion", ",", "od_clean_loss", ",", "od_train_criterion", ",", "\n", "total_loss_logger", "=", "None", ",", "\n", "lr_logger", "=", "None", ",", "\n", "acc_conf_clean", "=", "None", ",", "\n", "acc_conf_id", "=", "None", ",", "\n", "distance_id", "=", "None", ",", "\n", "confidence_od", "=", "None", ",", "\n", "distance_od", "=", "None", ")", ":", "\n", "\n", "        ", "def", "loss_closure", "(", "log", "=", "False", ")", ":", "\n", "            ", "clean_out", ",", "id_adv_out", ",", "od_clean_out", ",", "od_adv_out", "=", "self", ".", "_forward", "(", "self", ".", "model", ",", "clean_data", ",", "id_adv_samples", ",", "clean_od_data", ",", "od_adv_samples", ")", "\n", "\n", "# clean loss for clean adv training and trades", "\n", "if", "self", ".", "train_clean", "or", "self", ".", "id_trades", ":", "\n", "                ", "loss0", "=", "clean_loss", "(", "clean_data", ",", "clean_out", ",", "clean_data", ",", "clean_target", ")", "\n", "", "else", ":", "\n", "                ", "loss0", "=", "torch", ".", "tensor", "(", "0.0", ",", "device", "=", "self", ".", "device", ")", "\n", "\n", "", "if", "self", ".", "id_trades", ":", "\n", "                ", "id_hard_label", "=", "clean_target", "\n", "id_tar", "=", "F", ".", "softmax", "(", "clean_out", ",", "dim", "=", "1", ")", "\n", "", "else", ":", "\n", "                ", "id_hard_label", "=", "id_target", "\n", "id_tar", "=", "id_target", "\n", "\n", "# adversarial loss / trades regularizer", "\n", "", "loss1", "=", "id_train_criterion", "(", "id_adv_samples", ",", "id_adv_out", ",", "id_data", ",", "id_tar", ")", "\n", "\n", "# od clean loss for od trades", "\n", "if", "self", ".", "od_trades", ":", "\n", "                ", "od_tar", "=", "F", ".", "softmax", "(", "od_clean_out", ",", "dim", "=", "1", ")", "\n", "loss2", "=", "od_clean_loss", "(", "clean_od_data", ",", "od_clean_out", ",", "clean_od_data", ",", "clean_od_target", ")", "\n", "", "else", ":", "\n", "                ", "od_tar", "=", "od_target", "\n", "loss2", "=", "torch", ".", "tensor", "(", "0.0", ",", "device", "=", "self", ".", "device", ")", "\n", "\n", "# od acet loss / trades regularizer", "\n", "", "loss3", "=", "od_train_criterion", "(", "od_adv_samples", ",", "od_adv_out", ",", "od_data", ",", "od_tar", ")", "\n", "\n", "loss", "=", "self", ".", "id_weight", "*", "(", "self", ".", "clean_weight", "*", "loss0", "+", "self", ".", "id_adv_weight", "*", "loss1", ")", "\n", "loss", "+=", "self", ".", "od_weight", "*", "(", "self", ".", "od_clean_weight", "*", "loss2", "+", "self", ".", "od_adv_weight", "*", "loss3", ")", "\n", "\n", "if", "log", ":", "\n", "                ", "total_loss_logger", ".", "log", "(", "loss", ")", "\n", "lr_logger", ".", "log", "(", "self", ".", "scheduler", ".", "get_last_lr", "(", ")", "[", "0", "]", ")", "\n", "\n", "# log", "\n", "if", "self", ".", "train_clean", "or", "self", ".", "id_trades", ":", "\n", "                    ", "acc_conf_clean", "(", "clean_data", ",", "clean_out", ",", "clean_data", ",", "clean_target", ")", "\n", "\n", "", "acc_conf_id", "(", "id_adv_samples", ",", "id_adv_out", ",", "id_data", ",", "id_hard_label", ")", "\n", "distance_id", "(", "id_adv_samples", ",", "id_adv_out", ",", "id_data", ",", "id_hard_label", ")", "\n", "\n", "confidence_od", "(", "od_adv_samples", ",", "od_adv_out", ",", "od_data", ",", "od_target", ")", "\n", "distance_od", "(", "od_adv_samples", ",", "od_adv_out", ",", "od_data", ",", "od_target", ")", "\n", "\n", "", "return", "loss", "\n", "", "return", "loss_closure", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.in_out_distribution_training.InOutDistributionTraining._inner_train": [[175, 283], ["in_out_distribution_training.InOutDistributionTraining.model.train", "in_out_distribution_training.InOutDistributionTraining._get_dataloader_length", "iter", "in_out_distribution_training.InOutDistributionTraining._get_loader_batchsize", "in_out_distribution_training.InOutDistributionTraining._get_loader_batchsize", "in_out_distribution_training.InOutDistributionTraining._get_clean_criterion", "in_out_distribution_training.InOutDistributionTraining._get_id_criterion", "in_out_distribution_training.InOutDistributionTraining._get_od_clean_criterion", "in_out_distribution_training.InOutDistributionTraining._get_od_criterion", "in_out_distribution_training.InOutDistributionTraining._get_clean_accuracy_conf_logger", "in_out_distribution_training.InOutDistributionTraining._get_id_accuracy_conf_logger", "train_loss.DistanceLogger", "in_out_distribution_training.InOutDistributionTraining._get_od_conf_logger", "train_loss.DistanceLogger", "train_loss.SingleValueLogger", "train_loss.SingleValueLogger", "in_out_distribution_training.InOutDistributionTraining.output_backend.start_epoch_log", "enumerate", "in_out_distribution_training.InOutDistributionTraining._update_scheduler", "in_out_distribution_training.InOutDistributionTraining.output_backend.end_epoch_write_summary", "iter", "AssertionError", "in_out_distribution_training.InOutDistributionTraining.inner_max", "in_out_distribution_training.InOutDistributionTraining.inner_max", "in_out_distribution_training.InOutDistributionTraining._update_scheduler", "in_out_distribution_training.InOutDistributionTraining.output_backend.log_batch_summary", "id_data.to", "id_target.to", "next", "od_data.to", "od_target.to", "id_data.detach().clone", "id_target.detach().clone", "torch.autocast", "torch.autocast", "torch.autocast", "torch.autocast", "torch.autocast", "in_out_distribution_training.InOutDistributionTraining.__get_loss_closure", "in_out_distribution_training.InOutDistributionTraining._loss_step", "in_out_distribution_training.InOutDistributionTraining._update_avg_model", "next", "id_data.detach().clone", "id_target.detach().clone", "iter", "next", "id_data.detach().clone.to", "id_target.detach().clone.to", "id_data.detach", "id_target.detach", "id_data.detach", "id_target.detach"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_type.TrainType.train", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_type.TrainType._get_dataloader_length", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_type.TrainType._get_loader_batchsize", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_type.TrainType._get_loader_batchsize", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_type.TrainType._get_clean_criterion", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.TRADESCEDA_training.TRADESCEDATraining._get_id_criterion", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.TRADESCEDA_training.TRADESCEDATraining._get_od_clean_criterion", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.TRADESCEDA_training.TRADESCEDATraining._get_od_criterion", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_type.TrainType._get_clean_accuracy_conf_logger", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.in_out_distribution_training.InOutDistributionTraining._get_id_accuracy_conf_logger", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.out_distribution_training.OutDistributionTraining._get_od_conf_logger", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.output_backend.OutputBackend.start_epoch_log", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_type.TrainType._update_scheduler", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.output_backend.OutputBackend.end_epoch_write_summary", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.msda.mixup.MixupLoss.inner_max", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.msda.mixup.MixupLoss.inner_max", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_type.TrainType._update_scheduler", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.output_backend.OutputBackend.log_batch_summary", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.in_out_distribution_training.InOutDistributionTraining.__get_loss_closure", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_type.TrainType._loss_step", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_type.TrainType._update_avg_model"], ["", "def", "_inner_train", "(", "self", ",", "train_loaders", ",", "epoch", ",", "log_epoch", "=", "None", ")", ":", "\n", "        ", "train_loader", "=", "train_loaders", "[", "'train_loader'", "]", "\n", "out_distribution_loader", "=", "train_loaders", "[", "'out_distribution_loader'", "]", "\n", "self", ".", "model", ".", "train", "(", ")", "\n", "\n", "train_set_batches", "=", "self", ".", "_get_dataloader_length", "(", "train_loader", ",", "out_distribution_loader", "=", "out_distribution_loader", ")", "\n", "\n", "# https: // github.com / pytorch / pytorch / issues / 1917  # issuecomment-433698337", "\n", "id_iterator", "=", "iter", "(", "train_loader", ")", "\n", "if", "self", ".", "od_iterator", "is", "None", ":", "\n", "            ", "self", ".", "od_iterator", "=", "iter", "(", "out_distribution_loader", ")", "\n", "\n", "", "bs", "=", "self", ".", "_get_loader_batchsize", "(", "train_loader", ")", "\n", "od_bs", "=", "self", ".", "_get_loader_batchsize", "(", "out_distribution_loader", ")", "\n", "if", "od_bs", "!=", "bs", ":", "\n", "            ", "raise", "AssertionError", "(", "'Out distribution and in distribution cifar_loader need to have the same batchsize'", ")", "\n", "\n", "", "clean_loss", "=", "self", ".", "_get_clean_criterion", "(", "name_prefix", "=", "'Clean'", ")", "\n", "id_train_criterion", "=", "self", ".", "_get_id_criterion", "(", "epoch", ",", "self", ".", "model", ",", "name_prefix", "=", "'ID'", ")", "\n", "od_clean_loss", "=", "self", ".", "_get_od_clean_criterion", "(", "epoch", ",", "self", ".", "model", ",", "name_prefix", "=", "'OD'", ")", "\n", "od_train_criterion", "=", "self", ".", "_get_od_criterion", "(", "epoch", ",", "self", ".", "model", ",", "name_prefix", "=", "'OD'", ")", "\n", "losses", "=", "[", "clean_loss", ",", "id_train_criterion", ",", "od_clean_loss", ",", "od_train_criterion", "]", "\n", "\n", "acc_conf_clean", "=", "self", ".", "_get_clean_accuracy_conf_logger", "(", "name_prefix", "=", "'Clean'", ")", "\n", "acc_conf_id", "=", "self", ".", "_get_id_accuracy_conf_logger", "(", "name_prefix", "=", "'ID'", ")", "\n", "distance_id", "=", "DistanceLogger", "(", "self", ".", "id_distance", ",", "name_prefix", "=", "'ID'", ")", "\n", "\n", "confidence_od", "=", "self", ".", "_get_od_conf_logger", "(", "name_prefix", "=", "'OD'", ")", "\n", "distance_od", "=", "DistanceLogger", "(", "self", ".", "od_distance", ",", "name_prefix", "=", "'OD'", ")", "\n", "total_loss_logger", "=", "SingleValueLogger", "(", "'Loss'", ")", "\n", "lr_logger", "=", "SingleValueLogger", "(", "'LR'", ")", "\n", "loggers", "=", "[", "total_loss_logger", ",", "acc_conf_id", ",", "distance_id", ",", "acc_conf_clean", ",", "confidence_od", ",", "distance_od", ",", "lr_logger", "]", "\n", "\n", "self", ".", "output_backend", ".", "start_epoch_log", "(", "train_set_batches", ")", "\n", "\n", "for", "batch_idx", ",", "(", "id_data", ",", "id_target", ")", "in", "enumerate", "(", "id_iterator", ")", ":", "\n", "#sample clean ref_data", "\n", "\n", "            ", "id_data", ",", "id_target", "=", "id_data", ".", "to", "(", "self", ".", "device", ")", ",", "id_target", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "if", "self", ".", "train_clean", ":", "\n", "#if train clean, sample new clean data", "\n", "                ", "try", ":", "\n", "                    ", "clean_data", ",", "clean_target", "=", "next", "(", "id_iterator", ")", "\n", "clean_data", ",", "clean_target", "=", "clean_data", ".", "to", "(", "self", ".", "device", ")", ",", "clean_target", ".", "to", "(", "self", ".", "device", ")", "\n", "", "except", "StopIteration", ":", "\n", "                    ", "break", "\n", "", "", "elif", "self", ".", "id_trades", ":", "\n", "#if id trades, repeat clean data for trades regularizer", "\n", "                ", "clean_data", "=", "id_data", ".", "detach", "(", ")", ".", "clone", "(", ")", "\n", "clean_target", "=", "id_target", ".", "detach", "(", ")", ".", "clone", "(", ")", "\n", "", "else", ":", "\n", "#else, no clean data needed", "\n", "                ", "clean_data", "=", "None", "\n", "clean_target", "=", "None", "\n", "\n", "#sample od ref_data", "\n", "", "try", ":", "\n", "                ", "od_data", ",", "od_target", "=", "next", "(", "self", ".", "od_iterator", ")", "\n", "", "except", "StopIteration", ":", "\n", "#when od iterator runs out, jsut start from beginning", "\n", "                ", "self", ".", "od_iterator", "=", "iter", "(", "out_distribution_loader", ")", "\n", "od_data", ",", "od_target", "=", "next", "(", "self", ".", "od_iterator", ")", "\n", "\n", "", "od_data", ",", "od_target", "=", "od_data", ".", "to", "(", "self", ".", "device", ")", ",", "od_target", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "if", "self", ".", "od_trades", ":", "\n", "#if od trades, repeat od data for trades od regularizer", "\n", "                ", "clean_od_data", "=", "id_data", ".", "detach", "(", ")", ".", "clone", "(", ")", "\n", "clean_od_target", "=", "id_target", ".", "detach", "(", ")", ".", "clone", "(", ")", "\n", "", "else", ":", "\n", "#else, no clean od data needed", "\n", "                ", "clean_od_data", "=", "None", "\n", "clean_od_target", "=", "None", "\n", "\n", "", "if", "(", "id_data", ".", "shape", "[", "0", "]", "<", "bs", ")", "or", "(", "od_data", ".", "shape", "[", "0", "]", "<", "bs", ")", "or", "(", "self", ".", "train_clean", "and", "clean_data", ".", "shape", "[", "0", "]", "<", "bs", ")", ":", "\n", "                ", "continue", "\n", "\n", "#id_attack", "\n", "", "id_adv_samples", "=", "id_train_criterion", ".", "inner_max", "(", "id_data", ",", "id_target", ")", "\n", "\n", "#od attack", "\n", "od_adv_samples", "=", "od_train_criterion", ".", "inner_max", "(", "od_data", ",", "od_target", ")", "\n", "\n", "with", "amp", ".", "autocast", "(", "enabled", "=", "self", ".", "mixed_precision", ")", ":", "\n", "                ", "loss_closure", "=", "self", ".", "__get_loss_closure", "(", "clean_data", ",", "clean_target", ",", "id_adv_samples", ",", "id_data", ",", "id_target", ",", "\n", "clean_od_data", ",", "clean_od_target", ",", "od_adv_samples", ",", "od_data", ",", "od_target", ",", "\n", "clean_loss", ",", "id_train_criterion", ",", "od_clean_loss", ",", "od_train_criterion", ",", "\n", "total_loss_logger", "=", "total_loss_logger", ",", "\n", "lr_logger", "=", "lr_logger", ",", "\n", "acc_conf_clean", "=", "acc_conf_clean", ",", "\n", "acc_conf_id", "=", "acc_conf_id", ",", "\n", "distance_id", "=", "distance_id", ",", "\n", "confidence_od", "=", "confidence_od", ",", "\n", "distance_od", "=", "distance_od", ")", "\n", "\n", "\n", "self", ".", "_loss_step", "(", "loss_closure", ")", "\n", "\n", "#ema", "\n", "", "if", "self", ".", "ema", ":", "\n", "                ", "self", ".", "_update_avg_model", "(", ")", "\n", "\n", "", "self", ".", "_update_scheduler", "(", "epoch", "+", "(", "batch_idx", "+", "1", ")", "/", "train_set_batches", ")", "\n", "self", ".", "output_backend", ".", "log_batch_summary", "(", "epoch", ",", "batch_idx", ",", "True", ",", "losses", "=", "losses", ",", "loggers", "=", "loggers", ")", "\n", "\n", "", "self", ".", "_update_scheduler", "(", "epoch", "+", "1", ")", "\n", "self", ".", "output_backend", ".", "end_epoch_write_summary", "(", "losses", ",", "loggers", ",", "epoch", ",", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.in_out_distribution_training.InOutDistributionTraining._update_avg_model_batch_norm": [[284, 358], ["iter", "in_out_distribution_training.InOutDistributionTraining._get_clean_criterion", "in_out_distribution_training.InOutDistributionTraining._get_id_criterion", "in_out_distribution_training.InOutDistributionTraining._get_od_clean_criterion", "in_out_distribution_training.InOutDistributionTraining._get_od_criterion", "in_out_distribution_training.InOutDistributionTraining._get_loader_batchsize", "in_out_distribution_training.InOutDistributionTraining._get_loader_batchsize", "in_out_distribution_training.InOutDistributionTraining.avg_model.train", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "enumerate", "in_out_distribution_training.InOutDistributionTraining.inner_max", "in_out_distribution_training.InOutDistributionTraining.inner_max", "id_data.to", "id_target.to", "next", "id_data.detach().clone", "id_target.detach().clone", "od_data.to", "od_target.to", "torch.autocast", "torch.autocast", "torch.autocast", "torch.autocast", "torch.autocast", "in_out_distribution_training.InOutDistributionTraining.__get_loss_closure", "in_out_distribution_training.InOutDistributionTraining.", "next", "id_data.detach().clone", "id_target.detach().clone", "iter", "next", "id_data.detach().clone.to", "id_target.detach().clone.to", "id_data.detach", "id_target.detach", "id_data.detach", "id_target.detach"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_type.TrainType._get_clean_criterion", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.TRADESCEDA_training.TRADESCEDATraining._get_id_criterion", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.TRADESCEDA_training.TRADESCEDATraining._get_od_clean_criterion", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.TRADESCEDA_training.TRADESCEDATraining._get_od_criterion", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_type.TrainType._get_loader_batchsize", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_type.TrainType._get_loader_batchsize", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_type.TrainType.train", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.msda.mixup.MixupLoss.inner_max", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.msda.mixup.MixupLoss.inner_max", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.in_out_distribution_training.InOutDistributionTraining.__get_loss_closure"], ["", "def", "_update_avg_model_batch_norm", "(", "self", ",", "train_loaders", ")", ":", "\n", "        ", "train_loader", "=", "train_loaders", "[", "'train_loader'", "]", "\n", "out_distribution_loader", "=", "train_loaders", "[", "'out_distribution_loader'", "]", "\n", "\n", "id_iterator", "=", "iter", "(", "train_loader", ")", "\n", "\n", "clean_loss", "=", "self", ".", "_get_clean_criterion", "(", ")", "\n", "id_train_criterion", "=", "self", ".", "_get_id_criterion", "(", "0", ",", "self", ".", "avg_model", ")", "\n", "od_clean_loss", "=", "self", ".", "_get_od_clean_criterion", "(", "epoch", ",", "self", ".", "model", ",", "name_prefix", "=", "'OD'", ")", "\n", "od_train_criterion", "=", "self", ".", "_get_od_criterion", "(", "0", ",", "self", ".", "avg_model", ")", "\n", "bs", "=", "self", ".", "_get_loader_batchsize", "(", "train_loader", ")", "\n", "od_bs", "=", "self", ".", "_get_loader_batchsize", "(", "out_distribution_loader", ")", "\n", "\n", "self", ".", "avg_model", ".", "train", "(", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "batch_idx", ",", "(", "id_data", ",", "id_target", ")", "in", "enumerate", "(", "id_iterator", ")", ":", "\n", "# sample clean ref_data", "\n", "\n", "                ", "id_data", ",", "id_target", "=", "id_data", ".", "to", "(", "self", ".", "device", ")", ",", "id_target", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "if", "self", ".", "train_clean", ":", "\n", "# if train clean, sample new clean data", "\n", "                    ", "try", ":", "\n", "                        ", "clean_data", ",", "clean_target", "=", "next", "(", "id_iterator", ")", "\n", "clean_data", ",", "clean_target", "=", "clean_data", ".", "to", "(", "self", ".", "device", ")", ",", "clean_target", ".", "to", "(", "self", ".", "device", ")", "\n", "", "except", "StopIteration", ":", "\n", "                        ", "break", "\n", "", "", "elif", "self", ".", "id_trades", ":", "\n", "# if id trades, repeat clean data for trades regularizer", "\n", "                    ", "clean_data", "=", "id_data", ".", "detach", "(", ")", ".", "clone", "(", ")", "\n", "clean_target", "=", "id_target", ".", "detach", "(", ")", ".", "clone", "(", ")", "\n", "", "else", ":", "\n", "# else, no clean data needed", "\n", "                    ", "clean_data", "=", "None", "\n", "clean_target", "=", "None", "\n", "\n", "# sample od ref_data", "\n", "", "try", ":", "\n", "                    ", "od_data", ",", "od_target", "=", "next", "(", "self", ".", "od_iterator", ")", "\n", "", "except", "StopIteration", ":", "\n", "# when od iterator runs out, jsut start from beginning", "\n", "                    ", "self", ".", "od_iterator", "=", "iter", "(", "out_distribution_loader", ")", "\n", "od_data", ",", "od_target", "=", "next", "(", "self", ".", "od_iterator", ")", "\n", "\n", "", "if", "self", ".", "od_trades", ":", "\n", "# if od trades, repeat od data for trades od regularizer", "\n", "                    ", "clean_od_data", "=", "id_data", ".", "detach", "(", ")", ".", "clone", "(", ")", "\n", "clean_od_target", "=", "id_target", ".", "detach", "(", ")", ".", "clone", "(", ")", "\n", "", "else", ":", "\n", "# else, no clean od data needed", "\n", "                    ", "clean_od_data", "=", "None", "\n", "clean_od_target", "=", "None", "\n", "\n", "", "if", "(", "id_data", ".", "shape", "[", "0", "]", "<", "bs", ")", "or", "(", "od_data", ".", "shape", "[", "0", "]", "<", "od_bs", ")", "or", "(", "\n", "self", ".", "train_clean", "and", "clean_data", ".", "shape", "[", "0", "]", "<", "bs", ")", ":", "\n", "                    ", "continue", "\n", "\n", "", "od_data", ",", "od_target", "=", "od_data", ".", "to", "(", "self", ".", "device", ")", ",", "od_target", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "# id_attack", "\n", "id_adv_samples", "=", "id_train_criterion", ".", "inner_max", "(", "id_data", ",", "id_target", ")", "\n", "\n", "# od attack", "\n", "od_adv_samples", "=", "od_train_criterion", ".", "inner_max", "(", "od_data", ",", "od_target", ")", "\n", "\n", "with", "amp", ".", "autocast", "(", "enabled", "=", "self", ".", "mixed_precision", ")", ":", "\n", "                    ", "loss_closure", "=", "self", ".", "__get_loss_closure", "(", "clean_data", ",", "clean_target", ",", "id_adv_samples", ",", "id_data", ",", "id_target", ",", "\n", "clean_od_data", ",", "clean_od_target", ",", "od_adv_samples", ",", "od_data", ",", "\n", "od_target", ",", "\n", "clean_loss", ",", "id_train_criterion", ",", "od_clean_loss", ",", "\n", "od_train_criterion", ")", "\n", "\n", "loss_closure", "(", "log", "=", "False", ")", "\n", "", "", "", "", "", ""]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.plain_training.PlainTraining.__init__": [[7, 16], ["helpers.get_distance", "in_distribution_training.InDistributionTraining.__init__"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.helpers.get_distance", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models_32x32.shake_pyramidnet.ShakePyramidNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "model", ",", "optimizer_config", ",", "epochs", ",", "device", ",", "num_classes", ",", "clean_criterion", "=", "'ce'", ",", "\n", "lr_scheduler_config", "=", "None", ",", "msda_config", "=", "None", ",", "model_config", "=", "None", ",", "test_epochs", "=", "1", ",", "verbose", "=", "100", ",", "saved_model_dir", "=", "'SavedModels'", ",", "\n", "saved_log_dir", "=", "'Logs'", ")", ":", "\n", "        ", "distance", "=", "get_distance", "(", "'l2'", ")", "\n", "super", "(", ")", ".", "__init__", "(", "'plain'", ",", "model", ",", "distance", ",", "optimizer_config", ",", "epochs", ",", "device", ",", "num_classes", ",", "\n", "train_clean", "=", "False", ",", "id_trades", "=", "True", ",", "clean_weight", "=", "1.", ",", "id_adv_weight", "=", "0.", ",", "\n", "lr_scheduler_config", "=", "lr_scheduler_config", ",", "msda_config", "=", "msda_config", ",", "model_config", "=", "model_config", ",", "\n", "test_epochs", "=", "test_epochs", ",", "clean_criterion", "=", "clean_criterion", ",", "\n", "verbose", "=", "verbose", ",", "saved_model_dir", "=", "saved_model_dir", ",", "saved_log_dir", "=", "saved_log_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.plain_training.PlainTraining._get_id_criterion": [[17, 20], ["train_loss.ZeroLoss"], "methods", ["None"], ["", "def", "_get_id_criterion", "(", "self", ",", "epoch", ",", "model", ",", "name_prefix", "=", "'ID'", ")", ":", "\n", "        ", "id_train_criterion", "=", "ZeroLoss", "(", ")", "\n", "return", "id_train_criterion", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.plain_training.PlainTraining._get_train_type_config": [[21, 36], ["plain_training.PlainTraining._get_base_config", "plain_training.PlainTraining._get_plain_config"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_type.TrainType._get_base_config", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.plain_training.PlainTraining._get_plain_config"], ["", "def", "_get_train_type_config", "(", "self", ",", "loader_config", "=", "None", ")", ":", "\n", "        ", "base_config", "=", "self", ".", "_get_base_config", "(", ")", "\n", "plain_config", "=", "self", ".", "_get_plain_config", "(", ")", "\n", "\n", "configs", "=", "{", "}", "\n", "configs", "[", "'Base'", "]", "=", "base_config", "\n", "configs", "[", "'Plain Training'", "]", "=", "plain_config", "\n", "configs", "[", "'Optimizer'", "]", "=", "self", ".", "optimizer_config", "\n", "configs", "[", "'Scheduler'", "]", "=", "self", ".", "lr_scheduler_config", "\n", "configs", "[", "'MSDA'", "]", "=", "self", ".", "msda_config", "\n", "configs", "[", "'Data Loader'", "]", "=", "loader_config", "\n", "configs", "[", "'Model'", "]", "=", "self", ".", "model_config", "\n", "\n", "\n", "return", "configs", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.plain_training.PlainTraining._get_plain_config": [[37, 41], ["None"], "methods", ["None"], ["", "def", "_get_plain_config", "(", "self", ")", ":", "\n", "        ", "config_dict", "=", "{", "}", "\n", "config_dict", "[", "'Clean Weight'", "]", "=", "self", ".", "clean_weight", "\n", "return", "config_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.output_backend.OutputBackend.__init__": [[12, 19], ["output_backend.OutputBackend._create_model_dirs", "torch.utils.tensorboard.SummaryWriter"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.output_backend.OutputBackend._create_model_dirs"], ["    ", "def", "__init__", "(", "self", ",", "base_model_dir", ",", "log_dir", ",", "type_description", ",", "print_output", "=", "True", ",", "batch_update_interval", "=", "10", ")", ":", "\n", "        ", "self", ".", "_create_model_dirs", "(", "base_model_dir", ",", "log_dir", ",", "type_description", ")", "\n", "self", ".", "writer", "=", "SummaryWriter", "(", "self", ".", "writer_dir", ")", "\n", "self", ".", "epoch_t_average", "=", "0", "\n", "self", ".", "epoch_t_N", "=", "0", "\n", "self", ".", "print_output", "=", "print_output", "\n", "self", ".", "batch_update_interval", "=", "batch_update_interval", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.output_backend.OutputBackend.close_backend": [[20, 23], ["output_backend.OutputBackend.writer.close", "output_backend.OutputBackend._finalize_model_dirs"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.output_backend.OutputBackend._finalize_model_dirs"], ["", "def", "close_backend", "(", "self", ")", ":", "\n", "        ", "self", ".", "writer", ".", "close", "(", ")", "\n", "self", ".", "_finalize_model_dirs", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.output_backend.OutputBackend.log_epoch_time": [[24, 32], ["output_backend.OutputBackend.writer.add_scalar", "print", "min"], "methods", ["None"], ["", "def", "log_epoch_time", "(", "self", ",", "epoch_t", ",", "epoch", ",", "total_epochs", ")", ":", "\n", "        ", "self", ".", "writer", ".", "add_scalar", "(", "'EpochTime'", ",", "epoch_t", ",", "epoch", ")", "\n", "self", ".", "epoch_t_average", "=", "self", ".", "epoch_t_average", "+", "(", "epoch_t", "-", "self", ".", "epoch_t_average", ")", "/", "min", "(", "self", ".", "epoch_t_N", "+", "1", ",", "5", ")", "\n", "self", ".", "epoch_t_N", "+=", "1", "\n", "\n", "if", "self", ".", "print_output", ":", "\n", "            ", "estimate_remaining_time", "=", "(", "total_epochs", "-", "epoch", "-", "1", ")", "*", "self", ".", "epoch_t_average", "\n", "print", "(", "f'Avg. epoch time {self.epoch_t_average:.3f}m - Remaining time {estimate_remaining_time:.3f}m'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.output_backend.OutputBackend._write_logs_inner": [[33, 47], ["output_backend.OutputBackend.writer.add_scalar", "output_backend.OutputBackend.writer.add_histogram", "ValueError"], "methods", ["None"], ["", "", "def", "_write_logs_inner", "(", "self", ",", "losses_logs", ",", "epoch", ",", "train", ",", "category", ")", ":", "\n", "        ", "if", "train", ":", "\n", "            ", "train_prefix", "=", "'Train'", "\n", "", "else", ":", "\n", "            ", "train_prefix", "=", "'Test'", "\n", "", "for", "log", "in", "losses_logs", ":", "\n", "            ", "tag", "=", "f'{train_prefix}/{category}/{log.name}'", "\n", "\n", "if", "log", ".", "type", "is", "LogType", ".", "SCALAR", ":", "\n", "                ", "self", ".", "writer", ".", "add_scalar", "(", "tag", ",", "log", ".", "value", ",", "epoch", ")", "\n", "", "elif", "log", ".", "type", "is", "LogType", ".", "HISTOGRAM", ":", "\n", "                ", "self", ".", "writer", ".", "add_histogram", "(", "tag", ",", "log", ".", "value", ",", "epoch", ")", "\n", "", "else", ":", "\n", "                ", "raise", "ValueError", "(", "f'{log.name} passed not supported type'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.output_backend.OutputBackend.write_losses": [[48, 55], ["output_backend.OutputBackend._write_logs_inner", "losses_logs_combined.extend", "loss.get_logs"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.output_backend.OutputBackend._write_logs_inner", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_loss.LossWrapper.get_logs"], ["", "", "", "def", "write_losses", "(", "self", ",", "losses", ",", "epoch", ",", "train", ")", ":", "\n", "        ", "losses_logs_combined", "=", "[", "]", "\n", "for", "loss", "in", "losses", ":", "\n", "            ", "if", "loss", "is", "not", "None", ":", "\n", "                ", "losses_logs_combined", ".", "extend", "(", "loss", ".", "get_logs", "(", ")", ")", "\n", "\n", "", "", "self", ".", "_write_logs_inner", "(", "losses_logs_combined", ",", "epoch", ",", "train", ",", "'Losses'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.output_backend.OutputBackend.write_loggers": [[56, 63], ["output_backend.OutputBackend._write_logs_inner", "logges_logs_combined.extend", "loss.get_logs"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.output_backend.OutputBackend._write_logs_inner", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_loss.LossWrapper.get_logs"], ["", "def", "write_loggers", "(", "self", ",", "loggers", ",", "epoch", ",", "train", ")", ":", "\n", "        ", "logges_logs_combined", "=", "[", "]", "\n", "for", "loss", "in", "loggers", ":", "\n", "            ", "if", "loss", "is", "not", "None", ":", "\n", "                ", "logges_logs_combined", ".", "extend", "(", "loss", ".", "get_logs", "(", ")", ")", "\n", "\n", "", "", "self", ".", "_write_logs_inner", "(", "logges_logs_combined", ",", "epoch", ",", "train", ",", "'Statistics'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.output_backend.OutputBackend.write_epoch_summary": [[65, 68], ["output_backend.OutputBackend.write_losses", "output_backend.OutputBackend.write_loggers"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.output_backend.OutputBackend.write_losses", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.output_backend.OutputBackend.write_loggers"], ["", "def", "write_epoch_summary", "(", "self", ",", "losses", ",", "loggers", ",", "epoch", ",", "train", ")", ":", "\n", "        ", "self", ".", "write_losses", "(", "losses", ",", "epoch", ",", "train", ")", "\n", "self", ".", "write_loggers", "(", "loggers", ",", "epoch", ",", "train", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.output_backend.OutputBackend.end_epoch_write_summary": [[70, 73], ["output_backend.OutputBackend.write_epoch_summary", "output_backend.OutputBackend.end_epoch_log"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.output_backend.OutputBackend.write_epoch_summary", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.output_backend.OutputBackend.end_epoch_log"], ["", "def", "end_epoch_write_summary", "(", "self", ",", "losses", ",", "loggers", ",", "epoch", ",", "train", ")", ":", "\n", "        ", "self", ".", "write_epoch_summary", "(", "losses", ",", "loggers", ",", "epoch", ",", "train", ")", "\n", "self", ".", "end_epoch_log", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.output_backend.OutputBackend.start_epoch_log": [[75, 77], ["tqdm.tqdm.tqdm"], "methods", ["None"], ["", "def", "start_epoch_log", "(", "self", ",", "total_batches", ")", ":", "\n", "        ", "self", ".", "pbar", "=", "tqdm", "(", "total", "=", "total_batches", ",", "bar_format", "=", "'{l_bar}{bar:5}{r_bar}{bar:-5b}'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.output_backend.OutputBackend.end_epoch_log": [[79, 82], ["output_backend.OutputBackend.pbar.update", "output_backend.OutputBackend.pbar.close"], "methods", ["None"], ["", "def", "end_epoch_log", "(", "self", ")", ":", "\n", "        ", "self", ".", "pbar", ".", "update", "(", "self", ".", "pbar", ".", "total", "-", "self", ".", "pbar", ".", "n", ")", "\n", "self", ".", "pbar", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.output_backend.OutputBackend.log_batch_summary": [[83, 112], ["output_backend.OutputBackend.pbar.set_postfix_str", "output_backend.OutputBackend.pbar.set_description_str", "output_backend.OutputBackend.pbar.update", "time.sleep", "time.sleep", "time.sleep", "time.sleep", "losses_loggers.extend", "losses_loggers.extend", "loss.get_logs"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_loss.LossWrapper.get_logs"], ["", "def", "log_batch_summary", "(", "self", ",", "epoch", ",", "batch_idx", ",", "train", ",", "losses", "=", "None", ",", "loggers", "=", "None", ")", ":", "\n", "        ", "if", "(", "batch_idx", "%", "self", ".", "batch_update_interval", ")", "==", "0", ":", "\n", "            ", "if", "train", ":", "\n", "                ", "pre_string", "=", "f'Train epoch {epoch}'", "\n", "", "else", ":", "\n", "                ", "pre_string", "=", "f'Test epoch {epoch}'", "\n", "\n", "", "post_string", "=", "''", "\n", "losses_loggers", "=", "[", "]", "\n", "if", "losses", "is", "not", "None", ":", "\n", "                ", "losses_loggers", ".", "extend", "(", "losses", ")", "\n", "", "if", "loggers", "is", "not", "None", ":", "\n", "                ", "losses_loggers", ".", "extend", "(", "loggers", ")", "\n", "\n", "", "for", "loss", "in", "losses_loggers", ":", "\n", "                ", "if", "loss", "is", "not", "None", ":", "\n", "                    ", "loss_logs", "=", "loss", ".", "get_logs", "(", ")", "\n", "for", "log", "in", "loss_logs", ":", "\n", "                        ", "if", "log", ".", "type", "is", "LogType", ".", "SCALAR", ":", "\n", "                            ", "post_string_add", "=", "f'{log.name:} {log.value:.4f} '", "\n", "post_string", "+=", "post_string_add", "\n", "", "else", ":", "\n", "#ignore non scalar logs", "\n", "                            ", "pass", "\n", "\n", "", "", "", "", "self", ".", "pbar", ".", "set_postfix_str", "(", "post_string", ")", "\n", "self", ".", "pbar", ".", "set_description_str", "(", "pre_string", ")", "\n", "self", ".", "pbar", ".", "update", "(", "n", "=", "batch_idx", "-", "self", ".", "pbar", ".", "n", ")", "\n", "time", ".", "sleep", "(", "0.01", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.output_backend.OutputBackend._create_model_dirs": [[114, 133], ["print", "datetime.datetime.datetime.now().strftime", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "pathlib.Path().mkdir", "pathlib.Path().mkdir", "pathlib.Path().mkdir", "print", "time.sleep", "time.sleep", "time.sleep", "time.sleep", "datetime.datetime.datetime.now", "pathlib.Path", "pathlib.Path", "pathlib.Path"], "methods", ["None"], ["", "", "def", "_create_model_dirs", "(", "self", ",", "base_model_dir", ",", "log_dir", ",", "type_description", ")", ":", "\n", "        ", "created", "=", "False", "\n", "while", "not", "created", ":", "\n", "            ", "try", ":", "\n", "                ", "date_stamp", "=", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "'%d-%m-%Y_%H:%M:%S'", ")", "\n", "self", ".", "model_name", "=", "f'{type_description}_{date_stamp}'", "\n", "self", ".", "temp_dir", "=", "os", ".", "path", ".", "join", "(", "base_model_dir", ",", "f'_temp_{self.model_name}'", ")", "\n", "self", ".", "main_dir", "=", "os", ".", "path", ".", "join", "(", "base_model_dir", ",", "self", ".", "model_name", ")", "\n", "self", ".", "writer_dir", "=", "os", ".", "path", ".", "join", "(", "log_dir", ",", "self", ".", "model_name", ")", "\n", "self", ".", "checkpoints_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "temp_dir", ",", "'checkpoints'", ")", "\n", "pathlib", ".", "Path", "(", "self", ".", "temp_dir", ")", ".", "mkdir", "(", "parents", "=", "True", ",", "exist_ok", "=", "False", ")", "\n", "pathlib", ".", "Path", "(", "self", ".", "checkpoints_dir", ")", ".", "mkdir", "(", "parents", "=", "True", ",", "exist_ok", "=", "False", ")", "\n", "pathlib", ".", "Path", "(", "self", ".", "writer_dir", ")", ".", "mkdir", "(", "parents", "=", "True", ",", "exist_ok", "=", "False", ")", "\n", "created", "=", "True", "\n", "", "except", "FileExistsError", ":", "\n", "                ", "print", "(", "f'Warning: Directory {self.temp_dir} already exists'", ")", "\n", "time", ".", "sleep", "(", "1", ")", "\n", "\n", "", "", "print", "(", "f'Model final dir: {self.main_dir} - temp dir {self.temp_dir}'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.output_backend.OutputBackend.save_model_checkpoint": [[134, 151], ["torch.save", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "torch.save"], "methods", ["None"], ["", "def", "save_model_checkpoint", "(", "self", ",", "model_state_dict", ",", "epoch", ",", "optimizer_state_dict", "=", "None", ",", "avg", "=", "False", ")", ":", "\n", "        ", "if", "avg", ":", "\n", "            ", "avg_postfix", "=", "'_avg'", "\n", "", "else", ":", "\n", "            ", "avg_postfix", "=", "''", "\n", "\n", "", "if", "epoch", "in", "[", "'best'", ",", "'final'", ",", "'best_swa'", ",", "'final_swa'", "]", ":", "\n", "            ", "checkpoint_file", "=", "os", ".", "path", ".", "join", "(", "self", ".", "temp_dir", ",", "f'{epoch}{avg_postfix}.pth'", ")", "\n", "optimizer_file", "=", "os", ".", "path", ".", "join", "(", "self", ".", "temp_dir", ",", "f'{epoch}_optim.pth'", ")", "\n", "", "else", ":", "\n", "            ", "checkpoint_file", "=", "os", ".", "path", ".", "join", "(", "self", ".", "checkpoints_dir", ",", "f'{epoch}{avg_postfix}.pth'", ")", "\n", "optimizer_file", "=", "os", ".", "path", ".", "join", "(", "self", ".", "checkpoints_dir", ",", "f'{epoch}_optim.pth'", ")", "\n", "\n", "", "torch", ".", "save", "(", "model_state_dict", ",", "checkpoint_file", ")", "\n", "\n", "if", "optimizer_state_dict", "is", "not", "None", ":", "\n", "            ", "torch", ".", "save", "(", "optimizer_state_dict", ",", "optimizer_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.output_backend.OutputBackend._finalize_model_dirs": [[152, 154], ["os.rename"], "methods", ["None"], ["", "", "def", "_finalize_model_dirs", "(", "self", ")", ":", "\n", "        ", "os", ".", "rename", "(", "self", ".", "temp_dir", ",", "self", ".", "main_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.output_backend.OutputBackend._create_dict_markdown_text": [[155, 178], ["enumerate", "min", "config_dict.items", "type", "output_backend.OutputBackend._create_dict_markdown_text", "isinstance"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.output_backend.OutputBackend._create_dict_markdown_text"], ["", "@", "staticmethod", "\n", "def", "_create_dict_markdown_text", "(", "config_dict", ",", "text", ",", "indent_level", "=", "0", ")", ":", "\n", "        ", "new_txt", "=", "text", "\n", "if", "config_dict", "is", "not", "None", ":", "\n", "\n", "            ", "if", "indent_level", "<=", "1", ":", "\n", "                ", "heading_level", "=", "min", "(", "6", ",", "indent_level", "+", "3", ")", "\n", "heading_pre", "=", "heading_level", "*", "'#'", "+", "''", "\n", "heading_post", "=", "''", "\n", "", "else", ":", "\n", "                ", "heading_pre", "=", "'**'", "\n", "heading_post", "=", "':**'", "\n", "\n", "", "for", "i", ",", "(", "key_i", ",", "item_i", ")", "in", "enumerate", "(", "config_dict", ".", "items", "(", ")", ")", ":", "\n", "                ", "if", "type", "(", "item_i", ")", "is", "dict", ":", "\n", "                    ", "new_txt", "+=", "f'{heading_pre}{key_i}{heading_post}    \\n'", "\n", "new_txt", "=", "OutputBackend", ".", "_create_dict_markdown_text", "(", "item_i", ",", "new_txt", ",", "indent_level", "+", "1", ")", "\n", "", "else", ":", "\n", "                    ", "if", "isinstance", "(", "item_i", ",", "(", "bool", ",", "int", ",", "float", ",", "complex", ",", "str", ",", "list", ",", "tuple", ")", ")", ":", "\n", "                     ", "new_txt", "+=", "f'**{key_i}:** {item_i}    \\n'", "\n", "", "", "", "new_txt", "+=", "'\\n\\n'", "\n", "\n", "return", "new_txt", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.output_backend.OutputBackend._save_dict_to_txt": [[179, 191], ["enumerate", "fileID.write", "config_dict.items", "type", "fileID.write", "output_backend.OutputBackend._save_dict_to_txt", "isinstance", "fileID.write"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.output_backend.OutputBackend._save_dict_to_txt"], ["", "", "@", "staticmethod", "\n", "def", "_save_dict_to_txt", "(", "config_dict", ",", "fileID", ",", "indent_level", "=", "0", ")", ":", "\n", "        ", "if", "config_dict", "is", "not", "None", ":", "\n", "            ", "pre", "=", "indent_level", "*", "'\\t'", "\n", "for", "i", ",", "(", "key_i", ",", "item_i", ")", "in", "enumerate", "(", "config_dict", ".", "items", "(", ")", ")", ":", "\n", "                ", "if", "type", "(", "item_i", ")", "is", "dict", ":", "\n", "                    ", "fileID", ".", "write", "(", "f'{pre}{key_i}\\n\\n'", ")", "\n", "OutputBackend", ".", "_save_dict_to_txt", "(", "item_i", ",", "fileID", ",", "indent_level", "+", "1", ")", "\n", "", "else", ":", "\n", "                    ", "if", "isinstance", "(", "item_i", ",", "(", "bool", ",", "int", ",", "float", ",", "complex", ",", "str", ",", "list", ",", "tuple", ")", ")", ":", "\n", "                     ", "fileID", ".", "write", "(", "f'{pre}{key_i}: {item_i}\\n'", ")", "\n", "", "", "", "fileID", ".", "write", "(", "'\\n'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.output_backend.OutputBackend.save_model_configs": [[194, 201], ["os.path.join", "output_backend.OutputBackend._create_dict_markdown_text", "output_backend.OutputBackend.writer.add_text", "open", "output_backend.OutputBackend._save_dict_to_txt"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.output_backend.OutputBackend._create_dict_markdown_text", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.output_backend.OutputBackend._save_dict_to_txt"], ["", "", "def", "save_model_configs", "(", "self", ",", "configs", ")", ":", "\n", "        ", "out_file", "=", "os", ".", "path", ".", "join", "(", "self", ".", "temp_dir", ",", "'config.txt'", ")", "\n", "with", "open", "(", "out_file", ",", "'w'", ")", "as", "fileID", ":", "\n", "            ", "OutputBackend", ".", "_save_dict_to_txt", "(", "configs", ",", "fileID", ")", "\n", "\n", "", "markdown_text", "=", "OutputBackend", ".", "_create_dict_markdown_text", "(", "configs", ",", "''", ")", "\n", "self", ".", "writer", ".", "add_text", "(", "f'Params/config'", ",", "markdown_text", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.ACET_training.ACETObjective.__init__": [[15, 29], ["train_loss.acet_uniform_obj_from_name", "train_loss.acet_uniform_obj_from_name", "train_loss.MinMaxLoss.__init__", "helpers.get_adversarial_attack", "train_loss.TrainLoss.reduce", "f_attack", "ACET_training.ACETObjective._prepare_input"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_loss.acet_uniform_obj_from_name", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_loss.acet_uniform_obj_from_name", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models_32x32.shake_pyramidnet.ShakePyramidNet.__init__", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.helpers.get_adversarial_attack", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.adversarial_attacks.utils.reduce", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_loss.TrainLoss._prepare_input"], ["    ", "def", "__init__", "(", "self", ",", "model", ",", "epoch", ",", "attack_config", ",", "train_obj", ",", "attack_obj", ",", "num_classes", ",", "log_stats", "=", "False", ",", "number_of_batches", "=", "None", ",", "name_prefix", "=", "None", ")", ":", "\n", "        ", "f_train", ",", "train_expected_format", "=", "acet_uniform_obj_from_name", "(", "train_obj", ",", "num_classes", ")", "\n", "f_attack", ",", "attack_expected_format", "=", "acet_uniform_obj_from_name", "(", "attack_obj", ",", "num_classes", ")", "\n", "\n", "self", ".", "f_train", "=", "f_train", "\n", "super", "(", ")", ".", "__init__", "(", "'ACETLoss'", ",", "expected_format", "=", "train_expected_format", ",", "log_stats", "=", "log_stats", ",", "\n", "name_prefix", "=", "name_prefix", ")", "\n", "\n", "#negative loss for inner maximization problem", "\n", "def", "att_criterion", "(", "data", ",", "model_out", ",", "orig_data", ",", "y", ",", "reduction", "=", "'mean'", ")", ":", "\n", "            ", "obj_expanded", "=", "-", "f_attack", "(", "self", ".", "_prepare_input", "(", "model_out", ")", ")", "\n", "return", "TrainLoss", ".", "reduce", "(", "obj_expanded", ",", "reduction", ")", "\n", "\n", "", "self", ".", "adv_attack", "=", "get_adversarial_attack", "(", "attack_config", ",", "model", ",", "att_criterion", ",", "num_classes", "=", "num_classes", ",", "epoch", "=", "epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.ACET_training.ACETObjective.inner_max": [[31, 34], ["ACET_training.ACETObjective.adv_attack"], "methods", ["None"], ["", "def", "inner_max", "(", "self", ",", "data", ",", "target", ")", ":", "\n", "        ", "adv_samples", "=", "self", ".", "adv_attack", "(", "data", ",", "target", ",", "targeted", "=", "False", ")", "\n", "return", "adv_samples", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.ACET_training.ACETObjective.forward": [[35, 39], ["ACET_training.ACETObjective.f_train", "ACET_training.ACETObjective._log_stats", "train_loss.TrainLoss.reduce", "ACET_training.ACETObjective._prepare_input"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_loss.LoggingLoss._log_stats", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.adversarial_attacks.utils.reduce", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_loss.TrainLoss._prepare_input"], ["", "def", "forward", "(", "self", ",", "data", ",", "model_out", ",", "orig_data", ",", "y", ",", "reduction", "=", "'mean'", ")", ":", "\n", "        ", "obj_expanded", "=", "self", ".", "f_train", "(", "self", ".", "_prepare_input", "(", "model_out", ")", ")", "\n", "self", ".", "_log_stats", "(", "obj_expanded", ")", "\n", "return", "TrainLoss", ".", "reduce", "(", "obj_expanded", ",", "reduction", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.ACET_training.ACETTargetedObjective.__init__": [[41, 57], ["train_loss.acet_target_obj_from_name", "train_loss.acet_target_obj_from_name", "train_loss.MinMaxLoss.__init__", "helpers.get_adversarial_attack", "train_loss.TrainLoss.reduce", "f_attack", "ACET_training.ACETTargetedObjective._prepare_input"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_loss.acet_target_obj_from_name", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_loss.acet_target_obj_from_name", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models_32x32.shake_pyramidnet.ShakePyramidNet.__init__", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.helpers.get_adversarial_attack", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.adversarial_attacks.utils.reduce", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_loss.TrainLoss._prepare_input"], ["    ", "def", "__init__", "(", "self", ",", "model", ",", "epoch", ",", "attack_config", ",", "train_obj", ",", "attack_obj", ",", "num_classes", ",", "log_stats", "=", "False", ",", "number_of_batches", "=", "None", ",", "name_prefix", "=", "None", ")", ":", "\n", "#if targeted loss is false: enforce unfirom, otherwise divergence between y and softmax(model_out)", "\n", "        ", "f_train", ",", "train_expected_format", "=", "acet_target_obj_from_name", "(", "train_obj", ")", "\n", "f_attack", ",", "attack_expected_format", "=", "acet_target_obj_from_name", "(", "attack_obj", ")", "\n", "\n", "self", ".", "f_train", "=", "f_train", "\n", "super", "(", ")", ".", "__init__", "(", "'ACETLoss'", ",", "expected_format", "=", "train_expected_format", ",", "log_stats", "=", "log_stats", ",", "\n", "name_prefix", "=", "name_prefix", ")", "\n", "\n", "# negative loss for inner maximization problem", "\n", "def", "att_criterion", "(", "data", ",", "model_out", ",", "orig_data", ",", "y", ",", "reduction", "=", "'mean'", ")", ":", "\n", "            ", "obj_expanded", "=", "-", "f_attack", "(", "self", ".", "_prepare_input", "(", "model_out", ")", ",", "y", ")", "\n", "return", "TrainLoss", ".", "reduce", "(", "obj_expanded", ",", "reduction", ")", "\n", "\n", "", "self", ".", "adv_attack", "=", "get_adversarial_attack", "(", "attack_config", ",", "model", ",", "att_criterion", ",", "num_classes", "=", "num_classes", ",", "\n", "epoch", "=", "epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.ACET_training.ACETTargetedObjective.inner_max": [[58, 61], ["ACET_training.ACETTargetedObjective.adv_attack"], "methods", ["None"], ["", "def", "inner_max", "(", "self", ",", "data", ",", "target", ")", ":", "\n", "        ", "adv_samples", "=", "self", ".", "adv_attack", "(", "data", ",", "target", ",", "targeted", "=", "False", ")", "\n", "return", "adv_samples", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.ACET_training.ACETTargetedObjective.forward": [[63, 67], ["ACET_training.ACETTargetedObjective.f_train", "ACET_training.ACETTargetedObjective._log_stats", "train_loss.TrainLoss.reduce", "ACET_training.ACETTargetedObjective._prepare_input"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_loss.LoggingLoss._log_stats", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.adversarial_attacks.utils.reduce", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_loss.TrainLoss._prepare_input"], ["", "def", "forward", "(", "self", ",", "data", ",", "model_out", ",", "orig_data", ",", "y", ",", "reduction", "=", "'mean'", ")", ":", "\n", "        ", "obj_expanded", "=", "self", ".", "f_train", "(", "self", ".", "_prepare_input", "(", "model_out", ")", ",", "y", ")", "\n", "self", ".", "_log_stats", "(", "obj_expanded", ")", "\n", "return", "TrainLoss", ".", "reduce", "(", "obj_expanded", ",", "reduction", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.ACET_training.ACETTraining.__init__": [[70, 87], ["helpers.get_distance", "out_distribution_training.OutDistributionTraining.__init__"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.helpers.get_distance", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models_32x32.shake_pyramidnet.ShakePyramidNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "model", ",", "od_attack_config", ",", "optimizer_config", ",", "epochs", ",", "device", ",", "num_classes", ",", "\n", "lr_scheduler_config", "=", "None", ",", "model_config", "=", "None", ",", "target_confidences", "=", "False", ",", "od_weight", "=", "1.", ",", "\n", "train_obj", "=", "'KL'", ",", "attack_obj", "=", "'KL'", ",", "test_epochs", "=", "5", ",", "verbose", "=", "100", ",", "\n", "saved_model_dir", "=", "'SavedModels'", ",", "saved_log_dir", "=", "'Logs'", ")", ":", "\n", "\n", "        ", "distance", "=", "get_distance", "(", "od_attack_config", "[", "'norm'", "]", ")", "\n", "\n", "super", "(", ")", ".", "__init__", "(", "'ACET'", ",", "model", ",", "distance", ",", "optimizer_config", ",", "epochs", ",", "device", ",", "num_classes", ",", "\n", "lr_scheduler_config", "=", "lr_scheduler_config", ",", "model_config", "=", "model_config", ",", "od_weight", "=", "od_weight", ",", "\n", "test_epochs", "=", "test_epochs", ",", "verbose", "=", "verbose", ",", "saved_model_dir", "=", "saved_model_dir", ",", "\n", "saved_log_dir", "=", "saved_log_dir", ")", "\n", "\n", "self", ".", "od_attack_config", "=", "od_attack_config", "\n", "\n", "self", ".", "target_confidences", "=", "target_confidences", "\n", "self", ".", "od_attack_obj", "=", "attack_obj", "\n", "self", ".", "od_train_obj", "=", "train_obj", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.ACET_training.ACETTraining._get_od_criterion": [[88, 96], ["ACET_training.ACETTargetedObjective", "ACET_training.ACETObjective"], "methods", ["None"], ["", "def", "_get_od_criterion", "(", "self", ",", "epoch", ",", "model", ",", "name_prefix", "=", "'OD'", ")", ":", "\n", "        ", "if", "self", ".", "target_confidences", ":", "\n", "            ", "train_criterion", "=", "ACETTargetedObjective", "(", "model", ",", "epoch", ",", "self", ".", "od_attack_config", ",", "self", ".", "od_train_obj", ",", "self", ".", "od_attack_obj", ",", "self", ".", "classes", ",", "\n", "log_stats", "=", "True", ",", "name_prefix", "=", "name_prefix", ")", "\n", "", "else", ":", "\n", "            ", "train_criterion", "=", "ACETObjective", "(", "model", ",", "epoch", ",", "self", ".", "od_attack_config", ",", "self", ".", "od_train_obj", ",", "self", ".", "od_attack_obj", ",", "self", ".", "classes", ",", "\n", "log_stats", "=", "True", ",", "name_prefix", "=", "name_prefix", ")", "\n", "", "return", "train_criterion", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.ACET_training.ACETTraining._get_ACET_config": [[97, 100], ["None"], "methods", ["None"], ["", "def", "_get_ACET_config", "(", "self", ")", ":", "\n", "        ", "ACET_config", "=", "{", "'targeted confidences'", ":", "self", ".", "target_confidences", ",", "'train_obj'", ":", "self", ".", "od_train_obj", ",", "'attack_obj'", ":", "self", ".", "od_attack_obj", ",", "'lambda'", ":", "self", ".", "od_weight", "}", "\n", "return", "ACET_config", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.ACET_training.ACETTraining._get_train_type_config": [[101, 117], ["ACET_training.ACETTraining._get_base_config", "ACET_training.ACETTraining._get_ACET_config"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_type.TrainType._get_base_config", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.ACET_training.ACETTraining._get_ACET_config"], ["", "def", "_get_train_type_config", "(", "self", ",", "loader_config", "=", "None", ")", ":", "\n", "        ", "base_config", "=", "self", ".", "_get_base_config", "(", ")", "\n", "ACET_config", "=", "self", ".", "_get_ACET_config", "(", ")", "\n", "\n", "configs", "=", "{", "}", "\n", "configs", "[", "'Base'", "]", "=", "base_config", "\n", "configs", "[", "'ACET'", "]", "=", "ACET_config", "\n", "configs", "[", "'OD Attack'", "]", "=", "self", ".", "od_attack_config", "\n", "configs", "[", "'Optimizer'", "]", "=", "self", ".", "optimizer_config", "\n", "configs", "[", "'Scheduler'", "]", "=", "self", ".", "lr_scheduler_config", "\n", "\n", "configs", "[", "'Data Loader'", "]", "=", "loader_config", "\n", "configs", "[", "'MSDA'", "]", "=", "self", ".", "msda_config", "\n", "configs", "[", "'Model'", "]", "=", "self", ".", "model_config", "\n", "\n", "return", "configs", "", "", "", ""]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.TRADESCEDA_training.TRADESCEDATraining.__init__": [[19, 40], ["helpers.get_distance", "helpers.get_distance", "in_out_distribution_training.InOutDistributionTraining.__init__"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.helpers.get_distance", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.helpers.get_distance", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models_32x32.shake_pyramidnet.ShakePyramidNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "model", ",", "id_attack_config", ",", "od_attack_config", ",", "optimizer_config", ",", "epochs", ",", "device", ",", "num_classes", ",", "\n", "id_trades_weight", "=", "1.", ",", "od_trades_weight", "=", "1.", ",", "lr_scheduler_config", "=", "None", ",", "\n", "ceda_obj", "=", "'kl'", ",", "od_weight", "=", "1.", ",", "model_config", "=", "None", ",", "\n", "test_epochs", "=", "1", ",", "verbose", "=", "100", ",", "saved_model_dir", "=", "'SavedModels'", ",", "saved_log_dir", "=", "'Logs'", ")", ":", "\n", "\n", "        ", "id_distance", "=", "get_distance", "(", "id_attack_config", "[", "'norm'", "]", ")", "\n", "od_distance", "=", "get_distance", "(", "od_attack_config", "[", "'norm'", "]", ")", "\n", "\n", "super", "(", ")", ".", "__init__", "(", "'TRADESCEDA'", ",", "model", ",", "id_distance", ",", "od_distance", ",", "optimizer_config", ",", "epochs", ",", "device", ",", "num_classes", ",", "\n", "train_clean", "=", "False", ",", "id_trades", "=", "True", ",", "id_weight", "=", "0.5", ",", "clean_weight", "=", "1.0", ",", "id_adv_weight", "=", "id_trades_weight", ",", "\n", "od_trades", "=", "True", ",", "od_weight", "=", "0.5", "*", "od_weight", ",", "od_clean_weight", "=", "1.0", ",", "od_adv_weight", "=", "od_trades_weight", ",", "\n", "lr_scheduler_config", "=", "lr_scheduler_config", ",", "\n", "model_config", "=", "model_config", ",", "test_epochs", "=", "test_epochs", ",", "\n", "verbose", "=", "verbose", ",", "saved_model_dir", "=", "saved_model_dir", ",", "saved_log_dir", "=", "saved_log_dir", ")", "\n", "\n", "#Trades", "\n", "self", ".", "id_attack_config", "=", "id_attack_config", "\n", "\n", "#od", "\n", "self", ".", "od_attack_config", "=", "od_attack_config", "\n", "self", ".", "ceda_obj", "=", "ceda_obj", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.TRADESCEDA_training.TRADESCEDATraining.requires_out_distribution": [[41, 43], ["None"], "methods", ["None"], ["", "def", "requires_out_distribution", "(", "self", ")", ":", "\n", "        ", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.TRADESCEDA_training.TRADESCEDATraining.create_loaders_dict": [[44, 57], ["None"], "methods", ["None"], ["", "def", "create_loaders_dict", "(", "self", ",", "train_loader", ",", "test_loader", "=", "None", ",", "out_distribution_loader", "=", "None", ",", "out_distribution_test_loader", "=", "None", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "train_loaders", "=", "{", "\n", "'train_loader'", ":", "train_loader", ",", "\n", "'out_distribution_loader'", ":", "out_distribution_loader", "\n", "}", "\n", "\n", "test_loaders", "=", "{", "}", "\n", "if", "test_loader", "is", "not", "None", ":", "\n", "            ", "test_loaders", "[", "'test_loader'", "]", "=", "test_loader", "\n", "", "if", "out_distribution_test_loader", "is", "not", "None", ":", "\n", "            ", "test_loaders", "[", "'out_distribution_test_loader'", "]", "=", "out_distribution_test_loader", "\n", "\n", "", "return", "train_loaders", ",", "test_loaders", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.TRADESCEDA_training.TRADESCEDATraining._validate_loaders": [[58, 63], ["ValueError", "ValueError"], "methods", ["None"], ["", "def", "_validate_loaders", "(", "self", ",", "train_loaders", ",", "test_loaders", ")", ":", "\n", "        ", "if", "not", "'train_loader'", "in", "train_loaders", ":", "\n", "            ", "raise", "ValueError", "(", "'Train loader not given'", ")", "\n", "", "if", "not", "'out_distribution_loader'", "in", "train_loaders", ":", "\n", "            ", "raise", "ValueError", "(", "'Out distribution loader is required for out distribution training'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.TRADESCEDA_training.TRADESCEDATraining._get_id_criterion": [[64, 67], ["TRADES_training.TRADESLoss"], "methods", ["None"], ["", "", "def", "_get_id_criterion", "(", "self", ",", "epoch", ",", "model", ",", "name_prefix", "=", "'ID'", ")", ":", "\n", "        ", "trades_reg", "=", "TRADESLoss", "(", "model", ",", "epoch", ",", "self", ".", "id_attack_config", ",", "self", ".", "classes", ",", "log_stats", "=", "True", ",", "name_prefix", "=", "name_prefix", ")", "\n", "return", "trades_reg", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.TRADESCEDA_training.TRADESCEDATraining._get_od_clean_criterion": [[68, 71], ["CEDA_training.CEDAObjective"], "methods", ["None"], ["", "def", "_get_od_clean_criterion", "(", "self", ",", "epoch", ",", "model", ",", "name_prefix", "=", "'OD'", ")", ":", "\n", "        ", "od_clean_criterion", "=", "CEDAObjective", "(", "self", ".", "ceda_obj", ",", "self", ".", "classes", ",", "log_stats", "=", "True", ",", "name_prefix", "=", "name_prefix", ")", "\n", "return", "od_clean_criterion", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.TRADESCEDA_training.TRADESCEDATraining._get_od_criterion": [[72, 76], ["TRADES_training.TRADESLoss"], "methods", ["None"], ["", "def", "_get_od_criterion", "(", "self", ",", "epoch", ",", "model", ",", "name_prefix", "=", "'OD'", ")", ":", "\n", "        ", "od_criterion", "=", "TRADESLoss", "(", "model", ",", "epoch", ",", "self", ".", "od_attack_config", ",", "self", ".", "classes", ",", "\n", "log_stats", "=", "True", ",", "name_prefix", "=", "name_prefix", ")", "\n", "return", "od_criterion", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.TRADESCEDA_training.TRADESCEDATraining._get_TRADESACET_config": [[77, 88], ["None"], "methods", ["None"], ["", "def", "_get_TRADESACET_config", "(", "self", ")", ":", "\n", "        ", "config_dict", "=", "{", "}", "\n", "config_dict", "[", "'ID Weight'", "]", "=", "self", ".", "id_weight", "\n", "config_dict", "[", "'Clean Weight'", "]", "=", "self", ".", "clean_weight", "\n", "config_dict", "[", "'Trades Weight'", "]", "=", "self", ".", "id_adv_weight", "\n", "\n", "config_dict", "[", "'OD Weight'", "]", "=", "self", ".", "od_weight", "\n", "config_dict", "[", "'OD Clean Weight'", "]", "=", "self", ".", "od_clean_weight", "\n", "config_dict", "[", "'OD Trades Weight'", "]", "=", "self", ".", "od_adv_weight", "\n", "config_dict", "[", "'OD CEDA Objective'", "]", "=", "self", ".", "ceda_obj", "\n", "return", "config_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.TRADESCEDA_training.TRADESCEDATraining._get_train_type_config": [[89, 105], ["TRADESCEDA_training.TRADESCEDATraining._get_base_config", "TRADESCEDA_training.TRADESCEDATraining._get_TRADESACET_config"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_type.TrainType._get_base_config", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.TRADESCEDA_training.TRADESCEDATraining._get_TRADESACET_config"], ["", "def", "_get_train_type_config", "(", "self", ",", "loader_config", "=", "None", ")", ":", "\n", "        ", "base_config", "=", "self", ".", "_get_base_config", "(", ")", "\n", "tradesacet_config", "=", "self", ".", "_get_TRADESACET_config", "(", ")", "\n", "configs", "=", "{", "}", "\n", "configs", "[", "'Base'", "]", "=", "base_config", "\n", "configs", "[", "'TRADESACET'", "]", "=", "tradesacet_config", "\n", "configs", "[", "'ID Attack'", "]", "=", "self", ".", "id_attack_config", "\n", "configs", "[", "'OD Attack'", "]", "=", "self", ".", "od_attack_config", "\n", "configs", "[", "'Optimizer'", "]", "=", "self", ".", "optimizer_config", "\n", "configs", "[", "'Scheduler'", "]", "=", "self", ".", "lr_scheduler_config", "\n", "\n", "configs", "[", "'Data Loader'", "]", "=", "loader_config", "\n", "configs", "[", "'MSDA'", "]", "=", "self", ".", "msda_config", "\n", "configs", "[", "'Model'", "]", "=", "self", ".", "model_config", "\n", "\n", "return", "configs", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.msda.mixed_sample_data_augmentation.MixedSampleDataAugmentation.__init__": [[2, 4], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "loss", ")", ":", "\n", "        ", "self", ".", "loss", "=", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.msda.mixed_sample_data_augmentation.MixedSampleDataAugmentation.apply_mix": [[5, 7], ["None"], "methods", ["None"], ["", "def", "apply_mix", "(", "self", ",", "x", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.msda.mixed_sample_data_augmentation.MixedSampleDataAugmentation.__call__": [[8, 10], ["mixed_sample_data_augmentation.MixedSampleDataAugmentation.apply_mix"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.msda.mixup.Mixup.apply_mix"], ["", "def", "__call__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "self", ".", "apply_mix", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.msda.dummy_msda.DummyMSDA.__init__": [[4, 6], ["mixed_sample_data_augmentation.MixedSampleDataAugmentation.__init__"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models_32x32.shake_pyramidnet.ShakePyramidNet.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.msda.dummy_msda.DummyMSDA.apply_mix": [[7, 9], ["None"], "methods", ["None"], ["", "def", "apply_mix", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "x", "", "", "", ""]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.msda.fmix.FMixLoss.__init__": [[8, 15], ["train_loss.MinMaxLoss.__init__"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models_32x32.shake_pyramidnet.ShakePyramidNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "base_loss", ",", "lam", "=", "None", ",", "index", "=", "None", ",", "reformulate", "=", "False", ",", "log_stats", "=", "False", ",", "name_prefix", "=", "None", ")", ":", "\n", "        ", "name", "=", "'FMix_'", "+", "base_loss", ".", "name", "\n", "super", "(", ")", ".", "__init__", "(", "name", ",", "expected_format", "=", "'logits'", ",", "log_stats", "=", "log_stats", ",", "name_prefix", "=", "name_prefix", ")", "\n", "self", ".", "index", "=", "index", "\n", "self", ".", "lam", "=", "lam", "\n", "self", ".", "reformulate", "=", "reformulate", "\n", "self", ".", "base_loss", "=", "base_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.msda.fmix.FMixLoss.inner_max": [[16, 18], ["None"], "methods", ["None"], ["", "def", "inner_max", "(", "self", ",", "data", ",", "target", ")", ":", "\n", "        ", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.msda.fmix.FMixLoss.forward": [[19, 32], ["fmix.FMixLoss._log_stats", "train_loss.TrainLoss.reduce", "fmix.FMixLoss.base_loss", "fmix.FMixLoss.base_loss", "fmix.FMixLoss.base_loss"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_loss.LoggingLoss._log_stats", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.adversarial_attacks.utils.reduce"], ["", "def", "forward", "(", "self", ",", "data", ",", "model_out", ",", "orig_data", ",", "y", ",", "reduction", "=", "'mean'", ")", ":", "\n", "        ", "assert", "self", ".", "index", "is", "not", "None", "\n", "assert", "self", ".", "lam", "is", "not", "None", "\n", "\n", "if", "not", "self", ".", "reformulate", ":", "\n", "            ", "y2", "=", "y", "[", "self", ".", "index", "]", "\n", "loss_expanded", "=", "self", ".", "base_loss", "(", "data", ",", "model_out", ",", "orig_data", ",", "y", ",", "reduction", "=", "'none'", ")", "*", "self", ".", "lam", "+", "self", ".", "base_loss", "(", "data", ",", "model_out", ",", "orig_data", ",", "y2", ",", "reduction", "=", "'none'", ")", "*", "(", "1", "-", "self", ".", "lam", ")", "\n", "", "else", ":", "\n", "            ", "loss_expanded", "=", "self", ".", "base_loss", "(", "data", ",", "model_out", ",", "orig_data", ",", "y", ",", "reduction", "=", "'none'", ")", "\n", "\n", "", "self", ".", "_log_stats", "(", "loss_expanded", ")", "\n", "return", "TrainLoss", ".", "reduce", "(", "loss_expanded", ",", "reduction", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.msda.fmix.FMix.__init__": [[43, 53], ["fmix.FMixLoss", "mixed_sample_data_augmentation.MixedSampleDataAugmentation.__init__"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models_32x32.shake_pyramidnet.ShakePyramidNet.__init__"], ["def", "__init__", "(", "self", ",", "base_loss", ",", "decay_power", "=", "3", ",", "alpha", "=", "1", ",", "size", "=", "(", "-", "1", ",", "-", "1", ")", ",", "max_soft", "=", "0.0", ",", "reformulate", "=", "False", ",", "\n", "log_stats", "=", "False", ",", "name_prefix", "=", "None", ")", ":", "\n", "        ", "self", ".", "decay_power", "=", "decay_power", "\n", "self", ".", "reformulate", "=", "reformulate", "\n", "self", ".", "size", "=", "size", "\n", "self", ".", "alpha", "=", "alpha", "\n", "self", ".", "max_soft", "=", "max_soft", "\n", "\n", "loss", "=", "FMixLoss", "(", "base_loss", ",", "reformulate", "=", "reformulate", ",", "log_stats", "=", "log_stats", ",", "name_prefix", "=", "name_prefix", ")", "\n", "super", "(", ")", ".", "__init__", "(", "loss", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.msda.fmix.FMix.apply_mix": [[54, 76], ["enumerate", "fmix_utils.sample_mask", "torch.randperm().to", "torch.randperm().to", "torch.randperm().to", "torch.randperm().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "mask.unsqueeze.unsqueeze.unsqueeze", "size.append", "size.append", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "len", "x.size", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.msda.fmix_utils.sample_mask"], ["", "def", "apply_mix", "(", "self", ",", "x", ")", ":", "\n", "        ", "size", "=", "[", "]", "\n", "for", "i", ",", "s", "in", "enumerate", "(", "self", ".", "size", ")", ":", "\n", "            ", "if", "s", "!=", "-", "1", ":", "\n", "                ", "size", ".", "append", "(", "s", ")", "\n", "", "else", ":", "\n", "                ", "size", ".", "append", "(", "x", ".", "shape", "[", "i", "+", "2", "]", ")", "\n", "\n", "", "", "lam", ",", "mask", "=", "sample_mask", "(", "self", ".", "alpha", ",", "self", ".", "decay_power", ",", "size", ",", "self", ".", "max_soft", ",", "self", ".", "reformulate", ")", "\n", "index", "=", "torch", ".", "randperm", "(", "x", ".", "size", "(", "0", ")", ")", ".", "to", "(", "x", ".", "device", ")", "\n", "mask", "=", "torch", ".", "from_numpy", "(", "mask", ")", ".", "float", "(", ")", ".", "to", "(", "x", ".", "device", ")", "\n", "\n", "if", "len", "(", "self", ".", "size", ")", "==", "1", "and", "x", ".", "ndim", "==", "3", ":", "\n", "            ", "mask", "=", "mask", ".", "unsqueeze", "(", "2", ")", "\n", "\n", "# Mix the images", "\n", "", "x_mix", "=", "mask", "*", "x", "+", "(", "1", "-", "mask", ")", "*", "x", "[", "index", "]", "\n", "\n", "self", ".", "loss", ".", "od_weight", "=", "lam", "\n", "self", ".", "loss", ".", "index", "=", "index", "\n", "\n", "return", "x_mix", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.msda.fmix_utils.FMixBase.__init__": [[170, 172], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models_32x32.shake_pyramidnet.ShakePyramidNet.__init__"], ["def", "__init__", "(", "self", ",", "decay_power", "=", "3", ",", "alpha", "=", "1", ",", "size", "=", "(", "32", ",", "32", ")", ",", "max_soft", "=", "0.0", ",", "reformulate", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.msda.fmix_utils.fftfreqnd": [[10, 35], ["numpy.fft.fftfreq", "numpy.sqrt", "numpy.expand_dims", "numpy.expand_dims", "numpy.fft.fftfreq", "numpy.fft.fftfreq", "numpy.fft.fftfreq", "numpy.fft.fftfreq"], "function", ["None"], ["def", "fftfreqnd", "(", "h", ",", "w", "=", "None", ",", "z", "=", "None", ")", ":", "\n", "    ", "\"\"\" Get bin values for discrete fourier transform of out_size (h, w, z)\n    :param h: Required, first dimension out_size\n    :param w: Optional, second dimension out_size\n    :param z: Optional, third dimension out_size\n    \"\"\"", "\n", "fz", "=", "fx", "=", "0", "\n", "fy", "=", "np", ".", "fft", ".", "fftfreq", "(", "h", ")", "\n", "\n", "if", "w", "is", "not", "None", ":", "\n", "        ", "fy", "=", "np", ".", "expand_dims", "(", "fy", ",", "-", "1", ")", "\n", "\n", "if", "w", "%", "2", "==", "1", ":", "\n", "            ", "fx", "=", "np", ".", "fft", ".", "fftfreq", "(", "w", ")", "[", ":", "w", "//", "2", "+", "2", "]", "\n", "", "else", ":", "\n", "            ", "fx", "=", "np", ".", "fft", ".", "fftfreq", "(", "w", ")", "[", ":", "w", "//", "2", "+", "1", "]", "\n", "\n", "", "", "if", "z", "is", "not", "None", ":", "\n", "        ", "fy", "=", "np", ".", "expand_dims", "(", "fy", ",", "-", "1", ")", "\n", "if", "z", "%", "2", "==", "1", ":", "\n", "            ", "fz", "=", "np", ".", "fft", ".", "fftfreq", "(", "z", ")", "[", ":", ",", "None", "]", "\n", "", "else", ":", "\n", "            ", "fz", "=", "np", ".", "fft", ".", "fftfreq", "(", "z", ")", "[", ":", ",", "None", "]", "\n", "\n", "", "", "return", "np", ".", "sqrt", "(", "fx", "*", "fx", "+", "fy", "*", "fy", "+", "fz", "*", "fz", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.msda.fmix_utils.get_spectrum": [[37, 54], ["numpy.random.randn", "numpy.ones", "numpy.expand_dims", "numpy.maximum", "list", "numpy.array", "max"], "function", ["None"], ["", "def", "get_spectrum", "(", "freqs", ",", "decay_power", ",", "ch", ",", "h", ",", "w", "=", "0", ",", "z", "=", "0", ")", ":", "\n", "    ", "\"\"\" Samples a fourier image with given out_size and frequencies decayed by decay power\n    :param freqs: Bin values for the discrete fourier transform\n    :param decay_power: Decay power for frequency decay prop 1/f**d\n    :param ch: Number of channels for the resulting mask\n    :param h: Required, first dimension out_size\n    :param w: Optional, second dimension out_size\n    :param z: Optional, third dimension out_size\n    \"\"\"", "\n", "scale", "=", "np", ".", "ones", "(", "1", ")", "/", "(", "np", ".", "maximum", "(", "freqs", ",", "np", ".", "array", "(", "[", "1.", "/", "max", "(", "w", ",", "h", ",", "z", ")", "]", ")", ")", "**", "decay_power", ")", "\n", "\n", "param_size", "=", "[", "ch", "]", "+", "list", "(", "freqs", ".", "shape", ")", "+", "[", "2", "]", "\n", "param", "=", "np", ".", "random", ".", "randn", "(", "*", "param_size", ")", "\n", "\n", "scale", "=", "np", ".", "expand_dims", "(", "scale", ",", "-", "1", ")", "[", "None", ",", ":", "]", "\n", "\n", "return", "scale", "*", "param", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.msda.fmix_utils.make_low_freq_image": [[56, 78], ["fmix_utils.fftfreqnd", "fmix_utils.get_spectrum", "numpy.real", "numpy.fft.irfftn", "len", "len", "len", "np.real.min", "np.real.max"], "function", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.msda.fmix_utils.fftfreqnd", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.msda.fmix_utils.get_spectrum"], ["", "def", "make_low_freq_image", "(", "decay", ",", "shape", ",", "ch", "=", "1", ")", ":", "\n", "    ", "\"\"\" Sample a low frequency image from fourier space\n    :param decay_power: Decay power for frequency decay prop 1/f**d\n    :param shape: Shape of desired mask, list up to 3 dims\n    :param ch: Number of channels for desired mask\n    \"\"\"", "\n", "freqs", "=", "fftfreqnd", "(", "*", "shape", ")", "\n", "spectrum", "=", "get_spectrum", "(", "freqs", ",", "decay", ",", "ch", ",", "*", "shape", ")", "#.reshape((1, *shape[:-1], -1))", "\n", "spectrum", "=", "spectrum", "[", ":", ",", "0", "]", "+", "1j", "*", "spectrum", "[", ":", ",", "1", "]", "\n", "mask", "=", "np", ".", "real", "(", "np", ".", "fft", ".", "irfftn", "(", "spectrum", ",", "shape", ")", ")", "\n", "\n", "if", "len", "(", "shape", ")", "==", "1", ":", "\n", "        ", "mask", "=", "mask", "[", ":", "1", ",", ":", "shape", "[", "0", "]", "]", "\n", "", "if", "len", "(", "shape", ")", "==", "2", ":", "\n", "        ", "mask", "=", "mask", "[", ":", "1", ",", ":", "shape", "[", "0", "]", ",", ":", "shape", "[", "1", "]", "]", "\n", "", "if", "len", "(", "shape", ")", "==", "3", ":", "\n", "        ", "mask", "=", "mask", "[", ":", "1", ",", ":", "shape", "[", "0", "]", ",", ":", "shape", "[", "1", "]", ",", ":", "shape", "[", "2", "]", "]", "\n", "\n", "", "mask", "=", "mask", "\n", "mask", "=", "(", "mask", "-", "mask", ".", "min", "(", ")", ")", "\n", "mask", "=", "mask", "/", "mask", ".", "max", "(", ")", "\n", "return", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.msda.fmix_utils.sample_lam": [[80, 91], ["scipy.stats.beta.rvs", "scipy.stats.beta.rvs"], "function", ["None"], ["", "def", "sample_lam", "(", "alpha", ",", "reformulate", "=", "False", ")", ":", "\n", "    ", "\"\"\" Sample a lambda from symmetric beta distribution with given alpha\n    :param alpha: Alpha value for beta distribution\n    :param reformulate: If True, uses the reformulation of [1].\n    \"\"\"", "\n", "if", "reformulate", ":", "\n", "        ", "lam", "=", "beta", ".", "rvs", "(", "alpha", "+", "1", ",", "alpha", ")", "\n", "", "else", ":", "\n", "        ", "lam", "=", "beta", ".", "rvs", "(", "alpha", ",", "alpha", ")", "\n", "\n", "", "return", "lam", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.msda.fmix_utils.binarise_mask": [[93, 119], ["mask.reshape.reshape", "int", "numpy.linspace", "mask.reshape.reshape", "mask.reshape.reshape().argsort", "math.ceil", "math.floor", "min", "random.random", "mask.reshape.reshape"], "function", ["None"], ["", "def", "binarise_mask", "(", "mask", ",", "lam", ",", "in_shape", ",", "max_soft", "=", "0.0", ")", ":", "\n", "    ", "\"\"\" Binarises a given low frequency image such that it has mean lambda.\n    :param mask: Low frequency image, usually the result of `make_low_freq_image`\n    :param lam: Mean value of final mask\n    :param in_shape: Shape of inputs\n    :param max_soft: Softening value between 0 and 0.5 which smooths hard edges in the mask.\n    :return:\n    \"\"\"", "\n", "idx", "=", "mask", ".", "reshape", "(", "-", "1", ")", ".", "argsort", "(", ")", "[", ":", ":", "-", "1", "]", "\n", "mask", "=", "mask", ".", "reshape", "(", "-", "1", ")", "\n", "num", "=", "math", ".", "ceil", "(", "lam", "*", "mask", ".", "size", ")", "if", "random", ".", "random", "(", ")", ">", "0.5", "else", "math", ".", "floor", "(", "lam", "*", "mask", ".", "size", ")", "\n", "\n", "eff_soft", "=", "max_soft", "\n", "if", "max_soft", ">", "lam", "or", "max_soft", ">", "(", "1", "-", "lam", ")", ":", "\n", "        ", "eff_soft", "=", "min", "(", "lam", ",", "1", "-", "lam", ")", "\n", "\n", "", "soft", "=", "int", "(", "mask", ".", "size", "*", "eff_soft", ")", "\n", "num_low", "=", "num", "-", "soft", "\n", "num_high", "=", "num", "+", "soft", "\n", "\n", "mask", "[", "idx", "[", ":", "num_high", "]", "]", "=", "1", "\n", "mask", "[", "idx", "[", "num_low", ":", "]", "]", "=", "0", "\n", "mask", "[", "idx", "[", "num_low", ":", "num_high", "]", "]", "=", "np", ".", "linspace", "(", "1", ",", "0", ",", "(", "num_high", "-", "num_low", ")", ")", "\n", "\n", "mask", "=", "mask", ".", "reshape", "(", "(", "1", ",", "*", "in_shape", ")", ")", "\n", "return", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.msda.fmix_utils.sample_mask": [[121, 141], ["isinstance", "fmix_utils.sample_lam", "fmix_utils.make_low_freq_image", "fmix_utils.binarise_mask"], "function", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.msda.fmix_utils.sample_lam", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.msda.fmix_utils.make_low_freq_image", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.msda.fmix_utils.binarise_mask"], ["", "def", "sample_mask", "(", "alpha", ",", "decay_power", ",", "shape", ",", "max_soft", "=", "0.0", ",", "reformulate", "=", "False", ")", ":", "\n", "    ", "\"\"\" Samples a mean lambda from beta distribution parametrised by alpha, creates a low frequency image and binarises\n    it based on this lambda\n    :param alpha: Alpha value for beta distribution from which to sample mean of mask\n    :param decay_power: Decay power for frequency decay prop 1/f**d\n    :param shape: Shape of desired mask, list up to 3 dims\n    :param max_soft: Softening value between 0 and 0.5 which smooths hard edges in the mask.\n    :param reformulate: If True, uses the reformulation of [1].\n    \"\"\"", "\n", "if", "isinstance", "(", "shape", ",", "int", ")", ":", "\n", "        ", "shape", "=", "(", "shape", ",", ")", "\n", "\n", "# Choose lambda", "\n", "", "lam", "=", "sample_lam", "(", "alpha", ",", "reformulate", ")", "\n", "\n", "# Make mask, get mean / std", "\n", "mask", "=", "make_low_freq_image", "(", "decay_power", ",", "shape", ")", "\n", "mask", "=", "binarise_mask", "(", "mask", ",", "lam", ",", "shape", ",", "max_soft", ")", "\n", "\n", "return", "lam", ",", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.msda.fmix_utils.sample_and_apply": [[143, 158], ["fmix_utils.sample_mask", "numpy.random.permutation"], "function", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.msda.fmix_utils.sample_mask"], ["", "def", "sample_and_apply", "(", "x", ",", "alpha", ",", "decay_power", ",", "shape", ",", "max_soft", "=", "0.0", ",", "reformulate", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    :param x: Image batch on which to apply fmix of shape [b, c, shape*]\n    :param alpha: Alpha value for beta distribution from which to sample mean of mask\n    :param decay_power: Decay power for frequency decay prop 1/f**d\n    :param shape: Shape of desired mask, list up to 3 dims\n    :param max_soft: Softening value between 0 and 0.5 which smooths hard edges in the mask.\n    :param reformulate: If True, uses the reformulation of [1].\n    :return: mixed input, permutation indices, lambda value of mix,\n    \"\"\"", "\n", "lam", ",", "mask", "=", "sample_mask", "(", "alpha", ",", "decay_power", ",", "shape", ",", "max_soft", ",", "reformulate", ")", "\n", "index", "=", "np", ".", "random", ".", "permutation", "(", "x", ".", "shape", "[", "0", "]", ")", "\n", "\n", "x1", ",", "x2", "=", "x", "*", "mask", ",", "x", "[", "index", "]", "*", "(", "1", "-", "mask", ")", "\n", "return", "x1", "+", "x2", ",", "index", ",", "lam", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.msda.factory.get_msda": [[5, 20], ["dummy_msda.DummyMSDA", "fmix.FMix", "mixup.Mixup", "NotImplementedError"], "function", ["None"], ["def", "get_msda", "(", "loss", ",", "msda_config", ",", "log_stats", "=", "True", ",", "name_prefix", "=", "None", ")", ":", "\n", "    ", "if", "msda_config", "is", "None", ":", "\n", "        ", "return", "loss", ",", "DummyMSDA", "(", ")", "\n", "", "elif", "msda_config", "[", "'type'", "]", "==", "'FMix'", ":", "\n", "        ", "fmix", "=", "FMix", "(", "loss", ",", "decay_power", "=", "msda_config", "[", "'decay_power'", "]", ",", "alpha", "=", "msda_config", "[", "'alpha'", "]", ",", "\n", "log_stats", "=", "log_stats", ",", "name_prefix", "=", "name_prefix", ")", "\n", "fmix_loss", "=", "fmix", ".", "loss", "\n", "return", "fmix_loss", ",", "fmix", "\n", "", "elif", "msda_config", "[", "'type'", "]", "==", "'Mixup'", ":", "\n", "        ", "mixup", "=", "Mixup", "(", "loss", ",", "alpha", "=", "msda_config", "[", "'alpha'", "]", ",", "\n", "log_stats", "=", "log_stats", ",", "name_prefix", "=", "name_prefix", ")", "\n", "mixup_loss", "=", "mixup", ".", "loss", "\n", "return", "mixup_loss", ",", "mixup", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.msda.mixup.MixupLoss.__init__": [[7, 13], ["train_loss.MinMaxLoss.__init__"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models_32x32.shake_pyramidnet.ShakePyramidNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "base_loss", ",", "lam", "=", "None", ",", "index", "=", "None", ",", "log_stats", "=", "False", ",", "name_prefix", "=", "None", ")", ":", "\n", "        ", "name", "=", "'Mixup_'", "+", "base_loss", ".", "name", "\n", "super", "(", ")", ".", "__init__", "(", "name", ",", "expected_format", "=", "'logits'", ",", "log_stats", "=", "log_stats", ",", "name_prefix", "=", "name_prefix", ")", "\n", "self", ".", "index", "=", "index", "\n", "self", ".", "lam", "=", "lam", "\n", "self", ".", "base_loss", "=", "base_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.msda.mixup.MixupLoss.inner_max": [[14, 16], ["None"], "methods", ["None"], ["", "def", "inner_max", "(", "self", ",", "data", ",", "target", ")", ":", "\n", "        ", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.msda.mixup.MixupLoss.forward": [[17, 27], ["mixup.MixupLoss._log_stats", "train_loss.TrainLoss.reduce", "mixup.MixupLoss.base_loss", "mixup.MixupLoss.base_loss"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_loss.LoggingLoss._log_stats", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.adversarial_attacks.utils.reduce"], ["", "def", "forward", "(", "self", ",", "data", ",", "model_out", ",", "orig_data", ",", "y", ",", "reduction", "=", "'mean'", ")", ":", "\n", "        ", "assert", "self", ".", "index", "is", "not", "None", "\n", "assert", "self", ".", "lam", "is", "not", "None", "\n", "\n", "y2", "=", "y", "[", "self", ".", "index", "]", "\n", "loss_expanded", "=", "self", ".", "lam", "*", "self", ".", "base_loss", "(", "data", ",", "model_out", ",", "orig_data", ",", "y", ",", "reduction", "=", "'none'", ")", "+", "(", "1.", "-", "self", ".", "lam", ")", "*", "self", ".", "base_loss", "(", "data", ",", "model_out", ",", "orig_data", ",", "y2", ",", "reduction", "=", "'none'", ")", "\n", "\n", "self", ".", "_log_stats", "(", "loss_expanded", ")", "\n", "return", "TrainLoss", ".", "reduce", "(", "loss_expanded", ",", "reduction", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.msda.mixup.Mixup.__init__": [[29, 33], ["mixup.MixupLoss", "mixed_sample_data_augmentation.MixedSampleDataAugmentation.__init__"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models_32x32.shake_pyramidnet.ShakePyramidNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "base_loss", ",", "alpha", "=", "1", ",", "log_stats", "=", "False", ",", "name_prefix", "=", "None", ")", ":", "\n", "        ", "self", ".", "alpha", "=", "alpha", "\n", "loss", "=", "MixupLoss", "(", "base_loss", ",", "log_stats", "=", "log_stats", ",", "name_prefix", "=", "name_prefix", ")", "\n", "super", "(", ")", ".", "__init__", "(", "loss", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.msda.mixup.Mixup.apply_mix": [[34, 47], ["torch.randperm().to", "numpy.random.beta", "torch.randperm", "x.size"], "methods", ["None"], ["", "def", "apply_mix", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "alpha", ">", "0", ":", "\n", "            ", "lam", "=", "np", ".", "random", ".", "beta", "(", "self", ".", "alpha", ",", "self", ".", "alpha", ")", "\n", "", "else", ":", "\n", "            ", "lam", "=", "1", "\n", "\n", "", "index", "=", "torch", ".", "randperm", "(", "x", ".", "size", "(", "0", ")", ")", ".", "to", "(", "x", ".", "device", ")", "\n", "x_mix", "=", "lam", "*", "x", "+", "(", "1", "-", "lam", ")", "*", "x", "[", "index", ",", ":", "]", "\n", "\n", "self", ".", "loss", ".", "od_weight", "=", "lam", "\n", "self", ".", "loss", ".", "index", "=", "index", "\n", "\n", "return", "x_mix", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.msda.config_creators.create_fmix_config": [[1, 4], ["None"], "function", ["None"], ["def", "create_fmix_config", "(", "decay_power", "=", "3.0", ",", "alpha", "=", "1.0", ")", ":", "\n", "    ", "fmix_config", "=", "{", "'type'", ":", "'FMix'", ",", "'decay_power'", ":", "decay_power", ",", "'alpha'", ":", "alpha", "}", "\n", "return", "fmix_config", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.msda.config_creators.create_mixup_config": [[5, 8], ["None"], "function", ["None"], ["", "def", "create_mixup_config", "(", "alpha", "=", "1.0", ")", ":", "\n", "    ", "fmix_config", "=", "{", "'type'", ":", "'Mixup'", ",", "'alpha'", ":", "alpha", "}", "\n", "return", "fmix_config", "\n", "", ""]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.optimizers.sam.SAM.__init__": [[5, 13], ["dict", "super().__init__", "base_optimizer"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models_32x32.shake_pyramidnet.ShakePyramidNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "params", ",", "base_optimizer", ",", "rho", "=", "0.05", ",", "adaptive", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "        ", "assert", "rho", ">=", "0.0", ",", "f\"Invalid rho, should be non-negative: {rho}\"", "\n", "\n", "defaults", "=", "dict", "(", "rho", "=", "rho", ",", "adaptive", "=", "adaptive", ",", "**", "kwargs", ")", "\n", "super", "(", "SAM", ",", "self", ")", ".", "__init__", "(", "params", ",", "defaults", ")", "\n", "\n", "self", ".", "base_optimizer", "=", "base_optimizer", "(", "self", ".", "param_groups", ",", "**", "kwargs", ")", "\n", "self", ".", "param_groups", "=", "self", ".", "base_optimizer", ".", "param_groups", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.optimizers.sam.SAM.first_step": [[14, 27], ["torch.no_grad", "sam.SAM._grad_norm", "sam.SAM.zero_grad", "p.data.clone", "p.add_", "scale.to", "torch.pow"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.optimizers.sam.SAM._grad_norm"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "first_step", "(", "self", ",", "zero_grad", "=", "False", ")", ":", "\n", "        ", "grad_norm", "=", "self", ".", "_grad_norm", "(", ")", "\n", "for", "group", "in", "self", ".", "param_groups", ":", "\n", "            ", "scale", "=", "group", "[", "\"rho\"", "]", "/", "(", "grad_norm", "+", "1e-12", ")", "\n", "\n", "for", "p", "in", "group", "[", "\"params\"", "]", ":", "\n", "                ", "if", "p", ".", "grad", "is", "None", ":", "continue", "\n", "self", ".", "state", "[", "p", "]", "[", "\"old_p\"", "]", "=", "p", ".", "data", ".", "clone", "(", ")", "\n", "e_w", "=", "(", "torch", ".", "pow", "(", "p", ",", "2", ")", "if", "group", "[", "\"adaptive\"", "]", "else", "1.0", ")", "*", "p", ".", "grad", "*", "scale", ".", "to", "(", "p", ")", "\n", "p", ".", "add_", "(", "e_w", ")", "# climb to the local maximum \"w + e(w)\"", "\n", "\n", "", "", "if", "zero_grad", ":", "self", ".", "zero_grad", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.optimizers.sam.SAM.second_step": [[28, 38], ["torch.no_grad", "sam.SAM.base_optimizer.step", "sam.SAM.zero_grad"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.schedulers.scheduler.Scheduler.step"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "second_step", "(", "self", ",", "zero_grad", "=", "False", ")", ":", "\n", "        ", "for", "group", "in", "self", ".", "param_groups", ":", "\n", "            ", "for", "p", "in", "group", "[", "\"params\"", "]", ":", "\n", "                ", "if", "p", ".", "grad", "is", "None", ":", "continue", "\n", "p", ".", "data", "=", "self", ".", "state", "[", "p", "]", "[", "\"old_p\"", "]", "# get back to \"w\" from \"w + e(w)\"", "\n", "\n", "", "", "self", ".", "base_optimizer", ".", "step", "(", ")", "# do the actual \"sharpness-aware\" update", "\n", "\n", "if", "zero_grad", ":", "self", ".", "zero_grad", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.optimizers.sam.SAM.step": [[39, 47], ["torch.no_grad", "sam.SAM.first_step", "closure", "sam.SAM.second_step", "torch.enable_grad"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.optimizers.sam.SAM.first_step", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.optimizers.sam.SAM.second_step"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "step", "(", "self", ",", "closure", "=", "None", ")", ":", "\n", "        ", "assert", "closure", "is", "not", "None", ",", "\"Sharpness Aware Minimization requires closure, but it was not provided\"", "\n", "closure", "=", "torch", ".", "enable_grad", "(", ")", "(", "closure", ")", "# the closure should do a full forward-backward pass", "\n", "\n", "self", ".", "first_step", "(", "zero_grad", "=", "True", ")", "\n", "closure", "(", ")", "\n", "self", ".", "second_step", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.optimizers.sam.SAM._grad_norm": [[48, 59], ["torch.norm", "torch.stack", "torch.abs"], "methods", ["None"], ["", "def", "_grad_norm", "(", "self", ")", ":", "\n", "        ", "shared_device", "=", "self", ".", "param_groups", "[", "0", "]", "[", "\"params\"", "]", "[", "0", "]", ".", "device", "# put everything on the same device, in case of model parallelism", "\n", "norm", "=", "torch", ".", "norm", "(", "\n", "torch", ".", "stack", "(", "[", "\n", "(", "(", "torch", ".", "abs", "(", "p", ")", "if", "group", "[", "\"adaptive\"", "]", "else", "1.0", ")", "*", "p", ".", "grad", ")", ".", "norm", "(", "p", "=", "2", ")", ".", "to", "(", "shared_device", ")", "\n", "for", "group", "in", "self", ".", "param_groups", "for", "p", "in", "group", "[", "\"params\"", "]", "\n", "if", "p", ".", "grad", "is", "not", "None", "\n", "]", ")", ",", "\n", "p", "=", "2", "\n", ")", "\n", "return", "norm", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.optimizers.sam.SAM.load_state_dict": [[60, 63], ["super().load_state_dict"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.schedulers.scheduler.Scheduler.load_state_dict"], ["", "def", "load_state_dict", "(", "self", ",", "state_dict", ")", ":", "\n", "        ", "super", "(", ")", ".", "load_state_dict", "(", "state_dict", ")", "\n", "self", ".", "base_optimizer", ".", "param_groups", "=", "self", ".", "param_groups", "\n", "", "", ""]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.optimizers.config_creators.create_optimizer_config": [[1, 10], ["optimizer_type.lower"], "function", ["None"], ["def", "create_fmix_config", "(", "decay_power", "=", "3.0", ",", "alpha", "=", "1.0", ")", ":", "\n", "    ", "fmix_config", "=", "{", "'type'", ":", "'FMix'", ",", "'decay_power'", ":", "decay_power", ",", "'alpha'", ":", "alpha", "}", "\n", "return", "fmix_config", "\n", "\n", "", "def", "create_mixup_config", "(", "alpha", "=", "1.0", ")", ":", "\n", "    ", "fmix_config", "=", "{", "'type'", ":", "'Mixup'", ",", "'alpha'", ":", "alpha", "}", "\n", "return", "fmix_config", "\n", "", ""]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.optimizers.config_creators.create_sam_optimizer_config": [[11, 20], ["None"], "function", ["None"], []], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.optimizers.config_creators.add_cosine_swa_to_optimizer_config": [[21, 31], ["None"], "function", ["None"], []], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.optimizers.config_creators.add_constant_swa_to_optimizer_config": [[33, 40], ["None"], "function", ["None"], []], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.schedulers.scheduler_factory.create_scheduler": [[7, 32], ["cosine_lr.CosineLRScheduler", "step_lr.StepLRScheduler", "NotImplementedError"], "function", ["None"], ["def", "create_scheduler", "(", "args", ",", "optimizer", ")", ":", "\n", "    ", "num_epochs", "=", "args", "[", "'cycle_length'", "]", "\n", "noise_range", "=", "None", "\n", "\n", "if", "args", "[", "'scheduler_type'", "]", "==", "'CosineAnnealing'", ":", "\n", "        ", "lr_scheduler", "=", "CosineLRScheduler", "(", "\n", "optimizer", ",", "\n", "t_initial", "=", "num_epochs", ",", "\n", "lr_min", "=", "args", "[", "'lr_min'", "]", ",", "\n", "warmup_t", "=", "args", "[", "'warmup_length'", "]", ",", "\n", "t_mul", "=", "args", "[", "'cycle_multiplier'", "]", ",", "\n", "noise_range_t", "=", "noise_range", ",", "\n", ")", "\n", "", "elif", "args", "[", "'scheduler_type'", "]", "==", "'StepLR'", ":", "\n", "        ", "lr_scheduler", "=", "StepLRScheduler", "(", "\n", "optimizer", ",", "\n", "decay_epochs", "=", "args", "[", "'decay_epochs'", "]", ",", "\n", "decay_rate", "=", "args", "[", "'decay_rate'", "]", ",", "\n", "warmup_t", "=", "args", "[", "'warmup_length'", "]", ",", "\n", "noise_range_t", "=", "noise_range", ",", "\n", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "f'Scheduler {args.sched} not implemented'", ")", "\n", "\n", "", "return", "lr_scheduler", ",", "num_epochs", "", "", ""]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.schedulers.cosine_lr.CosineLRScheduler.__init__": [[27, 65], ["scheduler.Scheduler.__init__", "_logger.warning", "super().update_groups"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models_32x32.shake_pyramidnet.ShakePyramidNet.__init__", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.schedulers.scheduler.Scheduler.update_groups"], ["def", "__init__", "(", "self", ",", "\n", "optimizer", ":", "torch", ".", "optim", ".", "Optimizer", ",", "\n", "t_initial", ":", "int", ",", "\n", "t_mul", ":", "float", "=", "1.", ",", "\n", "lr_min", ":", "float", "=", "0.", ",", "\n", "decay_rate", ":", "float", "=", "1.", ",", "\n", "warmup_t", "=", "0", ",", "\n", "warmup_lr_init", "=", "0", ",", "\n", "warmup_prefix", "=", "False", ",", "\n", "cycle_limit", "=", "0", ",", "\n", "noise_range_t", "=", "None", ",", "\n", "noise_pct", "=", "0.67", ",", "\n", "noise_std", "=", "1.0", ",", "\n", "noise_seed", "=", "42", ",", "\n", "initialize", "=", "True", ")", "->", "None", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\n", "optimizer", ",", "param_group_field", "=", "\"lr\"", ",", "\n", "noise_range_t", "=", "noise_range_t", ",", "noise_pct", "=", "noise_pct", ",", "noise_std", "=", "noise_std", ",", "noise_seed", "=", "noise_seed", ",", "\n", "initialize", "=", "initialize", ")", "\n", "\n", "assert", "t_initial", ">=", "0", "\n", "assert", "lr_min", ">=", "0", "\n", "if", "t_initial", "==", "1", "and", "t_mul", "==", "1", "and", "decay_rate", "==", "1", ":", "\n", "            ", "_logger", ".", "warning", "(", "\"Cosine annealing scheduler will have no effect on the learning \"", "\n", "\"rate since t_initial = t_mul = eta_mul = 1.\"", ")", "\n", "", "self", ".", "t_initial", "=", "t_initial", "\n", "self", ".", "t_mul", "=", "t_mul", "\n", "self", ".", "lr_min", "=", "lr_min", "\n", "self", ".", "decay_rate", "=", "decay_rate", "\n", "self", ".", "cycle_limit", "=", "cycle_limit", "\n", "self", ".", "warmup_t", "=", "warmup_t", "\n", "self", ".", "warmup_lr_init", "=", "warmup_lr_init", "\n", "self", ".", "warmup_prefix", "=", "warmup_prefix", "\n", "if", "self", ".", "warmup_t", ":", "\n", "            ", "self", ".", "warmup_steps", "=", "[", "(", "v", "-", "warmup_lr_init", ")", "/", "self", ".", "warmup_t", "for", "v", "in", "self", ".", "base_values", "]", "\n", "super", "(", ")", ".", "update_groups", "(", "self", ".", "warmup_lr_init", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "warmup_steps", "=", "[", "1", "for", "_", "in", "self", ".", "base_values", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.schedulers.cosine_lr.CosineLRScheduler._get_lr": [[66, 94], ["math.floor", "math.log", "math.cos"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_loss.DistanceLogger.log"], ["", "", "def", "_get_lr", "(", "self", ",", "t", ")", ":", "\n", "        ", "if", "t", "<", "self", ".", "warmup_t", ":", "\n", "            ", "lrs", "=", "[", "self", ".", "warmup_lr_init", "+", "t", "*", "s", "for", "s", "in", "self", ".", "warmup_steps", "]", "\n", "", "else", ":", "\n", "            ", "if", "self", ".", "warmup_prefix", ":", "\n", "                ", "t", "=", "t", "-", "self", ".", "warmup_t", "\n", "\n", "", "if", "self", ".", "t_mul", "!=", "1", ":", "\n", "                ", "i", "=", "math", ".", "floor", "(", "math", ".", "log", "(", "1", "-", "t", "/", "self", ".", "t_initial", "*", "(", "1", "-", "self", ".", "t_mul", ")", ",", "self", ".", "t_mul", ")", ")", "\n", "t_i", "=", "self", ".", "t_mul", "**", "i", "*", "self", ".", "t_initial", "\n", "t_curr", "=", "t", "-", "(", "1", "-", "self", ".", "t_mul", "**", "i", ")", "/", "(", "1", "-", "self", ".", "t_mul", ")", "*", "self", ".", "t_initial", "\n", "", "else", ":", "\n", "                ", "i", "=", "t", "//", "self", ".", "t_initial", "\n", "t_i", "=", "self", ".", "t_initial", "\n", "t_curr", "=", "t", "-", "(", "self", ".", "t_initial", "*", "i", ")", "\n", "\n", "", "gamma", "=", "self", ".", "decay_rate", "**", "i", "\n", "lr_min", "=", "self", ".", "lr_min", "*", "gamma", "\n", "lr_max_values", "=", "[", "v", "*", "gamma", "for", "v", "in", "self", ".", "base_values", "]", "\n", "\n", "if", "self", ".", "cycle_limit", "==", "0", "or", "(", "self", ".", "cycle_limit", ">", "0", "and", "i", "<", "self", ".", "cycle_limit", ")", ":", "\n", "                ", "lrs", "=", "[", "\n", "lr_min", "+", "0.5", "*", "(", "lr_max", "-", "lr_min", ")", "*", "(", "1", "+", "math", ".", "cos", "(", "math", ".", "pi", "*", "t_curr", "/", "t_i", ")", ")", "for", "lr_max", "in", "lr_max_values", "\n", "]", "\n", "", "else", ":", "\n", "                ", "lrs", "=", "[", "self", ".", "lr_min", "for", "_", "in", "self", ".", "base_values", "]", "\n", "\n", "", "", "return", "lrs", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.schedulers.cosine_lr.CosineLRScheduler.get_epoch_values": [[95, 97], ["cosine_lr.CosineLRScheduler._get_lr"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.schedulers.step_lr.StepLRScheduler._get_lr"], ["", "def", "get_epoch_values", "(", "self", ",", "epoch", ":", "float", ")", ":", "\n", "        ", "return", "self", ".", "_get_lr", "(", "epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.schedulers.cosine_lr.CosineLRScheduler.get_cycle_length": [[98, 106], ["max", "int", "math.floor"], "methods", ["None"], ["", "def", "get_cycle_length", "(", "self", ",", "cycles", "=", "0", ")", ":", "\n", "        ", "if", "not", "cycles", ":", "\n", "            ", "cycles", "=", "self", ".", "cycle_limit", "\n", "", "cycles", "=", "max", "(", "1", ",", "cycles", ")", "\n", "if", "self", ".", "t_mul", "==", "1.0", ":", "\n", "            ", "return", "self", ".", "t_initial", "*", "cycles", "\n", "", "else", ":", "\n", "            ", "return", "int", "(", "math", ".", "floor", "(", "-", "self", ".", "t_initial", "*", "(", "self", ".", "t_mul", "**", "cycles", "-", "1", ")", "/", "(", "1", "-", "self", ".", "t_mul", ")", ")", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.schedulers.step_lr.StepLRScheduler.__init__": [[17, 43], ["scheduler.Scheduler.__init__", "super().update_groups"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models_32x32.shake_pyramidnet.ShakePyramidNet.__init__", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.schedulers.scheduler.Scheduler.update_groups"], ["def", "__init__", "(", "self", ",", "\n", "optimizer", ":", "torch", ".", "optim", ".", "Optimizer", ",", "\n", "decay_epochs", ":", "list", ",", "\n", "decay_rate", ":", "float", "=", "1.", ",", "\n", "warmup_t", "=", "0", ",", "\n", "warmup_lr_init", "=", "0", ",", "\n", "noise_range_t", "=", "None", ",", "\n", "noise_pct", "=", "0.67", ",", "\n", "noise_std", "=", "1.0", ",", "\n", "noise_seed", "=", "42", ",", "\n", "initialize", "=", "True", ",", "\n", ")", "->", "None", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\n", "optimizer", ",", "param_group_field", "=", "\"lr\"", ",", "\n", "noise_range_t", "=", "noise_range_t", ",", "noise_pct", "=", "noise_pct", ",", "noise_std", "=", "noise_std", ",", "noise_seed", "=", "noise_seed", ",", "\n", "initialize", "=", "initialize", ")", "\n", "\n", "self", ".", "decay_epochs", "=", "decay_epochs", "\n", "self", ".", "decay_rate", "=", "decay_rate", "\n", "self", ".", "warmup_t", "=", "warmup_t", "\n", "self", ".", "warmup_lr_init", "=", "warmup_lr_init", "\n", "if", "self", ".", "warmup_t", ":", "\n", "            ", "self", ".", "warmup_steps", "=", "[", "(", "v", "-", "warmup_lr_init", ")", "/", "self", ".", "warmup_t", "for", "v", "in", "self", ".", "base_values", "]", "\n", "super", "(", ")", ".", "update_groups", "(", "self", ".", "warmup_lr_init", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "warmup_steps", "=", "[", "1", "for", "_", "in", "self", ".", "base_values", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.schedulers.step_lr.StepLRScheduler._get_lr": [[44, 54], ["None"], "methods", ["None"], ["", "", "def", "_get_lr", "(", "self", ",", "t", ")", ":", "\n", "        ", "if", "t", "<", "self", ".", "warmup_t", ":", "\n", "            ", "lrs", "=", "[", "self", ".", "warmup_lr_init", "+", "t", "*", "s", "for", "s", "in", "self", ".", "warmup_steps", "]", "\n", "", "else", ":", "\n", "            ", "decay_factor", "=", "1.", "\n", "for", "epoch", "in", "self", ".", "decay_epochs", ":", "\n", "                ", "if", "t", ">=", "epoch", ":", "\n", "                    ", "decay_factor", "*=", "self", ".", "decay_rate", "\n", "", "", "lrs", "=", "[", "v", "*", "decay_factor", "for", "v", "in", "self", ".", "base_values", "]", "\n", "", "return", "lrs", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.schedulers.step_lr.StepLRScheduler.get_epoch_values": [[55, 57], ["step_lr.StepLRScheduler._get_lr"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.schedulers.step_lr.StepLRScheduler._get_lr"], ["", "def", "get_epoch_values", "(", "self", ",", "epoch", ":", "float", ")", ":", "\n", "        ", "return", "self", ".", "_get_lr", "(", "epoch", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.schedulers.scheduler.Scheduler.__init__": [[29, 60], ["scheduler.Scheduler.update_groups", "enumerate", "enumerate", "KeyError", "KeyError"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.schedulers.scheduler.Scheduler.update_groups"], ["def", "__init__", "(", "self", ",", "\n", "optimizer", ":", "torch", ".", "optim", ".", "Optimizer", ",", "\n", "param_group_field", ":", "str", ",", "\n", "noise_range_t", "=", "None", ",", "\n", "noise_type", "=", "'normal'", ",", "\n", "noise_pct", "=", "0.67", ",", "\n", "noise_std", "=", "1.0", ",", "\n", "noise_seed", "=", "None", ",", "\n", "initialize", ":", "bool", "=", "True", ")", "->", "None", ":", "\n", "        ", "self", ".", "optimizer", "=", "optimizer", "\n", "self", ".", "param_group_field", "=", "param_group_field", "\n", "self", ".", "_initial_param_group_field", "=", "f\"initial_{param_group_field}\"", "\n", "if", "initialize", ":", "\n", "            ", "for", "i", ",", "group", "in", "enumerate", "(", "self", ".", "optimizer", ".", "param_groups", ")", ":", "\n", "                ", "if", "param_group_field", "not", "in", "group", ":", "\n", "                    ", "raise", "KeyError", "(", "f\"{param_group_field} missing from param_groups[{i}]\"", ")", "\n", "#group.setdefault(self._initial_param_group_field, group[param_group_field])", "\n", "", "group", "[", "self", ".", "_initial_param_group_field", "]", "=", "group", "[", "param_group_field", "]", "\n", "", "", "else", ":", "\n", "            ", "for", "i", ",", "group", "in", "enumerate", "(", "self", ".", "optimizer", ".", "param_groups", ")", ":", "\n", "                ", "if", "self", ".", "_initial_param_group_field", "not", "in", "group", ":", "\n", "                    ", "raise", "KeyError", "(", "f\"{self._initial_param_group_field} missing from param_groups[{i}]\"", ")", "\n", "", "", "", "self", ".", "base_values", "=", "[", "group", "[", "self", ".", "_initial_param_group_field", "]", "for", "group", "in", "self", ".", "optimizer", ".", "param_groups", "]", "\n", "self", ".", "metric", "=", "None", "# any point to having this for all?", "\n", "self", ".", "noise_range_t", "=", "noise_range_t", "\n", "self", ".", "noise_pct", "=", "noise_pct", "\n", "self", ".", "noise_type", "=", "noise_type", "\n", "self", ".", "noise_std", "=", "noise_std", "\n", "self", ".", "noise_seed", "=", "noise_seed", "if", "noise_seed", "is", "not", "None", "else", "42", "\n", "self", ".", "_last_lr", "=", "None", "\n", "self", ".", "update_groups", "(", "self", ".", "base_values", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.schedulers.scheduler.Scheduler.get_last_lr": [[61, 65], ["None"], "methods", ["None"], ["", "def", "get_last_lr", "(", "self", ")", ":", "\n", "        ", "\"\"\" Return last computed learning rate by current scheduler.\n        \"\"\"", "\n", "return", "self", ".", "_last_lr", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.schedulers.scheduler.Scheduler.state_dict": [[66, 68], ["scheduler.Scheduler.__dict__.items"], "methods", ["None"], ["", "def", "state_dict", "(", "self", ")", "->", "Dict", "[", "str", ",", "Any", "]", ":", "\n", "        ", "return", "{", "key", ":", "value", "for", "key", ",", "value", "in", "self", ".", "__dict__", ".", "items", "(", ")", "if", "key", "!=", "'optimizer'", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.schedulers.scheduler.Scheduler.load_state_dict": [[69, 71], ["scheduler.Scheduler.__dict__.update"], "methods", ["None"], ["", "def", "load_state_dict", "(", "self", ",", "state_dict", ":", "Dict", "[", "str", ",", "Any", "]", ")", "->", "None", ":", "\n", "        ", "self", ".", "__dict__", ".", "update", "(", "state_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.schedulers.scheduler.Scheduler.get_epoch_values": [[72, 74], ["None"], "methods", ["None"], ["", "def", "get_epoch_values", "(", "self", ",", "epoch", ":", "float", ")", ":", "\n", "        ", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.schedulers.scheduler.Scheduler.step": [[75, 81], ["scheduler.Scheduler.get_epoch_values", "scheduler.Scheduler._add_noise", "scheduler.Scheduler.update_groups"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.schedulers.scheduler.Scheduler.get_epoch_values", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.schedulers.scheduler.Scheduler._add_noise", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.schedulers.scheduler.Scheduler.update_groups"], ["", "def", "step", "(", "self", ",", "epoch", ":", "float", ",", "metric", ":", "float", "=", "None", ")", "->", "None", ":", "\n", "        ", "self", ".", "metric", "=", "metric", "\n", "values", "=", "self", ".", "get_epoch_values", "(", "epoch", ")", "\n", "if", "values", "is", "not", "None", ":", "\n", "            ", "values", "=", "self", ".", "_add_noise", "(", "values", ",", "epoch", ")", "\n", "self", ".", "update_groups", "(", "values", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.schedulers.scheduler.Scheduler.update_groups": [[82, 89], ["zip", "isinstance", "len"], "methods", ["None"], ["", "", "def", "update_groups", "(", "self", ",", "values", ")", ":", "\n", "        ", "if", "not", "isinstance", "(", "values", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "            ", "values", "=", "[", "values", "]", "*", "len", "(", "self", ".", "optimizer", ".", "param_groups", ")", "\n", "", "for", "param_group", ",", "value", "in", "zip", "(", "self", ".", "optimizer", ".", "param_groups", ",", "values", ")", ":", "\n", "            ", "param_group", "[", "self", ".", "param_group_field", "]", "=", "value", "\n", "\n", "", "self", ".", "_last_lr", "=", "[", "group", "[", "'lr'", "]", "for", "group", "in", "self", ".", "optimizer", ".", "param_groups", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.schedulers.scheduler.Scheduler._add_noise": [[90, 109], ["isinstance", "torch.Generator", "torch.Generator.manual_seed", "torch.randn().item", "abs", "torch.randn", "torch.rand().item", "torch.rand"], "methods", ["None"], ["", "def", "_add_noise", "(", "self", ",", "lrs", ",", "t", ")", ":", "\n", "        ", "if", "self", ".", "noise_range_t", "is", "not", "None", ":", "\n", "            ", "if", "isinstance", "(", "self", ".", "noise_range_t", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "                ", "apply_noise", "=", "self", ".", "noise_range_t", "[", "0", "]", "<=", "t", "<", "self", ".", "noise_range_t", "[", "1", "]", "\n", "", "else", ":", "\n", "                ", "apply_noise", "=", "t", ">=", "self", ".", "noise_range_t", "\n", "", "if", "apply_noise", ":", "\n", "                ", "g", "=", "torch", ".", "Generator", "(", ")", "\n", "g", ".", "manual_seed", "(", "self", ".", "noise_seed", "+", "t", ")", "\n", "if", "self", ".", "noise_type", "==", "'normal'", ":", "\n", "                    ", "while", "True", ":", "\n", "# resample if noise out of percent limit, brute force but shouldn't spin much", "\n", "                        ", "noise", "=", "torch", ".", "randn", "(", "1", ",", "generator", "=", "g", ")", ".", "item", "(", ")", "\n", "if", "abs", "(", "noise", ")", "<", "self", ".", "noise_pct", ":", "\n", "                            ", "break", "\n", "", "", "", "else", ":", "\n", "                    ", "noise", "=", "2", "*", "(", "torch", ".", "rand", "(", "1", ",", "generator", "=", "g", ")", ".", "item", "(", ")", "-", "0.5", ")", "*", "self", ".", "noise_pct", "\n", "", "lrs", "=", "[", "v", "+", "v", "*", "noise", "for", "v", "in", "lrs", "]", "\n", "", "", "return", "lrs", "\n", "", "", ""]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.schedulers.config_creators.create_cosine_annealing_scheduler_config": [[2, 7], ["None"], "function", ["None"], ["    ", "fmix_config", "=", "{", "'type'", ":", "'FMix'", ",", "'decay_power'", ":", "decay_power", ",", "'alpha'", ":", "alpha", "}", "\n", "return", "fmix_config", "\n", "\n", "", "def", "create_mixup_config", "(", "alpha", "=", "1.0", ")", ":", "\n", "    ", "fmix_config", "=", "{", "'type'", ":", "'Mixup'", ",", "'alpha'", ":", "alpha", "}", "\n", "return", "fmix_config", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.schedulers.config_creators.create_piecewise_consant_scheduler_config": [[8, 13], ["None"], "function", ["None"], ["", ""]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.adversarial_attacks.fgm.FGM.__init__": [[10, 16], ["restartattack.RestartAttack.__init__"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models_32x32.shake_pyramidnet.ShakePyramidNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "eps", ",", "num_classes", ",", "norm", "=", "'inf'", ",", "loss", "=", "'CrossEntropy'", ",", "restarts", "=", "0", ",", "init_noise_generator", "=", "None", ",", "\n", "model", "=", "None", ",", "save_trajectory", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "loss", ",", "restarts", ",", "num_classes", ",", "model", "=", "model", ",", "save_trajectory", "=", "save_trajectory", ")", "\n", "self", ".", "eps", "=", "eps", "\n", "self", ".", "norm", "=", "norm", "\n", "self", ".", "init_noise_generator", "=", "init_noise_generator", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.adversarial_attacks.fgm.FGM._get_trajectory_depth": [[17, 19], ["None"], "methods", ["None"], ["", "def", "_get_trajectory_depth", "(", "self", ")", ":", "\n", "        ", "return", "2", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.adversarial_attacks.fgm.FGM.get_config_dict": [[20, 31], ["isinstance"], "methods", ["None"], ["", "def", "get_config_dict", "(", "self", ")", ":", "\n", "        ", "dict", "=", "{", "}", "\n", "dict", "[", "'type'", "]", "=", "'FGM'", "\n", "dict", "[", "'eps'", "]", "=", "self", ".", "eps", "\n", "dict", "[", "'norm'", "]", "=", "self", ".", "norm", "\n", "if", "isinstance", "(", "self", ".", "loss", ",", "str", ")", ":", "\n", "            ", "dict", "[", "'loss'", "]", "=", "self", ".", "loss", "\n", "", "else", ":", "\n", "            ", "dict", "[", "'loss'", "]", "=", "'custom'", "\n", "", "dict", "[", "'restarts'", "]", "=", "self", ".", "restarts", "\n", "return", "dict", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.adversarial_attacks.fgm.FGM.perturb_inner": [[33, 61], ["fgm.FGM._get_loss_f", "utils.initialize_perturbation", "utils.project_perturbation.requires_grad_", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "fgm.FGM.model", "fgm.FGM.", "fgm.FGM.mean", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "utils.project_perturbation", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "fgm.FGM.", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "fgm.FGM.model", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "utils.normalize_perturbation"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.adversarial_attacks.adversarialattack.AdversarialAttack._get_loss_f", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.adversarial_attacks.utils.initialize_perturbation", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.adversarial_attacks.utils.project_perturbation", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.adversarial_attacks.utils.normalize_perturbation"], ["", "def", "perturb_inner", "(", "self", ",", "x", ",", "y", ",", "targeted", "=", "False", ",", "x_init", "=", "None", ")", ":", "\n", "        ", "l_f", "=", "self", ".", "_get_loss_f", "(", "x", ",", "y", ",", "targeted", ",", "'none'", ")", "\n", "\n", "pert", "=", "initialize_perturbation", "(", "x", ",", "self", ".", "eps", ",", "self", ".", "norm", ",", "x_init", ",", "self", ".", "init_noise_generator", ")", "\n", "\n", "pert", ".", "requires_grad_", "(", "True", ")", "\n", "\n", "with", "torch", ".", "enable_grad", "(", ")", ":", "\n", "            ", "p_data", "=", "x", "+", "pert", "\n", "out", "=", "self", ".", "model", "(", "p_data", ")", "\n", "loss_expanded", "=", "l_f", "(", "p_data", ",", "out", ")", "\n", "loss", "=", "loss_expanded", ".", "mean", "(", ")", "\n", "grad", "=", "torch", ".", "autograd", ".", "grad", "(", "loss", ",", "pert", ")", "[", "0", "]", "\n", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "pert", "=", "project_perturbation", "(", "pert", "-", "self", ".", "eps", "*", "normalize_perturbation", "(", "grad", ",", "self", ".", "norm", ")", ",", "self", ".", "eps", ",", "self", ".", "norm", ")", "\n", "p_data", "=", "x", "+", "pert", "\n", "p_data", "=", "torch", ".", "clamp", "(", "p_data", ",", "0", ",", "1", ")", "\n", "final_loss", "=", "l_f", "(", "p_data", ",", "self", ".", "model", "(", "p_data", ")", ")", "\n", "\n", "if", "self", ".", "save_trajectory", ":", "\n", "                ", "trajectory", "=", "torch", ".", "zeros", "(", "(", "2", ",", ")", "+", "x", ".", "shape", ",", "device", "=", "x", ".", "device", ")", "\n", "trajectory", "[", "0", ",", ":", "]", "=", "x", "\n", "trajectory", "[", "1", ",", ":", "]", "=", "p_data", "\n", "", "else", ":", "\n", "                ", "trajectory", "=", "None", "\n", "\n", "", "", "return", "p_data", ",", "final_loss", ",", "trajectory", "\n", "", "", ""]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.adversarial_attacks.adversarialattack.AdversarialAttack.__init__": [[9, 21], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "loss", ",", "num_classes", ",", "model", "=", "None", ",", "save_trajectory", "=", "False", ")", ":", "\n", "#loss should either be a string specifying one of the predefined loss functions", "\n", "#OR", "\n", "#a custom loss function taking 4 arguments as train_loss class", "\n", "        ", "self", ".", "loss", "=", "loss", "\n", "self", ".", "save_trajectory", "=", "save_trajectory", "\n", "self", ".", "last_trajectory", "=", "None", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "if", "model", "is", "not", "None", ":", "\n", "            ", "self", ".", "model", "=", "model", "\n", "", "else", ":", "\n", "            ", "self", ".", "model", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.adversarial_attacks.adversarialattack.AdversarialAttack.__call__": [[22, 24], ["adversarialattack.AdversarialAttack.perturb"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.adversarial_attacks.restartattack.RestartAttack.perturb"], ["", "", "def", "__call__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "self", ".", "perturb", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.adversarial_attacks.adversarialattack.AdversarialAttack.set_loss": [[25, 27], ["None"], "methods", ["None"], ["", "def", "set_loss", "(", "self", ",", "loss", ")", ":", "\n", "        ", "self", ".", "loss", "=", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.adversarial_attacks.adversarialattack.AdversarialAttack.set_model": [[28, 30], ["None"], "methods", ["None"], ["", "def", "set_model", "(", "self", ",", "model", ")", ":", "\n", "        ", "self", ".", "model", "=", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.adversarial_attacks.adversarialattack.AdversarialAttack._get_loss_f": [[31, 77], ["isinstance", "adversarialattack.AdversarialAttack.loss.lower", "adversarialattack.AdversarialAttack.loss", "adversarialattack.AdversarialAttack.loss.lower", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "adversarialattack.AdversarialAttack.loss.lower", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "utils.reduce", "torch.one_hot", "torch.one_hot", "torch.one_hot", "y_oh.float.float.float", "torch.one_hot", "torch.one_hot", "torch.one_hot", "y_oh.float.float.float", "adversarialattack.AdversarialAttack.loss.lower", "utils.reduce", "torch.kl_div().sum", "torch.kl_div().sum", "torch.kl_div().sum", "utils.logits_diff_loss", "adversarialattack.AdversarialAttack.loss.lower", "ValueError", "torch.kl_div().sum", "torch.kl_div().sum", "torch.kl_div().sum", "utils.logits_diff_loss", "utils.confidence_loss", "torch.one_hot", "torch.one_hot", "torch.one_hot", "y_oh.float.float.float", "torch.one_hot", "torch.one_hot", "torch.one_hot", "y_oh.float.float.float", "torch.kl_div", "torch.kl_div", "torch.kl_div", "utils.confidence_loss", "utils.conf_diff_loss", "torch.kl_div", "torch.kl_div", "torch.kl_div", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "utils.conf_diff_loss", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.adversarial_attacks.utils.reduce", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.adversarial_attacks.utils.reduce", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.adversarial_attacks.utils.logits_diff_loss", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.adversarial_attacks.utils.logits_diff_loss", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.adversarial_attacks.utils.confidence_loss", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.adversarial_attacks.utils.confidence_loss", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.adversarial_attacks.utils.conf_diff_loss", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.adversarial_attacks.utils.conf_diff_loss"], ["", "def", "_get_loss_f", "(", "self", ",", "x", ",", "y", ",", "targeted", ",", "reduction", ")", ":", "\n", "#x, y original ref_data / target", "\n", "#targeted whether to use a targeted attack or not", "\n", "#reduction: reduction to use: 'sum', 'mean', 'none'", "\n", "        ", "if", "isinstance", "(", "self", ".", "loss", ",", "str", ")", ":", "\n", "            ", "if", "self", ".", "loss", ".", "lower", "(", ")", "in", "[", "'crossentropy'", ",", "'ce'", "]", ":", "\n", "                ", "if", "not", "targeted", ":", "\n", "                    ", "l_f", "=", "lambda", "data", ",", "data_out", ":", "-", "F", ".", "cross_entropy", "(", "data_out", ",", "y", ",", "reduction", "=", "reduction", ")", "\n", "", "else", ":", "\n", "                    ", "l_f", "=", "lambda", "data", ",", "data_out", ":", "F", ".", "cross_entropy", "(", "data_out", ",", "y", ",", "reduction", "=", "reduction", ")", "\n", "", "", "elif", "self", ".", "loss", ".", "lower", "(", ")", "==", "'kl'", ":", "\n", "                ", "if", "not", "targeted", ":", "\n", "                    ", "l_f", "=", "lambda", "data", ",", "data_out", ":", "-", "reduce", "(", "F", ".", "kl_div", "(", "torch", ".", "log_softmax", "(", "data_out", ",", "dim", "=", "1", ")", ",", "y", ",", "reduction", "=", "'none'", ")", ".", "sum", "(", "dim", "=", "1", ")", ",", "reduction", ")", "\n", "", "else", ":", "\n", "                    ", "l_f", "=", "lambda", "data", ",", "data_out", ":", "reduce", "(", "F", ".", "kl_div", "(", "torch", ".", "log_softmax", "(", "data_out", ",", "dim", "=", "1", ")", ",", "y", ",", "reduction", "=", "'none'", ")", ".", "sum", "(", "dim", "=", "1", ")", ",", "reduction", ")", "\n", "", "", "elif", "self", ".", "loss", ".", "lower", "(", ")", "==", "'logitsdiff'", ":", "\n", "                ", "if", "not", "targeted", ":", "\n", "                    ", "y_oh", "=", "F", ".", "one_hot", "(", "y", ",", "self", ".", "num_classes", ")", "\n", "y_oh", "=", "y_oh", ".", "float", "(", ")", "\n", "l_f", "=", "lambda", "data", ",", "data_out", ":", "-", "logits_diff_loss", "(", "data_out", ",", "y_oh", ",", "reduction", "=", "reduction", ")", "\n", "", "else", ":", "\n", "                    ", "y_oh", "=", "F", ".", "one_hot", "(", "y", ",", "self", ".", "num_classes", ")", "\n", "y_oh", "=", "y_oh", ".", "float", "(", ")", "\n", "l_f", "=", "lambda", "data", ",", "data_out", ":", "logits_diff_loss", "(", "data_out", ",", "y_oh", ",", "reduction", "=", "reduction", ")", "\n", "", "", "elif", "self", ".", "loss", ".", "lower", "(", ")", "==", "'conf'", ":", "\n", "                ", "if", "not", "targeted", ":", "\n", "                    ", "l_f", "=", "lambda", "data", ",", "data_out", ":", "confidence_loss", "(", "data_out", ",", "y", ",", "reduction", "=", "reduction", ")", "\n", "", "else", ":", "\n", "                    ", "l_f", "=", "lambda", "data", ",", "data_out", ":", "-", "confidence_loss", "(", "data_out", ",", "y", ",", "reduction", "=", "reduction", ")", "\n", "", "", "elif", "self", ".", "loss", ".", "lower", "(", ")", "==", "'confdiff'", ":", "\n", "                ", "if", "not", "targeted", ":", "\n", "                    ", "y_oh", "=", "F", ".", "one_hot", "(", "y", ",", "self", ".", "num_classes", ")", "\n", "y_oh", "=", "y_oh", ".", "float", "(", ")", "\n", "l_f", "=", "lambda", "data", ",", "data_out", ":", "-", "conf_diff_loss", "(", "data_out", ",", "y_oh", ",", "reduction", "=", "reduction", ")", "\n", "", "else", ":", "\n", "                    ", "y_oh", "=", "F", ".", "one_hot", "(", "y", ",", "self", ".", "num_classes", ")", "\n", "y_oh", "=", "y_oh", ".", "float", "(", ")", "\n", "l_f", "=", "lambda", "data", ",", "data_out", ":", "conf_diff_loss", "(", "data_out", ",", "y_oh", ",", "reduction", "=", "reduction", ")", "\n", "", "", "else", ":", "\n", "                ", "raise", "ValueError", "(", "f'Loss {self.loss} not supported'", ")", "\n", "", "", "else", ":", "\n", "#custom 5 argument loss", "\n", "#(x_adv, x_adv_out, x, y, reduction)", "\n", "            ", "l_f", "=", "lambda", "data", ",", "data_out", ":", "self", ".", "loss", "(", "data", ",", "data_out", ",", "x", ",", "y", ",", "reduction", "=", "reduction", ")", "\n", "\n", "", "return", "l_f", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.adversarial_attacks.adversarialattack.AdversarialAttack.get_config_dict": [[78, 80], ["NotImplementedError"], "methods", ["None"], ["", "def", "get_config_dict", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.adversarial_attacks.adversarialattack.AdversarialAttack.get_last_trajectory": [[81, 87], ["AssertionError"], "methods", ["None"], ["", "def", "get_last_trajectory", "(", "self", ")", ":", "\n", "#output dimension: (iterations, batch_size, img_dimension)", "\n", "        ", "if", "not", "self", ".", "save_trajectory", "or", "self", ".", "last_trajectory", "is", "None", ":", "\n", "            ", "raise", "AssertionError", "(", ")", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "last_trajectory", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.adversarial_attacks.adversarialattack.AdversarialAttack._get_trajectory_depth": [[88, 90], ["NotImplementedError"], "methods", ["None"], ["", "", "def", "_get_trajectory_depth", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.adversarial_attacks.adversarialattack.AdversarialAttack._check_model": [[91, 94], ["RuntimeError"], "methods", ["None"], ["", "def", "_check_model", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "model", "is", "None", ":", "\n", "            ", "raise", "RuntimeError", "(", "'Attack density_model not set'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.adversarial_attacks.adversarialattack.AdversarialAttack.perturb": [[95, 98], ["NotImplementedError"], "methods", ["None"], ["", "", "def", "perturb", "(", "self", ",", "x", ",", "y", ",", "targeted", "=", "False", ",", "x_init", "=", "None", ")", ":", "\n", "#force child class implementation", "\n", "        ", "raise", "NotImplementedError", "(", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.adversarial_attacks.noise.AdversarialNoiseGenerator.__init__": [[10, 13], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models_32x32.shake_pyramidnet.ShakePyramidNet.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.adversarial_attacks.noise.AdversarialNoiseGenerator.forward": [[14, 17], ["NotImplementedError"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "#generate nosie matching the out_size of x", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.adversarial_attacks.noise.UniformNoiseGenerator.__init__": [[19, 23], ["noise.AdversarialNoiseGenerator.__init__"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models_32x32.shake_pyramidnet.ShakePyramidNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "min", "=", "0.0", ",", "max", "=", "1.0", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "min", "=", "min", "\n", "self", ".", "max", "=", "max", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.adversarial_attacks.noise.UniformNoiseGenerator.forward": [[24, 26], ["torch.rand_like", "torch.rand_like", "torch.rand_like", "torch.rand_like", "torch.rand_like", "torch.rand_like", "torch.rand_like", "torch.rand_like", "torch.rand_like", "torch.rand_like", "torch.rand_like", "torch.rand_like", "torch.rand_like", "torch.rand_like", "torch.rand_like", "torch.rand_like", "torch.rand_like", "torch.rand_like", "torch.rand_like", "torch.rand_like", "torch.rand_like", "torch.rand_like", "torch.rand_like", "torch.rand_like", "torch.rand_like"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "(", "self", ".", "max", "-", "self", ".", "min", ")", "*", "torch", ".", "rand_like", "(", "x", ")", "+", "self", ".", "min", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.adversarial_attacks.noise.NormalNoiseGenerator.__init__": [[28, 32], ["noise.AdversarialNoiseGenerator.__init__"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models_32x32.shake_pyramidnet.ShakePyramidNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "sigma", "=", "1.0", ",", "mu", "=", "0", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "sigma", "=", "sigma", "\n", "self", ".", "mu", "=", "mu", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.adversarial_attacks.noise.NormalNoiseGenerator.forward": [[33, 35], ["torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "sigma", "*", "torch", ".", "randn_like", "(", "x", ")", "+", "self", ".", "mu", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.adversarial_attacks.noise.CALNoiseGenerator.__init__": [[37, 41], ["noise.AdversarialNoiseGenerator.__init__"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models_32x32.shake_pyramidnet.ShakePyramidNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "rho", "=", "1", ",", "lambda_scheme", "=", "'normal'", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "rho", "=", "rho", "\n", "self", ".", "lambda_scheme", "=", "lambda_scheme", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.adversarial_attacks.noise.CALNoiseGenerator.forward": [[42, 59], ["torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "x.new_zeros", "sum", "torch.randn_like.view", "torch.randn_like.view", "torch.randn_like.view", "torch.randn_like.view", "torch.randn_like.view", "torch.norm.view", "torch.norm.view", "torch.norm.view", "torch.norm.view", "torch.norm.view", "target_dists_sqr.sqrt().view", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "target_dists_sqr.sqrt", "math.sqrt", "torch.randn().abs", "torch.randn().abs", "torch.randn().abs", "torch.randn().abs", "torch.randn().abs", "torch.randn().abs", "torch.randn().abs", "torch.randn().abs", "torch.randn().abs", "torch.randn().abs", "torch.randn().abs", "torch.randn().abs", "torch.randn().abs", "torch.randn().abs", "torch.randn().abs", "torch.randn().abs", "torch.randn().abs", "torch.randn().abs", "torch.randn().abs", "torch.randn().abs", "torch.randn().abs", "torch.randn().abs", "torch.randn().abs", "torch.randn().abs", "torch.randn().abs", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "sum"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_loss.DistanceLogger.log", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_loss.DistanceLogger.log", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_loss.DistanceLogger.log", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_loss.DistanceLogger.log", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_loss.DistanceLogger.log", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_loss.DistanceLogger.log", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_loss.DistanceLogger.log", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_loss.DistanceLogger.log", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_loss.DistanceLogger.log", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_loss.DistanceLogger.log", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_loss.DistanceLogger.log", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_loss.DistanceLogger.log", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_loss.DistanceLogger.log", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_loss.DistanceLogger.log", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_loss.DistanceLogger.log", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_loss.DistanceLogger.log", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_loss.DistanceLogger.log", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_loss.DistanceLogger.log", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_loss.DistanceLogger.log", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_loss.DistanceLogger.log", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_loss.DistanceLogger.log", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_loss.DistanceLogger.log", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_loss.DistanceLogger.log", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_loss.DistanceLogger.log", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_loss.DistanceLogger.log"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "lambda_scheme", "==", "'normal'", ":", "\n", "            ", "lambda_targets", "=", "x", ".", "new_zeros", "(", "x", ".", "shape", "[", "0", "]", ")", "\n", "reject_idcs", "=", "lambda_targets", "<", "1", "\n", "#rejection sample from truncated normal", "\n", "while", "sum", "(", "reject_idcs", ">", "0", ")", ":", "\n", "                ", "lambda_targets", "[", "reject_idcs", "]", "=", "math", ".", "sqrt", "(", "self", ".", "rho", ")", "*", "torch", ".", "randn", "(", "sum", "(", "reject_idcs", ")", ",", "device", "=", "x", ".", "device", ")", ".", "abs", "(", ")", "+", "1e-8", "\n", "reject_idcs", "=", "lambda_targets", ">", "1", "\n", "", "", "elif", "self", ".", "lambda_scheme", "==", "'uniform'", ":", "\n", "            ", "lambda_targets", "=", "torch", ".", "rand", "(", "x", ".", "shape", "[", "0", "]", ",", "device", "=", "x", ".", "device", ")", "\n", "\n", "", "target_dists_sqr", "=", "-", "torch", ".", "log", "(", "lambda_targets", ")", "*", "self", ".", "rho", "\n", "dirs", "=", "torch", ".", "randn_like", "(", "x", ")", "\n", "dirs_lengths", "=", "torch", ".", "norm", "(", "dirs", ".", "view", "(", "x", ".", "shape", "[", "0", "]", ",", "-", "1", ")", ",", "dim", "=", "1", ")", "\n", "dirs_normalized", "=", "dirs", "/", "dirs_lengths", ".", "view", "(", "x", ".", "shape", "[", "0", "]", ",", "1", ",", "1", ",", "1", ")", "\n", "perts", "=", "target_dists_sqr", ".", "sqrt", "(", ")", ".", "view", "(", "x", ".", "shape", "[", "0", "]", ",", "1", ",", "1", ",", "1", ")", "*", "dirs_normalized", "\n", "return", "perts", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.adversarial_attacks.apgd.APGDAttack.__init__": [[19, 30], ["adversarialattack.AdversarialAttack.__init__"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models_32x32.shake_pyramidnet.ShakePyramidNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "model", ",", "num_classes", ",", "eps", ",", "n_iter", "=", "100", ",", "norm", "=", "'Linf'", ",", "n_restarts", "=", "1", ",", "seed", "=", "0", ",", "loss", "=", "'ce'", ",", "eot_iter", "=", "1", ",", "\n", "rho", "=", ".75", ",", "verbose", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "loss", ",", "num_classes", ",", "model", "=", "model", ",", "save_trajectory", "=", "False", ")", "\n", "self", ".", "n_iter", "=", "n_iter", "\n", "self", ".", "eps", "=", "eps", "\n", "self", ".", "norm", "=", "norm", "\n", "self", ".", "n_restarts", "=", "n_restarts", "\n", "self", ".", "seed", "=", "seed", "\n", "self", ".", "eot_iter", "=", "eot_iter", "\n", "self", ".", "thr_decr", "=", "rho", "\n", "self", ".", "verbose", "=", "verbose", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.adversarial_attacks.apgd.APGDAttack.check_oscillation": [[31, 37], ["numpy.zeros", "range", "numpy.ones"], "methods", ["None"], ["", "def", "check_oscillation", "(", "self", ",", "x", ",", "j", ",", "k", ",", "y5", ",", "k3", "=", "0.75", ")", ":", "\n", "        ", "t", "=", "np", ".", "zeros", "(", "x", ".", "shape", "[", "1", "]", ")", "\n", "for", "counter5", "in", "range", "(", "k", ")", ":", "\n", "            ", "t", "+=", "x", "[", "j", "-", "counter5", "]", ">", "x", "[", "j", "-", "counter5", "-", "1", "]", "\n", "\n", "", "return", "t", "<=", "k", "*", "k3", "*", "np", ".", "ones", "(", "t", ".", "shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.adversarial_attacks.apgd.APGDAttack.check_shape": [[38, 40], ["numpy.expand_dims", "len"], "methods", ["None"], ["", "def", "check_shape", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "x", "if", "len", "(", "x", ".", "shape", ")", ">", "0", "else", "np", ".", "expand_dims", "(", "x", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.adversarial_attacks.apgd.APGDAttack.attack_single_run": [[41, 178], ["y_in.clone", "x_adv.detach.detach.clamp", "x_adv.detach.detach.clone", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "apgd.APGDAttack._get_loss_f", "x_adv.detach.detach.requires_grad_", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "range", "float", "torch.zeros_like.clone", "torch.zeros_like.clone", "torch.zeros_like.clone", "criterion_indiv.detach().clone", "x_adv.detach.detach.clone", "numpy.arange", "criterion_indiv.detach().clone.clone", "range", "x_in.clone", "x_in.clone().unsqueeze", "max", "max", "max", "print", "[].detach", "torch.Tensor().to().detach().reshape", "torch.Tensor().to().detach().reshape", "torch.Tensor().to().detach().reshape", "torch.Tensor().to().detach().reshape", "torch.Tensor().to().detach().reshape", "torch.Tensor().to().detach().reshape", "torch.Tensor().to().detach().reshape", "torch.Tensor().to().detach().reshape", "torch.Tensor().to().detach().reshape", "numpy.zeros", "numpy.zeros", "x_adv.detach.detach.requires_grad_", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "range", "float", "len", "int", "int", "int", "x.detach", "torch.randn().to().detach", "torch.randn().to().detach", "torch.randn().to().detach", "torch.randn().to().detach", "torch.randn().to().detach", "torch.randn().to().detach", "torch.randn().to().detach", "torch.randn().to().detach", "torch.randn().to().detach", "apgd.APGDAttack.", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "apgd.APGDAttack.model", "apgd.APGDAttack.attack_single_run.criterion_indiv"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.adversarial_attacks.adversarialattack.AdversarialAttack._get_loss_f"], ["", "def", "attack_single_run", "(", "self", ",", "x_in", ",", "y_in", ",", "targeted", ")", ":", "\n", "        ", "x", "=", "x_in", ".", "clone", "(", ")", "if", "len", "(", "x_in", ".", "shape", ")", "==", "4", "else", "x_in", ".", "clone", "(", ")", ".", "unsqueeze", "(", "0", ")", "\n", "y", "=", "y_in", ".", "clone", "(", ")", "#if len(y_in.shape) == 1 else y_in.clone().unsqueeze(0)", "\n", "\n", "self", ".", "n_iter_2", ",", "self", ".", "n_iter_min", ",", "self", ".", "size_decr", "=", "max", "(", "int", "(", "0.22", "*", "self", ".", "n_iter", ")", ",", "1", ")", ",", "max", "(", "int", "(", "0.06", "*", "self", ".", "n_iter", ")", ",", "\n", "1", ")", ",", "max", "(", "\n", "int", "(", "0.03", "*", "self", ".", "n_iter", ")", ",", "1", ")", "\n", "if", "self", ".", "verbose", ":", "\n", "            ", "print", "(", "'parameters: '", ",", "self", ".", "n_iter", ",", "self", ".", "n_iter_2", ",", "self", ".", "n_iter_min", ",", "self", ".", "size_decr", ")", "\n", "\n", "", "if", "self", ".", "norm", "in", "[", "'inf'", ",", "'linf'", ",", "'Linf'", "]", ":", "\n", "            ", "t", "=", "2", "*", "torch", ".", "rand", "(", "x", ".", "shape", ")", ".", "to", "(", "x", ".", "device", ")", ".", "detach", "(", ")", "-", "1", "\n", "x_adv", "=", "x", ".", "detach", "(", ")", "+", "self", ".", "eps", "*", "torch", ".", "ones", "(", "[", "x", ".", "shape", "[", "0", "]", ",", "1", ",", "1", ",", "1", "]", ")", ".", "to", "(", "x", ".", "device", ")", ".", "detach", "(", ")", "*", "t", "/", "(", "\n", "t", ".", "reshape", "(", "[", "t", ".", "shape", "[", "0", "]", ",", "-", "1", "]", ")", ".", "abs", "(", ")", ".", "max", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "[", "0", "]", ".", "reshape", "(", "[", "-", "1", ",", "1", ",", "1", ",", "1", "]", ")", ")", "\n", "", "elif", "self", ".", "norm", "in", "[", "'l2'", ",", "'L2'", "]", ":", "\n", "            ", "t", "=", "torch", ".", "randn", "(", "x", ".", "shape", ")", ".", "to", "(", "x", ".", "device", ")", ".", "detach", "(", ")", "\n", "x_adv", "=", "x", ".", "detach", "(", ")", "+", "self", ".", "eps", "*", "torch", ".", "ones", "(", "[", "x", ".", "shape", "[", "0", "]", ",", "1", ",", "1", ",", "1", "]", ")", ".", "to", "(", "x", ".", "device", ")", ".", "detach", "(", ")", "*", "t", "/", "(", "\n", "(", "t", "**", "2", ")", ".", "sum", "(", "dim", "=", "(", "1", ",", "2", ",", "3", ")", ",", "keepdim", "=", "True", ")", ".", "sqrt", "(", ")", "+", "1e-12", ")", "\n", "", "x_adv", "=", "x_adv", ".", "clamp", "(", "0.", ",", "1.", ")", "\n", "x_best", "=", "x_adv", ".", "clone", "(", ")", "\n", "loss_steps", "=", "torch", ".", "zeros", "(", "[", "self", ".", "n_iter", ",", "x", ".", "shape", "[", "0", "]", "]", ")", "\n", "loss_best_steps", "=", "torch", ".", "zeros", "(", "[", "self", ".", "n_iter", "+", "1", ",", "x", ".", "shape", "[", "0", "]", "]", ")", "\n", "\n", "minus_criterion_indiv", "=", "self", ".", "_get_loss_f", "(", "x", ",", "y", ",", "targeted", ",", "'none'", ")", "\n", "#my adv attacks all use a loss that takes the current perturbed datapoint and the model out at that point", "\n", "#apgd maximizes, so give a minus", "\n", "def", "criterion_indiv", "(", "adv_data", ",", "adv_data_out", ")", ":", "\n", "            ", "return", "-", "minus_criterion_indiv", "(", "adv_data", ",", "adv_data_out", ")", "\n", "\n", "\n", "", "x_adv", ".", "requires_grad_", "(", ")", "\n", "grad", "=", "torch", ".", "zeros_like", "(", "x", ")", "\n", "for", "_", "in", "range", "(", "self", ".", "eot_iter", ")", ":", "\n", "            ", "with", "torch", ".", "enable_grad", "(", ")", ":", "\n", "                ", "logits", "=", "self", ".", "model", "(", "x_adv", ")", "# 1 forward pass (eot_iter = 1)", "\n", "loss_indiv", "=", "criterion_indiv", "(", "x_adv", ",", "logits", ")", "\n", "loss", "=", "loss_indiv", ".", "sum", "(", ")", "\n", "\n", "", "grad", "+=", "torch", ".", "autograd", ".", "grad", "(", "loss", ",", "[", "x_adv", "]", ")", "[", "0", "]", ".", "detach", "(", ")", "# 1 backward pass (eot_iter = 1)", "\n", "\n", "", "grad", "/=", "float", "(", "self", ".", "eot_iter", ")", "\n", "grad_best", "=", "grad", ".", "clone", "(", ")", "\n", "\n", "loss_best", "=", "loss_indiv", ".", "detach", "(", ")", ".", "clone", "(", ")", "\n", "\n", "step_size", "=", "self", ".", "eps", "*", "torch", ".", "ones", "(", "[", "x", ".", "shape", "[", "0", "]", ",", "1", ",", "1", ",", "1", "]", ")", ".", "to", "(", "x", ".", "device", ")", ".", "detach", "(", ")", "*", "torch", ".", "Tensor", "(", "\n", "[", "2.0", "]", ")", ".", "to", "(", "x", ".", "device", ")", ".", "detach", "(", ")", ".", "reshape", "(", "[", "1", ",", "1", ",", "1", ",", "1", "]", ")", "\n", "x_adv_old", "=", "x_adv", ".", "clone", "(", ")", "\n", "counter", "=", "0", "\n", "k", "=", "self", ".", "n_iter_2", "+", "0", "\n", "u", "=", "np", ".", "arange", "(", "x", ".", "shape", "[", "0", "]", ")", "\n", "counter3", "=", "0", "\n", "\n", "loss_best_last_check", "=", "loss_best", ".", "clone", "(", ")", "\n", "reduced_last_check", "=", "np", ".", "zeros", "(", "loss_best", ".", "shape", ")", "==", "np", ".", "zeros", "(", "loss_best", ".", "shape", ")", "\n", "n_reduced", "=", "0", "\n", "\n", "for", "i", "in", "range", "(", "self", ".", "n_iter", ")", ":", "\n", "### gradient step", "\n", "            ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "x_adv", "=", "x_adv", ".", "detach", "(", ")", "\n", "grad2", "=", "x_adv", "-", "x_adv_old", "\n", "x_adv_old", "=", "x_adv", ".", "clone", "(", ")", "\n", "\n", "a", "=", "0.75", "if", "i", ">", "0", "else", "1.0", "\n", "\n", "if", "self", ".", "norm", "in", "[", "'inf'", ",", "'linf'", ",", "'Linf'", "]", ":", "\n", "                    ", "x_adv_1", "=", "x_adv", "+", "step_size", "*", "torch", ".", "sign", "(", "grad", ")", "\n", "x_adv_1", "=", "torch", ".", "clamp", "(", "torch", ".", "min", "(", "torch", ".", "max", "(", "x_adv_1", ",", "x", "-", "self", ".", "eps", ")", ",", "x", "+", "self", ".", "eps", ")", ",", "0.0", ",", "1.0", ")", "\n", "x_adv_1", "=", "torch", ".", "clamp", "(", "\n", "torch", ".", "min", "(", "torch", ".", "max", "(", "x_adv", "+", "(", "x_adv_1", "-", "x_adv", ")", "*", "a", "+", "grad2", "*", "(", "1", "-", "a", ")", ",", "x", "-", "self", ".", "eps", ")", ",", "\n", "x", "+", "self", ".", "eps", ")", ",", "0.0", ",", "1.0", ")", "\n", "\n", "", "elif", "self", ".", "norm", "in", "[", "'l2'", ",", "'L2'", "]", ":", "\n", "                    ", "x_adv_1", "=", "x_adv", "+", "step_size", "*", "grad", "/", "(", "(", "grad", "**", "2", ")", ".", "sum", "(", "dim", "=", "(", "1", ",", "2", ",", "3", ")", ",", "keepdim", "=", "True", ")", ".", "sqrt", "(", ")", "+", "1e-12", ")", "\n", "x_adv_1", "=", "torch", ".", "clamp", "(", "x", "+", "(", "x_adv_1", "-", "x", ")", "/", "(", "\n", "(", "(", "x_adv_1", "-", "x", ")", "**", "2", ")", ".", "sum", "(", "dim", "=", "(", "1", ",", "2", ",", "3", ")", ",", "keepdim", "=", "True", ")", ".", "sqrt", "(", ")", "+", "1e-12", ")", "*", "torch", ".", "min", "(", "\n", "self", ".", "eps", "*", "torch", ".", "ones", "(", "x", ".", "shape", ")", ".", "to", "(", "x", ".", "device", ")", ".", "detach", "(", ")", ",", "\n", "(", "(", "x_adv_1", "-", "x", ")", "**", "2", ")", ".", "sum", "(", "dim", "=", "(", "1", ",", "2", ",", "3", ")", ",", "keepdim", "=", "True", ")", ".", "sqrt", "(", ")", ")", ",", "0.0", ",", "1.0", ")", "\n", "x_adv_1", "=", "x_adv", "+", "(", "x_adv_1", "-", "x_adv", ")", "*", "a", "+", "grad2", "*", "(", "1", "-", "a", ")", "\n", "x_adv_1", "=", "torch", ".", "clamp", "(", "x", "+", "(", "x_adv_1", "-", "x", ")", "/", "(", "\n", "(", "(", "x_adv_1", "-", "x", ")", "**", "2", ")", ".", "sum", "(", "dim", "=", "(", "1", ",", "2", ",", "3", ")", ",", "keepdim", "=", "True", ")", ".", "sqrt", "(", ")", "+", "1e-12", ")", "*", "torch", ".", "min", "(", "\n", "self", ".", "eps", "*", "torch", ".", "ones", "(", "x", ".", "shape", ")", ".", "to", "(", "x", ".", "device", ")", ".", "detach", "(", ")", ",", "\n", "(", "(", "x_adv_1", "-", "x", ")", "**", "2", ")", ".", "sum", "(", "dim", "=", "(", "1", ",", "2", ",", "3", ")", ",", "keepdim", "=", "True", ")", ".", "sqrt", "(", ")", "+", "1e-12", ")", ",", "0.0", ",", "1.0", ")", "\n", "\n", "", "x_adv", "=", "x_adv_1", "+", "0.", "\n", "\n", "### get gradient", "\n", "", "x_adv", ".", "requires_grad_", "(", ")", "\n", "grad", "=", "torch", ".", "zeros_like", "(", "x", ")", "\n", "for", "_", "in", "range", "(", "self", ".", "eot_iter", ")", ":", "\n", "                ", "with", "torch", ".", "enable_grad", "(", ")", ":", "\n", "                    ", "logits", "=", "self", ".", "model", "(", "x_adv", ")", "# 1 forward pass (eot_iter = 1)", "\n", "loss_indiv", "=", "criterion_indiv", "(", "x_adv", ",", "logits", ")", "\n", "loss", "=", "loss_indiv", ".", "sum", "(", ")", "\n", "\n", "", "grad", "+=", "torch", ".", "autograd", ".", "grad", "(", "loss", ",", "[", "x_adv", "]", ")", "[", "0", "]", ".", "detach", "(", ")", "# 1 backward pass (eot_iter = 1)", "\n", "\n", "", "grad", "/=", "float", "(", "self", ".", "eot_iter", ")", "\n", "\n", "if", "self", ".", "verbose", ":", "\n", "                ", "print", "(", "'iteration: {} - Best loss: {:.6f}'", ".", "format", "(", "i", ",", "loss_best", ".", "sum", "(", ")", ")", ")", "\n", "\n", "### check step out_size", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "y1", "=", "loss_indiv", ".", "detach", "(", ")", ".", "clone", "(", ")", "\n", "loss_steps", "[", "i", "]", "=", "y1", ".", "cpu", "(", ")", "+", "0", "\n", "ind", "=", "(", "y1", ">", "loss_best", ")", ".", "nonzero", "(", "as_tuple", "=", "False", ")", ".", "squeeze", "(", ")", "\n", "x_best", "[", "ind", "]", "=", "x_adv", "[", "ind", "]", ".", "clone", "(", ")", "\n", "grad_best", "[", "ind", "]", "=", "grad", "[", "ind", "]", ".", "clone", "(", ")", "\n", "loss_best", "[", "ind", "]", "=", "y1", "[", "ind", "]", "+", "0", "\n", "loss_best_steps", "[", "i", "+", "1", "]", "=", "loss_best", "+", "0", "\n", "\n", "counter3", "+=", "1", "\n", "\n", "if", "counter3", "==", "k", ":", "\n", "                    ", "fl_oscillation", "=", "self", ".", "check_oscillation", "(", "loss_steps", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "i", ",", "k", ",", "\n", "loss_best", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "k3", "=", "self", ".", "thr_decr", ")", "\n", "fl_reduce_no_impr", "=", "(", "~", "reduced_last_check", ")", "*", "(", "\n", "loss_best_last_check", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ">=", "loss_best", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "fl_oscillation", "=", "~", "(", "~", "fl_oscillation", "*", "~", "fl_reduce_no_impr", ")", "\n", "reduced_last_check", "=", "np", ".", "copy", "(", "fl_oscillation", ")", "\n", "loss_best_last_check", "=", "loss_best", ".", "clone", "(", ")", "\n", "\n", "if", "np", ".", "sum", "(", "fl_oscillation", ")", ">", "0", ":", "\n", "                        ", "step_size", "[", "u", "[", "fl_oscillation", "]", "]", "/=", "2.0", "\n", "n_reduced", "=", "fl_oscillation", ".", "astype", "(", "float", ")", ".", "sum", "(", ")", "\n", "\n", "fl_oscillation", "=", "np", ".", "where", "(", "fl_oscillation", ")", "\n", "\n", "x_adv", "[", "fl_oscillation", "]", "=", "x_best", "[", "fl_oscillation", "]", ".", "clone", "(", ")", "\n", "grad", "[", "fl_oscillation", "]", "=", "grad_best", "[", "fl_oscillation", "]", ".", "clone", "(", ")", "\n", "\n", "", "counter3", "=", "0", "\n", "k", "=", "np", ".", "maximum", "(", "k", "-", "self", ".", "size_decr", ",", "self", ".", "n_iter_min", ")", "\n", "\n", "", "", "", "return", "x_best", ",", "loss_best", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.adversarial_attacks.apgd.APGDAttack.perturb": [[179, 202], ["apgd.APGDAttack.model.eval", "x.detach().clone", "range", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "apgd.APGDAttack.attack_single_run", "apgd.APGDAttack.model.train", "apgd.APGDAttack.model.eval", "x.detach", "float", "print", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "loss_best.sum"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models.ebm_wrn.gradient_attack_wrapper.eval", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.adversarial_attacks.apgd.APGDAttack.attack_single_run", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_type.TrainType.train", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models.ebm_wrn.gradient_attack_wrapper.eval"], ["", "def", "perturb", "(", "self", ",", "x", ",", "y", ",", "targeted", "=", "False", ",", "x_init", "=", "None", ")", ":", "\n", "        ", "assert", "self", ".", "norm", "in", "[", "'inf'", ",", "'linf'", ",", "'Linf'", ",", "'l2'", ",", "'L2'", "]", "\n", "\n", "is_train", "=", "self", ".", "model", ".", "training", "\n", "self", ".", "model", ".", "eval", "(", ")", "\n", "\n", "adv_best", "=", "x", ".", "detach", "(", ")", ".", "clone", "(", ")", "\n", "loss_best", "=", "torch", ".", "ones", "(", "[", "x", ".", "shape", "[", "0", "]", "]", ")", ".", "to", "(", "x", ".", "device", ")", "*", "(", "-", "float", "(", "'inf'", ")", ")", "\n", "for", "counter", "in", "range", "(", "self", ".", "n_restarts", ")", ":", "\n", "            ", "best_curr", ",", "loss_curr", "=", "self", ".", "attack_single_run", "(", "x", ",", "y", ",", "targeted", ")", "\n", "ind_curr", "=", "(", "loss_curr", ">", "loss_best", ")", ".", "nonzero", "(", "as_tuple", "=", "False", ")", ".", "squeeze", "(", ")", "\n", "adv_best", "[", "ind_curr", "]", "=", "best_curr", "[", "ind_curr", "]", "+", "0.", "\n", "loss_best", "[", "ind_curr", "]", "=", "loss_curr", "[", "ind_curr", "]", "+", "0.", "\n", "\n", "if", "self", ".", "verbose", ":", "\n", "                ", "print", "(", "'restart {} - loss: {:.5f}'", ".", "format", "(", "counter", ",", "loss_best", ".", "sum", "(", ")", ")", ")", "\n", "\n", "", "", "if", "is_train", ":", "\n", "            ", "self", ".", "model", ".", "train", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "model", ".", "eval", "(", ")", "\n", "\n", "", "return", "adv_best", "", "", "", ""]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.adversarial_attacks.apgd.dlr_loss": [[11, 17], ["x.sort", "numpy.arange"], "function", ["None"], ["def", "dlr_loss", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "    ", "x_sorted", ",", "ind_sorted", "=", "x", ".", "sort", "(", "dim", "=", "1", ")", "\n", "ind", "=", "(", "ind_sorted", "[", ":", ",", "-", "1", "]", "==", "y", ")", ".", "float", "(", ")", "\n", "\n", "return", "-", "(", "x", "[", "np", ".", "arange", "(", "x", ".", "shape", "[", "0", "]", ")", ",", "y", "]", "-", "x_sorted", "[", ":", ",", "-", "2", "]", "*", "ind", "-", "x_sorted", "[", ":", ",", "-", "1", "]", "*", "(", "1.", "-", "ind", ")", ")", "/", "(", "\n", "x_sorted", "[", ":", ",", "-", "1", "]", "-", "x_sorted", "[", ":", ",", "-", "3", "]", "+", "1e-12", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.adversarial_attacks.l1_reg_pgd.L1RegularizedPGD.__init__": [[11, 25], ["restartattack.RestartAttack.__init__"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models_32x32.shake_pyramidnet.ShakePyramidNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "eps", ",", "iterations", ",", "stepsize", ",", "num_classes", ",", "reg_weight", "=", "1.0", ",", "momentum", "=", "0.9", ",", "norm", "=", "'l2'", ",", "loss", "=", "'CrossEntropy'", ",", "\n", "normalize_grad", "=", "True", ",", "early_stopping", "=", "0", ",", "restarts", "=", "0", ",", "init_noise_generator", "=", "None", ",", "model", "=", "None", ",", "\n", "save_trajectory", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "loss", ",", "restarts", ",", "num_classes", ",", "model", "=", "model", ",", "save_trajectory", "=", "save_trajectory", ")", "\n", "self", ".", "eps", "=", "eps", "\n", "self", ".", "iterations", "=", "iterations", "\n", "self", ".", "stepsize", "=", "stepsize", "\n", "self", ".", "reg_weight", "=", "reg_weight", "\n", "self", ".", "momentum", "=", "momentum", "\n", "self", ".", "norm", "=", "norm", "\n", "self", ".", "loss", "=", "loss", "\n", "self", ".", "normalize_grad", "=", "normalize_grad", "\n", "self", ".", "early_stopping", "=", "early_stopping", "\n", "self", ".", "init_noise_generator", "=", "init_noise_generator", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.adversarial_attacks.l1_reg_pgd.L1RegularizedPGD._get_trajectory_depth": [[26, 28], ["None"], "methods", ["None"], ["", "def", "_get_trajectory_depth", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "iterations", "+", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.adversarial_attacks.l1_reg_pgd.L1RegularizedPGD.get_config_dict": [[29, 45], ["isinstance"], "methods", ["None"], ["", "def", "get_config_dict", "(", "self", ")", ":", "\n", "        ", "dict", "=", "{", "}", "\n", "dict", "[", "'type'", "]", "=", "'ArgminPGD'", "\n", "dict", "[", "'eps'", "]", "=", "self", ".", "eps", "\n", "dict", "[", "'iterations'", "]", "=", "self", ".", "iterations", "\n", "dict", "[", "'stepsize'", "]", "=", "self", ".", "stepsize", "\n", "dict", "[", "'momentum'", "]", "=", "self", ".", "momentum", "\n", "dict", "[", "'norm'", "]", "=", "self", ".", "norm", "\n", "if", "isinstance", "(", "self", ".", "loss", ",", "str", ")", ":", "\n", "            ", "dict", "[", "'loss'", "]", "=", "self", ".", "loss", "\n", "", "else", ":", "\n", "            ", "dict", "[", "'loss'", "]", "=", "'custom'", "\n", "", "dict", "[", "'normalize_grad'", "]", "=", "self", ".", "normalize_grad", "\n", "dict", "[", "'early_stopping'", "]", "=", "self", ".", "early_stopping", "\n", "dict", "[", "'restarts'", "]", "=", "self", ".", "restarts", "\n", "return", "dict", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.adversarial_attacks.l1_reg_pgd.L1RegularizedPGD.perturb_inner": [[47, 119], ["l1_reg_pgd.L1RegularizedPGD._get_loss_f", "x.new_empty", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "utils.initialize_perturbation", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "pert[].abs", "range", "x.new_ones", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros_like.requires_grad_", "torch.zeros_like.requires_grad_", "torch.zeros_like.requires_grad_", "torch.zeros_like.requires_grad_", "torch.zeros_like.requires_grad_", "torch.zeros_like.requires_grad_", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "l1_reg_pgd.L1RegularizedPGD.model", "l1_reg_pgd.L1RegularizedPGD.", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "loss_expanded[].clone().detach", "pert[].clone().detach", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "utils.project_perturbation", "utils.create_early_stopping_mask", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "utils.normalize_perturbation", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "loss_expanded[].clone", "pert[].clone", "torch.sum().view", "torch.sum().view", "torch.sum().view", "torch.sum().view", "torch.sum().view", "torch.sum().view", "torch.sum().view", "torch.sum().view", "torch.sum().view", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "grad.abs().reshape", "grad.abs"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.adversarial_attacks.adversarialattack.AdversarialAttack._get_loss_f", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.adversarial_attacks.utils.initialize_perturbation", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.adversarial_attacks.utils.project_perturbation", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.adversarial_attacks.utils.create_early_stopping_mask", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.adversarial_attacks.utils.normalize_perturbation"], ["", "def", "perturb_inner", "(", "self", ",", "x", ",", "y", ",", "targeted", "=", "False", ",", "x_init", "=", "None", ")", ":", "\n", "        ", "l_f", "=", "self", ".", "_get_loss_f", "(", "x", ",", "y", ",", "targeted", ",", "'none'", ")", "\n", "\n", "best_perts", "=", "x", ".", "new_empty", "(", "x", ".", "shape", ")", "\n", "best_losses", "=", "1e13", "*", "x", ".", "new_ones", "(", "x", ".", "shape", "[", "0", "]", ")", "\n", "\n", "velocity", "=", "torch", ".", "zeros_like", "(", "x", ")", "\n", "\n", "#initialize perturbation", "\n", "pert", "=", "initialize_perturbation", "(", "x", ",", "self", ".", "eps", ",", "self", ".", "norm", ",", "x_init", ",", "self", ".", "init_noise_generator", ")", "\n", "pert_plus", "=", "torch", ".", "zeros_like", "(", "pert", ")", "\n", "pert_minus", "=", "torch", ".", "zeros_like", "(", "pert", ")", "\n", "\n", "pert_plus", "[", "pert", ">", "0", "]", "=", "pert", "[", "pert", ">", "0", "]", "\n", "pert_minus", "[", "pert", "<", "0", "]", "=", "pert", "[", "pert", "<", "0", "]", ".", "abs", "(", ")", "\n", "\n", "#trajectory container", "\n", "if", "self", ".", "save_trajectory", ":", "\n", "            ", "trajectory", "=", "torch", ".", "zeros", "(", "(", "self", ".", "iterations", "+", "1", ",", ")", "+", "x", ".", "shape", ",", "device", "=", "x", ".", "device", ")", "\n", "trajectory", "[", "0", ",", ":", "]", "=", "x", "\n", "", "else", ":", "\n", "            ", "trajectory", "=", "None", "\n", "\n", "", "for", "i", "in", "range", "(", "self", ".", "iterations", "+", "1", ")", ":", "\n", "            ", "pert_plus", ".", "requires_grad_", "(", "True", ")", "\n", "pert_minus", ".", "requires_grad_", "(", "True", ")", "\n", "pert", "=", "pert_plus", "-", "pert_minus", "\n", "with", "torch", ".", "enable_grad", "(", ")", ":", "\n", "                ", "p_data", "=", "x", "+", "pert", "\n", "out", "=", "self", ".", "model", "(", "p_data", ")", "\n", "main_loss_expanded", "=", "l_f", "(", "p_data", ",", "out", ")", "\n", "l1_reg", "=", "torch", ".", "sum", "(", "pert_plus", "+", "pert_minus", ")", "\n", "\n", "new_best", "=", "loss_expanded", "<", "best_losses", "\n", "best_losses", "[", "new_best", "]", "=", "loss_expanded", "[", "new_best", "]", ".", "clone", "(", ")", ".", "detach", "(", ")", "\n", "best_perts", "[", "new_best", ",", ":", "]", "=", "pert", "[", "new_best", ",", ":", "]", ".", "clone", "(", ")", ".", "detach", "(", ")", "\n", "\n", "if", "i", "==", "self", ".", "iterations", ":", "\n", "                    ", "break", "\n", "\n", "", "if", "self", ".", "early_stopping", ">", "0", ":", "\n", "                    ", "finished", ",", "mask", "=", "create_early_stopping_mask", "(", "out", ",", "y", ",", "self", ".", "early_stopping", ",", "targeted", ")", "\n", "if", "finished", ":", "\n", "                        ", "break", "\n", "", "", "else", ":", "\n", "                    ", "mask", "=", "1.", "\n", "\n", "", "loss", "=", "torch", ".", "mean", "(", "loss_expanded", ")", "\n", "pert_plus_grad", ",", "pert_minus_grad", "=", "torch", ".", "autograd", ".", "grad", "(", "loss", ",", "[", "pert_plus", ",", "pert_minus", "]", ")", "[", "0", "]", "\n", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "# pgd on given loss", "\n", "                ", "if", "self", ".", "normalize_grad", ":", "\n", "# https://arxiv.org/pdf/1710.06081.pdf the l1 normalization follows the momentum iterative method", "\n", "                    ", "l1_norm_gradient", "=", "1e-10", "+", "torch", ".", "sum", "(", "grad", ".", "abs", "(", ")", ".", "reshape", "(", "x", ".", "shape", "[", "0", "]", ",", "-", "1", ")", ",", "dim", "=", "1", ")", ".", "view", "(", "-", "1", ",", "1", ",", "1", ",", "1", ")", "\n", "velocity", "=", "self", ".", "momentum", "*", "velocity", "+", "grad", "/", "l1_norm_gradient", "\n", "norm_velocity", "=", "normalize_perturbation", "(", "velocity", ",", "self", ".", "norm", ")", "\n", "", "else", ":", "\n", "# velocity update as in pytorch https://pytorch.org/docs/stable/optim.html", "\n", "                    ", "velocity", "=", "self", ".", "momentum", "*", "velocity", "+", "grad", "\n", "norm_velocity", "=", "velocity", "\n", "\n", "", "pert", "=", "pert", "-", "self", ".", "stepsize", "*", "mask", "*", "norm_velocity", "\n", "pert", "=", "project_perturbation", "(", "pert", ",", "self", ".", "eps", ",", "self", ".", "norm", ")", "\n", "pert", "=", "torch", ".", "clamp", "(", "x", "+", "pert", ",", "0", ",", "1", ")", "-", "x", "#box constraint", "\n", "\n", "if", "self", ".", "save_trajectory", ":", "\n", "                    ", "trajectory", "[", "i", "+", "1", "]", "=", "x", "+", "pert", "\n", "\n", "", "", "", "final_loss", "=", "best_losses", "\n", "p_data", "=", "(", "x", "+", "best_perts", ")", ".", "detach", "(", ")", "\n", "return", "p_data", ",", "final_loss", ",", "trajectory", "\n", "", "", ""]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.adversarial_attacks.cutout_pgd.CutoutPGD.__init__": [[13, 29], ["restartattack.RestartAttack.__init__"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models_32x32.shake_pyramidnet.ShakePyramidNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "eps", ",", "iterations", ",", "stepsize", ",", "num_classes", ",", "mask_size", "=", "16", ",", "momentum", "=", "0.9", ",", "decay", "=", "1.0", ",", "norm", "=", "'inf'", ",", "loss", "=", "'CrossEntropy'", ",", "\n", "normalize_grad", "=", "False", ",", "early_stopping", "=", "0", ",", "restarts", "=", "0", ",", "init_noise_generator", "=", "None", ",", "model", "=", "None", ",", "\n", "save_trajectory", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "loss", ",", "restarts", ",", "num_classes", ",", "model", "=", "model", ",", "save_trajectory", "=", "save_trajectory", ")", "\n", "#loss either pass 'CrossEntropy' or 'LogitsDiff' or custom loss function", "\n", "self", ".", "eps", "=", "eps", "\n", "self", ".", "iterations", "=", "iterations", "\n", "self", ".", "stepsize", "=", "stepsize", "\n", "self", ".", "mask_size", "=", "mask_size", "\n", "self", ".", "momentum", "=", "momentum", "\n", "self", ".", "decay", "=", "decay", "\n", "self", ".", "norm", "=", "norm", "\n", "self", ".", "loss", "=", "loss", "\n", "self", ".", "normalize_grad", "=", "normalize_grad", "\n", "self", ".", "early_stopping", "=", "early_stopping", "\n", "self", ".", "init_noise_generator", "=", "init_noise_generator", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.adversarial_attacks.cutout_pgd.CutoutPGD._get_trajectory_depth": [[30, 32], ["None"], "methods", ["None"], ["", "def", "_get_trajectory_depth", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "iterations", "+", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.adversarial_attacks.cutout_pgd.CutoutPGD.get_config_dict": [[33, 45], ["isinstance"], "methods", ["None"], ["", "def", "get_config_dict", "(", "self", ")", ":", "\n", "        ", "dict", "=", "{", "}", "\n", "dict", "[", "'type'", "]", "=", "'CutoutPGD'", "\n", "dict", "[", "'eps'", "]", "=", "self", ".", "eps", "\n", "dict", "[", "'iterations'", "]", "=", "self", ".", "iterations", "\n", "dict", "[", "'stepsize'", "]", "=", "self", ".", "stepsize", "\n", "dict", "[", "'norm'", "]", "=", "self", ".", "norm", "\n", "if", "isinstance", "(", "self", ".", "loss", ",", "str", ")", ":", "\n", "            ", "dict", "[", "'loss'", "]", "=", "self", ".", "loss", "\n", "", "dict", "[", "'restarts'", "]", "=", "self", ".", "restarts", "\n", "#config_dict['init_sigma'] = self.init_sigma", "\n", "return", "dict", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.adversarial_attacks.cutout_pgd.CutoutPGD.perturb_inner": [[47, 131], ["cutout_pgd.CutoutPGD._get_loss_f", "x.new_empty", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "range", "range", "x.new_ones", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "cutout_pgd.CutoutPGD.init_noise_generator", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "utils.project_perturbation.requires_grad_", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "cutout_pgd.CutoutPGD.model", "cutout_pgd.CutoutPGD.", "loss_expanded[].clone().detach", "pert[].clone().detach", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "utils.project_perturbation", "utils.create_early_stopping_mask", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "utils.normalize_perturbation", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "loss_expanded[].clone", "pert[].clone", "torch.sum().view", "torch.sum().view", "torch.sum().view", "torch.sum().view", "torch.sum().view", "torch.sum().view", "torch.sum().view", "torch.sum().view", "torch.sum().view", "torch.sum().view", "torch.sum().view", "torch.sum().view", "torch.sum().view", "torch.sum().view", "torch.sum().view", "torch.sum().view", "torch.sum().view", "torch.sum().view", "torch.sum().view", "torch.sum().view", "torch.sum().view", "torch.sum().view", "torch.sum().view", "torch.sum().view", "torch.sum().view", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "grad.abs().view", "grad.abs"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.adversarial_attacks.adversarialattack.AdversarialAttack._get_loss_f", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.adversarial_attacks.utils.project_perturbation", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.adversarial_attacks.utils.create_early_stopping_mask", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.adversarial_attacks.utils.normalize_perturbation"], ["", "def", "perturb_inner", "(", "self", ",", "x", ",", "y", ",", "targeted", "=", "False", ",", "x_init", "=", "None", ")", ":", "\n", "        ", "l_f", "=", "self", ".", "_get_loss_f", "(", "x", ",", "y", ",", "targeted", ",", "'none'", ")", "\n", "\n", "best_perts", "=", "x", ".", "new_empty", "(", "x", ".", "shape", ")", "\n", "best_losses", "=", "1e13", "*", "x", ".", "new_ones", "(", "x", ".", "shape", "[", "0", "]", ")", "\n", "\n", "velocity", "=", "torch", ".", "zeros_like", "(", "x", ")", "\n", "\n", "cutout_mask", "=", "torch", ".", "zeros", "(", "x", ".", "shape", ",", "device", "=", "x", ".", "device", ",", "dtype", "=", "torch", ".", "bool", ")", "\n", "ys", "=", "torch", ".", "randint", "(", "x", ".", "shape", "[", "2", "]", ",", "(", "x", ".", "shape", "[", "0", "]", ",", ")", ")", "\n", "xs", "=", "torch", ".", "randint", "(", "x", ".", "shape", "[", "3", "]", ",", "(", "x", ".", "shape", "[", "0", "]", ",", ")", ")", "\n", "\n", "y1", "=", "torch", ".", "clamp", "(", "ys", "-", "self", ".", "mask_size", "//", "2", ",", "0", ",", "x", ".", "shape", "[", "2", "]", ")", "\n", "y2", "=", "torch", ".", "clamp", "(", "ys", "+", "self", ".", "mask_size", "//", "2", ",", "0", ",", "x", ".", "shape", "[", "2", "]", ")", "\n", "x1", "=", "torch", ".", "clamp", "(", "xs", "-", "self", ".", "mask_size", "//", "2", ",", "0", ",", "x", ".", "shape", "[", "3", "]", ")", "\n", "x2", "=", "torch", ".", "clamp", "(", "xs", "+", "self", ".", "mask_size", "//", "2", ",", "0", ",", "x", ".", "shape", "[", "3", "]", ")", "\n", "for", "i", "in", "range", "(", "x", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "cutout_mask", "[", "i", ",", ":", ",", "y1", "[", "i", "]", ":", "y2", "[", "i", "]", ",", "x1", "[", "i", "]", ":", "x2", "[", "i", "]", "]", "=", "1", "\n", "\n", "\n", "#initialize perturbation", "\n", "", "if", "self", ".", "init_noise_generator", "is", "None", ":", "\n", "            ", "pert", "=", "torch", ".", "zeros_like", "(", "x", ")", "\n", "", "else", ":", "\n", "            ", "pert", "=", "self", ".", "init_noise_generator", "(", "x", ")", "\n", "\n", "#trajectory container", "\n", "", "if", "self", ".", "save_trajectory", ":", "\n", "            ", "trajectory", "=", "torch", ".", "zeros", "(", "(", "self", ".", "iterations", "+", "1", ",", ")", "+", "x", ".", "shape", ",", "device", "=", "x", ".", "device", ")", "\n", "trajectory", "[", "0", ",", ":", "]", "=", "x", "\n", "", "else", ":", "\n", "            ", "trajectory", "=", "None", "\n", "\n", "", "for", "i", "in", "range", "(", "self", ".", "iterations", "+", "1", ")", ":", "\n", "            ", "pert", ".", "requires_grad_", "(", "True", ")", "\n", "with", "torch", ".", "enable_grad", "(", ")", ":", "\n", "                ", "p_data", "=", "x", "+", "pert", "\n", "p_data", "[", "cutout_mask", "]", "=", "0", "\n", "out", "=", "self", ".", "model", "(", "p_data", ")", "\n", "loss_expanded", "=", "l_f", "(", "p_data", ",", "out", ")", "\n", "\n", "new_best", "=", "loss_expanded", "<", "best_losses", "\n", "best_losses", "[", "new_best", "]", "=", "loss_expanded", "[", "new_best", "]", ".", "clone", "(", ")", ".", "detach", "(", ")", "\n", "best_perts", "[", "new_best", ",", ":", "]", "=", "pert", "[", "new_best", ",", ":", "]", ".", "clone", "(", ")", ".", "detach", "(", ")", "\n", "\n", "if", "i", "==", "self", ".", "iterations", ":", "\n", "                    ", "break", "\n", "\n", "", "if", "self", ".", "early_stopping", ">", "0", ":", "\n", "                    ", "finished", ",", "mask", "=", "create_early_stopping_mask", "(", "out", ",", "y", ",", "self", ".", "early_stopping", ",", "targeted", ")", "\n", "if", "finished", ":", "\n", "                        ", "break", "\n", "", "", "else", ":", "\n", "                    ", "mask", "=", "1.", "\n", "\n", "", "loss", "=", "torch", ".", "mean", "(", "loss_expanded", ")", "\n", "grad", "=", "torch", ".", "autograd", ".", "grad", "(", "loss", ",", "pert", ")", "[", "0", "]", "\n", "grad", "[", "cutout_mask", "]", "=", "0.0", "\n", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "# pgd on given loss", "\n", "                ", "if", "self", ".", "normalize_grad", ":", "\n", "# https://arxiv.org/pdf/1710.06081.pdf the l1 normalization follows the momentum iterative method", "\n", "                    ", "l1_norm_gradient", "=", "1e-10", "+", "torch", ".", "sum", "(", "grad", ".", "abs", "(", ")", ".", "view", "(", "x", ".", "shape", "[", "0", "]", ",", "-", "1", ")", ",", "dim", "=", "1", ")", ".", "view", "(", "-", "1", ",", "1", ",", "1", ",", "1", ")", "\n", "velocity", "=", "self", ".", "momentum", "*", "velocity", "+", "grad", "/", "l1_norm_gradient", "\n", "norm_velocity", "=", "normalize_perturbation", "(", "velocity", ",", "self", ".", "norm", ")", "\n", "", "else", ":", "\n", "# velocity update as in pytorch https://pytorch.org/docs/stable/optim.html", "\n", "                    ", "velocity", "=", "self", ".", "momentum", "*", "velocity", "+", "grad", "\n", "norm_velocity", "=", "velocity", "\n", "\n", "", "pert", "=", "pert", "-", "(", "self", ".", "decay", "**", "i", ")", "*", "self", ".", "stepsize", "*", "mask", "*", "norm_velocity", "\n", "#todo check order", "\n", "pert", "=", "project_perturbation", "(", "pert", ",", "self", ".", "eps", ",", "self", ".", "norm", ")", "\n", "pert", "=", "torch", ".", "clamp", "(", "x", "+", "pert", ",", "0", ",", "1", ")", "-", "x", "#box constraint", "\n", "\n", "if", "self", ".", "save_trajectory", ":", "\n", "                    ", "trajectory", "[", "i", "+", "1", "]", "=", "x", "+", "pert", "\n", "\n", "", "", "", "final_loss", "=", "best_losses", "\n", "p_data", "=", "(", "x", "+", "best_perts", ")", ".", "detach", "(", ")", "\n", "p_data", "[", "cutout_mask", "]", "=", "0", "\n", "\n", "return", "p_data", ",", "final_loss", ",", "trajectory", "\n", "", "", ""]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.adversarial_attacks.l1_projection.project_onto_l1_ball": [[3, 45], ["x.view.view", "torch.sort", "torch.cumsum", "torch.arange", "torch.max", "x.view.view", "torch.abs", "torch.sign", "torch.abs", "theta.unsqueeze", "torch.norm", "torch.arange", "rho.cpu"], "function", ["None"], ["def", "project_onto_l1_ball", "(", "x", ",", "eps", ")", ":", "\n", "    ", "\"\"\"\n    Compute Euclidean projection onto the L1 ball for a batch.\n\n      min ||x - u||_2 s.t. ||u||_1 <= eps\n\n    Inspired by the corresponding numpy version by Adrien Gaidon.\n\n    Parameters\n    ----------\n    x: (batch_size, *) torch array\n      batch of arbitrary-out_size tensors to project, possibly on GPU\n\n    eps: float\n      radius of l-1 ball to project onto\n\n    Returns\n    -------\n    u: (batch_size, *) torch array\n      batch of projected tensors, reshaped to match the original\n\n    Notes\n    -----\n    The complexity of this algorithm is in O(dlogd) as it involves sorting x.\n\n    References\n    ----------\n    [1] Efficient Projections onto the l1-Ball for Learning in High Dimensions\n        John Duchi, Shai Shalev-Shwartz, Yoram Singer, and Tushar Chandra.\n        International Conference on Machine Learning (ICML 2008)\n    \"\"\"", "\n", "original_shape", "=", "x", ".", "shape", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", "mask", "=", "(", "torch", ".", "norm", "(", "x", ",", "p", "=", "1", ",", "dim", "=", "1", ")", "<", "eps", ")", ".", "float", "(", ")", ".", "unsqueeze", "(", "1", ")", "\n", "mu", ",", "_", "=", "torch", ".", "sort", "(", "torch", ".", "abs", "(", "x", ")", ",", "dim", "=", "1", ",", "descending", "=", "True", ")", "\n", "cumsum", "=", "torch", ".", "cumsum", "(", "mu", ",", "dim", "=", "1", ")", "\n", "arange", "=", "torch", ".", "arange", "(", "1", ",", "x", ".", "shape", "[", "1", "]", "+", "1", ",", "device", "=", "x", ".", "device", ")", "\n", "rho", ",", "_", "=", "torch", ".", "max", "(", "(", "mu", "*", "arange", ">", "(", "cumsum", "-", "eps", ")", ")", "*", "arange", ",", "dim", "=", "1", ")", "\n", "theta", "=", "(", "cumsum", "[", "torch", ".", "arange", "(", "x", ".", "shape", "[", "0", "]", ")", ",", "rho", ".", "cpu", "(", ")", "-", "1", "]", "-", "eps", ")", "/", "rho", "\n", "proj", "=", "(", "torch", ".", "abs", "(", "x", ")", "-", "theta", ".", "unsqueeze", "(", "1", ")", ")", ".", "clamp", "(", "min", "=", "0", ")", "\n", "x", "=", "mask", "*", "x", "+", "(", "1", "-", "mask", ")", "*", "proj", "*", "torch", ".", "sign", "(", "x", ")", "\n", "return", "x", ".", "view", "(", "original_shape", ")", "", "", ""]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.adversarial_attacks.pgd.PGD.__init__": [[11, 25], ["restartattack.RestartAttack.__init__"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models_32x32.shake_pyramidnet.ShakePyramidNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "eps", ",", "iterations", ",", "stepsize", ",", "num_classes", ",", "momentum", "=", "0.9", ",", "norm", "=", "'inf'", ",", "loss", "=", "'CrossEntropy'", ",", "\n", "normalize_grad", "=", "True", ",", "early_stopping", "=", "0", ",", "restarts", "=", "0", ",", "init_noise_generator", "=", "None", ",", "model", "=", "None", ",", "\n", "save_trajectory", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "loss", ",", "restarts", ",", "num_classes", ",", "model", "=", "model", ",", "save_trajectory", "=", "save_trajectory", ")", "\n", "#loss either pass 'CrossEntropy' or 'LogitsDiff' or custom loss function", "\n", "self", ".", "eps", "=", "eps", "\n", "self", ".", "iterations", "=", "iterations", "\n", "self", ".", "stepsize", "=", "stepsize", "\n", "self", ".", "momentum", "=", "momentum", "\n", "self", ".", "norm", "=", "norm", "\n", "self", ".", "loss", "=", "loss", "\n", "self", ".", "normalize_grad", "=", "normalize_grad", "\n", "self", ".", "early_stopping", "=", "early_stopping", "\n", "self", ".", "init_noise_generator", "=", "init_noise_generator", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.adversarial_attacks.pgd.PGD._get_trajectory_depth": [[26, 28], ["None"], "methods", ["None"], ["", "def", "_get_trajectory_depth", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "iterations", "+", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.adversarial_attacks.pgd.PGD.get_config_dict": [[29, 45], ["isinstance"], "methods", ["None"], ["", "def", "get_config_dict", "(", "self", ")", ":", "\n", "        ", "dict", "=", "{", "}", "\n", "dict", "[", "'type'", "]", "=", "'PGD'", "\n", "dict", "[", "'eps'", "]", "=", "self", ".", "eps", "\n", "dict", "[", "'iterations'", "]", "=", "self", ".", "iterations", "\n", "dict", "[", "'stepsize'", "]", "=", "self", ".", "stepsize", "\n", "dict", "[", "'momentum'", "]", "=", "self", ".", "momentum", "\n", "dict", "[", "'norm'", "]", "=", "self", ".", "norm", "\n", "if", "isinstance", "(", "self", ".", "loss", ",", "str", ")", ":", "\n", "            ", "dict", "[", "'loss'", "]", "=", "self", ".", "loss", "\n", "", "else", ":", "\n", "            ", "dict", "[", "'loss'", "]", "=", "'custom'", "\n", "", "dict", "[", "'normalize_grad'", "]", "=", "self", ".", "normalize_grad", "\n", "dict", "[", "'early_stopping'", "]", "=", "self", ".", "early_stopping", "\n", "dict", "[", "'restarts'", "]", "=", "self", ".", "restarts", "\n", "return", "dict", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.adversarial_attacks.pgd.PGD.perturb_inner": [[47, 100], ["pgd.PGD._get_loss_f", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "utils.initialize_perturbation", "range", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "utils.project_perturbation.requires_grad_", "pgd.PGD.", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "pgd.PGD.model", "pgd.PGD.", "pgd.PGD.mean", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "utils.project_perturbation", "pgd.PGD.model", "utils.create_early_stopping_mask", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "utils.normalize_perturbation", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.sum().view", "torch.sum().view", "torch.sum().view", "torch.sum().view", "torch.sum().view", "torch.sum().view", "torch.sum().view", "torch.sum().view", "torch.sum().view", "torch.sum().view", "torch.sum().view", "torch.sum().view", "torch.sum().view", "torch.sum().view", "torch.sum().view", "torch.sum().view", "torch.sum().view", "torch.sum().view", "torch.sum().view", "torch.sum().view", "torch.sum().view", "torch.sum().view", "torch.sum().view", "torch.sum().view", "torch.sum().view", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "grad.abs().view", "grad.abs"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.adversarial_attacks.adversarialattack.AdversarialAttack._get_loss_f", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.adversarial_attacks.utils.initialize_perturbation", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.adversarial_attacks.utils.project_perturbation", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.adversarial_attacks.utils.create_early_stopping_mask", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.adversarial_attacks.utils.normalize_perturbation"], ["", "def", "perturb_inner", "(", "self", ",", "x", ",", "y", ",", "targeted", "=", "False", ",", "x_init", "=", "None", ")", ":", "\n", "        ", "l_f", "=", "self", ".", "_get_loss_f", "(", "x", ",", "y", ",", "targeted", ",", "'none'", ")", "\n", "\n", "velocity", "=", "torch", ".", "zeros_like", "(", "x", ")", "\n", "\n", "#initialize perturbation", "\n", "pert", "=", "initialize_perturbation", "(", "x", ",", "self", ".", "eps", ",", "self", ".", "norm", ",", "x_init", ",", "self", ".", "init_noise_generator", ")", "\n", "\n", "#trajectory container", "\n", "if", "self", ".", "save_trajectory", ":", "\n", "            ", "trajectory", "=", "torch", ".", "zeros", "(", "(", "self", ".", "iterations", "+", "1", ",", ")", "+", "x", ".", "shape", ",", "device", "=", "x", ".", "device", ")", "\n", "trajectory", "[", "0", ",", ":", "]", "=", "x", "\n", "", "else", ":", "\n", "            ", "trajectory", "=", "None", "\n", "\n", "", "for", "i", "in", "range", "(", "self", ".", "iterations", ")", ":", "\n", "            ", "pert", ".", "requires_grad_", "(", "True", ")", "\n", "with", "torch", ".", "enable_grad", "(", ")", ":", "\n", "                ", "p_data", "=", "x", "+", "pert", "\n", "out", "=", "self", ".", "model", "(", "p_data", ")", "\n", "\n", "if", "self", ".", "early_stopping", ">", "0", ":", "\n", "                    ", "finished", ",", "mask", "=", "create_early_stopping_mask", "(", "out", ",", "y", ",", "self", ".", "early_stopping", ",", "targeted", ")", "\n", "if", "finished", ":", "\n", "                        ", "break", "\n", "", "", "else", ":", "\n", "                    ", "mask", "=", "1.", "\n", "\n", "", "loss_expanded", "=", "l_f", "(", "p_data", ",", "out", ")", "\n", "loss", "=", "loss_expanded", ".", "mean", "(", ")", "\n", "grad", "=", "torch", ".", "autograd", ".", "grad", "(", "loss", ",", "pert", ")", "[", "0", "]", "\n", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "# pgd on given loss", "\n", "                ", "if", "self", ".", "normalize_grad", ":", "\n", "# https://arxiv.org/pdf/1710.06081.pdf the l1 normalization follows the momentum iterative method", "\n", "                    ", "l1_norm_gradient", "=", "1e-10", "+", "torch", ".", "sum", "(", "grad", ".", "abs", "(", ")", ".", "view", "(", "x", ".", "shape", "[", "0", "]", ",", "-", "1", ")", ",", "dim", "=", "1", ")", ".", "view", "(", "-", "1", ",", "1", ",", "1", ",", "1", ")", "\n", "velocity", "=", "self", ".", "momentum", "*", "velocity", "+", "grad", "/", "l1_norm_gradient", "\n", "norm_velocity", "=", "normalize_perturbation", "(", "velocity", ",", "self", ".", "norm", ")", "\n", "", "else", ":", "\n", "# velocity update as in pytorch https://pytorch.org/docs/stable/optim.html", "\n", "                    ", "velocity", "=", "self", ".", "momentum", "*", "velocity", "+", "grad", "\n", "norm_velocity", "=", "velocity", "\n", "\n", "", "pert", "=", "pert", "-", "self", ".", "stepsize", "*", "mask", "*", "norm_velocity", "\n", "pert", "=", "project_perturbation", "(", "pert", ",", "self", ".", "eps", ",", "self", ".", "norm", ")", "\n", "pert", "=", "torch", ".", "clamp", "(", "x", "+", "pert", ",", "0", ",", "1", ")", "-", "x", "#box constraint", "\n", "\n", "if", "self", ".", "save_trajectory", ":", "\n", "                    ", "trajectory", "[", "i", "+", "1", "]", "=", "x", "+", "pert", "\n", "\n", "", "", "", "p_data", "=", "x", "+", "pert", "\n", "return", "p_data", ",", "l_f", "(", "p_data", ",", "self", ".", "model", "(", "p_data", ")", ")", ",", "trajectory", "\n", "", "", ""]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.adversarial_attacks.dummy_attack.DummyAttack.__init__": [[5, 7], ["adversarialattack.AdversarialAttack.__init__"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models_32x32.shake_pyramidnet.ShakePyramidNet.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "None", ",", "0", ",", "model", "=", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.adversarial_attacks.dummy_attack.DummyAttack.perturb": [[8, 10], ["None"], "methods", ["None"], ["", "def", "perturb", "(", "self", ",", "x", ",", "y", ",", "targeted", "=", "False", ",", "x_init", "=", "None", ")", ":", "\n", "        ", "return", "x", "\n", "", "", ""]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.adversarial_attacks.argmin_pgd.ArgminPGD.__init__": [[11, 24], ["restartattack.RestartAttack.__init__"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models_32x32.shake_pyramidnet.ShakePyramidNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "eps", ",", "iterations", ",", "stepsize", ",", "num_classes", ",", "momentum", "=", "0.9", ",", "norm", "=", "'inf'", ",", "loss", "=", "'CrossEntropy'", ",", "\n", "normalize_grad", "=", "True", ",", "early_stopping", "=", "0", ",", "restarts", "=", "0", ",", "init_noise_generator", "=", "None", ",", "model", "=", "None", ",", "\n", "save_trajectory", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "loss", ",", "restarts", ",", "num_classes", ",", "model", "=", "model", ",", "save_trajectory", "=", "save_trajectory", ")", "\n", "self", ".", "eps", "=", "eps", "\n", "self", ".", "iterations", "=", "iterations", "\n", "self", ".", "stepsize", "=", "stepsize", "\n", "self", ".", "momentum", "=", "momentum", "\n", "self", ".", "norm", "=", "norm", "\n", "self", ".", "loss", "=", "loss", "\n", "self", ".", "normalize_grad", "=", "normalize_grad", "\n", "self", ".", "early_stopping", "=", "early_stopping", "\n", "self", ".", "init_noise_generator", "=", "init_noise_generator", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.adversarial_attacks.argmin_pgd.ArgminPGD._get_trajectory_depth": [[25, 27], ["None"], "methods", ["None"], ["", "def", "_get_trajectory_depth", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "iterations", "+", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.adversarial_attacks.argmin_pgd.ArgminPGD.get_config_dict": [[28, 44], ["isinstance"], "methods", ["None"], ["", "def", "get_config_dict", "(", "self", ")", ":", "\n", "        ", "dict", "=", "{", "}", "\n", "dict", "[", "'type'", "]", "=", "'ArgminPGD'", "\n", "dict", "[", "'eps'", "]", "=", "self", ".", "eps", "\n", "dict", "[", "'iterations'", "]", "=", "self", ".", "iterations", "\n", "dict", "[", "'stepsize'", "]", "=", "self", ".", "stepsize", "\n", "dict", "[", "'momentum'", "]", "=", "self", ".", "momentum", "\n", "dict", "[", "'norm'", "]", "=", "self", ".", "norm", "\n", "if", "isinstance", "(", "self", ".", "loss", ",", "str", ")", ":", "\n", "            ", "dict", "[", "'loss'", "]", "=", "self", ".", "loss", "\n", "", "else", ":", "\n", "            ", "dict", "[", "'loss'", "]", "=", "'custom'", "\n", "", "dict", "[", "'normalize_grad'", "]", "=", "self", ".", "normalize_grad", "\n", "dict", "[", "'early_stopping'", "]", "=", "self", ".", "early_stopping", "\n", "dict", "[", "'restarts'", "]", "=", "self", ".", "restarts", "\n", "return", "dict", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.adversarial_attacks.argmin_pgd.ArgminPGD.perturb_inner": [[46, 110], ["argmin_pgd.ArgminPGD._get_loss_f", "x.new_empty", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "utils.initialize_perturbation", "range", "x.new_ones", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "utils.project_perturbation.requires_grad_", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "argmin_pgd.ArgminPGD.model", "argmin_pgd.ArgminPGD.", "loss_expanded[].clone().detach", "pert[].clone().detach", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "utils.project_perturbation", "utils.create_early_stopping_mask", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "utils.normalize_perturbation", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "loss_expanded[].clone", "pert[].clone", "torch.sum().view", "torch.sum().view", "torch.sum().view", "torch.sum().view", "torch.sum().view", "torch.sum().view", "torch.sum().view", "torch.sum().view", "torch.sum().view", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "grad.abs().reshape", "grad.abs"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.adversarial_attacks.adversarialattack.AdversarialAttack._get_loss_f", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.adversarial_attacks.utils.initialize_perturbation", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.adversarial_attacks.utils.project_perturbation", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.adversarial_attacks.utils.create_early_stopping_mask", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.adversarial_attacks.utils.normalize_perturbation"], ["", "def", "perturb_inner", "(", "self", ",", "x", ",", "y", ",", "targeted", "=", "False", ",", "x_init", "=", "None", ")", ":", "\n", "        ", "l_f", "=", "self", ".", "_get_loss_f", "(", "x", ",", "y", ",", "targeted", ",", "'none'", ")", "\n", "\n", "best_perts", "=", "x", ".", "new_empty", "(", "x", ".", "shape", ")", "\n", "best_losses", "=", "1e13", "*", "x", ".", "new_ones", "(", "x", ".", "shape", "[", "0", "]", ")", "\n", "\n", "velocity", "=", "torch", ".", "zeros_like", "(", "x", ")", "\n", "\n", "#initialize perturbation", "\n", "pert", "=", "initialize_perturbation", "(", "x", ",", "self", ".", "eps", ",", "self", ".", "norm", ",", "x_init", ",", "self", ".", "init_noise_generator", ")", "\n", "\n", "#trajectory container", "\n", "if", "self", ".", "save_trajectory", ":", "\n", "            ", "trajectory", "=", "torch", ".", "zeros", "(", "(", "self", ".", "iterations", "+", "1", ",", ")", "+", "x", ".", "shape", ",", "device", "=", "x", ".", "device", ")", "\n", "trajectory", "[", "0", ",", ":", "]", "=", "x", "\n", "", "else", ":", "\n", "            ", "trajectory", "=", "None", "\n", "\n", "", "for", "i", "in", "range", "(", "self", ".", "iterations", "+", "1", ")", ":", "\n", "            ", "pert", ".", "requires_grad_", "(", "True", ")", "\n", "with", "torch", ".", "enable_grad", "(", ")", ":", "\n", "                ", "p_data", "=", "x", "+", "pert", "\n", "out", "=", "self", ".", "model", "(", "p_data", ")", "\n", "loss_expanded", "=", "l_f", "(", "p_data", ",", "out", ")", "\n", "\n", "new_best", "=", "loss_expanded", "<", "best_losses", "\n", "best_losses", "[", "new_best", "]", "=", "loss_expanded", "[", "new_best", "]", ".", "clone", "(", ")", ".", "detach", "(", ")", "\n", "best_perts", "[", "new_best", ",", ":", "]", "=", "pert", "[", "new_best", ",", ":", "]", ".", "clone", "(", ")", ".", "detach", "(", ")", "\n", "\n", "if", "i", "==", "self", ".", "iterations", ":", "\n", "                    ", "break", "\n", "\n", "", "if", "self", ".", "early_stopping", ">", "0", ":", "\n", "                    ", "finished", ",", "mask", "=", "create_early_stopping_mask", "(", "out", ",", "y", ",", "self", ".", "early_stopping", ",", "targeted", ")", "\n", "if", "finished", ":", "\n", "                        ", "break", "\n", "", "", "else", ":", "\n", "                    ", "mask", "=", "1.", "\n", "\n", "", "loss", "=", "torch", ".", "mean", "(", "loss_expanded", ")", "\n", "grad", "=", "torch", ".", "autograd", ".", "grad", "(", "loss", ",", "pert", ")", "[", "0", "]", "\n", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "# pgd on given loss", "\n", "                ", "if", "self", ".", "normalize_grad", ":", "\n", "# https://arxiv.org/pdf/1710.06081.pdf the l1 normalization follows the momentum iterative method", "\n", "                    ", "l1_norm_gradient", "=", "1e-10", "+", "torch", ".", "sum", "(", "grad", ".", "abs", "(", ")", ".", "reshape", "(", "x", ".", "shape", "[", "0", "]", ",", "-", "1", ")", ",", "dim", "=", "1", ")", ".", "view", "(", "-", "1", ",", "1", ",", "1", ",", "1", ")", "\n", "velocity", "=", "self", ".", "momentum", "*", "velocity", "+", "grad", "/", "l1_norm_gradient", "\n", "norm_velocity", "=", "normalize_perturbation", "(", "velocity", ",", "self", ".", "norm", ")", "\n", "", "else", ":", "\n", "# velocity update as in pytorch https://pytorch.org/docs/stable/optim.html", "\n", "                    ", "velocity", "=", "self", ".", "momentum", "*", "velocity", "+", "grad", "\n", "norm_velocity", "=", "velocity", "\n", "\n", "", "pert", "=", "pert", "-", "self", ".", "stepsize", "*", "mask", "*", "norm_velocity", "\n", "pert", "=", "project_perturbation", "(", "pert", ",", "self", ".", "eps", ",", "self", ".", "norm", ")", "\n", "pert", "=", "torch", ".", "clamp", "(", "x", "+", "pert", ",", "0", ",", "1", ")", "-", "x", "#box constraint", "\n", "\n", "if", "self", ".", "save_trajectory", ":", "\n", "                    ", "trajectory", "[", "i", "+", "1", "]", "=", "x", "+", "pert", "\n", "\n", "", "", "", "final_loss", "=", "best_losses", "\n", "p_data", "=", "(", "x", "+", "best_perts", ")", ".", "detach", "(", ")", "\n", "return", "p_data", ",", "final_loss", ",", "trajectory", "\n", "", "", ""]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.adversarial_attacks.tanh_attack.TanhIterativeAttack.__init__": [[49, 59], ["restartattack.RestartAttack.__init__"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models_32x32.shake_pyramidnet.ShakePyramidNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "iterations", ",", "stepsize", ",", "num_classes", ",", "loss", "=", "'CW'", ",", "restarts", "=", "0", ",", "init_noise_generator", "=", "None", ",", "confidence", "=", "0.0", ",", "early_stopping", "=", "0", ",", "model", "=", "None", ",", "reg_weight", "=", "1", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "restarts", "=", "restarts", ",", "model", "=", "model", ",", "save_trajectory", "=", "False", ")", "\n", "self", ".", "iterations", "=", "iterations", "\n", "self", ".", "stepsize", "=", "stepsize", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "loss", "=", "loss", "\n", "self", ".", "init_noise_generator", "=", "init_noise_generator", "\n", "self", ".", "confidence", "=", "confidence", "\n", "self", ".", "reg_weight", "=", "reg_weight", "\n", "self", ".", "early_stopping", "=", "early_stopping", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.adversarial_attacks.tanh_attack.TanhIterativeAttack.get_config_dict": [[60, 69], ["None"], "methods", ["None"], ["", "def", "get_config_dict", "(", "self", ")", ":", "\n", "        ", "dict", "=", "{", "}", "\n", "dict", "[", "'type'", "]", "=", "'TanhIterative'", "\n", "dict", "[", "'iterations'", "]", "=", "self", ".", "iterations", "\n", "dict", "[", "'stepsize'", "]", "=", "self", ".", "stepsize", "\n", "dict", "[", "'reg weight'", "]", "=", "self", ".", "reg_weight", "\n", "dict", "[", "'confidence'", "]", "=", "self", ".", "confidence", "\n", "#config_dict['init_sigma'] = self.init_sigma", "\n", "return", "dict", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.adversarial_attacks.tanh_attack.TanhIterativeAttack.perturb_inner": [[70, 128], ["x.clone().detach", "tanh_attack.img_to_tanh", "torch.zeros_like.requires_grad_", "torch.zeros_like.requires_grad_", "torch.zeros_like.requires_grad_", "torch.zeros_like.requires_grad_", "torch.zeros_like.requires_grad_", "torch.Adam", "torch.Adam", "torch.Adam", "torch.Adam", "torch.Adam", "range", "tanh_attack.tanh_to_img", "l_f", "torch.nn.functional.one_hot", "torch.nn.functional.one_hot", "torch.nn.functional.one_hot", "torch.nn.functional.one_hot", "torch.nn.functional.one_hot", "torch.nn.functional.one_hot", "torch.nn.functional.one_hot", "torch.nn.functional.one_hot", "torch.nn.functional.one_hot", "torch.nn.functional.one_hot", "torch.nn.functional.one_hot", "torch.nn.functional.one_hot", "torch.nn.functional.one_hot", "torch.nn.functional.one_hot", "torch.nn.functional.one_hot", "torch.nn.functional.one_hot", "torch.nn.functional.one_hot", "torch.nn.functional.one_hot", "torch.nn.functional.one_hot", "torch.nn.functional.one_hot", "torch.nn.functional.one_hot", "torch.nn.functional.one_hot", "torch.nn.functional.one_hot", "torch.nn.functional.one_hot", "torch.nn.functional.one_hot", "y_oh.float.float.float", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "NotImplementedError", "torch.Adam.zero_grad", "l_f.backward", "torch.Adam.step", "tanh_attack.TanhIterativeAttack.model", "tanh_attack.CW_loss", "tanh_attack.TanhIterativeAttack.loss", "x.clone", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "tanh_attack.tanh_to_img", "tanh_attack.TanhIterativeAttack.model", "l_f", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "pert_tanh[].detach", "torch.nn.functional.softmax", "torch.nn.functional.softmax", "torch.nn.functional.softmax", "torch.nn.functional.softmax", "torch.nn.functional.softmax", "torch.nn.functional.softmax", "torch.nn.functional.softmax", "torch.nn.functional.softmax", "torch.nn.functional.softmax", "torch.nn.functional.softmax", "torch.nn.functional.softmax", "torch.nn.functional.softmax", "torch.nn.functional.softmax", "torch.nn.functional.softmax", "torch.nn.functional.softmax", "torch.nn.functional.softmax", "torch.nn.functional.softmax", "torch.nn.functional.softmax", "torch.nn.functional.softmax", "torch.nn.functional.softmax", "torch.nn.functional.softmax", "torch.nn.functional.softmax", "torch.nn.functional.softmax", "torch.nn.functional.softmax", "torch.nn.functional.softmax", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "sum", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "mask.float"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.adversarial_attacks.tanh_attack.img_to_tanh", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.adversarial_attacks.tanh_attack.tanh_to_img", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models_32x32.shakedrop.ShakeDropFunction.backward", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.schedulers.scheduler.Scheduler.step", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.adversarial_attacks.tanh_attack.CW_loss", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.adversarial_attacks.tanh_attack.tanh_to_img"], ["", "def", "perturb_inner", "(", "self", ",", "x", ",", "y", ",", "targeted", "=", "False", ",", "x_init", "=", "None", ")", ":", "\n", "        ", "bs", "=", "y", ".", "shape", "[", "0", "]", "\n", "\n", "if", "self", ".", "loss", "==", "'CW'", ":", "\n", "            ", "y_oh", "=", "torch", ".", "nn", ".", "functional", ".", "one_hot", "(", "y", ",", "self", ".", "num_classes", ")", "\n", "y_oh", "=", "y_oh", ".", "float", "(", ")", "\n", "l_f", "=", "lambda", "data", ",", "data_out", ":", "CW_loss", "(", "data", ",", "x", ",", "data_out", ",", "y_oh", ",", "targeted", ",", "self", ".", "reg_weight", ",", "confidence", "=", "self", ".", "confidence", ")", "\n", "", "else", ":", "\n", "            ", "l_f", "=", "lambda", "data", ",", "data_out", ":", "self", ".", "loss", "(", "data", ",", "data_out", ",", "x", ",", "y", ")", "\n", "\n", "\n", "", "data", "=", "x", ".", "clone", "(", ")", ".", "detach", "(", ")", "\n", "\n", "\n", "data_tanh", "=", "img_to_tanh", "(", "data", ")", "\n", "\n", "if", "self", ".", "init_noise_generator", "is", "None", ":", "\n", "            ", "pert_tanh", "=", "torch", ".", "zeros_like", "(", "data", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", ")", "\n", "\n", "", "pert_tanh", ".", "requires_grad_", "(", "True", ")", "\n", "\n", "optimizer", "=", "optim", ".", "Adam", "(", "[", "pert_tanh", "]", ",", "self", ".", "stepsize", ")", "\n", "\n", "for", "i", "in", "range", "(", "self", ".", "iterations", ")", ":", "\n", "            ", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "with", "torch", ".", "enable_grad", "(", ")", ":", "\n", "#distance to original image", "\n", "                ", "pert_img", "=", "tanh_to_img", "(", "data_tanh", "+", "pert_tanh", ")", "\n", "out", "=", "self", ".", "model", "(", "pert_img", ")", "\n", "loss", "=", "l_f", "(", "pert_img", ",", "out", ")", "\n", "\n", "", "if", "self", ".", "early_stopping", ">", "0", ":", "\n", "                ", "conf", ",", "pred", "=", "torch", ".", "max", "(", "torch", ".", "nn", ".", "functional", ".", "softmax", "(", "out", ",", "dim", "=", "1", ")", ",", "1", ")", "\n", "conf_mask", "=", "conf", ">", "self", ".", "early_stopping", "\n", "if", "targeted", ":", "\n", "                    ", "correct_mask", "=", "torch", ".", "eq", "(", "y", ",", "pred", ")", "\n", "", "else", ":", "\n", "                    ", "correct_mask", "=", "(", "~", "torch", ".", "eq", "(", "y", ",", "pred", ")", ")", "\n", "", "mask", "=", "(", "conf_mask", "&", "correct_mask", ")", ".", "detach", "(", ")", "\n", "saved_perts", "=", "pert_tanh", "[", "mask", ",", ":", "]", ".", "detach", "(", ")", "\n", "\n", "if", "sum", "(", "mask", ".", "float", "(", ")", ")", "==", "x", ".", "shape", "[", "0", "]", ":", "\n", "                    ", "break", "\n", "\n", "", "", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "if", "self", ".", "early_stopping", ">", "0", ":", "\n", "                ", "pert_tanh", "[", "mask", "]", "=", "saved_perts", "\n", "\n", "\n", "\n", "", "", "pert_img", "=", "tanh_to_img", "(", "data_tanh", "+", "pert_tanh", ")", "\n", "loss", "=", "l_f", "(", "pert_img", ",", "self", ".", "model", "(", "pert_img", ")", ")", "\n", "return", "pert_img", ",", "loss", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.adversarial_attacks.tanh_attack.atanh": [[11, 13], ["torch.log", "torch.log", "torch.log", "torch.log", "torch.log"], "function", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_loss.DistanceLogger.log", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_loss.DistanceLogger.log", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_loss.DistanceLogger.log", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_loss.DistanceLogger.log", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_loss.DistanceLogger.log"], ["def", "atanh", "(", "x", ")", ":", "\n", "    ", "return", "0.5", "*", "torch", ".", "log", "(", "(", "1", "+", "x", ")", "/", "(", "1", "-", "x", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.adversarial_attacks.tanh_attack.img_to_tanh": [[14, 18], ["tanh_attack.atanh"], "function", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.adversarial_attacks.tanh_attack.atanh"], ["", "def", "img_to_tanh", "(", "x", ",", "boxmin", "=", "0", ",", "boxmax", "=", "1", ")", ":", "\n", "    ", "boxmul", "=", "0.5", "*", "(", "boxmax", "-", "boxmin", ")", "\n", "boxplus", "=", "0.5", "*", "(", "boxmin", "+", "boxmax", ")", "\n", "return", "atanh", "(", "(", "x", "-", "boxplus", ")", "/", "boxmul", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.adversarial_attacks.tanh_attack.tanh_to_img": [[19, 24], ["torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh"], "function", ["None"], ["", "def", "tanh_to_img", "(", "w", ",", "boxmin", "=", "0", ",", "boxmax", "=", "1", ")", ":", "\n", "    ", "boxmul", "=", "0.5", "*", "(", "boxmax", "-", "boxmin", ")", "\n", "boxplus", "=", "0.5", "*", "(", "boxmin", "+", "boxmax", ")", "\n", "#transform tanh space image to normal image space with bound [low_b, up_b]", "\n", "return", "torch", ".", "tanh", "(", "w", ")", "*", "boxmul", "+", "boxplus", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.adversarial_attacks.tanh_attack.CW_loss": [[25, 45], ["torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.clamp_min", "torch.clamp_min", "torch.clamp_min", "torch.clamp_min", "torch.clamp_min", "torch.clamp_min", "torch.clamp_min", "torch.clamp_min", "torch.clamp_min", "torch.clamp_min", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean"], "function", ["None"], ["", "def", "CW_loss", "(", "pert_img", ",", "orig_img", ",", "out", ",", "y_oh", ",", "targeted", ",", "reg_weight", ",", "confidence", "=", "0", ",", "reduce", "=", "True", ")", ":", "\n", "    ", "bs", "=", "pert_img", ".", "shape", "[", "0", "]", "\n", "loss_1", "=", "torch", ".", "sum", "(", "(", "(", "pert_img", "-", "orig_img", ")", "**", "2", ")", ".", "view", "(", "bs", ",", "-", "1", ")", ",", "dim", "=", "1", ")", "\n", "\n", "# logits of gt class", "\n", "out_real", "=", "torch", ".", "sum", "(", "(", "out", "*", "y_oh", ")", ",", "1", ")", "\n", "# logits of other highest scoring", "\n", "out_other", "=", "torch", ".", "max", "(", "out", "*", "(", "1.", "-", "y_oh", ")", "-", "y_oh", "*", "100000000.", ",", "1", ")", "[", "0", "]", "\n", "\n", "if", "targeted", ":", "\n", "# maximize target class and minimize second highest", "\n", "        ", "loss_2", "=", "torch", ".", "clamp_min", "(", "out_other", "-", "out_real", ",", "-", "confidence", ")", "\n", "", "else", ":", "\n", "# minimize target and max second highest", "\n", "        ", "loss_2", "=", "torch", ".", "clamp_min", "(", "out_real", "-", "out_other", ",", "-", "confidence", ")", "\n", "\n", "", "if", "reduce", ":", "\n", "        ", "loss", "=", "torch", ".", "mean", "(", "reg_weight", "*", "loss_1", "+", "loss_2", ")", "\n", "\n", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.adversarial_attacks.fab.FABAttack.__init__": [[42, 67], ["None"], "methods", ["None"], ["def", "__init__", "(", "\n", "self", ",", "\n", "predict", ",", "\n", "norm", "=", "'Linf'", ",", "\n", "n_restarts", "=", "1", ",", "\n", "n_iter", "=", "100", ",", "\n", "eps", "=", "None", ",", "\n", "alpha_max", "=", "0.1", ",", "\n", "eta", "=", "1.05", ",", "\n", "beta", "=", "0.9", ",", "\n", "loss_fn", "=", "None", ",", "\n", "verbose", "=", "False", ")", ":", "\n", "        ", "\"\"\" FAB-attack implementation in pytorch \"\"\"", "\n", "\n", "# super(FABAttack, self).__init__(predict, loss_fn=None, clip_min=0., clip_max=1.)", "\n", "self", ".", "predict", "=", "predict", "\n", "self", ".", "norm", "=", "norm", "\n", "self", ".", "n_restarts", "=", "n_restarts", "\n", "self", ".", "n_iter", "=", "n_iter", "\n", "self", ".", "eps", "=", "eps", "if", "eps", "is", "not", "None", "else", "DEFAULT_EPS_DICT_BY_NORM", "[", "norm", "]", "\n", "self", ".", "alpha_max", "=", "alpha_max", "\n", "self", ".", "eta", "=", "eta", "\n", "self", ".", "beta", "=", "beta", "\n", "self", ".", "targeted", "=", "False", "\n", "self", ".", "verbose", "=", "verbose", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.adversarial_attacks.fab.FABAttack._get_predicted_label": [[68, 73], ["torch.max", "torch.no_grad", "fab.FABAttack.predict"], "methods", ["None"], ["", "def", "_get_predicted_label", "(", "self", ",", "x", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "outputs", "=", "self", ".", "predict", "(", "x", ")", "\n", "", "_", ",", "y", "=", "torch", ".", "max", "(", "outputs", ",", "dim", "=", "1", ")", "\n", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.adversarial_attacks.fab.FABAttack.check_shape": [[74, 76], ["x.unsqueeze", "len"], "methods", ["None"], ["", "def", "check_shape", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "x", "if", "len", "(", "x", ".", "shape", ")", ">", "0", "else", "x", ".", "unsqueeze", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.adversarial_attacks.fab.FABAttack.get_diff_logits_grads_batch": [[77, 106], ["imgs.clone().requires_grad_", "torch.zeros().to", "torch.zeros_like", "zero_gradients", "fab.FABAttack.backward", "zero_gradients", "fab.FABAttack.backward", "torch.transpose().detach", "torch.stack", "torch.enable_grad", "fab.FABAttack.predict", "y2[].unsqueeze", "g2[].unsqueeze", "imgs.clone", "torch.zeros", "fab.FABAttack.sort", "torch.transpose", "torch.arange", "torch.arange", "fab.FABAttack.detach", "fab.FABAttack.detach", "imgs.size", "torch.arange", "torch.arange"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models_32x32.shakedrop.ShakeDropFunction.backward", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models_32x32.shakedrop.ShakeDropFunction.backward"], ["", "def", "get_diff_logits_grads_batch", "(", "self", ",", "imgs", ",", "la", ")", ":", "\n", "        ", "im", "=", "imgs", ".", "clone", "(", ")", ".", "requires_grad_", "(", ")", "\n", "with", "torch", ".", "enable_grad", "(", ")", ":", "\n", "            ", "y", "=", "self", ".", "predict", "(", "im", ")", "\n", "\n", "", "g2", "=", "torch", ".", "zeros", "(", "[", "2", ",", "*", "imgs", ".", "size", "(", ")", "]", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "grad_mask", "=", "torch", ".", "zeros_like", "(", "y", ")", "\n", "\n", "zero_gradients", "(", "im", ")", "\n", "grad_mask", "[", "torch", ".", "arange", "(", "imgs", ".", "shape", "[", "0", "]", ")", ",", "la", "]", "=", "1.0", "\n", "y", ".", "backward", "(", "grad_mask", ",", "retain_graph", "=", "True", ")", "\n", "grad_mask", "*=", "0.", "\n", "g2", "[", "0", "]", "=", "im", ".", "grad", ".", "data", "\n", "\n", "la_top2", "=", "y", ".", "sort", "(", "1", ")", "[", "1", "]", "[", ":", ",", "-", "2", "]", "\n", "zero_gradients", "(", "im", ")", "\n", "grad_mask", "[", "torch", ".", "arange", "(", "imgs", ".", "shape", "[", "0", "]", ")", ",", "la_top2", "]", "=", "1.0", "\n", "y", ".", "backward", "(", "grad_mask", ",", "retain_graph", "=", "True", ")", "\n", "# grad_mask *= 0.", "\n", "g2", "[", "1", "]", "=", "im", ".", "grad", ".", "data", "\n", "\n", "g2", "=", "torch", ".", "transpose", "(", "g2", ",", "0", ",", "1", ")", ".", "detach", "(", ")", "\n", "y2", "=", "torch", ".", "stack", "(", "\n", "[", "y", ".", "detach", "(", ")", "[", "torch", ".", "arange", "(", "imgs", ".", "shape", "[", "0", "]", ")", ",", "la", "]", ",", "y", ".", "detach", "(", ")", "[", "torch", ".", "arange", "(", "imgs", ".", "shape", "[", "0", "]", ")", ",", "la_top2", "]", "]", ",", "dim", "=", "1", ")", "\n", "df", "=", "y2", "-", "y2", "[", ":", ",", "0", "]", ".", "unsqueeze", "(", "1", ")", "\n", "dg", "=", "g2", "-", "g2", "[", ":", ",", "0", "]", ".", "unsqueeze", "(", "1", ")", "\n", "df", "[", ":", ",", "0", "]", "=", "1e10", "\n", "\n", "return", "df", ",", "dg", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.adversarial_attacks.fab.FABAttack.projection_linf": [[107, 180], ["points_to_project.clone", "w_hyperplane.clone", "b_hyperplane.clone", "fab.FABAttack.check_shape", "torch.ones().to", "torch.argsort", "b0.clone", "torch.argsort.unsqueeze().flip().squeeze", "torch.arange", "torch.cumsum", "fab.FABAttack.check_shape", "fab.FABAttack.check_shape", "torch.zeros", "torch.ceil", "torch.zeros().long", "lb.long.long.long", "torch.max().unsqueeze", "ws.abs", "torch.cumsum", "b0.unsqueeze", "torch.ones", "torch.log2", "torch.floor", "torch.floor.long", "c.nonzero().squeeze", "fab.FABAttack.check_shape", "fab.FABAttack.check_shape", "torch.max().unsqueeze", "torch.ones", "torch.ones().to", "torch.argsort.unsqueeze().flip", "torch.tensor().float", "torch.zeros", "torch.max", "torch.min", "torch.max", "torch.arange.unsqueeze", "c.nonzero", "torch.max", "torch.zeros().to", "torch.ones", "torch.argsort.unsqueeze", "torch.arange.unsqueeze", "torch.tensor", "torch.zeros().to", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.adversarial_attacks.fab.FABAttack.check_shape", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.adversarial_attacks.fab.FABAttack.check_shape", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.adversarial_attacks.fab.FABAttack.check_shape", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.adversarial_attacks.fab.FABAttack.check_shape", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.adversarial_attacks.fab.FABAttack.check_shape"], ["", "def", "projection_linf", "(", "self", ",", "points_to_project", ",", "w_hyperplane", ",", "b_hyperplane", ")", ":", "\n", "        ", "t", "=", "points_to_project", ".", "clone", "(", ")", "\n", "w", "=", "w_hyperplane", ".", "clone", "(", ")", "\n", "b", "=", "b_hyperplane", ".", "clone", "(", ")", "\n", "\n", "ind2", "=", "(", "(", "w", "*", "t", ")", ".", "sum", "(", "1", ")", "-", "b", "<", "0", ")", ".", "nonzero", "(", ")", ".", "squeeze", "(", ")", "\n", "ind2", "=", "self", ".", "check_shape", "(", "ind2", ")", "\n", "w", "[", "ind2", "]", "*=", "-", "1", "\n", "b", "[", "ind2", "]", "*=", "-", "1", "\n", "\n", "c5", "=", "(", "w", "<", "0", ")", ".", "float", "(", ")", "\n", "a", "=", "torch", ".", "ones", "(", "t", ".", "shape", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "d", "=", "(", "a", "*", "c5", "-", "t", ")", "*", "(", "w", "!=", "0", ")", ".", "float", "(", ")", "\n", "a", "-=", "a", "*", "(", "1", "-", "c5", ")", "\n", "\n", "p", "=", "torch", ".", "ones", "(", "t", ".", "shape", ")", ".", "to", "(", "self", ".", "device", ")", "*", "c5", "-", "t", "*", "(", "2", "*", "c5", "-", "1", ")", "\n", "indp", "=", "torch", ".", "argsort", "(", "p", ",", "dim", "=", "1", ")", "\n", "\n", "b", "=", "b", "-", "(", "w", "*", "t", ")", ".", "sum", "(", "1", ")", "\n", "b0", "=", "(", "w", "*", "d", ")", ".", "sum", "(", "1", ")", "\n", "b1", "=", "b0", ".", "clone", "(", ")", "\n", "\n", "counter", "=", "0", "\n", "indp2", "=", "indp", ".", "unsqueeze", "(", "-", "1", ")", ".", "flip", "(", "dims", "=", "(", "1", ",", "2", ")", ")", ".", "squeeze", "(", ")", "\n", "u", "=", "torch", ".", "arange", "(", "0", ",", "w", ".", "shape", "[", "0", "]", ")", "\n", "ws", "=", "w", "[", "u", ".", "unsqueeze", "(", "1", ")", ",", "indp2", "]", "\n", "bs2", "=", "-", "ws", "*", "d", "[", "u", ".", "unsqueeze", "(", "1", ")", ",", "indp2", "]", "\n", "\n", "s", "=", "torch", ".", "cumsum", "(", "ws", ".", "abs", "(", ")", ",", "dim", "=", "1", ")", "\n", "sb", "=", "torch", ".", "cumsum", "(", "bs2", ",", "dim", "=", "1", ")", "+", "b0", ".", "unsqueeze", "(", "1", ")", "\n", "\n", "c", "=", "b", "-", "b1", ">", "0", "\n", "b2", "=", "sb", "[", "u", ",", "-", "1", "]", "-", "s", "[", "u", ",", "-", "1", "]", "*", "p", "[", "u", ",", "indp", "[", "u", ",", "0", "]", "]", "\n", "c_l", "=", "(", "b", "-", "b2", ">", "0", ")", ".", "nonzero", "(", ")", ".", "squeeze", "(", ")", "\n", "c2", "=", "(", "(", "b", "-", "b1", ">", "0", ")", "*", "(", "b", "-", "b2", "<=", "0", ")", ")", ".", "nonzero", "(", ")", ".", "squeeze", "(", ")", "\n", "c_l", "=", "self", ".", "check_shape", "(", "c_l", ")", "\n", "c2", "=", "self", ".", "check_shape", "(", "c2", ")", "\n", "\n", "lb", "=", "torch", ".", "zeros", "(", "c2", ".", "shape", "[", "0", "]", ")", "\n", "ub", "=", "torch", ".", "ones", "(", "c2", ".", "shape", "[", "0", "]", ")", "*", "(", "w", ".", "shape", "[", "1", "]", "-", "1", ")", "\n", "nitermax", "=", "torch", ".", "ceil", "(", "torch", ".", "log2", "(", "torch", ".", "tensor", "(", "w", ".", "shape", "[", "1", "]", ")", ".", "float", "(", ")", ")", ")", "\n", "counter2", "=", "torch", ".", "zeros", "(", "lb", ".", "shape", ")", ".", "long", "(", ")", "\n", "\n", "while", "counter", "<", "nitermax", ":", "\n", "            ", "counter4", "=", "torch", ".", "floor", "(", "(", "lb", "+", "ub", ")", "/", "2", ")", "\n", "counter2", "=", "counter4", ".", "long", "(", ")", "\n", "indcurr", "=", "indp", "[", "c2", ",", "-", "counter2", "-", "1", "]", "\n", "b2", "=", "sb", "[", "c2", ",", "counter2", "]", "-", "s", "[", "c2", ",", "counter2", "]", "*", "p", "[", "c2", ",", "indcurr", "]", "\n", "c", "=", "b", "[", "c2", "]", "-", "b2", ">", "0", "\n", "ind3", "=", "c", ".", "nonzero", "(", ")", ".", "squeeze", "(", ")", "\n", "ind32", "=", "(", "~", "c", ")", ".", "nonzero", "(", ")", ".", "squeeze", "(", ")", "\n", "ind3", "=", "self", ".", "check_shape", "(", "ind3", ")", "\n", "ind32", "=", "self", ".", "check_shape", "(", "ind32", ")", "\n", "lb", "[", "ind3", "]", "=", "counter4", "[", "ind3", "]", "\n", "ub", "[", "ind32", "]", "=", "counter4", "[", "ind32", "]", "\n", "counter", "+=", "1", "\n", "\n", "", "lb", "=", "lb", ".", "long", "(", ")", "\n", "counter2", "=", "0", "\n", "\n", "if", "c_l", ".", "nelement", "!=", "0", ":", "\n", "            ", "lmbd_opt", "=", "(", "torch", ".", "max", "(", "(", "b", "[", "c_l", "]", "-", "sb", "[", "c_l", ",", "-", "1", "]", ")", "/", "(", "-", "s", "[", "c_l", ",", "-", "1", "]", ")", ",", "\n", "torch", ".", "zeros", "(", "sb", "[", "c_l", ",", "-", "1", "]", ".", "shape", ")", "\n", ".", "to", "(", "self", ".", "device", ")", ")", ")", ".", "unsqueeze", "(", "-", "1", ")", "\n", "d", "[", "c_l", "]", "=", "(", "2", "*", "a", "[", "c_l", "]", "-", "1", ")", "*", "lmbd_opt", "\n", "\n", "", "lmbd_opt", "=", "(", "torch", ".", "max", "(", "(", "b", "[", "c2", "]", "-", "sb", "[", "c2", ",", "lb", "]", ")", "/", "(", "-", "s", "[", "c2", ",", "lb", "]", ")", ",", "\n", "torch", ".", "zeros", "(", "sb", "[", "c2", ",", "lb", "]", ".", "shape", ")", "\n", ".", "to", "(", "self", ".", "device", ")", ")", ")", ".", "unsqueeze", "(", "-", "1", ")", "\n", "d", "[", "c2", "]", "=", "torch", ".", "min", "(", "lmbd_opt", ",", "d", "[", "c2", "]", ")", "*", "c5", "[", "c2", "]", "+", "torch", ".", "max", "(", "-", "lmbd_opt", ",", "d", "[", "c2", "]", ")", "*", "(", "1", "-", "c5", "[", "c2", "]", ")", "\n", "\n", "return", "d", "*", "(", "w", "!=", "0", ")", ".", "float", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.adversarial_attacks.fab.FABAttack.projection_l2": [[181, 258], ["points_to_project.clone", "w_hyperplane.clone", "b_hyperplane.clone", "fab.FABAttack.check_shape", "torch.arange().unsqueeze", "torch.max", "torch.ones().to", "torch.min", "torch.max", "torch.sort", "torch.cat", "w3s.sum", "torch.cat", "c4.nonzero().squeeze", "fab.FABAttack.check_shape", "fab.FABAttack.check_shape", "torch.zeros", "torch.ceil", "torch.zeros().long", "lb.long.long.long", "torch.zeros", "torch.cumsum", "torch.ones", "torch.log2", "torch.floor", "torch.floor.long", "c3.nonzero().squeeze", "fab.FABAttack.check_shape", "fab.FABAttack.check_shape", "fab.FABAttack.nelement", "fab.FABAttack.nelement", "torch.arange", "torch.ones", "torch.zeros().to", "c4.nonzero", "torch.tensor().float", "torch.zeros", "w5[].squeeze", "torch.sum", "fab.FABAttack.check_shape", "w_hyperplane.clone.abs", "torch.cumsum", "c3.nonzero", "torch.zeros.unsqueeze", "torch.zeros", "w_hyperplane.clone.abs", "rs[].unsqueeze", "torch.tensor", "torch.zeros.unsqueeze", "torch.zeros.unsqueeze", "w_hyperplane.clone.abs", "w3s.sum.squeeze", "c4.float", "c3.float"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.adversarial_attacks.fab.FABAttack.check_shape", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.adversarial_attacks.fab.FABAttack.check_shape", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.adversarial_attacks.fab.FABAttack.check_shape", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.adversarial_attacks.fab.FABAttack.check_shape", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.adversarial_attacks.fab.FABAttack.check_shape", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.adversarial_attacks.fab.FABAttack.check_shape"], ["", "def", "projection_l2", "(", "self", ",", "points_to_project", ",", "w_hyperplane", ",", "b_hyperplane", ")", ":", "\n", "        ", "t", "=", "points_to_project", ".", "clone", "(", ")", "\n", "w", "=", "w_hyperplane", ".", "clone", "(", ")", "\n", "b", "=", "b_hyperplane", ".", "clone", "(", ")", "\n", "\n", "c", "=", "(", "w", "*", "t", ")", ".", "sum", "(", "1", ")", "-", "b", "\n", "ind2", "=", "(", "c", "<", "0", ")", ".", "nonzero", "(", ")", ".", "squeeze", "(", ")", "\n", "ind2", "=", "self", ".", "check_shape", "(", "ind2", ")", "\n", "w", "[", "ind2", "]", "*=", "-", "1", "\n", "c", "[", "ind2", "]", "*=", "-", "1", "\n", "\n", "u", "=", "torch", ".", "arange", "(", "0", ",", "w", ".", "shape", "[", "0", "]", ")", ".", "unsqueeze", "(", "1", ")", "\n", "\n", "r", "=", "torch", ".", "max", "(", "t", "/", "w", ",", "(", "t", "-", "1", ")", "/", "w", ")", "\n", "u2", "=", "torch", ".", "ones", "(", "r", ".", "shape", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "r", "=", "torch", ".", "min", "(", "r", ",", "1e12", "*", "u2", ")", "\n", "r", "=", "torch", ".", "max", "(", "r", ",", "-", "1e12", "*", "u2", ")", "\n", "r", "[", "w", ".", "abs", "(", ")", "<", "1e-8", "]", "=", "1e12", "\n", "r", "[", "r", "==", "-", "1e12", "]", "=", "-", "r", "[", "r", "==", "-", "1e12", "]", "\n", "rs", ",", "indr", "=", "torch", ".", "sort", "(", "r", ",", "dim", "=", "1", ")", "\n", "rs2", "=", "torch", ".", "cat", "(", "(", "rs", "[", ":", ",", "1", ":", "]", ",", "\n", "torch", ".", "zeros", "(", "rs", ".", "shape", "[", "0", "]", ",", "1", ")", ".", "to", "(", "self", ".", "device", ")", ")", ",", "1", ")", "\n", "rs", "[", "rs", "==", "1e12", "]", "=", "0", "\n", "rs2", "[", "rs2", "==", "1e12", "]", "=", "0", "\n", "\n", "w3", "=", "w", "**", "2", "\n", "w3s", "=", "w3", "[", "u", ",", "indr", "]", "\n", "w5", "=", "w3s", ".", "sum", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "ws", "=", "w5", "-", "torch", ".", "cumsum", "(", "w3s", ",", "dim", "=", "1", ")", "\n", "d", "=", "-", "(", "r", "*", "w", ")", ".", "clone", "(", ")", "\n", "d", "=", "d", "*", "(", "w", ".", "abs", "(", ")", ">", "1e-8", ")", ".", "float", "(", ")", "\n", "s", "=", "torch", ".", "cat", "(", "(", "(", "-", "w5", ".", "squeeze", "(", ")", "*", "rs", "[", ":", ",", "0", "]", ")", ".", "unsqueeze", "(", "1", ")", ",", "\n", "torch", ".", "cumsum", "(", "(", "-", "rs2", "+", "rs", ")", "*", "ws", ",", "dim", "=", "1", ")", "-", "\n", "w5", "*", "rs", "[", ":", ",", "0", "]", ".", "unsqueeze", "(", "-", "1", ")", ")", ",", "1", ")", "\n", "\n", "c4", "=", "(", "s", "[", ":", ",", "0", "]", "+", "c", "<", "0", ")", "\n", "c3", "=", "(", "(", "d", "*", "w", ")", ".", "sum", "(", "dim", "=", "1", ")", "+", "c", ">", "0", ")", "\n", "c6", "=", "c4", ".", "nonzero", "(", ")", ".", "squeeze", "(", ")", "\n", "c2", "=", "(", "(", "1", "-", "c4", ".", "float", "(", ")", ")", "*", "(", "1", "-", "c3", ".", "float", "(", ")", ")", ")", ".", "nonzero", "(", ")", ".", "squeeze", "(", ")", "\n", "c6", "=", "self", ".", "check_shape", "(", "c6", ")", "\n", "c2", "=", "self", ".", "check_shape", "(", "c2", ")", "\n", "\n", "counter", "=", "0", "\n", "lb", "=", "torch", ".", "zeros", "(", "c2", ".", "shape", "[", "0", "]", ")", "\n", "ub", "=", "torch", ".", "ones", "(", "c2", ".", "shape", "[", "0", "]", ")", "*", "(", "w", ".", "shape", "[", "1", "]", "-", "1", ")", "\n", "nitermax", "=", "torch", ".", "ceil", "(", "torch", ".", "log2", "(", "torch", ".", "tensor", "(", "w", ".", "shape", "[", "1", "]", ")", ".", "float", "(", ")", ")", ")", "\n", "counter2", "=", "torch", ".", "zeros", "(", "lb", ".", "shape", ")", ".", "long", "(", ")", "\n", "\n", "while", "counter", "<", "nitermax", ":", "\n", "            ", "counter4", "=", "torch", ".", "floor", "(", "(", "lb", "+", "ub", ")", "/", "2", ")", "\n", "counter2", "=", "counter4", ".", "long", "(", ")", "\n", "c3", "=", "s", "[", "c2", ",", "counter2", "]", "+", "c", "[", "c2", "]", ">", "0", "\n", "ind3", "=", "c3", ".", "nonzero", "(", ")", ".", "squeeze", "(", ")", "\n", "ind32", "=", "(", "~", "c3", ")", ".", "nonzero", "(", ")", ".", "squeeze", "(", ")", "\n", "ind3", "=", "self", ".", "check_shape", "(", "ind3", ")", "\n", "ind32", "=", "self", ".", "check_shape", "(", "ind32", ")", "\n", "lb", "[", "ind3", "]", "=", "counter4", "[", "ind3", "]", "\n", "ub", "[", "ind32", "]", "=", "counter4", "[", "ind32", "]", "\n", "counter", "+=", "1", "\n", "\n", "", "lb", "=", "lb", ".", "long", "(", ")", "\n", "alpha", "=", "torch", ".", "zeros", "(", "[", "1", "]", ")", "\n", "\n", "if", "c6", ".", "nelement", "(", ")", "!=", "0", ":", "\n", "            ", "alpha", "=", "c", "[", "c6", "]", "/", "w5", "[", "c6", "]", ".", "squeeze", "(", "-", "1", ")", "\n", "d", "[", "c6", "]", "=", "-", "alpha", ".", "unsqueeze", "(", "-", "1", ")", "*", "w", "[", "c6", "]", "\n", "\n", "", "if", "c2", ".", "nelement", "(", ")", "!=", "0", ":", "\n", "            ", "alpha", "=", "(", "s", "[", "c2", ",", "lb", "]", "+", "c", "[", "c2", "]", ")", "/", "ws", "[", "c2", ",", "lb", "]", "+", "rs", "[", "c2", ",", "lb", "]", "\n", "if", "torch", ".", "sum", "(", "ws", "[", "c2", ",", "lb", "]", "==", "0", ")", ">", "0", ":", "\n", "                ", "ind", "=", "(", "ws", "[", "c2", ",", "lb", "]", "==", "0", ")", ".", "nonzero", "(", ")", ".", "squeeze", "(", ")", ".", "long", "(", ")", "\n", "ind", "=", "self", ".", "check_shape", "(", "ind", ")", "\n", "alpha", "[", "ind", "]", "=", "0", "\n", "", "c5", "=", "(", "alpha", ".", "unsqueeze", "(", "-", "1", ")", ">", "r", "[", "c2", "]", ")", ".", "float", "(", ")", "\n", "d", "[", "c2", "]", "=", "d", "[", "c2", "]", "*", "c5", "-", "alpha", ".", "unsqueeze", "(", "-", "1", ")", "*", "w", "[", "c2", "]", "*", "(", "1", "-", "c5", ")", "\n", "\n", "", "return", "d", "*", "(", "w", ".", "abs", "(", ")", ">", "1e-8", ")", ".", "float", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.adversarial_attacks.fab.FABAttack.projection_l1": [[259, 316], ["points_to_project.clone", "w_hyperplane.clone", "b_hyperplane.clone", "fab.FABAttack.check_shape", "torch.max", "torch.min", "torch.sort", "torch.sort", "torch.arange().unsqueeze", "torch.arange().repeat", "torch.min", "torch.cat", "torch.cumsum", "c4.nonzero().squeeze", "fab.FABAttack.check_shape", "torch.zeros", "torch.ceil", "torch.zeros().long", "torch.zeros.long", "torch.ones", "torch.log2", "torch.floor", "torch.floor.long", "c3.nonzero().squeeze", "fab.FABAttack.check_shape", "fab.FABAttack.check_shape", "fab.FABAttack.nelement", "torch.ones().to", "torch.arange", "torch.arange", "c.unsqueeze", "c4.nonzero", "torch.tensor().float", "torch.zeros", "u2[].float", "torch.zeros.unsqueeze().float", "u3.float().to", "c3.nonzero", "torch.ones", "torch.tensor", "torch.zeros.unsqueeze", "u3.float", "w_hyperplane.clone.abs"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.adversarial_attacks.fab.FABAttack.check_shape", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.adversarial_attacks.fab.FABAttack.check_shape", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.adversarial_attacks.fab.FABAttack.check_shape", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.adversarial_attacks.fab.FABAttack.check_shape"], ["", "def", "projection_l1", "(", "self", ",", "points_to_project", ",", "w_hyperplane", ",", "b_hyperplane", ")", ":", "\n", "        ", "t", "=", "points_to_project", ".", "clone", "(", ")", "\n", "w", "=", "w_hyperplane", ".", "clone", "(", ")", "\n", "b", "=", "b_hyperplane", ".", "clone", "(", ")", "\n", "\n", "c", "=", "(", "w", "*", "t", ")", ".", "sum", "(", "1", ")", "-", "b", "\n", "ind2", "=", "(", "c", "<", "0", ")", ".", "nonzero", "(", ")", ".", "squeeze", "(", ")", "\n", "ind2", "=", "self", ".", "check_shape", "(", "ind2", ")", "\n", "w", "[", "ind2", "]", "*=", "-", "1", "\n", "c", "[", "ind2", "]", "*=", "-", "1", "\n", "\n", "r", "=", "torch", ".", "max", "(", "1", "/", "w", ",", "-", "1", "/", "w", ")", "\n", "r", "=", "torch", ".", "min", "(", "r", ",", "1e12", "*", "torch", ".", "ones", "(", "r", ".", "shape", ")", ".", "to", "(", "self", ".", "device", ")", ")", "\n", "rs", ",", "indr", "=", "torch", ".", "sort", "(", "r", ",", "dim", "=", "1", ")", "\n", "_", ",", "indr_rev", "=", "torch", ".", "sort", "(", "indr", ")", "\n", "\n", "u", "=", "torch", ".", "arange", "(", "0", ",", "w", ".", "shape", "[", "0", "]", ")", ".", "unsqueeze", "(", "1", ")", "\n", "u2", "=", "torch", ".", "arange", "(", "0", ",", "w", ".", "shape", "[", "1", "]", ")", ".", "repeat", "(", "w", ".", "shape", "[", "0", "]", ",", "1", ")", "\n", "c6", "=", "(", "w", "<", "0", ")", ".", "float", "(", ")", "\n", "d", "=", "(", "-", "t", "+", "c6", ")", "*", "(", "w", "!=", "0", ")", ".", "float", "(", ")", "\n", "d2", "=", "torch", ".", "min", "(", "-", "w", "*", "t", ",", "w", "*", "(", "1", "-", "t", ")", ")", "\n", "ds", "=", "d2", "[", "u", ",", "indr", "]", "\n", "ds2", "=", "torch", ".", "cat", "(", "(", "c", ".", "unsqueeze", "(", "-", "1", ")", ",", "ds", ")", ",", "1", ")", "\n", "s", "=", "torch", ".", "cumsum", "(", "ds2", ",", "dim", "=", "1", ")", "\n", "\n", "c4", "=", "s", "[", ":", ",", "-", "1", "]", "<", "0", "\n", "c2", "=", "c4", ".", "nonzero", "(", ")", ".", "squeeze", "(", "-", "1", ")", "\n", "c2", "=", "self", ".", "check_shape", "(", "c2", ")", "\n", "\n", "counter", "=", "0", "\n", "lb", "=", "torch", ".", "zeros", "(", "c2", ".", "shape", "[", "0", "]", ")", "\n", "ub", "=", "torch", ".", "ones", "(", "c2", ".", "shape", "[", "0", "]", ")", "*", "(", "s", ".", "shape", "[", "1", "]", ")", "\n", "nitermax", "=", "torch", ".", "ceil", "(", "torch", ".", "log2", "(", "torch", ".", "tensor", "(", "s", ".", "shape", "[", "1", "]", ")", ".", "float", "(", ")", ")", ")", "\n", "counter2", "=", "torch", ".", "zeros", "(", "lb", ".", "shape", ")", ".", "long", "(", ")", "\n", "\n", "while", "counter", "<", "nitermax", ":", "\n", "            ", "counter4", "=", "torch", ".", "floor", "(", "(", "lb", "+", "ub", ")", "/", "2", ")", "\n", "counter2", "=", "counter4", ".", "long", "(", ")", "\n", "c3", "=", "s", "[", "c2", ",", "counter2", "]", ">", "0", "\n", "ind3", "=", "c3", ".", "nonzero", "(", ")", ".", "squeeze", "(", ")", "\n", "ind32", "=", "(", "~", "c3", ")", ".", "nonzero", "(", ")", ".", "squeeze", "(", ")", "\n", "ind3", "=", "self", ".", "check_shape", "(", "ind3", ")", "\n", "ind32", "=", "self", ".", "check_shape", "(", "ind32", ")", "\n", "lb", "[", "ind3", "]", "=", "counter4", "[", "ind3", "]", "\n", "ub", "[", "ind32", "]", "=", "counter4", "[", "ind32", "]", "\n", "counter", "+=", "1", "\n", "\n", "", "lb2", "=", "lb", ".", "long", "(", ")", "\n", "\n", "if", "c2", ".", "nelement", "(", ")", "!=", "0", ":", "\n", "            ", "alpha", "=", "-", "s", "[", "c2", ",", "lb2", "]", "/", "w", "[", "c2", ",", "indr", "[", "c2", ",", "lb2", "]", "]", "\n", "c5", "=", "u2", "[", "c2", "]", ".", "float", "(", ")", "<", "lb", ".", "unsqueeze", "(", "-", "1", ")", ".", "float", "(", ")", "\n", "u3", "=", "c5", "[", "u", "[", ":", "c5", ".", "shape", "[", "0", "]", "]", ",", "indr_rev", "[", "c2", "]", "]", "\n", "d", "[", "c2", "]", "=", "d", "[", "c2", "]", "*", "u3", ".", "float", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "d", "[", "c2", ",", "indr", "[", "c2", ",", "lb2", "]", "]", "=", "alpha", "\n", "\n", "", "return", "d", "*", "(", "w", ".", "abs", "(", ")", ">", "1e-8", ")", ".", "float", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.adversarial_attacks.fab.FABAttack.perturb": [[317, 500], ["list", "len", "x.detach().clone().float().to.detach().clone().float().to.detach().clone().float().to", "fab.FABAttack._get_predicted_label", "fab.FABAttack.float().sum", "fab.FABAttack.check_shape", "time.time", "x[].detach().clone", "y[].detach().clone", "torch.arange", "im2.unsqueeze.unsqueeze.clone", "x.detach().clone().float().to.detach().clone().float().to.clone", "torch.zeros().to", "im2.unsqueeze.unsqueeze.clone", "im2.unsqueeze.unsqueeze.clone().reshape", "fab.FABAttack.check_shape", "adv[].clone", "x.detach().clone().float().to.clone.detach", "fab.FABAttack.detach().clone().long().to", "y.detach().clone().long().to.detach().clone().long().to.detach().clone().long().to", "print", "fab.FABAttack.sum", "fab.FABAttack.nonzero().squeeze", "len", "im2.unsqueeze.unsqueeze.unsqueeze", "torch.ones().to", "print", "fab.FABAttack.nonzero().squeeze", "x.detach().clone().float().to.detach().clone().float().to.detach().clone().float", "fab.FABAttack.float", "x[].detach", "y[].detach", "torch.zeros", "im2.unsqueeze.unsqueeze.clone", "x1.clamp.clamp.clamp", "fab.FABAttack.float", "utils.project_perturbation", "fab.FABAttack.detach().clone().long", "y.detach().clone().long().to.detach().clone().long().to.detach().clone().long", "fab.FABAttack.float().mean", "fab.FABAttack.nonzero", "torch.ones", "torch.no_grad", "fab.FABAttack.get_diff_logits_grads_batch", "dg2.reshape", "torch.reshape", "torch.reshape", "torch.max", "torch.min", "fab.FABAttack.float", "fab.FABAttack.nonzero", "utils.project_perturbation", "x.detach().clone().float().to.detach().clone().float().to.detach().clone", "torch.randn().to", "dist1.min", "fab.FABAttack.projection_linf", "[].view", "fab.FABAttack._get_predicted_label", "is_adv.sum", "is_adv.nonzero().squeeze", "fab.FABAttack.check_shape", "fab.FABAttack.float().sum", "fab.FABAttack.detach().clone", "y.detach().clone().long().to.detach().clone().long().to.detach().clone", "fab.FABAttack.float", "torch.rand().to", "torch.randn().to", "df.abs", "torch.cat", "torch.cat", "torch.cat", "fab.FABAttack.projection_l2", "torch.ones().to", "torch.max", "torch.ones().to", "time.time", "x.detach().clone().float().to.detach().clone().float().to.detach", "[].reshape", "torch.randn", "dg.abs().view().sum", "df.abs", "ValueError", "torch.cat", "torch.cat", "torch.cat", "fab.FABAttack.projection_l1", "fab.FABAttack.abs().sum().view", "torch.zeros().to", "is_adv.nonzero", "fab.FABAttack.float", "fab.FABAttack.detach", "y.detach().clone().long().to.detach().clone().long().to.detach", "torch.rand", "torch.min().reshape", "torch.randn", "df.abs", "x1.clamp.clamp.reshape", "torch.cat", "torch.cat", "torch.cat", "fab.FABAttack.abs().max", "torch.ones", "torch.ones", "torch.min().reshape", "torch.randn().to.abs().view().sum().view", "dg.abs().view", "x1.clamp.clamp.reshape", "fab.FABAttack.abs().sum", "torch.zeros", "torch.min", "torch.randn().to.reshape().abs().max", "torch.min().reshape", "dg.abs().reshape().max", "x1.clamp.clamp.reshape", "fab.FABAttack.abs", "torch.min", "torch.randn().to.abs().view().sum", "dg.abs", "fab.FABAttack.abs", "torch.ones().to", "torch.randn().to.reshape().abs", "torch.min", "dg.abs().reshape", "torch.ones().to", "torch.randn().to.abs().view", "torch.ones", "torch.randn().to.reshape", "torch.ones().to", "dg.abs", "torch.ones", "torch.randn().to.abs", "torch.ones"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.adversarial_attacks.fab.FABAttack._get_predicted_label", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.adversarial_attacks.fab.FABAttack.check_shape", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.adversarial_attacks.fab.FABAttack.check_shape", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.adversarial_attacks.utils.project_perturbation", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.adversarial_attacks.fab.FABAttack.get_diff_logits_grads_batch", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.adversarial_attacks.utils.project_perturbation", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.adversarial_attacks.fab.FABAttack.projection_linf", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.adversarial_attacks.fab.FABAttack._get_predicted_label", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.adversarial_attacks.fab.FABAttack.check_shape", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.adversarial_attacks.fab.FABAttack.projection_l2", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.adversarial_attacks.fab.FABAttack.projection_l1"], ["", "def", "perturb", "(", "self", ",", "x", ",", "y", ",", "targeted", "=", "False", ",", "x_init", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        :param x_init:\n        :param x:    clean images\n        :param y:    clean labels, if None we use the predicted labels\n        \"\"\"", "\n", "\n", "self", ".", "device", "=", "x", ".", "device", "\n", "self", ".", "orig_dim", "=", "list", "(", "x", ".", "shape", "[", "1", ":", "]", ")", "\n", "self", ".", "ndims", "=", "len", "(", "self", ".", "orig_dim", ")", "\n", "\n", "x", "=", "x", ".", "detach", "(", ")", ".", "clone", "(", ")", ".", "float", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "# assert next(self.predict.parameters()).device == x.device", "\n", "\n", "y_pred", "=", "self", ".", "_get_predicted_label", "(", "x", ")", "\n", "if", "y", "is", "None", ":", "\n", "            ", "y", "=", "y_pred", ".", "detach", "(", ")", ".", "clone", "(", ")", ".", "long", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "", "else", ":", "\n", "            ", "y", "=", "y", ".", "detach", "(", ")", ".", "clone", "(", ")", ".", "long", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "", "pred", "=", "y_pred", "==", "y", "\n", "corr_classified", "=", "pred", ".", "float", "(", ")", ".", "sum", "(", ")", "\n", "if", "self", ".", "verbose", ":", "\n", "            ", "print", "(", "'Clean accuracy: {:.2%}'", ".", "format", "(", "pred", ".", "float", "(", ")", ".", "mean", "(", ")", ")", ")", "\n", "", "if", "pred", ".", "sum", "(", ")", "==", "0", ":", "\n", "            ", "return", "x", "\n", "", "pred", "=", "self", ".", "check_shape", "(", "pred", ".", "nonzero", "(", ")", ".", "squeeze", "(", ")", ")", "\n", "\n", "startt", "=", "time", ".", "time", "(", ")", "\n", "# runs the attack only on correctly classified points", "\n", "im2", "=", "x", "[", "pred", "]", ".", "detach", "(", ")", ".", "clone", "(", ")", "\n", "la2", "=", "y", "[", "pred", "]", ".", "detach", "(", ")", ".", "clone", "(", ")", "\n", "if", "len", "(", "im2", ".", "shape", ")", "==", "self", ".", "ndims", ":", "\n", "            ", "im2", "=", "im2", ".", "unsqueeze", "(", "0", ")", "\n", "", "bs", "=", "im2", ".", "shape", "[", "0", "]", "\n", "u1", "=", "torch", ".", "arange", "(", "bs", ")", "\n", "adv", "=", "im2", ".", "clone", "(", ")", "\n", "adv_c", "=", "x", ".", "clone", "(", ")", "\n", "res2", "=", "1e10", "*", "torch", ".", "ones", "(", "[", "bs", "]", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "res_c", "=", "torch", ".", "zeros", "(", "[", "x", ".", "shape", "[", "0", "]", "]", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "x1", "=", "im2", ".", "clone", "(", ")", "\n", "x0", "=", "im2", ".", "clone", "(", ")", ".", "reshape", "(", "[", "bs", ",", "-", "1", "]", ")", "\n", "counter_restarts", "=", "0", "\n", "\n", "while", "counter_restarts", "<", "self", ".", "n_restarts", ":", "\n", "            ", "if", "counter_restarts", ">", "0", ":", "\n", "                ", "if", "self", ".", "norm", "==", "'Linf'", ":", "\n", "                    ", "t", "=", "2", "*", "torch", ".", "rand", "(", "x1", ".", "shape", ")", ".", "to", "(", "self", ".", "device", ")", "-", "1", "\n", "x1", "=", "im2", "+", "(", "torch", ".", "min", "(", "res2", ",", "\n", "self", ".", "eps", "*", "torch", ".", "ones", "(", "res2", ".", "shape", ")", "\n", ".", "to", "(", "self", ".", "device", ")", "\n", ")", ".", "reshape", "(", "[", "-", "1", ",", "*", "[", "1", "]", "*", "self", ".", "ndims", "]", ")", "\n", ")", "*", "t", "/", "(", "t", ".", "reshape", "(", "[", "t", ".", "shape", "[", "0", "]", ",", "-", "1", "]", ")", ".", "abs", "(", ")", "\n", ".", "max", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "[", "0", "]", "\n", ".", "reshape", "(", "[", "-", "1", ",", "*", "[", "1", "]", "*", "self", ".", "ndims", "]", ")", ")", "*", ".5", "\n", "", "elif", "self", ".", "norm", "==", "'L2'", ":", "\n", "                    ", "t", "=", "torch", ".", "randn", "(", "x1", ".", "shape", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "x1", "=", "im2", "+", "(", "torch", ".", "min", "(", "res2", ",", "\n", "self", ".", "eps", "*", "torch", ".", "ones", "(", "res2", ".", "shape", ")", "\n", ".", "to", "(", "self", ".", "device", ")", "\n", ")", ".", "reshape", "(", "[", "-", "1", ",", "*", "[", "1", "]", "*", "self", ".", "ndims", "]", ")", "\n", ")", "*", "t", "/", "(", "(", "t", "**", "2", ")", "\n", ".", "view", "(", "t", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", ".", "sum", "(", "dim", "=", "-", "1", ")", "\n", ".", "sqrt", "(", ")", "\n", ".", "view", "(", "t", ".", "shape", "[", "0", "]", ",", "*", "[", "1", "]", "*", "self", ".", "ndims", ")", ")", "*", ".5", "\n", "", "elif", "self", ".", "norm", "==", "'L1'", ":", "\n", "                    ", "t", "=", "torch", ".", "randn", "(", "x1", ".", "shape", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "x1", "=", "im2", "+", "(", "torch", ".", "min", "(", "res2", ",", "\n", "self", ".", "eps", "*", "torch", ".", "ones", "(", "res2", ".", "shape", ")", "\n", ".", "to", "(", "self", ".", "device", ")", "\n", ")", ".", "reshape", "(", "[", "-", "1", ",", "*", "[", "1", "]", "*", "self", ".", "ndims", "]", ")", "\n", ")", "*", "t", "/", "(", "t", ".", "abs", "(", ")", ".", "view", "(", "t", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", ".", "sum", "(", "dim", "=", "-", "1", ")", "\n", ".", "view", "(", "t", ".", "shape", "[", "0", "]", ",", "*", "[", "1", "]", "*", "self", ".", "ndims", ")", ")", "/", "2", "\n", "\n", "", "x1", "=", "x1", ".", "clamp", "(", "0.0", ",", "1.0", ")", "\n", "\n", "", "counter_iter", "=", "0", "\n", "while", "counter_iter", "<", "self", ".", "n_iter", ":", "\n", "                ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                    ", "df", ",", "dg", "=", "self", ".", "get_diff_logits_grads_batch", "(", "x1", ",", "la2", ")", "\n", "if", "self", ".", "norm", "==", "'Linf'", ":", "\n", "                        ", "dist1", "=", "df", ".", "abs", "(", ")", "/", "(", "1e-12", "+", "\n", "dg", ".", "abs", "(", ")", "\n", ".", "view", "(", "dg", ".", "shape", "[", "0", "]", ",", "dg", ".", "shape", "[", "1", "]", ",", "-", "1", ")", "\n", ".", "sum", "(", "dim", "=", "-", "1", ")", ")", "\n", "", "elif", "self", ".", "norm", "==", "'L2'", ":", "\n", "                        ", "dist1", "=", "df", ".", "abs", "(", ")", "/", "(", "1e-12", "+", "(", "dg", "**", "2", ")", "\n", ".", "view", "(", "dg", ".", "shape", "[", "0", "]", ",", "dg", ".", "shape", "[", "1", "]", ",", "-", "1", ")", "\n", ".", "sum", "(", "dim", "=", "-", "1", ")", ".", "sqrt", "(", ")", ")", "\n", "", "elif", "self", ".", "norm", "==", "'L1'", ":", "\n", "                        ", "dist1", "=", "df", ".", "abs", "(", ")", "/", "(", "1e-12", "+", "dg", ".", "abs", "(", ")", ".", "reshape", "(", "\n", "[", "df", ".", "shape", "[", "0", "]", ",", "df", ".", "shape", "[", "1", "]", ",", "-", "1", "]", ")", ".", "max", "(", "dim", "=", "2", ")", "[", "0", "]", ")", "\n", "", "else", ":", "\n", "                        ", "raise", "ValueError", "(", "'norm not supported'", ")", "\n", "", "ind", "=", "dist1", ".", "min", "(", "dim", "=", "1", ")", "[", "1", "]", "\n", "dg2", "=", "dg", "[", "u1", ",", "ind", "]", "\n", "b", "=", "(", "-", "df", "[", "u1", ",", "ind", "]", "+", "(", "dg2", "*", "x1", ")", ".", "view", "(", "x1", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", ".", "sum", "(", "dim", "=", "-", "1", ")", ")", "\n", "w", "=", "dg2", ".", "reshape", "(", "[", "bs", ",", "-", "1", "]", ")", "\n", "\n", "if", "self", ".", "norm", "==", "'Linf'", ":", "\n", "                        ", "d3", "=", "self", ".", "projection_linf", "(", "\n", "torch", ".", "cat", "(", "(", "x1", ".", "reshape", "(", "[", "bs", ",", "-", "1", "]", ")", ",", "x0", ")", ",", "0", ")", ",", "\n", "torch", ".", "cat", "(", "(", "w", ",", "w", ")", ",", "0", ")", ",", "\n", "torch", ".", "cat", "(", "(", "b", ",", "b", ")", ",", "0", ")", ")", "\n", "", "elif", "self", ".", "norm", "==", "'L2'", ":", "\n", "                        ", "d3", "=", "self", ".", "projection_l2", "(", "\n", "torch", ".", "cat", "(", "(", "x1", ".", "reshape", "(", "[", "bs", ",", "-", "1", "]", ")", ",", "x0", ")", ",", "0", ")", ",", "\n", "torch", ".", "cat", "(", "(", "w", ",", "w", ")", ",", "0", ")", ",", "\n", "torch", ".", "cat", "(", "(", "b", ",", "b", ")", ",", "0", ")", ")", "\n", "", "elif", "self", ".", "norm", "==", "'L1'", ":", "\n", "                        ", "d3", "=", "self", ".", "projection_l1", "(", "\n", "torch", ".", "cat", "(", "(", "x1", ".", "reshape", "(", "[", "bs", ",", "-", "1", "]", ")", ",", "x0", ")", ",", "0", ")", ",", "\n", "torch", ".", "cat", "(", "(", "w", ",", "w", ")", ",", "0", ")", ",", "\n", "torch", ".", "cat", "(", "(", "b", ",", "b", ")", ",", "0", ")", ")", "\n", "", "d1", "=", "torch", ".", "reshape", "(", "d3", "[", ":", "bs", "]", ",", "x1", ".", "shape", ")", "\n", "d2", "=", "torch", ".", "reshape", "(", "d3", "[", "-", "bs", ":", "]", ",", "x1", ".", "shape", ")", "\n", "if", "self", ".", "norm", "==", "'Linf'", ":", "\n", "                        ", "a0", "=", "d3", ".", "abs", "(", ")", ".", "max", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "[", "0", "]", ".", "view", "(", "-", "1", ",", "*", "[", "1", "]", "*", "self", ".", "ndims", ")", "\n", "", "elif", "self", ".", "norm", "==", "'L2'", ":", "\n", "                        ", "a0", "=", "(", "d3", "**", "2", ")", ".", "sum", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", ".", "sqrt", "(", ")", ".", "view", "(", "-", "1", ",", "*", "[", "1", "]", "*", "self", ".", "ndims", ")", "\n", "", "elif", "self", ".", "norm", "==", "'L1'", ":", "\n", "                        ", "a0", "=", "d3", ".", "abs", "(", ")", ".", "sum", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", ".", "view", "(", "-", "1", ",", "*", "[", "1", "]", "*", "self", ".", "ndims", ")", "\n", "", "a0", "=", "torch", ".", "max", "(", "a0", ",", "1e-8", "*", "torch", ".", "ones", "(", "\n", "a0", ".", "shape", ")", ".", "to", "(", "self", ".", "device", ")", ")", "\n", "a1", "=", "a0", "[", ":", "bs", "]", "\n", "a2", "=", "a0", "[", "-", "bs", ":", "]", "\n", "alpha", "=", "torch", ".", "min", "(", "torch", ".", "max", "(", "a1", "/", "(", "a1", "+", "a2", ")", ",", "\n", "torch", ".", "zeros", "(", "a1", ".", "shape", ")", "\n", ".", "to", "(", "self", ".", "device", ")", ")", "[", "0", "]", ",", "\n", "self", ".", "alpha_max", "*", "torch", ".", "ones", "(", "a1", ".", "shape", ")", "\n", ".", "to", "(", "self", ".", "device", ")", ")", "\n", "x1", "=", "(", "(", "x1", "+", "self", ".", "eta", "*", "d1", ")", "*", "(", "1", "-", "alpha", ")", "+", "\n", "(", "im2", "+", "d2", "*", "self", ".", "eta", ")", "*", "alpha", ")", ".", "clamp", "(", "0.0", ",", "1.0", ")", "\n", "\n", "is_adv", "=", "self", ".", "_get_predicted_label", "(", "x1", ")", "!=", "la2", "\n", "\n", "if", "is_adv", ".", "sum", "(", ")", ">", "0", ":", "\n", "                        ", "ind_adv", "=", "is_adv", ".", "nonzero", "(", ")", ".", "squeeze", "(", ")", "\n", "ind_adv", "=", "self", ".", "check_shape", "(", "ind_adv", ")", "\n", "if", "self", ".", "norm", "==", "'Linf'", ":", "\n", "                            ", "t", "=", "(", "x1", "[", "ind_adv", "]", "-", "im2", "[", "ind_adv", "]", ")", ".", "reshape", "(", "\n", "[", "ind_adv", ".", "shape", "[", "0", "]", ",", "-", "1", "]", ")", ".", "abs", "(", ")", ".", "max", "(", "dim", "=", "1", ")", "[", "0", "]", "\n", "", "elif", "self", ".", "norm", "==", "'L2'", ":", "\n", "                            ", "t", "=", "(", "(", "x1", "[", "ind_adv", "]", "-", "im2", "[", "ind_adv", "]", ")", "**", "2", ")", ".", "view", "(", "ind_adv", ".", "shape", "[", "0", "]", ",", "-", "1", ")", ".", "sum", "(", "dim", "=", "-", "1", ")", ".", "sqrt", "(", ")", "\n", "", "elif", "self", ".", "norm", "==", "'L1'", ":", "\n", "                            ", "t", "=", "(", "x1", "[", "ind_adv", "]", "-", "im2", "[", "ind_adv", "]", ")", ".", "abs", "(", ")", ".", "view", "(", "ind_adv", ".", "shape", "[", "0", "]", ",", "-", "1", ")", ".", "sum", "(", "dim", "=", "-", "1", ")", "\n", "", "adv", "[", "ind_adv", "]", "=", "x1", "[", "ind_adv", "]", "*", "(", "t", "<", "res2", "[", "ind_adv", "]", ")", ".", "float", "(", ")", ".", "reshape", "(", "[", "-", "1", ",", "*", "[", "1", "]", "*", "self", ".", "ndims", "]", ")", "+", "adv", "[", "ind_adv", "]", "*", "(", "t", ">=", "res2", "[", "ind_adv", "]", ")", ".", "float", "(", ")", ".", "reshape", "(", "\n", "[", "-", "1", ",", "*", "[", "1", "]", "*", "self", ".", "ndims", "]", ")", "\n", "res2", "[", "ind_adv", "]", "=", "t", "*", "(", "t", "<", "res2", "[", "ind_adv", "]", ")", ".", "float", "(", ")", "+", "res2", "[", "ind_adv", "]", "*", "(", "t", ">=", "res2", "[", "ind_adv", "]", ")", ".", "float", "(", ")", "\n", "x1", "[", "ind_adv", "]", "=", "im2", "[", "ind_adv", "]", "+", "(", "\n", "x1", "[", "ind_adv", "]", "-", "im2", "[", "ind_adv", "]", ")", "*", "self", ".", "beta", "\n", "\n", "", "counter_iter", "+=", "1", "\n", "\n", "", "", "counter_restarts", "+=", "1", "\n", "\n", "", "ind_succ", "=", "res2", "<", "1e10", "\n", "if", "self", ".", "verbose", ":", "\n", "            ", "print", "(", "'success rate: {:.0f}/{:.0f}'", "\n", ".", "format", "(", "ind_succ", ".", "float", "(", ")", ".", "sum", "(", ")", ",", "corr_classified", ")", "+", "\n", "' (on correctly classified points) in {:.1f} s'", "\n", ".", "format", "(", "time", ".", "time", "(", ")", "-", "startt", ")", ")", "\n", "\n", "", "res_c", "[", "pred", "]", "=", "res2", "*", "ind_succ", ".", "float", "(", ")", "+", "1e10", "*", "(", "1", "-", "ind_succ", ".", "float", "(", ")", ")", "\n", "ind_succ", "=", "self", ".", "check_shape", "(", "ind_succ", ".", "nonzero", "(", ")", ".", "squeeze", "(", ")", ")", "\n", "adv_c", "[", "pred", "[", "ind_succ", "]", "]", "=", "adv", "[", "ind_succ", "]", ".", "clone", "(", ")", "\n", "\n", "if", "self", ".", "norm", "==", "'Linf'", ":", "\n", "            ", "adv_c", "=", "x", "+", "project_perturbation", "(", "adv_c", "-", "x", ",", "self", ".", "eps", ",", "'Linf'", ")", "\n", "", "elif", "self", ".", "norm", "==", "'L2'", ":", "\n", "            ", "adv_c", "=", "x", "+", "project_perturbation", "(", "adv_c", "-", "x", ",", "self", ".", "eps", ",", "'L2'", ")", "\n", "\n", "", "return", "adv_c", ".", "detach", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.adversarial_attacks.fab.LinfFABAttack.__init__": [[517, 533], ["fab.FABAttack.__init__"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models_32x32.shake_pyramidnet.ShakePyramidNet.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "predict", ",", "\n", "n_restarts", "=", "1", ",", "\n", "n_iter", "=", "100", ",", "\n", "eps", "=", "None", ",", "\n", "alpha_max", "=", "0.1", ",", "\n", "eta", "=", "1.05", ",", "\n", "beta", "=", "0.9", ",", "\n", "loss_fn", "=", "None", ",", "\n", "verbose", "=", "False", ")", ":", "\n", "        ", "norm", "=", "'Linf'", "\n", "super", "(", "LinfFABAttack", ",", "self", ")", ".", "__init__", "(", "\n", "predict", "=", "predict", ",", "norm", "=", "norm", ",", "n_restarts", "=", "n_restarts", ",", "\n", "n_iter", "=", "n_iter", ",", "eps", "=", "eps", ",", "alpha_max", "=", "alpha_max", ",", "eta", "=", "eta", ",", "beta", "=", "beta", ",", "\n", "loss_fn", "=", "loss_fn", ",", "verbose", "=", "verbose", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.adversarial_attacks.fab.L2FABAttack.__init__": [[550, 565], ["fab.FABAttack.__init__"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models_32x32.shake_pyramidnet.ShakePyramidNet.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "predict", ",", "\n", "n_restarts", "=", "1", ",", "\n", "n_iter", "=", "100", ",", "\n", "eps", "=", "None", ",", "\n", "alpha_max", "=", "0.1", ",", "\n", "eta", "=", "1.05", ",", "\n", "beta", "=", "0.9", ",", "\n", "loss_fn", "=", "None", ")", ":", "\n", "        ", "norm", "=", "'L2'", "\n", "super", "(", "L2FABAttack", ",", "self", ")", ".", "__init__", "(", "\n", "predict", "=", "predict", ",", "norm", "=", "norm", ",", "n_restarts", "=", "n_restarts", ",", "\n", "n_iter", "=", "n_iter", ",", "eps", "=", "eps", ",", "alpha_max", "=", "alpha_max", ",", "eta", "=", "eta", ",", "beta", "=", "beta", ",", "\n", "loss_fn", "=", "loss_fn", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.adversarial_attacks.fab.L1FABAttack.__init__": [[582, 597], ["fab.FABAttack.__init__"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models_32x32.shake_pyramidnet.ShakePyramidNet.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "predict", ",", "\n", "n_restarts", "=", "1", ",", "\n", "n_iter", "=", "100", ",", "\n", "eps", "=", "None", ",", "\n", "alpha_max", "=", "0.1", ",", "\n", "eta", "=", "1.05", ",", "\n", "beta", "=", "0.9", ",", "\n", "loss_fn", "=", "None", ")", ":", "\n", "        ", "norm", "=", "'L1'", "\n", "super", "(", "L1FABAttack", ",", "self", ")", ".", "__init__", "(", "\n", "predict", "=", "predict", ",", "norm", "=", "norm", ",", "n_restarts", "=", "n_restarts", ",", "\n", "n_iter", "=", "n_iter", ",", "eps", "=", "eps", ",", "alpha_max", "=", "alpha_max", ",", "eta", "=", "eta", ",", "beta", "=", "beta", ",", "\n", "loss_fn", "=", "loss_fn", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.adversarial_attacks.restartattack.RestartAttack.__init__": [[10, 13], ["adversarialattack.AdversarialAttack.__init__"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models_32x32.shake_pyramidnet.ShakePyramidNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "loss", ",", "restarts", ",", "num_classes", ",", "model", "=", "None", ",", "save_trajectory", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "loss", ",", "num_classes", ",", "model", "=", "model", ",", "save_trajectory", "=", "save_trajectory", ")", "\n", "self", ".", "restarts", "=", "restarts", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.adversarial_attacks.restartattack.RestartAttack.perturb_inner": [[14, 17], ["NotImplementedError"], "methods", ["None"], ["", "def", "perturb_inner", "(", "self", ",", "x", ",", "y", ",", "targeted", "=", "False", ",", "x_init", "=", "None", ")", ":", "\n", "#force child class implementation", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.adversarial_attacks.restartattack.RestartAttack.perturb": [[18, 54], ["restartattack.RestartAttack._check_model", "restartattack.RestartAttack.model.eval", "x.new_empty", "x.new_empty", "range", "torch.argmin", "torch.argmin", "torch.argmin", "torch.argmin", "torch.argmin", "torch.argmin", "torch.argmin", "torch.argmin", "torch.argmin", "x.new_empty", "restartattack.RestartAttack.perturb_inner", "restartattack.RestartAttack.model.train", "restartattack.RestartAttack.model.eval", "k_trajectory.cpu", "restartattack.RestartAttack._get_trajectory_depth", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "range", "range"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.adversarial_attacks.adversarialattack.AdversarialAttack._check_model", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models.ebm_wrn.gradient_attack_wrapper.eval", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.adversarial_attacks.monotone_pgd.MonotonePGD.perturb_inner", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.train_types.train_type.TrainType.train", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models.ebm_wrn.gradient_attack_wrapper.eval", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.adversarial_attacks.monotone_pgd.MonotonePGD._get_trajectory_depth"], ["", "def", "perturb", "(", "self", ",", "x", ",", "y", ",", "targeted", "=", "False", ",", "x_init", "=", "None", ")", ":", "\n", "#base class method that handles various restarts", "\n", "        ", "self", ".", "_check_model", "(", ")", "\n", "\n", "is_train", "=", "self", ".", "model", ".", "training", "\n", "self", ".", "model", ".", "eval", "(", ")", "\n", "\n", "restarts_data", "=", "x", ".", "new_empty", "(", "(", "1", "+", "self", ".", "restarts", ",", ")", "+", "x", ".", "shape", ")", "\n", "restarts_objs", "=", "x", ".", "new_empty", "(", "(", "1", "+", "self", ".", "restarts", ",", "x", ".", "shape", "[", "0", "]", ")", ")", "\n", "\n", "if", "self", ".", "save_trajectory", ":", "\n", "            ", "self", ".", "last_trajectory", "=", "None", "\n", "trajectories_shape", "=", "(", "1", "+", "self", ".", "restarts", ",", "self", ".", "_get_trajectory_depth", "(", ")", ",", ")", "+", "x", ".", "shape", "\n", "restart_trajectories", "=", "x", ".", "new_empty", "(", "trajectories_shape", ",", "device", "=", "torch", ".", "device", "(", "'cpu'", ")", ")", "\n", "\n", "", "for", "k", "in", "range", "(", "1", "+", "self", ".", "restarts", ")", ":", "\n", "            ", "k_data", ",", "k_obj", ",", "k_trajectory", "=", "self", ".", "perturb_inner", "(", "x", ",", "y", ",", "targeted", "=", "targeted", ",", "x_init", "=", "x_init", ")", "\n", "restarts_data", "[", "k", ",", ":", "]", "=", "k_data", "\n", "restarts_objs", "[", "k", ",", ":", "]", "=", "k_obj", "\n", "if", "self", ".", "save_trajectory", ":", "\n", "                ", "restart_trajectories", "[", "k", ",", ":", "]", "=", "k_trajectory", ".", "cpu", "(", ")", "\n", "\n", "", "", "bs", "=", "x", ".", "shape", "[", "0", "]", "\n", "best_idx", "=", "torch", ".", "argmin", "(", "restarts_objs", ",", "0", ")", "\n", "best_data", "=", "restarts_data", "[", "best_idx", ",", "range", "(", "bs", ")", ",", ":", "]", "\n", "\n", "if", "self", ".", "save_trajectory", ":", "\n", "            ", "self", ".", "last_trajectory", "=", "restart_trajectories", "[", "best_idx", ",", ":", ",", "range", "(", "bs", ")", ",", ":", "]", "\n", "\n", "#reset density_model status", "\n", "", "if", "is_train", ":", "\n", "            ", "self", ".", "model", ".", "train", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "model", ".", "eval", "(", ")", "\n", "\n", "", "return", "best_data", "\n", "", "", ""]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.adversarial_attacks.utils.normalize_perturbation": [[11, 59], ["perturbation.sign", "perturbation.view", "torch.normalize", "F.normalize.view_as", "NotImplementedError", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum.view", "int", "perturbation.view", "F.normalize.view_as", "perturbation.view", "int", "F.normalize.view_as", "perturbation.abs", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "NotImplementedError", "torch.normalize", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "F.normalize.abs", "threshold_element.unsqueeze", "torch.normalize", "F.normalize.abs", "F.normalize.sign", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange"], "function", ["None"], ["\n", "def", "__init__", "(", "self", ",", "channels", ",", "kernel_size", ",", "sigma", ",", "dim", "=", "2", ")", ":", "\n", "        ", "super", "(", "GaussianSmoothing", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "isinstance", "(", "kernel_size", ",", "numbers", ".", "Number", ")", ":", "\n", "            ", "kernel_size", "=", "[", "kernel_size", "]", "*", "dim", "\n", "", "if", "isinstance", "(", "sigma", ",", "numbers", ".", "Number", ")", ":", "\n", "            ", "sigma", "=", "[", "sigma", "]", "*", "dim", "\n", "\n", "# The gaussian kernel is the product of the", "\n", "# gaussian function of each dimension.", "\n", "", "kernel", "=", "1", "\n", "meshgrids", "=", "torch", ".", "meshgrid", "(", "\n", "[", "\n", "torch", ".", "arange", "(", "size", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "for", "size", "in", "kernel_size", "\n", "]", "\n", ")", "\n", "for", "size", ",", "std", ",", "mgrid", "in", "zip", "(", "kernel_size", ",", "sigma", ",", "meshgrids", ")", ":", "\n", "            ", "mean", "=", "(", "size", "-", "1", ")", "/", "2", "\n", "kernel", "*=", "1", "/", "(", "std", "*", "math", ".", "sqrt", "(", "2", "*", "math", ".", "pi", ")", ")", "*", "torch", ".", "exp", "(", "-", "(", "(", "mgrid", "-", "mean", ")", "/", "std", ")", "**", "2", "/", "2", ")", "\n", "\n", "# Make sure sum of values in gaussian kernel equals 1.", "\n", "", "kernel", "=", "kernel", "/", "torch", ".", "sum", "(", "kernel", ")", "\n", "\n", "# Reshape to depthwise convolutional weight", "\n", "kernel", "=", "kernel", ".", "view", "(", "1", ",", "1", ",", "*", "kernel", ".", "size", "(", ")", ")", "\n", "kernel", "=", "kernel", ".", "repeat", "(", "channels", ",", "*", "[", "1", "]", "*", "(", "kernel", ".", "dim", "(", ")", "-", "1", ")", ")", "\n", "\n", "self", ".", "register_buffer", "(", "'weight'", ",", "kernel", ")", "\n", "self", ".", "groups", "=", "channels", "\n", "\n", "if", "dim", "==", "1", ":", "\n", "            ", "self", ".", "conv", "=", "F", ".", "conv1d", "\n", "", "elif", "dim", "==", "2", ":", "\n", "            ", "self", ".", "conv", "=", "F", ".", "conv2d", "\n", "", "elif", "dim", "==", "3", ":", "\n", "            ", "self", ".", "conv", "=", "F", ".", "conv3d", "\n", "", "else", ":", "\n", "            ", "raise", "RuntimeError", "(", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.adversarial_attacks.utils.project_perturbation": [[61, 73], ["torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.renorm", "torch.renorm", "torch.renorm", "torch.renorm", "torch.renorm", "l1_projection.project_onto_l1_ball", "NotImplementedError"], "function", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.adversarial_attacks.l1_projection.project_onto_l1_ball"], [")", "\n", "\n", "", "", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "\"\"\"\n        Apply gaussian filter to input.\n        Arguments:\n            input (torch.Tensor): Input to apply gaussian filter on.\n        Returns:\n            filtered (torch.Tensor): Filtered output.\n        \"\"\"", "\n", "return", "self", ".", "conv", "(", "input", ",", "weight", "=", "self", ".", "weight", ",", "groups", "=", "self", ".", "groups", ")", "\n", "\n", "", "", ""]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.adversarial_attacks.utils.reduce": [[75, 84], ["loss.mean", "loss.sum", "ValueError"], "function", ["None"], []], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.adversarial_attacks.utils.logits_diff_loss": [[86, 96], ["torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "utils.reduce", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max"], "function", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.adversarial_attacks.utils.reduce"], []], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.adversarial_attacks.utils.conf_diff_loss": [[97, 108], ["torch.softmax", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "utils.reduce", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max"], "function", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.adversarial_attacks.utils.reduce"], []], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.adversarial_attacks.utils.confidence_loss": [[109, 113], ["torch.softmax", "utils.reduce", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange"], "function", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.adversarial_attacks.utils.reduce"], []], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.adversarial_attacks.utils.create_early_stopping_mask": [[115, 131], ["torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.nn.functional.softmax", "torch.nn.functional.softmax", "torch.nn.functional.softmax", "torch.nn.functional.softmax", "torch.nn.functional.softmax", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "sum", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq"], "function", ["None"], []], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.adversarial_attacks.utils.initialize_perturbation": [[132, 143], ["utils.project_perturbation", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "noise_generator"], "function", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.adversarial_attacks.utils.project_perturbation"], []], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.adversarial_attacks.monotone_pgd.MonotonePGD.__init__": [[12, 25], ["restartattack.RestartAttack.__init__"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models_32x32.shake_pyramidnet.ShakePyramidNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "eps", ",", "iterations", ",", "stepsize", ",", "num_classes", ",", "momentum", "=", "0.9", ",", "\n", "norm", "=", "'inf'", ",", "loss", "=", "'CrossEntropy'", ",", "normalize_grad", "=", "True", ",", "early_stopping", "=", "0", ",", "restarts", "=", "0", ",", "\n", "init_noise_generator", "=", "None", ",", "model", "=", "None", ",", "save_trajectory", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "loss", ",", "restarts", ",", "num_classes", ",", "model", "=", "model", ",", "save_trajectory", "=", "save_trajectory", ")", "\n", "self", ".", "eps", "=", "eps", "\n", "self", ".", "iterations", "=", "iterations", "\n", "self", ".", "stepsize", "=", "stepsize", "\n", "self", ".", "momentum", "=", "momentum", "\n", "self", ".", "norm", "=", "norm", "\n", "self", ".", "normalize_grad", "=", "normalize_grad", "\n", "self", ".", "early_stopping", "=", "early_stopping", "\n", "self", ".", "init_noise_generator", "=", "init_noise_generator", "\n", "self", ".", "prev_mean_lr", "=", "stepsize", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.adversarial_attacks.monotone_pgd.MonotonePGD._get_trajectory_depth": [[26, 28], ["None"], "methods", ["None"], ["", "def", "_get_trajectory_depth", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "iterations", "+", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.adversarial_attacks.monotone_pgd.MonotonePGD.get_config_dict": [[29, 45], ["isinstance"], "methods", ["None"], ["", "def", "get_config_dict", "(", "self", ")", ":", "\n", "        ", "dict", "=", "{", "}", "\n", "dict", "[", "'type'", "]", "=", "'MonotonePGD'", "\n", "dict", "[", "'eps'", "]", "=", "self", ".", "eps", "\n", "dict", "[", "'iterations'", "]", "=", "self", ".", "iterations", "\n", "dict", "[", "'stepsize'", "]", "=", "self", ".", "stepsize", "\n", "dict", "[", "'momentum'", "]", "=", "self", ".", "momentum", "\n", "dict", "[", "'norm'", "]", "=", "self", ".", "norm", "\n", "if", "isinstance", "(", "self", ".", "loss", ",", "str", ")", ":", "\n", "            ", "dict", "[", "'loss'", "]", "=", "self", ".", "loss", "\n", "", "else", ":", "\n", "            ", "dict", "[", "'loss'", "]", "=", "'custom'", "\n", "", "dict", "[", "'normalize_grad'", "]", "=", "self", ".", "normalize_grad", "\n", "dict", "[", "'early_stopping'", "]", "=", "self", ".", "early_stopping", "\n", "dict", "[", "'restarts'", "]", "=", "self", ".", "restarts", "\n", "return", "dict", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.adversarial_attacks.monotone_pgd.MonotonePGD.perturb_inner": [[47, 126], ["monotone_pgd.MonotonePGD._get_loss_f", "utils.project_perturbation.clone().detach", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "range", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "monotone_pgd.MonotonePGD.init_noise_generator", "utils.project_perturbation", "x.new_ones", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "utils.project_perturbation.requires_grad_", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "utils.project_perturbation.clone", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "monotone_pgd.MonotonePGD.model", "monotone_pgd.MonotonePGD.", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "prev_pert[].clone().detach", "prev_loss[].clone().detach", "utils.project_perturbation.clone().detach", "torch.zeros_like.clone().detach", "torch.zeros_like.clone().detach", "torch.zeros_like.clone().detach", "torch.zeros_like.clone().detach", "torch.zeros_like.clone().detach", "utils.project_perturbation", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "utils.create_early_stopping_mask", "utils.normalize_perturbation", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "prev_pert[].clone", "prev_loss[].clone", "utils.project_perturbation.clone", "torch.zeros_like.clone", "torch.zeros_like.clone", "torch.zeros_like.clone", "torch.zeros_like.clone", "torch.zeros_like.clone", "torch.sum().view", "torch.sum().view", "torch.sum().view", "torch.sum().view", "torch.sum().view", "torch.sum().view", "torch.sum().view", "torch.sum().view", "torch.sum().view", "torch.sum().view", "torch.sum().view", "torch.sum().view", "torch.sum().view", "torch.sum().view", "torch.sum().view", "torch.sum().view", "torch.sum().view", "torch.sum().view", "torch.sum().view", "torch.sum().view", "torch.sum().view", "torch.sum().view", "torch.sum().view", "torch.sum().view", "torch.sum().view", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "grad.abs().view", "grad.abs"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.adversarial_attacks.adversarialattack.AdversarialAttack._get_loss_f", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.adversarial_attacks.utils.project_perturbation", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.adversarial_attacks.utils.project_perturbation", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.adversarial_attacks.utils.create_early_stopping_mask", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.adversarial_attacks.utils.normalize_perturbation"], ["", "def", "perturb_inner", "(", "self", ",", "x", ",", "y", ",", "targeted", "=", "False", ",", "x_init", "=", "None", ")", ":", "\n", "        ", "l_f", "=", "self", ".", "_get_loss_f", "(", "x", ",", "y", ",", "targeted", ",", "'none'", ")", "\n", "\n", "\n", "#initialize perturbation", "\n", "if", "self", ".", "init_noise_generator", "is", "None", ":", "\n", "            ", "pert", "=", "torch", ".", "zeros_like", "(", "x", ")", "\n", "", "else", ":", "\n", "            ", "pert", "=", "self", ".", "init_noise_generator", "(", "x", ")", "\n", "pert", "=", "torch", ".", "clamp", "(", "x", "+", "pert", ",", "0", ",", "1", ")", "-", "x", "# box constraint", "\n", "pert", "=", "project_perturbation", "(", "pert", ",", "self", ".", "eps", ",", "self", ".", "norm", ")", "\n", "\n", "", "prev_loss", "=", "1e13", "*", "x", ".", "new_ones", "(", "x", ".", "shape", "[", "0", "]", ")", "\n", "\n", "prev_pert", "=", "pert", ".", "clone", "(", ")", ".", "detach", "(", ")", "\n", "prev_velocity", "=", "torch", ".", "zeros_like", "(", "pert", ")", "\n", "velocity", "=", "torch", ".", "zeros_like", "(", "pert", ")", "\n", "\n", "#trajectory container", "\n", "if", "self", ".", "save_trajectory", ":", "\n", "            ", "trajectory", "=", "torch", ".", "zeros", "(", "(", "self", ".", "iterations", "+", "1", ",", ")", "+", "x", ".", "shape", ",", "device", "=", "x", ".", "device", ")", "\n", "trajectory", "[", "0", ",", ":", "]", "=", "x", "\n", "", "else", ":", "\n", "            ", "trajectory", "=", "None", "\n", "\n", "", "for", "i", "in", "range", "(", "self", ".", "iterations", "+", "1", ")", ":", "\n", "            ", "pert", ".", "requires_grad_", "(", "True", ")", "\n", "with", "torch", ".", "enable_grad", "(", ")", ":", "\n", "                ", "data", "=", "x", "+", "pert", "\n", "out", "=", "self", ".", "model", "(", "data", ")", "\n", "\n", "loss_expanded", "=", "l_f", "(", "data", ",", "out", ")", "\n", "loss", "=", "torch", ".", "mean", "(", "loss_expanded", ")", "\n", "grad", "=", "torch", ".", "autograd", ".", "grad", "(", "loss", ",", "pert", ")", "[", "0", "]", "\n", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "loss_increase_idx", "=", "loss_expanded", ">=", "prev_loss", "\n", "\n", "pert", "[", "loss_increase_idx", ",", ":", "]", "=", "prev_pert", "[", "loss_increase_idx", ",", ":", "]", ".", "clone", "(", ")", ".", "detach", "(", ")", "\n", "loss_expanded", "[", "loss_increase_idx", "]", "=", "prev_loss", "[", "loss_increase_idx", "]", ".", "clone", "(", ")", ".", "detach", "(", ")", "\n", "prev_pert", "=", "pert", ".", "clone", "(", ")", ".", "detach", "(", ")", "\n", "prev_loss", "=", "loss_expanded", "\n", "#previous velocity always holds the last accepted velocity vector", "\n", "#velocity the one used for the last update that might have been rejected", "\n", "velocity", "[", "loss_increase_idx", ",", ":", "]", "=", "prev_velocity", "[", "loss_increase_idx", ",", ":", "]", "\n", "prev_velocity", "=", "velocity", ".", "clone", "(", ")", ".", "detach", "(", ")", "\n", "\n", "if", "i", "==", "self", ".", "iterations", ":", "\n", "                    ", "break", "\n", "\n", "", "if", "self", ".", "early_stopping", ">", "0", ":", "\n", "                    ", "finished", ",", "mask", "=", "create_early_stopping_mask", "(", "out", ",", "y", ",", "self", ".", "early_stopping", ",", "targeted", ")", "\n", "if", "finished", ":", "\n", "                        ", "break", "\n", "", "", "else", ":", "\n", "                    ", "mask", "=", "1.", "\n", "\n", "#pgd on given loss", "\n", "", "if", "self", ".", "normalize_grad", ":", "\n", "                    ", "if", "self", ".", "momentum", ">", "0", ":", "\n", "#https://arxiv.org/pdf/1710.06081.pdf the l1 normalization follows the momentum iterative method", "\n", "                        ", "l1_norm_gradient", "=", "1e-10", "+", "torch", ".", "sum", "(", "grad", ".", "abs", "(", ")", ".", "view", "(", "x", ".", "shape", "[", "0", "]", ",", "-", "1", ")", ",", "dim", "=", "1", ")", ".", "view", "(", "-", "1", ",", "1", ",", "1", ",", "1", ")", "\n", "velocity", "=", "self", ".", "momentum", "*", "velocity", "+", "grad", "/", "l1_norm_gradient", "\n", "", "else", ":", "\n", "                        ", "velocity", "=", "grad", "\n", "", "norm_velocity", "=", "normalize_perturbation", "(", "velocity", ",", "self", ".", "norm", ")", "\n", "", "else", ":", "\n", "# velocity update as in pytorch https://pytorch.org/docs/stable/optim.html", "\n", "                    ", "velocity", "=", "self", ".", "momentum", "*", "velocity", "+", "grad", "\n", "norm_velocity", "=", "velocity", "\n", "\n", "", "pert", "=", "pert", "-", "mask", "*", "self", ".", "stepsize", "*", "norm_velocity", "\n", "pert", "=", "project_perturbation", "(", "pert", ",", "self", ".", "eps", ",", "self", ".", "norm", ")", "\n", "pert", "=", "torch", ".", "clamp", "(", "x", "+", "pert", ",", "0", ",", "1", ")", "-", "x", "#box constraint", "\n", "\n", "if", "self", ".", "save_trajectory", ":", "\n", "                    ", "trajectory", "[", "i", "+", "1", "]", "=", "x", "+", "pert", "\n", "\n", "", "", "", "return", "data", ",", "loss_expanded", ",", "trajectory", "\n", "", "", ""]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models.model_factory_32.try_number_conversion": [[7, 13], ["float"], "function", ["None"], ["def", "try_number_conversion", "(", "s", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "value", "=", "float", "(", "s", ")", "\n", "return", "value", "\n", "", "except", "ValueError", ":", "\n", "        ", "return", "s", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models.model_factory_32.parse_params": [[14, 28], ["range", "print", "model_factory_32.try_number_conversion", "len", "len"], "function", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models.model_factory_32.try_number_conversion"], ["", "", "def", "parse_params", "(", "params_list", ")", ":", "\n", "    ", "params", "=", "{", "}", "\n", "\n", "if", "params_list", "is", "not", "None", ":", "\n", "        ", "assert", "len", "(", "params_list", ")", "%", "2", "==", "0", "\n", "for", "i", "in", "range", "(", "len", "(", "params_list", ")", "//", "2", ")", ":", "\n", "            ", "key", "=", "params_list", "[", "2", "*", "i", "]", "\n", "value", "=", "params_list", "[", "2", "*", "i", "+", "1", "]", "\n", "value", "=", "try_number_conversion", "(", "value", ")", "\n", "params", "[", "key", "]", "=", "value", "\n", "\n", "", "print", "(", "params", ")", "\n", "\n", "", "return", "params", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models.model_factory_32.build_model": [[29, 89], ["model_name.lower.lower", "model_factory_32.parse_params", "utils.models.models_32x32.resnet.ResNet18", "utils.models.models_32x32.resnet.ResNet34", "utils.models.models_32x32.resnet.ResNet50", "utils.models.models_32x32.fixup_resnet.fixup_resnet20", "utils.models.models_32x32.fixup_resnet.fixup_resnet56", "utils.models.models_32x32.pyramid.aa_PyramidNet", "utils.models.models_32x32.pyramid.aa_PyramidNet", "utils.models.models_32x32.wide_resnet.WideResNet28x2", "utils.models.models_32x32.wide_resnet.WideResNet28x10", "utils.models.models_32x32.wide_resnet.WideResNet28x20", "utils.models.models_32x32.wide_resnet.WideResNet34x10", "utils.models.models_32x32.wide_resnet.WideResNet34x20", "utils.models.models_32x32.wide_resnet.WideResNet40x10", "utils.models.models_32x32.wide_resnet.WideResNet70x16", "timm.models.factory.create_model", "timm.models.factory.create_model", "print", "NotImplemented"], "function", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models.model_factory_32.parse_params", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models_32x32.resnet.ResNet18", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models_32x32.resnet.ResNet34", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models_32x32.resnet.ResNet50", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models_32x32.fixup_resnet.fixup_resnet20", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models_32x32.fixup_resnet.fixup_resnet56", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models_32x32.wide_resnet.WideResNet28x2", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models_32x32.wide_resnet.WideResNet28x10", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models_32x32.wide_resnet.WideResNet28x20", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models_32x32.wide_resnet.WideResNet34x10", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models_32x32.wide_resnet.WideResNet34x20", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models_32x32.wide_resnet.WideResNet40x10", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models_32x32.wide_resnet.WideResNet70x16"], ["", "def", "build_model", "(", "model_name", ",", "num_classes", ",", "model_params", "=", "None", ")", ":", "\n", "    ", "model_name", "=", "model_name", ".", "lower", "(", ")", "\n", "model_config", "=", "parse_params", "(", "model_params", ")", "\n", "\n", "img_size", "=", "32", "\n", "if", "model_name", "==", "'resnet18'", ":", "\n", "        ", "model", "=", "ResNet18", "(", "num_classes", "=", "num_classes", ")", "\n", "model_name", "=", "'ResNet18'", "\n", "", "elif", "model_name", "==", "'resnet34'", ":", "\n", "        ", "model", "=", "ResNet34", "(", "num_classes", "=", "num_classes", ")", "\n", "model_name", "=", "'ResNet34'", "\n", "", "elif", "model_name", "==", "'resnet50'", ":", "\n", "        ", "model", "=", "ResNet50", "(", "num_classes", "=", "num_classes", ")", "\n", "model_name", "=", "'ResNet50'", "\n", "", "elif", "model_name", "==", "'fixup_resnet20'", ":", "\n", "        ", "model", "=", "fixup_resnet20", "(", "num_classes", "=", "num_classes", ")", "\n", "model_name", "=", "'FixupResNet20'", "\n", "", "elif", "model_name", "==", "'fixup_resnet56'", ":", "\n", "        ", "model", "=", "fixup_resnet56", "(", "num_classes", "=", "num_classes", ")", "\n", "model_name", "=", "'FixupResNet56'", "\n", "", "elif", "model_name", "==", "'shakedrop_pyramid'", ":", "\n", "        ", "model", "=", "aa_PyramidNet", "(", "depth", "=", "110", ",", "alpha", "=", "270", ",", "num_classes", "=", "num_classes", ")", "\n", "model_name", "=", "'ShakedropPyramid'", "\n", "", "elif", "model_name", "==", "'shakedrop_pyramid272'", ":", "\n", "        ", "model", "=", "aa_PyramidNet", "(", "depth", "=", "272", ",", "alpha", "=", "200", ",", "num_classes", "=", "num_classes", ")", "\n", "model_name", "=", "'ShakedropPyramid272'", "\n", "", "elif", "model_name", "==", "'wideresnet28x2'", ":", "\n", "        ", "model", "=", "WideResNet28x2", "(", "num_classes", "=", "num_classes", ",", "**", "model_config", ")", "\n", "model_name", "=", "'WideResNet28x2'", "\n", "", "elif", "model_name", "==", "'wideresnet28x10'", ":", "\n", "        ", "model", "=", "WideResNet28x10", "(", "num_classes", "=", "num_classes", ")", "\n", "model_name", "=", "'WideResNet28x10'", "\n", "", "elif", "model_name", "==", "'wideresnet28x20'", ":", "\n", "        ", "model", "=", "WideResNet28x20", "(", "num_classes", "=", "num_classes", ")", "\n", "model_name", "=", "'WideResNet28x20'", "\n", "", "elif", "model_name", "==", "'wideresnet34x10'", ":", "\n", "        ", "model", "=", "WideResNet34x10", "(", "num_classes", "=", "num_classes", ",", "**", "model_config", ")", "\n", "model_name", "=", "'WideResNet34x10'", "\n", "", "elif", "model_name", "==", "'wideresnet34x20'", ":", "\n", "        ", "model", "=", "WideResNet34x20", "(", "num_classes", "=", "num_classes", ")", "\n", "model_name", "=", "'WideResNet34x20'", "\n", "", "elif", "model_name", "==", "'wideresnet40x10'", ":", "\n", "        ", "model", "=", "WideResNet40x10", "(", "num_classes", "=", "num_classes", ")", "\n", "model_name", "=", "'WideResNet40x10'", "\n", "", "elif", "model_name", "==", "'wideresnet70x16'", ":", "\n", "        ", "model", "=", "WideResNet70x16", "(", "num_classes", "=", "num_classes", ")", "\n", "model_name", "=", "'WideResNet70x16'", "\n", "", "elif", "model_name", "==", "'vit-b16'", ":", "\n", "        ", "model", "=", "create_model", "(", "'vit_base_patch16_224_in21k'", ",", "num_classes", "=", "num_classes", ",", "pretrained", "=", "True", ")", "\n", "model_name", "=", "'ViT-B16'", "\n", "img_size", "=", "224", "\n", "", "elif", "model_name", "==", "'vit-b32'", ":", "\n", "        ", "model", "=", "create_model", "(", "'vit_base_patch32_224_in21k'", ",", "num_classes", "=", "num_classes", ",", "pretrained", "=", "True", ")", "\n", "model_name", "=", "'ViT-B32'", "\n", "img_size", "=", "224", "\n", "", "else", ":", "\n", "        ", "print", "(", "f'Net {model_name} not supported'", ")", "\n", "raise", "NotImplemented", "(", ")", "\n", "\n", "", "return", "model", ",", "model_name", ",", "model_config", ",", "img_size", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models.model_factory_224.build_model": [[3, 30], ["model_name.lower.lower", "timm.models.factory.create_model", "dict", "timm.models.factory.create_model", "dict", "timm.models.factory.create_model", "dict", "timm.models.factory.create_model", "dict", "timm.models.factory.create_model", "dict", "print", "NotImplemented"], "function", ["None"], ["def", "build_model", "(", "model_name", ",", "num_classes", ",", "**", "kwargs", ")", ":", "\n", "    ", "model_name", "=", "model_name", ".", "lower", "(", ")", "\n", "if", "model_name", "==", "'sslresnext50'", ":", "\n", "        ", "model_name", "=", "'SSLResNext50'", "\n", "model", "=", "create_model", "(", "'ssl_resnext50_32x4d'", ",", "num_classes", "=", "num_classes", ",", "**", "kwargs", ")", "\n", "config", "=", "dict", "(", "name", "=", "model_name", ",", "**", "kwargs", ")", "\n", "", "elif", "model_name", "==", "'resnet50'", ":", "\n", "        ", "model_name", "=", "'ResNet50'", "\n", "model", "=", "create_model", "(", "'resnet50'", ",", "num_classes", "=", "num_classes", ",", "**", "kwargs", ")", "\n", "config", "=", "dict", "(", "name", "=", "model_name", ",", "**", "kwargs", ")", "\n", "", "elif", "model_name", "==", "'tresnetm'", ":", "\n", "        ", "model_name", "=", "'TResNet-M'", "\n", "model", "=", "create_model", "(", "'tresnet_m'", ",", "num_classes", "=", "num_classes", ",", "**", "kwargs", ")", "\n", "config", "=", "dict", "(", "name", "=", "model_name", ",", "**", "kwargs", ")", "\n", "", "elif", "model_name", "==", "'seresnext26t'", ":", "\n", "        ", "model_name", "=", "'SE-ResNeXt-26-T'", "\n", "model", "=", "create_model", "(", "'seresnext26t_32x4d'", ",", "num_classes", "=", "num_classes", ",", "**", "kwargs", ")", "\n", "config", "=", "dict", "(", "name", "=", "model_name", ",", "**", "kwargs", ")", "\n", "", "elif", "model_name", "==", "'seresnext50'", ":", "\n", "        ", "model_name", "=", "'SE-ResNeXt-50'", "\n", "model", "=", "create_model", "(", "'seresnext50_32x4d'", ",", "num_classes", "=", "num_classes", ",", "**", "kwargs", ")", "\n", "config", "=", "dict", "(", "name", "=", "model_name", ",", "**", "kwargs", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "f'Net {model_name} not supported'", ")", "\n", "raise", "NotImplemented", "(", ")", "\n", "\n", "", "return", "model", ",", "model_name", ",", "config", "", "", ""]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models.big_transfer_factory.build_model_big_transfer": [[7, 14], ["model.load_from", "numpy.load", "os.path.join"], "function", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.big_transfer.models.ResNetV2.load_from"], ["def", "build_model_big_transfer", "(", "model_name", ",", "num_classes", ",", "pretrained", "=", "True", ")", ":", "\n", "    ", "model", "=", "KNOWN_MODELS", "[", "model_name", "]", "(", "head_size", "=", "num_classes", ",", "zero_head", "=", "True", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_from", "(", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "BIG_TRANSFER_MODEL_DIR", ",", "f\"{model_name}.npz\"", ")", ")", ")", "\n", "\n", "\n", "", "return", "model", ",", "model_name", "", "", ""]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models.ebm_wrn.ConditionalInstanceNorm2dPlus.__init__": [[27, 39], ["torch.Module.__init__", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "ebm_wrn.ConditionalInstanceNorm2dPlus.embed.weight.data[].normal_", "ebm_wrn.ConditionalInstanceNorm2dPlus.embed.weight.data[].zero_", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "ebm_wrn.ConditionalInstanceNorm2dPlus.embed.weight.data.normal_"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models_32x32.shake_pyramidnet.ShakePyramidNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_features", ",", "num_classes", ",", "bias", "=", "True", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_features", "=", "num_features", "\n", "self", ".", "bias", "=", "bias", "\n", "self", ".", "instance_norm", "=", "nn", ".", "InstanceNorm2d", "(", "num_features", ",", "affine", "=", "False", ",", "track_running_stats", "=", "False", ")", "\n", "if", "bias", ":", "\n", "            ", "self", ".", "embed", "=", "nn", ".", "Embedding", "(", "num_classes", ",", "num_features", "*", "3", ")", "\n", "self", ".", "embed", ".", "weight", ".", "data", "[", ":", ",", ":", "2", "*", "num_features", "]", ".", "normal_", "(", "1", ",", "0.02", ")", "# Initialise scale at N(1, 0.02)", "\n", "self", ".", "embed", ".", "weight", ".", "data", "[", ":", ",", "2", "*", "num_features", ":", "]", ".", "zero_", "(", ")", "# Initialise bias at 0", "\n", "", "else", ":", "\n", "            ", "self", ".", "embed", "=", "nn", ".", "Embedding", "(", "num_classes", ",", "2", "*", "num_features", ")", "\n", "self", ".", "embed", ".", "weight", ".", "data", ".", "normal_", "(", "1", ",", "0.02", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models.ebm_wrn.ConditionalInstanceNorm2dPlus.forward": [[40, 56], ["torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.var", "torch.var", "torch.var", "torch.var", "torch.var", "torch.var", "torch.var", "torch.var", "torch.var", "torch.var", "torch.var", "torch.var", "torch.var", "torch.var", "torch.var", "torch.var", "torch.var", "torch.var", "torch.var", "torch.var", "torch.var", "torch.var", "torch.var", "torch.var", "torch.var", "ebm_wrn.ConditionalInstanceNorm2dPlus.instance_norm", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "ebm_wrn.ConditionalInstanceNorm2dPlus.embed().chunk", "ebm_wrn.ConditionalInstanceNorm2dPlus.embed().chunk", "beta.view", "gamma.view", "ebm_wrn.ConditionalInstanceNorm2dPlus.embed", "gamma.view", "ebm_wrn.ConditionalInstanceNorm2dPlus.embed"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "        ", "means", "=", "torch", ".", "mean", "(", "x", ",", "dim", "=", "(", "2", ",", "3", ")", ")", "\n", "m", "=", "torch", ".", "mean", "(", "means", ",", "dim", "=", "-", "1", ",", "keepdim", "=", "True", ")", "\n", "v", "=", "torch", ".", "var", "(", "means", ",", "dim", "=", "-", "1", ",", "keepdim", "=", "True", ")", "\n", "means", "=", "(", "means", "-", "m", ")", "/", "(", "torch", ".", "sqrt", "(", "v", "+", "1e-5", ")", ")", "\n", "h", "=", "self", ".", "instance_norm", "(", "x", ")", "\n", "\n", "if", "self", ".", "bias", ":", "\n", "            ", "gamma", ",", "alpha", ",", "beta", "=", "self", ".", "embed", "(", "y", ")", ".", "chunk", "(", "3", ",", "dim", "=", "-", "1", ")", "\n", "h", "=", "h", "+", "means", "[", "...", ",", "None", ",", "None", "]", "*", "alpha", "[", "...", ",", "None", ",", "None", "]", "\n", "out", "=", "gamma", ".", "view", "(", "-", "1", ",", "self", ".", "num_features", ",", "1", ",", "1", ")", "*", "h", "+", "beta", ".", "view", "(", "-", "1", ",", "self", ".", "num_features", ",", "1", ",", "1", ")", "\n", "", "else", ":", "\n", "            ", "gamma", ",", "alpha", "=", "self", ".", "embed", "(", "y", ")", ".", "chunk", "(", "2", ",", "dim", "=", "-", "1", ")", "\n", "h", "=", "h", "+", "means", "[", "...", ",", "None", ",", "None", "]", "*", "alpha", "[", "...", ",", "None", ",", "None", "]", "\n", "out", "=", "gamma", ".", "view", "(", "-", "1", ",", "self", ".", "num_features", ",", "1", ",", "1", ")", "*", "h", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models.ebm_wrn.ConditionalActNorm.__init__": [[59, 66], ["torch.Module.__init__", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "ebm_wrn.ConditionalActNorm.embed.weight.data.zero_"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models_32x32.shake_pyramidnet.ShakePyramidNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_features", ",", "num_classes", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_features", "=", "num_features", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "embed", "=", "nn", ".", "Embedding", "(", "num_classes", ",", "num_features", "*", "2", ")", "\n", "self", ".", "embed", ".", "weight", ".", "data", ".", "zero_", "(", ")", "\n", "self", ".", "init", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models.ebm_wrn.ConditionalActNorm.forward": [[67, 80], ["ebm_wrn.ConditionalActNorm.embed().chunk", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "scale_init[].repeat", "bias_init[].repeat", "ebm_wrn.ConditionalActNorm.", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.var", "torch.var", "torch.var", "torch.var", "torch.var", "torch.var", "torch.var", "torch.var", "torch.var", "torch.var", "torch.var", "torch.var", "torch.var", "torch.var", "torch.var", "torch.var", "torch.var", "torch.var", "torch.var", "torch.var", "torch.var", "torch.var", "torch.var", "torch.var", "torch.var", "ebm_wrn.ConditionalActNorm.embed"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "        ", "if", "self", ".", "init", ":", "\n", "            ", "scale", ",", "bias", "=", "self", ".", "embed", "(", "y", ")", ".", "chunk", "(", "2", ",", "dim", "=", "-", "1", ")", "\n", "return", "x", "*", "scale", "[", ":", ",", ":", ",", "None", ",", "None", "]", "+", "bias", "[", ":", ",", ":", ",", "None", ",", "None", "]", "\n", "", "else", ":", "\n", "            ", "m", ",", "v", "=", "torch", ".", "mean", "(", "x", ",", "dim", "=", "(", "0", ",", "2", ",", "3", ")", ")", ",", "torch", ".", "var", "(", "x", ",", "dim", "=", "(", "0", ",", "2", ",", "3", ")", ")", "\n", "std", "=", "torch", ".", "sqrt", "(", "v", "+", "1e-5", ")", "\n", "scale_init", "=", "1.", "/", "std", "\n", "bias_init", "=", "-", "1.", "*", "m", "/", "std", "\n", "self", ".", "embed", ".", "weight", ".", "data", "[", ":", ",", ":", "self", ".", "num_features", "]", "=", "scale_init", "[", "None", "]", ".", "repeat", "(", "self", ".", "num_classes", ",", "1", ")", "\n", "self", ".", "embed", ".", "weight", ".", "data", "[", ":", ",", "self", ".", "num_features", ":", "]", "=", "bias_init", "[", "None", "]", ".", "repeat", "(", "self", ".", "num_classes", ",", "1", ")", "\n", "self", ".", "init", "=", "True", "\n", "return", "self", "(", "x", ",", "y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models.ebm_wrn.ActNorm.__init__": [[86, 94], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "ebm_wrn.ActNorm.register_buffer", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models_32x32.shake_pyramidnet.ShakePyramidNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channel", ",", "logdet", "=", "True", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "loc", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ",", "in_channel", ",", "1", ",", "1", ")", ")", "\n", "self", ".", "scale", "=", "nn", ".", "Parameter", "(", "torch", ".", "ones", "(", "1", ",", "in_channel", ",", "1", ",", "1", ")", ")", "\n", "\n", "self", ".", "register_buffer", "(", "'initialized'", ",", "torch", ".", "tensor", "(", "0", ",", "dtype", "=", "torch", ".", "uint8", ")", ")", "\n", "self", ".", "logdet", "=", "logdet", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models.ebm_wrn.ActNorm.initialize": [[95, 115], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "input.permute().contiguous().view", "input.permute().contiguous().view.mean().unsqueeze().unsqueeze().unsqueeze().permute", "input.permute().contiguous().view.std().unsqueeze().unsqueeze().unsqueeze().permute", "ebm_wrn.ActNorm.loc.data.copy_", "ebm_wrn.ActNorm.scale.data.copy_", "input.permute().contiguous", "input.permute().contiguous().view.mean().unsqueeze().unsqueeze().unsqueeze", "input.permute().contiguous().view.std().unsqueeze().unsqueeze().unsqueeze", "input.permute", "input.permute().contiguous().view.mean().unsqueeze().unsqueeze", "input.permute().contiguous().view.std().unsqueeze().unsqueeze", "input.permute().contiguous().view.mean().unsqueeze", "input.permute().contiguous().view.std().unsqueeze", "input.permute().contiguous().view.mean", "input.permute().contiguous().view.std"], "methods", ["None"], ["", "def", "initialize", "(", "self", ",", "input", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "flatten", "=", "input", ".", "permute", "(", "1", ",", "0", ",", "2", ",", "3", ")", ".", "contiguous", "(", ")", ".", "view", "(", "input", ".", "shape", "[", "1", "]", ",", "-", "1", ")", "\n", "mean", "=", "(", "\n", "flatten", ".", "mean", "(", "1", ")", "\n", ".", "unsqueeze", "(", "1", ")", "\n", ".", "unsqueeze", "(", "2", ")", "\n", ".", "unsqueeze", "(", "3", ")", "\n", ".", "permute", "(", "1", ",", "0", ",", "2", ",", "3", ")", "\n", ")", "\n", "std", "=", "(", "\n", "flatten", ".", "std", "(", "1", ")", "\n", ".", "unsqueeze", "(", "1", ")", "\n", ".", "unsqueeze", "(", "2", ")", "\n", ".", "unsqueeze", "(", "3", ")", "\n", ".", "permute", "(", "1", ",", "0", ",", "2", ",", "3", ")", "\n", ")", "\n", "\n", "self", ".", "loc", ".", "data", ".", "copy_", "(", "-", "mean", ")", "\n", "self", ".", "scale", ".", "data", ".", "copy_", "(", "1", "/", "(", "std", "+", "1e-6", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models.ebm_wrn.ActNorm.forward": [[116, 132], ["logabs", "ebm_wrn.ActNorm.initialized.item", "ebm_wrn.ActNorm.initialize", "ebm_wrn.ActNorm.initialized.fill_", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models.ebm_wrn.ActNorm.initialize"], ["", "", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "_", ",", "_", ",", "height", ",", "width", "=", "input", ".", "shape", "\n", "\n", "if", "self", ".", "initialized", ".", "item", "(", ")", "==", "0", ":", "\n", "            ", "self", ".", "initialize", "(", "input", ")", "\n", "self", ".", "initialized", ".", "fill_", "(", "1", ")", "\n", "\n", "", "log_abs", "=", "logabs", "(", "self", ".", "scale", ")", "\n", "\n", "logdet", "=", "height", "*", "width", "*", "torch", ".", "sum", "(", "log_abs", ")", "\n", "\n", "if", "self", ".", "logdet", ":", "\n", "            ", "return", "self", ".", "scale", "*", "(", "input", "+", "self", ".", "loc", ")", ",", "logdet", "\n", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "scale", "*", "(", "input", "+", "self", ".", "loc", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models.ebm_wrn.ActNorm.reverse": [[133, 135], ["None"], "methods", ["None"], ["", "", "def", "reverse", "(", "self", ",", "output", ")", ":", "\n", "        ", "return", "output", "/", "self", ".", "scale", "-", "self", ".", "loc", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models.ebm_wrn.ContinuousConditionalActNorm.__init__": [[138, 147], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models_32x32.shake_pyramidnet.ShakePyramidNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_features", ",", "num_classes", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "del", "num_classes", "\n", "self", ".", "num_features", "=", "num_features", "\n", "self", ".", "embed", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "1", ",", "256", ")", ",", "\n", "nn", ".", "ELU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "256", ",", "256", ")", ",", "\n", "nn", ".", "ELU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "256", ",", "self", ".", "num_features", "*", "2", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models.ebm_wrn.ContinuousConditionalActNorm.forward": [[149, 152], ["ebm_wrn.ContinuousConditionalActNorm.embed().chunk", "ebm_wrn.ContinuousConditionalActNorm.embed", "y.unsqueeze"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "        ", "scale", ",", "bias", "=", "self", ".", "embed", "(", "y", ".", "unsqueeze", "(", "-", "1", ")", ")", ".", "chunk", "(", "2", ",", "dim", "=", "-", "1", ")", "\n", "return", "x", "*", "scale", "[", ":", ",", ":", ",", "None", ",", "None", "]", "+", "bias", "[", ":", ",", ":", ",", "None", ",", "None", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models.ebm_wrn.Identity.__init__": [[169, 171], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models_32x32.shake_pyramidnet.ShakePyramidNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models.ebm_wrn.Identity.forward": [[171, 173], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models.ebm_wrn.wide_basic.__init__": [[176, 189], ["torch.Module.__init__", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "ebm_wrn.get_norm", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "ebm_wrn.get_norm", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "ebm_wrn.Identity", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models_32x32.shake_pyramidnet.ShakePyramidNet.__init__", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models.ebm_wrn.get_norm", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models.ebm_wrn.get_norm"], ["    ", "def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "dropout_rate", ",", "stride", "=", "1", ",", "norm", "=", "None", ",", "leak", "=", ".2", ")", ":", "\n", "        ", "super", "(", "wide_basic", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "lrelu", "=", "nn", ".", "LeakyReLU", "(", "leak", ")", "\n", "self", ".", "bn1", "=", "get_norm", "(", "in_planes", ",", "norm", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "bias", "=", "True", ")", "\n", "self", ".", "dropout", "=", "Identity", "(", ")", "if", "dropout_rate", "==", "0.0", "else", "nn", ".", "Dropout", "(", "p", "=", "dropout_rate", ")", "\n", "self", ".", "bn2", "=", "get_norm", "(", "planes", ",", "norm", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "True", ")", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "planes", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "True", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models.ebm_wrn.wide_basic.forward": [[191, 197], ["ebm_wrn.wide_basic.dropout", "ebm_wrn.wide_basic.conv2", "ebm_wrn.wide_basic.shortcut", "ebm_wrn.wide_basic.conv1", "ebm_wrn.wide_basic.lrelu", "ebm_wrn.wide_basic.lrelu", "ebm_wrn.wide_basic.bn2", "ebm_wrn.wide_basic.bn1"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "dropout", "(", "self", ".", "conv1", "(", "self", ".", "lrelu", "(", "self", ".", "bn1", "(", "x", ")", ")", ")", ")", "\n", "out", "=", "self", ".", "conv2", "(", "self", ".", "lrelu", "(", "self", ".", "bn2", "(", "out", ")", ")", ")", "\n", "out", "+=", "self", ".", "shortcut", "(", "x", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models.ebm_wrn.Wide_ResNet.__init__": [[213, 236], ["torch.Module.__init__", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "print", "ebm_wrn.conv3x3", "ebm_wrn.Wide_ResNet._wide_layer", "ebm_wrn.Wide_ResNet._wide_layer", "ebm_wrn.Wide_ResNet._wide_layer", "ebm_wrn.get_norm", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models_32x32.shake_pyramidnet.ShakePyramidNet.__init__", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models_32x32.pyramid.conv3x3", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models.ebm_wrn.Wide_ResNet._wide_layer", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models.ebm_wrn.Wide_ResNet._wide_layer", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models.ebm_wrn.Wide_ResNet._wide_layer", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models.ebm_wrn.get_norm"], ["    ", "def", "__init__", "(", "self", ",", "depth", ",", "widen_factor", ",", "num_classes", "=", "10", ",", "input_channels", "=", "3", ",", "\n", "sum_pool", "=", "False", ",", "norm", "=", "None", ",", "leak", "=", ".2", ",", "dropout_rate", "=", "0.0", ")", ":", "\n", "        ", "super", "(", "Wide_ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "leak", "=", "leak", "\n", "self", ".", "in_planes", "=", "16", "\n", "self", ".", "sum_pool", "=", "sum_pool", "\n", "self", ".", "norm", "=", "norm", "\n", "self", ".", "lrelu", "=", "nn", ".", "LeakyReLU", "(", "leak", ")", "\n", "\n", "assert", "(", "(", "depth", "-", "4", ")", "%", "6", "==", "0", ")", ",", "'Wide-resnet depth should be 6n+4'", "\n", "n", "=", "(", "depth", "-", "4", ")", "//", "6", "\n", "k", "=", "widen_factor", "\n", "\n", "print", "(", "'| Wide-Resnet %dx%d'", "%", "(", "depth", ",", "k", ")", ")", "\n", "nStages", "=", "[", "16", ",", "16", "*", "k", ",", "32", "*", "k", ",", "64", "*", "k", "]", "\n", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "input_channels", ",", "nStages", "[", "0", "]", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_wide_layer", "(", "wide_basic", ",", "nStages", "[", "1", "]", ",", "n", ",", "dropout_rate", ",", "stride", "=", "1", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_wide_layer", "(", "wide_basic", ",", "nStages", "[", "2", "]", ",", "n", ",", "dropout_rate", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_wide_layer", "(", "wide_basic", ",", "nStages", "[", "3", "]", ",", "n", ",", "dropout_rate", ",", "stride", "=", "2", ")", "\n", "self", ".", "bn1", "=", "get_norm", "(", "nStages", "[", "3", "]", ",", "self", ".", "norm", ")", "\n", "self", ".", "last_dim", "=", "nStages", "[", "3", "]", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "nStages", "[", "3", "]", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models.ebm_wrn.Wide_ResNet._wide_layer": [[237, 246], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "block"], "methods", ["None"], ["", "def", "_wide_layer", "(", "self", ",", "block", ",", "planes", ",", "num_blocks", ",", "dropout_rate", ",", "stride", ")", ":", "\n", "        ", "strides", "=", "[", "stride", "]", "+", "[", "1", "]", "*", "(", "num_blocks", "-", "1", ")", "\n", "layers", "=", "[", "]", "\n", "\n", "for", "stride", "in", "strides", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "in_planes", ",", "planes", ",", "dropout_rate", ",", "stride", ",", "norm", "=", "self", ".", "norm", ")", ")", "\n", "self", ".", "in_planes", "=", "planes", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models.ebm_wrn.Wide_ResNet.forward": [[247, 259], ["ebm_wrn.Wide_ResNet.conv1", "ebm_wrn.Wide_ResNet.layer1", "ebm_wrn.Wide_ResNet.layer2", "ebm_wrn.Wide_ResNet.layer3", "ebm_wrn.Wide_ResNet.lrelu", "torch.avg_pool2d.view", "ebm_wrn.Wide_ResNet.bn1", "torch.avg_pool2d.view().sum", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d.size", "torch.avg_pool2d.view", "torch.avg_pool2d.size", "torch.avg_pool2d.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "vx", "=", "None", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "layer1", "(", "out", ")", "\n", "out", "=", "self", ".", "layer2", "(", "out", ")", "\n", "out", "=", "self", ".", "layer3", "(", "out", ")", "\n", "out", "=", "self", ".", "lrelu", "(", "self", ".", "bn1", "(", "out", ")", ")", "\n", "if", "self", ".", "sum_pool", ":", "\n", "            ", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "out", ".", "size", "(", "1", ")", ",", "-", "1", ")", ".", "sum", "(", "2", ")", "\n", "", "else", ":", "\n", "            ", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "8", ")", "\n", "", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models.ebm_wrn.EBM_wrapper.__init__": [[262, 266], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models_32x32.shake_pyramidnet.ShakePyramidNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "model", ")", ":", "\n", "        ", "super", "(", "EBM_wrapper", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "sigma", "=", "3e-2", "\n", "self", ".", "model", "=", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models.ebm_wrn.EBM_wrapper.forward": [[267, 270], ["ebm_wrn.EBM_wrapper.model.classify", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models.ebm_wrn.DummyModel.classify"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "2", "*", "x", "-", "1", "+", "self", ".", "sigma", "*", "torch", ".", "randn_like", "(", "x", ")", "\n", "return", "self", ".", "model", ".", "classify", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models.ebm_wrn.EBM_wrapper.energy": [[271, 275], ["ebm_wrn.EBM_wrapper.model.f", "ebm_wrn.EBM_wrapper.model.energy_output().squeeze", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "ebm_wrn.EBM_wrapper.model.energy_output"], "methods", ["None"], ["", "def", "energy", "(", "self", ",", "x", ",", "y", "=", "None", ")", ":", "\n", "        ", "x", "=", "2", "*", "x", "-", "1", "+", "self", ".", "sigma", "*", "torch", ".", "randn_like", "(", "x", ")", "\n", "penult_z", "=", "self", ".", "model", ".", "f", "(", "x", ")", "\n", "return", "self", ".", "model", ".", "energy_output", "(", "penult_z", ")", ".", "squeeze", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models.ebm_wrn.EBM.__init__": [[278, 283], ["torch.Module.__init__", "ebm_wrn.Wide_ResNet", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models_32x32.shake_pyramidnet.ShakePyramidNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "depth", "=", "28", ",", "width", "=", "2", ",", "norm", "=", "None", ")", ":", "\n", "        ", "super", "(", "EBM", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "f", "=", "Wide_ResNet", "(", "depth", ",", "width", ",", "norm", "=", "norm", ")", "\n", "self", ".", "energy_output", "=", "nn", ".", "Linear", "(", "self", ".", "f", ".", "last_dim", ",", "1", ")", "\n", "self", ".", "class_output", "=", "nn", ".", "Linear", "(", "self", ".", "f", ".", "last_dim", ",", "10", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models.ebm_wrn.EBM.forward": [[284, 287], ["ebm_wrn.EBM.f", "ebm_wrn.EBM.energy_output().squeeze", "ebm_wrn.EBM.energy_output"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "y", "=", "None", ")", ":", "\n", "        ", "penult_z", "=", "self", ".", "f", "(", "x", ")", "\n", "return", "self", ".", "energy_output", "(", "penult_z", ")", ".", "squeeze", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models.ebm_wrn.EBM.classify": [[288, 291], ["ebm_wrn.EBM.f", "ebm_wrn.EBM.class_output"], "methods", ["None"], ["", "def", "classify", "(", "self", ",", "x", ")", ":", "\n", "        ", "penult_z", "=", "self", ".", "f", "(", "x", ")", "\n", "return", "self", ".", "class_output", "(", "penult_z", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models.ebm_wrn.CCF.__init__": [[294, 296], ["ebm_wrn.EBM.__init__"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models_32x32.shake_pyramidnet.ShakePyramidNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "depth", "=", "28", ",", "width", "=", "2", ",", "norm", "=", "None", ")", ":", "\n", "        ", "super", "(", "CCF", ",", "self", ")", ".", "__init__", "(", "depth", ",", "width", ",", "norm", "=", "norm", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models.ebm_wrn.CCF.forward": [[297, 303], ["ebm_wrn.CCF.classify", "ebm_wrn.CCF.logsumexp", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models.ebm_wrn.DummyModel.classify"], ["", "def", "forward", "(", "self", ",", "x", ",", "y", "=", "None", ")", ":", "\n", "        ", "logits", "=", "self", ".", "classify", "(", "x", ")", "\n", "if", "y", "is", "None", ":", "\n", "            ", "return", "logits", ".", "logsumexp", "(", "1", ")", "\n", "", "else", ":", "\n", "            ", "return", "torch", ".", "gather", "(", "logits", ",", "1", ",", "y", "[", ":", ",", "None", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models.ebm_wrn.gradient_attack_wrapper.__init__": [[306, 309], ["torch.Module.__init__", "model.eval"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models_32x32.shake_pyramidnet.ShakePyramidNet.__init__", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models.ebm_wrn.gradient_attack_wrapper.eval"], ["    ", "def", "__init__", "(", "self", ",", "model", ")", ":", "\n", "        ", "super", "(", "gradient_attack_wrapper", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "model", "=", "model", ".", "eval", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models.ebm_wrn.gradient_attack_wrapper.forward": [[310, 316], ["x.requires_grad_", "ebm_wrn.gradient_attack_wrapper.model.refined_logits"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models.ebm_wrn.DummyModel.refined_logits"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "x", "-", "0.5", "\n", "x", "=", "x", "/", "0.5", "\n", "x", ".", "requires_grad_", "(", ")", "\n", "out", "=", "self", ".", "model", ".", "refined_logits", "(", "x", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models.ebm_wrn.gradient_attack_wrapper.eval": [[317, 319], ["ebm_wrn.gradient_attack_wrapper.model.eval"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models.ebm_wrn.gradient_attack_wrapper.eval"], ["", "def", "eval", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "model", ".", "eval", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models.ebm_wrn.DummyModel.__init__": [[322, 331], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models_32x32.shake_pyramidnet.ShakePyramidNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "f", ",", "n_steps_refine", "=", "0", ")", ":", "\n", "        ", "super", "(", "DummyModel", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "f", "=", "f", "\n", "self", ".", "sgld_lr", "=", "1.", "\n", "self", ".", "sgld_std", "=", "1e-2", "\n", "self", ".", "n_dup_chains", "=", "5", "\n", "self", ".", "n_steps_refine", "=", "n_steps_refine", "\n", "self", ".", "sigma", "=", "3e-2", "\n", "self", ".", "detach", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models.ebm_wrn.DummyModel.logits": [[332, 334], ["ebm_wrn.DummyModel.f.classify"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models.ebm_wrn.DummyModel.classify"], ["", "def", "logits", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "f", ".", "classify", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models.ebm_wrn.DummyModel.refined_logits": [[335, 346], ["x.size", "x.view().repeat", "dup_x.view.view.view", "ebm_wrn.DummyModel.refine", "ebm_wrn.DummyModel.logits", "logits.mean.mean.view", "logits.mean.mean.mean", "x.size", "logits.mean.mean.size", "x.view", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models.ebm_wrn.DummyModel.refine", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models.ebm_wrn.DummyModel.logits"], ["", "def", "refined_logits", "(", "self", ",", "x", ",", "n_steps", "=", "None", ")", ":", "\n", "        ", "n_steps", "=", "self", ".", "n_steps_refine", "if", "n_steps", "is", "None", "else", "n_steps", "\n", "xs", "=", "x", ".", "size", "(", ")", "\n", "dup_x", "=", "x", ".", "view", "(", "xs", "[", "0", "]", ",", "1", ",", "xs", "[", "1", "]", ",", "xs", "[", "2", "]", ",", "xs", "[", "3", "]", ")", ".", "repeat", "(", "1", ",", "self", ".", "n_dup_chains", ",", "1", ",", "1", ",", "1", ")", "\n", "dup_x", "=", "dup_x", ".", "view", "(", "xs", "[", "0", "]", "*", "self", ".", "n_dup_chains", ",", "xs", "[", "1", "]", ",", "xs", "[", "2", "]", ",", "xs", "[", "3", "]", ")", "\n", "dup_x", "=", "dup_x", "+", "torch", ".", "randn_like", "(", "dup_x", ")", "*", "self", ".", "sigma", "\n", "refined", "=", "self", ".", "refine", "(", "dup_x", ",", "n_steps", "=", "n_steps", ",", "detach", "=", "self", ".", "detach", ")", "\n", "logits", "=", "self", ".", "logits", "(", "refined", ")", "\n", "logits", "=", "logits", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "self", ".", "n_dup_chains", ",", "logits", ".", "size", "(", "1", ")", ")", "\n", "logits", "=", "logits", ".", "mean", "(", "1", ")", "\n", "return", "logits", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models.ebm_wrn.DummyModel.classify": [[347, 351], ["ebm_wrn.DummyModel.logits", "ebm_wrn.DummyModel.max"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models.ebm_wrn.DummyModel.logits"], ["", "def", "classify", "(", "self", ",", "x", ")", ":", "\n", "        ", "logits", "=", "self", ".", "logits", "(", "x", ")", "\n", "pred", "=", "logits", ".", "max", "(", "1", ")", "[", "1", "]", "\n", "return", "pred", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models.ebm_wrn.DummyModel.logpx_score": [[352, 355], ["ebm_wrn.DummyModel.f"], "methods", ["None"], ["", "def", "logpx_score", "(", "self", ",", "x", ")", ":", "\n", "# unnormalized logprob, unconditional on class", "\n", "        ", "return", "self", ".", "f", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models.ebm_wrn.DummyModel.refine": [[356, 367], ["torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "range", "x_k.detach", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "ebm_wrn.DummyModel.f().sum", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "ebm_wrn.DummyModel.f"], "methods", ["None"], ["", "def", "refine", "(", "self", ",", "x", ",", "n_steps", "=", "None", ",", "detach", "=", "True", ")", ":", "\n", "        ", "n_steps", "=", "self", ".", "n_steps_refine", "if", "n_steps", "is", "None", "else", "n_steps", "\n", "# runs a markov chain seeded at x, use n_steps=10", "\n", "with", "torch", ".", "enable_grad", "(", ")", ":", "\n", "            ", "x_k", "=", "torch", ".", "autograd", ".", "Variable", "(", "x", ",", "requires_grad", "=", "True", ")", "if", "detach", "else", "x", "\n", "# sgld", "\n", "for", "k", "in", "range", "(", "n_steps", ")", ":", "\n", "                ", "f_prime", "=", "torch", ".", "autograd", ".", "grad", "(", "self", ".", "f", "(", "x_k", ")", ".", "sum", "(", ")", ",", "[", "x_k", "]", ",", "retain_graph", "=", "True", ")", "[", "0", "]", "\n", "x_k", ".", "data", "+=", "f_prime", "+", "self", ".", "sgld_std", "*", "torch", ".", "randn_like", "(", "x_k", ")", "\n", "", "", "final_samples", "=", "x_k", ".", "detach", "(", ")", "if", "detach", "else", "x_k", "\n", "return", "final_samples", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models.ebm_wrn.DummyModel.grad_norm": [[368, 374], ["torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "f_prime.view", "f_prime.view.norm", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "x.size", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "ebm_wrn.DummyModel.f().sum", "ebm_wrn.DummyModel.f"], "methods", ["None"], ["", "def", "grad_norm", "(", "self", ",", "x", ")", ":", "\n", "        ", "x_k", "=", "torch", ".", "autograd", ".", "Variable", "(", "x", ",", "requires_grad", "=", "True", ")", "\n", "with", "torch", ".", "enable_grad", "(", ")", ":", "\n", "            ", "f_prime", "=", "torch", ".", "autograd", ".", "grad", "(", "self", ".", "f", "(", "x_k", ")", ".", "sum", "(", ")", ",", "[", "x_k", "]", ",", "retain_graph", "=", "True", ")", "[", "0", "]", "\n", "", "grad", "=", "f_prime", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "return", "grad", ".", "norm", "(", "p", "=", "2", ",", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models.ebm_wrn.DummyModel.logpx_delta_score": [[375, 384], ["ebm_wrn.DummyModel.f", "ebm_wrn.DummyModel.refine", "ebm_wrn.DummyModel.f"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models.ebm_wrn.DummyModel.refine"], ["", "def", "logpx_delta_score", "(", "self", ",", "x", ",", "n_steps", "=", "None", ")", ":", "\n", "        ", "n_steps", "=", "self", ".", "n_steps_refine", "if", "n_steps", "is", "None", "else", "n_steps", "\n", "# difference in logprobs from input x and samples from a markov chain seeded at x", "\n", "#", "\n", "init_scores", "=", "self", ".", "f", "(", "x", ")", "\n", "x_r", "=", "self", ".", "refine", "(", "x", ",", "n_steps", "=", "n_steps", ")", "\n", "final_scores", "=", "self", ".", "f", "(", "x_r", ")", "\n", "# for real ref_data final_score is only slightly higher than init_score", "\n", "return", "init_scores", "-", "final_scores", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models.ebm_wrn.DummyModel.logp_grad_score": [[385, 387], ["ebm_wrn.DummyModel.grad_norm"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models.ebm_wrn.DummyModel.grad_norm"], ["", "def", "logp_grad_score", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "-", "self", ".", "grad_norm", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models.ebm_wrn.conv3x3": [[155, 157], ["torch.Conv2d"], "function", ["None"], ["", "", "def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models.ebm_wrn.conv_init": [[158, 166], ["classname.find", "torch.xavier_uniform", "torch.constant", "classname.find", "torch.constant", "torch.constant", "numpy.sqrt"], "function", ["None"], ["", "def", "conv_init", "(", "m", ")", ":", "\n", "    ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "if", "classname", ".", "find", "(", "'Conv'", ")", "!=", "-", "1", ":", "\n", "        ", "init", ".", "xavier_uniform", "(", "m", ".", "weight", ",", "gain", "=", "np", ".", "sqrt", "(", "2", ")", ")", "\n", "init", ".", "constant", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "elif", "classname", ".", "find", "(", "'BatchNorm'", ")", "!=", "-", "1", ":", "\n", "        ", "init", ".", "constant", "(", "m", ".", "weight", ",", "1", ")", "\n", "init", ".", "constant", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models.ebm_wrn.get_norm": [[199, 210], ["ebm_wrn.Identity", "torch.BatchNorm2d", "torch.InstanceNorm2d", "torch.GroupNorm", "ebm_wrn.ActNorm"], "function", ["None"], ["", "", "def", "get_norm", "(", "n_filters", ",", "norm", ")", ":", "\n", "    ", "if", "norm", "is", "None", ":", "\n", "        ", "return", "Identity", "(", ")", "\n", "", "elif", "norm", "==", "\"batch\"", ":", "\n", "        ", "return", "nn", ".", "BatchNorm2d", "(", "n_filters", ",", "momentum", "=", "0.9", ")", "\n", "", "elif", "norm", "==", "\"instance\"", ":", "\n", "        ", "return", "nn", ".", "InstanceNorm2d", "(", "n_filters", ",", "affine", "=", "True", ")", "\n", "", "elif", "norm", "==", "\"layer\"", ":", "\n", "        ", "return", "nn", ".", "GroupNorm", "(", "1", ",", "n_filters", ")", "\n", "", "elif", "norm", "==", "\"act\"", ":", "\n", "        ", "return", "ActNorm", "(", "n_filters", ",", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.big_transfer.models.StdConv2d.forward": [[27, 33], ["torch.var_mean", "torch.var_mean", "torch.var_mean", "torch.var_mean", "torch.var_mean", "torch.var_mean", "torch.var_mean", "torch.var_mean", "torch.var_mean", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt"], "methods", ["None"], ["\n", "", "def", "__add__", "(", "self", ",", "other", ")", ":", "\n", "        ", "return", "SumMetric", "(", "self", ",", "other", ")", "\n", "\n", "", "def", "__rmul__", "(", "self", ",", "scalar", ")", ":", "\n", "        ", "return", "ScaleMetric", "(", "scalar", ",", "self", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.big_transfer.models.PreActBottleneck.__init__": [[59, 75], ["torch.Module.__init__", "torch.GroupNorm", "torch.GroupNorm", "torch.GroupNorm", "models.conv1x1", "torch.GroupNorm", "torch.GroupNorm", "torch.GroupNorm", "models.conv3x3", "torch.GroupNorm", "torch.GroupNorm", "torch.GroupNorm", "models.conv1x1", "torch.ReLU", "torch.ReLU", "torch.ReLU", "models.conv1x1"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models_32x32.shake_pyramidnet.ShakePyramidNet.__init__", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.big_transfer.models.conv1x1", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models_32x32.pyramid.conv3x3", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.big_transfer.models.conv1x1", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.big_transfer.models.conv1x1"], ["self", ".", "norm_const", "=", "0.", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ",", "y", ",", "dim", "=", "None", ")", ":", "\n", "        ", "return", "(", "x", "-", "y", ")", ".", "norm", "(", "p", "=", "self", ".", "p", ",", "dim", "=", "dim", ")", "\n", "\n", "\n", "", "", "class", "PerceptualMetric", "(", "Metric", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "model", ",", "p", "=", "2", ",", "latent_dim", "=", "122880", ",", "indices", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "model", "=", "model", "\n", "self", ".", "p", "=", "p", "\n", "self", ".", "norm_const", "=", "0.", "\n", "\n", "self", ".", "latent_dim", "=", "latent_dim", "\n", "reduced_latent_dim", "=", "int", "(", "0.01", "*", "latent_dim", ")", "\n", "\n", "if", "indices", "is", "None", ":", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.big_transfer.models.PreActBottleneck.forward": [[76, 90], ["models.PreActBottleneck.relu", "hasattr", "models.PreActBottleneck.conv1", "models.PreActBottleneck.conv2", "models.PreActBottleneck.conv3", "models.PreActBottleneck.gn1", "models.PreActBottleneck.downsample", "models.PreActBottleneck.relu", "models.PreActBottleneck.relu", "models.PreActBottleneck.gn2", "models.PreActBottleneck.gn3"], "methods", ["None"], ["            ", "self", ".", "indices", "=", "sorted", "(", "np", ".", "random", ".", "choice", "(", "latent_dim", ",", "size", "=", "reduced_latent_dim", ",", "replace", "=", "False", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "indices", "=", "indices", "\n", "\n", "", "", "def", "forward", "(", "self", ",", "x", ",", "y", ",", "dim", "=", "None", ")", ":", "\n", "        ", "return", "(", "self", ".", "model", "(", "x", ")", "[", ":", ",", "self", ".", "indices", "]", "[", "None", ",", ":", ",", ":", "]", "\n", "-", "self", ".", "model", "(", "y", ")", "[", ":", ",", "self", ".", "indices", "]", "[", ":", ",", "None", ",", ":", "]", ")", ".", "norm", "(", "p", "=", "self", ".", "p", ",", "dim", "=", "dim", ")", "\n", "\n", "\n", "", "", "class", "PerceptualPCA", "(", "Metric", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "model", ",", "pca", ",", "indices", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "model", "=", "model", "\n", "\n", "self", ".", "pca", "=", "pca", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.big_transfer.models.PreActBottleneck.load_from": [[91, 106], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "models.PreActBottleneck.conv1.weight.copy_", "models.PreActBottleneck.conv2.weight.copy_", "models.PreActBottleneck.conv3.weight.copy_", "models.PreActBottleneck.gn1.weight.copy_", "models.PreActBottleneck.gn2.weight.copy_", "models.PreActBottleneck.gn3.weight.copy_", "models.PreActBottleneck.gn1.bias.copy_", "models.PreActBottleneck.gn2.bias.copy_", "models.PreActBottleneck.gn3.bias.copy_", "hasattr", "models.tf2th", "models.tf2th", "models.tf2th", "models.tf2th", "models.tf2th", "models.tf2th", "models.tf2th", "models.tf2th", "models.tf2th", "models.PreActBottleneck.downsample.weight.copy_", "models.tf2th"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.big_transfer.models.tf2th", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.big_transfer.models.tf2th", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.big_transfer.models.tf2th", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.big_transfer.models.tf2th", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.big_transfer.models.tf2th", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.big_transfer.models.tf2th", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.big_transfer.models.tf2th", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.big_transfer.models.tf2th", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.big_transfer.models.tf2th", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.big_transfer.models.tf2th"], ["\n", "if", "indices", "is", "None", ":", "\n", "            ", "self", ".", "indices", "=", "sorted", "(", "np", ".", "random", ".", "choice", "(", "latent_dim", ",", "size", "=", "reduced_latent_dim", ",", "replace", "=", "False", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "indices", "=", "indices", "\n", "\n", "\n", "", "", "def", "forward", "(", "self", ",", "x", ",", "y", ",", "dim", "=", "None", ")", ":", "\n", "        ", "return", "self", ".", "pca", "(", "self", ".", "model", "(", "x", ")", "[", ":", ",", "self", ".", "indices", "]", "[", "None", ",", ":", ",", ":", "]", ",", "\n", "self", ".", "model", "(", "y", ")", "[", ":", ",", "self", ".", "indices", "]", "[", ":", ",", "None", ",", ":", "]", ",", "dim", "=", "dim", ")", "\n", "\n", "\n", "", "", "class", "PCAMetric", "(", "Metric", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "X", ",", "p", "=", "2", ",", "min_sv_factor", "=", "100.", ",", "covar", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "p", "=", "p", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.big_transfer.models.ResNetV2.__init__": [[111, 151], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "collections.OrderedDict", "collections.OrderedDict", "collections.OrderedDict", "models.StdConv2d", "torch.ConstantPad2d", "torch.ConstantPad2d", "torch.ConstantPad2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.GroupNorm", "torch.GroupNorm", "torch.GroupNorm", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "collections.OrderedDict", "collections.OrderedDict", "collections.OrderedDict", "collections.OrderedDict", "models.PreActBottleneck", "models.PreActBottleneck", "range", "models.PreActBottleneck", "models.PreActBottleneck", "range", "models.PreActBottleneck", "models.PreActBottleneck", "range", "models.PreActBottleneck", "models.PreActBottleneck", "range"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models_32x32.shake_pyramidnet.ShakePyramidNet.__init__"], ["pca", ".", "fit", "(", "X", ")", "\n", "\n", "self", ".", "comp_vecs", "=", "nn", ".", "Parameter", "(", "torch", ".", "tensor", "(", "pca", ".", "components_", ")", ",", "requires_grad", "=", "False", ")", "\n", "self", ".", "singular_values", "=", "torch", ".", "tensor", "(", "pca", ".", "singular_values_", ")", "\n", "", "else", ":", "\n", "            ", "singular_values", ",", "comp_vecs", "=", "np", ".", "linalg", ".", "eig", "(", "covar", ")", "\n", "\n", "self", ".", "comp_vecs", "=", "nn", ".", "Parameter", "(", "torch", ".", "tensor", "(", "comp_vecs", ",", "dtype", "=", "torch", ".", "float", ")", ",", "requires_grad", "=", "False", ")", "\n", "self", ".", "singular_values", "=", "torch", ".", "tensor", "(", "singular_values", ",", "dtype", "=", "torch", ".", "float", ")", "\n", "\n", "", "self", ".", "min_sv", "=", "self", ".", "singular_values", "[", "0", "]", "/", "min_sv_factor", "\n", "self", ".", "singular_values", "[", "self", ".", "singular_values", "<", "self", ".", "min_sv", "]", "=", "self", ".", "min_sv", "\n", "self", ".", "singular_values", "=", "nn", ".", "Parameter", "(", "self", ".", "singular_values", ",", "requires_grad", "=", "False", ")", "\n", "self", ".", "singular_values_sqrt", "=", "nn", ".", "Parameter", "(", "self", ".", "singular_values", ".", "sqrt", "(", ")", ",", "requires_grad", "=", "False", ")", "\n", "\n", "self", ".", "norm_const", "=", "self", ".", "singular_values", ".", "log", "(", ")", ".", "sum", "(", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ",", "y", ",", "dim", "=", "None", ")", ":", "\n", "        ", "rotated_dist", "=", "torch", ".", "einsum", "(", "\"ijk,lk->ijl\"", ",", "(", "x", "-", "y", ",", "self", ".", "comp_vecs", ")", ")", "\n", "rescaled_dist", "=", "rotated_dist", "/", "self", ".", "singular_values_sqrt", "[", "None", ",", "None", ",", ":", "]", "\n", "return", "rescaled_dist", ".", "norm", "(", "dim", "=", "2", ",", "p", "=", "self", ".", "p", ")", "\n", "\n", "\n", "\n", "", "", "class", "MyPCA", "(", ")", ":", "\n", "    ", "'''\n        A helper class that is used for adversarial attacks in a Mahalanobis Metric\n    '''", "\n", "def", "__init__", "(", "self", ",", "comp_vecs", ",", "singular_values", ",", "shape", ")", ":", "\n", "        ", "self", ".", "comp_vecs", "=", "comp_vecs", "\n", "self", ".", "comp_vecs_inverse", "=", "self", ".", "comp_vecs", ".", "inverse", "(", ")", "\n", "self", ".", "singular_values", "=", "singular_values", "\n", "self", ".", "singular_values_sqrt", "=", "singular_values", ".", "sqrt", "(", ")", "\n", "self", ".", "shape", "=", "tuple", "(", "shape", ")", "\n", "self", ".", "D", "=", "torch", ".", "tensor", "(", "shape", ")", ".", "prod", "(", ")", ".", "item", "(", ")", "\n", "\n", "", "def", "inv_trans", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "(", "(", "x", "*", "self", ".", "singular_values_sqrt", "[", "None", ",", ":", "]", ")", "@", "self", ".", "comp_vecs_inverse", ")", "\n", "return", "x", ".", "view", "(", "tuple", "(", "[", "x", ".", "shape", "[", "0", "]", "]", ")", "+", "self", ".", "shape", ")", "\n", "\n", "", "def", "trans", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.big_transfer.models.ResNetV2.forward": [[153, 157], ["models.ResNetV2.head", "models.ResNetV2.body", "models.ResNetV2.root"], "methods", ["None"], ["return", "(", "(", "x", "@", "self", ".", "comp_vecs", ")", "/", "self", ".", "singular_values_sqrt", "[", "None", ",", ":", "]", ")", "\n", "\n", "\n", "", "", "class", "LeNet", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "normalize", "=", "True", ")", ":", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.big_transfer.models.ResNetV2.load_from": [[158, 173], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "models.ResNetV2.root.conv.weight.copy_", "models.ResNetV2.head.gn.weight.copy_", "models.ResNetV2.head.gn.bias.copy_", "models.ResNetV2.body.named_children", "models.tf2th", "models.tf2th", "models.tf2th", "torch.init.zeros_", "torch.init.zeros_", "torch.init.zeros_", "torch.init.zeros_", "torch.init.zeros_", "torch.init.zeros_", "models.ResNetV2.head.conv.weight.copy_", "models.ResNetV2.head.conv.bias.copy_", "block.named_children", "models.tf2th", "models.tf2th", "unit.load_from"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.big_transfer.models.tf2th", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.big_transfer.models.tf2th", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.big_transfer.models.tf2th", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.big_transfer.models.tf2th", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.big_transfer.models.tf2th", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.big_transfer.models.ResNetV2.load_from"], ["        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "1", ",", "32", ",", "5", ",", "1", ",", "padding", "=", "2", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "32", ",", "64", ",", "5", ",", "1", ",", "padding", "=", "2", ")", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "7", "*", "7", "*", "64", ",", "1024", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "1024", ",", "10", ")", "\n", "\n", "self", ".", "normalize", "=", "normalize", "\n", "self", ".", "mean", "=", "0.1307", "\n", "self", ".", "std", "=", "0.3081", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "normalize", ":", "\n", "            ", "x", "=", "(", "x", "-", "self", ".", "mean", ")", "/", "self", ".", "std", "\n", "", "x", "=", "F", ".", "relu", "(", "self", ".", "conv1", "(", "x", ")", ")", "\n", "x", "=", "F", ".", "max_pool2d", "(", "x", ",", "2", ",", "2", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "conv2", "(", "x", ")", ")", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.big_transfer.models.conv3x3": [[35, 38], ["models.StdConv2d"], "function", ["None"], ["", "", "class", "SumMetric", "(", "Metric", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "metric1", ",", "metric2", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "metric1", "=", "metric1", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.big_transfer.models.conv1x1": [[40, 43], ["models.StdConv2d"], "function", ["None"], ["\n", "", "def", "forward", "(", "self", ",", "x", ",", "y", ",", "dim", "=", "None", ")", ":", "\n", "        ", "return", "self", ".", "metric1", "(", "x", ",", "y", ",", "dim", "=", "dim", ")", "+", "self", ".", "metric2", "(", "x", ",", "y", ",", "dim", "=", "dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.big_transfer.models.tf2th": [[45, 50], ["torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "conv_weights.transpose.transpose"], "function", ["None"], ["", "", "class", "ScaleMetric", "(", "Metric", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "metric1", ",", "factor", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "metric1", "=", "metric1", "\n", "self", ".", "factor", "=", "factor", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models_32x32.fixup_resnet.FixupBasicBlock.__init__": [[19, 31], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "fixup_resnet.conv3x3", "torch.Parameter", "torch.Parameter", "torch.ReLU", "torch.ReLU", "torch.Parameter", "torch.Parameter", "fixup_resnet.conv3x3", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models_32x32.shake_pyramidnet.ShakePyramidNet.__init__", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models_32x32.pyramid.conv3x3", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models_32x32.pyramid.conv3x3"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "FixupBasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# Both self.conv1 and self.downsample layers downsample the input when stride != 1", "\n", "self", ".", "bias1a", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ")", ")", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bias1b", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ")", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "bias2a", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ")", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "scale", "=", "nn", ".", "Parameter", "(", "torch", ".", "ones", "(", "1", ")", ")", "\n", "self", ".", "bias2b", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ")", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models_32x32.fixup_resnet.FixupBasicBlock.forward": [[32, 49], ["fixup_resnet.FixupBasicBlock.conv1", "fixup_resnet.FixupBasicBlock.relu", "fixup_resnet.FixupBasicBlock.conv2", "fixup_resnet.FixupBasicBlock.relu", "fixup_resnet.FixupBasicBlock.downsample", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "identity", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", "+", "self", ".", "bias1a", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", "+", "self", ".", "bias1b", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", "+", "self", ".", "bias2a", ")", "\n", "out", "=", "out", "*", "self", ".", "scale", "+", "self", ".", "bias2b", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "identity", "=", "self", ".", "downsample", "(", "x", "+", "self", ".", "bias1a", ")", "\n", "identity", "=", "torch", ".", "cat", "(", "(", "identity", ",", "torch", ".", "zeros_like", "(", "identity", ")", ")", ",", "1", ")", "\n", "\n", "", "out", "+=", "identity", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models_32x32.fixup_resnet.FixupResNet.__init__": [[53, 74], ["torch.Module.__init__", "sum", "fixup_resnet.conv3x3", "torch.Parameter", "torch.Parameter", "torch.ReLU", "torch.ReLU", "fixup_resnet.FixupResNet._make_layer", "fixup_resnet.FixupResNet._make_layer", "fixup_resnet.FixupResNet._make_layer", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Parameter", "torch.Parameter", "torch.Linear", "torch.Linear", "fixup_resnet.FixupResNet.modules", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "isinstance", "torch.init.normal_", "torch.init.normal_", "torch.init.constant_", "torch.init.constant_", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "numpy.sqrt", "numpy.prod"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models_32x32.shake_pyramidnet.ShakePyramidNet.__init__", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models_32x32.pyramid.conv3x3", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models_32x32.shake_pyramidnet.ShakePyramidNet._make_layer", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models_32x32.shake_pyramidnet.ShakePyramidNet._make_layer", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models_32x32.shake_pyramidnet.ShakePyramidNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "layers", ",", "num_classes", "=", "10", ")", ":", "\n", "        ", "super", "(", "FixupResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_layers", "=", "sum", "(", "layers", ")", "\n", "self", ".", "inplanes", "=", "16", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "3", ",", "16", ")", "\n", "self", ".", "bias1", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ")", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "16", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "32", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "bias2", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ")", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "64", ",", "num_classes", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "FixupBasicBlock", ")", ":", "\n", "                ", "nn", ".", "init", ".", "normal_", "(", "m", ".", "conv1", ".", "weight", ",", "mean", "=", "0", ",", "std", "=", "np", ".", "sqrt", "(", "2", "/", "(", "m", ".", "conv1", ".", "weight", ".", "shape", "[", "0", "]", "*", "np", ".", "prod", "(", "m", ".", "conv1", ".", "weight", ".", "shape", "[", "2", ":", "]", ")", ")", ")", "*", "self", ".", "num_layers", "**", "(", "-", "0.5", ")", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "conv2", ".", "weight", ",", "0", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "0", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models_32x32.fixup_resnet.FixupResNet._make_layer": [[75, 87], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.AvgPool2d", "torch.AvgPool2d", "block", "layers.append", "block"], "methods", ["None"], ["", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", ":", "\n", "            ", "downsample", "=", "nn", ".", "AvgPool2d", "(", "1", ",", "stride", "=", "stride", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "\n", "for", "_", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "planes", ",", "planes", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models_32x32.fixup_resnet.FixupResNet.forward": [[88, 101], ["fixup_resnet.FixupResNet.conv1", "fixup_resnet.FixupResNet.relu", "fixup_resnet.FixupResNet.layer1", "fixup_resnet.FixupResNet.layer2", "fixup_resnet.FixupResNet.layer3", "fixup_resnet.FixupResNet.avgpool", "fixup_resnet.FixupResNet.view", "fixup_resnet.FixupResNet.fc", "fixup_resnet.FixupResNet.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", "+", "self", ".", "bias1", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "x", "=", "self", ".", "fc", "(", "x", "+", "self", ".", "bias2", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models_32x32.fixup_resnet.conv3x3": [[10, 14], ["torch.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"\"\"3x3 convolution with padding\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models_32x32.fixup_resnet.fixup_resnet20": [[103, 108], ["fixup_resnet.FixupResNet"], "function", ["None"], ["", "", "def", "fixup_resnet20", "(", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a Fixup-ResNet-20 density_model.\n    \"\"\"", "\n", "model", "=", "FixupResNet", "(", "FixupBasicBlock", ",", "[", "3", ",", "3", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models_32x32.fixup_resnet.fixup_resnet32": [[110, 115], ["fixup_resnet.FixupResNet"], "function", ["None"], ["", "def", "fixup_resnet32", "(", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a Fixup-ResNet-32 density_model.\n    \"\"\"", "\n", "model", "=", "FixupResNet", "(", "FixupBasicBlock", ",", "[", "5", ",", "5", ",", "5", "]", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models_32x32.fixup_resnet.fixup_resnet44": [[117, 122], ["fixup_resnet.FixupResNet"], "function", ["None"], ["", "def", "fixup_resnet44", "(", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a Fixup-ResNet-44 density_model.\n    \"\"\"", "\n", "model", "=", "FixupResNet", "(", "FixupBasicBlock", ",", "[", "7", ",", "7", ",", "7", "]", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models_32x32.fixup_resnet.fixup_resnet56": [[124, 129], ["fixup_resnet.FixupResNet"], "function", ["None"], ["", "def", "fixup_resnet56", "(", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a Fixup-ResNet-56 density_model.\n    \"\"\"", "\n", "model", "=", "FixupResNet", "(", "FixupBasicBlock", ",", "[", "9", ",", "9", ",", "9", "]", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models_32x32.fixup_resnet.fixup_resnet110": [[131, 136], ["fixup_resnet.FixupResNet"], "function", ["None"], ["", "def", "fixup_resnet110", "(", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a Fixup-ResNet-110 density_model.\n    \"\"\"", "\n", "model", "=", "FixupResNet", "(", "FixupBasicBlock", ",", "[", "18", ",", "18", ",", "18", "]", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models_32x32.fixup_resnet.fixup_resnet1202": [[138, 143], ["fixup_resnet.FixupResNet"], "function", ["None"], ["", "def", "fixup_resnet1202", "(", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a Fixup-ResNet-1202 density_model.\n    \"\"\"", "\n", "model", "=", "FixupResNet", "(", "FixupBasicBlock", ",", "[", "200", ",", "200", ",", "200", "]", ",", "**", "kwargs", ")", "\n", "return", "model", "", "", ""]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models_32x32.shakedrop.ShakeDropFunction.forward": [[10, 25], ["torch.empty().bernoulli_", "torch.empty().bernoulli_", "torch.empty().bernoulli_", "torch.empty().bernoulli_", "torch.empty().bernoulli_", "torch.empty().bernoulli_", "torch.empty().bernoulli_", "torch.empty().bernoulli_", "torch.empty().bernoulli_", "ctx.save_for_backward", "torch.empty().bernoulli_.item", "torch.empty().bernoulli_.item", "torch.empty().bernoulli_.item", "torch.empty().uniform_", "torch.empty().uniform_", "torch.empty().uniform_", "torch.empty().uniform_", "torch.empty().uniform_", "torch.empty().uniform_", "torch.empty().uniform_", "torch.empty().uniform_", "torch.empty().uniform_", "alpha.view().expand_as.view().expand_as.view().expand_as", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "alpha.view().expand_as.view().expand_as.view", "x.size", "alpha.view().expand_as.view().expand_as.size"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "x", ",", "training", "=", "True", ",", "p_drop", "=", "0.5", ",", "alpha_range", "=", "[", "-", "1", ",", "1", "]", ")", ":", "\n", "        ", "ctx", ".", "training", "=", "training", "\n", "ctx", ".", "p_drop", "=", "p_drop", "\n", "if", "training", ":", "\n", "            ", "gate", "=", "torch", ".", "empty", "(", "1", ",", "device", "=", "x", ".", "device", ")", ".", "bernoulli_", "(", "1", "-", "p_drop", ")", "\n", "ctx", ".", "save_for_backward", "(", "gate", ")", "\n", "if", "gate", ".", "item", "(", ")", "==", "0", ":", "\n", "                ", "alpha", "=", "torch", ".", "empty", "(", "x", ".", "size", "(", "0", ")", ",", "device", "=", "x", ".", "device", ")", ".", "uniform_", "(", "*", "alpha_range", ")", "\n", "alpha", "=", "alpha", ".", "view", "(", "alpha", ".", "size", "(", "0", ")", ",", "1", ",", "1", ",", "1", ")", ".", "expand_as", "(", "x", ")", "\n", "return", "alpha", "*", "x", "\n", "", "else", ":", "\n", "                ", "return", "x", "\n", "", "", "else", ":", "\n", "            ", "return", "(", "1", "-", "p_drop", ")", "*", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models_32x32.shakedrop.ShakeDropFunction.backward": [[26, 41], ["gate.item", "torch.empty().uniform_", "torch.empty().uniform_", "torch.empty().uniform_", "torch.empty().uniform_", "torch.empty().uniform_", "torch.empty().uniform_", "torch.empty().uniform_", "torch.empty().uniform_", "torch.empty().uniform_", "torch.autograd.Variable.view().expand_as", "torch.autograd.Variable.view().expand_as", "torch.autograd.Variable.view().expand_as", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.autograd.Variable.view", "torch.autograd.Variable.view", "torch.autograd.Variable.view", "grad_output.size", "torch.autograd.Variable.size", "torch.autograd.Variable.size", "torch.autograd.Variable.size"], "methods", ["None"], ["", "", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "grad_output", ")", ":", "\n", "        ", "training", "=", "ctx", ".", "training", "\n", "p_drop", "=", "ctx", ".", "p_drop", "\n", "if", "training", ":", "\n", "            ", "gate", "=", "ctx", ".", "saved_tensors", "[", "0", "]", "\n", "if", "gate", ".", "item", "(", ")", "==", "0", ":", "\n", "                ", "beta", "=", "torch", ".", "empty", "(", "grad_output", ".", "size", "(", "0", ")", ",", "device", "=", "grad_output", ".", "device", ")", ".", "uniform_", "(", "0", ",", "1", ")", "\n", "beta", "=", "beta", ".", "view", "(", "beta", ".", "size", "(", "0", ")", ",", "1", ",", "1", ",", "1", ")", ".", "expand_as", "(", "grad_output", ")", "\n", "beta", "=", "Variable", "(", "beta", ")", "\n", "return", "beta", "*", "grad_output", ",", "None", ",", "None", ",", "None", "\n", "", "else", ":", "\n", "                ", "return", "grad_output", ",", "None", ",", "None", ",", "None", "\n", "", "", "else", ":", "\n", "            ", "return", "(", "1", "-", "p_drop", ")", "*", "grad_output", ",", "None", ",", "None", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models_32x32.shakedrop.ShakeDrop.__init__": [[45, 49], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models_32x32.shake_pyramidnet.ShakePyramidNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "p_drop", "=", "0.5", ",", "alpha_range", "=", "[", "-", "1", ",", "1", "]", ")", ":", "\n", "        ", "super", "(", "ShakeDrop", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "p_drop", "=", "p_drop", "\n", "self", ".", "alpha_range", "=", "alpha_range", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models_32x32.shakedrop.ShakeDrop.forward": [[50, 52], ["ShakeDropFunction.apply"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "ShakeDropFunction", ".", "apply", "(", "x", ",", "self", ".", "training", ",", "self", ".", "p_drop", ",", "self", ".", "alpha_range", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models_32x32.pyramid.BasicBlock.__init__": [[60, 71], ["torch.Module.__init__", "torch.BatchNorm2d", "torch.BatchNorm2d", "pyramid.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "pyramid.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "shakedrop.ShakeDrop"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models_32x32.shake_pyramidnet.ShakePyramidNet.__init__", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models_32x32.pyramid.conv3x3", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models_32x32.pyramid.conv3x3"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ",", "p_shakedrop", "=", "1.0", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "inplanes", ")", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "self", ".", "shake_drop", "=", "ShakeDrop", "(", "p_shakedrop", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models_32x32.pyramid.BasicBlock.forward": [[72, 105], ["pyramid.BasicBlock.bn1", "pyramid.BasicBlock.conv1", "pyramid.BasicBlock.bn2", "pyramid.BasicBlock.relu", "pyramid.BasicBlock.conv2", "pyramid.BasicBlock.bn3", "pyramid.BasicBlock.shake_drop().clone", "pyramid.BasicBlock.downsample", "pyramid.BasicBlock.size", "pyramid.BasicBlock.size", "pyramid.BasicBlock.size", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "pyramid.BasicBlock.shake_drop", "pyramid.BasicBlock.size", "pyramid.BasicBlock.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\n", "        ", "out", "=", "self", ".", "bn1", "(", "x", ")", "\n", "out", "=", "self", ".", "conv1", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "shake_drop", "(", "out", ")", ".", "clone", "(", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "shortcut", "=", "self", ".", "downsample", "(", "x", ")", "\n", "featuremap_size", "=", "shortcut", ".", "size", "(", ")", "[", "2", ":", "4", "]", "\n", "", "else", ":", "\n", "            ", "shortcut", "=", "x", "\n", "featuremap_size", "=", "out", ".", "size", "(", ")", "[", "2", ":", "4", "]", "\n", "\n", "", "batch_size", "=", "out", ".", "size", "(", ")", "[", "0", "]", "\n", "residual_channel", "=", "out", ".", "size", "(", ")", "[", "1", "]", "\n", "shortcut_channel", "=", "shortcut", ".", "size", "(", ")", "[", "1", "]", "\n", "\n", "if", "residual_channel", "!=", "shortcut_channel", ":", "\n", "# padding = torch.autograd.Variable(", "\n", "#     torch.cuda.FloatTensor(batch_size, residual_channel - shortcut_channel, featuremap_size[0],", "\n", "#                            featuremap_size[1]).fill_(0))", "\n", "            ", "padding", "=", "torch", ".", "zeros", "(", "(", "batch_size", ",", "residual_channel", "-", "shortcut_channel", ",", "featuremap_size", "[", "0", "]", ",", "\n", "featuremap_size", "[", "1", "]", ")", ",", "device", "=", "x", ".", "device", ")", "\n", "out", "+=", "torch", ".", "cat", "(", "(", "shortcut", ",", "padding", ")", ",", "1", ")", "\n", "", "else", ":", "\n", "            ", "out", "+=", "shortcut", "\n", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models_32x32.pyramid.Bottleneck.__init__": [[110, 124], ["torch.Module.__init__", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "shakedrop.ShakeDrop"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models_32x32.shake_pyramidnet.ShakePyramidNet.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ",", "p_shakedrop", "=", "1.0", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "inplanes", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "(", "planes", "*", "1", ")", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "(", "planes", "*", "1", ")", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "(", "planes", "*", "1", ")", ",", "planes", "*", "Bottleneck", ".", "outchannel_ratio", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn4", "=", "nn", ".", "BatchNorm2d", "(", "planes", "*", "Bottleneck", ".", "outchannel_ratio", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "self", ".", "shake_drop", "=", "ShakeDrop", "(", "p_shakedrop", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models_32x32.pyramid.Bottleneck.forward": [[125, 164], ["pyramid.Bottleneck.bn1", "pyramid.Bottleneck.conv1", "pyramid.Bottleneck.bn2", "pyramid.Bottleneck.relu", "pyramid.Bottleneck.conv2", "pyramid.Bottleneck.bn3", "pyramid.Bottleneck.relu", "pyramid.Bottleneck.conv3", "pyramid.Bottleneck.bn4", "pyramid.Bottleneck.shake_drop().clone", "pyramid.Bottleneck.downsample", "pyramid.Bottleneck.size", "pyramid.Bottleneck.size", "pyramid.Bottleneck.size", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "pyramid.Bottleneck.shake_drop", "pyramid.Bottleneck.size", "pyramid.Bottleneck.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\n", "        ", "out", "=", "self", ".", "bn1", "(", "x", ")", "\n", "out", "=", "self", ".", "conv1", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "bn4", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "shake_drop", "(", "out", ")", ".", "clone", "(", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "shortcut", "=", "self", ".", "downsample", "(", "x", ")", "\n", "featuremap_size", "=", "shortcut", ".", "size", "(", ")", "[", "2", ":", "4", "]", "\n", "", "else", ":", "\n", "            ", "shortcut", "=", "x", "\n", "featuremap_size", "=", "out", ".", "size", "(", ")", "[", "2", ":", "4", "]", "\n", "\n", "", "batch_size", "=", "out", ".", "size", "(", ")", "[", "0", "]", "\n", "residual_channel", "=", "out", ".", "size", "(", ")", "[", "1", "]", "\n", "shortcut_channel", "=", "shortcut", ".", "size", "(", ")", "[", "1", "]", "\n", "\n", "if", "residual_channel", "!=", "shortcut_channel", ":", "\n", "#padding = torch.autograd.Variable(", "\n", "# torch.cuda.FloatTensor(batch_size, residual_channel - shortcut_channel, featuremap_size[0],", "\n", "#                        featuremap_size[1]).fill_(0))", "\n", "            ", "padding", "=", "torch", ".", "zeros", "(", "(", "batch_size", ",", "residual_channel", "-", "shortcut_channel", ",", "featuremap_size", "[", "0", "]", ",", "\n", "featuremap_size", "[", "1", "]", ")", ",", "dtype", "=", "torch", ".", "float", ",", "device", "=", "x", ".", "device", ")", "\n", "out", "+=", "torch", ".", "cat", "(", "(", "shortcut", ",", "padding", ")", ",", "1", ")", "\n", "", "else", ":", "\n", "            ", "out", "+=", "shortcut", "\n", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models_32x32.pyramid.aa_PyramidNet.__init__": [[167, 243], ["torch.Module.__init__", "pyramid.aa_PyramidNet.dataset.startswith", "pyramid.aa_PyramidNet.modules", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "pyramid.aa_PyramidNet.pyramidal_make_layer", "pyramid.aa_PyramidNet.pyramidal_make_layer", "pyramid.aa_PyramidNet.pyramidal_make_layer", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.AvgPool2d", "torch.AvgPool2d", "torch.Linear", "torch.Linear", "isinstance", "len", "int", "int", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "pyramid.aa_PyramidNet.pyramidal_make_layer", "pyramid.aa_PyramidNet.pyramidal_make_layer", "pyramid.aa_PyramidNet.pyramidal_make_layer", "pyramid.aa_PyramidNet.pyramidal_make_layer", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.AvgPool2d", "torch.AvgPool2d", "torch.Linear", "torch.Linear", "m.weight.data.normal_", "isinstance", "range", "layers.get", "print", "math.sqrt", "m.weight.data.fill_", "m.bias.data.zero_", "int", "int", "sum"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models_32x32.shake_pyramidnet.ShakePyramidNet.__init__", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models_32x32.pyramid.aa_PyramidNet.pyramidal_make_layer", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models_32x32.pyramid.aa_PyramidNet.pyramidal_make_layer", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models_32x32.pyramid.aa_PyramidNet.pyramidal_make_layer", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models_32x32.pyramid.aa_PyramidNet.pyramidal_make_layer", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models_32x32.pyramid.aa_PyramidNet.pyramidal_make_layer", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models_32x32.pyramid.aa_PyramidNet.pyramidal_make_layer", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models_32x32.pyramid.aa_PyramidNet.pyramidal_make_layer"], ["    ", "def", "__init__", "(", "self", ",", "dataset", "=", "'cifar10'", ",", "depth", "=", "272", ",", "alpha", "=", "200", ",", "num_classes", "=", "10", ",", "bottleneck", "=", "True", ")", ":", "\n", "        ", "super", "(", "aa_PyramidNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dataset", "=", "dataset", "\n", "if", "self", ".", "dataset", ".", "startswith", "(", "'cifar'", ")", ":", "\n", "            ", "self", ".", "inplanes", "=", "16", "\n", "if", "bottleneck", ":", "\n", "                ", "n", "=", "int", "(", "(", "depth", "-", "2", ")", "/", "9", ")", "\n", "block", "=", "Bottleneck", "\n", "", "else", ":", "\n", "                ", "n", "=", "int", "(", "(", "depth", "-", "2", ")", "/", "6", ")", "\n", "block", "=", "BasicBlock", "\n", "\n", "", "self", ".", "addrate", "=", "alpha", "/", "(", "3", "*", "n", "*", "1.0", ")", "\n", "self", ".", "ps_shakedrop", "=", "[", "1.", "-", "(", "1.0", "-", "(", "0.5", "/", "(", "3", "*", "n", ")", ")", "*", "(", "i", "+", "1", ")", ")", "for", "i", "in", "range", "(", "3", "*", "n", ")", "]", "\n", "\n", "self", ".", "input_featuremap_dim", "=", "self", ".", "inplanes", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "self", ".", "input_featuremap_dim", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "self", ".", "input_featuremap_dim", ")", "\n", "\n", "self", ".", "featuremap_dim", "=", "self", ".", "input_featuremap_dim", "\n", "self", ".", "layer1", "=", "self", ".", "pyramidal_make_layer", "(", "block", ",", "n", ")", "\n", "self", ".", "layer2", "=", "self", ".", "pyramidal_make_layer", "(", "block", ",", "n", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "pyramidal_make_layer", "(", "block", ",", "n", ",", "stride", "=", "2", ")", "\n", "\n", "self", ".", "final_featuremap_dim", "=", "self", ".", "input_featuremap_dim", "\n", "self", ".", "bn_final", "=", "nn", ".", "BatchNorm2d", "(", "self", ".", "final_featuremap_dim", ")", "\n", "self", ".", "relu_final", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AvgPool2d", "(", "8", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "self", ".", "final_featuremap_dim", ",", "num_classes", ")", "\n", "\n", "", "elif", "dataset", "==", "'imagenet'", ":", "\n", "            ", "blocks", "=", "{", "18", ":", "BasicBlock", ",", "34", ":", "BasicBlock", ",", "50", ":", "Bottleneck", ",", "101", ":", "Bottleneck", ",", "152", ":", "Bottleneck", ",", "200", ":", "Bottleneck", "}", "\n", "layers", "=", "{", "18", ":", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "34", ":", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "50", ":", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "101", ":", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "152", ":", "[", "3", ",", "8", ",", "36", ",", "3", "]", ",", "\n", "200", ":", "[", "3", ",", "24", ",", "36", ",", "3", "]", "}", "\n", "\n", "if", "layers", ".", "get", "(", "depth", ")", "is", "None", ":", "\n", "                ", "if", "bottleneck", "==", "True", ":", "\n", "                    ", "blocks", "[", "depth", "]", "=", "Bottleneck", "\n", "temp_cfg", "=", "int", "(", "(", "depth", "-", "2", ")", "/", "12", ")", "\n", "", "else", ":", "\n", "                    ", "blocks", "[", "depth", "]", "=", "BasicBlock", "\n", "temp_cfg", "=", "int", "(", "(", "depth", "-", "2", ")", "/", "8", ")", "\n", "\n", "", "layers", "[", "depth", "]", "=", "[", "temp_cfg", ",", "temp_cfg", ",", "temp_cfg", ",", "temp_cfg", "]", "\n", "print", "(", "'=> the layer configuration for each stage is set to'", ",", "layers", "[", "depth", "]", ")", "\n", "\n", "", "self", ".", "inplanes", "=", "64", "\n", "self", ".", "addrate", "=", "alpha", "/", "(", "sum", "(", "layers", "[", "depth", "]", ")", "*", "1.0", ")", "\n", "\n", "self", ".", "input_featuremap_dim", "=", "self", ".", "inplanes", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "self", ".", "input_featuremap_dim", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "self", ".", "input_featuremap_dim", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "\n", "self", ".", "featuremap_dim", "=", "self", ".", "input_featuremap_dim", "\n", "self", ".", "layer1", "=", "self", ".", "pyramidal_make_layer", "(", "blocks", "[", "depth", "]", ",", "layers", "[", "depth", "]", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "pyramidal_make_layer", "(", "blocks", "[", "depth", "]", ",", "layers", "[", "depth", "]", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "pyramidal_make_layer", "(", "blocks", "[", "depth", "]", ",", "layers", "[", "depth", "]", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "pyramidal_make_layer", "(", "blocks", "[", "depth", "]", ",", "layers", "[", "depth", "]", "[", "3", "]", ",", "stride", "=", "2", ")", "\n", "\n", "self", ".", "final_featuremap_dim", "=", "self", ".", "input_featuremap_dim", "\n", "self", ".", "bn_final", "=", "nn", ".", "BatchNorm2d", "(", "self", ".", "final_featuremap_dim", ")", "\n", "self", ".", "relu_final", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AvgPool2d", "(", "7", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "self", ".", "final_featuremap_dim", ",", "num_classes", ")", "\n", "\n", "", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n", "", "", "assert", "len", "(", "self", ".", "ps_shakedrop", ")", "==", "0", ",", "self", ".", "ps_shakedrop", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models_32x32.pyramid.aa_PyramidNet.pyramidal_make_layer": [[244, 262], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.AvgPool2d", "torch.AvgPool2d", "block", "layers.append", "int", "int", "block", "round", "round", "pyramid.aa_PyramidNet.ps_shakedrop.pop", "int", "int", "round", "pyramid.aa_PyramidNet.ps_shakedrop.pop", "round"], "methods", ["None"], ["", "def", "pyramidal_make_layer", "(", "self", ",", "block", ",", "block_depth", ",", "stride", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", ":", "# or self.inplanes != int(round(featuremap_dim_1st)) * block.outchannel_ratio:", "\n", "            ", "downsample", "=", "nn", ".", "AvgPool2d", "(", "(", "2", ",", "2", ")", ",", "stride", "=", "(", "2", ",", "2", ")", ",", "ceil_mode", "=", "True", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "self", ".", "featuremap_dim", "=", "self", ".", "featuremap_dim", "+", "self", ".", "addrate", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "input_featuremap_dim", ",", "int", "(", "round", "(", "self", ".", "featuremap_dim", ")", ")", ",", "stride", ",", "downsample", ",", "\n", "p_shakedrop", "=", "self", ".", "ps_shakedrop", ".", "pop", "(", "0", ")", ")", ")", "\n", "for", "i", "in", "range", "(", "1", ",", "block_depth", ")", ":", "\n", "            ", "temp_featuremap_dim", "=", "self", ".", "featuremap_dim", "+", "self", ".", "addrate", "\n", "layers", ".", "append", "(", "\n", "block", "(", "int", "(", "round", "(", "self", ".", "featuremap_dim", ")", ")", "*", "block", ".", "outchannel_ratio", ",", "int", "(", "round", "(", "temp_featuremap_dim", ")", ")", ",", "1", ",", "\n", "p_shakedrop", "=", "self", ".", "ps_shakedrop", ".", "pop", "(", "0", ")", ")", ")", "\n", "self", ".", "featuremap_dim", "=", "temp_featuremap_dim", "\n", "", "self", ".", "input_featuremap_dim", "=", "int", "(", "round", "(", "self", ".", "featuremap_dim", ")", ")", "*", "block", ".", "outchannel_ratio", "\n", "\n", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models_32x32.pyramid.aa_PyramidNet.forward": [[263, 296], ["pyramid.aa_PyramidNet.conv1", "pyramid.aa_PyramidNet.bn1", "pyramid.aa_PyramidNet.layer1", "pyramid.aa_PyramidNet.layer2", "pyramid.aa_PyramidNet.layer3", "pyramid.aa_PyramidNet.bn_final", "pyramid.aa_PyramidNet.relu_final", "pyramid.aa_PyramidNet.avgpool", "pyramid.aa_PyramidNet.view", "pyramid.aa_PyramidNet.fc", "pyramid.aa_PyramidNet.size", "pyramid.aa_PyramidNet.conv1", "pyramid.aa_PyramidNet.bn1", "pyramid.aa_PyramidNet.relu", "pyramid.aa_PyramidNet.maxpool", "pyramid.aa_PyramidNet.layer1", "pyramid.aa_PyramidNet.layer2", "pyramid.aa_PyramidNet.layer3", "pyramid.aa_PyramidNet.layer4", "pyramid.aa_PyramidNet.bn_final", "pyramid.aa_PyramidNet.relu_final", "pyramid.aa_PyramidNet.avgpool", "pyramid.aa_PyramidNet.view", "pyramid.aa_PyramidNet.fc", "pyramid.aa_PyramidNet.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "dataset", "==", "'cifar10'", "or", "self", ".", "dataset", "==", "'cifar100'", ":", "\n", "            ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "bn_final", "(", "x", ")", "\n", "x", "=", "self", ".", "relu_final", "(", "x", ")", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "\n", "", "elif", "self", ".", "dataset", "==", "'imagenet'", ":", "\n", "            ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "bn_final", "(", "x", ")", "\n", "x", "=", "self", ".", "relu_final", "(", "x", ")", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "\n", "", "return", "x", "", "", "", ""]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models_32x32.pyramid.conv3x3": [[50, 55], ["torch.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"\"\"\n    3x3 convolution with padding\n    \"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models_32x32.wide_resnet.Swish.forward": [[14, 17], ["torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid"], "methods", ["None"], ["@", "staticmethod", "\n", "def", "forward", "(", "x", ")", ":", "\n", "        ", "return", "x", "*", "torch", ".", "sigmoid", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models_32x32.wide_resnet.BasicBlock.__init__": [[27, 40], ["torch.Module.__init__", "wide_resnet.get_activation", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models_32x32.shake_pyramidnet.ShakePyramidNet.__init__", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models_32x32.wide_resnet.get_activation"], ["    ", "def", "__init__", "(", "self", ",", "in_planes", ",", "out_planes", ",", "stride", ",", "activation", "=", "'relu'", ",", "dropRate", "=", "0.0", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "activation", "=", "get_activation", "(", "activation", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "in_planes", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "out_planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "out_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "droprate", "=", "dropRate", "\n", "self", ".", "equalInOut", "=", "(", "in_planes", "==", "out_planes", ")", "\n", "self", ".", "convShortcut", "=", "(", "not", "self", ".", "equalInOut", ")", "and", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "0", ",", "bias", "=", "False", ")", "or", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models_32x32.wide_resnet.BasicBlock.forward": [[41, 51], ["wide_resnet.BasicBlock.activation", "wide_resnet.BasicBlock.conv2", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "wide_resnet.BasicBlock.activation", "wide_resnet.BasicBlock.activation", "wide_resnet.BasicBlock.bn2", "torch.dropout", "torch.dropout", "torch.dropout", "wide_resnet.BasicBlock.bn1", "wide_resnet.BasicBlock.bn1", "wide_resnet.BasicBlock.conv1", "wide_resnet.BasicBlock.convShortcut"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "not", "self", ".", "equalInOut", ":", "\n", "            ", "x", "=", "self", ".", "activation", "(", "self", ".", "bn1", "(", "x", ")", ")", "\n", "", "else", ":", "\n", "            ", "out", "=", "self", ".", "activation", "(", "self", ".", "bn1", "(", "x", ")", ")", "\n", "", "out", "=", "self", ".", "activation", "(", "self", ".", "bn2", "(", "self", ".", "conv1", "(", "out", "if", "self", ".", "equalInOut", "else", "x", ")", ")", ")", "\n", "if", "self", ".", "droprate", ">", "0", ":", "\n", "            ", "out", "=", "F", ".", "dropout", "(", "out", ",", "p", "=", "self", ".", "droprate", ",", "training", "=", "self", ".", "training", ")", "\n", "", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "return", "torch", ".", "add", "(", "x", "if", "self", ".", "equalInOut", "else", "self", ".", "convShortcut", "(", "x", ")", ",", "out", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models_32x32.wide_resnet.NetworkBlock.__init__": [[53, 56], ["torch.Module.__init__", "wide_resnet.NetworkBlock._make_layer"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models_32x32.shake_pyramidnet.ShakePyramidNet.__init__", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models_32x32.shake_pyramidnet.ShakePyramidNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "nb_layers", ",", "in_planes", ",", "out_planes", ",", "block", ",", "stride", ",", "activation", ",", "dropRate", "=", "0.0", ")", ":", "\n", "        ", "super", "(", "NetworkBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "layer", "=", "self", ".", "_make_layer", "(", "block", ",", "in_planes", ",", "out_planes", ",", "nb_layers", ",", "stride", ",", "activation", ",", "dropRate", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models_32x32.wide_resnet.NetworkBlock._make_layer": [[57, 62], ["range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "int", "layers.append", "block"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ",", "block", ",", "in_planes", ",", "out_planes", ",", "nb_layers", ",", "stride", ",", "activation", ",", "dropRate", ")", ":", "\n", "        ", "layers", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "int", "(", "nb_layers", ")", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "i", "==", "0", "and", "in_planes", "or", "out_planes", ",", "out_planes", ",", "i", "==", "0", "and", "stride", "or", "1", ",", "activation", ",", "dropRate", ")", ")", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models_32x32.wide_resnet.NetworkBlock.forward": [[62, 64], ["wide_resnet.NetworkBlock.layer"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "layer", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models_32x32.wide_resnet.WideResNet.__init__": [[66, 96], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "wide_resnet.NetworkBlock", "wide_resnet.NetworkBlock", "wide_resnet.NetworkBlock", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "wide_resnet.get_activation", "torch.Linear", "torch.Linear", "torch.Linear", "wide_resnet.WideResNet.modules", "isinstance", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "isinstance", "m.weight.data.fill_", "m.bias.data.zero_", "isinstance", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models_32x32.shake_pyramidnet.ShakePyramidNet.__init__", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models_32x32.wide_resnet.get_activation"], ["    ", "def", "__init__", "(", "self", ",", "depth", ",", "num_classes", ",", "widen_factor", "=", "1", ",", "activation", "=", "'relu'", ",", "dropRate", "=", "0.0", ",", "return_feature_map", "=", "False", ")", ":", "\n", "        ", "super", "(", "WideResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "return_feature_map", "=", "return_feature_map", "\n", "nChannels", "=", "[", "16", ",", "16", "*", "widen_factor", ",", "32", "*", "widen_factor", ",", "64", "*", "widen_factor", "]", "\n", "assert", "(", "(", "depth", "-", "4", ")", "%", "6", "==", "0", ")", "\n", "n", "=", "(", "depth", "-", "4", ")", "/", "6", "\n", "block", "=", "BasicBlock", "\n", "# 1st conv before any network block", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "nChannels", "[", "0", "]", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "# 1st block", "\n", "self", ".", "block1", "=", "NetworkBlock", "(", "n", ",", "nChannels", "[", "0", "]", ",", "nChannels", "[", "1", "]", ",", "block", ",", "1", ",", "activation", ",", "dropRate", ")", "\n", "# 2nd block", "\n", "self", ".", "block2", "=", "NetworkBlock", "(", "n", ",", "nChannels", "[", "1", "]", ",", "nChannels", "[", "2", "]", ",", "block", ",", "2", ",", "activation", ",", "dropRate", ")", "\n", "# 3rd block", "\n", "self", ".", "block3", "=", "NetworkBlock", "(", "n", ",", "nChannels", "[", "2", "]", ",", "nChannels", "[", "3", "]", ",", "block", ",", "2", ",", "activation", ",", "dropRate", ")", "\n", "# global average pooling and classifier", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "nChannels", "[", "3", "]", ")", "\n", "self", ".", "activation", "=", "get_activation", "(", "activation", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "nChannels", "[", "3", "]", ",", "num_classes", ")", "\n", "self", ".", "nChannels", "=", "nChannels", "[", "3", "]", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ",", "nonlinearity", "=", "'relu'", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "                ", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models_32x32.wide_resnet.WideResNet.forward": [[97, 110], ["wide_resnet.WideResNet.conv1", "wide_resnet.WideResNet.block1", "wide_resnet.WideResNet.block2", "wide_resnet.WideResNet.block3", "wide_resnet.WideResNet.activation", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "out.view.view.view", "wide_resnet.WideResNet.bn1", "wide_resnet.WideResNet.fc"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "block1", "(", "out", ")", "\n", "out", "=", "self", ".", "block2", "(", "out", ")", "\n", "out", "=", "self", ".", "block3", "(", "out", ")", "\n", "out", "=", "self", ".", "activation", "(", "self", ".", "bn1", "(", "out", ")", ")", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "8", ")", "\n", "out", "=", "out", ".", "view", "(", "-", "1", ",", "self", ".", "nChannels", ")", "\n", "\n", "if", "self", ".", "return_feature_map", ":", "\n", "            ", "return", "out", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "fc", "(", "out", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models_32x32.wide_resnet.get_activation": [[18, 25], ["torch.ReLU", "wide_resnet.Swish", "NotImplementedError"], "function", ["None"], ["", "", "def", "get_activation", "(", "activation", ")", ":", "\n", "    ", "if", "activation", "==", "'relu'", ":", "\n", "        ", "return", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", "\n", "", "elif", "activation", "==", "'swish'", ":", "\n", "        ", "return", "Swish", "(", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models_32x32.wide_resnet.WideResNet28x10": [[111, 113], ["wide_resnet.WideResNet"], "function", ["None"], ["", "", "", "def", "WideResNet28x10", "(", "num_classes", "=", "10", ",", "activation", "=", "'relu'", ",", "dropRate", "=", "0.0", ",", "return_feature_map", "=", "False", ")", ":", "\n", "     ", "return", "WideResNet", "(", "28", ",", "num_classes", ",", "10", ",", "activation", "=", "activation", ",", "dropRate", "=", "dropRate", ",", "return_feature_map", "=", "return_feature_map", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models_32x32.wide_resnet.WideResNet28x2": [[114, 116], ["wide_resnet.WideResNet"], "function", ["None"], ["", "def", "WideResNet28x2", "(", "num_classes", "=", "10", ",", "activation", "=", "'relu'", ",", "dropRate", "=", "0.0", ",", "return_feature_map", "=", "False", ")", ":", "\n", "     ", "return", "WideResNet", "(", "28", ",", "num_classes", ",", "2", ",", "activation", "=", "activation", ",", "dropRate", "=", "dropRate", ",", "return_feature_map", "=", "return_feature_map", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models_32x32.wide_resnet.WideResNet28x20": [[117, 119], ["wide_resnet.WideResNet"], "function", ["None"], ["", "def", "WideResNet28x20", "(", "num_classes", "=", "10", ",", "activation", "=", "'relu'", ",", "dropRate", "=", "0.0", ",", "return_feature_map", "=", "False", ")", ":", "\n", "    ", "return", "WideResNet", "(", "28", ",", "num_classes", ",", "20", ",", "activation", "=", "activation", ",", "dropRate", "=", "dropRate", ",", "return_feature_map", "=", "return_feature_map", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models_32x32.wide_resnet.WideResNet34x10": [[120, 122], ["wide_resnet.WideResNet"], "function", ["None"], ["", "def", "WideResNet34x10", "(", "num_classes", "=", "10", ",", "activation", "=", "'relu'", ",", "dropRate", "=", "0.0", ",", "return_feature_map", "=", "False", ")", ":", "\n", "    ", "return", "WideResNet", "(", "34", ",", "num_classes", ",", "10", ",", "activation", "=", "activation", ",", "dropRate", "=", "dropRate", ",", "return_feature_map", "=", "return_feature_map", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models_32x32.wide_resnet.WideResNet34x20": [[123, 125], ["wide_resnet.WideResNet"], "function", ["None"], ["", "def", "WideResNet34x20", "(", "num_classes", "=", "10", ",", "activation", "=", "'relu'", ",", "dropRate", "=", "0.0", ",", "return_feature_map", "=", "False", ")", ":", "\n", "    ", "return", "WideResNet", "(", "34", ",", "num_classes", ",", "20", ",", "activation", "=", "activation", ",", "dropRate", "=", "dropRate", ",", "return_feature_map", "=", "return_feature_map", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models_32x32.wide_resnet.WideResNet40x10": [[126, 128], ["wide_resnet.WideResNet"], "function", ["None"], ["", "def", "WideResNet40x10", "(", "num_classes", "=", "10", ",", "activation", "=", "'relu'", ",", "dropRate", "=", "0.0", ",", "return_feature_map", "=", "False", ")", ":", "\n", "    ", "return", "WideResNet", "(", "40", ",", "num_classes", ",", "10", ",", "activation", "=", "activation", ",", "dropRate", "=", "dropRate", ",", "return_feature_map", "=", "return_feature_map", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models_32x32.wide_resnet.WideResNet70x16": [[129, 131], ["wide_resnet.WideResNet"], "function", ["None"], ["", "def", "WideResNet70x16", "(", "num_classes", "=", "10", ",", "activation", "=", "'relu'", ",", "dropRate", "=", "0.0", ",", "return_feature_map", "=", "False", ")", ":", "\n", "    ", "return", "WideResNet", "(", "70", ",", "num_classes", ",", "16", ",", "activation", "=", "activation", ",", "dropRate", "=", "dropRate", ",", "return_feature_map", "=", "return_feature_map", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models_32x32.wideresnet_carmon.BasicBlock.__init__": [[10, 24], ["torch.Module.__init__", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models_32x32.shake_pyramidnet.ShakePyramidNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_planes", ",", "out_planes", ",", "stride", ",", "dropRate", "=", "0.0", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "in_planes", ")", "\n", "self", ".", "relu1", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "out_planes", ")", "\n", "self", ".", "relu2", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "out_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "droprate", "=", "dropRate", "\n", "self", ".", "equalInOut", "=", "(", "in_planes", "==", "out_planes", ")", "\n", "self", ".", "convShortcut", "=", "(", "not", "self", ".", "equalInOut", ")", "and", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "0", ",", "bias", "=", "False", ")", "or", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models_32x32.wideresnet_carmon.BasicBlock.forward": [[25, 35], ["wideresnet_carmon.BasicBlock.relu2", "wideresnet_carmon.BasicBlock.conv2", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "wideresnet_carmon.BasicBlock.relu1", "wideresnet_carmon.BasicBlock.relu1", "wideresnet_carmon.BasicBlock.bn2", "torch.dropout", "torch.dropout", "torch.dropout", "wideresnet_carmon.BasicBlock.bn1", "wideresnet_carmon.BasicBlock.bn1", "wideresnet_carmon.BasicBlock.conv1", "wideresnet_carmon.BasicBlock.convShortcut"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "not", "self", ".", "equalInOut", ":", "\n", "            ", "x", "=", "self", ".", "relu1", "(", "self", ".", "bn1", "(", "x", ")", ")", "\n", "", "else", ":", "\n", "            ", "out", "=", "self", ".", "relu1", "(", "self", ".", "bn1", "(", "x", ")", ")", "\n", "", "out", "=", "self", ".", "relu2", "(", "self", ".", "bn2", "(", "self", ".", "conv1", "(", "out", "if", "self", ".", "equalInOut", "else", "x", ")", ")", ")", "\n", "if", "self", ".", "droprate", ">", "0", ":", "\n", "            ", "out", "=", "F", ".", "dropout", "(", "out", ",", "p", "=", "self", ".", "droprate", ",", "training", "=", "self", ".", "training", ")", "\n", "", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "return", "torch", ".", "add", "(", "x", "if", "self", ".", "equalInOut", "else", "self", ".", "convShortcut", "(", "x", ")", ",", "out", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models_32x32.wideresnet_carmon.NetworkBlock.__init__": [[38, 41], ["torch.Module.__init__", "wideresnet_carmon.NetworkBlock._make_layer"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models_32x32.shake_pyramidnet.ShakePyramidNet.__init__", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models_32x32.shake_pyramidnet.ShakePyramidNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "nb_layers", ",", "in_planes", ",", "out_planes", ",", "block", ",", "stride", ",", "dropRate", "=", "0.0", ")", ":", "\n", "        ", "super", "(", "NetworkBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "layer", "=", "self", ".", "_make_layer", "(", "block", ",", "in_planes", ",", "out_planes", ",", "nb_layers", ",", "stride", ",", "dropRate", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models_32x32.wideresnet_carmon.NetworkBlock._make_layer": [[42, 47], ["range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "int", "layers.append", "block"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ",", "block", ",", "in_planes", ",", "out_planes", ",", "nb_layers", ",", "stride", ",", "dropRate", ")", ":", "\n", "        ", "layers", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "int", "(", "nb_layers", ")", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "i", "==", "0", "and", "in_planes", "or", "out_planes", ",", "out_planes", ",", "i", "==", "0", "and", "stride", "or", "1", ",", "dropRate", ")", ")", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models_32x32.wideresnet_carmon.NetworkBlock.forward": [[48, 50], ["wideresnet_carmon.NetworkBlock.layer"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "layer", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models_32x32.wideresnet_carmon.WideResNet.__init__": [[53, 85], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "wideresnet_carmon.NetworkBlock", "wideresnet_carmon.NetworkBlock", "wideresnet_carmon.NetworkBlock", "wideresnet_carmon.NetworkBlock", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "wideresnet_carmon.WideResNet.modules", "isinstance", "m.weight.data.normal_", "isinstance", "math.sqrt", "m.weight.data.fill_", "m.bias.data.zero_", "isinstance", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models_32x32.shake_pyramidnet.ShakePyramidNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "depth", "=", "34", ",", "num_classes", "=", "10", ",", "widen_factor", "=", "10", ",", "dropRate", "=", "0.0", ")", ":", "\n", "        ", "super", "(", "WideResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "nChannels", "=", "[", "16", ",", "16", "*", "widen_factor", ",", "32", "*", "widen_factor", ",", "64", "*", "widen_factor", "]", "\n", "assert", "(", "(", "depth", "-", "4", ")", "%", "6", "==", "0", ")", "\n", "n", "=", "(", "depth", "-", "4", ")", "/", "6", "\n", "block", "=", "BasicBlock", "\n", "# 1st conv before any network block", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "nChannels", "[", "0", "]", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "# 1st block", "\n", "self", ".", "block1", "=", "NetworkBlock", "(", "n", ",", "nChannels", "[", "0", "]", ",", "nChannels", "[", "1", "]", ",", "block", ",", "1", ",", "dropRate", ")", "\n", "# 1st sub-block", "\n", "self", ".", "sub_block1", "=", "NetworkBlock", "(", "n", ",", "nChannels", "[", "0", "]", ",", "nChannels", "[", "1", "]", ",", "block", ",", "1", ",", "dropRate", ")", "\n", "# 2nd block", "\n", "self", ".", "block2", "=", "NetworkBlock", "(", "n", ",", "nChannels", "[", "1", "]", ",", "nChannels", "[", "2", "]", ",", "block", ",", "2", ",", "dropRate", ")", "\n", "# 3rd block", "\n", "self", ".", "block3", "=", "NetworkBlock", "(", "n", ",", "nChannels", "[", "2", "]", ",", "nChannels", "[", "3", "]", ",", "block", ",", "2", ",", "dropRate", ")", "\n", "# global average pooling and classifier", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "nChannels", "[", "3", "]", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "nChannels", "[", "3", "]", ",", "num_classes", ")", "\n", "self", ".", "nChannels", "=", "nChannels", "[", "3", "]", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "                ", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models_32x32.wideresnet_carmon.WideResNet.forward": [[86, 98], ["wideresnet_carmon.WideResNet.conv1", "wideresnet_carmon.WideResNet.block1", "wideresnet_carmon.WideResNet.block2", "wideresnet_carmon.WideResNet.block3", "wideresnet_carmon.WideResNet.relu", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "out.view.view.view", "wideresnet_carmon.WideResNet.bn1", "wideresnet_carmon.WideResNet.fc", "wideresnet_carmon.WideResNet.fc"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "x", ",", "return_prelogit", "=", "False", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "block1", "(", "out", ")", "\n", "out", "=", "self", ".", "block2", "(", "out", ")", "\n", "out", "=", "self", ".", "block3", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "self", ".", "bn1", "(", "out", ")", ")", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "8", ")", "\n", "out", "=", "out", ".", "view", "(", "-", "1", ",", "self", ".", "nChannels", ")", "\n", "if", "return_prelogit", ":", "\n", "            ", "return", "self", ".", "fc", "(", "out", ")", ",", "out", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "fc", "(", "out", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models_32x32.resnet.BasicBlock.__init__": [[14, 26], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models_32x32.shake_pyramidnet.ShakePyramidNet.__init__"], ["def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "self", ".", "expansion", "*", "planes", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "self", ".", "expansion", "*", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "self", ".", "expansion", "*", "planes", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models_32x32.resnet.BasicBlock.forward": [[28, 34], ["torch.relu", "torch.relu", "torch.relu", "resnet.BasicBlock.bn2", "resnet.BasicBlock.shortcut", "torch.relu", "torch.relu", "torch.relu", "resnet.BasicBlock.bn1", "resnet.BasicBlock.conv2", "resnet.BasicBlock.conv1"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ")", ")", "\n", "out", "+=", "self", ".", "shortcut", "(", "x", ")", "\n", "out", "=", "F", ".", "relu", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models_32x32.resnet.Bottleneck.__init__": [[39, 53], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models_32x32.shake_pyramidnet.ShakePyramidNet.__init__"], ["def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", ",", "self", ".", "expansion", "*", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "self", ".", "expansion", "*", "planes", ")", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "self", ".", "expansion", "*", "planes", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "self", ".", "expansion", "*", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "self", ".", "expansion", "*", "planes", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models_32x32.resnet.Bottleneck.forward": [[55, 62], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "resnet.Bottleneck.bn3", "resnet.Bottleneck.shortcut", "torch.relu", "torch.relu", "torch.relu", "resnet.Bottleneck.bn1", "resnet.Bottleneck.bn2", "resnet.Bottleneck.conv3", "resnet.Bottleneck.conv1", "resnet.Bottleneck.conv2"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "F", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ")", ")", ")", "\n", "out", "=", "self", ".", "bn3", "(", "self", ".", "conv3", "(", "out", ")", ")", "\n", "out", "+=", "self", ".", "shortcut", "(", "x", ")", "\n", "out", "=", "F", ".", "relu", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models_32x32.resnet.ResNet.__init__": [[65, 76], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models_32x32.shake_pyramidnet.ShakePyramidNet.__init__", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models_32x32.shake_pyramidnet.ShakePyramidNet._make_layer", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models_32x32.shake_pyramidnet.ShakePyramidNet._make_layer", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models_32x32.shake_pyramidnet.ShakePyramidNet._make_layer", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models_32x32.shake_pyramidnet.ShakePyramidNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "num_blocks", ",", "num_classes", "=", "10", ")", ":", "\n", "        ", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_planes", "=", "64", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "num_blocks", "[", "0", "]", ",", "stride", "=", "1", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "num_blocks", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "num_blocks", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "num_blocks", "[", "3", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "512", "*", "block", ".", "expansion", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models_32x32.resnet.ResNet._make_layer": [[77, 84], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "block"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "num_blocks", ",", "stride", ")", ":", "\n", "        ", "strides", "=", "[", "stride", "]", "+", "[", "1", "]", "*", "(", "num_blocks", "-", "1", ")", "\n", "layers", "=", "[", "]", "\n", "for", "stride", "in", "strides", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "in_planes", ",", "planes", ",", "stride", ")", ")", "\n", "self", ".", "in_planes", "=", "planes", "*", "block", ".", "expansion", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models_32x32.resnet.ResNet.forward": [[85, 95], ["torch.relu", "torch.relu", "torch.relu", "resnet.ResNet.layer1", "resnet.ResNet.layer2", "resnet.ResNet.layer3", "resnet.ResNet.layer4", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "resnet.ResNet.view", "resnet.ResNet.linear", "resnet.ResNet.bn1", "resnet.ResNet.size", "resnet.ResNet.conv1"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.resize_right.interp_methods.linear"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "layer1", "(", "out", ")", "\n", "out", "=", "self", ".", "layer2", "(", "out", ")", "\n", "out", "=", "self", ".", "layer3", "(", "out", ")", "\n", "out", "=", "self", ".", "layer4", "(", "out", ")", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "4", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "linear", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models_32x32.resnet.ResNet18": [[97, 99], ["resnet.ResNet"], "function", ["None"], ["", "", "def", "ResNet18", "(", "num_classes", "=", "10", ")", ":", "\n", "    ", "return", "ResNet", "(", "BasicBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "num_classes", "=", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models_32x32.resnet.ResNet34": [[100, 102], ["resnet.ResNet"], "function", ["None"], ["", "def", "ResNet34", "(", "num_classes", "=", "10", ")", ":", "\n", "    ", "return", "ResNet", "(", "BasicBlock", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "num_classes", "=", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models_32x32.resnet.ResNet50": [[103, 105], ["resnet.ResNet"], "function", ["None"], ["", "def", "ResNet50", "(", "num_classes", "=", "10", ")", ":", "\n", "    ", "return", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "num_classes", "=", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models_32x32.resnet.ResNet101": [[106, 108], ["resnet.ResNet"], "function", ["None"], ["", "def", "ResNet101", "(", "num_classes", "=", "10", ")", ":", "\n", "    ", "return", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "num_classes", "=", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models_32x32.resnet.ResNet152": [[109, 111], ["resnet.ResNet"], "function", ["None"], ["", "def", "ResNet152", "(", "num_classes", "=", "10", ")", ":", "\n", "    ", "return", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "8", ",", "36", ",", "3", "]", ",", "num_classes", "=", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models_32x32.resnet.test": [[113, 117], ["resnet.ResNet18", "ResNet18.", "print", "torch.randn", "torch.randn", "torch.randn", "net.size"], "function", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models_32x32.resnet.ResNet18"], ["", "def", "test", "(", ")", ":", "\n", "    ", "net", "=", "ResNet18", "(", ")", "\n", "y", "=", "net", "(", "torch", ".", "randn", "(", "1", ",", "3", ",", "32", ",", "32", ")", ")", "\n", "print", "(", "y", ".", "size", "(", ")", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models_32x32.shake_pyramidnet.ShakeBasicBlock.__init__": [[14, 20], ["torch.Module.__init__", "shake_pyramidnet.ShakeBasicBlock._make_branch", "utils.models.models_32x32.shakedrop.ShakeDrop", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models_32x32.shake_pyramidnet.ShakePyramidNet.__init__", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models_32x32.shake_pyramidnet.ShakeBasicBlock._make_branch"], ["    ", "def", "__init__", "(", "self", ",", "in_ch", ",", "out_ch", ",", "stride", "=", "1", ",", "p_shakedrop", "=", "1.0", ")", ":", "\n", "        ", "super", "(", "ShakeBasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "downsampled", "=", "stride", "==", "2", "\n", "self", ".", "branch", "=", "self", ".", "_make_branch", "(", "in_ch", ",", "out_ch", ",", "stride", "=", "stride", ")", "\n", "self", ".", "shortcut", "=", "not", "self", ".", "downsampled", "and", "None", "or", "nn", ".", "AvgPool2d", "(", "2", ")", "\n", "self", ".", "shake_drop", "=", "ShakeDrop", "(", "p_shakedrop", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models_32x32.shake_pyramidnet.ShakeBasicBlock.forward": [[21, 29], ["shake_pyramidnet.ShakeBasicBlock.branch", "shake_pyramidnet.ShakeBasicBlock.shake_drop", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "shake_pyramidnet.ShakeBasicBlock.shortcut", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "shake_pyramidnet.ShakeBasicBlock.size", "torch.cat.size", "torch.cat.size", "torch.cat.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "h", "=", "self", ".", "branch", "(", "x", ")", "\n", "h", "=", "self", ".", "shake_drop", "(", "h", ")", "\n", "h0", "=", "x", "if", "not", "self", ".", "downsampled", "else", "self", ".", "shortcut", "(", "x", ")", "\n", "pad_zero", "=", "torch", ".", "zeros", "(", "(", "h0", ".", "size", "(", "0", ")", ",", "h", ".", "size", "(", "1", ")", "-", "h0", ".", "size", "(", "1", ")", ",", "h0", ".", "size", "(", "2", ")", ",", "h0", ".", "size", "(", "3", ")", ")", ",", "dtype", "=", "torch", ".", "float", ",", "device", "=", "x", ".", "device", ")", "\n", "h0", "=", "torch", ".", "cat", "(", "[", "h0", ",", "pad_zero", "]", ",", "dim", "=", "1", ")", "\n", "\n", "return", "h", "+", "h0", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models_32x32.shake_pyramidnet.ShakeBasicBlock._make_branch": [[30, 38], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["None"], ["", "def", "_make_branch", "(", "self", ",", "in_ch", ",", "out_ch", ",", "stride", "=", "1", ")", ":", "\n", "        ", "return", "nn", ".", "Sequential", "(", "\n", "nn", ".", "BatchNorm2d", "(", "in_ch", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_ch", ",", "out_ch", ",", "3", ",", "padding", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_ch", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "out_ch", ",", "out_ch", ",", "3", ",", "padding", "=", "1", ",", "stride", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_ch", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models_32x32.shake_pyramidnet.ShakePyramidNet.__init__": [[41, 70], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "shake_pyramidnet.ShakePyramidNet._make_layer", "shake_pyramidnet.ShakePyramidNet._make_layer", "shake_pyramidnet.ShakePyramidNet._make_layer", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Linear", "torch.Linear", "torch.Linear", "shake_pyramidnet.ShakePyramidNet.modules", "isinstance", "range", "m.weight.data.normal_", "isinstance", "math.ceil", "range", "math.sqrt", "m.weight.data.fill_", "m.bias.data.zero_", "isinstance", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models_32x32.shake_pyramidnet.ShakePyramidNet.__init__", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models_32x32.shake_pyramidnet.ShakePyramidNet._make_layer", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models_32x32.shake_pyramidnet.ShakePyramidNet._make_layer", "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models_32x32.shake_pyramidnet.ShakePyramidNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "depth", "=", "110", ",", "alpha", "=", "270", ",", "label", "=", "10", ")", ":", "\n", "        ", "super", "(", "ShakePyramidNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "in_ch", "=", "16", "\n", "# for BasicBlock", "\n", "n_units", "=", "(", "depth", "-", "2", ")", "//", "6", "\n", "in_chs", "=", "[", "in_ch", "]", "+", "[", "in_ch", "+", "math", ".", "ceil", "(", "(", "alpha", "/", "(", "3", "*", "n_units", ")", ")", "*", "(", "i", "+", "1", ")", ")", "for", "i", "in", "range", "(", "3", "*", "n_units", ")", "]", "\n", "block", "=", "ShakeBasicBlock", "\n", "\n", "self", ".", "in_chs", ",", "self", ".", "u_idx", "=", "in_chs", ",", "0", "\n", "self", ".", "ps_shakedrop", "=", "[", "1", "-", "(", "1.0", "-", "(", "0.5", "/", "(", "3", "*", "n_units", ")", ")", "*", "(", "i", "+", "1", ")", ")", "for", "i", "in", "range", "(", "3", "*", "n_units", ")", "]", "\n", "\n", "self", ".", "c_in", "=", "nn", ".", "Conv2d", "(", "3", ",", "in_chs", "[", "0", "]", ",", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "bn_in", "=", "nn", ".", "BatchNorm2d", "(", "in_chs", "[", "0", "]", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "n_units", ",", "block", ",", "1", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "n_units", ",", "block", ",", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "n_units", ",", "block", ",", "2", ")", "\n", "self", ".", "bn_out", "=", "nn", ".", "BatchNorm2d", "(", "in_chs", "[", "-", "1", "]", ")", "\n", "self", ".", "fc_out", "=", "nn", ".", "Linear", "(", "in_chs", "[", "-", "1", "]", ",", "label", ")", "\n", "\n", "# Initialize paramters", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "                ", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models_32x32.shake_pyramidnet.ShakePyramidNet.forward": [[71, 81], ["shake_pyramidnet.ShakePyramidNet.bn_in", "shake_pyramidnet.ShakePyramidNet.layer1", "shake_pyramidnet.ShakePyramidNet.layer2", "shake_pyramidnet.ShakePyramidNet.layer3", "torch.relu", "torch.relu", "torch.relu", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "shake_pyramidnet.ShakePyramidNet.view", "shake_pyramidnet.ShakePyramidNet.fc_out", "shake_pyramidnet.ShakePyramidNet.c_in", "shake_pyramidnet.ShakePyramidNet.bn_out", "shake_pyramidnet.ShakePyramidNet.size"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "h", "=", "self", ".", "bn_in", "(", "self", ".", "c_in", "(", "x", ")", ")", "\n", "h", "=", "self", ".", "layer1", "(", "h", ")", "\n", "h", "=", "self", ".", "layer2", "(", "h", ")", "\n", "h", "=", "self", ".", "layer3", "(", "h", ")", "\n", "h", "=", "F", ".", "relu", "(", "self", ".", "bn_out", "(", "h", ")", ")", "\n", "h", "=", "F", ".", "avg_pool2d", "(", "h", ",", "8", ")", "\n", "h", "=", "h", ".", "view", "(", "h", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "h", "=", "self", ".", "fc_out", "(", "h", ")", "\n", "return", "h", "\n", "\n"]], "home.repos.pwc.inspect_result.M4xim4l_InNOutRobustness.models_32x32.shake_pyramidnet.ShakePyramidNet._make_layer": [[82, 89], ["range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "int", "layers.append", "block"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ",", "n_units", ",", "block", ",", "stride", "=", "1", ")", ":", "\n", "        ", "layers", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "int", "(", "n_units", ")", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "in_chs", "[", "self", ".", "u_idx", "]", ",", "self", ".", "in_chs", "[", "self", ".", "u_idx", "+", "1", "]", ",", "\n", "stride", ",", "self", ".", "ps_shakedrop", "[", "self", ".", "u_idx", "]", ")", ")", "\n", "self", ".", "u_idx", ",", "stride", "=", "self", ".", "u_idx", "+", "1", ",", "1", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "", "", ""]]}