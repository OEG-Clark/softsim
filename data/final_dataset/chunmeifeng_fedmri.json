{"home.repos.pwc.inspect_result.chunmeifeng_fedmri.None.engine.norm": [[19, 22], ["data.min", "data.max", "data.min"], "function", ["home.repos.pwc.inspect_result.chunmeifeng_fedmri.util.misc.SmoothedValue.max"], ["def", "norm", "(", "data", ",", "dtype", "=", "'max'", ",", "eps", "=", "1e-11", ")", ":", "\n", "    ", "data", "=", "(", "data", "-", "data", ".", "min", "(", ")", ")", "/", "(", "data", ".", "max", "(", ")", "-", "data", ".", "min", "(", ")", "+", "eps", ")", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_fedmri.None.engine.prlog": [[24, 29], ["print", "open", "f.write", "f.write"], "function", ["None"], ["", "def", "prlog", "(", "i", ",", "args", "=", "cfg", ")", ":", "\n", "    ", "print", "(", "i", ")", "\n", "with", "open", "(", "'./logs/{}/log.txt'", ".", "format", "(", "args", ".", "FL", ".", "MODEL_NAME", ")", ",", "'a+'", ")", "as", "f", ":", "\n", "        ", "f", ".", "write", "(", "i", ")", "\n", "f", ".", "write", "(", "'\\n'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_fedmri.None.engine.train_one_epoch_ours": [[30, 90], ["model.train", "server_model.eval", "enumerate", "int", "prev.eval", "image.to.unsqueeze", "target.to.unsqueeze", "image.to.to", "target.to.to", "model", "criterion", "optimizer.zero_grad", "total_loss.backward", "optimizer.step", "len", "len", "len", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "server_model.named_parameters", "loss[].item", "loss[].item", "len", "torch.norm", "torch.norm", "server_model.named_parameters", "w_diff.item", "len", "dict", "torch.norm", "torch.norm", "loss[].item", "w_diff.item", "model.named_parameters", "dict", "dict", "prev_model.named_parameters", "model.named_parameters"], "function", ["home.repos.pwc.inspect_result.chunmeifeng_fedmri.util.misc.NestedTensor.to", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.util.misc.NestedTensor.to", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.fastmri.norm", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.fastmri.norm", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.fastmri.norm", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.fastmri.norm"], ["", "", "def", "train_one_epoch_ours", "(", "args", ",", "model", ":", "torch", ".", "nn", ".", "Module", ",", "server_model", ":", "torch", ".", "nn", ".", "Module", ",", "\n", "prev_models", ",", "criterion", ":", "torch", ".", "nn", ".", "Module", ",", "\n", "data_loader", ":", "Iterable", ",", "optimizer", ":", "torch", ".", "optim", ".", "Optimizer", ",", "\n", "epoch", ":", "int", ",", "print_freq", ":", "int", ",", "device", ":", "str", ")", ":", "\n", "    ", "model", ".", "train", "(", ")", "\n", "loss_all", "=", "0", "\n", "c_loss", "=", "0", "\n", "p_loss", "=", "0", "\n", "\n", "server_model", ".", "eval", "(", ")", "\n", "for", "prev", "in", "prev_models", ":", "\n", "        ", "prev", ".", "eval", "(", ")", "\n", "\n", "", "for", "i", ",", "data", "in", "enumerate", "(", "data_loader", ")", ":", "\n", "        ", "image", ",", "target", ",", "mean", ",", "std", ",", "fname", ",", "slice_num", "=", "data", "# NOTE", "\n", "\n", "image", "=", "image", ".", "unsqueeze", "(", "1", ")", "# (8,1,320,320)", "\n", "target", "=", "target", ".", "unsqueeze", "(", "1", ")", "\n", "\n", "image", "=", "image", ".", "to", "(", "device", ")", "\n", "target", "=", "target", ".", "to", "(", "device", ")", "\n", "\n", "outputs", "=", "model", "(", "image", ")", "\n", "\n", "loss", "=", "criterion", "(", "outputs", ",", "target", ")", "\n", "\n", "if", "i", ">", "0", ":", "\n", "            ", "posi", "=", "torch", ".", "tensor", "(", "0.", ",", "device", "=", "device", ")", "\n", "nega", "=", "torch", ".", "tensor", "(", "0.", ",", "device", "=", "device", ")", "\n", "for", "name", ",", "param", "in", "server_model", ".", "named_parameters", "(", ")", ":", "\n", "                ", "curr_params", "=", "dict", "(", "model", ".", "named_parameters", "(", ")", ")", "[", "name", "]", "\n", "posi", "+=", "torch", ".", "norm", "(", "curr_params", "-", "param", ",", "p", "=", "1", ")", "\n", "\n", "", "for", "prev_model", "in", "prev_models", ":", "\n", "                ", "for", "name", ",", "_", "in", "server_model", ".", "named_parameters", "(", ")", ":", "\n", "                    ", "prev_param", "=", "dict", "(", "prev_model", ".", "named_parameters", "(", ")", ")", "[", "name", "]", "\n", "curr_params", "=", "dict", "(", "model", ".", "named_parameters", "(", ")", ")", "[", "name", "]", "\n", "nega", "+=", "torch", ".", "norm", "(", "curr_params", "-", "prev_param", ",", "p", "=", "1", ")", "\n", "\n", "", "", "w_diff", "=", "posi", "/", "(", "nega", "+", "1e-14", ")", "\n", "\n", "total_loss", "=", "args", ".", "lam", "*", "loss", "[", "'loss'", "]", "+", "args", ".", "beta", "*", "w_diff", "\n", "loss_all", "+=", "args", ".", "lam", "*", "loss", "[", "'loss'", "]", ".", "item", "(", ")", "+", "args", ".", "beta", "*", "w_diff", ".", "item", "(", ")", "\n", "p_loss", "+=", "args", ".", "beta", "*", "w_diff", ".", "item", "(", ")", "\n", "\n", "", "else", ":", "\n", "            ", "total_loss", "=", "loss", "[", "'loss'", "]", "\n", "loss_all", "+=", "loss", "[", "'loss'", "]", ".", "item", "(", ")", "\n", "\n", "", "optimizer", ".", "zero_grad", "(", ")", "\n", "total_loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "c_loss", "+=", "args", ".", "lam", "*", "loss", "[", "'loss'", "]", ".", "item", "(", ")", "\n", "\n", "", "c_loss_avg", "=", "c_loss", "/", "len", "(", "data_loader", ")", "\n", "p_loss_avg", "=", "p_loss", "/", "len", "(", "data_loader", ")", "\n", "loss_avg", "=", "loss_all", "/", "len", "(", "data_loader", ")", "\n", "global_step", "=", "int", "(", "epoch", "*", "len", "(", "data_loader", ")", "+", "len", "(", "data_loader", ")", ")", "\n", "\n", "return", "{", "\"loss\"", ":", "loss_avg", ",", "\"global_step\"", ":", "global_step", ",", "'c_loss'", ":", "c_loss_avg", ",", "'p_loss'", ":", "p_loss_avg", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_fedmri.None.engine.train_one_epoch": [[92, 120], ["model.train", "enumerate", "int", "image.to.unsqueeze", "target.to.unsqueeze", "image.to.to", "target.to.to", "model", "criterion", "optimizer.zero_grad", "loss[].backward", "optimizer.step", "loss[].item", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.chunmeifeng_fedmri.util.misc.NestedTensor.to", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.util.misc.NestedTensor.to"], ["", "def", "train_one_epoch", "(", "args", ",", "model", ":", "torch", ".", "nn", ".", "Module", ",", "criterion", ":", "torch", ".", "nn", ".", "Module", ",", "\n", "data_loader", ":", "Iterable", ",", "optimizer", ":", "torch", ".", "optim", ".", "Optimizer", ",", "\n", "epoch", ":", "int", ",", "print_freq", ":", "int", ",", "device", ":", "str", ")", ":", "\n", "    ", "model", ".", "train", "(", ")", "\n", "loss_all", "=", "0", "\n", "for", "_", ",", "data", "in", "enumerate", "(", "data_loader", ")", ":", "\n", "        ", "image", ",", "target", ",", "mean", ",", "std", ",", "fname", ",", "slice_num", "=", "data", "# NOTE", "\n", "\n", "image", "=", "image", ".", "unsqueeze", "(", "1", ")", "# (8,1,320,320)", "\n", "target", "=", "target", ".", "unsqueeze", "(", "1", ")", "\n", "\n", "image", "=", "image", ".", "to", "(", "device", ")", "\n", "target", "=", "target", ".", "to", "(", "device", ")", "\n", "\n", "outputs", "=", "model", "(", "image", ")", "\n", "\n", "loss", "=", "criterion", "(", "outputs", ",", "target", ")", "\n", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", "[", "'loss'", "]", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "loss_all", "+=", "loss", "[", "'loss'", "]", ".", "item", "(", ")", "\n", "\n", "", "loss_avg", "=", "loss_all", "/", "len", "(", "data_loader", ")", "\n", "global_step", "=", "int", "(", "epoch", "*", "len", "(", "data_loader", ")", "+", "len", "(", "data_loader", ")", ")", "\n", "\n", "return", "{", "\"loss\"", ":", "loss_avg", ",", "\"global_step\"", ":", "global_step", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_fedmri.None.engine.evaluate": [[122, 204], ["torch.no_grad", "torch.no_grad", "model.eval", "criterion.eval", "criterion.to", "util.metric.AverageMeter", "util.metric.AverageMeter", "util.metric.AverageMeter", "collections.defaultdict", "collections.defaultdict", "time.time", "collections.defaultdict.keys", "str", "engine.prlog", "image.to.unsqueeze", "mean.to.unsqueeze().unsqueeze", "std.to.unsqueeze().unsqueeze", "mean.to.to", "std.to.to", "image.to.to", "target.to.to", "model", "outputs.squeeze.squeeze", "criterion", "loss[].item", "enumerate", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "util.metric.nmse", "util.metric.psnr", "util.metric.ssim", "util.metric.AverageMeter.update", "util.metric.AverageMeter.update", "util.metric.AverageMeter.update", "time.time", "datetime.timedelta", "len", "torch.stack.cpu().numpy", "torch.stack.cpu().numpy", "torch.stack.cpu().numpy", "torch.stack.cpu().numpy", "torch.stack.cpu().numpy", "torch.stack.cpu().numpy", "mean.to.unsqueeze", "std.to.unsqueeze", "int", "output_dic[].items", "target_dic[].items", "torch.stack.cpu", "torch.stack.cpu", "torch.stack.cpu", "torch.stack.cpu", "torch.stack.cpu", "torch.stack.cpu"], "function", ["home.repos.pwc.inspect_result.chunmeifeng_fedmri.util.misc.NestedTensor.to", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.None.train_multi_gpu.prlog", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.util.misc.NestedTensor.to", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.util.misc.NestedTensor.to", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.util.misc.NestedTensor.to", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.util.misc.NestedTensor.to", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.util.metric.nmse", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.util.metric.psnr", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.util.metric.ssim", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.util.metric.AverageMeter.update", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.util.metric.AverageMeter.update", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.util.metric.AverageMeter.update"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "evaluate", "(", "args", ",", "model", ",", "criterion", ",", "data_loader", ",", "device", ",", "data_name", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "criterion", ".", "eval", "(", ")", "\n", "criterion", ".", "to", "(", "device", ")", "\n", "\n", "nmse_meter", "=", "AverageMeter", "(", ")", "\n", "psnr_meter", "=", "AverageMeter", "(", ")", "\n", "ssim_meter", "=", "AverageMeter", "(", ")", "\n", "\n", "# _nmse_meter = AverageMeter()", "\n", "# _psnr_meter = AverageMeter()", "\n", "# _ssim_meter = AverageMeter()", "\n", "\n", "output_dic", "=", "defaultdict", "(", "dict", ")", "\n", "target_dic", "=", "defaultdict", "(", "dict", ")", "\n", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "\n", "loss_all", "=", "0", "\n", "\n", "for", "data", "in", "data_loader", ":", "\n", "        ", "image", ",", "target", ",", "mean", ",", "std", ",", "fname", ",", "slice_num", "=", "data", "# torch.float32", "\n", "image", "=", "image", ".", "unsqueeze", "(", "1", ")", "\n", "\n", "mean", "=", "mean", ".", "unsqueeze", "(", "1", ")", ".", "unsqueeze", "(", "2", ")", "# (8,1,1)", "\n", "std", "=", "std", ".", "unsqueeze", "(", "1", ")", ".", "unsqueeze", "(", "2", ")", "\n", "mean", "=", "mean", ".", "to", "(", "device", ")", "\n", "std", "=", "std", ".", "to", "(", "device", ")", "\n", "\n", "image", "=", "image", ".", "to", "(", "device", ")", "\n", "target", "=", "target", ".", "to", "(", "device", ")", "\n", "\n", "b", "=", "image", ".", "shape", "[", "0", "]", "\n", "\n", "outputs", "=", "model", "(", "image", ")", "\n", "outputs", "=", "outputs", ".", "squeeze", "(", "1", ")", "\n", "\n", "outputs", "=", "outputs", "*", "std", "+", "mean", "\n", "target", "=", "target", "*", "std", "+", "mean", "\n", "\n", "loss", "=", "criterion", "(", "outputs", ",", "target", ")", "\n", "loss_all", "+=", "loss", "[", "'loss'", "]", ".", "item", "(", ")", "\n", "\n", "# our_nmse = nmse(target.cpu().numpy(), outputs.cpu().numpy())", "\n", "# our_psnr = psnr(norm(target.cpu().numpy()), norm(outputs.cpu().numpy()))", "\n", "# our_ssim = ssim(target.cpu().numpy(), outputs.cpu().numpy())", "\n", "\n", "# nmse_meter.update(our_nmse, b)", "\n", "# psnr_meter.update(our_psnr, b)", "\n", "# ssim_meter.update(our_ssim, b)", "\n", "\n", "for", "i", ",", "f", "in", "enumerate", "(", "fname", ")", ":", "\n", "            ", "output_dic", "[", "f", "]", "[", "slice_num", "[", "i", "]", "]", "=", "outputs", "[", "i", "]", "\n", "target_dic", "[", "f", "]", "[", "slice_num", "[", "i", "]", "]", "=", "target", "[", "i", "]", "\n", "\n", "", "", "for", "name", "in", "output_dic", ".", "keys", "(", ")", ":", "\n", "        ", "f_output", "=", "torch", ".", "stack", "(", "[", "v", "for", "_", ",", "v", "in", "output_dic", "[", "name", "]", ".", "items", "(", ")", "]", ")", "# (34,320,320)", "\n", "f_target", "=", "torch", ".", "stack", "(", "[", "v", "for", "_", ",", "v", "in", "target_dic", "[", "name", "]", ".", "items", "(", ")", "]", ")", "# (34,320,320)", "\n", "# our_nmse = nmse(norm(f_target.cpu().numpy()), norm(f_output.cpu().numpy()))", "\n", "# our_psnr = psnr(norm(f_target.cpu().numpy()), norm(f_output.cpu().numpy()))", "\n", "# our_ssim = ssim(norm(f_target.cpu().numpy()), norm(f_output.cpu().numpy()))", "\n", "our_nmse", "=", "nmse", "(", "f_target", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "f_output", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "our_psnr", "=", "psnr", "(", "f_target", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "f_output", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "our_ssim", "=", "ssim", "(", "f_target", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "f_output", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "\n", "nmse_meter", ".", "update", "(", "our_nmse", ",", "1", ")", "\n", "psnr_meter", ".", "update", "(", "our_psnr", ",", "1", ")", "\n", "ssim_meter", ".", "update", "(", "our_ssim", ",", "1", ")", "\n", "\n", "", "total_time", "=", "time", ".", "time", "(", ")", "-", "start_time", "\n", "total_time_str", "=", "str", "(", "datetime", ".", "timedelta", "(", "seconds", "=", "int", "(", "total_time", ")", ")", ")", "\n", "loss_avg", "=", "loss_all", "/", "len", "(", "data_loader", ")", "\n", "\n", "prlog", "(", "' {:<11s}|   Val Loss: {:.4f} Evaluate time {} NMSE: {:.4f} PSNR: {:.4f} SSIM: {:.4f}'", ".", "format", "(", "data_name", ",", "\n", "loss_avg", ",", "\n", "total_time_str", ",", "\n", "nmse_meter", ".", "avg", ",", "\n", "psnr_meter", ".", "avg", ",", "\n", "ssim_meter", ".", "avg", ")", ")", "\n", "\n", "return", "{", "'loss'", ":", "loss_avg", ",", "'NMSE'", ":", "nmse_meter", ".", "avg", ",", "'PSNR'", ":", "psnr_meter", ".", "avg", ",", "'SSIM'", ":", "ssim_meter", ".", "avg", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_fedmri.None.engine.distributed_concat": [[205, 211], ["torch.distributed.all_gather", "torch.distributed.all_gather", "torch.cat", "torch.cat", "tensor.clone", "range", "torch.distributed.get_world_size", "torch.distributed.get_world_size"], "function", ["home.repos.pwc.inspect_result.chunmeifeng_fedmri.util.misc.all_gather", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.util.misc.all_gather", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.util.misc.get_world_size", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.util.misc.get_world_size"], ["", "def", "distributed_concat", "(", "tensor", ",", "num_total_examples", ")", ":", "\n", "    ", "output_tensors", "=", "[", "tensor", ".", "clone", "(", ")", "for", "_", "in", "range", "(", "torch", ".", "distributed", ".", "get_world_size", "(", ")", ")", "]", "\n", "torch", ".", "distributed", ".", "all_gather", "(", "output_tensors", ",", "tensor", ")", "\n", "concat", "=", "torch", ".", "cat", "(", "output_tensors", ",", "dim", "=", "0", ")", "\n", "# truncate the dummy elements added by SequentialDistributedSampler", "\n", "return", "concat", "[", ":", "num_total_examples", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_fedmri.None.engine.distributed_evaluate": [[213, 292], ["torch.no_grad", "torch.no_grad", "model.eval", "util.metric.AverageMeter", "util.metric.AverageMeter", "util.metric.AverageMeter", "time.time", "engine.distributed_concat", "engine.distributed_concat", "engine.distributed_concat", "engine.distributed_concat", "collections.defaultdict", "collections.defaultdict", "final_id.cpu().numpy.cpu().numpy", "enumerate", "collections.defaultdict.keys", "str", "engine.prlog", "image.to.unsqueeze", "mean.to.unsqueeze().unsqueeze", "std.to.unsqueeze().unsqueeze", "mean.to.to", "std.to.to", "image.to.to", "target.to.to", "model", "outputs.squeeze.squeeze", "torch.zeros", "torch.zeros", "enumerate", "output_list.append", "target_list.append", "id_list.append", "slice_list.append", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "util.metric.nmse", "util.metric.psnr", "util.metric.ssim", "util.metric.AverageMeter.update", "util.metric.AverageMeter.update", "util.metric.AverageMeter.update", "time.time", "datetime.timedelta", "len", "final_id.cpu().numpy.cpu", "torch.stack.cpu().numpy", "torch.stack.cpu().numpy", "torch.stack.cpu().numpy", "torch.stack.cpu().numpy", "torch.stack.cpu().numpy", "torch.stack.cpu().numpy", "mean.to.unsqueeze", "std.to.unsqueeze", "int", "int", "hashlib.sha256().hexdigest", "output_dic[].items", "target_dic[].items", "torch.stack.cpu", "torch.stack.cpu", "torch.stack.cpu", "torch.stack.cpu", "torch.stack.cpu", "torch.stack.cpu", "hashlib.sha256", "fn.encode"], "function", ["home.repos.pwc.inspect_result.chunmeifeng_fedmri.None.engine_ki.distributed_concat", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.None.engine_ki.distributed_concat", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.None.engine_ki.distributed_concat", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.None.engine_ki.distributed_concat", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.None.train_multi_gpu.prlog", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.util.misc.NestedTensor.to", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.util.misc.NestedTensor.to", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.util.misc.NestedTensor.to", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.util.misc.NestedTensor.to", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.util.metric.nmse", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.util.metric.psnr", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.util.metric.ssim", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.util.metric.AverageMeter.update", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.util.metric.AverageMeter.update", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.util.metric.AverageMeter.update"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "distributed_evaluate", "(", "args", ",", "model", ",", "data_loader", ",", "device", ",", "data_name", ",", "dataset_len", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "\n", "nmse_meter", "=", "AverageMeter", "(", ")", "\n", "psnr_meter", "=", "AverageMeter", "(", ")", "\n", "ssim_meter", "=", "AverageMeter", "(", ")", "\n", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "\n", "output_list", "=", "[", "]", "\n", "target_list", "=", "[", "]", "\n", "id_list", "=", "[", "]", "\n", "slice_list", "=", "[", "]", "\n", "\n", "for", "data", "in", "data_loader", ":", "\n", "        ", "image", ",", "target", ",", "mean", ",", "std", ",", "fname", ",", "slice_num", "=", "data", "# torch.float32", "\n", "image", "=", "image", ".", "unsqueeze", "(", "1", ")", "\n", "\n", "mean", "=", "mean", ".", "unsqueeze", "(", "1", ")", ".", "unsqueeze", "(", "2", ")", "# (8,1,1)", "\n", "std", "=", "std", ".", "unsqueeze", "(", "1", ")", ".", "unsqueeze", "(", "2", ")", "\n", "mean", "=", "mean", ".", "to", "(", "device", ")", "\n", "std", "=", "std", ".", "to", "(", "device", ")", "\n", "\n", "image", "=", "image", ".", "to", "(", "device", ")", "\n", "target", "=", "target", ".", "to", "(", "device", ")", "\n", "outputs", "=", "model", "(", "image", ")", "\n", "\n", "outputs", "=", "outputs", ".", "squeeze", "(", "1", ")", "\n", "outputs", "=", "outputs", "*", "std", "+", "mean", "\n", "target", "=", "target", "*", "std", "+", "mean", "\n", "\n", "fid", "=", "torch", ".", "zeros", "(", "len", "(", "fname", ")", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "outputs", ".", "device", ")", "\n", "for", "i", ",", "fn", "in", "enumerate", "(", "fname", ")", ":", "\n", "            ", "fid", "[", "i", "]", "=", "(", "\n", "int", "(", "hashlib", ".", "sha256", "(", "fn", ".", "encode", "(", "\"utf-8\"", ")", ")", ".", "hexdigest", "(", ")", ",", "16", ")", "%", "10", "**", "12", "\n", ")", "\n", "\n", "", "output_list", ".", "append", "(", "outputs", ")", "\n", "target_list", ".", "append", "(", "target", ")", "\n", "id_list", ".", "append", "(", "fid", ")", "\n", "slice_list", ".", "append", "(", "slice_num", ")", "\n", "\n", "", "final_id", "=", "distributed_concat", "(", "torch", ".", "cat", "(", "(", "id_list", ")", ",", "dim", "=", "0", ")", ",", "dataset_len", ")", "\n", "final_output", "=", "distributed_concat", "(", "torch", ".", "cat", "(", "(", "output_list", ")", ",", "dim", "=", "0", ")", ",", "dataset_len", ")", "\n", "final_target", "=", "distributed_concat", "(", "torch", ".", "cat", "(", "(", "target_list", ")", ",", "dim", "=", "0", ")", ",", "dataset_len", ")", "\n", "final_slice", "=", "distributed_concat", "(", "torch", ".", "cat", "(", "(", "slice_list", ")", ",", "dim", "=", "0", ")", ",", "dataset_len", ")", "\n", "\n", "output_dic", "=", "defaultdict", "(", "dict", ")", "\n", "target_dic", "=", "defaultdict", "(", "dict", ")", "\n", "\n", "final_id", "=", "final_id", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "for", "i", ",", "f", "in", "enumerate", "(", "final_id", ")", ":", "\n", "        ", "output_dic", "[", "f", "]", "[", "final_slice", "[", "i", "]", "]", "=", "final_output", "[", "i", "]", "\n", "target_dic", "[", "f", "]", "[", "final_slice", "[", "i", "]", "]", "=", "final_target", "[", "i", "]", "\n", "\n", "", "for", "name", "in", "output_dic", ".", "keys", "(", ")", ":", "\n", "        ", "f_output", "=", "torch", ".", "stack", "(", "[", "v", "for", "_", ",", "v", "in", "output_dic", "[", "name", "]", ".", "items", "(", ")", "]", ")", "\n", "f_target", "=", "torch", ".", "stack", "(", "[", "v", "for", "_", ",", "v", "in", "target_dic", "[", "name", "]", ".", "items", "(", ")", "]", ")", "\n", "our_nmse", "=", "nmse", "(", "f_target", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "f_output", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "our_psnr", "=", "psnr", "(", "f_target", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "f_output", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "our_ssim", "=", "ssim", "(", "f_target", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "f_output", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "\n", "nmse_meter", ".", "update", "(", "our_nmse", ",", "1", ")", "\n", "psnr_meter", ".", "update", "(", "our_psnr", ",", "1", ")", "\n", "ssim_meter", ".", "update", "(", "our_ssim", ",", "1", ")", "\n", "\n", "\n", "\n", "", "total_time", "=", "time", ".", "time", "(", ")", "-", "start_time", "\n", "total_time_str", "=", "str", "(", "datetime", ".", "timedelta", "(", "seconds", "=", "int", "(", "total_time", ")", ")", ")", "\n", "\n", "prlog", "(", "' {:<11s}|    Evaluate time {} NMSE: {:.4f} PSNR: {:.4f} SSIM: {:.4f}'", ".", "format", "(", "data_name", ",", "total_time_str", ",", "\n", "nmse_meter", ".", "avg", ",", "\n", "psnr_meter", ".", "avg", ",", "\n", "ssim_meter", ".", "avg", ")", ")", "\n", "\n", "return", "{", "'NMSE'", ":", "nmse_meter", ".", "avg", ",", "'PSNR'", ":", "psnr_meter", ".", "avg", ",", "'SSIM'", ":", "ssim_meter", ".", "avg", "}", "", "", ""]], "home.repos.pwc.inspect_result.chunmeifeng_fedmri.None.train.communication": [[23, 51], ["copy.deepcopy", "torch.no_grad", "args.FL.MODEL_NAME.lower().find", "server_model.state_dict().keys", "server_model.state_dict().keys", "args.FL.MODEL_NAME.lower", "server_model.state_dict", "torch.zeros_like", "[].data.copy_", "range", "server_model.state_dict", "[].data.copy_", "torch.zeros_like", "range", "[].data.copy_", "range", "[].data.copy_", "len", "len", "[].data.copy_", "server_model.state_dict", "models[].state_dict", "models[].state_dict", "server_model.state_dict", "server_model.state_dict", "models[].state_dict", "server_model.state_dict", "server_model.state_dict", "server_model.state_dict", "server_model.state_dict", "models[].state_dict", "models[].state_dict"], "function", ["None"], ["def", "communication", "(", "args", ",", "server_model", ",", "models", ",", "client_weights", ")", ":", "\n", "    ", "prev_models", "=", "[", "copy", ".", "deepcopy", "(", "model", ")", "for", "model", "in", "models", "]", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "# aggregate params", "\n", "        ", "if", "args", ".", "FL", ".", "MODEL_NAME", ".", "lower", "(", ")", ".", "find", "(", "'fedbn'", ")", ">=", "0", ":", "\n", "            ", "for", "key", "in", "server_model", ".", "state_dict", "(", ")", ".", "keys", "(", ")", ":", "\n", "                ", "if", "'bn'", "not", "in", "key", ":", "\n", "                    ", "temp", "=", "torch", ".", "zeros_like", "(", "server_model", ".", "state_dict", "(", ")", "[", "key", "]", ",", "\n", "dtype", "=", "torch", ".", "float32", ")", "\n", "temp", "+=", "client_weights", "[", "client_idx", "]", "*", "models", "[", "client_idx", "]", ".", "state_dict", "(", ")", "[", "key", "]", "\n", "server_model", ".", "state_dict", "(", ")", "[", "key", "]", ".", "data", ".", "copy_", "(", "temp", ")", "\n", "for", "client_idx", "in", "range", "(", "args", ".", "FL", ".", "CLIENTS_NUM", ")", ":", "\n", "                        ", "models", "[", "client_idx", "]", ".", "state_dict", "(", ")", "[", "key", "]", ".", "data", ".", "copy_", "(", "server_model", ".", "state_dict", "(", ")", "[", "key", "]", ")", "\n", "", "", "", "", "else", ":", "\n", "            ", "for", "key", "in", "server_model", ".", "state_dict", "(", ")", ".", "keys", "(", ")", ":", "\n", "# num_batches_tracked is a non trainable LongTensor and", "\n", "# num_batches_tracked are the same for all clients for the given datasets", "\n", "                ", "if", "'num_batches_tracked'", "in", "key", ":", "\n", "                    ", "server_model", ".", "state_dict", "(", ")", "[", "key", "]", ".", "data", ".", "copy_", "(", "\n", "models", "[", "0", "]", ".", "state_dict", "(", ")", "[", "key", "]", ")", "# first model -> server model", "\n", "", "else", ":", "\n", "                    ", "temp", "=", "torch", ".", "zeros_like", "(", "server_model", ".", "state_dict", "(", ")", "[", "key", "]", ")", "\n", "for", "client_idx", "in", "range", "(", "len", "(", "client_weights", ")", ")", ":", "\n", "                        ", "temp", "+=", "client_weights", "[", "client_idx", "]", "*", "models", "[", "client_idx", "]", ".", "state_dict", "(", ")", "[", "key", "]", "\n", "", "server_model", ".", "state_dict", "(", ")", "[", "key", "]", ".", "data", ".", "copy_", "(", "temp", ")", "\n", "for", "client_idx", "in", "range", "(", "len", "(", "client_weights", ")", ")", ":", "\n", "                        ", "models", "[", "client_idx", "]", ".", "state_dict", "(", ")", "[", "key", "]", ".", "data", ".", "copy_", "(", "server_model", ".", "state_dict", "(", ")", "[", "key", "]", ")", "\n", "", "", "", "", "", "return", "server_model", ",", "models", ",", "prev_models", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_fedmri.None.train.create_all_model": [[53, 91], ["models.unet_module.Encoder", "models.unet_module.Unet_A", "models.unet_module.Unet_B", "copy.deepcopy", "models.unet_module.Except_LastLayer.state_dict().keys", "torch.device", "models.unet_module.Encoder", "models.unet_module.Unet_A", "[].data.copy_", "copy.deepcopy().to", "models.unet_module.Except_LastLayer.state_dict().keys", "torch.device", "models.unet_module.Unet_A", "models.unet_module.Except_LastLayer.state_dict", "range", "[].data.copy_", "copy.deepcopy().to", "torch.device", "models.unet_module.Except_LastLayer", "models.unet_module.Unet_A", "models.unet_module.Except_LastLayer.state_dict", "copy.deepcopy", "len", "models.unet_module.Except_LastLayer.state_dict", "range", "copy.deepcopy().to", "models.unet_module.Except_LastLayer.state_dict().keys", "models.unet_module.Except_LastLayer.state_dict", "copy.deepcopy", "len", "range", "[].data.copy_", "model.state_dict", "copy.deepcopy", "len", "models.unet_module.Except_LastLayer.state_dict", "model.state_dict", "models.unet_module.Except_LastLayer.state_dict", "model.state_dict"], "function", ["home.repos.pwc.inspect_result.chunmeifeng_fedmri.util.misc.NestedTensor.to", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.util.misc.NestedTensor.to", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.util.misc.NestedTensor.to"], ["", "def", "create_all_model", "(", "args", ",", "share", "=", "'only_encoder'", ",", "client_num", "=", "2", ")", ":", "\n", "    ", "if", "share", "==", "'only_encoder+different_decoder'", "and", "client_num", "==", "2", ":", "\n", "        ", "server_model", "=", "Encoder", "(", ")", "\n", "model_pd", "=", "Unet_A", "(", ")", "\n", "model_pdfs", "=", "Unet_B", "(", ")", "\n", "models", "=", "[", "model_pd", ",", "model_pdfs", "]", "\n", "\n", "for", "model", "in", "models", ":", "\n", "            ", "for", "key", "in", "server_model", ".", "state_dict", "(", ")", ".", "keys", "(", ")", ":", "\n", "                ", "model", ".", "state_dict", "(", ")", "[", "key", "]", ".", "data", ".", "copy_", "(", "server_model", ".", "state_dict", "(", ")", "[", "key", "]", ")", "\n", "\n", "", "", "", "elif", "share", "==", "'only_encoder'", ":", "\n", "        ", "device", "=", "torch", ".", "device", "(", "args", ".", "SOLVER", ".", "DEVICE", ")", "\n", "server_model", "=", "Encoder", "(", ")", "\n", "model_0", "=", "Unet_A", "(", ")", "\n", "models", "=", "[", "copy", ".", "deepcopy", "(", "model_0", ")", ".", "to", "(", "device", ")", "for", "idx", "in", "range", "(", "len", "(", "args", ".", "DATASET", ".", "CLIENTS", ")", ")", "]", "\n", "\n", "for", "model", "in", "models", ":", "\n", "            ", "for", "key", "in", "server_model", ".", "state_dict", "(", ")", ".", "keys", "(", ")", ":", "\n", "                ", "model", ".", "state_dict", "(", ")", "[", "key", "]", ".", "data", ".", "copy_", "(", "server_model", ".", "state_dict", "(", ")", "[", "key", "]", ")", "\n", "\n", "", "", "", "elif", "share", "==", "'whole_archi'", ":", "\n", "        ", "device", "=", "torch", ".", "device", "(", "args", ".", "SOLVER", ".", "DEVICE", ")", "\n", "server_model", "=", "Unet_A", "(", ")", "\n", "models", "=", "[", "copy", ".", "deepcopy", "(", "server_model", ")", ".", "to", "(", "device", ")", "for", "idx", "in", "range", "(", "len", "(", "args", ".", "DATASET", ".", "CLIENTS", ")", ")", "]", "\n", "\n", "", "elif", "share", "==", "'except_last'", ":", "\n", "        ", "device", "=", "torch", ".", "device", "(", "args", ".", "SOLVER", ".", "DEVICE", ")", "\n", "server_model", "=", "Except_LastLayer", "(", ")", "\n", "model_0", "=", "Unet_A", "(", ")", "\n", "models", "=", "[", "copy", ".", "deepcopy", "(", "model_0", ")", ".", "to", "(", "device", ")", "for", "idx", "in", "range", "(", "len", "(", "args", ".", "DATASET", ".", "CLIENTS", ")", ")", "]", "\n", "\n", "for", "model", "in", "models", ":", "\n", "            ", "for", "key", "in", "server_model", ".", "state_dict", "(", ")", ".", "keys", "(", ")", ":", "\n", "                ", "model", ".", "state_dict", "(", ")", "[", "key", "]", ".", "data", ".", "copy_", "(", "server_model", ".", "state_dict", "(", ")", "[", "key", "]", ")", "\n", "\n", "", "", "", "prev_models", "=", "[", "copy", ".", "deepcopy", "(", "model", ")", "for", "model", "in", "models", "]", "\n", "return", "server_model", ",", "models", ",", "prev_models", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_fedmri.None.train.prlog": [[92, 97], ["print", "open", "f.write", "f.write"], "function", ["None"], ["", "def", "prlog", "(", "i", ",", "args", "=", "cfg", ")", ":", "\n", "    ", "print", "(", "i", ")", "\n", "with", "open", "(", "'./logs/{}/log.txt'", ".", "format", "(", "args", ".", "FL", ".", "MODEL_NAME", ")", ",", "'a+'", ")", "as", "f", ":", "\n", "        ", "f", ".", "write", "(", "i", ")", "\n", "f", ".", "write", "(", "'\\n'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_fedmri.None.train.main": [[99, 250], ["os.path.join", "os.path.join", "os.makedirs", "os.makedirs", "train.prlog", "train.prlog", "train.prlog", "vars", "train.create_all_model", "models.loss.Criterion", "torch.manual_seed", "numpy.random.seed", "random.seed", "torch.device", "server_model.to", "models.loss.Criterion.to", "sum", "train.prlog", "enumerate", "data.build_different_dataloader", "data.build_different_dataloader", "time.time", "range", "enumerate", "str", "train.prlog", "train.prlog", "util.misc.get_rank", "model.to", "sum", "train.prlog", "torch.optim.RMSprop", "torch.optim.lr_scheduler.StepLR", "torch.load", "train.prlog", "server_model.load_state_dict", "enumerate", "train.prlog", "range", "train.communication", "range", "train.prlog", "train.prlog", "train.prlog", "train.prlog", "train.prlog", "train.prlog", "enumerate", "time.time", "datetime.timedelta", "datetime.datetime.now().strftime", "range", "range", "p.numel", "range", "range", "len", "key.replace", "models[].load_state_dict", "optimizers[].load_state_dict", "lr_schedulers[].load_state_dict", "range", "range", "range", "lr_schedulers[].step", "engine.evaluate", "os.path.join", "torch.save", "getattr", "server_model.parameters", "p.numel", "models[].parameters", "torch.load.items", "pathlib.Path().mkdir", "os.path.join", "enumerate", "torch.load.update", "torch.save", "int", "datetime.datetime.now", "model.parameters", "engine.train_one_epoch_ours", "train.prlog", "engine.train_one_epoch", "train.prlog", "server_model.state_dict", "models[].state_dict", "optimizers[].state_dict", "lr_schedulers[].state_dict", "server_model.state_dict", "torch.load.update", "pathlib.Path", "models[].state_dict", "optimizers[].state_dict", "lr_schedulers[].state_dict"], "function", ["home.repos.pwc.inspect_result.chunmeifeng_fedmri.None.train_multi_gpu.prlog", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.None.train_multi_gpu.prlog", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.None.train_multi_gpu.prlog", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.None.train_multi_gpu.create_all_model", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.models.loss.Criterion", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.util.misc.NestedTensor.to", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.util.misc.NestedTensor.to", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.None.train_multi_gpu.prlog", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.__init__.build_different_dataloader", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.__init__.build_different_dataloader", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.None.train_multi_gpu.prlog", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.None.train_multi_gpu.prlog", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.util.misc.get_rank", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.util.misc.NestedTensor.to", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.None.train_multi_gpu.prlog", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.None.train_multi_gpu.prlog", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.None.train_multi_gpu.prlog", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.None.train_multi_gpu.communication", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.None.train_multi_gpu.prlog", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.None.train_multi_gpu.prlog", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.None.train_multi_gpu.prlog", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.None.train_multi_gpu.prlog", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.None.train_multi_gpu.prlog", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.None.train_multi_gpu.prlog", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.None.engine_ki.evaluate", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.util.metric.AverageMeter.update", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.None.engine_ki.train_one_epoch_ours", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.None.train_multi_gpu.prlog", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.None.engine_ki.train_one_epoch", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.None.train_multi_gpu.prlog", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.util.metric.AverageMeter.update"], ["", "", "def", "main", "(", "args", ")", ":", "\n", "# build criterion and model first", "\n", "\n", "    ", "args", ".", "OUTPUTDIR", "=", "os", ".", "path", ".", "join", "(", "args", ".", "OUTPUTDIR", ",", "args", ".", "FL", ".", "MODEL_NAME", ")", "\n", "args", ".", "LOGDIR", "=", "os", ".", "path", ".", "join", "(", "args", ".", "LOGDIR", ",", "args", ".", "FL", ".", "MODEL_NAME", ")", "\n", "os", ".", "makedirs", "(", "args", ".", "OUTPUTDIR", ",", "exist_ok", "=", "True", ")", "\n", "os", ".", "makedirs", "(", "args", ".", "LOGDIR", ",", "exist_ok", "=", "True", ")", "\n", "prlog", "(", "'\\n\\n\\n'", ")", "\n", "prlog", "(", "'New job assigned {}'", ".", "format", "(", "datetime", ".", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "'%Y-%m-%d-%H:%M'", ")", ")", ")", "\n", "prlog", "(", "'\\nconfig:\\n{}\\n'", ".", "format", "(", "args", ")", ")", "\n", "for", "arg", "in", "vars", "(", "args", ")", ":", "\n", "        ", "prlog", "(", "'{}: {}\\n'", ".", "format", "(", "arg", ",", "getattr", "(", "args", ",", "arg", ")", ")", ")", "\n", "\n", "", "server_model", ",", "models", ",", "prev_models", "=", "create_all_model", "(", "args", ",", "args", ".", "FL", ".", "SHARE_WAY", ",", "args", ".", "FL", ".", "CLIENTS_NUM", ")", "\n", "criterion", "=", "Criterion", "(", "args", ")", "\n", "\n", "start_epoch", "=", "0", "\n", "\n", "seed", "=", "args", ".", "SEED", "+", "get_rank", "(", ")", "\n", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "random", ".", "seed", "(", "seed", ")", "\n", "\n", "device", "=", "torch", ".", "device", "(", "args", ".", "SOLVER", ".", "DEVICE", ")", "\n", "\n", "client_weights", "=", "[", "1", "/", "args", ".", "FL", ".", "CLIENTS_NUM", "for", "i", "in", "range", "(", "args", ".", "FL", ".", "CLIENTS_NUM", ")", "]", "\n", "\n", "assessment_dict", "=", "[", "\n", "{", "'loss_train_epoch'", ":", "[", "]", ",", "'loss_val_epoch'", ":", "[", "]", ",", "'nmse_epoch'", ":", "[", "]", ",", "'psnr_epoch'", ":", "[", "]", ",", "'ssim_epoch'", ":", "[", "]", "}", "for", "i", "in", "\n", "range", "(", "args", ".", "FL", ".", "CLIENTS_NUM", ")", "]", "\n", "\n", "server_model", ".", "to", "(", "device", ")", "\n", "for", "model", "in", "models", ":", "\n", "        ", "model", ".", "to", "(", "device", ")", "\n", "", "criterion", ".", "to", "(", "device", ")", "\n", "\n", "# show params for server/clients", "\n", "n_parameters", "=", "sum", "(", "p", ".", "numel", "(", ")", "for", "p", "in", "server_model", ".", "parameters", "(", ")", "if", "p", ".", "requires_grad", ")", "\n", "prlog", "(", "'Volume of SERVER model params:    {:.2f} M'", ".", "format", "(", "n_parameters", "/", "1024", "/", "1024", ")", ")", "\n", "for", "idx", ",", "model", "in", "enumerate", "(", "models", ")", ":", "\n", "        ", "n_parameters", "=", "sum", "(", "p", ".", "numel", "(", ")", "for", "p", "in", "model", ".", "parameters", "(", ")", "if", "p", ".", "requires_grad", ")", "\n", "prlog", "(", "'Volume of CLIENT {:<8s} params: {:.2f} M'", ".", "format", "(", "args", ".", "DATASET", ".", "CLIENTS", "[", "idx", "]", ",", "n_parameters", "/", "1024", "/", "1024", ")", ")", "\n", "\n", "# build optimizer", "\n", "", "optimizers", "=", "[", "torch", ".", "optim", ".", "RMSprop", "(", "params", "=", "models", "[", "idx", "]", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "SOLVER", ".", "LR", "[", "idx", "]", ")", "for", "idx", "in", "\n", "range", "(", "args", ".", "FL", ".", "CLIENTS_NUM", ")", "]", "\n", "lr_schedulers", "=", "[", "torch", ".", "optim", ".", "lr_scheduler", ".", "StepLR", "(", "optimizers", "[", "idx", "]", ",", "args", ".", "SOLVER", ".", "LR_DROP", ",", "args", ".", "SOLVER", ".", "LR_GAMMA", ")", "for", "idx", "\n", "in", "range", "(", "args", ".", "FL", ".", "CLIENTS_NUM", ")", "]", "\n", "\n", "dataloader_train", ",", "_", "=", "build_different_dataloader", "(", "args", ",", "mode", "=", "'train'", ")", "\n", "dataloader_val", "=", "build_different_dataloader", "(", "args", ",", "mode", "=", "'val'", ")", "\n", "\n", "if", "len", "(", "args", ".", "DATASET", ".", "CLIENTS", ")", "==", "2", "and", "args", ".", "FL", ".", "DATAMIX", ":", "\n", "        ", "data_name", "=", "[", "'mix0'", ",", "'mix1'", "]", "\n", "", "else", ":", "# NOTE", "\n", "        ", "data_name", "=", "args", ".", "DATASET", ".", "CLIENTS", "\n", "\n", "", "if", "args", ".", "RESUME", "!=", "''", ":", "\n", "        ", "checkpoint", "=", "torch", ".", "load", "(", "args", ".", "RESUME", ")", "\n", "checkpoint", "=", "checkpoint", "[", "'server_model'", "]", "\n", "checkpoint", "=", "{", "key", ".", "replace", "(", "\"module.\"", ",", "\"\"", ")", ":", "val", "for", "key", ",", "val", "in", "checkpoint", ".", "items", "(", ")", "}", "\n", "prlog", "(", "'resume from %s'", "%", "args", ".", "RESUME", ")", "\n", "server_model", ".", "load_state_dict", "(", "checkpoint", "[", "'server_model'", "]", ",", "strict", "=", "True", ")", "\n", "for", "idx", ",", "client_name", "in", "enumerate", "(", "args", ".", "DATASET", ".", "CLIENTS", ")", ":", "\n", "            ", "models", "[", "idx", "]", ".", "load_state_dict", "(", "checkpoint", "[", "'model_{}'", ".", "format", "(", "client_name", ")", "]", ")", "\n", "optimizers", "[", "idx", "]", ".", "load_state_dict", "(", "checkpoint", "[", "'optimizer_{}'", ".", "format", "(", "client_name", ")", "]", ")", "\n", "lr_schedulers", "[", "idx", "]", ".", "load_state_dict", "(", "checkpoint", "[", "'lr_scheduler_{}'", ".", "format", "(", "(", "client_name", ")", ")", "]", ")", "\n", "", "start_epoch", "=", "checkpoint", "[", "'epoch'", "]", "+", "1", "\n", "\n", "", "start_time", "=", "time", ".", "time", "(", ")", "\n", "\n", "best_status", "=", "[", "{", "'NMSE'", ":", "10000000", ",", "'PSNR'", ":", "0", ",", "'SSIM'", ":", "0", "}", "for", "i", "in", "range", "(", "args", ".", "FL", ".", "CLIENTS_NUM", ")", "]", "\n", "best_checkpoint", "=", "[", "{", "}", "for", "i", "in", "range", "(", "args", ".", "FL", ".", "CLIENTS_NUM", ")", "]", "\n", "\n", "for", "epoch", "in", "range", "(", "start_epoch", ",", "args", ".", "TRAIN", ".", "EPOCHS", ")", ":", "\n", "        ", "prlog", "(", "'------------------ Epoch {:<3d}---------------------'", ".", "format", "(", "epoch", "+", "1", ")", ")", "\n", "for", "client_idx", "in", "range", "(", "args", ".", "FL", ".", "CLIENTS_NUM", ")", ":", "\n", "            ", "for", "_", "in", "range", "(", "args", ".", "TRAIN", ".", "SMALL_EPOCHS", ")", ":", "\n", "                ", "if", "epoch", ">", "0", ":", "\n", "                    ", "train_status", "=", "train_one_epoch_ours", "(", "args", ",", "\n", "models", "[", "client_idx", "]", ",", "server_model", ",", "prev_models", ",", "criterion", ",", "\n", "dataloader_train", "[", "client_idx", "]", ",", "\n", "optimizers", "[", "client_idx", "]", ",", "epoch", ",", "args", ".", "SOLVER", ".", "PRINT_FREQ", ",", "device", ")", "\n", "prlog", "(", "' {:<11s}| Train Loss: {:.4f} | C_Loss: {:.4f} | P_Loss: {:.4f}'", ".", "format", "(", "data_name", "[", "client_idx", "]", ",", "\n", "train_status", "[", "'loss'", "]", ",", "\n", "train_status", "[", "\n", "'c_loss'", "]", ",", "\n", "train_status", "[", "\n", "'p_loss'", "]", ")", ")", "\n", "", "else", ":", "\n", "                    ", "train_status", "=", "train_one_epoch", "(", "args", ",", "\n", "models", "[", "client_idx", "]", ",", "criterion", ",", "dataloader_train", "[", "client_idx", "]", ",", "\n", "optimizers", "[", "client_idx", "]", ",", "epoch", ",", "args", ".", "SOLVER", ".", "PRINT_FREQ", ",", "device", ")", "\n", "prlog", "(", "' {:<11s}| Train Loss: {:.4f}'", ".", "format", "(", "data_name", "[", "client_idx", "]", ",", "train_status", "[", "'loss'", "]", ")", ")", "\n", "\n", "", "", "lr_schedulers", "[", "client_idx", "]", ".", "step", "(", ")", "\n", "\n", "# aggregation", "\n", "", "server_model", ",", "models", ",", "prev_models", "=", "communication", "(", "args", ",", "server_model", ",", "models", ",", "client_weights", ")", "\n", "\n", "for", "client_idx", "in", "range", "(", "args", ".", "FL", ".", "CLIENTS_NUM", ")", ":", "\n", "\n", "            ", "model", ",", "val_loader", "=", "models", "[", "client_idx", "]", ",", "dataloader_val", "[", "client_idx", "]", "\n", "eval_status", "=", "evaluate", "(", "args", ",", "model", ",", "criterion", ",", "val_loader", ",", "device", ",", "data_name", "[", "client_idx", "]", ")", "\n", "if", "eval_status", "[", "'PSNR'", "]", ">", "best_status", "[", "client_idx", "]", "[", "'PSNR'", "]", ":", "\n", "                ", "best_status", "[", "client_idx", "]", "=", "eval_status", "\n", "best_checkpoint", "[", "client_idx", "]", "=", "{", "\n", "'server_model'", ":", "server_model", ".", "state_dict", "(", ")", ",", "\n", "'model_{}'", ".", "format", "(", "client_idx", ")", ":", "models", "[", "client_idx", "]", ".", "state_dict", "(", ")", ",", "\n", "'optimizer'", ":", "optimizers", "[", "client_idx", "]", ".", "state_dict", "(", ")", ",", "\n", "'lr_scheduler'", ":", "lr_schedulers", "[", "client_idx", "]", ".", "state_dict", "(", ")", ",", "\n", "'epoch'", ":", "epoch", ",", "\n", "'args'", ":", "args", ",", "\n", "}", "\n", "\n", "# save model", "\n", "", "if", "args", ".", "OUTPUTDIR", ":", "\n", "                ", "Path", "(", "args", ".", "OUTPUTDIR", ")", ".", "mkdir", "(", "parents", "=", "True", ",", "exist_ok", "=", "True", ")", "\n", "checkpoint_path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "OUTPUTDIR", ",", "f'checkpoint-epoch_{(epoch + 1):04}.pth'", ")", "\n", "checkpoint", "=", "{", "'server_model'", ":", "server_model", ".", "state_dict", "(", ")", "}", "\n", "for", "idx", ",", "client_name", "in", "enumerate", "(", "args", ".", "DATASET", ".", "CLIENTS", ")", ":", "\n", "                    ", "checkpoint", ".", "update", "(", "{", "\n", "'model_{}'", ".", "format", "(", "client_name", ")", ":", "models", "[", "idx", "]", ".", "state_dict", "(", ")", ",", "\n", "'optimizer_{}'", ".", "format", "(", "client_name", ")", ":", "optimizers", "[", "idx", "]", ".", "state_dict", "(", ")", ",", "\n", "'lr_scheduler_{}'", ".", "format", "(", "(", "client_name", ")", ")", ":", "lr_schedulers", "[", "idx", "]", ".", "state_dict", "(", ")", "\n", "}", ")", "\n", "\n", "", "checkpoint", ".", "update", "(", "{", "\n", "'epoch'", ":", "epoch", ",", "\n", "'args'", ":", "args", ",", "\n", "}", ")", "\n", "\n", "torch", ".", "save", "(", "checkpoint", ",", "checkpoint_path", ")", "\n", "\n", "", "", "", "for", "idx", ",", "client_name", "in", "enumerate", "(", "args", ".", "DATASET", ".", "CLIENTS", ")", ":", "\n", "        ", "prlog", "(", "'The best epoch for CLIENT {:<8s} is {}'", ".", "format", "(", "client_name", ",", "best_checkpoint", "[", "idx", "]", "[", "'epoch'", "]", "+", "1", ")", ")", "\n", "prlog", "(", "\"Results ----------\"", ")", "\n", "prlog", "(", "\"NMSE: {:.4}\"", ".", "format", "(", "best_status", "[", "idx", "]", "[", "'NMSE'", "]", ")", ")", "\n", "prlog", "(", "\"PSNR: {:.4}\"", ".", "format", "(", "best_status", "[", "idx", "]", "[", "'PSNR'", "]", ")", ")", "\n", "prlog", "(", "\"SSIM: {:.4}\"", ".", "format", "(", "best_status", "[", "idx", "]", "[", "'SSIM'", "]", ")", ")", "\n", "prlog", "(", "\"------------------\"", ")", "\n", "\n", "", "if", "args", ".", "OUTPUTDIR", ":", "\n", "        ", "for", "idx", ",", "client_name", "in", "enumerate", "(", "args", ".", "DATASET", ".", "CLIENTS", ")", ":", "\n", "            ", "checkpoint_path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "OUTPUTDIR", ",", "'client_{}_best.pth'", ".", "format", "(", "client_name", ")", ")", "\n", "torch", ".", "save", "(", "best_checkpoint", "[", "idx", "]", ",", "checkpoint_path", ")", "\n", "\n", "", "", "total_time", "=", "time", ".", "time", "(", ")", "-", "start_time", "\n", "total_time_str", "=", "str", "(", "datetime", ".", "timedelta", "(", "seconds", "=", "int", "(", "total_time", ")", ")", ")", "\n", "prlog", "(", "'Training time {}'", ".", "format", "(", "total_time_str", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_fedmri.None.engine_ki.norm": [[19, 22], ["data.min", "data.max", "data.min"], "function", ["home.repos.pwc.inspect_result.chunmeifeng_fedmri.util.misc.SmoothedValue.max"], ["def", "norm", "(", "data", ",", "dtype", "=", "'max'", ",", "eps", "=", "1e-11", ")", ":", "\n", "    ", "data", "=", "(", "data", "-", "data", ".", "min", "(", ")", ")", "/", "(", "data", ".", "max", "(", ")", "-", "data", ".", "min", "(", ")", "+", "eps", ")", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_fedmri.None.engine_ki.prlog": [[24, 26], ["print"], "function", ["None"], ["", "def", "prlog", "(", "i", ",", "args", "=", "cfg", ")", ":", "\n", "    ", "print", "(", "i", ")", "\n", "# with open('./logs/{}/log.txt'.format(args.FL.MODEL_NAME), 'a+') as f:", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_fedmri.None.engine_ki.train_one_epoch_ours": [[30, 104], ["model.train", "server_model1.eval", "server_model2.eval", "enumerate", "int", "prev.eval", "mask_kspace.float().to.float().to", "mask.unsqueeze().to.unsqueeze().to", "target.to.unsqueeze", "target.to.to", "model", "criterion", "optimizer.zero_grad", "total_loss.backward", "optimizer.step", "len", "len", "len", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "server_model1.named_parameters", "server_model2.named_parameters", "loss[].item", "loss[].item", "len", "mask_kspace.float().to.float", "mask.unsqueeze().to.unsqueeze", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "server_model1.named_parameters", "server_model2.named_parameters", "w_diff.item", "len", "dict", "dict", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "loss[].item", "w_diff.item", "model.named_parameters", "model.named_parameters", "dict", "dict", "dict", "dict", "prev_model.named_parameters", "model.named_parameters", "prev_model.named_parameters", "model.named_parameters"], "function", ["home.repos.pwc.inspect_result.chunmeifeng_fedmri.util.misc.NestedTensor.to", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.util.misc.NestedTensor.to", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.util.misc.NestedTensor.to", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.fastmri.norm", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.fastmri.norm", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.fastmri.norm", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.fastmri.norm", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.fastmri.norm", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.fastmri.norm", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.fastmri.norm", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.fastmri.norm"], ["", "def", "train_one_epoch_ours", "(", "args", ",", "model", ":", "torch", ".", "nn", ".", "Module", ",", "server_model1", ":", "torch", ".", "nn", ".", "Module", ",", "\n", "server_model2", ":", "torch", ".", "nn", ".", "Module", ",", "\n", "prev_models", ",", "criterion", ":", "torch", ".", "nn", ".", "Module", ",", "\n", "data_loader", ":", "Iterable", ",", "optimizer", ":", "torch", ".", "optim", ".", "Optimizer", ",", "\n", "epoch", ":", "int", ",", "print_freq", ":", "int", ",", "device", ":", "str", ")", ":", "\n", "    ", "model", ".", "train", "(", ")", "\n", "loss_all", "=", "0", "\n", "c_loss", "=", "0", "\n", "p_loss", "=", "0", "\n", "\n", "server_model1", ".", "eval", "(", ")", "\n", "server_model2", ".", "eval", "(", ")", "\n", "for", "prev", "in", "prev_models", ":", "\n", "        ", "prev", ".", "eval", "(", ")", "\n", "\n", "", "for", "i", ",", "data", "in", "enumerate", "(", "data_loader", ")", ":", "\n", "        ", "mask_kspace", ",", "mask", ",", "target", ",", "mean", ",", "std", ",", "fname", ",", "slice_num", "=", "data", "# NOTE", "\n", "\n", "mask_kspace", "=", "mask_kspace", ".", "float", "(", ")", ".", "to", "(", "device", ")", "\n", "mask", "=", "mask", ".", "unsqueeze", "(", "3", ")", ".", "to", "(", "device", ")", "\n", "#image = image.unsqueeze(1)  # (8,1,320,320)", "\n", "target", "=", "target", ".", "unsqueeze", "(", "1", ")", "\n", "\n", "#image = image.to(device)", "\n", "target", "=", "target", ".", "to", "(", "device", ")", "\n", "\n", "outputs", "=", "model", "(", "mask_kspace", ",", "mask", ")", "\n", "\n", "loss", "=", "criterion", "(", "outputs", ",", "target", ")", "\n", "\n", "if", "i", ">", "0", ":", "\n", "            ", "posi", "=", "torch", ".", "tensor", "(", "0.", ",", "device", "=", "device", ")", "\n", "nega", "=", "torch", ".", "tensor", "(", "0.", ",", "device", "=", "device", ")", "\n", "for", "name", ",", "param", "in", "server_model1", ".", "named_parameters", "(", ")", ":", "\n", "                ", "curr_params", "=", "dict", "(", "model", ".", "named_parameters", "(", ")", ")", "[", "'unet1.'", "+", "name", "]", "\n", "posi", "+=", "torch", ".", "norm", "(", "curr_params", "-", "param", ",", "p", "=", "1", ")", "\n", "\n", "", "for", "name", ",", "param", "in", "server_model2", ".", "named_parameters", "(", ")", ":", "\n", "                ", "curr_params", "=", "dict", "(", "model", ".", "named_parameters", "(", ")", ")", "[", "'unet2.'", "+", "name", "]", "\n", "posi", "+=", "torch", ".", "norm", "(", "curr_params", "-", "param", ",", "p", "=", "1", ")", "\n", "\n", "", "for", "prev_model", "in", "prev_models", ":", "\n", "                ", "for", "name", ",", "_", "in", "server_model1", ".", "named_parameters", "(", ")", ":", "\n", "                    ", "prev_param", "=", "dict", "(", "prev_model", ".", "named_parameters", "(", ")", ")", "[", "'unet1.'", "+", "name", "]", "\n", "curr_params", "=", "dict", "(", "model", ".", "named_parameters", "(", ")", ")", "[", "'unet1.'", "+", "name", "]", "\n", "nega", "+=", "torch", ".", "norm", "(", "curr_params", "-", "prev_param", ",", "p", "=", "1", ")", "\n", "\n", "", "", "for", "prev_model", "in", "prev_models", ":", "\n", "                ", "for", "name", ",", "_", "in", "server_model2", ".", "named_parameters", "(", ")", ":", "\n", "                    ", "prev_param", "=", "dict", "(", "prev_model", ".", "named_parameters", "(", ")", ")", "[", "'unet2.'", "+", "name", "]", "\n", "curr_params", "=", "dict", "(", "model", ".", "named_parameters", "(", ")", ")", "[", "'unet2.'", "+", "name", "]", "\n", "nega", "+=", "torch", ".", "norm", "(", "curr_params", "-", "prev_param", ",", "p", "=", "1", ")", "\n", "\n", "", "", "w_diff", "=", "posi", "/", "(", "nega", "+", "1e-14", ")", "\n", "\n", "total_loss", "=", "args", ".", "lam", "*", "loss", "[", "'loss'", "]", "+", "args", ".", "beta", "*", "w_diff", "\n", "loss_all", "+=", "args", ".", "lam", "*", "loss", "[", "'loss'", "]", ".", "item", "(", ")", "+", "args", ".", "beta", "*", "w_diff", ".", "item", "(", ")", "\n", "p_loss", "+=", "args", ".", "beta", "*", "w_diff", ".", "item", "(", ")", "\n", "\n", "", "else", ":", "\n", "            ", "total_loss", "=", "loss", "[", "'loss'", "]", "\n", "loss_all", "+=", "loss", "[", "'loss'", "]", ".", "item", "(", ")", "\n", "\n", "", "optimizer", ".", "zero_grad", "(", ")", "\n", "total_loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "c_loss", "+=", "args", ".", "lam", "*", "loss", "[", "'loss'", "]", ".", "item", "(", ")", "\n", "\n", "", "c_loss_avg", "=", "c_loss", "/", "len", "(", "data_loader", ")", "\n", "p_loss_avg", "=", "p_loss", "/", "len", "(", "data_loader", ")", "\n", "loss_avg", "=", "loss_all", "/", "len", "(", "data_loader", ")", "\n", "global_step", "=", "int", "(", "epoch", "*", "len", "(", "data_loader", ")", "+", "len", "(", "data_loader", ")", ")", "\n", "\n", "return", "{", "\"loss\"", ":", "loss_avg", ",", "\"global_step\"", ":", "global_step", ",", "'c_loss'", ":", "c_loss_avg", ",", "'p_loss'", ":", "p_loss_avg", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_fedmri.None.engine_ki.train_one_epoch": [[106, 136], ["model.train", "enumerate", "int", "mask_kspace.float().to.float().to", "mask.unsqueeze().to.unsqueeze().to", "target.to.unsqueeze", "target.to.to", "model", "criterion", "optimizer.zero_grad", "loss[].backward", "optimizer.step", "loss[].item", "len", "len", "mask_kspace.float().to.float", "mask.unsqueeze().to.unsqueeze", "len"], "function", ["home.repos.pwc.inspect_result.chunmeifeng_fedmri.util.misc.NestedTensor.to", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.util.misc.NestedTensor.to", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.util.misc.NestedTensor.to"], ["", "def", "train_one_epoch", "(", "args", ",", "model", ":", "torch", ".", "nn", ".", "Module", ",", "criterion", ":", "torch", ".", "nn", ".", "Module", ",", "\n", "data_loader", ":", "Iterable", ",", "optimizer", ":", "torch", ".", "optim", ".", "Optimizer", ",", "\n", "epoch", ":", "int", ",", "print_freq", ":", "int", ",", "device", ":", "str", ")", ":", "\n", "    ", "model", ".", "train", "(", ")", "\n", "loss_all", "=", "0", "\n", "for", "_", ",", "data", "in", "enumerate", "(", "data_loader", ")", ":", "\n", "        ", "mask_kspace", ",", "mask", ",", "target", ",", "mean", ",", "std", ",", "fname", ",", "slice_num", "=", "data", "# NOTE", "\n", "\n", "mask_kspace", "=", "mask_kspace", ".", "float", "(", ")", ".", "to", "(", "device", ")", "\n", "mask", "=", "mask", ".", "unsqueeze", "(", "3", ")", ".", "to", "(", "device", ")", "\n", "#image = image.unsqueeze(1)  # (8,1,320,320)", "\n", "target", "=", "target", ".", "unsqueeze", "(", "1", ")", "\n", "\n", "#image = image.to(device)", "\n", "target", "=", "target", ".", "to", "(", "device", ")", "\n", "\n", "outputs", "=", "model", "(", "mask_kspace", ",", "mask", ")", "\n", "\n", "loss", "=", "criterion", "(", "outputs", ",", "target", ")", "\n", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", "[", "'loss'", "]", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "loss_all", "+=", "loss", "[", "'loss'", "]", ".", "item", "(", ")", "\n", "\n", "", "loss_avg", "=", "loss_all", "/", "len", "(", "data_loader", ")", "\n", "global_step", "=", "int", "(", "epoch", "*", "len", "(", "data_loader", ")", "+", "len", "(", "data_loader", ")", ")", "\n", "\n", "return", "{", "\"loss\"", ":", "loss_avg", ",", "\"global_step\"", ":", "global_step", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_fedmri.None.engine_ki.evaluate": [[138, 222], ["torch.no_grad", "torch.no_grad", "model.eval", "criterion.eval", "criterion.to", "util.metric.AverageMeter", "util.metric.AverageMeter", "util.metric.AverageMeter", "collections.defaultdict", "collections.defaultdict", "time.time", "collections.defaultdict.keys", "str", "engine_ki.prlog", "mask_kspace.float().to.float().to", "mask.unsqueeze().to.unsqueeze().to", "mean.to.unsqueeze().unsqueeze", "std.to.unsqueeze().unsqueeze", "mean.to.to", "std.to.to", "target.to.to", "model", "outputs.squeeze.squeeze", "criterion", "loss[].item", "enumerate", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "util.metric.nmse", "util.metric.psnr", "util.metric.ssim", "util.metric.AverageMeter.update", "util.metric.AverageMeter.update", "util.metric.AverageMeter.update", "time.time", "datetime.timedelta", "len", "torch.stack.cpu().numpy", "torch.stack.cpu().numpy", "torch.stack.cpu().numpy", "torch.stack.cpu().numpy", "torch.stack.cpu().numpy", "torch.stack.cpu().numpy", "mask_kspace.float().to.float", "mask.unsqueeze().to.unsqueeze", "mean.to.unsqueeze", "std.to.unsqueeze", "int", "output_dic[].items", "target_dic[].items", "torch.stack.cpu", "torch.stack.cpu", "torch.stack.cpu", "torch.stack.cpu", "torch.stack.cpu", "torch.stack.cpu"], "function", ["home.repos.pwc.inspect_result.chunmeifeng_fedmri.util.misc.NestedTensor.to", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.None.train_multi_gpu.prlog", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.util.misc.NestedTensor.to", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.util.misc.NestedTensor.to", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.util.misc.NestedTensor.to", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.util.misc.NestedTensor.to", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.util.misc.NestedTensor.to", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.util.metric.nmse", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.util.metric.psnr", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.util.metric.ssim", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.util.metric.AverageMeter.update", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.util.metric.AverageMeter.update", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.util.metric.AverageMeter.update"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "evaluate", "(", "args", ",", "model", ",", "criterion", ",", "data_loader", ",", "device", ",", "data_name", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "criterion", ".", "eval", "(", ")", "\n", "criterion", ".", "to", "(", "device", ")", "\n", "\n", "nmse_meter", "=", "AverageMeter", "(", ")", "\n", "psnr_meter", "=", "AverageMeter", "(", ")", "\n", "ssim_meter", "=", "AverageMeter", "(", ")", "\n", "\n", "# _nmse_meter = AverageMeter()", "\n", "# _psnr_meter = AverageMeter()", "\n", "# _ssim_meter = AverageMeter()", "\n", "\n", "output_dic", "=", "defaultdict", "(", "dict", ")", "\n", "target_dic", "=", "defaultdict", "(", "dict", ")", "\n", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "\n", "loss_all", "=", "0", "\n", "\n", "for", "data", "in", "data_loader", ":", "\n", "        ", "mask_kspace", ",", "mask", ",", "target", ",", "mean", ",", "std", ",", "fname", ",", "slice_num", "=", "data", "# NOTE", "\n", "\n", "mask_kspace", "=", "mask_kspace", ".", "float", "(", ")", ".", "to", "(", "device", ")", "\n", "mask", "=", "mask", ".", "unsqueeze", "(", "3", ")", ".", "to", "(", "device", ")", "\n", "\n", "mean", "=", "mean", ".", "unsqueeze", "(", "1", ")", ".", "unsqueeze", "(", "2", ")", "# (8,1,1)", "\n", "std", "=", "std", ".", "unsqueeze", "(", "1", ")", ".", "unsqueeze", "(", "2", ")", "\n", "mean", "=", "mean", ".", "to", "(", "device", ")", "\n", "std", "=", "std", ".", "to", "(", "device", ")", "\n", "\n", "# image = image.to(device)", "\n", "target", "=", "target", ".", "to", "(", "device", ")", "\n", "\n", "b", "=", "mask_kspace", ".", "shape", "[", "0", "]", "\n", "\n", "outputs", "=", "model", "(", "mask_kspace", ",", "mask", ")", "\n", "outputs", "=", "outputs", ".", "squeeze", "(", "1", ")", "\n", "\n", "outputs", "=", "outputs", "*", "std", "+", "mean", "\n", "target", "=", "target", "*", "std", "+", "mean", "\n", "\n", "loss", "=", "criterion", "(", "outputs", ",", "target", ")", "\n", "loss_all", "+=", "loss", "[", "'loss'", "]", ".", "item", "(", ")", "\n", "\n", "# our_nmse = nmse(target.cpu().numpy(), outputs.cpu().numpy())", "\n", "# our_psnr = psnr(norm(target.cpu().numpy()), norm(outputs.cpu().numpy()))", "\n", "# our_ssim = ssim(target.cpu().numpy(), outputs.cpu().numpy())", "\n", "\n", "# nmse_meter.update(our_nmse, b)", "\n", "# psnr_meter.update(our_psnr, b)", "\n", "# ssim_meter.update(our_ssim, b)", "\n", "\n", "for", "i", ",", "f", "in", "enumerate", "(", "fname", ")", ":", "\n", "            ", "output_dic", "[", "f", "]", "[", "slice_num", "[", "i", "]", "]", "=", "outputs", "[", "i", "]", "\n", "target_dic", "[", "f", "]", "[", "slice_num", "[", "i", "]", "]", "=", "target", "[", "i", "]", "\n", "\n", "", "", "for", "name", "in", "output_dic", ".", "keys", "(", ")", ":", "\n", "        ", "f_output", "=", "torch", ".", "stack", "(", "[", "v", "for", "_", ",", "v", "in", "output_dic", "[", "name", "]", ".", "items", "(", ")", "]", ")", "# (34,320,320)", "\n", "f_target", "=", "torch", ".", "stack", "(", "[", "v", "for", "_", ",", "v", "in", "target_dic", "[", "name", "]", ".", "items", "(", ")", "]", ")", "# (34,320,320)", "\n", "# our_nmse = nmse(norm(f_target.cpu().numpy()), norm(f_output.cpu().numpy()))", "\n", "# our_psnr = psnr(norm(f_target.cpu().numpy()), norm(f_output.cpu().numpy()))", "\n", "# our_ssim = ssim(norm(f_target.cpu().numpy()), norm(f_output.cpu().numpy()))", "\n", "our_nmse", "=", "nmse", "(", "f_target", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "f_output", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "our_psnr", "=", "psnr", "(", "f_target", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "f_output", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "our_ssim", "=", "ssim", "(", "f_target", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "f_output", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "\n", "nmse_meter", ".", "update", "(", "our_nmse", ",", "1", ")", "\n", "psnr_meter", ".", "update", "(", "our_psnr", ",", "1", ")", "\n", "ssim_meter", ".", "update", "(", "our_ssim", ",", "1", ")", "\n", "\n", "", "total_time", "=", "time", ".", "time", "(", ")", "-", "start_time", "\n", "total_time_str", "=", "str", "(", "datetime", ".", "timedelta", "(", "seconds", "=", "int", "(", "total_time", ")", ")", ")", "\n", "loss_avg", "=", "loss_all", "/", "len", "(", "data_loader", ")", "\n", "\n", "prlog", "(", "' {:<11s}|   Val Loss: {:.4f} Evaluate time {} NMSE: {:.4f} PSNR: {:.4f} SSIM: {:.4f}'", ".", "format", "(", "data_name", ",", "\n", "loss_avg", ",", "\n", "total_time_str", ",", "\n", "nmse_meter", ".", "avg", ",", "\n", "psnr_meter", ".", "avg", ",", "\n", "ssim_meter", ".", "avg", ")", ")", "\n", "\n", "return", "{", "'loss'", ":", "loss_avg", ",", "'NMSE'", ":", "nmse_meter", ".", "avg", ",", "'PSNR'", ":", "psnr_meter", ".", "avg", ",", "'SSIM'", ":", "ssim_meter", ".", "avg", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_fedmri.None.engine_ki.distributed_concat": [[223, 229], ["torch.distributed.all_gather", "torch.distributed.all_gather", "torch.cat", "torch.cat", "tensor.clone", "range", "torch.distributed.get_world_size", "torch.distributed.get_world_size"], "function", ["home.repos.pwc.inspect_result.chunmeifeng_fedmri.util.misc.all_gather", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.util.misc.all_gather", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.util.misc.get_world_size", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.util.misc.get_world_size"], ["", "def", "distributed_concat", "(", "tensor", ",", "num_total_examples", ")", ":", "\n", "    ", "output_tensors", "=", "[", "tensor", ".", "clone", "(", ")", "for", "_", "in", "range", "(", "torch", ".", "distributed", ".", "get_world_size", "(", ")", ")", "]", "\n", "torch", ".", "distributed", ".", "all_gather", "(", "output_tensors", ",", "tensor", ")", "\n", "concat", "=", "torch", ".", "cat", "(", "output_tensors", ",", "dim", "=", "0", ")", "\n", "# truncate the dummy elements added by SequentialDistributedSampler", "\n", "return", "concat", "[", ":", "num_total_examples", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_fedmri.None.engine_ki.distributed_evaluate": [[231, 310], ["torch.no_grad", "torch.no_grad", "model.eval", "util.metric.AverageMeter", "util.metric.AverageMeter", "util.metric.AverageMeter", "time.time", "engine_ki.distributed_concat", "engine_ki.distributed_concat", "engine_ki.distributed_concat", "engine_ki.distributed_concat", "collections.defaultdict", "collections.defaultdict", "final_id.cpu().numpy.cpu().numpy", "enumerate", "collections.defaultdict.keys", "str", "engine_ki.prlog", "image.to.unsqueeze", "mean.to.unsqueeze().unsqueeze", "std.to.unsqueeze().unsqueeze", "mean.to.to", "std.to.to", "image.to.to", "target.to.to", "model", "outputs.squeeze.squeeze", "torch.zeros", "torch.zeros", "enumerate", "output_list.append", "target_list.append", "id_list.append", "slice_list.append", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "util.metric.nmse", "util.metric.psnr", "util.metric.ssim", "util.metric.AverageMeter.update", "util.metric.AverageMeter.update", "util.metric.AverageMeter.update", "time.time", "datetime.timedelta", "len", "final_id.cpu().numpy.cpu", "torch.stack.cpu().numpy", "torch.stack.cpu().numpy", "torch.stack.cpu().numpy", "torch.stack.cpu().numpy", "torch.stack.cpu().numpy", "torch.stack.cpu().numpy", "mean.to.unsqueeze", "std.to.unsqueeze", "int", "int", "hashlib.sha256().hexdigest", "output_dic[].items", "target_dic[].items", "torch.stack.cpu", "torch.stack.cpu", "torch.stack.cpu", "torch.stack.cpu", "torch.stack.cpu", "torch.stack.cpu", "hashlib.sha256", "fn.encode"], "function", ["home.repos.pwc.inspect_result.chunmeifeng_fedmri.None.engine_ki.distributed_concat", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.None.engine_ki.distributed_concat", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.None.engine_ki.distributed_concat", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.None.engine_ki.distributed_concat", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.None.train_multi_gpu.prlog", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.util.misc.NestedTensor.to", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.util.misc.NestedTensor.to", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.util.misc.NestedTensor.to", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.util.misc.NestedTensor.to", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.util.metric.nmse", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.util.metric.psnr", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.util.metric.ssim", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.util.metric.AverageMeter.update", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.util.metric.AverageMeter.update", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.util.metric.AverageMeter.update"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "distributed_evaluate", "(", "args", ",", "model", ",", "data_loader", ",", "device", ",", "data_name", ",", "dataset_len", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "\n", "nmse_meter", "=", "AverageMeter", "(", ")", "\n", "psnr_meter", "=", "AverageMeter", "(", ")", "\n", "ssim_meter", "=", "AverageMeter", "(", ")", "\n", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "\n", "output_list", "=", "[", "]", "\n", "target_list", "=", "[", "]", "\n", "id_list", "=", "[", "]", "\n", "slice_list", "=", "[", "]", "\n", "\n", "for", "data", "in", "data_loader", ":", "\n", "        ", "image", ",", "target", ",", "mean", ",", "std", ",", "fname", ",", "slice_num", "=", "data", "# torch.float32", "\n", "image", "=", "image", ".", "unsqueeze", "(", "1", ")", "\n", "\n", "mean", "=", "mean", ".", "unsqueeze", "(", "1", ")", ".", "unsqueeze", "(", "2", ")", "# (8,1,1)", "\n", "std", "=", "std", ".", "unsqueeze", "(", "1", ")", ".", "unsqueeze", "(", "2", ")", "\n", "mean", "=", "mean", ".", "to", "(", "device", ")", "\n", "std", "=", "std", ".", "to", "(", "device", ")", "\n", "\n", "image", "=", "image", ".", "to", "(", "device", ")", "\n", "target", "=", "target", ".", "to", "(", "device", ")", "\n", "outputs", "=", "model", "(", "image", ")", "\n", "\n", "outputs", "=", "outputs", ".", "squeeze", "(", "1", ")", "\n", "outputs", "=", "outputs", "*", "std", "+", "mean", "\n", "target", "=", "target", "*", "std", "+", "mean", "\n", "\n", "fid", "=", "torch", ".", "zeros", "(", "len", "(", "fname", ")", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "outputs", ".", "device", ")", "\n", "for", "i", ",", "fn", "in", "enumerate", "(", "fname", ")", ":", "\n", "            ", "fid", "[", "i", "]", "=", "(", "\n", "int", "(", "hashlib", ".", "sha256", "(", "fn", ".", "encode", "(", "\"utf-8\"", ")", ")", ".", "hexdigest", "(", ")", ",", "16", ")", "%", "10", "**", "12", "\n", ")", "\n", "\n", "", "output_list", ".", "append", "(", "outputs", ")", "\n", "target_list", ".", "append", "(", "target", ")", "\n", "id_list", ".", "append", "(", "fid", ")", "\n", "slice_list", ".", "append", "(", "slice_num", ")", "\n", "\n", "", "final_id", "=", "distributed_concat", "(", "torch", ".", "cat", "(", "(", "id_list", ")", ",", "dim", "=", "0", ")", ",", "dataset_len", ")", "\n", "final_output", "=", "distributed_concat", "(", "torch", ".", "cat", "(", "(", "output_list", ")", ",", "dim", "=", "0", ")", ",", "dataset_len", ")", "\n", "final_target", "=", "distributed_concat", "(", "torch", ".", "cat", "(", "(", "target_list", ")", ",", "dim", "=", "0", ")", ",", "dataset_len", ")", "\n", "final_slice", "=", "distributed_concat", "(", "torch", ".", "cat", "(", "(", "slice_list", ")", ",", "dim", "=", "0", ")", ",", "dataset_len", ")", "\n", "\n", "output_dic", "=", "defaultdict", "(", "dict", ")", "\n", "target_dic", "=", "defaultdict", "(", "dict", ")", "\n", "\n", "final_id", "=", "final_id", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "for", "i", ",", "f", "in", "enumerate", "(", "final_id", ")", ":", "\n", "        ", "output_dic", "[", "f", "]", "[", "final_slice", "[", "i", "]", "]", "=", "final_output", "[", "i", "]", "\n", "target_dic", "[", "f", "]", "[", "final_slice", "[", "i", "]", "]", "=", "final_target", "[", "i", "]", "\n", "\n", "", "for", "name", "in", "output_dic", ".", "keys", "(", ")", ":", "\n", "        ", "f_output", "=", "torch", ".", "stack", "(", "[", "v", "for", "_", ",", "v", "in", "output_dic", "[", "name", "]", ".", "items", "(", ")", "]", ")", "\n", "f_target", "=", "torch", ".", "stack", "(", "[", "v", "for", "_", ",", "v", "in", "target_dic", "[", "name", "]", ".", "items", "(", ")", "]", ")", "\n", "our_nmse", "=", "nmse", "(", "f_target", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "f_output", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "our_psnr", "=", "psnr", "(", "f_target", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "f_output", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "our_ssim", "=", "ssim", "(", "f_target", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "f_output", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "\n", "nmse_meter", ".", "update", "(", "our_nmse", ",", "1", ")", "\n", "psnr_meter", ".", "update", "(", "our_psnr", ",", "1", ")", "\n", "ssim_meter", ".", "update", "(", "our_ssim", ",", "1", ")", "\n", "\n", "\n", "\n", "", "total_time", "=", "time", ".", "time", "(", ")", "-", "start_time", "\n", "total_time_str", "=", "str", "(", "datetime", ".", "timedelta", "(", "seconds", "=", "int", "(", "total_time", ")", ")", ")", "\n", "\n", "prlog", "(", "' {:<11s}|    Evaluate time {} NMSE: {:.4f} PSNR: {:.4f} SSIM: {:.4f}'", ".", "format", "(", "data_name", ",", "total_time_str", ",", "\n", "nmse_meter", ".", "avg", ",", "\n", "psnr_meter", ".", "avg", ",", "\n", "ssim_meter", ".", "avg", ")", ")", "\n", "\n", "return", "{", "'NMSE'", ":", "nmse_meter", ".", "avg", ",", "'PSNR'", ":", "psnr_meter", ".", "avg", ",", "'SSIM'", ":", "ssim_meter", ".", "avg", "}", "", "", ""]], "home.repos.pwc.inspect_result.chunmeifeng_fedmri.None.train_kinet.communication": [[23, 42], ["copy.deepcopy", "torch.no_grad", "server_model1.state_dict().keys", "server_model2.state_dict().keys", "torch.zeros_like", "range", "[].data.copy_", "range", "torch.zeros_like", "range", "[].data.copy_", "range", "server_model1.state_dict", "len", "len", "[].data.copy_", "server_model2.state_dict", "len", "len", "[].data.copy_", "server_model1.state_dict", "server_model2.state_dict", "models[].state_dict", "server_model1.state_dict", "models[].state_dict", "server_model2.state_dict", "server_model1.state_dict", "server_model2.state_dict", "models[].state_dict", "models[].state_dict"], "function", ["None"], ["def", "communication", "(", "args", ",", "server_model1", ",", "server_model2", ",", "models", ",", "client_weights", ")", ":", "\n", "    ", "prev_models", "=", "[", "copy", ".", "deepcopy", "(", "model", ")", "for", "model", "in", "models", "]", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "key", "in", "server_model1", ".", "state_dict", "(", ")", ".", "keys", "(", ")", ":", "\n", "            ", "temp", "=", "torch", ".", "zeros_like", "(", "server_model1", ".", "state_dict", "(", ")", "[", "key", "]", ")", "\n", "for", "client_idx", "in", "range", "(", "len", "(", "client_weights", ")", ")", ":", "\n", "                ", "temp", "+=", "client_weights", "[", "client_idx", "]", "*", "models", "[", "client_idx", "]", ".", "state_dict", "(", ")", "[", "'unet1.'", "+", "key", "]", "\n", "", "server_model1", ".", "state_dict", "(", ")", "[", "key", "]", ".", "data", ".", "copy_", "(", "temp", ")", "\n", "for", "client_idx", "in", "range", "(", "len", "(", "client_weights", ")", ")", ":", "\n", "                ", "models", "[", "client_idx", "]", ".", "state_dict", "(", ")", "[", "'unet1.'", "+", "key", "]", ".", "data", ".", "copy_", "(", "server_model1", ".", "state_dict", "(", ")", "[", "key", "]", ")", "\n", "\n", "", "", "for", "key", "in", "server_model2", ".", "state_dict", "(", ")", ".", "keys", "(", ")", ":", "\n", "            ", "temp", "=", "torch", ".", "zeros_like", "(", "server_model2", ".", "state_dict", "(", ")", "[", "key", "]", ")", "\n", "for", "client_idx", "in", "range", "(", "len", "(", "client_weights", ")", ")", ":", "\n", "                ", "temp", "+=", "client_weights", "[", "client_idx", "]", "*", "models", "[", "client_idx", "]", ".", "state_dict", "(", ")", "[", "'unet2.'", "+", "key", "]", "\n", "", "server_model2", ".", "state_dict", "(", ")", "[", "key", "]", ".", "data", ".", "copy_", "(", "temp", ")", "\n", "for", "client_idx", "in", "range", "(", "len", "(", "client_weights", ")", ")", ":", "\n", "                ", "models", "[", "client_idx", "]", ".", "state_dict", "(", ")", "[", "'unet2.'", "+", "key", "]", ".", "data", ".", "copy_", "(", "server_model2", ".", "state_dict", "(", ")", "[", "key", "]", ")", "\n", "", "", "", "return", "models", ",", "prev_models", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_fedmri.None.train_kinet.create_all_model": [[44, 59], ["torch.device", "models.unet_module.Encoder", "models.unet_module.Encoder", "models.unet.KIKNET", "copy.deepcopy().to", "models.unet_module.Encoder.state_dict().keys", "models.unet_module.Encoder.state_dict().keys", "copy.deepcopy", "range", "[].data.copy_", "[].data.copy_", "copy.deepcopy", "len", "models.unet_module.Encoder.state_dict", "models.unet_module.Encoder.state_dict", "models.unet_module.Encoder.state_dict", "models.unet_module.Encoder.state_dict", "model.state_dict", "model.state_dict"], "function", ["home.repos.pwc.inspect_result.chunmeifeng_fedmri.util.misc.NestedTensor.to"], ["", "def", "create_all_model", "(", "args", ",", "share", "=", "'only_encoder'", ",", "client_num", "=", "2", ")", ":", "\n", "    ", "device", "=", "torch", ".", "device", "(", "args", ".", "SOLVER", ".", "DEVICE", ")", "\n", "server_model1", "=", "Encoder", "(", "in_chans", "=", "2", ")", "\n", "server_model2", "=", "Encoder", "(", "in_chans", "=", "1", ")", "\n", "model_0", "=", "KIKNET", "(", "in_chans", "=", "2", ",", "out_chans", "=", "1", ")", "\n", "models", "=", "[", "copy", ".", "deepcopy", "(", "model_0", ")", ".", "to", "(", "device", ")", "for", "idx", "in", "range", "(", "len", "(", "args", ".", "DATASET", ".", "CLIENTS", ")", ")", "]", "\n", "for", "model", "in", "models", ":", "\n", "        ", "for", "key", "in", "server_model1", ".", "state_dict", "(", ")", ".", "keys", "(", ")", ":", "\n", "            ", "model", ".", "state_dict", "(", ")", "[", "'unet1.'", "+", "key", "]", ".", "data", ".", "copy_", "(", "server_model1", ".", "state_dict", "(", ")", "[", "key", "]", ")", "\n", "", "", "for", "model", "in", "models", ":", "\n", "        ", "for", "key", "in", "server_model2", ".", "state_dict", "(", ")", ".", "keys", "(", ")", ":", "\n", "            ", "model", ".", "state_dict", "(", ")", "[", "'unet2.'", "+", "key", "]", ".", "data", ".", "copy_", "(", "server_model2", ".", "state_dict", "(", ")", "[", "key", "]", ")", "\n", "\n", "", "", "prev_models", "=", "[", "copy", ".", "deepcopy", "(", "model", ")", "for", "model", "in", "models", "]", "\n", "return", "server_model1", ",", "server_model2", ",", "models", ",", "prev_models", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_fedmri.None.train_kinet.prlog": [[60, 62], ["print"], "function", ["None"], ["", "def", "prlog", "(", "i", ",", "args", "=", "cfg", ")", ":", "\n", "    ", "print", "(", "i", ")", "\n", "# with open('./logs/{}/log.txt'.format(args.FL.MODEL_NAME), 'a+') as f:", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_fedmri.None.train_kinet.main": [[67, 224], ["util.misc.init_distributed_mode", "os.path.join", "os.path.join", "print", "os.makedirs", "os.makedirs", "train_kinet.prlog", "train_kinet.prlog", "train_kinet.prlog", "vars", "train_kinet.create_all_model", "models.loss.Criterion", "torch.manual_seed", "numpy.random.seed", "random.seed", "torch.device", "server_model1.to", "server_model2.to", "models.loss.Criterion.to", "sum", "train_kinet.prlog", "enumerate", "data.build_different_dataloader", "data.build_different_dataloader", "time.time", "range", "enumerate", "str", "train_kinet.prlog", "train_kinet.prlog", "util.misc.get_rank", "model.to", "sum", "train_kinet.prlog", "torch.optim.RMSprop", "torch.optim.lr_scheduler.StepLR", "print", "torch.load", "train_kinet.prlog", "server_model1.load_state_dict", "enumerate", "train_kinet.prlog", "range", "train_kinet.communication", "range", "train_kinet.prlog", "train_kinet.prlog", "train_kinet.prlog", "train_kinet.prlog", "train_kinet.prlog", "train_kinet.prlog", "enumerate", "time.time", "datetime.timedelta", "datetime.datetime.now().strftime", "range", "range", "p.numel", "range", "range", "len", "len", "key.replace", "models[].load_state_dict", "optimizers[].load_state_dict", "lr_schedulers[].load_state_dict", "range", "range", "range", "lr_schedulers[].step", "engine.evaluate", "os.path.join", "torch.save", "getattr", "server_model1.parameters", "p.numel", "models[].parameters", "torch.load.items", "pathlib.Path().mkdir", "os.path.join", "enumerate", "torch.load.update", "torch.save", "int", "datetime.datetime.now", "model.parameters", "engine.train_one_epoch_ours", "train_kinet.prlog", "engine.train_one_epoch", "train_kinet.prlog", "server_model1.state_dict", "models[].state_dict", "optimizers[].state_dict", "lr_schedulers[].state_dict", "server_model1.state_dict", "torch.load.update", "pathlib.Path", "models[].state_dict", "optimizers[].state_dict", "lr_schedulers[].state_dict"], "function", ["home.repos.pwc.inspect_result.chunmeifeng_fedmri.util.misc.init_distributed_mode", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.None.train_multi_gpu.prlog", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.None.train_multi_gpu.prlog", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.None.train_multi_gpu.prlog", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.None.train_multi_gpu.create_all_model", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.models.loss.Criterion", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.util.misc.NestedTensor.to", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.util.misc.NestedTensor.to", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.util.misc.NestedTensor.to", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.None.train_multi_gpu.prlog", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.__init__.build_different_dataloader", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.__init__.build_different_dataloader", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.None.train_multi_gpu.prlog", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.None.train_multi_gpu.prlog", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.util.misc.get_rank", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.util.misc.NestedTensor.to", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.None.train_multi_gpu.prlog", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.None.train_multi_gpu.prlog", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.None.train_multi_gpu.prlog", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.None.train_multi_gpu.communication", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.None.train_multi_gpu.prlog", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.None.train_multi_gpu.prlog", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.None.train_multi_gpu.prlog", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.None.train_multi_gpu.prlog", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.None.train_multi_gpu.prlog", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.None.train_multi_gpu.prlog", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.None.engine_ki.evaluate", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.util.metric.AverageMeter.update", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.None.engine_ki.train_one_epoch_ours", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.None.train_multi_gpu.prlog", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.None.engine_ki.train_one_epoch", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.None.train_multi_gpu.prlog", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.util.metric.AverageMeter.update"], ["", "def", "main", "(", "args", ")", ":", "\n", "# build criterion and model first", "\n", "    ", "init_distributed_mode", "(", "args", ")", "\n", "args", ".", "OUTPUTDIR", "=", "os", ".", "path", ".", "join", "(", "args", ".", "OUTPUTDIR", ",", "args", ".", "FL", ".", "MODEL_NAME", ")", "\n", "args", ".", "LOGDIR", "=", "os", ".", "path", ".", "join", "(", "args", ".", "LOGDIR", ",", "args", ".", "FL", ".", "MODEL_NAME", ")", "\n", "print", "(", "args", ".", "LOGDIR", ")", "\n", "os", ".", "makedirs", "(", "args", ".", "OUTPUTDIR", ",", "exist_ok", "=", "True", ")", "\n", "os", ".", "makedirs", "(", "args", ".", "LOGDIR", ",", "exist_ok", "=", "True", ")", "\n", "prlog", "(", "'\\n\\n\\n'", ")", "\n", "prlog", "(", "'New job assigned {}'", ".", "format", "(", "datetime", ".", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "'%Y-%m-%d-%H:%M'", ")", ")", ")", "\n", "prlog", "(", "'\\nconfig:\\n{}\\n'", ".", "format", "(", "args", ")", ")", "\n", "for", "arg", "in", "vars", "(", "args", ")", ":", "\n", "        ", "prlog", "(", "'{}: {}\\n'", ".", "format", "(", "arg", ",", "getattr", "(", "args", ",", "arg", ")", ")", ")", "\n", "\n", "", "server_model1", ",", "server_model2", ",", "models", ",", "prev_models", "=", "create_all_model", "(", "args", ",", "args", ".", "FL", ".", "SHARE_WAY", ",", "args", ".", "FL", ".", "CLIENTS_NUM", ")", "\n", "criterion", "=", "Criterion", "(", "args", ")", "\n", "\n", "start_epoch", "=", "0", "\n", "\n", "seed", "=", "args", ".", "SEED", "+", "get_rank", "(", ")", "\n", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "random", ".", "seed", "(", "seed", ")", "\n", "\n", "device", "=", "torch", ".", "device", "(", "args", ".", "SOLVER", ".", "DEVICE", ")", "\n", "\n", "client_weights", "=", "[", "1", "/", "args", ".", "FL", ".", "CLIENTS_NUM", "for", "i", "in", "range", "(", "args", ".", "FL", ".", "CLIENTS_NUM", ")", "]", "\n", "\n", "assessment_dict", "=", "[", "\n", "{", "'loss_train_epoch'", ":", "[", "]", ",", "'loss_val_epoch'", ":", "[", "]", ",", "'nmse_epoch'", ":", "[", "]", ",", "'psnr_epoch'", ":", "[", "]", ",", "'ssim_epoch'", ":", "[", "]", "}", "for", "i", "in", "\n", "range", "(", "args", ".", "FL", ".", "CLIENTS_NUM", ")", "]", "\n", "\n", "server_model1", ".", "to", "(", "device", ")", "\n", "server_model2", ".", "to", "(", "device", ")", "\n", "for", "model", "in", "models", ":", "\n", "        ", "model", ".", "to", "(", "device", ")", "\n", "", "criterion", ".", "to", "(", "device", ")", "\n", "\n", "# show params for server/clients", "\n", "n_parameters", "=", "sum", "(", "p", ".", "numel", "(", ")", "for", "p", "in", "server_model1", ".", "parameters", "(", ")", "if", "p", ".", "requires_grad", ")", "\n", "prlog", "(", "'Volume of SERVER model params:    {:.2f} M'", ".", "format", "(", "n_parameters", "/", "1024", "/", "1024", ")", ")", "\n", "for", "idx", ",", "model", "in", "enumerate", "(", "models", ")", ":", "\n", "        ", "n_parameters", "=", "sum", "(", "p", ".", "numel", "(", ")", "for", "p", "in", "model", ".", "parameters", "(", ")", "if", "p", ".", "requires_grad", ")", "\n", "prlog", "(", "'Volume of CLIENT {:<8s} params: {:.2f} M'", ".", "format", "(", "args", ".", "DATASET", ".", "CLIENTS", "[", "idx", "]", ",", "n_parameters", "/", "1024", "/", "1024", ")", ")", "\n", "\n", "# build optimizer", "\n", "", "optimizers", "=", "[", "torch", ".", "optim", ".", "RMSprop", "(", "params", "=", "models", "[", "idx", "]", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "SOLVER", ".", "LR", "[", "idx", "]", ")", "for", "idx", "in", "\n", "range", "(", "args", ".", "FL", ".", "CLIENTS_NUM", ")", "]", "\n", "lr_schedulers", "=", "[", "torch", ".", "optim", ".", "lr_scheduler", ".", "StepLR", "(", "optimizers", "[", "idx", "]", ",", "args", ".", "SOLVER", ".", "LR_DROP", ",", "args", ".", "SOLVER", ".", "LR_GAMMA", ")", "for", "idx", "\n", "in", "range", "(", "args", ".", "FL", ".", "CLIENTS_NUM", ")", "]", "\n", "\n", "dataloader_train", ",", "_", "=", "build_different_dataloader", "(", "args", ",", "mode", "=", "'train'", ")", "\n", "for", "dataloader", "in", "dataloader_train", ":", "\n", "        ", "print", "(", "len", "(", "dataloader", ")", ")", "\n", "", "dataloader_val", ",", "_", "=", "build_different_dataloader", "(", "args", ",", "mode", "=", "'val'", ")", "\n", "\n", "if", "len", "(", "args", ".", "DATASET", ".", "CLIENTS", ")", "==", "2", "and", "args", ".", "FL", ".", "DATAMIX", ":", "\n", "        ", "data_name", "=", "[", "'mix0'", ",", "'mix1'", "]", "\n", "", "else", ":", "# NOTE", "\n", "        ", "data_name", "=", "args", ".", "DATASET", ".", "CLIENTS", "\n", "\n", "", "if", "args", ".", "RESUME", "!=", "''", ":", "\n", "        ", "checkpoint", "=", "torch", ".", "load", "(", "args", ".", "RESUME", ")", "\n", "checkpoint", "=", "checkpoint", "[", "'server_model'", "]", "\n", "checkpoint", "=", "{", "key", ".", "replace", "(", "\"module.\"", ",", "\"\"", ")", ":", "val", "for", "key", ",", "val", "in", "checkpoint", ".", "items", "(", ")", "}", "\n", "prlog", "(", "'resume from %s'", "%", "args", ".", "RESUME", ")", "\n", "server_model1", ".", "load_state_dict", "(", "checkpoint", "[", "'server_model'", "]", ",", "strict", "=", "True", ")", "\n", "for", "idx", ",", "client_name", "in", "enumerate", "(", "args", ".", "DATASET", ".", "CLIENTS", ")", ":", "\n", "            ", "models", "[", "idx", "]", ".", "load_state_dict", "(", "checkpoint", "[", "'model_{}'", ".", "format", "(", "client_name", ")", "]", ")", "\n", "optimizers", "[", "idx", "]", ".", "load_state_dict", "(", "checkpoint", "[", "'optimizer_{}'", ".", "format", "(", "client_name", ")", "]", ")", "\n", "lr_schedulers", "[", "idx", "]", ".", "load_state_dict", "(", "checkpoint", "[", "'lr_scheduler_{}'", ".", "format", "(", "(", "client_name", ")", ")", "]", ")", "\n", "", "start_epoch", "=", "checkpoint", "[", "'epoch'", "]", "+", "1", "\n", "\n", "", "start_time", "=", "time", ".", "time", "(", ")", "\n", "\n", "best_status", "=", "[", "{", "'NMSE'", ":", "10000000", ",", "'PSNR'", ":", "0", ",", "'SSIM'", ":", "0", "}", "for", "i", "in", "range", "(", "args", ".", "FL", ".", "CLIENTS_NUM", ")", "]", "\n", "best_checkpoint", "=", "[", "{", "}", "for", "i", "in", "range", "(", "args", ".", "FL", ".", "CLIENTS_NUM", ")", "]", "\n", "\n", "for", "epoch", "in", "range", "(", "start_epoch", ",", "args", ".", "TRAIN", ".", "EPOCHS", ")", ":", "\n", "        ", "prlog", "(", "'------------------ Epoch {:<3d}---------------------'", ".", "format", "(", "epoch", "+", "1", ")", ")", "\n", "for", "client_idx", "in", "range", "(", "args", ".", "FL", ".", "CLIENTS_NUM", ")", ":", "\n", "\n", "            ", "for", "_", "in", "range", "(", "args", ".", "TRAIN", ".", "SMALL_EPOCHS", ")", ":", "\n", "                ", "if", "epoch", ">", "0", ":", "\n", "                    ", "train_status", "=", "train_one_epoch_ours", "(", "args", ",", "\n", "models", "[", "client_idx", "]", ",", "server_model1", ",", "server_model2", ",", "prev_models", ",", "criterion", ",", "\n", "dataloader_train", "[", "client_idx", "]", ",", "\n", "optimizers", "[", "client_idx", "]", ",", "epoch", ",", "args", ".", "SOLVER", ".", "PRINT_FREQ", ",", "device", ")", "\n", "prlog", "(", "' {:<11s}| Train Loss: {:.4f} | C_Loss: {:.4f} | P_Loss: {:.4f}'", ".", "format", "(", "data_name", "[", "client_idx", "]", ",", "\n", "train_status", "[", "'loss'", "]", ",", "\n", "train_status", "[", "\n", "'c_loss'", "]", ",", "\n", "train_status", "[", "\n", "'p_loss'", "]", ")", ")", "\n", "", "else", ":", "\n", "                    ", "train_status", "=", "train_one_epoch", "(", "args", ",", "\n", "models", "[", "client_idx", "]", ",", "criterion", ",", "dataloader_train", "[", "client_idx", "]", ",", "\n", "optimizers", "[", "client_idx", "]", ",", "epoch", ",", "args", ".", "SOLVER", ".", "PRINT_FREQ", ",", "device", ")", "\n", "prlog", "(", "' {:<11s}| Train Loss: {:.4f}'", ".", "format", "(", "data_name", "[", "client_idx", "]", ",", "train_status", "[", "'loss'", "]", ")", ")", "\n", "\n", "", "", "lr_schedulers", "[", "client_idx", "]", ".", "step", "(", ")", "\n", "\n", "# aggregation", "\n", "", "models", ",", "prev_models", "=", "communication", "(", "args", ",", "server_model1", ",", "server_model2", ",", "models", ",", "client_weights", ")", "\n", "\n", "for", "client_idx", "in", "range", "(", "args", ".", "FL", ".", "CLIENTS_NUM", ")", ":", "\n", "\n", "\n", "            ", "model", ",", "val_loader", "=", "models", "[", "client_idx", "]", ",", "dataloader_val", "[", "client_idx", "]", "\n", "eval_status", "=", "evaluate", "(", "args", ",", "model", ",", "criterion", ",", "val_loader", ",", "device", ",", "data_name", "[", "client_idx", "]", ")", "\n", "if", "eval_status", "[", "'PSNR'", "]", ">", "best_status", "[", "client_idx", "]", "[", "'PSNR'", "]", ":", "\n", "                ", "best_status", "[", "client_idx", "]", "=", "eval_status", "\n", "best_checkpoint", "[", "client_idx", "]", "=", "{", "\n", "'server_model'", ":", "server_model1", ".", "state_dict", "(", ")", ",", "\n", "'model_{}'", ".", "format", "(", "client_idx", ")", ":", "models", "[", "client_idx", "]", ".", "state_dict", "(", ")", ",", "\n", "'optimizer'", ":", "optimizers", "[", "client_idx", "]", ".", "state_dict", "(", ")", ",", "\n", "'lr_scheduler'", ":", "lr_schedulers", "[", "client_idx", "]", ".", "state_dict", "(", ")", ",", "\n", "'epoch'", ":", "epoch", ",", "\n", "'args'", ":", "args", ",", "\n", "}", "\n", "\n", "# save model", "\n", "", "if", "args", ".", "OUTPUTDIR", ":", "\n", "                ", "Path", "(", "args", ".", "OUTPUTDIR", ")", ".", "mkdir", "(", "parents", "=", "True", ",", "exist_ok", "=", "True", ")", "\n", "checkpoint_path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "OUTPUTDIR", ",", "f'checkpoint-epoch_{(epoch + 1):04}.pth'", ")", "\n", "checkpoint", "=", "{", "'server_model'", ":", "server_model1", ".", "state_dict", "(", ")", "}", "\n", "for", "idx", ",", "client_name", "in", "enumerate", "(", "args", ".", "DATASET", ".", "CLIENTS", ")", ":", "\n", "                    ", "checkpoint", ".", "update", "(", "{", "\n", "'model_{}'", ".", "format", "(", "client_name", ")", ":", "models", "[", "idx", "]", ".", "state_dict", "(", ")", ",", "\n", "'optimizer_{}'", ".", "format", "(", "client_name", ")", ":", "optimizers", "[", "idx", "]", ".", "state_dict", "(", ")", ",", "\n", "'lr_scheduler_{}'", ".", "format", "(", "(", "client_name", ")", ")", ":", "lr_schedulers", "[", "idx", "]", ".", "state_dict", "(", ")", "\n", "}", ")", "\n", "\n", "", "checkpoint", ".", "update", "(", "{", "\n", "'epoch'", ":", "epoch", ",", "\n", "'args'", ":", "args", ",", "\n", "}", ")", "\n", "\n", "torch", ".", "save", "(", "checkpoint", ",", "checkpoint_path", ")", "\n", "\n", "", "", "", "for", "idx", ",", "client_name", "in", "enumerate", "(", "args", ".", "DATASET", ".", "CLIENTS", ")", ":", "\n", "        ", "prlog", "(", "'The best epoch for CLIENT {:<8s} is {}'", ".", "format", "(", "client_name", ",", "best_checkpoint", "[", "idx", "]", "[", "'epoch'", "]", "+", "1", ")", ")", "\n", "prlog", "(", "\"Results ----------\"", ")", "\n", "prlog", "(", "\"NMSE: {:.4}\"", ".", "format", "(", "best_status", "[", "idx", "]", "[", "'NMSE'", "]", ")", ")", "\n", "prlog", "(", "\"PSNR: {:.4}\"", ".", "format", "(", "best_status", "[", "idx", "]", "[", "'PSNR'", "]", ")", ")", "\n", "prlog", "(", "\"SSIM: {:.4}\"", ".", "format", "(", "best_status", "[", "idx", "]", "[", "'SSIM'", "]", ")", ")", "\n", "prlog", "(", "\"------------------\"", ")", "\n", "\n", "", "if", "args", ".", "OUTPUTDIR", ":", "\n", "        ", "for", "idx", ",", "client_name", "in", "enumerate", "(", "args", ".", "DATASET", ".", "CLIENTS", ")", ":", "\n", "            ", "checkpoint_path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "OUTPUTDIR", ",", "'client_{}_best.pth'", ".", "format", "(", "client_name", ")", ")", "\n", "torch", ".", "save", "(", "best_checkpoint", "[", "idx", "]", ",", "checkpoint_path", ")", "\n", "\n", "", "", "total_time", "=", "time", ".", "time", "(", ")", "-", "start_time", "\n", "total_time_str", "=", "str", "(", "datetime", ".", "timedelta", "(", "seconds", "=", "int", "(", "total_time", ")", ")", ")", "\n", "prlog", "(", "'Training time {}'", ".", "format", "(", "total_time_str", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_fedmri.None.train_multi_gpu.communication": [[24, 53], ["copy.deepcopy", "torch.no_grad", "args.FL.MODEL_NAME.lower", "server_model.state_dict().keys", "server_model.state_dict().keys", "server_model.state_dict", "torch.zeros_like", "range", "[].data.copy_", "range", "server_model.state_dict", "[].data.copy_", "torch.zeros_like", "range", "[].data.copy_", "range", "len", "len", "[].data.copy_", "len", "len", "[].data.copy_", "server_model.state_dict", "models[].state_dict", "server_model.state_dict", "models[].state_dict", "server_model.state_dict", "models[].state_dict", "server_model.state_dict", "server_model.state_dict", "server_model.state_dict", "server_model.state_dict", "models[].state_dict", "models[].state_dict"], "function", ["None"], ["def", "communication", "(", "args", ",", "server_model", ",", "models", ",", "client_weights", ")", ":", "\n", "    ", "prev_models", "=", "[", "copy", ".", "deepcopy", "(", "model", ")", "for", "model", "in", "models", "]", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "# aggregate params", "\n", "        ", "if", "args", ".", "FL", ".", "MODEL_NAME", ".", "lower", "(", ")", "==", "'fedbn'", ":", "\n", "            ", "for", "key", "in", "server_model", ".", "state_dict", "(", ")", ".", "keys", "(", ")", ":", "\n", "                ", "if", "'.layers.1.'", "not", "in", "key", "and", "'.layers.5'", "not", "in", "key", ":", "\n", "                    ", "temp", "=", "torch", ".", "zeros_like", "(", "server_model", ".", "state_dict", "(", ")", "[", "key", "]", ",", "\n", "dtype", "=", "torch", ".", "float32", ")", "# conv1 (64,3,5,5)  bias 64  conv2 (64,64,5,5)  bias  running_mean  running_var  num_batches_tracked", "\n", "for", "client_idx", "in", "range", "(", "len", "(", "client_weights", ")", ")", ":", "\n", "                        ", "temp", "+=", "client_weights", "[", "client_idx", "]", "*", "models", "[", "client_idx", "]", ".", "state_dict", "(", ")", "[", "key", "]", "\n", "", "server_model", ".", "state_dict", "(", ")", "[", "key", "]", ".", "data", ".", "copy_", "(", "temp", ")", "\n", "for", "client_idx", "in", "range", "(", "len", "(", "client_weights", ")", ")", ":", "\n", "                        ", "models", "[", "client_idx", "]", ".", "state_dict", "(", ")", "[", "key", "]", ".", "data", ".", "copy_", "(", "server_model", ".", "state_dict", "(", ")", "[", "key", "]", ")", "\n", "", "", "", "", "else", ":", "\n", "            ", "for", "key", "in", "server_model", ".", "state_dict", "(", ")", ".", "keys", "(", ")", ":", "\n", "# num_batches_tracked is a non trainable LongTensor and", "\n", "# num_batches_tracked are the same for all clients for the given datasets", "\n", "                ", "if", "'num_batches_tracked'", "in", "key", ":", "\n", "                    ", "server_model", ".", "state_dict", "(", ")", "[", "key", "]", ".", "data", ".", "copy_", "(", "\n", "models", "[", "0", "]", ".", "state_dict", "(", ")", "[", "key", "]", ")", "# first model -> server model", "\n", "", "else", ":", "\n", "                    ", "temp", "=", "torch", ".", "zeros_like", "(", "server_model", ".", "state_dict", "(", ")", "[", "key", "]", ")", "\n", "for", "client_idx", "in", "range", "(", "len", "(", "client_weights", ")", ")", ":", "\n", "                        ", "temp", "+=", "client_weights", "[", "client_idx", "]", "*", "models", "[", "client_idx", "]", ".", "state_dict", "(", ")", "[", "key", "]", "\n", "", "server_model", ".", "state_dict", "(", ")", "[", "key", "]", ".", "data", ".", "copy_", "(", "temp", ")", "\n", "for", "client_idx", "in", "range", "(", "len", "(", "client_weights", ")", ")", ":", "\n", "                        ", "models", "[", "client_idx", "]", ".", "state_dict", "(", ")", "[", "key", "]", ".", "data", ".", "copy_", "(", "server_model", ".", "state_dict", "(", ")", "[", "key", "]", ")", "\n", "", "", "", "", "", "return", "server_model", ",", "models", ",", "prev_models", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_fedmri.None.train_multi_gpu.create_all_model": [[55, 101], ["models.unet_module.Except_LastLayer.to", "models.unet_module.Encoder", "models.unet_module.Unet_A", "models.unet_module.Unet_B", "torch.nn.parallel.DistributedDataParallel", "copy.deepcopy", "models.unet_module.Except_LastLayer.state_dict().keys", "torch.device", "models.unet_module.Encoder", "models.unet_module.Unet_A", "r_models.append", "[].data.copy_", "copy.deepcopy().to", "models.unet_module.Except_LastLayer.state_dict().keys", "torch.device", "models.unet_module.Unet_A", "torch.nn.parallel.DistributedDataParallel", "models.unet_module.Except_LastLayer.state_dict", "range", "[].data.copy_", "copy.deepcopy().to", "torch.device", "models.unet_module.Except_LastLayer", "models.unet_module.Unet_A", "models.unet_module.Except_LastLayer.state_dict", "copy.deepcopy", "len", "models.unet_module.Except_LastLayer.state_dict", "range", "copy.deepcopy().to", "models.unet_module.Except_LastLayer.state_dict().keys", "models.unet_module.Except_LastLayer.state_dict", "copy.deepcopy", "len", "range", "[].data.copy_", "model.state_dict", "copy.deepcopy", "len", "models.unet_module.Except_LastLayer.state_dict", "model.state_dict", "models.unet_module.Except_LastLayer.state_dict", "model.state_dict"], "function", ["home.repos.pwc.inspect_result.chunmeifeng_fedmri.util.misc.NestedTensor.to", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.util.misc.NestedTensor.to", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.util.misc.NestedTensor.to", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.util.misc.NestedTensor.to"], ["", "def", "create_all_model", "(", "args", ",", "share", "=", "'only_encoder'", ",", "client_num", "=", "2", ")", ":", "\n", "    ", "if", "share", "==", "'only_encoder+different_decoder'", "and", "client_num", "==", "2", ":", "\n", "        ", "server_model", "=", "Encoder", "(", ")", "\n", "model_pd", "=", "Unet_A", "(", ")", "\n", "model_pdfs", "=", "Unet_B", "(", ")", "\n", "models", "=", "[", "model_pd", ",", "model_pdfs", "]", "\n", "\n", "for", "model", "in", "models", ":", "\n", "            ", "for", "key", "in", "server_model", ".", "state_dict", "(", ")", ".", "keys", "(", ")", ":", "\n", "                ", "model", ".", "state_dict", "(", ")", "[", "key", "]", ".", "data", ".", "copy_", "(", "server_model", ".", "state_dict", "(", ")", "[", "key", "]", ")", "\n", "\n", "", "", "", "elif", "share", "==", "'only_encoder'", ":", "\n", "        ", "device", "=", "torch", ".", "device", "(", "args", ".", "SOLVER", ".", "DEVICE", ")", "\n", "server_model", "=", "Encoder", "(", ")", "\n", "model_0", "=", "Unet_A", "(", ")", "\n", "models", "=", "[", "copy", ".", "deepcopy", "(", "model_0", ")", ".", "to", "(", "device", ")", "for", "idx", "in", "range", "(", "len", "(", "args", ".", "DATASET", ".", "CLIENTS", ")", ")", "]", "\n", "\n", "for", "model", "in", "models", ":", "\n", "            ", "for", "key", "in", "server_model", ".", "state_dict", "(", ")", ".", "keys", "(", ")", ":", "\n", "                ", "model", ".", "state_dict", "(", ")", "[", "key", "]", ".", "data", ".", "copy_", "(", "server_model", ".", "state_dict", "(", ")", "[", "key", "]", ")", "\n", "\n", "", "", "", "elif", "share", "==", "'whole_archi'", ":", "\n", "        ", "device", "=", "torch", ".", "device", "(", "args", ".", "SOLVER", ".", "DEVICE", ")", "\n", "server_model", "=", "Unet_A", "(", ")", "\n", "models", "=", "[", "copy", ".", "deepcopy", "(", "server_model", ")", ".", "to", "(", "device", ")", "for", "idx", "in", "range", "(", "len", "(", "args", ".", "DATASET", ".", "CLIENTS", ")", ")", "]", "\n", "\n", "", "elif", "share", "==", "'except_last'", ":", "\n", "        ", "device", "=", "torch", ".", "device", "(", "args", ".", "SOLVER", ".", "DEVICE", ")", "\n", "server_model", "=", "Except_LastLayer", "(", ")", "\n", "model_0", "=", "Unet_A", "(", ")", "\n", "models", "=", "[", "copy", ".", "deepcopy", "(", "model_0", ")", ".", "to", "(", "device", ")", "for", "idx", "in", "range", "(", "len", "(", "args", ".", "DATASET", ".", "CLIENTS", ")", ")", "]", "\n", "\n", "for", "model", "in", "models", ":", "\n", "            ", "for", "key", "in", "server_model", ".", "state_dict", "(", ")", ".", "keys", "(", ")", ":", "\n", "                ", "model", ".", "state_dict", "(", ")", "[", "key", "]", ".", "data", ".", "copy_", "(", "server_model", ".", "state_dict", "(", ")", "[", "key", "]", ")", "\n", "\n", "", "", "", "server_model", "=", "server_model", ".", "to", "(", "device", ")", "\n", "r_models", "=", "[", "]", "\n", "if", "args", ".", "distributed", ":", "\n", "        ", "server_model", "=", "torch", ".", "nn", ".", "parallel", ".", "DistributedDataParallel", "(", "server_model", ",", "device_ids", "=", "[", "args", ".", "gpu", "]", ")", "\n", "for", "model", "in", "models", ":", "\n", "            ", "r_models", ".", "append", "(", "torch", ".", "nn", ".", "parallel", ".", "DistributedDataParallel", "(", "model", ",", "device_ids", "=", "[", "args", ".", "gpu", "]", ")", ")", "\n", "", "", "else", ":", "\n", "        ", "r_models", "=", "models", "\n", "", "prev_models", "=", "[", "copy", ".", "deepcopy", "(", "model", ")", "for", "model", "in", "r_models", "]", "\n", "return", "server_model", ",", "r_models", ",", "prev_models", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_fedmri.None.train_multi_gpu.prlog": [[102, 107], ["print", "open", "f.write", "f.write"], "function", ["None"], ["", "def", "prlog", "(", "i", ",", "args", "=", "cfg", ")", ":", "\n", "    ", "print", "(", "i", ")", "\n", "with", "open", "(", "'./logs/{}/log.txt'", ".", "format", "(", "args", ".", "FL", ".", "MODEL_NAME", ")", ",", "'a+'", ")", "as", "f", ":", "\n", "        ", "f", ".", "write", "(", "i", ")", "\n", "f", ".", "write", "(", "'\\n'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_fedmri.None.train_multi_gpu.main": [[109, 271], ["util.misc.init_distributed_mode", "os.path.join", "os.path.join", "os.makedirs", "os.makedirs", "train_multi_gpu.prlog", "train_multi_gpu.prlog", "train_multi_gpu.prlog", "vars", "train_multi_gpu.create_all_model", "models.loss.Criterion", "torch.manual_seed", "numpy.random.seed", "random.seed", "torch.device", "server_model.to", "models.loss.Criterion.to", "sum", "train_multi_gpu.prlog", "enumerate", "data.build_different_dataloader", "data.build_different_dataloader", "time.time", "range", "enumerate", "str", "train_multi_gpu.prlog", "train_multi_gpu.prlog", "util.misc.get_rank", "model.to", "sum", "train_multi_gpu.prlog", "torch.optim.RMSprop", "torch.optim.lr_scheduler.StepLR", "torch.load", "train_multi_gpu.prlog", "server_model.load_state_dict", "enumerate", "train_multi_gpu.prlog", "range", "train_multi_gpu.communication", "range", "train_multi_gpu.prlog", "train_multi_gpu.prlog", "train_multi_gpu.prlog", "train_multi_gpu.prlog", "train_multi_gpu.prlog", "train_multi_gpu.prlog", "enumerate", "time.time", "datetime.timedelta", "datetime.datetime.now().strftime", "range", "range", "p.numel", "range", "range", "len", "models[].load_state_dict", "optimizers[].load_state_dict", "lr_schedulers[].load_state_dict", "range", "range", "range", "lr_schedulers[].step", "[].append", "[].append", "[].append", "[].append", "os.path.join", "util.misc.save_on_master", "getattr", "server_model.parameters", "p.numel", "models[].parameters", "engine.distributed_evaluate", "engine.evaluate", "pathlib.Path().mkdir", "os.path.join", "enumerate", "torch.load.update", "util.misc.save_on_master", "int", "datetime.datetime.now", "model.parameters", "engine.train_one_epoch_ours", "train_multi_gpu.prlog", "engine.train_one_epoch", "train_multi_gpu.prlog", "server_model.state_dict", "models[].state_dict", "optimizers[].state_dict", "lr_schedulers[].state_dict", "server_model.state_dict", "torch.load.update", "pathlib.Path", "models[].state_dict", "optimizers[].state_dict", "lr_schedulers[].state_dict"], "function", ["home.repos.pwc.inspect_result.chunmeifeng_fedmri.util.misc.init_distributed_mode", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.None.train_multi_gpu.prlog", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.None.train_multi_gpu.prlog", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.None.train_multi_gpu.prlog", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.None.train_multi_gpu.create_all_model", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.models.loss.Criterion", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.util.misc.NestedTensor.to", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.util.misc.NestedTensor.to", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.None.train_multi_gpu.prlog", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.__init__.build_different_dataloader", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.__init__.build_different_dataloader", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.None.train_multi_gpu.prlog", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.None.train_multi_gpu.prlog", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.util.misc.get_rank", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.util.misc.NestedTensor.to", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.None.train_multi_gpu.prlog", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.None.train_multi_gpu.prlog", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.None.train_multi_gpu.prlog", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.None.train_multi_gpu.communication", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.None.train_multi_gpu.prlog", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.None.train_multi_gpu.prlog", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.None.train_multi_gpu.prlog", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.None.train_multi_gpu.prlog", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.None.train_multi_gpu.prlog", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.None.train_multi_gpu.prlog", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.util.misc.save_on_master", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.None.engine_ki.distributed_evaluate", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.None.engine_ki.evaluate", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.util.metric.AverageMeter.update", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.util.misc.save_on_master", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.None.engine_ki.train_one_epoch_ours", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.None.train_multi_gpu.prlog", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.None.engine_ki.train_one_epoch", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.None.train_multi_gpu.prlog", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.util.metric.AverageMeter.update"], ["", "", "def", "main", "(", "args", ")", ":", "\n", "# build criterion and model first", "\n", "    ", "init_distributed_mode", "(", "args", ")", "\n", "\n", "args", ".", "OUTPUTDIR", "=", "os", ".", "path", ".", "join", "(", "args", ".", "OUTPUTDIR", ",", "args", ".", "FL", ".", "MODEL_NAME", ")", "\n", "args", ".", "LOGDIR", "=", "os", ".", "path", ".", "join", "(", "args", ".", "LOGDIR", ",", "args", ".", "FL", ".", "MODEL_NAME", ")", "\n", "os", ".", "makedirs", "(", "args", ".", "OUTPUTDIR", ",", "exist_ok", "=", "True", ")", "\n", "os", ".", "makedirs", "(", "args", ".", "LOGDIR", ",", "exist_ok", "=", "True", ")", "\n", "prlog", "(", "'\\n\\n\\n'", ")", "\n", "prlog", "(", "'New job assigned {}'", ".", "format", "(", "datetime", ".", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "'%Y-%m-%d-%H:%M'", ")", ")", ")", "\n", "prlog", "(", "'\\nconfig:\\n{}\\n'", ".", "format", "(", "args", ")", ")", "\n", "for", "arg", "in", "vars", "(", "args", ")", ":", "\n", "        ", "prlog", "(", "'{}: {}\\n'", ".", "format", "(", "arg", ",", "getattr", "(", "args", ",", "arg", ")", ")", ")", "\n", "\n", "", "server_model", ",", "models", ",", "prev_models", "=", "create_all_model", "(", "args", ",", "args", ".", "FL", ".", "SHARE_WAY", ",", "args", ".", "FL", ".", "CLIENTS_NUM", ")", "\n", "\n", "criterion", "=", "Criterion", "(", "args", ")", "\n", "\n", "start_epoch", "=", "0", "\n", "\n", "seed", "=", "args", ".", "SEED", "+", "get_rank", "(", ")", "\n", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "random", ".", "seed", "(", "seed", ")", "\n", "\n", "device", "=", "torch", ".", "device", "(", "args", ".", "SOLVER", ".", "DEVICE", ")", "\n", "\n", "client_weights", "=", "[", "1", "/", "args", ".", "FL", ".", "CLIENTS_NUM", "for", "i", "in", "range", "(", "args", ".", "FL", ".", "CLIENTS_NUM", ")", "]", "\n", "\n", "assessment_dict", "=", "[", "\n", "{", "'loss_train_epoch'", ":", "[", "]", ",", "'loss_val_epoch'", ":", "[", "]", ",", "'nmse_epoch'", ":", "[", "]", ",", "'psnr_epoch'", ":", "[", "]", ",", "'ssim_epoch'", ":", "[", "]", "}", "for", "i", "in", "\n", "range", "(", "args", ".", "FL", ".", "CLIENTS_NUM", ")", "]", "\n", "\n", "server_model", ".", "to", "(", "device", ")", "\n", "for", "model", "in", "models", ":", "\n", "        ", "model", ".", "to", "(", "device", ")", "\n", "", "criterion", ".", "to", "(", "device", ")", "\n", "\n", "# show params for server/clients", "\n", "n_parameters", "=", "sum", "(", "p", ".", "numel", "(", ")", "for", "p", "in", "server_model", ".", "parameters", "(", ")", "if", "p", ".", "requires_grad", ")", "\n", "prlog", "(", "'Volume of SERVER model params:    {:.2f} M'", ".", "format", "(", "n_parameters", "/", "1024", "/", "1024", ")", ")", "\n", "for", "idx", ",", "model", "in", "enumerate", "(", "models", ")", ":", "\n", "        ", "n_parameters", "=", "sum", "(", "p", ".", "numel", "(", ")", "for", "p", "in", "model", ".", "parameters", "(", ")", "if", "p", ".", "requires_grad", ")", "\n", "prlog", "(", "'Volume of CLIENT {:<8s} params: {:.2f} M'", ".", "format", "(", "args", ".", "DATASET", ".", "CLIENTS", "[", "idx", "]", ",", "n_parameters", "/", "1024", "/", "1024", ")", ")", "\n", "\n", "# build optimizer", "\n", "", "optimizers", "=", "[", "torch", ".", "optim", ".", "RMSprop", "(", "params", "=", "models", "[", "idx", "]", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "SOLVER", ".", "LR", "[", "idx", "]", ")", "for", "idx", "in", "\n", "range", "(", "args", ".", "FL", ".", "CLIENTS_NUM", ")", "]", "\n", "lr_schedulers", "=", "[", "torch", ".", "optim", ".", "lr_scheduler", ".", "StepLR", "(", "optimizers", "[", "idx", "]", ",", "args", ".", "SOLVER", ".", "LR_DROP", ",", "args", ".", "SOLVER", ".", "LR_GAMMA", ")", "for", "idx", "\n", "in", "range", "(", "args", ".", "FL", ".", "CLIENTS_NUM", ")", "]", "\n", "\n", "dataloader_train", ",", "_", "=", "build_different_dataloader", "(", "args", ",", "mode", "=", "'train'", ")", "\n", "dataloader_val", ",", "dataset_len", "=", "build_different_dataloader", "(", "args", ",", "mode", "=", "'val'", ")", "\n", "\n", "if", "len", "(", "args", ".", "DATASET", ".", "CLIENTS", ")", "==", "2", "and", "args", ".", "FL", ".", "DATAMIX", ":", "\n", "        ", "data_name", "=", "[", "'mix0'", ",", "'mix1'", "]", "\n", "", "else", ":", "# NOTE", "\n", "        ", "data_name", "=", "args", ".", "DATASET", ".", "CLIENTS", "\n", "", "if", "args", ".", "RESUME", "!=", "''", ":", "\n", "        ", "checkpoint", "=", "torch", ".", "load", "(", "args", ".", "RESUME", ")", "\n", "server_model_checkpoint", "=", "checkpoint", "[", "'server_model'", "]", "\n", "#server_model_checkpoint = {key.replace(\"module.\", \"\"): val for key, val in server_model_checkpoint.items()}", "\n", "prlog", "(", "'resume from %s'", "%", "args", ".", "RESUME", ")", "\n", "server_model", ".", "load_state_dict", "(", "server_model_checkpoint", ",", "strict", "=", "True", ")", "\n", "for", "idx", ",", "client_name", "in", "enumerate", "(", "args", ".", "DATASET", ".", "CLIENTS", ")", ":", "\n", "            ", "model_checkpoint", "=", "checkpoint", "[", "'model_{}'", ".", "format", "(", "client_name", ")", "]", "\n", "# model_checkpoint = {key.replace(\"module.\", \"\"): val for key, val in model_checkpoint.items()}", "\n", "models", "[", "idx", "]", ".", "load_state_dict", "(", "model_checkpoint", ")", "\n", "optimizers", "[", "idx", "]", ".", "load_state_dict", "(", "checkpoint", "[", "'optimizer_{}'", ".", "format", "(", "client_name", ")", "]", ")", "\n", "lr_schedulers", "[", "idx", "]", ".", "load_state_dict", "(", "checkpoint", "[", "'lr_scheduler_{}'", ".", "format", "(", "(", "client_name", ")", ")", "]", ")", "\n", "", "start_epoch", "=", "checkpoint", "[", "'epoch'", "]", "+", "1", "\n", "\n", "", "start_time", "=", "time", ".", "time", "(", ")", "\n", "\n", "best_status", "=", "[", "{", "'NMSE'", ":", "10000000", ",", "'PSNR'", ":", "0", ",", "'SSIM'", ":", "0", "}", "for", "i", "in", "range", "(", "args", ".", "FL", ".", "CLIENTS_NUM", ")", "]", "\n", "best_checkpoint", "=", "[", "{", "}", "for", "i", "in", "range", "(", "args", ".", "FL", ".", "CLIENTS_NUM", ")", "]", "\n", "\n", "for", "epoch", "in", "range", "(", "start_epoch", ",", "args", ".", "TRAIN", ".", "EPOCHS", ")", ":", "\n", "        ", "prlog", "(", "'------------------ Epoch {:<3d}---------------------'", ".", "format", "(", "epoch", "+", "1", ")", ")", "\n", "for", "client_idx", "in", "range", "(", "args", ".", "FL", ".", "CLIENTS_NUM", ")", ":", "\n", "            ", "for", "_", "in", "range", "(", "args", ".", "TRAIN", ".", "SMALL_EPOCHS", ")", ":", "\n", "                ", "if", "epoch", ">", "0", ":", "\n", "                    ", "train_status", "=", "train_one_epoch_ours", "(", "args", ",", "\n", "models", "[", "client_idx", "]", ",", "server_model", ",", "prev_models", ",", "criterion", ",", "dataloader_train", "[", "client_idx", "]", ",", "\n", "optimizers", "[", "client_idx", "]", ",", "epoch", ",", "args", ".", "SOLVER", ".", "PRINT_FREQ", ",", "device", ")", "\n", "prlog", "(", "' {:<11s}| Train Loss: {:.4f} | C_Loss: {:.4f} | P_Loss: {:.4f}'", ".", "format", "(", "data_name", "[", "client_idx", "]", ",", "\n", "train_status", "[", "'loss'", "]", ",", "\n", "train_status", "[", "\n", "'c_loss'", "]", ",", "\n", "train_status", "[", "\n", "'p_loss'", "]", ")", ")", "\n", "", "else", ":", "\n", "                    ", "train_status", "=", "train_one_epoch", "(", "args", ",", "\n", "models", "[", "client_idx", "]", ",", "criterion", ",", "dataloader_train", "[", "client_idx", "]", ",", "\n", "optimizers", "[", "client_idx", "]", ",", "epoch", ",", "args", ".", "SOLVER", ".", "PRINT_FREQ", ",", "device", ")", "\n", "prlog", "(", "' {:<11s}| Train Loss: {:.4f}'", ".", "format", "(", "data_name", "[", "client_idx", "]", ",", "train_status", "[", "'loss'", "]", ")", ")", "\n", "\n", "", "", "lr_schedulers", "[", "client_idx", "]", ".", "step", "(", ")", "\n", "\n", "# aggregation", "\n", "", "server_model", ",", "models", ",", "prev_models", "=", "communication", "(", "args", ",", "server_model", ",", "models", ",", "client_weights", ")", "\n", "\n", "for", "client_idx", "in", "range", "(", "args", ".", "FL", ".", "CLIENTS_NUM", ")", ":", "\n", "\n", "            ", "model", ",", "val_loader", "=", "models", "[", "client_idx", "]", ",", "dataloader_val", "[", "client_idx", "]", "\n", "\n", "if", "args", ".", "distributed", ":", "\n", "                ", "eval_status", "=", "distributed_evaluate", "(", "args", ",", "model", ",", "criterion", ",", "val_loader", ",", "device", ",", "data_name", "[", "client_idx", "]", ",", "dataset_len", "[", "client_idx", "]", ")", "\n", "", "else", ":", "\n", "                ", "eval_status", "=", "evaluate", "(", "args", ",", "model", ",", "criterion", ",", "val_loader", ",", "device", ",", "data_name", "[", "client_idx", "]", ")", "\n", "", "assessment_dict", "[", "client_idx", "]", "[", "'loss_val_epoch'", "]", ".", "append", "(", "eval_status", "[", "'loss'", "]", ")", "\n", "assessment_dict", "[", "client_idx", "]", "[", "'nmse_epoch'", "]", ".", "append", "(", "eval_status", "[", "'NMSE'", "]", ")", "\n", "assessment_dict", "[", "client_idx", "]", "[", "'psnr_epoch'", "]", ".", "append", "(", "eval_status", "[", "'PSNR'", "]", ")", "\n", "assessment_dict", "[", "client_idx", "]", "[", "'ssim_epoch'", "]", ".", "append", "(", "eval_status", "[", "'SSIM'", "]", ")", "\n", "\n", "if", "eval_status", "[", "'PSNR'", "]", ">", "best_status", "[", "client_idx", "]", "[", "'PSNR'", "]", ":", "\n", "                ", "best_status", "[", "client_idx", "]", "=", "eval_status", "\n", "best_checkpoint", "[", "client_idx", "]", "=", "{", "\n", "'server_model'", ":", "server_model", ".", "state_dict", "(", ")", ",", "\n", "'model_{}'", ".", "format", "(", "client_idx", ")", ":", "models", "[", "client_idx", "]", ".", "state_dict", "(", ")", ",", "\n", "'optimizer'", ":", "optimizers", "[", "client_idx", "]", ".", "state_dict", "(", ")", ",", "\n", "'lr_scheduler'", ":", "lr_schedulers", "[", "client_idx", "]", ".", "state_dict", "(", ")", ",", "\n", "'epoch'", ":", "epoch", ",", "\n", "'args'", ":", "args", ",", "\n", "}", "\n", "\n", "# save model", "\n", "", "if", "args", ".", "OUTPUTDIR", ":", "\n", "                ", "Path", "(", "args", ".", "OUTPUTDIR", ")", ".", "mkdir", "(", "parents", "=", "True", ",", "exist_ok", "=", "True", ")", "\n", "checkpoint_path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "OUTPUTDIR", ",", "f'checkpoint-epoch_{(epoch + 1):04}.pth'", ")", "\n", "checkpoint", "=", "{", "'server_model'", ":", "server_model", ".", "state_dict", "(", ")", "}", "\n", "for", "idx", ",", "client_name", "in", "enumerate", "(", "args", ".", "DATASET", ".", "CLIENTS", ")", ":", "\n", "                    ", "checkpoint", ".", "update", "(", "{", "\n", "'model_{}'", ".", "format", "(", "client_name", ")", ":", "models", "[", "idx", "]", ".", "state_dict", "(", ")", ",", "\n", "'optimizer_{}'", ".", "format", "(", "client_name", ")", ":", "optimizers", "[", "idx", "]", ".", "state_dict", "(", ")", ",", "\n", "'lr_scheduler_{}'", ".", "format", "(", "(", "client_name", ")", ")", ":", "lr_schedulers", "[", "idx", "]", ".", "state_dict", "(", ")", "\n", "}", ")", "\n", "\n", "", "checkpoint", ".", "update", "(", "{", "\n", "'epoch'", ":", "epoch", ",", "\n", "'args'", ":", "args", ",", "\n", "}", ")", "\n", "\n", "save_on_master", "(", "checkpoint", ",", "checkpoint_path", ")", "\n", "\n", "", "", "", "for", "idx", ",", "client_name", "in", "enumerate", "(", "args", ".", "DATASET", ".", "CLIENTS", ")", ":", "\n", "        ", "prlog", "(", "'The best epoch for CLIENT {:<8s} is {}'", ".", "format", "(", "client_name", ",", "best_checkpoint", "[", "idx", "]", "[", "'epoch'", "]", "+", "1", ")", ")", "\n", "prlog", "(", "\"Results ----------\"", ")", "\n", "prlog", "(", "\"NMSE: {:.4}\"", ".", "format", "(", "best_status", "[", "idx", "]", "[", "'NMSE'", "]", ")", ")", "\n", "prlog", "(", "\"PSNR: {:.4}\"", ".", "format", "(", "best_status", "[", "idx", "]", "[", "'PSNR'", "]", ")", ")", "\n", "prlog", "(", "\"SSIM: {:.4}\"", ".", "format", "(", "best_status", "[", "idx", "]", "[", "'SSIM'", "]", ")", ")", "\n", "prlog", "(", "\"------------------\"", ")", "\n", "\n", "", "if", "args", ".", "OUTPUTDIR", ":", "\n", "        ", "for", "idx", ",", "client_name", "in", "enumerate", "(", "args", ".", "DATASET", ".", "CLIENTS", ")", ":", "\n", "            ", "checkpoint_path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "OUTPUTDIR", ",", "'client_{}_best.pth'", ".", "format", "(", "client_name", ")", ")", "\n", "save_on_master", "(", "best_checkpoint", "[", "idx", "]", ",", "checkpoint_path", ")", "\n", "\n", "", "", "total_time", "=", "time", ".", "time", "(", ")", "-", "start_time", "\n", "total_time_str", "=", "str", "(", "datetime", ".", "timedelta", "(", "seconds", "=", "int", "(", "total_time", ")", ")", ")", "\n", "prlog", "(", "'Training time {}'", ".", "format", "(", "total_time_str", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_fedmri.config.__init__.build_config": [[10, 12], ["None"], "function", ["None"], ["def", "build_config", "(", "factory", ")", ":", "\n", "    ", "return", "config_factory", "[", "factory", "]", "", "", ""]], "home.repos.pwc.inspect_result.chunmeifeng_fedmri.util.misc.SmoothedValue.__init__": [[31, 38], ["collections.deque"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "window_size", "=", "20", ",", "fmt", "=", "None", ")", ":", "\n", "        ", "if", "fmt", "is", "None", ":", "\n", "            ", "fmt", "=", "\"{median:.4f} ({global_avg:.4f})\"", "\n", "", "self", ".", "deque", "=", "deque", "(", "maxlen", "=", "window_size", ")", "\n", "self", ".", "total", "=", "0.0", "\n", "self", ".", "count", "=", "0", "\n", "self", ".", "fmt", "=", "fmt", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_fedmri.util.misc.SmoothedValue.update": [[39, 43], ["misc.SmoothedValue.deque.append"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "value", ",", "n", "=", "1", ")", ":", "\n", "        ", "self", ".", "deque", ".", "append", "(", "value", ")", "\n", "self", ".", "count", "+=", "n", "\n", "self", ".", "total", "+=", "value", "*", "n", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_fedmri.util.misc.SmoothedValue.synchronize_between_processes": [[44, 56], ["torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.barrier", "torch.barrier", "torch.all_reduce", "torch.all_reduce", "t.tolist.tolist.tolist", "int", "misc.is_dist_avail_and_initialized"], "methods", ["home.repos.pwc.inspect_result.chunmeifeng_fedmri.util.misc.is_dist_avail_and_initialized"], ["", "def", "synchronize_between_processes", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Warning: does not synchronize the deque!\n        \"\"\"", "\n", "if", "not", "is_dist_avail_and_initialized", "(", ")", ":", "\n", "            ", "return", "\n", "", "t", "=", "torch", ".", "tensor", "(", "[", "self", ".", "count", ",", "self", ".", "total", "]", ",", "dtype", "=", "torch", ".", "float64", ",", "device", "=", "'cuda'", ")", "\n", "dist", ".", "barrier", "(", ")", "\n", "dist", ".", "all_reduce", "(", "t", ")", "\n", "t", "=", "t", ".", "tolist", "(", ")", "\n", "self", ".", "count", "=", "int", "(", "t", "[", "0", "]", ")", "\n", "self", ".", "total", "=", "t", "[", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_fedmri.util.misc.SmoothedValue.median": [[57, 61], ["torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor.median().item", "torch.tensor.median().item", "list", "torch.tensor.median", "torch.tensor.median"], "methods", ["home.repos.pwc.inspect_result.chunmeifeng_fedmri.util.misc.SmoothedValue.median", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.util.misc.SmoothedValue.median"], ["", "@", "property", "\n", "def", "median", "(", "self", ")", ":", "\n", "        ", "d", "=", "torch", ".", "tensor", "(", "list", "(", "self", ".", "deque", ")", ")", "\n", "return", "d", ".", "median", "(", ")", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_fedmri.util.misc.SmoothedValue.avg": [[62, 66], ["torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor.mean().item", "torch.tensor.mean().item", "list", "torch.tensor.mean", "torch.tensor.mean"], "methods", ["None"], ["", "@", "property", "\n", "def", "avg", "(", "self", ")", ":", "\n", "        ", "d", "=", "torch", ".", "tensor", "(", "list", "(", "self", ".", "deque", ")", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "return", "d", ".", "mean", "(", ")", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_fedmri.util.misc.SmoothedValue.global_avg": [[67, 70], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "global_avg", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "total", "/", "self", ".", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_fedmri.util.misc.SmoothedValue.max": [[71, 74], ["misc.SmoothedValue.max"], "methods", ["home.repos.pwc.inspect_result.chunmeifeng_fedmri.util.misc.SmoothedValue.max"], ["", "@", "property", "\n", "def", "max", "(", "self", ")", ":", "\n", "        ", "return", "max", "(", "self", ".", "deque", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_fedmri.util.misc.SmoothedValue.value": [[75, 78], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "value", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "deque", "[", "-", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_fedmri.util.misc.SmoothedValue.__str__": [[79, 86], ["misc.SmoothedValue.fmt.format"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "fmt", ".", "format", "(", "\n", "median", "=", "self", ".", "median", ",", "\n", "avg", "=", "self", ".", "avg", ",", "\n", "global_avg", "=", "self", ".", "global_avg", ",", "\n", "max", "=", "self", ".", "max", ",", "\n", "value", "=", "self", ".", "value", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_fedmri.util.misc.MetricLogger.__init__": [[159, 162], ["collections.defaultdict"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "delimiter", "=", "\"\\t\"", ")", ":", "\n", "        ", "self", ".", "meters", "=", "defaultdict", "(", "SmoothedValue", ")", "\n", "self", ".", "delimiter", "=", "delimiter", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_fedmri.util.misc.MetricLogger.update": [[163, 169], ["kwargs.items", "isinstance", "isinstance", "misc.MetricLogger.meters[].update", "v.item.item.item"], "methods", ["home.repos.pwc.inspect_result.chunmeifeng_fedmri.util.metric.AverageMeter.update"], ["", "def", "update", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "for", "k", ",", "v", "in", "kwargs", ".", "items", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "v", ",", "torch", ".", "Tensor", ")", ":", "\n", "                ", "v", "=", "v", ".", "item", "(", ")", "\n", "", "assert", "isinstance", "(", "v", ",", "(", "float", ",", "int", ")", ")", "\n", "self", ".", "meters", "[", "k", "]", ".", "update", "(", "v", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_fedmri.util.misc.MetricLogger.__getattr__": [[170, 177], ["AttributeError", "type"], "methods", ["None"], ["", "", "def", "__getattr__", "(", "self", ",", "attr", ")", ":", "\n", "        ", "if", "attr", "in", "self", ".", "meters", ":", "\n", "            ", "return", "self", ".", "meters", "[", "attr", "]", "\n", "", "if", "attr", "in", "self", ".", "__dict__", ":", "\n", "            ", "return", "self", ".", "__dict__", "[", "attr", "]", "\n", "", "raise", "AttributeError", "(", "\"'{}' object has no attribute '{}'\"", ".", "format", "(", "\n", "type", "(", "self", ")", ".", "__name__", ",", "attr", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_fedmri.util.misc.MetricLogger.__str__": [[178, 185], ["misc.MetricLogger.meters.items", "misc.MetricLogger.delimiter.join", "loss_str.append", "str"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "loss_str", "=", "[", "]", "\n", "for", "name", ",", "meter", "in", "self", ".", "meters", ".", "items", "(", ")", ":", "\n", "            ", "loss_str", ".", "append", "(", "\n", "\"{}: {}\"", ".", "format", "(", "name", ",", "str", "(", "meter", ")", ")", "\n", ")", "\n", "", "return", "self", ".", "delimiter", ".", "join", "(", "loss_str", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_fedmri.util.misc.MetricLogger.synchronize_between_processes": [[186, 189], ["misc.MetricLogger.meters.values", "meter.synchronize_between_processes"], "methods", ["home.repos.pwc.inspect_result.chunmeifeng_fedmri.util.misc.MetricLogger.synchronize_between_processes"], ["", "def", "synchronize_between_processes", "(", "self", ")", ":", "\n", "        ", "for", "meter", "in", "self", ".", "meters", ".", "values", "(", ")", ":", "\n", "            ", "meter", ".", "synchronize_between_processes", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_fedmri.util.misc.MetricLogger.add_meter": [[190, 192], ["None"], "methods", ["None"], ["", "", "def", "add_meter", "(", "self", ",", "name", ",", "meter", ")", ":", "\n", "        ", "self", ".", "meters", "[", "name", "]", "=", "meter", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_fedmri.util.misc.MetricLogger.log_every": [[193, 246], ["time.time", "time.time", "misc.SmoothedValue", "misc.SmoothedValue", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "str", "print", "misc.MetricLogger.delimiter.join", "misc.MetricLogger.delimiter.join", "misc.SmoothedValue.update", "misc.SmoothedValue.update", "time.time", "time.time", "datetime.timedelta", "str", "str", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "len", "time.time", "time.time", "datetime.timedelta", "print", "print", "int", "len", "str", "len", "len", "misc.MetricLogger.format", "misc.MetricLogger.format", "len", "int", "len", "len", "str", "str", "str", "str", "str", "str", "torch.cuda.max_memory_allocated", "torch.cuda.max_memory_allocated", "torch.cuda.max_memory_allocated", "torch.cuda.max_memory_allocated"], "methods", ["home.repos.pwc.inspect_result.chunmeifeng_fedmri.util.metric.AverageMeter.update", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.util.metric.AverageMeter.update"], ["", "def", "log_every", "(", "self", ",", "iterable", ",", "print_freq", ",", "header", "=", "None", ")", ":", "\n", "        ", "i", "=", "0", "\n", "if", "not", "header", ":", "\n", "            ", "header", "=", "''", "\n", "", "start_time", "=", "time", ".", "time", "(", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "iter_time", "=", "SmoothedValue", "(", "fmt", "=", "'{avg:.4f}'", ")", "\n", "data_time", "=", "SmoothedValue", "(", "fmt", "=", "'{avg:.4f}'", ")", "\n", "space_fmt", "=", "':'", "+", "str", "(", "len", "(", "str", "(", "len", "(", "iterable", ")", ")", ")", ")", "+", "'d'", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "            ", "log_msg", "=", "self", ".", "delimiter", ".", "join", "(", "[", "\n", "header", ",", "\n", "'[{0'", "+", "space_fmt", "+", "'}/{1}]'", ",", "\n", "'eta: {eta}'", ",", "\n", "'{meters}'", ",", "\n", "'time: {time}'", ",", "\n", "'data: {data}'", ",", "\n", "'max mem: {memory:.0f}'", "\n", "]", ")", "\n", "", "else", ":", "\n", "            ", "log_msg", "=", "self", ".", "delimiter", ".", "join", "(", "[", "\n", "header", ",", "\n", "'[{0'", "+", "space_fmt", "+", "'}/{1}]'", ",", "\n", "'eta: {eta}'", ",", "\n", "'{meters}'", ",", "\n", "'time: {time}'", ",", "\n", "'data: {data}'", "\n", "]", ")", "\n", "", "MB", "=", "1024.0", "*", "1024.0", "\n", "for", "obj", "in", "iterable", ":", "\n", "            ", "data_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "yield", "obj", "\n", "iter_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "if", "i", "%", "print_freq", "==", "0", "or", "i", "==", "len", "(", "iterable", ")", "-", "1", ":", "\n", "                ", "eta_seconds", "=", "iter_time", ".", "global_avg", "*", "(", "len", "(", "iterable", ")", "-", "i", ")", "\n", "eta_string", "=", "str", "(", "datetime", ".", "timedelta", "(", "seconds", "=", "int", "(", "eta_seconds", ")", ")", ")", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "                    ", "print", "(", "log_msg", ".", "format", "(", "\n", "i", ",", "len", "(", "iterable", ")", ",", "eta", "=", "eta_string", ",", "\n", "meters", "=", "str", "(", "self", ")", ",", "\n", "time", "=", "str", "(", "iter_time", ")", ",", "data", "=", "str", "(", "data_time", ")", ",", "\n", "memory", "=", "torch", ".", "cuda", ".", "max_memory_allocated", "(", ")", "/", "MB", ")", ")", "\n", "", "else", ":", "\n", "                    ", "print", "(", "log_msg", ".", "format", "(", "\n", "i", ",", "len", "(", "iterable", ")", ",", "eta", "=", "eta_string", ",", "\n", "meters", "=", "str", "(", "self", ")", ",", "\n", "time", "=", "str", "(", "iter_time", ")", ",", "data", "=", "str", "(", "data_time", ")", ")", ")", "\n", "", "", "i", "+=", "1", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "", "total_time", "=", "time", ".", "time", "(", ")", "-", "start_time", "\n", "total_time_str", "=", "str", "(", "datetime", ".", "timedelta", "(", "seconds", "=", "int", "(", "total_time", ")", ")", ")", "\n", "print", "(", "'{} Total time: {} ({:.4f} s / it)'", ".", "format", "(", "\n", "header", ",", "total_time_str", ",", "total_time", "/", "len", "(", "iterable", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_fedmri.util.misc.NestedTensor.__init__": [[284, 287], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "tensors", ",", "mask", ":", "Optional", "[", "Tensor", "]", ")", ":", "\n", "        ", "self", ".", "tensors", "=", "tensors", "\n", "self", ".", "mask", "=", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_fedmri.util.misc.NestedTensor.to": [[288, 298], ["misc.NestedTensor.tensors.to", "misc.NestedTensor", "mask.to"], "methods", ["home.repos.pwc.inspect_result.chunmeifeng_fedmri.util.misc.NestedTensor.to", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.util.misc.NestedTensor.to"], ["", "def", "to", "(", "self", ",", "device", ")", ":", "\n", "# type: (Device) -> NestedTensor # noqa", "\n", "        ", "cast_tensor", "=", "self", ".", "tensors", ".", "to", "(", "device", ")", "\n", "mask", "=", "self", ".", "mask", "\n", "if", "mask", "is", "not", "None", ":", "\n", "            ", "assert", "mask", "is", "not", "None", "\n", "cast_mask", "=", "mask", ".", "to", "(", "device", ")", "\n", "", "else", ":", "\n", "            ", "cast_mask", "=", "None", "\n", "", "return", "NestedTensor", "(", "cast_tensor", ",", "cast_mask", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_fedmri.util.misc.NestedTensor.decompose": [[299, 301], ["None"], "methods", ["None"], ["", "def", "decompose", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "tensors", ",", "self", ".", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_fedmri.util.misc.NestedTensor.__repr__": [[302, 304], ["str"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "str", "(", "self", ".", "tensors", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_fedmri.util.misc.all_gather": [[88, 129], ["misc.get_world_size", "pickle.dumps", "torch.ByteStorage.from_buffer", "torch.ByteStorage.from_buffer", "torch.ByteTensor().to", "torch.ByteTensor().to", "torch.tensor", "torch.tensor", "torch.all_gather", "max", "torch.all_gather", "zip", "torch.tensor", "torch.tensor", "int", "tensor_list.append", "torch.empty", "torch.empty", "torch.cat", "torch.cat", "data_list.append", "torch.ByteTensor", "torch.ByteTensor", "torch.cat.numel", "range", "size.item", "torch.empty", "torch.empty", "torch.cat.cpu().numpy().tobytes", "pickle.loads", "torch.cat.cpu().numpy", "torch.cat.cpu"], "function", ["home.repos.pwc.inspect_result.chunmeifeng_fedmri.util.misc.get_world_size", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.util.misc.NestedTensor.to", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.util.misc.NestedTensor.to", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.util.misc.all_gather", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.util.misc.SmoothedValue.max", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.util.misc.all_gather"], ["", "", "def", "all_gather", "(", "data", ")", ":", "\n", "    ", "\"\"\"\n    Run all_gather on arbitrary picklable data (not necessarily tensors)\n    Args:\n        data: any picklable object\n    Returns:\n        list[data]: list of data gathered from each rank\n    \"\"\"", "\n", "world_size", "=", "get_world_size", "(", ")", "\n", "if", "world_size", "==", "1", ":", "\n", "        ", "return", "[", "data", "]", "\n", "\n", "# serialized to a Tensor", "\n", "", "buffer", "=", "pickle", ".", "dumps", "(", "data", ")", "\n", "storage", "=", "torch", ".", "ByteStorage", ".", "from_buffer", "(", "buffer", ")", "\n", "tensor", "=", "torch", ".", "ByteTensor", "(", "storage", ")", ".", "to", "(", "\"cuda\"", ")", "\n", "\n", "# obtain Tensor size of each rank", "\n", "local_size", "=", "torch", ".", "tensor", "(", "[", "tensor", ".", "numel", "(", ")", "]", ",", "device", "=", "\"cuda\"", ")", "\n", "size_list", "=", "[", "torch", ".", "tensor", "(", "[", "0", "]", ",", "device", "=", "\"cuda\"", ")", "for", "_", "in", "range", "(", "world_size", ")", "]", "\n", "dist", ".", "all_gather", "(", "size_list", ",", "local_size", ")", "\n", "size_list", "=", "[", "int", "(", "size", ".", "item", "(", ")", ")", "for", "size", "in", "size_list", "]", "\n", "max_size", "=", "max", "(", "size_list", ")", "\n", "\n", "# receiving Tensor from all ranks", "\n", "# we pad the tensor because torch all_gather does not support", "\n", "# gathering tensors of different shapes", "\n", "tensor_list", "=", "[", "]", "\n", "for", "_", "in", "size_list", ":", "\n", "        ", "tensor_list", ".", "append", "(", "torch", ".", "empty", "(", "(", "max_size", ",", ")", ",", "dtype", "=", "torch", ".", "uint8", ",", "device", "=", "\"cuda\"", ")", ")", "\n", "", "if", "local_size", "!=", "max_size", ":", "\n", "        ", "padding", "=", "torch", ".", "empty", "(", "size", "=", "(", "max_size", "-", "local_size", ",", ")", ",", "dtype", "=", "torch", ".", "uint8", ",", "device", "=", "\"cuda\"", ")", "\n", "tensor", "=", "torch", ".", "cat", "(", "(", "tensor", ",", "padding", ")", ",", "dim", "=", "0", ")", "\n", "", "dist", ".", "all_gather", "(", "tensor_list", ",", "tensor", ")", "\n", "\n", "data_list", "=", "[", "]", "\n", "for", "size", ",", "tensor", "in", "zip", "(", "size_list", ",", "tensor_list", ")", ":", "\n", "        ", "buffer", "=", "tensor", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "tobytes", "(", ")", "[", ":", "size", "]", "\n", "data_list", ".", "append", "(", "pickle", ".", "loads", "(", "buffer", ")", ")", "\n", "\n", "", "return", "data_list", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_fedmri.util.misc.reduce_dict": [[131, 156], ["misc.get_world_size", "torch.no_grad", "torch.no_grad", "sorted", "torch.stack", "torch.stack", "torch.all_reduce", "input_dict.keys", "names.append", "torch.stack.append", "zip"], "function", ["home.repos.pwc.inspect_result.chunmeifeng_fedmri.util.misc.get_world_size"], ["", "def", "reduce_dict", "(", "input_dict", ",", "average", "=", "True", ")", ":", "\n", "    ", "\"\"\"\n    Args:\n        input_dict (dict): all the values will be reduced\n        average (bool): whether to do average or sum\n    Reduce the values in the dictionary from all processes so that all processes\n    have the averaged results. Returns a dict with the same fields as\n    input_dict, after reduction.\n    \"\"\"", "\n", "world_size", "=", "get_world_size", "(", ")", "\n", "if", "world_size", "<", "2", ":", "\n", "        ", "return", "input_dict", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "names", "=", "[", "]", "\n", "values", "=", "[", "]", "\n", "# sort the keys so that they are consistent across processes", "\n", "for", "k", "in", "sorted", "(", "input_dict", ".", "keys", "(", ")", ")", ":", "\n", "            ", "names", ".", "append", "(", "k", ")", "\n", "values", ".", "append", "(", "input_dict", "[", "k", "]", ")", "\n", "", "values", "=", "torch", ".", "stack", "(", "values", ",", "dim", "=", "0", ")", "\n", "dist", ".", "all_reduce", "(", "values", ")", "\n", "if", "average", ":", "\n", "            ", "values", "/=", "world_size", "\n", "", "reduced_dict", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "zip", "(", "names", ",", "values", ")", "}", "\n", "", "return", "reduced_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_fedmri.util.misc.get_sha": [[248, 266], ["os.path.dirname", "os.path.abspath", "subprocess.check_output().decode().strip", "misc.get_sha._run"], "function", ["None"], ["", "", "def", "get_sha", "(", ")", ":", "\n", "    ", "cwd", "=", "os", ".", "path", ".", "dirname", "(", "os", ".", "path", ".", "abspath", "(", "__file__", ")", ")", "\n", "\n", "def", "_run", "(", "command", ")", ":", "\n", "        ", "return", "subprocess", ".", "check_output", "(", "command", ",", "cwd", "=", "cwd", ")", ".", "decode", "(", "'ascii'", ")", ".", "strip", "(", ")", "\n", "", "sha", "=", "'N/A'", "\n", "diff", "=", "\"clean\"", "\n", "branch", "=", "'N/A'", "\n", "try", ":", "\n", "        ", "sha", "=", "_run", "(", "[", "'git'", ",", "'rev-parse'", ",", "'HEAD'", "]", ")", "\n", "subprocess", ".", "check_output", "(", "[", "'git'", ",", "'diff'", "]", ",", "cwd", "=", "cwd", ")", "\n", "diff", "=", "_run", "(", "[", "'git'", ",", "'diff-index'", ",", "'HEAD'", "]", ")", "\n", "diff", "=", "\"has uncommited changes\"", "if", "diff", "else", "\"clean\"", "\n", "branch", "=", "_run", "(", "[", "'git'", ",", "'rev-parse'", ",", "'--abbrev-ref'", ",", "'HEAD'", "]", ")", "\n", "", "except", "Exception", ":", "\n", "        ", "pass", "\n", "", "message", "=", "f\"sha: {sha}, status: {diff}, branch: {branch}\"", "\n", "return", "message", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_fedmri.util.misc.collate_fn": [[268, 272], ["list", "misc.nested_tensor_from_tensor_list", "tuple", "zip"], "function", ["home.repos.pwc.inspect_result.chunmeifeng_fedmri.util.misc.nested_tensor_from_tensor_list"], ["", "def", "collate_fn", "(", "batch", ")", ":", "\n", "    ", "batch", "=", "list", "(", "zip", "(", "*", "batch", ")", ")", "\n", "batch", "[", "0", "]", "=", "nested_tensor_from_tensor_list", "(", "batch", "[", "0", "]", ")", "\n", "return", "tuple", "(", "batch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_fedmri.util.misc._max_by_axis": [[274, 281], ["enumerate", "max"], "function", ["home.repos.pwc.inspect_result.chunmeifeng_fedmri.util.misc.SmoothedValue.max"], ["", "def", "_max_by_axis", "(", "the_list", ")", ":", "\n", "# type: (List[List[int]]) -> List[int]", "\n", "    ", "maxes", "=", "the_list", "[", "0", "]", "\n", "for", "sublist", "in", "the_list", "[", "1", ":", "]", ":", "\n", "        ", "for", "index", ",", "item", "in", "enumerate", "(", "sublist", ")", ":", "\n", "            ", "maxes", "[", "index", "]", "=", "max", "(", "maxes", "[", "index", "]", ",", "item", ")", "\n", "", "", "return", "maxes", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_fedmri.util.misc.nested_tensor_from_tensor_list": [[306, 329], ["misc.NestedTensor", "torchvision._is_tracing", "misc._max_by_axis", "torch.zeros", "torch.zeros", "torch.ones", "torch.ones", "zip", "ValueError", "misc._onnx_nested_tensor_from_tensor_list", "pad_img[].copy_", "list", "len"], "function", ["home.repos.pwc.inspect_result.chunmeifeng_fedmri.util.misc._max_by_axis", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.util.misc._onnx_nested_tensor_from_tensor_list"], ["", "", "def", "nested_tensor_from_tensor_list", "(", "tensor_list", ":", "List", "[", "Tensor", "]", ")", ":", "\n", "# TODO make this more general", "\n", "    ", "if", "tensor_list", "[", "0", "]", ".", "ndim", "==", "3", ":", "\n", "        ", "if", "torchvision", ".", "_is_tracing", "(", ")", ":", "\n", "# nested_tensor_from_tensor_list() does not export well to ONNX", "\n", "# call _onnx_nested_tensor_from_tensor_list() instead", "\n", "            ", "return", "_onnx_nested_tensor_from_tensor_list", "(", "tensor_list", ")", "\n", "\n", "# TODO make it support different-sized images", "\n", "", "max_size", "=", "_max_by_axis", "(", "[", "list", "(", "img", ".", "shape", ")", "for", "img", "in", "tensor_list", "]", ")", "\n", "# min_size = tuple(min(s) for s in zip(*[img.shape for img in tensor_list]))", "\n", "batch_shape", "=", "[", "len", "(", "tensor_list", ")", "]", "+", "max_size", "\n", "b", ",", "c", ",", "h", ",", "w", "=", "batch_shape", "\n", "dtype", "=", "tensor_list", "[", "0", "]", ".", "dtype", "\n", "device", "=", "tensor_list", "[", "0", "]", ".", "device", "\n", "tensor", "=", "torch", ".", "zeros", "(", "batch_shape", ",", "dtype", "=", "dtype", ",", "device", "=", "device", ")", "\n", "mask", "=", "torch", ".", "ones", "(", "(", "b", ",", "h", ",", "w", ")", ",", "dtype", "=", "torch", ".", "bool", ",", "device", "=", "device", ")", "\n", "for", "img", ",", "pad_img", ",", "m", "in", "zip", "(", "tensor_list", ",", "tensor", ",", "mask", ")", ":", "\n", "            ", "pad_img", "[", ":", "img", ".", "shape", "[", "0", "]", ",", ":", "img", ".", "shape", "[", "1", "]", ",", ":", "img", ".", "shape", "[", "2", "]", "]", ".", "copy_", "(", "img", ")", "\n", "m", "[", ":", "img", ".", "shape", "[", "1", "]", ",", ":", "img", ".", "shape", "[", "2", "]", "]", "=", "False", "\n", "", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'not supported'", ")", "\n", "", "return", "NestedTensor", "(", "tensor", ",", "mask", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_fedmri.util.misc._onnx_nested_tensor_from_tensor_list": [[333, 360], ["range", "tuple", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "misc.NestedTensor", "tensor_list[].dim", "torch.max().to", "torch.max().to", "tuple.append", "torch.nn.functional.pad", "torch.nn.functional.pad", "padded_imgs.append", "torch.zeros_like", "torch.zeros_like", "torch.nn.functional.pad", "torch.nn.functional.pad", "padded_masks.append", "torch.nn.functional.pad.to", "torch.max", "torch.max", "zip", "torch.stack().to", "torch.stack().to", "tuple", "torch.stack", "torch.stack"], "function", ["home.repos.pwc.inspect_result.chunmeifeng_fedmri.util.misc.NestedTensor.to", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.util.misc.NestedTensor.to", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.util.misc.NestedTensor.to", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.util.misc.SmoothedValue.max", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.util.misc.SmoothedValue.max", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.util.misc.NestedTensor.to", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.util.misc.NestedTensor.to"], ["", "@", "torch", ".", "jit", ".", "unused", "\n", "def", "_onnx_nested_tensor_from_tensor_list", "(", "tensor_list", ":", "List", "[", "Tensor", "]", ")", "->", "NestedTensor", ":", "\n", "    ", "max_size", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "tensor_list", "[", "0", "]", ".", "dim", "(", ")", ")", ":", "\n", "        ", "max_size_i", "=", "torch", ".", "max", "(", "torch", ".", "stack", "(", "[", "img", ".", "shape", "[", "i", "]", "for", "img", "in", "tensor_list", "]", ")", ".", "to", "(", "torch", ".", "float32", ")", ")", ".", "to", "(", "torch", ".", "int64", ")", "\n", "max_size", ".", "append", "(", "max_size_i", ")", "\n", "", "max_size", "=", "tuple", "(", "max_size", ")", "\n", "\n", "# work around for", "\n", "# pad_img[: img.shape[0], : img.shape[1], : img.shape[2]].copy_(img)", "\n", "# m[: img.shape[1], :img.shape[2]] = False", "\n", "# which is not yet supported in onnx", "\n", "padded_imgs", "=", "[", "]", "\n", "padded_masks", "=", "[", "]", "\n", "for", "img", "in", "tensor_list", ":", "\n", "        ", "padding", "=", "[", "(", "s1", "-", "s2", ")", "for", "s1", ",", "s2", "in", "zip", "(", "max_size", ",", "tuple", "(", "img", ".", "shape", ")", ")", "]", "\n", "padded_img", "=", "torch", ".", "nn", ".", "functional", ".", "pad", "(", "img", ",", "(", "0", ",", "padding", "[", "2", "]", ",", "0", ",", "padding", "[", "1", "]", ",", "0", ",", "padding", "[", "0", "]", ")", ")", "\n", "padded_imgs", ".", "append", "(", "padded_img", ")", "\n", "\n", "m", "=", "torch", ".", "zeros_like", "(", "img", "[", "0", "]", ",", "dtype", "=", "torch", ".", "int", ",", "device", "=", "img", ".", "device", ")", "\n", "padded_mask", "=", "torch", ".", "nn", ".", "functional", ".", "pad", "(", "m", ",", "(", "0", ",", "padding", "[", "2", "]", ",", "0", ",", "padding", "[", "1", "]", ")", ",", "\"constant\"", ",", "1", ")", "\n", "padded_masks", ".", "append", "(", "padded_mask", ".", "to", "(", "torch", ".", "bool", ")", ")", "\n", "\n", "", "tensor", "=", "torch", ".", "stack", "(", "padded_imgs", ")", "\n", "mask", "=", "torch", ".", "stack", "(", "padded_masks", ")", "\n", "\n", "return", "NestedTensor", "(", "tensor", ",", "mask", "=", "mask", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_fedmri.util.misc.setup_for_distributed": [[362, 375], ["kwargs.pop", "builtin_print"], "function", ["None"], ["", "def", "setup_for_distributed", "(", "is_master", ")", ":", "\n", "    ", "\"\"\"\n    This function disables printing when not in master process\n    \"\"\"", "\n", "import", "builtins", "as", "__builtin__", "\n", "builtin_print", "=", "__builtin__", ".", "print", "\n", "\n", "def", "print", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "force", "=", "kwargs", ".", "pop", "(", "'force'", ",", "False", ")", "\n", "if", "is_master", "or", "force", ":", "\n", "            ", "builtin_print", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n", "", "", "__builtin__", ".", "print", "=", "print", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_fedmri.util.misc.is_dist_avail_and_initialized": [[377, 383], ["torch.is_available", "torch.is_initialized"], "function", ["None"], ["", "def", "is_dist_avail_and_initialized", "(", ")", ":", "\n", "    ", "if", "not", "dist", ".", "is_available", "(", ")", ":", "\n", "        ", "return", "False", "\n", "", "if", "not", "dist", ".", "is_initialized", "(", ")", ":", "\n", "        ", "return", "False", "\n", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_fedmri.util.misc.get_world_size": [[385, 389], ["torch.get_world_size", "misc.is_dist_avail_and_initialized"], "function", ["home.repos.pwc.inspect_result.chunmeifeng_fedmri.util.misc.get_world_size", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.util.misc.is_dist_avail_and_initialized"], ["", "def", "get_world_size", "(", ")", ":", "\n", "    ", "if", "not", "is_dist_avail_and_initialized", "(", ")", ":", "\n", "        ", "return", "1", "\n", "", "return", "dist", ".", "get_world_size", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_fedmri.util.misc.get_rank": [[391, 395], ["torch.get_rank", "misc.is_dist_avail_and_initialized"], "function", ["home.repos.pwc.inspect_result.chunmeifeng_fedmri.util.misc.get_rank", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.util.misc.is_dist_avail_and_initialized"], ["", "def", "get_rank", "(", ")", ":", "\n", "    ", "if", "not", "is_dist_avail_and_initialized", "(", ")", ":", "\n", "        ", "return", "0", "\n", "", "return", "dist", ".", "get_rank", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_fedmri.util.misc.is_main_process": [[397, 399], ["misc.get_rank"], "function", ["home.repos.pwc.inspect_result.chunmeifeng_fedmri.util.misc.get_rank"], ["", "def", "is_main_process", "(", ")", ":", "\n", "    ", "return", "get_rank", "(", ")", "==", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_fedmri.util.misc.save_on_master": [[401, 404], ["misc.is_main_process", "torch.save", "torch.save"], "function", ["home.repos.pwc.inspect_result.chunmeifeng_fedmri.util.misc.is_main_process"], ["", "def", "save_on_master", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "if", "is_main_process", "(", ")", ":", "\n", "        ", "torch", ".", "save", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_fedmri.util.misc.init_distributed_mode": [[406, 429], ["torch.cuda.set_device", "torch.cuda.set_device", "misc.setup_for_distributed.print", "torch.distributed.init_process_group", "torch.distributed.init_process_group", "torch.distributed.barrier", "torch.distributed.barrier", "misc.setup_for_distributed", "int", "int", "int", "int", "misc.setup_for_distributed.print", "torch.cuda.device_count", "torch.cuda.device_count"], "function", ["home.repos.pwc.inspect_result.chunmeifeng_fedmri.util.misc.setup_for_distributed"], ["", "", "def", "init_distributed_mode", "(", "args", ")", ":", "\n", "    ", "if", "'RANK'", "in", "os", ".", "environ", "and", "'WORLD_SIZE'", "in", "os", ".", "environ", ":", "\n", "        ", "args", ".", "rank", "=", "int", "(", "os", ".", "environ", "[", "\"RANK\"", "]", ")", "\n", "args", ".", "world_size", "=", "int", "(", "os", ".", "environ", "[", "'WORLD_SIZE'", "]", ")", "\n", "args", ".", "gpu", "=", "int", "(", "os", ".", "environ", "[", "'LOCAL_RANK'", "]", ")", "\n", "", "elif", "'SLURM_PROCID'", "in", "os", ".", "environ", ":", "\n", "        ", "args", ".", "rank", "=", "int", "(", "os", ".", "environ", "[", "'SLURM_PROCID'", "]", ")", "\n", "args", ".", "gpu", "=", "args", ".", "rank", "%", "torch", ".", "cuda", ".", "device_count", "(", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "'Not using distributed mode'", ")", "\n", "args", ".", "distributed", "=", "False", "\n", "return", "\n", "\n", "", "args", ".", "distributed", "=", "True", "\n", "\n", "torch", ".", "cuda", ".", "set_device", "(", "args", ".", "gpu", ")", "\n", "args", ".", "dist_backend", "=", "'nccl'", "\n", "print", "(", "'| distributed init (rank {}): {}'", ".", "format", "(", "\n", "args", ".", "rank", ",", "args", ".", "dist_url", ")", ",", "flush", "=", "True", ")", "\n", "torch", ".", "distributed", ".", "init_process_group", "(", "backend", "=", "args", ".", "dist_backend", ",", "init_method", "=", "args", ".", "dist_url", ",", "\n", "world_size", "=", "args", ".", "world_size", ",", "rank", "=", "args", ".", "rank", ")", "\n", "torch", ".", "distributed", ".", "barrier", "(", ")", "\n", "setup_for_distributed", "(", "args", ".", "rank", "==", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_fedmri.util.misc.accuracy": [[431, 448], ["torch.no_grad", "torch.no_grad", "max", "target.size", "output.topk", "pred.t.t", "pred.t.eq", "target.numel", "target.view().expand_as", "correct[].view().float().sum", "res.append", "torch.zeros", "torch.zeros", "correct[].view().float().sum.mul_", "target.view", "correct[].view().float", "correct[].view"], "function", ["home.repos.pwc.inspect_result.chunmeifeng_fedmri.util.misc.SmoothedValue.max"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "accuracy", "(", "output", ",", "target", ",", "topk", "=", "(", "1", ",", ")", ")", ":", "\n", "    ", "\"\"\"Computes the precision@k for the specified values of k\"\"\"", "\n", "if", "target", ".", "numel", "(", ")", "==", "0", ":", "\n", "        ", "return", "[", "torch", ".", "zeros", "(", "[", "]", ",", "device", "=", "output", ".", "device", ")", "]", "\n", "", "maxk", "=", "max", "(", "topk", ")", "\n", "batch_size", "=", "target", ".", "size", "(", "0", ")", "\n", "\n", "_", ",", "pred", "=", "output", ".", "topk", "(", "maxk", ",", "1", ",", "True", ",", "True", ")", "\n", "pred", "=", "pred", ".", "t", "(", ")", "\n", "correct", "=", "pred", ".", "eq", "(", "target", ".", "view", "(", "1", ",", "-", "1", ")", ".", "expand_as", "(", "pred", ")", ")", "\n", "\n", "res", "=", "[", "]", "\n", "for", "k", "in", "topk", ":", "\n", "        ", "correct_k", "=", "correct", "[", ":", "k", "]", ".", "view", "(", "-", "1", ")", ".", "float", "(", ")", ".", "sum", "(", "0", ")", "\n", "res", ".", "append", "(", "correct_k", ".", "mul_", "(", "100.0", "/", "batch_size", ")", ")", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_fedmri.util.misc.interpolate": [[450, 468], ["float", "_output_size", "_new_empty_tensor", "torchvision.ops.misc.interpolate", "input.numel", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "list", "list"], "function", ["home.repos.pwc.inspect_result.chunmeifeng_fedmri.util.misc.interpolate", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.util.misc.interpolate", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.util.misc.interpolate"], ["", "def", "interpolate", "(", "input", ",", "size", "=", "None", ",", "scale_factor", "=", "None", ",", "mode", "=", "\"nearest\"", ",", "align_corners", "=", "None", ")", ":", "\n", "# type: (Tensor, Optional[List[int]], Optional[float], str, Optional[bool]) -> Tensor", "\n", "    ", "\"\"\"\n    Equivalent to nn.functional.interpolate, but with support for empty batch sizes.\n    This will eventually be supported natively by PyTorch, and this\n    class can go away.\n    \"\"\"", "\n", "if", "float", "(", "torchvision", ".", "__version__", "[", ":", "3", "]", ")", "<", "0.7", ":", "\n", "        ", "if", "input", ".", "numel", "(", ")", ">", "0", ":", "\n", "            ", "return", "torch", ".", "nn", ".", "functional", ".", "interpolate", "(", "\n", "input", ",", "size", ",", "scale_factor", ",", "mode", ",", "align_corners", "\n", ")", "\n", "\n", "", "output_shape", "=", "_output_size", "(", "2", ",", "input", ",", "size", ",", "scale_factor", ")", "\n", "output_shape", "=", "list", "(", "input", ".", "shape", "[", ":", "-", "2", "]", ")", "+", "list", "(", "output_shape", ")", "\n", "return", "_new_empty_tensor", "(", "input", ",", "output_shape", ")", "\n", "", "else", ":", "\n", "        ", "return", "torchvision", ".", "ops", ".", "misc", ".", "interpolate", "(", "input", ",", "size", ",", "scale_factor", ",", "mode", ",", "align_corners", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.chunmeifeng_fedmri.util.metric.AverageMeter.__init__": [[53, 55], ["metric.AverageMeter.reset"], "methods", ["home.repos.pwc.inspect_result.chunmeifeng_fedmri.util.metric.AverageMeter.reset"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_fedmri.util.metric.AverageMeter.reset": [[56, 61], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "val", "=", "0", "\n", "self", ".", "avg", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_fedmri.util.metric.AverageMeter.update": [[62, 67], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "        ", "self", ".", "val", "=", "val", "\n", "self", ".", "sum", "+=", "val", "*", "n", "\n", "self", ".", "count", "+=", "n", "\n", "self", ".", "avg", "=", "self", ".", "sum", "/", "self", ".", "count", "", "", "", ""]], "home.repos.pwc.inspect_result.chunmeifeng_fedmri.util.metric.nmse": [[5, 15], ["range", "numpy.linalg.norm", "numpy.linalg.norm"], "function", ["home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.fastmri.norm", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.fastmri.norm"], ["def", "nmse", "(", "gt", ",", "pred", ")", ":", "\n", "    ", "\"\"\"Compute Normalized Mean Squared Error (NMSE)\"\"\"", "\n", "result", "=", "0", "\n", "\n", "for", "idx", "in", "range", "(", "gt", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "result", "+=", "np", ".", "linalg", ".", "norm", "(", "gt", "[", "idx", "]", "-", "pred", "[", "idx", "]", ")", "**", "2", "/", "np", ".", "linalg", ".", "norm", "(", "gt", "[", "idx", "]", ")", "**", "2", "\n", "\n", "", "result", "=", "result", "/", "gt", ".", "shape", "[", "0", "]", "\n", "\n", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_fedmri.util.metric.psnr": [[17, 30], ["gt.max", "range", "skimage.metrics.peak_signal_noise_ratio"], "function", ["home.repos.pwc.inspect_result.chunmeifeng_fedmri.util.misc.SmoothedValue.max"], ["", "def", "psnr", "(", "gt", ",", "pred", ")", ":", "\n", "    ", "\"\"\"Compute Peak Signal to Noise Ratio metric (PSNR)\"\"\"", "\n", "\n", "maxval", "=", "gt", ".", "max", "(", ")", "\n", "\n", "result", "=", "0", "\n", "\n", "for", "idx", "in", "range", "(", "gt", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "result", "+=", "peak_signal_noise_ratio", "(", "gt", "[", "idx", "]", ",", "pred", "[", "idx", "]", ",", "data_range", "=", "maxval", ")", "\n", "\n", "", "result", "=", "result", "/", "gt", ".", "shape", "[", "0", "]", "\n", "\n", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_fedmri.util.metric.ssim": [[32, 45], ["range", "gt.max", "skimage.metrics.structural_similarity"], "function", ["home.repos.pwc.inspect_result.chunmeifeng_fedmri.util.misc.SmoothedValue.max"], ["", "def", "ssim", "(", "gt", ",", "pred", ",", "maxval", "=", "None", ")", ":", "\n", "    ", "\"\"\"Compute Structural Similarity Index Metric (SSIM)\"\"\"", "\n", "maxval", "=", "gt", ".", "max", "(", ")", "if", "maxval", "is", "None", "else", "maxval", "\n", "\n", "ssim", "=", "0", "\n", "for", "slice_num", "in", "range", "(", "gt", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "ssim", "=", "ssim", "+", "structural_similarity", "(", "\n", "gt", "[", "slice_num", "]", ",", "pred", "[", "slice_num", "]", ",", "data_range", "=", "maxval", "\n", ")", "\n", "\n", "", "ssim", "=", "ssim", "/", "gt", ".", "shape", "[", "0", "]", "\n", "\n", "return", "ssim", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_fedmri.util.utils.imshow": [[8, 21], ["matplotlib.figure", "matplotlib.imshow", "matplotlib.axis", "matplotlib.title", "matplotlib.show", "print", "numpy.abs"], "function", ["home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.fastmri.imshow"], ["def", "imshow", "(", "img", ",", "title", "=", "\"\"", ")", ":", "\n", "    ", "\"\"\" Show image as grayscale. \n    imshow(np.linalg.norm(coilImages, axis=0))\n    \"\"\"", "\n", "if", "img", ".", "dtype", "==", "np", ".", "complex64", "or", "img", ".", "dtype", "==", "np", ".", "complex128", ":", "\n", "        ", "print", "(", "'img is complex! Take absolute value.'", ")", "\n", "img", "=", "np", ".", "abs", "(", "img", ")", "\n", "\n", "", "plt", ".", "figure", "(", ")", "\n", "plt", ".", "imshow", "(", "img", ",", "cmap", "=", "'gray'", ",", "interpolation", "=", "'nearest'", ")", "\n", "plt", ".", "axis", "(", "'off'", ")", "\n", "plt", ".", "title", "(", "title", ")", "\n", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_fedmri.util.utils.lr_plot": [[23, 44], ["numpy.linspace", "numpy.argmin", "matplotlib.figure", "matplotlib.title", "matplotlib.plot", "matplotlib.plot", "matplotlib.annotate", "matplotlib.grid", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.legend", "datetime.datetime.now().strftime", "matplotlib.savefig", "matplotlib.close", "len", "len", "os.path.join", "datetime.datetime.now"], "function", ["None"], ["", "def", "lr_plot", "(", "lr_", ",", "save_dir", ")", ":", "\n", "# iters = range(len(psnr_[psnr_type]))", "\n", "    ", "iters", "=", "np", ".", "linspace", "(", "1", ",", "len", "(", "lr_", ")", ",", "len", "(", "lr_", ")", ")", "\n", "min_idx", "=", "np", ".", "argmin", "(", "lr_", ")", "\n", "\n", "fig", "=", "plt", ".", "figure", "(", ")", "\n", "plt", ".", "title", "(", "'Restoration on {}'", ".", "format", "(", "'ComplexMRI'", ")", ")", "\n", "plt", ".", "plot", "(", "iters", ",", "lr_", ",", "'g'", ",", "label", "=", "'epoch_psnr'", ")", "\n", "plt", ".", "plot", "(", "min_idx", "+", "1", ",", "lr_", "[", "min_idx", "]", ",", "marker", "=", "'.'", ",", "color", "=", "'k'", ")", "\n", "plt", ".", "annotate", "(", "'min:{:.6f}'", ".", "format", "(", "lr_", "[", "min_idx", "]", ")", ",", "\n", "xytext", "=", "(", "min_idx", "-", "5", ",", "lr_", "[", "min_idx", "]", ")", ",", "\n", "xy", "=", "(", "min_idx", ",", "lr_", "[", "min_idx", "]", ")", ",", "\n", "textcoords", "=", "'data'", "\n", ")", "\n", "plt", ".", "grid", "(", "True", ")", "\n", "plt", ".", "xlabel", "(", "'epoch'", ")", "\n", "plt", ".", "ylabel", "(", "'lr'", ")", "\n", "plt", ".", "legend", "(", "loc", "=", "\"best\"", ")", "\n", "a", "=", "datetime", ".", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "'%Y-%m-%d-%H:%M'", ")", "\n", "plt", ".", "savefig", "(", "os", ".", "path", ".", "join", "(", "save_dir", ",", "'lr{}.png'", ".", "format", "(", "a", ")", ")", ")", "\n", "plt", ".", "close", "(", "fig", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_fedmri.util.utils.plot_loss": [[46, 109], ["type", "dst_type.lower().find", "enumerate", "os.path.join", "os.makedirs", "numpy.linspace", "matplotlib.figure", "matplotlib.title", "matplotlib.plot", "matplotlib.plot", "matplotlib.grid", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.gca", "plt.gca.yaxis.get_major_formatter().set_powerlimits", "matplotlib.legend", "matplotlib.savefig", "matplotlib.close", "numpy.linspace", "matplotlib.figure", "matplotlib.title", "enumerate", "matplotlib.grid", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.gca", "plt.gca.yaxis.get_major_formatter().set_powerlimits", "matplotlib.legend", "matplotlib.savefig", "matplotlib.close", "ValueError", "dst_type.lower", "os.path.join", "dst_type.lower().find", "dst_type.lower().find", "os.path.join().format", "plt.gca.yaxis.get_major_formatter", "dst_type.lower().find", "matplotlib.plot", "dst_type.lower().find", "matplotlib.plot", "plt.gca.yaxis.get_major_formatter", "dst_type.lower", "dst_type.lower", "os.path.join", "dst_type.lower", "dst_type.lower"], "function", ["None"], ["", "def", "plot_loss", "(", "dst_dict", ",", "dst_type", ",", "save_dir", ",", "args", "=", "cfg", ")", ":", "\n", "    ", "assert", "type", "(", "dst_type", ")", "is", "str", "\n", "\n", "if", "dst_type", ".", "lower", "(", ")", ".", "find", "(", "'client'", ")", ">=", "0", ":", "\n", "        ", "for", "idx", ",", "client_name", "in", "enumerate", "(", "args", ".", "DATASET", ".", "CLIENTS", ")", ":", "\n", "            ", "client_dir", "=", "os", ".", "path", ".", "join", "(", "args", ".", "LOGDIR", ",", "client_name", ")", "\n", "os", ".", "makedirs", "(", "client_dir", ",", "exist_ok", "=", "True", ")", "\n", "\n", "iters", "=", "np", ".", "linspace", "(", "1", ",", "args", ".", "TRAIN", ".", "EPOCHS", ",", "args", ".", "TRAIN", ".", "EPOCHS", ")", "\n", "\n", "fig", "=", "plt", ".", "figure", "(", ")", "\n", "plt", ".", "title", "(", "'Restoration on {}'", ".", "format", "(", "args", ".", "FL", ".", "MODEL_NAME", ")", ")", "\n", "\n", "# train loss", "\n", "input_list_train", "=", "dst_dict", "[", "idx", "]", "[", "'loss_train_epoch'", "]", "\n", "plt", ".", "plot", "(", "iters", ",", "input_list_train", ",", "'firebrick'", ",", "label", "=", "'train loss'", ")", "\n", "\n", "# val loss", "\n", "input_list_val", "=", "dst_dict", "[", "idx", "]", "[", "'loss_val_epoch'", "]", "\n", "plt", ".", "plot", "(", "iters", ",", "input_list_val", ",", "'darkorange'", ",", "label", "=", "'val loss'", ")", "\n", "\n", "plt", ".", "grid", "(", "True", ")", "\n", "plt", ".", "xlabel", "(", "'epoch'", ")", "\n", "plt", ".", "ylabel", "(", "'loss'", ")", "\n", "ax", "=", "plt", ".", "gca", "(", ")", "\n", "ax", ".", "yaxis", ".", "get_major_formatter", "(", ")", ".", "set_powerlimits", "(", "(", "0", ",", "2", ")", ")", "# \u5c06\u5750\u6807\u8f74\u7684base number\u8bbe\u7f6e\u4e3a2\u4f4d", "\n", "plt", ".", "legend", "(", "loc", "=", "\"best\"", ")", "\n", "plt", ".", "savefig", "(", "os", ".", "path", ".", "join", "(", "client_dir", ",", "'Loss_{}.png'", ".", "format", "(", "client_name", ")", ")", ")", "\n", "plt", ".", "close", "(", "fig", ")", "\n", "\n", "", "", "elif", "dst_type", ".", "lower", "(", ")", ".", "find", "(", "'train'", ")", ">=", "0", "or", "dst_type", ".", "lower", "(", ")", ".", "find", "(", "'val'", ")", ">=", "0", ":", "\n", "        ", "iters", "=", "np", ".", "linspace", "(", "1", ",", "args", ".", "TRAIN", ".", "EPOCHS", ",", "args", ".", "TRAIN", ".", "EPOCHS", ")", "\n", "colors", "=", "[", "'firebrick'", ",", "'darkorange'", ",", "'forestgreen'", ",", "'darkcyan'", ",", "'royalblue'", ",", "'darkorchid'", "]", "\n", "input_list_train", "=", "[", "]", "\n", "\n", "fig", "=", "plt", ".", "figure", "(", ")", "\n", "plt", ".", "title", "(", "'Reconstruction on {}'", ".", "format", "(", "args", ".", "FL", ".", "MODEL_NAME", ")", ")", "\n", "\n", "for", "idx", ",", "client_name", "in", "enumerate", "(", "args", ".", "DATASET", ".", "CLIENTS", ")", ":", "\n", "\n", "            ", "if", "dst_type", ".", "lower", "(", ")", ".", "find", "(", "'train'", ")", ">=", "0", ":", "\n", "# train loss", "\n", "                ", "input_list_train", "=", "dst_dict", "[", "idx", "]", "[", "'loss_train_epoch'", "]", "\n", "plt", ".", "plot", "(", "iters", ",", "input_list_train", ",", "label", "=", "'train_{}'", ".", "format", "(", "client_name", ")", ",", "color", "=", "colors", "[", "idx", "]", ")", "\n", "\n", "", "if", "dst_type", ".", "lower", "(", ")", ".", "find", "(", "'val'", ")", ">=", "0", ":", "\n", "                ", "linestyle_val", "=", "'--'", "if", "input_list_train", "!=", "[", "]", "else", "'-'", "\n", "\n", "# val loss", "\n", "input_list_val", "=", "dst_dict", "[", "idx", "]", "[", "'loss_val_epoch'", "]", "\n", "plt", ".", "plot", "(", "iters", ",", "input_list_val", ",", "label", "=", "'val_{}'", ".", "format", "(", "client_name", ")", ",", "color", "=", "colors", "[", "idx", "]", ",", "linestyle", "=", "linestyle_val", ")", "\n", "\n", "", "", "plt", ".", "grid", "(", "True", ")", "\n", "plt", ".", "xlabel", "(", "'epoch'", ")", "\n", "plt", ".", "ylabel", "(", "'loss'", ")", "\n", "ax", "=", "plt", ".", "gca", "(", ")", "\n", "ax", ".", "yaxis", ".", "get_major_formatter", "(", ")", ".", "set_powerlimits", "(", "(", "0", ",", "2", ")", ")", "# \u5c06\u5750\u6807\u8f74\u7684base number\u8bbe\u7f6e\u4e3a2\u4f4d", "\n", "plt", ".", "legend", "(", "loc", "=", "\"best\"", ")", "\n", "plt", ".", "savefig", "(", "os", ".", "path", ".", "join", "(", "args", ".", "LOGDIR", ",", "'Loss_{}.png'", ")", ".", "format", "(", "dst_type", ")", ")", "\n", "plt", ".", "close", "(", "fig", ")", "\n", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'Wrong dst_type: {}!'", ".", "format", "(", "dst_type", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_fedmri.util.utils.any_plot": [[111, 179], ["type", "dst_type.lower", "numpy.linspace", "numpy.argmin", "matplotlib.figure", "matplotlib.title", "matplotlib.plot", "numpy.argmin", "matplotlib.plot", "matplotlib.grid", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.gca", "plt.gca.yaxis.get_major_formatter().set_powerlimits", "matplotlib.legend", "datetime.datetime.now().strftime", "matplotlib.savefig", "matplotlib.close", "print", "numpy.linspace", "numpy.argmax", "matplotlib.figure", "matplotlib.title", "matplotlib.plot", "matplotlib.plot", "matplotlib.annotate", "matplotlib.grid", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.legend", "datetime.datetime.now().strftime", "matplotlib.savefig", "matplotlib.close", "len", "os.path.join", "dst_type.lower", "dst_type.lower", "len", "len", "os.path.join", "plt.gca.yaxis.get_major_formatter", "datetime.datetime.now", "dst_type.lower", "datetime.datetime.now", "ValueError", "dst_type.lower", "dst_type.lower().find", "dst_type.lower"], "function", ["None"], ["", "", "def", "any_plot", "(", "dst_dict", ",", "dst_type", ",", "save_dir", ")", ":", "\n", "    ", "assert", "type", "(", "dst_type", ")", "is", "str", "\n", "if", "dst_type", ".", "lower", "(", ")", "==", "'loss'", ":", "\n", "# train loss", "\n", "        ", "input_list_train", "=", "dst_dict", "[", "'loss_train_count'", "]", "\n", "iters", "=", "np", ".", "linspace", "(", "1", ",", "50", ",", "len", "(", "input_list_train", ")", ")", "# from 1 to ...", "\n", "idx_min_train", "=", "np", ".", "argmin", "(", "input_list_train", ")", "\n", "fig", "=", "plt", ".", "figure", "(", ")", "\n", "plt", ".", "title", "(", "'Restoration on {}'", ".", "format", "(", "'ComplexMRI'", ")", ")", "\n", "\n", "\n", "plt", ".", "plot", "(", "iters", ",", "input_list_train", ",", "'g'", ",", "label", "=", "'train loss'", ")", "\n", "# plt.plot(idx_min_train+1, input_list_train[idx_min_train], marker='v', color='k')  # \u6807\u8bb0\u70b9", "\n", "# plt.annotate('min:{:.6f}'.format(input_list_train[idx_min_train]),  # \u6807\u8bb0\u6570\u636e", "\n", "#                             xytext=(idx_min_train-5,input_list_train[idx_min_train]),", "\n", "#                             xy=(idx_min_train,input_list_train[idx_min_train]),", "\n", "#                             textcoords='data'", "\n", "#                             )", "\n", "\n", "# val loss", "\n", "input_list_val", "=", "dst_dict", "[", "'loss_val_count'", "]", "\n", "idx_min_val", "=", "np", ".", "argmin", "(", "input_list_val", ")", "\n", "plt", ".", "plot", "(", "iters", ",", "input_list_val", ",", "'r'", ",", "label", "=", "'val loss'", ")", "\n", "# plt.plot(idx_min_val+1, input_list_val[idx_min_val], marker='v', color='k')  # \u6807\u8bb0\u70b9", "\n", "# plt.annotate('min:{:.6f}'.format(input_list_val[idx_min_val]),  # \u6807\u8bb0\u6570\u636e", "\n", "#                             xytext=(idx_min_val-5,input_list_val[idx_min_val]),", "\n", "#                             xy=(idx_min_val,input_list_val[idx_min_val]),", "\n", "#                             textcoords='data'", "\n", "#                             )", "\n", "plt", ".", "grid", "(", "True", ")", "\n", "plt", ".", "xlabel", "(", "'epoch'", ")", "\n", "plt", ".", "ylabel", "(", "dst_type", ")", "\n", "ax", "=", "plt", ".", "gca", "(", ")", "\n", "ax", ".", "yaxis", ".", "get_major_formatter", "(", ")", ".", "set_powerlimits", "(", "(", "0", ",", "2", ")", ")", "\n", "plt", ".", "legend", "(", "loc", "=", "\"best\"", ")", "\n", "a", "=", "datetime", ".", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "'%Y-%m-%d-%H:%M'", ")", "\n", "plt", ".", "savefig", "(", "os", ".", "path", ".", "join", "(", "save_dir", ",", "'Loss_{}.png'", ".", "format", "(", "a", ")", ")", ")", "\n", "plt", ".", "close", "(", "fig", ")", "\n", "\n", "", "else", ":", "\n", "        ", "print", "(", "dst_type", ".", "lower", "(", ")", ")", "\n", "if", "dst_type", ".", "lower", "(", ")", "==", "'psnr'", ":", "\n", "            ", "input_list", "=", "dst_dict", "[", "'psnr_epoch'", "]", "\n", "", "elif", "dst_type", ".", "lower", "(", ")", "==", "'ssim'", ":", "\n", "            ", "input_list", "=", "dst_dict", "[", "'ssim_epoch'", "]", "\n", "", "elif", "dst_type", ".", "lower", "(", ")", "==", "'lr'", "or", "dst_type", ".", "lower", "(", ")", ".", "find", "(", "'learning rate'", ")", ">=", "0", ":", "\n", "            ", "input_list", "=", "dst_dict", "[", "'lr_epoch'", "]", "\n", "", "else", ":", "raise", "ValueError", "(", "'Invalid Criterion: {}'", ".", "format", "(", "dst_type", ")", ")", "\n", "\n", "iters", "=", "np", ".", "linspace", "(", "1", ",", "len", "(", "input_list", ")", ",", "len", "(", "input_list", ")", ")", "\n", "max_idx", "=", "np", ".", "argmax", "(", "input_list", ")", "\n", "\n", "fig", "=", "plt", ".", "figure", "(", ")", "\n", "plt", ".", "title", "(", "'Restoration on {}'", ".", "format", "(", "args", ".", "name", ")", ")", "\n", "plt", ".", "plot", "(", "iters", ",", "input_list", ",", "'g'", ",", "label", "=", "'{}_epoch'", ".", "format", "(", "dst_type", ")", ")", "\n", "plt", ".", "plot", "(", "max_idx", "+", "1", ",", "input_list", "[", "max_idx", "]", ",", "marker", "=", "'v'", ",", "color", "=", "'k'", ")", "\n", "plt", ".", "annotate", "(", "'max:{:.3f}'", ".", "format", "(", "input_list", "[", "max_idx", "]", ")", ",", "\n", "xytext", "=", "(", "max_idx", ",", "input_list", "[", "max_idx", "]", ")", ",", "\n", "xy", "=", "(", "max_idx", ",", "input_list", "[", "max_idx", "]", ")", ",", "\n", "textcoords", "=", "'data'", "\n", ")", "\n", "plt", ".", "grid", "(", "True", ")", "\n", "plt", ".", "xlabel", "(", "'epoch'", ")", "\n", "plt", ".", "ylabel", "(", "dst_type", ")", "\n", "plt", ".", "legend", "(", "loc", "=", "\"best\"", ")", "\n", "a", "=", "datetime", ".", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "'%Y-%m-%d-%H:%M'", ")", "\n", "plt", ".", "savefig", "(", "os", ".", "path", ".", "join", "(", "save_dir", ",", "'{}_{}.png'", ".", "format", "(", "dst_type", ",", "a", ")", ")", ")", "\n", "plt", ".", "close", "(", "fig", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_fedmri.util.utils.psnr_plot": [[181, 203], ["numpy.linspace", "numpy.argmax", "matplotlib.figure", "matplotlib.title", "matplotlib.plot", "matplotlib.plot", "matplotlib.annotate", "matplotlib.grid", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.legend", "datetime.datetime.now().strftime", "matplotlib.savefig", "matplotlib.close", "len", "len", "os.path.join", "datetime.datetime.now"], "function", ["None"], ["", "", "def", "psnr_plot", "(", "psnr_", ",", "psnr_type", ",", "save_dir", ")", ":", "\n", "# iters = range(len(psnr_[psnr_type]))", "\n", "    ", "iters", "=", "np", ".", "linspace", "(", "1", ",", "len", "(", "psnr_", "[", "psnr_type", "]", ")", ",", "len", "(", "psnr_", "[", "psnr_type", "]", ")", ")", "\n", "max_idx", "=", "np", ".", "argmax", "(", "psnr_", "[", "psnr_type", "]", ")", "\n", "\n", "fig", "=", "plt", ".", "figure", "(", ")", "\n", "plt", ".", "title", "(", "'Restoration on {}'", ".", "format", "(", "'ComplexMRI'", ")", ")", "\n", "plt", ".", "plot", "(", "iters", ",", "psnr_", "[", "psnr_type", "]", ",", "'g'", ",", "label", "=", "'epoch_psnr'", ")", "\n", "plt", ".", "plot", "(", "max_idx", "+", "1", ",", "psnr_", "[", "psnr_type", "]", "[", "max_idx", "]", ",", "marker", "=", "'v'", ",", "color", "=", "'k'", ")", "\n", "plt", ".", "annotate", "(", "'max:{:.3f}'", ".", "format", "(", "psnr_", "[", "psnr_type", "]", "[", "max_idx", "]", ")", ",", "\n", "# xytext=(max_idx-5,psnr_[psnr_type][max_idx]),", "\n", "xytext", "=", "(", "max_idx", ",", "psnr_", "[", "psnr_type", "]", "[", "max_idx", "]", ")", ",", "\n", "xy", "=", "(", "max_idx", ",", "psnr_", "[", "psnr_type", "]", "[", "max_idx", "]", ")", ",", "\n", "textcoords", "=", "'data'", "\n", ")", "\n", "plt", ".", "grid", "(", "True", ")", "\n", "plt", ".", "xlabel", "(", "psnr_type", ")", "\n", "plt", ".", "ylabel", "(", "'PSNR'", ")", "\n", "plt", ".", "legend", "(", "loc", "=", "\"best\"", ")", "\n", "a", "=", "datetime", ".", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "'%Y-%m-%d-%H:%M'", ")", "\n", "plt", ".", "savefig", "(", "os", ".", "path", ".", "join", "(", "save_dir", ",", "'PSNR{}.png'", ".", "format", "(", "a", ")", ")", ")", "\n", "plt", ".", "close", "(", "fig", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_fedmri.models.loss.LossWrapper.__init__": [[6, 9], ["torch.nn.Module.__init__", "torch.nn.MSELoss", "torch.nn.MSELoss"], "methods", ["home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.dicom_mix.FastMRIDicom.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "super", "(", "LossWrapper", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "l1_loss", "=", "nn", ".", "MSELoss", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_fedmri.models.loss.LossWrapper.forward": [[10, 14], ["loss.LossWrapper.l1_loss"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "outputs", ",", "targets", ")", ":", "\n", "        ", "l1_loss", "=", "self", ".", "l1_loss", "(", "outputs", ",", "targets", ")", "\n", "loss", "=", "l1_loss", "\n", "return", "{", "'l1_loss'", ":", "l1_loss", ",", "'loss'", ":", "loss", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_fedmri.models.loss.Criterion": [[16, 18], ["loss.LossWrapper"], "function", ["None"], ["", "", "def", "Criterion", "(", "args", ")", ":", "\n", "    ", "return", "LossWrapper", "(", "args", ")", "", "", ""]], "home.repos.pwc.inspect_result.chunmeifeng_fedmri.models.unet_module.Except_LastLayer.__init__": [[14, 48], ["torch.nn.Module.__init__", "torch.nn.ModuleList", "range", "unet_module.ConvBlock", "torch.nn.ModuleList", "torch.nn.ModuleList", "range", "unet_module.Except_LastLayer.up_transpose_conv.append", "unet_module.Except_LastLayer.up_conv.append", "unet_module.Except_LastLayer.down_sample_layers.append", "unet_module.Except_LastLayer.up_transpose_conv.append", "unet_module.Except_LastLayer.up_conv.append", "unet_module.TransposeConvBlock", "torch.nn.Sequential", "unet_module.ConvBlock", "unet_module.ConvBlock", "unet_module.TransposeConvBlock", "unet_module.ConvBlock", "unet_module.ConvBlock"], "methods", ["home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.dicom_mix.FastMRIDicom.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "in_chans", ":", "int", "=", "1", ",", "\n", "out_chans", ":", "int", "=", "cfg", ".", "MODEL", ".", "OUTPUT_DIM", ",", "\n", "chans", ":", "int", "=", "32", ",", "\n", "num_pool_layers", ":", "int", "=", "4", ",", "\n", "drop_prob", ":", "float", "=", "0.0", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "in_chans", "=", "in_chans", "\n", "self", ".", "out_chans", "=", "out_chans", "\n", "self", ".", "chans", "=", "chans", "\n", "self", ".", "num_pool_layers", "=", "num_pool_layers", "\n", "self", ".", "drop_prob", "=", "drop_prob", "\n", "\n", "self", ".", "down_sample_layers", "=", "nn", ".", "ModuleList", "(", "[", "ConvBlock", "(", "in_chans", ",", "chans", ",", "drop_prob", ")", "]", ")", "\n", "ch", "=", "chans", "\n", "for", "_", "in", "range", "(", "num_pool_layers", "-", "1", ")", ":", "\n", "            ", "self", ".", "down_sample_layers", ".", "append", "(", "ConvBlock", "(", "ch", ",", "ch", "*", "2", ",", "drop_prob", ")", ")", "\n", "ch", "*=", "2", "\n", "", "self", ".", "conv", "=", "ConvBlock", "(", "ch", ",", "ch", "*", "2", ",", "drop_prob", ")", "\n", "\n", "self", ".", "up_conv", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "up_transpose_conv", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "_", "in", "range", "(", "num_pool_layers", "-", "1", ")", ":", "\n", "            ", "self", ".", "up_transpose_conv", ".", "append", "(", "TransposeConvBlock", "(", "ch", "*", "2", ",", "ch", ")", ")", "\n", "self", ".", "up_conv", ".", "append", "(", "ConvBlock", "(", "ch", "*", "2", ",", "ch", ",", "drop_prob", ")", ")", "\n", "ch", "//=", "2", "\n", "\n", "", "self", ".", "up_transpose_conv", ".", "append", "(", "TransposeConvBlock", "(", "ch", "*", "2", ",", "ch", ")", ")", "\n", "self", ".", "up_conv", ".", "append", "(", "\n", "nn", ".", "Sequential", "(", "\n", "ConvBlock", "(", "ch", "*", "2", ",", "ch", ",", "drop_prob", ")", ",", "\n", "# nn.Conv2d(ch, self.out_chans, kernel_size=1, stride=1),", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_fedmri.models.unet_module.Except_LastLayer.forward": [[52, 88], ["unet_module.Except_LastLayer.conv", "zip", "layer", "stack.append", "torch.nn.functional.avg_pool2d", "stack.pop", "transpose_conv", "torch.cat", "conv", "torch.sum", "torch.nn.functional.pad", "torch.tensor"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "image", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "\"\"\"\n        Args:\n            image: Input 4D tensor of shape `(N, in_chans, H, W)`.\n        Returns:\n            Output tensor of shape `(N, out_chans, H, W)`.\n        \"\"\"", "\n", "stack", "=", "[", "]", "\n", "output", "=", "image", "\n", "\n", "# apply down-sampling layers", "\n", "for", "layer", "in", "self", ".", "down_sample_layers", ":", "\n", "            ", "output", "=", "layer", "(", "output", ")", "\n", "stack", ".", "append", "(", "output", ")", "\n", "output", "=", "F", ".", "avg_pool2d", "(", "output", ",", "kernel_size", "=", "2", ",", "stride", "=", "2", ",", "padding", "=", "0", ")", "\n", "\n", "", "output", "=", "self", ".", "conv", "(", "output", ")", "\n", "\n", "# apply up-sampling layers", "\n", "for", "transpose_conv", ",", "conv", "in", "zip", "(", "self", ".", "up_transpose_conv", ",", "self", ".", "up_conv", ")", ":", "\n", "            ", "downsample_layer", "=", "stack", ".", "pop", "(", ")", "\n", "output", "=", "transpose_conv", "(", "output", ")", "\n", "\n", "# reflect pad on the right/botton if needed to handle odd input dimensions", "\n", "padding", "=", "[", "0", ",", "0", ",", "0", ",", "0", "]", "\n", "if", "output", ".", "shape", "[", "-", "1", "]", "!=", "downsample_layer", ".", "shape", "[", "-", "1", "]", ":", "\n", "                ", "padding", "[", "1", "]", "=", "1", "# padding right", "\n", "", "if", "output", ".", "shape", "[", "-", "2", "]", "!=", "downsample_layer", ".", "shape", "[", "-", "2", "]", ":", "\n", "                ", "padding", "[", "3", "]", "=", "1", "# padding bottom", "\n", "", "if", "torch", ".", "sum", "(", "torch", ".", "tensor", "(", "padding", ")", ")", "!=", "0", ":", "\n", "                ", "output", "=", "F", ".", "pad", "(", "output", ",", "padding", ",", "\"reflect\"", ")", "\n", "\n", "", "output", "=", "torch", ".", "cat", "(", "[", "output", ",", "downsample_layer", "]", ",", "dim", "=", "1", ")", "\n", "output", "=", "conv", "(", "output", ")", "\n", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_fedmri.models.unet_module.Encoder.__init__": [[91, 101], ["torch.nn.Module.__init__", "torch.nn.ModuleList", "range", "unet_module.ConvBlock", "unet_module.Encoder.down_sample_layers.append", "unet_module.ConvBlock", "unet_module.ConvBlock"], "methods", ["home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.dicom_mix.FastMRIDicom.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_chans", ":", "int", "=", "1", ",", "chans", ":", "int", "=", "32", ",", "\n", "num_layers", ":", "int", "=", "4", ",", "drop_prob", ":", "float", "=", "0.0", ",", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "down_sample_layers", "=", "nn", ".", "ModuleList", "(", "[", "ConvBlock", "(", "in_chans", ",", "chans", ",", "drop_prob", ")", "]", ")", "\n", "\n", "for", "_", "in", "range", "(", "num_layers", "-", "1", ")", ":", "\n", "            ", "self", ".", "down_sample_layers", ".", "append", "(", "ConvBlock", "(", "chans", ",", "chans", "*", "2", ",", "drop_prob", ")", ")", "\n", "chans", "*=", "2", "\n", "\n", "", "self", ".", "conv", "=", "ConvBlock", "(", "chans", ",", "chans", "*", "2", ",", "drop_prob", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_fedmri.models.unet_module.Encoder.forward": [[102, 113], ["unet_module.Encoder.conv", "layer", "torch.nn.functional.avg_pool2d"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inp", ")", ":", "\n", "        ", "output", "=", "inp", "\n", "\n", "# apply down-sampling layers", "\n", "for", "layer", "in", "self", ".", "down_sample_layers", ":", "\n", "            ", "output", "=", "layer", "(", "output", ")", "\n", "output", "=", "F", ".", "avg_pool2d", "(", "output", ",", "kernel_size", "=", "2", ",", "stride", "=", "2", ",", "padding", "=", "0", ")", "\n", "\n", "", "output", "=", "self", ".", "conv", "(", "output", ")", "\n", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_fedmri.models.unet_module.Unet_A.__init__": [[116, 151], ["torch.nn.Module.__init__", "torch.nn.ModuleList", "range", "unet_module.ConvBlock", "torch.nn.ModuleList", "torch.nn.ModuleList", "range", "unet_module.Unet_A.up_transpose_conv.append", "unet_module.Unet_A.up_conv.append", "unet_module.Unet_A.down_sample_layers.append", "unet_module.Unet_A.up_transpose_conv.append", "unet_module.Unet_A.up_conv.append", "unet_module.TransposeConvBlock", "torch.nn.Sequential", "unet_module.ConvBlock", "unet_module.ConvBlock", "unet_module.TransposeConvBlock", "unet_module.ConvBlock", "unet_module.ConvBlock", "torch.nn.Conv2d"], "methods", ["home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.dicom_mix.FastMRIDicom.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "in_chans", ":", "int", "=", "1", ",", "\n", "out_chans", ":", "int", "=", "cfg", ".", "MODEL", ".", "OUTPUT_DIM", ",", "\n", "chans", ":", "int", "=", "32", ",", "\n", "num_pool_layers", ":", "int", "=", "4", ",", "\n", "drop_prob", ":", "float", "=", "0.0", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "in_chans", "=", "in_chans", "\n", "self", ".", "out_chans", "=", "out_chans", "\n", "self", ".", "chans", "=", "chans", "\n", "self", ".", "num_pool_layers", "=", "num_pool_layers", "\n", "self", ".", "drop_prob", "=", "drop_prob", "\n", "\n", "self", ".", "down_sample_layers", "=", "nn", ".", "ModuleList", "(", "[", "ConvBlock", "(", "in_chans", ",", "chans", ",", "drop_prob", ")", "]", ")", "\n", "ch", "=", "chans", "\n", "for", "_", "in", "range", "(", "num_pool_layers", "-", "1", ")", ":", "\n", "            ", "self", ".", "down_sample_layers", ".", "append", "(", "ConvBlock", "(", "ch", ",", "ch", "*", "2", ",", "drop_prob", ")", ")", "\n", "ch", "*=", "2", "\n", "", "self", ".", "conv", "=", "ConvBlock", "(", "ch", ",", "ch", "*", "2", ",", "drop_prob", ")", "\n", "\n", "self", ".", "up_conv", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "up_transpose_conv", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "_", "in", "range", "(", "num_pool_layers", "-", "1", ")", ":", "\n", "            ", "self", ".", "up_transpose_conv", ".", "append", "(", "TransposeConvBlock", "(", "ch", "*", "2", ",", "ch", ")", ")", "\n", "self", ".", "up_conv", ".", "append", "(", "ConvBlock", "(", "ch", "*", "2", ",", "ch", ",", "drop_prob", ")", ")", "\n", "ch", "//=", "2", "\n", "\n", "", "self", ".", "up_transpose_conv", ".", "append", "(", "TransposeConvBlock", "(", "ch", "*", "2", ",", "ch", ")", ")", "\n", "self", ".", "up_conv", ".", "append", "(", "\n", "nn", ".", "Sequential", "(", "\n", "ConvBlock", "(", "ch", "*", "2", ",", "ch", ",", "drop_prob", ")", ",", "\n", "nn", ".", "Conv2d", "(", "ch", ",", "self", ".", "out_chans", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_fedmri.models.unet_module.Unet_A.forward": [[154, 190], ["unet_module.Unet_A.conv", "zip", "layer", "stack.append", "torch.nn.functional.avg_pool2d", "stack.pop", "transpose_conv", "torch.cat", "conv", "torch.sum", "torch.nn.functional.pad", "torch.tensor"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "image", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "\"\"\"\n        Args:\n            image: Input 4D tensor of shape `(N, in_chans, H, W)`.\n        Returns:\n            Output tensor of shape `(N, out_chans, H, W)`.\n        \"\"\"", "\n", "stack", "=", "[", "]", "\n", "output", "=", "image", "\n", "\n", "# apply down-sampling layers", "\n", "for", "layer", "in", "self", ".", "down_sample_layers", ":", "\n", "            ", "output", "=", "layer", "(", "output", ")", "\n", "stack", ".", "append", "(", "output", ")", "\n", "output", "=", "F", ".", "avg_pool2d", "(", "output", ",", "kernel_size", "=", "2", ",", "stride", "=", "2", ",", "padding", "=", "0", ")", "\n", "\n", "", "output", "=", "self", ".", "conv", "(", "output", ")", "\n", "\n", "# apply up-sampling layers", "\n", "for", "transpose_conv", ",", "conv", "in", "zip", "(", "self", ".", "up_transpose_conv", ",", "self", ".", "up_conv", ")", ":", "\n", "            ", "downsample_layer", "=", "stack", ".", "pop", "(", ")", "\n", "output", "=", "transpose_conv", "(", "output", ")", "\n", "\n", "# reflect pad on the right/botton if needed to handle odd input dimensions", "\n", "padding", "=", "[", "0", ",", "0", ",", "0", ",", "0", "]", "\n", "if", "output", ".", "shape", "[", "-", "1", "]", "!=", "downsample_layer", ".", "shape", "[", "-", "1", "]", ":", "\n", "                ", "padding", "[", "1", "]", "=", "1", "# padding right", "\n", "", "if", "output", ".", "shape", "[", "-", "2", "]", "!=", "downsample_layer", ".", "shape", "[", "-", "2", "]", ":", "\n", "                ", "padding", "[", "3", "]", "=", "1", "# padding bottom", "\n", "", "if", "torch", ".", "sum", "(", "torch", ".", "tensor", "(", "padding", ")", ")", "!=", "0", ":", "\n", "                ", "output", "=", "F", ".", "pad", "(", "output", ",", "padding", ",", "\"reflect\"", ")", "\n", "\n", "", "output", "=", "torch", ".", "cat", "(", "[", "output", ",", "downsample_layer", "]", ",", "dim", "=", "1", ")", "\n", "output", "=", "conv", "(", "output", ")", "\n", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_fedmri.models.unet_module.Unet_B.__init__": [[193, 230], ["torch.nn.Module.__init__", "torch.nn.ModuleList", "range", "unet_module.ConvBlock", "torch.nn.ModuleList", "torch.nn.ModuleList", "range", "unet_module.Unet_B.up_transpose_conv.append", "unet_module.Unet_B.up_conv.append", "unet_module.Unet_B.down_sample_layers.append", "unet_module.Unet_B.up_transpose_conv.append", "unet_module.Unet_B.up_conv.append", "unet_module.TransposeConvBlock", "torch.nn.Sequential", "unet_module.ConvBlock", "unet_module.ConvBlock", "unet_module.TransposeConvBlock", "unet_module.ConvBlock", "unet_module.ConvBlock", "torch.nn.Conv2d", "torch.nn.Conv2d"], "methods", ["home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.dicom_mix.FastMRIDicom.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "in_chans", ":", "int", "=", "1", ",", "\n", "out_chans", ":", "int", "=", "cfg", ".", "MODEL", ".", "OUTPUT_DIM", ",", "\n", "chans", ":", "int", "=", "32", ",", "\n", "num_pool_layers", ":", "int", "=", "4", ",", "\n", "drop_prob", ":", "float", "=", "0.0", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "in_chans", "=", "in_chans", "\n", "self", ".", "out_chans", "=", "out_chans", "\n", "self", ".", "chans", "=", "chans", "\n", "self", ".", "num_pool_layers", "=", "num_pool_layers", "\n", "self", ".", "drop_prob", "=", "drop_prob", "\n", "\n", "self", ".", "down_sample_layers", "=", "nn", ".", "ModuleList", "(", "[", "ConvBlock", "(", "in_chans", ",", "chans", ",", "drop_prob", ")", "]", ")", "\n", "ch", "=", "chans", "\n", "for", "_", "in", "range", "(", "num_pool_layers", "-", "1", ")", ":", "\n", "            ", "self", ".", "down_sample_layers", ".", "append", "(", "ConvBlock", "(", "ch", ",", "ch", "*", "2", ",", "drop_prob", ")", ")", "\n", "ch", "*=", "2", "\n", "", "self", ".", "conv", "=", "ConvBlock", "(", "ch", ",", "ch", "*", "2", ",", "drop_prob", ")", "\n", "\n", "self", ".", "up_conv", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "up_transpose_conv", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "_", "in", "range", "(", "num_pool_layers", "-", "1", ")", ":", "\n", "            ", "self", ".", "up_transpose_conv", ".", "append", "(", "TransposeConvBlock", "(", "ch", "*", "2", ",", "ch", ")", ")", "\n", "self", ".", "up_conv", ".", "append", "(", "ConvBlock", "(", "ch", "*", "2", ",", "ch", ",", "drop_prob", ")", ")", "\n", "ch", "//=", "2", "\n", "\n", "", "self", ".", "up_transpose_conv", ".", "append", "(", "TransposeConvBlock", "(", "ch", "*", "2", ",", "ch", ")", ")", "\n", "self", ".", "up_conv", ".", "append", "(", "\n", "nn", ".", "Sequential", "(", "\n", "ConvBlock", "(", "ch", "*", "2", ",", "ch", ",", "drop_prob", ")", ",", "\n", "# ConvBlock(ch, ch, drop_prob),  # for pdfs", "\n", "nn", ".", "Conv2d", "(", "ch", ",", "ch", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "Conv2d", "(", "ch", ",", "self", ".", "out_chans", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_fedmri.models.unet_module.Unet_B.forward": [[233, 269], ["unet_module.Unet_B.conv", "zip", "layer", "stack.append", "torch.nn.functional.avg_pool2d", "stack.pop", "transpose_conv", "torch.cat", "conv", "torch.sum", "torch.nn.functional.pad", "torch.tensor"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "image", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "\"\"\"\n        Args:\n            image: Input 4D tensor of shape `(N, in_chans, H, W)`.\n        Returns:\n            Output tensor of shape `(N, out_chans, H, W)`.\n        \"\"\"", "\n", "stack", "=", "[", "]", "\n", "output", "=", "image", "\n", "\n", "# apply down-sampling layers", "\n", "for", "layer", "in", "self", ".", "down_sample_layers", ":", "\n", "            ", "output", "=", "layer", "(", "output", ")", "\n", "stack", ".", "append", "(", "output", ")", "\n", "output", "=", "F", ".", "avg_pool2d", "(", "output", ",", "kernel_size", "=", "2", ",", "stride", "=", "2", ",", "padding", "=", "0", ")", "\n", "\n", "", "output", "=", "self", ".", "conv", "(", "output", ")", "\n", "\n", "# apply up-sampling layers", "\n", "for", "transpose_conv", ",", "conv", "in", "zip", "(", "self", ".", "up_transpose_conv", ",", "self", ".", "up_conv", ")", ":", "\n", "            ", "downsample_layer", "=", "stack", ".", "pop", "(", ")", "\n", "output", "=", "transpose_conv", "(", "output", ")", "\n", "\n", "# reflect pad on the right/botton if needed to handle odd input dimensions", "\n", "padding", "=", "[", "0", ",", "0", ",", "0", ",", "0", "]", "\n", "if", "output", ".", "shape", "[", "-", "1", "]", "!=", "downsample_layer", ".", "shape", "[", "-", "1", "]", ":", "\n", "                ", "padding", "[", "1", "]", "=", "1", "# padding right", "\n", "", "if", "output", ".", "shape", "[", "-", "2", "]", "!=", "downsample_layer", ".", "shape", "[", "-", "2", "]", ":", "\n", "                ", "padding", "[", "3", "]", "=", "1", "# padding bottom", "\n", "", "if", "torch", ".", "sum", "(", "torch", ".", "tensor", "(", "padding", ")", ")", "!=", "0", ":", "\n", "                ", "output", "=", "F", ".", "pad", "(", "output", ",", "padding", ",", "\"reflect\"", ")", "\n", "\n", "", "output", "=", "torch", ".", "cat", "(", "[", "output", ",", "downsample_layer", "]", ",", "dim", "=", "1", ")", "\n", "output", "=", "conv", "(", "output", ")", "\n", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_fedmri.models.unet_module.UnetModule.__init__": [[275, 332], ["torch.nn.Module.__init__", "unet_module.Unet"], "methods", ["home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.dicom_mix.FastMRIDicom.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "in_chans", "=", "1", ",", "\n", "out_chans", "=", "1", ",", "\n", "chans", "=", "32", ",", "\n", "num_pool_layers", "=", "4", ",", "\n", "drop_prob", "=", "0.0", ",", "\n", "mask_type", "=", "\"random\"", ",", "\n", "center_fractions", "=", "[", "0.08", "]", ",", "\n", "accelerations", "=", "[", "4", "]", ",", "\n", "lr", "=", "0.001", ",", "\n", "lr_step_size", "=", "40", ",", "\n", "lr_gamma", "=", "0.1", ",", "\n", "weight_decay", "=", "0.0", ",", "\n", "**", "kwargs", ",", "\n", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            in_chans (int): Number of channels in the input to the U-Net model.\n            out_chans (int): Number of channels in the output to the U-Net\n                model.\n            chans (int): Number of output channels of the first convolution\n                layer.\n            num_pool_layers (int): Number of down-sampling and up-sampling\n                layers.\n            drop_prob (float): Dropout probability.\n            mask_type (str): Type of mask from (\"random\", \"equispaced\").\n            center_fractions (list): Fraction of all samples to take from\n                center (i.e., list of floats).\n            accelerations (list): List of accelerations to apply (i.e., list\n                of ints).\n            lr (float): Learning rate.\n            lr_step_size (int): Learning rate step size.\n            lr_gamma (float): Learning rate gamma decay.\n            weight_decay (float): Parameter for penalizing weights norm.\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n", "self", ".", "in_chans", "=", "in_chans", "\n", "self", ".", "out_chans", "=", "out_chans", "\n", "self", ".", "chans", "=", "chans", "\n", "self", ".", "num_pool_layers", "=", "num_pool_layers", "\n", "self", ".", "drop_prob", "=", "drop_prob", "\n", "self", ".", "mask_type", "=", "mask_type", "\n", "self", ".", "center_fractions", "=", "center_fractions", "\n", "self", ".", "accelerations", "=", "accelerations", "\n", "self", ".", "lr", "=", "lr", "\n", "self", ".", "lr_step_size", "=", "lr_step_size", "\n", "self", ".", "lr_gamma", "=", "lr_gamma", "\n", "self", ".", "weight_decay", "=", "weight_decay", "\n", "\n", "self", ".", "unet", "=", "Unet", "(", "\n", "in_chans", "=", "self", ".", "in_chans", ",", "\n", "out_chans", "=", "self", ".", "out_chans", ",", "\n", "chans", "=", "self", ".", "chans", ",", "\n", "num_pool_layers", "=", "self", ".", "num_pool_layers", ",", "\n", "drop_prob", "=", "self", ".", "drop_prob", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_fedmri.models.unet_module.UnetModule.forward": [[334, 336], ["unet_module.UnetModule.unet().squeeze", "unet_module.UnetModule.unet", "image.unsqueeze"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "client_idx", ",", "image", ")", ":", "\n", "        ", "return", "self", ".", "unet", "(", "image", ".", "unsqueeze", "(", "1", ")", ")", ".", "squeeze", "(", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_fedmri.models.unet_module.Unet.__init__": [[346, 389], ["torch.nn.Module.__init__", "torch.nn.ModuleList", "range", "unet_module.ConvBlock", "torch.nn.ModuleList", "torch.nn.ModuleList", "range", "unet_module.Unet.up_transpose_conv.append", "unet_module.Unet.up_conv.append", "unet_module.Unet.down_sample_layers.append", "unet_module.Unet.up_transpose_conv.append", "unet_module.Unet.up_conv.append", "unet_module.TransposeConvBlock", "torch.nn.Sequential", "unet_module.ConvBlock", "unet_module.ConvBlock", "unet_module.TransposeConvBlock", "unet_module.ConvBlock", "unet_module.ConvBlock", "torch.nn.Conv2d"], "methods", ["home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.dicom_mix.FastMRIDicom.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "in_chans", ":", "int", ",", "\n", "out_chans", ":", "int", ",", "\n", "chans", ":", "int", "=", "32", ",", "\n", "num_pool_layers", ":", "int", "=", "4", ",", "\n", "drop_prob", ":", "float", "=", "0.0", ",", "\n", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            in_chans: Number of channels in the input to the U-Net model.\n            out_chans: Number of channels in the output to the U-Net model.\n            chans: Number of output channels of the first convolution layer.\n            num_pool_layers: Number of down-sampling and up-sampling layers.\n            drop_prob: Dropout probability.\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "in_chans", "=", "in_chans", "\n", "self", ".", "out_chans", "=", "out_chans", "\n", "self", ".", "chans", "=", "chans", "\n", "self", ".", "num_pool_layers", "=", "num_pool_layers", "\n", "self", ".", "drop_prob", "=", "drop_prob", "\n", "\n", "self", ".", "down_sample_layers", "=", "nn", ".", "ModuleList", "(", "[", "ConvBlock", "(", "in_chans", ",", "chans", ",", "drop_prob", ")", "]", ")", "\n", "ch", "=", "chans", "\n", "for", "_", "in", "range", "(", "num_pool_layers", "-", "1", ")", ":", "\n", "            ", "self", ".", "down_sample_layers", ".", "append", "(", "ConvBlock", "(", "ch", ",", "ch", "*", "2", ",", "drop_prob", ")", ")", "\n", "ch", "*=", "2", "\n", "", "self", ".", "conv", "=", "ConvBlock", "(", "ch", ",", "ch", "*", "2", ",", "drop_prob", ")", "\n", "\n", "self", ".", "up_conv", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "up_transpose_conv", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "_", "in", "range", "(", "num_pool_layers", "-", "1", ")", ":", "\n", "            ", "self", ".", "up_transpose_conv", ".", "append", "(", "TransposeConvBlock", "(", "ch", "*", "2", ",", "ch", ")", ")", "\n", "self", ".", "up_conv", ".", "append", "(", "ConvBlock", "(", "ch", "*", "2", ",", "ch", ",", "drop_prob", ")", ")", "\n", "ch", "//=", "2", "\n", "\n", "", "self", ".", "up_transpose_conv", ".", "append", "(", "TransposeConvBlock", "(", "ch", "*", "2", ",", "ch", ")", ")", "\n", "self", ".", "up_conv", ".", "append", "(", "\n", "nn", ".", "Sequential", "(", "\n", "ConvBlock", "(", "ch", "*", "2", ",", "ch", ",", "drop_prob", ")", ",", "\n", "nn", ".", "Conv2d", "(", "ch", ",", "self", ".", "out_chans", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_fedmri.models.unet_module.Unet.forward": [[392, 428], ["unet_module.Unet.conv", "zip", "layer", "stack.append", "torch.nn.functional.avg_pool2d", "stack.pop", "transpose_conv", "torch.cat", "conv", "torch.sum", "torch.nn.functional.pad", "torch.tensor"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "image", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "\"\"\"\n        Args:\n            image: Input 4D tensor of shape `(N, in_chans, H, W)`.\n        Returns:\n            Output tensor of shape `(N, out_chans, H, W)`.\n        \"\"\"", "\n", "stack", "=", "[", "]", "\n", "output", "=", "image", "\n", "\n", "# apply down-sampling layers", "\n", "for", "layer", "in", "self", ".", "down_sample_layers", ":", "\n", "            ", "output", "=", "layer", "(", "output", ")", "\n", "stack", ".", "append", "(", "output", ")", "\n", "output", "=", "F", ".", "avg_pool2d", "(", "output", ",", "kernel_size", "=", "2", ",", "stride", "=", "2", ",", "padding", "=", "0", ")", "\n", "\n", "", "output", "=", "self", ".", "conv", "(", "output", ")", "\n", "\n", "# apply up-sampling layers", "\n", "for", "transpose_conv", ",", "conv", "in", "zip", "(", "self", ".", "up_transpose_conv", ",", "self", ".", "up_conv", ")", ":", "\n", "            ", "downsample_layer", "=", "stack", ".", "pop", "(", ")", "\n", "output", "=", "transpose_conv", "(", "output", ")", "\n", "\n", "# reflect pad on the right/botton if needed to handle odd input dimensions", "\n", "padding", "=", "[", "0", ",", "0", ",", "0", ",", "0", "]", "\n", "if", "output", ".", "shape", "[", "-", "1", "]", "!=", "downsample_layer", ".", "shape", "[", "-", "1", "]", ":", "\n", "                ", "padding", "[", "1", "]", "=", "1", "# padding right", "\n", "", "if", "output", ".", "shape", "[", "-", "2", "]", "!=", "downsample_layer", ".", "shape", "[", "-", "2", "]", ":", "\n", "                ", "padding", "[", "3", "]", "=", "1", "# padding bottom", "\n", "", "if", "torch", ".", "sum", "(", "torch", ".", "tensor", "(", "padding", ")", ")", "!=", "0", ":", "\n", "                ", "output", "=", "F", ".", "pad", "(", "output", ",", "padding", ",", "\"reflect\"", ")", "\n", "\n", "", "output", "=", "torch", ".", "cat", "(", "[", "output", ",", "downsample_layer", "]", ",", "dim", "=", "1", ")", "\n", "output", "=", "conv", "(", "output", ")", "\n", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_fedmri.models.unet_module.ConvBlock.__init__": [[436, 460], ["torch.nn.Module.__init__", "torch.nn.Sequential", "torch.nn.Conv2d", "torch.nn.InstanceNorm2d", "torch.nn.LeakyReLU", "torch.nn.Dropout2d", "torch.nn.Conv2d", "torch.nn.InstanceNorm2d", "torch.nn.LeakyReLU", "torch.nn.Dropout2d"], "methods", ["home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.dicom_mix.FastMRIDicom.__init__"], ["def", "__init__", "(", "self", ",", "in_chans", ":", "int", ",", "out_chans", ":", "int", ",", "drop_prob", ":", "float", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            in_chans: Number of channels in the input.\n            out_chans: Number of channels in the output.\n            drop_prob: Dropout probability.\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "in_chans", "=", "in_chans", "\n", "self", ".", "out_chans", "=", "out_chans", "\n", "self", ".", "drop_prob", "=", "drop_prob", "\n", "\n", "self", ".", "layers", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_chans", ",", "out_chans", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "InstanceNorm2d", "(", "out_chans", ")", ",", "\n", "# nn.BatchNorm2d(out_chans),", "\n", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "0.2", ",", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Dropout2d", "(", "drop_prob", ")", ",", "\n", "nn", ".", "Conv2d", "(", "out_chans", ",", "out_chans", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "InstanceNorm2d", "(", "out_chans", ")", ",", "\n", "# nn.BatchNorm2d(out_chans),", "\n", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "0.2", ",", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Dropout2d", "(", "drop_prob", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_fedmri.models.unet_module.ConvBlock.forward": [[462, 470], ["unet_module.ConvBlock.layers"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "image", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "\"\"\"\n        Args:\n            image: Input 4D tensor of shape `(N, in_chans, H, W)`.\n        Returns:\n            Output tensor of shape `(N, out_chans, H, W)`.\n        \"\"\"", "\n", "return", "self", ".", "layers", "(", "image", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_fedmri.models.unet_module.TransposeConvBlock.__init__": [[478, 496], ["torch.nn.Module.__init__", "torch.nn.Sequential", "torch.nn.ConvTranspose2d", "torch.nn.InstanceNorm2d", "torch.nn.LeakyReLU"], "methods", ["home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.dicom_mix.FastMRIDicom.__init__"], ["def", "__init__", "(", "self", ",", "in_chans", ":", "int", ",", "out_chans", ":", "int", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            in_chans: Number of channels in the input.\n            out_chans: Number of channels in the output.\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "in_chans", "=", "in_chans", "\n", "self", ".", "out_chans", "=", "out_chans", "\n", "\n", "self", ".", "layers", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ConvTranspose2d", "(", "\n", "in_chans", ",", "out_chans", ",", "kernel_size", "=", "2", ",", "stride", "=", "2", ",", "bias", "=", "False", "\n", ")", ",", "\n", "nn", ".", "InstanceNorm2d", "(", "out_chans", ")", ",", "\n", "# nn.BatchNorm2d(out_chans),", "\n", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "0.2", ",", "inplace", "=", "True", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_fedmri.models.unet_module.TransposeConvBlock.forward": [[498, 506], ["unet_module.TransposeConvBlock.layers"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "image", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "\"\"\"\n        Args:\n            image: Input 4D tensor of shape `(N, in_chans, H, W)`.\n        Returns:\n            Output tensor of shape `(N, out_chans, H*2, W*2)`.\n        \"\"\"", "\n", "return", "self", ".", "layers", "(", "image", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data_ki.transforms.DataTransform.__init__": [[253, 272], ["ValueError"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "which_challenge", ",", "mask_func", "=", "None", ",", "client_name", "=", "'fastMRI'", ",", "use_seed", "=", "True", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            which_challenge (str): Either \"singlecoil\" or \"multicoil\" denoting\n                the dataset.\n            mask_func (fastmri.data.subsample.MaskFunc): A function that can\n                create a mask of appropriate shape.\n            use_seed (bool): If true, this class computes a pseudo random\n                number generator seed from the filename. This ensures that the\n                same mask is used for all the slices of a given volume every\n                time.\n        \"\"\"", "\n", "if", "which_challenge", "not", "in", "(", "\"singlecoil\"", ",", "\"multicoil\"", ")", ":", "\n", "            ", "raise", "ValueError", "(", "f'Challenge should either be \"singlecoil\" or \"multicoil\"'", ")", "\n", "\n", "", "self", ".", "which_challenge", "=", "which_challenge", "\n", "self", ".", "mask_func", "=", "mask_func", "\n", "self", ".", "client_name", "=", "client_name", "\n", "self", ".", "use_seed", "=", "use_seed", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data_ki.transforms.DataTransform.__call__": [[273, 411], ["transforms.to_tensor", "transforms.apply_mask", "math.ifft2c", "transforms.complex_center_crop", "math.complex_abs", "transforms.norm", "rss.mean", "rss.std", "rss.clamp", "math.ifft2c", "transforms.complex_center_crop", "math.complex_abs", "transforms.normalize_instance", "rss.clamp", "fname.split", "fname.split", "tuple", "transforms.apply_mask", "math.fft2c", "transforms.complex_center_crop", "mask.unsqueeze().repeat", "math.ifft2c", "math.complex_abs", "transforms.norm", "torch.Tensor.clamp", "torch.Tensor", "math.fft2c", "mask.unsqueeze().repeat", "math.ifft2c", "transforms.rss", "transforms.to_tensor", "transforms.center_crop", "transforms.normalize", "torch.Tensor.clamp", "torch.Tensor", "type", "type", "map", "math.ifft2c", "type", "mask.unsqueeze", "mask.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.transforms.to_tensor", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.transforms.apply_mask", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.fastmri.JiangSudataset.ifft2c", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.transforms.complex_center_crop", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.math.complex_abs", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.fastmri.norm", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.fastmri.JiangSudataset.ifft2c", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.transforms.complex_center_crop", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.math.complex_abs", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.transforms.normalize_instance", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.transforms.apply_mask", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.fastmri.JiangSudataset.fft2c", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.transforms.complex_center_crop", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.fastmri.JiangSudataset.ifft2c", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.math.complex_abs", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.fastmri.norm", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.fastmri.JiangSudataset.fft2c", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.fastmri.JiangSudataset.ifft2c", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.transforms.rss", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.transforms.to_tensor", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.fastmri.JiangSudataset.center_crop", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.transforms.normalize", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.fastmri.JiangSudataset.ifft2c"], ["", "def", "__call__", "(", "self", ",", "kspace", ",", "mask", ",", "target", ",", "attrs", ",", "fname", ",", "slice_num", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            kspace (numpy.array): Input k-space of shape (num_coils, rows,\n                cols, 2) for multi-coil data or (rows, cols, 2) for single coil\n                data.\n            mask (numpy.array): Mask from the test dataset.\n            target (numpy.array): Target image.\n            attrs (dict): Acquisition related information stored in the HDF5\n                object.\n            fname (str): File name.\n            slice_num (int): Serial number of the slice.\n\n        Returns:\n            (tuple): tuple containing:\n                image (torch.Tensor): Zero-filled input image.\n                target (torch.Tensor): Target image converted to a torch\n                    Tensor.\n                mean (float): Mean value used for normalization.\n                std (float): Standard deviation value used for normalization.\n                fname (str): File name.\n                slice_num (int): Serial number of the slice.\n        \"\"\"", "\n", "kspace", "=", "to_tensor", "(", "kspace", ")", "\n", "\n", "# apply mask", "\n", "\n", "# if self.mask_func:", "\n", "#     seed = None if not self.use_seed else tuple(map(ord, fname))", "\n", "#     masked_kspace, mask = apply_mask(kspace, self.mask_func, seed)", "\n", "# else:", "\n", "#     masked_kspace = kspace", "\n", "\n", "if", "type", "(", "self", ".", "mask_func", ")", ".", "__name__", "==", "'RandomMaskFunc'", "or", "type", "(", "self", ".", "mask_func", ")", ".", "__name__", "==", "'EquispacedMaskFunc'", ":", "\n", "            ", "seed", "=", "None", "if", "not", "self", ".", "use_seed", "else", "tuple", "(", "map", "(", "ord", ",", "fname", ")", ")", "\n", "masked_kspace", ",", "mask", "=", "apply_mask", "(", "kspace", ",", "self", ".", "mask_func", ",", "seed", ")", "\n", "", "elif", "type", "(", "self", ".", "mask_func", ")", ".", "__name__", "==", "'ndarray'", "and", "self", ".", "mask_func", ".", "shape", "[", "0", "]", "==", "kspace", ".", "shape", "[", "0", "]", "and", "self", ".", "mask_func", ".", "shape", "[", "1", "]", "==", "kspace", ".", "shape", "[", "1", "]", ":", "\n", "            ", "masked_kspace", ",", "mask", "=", "apply_mask", "(", "kspace", ",", "self", ".", "mask_func", ")", "\n", "", "else", ":", "\n", "            ", "masked_kspace", "=", "kspace", "\n", "mask", "=", "self", ".", "mask_func", "\n", "\n", "", "if", "self", ".", "client_name", "!=", "'fastMRI'", ":", "\n", "# inverse Fourier transform to get zero filled solution", "\n", "            ", "image", "=", "ifft2c", "(", "masked_kspace", ")", "\n", "\n", "# crop input to correct size", "\n", "if", "target", "is", "not", "None", ":", "\n", "                ", "crop_size", "=", "(", "target", ".", "shape", "[", "-", "2", "]", ",", "target", ".", "shape", "[", "-", "1", "]", ")", "\n", "", "else", ":", "\n", "                ", "crop_size", "=", "(", "attrs", "[", "\"recon_size\"", "]", "[", "0", "]", ",", "attrs", "[", "\"recon_size\"", "]", "[", "1", "]", ")", "\n", "\n", "# check for sFLAIR 203", "\n", "", "if", "image", ".", "shape", "[", "-", "2", "]", "<", "crop_size", "[", "1", "]", ":", "\n", "                ", "crop_size", "=", "(", "image", ".", "shape", "[", "-", "2", "]", ",", "image", ".", "shape", "[", "-", "2", "]", ")", "\n", "\n", "\n", "", "image", "=", "complex_center_crop", "(", "image", ",", "crop_size", ")", "\n", "\n", "# apply mask only when mask's size is less than kspace's size", "\n", "if", "kspace", ".", "shape", "[", "0", "]", ">=", "mask", ".", "shape", "[", "0", "]", "and", "kspace", ".", "shape", "[", "1", "]", ">=", "mask", ".", "shape", "[", "1", "]", ":", "\n", "                ", "cropped_kspace", "=", "fft2c", "(", "image", ")", "\n", "cropped_kspace", "=", "complex_center_crop", "(", "cropped_kspace", ",", "(", "320", ",", "320", ")", ")", "\n", "mask_matched", "=", "mask", ".", "unsqueeze", "(", "-", "1", ")", ".", "repeat", "(", "1", ",", "1", ",", "2", ")", "\n", "masked_cropped_kspace", "=", "cropped_kspace", "*", "mask_matched", "+", "0.0", "\n", "image", "=", "ifft2c", "(", "masked_cropped_kspace", ")", "\n", "\n", "# absolute value", "\n", "", "image", "=", "complex_abs", "(", "image", ")", "\n", "\n", "# normalize input", "\n", "image", "=", "norm", "(", "image", ",", "eps", "=", "1e-11", ")", "\n", "mean", "=", "image", ".", "mean", "(", ")", "\n", "std", "=", "image", ".", "std", "(", ")", "\n", "image", "=", "image", ".", "clamp", "(", "-", "6", ",", "6", ")", "\n", "\n", "# normalize target", "\n", "if", "target", "is", "not", "None", ":", "\n", "# target = to_tensor(target)", "\n", "# target = center_crop(target, crop_size)", "\n", "                ", "target", "=", "complex_abs", "(", "ifft2c", "(", "cropped_kspace", ")", ")", "\n", "target", "=", "norm", "(", "target", ",", "eps", "=", "1e-11", ")", "\n", "target", "=", "target", ".", "clamp", "(", "-", "6", ",", "6", ")", "\n", "", "else", ":", "\n", "                ", "target", "=", "torch", ".", "Tensor", "(", "[", "0", "]", ")", "\n", "\n", "\n", "\n", "", "", "else", ":", "\n", "# inverse Fourier transform to get zero filled solution", "\n", "            ", "image", "=", "ifft2c", "(", "masked_kspace", ")", "\n", "\n", "# crop input to correct size", "\n", "if", "target", "is", "not", "None", ":", "\n", "                ", "crop_size", "=", "(", "target", ".", "shape", "[", "-", "2", "]", ",", "target", ".", "shape", "[", "-", "1", "]", ")", "\n", "", "else", ":", "\n", "                ", "crop_size", "=", "(", "attrs", "[", "\"recon_size\"", "]", "[", "0", "]", ",", "attrs", "[", "\"recon_size\"", "]", "[", "1", "]", ")", "\n", "\n", "# check for sFLAIR 203", "\n", "", "if", "image", ".", "shape", "[", "-", "2", "]", "<", "crop_size", "[", "1", "]", ":", "\n", "                ", "crop_size", "=", "(", "image", ".", "shape", "[", "-", "2", "]", ",", "image", ".", "shape", "[", "-", "2", "]", ")", "\n", "\n", "", "image", "=", "complex_center_crop", "(", "image", ",", "crop_size", ")", "\n", "\n", "# apply mask only when mask's size is less than kspace's size", "\n", "if", "kspace", ".", "shape", "[", "0", "]", ">=", "mask", ".", "shape", "[", "0", "]", "and", "kspace", ".", "shape", "[", "1", "]", ">=", "mask", ".", "shape", "[", "1", "]", ":", "\n", "                ", "cropped_kspace", "=", "fft2c", "(", "image", ")", "\n", "mask_matched", "=", "mask", ".", "unsqueeze", "(", "-", "1", ")", ".", "repeat", "(", "1", ",", "1", ",", "2", ")", "\n", "masked_cropped_kspace", "=", "cropped_kspace", "*", "mask_matched", "+", "0.0", "\n", "image", "=", "ifft2c", "(", "masked_cropped_kspace", ")", "\n", "\n", "# absolute value", "\n", "", "image", "=", "complex_abs", "(", "image", ")", "\n", "\n", "# apply Root-Sum-of-Squares if multicoil data", "\n", "if", "self", ".", "which_challenge", "==", "\"multicoil\"", ":", "\n", "                ", "image", "=", "rss", "(", "image", ")", "\n", "\n", "# normalize input", "\n", "", "image", ",", "mean", ",", "std", "=", "normalize_instance", "(", "image", ",", "eps", "=", "1e-11", ")", "\n", "image", "=", "image", ".", "clamp", "(", "-", "6", ",", "6", ")", "\n", "\n", "# normalize target", "\n", "if", "target", "is", "not", "None", ":", "\n", "                ", "target", "=", "to_tensor", "(", "target", ")", "\n", "target", "=", "center_crop", "(", "target", ",", "crop_size", ")", "\n", "target", "=", "normalize", "(", "target", ",", "mean", ",", "std", ",", "eps", "=", "1e-11", ")", "\n", "target", "=", "target", ".", "clamp", "(", "-", "6", ",", "6", ")", "\n", "", "else", ":", "\n", "                ", "target", "=", "torch", ".", "Tensor", "(", "[", "0", "]", ")", "\n", "\n", "", "", "fname", "=", "fname", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "\n", "fname", "=", "fname", ".", "split", "(", "'.'", ")", "[", "0", "]", "\n", "# from test import vis_img", "\n", "# vis_img(image, fname, 'input', 'jiangsu')", "\n", "# vis_img(target, fname, 'target', 'jiangsu')", "\n", "return", "masked_cropped_kspace", ",", "mask", ",", "target", ",", "mean", ",", "std", ",", "fname", ",", "slice_num", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data_ki.transforms.imshow": [[20, 31], ["matplotlib.figure", "matplotlib.axis", "matplotlib.title", "matplotlib.imsave", "print", "numpy.abs"], "function", ["None"], ["def", "imshow", "(", "img", ",", "title", "=", "\"\"", ")", ":", "\n", "    ", "\"\"\" Show image as grayscale. \"\"\"", "\n", "if", "img", ".", "dtype", "==", "np", ".", "complex64", "or", "img", ".", "dtype", "==", "np", ".", "complex128", ":", "\n", "        ", "print", "(", "'img is complex! Take absolute value.'", ")", "\n", "img", "=", "np", ".", "abs", "(", "img", ")", "\n", "\n", "", "plt", ".", "figure", "(", ")", "\n", "# plt.imshow(img, cmap='gray', interpolation='nearest')", "\n", "plt", ".", "axis", "(", "'off'", ")", "\n", "plt", ".", "title", "(", "title", ")", "\n", "plt", ".", "imsave", "(", "'{}.png'", ".", "format", "(", "title", ")", ",", "img", ",", "cmap", "=", "'gray'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data_ki.transforms.rss": [[44, 58], ["torch.sqrt"], "function", ["None"], ["", "def", "rss", "(", "data", ",", "dim", "=", "0", ")", ":", "\n", "    ", "\"\"\"\n    Compute the Root Sum of Squares (RSS).\n\n    RSS is computed assuming that dim is the coil dimension.\n\n    Args:\n        data (torch.Tensor): The input tensor\n        dim (int): The dimensions along which to apply the RSS transform\n\n    Returns:\n        torch.Tensor: The RSS value.\n    \"\"\"", "\n", "return", "torch", ".", "sqrt", "(", "(", "data", "**", "2", ")", ".", "sum", "(", "dim", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data_ki.transforms.to_tensor": [[60, 77], ["numpy.iscomplexobj", "torch.from_numpy", "numpy.stack"], "function", ["None"], ["", "def", "to_tensor", "(", "data", ")", ":", "\n", "    ", "\"\"\"\n    Convert numpy array to PyTorch tensor.\n    \n    For complex arrays, the real and imaginary parts are stacked along the last\n    dimension.\n\n    Args:\n        data (np.array): Input numpy array.\n\n    Returns:\n        torch.Tensor: PyTorch version of data.\n    \"\"\"", "\n", "if", "np", ".", "iscomplexobj", "(", "data", ")", ":", "\n", "        ", "data", "=", "np", ".", "stack", "(", "(", "data", ".", "real", ",", "data", ".", "imag", ")", ",", "axis", "=", "-", "1", ")", "\n", "\n", "", "return", "torch", ".", "from_numpy", "(", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data_ki.transforms.tensor_to_complex_np": [[79, 92], ["data.numpy.numpy"], "function", ["None"], ["", "def", "tensor_to_complex_np", "(", "data", ")", ":", "\n", "    ", "\"\"\"\n    Converts a complex torch tensor to numpy array.\n\n    Args:\n        data (torch.Tensor): Input data to be converted to numpy.\n\n    Returns:\n        np.array: Complex numpy version of data.\n    \"\"\"", "\n", "data", "=", "data", ".", "numpy", "(", ")", "\n", "\n", "return", "data", "[", "...", ",", "0", "]", "+", "1j", "*", "data", "[", "...", ",", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data_ki.transforms.apply_mask": [[94, 124], ["numpy.array", "mask_func"], "function", ["None"], ["", "def", "apply_mask", "(", "data", ",", "mask_func", ",", "seed", "=", "None", ",", "padding", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Subsample given k-space by multiplying with a mask.\n\n    Args:\n        data (torch.Tensor): The input k-space data. This should have at least 3 dimensions, where\n            dimensions -3 and -2 are the spatial dimensions, and the final dimension has size\n            2 (for complex values).\n        mask_func (callable): A function that takes a shape (tuple of ints) and a random\n            number seed and returns a mask.\n        seed (int or 1-d array_like, optional): Seed for the random number generator.\n\n    Returns:\n        (tuple): tuple containing:\n            masked data (torch.Tensor): Subsampled k-space data\n            mask (torch.Tensor): The generated mask\n    \"\"\"", "\n", "shape", "=", "np", ".", "array", "(", "data", ".", "shape", ")", "\n", "shape", "[", ":", "-", "3", "]", "=", "1", "\n", "mask", "=", "mask_func", "(", "shape", ",", "seed", ")", "\n", "# if not isinstance(mask_func, np.ndarray):", "\n", "# mask = mask_func(shape, seed)", "\n", "# else: mask = mask_func", "\n", "if", "padding", "is", "not", "None", ":", "\n", "        ", "mask", "[", ":", ",", ":", ",", ":", "padding", "[", "0", "]", "]", "=", "0", "\n", "mask", "[", ":", ",", ":", ",", "padding", "[", "1", "]", ":", "]", "=", "0", "# padding value inclusive on right of zeros", "\n", "\n", "", "masked_data", "=", "data", "*", "mask", "+", "0.0", "# the + 0.0 removes the sign of the zeros", "\n", "\n", "return", "masked_data", ",", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data_ki.transforms.mask_center": [[126, 131], ["torch.zeros_like"], "function", ["None"], ["", "def", "mask_center", "(", "x", ",", "mask_from", ",", "mask_to", ")", ":", "\n", "    ", "mask", "=", "torch", ".", "zeros_like", "(", "x", ")", "\n", "mask", "[", ":", ",", ":", ",", ":", ",", "mask_from", ":", "mask_to", "]", "=", "x", "[", ":", ",", ":", ",", ":", ",", "mask_from", ":", "mask_to", "]", "\n", "\n", "return", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data_ki.transforms.center_crop": [[133, 156], ["None"], "function", ["None"], ["", "def", "center_crop", "(", "data", ",", "shape", ")", ":", "\n", "    ", "\"\"\"\n    Apply a center crop to the input real image or batch of real images.\n\n    Args:\n        data (torch.Tensor): The input tensor to be center cropped. It should\n            have at least 2 dimensions and the cropping is applied along the\n            last two dimensions.\n        shape (int, int): The output shape. The shape should be smaller than\n            the corresponding dimensions of data.\n\n    Returns:\n        torch.Tensor: The center cropped image.\n    \"\"\"", "\n", "assert", "0", "<", "shape", "[", "0", "]", "<=", "data", ".", "shape", "[", "-", "2", "]", "\n", "assert", "0", "<", "shape", "[", "1", "]", "<=", "data", ".", "shape", "[", "-", "1", "]", "\n", "\n", "w_from", "=", "(", "data", ".", "shape", "[", "-", "2", "]", "-", "shape", "[", "0", "]", ")", "//", "2", "\n", "h_from", "=", "(", "data", ".", "shape", "[", "-", "1", "]", "-", "shape", "[", "1", "]", ")", "//", "2", "\n", "w_to", "=", "w_from", "+", "shape", "[", "0", "]", "\n", "h_to", "=", "h_from", "+", "shape", "[", "1", "]", "\n", "\n", "return", "data", "[", "...", ",", "w_from", ":", "w_to", ",", "h_from", ":", "h_to", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data_ki.transforms.complex_center_crop": [[158, 182], ["None"], "function", ["None"], ["", "def", "complex_center_crop", "(", "data", ",", "shape", ")", ":", "\n", "    ", "\"\"\"\n    Apply a center crop to the input image or batch of complex images.\n\n    Args:\n        data (torch.Tensor): The complex input tensor to be center cropped. It\n            should have at least 3 dimensions and the cropping is applied along\n            dimensions -3 and -2 and the last dimensions should have a size of\n            2.\n        shape (int): The output shape. The shape should be smaller than\n            the corresponding dimensions of data.\n\n    Returns:\n        torch.Tensor: The center cropped image\n    \"\"\"", "\n", "assert", "0", "<", "shape", "[", "0", "]", "<=", "data", ".", "shape", "[", "-", "3", "]", "\n", "assert", "0", "<", "shape", "[", "1", "]", "<=", "data", ".", "shape", "[", "-", "2", "]", "\n", "\n", "w_from", "=", "(", "data", ".", "shape", "[", "-", "3", "]", "-", "shape", "[", "0", "]", ")", "//", "2", "#80", "\n", "h_from", "=", "(", "data", ".", "shape", "[", "-", "2", "]", "-", "shape", "[", "1", "]", ")", "//", "2", "#80", "\n", "w_to", "=", "w_from", "+", "shape", "[", "0", "]", "#240", "\n", "h_to", "=", "h_from", "+", "shape", "[", "1", "]", "#240", "\n", "\n", "return", "data", "[", "...", ",", "w_from", ":", "w_to", ",", "h_from", ":", "h_to", ",", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data_ki.transforms.center_crop_to_smallest": [[184, 205], ["min", "min", "transforms.center_crop", "transforms.center_crop"], "function", ["home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.fastmri.JiangSudataset.center_crop", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.fastmri.JiangSudataset.center_crop"], ["", "def", "center_crop_to_smallest", "(", "x", ",", "y", ")", ":", "\n", "    ", "\"\"\"\n    Apply a center crop on the larger image to the size of the smaller.\n\n    The minimum is taken over dim=-1 and dim=-2. If x is smaller than y at\n    dim=-1 and y is smaller than x at dim=-2, then the returned dimension will\n    be a mixture of the two.\n    \n    Args:\n        x (torch.Tensor): The first image.\n        y (torch.Tensor): The second image\n\n    Returns:\n        tuple: tuple of tensors x and y, each cropped to the minimim size.\n    \"\"\"", "\n", "smallest_width", "=", "min", "(", "x", ".", "shape", "[", "-", "1", "]", ",", "y", ".", "shape", "[", "-", "1", "]", ")", "\n", "smallest_height", "=", "min", "(", "x", ".", "shape", "[", "-", "2", "]", ",", "y", ".", "shape", "[", "-", "2", "]", ")", "\n", "x", "=", "center_crop", "(", "x", ",", "(", "smallest_height", ",", "smallest_width", ")", ")", "\n", "y", "=", "center_crop", "(", "y", ",", "(", "smallest_height", ",", "smallest_width", ")", ")", "\n", "\n", "return", "x", ",", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data_ki.transforms.norm": [[206, 209], ["data.min", "data.max", "data.min"], "function", ["home.repos.pwc.inspect_result.chunmeifeng_fedmri.util.misc.SmoothedValue.max"], ["", "def", "norm", "(", "data", ",", "eps", "=", "1e-11", ")", ":", "\n", "    ", "data", "=", "(", "data", "-", "data", ".", "min", "(", ")", ")", "/", "(", "data", ".", "max", "(", ")", "-", "data", ".", "min", "(", ")", "+", "eps", ")", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data_ki.transforms.normalize": [[210, 226], ["None"], "function", ["None"], ["", "def", "normalize", "(", "data", ",", "mean", ",", "stddev", ",", "eps", "=", "0.0", ")", ":", "\n", "    ", "\"\"\"\n    Normalize the given tensor.\n\n    Applies the formula (data - mean) / (stddev + eps).\n\n    Args:\n        data (torch.Tensor): Input data to be normalized.\n        mean (float): Mean value.\n        stddev (float): Standard deviation.\n        eps (float, default=0.0): Added to stddev to prevent dividing by zero.\n\n    Returns:\n        torch.Tensor: Normalized tensor\n    \"\"\"", "\n", "return", "(", "data", "-", "mean", ")", "/", "(", "stddev", "+", "eps", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data_ki.transforms.normalize_instance": [[228, 246], ["data.mean", "data.std", "transforms.normalize"], "function", ["home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.transforms.normalize"], ["", "def", "normalize_instance", "(", "data", ",", "eps", "=", "0.0", ")", ":", "\n", "    ", "\"\"\"\n    Normalize the given tensor  with instance norm/\n\n    Applies the formula (data - mean) / (stddev + eps), where mean and stddev\n    are computed from the data itself.\n\n    Args:\n        data (torch.Tensor): Input data to be normalized\n        eps (float): Added to stddev to prevent dividing by zero\n\n    Returns:\n        torch.Tensor: Normalized tensor\n    \"\"\"", "\n", "mean", "=", "data", ".", "mean", "(", ")", "\n", "std", "=", "data", ".", "std", "(", ")", "\n", "\n", "return", "normalize", "(", "data", ",", "mean", ",", "std", ",", "eps", ")", ",", "mean", ",", "std", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data_ki.transforms.build_transforms": [[413, 443], ["os.path.join", "transforms.DataTransform", "client_name.find", "os.path.join", "torch.from_numpy().float", "subsample.create_mask_for_mask_type", "transforms.DataTransform", "transforms.DataTransform", "scipy.io.loadmat", "torch.from_numpy().float", "subsample.create_mask_for_mask_type", "torch.from_numpy", "scipy.io.loadmat", "torch.from_numpy"], "function", ["home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.subsample.create_mask_for_mask_type", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.subsample.create_mask_for_mask_type"], ["", "", "def", "build_transforms", "(", "args", ",", "mode", "=", "'train'", ",", "client_name", "=", "'fastMRI'", ")", ":", "\n", "\n", "    ", "mask_size", "=", "256", "if", "client_name", ".", "find", "(", "'IXI'", ")", ">=", "0", "else", "320", "\n", "\n", "if", "client_name", "==", "'JiangSu'", ":", "\n", "        ", "mask_dir", "=", "os", ".", "path", ".", "join", "(", "args", ".", "TRANSFORMS", ".", "MASK_DIR", ",", "args", ".", "TRANSFORMS", ".", "MASK_SPEC", "[", "0", "]", "+", "'_{}.mat'", ".", "format", "(", "mask_size", ")", ")", "\n", "", "elif", "client_name", "==", "'lianying'", ":", "\n", "        ", "mask_dir", "=", "os", ".", "path", ".", "join", "(", "args", ".", "TRANSFORMS", ".", "MASK_DIR", ",", "args", ".", "TRANSFORMS", ".", "MASK_SPEC", "[", "1", "]", "+", "'_{}.mat'", ".", "format", "(", "mask_size", ")", ")", "\n", "\n", "", "if", "mode", "==", "'train'", ":", "\n", "        ", "if", "args", ".", "TRANSFORMS", ".", "MASK_SPEC", "!=", "''", ":", "\n", "            ", "mask", "=", "loadmat", "(", "mask_dir", ")", "[", "'mask'", "]", "\n", "mask", "=", "torch", ".", "from_numpy", "(", "mask", ")", ".", "float", "(", ")", "\n", "# mask = mask.float()  # or mask.to(torch.float32)", "\n", "", "else", ":", "\n", "            ", "mask", "=", "create_mask_for_mask_type", "(", "\n", "args", ".", "TRANSFORMS", ".", "MASKTYPE", ",", "args", ".", "TRANSFORMS", ".", "CENTER_FRACTIONS", ",", "args", ".", "TRANSFORMS", ".", "ACCELERATIONS", ",", "\n", ")", "\n", "", "return", "DataTransform", "(", "args", ".", "DATASET", ".", "CHALLENGE", ",", "mask", ",", "client_name", ",", "use_seed", "=", "False", ")", "\n", "", "elif", "mode", "==", "'val'", ":", "\n", "        ", "if", "args", ".", "TRANSFORMS", ".", "MASK_SPEC", "!=", "''", ":", "\n", "            ", "mask", "=", "loadmat", "(", "mask_dir", ")", "[", "'mask'", "]", "\n", "mask", "=", "torch", ".", "from_numpy", "(", "mask", ")", ".", "float", "(", ")", "\n", "", "else", ":", "\n", "            ", "mask", "=", "create_mask_for_mask_type", "(", "\n", "args", ".", "TRANSFORMS", ".", "MASKTYPE", ",", "args", ".", "TRANSFORMS", ".", "CENTER_FRACTIONS", ",", "args", ".", "TRANSFORMS", ".", "ACCELERATIONS", ",", "\n", ")", "\n", "", "return", "DataTransform", "(", "args", ".", "DATASET", ".", "CHALLENGE", ",", "mask", ",", "client_name", ")", "\n", "", "else", ":", "\n", "        ", "return", "DataTransform", "(", "args", ".", "DATASET", ".", "CHALLENGE", ",", "client_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data_ki.math.complex_mul": [[11, 30], ["torch.stack"], "function", ["None"], ["def", "complex_mul", "(", "x", ",", "y", ")", ":", "\n", "    ", "\"\"\"\n    Complex multiplication.\n\n    This multiplies two complex tensors assuming that they are both stored as\n    real arrays with the last dimension being the complex dimension.\n\n    Args:\n        x (torch.Tensor): A PyTorch tensor with the last dimension of size 2.\n        y (torch.Tensor): A PyTorch tensor with the last dimension of size 2.\n\n    Returns:\n        torch.Tensor: A PyTorch tensor with the last dimension of size 2.\n    \"\"\"", "\n", "assert", "x", ".", "shape", "[", "-", "1", "]", "==", "y", ".", "shape", "[", "-", "1", "]", "==", "2", "\n", "re", "=", "x", "[", "...", ",", "0", "]", "*", "y", "[", "...", ",", "0", "]", "-", "x", "[", "...", ",", "1", "]", "*", "y", "[", "...", ",", "1", "]", "\n", "im", "=", "x", "[", "...", ",", "0", "]", "*", "y", "[", "...", ",", "1", "]", "+", "x", "[", "...", ",", "1", "]", "*", "y", "[", "...", ",", "0", "]", "\n", "\n", "return", "torch", ".", "stack", "(", "(", "re", ",", "im", ")", ",", "dim", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data_ki.math.complex_conj": [[32, 49], ["torch.stack"], "function", ["None"], ["", "def", "complex_conj", "(", "x", ")", ":", "\n", "    ", "\"\"\"\n    Complex conjugate.\n\n    This applies the complex conjugate assuming that the input array has the\n    last dimension as the complex dimension.\n\n    Args:\n        x (torch.Tensor): A PyTorch tensor with the last dimension of size 2.\n        y (torch.Tensor): A PyTorch tensor with the last dimension of size 2.\n\n    Returns:\n        torch.Tensor: A PyTorch tensor with the last dimension of size 2.\n    \"\"\"", "\n", "assert", "x", ".", "shape", "[", "-", "1", "]", "==", "2", "\n", "\n", "return", "torch", ".", "stack", "(", "(", "x", "[", "...", ",", "0", "]", ",", "-", "x", "[", "...", ",", "1", "]", ")", ",", "dim", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data_ki.math.fft2c": [[51, 75], ["math.ifftshift", "torch.view_as_real", "math.fftshift", "ValueError", "torch.fft.fftn", "torch.view_as_complex"], "function", ["home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.math.ifftshift", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.math.fftshift"], ["", "def", "fft2c", "(", "data", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "    ", "\"\"\"\n    Apply centered 2 dimensional Fast Fourier Transform.\n\n    Args:\n        data: Complex valued input data containing at least 3 dimensions:\n            dimensions -3 & -2 are spatial dimensions and dimension -1 has size\n            2. All other dimensions are assumed to be batch dimensions.\n\n    Returns:\n        The FFT of the input.\n    \"\"\"", "\n", "if", "not", "data", ".", "shape", "[", "-", "1", "]", "==", "2", ":", "\n", "        ", "raise", "ValueError", "(", "\"Tensor does not have separate complex dim.\"", ")", "\n", "\n", "", "data", "=", "ifftshift", "(", "data", ",", "dim", "=", "[", "-", "3", ",", "-", "2", "]", ")", "\n", "data", "=", "torch", ".", "view_as_real", "(", "\n", "torch", ".", "fft", ".", "fftn", "(", "# type: ignore", "\n", "torch", ".", "view_as_complex", "(", "data", ")", ",", "dim", "=", "(", "-", "2", ",", "-", "1", ")", ",", "norm", "=", "\"ortho\"", "\n", ")", "\n", ")", "\n", "data", "=", "fftshift", "(", "data", ",", "dim", "=", "[", "-", "3", ",", "-", "2", "]", ")", "\n", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data_ki.math.ifft2c": [[77, 101], ["math.ifftshift", "torch.view_as_real", "math.fftshift", "ValueError", "torch.fft.ifftn", "torch.view_as_complex"], "function", ["home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.math.ifftshift", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.math.fftshift"], ["", "def", "ifft2c", "(", "data", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "    ", "\"\"\"\n    Apply centered 2-dimensional Inverse Fast Fourier Transform.\n\n    Args:\n        data: Complex valued input data containing at least 3 dimensions:\n            dimensions -3 & -2 are spatial dimensions and dimension -1 has size\n            2. All other dimensions are assumed to be batch dimensions.\n\n    Returns:\n        The IFFT of the input.\n    \"\"\"", "\n", "if", "not", "data", ".", "shape", "[", "-", "1", "]", "==", "2", ":", "\n", "        ", "raise", "ValueError", "(", "\"Tensor does not have separate complex dim.\"", ")", "\n", "\n", "", "data", "=", "ifftshift", "(", "data", ",", "dim", "=", "[", "-", "3", ",", "-", "2", "]", ")", "\n", "data", "=", "torch", ".", "view_as_real", "(", "\n", "torch", ".", "fft", ".", "ifftn", "(", "# type: ignore", "\n", "torch", ".", "view_as_complex", "(", "data", ")", ",", "dim", "=", "(", "-", "2", ",", "-", "1", ")", ",", "norm", "=", "\"ortho\"", "\n", ")", "\n", ")", "\n", "data", "=", "fftshift", "(", "data", ",", "dim", "=", "[", "-", "3", ",", "-", "2", "]", ")", "\n", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data_ki.math.complex_abs": [[103, 117], ["data.size"], "function", ["None"], ["", "def", "complex_abs", "(", "data", ")", ":", "\n", "    ", "\"\"\"\n    Compute the absolute value of a complex valued input tensor.\n\n    Args:\n        data (torch.Tensor): A complex valued tensor, where the size of the\n            final dimension should be 2.\n\n    Returns:\n        torch.Tensor: Absolute value of data.\n    \"\"\"", "\n", "assert", "data", ".", "size", "(", "-", "1", ")", "==", "2", "\n", "\n", "return", "(", "data", "**", "2", ")", ".", "sum", "(", "dim", "=", "-", "1", ")", ".", "sqrt", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data_ki.math.complex_abs_numpy": [[120, 124], ["numpy.sqrt", "numpy.sum"], "function", ["None"], ["", "def", "complex_abs_numpy", "(", "data", ")", ":", "\n", "    ", "assert", "data", ".", "shape", "[", "-", "1", "]", "==", "2", "\n", "\n", "return", "np", ".", "sqrt", "(", "np", ".", "sum", "(", "data", "**", "2", ",", "axis", "=", "-", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data_ki.math.complex_abs_sq": [[126, 139], ["data.size"], "function", ["None"], ["", "def", "complex_abs_sq", "(", "data", ")", ":", "#multi coil", "\n", "    ", "\"\"\"\n    Compute the squared absolute value of a complex tensor.\n\n    Args:\n        data (torch.Tensor): A complex valued tensor, where the size of the\n            final dimension should be 2.\n\n    Returns:\n        torch.Tensor: Squared absolute value of data.\n    \"\"\"", "\n", "assert", "data", ".", "size", "(", "-", "1", ")", "==", "2", "\n", "return", "(", "data", "**", "2", ")", ".", "sum", "(", "dim", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data_ki.math.roll": [[144, 167], ["isinstance", "roll.narrow", "roll.narrow", "torch.cat", "zip", "roll.size", "len", "len", "math.roll", "roll.size", "roll.size"], "function", ["home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.math.roll"], ["", "def", "roll", "(", "x", ",", "shift", ",", "dim", ")", ":", "\n", "    ", "\"\"\"\n    Similar to np.roll but applies to PyTorch Tensors.\n\n    Args:\n        x (torch.Tensor): A PyTorch tensor.\n        shift (int): Amount to roll.\n        dim (int): Which dimension to roll.\n\n    Returns:\n        torch.Tensor: Rolled version of x.\n    \"\"\"", "\n", "if", "isinstance", "(", "shift", ",", "(", "tuple", ",", "list", ")", ")", ":", "\n", "        ", "assert", "len", "(", "shift", ")", "==", "len", "(", "dim", ")", "\n", "for", "s", ",", "d", "in", "zip", "(", "shift", ",", "dim", ")", ":", "\n", "            ", "x", "=", "roll", "(", "x", ",", "s", ",", "d", ")", "\n", "", "return", "x", "\n", "", "shift", "=", "shift", "%", "x", ".", "size", "(", "dim", ")", "\n", "if", "shift", "==", "0", ":", "\n", "        ", "return", "x", "\n", "", "left", "=", "x", ".", "narrow", "(", "dim", ",", "0", ",", "x", ".", "size", "(", "dim", ")", "-", "shift", ")", "\n", "right", "=", "x", ".", "narrow", "(", "dim", ",", "x", ".", "size", "(", "dim", ")", "-", "shift", ",", "shift", ")", "\n", "return", "torch", ".", "cat", "(", "(", "right", ",", "left", ")", ",", "dim", "=", "dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data_ki.math.fftshift": [[169, 189], ["math.roll", "tuple", "isinstance", "range", "x.dim"], "function", ["home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.math.roll"], ["", "def", "fftshift", "(", "x", ",", "dim", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Similar to np.fft.fftshift but applies to PyTorch Tensors\n\n    Args:\n        x (torch.Tensor): A PyTorch tensor.\n        dim (int): Which dimension to fftshift.\n\n    Returns:\n        torch.Tensor: fftshifted version of x.\n    \"\"\"", "\n", "if", "dim", "is", "None", ":", "\n", "        ", "dim", "=", "tuple", "(", "range", "(", "x", ".", "dim", "(", ")", ")", ")", "\n", "shift", "=", "[", "dim", "//", "2", "for", "dim", "in", "x", ".", "shape", "]", "\n", "", "elif", "isinstance", "(", "dim", ",", "int", ")", ":", "\n", "        ", "shift", "=", "x", ".", "shape", "[", "dim", "]", "//", "2", "\n", "", "else", ":", "\n", "        ", "shift", "=", "[", "x", ".", "shape", "[", "i", "]", "//", "2", "for", "i", "in", "dim", "]", "\n", "\n", "", "return", "roll", "(", "x", ",", "shift", ",", "dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data_ki.math.ifftshift": [[191, 211], ["math.roll", "tuple", "isinstance", "range", "x.dim"], "function", ["home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.math.roll"], ["", "def", "ifftshift", "(", "x", ",", "dim", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Similar to np.fft.ifftshift but applies to PyTorch Tensors\n\n    Args:\n        x (torch.Tensor): A PyTorch tensor.\n        dim (int): Which dimension to ifftshift.\n\n    Returns:\n        torch.Tensor: ifftshifted version of x.\n    \"\"\"", "\n", "if", "dim", "is", "None", ":", "\n", "        ", "dim", "=", "tuple", "(", "range", "(", "x", ".", "dim", "(", ")", ")", ")", "\n", "shift", "=", "[", "(", "dim", "+", "1", ")", "//", "2", "for", "dim", "in", "x", ".", "shape", "]", "\n", "", "elif", "isinstance", "(", "dim", ",", "int", ")", ":", "\n", "        ", "shift", "=", "(", "x", ".", "shape", "[", "dim", "]", "+", "1", ")", "//", "2", "\n", "", "else", ":", "\n", "        ", "shift", "=", "[", "(", "x", ".", "shape", "[", "i", "]", "+", "1", ")", "//", "2", "for", "i", "in", "dim", "]", "\n", "\n", "", "return", "roll", "(", "x", ",", "shift", ",", "dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data_ki.math.tensor_to_complex_np": [[213, 224], ["data.numpy.numpy"], "function", ["None"], ["", "def", "tensor_to_complex_np", "(", "data", ")", ":", "\n", "    ", "\"\"\"\n    Converts a complex torch tensor to numpy array.\n    Args:\n        data (torch.Tensor): Input data to be converted to numpy.\n\n    Returns:\n        np.array: Complex numpy version of data\n    \"\"\"", "\n", "data", "=", "data", ".", "numpy", "(", ")", "\n", "return", "data", "[", "...", ",", "0", "]", "+", "1j", "*", "data", "[", "...", ",", "1", "]", "\n", "", ""]], "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data_ki.brats_mix.BraTS.__init__": [[51, 72], ["open", "scipy.io.loadmat", "round", "line.strip.strip.strip", "os.path.join", "range", "random.shuffle", "line.strip.strip.split", "paths.append", "paths.append", "len"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "list_file", ",", "mask", ",", "root", "=", "''", ",", "mode", "=", "'train'", ",", "sample_rate", "=", "1", ")", ":", "\n", "        ", "paths", "=", "[", "]", "\n", "with", "open", "(", "list_file", ")", "as", "f", ":", "\n", "            ", "for", "line", "in", "f", ":", "\n", "                ", "line", "=", "line", ".", "strip", "(", ")", "\n", "name", "=", "line", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "\n", "path", "=", "os", ".", "path", ".", "join", "(", "root", ",", "line", ",", "name", "+", "'_'", ")", "\n", "for", "slice", "in", "range", "(", "60", ")", ":", "\n", "# paths.append((path + 't1.nii.gz', slice, name + '_t1'))", "\n", "# paths.append((path + 't2.nii.gz', slice, name + '_t2'))", "\n", "                    ", "paths", ".", "append", "(", "(", "path", ",", "slice", ",", "name", "+", "'_t1'", ",", "'t1'", ")", ")", "\n", "paths", ".", "append", "(", "(", "path", ",", "slice", ",", "name", "+", "'_t2'", ",", "'t2'", ")", ")", "\n", "", "", "", "self", ".", "mask", "=", "loadmat", "(", "mask", ")", "[", "'mask'", "]", "\n", "\n", "if", "sample_rate", "<", "1", ":", "\n", "            ", "if", "mode", "==", "'train'", ":", "\n", "                ", "random", ".", "shuffle", "(", "paths", ")", "\n", "", "num_examples", "=", "round", "(", "len", "(", "paths", ")", "*", "sample_rate", ")", "\n", "self", ".", "examples", "=", "paths", "[", "0", ":", "num_examples", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "examples", "=", "paths", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data_ki.brats_mix.BraTS.__getitem__": [[73, 97], ["brats_mix.pkload", "brats_mix.fft2", "data.transforms.to_tensor", "math.complex_abs", "data.transforms.to_tensor", "math.complex_abs", "transforms.normalize_instance", "transforms.normalize", "subsample.float.float.float", "target.float.float.float", "maskedkspace.float.float.float", "math.ifft2c", "math.ifft2c"], "methods", ["home.repos.pwc.inspect_result.chunmeifeng_fedmri.data_ki.brats_mix.pkload", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.dicom_mix.fft2", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.transforms.to_tensor", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.math.complex_abs", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.transforms.to_tensor", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.math.complex_abs", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.transforms.normalize_instance", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.transforms.normalize", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.fastmri.JiangSudataset.ifft2c", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.fastmri.JiangSudataset.ifft2c"], ["", "", "def", "__getitem__", "(", "self", ",", "item", ")", ":", "\n", "        ", "path", ",", "slice", ",", "fname", ",", "modal", "=", "self", ".", "examples", "[", "item", "]", "\n", "img", "=", "pkload", "(", "path", "+", "modal", "+", "'.pkl'", ")", "\n", "img", "=", "img", "[", "...", ",", "slice", "]", "\n", "#img = load_nii(path)[..., slice].transpose(1, 0)", "\n", "kspace", "=", "fft2", "(", "img", ")", "\n", "maskedkspace", "=", "kspace", "*", "self", ".", "mask", "\n", "\n", "maskedkspace", "=", "to_tensor", "(", "maskedkspace", ")", "\n", "subsample", "=", "complex_abs", "(", "ifft2c", "(", "maskedkspace", ")", ")", "\n", "\n", "kspace", "=", "to_tensor", "(", "kspace", ")", "\n", "target", "=", "complex_abs", "(", "ifft2c", "(", "kspace", ")", ")", "\n", "\n", "subsample", ",", "mean", ",", "std", "=", "normalize_instance", "(", "subsample", ",", "eps", "=", "1e-11", ")", "\n", "target", "=", "normalize", "(", "target", ",", "mean", ",", "std", ",", "eps", "=", "1e-11", ")", "\n", "\n", "subsample", "=", "subsample", ".", "float", "(", ")", "\n", "target", "=", "target", ".", "float", "(", ")", "\n", "maskedkspace", "=", "maskedkspace", ".", "float", "(", ")", "\n", "\n", "\n", "\n", "return", "maskedkspace", ",", "self", ".", "mask", ",", "target", ",", "mean", ",", "std", ",", "fname", ",", "slice", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data_ki.brats_mix.BraTS.__len__": [[98, 100], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "examples", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data_ki.brats_mix.BraTS.collate": [[101, 103], ["torch.cat", "zip"], "methods", ["None"], ["", "def", "collate", "(", "self", ",", "batch", ")", ":", "\n", "        ", "return", "[", "torch", ".", "cat", "(", "v", ")", "for", "v", "in", "zip", "(", "*", "batch", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data_ki.brats_mix.pkload": [[15, 18], ["open", "pickle.load"], "function", ["None"], ["def", "pkload", "(", "fname", ")", ":", "\n", "    ", "with", "open", "(", "fname", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "return", "pickle", ".", "load", "(", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data_ki.brats_mix.fft2": [[22, 24], ["numpy.fft.fftshift", "numpy.fft.fft2", "numpy.fft.ifftshift"], "function", ["home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.math.fftshift", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.dicom_mix.fft2", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.math.ifftshift"], ["", "", "def", "fft2", "(", "img", ")", ":", "\n", "    ", "return", "np", ".", "fft", ".", "fftshift", "(", "np", ".", "fft", ".", "fft2", "(", "np", ".", "fft", ".", "ifftshift", "(", "img", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data_ki.brats_mix.nib_load": [[25, 33], ["nibabel.load", "nib.load.get_data", "nib.load.uncache", "os.path.exists", "print"], "function", ["None"], ["", "def", "nib_load", "(", "file_name", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "exists", "(", "file_name", ")", ":", "\n", "        ", "print", "(", "'Invalid file name, can not find the file!'", ")", "\n", "\n", "", "proxy", "=", "nib", ".", "load", "(", "file_name", ")", "\n", "data", "=", "proxy", ".", "get_data", "(", ")", "\n", "proxy", ".", "uncache", "(", ")", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data_ki.brats_mix.vis_img": [[34, 41], ["os.makedirs", "matplotlib.pyplot.figure", "matplotlib.pyplot.imshow", "os.path.join", "matplotlib.pyplot.savefig"], "function", ["home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.fastmri.imshow"], ["", "def", "vis_img", "(", "img", ",", "fname", ",", "ftype", ",", "output_dir", ")", ":", "\n", "    ", "os", ".", "makedirs", "(", "output_dir", ",", "exist_ok", "=", "True", ")", "\n", "plt", ".", "figure", "(", ")", "\n", "plt", ".", "imshow", "(", "img", ",", "cmap", "=", "'gray'", ")", "\n", "figname", "=", "fname", "+", "'_'", "+", "ftype", "+", "'.png'", "\n", "figpath", "=", "os", ".", "path", ".", "join", "(", "output_dir", ",", "figname", ")", "\n", "plt", ".", "savefig", "(", "figpath", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data_ki.brats_mix.load_nii": [[42, 49], ["numpy.array", "t.mean", "t.std", "brats_mix.nib_load"], "function", ["home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.brats_mix.nib_load"], ["", "def", "load_nii", "(", "niipath", ")", ":", "\n", "    ", "image", "=", "np", ".", "array", "(", "nib_load", "(", "niipath", ")", ",", "dtype", "=", "'float32'", ",", "order", "=", "'C'", ")", "\n", "mask", "=", "image", ">", "0", "\n", "t", "=", "image", "[", "mask", "]", "\n", "image", "[", "mask", "]", "-=", "t", ".", "mean", "(", ")", "\n", "image", "[", "mask", "]", "/=", "t", ".", "std", "(", ")", "\n", "return", "image", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data_ki.brats_mix.build_brats_dataset": [[105, 115], ["os.path.join", "os.path.join", "os.path.join", "brats_mix.BraTS", "os.path.join", "os.path.join", "brats_mix.BraTS"], "function", ["None"], ["", "", "def", "build_brats_dataset", "(", "args", ",", "mode", "=", "'train'", ")", ":", "\n", "    ", "mask", "=", "os", ".", "path", ".", "join", "(", "args", ".", "TRANSFORMS", ".", "DICOM_MASK_DIR", ",", "args", ".", "TRANSFORMS", ".", "MASK_FILE", "[", "1", "]", ")", "\n", "if", "mode", "==", "'train'", ":", "\n", "        ", "train_root", "=", "os", ".", "path", ".", "join", "(", "args", ".", "DATASET", ".", "ROOT", "[", "1", "]", ",", "'train'", ")", "\n", "train_list", "=", "os", ".", "path", ".", "join", "(", "args", ".", "DATASET", ".", "ROOT", "[", "1", "]", ",", "'train'", ",", "'train.txt'", ")", "\n", "return", "BraTS", "(", "train_list", ",", "mask", ",", "train_root", ",", "mode", ",", "args", ".", "DATASET", ".", "SAMPLE_RATE", "[", "1", "]", ")", "\n", "", "elif", "mode", "==", "'val'", ":", "\n", "        ", "val_root", "=", "os", ".", "path", ".", "join", "(", "args", ".", "DATASET", ".", "ROOT", "[", "1", "]", ",", "'val'", ")", "\n", "val_list", "=", "os", ".", "path", ".", "join", "(", "args", ".", "DATASET", ".", "ROOT", "[", "1", "]", ",", "'val'", ",", "'valid.txt'", ")", "\n", "return", "BraTS", "(", "val_list", ",", "mask", ",", "val_root", ",", "mode", ",", "args", ".", "DATASET", ".", "SAMPLE_RATE", "[", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data_ki.subsample.MaskFunc.__init__": [[41, 59], ["len", "len", "ValueError"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "center_fractions", ",", "accelerations", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            center_fractions (List[float]): Fraction of low-frequency columns to be\n                retained. If multiple values are provided, then one of these\n                numbers is chosen uniformly each time. \n            accelerations (List[int]): Amount of under-sampling. This should have\n                the same length as center_fractions. If multiple values are\n                provided, then one of these is chosen uniformly each time.\n        \"\"\"", "\n", "if", "len", "(", "center_fractions", ")", "!=", "len", "(", "accelerations", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"Number of center fractions should match number of accelerations\"", "\n", ")", "\n", "\n", "", "self", ".", "center_fractions", "=", "center_fractions", "\n", "self", ".", "accelerations", "=", "accelerations", "\n", "self", ".", "rng", "=", "np", ".", "random", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data_ki.subsample.MaskFunc.choose_acceleration": [[60, 67], ["subsample.MaskFunc.rng.randint", "len"], "methods", ["None"], ["", "def", "choose_acceleration", "(", "self", ")", ":", "\n", "        ", "\"\"\"Choose acceleration based on class parameters.\"\"\"", "\n", "choice", "=", "self", ".", "rng", ".", "randint", "(", "0", ",", "len", "(", "self", ".", "accelerations", ")", ")", "\n", "center_fraction", "=", "self", ".", "center_fractions", "[", "choice", "]", "\n", "acceleration", "=", "self", ".", "accelerations", "[", "choice", "]", "\n", "\n", "return", "center_fraction", ",", "acceleration", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data_ki.subsample.RandomMaskFunc.__call__": [[92, 129], ["len", "ValueError", "subsample.temp_seed", "subsample.RandomMaskFunc.choose_acceleration", "int", "torch.from_numpy", "round", "subsample.RandomMaskFunc.rng.uniform", "torch.from_numpy.reshape().astype", "torch.from_numpy.reshape"], "methods", ["home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.subsample.temp_seed", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.subsample.MaskFunc.choose_acceleration"], ["def", "__call__", "(", "self", ",", "shape", ",", "seed", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Create the mask.\n\n        Args:\n            shape (iterable[int]): The shape of the mask to be created. The\n                shape should have at least 3 dimensions. Samples are drawn\n                along the second last dimension.\n            seed (int, optional): Seed for the random number generator. Setting\n                the seed ensures the same mask is generated each time for the\n                same shape. The random state is reset afterwards.\n                \n        Returns:\n            torch.Tensor: A mask of the specified shape.\n        \"\"\"", "\n", "if", "len", "(", "shape", ")", "<", "3", ":", "\n", "            ", "raise", "ValueError", "(", "\"Shape should have 3 or more dimensions\"", ")", "\n", "\n", "", "with", "temp_seed", "(", "self", ".", "rng", ",", "seed", ")", ":", "\n", "            ", "num_cols", "=", "shape", "[", "-", "2", "]", "\n", "center_fraction", ",", "acceleration", "=", "self", ".", "choose_acceleration", "(", ")", "\n", "\n", "# create the mask", "\n", "num_low_freqs", "=", "int", "(", "round", "(", "num_cols", "*", "center_fraction", ")", ")", "\n", "prob", "=", "(", "num_cols", "/", "acceleration", "-", "num_low_freqs", ")", "/", "(", "\n", "num_cols", "-", "num_low_freqs", "\n", ")", "\n", "mask", "=", "self", ".", "rng", ".", "uniform", "(", "size", "=", "num_cols", ")", "<", "prob", "\n", "pad", "=", "(", "num_cols", "-", "num_low_freqs", "+", "1", ")", "//", "2", "\n", "mask", "[", "pad", ":", "pad", "+", "num_low_freqs", "]", "=", "True", "\n", "\n", "# reshape the mask", "\n", "mask_shape", "=", "[", "1", "for", "_", "in", "shape", "]", "\n", "mask_shape", "[", "-", "2", "]", "=", "num_cols", "\n", "mask", "=", "torch", ".", "from_numpy", "(", "mask", ".", "reshape", "(", "*", "mask_shape", ")", ".", "astype", "(", "np", ".", "float32", ")", ")", "\n", "\n", "", "return", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data_ki.subsample.EquispacedMaskFunc.__call__": [[154, 196], ["len", "ValueError", "subsample.temp_seed", "subsample.EquispacedMaskFunc.choose_acceleration", "int", "numpy.zeros", "subsample.EquispacedMaskFunc.rng.randint", "numpy.arange", "numpy.around().astype", "torch.from_numpy", "round", "round", "torch.from_numpy.reshape().astype", "numpy.around", "torch.from_numpy.reshape"], "methods", ["home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.subsample.temp_seed", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.subsample.MaskFunc.choose_acceleration"], ["def", "__call__", "(", "self", ",", "shape", ",", "seed", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            shape (iterable[int]): The shape of the mask to be created. The\n                shape should have at least 3 dimensions. Samples are drawn\n                along the second last dimension.\n            seed (int, optional): Seed for the random number generator. Setting\n                the seed ensures the same mask is generated each time for the\n                same shape. The random state is reset afterwards.\n\n        Returns:\n            torch.Tensor: A mask of the specified shape.\n        \"\"\"", "\n", "if", "len", "(", "shape", ")", "<", "3", ":", "\n", "            ", "raise", "ValueError", "(", "\"Shape should have 3 or more dimensions\"", ")", "\n", "\n", "", "with", "temp_seed", "(", "self", ".", "rng", ",", "seed", ")", ":", "\n", "            ", "center_fraction", ",", "acceleration", "=", "self", ".", "choose_acceleration", "(", ")", "\n", "num_cols", "=", "shape", "[", "-", "2", "]", "\n", "num_low_freqs", "=", "int", "(", "round", "(", "num_cols", "*", "center_fraction", ")", ")", "\n", "\n", "# create the mask", "\n", "mask", "=", "np", ".", "zeros", "(", "num_cols", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "pad", "=", "(", "num_cols", "-", "num_low_freqs", "+", "1", ")", "//", "2", "\n", "mask", "[", "pad", ":", "pad", "+", "num_low_freqs", "]", "=", "True", "\n", "\n", "# determine acceleration rate by adjusting for the number of low frequencies", "\n", "adjusted_accel", "=", "(", "acceleration", "*", "(", "num_low_freqs", "-", "num_cols", ")", ")", "/", "(", "\n", "num_low_freqs", "*", "acceleration", "-", "num_cols", "\n", ")", "\n", "offset", "=", "self", ".", "rng", ".", "randint", "(", "0", ",", "round", "(", "adjusted_accel", ")", ")", "\n", "\n", "accel_samples", "=", "np", ".", "arange", "(", "offset", ",", "num_cols", "-", "1", ",", "adjusted_accel", ")", "\n", "accel_samples", "=", "np", ".", "around", "(", "accel_samples", ")", ".", "astype", "(", "np", ".", "uint", ")", "\n", "mask", "[", "accel_samples", "]", "=", "True", "\n", "\n", "# reshape the mask", "\n", "mask_shape", "=", "[", "1", "for", "_", "in", "shape", "]", "\n", "mask_shape", "[", "-", "2", "]", "=", "num_cols", "\n", "mask", "=", "torch", ".", "from_numpy", "(", "mask", ".", "reshape", "(", "*", "mask_shape", ")", ".", "astype", "(", "np", ".", "float32", ")", ")", "\n", "\n", "", "return", "mask", "\n", "", "", ""]], "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data_ki.subsample.temp_seed": [[14, 22], ["rng.get_state", "rng.seed", "rng.set_state"], "function", ["None"], ["@", "contextlib", ".", "contextmanager", "\n", "def", "temp_seed", "(", "rng", ",", "seed", ")", ":", "\n", "    ", "state", "=", "rng", ".", "get_state", "(", ")", "\n", "rng", ".", "seed", "(", "seed", ")", "\n", "try", ":", "\n", "        ", "yield", "\n", "", "finally", ":", "\n", "        ", "rng", ".", "set_state", "(", "state", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data_ki.subsample.create_mask_for_mask_type": [[24, 31], ["subsample.RandomMaskFunc", "subsample.EquispacedMaskFunc", "Exception"], "function", ["None"], ["", "", "def", "create_mask_for_mask_type", "(", "mask_type_str", ",", "center_fractions", ",", "accelerations", ")", ":", "\n", "    ", "if", "mask_type_str", "==", "\"random\"", ":", "\n", "        ", "return", "RandomMaskFunc", "(", "center_fractions", ",", "accelerations", ")", "\n", "", "elif", "mask_type_str", "==", "\"equispaced\"", ":", "\n", "        ", "return", "EquispacedMaskFunc", "(", "center_fractions", ",", "accelerations", ")", "\n", "", "else", ":", "\n", "        ", "raise", "Exception", "(", "f\"{mask_type_str} not supported\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data_ki.__init__.build_dataloader": [[9, 30], ["range", "len", "os.path.join", "os.path.join", "dicom_mix.FastMRIDicom_Split", "os.path.join", "data_loader.append", "torch.utils.data.DataLoader", "data_loader.append", "torch.utils.data.DataLoader"], "function", ["None"], ["\n", "def", "build_config", "(", "factory", ")", ":", "\n", "    ", "return", "config_factory", "[", "factory", "]", "", "", ""]], "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data_ki.__init__.build_different_dataloader": [[31, 62], ["dicom_mix.build_fastmri_dataset", "brats_mix.build_brats_dataset", "fastmri.create_datasets", "fastmri.create_datasets", "len", "dataset_len.append", "len", "data_loader.append", "torch.utils.data.DistributedSampler", "torch.utils.data.RandomSampler", "torch.utils.data.DataLoader", "data_loader.append", "torch.utils.data.DistributedSampler", "torch.utils.data.SequentialSampler", "torch.utils.data.DataLoader"], "function", ["home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.dicom_mix.build_fastmri_dataset", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.brats_mix.build_brats_dataset", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.fastmri.create_datasets", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.fastmri.create_datasets"], []], "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data_ki.fastmri.IXIdataset.__init__": [[120, 193], ["os.path.join", "range", "client_name.find", "int", "range", "round", "fastmri.IXIdataset.examples.append", "len", "random.shuffle", "data_dir.replace", "os.listdir", "client_name.split", "len", "divided_examples.append", "len", "data_dir.replace", "os.path.splitext", "file.startswith", "range", "len", "len", "len", "len", "len"], "methods", ["None"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "data_dir", ",", "\n", "transforms", ",", "\n", "args", ",", "\n", "challenge", ",", "\n", "sample_rate", "=", "1", ",", "\n", "mode", "=", "'train'", ",", "\n", "pattern", "=", "'T2'", ",", "\n", "client_name", "=", "'IXI'", ",", "# IXI_zi_1", "\n", "client_num", "=", "2", ",", "\n", ")", ":", "\n", "        ", "self", ".", "transform", "=", "transforms", "\n", "self", ".", "pattern", "=", "pattern", "\n", "self", ".", "img_size", "=", "args", ".", "img_size", "\n", "self", ".", "file_names", "=", "[", "]", "\n", "# self.final_file_names = []", "\n", "self", ".", "examples", "=", "[", "]", "\n", "\n", "if", "pattern", "==", "'T1'", ":", "\n", "            ", "self", ".", "data_list", "=", "[", "data_dir", "]", "\n", "", "elif", "pattern", "==", "'T2'", ":", "\n", "            ", "self", ".", "data_list", "=", "[", "data_dir", ".", "replace", "(", "'/IXI/'", ",", "'/IXI_T2/'", ")", "]", "\n", "", "elif", "pattern", "==", "'T1+T2'", ":", "\n", "            ", "self", ".", "data_list", "=", "[", "data_dir", ",", "data_dir", ".", "replace", "(", "'/IXI/'", ",", "'/IXI_T2/'", ")", "]", "\n", "\n", "", "self", ".", "recons_key", "=", "(", "\n", "\"reconstruction_esc\"", "if", "challenge", "==", "\"singlecoil\"", "else", "\"reconstruction_rss\"", "\n", ")", "\n", "\n", "metadata", "=", "{", "\n", "'acquisition'", ":", "pattern", ",", "\n", "'encoding_size'", ":", "(", "256", ",", "256", ",", "1", ")", ",", "\n", "'max'", ":", "0", ",", "\n", "'norm'", ":", "0", ",", "\n", "'padding_left'", ":", "0", ",", "\n", "'padding_right'", ":", "0", ",", "\n", "'patient_id'", ":", "'0'", ",", "\n", "'recon_size'", ":", "(", "256", ",", "256", ",", "1", ")", ",", "\n", "}", "\n", "\n", "#make an image id's list", "\n", "for", "dataset", "in", "self", ".", "data_list", ":", "\n", "            ", "self", ".", "file_names", "+=", "[", "(", "dataset", ",", "splitext", "(", "file", ")", "[", "0", "]", ")", "for", "file", "in", "listdir", "(", "dataset", ")", "\n", "if", "not", "file", ".", "startswith", "(", "'.'", ")", "]", "\n", "\n", "", "for", "dataset", ",", "file_name", "in", "self", ".", "file_names", ":", "\n", "            ", "full_file_path", "=", "path", ".", "join", "(", "dataset", ",", "file_name", "+", "'.hdf5'", ")", "\n", "\n", "for", "slice_id", "in", "range", "(", "20", ",", "120", ",", "1", ")", ":", "\n", "                ", "self", ".", "examples", ".", "append", "(", "(", "full_file_path", ",", "slice_id", ",", "metadata", ")", ")", "\n", "\n", "# split to subdatasets", "\n", "", "", "if", "client_name", ".", "find", "(", "'zi_'", ")", ">=", "0", ":", "\n", "            ", "division_num", "=", "int", "(", "client_name", ".", "split", "(", "'zi_'", ")", "[", "-", "1", "]", ")", "\n", "divided_examples", "=", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "0", ",", "len", "(", "self", ".", "examples", ")", ",", "len", "(", "self", ".", "examples", ")", "//", "client_num", ")", ":", "\n", "                ", "if", "i", "==", "range", "(", "0", ",", "len", "(", "self", ".", "examples", ")", ",", "len", "(", "self", ".", "examples", ")", "//", "client_num", ")", "[", "-", "1", "]", "and", "len", "(", "self", ".", "examples", ")", "%", "(", "len", "(", "self", ".", "examples", ")", "//", "client_num", ")", "!=", "0", ":", "\n", "                    ", "new_list", "=", "self", ".", "examples", "[", "i", ":", "]", "\n", "divided_examples", "[", "-", "1", "]", "+=", "new_list", "\n", "", "else", ":", "\n", "                    ", "new_list", "=", "self", ".", "examples", "[", "i", ":", "i", "+", "len", "(", "self", ".", "examples", ")", "//", "client_num", "]", "\n", "divided_examples", ".", "append", "(", "new_list", ")", "\n", "\n", "", "", "self", ".", "examples", "=", "divided_examples", "[", "division_num", "]", "\n", "\n", "", "if", "sample_rate", "<", "1", ":", "\n", "            ", "if", "mode", "==", "'train'", ":", "\n", "                ", "random", ".", "shuffle", "(", "self", ".", "examples", ")", "\n", "", "num_examples", "=", "round", "(", "len", "(", "self", ".", "examples", ")", "*", "sample_rate", ")", "\n", "self", ".", "examples", "=", "self", ".", "examples", "[", "0", ":", "num_examples", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data_ki.fastmri.IXIdataset.__len__": [[194, 196], ["len"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "examples", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data_ki.fastmri.IXIdataset.__getitem__": [[197, 218], ["fastmri.IXIdataset.h5path2matpath", "numpy.rot90", "fastmri.IXIdataset.fft2c().astype", "numpy.rot90.astype", "scipy.io.loadmat", "fastmri.IXIdataset.transform", "fastmri.IXIdataset.fft2c"], "methods", ["home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.fastmri.IXIdataset.h5path2matpath", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.fastmri.JiangSudataset.fft2c"], ["", "def", "__getitem__", "(", "self", ",", "slice_id", ")", ":", "\n", "\n", "        ", "fname_nii", ",", "slice_idx", ",", "metadata", "=", "self", ".", "examples", "[", "slice_id", "]", "\n", "\n", "slice_path", "=", "self", ".", "h5path2matpath", "(", "fname_nii", ",", "slice_idx", ")", "\n", "image", "=", "loadmat", "(", "slice_path", ")", "[", "'img'", "]", "# spatial  (556,640)", "\n", "\n", "mask", "=", "None", "\n", "attrs", "=", "metadata", "\n", "\n", "image", "=", "np", ".", "rot90", "(", "image", ")", "\n", "\n", "kspace", "=", "self", ".", "fft2c", "(", "image", ")", ".", "astype", "(", "np", ".", "complex64", ")", "\n", "target", "=", "image", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n", "if", "self", ".", "transform", "is", "None", ":", "\n", "            ", "sample", "=", "(", "kspace", ",", "mask", ",", "target", ",", "attrs", ",", "fname_nii", ",", "slice_idx", ")", "\n", "", "else", ":", "\n", "            ", "sample", "=", "self", ".", "transform", "(", "kspace", ",", "mask", ",", "target", ",", "attrs", ",", "fname_nii", ",", "slice_idx", ")", "\n", "\n", "", "return", "sample", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data_ki.fastmri.IXIdataset.fft2c": [[219, 221], ["numpy.fft.fftshift", "numpy.fft.fft2", "numpy.fft.ifftshift"], "methods", ["home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.math.fftshift", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.dicom_mix.fft2", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.math.ifftshift"], ["", "def", "fft2c", "(", "self", ",", "img", ")", ":", "\n", "        ", "return", "np", ".", "fft", ".", "fftshift", "(", "np", ".", "fft", ".", "fft2", "(", "np", ".", "fft", ".", "ifftshift", "(", "img", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data_ki.fastmri.IXIdataset.h5path2matpath": [[222, 228], ["fname.split", "os.path.join", "os.path.join.replace"], "methods", ["None"], ["", "def", "h5path2matpath", "(", "self", ",", "fname", ",", "slice_id", ")", ":", "\n", "        ", "filename", ",", "_", "=", "fname", ".", "split", "(", "'.'", ")", "\n", "mat_dir", "=", "path", ".", "join", "(", "filename", "+", "'-{:03d}.mat'", ".", "format", "(", "slice_id", ")", ")", "\n", "full_file_path", "=", "mat_dir", ".", "replace", "(", "'/h5/'", ",", "'/mat/'", ")", "\n", "\n", "return", "full_file_path", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data_ki.fastmri.LianYingdataset.__init__": [[230, 302], ["open.readlines", "open", "logging.info", "random.shuffle", "round", "os.path.join", "open", "file_name.split", "range", "file_name.split", "range", "logging.info", "str", "os.path.join", "open", "ValueError", "fastmri.LianYingdataset.examples.append", "fastmri.LianYingdataset.examples.append", "fastmri.LianYingdataset.examples.append", "logging.info", "len", "str", "os.path.join", "len", "str", "len", "len"], "methods", ["None"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "data_dir", ",", "\n", "transforms", ",", "\n", "args", ",", "\n", "challenge", ",", "\n", "sample_rate", "=", "1", ",", "\n", "mode", "=", "'train'", ",", "\n", "pattern", "=", "'T2'", "\n", ")", ":", "\n", "\n", "        ", "self", ".", "transform", "=", "transforms", "\n", "self", ".", "data_dir", "=", "data_dir", "\n", "self", ".", "img_size", "=", "args", ".", "img_size", "\n", "self", ".", "examples", "=", "[", "]", "\n", "\n", "self", ".", "recons_key", "=", "(", "\n", "\"reconstruction_esc\"", "if", "challenge", "==", "\"singlecoil\"", "else", "\"reconstruction_rss\"", "\n", ")", "\n", "\n", "#make an image id's list", "\n", "if", "mode", "==", "'train'", ":", "\n", "            ", "f", "=", "open", "(", "path", ".", "join", "(", "str", "(", "data_dir", ")", ",", "'lianying_train.txt'", ")", ",", "'r'", ")", "#_little", "\n", "", "elif", "mode", "==", "'val'", ":", "\n", "            ", "f", "=", "open", "(", "path", ".", "join", "(", "str", "(", "data_dir", ")", ",", "'lianying_val.txt'", ")", ",", "'r'", ")", "#_little", "\n", "", "elif", "mode", "==", "'test'", ":", "\n", "            ", "f", "=", "open", "(", "path", ".", "join", "(", "str", "(", "data_dir", ")", ",", "'lianying_test.txt'", ")", ",", "'r'", ")", "#_little", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"No mode like this, please choose one in ['train', 'val', 'test'].\"", ")", "\n", "\n", "", "file_names", "=", "f", ".", "readlines", "(", ")", "\n", "\n", "metadata", "=", "{", "\n", "'acquisition'", ":", "pattern", ",", "\n", "'encoding_size'", ":", "(", "640", ",", "556", ",", "1", ")", ",", "\n", "'max'", ":", "0", ",", "\n", "'norm'", ":", "0", ",", "\n", "'padding_left'", ":", "0", ",", "\n", "'padding_right'", ":", "0", ",", "\n", "'patient_id'", ":", "'0'", ",", "\n", "'recon_size'", ":", "(", "320", ",", "320", ",", "1", ")", ",", "\n", "}", "\n", "\n", "if", "not", "pattern", "==", "'T1+T2'", ":", "\n", "\n", "            ", "if", "pattern", "==", "'T1'", ":", "\n", "                ", "idx", "=", "0", "\n", "", "elif", "pattern", "==", "'T2'", ":", "\n", "                ", "idx", "=", "1", "\n", "\n", "", "for", "file_name", "in", "file_names", ":", "\n", "                ", "splits", "=", "file_name", ".", "split", "(", ")", "# \u5206\u79bb\u7a7a\u683c", "\n", "for", "slice_id", "in", "range", "(", "args", ".", "slice_range", "[", "0", "]", ",", "args", ".", "slice_range", "[", "1", "]", "+", "1", ")", ":", "# 0:19==20", "\n", "                    ", "self", ".", "examples", ".", "append", "(", "(", "splits", "[", "idx", "]", ",", "slice_id", ",", "metadata", ")", ")", "# \u83b7\u53d6T1/T2\u7684slice\u5217\u8868", "\n", "", "", "", "else", ":", "\n", "            ", "for", "file_name", "in", "file_names", ":", "\n", "                ", "splits", "=", "file_name", ".", "split", "(", ")", "\n", "for", "slice_id", "in", "range", "(", "args", ".", "slice_range", "[", "0", "]", ",", "args", ".", "slice_range", "[", "1", "]", "+", "1", ")", ":", "# 0:19==20", "\n", "                    ", "self", ".", "examples", ".", "append", "(", "(", "splits", "[", "0", "]", ",", "slice_id", ",", "metadata", ")", ")", "# \u83b7\u53d6T1\u7684slice\u5217\u8868", "\n", "self", ".", "examples", ".", "append", "(", "(", "splits", "[", "1", "]", ",", "slice_id", ",", "metadata", ")", ")", "# \u83b7\u53d6T2\u7684slice\u5217\u8868", "\n", "\n", "", "", "", "if", "mode", "==", "'train'", ":", "\n", "            ", "logging", ".", "info", "(", "f'Creating training dataset with {len(self.examples)} examples'", ")", "\n", "", "elif", "mode", "==", "'val'", ":", "\n", "            ", "logging", ".", "info", "(", "f'Creating validation dataset with {len(self.examples)} examples'", ")", "\n", "", "elif", "mode", "==", "'test'", ":", "\n", "            ", "logging", ".", "info", "(", "f'Creating test dataset with {len(self.examples)} examples'", ")", "\n", "\n", "", "if", "sample_rate", "<", "1", ":", "\n", "            ", "random", ".", "shuffle", "(", "self", ".", "examples", ")", "\n", "num_examples", "=", "round", "(", "len", "(", "self", ".", "examples", ")", "*", "sample_rate", ")", "\n", "self", ".", "examples", "=", "self", ".", "examples", "[", "0", ":", "num_examples", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data_ki.fastmri.LianYingdataset.__len__": [[303, 305], ["len"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "examples", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data_ki.fastmri.LianYingdataset.__getitem__": [[306, 327], ["fastmri.LianYingdataset.niipath2matpath", "numpy.rot90", "fastmri.LianYingdataset.fft2c().astype", "numpy.rot90.astype", "scipy.io.loadmat", "fastmri.LianYingdataset.transform", "fastmri.LianYingdataset.fft2c"], "methods", ["home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.fastmri.JiangSudataset.niipath2matpath", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.fastmri.JiangSudataset.fft2c"], ["", "def", "__getitem__", "(", "self", ",", "slice_id", ")", ":", "\n", "\n", "        ", "fname_nii", ",", "slice_idx", ",", "metadata", "=", "self", ".", "examples", "[", "slice_id", "]", "\n", "\n", "slice_path", "=", "self", ".", "niipath2matpath", "(", "fname_nii", ",", "slice_idx", ")", "\n", "image", "=", "loadmat", "(", "slice_path", ")", "[", "'img'", "]", "# spatial  (556,640)", "\n", "\n", "mask", "=", "None", "\n", "attrs", "=", "metadata", "\n", "\n", "image", "=", "np", ".", "rot90", "(", "image", ")", "\n", "\n", "kspace", "=", "self", ".", "fft2c", "(", "image", ")", ".", "astype", "(", "np", ".", "complex64", ")", "\n", "target", "=", "image", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n", "if", "self", ".", "transform", "is", "None", ":", "\n", "            ", "sample", "=", "(", "kspace", ",", "mask", ",", "target", ",", "attrs", ",", "fname_nii", ",", "slice_idx", ")", "\n", "", "else", ":", "\n", "            ", "sample", "=", "self", ".", "transform", "(", "kspace", ",", "mask", ",", "target", ",", "attrs", ",", "fname_nii", ",", "slice_idx", ")", "\n", "\n", "", "return", "sample", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data_ki.fastmri.LianYingdataset.crop_toshape": [[328, 336], ["int"], "methods", ["None"], ["", "def", "crop_toshape", "(", "self", ",", "kspace_cplx", ")", ":", "\n", "        ", "if", "kspace_cplx", ".", "shape", "[", "1", "]", "==", "self", ".", "img_size", ":", "\n", "            ", "return", "kspace_cplx", "\n", "", "if", "kspace_cplx", ".", "shape", "[", "0", "]", "%", "2", "==", "1", ":", "\n", "            ", "kspace_cplx", "=", "kspace_cplx", "[", ":", "-", "1", ",", ":", "-", "1", "]", "\n", "", "crop", "=", "int", "(", "(", "kspace_cplx", ".", "shape", "[", "0", "]", "-", "self", ".", "img_size", ")", "/", "2", ")", "\n", "kspace_cplx", "=", "kspace_cplx", "[", "crop", ":", "-", "crop", ",", "crop", ":", "-", "crop", "]", "\n", "return", "kspace_cplx", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data_ki.fastmri.LianYingdataset.fft2c": [[337, 339], ["numpy.fft.fftshift", "numpy.fft.fft2", "numpy.fft.ifftshift"], "methods", ["home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.math.fftshift", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.dicom_mix.fft2", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.math.ifftshift"], ["", "def", "fft2c", "(", "self", ",", "img", ")", ":", "\n", "        ", "return", "np", ".", "fft", ".", "fftshift", "(", "np", ".", "fft", ".", "fft2", "(", "np", ".", "fft", ".", "ifftshift", "(", "img", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data_ki.fastmri.LianYingdataset.niipath2matpath": [[340, 348], ["os.path.split", "os.path.split", "os.path.join", "os.path.splitext", "os.path.join"], "methods", ["None"], ["", "def", "niipath2matpath", "(", "self", ",", "T1", ",", "slice_id", ")", ":", "\n", "        ", "filedir", ",", "filename", "=", "path", ".", "split", "(", "T1", ")", "\n", "filedir", ",", "_", "=", "path", ".", "split", "(", "filedir", ")", "\n", "mat_dir", "=", "path", ".", "join", "(", "filedir", ",", "'mat_320'", ")", "\n", "basename", ",", "ext", "=", "path", ".", "splitext", "(", "filename", ")", "\n", "file_name", "=", "'%s-%03d.mat'", "%", "(", "basename", ",", "slice_id", ")", "\n", "T1_file_path", "=", "path", ".", "join", "(", "mat_dir", ",", "file_name", ")", "\n", "return", "T1_file_path", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data_ki.fastmri.LianYingdataset.center_crop": [[349, 357], ["None"], "methods", ["None"], ["", "def", "center_crop", "(", "self", ",", "data", ",", "shape", ")", ":", "\n", "        ", "assert", "0", "<", "shape", "[", "0", "]", "<=", "data", ".", "shape", "[", "-", "2", "]", ",", "'Error: shape: {}, data.shape: {}'", ".", "format", "(", "shape", ",", "data", ".", "shape", ")", "#556...556", "\n", "assert", "0", "<", "shape", "[", "1", "]", "<=", "data", ".", "shape", "[", "-", "1", "]", "#640...640", "\n", "w_from", "=", "(", "data", ".", "shape", "[", "-", "2", "]", "-", "shape", "[", "0", "]", ")", "//", "2", "\n", "h_from", "=", "(", "data", ".", "shape", "[", "-", "1", "]", "-", "shape", "[", "1", "]", ")", "//", "2", "\n", "w_to", "=", "w_from", "+", "shape", "[", "0", "]", "\n", "h_to", "=", "h_from", "+", "shape", "[", "1", "]", "\n", "return", "data", "[", "...", ",", "w_from", ":", "w_to", ",", "h_from", ":", "h_to", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data_ki.fastmri.JiangSudataset.__init__": [[360, 426], ["open.readlines", "open", "random.shuffle", "round", "os.path.join", "open", "file_name.split", "range", "file_name.split", "range", "str", "os.path.join", "open", "ValueError", "fastmri.JiangSudataset.examples.append", "fastmri.JiangSudataset.examples.append", "fastmri.JiangSudataset.examples.append", "len", "str", "os.path.join", "str"], "methods", ["None"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "data_dir", ",", "\n", "transforms", ",", "\n", "args", ",", "\n", "challenge", ",", "\n", "sample_rate", "=", "1", ",", "\n", "mode", "=", "'train'", ",", "\n", "pattern", "=", "'T2'", "\n", ")", ":", "\n", "\n", "        ", "self", ".", "transform", "=", "transforms", "\n", "self", ".", "data_dir", "=", "data_dir", "\n", "self", ".", "img_size", "=", "args", ".", "img_size", "\n", "self", ".", "examples", "=", "[", "]", "\n", "\n", "self", ".", "recons_key", "=", "(", "\n", "\"reconstruction_esc\"", "if", "challenge", "==", "\"singlecoil\"", "else", "\"reconstruction_rss\"", "\n", ")", "\n", "\n", "#make an image id's list", "\n", "if", "mode", "==", "'train'", ":", "\n", "            ", "f", "=", "open", "(", "path", ".", "join", "(", "str", "(", "data_dir", ")", ",", "'jiangsu_train.txt'", ")", ",", "'r'", ")", "#_little", "\n", "", "elif", "mode", "==", "'val'", ":", "\n", "            ", "f", "=", "open", "(", "path", ".", "join", "(", "str", "(", "data_dir", ")", ",", "'jiangsu_val.txt'", ")", ",", "'r'", ")", "#_little", "\n", "", "elif", "mode", "==", "'test'", ":", "\n", "            ", "f", "=", "open", "(", "path", ".", "join", "(", "str", "(", "data_dir", ")", ",", "'jiangsu_test.txt'", ")", ",", "'r'", ")", "#_little", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"No mode like this, please choose one in ['train', 'val', 'test'].\"", ")", "\n", "\n", "", "file_names", "=", "f", ".", "readlines", "(", ")", "\n", "\n", "metadata", "=", "{", "\n", "'acquisition'", ":", "pattern", ",", "\n", "'encoding_size'", ":", "(", "640", ",", "556", ",", "1", ")", ",", "\n", "'max'", ":", "0", ",", "\n", "'norm'", ":", "0", ",", "\n", "'padding_left'", ":", "0", ",", "\n", "'padding_right'", ":", "0", ",", "\n", "'patient_id'", ":", "'0'", ",", "\n", "'recon_size'", ":", "(", "320", ",", "320", ",", "1", ")", ",", "\n", "}", "\n", "\n", "if", "not", "pattern", "==", "'T1+T2'", ":", "\n", "\n", "            ", "if", "pattern", "==", "'T1'", ":", "\n", "                ", "idx", "=", "0", "\n", "", "elif", "pattern", "==", "'T2'", ":", "\n", "                ", "idx", "=", "1", "\n", "\n", "", "for", "file_name", "in", "file_names", ":", "\n", "                ", "splits", "=", "file_name", ".", "split", "(", ")", "# \u5206\u79bb\u7a7a\u683c", "\n", "# list_pattern.append(splits[idx])", "\n", "for", "slice_id", "in", "range", "(", "args", ".", "slice_range", "[", "0", "]", ",", "args", ".", "slice_range", "[", "1", "]", "+", "1", ")", ":", "# 0:19==20", "\n", "                    ", "self", ".", "examples", ".", "append", "(", "(", "splits", "[", "idx", "]", ",", "slice_id", ",", "metadata", ")", ")", "# \u83b7\u53d6T1/T2\u7684slice\u5217\u8868", "\n", "", "", "", "else", ":", "\n", "            ", "for", "file_name", "in", "file_names", ":", "\n", "                ", "splits", "=", "file_name", ".", "split", "(", ")", "\n", "for", "slice_id", "in", "range", "(", "args", ".", "slice_range", "[", "0", "]", ",", "args", ".", "slice_range", "[", "1", "]", "+", "1", ")", ":", "# 0:19==20", "\n", "                    ", "self", ".", "examples", ".", "append", "(", "(", "splits", "[", "0", "]", ",", "slice_id", ",", "metadata", ")", ")", "# \u83b7\u53d6T1\u7684slice\u5217\u8868", "\n", "self", ".", "examples", ".", "append", "(", "(", "splits", "[", "1", "]", ",", "slice_id", ",", "metadata", ")", ")", "# \u83b7\u53d6T2\u7684slice\u5217\u8868", "\n", "\n", "", "", "", "if", "sample_rate", "<", "1", ":", "\n", "            ", "random", ".", "shuffle", "(", "self", ".", "examples", ")", "\n", "num_examples", "=", "round", "(", "len", "(", "self", ".", "examples", ")", "*", "sample_rate", ")", "\n", "self", ".", "examples", "=", "self", ".", "examples", "[", "0", ":", "num_examples", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data_ki.fastmri.JiangSudataset.__len__": [[427, 429], ["len"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "examples", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data_ki.fastmri.JiangSudataset.__getitem__": [[430, 451], ["fastmri.JiangSudataset.niipath2matpath", "numpy.rot90", "fastmri.JiangSudataset.fft2c().astype", "numpy.rot90.astype", "scipy.io.loadmat", "fastmri.JiangSudataset.transform", "fastmri.JiangSudataset.fft2c"], "methods", ["home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.fastmri.JiangSudataset.niipath2matpath", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.fastmri.JiangSudataset.fft2c"], ["", "def", "__getitem__", "(", "self", ",", "slice_id", ")", ":", "\n", "\n", "        ", "fname_nii", ",", "slice_idx", ",", "metadata", "=", "self", ".", "examples", "[", "slice_id", "]", "\n", "\n", "slice_path", "=", "self", ".", "niipath2matpath", "(", "fname_nii", ",", "slice_idx", ")", "\n", "image", "=", "loadmat", "(", "slice_path", ")", "[", "'img'", "]", "# spatial  (556,640)", "\n", "\n", "mask", "=", "None", "\n", "attrs", "=", "metadata", "\n", "\n", "image", "=", "np", ".", "rot90", "(", "image", ")", "\n", "\n", "kspace", "=", "self", ".", "fft2c", "(", "image", ")", ".", "astype", "(", "np", ".", "complex64", ")", "\n", "target", "=", "image", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n", "if", "self", ".", "transform", "is", "None", ":", "\n", "            ", "sample", "=", "(", "kspace", ",", "mask", ",", "target", ",", "attrs", ",", "fname_nii", ",", "slice_idx", ")", "\n", "", "else", ":", "\n", "            ", "sample", "=", "self", ".", "transform", "(", "kspace", ",", "mask", ",", "target", ",", "attrs", ",", "fname_nii", ",", "slice_idx", ")", "\n", "\n", "", "return", "sample", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data_ki.fastmri.JiangSudataset.crop_toshape": [[452, 460], ["int"], "methods", ["None"], ["", "def", "crop_toshape", "(", "self", ",", "kspace_cplx", ")", ":", "\n", "        ", "if", "kspace_cplx", ".", "shape", "[", "1", "]", "==", "self", ".", "img_size", ":", "\n", "            ", "return", "kspace_cplx", "\n", "", "if", "kspace_cplx", ".", "shape", "[", "0", "]", "%", "2", "==", "1", ":", "\n", "            ", "kspace_cplx", "=", "kspace_cplx", "[", ":", "-", "1", ",", ":", "-", "1", "]", "\n", "", "crop", "=", "int", "(", "(", "kspace_cplx", ".", "shape", "[", "0", "]", "-", "self", ".", "img_size", ")", "/", "2", ")", "\n", "kspace_cplx", "=", "kspace_cplx", "[", "crop", ":", "-", "crop", ",", "crop", ":", "-", "crop", "]", "\n", "return", "kspace_cplx", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data_ki.fastmri.JiangSudataset.fft2c": [[461, 463], ["numpy.fft.fftshift", "numpy.fft.fft2", "numpy.fft.ifftshift"], "methods", ["home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.math.fftshift", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.dicom_mix.fft2", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.math.ifftshift"], ["", "def", "fft2c", "(", "self", ",", "img", ")", ":", "\n", "        ", "return", "np", ".", "fft", ".", "fftshift", "(", "np", ".", "fft", ".", "fft2", "(", "np", ".", "fft", ".", "ifftshift", "(", "img", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data_ki.fastmri.JiangSudataset.ifft2c": [[464, 466], ["numpy.fft.fftshift", "numpy.fft.ifft2", "numpy.fft.ifftshift"], "methods", ["home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.math.fftshift", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.fastmri.JiangSudataset.ifft2", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.math.ifftshift"], ["", "def", "ifft2c", "(", "self", ",", "img", ")", ":", "\n", "        ", "return", "np", ".", "fft", ".", "fftshift", "(", "np", ".", "fft", ".", "ifft2", "(", "np", ".", "fft", ".", "ifftshift", "(", "img", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data_ki.fastmri.JiangSudataset.fft2": [[467, 469], ["numpy.fft.fftshift", "numpy.fft.fft2"], "methods", ["home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.math.fftshift", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.dicom_mix.fft2"], ["", "def", "fft2", "(", "self", ",", "img", ")", ":", "\n", "        ", "return", "np", ".", "fft", ".", "fftshift", "(", "np", ".", "fft", ".", "fft2", "(", "img", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data_ki.fastmri.JiangSudataset.ifft2": [[470, 472], ["numpy.absolute", "numpy.fft.ifft2"], "methods", ["home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.fastmri.JiangSudataset.ifft2"], ["", "def", "ifft2", "(", "self", ",", "kspace_cplx", ")", ":", "\n", "        ", "return", "np", ".", "absolute", "(", "np", ".", "fft", ".", "ifft2", "(", "kspace_cplx", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data_ki.fastmri.JiangSudataset.niipath2matpath": [[473, 482], ["os.path.split", "os.path.split", "os.path.join", "os.path.splitext", "os.path.join"], "methods", ["None"], ["", "def", "niipath2matpath", "(", "self", ",", "T1", ",", "slice_id", ")", ":", "\n", "        ", "filedir", ",", "filename", "=", "path", ".", "split", "(", "T1", ")", "\n", "filedir", ",", "_", "=", "path", ".", "split", "(", "filedir", ")", "\n", "mat_dir", "=", "path", ".", "join", "(", "filedir", ",", "'mat320'", ")", "\n", "basename", ",", "ext", "=", "path", ".", "splitext", "(", "filename", ")", "\n", "base_name", "=", "basename", "[", ":", "-", "1", "]", "\n", "file_name", "=", "'%s-%03d.mat'", "%", "(", "base_name", ",", "slice_id", ")", "\n", "T1_file_path", "=", "path", ".", "join", "(", "mat_dir", ",", "file_name", ")", "\n", "return", "T1_file_path", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data_ki.fastmri.JiangSudataset.center_crop": [[483, 491], ["None"], "methods", ["None"], ["", "def", "center_crop", "(", "self", ",", "data", ",", "shape", ")", ":", "\n", "        ", "assert", "0", "<", "shape", "[", "0", "]", "<=", "data", ".", "shape", "[", "-", "2", "]", ",", "'Error: shape: {}, data.shape: {}'", ".", "format", "(", "shape", ",", "data", ".", "shape", ")", "#556...556", "\n", "assert", "0", "<", "shape", "[", "1", "]", "<=", "data", ".", "shape", "[", "-", "1", "]", "#640...640", "\n", "w_from", "=", "(", "data", ".", "shape", "[", "-", "2", "]", "-", "shape", "[", "0", "]", ")", "//", "2", "\n", "h_from", "=", "(", "data", ".", "shape", "[", "-", "1", "]", "-", "shape", "[", "1", "]", ")", "//", "2", "\n", "w_to", "=", "w_from", "+", "shape", "[", "0", "]", "\n", "h_to", "=", "h_from", "+", "shape", "[", "1", "]", "\n", "return", "data", "[", "...", ",", "w_from", ":", "w_to", ",", "h_from", ":", "h_to", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data_ki.fastmri.SliceDataset.__init__": [[494, 552], ["ValueError", "os.path.join", "open", "csv.reader", "random.shuffle", "round", "os.path.join", "fastmri.SliceDataset._retrieve_metadata", "range", "fastmri.SliceDataset._retrieve_metadata", "fastmri.SliceDataset._retrieve_metadata", "range", "len", "os.path.join", "fastmri.SliceDataset.examples.append", "os.path.join", "os.path.join", "min", "fastmri.SliceDataset.examples.append", "fastmri.SliceDataset.examples.append", "os.path.join", "os.path.join", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.fastmri.SliceDataset._retrieve_metadata", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.fastmri.SliceDataset._retrieve_metadata", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.fastmri.SliceDataset._retrieve_metadata"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "root", ",", "\n", "transform", ",", "\n", "challenge", ",", "\n", "sample_rate", "=", "1", ",", "\n", "mode", "=", "'train'", ",", "\n", "pattern", "=", "'pd'", ",", "\n", ")", ":", "\n", "\n", "# challenge", "\n", "        ", "if", "challenge", "not", "in", "(", "\"singlecoil\"", ",", "\"multicoil\"", ")", ":", "\n", "            ", "raise", "ValueError", "(", "'challenge should be either \"singlecoil\" or \"multicoil\"'", ")", "\n", "", "self", ".", "recons_key", "=", "(", "\n", "\"reconstruction_esc\"", "if", "challenge", "==", "\"singlecoil\"", "else", "\"reconstruction_rss\"", "\n", ")", "\n", "# transform", "\n", "self", ".", "transform", "=", "transform", "\n", "\n", "self", ".", "examples", "=", "[", "]", "\n", "\n", "self", ".", "cur_path", "=", "root", "\n", "if", "pattern", "==", "'mix0'", "or", "pattern", "==", "'mix1'", ":", "\n", "            ", "self", ".", "csv_file", "=", "os", ".", "path", ".", "join", "(", "self", ".", "cur_path", ",", "\"singlecoil_\"", "+", "mode", "+", "\"_mixsplit_less.csv\"", ")", "\n", "", "elif", "pattern", "==", "'pd'", "or", "pattern", "==", "'pdfs'", "or", "pattern", "==", "'pd+pdfs'", ":", "\n", "            ", "self", ".", "csv_file", "=", "os", ".", "path", ".", "join", "(", "self", ".", "cur_path", ",", "\"singlecoil_\"", "+", "mode", "+", "\"_split_less.csv\"", ")", "\n", "# \u8bfb\u53d6CSV", "\n", "", "with", "open", "(", "self", ".", "csv_file", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "reader", "=", "csv", ".", "reader", "(", "f", ")", "\n", "\n", "for", "row", "in", "reader", ":", "\n", "                ", "if", "not", "pattern", "==", "'pd+pdfs'", ":", "\n", "                    ", "if", "pattern", "==", "'pd'", "or", "pattern", "==", "'mix0'", ":", "\n", "                        ", "idx", "=", "0", "\n", "", "elif", "pattern", "==", "'pdfs'", "or", "pattern", "==", "'mix1'", ":", "\n", "                        ", "idx", "=", "1", "\n", "\n", "", "metadata", ",", "num_slices", "=", "self", ".", "_retrieve_metadata", "(", "os", ".", "path", ".", "join", "(", "self", ".", "cur_path", ",", "row", "[", "idx", "]", "+", "'.h5'", ")", ")", "\n", "\n", "for", "slice_id", "in", "range", "(", "num_slices", ")", ":", "\n", "                        ", "self", ".", "examples", ".", "append", "(", "(", "os", ".", "path", ".", "join", "(", "self", ".", "cur_path", ",", "row", "[", "idx", "]", "+", "'.h5'", ")", ",", "slice_id", ",", "metadata", ")", ")", "\n", "\n", "", "", "else", ":", "\n", "                    ", "pd_metadata", ",", "pd_num_slices", "=", "self", ".", "_retrieve_metadata", "(", "os", ".", "path", ".", "join", "(", "self", ".", "cur_path", ",", "row", "[", "0", "]", "+", "'.h5'", ")", ")", "\n", "\n", "pdfs_metadata", ",", "pdfs_num_slices", "=", "self", ".", "_retrieve_metadata", "(", "os", ".", "path", ".", "join", "(", "self", ".", "cur_path", ",", "row", "[", "1", "]", "+", "'.h5'", ")", ")", "\n", "\n", "for", "slice_id", "in", "range", "(", "min", "(", "pd_num_slices", ",", "pdfs_num_slices", ")", ")", ":", "\n", "                        ", "self", ".", "examples", ".", "append", "(", "\n", "(", "os", ".", "path", ".", "join", "(", "self", ".", "cur_path", ",", "row", "[", "0", "]", "+", "'.h5'", ")", ",", "slice_id", ",", "pd_metadata", ")", ")", "\n", "self", ".", "examples", ".", "append", "(", "\n", "(", "os", ".", "path", ".", "join", "(", "self", ".", "cur_path", ",", "row", "[", "1", "]", "+", "'.h5'", ")", ",", "slice_id", ",", "pdfs_metadata", ")", ")", "\n", "\n", "", "", "", "", "if", "sample_rate", "<", "1", ":", "\n", "            ", "random", ".", "shuffle", "(", "self", ".", "examples", ")", "\n", "num_examples", "=", "round", "(", "len", "(", "self", ".", "examples", ")", "*", "sample_rate", ")", "\n", "\n", "self", ".", "examples", "=", "self", ".", "examples", "[", "0", ":", "num_examples", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data_ki.fastmri.SliceDataset.__len__": [[553, 555], ["len"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "examples", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data_ki.fastmri.SliceDataset.__getitem__": [[556, 578], ["h5py.File", "dict", "dict.update", "fastmri.SliceDataset.transform", "numpy.asarray"], "methods", ["home.repos.pwc.inspect_result.chunmeifeng_fedmri.util.metric.AverageMeter.update"], ["", "def", "__getitem__", "(", "self", ",", "i", ")", ":", "\n", "\n", "# \u8bfb\u53d6pd", "\n", "        ", "fname", ",", "slice", ",", "metadata", "=", "self", ".", "examples", "[", "i", "]", "\n", "\n", "with", "h5py", ".", "File", "(", "fname", ",", "\"r\"", ")", "as", "hf", ":", "\n", "            ", "kspace", "=", "hf", "[", "\"kspace\"", "]", "[", "slice", "]", "\n", "\n", "mask", "=", "np", ".", "asarray", "(", "hf", "[", "\"mask\"", "]", ")", "if", "\"mask\"", "in", "hf", "else", "None", "\n", "\n", "target", "=", "hf", "[", "self", ".", "recons_key", "]", "[", "slice", "]", "if", "self", ".", "recons_key", "in", "hf", "else", "None", "\n", "\n", "attrs", "=", "dict", "(", "hf", ".", "attrs", ")", "\n", "\n", "attrs", ".", "update", "(", "metadata", ")", "\n", "\n", "", "if", "self", ".", "transform", "is", "None", ":", "\n", "            ", "sample", "=", "(", "kspace", ",", "mask", ",", "target", ",", "attrs", ",", "fname", ",", "slice", ")", "\n", "", "else", ":", "\n", "            ", "sample", "=", "self", ".", "transform", "(", "kspace", ",", "mask", ",", "target", ",", "attrs", ",", "fname", ",", "slice", ")", "\n", "\n", "", "return", "sample", "# image, target, mean, std, fname, slice_num", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data_ki.fastmri.SliceDataset._retrieve_metadata": [[579, 613], ["h5py.File", "xml.fromstring", "int", "int", "int", "int", "int", "int", "int", "fastmri.et_query", "int", "fastmri.et_query", "fastmri.et_query", "fastmri.et_query", "fastmri.et_query", "fastmri.et_query", "fastmri.et_query", "fastmri.et_query"], "methods", ["home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.fastmri.et_query", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.fastmri.et_query", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.fastmri.et_query", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.fastmri.et_query", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.fastmri.et_query", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.fastmri.et_query", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.fastmri.et_query", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.fastmri.et_query"], ["", "def", "_retrieve_metadata", "(", "self", ",", "fname", ")", ":", "\n", "        ", "with", "h5py", ".", "File", "(", "fname", ",", "\"r\"", ")", "as", "hf", ":", "\n", "            ", "et_root", "=", "etree", ".", "fromstring", "(", "hf", "[", "\"ismrmrd_header\"", "]", "[", "(", ")", "]", ")", "\n", "\n", "enc", "=", "[", "\"encoding\"", ",", "\"encodedSpace\"", ",", "\"matrixSize\"", "]", "\n", "enc_size", "=", "(", "\n", "int", "(", "et_query", "(", "et_root", ",", "enc", "+", "[", "\"x\"", "]", ")", ")", ",", "\n", "int", "(", "et_query", "(", "et_root", ",", "enc", "+", "[", "\"y\"", "]", ")", ")", ",", "\n", "int", "(", "et_query", "(", "et_root", ",", "enc", "+", "[", "\"z\"", "]", ")", ")", ",", "\n", ")", "\n", "rec", "=", "[", "\"encoding\"", ",", "\"reconSpace\"", ",", "\"matrixSize\"", "]", "\n", "recon_size", "=", "(", "\n", "int", "(", "et_query", "(", "et_root", ",", "rec", "+", "[", "\"x\"", "]", ")", ")", ",", "\n", "int", "(", "et_query", "(", "et_root", ",", "rec", "+", "[", "\"y\"", "]", ")", ")", ",", "\n", "int", "(", "et_query", "(", "et_root", ",", "rec", "+", "[", "\"z\"", "]", ")", ")", ",", "\n", ")", "\n", "\n", "lims", "=", "[", "\"encoding\"", ",", "\"encodingLimits\"", ",", "\"kspace_encoding_step_1\"", "]", "\n", "enc_limits_center", "=", "int", "(", "et_query", "(", "et_root", ",", "lims", "+", "[", "\"center\"", "]", ")", ")", "\n", "enc_limits_max", "=", "int", "(", "et_query", "(", "et_root", ",", "lims", "+", "[", "\"maximum\"", "]", ")", ")", "+", "1", "\n", "\n", "padding_left", "=", "enc_size", "[", "1", "]", "//", "2", "-", "enc_limits_center", "\n", "padding_right", "=", "padding_left", "+", "enc_limits_max", "\n", "\n", "num_slices", "=", "hf", "[", "\"kspace\"", "]", ".", "shape", "[", "0", "]", "\n", "\n", "", "metadata", "=", "{", "\n", "\"padding_left\"", ":", "padding_left", ",", "\n", "\"padding_right\"", ":", "padding_right", ",", "\n", "\"encoding_size\"", ":", "enc_size", ",", "\n", "\"recon_size\"", ":", "recon_size", ",", "\n", "}", "\n", "\n", "return", "metadata", ",", "num_slices", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data_ki.fastmri.imshow": [[32, 43], ["matplotlib.figure", "matplotlib.axis", "matplotlib.title", "matplotlib.imsave", "print", "numpy.abs"], "function", ["None"], ["def", "imshow", "(", "img", ",", "title", "=", "\"\"", ")", ":", "\n", "    ", "\"\"\" Show image as grayscale. \"\"\"", "\n", "if", "img", ".", "dtype", "==", "np", ".", "complex64", "or", "img", ".", "dtype", "==", "np", ".", "complex128", ":", "\n", "        ", "print", "(", "'img is complex! Take absolute value.'", ")", "\n", "img", "=", "np", ".", "abs", "(", "img", ")", "\n", "\n", "", "plt", ".", "figure", "(", ")", "\n", "# plt.imshow(img, cmap='gray', interpolation='nearest')", "\n", "plt", ".", "axis", "(", "'off'", ")", "\n", "plt", ".", "title", "(", "title", ")", "\n", "plt", ".", "imsave", "(", "'{}.png'", ".", "format", "(", "title", ")", ",", "img", ",", "cmap", "=", "'gray'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data_ki.fastmri.norm": [[44, 47], ["data.min", "data.max", "data.min"], "function", ["home.repos.pwc.inspect_result.chunmeifeng_fedmri.util.misc.SmoothedValue.max"], ["", "def", "norm", "(", "data", ",", "eps", "=", "1e-11", ")", ":", "\n", "    ", "data", "=", "(", "data", "-", "data", ".", "min", "(", ")", ")", "/", "(", "data", ".", "max", "(", ")", "-", "data", ".", "min", "(", ")", "+", "eps", ")", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data_ki.fastmri.fetch_dir": [[48, 84], ["pathlib.Path", "pathlib.Path", "data_config_file.is_file", "dict", "ValueError", "open", "pathlib.Path.exists", "ValueError", "open", "yaml.dump", "yaml.safe_load"], "function", ["None"], ["", "def", "fetch_dir", "(", "key", ",", "data_config_file", "=", "pathlib", ".", "Path", "(", "\"fastmri_dirs.yaml\"", ")", ")", ":", "\n", "    ", "\"\"\"\n    Data directory fetcher.\n\n    This is a brute-force simple way to configure data directories for a\n    project. Simply overwrite the variables for `knee_path` and `brain_path`\n    and this function will retrieve the requested subsplit of the data for use.\n\n    Args:\n        key (str): key to retrieve path from data_config_file.\n        data_config_file (pathlib.Path,\n            default=pathlib.Path(\"fastmri_dirs.yaml\")): Default path config\n            file.\n\n    Returns:\n        pathlib.Path: The path to the specified directory.\n    \"\"\"", "\n", "if", "not", "data_config_file", ".", "is_file", "(", ")", ":", "\n", "        ", "default_config", "=", "dict", "(", "\n", "knee_path", "=", "\"/home/jc3/Data/\"", ",", "\n", "brain_path", "=", "\"/home/jc3/Data/\"", ",", "\n", ")", "\n", "with", "open", "(", "data_config_file", ",", "\"w\"", ")", "as", "f", ":", "\n", "            ", "yaml", ".", "dump", "(", "default_config", ",", "f", ")", "\n", "\n", "", "raise", "ValueError", "(", "f\"Please populate {data_config_file} with directory paths.\"", ")", "\n", "\n", "", "with", "open", "(", "data_config_file", ",", "\"r\"", ")", "as", "f", ":", "\n", "        ", "data_dir", "=", "yaml", ".", "safe_load", "(", "f", ")", "[", "key", "]", "\n", "\n", "", "data_dir", "=", "pathlib", ".", "Path", "(", "data_dir", ")", "\n", "\n", "if", "not", "data_dir", ".", "exists", "(", ")", ":", "\n", "        ", "raise", "ValueError", "(", "f\"Path {data_dir} from {data_config_file} does not exist.\"", ")", "\n", "\n", "", "return", "data_dir", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data_ki.fastmri.et_query": [[86, 116], ["root.find", "str", "RuntimeError"], "function", ["None"], ["", "def", "et_query", "(", "\n", "root", ":", "etree", ".", "Element", ",", "\n", "qlist", ":", "Sequence", "[", "str", "]", ",", "\n", "namespace", ":", "str", "=", "\"http://www.ismrm.org/ISMRMRD\"", ",", "\n", ")", "->", "str", ":", "\n", "    ", "\"\"\"\n    ElementTree query function.\n    This can be used to query an xml document via ElementTree. It uses qlist\n    for nested queries.\n    Args:\n        root: Root of the xml to search through.\n        qlist: A list of strings for nested searches, e.g. [\"Encoding\",\n            \"matrixSize\"]\n        namespace: Optional; xml namespace to prepend query.\n    Returns:\n        The retrieved data as a string.\n    \"\"\"", "\n", "s", "=", "\".\"", "\n", "prefix", "=", "\"ismrmrd_namespace\"", "\n", "\n", "ns", "=", "{", "prefix", ":", "namespace", "}", "\n", "\n", "for", "el", "in", "qlist", ":", "\n", "        ", "s", "=", "s", "+", "f\"//{prefix}:{el}\"", "\n", "\n", "", "value", "=", "root", ".", "find", "(", "s", ",", "ns", ")", "\n", "if", "value", "is", "None", ":", "\n", "        ", "raise", "RuntimeError", "(", "\"Element not found\"", ")", "\n", "\n", "", "return", "str", "(", "value", ".", "text", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data_ki.fastmri.create_datasets": [[616, 656], ["transforms.build_transforms", "os.path.join", "fastmri.JiangSudataset", "open", "yaml.load", "types.SimpleNamespace", "os.path.join", "os.path.join", "fastmri.LianYingdataset", "client_name.lower", "open", "yaml.load", "types.SimpleNamespace", "os.path.join", "os.path.join", "fastmri.IXIdataset", "client_name.lower", "open", "yaml.load", "types.SimpleNamespace", "os.path.join", "client_name.find", "os.path.join", "fastmri.IXIdataset", "fastmri.SliceDataset", "client_name.lower", "open", "yaml.load", "types.SimpleNamespace", "os.path.join", "os.path.join", "[].lower", "client_name.split"], "function", ["home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.transforms.build_transforms"], ["", "", "def", "create_datasets", "(", "args", ",", "mode", "=", "'train'", ",", "sample_rate", "=", "1", ",", "client_name", "=", "'fastMRI'", ",", "pattern", "=", "'pd'", ",", "client_num", "=", "2", ")", ":", "\n", "    ", "assert", "mode", "in", "[", "'train'", ",", "'val'", ",", "'test'", "]", ",", "'unknown mode'", "\n", "transforms", "=", "build_transforms", "(", "args", ",", "mode", ",", "client_name", "=", "client_name", ")", "\n", "\n", "\n", "if", "client_name", "==", "'JiangSu'", ":", "\n", "# path_config = os.path.join(args.DATASET.ROOT, 'JiangSu', 'config.yaml')", "\n", "        ", "path_config", "=", "os", ".", "path", ".", "join", "(", "'./config/config_{}.yaml'", ".", "format", "(", "client_name", ".", "lower", "(", ")", ")", ")", "\n", "with", "open", "(", "path_config", ")", "as", "f", ":", "\n", "            ", "data", "=", "yaml", ".", "load", "(", "f", ",", "Loader", "=", "yaml", ".", "FullLoader", ")", "\n", "ixi_args", "=", "SimpleNamespace", "(", "**", "data", ")", "\n", "", "return", "JiangSudataset", "(", "os", ".", "path", ".", "join", "(", "args", ".", "DATASET", ".", "ROOT", "[", "2", "]", ",", "'JiangSu'", ")", ",", "transforms", ",", "ixi_args", ",", "args", ".", "DATASET", ".", "CHALLENGE", ",", "\n", "sample_rate", "=", "sample_rate", ",", "mode", "=", "mode", ",", "pattern", "=", "pattern", ")", "\n", "\n", "", "elif", "client_name", "==", "'lianying'", ":", "\n", "        ", "path_config", "=", "os", ".", "path", ".", "join", "(", "'./config/config_{}.yaml'", ".", "format", "(", "client_name", ".", "lower", "(", ")", ")", ")", "\n", "with", "open", "(", "path_config", ")", "as", "f", ":", "\n", "            ", "data", "=", "yaml", ".", "load", "(", "f", ",", "Loader", "=", "yaml", ".", "FullLoader", ")", "\n", "ixi_args", "=", "SimpleNamespace", "(", "**", "data", ")", "\n", "", "return", "LianYingdataset", "(", "os", ".", "path", ".", "join", "(", "args", ".", "DATASET", ".", "ROOT", "[", "3", "]", ",", "'lianying'", ")", ",", "transforms", ",", "ixi_args", ",", "args", ".", "DATASET", ".", "CHALLENGE", ",", "\n", "sample_rate", "=", "sample_rate", ",", "mode", "=", "mode", ",", "pattern", "=", "pattern", ")", "\n", "\n", "", "elif", "client_name", "==", "'IXI'", ":", "\n", "        ", "path_config", "=", "os", ".", "path", ".", "join", "(", "'./config/config_{}.yaml'", ".", "format", "(", "client_name", ".", "lower", "(", ")", ")", ")", "\n", "with", "open", "(", "path_config", ")", "as", "f", ":", "\n", "            ", "data", "=", "yaml", ".", "load", "(", "f", ",", "Loader", "=", "yaml", ".", "FullLoader", ")", "\n", "ixi_args", "=", "SimpleNamespace", "(", "**", "data", ")", "\n", "", "return", "IXIdataset", "(", "os", ".", "path", ".", "join", "(", "args", ".", "DATASET", ".", "ROOT", ",", "ixi_args", ".", "dataset", ",", "'h5'", ",", "mode", ")", ",", "transforms", ",", "ixi_args", ",", "args", ".", "DATASET", ".", "CHALLENGE", ",", "\n", "sample_rate", "=", "sample_rate", ",", "mode", "=", "mode", ",", "pattern", "=", "pattern", ")", "\n", "\n", "", "elif", "client_name", ".", "find", "(", "'IXI_zi_'", ")", ">=", "0", ":", "\n", "        ", "path_config", "=", "os", ".", "path", ".", "join", "(", "'./config/config_{}.yaml'", ".", "format", "(", "client_name", ".", "split", "(", "'_'", ")", "[", "0", "]", ".", "lower", "(", ")", ")", ")", "\n", "with", "open", "(", "path_config", ")", "as", "f", ":", "\n", "            ", "data", "=", "yaml", ".", "load", "(", "f", ",", "Loader", "=", "yaml", ".", "FullLoader", ")", "\n", "ixi_args", "=", "SimpleNamespace", "(", "**", "data", ")", "\n", "", "return", "IXIdataset", "(", "os", ".", "path", ".", "join", "(", "args", ".", "DATASET", ".", "ROOT", ",", "ixi_args", ".", "dataset", ",", "'h5'", ",", "mode", ")", ",", "transforms", ",", "ixi_args", ",", "args", ".", "DATASET", ".", "CHALLENGE", ",", "\n", "sample_rate", "=", "sample_rate", ",", "mode", "=", "mode", ",", "pattern", "=", "pattern", ",", "client_name", "=", "client_name", ",", "client_num", "=", "client_num", ")", "\n", "", "else", ":", "\n", "        ", "return", "SliceDataset", "(", "os", ".", "path", ".", "join", "(", "args", ".", "DATASET", ".", "ROOT", ",", "client_name", ",", "'singlecoil_'", "+", "mode", ")", ",", "transforms", ",", "args", ".", "DATASET", ".", "CHALLENGE", ",", "\n", "sample_rate", "=", "sample_rate", ",", "mode", "=", "mode", ",", "pattern", "=", "pattern", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data_ki.dicom_mix.FastMRIDicom_Split.__init__": [[27, 54], ["range", "range", "open", "scipy.io.loadmat", "round", "len", "split_paths[].append", "line.strip", "range", "random.shuffle", "line.split", "paths.append", "len"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "list_file", ",", "mask", ",", "crop_size", "=", "(", "192", ",", "192", ")", ",", "client_idx", "=", "0", ",", "client_num", "=", "2", ",", "mode", "=", "'train'", ",", "sample_rate", "=", "1", ")", ":", "\n", "        ", "paths", "=", "[", "]", "\n", "with", "open", "(", "list_file", ")", "as", "f", ":", "\n", "            ", "for", "line", "in", "f", ":", "\n", "                ", "path", "=", "line", ".", "strip", "(", ")", "\n", "name", "=", "line", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "\n", "for", "slice", "in", "range", "(", "0", ",", "32", ")", ":", "\n", "                    ", "paths", ".", "append", "(", "(", "path", ",", "slice", ",", "name", ")", ")", "\n", "\n", "", "", "", "self", ".", "paths", "=", "paths", "\n", "self", ".", "crop_size", "=", "crop_size", "\n", "self", ".", "mask", "=", "loadmat", "(", "mask", "[", "client_idx", "]", ")", "[", "'mask'", "]", "\n", "\n", "if", "sample_rate", "<", "1", ":", "\n", "            ", "if", "mode", "==", "'train'", ":", "\n", "                ", "random", ".", "shuffle", "(", "paths", ")", "\n", "", "num_examples", "=", "round", "(", "len", "(", "paths", ")", "*", "sample_rate", ")", "\n", "paths", "=", "paths", "[", "0", ":", "num_examples", "]", "\n", "\n", "", "split_paths", "=", "{", "}", "\n", "for", "i", "in", "range", "(", "client_num", ")", ":", "\n", "            ", "split_paths", "[", "i", "]", "=", "[", "]", "\n", "\n", "", "for", "i", "in", "range", "(", "len", "(", "paths", ")", ")", ":", "\n", "            ", "split_paths", "[", "i", "%", "client_num", "]", ".", "append", "(", "paths", "[", "i", "]", ")", "\n", "\n", "", "self", ".", "examples", "=", "split_paths", "[", "client_idx", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data_ki.dicom_mix.FastMRIDicom_Split.__getitem__": [[56, 78], ["os.path.join", "img_path.replace.replace.replace", "dicom_mix.fft2", "transforms.center_crop", "abs", "abs", "transforms.normalize_instance", "transforms.normalize", "torch.from_numpy().float", "torch.from_numpy().float", "scipy.io.loadmat", "numpy.fft.ifft2", "numpy.fft.ifft2", "str", "torch.from_numpy", "torch.from_numpy"], "methods", ["home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.dicom_mix.fft2", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.fastmri.JiangSudataset.center_crop", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.transforms.normalize_instance", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.transforms.normalize", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.fastmri.JiangSudataset.ifft2", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.fastmri.JiangSudataset.ifft2"], ["", "def", "__getitem__", "(", "self", ",", "item", ")", ":", "\n", "        ", "path", ",", "slice", ",", "fname", "=", "self", ".", "examples", "[", "item", "]", "\n", "\n", "img_path", "=", "os", ".", "path", ".", "join", "(", "path", ",", "str", "(", "slice", ")", "+", "'.mat'", ")", "\n", "img_path", "=", "img_path", ".", "replace", "(", "'fastMRI_brain_DICOM'", ",", "'fastMRI_brain_DICOM_mat'", ")", "\n", "img", "=", "loadmat", "(", "img_path", ")", "[", "'img'", "]", "\n", "\n", "\n", "kspace", "=", "fft2", "(", "img", ")", "\n", "kspace", "=", "center_crop", "(", "kspace", ",", "self", ".", "crop_size", ")", "\n", "maskedkspace", "=", "kspace", "*", "self", ".", "mask", "\n", "\n", "subsample", "=", "abs", "(", "np", ".", "fft", ".", "ifft2", "(", "maskedkspace", ")", ")", "\n", "target", "=", "abs", "(", "np", ".", "fft", ".", "ifft2", "(", "kspace", ")", ")", "\n", "\n", "subsample", ",", "mean", ",", "std", "=", "normalize_instance", "(", "subsample", ",", "eps", "=", "1e-11", ")", "\n", "target", "=", "normalize", "(", "target", ",", "mean", ",", "std", ",", "eps", "=", "1e-11", ")", "\n", "\n", "subsample", "=", "torch", ".", "from_numpy", "(", "subsample", ")", ".", "float", "(", ")", "\n", "target", "=", "torch", ".", "from_numpy", "(", "target", ")", ".", "float", "(", ")", "\n", "\n", "return", "subsample", ",", "target", ",", "mean", ",", "std", ",", "fname", ",", "slice", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data_ki.dicom_mix.FastMRIDicom_Split.__len__": [[79, 81], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "examples", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data_ki.dicom_mix.FastMRIDicom_Split.collate": [[82, 84], ["torch.cat", "zip"], "methods", ["None"], ["", "def", "collate", "(", "self", ",", "batch", ")", ":", "\n", "        ", "return", "[", "torch", ".", "cat", "(", "v", ")", "for", "v", "in", "zip", "(", "*", "batch", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data_ki.dicom_mix.FastMRIDicom.__init__": [[86, 105], ["open", "scipy.io.loadmat", "round", "line.strip", "range", "random.shuffle", "line.strip().split", "paths.append", "len", "line.strip"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "list_file", ",", "mask", ",", "crop_size", "=", "(", "192", ",", "192", ")", ",", "mode", "=", "'train'", ",", "sample_rate", "=", "1", ")", ":", "\n", "        ", "paths", "=", "[", "]", "\n", "with", "open", "(", "list_file", ")", "as", "f", ":", "\n", "            ", "for", "line", "in", "f", ":", "\n", "                ", "path", "=", "line", ".", "strip", "(", ")", "\n", "name", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "\n", "for", "slice", "in", "range", "(", "0", ",", "32", ")", ":", "\n", "                    ", "paths", ".", "append", "(", "(", "path", ",", "slice", ",", "name", ")", ")", "\n", "\n", "", "", "", "self", ".", "crop_size", "=", "crop_size", "\n", "self", ".", "mask", "=", "loadmat", "(", "mask", ")", "[", "'mask'", "]", "\n", "\n", "if", "sample_rate", "<", "1", ":", "\n", "            ", "if", "mode", "==", "'train'", ":", "\n", "                ", "random", ".", "shuffle", "(", "paths", ")", "\n", "", "num_examples", "=", "round", "(", "len", "(", "paths", ")", "*", "sample_rate", ")", "\n", "self", ".", "examples", "=", "paths", "[", "0", ":", "num_examples", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "examples", "=", "paths", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data_ki.dicom_mix.FastMRIDicom.__getitem__": [[106, 130], ["os.path.join", "img_path.replace.replace.replace", "dicom_mix.fft2", "transforms.center_crop", "data.transforms.to_tensor", "math.complex_abs", "data.transforms.to_tensor", "math.complex_abs", "transforms.normalize_instance", "transforms.normalize", "maskedkspace.float.float.float", "target.float.float.float", "scipy.io.loadmat", "math.ifft2c", "math.ifft2c", "str"], "methods", ["home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.dicom_mix.fft2", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.fastmri.JiangSudataset.center_crop", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.transforms.to_tensor", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.math.complex_abs", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.transforms.to_tensor", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.math.complex_abs", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.transforms.normalize_instance", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.transforms.normalize", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.fastmri.JiangSudataset.ifft2c", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.fastmri.JiangSudataset.ifft2c"], ["", "", "def", "__getitem__", "(", "self", ",", "item", ")", ":", "\n", "        ", "path", ",", "slice", ",", "fname", "=", "self", ".", "examples", "[", "item", "]", "\n", "img_path", "=", "os", ".", "path", ".", "join", "(", "path", ",", "str", "(", "slice", ")", "+", "'.mat'", ")", "\n", "img_path", "=", "img_path", ".", "replace", "(", "'fastMRI_brain_DICOM'", ",", "'fastMRI_brain_DICOM_mat'", ")", "\n", "img", "=", "loadmat", "(", "img_path", ")", "[", "'img'", "]", "\n", "\n", "kspace", "=", "fft2", "(", "img", ")", "\n", "kspace", "=", "center_crop", "(", "kspace", ",", "self", ".", "crop_size", ")", "\n", "maskedkspace", "=", "kspace", "*", "self", ".", "mask", "\n", "\n", "maskedkspace", "=", "to_tensor", "(", "maskedkspace", ")", "\n", "\n", "subsample", "=", "complex_abs", "(", "ifft2c", "(", "maskedkspace", ")", ")", "\n", "\n", "kspace", "=", "to_tensor", "(", "kspace", ")", "\n", "target", "=", "complex_abs", "(", "ifft2c", "(", "kspace", ")", ")", "\n", "\n", "subsample", ",", "mean", ",", "std", "=", "normalize_instance", "(", "subsample", ",", "eps", "=", "1e-11", ")", "\n", "target", "=", "normalize", "(", "target", ",", "mean", ",", "std", ",", "eps", "=", "1e-11", ")", "\n", "\n", "maskedkspace", "=", "maskedkspace", ".", "float", "(", ")", "\n", "target", "=", "target", ".", "float", "(", ")", "\n", "\n", "return", "maskedkspace", ",", "self", ".", "mask", ",", "target", ",", "mean", ",", "std", ",", "fname", ",", "slice", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data_ki.dicom_mix.FastMRIDicom.__len__": [[131, 133], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "examples", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data_ki.dicom_mix.FastMRIDicom.collate": [[134, 136], ["torch.cat", "zip"], "methods", ["None"], ["", "def", "collate", "(", "self", ",", "batch", ")", ":", "\n", "        ", "return", "[", "torch", ".", "cat", "(", "v", ")", "for", "v", "in", "zip", "(", "*", "batch", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data_ki.dicom_mix.fft2": [[13, 15], ["numpy.fft.fftshift", "numpy.fft.fft2", "numpy.fft.ifftshift"], "function", ["home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.math.fftshift", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.dicom_mix.fft2", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.math.ifftshift"], ["def", "fft2", "(", "img", ")", ":", "\n", "    ", "return", "np", ".", "fft", ".", "fftshift", "(", "np", ".", "fft", ".", "fft2", "(", "np", ".", "fft", ".", "ifftshift", "(", "img", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data_ki.dicom_mix.load_scan": [[16, 19], ["pydicom.read_file", "os.listdir"], "function", ["None"], ["", "def", "load_scan", "(", "path", ")", ":", "\n", "    ", "slices", "=", "[", "pydicom", ".", "read_file", "(", "path", "+", "'/'", "+", "s", ")", "for", "s", "in", "os", ".", "listdir", "(", "path", ")", "]", "\n", "return", "slices", "\n", "", "def", "vis_img", "(", "img", ",", "fname", ",", "ftype", ",", "output_dir", ")", ":", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data_ki.dicom_mix.vis_img": [[19, 26], ["os.makedirs", "matplotlib.pyplot.figure", "matplotlib.pyplot.imshow", "os.path.join", "matplotlib.pyplot.savefig"], "function", ["home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.fastmri.imshow"], ["", "def", "vis_img", "(", "img", ",", "fname", ",", "ftype", ",", "output_dir", ")", ":", "\n", "    ", "os", ".", "makedirs", "(", "output_dir", ",", "exist_ok", "=", "True", ")", "\n", "plt", ".", "figure", "(", ")", "\n", "plt", ".", "imshow", "(", "img", ",", "cmap", "=", "'gray'", ")", "\n", "figname", "=", "fname", "+", "'_'", "+", "ftype", "+", "'.png'", "\n", "figpath", "=", "os", ".", "path", ".", "join", "(", "output_dir", ",", "figname", ")", "\n", "plt", ".", "savefig", "(", "figpath", ")", "\n", "", "class", "FastMRIDicom_Split", "(", "Dataset", ")", ":", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data_ki.dicom_mix.build_fastmri_dataset": [[137, 145], ["os.path.join", "dicom_mix.FastMRIDicom", "os.path.join", "os.path.join"], "function", ["None"], ["", "", "def", "build_fastmri_dataset", "(", "args", ",", "mode", "=", "'train'", ")", ":", "\n", "    ", "mask", "=", "os", ".", "path", ".", "join", "(", "args", ".", "TRANSFORMS", ".", "DICOM_MASK_DIR", ",", "args", ".", "TRANSFORMS", ".", "MASK_FILE", "[", "0", "]", ")", "\n", "if", "mode", "==", "'train'", ":", "\n", "        ", "data_list", "=", "os", ".", "path", ".", "join", "(", "args", ".", "DATASET", ".", "ROOT", "[", "0", "]", ",", "'train.txt'", ")", "\n", "", "elif", "mode", "==", "'val'", ":", "\n", "        ", "data_list", "=", "os", ".", "path", ".", "join", "(", "args", ".", "DATASET", ".", "ROOT", "[", "0", "]", ",", "'valid.txt'", ")", "\n", "\n", "", "return", "FastMRIDicom", "(", "data_list", ",", "mask", ",", "mode", "=", "mode", ",", "sample_rate", "=", "args", ".", "DATASET", ".", "SAMPLE_RATE", "[", "0", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.transforms.DataTransform.__init__": [[253, 272], ["ValueError"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "which_challenge", ",", "mask_func", "=", "None", ",", "client_name", "=", "'fastMRI'", ",", "use_seed", "=", "True", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            which_challenge (str): Either \"singlecoil\" or \"multicoil\" denoting\n                the dataset.\n            mask_func (fastmri.data.subsample.MaskFunc): A function that can\n                create a mask of appropriate shape.\n            use_seed (bool): If true, this class computes a pseudo random\n                number generator seed from the filename. This ensures that the\n                same mask is used for all the slices of a given volume every\n                time.\n        \"\"\"", "\n", "if", "which_challenge", "not", "in", "(", "\"singlecoil\"", ",", "\"multicoil\"", ")", ":", "\n", "            ", "raise", "ValueError", "(", "f'Challenge should either be \"singlecoil\" or \"multicoil\"'", ")", "\n", "\n", "", "self", ".", "which_challenge", "=", "which_challenge", "\n", "self", ".", "mask_func", "=", "mask_func", "\n", "self", ".", "client_name", "=", "client_name", "\n", "self", ".", "use_seed", "=", "use_seed", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.transforms.DataTransform.__call__": [[273, 403], ["transforms.to_tensor", "transforms.apply_mask", "math.ifft2c", "transforms.complex_center_crop", "math.complex_abs", "transforms.norm", "rss.mean", "rss.std", "rss.clamp", "math.ifft2c", "transforms.complex_center_crop", "math.complex_abs", "transforms.normalize_instance", "rss.clamp", "fname.split", "fname.split", "tuple", "transforms.apply_mask", "math.fft2c", "mask.unsqueeze().repeat", "math.ifft2c", "transforms.to_tensor", "transforms.center_crop", "transforms.norm", "torch.Tensor.clamp", "torch.Tensor", "math.fft2c", "mask.unsqueeze().repeat", "math.ifft2c", "transforms.rss", "transforms.to_tensor", "transforms.center_crop", "transforms.normalize", "torch.Tensor.clamp", "torch.Tensor", "type", "type", "map", "type", "mask.unsqueeze", "mask.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.transforms.to_tensor", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.transforms.apply_mask", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.fastmri.JiangSudataset.ifft2c", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.transforms.complex_center_crop", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.math.complex_abs", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.fastmri.norm", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.fastmri.JiangSudataset.ifft2c", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.transforms.complex_center_crop", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.math.complex_abs", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.transforms.normalize_instance", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.transforms.apply_mask", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.fastmri.JiangSudataset.fft2c", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.fastmri.JiangSudataset.ifft2c", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.transforms.to_tensor", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.fastmri.JiangSudataset.center_crop", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.fastmri.norm", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.fastmri.JiangSudataset.fft2c", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.fastmri.JiangSudataset.ifft2c", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.transforms.rss", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.transforms.to_tensor", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.fastmri.JiangSudataset.center_crop", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.transforms.normalize"], ["", "def", "__call__", "(", "self", ",", "kspace", ",", "mask", ",", "target", ",", "attrs", ",", "fname", ",", "slice_num", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            kspace (numpy.array): Input k-space of shape (num_coils, rows,\n                cols, 2) for multi-coil data or (rows, cols, 2) for single coil\n                data.\n            mask (numpy.array): Mask from the test dataset.\n            target (numpy.array): Target image.\n            attrs (dict): Acquisition related information stored in the HDF5\n                object.\n            fname (str): File name.\n            slice_num (int): Serial number of the slice.\n\n        Returns:\n            (tuple): tuple containing:\n                image (torch.Tensor): Zero-filled input image.\n                target (torch.Tensor): Target image converted to a torch\n                    Tensor.\n                mean (float): Mean value used for normalization.\n                std (float): Standard deviation value used for normalization.\n                fname (str): File name.\n                slice_num (int): Serial number of the slice.\n        \"\"\"", "\n", "kspace", "=", "to_tensor", "(", "kspace", ")", "\n", "\n", "# apply mask", "\n", "\n", "# if self.mask_func:", "\n", "#     seed = None if not self.use_seed else tuple(map(ord, fname))", "\n", "#     masked_kspace, mask = apply_mask(kspace, self.mask_func, seed)", "\n", "# else:", "\n", "#     masked_kspace = kspace", "\n", "\n", "if", "type", "(", "self", ".", "mask_func", ")", ".", "__name__", "==", "'RandomMaskFunc'", "or", "type", "(", "self", ".", "mask_func", ")", ".", "__name__", "==", "'EquispacedMaskFunc'", ":", "\n", "            ", "seed", "=", "None", "if", "not", "self", ".", "use_seed", "else", "tuple", "(", "map", "(", "ord", ",", "fname", ")", ")", "\n", "masked_kspace", ",", "mask", "=", "apply_mask", "(", "kspace", ",", "self", ".", "mask_func", ",", "seed", ")", "\n", "", "elif", "type", "(", "self", ".", "mask_func", ")", ".", "__name__", "==", "'ndarray'", "and", "self", ".", "mask_func", ".", "shape", "[", "0", "]", "==", "kspace", ".", "shape", "[", "0", "]", "and", "self", ".", "mask_func", ".", "shape", "[", "1", "]", "==", "kspace", ".", "shape", "[", "1", "]", ":", "\n", "            ", "masked_kspace", ",", "mask", "=", "apply_mask", "(", "kspace", ",", "self", ".", "mask_func", ")", "\n", "", "else", ":", "\n", "            ", "masked_kspace", "=", "kspace", "\n", "mask", "=", "self", ".", "mask_func", "\n", "\n", "", "if", "self", ".", "client_name", "!=", "'fastMRI'", ":", "\n", "# inverse Fourier transform to get zero filled solution", "\n", "            ", "image", "=", "ifft2c", "(", "masked_kspace", ")", "\n", "\n", "# crop input to correct size", "\n", "if", "target", "is", "not", "None", ":", "\n", "                ", "crop_size", "=", "(", "target", ".", "shape", "[", "-", "2", "]", ",", "target", ".", "shape", "[", "-", "1", "]", ")", "\n", "", "else", ":", "\n", "                ", "crop_size", "=", "(", "attrs", "[", "\"recon_size\"", "]", "[", "0", "]", ",", "attrs", "[", "\"recon_size\"", "]", "[", "1", "]", ")", "\n", "\n", "# check for sFLAIR 203", "\n", "", "if", "image", ".", "shape", "[", "-", "2", "]", "<", "crop_size", "[", "1", "]", ":", "\n", "                ", "crop_size", "=", "(", "image", ".", "shape", "[", "-", "2", "]", ",", "image", ".", "shape", "[", "-", "2", "]", ")", "\n", "\n", "\n", "", "image", "=", "complex_center_crop", "(", "image", ",", "crop_size", ")", "\n", "\n", "# apply mask only when mask's size is less than kspace's size", "\n", "if", "kspace", ".", "shape", "[", "0", "]", ">=", "mask", ".", "shape", "[", "0", "]", "and", "kspace", ".", "shape", "[", "1", "]", ">=", "mask", ".", "shape", "[", "1", "]", ":", "\n", "                ", "cropped_kspace", "=", "fft2c", "(", "image", ")", "\n", "cropped_kspace", "=", "complex_center_crop", "(", "cropped_kspace", ",", "(", "320", ",", "320", ")", ")", "\n", "mask_matched", "=", "mask", ".", "unsqueeze", "(", "-", "1", ")", ".", "repeat", "(", "1", ",", "1", ",", "2", ")", "\n", "masked_cropped_kspace", "=", "cropped_kspace", "*", "mask_matched", "+", "0.0", "\n", "image", "=", "ifft2c", "(", "masked_cropped_kspace", ")", "\n", "\n", "# absolute value", "\n", "", "image", "=", "complex_abs", "(", "image", ")", "\n", "\n", "# normalize input", "\n", "image", "=", "norm", "(", "image", ",", "eps", "=", "1e-11", ")", "\n", "mean", "=", "image", ".", "mean", "(", ")", "\n", "std", "=", "image", ".", "std", "(", ")", "\n", "image", "=", "image", ".", "clamp", "(", "-", "6", ",", "6", ")", "\n", "\n", "# normalize target", "\n", "if", "target", "is", "not", "None", ":", "\n", "# target = to_tensor(target)", "\n", "# target = center_crop(target, crop_size)", "\n", "                ", "target", "=", "complex_abs", "(", "ifft2c", "(", "cropped_kspace", ")", ")", "\n", "target", "=", "norm", "(", "target", ",", "eps", "=", "1e-11", ")", "\n", "target", "=", "target", ".", "clamp", "(", "-", "6", ",", "6", ")", "\n", "", "else", ":", "\n", "                ", "target", "=", "torch", ".", "Tensor", "(", "[", "0", "]", ")", "\n", "\n", "\n", "\n", "", "", "else", ":", "\n", "# inverse Fourier transform to get zero filled solution", "\n", "            ", "image", "=", "ifft2c", "(", "masked_kspace", ")", "\n", "\n", "# crop input to correct size", "\n", "if", "target", "is", "not", "None", ":", "\n", "                ", "crop_size", "=", "(", "target", ".", "shape", "[", "-", "2", "]", ",", "target", ".", "shape", "[", "-", "1", "]", ")", "\n", "", "else", ":", "\n", "                ", "crop_size", "=", "(", "attrs", "[", "\"recon_size\"", "]", "[", "0", "]", ",", "attrs", "[", "\"recon_size\"", "]", "[", "1", "]", ")", "\n", "\n", "# check for sFLAIR 203", "\n", "", "if", "image", ".", "shape", "[", "-", "2", "]", "<", "crop_size", "[", "1", "]", ":", "\n", "                ", "crop_size", "=", "(", "image", ".", "shape", "[", "-", "2", "]", ",", "image", ".", "shape", "[", "-", "2", "]", ")", "\n", "\n", "", "image", "=", "complex_center_crop", "(", "image", ",", "crop_size", ")", "\n", "\n", "# apply mask only when mask's size is less than kspace's size", "\n", "if", "kspace", ".", "shape", "[", "0", "]", ">=", "mask", ".", "shape", "[", "0", "]", "and", "kspace", ".", "shape", "[", "1", "]", ">=", "mask", ".", "shape", "[", "1", "]", ":", "\n", "                ", "cropped_kspace", "=", "fft2c", "(", "image", ")", "\n", "mask_matched", "=", "mask", ".", "unsqueeze", "(", "-", "1", ")", ".", "repeat", "(", "1", ",", "1", ",", "2", ")", "\n", "masked_cropped_kspace", "=", "cropped_kspace", "*", "mask_matched", "+", "0.0", "\n", "image", "=", "ifft2c", "(", "masked_cropped_kspace", ")", "\n", "\n", "# absolute value", "\n", "", "image", "=", "complex_abs", "(", "image", ")", "\n", "\n", "# apply Root-Sum-of-Squares if multicoil data", "\n", "if", "self", ".", "which_challenge", "==", "\"multicoil\"", ":", "\n", "                ", "image", "=", "rss", "(", "image", ")", "\n", "\n", "# normalize input", "\n", "", "image", ",", "mean", ",", "std", "=", "normalize_instance", "(", "image", ",", "eps", "=", "1e-11", ")", "\n", "image", "=", "image", ".", "clamp", "(", "-", "6", ",", "6", ")", "\n", "\n", "# normalize target", "\n", "if", "target", "is", "not", "None", ":", "\n", "                ", "target", "=", "to_tensor", "(", "target", ")", "\n", "target", "=", "center_crop", "(", "target", ",", "crop_size", ")", "\n", "target", "=", "normalize", "(", "target", ",", "mean", ",", "std", ",", "eps", "=", "1e-11", ")", "\n", "target", "=", "target", ".", "clamp", "(", "-", "6", ",", "6", ")", "\n", "", "else", ":", "\n", "                ", "target", "=", "torch", ".", "Tensor", "(", "[", "0", "]", ")", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.transforms.imshow": [[20, 31], ["matplotlib.figure", "matplotlib.axis", "matplotlib.title", "matplotlib.imsave", "print", "numpy.abs"], "function", ["None"], ["def", "imshow", "(", "img", ",", "title", "=", "\"\"", ")", ":", "\n", "    ", "\"\"\" Show image as grayscale. \"\"\"", "\n", "if", "img", ".", "dtype", "==", "np", ".", "complex64", "or", "img", ".", "dtype", "==", "np", ".", "complex128", ":", "\n", "        ", "print", "(", "'img is complex! Take absolute value.'", ")", "\n", "img", "=", "np", ".", "abs", "(", "img", ")", "\n", "\n", "", "plt", ".", "figure", "(", ")", "\n", "# plt.imshow(img, cmap='gray', interpolation='nearest')", "\n", "plt", ".", "axis", "(", "'off'", ")", "\n", "plt", ".", "title", "(", "title", ")", "\n", "plt", ".", "imsave", "(", "'{}.png'", ".", "format", "(", "title", ")", ",", "img", ",", "cmap", "=", "'gray'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.transforms.rss": [[44, 58], ["torch.sqrt"], "function", ["None"], ["", "def", "rss", "(", "data", ",", "dim", "=", "0", ")", ":", "\n", "    ", "\"\"\"\n    Compute the Root Sum of Squares (RSS).\n\n    RSS is computed assuming that dim is the coil dimension.\n\n    Args:\n        data (torch.Tensor): The input tensor\n        dim (int): The dimensions along which to apply the RSS transform\n\n    Returns:\n        torch.Tensor: The RSS value.\n    \"\"\"", "\n", "return", "torch", ".", "sqrt", "(", "(", "data", "**", "2", ")", ".", "sum", "(", "dim", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.transforms.to_tensor": [[60, 77], ["numpy.iscomplexobj", "torch.from_numpy", "numpy.stack"], "function", ["None"], ["", "def", "to_tensor", "(", "data", ")", ":", "\n", "    ", "\"\"\"\n    Convert numpy array to PyTorch tensor.\n    \n    For complex arrays, the real and imaginary parts are stacked along the last\n    dimension.\n\n    Args:\n        data (np.array): Input numpy array.\n\n    Returns:\n        torch.Tensor: PyTorch version of data.\n    \"\"\"", "\n", "if", "np", ".", "iscomplexobj", "(", "data", ")", ":", "\n", "        ", "data", "=", "np", ".", "stack", "(", "(", "data", ".", "real", ",", "data", ".", "imag", ")", ",", "axis", "=", "-", "1", ")", "\n", "\n", "", "return", "torch", ".", "from_numpy", "(", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.transforms.tensor_to_complex_np": [[79, 92], ["data.numpy.numpy"], "function", ["None"], ["", "def", "tensor_to_complex_np", "(", "data", ")", ":", "\n", "    ", "\"\"\"\n    Converts a complex torch tensor to numpy array.\n\n    Args:\n        data (torch.Tensor): Input data to be converted to numpy.\n\n    Returns:\n        np.array: Complex numpy version of data.\n    \"\"\"", "\n", "data", "=", "data", ".", "numpy", "(", ")", "\n", "\n", "return", "data", "[", "...", ",", "0", "]", "+", "1j", "*", "data", "[", "...", ",", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.transforms.apply_mask": [[94, 124], ["numpy.array", "mask_func"], "function", ["None"], ["", "def", "apply_mask", "(", "data", ",", "mask_func", ",", "seed", "=", "None", ",", "padding", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Subsample given k-space by multiplying with a mask.\n\n    Args:\n        data (torch.Tensor): The input k-space data. This should have at least 3 dimensions, where\n            dimensions -3 and -2 are the spatial dimensions, and the final dimension has size\n            2 (for complex values).\n        mask_func (callable): A function that takes a shape (tuple of ints) and a random\n            number seed and returns a mask.\n        seed (int or 1-d array_like, optional): Seed for the random number generator.\n\n    Returns:\n        (tuple): tuple containing:\n            masked data (torch.Tensor): Subsampled k-space data\n            mask (torch.Tensor): The generated mask\n    \"\"\"", "\n", "shape", "=", "np", ".", "array", "(", "data", ".", "shape", ")", "\n", "shape", "[", ":", "-", "3", "]", "=", "1", "\n", "mask", "=", "mask_func", "(", "shape", ",", "seed", ")", "\n", "# if not isinstance(mask_func, np.ndarray):", "\n", "# mask = mask_func(shape, seed)", "\n", "# else: mask = mask_func", "\n", "if", "padding", "is", "not", "None", ":", "\n", "        ", "mask", "[", ":", ",", ":", ",", ":", "padding", "[", "0", "]", "]", "=", "0", "\n", "mask", "[", ":", ",", ":", ",", "padding", "[", "1", "]", ":", "]", "=", "0", "# padding value inclusive on right of zeros", "\n", "\n", "", "masked_data", "=", "data", "*", "mask", "+", "0.0", "# the + 0.0 removes the sign of the zeros", "\n", "\n", "return", "masked_data", ",", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.transforms.mask_center": [[126, 131], ["torch.zeros_like"], "function", ["None"], ["", "def", "mask_center", "(", "x", ",", "mask_from", ",", "mask_to", ")", ":", "\n", "    ", "mask", "=", "torch", ".", "zeros_like", "(", "x", ")", "\n", "mask", "[", ":", ",", ":", ",", ":", ",", "mask_from", ":", "mask_to", "]", "=", "x", "[", ":", ",", ":", ",", ":", ",", "mask_from", ":", "mask_to", "]", "\n", "\n", "return", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.transforms.center_crop": [[133, 156], ["None"], "function", ["None"], ["", "def", "center_crop", "(", "data", ",", "shape", ")", ":", "\n", "    ", "\"\"\"\n    Apply a center crop to the input real image or batch of real images.\n\n    Args:\n        data (torch.Tensor): The input tensor to be center cropped. It should\n            have at least 2 dimensions and the cropping is applied along the\n            last two dimensions.\n        shape (int, int): The output shape. The shape should be smaller than\n            the corresponding dimensions of data.\n\n    Returns:\n        torch.Tensor: The center cropped image.\n    \"\"\"", "\n", "assert", "0", "<", "shape", "[", "0", "]", "<=", "data", ".", "shape", "[", "-", "2", "]", "\n", "assert", "0", "<", "shape", "[", "1", "]", "<=", "data", ".", "shape", "[", "-", "1", "]", "\n", "\n", "w_from", "=", "(", "data", ".", "shape", "[", "-", "2", "]", "-", "shape", "[", "0", "]", ")", "//", "2", "\n", "h_from", "=", "(", "data", ".", "shape", "[", "-", "1", "]", "-", "shape", "[", "1", "]", ")", "//", "2", "\n", "w_to", "=", "w_from", "+", "shape", "[", "0", "]", "\n", "h_to", "=", "h_from", "+", "shape", "[", "1", "]", "\n", "\n", "return", "data", "[", "...", ",", "w_from", ":", "w_to", ",", "h_from", ":", "h_to", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.transforms.complex_center_crop": [[158, 182], ["None"], "function", ["None"], ["", "def", "complex_center_crop", "(", "data", ",", "shape", ")", ":", "\n", "    ", "\"\"\"\n    Apply a center crop to the input image or batch of complex images.\n\n    Args:\n        data (torch.Tensor): The complex input tensor to be center cropped. It\n            should have at least 3 dimensions and the cropping is applied along\n            dimensions -3 and -2 and the last dimensions should have a size of\n            2.\n        shape (int): The output shape. The shape should be smaller than\n            the corresponding dimensions of data.\n\n    Returns:\n        torch.Tensor: The center cropped image\n    \"\"\"", "\n", "assert", "0", "<", "shape", "[", "0", "]", "<=", "data", ".", "shape", "[", "-", "3", "]", "\n", "assert", "0", "<", "shape", "[", "1", "]", "<=", "data", ".", "shape", "[", "-", "2", "]", "\n", "\n", "w_from", "=", "(", "data", ".", "shape", "[", "-", "3", "]", "-", "shape", "[", "0", "]", ")", "//", "2", "#80", "\n", "h_from", "=", "(", "data", ".", "shape", "[", "-", "2", "]", "-", "shape", "[", "1", "]", ")", "//", "2", "#80", "\n", "w_to", "=", "w_from", "+", "shape", "[", "0", "]", "#240", "\n", "h_to", "=", "h_from", "+", "shape", "[", "1", "]", "#240", "\n", "\n", "return", "data", "[", "...", ",", "w_from", ":", "w_to", ",", "h_from", ":", "h_to", ",", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.transforms.center_crop_to_smallest": [[184, 205], ["min", "min", "transforms.center_crop", "transforms.center_crop"], "function", ["home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.fastmri.JiangSudataset.center_crop", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.fastmri.JiangSudataset.center_crop"], ["", "def", "center_crop_to_smallest", "(", "x", ",", "y", ")", ":", "\n", "    ", "\"\"\"\n    Apply a center crop on the larger image to the size of the smaller.\n\n    The minimum is taken over dim=-1 and dim=-2. If x is smaller than y at\n    dim=-1 and y is smaller than x at dim=-2, then the returned dimension will\n    be a mixture of the two.\n    \n    Args:\n        x (torch.Tensor): The first image.\n        y (torch.Tensor): The second image\n\n    Returns:\n        tuple: tuple of tensors x and y, each cropped to the minimim size.\n    \"\"\"", "\n", "smallest_width", "=", "min", "(", "x", ".", "shape", "[", "-", "1", "]", ",", "y", ".", "shape", "[", "-", "1", "]", ")", "\n", "smallest_height", "=", "min", "(", "x", ".", "shape", "[", "-", "2", "]", ",", "y", ".", "shape", "[", "-", "2", "]", ")", "\n", "x", "=", "center_crop", "(", "x", ",", "(", "smallest_height", ",", "smallest_width", ")", ")", "\n", "y", "=", "center_crop", "(", "y", ",", "(", "smallest_height", ",", "smallest_width", ")", ")", "\n", "\n", "return", "x", ",", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.transforms.norm": [[206, 209], ["data.min", "data.max", "data.min"], "function", ["home.repos.pwc.inspect_result.chunmeifeng_fedmri.util.misc.SmoothedValue.max"], ["", "def", "norm", "(", "data", ",", "eps", "=", "1e-11", ")", ":", "\n", "    ", "data", "=", "(", "data", "-", "data", ".", "min", "(", ")", ")", "/", "(", "data", ".", "max", "(", ")", "-", "data", ".", "min", "(", ")", "+", "eps", ")", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.transforms.normalize": [[210, 226], ["None"], "function", ["None"], ["", "def", "normalize", "(", "data", ",", "mean", ",", "stddev", ",", "eps", "=", "0.0", ")", ":", "\n", "    ", "\"\"\"\n    Normalize the given tensor.\n\n    Applies the formula (data - mean) / (stddev + eps).\n\n    Args:\n        data (torch.Tensor): Input data to be normalized.\n        mean (float): Mean value.\n        stddev (float): Standard deviation.\n        eps (float, default=0.0): Added to stddev to prevent dividing by zero.\n\n    Returns:\n        torch.Tensor: Normalized tensor\n    \"\"\"", "\n", "return", "(", "data", "-", "mean", ")", "/", "(", "stddev", "+", "eps", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.transforms.normalize_instance": [[228, 246], ["data.mean", "data.std", "transforms.normalize"], "function", ["home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.transforms.normalize"], ["", "def", "normalize_instance", "(", "data", ",", "eps", "=", "0.0", ")", ":", "\n", "    ", "\"\"\"\n    Normalize the given tensor  with instance norm/\n\n    Applies the formula (data - mean) / (stddev + eps), where mean and stddev\n    are computed from the data itself.\n\n    Args:\n        data (torch.Tensor): Input data to be normalized\n        eps (float): Added to stddev to prevent dividing by zero\n\n    Returns:\n        torch.Tensor: Normalized tensor\n    \"\"\"", "\n", "mean", "=", "data", ".", "mean", "(", ")", "\n", "std", "=", "data", ".", "std", "(", ")", "\n", "\n", "return", "normalize", "(", "data", ",", "mean", ",", "std", ",", "eps", ")", ",", "mean", ",", "std", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.transforms.build_transforms": [[405, 435], ["os.path.join", "transforms.DataTransform", "client_name.find", "os.path.join", "torch.from_numpy().float", "subsample.create_mask_for_mask_type", "transforms.DataTransform", "transforms.DataTransform", "scipy.io.loadmat", "torch.from_numpy().float", "subsample.create_mask_for_mask_type", "torch.from_numpy", "scipy.io.loadmat", "torch.from_numpy"], "function", ["home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.subsample.create_mask_for_mask_type", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.subsample.create_mask_for_mask_type"], ["", "", "fname", "=", "fname", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "\n", "fname", "=", "fname", ".", "split", "(", "'.'", ")", "[", "0", "]", "\n", "# from test import vis_img", "\n", "# vis_img(image, fname, 'input', 'jiangsu')", "\n", "# vis_img(target, fname, 'target', 'jiangsu')", "\n", "return", "masked_cropped_kspace", ",", "mask", ",", "target", ",", "mean", ",", "std", ",", "fname", ",", "slice_num", "\n", "\n", "\n", "", "", "def", "build_transforms", "(", "args", ",", "mode", "=", "'train'", ",", "client_name", "=", "'fastMRI'", ")", ":", "\n", "\n", "    ", "mask_size", "=", "256", "if", "client_name", ".", "find", "(", "'IXI'", ")", ">=", "0", "else", "320", "\n", "\n", "if", "client_name", "==", "'JiangSu'", ":", "\n", "        ", "mask_dir", "=", "os", ".", "path", ".", "join", "(", "args", ".", "TRANSFORMS", ".", "MASK_DIR", ",", "args", ".", "TRANSFORMS", ".", "MASK_SPEC", "[", "0", "]", "+", "'_{}.mat'", ".", "format", "(", "mask_size", ")", ")", "\n", "", "elif", "client_name", "==", "'lianying'", ":", "\n", "        ", "mask_dir", "=", "os", ".", "path", ".", "join", "(", "args", ".", "TRANSFORMS", ".", "MASK_DIR", ",", "args", ".", "TRANSFORMS", ".", "MASK_SPEC", "[", "1", "]", "+", "'_{}.mat'", ".", "format", "(", "mask_size", ")", ")", "\n", "\n", "", "if", "mode", "==", "'train'", ":", "\n", "        ", "if", "args", ".", "TRANSFORMS", ".", "MASK_SPEC", "!=", "''", ":", "\n", "            ", "mask", "=", "loadmat", "(", "mask_dir", ")", "[", "'mask'", "]", "\n", "mask", "=", "torch", ".", "from_numpy", "(", "mask", ")", ".", "float", "(", ")", "\n", "# mask = mask.float()  # or mask.to(torch.float32)", "\n", "", "else", ":", "\n", "            ", "mask", "=", "create_mask_for_mask_type", "(", "\n", "args", ".", "TRANSFORMS", ".", "MASKTYPE", ",", "args", ".", "TRANSFORMS", ".", "CENTER_FRACTIONS", ",", "args", ".", "TRANSFORMS", ".", "ACCELERATIONS", ",", "\n", ")", "\n", "", "return", "DataTransform", "(", "args", ".", "DATASET", ".", "CHALLENGE", ",", "mask", ",", "client_name", ",", "use_seed", "=", "False", ")", "\n", "", "elif", "mode", "==", "'val'", ":", "\n", "        ", "if", "args", ".", "TRANSFORMS", ".", "MASK_SPEC", "!=", "''", ":", "\n", "            ", "mask", "=", "loadmat", "(", "mask_dir", ")", "[", "'mask'", "]", "\n", "mask", "=", "torch", ".", "from_numpy", "(", "mask", ")", ".", "float", "(", ")", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.math.complex_mul": [[11, 30], ["torch.stack"], "function", ["None"], ["def", "complex_mul", "(", "x", ",", "y", ")", ":", "\n", "    ", "\"\"\"\n    Complex multiplication.\n\n    This multiplies two complex tensors assuming that they are both stored as\n    real arrays with the last dimension being the complex dimension.\n\n    Args:\n        x (torch.Tensor): A PyTorch tensor with the last dimension of size 2.\n        y (torch.Tensor): A PyTorch tensor with the last dimension of size 2.\n\n    Returns:\n        torch.Tensor: A PyTorch tensor with the last dimension of size 2.\n    \"\"\"", "\n", "assert", "x", ".", "shape", "[", "-", "1", "]", "==", "y", ".", "shape", "[", "-", "1", "]", "==", "2", "\n", "re", "=", "x", "[", "...", ",", "0", "]", "*", "y", "[", "...", ",", "0", "]", "-", "x", "[", "...", ",", "1", "]", "*", "y", "[", "...", ",", "1", "]", "\n", "im", "=", "x", "[", "...", ",", "0", "]", "*", "y", "[", "...", ",", "1", "]", "+", "x", "[", "...", ",", "1", "]", "*", "y", "[", "...", ",", "0", "]", "\n", "\n", "return", "torch", ".", "stack", "(", "(", "re", ",", "im", ")", ",", "dim", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.math.complex_conj": [[32, 49], ["torch.stack"], "function", ["None"], ["", "def", "complex_conj", "(", "x", ")", ":", "\n", "    ", "\"\"\"\n    Complex conjugate.\n\n    This applies the complex conjugate assuming that the input array has the\n    last dimension as the complex dimension.\n\n    Args:\n        x (torch.Tensor): A PyTorch tensor with the last dimension of size 2.\n        y (torch.Tensor): A PyTorch tensor with the last dimension of size 2.\n\n    Returns:\n        torch.Tensor: A PyTorch tensor with the last dimension of size 2.\n    \"\"\"", "\n", "assert", "x", ".", "shape", "[", "-", "1", "]", "==", "2", "\n", "\n", "return", "torch", ".", "stack", "(", "(", "x", "[", "...", ",", "0", "]", ",", "-", "x", "[", "...", ",", "1", "]", ")", ",", "dim", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.math.fft2c": [[51, 70], ["math.ifftshift", "torch.fft", "math.fftshift", "fftshift.size"], "function", ["home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.math.ifftshift", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.math.fftshift"], ["", "def", "fft2c", "(", "data", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "    ", "\"\"\"\n    Apply centered 2 dimensional Fast Fourier Transform.\n\n    Args:\n        data: Complex valued input data containing at least 3 dimensions:\n            dimensions -3 & -2 are spatial dimensions and dimension -1 has size\n            2. All other dimensions are assumed to be batch dimensions.\n\n    Returns:\n        The FFT of the input.\n    \"\"\"", "\n", "if", "not", "data", ".", "shape", "[", "-", "1", "]", "==", "2", ":", "\n", "        ", "raise", "ValueError", "(", "\"Tensor does not have separate complex dim.\"", ")", "\n", "\n", "", "data", "=", "ifftshift", "(", "data", ",", "dim", "=", "[", "-", "3", ",", "-", "2", "]", ")", "\n", "data", "=", "torch", ".", "view_as_real", "(", "\n", "torch", ".", "fft", ".", "fftn", "(", "# type: ignore", "\n", "torch", ".", "view_as_complex", "(", "data", ")", ",", "dim", "=", "(", "-", "2", ",", "-", "1", ")", ",", "norm", "=", "\"ortho\"", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.math.ifft2c": [[72, 91], ["math.ifftshift", "torch.ifft", "math.fftshift", "fftshift.size"], "function", ["home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.math.ifftshift", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.math.fftshift"], ["data", "=", "fftshift", "(", "data", ",", "dim", "=", "[", "-", "3", ",", "-", "2", "]", ")", "\n", "\n", "return", "data", "\n", "\n", "\n", "", "def", "ifft2c", "(", "data", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "    ", "\"\"\"\n    Apply centered 2-dimensional Inverse Fast Fourier Transform.\n\n    Args:\n        data: Complex valued input data containing at least 3 dimensions:\n            dimensions -3 & -2 are spatial dimensions and dimension -1 has size\n            2. All other dimensions are assumed to be batch dimensions.\n\n    Returns:\n        The IFFT of the input.\n    \"\"\"", "\n", "if", "not", "data", ".", "shape", "[", "-", "1", "]", "==", "2", ":", "\n", "        ", "raise", "ValueError", "(", "\"Tensor does not have separate complex dim.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.math.complex_abs": [[93, 107], ["data.size"], "function", ["None"], ["data", "=", "torch", ".", "view_as_real", "(", "\n", "torch", ".", "fft", ".", "ifftn", "(", "# type: ignore", "\n", "torch", ".", "view_as_complex", "(", "data", ")", ",", "dim", "=", "(", "-", "2", ",", "-", "1", ")", ",", "norm", "=", "\"ortho\"", "\n", ")", "\n", ")", "\n", "data", "=", "fftshift", "(", "data", ",", "dim", "=", "[", "-", "3", ",", "-", "2", "]", ")", "\n", "\n", "return", "data", "\n", "\n", "\n", "", "def", "complex_abs", "(", "data", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.math.complex_abs_numpy": [[110, 114], ["numpy.sqrt", "numpy.sum"], "function", ["None"], ["\n", "assert", "data", ".", "size", "(", "-", "1", ")", "==", "2", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.math.complex_abs_sq": [[116, 129], ["data.size"], "function", ["None"], ["return", "(", "data", "**", "2", ")", ".", "sum", "(", "dim", "=", "-", "1", ")", ".", "sqrt", "(", ")", "\n", "\n", "\n", "\n", "", "def", "complex_abs_numpy", "(", "data", ")", ":", "\n", "    ", "assert", "data", ".", "shape", "[", "-", "1", "]", "==", "2", "\n", "\n", "return", "np", ".", "sqrt", "(", "np", ".", "sum", "(", "data", "**", "2", ",", "axis", "=", "-", "1", ")", ")", "\n", "\n", "\n", "", "def", "complex_abs_sq", "(", "data", ")", ":", "#multi coil", "\n", "    "]], "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.math.roll": [[134, 157], ["isinstance", "roll.narrow", "roll.narrow", "torch.cat", "zip", "roll.size", "len", "len", "math.roll", "roll.size", "roll.size"], "function", ["home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.math.roll"], ["\n", "assert", "data", ".", "size", "(", "-", "1", ")", "==", "2", "\n", "return", "(", "data", "**", "2", ")", ".", "sum", "(", "dim", "=", "-", "1", ")", "\n", "\n", "\n", "# Helper functions", "\n", "\n", "\n", "", "def", "roll", "(", "x", ",", "shift", ",", "dim", ")", ":", "\n", "    ", "\"\"\"\n    Similar to np.roll but applies to PyTorch Tensors.\n\n    Args:\n        x (torch.Tensor): A PyTorch tensor.\n        shift (int): Amount to roll.\n        dim (int): Which dimension to roll.\n\n    Returns:\n        torch.Tensor: Rolled version of x.\n    \"\"\"", "\n", "if", "isinstance", "(", "shift", ",", "(", "tuple", ",", "list", ")", ")", ":", "\n", "        ", "assert", "len", "(", "shift", ")", "==", "len", "(", "dim", ")", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.math.fftshift": [[159, 179], ["math.roll", "tuple", "isinstance", "range", "x.dim"], "function", ["home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.math.roll"], ["            ", "x", "=", "roll", "(", "x", ",", "s", ",", "d", ")", "\n", "", "return", "x", "\n", "", "shift", "=", "shift", "%", "x", ".", "size", "(", "dim", ")", "\n", "if", "shift", "==", "0", ":", "\n", "        ", "return", "x", "\n", "", "left", "=", "x", ".", "narrow", "(", "dim", ",", "0", ",", "x", ".", "size", "(", "dim", ")", "-", "shift", ")", "\n", "right", "=", "x", ".", "narrow", "(", "dim", ",", "x", ".", "size", "(", "dim", ")", "-", "shift", ",", "shift", ")", "\n", "return", "torch", ".", "cat", "(", "(", "right", ",", "left", ")", ",", "dim", "=", "dim", ")", "\n", "\n", "\n", "", "def", "fftshift", "(", "x", ",", "dim", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Similar to np.fft.fftshift but applies to PyTorch Tensors\n\n    Args:\n        x (torch.Tensor): A PyTorch tensor.\n        dim (int): Which dimension to fftshift.\n\n    Returns:\n        torch.Tensor: fftshifted version of x.\n    \"\"\"", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.math.ifftshift": [[181, 201], ["math.roll", "tuple", "isinstance", "range", "x.dim"], "function", ["home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.math.roll"], ["        ", "dim", "=", "tuple", "(", "range", "(", "x", ".", "dim", "(", ")", ")", ")", "\n", "shift", "=", "[", "dim", "//", "2", "for", "dim", "in", "x", ".", "shape", "]", "\n", "", "elif", "isinstance", "(", "dim", ",", "int", ")", ":", "\n", "        ", "shift", "=", "x", ".", "shape", "[", "dim", "]", "//", "2", "\n", "", "else", ":", "\n", "        ", "shift", "=", "[", "x", ".", "shape", "[", "i", "]", "//", "2", "for", "i", "in", "dim", "]", "\n", "\n", "", "return", "roll", "(", "x", ",", "shift", ",", "dim", ")", "\n", "\n", "\n", "", "def", "ifftshift", "(", "x", ",", "dim", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Similar to np.fft.ifftshift but applies to PyTorch Tensors\n\n    Args:\n        x (torch.Tensor): A PyTorch tensor.\n        dim (int): Which dimension to ifftshift.\n\n    Returns:\n        torch.Tensor: ifftshifted version of x.\n    \"\"\"", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.math.tensor_to_complex_np": [[203, 214], ["data.numpy.numpy"], "function", ["None"], ["        ", "dim", "=", "tuple", "(", "range", "(", "x", ".", "dim", "(", ")", ")", ")", "\n", "shift", "=", "[", "(", "dim", "+", "1", ")", "//", "2", "for", "dim", "in", "x", ".", "shape", "]", "\n", "", "elif", "isinstance", "(", "dim", ",", "int", ")", ":", "\n", "        ", "shift", "=", "(", "x", ".", "shape", "[", "dim", "]", "+", "1", ")", "//", "2", "\n", "", "else", ":", "\n", "        ", "shift", "=", "[", "(", "x", ".", "shape", "[", "i", "]", "+", "1", ")", "//", "2", "for", "i", "in", "dim", "]", "\n", "\n", "", "return", "roll", "(", "x", ",", "shift", ",", "dim", ")", "\n", "\n", "\n", "", "def", "tensor_to_complex_np", "(", "data", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.brats_mix.BraTS.__init__": [[32, 51], ["open", "scipy.io.loadmat", "round", "line.strip.strip.strip", "os.path.join", "range", "random.shuffle", "line.strip.strip.split", "paths.append", "paths.append", "len"], "methods", ["None"], ["return", "data", "\n", "\n", "", "def", "vis_img", "(", "img", ",", "fname", ",", "ftype", ",", "output_dir", ")", ":", "\n", "    ", "os", ".", "makedirs", "(", "output_dir", ",", "exist_ok", "=", "True", ")", "\n", "plt", ".", "figure", "(", ")", "\n", "plt", ".", "imshow", "(", "img", ",", "cmap", "=", "'gray'", ")", "\n", "figname", "=", "fname", "+", "'_'", "+", "ftype", "+", "'.png'", "\n", "figpath", "=", "os", ".", "path", ".", "join", "(", "output_dir", ",", "figname", ")", "\n", "plt", ".", "savefig", "(", "figpath", ")", "\n", "\n", "", "def", "load_nii", "(", "niipath", ")", ":", "\n", "    ", "image", "=", "np", ".", "array", "(", "nib_load", "(", "niipath", ")", ",", "dtype", "=", "'float32'", ",", "order", "=", "'C'", ")", "\n", "mask", "=", "image", ">", "0", "\n", "t", "=", "image", "[", "mask", "]", "\n", "image", "[", "mask", "]", "-=", "t", ".", "mean", "(", ")", "\n", "image", "[", "mask", "]", "/=", "t", ".", "std", "(", ")", "\n", "return", "image", "\n", "\n", "", "class", "BraTS", "(", "Dataset", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "list_file", ",", "mask", ",", "root", "=", "''", ",", "mode", "=", "'train'", ",", "sample_rate", "=", "1", ")", ":", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.brats_mix.BraTS.__getitem__": [[52, 68], ["[].transpose", "brats_mix.fft2", "abs", "abs", "transforms.normalize_instance", "transforms.normalize", "torch.from_numpy().float", "torch.from_numpy().float", "numpy.fft.ifft2", "numpy.fft.ifft2", "torch.from_numpy", "torch.from_numpy", "brats_mix.load_nii"], "methods", ["home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.dicom_mix.fft2", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.transforms.normalize_instance", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.transforms.normalize", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.fastmri.JiangSudataset.ifft2", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.fastmri.JiangSudataset.ifft2", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.brats_mix.load_nii"], ["        ", "paths", "=", "[", "]", "\n", "with", "open", "(", "list_file", ")", "as", "f", ":", "\n", "            ", "for", "line", "in", "f", ":", "\n", "                ", "line", "=", "line", ".", "strip", "(", ")", "\n", "name", "=", "line", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "\n", "path", "=", "os", ".", "path", ".", "join", "(", "root", ",", "line", ",", "name", "+", "'_'", ")", "\n", "for", "slice", "in", "range", "(", "60", ")", ":", "\n", "# paths.append((path + 't1.nii.gz', slice, name + '_t1'))", "\n", "# paths.append((path + 't2.nii.gz', slice, name + '_t2'))", "\n", "                    ", "paths", ".", "append", "(", "(", "path", ",", "slice", ",", "name", "+", "'_t1'", ",", "'t1'", ")", ")", "\n", "paths", ".", "append", "(", "(", "path", ",", "slice", ",", "name", "+", "'_t2'", ",", "'t2'", ")", ")", "\n", "", "", "", "self", ".", "mask", "=", "loadmat", "(", "mask", ")", "[", "'mask'", "]", "\n", "\n", "if", "sample_rate", "<", "1", ":", "\n", "            ", "if", "mode", "==", "'train'", ":", "\n", "                ", "random", ".", "shuffle", "(", "paths", ")", "\n", "", "num_examples", "=", "round", "(", "len", "(", "paths", ")", "*", "sample_rate", ")", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.brats_mix.BraTS.__len__": [[69, 71], ["len"], "methods", ["None"], ["self", ".", "examples", "=", "paths", "[", "0", ":", "num_examples", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "examples", "=", "paths", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.brats_mix.BraTS.collate": [[72, 74], ["torch.cat", "zip"], "methods", ["None"], ["\n", "", "", "def", "__getitem__", "(", "self", ",", "item", ")", ":", "\n", "        ", "path", ",", "slice", ",", "fname", ",", "modal", "=", "self", ".", "examples", "[", "item", "]", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.brats_mix.fft2": [[11, 13], ["numpy.fft.fftshift", "numpy.fft.fft2"], "function", ["home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.math.fftshift", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.dicom_mix.fft2"], ["import", "pickle", "\n", "from", "matplotlib", "import", "pyplot", "as", "plt", "\n", "from", ".", "math", "import", "*", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.brats_mix.nib_load": [[14, 22], ["nibabel.load", "nib.load.get_data", "nib.load.uncache", "os.path.exists", "print"], "function", ["None"], ["\n", "def", "pkload", "(", "fname", ")", ":", "\n", "    ", "with", "open", "(", "fname", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "return", "pickle", ".", "load", "(", "f", ")", "\n", "\n", "# def fft2(img):", "\n", "#     return np.fft.fftshift(np.fft.fft2(img))", "\n", "\n", "", "", "def", "fft2", "(", "img", ")", ":", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.brats_mix.load_nii": [[23, 30], ["numpy.array", "t.mean", "t.std", "brats_mix.nib_load"], "function", ["home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.brats_mix.nib_load"], ["    ", "return", "np", ".", "fft", ".", "fftshift", "(", "np", ".", "fft", ".", "fft2", "(", "np", ".", "fft", ".", "ifftshift", "(", "img", ")", ")", ")", "\n", "\n", "", "def", "nib_load", "(", "file_name", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "exists", "(", "file_name", ")", ":", "\n", "        ", "print", "(", "'Invalid file name, can not find the file!'", ")", "\n", "\n", "", "proxy", "=", "nib", ".", "load", "(", "file_name", ")", "\n", "data", "=", "proxy", ".", "get_data", "(", ")", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.brats_mix.build_brats_dataset": [[76, 86], ["os.path.join", "os.path.join", "os.path.join", "brats_mix.BraTS", "os.path.join", "os.path.join", "brats_mix.BraTS"], "function", ["None"], ["img", "=", "img", "[", "...", ",", "slice", "]", "\n", "#img = load_nii(path)[..., slice].transpose(1, 0)", "\n", "kspace", "=", "fft2", "(", "img", ")", "\n", "maskedkspace", "=", "kspace", "*", "self", ".", "mask", "\n", "\n", "maskedkspace", "=", "to_tensor", "(", "maskedkspace", ")", "\n", "subsample", "=", "complex_abs", "(", "ifft2c", "(", "maskedkspace", ")", ")", "\n", "\n", "kspace", "=", "to_tensor", "(", "kspace", ")", "\n", "target", "=", "complex_abs", "(", "ifft2c", "(", "kspace", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.subsample.MaskFunc.__init__": [[41, 59], ["len", "len", "ValueError"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "center_fractions", ",", "accelerations", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            center_fractions (List[float]): Fraction of low-frequency columns to be\n                retained. If multiple values are provided, then one of these\n                numbers is chosen uniformly each time. \n            accelerations (List[int]): Amount of under-sampling. This should have\n                the same length as center_fractions. If multiple values are\n                provided, then one of these is chosen uniformly each time.\n        \"\"\"", "\n", "if", "len", "(", "center_fractions", ")", "!=", "len", "(", "accelerations", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"Number of center fractions should match number of accelerations\"", "\n", ")", "\n", "\n", "", "self", ".", "center_fractions", "=", "center_fractions", "\n", "self", ".", "accelerations", "=", "accelerations", "\n", "self", ".", "rng", "=", "np", ".", "random", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.subsample.MaskFunc.choose_acceleration": [[60, 67], ["subsample.MaskFunc.rng.randint", "len"], "methods", ["None"], ["", "def", "choose_acceleration", "(", "self", ")", ":", "\n", "        ", "\"\"\"Choose acceleration based on class parameters.\"\"\"", "\n", "choice", "=", "self", ".", "rng", ".", "randint", "(", "0", ",", "len", "(", "self", ".", "accelerations", ")", ")", "\n", "center_fraction", "=", "self", ".", "center_fractions", "[", "choice", "]", "\n", "acceleration", "=", "self", ".", "accelerations", "[", "choice", "]", "\n", "\n", "return", "center_fraction", ",", "acceleration", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.subsample.RandomMaskFunc.__call__": [[92, 129], ["len", "ValueError", "subsample.temp_seed", "subsample.RandomMaskFunc.choose_acceleration", "int", "torch.from_numpy", "round", "subsample.RandomMaskFunc.rng.uniform", "torch.from_numpy.reshape().astype", "torch.from_numpy.reshape"], "methods", ["home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.subsample.temp_seed", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.subsample.MaskFunc.choose_acceleration"], ["def", "__call__", "(", "self", ",", "shape", ",", "seed", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Create the mask.\n\n        Args:\n            shape (iterable[int]): The shape of the mask to be created. The\n                shape should have at least 3 dimensions. Samples are drawn\n                along the second last dimension.\n            seed (int, optional): Seed for the random number generator. Setting\n                the seed ensures the same mask is generated each time for the\n                same shape. The random state is reset afterwards.\n                \n        Returns:\n            torch.Tensor: A mask of the specified shape.\n        \"\"\"", "\n", "if", "len", "(", "shape", ")", "<", "3", ":", "\n", "            ", "raise", "ValueError", "(", "\"Shape should have 3 or more dimensions\"", ")", "\n", "\n", "", "with", "temp_seed", "(", "self", ".", "rng", ",", "seed", ")", ":", "\n", "            ", "num_cols", "=", "shape", "[", "-", "2", "]", "\n", "center_fraction", ",", "acceleration", "=", "self", ".", "choose_acceleration", "(", ")", "\n", "\n", "# create the mask", "\n", "num_low_freqs", "=", "int", "(", "round", "(", "num_cols", "*", "center_fraction", ")", ")", "\n", "prob", "=", "(", "num_cols", "/", "acceleration", "-", "num_low_freqs", ")", "/", "(", "\n", "num_cols", "-", "num_low_freqs", "\n", ")", "\n", "mask", "=", "self", ".", "rng", ".", "uniform", "(", "size", "=", "num_cols", ")", "<", "prob", "\n", "pad", "=", "(", "num_cols", "-", "num_low_freqs", "+", "1", ")", "//", "2", "\n", "mask", "[", "pad", ":", "pad", "+", "num_low_freqs", "]", "=", "True", "\n", "\n", "# reshape the mask", "\n", "mask_shape", "=", "[", "1", "for", "_", "in", "shape", "]", "\n", "mask_shape", "[", "-", "2", "]", "=", "num_cols", "\n", "mask", "=", "torch", ".", "from_numpy", "(", "mask", ".", "reshape", "(", "*", "mask_shape", ")", ".", "astype", "(", "np", ".", "float32", ")", ")", "\n", "\n", "", "return", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.subsample.EquispacedMaskFunc.__call__": [[154, 196], ["len", "ValueError", "subsample.temp_seed", "subsample.EquispacedMaskFunc.choose_acceleration", "int", "numpy.zeros", "subsample.EquispacedMaskFunc.rng.randint", "numpy.arange", "numpy.around().astype", "torch.from_numpy", "round", "round", "torch.from_numpy.reshape().astype", "numpy.around", "torch.from_numpy.reshape"], "methods", ["home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.subsample.temp_seed", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.subsample.MaskFunc.choose_acceleration"], ["def", "__call__", "(", "self", ",", "shape", ",", "seed", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            shape (iterable[int]): The shape of the mask to be created. The\n                shape should have at least 3 dimensions. Samples are drawn\n                along the second last dimension.\n            seed (int, optional): Seed for the random number generator. Setting\n                the seed ensures the same mask is generated each time for the\n                same shape. The random state is reset afterwards.\n\n        Returns:\n            torch.Tensor: A mask of the specified shape.\n        \"\"\"", "\n", "if", "len", "(", "shape", ")", "<", "3", ":", "\n", "            ", "raise", "ValueError", "(", "\"Shape should have 3 or more dimensions\"", ")", "\n", "\n", "", "with", "temp_seed", "(", "self", ".", "rng", ",", "seed", ")", ":", "\n", "            ", "center_fraction", ",", "acceleration", "=", "self", ".", "choose_acceleration", "(", ")", "\n", "num_cols", "=", "shape", "[", "-", "2", "]", "\n", "num_low_freqs", "=", "int", "(", "round", "(", "num_cols", "*", "center_fraction", ")", ")", "\n", "\n", "# create the mask", "\n", "mask", "=", "np", ".", "zeros", "(", "num_cols", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "pad", "=", "(", "num_cols", "-", "num_low_freqs", "+", "1", ")", "//", "2", "\n", "mask", "[", "pad", ":", "pad", "+", "num_low_freqs", "]", "=", "True", "\n", "\n", "# determine acceleration rate by adjusting for the number of low frequencies", "\n", "adjusted_accel", "=", "(", "acceleration", "*", "(", "num_low_freqs", "-", "num_cols", ")", ")", "/", "(", "\n", "num_low_freqs", "*", "acceleration", "-", "num_cols", "\n", ")", "\n", "offset", "=", "self", ".", "rng", ".", "randint", "(", "0", ",", "round", "(", "adjusted_accel", ")", ")", "\n", "\n", "accel_samples", "=", "np", ".", "arange", "(", "offset", ",", "num_cols", "-", "1", ",", "adjusted_accel", ")", "\n", "accel_samples", "=", "np", ".", "around", "(", "accel_samples", ")", ".", "astype", "(", "np", ".", "uint", ")", "\n", "mask", "[", "accel_samples", "]", "=", "True", "\n", "\n", "# reshape the mask", "\n", "mask_shape", "=", "[", "1", "for", "_", "in", "shape", "]", "\n", "mask_shape", "[", "-", "2", "]", "=", "num_cols", "\n", "mask", "=", "torch", ".", "from_numpy", "(", "mask", ".", "reshape", "(", "*", "mask_shape", ")", ".", "astype", "(", "np", ".", "float32", ")", ")", "\n", "\n", "", "return", "mask", "\n", "", "", ""]], "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.subsample.temp_seed": [[14, 22], ["rng.get_state", "rng.seed", "rng.set_state"], "function", ["None"], ["@", "contextlib", ".", "contextmanager", "\n", "def", "temp_seed", "(", "rng", ",", "seed", ")", ":", "\n", "    ", "state", "=", "rng", ".", "get_state", "(", ")", "\n", "rng", ".", "seed", "(", "seed", ")", "\n", "try", ":", "\n", "        ", "yield", "\n", "", "finally", ":", "\n", "        ", "rng", ".", "set_state", "(", "state", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.subsample.create_mask_for_mask_type": [[24, 31], ["subsample.RandomMaskFunc", "subsample.EquispacedMaskFunc", "Exception"], "function", ["None"], ["", "", "def", "create_mask_for_mask_type", "(", "mask_type_str", ",", "center_fractions", ",", "accelerations", ")", ":", "\n", "    ", "if", "mask_type_str", "==", "\"random\"", ":", "\n", "        ", "return", "RandomMaskFunc", "(", "center_fractions", ",", "accelerations", ")", "\n", "", "elif", "mask_type_str", "==", "\"equispaced\"", ":", "\n", "        ", "return", "EquispacedMaskFunc", "(", "center_fractions", ",", "accelerations", ")", "\n", "", "else", ":", "\n", "        ", "raise", "Exception", "(", "f\"{mask_type_str} not supported\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.__init__.build_dataloader": [[9, 30], ["range", "len", "os.path.join", "os.path.join", "dicom_mix.FastMRIDicom_Split", "os.path.join", "data_loader.append", "torch.utils.data.DataLoader", "data_loader.append", "torch.utils.data.DataLoader"], "function", ["None"], ["\n", "def", "build_config", "(", "factory", ")", ":", "\n", "    ", "return", "config_factory", "[", "factory", "]", "", "", ""]], "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.__init__.build_different_dataloader": [[31, 62], ["dicom_mix.build_fastmri_dataset", "brats_mix.build_brats_dataset", "fastmri.create_datasets", "fastmri.create_datasets", "len", "dataset_len.append", "len", "data_loader.append", "torch.utils.data.DistributedSampler", "torch.utils.data.RandomSampler", "torch.utils.data.DataLoader", "data_loader.append", "torch.utils.data.DistributedSampler", "torch.utils.data.SequentialSampler", "torch.utils.data.DataLoader"], "function", ["home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.dicom_mix.build_fastmri_dataset", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.brats_mix.build_brats_dataset", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.fastmri.create_datasets", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.fastmri.create_datasets"], []], "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.fastmri.IXIdataset.__init__": [[120, 193], ["os.path.join", "range", "client_name.find", "int", "range", "round", "fastmri.IXIdataset.examples.append", "len", "random.shuffle", "data_dir.replace", "os.listdir", "client_name.split", "len", "divided_examples.append", "len", "data_dir.replace", "os.path.splitext", "file.startswith", "range", "len", "len", "len", "len", "len"], "methods", ["None"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "data_dir", ",", "\n", "transforms", ",", "\n", "args", ",", "\n", "challenge", ",", "\n", "sample_rate", "=", "1", ",", "\n", "mode", "=", "'train'", ",", "\n", "pattern", "=", "'T2'", ",", "\n", "client_name", "=", "'IXI'", ",", "# IXI_zi_1", "\n", "client_num", "=", "2", ",", "\n", ")", ":", "\n", "        ", "self", ".", "transform", "=", "transforms", "\n", "self", ".", "pattern", "=", "pattern", "\n", "self", ".", "img_size", "=", "args", ".", "img_size", "\n", "self", ".", "file_names", "=", "[", "]", "\n", "# self.final_file_names = []", "\n", "self", ".", "examples", "=", "[", "]", "\n", "\n", "if", "pattern", "==", "'T1'", ":", "\n", "            ", "self", ".", "data_list", "=", "[", "data_dir", "]", "\n", "", "elif", "pattern", "==", "'T2'", ":", "\n", "            ", "self", ".", "data_list", "=", "[", "data_dir", ".", "replace", "(", "'/IXI/'", ",", "'/IXI_T2/'", ")", "]", "\n", "", "elif", "pattern", "==", "'T1+T2'", ":", "\n", "            ", "self", ".", "data_list", "=", "[", "data_dir", ",", "data_dir", ".", "replace", "(", "'/IXI/'", ",", "'/IXI_T2/'", ")", "]", "\n", "\n", "", "self", ".", "recons_key", "=", "(", "\n", "\"reconstruction_esc\"", "if", "challenge", "==", "\"singlecoil\"", "else", "\"reconstruction_rss\"", "\n", ")", "\n", "\n", "metadata", "=", "{", "\n", "'acquisition'", ":", "pattern", ",", "\n", "'encoding_size'", ":", "(", "256", ",", "256", ",", "1", ")", ",", "\n", "'max'", ":", "0", ",", "\n", "'norm'", ":", "0", ",", "\n", "'padding_left'", ":", "0", ",", "\n", "'padding_right'", ":", "0", ",", "\n", "'patient_id'", ":", "'0'", ",", "\n", "'recon_size'", ":", "(", "256", ",", "256", ",", "1", ")", ",", "\n", "}", "\n", "\n", "#make an image id's list", "\n", "for", "dataset", "in", "self", ".", "data_list", ":", "\n", "            ", "self", ".", "file_names", "+=", "[", "(", "dataset", ",", "splitext", "(", "file", ")", "[", "0", "]", ")", "for", "file", "in", "listdir", "(", "dataset", ")", "\n", "if", "not", "file", ".", "startswith", "(", "'.'", ")", "]", "\n", "\n", "", "for", "dataset", ",", "file_name", "in", "self", ".", "file_names", ":", "\n", "            ", "full_file_path", "=", "path", ".", "join", "(", "dataset", ",", "file_name", "+", "'.hdf5'", ")", "\n", "\n", "for", "slice_id", "in", "range", "(", "20", ",", "120", ",", "1", ")", ":", "\n", "                ", "self", ".", "examples", ".", "append", "(", "(", "full_file_path", ",", "slice_id", ",", "metadata", ")", ")", "\n", "\n", "# split to subdatasets", "\n", "", "", "if", "client_name", ".", "find", "(", "'zi_'", ")", ">=", "0", ":", "\n", "            ", "division_num", "=", "int", "(", "client_name", ".", "split", "(", "'zi_'", ")", "[", "-", "1", "]", ")", "\n", "divided_examples", "=", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "0", ",", "len", "(", "self", ".", "examples", ")", ",", "len", "(", "self", ".", "examples", ")", "//", "client_num", ")", ":", "\n", "                ", "if", "i", "==", "range", "(", "0", ",", "len", "(", "self", ".", "examples", ")", ",", "len", "(", "self", ".", "examples", ")", "//", "client_num", ")", "[", "-", "1", "]", "and", "len", "(", "self", ".", "examples", ")", "%", "(", "len", "(", "self", ".", "examples", ")", "//", "client_num", ")", "!=", "0", ":", "\n", "                    ", "new_list", "=", "self", ".", "examples", "[", "i", ":", "]", "\n", "divided_examples", "[", "-", "1", "]", "+=", "new_list", "\n", "", "else", ":", "\n", "                    ", "new_list", "=", "self", ".", "examples", "[", "i", ":", "i", "+", "len", "(", "self", ".", "examples", ")", "//", "client_num", "]", "\n", "divided_examples", ".", "append", "(", "new_list", ")", "\n", "\n", "", "", "self", ".", "examples", "=", "divided_examples", "[", "division_num", "]", "\n", "\n", "", "if", "sample_rate", "<", "1", ":", "\n", "            ", "if", "mode", "==", "'train'", ":", "\n", "                ", "random", ".", "shuffle", "(", "self", ".", "examples", ")", "\n", "", "num_examples", "=", "round", "(", "len", "(", "self", ".", "examples", ")", "*", "sample_rate", ")", "\n", "self", ".", "examples", "=", "self", ".", "examples", "[", "0", ":", "num_examples", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.fastmri.IXIdataset.__len__": [[194, 196], ["len"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "examples", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.fastmri.IXIdataset.__getitem__": [[197, 218], ["fastmri.IXIdataset.h5path2matpath", "numpy.rot90", "fastmri.IXIdataset.fft2c().astype", "numpy.rot90.astype", "scipy.io.loadmat", "fastmri.IXIdataset.transform", "fastmri.IXIdataset.fft2c"], "methods", ["home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.fastmri.IXIdataset.h5path2matpath", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.fastmri.JiangSudataset.fft2c"], ["", "def", "__getitem__", "(", "self", ",", "slice_id", ")", ":", "\n", "\n", "        ", "fname_nii", ",", "slice_idx", ",", "metadata", "=", "self", ".", "examples", "[", "slice_id", "]", "\n", "\n", "slice_path", "=", "self", ".", "h5path2matpath", "(", "fname_nii", ",", "slice_idx", ")", "\n", "image", "=", "loadmat", "(", "slice_path", ")", "[", "'img'", "]", "# spatial  (556,640)", "\n", "\n", "mask", "=", "None", "\n", "attrs", "=", "metadata", "\n", "\n", "image", "=", "np", ".", "rot90", "(", "image", ")", "\n", "\n", "kspace", "=", "self", ".", "fft2c", "(", "image", ")", ".", "astype", "(", "np", ".", "complex64", ")", "\n", "target", "=", "image", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n", "if", "self", ".", "transform", "is", "None", ":", "\n", "            ", "sample", "=", "(", "kspace", ",", "mask", ",", "target", ",", "attrs", ",", "fname_nii", ",", "slice_idx", ")", "\n", "", "else", ":", "\n", "            ", "sample", "=", "self", ".", "transform", "(", "kspace", ",", "mask", ",", "target", ",", "attrs", ",", "fname_nii", ",", "slice_idx", ")", "\n", "\n", "", "return", "sample", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.fastmri.IXIdataset.fft2c": [[219, 221], ["numpy.fft.fftshift", "numpy.fft.fft2", "numpy.fft.ifftshift"], "methods", ["home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.math.fftshift", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.dicom_mix.fft2", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.math.ifftshift"], ["", "def", "fft2c", "(", "self", ",", "img", ")", ":", "\n", "        ", "return", "np", ".", "fft", ".", "fftshift", "(", "np", ".", "fft", ".", "fft2", "(", "np", ".", "fft", ".", "ifftshift", "(", "img", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.fastmri.IXIdataset.h5path2matpath": [[222, 228], ["fname.split", "os.path.join", "os.path.join.replace"], "methods", ["None"], ["", "def", "h5path2matpath", "(", "self", ",", "fname", ",", "slice_id", ")", ":", "\n", "        ", "filename", ",", "_", "=", "fname", ".", "split", "(", "'.'", ")", "\n", "mat_dir", "=", "path", ".", "join", "(", "filename", "+", "'-{:03d}.mat'", ".", "format", "(", "slice_id", ")", ")", "\n", "full_file_path", "=", "mat_dir", ".", "replace", "(", "'/h5/'", ",", "'/mat/'", ")", "\n", "\n", "return", "full_file_path", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.fastmri.LianYingdataset.__init__": [[230, 302], ["open.readlines", "open", "logging.info", "random.shuffle", "round", "os.path.join", "open", "file_name.split", "range", "file_name.split", "range", "logging.info", "str", "os.path.join", "open", "ValueError", "fastmri.LianYingdataset.examples.append", "fastmri.LianYingdataset.examples.append", "fastmri.LianYingdataset.examples.append", "logging.info", "len", "str", "os.path.join", "len", "str", "len", "len"], "methods", ["None"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "data_dir", ",", "\n", "transforms", ",", "\n", "args", ",", "\n", "challenge", ",", "\n", "sample_rate", "=", "1", ",", "\n", "mode", "=", "'train'", ",", "\n", "pattern", "=", "'T2'", "\n", ")", ":", "\n", "\n", "        ", "self", ".", "transform", "=", "transforms", "\n", "self", ".", "data_dir", "=", "data_dir", "\n", "self", ".", "img_size", "=", "args", ".", "img_size", "\n", "self", ".", "examples", "=", "[", "]", "\n", "\n", "self", ".", "recons_key", "=", "(", "\n", "\"reconstruction_esc\"", "if", "challenge", "==", "\"singlecoil\"", "else", "\"reconstruction_rss\"", "\n", ")", "\n", "\n", "#make an image id's list", "\n", "if", "mode", "==", "'train'", ":", "\n", "            ", "f", "=", "open", "(", "path", ".", "join", "(", "str", "(", "data_dir", ")", ",", "'lianying_train.txt'", ")", ",", "'r'", ")", "#_little", "\n", "", "elif", "mode", "==", "'val'", ":", "\n", "            ", "f", "=", "open", "(", "path", ".", "join", "(", "str", "(", "data_dir", ")", ",", "'lianying_val.txt'", ")", ",", "'r'", ")", "#_little", "\n", "", "elif", "mode", "==", "'test'", ":", "\n", "            ", "f", "=", "open", "(", "path", ".", "join", "(", "str", "(", "data_dir", ")", ",", "'lianying_test.txt'", ")", ",", "'r'", ")", "#_little", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"No mode like this, please choose one in ['train', 'val', 'test'].\"", ")", "\n", "\n", "", "file_names", "=", "f", ".", "readlines", "(", ")", "\n", "\n", "metadata", "=", "{", "\n", "'acquisition'", ":", "pattern", ",", "\n", "'encoding_size'", ":", "(", "640", ",", "556", ",", "1", ")", ",", "\n", "'max'", ":", "0", ",", "\n", "'norm'", ":", "0", ",", "\n", "'padding_left'", ":", "0", ",", "\n", "'padding_right'", ":", "0", ",", "\n", "'patient_id'", ":", "'0'", ",", "\n", "'recon_size'", ":", "(", "320", ",", "320", ",", "1", ")", ",", "\n", "}", "\n", "\n", "if", "not", "pattern", "==", "'T1+T2'", ":", "\n", "\n", "            ", "if", "pattern", "==", "'T1'", ":", "\n", "                ", "idx", "=", "0", "\n", "", "elif", "pattern", "==", "'T2'", ":", "\n", "                ", "idx", "=", "1", "\n", "\n", "", "for", "file_name", "in", "file_names", ":", "\n", "                ", "splits", "=", "file_name", ".", "split", "(", ")", "# \u5206\u79bb\u7a7a\u683c", "\n", "for", "slice_id", "in", "range", "(", "args", ".", "slice_range", "[", "0", "]", ",", "args", ".", "slice_range", "[", "1", "]", "+", "1", ")", ":", "# 0:19==20", "\n", "                    ", "self", ".", "examples", ".", "append", "(", "(", "splits", "[", "idx", "]", ",", "slice_id", ",", "metadata", ")", ")", "# \u83b7\u53d6T1/T2\u7684slice\u5217\u8868", "\n", "", "", "", "else", ":", "\n", "            ", "for", "file_name", "in", "file_names", ":", "\n", "                ", "splits", "=", "file_name", ".", "split", "(", ")", "\n", "for", "slice_id", "in", "range", "(", "args", ".", "slice_range", "[", "0", "]", ",", "args", ".", "slice_range", "[", "1", "]", "+", "1", ")", ":", "# 0:19==20", "\n", "                    ", "self", ".", "examples", ".", "append", "(", "(", "splits", "[", "0", "]", ",", "slice_id", ",", "metadata", ")", ")", "# \u83b7\u53d6T1\u7684slice\u5217\u8868", "\n", "self", ".", "examples", ".", "append", "(", "(", "splits", "[", "1", "]", ",", "slice_id", ",", "metadata", ")", ")", "# \u83b7\u53d6T2\u7684slice\u5217\u8868", "\n", "\n", "", "", "", "if", "mode", "==", "'train'", ":", "\n", "            ", "logging", ".", "info", "(", "f'Creating training dataset with {len(self.examples)} examples'", ")", "\n", "", "elif", "mode", "==", "'val'", ":", "\n", "            ", "logging", ".", "info", "(", "f'Creating validation dataset with {len(self.examples)} examples'", ")", "\n", "", "elif", "mode", "==", "'test'", ":", "\n", "            ", "logging", ".", "info", "(", "f'Creating test dataset with {len(self.examples)} examples'", ")", "\n", "\n", "", "if", "sample_rate", "<", "1", ":", "\n", "            ", "random", ".", "shuffle", "(", "self", ".", "examples", ")", "\n", "num_examples", "=", "round", "(", "len", "(", "self", ".", "examples", ")", "*", "sample_rate", ")", "\n", "self", ".", "examples", "=", "self", ".", "examples", "[", "0", ":", "num_examples", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.fastmri.LianYingdataset.__len__": [[303, 305], ["len"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "examples", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.fastmri.LianYingdataset.__getitem__": [[306, 327], ["fastmri.LianYingdataset.niipath2matpath", "numpy.rot90", "fastmri.LianYingdataset.fft2c().astype", "numpy.rot90.astype", "scipy.io.loadmat", "fastmri.LianYingdataset.transform", "fastmri.LianYingdataset.fft2c"], "methods", ["home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.fastmri.JiangSudataset.niipath2matpath", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.fastmri.JiangSudataset.fft2c"], ["", "def", "__getitem__", "(", "self", ",", "slice_id", ")", ":", "\n", "\n", "        ", "fname_nii", ",", "slice_idx", ",", "metadata", "=", "self", ".", "examples", "[", "slice_id", "]", "\n", "\n", "slice_path", "=", "self", ".", "niipath2matpath", "(", "fname_nii", ",", "slice_idx", ")", "\n", "image", "=", "loadmat", "(", "slice_path", ")", "[", "'img'", "]", "# spatial  (556,640)", "\n", "\n", "mask", "=", "None", "\n", "attrs", "=", "metadata", "\n", "\n", "image", "=", "np", ".", "rot90", "(", "image", ")", "\n", "\n", "kspace", "=", "self", ".", "fft2c", "(", "image", ")", ".", "astype", "(", "np", ".", "complex64", ")", "\n", "target", "=", "image", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n", "if", "self", ".", "transform", "is", "None", ":", "\n", "            ", "sample", "=", "(", "kspace", ",", "mask", ",", "target", ",", "attrs", ",", "fname_nii", ",", "slice_idx", ")", "\n", "", "else", ":", "\n", "            ", "sample", "=", "self", ".", "transform", "(", "kspace", ",", "mask", ",", "target", ",", "attrs", ",", "fname_nii", ",", "slice_idx", ")", "\n", "\n", "", "return", "sample", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.fastmri.LianYingdataset.crop_toshape": [[328, 336], ["int"], "methods", ["None"], ["", "def", "crop_toshape", "(", "self", ",", "kspace_cplx", ")", ":", "\n", "        ", "if", "kspace_cplx", ".", "shape", "[", "1", "]", "==", "self", ".", "img_size", ":", "\n", "            ", "return", "kspace_cplx", "\n", "", "if", "kspace_cplx", ".", "shape", "[", "0", "]", "%", "2", "==", "1", ":", "\n", "            ", "kspace_cplx", "=", "kspace_cplx", "[", ":", "-", "1", ",", ":", "-", "1", "]", "\n", "", "crop", "=", "int", "(", "(", "kspace_cplx", ".", "shape", "[", "0", "]", "-", "self", ".", "img_size", ")", "/", "2", ")", "\n", "kspace_cplx", "=", "kspace_cplx", "[", "crop", ":", "-", "crop", ",", "crop", ":", "-", "crop", "]", "\n", "return", "kspace_cplx", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.fastmri.LianYingdataset.fft2c": [[337, 339], ["numpy.fft.fftshift", "numpy.fft.fft2", "numpy.fft.ifftshift"], "methods", ["home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.math.fftshift", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.dicom_mix.fft2", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.math.ifftshift"], ["", "def", "fft2c", "(", "self", ",", "img", ")", ":", "\n", "        ", "return", "np", ".", "fft", ".", "fftshift", "(", "np", ".", "fft", ".", "fft2", "(", "np", ".", "fft", ".", "ifftshift", "(", "img", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.fastmri.LianYingdataset.niipath2matpath": [[340, 349], ["os.path.split", "os.path.split", "os.path.join", "os.path.splitext", "os.path.join"], "methods", ["None"], ["", "def", "niipath2matpath", "(", "self", ",", "T1", ",", "slice_id", ")", ":", "\n", "        ", "filedir", ",", "filename", "=", "path", ".", "split", "(", "T1", ")", "\n", "filedir", ",", "_", "=", "path", ".", "split", "(", "filedir", ")", "\n", "mat_dir", "=", "path", ".", "join", "(", "filedir", ",", "'mat_320'", ")", "\n", "basename", ",", "ext", "=", "path", ".", "splitext", "(", "filename", ")", "\n", "file_name", "=", "'%s-%03d.mat'", "%", "(", "basename", ",", "slice_id", ")", "\n", "T1_file_path", "=", "path", ".", "join", "(", "mat_dir", ",", "file_name", ")", "\n", "return", "T1_file_path", "\n", "\n", "", "def", "center_crop", "(", "self", ",", "data", ",", "shape", ")", ":", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.fastmri.LianYingdataset.center_crop": [[350, 358], ["None"], "methods", ["None"], ["        ", "assert", "0", "<", "shape", "[", "0", "]", "<=", "data", ".", "shape", "[", "-", "2", "]", ",", "'Error: shape: {}, data.shape: {}'", ".", "format", "(", "shape", ",", "data", ".", "shape", ")", "#556...556", "\n", "assert", "0", "<", "shape", "[", "1", "]", "<=", "data", ".", "shape", "[", "-", "1", "]", "#640...640", "\n", "w_from", "=", "(", "data", ".", "shape", "[", "-", "2", "]", "-", "shape", "[", "0", "]", ")", "//", "2", "\n", "h_from", "=", "(", "data", ".", "shape", "[", "-", "1", "]", "-", "shape", "[", "1", "]", ")", "//", "2", "\n", "w_to", "=", "w_from", "+", "shape", "[", "0", "]", "\n", "h_to", "=", "h_from", "+", "shape", "[", "1", "]", "\n", "return", "data", "[", "...", ",", "w_from", ":", "w_to", ",", "h_from", ":", "h_to", "]", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.fastmri.JiangSudataset.__init__": [[361, 427], ["open.readlines", "open", "random.shuffle", "round", "os.path.join", "open", "file_name.split", "range", "file_name.split", "range", "str", "os.path.join", "open", "ValueError", "fastmri.JiangSudataset.examples.append", "fastmri.JiangSudataset.examples.append", "fastmri.JiangSudataset.examples.append", "len", "str", "os.path.join", "str"], "methods", ["None"], ["self", ",", "\n", "data_dir", ",", "\n", "transforms", ",", "\n", "args", ",", "\n", "challenge", ",", "\n", "sample_rate", "=", "1", ",", "\n", "mode", "=", "'train'", ",", "\n", "pattern", "=", "'T2'", "\n", ")", ":", "\n", "\n", "        ", "self", ".", "transform", "=", "transforms", "\n", "self", ".", "data_dir", "=", "data_dir", "\n", "self", ".", "img_size", "=", "args", ".", "img_size", "\n", "self", ".", "examples", "=", "[", "]", "\n", "\n", "self", ".", "recons_key", "=", "(", "\n", "\"reconstruction_esc\"", "if", "challenge", "==", "\"singlecoil\"", "else", "\"reconstruction_rss\"", "\n", ")", "\n", "\n", "#make an image id's list", "\n", "if", "mode", "==", "'train'", ":", "\n", "            ", "f", "=", "open", "(", "path", ".", "join", "(", "str", "(", "data_dir", ")", ",", "'jiangsu_train.txt'", ")", ",", "'r'", ")", "#_little", "\n", "", "elif", "mode", "==", "'val'", ":", "\n", "            ", "f", "=", "open", "(", "path", ".", "join", "(", "str", "(", "data_dir", ")", ",", "'jiangsu_val.txt'", ")", ",", "'r'", ")", "#_little", "\n", "", "elif", "mode", "==", "'test'", ":", "\n", "            ", "f", "=", "open", "(", "path", ".", "join", "(", "str", "(", "data_dir", ")", ",", "'jiangsu_test.txt'", ")", ",", "'r'", ")", "#_little", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"No mode like this, please choose one in ['train', 'val', 'test'].\"", ")", "\n", "\n", "", "file_names", "=", "f", ".", "readlines", "(", ")", "\n", "\n", "metadata", "=", "{", "\n", "'acquisition'", ":", "pattern", ",", "\n", "'encoding_size'", ":", "(", "640", ",", "556", ",", "1", ")", ",", "\n", "'max'", ":", "0", ",", "\n", "'norm'", ":", "0", ",", "\n", "'padding_left'", ":", "0", ",", "\n", "'padding_right'", ":", "0", ",", "\n", "'patient_id'", ":", "'0'", ",", "\n", "'recon_size'", ":", "(", "320", ",", "320", ",", "1", ")", ",", "\n", "}", "\n", "\n", "if", "not", "pattern", "==", "'T1+T2'", ":", "\n", "\n", "            ", "if", "pattern", "==", "'T1'", ":", "\n", "                ", "idx", "=", "0", "\n", "", "elif", "pattern", "==", "'T2'", ":", "\n", "                ", "idx", "=", "1", "\n", "\n", "", "for", "file_name", "in", "file_names", ":", "\n", "                ", "splits", "=", "file_name", ".", "split", "(", ")", "# \u5206\u79bb\u7a7a\u683c", "\n", "# list_pattern.append(splits[idx])", "\n", "for", "slice_id", "in", "range", "(", "args", ".", "slice_range", "[", "0", "]", ",", "args", ".", "slice_range", "[", "1", "]", "+", "1", ")", ":", "# 0:19==20", "\n", "                    ", "self", ".", "examples", ".", "append", "(", "(", "splits", "[", "idx", "]", ",", "slice_id", ",", "metadata", ")", ")", "# \u83b7\u53d6T1/T2\u7684slice\u5217\u8868", "\n", "", "", "", "else", ":", "\n", "            ", "for", "file_name", "in", "file_names", ":", "\n", "                ", "splits", "=", "file_name", ".", "split", "(", ")", "\n", "for", "slice_id", "in", "range", "(", "args", ".", "slice_range", "[", "0", "]", ",", "args", ".", "slice_range", "[", "1", "]", "+", "1", ")", ":", "# 0:19==20", "\n", "                    ", "self", ".", "examples", ".", "append", "(", "(", "splits", "[", "0", "]", ",", "slice_id", ",", "metadata", ")", ")", "# \u83b7\u53d6T1\u7684slice\u5217\u8868", "\n", "self", ".", "examples", ".", "append", "(", "(", "splits", "[", "1", "]", ",", "slice_id", ",", "metadata", ")", ")", "# \u83b7\u53d6T2\u7684slice\u5217\u8868", "\n", "\n", "", "", "", "if", "sample_rate", "<", "1", ":", "\n", "            ", "random", ".", "shuffle", "(", "self", ".", "examples", ")", "\n", "num_examples", "=", "round", "(", "len", "(", "self", ".", "examples", ")", "*", "sample_rate", ")", "\n", "self", ".", "examples", "=", "self", ".", "examples", "[", "0", ":", "num_examples", "]", "\n", "\n", "", "", "def", "__len__", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.fastmri.JiangSudataset.__len__": [[428, 430], ["len"], "methods", ["None"], ["        ", "return", "len", "(", "self", ".", "examples", ")", "\n", "\n", "", "def", "__getitem__", "(", "self", ",", "slice_id", ")", ":", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.fastmri.JiangSudataset.__getitem__": [[431, 452], ["fastmri.JiangSudataset.niipath2matpath", "numpy.rot90", "fastmri.JiangSudataset.fft2c().astype", "numpy.rot90.astype", "scipy.io.loadmat", "fastmri.JiangSudataset.transform", "fastmri.JiangSudataset.fft2c"], "methods", ["home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.fastmri.JiangSudataset.niipath2matpath", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.fastmri.JiangSudataset.fft2c"], ["\n", "        ", "fname_nii", ",", "slice_idx", ",", "metadata", "=", "self", ".", "examples", "[", "slice_id", "]", "\n", "\n", "slice_path", "=", "self", ".", "niipath2matpath", "(", "fname_nii", ",", "slice_idx", ")", "\n", "image", "=", "loadmat", "(", "slice_path", ")", "[", "'img'", "]", "# spatial  (556,640)", "\n", "\n", "mask", "=", "None", "\n", "attrs", "=", "metadata", "\n", "\n", "image", "=", "np", ".", "rot90", "(", "image", ")", "\n", "\n", "kspace", "=", "self", ".", "fft2c", "(", "image", ")", ".", "astype", "(", "np", ".", "complex64", ")", "\n", "target", "=", "image", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n", "if", "self", ".", "transform", "is", "None", ":", "\n", "            ", "sample", "=", "(", "kspace", ",", "mask", ",", "target", ",", "attrs", ",", "fname_nii", ",", "slice_idx", ")", "\n", "", "else", ":", "\n", "            ", "sample", "=", "self", ".", "transform", "(", "kspace", ",", "mask", ",", "target", ",", "attrs", ",", "fname_nii", ",", "slice_idx", ")", "\n", "\n", "", "return", "sample", "\n", "\n", "", "def", "crop_toshape", "(", "self", ",", "kspace_cplx", ")", ":", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.fastmri.JiangSudataset.crop_toshape": [[453, 461], ["int"], "methods", ["None"], ["        ", "if", "kspace_cplx", ".", "shape", "[", "1", "]", "==", "self", ".", "img_size", ":", "\n", "            ", "return", "kspace_cplx", "\n", "", "if", "kspace_cplx", ".", "shape", "[", "0", "]", "%", "2", "==", "1", ":", "\n", "            ", "kspace_cplx", "=", "kspace_cplx", "[", ":", "-", "1", ",", ":", "-", "1", "]", "\n", "", "crop", "=", "int", "(", "(", "kspace_cplx", ".", "shape", "[", "0", "]", "-", "self", ".", "img_size", ")", "/", "2", ")", "\n", "kspace_cplx", "=", "kspace_cplx", "[", "crop", ":", "-", "crop", ",", "crop", ":", "-", "crop", "]", "\n", "return", "kspace_cplx", "\n", "\n", "", "def", "fft2c", "(", "self", ",", "img", ")", ":", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.fastmri.JiangSudataset.fft2c": [[462, 464], ["numpy.fft.fftshift", "numpy.fft.fft2", "numpy.fft.ifftshift"], "methods", ["home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.math.fftshift", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.dicom_mix.fft2", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.math.ifftshift"], ["        ", "return", "np", ".", "fft", ".", "fftshift", "(", "np", ".", "fft", ".", "fft2", "(", "np", ".", "fft", ".", "ifftshift", "(", "img", ")", ")", ")", "\n", "\n", "", "def", "ifft2c", "(", "self", ",", "img", ")", ":", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.fastmri.JiangSudataset.ifft2c": [[465, 467], ["numpy.fft.fftshift", "numpy.fft.ifft2", "numpy.fft.ifftshift"], "methods", ["home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.math.fftshift", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.fastmri.JiangSudataset.ifft2", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.math.ifftshift"], ["        ", "return", "np", ".", "fft", ".", "fftshift", "(", "np", ".", "fft", ".", "ifft2", "(", "np", ".", "fft", ".", "ifftshift", "(", "img", ")", ")", ")", "\n", "\n", "", "def", "fft2", "(", "self", ",", "img", ")", ":", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.fastmri.JiangSudataset.fft2": [[468, 470], ["numpy.fft.fftshift", "numpy.fft.fft2"], "methods", ["home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.math.fftshift", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.dicom_mix.fft2"], ["        ", "return", "np", ".", "fft", ".", "fftshift", "(", "np", ".", "fft", ".", "fft2", "(", "img", ")", ")", "\n", "\n", "", "def", "ifft2", "(", "self", ",", "kspace_cplx", ")", ":", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.fastmri.JiangSudataset.ifft2": [[471, 473], ["numpy.absolute", "numpy.fft.ifft2"], "methods", ["home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.fastmri.JiangSudataset.ifft2"], ["        ", "return", "np", ".", "absolute", "(", "np", ".", "fft", ".", "ifft2", "(", "kspace_cplx", ")", ")", "\n", "\n", "", "def", "niipath2matpath", "(", "self", ",", "T1", ",", "slice_id", ")", ":", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.fastmri.JiangSudataset.niipath2matpath": [[474, 483], ["os.path.split", "os.path.split", "os.path.join", "os.path.splitext", "os.path.join"], "methods", ["None"], ["        ", "filedir", ",", "filename", "=", "path", ".", "split", "(", "T1", ")", "\n", "filedir", ",", "_", "=", "path", ".", "split", "(", "filedir", ")", "\n", "mat_dir", "=", "path", ".", "join", "(", "filedir", ",", "'mat320'", ")", "\n", "basename", ",", "ext", "=", "path", ".", "splitext", "(", "filename", ")", "\n", "base_name", "=", "basename", "[", ":", "-", "1", "]", "\n", "file_name", "=", "'%s-%03d.mat'", "%", "(", "base_name", ",", "slice_id", ")", "\n", "T1_file_path", "=", "path", ".", "join", "(", "mat_dir", ",", "file_name", ")", "\n", "return", "T1_file_path", "\n", "\n", "", "def", "center_crop", "(", "self", ",", "data", ",", "shape", ")", ":", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.fastmri.JiangSudataset.center_crop": [[484, 492], ["None"], "methods", ["None"], ["        ", "assert", "0", "<", "shape", "[", "0", "]", "<=", "data", ".", "shape", "[", "-", "2", "]", ",", "'Error: shape: {}, data.shape: {}'", ".", "format", "(", "shape", ",", "data", ".", "shape", ")", "#556...556", "\n", "assert", "0", "<", "shape", "[", "1", "]", "<=", "data", ".", "shape", "[", "-", "1", "]", "#640...640", "\n", "w_from", "=", "(", "data", ".", "shape", "[", "-", "2", "]", "-", "shape", "[", "0", "]", ")", "//", "2", "\n", "h_from", "=", "(", "data", ".", "shape", "[", "-", "1", "]", "-", "shape", "[", "1", "]", ")", "//", "2", "\n", "w_to", "=", "w_from", "+", "shape", "[", "0", "]", "\n", "h_to", "=", "h_from", "+", "shape", "[", "1", "]", "\n", "return", "data", "[", "...", ",", "w_from", ":", "w_to", ",", "h_from", ":", "h_to", "]", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.fastmri.SliceDataset.__init__": [[495, 553], ["ValueError", "os.path.join", "open", "csv.reader", "random.shuffle", "round", "os.path.join", "fastmri.SliceDataset._retrieve_metadata", "range", "fastmri.SliceDataset._retrieve_metadata", "fastmri.SliceDataset._retrieve_metadata", "range", "len", "os.path.join", "fastmri.SliceDataset.examples.append", "os.path.join", "os.path.join", "min", "fastmri.SliceDataset.examples.append", "fastmri.SliceDataset.examples.append", "os.path.join", "os.path.join", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.fastmri.SliceDataset._retrieve_metadata", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.fastmri.SliceDataset._retrieve_metadata", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.fastmri.SliceDataset._retrieve_metadata"], ["self", ",", "\n", "root", ",", "\n", "transform", ",", "\n", "challenge", ",", "\n", "sample_rate", "=", "1", ",", "\n", "mode", "=", "'train'", ",", "\n", "pattern", "=", "'pd'", ",", "\n", ")", ":", "\n", "\n", "# challenge", "\n", "        ", "if", "challenge", "not", "in", "(", "\"singlecoil\"", ",", "\"multicoil\"", ")", ":", "\n", "            ", "raise", "ValueError", "(", "'challenge should be either \"singlecoil\" or \"multicoil\"'", ")", "\n", "", "self", ".", "recons_key", "=", "(", "\n", "\"reconstruction_esc\"", "if", "challenge", "==", "\"singlecoil\"", "else", "\"reconstruction_rss\"", "\n", ")", "\n", "# transform", "\n", "self", ".", "transform", "=", "transform", "\n", "\n", "self", ".", "examples", "=", "[", "]", "\n", "\n", "self", ".", "cur_path", "=", "root", "\n", "if", "pattern", "==", "'mix0'", "or", "pattern", "==", "'mix1'", ":", "\n", "            ", "self", ".", "csv_file", "=", "os", ".", "path", ".", "join", "(", "self", ".", "cur_path", ",", "\"singlecoil_\"", "+", "mode", "+", "\"_mixsplit_less.csv\"", ")", "\n", "", "elif", "pattern", "==", "'pd'", "or", "pattern", "==", "'pdfs'", "or", "pattern", "==", "'pd+pdfs'", ":", "\n", "            ", "self", ".", "csv_file", "=", "os", ".", "path", ".", "join", "(", "self", ".", "cur_path", ",", "\"singlecoil_\"", "+", "mode", "+", "\"_split_less.csv\"", ")", "\n", "# \u8bfb\u53d6CSV", "\n", "", "with", "open", "(", "self", ".", "csv_file", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "reader", "=", "csv", ".", "reader", "(", "f", ")", "\n", "\n", "for", "row", "in", "reader", ":", "\n", "                ", "if", "not", "pattern", "==", "'pd+pdfs'", ":", "\n", "                    ", "if", "pattern", "==", "'pd'", "or", "pattern", "==", "'mix0'", ":", "\n", "                        ", "idx", "=", "0", "\n", "", "elif", "pattern", "==", "'pdfs'", "or", "pattern", "==", "'mix1'", ":", "\n", "                        ", "idx", "=", "1", "\n", "\n", "", "metadata", ",", "num_slices", "=", "self", ".", "_retrieve_metadata", "(", "os", ".", "path", ".", "join", "(", "self", ".", "cur_path", ",", "row", "[", "idx", "]", "+", "'.h5'", ")", ")", "\n", "\n", "for", "slice_id", "in", "range", "(", "num_slices", ")", ":", "\n", "                        ", "self", ".", "examples", ".", "append", "(", "(", "os", ".", "path", ".", "join", "(", "self", ".", "cur_path", ",", "row", "[", "idx", "]", "+", "'.h5'", ")", ",", "slice_id", ",", "metadata", ")", ")", "\n", "\n", "", "", "else", ":", "\n", "                    ", "pd_metadata", ",", "pd_num_slices", "=", "self", ".", "_retrieve_metadata", "(", "os", ".", "path", ".", "join", "(", "self", ".", "cur_path", ",", "row", "[", "0", "]", "+", "'.h5'", ")", ")", "\n", "\n", "pdfs_metadata", ",", "pdfs_num_slices", "=", "self", ".", "_retrieve_metadata", "(", "os", ".", "path", ".", "join", "(", "self", ".", "cur_path", ",", "row", "[", "1", "]", "+", "'.h5'", ")", ")", "\n", "\n", "for", "slice_id", "in", "range", "(", "min", "(", "pd_num_slices", ",", "pdfs_num_slices", ")", ")", ":", "\n", "                        ", "self", ".", "examples", ".", "append", "(", "\n", "(", "os", ".", "path", ".", "join", "(", "self", ".", "cur_path", ",", "row", "[", "0", "]", "+", "'.h5'", ")", ",", "slice_id", ",", "pd_metadata", ")", ")", "\n", "self", ".", "examples", ".", "append", "(", "\n", "(", "os", ".", "path", ".", "join", "(", "self", ".", "cur_path", ",", "row", "[", "1", "]", "+", "'.h5'", ")", ",", "slice_id", ",", "pdfs_metadata", ")", ")", "\n", "\n", "", "", "", "", "if", "sample_rate", "<", "1", ":", "\n", "            ", "random", ".", "shuffle", "(", "self", ".", "examples", ")", "\n", "num_examples", "=", "round", "(", "len", "(", "self", ".", "examples", ")", "*", "sample_rate", ")", "\n", "\n", "self", ".", "examples", "=", "self", ".", "examples", "[", "0", ":", "num_examples", "]", "\n", "\n", "", "", "def", "__len__", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.fastmri.SliceDataset.__len__": [[554, 556], ["len"], "methods", ["None"], ["        ", "return", "len", "(", "self", ".", "examples", ")", "\n", "\n", "", "def", "__getitem__", "(", "self", ",", "i", ")", ":", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.fastmri.SliceDataset.__getitem__": [[557, 579], ["h5py.File", "dict", "dict.update", "fastmri.SliceDataset.transform", "numpy.asarray"], "methods", ["home.repos.pwc.inspect_result.chunmeifeng_fedmri.util.metric.AverageMeter.update"], ["\n", "# \u8bfb\u53d6pd", "\n", "        ", "fname", ",", "slice", ",", "metadata", "=", "self", ".", "examples", "[", "i", "]", "\n", "\n", "with", "h5py", ".", "File", "(", "fname", ",", "\"r\"", ")", "as", "hf", ":", "\n", "            ", "kspace", "=", "hf", "[", "\"kspace\"", "]", "[", "slice", "]", "\n", "\n", "mask", "=", "np", ".", "asarray", "(", "hf", "[", "\"mask\"", "]", ")", "if", "\"mask\"", "in", "hf", "else", "None", "\n", "\n", "target", "=", "hf", "[", "self", ".", "recons_key", "]", "[", "slice", "]", "if", "self", ".", "recons_key", "in", "hf", "else", "None", "\n", "\n", "attrs", "=", "dict", "(", "hf", ".", "attrs", ")", "\n", "\n", "attrs", ".", "update", "(", "metadata", ")", "\n", "\n", "", "if", "self", ".", "transform", "is", "None", ":", "\n", "            ", "sample", "=", "(", "kspace", ",", "mask", ",", "target", ",", "attrs", ",", "fname", ",", "slice", ")", "\n", "", "else", ":", "\n", "            ", "sample", "=", "self", ".", "transform", "(", "kspace", ",", "mask", ",", "target", ",", "attrs", ",", "fname", ",", "slice", ")", "\n", "\n", "", "return", "sample", "# image, target, mean, std, fname, slice_num", "\n", "\n", "", "def", "_retrieve_metadata", "(", "self", ",", "fname", ")", ":", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.fastmri.SliceDataset._retrieve_metadata": [[580, 614], ["h5py.File", "xml.fromstring", "int", "int", "int", "int", "int", "int", "int", "fastmri.et_query", "int", "fastmri.et_query", "fastmri.et_query", "fastmri.et_query", "fastmri.et_query", "fastmri.et_query", "fastmri.et_query", "fastmri.et_query"], "methods", ["home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.fastmri.et_query", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.fastmri.et_query", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.fastmri.et_query", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.fastmri.et_query", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.fastmri.et_query", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.fastmri.et_query", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.fastmri.et_query", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.fastmri.et_query"], ["        ", "with", "h5py", ".", "File", "(", "fname", ",", "\"r\"", ")", "as", "hf", ":", "\n", "            ", "et_root", "=", "etree", ".", "fromstring", "(", "hf", "[", "\"ismrmrd_header\"", "]", "[", "(", ")", "]", ")", "\n", "\n", "enc", "=", "[", "\"encoding\"", ",", "\"encodedSpace\"", ",", "\"matrixSize\"", "]", "\n", "enc_size", "=", "(", "\n", "int", "(", "et_query", "(", "et_root", ",", "enc", "+", "[", "\"x\"", "]", ")", ")", ",", "\n", "int", "(", "et_query", "(", "et_root", ",", "enc", "+", "[", "\"y\"", "]", ")", ")", ",", "\n", "int", "(", "et_query", "(", "et_root", ",", "enc", "+", "[", "\"z\"", "]", ")", ")", ",", "\n", ")", "\n", "rec", "=", "[", "\"encoding\"", ",", "\"reconSpace\"", ",", "\"matrixSize\"", "]", "\n", "recon_size", "=", "(", "\n", "int", "(", "et_query", "(", "et_root", ",", "rec", "+", "[", "\"x\"", "]", ")", ")", ",", "\n", "int", "(", "et_query", "(", "et_root", ",", "rec", "+", "[", "\"y\"", "]", ")", ")", ",", "\n", "int", "(", "et_query", "(", "et_root", ",", "rec", "+", "[", "\"z\"", "]", ")", ")", ",", "\n", ")", "\n", "\n", "lims", "=", "[", "\"encoding\"", ",", "\"encodingLimits\"", ",", "\"kspace_encoding_step_1\"", "]", "\n", "enc_limits_center", "=", "int", "(", "et_query", "(", "et_root", ",", "lims", "+", "[", "\"center\"", "]", ")", ")", "\n", "enc_limits_max", "=", "int", "(", "et_query", "(", "et_root", ",", "lims", "+", "[", "\"maximum\"", "]", ")", ")", "+", "1", "\n", "\n", "padding_left", "=", "enc_size", "[", "1", "]", "//", "2", "-", "enc_limits_center", "\n", "padding_right", "=", "padding_left", "+", "enc_limits_max", "\n", "\n", "num_slices", "=", "hf", "[", "\"kspace\"", "]", ".", "shape", "[", "0", "]", "\n", "\n", "", "metadata", "=", "{", "\n", "\"padding_left\"", ":", "padding_left", ",", "\n", "\"padding_right\"", ":", "padding_right", ",", "\n", "\"encoding_size\"", ":", "enc_size", ",", "\n", "\"recon_size\"", ":", "recon_size", ",", "\n", "}", "\n", "\n", "return", "metadata", ",", "num_slices", "\n", "\n", "#-----------------------------------------------------------------------------------------------------------------------------", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.fastmri.imshow": [[32, 43], ["matplotlib.figure", "matplotlib.axis", "matplotlib.title", "matplotlib.imsave", "print", "numpy.abs"], "function", ["None"], ["def", "imshow", "(", "img", ",", "title", "=", "\"\"", ")", ":", "\n", "    ", "\"\"\" Show image as grayscale. \"\"\"", "\n", "if", "img", ".", "dtype", "==", "np", ".", "complex64", "or", "img", ".", "dtype", "==", "np", ".", "complex128", ":", "\n", "        ", "print", "(", "'img is complex! Take absolute value.'", ")", "\n", "img", "=", "np", ".", "abs", "(", "img", ")", "\n", "\n", "", "plt", ".", "figure", "(", ")", "\n", "# plt.imshow(img, cmap='gray', interpolation='nearest')", "\n", "plt", ".", "axis", "(", "'off'", ")", "\n", "plt", ".", "title", "(", "title", ")", "\n", "plt", ".", "imsave", "(", "'{}.png'", ".", "format", "(", "title", ")", ",", "img", ",", "cmap", "=", "'gray'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.fastmri.norm": [[44, 47], ["data.min", "data.max", "data.min"], "function", ["home.repos.pwc.inspect_result.chunmeifeng_fedmri.util.misc.SmoothedValue.max"], ["", "def", "norm", "(", "data", ",", "eps", "=", "1e-11", ")", ":", "\n", "    ", "data", "=", "(", "data", "-", "data", ".", "min", "(", ")", ")", "/", "(", "data", ".", "max", "(", ")", "-", "data", ".", "min", "(", ")", "+", "eps", ")", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.fastmri.fetch_dir": [[48, 84], ["pathlib.Path", "pathlib.Path", "data_config_file.is_file", "dict", "ValueError", "open", "pathlib.Path.exists", "ValueError", "open", "yaml.dump", "yaml.safe_load"], "function", ["None"], ["", "def", "fetch_dir", "(", "key", ",", "data_config_file", "=", "pathlib", ".", "Path", "(", "\"fastmri_dirs.yaml\"", ")", ")", ":", "\n", "    ", "\"\"\"\n    Data directory fetcher.\n\n    This is a brute-force simple way to configure data directories for a\n    project. Simply overwrite the variables for `knee_path` and `brain_path`\n    and this function will retrieve the requested subsplit of the data for use.\n\n    Args:\n        key (str): key to retrieve path from data_config_file.\n        data_config_file (pathlib.Path,\n            default=pathlib.Path(\"fastmri_dirs.yaml\")): Default path config\n            file.\n\n    Returns:\n        pathlib.Path: The path to the specified directory.\n    \"\"\"", "\n", "if", "not", "data_config_file", ".", "is_file", "(", ")", ":", "\n", "        ", "default_config", "=", "dict", "(", "\n", "knee_path", "=", "\"/home/jc3/Data/\"", ",", "\n", "brain_path", "=", "\"/home/jc3/Data/\"", ",", "\n", ")", "\n", "with", "open", "(", "data_config_file", ",", "\"w\"", ")", "as", "f", ":", "\n", "            ", "yaml", ".", "dump", "(", "default_config", ",", "f", ")", "\n", "\n", "", "raise", "ValueError", "(", "f\"Please populate {data_config_file} with directory paths.\"", ")", "\n", "\n", "", "with", "open", "(", "data_config_file", ",", "\"r\"", ")", "as", "f", ":", "\n", "        ", "data_dir", "=", "yaml", ".", "safe_load", "(", "f", ")", "[", "key", "]", "\n", "\n", "", "data_dir", "=", "pathlib", ".", "Path", "(", "data_dir", ")", "\n", "\n", "if", "not", "data_dir", ".", "exists", "(", ")", ":", "\n", "        ", "raise", "ValueError", "(", "f\"Path {data_dir} from {data_config_file} does not exist.\"", ")", "\n", "\n", "", "return", "data_dir", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.fastmri.et_query": [[86, 116], ["root.find", "str", "RuntimeError"], "function", ["None"], ["", "def", "et_query", "(", "\n", "root", ":", "etree", ".", "Element", ",", "\n", "qlist", ":", "Sequence", "[", "str", "]", ",", "\n", "namespace", ":", "str", "=", "\"http://www.ismrm.org/ISMRMRD\"", ",", "\n", ")", "->", "str", ":", "\n", "    ", "\"\"\"\n    ElementTree query function.\n    This can be used to query an xml document via ElementTree. It uses qlist\n    for nested queries.\n    Args:\n        root: Root of the xml to search through.\n        qlist: A list of strings for nested searches, e.g. [\"Encoding\",\n            \"matrixSize\"]\n        namespace: Optional; xml namespace to prepend query.\n    Returns:\n        The retrieved data as a string.\n    \"\"\"", "\n", "s", "=", "\".\"", "\n", "prefix", "=", "\"ismrmrd_namespace\"", "\n", "\n", "ns", "=", "{", "prefix", ":", "namespace", "}", "\n", "\n", "for", "el", "in", "qlist", ":", "\n", "        ", "s", "=", "s", "+", "f\"//{prefix}:{el}\"", "\n", "\n", "", "value", "=", "root", ".", "find", "(", "s", ",", "ns", ")", "\n", "if", "value", "is", "None", ":", "\n", "        ", "raise", "RuntimeError", "(", "\"Element not found\"", ")", "\n", "\n", "", "return", "str", "(", "value", ".", "text", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.fastmri.create_datasets": [[617, 657], ["transforms.build_transforms", "os.path.join", "fastmri.JiangSudataset", "open", "yaml.load", "types.SimpleNamespace", "os.path.join", "os.path.join", "fastmri.LianYingdataset", "client_name.lower", "open", "yaml.load", "types.SimpleNamespace", "os.path.join", "os.path.join", "fastmri.IXIdataset", "client_name.lower", "open", "yaml.load", "types.SimpleNamespace", "os.path.join", "client_name.find", "os.path.join", "fastmri.IXIdataset", "fastmri.SliceDataset", "client_name.lower", "open", "yaml.load", "types.SimpleNamespace", "os.path.join", "os.path.join", "[].lower", "client_name.split"], "function", ["home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.transforms.build_transforms"], ["    ", "assert", "mode", "in", "[", "'train'", ",", "'val'", ",", "'test'", "]", ",", "'unknown mode'", "\n", "transforms", "=", "build_transforms", "(", "args", ",", "mode", ",", "client_name", "=", "client_name", ")", "\n", "\n", "\n", "if", "client_name", "==", "'JiangSu'", ":", "\n", "# path_config = os.path.join(args.DATASET.ROOT, 'JiangSu', 'config.yaml')", "\n", "        ", "path_config", "=", "os", ".", "path", ".", "join", "(", "'./config/config_{}.yaml'", ".", "format", "(", "client_name", ".", "lower", "(", ")", ")", ")", "\n", "with", "open", "(", "path_config", ")", "as", "f", ":", "\n", "            ", "data", "=", "yaml", ".", "load", "(", "f", ",", "Loader", "=", "yaml", ".", "FullLoader", ")", "\n", "ixi_args", "=", "SimpleNamespace", "(", "**", "data", ")", "\n", "", "return", "JiangSudataset", "(", "os", ".", "path", ".", "join", "(", "args", ".", "DATASET", ".", "ROOT", "[", "2", "]", ",", "'JiangSu'", ")", ",", "transforms", ",", "ixi_args", ",", "args", ".", "DATASET", ".", "CHALLENGE", ",", "\n", "sample_rate", "=", "sample_rate", ",", "mode", "=", "mode", ",", "pattern", "=", "pattern", ")", "\n", "\n", "", "elif", "client_name", "==", "'lianying'", ":", "\n", "        ", "path_config", "=", "os", ".", "path", ".", "join", "(", "'./config/config_{}.yaml'", ".", "format", "(", "client_name", ".", "lower", "(", ")", ")", ")", "\n", "with", "open", "(", "path_config", ")", "as", "f", ":", "\n", "            ", "data", "=", "yaml", ".", "load", "(", "f", ",", "Loader", "=", "yaml", ".", "FullLoader", ")", "\n", "ixi_args", "=", "SimpleNamespace", "(", "**", "data", ")", "\n", "", "return", "LianYingdataset", "(", "os", ".", "path", ".", "join", "(", "args", ".", "DATASET", ".", "ROOT", "[", "3", "]", ",", "'lianying'", ")", ",", "transforms", ",", "ixi_args", ",", "args", ".", "DATASET", ".", "CHALLENGE", ",", "\n", "sample_rate", "=", "sample_rate", ",", "mode", "=", "mode", ",", "pattern", "=", "pattern", ")", "\n", "\n", "", "elif", "client_name", "==", "'IXI'", ":", "\n", "        ", "path_config", "=", "os", ".", "path", ".", "join", "(", "'./config/config_{}.yaml'", ".", "format", "(", "client_name", ".", "lower", "(", ")", ")", ")", "\n", "with", "open", "(", "path_config", ")", "as", "f", ":", "\n", "            ", "data", "=", "yaml", ".", "load", "(", "f", ",", "Loader", "=", "yaml", ".", "FullLoader", ")", "\n", "ixi_args", "=", "SimpleNamespace", "(", "**", "data", ")", "\n", "", "return", "IXIdataset", "(", "os", ".", "path", ".", "join", "(", "args", ".", "DATASET", ".", "ROOT", ",", "ixi_args", ".", "dataset", ",", "'h5'", ",", "mode", ")", ",", "transforms", ",", "ixi_args", ",", "args", ".", "DATASET", ".", "CHALLENGE", ",", "\n", "sample_rate", "=", "sample_rate", ",", "mode", "=", "mode", ",", "pattern", "=", "pattern", ")", "\n", "\n", "", "elif", "client_name", ".", "find", "(", "'IXI_zi_'", ")", ">=", "0", ":", "\n", "        ", "path_config", "=", "os", ".", "path", ".", "join", "(", "'./config/config_{}.yaml'", ".", "format", "(", "client_name", ".", "split", "(", "'_'", ")", "[", "0", "]", ".", "lower", "(", ")", ")", ")", "\n", "with", "open", "(", "path_config", ")", "as", "f", ":", "\n", "            ", "data", "=", "yaml", ".", "load", "(", "f", ",", "Loader", "=", "yaml", ".", "FullLoader", ")", "\n", "ixi_args", "=", "SimpleNamespace", "(", "**", "data", ")", "\n", "", "return", "IXIdataset", "(", "os", ".", "path", ".", "join", "(", "args", ".", "DATASET", ".", "ROOT", ",", "ixi_args", ".", "dataset", ",", "'h5'", ",", "mode", ")", ",", "transforms", ",", "ixi_args", ",", "args", ".", "DATASET", ".", "CHALLENGE", ",", "\n", "sample_rate", "=", "sample_rate", ",", "mode", "=", "mode", ",", "pattern", "=", "pattern", ",", "client_name", "=", "client_name", ",", "client_num", "=", "client_num", ")", "\n", "", "else", ":", "\n", "        ", "return", "SliceDataset", "(", "os", ".", "path", ".", "join", "(", "args", ".", "DATASET", ".", "ROOT", ",", "client_name", ",", "'singlecoil_'", "+", "mode", ")", ",", "transforms", ",", "args", ".", "DATASET", ".", "CHALLENGE", ",", "\n", "sample_rate", "=", "sample_rate", ",", "mode", "=", "mode", ",", "pattern", "=", "pattern", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.dicom_mix.FastMRIDicom_Split.__init__": [[19, 46], ["range", "range", "open", "scipy.io.loadmat", "round", "len", "split_paths[].append", "line.strip", "range", "random.shuffle", "line.split", "paths.append", "len"], "methods", ["None"], ["", "def", "vis_img", "(", "img", ",", "fname", ",", "ftype", ",", "output_dir", ")", ":", "\n", "    ", "os", ".", "makedirs", "(", "output_dir", ",", "exist_ok", "=", "True", ")", "\n", "plt", ".", "figure", "(", ")", "\n", "plt", ".", "imshow", "(", "img", ",", "cmap", "=", "'gray'", ")", "\n", "figname", "=", "fname", "+", "'_'", "+", "ftype", "+", "'.png'", "\n", "figpath", "=", "os", ".", "path", ".", "join", "(", "output_dir", ",", "figname", ")", "\n", "plt", ".", "savefig", "(", "figpath", ")", "\n", "", "class", "FastMRIDicom_Split", "(", "Dataset", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "list_file", ",", "mask", ",", "crop_size", "=", "(", "192", ",", "192", ")", ",", "client_idx", "=", "0", ",", "client_num", "=", "2", ",", "mode", "=", "'train'", ",", "sample_rate", "=", "1", ")", ":", "\n", "        ", "paths", "=", "[", "]", "\n", "with", "open", "(", "list_file", ")", "as", "f", ":", "\n", "            ", "for", "line", "in", "f", ":", "\n", "                ", "path", "=", "line", ".", "strip", "(", ")", "\n", "name", "=", "line", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "\n", "for", "slice", "in", "range", "(", "0", ",", "32", ")", ":", "\n", "                    ", "paths", ".", "append", "(", "(", "path", ",", "slice", ",", "name", ")", ")", "\n", "\n", "", "", "", "self", ".", "paths", "=", "paths", "\n", "self", ".", "crop_size", "=", "crop_size", "\n", "self", ".", "mask", "=", "loadmat", "(", "mask", "[", "client_idx", "]", ")", "[", "'mask'", "]", "\n", "\n", "if", "sample_rate", "<", "1", ":", "\n", "            ", "if", "mode", "==", "'train'", ":", "\n", "                ", "random", ".", "shuffle", "(", "paths", ")", "\n", "", "num_examples", "=", "round", "(", "len", "(", "paths", ")", "*", "sample_rate", ")", "\n", "paths", "=", "paths", "[", "0", ":", "num_examples", "]", "\n", "\n", "", "split_paths", "=", "{", "}", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.dicom_mix.FastMRIDicom_Split.__getitem__": [[48, 70], ["os.path.join", "img_path.replace.replace.replace", "dicom_mix.fft2", "transforms.center_crop", "abs", "abs", "transforms.normalize_instance", "transforms.normalize", "torch.from_numpy().float", "torch.from_numpy().float", "scipy.io.loadmat", "numpy.fft.ifft2", "numpy.fft.ifft2", "str", "torch.from_numpy", "torch.from_numpy"], "methods", ["home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.dicom_mix.fft2", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.fastmri.JiangSudataset.center_crop", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.transforms.normalize_instance", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.transforms.normalize", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.fastmri.JiangSudataset.ifft2", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.fastmri.JiangSudataset.ifft2"], ["            ", "split_paths", "[", "i", "]", "=", "[", "]", "\n", "\n", "", "for", "i", "in", "range", "(", "len", "(", "paths", ")", ")", ":", "\n", "            ", "split_paths", "[", "i", "%", "client_num", "]", ".", "append", "(", "paths", "[", "i", "]", ")", "\n", "\n", "", "self", ".", "examples", "=", "split_paths", "[", "client_idx", "]", "\n", "\n", "\n", "", "def", "__getitem__", "(", "self", ",", "item", ")", ":", "\n", "        ", "path", ",", "slice", ",", "fname", "=", "self", ".", "examples", "[", "item", "]", "\n", "\n", "img_path", "=", "os", ".", "path", ".", "join", "(", "path", ",", "str", "(", "slice", ")", "+", "'.mat'", ")", "\n", "img_path", "=", "img_path", ".", "replace", "(", "'fastMRI_brain_DICOM'", ",", "'fastMRI_brain_DICOM_mat'", ")", "\n", "img", "=", "loadmat", "(", "img_path", ")", "[", "'img'", "]", "\n", "\n", "\n", "kspace", "=", "fft2", "(", "img", ")", "\n", "kspace", "=", "center_crop", "(", "kspace", ",", "self", ".", "crop_size", ")", "\n", "maskedkspace", "=", "kspace", "*", "self", ".", "mask", "\n", "\n", "subsample", "=", "abs", "(", "np", ".", "fft", ".", "ifft2", "(", "maskedkspace", ")", ")", "\n", "target", "=", "abs", "(", "np", ".", "fft", ".", "ifft2", "(", "kspace", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.dicom_mix.FastMRIDicom_Split.__len__": [[71, 73], ["len"], "methods", ["None"], ["subsample", ",", "mean", ",", "std", "=", "normalize_instance", "(", "subsample", ",", "eps", "=", "1e-11", ")", "\n", "target", "=", "normalize", "(", "target", ",", "mean", ",", "std", ",", "eps", "=", "1e-11", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.dicom_mix.FastMRIDicom_Split.collate": [[74, 76], ["torch.cat", "zip"], "methods", ["None"], ["subsample", "=", "torch", ".", "from_numpy", "(", "subsample", ")", ".", "float", "(", ")", "\n", "target", "=", "torch", ".", "from_numpy", "(", "target", ")", ".", "float", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.dicom_mix.FastMRIDicom.__init__": [[78, 97], ["open", "scipy.io.loadmat", "round", "line.strip", "range", "random.shuffle", "line.strip().split", "paths.append", "len", "line.strip"], "methods", ["None"], ["\n", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "examples", ")", "\n", "\n", "", "def", "collate", "(", "self", ",", "batch", ")", ":", "\n", "        ", "return", "[", "torch", ".", "cat", "(", "v", ")", "for", "v", "in", "zip", "(", "*", "batch", ")", "]", "\n", "\n", "", "", "class", "FastMRIDicom", "(", "Dataset", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "list_file", ",", "mask", ",", "crop_size", "=", "(", "192", ",", "192", ")", ",", "mode", "=", "'train'", ",", "sample_rate", "=", "1", ")", ":", "\n", "        ", "paths", "=", "[", "]", "\n", "with", "open", "(", "list_file", ")", "as", "f", ":", "\n", "            ", "for", "line", "in", "f", ":", "\n", "                ", "path", "=", "line", ".", "strip", "(", ")", "\n", "name", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "\n", "for", "slice", "in", "range", "(", "0", ",", "32", ")", ":", "\n", "                    ", "paths", ".", "append", "(", "(", "path", ",", "slice", ",", "name", ")", ")", "\n", "\n", "", "", "", "self", ".", "crop_size", "=", "crop_size", "\n", "self", ".", "mask", "=", "loadmat", "(", "mask", ")", "[", "'mask'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.dicom_mix.FastMRIDicom.__getitem__": [[98, 118], ["os.path.join", "img_path.replace.replace.replace", "dicom_mix.fft2", "transforms.center_crop", "abs", "abs", "transforms.normalize_instance", "transforms.normalize", "torch.from_numpy().float", "torch.from_numpy().float", "scipy.io.loadmat", "numpy.fft.ifft2", "numpy.fft.ifft2", "str", "torch.from_numpy", "torch.from_numpy"], "methods", ["home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.dicom_mix.fft2", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.fastmri.JiangSudataset.center_crop", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.transforms.normalize_instance", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.transforms.normalize", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.fastmri.JiangSudataset.ifft2", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.fastmri.JiangSudataset.ifft2"], ["if", "sample_rate", "<", "1", ":", "\n", "            ", "if", "mode", "==", "'train'", ":", "\n", "                ", "random", ".", "shuffle", "(", "paths", ")", "\n", "", "num_examples", "=", "round", "(", "len", "(", "paths", ")", "*", "sample_rate", ")", "\n", "self", ".", "examples", "=", "paths", "[", "0", ":", "num_examples", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "examples", "=", "paths", "\n", "\n", "", "", "def", "__getitem__", "(", "self", ",", "item", ")", ":", "\n", "        ", "path", ",", "slice", ",", "fname", "=", "self", ".", "examples", "[", "item", "]", "\n", "img_path", "=", "os", ".", "path", ".", "join", "(", "path", ",", "str", "(", "slice", ")", "+", "'.mat'", ")", "\n", "img_path", "=", "img_path", ".", "replace", "(", "'fastMRI_brain_DICOM'", ",", "'fastMRI_brain_DICOM_mat'", ")", "\n", "img", "=", "loadmat", "(", "img_path", ")", "[", "'img'", "]", "\n", "\n", "kspace", "=", "fft2", "(", "img", ")", "\n", "kspace", "=", "center_crop", "(", "kspace", ",", "self", ".", "crop_size", ")", "\n", "maskedkspace", "=", "kspace", "*", "self", ".", "mask", "\n", "\n", "maskedkspace", "=", "to_tensor", "(", "maskedkspace", ")", "\n", "\n", "subsample", "=", "complex_abs", "(", "ifft2c", "(", "maskedkspace", ")", ")", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.dicom_mix.FastMRIDicom.__len__": [[119, 121], ["len"], "methods", ["None"], ["\n", "kspace", "=", "to_tensor", "(", "kspace", ")", "\n", "target", "=", "complex_abs", "(", "ifft2c", "(", "kspace", ")", ")", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.dicom_mix.FastMRIDicom.collate": [[122, 124], ["torch.cat", "zip"], "methods", ["None"], ["\n", "subsample", ",", "mean", ",", "std", "=", "normalize_instance", "(", "subsample", ",", "eps", "=", "1e-11", ")", "\n", "target", "=", "normalize", "(", "target", ",", "mean", ",", "std", ",", "eps", "=", "1e-11", ")", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.dicom_mix.fft2": [[11, 13], ["numpy.fft.fftshift", "numpy.fft.fft2"], "function", ["home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.math.fftshift", "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.dicom_mix.fft2"], ["from", "matplotlib", "import", "pyplot", "as", "plt", "\n", "from", ".", "math", "import", "*", "\n", "def", "fft2", "(", "img", ")", ":", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.dicom_mix.load_scan": [[14, 17], ["pydicom.read_file", "os.listdir"], "function", ["None"], ["    ", "return", "np", ".", "fft", ".", "fftshift", "(", "np", ".", "fft", ".", "fft2", "(", "np", ".", "fft", ".", "ifftshift", "(", "img", ")", ")", ")", "\n", "\n", "", "def", "load_scan", "(", "path", ")", ":", "\n", "    ", "slices", "=", "[", "pydicom", ".", "read_file", "(", "path", "+", "'/'", "+", "s", ")", "for", "s", "in", "os", ".", "listdir", "(", "path", ")", "]", "\n"]], "home.repos.pwc.inspect_result.chunmeifeng_fedmri.data.dicom_mix.build_fastmri_dataset": [[125, 133], ["os.path.join", "dicom_mix.FastMRIDicom", "os.path.join", "os.path.join"], "function", ["None"], ["\n", "maskedkspace", "=", "maskedkspace", ".", "float", "(", ")", "\n", "target", "=", "target", ".", "float", "(", ")", "\n", "\n", "return", "maskedkspace", ",", "self", ".", "mask", ",", "target", ",", "mean", ",", "std", ",", "fname", ",", "slice", "\n", "\n", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "examples", ")", "\n", "\n"]]}