{"home.repos.pwc.inspect_result.daiquocnguyen_R-MeN.RMeN_pytorch.RMeN.RMeN.__init__": [[23, 50], ["Model.Model.__init__", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "relational_rnn_general.RelationalMemory().to", "RMeN.RMeN.transformer_rel_rnn.initial_state().to", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Softplus", "torch.Softplus", "torch.Softplus", "torch.Softplus", "torch.Softplus", "RMeN.RMeN.init_parameters", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "relational_rnn_general.RelationalMemory", "RMeN.RMeN.transformer_rel_rnn.initial_state"], "methods", ["home.repos.pwc.inspect_result.daiquocnguyen_R-MeN.RMeN_tf.model_R_MeN_TripleCls_CNN.RMeN.__init__", "home.repos.pwc.inspect_result.daiquocnguyen_R-MeN.RMeN_pytorch.RMeN_v1.RMeN.init_parameters", "home.repos.pwc.inspect_result.daiquocnguyen_R-MeN.RMeN_pytorch.relational_rnn_general.RelationalMemory.initial_state"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "RMeN", ",", "self", ")", ".", "__init__", "(", "config", ")", "\n", "\n", "self", ".", "ent_embeddings", "=", "nn", ".", "Embedding", "(", "self", ".", "config", ".", "entTotal", ",", "self", ".", "config", ".", "hidden_size", ")", "# vectorized quaternion", "\n", "self", ".", "rel_embeddings", "=", "nn", ".", "Embedding", "(", "self", ".", "config", ".", "relTotal", ",", "self", ".", "config", ".", "hidden_size", ")", "\n", "\n", "self", ".", "pos_h", "=", "nn", ".", "Parameter", "(", "nn", ".", "init", ".", "xavier_uniform_", "(", "torch", ".", "Tensor", "(", "1", ",", "self", ".", "config", ".", "hidden_size", ")", ")", ")", "\n", "self", ".", "pos_r", "=", "nn", ".", "Parameter", "(", "nn", ".", "init", ".", "xavier_uniform_", "(", "torch", ".", "Tensor", "(", "1", ",", "self", ".", "config", ".", "hidden_size", ")", ")", ")", "\n", "self", ".", "pos_t", "=", "nn", ".", "Parameter", "(", "nn", ".", "init", ".", "xavier_uniform_", "(", "torch", ".", "Tensor", "(", "1", ",", "self", ".", "config", ".", "hidden_size", ")", ")", ")", "\n", "\n", "self", ".", "transformer_rel_rnn", "=", "RelationalMemory", "(", "\n", "mem_slots", "=", "self", ".", "config", ".", "mem_slots", ",", "head_size", "=", "self", ".", "config", ".", "head_size", ",", "\n", "num_heads", "=", "self", ".", "config", ".", "num_heads", ",", "input_size", "=", "self", ".", "config", ".", "hidden_size", ",", "\n", "gate_style", "=", "self", ".", "config", ".", "gate_style", ",", "attention_mlp_layers", "=", "self", ".", "config", ".", "attention_mlp_layers", ",", "\n", "return_all_outputs", "=", "True", "\n", ")", ".", "to", "(", "device", ")", "\n", "self", ".", "model_memory", "=", "self", ".", "transformer_rel_rnn", ".", "initial_state", "(", "self", ".", "config", ".", "batch_seq_size", ")", ".", "to", "(", "device", ")", "\n", "\n", "self", ".", "conv1_bn", "=", "nn", ".", "BatchNorm2d", "(", "1", ")", "\n", "self", ".", "conv_layer", "=", "nn", ".", "Conv2d", "(", "1", ",", "self", ".", "config", ".", "out_channels", ",", "(", "1", ",", "3", ")", ")", "# kernel size x 3", "\n", "self", ".", "conv2_bn", "=", "nn", ".", "BatchNorm2d", "(", "self", ".", "config", ".", "out_channels", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "self", ".", "config", ".", "convkb_drop_prob", ")", "\n", "self", ".", "non_linearity", "=", "nn", ".", "ReLU", "(", ")", "\n", "self", ".", "fc_layer", "=", "nn", ".", "Linear", "(", "self", ".", "config", ".", "out_channels", ",", "1", ")", "\n", "\n", "self", ".", "criterion", "=", "nn", ".", "Softplus", "(", ")", "\n", "self", ".", "init_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daiquocnguyen_R-MeN.RMeN_pytorch.RMeN.RMeN.init_parameters": [[51, 62], ["torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_"], "methods", ["None"], ["", "def", "init_parameters", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "config", ".", "use_init_embeddings", "==", "False", ":", "\n", "            ", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "ent_embeddings", ".", "weight", ".", "data", ")", "\n", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "rel_embeddings", ".", "weight", ".", "data", ")", "\n", "\n", "", "else", ":", "\n", "            ", "self", ".", "ent_embeddings", ".", "weight", ".", "data", "=", "self", ".", "config", ".", "init_ent_embs", "\n", "self", ".", "rel_embeddings", ".", "weight", ".", "data", "=", "self", ".", "config", ".", "init_rel_embs", "\n", "\n", "", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "fc_layer", ".", "weight", ".", "data", ")", "\n", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "conv_layer", ".", "weight", ".", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daiquocnguyen_R-MeN.RMeN_pytorch.RMeN.RMeN._calc": [[63, 96], ["h.unsqueeze.unsqueeze.unsqueeze", "r.unsqueeze.unsqueeze.unsqueeze", "t.unsqueeze.unsqueeze.unsqueeze", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "RMeN.RMeN.transformer_rel_rnn", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "h.unsqueeze.unsqueeze.unsqueeze", "r.unsqueeze.unsqueeze.unsqueeze", "t.unsqueeze.unsqueeze.unsqueeze", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat.transpose", "torch.cat.transpose", "torch.cat.transpose", "torch.cat.transpose", "torch.cat.transpose", "RMeN.RMeN.unsqueeze", "RMeN.RMeN.conv1_bn", "RMeN.RMeN.conv_layer", "RMeN.RMeN.conv2_bn", "RMeN.RMeN.non_linearity", "torch.max_pool1d().squeeze.squeeze", "torch.max_pool1d().squeeze", "torch.max_pool1d().squeeze", "torch.max_pool1d().squeeze", "torch.max_pool1d().squeeze", "torch.max_pool1d().squeeze", "RMeN.RMeN.dropout", "RMeN.RMeN.fc_layer().view", "torch.max_pool1d", "torch.max_pool1d", "torch.max_pool1d", "torch.max_pool1d", "torch.max_pool1d", "RMeN.RMeN.fc_layer", "torch.max_pool1d().squeeze.size"], "methods", ["None"], ["", "def", "_calc", "(", "self", ",", "h", ",", "r", ",", "t", ")", ":", "\n", "        ", "if", "self", ".", "config", ".", "use_pos", ":", "\n", "            ", "h", "=", "h", "+", "self", ".", "pos_h", "\n", "r", "=", "r", "+", "self", ".", "pos_r", "\n", "t", "=", "t", "+", "self", ".", "pos_t", "\n", "\n", "", "h", "=", "h", ".", "unsqueeze", "(", "1", ")", "# bs x 1 x dim", "\n", "r", "=", "r", ".", "unsqueeze", "(", "1", ")", "\n", "t", "=", "t", ".", "unsqueeze", "(", "1", ")", "\n", "hrt", "=", "torch", ".", "cat", "(", "[", "h", ",", "r", ",", "t", "]", ",", "1", ")", "# bs x 3 x dim", "\n", "\n", "# forward pass", "\n", "trans_rel_rnn_output", ",", "_", "=", "self", ".", "transformer_rel_rnn", "(", "hrt", ",", "self", ".", "model_memory", ")", "# concatenate outputs (h, r, t) dim 0 --> (3xbs) x (head_size * num_head)", "\n", "h", ",", "r", ",", "t", "=", "torch", ".", "split", "(", "trans_rel_rnn_output", ",", "self", ".", "config", ".", "batch_seq_size", ",", "dim", "=", "0", ")", "\n", "\n", "h", "=", "h", ".", "unsqueeze", "(", "1", ")", "# bs x 1 x mem_size", "\n", "r", "=", "r", ".", "unsqueeze", "(", "1", ")", "\n", "t", "=", "t", ".", "unsqueeze", "(", "1", ")", "\n", "hrt", "=", "torch", ".", "cat", "(", "[", "h", ",", "r", ",", "t", "]", ",", "1", ")", "# bs x 3 x mem_size", "\n", "\n", "conv_input", "=", "hrt", ".", "transpose", "(", "1", ",", "2", ")", "\n", "# To make tensor of size 4, where second dim is for input channels", "\n", "conv_input", "=", "conv_input", ".", "unsqueeze", "(", "1", ")", "\n", "conv_input", "=", "self", ".", "conv1_bn", "(", "conv_input", ")", "\n", "out_conv", "=", "self", ".", "conv_layer", "(", "conv_input", ")", "\n", "out_conv", "=", "self", ".", "conv2_bn", "(", "out_conv", ")", "\n", "out_conv", "=", "self", ".", "non_linearity", "(", "out_conv", ")", "\n", "out_conv", "=", "out_conv", ".", "squeeze", "(", "-", "1", ")", "\n", "out_conv", "=", "F", ".", "max_pool1d", "(", "out_conv", ",", "out_conv", ".", "size", "(", "2", ")", ")", ".", "squeeze", "(", "-", "1", ")", "\n", "input_fc", "=", "self", ".", "dropout", "(", "out_conv", ")", "\n", "score", "=", "self", ".", "fc_layer", "(", "input_fc", ")", ".", "view", "(", "-", "1", ")", "\n", "\n", "return", "-", "score", "\n", "\n"]], "home.repos.pwc.inspect_result.daiquocnguyen_R-MeN.RMeN_pytorch.RMeN.RMeN.loss": [[97, 99], ["torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "RMeN.RMeN.criterion"], "methods", ["None"], ["", "def", "loss", "(", "self", ",", "score", ",", "regul", ")", ":", "\n", "        ", "return", "torch", ".", "mean", "(", "self", ".", "criterion", "(", "score", "*", "self", ".", "batch_y", ")", ")", "+", "self", ".", "config", ".", "lmbda", "*", "regul", "\n", "\n"]], "home.repos.pwc.inspect_result.daiquocnguyen_R-MeN.RMeN_pytorch.RMeN.RMeN.forward": [[100, 114], ["RMeN.RMeN.ent_embeddings", "RMeN.RMeN.rel_embeddings", "RMeN.RMeN.ent_embeddings", "RMeN.RMeN._calc", "RMeN.RMeN.conv_layer.parameters", "RMeN.RMeN.fc_layer.parameters", "RMeN.RMeN.loss", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "W.norm", "W.norm"], "methods", ["home.repos.pwc.inspect_result.daiquocnguyen_R-MeN.RMeN_pytorch.RMeN_v1.RMeN._calc", "home.repos.pwc.inspect_result.daiquocnguyen_R-MeN.RMeN_pytorch.RMeN_v1.RMeN.loss"], ["", "def", "forward", "(", "self", ")", ":", "\n", "        ", "h", "=", "self", ".", "ent_embeddings", "(", "self", ".", "batch_h", ")", "\n", "r", "=", "self", ".", "rel_embeddings", "(", "self", ".", "batch_r", ")", "\n", "t", "=", "self", ".", "ent_embeddings", "(", "self", ".", "batch_t", ")", "\n", "score", "=", "self", ".", "_calc", "(", "h", ",", "r", ",", "t", ")", "\n", "\n", "# regularization", "\n", "l2_reg", "=", "torch", ".", "mean", "(", "h", "**", "2", ")", "+", "torch", ".", "mean", "(", "t", "**", "2", ")", "+", "torch", ".", "mean", "(", "r", "**", "2", ")", "\n", "for", "W", "in", "self", ".", "conv_layer", ".", "parameters", "(", ")", ":", "\n", "            ", "l2_reg", "=", "l2_reg", "+", "W", ".", "norm", "(", "2", ")", "\n", "", "for", "W", "in", "self", ".", "fc_layer", ".", "parameters", "(", ")", ":", "\n", "            ", "l2_reg", "=", "l2_reg", "+", "W", ".", "norm", "(", "2", ")", "\n", "\n", "", "return", "self", ".", "loss", "(", "score", ",", "l2_reg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daiquocnguyen_R-MeN.RMeN_pytorch.RMeN.RMeN.predict": [[115, 135], ["numpy.arange", "range", "RMeN.RMeN.cpu().data.numpy", "len", "len", "RMeN.RMeN.ent_embeddings", "RMeN.RMeN.rel_embeddings", "RMeN.RMeN.ent_embeddings", "RMeN.RMeN._calc", "output.append", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "len", "len", "numpy.append", "len", "RMeN.RMeN.cpu"], "methods", ["home.repos.pwc.inspect_result.daiquocnguyen_R-MeN.RMeN_pytorch.RMeN_v1.RMeN._calc"], ["", "def", "predict", "(", "self", ")", ":", "\n", "        ", "output", "=", "[", "]", "\n", "idx", "=", "np", ".", "arange", "(", "len", "(", "self", ".", "batch_h", ")", ")", "\n", "# Transformer-based relational memory uses a memory of batch_size, not a dynamic batch size", "\n", "for", "i", "in", "range", "(", "0", ",", "len", "(", "self", ".", "batch_h", ")", ",", "self", ".", "config", ".", "batch_seq_size", ")", ":", "\n", "            ", "sampled_idx", "=", "idx", "[", "i", ":", "i", "+", "self", ".", "config", ".", "batch_seq_size", "]", "\n", "if", "len", "(", "sampled_idx", ")", "==", "0", ":", "\n", "                ", "continue", "\n", "", "while", "len", "(", "sampled_idx", ")", "<", "self", ".", "config", ".", "batch_seq_size", ":", "# for the last split", "\n", "                ", "sampled_idx", "=", "np", ".", "append", "(", "sampled_idx", ",", "sampled_idx", "[", "-", "1", "]", ")", "\n", "\n", "", "h", "=", "self", ".", "ent_embeddings", "(", "self", ".", "batch_h", "[", "sampled_idx", "]", ")", "\n", "r", "=", "self", ".", "rel_embeddings", "(", "self", ".", "batch_r", "[", "sampled_idx", "]", ")", "\n", "t", "=", "self", ".", "ent_embeddings", "(", "self", ".", "batch_t", "[", "sampled_idx", "]", ")", "\n", "score", "=", "self", ".", "_calc", "(", "h", ",", "r", ",", "t", ")", "\n", "\n", "output", ".", "append", "(", "score", ")", "\n", "\n", "", "score", "=", "torch", ".", "cat", "(", "output", ")", "[", ":", "len", "(", "self", ".", "batch_h", ")", "]", "\n", "return", "score", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.daiquocnguyen_R-MeN.RMeN_pytorch.train_RMeN.get_term_id": [[74, 84], ["open", "len", "line.strip().split", "int", "line.strip().split", "line.strip", "int", "line.strip"], "function", ["None"], ["def", "get_term_id", "(", "filename", ")", ":", "\n", "    ", "entity2id", "=", "{", "}", "\n", "id2entity", "=", "{", "}", "\n", "with", "open", "(", "filename", ")", "as", "f", ":", "\n", "        ", "for", "line", "in", "f", ":", "\n", "            ", "if", "len", "(", "line", ".", "strip", "(", ")", ".", "split", "(", ")", ")", ">", "1", ":", "\n", "                ", "tmp", "=", "line", ".", "strip", "(", ")", ".", "split", "(", ")", "\n", "entity2id", "[", "tmp", "[", "0", "]", "]", "=", "int", "(", "tmp", "[", "1", "]", ")", "\n", "id2entity", "[", "int", "(", "tmp", "[", "1", "]", ")", "]", "=", "tmp", "[", "0", "]", "\n", "", "", "", "return", "entity2id", ",", "id2entity", "\n", "\n"]], "home.repos.pwc.inspect_result.daiquocnguyen_R-MeN.RMeN_pytorch.train_RMeN.get_init_embeddings": [[85, 97], ["open", "open", "np.array", "np.array", "lstrel.append", "lstent.append", "float", "float", "line.strip().split", "line.strip().split", "line.strip", "line.strip"], "function", ["None"], ["", "def", "get_init_embeddings", "(", "relinit", ",", "entinit", ")", ":", "\n", "    ", "lstent", "=", "[", "]", "\n", "lstrel", "=", "[", "]", "\n", "with", "open", "(", "relinit", ")", "as", "f", ":", "\n", "        ", "for", "line", "in", "f", ":", "\n", "            ", "tmp", "=", "[", "float", "(", "val", ")", "for", "val", "in", "line", ".", "strip", "(", ")", ".", "split", "(", ")", "]", "\n", "lstrel", ".", "append", "(", "tmp", ")", "\n", "", "", "with", "open", "(", "entinit", ")", "as", "f", ":", "\n", "        ", "for", "line", "in", "f", ":", "\n", "            ", "tmp", "=", "[", "float", "(", "val", ")", "for", "val", "in", "line", ".", "strip", "(", ")", ".", "split", "(", ")", "]", "\n", "lstent", ".", "append", "(", "tmp", ")", "\n", "", "", "return", "np", ".", "array", "(", "lstent", ",", "dtype", "=", "np", ".", "float32", ")", ",", "np", ".", "array", "(", "lstrel", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daiquocnguyen_R-MeN.RMeN_pytorch.RMeN_v1.RMeN.__init__": [[23, 46], ["Model.Model.__init__", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "relational_rnn_general.RelationalMemory().to", "RMeN_v1.RMeN.transformer_rel_rnn.initial_state().to", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Softplus", "torch.Softplus", "torch.Softplus", "torch.Softplus", "torch.Softplus", "RMeN_v1.RMeN.init_parameters", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "relational_rnn_general.RelationalMemory", "RMeN_v1.RMeN.transformer_rel_rnn.initial_state"], "methods", ["home.repos.pwc.inspect_result.daiquocnguyen_R-MeN.RMeN_tf.model_R_MeN_TripleCls_CNN.RMeN.__init__", "home.repos.pwc.inspect_result.daiquocnguyen_R-MeN.RMeN_pytorch.RMeN_v1.RMeN.init_parameters", "home.repos.pwc.inspect_result.daiquocnguyen_R-MeN.RMeN_pytorch.relational_rnn_general.RelationalMemory.initial_state"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "RMeN", ",", "self", ")", ".", "__init__", "(", "config", ")", "\n", "\n", "self", ".", "ent_embeddings", "=", "nn", ".", "Embedding", "(", "self", ".", "config", ".", "entTotal", ",", "self", ".", "config", ".", "hidden_size", ")", "# vectorized quaternion", "\n", "self", ".", "rel_embeddings", "=", "nn", ".", "Embedding", "(", "self", ".", "config", ".", "relTotal", ",", "self", ".", "config", ".", "hidden_size", ")", "\n", "\n", "self", ".", "pos_h", "=", "nn", ".", "Parameter", "(", "nn", ".", "init", ".", "xavier_uniform_", "(", "torch", ".", "Tensor", "(", "1", ",", "self", ".", "config", ".", "hidden_size", ")", ")", ")", "\n", "self", ".", "pos_r", "=", "nn", ".", "Parameter", "(", "nn", ".", "init", ".", "xavier_uniform_", "(", "torch", ".", "Tensor", "(", "1", ",", "self", ".", "config", ".", "hidden_size", ")", ")", ")", "\n", "self", ".", "pos_t", "=", "nn", ".", "Parameter", "(", "nn", ".", "init", ".", "xavier_uniform_", "(", "torch", ".", "Tensor", "(", "1", ",", "self", ".", "config", ".", "hidden_size", ")", ")", ")", "\n", "\n", "self", ".", "transformer_rel_rnn", "=", "RelationalMemory", "(", "\n", "mem_slots", "=", "self", ".", "config", ".", "mem_slots", ",", "head_size", "=", "self", ".", "config", ".", "head_size", ",", "\n", "num_heads", "=", "self", ".", "config", ".", "num_heads", ",", "input_size", "=", "self", ".", "config", ".", "hidden_size", ",", "\n", "gate_style", "=", "self", ".", "config", ".", "gate_style", ",", "attention_mlp_layers", "=", "self", ".", "config", ".", "attention_mlp_layers", ",", "\n", "return_all_outputs", "=", "True", "\n", ")", ".", "to", "(", "device", ")", "\n", "self", ".", "model_memory", "=", "self", ".", "transformer_rel_rnn", ".", "initial_state", "(", "self", ".", "config", ".", "batch_seq_size", ")", ".", "to", "(", "device", ")", "\n", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "self", ".", "config", ".", "convkb_drop_prob", ")", "\n", "self", ".", "fc_layer", "=", "nn", ".", "Linear", "(", "self", ".", "transformer_rel_rnn", ".", "mem_size", ",", "1", ")", "\n", "\n", "self", ".", "criterion", "=", "nn", ".", "Softplus", "(", ")", "\n", "self", ".", "init_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daiquocnguyen_R-MeN.RMeN_pytorch.RMeN_v1.RMeN.init_parameters": [[47, 57], ["torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_"], "methods", ["None"], ["", "def", "init_parameters", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "config", ".", "use_init_embeddings", "==", "False", ":", "\n", "            ", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "ent_embeddings", ".", "weight", ".", "data", ")", "\n", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "rel_embeddings", ".", "weight", ".", "data", ")", "\n", "\n", "", "else", ":", "\n", "            ", "self", ".", "ent_embeddings", ".", "weight", ".", "data", "=", "self", ".", "config", ".", "init_ent_embs", "\n", "self", ".", "rel_embeddings", ".", "weight", ".", "data", "=", "self", ".", "config", ".", "init_rel_embs", "\n", "\n", "", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "fc_layer", ".", "weight", ".", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daiquocnguyen_R-MeN.RMeN_pytorch.RMeN_v1.RMeN._calc": [[58, 77], ["h.unsqueeze.unsqueeze.unsqueeze", "r.unsqueeze.unsqueeze.unsqueeze", "t.unsqueeze.unsqueeze.unsqueeze", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "RMeN_v1.RMeN.transformer_rel_rnn", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "RMeN_v1.RMeN.dropout", "RMeN_v1.RMeN.fc_layer().view", "RMeN_v1.RMeN.fc_layer"], "methods", ["None"], ["", "def", "_calc", "(", "self", ",", "h", ",", "r", ",", "t", ")", ":", "\n", "        ", "if", "self", ".", "config", ".", "use_pos", ":", "\n", "            ", "h", "=", "h", "+", "self", ".", "pos_h", "\n", "r", "=", "r", "+", "self", ".", "pos_r", "\n", "t", "=", "t", "+", "self", ".", "pos_t", "\n", "\n", "", "h", "=", "h", ".", "unsqueeze", "(", "1", ")", "# bs x 1 x dim", "\n", "r", "=", "r", ".", "unsqueeze", "(", "1", ")", "\n", "t", "=", "t", ".", "unsqueeze", "(", "1", ")", "\n", "hrt", "=", "torch", ".", "cat", "(", "[", "h", ",", "r", ",", "t", "]", ",", "1", ")", "# bs x 3 x dim", "\n", "\n", "# forward pass", "\n", "trans_rel_rnn_output", ",", "_", "=", "self", ".", "transformer_rel_rnn", "(", "hrt", ",", "self", ".", "model_memory", ")", "# concatenate outputs (h, r, t) dim 0 --> (3xbs) x (head_size * num_head)", "\n", "h", ",", "r", ",", "t", "=", "torch", ".", "split", "(", "trans_rel_rnn_output", ",", "self", ".", "config", ".", "batch_seq_size", ",", "dim", "=", "0", ")", "\n", "\n", "input_fc", "=", "self", ".", "dropout", "(", "h", "*", "r", "*", "t", ")", "# bs * mem_size", "\n", "score", "=", "self", ".", "fc_layer", "(", "input_fc", ")", ".", "view", "(", "-", "1", ")", "\n", "\n", "return", "-", "score", "\n", "\n"]], "home.repos.pwc.inspect_result.daiquocnguyen_R-MeN.RMeN_pytorch.RMeN_v1.RMeN.loss": [[78, 80], ["torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "RMeN_v1.RMeN.criterion"], "methods", ["None"], ["", "def", "loss", "(", "self", ",", "score", ",", "regul", ")", ":", "\n", "        ", "return", "torch", ".", "mean", "(", "self", ".", "criterion", "(", "score", "*", "self", ".", "batch_y", ")", ")", "+", "self", ".", "config", ".", "lmbda", "*", "regul", "\n", "\n"]], "home.repos.pwc.inspect_result.daiquocnguyen_R-MeN.RMeN_pytorch.RMeN_v1.RMeN.forward": [[81, 93], ["RMeN_v1.RMeN.ent_embeddings", "RMeN_v1.RMeN.rel_embeddings", "RMeN_v1.RMeN.ent_embeddings", "RMeN_v1.RMeN._calc", "RMeN_v1.RMeN.fc_layer.parameters", "RMeN_v1.RMeN.loss", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "W.norm"], "methods", ["home.repos.pwc.inspect_result.daiquocnguyen_R-MeN.RMeN_pytorch.RMeN_v1.RMeN._calc", "home.repos.pwc.inspect_result.daiquocnguyen_R-MeN.RMeN_pytorch.RMeN_v1.RMeN.loss"], ["", "def", "forward", "(", "self", ")", ":", "\n", "        ", "h", "=", "self", ".", "ent_embeddings", "(", "self", ".", "batch_h", ")", "\n", "r", "=", "self", ".", "rel_embeddings", "(", "self", ".", "batch_r", ")", "\n", "t", "=", "self", ".", "ent_embeddings", "(", "self", ".", "batch_t", ")", "\n", "score", "=", "self", ".", "_calc", "(", "h", ",", "r", ",", "t", ")", "\n", "\n", "# regularization", "\n", "l2_reg", "=", "torch", ".", "mean", "(", "h", "**", "2", ")", "+", "torch", ".", "mean", "(", "t", "**", "2", ")", "+", "torch", ".", "mean", "(", "r", "**", "2", ")", "\n", "for", "W", "in", "self", ".", "fc_layer", ".", "parameters", "(", ")", ":", "\n", "            ", "l2_reg", "=", "l2_reg", "+", "W", ".", "norm", "(", "2", ")", "\n", "\n", "", "return", "self", ".", "loss", "(", "score", ",", "l2_reg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daiquocnguyen_R-MeN.RMeN_pytorch.RMeN_v1.RMeN.predict": [[94, 114], ["numpy.arange", "range", "RMeN_v1.RMeN.cpu().data.numpy", "len", "len", "RMeN_v1.RMeN.ent_embeddings", "RMeN_v1.RMeN.rel_embeddings", "RMeN_v1.RMeN.ent_embeddings", "RMeN_v1.RMeN._calc", "output.append", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "len", "len", "numpy.append", "len", "RMeN_v1.RMeN.cpu"], "methods", ["home.repos.pwc.inspect_result.daiquocnguyen_R-MeN.RMeN_pytorch.RMeN_v1.RMeN._calc"], ["", "def", "predict", "(", "self", ")", ":", "\n", "        ", "output", "=", "[", "]", "\n", "idx", "=", "np", ".", "arange", "(", "len", "(", "self", ".", "batch_h", ")", ")", "\n", "# Transformer-based relational memory uses a memory of batch_size, not a dynamic batch size", "\n", "for", "i", "in", "range", "(", "0", ",", "len", "(", "self", ".", "batch_h", ")", ",", "self", ".", "config", ".", "batch_seq_size", ")", ":", "\n", "            ", "sampled_idx", "=", "idx", "[", "i", ":", "i", "+", "self", ".", "config", ".", "batch_seq_size", "]", "\n", "if", "len", "(", "sampled_idx", ")", "==", "0", ":", "\n", "                ", "continue", "\n", "", "while", "len", "(", "sampled_idx", ")", "<", "self", ".", "config", ".", "batch_seq_size", ":", "# for the last split", "\n", "                ", "sampled_idx", "=", "np", ".", "append", "(", "sampled_idx", ",", "sampled_idx", "[", "-", "1", "]", ")", "\n", "\n", "", "h", "=", "self", ".", "ent_embeddings", "(", "self", ".", "batch_h", "[", "sampled_idx", "]", ")", "\n", "r", "=", "self", ".", "rel_embeddings", "(", "self", ".", "batch_r", "[", "sampled_idx", "]", ")", "\n", "t", "=", "self", ".", "ent_embeddings", "(", "self", ".", "batch_t", "[", "sampled_idx", "]", ")", "\n", "score", "=", "self", ".", "_calc", "(", "h", ",", "r", ",", "t", ")", "\n", "\n", "output", ".", "append", "(", "score", ")", "\n", "\n", "", "score", "=", "torch", ".", "cat", "(", "output", ")", "[", ":", "len", "(", "self", ".", "batch_h", ")", "]", "\n", "return", "score", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.daiquocnguyen_R-MeN.RMeN_pytorch.train_RMeN_v1.get_term_id": [[73, 83], ["open", "len", "line.strip().split", "int", "line.strip().split", "line.strip", "int", "line.strip"], "function", ["None"], ["def", "get_term_id", "(", "filename", ")", ":", "\n", "    ", "entity2id", "=", "{", "}", "\n", "id2entity", "=", "{", "}", "\n", "with", "open", "(", "filename", ")", "as", "f", ":", "\n", "        ", "for", "line", "in", "f", ":", "\n", "            ", "if", "len", "(", "line", ".", "strip", "(", ")", ".", "split", "(", ")", ")", ">", "1", ":", "\n", "                ", "tmp", "=", "line", ".", "strip", "(", ")", ".", "split", "(", ")", "\n", "entity2id", "[", "tmp", "[", "0", "]", "]", "=", "int", "(", "tmp", "[", "1", "]", ")", "\n", "id2entity", "[", "int", "(", "tmp", "[", "1", "]", ")", "]", "=", "tmp", "[", "0", "]", "\n", "", "", "", "return", "entity2id", ",", "id2entity", "\n", "\n"]], "home.repos.pwc.inspect_result.daiquocnguyen_R-MeN.RMeN_pytorch.train_RMeN_v1.get_init_embeddings": [[84, 96], ["open", "open", "np.array", "np.array", "lstrel.append", "lstent.append", "float", "float", "line.strip().split", "line.strip().split", "line.strip", "line.strip"], "function", ["None"], ["", "def", "get_init_embeddings", "(", "relinit", ",", "entinit", ")", ":", "\n", "    ", "lstent", "=", "[", "]", "\n", "lstrel", "=", "[", "]", "\n", "with", "open", "(", "relinit", ")", "as", "f", ":", "\n", "        ", "for", "line", "in", "f", ":", "\n", "            ", "tmp", "=", "[", "float", "(", "val", ")", "for", "val", "in", "line", ".", "strip", "(", ")", ".", "split", "(", ")", "]", "\n", "lstrel", ".", "append", "(", "tmp", ")", "\n", "", "", "with", "open", "(", "entinit", ")", "as", "f", ":", "\n", "        ", "for", "line", "in", "f", ":", "\n", "            ", "tmp", "=", "[", "float", "(", "val", ")", "for", "val", "in", "line", ".", "strip", "(", ")", ".", "split", "(", ")", "]", "\n", "lstent", ".", "append", "(", "tmp", ")", "\n", "", "", "return", "np", ".", "array", "(", "lstent", ",", "dtype", "=", "np", ".", "float32", ")", ",", "np", ".", "array", "(", "lstrel", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daiquocnguyen_R-MeN.RMeN_pytorch.Config.MyDataParallel._getattr__": [[21, 23], ["getattr"], "methods", ["None"], ["    ", "def", "_getattr__", "(", "self", ",", "name", ")", ":", "\n", "        ", "return", "getattr", "(", "self", ".", "module", ",", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daiquocnguyen_R-MeN.RMeN_pytorch.Config.Config.__init__": [[30, 138], ["os.path.abspath", "ctypes.cdll.LoadLibrary", "os.path.join", "os.path.dirname"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "base_file", "=", "os", ".", "path", ".", "abspath", "(", "\n", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "dirname", "(", "__file__", ")", ",", "\"./release/Base.so\"", ")", "\n", ")", "\n", "self", ".", "lib", "=", "ctypes", ".", "cdll", ".", "LoadLibrary", "(", "base_file", ")", "\n", "\"\"\"argtypes\"\"\"", "\n", "\"\"\"'sample\"\"\"", "\n", "self", ".", "lib", ".", "sampling", ".", "argtypes", "=", "[", "\n", "ctypes", ".", "c_void_p", ",", "\n", "ctypes", ".", "c_void_p", ",", "\n", "ctypes", ".", "c_void_p", ",", "\n", "ctypes", ".", "c_void_p", ",", "\n", "ctypes", ".", "c_int64", ",", "\n", "ctypes", ".", "c_int64", ",", "\n", "ctypes", ".", "c_int64", ",", "\n", "]", "\n", "\"\"\"'valid\"\"\"", "\n", "self", ".", "lib", ".", "getValidHeadBatch", ".", "argtypes", "=", "[", "\n", "ctypes", ".", "c_void_p", ",", "\n", "ctypes", ".", "c_void_p", ",", "\n", "ctypes", ".", "c_void_p", ",", "\n", "]", "\n", "self", ".", "lib", ".", "getValidTailBatch", ".", "argtypes", "=", "[", "\n", "ctypes", ".", "c_void_p", ",", "\n", "ctypes", ".", "c_void_p", ",", "\n", "ctypes", ".", "c_void_p", ",", "\n", "]", "\n", "self", ".", "lib", ".", "validHead", ".", "argtypes", "=", "[", "ctypes", ".", "c_void_p", "]", "\n", "self", ".", "lib", ".", "validTail", ".", "argtypes", "=", "[", "ctypes", ".", "c_void_p", "]", "\n", "\"\"\"test link prediction\"\"\"", "\n", "self", ".", "lib", ".", "getHeadBatch", ".", "argtypes", "=", "[", "\n", "ctypes", ".", "c_void_p", ",", "\n", "ctypes", ".", "c_void_p", ",", "\n", "ctypes", ".", "c_void_p", ",", "\n", "]", "\n", "self", ".", "lib", ".", "getTailBatch", ".", "argtypes", "=", "[", "\n", "ctypes", ".", "c_void_p", ",", "\n", "ctypes", ".", "c_void_p", ",", "\n", "ctypes", ".", "c_void_p", ",", "\n", "]", "\n", "self", ".", "lib", ".", "testHead", ".", "argtypes", "=", "[", "ctypes", ".", "c_void_p", "]", "\n", "self", ".", "lib", ".", "testTail", ".", "argtypes", "=", "[", "ctypes", ".", "c_void_p", "]", "\n", "\"\"\"test triple classification\"\"\"", "\n", "self", ".", "lib", ".", "getValidBatch", ".", "argtypes", "=", "[", "\n", "ctypes", ".", "c_void_p", ",", "\n", "ctypes", ".", "c_void_p", ",", "\n", "ctypes", ".", "c_void_p", ",", "\n", "ctypes", ".", "c_void_p", ",", "\n", "ctypes", ".", "c_void_p", ",", "\n", "ctypes", ".", "c_void_p", ",", "\n", "]", "\n", "self", ".", "lib", ".", "getTestBatch", ".", "argtypes", "=", "[", "\n", "ctypes", ".", "c_void_p", ",", "\n", "ctypes", ".", "c_void_p", ",", "\n", "ctypes", ".", "c_void_p", ",", "\n", "ctypes", ".", "c_void_p", ",", "\n", "ctypes", ".", "c_void_p", ",", "\n", "ctypes", ".", "c_void_p", ",", "\n", "]", "\n", "self", ".", "lib", ".", "getBestThreshold", ".", "argtypes", "=", "[", "\n", "ctypes", ".", "c_void_p", ",", "\n", "ctypes", ".", "c_void_p", ",", "\n", "ctypes", ".", "c_void_p", ",", "\n", "]", "\n", "self", ".", "lib", ".", "test_triple_classification", ".", "argtypes", "=", "[", "\n", "ctypes", ".", "c_void_p", ",", "\n", "ctypes", ".", "c_void_p", ",", "\n", "ctypes", ".", "c_void_p", ",", "\n", "]", "\n", "\"\"\"restype\"\"\"", "\n", "self", ".", "lib", ".", "getValidHit10", ".", "restype", "=", "ctypes", ".", "c_float", "\n", "\n", "# for triple classification", "\n", "self", ".", "lib", ".", "test_triple_classification", ".", "restype", "=", "ctypes", ".", "c_float", "\n", "\"\"\"set essential parameters\"\"\"", "\n", "\n", "self", ".", "in_path", "=", "\"./\"", "\n", "self", ".", "batch_size", "=", "100", "\n", "self", ".", "bern", "=", "0", "\n", "self", ".", "work_threads", "=", "8", "\n", "self", ".", "hidden_size", "=", "100", "\n", "self", ".", "negative_ent", "=", "1", "\n", "self", ".", "negative_rel", "=", "0", "\n", "self", ".", "ent_size", "=", "self", ".", "hidden_size", "\n", "self", ".", "rel_size", "=", "self", ".", "hidden_size", "\n", "self", ".", "margin", "=", "1.0", "\n", "self", ".", "valid_steps", "=", "5", "\n", "self", ".", "save_steps", "=", "5", "\n", "self", ".", "opt_method", "=", "\"SGD\"", "\n", "self", ".", "optimizer", "=", "None", "\n", "self", ".", "lr_decay", "=", "0", "\n", "self", ".", "weight_decay", "=", "0", "\n", "self", ".", "lmbda", "=", "0.0", "\n", "self", ".", "lmbda_two", "=", "0.0", "\n", "self", ".", "alpah", "=", "0.001", "\n", "self", ".", "early_stopping_patience", "=", "10", "\n", "self", ".", "nbatches", "=", "100", "\n", "self", ".", "p_norm", "=", "1", "\n", "self", ".", "test_link", "=", "True", "\n", "self", ".", "test_triple", "=", "False", "\n", "self", ".", "model", "=", "None", "\n", "self", ".", "trainModel", "=", "None", "\n", "self", ".", "testModel", "=", "None", "\n", "self", ".", "pretrain_model", "=", "None", "\n", "self", ".", "ent_dropout", "=", "0", "\n", "self", ".", "rel_dropout", "=", "0", "\n", "self", ".", "use_init_embeddings", "=", "False", "\n", "self", ".", "test_file_path", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.daiquocnguyen_R-MeN.RMeN_pytorch.Config.Config.init": [[139, 214], ["Config.Config.lib.setInPath", "Config.Config.lib.setTestFilePath", "Config.Config.lib.setBern", "Config.Config.lib.setWorkThreads", "Config.Config.lib.randReset", "Config.Config.lib.importTrainFiles", "Config.Config.lib.importTestFiles", "Config.Config.lib.importTypeFiles", "Config.Config.lib.getRelationTotal", "Config.Config.lib.getEntityTotal", "Config.Config.lib.getTrainTotal", "Config.Config.lib.getTestTotal", "Config.Config.lib.getValidTotal", "int", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "ctypes.create_string_buffer", "ctypes.create_string_buffer", "Config.Config.in_path.encode", "Config.Config.test_file_path.encode", "len", "len"], "methods", ["None"], ["", "def", "init", "(", "self", ")", ":", "\n", "        ", "self", ".", "lib", ".", "setInPath", "(", "\n", "ctypes", ".", "create_string_buffer", "(", "self", ".", "in_path", ".", "encode", "(", ")", ",", "len", "(", "self", ".", "in_path", ")", "*", "2", ")", "\n", ")", "\n", "\n", "self", ".", "lib", ".", "setTestFilePath", "(", "\n", "ctypes", ".", "create_string_buffer", "(", "self", ".", "test_file_path", ".", "encode", "(", ")", ",", "len", "(", "self", ".", "test_file_path", ")", "*", "2", ")", "\n", ")", "\n", "\n", "self", ".", "lib", ".", "setBern", "(", "self", ".", "bern", ")", "\n", "self", ".", "lib", ".", "setWorkThreads", "(", "self", ".", "work_threads", ")", "\n", "self", ".", "lib", ".", "randReset", "(", ")", "\n", "self", ".", "lib", ".", "importTrainFiles", "(", ")", "\n", "self", ".", "lib", ".", "importTestFiles", "(", ")", "\n", "self", ".", "lib", ".", "importTypeFiles", "(", ")", "\n", "self", ".", "relTotal", "=", "self", ".", "lib", ".", "getRelationTotal", "(", ")", "\n", "self", ".", "entTotal", "=", "self", ".", "lib", ".", "getEntityTotal", "(", ")", "\n", "self", ".", "trainTotal", "=", "self", ".", "lib", ".", "getTrainTotal", "(", ")", "\n", "self", ".", "testTotal", "=", "self", ".", "lib", ".", "getTestTotal", "(", ")", "\n", "self", ".", "validTotal", "=", "self", ".", "lib", ".", "getValidTotal", "(", ")", "\n", "\n", "self", ".", "batch_size", "=", "int", "(", "self", ".", "trainTotal", "/", "self", ".", "nbatches", ")", "\n", "self", ".", "batch_seq_size", "=", "self", ".", "batch_size", "*", "(", "\n", "1", "+", "self", ".", "negative_ent", "+", "self", ".", "negative_rel", "\n", ")", "\n", "self", ".", "batch_h", "=", "np", ".", "zeros", "(", "self", ".", "batch_seq_size", ",", "dtype", "=", "np", ".", "int64", ")", "\n", "self", ".", "batch_t", "=", "np", ".", "zeros", "(", "self", ".", "batch_seq_size", ",", "dtype", "=", "np", ".", "int64", ")", "\n", "self", ".", "batch_r", "=", "np", ".", "zeros", "(", "self", ".", "batch_seq_size", ",", "dtype", "=", "np", ".", "int64", ")", "\n", "self", ".", "batch_y", "=", "np", ".", "zeros", "(", "self", ".", "batch_seq_size", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "self", ".", "batch_h_addr", "=", "self", ".", "batch_h", ".", "__array_interface__", "[", "\"data\"", "]", "[", "0", "]", "\n", "self", ".", "batch_t_addr", "=", "self", ".", "batch_t", ".", "__array_interface__", "[", "\"data\"", "]", "[", "0", "]", "\n", "self", ".", "batch_r_addr", "=", "self", ".", "batch_r", ".", "__array_interface__", "[", "\"data\"", "]", "[", "0", "]", "\n", "self", ".", "batch_y_addr", "=", "self", ".", "batch_y", ".", "__array_interface__", "[", "\"data\"", "]", "[", "0", "]", "\n", "\n", "self", ".", "valid_h", "=", "np", ".", "zeros", "(", "self", ".", "entTotal", ",", "dtype", "=", "np", ".", "int64", ")", "\n", "self", ".", "valid_t", "=", "np", ".", "zeros", "(", "self", ".", "entTotal", ",", "dtype", "=", "np", ".", "int64", ")", "\n", "self", ".", "valid_r", "=", "np", ".", "zeros", "(", "self", ".", "entTotal", ",", "dtype", "=", "np", ".", "int64", ")", "\n", "self", ".", "valid_h_addr", "=", "self", ".", "valid_h", ".", "__array_interface__", "[", "\"data\"", "]", "[", "0", "]", "\n", "self", ".", "valid_t_addr", "=", "self", ".", "valid_t", ".", "__array_interface__", "[", "\"data\"", "]", "[", "0", "]", "\n", "self", ".", "valid_r_addr", "=", "self", ".", "valid_r", ".", "__array_interface__", "[", "\"data\"", "]", "[", "0", "]", "\n", "\n", "self", ".", "test_h", "=", "np", ".", "zeros", "(", "self", ".", "entTotal", ",", "dtype", "=", "np", ".", "int64", ")", "\n", "self", ".", "test_t", "=", "np", ".", "zeros", "(", "self", ".", "entTotal", ",", "dtype", "=", "np", ".", "int64", ")", "\n", "self", ".", "test_r", "=", "np", ".", "zeros", "(", "self", ".", "entTotal", ",", "dtype", "=", "np", ".", "int64", ")", "\n", "self", ".", "test_h_addr", "=", "self", ".", "test_h", ".", "__array_interface__", "[", "\"data\"", "]", "[", "0", "]", "\n", "self", ".", "test_t_addr", "=", "self", ".", "test_t", ".", "__array_interface__", "[", "\"data\"", "]", "[", "0", "]", "\n", "self", ".", "test_r_addr", "=", "self", ".", "test_r", ".", "__array_interface__", "[", "\"data\"", "]", "[", "0", "]", "\n", "\n", "self", ".", "valid_pos_h", "=", "np", ".", "zeros", "(", "self", ".", "validTotal", ",", "dtype", "=", "np", ".", "int64", ")", "\n", "self", ".", "valid_pos_t", "=", "np", ".", "zeros", "(", "self", ".", "validTotal", ",", "dtype", "=", "np", ".", "int64", ")", "\n", "self", ".", "valid_pos_r", "=", "np", ".", "zeros", "(", "self", ".", "validTotal", ",", "dtype", "=", "np", ".", "int64", ")", "\n", "self", ".", "valid_pos_h_addr", "=", "self", ".", "valid_pos_h", ".", "__array_interface__", "[", "\"data\"", "]", "[", "0", "]", "\n", "self", ".", "valid_pos_t_addr", "=", "self", ".", "valid_pos_t", ".", "__array_interface__", "[", "\"data\"", "]", "[", "0", "]", "\n", "self", ".", "valid_pos_r_addr", "=", "self", ".", "valid_pos_r", ".", "__array_interface__", "[", "\"data\"", "]", "[", "0", "]", "\n", "self", ".", "valid_neg_h", "=", "np", ".", "zeros", "(", "self", ".", "validTotal", ",", "dtype", "=", "np", ".", "int64", ")", "\n", "self", ".", "valid_neg_t", "=", "np", ".", "zeros", "(", "self", ".", "validTotal", ",", "dtype", "=", "np", ".", "int64", ")", "\n", "self", ".", "valid_neg_r", "=", "np", ".", "zeros", "(", "self", ".", "validTotal", ",", "dtype", "=", "np", ".", "int64", ")", "\n", "self", ".", "valid_neg_h_addr", "=", "self", ".", "valid_neg_h", ".", "__array_interface__", "[", "\"data\"", "]", "[", "0", "]", "\n", "self", ".", "valid_neg_t_addr", "=", "self", ".", "valid_neg_t", ".", "__array_interface__", "[", "\"data\"", "]", "[", "0", "]", "\n", "self", ".", "valid_neg_r_addr", "=", "self", ".", "valid_neg_r", ".", "__array_interface__", "[", "\"data\"", "]", "[", "0", "]", "\n", "\n", "self", ".", "test_pos_h", "=", "np", ".", "zeros", "(", "self", ".", "testTotal", ",", "dtype", "=", "np", ".", "int64", ")", "\n", "self", ".", "test_pos_t", "=", "np", ".", "zeros", "(", "self", ".", "testTotal", ",", "dtype", "=", "np", ".", "int64", ")", "\n", "self", ".", "test_pos_r", "=", "np", ".", "zeros", "(", "self", ".", "testTotal", ",", "dtype", "=", "np", ".", "int64", ")", "\n", "self", ".", "test_pos_h_addr", "=", "self", ".", "test_pos_h", ".", "__array_interface__", "[", "\"data\"", "]", "[", "0", "]", "\n", "self", ".", "test_pos_t_addr", "=", "self", ".", "test_pos_t", ".", "__array_interface__", "[", "\"data\"", "]", "[", "0", "]", "\n", "self", ".", "test_pos_r_addr", "=", "self", ".", "test_pos_r", ".", "__array_interface__", "[", "\"data\"", "]", "[", "0", "]", "\n", "self", ".", "test_neg_h", "=", "np", ".", "zeros", "(", "self", ".", "testTotal", ",", "dtype", "=", "np", ".", "int64", ")", "\n", "self", ".", "test_neg_t", "=", "np", ".", "zeros", "(", "self", ".", "testTotal", ",", "dtype", "=", "np", ".", "int64", ")", "\n", "self", ".", "test_neg_r", "=", "np", ".", "zeros", "(", "self", ".", "testTotal", ",", "dtype", "=", "np", ".", "int64", ")", "\n", "self", ".", "test_neg_h_addr", "=", "self", ".", "test_neg_h", ".", "__array_interface__", "[", "\"data\"", "]", "[", "0", "]", "\n", "self", ".", "test_neg_t_addr", "=", "self", ".", "test_neg_t", ".", "__array_interface__", "[", "\"data\"", "]", "[", "0", "]", "\n", "self", ".", "test_neg_r_addr", "=", "self", ".", "test_neg_r", ".", "__array_interface__", "[", "\"data\"", "]", "[", "0", "]", "\n", "self", ".", "relThresh", "=", "np", ".", "zeros", "(", "self", ".", "relTotal", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "self", ".", "relThresh_addr", "=", "self", ".", "relThresh", ".", "__array_interface__", "[", "\"data\"", "]", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.daiquocnguyen_R-MeN.RMeN_pytorch.Config.Config.set_test_link": [[215, 217], ["None"], "methods", ["None"], ["", "def", "set_test_link", "(", "self", ",", "test_link", ")", ":", "\n", "        ", "self", ".", "test_link", "=", "test_link", "\n", "\n"]], "home.repos.pwc.inspect_result.daiquocnguyen_R-MeN.RMeN_pytorch.Config.Config.set_test_triple": [[218, 220], ["None"], "methods", ["None"], ["", "def", "set_test_triple", "(", "self", ",", "test_triple", ")", ":", "\n", "        ", "self", ".", "test_triple", "=", "test_triple", "\n", "\n"]], "home.repos.pwc.inspect_result.daiquocnguyen_R-MeN.RMeN_pytorch.Config.Config.set_margin": [[221, 223], ["None"], "methods", ["None"], ["", "def", "set_margin", "(", "self", ",", "margin", ")", ":", "\n", "        ", "self", ".", "margin", "=", "margin", "\n", "\n"]], "home.repos.pwc.inspect_result.daiquocnguyen_R-MeN.RMeN_pytorch.Config.Config.set_in_path": [[224, 226], ["None"], "methods", ["None"], ["", "def", "set_in_path", "(", "self", ",", "in_path", ")", ":", "\n", "        ", "self", ".", "in_path", "=", "in_path", "\n", "\n"]], "home.repos.pwc.inspect_result.daiquocnguyen_R-MeN.RMeN_pytorch.Config.Config.set_test_file_path": [[227, 229], ["None"], "methods", ["None"], ["", "def", "set_test_file_path", "(", "self", ",", "test_file_path", ")", ":", "\n", "        ", "self", ".", "test_file_path", "=", "test_file_path", "\n", "\n"]], "home.repos.pwc.inspect_result.daiquocnguyen_R-MeN.RMeN_pytorch.Config.Config.set_nbatches": [[230, 232], ["None"], "methods", ["None"], ["", "def", "set_nbatches", "(", "self", ",", "nbatches", ")", ":", "\n", "        ", "self", ".", "nbatches", "=", "nbatches", "\n", "\n"]], "home.repos.pwc.inspect_result.daiquocnguyen_R-MeN.RMeN_pytorch.Config.Config.set_p_norm": [[233, 235], ["None"], "methods", ["None"], ["", "def", "set_p_norm", "(", "self", ",", "p_norm", ")", ":", "\n", "        ", "self", ".", "p_norm", "=", "p_norm", "\n", "\n"]], "home.repos.pwc.inspect_result.daiquocnguyen_R-MeN.RMeN_pytorch.Config.Config.set_valid_steps": [[236, 238], ["None"], "methods", ["None"], ["", "def", "set_valid_steps", "(", "self", ",", "valid_steps", ")", ":", "\n", "        ", "self", ".", "valid_steps", "=", "valid_steps", "\n", "\n"]], "home.repos.pwc.inspect_result.daiquocnguyen_R-MeN.RMeN_pytorch.Config.Config.set_save_steps": [[239, 241], ["None"], "methods", ["None"], ["", "def", "set_save_steps", "(", "self", ",", "save_steps", ")", ":", "\n", "        ", "self", ".", "save_steps", "=", "save_steps", "\n", "\n"]], "home.repos.pwc.inspect_result.daiquocnguyen_R-MeN.RMeN_pytorch.Config.Config.set_checkpoint_dir": [[242, 244], ["None"], "methods", ["None"], ["", "def", "set_checkpoint_dir", "(", "self", ",", "checkpoint_dir", ")", ":", "\n", "        ", "self", ".", "checkpoint_dir", "=", "checkpoint_dir", "\n", "\n"]], "home.repos.pwc.inspect_result.daiquocnguyen_R-MeN.RMeN_pytorch.Config.Config.set_result_dir": [[245, 247], ["None"], "methods", ["None"], ["", "def", "set_result_dir", "(", "self", ",", "result_dir", ")", ":", "\n", "        ", "self", ".", "result_dir", "=", "result_dir", "\n", "\n"]], "home.repos.pwc.inspect_result.daiquocnguyen_R-MeN.RMeN_pytorch.Config.Config.set_alpha": [[248, 250], ["None"], "methods", ["None"], ["", "def", "set_alpha", "(", "self", ",", "alpha", ")", ":", "\n", "        ", "self", ".", "alpha", "=", "alpha", "\n", "\n"]], "home.repos.pwc.inspect_result.daiquocnguyen_R-MeN.RMeN_pytorch.Config.Config.set_lmbda": [[251, 253], ["None"], "methods", ["None"], ["", "def", "set_lmbda", "(", "self", ",", "lmbda", ")", ":", "\n", "        ", "self", ".", "lmbda", "=", "lmbda", "\n", "\n"]], "home.repos.pwc.inspect_result.daiquocnguyen_R-MeN.RMeN_pytorch.Config.Config.set_lmbda_two": [[254, 256], ["None"], "methods", ["None"], ["", "def", "set_lmbda_two", "(", "self", ",", "lmbda_two", ")", ":", "\n", "        ", "self", ".", "lmbda_two", "=", "lmbda_two", "\n", "\n"]], "home.repos.pwc.inspect_result.daiquocnguyen_R-MeN.RMeN_pytorch.Config.Config.set_lr_decay": [[257, 259], ["None"], "methods", ["None"], ["", "def", "set_lr_decay", "(", "self", ",", "lr_decay", ")", ":", "\n", "        ", "self", ".", "lr_decay", "=", "lr_decay", "\n", "\n"]], "home.repos.pwc.inspect_result.daiquocnguyen_R-MeN.RMeN_pytorch.Config.Config.set_weight_decay": [[260, 262], ["None"], "methods", ["None"], ["", "def", "set_weight_decay", "(", "self", ",", "weight_decay", ")", ":", "\n", "        ", "self", ".", "weight_decay", "=", "weight_decay", "\n", "\n"]], "home.repos.pwc.inspect_result.daiquocnguyen_R-MeN.RMeN_pytorch.Config.Config.set_opt_method": [[263, 265], ["None"], "methods", ["None"], ["", "def", "set_opt_method", "(", "self", ",", "opt_method", ")", ":", "\n", "        ", "self", ".", "opt_method", "=", "opt_method", "\n", "\n"]], "home.repos.pwc.inspect_result.daiquocnguyen_R-MeN.RMeN_pytorch.Config.Config.set_bern": [[266, 268], ["None"], "methods", ["None"], ["", "def", "set_bern", "(", "self", ",", "bern", ")", ":", "\n", "        ", "self", ".", "bern", "=", "bern", "\n", "\n"]], "home.repos.pwc.inspect_result.daiquocnguyen_R-MeN.RMeN_pytorch.Config.Config.set_init_embeddings": [[269, 273], ["torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "methods", ["None"], ["", "def", "set_init_embeddings", "(", "self", ",", "entity_embs", ",", "rel_embs", ")", ":", "\n", "        ", "self", ".", "use_init_embeddings", "=", "True", "\n", "self", ".", "init_ent_embs", "=", "torch", ".", "from_numpy", "(", "entity_embs", ")", ".", "to", "(", "device", ")", "\n", "self", ".", "init_rel_embs", "=", "torch", ".", "from_numpy", "(", "rel_embs", ")", ".", "to", "(", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daiquocnguyen_R-MeN.RMeN_pytorch.Config.Config.set_config_CNN": [[274, 284], ["None"], "methods", ["None"], ["", "def", "set_config_CNN", "(", "self", ",", "drop_prob", ",", "mem_slots", ",", "head_size", ",", "num_heads", ",", "\n", "attention_mlp_layers", ",", "use_pos", ",", "gate_style", "=", "'memory'", ",", "num_of_filters", "=", "0", ")", ":", "\n", "        ", "self", ".", "out_channels", "=", "num_of_filters", "\n", "self", ".", "convkb_drop_prob", "=", "drop_prob", "\n", "self", ".", "mem_slots", "=", "mem_slots", "\n", "self", ".", "head_size", "=", "head_size", "\n", "self", ".", "num_heads", "=", "num_heads", "\n", "self", ".", "gate_style", "=", "gate_style", "\n", "self", ".", "attention_mlp_layers", "=", "attention_mlp_layers", "\n", "self", ".", "use_pos", "=", "use_pos", "\n", "\n"]], "home.repos.pwc.inspect_result.daiquocnguyen_R-MeN.RMeN_pytorch.Config.Config.set_dimension": [[285, 289], ["None"], "methods", ["None"], ["", "def", "set_dimension", "(", "self", ",", "dim", ")", ":", "\n", "        ", "self", ".", "hidden_size", "=", "dim", "\n", "self", ".", "ent_size", "=", "dim", "\n", "self", ".", "rel_size", "=", "dim", "\n", "\n"]], "home.repos.pwc.inspect_result.daiquocnguyen_R-MeN.RMeN_pytorch.Config.Config.set_ent_dimension": [[290, 292], ["None"], "methods", ["None"], ["", "def", "set_ent_dimension", "(", "self", ",", "dim", ")", ":", "\n", "        ", "self", ".", "ent_size", "=", "dim", "\n", "\n"]], "home.repos.pwc.inspect_result.daiquocnguyen_R-MeN.RMeN_pytorch.Config.Config.set_rel_dimension": [[293, 295], ["None"], "methods", ["None"], ["", "def", "set_rel_dimension", "(", "self", ",", "dim", ")", ":", "\n", "        ", "self", ".", "rel_size", "=", "dim", "\n", "\n"]], "home.repos.pwc.inspect_result.daiquocnguyen_R-MeN.RMeN_pytorch.Config.Config.set_train_times": [[296, 298], ["None"], "methods", ["None"], ["", "def", "set_train_times", "(", "self", ",", "train_times", ")", ":", "\n", "        ", "self", ".", "train_times", "=", "train_times", "\n", "\n"]], "home.repos.pwc.inspect_result.daiquocnguyen_R-MeN.RMeN_pytorch.Config.Config.set_work_threads": [[299, 301], ["None"], "methods", ["None"], ["", "def", "set_work_threads", "(", "self", ",", "work_threads", ")", ":", "\n", "        ", "self", ".", "work_threads", "=", "work_threads", "\n", "\n"]], "home.repos.pwc.inspect_result.daiquocnguyen_R-MeN.RMeN_pytorch.Config.Config.set_ent_neg_rate": [[302, 304], ["None"], "methods", ["None"], ["", "def", "set_ent_neg_rate", "(", "self", ",", "rate", ")", ":", "\n", "        ", "self", ".", "negative_ent", "=", "rate", "\n", "\n"]], "home.repos.pwc.inspect_result.daiquocnguyen_R-MeN.RMeN_pytorch.Config.Config.set_rel_neg_rate": [[305, 307], ["None"], "methods", ["None"], ["", "def", "set_rel_neg_rate", "(", "self", ",", "rate", ")", ":", "\n", "        ", "self", ".", "negative_rel", "=", "rate", "\n", "\n"]], "home.repos.pwc.inspect_result.daiquocnguyen_R-MeN.RMeN_pytorch.Config.Config.set_ent_dropout": [[308, 310], ["None"], "methods", ["None"], ["", "def", "set_ent_dropout", "(", "self", ",", "ent_dropout", ")", ":", "\n", "        ", "self", ".", "ent_dropout", "=", "ent_dropout", "\n", "\n"]], "home.repos.pwc.inspect_result.daiquocnguyen_R-MeN.RMeN_pytorch.Config.Config.set_rel_dropout": [[311, 313], ["None"], "methods", ["None"], ["", "def", "set_rel_dropout", "(", "self", ",", "rel_dropout", ")", ":", "\n", "        ", "self", ".", "rel_dropout", "=", "rel_dropout", "\n", "\n"]], "home.repos.pwc.inspect_result.daiquocnguyen_R-MeN.RMeN_pytorch.Config.Config.set_early_stopping_patience": [[314, 316], ["None"], "methods", ["None"], ["", "def", "set_early_stopping_patience", "(", "self", ",", "early_stopping_patience", ")", ":", "\n", "        ", "self", ".", "early_stopping_patience", "=", "early_stopping_patience", "\n", "\n"]], "home.repos.pwc.inspect_result.daiquocnguyen_R-MeN.RMeN_pytorch.Config.Config.set_pretrain_model": [[317, 319], ["None"], "methods", ["None"], ["", "def", "set_pretrain_model", "(", "self", ",", "pretrain_model", ")", ":", "\n", "        ", "self", ".", "pretrain_model", "=", "pretrain_model", "\n", "\n"]], "home.repos.pwc.inspect_result.daiquocnguyen_R-MeN.RMeN_pytorch.Config.Config.get_parameters": [[320, 332], ["param_dict[].cpu", "param_dict[].numpy", "param_dict[].numpy().tolist", "param_dict[].numpy"], "methods", ["None"], ["", "def", "get_parameters", "(", "self", ",", "param_dict", ",", "mode", "=", "\"numpy\"", ")", ":", "\n", "        ", "for", "param", "in", "param_dict", ":", "\n", "            ", "param_dict", "[", "param", "]", "=", "param_dict", "[", "param", "]", ".", "cpu", "(", ")", "\n", "", "res", "=", "{", "}", "\n", "for", "param", "in", "param_dict", ":", "\n", "            ", "if", "mode", "==", "\"numpy\"", ":", "\n", "                ", "res", "[", "param", "]", "=", "param_dict", "[", "param", "]", ".", "numpy", "(", ")", "\n", "", "elif", "mode", "==", "\"list\"", ":", "\n", "                ", "res", "[", "param", "]", "=", "param_dict", "[", "param", "]", ".", "numpy", "(", ")", ".", "tolist", "(", ")", "\n", "", "else", ":", "\n", "                ", "res", "[", "param", "]", "=", "param_dict", "[", "param", "]", "\n", "", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.daiquocnguyen_R-MeN.RMeN_pytorch.Config.Config.save_embedding_matrix": [[333, 338], ["os.path.join", "open", "open.write", "open.close", "json.dumps", "Config.Config.get_parameters"], "methods", ["home.repos.pwc.inspect_result.daiquocnguyen_R-MeN.RMeN_pytorch.Config.Config.get_parameters"], ["", "def", "save_embedding_matrix", "(", "self", ",", "best_model", ")", ":", "\n", "        ", "path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "result_dir", ",", "self", ".", "model", ".", "__name__", "+", "\".json\"", ")", "\n", "f", "=", "open", "(", "path", ",", "\"w\"", ")", "\n", "f", ".", "write", "(", "json", ".", "dumps", "(", "self", ".", "get_parameters", "(", "best_model", ",", "\"list\"", ")", ")", ")", "\n", "f", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daiquocnguyen_R-MeN.RMeN_pytorch.Config.Config.set_train_model": [[339, 374], ["print", "Config.Config.model", "Config.Config.trainModel.to", "print", "torch.Adagrad", "torch.Adagrad", "torch.Adagrad", "Config.Config.trainModel.parameters", "torch.Adadelta", "torch.Adadelta", "torch.Adadelta", "Config.Config.trainModel.parameters", "torch.Adam", "torch.Adam", "torch.Adam", "torch.SGD", "torch.SGD", "torch.SGD", "Config.Config.trainModel.parameters", "Config.Config.trainModel.parameters"], "methods", ["None"], ["", "def", "set_train_model", "(", "self", ",", "model", ")", ":", "\n", "        ", "print", "(", "\"Initializing training model...\"", ")", "\n", "self", ".", "model", "=", "model", "\n", "self", ".", "trainModel", "=", "self", ".", "model", "(", "config", "=", "self", ")", "\n", "#self.trainModel = nn.DataParallel(self.trainModel, device_ids=[2,3,4])", "\n", "\n", "self", ".", "trainModel", ".", "to", "(", "device", ")", "\n", "if", "self", ".", "optimizer", "!=", "None", ":", "\n", "            ", "pass", "\n", "", "elif", "self", ".", "opt_method", "==", "\"Adagrad\"", "or", "self", ".", "opt_method", "==", "\"adagrad\"", ":", "\n", "            ", "self", ".", "optimizer", "=", "optim", ".", "Adagrad", "(", "\n", "self", ".", "trainModel", ".", "parameters", "(", ")", ",", "\n", "lr", "=", "self", ".", "alpha", ",", "\n", "lr_decay", "=", "self", ".", "lr_decay", ",", "\n", "weight_decay", "=", "self", ".", "weight_decay", ",", "\n", ")", "\n", "", "elif", "self", ".", "opt_method", "==", "\"Adadelta\"", "or", "self", ".", "opt_method", "==", "\"adadelta\"", ":", "\n", "            ", "self", ".", "optimizer", "=", "optim", ".", "Adadelta", "(", "\n", "self", ".", "trainModel", ".", "parameters", "(", ")", ",", "\n", "lr", "=", "self", ".", "alpha", ",", "\n", "weight_decay", "=", "self", ".", "weight_decay", ",", "\n", ")", "\n", "", "elif", "self", ".", "opt_method", "==", "\"Adam\"", "or", "self", ".", "opt_method", "==", "\"adam\"", ":", "\n", "            ", "self", ".", "optimizer", "=", "optim", ".", "Adam", "(", "\n", "self", ".", "trainModel", ".", "parameters", "(", ")", ",", "\n", "lr", "=", "self", ".", "alpha", ",", "\n", "weight_decay", "=", "self", ".", "weight_decay", ",", "\n", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "optimizer", "=", "optim", ".", "SGD", "(", "\n", "self", ".", "trainModel", ".", "parameters", "(", ")", ",", "\n", "lr", "=", "self", ".", "alpha", ",", "\n", "weight_decay", "=", "self", ".", "weight_decay", ",", "\n", ")", "\n", "", "print", "(", "\"Finish initializing\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daiquocnguyen_R-MeN.RMeN_pytorch.Config.Config.set_test_model": [[375, 385], ["print", "Config.Config.model", "Config.Config.testModel.load_state_dict", "Config.Config.testModel.to", "Config.Config.testModel.eval", "print", "os.path.join", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load"], "methods", ["None"], ["", "def", "set_test_model", "(", "self", ",", "model", ",", "path", "=", "None", ")", ":", "\n", "        ", "print", "(", "\"Initializing test model...\"", ")", "\n", "self", ".", "model", "=", "model", "\n", "self", ".", "testModel", "=", "self", ".", "model", "(", "config", "=", "self", ")", "\n", "if", "path", "==", "None", ":", "\n", "            ", "path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "result_dir", ",", "self", ".", "model", ".", "__name__", "+", "\".ckpt\"", ")", "\n", "", "self", ".", "testModel", ".", "load_state_dict", "(", "torch", ".", "load", "(", "path", ")", ")", "\n", "self", ".", "testModel", ".", "to", "(", "device", ")", "\n", "self", ".", "testModel", ".", "eval", "(", ")", "\n", "print", "(", "\"Finish initializing\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daiquocnguyen_R-MeN.RMeN_pytorch.Config.Config.sampling": [[386, 395], ["Config.Config.lib.sampling"], "methods", ["home.repos.pwc.inspect_result.daiquocnguyen_R-MeN.RMeN_pytorch.Config.Config.sampling"], ["", "def", "sampling", "(", "self", ")", ":", "\n", "        ", "self", ".", "lib", ".", "sampling", "(", "\n", "self", ".", "batch_h_addr", ",", "\n", "self", ".", "batch_t_addr", ",", "\n", "self", ".", "batch_r_addr", ",", "\n", "self", ".", "batch_y_addr", ",", "\n", "self", ".", "batch_size", ",", "\n", "self", ".", "negative_ent", ",", "\n", "self", ".", "negative_rel", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.daiquocnguyen_R-MeN.RMeN_pytorch.Config.Config.save_checkpoint": [[397, 402], ["os.path.join", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "str"], "methods", ["None"], ["", "def", "save_checkpoint", "(", "self", ",", "model", ",", "epoch", ")", ":", "\n", "        ", "path", "=", "os", ".", "path", ".", "join", "(", "\n", "self", ".", "checkpoint_dir", ",", "self", ".", "model", ".", "__name__", "+", "\"-\"", "+", "str", "(", "epoch", ")", "+", "\".ckpt\"", "\n", ")", "\n", "torch", ".", "save", "(", "model", ",", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daiquocnguyen_R-MeN.RMeN_pytorch.Config.Config.save_best_checkpoint": [[403, 406], ["os.path.join", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save"], "methods", ["None"], ["", "def", "save_best_checkpoint", "(", "self", ",", "best_model", ")", ":", "\n", "        ", "path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "result_dir", ",", "self", ".", "model", ".", "__name__", "+", "\".ckpt\"", ")", "\n", "torch", ".", "save", "(", "best_model", ",", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daiquocnguyen_R-MeN.RMeN_pytorch.Config.Config.train_one_step": [[407, 421], ["Config.Config.trainModel.train", "Config.to_var", "Config.to_var", "Config.to_var", "Config.to_var", "Config.Config.optimizer.zero_grad", "Config.Config.trainModel", "Config.Config.backward", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "Config.Config.optimizer.step", "Config.Config.item", "Config.Config.trainModel.parameters"], "methods", ["home.repos.pwc.inspect_result.daiquocnguyen_R-MeN.RMeN_pytorch.Config.to_var", "home.repos.pwc.inspect_result.daiquocnguyen_R-MeN.RMeN_pytorch.Config.to_var", "home.repos.pwc.inspect_result.daiquocnguyen_R-MeN.RMeN_pytorch.Config.to_var", "home.repos.pwc.inspect_result.daiquocnguyen_R-MeN.RMeN_pytorch.Config.to_var"], ["", "def", "train_one_step", "(", "self", ")", ":", "\n", "        ", "self", ".", "trainModel", ".", "train", "(", ")", "\n", "self", ".", "trainModel", ".", "batch_h", "=", "to_var", "(", "self", ".", "batch_h", ")", "\n", "self", ".", "trainModel", ".", "batch_t", "=", "to_var", "(", "self", ".", "batch_t", ")", "\n", "self", ".", "trainModel", ".", "batch_r", "=", "to_var", "(", "self", ".", "batch_r", ")", "\n", "self", ".", "trainModel", ".", "batch_y", "=", "to_var", "(", "self", ".", "batch_y", ")", "\n", "\n", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", "=", "self", ".", "trainModel", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "torch", ".", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "self", ".", "trainModel", ".", "parameters", "(", ")", ",", "0.5", ")", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "\n", "return", "loss", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daiquocnguyen_R-MeN.RMeN_pytorch.Config.Config.test_one_step": [[422, 429], ["model.eval", "model.predict", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "Config.to_var", "Config.to_var", "Config.to_var"], "methods", ["home.repos.pwc.inspect_result.daiquocnguyen_R-MeN.RMeN_pytorch.Model.Model.predict", "home.repos.pwc.inspect_result.daiquocnguyen_R-MeN.RMeN_pytorch.Config.to_var", "home.repos.pwc.inspect_result.daiquocnguyen_R-MeN.RMeN_pytorch.Config.to_var", "home.repos.pwc.inspect_result.daiquocnguyen_R-MeN.RMeN_pytorch.Config.to_var"], ["", "def", "test_one_step", "(", "self", ",", "model", ",", "test_h", ",", "test_t", ",", "test_r", ")", ":", "\n", "        ", "model", ".", "eval", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "model", ".", "batch_h", "=", "to_var", "(", "test_h", ")", "\n", "model", ".", "batch_t", "=", "to_var", "(", "test_t", ")", "\n", "model", ".", "batch_r", "=", "to_var", "(", "test_r", ")", "\n", "", "return", "model", ".", "predict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daiquocnguyen_R-MeN.RMeN_pytorch.Config.Config.valid": [[430, 448], ["Config.Config.lib.validInit", "range", "Config.Config.lib.getValidHit10", "sys.stdout.write", "sys.stdout.flush", "Config.Config.lib.getValidHeadBatch", "Config.Config.test_one_step", "Config.Config.lib.validHead", "Config.Config.lib.getValidTailBatch", "Config.Config.test_one_step", "Config.Config.lib.validTail"], "methods", ["home.repos.pwc.inspect_result.daiquocnguyen_R-MeN.RMeN_pytorch.Config.Config.test_one_step", "home.repos.pwc.inspect_result.daiquocnguyen_R-MeN.RMeN_pytorch.Config.Config.test_one_step"], ["", "def", "valid", "(", "self", ",", "model", ")", ":", "\n", "        ", "self", ".", "lib", ".", "validInit", "(", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "validTotal", ")", ":", "\n", "            ", "sys", ".", "stdout", ".", "write", "(", "\"%d\\r\"", "%", "(", "i", ")", ")", "\n", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "self", ".", "lib", ".", "getValidHeadBatch", "(", "\n", "self", ".", "valid_h_addr", ",", "self", ".", "valid_t_addr", ",", "self", ".", "valid_r_addr", "\n", ")", "\n", "res", "=", "self", ".", "test_one_step", "(", "model", ",", "self", ".", "valid_h", ",", "self", ".", "valid_t", ",", "self", ".", "valid_r", ")", "\n", "\n", "self", ".", "lib", ".", "validHead", "(", "res", ".", "__array_interface__", "[", "\"data\"", "]", "[", "0", "]", ")", "\n", "\n", "self", ".", "lib", ".", "getValidTailBatch", "(", "\n", "self", ".", "valid_h_addr", ",", "self", ".", "valid_t_addr", ",", "self", ".", "valid_r_addr", "\n", ")", "\n", "res", "=", "self", ".", "test_one_step", "(", "model", ",", "self", ".", "valid_h", ",", "self", ".", "valid_t", ",", "self", ".", "valid_r", ")", "\n", "self", ".", "lib", ".", "validTail", "(", "res", ".", "__array_interface__", "[", "\"data\"", "]", "[", "0", "]", ")", "\n", "", "return", "self", ".", "lib", ".", "getValidHit10", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daiquocnguyen_R-MeN.RMeN_pytorch.Config.Config.training_model": [[450, 500], ["tqdm.tqdm.tqdm", "print", "print", "Config.Config.save_best_checkpoint", "Config.Config.save_embedding_matrix", "print", "print", "Config.Config.set_test_model", "Config.Config.test", "print", "os.path.exists", "os.mkdir", "range", "range", "tqdm.tqdm.tqdm.set_description", "Config.Config.trainModel.state_dict", "Config.Config.valid", "os.path.isdir", "os.mkdir", "Config.Config.sampling", "Config.Config.train_one_step", "tqdm.tqdm.tqdm.set_description", "Config.Config.save_checkpoint", "tqdm.tqdm.tqdm.set_description", "Config.Config.valid", "Config.Config.trainModel.state_dict", "Config.Config.trainModel.state_dict", "print", "print", "print"], "methods", ["home.repos.pwc.inspect_result.daiquocnguyen_R-MeN.RMeN_pytorch.Config.Config.save_best_checkpoint", "home.repos.pwc.inspect_result.daiquocnguyen_R-MeN.RMeN_pytorch.Config.Config.save_embedding_matrix", "home.repos.pwc.inspect_result.daiquocnguyen_R-MeN.RMeN_pytorch.Config.Config.set_test_model", "home.repos.pwc.inspect_result.daiquocnguyen_R-MeN.RMeN_pytorch.Config.Config.test", "home.repos.pwc.inspect_result.daiquocnguyen_R-MeN.RMeN_pytorch.Config.Config.valid", "home.repos.pwc.inspect_result.daiquocnguyen_R-MeN.RMeN_pytorch.Config.Config.sampling", "home.repos.pwc.inspect_result.daiquocnguyen_R-MeN.RMeN_pytorch.Config.Config.train_one_step", "home.repos.pwc.inspect_result.daiquocnguyen_R-MeN.RMeN_pytorch.Config.Config.save_checkpoint", "home.repos.pwc.inspect_result.daiquocnguyen_R-MeN.RMeN_pytorch.Config.Config.valid"], ["", "def", "training_model", "(", "self", ")", ":", "\n", "        ", "if", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "checkpoint_dir", ")", ":", "\n", "            ", "os", ".", "mkdir", "(", "self", ".", "checkpoint_dir", ")", "\n", "", "best_epoch", "=", "0", "\n", "best_hit10", "=", "0.0", "\n", "best_model", "=", "None", "\n", "bad_counts", "=", "0", "\n", "training_range", "=", "tqdm", "(", "range", "(", "self", ".", "train_times", ")", ")", "\n", "for", "epoch", "in", "training_range", ":", "\n", "            ", "res", "=", "0.0", "\n", "for", "batch", "in", "range", "(", "self", ".", "nbatches", ")", ":", "\n", "                ", "self", ".", "sampling", "(", ")", "\n", "loss", "=", "self", ".", "train_one_step", "(", ")", "\n", "res", "+=", "loss", "\n", "", "training_range", ".", "set_description", "(", "\"Epoch %d | loss: %f\"", "%", "(", "epoch", ",", "res", ")", ")", "\n", "# print(\"Epoch %d | loss: %f\" % (epoch, res))", "\n", "if", "(", "epoch", "+", "1", ")", "%", "self", ".", "save_steps", "==", "0", ":", "\n", "                ", "training_range", ".", "set_description", "(", "\"Epoch %d has finished, saving...\"", "%", "(", "epoch", ")", ")", "\n", "self", ".", "save_checkpoint", "(", "self", ".", "trainModel", ".", "state_dict", "(", ")", ",", "epoch", ")", "\n", "", "if", "(", "epoch", "+", "1", ")", "%", "self", ".", "valid_steps", "==", "0", ":", "\n", "                ", "training_range", ".", "set_description", "(", "\"Epoch %d has finished | loss: %f, validating...\"", "%", "(", "epoch", ",", "res", ")", ")", "\n", "hit10", "=", "self", ".", "valid", "(", "self", ".", "trainModel", ")", "\n", "if", "hit10", ">", "best_hit10", ":", "\n", "                    ", "best_hit10", "=", "hit10", "\n", "best_epoch", "=", "epoch", "\n", "best_model", "=", "self", ".", "trainModel", ".", "state_dict", "(", ")", "\n", "print", "(", "\"Best model | hit@10 of valid set is %f\"", "%", "(", "best_hit10", ")", ")", "\n", "bad_counts", "=", "0", "\n", "", "else", ":", "\n", "                    ", "print", "(", "\"Hit@10 of valid set is %f | bad count is %d\"", "%", "(", "hit10", ",", "bad_counts", ")", ")", "\n", "bad_counts", "+=", "1", "\n", "", "if", "bad_counts", "==", "self", ".", "early_stopping_patience", ":", "\n", "                    ", "print", "(", "\"Early stopping at epoch %d\"", "%", "(", "epoch", ")", ")", "\n", "break", "\n", "", "", "", "if", "best_model", "==", "None", ":", "\n", "            ", "best_model", "=", "self", ".", "trainModel", ".", "state_dict", "(", ")", "\n", "best_epoch", "=", "self", ".", "train_times", "-", "1", "\n", "best_hit10", "=", "self", ".", "valid", "(", "self", ".", "trainModel", ")", "\n", "", "print", "(", "\"Best epoch is %d | hit@10 of valid set is %f\"", "%", "(", "best_epoch", ",", "best_hit10", ")", ")", "\n", "print", "(", "\"Store checkpoint of best result at epoch %d...\"", "%", "(", "best_epoch", ")", ")", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "self", ".", "result_dir", ")", ":", "\n", "            ", "os", ".", "mkdir", "(", "self", ".", "result_dir", ")", "\n", "", "self", ".", "save_best_checkpoint", "(", "best_model", ")", "\n", "self", ".", "save_embedding_matrix", "(", "best_model", ")", "\n", "print", "(", "\"Finish storing\"", ")", "\n", "print", "(", "\"Testing...\"", ")", "\n", "self", ".", "set_test_model", "(", "self", ".", "model", ")", "\n", "self", ".", "test", "(", ")", "\n", "print", "(", "\"Finish test\"", ")", "\n", "return", "best_model", "\n", "\n"]], "home.repos.pwc.inspect_result.daiquocnguyen_R-MeN.RMeN_pytorch.Config.Config.valid_triple_classification": [[501, 526], ["Config.Config.lib.getValidBatch", "Config.Config.test_one_step", "Config.Config.test_one_step", "Config.Config.lib.getBestThreshold", "Config.Config.lib.test_triple_classification"], "methods", ["home.repos.pwc.inspect_result.daiquocnguyen_R-MeN.RMeN_pytorch.Config.Config.test_one_step", "home.repos.pwc.inspect_result.daiquocnguyen_R-MeN.RMeN_pytorch.Config.Config.test_one_step"], ["", "def", "valid_triple_classification", "(", "self", ",", "model", ")", ":", "\n", "        ", "self", ".", "lib", ".", "getValidBatch", "(", "\n", "self", ".", "valid_pos_h_addr", ",", "\n", "self", ".", "valid_pos_t_addr", ",", "\n", "self", ".", "valid_pos_r_addr", ",", "\n", "self", ".", "valid_neg_h_addr", ",", "\n", "self", ".", "valid_neg_t_addr", ",", "\n", "self", ".", "valid_neg_r_addr", ",", "\n", ")", "\n", "res_pos", "=", "self", ".", "test_one_step", "(", "\n", "model", ",", "self", ".", "valid_pos_h", ",", "self", ".", "valid_pos_t", ",", "self", ".", "valid_pos_r", "\n", ")", "\n", "res_neg", "=", "self", ".", "test_one_step", "(", "\n", "model", ",", "self", ".", "valid_neg_h", ",", "self", ".", "valid_neg_t", ",", "self", ".", "valid_neg_r", "\n", ")", "\n", "self", ".", "lib", ".", "getBestThreshold", "(", "\n", "self", ".", "relThresh_addr", ",", "\n", "res_pos", ".", "__array_interface__", "[", "\"data\"", "]", "[", "0", "]", ",", "\n", "res_neg", ".", "__array_interface__", "[", "\"data\"", "]", "[", "0", "]", ",", "\n", ")", "\n", "\n", "return", "self", ".", "lib", ".", "test_triple_classification", "(", "\n", "self", ".", "relThresh_addr", ",", "\n", "res_pos", ".", "__array_interface__", "[", "\"data\"", "]", "[", "0", "]", ",", "\n", "res_neg", ".", "__array_interface__", "[", "\"data\"", "]", "[", "0", "]", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.daiquocnguyen_R-MeN.RMeN_pytorch.Config.Config.training_triple_classification": [[528, 577], ["tqdm.tqdm.tqdm", "print", "print", "Config.Config.save_best_checkpoint", "Config.Config.save_embedding_matrix", "print", "print", "Config.Config.set_test_model", "Config.Config.test", "print", "os.path.exists", "os.mkdir", "range", "range", "tqdm.tqdm.tqdm.set_description", "Config.Config.trainModel.state_dict", "Config.Config.valid_triple_classification", "os.path.isdir", "os.mkdir", "Config.Config.sampling", "Config.Config.train_one_step", "tqdm.tqdm.tqdm.set_description", "Config.Config.save_checkpoint", "tqdm.tqdm.tqdm.set_description", "Config.Config.valid_triple_classification", "Config.Config.trainModel.state_dict", "Config.Config.trainModel.state_dict", "print", "print", "print"], "methods", ["home.repos.pwc.inspect_result.daiquocnguyen_R-MeN.RMeN_pytorch.Config.Config.save_best_checkpoint", "home.repos.pwc.inspect_result.daiquocnguyen_R-MeN.RMeN_pytorch.Config.Config.save_embedding_matrix", "home.repos.pwc.inspect_result.daiquocnguyen_R-MeN.RMeN_pytorch.Config.Config.set_test_model", "home.repos.pwc.inspect_result.daiquocnguyen_R-MeN.RMeN_pytorch.Config.Config.test", "home.repos.pwc.inspect_result.daiquocnguyen_R-MeN.RMeN_pytorch.Config.Config.valid_triple_classification", "home.repos.pwc.inspect_result.daiquocnguyen_R-MeN.RMeN_pytorch.Config.Config.sampling", "home.repos.pwc.inspect_result.daiquocnguyen_R-MeN.RMeN_pytorch.Config.Config.train_one_step", "home.repos.pwc.inspect_result.daiquocnguyen_R-MeN.RMeN_pytorch.Config.Config.save_checkpoint", "home.repos.pwc.inspect_result.daiquocnguyen_R-MeN.RMeN_pytorch.Config.Config.valid_triple_classification"], ["", "def", "training_triple_classification", "(", "self", ")", ":", "\n", "        ", "if", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "checkpoint_dir", ")", ":", "\n", "            ", "os", ".", "mkdir", "(", "self", ".", "checkpoint_dir", ")", "\n", "", "best_epoch", "=", "0", "\n", "best_acc", "=", "0.0", "\n", "best_model", "=", "None", "\n", "bad_counts", "=", "0", "\n", "training_range", "=", "tqdm", "(", "range", "(", "self", ".", "train_times", ")", ")", "\n", "for", "epoch", "in", "training_range", ":", "\n", "            ", "res", "=", "0.0", "\n", "for", "batch", "in", "range", "(", "self", ".", "nbatches", ")", ":", "\n", "                ", "self", ".", "sampling", "(", ")", "\n", "loss", "=", "self", ".", "train_one_step", "(", ")", "\n", "res", "+=", "loss", "\n", "", "training_range", ".", "set_description", "(", "\"Epoch %d | loss: %f\"", "%", "(", "epoch", ",", "res", ")", ")", "\n", "if", "(", "epoch", "+", "1", ")", "%", "self", ".", "save_steps", "==", "0", ":", "\n", "                ", "training_range", ".", "set_description", "(", "\"Epoch %d has finished, saving...\"", "%", "(", "epoch", ")", ")", "\n", "self", ".", "save_checkpoint", "(", "self", ".", "trainModel", ".", "state_dict", "(", ")", ",", "epoch", ")", "\n", "", "if", "(", "epoch", "+", "1", ")", "%", "self", ".", "valid_steps", "==", "0", ":", "\n", "                ", "training_range", ".", "set_description", "(", "\"Epoch %d has finished | loss: %f, validating...\"", "%", "(", "epoch", ",", "res", ")", ")", "\n", "acc", "=", "self", ".", "valid_triple_classification", "(", "self", ".", "trainModel", ")", "\n", "if", "acc", ">", "best_acc", ":", "\n", "                    ", "best_acc", "=", "acc", "\n", "best_epoch", "=", "epoch", "\n", "best_model", "=", "self", ".", "trainModel", ".", "state_dict", "(", ")", "\n", "print", "(", "\"Best model | Acc of valid set is %f\"", "%", "(", "best_acc", ")", ")", "\n", "bad_counts", "=", "0", "\n", "", "else", ":", "\n", "                    ", "print", "(", "\"Acc of valid set is %f | bad count is %d\"", "%", "(", "acc", ",", "bad_counts", ")", ")", "\n", "bad_counts", "+=", "1", "\n", "", "if", "bad_counts", "==", "self", ".", "early_stopping_patience", ":", "\n", "                    ", "print", "(", "\"Early stopping at epoch %d\"", "%", "(", "epoch", ")", ")", "\n", "break", "\n", "", "", "", "if", "best_model", "==", "None", ":", "\n", "            ", "best_model", "=", "self", ".", "trainModel", ".", "state_dict", "(", ")", "\n", "best_epoch", "=", "self", ".", "train_times", "-", "1", "\n", "best_acc", "=", "self", ".", "valid_triple_classification", "(", "self", ".", "trainModel", ")", "\n", "", "print", "(", "\"Best epoch is %d | Acc of valid set is %f\"", "%", "(", "best_epoch", ",", "best_acc", ")", ")", "\n", "print", "(", "\"Store checkpoint of best result at epoch %d...\"", "%", "(", "best_epoch", ")", ")", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "self", ".", "result_dir", ")", ":", "\n", "            ", "os", ".", "mkdir", "(", "self", ".", "result_dir", ")", "\n", "", "self", ".", "save_best_checkpoint", "(", "best_model", ")", "\n", "self", ".", "save_embedding_matrix", "(", "best_model", ")", "\n", "print", "(", "\"Finish storing\"", ")", "\n", "print", "(", "\"Testing...\"", ")", "\n", "self", ".", "set_test_model", "(", "self", ".", "model", ")", "\n", "self", ".", "test", "(", ")", "\n", "print", "(", "\"Finish test\"", ")", "\n", "return", "best_model", "\n", "\n"]], "home.repos.pwc.inspect_result.daiquocnguyen_R-MeN.RMeN_pytorch.Config.Config.link_prediction": [[578, 595], ["print", "range", "Config.Config.lib.test_link_prediction", "sys.stdout.write", "sys.stdout.flush", "Config.Config.lib.getHeadBatch", "Config.Config.test_one_step", "Config.Config.lib.testHead", "Config.Config.lib.getTailBatch", "Config.Config.test_one_step", "Config.Config.lib.testTail"], "methods", ["home.repos.pwc.inspect_result.daiquocnguyen_R-MeN.RMeN_pytorch.Config.Config.test_one_step", "home.repos.pwc.inspect_result.daiquocnguyen_R-MeN.RMeN_pytorch.Config.Config.test_one_step"], ["", "def", "link_prediction", "(", "self", ")", ":", "\n", "        ", "print", "(", "\"The total of test triple is %d\"", "%", "(", "self", ".", "testTotal", ")", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "testTotal", ")", ":", "\n", "            ", "sys", ".", "stdout", ".", "write", "(", "\"%d\\r\"", "%", "(", "i", ")", ")", "\n", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "self", ".", "lib", ".", "getHeadBatch", "(", "self", ".", "test_h_addr", ",", "self", ".", "test_t_addr", ",", "self", ".", "test_r_addr", ")", "\n", "res", "=", "self", ".", "test_one_step", "(", "\n", "self", ".", "testModel", ",", "self", ".", "test_h", ",", "self", ".", "test_t", ",", "self", ".", "test_r", "\n", ")", "\n", "self", ".", "lib", ".", "testHead", "(", "res", ".", "__array_interface__", "[", "\"data\"", "]", "[", "0", "]", ")", "\n", "\n", "self", ".", "lib", ".", "getTailBatch", "(", "self", ".", "test_h_addr", ",", "self", ".", "test_t_addr", ",", "self", ".", "test_r_addr", ")", "\n", "res", "=", "self", ".", "test_one_step", "(", "\n", "self", ".", "testModel", ",", "self", ".", "test_h", ",", "self", ".", "test_t", ",", "self", ".", "test_r", "\n", ")", "\n", "self", ".", "lib", ".", "testTail", "(", "res", ".", "__array_interface__", "[", "\"data\"", "]", "[", "0", "]", ")", "\n", "", "self", ".", "lib", ".", "test_link_prediction", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daiquocnguyen_R-MeN.RMeN_pytorch.Config.Config.triple_classification": [[596, 635], ["Config.Config.lib.getValidBatch", "Config.Config.test_one_step", "Config.Config.test_one_step", "Config.Config.lib.getBestThreshold", "Config.Config.lib.getTestBatch", "Config.Config.test_one_step", "Config.Config.test_one_step", "Config.Config.lib.test_triple_classification"], "methods", ["home.repos.pwc.inspect_result.daiquocnguyen_R-MeN.RMeN_pytorch.Config.Config.test_one_step", "home.repos.pwc.inspect_result.daiquocnguyen_R-MeN.RMeN_pytorch.Config.Config.test_one_step", "home.repos.pwc.inspect_result.daiquocnguyen_R-MeN.RMeN_pytorch.Config.Config.test_one_step", "home.repos.pwc.inspect_result.daiquocnguyen_R-MeN.RMeN_pytorch.Config.Config.test_one_step"], ["", "def", "triple_classification", "(", "self", ")", ":", "\n", "        ", "self", ".", "lib", ".", "getValidBatch", "(", "\n", "self", ".", "valid_pos_h_addr", ",", "\n", "self", ".", "valid_pos_t_addr", ",", "\n", "self", ".", "valid_pos_r_addr", ",", "\n", "self", ".", "valid_neg_h_addr", ",", "\n", "self", ".", "valid_neg_t_addr", ",", "\n", "self", ".", "valid_neg_r_addr", ",", "\n", ")", "\n", "res_pos", "=", "self", ".", "test_one_step", "(", "\n", "self", ".", "testModel", ",", "self", ".", "valid_pos_h", ",", "self", ".", "valid_pos_t", ",", "self", ".", "valid_pos_r", "\n", ")", "\n", "res_neg", "=", "self", ".", "test_one_step", "(", "\n", "self", ".", "testModel", ",", "self", ".", "valid_neg_h", ",", "self", ".", "valid_neg_t", ",", "self", ".", "valid_neg_r", "\n", ")", "\n", "self", ".", "lib", ".", "getBestThreshold", "(", "\n", "self", ".", "relThresh_addr", ",", "\n", "res_pos", ".", "__array_interface__", "[", "\"data\"", "]", "[", "0", "]", ",", "\n", "res_neg", ".", "__array_interface__", "[", "\"data\"", "]", "[", "0", "]", ",", "\n", ")", "\n", "\n", "self", ".", "lib", ".", "getTestBatch", "(", "\n", "self", ".", "test_pos_h_addr", ",", "\n", "self", ".", "test_pos_t_addr", ",", "\n", "self", ".", "test_pos_r_addr", ",", "\n", "self", ".", "test_neg_h_addr", ",", "\n", "self", ".", "test_neg_t_addr", ",", "\n", "self", ".", "test_neg_r_addr", ",", "\n", ")", "\n", "res_pos", "=", "self", ".", "test_one_step", "(", "\n", "self", ".", "testModel", ",", "self", ".", "test_pos_h", ",", "self", ".", "test_pos_t", ",", "self", ".", "test_pos_r", "\n", ")", "\n", "res_neg", "=", "self", ".", "test_one_step", "(", "\n", "self", ".", "testModel", ",", "self", ".", "test_neg_h", ",", "self", ".", "test_neg_t", ",", "self", ".", "test_neg_r", "\n", ")", "\n", "self", ".", "lib", ".", "test_triple_classification", "(", "\n", "self", ".", "relThresh_addr", ",", "\n", "res_pos", ".", "__array_interface__", "[", "\"data\"", "]", "[", "0", "]", ",", "\n", "res_neg", ".", "__array_interface__", "[", "\"data\"", "]", "[", "0", "]", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.daiquocnguyen_R-MeN.RMeN_pytorch.Config.Config.test": [[637, 642], ["Config.Config.link_prediction", "Config.Config.triple_classification"], "methods", ["home.repos.pwc.inspect_result.daiquocnguyen_R-MeN.RMeN_pytorch.Config.Config.link_prediction", "home.repos.pwc.inspect_result.daiquocnguyen_R-MeN.RMeN_pytorch.Config.Config.triple_classification"], ["", "def", "test", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "test_link", ":", "\n", "            ", "self", ".", "link_prediction", "(", ")", "\n", "", "if", "self", ".", "test_triple", ":", "\n", "            ", "self", ".", "triple_classification", "(", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.daiquocnguyen_R-MeN.RMeN_pytorch.Config.to_var": [[25, 27], ["torch.autograd.Variable", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "function", ["None"], ["", "", "def", "to_var", "(", "x", ")", ":", "\n", "    ", "return", "Variable", "(", "torch", ".", "from_numpy", "(", "x", ")", ".", "to", "(", "device", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daiquocnguyen_R-MeN.RMeN_pytorch.Model.Model.__init__": [[9, 16], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.daiquocnguyen_R-MeN.RMeN_tf.model_R_MeN_TripleCls_CNN.RMeN.__init__"], ["\t", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "\t\t", "super", "(", "Model", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "config", "=", "config", "\n", "self", ".", "batch_h", "=", "None", "\n", "self", ".", "batch_t", "=", "None", "\n", "self", ".", "batch_r", "=", "None", "\n", "self", ".", "batch_y", "=", "None", "\n", ""]], "home.repos.pwc.inspect_result.daiquocnguyen_R-MeN.RMeN_pytorch.Model.Model.get_positive_score": [[29, 31], ["None"], "methods", ["None"], ["def", "get_positive_score", "(", "self", ",", "score", ")", ":", "\n", "\t\t", "return", "score", "[", "0", ":", "self", ".", "config", ".", "batch_size", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.daiquocnguyen_R-MeN.RMeN_pytorch.Model.Model.get_negative_score": [[32, 37], ["torch.mean.view", "torch.mean.view", "torch.mean.view", "torch.mean.view", "torch.mean.view", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean"], "methods", ["None"], ["", "def", "get_negative_score", "(", "self", ",", "score", ")", ":", "\n", "\t\t", "negative_score", "=", "score", "[", "self", ".", "config", ".", "batch_size", ":", "self", ".", "config", ".", "batch_seq_size", "]", "\n", "negative_score", "=", "negative_score", ".", "view", "(", "-", "1", ",", "self", ".", "config", ".", "batch_size", ")", "\n", "negative_score", "=", "torch", ".", "mean", "(", "negative_score", ",", "0", ")", "\n", "return", "negative_score", "\n", "", "def", "forward", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.daiquocnguyen_R-MeN.RMeN_pytorch.Model.Model.forward": [[37, 39], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ")", ":", "\n", "\t\t", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.daiquocnguyen_R-MeN.RMeN_pytorch.Model.Model.predict": [[40, 42], ["None"], "methods", ["None"], ["", "def", "predict", "(", "self", ")", ":", "\n", "\t\t", "raise", "NotImplementedError", "\n", "", "", ""]], "home.repos.pwc.inspect_result.daiquocnguyen_R-MeN.RMeN_pytorch.relational_rnn_general.RelationalMemory.__init__": [[44, 108], ["torch.nn.Module.__init__", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "ValueError", "ValueError", "ValueError", "relational_rnn_general.RelationalMemory.calculate_gate_size", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.nn.Linear", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.daiquocnguyen_R-MeN.RMeN_tf.model_R_MeN_TripleCls_CNN.RMeN.__init__", "home.repos.pwc.inspect_result.daiquocnguyen_R-MeN.RMeN_pytorch.relational_rnn_general.RelationalMemory.calculate_gate_size"], ["def", "__init__", "(", "self", ",", "mem_slots", ",", "head_size", ",", "input_size", ",", "num_heads", "=", "1", ",", "num_blocks", "=", "1", ",", "forget_bias", "=", "1.", ",", "input_bias", "=", "0.", ",", "\n", "gate_style", "=", "'unit'", ",", "attention_mlp_layers", "=", "2", ",", "key_size", "=", "None", ",", "return_all_outputs", "=", "False", ")", ":", "\n", "        ", "super", "(", "RelationalMemory", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "########## generic parameters for RMC ##########", "\n", "self", ".", "mem_slots", "=", "mem_slots", "\n", "self", ".", "head_size", "=", "head_size", "\n", "self", ".", "num_heads", "=", "num_heads", "\n", "self", ".", "mem_size", "=", "self", ".", "head_size", "*", "self", ".", "num_heads", "\n", "\n", "# a new fixed params needed for pytorch port of RMC", "\n", "# +1 is the concatenated input per time step : we do self-attention with the concatenated memory & input", "\n", "# so if the mem_slots = 1, this value is 2", "\n", "self", ".", "mem_slots_plus_input", "=", "self", ".", "mem_slots", "+", "1", "\n", "\n", "if", "num_blocks", "<", "1", ":", "\n", "            ", "raise", "ValueError", "(", "'num_blocks must be >=1. Got: {}.'", ".", "format", "(", "num_blocks", ")", ")", "\n", "", "self", ".", "num_blocks", "=", "num_blocks", "\n", "\n", "if", "gate_style", "not", "in", "[", "'unit'", ",", "'memory'", ",", "None", "]", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "'gate_style must be one of [\\'unit\\', \\'memory\\', None]. got: '", "\n", "'{}.'", ".", "format", "(", "gate_style", ")", ")", "\n", "", "self", ".", "gate_style", "=", "gate_style", "\n", "\n", "if", "attention_mlp_layers", "<", "1", ":", "\n", "            ", "raise", "ValueError", "(", "'attention_mlp_layers must be >= 1. Got: {}.'", ".", "format", "(", "\n", "attention_mlp_layers", ")", ")", "\n", "", "self", ".", "attention_mlp_layers", "=", "attention_mlp_layers", "\n", "\n", "self", ".", "key_size", "=", "key_size", "if", "key_size", "else", "self", ".", "head_size", "\n", "\n", "########## parameters for multihead attention ##########", "\n", "# value_size is same as head_size", "\n", "self", ".", "value_size", "=", "self", ".", "head_size", "\n", "# total size for query-key-value", "\n", "self", ".", "qkv_size", "=", "2", "*", "self", ".", "key_size", "+", "self", ".", "value_size", "\n", "self", ".", "total_qkv_size", "=", "self", ".", "qkv_size", "*", "self", ".", "num_heads", "# denoted as F", "\n", "\n", "# each head has qkv_sized linear projector", "\n", "# just using one big param is more efficient, rather than this line", "\n", "# self.qkv_projector = [nn.Parameter(torch.randn((self.qkv_size, self.qkv_size))) for _ in range(self.num_heads)]", "\n", "self", ".", "qkv_projector", "=", "nn", ".", "Linear", "(", "self", ".", "mem_size", ",", "self", ".", "total_qkv_size", ")", "\n", "self", ".", "qkv_layernorm", "=", "nn", ".", "LayerNorm", "(", "[", "self", ".", "mem_slots_plus_input", ",", "self", ".", "total_qkv_size", "]", ")", "\n", "\n", "# used for attend_over_memory function", "\n", "self", ".", "attention_mlp", "=", "nn", ".", "ModuleList", "(", "[", "nn", ".", "Linear", "(", "self", ".", "mem_size", ",", "self", ".", "mem_size", ")", "]", "*", "self", ".", "attention_mlp_layers", ")", "\n", "self", ".", "attended_memory_layernorm", "=", "nn", ".", "LayerNorm", "(", "[", "self", ".", "mem_slots_plus_input", ",", "self", ".", "mem_size", "]", ")", "\n", "self", ".", "attended_memory_layernorm2", "=", "nn", ".", "LayerNorm", "(", "[", "self", ".", "mem_slots_plus_input", ",", "self", ".", "mem_size", "]", ")", "\n", "\n", "########## parameters for initial embedded input projection ##########", "\n", "self", ".", "input_size", "=", "input_size", "\n", "self", ".", "input_projector", "=", "nn", ".", "Linear", "(", "self", ".", "input_size", ",", "self", ".", "mem_size", ")", "\n", "\n", "########## parameters for gating ##########", "\n", "self", ".", "num_gates", "=", "2", "*", "self", ".", "calculate_gate_size", "(", ")", "\n", "self", ".", "input_gate_projector", "=", "nn", ".", "Linear", "(", "self", ".", "mem_size", ",", "self", ".", "num_gates", ")", "\n", "self", ".", "memory_gate_projector", "=", "nn", ".", "Linear", "(", "self", ".", "mem_size", ",", "self", ".", "num_gates", ")", "\n", "# trainable scalar gate bias tensors", "\n", "self", ".", "forget_bias", "=", "nn", ".", "Parameter", "(", "torch", ".", "tensor", "(", "forget_bias", ",", "dtype", "=", "torch", ".", "float32", ")", ")", "\n", "self", ".", "input_bias", "=", "nn", ".", "Parameter", "(", "torch", ".", "tensor", "(", "input_bias", ",", "dtype", "=", "torch", ".", "float32", ")", ")", "\n", "\n", "########## number of outputs returned #####", "\n", "self", ".", "return_all_outputs", "=", "return_all_outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.daiquocnguyen_R-MeN.RMeN_pytorch.relational_rnn_general.RelationalMemory.repackage_hidden": [[109, 116], ["isinstance", "h.detach", "tuple", "relational_rnn_general.RelationalMemory.repackage_hidden"], "methods", ["home.repos.pwc.inspect_result.daiquocnguyen_R-MeN.RMeN_pytorch.relational_rnn_general.RelationalMemory.repackage_hidden"], ["", "def", "repackage_hidden", "(", "self", ",", "h", ")", ":", "\n", "        ", "\"\"\"Wraps hidden states in new Tensors, to detach them from their history.\"\"\"", "\n", "# needed for truncated BPTT, called at every batch forward pass", "\n", "if", "isinstance", "(", "h", ",", "torch", ".", "Tensor", ")", ":", "\n", "            ", "return", "h", ".", "detach", "(", ")", "\n", "", "else", ":", "\n", "            ", "return", "tuple", "(", "self", ".", "repackage_hidden", "(", "v", ")", "for", "v", "in", "h", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daiquocnguyen_R-MeN.RMeN_pytorch.relational_rnn_general.RelationalMemory.initial_state": [[117, 144], ["torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "range"], "methods", ["None"], ["", "", "def", "initial_state", "(", "self", ",", "batch_size", ",", "trainable", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        Creates the initial memory.\n        We should ensure each row of the memory is initialized to be unique,\n        so initialize the matrix to be the identity. We then pad or truncate\n        as necessary so that init_state is of size\n        (batch_size, self.mem_slots, self.mem_size).\n        Args:\n          batch_size: The size of the batch.\n          trainable: Whether the initial state is trainable. This is always True.\n        Returns:\n          init_state: A truncated or padded matrix of size\n            (batch_size, self.mem_slots, self.mem_size).\n        \"\"\"", "\n", "init_state", "=", "torch", ".", "stack", "(", "[", "torch", ".", "eye", "(", "self", ".", "mem_slots", ")", "for", "_", "in", "range", "(", "batch_size", ")", "]", ")", "\n", "\n", "# pad the matrix with zeros", "\n", "if", "self", ".", "mem_size", ">", "self", ".", "mem_slots", ":", "\n", "            ", "difference", "=", "self", ".", "mem_size", "-", "self", ".", "mem_slots", "\n", "pad", "=", "torch", ".", "zeros", "(", "(", "batch_size", ",", "self", ".", "mem_slots", ",", "difference", ")", ")", "\n", "init_state", "=", "torch", ".", "cat", "(", "[", "init_state", ",", "pad", "]", ",", "-", "1", ")", "\n", "\n", "# truncation. take the first 'self.mem_size' components", "\n", "", "elif", "self", ".", "mem_size", "<", "self", ".", "mem_slots", ":", "\n", "            ", "init_state", "=", "init_state", "[", ":", ",", ":", ",", ":", "self", ".", "mem_size", "]", "\n", "\n", "", "return", "init_state", "\n", "\n"]], "home.repos.pwc.inspect_result.daiquocnguyen_R-MeN.RMeN_pytorch.relational_rnn_general.RelationalMemory.multihead_attention": [[145, 191], ["relational_rnn_general.RelationalMemory.qkv_projector", "relational_rnn_general.RelationalMemory.qkv_layernorm", "relational_rnn_general.RelationalMemory.view", "relational_rnn_general.RelationalMemory.view.permute", "torch.split", "torch.split", "torch.split", "torch.split", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.softmax", "torch.softmax", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul.permute().contiguous", "torch.matmul.permute().contiguous", "torch.matmul.permute().contiguous.view", "k.permute", "torch.matmul.permute", "torch.matmul.permute"], "methods", ["None"], ["", "def", "multihead_attention", "(", "self", ",", "memory", ")", ":", "\n", "        ", "\"\"\"\n        Perform multi-head attention from 'Attention is All You Need'.\n        Implementation of the attention mechanism from\n        https://arxiv.org/abs/1706.03762.\n        Args:\n          memory: Memory tensor to perform attention on.\n        Returns:\n          new_memory: New memory tensor.\n        \"\"\"", "\n", "\n", "# First, a simple linear projection is used to construct queries", "\n", "qkv", "=", "self", ".", "qkv_projector", "(", "memory", ")", "\n", "# apply layernorm for every dim except the batch dim", "\n", "qkv", "=", "self", ".", "qkv_layernorm", "(", "qkv", ")", "\n", "\n", "# mem_slots needs to be dynamically computed since mem_slots got concatenated with inputs", "\n", "# example: self.mem_slots=10 and seq_length is 3, and then mem_slots is 10 + 1 = 11 for each 3 step forward pass", "\n", "# this is the same as self.mem_slots_plus_input, but defined to keep the sonnet implementation code style", "\n", "mem_slots", "=", "memory", ".", "shape", "[", "1", "]", "# denoted as N", "\n", "\n", "# split the qkv to multiple heads H", "\n", "# [B, N, F] => [B, N, H, F/H]", "\n", "qkv_reshape", "=", "qkv", ".", "view", "(", "qkv", ".", "shape", "[", "0", "]", ",", "mem_slots", ",", "self", ".", "num_heads", ",", "self", ".", "qkv_size", ")", "\n", "\n", "# [B, N, H, F/H] => [B, H, N, F/H]", "\n", "qkv_transpose", "=", "qkv_reshape", ".", "permute", "(", "0", ",", "2", ",", "1", ",", "3", ")", "\n", "\n", "# [B, H, N, key_size], [B, H, N, key_size], [B, H, N, value_size]", "\n", "q", ",", "k", ",", "v", "=", "torch", ".", "split", "(", "qkv_transpose", ",", "[", "self", ".", "key_size", ",", "self", ".", "key_size", ",", "self", ".", "value_size", "]", ",", "-", "1", ")", "\n", "\n", "# scale q with d_k, the dimensionality of the key vectors", "\n", "q", "*=", "(", "self", ".", "key_size", "**", "-", "0.5", ")", "\n", "\n", "# make it [B, H, N, N]", "\n", "dot_product", "=", "torch", ".", "matmul", "(", "q", ",", "k", ".", "permute", "(", "0", ",", "1", ",", "3", ",", "2", ")", ")", "\n", "weights", "=", "F", ".", "softmax", "(", "dot_product", ",", "dim", "=", "-", "1", ")", "\n", "\n", "# output is [B, H, N, V]", "\n", "output", "=", "torch", ".", "matmul", "(", "weights", ",", "v", ")", "\n", "\n", "# [B, H, N, V] => [B, N, H, V] => [B, N, H*V]", "\n", "output_transpose", "=", "output", ".", "permute", "(", "0", ",", "2", ",", "1", ",", "3", ")", ".", "contiguous", "(", ")", "\n", "new_memory", "=", "output_transpose", ".", "view", "(", "(", "output_transpose", ".", "shape", "[", "0", "]", ",", "output_transpose", ".", "shape", "[", "1", "]", ",", "-", "1", ")", ")", "\n", "\n", "return", "new_memory", "\n", "\n"]], "home.repos.pwc.inspect_result.daiquocnguyen_R-MeN.RMeN_pytorch.relational_rnn_general.RelationalMemory.state_size": [[192, 195], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "state_size", "(", "self", ")", ":", "\n", "        ", "return", "[", "self", ".", "mem_slots", ",", "self", ".", "mem_size", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.daiquocnguyen_R-MeN.RMeN_pytorch.relational_rnn_general.RelationalMemory.output_size": [[196, 199], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "output_size", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "mem_slots", "*", "self", ".", "mem_size", "\n", "\n"]], "home.repos.pwc.inspect_result.daiquocnguyen_R-MeN.RMeN_pytorch.relational_rnn_general.RelationalMemory.calculate_gate_size": [[200, 212], ["None"], "methods", ["None"], ["", "def", "calculate_gate_size", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Calculate the gate size from the gate_style.\n        Returns:\n          The per sample, per head parameter size of each gate.\n        \"\"\"", "\n", "if", "self", ".", "gate_style", "==", "'unit'", ":", "\n", "            ", "return", "self", ".", "mem_size", "\n", "", "elif", "self", ".", "gate_style", "==", "'memory'", ":", "\n", "            ", "return", "1", "\n", "", "else", ":", "# self.gate_style == None", "\n", "            ", "return", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.daiquocnguyen_R-MeN.RMeN_pytorch.relational_rnn_general.RelationalMemory.create_gates": [[213, 259], ["torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.split", "torch.split", "torch.split", "torch.split", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "len", "inputs.view.view.view", "relational_rnn_general.RelationalMemory.input_gate_projector", "gate_inputs.unsqueeze.unsqueeze.unsqueeze", "relational_rnn_general.RelationalMemory.memory_gate_projector", "ValueError", "ValueError", "int"], "methods", ["None"], ["", "", "def", "create_gates", "(", "self", ",", "inputs", ",", "memory", ")", ":", "\n", "        ", "\"\"\"\n        Create input and forget gates for this step using `inputs` and `memory`.\n        Args:\n          inputs: Tensor input.\n          memory: The current state of memory.\n        Returns:\n          input_gate: A LSTM-like insert gate.\n          forget_gate: A LSTM-like forget gate.\n        \"\"\"", "\n", "# We'll create the input and forget gates at once. Hence, calculate double", "\n", "# the gate size.", "\n", "\n", "# equation 8: since there is no output gate, h is just a tanh'ed m", "\n", "memory", "=", "torch", ".", "tanh", "(", "memory", ")", "\n", "\n", "# TODO: check this input flattening is correct", "\n", "# sonnet uses this, but i think it assumes time step of 1 for all cases", "\n", "# if inputs is (B, T, features) where T > 1, this gets incorrect", "\n", "# inputs = inputs.view(inputs.shape[0], -1)", "\n", "\n", "# fixed implementation", "\n", "if", "len", "(", "inputs", ".", "shape", ")", "==", "3", ":", "\n", "            ", "if", "inputs", ".", "shape", "[", "1", "]", ">", "1", ":", "\n", "                ", "raise", "ValueError", "(", "\n", "\"input seq length is larger than 1. create_gate function is meant to be called for each step, with input seq length of 1\"", ")", "\n", "", "inputs", "=", "inputs", ".", "view", "(", "inputs", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", "# matmul for equation 4 and 5", "\n", "# there is no output gate, so equation 6 is not implemented", "\n", "gate_inputs", "=", "self", ".", "input_gate_projector", "(", "inputs", ")", "\n", "gate_inputs", "=", "gate_inputs", ".", "unsqueeze", "(", "dim", "=", "1", ")", "\n", "gate_memory", "=", "self", ".", "memory_gate_projector", "(", "memory", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"input shape of create_gate function is 2, expects 3\"", ")", "\n", "\n", "# this completes the equation 4 and 5", "\n", "", "gates", "=", "gate_memory", "+", "gate_inputs", "\n", "gates", "=", "torch", ".", "split", "(", "gates", ",", "split_size_or_sections", "=", "int", "(", "gates", ".", "shape", "[", "2", "]", "/", "2", ")", ",", "dim", "=", "2", ")", "\n", "input_gate", ",", "forget_gate", "=", "gates", "\n", "assert", "input_gate", ".", "shape", "[", "2", "]", "==", "forget_gate", ".", "shape", "[", "2", "]", "\n", "\n", "# to be used for equation 7", "\n", "input_gate", "=", "torch", ".", "sigmoid", "(", "input_gate", "+", "self", ".", "input_bias", ")", "\n", "forget_gate", "=", "torch", ".", "sigmoid", "(", "forget_gate", "+", "self", ".", "forget_bias", ")", "\n", "\n", "return", "input_gate", ",", "forget_gate", "\n", "\n"]], "home.repos.pwc.inspect_result.daiquocnguyen_R-MeN.RMeN_pytorch.relational_rnn_general.RelationalMemory.attend_over_memory": [[260, 282], ["range", "relational_rnn_general.RelationalMemory.multihead_attention", "relational_rnn_general.RelationalMemory.attended_memory_layernorm", "enumerate", "relational_rnn_general.RelationalMemory.attended_memory_layernorm2", "torch.relu", "torch.relu"], "methods", ["home.repos.pwc.inspect_result.daiquocnguyen_R-MeN.RMeN_pytorch.relational_rnn_general.RelationalMemory.multihead_attention"], ["", "def", "attend_over_memory", "(", "self", ",", "memory", ")", ":", "\n", "        ", "\"\"\"\n        Perform multiheaded attention over `memory`.\n            Args:\n              memory: Current relational memory.\n            Returns:\n              The attended-over memory.\n        \"\"\"", "\n", "for", "_", "in", "range", "(", "self", ".", "num_blocks", ")", ":", "\n", "            ", "attended_memory", "=", "self", ".", "multihead_attention", "(", "memory", ")", "\n", "\n", "# Add a skip connection to the multiheaded attention's input.", "\n", "memory", "=", "self", ".", "attended_memory_layernorm", "(", "memory", "+", "attended_memory", ")", "\n", "\n", "# add a skip connection to the attention_mlp's input.", "\n", "attention_mlp", "=", "memory", "\n", "for", "i", ",", "l", "in", "enumerate", "(", "self", ".", "attention_mlp", ")", ":", "\n", "                ", "attention_mlp", "=", "self", ".", "attention_mlp", "[", "i", "]", "(", "attention_mlp", ")", "\n", "attention_mlp", "=", "F", ".", "relu", "(", "attention_mlp", ")", "\n", "", "memory", "=", "self", ".", "attended_memory_layernorm2", "(", "memory", "+", "attention_mlp", ")", "\n", "\n", "", "return", "memory", "\n", "\n"]], "home.repos.pwc.inspect_result.daiquocnguyen_R-MeN.RMeN_pytorch.relational_rnn_general.RelationalMemory.forward_step": [[283, 327], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "relational_rnn_general.RelationalMemory.attend_over_memory", "relational_rnn_general.RelationalMemory.view", "relational_rnn_general.RelationalMemory.view", "relational_rnn_general.RelationalMemory.input_projector", "relational_rnn_general.RelationalMemory.view", "relational_rnn_general.RelationalMemory.input_projector", "relational_rnn_general.RelationalMemory.unsqueeze", "relational_rnn_general.RelationalMemory.create_gates", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh"], "methods", ["home.repos.pwc.inspect_result.daiquocnguyen_R-MeN.RMeN_pytorch.relational_rnn_general.RelationalMemory.attend_over_memory", "home.repos.pwc.inspect_result.daiquocnguyen_R-MeN.RMeN_pytorch.relational_rnn_general.RelationalMemory.create_gates"], ["", "def", "forward_step", "(", "self", ",", "inputs", ",", "memory", ",", "treat_input_as_matrix", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        Forward step of the relational memory core.\n        Args:\n          inputs: Tensor input.\n          memory: Memory output from the previous time step.\n          treat_input_as_matrix: Optional, whether to treat `input` as a sequence\n            of matrices. Default to False, in which case the input is flattened\n            into a vector.\n        Returns:\n          output: This time step's output.\n          next_memory: The next version of memory to use.\n        \"\"\"", "\n", "\n", "if", "treat_input_as_matrix", ":", "\n", "# keep (Batch, Seq, ...) dim (0, 1), flatten starting from dim 2", "\n", "            ", "inputs", "=", "inputs", ".", "view", "(", "inputs", ".", "shape", "[", "0", "]", ",", "inputs", ".", "shape", "[", "1", "]", ",", "-", "1", ")", "\n", "# apply linear layer for dim 2", "\n", "inputs_reshape", "=", "self", ".", "input_projector", "(", "inputs", ")", "\n", "", "else", ":", "\n", "# keep (Batch, ...) dim (0), flatten starting from dim 1", "\n", "            ", "inputs", "=", "inputs", ".", "view", "(", "inputs", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", "# apply linear layer for dim 1", "\n", "inputs", "=", "self", ".", "input_projector", "(", "inputs", ")", "\n", "# unsqueeze the time step to dim 1", "\n", "inputs_reshape", "=", "inputs", ".", "unsqueeze", "(", "dim", "=", "1", ")", "\n", "\n", "", "memory_plus_input", "=", "torch", ".", "cat", "(", "[", "memory", ",", "inputs_reshape", "]", ",", "dim", "=", "1", ")", "\n", "next_memory", "=", "self", ".", "attend_over_memory", "(", "memory_plus_input", ")", "\n", "\n", "# cut out the concatenated input vectors from the original memory slots", "\n", "n", "=", "inputs_reshape", ".", "shape", "[", "1", "]", "\n", "next_memory", "=", "next_memory", "[", ":", ",", ":", "-", "n", ",", ":", "]", "\n", "\n", "if", "self", ".", "gate_style", "==", "'unit'", "or", "self", ".", "gate_style", "==", "'memory'", ":", "\n", "# these gates are sigmoid-applied ones for equation 7", "\n", "            ", "input_gate", ",", "forget_gate", "=", "self", ".", "create_gates", "(", "inputs_reshape", ",", "memory", ")", "\n", "# equation 7 calculation", "\n", "next_memory", "=", "input_gate", "*", "torch", ".", "tanh", "(", "next_memory", ")", "\n", "next_memory", "+=", "forget_gate", "*", "memory", "\n", "\n", "", "output", "=", "next_memory", ".", "view", "(", "next_memory", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", "\n", "return", "output", ",", "next_memory", "\n", "\n"]], "home.repos.pwc.inspect_result.daiquocnguyen_R-MeN.RMeN_pytorch.relational_rnn_general.RelationalMemory.forward": [[328, 350], ["relational_rnn_general.RelationalMemory.repackage_hidden", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "relational_rnn_general.RelationalMemory.forward_step", "torch.cat.append", "torch.cat.append"], "methods", ["home.repos.pwc.inspect_result.daiquocnguyen_R-MeN.RMeN_pytorch.relational_rnn_general.RelationalMemory.repackage_hidden", "home.repos.pwc.inspect_result.daiquocnguyen_R-MeN.RMeN_pytorch.relational_rnn_general.RelationalMemory.forward_step"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "memory", ")", ":", "\n", "# Starting each batch, we detach the hidden state from how it was previously produced.", "\n", "# If we didn't, the model would try backpropagating all the way to start of the dataset.", "\n", "        ", "memory", "=", "self", ".", "repackage_hidden", "(", "memory", ")", "\n", "\n", "# for loop implementation of (entire) recurrent forward pass of the model", "\n", "# inputs is batch first [batch, seq], and output logit per step is [batch, vocab]", "\n", "# so the concatenated logits are [seq * batch, vocab]", "\n", "\n", "# targets are flattened [seq, batch] => [seq * batch], so the dimension is correct", "\n", "\n", "logits", "=", "[", "]", "\n", "# shape[1] is seq_lenth T", "\n", "for", "idx_step", "in", "range", "(", "inputs", ".", "shape", "[", "1", "]", ")", ":", "\n", "            ", "logit", ",", "memory", "=", "self", ".", "forward_step", "(", "inputs", "[", ":", ",", "idx_step", "]", ",", "memory", ")", "\n", "logits", ".", "append", "(", "logit", ")", "\n", "", "logits", "=", "torch", ".", "cat", "(", "logits", ")", "\n", "\n", "if", "self", ".", "return_all_outputs", ":", "\n", "            ", "return", "logits", ",", "memory", "\n", "", "else", ":", "\n", "            ", "return", "logit", ",", "memory", "\n", "\n"]], "home.repos.pwc.inspect_result.daiquocnguyen_R-MeN.RMeN_tf.builddata_ecir.Batch_Loader_ecir.__init__": [[405, 410], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "train_triples", ",", "train_val_triples", ",", "batch_size", "=", "100", ")", ":", "\n", "\n", "        ", "self", ".", "train_triples", "=", "train_triples", "\n", "self", ".", "train_val_triples", "=", "train_val_triples", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "\n"]], "home.repos.pwc.inspect_result.daiquocnguyen_R-MeN.RMeN_tf.builddata_ecir.Batch_Loader_ecir.__call__": [[411, 425], ["numpy.random.randint", "numpy.concatenate", "numpy.concatenate", "numpy.append", "numpy.append", "len", "len", "numpy.append", "numpy.append", "builddata_ecir.Batch_Loader_ecir.new_triples_indexes.astype", "builddata_ecir.Batch_Loader_ecir.new_triples_values.astype"], "methods", ["None"], ["", "def", "__call__", "(", "self", ")", ":", "\n", "\n", "        ", "idxs", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "len", "(", "self", ".", "train_val_triples", ")", ",", "self", ".", "batch_size", ")", "\n", "self", ".", "new_triples_indexes", "=", "np", ".", "concatenate", "(", "self", ".", "train_triples", "[", "idxs", "]", ")", "\n", "self", ".", "new_triples_values", "=", "np", ".", "concatenate", "(", "self", ".", "train_val_triples", "[", "idxs", "]", ",", "axis", "=", "0", ")", "\n", "\n", "while", "len", "(", "self", ".", "new_triples_indexes", ")", "<", "self", ".", "batch_size", "*", "10", ":", "\n", "            ", "self", ".", "new_triples_indexes", "=", "np", ".", "append", "(", "self", ".", "new_triples_indexes", ",", "self", ".", "new_triples_indexes", ",", "axis", "=", "0", ")", "\n", "self", ".", "new_triples_values", "=", "np", ".", "append", "(", "self", ".", "new_triples_values", ",", "self", ".", "new_triples_values", ",", "axis", "=", "0", ")", "\n", "\n", "", "self", ".", "new_triples_indexes", "=", "np", ".", "append", "(", "self", ".", "new_triples_indexes", ",", "self", ".", "new_triples_indexes", "[", ":", "(", "self", ".", "batch_size", "*", "20", "-", "self", ".", "new_triples_values", ".", "shape", "[", "0", "]", ")", "]", ",", "axis", "=", "0", ")", "\n", "self", ".", "new_triples_values", "=", "np", ".", "append", "(", "self", ".", "new_triples_values", ",", "self", ".", "new_triples_values", "[", ":", "(", "self", ".", "batch_size", "*", "20", "-", "self", ".", "new_triples_values", ".", "shape", "[", "0", "]", ")", "]", ",", "axis", "=", "0", ")", "\n", "\n", "return", "self", ".", "new_triples_indexes", ".", "astype", "(", "np", ".", "int32", ")", ",", "self", ".", "new_triples_values", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daiquocnguyen_R-MeN.RMeN_tf.builddata_ecir.read_from_id": [[2, 12], ["open", "len", "line.strip().split", "int", "line.strip().split", "line.strip", "int", "line.strip"], "function", ["None"], ["def", "read_from_id", "(", "filename", "=", "'../data/WN18RR/entity2id.txt'", ")", ":", "\n", "    ", "entity2id", "=", "{", "}", "\n", "id2entity", "=", "{", "}", "\n", "with", "open", "(", "filename", ")", "as", "f", ":", "\n", "        ", "for", "line", "in", "f", ":", "\n", "            ", "if", "len", "(", "line", ".", "strip", "(", ")", ".", "split", "(", ")", ")", ">", "1", ":", "\n", "                ", "tmp", "=", "line", ".", "strip", "(", ")", ".", "split", "(", ")", "\n", "entity2id", "[", "tmp", "[", "0", "]", "]", "=", "int", "(", "tmp", "[", "1", "]", ")", "\n", "id2entity", "[", "int", "(", "tmp", "[", "1", "]", ")", "]", "=", "tmp", "[", "0", "]", "\n", "", "", "", "return", "entity2id", ",", "id2entity", "\n", "\n"]], "home.repos.pwc.inspect_result.daiquocnguyen_R-MeN.RMeN_tf.builddata_ecir.assignEmbeddings": [[13, 19], ["numpy.empty().astype", "numpy.empty", "len"], "function", ["None"], ["", "def", "assignEmbeddings", "(", "lstent", ",", "word_indexes", ",", "embedding_dim", "=", "200", ")", ":", "\n", "    ", "lstEmbedUser", "=", "np", ".", "empty", "(", "[", "len", "(", "word_indexes", ")", ",", "embedding_dim", "]", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "for", "word", "in", "word_indexes", ":", "\n", "        ", "_ind", "=", "word_indexes", "[", "word", "]", "\n", "lstEmbedUser", "[", "_ind", "]", "=", "lstent", "[", "word", "]", "\n", "", "return", "lstEmbedUser", "\n", "\n"]], "home.repos.pwc.inspect_result.daiquocnguyen_R-MeN.RMeN_tf.builddata_ecir.init_dataset_ecir": [[21, 29], ["open", "line.strip().split", "float", "line.strip"], "function", ["None"], ["", "def", "init_dataset_ecir", "(", "entinit", ")", ":", "\n", "    ", "lstent", "=", "{", "}", "\n", "with", "open", "(", "entinit", ")", "as", "f", ":", "\n", "        ", "for", "line", "in", "f", ":", "\n", "            ", "lstval", "=", "line", ".", "strip", "(", ")", ".", "split", "(", ")", "\n", "tmp", "=", "[", "float", "(", "val", ")", "for", "val", "in", "lstval", "[", "1", ":", "]", "]", "\n", "lstent", "[", "lstval", "[", "0", "]", "]", "=", "tmp", "\n", "", "", "return", "lstent", "\n", "\n"]], "home.repos.pwc.inspect_result.daiquocnguyen_R-MeN.RMeN_tf.builddata_ecir.init_norm_Vector": [[30, 43], ["open", "open", "numpy.array", "numpy.array", "lstrel.append", "lstent.append", "len", "float", "float", "line.strip().split", "line.strip().split", "line.strip", "line.strip"], "function", ["None"], ["", "def", "init_norm_Vector", "(", "relinit", ",", "entinit", ",", "embedding_size", ")", ":", "\n", "    ", "lstent", "=", "[", "]", "\n", "lstrel", "=", "[", "]", "\n", "with", "open", "(", "relinit", ")", "as", "f", ":", "\n", "        ", "for", "line", "in", "f", ":", "\n", "            ", "tmp", "=", "[", "float", "(", "val", ")", "for", "val", "in", "line", ".", "strip", "(", ")", ".", "split", "(", ")", "]", "\n", "lstrel", ".", "append", "(", "tmp", ")", "\n", "", "", "with", "open", "(", "entinit", ")", "as", "f", ":", "\n", "        ", "for", "line", "in", "f", ":", "\n", "            ", "tmp", "=", "[", "float", "(", "val", ")", "for", "val", "in", "line", ".", "strip", "(", ")", ".", "split", "(", ")", "]", "\n", "lstent", ".", "append", "(", "tmp", ")", "\n", "", "", "assert", "embedding_size", "%", "len", "(", "lstent", "[", "0", "]", ")", "==", "0", "\n", "return", "np", ".", "array", "(", "lstent", ",", "dtype", "=", "np", ".", "float32", ")", ",", "np", ".", "array", "(", "lstrel", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daiquocnguyen_R-MeN.RMeN_tf.builddata_ecir.getID": [[45, 89], ["open", "open.close", "open", "open.close", "open", "open", "open", "open.write", "open.write", "open.write", "open.write", "line.strip().split.strip().split", "line.strip().split.strip().split", "line.strip().split.strip().split", "len", "len", "len", "len", "len", "len", "len", "len", "len", "str", "str", "line.strip().split.strip", "line.strip().split.strip", "line.strip().split.strip"], "function", ["None"], ["", "def", "getID", "(", "folder", "=", "'data/WN18RR/'", ")", ":", "\n", "    ", "lstEnts", "=", "{", "}", "\n", "lstRels", "=", "{", "}", "\n", "with", "open", "(", "folder", "+", "'train.txt'", ")", "as", "f", ":", "\n", "        ", "for", "line", "in", "f", ":", "\n", "            ", "line", "=", "line", ".", "strip", "(", ")", ".", "split", "(", ")", "\n", "if", "line", "[", "0", "]", "not", "in", "lstEnts", ":", "\n", "                ", "lstEnts", "[", "line", "[", "0", "]", "]", "=", "len", "(", "lstEnts", ")", "\n", "", "if", "line", "[", "2", "]", "not", "in", "lstEnts", ":", "\n", "                ", "lstEnts", "[", "line", "[", "2", "]", "]", "=", "len", "(", "lstEnts", ")", "\n", "", "if", "line", "[", "1", "]", "not", "in", "lstRels", ":", "\n", "                ", "lstRels", "[", "line", "[", "1", "]", "]", "=", "len", "(", "lstRels", ")", "\n", "\n", "", "", "", "with", "open", "(", "folder", "+", "'valid.txt'", ")", "as", "f", ":", "\n", "        ", "for", "line", "in", "f", ":", "\n", "            ", "line", "=", "line", ".", "strip", "(", ")", ".", "split", "(", ")", "\n", "if", "line", "[", "0", "]", "not", "in", "lstEnts", ":", "\n", "                ", "lstEnts", "[", "line", "[", "0", "]", "]", "=", "len", "(", "lstEnts", ")", "\n", "", "if", "line", "[", "2", "]", "not", "in", "lstEnts", ":", "\n", "                ", "lstEnts", "[", "line", "[", "2", "]", "]", "=", "len", "(", "lstEnts", ")", "\n", "", "if", "line", "[", "1", "]", "not", "in", "lstRels", ":", "\n", "                ", "lstRels", "[", "line", "[", "1", "]", "]", "=", "len", "(", "lstRels", ")", "\n", "\n", "", "", "", "with", "open", "(", "folder", "+", "'test.txt'", ")", "as", "f", ":", "\n", "        ", "for", "line", "in", "f", ":", "\n", "            ", "line", "=", "line", ".", "strip", "(", ")", ".", "split", "(", ")", "\n", "if", "line", "[", "0", "]", "not", "in", "lstEnts", ":", "\n", "                ", "lstEnts", "[", "line", "[", "0", "]", "]", "=", "len", "(", "lstEnts", ")", "\n", "", "if", "line", "[", "2", "]", "not", "in", "lstEnts", ":", "\n", "                ", "lstEnts", "[", "line", "[", "2", "]", "]", "=", "len", "(", "lstEnts", ")", "\n", "", "if", "line", "[", "1", "]", "not", "in", "lstRels", ":", "\n", "                ", "lstRels", "[", "line", "[", "1", "]", "]", "=", "len", "(", "lstRels", ")", "\n", "\n", "", "", "", "wri", "=", "open", "(", "folder", "+", "'entity2id.txt'", ",", "'w'", ")", "\n", "for", "entity", "in", "lstEnts", ":", "\n", "        ", "wri", ".", "write", "(", "entity", "+", "'\\t'", "+", "str", "(", "lstEnts", "[", "entity", "]", ")", ")", "\n", "wri", ".", "write", "(", "'\\n'", ")", "\n", "", "wri", ".", "close", "(", ")", "\n", "\n", "wri", "=", "open", "(", "folder", "+", "'relation2id.txt'", ",", "'w'", ")", "\n", "for", "entity", "in", "lstRels", ":", "\n", "        ", "wri", ".", "write", "(", "entity", "+", "'\\t'", "+", "str", "(", "lstRels", "[", "entity", "]", ")", ")", "\n", "wri", ".", "write", "(", "'\\n'", ")", "\n", "", "wri", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daiquocnguyen_R-MeN.RMeN_tf.builddata_ecir.parse_line": [[91, 101], ["line.strip().split.strip().split", "len", "line.strip().split.strip"], "function", ["None"], ["", "def", "parse_line", "(", "line", ")", ":", "\n", "    ", "line", "=", "line", ".", "strip", "(", ")", ".", "split", "(", ")", "\n", "sub", "=", "line", "[", "0", "]", "\n", "rel", "=", "line", "[", "1", "]", "\n", "obj", "=", "line", "[", "2", "]", "\n", "val", "=", "[", "1", "]", "\n", "if", "len", "(", "line", ")", ">", "3", ":", "\n", "        ", "if", "line", "[", "3", "]", "==", "'-1'", ":", "\n", "            ", "val", "=", "[", "-", "1", "]", "\n", "", "", "return", "sub", ",", "obj", ",", "rel", ",", "val", "\n", "\n"]], "home.repos.pwc.inspect_result.daiquocnguyen_R-MeN.RMeN_tf.builddata_ecir.load_triples_from_txt": [[102, 153], ["dict", "enumerate", "dict", "set", "set", "open", "f.readlines", "builddata_ecir.parse_line", "max", "set.add", "set.add", "set.add", "dict.values"], "function", ["home.repos.pwc.inspect_result.daiquocnguyen_R-MeN.RMeN_tf.builddata.parse_line"], ["", "def", "load_triples_from_txt", "(", "filename", ",", "words_indexes", "=", "None", ",", "parse_line", "=", "parse_line", ")", ":", "\n", "    ", "\"\"\"\n    Take a list of file names and build the corresponding dictionnary of triples\n    \"\"\"", "\n", "if", "words_indexes", "==", "None", ":", "\n", "        ", "words_indexes", "=", "dict", "(", ")", "\n", "entities", "=", "set", "(", ")", "\n", "next_ent", "=", "0", "\n", "", "else", ":", "\n", "        ", "entities", "=", "set", "(", "words_indexes", ")", "\n", "next_ent", "=", "max", "(", "words_indexes", ".", "values", "(", ")", ")", "+", "1", "\n", "\n", "", "data", "=", "dict", "(", ")", "\n", "\n", "with", "open", "(", "filename", ")", "as", "f", ":", "\n", "        ", "lines", "=", "f", ".", "readlines", "(", ")", "\n", "\n", "", "for", "_", ",", "line", "in", "enumerate", "(", "lines", ")", ":", "\n", "        ", "sub", ",", "obj", ",", "rel", ",", "val", "=", "parse_line", "(", "line", ")", "\n", "\n", "if", "sub", "in", "entities", ":", "\n", "            ", "sub_ind", "=", "words_indexes", "[", "sub", "]", "\n", "", "else", ":", "\n", "            ", "sub_ind", "=", "next_ent", "\n", "next_ent", "+=", "1", "\n", "words_indexes", "[", "sub", "]", "=", "sub_ind", "\n", "entities", ".", "add", "(", "sub", ")", "\n", "\n", "", "if", "rel", "in", "entities", ":", "\n", "            ", "rel_ind", "=", "words_indexes", "[", "rel", "]", "\n", "", "else", ":", "\n", "            ", "rel_ind", "=", "next_ent", "\n", "next_ent", "+=", "1", "\n", "words_indexes", "[", "rel", "]", "=", "rel_ind", "\n", "entities", ".", "add", "(", "rel", ")", "\n", "\n", "", "if", "obj", "in", "entities", ":", "\n", "            ", "obj_ind", "=", "words_indexes", "[", "obj", "]", "\n", "", "else", ":", "\n", "            ", "obj_ind", "=", "next_ent", "\n", "next_ent", "+=", "1", "\n", "words_indexes", "[", "obj", "]", "=", "obj_ind", "\n", "entities", ".", "add", "(", "obj", ")", "\n", "\n", "", "data", "[", "(", "sub_ind", ",", "rel_ind", ",", "obj_ind", ")", "]", "=", "val", "\n", "\n", "", "indexes_words", "=", "{", "}", "\n", "for", "tmpkey", "in", "words_indexes", ":", "\n", "        ", "indexes_words", "[", "words_indexes", "[", "tmpkey", "]", "]", "=", "tmpkey", "\n", "\n", "", "return", "data", ",", "words_indexes", ",", "indexes_words", "\n", "\n"]], "home.repos.pwc.inspect_result.daiquocnguyen_R-MeN.RMeN_tf.builddata_ecir.build_data": [[155, 202], ["builddata_ecir.load_triples_from_txt", "builddata_ecir.load_triples_from_txt", "builddata_ecir.load_triples_from_txt", "builddata_ecir.read_from_id", "builddata_ecir.read_from_id", "enumerate", "range", "range", "range", "open", "f.readlines", "builddata_ecir.parse_line", "len", "len", "len", "len", "len", "sum", "sum", "left_entity[].values", "right_entity[].values"], "function", ["home.repos.pwc.inspect_result.daiquocnguyen_R-MeN.RMeN_tf.builddata.load_triples_from_txt", "home.repos.pwc.inspect_result.daiquocnguyen_R-MeN.RMeN_tf.builddata.load_triples_from_txt", "home.repos.pwc.inspect_result.daiquocnguyen_R-MeN.RMeN_tf.builddata.load_triples_from_txt", "home.repos.pwc.inspect_result.daiquocnguyen_R-MeN.RMeN_tf.builddata.read_from_id", "home.repos.pwc.inspect_result.daiquocnguyen_R-MeN.RMeN_tf.builddata.read_from_id", "home.repos.pwc.inspect_result.daiquocnguyen_R-MeN.RMeN_tf.builddata.parse_line"], ["", "def", "build_data", "(", "name", "=", "'WN18'", ",", "path", "=", "'../../CNNGraph/data'", ")", ":", "\n", "    ", "folder", "=", "path", "+", "'/'", "+", "name", "+", "'/'", "\n", "\n", "train_triples", ",", "words_indexes", ",", "_", "=", "load_triples_from_txt", "(", "folder", "+", "'train.txt'", ",", "parse_line", "=", "parse_line", ")", "\n", "\n", "valid_triples", ",", "words_indexes", ",", "_", "=", "load_triples_from_txt", "(", "folder", "+", "'valid.txt'", ",", "\n", "words_indexes", "=", "words_indexes", ",", "parse_line", "=", "parse_line", ")", "\n", "\n", "test_triples", ",", "words_indexes", ",", "indexes_words", "=", "load_triples_from_txt", "(", "folder", "+", "'test.txt'", ",", "\n", "words_indexes", "=", "words_indexes", ",", "\n", "parse_line", "=", "parse_line", ")", "\n", "\n", "entity2id", ",", "id2entity", "=", "read_from_id", "(", "folder", "+", "'/entity2id.txt'", ")", "\n", "relation2id", ",", "id2relation", "=", "read_from_id", "(", "folder", "+", "'/relation2id.txt'", ")", "\n", "left_entity", "=", "{", "}", "\n", "right_entity", "=", "{", "}", "\n", "\n", "with", "open", "(", "folder", "+", "'train.txt'", ")", "as", "f", ":", "\n", "        ", "lines", "=", "f", ".", "readlines", "(", ")", "\n", "", "for", "_", ",", "line", "in", "enumerate", "(", "lines", ")", ":", "\n", "        ", "head", ",", "tail", ",", "rel", ",", "val", "=", "parse_line", "(", "line", ")", "\n", "# count the number of occurrences for each (heal, rel)", "\n", "if", "relation2id", "[", "rel", "]", "not", "in", "left_entity", ":", "\n", "            ", "left_entity", "[", "relation2id", "[", "rel", "]", "]", "=", "{", "}", "\n", "", "if", "entity2id", "[", "head", "]", "not", "in", "left_entity", "[", "relation2id", "[", "rel", "]", "]", ":", "\n", "            ", "left_entity", "[", "relation2id", "[", "rel", "]", "]", "[", "entity2id", "[", "head", "]", "]", "=", "0", "\n", "", "left_entity", "[", "relation2id", "[", "rel", "]", "]", "[", "entity2id", "[", "head", "]", "]", "+=", "1", "\n", "# count the number of occurrences for each (rel, tail)", "\n", "if", "relation2id", "[", "rel", "]", "not", "in", "right_entity", ":", "\n", "            ", "right_entity", "[", "relation2id", "[", "rel", "]", "]", "=", "{", "}", "\n", "", "if", "entity2id", "[", "tail", "]", "not", "in", "right_entity", "[", "relation2id", "[", "rel", "]", "]", ":", "\n", "            ", "right_entity", "[", "relation2id", "[", "rel", "]", "]", "[", "entity2id", "[", "tail", "]", "]", "=", "0", "\n", "", "right_entity", "[", "relation2id", "[", "rel", "]", "]", "[", "entity2id", "[", "tail", "]", "]", "+=", "1", "\n", "\n", "", "left_avg", "=", "{", "}", "\n", "for", "i", "in", "range", "(", "len", "(", "relation2id", ")", ")", ":", "\n", "        ", "left_avg", "[", "i", "]", "=", "sum", "(", "left_entity", "[", "i", "]", ".", "values", "(", ")", ")", "*", "1.0", "/", "len", "(", "left_entity", "[", "i", "]", ")", "\n", "\n", "", "right_avg", "=", "{", "}", "\n", "for", "i", "in", "range", "(", "len", "(", "relation2id", ")", ")", ":", "\n", "        ", "right_avg", "[", "i", "]", "=", "sum", "(", "right_entity", "[", "i", "]", ".", "values", "(", ")", ")", "*", "1.0", "/", "len", "(", "right_entity", "[", "i", "]", ")", "\n", "\n", "", "headTailSelector", "=", "{", "}", "\n", "for", "i", "in", "range", "(", "len", "(", "relation2id", ")", ")", ":", "\n", "        ", "headTailSelector", "[", "i", "]", "=", "1000", "*", "right_avg", "[", "i", "]", "/", "(", "right_avg", "[", "i", "]", "+", "left_avg", "[", "i", "]", ")", "\n", "\n", "", "return", "train_triples", ",", "valid_triples", ",", "test_triples", ",", "words_indexes", ",", "indexes_words", ",", "headTailSelector", ",", "entity2id", ",", "id2entity", ",", "relation2id", ",", "id2relation", "\n", "\n"]], "home.repos.pwc.inspect_result.daiquocnguyen_R-MeN.RMeN_tf.builddata_ecir.dic_of_chars": [[203, 211], ["len", "len"], "function", ["None"], ["", "def", "dic_of_chars", "(", "words_indexes", ")", ":", "\n", "    ", "lstChars", "=", "{", "}", "\n", "for", "word", "in", "words_indexes", ":", "\n", "        ", "for", "char", "in", "word", ":", "\n", "            ", "if", "char", "not", "in", "lstChars", ":", "\n", "                ", "lstChars", "[", "char", "]", "=", "len", "(", "lstChars", ")", "\n", "", "", "", "lstChars", "[", "'unk'", "]", "=", "len", "(", "lstChars", ")", "\n", "return", "lstChars", "\n", "\n"]], "home.repos.pwc.inspect_result.daiquocnguyen_R-MeN.RMeN_tf.builddata_ecir.convert_to_seq_chars": [[213, 221], ["lst.append"], "function", ["None"], ["", "def", "convert_to_seq_chars", "(", "x_batch", ",", "lstChars", ",", "indexes_words", ")", ":", "\n", "    ", "lst", "=", "[", "]", "\n", "for", "[", "tmpH", ",", "tmpR", ",", "tmpT", "]", "in", "x_batch", ":", "\n", "        ", "wH", "=", "[", "lstChars", "[", "tmp", "]", "for", "tmp", "in", "indexes_words", "[", "tmpH", "]", "]", "\n", "wR", "=", "[", "lstChars", "[", "tmp", "]", "for", "tmp", "in", "indexes_words", "[", "tmpR", "]", "]", "\n", "wT", "=", "[", "lstChars", "[", "tmp", "]", "for", "tmp", "in", "indexes_words", "[", "tmpT", "]", "]", "\n", "lst", ".", "append", "(", "[", "wH", ",", "wR", ",", "wT", "]", ")", "\n", "", "return", "lst", "\n", "\n"]], "home.repos.pwc.inspect_result.daiquocnguyen_R-MeN.RMeN_tf.builddata_ecir._pad_sequences": [[222, 231], ["list", "min", "max", "len", "len"], "function", ["None"], ["", "def", "_pad_sequences", "(", "sequences", ",", "pad_tok", ",", "max_length", ")", ":", "\n", "    ", "sequence_padded", ",", "sequence_length", "=", "[", "]", ",", "[", "]", "\n", "for", "seq", "in", "sequences", ":", "\n", "        ", "seq", "=", "list", "(", "seq", ")", "\n", "seq_", "=", "seq", "[", ":", "max_length", "]", "+", "[", "pad_tok", "]", "*", "max", "(", "max_length", "-", "len", "(", "seq", ")", ",", "0", ")", "\n", "sequence_padded", "+=", "[", "seq_", "]", "\n", "sequence_length", "+=", "[", "min", "(", "len", "(", "seq", ")", ",", "max_length", ")", "]", "\n", "\n", "", "return", "sequence_padded", ",", "sequence_length", "\n", "\n"]], "home.repos.pwc.inspect_result.daiquocnguyen_R-MeN.RMeN_tf.builddata_ecir.pad_sequences": [[233, 248], ["max", "max", "builddata_ecir._pad_sequences", "builddata_ecir._pad_sequences", "builddata_ecir._pad_sequences", "map", "numpy.array().astype", "numpy.array().astype", "max", "map", "len", "numpy.array", "numpy.array", "len"], "function", ["home.repos.pwc.inspect_result.daiquocnguyen_R-MeN.RMeN_tf.builddata._pad_sequences", "home.repos.pwc.inspect_result.daiquocnguyen_R-MeN.RMeN_tf.builddata._pad_sequences", "home.repos.pwc.inspect_result.daiquocnguyen_R-MeN.RMeN_tf.builddata._pad_sequences"], ["", "def", "pad_sequences", "(", "sequences", ",", "pad_tok", ")", ":", "\n", "    ", "sequence_padded", ",", "sequence_length", "=", "[", "]", ",", "[", "]", "\n", "max_length_word", "=", "max", "(", "[", "max", "(", "map", "(", "lambda", "x", ":", "len", "(", "x", ")", ",", "seq", ")", ")", "\n", "for", "seq", "in", "sequences", "]", ")", "\n", "for", "seq", "in", "sequences", ":", "\n", "# all words are same length now", "\n", "        ", "sp", ",", "sl", "=", "_pad_sequences", "(", "seq", ",", "pad_tok", ",", "max_length_word", ")", "\n", "sequence_padded", "+=", "[", "sp", "]", "\n", "sequence_length", "+=", "[", "sl", "]", "\n", "\n", "", "max_length_sentence", "=", "max", "(", "map", "(", "lambda", "x", ":", "len", "(", "x", ")", ",", "sequences", ")", ")", "\n", "sequence_padded", ",", "_", "=", "_pad_sequences", "(", "sequence_padded", ",", "[", "pad_tok", "]", "*", "max_length_word", ",", "max_length_sentence", ")", "\n", "sequence_length", ",", "_", "=", "_pad_sequences", "(", "sequence_length", ",", "0", ",", "max_length_sentence", ")", "\n", "\n", "return", "np", ".", "array", "(", "sequence_padded", ")", ".", "astype", "(", "np", ".", "int32", ")", ",", "np", ".", "array", "(", "sequence_length", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daiquocnguyen_R-MeN.RMeN_tf.builddata_ecir.parse_line_ecir": [[250, 268], ["line.strip().split.strip().split", "len", "int", "line.strip().split.strip", "len", "int", "line[].split", "line[].split"], "function", ["None"], ["", "def", "parse_line_ecir", "(", "line", ",", "query", ",", "user", ")", ":", "\n", "    ", "line", "=", "line", ".", "strip", "(", ")", ".", "split", "(", ")", "\n", "if", "len", "(", "line", ")", "==", "5", ":", "\n", "        ", "sub", "=", "line", "[", "2", "]", "\n", "rel", "=", "line", "[", "3", "]", "\n", "obj", "=", "line", "[", "4", "]", "\n", "val", "=", "[", "1", "]", "\n", "rank", "=", "int", "(", "line", "[", "1", "]", ".", "split", "(", "'-'", ")", "[", "1", "]", ")", "\n", "return", "sub", ",", "rel", ",", "obj", ",", "val", ",", "rank", ",", "1", "\n", "", "elif", "len", "(", "line", ")", "==", "3", ":", "\n", "        ", "rank", "=", "int", "(", "line", "[", "1", "]", ".", "split", "(", "'-'", ")", "[", "1", "]", ")", "\n", "sub", "=", "query", "\n", "rel", "=", "user", "\n", "obj", "=", "line", "[", "2", "]", "\n", "val", "=", "[", "-", "1", "]", "\n", "return", "sub", ",", "rel", ",", "obj", ",", "val", ",", "rank", ",", "-", "1", "\n", "", "else", ":", "\n", "        ", "return", "None", ",", "None", ",", "None", ",", "None", ",", "None", ",", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.daiquocnguyen_R-MeN.RMeN_tf.builddata_ecir.load_triples_from_txt_ecir": [[270, 369], ["enumerate", "numpy.array", "numpy.array", "numpy.array", "np.array.append", "np.array.append", "np.array.append", "numpy.array", "numpy.array", "numpy.array", "dict", "set", "set", "dict", "set", "set", "dict", "set", "set", "open", "f.readlines", "builddata_ecir.parse_line_ecir", "np.array.append", "np.array.append", "np.array.append", "max", "max", "max", "set.add", "set.add", "set.add", "numpy.array", "numpy.array", "numpy.array", "np.array.append", "np.array.append", "np.array.append", "numpy.array", "dict.values", "dict.values", "dict.values", "len"], "function", ["home.repos.pwc.inspect_result.daiquocnguyen_R-MeN.RMeN_tf.builddata_ecir.parse_line_ecir"], ["", "", "def", "load_triples_from_txt_ecir", "(", "filename", ",", "query_indexes", "=", "None", ",", "user_indexes", "=", "None", ",", "doc_indexes", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Take a list of file names and build the corresponding dictionnary of triples\n    \"\"\"", "\n", "if", "user_indexes", "==", "None", ":", "\n", "        ", "user_indexes", "=", "dict", "(", ")", "\n", "user_entities", "=", "set", "(", ")", "\n", "user_next_ent", "=", "0", "\n", "", "else", ":", "\n", "        ", "user_entities", "=", "set", "(", "user_indexes", ")", "\n", "user_next_ent", "=", "max", "(", "user_indexes", ".", "values", "(", ")", ")", "+", "1", "\n", "\n", "", "if", "doc_indexes", "==", "None", ":", "\n", "        ", "doc_indexes", "=", "dict", "(", ")", "\n", "doc_entities", "=", "set", "(", ")", "\n", "doc_next_ent", "=", "0", "\n", "", "else", ":", "\n", "        ", "doc_entities", "=", "set", "(", "doc_indexes", ")", "\n", "doc_next_ent", "=", "max", "(", "doc_indexes", ".", "values", "(", ")", ")", "+", "1", "\n", "\n", "", "if", "query_indexes", "==", "None", ":", "\n", "        ", "query_indexes", "=", "dict", "(", ")", "\n", "query_entities", "=", "set", "(", ")", "\n", "query_next_ent", "=", "0", "\n", "", "else", ":", "\n", "        ", "query_entities", "=", "set", "(", "query_indexes", ")", "\n", "query_next_ent", "=", "max", "(", "query_indexes", ".", "values", "(", ")", ")", "+", "1", "\n", "\n", "", "lsttriples", "=", "[", "]", "\n", "lstranks", "=", "[", "]", "\n", "lstvals", "=", "[", "]", "\n", "lsttriple", "=", "[", "]", "\n", "lstrank", "=", "[", "]", "\n", "lstval", "=", "[", "]", "\n", "with", "open", "(", "filename", ")", "as", "f", ":", "\n", "        ", "lines", "=", "f", ".", "readlines", "(", ")", "\n", "\n", "", "query", "=", "''", "\n", "user", "=", "''", "\n", "for", "_", ",", "line", "in", "enumerate", "(", "lines", ")", ":", "\n", "        ", "query", ",", "user", ",", "doc", ",", "val", ",", "rank", ",", "_star", "=", "parse_line_ecir", "(", "line", ",", "query", ",", "user", ")", "\n", "#print(query, user, doc, val, rank)", "\n", "if", "rank", "==", "None", ":", "\n", "            ", "continue", "\n", "\n", "", "if", "query", "in", "query_entities", ":", "\n", "            ", "query_ind", "=", "query_indexes", "[", "query", "]", "\n", "", "else", ":", "\n", "            ", "query_ind", "=", "query_next_ent", "\n", "query_next_ent", "+=", "1", "\n", "query_indexes", "[", "query", "]", "=", "query_ind", "\n", "query_entities", ".", "add", "(", "query", ")", "\n", "\n", "", "if", "user", "in", "user_entities", ":", "\n", "            ", "user_ind", "=", "user_indexes", "[", "user", "]", "\n", "", "else", ":", "\n", "            ", "user_ind", "=", "user_next_ent", "\n", "user_next_ent", "+=", "1", "\n", "user_indexes", "[", "user", "]", "=", "user_ind", "\n", "user_entities", ".", "add", "(", "user", ")", "\n", "\n", "", "if", "doc", "in", "doc_entities", ":", "\n", "            ", "doc_ind", "=", "doc_indexes", "[", "doc", "]", "\n", "", "else", ":", "\n", "            ", "doc_ind", "=", "doc_next_ent", "\n", "doc_next_ent", "+=", "1", "\n", "doc_indexes", "[", "doc", "]", "=", "doc_ind", "\n", "doc_entities", ".", "add", "(", "doc", ")", "\n", "\n", "", "if", "_star", "==", "1", "and", "len", "(", "lsttriple", ")", ">", "1", ":", "\n", "            ", "lsttriple", "=", "np", ".", "array", "(", "lsttriple", ")", "\n", "lstrank", "=", "np", ".", "array", "(", "lstrank", ")", "\n", "lstval", "=", "np", ".", "array", "(", "lstval", ")", "\n", "\n", "lsttriples", ".", "append", "(", "lsttriple", ")", "\n", "lstranks", ".", "append", "(", "lstrank", ")", "\n", "lstvals", ".", "append", "(", "lstval", ")", "\n", "\n", "lsttriple", "=", "[", "]", "\n", "lstrank", "=", "[", "]", "\n", "lstval", "=", "[", "]", "\n", "\n", "", "lsttriple", ".", "append", "(", "np", ".", "array", "(", "[", "query_ind", ",", "user_ind", ",", "doc_ind", "]", ")", ")", "\n", "lstrank", ".", "append", "(", "rank", ")", "\n", "lstval", ".", "append", "(", "val", ")", "\n", "\n", "", "lsttriple", "=", "np", ".", "array", "(", "lsttriple", ")", "\n", "lstrank", "=", "np", ".", "array", "(", "lstrank", ")", "\n", "lstval", "=", "np", ".", "array", "(", "lstval", ")", "\n", "\n", "lsttriples", ".", "append", "(", "lsttriple", ")", "\n", "lstranks", ".", "append", "(", "lstrank", ")", "\n", "lstvals", ".", "append", "(", "lstval", ")", "\n", "\n", "lsttriples", "=", "np", ".", "array", "(", "lsttriples", ")", "\n", "lstranks", "=", "np", ".", "array", "(", "lstranks", ")", "\n", "lstvals", "=", "np", ".", "array", "(", "lstvals", ")", "\n", "\n", "return", "lsttriples", ",", "lstranks", ",", "lstvals", ",", "query_indexes", ",", "user_indexes", ",", "doc_indexes", "\n", "\n"]], "home.repos.pwc.inspect_result.daiquocnguyen_R-MeN.RMeN_tf.builddata_ecir.build_data_ecir": [[370, 403], ["builddata_ecir.load_triples_from_txt_ecir", "builddata_ecir.load_triples_from_txt_ecir", "builddata_ecir.load_triples_from_txt_ecir"], "function", ["home.repos.pwc.inspect_result.daiquocnguyen_R-MeN.RMeN_tf.builddata_ecir.load_triples_from_txt_ecir", "home.repos.pwc.inspect_result.daiquocnguyen_R-MeN.RMeN_tf.builddata_ecir.load_triples_from_txt_ecir", "home.repos.pwc.inspect_result.daiquocnguyen_R-MeN.RMeN_tf.builddata_ecir.load_triples_from_txt_ecir"], ["", "def", "build_data_ecir", "(", "name", "=", "'SEARCH17'", ",", "path", "=", "'./data'", ")", ":", "\n", "    ", "folder", "=", "path", "+", "'/'", "+", "name", "+", "'/'", "\n", "\n", "train_triples", ",", "train_rank_triples", ",", "train_val_triples", ",", "query_indexes", ",", "user_indexes", ",", "doc_indexes", "=", "load_triples_from_txt_ecir", "(", "folder", "+", "'sample_train.200.txt'", ")", "\n", "#print(len(query_indexes), len(user_indexes), len(doc_indexes))", "\n", "\n", "valid_triples", ",", "valid_rank_triples", ",", "valid_val_triples", ",", "query_indexes", ",", "user_indexes", ",", "doc_indexes", "=", "load_triples_from_txt_ecir", "(", "folder", "+", "'sample_dev.200.txt'", ",", "\n", "user_indexes", "=", "user_indexes", ",", "query_indexes", "=", "query_indexes", ",", "doc_indexes", "=", "doc_indexes", ")", "\n", "#print(len(query_indexes), len(user_indexes), len(doc_indexes))", "\n", "\n", "test_triples", ",", "test_rank_triples", ",", "test_val_triples", ",", "query_indexes", ",", "user_indexes", ",", "doc_indexes", "=", "load_triples_from_txt_ecir", "(", "folder", "+", "'sample_test.200.txt'", ",", "\n", "user_indexes", "=", "user_indexes", ",", "query_indexes", "=", "query_indexes", ",", "doc_indexes", "=", "doc_indexes", ")", "\n", "#print(len(query_indexes), len(user_indexes), len(doc_indexes))", "\n", "\n", "indexes_user", "=", "{", "}", "\n", "for", "tmp", "in", "user_indexes", ":", "\n", "        ", "indexes_user", "[", "user_indexes", "[", "tmp", "]", "]", "=", "tmp", "\n", "\n", "", "indexes_query", "=", "{", "}", "\n", "for", "tmp", "in", "query_indexes", ":", "\n", "        ", "indexes_query", "[", "query_indexes", "[", "tmp", "]", "]", "=", "tmp", "\n", "\n", "", "indexes_doc", "=", "{", "}", "\n", "for", "tmp", "in", "doc_indexes", ":", "\n", "        ", "indexes_doc", "[", "doc_indexes", "[", "tmp", "]", "]", "=", "tmp", "\n", "\n", "\n", "", "return", "train_triples", ",", "train_rank_triples", ",", "train_val_triples", ",", "valid_triples", ",", "valid_rank_triples", ",", "valid_val_triples", ",", "test_triples", ",", "test_rank_triples", ",", "test_val_triples", ",", "query_indexes", ",", "user_indexes", ",", "doc_indexes", ",", "indexes_query", ",", "indexes_user", ",", "indexes_doc", "\n", "\n"]], "home.repos.pwc.inspect_result.daiquocnguyen_R-MeN.RMeN_tf.batching.Batch_Loader.__init__": [[29, 56], ["numpy.array().astype", "numpy.array().astype", "len", "int", "numpy.empty().astype", "numpy.empty().astype", "numpy.array", "numpy.array", "numpy.empty", "numpy.empty", "list", "list", "batching.Batch_Loader.train_triples.keys", "batching.Batch_Loader.train_triples.values"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "train_triples", ",", "words_indexes", ",", "indexes_words", ",", "headTailSelector", ",", "entity2id", ",", "id2entity", ",", "relation2id", ",", "id2relation", ",", "batch_size", "=", "100", ",", "neg_ratio", "=", "1.0", ")", ":", "\n", "        ", "self", ".", "train_triples", "=", "train_triples", "\n", "self", ".", "indexes", "=", "np", ".", "array", "(", "list", "(", "self", ".", "train_triples", ".", "keys", "(", ")", ")", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "self", ".", "values", "=", "np", ".", "array", "(", "list", "(", "self", ".", "train_triples", ".", "values", "(", ")", ")", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "words_indexes", "=", "words_indexes", "\n", "self", ".", "indexes_words", "=", "indexes_words", "# heads, relations, tails are also considered as words", "\n", "self", ".", "n_words", "=", "len", "(", "self", ".", "indexes_words", ")", "\n", "self", ".", "neg_ratio", "=", "int", "(", "neg_ratio", ")", "\n", "self", ".", "headTailSelector", "=", "headTailSelector", "\n", "self", ".", "relation2id", "=", "relation2id", "\n", "self", ".", "id2relation", "=", "id2relation", "\n", "self", ".", "entity2id", "=", "entity2id", "\n", "self", ".", "id2entity", "=", "id2entity", "\n", "\n", "self", ".", "indexes_rels", "=", "{", "}", "\n", "self", ".", "indexes_ents", "=", "{", "}", "\n", "for", "_word", "in", "self", ".", "words_indexes", ":", "\n", "            ", "index", "=", "self", ".", "words_indexes", "[", "_word", "]", "\n", "if", "_word", "in", "self", ".", "relation2id", ":", "\n", "                ", "self", ".", "indexes_rels", "[", "index", "]", "=", "_word", "\n", "", "elif", "_word", "in", "self", ".", "entity2id", ":", "\n", "                ", "self", ".", "indexes_ents", "[", "index", "]", "=", "_word", "\n", "\n", "", "", "self", ".", "new_triples_indexes", "=", "np", ".", "empty", "(", "(", "self", ".", "batch_size", "*", "(", "self", ".", "neg_ratio", "+", "1", ")", ",", "3", ")", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "self", ".", "new_triples_values", "=", "np", ".", "empty", "(", "(", "self", ".", "batch_size", "*", "(", "self", ".", "neg_ratio", "+", "1", ")", ",", "1", ")", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daiquocnguyen_R-MeN.RMeN_tf.batching.Batch_Loader.__call__": [[57, 102], ["numpy.random.randint", "len", "numpy.random.randint", "numpy.tile", "numpy.tile", "range", "range", "numpy.random.randint", "numpy.random.randint", "numpy.random.randint", "numpy.iinfo"], "methods", ["None"], ["", "def", "__call__", "(", "self", ")", ":", "\n", "\n", "        ", "idxs", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "len", "(", "self", ".", "values", ")", ",", "self", ".", "batch_size", ")", "\n", "self", ".", "new_triples_indexes", "[", ":", "self", ".", "batch_size", ",", ":", "]", "=", "self", ".", "indexes", "[", "idxs", ",", ":", "]", "\n", "self", ".", "new_triples_values", "[", ":", "self", ".", "batch_size", "]", "=", "self", ".", "values", "[", "idxs", ",", ":", "]", "\n", "\n", "last_idx", "=", "self", ".", "batch_size", "\n", "\n", "if", "self", ".", "neg_ratio", ">", "0", ":", "\n", "\n", "# Pre-sample everything, faster", "\n", "            ", "rdm_words", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "self", ".", "n_words", ",", "last_idx", "*", "self", ".", "neg_ratio", ")", "\n", "# Pre copying everyting", "\n", "self", ".", "new_triples_indexes", "[", "last_idx", ":", "(", "last_idx", "*", "(", "self", ".", "neg_ratio", "+", "1", ")", ")", ",", ":", "]", "=", "np", ".", "tile", "(", "\n", "self", ".", "new_triples_indexes", "[", ":", "last_idx", ",", ":", "]", ",", "(", "self", ".", "neg_ratio", ",", "1", ")", ")", "\n", "self", ".", "new_triples_values", "[", "last_idx", ":", "(", "last_idx", "*", "(", "self", ".", "neg_ratio", "+", "1", ")", ")", "]", "=", "np", ".", "tile", "(", "\n", "self", ".", "new_triples_values", "[", ":", "last_idx", "]", ",", "(", "self", ".", "neg_ratio", ",", "1", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "last_idx", ")", ":", "\n", "                ", "for", "j", "in", "range", "(", "self", ".", "neg_ratio", ")", ":", "\n", "                    ", "cur_idx", "=", "i", "*", "self", ".", "neg_ratio", "+", "j", "\n", "tmpRel", "=", "self", ".", "indexes_words", "[", "self", ".", "new_triples_indexes", "[", "last_idx", "+", "cur_idx", ",", "1", "]", "]", "\n", "tmpIndexRel", "=", "self", ".", "relation2id", "[", "tmpRel", "]", "\n", "pr", "=", "self", ".", "headTailSelector", "[", "tmpIndexRel", "]", "\n", "\n", "# Sample a random subject or object", "\n", "if", "(", "np", ".", "random", ".", "randint", "(", "np", ".", "iinfo", "(", "np", ".", "int32", ")", ".", "max", ")", "%", "1000", ")", ">", "pr", ":", "\n", "                        ", "while", "(", "rdm_words", "[", "cur_idx", "]", "in", "self", ".", "indexes_rels", "or", "(", "\n", "rdm_words", "[", "cur_idx", "]", ",", "self", ".", "new_triples_indexes", "[", "last_idx", "+", "cur_idx", ",", "1", "]", ",", "\n", "self", ".", "new_triples_indexes", "[", "last_idx", "+", "cur_idx", ",", "2", "]", ")", "in", "self", ".", "train_triples", ")", ":", "\n", "                            ", "rdm_words", "[", "cur_idx", "]", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "self", ".", "n_words", ")", "\n", "", "self", ".", "new_triples_indexes", "[", "last_idx", "+", "cur_idx", ",", "0", "]", "=", "rdm_words", "[", "cur_idx", "]", "\n", "", "else", ":", "\n", "                        ", "while", "(", "rdm_words", "[", "cur_idx", "]", "in", "self", ".", "indexes_rels", "or", "(", "\n", "self", ".", "new_triples_indexes", "[", "last_idx", "+", "cur_idx", ",", "0", "]", ",", "\n", "self", ".", "new_triples_indexes", "[", "last_idx", "+", "cur_idx", ",", "1", "]", ",", "\n", "rdm_words", "[", "cur_idx", "]", ")", "in", "self", ".", "train_triples", ")", ":", "\n", "                            ", "rdm_words", "[", "cur_idx", "]", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "self", ".", "n_words", ")", "\n", "", "self", ".", "new_triples_indexes", "[", "last_idx", "+", "cur_idx", ",", "2", "]", "=", "rdm_words", "[", "cur_idx", "]", "\n", "\n", "", "self", ".", "new_triples_values", "[", "last_idx", "+", "cur_idx", "]", "=", "[", "-", "1", "]", "\n", "\n", "", "", "last_idx", "+=", "cur_idx", "+", "1", "\n", "\n", "", "return", "self", ".", "new_triples_indexes", "[", ":", "last_idx", ",", ":", "]", ",", "self", ".", "new_triples_values", "[", ":", "last_idx", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.daiquocnguyen_R-MeN.RMeN_tf.batching.randn": [[26, 27], ["numpy.random.randn().astype", "numpy.random.randn"], "function", ["home.repos.pwc.inspect_result.daiquocnguyen_R-MeN.RMeN_tf.batching.randn"], ["def", "randn", "(", "*", "args", ")", ":", "return", "np", ".", "random", ".", "randn", "(", "*", "args", ")", ".", "astype", "(", "'f'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daiquocnguyen_R-MeN.RMeN_tf.model_R_MeN_TripleCls_v1.RMeN.__init__": [[8, 59], ["tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.nn.embedding_lookup", "tensorflow.split", "tensorflow.squeeze", "tensorflow.squeeze", "tensorflow.squeeze", "sonnet.python.modules.relational_memory.RelationalMemory", "sonnet.python.modules.relational_memory.RelationalMemory.initial_state", "sonnet.python.modules.relational_memory.RelationalMemory.", "sonnet.python.modules.relational_memory.RelationalMemory.", "sonnet.python.modules.relational_memory.RelationalMemory.", "tensorflow.nn.dropout", "tensorflow.nn.xw_plus_b", "tensorflow.nn.sigmoid", "tensorflow.compat.v1.train.Saver", "tensorflow.name_scope", "model_R_MeN_TripleCls_v1.add_positional_embedding", "tensorflow.name_scope", "tensorflow.get_variable", "tensorflow.Variable", "tensorflow.name_scope", "tensorflow.nn.softplus", "tensorflow.reduce_mean", "tensorflow.global_variables", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.zeros", "tensorflow.contrib.layers.xavier_initializer", "tensorflow.contrib.layers.xavier_initializer", "model_R_MeN_TripleCls_v1.RMeN.final_output.get_shape"], "methods", ["home.repos.pwc.inspect_result.daiquocnguyen_R-MeN.RMeN_pytorch.relational_rnn_general.RelationalMemory.initial_state", "home.repos.pwc.inspect_result.daiquocnguyen_R-MeN.RMeN_tf.model_R_MeN_TripleCls_CNN.add_positional_embedding"], ["    ", "def", "__init__", "(", "self", ",", "vocab_size", ",", "embedding_size", ",", "batch_size", ",", "initialization", ",", "mem_slots", ",", "num_heads", ",", "\n", "use_pos", ",", "attention_mlp_layers", ",", "head_size", ")", ":", "\n", "# Placeholders for input, output", "\n", "        ", "self", ".", "input_x", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "[", "batch_size", ",", "3", "]", ",", "name", "=", "\"input_h\"", ")", "\n", "self", ".", "input_y", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "batch_size", ",", "1", "]", ",", "name", "=", "\"input_y\"", ")", "\n", "self", ".", "dropout_keep_prob", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "name", "=", "\"dropout_keep_prob\"", ")", "\n", "\n", "# Embedding layer", "\n", "with", "tf", ".", "name_scope", "(", "\"embedding\"", ")", ":", "\n", "            ", "if", "initialization", "!=", "[", "]", ":", "\n", "                ", "self", ".", "input_feature", "=", "tf", ".", "get_variable", "(", "name", "=", "\"input_feature_1\"", ",", "initializer", "=", "initialization", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "input_feature", "=", "tf", ".", "get_variable", "(", "name", "=", "\"input_feature_2\"", ",", "shape", "=", "[", "vocab_size", ",", "embedding_size", "]", ",", "initializer", "=", "tf", ".", "contrib", ".", "layers", ".", "xavier_initializer", "(", "seed", "=", "1234", ")", ")", "\n", "\n", "# Embedding lookup", "\n", "", "", "self", ".", "emb", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "input_feature", ",", "self", ".", "input_x", ")", "\n", "\n", "if", "use_pos", "==", "1", ":", "\n", "            ", "self", ".", "emb", "=", "add_positional_embedding", "(", "self", ".", "emb", ",", "3", ",", "embedding_size", ")", "\n", "\n", "", "self", ".", "h_emb", ",", "self", ".", "r_emb", ",", "self", ".", "t_emb", "=", "tf", ".", "split", "(", "self", ".", "emb", ",", "num_or_size_splits", "=", "3", ",", "axis", "=", "1", ")", "\n", "\n", "self", ".", "h_emb", "=", "tf", ".", "squeeze", "(", "self", ".", "h_emb", ")", "\n", "self", ".", "r_emb", "=", "tf", ".", "squeeze", "(", "self", ".", "r_emb", ")", "\n", "self", ".", "t_emb", "=", "tf", ".", "squeeze", "(", "self", ".", "t_emb", ")", "\n", "\n", "gen_mem", "=", "relational_memory", ".", "RelationalMemory", "(", "mem_slots", "=", "mem_slots", ",", "head_size", "=", "head_size", ",", "num_heads", "=", "num_heads", ",", "\n", "gate_style", "=", "'memory'", ",", "attention_mlp_layers", "=", "attention_mlp_layers", ")", "\n", "\n", "init_states", "=", "gen_mem", ".", "initial_state", "(", "batch_size", "=", "batch_size", ")", "\n", "\n", "mem_output1", ",", "memory_input_next_step", "=", "gen_mem", "(", "self", ".", "h_emb", ",", "init_states", ")", "\n", "mem_output2", ",", "memory_input_next_step", "=", "gen_mem", "(", "self", ".", "r_emb", ",", "memory_input_next_step", ")", "\n", "mem_output3", ",", "memory_input_next_step", "=", "gen_mem", "(", "self", ".", "t_emb", ",", "memory_input_next_step", ")", "\n", "\n", "self", ".", "final_output", "=", "tf", ".", "nn", ".", "dropout", "(", "mem_output1", "*", "mem_output2", "*", "mem_output3", ",", "self", ".", "dropout_keep_prob", ")", "\n", "\n", "# Final scores and predictions", "\n", "with", "tf", ".", "name_scope", "(", "\"output1\"", ")", ":", "\n", "            ", "W1", "=", "tf", ".", "get_variable", "(", "\"W1\"", ",", "shape", "=", "[", "self", ".", "final_output", ".", "get_shape", "(", ")", "[", "-", "1", "]", ",", "1", "]", ",", "initializer", "=", "tf", ".", "contrib", ".", "layers", ".", "xavier_initializer", "(", "seed", "=", "1234", ")", ")", "\n", "b1", "=", "tf", ".", "Variable", "(", "tf", ".", "zeros", "(", "[", "1", "]", ")", ")", "\n", "\n", "", "self", ".", "scores", "=", "tf", ".", "nn", ".", "xw_plus_b", "(", "self", ".", "final_output", ",", "W1", ",", "b1", ",", "name", "=", "\"scores\"", ")", "\n", "self", ".", "predictions", "=", "tf", ".", "nn", ".", "sigmoid", "(", "self", ".", "scores", ")", "\n", "\n", "# Calculate mean cross-entropy loss", "\n", "with", "tf", ".", "name_scope", "(", "\"loss\"", ")", ":", "\n", "            ", "losses", "=", "tf", ".", "nn", ".", "softplus", "(", "self", ".", "scores", "*", "self", ".", "input_y", ")", "\n", "self", ".", "loss", "=", "tf", ".", "reduce_mean", "(", "losses", ")", "\n", "\n", "", "self", ".", "saver", "=", "tf", ".", "compat", ".", "v1", ".", "train", ".", "Saver", "(", "tf", ".", "global_variables", "(", ")", ",", "max_to_keep", "=", "500", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daiquocnguyen_R-MeN.RMeN_tf.model_R_MeN_TripleCls_v1.add_positional_embedding": [[61, 65], ["tensorflow.name_scope", "tensorflow.cast", "tensorflow.get_variable", "tensorflow.expand_dims", "tensorflow.contrib.layers.xavier_initializer"], "function", ["None"], ["", "", "def", "add_positional_embedding", "(", "x", ",", "sequence_length", ",", "depth", ",", "name", "=", "\"pos\"", ")", ":", "\n", "    ", "with", "tf", ".", "name_scope", "(", "\"add_positional_embedding\"", ")", ":", "\n", "        ", "var", "=", "tf", ".", "cast", "(", "tf", ".", "get_variable", "(", "name", ",", "[", "sequence_length", ",", "depth", "]", ",", "initializer", "=", "tf", ".", "contrib", ".", "layers", ".", "xavier_initializer", "(", "seed", "=", "1234", ")", ")", ",", "x", ".", "dtype", ")", "\n", "return", "x", "+", "tf", ".", "expand_dims", "(", "var", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daiquocnguyen_R-MeN.RMeN_tf.model_R_MeN_SP_CNN.RMeN_SP.__init__": [[8, 78], ["tensorflow.compat.v1.placeholder", "tensorflow.compat.v1.placeholder", "tensorflow.compat.v1.placeholder", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "sonnet.python.modules.relational_memory.RelationalMemory", "sonnet.python.modules.relational_memory.RelationalMemory.initial_state", "sonnet.python.modules.relational_memory.RelationalMemory.", "sonnet.python.modules.relational_memory.RelationalMemory.", "sonnet.python.modules.relational_memory.RelationalMemory.", "tensorflow.compat.v1.reshape", "tensorflow.compat.v1.reshape", "tensorflow.compat.v1.reshape", "tensorflow.compat.v1.concat", "tensorflow.expand_dims", "tensorflow.compat.v1.nn.xw_plus_b", "tensorflow.compat.v1.nn.sigmoid", "tensorflow.compat.v1.train.Saver", "tensorflow.name_scope", "tensorflow.compat.v1.get_variable", "tensorflow.compat.v1.get_variable", "tensorflow.compat.v1.get_variable", "model_R_MeN_SP_CNN.add_positional_embedding", "model_R_MeN_SP_CNN.add_positional_embedding", "model_R_MeN_SP_CNN.add_positional_embedding", "tensorflow.name_scope", "tensorflow.compat.v1.get_variable", "tensorflow.Variable", "tensorflow.nn.conv2d", "tensorflow.compat.v1.nn.relu", "tensorflow.squeeze", "tensorflow.name_scope", "tensorflow.nn.dropout", "tensorflow.name_scope", "tensorflow.compat.v1.get_variable", "tensorflow.Variable", "tensorflow.name_scope", "tensorflow.compat.v1.nn.softplus", "tensorflow.reduce_mean", "tensorflow.global_variables", "tensorflow.zeros", "tensorflow.nn.bias_add", "tensorflow.nn.max_pool", "tensorflow.zeros", "tensorflow.compat.v1.reshape.get_shape", "tensorflow.compat.v1.reshape.get_shape", "tensorflow.compat.v1.reshape.get_shape", "tensorflow.contrib.layers.xavier_initializer", "tensorflow.contrib.layers.xavier_initializer", "model_R_MeN_SP_CNN.RMeN_SP.final_output.get_shape", "model_R_MeN_SP_CNN.RMeN_SP.input_cnn.get_shape"], "methods", ["home.repos.pwc.inspect_result.daiquocnguyen_R-MeN.RMeN_pytorch.relational_rnn_general.RelationalMemory.initial_state", "home.repos.pwc.inspect_result.daiquocnguyen_R-MeN.RMeN_tf.model_R_MeN_TripleCls_CNN.add_positional_embedding", "home.repos.pwc.inspect_result.daiquocnguyen_R-MeN.RMeN_tf.model_R_MeN_TripleCls_CNN.add_positional_embedding", "home.repos.pwc.inspect_result.daiquocnguyen_R-MeN.RMeN_tf.model_R_MeN_TripleCls_CNN.add_positional_embedding"], ["    ", "def", "__init__", "(", "self", ",", "embedding_size", ",", "batch_size", ",", "initialization", ",", "mem_slots", ",", "num_heads", ",", "\n", "use_pos", ",", "attention_mlp_layers", ",", "head_size", ",", "num_filters", "=", "128", ")", ":", "\n", "# Placeholders for input, output", "\n", "        ", "self", ".", "input_x", "=", "tf", ".", "compat", ".", "v1", ".", "placeholder", "(", "tf", ".", "int32", ",", "[", "batch_size", ",", "3", "]", ",", "name", "=", "\"input_h\"", ")", "\n", "self", ".", "input_y", "=", "tf", ".", "compat", ".", "v1", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "batch_size", ",", "1", "]", ",", "name", "=", "\"input_y\"", ")", "\n", "self", ".", "dropout_keep_prob", "=", "tf", ".", "compat", ".", "v1", ".", "placeholder", "(", "tf", ".", "float32", ",", "name", "=", "\"dropout_keep_prob\"", ")", "\n", "\n", "# Embedding layer", "\n", "with", "tf", ".", "name_scope", "(", "\"embedding\"", ")", ":", "\n", "            ", "self", ".", "W_query", "=", "tf", ".", "compat", ".", "v1", ".", "get_variable", "(", "name", "=", "\"W_query\"", ",", "initializer", "=", "initialization", "[", "0", "]", ",", "trainable", "=", "False", ")", "\n", "self", ".", "W_user", "=", "tf", ".", "compat", ".", "v1", ".", "get_variable", "(", "name", "=", "\"W_user\"", ",", "initializer", "=", "initialization", "[", "1", "]", ")", "\n", "self", ".", "W_doc", "=", "tf", ".", "compat", ".", "v1", ".", "get_variable", "(", "name", "=", "\"W_doc\"", ",", "initializer", "=", "initialization", "[", "2", "]", ",", "trainable", "=", "False", ")", "\n", "\n", "# Embedding lookup", "\n", "", "self", ".", "h_emb", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "W_query", ",", "self", ".", "input_x", "[", ":", ",", "0", "]", ")", "\n", "self", ".", "r_emb", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "W_user", ",", "self", ".", "input_x", "[", ":", ",", "1", "]", ")", "\n", "self", ".", "t_emb", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "W_doc", ",", "self", ".", "input_x", "[", ":", ",", "2", "]", ")", "\n", "\n", "if", "use_pos", "==", "1", ":", "\n", "            ", "self", ".", "h_emb", "=", "add_positional_embedding", "(", "self", ".", "h_emb", ",", "1", ",", "embedding_size", ",", "name", "=", "\"pos_h\"", ")", "\n", "self", ".", "r_emb", "=", "add_positional_embedding", "(", "self", ".", "r_emb", ",", "1", ",", "embedding_size", ",", "name", "=", "\"pos_r\"", ")", "\n", "self", ".", "t_emb", "=", "add_positional_embedding", "(", "self", ".", "t_emb", ",", "1", ",", "embedding_size", ",", "name", "=", "\"pos_t\"", ")", "\n", "\n", "", "gen_mem", "=", "relational_memory", ".", "RelationalMemory", "(", "mem_slots", "=", "mem_slots", ",", "head_size", "=", "head_size", ",", "num_heads", "=", "num_heads", ",", "\n", "gate_style", "=", "'memory'", ",", "attention_mlp_layers", "=", "attention_mlp_layers", ")", "\n", "\n", "init_states", "=", "gen_mem", ".", "initial_state", "(", "batch_size", "=", "batch_size", ")", "\n", "\n", "mem_output1", ",", "memory_input_next_step", "=", "gen_mem", "(", "self", ".", "h_emb", ",", "init_states", ")", "\n", "mem_output2", ",", "memory_input_next_step", "=", "gen_mem", "(", "self", ".", "r_emb", ",", "memory_input_next_step", ")", "\n", "mem_output3", ",", "memory_input_next_step", "=", "gen_mem", "(", "self", ".", "t_emb", ",", "memory_input_next_step", ")", "\n", "\n", "mem_output1", "=", "tf", ".", "compat", ".", "v1", ".", "reshape", "(", "mem_output1", ",", "[", "-", "1", ",", "1", ",", "mem_output1", ".", "get_shape", "(", ")", "[", "-", "1", "]", "]", ")", "\n", "mem_output2", "=", "tf", ".", "compat", ".", "v1", ".", "reshape", "(", "mem_output2", ",", "[", "-", "1", ",", "1", ",", "mem_output2", ".", "get_shape", "(", ")", "[", "-", "1", "]", "]", ")", "\n", "mem_output3", "=", "tf", ".", "compat", ".", "v1", ".", "reshape", "(", "mem_output3", ",", "[", "-", "1", ",", "1", ",", "mem_output3", ".", "get_shape", "(", ")", "[", "-", "1", "]", "]", ")", "\n", "\n", "mem_output", "=", "tf", ".", "compat", ".", "v1", ".", "concat", "(", "[", "mem_output1", ",", "mem_output2", ",", "mem_output3", "]", ",", "axis", "=", "1", ")", "\n", "self", ".", "input_cnn", "=", "tf", ".", "expand_dims", "(", "mem_output", ",", "-", "1", ")", "\n", "\n", "# CNN decoder", "\n", "# Create a convolution + maxpool layer for each filter size", "\n", "pooled_outputs", "=", "[", "]", "\n", "with", "tf", ".", "name_scope", "(", "\"conv-maxpool\"", ")", ":", "\n", "            ", "W", "=", "tf", ".", "compat", ".", "v1", ".", "get_variable", "(", "\"W_conv\"", ",", "shape", "=", "[", "3", ",", "1", ",", "1", ",", "num_filters", "]", ",", "\n", "initializer", "=", "tf", ".", "contrib", ".", "layers", ".", "xavier_initializer", "(", "seed", "=", "1234", ")", ")", "\n", "b", "=", "tf", ".", "Variable", "(", "tf", ".", "zeros", "(", "[", "num_filters", "]", ")", ")", "\n", "conv", "=", "tf", ".", "nn", ".", "conv2d", "(", "self", ".", "input_cnn", ",", "W", ",", "strides", "=", "[", "1", ",", "1", ",", "1", ",", "1", "]", ",", "padding", "=", "\"VALID\"", ",", "name", "=", "\"conv\"", ")", "\n", "# Apply nonlinearity", "\n", "self", ".", "h_pool", "=", "tf", ".", "compat", ".", "v1", ".", "nn", ".", "relu", "(", "tf", ".", "nn", ".", "bias_add", "(", "conv", ",", "b", ")", ",", "name", "=", "\"relu\"", ")", "\n", "\n", "# Maxpooling over the outputs", "\n", "self", ".", "h_pool", "=", "tf", ".", "squeeze", "(", "tf", ".", "nn", ".", "max_pool", "(", "self", ".", "h_pool", ",", "ksize", "=", "[", "1", ",", "1", ",", "self", ".", "input_cnn", ".", "get_shape", "(", ")", "[", "-", "2", "]", ",", "1", "]", ",", "strides", "=", "[", "1", ",", "1", ",", "1", ",", "1", "]", ",", "padding", "=", "'VALID'", ",", "name", "=", "\"pool\"", ")", ")", "\n", "\n", "# Add dropout", "\n", "", "with", "tf", ".", "name_scope", "(", "\"dropout\"", ")", ":", "\n", "            ", "self", ".", "final_output", "=", "tf", ".", "nn", ".", "dropout", "(", "self", ".", "h_pool", ",", "self", ".", "dropout_keep_prob", ")", "\n", "\n", "# Final scores and predictions", "\n", "", "with", "tf", ".", "name_scope", "(", "\"output\"", ")", ":", "\n", "            ", "W_output", "=", "tf", ".", "compat", ".", "v1", ".", "get_variable", "(", "\"W1\"", ",", "shape", "=", "[", "self", ".", "final_output", ".", "get_shape", "(", ")", "[", "-", "1", "]", ",", "1", "]", ",", "initializer", "=", "tf", ".", "contrib", ".", "layers", ".", "xavier_initializer", "(", "seed", "=", "1234", ")", ")", "\n", "b_output", "=", "tf", ".", "Variable", "(", "tf", ".", "zeros", "(", "[", "1", "]", ")", ")", "\n", "", "self", ".", "scores", "=", "tf", ".", "compat", ".", "v1", ".", "nn", ".", "xw_plus_b", "(", "self", ".", "final_output", ",", "W_output", ",", "b_output", ",", "name", "=", "\"scores\"", ")", "\n", "self", ".", "predictions", "=", "tf", ".", "compat", ".", "v1", ".", "nn", ".", "sigmoid", "(", "self", ".", "scores", ")", "\n", "\n", "# Calculate mean cross-entropy loss", "\n", "with", "tf", ".", "name_scope", "(", "\"loss\"", ")", ":", "\n", "            ", "losses", "=", "tf", ".", "compat", ".", "v1", ".", "nn", ".", "softplus", "(", "self", ".", "scores", "*", "self", ".", "input_y", ")", "\n", "self", ".", "loss", "=", "tf", ".", "reduce_mean", "(", "losses", ")", "\n", "\n", "", "self", ".", "saver", "=", "tf", ".", "compat", ".", "v1", ".", "train", ".", "Saver", "(", "tf", ".", "global_variables", "(", ")", ",", "max_to_keep", "=", "500", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daiquocnguyen_R-MeN.RMeN_tf.model_R_MeN_SP_CNN.add_positional_embedding": [[80, 84], ["tensorflow.name_scope", "tensorflow.cast", "tensorflow.compat.v1.get_variable", "tensorflow.contrib.layers.xavier_initializer"], "function", ["None"], ["", "", "def", "add_positional_embedding", "(", "x", ",", "sequence_length", ",", "depth", ",", "name", "=", "\"pos\"", ")", ":", "\n", "    ", "with", "tf", ".", "name_scope", "(", "\"add_positional_embedding\"", ")", ":", "\n", "        ", "var", "=", "tf", ".", "cast", "(", "tf", ".", "compat", ".", "v1", ".", "get_variable", "(", "name", ",", "[", "sequence_length", ",", "depth", "]", ",", "initializer", "=", "tf", ".", "contrib", ".", "layers", ".", "xavier_initializer", "(", "seed", "=", "1234", ")", ")", ",", "x", ".", "dtype", ")", "\n", "return", "x", "+", "var", "", "", "", ""]], "home.repos.pwc.inspect_result.daiquocnguyen_R-MeN.RMeN_tf.model_R_MeN_TripleCls_CNN.RMeN.__init__": [[8, 80], ["tensorflow.compat.v1.placeholder", "tensorflow.compat.v1.placeholder", "tensorflow.compat.v1.placeholder", "tensorflow.nn.embedding_lookup", "tensorflow.compat.v1.split", "tensorflow.squeeze", "tensorflow.squeeze", "tensorflow.squeeze", "sonnet.python.modules.relational_memory.RelationalMemory", "sonnet.python.modules.relational_memory.RelationalMemory.initial_state", "sonnet.python.modules.relational_memory.RelationalMemory.", "sonnet.python.modules.relational_memory.RelationalMemory.", "sonnet.python.modules.relational_memory.RelationalMemory.", "tensorflow.compat.v1.reshape", "tensorflow.compat.v1.reshape", "tensorflow.compat.v1.reshape", "tensorflow.compat.v1.concat", "tensorflow.expand_dims", "tensorflow.compat.v1.nn.xw_plus_b", "tensorflow.compat.v1.nn.sigmoid", "tensorflow.compat.v1.train.Saver", "tensorflow.name_scope", "model_R_MeN_TripleCls_CNN.add_positional_embedding", "tensorflow.name_scope", "tensorflow.compat.v1.get_variable", "tensorflow.Variable", "tensorflow.nn.conv2d", "tensorflow.compat.v1.nn.relu", "tensorflow.squeeze", "tensorflow.name_scope", "tensorflow.nn.dropout", "tensorflow.name_scope", "tensorflow.compat.v1.get_variable", "tensorflow.Variable", "tensorflow.name_scope", "tensorflow.compat.v1.nn.softplus", "tensorflow.reduce_mean", "tensorflow.global_variables", "tensorflow.compat.v1.get_variable", "tensorflow.compat.v1.get_variable", "tensorflow.zeros", "tensorflow.nn.bias_add", "tensorflow.nn.max_pool", "tensorflow.zeros", "tensorflow.compat.v1.reshape.get_shape", "tensorflow.compat.v1.reshape.get_shape", "tensorflow.compat.v1.reshape.get_shape", "tensorflow.contrib.layers.xavier_initializer", "tensorflow.contrib.layers.xavier_initializer", "tensorflow.contrib.layers.xavier_initializer", "model_R_MeN_TripleCls_CNN.RMeN.final_output.get_shape", "model_R_MeN_TripleCls_CNN.RMeN.input_cnn.get_shape"], "methods", ["home.repos.pwc.inspect_result.daiquocnguyen_R-MeN.RMeN_pytorch.relational_rnn_general.RelationalMemory.initial_state", "home.repos.pwc.inspect_result.daiquocnguyen_R-MeN.RMeN_tf.model_R_MeN_TripleCls_CNN.add_positional_embedding"], ["    ", "def", "__init__", "(", "self", ",", "vocab_size", ",", "embedding_size", ",", "batch_size", ",", "initialization", ",", "mem_slots", ",", "num_heads", ",", "\n", "use_pos", ",", "attention_mlp_layers", ",", "head_size", ",", "num_filters", ")", ":", "\n", "# Placeholders for input, output", "\n", "        ", "self", ".", "input_x", "=", "tf", ".", "compat", ".", "v1", ".", "placeholder", "(", "tf", ".", "int32", ",", "[", "batch_size", ",", "3", "]", ",", "name", "=", "\"input_h\"", ")", "\n", "self", ".", "input_y", "=", "tf", ".", "compat", ".", "v1", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "batch_size", ",", "1", "]", ",", "name", "=", "\"input_y\"", ")", "\n", "self", ".", "dropout_keep_prob", "=", "tf", ".", "compat", ".", "v1", ".", "placeholder", "(", "tf", ".", "float32", ",", "name", "=", "\"dropout_keep_prob\"", ")", "\n", "\n", "# Embedding layer", "\n", "with", "tf", ".", "name_scope", "(", "\"embedding\"", ")", ":", "\n", "            ", "if", "initialization", "!=", "[", "]", ":", "\n", "                ", "self", ".", "input_feature", "=", "tf", ".", "compat", ".", "v1", ".", "get_variable", "(", "name", "=", "\"input_feature_1\"", ",", "initializer", "=", "initialization", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "input_feature", "=", "tf", ".", "compat", ".", "v1", ".", "get_variable", "(", "name", "=", "\"input_feature_2\"", ",", "shape", "=", "[", "vocab_size", ",", "embedding_size", "]", ",", "initializer", "=", "tf", ".", "contrib", ".", "layers", ".", "xavier_initializer", "(", "seed", "=", "1234", ")", ")", "\n", "\n", "# Embedding lookup", "\n", "", "", "self", ".", "emb", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "input_feature", ",", "self", ".", "input_x", ")", "\n", "\n", "if", "use_pos", "==", "1", ":", "\n", "            ", "self", ".", "emb", "=", "add_positional_embedding", "(", "self", ".", "emb", ",", "3", ",", "embedding_size", ")", "\n", "\n", "", "self", ".", "h_emb", ",", "self", ".", "r_emb", ",", "self", ".", "t_emb", "=", "tf", ".", "compat", ".", "v1", ".", "split", "(", "self", ".", "emb", ",", "num_or_size_splits", "=", "3", ",", "axis", "=", "1", ")", "\n", "\n", "self", ".", "h_emb", "=", "tf", ".", "squeeze", "(", "self", ".", "h_emb", ")", "\n", "self", ".", "r_emb", "=", "tf", ".", "squeeze", "(", "self", ".", "r_emb", ")", "\n", "self", ".", "t_emb", "=", "tf", ".", "squeeze", "(", "self", ".", "t_emb", ")", "\n", "#Relational Memory", "\n", "gen_mem", "=", "relational_memory", ".", "RelationalMemory", "(", "mem_slots", "=", "mem_slots", ",", "head_size", "=", "head_size", ",", "num_heads", "=", "num_heads", ",", "\n", "gate_style", "=", "'memory'", ",", "attention_mlp_layers", "=", "attention_mlp_layers", ")", "\n", "\n", "init_states", "=", "gen_mem", ".", "initial_state", "(", "batch_size", "=", "batch_size", ")", "\n", "\n", "mem_output1", ",", "memory_input_next_step", "=", "gen_mem", "(", "self", ".", "h_emb", ",", "init_states", ")", "\n", "mem_output2", ",", "memory_input_next_step", "=", "gen_mem", "(", "self", ".", "r_emb", ",", "memory_input_next_step", ")", "\n", "mem_output3", ",", "memory_input_next_step", "=", "gen_mem", "(", "self", ".", "t_emb", ",", "memory_input_next_step", ")", "\n", "\n", "mem_output1", "=", "tf", ".", "compat", ".", "v1", ".", "reshape", "(", "mem_output1", ",", "[", "-", "1", ",", "1", ",", "mem_output1", ".", "get_shape", "(", ")", "[", "-", "1", "]", "]", ")", "\n", "mem_output2", "=", "tf", ".", "compat", ".", "v1", ".", "reshape", "(", "mem_output2", ",", "[", "-", "1", ",", "1", ",", "mem_output2", ".", "get_shape", "(", ")", "[", "-", "1", "]", "]", ")", "\n", "mem_output3", "=", "tf", ".", "compat", ".", "v1", ".", "reshape", "(", "mem_output3", ",", "[", "-", "1", ",", "1", ",", "mem_output3", ".", "get_shape", "(", ")", "[", "-", "1", "]", "]", ")", "\n", "\n", "mem_output", "=", "tf", ".", "compat", ".", "v1", ".", "concat", "(", "[", "mem_output1", ",", "mem_output2", ",", "mem_output3", "]", ",", "axis", "=", "1", ")", "\n", "self", ".", "input_cnn", "=", "tf", ".", "expand_dims", "(", "mem_output", ",", "-", "1", ")", "\n", "\n", "#CNN decoder", "\n", "# Create a convolution + maxpool layer for each filter size", "\n", "pooled_outputs", "=", "[", "]", "\n", "with", "tf", ".", "name_scope", "(", "\"conv-maxpool\"", ")", ":", "\n", "            ", "W", "=", "tf", ".", "compat", ".", "v1", ".", "get_variable", "(", "\"W_conv\"", ",", "shape", "=", "[", "3", ",", "1", ",", "1", ",", "num_filters", "]", ",", "initializer", "=", "tf", ".", "contrib", ".", "layers", ".", "xavier_initializer", "(", "seed", "=", "1234", ")", ")", "\n", "b", "=", "tf", ".", "Variable", "(", "tf", ".", "zeros", "(", "[", "num_filters", "]", ")", ")", "\n", "conv", "=", "tf", ".", "nn", ".", "conv2d", "(", "self", ".", "input_cnn", ",", "W", ",", "strides", "=", "[", "1", ",", "1", ",", "1", ",", "1", "]", ",", "padding", "=", "\"VALID\"", ",", "name", "=", "\"conv\"", ")", "\n", "# Apply nonlinearity", "\n", "self", ".", "h_pool", "=", "tf", ".", "compat", ".", "v1", ".", "nn", ".", "relu", "(", "tf", ".", "nn", ".", "bias_add", "(", "conv", ",", "b", ")", ",", "name", "=", "\"relu\"", ")", "\n", "\n", "# Maxpooling over the outputs", "\n", "self", ".", "h_pool", "=", "tf", ".", "squeeze", "(", "tf", ".", "nn", ".", "max_pool", "(", "self", ".", "h_pool", ",", "ksize", "=", "[", "1", ",", "1", ",", "self", ".", "input_cnn", ".", "get_shape", "(", ")", "[", "-", "2", "]", ",", "1", "]", ",", "strides", "=", "[", "1", ",", "1", ",", "1", ",", "1", "]", ",", "padding", "=", "'VALID'", ",", "name", "=", "\"pool\"", ")", ")", "\n", "\n", "# Add dropout", "\n", "", "with", "tf", ".", "name_scope", "(", "\"dropout\"", ")", ":", "\n", "            ", "self", ".", "final_output", "=", "tf", ".", "nn", ".", "dropout", "(", "self", ".", "h_pool", ",", "self", ".", "dropout_keep_prob", ")", "\n", "\n", "# Final scores and predictions", "\n", "", "with", "tf", ".", "name_scope", "(", "\"output\"", ")", ":", "\n", "            ", "W_output", "=", "tf", ".", "compat", ".", "v1", ".", "get_variable", "(", "\"W1\"", ",", "shape", "=", "[", "self", ".", "final_output", ".", "get_shape", "(", ")", "[", "-", "1", "]", ",", "1", "]", ",", "initializer", "=", "tf", ".", "contrib", ".", "layers", ".", "xavier_initializer", "(", "seed", "=", "1234", ")", ")", "\n", "b_output", "=", "tf", ".", "Variable", "(", "tf", ".", "zeros", "(", "[", "1", "]", ")", ")", "\n", "", "self", ".", "scores", "=", "tf", ".", "compat", ".", "v1", ".", "nn", ".", "xw_plus_b", "(", "self", ".", "final_output", ",", "W_output", ",", "b_output", ",", "name", "=", "\"scores\"", ")", "\n", "self", ".", "predictions", "=", "tf", ".", "compat", ".", "v1", ".", "nn", ".", "sigmoid", "(", "self", ".", "scores", ")", "\n", "\n", "# Calculate mean cross-entropy loss", "\n", "with", "tf", ".", "name_scope", "(", "\"loss\"", ")", ":", "\n", "            ", "losses", "=", "tf", ".", "compat", ".", "v1", ".", "nn", ".", "softplus", "(", "self", ".", "scores", "*", "self", ".", "input_y", ")", "\n", "self", ".", "loss", "=", "tf", ".", "reduce_mean", "(", "losses", ")", "\n", "\n", "", "self", ".", "saver", "=", "tf", ".", "compat", ".", "v1", ".", "train", ".", "Saver", "(", "tf", ".", "global_variables", "(", ")", ",", "max_to_keep", "=", "500", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daiquocnguyen_R-MeN.RMeN_tf.model_R_MeN_TripleCls_CNN.add_positional_embedding": [[82, 86], ["tensorflow.name_scope", "tensorflow.cast", "tensorflow.compat.v1.get_variable", "tensorflow.expand_dims", "tensorflow.contrib.layers.xavier_initializer"], "function", ["None"], ["", "", "def", "add_positional_embedding", "(", "x", ",", "sequence_length", ",", "depth", ",", "name", "=", "\"pos\"", ")", ":", "\n", "    ", "with", "tf", ".", "name_scope", "(", "\"add_positional_embedding\"", ")", ":", "\n", "        ", "var", "=", "tf", ".", "cast", "(", "tf", ".", "compat", ".", "v1", ".", "get_variable", "(", "name", ",", "[", "sequence_length", ",", "depth", "]", ",", "initializer", "=", "tf", ".", "contrib", ".", "layers", ".", "xavier_initializer", "(", "seed", "=", "1234", ")", ")", ",", "x", ".", "dtype", ")", "\n", "return", "x", "+", "tf", ".", "expand_dims", "(", "var", ",", "0", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.daiquocnguyen_R-MeN.RMeN_tf.builddata.read_from_id": [[8, 18], ["open", "len", "line.strip().split", "int", "line.strip().split", "line.strip", "int", "line.strip"], "function", ["None"], ["def", "read_from_id", "(", "filename", "=", "'../data/WN18RR/entity2id.txt'", ")", ":", "\n", "    ", "entity2id", "=", "{", "}", "\n", "id2entity", "=", "{", "}", "\n", "with", "open", "(", "filename", ")", "as", "f", ":", "\n", "        ", "for", "line", "in", "f", ":", "\n", "            ", "if", "len", "(", "line", ".", "strip", "(", ")", ".", "split", "(", ")", ")", ">", "1", ":", "\n", "                ", "tmp", "=", "line", ".", "strip", "(", ")", ".", "split", "(", ")", "\n", "entity2id", "[", "tmp", "[", "0", "]", "]", "=", "int", "(", "tmp", "[", "1", "]", ")", "\n", "id2entity", "[", "int", "(", "tmp", "[", "1", "]", ")", "]", "=", "tmp", "[", "0", "]", "\n", "", "", "", "return", "entity2id", ",", "id2entity", "\n", "\n"]], "home.repos.pwc.inspect_result.daiquocnguyen_R-MeN.RMeN_tf.builddata.init_norm_Vector": [[20, 37], ["open", "open", "np.array", "np.array", "lstrel.append", "lstent.append", "len", "float", "float", "line.strip().split", "line.strip().split", "line.strip", "line.strip"], "function", ["None"], ["", "def", "init_norm_Vector", "(", "relinit", ",", "entinit", ",", "embedding_size", ")", ":", "\n", "    ", "lstent", "=", "[", "]", "\n", "lstrel", "=", "[", "]", "\n", "with", "open", "(", "relinit", ")", "as", "f", ":", "\n", "        ", "for", "line", "in", "f", ":", "\n", "            ", "tmp", "=", "[", "float", "(", "val", ")", "for", "val", "in", "line", ".", "strip", "(", ")", ".", "split", "(", ")", "]", "\n", "# if np.linalg.norm(tmp) > 1:", "\n", "#     tmp = tmp / np.linalg.norm(tmp)", "\n", "lstrel", ".", "append", "(", "tmp", ")", "\n", "", "", "with", "open", "(", "entinit", ")", "as", "f", ":", "\n", "        ", "for", "line", "in", "f", ":", "\n", "            ", "tmp", "=", "[", "float", "(", "val", ")", "for", "val", "in", "line", ".", "strip", "(", ")", ".", "split", "(", ")", "]", "\n", "# if np.linalg.norm(tmp) > 1:", "\n", "#     tmp = tmp / np.linalg.norm(tmp)", "\n", "lstent", ".", "append", "(", "tmp", ")", "\n", "", "", "assert", "embedding_size", "%", "len", "(", "lstent", "[", "0", "]", ")", "==", "0", "\n", "return", "np", ".", "array", "(", "lstent", ",", "dtype", "=", "np", ".", "float32", ")", ",", "np", ".", "array", "(", "lstrel", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daiquocnguyen_R-MeN.RMeN_tf.builddata.getID": [[39, 83], ["open", "open.close", "open", "open.close", "open", "open", "open", "open.write", "open.write", "open.write", "open.write", "line.strip().split.strip().split", "line.strip().split.strip().split", "line.strip().split.strip().split", "len", "len", "len", "len", "len", "len", "len", "len", "len", "str", "str", "line.strip().split.strip", "line.strip().split.strip", "line.strip().split.strip"], "function", ["None"], ["", "def", "getID", "(", "folder", "=", "'data/WN18RR/'", ")", ":", "\n", "    ", "lstEnts", "=", "{", "}", "\n", "lstRels", "=", "{", "}", "\n", "with", "open", "(", "folder", "+", "'train.txt'", ")", "as", "f", ":", "\n", "        ", "for", "line", "in", "f", ":", "\n", "            ", "line", "=", "line", ".", "strip", "(", ")", ".", "split", "(", ")", "\n", "if", "line", "[", "0", "]", "not", "in", "lstEnts", ":", "\n", "                ", "lstEnts", "[", "line", "[", "0", "]", "]", "=", "len", "(", "lstEnts", ")", "\n", "", "if", "line", "[", "2", "]", "not", "in", "lstEnts", ":", "\n", "                ", "lstEnts", "[", "line", "[", "2", "]", "]", "=", "len", "(", "lstEnts", ")", "\n", "", "if", "line", "[", "1", "]", "not", "in", "lstRels", ":", "\n", "                ", "lstRels", "[", "line", "[", "1", "]", "]", "=", "len", "(", "lstRels", ")", "\n", "\n", "", "", "", "with", "open", "(", "folder", "+", "'valid.txt'", ")", "as", "f", ":", "\n", "        ", "for", "line", "in", "f", ":", "\n", "            ", "line", "=", "line", ".", "strip", "(", ")", ".", "split", "(", ")", "\n", "if", "line", "[", "0", "]", "not", "in", "lstEnts", ":", "\n", "                ", "lstEnts", "[", "line", "[", "0", "]", "]", "=", "len", "(", "lstEnts", ")", "\n", "", "if", "line", "[", "2", "]", "not", "in", "lstEnts", ":", "\n", "                ", "lstEnts", "[", "line", "[", "2", "]", "]", "=", "len", "(", "lstEnts", ")", "\n", "", "if", "line", "[", "1", "]", "not", "in", "lstRels", ":", "\n", "                ", "lstRels", "[", "line", "[", "1", "]", "]", "=", "len", "(", "lstRels", ")", "\n", "\n", "", "", "", "with", "open", "(", "folder", "+", "'test.txt'", ")", "as", "f", ":", "\n", "        ", "for", "line", "in", "f", ":", "\n", "            ", "line", "=", "line", ".", "strip", "(", ")", ".", "split", "(", ")", "\n", "if", "line", "[", "0", "]", "not", "in", "lstEnts", ":", "\n", "                ", "lstEnts", "[", "line", "[", "0", "]", "]", "=", "len", "(", "lstEnts", ")", "\n", "", "if", "line", "[", "2", "]", "not", "in", "lstEnts", ":", "\n", "                ", "lstEnts", "[", "line", "[", "2", "]", "]", "=", "len", "(", "lstEnts", ")", "\n", "", "if", "line", "[", "1", "]", "not", "in", "lstRels", ":", "\n", "                ", "lstRels", "[", "line", "[", "1", "]", "]", "=", "len", "(", "lstRels", ")", "\n", "\n", "", "", "", "wri", "=", "open", "(", "folder", "+", "'entity2id.txt'", ",", "'w'", ")", "\n", "for", "entity", "in", "lstEnts", ":", "\n", "        ", "wri", ".", "write", "(", "entity", "+", "'\\t'", "+", "str", "(", "lstEnts", "[", "entity", "]", ")", ")", "\n", "wri", ".", "write", "(", "'\\n'", ")", "\n", "", "wri", ".", "close", "(", ")", "\n", "\n", "wri", "=", "open", "(", "folder", "+", "'relation2id.txt'", ",", "'w'", ")", "\n", "for", "entity", "in", "lstRels", ":", "\n", "        ", "wri", ".", "write", "(", "entity", "+", "'\\t'", "+", "str", "(", "lstRels", "[", "entity", "]", ")", ")", "\n", "wri", ".", "write", "(", "'\\n'", ")", "\n", "", "wri", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daiquocnguyen_R-MeN.RMeN_tf.builddata.parse_line": [[85, 95], ["line.strip().split.strip().split", "len", "line.strip().split.strip"], "function", ["None"], ["", "def", "parse_line", "(", "line", ")", ":", "\n", "    ", "line", "=", "line", ".", "strip", "(", ")", ".", "split", "(", ")", "\n", "sub", "=", "line", "[", "0", "]", "\n", "rel", "=", "line", "[", "1", "]", "\n", "obj", "=", "line", "[", "2", "]", "\n", "val", "=", "[", "1", "]", "\n", "if", "len", "(", "line", ")", ">", "3", ":", "\n", "        ", "if", "line", "[", "3", "]", "==", "'-1'", ":", "\n", "            ", "val", "=", "[", "-", "1", "]", "\n", "", "", "return", "sub", ",", "obj", ",", "rel", ",", "val", "\n", "\n"]], "home.repos.pwc.inspect_result.daiquocnguyen_R-MeN.RMeN_tf.builddata.load_triples_from_txt": [[97, 148], ["dict", "enumerate", "dict", "set", "set", "open", "f.readlines", "builddata.parse_line", "max", "set.add", "set.add", "set.add", "dict.values"], "function", ["home.repos.pwc.inspect_result.daiquocnguyen_R-MeN.RMeN_tf.builddata.parse_line"], ["", "def", "load_triples_from_txt", "(", "filename", ",", "words_indexes", "=", "None", ",", "parse_line", "=", "parse_line", ")", ":", "\n", "    ", "\"\"\"\n    Take a list of file names and build the corresponding dictionnary of triples\n    \"\"\"", "\n", "if", "words_indexes", "==", "None", ":", "\n", "        ", "words_indexes", "=", "dict", "(", ")", "\n", "entities", "=", "set", "(", ")", "\n", "next_ent", "=", "0", "\n", "", "else", ":", "\n", "        ", "entities", "=", "set", "(", "words_indexes", ")", "\n", "next_ent", "=", "max", "(", "words_indexes", ".", "values", "(", ")", ")", "+", "1", "\n", "\n", "", "data", "=", "dict", "(", ")", "\n", "\n", "with", "open", "(", "filename", ")", "as", "f", ":", "\n", "        ", "lines", "=", "f", ".", "readlines", "(", ")", "\n", "\n", "", "for", "_", ",", "line", "in", "enumerate", "(", "lines", ")", ":", "\n", "        ", "sub", ",", "obj", ",", "rel", ",", "val", "=", "parse_line", "(", "line", ")", "\n", "\n", "if", "sub", "in", "entities", ":", "\n", "            ", "sub_ind", "=", "words_indexes", "[", "sub", "]", "\n", "", "else", ":", "\n", "            ", "sub_ind", "=", "next_ent", "\n", "next_ent", "+=", "1", "\n", "words_indexes", "[", "sub", "]", "=", "sub_ind", "\n", "entities", ".", "add", "(", "sub", ")", "\n", "\n", "", "if", "rel", "in", "entities", ":", "\n", "            ", "rel_ind", "=", "words_indexes", "[", "rel", "]", "\n", "", "else", ":", "\n", "            ", "rel_ind", "=", "next_ent", "\n", "next_ent", "+=", "1", "\n", "words_indexes", "[", "rel", "]", "=", "rel_ind", "\n", "entities", ".", "add", "(", "rel", ")", "\n", "\n", "", "if", "obj", "in", "entities", ":", "\n", "            ", "obj_ind", "=", "words_indexes", "[", "obj", "]", "\n", "", "else", ":", "\n", "            ", "obj_ind", "=", "next_ent", "\n", "next_ent", "+=", "1", "\n", "words_indexes", "[", "obj", "]", "=", "obj_ind", "\n", "entities", ".", "add", "(", "obj", ")", "\n", "\n", "", "data", "[", "(", "sub_ind", ",", "rel_ind", ",", "obj_ind", ")", "]", "=", "val", "\n", "\n", "", "indexes_words", "=", "{", "}", "\n", "for", "tmpkey", "in", "words_indexes", ":", "\n", "        ", "indexes_words", "[", "words_indexes", "[", "tmpkey", "]", "]", "=", "tmpkey", "\n", "\n", "", "return", "data", ",", "words_indexes", ",", "indexes_words", "\n", "\n"]], "home.repos.pwc.inspect_result.daiquocnguyen_R-MeN.RMeN_tf.builddata.build_data": [[150, 197], ["builddata.load_triples_from_txt", "builddata.load_triples_from_txt", "builddata.load_triples_from_txt", "builddata.read_from_id", "builddata.read_from_id", "enumerate", "range", "range", "range", "open", "f.readlines", "builddata.parse_line", "len", "len", "len", "len", "len", "sum", "sum", "left_entity[].values", "right_entity[].values"], "function", ["home.repos.pwc.inspect_result.daiquocnguyen_R-MeN.RMeN_tf.builddata.load_triples_from_txt", "home.repos.pwc.inspect_result.daiquocnguyen_R-MeN.RMeN_tf.builddata.load_triples_from_txt", "home.repos.pwc.inspect_result.daiquocnguyen_R-MeN.RMeN_tf.builddata.load_triples_from_txt", "home.repos.pwc.inspect_result.daiquocnguyen_R-MeN.RMeN_tf.builddata.read_from_id", "home.repos.pwc.inspect_result.daiquocnguyen_R-MeN.RMeN_tf.builddata.read_from_id", "home.repos.pwc.inspect_result.daiquocnguyen_R-MeN.RMeN_tf.builddata.parse_line"], ["", "def", "build_data", "(", "name", "=", "'WN18'", ",", "path", "=", "'../data'", ")", ":", "\n", "    ", "folder", "=", "path", "+", "'/'", "+", "name", "+", "'/'", "\n", "\n", "train_triples", ",", "words_indexes", ",", "_", "=", "load_triples_from_txt", "(", "folder", "+", "'train.txt'", ",", "parse_line", "=", "parse_line", ")", "\n", "\n", "valid_triples", ",", "words_indexes", ",", "_", "=", "load_triples_from_txt", "(", "folder", "+", "'valid.txt'", ",", "\n", "words_indexes", "=", "words_indexes", ",", "parse_line", "=", "parse_line", ")", "\n", "\n", "test_triples", ",", "words_indexes", ",", "indexes_words", "=", "load_triples_from_txt", "(", "folder", "+", "'test.txt'", ",", "\n", "words_indexes", "=", "words_indexes", ",", "\n", "parse_line", "=", "parse_line", ")", "\n", "\n", "entity2id", ",", "id2entity", "=", "read_from_id", "(", "folder", "+", "'/entity2id.txt'", ")", "\n", "relation2id", ",", "id2relation", "=", "read_from_id", "(", "folder", "+", "'/relation2id.txt'", ")", "\n", "left_entity", "=", "{", "}", "\n", "right_entity", "=", "{", "}", "\n", "\n", "with", "open", "(", "folder", "+", "'train.txt'", ")", "as", "f", ":", "\n", "        ", "lines", "=", "f", ".", "readlines", "(", ")", "\n", "", "for", "_", ",", "line", "in", "enumerate", "(", "lines", ")", ":", "\n", "        ", "head", ",", "tail", ",", "rel", ",", "val", "=", "parse_line", "(", "line", ")", "\n", "# count the number of occurrences for each (heal, rel)", "\n", "if", "relation2id", "[", "rel", "]", "not", "in", "left_entity", ":", "\n", "            ", "left_entity", "[", "relation2id", "[", "rel", "]", "]", "=", "{", "}", "\n", "", "if", "entity2id", "[", "head", "]", "not", "in", "left_entity", "[", "relation2id", "[", "rel", "]", "]", ":", "\n", "            ", "left_entity", "[", "relation2id", "[", "rel", "]", "]", "[", "entity2id", "[", "head", "]", "]", "=", "0", "\n", "", "left_entity", "[", "relation2id", "[", "rel", "]", "]", "[", "entity2id", "[", "head", "]", "]", "+=", "1", "\n", "# count the number of occurrences for each (rel, tail)", "\n", "if", "relation2id", "[", "rel", "]", "not", "in", "right_entity", ":", "\n", "            ", "right_entity", "[", "relation2id", "[", "rel", "]", "]", "=", "{", "}", "\n", "", "if", "entity2id", "[", "tail", "]", "not", "in", "right_entity", "[", "relation2id", "[", "rel", "]", "]", ":", "\n", "            ", "right_entity", "[", "relation2id", "[", "rel", "]", "]", "[", "entity2id", "[", "tail", "]", "]", "=", "0", "\n", "", "right_entity", "[", "relation2id", "[", "rel", "]", "]", "[", "entity2id", "[", "tail", "]", "]", "+=", "1", "\n", "\n", "", "left_avg", "=", "{", "}", "\n", "for", "i", "in", "range", "(", "len", "(", "relation2id", ")", ")", ":", "\n", "        ", "left_avg", "[", "i", "]", "=", "sum", "(", "left_entity", "[", "i", "]", ".", "values", "(", ")", ")", "*", "1.0", "/", "len", "(", "left_entity", "[", "i", "]", ")", "\n", "\n", "", "right_avg", "=", "{", "}", "\n", "for", "i", "in", "range", "(", "len", "(", "relation2id", ")", ")", ":", "\n", "        ", "right_avg", "[", "i", "]", "=", "sum", "(", "right_entity", "[", "i", "]", ".", "values", "(", ")", ")", "*", "1.0", "/", "len", "(", "right_entity", "[", "i", "]", ")", "\n", "\n", "", "headTailSelector", "=", "{", "}", "\n", "for", "i", "in", "range", "(", "len", "(", "relation2id", ")", ")", ":", "\n", "        ", "headTailSelector", "[", "i", "]", "=", "1000", "*", "right_avg", "[", "i", "]", "/", "(", "right_avg", "[", "i", "]", "+", "left_avg", "[", "i", "]", ")", "\n", "\n", "", "return", "train_triples", ",", "valid_triples", ",", "test_triples", ",", "words_indexes", ",", "indexes_words", ",", "headTailSelector", ",", "entity2id", ",", "id2entity", ",", "relation2id", ",", "id2relation", "\n", "\n"]], "home.repos.pwc.inspect_result.daiquocnguyen_R-MeN.RMeN_tf.builddata.dic_of_chars": [[198, 206], ["len", "len"], "function", ["None"], ["", "def", "dic_of_chars", "(", "words_indexes", ")", ":", "\n", "    ", "lstChars", "=", "{", "}", "\n", "for", "word", "in", "words_indexes", ":", "\n", "        ", "for", "char", "in", "word", ":", "\n", "            ", "if", "char", "not", "in", "lstChars", ":", "\n", "                ", "lstChars", "[", "char", "]", "=", "len", "(", "lstChars", ")", "\n", "", "", "", "lstChars", "[", "'unk'", "]", "=", "len", "(", "lstChars", ")", "\n", "return", "lstChars", "\n", "\n"]], "home.repos.pwc.inspect_result.daiquocnguyen_R-MeN.RMeN_tf.builddata.convert_to_seq_chars": [[208, 216], ["lst.append"], "function", ["None"], ["", "def", "convert_to_seq_chars", "(", "x_batch", ",", "lstChars", ",", "indexes_words", ")", ":", "\n", "    ", "lst", "=", "[", "]", "\n", "for", "[", "tmpH", ",", "tmpR", ",", "tmpT", "]", "in", "x_batch", ":", "\n", "        ", "wH", "=", "[", "lstChars", "[", "tmp", "]", "for", "tmp", "in", "indexes_words", "[", "tmpH", "]", "]", "\n", "wR", "=", "[", "lstChars", "[", "tmp", "]", "for", "tmp", "in", "indexes_words", "[", "tmpR", "]", "]", "\n", "wT", "=", "[", "lstChars", "[", "tmp", "]", "for", "tmp", "in", "indexes_words", "[", "tmpT", "]", "]", "\n", "lst", ".", "append", "(", "[", "wH", ",", "wR", ",", "wT", "]", ")", "\n", "", "return", "lst", "\n", "\n"]], "home.repos.pwc.inspect_result.daiquocnguyen_R-MeN.RMeN_tf.builddata._pad_sequences": [[217, 226], ["list", "min", "max", "len", "len"], "function", ["None"], ["", "def", "_pad_sequences", "(", "sequences", ",", "pad_tok", ",", "max_length", ")", ":", "\n", "    ", "sequence_padded", ",", "sequence_length", "=", "[", "]", ",", "[", "]", "\n", "for", "seq", "in", "sequences", ":", "\n", "        ", "seq", "=", "list", "(", "seq", ")", "\n", "seq_", "=", "seq", "[", ":", "max_length", "]", "+", "[", "pad_tok", "]", "*", "max", "(", "max_length", "-", "len", "(", "seq", ")", ",", "0", ")", "\n", "sequence_padded", "+=", "[", "seq_", "]", "\n", "sequence_length", "+=", "[", "min", "(", "len", "(", "seq", ")", ",", "max_length", ")", "]", "\n", "\n", "", "return", "sequence_padded", ",", "sequence_length", "\n", "\n"]], "home.repos.pwc.inspect_result.daiquocnguyen_R-MeN.RMeN_tf.builddata.pad_sequences": [[228, 243], ["max", "max", "builddata._pad_sequences", "builddata._pad_sequences", "builddata._pad_sequences", "map", "np.array().astype", "np.array().astype", "max", "map", "len", "np.array", "np.array", "len"], "function", ["home.repos.pwc.inspect_result.daiquocnguyen_R-MeN.RMeN_tf.builddata._pad_sequences", "home.repos.pwc.inspect_result.daiquocnguyen_R-MeN.RMeN_tf.builddata._pad_sequences", "home.repos.pwc.inspect_result.daiquocnguyen_R-MeN.RMeN_tf.builddata._pad_sequences"], ["", "def", "pad_sequences", "(", "sequences", ",", "pad_tok", ")", ":", "\n", "    ", "sequence_padded", ",", "sequence_length", "=", "[", "]", ",", "[", "]", "\n", "max_length_word", "=", "max", "(", "[", "max", "(", "map", "(", "lambda", "x", ":", "len", "(", "x", ")", ",", "seq", ")", ")", "\n", "for", "seq", "in", "sequences", "]", ")", "\n", "for", "seq", "in", "sequences", ":", "\n", "# all words are same length now", "\n", "        ", "sp", ",", "sl", "=", "_pad_sequences", "(", "seq", ",", "pad_tok", ",", "max_length_word", ")", "\n", "sequence_padded", "+=", "[", "sp", "]", "\n", "sequence_length", "+=", "[", "sl", "]", "\n", "\n", "", "max_length_sentence", "=", "max", "(", "map", "(", "lambda", "x", ":", "len", "(", "x", ")", ",", "sequences", ")", ")", "\n", "sequence_padded", ",", "_", "=", "_pad_sequences", "(", "sequence_padded", ",", "[", "pad_tok", "]", "*", "max_length_word", ",", "max_length_sentence", ")", "\n", "sequence_length", ",", "_", "=", "_pad_sequences", "(", "sequence_length", ",", "0", ",", "max_length_sentence", ")", "\n", "\n", "return", "np", ".", "array", "(", "sequence_padded", ")", ".", "astype", "(", "np", ".", "int32", ")", ",", "np", ".", "array", "(", "sequence_length", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daiquocnguyen_R-MeN.RMeN_tf.train_R_MeN_SP_CNN.computeMRR": [[41, 46], ["len"], "function", ["None"], ["def", "computeMRR", "(", "lstRanks", ")", ":", "\n", "    ", "rr", "=", "0.0", "\n", "for", "tmp", "in", "lstRanks", ":", "\n", "        ", "rr", "+=", "1.0", "/", "tmp", "\n", "", "return", "rr", "/", "len", "(", "lstRanks", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daiquocnguyen_R-MeN.RMeN_tf.train_R_MeN_SP_CNN.computeP1": [[47, 53], ["len"], "function", ["None"], ["", "def", "computeP1", "(", "lstRanks", ")", ":", "\n", "    ", "p1", "=", "0.0", "\n", "for", "tmp", "in", "lstRanks", ":", "\n", "        ", "if", "tmp", "==", "1", ":", "\n", "            ", "p1", "+=", "1", "\n", "", "", "return", "p1", "/", "len", "(", "lstRanks", ")", "\n", "\n"]]}