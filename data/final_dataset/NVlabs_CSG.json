{"home.repos.pwc.inspect_result.NVlabs_CSG.None.eval_seg.SegEvaluator.func_per_iteration": [[20, 64], ["tools.seg_opr.metric.hist_info", "len", "eval_seg.SegEvaluator.whole_eval", "eval_seg.SegEvaluator.argmax", "cv2.imwrite", "logger.info", "eval_seg.SegEvaluator.dataset.get_class_colors", "numpy.zeros", "tools.utils.visualize.show_img", "eval_seg.SegEvaluator.logger.add_image", "eval_seg.SegEvaluator.dataset.get_class_colors", "numpy.zeros", "len", "eval_seg.SegEvaluator.whole_eval", "eval_seg.SegEvaluator.argmax", "eval_seg.SegEvaluator.sliding_eval", "os.path.join", "numpy.swapaxes", "tools.utils.visualize.show_img", "cv2.imwrite", "tools.utils.visualize.show_prediction", "cv2.imwrite", "eval_seg.SegEvaluator.whole_eval", "numpy.swapaxes", "os.path.join", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.NVlabs_CSG.seg_opr.metric.hist_info", "home.repos.pwc.inspect_result.NVlabs_CSG.engine.evaluator.Evaluator.whole_eval", "home.repos.pwc.inspect_result.NVlabs_CSG.data.gta5.GTA5.get_class_colors", "home.repos.pwc.inspect_result.NVlabs_CSG.utils.visualize.show_img", "home.repos.pwc.inspect_result.NVlabs_CSG.data.gta5.GTA5.get_class_colors", "home.repos.pwc.inspect_result.NVlabs_CSG.engine.evaluator.Evaluator.whole_eval", "home.repos.pwc.inspect_result.NVlabs_CSG.engine.evaluator.Evaluator.sliding_eval", "home.repos.pwc.inspect_result.NVlabs_CSG.utils.visualize.show_img", "home.repos.pwc.inspect_result.NVlabs_CSG.utils.visualize.show_prediction", "home.repos.pwc.inspect_result.NVlabs_CSG.engine.evaluator.Evaluator.whole_eval"], ["    ", "def", "func_per_iteration", "(", "self", ",", "data", ",", "device", ",", "iter", "=", "None", ")", ":", "\n", "        ", "if", "self", ".", "config", "is", "not", "None", ":", "config", "=", "self", ".", "config", "\n", "img", "=", "data", "[", "'data'", "]", "\n", "label", "=", "data", "[", "'label'", "]", "\n", "name", "=", "data", "[", "'fn'", "]", "\n", "\n", "if", "len", "(", "config", ".", "eval_scale_array", ")", "==", "1", ":", "\n", "            ", "pred", "=", "self", ".", "whole_eval", "(", "img", ",", "label", ".", "shape", ",", "resize", "=", "config", ".", "eval_scale_array", "[", "0", "]", ",", "device", "=", "device", ")", "\n", "pred", "=", "pred", ".", "argmax", "(", "2", ")", "# since we ignore this step in evaluator.py", "\n", "", "elif", "len", "(", "config", ".", "eval_scale_array", ")", ">", "1", ":", "\n", "            ", "pred", "=", "self", ".", "whole_eval", "(", "img", ",", "label", ".", "shape", ",", "resize", "=", "config", ".", "eval_scale_array", "[", "0", "]", ",", "device", "=", "device", ")", "\n", "for", "scale", "in", "config", ".", "eval_scale_array", "[", "1", ":", "]", ":", "\n", "                ", "pred", "+=", "self", ".", "whole_eval", "(", "img", ",", "label", ".", "shape", ",", "resize", "=", "scale", ",", "device", "=", "device", ")", "\n", "", "pred", "=", "pred", ".", "argmax", "(", "2", ")", "# since we ignore this step in evaluator.py", "\n", "", "else", ":", "\n", "            ", "pred", "=", "self", ".", "sliding_eval", "(", "img", ",", "config", ".", "eval_crop_size", ",", "config", ".", "eval_stride_rate", ",", "device", ")", "\n", "", "hist_tmp", ",", "labeled_tmp", ",", "correct_tmp", "=", "hist_info", "(", "config", ".", "num_classes", ",", "pred", ",", "label", ")", "\n", "results_dict", "=", "{", "'hist'", ":", "hist_tmp", ",", "'labeled'", ":", "labeled_tmp", ",", "'correct'", ":", "correct_tmp", "}", "\n", "\n", "if", "self", ".", "save_path", "is", "not", "None", ":", "\n", "            ", "fn", "=", "name", "+", "'.png'", "\n", "cv2", ".", "imwrite", "(", "os", ".", "path", ".", "join", "(", "self", ".", "save_path", ",", "fn", ")", ",", "pred", ")", "\n", "logger", ".", "info", "(", "'Save the image '", "+", "fn", ")", "\n", "\n", "# tensorboard logger does not fit multiprocess", "\n", "", "if", "self", ".", "logger", "is", "not", "None", "and", "iter", "is", "not", "None", ":", "\n", "            ", "colors", "=", "self", ".", "dataset", ".", "get_class_colors", "(", ")", "\n", "image", "=", "img", "\n", "clean", "=", "np", ".", "zeros", "(", "label", ".", "shape", ")", "\n", "comp_img", "=", "show_img", "(", "colors", ",", "config", ".", "background", ",", "image", ",", "clean", ",", "label", ",", "pred", ")", "\n", "self", ".", "logger", ".", "add_image", "(", "'vis'", ",", "np", ".", "swapaxes", "(", "np", ".", "swapaxes", "(", "comp_img", ",", "0", ",", "2", ")", ",", "1", ",", "2", ")", ",", "iter", ")", "\n", "\n", "", "if", "self", ".", "show_image", "or", "self", ".", "show_prediction", ":", "\n", "            ", "colors", "=", "self", ".", "dataset", ".", "get_class_colors", "(", ")", "\n", "image", "=", "img", "\n", "clean", "=", "np", ".", "zeros", "(", "label", ".", "shape", ")", "\n", "if", "self", ".", "show_image", ":", "\n", "                ", "comp_img", "=", "show_img", "(", "colors", ",", "config", ".", "background", ",", "image", ",", "clean", ",", "label", ",", "pred", ")", "\n", "cv2", ".", "imwrite", "(", "os", ".", "path", ".", "join", "(", "self", ".", "save_path", ",", "name", "+", "\".png\"", ")", ",", "comp_img", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", ")", "\n", "", "if", "self", ".", "show_prediction", ":", "\n", "                ", "comp_img", "=", "show_prediction", "(", "colors", ",", "config", ".", "background", ",", "image", ",", "pred", ")", "\n", "cv2", ".", "imwrite", "(", "os", ".", "path", ".", "join", "(", "self", ".", "save_path", ",", "\"viz_\"", "+", "name", "+", "\".png\"", ")", ",", "comp_img", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", ")", "\n", "\n", "", "", "return", "results_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_CSG.None.eval_seg.SegEvaluator.compute_metric": [[65, 79], ["numpy.zeros", "tools.seg_opr.metric.compute_score", "tools.utils.visualize.print_iou", "eval_seg.SegEvaluator.dataset.get_class_names"], "methods", ["home.repos.pwc.inspect_result.NVlabs_CSG.seg_opr.metric.compute_score", "home.repos.pwc.inspect_result.NVlabs_CSG.utils.visualize.print_iou", "home.repos.pwc.inspect_result.NVlabs_CSG.data.gta5.GTA5.get_class_names"], ["", "def", "compute_metric", "(", "self", ",", "results", ")", ":", "\n", "        ", "hist", "=", "np", ".", "zeros", "(", "(", "self", ".", "config", ".", "num_classes", ",", "self", ".", "config", ".", "num_classes", ")", ")", "\n", "correct", "=", "0", "\n", "labeled", "=", "0", "\n", "count", "=", "0", "\n", "for", "d", "in", "results", ":", "\n", "            ", "hist", "+=", "d", "[", "'hist'", "]", "\n", "correct", "+=", "d", "[", "'correct'", "]", "\n", "labeled", "+=", "d", "[", "'labeled'", "]", "\n", "count", "+=", "1", "\n", "\n", "", "iu", ",", "mean_IU", ",", "mean_IU_no_back", ",", "mean_pixel_acc", "=", "compute_score", "(", "hist", ",", "correct", ",", "labeled", ")", "\n", "result_line", "=", "print_iou", "(", "iu", ",", "mean_pixel_acc", ",", "self", ".", "dataset", ".", "get_class_names", "(", ")", ",", "True", ")", "\n", "return", "result_line", ",", "mean_IU", "\n", "", "", ""]], "home.repos.pwc.inspect_result.NVlabs_CSG.None.dataloader_seg.TrainPre.__init__": [[14, 24], ["torchvision.Compose", "torchvision.ColorJitter"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "img_mean", ",", "img_std", ",", "augment", "=", "None", ")", ":", "\n", "        ", "self", ".", "img_mean", "=", "img_mean", "\n", "self", ".", "img_std", "=", "img_std", "\n", "self", ".", "config", "=", "config", "\n", "self", ".", "augment", "=", "augment", "\n", "\n", "# we have func normalize below; return npy", "\n", "if", "augment", ":", "\n", "            ", "self", ".", "data_transforms", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ColorJitter", "(", "0.4", ",", "0.4", ",", "0.4", ",", "0.4", ")", ",", "\n", "]", ")", "\n"]], "home.repos.pwc.inspect_result.NVlabs_CSG.None.dataloader_seg.TrainPre.__call__": [[26, 49], ["tools.utils.img_utils.random_mirror", "tools.utils.img_utils.generate_random_crop_pos", "tools.utils.img_utils.random_crop_pad_to_shape", "cv2.resize", "tools.utils.img_utils.random_scale", "tools.utils.img_utils.random_crop_pad_to_shape", "tools.utils.img_utils.random_crop_pad_to_shape", "p_img.transpose.transpose.transpose", "p_img_k.transpose.transpose.transpose", "tools.utils.img_utils.random_crop_pad_to_shape", "p_img.transpose.transpose.transpose", "tools.utils.img_utils.normalize", "tools.utils.img_utils.normalize", "tools.utils.img_utils.normalize", "numpy.array", "dataloader_seg.TrainPre.data_transforms", "PIL.Image.fromarray"], "methods", ["home.repos.pwc.inspect_result.NVlabs_CSG.utils.img_utils.random_mirror", "home.repos.pwc.inspect_result.NVlabs_CSG.utils.img_utils.generate_random_crop_pos", "home.repos.pwc.inspect_result.NVlabs_CSG.utils.img_utils.random_crop_pad_to_shape", "home.repos.pwc.inspect_result.NVlabs_CSG.utils.img_utils.random_scale", "home.repos.pwc.inspect_result.NVlabs_CSG.utils.img_utils.random_crop_pad_to_shape", "home.repos.pwc.inspect_result.NVlabs_CSG.utils.img_utils.random_crop_pad_to_shape", "home.repos.pwc.inspect_result.NVlabs_CSG.utils.img_utils.random_crop_pad_to_shape", "home.repos.pwc.inspect_result.NVlabs_CSG.utils.img_utils.normalize", "home.repos.pwc.inspect_result.NVlabs_CSG.utils.img_utils.normalize", "home.repos.pwc.inspect_result.NVlabs_CSG.utils.img_utils.normalize"], ["", "", "def", "__call__", "(", "self", ",", "img", ",", "gt", ")", ":", "\n", "        ", "img", ",", "gt", "=", "random_mirror", "(", "img", ",", "gt", ")", "\n", "if", "self", ".", "config", ".", "train_scale_array", "is", "not", "None", ":", "\n", "            ", "img", ",", "gt", ",", "scale", "=", "random_scale", "(", "img", ",", "gt", ",", "self", ".", "config", ".", "train_scale_array", ")", "\n", "\n", "", "crop_size", "=", "(", "self", ".", "config", ".", "image_height", ",", "self", ".", "config", ".", "image_width", ")", "\n", "crop_pos", "=", "generate_random_crop_pos", "(", "img", ".", "shape", "[", ":", "2", "]", ",", "crop_size", ")", "\n", "if", "self", ".", "augment", ":", "\n", "            ", "p_img", ",", "_", "=", "random_crop_pad_to_shape", "(", "normalize", "(", "img", ",", "self", ".", "img_mean", ",", "self", ".", "img_std", ")", ",", "crop_pos", ",", "crop_size", ",", "0", ")", "\n", "p_img_k", ",", "_", "=", "random_crop_pad_to_shape", "(", "normalize", "(", "np", ".", "array", "(", "\n", "self", ".", "data_transforms", "(", "Image", ".", "fromarray", "(", "img", ")", ")", "\n", ")", ",", "self", ".", "img_mean", ",", "self", ".", "img_std", ")", ",", "crop_pos", ",", "crop_size", ",", "0", ")", "\n", "p_img", "=", "p_img", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", "\n", "p_img_k", "=", "p_img_k", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", "\n", "extra_dict", "=", "{", "'img_k'", ":", "p_img_k", "}", "\n", "", "else", ":", "\n", "            ", "p_img", ",", "_", "=", "random_crop_pad_to_shape", "(", "normalize", "(", "img", ",", "self", ".", "img_mean", ",", "self", ".", "img_std", ")", ",", "crop_pos", ",", "crop_size", ",", "0", ")", "\n", "p_img", "=", "p_img", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", "\n", "extra_dict", "=", "None", "\n", "", "p_gt", ",", "_", "=", "random_crop_pad_to_shape", "(", "gt", ",", "crop_pos", ",", "crop_size", ",", "255", ")", "\n", "p_gt", "=", "cv2", ".", "resize", "(", "p_gt", ",", "(", "self", ".", "config", ".", "image_width", "//", "self", ".", "config", ".", "gt_down_sampling", ",", "self", ".", "config", ".", "image_height", "//", "self", ".", "config", ".", "gt_down_sampling", ")", ",", "interpolation", "=", "cv2", ".", "INTER_NEAREST", ")", "\n", "\n", "return", "p_img", ",", "p_gt", ",", "extra_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_CSG.None.dataloader_seg.get_train_loader": [[51, 82], ["dataloader_seg.TrainPre", "dataset", "torch.utils.data.DataLoader"], "function", ["None"], ["", "", "def", "get_train_loader", "(", "config", ",", "dataset", ",", "worker", "=", "None", ",", "test", "=", "False", ",", "augment", "=", "None", ")", ":", "\n", "    ", "data_setting", "=", "{", "\n", "'train_img_root'", ":", "config", ".", "train_img_root", ",", "\n", "'train_gt_root'", ":", "config", ".", "train_gt_root", ",", "\n", "'val_img_root'", ":", "config", ".", "val_img_root", ",", "\n", "'val_gt_root'", ":", "config", ".", "val_gt_root", ",", "\n", "'train_source'", ":", "config", ".", "train_source", ",", "\n", "'eval_source'", ":", "config", ".", "eval_source", ",", "\n", "'down_sampling_train'", ":", "config", ".", "down_sampling_train", "\n", "}", "\n", "if", "test", ":", "\n", "        ", "data_setting", "=", "{", "'img_root'", ":", "config", ".", "img_root", ",", "\n", "'gt_root'", ":", "config", ".", "gt_root", ",", "\n", "'train_source'", ":", "config", ".", "train_eval_source", ",", "\n", "'eval_source'", ":", "config", ".", "eval_source", "}", "\n", "", "train_preprocess", "=", "TrainPre", "(", "config", ",", "config", ".", "image_mean", ",", "config", ".", "image_std", ",", "augment", ")", "\n", "\n", "train_dataset", "=", "dataset", "(", "data_setting", ",", "\"train\"", ",", "train_preprocess", ",", "config", ".", "batch_size", "*", "config", ".", "niters_per_epoch", ")", "\n", "\n", "is_shuffle", "=", "True", "\n", "batch_size", "=", "config", ".", "batch_size", "\n", "\n", "train_loader", "=", "data", ".", "DataLoader", "(", "train_dataset", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "num_workers", "=", "config", ".", "num_workers", "if", "worker", "is", "None", "else", "worker", ",", "\n", "drop_last", "=", "True", ",", "\n", "shuffle", "=", "is_shuffle", ",", "\n", "pin_memory", "=", "True", ",", "\n", ")", "\n", "\n", "return", "train_loader", "\n", "", ""]], "home.repos.pwc.inspect_result.NVlabs_CSG.None.train.main": [[56, 200], ["os.getpid", "parser.parse_args", "utils.logger.prepare_seed", "utils.logger.prepare_logger", "torch.utils.data.DataLoader", "data.visda17.VisDA17", "torch.utils.data.DataLoader", "model.csg_builder.CSG", "train_blocks.split.split", "utils.sgd.SGD", "model.cuda.cuda", "utils.utils.IterNums", "range", "logging.info", "torchvision.Compose", "torchvision.Compose", "torchvision.Compose", "data.visda17.VisDA17", "data.visda17.VisDA17", "len", "len", "torch.Sequential", "os.path.isfile", "train.validate", "print", "exit", "len", "print", "utils.logger.prepare_logger.log", "train.train", "train.validate", "utils.logger.prepare_logger.writer.add_scalar", "utils.logger.prepare_logger.log", "max", "utils.utils.save_checkpoint", "time.strftime", "os.path.join", "os.path.join", "len", "int", "len", "int", "len", "len", "len", "len", "torch.Linear", "torch.ReLU", "torch.Linear", "sgd_in.append", "sgd_in.append", "print", "torch.load", "torch.load", "torch.load", "torch.load", "model.cuda.load_state_dict", "print", "print", "print", "time.gmtime", "torchvision.Resize", "torchvision.CenterCrop", "torchvision.ToTensor", "torchvision.Normalize", "utils.augmentations.RandAugment", "torchvision.Resize", "torchvision.RandomCrop", "torchvision.ToTensor", "torchvision.Normalize", "torchvision.Resize", "torchvision.CenterCrop", "torchvision.ToTensor", "torchvision.Normalize", "os.path.join", "os.path.join", "data.loader_csg.TwoCropsTransform", "os.path.join", "os.path.join", "parser.parse_args.csg_stages.split", "parser.parse_args.chunks.split", "sgd_in.append", "model.cuda.state_dict", "time.time", "utils.utils.get_params", "utils.utils.get_params", "utils.utils.get_params", "parser.parse_args.resume.replace", "parser.parse_args.resume.replace"], "function", ["home.repos.pwc.inspect_result.NVlabs_CSG.utils.logger.prepare_seed", "home.repos.pwc.inspect_result.NVlabs_CSG.utils.logger.prepare_logger", "home.repos.pwc.inspect_result.NVlabs_CSG.None.train_seg.validate", "home.repos.pwc.inspect_result.NVlabs_CSG.utils.logger.Logger.log", "home.repos.pwc.inspect_result.NVlabs_CSG.None.train_seg.train", "home.repos.pwc.inspect_result.NVlabs_CSG.None.train_seg.validate", "home.repos.pwc.inspect_result.NVlabs_CSG.utils.logger.Logger.log", "home.repos.pwc.inspect_result.NVlabs_CSG.utils.utils.save_checkpoint", "home.repos.pwc.inspect_result.NVlabs_CSG.utils.utils.load", "home.repos.pwc.inspect_result.NVlabs_CSG.utils.utils.load", "home.repos.pwc.inspect_result.NVlabs_CSG.utils.utils.load", "home.repos.pwc.inspect_result.NVlabs_CSG.utils.utils.load", "home.repos.pwc.inspect_result.NVlabs_CSG.data.loader_csg.RandomResizedCrop_two.get_params", "home.repos.pwc.inspect_result.NVlabs_CSG.data.loader_csg.RandomResizedCrop_two.get_params", "home.repos.pwc.inspect_result.NVlabs_CSG.data.loader_csg.RandomResizedCrop_two.get_params"], ["def", "main", "(", ")", ":", "\n", "    ", "global", "args", ",", "best_prec1", "\n", "PID", "=", "os", ".", "getpid", "(", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "prepare_seed", "(", "args", ".", "rand_seed", ")", "\n", "\n", "if", "args", ".", "timestamp", "==", "'none'", ":", "\n", "        ", "args", ".", "timestamp", "=", "\"{:}\"", ".", "format", "(", "time", ".", "strftime", "(", "'%h-%d-%C_%H-%M-%s'", ",", "time", ".", "gmtime", "(", "time", ".", "time", "(", ")", ")", ")", ")", "\n", "\n", "# Log outputs", "\n", "", "if", "args", ".", "evaluate", ":", "\n", "        ", "args", ".", "save_dir", "=", "args", ".", "save_dir", "+", "\"/Visda17-Res101-evaluate\"", "+", "\"%s/%s\"", "%", "(", "'/'", "+", "args", ".", "resume", ".", "replace", "(", "'/'", ",", "'+'", ")", "if", "args", ".", "resume", "!=", "'none'", "else", "''", ",", "args", ".", "timestamp", ")", "\n", "", "else", ":", "\n", "        ", "args", ".", "save_dir", "=", "args", ".", "save_dir", "+", "\"/VisDA-Res101-CSG.stg{csg_stages}.w{csg_weight}-APool.{apool}-Aug.{augment}-chunk{chunks}-mlp{mlp}.K{csg_k}-LR{lr}.bone{factor}-epoch{epochs}-batch{batch_size}-seed{seed}\"", ".", "format", "(", "\n", "csg_stages", "=", "args", ".", "csg_stages", ",", "\n", "mlp", "=", "args", ".", "mlp", ",", "\n", "csg_weight", "=", "args", ".", "csg", ",", "\n", "apool", "=", "args", ".", "apool", ",", "\n", "augment", "=", "args", ".", "augment", ",", "\n", "chunks", "=", "args", ".", "chunks", ",", "\n", "csg_k", "=", "args", ".", "csg_k", ",", "\n", "lr", "=", "\"%.2E\"", "%", "args", ".", "lr", ",", "\n", "factor", "=", "\"%.1f\"", "%", "args", ".", "factor", ",", "\n", "epochs", "=", "args", ".", "epochs", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "seed", "=", "args", ".", "rand_seed", "\n", ")", "+", "\"%s/%s\"", "%", "(", "'/'", "+", "args", ".", "resume", ".", "replace", "(", "'/'", ",", "'+'", ")", "if", "args", ".", "resume", "!=", "'none'", "else", "''", ",", "args", ".", "timestamp", ")", "\n", "", "logger", "=", "prepare_logger", "(", "args", ")", "\n", "\n", "data_transforms", "=", "{", "\n", "'val'", ":", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "Resize", "(", "224", ")", ",", "\n", "transforms", ".", "CenterCrop", "(", "224", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", "\n", "]", ")", ",", "\n", "}", "\n", "if", "args", ".", "augment", ":", "\n", "        ", "data_transforms", "[", "'train'", "]", "=", "transforms", ".", "Compose", "(", "[", "\n", "RandAugment", "(", "1", ",", "6.", ",", "augment_list", ")", ",", "\n", "transforms", ".", "Resize", "(", "224", ")", ",", "\n", "transforms", ".", "RandomCrop", "(", "224", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", "\n", "]", ")", "\n", "", "else", ":", "\n", "        ", "data_transforms", "[", "'train'", "]", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "Resize", "(", "224", ")", ",", "\n", "transforms", ".", "CenterCrop", "(", "224", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", "\n", "]", ")", "\n", "\n", "", "kwargs", "=", "{", "'num_workers'", ":", "20", ",", "'pin_memory'", ":", "True", "}", "\n", "if", "args", ".", "augment", ":", "\n", "# two source", "\n", "        ", "trainset", "=", "VisDA17", "(", "txt_file", "=", "os", ".", "path", ".", "join", "(", "args", ".", "data", ",", "\"train/image_list.txt\"", ")", ",", "root_dir", "=", "os", ".", "path", ".", "join", "(", "args", ".", "data", ",", "\"train\"", ")", ",", "\n", "transform", "=", "TwoCropsTransform", "(", "data_transforms", "[", "'train'", "]", ",", "data_transforms", "[", "'train'", "]", ")", ")", "\n", "", "else", ":", "\n", "# one source", "\n", "        ", "trainset", "=", "VisDA17", "(", "txt_file", "=", "os", ".", "path", ".", "join", "(", "args", ".", "data", ",", "\"train/image_list.txt\"", ")", ",", "root_dir", "=", "os", ".", "path", ".", "join", "(", "args", ".", "data", ",", "\"train\"", ")", ",", "transform", "=", "data_transforms", "[", "'train'", "]", ")", "\n", "", "train_loader", "=", "DataLoader", "(", "trainset", ",", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "True", ",", "drop_last", "=", "True", ",", "**", "kwargs", ")", "\n", "valset", "=", "VisDA17", "(", "txt_file", "=", "os", ".", "path", ".", "join", "(", "args", ".", "data", ",", "\"validation/image_list.txt\"", ")", ",", "root_dir", "=", "os", ".", "path", ".", "join", "(", "args", ".", "data", ",", "\"validation\"", ")", ",", "transform", "=", "data_transforms", "[", "'val'", "]", ",", "label_one_hot", "=", "True", ")", "\n", "val_loader", "=", "DataLoader", "(", "valset", ",", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "False", ",", "**", "kwargs", ")", "\n", "\n", "args", ".", "stages", "=", "[", "int", "(", "stage", ")", "for", "stage", "in", "args", ".", "csg_stages", ".", "split", "(", "'.'", ")", "]", "if", "len", "(", "args", ".", "csg_stages", ")", ">", "0", "else", "[", "]", "\n", "chunks", "=", "[", "int", "(", "chunk", ")", "for", "chunk", "in", "args", ".", "chunks", ".", "split", "(", "'.'", ")", "]", "if", "len", "(", "args", ".", "chunks", ")", ">", "0", "else", "[", "]", "\n", "assert", "len", "(", "chunks", ")", "==", "1", "or", "len", "(", "chunks", ")", "==", "len", "(", "args", ".", "stages", ")", "\n", "if", "len", "(", "chunks", ")", "<", "len", "(", "args", ".", "stages", ")", ":", "\n", "        ", "chunks", "=", "[", "chunks", "[", "0", "]", "]", "*", "len", "(", "args", ".", "stages", ")", "\n", "\n", "", "def", "get_head", "(", "num_ftrs", ",", "num_classes", ")", ":", "\n", "        ", "_dim", "=", "512", "\n", "return", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "num_ftrs", ",", "_dim", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", ",", "\n", "nn", ".", "Linear", "(", "_dim", ",", "num_classes", ")", ",", "\n", ")", "\n", "", "model", "=", "csg_builder", ".", "CSG", "(", "\n", "resnet101", ",", "get_head", "=", "get_head", ",", "K", "=", "args", ".", "csg_k", ",", "stages", "=", "args", ".", "stages", ",", "chunks", "=", "chunks", ",", "\n", "apool", "=", "args", ".", "apool", ",", "mlp", "=", "args", ".", "mlp", ",", "\n", ")", "\n", "\n", "train_blocks", "=", "\"conv1.bn1.layer1.layer2.layer3.layer4.fc\"", "\n", "train_blocks", "=", "train_blocks", ".", "split", "(", "'.'", ")", "\n", "# Setup optimizer", "\n", "factor", "=", "args", ".", "factor", "\n", "sgd_in", "=", "[", "]", "\n", "for", "name", "in", "train_blocks", ":", "\n", "        ", "if", "name", "!=", "'fc'", ":", "\n", "            ", "sgd_in", ".", "append", "(", "{", "'params'", ":", "get_params", "(", "model", ".", "encoder_q", ",", "[", "name", "]", ")", ",", "'lr'", ":", "factor", "*", "args", ".", "lr", "}", ")", "\n", "", "else", ":", "\n", "# no update to fc but to fc_new", "\n", "            ", "sgd_in", ".", "append", "(", "{", "'params'", ":", "get_params", "(", "model", ".", "encoder_q", ",", "[", "\"fc_new\"", "]", ")", ",", "'lr'", ":", "args", ".", "lr", "}", ")", "\n", "if", "model", ".", "mlp", ":", "\n", "                ", "sgd_in", ".", "append", "(", "{", "'params'", ":", "get_params", "(", "model", ".", "encoder_q", ",", "[", "\"fc_csg\"", "]", ")", ",", "'lr'", ":", "args", ".", "lr", "}", ")", "\n", "", "", "", "base_lrs", "=", "[", "group", "[", "'lr'", "]", "for", "group", "in", "sgd_in", "]", "\n", "optimizer", "=", "SGD", "(", "sgd_in", ",", "lr", "=", "args", ".", "lr", ",", "momentum", "=", "args", ".", "momentum", ",", "weight_decay", "=", "args", ".", "weight_decay", ")", "\n", "\n", "# Optionally resume from a checkpoint", "\n", "if", "args", ".", "resume", "!=", "'none'", ":", "\n", "        ", "if", "os", ".", "path", ".", "isfile", "(", "args", ".", "resume", ")", ":", "\n", "            ", "print", "(", "\"=> loading checkpoint '{}'\"", ".", "format", "(", "args", ".", "resume", ")", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "args", ".", "resume", ",", "map_location", "=", "lambda", "storage", ",", "loc", ":", "storage", ")", "\n", "args", ".", "start_epoch", "=", "checkpoint", "[", "'epoch'", "]", "\n", "best_prec1", "=", "checkpoint", "[", "'best_prec1'", "]", "\n", "msg", "=", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'state_dict'", "]", ",", "strict", "=", "False", ")", "\n", "print", "(", "\"resume weights: \"", ",", "msg", ")", "\n", "print", "(", "\"=> loaded checkpoint '{}' (epoch {})\"", ".", "format", "(", "args", ".", "resume", ",", "checkpoint", "[", "'epoch'", "]", ")", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "\"=ImageClassdata> no checkpoint found at '{}'\"", ".", "format", "(", "args", ".", "resume", ")", ")", "\n", "\n", "", "", "model", "=", "model", ".", "cuda", "(", ")", "\n", "\n", "if", "args", ".", "evaluate", ":", "\n", "        ", "prec1", "=", "validate", "(", "val_loader", ",", "model", ",", "args", ",", "0", ")", "\n", "print", "(", "prec1", ")", "\n", "exit", "(", "0", ")", "\n", "\n", "# Main training loop", "\n", "", "iter_max", "=", "args", ".", "epochs", "*", "len", "(", "train_loader", ")", "\n", "iter_stat", "=", "IterNums", "(", "iter_max", ")", "\n", "for", "epoch", "in", "range", "(", "args", ".", "start_epoch", ",", "args", ".", "epochs", ")", ":", "\n", "        ", "print", "(", "\"<< ============== JOB (PID = %d) %s ============== >>\"", "%", "(", "PID", ",", "args", ".", "save_dir", ")", ")", "\n", "logger", ".", "log", "(", "\"Epoch: %d\"", "%", "(", "epoch", "+", "1", ")", ")", "\n", "train", "(", "train_loader", ",", "model", ",", "optimizer", ",", "base_lrs", ",", "iter_stat", ",", "epoch", ",", "logger", ",", "args", ",", "adjust_lr", "=", "epoch", "<", "args", ".", "epochs", ")", "\n", "\n", "prec1", "=", "validate", "(", "val_loader", ",", "model", ",", "args", ",", "epoch", ")", "\n", "logger", ".", "writer", ".", "add_scalar", "(", "\"prec\"", ",", "prec1", ",", "epoch", "+", "1", ")", "\n", "logger", ".", "log", "(", "\"prec: %f\"", "%", "prec1", ")", "\n", "\n", "# remember best prec@1 and save checkpoint", "\n", "is_best", "=", "prec1", ">", "best_prec1", "\n", "best_prec1", "=", "max", "(", "prec1", ",", "best_prec1", ")", "\n", "save_checkpoint", "(", "args", ".", "save_dir", ",", "{", "\n", "'epoch'", ":", "epoch", "+", "1", ",", "\n", "'state_dict'", ":", "model", ".", "state_dict", "(", ")", ",", "\n", "'best_prec1'", ":", "best_prec1", ",", "\n", "}", ",", "is_best", ",", "keep_last", "=", "1", ")", "\n", "\n", "", "logging", ".", "info", "(", "'Best accuracy: {prec1:.3f}'", ".", "format", "(", "prec1", "=", "best_prec1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_CSG.None.train.train": [[202, 278], ["utils.utils.AverageMeter", "model.eval", "optimizer.zero_grad", "len", "iter", "tqdm.tqdm", "utils.utils.lr_poly", "logger.writer.add_scalar", "logger.log", "utils.utils.AverageMeter", "utils.utils.AverageMeter", "range", "optimizer.zero_grad", "next", "label.cuda.cuda", "model", "CrossEntropyLoss", "utils.utils.AverageMeter.update", "range", "CrossEntropyLoss.backward", "optimizer.step", "iter_stat.update", "enumerate", "tqdm.tqdm.set_description", "range", "range", "utils.utils.lr_poly", "utils.utils.adjust_learning_rate", "input[].cuda", "input[].cuda", "input.cuda", "label.cuda.long", "label.cuda.size", "len", "CrossEntropyLoss", "train.accuracy_ranking", "losses_csg[].update", "logger.writer.add_scalar", "logger.writer.add_scalar", "len", "len", "top1_csg[].update", "label.cuda.size", "logger.writer.add_scalar", "logger.writer.add_scalar", "label.cuda.size", "sum", "str"], "function", ["home.repos.pwc.inspect_result.NVlabs_CSG.utils.utils.lr_poly", "home.repos.pwc.inspect_result.NVlabs_CSG.utils.logger.Logger.log", "home.repos.pwc.inspect_result.NVlabs_CSG.utils.utils.AvgrageMeter.update", "home.repos.pwc.inspect_result.NVlabs_CSG.utils.sgd.SGD.step", "home.repos.pwc.inspect_result.NVlabs_CSG.utils.utils.AvgrageMeter.update", "home.repos.pwc.inspect_result.NVlabs_CSG.utils.utils.lr_poly", "home.repos.pwc.inspect_result.NVlabs_CSG.utils.utils.adjust_learning_rate", "home.repos.pwc.inspect_result.NVlabs_CSG.None.train_seg.accuracy_ranking", "home.repos.pwc.inspect_result.NVlabs_CSG.utils.utils.AvgrageMeter.update", "home.repos.pwc.inspect_result.NVlabs_CSG.utils.utils.AvgrageMeter.update"], ["", "def", "train", "(", "train_loader", ",", "model", ",", "optimizer", ",", "base_lrs", ",", "iter_stat", ",", "epoch", ",", "logger", ",", "args", ",", "adjust_lr", "=", "True", ")", ":", "\n", "    ", "tb_interval", "=", "50", "\n", "\n", "csg_weight", "=", "args", ".", "csg", "\n", "\n", "losses", "=", "AverageMeter", "(", ")", "# loss on target task", "\n", "losses_csg", "=", "[", "AverageMeter", "(", ")", "for", "_", "in", "range", "(", "len", "(", "model", ".", "stages", ")", ")", "]", "# [_loss] x #stages", "\n", "top1_csg", "=", "[", "AverageMeter", "(", ")", "for", "_", "in", "range", "(", "len", "(", "model", ".", "stages", ")", ")", "]", "\n", "\n", "model", ".", "eval", "(", ")", "\n", "\n", "# train for one epoch", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "epoch_size", "=", "len", "(", "train_loader", ")", "\n", "train_loader_iter", "=", "iter", "(", "train_loader", ")", "\n", "\n", "bar_format", "=", "'{desc}[{elapsed}<{remaining},{rate_fmt}]'", "\n", "pbar", "=", "tqdm", "(", "range", "(", "epoch_size", ")", ",", "file", "=", "sys", ".", "stdout", ",", "bar_format", "=", "bar_format", ",", "ncols", "=", "80", ")", "\n", "\n", "lr", "=", "lr_poly", "(", "base_lrs", "[", "-", "1", "]", ",", "iter_stat", ".", "iter_curr", ",", "iter_stat", ".", "iter_max", ",", "0.9", ")", "\n", "logger", ".", "writer", ".", "add_scalar", "(", "\"lr\"", ",", "lr", ",", "epoch", ")", "\n", "logger", ".", "log", "(", "\"lr %f\"", "%", "lr", ")", "\n", "for", "idx_iter", "in", "pbar", ":", "\n", "        ", "optimizer", ".", "zero_grad", "(", ")", "\n", "if", "adjust_lr", ":", "\n", "            ", "lr", "=", "lr_poly", "(", "base_lrs", "[", "-", "1", "]", ",", "iter_stat", ".", "iter_curr", ",", "iter_stat", ".", "iter_max", ",", "0.9", ")", "\n", "adjust_learning_rate", "(", "base_lrs", ",", "optimizer", ",", "iter_stat", ".", "iter_curr", ",", "iter_stat", ".", "iter_max", ",", "0.9", ")", "\n", "\n", "", "input", ",", "label", "=", "next", "(", "train_loader_iter", ")", "\n", "if", "args", ".", "augment", ":", "\n", "            ", "input_q", "=", "input", "[", "0", "]", ".", "cuda", "(", ")", "\n", "input_k", "=", "input", "[", "1", "]", ".", "cuda", "(", ")", "\n", "", "else", ":", "\n", "            ", "input_q", "=", "input", ".", "cuda", "(", ")", "\n", "input_k", "=", "None", "\n", "", "label", "=", "label", ".", "cuda", "(", ")", "\n", "\n", "results", "=", "model", "(", "input_q", ",", "input_k", ")", "\n", "\n", "# synthetic task", "\n", "loss", "=", "CrossEntropyLoss", "(", "results", "[", "'output'", "]", ",", "label", ".", "long", "(", ")", ")", "\n", "# measure accuracy and record loss", "\n", "losses", ".", "update", "(", "loss", ",", "label", ".", "size", "(", "0", ")", ")", "\n", "for", "idx", "in", "range", "(", "len", "(", "model", ".", "stages", ")", ")", ":", "\n", "            ", "_loss", "=", "0", "\n", "acc1", "=", "None", "\n", "# predictions: cosine b/w q and k", "\n", "# targets: zeros", "\n", "_loss", "=", "CrossEntropyLoss", "(", "results", "[", "'predictions_csg'", "]", "[", "idx", "]", ",", "results", "[", "'targets_csg'", "]", "[", "idx", "]", ")", "\n", "acc1", ",", "acc5", "=", "accuracy_ranking", "(", "results", "[", "'predictions_csg'", "]", "[", "idx", "]", ".", "data", ",", "results", "[", "'targets_csg'", "]", "[", "idx", "]", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "loss", "=", "loss", "+", "_loss", "*", "csg_weight", "\n", "# loss_csg[_type].append(_loss)", "\n", "if", "acc1", "is", "not", "None", ":", "top1_csg", "[", "idx", "]", ".", "update", "(", "acc1", ",", "label", ".", "size", "(", "0", ")", ")", "\n", "# measure accuracy and record loss", "\n", "losses_csg", "[", "idx", "]", ".", "update", "(", "_loss", ",", "label", ".", "size", "(", "0", ")", ")", "\n", "\n", "", "loss", ".", "backward", "(", ")", "\n", "\n", "# compute gradient and do SGD step", "\n", "optimizer", ".", "step", "(", ")", "\n", "# increment iter number", "\n", "iter_stat", ".", "update", "(", ")", "\n", "\n", "if", "idx_iter", "%", "tb_interval", "==", "0", ":", "logger", ".", "writer", ".", "add_scalar", "(", "\"loss/ce\"", ",", "losses", ".", "val", ",", "idx_iter", "+", "epoch", "*", "epoch_size", ")", "\n", "description", "=", "\"[XE %.3f]\"", "%", "(", "losses", ".", "val", ")", "\n", "description", "+=", "\"[CSG \"", "\n", "loss_str", "=", "\"\"", "\n", "acc_str", "=", "\"\"", "\n", "for", "idx", ",", "stage", "in", "enumerate", "(", "model", ".", "stages", ")", ":", "\n", "            ", "if", "idx_iter", "%", "tb_interval", "==", "0", ":", "logger", ".", "writer", ".", "add_scalar", "(", "\"loss/layer%d\"", "%", "stage", ",", "losses_csg", "[", "idx", "]", ".", "val", ",", "idx_iter", "+", "epoch", "*", "epoch_size", ")", "\n", "loss_str", "+=", "\"%.2f|\"", "%", "losses_csg", "[", "idx", "]", ".", "val", "\n", "if", "idx_iter", "%", "tb_interval", "==", "0", ":", "logger", ".", "writer", ".", "add_scalar", "(", "\"prec/layer%d\"", "%", "stage", ",", "top1_csg", "[", "idx", "]", ".", "val", "[", "0", "]", ",", "idx_iter", "+", "epoch", "*", "epoch_size", ")", "\n", "acc_str", "+=", "\"%.1f|\"", "%", "top1_csg", "[", "idx", "]", ".", "val", "[", "0", "]", "\n", "", "description", "+=", "\"loss:%s ranking:%s]\"", "%", "(", "loss_str", "[", ":", "-", "1", "]", ",", "acc_str", "[", ":", "-", "1", "]", ")", "\n", "if", "idx_iter", "%", "tb_interval", "==", "0", ":", "logger", ".", "writer", ".", "add_scalar", "(", "\"loss/total\"", ",", "losses", ".", "val", "+", "sum", "(", "[", "_loss", ".", "val", "for", "_loss", "in", "losses_csg", "]", ")", ",", "idx_iter", "+", "epoch", "*", "epoch_size", ")", "\n", "pbar", ".", "set_description", "(", "\"[Step %d/%d][%s]\"", "%", "(", "idx_iter", "+", "1", ",", "epoch_size", ",", "str", "(", "csg_weight", ")", ")", "+", "description", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_CSG.None.train.validate": [[280, 314], ["utils.utils.AverageMeter", "model.eval", "len", "iter", "tqdm.tqdm", "logging.info", "logging.info", "range", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "next", "input.cuda.cuda", "label.cuda.cuda", "model.encoder_q", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "utils.utils.accuracy", "utils.utils.AverageMeter.update", "tqdm.tqdm.set_description", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "str", "utils.utils.AverageMeter.avg.numpy().round", "model.encoder_q", "torch.flip", "torch.flip", "torch.flip", "torch.flip", "utils.utils.AverageMeter.avg.numpy"], "function", ["home.repos.pwc.inspect_result.NVlabs_CSG.seg_opr.metric.accuracy", "home.repos.pwc.inspect_result.NVlabs_CSG.utils.utils.AvgrageMeter.update"], ["", "", "def", "validate", "(", "val_loader", ",", "model", ",", "args", ",", "epoch", ")", ":", "\n", "    ", "\"\"\"Perform validation on the validation set\"\"\"", "\n", "top1", "=", "AverageMeter", "(", ")", "\n", "\n", "# switch to evaluate mode", "\n", "model", ".", "eval", "(", ")", "\n", "\n", "val_size", "=", "len", "(", "val_loader", ")", "\n", "val_loader_iter", "=", "iter", "(", "val_loader", ")", "\n", "bar_format", "=", "'{desc}[{elapsed}<{remaining},{rate_fmt}]'", "\n", "pbar", "=", "tqdm", "(", "range", "(", "val_size", ")", ",", "file", "=", "sys", ".", "stdout", ",", "bar_format", "=", "bar_format", ",", "ncols", "=", "140", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "idx_iter", "in", "pbar", ":", "\n", "            ", "input", ",", "label", "=", "next", "(", "val_loader_iter", ")", "\n", "\n", "input", "=", "input", ".", "cuda", "(", ")", "\n", "label", "=", "label", ".", "cuda", "(", ")", "\n", "\n", "# compute output", "\n", "output", ",", "_", "=", "model", ".", "encoder_q", "(", "input", ",", "task", "=", "'new'", ")", "\n", "output", "=", "torch", ".", "sigmoid", "(", "output", ")", "\n", "output", "=", "(", "output", "+", "torch", ".", "sigmoid", "(", "model", ".", "encoder_q", "(", "torch", ".", "flip", "(", "input", ",", "dims", "=", "(", "3", ",", ")", ")", ",", "task", "=", "'new'", ")", "[", "0", "]", ")", ")", "/", "2", "\n", "\n", "# accumulate accuracyk", "\n", "prec1", ",", "gt_num", "=", "accuracy", "(", "output", ".", "data", ",", "label", ",", "args", ".", "num_classes", ",", "topk", "=", "(", "1", ",", ")", ")", "\n", "top1", ".", "update", "(", "prec1", "[", "0", "]", ",", "gt_num", "[", "0", "]", ")", "\n", "\n", "description", "=", "\"[Acc@1-mean: %.2f][Acc@1-cls: %s]\"", "%", "(", "top1", ".", "vec2sca_avg", ",", "str", "(", "top1", ".", "avg", ".", "numpy", "(", ")", ".", "round", "(", "1", ")", ")", ")", "\n", "pbar", ".", "set_description", "(", "\"[Step %d/%d]\"", "%", "(", "idx_iter", "+", "1", ",", "val_size", ")", "+", "description", ")", "\n", "\n", "", "", "logging", ".", "info", "(", "' * Prec@1 {top1.vec2sca_avg:.3f}'", ".", "format", "(", "top1", "=", "top1", ")", ")", "\n", "logging", ".", "info", "(", "' * Prec@1 {top1.avg}'", ".", "format", "(", "top1", "=", "top1", ")", ")", "\n", "\n", "return", "top1", ".", "vec2sca_avg", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_CSG.None.train.accuracy_ranking": [[316, 331], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "max", "target.size", "output.topk", "pred.t.t", "pred.t.eq", "target.view().expand_as", "correct[].view().float().sum", "res.append", "correct[].view().float().sum.mul_", "target.view", "correct[].view().float", "correct[].view"], "function", ["None"], ["", "def", "accuracy_ranking", "(", "output", ",", "target", ",", "topk", "=", "(", "1", ",", ")", ")", ":", "\n", "    ", "\"\"\"Computes the accuracy over the k top predictions for the specified values of k\"\"\"", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "maxk", "=", "max", "(", "topk", ")", "\n", "batch_size", "=", "target", ".", "size", "(", "0", ")", "\n", "\n", "_", ",", "pred", "=", "output", ".", "topk", "(", "maxk", ",", "1", ",", "True", ",", "True", ")", "\n", "pred", "=", "pred", ".", "t", "(", ")", "\n", "correct", "=", "pred", ".", "eq", "(", "target", ".", "view", "(", "1", ",", "-", "1", ")", ".", "expand_as", "(", "pred", ")", ")", "\n", "\n", "res", "=", "[", "]", "\n", "for", "k", "in", "topk", ":", "\n", "            ", "correct_k", "=", "correct", "[", ":", "k", "]", ".", "view", "(", "-", "1", ")", ".", "float", "(", ")", ".", "sum", "(", "0", ",", "keepdim", "=", "True", ")", "\n", "res", ".", "append", "(", "correct_k", ".", "mul_", "(", "100.0", "/", "batch_size", ")", ")", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_CSG.None.train_seg.main": [[59, 180], ["os.getpid", "parser.parse_args", "utils.logger.prepare_seed", "torch.device", "torch.device", "torch.device", "torch.device", "utils.logger.prepare_logger", "dataloader_seg.get_train_loader", "model.csg_builder.CSG", "eval_seg.SegEvaluator", "utils.sgd.SGD", "model.to.to", "utils.utils.IterNums", "range", "logging.info", "len", "len", "data.cityscapes.Cityscapes", "numpy.array", "numpy.array", "os.path.isfile", "train_seg.validate", "print", "exit", "len", "print", "utils.logger.prepare_logger.log", "train_seg.train", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "train_seg.validate", "utils.logger.prepare_logger.writer.add_scalar", "utils.logger.prepare_logger.log", "max", "utils.utils.save_checkpoint", "str", "time.strftime", "len", "int", "len", "int", "len", "len", "len", "len", "utils.utils.get_params", "utils.utils.get_params", "utils.utils.get_params", "utils.utils.get_params", "utils.utils.get_params", "utils.utils.get_params", "utils.utils.get_params", "print", "torch.load", "torch.load", "torch.load", "torch.load", "model.to.load_state_dict", "print", "print", "print", "time.gmtime", "parser.parse_args.csg_stages.split", "parser.parse_args.chunks.split", "model.to.state_dict", "time.time"], "function", ["home.repos.pwc.inspect_result.NVlabs_CSG.utils.logger.prepare_seed", "home.repos.pwc.inspect_result.NVlabs_CSG.utils.logger.prepare_logger", "home.repos.pwc.inspect_result.NVlabs_CSG.None.dataloader_seg.get_train_loader", "home.repos.pwc.inspect_result.NVlabs_CSG.None.train_seg.validate", "home.repos.pwc.inspect_result.NVlabs_CSG.utils.logger.Logger.log", "home.repos.pwc.inspect_result.NVlabs_CSG.None.train_seg.train", "home.repos.pwc.inspect_result.NVlabs_CSG.None.train_seg.validate", "home.repos.pwc.inspect_result.NVlabs_CSG.utils.logger.Logger.log", "home.repos.pwc.inspect_result.NVlabs_CSG.utils.utils.save_checkpoint", "home.repos.pwc.inspect_result.NVlabs_CSG.data.loader_csg.RandomResizedCrop_two.get_params", "home.repos.pwc.inspect_result.NVlabs_CSG.data.loader_csg.RandomResizedCrop_two.get_params", "home.repos.pwc.inspect_result.NVlabs_CSG.data.loader_csg.RandomResizedCrop_two.get_params", "home.repos.pwc.inspect_result.NVlabs_CSG.data.loader_csg.RandomResizedCrop_two.get_params", "home.repos.pwc.inspect_result.NVlabs_CSG.data.loader_csg.RandomResizedCrop_two.get_params", "home.repos.pwc.inspect_result.NVlabs_CSG.data.loader_csg.RandomResizedCrop_two.get_params", "home.repos.pwc.inspect_result.NVlabs_CSG.data.loader_csg.RandomResizedCrop_two.get_params", "home.repos.pwc.inspect_result.NVlabs_CSG.utils.utils.load", "home.repos.pwc.inspect_result.NVlabs_CSG.utils.utils.load", "home.repos.pwc.inspect_result.NVlabs_CSG.utils.utils.load", "home.repos.pwc.inspect_result.NVlabs_CSG.utils.utils.load"], ["def", "main", "(", ")", ":", "\n", "    ", "global", "args", ",", "best_mIoU", "\n", "PID", "=", "os", ".", "getpid", "(", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "prepare_seed", "(", "args", ".", "rand_seed", ")", "\n", "device", "=", "torch", ".", "device", "(", "\"cuda:\"", "+", "str", "(", "args", ".", "gpus", ")", ")", "\n", "\n", "if", "args", ".", "timestamp", "==", "'none'", ":", "\n", "        ", "args", ".", "timestamp", "=", "\"{:}\"", ".", "format", "(", "time", ".", "strftime", "(", "'%h-%d-%C_%H-%M-%s'", ",", "time", ".", "gmtime", "(", "time", ".", "time", "(", ")", ")", ")", ")", "\n", "\n", "", "switch_model", "=", "args", ".", "switch_model", "\n", "assert", "switch_model", "in", "[", "\"deeplab50\"", ",", "\"deeplab101\"", "]", "\n", "\n", "# Log outputs", "\n", "if", "args", ".", "evaluate", ":", "\n", "        ", "args", ".", "save_dir", "=", "args", ".", "save_dir", "+", "\"/GTA5-%s-evaluate\"", "%", "switch_model", "+", "\"%s/%s\"", "%", "(", "'/'", "+", "args", ".", "resume", "if", "args", ".", "resume", "!=", "'none'", "else", "''", ",", "args", ".", "timestamp", ")", "\n", "", "else", ":", "\n", "        ", "args", ".", "save_dir", "=", "args", ".", "save_dir", "+", "\"/GTA5_512x512-{model}-LWF.stg{csg_stages}.w{csg_weight}-APool.{apool}-Aug.{augment}-chunk{chunks}-mlp{mlp}.K{csg_k}-LR{lr}.bone{factor}-epoch{epochs}-batch{batch_size}-seed{seed}\"", ".", "format", "(", "\n", "model", "=", "switch_model", ",", "\n", "csg_stages", "=", "args", ".", "csg_stages", ",", "\n", "mlp", "=", "args", ".", "mlp", ",", "\n", "csg_weight", "=", "args", ".", "csg", ",", "\n", "apool", "=", "args", ".", "apool", ",", "\n", "augment", "=", "args", ".", "augment", ",", "\n", "chunks", "=", "args", ".", "chunks", ",", "\n", "csg_k", "=", "args", ".", "csg_k", ",", "\n", "lr", "=", "\"%.2E\"", "%", "args", ".", "lr", ",", "\n", "factor", "=", "\"%.1f\"", "%", "args", ".", "factor", ",", "\n", "epochs", "=", "args", ".", "epochs", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "seed", "=", "args", ".", "rand_seed", "\n", ")", "+", "\"%s/%s\"", "%", "(", "'/'", "+", "args", ".", "resume", "if", "args", ".", "resume", "!=", "'none'", "else", "''", ",", "args", ".", "timestamp", ")", "\n", "", "logger", "=", "prepare_logger", "(", "args", ")", "\n", "\n", "from", "config_seg", "import", "config", "as", "data_setting", "\n", "data_setting", ".", "batch_size", "=", "args", ".", "batch_size", "\n", "train_loader", "=", "get_train_loader", "(", "data_setting", ",", "GTA5", ",", "test", "=", "False", ",", "augment", "=", "args", ".", "augment", ")", "\n", "\n", "args", ".", "stages", "=", "[", "int", "(", "stage", ")", "for", "stage", "in", "args", ".", "csg_stages", ".", "split", "(", "'.'", ")", "]", "if", "len", "(", "args", ".", "csg_stages", ")", ">", "0", "else", "[", "]", "\n", "chunks", "=", "[", "int", "(", "chunk", ")", "for", "chunk", "in", "args", ".", "chunks", ".", "split", "(", "'.'", ")", "]", "if", "len", "(", "args", ".", "chunks", ")", ">", "0", "else", "[", "]", "\n", "assert", "len", "(", "chunks", ")", "==", "1", "or", "len", "(", "chunks", ")", "==", "len", "(", "args", ".", "stages", ")", "\n", "if", "len", "(", "chunks", ")", "<", "len", "(", "args", ".", "stages", ")", ":", "\n", "        ", "chunks", "=", "[", "chunks", "[", "0", "]", "]", "*", "len", "(", "args", ".", "stages", ")", "\n", "\n", "", "if", "switch_model", "==", "'deeplab50'", ":", "\n", "        ", "layers", "=", "[", "3", ",", "4", ",", "6", ",", "3", "]", "\n", "", "elif", "switch_model", "==", "'deeplab101'", ":", "\n", "        ", "layers", "=", "[", "3", ",", "4", ",", "23", ",", "3", "]", "\n", "", "model", "=", "csg_builder", ".", "CSG", "(", "deeplab", ",", "get_head", "=", "None", ",", "K", "=", "args", ".", "csg_k", ",", "stages", "=", "args", ".", "stages", ",", "chunks", "=", "chunks", ",", "task", "=", "'new-seg'", ",", "\n", "apool", "=", "args", ".", "apool", ",", "mlp", "=", "args", ".", "mlp", ",", "\n", "base_encoder_kwargs", "=", "{", "'num_seg_classes'", ":", "args", ".", "num_classes", ",", "'layers'", ":", "layers", "}", ")", "\n", "\n", "threds", "=", "3", "\n", "evaluator", "=", "SegEvaluator", "(", "Cityscapes", "(", "data_setting", ",", "'val'", ",", "None", ")", ",", "args", ".", "num_classes", ",", "np", ".", "array", "(", "[", "0.485", ",", "0.456", ",", "0.406", "]", ")", ",", "\n", "np", ".", "array", "(", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", ",", "model", ".", "encoder_q", ",", "[", "1", ",", "]", ",", "False", ",", "devices", "=", "args", ".", "gpus", ",", "config", "=", "data_setting", ",", "threds", "=", "threds", ",", "\n", "verbose", "=", "False", ",", "save_path", "=", "None", ",", "show_image", "=", "False", ")", "# just calculate mIoU, no prediction file is generated", "\n", "# verbose=False, save_path=\"./prediction_files\", show_image=True, show_prediction=True)  # generate prediction files", "\n", "\n", "\n", "# Setup optimizer", "\n", "factor", "=", "args", ".", "factor", "\n", "sgd_in", "=", "[", "\n", "{", "'params'", ":", "get_params", "(", "model", ".", "encoder_q", ",", "[", "\"conv1\"", "]", ")", ",", "'lr'", ":", "factor", "*", "args", ".", "lr", "}", ",", "\n", "{", "'params'", ":", "get_params", "(", "model", ".", "encoder_q", ",", "[", "\"bn1\"", "]", ")", ",", "'lr'", ":", "factor", "*", "args", ".", "lr", "}", ",", "\n", "{", "'params'", ":", "get_params", "(", "model", ".", "encoder_q", ",", "[", "\"layer1\"", "]", ")", ",", "'lr'", ":", "factor", "*", "args", ".", "lr", "}", ",", "\n", "{", "'params'", ":", "get_params", "(", "model", ".", "encoder_q", ",", "[", "\"layer2\"", "]", ")", ",", "'lr'", ":", "factor", "*", "args", ".", "lr", "}", ",", "\n", "{", "'params'", ":", "get_params", "(", "model", ".", "encoder_q", ",", "[", "\"layer3\"", "]", ")", ",", "'lr'", ":", "factor", "*", "args", ".", "lr", "}", ",", "\n", "{", "'params'", ":", "get_params", "(", "model", ".", "encoder_q", ",", "[", "\"layer4\"", "]", ")", ",", "'lr'", ":", "factor", "*", "args", ".", "lr", "}", ",", "\n", "{", "'params'", ":", "get_params", "(", "model", ".", "encoder_q", ",", "[", "\"fc_new\"", "]", ")", ",", "'lr'", ":", "args", ".", "lr", "}", ",", "\n", "]", "\n", "base_lrs", "=", "[", "group", "[", "'lr'", "]", "for", "group", "in", "sgd_in", "]", "\n", "optimizer", "=", "SGD", "(", "sgd_in", ",", "lr", "=", "args", ".", "lr", ",", "momentum", "=", "args", ".", "momentum", ",", "weight_decay", "=", "args", ".", "weight_decay", ")", "\n", "\n", "# Optionally resume from a checkpoint", "\n", "if", "args", ".", "resume", "!=", "'none'", ":", "\n", "        ", "if", "os", ".", "path", ".", "isfile", "(", "args", ".", "resume", ")", ":", "\n", "            ", "print", "(", "\"=> loading checkpoint '{}'\"", ".", "format", "(", "args", ".", "resume", ")", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "args", ".", "resume", ",", "map_location", "=", "lambda", "storage", ",", "loc", ":", "storage", ")", "\n", "args", ".", "start_epoch", "=", "checkpoint", "[", "'epoch'", "]", "\n", "best_mIoU", "=", "checkpoint", "[", "'best_mIoU'", "]", "\n", "msg", "=", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'state_dict'", "]", ")", "\n", "print", "(", "\"resume weights: \"", ",", "msg", ")", "\n", "print", "(", "\"=> loaded checkpoint '{}' (epoch {})\"", ".", "format", "(", "args", ".", "resume", ",", "checkpoint", "[", "'epoch'", "]", ")", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "\"=ImageClassdata> no checkpoint found at '{}'\"", ".", "format", "(", "args", ".", "resume", ")", ")", "\n", "\n", "", "", "model", "=", "model", ".", "to", "(", "device", ")", "\n", "\n", "if", "args", ".", "evaluate", ":", "\n", "        ", "mIoU", "=", "validate", "(", "evaluator", ",", "model", ",", "-", "1", ")", "\n", "print", "(", "mIoU", ")", "\n", "exit", "(", "0", ")", "\n", "\n", "# Main training loop", "\n", "", "iter_max", "=", "args", ".", "epochs", "*", "len", "(", "train_loader", ")", "\n", "iter_stat", "=", "IterNums", "(", "iter_max", ")", "\n", "for", "epoch", "in", "range", "(", "args", ".", "start_epoch", ",", "args", ".", "epochs", ")", ":", "\n", "        ", "print", "(", "\"<< ============== JOB (PID = %d) %s ============== >>\"", "%", "(", "PID", ",", "args", ".", "save_dir", ")", ")", "\n", "logger", ".", "log", "(", "\"Epoch: %d\"", "%", "(", "epoch", "+", "1", ")", ")", "\n", "# train for one epoch", "\n", "train", "(", "args", ",", "train_loader", ",", "model", ",", "optimizer", ",", "base_lrs", ",", "iter_stat", ",", "epoch", ",", "logger", ",", "device", ",", "adjust_lr", "=", "epoch", "<", "args", ".", "epochs", ")", "\n", "\n", "# evaluate on validation set", "\n", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "mIoU", "=", "validate", "(", "evaluator", ",", "model", ",", "epoch", ")", "\n", "logger", ".", "writer", ".", "add_scalar", "(", "\"mIoU\"", ",", "mIoU", ",", "epoch", "+", "1", ")", "\n", "logger", ".", "log", "(", "\"mIoU: %f\"", "%", "mIoU", ")", "\n", "\n", "# remember best mIoU and save checkpoint", "\n", "is_best", "=", "mIoU", ">", "best_mIoU", "\n", "best_mIoU", "=", "max", "(", "mIoU", ",", "best_mIoU", ")", "\n", "save_checkpoint", "(", "args", ".", "save_dir", ",", "{", "\n", "'epoch'", ":", "epoch", "+", "1", ",", "\n", "'state_dict'", ":", "model", ".", "state_dict", "(", ")", ",", "\n", "'best_mIoU'", ":", "best_mIoU", ",", "\n", "}", ",", "is_best", ")", "\n", "\n", "", "logging", ".", "info", "(", "'Best accuracy: {mIoU:.3f}'", ".", "format", "(", "mIoU", "=", "best_mIoU", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_CSG.None.train_seg.train": [[182, 261], ["utils.utils.AverageMeter", "model.eval", "model.encoder_q.fc_new.train", "optimizer.zero_grad", "len", "iter", "tqdm.tqdm", "utils.utils.lr_poly", "logger.log", "utils.utils.AverageMeter", "utils.utils.AverageMeter", "range", "optimizer.zero_grad", "next", "sample[].to", "model", "CrossEntropyLoss", "utils.utils.AverageMeter.update", "range", "CrossEntropyLoss.backward", "optimizer.step", "iter_stat.update", "enumerate", "tqdm.tqdm.set_description", "range", "range", "utils.utils.lr_poly", "utils.utils.adjust_learning_rate", "input.to", "sample[].to", "input.to", "sample[].to.long", "sample[].to.size", "len", "CrossEntropyLoss", "train_seg.accuracy_ranking", "losses_csg[].update", "logger.writer.add_scalar", "logger.writer.add_scalar", "len", "len", "top1_csg[].update", "sample[].to.size", "logger.writer.add_scalar", "logger.writer.add_scalar", "sample[].to.size", "sum", "str"], "function", ["home.repos.pwc.inspect_result.NVlabs_CSG.None.train_seg.train", "home.repos.pwc.inspect_result.NVlabs_CSG.utils.utils.lr_poly", "home.repos.pwc.inspect_result.NVlabs_CSG.utils.logger.Logger.log", "home.repos.pwc.inspect_result.NVlabs_CSG.utils.utils.AvgrageMeter.update", "home.repos.pwc.inspect_result.NVlabs_CSG.utils.sgd.SGD.step", "home.repos.pwc.inspect_result.NVlabs_CSG.utils.utils.AvgrageMeter.update", "home.repos.pwc.inspect_result.NVlabs_CSG.utils.utils.lr_poly", "home.repos.pwc.inspect_result.NVlabs_CSG.utils.utils.adjust_learning_rate", "home.repos.pwc.inspect_result.NVlabs_CSG.None.train_seg.accuracy_ranking", "home.repos.pwc.inspect_result.NVlabs_CSG.utils.utils.AvgrageMeter.update", "home.repos.pwc.inspect_result.NVlabs_CSG.utils.utils.AvgrageMeter.update"], ["", "def", "train", "(", "args", ",", "train_loader", ",", "model", ",", "optimizer", ",", "base_lrs", ",", "iter_stat", ",", "epoch", ",", "logger", ",", "device", ",", "adjust_lr", "=", "True", ")", ":", "\n", "    ", "tb_interval", "=", "50", "\n", "\n", "csg_weight", "=", "args", ".", "csg", "\n", "\n", "\"\"\"Train for one epoch on the training set\"\"\"", "\n", "losses", "=", "AverageMeter", "(", ")", "\n", "losses_csg", "=", "[", "AverageMeter", "(", ")", "for", "_", "in", "range", "(", "len", "(", "model", ".", "stages", ")", ")", "]", "# [_loss] x #stages", "\n", "top1_csg", "=", "[", "AverageMeter", "(", ")", "for", "_", "in", "range", "(", "len", "(", "model", ".", "stages", ")", ")", "]", "\n", "\n", "model", ".", "eval", "(", ")", "\n", "model", ".", "encoder_q", ".", "fc_new", ".", "train", "(", ")", "\n", "\n", "# train for one epoch", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "epoch_size", "=", "len", "(", "train_loader", ")", "\n", "train_loader_iter", "=", "iter", "(", "train_loader", ")", "\n", "\n", "bar_format", "=", "'{desc}[{elapsed}<{remaining},{rate_fmt}]'", "\n", "pbar", "=", "tqdm", "(", "range", "(", "epoch_size", ")", ",", "file", "=", "sys", ".", "stdout", ",", "bar_format", "=", "bar_format", ",", "ncols", "=", "80", ")", "\n", "\n", "lr", "=", "lr_poly", "(", "base_lrs", "[", "-", "1", "]", ",", "iter_stat", ".", "iter_curr", ",", "iter_stat", ".", "iter_max", ",", "0.9", ")", "\n", "logger", ".", "log", "(", "\"lr %f\"", "%", "lr", ")", "\n", "for", "idx_iter", "in", "pbar", ":", "\n", "\n", "        ", "optimizer", ".", "zero_grad", "(", ")", "\n", "if", "adjust_lr", ":", "\n", "            ", "lr", "=", "lr_poly", "(", "base_lrs", "[", "-", "1", "]", ",", "iter_stat", ".", "iter_curr", ",", "iter_stat", ".", "iter_max", ",", "0.9", ")", "\n", "adjust_learning_rate", "(", "base_lrs", ",", "optimizer", ",", "iter_stat", ".", "iter_curr", ",", "iter_stat", ".", "iter_max", ",", "0.9", ")", "\n", "\n", "", "sample", "=", "next", "(", "train_loader_iter", ")", "\n", "label", "=", "sample", "[", "'label'", "]", ".", "to", "(", "device", ")", "\n", "input", "=", "sample", "[", "'data'", "]", "\n", "if", "args", ".", "augment", ":", "\n", "            ", "input_q", "=", "input", ".", "to", "(", "device", ")", "\n", "input_k", "=", "sample", "[", "'img_k'", "]", ".", "to", "(", "device", ")", "\n", "", "else", ":", "\n", "            ", "input_q", "=", "input", ".", "to", "(", "device", ")", "\n", "input_k", "=", "None", "\n", "\n", "# keys: output, predictions_csg, targets_csg", "\n", "", "results", "=", "model", "(", "input_q", ",", "input_k", ")", "\n", "\n", "# synthetic task", "\n", "loss", "=", "CrossEntropyLoss", "(", "results", "[", "'output'", "]", ",", "label", ".", "long", "(", ")", ")", "\n", "# measure accuracy and record loss", "\n", "losses", ".", "update", "(", "loss", ",", "label", ".", "size", "(", "0", ")", ")", "\n", "for", "idx", "in", "range", "(", "len", "(", "model", ".", "stages", ")", ")", ":", "\n", "            ", "_loss", "=", "0", "\n", "acc1", "=", "None", "\n", "# predictions: cosine b/w q and k", "\n", "# targets: zeros", "\n", "_loss", "=", "CrossEntropyLoss", "(", "results", "[", "'predictions_csg'", "]", "[", "idx", "]", ",", "results", "[", "'targets_csg'", "]", "[", "idx", "]", ")", "\n", "acc1", ",", "acc5", "=", "accuracy_ranking", "(", "results", "[", "'predictions_csg'", "]", "[", "idx", "]", ".", "data", ",", "results", "[", "'targets_csg'", "]", "[", "idx", "]", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "loss", "=", "loss", "+", "_loss", "*", "csg_weight", "\n", "if", "acc1", "is", "not", "None", ":", "top1_csg", "[", "idx", "]", ".", "update", "(", "acc1", ",", "label", ".", "size", "(", "0", ")", ")", "\n", "# measure accuracy and record loss", "\n", "losses_csg", "[", "idx", "]", ".", "update", "(", "_loss", ",", "label", ".", "size", "(", "0", ")", ")", "\n", "\n", "", "loss", ".", "backward", "(", ")", "\n", "\n", "# compute gradient and do SGD step", "\n", "optimizer", ".", "step", "(", ")", "\n", "# increment iter number", "\n", "iter_stat", ".", "update", "(", ")", "\n", "\n", "if", "idx_iter", "%", "tb_interval", "==", "0", ":", "logger", ".", "writer", ".", "add_scalar", "(", "\"loss/ce\"", ",", "losses", ".", "val", ",", "idx_iter", "+", "epoch", "*", "epoch_size", ")", "\n", "description", "=", "\"[XE %.3f]\"", "%", "(", "losses", ".", "val", ")", "\n", "description", "+=", "\"[CSG \"", "\n", "loss_str", "=", "\"\"", "\n", "acc_str", "=", "\"\"", "\n", "for", "idx", ",", "stage", "in", "enumerate", "(", "model", ".", "stages", ")", ":", "\n", "            ", "if", "idx_iter", "%", "tb_interval", "==", "0", ":", "logger", ".", "writer", ".", "add_scalar", "(", "\"loss/layer%d\"", "%", "stage", ",", "losses_csg", "[", "idx", "]", ".", "val", ",", "idx_iter", "+", "epoch", "*", "epoch_size", ")", "\n", "loss_str", "+=", "\"%.2f|\"", "%", "losses_csg", "[", "idx", "]", ".", "val", "\n", "if", "idx_iter", "%", "tb_interval", "==", "0", ":", "logger", ".", "writer", ".", "add_scalar", "(", "\"prec/layer%d\"", "%", "stage", ",", "top1_csg", "[", "idx", "]", ".", "val", "[", "0", "]", ",", "idx_iter", "+", "epoch", "*", "epoch_size", ")", "\n", "acc_str", "+=", "\"%.1f|\"", "%", "top1_csg", "[", "idx", "]", ".", "val", "[", "0", "]", "\n", "", "description", "+=", "\"loss:%s ranking:%s]\"", "%", "(", "loss_str", "[", ":", "-", "1", "]", ",", "acc_str", "[", ":", "-", "1", "]", ")", "\n", "if", "idx_iter", "%", "tb_interval", "==", "0", ":", "logger", ".", "writer", ".", "add_scalar", "(", "\"loss/total\"", ",", "losses", ".", "val", "+", "sum", "(", "[", "_loss", ".", "val", "for", "_loss", "in", "losses_csg", "]", ")", ",", "idx_iter", "+", "epoch", "*", "epoch_size", ")", "\n", "pbar", ".", "set_description", "(", "\"[Step %d/%d][%s]\"", "%", "(", "idx_iter", "+", "1", ",", "epoch_size", ",", "str", "(", "csg_weight", ")", ")", "+", "description", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_CSG.None.train_seg.validate": [[263, 269], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "model.eval", "evaluator.run_online_multiprocess"], "function", ["home.repos.pwc.inspect_result.NVlabs_CSG.engine.evaluator.Evaluator.run_online_multiprocess"], ["", "", "def", "validate", "(", "evaluator", ",", "model", ",", "epoch", ")", ":", "\n", "    ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "model", ".", "eval", "(", ")", "\n", "# _, mIoU = evaluator.run_online()", "\n", "_", ",", "mIoU", "=", "evaluator", ".", "run_online_multiprocess", "(", ")", "\n", "", "return", "mIoU", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_CSG.None.train_seg.accuracy_ranking": [[271, 286], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "max", "target.size", "output.topk", "pred.t.t", "pred.t.eq", "target.view().expand_as", "correct[].view().float().sum", "res.append", "correct[].view().float().sum.mul_", "target.view", "correct[].view().float", "correct[].view"], "function", ["None"], ["", "def", "accuracy_ranking", "(", "output", ",", "target", ",", "topk", "=", "(", "1", ",", ")", ")", ":", "\n", "    ", "\"\"\"Computes the accuracy over the k top predictions for the specified values of k\"\"\"", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "maxk", "=", "max", "(", "topk", ")", "\n", "batch_size", "=", "target", ".", "size", "(", "0", ")", "\n", "\n", "_", ",", "pred", "=", "output", ".", "topk", "(", "maxk", ",", "1", ",", "True", ",", "True", ")", "\n", "pred", "=", "pred", ".", "t", "(", ")", "\n", "correct", "=", "pred", ".", "eq", "(", "target", ".", "view", "(", "1", ",", "-", "1", ")", ".", "expand_as", "(", "pred", ")", ")", "\n", "\n", "res", "=", "[", "]", "\n", "for", "k", "in", "topk", ":", "\n", "            ", "correct_k", "=", "correct", "[", ":", "k", "]", ".", "view", "(", "-", "1", ")", ".", "float", "(", ")", ".", "sum", "(", "0", ",", "keepdim", "=", "True", ")", "\n", "res", ".", "append", "(", "correct_k", ".", "mul_", "(", "100.0", "/", "batch_size", ")", ")", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_CSG.utils.logger.PrintLogger.__init__": [[46, 49], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "\"\"\"Create a summary writer logging to log_dir.\"\"\"", "\n", "self", ".", "name", "=", "'PrintLogger'", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_CSG.utils.logger.PrintLogger.log": [[50, 52], ["print"], "methods", ["None"], ["", "def", "log", "(", "self", ",", "string", ")", ":", "\n", "        ", "print", "(", "string", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_CSG.utils.logger.PrintLogger.close": [[53, 55], ["print"], "methods", ["None"], ["", "def", "close", "(", "self", ")", ":", "\n", "        ", "print", "(", "'-'", "*", "30", "+", "' close printer '", "+", "'-'", "*", "30", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_CSG.utils.logger.Logger.__init__": [[59, 81], ["int", "pathlib.Path", "logger.Logger.log_dir.mkdir", "bool", "open", "logger.Logger.tensorboard_dir.mkdir", "torch.utils.tensorboard.SummaryWriter", "os.mkdir", "shutil.make_archive", "shutil.rmtree", "pathlib.Path", "str", "glob.glob", "glob.glob", "os.path.join", "os.path.join", "shutil.copyfile", "os.path.join", "os.path.join", "os.path.basename"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "log_dir", ",", "seed", ",", "create_model_dir", "=", "True", ",", "use_tf", "=", "False", ")", ":", "\n", "        ", "\"\"\"Create a summary writer logging to log_dir.\"\"\"", "\n", "self", ".", "seed", "=", "int", "(", "seed", ")", "\n", "self", ".", "log_dir", "=", "Path", "(", "log_dir", ")", "\n", "self", ".", "model_dir", "=", "Path", "(", "log_dir", ")", "/", "'model'", "\n", "self", ".", "log_dir", ".", "mkdir", "(", "parents", "=", "True", ",", "exist_ok", "=", "True", ")", "\n", "\n", "self", ".", "use_tf", "=", "bool", "(", "use_tf", ")", "\n", "self", ".", "tensorboard_dir", "=", "self", ".", "log_dir", "\n", "self", ".", "logger_path", "=", "self", ".", "log_dir", "/", "'seed-{:}.log'", ".", "format", "(", "self", ".", "seed", ")", "\n", "self", ".", "logger_file", "=", "open", "(", "self", ".", "logger_path", ",", "'w'", ")", "\n", "\n", "self", ".", "tensorboard_dir", ".", "mkdir", "(", "mode", "=", "0o775", ",", "parents", "=", "True", ",", "exist_ok", "=", "True", ")", "\n", "self", ".", "writer", "=", "SummaryWriter", "(", "str", "(", "self", ".", "tensorboard_dir", ")", ")", "\n", "\n", "scripts_to_save", "=", "glob", ".", "glob", "(", "'*.py'", ")", "+", "glob", ".", "glob", "(", "'*.sh'", ")", "\n", "os", ".", "mkdir", "(", "os", ".", "path", ".", "join", "(", "log_dir", ",", "'scripts'", ")", ")", "\n", "for", "script", "in", "scripts_to_save", ":", "\n", "            ", "dst_file", "=", "os", ".", "path", ".", "join", "(", "log_dir", ",", "'scripts'", ",", "os", ".", "path", ".", "basename", "(", "script", ")", ")", "\n", "shutil", ".", "copyfile", "(", "script", ",", "dst_file", ")", "\n", "", "shutil", ".", "make_archive", "(", "os", ".", "path", ".", "join", "(", "log_dir", ",", "\"scripts\"", ")", ",", "'zip'", ",", "log_dir", ",", "\"scripts\"", ")", "\n", "shutil", ".", "rmtree", "(", "os", ".", "path", ".", "join", "(", "log_dir", ",", "'scripts'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_CSG.utils.logger.Logger.__repr__": [[82, 84], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "(", "'{name}(dir={log_dir}, use-tf={use_tf}, writer={writer})'", ".", "format", "(", "name", "=", "self", ".", "__class__", ".", "__name__", ",", "**", "self", ".", "__dict__", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_CSG.utils.logger.Logger.path": [[85, 92], ["TypeError"], "methods", ["None"], ["", "def", "path", "(", "self", ",", "mode", ")", ":", "\n", "        ", "valids", "=", "(", "'model'", ",", "'best'", ",", "'info'", ",", "'log'", ")", "\n", "if", "mode", "==", "'model'", ":", "return", "self", ".", "model_dir", "/", "'seed-{:}-basic.pth'", ".", "format", "(", "self", ".", "seed", ")", "\n", "elif", "mode", "==", "'best'", ":", "return", "self", ".", "model_dir", "/", "'seed-{:}-best.pth'", ".", "format", "(", "self", ".", "seed", ")", "\n", "elif", "mode", "==", "'info'", ":", "return", "self", ".", "log_dir", "/", "'seed-{:}-last-info.pth'", ".", "format", "(", "self", ".", "seed", ")", "\n", "elif", "mode", "==", "'log'", ":", "return", "self", ".", "log_dir", "\n", "else", ":", "raise", "TypeError", "(", "'Unknow mode = {:}, valid modes = {:}'", ".", "format", "(", "mode", ",", "valids", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_CSG.utils.logger.Logger.extract_log": [[93, 95], ["None"], "methods", ["None"], ["", "def", "extract_log", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "logger_file", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_CSG.utils.logger.Logger.close": [[96, 100], ["logger.Logger.logger_file.close", "logger.Logger.writer.close"], "methods", ["home.repos.pwc.inspect_result.NVlabs_CSG.utils.logger.Logger.close", "home.repos.pwc.inspect_result.NVlabs_CSG.utils.logger.Logger.close"], ["", "def", "close", "(", "self", ")", ":", "\n", "        ", "self", ".", "logger_file", ".", "close", "(", ")", "\n", "if", "self", ".", "writer", "is", "not", "None", ":", "\n", "            ", "self", ".", "writer", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_CSG.utils.logger.Logger.log": [[101, 109], ["sys.stdout.write", "sys.stdout.flush", "print", "logger.Logger.logger_file.write", "logger.Logger.logger_file.flush"], "methods", ["None"], ["", "", "def", "log", "(", "self", ",", "string", ",", "save", "=", "True", ",", "stdout", "=", "False", ")", ":", "\n", "        ", "if", "stdout", ":", "\n", "            ", "sys", ".", "stdout", ".", "write", "(", "string", ")", ";", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "string", ")", "\n", "", "if", "save", ":", "\n", "            ", "self", ".", "logger_file", ".", "write", "(", "'{:}\\n'", ".", "format", "(", "string", ")", ")", "\n", "self", ".", "logger_file", ".", "flush", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_CSG.utils.logger.Logger.scalar_summary": [[110, 122], ["warnings.warn", "zip", "isinstance", "isinstance", "type", "type", "isinstance", "tf.Summary", "logger.Logger.writer.add_summary", "logger.Logger.writer.flush", "tf.Summary.Value"], "methods", ["None"], ["", "", "def", "scalar_summary", "(", "self", ",", "tags", ",", "values", ",", "step", ")", ":", "\n", "        ", "\"\"\"Log a scalar variable.\"\"\"", "\n", "if", "not", "self", ".", "use_tf", ":", "\n", "            ", "warnings", ".", "warn", "(", "'Do set use-tensorflow installed but call scalar_summary'", ")", "\n", "", "else", ":", "\n", "            ", "assert", "isinstance", "(", "tags", ",", "list", ")", "==", "isinstance", "(", "values", ",", "list", ")", ",", "'Type : {:} vs {:}'", ".", "format", "(", "type", "(", "tags", ")", ",", "type", "(", "values", ")", ")", "\n", "if", "not", "isinstance", "(", "tags", ",", "list", ")", ":", "\n", "                ", "tags", ",", "values", "=", "[", "tags", "]", ",", "[", "values", "]", "\n", "", "for", "tag", ",", "value", "in", "zip", "(", "tags", ",", "values", ")", ":", "\n", "                ", "summary", "=", "tf", ".", "Summary", "(", "value", "=", "[", "tf", ".", "Summary", ".", "Value", "(", "tag", "=", "tag", ",", "simple_value", "=", "value", ")", "]", ")", "\n", "self", ".", "writer", ".", "add_summary", "(", "summary", ",", "step", ")", "\n", "self", ".", "writer", ".", "flush", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_CSG.utils.logger.Logger.image_summary": [[123, 150], ["enumerate", "tf.Summary", "logger.Logger.writer.add_summary", "logger.Logger.writer.flush", "warnings.warn", "scipy.misc.toimage().save", "tf.Summary.Image", "img_summaries.append", "StringIO", "tf.Summary.Value", "BytesIO", "scipy.misc.toimage", "BytesIO.getvalue"], "methods", ["home.repos.pwc.inspect_result.NVlabs_CSG.utils.utils.save"], ["", "", "", "def", "image_summary", "(", "self", ",", "tag", ",", "images", ",", "step", ")", ":", "\n", "        ", "\"\"\"Log a list of images.\"\"\"", "\n", "import", "scipy", "\n", "if", "not", "self", ".", "use_tf", ":", "\n", "            ", "warnings", ".", "warn", "(", "'Do set use-tensorflow installed but call scalar_summary'", ")", "\n", "return", "\n", "\n", "", "img_summaries", "=", "[", "]", "\n", "for", "i", ",", "img", "in", "enumerate", "(", "images", ")", ":", "\n", "# Write the image to a string", "\n", "            ", "try", ":", "\n", "                ", "s", "=", "StringIO", "(", ")", "\n", "", "except", ":", "\n", "                ", "s", "=", "BytesIO", "(", ")", "\n", "", "scipy", ".", "misc", ".", "toimage", "(", "img", ")", ".", "save", "(", "s", ",", "format", "=", "\"png\"", ")", "\n", "\n", "# Create an Image object", "\n", "img_sum", "=", "tf", ".", "Summary", ".", "Image", "(", "encoded_image_string", "=", "s", ".", "getvalue", "(", ")", ",", "\n", "height", "=", "img", ".", "shape", "[", "0", "]", ",", "\n", "width", "=", "img", ".", "shape", "[", "1", "]", ")", "\n", "# Create a Summary value", "\n", "img_summaries", ".", "append", "(", "tf", ".", "Summary", ".", "Value", "(", "tag", "=", "'{}/{}'", ".", "format", "(", "tag", ",", "i", ")", ",", "image", "=", "img_sum", ")", ")", "\n", "\n", "# Create and write Summary", "\n", "", "summary", "=", "tf", ".", "Summary", "(", "value", "=", "img_summaries", ")", "\n", "self", ".", "writer", ".", "add_summary", "(", "summary", ",", "step", ")", "\n", "self", ".", "writer", ".", "flush", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_CSG.utils.logger.Logger.histo_summary": [[151, 180], ["numpy.histogram", "tf.HistogramProto", "float", "float", "int", "float", "float", "tf.Summary", "logger.Logger.writer.add_summary", "logger.Logger.writer.flush", "ValueError", "numpy.min", "numpy.max", "numpy.prod", "numpy.sum", "numpy.sum", "tf.HistogramProto.bucket_limit.append", "tf.HistogramProto.bucket.append", "tf.Summary.Value"], "methods", ["None"], ["", "def", "histo_summary", "(", "self", ",", "tag", ",", "values", ",", "step", ",", "bins", "=", "1000", ")", ":", "\n", "        ", "\"\"\"Log a histogram of the tensor of values.\"\"\"", "\n", "if", "not", "self", ".", "use_tf", ":", "raise", "ValueError", "(", "'Do not have tensorflow'", ")", "\n", "import", "tensorflow", "as", "tf", "\n", "\n", "# Create a histogram using numpy", "\n", "counts", ",", "bin_edges", "=", "np", ".", "histogram", "(", "values", ",", "bins", "=", "bins", ")", "\n", "\n", "# Fill the fields of the histogram proto", "\n", "hist", "=", "tf", ".", "HistogramProto", "(", ")", "\n", "hist", ".", "min", "=", "float", "(", "np", ".", "min", "(", "values", ")", ")", "\n", "hist", ".", "max", "=", "float", "(", "np", ".", "max", "(", "values", ")", ")", "\n", "hist", ".", "num", "=", "int", "(", "np", ".", "prod", "(", "values", ".", "shape", ")", ")", "\n", "hist", ".", "sum", "=", "float", "(", "np", ".", "sum", "(", "values", ")", ")", "\n", "hist", ".", "sum_squares", "=", "float", "(", "np", ".", "sum", "(", "values", "**", "2", ")", ")", "\n", "\n", "# Drop the start of the first bin", "\n", "bin_edges", "=", "bin_edges", "[", "1", ":", "]", "\n", "\n", "# Add bin edges and counts", "\n", "for", "edge", "in", "bin_edges", ":", "\n", "            ", "hist", ".", "bucket_limit", ".", "append", "(", "edge", ")", "\n", "", "for", "c", "in", "counts", ":", "\n", "            ", "hist", ".", "bucket", ".", "append", "(", "c", ")", "\n", "\n", "# Create and write Summary", "\n", "", "summary", "=", "tf", ".", "Summary", "(", "value", "=", "[", "tf", ".", "Summary", ".", "Value", "(", "tag", "=", "tag", ",", "histo", "=", "hist", ")", "]", ")", "\n", "self", ".", "writer", ".", "add_summary", "(", "summary", ",", "step", ")", "\n", "self", ".", "writer", ".", "flush", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.NVlabs_CSG.utils.logger.prepare_seed": [[19, 25], ["random.seed", "numpy.random.seed", "torch.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed_all"], "function", ["None"], ["", "def", "prepare_seed", "(", "rand_seed", ")", ":", "\n", "    ", "random", ".", "seed", "(", "rand_seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "rand_seed", ")", "\n", "torch", ".", "manual_seed", "(", "rand_seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "rand_seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "rand_seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_CSG.utils.logger.prepare_logger": [[27, 42], ["copy.deepcopy", "logger.Logger", "logger.Logger.log", "logger.Logger.log", "copy.deepcopy._get_kwargs", "logger.Logger.log", "logger.Logger.log", "logger.Logger.log", "logger.Logger.log", "logger.Logger.log", "logger.Logger.log", "logger.Logger.log", "logger.Logger.log", "sys.version.replace", "torch.backends.cudnn.version", "torch.cuda.is_available", "torch.cuda.device_count"], "function", ["home.repos.pwc.inspect_result.NVlabs_CSG.utils.logger.Logger.log", "home.repos.pwc.inspect_result.NVlabs_CSG.utils.logger.Logger.log", "home.repos.pwc.inspect_result.NVlabs_CSG.utils.logger.Logger.log", "home.repos.pwc.inspect_result.NVlabs_CSG.utils.logger.Logger.log", "home.repos.pwc.inspect_result.NVlabs_CSG.utils.logger.Logger.log", "home.repos.pwc.inspect_result.NVlabs_CSG.utils.logger.Logger.log", "home.repos.pwc.inspect_result.NVlabs_CSG.utils.logger.Logger.log", "home.repos.pwc.inspect_result.NVlabs_CSG.utils.logger.Logger.log", "home.repos.pwc.inspect_result.NVlabs_CSG.utils.logger.Logger.log", "home.repos.pwc.inspect_result.NVlabs_CSG.utils.logger.Logger.log"], ["", "def", "prepare_logger", "(", "xargs", ")", ":", "\n", "    ", "args", "=", "copy", ".", "deepcopy", "(", "xargs", ")", "\n", "logger", "=", "Logger", "(", "args", ".", "save_dir", ",", "args", ".", "rand_seed", ")", "\n", "logger", ".", "log", "(", "'Main Function with logger : {:}'", ".", "format", "(", "logger", ")", ")", "\n", "logger", ".", "log", "(", "'Arguments : -------------------------------'", ")", "\n", "for", "name", ",", "value", "in", "args", ".", "_get_kwargs", "(", ")", ":", "\n", "        ", "logger", ".", "log", "(", "'{:16} : {:}'", ".", "format", "(", "name", ",", "value", ")", ")", "\n", "", "logger", ".", "log", "(", "\"Python  Version  : {:}\"", ".", "format", "(", "sys", ".", "version", ".", "replace", "(", "'\\n'", ",", "' '", ")", ")", ")", "\n", "logger", ".", "log", "(", "\"Pillow  Version  : {:}\"", ".", "format", "(", "PIL", ".", "__version__", ")", ")", "\n", "logger", ".", "log", "(", "\"PyTorch Version  : {:}\"", ".", "format", "(", "torch", ".", "__version__", ")", ")", "\n", "logger", ".", "log", "(", "\"cuDNN   Version  : {:}\"", ".", "format", "(", "torch", ".", "backends", ".", "cudnn", ".", "version", "(", ")", ")", ")", "\n", "logger", ".", "log", "(", "\"CUDA available   : {:}\"", ".", "format", "(", "torch", ".", "cuda", ".", "is_available", "(", ")", ")", ")", "\n", "logger", ".", "log", "(", "\"CUDA GPU numbers : {:}\"", ".", "format", "(", "torch", ".", "cuda", ".", "device_count", "(", ")", ")", ")", "\n", "logger", ".", "log", "(", "\"CUDA_VISIBLE_DEVICES : {:}\"", ".", "format", "(", "os", ".", "environ", "[", "'CUDA_VISIBLE_DEVICES'", "]", "if", "'CUDA_VISIBLE_DEVICES'", "in", "os", ".", "environ", "else", "'None'", ")", ")", "\n", "return", "logger", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_CSG.utils.augmentations.Lighting.__init__": [[206, 210], ["torch.Tensor", "torch.Tensor"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "alphastd", ",", "eigval", ",", "eigvec", ")", ":", "\n", "        ", "self", ".", "alphastd", "=", "alphastd", "\n", "self", ".", "eigval", "=", "torch", ".", "Tensor", "(", "eigval", ")", "\n", "self", ".", "eigvec", "=", "torch", ".", "Tensor", "(", "eigvec", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_CSG.utils.augmentations.Lighting.__call__": [[211, 222], ["img.new().resize_().normal_", "augmentations.Lighting.eigvec.type_as().clone().mul().mul().sum().squeeze", "img.add", "augmentations.Lighting.view().expand_as", "img.new().resize_", "augmentations.Lighting.eigvec.type_as().clone().mul().mul().sum", "augmentations.Lighting.view", "img.new", "augmentations.Lighting.eigvec.type_as().clone().mul().mul", "augmentations.Lighting.eigval.view().expand", "augmentations.Lighting.eigvec.type_as().clone().mul", "img.new().resize_().normal_.view().expand", "augmentations.Lighting.eigval.view", "augmentations.Lighting.eigvec.type_as().clone", "img.new().resize_().normal_.view", "augmentations.Lighting.eigvec.type_as"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "if", "self", ".", "alphastd", "==", "0", ":", "\n", "            ", "return", "img", "\n", "\n", "", "alpha", "=", "img", ".", "new", "(", ")", ".", "resize_", "(", "3", ")", ".", "normal_", "(", "0", ",", "self", ".", "alphastd", ")", "\n", "rgb", "=", "self", ".", "eigvec", ".", "type_as", "(", "img", ")", ".", "clone", "(", ")", ".", "mul", "(", "alpha", ".", "view", "(", "1", ",", "3", ")", ".", "expand", "(", "3", ",", "3", ")", ")", ".", "mul", "(", "self", ".", "eigval", ".", "view", "(", "1", ",", "3", ")", ".", "expand", "(", "3", ",", "3", ")", ")", ".", "sum", "(", "1", ")", ".", "squeeze", "(", ")", "\n", "\n", "return", "img", ".", "add", "(", "rgb", ".", "view", "(", "3", ",", "1", ",", "1", ")", ".", "expand_as", "(", "img", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_CSG.utils.augmentations.CutoutDefault.__init__": [[225, 227], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "length", ")", ":", "\n", "        ", "self", ".", "length", "=", "length", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_CSG.utils.augmentations.CutoutDefault.__call__": [[228, 244], ["numpy.ones", "numpy.random.randint", "numpy.random.randint", "numpy.clip", "numpy.clip", "numpy.clip", "numpy.clip", "torch.from_numpy", "mask.expand_as.expand_as.expand_as", "img.size", "img.size"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "h", ",", "w", "=", "img", ".", "size", "(", "1", ")", ",", "img", ".", "size", "(", "2", ")", "\n", "mask", "=", "np", ".", "ones", "(", "(", "h", ",", "w", ")", ",", "np", ".", "float32", ")", "\n", "y", "=", "np", ".", "random", ".", "randint", "(", "h", ")", "\n", "x", "=", "np", ".", "random", ".", "randint", "(", "w", ")", "\n", "\n", "y1", "=", "np", ".", "clip", "(", "y", "-", "self", ".", "length", "//", "2", ",", "0", ",", "h", ")", "\n", "y2", "=", "np", ".", "clip", "(", "y", "+", "self", ".", "length", "//", "2", ",", "0", ",", "h", ")", "\n", "x1", "=", "np", ".", "clip", "(", "x", "-", "self", ".", "length", "//", "2", ",", "0", ",", "w", ")", "\n", "x2", "=", "np", ".", "clip", "(", "x", "+", "self", ".", "length", "//", "2", ",", "0", ",", "w", ")", "\n", "\n", "mask", "[", "y1", ":", "y2", ",", "x1", ":", "x2", "]", "=", "0.", "\n", "mask", "=", "torch", ".", "from_numpy", "(", "mask", ")", "\n", "mask", "=", "mask", ".", "expand_as", "(", "img", ")", "\n", "img", "*=", "mask", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_CSG.utils.augmentations.RandAugment.__init__": [[247, 252], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "n", ",", "m", ",", "augment_list", ")", ":", "\n", "        ", "self", ".", "n", "=", "n", "\n", "self", ".", "m", "=", "m", "# [0, 30]", "\n", "assert", "0", "<=", "m", "<=", "30", "\n", "self", ".", "augment_list", "=", "augment_list", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_CSG.utils.augmentations.RandAugment.__call__": [[253, 260], ["random.choices", "op", "float", "float"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "ops", "=", "random", ".", "choices", "(", "self", ".", "augment_list", ",", "k", "=", "self", ".", "n", ")", "\n", "for", "op", ",", "minval", ",", "maxval", "in", "ops", ":", "\n", "            ", "val", "=", "(", "float", "(", "self", ".", "m", ")", "/", "30", ")", "*", "float", "(", "maxval", "-", "minval", ")", "+", "minval", "\n", "img", "=", "op", "(", "img", ",", "val", ")", "\n", "\n", "", "return", "img", "\n", "", "", ""]], "home.repos.pwc.inspect_result.NVlabs_CSG.utils.augmentations.ShearX": [[12, 17], ["img.transform", "random.random"], "function", ["None"], ["def", "ShearX", "(", "img", ",", "v", ")", ":", "# [-0.3, 0.3]", "\n", "    ", "assert", "-", "0.3", "<=", "v", "<=", "0.3", "\n", "if", "random", ".", "random", "(", ")", ">", "0.5", ":", "\n", "        ", "v", "=", "-", "v", "\n", "", "return", "img", ".", "transform", "(", "img", ".", "size", ",", "PIL", ".", "Image", ".", "AFFINE", ",", "(", "1", ",", "v", ",", "0", ",", "0", ",", "1", ",", "0", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_CSG.utils.augmentations.ShearY": [[19, 24], ["img.transform", "random.random"], "function", ["None"], ["", "def", "ShearY", "(", "img", ",", "v", ")", ":", "# [-0.3, 0.3]", "\n", "    ", "assert", "-", "0.3", "<=", "v", "<=", "0.3", "\n", "if", "random", ".", "random", "(", ")", ">", "0.5", ":", "\n", "        ", "v", "=", "-", "v", "\n", "", "return", "img", ".", "transform", "(", "img", ".", "size", ",", "PIL", ".", "Image", ".", "AFFINE", ",", "(", "1", ",", "0", ",", "0", ",", "v", ",", "1", ",", "0", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_CSG.utils.augmentations.TranslateX": [[26, 32], ["img.transform", "random.random"], "function", ["None"], ["", "def", "TranslateX", "(", "img", ",", "v", ")", ":", "# [-150, 150] => percentage: [-0.45, 0.45]", "\n", "    ", "assert", "-", "0.45", "<=", "v", "<=", "0.45", "\n", "if", "random", ".", "random", "(", ")", ">", "0.5", ":", "\n", "        ", "v", "=", "-", "v", "\n", "", "v", "=", "v", "*", "img", ".", "size", "[", "0", "]", "\n", "return", "img", ".", "transform", "(", "img", ".", "size", ",", "PIL", ".", "Image", ".", "AFFINE", ",", "(", "1", ",", "0", ",", "v", ",", "0", ",", "1", ",", "0", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_CSG.utils.augmentations.TranslateXabs": [[34, 39], ["img.transform", "random.random"], "function", ["None"], ["", "def", "TranslateXabs", "(", "img", ",", "v", ")", ":", "# [-150, 150] => percentage: [-0.45, 0.45]", "\n", "    ", "assert", "0", "<=", "v", "\n", "if", "random", ".", "random", "(", ")", ">", "0.5", ":", "\n", "        ", "v", "=", "-", "v", "\n", "", "return", "img", ".", "transform", "(", "img", ".", "size", ",", "PIL", ".", "Image", ".", "AFFINE", ",", "(", "1", ",", "0", ",", "v", ",", "0", ",", "1", ",", "0", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_CSG.utils.augmentations.TranslateY": [[41, 47], ["img.transform", "random.random"], "function", ["None"], ["", "def", "TranslateY", "(", "img", ",", "v", ")", ":", "# [-150, 150] => percentage: [-0.45, 0.45]", "\n", "    ", "assert", "-", "0.45", "<=", "v", "<=", "0.45", "\n", "if", "random", ".", "random", "(", ")", ">", "0.5", ":", "\n", "        ", "v", "=", "-", "v", "\n", "", "v", "=", "v", "*", "img", ".", "size", "[", "1", "]", "\n", "return", "img", ".", "transform", "(", "img", ".", "size", ",", "PIL", ".", "Image", ".", "AFFINE", ",", "(", "1", ",", "0", ",", "0", ",", "0", ",", "1", ",", "v", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_CSG.utils.augmentations.TranslateYabs": [[49, 54], ["img.transform", "random.random"], "function", ["None"], ["", "def", "TranslateYabs", "(", "img", ",", "v", ")", ":", "# [-150, 150] => percentage: [-0.45, 0.45]", "\n", "    ", "assert", "0", "<=", "v", "\n", "if", "random", ".", "random", "(", ")", ">", "0.5", ":", "\n", "        ", "v", "=", "-", "v", "\n", "", "return", "img", ".", "transform", "(", "img", ".", "size", ",", "PIL", ".", "Image", ".", "AFFINE", ",", "(", "1", ",", "0", ",", "0", ",", "0", ",", "1", ",", "v", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_CSG.utils.augmentations.Rotate": [[56, 61], ["img.rotate", "random.random"], "function", ["None"], ["", "def", "Rotate", "(", "img", ",", "v", ")", ":", "# [-30, 30]", "\n", "    ", "assert", "-", "30", "<=", "v", "<=", "30", "\n", "if", "random", ".", "random", "(", ")", ">", "0.5", ":", "\n", "        ", "v", "=", "-", "v", "\n", "", "return", "img", ".", "rotate", "(", "v", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_CSG.utils.augmentations.AutoContrast": [[63, 68], ["random.random", "PIL.ImageOps.autocontrast", "PIL.ImageOps.autocontrast", "PIL.ImageOps.autocontrast", "PIL.ImageOps.autocontrast"], "function", ["None"], ["", "def", "AutoContrast", "(", "img", ",", "v", ")", ":", "\n", "    ", "if", "random", ".", "random", "(", ")", "<=", "v", ":", "\n", "        ", "return", "PIL", ".", "ImageOps", ".", "autocontrast", "(", "img", ")", "\n", "", "else", ":", "\n", "        ", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_CSG.utils.augmentations.Invert": [[70, 75], ["random.random", "PIL.ImageOps.invert", "PIL.ImageOps.invert", "PIL.ImageOps.invert", "PIL.ImageOps.invert"], "function", ["None"], ["", "", "def", "Invert", "(", "img", ",", "v", ")", ":", "\n", "    ", "if", "random", ".", "random", "(", ")", "<=", "v", ":", "\n", "        ", "return", "PIL", ".", "ImageOps", ".", "invert", "(", "img", ")", "\n", "", "else", ":", "\n", "        ", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_CSG.utils.augmentations.Equalize": [[77, 82], ["random.random", "PIL.ImageOps.equalize", "PIL.ImageOps.equalize", "PIL.ImageOps.equalize", "PIL.ImageOps.equalize"], "function", ["None"], ["", "", "def", "Equalize", "(", "img", ",", "v", ")", ":", "\n", "    ", "if", "random", ".", "random", "(", ")", "<=", "v", ":", "\n", "        ", "return", "PIL", ".", "ImageOps", ".", "equalize", "(", "img", ")", "\n", "", "else", ":", "\n", "        ", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_CSG.utils.augmentations.Flip": [[84, 86], ["PIL.ImageOps.mirror", "PIL.ImageOps.mirror", "PIL.ImageOps.mirror", "PIL.ImageOps.mirror"], "function", ["None"], ["", "", "def", "Flip", "(", "img", ",", "_", ")", ":", "# not from the paper", "\n", "    ", "return", "PIL", ".", "ImageOps", ".", "mirror", "(", "img", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_CSG.utils.augmentations.Solarize": [[88, 92], ["PIL.ImageOps.solarize", "PIL.ImageOps.solarize", "PIL.ImageOps.solarize", "PIL.ImageOps.solarize"], "function", ["None"], ["", "def", "Solarize", "(", "img", ",", "v", ")", ":", "# [0, 256]", "\n", "    ", "assert", "0", "<=", "v", "<=", "256", "\n", "v", "=", "256", "-", "v", "\n", "return", "PIL", ".", "ImageOps", ".", "solarize", "(", "img", ",", "v", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_CSG.utils.augmentations.SolarizeAdd": [[94, 101], ["numpy.array().astype", "numpy.clip", "img_np.astype.astype", "PIL.Image.fromarray", "PIL.ImageOps.solarize", "PIL.ImageOps.solarize", "PIL.ImageOps.solarize", "PIL.ImageOps.solarize", "numpy.array"], "function", ["None"], ["", "def", "SolarizeAdd", "(", "img", ",", "addition", "=", "0", ",", "threshold", "=", "128", ")", ":", "\n", "    ", "img_np", "=", "np", ".", "array", "(", "img", ")", ".", "astype", "(", "np", ".", "int", ")", "\n", "img_np", "=", "img_np", "+", "addition", "\n", "img_np", "=", "np", ".", "clip", "(", "img_np", ",", "0", ",", "255", ")", "\n", "img_np", "=", "img_np", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "img", "=", "Image", ".", "fromarray", "(", "img_np", ")", "\n", "return", "PIL", ".", "ImageOps", ".", "solarize", "(", "img", ",", "threshold", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_CSG.utils.augmentations.Posterize": [[103, 109], ["max", "PIL.ImageOps.posterize", "PIL.ImageOps.posterize", "PIL.ImageOps.posterize", "PIL.ImageOps.posterize", "int"], "function", ["None"], ["", "def", "Posterize", "(", "img", ",", "v", ")", ":", "# [4, 8]", "\n", "    ", "assert", "0", "<=", "v", "<=", "7", "\n", "# v = int(v)", "\n", "v", "=", "8", "-", "int", "(", "v", ")", "\n", "v", "=", "max", "(", "1", ",", "v", ")", "\n", "return", "PIL", ".", "ImageOps", ".", "posterize", "(", "img", ",", "v", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_CSG.utils.augmentations.Contrast": [[111, 117], ["PIL.ImageEnhance.Contrast().enhance", "PIL.ImageEnhance.Contrast().enhance", "PIL.ImageEnhance.Contrast().enhance", "PIL.ImageEnhance.Contrast().enhance", "random.random", "PIL.ImageEnhance.Contrast", "PIL.ImageEnhance.Contrast", "PIL.ImageEnhance.Contrast", "PIL.ImageEnhance.Contrast"], "function", ["home.repos.pwc.inspect_result.NVlabs_CSG.utils.augmentations.Contrast", "home.repos.pwc.inspect_result.NVlabs_CSG.utils.augmentations.Contrast", "home.repos.pwc.inspect_result.NVlabs_CSG.utils.augmentations.Contrast", "home.repos.pwc.inspect_result.NVlabs_CSG.utils.augmentations.Contrast"], ["", "def", "Contrast", "(", "img", ",", "v", ")", ":", "# [0.,0.9]", "\n", "# A factor of 1.0 gives the original image.", "\n", "    ", "assert", "0.", "<=", "v", "<=", "0.9", "\n", "if", "random", ".", "random", "(", ")", ">", "0.5", ":", "\n", "        ", "v", "=", "-", "v", "\n", "", "return", "PIL", ".", "ImageEnhance", ".", "Contrast", "(", "img", ")", ".", "enhance", "(", "v", "+", "1", ")", "# 0.1 to 1.9", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_CSG.utils.augmentations.Color": [[119, 125], ["PIL.ImageEnhance.Color().enhance", "PIL.ImageEnhance.Color().enhance", "PIL.ImageEnhance.Color().enhance", "PIL.ImageEnhance.Color().enhance", "random.random", "PIL.ImageEnhance.Color", "PIL.ImageEnhance.Color", "PIL.ImageEnhance.Color", "PIL.ImageEnhance.Color"], "function", ["home.repos.pwc.inspect_result.NVlabs_CSG.utils.augmentations.Color", "home.repos.pwc.inspect_result.NVlabs_CSG.utils.augmentations.Color", "home.repos.pwc.inspect_result.NVlabs_CSG.utils.augmentations.Color", "home.repos.pwc.inspect_result.NVlabs_CSG.utils.augmentations.Color"], ["", "def", "Color", "(", "img", ",", "v", ")", ":", "# [0.,0.9]", "\n", "# A factor of 1.0 gives the original image.", "\n", "    ", "assert", "0.", "<=", "v", "<=", "0.9", "\n", "if", "random", ".", "random", "(", ")", ">", "0.5", ":", "\n", "        ", "v", "=", "-", "v", "\n", "", "return", "PIL", ".", "ImageEnhance", ".", "Color", "(", "img", ")", ".", "enhance", "(", "v", "+", "1", ")", "# 0.1 to 1.9", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_CSG.utils.augmentations.Brightness": [[127, 133], ["PIL.ImageEnhance.Brightness().enhance", "PIL.ImageEnhance.Brightness().enhance", "PIL.ImageEnhance.Brightness().enhance", "PIL.ImageEnhance.Brightness().enhance", "random.random", "PIL.ImageEnhance.Brightness", "PIL.ImageEnhance.Brightness", "PIL.ImageEnhance.Brightness", "PIL.ImageEnhance.Brightness"], "function", ["home.repos.pwc.inspect_result.NVlabs_CSG.utils.augmentations.Brightness", "home.repos.pwc.inspect_result.NVlabs_CSG.utils.augmentations.Brightness", "home.repos.pwc.inspect_result.NVlabs_CSG.utils.augmentations.Brightness", "home.repos.pwc.inspect_result.NVlabs_CSG.utils.augmentations.Brightness"], ["", "def", "Brightness", "(", "img", ",", "v", ")", ":", "# [0.,0.9]", "\n", "# A factor of 1.0 gives the original image.", "\n", "    ", "assert", "0.", "<=", "v", "<=", "0.9", "\n", "if", "random", ".", "random", "(", ")", ">", "0.5", ":", "\n", "        ", "v", "=", "-", "v", "\n", "", "return", "PIL", ".", "ImageEnhance", ".", "Brightness", "(", "img", ")", ".", "enhance", "(", "v", "+", "1", ")", "# 0.1 to 1.9", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_CSG.utils.augmentations.Sharpness": [[135, 140], ["PIL.ImageEnhance.Sharpness().enhance", "PIL.ImageEnhance.Sharpness().enhance", "PIL.ImageEnhance.Sharpness().enhance", "PIL.ImageEnhance.Sharpness().enhance", "random.random", "PIL.ImageEnhance.Sharpness", "PIL.ImageEnhance.Sharpness", "PIL.ImageEnhance.Sharpness", "PIL.ImageEnhance.Sharpness"], "function", ["home.repos.pwc.inspect_result.NVlabs_CSG.utils.augmentations.Sharpness", "home.repos.pwc.inspect_result.NVlabs_CSG.utils.augmentations.Sharpness", "home.repos.pwc.inspect_result.NVlabs_CSG.utils.augmentations.Sharpness", "home.repos.pwc.inspect_result.NVlabs_CSG.utils.augmentations.Sharpness"], ["", "def", "Sharpness", "(", "img", ",", "v", ")", ":", "# [0.,.9]", "\n", "    ", "assert", "0.", "<=", "v", "<=", "0.9", "\n", "if", "random", ".", "random", "(", ")", ">", "0.5", ":", "\n", "        ", "v", "=", "-", "v", "\n", "", "return", "PIL", ".", "ImageEnhance", ".", "Sharpness", "(", "img", ")", ".", "enhance", "(", "v", "+", "1", ")", "# 0.1 to 1.9", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_CSG.utils.augmentations.Cutout": [[142, 149], ["augmentations.CutoutAbs"], "function", ["home.repos.pwc.inspect_result.NVlabs_CSG.utils.augmentations.CutoutAbs"], ["", "def", "Cutout", "(", "img", ",", "v", ")", ":", "# [0, 60] => percentage: [0, 0.2]", "\n", "    ", "assert", "0.0", "<=", "v", "<=", "0.2", "\n", "if", "v", "<=", "0.", ":", "\n", "        ", "return", "img", "\n", "\n", "", "v", "=", "v", "*", "img", ".", "size", "[", "0", "]", "\n", "return", "CutoutAbs", "(", "img", ",", "v", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_CSG.utils.augmentations.CutoutAbs": [[151, 170], ["numpy.random.uniform", "numpy.random.uniform", "int", "int", "min", "min", "img.copy.copy", "PIL.ImageDraw.Draw().rectangle", "PIL.ImageDraw.Draw().rectangle", "PIL.ImageDraw.Draw().rectangle", "PIL.ImageDraw.Draw().rectangle", "max", "max", "PIL.ImageDraw.Draw", "PIL.ImageDraw.Draw", "PIL.ImageDraw.Draw", "PIL.ImageDraw.Draw"], "function", ["None"], ["", "def", "CutoutAbs", "(", "img", ",", "v", ")", ":", "# [0, 60] => percentage: [0, 0.2]", "\n", "# assert 0 <= v <= 20", "\n", "    ", "if", "v", "<", "0", ":", "\n", "        ", "return", "img", "\n", "", "w", ",", "h", "=", "img", ".", "size", "\n", "x0", "=", "np", ".", "random", ".", "uniform", "(", "w", ")", "\n", "y0", "=", "np", ".", "random", ".", "uniform", "(", "h", ")", "\n", "\n", "x0", "=", "int", "(", "max", "(", "0", ",", "x0", "-", "v", "/", "2.", ")", ")", "\n", "y0", "=", "int", "(", "max", "(", "0", ",", "y0", "-", "v", "/", "2.", ")", ")", "\n", "x1", "=", "min", "(", "w", ",", "x0", "+", "v", ")", "\n", "y1", "=", "min", "(", "h", ",", "y0", "+", "v", ")", "\n", "\n", "xy", "=", "(", "x0", ",", "y0", ",", "x1", ",", "y1", ")", "\n", "color", "=", "(", "125", ",", "123", ",", "114", ")", "\n", "# color = (0, 0, 0)", "\n", "img", "=", "img", ".", "copy", "(", ")", "\n", "PIL", ".", "ImageDraw", ".", "Draw", "(", "img", ")", ".", "rectangle", "(", "xy", ",", "color", ")", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_CSG.utils.augmentations.SamplePairing": [[172, 179], ["numpy.random.choice", "PIL.Image.fromarray", "PIL.Image.fromarray", "PIL.Image.fromarray", "PIL.Image.fromarray", "PIL.Image.blend", "PIL.Image.blend", "PIL.Image.blend", "PIL.Image.blend", "len"], "function", ["None"], ["", "def", "SamplePairing", "(", "imgs", ")", ":", "# [0, 0.4]", "\n", "    ", "def", "f", "(", "img1", ",", "v", ")", ":", "\n", "        ", "i", "=", "np", ".", "random", ".", "choice", "(", "len", "(", "imgs", ")", ")", "\n", "img2", "=", "PIL", ".", "Image", ".", "fromarray", "(", "imgs", "[", "i", "]", ")", "\n", "return", "PIL", ".", "Image", ".", "blend", "(", "img1", ",", "img2", ",", "v", ")", "\n", "\n", "", "return", "f", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_CSG.utils.augmentations.Identity": [[181, 183], ["None"], "function", ["None"], ["", "def", "Identity", "(", "img", ",", "v", ")", ":", "\n", "    ", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_CSG.utils.utils.IterNums.__init__": [[72, 75], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "iter_max", ")", ":", "\n", "        ", "self", ".", "iter_max", "=", "iter_max", "\n", "self", ".", "iter_curr", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_CSG.utils.utils.IterNums.reset": [[76, 78], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "iter_curr", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_CSG.utils.utils.IterNums.update": [[79, 81], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ")", ":", "\n", "        ", "self", ".", "iter_curr", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_CSG.utils.utils.AverageMeter.__init__": [[85, 87], ["utils.AverageMeter.reset"], "methods", ["home.repos.pwc.inspect_result.NVlabs_CSG.utils.utils.AvgrageMeter.reset"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_CSG.utils.utils.AverageMeter.reset": [[88, 95], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "val", "=", "0", "\n", "self", ".", "avg", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "count", "=", "0", "\n", "self", ".", "vec2sca_avg", "=", "0", "\n", "self", ".", "vec2sca_val", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_CSG.utils.utils.AverageMeter.update": [[96, 105], ["torch.is_tensor", "torch.numel", "utils.AverageMeter.avg.sum", "len", "utils.AverageMeter.val.sum", "len"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "        ", "self", ".", "val", "=", "val", "\n", "self", ".", "sum", "+=", "val", "*", "n", "\n", "self", ".", "count", "+=", "n", "\n", "self", ".", "avg", "=", "self", ".", "sum", "/", "self", ".", "count", "\n", "if", "torch", ".", "is_tensor", "(", "self", ".", "val", ")", "and", "torch", ".", "numel", "(", "self", ".", "val", ")", "!=", "1", ":", "\n", "            ", "self", ".", "avg", "[", "self", ".", "count", "==", "0", "]", "=", "0", "\n", "self", ".", "vec2sca_avg", "=", "self", ".", "avg", ".", "sum", "(", ")", "/", "len", "(", "self", ".", "avg", ")", "\n", "self", ".", "vec2sca_val", "=", "self", ".", "val", ".", "sum", "(", ")", "/", "len", "(", "self", ".", "val", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_CSG.utils.utils.UnNormalize.__init__": [[164, 167], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "mean", "=", "(", "0.485", ",", "0.456", ",", "0.406", ")", ",", "std", "=", "(", "0.229", ",", "0.224", ",", "0.225", ")", ")", ":", "\n", "        ", "self", ".", "mean", "=", "mean", "\n", "self", ".", "std", "=", "std", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_CSG.utils.utils.UnNormalize.__call__": [[168, 179], ["zip", "t.mul_().add_", "t.mul_"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "tensor", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            tensor (Tensor): Tensor image of size (C, H, W) to be normalized.\n        Returns:\n            Tensor: Normalized image.\n        \"\"\"", "\n", "for", "t", ",", "m", ",", "s", "in", "zip", "(", "tensor", ",", "self", ".", "mean", ",", "self", ".", "std", ")", ":", "\n", "            ", "t", ".", "mul_", "(", "s", ")", ".", "add_", "(", "m", ")", "\n", "# The normalize code -> t.sub_(m).div_(s)", "\n", "", "return", "tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_CSG.utils.utils.AvgrageMeter.__init__": [[183, 185], ["utils.AvgrageMeter.reset"], "methods", ["home.repos.pwc.inspect_result.NVlabs_CSG.utils.utils.AvgrageMeter.reset"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_CSG.utils.utils.AvgrageMeter.reset": [[186, 190], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "avg", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "cnt", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_CSG.utils.utils.AvgrageMeter.update": [[191, 195], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "        ", "self", ".", "sum", "+=", "val", "*", "n", "\n", "self", ".", "cnt", "+=", "n", "\n", "self", ".", "avg", "=", "self", ".", "sum", "/", "self", ".", "cnt", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_CSG.utils.utils.Cutout.__init__": [[198, 200], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "length", ")", ":", "\n", "        ", "self", ".", "length", "=", "length", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_CSG.utils.utils.Cutout.__call__": [[201, 217], ["numpy.ones", "numpy.random.randint", "numpy.random.randint", "numpy.clip", "numpy.clip", "numpy.clip", "numpy.clip", "torch.from_numpy", "mask.expand_as.expand_as.expand_as", "img.size", "img.size"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "h", ",", "w", "=", "img", ".", "size", "(", "1", ")", ",", "img", ".", "size", "(", "2", ")", "\n", "mask", "=", "np", ".", "ones", "(", "(", "h", ",", "w", ")", ",", "np", ".", "float32", ")", "\n", "y", "=", "np", ".", "random", ".", "randint", "(", "h", ")", "\n", "x", "=", "np", ".", "random", ".", "randint", "(", "w", ")", "\n", "\n", "y1", "=", "np", ".", "clip", "(", "y", "-", "self", ".", "length", "//", "2", ",", "0", ",", "h", ")", "\n", "y2", "=", "np", ".", "clip", "(", "y", "+", "self", ".", "length", "//", "2", ",", "0", ",", "h", ")", "\n", "x1", "=", "np", ".", "clip", "(", "x", "-", "self", ".", "length", "//", "2", ",", "0", ",", "w", ")", "\n", "x2", "=", "np", ".", "clip", "(", "x", "+", "self", ".", "length", "//", "2", ",", "0", ",", "w", ")", "\n", "\n", "mask", "[", "y1", ":", "y2", ",", "x1", ":", "x2", "]", "=", "0.", "\n", "mask", "=", "torch", ".", "from_numpy", "(", "mask", ")", "\n", "mask", "=", "mask", ".", "expand_as", "(", "img", ")", "\n", "img", "*=", "mask", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_CSG.utils.utils.get_params": [[15, 32], ["isinstance", "range", "b.append", "len", "b[].named_parameters", "getattr"], "function", ["None"], ["def", "get_params", "(", "model", ",", "layers", "=", "[", "\"layer4\"", "]", ")", ":", "\n", "    ", "\"\"\"\n    This generator returns all the parameters of the net except for\n    the last classification layer. Note that for each batchnorm layer,\n    requires_grad is set to False in deeplab_resnet.py, therefore this function does not return\n    any batchnorm parameter\n    \"\"\"", "\n", "if", "isinstance", "(", "layers", ",", "str", ")", ":", "\n", "        ", "layers", "=", "[", "layers", "]", "\n", "", "b", "=", "[", "]", "\n", "for", "layer", "in", "layers", ":", "\n", "        ", "b", ".", "append", "(", "getattr", "(", "model", ",", "layer", ")", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "len", "(", "b", ")", ")", ":", "\n", "        ", "for", "k", ",", "v", "in", "b", "[", "i", "]", ".", "named_parameters", "(", ")", ":", "\n", "            ", "if", "v", ".", "requires_grad", ":", "\n", "                ", "yield", "v", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_CSG.utils.utils.adjust_learning_rate_exp": [[34, 39], ["len", "range"], "function", ["None"], ["", "", "", "", "def", "adjust_learning_rate_exp", "(", "optimizer", ",", "power", "=", "0.746", ")", ":", "\n", "    ", "\"\"\"Sets the learning rate to the initial LR divided by 5 at 60th, 120th and 160th epochs\"\"\"", "\n", "num_groups", "=", "len", "(", "optimizer", ".", "param_groups", ")", "\n", "for", "g", "in", "range", "(", "num_groups", ")", ":", "\n", "        ", "optimizer", ".", "param_groups", "[", "g", "]", "[", "'lr'", "]", "*=", "power", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_CSG.utils.utils.adjust_learning_rate": [[41, 46], ["len", "range", "utils.lr_poly"], "function", ["home.repos.pwc.inspect_result.NVlabs_CSG.utils.utils.lr_poly"], ["", "", "def", "adjust_learning_rate", "(", "base_lrs", ",", "optimizer", ",", "iter_curr", ",", "iter_max", ",", "power", ")", ":", "\n", "    ", "\"\"\"Sets the learning rate to the initial LR divided by 5 at 60th, 120th and 160th epochs\"\"\"", "\n", "num_groups", "=", "len", "(", "optimizer", ".", "param_groups", ")", "\n", "for", "g", "in", "range", "(", "num_groups", ")", ":", "\n", "        ", "optimizer", ".", "param_groups", "[", "g", "]", "[", "'lr'", "]", "=", "lr_poly", "(", "base_lrs", "[", "g", "]", ",", "iter_curr", ",", "iter_max", ",", "power", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_CSG.utils.utils.lr_poly": [[48, 50], ["min", "float", "float"], "function", ["None"], ["", "", "def", "lr_poly", "(", "base_lr", ",", "iter", ",", "max_iter", ",", "power", ")", ":", "\n", "    ", "return", "min", "(", "0.01", "+", "0.99", "*", "(", "float", "(", "iter", ")", "/", "100", ")", "**", "2.0", ",", "1.0", ")", "*", "base_lr", "*", "(", "(", "1", "-", "float", "(", "iter", ")", "/", "max_iter", ")", "**", "power", ")", "# This is with warm up", "\n", "# return min(0.01+0.99*(float(iter)/100)**2.0, 1.0) * base_lr * ((1-min(float(iter)/max_iter, 0.8))**power)  # This is with warm up & no smaller than last 20% LR", "\n"]], "home.repos.pwc.inspect_result.NVlabs_CSG.utils.utils.save_checkpoint": [[54, 69], ["list", "list.sort", "torch.save", "torch.save", "os.path.exists", "os.makedirs", "filter", "len", "range", "shutil.copyfile", "glob.glob", "os.remove", "len", "str"], "function", ["home.repos.pwc.inspect_result.NVlabs_CSG.utils.utils.save", "home.repos.pwc.inspect_result.NVlabs_CSG.utils.utils.save"], ["", "def", "save_checkpoint", "(", "name", ",", "state", ",", "is_best", ",", "filename", "=", "'checkpoint.pth.tar'", ",", "keep_last", "=", "1", ")", ":", "\n", "    ", "\"\"\"Saves checkpoint to disk\"\"\"", "\n", "directory", "=", "name", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "directory", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "directory", ")", "\n", "", "models_paths", "=", "list", "(", "filter", "(", "os", ".", "path", ".", "isfile", ",", "glob", ".", "glob", "(", "directory", "+", "\"/epoch*.pth.tar\"", ")", ")", ")", "\n", "models_paths", ".", "sort", "(", "key", "=", "os", ".", "path", ".", "getmtime", ",", "reverse", "=", "False", ")", "\n", "if", "len", "(", "models_paths", ")", "==", "keep_last", ":", "\n", "        ", "for", "i", "in", "range", "(", "len", "(", "models_paths", ")", "+", "1", "-", "keep_last", ")", ":", "\n", "            ", "os", ".", "remove", "(", "models_paths", "[", "i", "]", ")", "\n", "", "", "torch", ".", "save", "(", "state", ",", "directory", "+", "'/epoch_'", "+", "str", "(", "state", "[", "'epoch'", "]", ")", "+", "'_'", "+", "filename", ")", "\n", "filename", "=", "directory", "+", "'/latest_'", "+", "filename", "\n", "torch", ".", "save", "(", "state", ",", "filename", ")", "\n", "if", "is_best", ":", "\n", "        ", "shutil", ".", "copyfile", "(", "filename", ",", "'%s/'", "%", "(", "name", ")", "+", "'model_best.pth.tar'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_CSG.utils.utils.accuracy": [[107, 137], ["max", "output.topk", "pred.t.t", "gt.t.t", "pred.t.eq", "len", "label.topk", "correct[].float", "torch.tensor", "torch.tensor().float", "torch.tensor().float", "torch.tensor.mul_", "res.append", "gt_num.append", "label.size", "range", "range", "correct_k[].sum", "torch.tensor", "torch.tensor"], "function", ["None"], ["", "", "", "def", "accuracy", "(", "output", ",", "label", ",", "num_class", ",", "topk", "=", "(", "1", ",", ")", ")", ":", "\n", "    ", "\"\"\"Computes the precision@k for the specified values of k, currently only k=1 is supported\"\"\"", "\n", "maxk", "=", "max", "(", "topk", ")", "\n", "\n", "_", ",", "pred", "=", "output", ".", "topk", "(", "maxk", ",", "1", ",", "True", ",", "True", ")", "\n", "if", "len", "(", "label", ".", "size", "(", ")", ")", "==", "2", ":", "\n", "# one_hot label", "\n", "        ", "_", ",", "gt", "=", "label", ".", "topk", "(", "maxk", ",", "1", ",", "True", ",", "True", ")", "\n", "", "else", ":", "\n", "        ", "gt", "=", "label", "\n", "", "pred", "=", "pred", ".", "t", "(", ")", "\n", "pred_class_idx_list", "=", "[", "pred", "==", "class_idx", "for", "class_idx", "in", "range", "(", "num_class", ")", "]", "\n", "gt", "=", "gt", ".", "t", "(", ")", "\n", "gt_class_number_list", "=", "[", "(", "gt", "==", "class_idx", ")", ".", "sum", "(", ")", "for", "class_idx", "in", "range", "(", "num_class", ")", "]", "\n", "correct", "=", "pred", ".", "eq", "(", "gt", ")", "\n", "\n", "res", "=", "[", "]", "\n", "gt_num", "=", "[", "]", "\n", "for", "k", "in", "topk", ":", "\n", "        ", "correct_k", "=", "correct", "[", ":", "k", "]", ".", "float", "(", ")", "\n", "per_class_correct_list", "=", "[", "correct_k", "[", "pred_class_idx", "]", ".", "sum", "(", "0", ")", "for", "pred_class_idx", "in", "pred_class_idx_list", "]", "\n", "per_class_correct_array", "=", "torch", ".", "tensor", "(", "per_class_correct_list", ")", "\n", "gt_class_number_tensor", "=", "torch", ".", "tensor", "(", "gt_class_number_list", ")", ".", "float", "(", ")", "\n", "gt_class_zeronumber_tensor", "=", "gt_class_number_tensor", "==", "0", "\n", "gt_class_number_matrix", "=", "torch", ".", "tensor", "(", "gt_class_number_list", ")", ".", "float", "(", ")", "\n", "gt_class_acc", "=", "per_class_correct_array", ".", "mul_", "(", "100.0", "/", "gt_class_number_matrix", ")", "\n", "gt_class_acc", "[", "gt_class_zeronumber_tensor", "]", "=", "0", "\n", "res", ".", "append", "(", "gt_class_acc", ")", "\n", "gt_num", ".", "append", "(", "gt_class_number_matrix", ")", "\n", "", "return", "res", ",", "gt_num", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_CSG.utils.utils.apply_colormap_on_image": [[139, 161], ["matplotlib.get_cmap", "mpl_color_map.get_cmap.", "copy.copy", "PIL.Image.fromarray", "PIL.Image.fromarray", "PIL.Image.new", "PIL.Image.alpha_composite", "PIL.Image.alpha_composite", "org_im.convert"], "function", ["None"], ["", "def", "apply_colormap_on_image", "(", "org_im", ",", "activation", ",", "colormap_name", "=", "'hsv'", ")", ":", "\n", "    ", "\"\"\"\n        Apply heatmap on image\n    Args:\n        org_img (PIL img): Original image\n        activation_map (numpy arr): Activation map (grayscale) 0-255\n        colormap_name (str): Name of the colormap\n    \"\"\"", "\n", "# Get colormap", "\n", "color_map", "=", "mpl_color_map", ".", "get_cmap", "(", "colormap_name", ")", "\n", "no_trans_heatmap", "=", "color_map", "(", "activation", ")", "\n", "# Change alpha channel in colormap to make sure original image is displayed", "\n", "heatmap", "=", "copy", ".", "copy", "(", "no_trans_heatmap", ")", "\n", "heatmap", "[", ":", ",", ":", ",", "3", "]", "=", "0.5", "\n", "heatmap", "=", "Image", ".", "fromarray", "(", "(", "heatmap", "*", "255", ")", ".", "astype", "(", "np", ".", "uint8", ")", ")", "\n", "no_trans_heatmap", "=", "Image", ".", "fromarray", "(", "(", "no_trans_heatmap", "*", "255", ")", ".", "astype", "(", "np", ".", "uint8", ")", ")", "\n", "\n", "# Apply heatmap on iamge", "\n", "heatmap_on_image", "=", "Image", ".", "new", "(", "\"RGBA\"", ",", "org_im", ".", "size", ")", "\n", "heatmap_on_image", "=", "Image", ".", "alpha_composite", "(", "heatmap_on_image", ",", "org_im", ".", "convert", "(", "'RGBA'", ")", ")", "\n", "heatmap_on_image", "=", "Image", ".", "alpha_composite", "(", "heatmap_on_image", ",", "heatmap", ")", "\n", "return", "no_trans_heatmap", ",", "heatmap_on_image", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_CSG.utils.utils.count_parameters_in_MB": [[219, 221], ["numpy.sum", "numpy.prod", "v.size", "model.named_parameters"], "function", ["None"], ["", "", "def", "count_parameters_in_MB", "(", "model", ")", ":", "\n", "    ", "return", "np", ".", "sum", "(", "np", ".", "prod", "(", "v", ".", "size", "(", ")", ")", "for", "name", ",", "v", "in", "model", ".", "named_parameters", "(", ")", "if", "\"auxiliary\"", "not", "in", "name", ")", "/", "1e6", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_CSG.utils.utils.save": [[223, 225], ["torch.save", "model.state_dict"], "function", ["home.repos.pwc.inspect_result.NVlabs_CSG.utils.utils.save"], ["", "def", "save", "(", "model", ",", "model_path", ")", ":", "\n", "    ", "torch", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "model_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_CSG.utils.utils.load": [[227, 229], ["model.load_state_dict", "torch.load"], "function", ["home.repos.pwc.inspect_result.NVlabs_CSG.utils.utils.load"], ["", "def", "load", "(", "model", ",", "model_path", ")", ":", "\n", "    ", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "model_path", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_CSG.utils.utils.create_exp_dir": [[231, 241], ["print", "os.path.exists", "os.makedirs", "os.mkdir", "os.path.join", "os.path.join", "shutil.copyfile", "os.path.basename"], "function", ["None"], ["", "def", "create_exp_dir", "(", "path", ",", "scripts_to_save", "=", "None", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "exists", "(", "path", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "path", ")", "\n", "", "print", "(", "'Experiment dir : {}'", ".", "format", "(", "path", ")", ")", "\n", "\n", "if", "scripts_to_save", "is", "not", "None", ":", "\n", "        ", "os", ".", "mkdir", "(", "os", ".", "path", ".", "join", "(", "path", ",", "'scripts'", ")", ")", "\n", "for", "script", "in", "scripts_to_save", ":", "\n", "            ", "dst_file", "=", "os", ".", "path", ".", "join", "(", "path", ",", "'scripts'", ",", "os", ".", "path", ".", "basename", "(", "script", ")", ")", "\n", "shutil", ".", "copyfile", "(", "script", ",", "dst_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_CSG.utils.sgd.SGD.__init__": [[53, 67], ["dict", "torch.optim.optimizer.Optimizer.__init__", "ValueError", "ValueError", "ValueError", "ValueError"], "methods", ["home.repos.pwc.inspect_result.NVlabs_CSG.data.visda17.VisDA17.__init__"], ["def", "__init__", "(", "self", ",", "params", ",", "lr", "=", "required", ",", "momentum", "=", "0", ",", "dampening", "=", "0", ",", "\n", "weight_decay", "=", "0", ",", "nesterov", "=", "False", ")", ":", "\n", "        ", "if", "lr", "is", "not", "required", "and", "lr", "<", "0.0", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid learning rate: {}\"", ".", "format", "(", "lr", ")", ")", "\n", "", "if", "momentum", "<", "0.0", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid momentum value: {}\"", ".", "format", "(", "momentum", ")", ")", "\n", "", "if", "weight_decay", "<", "0.0", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid weight_decay value: {}\"", ".", "format", "(", "weight_decay", ")", ")", "\n", "\n", "", "defaults", "=", "dict", "(", "lr", "=", "lr", ",", "momentum", "=", "momentum", ",", "dampening", "=", "dampening", ",", "\n", "weight_decay", "=", "weight_decay", ",", "nesterov", "=", "nesterov", ")", "\n", "if", "nesterov", "and", "(", "momentum", "<=", "0", "or", "dampening", "!=", "0", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\"Nesterov momentum requires a momentum and zero dampening\"", ")", "\n", "", "super", "(", "SGD", ",", "self", ")", ".", "__init__", "(", "params", ",", "defaults", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_CSG.utils.sgd.SGD.__setstate__": [[68, 72], ["super().__setstate__", "group.setdefault"], "methods", ["home.repos.pwc.inspect_result.NVlabs_CSG.utils.sgd.SGD.__setstate__"], ["", "def", "__setstate__", "(", "self", ",", "state", ")", ":", "\n", "        ", "super", "(", "SGD", ",", "self", ")", ".", "__setstate__", "(", "state", ")", "\n", "for", "group", "in", "self", ".", "param_groups", ":", "\n", "            ", "group", ".", "setdefault", "(", "'nesterov'", ",", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_CSG.utils.sgd.SGD.step": [[73, 114], ["closure", "p.data.add_", "d_p.add.add.add_", "torch.clone().detach().mul_", "torch.clone().detach().mul_.mul_().add_", "d_p.add.add.add", "d_p.add.add.mul_", "torch.clone().detach", "torch.clone().detach().mul_.mul_", "torch.clone"], "methods", ["None"], ["", "", "def", "step", "(", "self", ",", "closure", "=", "None", ")", ":", "\n", "        ", "\"\"\"Performs a single optimization step.\n\n        Arguments:\n            closure (callable, optional): A closure that reevaluates the model\n                and returns the loss.\n        \"\"\"", "\n", "loss", "=", "None", "\n", "if", "closure", "is", "not", "None", ":", "\n", "            ", "loss", "=", "closure", "(", ")", "\n", "\n", "", "for", "group", "in", "self", ".", "param_groups", ":", "\n", "            ", "weight_decay", "=", "group", "[", "'weight_decay'", "]", "\n", "momentum", "=", "group", "[", "'momentum'", "]", "\n", "dampening", "=", "group", "[", "'dampening'", "]", "\n", "nesterov", "=", "group", "[", "'nesterov'", "]", "\n", "\n", "for", "p", "in", "group", "[", "'params'", "]", ":", "\n", "                ", "if", "p", ".", "grad", "is", "None", ":", "\n", "                    ", "continue", "\n", "", "d_p", "=", "p", ".", "grad", ".", "data", "\n", "if", "weight_decay", "!=", "0", ":", "\n", "                    ", "d_p", ".", "add_", "(", "weight_decay", ",", "p", ".", "data", ")", "\n", "", "if", "momentum", "!=", "0", ":", "\n", "                    ", "param_state", "=", "self", ".", "state", "[", "p", "]", "\n", "if", "'momentum_buffer'", "not", "in", "param_state", ":", "\n", "# buf = param_state['momentum_buffer'] = torch.clone(d_p).detach()", "\n", "                        ", "buf", "=", "param_state", "[", "'momentum_buffer'", "]", "=", "torch", ".", "clone", "(", "d_p", ")", ".", "detach", "(", ")", ".", "mul_", "(", "group", "[", "'lr'", "]", ")", "\n", "", "else", ":", "\n", "                        ", "buf", "=", "param_state", "[", "'momentum_buffer'", "]", "\n", "# buf.mul_(momentum).add_(1 - dampening, d_p)", "\n", "buf", ".", "mul_", "(", "momentum", ")", ".", "add_", "(", "1", "-", "dampening", ",", "d_p", ".", "mul_", "(", "group", "[", "'lr'", "]", ")", ")", "\n", "", "if", "nesterov", ":", "\n", "                        ", "d_p", "=", "d_p", ".", "add", "(", "momentum", ",", "buf", ")", "\n", "", "else", ":", "\n", "                        ", "d_p", "=", "buf", "\n", "\n", "# p.data.add_(-group['lr'], d_p)", "\n", "", "", "p", ".", "data", ".", "add_", "(", "-", "1", ",", "d_p", ")", "\n", "\n", "", "", "return", "loss", "\n", "", "", ""]], "home.repos.pwc.inspect_result.NVlabs_CSG.utils.img_utils.get_2dshape": [[11, 25], ["isinstance", "int", "map", "min"], "function", ["None"], ["def", "get_2dshape", "(", "shape", ",", "*", ",", "zero", "=", "True", ")", ":", "\n", "    ", "if", "not", "isinstance", "(", "shape", ",", "collections", ".", "Iterable", ")", ":", "\n", "        ", "shape", "=", "int", "(", "shape", ")", "\n", "shape", "=", "(", "shape", ",", "shape", ")", "\n", "", "else", ":", "\n", "        ", "h", ",", "w", "=", "map", "(", "int", ",", "shape", ")", "\n", "shape", "=", "(", "h", ",", "w", ")", "\n", "", "if", "zero", ":", "\n", "        ", "minv", "=", "0", "\n", "", "else", ":", "\n", "        ", "minv", "=", "1", "\n", "\n", "", "assert", "min", "(", "shape", ")", ">=", "minv", ",", "'invalid shape: {}'", ".", "format", "(", "shape", ")", "\n", "return", "shape", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_CSG.utils.img_utils.random_crop_pad_to_shape": [[27, 43], ["img_utils.get_2dshape", "img_utils.pad_image_to_shape"], "function", ["home.repos.pwc.inspect_result.NVlabs_CSG.utils.img_utils.get_2dshape", "home.repos.pwc.inspect_result.NVlabs_CSG.utils.img_utils.pad_image_to_shape"], ["", "def", "random_crop_pad_to_shape", "(", "img", ",", "crop_pos", ",", "crop_size", ",", "pad_label_value", ")", ":", "\n", "    ", "h", ",", "w", "=", "img", ".", "shape", "[", ":", "2", "]", "\n", "start_crop_h", ",", "start_crop_w", "=", "crop_pos", "\n", "assert", "(", "(", "start_crop_h", "<", "h", ")", "and", "(", "start_crop_h", ">=", "0", ")", ")", "\n", "assert", "(", "(", "start_crop_w", "<", "w", ")", "and", "(", "start_crop_w", ">=", "0", ")", ")", "\n", "\n", "crop_size", "=", "get_2dshape", "(", "crop_size", ")", "\n", "crop_h", ",", "crop_w", "=", "crop_size", "\n", "\n", "img_crop", "=", "img", "[", "start_crop_h", ":", "start_crop_h", "+", "crop_h", ",", "\n", "start_crop_w", ":", "start_crop_w", "+", "crop_w", ",", "...", "]", "\n", "\n", "img_", ",", "margin", "=", "pad_image_to_shape", "(", "img_crop", ",", "crop_size", ",", "cv2", ".", "BORDER_CONSTANT", ",", "\n", "pad_label_value", ")", "\n", "\n", "return", "img_", ",", "margin", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_CSG.utils.img_utils.generate_random_crop_pos": [[45, 61], ["img_utils.get_2dshape", "img_utils.get_2dshape", "random.randint", "random.randint"], "function", ["home.repos.pwc.inspect_result.NVlabs_CSG.utils.img_utils.get_2dshape", "home.repos.pwc.inspect_result.NVlabs_CSG.utils.img_utils.get_2dshape"], ["", "def", "generate_random_crop_pos", "(", "ori_size", ",", "crop_size", ")", ":", "\n", "    ", "ori_size", "=", "get_2dshape", "(", "ori_size", ")", "\n", "h", ",", "w", "=", "ori_size", "\n", "\n", "crop_size", "=", "get_2dshape", "(", "crop_size", ")", "\n", "crop_h", ",", "crop_w", "=", "crop_size", "\n", "\n", "pos_h", ",", "pos_w", "=", "0", ",", "0", "\n", "\n", "if", "h", ">", "crop_h", ":", "\n", "        ", "pos_h", "=", "random", ".", "randint", "(", "0", ",", "h", "-", "crop_h", "+", "1", ")", "\n", "\n", "", "if", "w", ">", "crop_w", ":", "\n", "        ", "pos_w", "=", "random", ".", "randint", "(", "0", ",", "w", "-", "crop_w", "+", "1", ")", "\n", "\n", "", "return", "pos_h", ",", "pos_w", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_CSG.utils.img_utils.pad_image_to_shape": [[63, 78], ["numpy.zeros", "img_utils.get_2dshape", "cv2.copyMakeBorder", "cv2.BORDER_CONSTANT", "cv2.BORDER_CONSTANT"], "function", ["home.repos.pwc.inspect_result.NVlabs_CSG.utils.img_utils.get_2dshape"], ["", "def", "pad_image_to_shape", "(", "img", ",", "shape", ",", "border_mode", ",", "value", ")", ":", "\n", "    ", "margin", "=", "np", ".", "zeros", "(", "4", ",", "np", ".", "uint32", ")", "\n", "shape", "=", "get_2dshape", "(", "shape", ")", "\n", "pad_height", "=", "shape", "[", "0", "]", "-", "img", ".", "shape", "[", "0", "]", "if", "shape", "[", "0", "]", "-", "img", ".", "shape", "[", "0", "]", ">", "0", "else", "0", "\n", "pad_width", "=", "shape", "[", "1", "]", "-", "img", ".", "shape", "[", "1", "]", "if", "shape", "[", "1", "]", "-", "img", ".", "shape", "[", "1", "]", ">", "0", "else", "0", "\n", "\n", "margin", "[", "0", "]", "=", "pad_height", "//", "2", "\n", "margin", "[", "1", "]", "=", "pad_height", "//", "2", "+", "pad_height", "%", "2", "\n", "margin", "[", "2", "]", "=", "pad_width", "//", "2", "\n", "margin", "[", "3", "]", "=", "pad_width", "//", "2", "+", "pad_width", "%", "2", "\n", "\n", "img", "=", "cv2", ".", "copyMakeBorder", "(", "img", ",", "margin", "[", "0", "]", ",", "margin", "[", "1", "]", ",", "margin", "[", "2", "]", ",", "margin", "[", "3", "]", ",", "\n", "border_mode", ",", "value", "=", "value", ")", "\n", "\n", "return", "img", ",", "margin", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_CSG.utils.img_utils.pad_image_size_to_multiples_of": [[80, 91], ["map", "img_utils.pad_image_to_shape"], "function", ["home.repos.pwc.inspect_result.NVlabs_CSG.utils.img_utils.pad_image_to_shape"], ["", "def", "pad_image_size_to_multiples_of", "(", "img", ",", "multiple", ",", "pad_value", ")", ":", "\n", "    ", "h", ",", "w", "=", "img", ".", "shape", "[", ":", "2", "]", "\n", "d", "=", "multiple", "\n", "\n", "def", "canonicalize", "(", "s", ")", ":", "\n", "        ", "v", "=", "s", "//", "d", "\n", "return", "(", "v", "+", "(", "v", "*", "d", "!=", "s", ")", ")", "*", "d", "\n", "\n", "", "th", ",", "tw", "=", "map", "(", "canonicalize", ",", "(", "h", ",", "w", ")", ")", "\n", "\n", "return", "pad_image_to_shape", "(", "img", ",", "(", "th", ",", "tw", ")", ",", "cv2", ".", "BORDER_CONSTANT", ",", "pad_value", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_CSG.utils.img_utils.resize_ensure_shortest_edge": [[93, 106], ["cv2.resize", "isinstance", "float", "max", "float", "max", "int", "int"], "function", ["None"], ["", "def", "resize_ensure_shortest_edge", "(", "img", ",", "edge_length", ",", "\n", "interpolation_mode", "=", "cv2", ".", "INTER_LINEAR", ")", ":", "\n", "    ", "assert", "isinstance", "(", "edge_length", ",", "int", ")", "and", "edge_length", ">", "0", ",", "edge_length", "\n", "h", ",", "w", "=", "img", ".", "shape", "[", ":", "2", "]", "\n", "if", "h", "<", "w", ":", "\n", "        ", "ratio", "=", "float", "(", "edge_length", ")", "/", "h", "\n", "th", ",", "tw", "=", "edge_length", ",", "max", "(", "1", ",", "int", "(", "ratio", "*", "w", ")", ")", "\n", "", "else", ":", "\n", "        ", "ratio", "=", "float", "(", "edge_length", ")", "/", "w", "\n", "th", ",", "tw", "=", "max", "(", "1", ",", "int", "(", "ratio", "*", "h", ")", ")", ",", "edge_length", "\n", "", "img", "=", "cv2", ".", "resize", "(", "img", ",", "(", "tw", ",", "th", ")", ",", "interpolation_mode", ")", "\n", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_CSG.utils.img_utils.random_scale": [[108, 117], ["random.uniform", "int", "int", "cv2.resize", "cv2.resize", "min", "max"], "function", ["None"], ["", "def", "random_scale", "(", "img", ",", "gt", ",", "scales", ")", ":", "\n", "# scale = random.choice(scales)", "\n", "    ", "scale", "=", "random", ".", "uniform", "(", "min", "(", "scales", ")", ",", "max", "(", "scales", ")", ")", "\n", "sh", "=", "int", "(", "img", ".", "shape", "[", "0", "]", "*", "scale", ")", "\n", "sw", "=", "int", "(", "img", ".", "shape", "[", "1", "]", "*", "scale", ")", "\n", "img", "=", "cv2", ".", "resize", "(", "img", ",", "(", "sw", ",", "sh", ")", ",", "interpolation", "=", "cv2", ".", "INTER_LINEAR", ")", "\n", "gt", "=", "cv2", ".", "resize", "(", "gt", ",", "(", "sw", ",", "sh", ")", ",", "interpolation", "=", "cv2", ".", "INTER_NEAREST", ")", "\n", "\n", "return", "img", ",", "gt", ",", "scale", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_CSG.utils.img_utils.random_scale_with_length": [[119, 127], ["random.choice", "cv2.resize", "cv2.resize"], "function", ["None"], ["", "def", "random_scale_with_length", "(", "img", ",", "gt", ",", "length", ")", ":", "\n", "    ", "size", "=", "random", ".", "choice", "(", "length", ")", "\n", "sh", "=", "size", "\n", "sw", "=", "size", "\n", "img", "=", "cv2", ".", "resize", "(", "img", ",", "(", "sw", ",", "sh", ")", ",", "interpolation", "=", "cv2", ".", "INTER_LINEAR", ")", "\n", "gt", "=", "cv2", ".", "resize", "(", "gt", ",", "(", "sw", ",", "sh", ")", ",", "interpolation", "=", "cv2", ".", "INTER_NEAREST", ")", "\n", "\n", "return", "img", ",", "gt", ",", "size", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_CSG.utils.img_utils.random_mirror": [[129, 135], ["random.random", "cv2.flip", "cv2.flip"], "function", ["None"], ["", "def", "random_mirror", "(", "img", ",", "gt", ")", ":", "\n", "    ", "if", "random", ".", "random", "(", ")", ">=", "0.5", ":", "\n", "        ", "img", "=", "cv2", ".", "flip", "(", "img", ",", "1", ")", "\n", "gt", "=", "cv2", ".", "flip", "(", "gt", ",", "1", ")", "\n", "\n", "", "return", "img", ",", "gt", ",", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_CSG.utils.img_utils.random_rotation": [[137, 145], ["cv2.getRotationMatrix2D", "cv2.warpAffine", "cv2.warpAffine", "random.random"], "function", ["None"], ["", "def", "random_rotation", "(", "img", ",", "gt", ")", ":", "\n", "    ", "angle", "=", "random", ".", "random", "(", ")", "*", "20", "-", "10", "\n", "h", ",", "w", "=", "img", ".", "shape", "[", ":", "2", "]", "\n", "rotation_matrix", "=", "cv2", ".", "getRotationMatrix2D", "(", "(", "w", "/", "2", ",", "h", "/", "2", ")", ",", "angle", ",", "1", ")", "\n", "img", "=", "cv2", ".", "warpAffine", "(", "img", ",", "rotation_matrix", ",", "(", "w", ",", "h", ")", ",", "flags", "=", "cv2", ".", "INTER_LINEAR", ")", "\n", "gt", "=", "cv2", ".", "warpAffine", "(", "gt", ",", "rotation_matrix", ",", "(", "w", ",", "h", ")", ",", "flags", "=", "cv2", ".", "INTER_NEAREST", ")", "\n", "\n", "return", "img", ",", "gt", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_CSG.utils.img_utils.random_gaussian_blur": [[147, 154], ["random.choice", "cv2.GaussianBlur"], "function", ["None"], ["", "def", "random_gaussian_blur", "(", "img", ")", ":", "\n", "    ", "gauss_size", "=", "random", ".", "choice", "(", "[", "1", ",", "3", ",", "5", ",", "7", "]", ")", "\n", "if", "gauss_size", ">", "1", ":", "\n", "# do the gaussian blur", "\n", "        ", "img", "=", "cv2", ".", "GaussianBlur", "(", "img", ",", "(", "gauss_size", ",", "gauss_size", ")", ",", "0", ")", "\n", "\n", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_CSG.utils.img_utils.center_crop": [[156, 161], ["None"], "function", ["None"], ["", "def", "center_crop", "(", "img", ",", "shape", ")", ":", "\n", "    ", "h", ",", "w", "=", "shape", "[", "0", "]", ",", "shape", "[", "1", "]", "\n", "y", "=", "(", "img", ".", "shape", "[", "0", "]", "-", "h", ")", "//", "2", "\n", "x", "=", "(", "img", ".", "shape", "[", "1", "]", "-", "w", ")", "//", "2", "\n", "return", "img", "[", "y", ":", "y", "+", "h", ",", "x", ":", "x", "+", "w", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_CSG.utils.img_utils.random_crop": [[163, 181], ["isinstance", "random.randint", "random.randint", "int", "int"], "function", ["None"], ["", "def", "random_crop", "(", "img", ",", "gt", ",", "size", ")", ":", "\n", "    ", "if", "isinstance", "(", "size", ",", "numbers", ".", "Number", ")", ":", "\n", "        ", "size", "=", "(", "int", "(", "size", ")", ",", "int", "(", "size", ")", ")", "\n", "\n", "", "h", ",", "w", "=", "img", ".", "shape", "[", ":", "2", "]", "\n", "crop_h", ",", "crop_w", "=", "size", "[", "0", "]", ",", "size", "[", "1", "]", "\n", "\n", "if", "h", ">", "crop_h", ":", "\n", "        ", "x", "=", "random", ".", "randint", "(", "0", ",", "h", "-", "crop_h", "+", "1", ")", "\n", "img", "=", "img", "[", "x", ":", "x", "+", "crop_h", ",", ":", ",", ":", "]", "\n", "gt", "=", "gt", "[", "x", ":", "x", "+", "crop_h", ",", ":", "]", "\n", "\n", "", "if", "w", ">", "crop_w", ":", "\n", "        ", "x", "=", "random", ".", "randint", "(", "0", ",", "w", "-", "crop_w", "+", "1", ")", "\n", "img", "=", "img", "[", ":", ",", "x", ":", "x", "+", "crop_w", ",", ":", "]", "\n", "gt", "=", "gt", "[", ":", ",", "x", ":", "x", "+", "crop_w", "]", "\n", "\n", "", "return", "img", ",", "gt", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_CSG.utils.img_utils.normalize": [[183, 190], ["img.astype"], "function", ["None"], ["", "def", "normalize", "(", "img", ",", "mean", ",", "std", ")", ":", "\n", "# pytorch pretrained model need the input range: 0-1", "\n", "    ", "img", "=", "img", ".", "astype", "(", "np", ".", "float32", ")", "/", "255.0", "\n", "img", "=", "img", "-", "mean", "\n", "img", "=", "img", "/", "std", "\n", "\n", "return", "img", "\n", "", ""]], "home.repos.pwc.inspect_result.NVlabs_CSG.utils.visualize.set_img_color": [[6, 15], ["numpy.array", "range", "cv2.addWeighted", "len", "numpy.where", "numpy.where"], "function", ["None"], ["def", "set_img_color", "(", "colors", ",", "background", ",", "img", ",", "gt", ",", "show255", "=", "False", ",", "weight_foreground", "=", "0.55", ")", ":", "\n", "    ", "origin", "=", "np", ".", "array", "(", "img", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "colors", ")", ")", ":", "\n", "        ", "if", "i", "!=", "background", ":", "\n", "            ", "img", "[", "np", ".", "where", "(", "gt", "==", "i", ")", "]", "=", "colors", "[", "i", "]", "\n", "", "", "if", "show255", ":", "\n", "        ", "img", "[", "np", ".", "where", "(", "gt", "==", "255", ")", "]", "=", "0", "\n", "", "cv2", ".", "addWeighted", "(", "img", ",", "weight_foreground", ",", "origin", ",", "1", "-", "weight_foreground", ",", "0", ",", "img", ")", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_CSG.utils.visualize.show_prediction": [[17, 22], ["numpy.array", "visualize.set_img_color", "numpy.array"], "function", ["home.repos.pwc.inspect_result.NVlabs_CSG.utils.visualize.set_img_color"], ["", "def", "show_prediction", "(", "colors", ",", "background", ",", "img", ",", "pred", ")", ":", "\n", "    ", "im", "=", "np", ".", "array", "(", "img", ",", "np", ".", "uint8", ")", "\n", "set_img_color", "(", "colors", ",", "background", ",", "im", ",", "pred", ",", "weight_foreground", "=", "1", ")", "\n", "final", "=", "np", ".", "array", "(", "im", ")", "\n", "return", "final", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_CSG.utils.visualize.show_img": [[24, 42], ["numpy.array", "numpy.array", "numpy.zeros", "numpy.array", "visualize.set_img_color", "numpy.column_stack", "numpy.column_stack", "numpy.array", "visualize.set_img_color", "numpy.column_stack", "numpy.column_stack"], "function", ["home.repos.pwc.inspect_result.NVlabs_CSG.utils.visualize.set_img_color", "home.repos.pwc.inspect_result.NVlabs_CSG.utils.visualize.set_img_color"], ["", "def", "show_img", "(", "colors", ",", "background", ",", "img", ",", "clean", ",", "gt", ",", "*", "pds", ")", ":", "\n", "    ", "im1", "=", "np", ".", "array", "(", "img", ",", "np", ".", "uint8", ")", "\n", "# set_img_color(colors, background, im1, clean)", "\n", "final", "=", "np", ".", "array", "(", "im1", ")", "\n", "# the pivot black bar", "\n", "pivot", "=", "np", ".", "zeros", "(", "(", "im1", ".", "shape", "[", "0", "]", ",", "15", ",", "3", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "for", "pd", "in", "pds", ":", "\n", "        ", "im", "=", "np", ".", "array", "(", "img", ",", "np", ".", "uint8", ")", "\n", "# pd[np.where(gt == 255)] = 255", "\n", "set_img_color", "(", "colors", ",", "background", ",", "im", ",", "pd", ")", "\n", "final", "=", "np", ".", "column_stack", "(", "(", "final", ",", "pivot", ")", ")", "\n", "final", "=", "np", ".", "column_stack", "(", "(", "final", ",", "im", ")", ")", "\n", "\n", "", "im", "=", "np", ".", "array", "(", "img", ",", "np", ".", "uint8", ")", "\n", "set_img_color", "(", "colors", ",", "background", ",", "im", ",", "gt", ",", "True", ")", "\n", "final", "=", "np", ".", "column_stack", "(", "(", "final", ",", "pivot", ")", ")", "\n", "final", "=", "np", ".", "column_stack", "(", "(", "final", ",", "im", ")", ")", "\n", "return", "final", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_CSG.utils.visualize.get_colors": [[44, 50], ["range", "colors.append", "numpy.random.random"], "function", ["None"], ["", "def", "get_colors", "(", "class_num", ")", ":", "\n", "    ", "colors", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "class_num", ")", ":", "\n", "        ", "colors", ".", "append", "(", "(", "np", ".", "random", ".", "random", "(", "(", "1", ",", "3", ")", ")", "*", "255", ")", ".", "tolist", "(", ")", "[", "0", "]", ")", "\n", "\n", "", "return", "colors", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_CSG.utils.visualize.get_ade_colors": [[52, 59], ["numpy.array().astype().tolist", "np.array().astype().tolist.insert", "scipy.loadmat", "numpy.array().astype", "numpy.array"], "function", ["None"], ["", "def", "get_ade_colors", "(", ")", ":", "\n", "    ", "colors", "=", "sio", ".", "loadmat", "(", "'./color150.mat'", ")", "[", "'colors'", "]", "\n", "colors", "=", "colors", "[", ":", ",", ":", ":", "-", "1", ",", "]", "\n", "colors", "=", "np", ".", "array", "(", "colors", ")", ".", "astype", "(", "int", ")", ".", "tolist", "(", ")", "\n", "colors", ".", "insert", "(", "0", ",", "[", "0", ",", "0", ",", "0", "]", ")", "\n", "\n", "return", "colors", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_CSG.utils.visualize.print_iou": [[61, 90], ["range", "numpy.nanmean", "numpy.nanmean", "lines.append", "lines.append", "print", "lines.append", "print"], "function", ["None"], ["", "def", "print_iou", "(", "iu", ",", "mean_pixel_acc", ",", "class_names", "=", "None", ",", "show_no_back", "=", "False", ",", "\n", "no_print", "=", "False", ")", ":", "\n", "    ", "n", "=", "iu", ".", "size", "\n", "lines", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "n", ")", ":", "\n", "        ", "if", "class_names", "is", "None", ":", "\n", "            ", "cls", "=", "'Class %d:'", "%", "(", "i", "+", "1", ")", "\n", "", "else", ":", "\n", "            ", "cls", "=", "'%d %s'", "%", "(", "i", "+", "1", ",", "class_names", "[", "i", "]", ")", "\n", "", "lines", ".", "append", "(", "'%-8s\\t%.3f%%'", "%", "(", "cls", ",", "iu", "[", "i", "]", "*", "100", ")", ")", "\n", "", "mean_IU", "=", "np", ".", "nanmean", "(", "iu", ")", "\n", "# mean_IU_no_back = np.nanmean(iu[1:])", "\n", "mean_IU_no_back", "=", "np", ".", "nanmean", "(", "iu", "[", ":", "-", "1", "]", ")", "\n", "if", "show_no_back", ":", "\n", "        ", "lines", ".", "append", "(", "\n", "'----------------------------     %-8s\\t%.3f%%\\t%-8s\\t%.3f%%\\t%-8s\\t%.3f%%'", "%", "(", "\n", "'mean_IU'", ",", "mean_IU", "*", "100", ",", "'mean_IU_no_back'", ",", "\n", "mean_IU_no_back", "*", "100", ",", "\n", "'mean_pixel_ACC'", ",", "mean_pixel_acc", "*", "100", ")", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "mean_pixel_acc", ")", "\n", "lines", ".", "append", "(", "\n", "'----------------------------     %-8s\\t%.3f%%\\t%-8s\\t%.3f%%'", "%", "(", "\n", "'mean_IU'", ",", "mean_IU", "*", "100", ",", "'mean_pixel_ACC'", ",", "\n", "mean_pixel_acc", "*", "100", ")", ")", "\n", "", "line", "=", "\"\\n\"", ".", "join", "(", "lines", ")", "\n", "if", "not", "no_print", ":", "\n", "        ", "print", "(", "line", ")", "\n", "", "return", "line", "\n", "", ""]], "home.repos.pwc.inspect_result.NVlabs_CSG.utils.pyt_utils.load_model": [[25, 63], ["time.time", "isinstance", "time.time", "model.load_state_dict", "set", "set", "time.time", "logger.info", "torch.load", "collections.OrderedDict", "torch.load.items", "torch.load.keys", "model.state_dict().keys", "len", "logger.warning", "len", "logger.warning", "torch.load.keys", "model.state_dict"], "function", ["home.repos.pwc.inspect_result.NVlabs_CSG.utils.utils.load"], ["def", "load_model", "(", "model", ",", "model_file", ",", "is_restore", "=", "False", ")", ":", "\n", "    ", "t_start", "=", "time", ".", "time", "(", ")", "\n", "if", "isinstance", "(", "model_file", ",", "str", ")", ":", "\n", "        ", "state_dict", "=", "torch", ".", "load", "(", "model_file", ")", "\n", "if", "'model'", "in", "state_dict", ".", "keys", "(", ")", ":", "\n", "            ", "state_dict", "=", "state_dict", "[", "'model'", "]", "\n", "", "", "else", ":", "\n", "        ", "state_dict", "=", "model_file", "\n", "", "t_ioend", "=", "time", ".", "time", "(", ")", "\n", "\n", "if", "is_restore", ":", "\n", "        ", "new_state_dict", "=", "OrderedDict", "(", ")", "\n", "for", "k", ",", "v", "in", "state_dict", ".", "items", "(", ")", ":", "\n", "            ", "name", "=", "'module.'", "+", "k", "\n", "new_state_dict", "[", "name", "]", "=", "v", "\n", "", "state_dict", "=", "new_state_dict", "\n", "\n", "", "model", ".", "load_state_dict", "(", "state_dict", ",", "strict", "=", "False", ")", "\n", "ckpt_keys", "=", "set", "(", "state_dict", ".", "keys", "(", ")", ")", "\n", "own_keys", "=", "set", "(", "model", ".", "state_dict", "(", ")", ".", "keys", "(", ")", ")", "\n", "missing_keys", "=", "own_keys", "-", "ckpt_keys", "\n", "unexpected_keys", "=", "ckpt_keys", "-", "own_keys", "\n", "\n", "if", "len", "(", "missing_keys", ")", ">", "0", ":", "\n", "        ", "logger", ".", "warning", "(", "'Missing key(s) in state_dict: {}'", ".", "format", "(", "\n", "', '", ".", "join", "(", "'{}'", ".", "format", "(", "k", ")", "for", "k", "in", "missing_keys", ")", ")", ")", "\n", "\n", "", "if", "len", "(", "unexpected_keys", ")", ">", "0", ":", "\n", "        ", "logger", ".", "warning", "(", "'Unexpected key(s) in state_dict: {}'", ".", "format", "(", "\n", "', '", ".", "join", "(", "'{}'", ".", "format", "(", "k", ")", "for", "k", "in", "unexpected_keys", ")", ")", ")", "\n", "\n", "", "del", "state_dict", "\n", "t_end", "=", "time", ".", "time", "(", ")", "\n", "logger", ".", "info", "(", "\n", "\"Load model, Time usage:\\n\\tIO: {}, initialize parameters: {}\"", ".", "format", "(", "\n", "t_ioend", "-", "t_start", ",", "t_end", "-", "t_ioend", ")", ")", "\n", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_CSG.utils.pyt_utils.parse_devices": [[65, 90], ["input_devices.endswith", "input_devices.split", "logger.info", "list", "range", "range", "int", "list.append", "torch.cuda.device_count", "int", "int", "torch.cuda.device_count", "list.append", "torch.cuda.device_count", "d.split", "d.split", "str"], "function", ["None"], ["", "def", "parse_devices", "(", "input_devices", ")", ":", "\n", "    ", "if", "input_devices", ".", "endswith", "(", "'*'", ")", ":", "\n", "        ", "devices", "=", "list", "(", "range", "(", "torch", ".", "cuda", ".", "device_count", "(", ")", ")", ")", "\n", "return", "devices", "\n", "\n", "", "devices", "=", "[", "]", "\n", "for", "d", "in", "input_devices", ".", "split", "(", "','", ")", ":", "\n", "        ", "if", "'-'", "in", "d", ":", "\n", "            ", "start_device", ",", "end_device", "=", "d", ".", "split", "(", "'-'", ")", "[", "0", "]", ",", "d", ".", "split", "(", "'-'", ")", "[", "1", "]", "\n", "assert", "start_device", "!=", "''", "\n", "assert", "end_device", "!=", "''", "\n", "start_device", ",", "end_device", "=", "int", "(", "start_device", ")", ",", "int", "(", "end_device", ")", "\n", "assert", "start_device", "<", "end_device", "\n", "assert", "end_device", "<", "torch", ".", "cuda", ".", "device_count", "(", ")", "\n", "for", "sd", "in", "range", "(", "start_device", ",", "end_device", "+", "1", ")", ":", "\n", "                ", "devices", ".", "append", "(", "sd", ")", "\n", "", "", "else", ":", "\n", "            ", "device", "=", "int", "(", "d", ")", "\n", "assert", "device", "<", "torch", ".", "cuda", ".", "device_count", "(", ")", "\n", "devices", ".", "append", "(", "device", ")", "\n", "\n", "", "", "logger", ".", "info", "(", "'using devices {}'", ".", "format", "(", "\n", "', '", ".", "join", "(", "[", "str", "(", "d", ")", "for", "d", "in", "devices", "]", ")", ")", ")", "\n", "\n", "return", "devices", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_CSG.utils.pyt_utils.extant_file": [[92, 101], ["os.path.exists", "argparse.ArgumentTypeError"], "function", ["None"], ["", "def", "extant_file", "(", "x", ")", ":", "\n", "    ", "\"\"\"\n    'Type' for argparse - checks that file exists but does not open.\n    \"\"\"", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "x", ")", ":", "\n", "# Argparse uses the ArgumentTypeError to give a rejection message like:", "\n", "# error: argument input: x does not exist", "\n", "        ", "raise", "argparse", ".", "ArgumentTypeError", "(", "\"{0} does not exist\"", ".", "format", "(", "x", ")", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_CSG.utils.pyt_utils.link_file": [[103, 107], ["os.system", "os.path.isdir", "os.path.isfile", "os.remove"], "function", ["None"], ["", "def", "link_file", "(", "src", ",", "target", ")", ":", "\n", "    ", "if", "os", ".", "path", ".", "isdir", "(", "target", ")", "or", "os", ".", "path", ".", "isfile", "(", "target", ")", ":", "\n", "        ", "os", ".", "remove", "(", "target", ")", "\n", "", "os", ".", "system", "(", "'ln -s {} {}'", ".", "format", "(", "src", ",", "target", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_CSG.utils.pyt_utils.ensure_dir": [[109, 112], ["os.path.isdir", "os.makedirs"], "function", ["None"], ["", "def", "ensure_dir", "(", "path", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "isdir", "(", "path", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_CSG.utils.pyt_utils._dbg_interactive": [[114, 117], ["embed"], "function", ["None"], ["", "", "def", "_dbg_interactive", "(", "var", ",", "value", ")", ":", "\n", "    ", "from", "IPython", "import", "embed", "\n", "embed", "(", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.NVlabs_CSG.datasets.BaseDataset.BaseDataset.__init__": [[15, 30], ["torch.Dataset.__init__", "print", "BaseDataset.BaseDataset._get_file_names", "print", "len"], "methods", ["home.repos.pwc.inspect_result.NVlabs_CSG.data.visda17.VisDA17.__init__", "home.repos.pwc.inspect_result.NVlabs_CSG.data.BaseDataset.BaseDataset._get_file_names"], ["    ", "def", "__init__", "(", "self", ",", "setting", ",", "split_name", ",", "preprocess", "=", "None", ",", "file_length", "=", "None", ")", ":", "\n", "        ", "super", "(", "BaseDataset", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_split_name", "=", "split_name", "\n", "self", ".", "_img_path", "=", "setting", "[", "'img_root'", "]", "\n", "self", ".", "_gt_path", "=", "setting", "[", "'gt_root'", "]", "\n", "self", ".", "_portion", "=", "setting", "[", "'portion'", "]", "if", "'portion'", "in", "setting", "else", "None", "\n", "self", ".", "_train_source", "=", "setting", "[", "'train_source'", "]", "\n", "self", ".", "_eval_source", "=", "setting", "[", "'eval_source'", "]", "\n", "self", ".", "_test_source", "=", "setting", "[", "'test_source'", "]", "if", "'test_source'", "in", "setting", "else", "setting", "[", "'eval_source'", "]", "\n", "self", ".", "_down_sampling", "=", "setting", "[", "'down_sampling'", "]", "\n", "print", "(", "\"using downsampling:\"", ",", "self", ".", "_down_sampling", ")", "\n", "self", ".", "_file_names", "=", "self", ".", "_get_file_names", "(", "split_name", ")", "\n", "print", "(", "\"Found %d images\"", "%", "len", "(", "self", ".", "_file_names", ")", ")", "\n", "self", ".", "_file_length", "=", "file_length", "\n", "self", ".", "preprocess", "=", "preprocess", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_CSG.datasets.BaseDataset.BaseDataset.__len__": [[31, 35], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "_file_length", "is", "not", "None", ":", "\n", "            ", "return", "self", ".", "_file_length", "\n", "", "return", "len", "(", "self", ".", "_file_names", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_CSG.datasets.BaseDataset.BaseDataset.__getitem__": [[36, 67], ["os.path.join", "os.path.join", "BaseDataset.BaseDataset._fetch_data", "dict", "[].split", "BaseDataset.BaseDataset.preprocess", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "dict.update", "BaseDataset.BaseDataset._construct_new_file_names", "extra_dict.items", "str", "len", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "names[].split", "numpy.ascontiguousarray", "numpy.ascontiguousarray", "numpy.ascontiguousarray", "extra_dict[].long", "extra_dict[].float"], "methods", ["home.repos.pwc.inspect_result.NVlabs_CSG.data.BaseDataset.BaseDataset._fetch_data", "home.repos.pwc.inspect_result.NVlabs_CSG.utils.utils.AvgrageMeter.update", "home.repos.pwc.inspect_result.NVlabs_CSG.data.BaseDataset.BaseDataset._construct_new_file_names"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "if", "self", ".", "_file_length", "is", "not", "None", ":", "\n", "            ", "names", "=", "self", ".", "_construct_new_file_names", "(", "self", ".", "_file_length", ")", "[", "index", "]", "\n", "", "else", ":", "\n", "            ", "names", "=", "self", ".", "_file_names", "[", "index", "]", "\n", "", "img_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "_img_path", ",", "names", "[", "0", "]", ")", "\n", "gt_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "_gt_path", ",", "names", "[", "1", "]", ")", "\n", "item_name", "=", "names", "[", "1", "]", ".", "split", "(", "\"/\"", ")", "[", "-", "1", "]", ".", "split", "(", "\".\"", ")", "[", "0", "]", "\n", "\n", "img", ",", "gt", "=", "self", ".", "_fetch_data", "(", "img_path", ",", "gt_path", ")", "\n", "img", "=", "img", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", "\n", "if", "self", ".", "preprocess", "is", "not", "None", ":", "\n", "            ", "img", ",", "gt", ",", "extra_dict", "=", "self", ".", "preprocess", "(", "img", ",", "gt", ")", "\n", "\n", "", "if", "self", ".", "_split_name", "is", "'train'", ":", "\n", "            ", "img", "=", "torch", ".", "from_numpy", "(", "np", ".", "ascontiguousarray", "(", "img", ")", ")", ".", "float", "(", ")", "\n", "gt", "=", "torch", ".", "from_numpy", "(", "np", ".", "ascontiguousarray", "(", "gt", ")", ")", ".", "long", "(", ")", "\n", "if", "self", ".", "preprocess", "is", "not", "None", "and", "extra_dict", "is", "not", "None", ":", "\n", "                ", "for", "k", ",", "v", "in", "extra_dict", ".", "items", "(", ")", ":", "\n", "                    ", "extra_dict", "[", "k", "]", "=", "torch", ".", "from_numpy", "(", "np", ".", "ascontiguousarray", "(", "v", ")", ")", "\n", "if", "'label'", "in", "k", ":", "\n", "                        ", "extra_dict", "[", "k", "]", "=", "extra_dict", "[", "k", "]", ".", "long", "(", ")", "\n", "", "if", "'img'", "in", "k", ":", "\n", "                        ", "extra_dict", "[", "k", "]", "=", "extra_dict", "[", "k", "]", ".", "float", "(", ")", "\n", "\n", "", "", "", "", "output_dict", "=", "dict", "(", "data", "=", "img", ",", "label", "=", "gt", ",", "fn", "=", "str", "(", "item_name", ")", ",", "\n", "n", "=", "len", "(", "self", ".", "_file_names", ")", ")", "\n", "if", "self", ".", "preprocess", "is", "not", "None", "and", "extra_dict", "is", "not", "None", ":", "\n", "            ", "output_dict", ".", "update", "(", "**", "extra_dict", ")", "\n", "\n", "", "return", "output_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_CSG.datasets.BaseDataset.BaseDataset._fetch_data": [[68, 73], ["BaseDataset.BaseDataset._open_image", "BaseDataset.BaseDataset._open_image"], "methods", ["home.repos.pwc.inspect_result.NVlabs_CSG.data.BaseDataset.BaseDataset._open_image", "home.repos.pwc.inspect_result.NVlabs_CSG.data.BaseDataset.BaseDataset._open_image"], ["", "def", "_fetch_data", "(", "self", ",", "img_path", ",", "gt_path", ",", "dtype", "=", "None", ")", ":", "\n", "        ", "img", "=", "self", ".", "_open_image", "(", "img_path", ",", "down_sampling", "=", "self", ".", "_down_sampling", ")", "\n", "gt", "=", "self", ".", "_open_image", "(", "gt_path", ",", "cv2", ".", "IMREAD_GRAYSCALE", ",", "dtype", "=", "dtype", ",", "down_sampling", "=", "self", ".", "_down_sampling", ")", "\n", "\n", "return", "img", ",", "gt", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_CSG.datasets.BaseDataset.BaseDataset._get_file_names": [[74, 100], ["open", "f.readlines", "random.shuffle", "len", "BaseDataset.BaseDataset._process_item_names", "file_names.append", "int", "numpy.floor", "int", "numpy.floor"], "methods", ["home.repos.pwc.inspect_result.NVlabs_CSG.data.BaseDataset.BaseDataset._process_item_names"], ["", "def", "_get_file_names", "(", "self", ",", "split_name", ")", ":", "\n", "        ", "assert", "split_name", "in", "[", "'train'", ",", "'val'", ",", "'test'", "]", "\n", "source", "=", "self", ".", "_train_source", "\n", "if", "split_name", "==", "\"val\"", ":", "\n", "            ", "source", "=", "self", ".", "_eval_source", "\n", "", "elif", "split_name", "==", "'test'", ":", "\n", "            ", "source", "=", "self", ".", "_test_source", "\n", "\n", "", "file_names", "=", "[", "]", "\n", "with", "open", "(", "source", ")", "as", "f", ":", "\n", "            ", "files", "=", "f", ".", "readlines", "(", ")", "\n", "", "if", "self", ".", "_portion", "is", "not", "None", ":", "\n", "            ", "shuffle", "(", "files", ")", "\n", "num_files", "=", "len", "(", "files", ")", "\n", "if", "self", ".", "_portion", ">", "0", ":", "\n", "                ", "split", "=", "int", "(", "np", ".", "floor", "(", "self", ".", "_portion", "*", "num_files", ")", ")", "\n", "files", "=", "files", "[", ":", "split", "]", "\n", "", "elif", "self", ".", "_portion", "<", "0", ":", "\n", "                ", "split", "=", "int", "(", "np", ".", "floor", "(", "(", "1", "+", "self", ".", "_portion", ")", "*", "num_files", ")", ")", "\n", "files", "=", "files", "[", "split", ":", "]", "\n", "\n", "", "", "for", "item", "in", "files", ":", "\n", "            ", "img_name", ",", "gt_name", "=", "self", ".", "_process_item_names", "(", "item", ")", "\n", "file_names", ".", "append", "(", "[", "img_name", ",", "gt_name", "]", ")", "\n", "\n", "", "return", "file_names", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_CSG.datasets.BaseDataset.BaseDataset._construct_new_file_names": [[101, 112], ["isinstance", "len", "torch.randperm().tolist", "torch.randperm().tolist", "torch.randperm().tolist", "torch.randperm().tolist", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm"], "methods", ["None"], ["", "def", "_construct_new_file_names", "(", "self", ",", "length", ")", ":", "\n", "        ", "assert", "isinstance", "(", "length", ",", "int", ")", "\n", "files_len", "=", "len", "(", "self", ".", "_file_names", ")", "\n", "new_file_names", "=", "self", ".", "_file_names", "*", "(", "length", "//", "files_len", ")", "\n", "\n", "rand_indices", "=", "torch", ".", "randperm", "(", "files_len", ")", ".", "tolist", "(", ")", "\n", "new_indices", "=", "rand_indices", "[", ":", "length", "%", "files_len", "]", "\n", "\n", "new_file_names", "+=", "[", "self", ".", "_file_names", "[", "i", "]", "for", "i", "in", "new_indices", "]", "\n", "\n", "return", "new_file_names", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_CSG.datasets.BaseDataset.BaseDataset._process_item_names": [[113, 122], ["item.split.split.strip", "item.split.split.split"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_process_item_names", "(", "item", ")", ":", "\n", "        ", "item", "=", "item", ".", "strip", "(", ")", "\n", "# item = item.split('\\t')", "\n", "item", "=", "item", ".", "split", "(", "' '", ")", "\n", "img_name", "=", "item", "[", "0", "]", "\n", "gt_name", "=", "item", "[", "1", "]", "\n", "\n", "return", "img_name", ",", "gt_name", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_CSG.datasets.BaseDataset.BaseDataset.get_length": [[123, 125], ["BaseDataset.BaseDataset.__len__"], "methods", ["home.repos.pwc.inspect_result.NVlabs_CSG.data.visda17.VisDA17.__len__"], ["", "def", "get_length", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__len__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_CSG.datasets.BaseDataset.BaseDataset._open_image": [[126, 148], ["numpy.array", "isinstance", "cv2.imread", "len", "cv2.resize", "cv2.resize", "len", "cv2.resize", "cv2.resize", "isinstance", "isinstance", "len"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_open_image", "(", "filepath", ",", "mode", "=", "cv2", ".", "IMREAD_COLOR", ",", "dtype", "=", "None", ",", "down_sampling", "=", "1", ")", ":", "\n", "# cv2: B G R", "\n", "# h w c", "\n", "        ", "img", "=", "np", ".", "array", "(", "cv2", ".", "imread", "(", "filepath", ",", "mode", ")", ",", "dtype", "=", "dtype", ")", "\n", "\n", "if", "isinstance", "(", "down_sampling", ",", "int", ")", ":", "\n", "            ", "H", ",", "W", "=", "img", ".", "shape", "[", ":", "2", "]", "\n", "if", "len", "(", "img", ".", "shape", ")", "==", "3", ":", "\n", "                ", "img", "=", "cv2", ".", "resize", "(", "img", ",", "(", "W", "//", "down_sampling", ",", "H", "//", "down_sampling", ")", ",", "interpolation", "=", "cv2", ".", "INTER_LINEAR", ")", "\n", "", "else", ":", "\n", "                ", "img", "=", "cv2", ".", "resize", "(", "img", ",", "(", "W", "//", "down_sampling", ",", "H", "//", "down_sampling", ")", ",", "interpolation", "=", "cv2", ".", "INTER_NEAREST", ")", "\n", "", "assert", "img", ".", "shape", "[", "0", "]", "==", "H", "//", "down_sampling", "and", "img", ".", "shape", "[", "1", "]", "==", "W", "//", "down_sampling", "\n", "", "else", ":", "\n", "            ", "assert", "(", "isinstance", "(", "down_sampling", ",", "tuple", ")", "or", "isinstance", "(", "down_sampling", ",", "list", ")", ")", "and", "len", "(", "down_sampling", ")", "==", "2", "\n", "if", "len", "(", "img", ".", "shape", ")", "==", "3", ":", "\n", "                ", "img", "=", "cv2", ".", "resize", "(", "img", ",", "(", "down_sampling", "[", "1", "]", ",", "down_sampling", "[", "0", "]", ")", ",", "interpolation", "=", "cv2", ".", "INTER_LINEAR", ")", "\n", "", "else", ":", "\n", "                ", "img", "=", "cv2", ".", "resize", "(", "img", ",", "(", "down_sampling", "[", "1", "]", ",", "down_sampling", "[", "0", "]", ")", ",", "interpolation", "=", "cv2", ".", "INTER_NEAREST", ")", "\n", "", "assert", "img", ".", "shape", "[", "0", "]", "==", "down_sampling", "[", "0", "]", "and", "img", ".", "shape", "[", "1", "]", "==", "down_sampling", "[", "1", "]", "\n", "\n", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_CSG.datasets.BaseDataset.BaseDataset.get_class_colors": [[149, 152], ["None"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "get_class_colors", "(", "*", "args", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_CSG.datasets.BaseDataset.BaseDataset.get_class_names": [[153, 156], ["None"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "get_class_names", "(", "*", "args", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_CSG.cityscapes.cityscapes.Cityscapes.get_class_colors": [[13, 21], ["None"], "methods", ["None"], ["@", "classmethod", "\n", "def", "get_class_colors", "(", "*", "args", ")", ":", "\n", "        ", "return", "[", "[", "128", ",", "64", ",", "128", "]", ",", "[", "244", ",", "35", ",", "232", "]", ",", "[", "70", ",", "70", ",", "70", "]", ",", "\n", "[", "102", ",", "102", ",", "156", "]", ",", "[", "190", ",", "153", ",", "153", "]", ",", "[", "153", ",", "153", ",", "153", "]", ",", "\n", "[", "250", ",", "170", ",", "30", "]", ",", "[", "220", ",", "220", ",", "0", "]", ",", "[", "107", ",", "142", ",", "35", "]", ",", "\n", "[", "152", ",", "251", ",", "152", "]", ",", "[", "70", ",", "130", ",", "180", "]", ",", "[", "220", ",", "20", ",", "60", "]", ",", "[", "255", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "142", "]", ",", "[", "0", ",", "0", ",", "70", "]", ",", "[", "0", ",", "60", ",", "100", "]", ",", "[", "0", ",", "80", ",", "100", "]", ",", "\n", "[", "0", ",", "0", ",", "230", "]", ",", "[", "119", ",", "11", ",", "32", "]", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_CSG.cityscapes.cityscapes.Cityscapes.get_class_names": [[22, 31], ["None"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "get_class_names", "(", "*", "args", ")", ":", "\n", "# class counting(gtFine)", "\n", "# 2953 2811 2934  970 1296 2949 1658 2808 2891 1654 2686 2343 1023 2832", "\n", "# 359  274  142  513 1646", "\n", "        ", "return", "[", "'road'", ",", "'sidewalk'", ",", "'building'", ",", "'wall'", ",", "'fence'", ",", "'pole'", ",", "\n", "'traffic light'", ",", "'traffic sign'", ",", "\n", "'vegetation'", ",", "'terrain'", ",", "'sky'", ",", "'person'", ",", "'rider'", ",", "'car'", ",", "\n", "'truck'", ",", "'bus'", ",", "'train'", ",", "'motorcycle'", ",", "'bicycle'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_CSG.cityscapes.cityscapes.Cityscapes.transform_label": [[32, 46], ["numpy.zeros", "numpy.unique", "print", "[].split", "numpy.unique", "numpy.unique", "numpy.array", "numpy.array", "numpy.where", "name.split"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "transform_label", "(", "cls", ",", "pred", ",", "name", ")", ":", "\n", "        ", "label", "=", "np", ".", "zeros", "(", "pred", ".", "shape", ")", "\n", "ids", "=", "np", ".", "unique", "(", "pred", ")", "\n", "for", "id", "in", "ids", ":", "\n", "            ", "label", "[", "np", ".", "where", "(", "pred", "==", "id", ")", "]", "=", "cls", ".", "trans_labels", "[", "id", "]", "\n", "\n", "", "new_name", "=", "(", "name", ".", "split", "(", "'.'", ")", "[", "0", "]", ")", ".", "split", "(", "'_'", ")", "[", ":", "-", "1", "]", "\n", "new_name", "=", "'_'", ".", "join", "(", "new_name", ")", "+", "'.png'", "\n", "\n", "print", "(", "'Trans'", ",", "name", ",", "'to'", ",", "new_name", ",", "'    '", ",", "\n", "np", ".", "unique", "(", "np", ".", "array", "(", "pred", ",", "np", ".", "uint8", ")", ")", ",", "' ---------> '", ",", "\n", "np", ".", "unique", "(", "np", ".", "array", "(", "label", ",", "np", ".", "uint8", ")", ")", ")", "\n", "return", "label", ",", "new_name", "\n", "", "", ""]], "home.repos.pwc.inspect_result.NVlabs_CSG.seg_opr.metric.hist_info": [[10, 19], ["numpy.sum", "numpy.sum", "str", "numpy.bincount().reshape", "str", "numpy.bincount", "pred[].astype", "gt[].astype"], "function", ["None"], ["def", "hist_info", "(", "n_cl", ",", "pred", ",", "gt", ")", ":", "\n", "    ", "assert", "(", "pred", ".", "shape", "==", "gt", ".", "shape", ")", ",", "\"pred: \"", "+", "str", "(", "pred", ".", "shape", ")", "+", "\" v.s. gt: \"", "+", "str", "(", "gt", ".", "shape", ")", "\n", "k", "=", "(", "gt", ">=", "0", ")", "&", "(", "gt", "<", "n_cl", ")", "\n", "labeled", "=", "np", ".", "sum", "(", "k", ")", "\n", "correct", "=", "np", ".", "sum", "(", "(", "pred", "[", "k", "]", "==", "gt", "[", "k", "]", ")", ")", "\n", "\n", "return", "np", ".", "bincount", "(", "n_cl", "*", "gt", "[", "k", "]", ".", "astype", "(", "int", ")", "+", "pred", "[", "k", "]", ".", "astype", "(", "int", ")", ",", "\n", "minlength", "=", "n_cl", "**", "2", ")", ".", "reshape", "(", "n_cl", ",", "\n", "n_cl", ")", ",", "labeled", ",", "correct", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_CSG.seg_opr.metric.compute_score": [[21, 28], ["numpy.nanmean", "numpy.nanmean", "numpy.diag", "numpy.diag", "hist.sum", "hist.sum"], "function", ["None"], ["", "def", "compute_score", "(", "hist", ",", "correct", ",", "labeled", ")", ":", "\n", "    ", "iu", "=", "np", ".", "diag", "(", "hist", ")", "/", "(", "hist", ".", "sum", "(", "1", ")", "+", "hist", ".", "sum", "(", "0", ")", "-", "np", ".", "diag", "(", "hist", ")", ")", "\n", "mean_IU", "=", "np", ".", "nanmean", "(", "iu", ")", "\n", "mean_IU_no_back", "=", "np", ".", "nanmean", "(", "iu", "[", "1", ":", "]", ")", "\n", "mean_pixel_acc", "=", "correct", "/", "labeled", "\n", "\n", "return", "iu", ",", "mean_IU", ",", "mean_IU_no_back", ",", "mean_pixel_acc", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_CSG.seg_opr.metric.meanIoU": [[31, 37], ["numpy.nanmean", "numpy.nanmean", "numpy.sum", "numpy.sum"], "function", ["None"], ["", "def", "meanIoU", "(", "area_intersection", ",", "area_union", ")", ":", "\n", "    ", "iou", "=", "1.0", "*", "np", ".", "sum", "(", "area_intersection", ",", "axis", "=", "1", ")", "/", "np", ".", "sum", "(", "area_union", ",", "axis", "=", "1", ")", "\n", "meaniou", "=", "np", ".", "nanmean", "(", "iou", ")", "\n", "meaniou_no_back", "=", "np", ".", "nanmean", "(", "iou", "[", "1", ":", "]", ")", "\n", "\n", "return", "iou", ",", "meaniou", ",", "meaniou_no_back", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_CSG.seg_opr.metric.intersectionAndUnion": [[39, 64], ["numpy.asarray().copy", "numpy.asarray().copy", "numpy.histogram", "numpy.histogram", "numpy.histogram", "numpy.asarray", "numpy.asarray"], "function", ["None"], ["", "def", "intersectionAndUnion", "(", "imPred", ",", "imLab", ",", "numClass", ")", ":", "\n", "# Remove classes from unlabeled pixels in gt image.", "\n", "# We should not penalize detections in unlabeled portions of the image.", "\n", "    ", "imPred", "=", "np", ".", "asarray", "(", "imPred", ")", ".", "copy", "(", ")", "\n", "imLab", "=", "np", ".", "asarray", "(", "imLab", ")", ".", "copy", "(", ")", "\n", "\n", "imPred", "+=", "1", "\n", "imLab", "+=", "1", "\n", "# Remove classes from unlabeled pixels in gt image.", "\n", "# We should not penalize detections in unlabeled portions of the image.", "\n", "imPred", "=", "imPred", "*", "(", "imLab", ">", "0", ")", "\n", "\n", "# imPred = imPred * (imLab >= 0)", "\n", "\n", "# Compute area intersection:", "\n", "intersection", "=", "imPred", "*", "(", "imPred", "==", "imLab", ")", "\n", "(", "area_intersection", ",", "_", ")", "=", "np", ".", "histogram", "(", "intersection", ",", "bins", "=", "numClass", ",", "\n", "range", "=", "(", "1", ",", "numClass", ")", ")", "\n", "\n", "# Compute area union:", "\n", "(", "area_pred", ",", "_", ")", "=", "np", ".", "histogram", "(", "imPred", ",", "bins", "=", "numClass", ",", "range", "=", "(", "1", ",", "numClass", ")", ")", "\n", "(", "area_lab", ",", "_", ")", "=", "np", ".", "histogram", "(", "imLab", ",", "bins", "=", "numClass", ",", "range", "=", "(", "1", ",", "numClass", ")", ")", "\n", "area_union", "=", "area_pred", "+", "area_lab", "-", "area_intersection", "\n", "\n", "return", "area_intersection", ",", "area_union", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_CSG.seg_opr.metric.mean_pixel_accuracy": [[66, 71], ["numpy.sum", "numpy.spacing", "numpy.sum"], "function", ["None"], ["", "def", "mean_pixel_accuracy", "(", "pixel_correct", ",", "pixel_labeled", ")", ":", "\n", "    ", "mean_pixel_accuracy", "=", "1.0", "*", "np", ".", "sum", "(", "pixel_correct", ")", "/", "(", "\n", "np", ".", "spacing", "(", "1", ")", "+", "np", ".", "sum", "(", "pixel_labeled", ")", ")", "\n", "\n", "return", "mean_pixel_accuracy", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_CSG.seg_opr.metric.pixelAccuracy": [[73, 81], ["numpy.sum", "numpy.sum"], "function", ["None"], ["", "def", "pixelAccuracy", "(", "imPred", ",", "imLab", ")", ":", "\n", "# Remove classes from unlabeled pixels in gt image.", "\n", "# We should not penalize detections in unlabeled portions of the image.", "\n", "    ", "pixel_labeled", "=", "np", ".", "sum", "(", "imLab", ">=", "0", ")", "\n", "pixel_correct", "=", "np", ".", "sum", "(", "(", "imPred", "==", "imLab", ")", "*", "(", "imLab", ">=", "0", ")", ")", "\n", "pixel_accuracy", "=", "1.0", "*", "pixel_correct", "/", "pixel_labeled", "\n", "\n", "return", "pixel_accuracy", ",", "pixel_correct", ",", "pixel_labeled", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_CSG.seg_opr.metric.accuracy": [[83, 89], ["valid.sum", "float"], "function", ["None"], ["", "def", "accuracy", "(", "preds", ",", "label", ")", ":", "\n", "    ", "valid", "=", "(", "label", ">=", "0", ")", "\n", "acc_sum", "=", "(", "valid", "*", "(", "preds", "==", "label", ")", ")", ".", "sum", "(", ")", "\n", "valid_sum", "=", "valid", ".", "sum", "(", ")", "\n", "acc", "=", "float", "(", "acc_sum", ")", "/", "(", "valid_sum", "+", "1e-10", ")", "\n", "return", "acc", ",", "valid_sum", "\n", "", ""]], "home.repos.pwc.inspect_result.NVlabs_CSG.engine.logger.LogFormatter.format": [[18, 43], ["logger.LogFormatter.__set_fmt", "logging.Formatter.format", "logger.LogFormatter.__set_fmt", "logging.Formatter.format", "logger.LogFormatter._color_date", "mcl"], "methods", ["home.repos.pwc.inspect_result.NVlabs_CSG.engine.logger.LogFormatter.format", "home.repos.pwc.inspect_result.NVlabs_CSG.engine.logger.LogFormatter.format", "home.repos.pwc.inspect_result.NVlabs_CSG.engine.logger.LogFormatter._color_date"], ["\n", "", "def", "prepare_seed", "(", "rand_seed", ")", ":", "\n", "    ", "random", ".", "seed", "(", "rand_seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "rand_seed", ")", "\n", "torch", ".", "manual_seed", "(", "rand_seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "rand_seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "rand_seed", ")", "\n", "\n", "\n", "", "def", "prepare_logger", "(", "xargs", ")", ":", "\n", "    ", "args", "=", "copy", ".", "deepcopy", "(", "xargs", ")", "\n", "logger", "=", "Logger", "(", "args", ".", "save_dir", ",", "args", ".", "rand_seed", ")", "\n", "logger", ".", "log", "(", "'Main Function with logger : {:}'", ".", "format", "(", "logger", ")", ")", "\n", "logger", ".", "log", "(", "'Arguments : -------------------------------'", ")", "\n", "for", "name", ",", "value", "in", "args", ".", "_get_kwargs", "(", ")", ":", "\n", "        ", "logger", ".", "log", "(", "'{:16} : {:}'", ".", "format", "(", "name", ",", "value", ")", ")", "\n", "", "logger", ".", "log", "(", "\"Python  Version  : {:}\"", ".", "format", "(", "sys", ".", "version", ".", "replace", "(", "'\\n'", ",", "' '", ")", ")", ")", "\n", "logger", ".", "log", "(", "\"Pillow  Version  : {:}\"", ".", "format", "(", "PIL", ".", "__version__", ")", ")", "\n", "logger", ".", "log", "(", "\"PyTorch Version  : {:}\"", ".", "format", "(", "torch", ".", "__version__", ")", ")", "\n", "logger", ".", "log", "(", "\"cuDNN   Version  : {:}\"", ".", "format", "(", "torch", ".", "backends", ".", "cudnn", ".", "version", "(", ")", ")", ")", "\n", "logger", ".", "log", "(", "\"CUDA available   : {:}\"", ".", "format", "(", "torch", ".", "cuda", ".", "is_available", "(", ")", ")", ")", "\n", "logger", ".", "log", "(", "\"CUDA GPU numbers : {:}\"", ".", "format", "(", "torch", ".", "cuda", ".", "device_count", "(", ")", ")", ")", "\n", "logger", ".", "log", "(", "\"CUDA_VISIBLE_DEVICES : {:}\"", ".", "format", "(", "os", ".", "environ", "[", "'CUDA_VISIBLE_DEVICES'", "]", "if", "'CUDA_VISIBLE_DEVICES'", "in", "os", ".", "environ", "else", "'None'", ")", ")", "\n", "return", "logger", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_CSG.engine.logger.LogFormatter._color_dbg": [[51, 54], ["None"], "methods", ["None"], ["        ", "print", "(", "string", ")", "\n", "\n", "", "def", "close", "(", "self", ")", ":", "\n", "        ", "print", "(", "'-'", "*", "30", "+", "' close printer '", "+", "'-'", "*", "30", ")", "\n"]], "home.repos.pwc.inspect_result.NVlabs_CSG.engine.logger.LogFormatter._color_warn": [[55, 58], ["None"], "methods", ["None"], ["\n", "\n", "", "", "class", "Logger", "(", "object", ")", ":", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_CSG.engine.logger.LogFormatter._color_err": [[59, 62], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "log_dir", ",", "seed", ",", "create_model_dir", "=", "True", ",", "use_tf", "=", "False", ")", ":", "\n", "        ", "\"\"\"Create a summary writer logging to log_dir.\"\"\"", "\n", "self", ".", "seed", "=", "int", "(", "seed", ")", "\n", "self", ".", "log_dir", "=", "Path", "(", "log_dir", ")", "\n"]], "home.repos.pwc.inspect_result.NVlabs_CSG.engine.logger.LogFormatter._color_omitted": [[63, 66], ["None"], "methods", ["None"], ["self", ".", "model_dir", "=", "Path", "(", "log_dir", ")", "/", "'model'", "\n", "self", ".", "log_dir", ".", "mkdir", "(", "parents", "=", "True", ",", "exist_ok", "=", "True", ")", "\n", "\n", "self", ".", "use_tf", "=", "bool", "(", "use_tf", ")", "\n"]], "home.repos.pwc.inspect_result.NVlabs_CSG.engine.logger.LogFormatter._color_normal": [[67, 70], ["None"], "methods", ["None"], ["self", ".", "tensorboard_dir", "=", "self", ".", "log_dir", "\n", "self", ".", "logger_path", "=", "self", ".", "log_dir", "/", "'seed-{:}.log'", ".", "format", "(", "self", ".", "seed", ")", "\n", "self", ".", "logger_file", "=", "open", "(", "self", ".", "logger_path", ",", "'w'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_CSG.engine.logger.LogFormatter._color_date": [[71, 74], ["None"], "methods", ["None"], ["self", ".", "tensorboard_dir", ".", "mkdir", "(", "mode", "=", "0o775", ",", "parents", "=", "True", ",", "exist_ok", "=", "True", ")", "\n", "self", ".", "writer", "=", "SummaryWriter", "(", "str", "(", "self", ".", "tensorboard_dir", ")", ")", "\n", "\n", "scripts_to_save", "=", "glob", ".", "glob", "(", "'*.py'", ")", "+", "glob", ".", "glob", "(", "'*.sh'", ")", "\n"]], "home.repos.pwc.inspect_result.NVlabs_CSG.engine.logger.get_logger": [[76, 94], ["logging.getLogger", "logging.getLogger.setLevel", "logging.StreamHandler", "logging.StreamHandler.setFormatter", "logging.StreamHandler.setLevel", "logging.getLogger.addHandler", "logging.FileHandler", "logging.FileHandler.setLevel", "logging.FileHandler.setFormatter", "logging.getLogger.addHandler", "formatter", "os.path.isdir", "os.makedirs"], "function", ["None"], ["for", "script", "in", "scripts_to_save", ":", "\n", "            ", "dst_file", "=", "os", ".", "path", ".", "join", "(", "log_dir", ",", "'scripts'", ",", "os", ".", "path", ".", "basename", "(", "script", ")", ")", "\n", "shutil", ".", "copyfile", "(", "script", ",", "dst_file", ")", "\n", "", "shutil", ".", "make_archive", "(", "os", ".", "path", ".", "join", "(", "log_dir", ",", "\"scripts\"", ")", ",", "'zip'", ",", "log_dir", ",", "\"scripts\"", ")", "\n", "shutil", ".", "rmtree", "(", "os", ".", "path", ".", "join", "(", "log_dir", ",", "'scripts'", ")", ")", "\n", "\n", "", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "(", "'{name}(dir={log_dir}, use-tf={use_tf}, writer={writer})'", ".", "format", "(", "name", "=", "self", ".", "__class__", ".", "__name__", ",", "**", "self", ".", "__dict__", ")", ")", "\n", "\n", "", "def", "path", "(", "self", ",", "mode", ")", ":", "\n", "        ", "valids", "=", "(", "'model'", ",", "'best'", ",", "'info'", ",", "'log'", ")", "\n", "if", "mode", "==", "'model'", ":", "return", "self", ".", "model_dir", "/", "'seed-{:}-basic.pth'", ".", "format", "(", "self", ".", "seed", ")", "\n", "elif", "mode", "==", "'best'", ":", "return", "self", ".", "model_dir", "/", "'seed-{:}-best.pth'", ".", "format", "(", "self", ".", "seed", ")", "\n", "elif", "mode", "==", "'info'", ":", "return", "self", ".", "log_dir", "/", "'seed-{:}-last-info.pth'", ".", "format", "(", "self", ".", "seed", ")", "\n", "elif", "mode", "==", "'log'", ":", "return", "self", ".", "log_dir", "\n", "else", ":", "raise", "TypeError", "(", "'Unknow mode = {:}, valid modes = {:}'", ".", "format", "(", "mode", ",", "valids", ")", ")", "\n", "\n", "", "def", "extract_log", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "logger_file", "\n"]], "home.repos.pwc.inspect_result.NVlabs_CSG.engine.tester.Tester.__init__": [[21, 48], ["tester.Tester.dataset.get_length", "torch.get_context", "torch.get_context", "tester.Tester.context.Queue", "type", "tools.utils.pyt_utils.ensure_dir"], "methods", ["home.repos.pwc.inspect_result.NVlabs_CSG.data.BaseDataset.BaseDataset.get_length", "home.repos.pwc.inspect_result.NVlabs_CSG.utils.pyt_utils.ensure_dir"], ["    ", "def", "__init__", "(", "self", ",", "dataset", ",", "class_num", ",", "image_mean", ",", "image_std", ",", "network", ",", "\n", "multi_scales", ",", "is_flip", ",", "devices", "=", "0", ",", "out_idx", "=", "0", ",", "threds", "=", "3", ",", "config", "=", "None", ",", "logger", "=", "None", ",", "\n", "verbose", "=", "False", ",", "save_path", "=", "None", ",", "show_image", "=", "False", ")", ":", "\n", "        ", "self", ".", "dataset", "=", "dataset", "\n", "self", ".", "ndata", "=", "self", ".", "dataset", ".", "get_length", "(", ")", "\n", "self", ".", "class_num", "=", "class_num", "\n", "self", ".", "image_mean", "=", "image_mean", "\n", "self", ".", "image_std", "=", "image_std", "\n", "self", ".", "multi_scales", "=", "multi_scales", "\n", "self", ".", "is_flip", "=", "is_flip", "\n", "self", ".", "network", "=", "network", "\n", "self", ".", "devices", "=", "devices", "\n", "if", "type", "(", "self", ".", "devices", ")", "==", "int", ":", "self", ".", "devices", "=", "[", "self", ".", "devices", "]", "\n", "self", ".", "out_idx", "=", "out_idx", "\n", "self", ".", "threds", "=", "threds", "\n", "self", ".", "config", "=", "config", "\n", "self", ".", "logger", "=", "logger", "\n", "\n", "self", ".", "context", "=", "mp", ".", "get_context", "(", "'spawn'", ")", "\n", "self", ".", "val_func", "=", "None", "\n", "self", ".", "results_queue", "=", "self", ".", "context", ".", "Queue", "(", "self", ".", "ndata", ")", "\n", "\n", "self", ".", "verbose", "=", "verbose", "\n", "self", ".", "save_path", "=", "save_path", "\n", "if", "save_path", "is", "not", "None", ":", "\n", "            ", "ensure_dir", "(", "save_path", ")", "\n", "", "self", ".", "show_image", "=", "show_image", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_CSG.engine.tester.Tester.run": [[49, 101], ["open", "tools.utils.pyt_utils.link_file", "open.close", "logger.info", "tools.utils.pyt_utils.load_model", "tester.Tester.multi_process_evaluation", "open.write", "open.write", "open.write", "open.flush", "int", "os.listdir", "os.listdir.remove", "enumerate", "numpy.array", "model_indice.split", "len", "len", "len", "int", "numpy.array", "os.path.join", "os.path.join", "model_indice.split", "[].split", "int", "m.split"], "methods", ["home.repos.pwc.inspect_result.NVlabs_CSG.utils.pyt_utils.link_file", "home.repos.pwc.inspect_result.NVlabs_CSG.utils.logger.Logger.close", "home.repos.pwc.inspect_result.NVlabs_CSG.utils.pyt_utils.load_model", "home.repos.pwc.inspect_result.NVlabs_CSG.engine.evaluator.Evaluator.multi_process_evaluation"], ["", "def", "run", "(", "self", ",", "model_path", ",", "model_indice", ",", "log_file", ",", "log_file_link", ")", ":", "\n", "        ", "\"\"\"There are four evaluation modes:\n            1.only eval a .pth model: -e *.pth\n            2.only eval a certain epoch: -e epoch\n            3.eval all epochs in a given section: -e start_epoch-end_epoch\n            4.eval all epochs from a certain started epoch: -e start_epoch-\n            \"\"\"", "\n", "if", "'.pth'", "in", "model_indice", ":", "\n", "            ", "models", "=", "[", "model_indice", ",", "]", "\n", "", "elif", "\"-\"", "in", "model_indice", ":", "\n", "            ", "start_epoch", "=", "int", "(", "model_indice", ".", "split", "(", "\"-\"", ")", "[", "0", "]", ")", "\n", "end_epoch", "=", "model_indice", ".", "split", "(", "\"-\"", ")", "[", "1", "]", "\n", "\n", "models", "=", "os", ".", "listdir", "(", "model_path", ")", "\n", "models", ".", "remove", "(", "\"epoch-last.pth\"", ")", "\n", "sorted_models", "=", "[", "None", "]", "*", "len", "(", "models", ")", "\n", "model_idx", "=", "[", "0", "]", "*", "len", "(", "models", ")", "\n", "\n", "for", "idx", ",", "m", "in", "enumerate", "(", "models", ")", ":", "\n", "                ", "num", "=", "m", ".", "split", "(", "\".\"", ")", "[", "0", "]", ".", "split", "(", "\"-\"", ")", "[", "1", "]", "\n", "model_idx", "[", "idx", "]", "=", "num", "\n", "sorted_models", "[", "idx", "]", "=", "m", "\n", "", "model_idx", "=", "np", ".", "array", "(", "[", "int", "(", "i", ")", "for", "i", "in", "model_idx", "]", ")", "\n", "\n", "down_bound", "=", "model_idx", ">=", "start_epoch", "\n", "up_bound", "=", "[", "True", "]", "*", "len", "(", "sorted_models", ")", "\n", "if", "end_epoch", ":", "\n", "                ", "end_epoch", "=", "int", "(", "end_epoch", ")", "\n", "assert", "start_epoch", "<", "end_epoch", "\n", "up_bound", "=", "model_idx", "<=", "end_epoch", "\n", "", "bound", "=", "up_bound", "*", "down_bound", "\n", "model_slice", "=", "np", ".", "array", "(", "sorted_models", ")", "[", "bound", "]", "\n", "models", "=", "[", "os", ".", "path", ".", "join", "(", "model_path", ",", "model", ")", "for", "model", "in", "\n", "model_slice", "]", "\n", "", "else", ":", "\n", "            ", "models", "=", "[", "os", ".", "path", ".", "join", "(", "model_path", ",", "\n", "'epoch-%s.pth'", "%", "model_indice", ")", ",", "]", "\n", "\n", "", "results", "=", "open", "(", "log_file", ",", "'a'", ")", "\n", "link_file", "(", "log_file", ",", "log_file_link", ")", "\n", "\n", "for", "model", "in", "models", ":", "\n", "            ", "logger", ".", "info", "(", "\"Load Model: %s\"", "%", "model", ")", "\n", "self", ".", "val_func", "=", "load_model", "(", "self", ".", "network", ",", "model", ")", "\n", "result_line", ",", "mIoU", "=", "self", ".", "multi_process_evaluation", "(", ")", "\n", "\n", "results", ".", "write", "(", "'Model: '", "+", "model", "+", "'\\n'", ")", "\n", "results", ".", "write", "(", "result_line", ")", "\n", "results", ".", "write", "(", "'\\n'", ")", "\n", "results", ".", "flush", "(", ")", "\n", "\n", "", "results", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_CSG.engine.tester.Tester.run_online": [[102, 108], ["tester.Tester.single_process_evaluation"], "methods", ["home.repos.pwc.inspect_result.NVlabs_CSG.engine.evaluator.Evaluator.single_process_evaluation"], ["", "def", "run_online", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        eval during training\n        \"\"\"", "\n", "self", ".", "val_func", "=", "self", ".", "network", "\n", "self", ".", "single_process_evaluation", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_CSG.engine.tester.Tester.single_process_evaluation": [[109, 114], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "tqdm.tqdm.tqdm", "range", "tester.Tester.func_per_iteration"], "methods", ["home.repos.pwc.inspect_result.NVlabs_CSG.engine.evaluator.Evaluator.func_per_iteration"], ["", "def", "single_process_evaluation", "(", "self", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "idx", "in", "tqdm", "(", "range", "(", "self", ".", "ndata", ")", ")", ":", "\n", "                ", "dd", "=", "self", ".", "dataset", "[", "idx", "]", "\n", "self", ".", "func_per_iteration", "(", "dd", ",", "self", ".", "devices", "[", "0", "]", ",", "iter", "=", "idx", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_CSG.engine.tester.Tester.run_online_multiprocess": [[115, 121], ["tester.Tester.multi_process_single_gpu_evaluation"], "methods", ["home.repos.pwc.inspect_result.NVlabs_CSG.engine.evaluator.Evaluator.multi_process_single_gpu_evaluation"], ["", "", "", "def", "run_online_multiprocess", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        eval during training\n        \"\"\"", "\n", "self", ".", "val_func", "=", "self", ".", "network", "\n", "self", ".", "multi_process_single_gpu_evaluation", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_CSG.engine.tester.Tester.multi_process_single_gpu_evaluation": [[122, 141], ["int", "range", "numpy.ceil", "min", "list", "logger.info", "tester.Tester.context.Process", "procs.append", "tester.Tester.start", "tester.Tester.join", "range", "len"], "methods", ["None"], ["", "def", "multi_process_single_gpu_evaluation", "(", "self", ")", ":", "\n", "# start_eval_time = time.perf_counter()", "\n", "        ", "stride", "=", "int", "(", "np", ".", "ceil", "(", "self", ".", "ndata", "/", "self", ".", "threds", ")", ")", "\n", "\n", "# start multi-process on single-gpu", "\n", "procs", "=", "[", "]", "\n", "for", "d", "in", "range", "(", "self", ".", "threds", ")", ":", "\n", "            ", "e_record", "=", "min", "(", "(", "d", "+", "1", ")", "*", "stride", ",", "self", ".", "ndata", ")", "\n", "shred_list", "=", "list", "(", "range", "(", "d", "*", "stride", ",", "e_record", ")", ")", "\n", "device", "=", "self", ".", "devices", "[", "0", "]", "\n", "logger", ".", "info", "(", "'Thread %d handle %d data.'", "%", "(", "d", ",", "len", "(", "shred_list", ")", ")", ")", "\n", "p", "=", "self", ".", "context", ".", "Process", "(", "target", "=", "self", ".", "worker", ",", "args", "=", "(", "shred_list", ",", "device", ")", ")", "\n", "procs", ".", "append", "(", "p", ")", "\n", "\n", "", "for", "p", "in", "procs", ":", "\n", "            ", "p", ".", "start", "(", ")", "\n", "\n", "", "for", "p", "in", "procs", ":", "\n", "            ", "p", ".", "join", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_CSG.engine.tester.Tester.multi_process_evaluation": [[142, 161], ["len", "int", "range", "numpy.ceil", "min", "list", "logger.info", "tester.Tester.context.Process", "procs.append", "tester.Tester.start", "tester.Tester.join", "range", "len"], "methods", ["None"], ["", "", "def", "multi_process_evaluation", "(", "self", ")", ":", "\n", "        ", "nr_devices", "=", "len", "(", "self", ".", "devices", ")", "\n", "stride", "=", "int", "(", "np", ".", "ceil", "(", "self", ".", "ndata", "/", "nr_devices", ")", ")", "\n", "\n", "# start multi-process on multi-gpu", "\n", "procs", "=", "[", "]", "\n", "for", "d", "in", "range", "(", "nr_devices", ")", ":", "\n", "            ", "e_record", "=", "min", "(", "(", "d", "+", "1", ")", "*", "stride", ",", "self", ".", "ndata", ")", "\n", "shred_list", "=", "list", "(", "range", "(", "d", "*", "stride", ",", "e_record", ")", ")", "\n", "device", "=", "self", ".", "devices", "[", "d", "]", "\n", "logger", ".", "info", "(", "'GPU %s handle %d data.'", "%", "(", "device", ",", "len", "(", "shred_list", ")", ")", ")", "\n", "p", "=", "self", ".", "context", ".", "Process", "(", "target", "=", "self", ".", "worker", ",", "args", "=", "(", "shred_list", ",", "device", ")", ")", "\n", "procs", ".", "append", "(", "p", ")", "\n", "\n", "", "for", "p", "in", "procs", ":", "\n", "            ", "p", ".", "start", "(", ")", "\n", "\n", "", "for", "p", "in", "procs", ":", "\n", "            ", "p", ".", "join", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_CSG.engine.tester.Tester.worker": [[162, 169], ["time.time", "tester.Tester.func_per_iteration", "tester.Tester.results_queue.put"], "methods", ["home.repos.pwc.inspect_result.NVlabs_CSG.engine.evaluator.Evaluator.func_per_iteration"], ["", "", "def", "worker", "(", "self", ",", "shred_list", ",", "device", ")", ":", "\n", "        ", "start_load_time", "=", "time", ".", "time", "(", ")", "\n", "# logger.info('Load Model on Device %d: %.2fs' % (device, time.time() - start_load_time))", "\n", "for", "idx", "in", "shred_list", ":", "\n", "            ", "dd", "=", "self", ".", "dataset", "[", "idx", "]", "\n", "results_dict", "=", "self", ".", "func_per_iteration", "(", "dd", ",", "device", ",", "iter", "=", "idx", ")", "\n", "self", ".", "results_queue", ".", "put", "(", "results_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_CSG.engine.tester.Tester.func_per_iteration": [[170, 172], ["None"], "methods", ["None"], ["", "", "def", "func_per_iteration", "(", "self", ",", "data", ",", "device", ",", "iter", "=", "None", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_CSG.engine.tester.Tester.compute_metric": [[173, 175], ["None"], "methods", ["None"], ["", "def", "compute_metric", "(", "self", ",", "results", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_CSG.engine.tester.Tester.whole_eval": [[177, 196], ["tester.Tester.val_func_process", "cv2.resize.permute", "cv2.resize.cpu().numpy", "cv2.resize.argmax", "tester.Tester.process_image", "tester.Tester.process_image", "cv2.resize", "cv2.resize.cpu"], "methods", ["home.repos.pwc.inspect_result.NVlabs_CSG.engine.evaluator.Evaluator.val_func_process", "home.repos.pwc.inspect_result.NVlabs_CSG.engine.evaluator.Evaluator.process_image", "home.repos.pwc.inspect_result.NVlabs_CSG.engine.evaluator.Evaluator.process_image"], ["", "def", "whole_eval", "(", "self", ",", "img", ",", "output_size", ",", "input_size", "=", "None", ",", "device", "=", "None", ")", ":", "\n", "        ", "if", "input_size", "is", "not", "None", ":", "\n", "            ", "img", ",", "margin", "=", "self", ".", "process_image", "(", "img", ",", "input_size", ")", "\n", "", "else", ":", "\n", "            ", "img", "=", "self", ".", "process_image", "(", "img", ",", "input_size", ")", "\n", "\n", "", "pred", "=", "self", ".", "val_func_process", "(", "img", ",", "device", ")", "\n", "if", "input_size", "is", "not", "None", ":", "\n", "            ", "pred", "=", "pred", "[", ":", ",", "margin", "[", "0", "]", ":", "(", "pred", ".", "shape", "[", "1", "]", "-", "margin", "[", "1", "]", ")", ",", "margin", "[", "2", "]", ":", "(", "pred", ".", "shape", "[", "2", "]", "-", "margin", "[", "3", "]", ")", "]", "\n", "", "pred", "=", "pred", ".", "permute", "(", "1", ",", "2", ",", "0", ")", "\n", "pred", "=", "pred", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "if", "output_size", "is", "not", "None", ":", "\n", "            ", "pred", "=", "cv2", ".", "resize", "(", "pred", ",", "\n", "(", "output_size", "[", "1", "]", ",", "output_size", "[", "0", "]", ")", ",", "\n", "interpolation", "=", "cv2", ".", "INTER_LINEAR", ")", "\n", "\n", "", "pred", "=", "pred", ".", "argmax", "(", "2", ")", "\n", "\n", "return", "pred", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_CSG.engine.tester.Tester.sliding_eval": [[198, 213], ["numpy.zeros", "numpy.zeros.argmax", "cv2.resize", "tester.Tester.scale_process"], "methods", ["home.repos.pwc.inspect_result.NVlabs_CSG.engine.evaluator.Evaluator.scale_process"], ["", "def", "sliding_eval", "(", "self", ",", "img", ",", "crop_size", ",", "stride_rate", ",", "device", "=", "None", ")", ":", "\n", "        ", "ori_rows", ",", "ori_cols", ",", "c", "=", "img", ".", "shape", "\n", "processed_pred", "=", "np", ".", "zeros", "(", "(", "ori_rows", ",", "ori_cols", ",", "self", ".", "class_num", ")", ")", "\n", "\n", "for", "s", "in", "self", ".", "multi_scales", ":", "\n", "            ", "img_scale", "=", "cv2", ".", "resize", "(", "img", ",", "None", ",", "fx", "=", "s", ",", "fy", "=", "s", ",", "\n", "interpolation", "=", "cv2", ".", "INTER_LINEAR", ")", "\n", "new_rows", ",", "new_cols", ",", "_", "=", "img_scale", ".", "shape", "\n", "processed_pred", "+=", "self", ".", "scale_process", "(", "img_scale", ",", "\n", "(", "ori_rows", ",", "ori_cols", ")", ",", "\n", "crop_size", ",", "stride_rate", ",", "device", ")", "\n", "\n", "", "pred", "=", "processed_pred", ".", "argmax", "(", "2", ")", "\n", "\n", "return", "pred", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_CSG.engine.tester.Tester.scale_process": [[214, 266], ["tester.Tester.permute", "cv2.resize", "tester.Tester.process_image", "tester.Tester.val_func_process", "int", "tools.utils.img_utils.pad_image_to_shape", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "range", "tester.Tester.cpu().numpy", "numpy.ceil", "int", "int", "range", "numpy.ceil", "numpy.ceil", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "min", "min", "tester.Tester.process_image", "tester.Tester.val_func_process", "tester.Tester.cpu"], "methods", ["home.repos.pwc.inspect_result.NVlabs_CSG.engine.evaluator.Evaluator.process_image", "home.repos.pwc.inspect_result.NVlabs_CSG.engine.evaluator.Evaluator.val_func_process", "home.repos.pwc.inspect_result.NVlabs_CSG.utils.img_utils.pad_image_to_shape", "home.repos.pwc.inspect_result.NVlabs_CSG.engine.evaluator.Evaluator.process_image", "home.repos.pwc.inspect_result.NVlabs_CSG.engine.evaluator.Evaluator.val_func_process"], ["", "def", "scale_process", "(", "self", ",", "img", ",", "ori_shape", ",", "crop_size", ",", "stride_rate", ",", "\n", "device", "=", "None", ")", ":", "\n", "        ", "new_rows", ",", "new_cols", ",", "c", "=", "img", ".", "shape", "\n", "long_size", "=", "new_cols", "if", "new_cols", ">", "new_rows", "else", "new_rows", "\n", "\n", "if", "long_size", "<=", "crop_size", ":", "\n", "            ", "input_data", ",", "margin", "=", "self", ".", "process_image", "(", "img", ",", "crop_size", ")", "\n", "score", "=", "self", ".", "val_func_process", "(", "input_data", ",", "device", ")", "\n", "score", "=", "score", "[", ":", ",", "margin", "[", "0", "]", ":", "(", "score", ".", "shape", "[", "1", "]", "-", "margin", "[", "1", "]", ")", ",", "\n", "margin", "[", "2", "]", ":", "(", "score", ".", "shape", "[", "2", "]", "-", "margin", "[", "3", "]", ")", "]", "\n", "", "else", ":", "\n", "            ", "stride", "=", "int", "(", "np", ".", "ceil", "(", "crop_size", "*", "stride_rate", ")", ")", "\n", "img_pad", ",", "margin", "=", "pad_image_to_shape", "(", "img", ",", "crop_size", ",", "\n", "cv2", ".", "BORDER_CONSTANT", ",", "value", "=", "0", ")", "\n", "\n", "pad_rows", "=", "img_pad", ".", "shape", "[", "0", "]", "\n", "pad_cols", "=", "img_pad", ".", "shape", "[", "1", "]", "\n", "r_grid", "=", "int", "(", "np", ".", "ceil", "(", "(", "pad_rows", "-", "crop_size", ")", "/", "stride", ")", ")", "+", "1", "\n", "c_grid", "=", "int", "(", "np", ".", "ceil", "(", "(", "pad_cols", "-", "crop_size", ")", "/", "stride", ")", ")", "+", "1", "\n", "data_scale", "=", "torch", ".", "zeros", "(", "self", ".", "class_num", ",", "pad_rows", ",", "pad_cols", ")", ".", "cuda", "(", "\n", "device", ")", "\n", "count_scale", "=", "torch", ".", "zeros", "(", "self", ".", "class_num", ",", "pad_rows", ",", "pad_cols", ")", ".", "cuda", "(", "\n", "device", ")", "\n", "\n", "for", "grid_yidx", "in", "range", "(", "r_grid", ")", ":", "\n", "                ", "for", "grid_xidx", "in", "range", "(", "c_grid", ")", ":", "\n", "                    ", "s_x", "=", "grid_xidx", "*", "stride", "\n", "s_y", "=", "grid_yidx", "*", "stride", "\n", "e_x", "=", "min", "(", "s_x", "+", "crop_size", ",", "pad_cols", ")", "\n", "e_y", "=", "min", "(", "s_y", "+", "crop_size", ",", "pad_rows", ")", "\n", "s_x", "=", "e_x", "-", "crop_size", "\n", "s_y", "=", "e_y", "-", "crop_size", "\n", "img_sub", "=", "img_pad", "[", "s_y", ":", "e_y", ",", "s_x", ":", "e_x", ",", ":", "]", "\n", "count_scale", "[", ":", ",", "s_y", ":", "e_y", ",", "s_x", ":", "e_x", "]", "+=", "1", "\n", "\n", "input_data", ",", "tmargin", "=", "self", ".", "process_image", "(", "img_sub", ",", "crop_size", ")", "\n", "temp_score", "=", "self", ".", "val_func_process", "(", "input_data", ",", "device", ")", "\n", "temp_score", "=", "temp_score", "[", ":", ",", "\n", "tmargin", "[", "0", "]", ":", "(", "temp_score", ".", "shape", "[", "1", "]", "-", "tmargin", "[", "1", "]", ")", ",", "\n", "tmargin", "[", "2", "]", ":", "(", "temp_score", ".", "shape", "[", "2", "]", "-", "tmargin", "[", "3", "]", ")", "]", "\n", "data_scale", "[", ":", ",", "s_y", ":", "e_y", ",", "s_x", ":", "e_x", "]", "+=", "temp_score", "\n", "# score = data_scale / count_scale", "\n", "", "", "score", "=", "data_scale", "\n", "score", "=", "score", "[", ":", ",", "margin", "[", "0", "]", ":", "(", "score", ".", "shape", "[", "1", "]", "-", "margin", "[", "1", "]", ")", ",", "\n", "margin", "[", "2", "]", ":", "(", "score", ".", "shape", "[", "2", "]", "-", "margin", "[", "3", "]", ")", "]", "\n", "\n", "", "score", "=", "score", ".", "permute", "(", "1", ",", "2", ",", "0", ")", "\n", "data_output", "=", "cv2", ".", "resize", "(", "score", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "\n", "(", "ori_shape", "[", "1", "]", ",", "ori_shape", "[", "0", "]", ")", ",", "\n", "interpolation", "=", "cv2", ".", "INTER_LINEAR", ")", "\n", "\n", "return", "data_output", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_CSG.engine.tester.Tester.val_func_process": [[267, 289], ["numpy.ascontiguousarray", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.cuda.device", "torch.cuda.device", "torch.cuda.device", "torch.cuda.device", "tester.Tester.val_func.eval", "tester.Tester.val_func.to", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "input_data.flip.flip.get_device", "input_data.flip.flip.get_device", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "tester.Tester.val_func", "input_data.flip.flip.flip", "tester.Tester.val_func", "tester.Tester.flip", "isinstance", "isinstance", "len"], "methods", ["None"], ["", "def", "val_func_process", "(", "self", ",", "input_data", ",", "device", "=", "None", ")", ":", "\n", "        ", "input_data", "=", "np", ".", "ascontiguousarray", "(", "input_data", "[", "None", ",", ":", ",", ":", ",", ":", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "input_data", "=", "torch", ".", "FloatTensor", "(", "input_data", ")", ".", "cuda", "(", "device", ")", "\n", "\n", "with", "torch", ".", "cuda", ".", "device", "(", "input_data", ".", "get_device", "(", ")", ")", ":", "\n", "            ", "self", ".", "val_func", ".", "eval", "(", ")", "\n", "self", ".", "val_func", ".", "to", "(", "input_data", ".", "get_device", "(", ")", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "score", "=", "self", ".", "val_func", "(", "input_data", ",", "task", "=", "'new_seg'", ")", "[", "0", "]", "\n", "if", "(", "isinstance", "(", "score", ",", "tuple", ")", "or", "isinstance", "(", "score", ",", "list", ")", ")", "and", "len", "(", "score", ")", ">", "1", ":", "\n", "                    ", "score", "=", "score", "[", "self", ".", "out_idx", "]", "\n", "", "score", "=", "score", "[", "0", "]", "# a single image pass, ignore batch dim", "\n", "\n", "if", "self", ".", "is_flip", ":", "\n", "                    ", "input_data", "=", "input_data", ".", "flip", "(", "-", "1", ")", "\n", "score_flip", "=", "self", ".", "val_func", "(", "input_data", ")", "\n", "score_flip", "=", "score_flip", "[", "0", "]", "\n", "score", "+=", "score_flip", ".", "flip", "(", "-", "1", ")", "\n", "", "score", "=", "torch", ".", "exp", "(", "score", ")", "\n", "# score = score.data", "\n", "\n", "", "", "return", "score", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_CSG.engine.tester.Tester.process_image": [[290, 310], ["tools.utils.img_utils.normalize", "p_img.transpose.transpose.transpose", "numpy.concatenate", "tools.utils.img_utils.pad_image_to_shape", "p_img.transpose.transpose.transpose"], "methods", ["home.repos.pwc.inspect_result.NVlabs_CSG.utils.img_utils.normalize", "home.repos.pwc.inspect_result.NVlabs_CSG.utils.img_utils.pad_image_to_shape"], ["", "def", "process_image", "(", "self", ",", "img", ",", "crop_size", "=", "None", ")", ":", "\n", "        ", "p_img", "=", "img", "\n", "\n", "if", "img", ".", "shape", "[", "2", "]", "<", "3", ":", "\n", "            ", "im_b", "=", "p_img", "\n", "im_g", "=", "p_img", "\n", "im_r", "=", "p_img", "\n", "p_img", "=", "np", ".", "concatenate", "(", "(", "im_b", ",", "im_g", ",", "im_r", ")", ",", "axis", "=", "2", ")", "\n", "\n", "", "p_img", "=", "normalize", "(", "p_img", ",", "self", ".", "image_mean", ",", "self", ".", "image_std", ")", "\n", "\n", "if", "crop_size", "is", "not", "None", ":", "\n", "            ", "p_img", ",", "margin", "=", "pad_image_to_shape", "(", "p_img", ",", "crop_size", ",", "cv2", ".", "BORDER_CONSTANT", ",", "value", "=", "0", ")", "\n", "p_img", "=", "p_img", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", "\n", "\n", "return", "p_img", ",", "margin", "\n", "\n", "", "p_img", "=", "p_img", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", "\n", "\n", "return", "p_img", "\n", "", "", ""]], "home.repos.pwc.inspect_result.NVlabs_CSG.engine.evaluator.Evaluator.__init__": [[22, 50], ["evaluator.Evaluator.dataset.get_length", "torch.get_context", "torch.get_context", "evaluator.Evaluator.context.Queue", "evaluator.Evaluator.context.Queue", "type", "tools.utils.pyt_utils.ensure_dir"], "methods", ["home.repos.pwc.inspect_result.NVlabs_CSG.data.BaseDataset.BaseDataset.get_length", "home.repos.pwc.inspect_result.NVlabs_CSG.utils.pyt_utils.ensure_dir"], ["    ", "def", "__init__", "(", "self", ",", "dataset", ",", "class_num", ",", "image_mean", ",", "image_std", ",", "network", ",", "\n", "multi_scales", ",", "is_flip", ",", "devices", "=", "0", ",", "threds", "=", "3", ",", "config", "=", "None", ",", "logger", "=", "None", ",", "\n", "verbose", "=", "False", ",", "save_path", "=", "None", ",", "show_image", "=", "False", ",", "show_prediction", "=", "False", ")", ":", "\n", "        ", "self", ".", "dataset", "=", "dataset", "\n", "self", ".", "ndata", "=", "self", ".", "dataset", ".", "get_length", "(", ")", "\n", "self", ".", "class_num", "=", "class_num", "\n", "self", ".", "image_mean", "=", "image_mean", "\n", "self", ".", "image_std", "=", "image_std", "\n", "self", ".", "multi_scales", "=", "multi_scales", "\n", "self", ".", "is_flip", "=", "is_flip", "\n", "self", ".", "network", "=", "network", "\n", "self", ".", "devices", "=", "devices", "\n", "if", "type", "(", "self", ".", "devices", ")", "==", "int", ":", "self", ".", "devices", "=", "[", "self", ".", "devices", "]", "\n", "self", ".", "threds", "=", "threds", "\n", "self", ".", "config", "=", "config", "\n", "self", ".", "logger", "=", "logger", "\n", "\n", "self", ".", "context", "=", "mp", ".", "get_context", "(", "'spawn'", ")", "\n", "self", ".", "val_func", "=", "None", "\n", "self", ".", "results_queue", "=", "self", ".", "context", ".", "Queue", "(", "self", ".", "ndata", ")", "\n", "self", ".", "features_queue", "=", "self", ".", "context", ".", "Queue", "(", "self", ".", "ndata", ")", "\n", "\n", "self", ".", "verbose", "=", "verbose", "\n", "self", ".", "save_path", "=", "save_path", "\n", "if", "save_path", "is", "not", "None", ":", "\n", "            ", "ensure_dir", "(", "save_path", ")", "\n", "", "self", ".", "show_image", "=", "show_image", "\n", "self", ".", "show_prediction", "=", "show_prediction", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_CSG.engine.evaluator.Evaluator.run": [[51, 103], ["open", "tools.utils.pyt_utils.link_file", "open.close", "logger.info", "tools.utils.pyt_utils.load_model", "evaluator.Evaluator.multi_process_evaluation", "open.write", "open.write", "open.write", "open.flush", "int", "os.listdir", "os.listdir.remove", "enumerate", "numpy.array", "model_indice.split", "len", "len", "len", "int", "numpy.array", "os.path.join", "os.path.join", "model_indice.split", "[].split", "int", "m.split"], "methods", ["home.repos.pwc.inspect_result.NVlabs_CSG.utils.pyt_utils.link_file", "home.repos.pwc.inspect_result.NVlabs_CSG.utils.logger.Logger.close", "home.repos.pwc.inspect_result.NVlabs_CSG.utils.pyt_utils.load_model", "home.repos.pwc.inspect_result.NVlabs_CSG.engine.evaluator.Evaluator.multi_process_evaluation"], ["", "def", "run", "(", "self", ",", "model_path", ",", "model_indice", ",", "log_file", ",", "log_file_link", ")", ":", "\n", "        ", "\"\"\"There are four evaluation modes:\n            1.only eval a .pth model: -e *.pth\n            2.only eval a certain epoch: -e epoch\n            3.eval all epochs in a given section: -e start_epoch-end_epoch\n            4.eval all epochs from a certain started epoch: -e start_epoch-\n            \"\"\"", "\n", "if", "'.pth'", "in", "model_indice", ":", "\n", "            ", "models", "=", "[", "model_indice", ",", "]", "\n", "", "elif", "\"-\"", "in", "model_indice", ":", "\n", "            ", "start_epoch", "=", "int", "(", "model_indice", ".", "split", "(", "\"-\"", ")", "[", "0", "]", ")", "\n", "end_epoch", "=", "model_indice", ".", "split", "(", "\"-\"", ")", "[", "1", "]", "\n", "\n", "models", "=", "os", ".", "listdir", "(", "model_path", ")", "\n", "models", ".", "remove", "(", "\"epoch-last.pth\"", ")", "\n", "sorted_models", "=", "[", "None", "]", "*", "len", "(", "models", ")", "\n", "model_idx", "=", "[", "0", "]", "*", "len", "(", "models", ")", "\n", "\n", "for", "idx", ",", "m", "in", "enumerate", "(", "models", ")", ":", "\n", "                ", "num", "=", "m", ".", "split", "(", "\".\"", ")", "[", "0", "]", ".", "split", "(", "\"-\"", ")", "[", "1", "]", "\n", "model_idx", "[", "idx", "]", "=", "num", "\n", "sorted_models", "[", "idx", "]", "=", "m", "\n", "", "model_idx", "=", "np", ".", "array", "(", "[", "int", "(", "i", ")", "for", "i", "in", "model_idx", "]", ")", "\n", "\n", "down_bound", "=", "model_idx", ">=", "start_epoch", "\n", "up_bound", "=", "[", "True", "]", "*", "len", "(", "sorted_models", ")", "\n", "if", "end_epoch", ":", "\n", "                ", "end_epoch", "=", "int", "(", "end_epoch", ")", "\n", "assert", "start_epoch", "<", "end_epoch", "\n", "up_bound", "=", "model_idx", "<=", "end_epoch", "\n", "", "bound", "=", "up_bound", "*", "down_bound", "\n", "model_slice", "=", "np", ".", "array", "(", "sorted_models", ")", "[", "bound", "]", "\n", "models", "=", "[", "os", ".", "path", ".", "join", "(", "model_path", ",", "model", ")", "for", "model", "in", "\n", "model_slice", "]", "\n", "", "else", ":", "\n", "            ", "models", "=", "[", "os", ".", "path", ".", "join", "(", "model_path", ",", "\n", "'epoch-%s.pth'", "%", "model_indice", ")", ",", "]", "\n", "\n", "", "results", "=", "open", "(", "log_file", ",", "'a'", ")", "\n", "link_file", "(", "log_file", ",", "log_file_link", ")", "\n", "\n", "for", "model", "in", "models", ":", "\n", "            ", "logger", ".", "info", "(", "\"Load Model: %s\"", "%", "model", ")", "\n", "self", ".", "val_func", "=", "load_model", "(", "self", ".", "network", ",", "model", ")", "\n", "result_line", ",", "mIoU", "=", "self", ".", "multi_process_evaluation", "(", ")", "\n", "\n", "results", ".", "write", "(", "'Model: '", "+", "model", "+", "'\\n'", ")", "\n", "results", ".", "write", "(", "result_line", ")", "\n", "results", ".", "write", "(", "'\\n'", ")", "\n", "results", ".", "flush", "(", ")", "\n", "\n", "", "results", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_CSG.engine.evaluator.Evaluator.run_online": [[104, 111], ["evaluator.Evaluator.single_process_evaluation"], "methods", ["home.repos.pwc.inspect_result.NVlabs_CSG.engine.evaluator.Evaluator.single_process_evaluation"], ["", "def", "run_online", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        eval during training\n        \"\"\"", "\n", "self", ".", "val_func", "=", "self", ".", "network", "\n", "result_line", ",", "mIoU", "=", "self", ".", "single_process_evaluation", "(", ")", "\n", "return", "result_line", ",", "mIoU", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_CSG.engine.evaluator.Evaluator.single_process_evaluation": [[112, 123], ["evaluator.Evaluator.compute_metric", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "tqdm.tqdm.tqdm", "range", "evaluator.Evaluator.func_per_iteration", "all_results.append", "evaluator.Evaluator.compute_metric"], "methods", ["home.repos.pwc.inspect_result.NVlabs_CSG.engine.evaluator.Evaluator.compute_metric", "home.repos.pwc.inspect_result.NVlabs_CSG.engine.evaluator.Evaluator.func_per_iteration", "home.repos.pwc.inspect_result.NVlabs_CSG.engine.evaluator.Evaluator.compute_metric"], ["", "def", "single_process_evaluation", "(", "self", ")", ":", "\n", "        ", "all_results", "=", "[", "]", "\n", "from", "pdb", "import", "set_trace", "as", "bp", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "idx", "in", "tqdm", "(", "range", "(", "self", ".", "ndata", ")", ")", ":", "\n", "                ", "dd", "=", "self", ".", "dataset", "[", "idx", "]", "\n", "results_dict", "=", "self", ".", "func_per_iteration", "(", "dd", ",", "self", ".", "devices", "[", "0", "]", ",", "iter", "=", "idx", ")", "\n", "all_results", ".", "append", "(", "results_dict", ")", "\n", "_", ",", "_mIoU", "=", "self", ".", "compute_metric", "(", "[", "results_dict", "]", ")", "\n", "", "", "result_line", ",", "mIoU", "=", "self", ".", "compute_metric", "(", "all_results", ")", "\n", "return", "result_line", ",", "mIoU", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_CSG.engine.evaluator.Evaluator.run_online_multiprocess": [[124, 131], ["evaluator.Evaluator.multi_process_single_gpu_evaluation"], "methods", ["home.repos.pwc.inspect_result.NVlabs_CSG.engine.evaluator.Evaluator.multi_process_single_gpu_evaluation"], ["", "def", "run_online_multiprocess", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        eval during training\n        \"\"\"", "\n", "self", ".", "val_func", "=", "self", ".", "network", "\n", "result_line", ",", "mIoU", "=", "self", ".", "multi_process_single_gpu_evaluation", "(", ")", "\n", "return", "result_line", ",", "mIoU", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_CSG.engine.evaluator.Evaluator.multi_process_single_gpu_evaluation": [[132, 161], ["int", "range", "tqdm.tqdm.tqdm", "evaluator.Evaluator.compute_metric", "numpy.ceil", "min", "list", "logger.info", "evaluator.Evaluator.context.Process", "procs.append", "evaluator.Evaluator.start", "range", "evaluator.Evaluator.results_queue.get", "all_results.append", "evaluator.Evaluator.join", "range", "evaluator.Evaluator.compute_metric", "len"], "methods", ["home.repos.pwc.inspect_result.NVlabs_CSG.engine.evaluator.Evaluator.compute_metric", "home.repos.pwc.inspect_result.NVlabs_CSG.engine.evaluator.Evaluator.compute_metric"], ["", "def", "multi_process_single_gpu_evaluation", "(", "self", ")", ":", "\n", "# start_eval_time = time.perf_counter()", "\n", "        ", "stride", "=", "int", "(", "np", ".", "ceil", "(", "self", ".", "ndata", "/", "self", ".", "threds", ")", ")", "\n", "\n", "# start multi-process on single-gpu", "\n", "procs", "=", "[", "]", "\n", "for", "d", "in", "range", "(", "self", ".", "threds", ")", ":", "\n", "            ", "e_record", "=", "min", "(", "(", "d", "+", "1", ")", "*", "stride", ",", "self", ".", "ndata", ")", "\n", "shred_list", "=", "list", "(", "range", "(", "d", "*", "stride", ",", "e_record", ")", ")", "\n", "device", "=", "self", ".", "devices", "[", "0", "]", "\n", "logger", ".", "info", "(", "'Thread %d handle %d data.'", "%", "(", "d", ",", "len", "(", "shred_list", ")", ")", ")", "\n", "p", "=", "self", ".", "context", ".", "Process", "(", "target", "=", "self", ".", "worker", ",", "args", "=", "(", "shred_list", ",", "device", ")", ")", "\n", "procs", ".", "append", "(", "p", ")", "\n", "\n", "", "for", "p", "in", "procs", ":", "\n", "            ", "p", ".", "start", "(", ")", "\n", "\n", "", "all_results", "=", "[", "]", "\n", "for", "_", "in", "tqdm", "(", "range", "(", "self", ".", "ndata", ")", ")", ":", "\n", "            ", "t", "=", "self", ".", "results_queue", ".", "get", "(", ")", "\n", "all_results", ".", "append", "(", "t", ")", "\n", "if", "self", ".", "verbose", ":", "\n", "                ", "self", ".", "compute_metric", "(", "all_results", ")", "\n", "\n", "", "", "for", "p", "in", "procs", ":", "\n", "            ", "p", ".", "join", "(", ")", "\n", "\n", "", "result_line", ",", "mIoU", "=", "self", ".", "compute_metric", "(", "all_results", ")", "\n", "return", "result_line", ",", "mIoU", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_CSG.engine.evaluator.Evaluator.multi_process_evaluation": [[162, 193], ["time.perf_counter", "len", "int", "range", "tqdm.tqdm.tqdm", "evaluator.Evaluator.compute_metric", "logger.info", "numpy.ceil", "min", "list", "logger.info", "evaluator.Evaluator.context.Process", "procs.append", "evaluator.Evaluator.start", "range", "evaluator.Evaluator.results_queue.get", "all_results.append", "evaluator.Evaluator.join", "range", "evaluator.Evaluator.compute_metric", "time.perf_counter", "len"], "methods", ["home.repos.pwc.inspect_result.NVlabs_CSG.engine.evaluator.Evaluator.compute_metric", "home.repos.pwc.inspect_result.NVlabs_CSG.engine.evaluator.Evaluator.compute_metric"], ["", "def", "multi_process_evaluation", "(", "self", ")", ":", "\n", "        ", "start_eval_time", "=", "time", ".", "perf_counter", "(", ")", "\n", "nr_devices", "=", "len", "(", "self", ".", "devices", ")", "\n", "stride", "=", "int", "(", "np", ".", "ceil", "(", "self", ".", "ndata", "/", "nr_devices", ")", ")", "\n", "\n", "# start multi-process on multi-gpu", "\n", "procs", "=", "[", "]", "\n", "for", "d", "in", "range", "(", "nr_devices", ")", ":", "\n", "            ", "e_record", "=", "min", "(", "(", "d", "+", "1", ")", "*", "stride", ",", "self", ".", "ndata", ")", "\n", "shred_list", "=", "list", "(", "range", "(", "d", "*", "stride", ",", "e_record", ")", ")", "\n", "device", "=", "self", ".", "devices", "[", "d", "]", "\n", "logger", ".", "info", "(", "'GPU %s handle %d data.'", "%", "(", "device", ",", "len", "(", "shred_list", ")", ")", ")", "\n", "p", "=", "self", ".", "context", ".", "Process", "(", "target", "=", "self", ".", "worker", ",", "args", "=", "(", "shred_list", ",", "device", ")", ")", "\n", "procs", ".", "append", "(", "p", ")", "\n", "\n", "", "for", "p", "in", "procs", ":", "\n", "            ", "p", ".", "start", "(", ")", "\n", "\n", "", "all_results", "=", "[", "]", "\n", "for", "_", "in", "tqdm", "(", "range", "(", "self", ".", "ndata", ")", ")", ":", "\n", "            ", "t", "=", "self", ".", "results_queue", ".", "get", "(", ")", "\n", "all_results", ".", "append", "(", "t", ")", "\n", "if", "self", ".", "verbose", ":", "\n", "                ", "self", ".", "compute_metric", "(", "all_results", ")", "\n", "\n", "", "", "for", "p", "in", "procs", ":", "\n", "            ", "p", ".", "join", "(", ")", "\n", "\n", "", "result_line", ",", "mIoU", "=", "self", ".", "compute_metric", "(", "all_results", ")", "\n", "logger", ".", "info", "(", "'Evaluation Elapsed Time: %.2fs'", "%", "(", "time", ".", "perf_counter", "(", ")", "-", "start_eval_time", ")", ")", "\n", "return", "result_line", ",", "mIoU", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_CSG.engine.evaluator.Evaluator.worker": [[194, 201], ["evaluator.Evaluator.func_per_iteration", "evaluator.Evaluator.results_queue.put"], "methods", ["home.repos.pwc.inspect_result.NVlabs_CSG.engine.evaluator.Evaluator.func_per_iteration"], ["", "def", "worker", "(", "self", ",", "shred_list", ",", "device", ")", ":", "\n", "# start_load_time = time.time()", "\n", "# logger.info('Load Model on Device %d: %.2fs' % (device, time.time() - start_load_time))", "\n", "        ", "for", "idx", "in", "shred_list", ":", "\n", "            ", "dd", "=", "self", ".", "dataset", "[", "idx", "]", "\n", "results_dict", "=", "self", ".", "func_per_iteration", "(", "dd", ",", "device", ",", "iter", "=", "idx", ")", "\n", "self", ".", "results_queue", ".", "put", "(", "results_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_CSG.engine.evaluator.Evaluator.func_per_iteration": [[203, 205], ["None"], "methods", ["None"], ["", "", "def", "func_per_iteration", "(", "self", ",", "data", ",", "device", ",", "iter", "=", "None", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_CSG.engine.evaluator.Evaluator.compute_metric": [[206, 208], ["None"], "methods", ["None"], ["", "def", "compute_metric", "(", "self", ",", "results", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_CSG.engine.evaluator.Evaluator.whole_eval": [[210, 229], ["evaluator.Evaluator.val_func_process", "cv2.resize.permute", "cv2.resize.cpu().numpy", "evaluator.Evaluator.process_image", "evaluator.Evaluator.process_image", "cv2.resize", "cv2.resize.cpu"], "methods", ["home.repos.pwc.inspect_result.NVlabs_CSG.engine.evaluator.Evaluator.val_func_process", "home.repos.pwc.inspect_result.NVlabs_CSG.engine.evaluator.Evaluator.process_image", "home.repos.pwc.inspect_result.NVlabs_CSG.engine.evaluator.Evaluator.process_image"], ["", "def", "whole_eval", "(", "self", ",", "img", ",", "output_size", ",", "resize", "=", "None", ",", "input_size", "=", "None", ",", "device", "=", "None", ")", ":", "\n", "        ", "if", "input_size", "is", "not", "None", ":", "\n", "            ", "img", ",", "margin", "=", "self", ".", "process_image", "(", "img", ",", "resize", "=", "resize", ",", "crop_size", "=", "input_size", ")", "\n", "", "else", ":", "\n", "            ", "img", "=", "self", ".", "process_image", "(", "img", ",", "resize", "=", "resize", ",", "crop_size", "=", "input_size", ")", "\n", "\n", "", "pred", "=", "self", ".", "val_func_process", "(", "img", ",", "device", ")", "\n", "if", "input_size", "is", "not", "None", ":", "\n", "            ", "pred", "=", "pred", "[", ":", ",", "margin", "[", "0", "]", ":", "(", "pred", ".", "shape", "[", "1", "]", "-", "margin", "[", "1", "]", ")", ",", "margin", "[", "2", "]", ":", "(", "pred", ".", "shape", "[", "2", "]", "-", "margin", "[", "3", "]", ")", "]", "\n", "", "pred", "=", "pred", ".", "permute", "(", "1", ",", "2", ",", "0", ")", "\n", "pred", "=", "pred", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "if", "output_size", "is", "not", "None", ":", "\n", "            ", "pred", "=", "cv2", ".", "resize", "(", "pred", ",", "\n", "(", "output_size", "[", "1", "]", ",", "output_size", "[", "0", "]", ")", ",", "\n", "interpolation", "=", "cv2", ".", "INTER_LINEAR", ")", "\n", "\n", "# pred = pred.argmax(2)", "\n", "\n", "", "return", "pred", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_CSG.engine.evaluator.Evaluator.sliding_eval": [[231, 246], ["numpy.zeros", "numpy.zeros.argmax", "cv2.resize", "evaluator.Evaluator.scale_process"], "methods", ["home.repos.pwc.inspect_result.NVlabs_CSG.engine.evaluator.Evaluator.scale_process"], ["", "def", "sliding_eval", "(", "self", ",", "img", ",", "crop_size", ",", "stride_rate", ",", "device", "=", "None", ")", ":", "\n", "        ", "ori_rows", ",", "ori_cols", ",", "c", "=", "img", ".", "shape", "\n", "processed_pred", "=", "np", ".", "zeros", "(", "(", "ori_rows", ",", "ori_cols", ",", "self", ".", "class_num", ")", ")", "\n", "\n", "for", "s", "in", "self", ".", "multi_scales", ":", "\n", "            ", "img_scale", "=", "cv2", ".", "resize", "(", "img", ",", "None", ",", "fx", "=", "s", ",", "fy", "=", "s", ",", "\n", "interpolation", "=", "cv2", ".", "INTER_LINEAR", ")", "\n", "new_rows", ",", "new_cols", ",", "_", "=", "img_scale", ".", "shape", "\n", "processed_pred", "+=", "self", ".", "scale_process", "(", "img_scale", ",", "\n", "(", "ori_rows", ",", "ori_cols", ")", ",", "\n", "crop_size", ",", "stride_rate", ",", "device", ")", "\n", "\n", "", "pred", "=", "processed_pred", ".", "argmax", "(", "2", ")", "\n", "\n", "return", "pred", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_CSG.engine.evaluator.Evaluator.scale_process": [[247, 299], ["evaluator.Evaluator.permute", "cv2.resize", "evaluator.Evaluator.process_image", "evaluator.Evaluator.val_func_process", "int", "tools.utils.img_utils.pad_image_to_shape", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "range", "evaluator.Evaluator.cpu().numpy", "numpy.ceil", "int", "int", "range", "numpy.ceil", "numpy.ceil", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "min", "min", "evaluator.Evaluator.process_image", "evaluator.Evaluator.val_func_process", "evaluator.Evaluator.cpu"], "methods", ["home.repos.pwc.inspect_result.NVlabs_CSG.engine.evaluator.Evaluator.process_image", "home.repos.pwc.inspect_result.NVlabs_CSG.engine.evaluator.Evaluator.val_func_process", "home.repos.pwc.inspect_result.NVlabs_CSG.utils.img_utils.pad_image_to_shape", "home.repos.pwc.inspect_result.NVlabs_CSG.engine.evaluator.Evaluator.process_image", "home.repos.pwc.inspect_result.NVlabs_CSG.engine.evaluator.Evaluator.val_func_process"], ["", "def", "scale_process", "(", "self", ",", "img", ",", "ori_shape", ",", "crop_size", ",", "stride_rate", ",", "\n", "device", "=", "None", ")", ":", "\n", "        ", "new_rows", ",", "new_cols", ",", "c", "=", "img", ".", "shape", "\n", "long_size", "=", "new_cols", "if", "new_cols", ">", "new_rows", "else", "new_rows", "\n", "\n", "if", "long_size", "<=", "crop_size", ":", "\n", "            ", "input_data", ",", "margin", "=", "self", ".", "process_image", "(", "img", ",", "crop_size", "=", "crop_size", ")", "\n", "score", "=", "self", ".", "val_func_process", "(", "input_data", ",", "device", ")", "\n", "score", "=", "score", "[", ":", ",", "margin", "[", "0", "]", ":", "(", "score", ".", "shape", "[", "1", "]", "-", "margin", "[", "1", "]", ")", ",", "\n", "margin", "[", "2", "]", ":", "(", "score", ".", "shape", "[", "2", "]", "-", "margin", "[", "3", "]", ")", "]", "\n", "", "else", ":", "\n", "            ", "stride", "=", "int", "(", "np", ".", "ceil", "(", "crop_size", "*", "stride_rate", ")", ")", "\n", "img_pad", ",", "margin", "=", "pad_image_to_shape", "(", "img", ",", "crop_size", ",", "\n", "cv2", ".", "BORDER_CONSTANT", ",", "value", "=", "0", ")", "\n", "\n", "pad_rows", "=", "img_pad", ".", "shape", "[", "0", "]", "\n", "pad_cols", "=", "img_pad", ".", "shape", "[", "1", "]", "\n", "r_grid", "=", "int", "(", "np", ".", "ceil", "(", "(", "pad_rows", "-", "crop_size", ")", "/", "stride", ")", ")", "+", "1", "\n", "c_grid", "=", "int", "(", "np", ".", "ceil", "(", "(", "pad_cols", "-", "crop_size", ")", "/", "stride", ")", ")", "+", "1", "\n", "data_scale", "=", "torch", ".", "zeros", "(", "self", ".", "class_num", ",", "pad_rows", ",", "pad_cols", ")", ".", "cuda", "(", "\n", "device", ")", "\n", "count_scale", "=", "torch", ".", "zeros", "(", "self", ".", "class_num", ",", "pad_rows", ",", "pad_cols", ")", ".", "cuda", "(", "\n", "device", ")", "\n", "\n", "for", "grid_yidx", "in", "range", "(", "r_grid", ")", ":", "\n", "                ", "for", "grid_xidx", "in", "range", "(", "c_grid", ")", ":", "\n", "                    ", "s_x", "=", "grid_xidx", "*", "stride", "\n", "s_y", "=", "grid_yidx", "*", "stride", "\n", "e_x", "=", "min", "(", "s_x", "+", "crop_size", ",", "pad_cols", ")", "\n", "e_y", "=", "min", "(", "s_y", "+", "crop_size", ",", "pad_rows", ")", "\n", "s_x", "=", "e_x", "-", "crop_size", "\n", "s_y", "=", "e_y", "-", "crop_size", "\n", "img_sub", "=", "img_pad", "[", "s_y", ":", "e_y", ",", "s_x", ":", "e_x", ",", ":", "]", "\n", "count_scale", "[", ":", ",", "s_y", ":", "e_y", ",", "s_x", ":", "e_x", "]", "+=", "1", "\n", "\n", "input_data", ",", "tmargin", "=", "self", ".", "process_image", "(", "img_sub", ",", "crop_size", "=", "crop_size", ")", "\n", "temp_score", "=", "self", ".", "val_func_process", "(", "input_data", ",", "device", ")", "\n", "temp_score", "=", "temp_score", "[", ":", ",", "\n", "tmargin", "[", "0", "]", ":", "(", "temp_score", ".", "shape", "[", "1", "]", "-", "tmargin", "[", "1", "]", ")", ",", "\n", "tmargin", "[", "2", "]", ":", "(", "temp_score", ".", "shape", "[", "2", "]", "-", "tmargin", "[", "3", "]", ")", "]", "\n", "data_scale", "[", ":", ",", "s_y", ":", "e_y", ",", "s_x", ":", "e_x", "]", "+=", "temp_score", "\n", "# score = data_scale / count_scale", "\n", "", "", "score", "=", "data_scale", "\n", "score", "=", "score", "[", ":", ",", "margin", "[", "0", "]", ":", "(", "score", ".", "shape", "[", "1", "]", "-", "margin", "[", "1", "]", ")", ",", "\n", "margin", "[", "2", "]", ":", "(", "score", ".", "shape", "[", "2", "]", "-", "margin", "[", "3", "]", ")", "]", "\n", "\n", "", "score", "=", "score", ".", "permute", "(", "1", ",", "2", ",", "0", ")", "\n", "data_output", "=", "cv2", ".", "resize", "(", "score", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "\n", "(", "ori_shape", "[", "1", "]", ",", "ori_shape", "[", "0", "]", ")", ",", "\n", "interpolation", "=", "cv2", ".", "INTER_LINEAR", ")", "\n", "\n", "return", "data_output", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_CSG.engine.evaluator.Evaluator.val_func_process": [[300, 322], ["numpy.ascontiguousarray", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.cuda.device", "torch.cuda.device", "torch.cuda.device", "torch.cuda.device", "evaluator.Evaluator.val_func.eval", "evaluator.Evaluator.val_func.to", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "input_data.flip.flip.get_device", "input_data.flip.flip.get_device", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "evaluator.Evaluator.val_func", "input_data.flip.flip.flip", "score_flip.flip", "isinstance", "isinstance", "len", "evaluator.Evaluator.val_func"], "methods", ["None"], ["", "def", "val_func_process", "(", "self", ",", "input_data", ",", "device", "=", "None", ")", ":", "\n", "        ", "input_data", "=", "np", ".", "ascontiguousarray", "(", "input_data", "[", "None", ",", ":", ",", ":", ",", ":", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "input_data", "=", "torch", ".", "FloatTensor", "(", "input_data", ")", ".", "cuda", "(", "device", ")", "\n", "\n", "with", "torch", ".", "cuda", ".", "device", "(", "input_data", ".", "get_device", "(", ")", ")", ":", "\n", "            ", "self", ".", "val_func", ".", "eval", "(", ")", "\n", "self", ".", "val_func", ".", "to", "(", "input_data", ".", "get_device", "(", ")", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "score", "=", "self", ".", "val_func", "(", "input_data", ",", "output_features", "=", "[", "]", ",", "task", "=", "'new_seg'", ")", "[", "0", "]", "\n", "if", "(", "isinstance", "(", "score", ",", "tuple", ")", "or", "isinstance", "(", "score", ",", "list", ")", ")", "and", "len", "(", "score", ")", ">", "1", ":", "\n", "                    ", "score", "=", "score", "[", "self", ".", "out_idx", "]", "\n", "", "score", "=", "score", "[", "0", "]", "# a single image pass, ignore batch dim", "\n", "\n", "if", "self", ".", "is_flip", ":", "\n", "                    ", "input_data", "=", "input_data", ".", "flip", "(", "-", "1", ")", "\n", "score_flip", "=", "self", ".", "val_func", "(", "input_data", ")", "[", "0", "]", "\n", "score_flip", "=", "score_flip", "[", "0", "]", "# a single image pass, ignore batch dim", "\n", "score", "+=", "score_flip", ".", "flip", "(", "-", "1", ")", "\n", "", "score", "=", "torch", ".", "exp", "(", "score", ")", "\n", "# score = score.data", "\n", "\n", "", "", "return", "score", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_CSG.engine.evaluator.Evaluator.process_image": [[323, 352], ["tools.utils.img_utils.normalize", "numpy.array.transpose", "numpy.concatenate", "isinstance", "tools.utils.img_utils.pad_image_to_shape", "numpy.array.transpose", "numpy.array", "PIL.Image.fromarray().resize", "isinstance", "isinstance", "numpy.array", "len", "PIL.Image.fromarray().resize", "PIL.Image.fromarray", "int", "int", "PIL.Image.fromarray", "int", "int"], "methods", ["home.repos.pwc.inspect_result.NVlabs_CSG.utils.img_utils.normalize", "home.repos.pwc.inspect_result.NVlabs_CSG.utils.img_utils.pad_image_to_shape"], ["", "def", "process_image", "(", "self", ",", "img", ",", "resize", "=", "None", ",", "crop_size", "=", "None", ")", ":", "\n", "        ", "p_img", "=", "img", "\n", "\n", "if", "img", ".", "shape", "[", "2", "]", "<", "3", ":", "\n", "            ", "im_b", "=", "p_img", "\n", "im_g", "=", "p_img", "\n", "im_r", "=", "p_img", "\n", "p_img", "=", "np", ".", "concatenate", "(", "(", "im_b", ",", "im_g", ",", "im_r", ")", ",", "axis", "=", "2", ")", "\n", "\n", "", "if", "resize", "is", "not", "None", ":", "\n", "            ", "if", "isinstance", "(", "resize", ",", "float", ")", ":", "\n", "                ", "_size", "=", "p_img", ".", "shape", "[", ":", "2", "]", "\n", "# p_img = np.array(Image.fromarray(p_img).resize((int(_size[0]*resize), int(_size[1]*resize)), Image.BILINEAR))", "\n", "p_img", "=", "np", ".", "array", "(", "Image", ".", "fromarray", "(", "p_img", ")", ".", "resize", "(", "(", "int", "(", "_size", "[", "1", "]", "*", "resize", ")", ",", "int", "(", "_size", "[", "0", "]", "*", "resize", ")", ")", ",", "Image", ".", "BILINEAR", ")", ")", "\n", "", "elif", "isinstance", "(", "resize", ",", "tuple", ")", "or", "isinstance", "(", "resize", ",", "list", ")", ":", "\n", "                ", "assert", "len", "(", "resize", ")", "==", "2", "\n", "p_img", "=", "np", ".", "array", "(", "Image", ".", "fromarray", "(", "p_img", ")", ".", "resize", "(", "(", "int", "(", "resize", "[", "0", "]", ")", ",", "int", "(", "resize", "[", "1", "]", ")", ")", ",", "Image", ".", "BILINEAR", ")", ")", "\n", "\n", "", "", "p_img", "=", "normalize", "(", "p_img", ",", "self", ".", "image_mean", ",", "self", ".", "image_std", ")", "\n", "\n", "if", "crop_size", "is", "not", "None", ":", "\n", "            ", "p_img", ",", "margin", "=", "pad_image_to_shape", "(", "p_img", ",", "crop_size", ",", "cv2", ".", "BORDER_CONSTANT", ",", "value", "=", "0", ")", "\n", "p_img", "=", "p_img", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", "\n", "\n", "return", "p_img", ",", "margin", "\n", "\n", "", "p_img", "=", "p_img", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", "\n", "\n", "return", "p_img", "\n", "", "", ""]], "home.repos.pwc.inspect_result.NVlabs_CSG.model.deeplab.BasicBlock.__init__": [[22, 31], ["torch.Module.__init__", "deeplab.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "deeplab.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.NVlabs_CSG.data.visda17.VisDA17.__init__", "home.repos.pwc.inspect_result.NVlabs_CSG.model.resnet.conv3x3", "home.repos.pwc.inspect_result.NVlabs_CSG.model.resnet.conv3x3"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ",", "affine", "=", "affine_par", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ",", "affine", "=", "affine_par", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_CSG.model.deeplab.BasicBlock.forward": [[32, 49], ["deeplab.BasicBlock.conv1", "deeplab.BasicBlock.bn1", "deeplab.BasicBlock.relu", "deeplab.BasicBlock.conv2", "deeplab.BasicBlock.bn2", "deeplab.BasicBlock.relu", "deeplab.BasicBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_CSG.model.deeplab.Bottleneck.__init__": [[54, 74], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "deeplab.Bottleneck.bn1.parameters", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "deeplab.Bottleneck.bn2.parameters", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "deeplab.Bottleneck.bn3.parameters", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.NVlabs_CSG.data.visda17.VisDA17.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "dilation", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ",", "affine", "=", "affine_par", ")", "\n", "for", "i", "in", "self", ".", "bn1", ".", "parameters", "(", ")", ":", "\n", "            ", "i", ".", "requires_grad", "=", "False", "\n", "\n", "", "padding", "=", "dilation", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "padding", ",", "bias", "=", "False", ",", "dilation", "=", "dilation", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ",", "affine", "=", "affine_par", ")", "\n", "for", "i", "in", "self", ".", "bn2", ".", "parameters", "(", ")", ":", "\n", "            ", "i", ".", "requires_grad", "=", "False", "\n", "", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", "*", "4", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "planes", "*", "4", ",", "affine", "=", "affine_par", ")", "\n", "for", "i", "in", "self", ".", "bn3", ".", "parameters", "(", ")", ":", "\n", "            ", "i", ".", "requires_grad", "=", "False", "\n", "", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_CSG.model.deeplab.Bottleneck.forward": [[75, 96], ["deeplab.Bottleneck.conv1", "deeplab.Bottleneck.bn1", "deeplab.Bottleneck.relu", "deeplab.Bottleneck.conv2", "deeplab.Bottleneck.bn2", "deeplab.Bottleneck.relu", "deeplab.Bottleneck.conv3", "deeplab.Bottleneck.bn3", "deeplab.Bottleneck.relu", "deeplab.Bottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_CSG.model.deeplab.ASPPConv.__init__": [[99, 106], ["torch.Sequential.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.NVlabs_CSG.data.visda17.VisDA17.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "dilation", ")", ":", "\n", "        ", "modules", "=", "[", "\n", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "3", ",", "padding", "=", "dilation", ",", "dilation", "=", "dilation", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_channels", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", "\n", "]", "\n", "super", "(", "ASPPConv", ",", "self", ")", ".", "__init__", "(", "*", "modules", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_CSG.model.deeplab.ASPPPooling.__init__": [[109, 115], ["torch.Sequential.__init__", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.NVlabs_CSG.data.visda17.VisDA17.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ")", ":", "\n", "        ", "super", "(", "ASPPPooling", ",", "self", ")", ".", "__init__", "(", "\n", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_channels", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_CSG.model.deeplab.ASPPPooling.forward": [[116, 121], ["torch.interpolate", "torch.interpolate", "torch.interpolate", "mod"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "size", "=", "x", ".", "shape", "[", "-", "2", ":", "]", "\n", "for", "mod", "in", "self", ":", "\n", "            ", "x", "=", "mod", "(", "x", ")", "\n", "", "return", "F", ".", "interpolate", "(", "x", ",", "size", "=", "size", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_CSG.model.deeplab.ASPP.__init__": [[124, 145], ["torch.Module.__init__", "modules.append", "tuple", "modules.append", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "modules.append", "deeplab.ASPPPooling", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "deeplab.ASPPConv"], "methods", ["home.repos.pwc.inspect_result.NVlabs_CSG.data.visda17.VisDA17.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "atrous_rates", ",", "out_channels", "=", "256", ")", ":", "\n", "        ", "super", "(", "ASPP", ",", "self", ")", ".", "__init__", "(", ")", "\n", "modules", "=", "[", "]", "\n", "modules", ".", "append", "(", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_channels", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ")", ")", "\n", "\n", "rates", "=", "tuple", "(", "atrous_rates", ")", "\n", "for", "rate", "in", "rates", ":", "\n", "            ", "modules", ".", "append", "(", "ASPPConv", "(", "in_channels", ",", "out_channels", ",", "rate", ")", ")", "\n", "\n", "", "modules", ".", "append", "(", "ASPPPooling", "(", "in_channels", ",", "out_channels", ")", ")", "\n", "\n", "self", ".", "convs", "=", "nn", ".", "ModuleList", "(", "modules", ")", "\n", "\n", "self", ".", "project", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "5", "*", "out_channels", ",", "out_channels", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_channels", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Dropout", "(", "0.5", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_CSG.model.deeplab.ASPP.forward": [[146, 152], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "deeplab.ASPP.project", "torch.cat.append", "torch.cat.append", "torch.cat.append", "conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "res", "=", "[", "]", "\n", "for", "conv", "in", "self", ".", "convs", ":", "\n", "            ", "res", ".", "append", "(", "conv", "(", "x", ")", ")", "\n", "", "res", "=", "torch", ".", "cat", "(", "res", ",", "dim", "=", "1", ")", "\n", "return", "self", ".", "project", "(", "res", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_CSG.model.deeplab.Classifier_Module.__init__": [[156, 166], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.Sequential", "torch.Sequential", "torch.Sequential", "deeplab.ASPP", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.NVlabs_CSG.data.visda17.VisDA17.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dilation_series", ",", "padding_series", ",", "num_classes", ")", ":", "\n", "        ", "super", "(", "Classifier_Module", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv2d_list", "=", "nn", ".", "ModuleList", "(", ")", "\n", "\n", "self", ".", "conv2d_list", "=", "nn", ".", "ModuleList", "(", "[", "nn", ".", "Sequential", "(", "\n", "ASPP", "(", "2048", ",", "[", "12", ",", "24", ",", "36", "]", ")", ",", "\n", "nn", ".", "Conv2d", "(", "256", ",", "256", ",", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "256", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv2d", "(", "256", ",", "num_classes", ",", "1", ")", "\n", ")", "]", ")", "\n"]], "home.repos.pwc.inspect_result.NVlabs_CSG.model.deeplab.Classifier_Module.forward": [[168, 173], ["range", "len"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv2d_list", "[", "0", "]", "(", "x", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "conv2d_list", ")", "-", "1", ")", ":", "\n", "            ", "out", "+=", "self", ".", "conv2d_list", "[", "i", "+", "1", "]", "(", "x", ")", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_CSG.model.deeplab.ResNet.__init__": [[176, 220], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "deeplab.ResNet.bn1.parameters", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "deeplab.ResNet._make_layer", "deeplab.ResNet._make_layer", "deeplab.ResNet._make_layer", "deeplab.ResNet._make_layer", "deeplab.ResNet._make_pred_layer", "torch.Linear", "torch.Linear", "torch.Linear", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "deeplab.ResNet.state_dict().copy", "deeplab.ResNet.load_state_dict", "deeplab.ResNet.modules", "torch.utils.model_zoo.load_url", "torch.utils.model_zoo.load_url", "torch.utils.model_zoo.load_url", "torch.utils.model_zoo.load_url", "torch.utils.model_zoo.load_url", "torch.utils.model_zoo.load_url", "torch.utils.model_zoo.load_url", "torch.utils.model_zoo.load_url", "torch.utils.model_zoo.load_url", "str().split", "isinstance", "torch.utils.model_zoo.load_url", "torch.utils.model_zoo.load_url", "torch.utils.model_zoo.load_url", "torch.utils.model_zoo.load_url", "torch.utils.model_zoo.load_url", "torch.utils.model_zoo.load_url", "torch.utils.model_zoo.load_url", "torch.utils.model_zoo.load_url", "torch.utils.model_zoo.load_url", "deeplab.ResNet.state_dict", "m.weight.data.normal_", "isinstance", "str", "m.weight.data.fill_", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.NVlabs_CSG.data.visda17.VisDA17.__init__", "home.repos.pwc.inspect_result.NVlabs_CSG.model.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.NVlabs_CSG.model.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.NVlabs_CSG.model.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.NVlabs_CSG.model.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.NVlabs_CSG.model.deeplab.ResNet._make_pred_layer"], ["    ", "def", "__init__", "(", "self", ",", "num_classes", "=", "1000", ",", "num_seg_classes", "=", "19", ",", "pretrained", "=", "False", ",", "block", "=", "Bottleneck", ",", "layers", "=", "[", "3", ",", "4", ",", "23", ",", "3", "]", ")", ":", "\n", "        ", "self", ".", "inplanes", "=", "64", "\n", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ",", "affine", "=", "affine_par", ")", "\n", "for", "i", "in", "self", ".", "bn1", ".", "parameters", "(", ")", ":", "\n", "            ", "i", ".", "requires_grad", "=", "False", "\n", "", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "# , ceil_mode=True) # change", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "1", ",", "dilation", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "1", ",", "dilation", "=", "4", ")", "\n", "self", ".", "fc_new", "=", "self", ".", "_make_pred_layer", "(", "Classifier_Module", ",", "[", "6", ",", "12", ",", "18", ",", "24", "]", ",", "[", "6", ",", "12", ",", "18", ",", "24", "]", ",", "num_seg_classes", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "512", "*", "block", ".", "expansion", ",", "num_classes", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "1", ",", "1", ")", ")", "\n", "if", "pretrained", ":", "\n", "            ", "model_urls", "=", "{", "\n", "'resnet18'", ":", "'https://download.pytorch.org/models/resnet18-5c106cde.pth'", ",", "\n", "'resnet34'", ":", "'https://download.pytorch.org/models/resnet34-333f7ec4.pth'", ",", "\n", "'resnet50'", ":", "'https://download.pytorch.org/models/resnet50-19c8e357.pth'", ",", "\n", "'resnet101'", ":", "'https://download.pytorch.org/models/resnet101-5d3b4d8f.pth'", ",", "\n", "'resnet152'", ":", "'https://download.pytorch.org/models/resnet152-b121ed2d.pth'", ",", "\n", "}", "\n", "if", "layers", "==", "[", "3", ",", "4", ",", "6", ",", "3", "]", ":", "\n", "                ", "saved_state_dict", "=", "torch", ".", "utils", ".", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet50'", "]", ")", "\n", "", "elif", "layers", "==", "[", "3", ",", "4", ",", "23", ",", "3", "]", ":", "\n", "                ", "saved_state_dict", "=", "torch", ".", "utils", ".", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet101'", "]", ")", "\n", "", "new_params", "=", "self", ".", "state_dict", "(", ")", ".", "copy", "(", ")", "\n", "for", "i", "in", "saved_state_dict", ":", "\n", "                ", "i_parts", "=", "str", "(", "i", ")", ".", "split", "(", "'.'", ")", "\n", "if", "not", "i_parts", "[", "0", "]", "==", "'fc'", ":", "\n", "                    ", "assert", "'.'", ".", "join", "(", "i_parts", "[", "0", ":", "]", ")", "in", "new_params", "\n", "new_params", "[", "'.'", ".", "join", "(", "i_parts", "[", "0", ":", "]", ")", "]", "=", "saved_state_dict", "[", "i", "]", "\n", "", "", "self", ".", "load_state_dict", "(", "new_params", ")", "\n", "", "else", ":", "\n", "            ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                    ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "0.01", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                    ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_CSG.model.deeplab.ResNet._make_layer": [[221, 237], ["torch.Sequential._modules[].parameters", "layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "block"], "methods", ["None"], ["", "", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ",", "dilation", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", "or", "dilation", "==", "2", "or", "dilation", "==", "4", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "planes", "*", "block", ".", "expansion", ",", "affine", "=", "affine_par", ")", ")", "\n", "", "for", "i", "in", "downsample", ".", "_modules", "[", "'1'", "]", ".", "parameters", "(", ")", ":", "\n", "            ", "i", ".", "requires_grad", "=", "False", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "dilation", "=", "(", "dilation", "//", "2", ")", "if", "dilation", ">", "1", "else", "dilation", ",", "downsample", "=", "downsample", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "dilation", "=", "dilation", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_CSG.model.deeplab.ResNet._make_pred_layer": [[238, 240], ["block"], "methods", ["None"], ["", "def", "_make_pred_layer", "(", "self", ",", "block", ",", "dilation_series", ",", "padding_series", ",", "num_classes", ")", ":", "\n", "        ", "return", "block", "(", "dilation_series", ",", "padding_series", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_CSG.model.deeplab.ResNet.forward_fc": [[241, 252], ["deeplab.ResNet.avgpool", "torch.functional.interpolate.reshape", "deeplab.ResNet.fc", "deeplab.ResNet.fc_new", "torch.functional.interpolate", "torch.functional.interpolate", "torch.functional.interpolate", "torch.functional.interpolate.size"], "methods", ["None"], ["", "def", "forward_fc", "(", "self", ",", "f4", ",", "task", "=", "'old'", ")", ":", "\n", "        ", "x", "=", "f4", "\n", "if", "task", "in", "[", "'old'", ",", "'new'", "]", ":", "\n", "            ", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "x", "=", "x", ".", "reshape", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "", "if", "task", "==", "'old'", ":", "\n", "            ", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "", "else", ":", "\n", "            ", "x", "=", "self", ".", "fc_new", "(", "x", ")", "\n", "x", "=", "nn", ".", "functional", ".", "interpolate", "(", "x", ",", "size", "=", "self", ".", "input_size", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_CSG.model.deeplab.ResNet.forward_partial": [[253, 264], ["deeplab.ResNet.layer1", "deeplab.ResNet.layer2", "deeplab.ResNet.layer3", "deeplab.ResNet.layer4"], "methods", ["None"], ["", "def", "forward_partial", "(", "self", ",", "feature", ",", "stage", ")", ":", "\n", "# stage: start forwarding **from** this stage (inclusive)", "\n", "        ", "if", "stage", "<=", "1", ":", "\n", "            ", "feature", "=", "self", ".", "layer1", "(", "feature", ")", "\n", "", "if", "stage", "<=", "2", ":", "\n", "            ", "feature", "=", "self", ".", "layer2", "(", "feature", ")", "\n", "", "if", "stage", "<=", "3", ":", "\n", "            ", "feature", "=", "self", ".", "layer3", "(", "feature", ")", "\n", "", "if", "stage", "<=", "4", ":", "\n", "            ", "feature", "=", "self", ".", "layer4", "(", "feature", ")", "\n", "", "return", "feature", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_CSG.model.deeplab.ResNet.forward_backbone": [[265, 283], ["deeplab.ResNet.conv1", "deeplab.ResNet.bn1", "deeplab.ResNet.relu", "deeplab.ResNet.maxpool", "deeplab.ResNet.layer1", "deeplab.ResNet.layer2", "deeplab.ResNet.layer3", "deeplab.ResNet.layer4", "deeplab.ResNet.avgpool().view", "deeplab.ResNet.size", "deeplab.ResNet.avgpool"], "methods", ["None"], ["", "def", "forward_backbone", "(", "self", ",", "x", ",", "output_features", "=", "[", "'layer4'", "]", ")", ":", "\n", "        ", "features", "=", "{", "}", "\n", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "if", "'layer0'", "in", "output_features", ":", "features", "[", "'layer0'", "]", "=", "f0", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "f1", "=", "self", ".", "layer1", "(", "x", ")", "\n", "if", "'layer1'", "in", "output_features", ":", "features", "[", "'layer1'", "]", "=", "f1", "\n", "f2", "=", "self", ".", "layer2", "(", "f1", ")", "\n", "if", "'layer2'", "in", "output_features", ":", "features", "[", "'layer2'", "]", "=", "f2", "\n", "f3", "=", "self", ".", "layer3", "(", "f2", ")", "\n", "if", "'layer3'", "in", "output_features", ":", "features", "[", "'layer3'", "]", "=", "f3", "\n", "f4", "=", "self", ".", "layer4", "(", "f3", ")", "\n", "if", "'layer4'", "in", "output_features", ":", "features", "[", "'layer4'", "]", "=", "f4", "\n", "if", "'gap'", "in", "output_features", ":", "\n", "            ", "features", "[", "'gap'", "]", "=", "self", ".", "avgpool", "(", "f4", ")", ".", "view", "(", "f4", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "", "return", "f4", ",", "features", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_CSG.model.deeplab.ResNet.forward": [[284, 294], ["deeplab.ResNet.forward_backbone", "deeplab.ResNet.forward_fc", "deeplab.ResNet.size"], "methods", ["home.repos.pwc.inspect_result.NVlabs_CSG.model.resnet.ResNet.forward_backbone", "home.repos.pwc.inspect_result.NVlabs_CSG.model.resnet.ResNet.forward_fc"], ["", "def", "forward", "(", "self", ",", "x", ",", "output_features", "=", "[", "'layer4'", "]", ",", "task", "=", "'old'", ")", ":", "\n", "        ", "'''\n        task: 'old' | 'new' | 'new_seg'\n        'old', 'new': classification tasks (ImageNet or Visda)\n        'new_seg': segmentation head (convs)\n        '''", "\n", "self", ".", "input_size", "=", "x", ".", "size", "(", ")", "[", "2", ":", "]", "\n", "f4", ",", "features", "=", "self", ".", "forward_backbone", "(", "x", ",", "output_features", ")", "\n", "x", "=", "self", ".", "forward_fc", "(", "f4", ",", "task", "=", "task", ")", "\n", "return", "x", ",", "features", "\n", "", "", ""]], "home.repos.pwc.inspect_result.NVlabs_CSG.model.deeplab.conv3x3": [[13, 17], ["torch.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"3x3 convolution with padding\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_CSG.model.csg_builder.CSG.__init__": [[23, 91], ["torch.Module.__init__", "base_encoder", "base_encoder", "csg_builder.CSG.encoder_q.fc.parameters", "csg_builder.CSG.encoder_k.parameters", "get_head", "torch.ModuleDict", "torch.ModuleDict", "torch.ModuleDict", "torch.ModuleDict", "zip", "csg_builder.CSG.register_buffer", "setattr", "csg_builder.CSG.register_buffer", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "csg_builder.CSG.encoder_q.fc_csg.parameters", "csg_builder.CSG.encoder_k.fc_csg.parameters", "param_k.data.copy_", "type", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.functional.normalize", "torch.functional.normalize", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "len", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "type", "getattr", "range", "[].conv3.weight.size", "csg_builder.CSG.encoder_q.conv1.weight.size", "csg_builder.CSG.encoder_q.conv1.weight.size", "[].conv3.weight.size", "range", "[].conv2.weight.size", "csg_builder.CSG.encoder_q.conv1.weight.size", "[].conv2.weight.size", "range", "getattr", "getattr", "getattr", "getattr"], "methods", ["home.repos.pwc.inspect_result.NVlabs_CSG.data.visda17.VisDA17.__init__", "home.repos.pwc.inspect_result.NVlabs_CSG.utils.img_utils.normalize", "home.repos.pwc.inspect_result.NVlabs_CSG.utils.img_utils.normalize"], ["    ", "def", "__init__", "(", "self", ",", "base_encoder", ",", "get_head", "=", "None", ",", "dim", "=", "128", ",", "K", "=", "65536", ",", "m", "=", "0.999", ",", "T", "=", "0.07", ",", "mlp", "=", "True", ",", "stages", "=", "[", "4", "]", ",", "num_class", "=", "12", ",", "chunks", "=", "[", "1", "]", ",", "task", "=", "'new'", ",", "\n", "base_encoder_kwargs", "=", "{", "}", ",", "apool", "=", "True", "\n", ")", ":", "\n", "        ", "\"\"\"\n        dim: feature dimension (default: 128)\n        K: queue size; number of negative keys (default: 65536)\n        m: momentum of updating key encoder (default: 0.999)\n        T: softmax temperature (default: 0.07)\n        \"\"\"", "\n", "super", "(", "CSG", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "K", "=", "K", "\n", "self", ".", "m", "=", "m", "\n", "self", ".", "T", "=", "T", "\n", "self", ".", "stages", "=", "stages", "\n", "self", ".", "mlp", "=", "mlp", "\n", "self", ".", "base_encoder", "=", "base_encoder", "\n", "self", ".", "chunks", "=", "chunks", "# chunk feature (segmentation)", "\n", "self", ".", "task", "=", "task", "# new, new-seg", "\n", "self", ".", "attentions", "=", "[", "None", "for", "_", "in", "range", "(", "len", "(", "stages", ")", ")", "]", "\n", "self", ".", "apool", "=", "apool", "\n", "\n", "# create the encoders", "\n", "# num_classes is the output fc dimension", "\n", "self", ".", "encoder_q", "=", "base_encoder", "(", "num_classes", "=", "dim", ",", "pretrained", "=", "True", ",", "**", "base_encoder_kwargs", ")", "# q is for new task", "\n", "self", ".", "encoder_k", "=", "base_encoder", "(", "num_classes", "=", "dim", ",", "pretrained", "=", "True", ",", "**", "base_encoder_kwargs", ")", "# ######", "\n", "if", "get_head", "is", "not", "None", ":", "\n", "            ", "num_ftrs", "=", "self", ".", "encoder_q", ".", "fc", ".", "in_features", "\n", "self", ".", "encoder_q", ".", "fc_new", "=", "get_head", "(", "num_ftrs", ",", "num_class", ")", "\n", "", "for", "param", "in", "self", ".", "encoder_q", ".", "fc", ".", "parameters", "(", ")", ":", "\n", "            ", "param", ".", "requires_grad", "=", "False", "\n", "\n", "", "if", "mlp", ":", "\n", "            ", "fc_q", "=", "{", "}", "\n", "fc_k", "=", "{", "}", "\n", "for", "stage", "in", "stages", ":", "\n", "                ", "if", "stage", ">", "0", ":", "\n", "                    ", "try", ":", "\n", "# BottleNeck", "\n", "                        ", "dim_mlp", "=", "getattr", "(", "self", ".", "encoder_q", ",", "\"layer%d\"", "%", "stage", ")", "[", "-", "1", "]", ".", "conv3", ".", "weight", ".", "size", "(", ")", "[", "0", "]", "\n", "", "except", "torch", ".", "nn", ".", "modules", ".", "module", ".", "ModuleAttributeError", ":", "\n", "# BasicBlock", "\n", "                        ", "dim_mlp", "=", "getattr", "(", "self", ".", "encoder_q", ",", "\"layer%d\"", "%", "stage", ")", "[", "-", "1", "]", ".", "conv2", ".", "weight", ".", "size", "(", ")", "[", "0", "]", "\n", "", "", "elif", "stage", "==", "0", ":", "\n", "                    ", "dim_mlp", "=", "self", ".", "encoder_q", ".", "conv1", ".", "weight", ".", "size", "(", ")", "[", "0", "]", "\n", "", "fc_q", "[", "\"stage%d\"", "%", "(", "stage", ")", "]", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "dim_mlp", ",", "dim_mlp", ")", ",", "nn", ".", "ReLU", "(", ")", ",", "nn", ".", "Linear", "(", "dim_mlp", ",", "dim", ")", ")", "\n", "fc_k", "[", "\"stage%d\"", "%", "(", "stage", ")", "]", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "dim_mlp", ",", "dim_mlp", ")", ",", "nn", ".", "ReLU", "(", ")", ",", "nn", ".", "Linear", "(", "dim_mlp", ",", "dim", ")", ")", "\n", "", "self", ".", "encoder_q", ".", "fc_csg", "=", "nn", ".", "ModuleDict", "(", "fc_q", ")", "\n", "self", ".", "encoder_k", ".", "fc_csg", "=", "nn", ".", "ModuleDict", "(", "fc_k", ")", "\n", "for", "param_q", ",", "param_k", "in", "zip", "(", "self", ".", "encoder_q", ".", "fc_csg", ".", "parameters", "(", ")", ",", "self", ".", "encoder_k", ".", "fc_csg", ".", "parameters", "(", ")", ")", ":", "\n", "                ", "param_k", ".", "data", ".", "copy_", "(", "param_q", ".", "data", ")", "\n", "\n", "", "", "for", "param_k", "in", "self", ".", "encoder_k", ".", "parameters", "(", ")", ":", "\n", "            ", "param_k", ".", "requires_grad", "=", "False", "# not update by gradient", "\n", "\n", "", "if", "type", "(", "self", ".", "encoder_q", ")", ".", "__name__", "==", "\"ResNet\"", ":", "\n", "            ", "try", ":", "\n", "# BottleNeck", "\n", "                ", "dims", "=", "[", "self", ".", "encoder_q", ".", "conv1", ".", "weight", ".", "size", "(", ")", "[", "0", "]", "]", "+", "[", "getattr", "(", "self", ".", "encoder_q", ",", "\"layer%d\"", "%", "stage", ")", "[", "-", "1", "]", ".", "conv3", ".", "weight", ".", "size", "(", ")", "[", "0", "]", "for", "stage", "in", "range", "(", "1", ",", "5", ")", "]", "\n", "", "except", ":", "\n", "# BasicBlock", "\n", "                ", "dims", "=", "[", "self", ".", "encoder_q", ".", "conv1", ".", "weight", ".", "size", "(", ")", "[", "0", "]", "]", "+", "[", "getattr", "(", "self", ".", "encoder_q", ",", "\"layer%d\"", "%", "stage", ")", "[", "-", "1", "]", ".", "conv2", ".", "weight", ".", "size", "(", ")", "[", "0", "]", "for", "stage", "in", "range", "(", "1", ",", "5", ")", "]", "\n", "", "", "elif", "type", "(", "self", ".", "encoder_q", ")", ".", "__name__", "==", "\"DigitNet\"", ":", "\n", "                ", "dims", "=", "[", "64", "for", "stage", "in", "range", "(", "1", ",", "5", ")", "]", "\n", "", "for", "stage", "in", "stages", ":", "\n", "            ", "self", ".", "register_buffer", "(", "\"queue%d\"", "%", "(", "stage", ")", ",", "torch", ".", "randn", "(", "dim", ",", "K", ")", ")", "\n", "setattr", "(", "self", ",", "\"queue%d\"", "%", "(", "stage", ")", ",", "nn", ".", "functional", ".", "normalize", "(", "getattr", "(", "self", ",", "\"queue%d\"", "%", "(", "stage", ")", ")", ",", "dim", "=", "0", ")", ")", "\n", "self", ".", "register_buffer", "(", "\"queue_ptr%d\"", "%", "(", "stage", ")", ",", "torch", ".", "zeros", "(", "1", ",", "dtype", "=", "torch", ".", "long", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_CSG.model.csg_builder.CSG.control_q_backbone_gradient": [[92, 97], ["csg_builder.CSG.encoder_q.named_parameters"], "methods", ["None"], ["", "", "def", "control_q_backbone_gradient", "(", "self", ",", "control", ")", ":", "\n", "        ", "for", "name", ",", "param", "in", "self", ".", "encoder_q", ".", "named_parameters", "(", ")", ":", "\n", "            ", "if", "'fc_new'", "not", "in", "name", ":", "\n", "                ", "param", ".", "requires_grad", "=", "control", "\n", "", "", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_CSG.model.csg_builder.CSG._momentum_update_key_encoder": [[98, 105], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "zip", "csg_builder.CSG.encoder_q.fc_csg.parameters", "csg_builder.CSG.encoder_k.fc_csg.parameters"], "methods", ["None"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "_momentum_update_key_encoder", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Momentum update of the key encoder\n        \"\"\"", "\n", "for", "param_q", ",", "param_k", "in", "zip", "(", "self", ".", "encoder_q", ".", "fc_csg", ".", "parameters", "(", ")", ",", "self", ".", "encoder_k", ".", "fc_csg", ".", "parameters", "(", ")", ")", ":", "\n", "            ", "param_k", ".", "data", "=", "param_k", ".", "data", "*", "self", ".", "m", "+", "param_q", ".", "data", "*", "(", "1.", "-", "self", ".", "m", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_CSG.model.csg_builder.CSG._dequeue_and_enqueue": [[106, 122], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "csg_builder.concat_all_gather", "int", "getattr", "getattr", "getattr", "getattr", "getattr"], "methods", ["home.repos.pwc.inspect_result.NVlabs_CSG.model.csg_builder.concat_all_gather"], ["", "", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "_dequeue_and_enqueue", "(", "self", ",", "keys", ",", "stage", ")", ":", "\n", "# gather keys before updating queue", "\n", "        ", "keys", "=", "concat_all_gather", "(", "keys", ")", "\n", "\n", "batch_size", "=", "keys", ".", "shape", "[", "0", "]", "\n", "\n", "ptr", "=", "int", "(", "getattr", "(", "self", ",", "\"queue_ptr%d\"", "%", "(", "stage", ")", ")", ")", "\n", "\n", "if", "ptr", "+", "batch_size", "<=", "self", ".", "K", ":", "\n", "            ", "getattr", "(", "self", ",", "\"queue%d\"", "%", "(", "stage", ")", ")", "[", ":", ",", "ptr", ":", "ptr", "+", "batch_size", "]", "=", "keys", ".", "T", "\n", "", "else", ":", "\n", "            ", "getattr", "(", "self", ",", "\"queue%d\"", "%", "(", "stage", ")", ")", "[", ":", ",", "ptr", ":", "]", "=", "keys", "[", ":", "(", "self", ".", "K", "-", "ptr", ")", "]", ".", "T", "\n", "getattr", "(", "self", ",", "\"queue%d\"", "%", "(", "stage", ")", ")", "[", ":", ",", ":", "ptr", "+", "batch_size", "-", "self", ".", "K", "]", "=", "keys", "[", ":", "(", "ptr", "+", "batch_size", "-", "self", ".", "K", ")", "]", ".", "T", "\n", "", "ptr", "=", "(", "ptr", "+", "batch_size", ")", "%", "self", ".", "K", "# move pointer", "\n", "getattr", "(", "self", ",", "\"queue_ptr%d\"", "%", "(", "stage", ")", ")", "[", "0", "]", "=", "ptr", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_CSG.model.csg_builder.CSG.adaptive_pool": [[123, 133], ["features.size", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "attention.view.view.view", "features.size", "attn_from.size", "attention.view.view.view().sum().view().repeat", "torch.functional.adaptive_avg_pool2d().view", "torch.functional.adaptive_avg_pool2d().view", "attention.view.view.view().sum().view", "torch.functional.adaptive_avg_pool2d", "torch.functional.adaptive_avg_pool2d", "attention.view.view.view().sum", "attention.view.view.view"], "methods", ["None"], ["", "def", "adaptive_pool", "(", "self", ",", "features", ",", "attn_from", ",", "stage_idx", ")", ":", "\n", "# features and attn_from are paired feature maps, of same size", "\n", "        ", "assert", "features", ".", "size", "(", ")", "==", "attn_from", ".", "size", "(", ")", "\n", "N", ",", "C", ",", "H", ",", "W", "=", "features", ".", "size", "(", ")", "\n", "assert", "(", "attn_from", ">=", "0", ")", ".", "float", "(", ")", ".", "sum", "(", ")", "==", "N", "*", "C", "*", "H", "*", "W", "\n", "attention", "=", "torch", ".", "einsum", "(", "'nchw,nc->nhw'", ",", "[", "attn_from", ",", "nn", ".", "functional", ".", "adaptive_avg_pool2d", "(", "attn_from", ",", "(", "1", ",", "1", ")", ")", ".", "view", "(", "N", ",", "C", ")", "]", ")", "\n", "attention", "=", "attention", "/", "attention", ".", "view", "(", "N", ",", "-", "1", ")", ".", "sum", "(", "1", ")", ".", "view", "(", "N", ",", "1", ",", "1", ")", ".", "repeat", "(", "1", ",", "H", ",", "W", ")", "\n", "attention", "=", "attention", ".", "view", "(", "N", ",", "1", ",", "H", ",", "W", ")", "\n", "# output size: N, C", "\n", "return", "(", "features", "*", "attention", ")", ".", "view", "(", "N", ",", "C", ",", "-", "1", ")", ".", "sum", "(", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_CSG.model.csg_builder.CSG.forward": [[134, 213], ["csg_builder.CSG.encoder_q", "csg_builder.CSG.encoder_k.forward_backbone", "enumerate", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "csg_builder.chunk_feature", "torch.functional.normalize", "torch.functional.normalize", "torch.einsum().unsqueeze", "torch.einsum().unsqueeze", "torch.einsum().unsqueeze", "torch.einsum().unsqueeze", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "csg_builder.CSG._dequeue_and_enqueue", "results[].append", "results[].append", "csg_builder.CSG._momentum_update_key_encoder", "csg_builder.CSG.encoder_q.forward_backbone", "csg_builder.chunk_feature", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "csg_builder.chunk_feature", "torch.functional.normalize", "torch.functional.normalize", "csg_builder.CSG.adaptive_pool", "csg_builder.CSG.encoder_q.avgpool().view", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "getattr().clone().detach", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "csg_builder.CSG.adaptive_pool", "csg_builder.CSG.encoder_q.avgpool().view", "csg_builder.CSG.adaptive_pool", "csg_builder.CSG.encoder_k.avgpool().view", "csg_builder.CSG.encoder_q.avgpool", "features_new[].size", "csg_builder.CSG.adaptive_pool", "csg_builder.CSG.encoder_k.avgpool().view", "getattr().clone", "csg_builder.CSG.encoder_q.avgpool", "features_new[].size", "csg_builder.CSG.encoder_k.avgpool", "features_old[].size", "csg_builder.CSG.encoder_k.avgpool", "features_old[].size", "getattr"], "methods", ["home.repos.pwc.inspect_result.NVlabs_CSG.model.resnet.ResNet.forward_backbone", "home.repos.pwc.inspect_result.NVlabs_CSG.model.csg_builder.chunk_feature", "home.repos.pwc.inspect_result.NVlabs_CSG.utils.img_utils.normalize", "home.repos.pwc.inspect_result.NVlabs_CSG.utils.img_utils.normalize", "home.repos.pwc.inspect_result.NVlabs_CSG.model.csg_builder.CSG._dequeue_and_enqueue", "home.repos.pwc.inspect_result.NVlabs_CSG.model.csg_builder.CSG._momentum_update_key_encoder", "home.repos.pwc.inspect_result.NVlabs_CSG.model.resnet.ResNet.forward_backbone", "home.repos.pwc.inspect_result.NVlabs_CSG.model.csg_builder.chunk_feature", "home.repos.pwc.inspect_result.NVlabs_CSG.model.csg_builder.chunk_feature", "home.repos.pwc.inspect_result.NVlabs_CSG.utils.img_utils.normalize", "home.repos.pwc.inspect_result.NVlabs_CSG.utils.img_utils.normalize", "home.repos.pwc.inspect_result.NVlabs_CSG.model.csg_builder.CSG.adaptive_pool", "home.repos.pwc.inspect_result.NVlabs_CSG.model.csg_builder.CSG.adaptive_pool", "home.repos.pwc.inspect_result.NVlabs_CSG.model.csg_builder.CSG.adaptive_pool", "home.repos.pwc.inspect_result.NVlabs_CSG.model.csg_builder.CSG.adaptive_pool"], ["", "def", "forward", "(", "self", ",", "im_q", ",", "im_k", ")", ":", "\n", "        ", "\"\"\"\n        Input:\n            im_q: a batch of query images\n            im_k: a batch of key images\n        Output:\n            logits, targets\n        \"\"\"", "\n", "if", "im_k", "is", "None", ":", "\n", "            ", "im_k", "=", "im_q", "\n", "\n", "", "output", ",", "features_new", "=", "self", ".", "encoder_q", "(", "im_q", ",", "output_features", "=", "[", "\"layer%d\"", "%", "stage", "for", "stage", "in", "self", ".", "stages", "]", ",", "task", "=", "self", ".", "task", ")", "\n", "results", "=", "{", "'output'", ":", "output", "}", "\n", "\n", "results", "[", "'predictions_csg'", "]", "=", "[", "]", "\n", "results", "[", "'targets_csg'", "]", "=", "[", "]", "\n", "# predictions: cosine b/w q and k", "\n", "# targets: zeros", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "# no gradient to keys", "\n", "            ", "if", "self", ".", "mlp", ":", "\n", "                ", "self", ".", "_momentum_update_key_encoder", "(", ")", "# update the key encoder", "\n", "", "if", "self", ".", "apool", ":", "\n", "# A-Pool: prepare attention for teacher: get feature of im_k by encoder_q", "\n", "                ", "_", ",", "features_new_k", "=", "self", ".", "encoder_q", ".", "forward_backbone", "(", "im_k", ",", "output_features", "=", "[", "\"layer%d\"", "%", "stage", "for", "stage", "in", "self", ".", "stages", "]", ")", "\n", "", "", "_", ",", "features_old", "=", "self", ".", "encoder_k", ".", "forward_backbone", "(", "im_k", ",", "output_features", "=", "[", "\"layer%d\"", "%", "stage", "for", "stage", "in", "self", ".", "stages", "]", ")", "\n", "for", "idx", ",", "stage", "in", "enumerate", "(", "self", ".", "stages", ")", ":", "\n", "            ", "chunk", "=", "self", ".", "chunks", "[", "idx", "]", "\n", "# compute query features", "\n", "\n", "q_feature", "=", "chunk_feature", "(", "features_new", "[", "\"layer%d\"", "%", "stage", "]", ",", "chunk", ")", "\n", "if", "self", ".", "apool", ":", "\n", "# A-Pool prepare attention for teacher: get feature of im_k by encoder_q", "\n", "                ", "q_feature_k", "=", "chunk_feature", "(", "features_new_k", "[", "\"layer%d\"", "%", "stage", "]", ",", "chunk", ")", "\n", "", "if", "self", ".", "mlp", ":", "\n", "                ", "if", "self", ".", "apool", ":", "\n", "                    ", "q", "=", "self", ".", "encoder_q", ".", "fc_csg", "[", "\"stage%d\"", "%", "(", "stage", ")", "]", "(", "self", ".", "adaptive_pool", "(", "q_feature", ",", "q_feature", ",", "idx", ")", ")", "# A-Pool", "\n", "", "else", ":", "\n", "                    ", "q", "=", "self", ".", "encoder_q", ".", "fc_csg", "[", "\"stage%d\"", "%", "(", "stage", ")", "]", "(", "self", ".", "encoder_q", ".", "avgpool", "(", "q_feature", ")", ".", "view", "(", "features_new", "[", "\"layer%d\"", "%", "stage", "]", ".", "size", "(", "0", ")", "*", "chunk", "**", "2", ",", "-", "1", ")", ")", "\n", "", "", "else", ":", "\n", "                ", "if", "self", ".", "apool", "!=", "'none'", ":", "\n", "                    ", "q", "=", "self", ".", "adaptive_pool", "(", "q_feature", ",", "q_feature", ",", "idx", ")", "# A-Pool", "\n", "", "else", ":", "\n", "                    ", "q", "=", "self", ".", "encoder_q", ".", "avgpool", "(", "q_feature", ")", ".", "view", "(", "features_new", "[", "\"layer%d\"", "%", "stage", "]", ".", "size", "(", "0", ")", "*", "chunk", "**", "2", ",", "-", "1", ")", "\n", "", "", "q", "=", "nn", ".", "functional", ".", "normalize", "(", "q", ",", "dim", "=", "1", ")", "\n", "\n", "# compute key features", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "# no gradient to keys", "\n", "                ", "k_feature", "=", "chunk_feature", "(", "features_old", "[", "\"layer%d\"", "%", "stage", "]", ",", "chunk", ")", "\n", "# A-Pool #############", "\n", "if", "self", ".", "mlp", ":", "\n", "                    ", "if", "self", ".", "apool", ":", "\n", "                        ", "k", "=", "self", ".", "encoder_k", ".", "fc_csg", "[", "\"stage%d\"", "%", "(", "stage", ")", "]", "(", "self", ".", "adaptive_pool", "(", "k_feature", ",", "q_feature_k", ",", "idx", ")", ")", "# A-Pool", "\n", "", "else", ":", "\n", "                        ", "k", "=", "self", ".", "encoder_k", ".", "fc_csg", "[", "\"stage%d\"", "%", "(", "stage", ")", "]", "(", "self", ".", "encoder_k", ".", "avgpool", "(", "k_feature", ")", ".", "view", "(", "features_old", "[", "\"layer%d\"", "%", "stage", "]", ".", "size", "(", "0", ")", "*", "chunk", "**", "2", ",", "-", "1", ")", ")", "\n", "", "", "else", ":", "\n", "                    ", "if", "self", ".", "apool", ":", "\n", "                        ", "k", "=", "self", ".", "adaptive_pool", "(", "k_feature", ",", "q_feature_k", ",", "idx", ")", "# A-Pool", "\n", "", "else", ":", "\n", "                        ", "k", "=", "self", ".", "encoder_k", ".", "avgpool", "(", "k_feature", ")", ".", "view", "(", "features_old", "[", "\"layer%d\"", "%", "stage", "]", ".", "size", "(", "0", ")", "*", "chunk", "**", "2", ",", "-", "1", ")", "\n", "# #####################", "\n", "", "", "k", "=", "nn", ".", "functional", ".", "normalize", "(", "k", ",", "dim", "=", "1", ")", "\n", "\n", "# compute logits", "\n", "# positive logits: Nx1", "\n", "", "l_pos", "=", "torch", ".", "einsum", "(", "'nc,nc->n'", ",", "[", "q", ",", "k", "]", ")", ".", "unsqueeze", "(", "-", "1", ")", "\n", "# negative logits: NxK", "\n", "l_neg", "=", "torch", ".", "einsum", "(", "'nc,ck->nk'", ",", "[", "q", ",", "getattr", "(", "self", ",", "\"queue%d\"", "%", "(", "stage", ")", ")", ".", "clone", "(", ")", ".", "detach", "(", ")", "]", ")", "\n", "# logits: Nx(1+K)", "\n", "logits", "=", "torch", ".", "cat", "(", "[", "l_pos", ",", "l_neg", "]", ",", "dim", "=", "1", ")", "\n", "# apply temperature", "\n", "logits", "/=", "self", ".", "T", "\n", "# labels: positive key indicators", "\n", "labels", "=", "torch", ".", "zeros", "(", "logits", ".", "shape", "[", "0", "]", ",", "dtype", "=", "torch", ".", "long", ")", ".", "cuda", "(", ")", "\n", "self", ".", "_dequeue_and_enqueue", "(", "k", ",", "stage", ")", "\n", "\n", "results", "[", "'predictions_csg'", "]", ".", "append", "(", "logits", ")", "\n", "results", "[", "'targets_csg'", "]", ".", "append", "(", "labels", ")", "\n", "\n", "", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_CSG.model.csg_builder.chunk_feature": [[9, 20], ["torch.chunk", "torch.chunk", "torch.cat", "torch.cat", "torch.chunk", "torch.chunk"], "function", ["None"], ["def", "chunk_feature", "(", "feature", ",", "chunk", ")", ":", "\n", "    ", "if", "chunk", "==", "1", ":", "\n", "        ", "return", "feature", "\n", "# B x C x H x W => (B*chunk^2) x C x (H//chunk) x (W//chunk)", "\n", "", "_f_new", "=", "torch", ".", "chunk", "(", "feature", ",", "chunk", ",", "dim", "=", "2", ")", "\n", "_f_new", "=", "[", "torch", ".", "chunk", "(", "f", ",", "chunk", ",", "dim", "=", "3", ")", "for", "f", "in", "_f_new", "]", "\n", "f_new", "=", "[", "]", "\n", "for", "f", "in", "_f_new", ":", "\n", "        ", "f_new", "+=", "f", "\n", "", "f_new", "=", "torch", ".", "cat", "(", "f_new", ",", "dim", "=", "0", ")", "\n", "return", "f_new", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_CSG.model.csg_builder.concat_all_gather": [[216, 230], ["torch.no_grad", "torch.no_grad", "torch.cat", "torch.cat", "torch.distributed.all_gather", "torch.distributed.all_gather", "torch.ones_like", "torch.ones_like", "range", "torch.distributed.get_world_size", "torch.distributed.get_world_size"], "function", ["None"], ["", "", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "concat_all_gather", "(", "tensor", ")", ":", "\n", "    ", "\"\"\"\n    Performs all_gather operation on the provided tensors.\n    *** Warning ***: torch.distributed.all_gather has no gradient.\n    \"\"\"", "\n", "try", ":", "\n", "        ", "tensors_gather", "=", "[", "torch", ".", "ones_like", "(", "tensor", ")", "for", "_", "in", "range", "(", "torch", ".", "distributed", ".", "get_world_size", "(", ")", ")", "]", "\n", "torch", ".", "distributed", ".", "all_gather", "(", "tensors_gather", ",", "tensor", ",", "async_op", "=", "False", ")", "\n", "", "except", "Exception", ":", "\n", "        ", "tensors_gather", "=", "[", "tensor", "]", "\n", "\n", "", "output", "=", "torch", ".", "cat", "(", "tensors_gather", ",", "dim", "=", "0", ")", "\n", "return", "output", "\n", "", ""]], "home.repos.pwc.inspect_result.NVlabs_CSG.model.resnet.BasicBlock.__init__": [[41, 58], ["torch.Module.__init__", "resnet.conv3x3", "norm_layer", "torch.ReLU", "torch.ReLU", "resnet.conv3x3", "norm_layer", "ValueError", "NotImplementedError"], "methods", ["home.repos.pwc.inspect_result.NVlabs_CSG.data.visda17.VisDA17.__init__", "home.repos.pwc.inspect_result.NVlabs_CSG.model.resnet.conv3x3", "home.repos.pwc.inspect_result.NVlabs_CSG.model.resnet.conv3x3"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ",", "groups", "=", "1", ",", "\n", "base_width", "=", "64", ",", "dilation", "=", "1", ",", "norm_layer", "=", "None", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "norm_layer", "is", "None", ":", "\n", "            ", "norm_layer", "=", "nn", ".", "BatchNorm2d", "\n", "", "if", "groups", "!=", "1", "or", "base_width", "!=", "64", ":", "\n", "            ", "raise", "ValueError", "(", "'BasicBlock only supports groups=1 and base_width=64'", ")", "\n", "", "if", "dilation", ">", "1", ":", "\n", "            ", "raise", "NotImplementedError", "(", "\"Dilation > 1 not supported in BasicBlock\"", ")", "\n", "# Both self.conv1 and self.downsample layers downsample the input when stride != 1", "\n", "", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn1", "=", "norm_layer", "(", "planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "norm_layer", "(", "planes", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_CSG.model.resnet.BasicBlock.forward": [[59, 76], ["resnet.BasicBlock.conv1", "resnet.BasicBlock.bn1", "resnet.BasicBlock.relu", "resnet.BasicBlock.conv2", "resnet.BasicBlock.bn2", "resnet.BasicBlock.relu", "resnet.BasicBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "identity", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "identity", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "identity", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_CSG.model.resnet.Bottleneck.__init__": [[81, 99], ["torch.Module.__init__", "resnet.conv1x1", "norm_layer", "resnet.conv3x3", "norm_layer", "resnet.conv1x1", "norm_layer", "torch.ReLU", "torch.ReLU", "int"], "methods", ["home.repos.pwc.inspect_result.NVlabs_CSG.data.visda17.VisDA17.__init__", "home.repos.pwc.inspect_result.NVlabs_CSG.model.resnet.conv1x1", "home.repos.pwc.inspect_result.NVlabs_CSG.model.resnet.conv3x3", "home.repos.pwc.inspect_result.NVlabs_CSG.model.resnet.conv1x1"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ",", "groups", "=", "1", ",", "\n", "base_width", "=", "64", ",", "dilation", "=", "1", ",", "norm_layer", "=", "None", ",", "\n", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "norm_layer", "is", "None", ":", "\n", "            ", "norm_layer", "=", "nn", ".", "BatchNorm2d", "\n", "", "width", "=", "int", "(", "planes", "*", "(", "base_width", "/", "64.", ")", ")", "*", "groups", "\n", "# Both self.conv2 and self.downsample layers downsample the input when stride != 1", "\n", "self", ".", "conv1", "=", "conv1x1", "(", "inplanes", ",", "width", ")", "\n", "self", ".", "bn1", "=", "norm_layer", "(", "width", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "width", ",", "width", ",", "stride", ",", "groups", ",", "dilation", ")", "\n", "self", ".", "bn2", "=", "norm_layer", "(", "width", ")", "\n", "self", ".", "conv3", "=", "conv1x1", "(", "width", ",", "planes", "*", "self", ".", "expansion", ")", "\n", "self", ".", "bn3", "=", "norm_layer", "(", "planes", "*", "self", ".", "expansion", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "last", "=", "last", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_CSG.model.resnet.Bottleneck.forward": [[100, 121], ["resnet.Bottleneck.conv1", "resnet.Bottleneck.bn1", "resnet.Bottleneck.relu", "resnet.Bottleneck.conv2", "resnet.Bottleneck.bn2", "resnet.Bottleneck.relu", "resnet.Bottleneck.conv3", "resnet.Bottleneck.bn3", "resnet.Bottleneck.relu", "resnet.Bottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "identity", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "identity", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "identity", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_CSG.model.resnet.ResNet.__init__": [[125, 175], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Linear", "torch.Linear", "resnet.ResNet.modules", "len", "ValueError", "isinstance", "resnet.ResNet.modules", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "isinstance", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "isinstance", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.NVlabs_CSG.data.visda17.VisDA17.__init__", "home.repos.pwc.inspect_result.NVlabs_CSG.model.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.NVlabs_CSG.model.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.NVlabs_CSG.model.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.NVlabs_CSG.model.resnet.ResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "layers", ",", "num_classes", "=", "1000", ",", "zero_init_residual", "=", "False", ",", "\n", "groups", "=", "1", ",", "width_per_group", "=", "64", ",", "replace_stride_with_dilation", "=", "None", ",", "\n", "norm_layer", "=", "None", ")", ":", "\n", "        ", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "norm_layer", "is", "None", ":", "\n", "            ", "norm_layer", "=", "nn", ".", "BatchNorm2d", "\n", "", "self", ".", "_norm_layer", "=", "norm_layer", "\n", "\n", "self", ".", "inplanes", "=", "64", "\n", "self", ".", "dilation", "=", "1", "\n", "if", "replace_stride_with_dilation", "is", "None", ":", "\n", "# each element in the tuple indicates if we should replace", "\n", "# the 2x2 stride with a dilated convolution instead", "\n", "            ", "replace_stride_with_dilation", "=", "[", "False", ",", "False", ",", "False", "]", "\n", "", "if", "len", "(", "replace_stride_with_dilation", ")", "!=", "3", ":", "\n", "            ", "raise", "ValueError", "(", "\"replace_stride_with_dilation should be None \"", "\n", "\"or a 3-element tuple, got {}\"", ".", "format", "(", "replace_stride_with_dilation", ")", ")", "\n", "", "self", ".", "groups", "=", "groups", "\n", "self", ".", "base_width", "=", "width_per_group", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "self", ".", "inplanes", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "norm_layer", "(", "self", ".", "inplanes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ",", "\n", "dilate", "=", "replace_stride_with_dilation", "[", "0", "]", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ",", "\n", "dilate", "=", "replace_stride_with_dilation", "[", "1", "]", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "2", ",", "\n", "dilate", "=", "replace_stride_with_dilation", "[", "2", "]", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "512", "*", "block", ".", "expansion", ",", "num_classes", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ",", "nonlinearity", "=", "'relu'", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "(", "nn", ".", "BatchNorm2d", ",", "nn", ".", "GroupNorm", ")", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n", "# Zero-initialize the last BN in each residual branch,", "\n", "# so that the residual branch starts with zeros, and each residual block behaves like an identity.", "\n", "# This improves the model by 0.2~0.3% according to https://arxiv.org/abs/1706.02677", "\n", "", "", "if", "zero_init_residual", ":", "\n", "            ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "m", ",", "Bottleneck", ")", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bn3", ".", "weight", ",", "0", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "BasicBlock", ")", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bn2", ".", "weight", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_CSG.model.resnet.ResNet._make_layer": [[176, 200], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "resnet.conv1x1", "norm_layer", "block"], "methods", ["home.repos.pwc.inspect_result.NVlabs_CSG.model.resnet.conv1x1"], ["", "", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ",", "dilate", "=", "False", ")", ":", "\n", "        ", "norm_layer", "=", "self", ".", "_norm_layer", "\n", "downsample", "=", "None", "\n", "previous_dilation", "=", "self", ".", "dilation", "\n", "if", "dilate", ":", "\n", "            ", "self", ".", "dilation", "*=", "stride", "\n", "stride", "=", "1", "\n", "", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "conv1x1", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "stride", ")", ",", "\n", "norm_layer", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ",", "self", ".", "groups", ",", "\n", "self", ".", "base_width", ",", "previous_dilation", ",", "norm_layer", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "_idx", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "groups", "=", "self", ".", "groups", ",", "\n", "base_width", "=", "self", ".", "base_width", ",", "dilation", "=", "self", ".", "dilation", ",", "\n", "norm_layer", "=", "norm_layer", ",", "\n", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_CSG.model.resnet.ResNet.forward_fc": [[201, 218], ["resnet.ResNet.avgpool", "resnet.ResNet.reshape", "resnet.ResNet.fc", "resnet.ResNet.size", "resnet.ResNet.fc_new"], "methods", ["None"], ["", "def", "forward_fc", "(", "self", ",", "f4", ",", "task", "=", "'old'", ",", "f3", "=", "None", ",", "f2", "=", "None", ",", "return_mid_feature", "=", "False", ")", ":", "\n", "        ", "x", "=", "f4", "\n", "if", "task", "in", "[", "'old'", ",", "'new'", "]", ":", "\n", "            ", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "x", "=", "x", ".", "reshape", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "", "if", "task", "==", "'old'", ":", "\n", "            ", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "return", "x", "\n", "", "else", ":", "\n", "            ", "if", "return_mid_feature", ":", "\n", "                ", "mid", "=", "self", ".", "fc_new", "[", "0", "]", "(", "x", ")", "\n", "x", "=", "self", ".", "fc_new", "[", "1", "]", "(", "mid", ")", "\n", "x", "=", "self", ".", "fc_new", "[", "2", "]", "(", "x", ")", "\n", "return", "x", ",", "mid", "\n", "", "else", ":", "\n", "                ", "x", "=", "self", ".", "fc_new", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_CSG.model.resnet.ResNet.forward_partial": [[219, 231], ["resnet.ResNet.layer1", "resnet.ResNet.layer2", "resnet.ResNet.layer3", "resnet.ResNet.layer4"], "methods", ["None"], ["", "", "", "def", "forward_partial", "(", "self", ",", "feature", ",", "stage", ")", ":", "\n", "# stage: start forwarding **from** this stage (inclusive)", "\n", "# assert stage in [1, 2, 3, 4]", "\n", "        ", "if", "stage", "<=", "1", ":", "\n", "            ", "feature", "=", "self", ".", "layer1", "(", "feature", ")", "\n", "", "if", "stage", "<=", "2", ":", "\n", "            ", "feature", "=", "self", ".", "layer2", "(", "feature", ")", "\n", "", "if", "stage", "<=", "3", ":", "\n", "            ", "feature", "=", "self", ".", "layer3", "(", "feature", ")", "\n", "", "if", "stage", "<=", "4", ":", "\n", "            ", "feature", "=", "self", ".", "layer4", "(", "feature", ")", "\n", "", "return", "feature", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_CSG.model.resnet.ResNet.forward_backbone": [[232, 250], ["resnet.ResNet.conv1", "resnet.ResNet.bn1", "resnet.ResNet.relu", "resnet.ResNet.maxpool", "resnet.ResNet.layer1", "resnet.ResNet.layer2", "resnet.ResNet.layer3", "resnet.ResNet.layer4", "resnet.ResNet.avgpool().view", "resnet.ResNet.size", "resnet.ResNet.avgpool"], "methods", ["None"], ["", "def", "forward_backbone", "(", "self", ",", "x", ",", "output_features", "=", "[", "'layer4'", "]", ")", ":", "\n", "        ", "features", "=", "{", "}", "\n", "f0", "=", "self", ".", "conv1", "(", "x", ")", "\n", "f0", "=", "self", ".", "bn1", "(", "f0", ")", "\n", "f0", "=", "self", ".", "relu", "(", "f0", ")", "\n", "if", "'layer0'", "in", "output_features", ":", "features", "[", "'layer0'", "]", "=", "f0", "\n", "f0", "=", "self", ".", "maxpool", "(", "f0", ")", "\n", "f1", "=", "self", ".", "layer1", "(", "f0", ")", "\n", "if", "'layer1'", "in", "output_features", ":", "features", "[", "'layer1'", "]", "=", "f1", "\n", "f2", "=", "self", ".", "layer2", "(", "f1", ")", "\n", "if", "'layer2'", "in", "output_features", ":", "features", "[", "'layer2'", "]", "=", "f2", "\n", "f3", "=", "self", ".", "layer3", "(", "f2", ")", "\n", "if", "'layer3'", "in", "output_features", ":", "features", "[", "'layer3'", "]", "=", "f3", "\n", "f4", "=", "self", ".", "layer4", "(", "f3", ")", "\n", "if", "'layer4'", "in", "output_features", ":", "features", "[", "'layer4'", "]", "=", "f4", "\n", "if", "'gap'", "in", "output_features", ":", "\n", "            ", "features", "[", "'gap'", "]", "=", "self", ".", "avgpool", "(", "f4", ")", ".", "view", "(", "f4", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "", "return", "f4", ",", "features", "\n", "# return f4, f3, f2, features", "\n"]], "home.repos.pwc.inspect_result.NVlabs_CSG.model.resnet.ResNet.forward": [[252, 265], ["resnet.ResNet.forward_backbone", "resnet.ResNet.forward_fc", "resnet.ResNet.forward_fc"], "methods", ["home.repos.pwc.inspect_result.NVlabs_CSG.model.resnet.ResNet.forward_backbone", "home.repos.pwc.inspect_result.NVlabs_CSG.model.resnet.ResNet.forward_fc", "home.repos.pwc.inspect_result.NVlabs_CSG.model.resnet.ResNet.forward_fc"], ["", "def", "forward", "(", "self", ",", "x", ",", "output_features", "=", "[", "'layer4'", "]", ",", "task", "=", "'old'", ")", ":", "\n", "        ", "'''\n        task: 'old' | 'new' | 'new_seg'\n        'old', 'new': classification tasks (ImageNet or Visda)\n        'new_seg': segmentation head (convs)\n        '''", "\n", "f4", ",", "features", "=", "self", ".", "forward_backbone", "(", "x", ",", "output_features", ")", "\n", "if", "'fc_mid'", "in", "output_features", ":", "\n", "            ", "x", ",", "_mid", "=", "self", ".", "forward_fc", "(", "f4", ",", "task", "=", "task", ",", "return_mid_feature", "=", "True", ")", "\n", "features", "[", "'fc_mid'", "]", "=", "_mid", "\n", "", "else", ":", "\n", "            ", "x", "=", "self", ".", "forward_fc", "(", "f4", ",", "task", "=", "task", ")", "\n", "", "return", "x", ",", "features", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_CSG.model.resnet.conv3x3": [[27, 31], ["torch.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ",", "groups", "=", "1", ",", "dilation", "=", "1", ")", ":", "\n", "    ", "\"\"\"3x3 convolution with padding\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "dilation", ",", "groups", "=", "groups", ",", "bias", "=", "False", ",", "dilation", "=", "dilation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_CSG.model.resnet.conv1x1": [[33, 36], ["torch.Conv2d"], "function", ["None"], ["", "def", "conv1x1", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"\"\"1x1 convolution\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_CSG.model.resnet._resnet": [[267, 278], ["resnet.ResNet", "load_state_dict_from_url", "ResNet.state_dict", "model.state_dict.update", "ResNet.load_state_dict", "load_state_dict_from_url.items", "state[].size", "v.size"], "function", ["home.repos.pwc.inspect_result.NVlabs_CSG.utils.utils.AvgrageMeter.update"], ["", "", "def", "_resnet", "(", "arch", ",", "block", ",", "layers", ",", "pretrained", ",", "progress", ",", "**", "kwargs", ")", ":", "\n", "    ", "model", "=", "ResNet", "(", "block", ",", "layers", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "from", "torchvision", ".", "models", ".", "utils", "import", "load_state_dict_from_url", "\n", "state_dict", "=", "load_state_dict_from_url", "(", "model_urls", "[", "arch", "]", ",", "progress", "=", "progress", ")", "\n", "# model.load_state_dict(state_dict)", "\n", "state", "=", "model", ".", "state_dict", "(", ")", "\n", "pretrained_dict", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "state_dict", ".", "items", "(", ")", "if", "k", "in", "state", "and", "state", "[", "k", "]", ".", "size", "(", ")", "==", "v", ".", "size", "(", ")", "}", "\n", "state", ".", "update", "(", "pretrained_dict", ")", "\n", "model", ".", "load_state_dict", "(", "state", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_CSG.model.resnet.resnet18": [[280, 289], ["resnet._resnet"], "function", ["home.repos.pwc.inspect_result.NVlabs_CSG.model.resnet._resnet"], ["", "def", "resnet18", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-18 model.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "return", "_resnet", "(", "'resnet18'", ",", "BasicBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "pretrained", ",", "progress", ",", "\n", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_CSG.model.resnet.resnet34": [[291, 300], ["resnet._resnet"], "function", ["home.repos.pwc.inspect_result.NVlabs_CSG.model.resnet._resnet"], ["", "def", "resnet34", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-34 model.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "return", "_resnet", "(", "'resnet34'", ",", "BasicBlock", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "pretrained", ",", "progress", ",", "\n", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_CSG.model.resnet.resnet50": [[302, 311], ["resnet._resnet"], "function", ["home.repos.pwc.inspect_result.NVlabs_CSG.model.resnet._resnet"], ["", "def", "resnet50", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-50 model.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "return", "_resnet", "(", "'resnet50'", ",", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "pretrained", ",", "progress", ",", "\n", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_CSG.model.resnet.resnet101": [[313, 322], ["resnet._resnet"], "function", ["home.repos.pwc.inspect_result.NVlabs_CSG.model.resnet._resnet"], ["", "def", "resnet101", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-101 model.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "return", "_resnet", "(", "'resnet101'", ",", "Bottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "pretrained", ",", "progress", ",", "\n", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_CSG.model.resnet.resnet152": [[324, 333], ["resnet._resnet"], "function", ["home.repos.pwc.inspect_result.NVlabs_CSG.model.resnet._resnet"], ["", "def", "resnet152", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-152 model.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "return", "_resnet", "(", "'resnet152'", ",", "Bottleneck", ",", "[", "3", ",", "8", ",", "36", ",", "3", "]", ",", "pretrained", ",", "progress", ",", "\n", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_CSG.model.resnet.resnext50_32x4d": [[335, 346], ["resnet._resnet"], "function", ["home.repos.pwc.inspect_result.NVlabs_CSG.model.resnet._resnet"], ["", "def", "resnext50_32x4d", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNeXt-50 32x4d model.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "kwargs", "[", "'groups'", "]", "=", "32", "\n", "kwargs", "[", "'width_per_group'", "]", "=", "4", "\n", "return", "_resnet", "(", "'resnext50_32x4d'", ",", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "\n", "pretrained", ",", "progress", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_CSG.model.resnet.resnext101_32x8d": [[348, 359], ["resnet._resnet"], "function", ["home.repos.pwc.inspect_result.NVlabs_CSG.model.resnet._resnet"], ["", "def", "resnext101_32x8d", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNeXt-101 32x8d model.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "kwargs", "[", "'groups'", "]", "=", "32", "\n", "kwargs", "[", "'width_per_group'", "]", "=", "8", "\n", "return", "_resnet", "(", "'resnext101_32x8d'", ",", "Bottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "\n", "pretrained", ",", "progress", ",", "**", "kwargs", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.NVlabs_CSG.data.BaseDataset.BaseDataset.__init__": [[15, 36], ["torch.Dataset.__init__", "print", "BaseDataset.BaseDataset._get_file_names", "print", "len"], "methods", ["home.repos.pwc.inspect_result.NVlabs_CSG.data.visda17.VisDA17.__init__", "home.repos.pwc.inspect_result.NVlabs_CSG.data.BaseDataset.BaseDataset._get_file_names"], ["    ", "def", "__init__", "(", "self", ",", "setting", ",", "split_name", ",", "preprocess", "=", "None", ",", "file_length", "=", "None", ")", ":", "\n", "        ", "super", "(", "BaseDataset", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_split_name", "=", "split_name", "\n", "self", ".", "_img_path", "=", "setting", "[", "'img_root'", "]", "\n", "self", ".", "_gt_path", "=", "setting", "[", "'gt_root'", "]", "\n", "self", ".", "_portion", "=", "setting", "[", "'portion'", "]", "if", "'portion'", "in", "setting", "else", "None", "\n", "self", ".", "_train_source", "=", "setting", "[", "'train_source'", "]", "\n", "self", ".", "_eval_source", "=", "setting", "[", "'eval_source'", "]", "\n", "self", ".", "_test_source", "=", "setting", "[", "'test_source'", "]", "if", "'test_source'", "in", "setting", "else", "setting", "[", "'eval_source'", "]", "\n", "self", ".", "_down_sampling", "=", "setting", "[", "'down_sampling'", "]", "\n", "print", "(", "\"using downsampling:\"", ",", "self", ".", "_down_sampling", ")", "\n", "self", ".", "_file_names", "=", "self", ".", "_get_file_names", "(", "split_name", ")", "\n", "print", "(", "\"Found %d images\"", "%", "len", "(", "self", ".", "_file_names", ")", ")", "\n", "self", ".", "_file_length", "=", "file_length", "\n", "self", ".", "preprocess", "=", "preprocess", "\n", "\n", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "_file_length", "is", "not", "None", ":", "\n", "            ", "return", "self", ".", "_file_length", "\n", "", "return", "len", "(", "self", ".", "_file_names", ")", "\n", "\n", "", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n"]], "home.repos.pwc.inspect_result.NVlabs_CSG.data.BaseDataset.BaseDataset.__len__": [[37, 41], ["len"], "methods", ["None"], ["        ", "if", "self", ".", "_file_length", "is", "not", "None", ":", "\n", "            ", "names", "=", "self", ".", "_construct_new_file_names", "(", "self", ".", "_file_length", ")", "[", "index", "]", "\n", "", "else", ":", "\n", "            ", "names", "=", "self", ".", "_file_names", "[", "index", "]", "\n", "", "img_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "_img_path", ",", "names", "[", "0", "]", ")", "\n"]], "home.repos.pwc.inspect_result.NVlabs_CSG.data.BaseDataset.BaseDataset.__getitem__": [[42, 71], ["os.path.join", "os.path.join", "BaseDataset.BaseDataset._fetch_data", "dict", "[].split", "BaseDataset.BaseDataset.preprocess", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "dict.update", "BaseDataset.BaseDataset._construct_new_file_names", "extra_dict.items", "str", "len", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "names[].split", "numpy.ascontiguousarray", "numpy.ascontiguousarray", "numpy.ascontiguousarray", "extra_dict[].long", "extra_dict[].float"], "methods", ["home.repos.pwc.inspect_result.NVlabs_CSG.data.BaseDataset.BaseDataset._fetch_data", "home.repos.pwc.inspect_result.NVlabs_CSG.utils.utils.AvgrageMeter.update", "home.repos.pwc.inspect_result.NVlabs_CSG.data.BaseDataset.BaseDataset._construct_new_file_names"], ["gt_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "_gt_path", ",", "names", "[", "1", "]", ")", "\n", "item_name", "=", "names", "[", "1", "]", ".", "split", "(", "\"/\"", ")", "[", "-", "1", "]", ".", "split", "(", "\".\"", ")", "[", "0", "]", "\n", "\n", "img", ",", "gt", "=", "self", ".", "_fetch_data", "(", "img_path", ",", "gt_path", ")", "\n", "img", "=", "img", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", "\n", "if", "self", ".", "preprocess", "is", "not", "None", ":", "\n", "            ", "img", ",", "gt", ",", "extra_dict", "=", "self", ".", "preprocess", "(", "img", ",", "gt", ")", "\n", "\n", "", "if", "self", ".", "_split_name", "is", "'train'", ":", "\n", "            ", "img", "=", "torch", ".", "from_numpy", "(", "np", ".", "ascontiguousarray", "(", "img", ")", ")", ".", "float", "(", ")", "\n", "gt", "=", "torch", ".", "from_numpy", "(", "np", ".", "ascontiguousarray", "(", "gt", ")", ")", ".", "long", "(", ")", "\n", "if", "self", ".", "preprocess", "is", "not", "None", "and", "extra_dict", "is", "not", "None", ":", "\n", "                ", "for", "k", ",", "v", "in", "extra_dict", ".", "items", "(", ")", ":", "\n", "                    ", "extra_dict", "[", "k", "]", "=", "torch", ".", "from_numpy", "(", "np", ".", "ascontiguousarray", "(", "v", ")", ")", "\n", "if", "'label'", "in", "k", ":", "\n", "                        ", "extra_dict", "[", "k", "]", "=", "extra_dict", "[", "k", "]", ".", "long", "(", ")", "\n", "", "if", "'img'", "in", "k", ":", "\n", "                        ", "extra_dict", "[", "k", "]", "=", "extra_dict", "[", "k", "]", ".", "float", "(", ")", "\n", "\n", "", "", "", "", "output_dict", "=", "dict", "(", "data", "=", "img", ",", "label", "=", "gt", ",", "fn", "=", "str", "(", "item_name", ")", ",", "\n", "n", "=", "len", "(", "self", ".", "_file_names", ")", ")", "\n", "if", "self", ".", "preprocess", "is", "not", "None", "and", "extra_dict", "is", "not", "None", ":", "\n", "            ", "output_dict", ".", "update", "(", "**", "extra_dict", ")", "\n", "\n", "", "return", "output_dict", "\n", "\n", "", "def", "_fetch_data", "(", "self", ",", "img_path", ",", "gt_path", ",", "dtype", "=", "None", ")", ":", "\n", "        ", "img", "=", "self", ".", "_open_image", "(", "img_path", ",", "down_sampling", "=", "self", ".", "_down_sampling", ")", "\n", "gt", "=", "self", ".", "_open_image", "(", "gt_path", ",", "cv2", ".", "IMREAD_GRAYSCALE", ",", "dtype", "=", "dtype", ",", "down_sampling", "=", "self", ".", "_down_sampling", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_CSG.data.BaseDataset.BaseDataset._fetch_data": [[72, 77], ["BaseDataset.BaseDataset._open_image", "BaseDataset.BaseDataset._open_image"], "methods", ["home.repos.pwc.inspect_result.NVlabs_CSG.data.BaseDataset.BaseDataset._open_image", "home.repos.pwc.inspect_result.NVlabs_CSG.data.BaseDataset.BaseDataset._open_image"], ["return", "img", ",", "gt", "\n", "\n", "", "def", "_get_file_names", "(", "self", ",", "split_name", ")", ":", "\n", "        ", "assert", "split_name", "in", "[", "'train'", ",", "'val'", ",", "'test'", "]", "\n", "source", "=", "self", ".", "_train_source", "\n", "if", "split_name", "==", "\"val\"", ":", "\n"]], "home.repos.pwc.inspect_result.NVlabs_CSG.data.BaseDataset.BaseDataset._get_file_names": [[78, 95], ["open", "f.readlines", "BaseDataset.BaseDataset._process_item_names", "file_names.append"], "methods", ["home.repos.pwc.inspect_result.NVlabs_CSG.data.BaseDataset.BaseDataset._process_item_names"], ["            ", "source", "=", "self", ".", "_eval_source", "\n", "", "elif", "split_name", "==", "'test'", ":", "\n", "            ", "source", "=", "self", ".", "_test_source", "\n", "\n", "", "file_names", "=", "[", "]", "\n", "with", "open", "(", "source", ")", "as", "f", ":", "\n", "            ", "files", "=", "f", ".", "readlines", "(", ")", "\n", "", "if", "self", ".", "_portion", "is", "not", "None", ":", "\n", "            ", "shuffle", "(", "files", ")", "\n", "num_files", "=", "len", "(", "files", ")", "\n", "if", "self", ".", "_portion", ">", "0", ":", "\n", "                ", "split", "=", "int", "(", "np", ".", "floor", "(", "self", ".", "_portion", "*", "num_files", ")", ")", "\n", "files", "=", "files", "[", ":", "split", "]", "\n", "", "elif", "self", ".", "_portion", "<", "0", ":", "\n", "                ", "split", "=", "int", "(", "np", ".", "floor", "(", "(", "1", "+", "self", ".", "_portion", ")", "*", "num_files", ")", ")", "\n", "files", "=", "files", "[", "split", ":", "]", "\n", "\n", "", "", "for", "item", "in", "files", ":", "\n"]], "home.repos.pwc.inspect_result.NVlabs_CSG.data.BaseDataset.BaseDataset._construct_new_file_names": [[96, 107], ["isinstance", "len", "torch.randperm().tolist", "torch.randperm().tolist", "torch.randperm().tolist", "torch.randperm().tolist", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm"], "methods", ["None"], ["            ", "img_name", ",", "gt_name", "=", "self", ".", "_process_item_names", "(", "item", ")", "\n", "file_names", ".", "append", "(", "[", "img_name", ",", "gt_name", "]", ")", "\n", "\n", "", "return", "file_names", "\n", "\n", "", "def", "_construct_new_file_names", "(", "self", ",", "length", ")", ":", "\n", "        ", "assert", "isinstance", "(", "length", ",", "int", ")", "\n", "files_len", "=", "len", "(", "self", ".", "_file_names", ")", "\n", "new_file_names", "=", "self", ".", "_file_names", "*", "(", "length", "//", "files_len", ")", "\n", "\n", "rand_indices", "=", "torch", ".", "randperm", "(", "files_len", ")", ".", "tolist", "(", ")", "\n", "new_indices", "=", "rand_indices", "[", ":", "length", "%", "files_len", "]", "\n"]], "home.repos.pwc.inspect_result.NVlabs_CSG.data.BaseDataset.BaseDataset._process_item_names": [[108, 117], ["item.split.split.strip", "item.split.split.split"], "methods", ["None"], ["\n", "new_file_names", "+=", "[", "self", ".", "_file_names", "[", "i", "]", "for", "i", "in", "new_indices", "]", "\n", "\n", "return", "new_file_names", "\n", "\n", "", "@", "staticmethod", "\n", "def", "_process_item_names", "(", "item", ")", ":", "\n", "        ", "item", "=", "item", ".", "strip", "(", ")", "\n", "# item = item.split('\\t')", "\n", "item", "=", "item", ".", "split", "(", "' '", ")", "\n"]], "home.repos.pwc.inspect_result.NVlabs_CSG.data.BaseDataset.BaseDataset.get_length": [[118, 120], ["BaseDataset.BaseDataset.__len__"], "methods", ["home.repos.pwc.inspect_result.NVlabs_CSG.data.visda17.VisDA17.__len__"], ["img_name", "=", "item", "[", "0", "]", "\n", "gt_name", "=", "item", "[", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_CSG.data.BaseDataset.BaseDataset._open_image": [[121, 146], ["numpy.array", "isinstance", "cv2.imread", "len", "cv2.resize", "cv2.resize", "len", "cv2.resize", "cv2.resize", "print", "exit", "isinstance", "isinstance", "len"], "methods", ["None"], ["return", "img_name", ",", "gt_name", "\n", "\n", "", "def", "get_length", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__len__", "(", ")", "\n", "\n", "", "@", "staticmethod", "\n", "def", "_open_image", "(", "filepath", ",", "mode", "=", "cv2", ".", "IMREAD_COLOR", ",", "dtype", "=", "None", ",", "down_sampling", "=", "1", ")", ":", "\n", "# cv2: B G R", "\n", "# h w c", "\n", "        ", "img", "=", "np", ".", "array", "(", "cv2", ".", "imread", "(", "filepath", ",", "mode", ")", ",", "dtype", "=", "dtype", ")", "\n", "\n", "if", "isinstance", "(", "down_sampling", ",", "int", ")", ":", "\n", "            ", "H", ",", "W", "=", "img", ".", "shape", "[", ":", "2", "]", "\n", "if", "len", "(", "img", ".", "shape", ")", "==", "3", ":", "\n", "                ", "img", "=", "cv2", ".", "resize", "(", "img", ",", "(", "W", "//", "down_sampling", ",", "H", "//", "down_sampling", ")", ",", "interpolation", "=", "cv2", ".", "INTER_LINEAR", ")", "\n", "", "else", ":", "\n", "                ", "img", "=", "cv2", ".", "resize", "(", "img", ",", "(", "W", "//", "down_sampling", ",", "H", "//", "down_sampling", ")", ",", "interpolation", "=", "cv2", ".", "INTER_NEAREST", ")", "\n", "", "assert", "img", ".", "shape", "[", "0", "]", "==", "H", "//", "down_sampling", "and", "img", ".", "shape", "[", "1", "]", "==", "W", "//", "down_sampling", "\n", "", "else", ":", "\n", "            ", "assert", "(", "isinstance", "(", "down_sampling", ",", "tuple", ")", "or", "isinstance", "(", "down_sampling", ",", "list", ")", ")", "and", "len", "(", "down_sampling", ")", "==", "2", "\n", "if", "len", "(", "img", ".", "shape", ")", "==", "3", ":", "\n", "                ", "img", "=", "cv2", ".", "resize", "(", "img", ",", "(", "down_sampling", "[", "1", "]", ",", "down_sampling", "[", "0", "]", ")", ",", "interpolation", "=", "cv2", ".", "INTER_LINEAR", ")", "\n", "", "else", ":", "\n", "                ", "img", "=", "cv2", ".", "resize", "(", "img", ",", "(", "down_sampling", "[", "1", "]", ",", "down_sampling", "[", "0", "]", ")", ",", "interpolation", "=", "cv2", ".", "INTER_NEAREST", ")", "\n", "", "assert", "img", ".", "shape", "[", "0", "]", "==", "down_sampling", "[", "0", "]", "and", "img", ".", "shape", "[", "1", "]", "==", "down_sampling", "[", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_CSG.data.BaseDataset.BaseDataset.get_class_colors": [[147, 150], ["None"], "methods", ["None"], ["", "return", "img", "\n", "\n", "", "@", "classmethod", "\n", "def", "get_class_colors", "(", "*", "args", ")", ":", "\n"]], "home.repos.pwc.inspect_result.NVlabs_CSG.data.BaseDataset.BaseDataset.get_class_names": [[151, 154], ["None"], "methods", ["None"], ["        ", "raise", "NotImplementedError", "\n", "\n", "", "@", "classmethod", "\n", "def", "get_class_names", "(", "*", "args", ")", ":", "\n"]], "home.repos.pwc.inspect_result.NVlabs_CSG.data.loader_csg.RandomResizedCrop_two.__init__": [[44, 55], ["isinstance", "warnings.warn"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "size", ",", "scale", "=", "(", "0.08", ",", "1.0", ")", ",", "ratio", "=", "(", "3.", "/", "4.", ",", "4.", "/", "3.", ")", ",", "interpolation", "=", "Image", ".", "BILINEAR", ")", ":", "\n", "        ", "if", "isinstance", "(", "size", ",", "(", "tuple", ",", "list", ")", ")", ":", "\n", "            ", "self", ".", "size", "=", "size", "\n", "", "else", ":", "\n", "            ", "self", ".", "size", "=", "(", "size", ",", "size", ")", "\n", "", "if", "(", "scale", "[", "0", "]", ">", "scale", "[", "1", "]", ")", "or", "(", "ratio", "[", "0", "]", ">", "ratio", "[", "1", "]", ")", ":", "\n", "            ", "warnings", ".", "warn", "(", "\"range should be of kind (min, max)\"", ")", "\n", "\n", "", "self", ".", "interpolation", "=", "interpolation", "\n", "self", ".", "scale", "=", "scale", "\n", "self", ".", "ratio", "=", "ratio", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_CSG.data.loader_csg.RandomResizedCrop_two.get_params": [[56, 118], ["loader_csg._get_image_size", "range", "min", "min", "min", "min", "math.exp", "int", "int", "float", "float", "min", "int", "random.randint", "random.choice", "max", "random.randint", "random.choice", "max", "random.randint", "random.choice", "max", "random.randint", "random.choice", "max", "random.uniform", "math.log", "math.log", "random.uniform", "round", "round", "random.randint", "random.randint", "min", "min", "min", "min", "round", "max", "int", "int", "int", "int", "int", "int", "int", "int", "int", "math.sqrt", "math.sqrt", "random.randint", "random.choice", "max", "random.randint", "random.choice", "max", "random.randint", "random.choice", "max", "random.randint", "random.choice", "max", "round", "int", "int", "int", "int", "int", "int", "int", "int", "min", "max"], "methods", ["home.repos.pwc.inspect_result.NVlabs_CSG.data.loader_csg._get_image_size", "home.repos.pwc.inspect_result.NVlabs_CSG.utils.logger.Logger.log", "home.repos.pwc.inspect_result.NVlabs_CSG.utils.logger.Logger.log"], ["", "@", "staticmethod", "\n", "def", "get_params", "(", "img", ",", "scale", ",", "ratio", ",", "augment", "=", "(", "0.025", ",", "0.075", ")", ")", ":", "\n", "        ", "\"\"\"Get parameters for ``crop`` for a random sized crop.\n        Args:\n            img (PIL Image): Image to be cropped.\n            scale (tuple): range of size of the origin size cropped\n            ratio (tuple): range of aspect ratio of the origin aspect ratio cropped\n        Returns:\n            tuple: params (i, j, h, w) to be passed to ``crop`` for a random\n                sized crop.\n        \"\"\"", "\n", "width", ",", "height", "=", "_get_image_size", "(", "img", ")", "\n", "area", "=", "height", "*", "width", "\n", "\n", "for", "_", "in", "range", "(", "10", ")", ":", "\n", "            ", "target_area", "=", "random", ".", "uniform", "(", "*", "scale", ")", "*", "area", "\n", "log_ratio", "=", "(", "math", ".", "log", "(", "ratio", "[", "0", "]", ")", ",", "math", ".", "log", "(", "ratio", "[", "1", "]", ")", ")", "\n", "aspect_ratio", "=", "math", ".", "exp", "(", "random", ".", "uniform", "(", "*", "log_ratio", ")", ")", "\n", "\n", "w", "=", "int", "(", "round", "(", "math", ".", "sqrt", "(", "target_area", "*", "aspect_ratio", ")", ")", ")", "\n", "h", "=", "int", "(", "round", "(", "math", ".", "sqrt", "(", "target_area", "/", "aspect_ratio", ")", ")", ")", "\n", "\n", "if", "0", "<", "w", "<=", "width", "and", "0", "<", "h", "<=", "height", ":", "\n", "                ", "i", "=", "random", ".", "randint", "(", "0", ",", "height", "-", "h", ")", "\n", "j", "=", "random", ".", "randint", "(", "0", ",", "width", "-", "w", ")", "\n", "# return i, j, h, w", "\n", "##### augment #####", "\n", "delta", "=", "random", ".", "randint", "(", "int", "(", "h", "*", "augment", "[", "0", "]", ")", ",", "int", "(", "h", "*", "augment", "[", "1", "]", ")", ")", "*", "random", ".", "choice", "(", "[", "-", "1", ",", "1", "]", ")", "\n", "h_a", "=", "h", "+", "delta", ";", "h_a", "=", "min", "(", "max", "(", "1", ",", "h_a", ")", ",", "height", ")", "\n", "delta", "=", "random", ".", "randint", "(", "int", "(", "w", "*", "augment", "[", "0", "]", ")", ",", "int", "(", "w", "*", "augment", "[", "1", "]", ")", ")", "*", "random", ".", "choice", "(", "[", "-", "1", ",", "1", "]", ")", "\n", "w_a", "=", "w", "+", "delta", ";", "w_a", "=", "min", "(", "max", "(", "1", ",", "w_a", ")", ",", "width", ")", "\n", "delta", "=", "random", ".", "randint", "(", "int", "(", "h", "*", "augment", "[", "0", "]", ")", ",", "int", "(", "h", "*", "augment", "[", "1", "]", ")", ")", "*", "random", ".", "choice", "(", "[", "-", "1", ",", "1", "]", ")", "\n", "i_a", "=", "i", "+", "delta", ";", "i_a", "=", "min", "(", "max", "(", "0", ",", "i_a", ")", ",", "height", "-", "h_a", ")", "\n", "delta", "=", "random", ".", "randint", "(", "int", "(", "w", "*", "augment", "[", "0", "]", ")", ",", "int", "(", "w", "*", "augment", "[", "1", "]", ")", ")", "*", "random", ".", "choice", "(", "[", "-", "1", ",", "1", "]", ")", "\n", "j_a", "=", "j", "+", "delta", ";", "j_a", "=", "min", "(", "max", "(", "0", ",", "j_a", ")", ",", "width", "-", "w_a", ")", "\n", "###################", "\n", "return", "i", ",", "j", ",", "h", ",", "w", ",", "i_a", ",", "j_a", ",", "h_a", ",", "w_a", "\n", "\n", "# Fallback to central crop", "\n", "", "", "in_ratio", "=", "float", "(", "width", ")", "/", "float", "(", "height", ")", "\n", "if", "(", "in_ratio", "<", "min", "(", "ratio", ")", ")", ":", "\n", "            ", "w", "=", "width", "\n", "h", "=", "int", "(", "round", "(", "w", "/", "min", "(", "ratio", ")", ")", ")", "\n", "", "elif", "(", "in_ratio", ">", "max", "(", "ratio", ")", ")", ":", "\n", "            ", "h", "=", "height", "\n", "w", "=", "int", "(", "round", "(", "h", "*", "max", "(", "ratio", ")", ")", ")", "\n", "", "else", ":", "# whole image", "\n", "            ", "w", "=", "width", "\n", "h", "=", "height", "\n", "", "i", "=", "(", "height", "-", "h", ")", "//", "2", "\n", "j", "=", "(", "width", "-", "w", ")", "//", "2", "\n", "##### augment #####", "\n", "delta", "=", "random", ".", "randint", "(", "int", "(", "h", "*", "augment", "[", "0", "]", ")", ",", "int", "(", "h", "*", "augment", "[", "1", "]", ")", ")", "*", "random", ".", "choice", "(", "[", "-", "1", ",", "1", "]", ")", "\n", "h_a", "=", "h", "+", "delta", ";", "h_a", "=", "min", "(", "max", "(", "1", ",", "h_a", ")", ",", "height", ")", "\n", "delta", "=", "random", ".", "randint", "(", "int", "(", "w", "*", "augment", "[", "0", "]", ")", ",", "int", "(", "w", "*", "augment", "[", "1", "]", ")", ")", "*", "random", ".", "choice", "(", "[", "-", "1", ",", "1", "]", ")", "\n", "w_a", "=", "w", "+", "delta", ";", "w_a", "=", "min", "(", "max", "(", "1", ",", "w_a", ")", ",", "width", ")", "\n", "delta", "=", "random", ".", "randint", "(", "int", "(", "h", "*", "augment", "[", "0", "]", ")", ",", "int", "(", "h", "*", "augment", "[", "1", "]", ")", ")", "*", "random", ".", "choice", "(", "[", "-", "1", ",", "1", "]", ")", "\n", "i_a", "=", "i", "+", "delta", ";", "i_a", "=", "min", "(", "max", "(", "0", ",", "i_a", ")", ",", "height", "-", "h_a", ")", "\n", "delta", "=", "random", ".", "randint", "(", "int", "(", "w", "*", "augment", "[", "0", "]", ")", ",", "int", "(", "w", "*", "augment", "[", "1", "]", ")", ")", "*", "random", ".", "choice", "(", "[", "-", "1", ",", "1", "]", ")", "\n", "j_a", "=", "j", "+", "delta", ";", "j_a", "=", "min", "(", "max", "(", "0", ",", "j_a", ")", ",", "width", "-", "w_a", ")", "\n", "###################", "\n", "return", "i", ",", "j", ",", "h", ",", "w", ",", "i_a", ",", "j_a", ",", "h_a", ",", "w_a", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_CSG.data.loader_csg.RandomResizedCrop_two.__call__": [[119, 128], ["loader_csg.RandomResizedCrop_two.get_params", "torchvision.transforms.functional.resized_crop", "torchvision.transforms.functional.resized_crop"], "methods", ["home.repos.pwc.inspect_result.NVlabs_CSG.data.loader_csg.RandomResizedCrop_two.get_params"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            img (PIL Image): Image to be cropped and resized.\n        Returns:\n            PIL Image: Randomly cropped and resized image.\n        \"\"\"", "\n", "i", ",", "j", ",", "h", ",", "w", ",", "i_a", ",", "j_a", ",", "h_a", ",", "w_a", "=", "self", ".", "get_params", "(", "img", ",", "self", ".", "scale", ",", "self", ".", "ratio", ")", "\n", "return", "F", ".", "resized_crop", "(", "img", ",", "i", ",", "j", ",", "h", ",", "w", ",", "self", ".", "size", ",", "self", ".", "interpolation", ")", ",", "F", ".", "resized_crop", "(", "img", ",", "i_a", ",", "j_a", ",", "h_a", ",", "w_a", ",", "self", ".", "size", ",", "self", ".", "interpolation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_CSG.data.loader_csg.RandomResizedCrop_two.__repr__": [[129, 136], ["tuple", "tuple", "round", "round"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "interpolate_str", "=", "_pil_interpolation_to_str", "[", "self", ".", "interpolation", "]", "\n", "format_string", "=", "self", ".", "__class__", ".", "__name__", "+", "'(size={0}'", ".", "format", "(", "self", ".", "size", ")", "\n", "format_string", "+=", "', scale={0}'", ".", "format", "(", "tuple", "(", "round", "(", "s", ",", "4", ")", "for", "s", "in", "self", ".", "scale", ")", ")", "\n", "format_string", "+=", "', ratio={0}'", ".", "format", "(", "tuple", "(", "round", "(", "r", ",", "4", ")", "for", "r", "in", "self", ".", "ratio", ")", ")", "\n", "format_string", "+=", "', interpolation={0})'", ".", "format", "(", "interpolate_str", ")", "\n", "return", "format_string", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_CSG.data.loader_csg.ImageTransform.__init__": [[141, 144], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "transform", ")", ":", "\n", "        ", "self", ".", "base_transform", "=", "transform", "[", "0", "]", "# resize, centercrop", "\n", "self", ".", "totensor_norm", "=", "transform", "[", "1", "]", "# totensor, **normalize**", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_CSG.data.loader_csg.ImageTransform.__call__": [[145, 149], ["loader_csg.ImageTransform.base_transform", "loader_csg.ImageTransform.totensor_norm", "torchvision.transforms.functional.to_tensor"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "x", ")", ":", "\n", "        ", "image", "=", "self", ".", "base_transform", "(", "x", ")", "\n", "tensor", "=", "self", ".", "totensor_norm", "(", "image", ")", "\n", "return", "[", "tensor", ",", "F", ".", "to_tensor", "(", "image", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_CSG.data.loader_csg.TwoCropsTransform.__init__": [[154, 157], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "q_transform", ",", "k_transform", ")", ":", "\n", "        ", "self", ".", "q_transform", "=", "q_transform", "\n", "self", ".", "k_transform", "=", "k_transform", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_CSG.data.loader_csg.TwoCropsTransform.__call__": [[158, 162], ["loader_csg.TwoCropsTransform.q_transform", "loader_csg.TwoCropsTransform.k_transform"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "x", ")", ":", "\n", "        ", "q", "=", "self", ".", "q_transform", "(", "x", ")", "\n", "k", "=", "self", ".", "k_transform", "(", "x", ")", "\n", "return", "[", "q", ",", "k", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_CSG.data.loader_csg.GaussianBlur.__init__": [[165, 167], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "sigma", "=", "[", ".1", ",", "2.", "]", ")", ":", "\n", "        ", "self", ".", "sigma", "=", "sigma", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_CSG.data.loader_csg.GaussianBlur.__call__": [[168, 172], ["random.uniform", "x.filter.filter.filter", "PIL.ImageFilter.GaussianBlur"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "x", ")", ":", "\n", "        ", "sigma", "=", "random", ".", "uniform", "(", "self", ".", "sigma", "[", "0", "]", ",", "self", ".", "sigma", "[", "1", "]", ")", "\n", "x", "=", "x", ".", "filter", "(", "ImageFilter", ".", "GaussianBlur", "(", "radius", "=", "sigma", ")", ")", "\n", "return", "x", "\n", "", "", ""]], "home.repos.pwc.inspect_result.NVlabs_CSG.data.loader_csg._get_image_size": [[21, 28], ["torchvision.transforms.functional._is_pil_image", "isinstance", "TypeError", "img.dim", "type"], "function", ["None"], ["def", "_get_image_size", "(", "img", ")", ":", "\n", "    ", "if", "F", ".", "_is_pil_image", "(", "img", ")", ":", "\n", "        ", "return", "img", ".", "size", "\n", "", "elif", "isinstance", "(", "img", ",", "torch", ".", "Tensor", ")", "and", "img", ".", "dim", "(", ")", ">", "2", ":", "\n", "        ", "return", "img", ".", "shape", "[", "-", "2", ":", "]", "[", ":", ":", "-", "1", "]", "\n", "", "else", ":", "\n", "        ", "raise", "TypeError", "(", "\"Unexpected type {}\"", ".", "format", "(", "type", "(", "img", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_CSG.data.cityscapes.Cityscapes.get_class_colors": [[11, 19], ["None"], "methods", ["None"], ["28", ",", "31", ",", "32", ",", "33", "]", "\n", "\n", "@", "classmethod", "\n", "def", "get_class_colors", "(", "*", "args", ")", ":", "\n", "        ", "return", "[", "[", "128", ",", "64", ",", "128", "]", ",", "[", "244", ",", "35", ",", "232", "]", ",", "[", "70", ",", "70", ",", "70", "]", ",", "\n", "[", "102", ",", "102", ",", "156", "]", ",", "[", "190", ",", "153", ",", "153", "]", ",", "[", "153", ",", "153", ",", "153", "]", ",", "\n", "[", "250", ",", "170", ",", "30", "]", ",", "[", "220", ",", "220", ",", "0", "]", ",", "[", "107", ",", "142", ",", "35", "]", ",", "\n", "[", "152", ",", "251", ",", "152", "]", ",", "[", "70", ",", "130", ",", "180", "]", ",", "[", "220", ",", "20", ",", "60", "]", ",", "[", "255", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "142", "]", ",", "[", "0", ",", "0", ",", "70", "]", ",", "[", "0", ",", "60", ",", "100", "]", ",", "[", "0", ",", "80", ",", "100", "]", ",", "\n"]], "home.repos.pwc.inspect_result.NVlabs_CSG.data.cityscapes.Cityscapes.get_class_names": [[20, 29], ["None"], "methods", ["None"], ["[", "0", ",", "0", ",", "230", "]", ",", "[", "119", ",", "11", ",", "32", "]", "]", "\n", "\n", "", "@", "classmethod", "\n", "def", "get_class_names", "(", "*", "args", ")", ":", "\n", "# class counting(gtFine)", "\n", "# 2953 2811 2934  970 1296 2949 1658 2808 2891 1654 2686 2343 1023 2832", "\n", "# 359  274  142  513 1646", "\n", "        ", "return", "[", "'road'", ",", "'sidewalk'", ",", "'building'", ",", "'wall'", ",", "'fence'", ",", "'pole'", ",", "\n", "'traffic light'", ",", "'traffic sign'", ",", "\n", "'vegetation'", ",", "'terrain'", ",", "'sky'", ",", "'person'", ",", "'rider'", ",", "'car'", ",", "\n"]], "home.repos.pwc.inspect_result.NVlabs_CSG.data.cityscapes.Cityscapes.transform_label": [[30, 44], ["numpy.zeros", "numpy.unique", "print", "[].split", "numpy.unique", "numpy.unique", "numpy.array", "numpy.array", "numpy.where", "name.split"], "methods", ["None"], ["'truck'", ",", "'bus'", ",", "'train'", ",", "'motorcycle'", ",", "'bicycle'", "]", "\n", "\n", "", "@", "classmethod", "\n", "def", "transform_label", "(", "cls", ",", "pred", ",", "name", ")", ":", "\n", "        ", "label", "=", "np", ".", "zeros", "(", "pred", ".", "shape", ")", "\n", "ids", "=", "np", ".", "unique", "(", "pred", ")", "\n", "for", "id", "in", "ids", ":", "\n", "            ", "label", "[", "np", ".", "where", "(", "pred", "==", "id", ")", "]", "=", "cls", ".", "trans_labels", "[", "id", "]", "\n", "\n", "", "new_name", "=", "(", "name", ".", "split", "(", "'.'", ")", "[", "0", "]", ")", ".", "split", "(", "'_'", ")", "[", ":", "-", "1", "]", "\n", "new_name", "=", "'_'", ".", "join", "(", "new_name", ")", "+", "'.png'", "\n", "\n", "print", "(", "'Trans'", ",", "name", ",", "'to'", ",", "new_name", ",", "'    '", ",", "\n", "np", ".", "unique", "(", "np", ".", "array", "(", "pred", ",", "np", ".", "uint8", ")", ")", ",", "' ---------> '", ",", "\n", "np", ".", "unique", "(", "np", ".", "array", "(", "label", ",", "np", ".", "uint8", ")", ")", ")", "\n"]], "home.repos.pwc.inspect_result.NVlabs_CSG.data.visda17.VisDA17.__init__": [[16, 35], ["torchvision.ToTensor", "open().readlines", "open", "round", "round", "len", "len"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "txt_file", ",", "root_dir", ",", "transform", "=", "transforms", ".", "ToTensor", "(", ")", ",", "label_one_hot", "=", "False", ",", "portion", "=", "1.0", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            txt_file (string): Path to the txt file with annotations.\n            root_dir (string): Directory with all the images.\n            transform (callable, optional): Optional transform to be applied\n                on a sample.\n        \"\"\"", "\n", "self", ".", "lines", "=", "open", "(", "txt_file", ",", "'r'", ")", ".", "readlines", "(", ")", "\n", "self", ".", "root_dir", "=", "root_dir", "\n", "self", ".", "transform", "=", "transform", "\n", "self", ".", "label_one_hot", "=", "label_one_hot", "\n", "self", ".", "portion", "=", "portion", "\n", "self", ".", "number_classes", "=", "12", "\n", "assert", "portion", "!=", "0", "\n", "if", "self", ".", "portion", ">", "0", ":", "\n", "            ", "self", ".", "lines", "=", "self", ".", "lines", "[", ":", "round", "(", "self", ".", "portion", "*", "len", "(", "self", ".", "lines", ")", ")", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "lines", "=", "self", ".", "lines", "[", "round", "(", "self", ".", "portion", "*", "len", "(", "self", ".", "lines", ")", ")", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_CSG.data.visda17.VisDA17.__len__": [[36, 38], ["len"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "lines", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_CSG.data.visda17.VisDA17.__getitem__": [[39, 53], ["str.split", "os.path.join", "PIL.Image.open", "visda17.VisDA17.convert", "torch.from_numpy", "visda17.VisDA17.transform", "numpy.zeros", "numpy.asarray", "numpy.asarray"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "line", "=", "str", ".", "split", "(", "self", ".", "lines", "[", "idx", "]", ")", "\n", "path_img", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root_dir", ",", "line", "[", "0", "]", ")", "\n", "image", "=", "Image", ".", "open", "(", "path_img", ")", "\n", "image", "=", "image", ".", "convert", "(", "'RGB'", ")", "\n", "if", "self", ".", "transform", ":", "\n", "            ", "image", "=", "self", ".", "transform", "(", "image", ")", "\n", "", "if", "self", ".", "label_one_hot", ":", "\n", "            ", "label", "=", "np", ".", "zeros", "(", "12", ",", "np", ".", "float32", ")", "\n", "label", "[", "np", ".", "asarray", "(", "line", "[", "1", "]", ",", "dtype", "=", "np", ".", "int", ")", "]", "=", "1", "\n", "", "else", ":", "\n", "            ", "label", "=", "np", ".", "asarray", "(", "line", "[", "1", "]", ",", "dtype", "=", "np", ".", "int", ")", "\n", "", "label", "=", "torch", ".", "from_numpy", "(", "label", ")", "\n", "return", "image", ",", "label", "\n", "", "", ""]], "home.repos.pwc.inspect_result.NVlabs_CSG.data.gta5.GTA5.get_class_colors": [[11, 19], ["None"], "methods", ["None"], ["@", "classmethod", "\n", "def", "get_class_colors", "(", "*", "args", ")", ":", "\n", "        ", "return", "[", "[", "128", ",", "64", ",", "128", "]", ",", "[", "244", ",", "35", ",", "232", "]", ",", "[", "70", ",", "70", ",", "70", "]", ",", "\n", "[", "102", ",", "102", ",", "156", "]", ",", "[", "190", ",", "153", ",", "153", "]", ",", "[", "153", ",", "153", ",", "153", "]", ",", "\n", "[", "250", ",", "170", ",", "30", "]", ",", "[", "220", ",", "220", ",", "0", "]", ",", "[", "107", ",", "142", ",", "35", "]", ",", "\n", "[", "152", ",", "251", ",", "152", "]", ",", "[", "70", ",", "130", ",", "180", "]", ",", "[", "220", ",", "20", ",", "60", "]", ",", "[", "255", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "142", "]", ",", "[", "0", ",", "0", ",", "70", "]", ",", "[", "0", ",", "60", ",", "100", "]", ",", "[", "0", ",", "80", ",", "100", "]", ",", "\n", "[", "0", ",", "0", ",", "230", "]", ",", "[", "119", ",", "11", ",", "32", "]", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_CSG.data.gta5.GTA5.get_class_names": [[20, 29], ["None"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "get_class_names", "(", "*", "args", ")", ":", "\n", "# class counting(gtFine)", "\n", "# 2953 2811 2934  970 1296 2949 1658 2808 2891 1654 2686 2343 1023 2832", "\n", "# 359  274  142  513 1646", "\n", "        ", "return", "[", "'road'", ",", "'sidewalk'", ",", "'building'", ",", "'wall'", ",", "'fence'", ",", "'pole'", ",", "\n", "'traffic light'", ",", "'traffic sign'", ",", "\n", "'vegetation'", ",", "'terrain'", ",", "'sky'", ",", "'person'", ",", "'rider'", ",", "'car'", ",", "\n", "'truck'", ",", "'bus'", ",", "'train'", ",", "'motorcycle'", ",", "'bicycle'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_CSG.data.gta5.GTA5.transform_label": [[30, 44], ["numpy.zeros", "numpy.unique", "print", "[].split", "numpy.unique", "numpy.unique", "numpy.array", "numpy.array", "numpy.where", "name.split"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "transform_label", "(", "cls", ",", "pred", ",", "name", ")", ":", "\n", "        ", "label", "=", "np", ".", "zeros", "(", "pred", ".", "shape", ")", "\n", "ids", "=", "np", ".", "unique", "(", "pred", ")", "\n", "for", "id", "in", "ids", ":", "\n", "            ", "label", "[", "np", ".", "where", "(", "pred", "==", "id", ")", "]", "=", "cls", ".", "trans_labels", "[", "id", "]", "\n", "\n", "", "new_name", "=", "(", "name", ".", "split", "(", "'.'", ")", "[", "0", "]", ")", ".", "split", "(", "'_'", ")", "[", ":", "-", "1", "]", "\n", "new_name", "=", "'_'", ".", "join", "(", "new_name", ")", "+", "'.png'", "\n", "\n", "print", "(", "'Trans'", ",", "name", ",", "'to'", ",", "new_name", ",", "'    '", ",", "\n", "np", ".", "unique", "(", "np", ".", "array", "(", "pred", ",", "np", ".", "uint8", ")", ")", ",", "' ---------> '", ",", "\n", "np", ".", "unique", "(", "np", ".", "array", "(", "label", ",", "np", ".", "uint8", ")", ")", ")", "\n", "return", "label", ",", "new_name", "\n", "", "", ""]], "home.repos.pwc.inspect_result.NVlabs_CSG.data.labels.assureSingleInstanceName": [[137, 154], ["name.endswith", "len"], "function", ["None"], ["", "", "def", "assureSingleInstanceName", "(", "name", ")", ":", "\n", "# if the name is known, it is not a group", "\n", "    ", "if", "name", "in", "name2label", ":", "\n", "        ", "return", "name", "\n", "# test if the name actually denotes a group", "\n", "", "if", "not", "name", ".", "endswith", "(", "\"group\"", ")", ":", "\n", "        ", "return", "None", "\n", "# remove group", "\n", "", "name", "=", "name", "[", ":", "-", "len", "(", "\"group\"", ")", "]", "\n", "# test if the new name exists", "\n", "if", "not", "name", "in", "name2label", ":", "\n", "        ", "return", "None", "\n", "# test if the new name denotes a label that actually has instances", "\n", "", "if", "not", "name2label", "[", "name", "]", ".", "hasInstances", ":", "\n", "        ", "return", "None", "\n", "# all good then", "\n", "", "return", "name", "\n", "\n"]]}