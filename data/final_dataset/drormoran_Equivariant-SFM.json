{"home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.code.multiple_scenes_learning.main": [[11, 61], ["utils.general_utils.init_exp", "utils.general_utils.log_code", "conf.get_int", "conf.get_int", "conf.get_int", "conf.get_int", "conf.get_int", "conf.get_int", "datasets.SceneData.create_scene_data_from_list", "datasets.SceneData.create_scene_data_from_list", "datasets.SceneData.create_scene_data_from_list", "datasets.ScenesDataSet.ScenesDataSet", "datasets.ScenesDataSet.ScenesDataSet", "datasets.ScenesDataSet.ScenesDataSet", "datasets.ScenesDataSet.DataLoader().to", "datasets.ScenesDataSet.DataLoader().to", "datasets.ScenesDataSet.DataLoader().to", "train.train", "utils.general_utils.write_results", "utils.general_utils.write_results", "utils.general_utils.write_results", "utils.general_utils.write_results", "copy.deepcopy", "multiple_scenes_learning.optimization_all_sets", "multiple_scenes_learning.optimization_all_sets", "conf.get_list", "conf.get_list", "conf.get_list", "test_scans_list.append", "datasets.ScenesDataSet.DataLoader", "datasets.ScenesDataSet.DataLoader", "datasets.ScenesDataSet.DataLoader", "utils.general_utils.get_class", "conf.get_string"], "function", ["home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.general_utils.init_exp", "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.general_utils.log_code", "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.datasets.SceneData.create_scene_data_from_list", "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.datasets.SceneData.create_scene_data_from_list", "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.datasets.SceneData.create_scene_data_from_list", "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.datasets.SceneData.SceneData.to", "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.datasets.SceneData.SceneData.to", "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.datasets.SceneData.SceneData.to", "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.code.train.train", "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.general_utils.write_results", "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.general_utils.write_results", "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.general_utils.write_results", "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.general_utils.write_results", "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.code.multiple_scenes_learning.optimization_all_sets", "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.code.multiple_scenes_learning.optimization_all_sets", "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.general_utils.get_class"], ["def", "main", "(", ")", ":", "\n", "# Init Experiment", "\n", "    ", "conf", ",", "device", ",", "phase", "=", "general_utils", ".", "init_exp", "(", "Phases", ".", "TRAINING", ".", "name", ")", "\n", "general_utils", ".", "log_code", "(", "conf", ")", "\n", "\n", "# Get configuration", "\n", "min_sample_size", "=", "conf", ".", "get_int", "(", "'dataset.min_sample_size'", ")", "\n", "max_sample_size", "=", "conf", ".", "get_int", "(", "'dataset.max_sample_size'", ")", "\n", "batch_size", "=", "conf", ".", "get_int", "(", "'dataset.batch_size'", ")", "\n", "optimization_num_of_epochs", "=", "conf", ".", "get_int", "(", "\"train.optimization_num_of_epochs\"", ")", "\n", "optimization_eval_intervals", "=", "conf", ".", "get_int", "(", "'train.optimization_eval_intervals'", ")", "\n", "optimization_lr", "=", "conf", ".", "get_int", "(", "'train.optimization_lr'", ")", "\n", "\n", "# Create train, test and validation sets", "\n", "test_scenes", "=", "SceneData", ".", "create_scene_data_from_list", "(", "conf", ".", "get_list", "(", "'dataset.test_set'", ")", ",", "conf", ")", "\n", "validation_scenes", "=", "SceneData", ".", "create_scene_data_from_list", "(", "conf", ".", "get_list", "(", "'dataset.validation_set'", ")", ",", "conf", ")", "\n", "train_scenes", "=", "SceneData", ".", "create_scene_data_from_list", "(", "conf", ".", "get_list", "(", "'dataset.train_set'", ")", ",", "conf", ")", "\n", "\n", "train_set", "=", "ScenesDataSet", "(", "train_scenes", ",", "return_all", "=", "False", ",", "min_sample_size", "=", "min_sample_size", ",", "max_sample_size", "=", "max_sample_size", ")", "\n", "validation_set", "=", "ScenesDataSet", "(", "validation_scenes", ",", "return_all", "=", "True", ")", "\n", "test_set", "=", "ScenesDataSet", "(", "test_scenes", ",", "return_all", "=", "True", ")", "\n", "\n", "# Create dataloaders", "\n", "train_loader", "=", "DataLoader", "(", "train_set", ",", "batch_size", "=", "batch_size", ",", "shuffle", "=", "True", ")", ".", "to", "(", "device", ")", "\n", "validation_loader", "=", "DataLoader", "(", "validation_set", ",", "batch_size", "=", "1", ",", "shuffle", "=", "False", ")", ".", "to", "(", "device", ")", "\n", "test_loader", "=", "DataLoader", "(", "test_set", ",", "batch_size", "=", "1", ",", "shuffle", "=", "False", ")", ".", "to", "(", "device", ")", "\n", "\n", "# Train model", "\n", "model", "=", "general_utils", ".", "get_class", "(", "\"models.\"", "+", "conf", ".", "get_string", "(", "\"model.type\"", ")", ")", "(", "conf", ")", ".", "to", "(", "device", ")", "\n", "train_stat", ",", "train_errors", ",", "validation_errors", ",", "test_errors", "=", "train", ".", "train", "(", "conf", ",", "train_loader", ",", "model", ",", "phase", ",", "validation_loader", ",", "test_loader", ")", "\n", "\n", "# Write results", "\n", "general_utils", ".", "write_results", "(", "conf", ",", "train_stat", ",", "file_name", "=", "\"Train_Stats\"", ")", "\n", "general_utils", ".", "write_results", "(", "conf", ",", "train_errors", ",", "file_name", "=", "\"Train\"", ")", "\n", "general_utils", ".", "write_results", "(", "conf", ",", "validation_errors", ",", "file_name", "=", "\"Validation\"", ")", "\n", "general_utils", ".", "write_results", "(", "conf", ",", "test_errors", ",", "file_name", "=", "\"Test\"", ")", "\n", "\n", "# Send jobs for fine-tuning and short optimization", "\n", "test_scans_list", "=", "[", "]", "\n", "for", "test_data", "in", "test_set", ":", "\n", "        ", "test_scans_list", ".", "append", "(", "test_data", ".", "scan_name", ")", "\n", "\n", "", "conf_test", "=", "copy", ".", "deepcopy", "(", "conf", ")", "\n", "conf_test", "[", "'dataset'", "]", "[", "'scans_list'", "]", "=", "test_scans_list", "\n", "conf_test", "[", "'train'", "]", "[", "'num_of_epochs'", "]", "=", "optimization_num_of_epochs", "\n", "conf_test", "[", "'train'", "]", "[", "'eval_intervals'", "]", "=", "optimization_eval_intervals", "\n", "conf_test", "[", "'train'", "]", "[", "'lr'", "]", "=", "optimization_lr", "\n", "\n", "optimization_all_sets", "(", "conf_test", ",", "device", ",", "Phases", ".", "FINE_TUNE", ")", "\n", "optimization_all_sets", "(", "conf_test", ",", "device", ",", "Phases", ".", "SHORT_OPTIMIZATION", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.code.multiple_scenes_learning.optimization_all_sets": [[63, 69], ["conf.get_list", "enumerate", "single_scene_optimization.train_single_model", "utils.Phases.Phases.FINE_TUNE", "utils.Phases.Phases.SHORT_OPTIMIZATION"], "function", ["home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.code.single_scene_optimization.train_single_model"], ["", "def", "optimization_all_sets", "(", "conf", ",", "device", ",", "phase", ")", ":", "\n", "# Get logs directories", "\n", "    ", "scans_list", "=", "conf", ".", "get_list", "(", "'dataset.scans_list'", ")", "\n", "for", "i", ",", "scan", "in", "enumerate", "(", "scans_list", ")", ":", "\n", "        ", "conf", "[", "\"dataset\"", "]", "[", "\"scan\"", "]", "=", "scan", "\n", "train_single_model", "(", "conf", ",", "device", ",", "phase", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.code.single_scene_optimization.train_single_model": [[9, 47], ["datasets.SceneData.create_scene_data", "conf.get_bool", "datasets.ScenesDataSet.ScenesDataSet", "datasets.ScenesDataSet.DataLoader().to", "train.train", "train_errors.drop", "train_stat.set_index", "train_errors.join", "utils.general_utils.write_results", "utils.path_utils.path_to_model", "model.load_state_dict", "range", "torch.load", "print", "datasets.SceneData.get_subset", "datasets.ScenesDataSet.ScenesDataSet", "datasets.ScenesDataSet.DataLoader().to", "train.train", "datasets.ScenesDataSet.DataLoader", "utils.general_utils.get_class", "datasets.ScenesDataSet.DataLoader", "conf.get_string"], "function", ["home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.datasets.SceneData.create_scene_data", "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.datasets.SceneData.SceneData.to", "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.code.train.train", "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.general_utils.write_results", "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.path_utils.path_to_model", "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.datasets.SceneData.get_subset", "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.datasets.SceneData.SceneData.to", "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.code.train.train", "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.general_utils.get_class"], ["def", "train_single_model", "(", "conf", ",", "device", ",", "phase", ")", ":", "\n", "# Create data", "\n", "    ", "scene_data", "=", "SceneData", ".", "create_scene_data", "(", "conf", ")", "\n", "\n", "# Create model", "\n", "model", "=", "general_utils", ".", "get_class", "(", "\"models.\"", "+", "conf", ".", "get_string", "(", "\"model.type\"", ")", ")", "(", "conf", ")", ".", "to", "(", "device", ")", "\n", "if", "phase", "is", "Phases", ".", "FINE_TUNE", ":", "\n", "        ", "path", "=", "path_utils", ".", "path_to_model", "(", "conf", ",", "Phases", ".", "TRAINING", ")", "\n", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "path", ")", ")", "\n", "\n", "# Sequential Optimization", "\n", "", "if", "conf", ".", "get_bool", "(", "\"train.sequential\"", ",", "default", "=", "False", ")", ":", "\n", "        ", "n_cams", "=", "scene_data", ".", "y", ".", "shape", "[", "0", "]", "\n", "conf", "[", "'train'", "]", "[", "'num_of_epochs'", "]", "=", "1000", "\n", "conf", "[", "'train'", "]", "[", "'scheduler_milestone'", "]", "=", "[", "]", "\n", "for", "subset_size", "in", "range", "(", "2", ",", "n_cams", ")", ":", "\n", "            ", "print", "(", "\"########## Train model on subset of size {} ##########\"", ".", "format", "(", "subset_size", ")", ")", "\n", "subset_data", "=", "SceneData", ".", "get_subset", "(", "scene_data", ",", "subset_size", ")", "\n", "conf", "[", "\"dataset\"", "]", "[", "\"scan\"", "]", "=", "subset_data", ".", "scan_name", "\n", "dubscene_dataset", "=", "ScenesDataSet", ".", "ScenesDataSet", "(", "[", "subset_data", "]", ",", "return_all", "=", "True", ")", "\n", "subscene_loader", "=", "ScenesDataSet", ".", "DataLoader", "(", "dubscene_dataset", ")", ".", "to", "(", "device", ")", "\n", "_", ",", "_", ",", "_", ",", "_", "=", "train", ".", "train", "(", "conf", ",", "subscene_loader", ",", "model", ",", "phase", ")", "\n", "\n", "", "conf", "[", "'train'", "]", "[", "'num_of_epochs'", "]", "=", "20000", "\n", "conf", "[", "'train'", "]", "[", "'scheduler_milestone'", "]", "=", "[", "10000", "]", "\n", "conf", "[", "\"dataset\"", "]", "[", "\"scan\"", "]", "=", "scene_data", ".", "scan_name", "\n", "\n", "# Optimize Scene", "\n", "", "scene_dataset", "=", "ScenesDataSet", ".", "ScenesDataSet", "(", "[", "scene_data", "]", ",", "return_all", "=", "True", ")", "\n", "scene_loader", "=", "ScenesDataSet", ".", "DataLoader", "(", "scene_dataset", ")", ".", "to", "(", "device", ")", "\n", "train_stat", ",", "train_errors", ",", "_", ",", "_", "=", "train", ".", "train", "(", "conf", ",", "scene_loader", ",", "model", ",", "phase", ")", "\n", "\n", "# Write results", "\n", "train_errors", ".", "drop", "(", "\"Mean\"", ",", "inplace", "=", "True", ")", "\n", "train_stat", "[", "\"Scene\"", "]", "=", "train_errors", ".", "index", "\n", "train_stat", ".", "set_index", "(", "\"Scene\"", ",", "inplace", "=", "True", ")", "\n", "train_res", "=", "train_errors", ".", "join", "(", "train_stat", ")", "\n", "general_utils", ".", "write_results", "(", "conf", ",", "train_res", ",", "file_name", "=", "\"Results_\"", "+", "phase", ".", "name", ",", "append", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.code.train.epoch_train": [[14, 35], ["model.train", "scheduler.step", "torch.tensor().mean", "torch.tensor", "optimizer.zero_grad", "model", "loss_func", "train_losses.append", "torch.tensor.item", "torch.tensor.backward", "optimizer.step", "torch.tensor", "utils.dataset_utils.is_valid_sample", "print", "loss_func.item"], "function", ["home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.code.train.train", "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.sparse_utils.SparseMat.mean", "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.dataset_utils.is_valid_sample"], ["def", "epoch_train", "(", "train_data", ",", "model", ",", "loss_func", ",", "optimizer", ",", "scheduler", ",", "epoch", ")", ":", "\n", "    ", "model", ".", "train", "(", ")", "\n", "train_losses", "=", "[", "]", "\n", "for", "train_batch", "in", "train_data", ":", "# Loop over all sets - 30", "\n", "        ", "batch_loss", "=", "torch", ".", "tensor", "(", "[", "0.0", "]", ",", "device", "=", "train_data", ".", "device", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "for", "curr_data", "in", "train_batch", ":", "\n", "            ", "if", "not", "dataset_utils", ".", "is_valid_sample", "(", "curr_data", ")", ":", "\n", "                ", "print", "(", "'{} {} has a camera with not enough points'", ".", "format", "(", "epoch", ",", "curr_data", ".", "scan_name", ")", ")", "\n", "continue", "\n", "", "pred_cam", "=", "model", "(", "curr_data", ")", "\n", "loss", "=", "loss_func", "(", "pred_cam", ",", "curr_data", ")", "\n", "batch_loss", "+=", "loss", "\n", "train_losses", ".", "append", "(", "loss", ".", "item", "(", ")", ")", "\n", "", "if", "batch_loss", ".", "item", "(", ")", ">", "0", ":", "\n", "            ", "batch_loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "", "", "scheduler", ".", "step", "(", ")", "\n", "\n", "mean_loss", "=", "torch", ".", "tensor", "(", "train_losses", ")", ".", "mean", "(", ")", "\n", "return", "mean_loss", ",", "train_losses", "\n", "\n"]], "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.code.train.epoch_evaluation": [[37, 77], ["model.eval", "pandas.DataFrame", "df_errors.round.mean", "df_errors.round.append", "df_errors.round.set_index", "df_errors.round.round", "print", "model.train", "torch.no_grad", "df_errors.round.to_string", "time", "time.time", "model", "evaluation.prepare_predictions", "evaluation.compute_errors", "errors_list.append", "df_errors.round.last_valid_index", "time", "time.time", "utils.dataset_utils.get_data_statistics", "evaluation.compute_errors.update", "utils.dataset_utils.save_cameras", "conf.get_bool", "utils.plot_utils.plot_cameras_before_and_after_ba", "utils.Phases.Phases.VALIDATION", "utils.Phases.Phases.TEST", "utils.Phases.Phases.VALIDATION"], "function", ["home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.sparse_utils.SparseMat.mean", "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.code.train.train", "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.code.evaluation.prepare_predictions", "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.code.evaluation.compute_errors", "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.dataset_utils.get_data_statistics", "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.dataset_utils.save_cameras", "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.plot_utils.plot_cameras_before_and_after_ba"], ["", "def", "epoch_evaluation", "(", "data_loader", ",", "model", ",", "conf", ",", "epoch", ",", "phase", ",", "save_predictions", "=", "False", ",", "bundle_adjustment", "=", "True", ")", ":", "\n", "    ", "errors_list", "=", "[", "]", "\n", "model", ".", "eval", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "batch_data", "in", "data_loader", ":", "\n", "            ", "for", "curr_data", "in", "batch_data", ":", "\n", "# Get predictions", "\n", "                ", "begin_time", "=", "time", "(", ")", "\n", "pred_cam", "=", "model", "(", "curr_data", ")", "\n", "pred_time", "=", "time", "(", ")", "-", "begin_time", "\n", "\n", "# Eval results", "\n", "outputs", "=", "evaluation", ".", "prepare_predictions", "(", "curr_data", ",", "pred_cam", ",", "conf", ",", "bundle_adjustment", ")", "\n", "errors", "=", "evaluation", ".", "compute_errors", "(", "outputs", ",", "conf", ",", "bundle_adjustment", ")", "\n", "\n", "errors", "[", "'Inference time'", "]", "=", "pred_time", "\n", "errors", "[", "'Scene'", "]", "=", "curr_data", ".", "scan_name", "\n", "\n", "# Get scene statistics on final evaluation", "\n", "if", "epoch", "is", "None", ":", "\n", "                    ", "stats", "=", "dataset_utils", ".", "get_data_statistics", "(", "curr_data", ")", "\n", "errors", ".", "update", "(", "stats", ")", "\n", "\n", "", "errors_list", ".", "append", "(", "errors", ")", "\n", "\n", "if", "save_predictions", ":", "\n", "                    ", "dataset_utils", ".", "save_cameras", "(", "outputs", ",", "conf", ",", "curr_epoch", "=", "epoch", ",", "phase", "=", "phase", ")", "\n", "if", "conf", ".", "get_bool", "(", "'dataset.calibrated'", ")", ":", "\n", "                        ", "path", "=", "plot_utils", ".", "plot_cameras_before_and_after_ba", "(", "outputs", ",", "errors", ",", "conf", ",", "phase", ",", "scan", "=", "curr_data", ".", "scan_name", ",", "epoch", "=", "epoch", ",", "bundle_adjustment", "=", "bundle_adjustment", ")", "\n", "\n", "", "", "", "", "", "df_errors", "=", "pd", ".", "DataFrame", "(", "errors_list", ")", "\n", "mean_errors", "=", "df_errors", ".", "mean", "(", ")", "\n", "df_errors", "=", "df_errors", ".", "append", "(", "mean_errors", ",", "ignore_index", "=", "True", ")", "\n", "df_errors", ".", "at", "[", "df_errors", ".", "last_valid_index", "(", ")", ",", "\"Scene\"", "]", "=", "\"Mean\"", "\n", "df_errors", ".", "set_index", "(", "\"Scene\"", ",", "inplace", "=", "True", ")", "\n", "df_errors", "=", "df_errors", ".", "round", "(", "3", ")", "\n", "print", "(", "df_errors", ".", "to_string", "(", ")", ",", "flush", "=", "True", ")", "\n", "model", ".", "train", "(", ")", "\n", "\n", "return", "df_errors", "\n", "\n"]], "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.code.train.train": [[79, 149], ["conf.get_int", "conf.get_int", "conf.get_list", "conf.get_float", "conf.get_list", "conf.get_float", "torch.optim.Adam", "torch.optim.lr_scheduler.MultiStepLR", "torch.empty", "time", "time.time", "range", "print", "conf.get_bool", "train.epoch_evaluation", "utils.path_utils.path_to_model", "torch.save", "pandas.DataFrame", "getattr", "model.parameters", "conf.get_bool", "train.epoch_train", "print", "train.epoch_evaluation", "print", "train.epoch_evaluation", "copy.deepcopy.state_dict", "conf.get_string", "print", "epoch_evaluation.loc[].sum().values.item", "train.epoch_evaluation", "train.epoch_evaluation", "copy.deepcopy", "print", "utils.path_utils.path_to_model", "torch.save", "time", "time.time", "copy.deepcopy.state_dict", "epoch_evaluation.loc[].sum"], "function", ["home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.code.train.epoch_evaluation", "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.path_utils.path_to_model", "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.code.train.epoch_train", "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.code.train.epoch_evaluation", "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.code.train.epoch_evaluation", "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.code.train.epoch_evaluation", "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.code.train.epoch_evaluation", "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.path_utils.path_to_model", "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.sparse_utils.SparseMat.sum"], ["", "def", "train", "(", "conf", ",", "train_data", ",", "model", ",", "phase", ",", "validation_data", "=", "None", ",", "test_data", "=", "None", ")", ":", "\n", "    ", "num_of_epochs", "=", "conf", ".", "get_int", "(", "'train.num_of_epochs'", ")", "\n", "eval_intervals", "=", "conf", ".", "get_int", "(", "'train.eval_intervals'", ",", "default", "=", "500", ")", "\n", "validation_metric", "=", "conf", ".", "get_list", "(", "'train.validation_metric'", ",", "default", "=", "[", "\"our_repro\"", "]", ")", "\n", "\n", "# Loss functions", "\n", "loss_func", "=", "getattr", "(", "loss_functions", ",", "conf", ".", "get_string", "(", "'loss.func'", ")", ")", "(", "conf", ")", "\n", "\n", "# Optimizer params", "\n", "lr", "=", "conf", ".", "get_float", "(", "'train.lr'", ")", "\n", "scheduler_milestone", "=", "conf", ".", "get_list", "(", "'train.scheduler_milestone'", ")", "\n", "gamma", "=", "conf", ".", "get_float", "(", "'train.gamma'", ",", "default", "=", "0.1", ")", "\n", "\n", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "lr", ")", "\n", "scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "MultiStepLR", "(", "optimizer", ",", "milestones", "=", "scheduler_milestone", ",", "gamma", "=", "gamma", ")", "\n", "\n", "best_validation_metric", "=", "math", ".", "inf", "\n", "best_epoch", "=", "0", "\n", "best_model", "=", "torch", ".", "empty", "(", "0", ")", "\n", "converge_time", "=", "-", "1", "\n", "begin_time", "=", "time", "(", ")", "\n", "\n", "no_ba_during_training", "=", "not", "conf", ".", "get_bool", "(", "'ba.only_last_eval'", ")", "\n", "\n", "for", "epoch", "in", "range", "(", "num_of_epochs", ")", ":", "\n", "        ", "mean_train_loss", ",", "train_losses", "=", "epoch_train", "(", "train_data", ",", "model", ",", "loss_func", ",", "optimizer", ",", "scheduler", ",", "epoch", ")", "\n", "if", "epoch", "%", "100", "==", "0", ":", "\n", "            ", "print", "(", "'{} Train Loss: {}'", ".", "format", "(", "epoch", ",", "mean_train_loss", ")", ")", "\n", "", "if", "epoch", "%", "eval_intervals", "==", "0", "or", "epoch", "==", "num_of_epochs", "-", "1", ":", "# Eval current results", "\n", "            ", "if", "phase", "is", "Phases", ".", "TRAINING", ":", "\n", "                ", "validation_errors", "=", "epoch_evaluation", "(", "validation_data", ",", "model", ",", "conf", ",", "epoch", ",", "Phases", ".", "VALIDATION", ",", "save_predictions", "=", "True", ",", "bundle_adjustment", "=", "no_ba_during_training", ")", "\n", "", "else", ":", "\n", "                ", "validation_errors", "=", "epoch_evaluation", "(", "train_data", ",", "model", ",", "conf", ",", "epoch", ",", "phase", ",", "save_predictions", "=", "True", ",", "bundle_adjustment", "=", "no_ba_during_training", ")", "\n", "\n", "", "metric", "=", "validation_errors", ".", "loc", "[", "[", "\"Mean\"", "]", ",", "validation_metric", "]", ".", "sum", "(", "axis", "=", "1", ")", ".", "values", ".", "item", "(", ")", "\n", "\n", "if", "metric", "<", "best_validation_metric", ":", "\n", "                ", "converge_time", "=", "time", "(", ")", "-", "begin_time", "\n", "best_validation_metric", "=", "metric", "\n", "best_epoch", "=", "epoch", "\n", "best_model", "=", "copy", ".", "deepcopy", "(", "model", ")", "\n", "print", "(", "'Updated best validation metric: {} time so far: {}'", ".", "format", "(", "best_validation_metric", ",", "converge_time", ")", ")", "\n", "path", "=", "path_utils", ".", "path_to_model", "(", "conf", ",", "phase", ",", "epoch", "=", "epoch", ")", "\n", "torch", ".", "save", "(", "best_model", ".", "state_dict", "(", ")", ",", "path", ")", "\n", "\n", "# Eval final model", "\n", "", "", "", "train_stat", "=", "{", "}", "\n", "print", "(", "\"Evaluate training set\"", ")", "\n", "run_ba", "=", "conf", ".", "get_bool", "(", "'ba.run_ba'", ",", "default", "=", "True", ")", "\n", "train_errors", "=", "epoch_evaluation", "(", "train_data", ",", "best_model", ",", "conf", ",", "None", ",", "phase", ",", "save_predictions", "=", "True", ",", "bundle_adjustment", "=", "run_ba", ")", "\n", "\n", "if", "phase", "is", "Phases", ".", "TRAINING", ":", "\n", "        ", "print", "(", "\"Evaluate validation set\"", ")", "\n", "validation_errors", "=", "epoch_evaluation", "(", "validation_data", ",", "best_model", ",", "conf", ",", "None", ",", "Phases", ".", "VALIDATION", ",", "save_predictions", "=", "True", ",", "bundle_adjustment", "=", "run_ba", ")", "\n", "print", "(", "\"Evaluate test set\"", ")", "\n", "test_errors", "=", "epoch_evaluation", "(", "test_data", ",", "best_model", ",", "conf", ",", "None", ",", "Phases", ".", "TEST", ",", "save_predictions", "=", "True", ",", "bundle_adjustment", "=", "run_ba", ")", "\n", "", "else", ":", "\n", "        ", "validation_errors", "=", "None", "\n", "test_errors", "=", "None", "\n", "\n", "# Saving the best model", "\n", "", "path", "=", "path_utils", ".", "path_to_model", "(", "conf", ",", "phase", ",", "epoch", "=", "None", ")", "\n", "torch", ".", "save", "(", "best_model", ".", "state_dict", "(", ")", ",", "path", ")", "\n", "\n", "train_stat", "[", "'Convergence time'", "]", "=", "converge_time", "\n", "train_stat", "[", "'best_epoch'", "]", "=", "best_epoch", "\n", "train_stat", "[", "'best_validation_metric'", "]", "=", "best_validation_metric", "\n", "train_stat", "=", "pd", ".", "DataFrame", "(", "[", "train_stat", "]", ")", "\n", "\n", "return", "train_stat", ",", "train_errors", ",", "validation_errors", ",", "test_errors", "\n", "", ""]], "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.code.loss_functions.ESFMLoss.__init__": [[8, 18], ["torch.nn.Module.__init__", "conf.get_float", "conf.get_bool", "conf.get_bool", "conf.get_float"], "methods", ["home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.models.SetOfSet.SetOfSetNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "conf", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "infinity_pts_margin", "=", "conf", ".", "get_float", "(", "\"loss.infinity_pts_margin\"", ")", "\n", "self", ".", "normalize_grad", "=", "conf", ".", "get_bool", "(", "\"loss.normalize_grad\"", ")", "\n", "\n", "self", ".", "hinge_loss", "=", "conf", ".", "get_bool", "(", "\"loss.hinge_loss\"", ")", "\n", "if", "self", ".", "hinge_loss", ":", "\n", "            ", "self", ".", "hinge_loss_weight", "=", "conf", ".", "get_float", "(", "\"loss.hinge_loss_weight\"", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "hinge_loss_weight", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.code.loss_functions.ESFMLoss.forward": [[19, 41], ["[].mean", "pts_2d.register_hook", "utils.geo_utils.get_positive_projected_pts_mask", "utils.geo_utils.get_projected_pts_mask", "torch.where().unsqueeze", "torch.where", "data.norm_M.reshape", "torch.where", "torch.nn.functional.normalize", "data.valid_pts.sum", "torch.ones_like().float", "torch.ones_like"], "methods", ["home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.sparse_utils.SparseMat.mean", "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.geo_utils.get_positive_projected_pts_mask", "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.geo_utils.get_projected_pts_mask", "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.sparse_utils.SparseMat.sum"], ["", "", "def", "forward", "(", "self", ",", "pred_cam", ",", "data", ",", "epoch", "=", "None", ")", ":", "\n", "        ", "Ps", "=", "pred_cam", "[", "\"Ps_norm\"", "]", "\n", "pts_2d", "=", "Ps", "@", "pred_cam", "[", "\"pts3D\"", "]", "# [m, 3, n]", "\n", "\n", "# Normalize gradient", "\n", "if", "self", ".", "normalize_grad", ":", "\n", "            ", "pts_2d", ".", "register_hook", "(", "lambda", "grad", ":", "F", ".", "normalize", "(", "grad", ",", "dim", "=", "1", ")", "/", "data", ".", "valid_pts", ".", "sum", "(", ")", ")", "\n", "\n", "# Get point for reprojection loss", "\n", "", "if", "self", ".", "hinge_loss", ":", "\n", "            ", "projected_points", "=", "geo_utils", ".", "get_positive_projected_pts_mask", "(", "pts_2d", ",", "self", ".", "infinity_pts_margin", ")", "\n", "", "else", ":", "\n", "            ", "projected_points", "=", "geo_utils", ".", "get_projected_pts_mask", "(", "pts_2d", ",", "self", ".", "infinity_pts_margin", ")", "\n", "\n", "# Calculate hinge Loss", "\n", "", "hinge_loss", "=", "(", "self", ".", "infinity_pts_margin", "-", "pts_2d", "[", ":", ",", "2", ",", ":", "]", ")", "*", "self", ".", "hinge_loss_weight", "\n", "\n", "# Calculate reprojection error", "\n", "pts_2d", "=", "(", "pts_2d", "/", "torch", ".", "where", "(", "projected_points", ",", "pts_2d", "[", ":", ",", "2", ",", ":", "]", ",", "torch", ".", "ones_like", "(", "projected_points", ")", ".", "float", "(", ")", ")", ".", "unsqueeze", "(", "dim", "=", "1", ")", ")", "\n", "reproj_err", "=", "(", "pts_2d", "[", ":", ",", "0", ":", "2", ",", ":", "]", "-", "data", ".", "norm_M", ".", "reshape", "(", "Ps", ".", "shape", "[", "0", "]", ",", "2", ",", "-", "1", ")", ")", ".", "norm", "(", "dim", "=", "1", ")", "\n", "\n", "return", "torch", ".", "where", "(", "projected_points", ",", "reproj_err", ",", "hinge_loss", ")", "[", "data", ".", "valid_pts", "]", ".", "mean", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.code.loss_functions.GTLoss.__init__": [[44, 47], ["torch.nn.Module.__init__", "conf.get_bool"], "methods", ["home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.models.SetOfSet.SetOfSetNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "conf", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "calibrated", "=", "conf", ".", "get_bool", "(", "'dataset.calibrated'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.code.loss_functions.GTLoss.forward": [[48, 93], ["data.y[].inverse().transpose", "t_gt.mean", "utils.geo_utils.batch_get_camera_matrix_from_Vt", "torch.inverse().transpose", "torch.bmm().squeeze", "torch.min.mean", "translation_err.mean", "utils.geo_utils.rot_to_quat", "torch.bmm().squeeze", "utils.geo_utils.rot_to_quat", "torch.min", "print", "data.y[].inverse", "torch.bmm().transpose", "torch.inverse", "torch.bmm", "torch.bmm().transpose", "data.y[].inverse().transpose.norm", "torch.inverse().transpose.norm", "torch.bmm", "[].unsqueeze", "torch.bmm", "data.y[].inverse", "data.y[].unsqueeze", "torch.inverse().transpose.transpose", "torch.bmm"], "methods", ["home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.sparse_utils.SparseMat.mean", "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.geo_utils.batch_get_camera_matrix_from_Vt", "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.sparse_utils.SparseMat.mean", "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.sparse_utils.SparseMat.mean"], ["", "def", "forward", "(", "self", ",", "pred_cam", ",", "data", ",", "epoch", "=", "None", ")", ":", "\n", "# Get orientation", "\n", "        ", "Vs_gt", "=", "data", ".", "y", "[", ":", ",", "0", ":", "3", ",", "0", ":", "3", "]", ".", "inverse", "(", ")", ".", "transpose", "(", "1", ",", "2", ")", "\n", "if", "self", ".", "calibrated", ":", "\n", "            ", "Rs_gt", "=", "geo_utils", ".", "rot_to_quat", "(", "torch", ".", "bmm", "(", "data", ".", "Ns_invT", ",", "Vs_gt", ")", ".", "transpose", "(", "1", ",", "2", ")", ")", "\n", "\n", "# Get Location", "\n", "", "t_gt", "=", "-", "torch", ".", "bmm", "(", "data", ".", "y", "[", ":", ",", "0", ":", "3", ",", "0", ":", "3", "]", ".", "inverse", "(", ")", ",", "data", ".", "y", "[", ":", ",", "0", ":", "3", ",", "3", "]", ".", "unsqueeze", "(", "-", "1", ")", ")", ".", "squeeze", "(", ")", "\n", "\n", "# Normalize scene by points", "\n", "# trans = pts3D_gt.mean(dim=1)", "\n", "# scale = (pts3D_gt - trans.unsqueeze(1)).norm(p=2, dim=0).mean()", "\n", "\n", "# Normalize scene by cameras", "\n", "trans", "=", "t_gt", ".", "mean", "(", "dim", "=", "0", ")", "\n", "scale", "=", "(", "t_gt", "-", "trans", ")", ".", "norm", "(", "p", "=", "2", ",", "dim", "=", "1", ")", ".", "mean", "(", ")", "\n", "\n", "t_gt", "=", "(", "t_gt", "-", "trans", ")", "/", "scale", "\n", "new_Ps", "=", "geo_utils", ".", "batch_get_camera_matrix_from_Vt", "(", "Vs_gt", ",", "t_gt", ")", "\n", "\n", "Vs_invT", "=", "pred_cam", "[", "\"Ps_norm\"", "]", "[", ":", ",", "0", ":", "3", ",", "0", ":", "3", "]", "\n", "Vs", "=", "torch", ".", "inverse", "(", "Vs_invT", ")", ".", "transpose", "(", "1", ",", "2", ")", "\n", "ts", "=", "torch", ".", "bmm", "(", "-", "Vs", ".", "transpose", "(", "1", ",", "2", ")", ",", "pred_cam", "[", "\"Ps\"", "]", "[", ":", ",", "0", ":", "3", ",", "3", "]", ".", "unsqueeze", "(", "dim", "=", "-", "1", ")", ")", ".", "squeeze", "(", ")", "\n", "\n", "# Translation error", "\n", "translation_err", "=", "(", "t_gt", "-", "ts", ")", ".", "norm", "(", "p", "=", "2", ",", "dim", "=", "1", ")", "\n", "\n", "# Calculate error", "\n", "if", "self", ".", "calibrated", ":", "\n", "            ", "Rs", "=", "geo_utils", ".", "rot_to_quat", "(", "torch", ".", "bmm", "(", "data", ".", "Ns_invT", ",", "Vs", ")", ".", "transpose", "(", "1", ",", "2", ")", ")", "\n", "orient_err", "=", "(", "Rs", "-", "Rs_gt", ")", ".", "norm", "(", "p", "=", "2", ",", "dim", "=", "1", ")", "\n", "", "else", ":", "\n", "            ", "Vs_gt", "=", "Vs_gt", "/", "Vs_gt", ".", "norm", "(", "p", "=", "'fro'", ",", "dim", "=", "(", "1", ",", "2", ")", ",", "keepdim", "=", "True", ")", "\n", "Vs", "=", "Vs", "/", "Vs", ".", "norm", "(", "p", "=", "'fro'", ",", "dim", "=", "(", "1", ",", "2", ")", ",", "keepdim", "=", "True", ")", "\n", "orient_err", "=", "torch", ".", "min", "(", "(", "Vs", "-", "Vs_gt", ")", ".", "norm", "(", "p", "=", "'fro'", ",", "dim", "=", "(", "1", ",", "2", ")", ")", ",", "(", "Vs", "+", "Vs_gt", ")", ".", "norm", "(", "p", "=", "'fro'", ",", "dim", "=", "(", "1", ",", "2", ")", ")", ")", "\n", "\n", "", "orient_loss", "=", "orient_err", ".", "mean", "(", ")", "\n", "tran_loss", "=", "translation_err", ".", "mean", "(", ")", "\n", "loss", "=", "orient_loss", "+", "tran_loss", "\n", "\n", "if", "epoch", "is", "not", "None", "and", "epoch", "%", "1000", "==", "0", ":", "\n", "# Print loss", "\n", "            ", "print", "(", "\"loss = {}, orient err = {}, trans err = {}\"", ".", "format", "(", "loss", ",", "orient_loss", ",", "tran_loss", ")", ")", "\n", "\n", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.code.evaluation.prepare_predictions": [[7, 74], ["conf.get_bool", "data.Ns.cpu().numpy", "data.Ns_invT.transpose().cpu().numpy", "data.M.cpu().numpy", "utils.geo_utils.M_to_xs", "pred_cam[].cpu().numpy", "utils.geo_utils.pflat().cpu().numpy", "utils.geo_utils.n_view_triangulation", "utils.geo_utils.decompose_camera_matrix", "utils.geo_utils.decompose_camera_matrix", "utils.geo_utils.align_cameras", "data.Ns.cpu", "data.Ns_invT.transpose().cpu", "data.M.cpu", "pred_cam[].cpu", "utils.geo_utils.pflat().cpu", "data.y.cpu().numpy", "conf.get_bool", "conf.get_bool", "utils.ba_functions.euc_ba", "utils.geo_utils.align_cameras", "conf.get_bool", "conf.get_bool", "utils.ba_functions.proj_ba", "data.Ns_invT.transpose", "utils.geo_utils.pflat", "data.y.cpu", "numpy.linalg.inv"], "function", ["home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.geo_utils.M_to_xs", "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.geo_utils.n_view_triangulation", "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.geo_utils.decompose_camera_matrix", "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.geo_utils.decompose_camera_matrix", "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.geo_utils.align_cameras", "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.ba_functions.euc_ba", "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.geo_utils.align_cameras", "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.ba_functions.proj_ba", "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.geo_utils.pflat"], ["def", "prepare_predictions", "(", "data", ",", "pred_cam", ",", "conf", ",", "bundle_adjustment", ")", ":", "\n", "# Take the inputs from pred cam and turn to ndarray", "\n", "    ", "outputs", "=", "{", "}", "\n", "outputs", "[", "'scan_name'", "]", "=", "data", ".", "scan_name", "\n", "calibrated", "=", "conf", ".", "get_bool", "(", "'dataset.calibrated'", ")", "\n", "\n", "Ns", "=", "data", ".", "Ns", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "Ns_inv", "=", "data", ".", "Ns_invT", ".", "transpose", "(", "1", ",", "2", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "# Ks for calibrated, a normalization matrix for uncalibrated", "\n", "M", "=", "data", ".", "M", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "xs", "=", "geo_utils", ".", "M_to_xs", "(", "M", ")", "\n", "\n", "Ps_norm", "=", "pred_cam", "[", "\"Ps_norm\"", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "# Normalized camera!!", "\n", "Ps", "=", "Ns_inv", "@", "Ps_norm", "# unnormalized cameras", "\n", "pts3D_pred", "=", "geo_utils", ".", "pflat", "(", "pred_cam", "[", "\"pts3D\"", "]", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "pts3D_triangulated", "=", "geo_utils", ".", "n_view_triangulation", "(", "Ps", ",", "M", "=", "M", ",", "Ns", "=", "Ns", ")", "\n", "\n", "outputs", "[", "'xs'", "]", "=", "xs", "# to compute reprojection error later", "\n", "outputs", "[", "'Ps'", "]", "=", "Ps", "\n", "outputs", "[", "'Ps_norm'", "]", "=", "Ps_norm", "\n", "outputs", "[", "'pts3D_pred'", "]", "=", "pts3D_pred", "# 4,m", "\n", "outputs", "[", "'pts3D_triangulated'", "]", "=", "pts3D_triangulated", "# 4,n", "\n", "\n", "if", "calibrated", ":", "\n", "        ", "Ks", "=", "Ns_inv", "# data.Ns.inverse().cpu().numpy()", "\n", "outputs", "[", "'Ks'", "]", "=", "Ks", "\n", "Rs_gt", ",", "ts_gt", "=", "geo_utils", ".", "decompose_camera_matrix", "(", "data", ".", "y", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "Ks", ")", "# For alignment and R,t errors", "\n", "outputs", "[", "'Rs_gt'", "]", "=", "Rs_gt", "\n", "outputs", "[", "'ts_gt'", "]", "=", "ts_gt", "\n", "\n", "Rs_pred", ",", "ts_pred", "=", "geo_utils", ".", "decompose_camera_matrix", "(", "Ps_norm", ")", "\n", "outputs", "[", "'Rs'", "]", "=", "Rs_pred", "\n", "outputs", "[", "'ts'", "]", "=", "ts_pred", "\n", "\n", "Rs_fixed", ",", "ts_fixed", ",", "similarity_mat", "=", "geo_utils", ".", "align_cameras", "(", "Rs_pred", ",", "Rs_gt", ",", "ts_pred", ",", "ts_gt", ",", "return_alignment", "=", "True", ")", "# Align  Rs_fixed, tx_fixed", "\n", "outputs", "[", "'Rs_fixed'", "]", "=", "Rs_fixed", "\n", "outputs", "[", "'ts_fixed'", "]", "=", "ts_fixed", "\n", "outputs", "[", "'pts3D_pred_fixed'", "]", "=", "(", "similarity_mat", "@", "pts3D_pred", ")", "# 4,n", "\n", "outputs", "[", "'pts3D_triangulated_fixed'", "]", "=", "(", "similarity_mat", "@", "pts3D_triangulated", ")", "\n", "\n", "if", "bundle_adjustment", ":", "\n", "            ", "repeat", "=", "conf", ".", "get_bool", "(", "'ba.repeat'", ")", "\n", "triangulation", "=", "conf", ".", "get_bool", "(", "'ba.triangulation'", ")", "\n", "ba_res", "=", "ba_functions", ".", "euc_ba", "(", "xs", ",", "Rs", "=", "Rs_pred", ",", "ts", "=", "ts_pred", ",", "Ks", "=", "np", ".", "linalg", ".", "inv", "(", "Ns", ")", ",", "\n", "Xs_our", "=", "pts3D_pred", ".", "T", ",", "Ps", "=", "None", ",", "\n", "Ns", "=", "Ns", ",", "repeat", "=", "repeat", ",", "triangulation", "=", "triangulation", ",", "return_repro", "=", "True", ")", "#    Rs, ts, Ps, Xs", "\n", "outputs", "[", "'Rs_ba'", "]", "=", "ba_res", "[", "'Rs'", "]", "\n", "outputs", "[", "'ts_ba'", "]", "=", "ba_res", "[", "'ts'", "]", "\n", "outputs", "[", "'Xs_ba'", "]", "=", "ba_res", "[", "'Xs'", "]", ".", "T", "# 4,n", "\n", "outputs", "[", "'Ps_ba'", "]", "=", "ba_res", "[", "'Ps'", "]", "\n", "\n", "R_ba_fixed", ",", "t_ba_fixed", ",", "similarity_mat", "=", "geo_utils", ".", "align_cameras", "(", "ba_res", "[", "'Rs'", "]", ",", "Rs_gt", ",", "ba_res", "[", "'ts'", "]", ",", "ts_gt", ",", "\n", "return_alignment", "=", "True", ")", "# Align  Rs_fixed, tx_fixed", "\n", "outputs", "[", "'Rs_ba_fixed'", "]", "=", "R_ba_fixed", "\n", "outputs", "[", "'ts_ba_fixed'", "]", "=", "t_ba_fixed", "\n", "outputs", "[", "'Xs_ba_fixed'", "]", "=", "(", "similarity_mat", "@", "outputs", "[", "'Xs_ba'", "]", ")", "\n", "\n", "", "", "else", ":", "\n", "        ", "if", "bundle_adjustment", ":", "\n", "            ", "repeat", "=", "conf", ".", "get_bool", "(", "'ba.repeat'", ")", "\n", "triangulation", "=", "conf", ".", "get_bool", "(", "'ba.triangulation'", ")", "\n", "ba_res", "=", "ba_functions", ".", "proj_ba", "(", "Ps", "=", "Ps", ",", "xs", "=", "xs", ",", "Xs_our", "=", "pts3D_pred", ".", "T", ",", "Ns", "=", "Ns", ",", "repeat", "=", "repeat", ",", "\n", "triangulation", "=", "triangulation", ",", "return_repro", "=", "True", ",", "normalize_in_tri", "=", "True", ")", "# Ps, Xs", "\n", "outputs", "[", "'Xs_ba'", "]", "=", "ba_res", "[", "'Xs'", "]", ".", "T", "# 4,n", "\n", "outputs", "[", "'Ps_ba'", "]", "=", "ba_res", "[", "'Ps'", "]", "\n", "\n", "", "", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.code.evaluation.compute_errors": [[76, 121], ["conf.get_bool", "numpy.nanmean", "numpy.nanmean", "utils.geo_utils.get_positive_projected_pts_mask", "utils.geo_utils.xs_valid_points", "numpy.logical_and", "utils.geo_utils.reprojection_error_with_points", "utils.geo_utils.reprojection_error_with_points", "utils.geo_utils.tranlsation_rotation_errors", "numpy.mean", "numpy.median", "numpy.mean", "numpy.median", "numpy.nanmean", "conf.get_float", "np.logical_and.sum", "geo_utils.xs_valid_points.sum", "utils.geo_utils.reprojection_error_with_points", "utils.geo_utils.tranlsation_rotation_errors", "numpy.mean", "numpy.median", "numpy.mean", "numpy.median"], "function", ["home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.geo_utils.get_positive_projected_pts_mask", "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.geo_utils.xs_valid_points", "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.geo_utils.reprojection_error_with_points", "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.geo_utils.reprojection_error_with_points", "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.geo_utils.tranlsation_rotation_errors", "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.sparse_utils.SparseMat.mean", "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.sparse_utils.SparseMat.mean", "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.sparse_utils.SparseMat.sum", "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.sparse_utils.SparseMat.sum", "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.geo_utils.reprojection_error_with_points", "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.geo_utils.tranlsation_rotation_errors", "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.sparse_utils.SparseMat.mean", "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.sparse_utils.SparseMat.mean"], ["", "def", "compute_errors", "(", "outputs", ",", "conf", ",", "bundle_adjustment", ")", ":", "\n", "    ", "model_errors", "=", "{", "}", "\n", "calibrated", "=", "conf", ".", "get_bool", "(", "'dataset.calibrated'", ")", "\n", "Ps", "=", "outputs", "[", "'Ps'", "]", "\n", "pts3D_pred", "=", "outputs", "[", "'pts3D_pred'", "]", "\n", "xs", "=", "outputs", "[", "'xs'", "]", "\n", "pts3D_triangulated", "=", "outputs", "[", "'pts3D_triangulated'", "]", "\n", "\n", "model_errors", "[", "\"our_repro\"", "]", "=", "np", ".", "nanmean", "(", "geo_utils", ".", "reprojection_error_with_points", "(", "Ps", ",", "pts3D_pred", ".", "T", ",", "xs", ")", ")", "\n", "model_errors", "[", "\"triangulated_repro\"", "]", "=", "np", ".", "nanmean", "(", "geo_utils", ".", "reprojection_error_with_points", "(", "Ps", ",", "pts3D_triangulated", ".", "T", ",", "xs", ")", ")", "\n", "if", "calibrated", ":", "\n", "        ", "Rs_fixed", "=", "outputs", "[", "'Rs_fixed'", "]", "\n", "ts_fixed", "=", "outputs", "[", "'ts_fixed'", "]", "\n", "Rs_gt", "=", "outputs", "[", "'Rs_gt'", "]", "\n", "ts_gt", "=", "outputs", "[", "'ts_gt'", "]", "\n", "Rs_error", ",", "ts_error", "=", "geo_utils", ".", "tranlsation_rotation_errors", "(", "Rs_fixed", ",", "ts_fixed", ",", "Rs_gt", ",", "ts_gt", ")", "\n", "model_errors", "[", "\"ts_mean\"", "]", "=", "np", ".", "mean", "(", "ts_error", ")", "\n", "model_errors", "[", "\"ts_med\"", "]", "=", "np", ".", "median", "(", "ts_error", ")", "\n", "model_errors", "[", "\"Rs_mean\"", "]", "=", "np", ".", "mean", "(", "Rs_error", ")", "\n", "model_errors", "[", "\"Rs_med\"", "]", "=", "np", ".", "median", "(", "Rs_error", ")", "\n", "\n", "", "if", "bundle_adjustment", ":", "\n", "        ", "Xs_ba", "=", "outputs", "[", "'Xs_ba'", "]", "\n", "Ps_ba", "=", "outputs", "[", "'Ps_ba'", "]", "\n", "model_errors", "[", "'repro_ba'", "]", "=", "np", ".", "nanmean", "(", "geo_utils", ".", "reprojection_error_with_points", "(", "Ps_ba", ",", "Xs_ba", ".", "T", ",", "xs", ")", ")", "\n", "if", "calibrated", ":", "\n", "            ", "Rs_fixed", "=", "outputs", "[", "'Rs_ba_fixed'", "]", "\n", "ts_fixed", "=", "outputs", "[", "'ts_ba_fixed'", "]", "\n", "Rs_gt", "=", "outputs", "[", "'Rs_gt'", "]", "\n", "ts_gt", "=", "outputs", "[", "'ts_gt'", "]", "\n", "Rs_ba_error", ",", "ts_ba_error", "=", "geo_utils", ".", "tranlsation_rotation_errors", "(", "Rs_fixed", ",", "ts_fixed", ",", "Rs_gt", ",", "ts_gt", ")", "\n", "model_errors", "[", "\"ts_ba_mean\"", "]", "=", "np", ".", "mean", "(", "ts_ba_error", ")", "\n", "model_errors", "[", "\"ts_ba_med\"", "]", "=", "np", ".", "median", "(", "ts_ba_error", ")", "\n", "model_errors", "[", "\"Rs_ba_mean\"", "]", "=", "np", ".", "mean", "(", "Rs_ba_error", ")", "\n", "model_errors", "[", "\"Rs_ba_med\"", "]", "=", "np", ".", "median", "(", "Rs_ba_error", ")", "\n", "# Rs errors mean, ts errors mean, ba repro, rs ba mean, ts ba mean", "\n", "\n", "", "", "projected_pts", "=", "geo_utils", ".", "get_positive_projected_pts_mask", "(", "Ps", "@", "pts3D_pred", ",", "conf", ".", "get_float", "(", "'loss.infinity_pts_margin'", ")", ")", "\n", "valid_pts", "=", "geo_utils", ".", "xs_valid_points", "(", "xs", ")", "\n", "unprojected_pts", "=", "np", ".", "logical_and", "(", "~", "projected_pts", ",", "valid_pts", ")", "\n", "part_unprojected", "=", "unprojected_pts", ".", "sum", "(", ")", "/", "valid_pts", ".", "sum", "(", ")", "\n", "\n", "model_errors", "[", "'unprojected'", "]", "=", "part_unprojected", "\n", "\n", "return", "model_errors", "\n", "\n"]], "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.dataset_utils.is_valid_sample": [[6, 8], ["data.x.pts_per_cam.min().item", "data.x.pts_per_cam.min"], "function", ["None"], ["def", "is_valid_sample", "(", "data", ",", "min_pts_per_cam", "=", "10", ")", ":", "\n", "    ", "return", "data", ".", "x", ".", "pts_per_cam", ".", "min", "(", ")", ".", "item", "(", ")", ">=", "min_pts_per_cam", "\n", "\n"]], "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.dataset_utils.divide_indices_to_train_test": [[10, 16], ["numpy.random.permutation"], "function", ["None"], ["", "def", "divide_indices_to_train_test", "(", "N", ",", "n_val", ",", "n_test", "=", "0", ")", ":", "\n", "    ", "perm", "=", "np", ".", "random", ".", "permutation", "(", "N", ")", "\n", "test_indices", "=", "perm", "[", ":", "n_test", "]", "if", "n_test", ">", "0", "else", "[", "]", "\n", "val_indices", "=", "perm", "[", "n_test", ":", "n_test", "+", "n_val", "]", "\n", "train_indices", "=", "perm", "[", "n_test", "+", "n_val", ":", "]", "\n", "return", "train_indices", ",", "val_indices", ",", "test_indices", "\n", "\n"]], "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.dataset_utils.sample_indices": [[18, 34], ["numpy.arange", "max", "int", "numpy.arange", "numpy.random.randint", "numpy.arange", "numpy.random.choice", "numpy.ceil"], "function", ["None"], ["", "def", "sample_indices", "(", "N", ",", "num_samples", ",", "adjacent", ")", ":", "\n", "    ", "if", "num_samples", "==", "1", ":", "# Return all the data", "\n", "        ", "indices", "=", "np", ".", "arange", "(", "N", ")", "\n", "", "else", ":", "\n", "        ", "if", "num_samples", "<", "1", ":", "\n", "            ", "num_samples", "=", "int", "(", "np", ".", "ceil", "(", "num_samples", "*", "N", ")", ")", "\n", "", "num_samples", "=", "max", "(", "2", ",", "num_samples", ")", "\n", "if", "num_samples", ">=", "N", ":", "\n", "            ", "return", "np", ".", "arange", "(", "N", ")", "\n", "", "if", "adjacent", ":", "\n", "            ", "start_ind", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "N", "-", "num_samples", "+", "1", ")", "\n", "end_ind", "=", "start_ind", "+", "num_samples", "\n", "indices", "=", "np", ".", "arange", "(", "start_ind", ",", "end_ind", ")", "\n", "", "else", ":", "\n", "            ", "indices", "=", "np", ".", "random", ".", "choice", "(", "N", ",", "num_samples", ",", "replace", "=", "False", ")", "\n", "", "", "return", "indices", "\n", "\n"]], "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.dataset_utils.save_cameras": [[36, 40], ["utils.geo_utils.xs_to_M", "utils.general_utils.save_camera_mat"], "function", ["home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.geo_utils.xs_to_M", "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.general_utils.save_camera_mat"], ["", "def", "save_cameras", "(", "outputs", ",", "conf", ",", "curr_epoch", ",", "phase", ")", ":", "\n", "    ", "xs", "=", "outputs", "[", "'xs'", "]", "\n", "M", "=", "geo_utils", ".", "xs_to_M", "(", "xs", ")", "\n", "general_utils", ".", "save_camera_mat", "(", "conf", ",", "outputs", ",", "outputs", "[", "'scan_name'", "]", ",", "phase", ",", "curr_epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.dataset_utils.get_data_statistics": [[42, 49], ["valid_pts.sum().float", "all_data.M.max().item", "valid_pts.sum().item", "valid_pts.sum().float.mean().item", "valid_pts.sum().float.std().item", "valid_pts.sum", "all_data.M.max", "valid_pts.sum", "valid_pts.sum().float.mean", "valid_pts.sum().float.std"], "function", ["home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.sparse_utils.SparseMat.sum", "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.sparse_utils.SparseMat.sum", "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.sparse_utils.SparseMat.mean"], ["", "def", "get_data_statistics", "(", "all_data", ")", ":", "\n", "    ", "valid_pts", "=", "all_data", ".", "valid_pts", "\n", "valid_pts_stat", "=", "valid_pts", ".", "sum", "(", "dim", "=", "0", ")", ".", "float", "(", ")", "\n", "stats", "=", "{", "\"Max_2d_pt\"", ":", "all_data", ".", "M", ".", "max", "(", ")", ".", "item", "(", ")", ",", "\"Num_2d_pts\"", ":", "valid_pts", ".", "sum", "(", ")", ".", "item", "(", ")", ",", "\"n_pts\"", ":", "all_data", ".", "M", ".", "shape", "[", "-", "1", "]", ",", "\n", "\"Cameras_per_pts_mean\"", ":", "valid_pts_stat", ".", "mean", "(", ")", ".", "item", "(", ")", ",", "\"Cameras_per_pts_std\"", ":", "valid_pts_stat", ".", "std", "(", ")", ".", "item", "(", ")", ",", "\n", "\"Num of cameras\"", ":", "all_data", ".", "y", ".", "shape", "[", "0", "]", "}", "\n", "return", "stats", "\n", "\n"]], "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.dataset_utils.correct_matches_global": [[51, 62], ["numpy.logical_not", "utils.geo_utils.n_view_triangulation", "xs.reshape", "dataset_utils.get_M_valid_points", "utils.geo_utils.batch_pflat", "numpy.isnan", "numpy.stack"], "function", ["home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.geo_utils.n_view_triangulation", "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.dataset_utils.get_M_valid_points", "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.geo_utils.batch_pflat"], ["", "def", "correct_matches_global", "(", "M", ",", "Ps", ",", "Ns", ")", ":", "\n", "    ", "M_invalid_pts", "=", "np", ".", "logical_not", "(", "get_M_valid_points", "(", "M", ")", ")", "\n", "\n", "Xs", "=", "geo_utils", ".", "n_view_triangulation", "(", "Ps", ",", "M", ",", "Ns", ")", "\n", "xs", "=", "geo_utils", ".", "batch_pflat", "(", "(", "Ps", "@", "Xs", ")", ")", "[", ":", ",", "0", ":", "2", ",", ":", "]", "\n", "\n", "# Remove invalid points", "\n", "xs", "[", "np", ".", "isnan", "(", "xs", ")", "]", "=", "0", "\n", "xs", "[", "np", ".", "stack", "(", "(", "M_invalid_pts", ",", "M_invalid_pts", ")", ",", "axis", "=", "1", ")", "]", "=", "0", "\n", "\n", "return", "xs", ".", "reshape", "(", "M", ".", "shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.dataset_utils.get_M_valid_points": [[64, 75], ["type", "torch.abs().sum", "numpy.abs().sum", "torch.abs", "numpy.abs", "M.reshape", "M_valid_pts.sum", "M.reshape", "M_valid_pts.sum"], "function", ["home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.sparse_utils.SparseMat.sum", "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.sparse_utils.SparseMat.sum", "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.sparse_utils.SparseMat.sum", "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.sparse_utils.SparseMat.sum"], ["", "def", "get_M_valid_points", "(", "M", ")", ":", "\n", "    ", "n_pts", "=", "M", ".", "shape", "[", "-", "1", "]", "\n", "\n", "if", "type", "(", "M", ")", "is", "torch", ".", "Tensor", ":", "\n", "        ", "M_valid_pts", "=", "torch", ".", "abs", "(", "M", ".", "reshape", "(", "-", "1", ",", "2", ",", "n_pts", ")", ")", ".", "sum", "(", "dim", "=", "1", ")", "!=", "0", "\n", "M_valid_pts", "[", ":", ",", "M_valid_pts", ".", "sum", "(", "dim", "=", "0", ")", "<", "2", "]", "=", "False", "\n", "", "else", ":", "\n", "        ", "M_valid_pts", "=", "np", ".", "abs", "(", "M", ".", "reshape", "(", "-", "1", ",", "2", ",", "n_pts", ")", ")", ".", "sum", "(", "axis", "=", "1", ")", "!=", "0", "\n", "M_valid_pts", "[", ":", ",", "M_valid_pts", ".", "sum", "(", "axis", "=", "0", ")", "<", "2", "]", "=", "False", "\n", "\n", "", "return", "M_valid_pts", "\n", "\n"]], "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.dataset_utils.M2sparse": [[77, 97], ["int", "dataset_utils.get_M_valid_points", "get_M_valid_points.sum().unsqueeze", "get_M_valid_points.sum().unsqueeze", "utils.sparse_utils.SparseMat", "torch.nonzero", "utils.geo_utils.normalize_M", "get_M_valid_points.sum", "get_M_valid_points.sum", "M.reshape().transpose", "M.reshape"], "function", ["home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.dataset_utils.get_M_valid_points", "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.geo_utils.normalize_M", "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.sparse_utils.SparseMat.sum", "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.sparse_utils.SparseMat.sum"], ["", "def", "M2sparse", "(", "M", ",", "normalize", "=", "False", ",", "Ns", "=", "None", ")", ":", "\n", "    ", "n_pts", "=", "M", ".", "shape", "[", "1", "]", "\n", "n_cams", "=", "int", "(", "M", ".", "shape", "[", "0", "]", "/", "2", ")", "\n", "\n", "# Get indices", "\n", "valid_pts", "=", "get_M_valid_points", "(", "M", ")", "\n", "cam_per_pts", "=", "valid_pts", ".", "sum", "(", "dim", "=", "0", ")", ".", "unsqueeze", "(", "1", ")", "\n", "pts_per_cam", "=", "valid_pts", ".", "sum", "(", "dim", "=", "1", ")", ".", "unsqueeze", "(", "1", ")", "\n", "mat_indices", "=", "torch", ".", "nonzero", "(", "valid_pts", ")", ".", "T", "\n", "\n", "# Get Values", "\n", "# reshaped_M = M.reshape(n_cams, 2, n_pts).transpose(1, 2)  # [2m, n] -> [m, 2, n] -> [m, n, 2]", "\n", "if", "normalize", ":", "\n", "        ", "norm_M", "=", "geo_utils", ".", "normalize_M", "(", "M", ",", "Ns", ")", "\n", "mat_vals", "=", "norm_M", "[", "mat_indices", "[", "0", "]", ",", "mat_indices", "[", "1", "]", ",", ":", "]", "\n", "", "else", ":", "\n", "        ", "mat_vals", "=", "M", ".", "reshape", "(", "n_cams", ",", "2", ",", "n_pts", ")", ".", "transpose", "(", "1", ",", "2", ")", "[", "mat_indices", "[", "0", "]", ",", "mat_indices", "[", "1", "]", ",", ":", "]", "\n", "\n", "", "mat_shape", "=", "(", "n_cams", ",", "n_pts", ",", "2", ")", "\n", "return", "sparse_utils", ".", "SparseMat", "(", "mat_vals", ",", "mat_indices", ",", "cam_per_pts", ",", "pts_per_cam", ",", "mat_shape", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.plot_utils.plot_img_sets_error_bar": [[13, 35], ["torch.logical_or", "err_list.clone", "numpy.array", "colors.tolist.tolist", "final_err.tolist.tolist", "plotly.bar", "px.bar.update_xaxes", "px.bar.update_yaxes", "px.bar.update_traces", "px.bar.update_layout", "plotly.offline.plot", "plotly.offline.plot", "plotly.offline.plot", "float"], "function", ["None"], ["def", "plot_img_sets_error_bar", "(", "err_list", ",", "imgs_sets", ",", "path", ",", "title", ")", ":", "\n", "    ", "max_val", "=", "20", "\n", "\n", "# Prepare illegal values", "\n", "#illegal_idx = (err_list == float(\"inf\"))", "\n", "illegal_idx", "=", "torch", ".", "logical_or", "(", "(", "err_list", ">", "max_val", ")", ",", "(", "err_list", "==", "float", "(", "\"inf\"", ")", ")", ")", "\n", "final_err", "=", "err_list", ".", "clone", "(", ")", "\n", "final_err", "[", "illegal_idx", "]", "=", "max_val", "\n", "colors", "=", "np", ".", "array", "(", "[", "'#636efa'", ",", "]", "*", "final_err", ".", "shape", "[", "0", "]", ")", "\n", "colors", "[", "illegal_idx", "]", "=", "'crimson'", "\n", "\n", "colors", "=", "colors", ".", "tolist", "(", ")", "\n", "final_err", "=", "final_err", ".", "tolist", "(", ")", "\n", "\n", "# Create figure", "\n", "fig", "=", "px", ".", "bar", "(", "x", "=", "imgs_sets", ",", "y", "=", "final_err", ")", "\n", "fig", ".", "update_xaxes", "(", "title", "=", "'Images sets'", ")", "\n", "fig", ".", "update_yaxes", "(", "title", "=", "title", ",", "range", "=", "[", "0", ",", "max_val", "]", ")", "\n", "fig", ".", "update_traces", "(", "marker_color", "=", "colors", ")", "\n", "fig", ".", "update_layout", "(", "xaxis_type", "=", "'category'", ")", "\n", "\n", "plotly", ".", "offline", ".", "plot", "(", "fig", ",", "filename", "=", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.plot_utils.plot_img_reprojection_error_bar": [[37, 39], ["plotly.Bar", "err_list.tolist"], "function", ["None"], ["", "def", "plot_img_reprojection_error_bar", "(", "err_list", ",", "img_list", ")", ":", "\n", "    ", "return", "go", ".", "Bar", "(", "x", "=", "img_list", ",", "y", "=", "err_list", ".", "tolist", "(", ")", ")", "\n", "# max_val = conf.get_int('plot.reproj_err_bar_max', default=20)", "\n"]], "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.plot_utils.plot_error_per_images_bar": [[52, 58], ["os.path.join", "plot_utils.plot_img_sets_error_bar", "os.path.join", "plot_utils.plot_img_sets_error_bar", "utils.path_utils.path_to_exp", "utils.path_utils.path_to_exp"], "function", ["home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.plot_utils.plot_img_sets_error_bar", "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.plot_utils.plot_img_sets_error_bar", "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.path_utils.path_to_exp", "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.path_utils.path_to_exp"], ["", "def", "plot_error_per_images_bar", "(", "repreoj_err", ",", "symetric_epipolar_dist", ",", "imgs_sets", ",", "conf", ",", "sub_name", "=", "\"\"", ")", ":", "\n", "    ", "path", "=", "os", ".", "path", ".", "join", "(", "utils", ".", "path_utils", ".", "path_to_exp", "(", "conf", ")", ",", "'reprojection_err'", "+", "sub_name", ")", "\n", "plot_img_sets_error_bar", "(", "repreoj_err", ",", "imgs_sets", ",", "path", ",", "'Mean Reprojection Error'", ")", "\n", "\n", "path", "=", "os", ".", "path", ".", "join", "(", "utils", ".", "path_utils", ".", "path_to_exp", "(", "conf", ")", ",", "'SymEpDist'", "+", "sub_name", ")", "\n", "plot_img_sets_error_bar", "(", "symetric_epipolar_dist", ",", "imgs_sets", ",", "path", ",", "'Mean Symmetric Epipolar Distance'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.plot_utils.plot_matrix_heatmap": [[60, 68], ["data_matrix.clone().numpy", "plotly.Heatmap", "data_matrix.clone"], "function", ["None"], ["", "def", "plot_matrix_heatmap", "(", "data_matrix", ",", "indices", ",", "zmax", ")", ":", "\n", "    ", "mask", "=", "data_matrix", "==", "0", "\n", "mat", "=", "data_matrix", ".", "clone", "(", ")", ".", "numpy", "(", ")", "\n", "mat", "[", "mask", "]", "=", "None", "\n", "#fig = px.imshow(mat, x=indices, y=indices)", "\n", "hm", "=", "go", ".", "Heatmap", "(", "z", "=", "mat", ",", "x", "=", "indices", ",", "y", "=", "indices", ",", "zmin", "=", "0", ",", "zmax", "=", "zmax", ")", "\n", "\n", "return", "hm", "\n", "\n"]], "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.plot_utils.plot_heatmaps": [[70, 118], ["torch.zeros", "torch.zeros", "conf.get_int", "plot_utils.plot_matrix_heatmap", "plot_utils.plot_matrix_heatmap", "plot_utils.plot_matrix_heatmap", "plot_utils.plot_matrix_heatmap", "plot_utils.plot_img_reprojection_error_bar", "plotly.subplots.make_subplots", "plotly.subplots.make_subplots.add_trace", "plotly.subplots.make_subplots.update_xaxes", "plotly.subplots.make_subplots.update_yaxes", "plotly.subplots.make_subplots.add_trace", "plotly.subplots.make_subplots.update_xaxes", "plotly.subplots.make_subplots.update_yaxes", "plotly.subplots.make_subplots.add_trace", "plotly.subplots.make_subplots.update_xaxes", "plotly.subplots.make_subplots.update_yaxes", "plotly.subplots.make_subplots.add_trace", "plotly.subplots.make_subplots.update_xaxes", "plotly.subplots.make_subplots.update_yaxes", "plotly.subplots.make_subplots.add_trace", "conf.get_int", "plotly.subplots.make_subplots.update_xaxes", "plotly.subplots.make_subplots.update_yaxes", "plotly.offline.plot", "plotly.offline.plot", "plotly.offline.plot", "list", "list", "list", "list", "os.path.join", "plotly.subplots.make_subplots.write_image", "map", "map", "map", "map", "utils.path_utils.path_to_exp"], "function", ["home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.plot_utils.plot_matrix_heatmap", "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.plot_utils.plot_matrix_heatmap", "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.plot_utils.plot_matrix_heatmap", "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.plot_utils.plot_matrix_heatmap", "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.plot_utils.plot_img_reprojection_error_bar", "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.path_utils.path_to_exp"], ["", "def", "plot_heatmaps", "(", "repreoj_err", ",", "symetric_epipolar_dist", ",", "global_reprojection_error", ",", "edges", ",", "img_list", ",", "conf", ",", "path", "=", "None", ",", "static_path", "=", "None", ")", ":", "\n", "    ", "repreoj_err_edges", "=", "torch", ".", "zeros", "(", "repreoj_err", ".", "shape", ")", "\n", "repreoj_err_edges", "[", "edges", "[", "0", "]", ",", "edges", "[", "1", "]", "]", "=", "repreoj_err", "[", "edges", "[", "0", "]", ",", "edges", "[", "1", "]", "]", "\n", "\n", "symetric_epipolar_dist_edges", "=", "torch", ".", "zeros", "(", "symetric_epipolar_dist", ".", "shape", ")", "\n", "symetric_epipolar_dist_edges", "[", "edges", "[", "0", "]", ",", "edges", "[", "1", "]", "]", "=", "symetric_epipolar_dist", "[", "edges", "[", "0", "]", ",", "edges", "[", "1", "]", "]", "\n", "\n", "zmax", "=", "conf", ".", "get_int", "(", "'plot.color_bar_max'", ",", "default", "=", "5", ")", "\n", "hm_rep_err", "=", "plot_matrix_heatmap", "(", "repreoj_err", ",", "list", "(", "map", "(", "str", ",", "img_list", ")", ")", ",", "zmax", ")", "\n", "hm_rep_err_edges", "=", "plot_matrix_heatmap", "(", "repreoj_err_edges", ",", "list", "(", "map", "(", "str", ",", "img_list", ")", ")", ",", "zmax", ")", "\n", "\n", "hm_sed", "=", "plot_matrix_heatmap", "(", "symetric_epipolar_dist", ",", "list", "(", "map", "(", "str", ",", "img_list", ")", ")", ",", "zmax", ")", "\n", "hm_sed_edges", "=", "plot_matrix_heatmap", "(", "symetric_epipolar_dist_edges", ",", "list", "(", "map", "(", "str", ",", "img_list", ")", ")", ",", "zmax", ")", "\n", "\n", "bar_global_rep_err", "=", "plot_img_reprojection_error_bar", "(", "global_reprojection_error", ",", "img_list", ")", "\n", "\n", "fig", "=", "make_subplots", "(", "2", ",", "4", ",", "subplot_titles", "=", "[", "'Reprojection Error'", ",", "'Symmetric Epipolar Distance'", ",", "\n", "'Reprojection Error - Triplets'", ",", "'Symmetric Epipolar Distance - Triplets'", ",", "\n", "'Global Reprojection Error'", "]", ",", "\n", "specs", "=", "[", "[", "{", "}", ",", "{", "}", ",", "{", "}", ",", "{", "}", "]", ",", "[", "{", "\"colspan\"", ":", "4", "}", ",", "None", ",", "None", ",", "None", "]", "]", ")", "\n", "\n", "fig", ".", "add_trace", "(", "hm_rep_err", ",", "1", ",", "1", ")", "\n", "fig", ".", "update_xaxes", "(", "type", "=", "'category'", ",", "title", "=", "'Image'", ",", "row", "=", "1", ",", "col", "=", "1", ")", "\n", "fig", ".", "update_yaxes", "(", "type", "=", "'category'", ",", "title", "=", "'Image'", ",", "row", "=", "1", ",", "col", "=", "1", ")", "\n", "\n", "fig", ".", "add_trace", "(", "hm_sed", ",", "1", ",", "2", ")", "\n", "fig", ".", "update_xaxes", "(", "type", "=", "'category'", ",", "title", "=", "'Image'", ",", "row", "=", "1", ",", "col", "=", "2", ")", "\n", "fig", ".", "update_yaxes", "(", "type", "=", "'category'", ",", "title", "=", "'Image'", ",", "row", "=", "1", ",", "col", "=", "2", ")", "\n", "\n", "fig", ".", "add_trace", "(", "hm_rep_err_edges", ",", "1", ",", "3", ")", "\n", "fig", ".", "update_xaxes", "(", "type", "=", "'category'", ",", "title", "=", "'Image'", ",", "row", "=", "1", ",", "col", "=", "3", ")", "\n", "fig", ".", "update_yaxes", "(", "type", "=", "'category'", ",", "title", "=", "'Image'", ",", "row", "=", "1", ",", "col", "=", "3", ")", "\n", "\n", "fig", ".", "add_trace", "(", "hm_sed_edges", ",", "1", ",", "4", ")", "\n", "fig", ".", "update_xaxes", "(", "type", "=", "'category'", ",", "title", "=", "'Image'", ",", "row", "=", "1", ",", "col", "=", "4", ")", "\n", "fig", ".", "update_yaxes", "(", "type", "=", "'category'", ",", "title", "=", "'Image'", ",", "row", "=", "1", ",", "col", "=", "4", ")", "\n", "\n", "fig", ".", "add_trace", "(", "bar_global_rep_err", ",", "2", ",", "1", ")", "\n", "max_rep_err", "=", "conf", ".", "get_int", "(", "'plot.reproj_err_bar_max'", ",", "default", "=", "20", ")", "\n", "fig", ".", "update_xaxes", "(", "type", "=", "'category'", ",", "title", "=", "'Image'", ",", "row", "=", "2", ",", "col", "=", "1", ")", "\n", "fig", ".", "update_yaxes", "(", "title", "=", "'Reprojection Error'", ",", "range", "=", "[", "0", ",", "max_rep_err", "]", ",", "row", "=", "2", ",", "col", "=", "1", ")", "\n", "\n", "# fig.update_layout(width=1000)", "\n", "if", "path", "is", "None", ":", "\n", "        ", "path", "=", "os", ".", "path", ".", "join", "(", "utils", ".", "path_utils", ".", "path_to_exp", "(", "conf", ")", ",", "'errors_heatmap.html'", ")", "\n", "", "plotly", ".", "offline", ".", "plot", "(", "fig", ",", "filename", "=", "path", ")", "\n", "if", "static_path", "is", "not", "None", ":", "\n", "        ", "fig", ".", "write_image", "(", "static_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.plot_utils.plot_cameras_before_and_after_ba": [[120, 138], ["plot_utils.plot_cameras", "plot_utils.plot_cameras"], "function", ["home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.plot_utils.plot_cameras", "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.plot_utils.plot_cameras"], ["", "", "def", "plot_cameras_before_and_after_ba", "(", "outputs", ",", "errors", ",", "conf", ",", "phase", ",", "scan", ",", "epoch", "=", "None", ",", "bundle_adjustment", "=", "False", ")", ":", "\n", "    ", "Rs_gt", "=", "outputs", "[", "'Rs_gt'", "]", "\n", "ts_gt", "=", "outputs", "[", "'ts_gt'", "]", "\n", "\n", "Rs_pred", "=", "outputs", "[", "'Rs_fixed'", "]", "\n", "ts_pred", "=", "outputs", "[", "'ts_fixed'", "]", "\n", "pts3D", "=", "outputs", "[", "'pts3D_pred_fixed'", "]", "[", ":", "3", ",", ":", "]", "\n", "Rs_error", "=", "errors", "[", "'Rs_mean'", "]", "\n", "ts_error", "=", "errors", "[", "'ts_mean'", "]", "\n", "plot_cameras", "(", "Rs_pred", ",", "ts_pred", ",", "pts3D", ",", "Rs_gt", ",", "ts_gt", ",", "Rs_error", ",", "ts_error", ",", "conf", ",", "phase", ",", "scan", "=", "scan", ",", "epoch", "=", "epoch", ")", "\n", "\n", "if", "bundle_adjustment", ":", "\n", "        ", "Rs_pred", "=", "outputs", "[", "'Rs_ba_fixed'", "]", "\n", "ts_pred", "=", "outputs", "[", "'ts_ba_fixed'", "]", "\n", "pts3D", "=", "outputs", "[", "'Xs_ba_fixed'", "]", "[", ":", "3", ",", ":", "]", "\n", "Rs_error", "=", "errors", "[", "'Rs_ba_mean'", "]", "\n", "ts_error", "=", "errors", "[", "'ts_ba_mean'", "]", "\n", "plot_cameras", "(", "Rs_pred", ",", "ts_pred", ",", "pts3D", ",", "Rs_gt", ",", "ts_gt", ",", "Rs_error", ",", "ts_error", ",", "conf", ",", "phase", ",", "scan", "=", "scan", "+", "'_ba'", ",", "epoch", "=", "epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.plot_utils.get_points_colors": [[139, 167], ["numpy.zeros", "utils.geo_utils.xs_valid_points().argmax", "numpy.unique", "enumerate", "utils.geo_utils.xs_valid_points", "numpy.zeros", "range", "range", "matplotlib.image.imread", "matplotlib.image.imread", "numpy.mean", "utils.geo_utils.xs_valid_points", "str().split", "os.path.join", "numpy.where", "xs[].astype", "str().split", "os.path.join", "numpy.where", "xs[].astype", "str", "str"], "function", ["home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.geo_utils.xs_valid_points", "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.sparse_utils.SparseMat.mean", "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.geo_utils.xs_valid_points"], ["", "", "def", "get_points_colors", "(", "images_path", ",", "image_names", ",", "xs", ",", "first_occurence", "=", "False", ")", ":", "\n", "    ", "m", ",", "n", ",", "_", "=", "xs", ".", "shape", "\n", "points_colors", "=", "np", ".", "zeros", "(", "[", "n", ",", "3", "]", ")", "\n", "if", "first_occurence", ":", "\n", "        ", "images_indices", "=", "(", "geo_utils", ".", "xs_valid_points", "(", "xs", ")", ")", ".", "argmax", "(", "axis", "=", "0", ")", "\n", "unique_images", "=", "np", ".", "unique", "(", "images_indices", ")", "\n", "for", "i", ",", "image_ind", "in", "enumerate", "(", "unique_images", ")", ":", "\n", "            ", "image_name", "=", "str", "(", "image_names", "[", "image_ind", "]", "[", "0", "]", ")", ".", "split", "(", "'/'", ")", "[", "1", "]", "\n", "im", "=", "image", ".", "imread", "(", "os", ".", "path", ".", "join", "(", "images_path", ",", "image_name", ")", ")", "\n", "# read the image to ndarray", "\n", "points_in_image", "=", "np", ".", "where", "(", "image_ind", "==", "images_indices", ")", "[", "0", "]", "\n", "for", "point_ind", "in", "points_in_image", ":", "\n", "                ", "point_2d_in_image", "=", "xs", "[", "image_ind", ",", "point_ind", "]", ".", "astype", "(", "int", ")", "\n", "points_colors", "[", "point_ind", "]", "=", "im", "[", "point_2d_in_image", "[", "1", "]", ",", "point_2d_in_image", "[", "0", "]", "]", "\n", "", "", "", "else", ":", "\n", "        ", "valid_points", "=", "geo_utils", ".", "xs_valid_points", "(", "xs", ")", "\n", "colors", "=", "np", ".", "zeros", "(", "[", "m", ",", "n", ",", "3", "]", ")", "\n", "for", "image_ind", "in", "range", "(", "m", ")", ":", "\n", "            ", "image_name", "=", "str", "(", "image_names", "[", "image_ind", "]", "[", "0", "]", ")", ".", "split", "(", "'/'", ")", "[", "1", "]", "\n", "im", "=", "image", ".", "imread", "(", "os", ".", "path", ".", "join", "(", "images_path", ",", "image_name", ")", ")", "\n", "points_in_image", "=", "np", ".", "where", "(", "valid_points", "[", "image_ind", "]", ")", "[", "0", "]", "\n", "for", "point_ind", "in", "points_in_image", ":", "\n", "                ", "point_2d_in_image", "=", "xs", "[", "image_ind", ",", "point_ind", "]", ".", "astype", "(", "int", ")", "\n", "colors", "[", "image_ind", ",", "point_ind", "]", "=", "im", "[", "point_2d_in_image", "[", "1", "]", ",", "point_2d_in_image", "[", "0", "]", "]", "\n", "", "", "for", "point_ind", "in", "range", "(", "n", ")", ":", "\n", "            ", "points_colors", "[", "point_ind", "]", "=", "np", ".", "mean", "(", "colors", "[", "valid_points", "[", ":", ",", "point_ind", "]", ",", "point_ind", "]", ",", "axis", "=", "0", ")", "\n", "\n", "", "", "return", "points_colors", "\n", "\n"]], "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.plot_utils.plot_cameras": [[168, 183], ["data.append", "data.append", "data.append", "data.append", "data.append", "plotly.Figure", "go.Figure.update_layout", "utils.path_utils.path_to_plots", "plotly.offline.plot", "plotly.offline.plot", "plotly.offline.plot", "plot_utils.get_3D_quiver_trace", "plot_utils.get_3D_quiver_trace", "plot_utils.get_3D_scater_trace", "plot_utils.get_3D_scater_trace", "plot_utils.get_3D_scater_trace", "Rs_error.mean", "ts_error.mean"], "function", ["home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.path_utils.path_to_plots", "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.plot_utils.get_3D_quiver_trace", "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.plot_utils.get_3D_quiver_trace", "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.plot_utils.get_3D_scater_trace", "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.plot_utils.get_3D_scater_trace", "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.plot_utils.get_3D_scater_trace", "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.sparse_utils.SparseMat.mean", "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.sparse_utils.SparseMat.mean"], ["", "def", "plot_cameras", "(", "Rs_pred", ",", "ts_pred", ",", "pts3D", ",", "Rs_gt", ",", "ts_gt", ",", "Rs_error", ",", "ts_error", ",", "conf", ",", "phase", ",", "scan", "=", "None", ",", "epoch", "=", "None", ")", ":", "\n", "    ", "data", "=", "[", "]", "\n", "data", ".", "append", "(", "get_3D_quiver_trace", "(", "ts_gt", ",", "Rs_gt", "[", ":", ",", ":", "3", ",", "2", "]", ",", "color", "=", "'#86CE00'", ",", "name", "=", "'cam_gt'", ")", ")", "\n", "data", ".", "append", "(", "get_3D_quiver_trace", "(", "ts_pred", ",", "Rs_pred", "[", ":", ",", ":", "3", ",", "2", "]", ",", "color", "=", "'#C4451C'", ",", "name", "=", "'cam_learn'", ")", ")", "\n", "data", ".", "append", "(", "get_3D_scater_trace", "(", "ts_gt", ".", "T", ",", "color", "=", "'#86CE00'", ",", "name", "=", "'cam_gt'", ",", "size", "=", "1", ")", ")", "\n", "data", ".", "append", "(", "get_3D_scater_trace", "(", "ts_pred", ".", "T", ",", "color", "=", "'#C4451C'", ",", "name", "=", "'cam_learn'", ",", "size", "=", "1", ")", ")", "\n", "data", ".", "append", "(", "get_3D_scater_trace", "(", "pts3D", ",", "'#3366CC'", ",", "'3D points'", ",", "size", "=", "0.5", ")", ")", "\n", "\n", "fig", "=", "go", ".", "Figure", "(", "data", "=", "data", ")", "\n", "fig", ".", "update_layout", "(", "title", "=", "'Cameras: Rotation Mean = {:.5f}, Translation Mean = {:.5f}'", ".", "format", "(", "Rs_error", ".", "mean", "(", ")", ",", "ts_error", ".", "mean", "(", ")", ")", ",", "showlegend", "=", "True", ")", "\n", "\n", "path", "=", "utils", ".", "path_utils", ".", "path_to_plots", "(", "conf", ",", "phase", ",", "epoch", "=", "epoch", ",", "scan", "=", "scan", ")", "\n", "plotly", ".", "offline", ".", "plot", "(", "fig", ",", "filename", "=", "path", ",", "auto_open", "=", "False", ")", "\n", "\n", "return", "path", "\n", "\n"]], "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.plot_utils.get_3D_quiver_trace": [[185, 207], ["plotly.Cone", "len", "len"], "function", ["None"], ["", "def", "get_3D_quiver_trace", "(", "points", ",", "directions", ",", "color", "=", "'#bd1540'", ",", "name", "=", "''", ",", "cam_size", "=", "1", ")", ":", "\n", "    ", "assert", "points", ".", "shape", "[", "1", "]", "==", "3", ",", "\"3d cone plot input points are not correctely shaped \"", "\n", "assert", "len", "(", "points", ".", "shape", ")", "==", "2", ",", "\"3d cone plot input points are not correctely shaped \"", "\n", "assert", "directions", ".", "shape", "[", "1", "]", "==", "3", ",", "\"3d cone plot input directions are not correctely shaped \"", "\n", "assert", "len", "(", "directions", ".", "shape", ")", "==", "2", ",", "\"3d cone plot input directions are not correctely shaped \"", "\n", "\n", "trace", "=", "go", ".", "Cone", "(", "\n", "name", "=", "name", ",", "\n", "x", "=", "points", "[", ":", ",", "0", "]", ",", "\n", "y", "=", "points", "[", ":", ",", "1", "]", ",", "\n", "z", "=", "points", "[", ":", ",", "2", "]", ",", "\n", "u", "=", "directions", "[", ":", ",", "0", "]", ",", "\n", "v", "=", "directions", "[", ":", ",", "1", "]", ",", "\n", "w", "=", "directions", "[", ":", ",", "2", "]", ",", "\n", "sizemode", "=", "'absolute'", ",", "\n", "sizeref", "=", "cam_size", ",", "\n", "showscale", "=", "False", ",", "\n", "colorscale", "=", "[", "[", "0", ",", "color", "]", ",", "[", "1", ",", "color", "]", "]", ",", "\n", "anchor", "=", "\"tail\"", "\n", ")", "\n", "\n", "return", "trace", "\n", "\n"]], "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.plot_utils.get_3D_scater_trace": [[209, 226], ["plotly.Scatter3d", "len", "dict"], "function", ["None"], ["", "def", "get_3D_scater_trace", "(", "points", ",", "color", ",", "name", ",", "size", "=", "0.5", ")", ":", "\n", "    ", "assert", "points", ".", "shape", "[", "0", "]", "==", "3", ",", "\"3d plot input points are not correctely shaped \"", "\n", "assert", "len", "(", "points", ".", "shape", ")", "==", "2", ",", "\"3d plot input points are not correctely shaped \"", "\n", "\n", "trace", "=", "go", ".", "Scatter3d", "(", "\n", "name", "=", "name", ",", "\n", "x", "=", "points", "[", "0", ",", ":", "]", ",", "\n", "y", "=", "points", "[", "1", ",", ":", "]", ",", "\n", "z", "=", "points", "[", "2", ",", ":", "]", ",", "\n", "mode", "=", "'markers'", ",", "\n", "marker", "=", "dict", "(", "\n", "size", "=", "size", ",", "\n", "color", "=", "color", ",", "\n", ")", "\n", ")", "\n", "\n", "return", "trace", "\n", "\n"]], "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.pos_enc_utils.Embedder.__init__": [[5, 8], ["pos_enc_utils.Embedder.create_embedding_fn"], "methods", ["home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.pos_enc_utils.Embedder.create_embedding_fn"], ["    ", "def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "kwargs", "=", "kwargs", "\n", "self", ".", "create_embedding_fn", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.pos_enc_utils.Embedder.create_embedding_fn": [[9, 32], ["embed_fns.append", "torch.linspace", "torch.linspace", "embed_fns.append", "p_fn"], "methods", ["None"], ["", "def", "create_embedding_fn", "(", "self", ")", ":", "\n", "        ", "embed_fns", "=", "[", "]", "\n", "d", "=", "self", ".", "kwargs", "[", "'input_dims'", "]", "\n", "out_dim", "=", "0", "\n", "if", "self", ".", "kwargs", "[", "'include_input'", "]", ":", "\n", "            ", "embed_fns", ".", "append", "(", "lambda", "x", ":", "x", ")", "\n", "out_dim", "+=", "d", "\n", "\n", "", "max_freq", "=", "self", ".", "kwargs", "[", "'max_freq_log2'", "]", "\n", "N_freqs", "=", "self", ".", "kwargs", "[", "'num_freqs'", "]", "\n", "\n", "if", "self", ".", "kwargs", "[", "'log_sampling'", "]", ":", "\n", "            ", "freq_bands", "=", "2.", "**", "torch", ".", "linspace", "(", "0.", ",", "max_freq", ",", "steps", "=", "N_freqs", ")", "\n", "", "else", ":", "\n", "            ", "freq_bands", "=", "torch", ".", "linspace", "(", "2.", "**", "0.", ",", "2.", "**", "max_freq", ",", "steps", "=", "N_freqs", ")", "\n", "\n", "", "for", "freq", "in", "freq_bands", ":", "\n", "            ", "for", "p_fn", "in", "self", ".", "kwargs", "[", "'periodic_fns'", "]", ":", "\n", "                ", "embed_fns", ".", "append", "(", "lambda", "x", ",", "p_fn", "=", "p_fn", ",", "freq", "=", "freq", ":", "p_fn", "(", "x", "*", "freq", ")", ")", "\n", "out_dim", "+=", "d", "\n", "\n", "", "", "self", ".", "embed_fns", "=", "embed_fns", "\n", "self", ".", "out_dim", "=", "out_dim", "\n", "\n"]], "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.pos_enc_utils.Embedder.embed": [[33, 35], ["torch.cat", "fn"], "methods", ["None"], ["", "def", "embed", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "return", "torch", ".", "cat", "(", "[", "fn", "(", "inputs", ")", "for", "fn", "in", "self", ".", "embed_fns", "]", ",", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.pos_enc_utils.get_embedder": [[37, 50], ["pos_enc_utils.Embedder", "eo.embed"], "function", ["home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.pos_enc_utils.Embedder.embed"], ["", "", "def", "get_embedder", "(", "multires", ",", "in_dim", ")", ":", "\n", "    ", "embed_kwargs", "=", "{", "\n", "'include_input'", ":", "True", ",", "\n", "'input_dims'", ":", "in_dim", ",", "\n", "'max_freq_log2'", ":", "multires", "-", "1", ",", "\n", "'num_freqs'", ":", "multires", ",", "\n", "'log_sampling'", ":", "True", ",", "\n", "'periodic_fns'", ":", "[", "torch", ".", "sin", ",", "torch", ".", "cos", "]", ",", "\n", "}", "\n", "\n", "embedder_obj", "=", "Embedder", "(", "**", "embed_kwargs", ")", "\n", "embed", "=", "lambda", "x", ",", "eo", "=", "embedder_obj", ":", "eo", ".", "embed", "(", "x", ")", "\n", "return", "embed", ",", "embedder_obj", ".", "out_dim", "", "", ""]], "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.ba_io.read_mat_files": [[6, 16], ["scipy.loadmat", "M.reshape().transpose", "numpy.stack", "M.reshape"], "function", ["None"], ["def", "read_mat_files", "(", "path", ")", ":", "\n", "    ", "raw_data", "=", "sio", ".", "loadmat", "(", "path", "+", "'.mat'", ",", "squeeze_me", "=", "True", ")", "\n", "Xs", "=", "raw_data", "[", "'Points3D'", "]", ".", "T", "\n", "M", "=", "raw_data", "[", "'M'", "]", "\n", "m", ",", "n", "=", "M", ".", "shape", "\n", "m", "=", "m", "//", "2", "\n", "xs", "=", "M", ".", "reshape", "(", "[", "m", ",", "2", ",", "n", "]", ")", ".", "transpose", "(", "[", "0", ",", "2", ",", "1", "]", ")", "\n", "Ps", "=", "np", ".", "stack", "(", "raw_data", "[", "'Ps'", "]", ")", "\n", "data", "=", "{", "'Ps'", ":", "Ps", ",", "'Xs'", ":", "Xs", ",", "'xs'", ":", "xs", "}", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.ba_io.read_euc_gt_mat_files": [[17, 30], ["scipy.loadmat", "numpy.stack", "numpy.stack", "numpy.stack", "np.asarray.reshape().transpose", "isinstance", "numpy.asarray", "np.asarray.todense", "np.asarray.reshape"], "function", ["None"], ["", "def", "read_euc_gt_mat_files", "(", "path", ")", ":", "\n", "    ", "raw_data", "=", "sio", ".", "loadmat", "(", "path", "+", "'.mat'", ",", "squeeze_me", "=", "True", ")", "\n", "M", "=", "raw_data", "[", "'M'", "]", "\n", "if", "not", "isinstance", "(", "M", ",", "(", "np", ".", "ndarray", ",", "np", ".", "generic", ")", ")", ":", "\n", "        ", "M", "=", "np", ".", "asarray", "(", "M", ".", "todense", "(", ")", ")", "\n", "", "Rs", "=", "np", ".", "stack", "(", "raw_data", "[", "'R_gt'", "]", ")", "\n", "ts", "=", "np", ".", "stack", "(", "raw_data", "[", "'T_gt'", "]", ")", "\n", "Ks", "=", "np", ".", "stack", "(", "raw_data", "[", "'K_gt'", "]", ")", "\n", "m", ",", "n", "=", "M", ".", "shape", "\n", "m", "=", "m", "//", "2", "\n", "xs", "=", "M", ".", "reshape", "(", "[", "m", ",", "2", ",", "n", "]", ")", ".", "transpose", "(", "[", "0", ",", "2", ",", "1", "]", ")", "\n", "data", "=", "{", "'Rs'", ":", "Rs", ",", "'ts'", ":", "ts", ",", "'Ks'", ":", "Ks", ",", "'xs'", ":", "xs", "}", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.ba_io.read_proj_gt_mat_files": [[31, 39], ["scipy.loadmat", "numpy.asarray", "np.asarray.reshape().transpose", "np.asarray.reshape"], "function", ["None"], ["", "def", "read_proj_gt_mat_files", "(", "path", ")", ":", "\n", "    ", "raw_data", "=", "sio", ".", "loadmat", "(", "path", "+", "'.mat'", ",", "squeeze_me", "=", "True", ")", "\n", "M", "=", "np", ".", "asarray", "(", "raw_data", "[", "'M'", "]", ")", "\n", "m", ",", "n", "=", "M", ".", "shape", "\n", "m", "=", "m", "//", "2", "\n", "xs", "=", "M", ".", "reshape", "(", "[", "m", ",", "2", ",", "n", "]", ")", ".", "transpose", "(", "[", "0", ",", "2", ",", "1", "]", ")", "\n", "data", "=", "{", "'xs'", ":", "xs", "}", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.ba_io.read_euc_our_mat_files": [[40, 48], ["scipy.loadmat", "[].T.astype", "os.path.join"], "function", ["None"], ["", "def", "read_euc_our_mat_files", "(", "path", ",", "name", "=", "'Final_Cameras'", ")", ":", "\n", "    ", "raw_data", "=", "sio", ".", "loadmat", "(", "os", ".", "path", ".", "join", "(", "path", ",", "'cameras'", ",", "name", ")", "+", "'.mat'", ",", "squeeze_me", "=", "True", ")", "\n", "Xs", "=", "raw_data", "[", "'pts3D'", "]", "[", ":", "3", "]", ".", "T", ".", "astype", "(", "np", ".", "double", ")", "\n", "Rs", "=", "raw_data", "[", "'Rs'", "]", "\n", "ts", "=", "raw_data", "[", "'ts'", "]", "\n", "Ks", "=", "raw_data", "[", "'Ks'", "]", "\n", "data", "=", "{", "'Xs'", ":", "Xs", ",", "'Rs'", ":", "Rs", ",", "'ts'", ":", "ts", ",", "'Ks'", ":", "Ks", "}", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.ba_io.read_proj_our_mat_files": [[50, 56], ["scipy.loadmat", "[].T.astype", "os.path.join"], "function", ["None"], ["", "def", "read_proj_our_mat_files", "(", "path", ",", "name", "=", "'Final_Cameras'", ")", ":", "\n", "    ", "raw_data", "=", "sio", ".", "loadmat", "(", "os", ".", "path", ".", "join", "(", "path", ",", "'cameras'", ",", "name", ")", "+", "'.mat'", ",", "squeeze_me", "=", "True", ")", "\n", "Xs", "=", "raw_data", "[", "'pts3D'", "]", "[", ":", "3", "]", ".", "T", ".", "astype", "(", "np", ".", "double", ")", "\n", "Ps", "=", "raw_data", "[", "'Ps'", "]", "\n", "data", "=", "{", "'Ps'", ":", "Ps", ",", "'Xs'", ":", "Xs", "}", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.sparse_utils.SparseMat.__init__": [[5, 13], ["len"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "values", ",", "indices", ",", "cam_per_pts", ",", "pts_per_cam", ",", "shape", ")", ":", "\n", "        ", "assert", "len", "(", "shape", ")", "==", "3", "\n", "self", ".", "values", "=", "values", "\n", "self", ".", "indices", "=", "indices", "\n", "self", ".", "shape", "=", "shape", "\n", "self", ".", "cam_per_pts", "=", "cam_per_pts", "\n", "self", ".", "pts_per_cam", "=", "pts_per_cam", "\n", "self", ".", "device", "=", "self", ".", "values", ".", "device", "\n", "\n"]], "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.sparse_utils.SparseMat.size": [[14, 17], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "size", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "shape", "\n", "\n"]], "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.sparse_utils.SparseMat.sum": [[18, 25], ["torch.zeros", "torch.zeros.index_add"], "methods", ["None"], ["", "def", "sum", "(", "self", ",", "dim", ")", ":", "\n", "        ", "assert", "dim", "==", "1", "or", "dim", "==", "0", "\n", "n_features", "=", "self", ".", "shape", "[", "2", "]", "\n", "out_size", "=", "self", ".", "shape", "[", "0", "]", "if", "dim", "==", "1", "else", "self", ".", "shape", "[", "1", "]", "\n", "indices_index", "=", "0", "if", "dim", "==", "1", "else", "1", "\n", "mat_sum", "=", "torch", ".", "zeros", "(", "out_size", ",", "n_features", ",", "device", "=", "self", ".", "device", ")", "\n", "return", "mat_sum", ".", "index_add", "(", "0", ",", "self", ".", "indices", "[", "indices_index", "]", ",", "self", ".", "values", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.sparse_utils.SparseMat.mean": [[26, 32], ["sparse_utils.SparseMat.sum", "sparse_utils.SparseMat.sum"], "methods", ["home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.sparse_utils.SparseMat.sum", "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.sparse_utils.SparseMat.sum"], ["", "def", "mean", "(", "self", ",", "dim", ")", ":", "\n", "        ", "assert", "dim", "==", "1", "or", "dim", "==", "0", "\n", "if", "dim", "==", "0", ":", "\n", "            ", "return", "self", ".", "sum", "(", "dim", "=", "0", ")", "/", "self", ".", "cam_per_pts", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "sum", "(", "dim", "=", "1", ")", "/", "self", ".", "pts_per_cam", "\n", "\n"]], "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.sparse_utils.SparseMat.to": [[33, 40], ["sparse_utils.SparseMat.values.to", "sparse_utils.SparseMat.indices.to", "sparse_utils.SparseMat.pts_per_cam.to", "sparse_utils.SparseMat.cam_per_pts.to"], "methods", ["home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.datasets.SceneData.SceneData.to", "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.datasets.SceneData.SceneData.to", "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.datasets.SceneData.SceneData.to", "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.datasets.SceneData.SceneData.to"], ["", "", "def", "to", "(", "self", ",", "device", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "device", "=", "device", "\n", "self", ".", "values", "=", "self", ".", "values", ".", "to", "(", "device", ",", "**", "kwargs", ")", "\n", "self", ".", "indices", "=", "self", ".", "indices", ".", "to", "(", "device", ",", "**", "kwargs", ")", "\n", "self", ".", "pts_per_cam", "=", "self", ".", "pts_per_cam", ".", "to", "(", "device", ",", "**", "kwargs", ")", "\n", "self", ".", "cam_per_pts", "=", "self", ".", "cam_per_pts", ".", "to", "(", "device", ",", "**", "kwargs", ")", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.sparse_utils.SparseMat.__add__": [[41, 46], ["sparse_utils.SparseMat"], "methods", ["None"], ["", "def", "__add__", "(", "self", ",", "other", ")", ":", "\n", "        ", "assert", "self", ".", "shape", "==", "other", ".", "shape", "\n", "# assert (self.indices == other.indices).all()  # removed due to runtime", "\n", "new_values", "=", "self", ".", "values", "+", "other", ".", "values", "\n", "return", "SparseMat", "(", "new_values", ",", "self", ".", "indices", ",", "self", ".", "cam_per_pts", ",", "self", ".", "pts_per_cam", ",", "self", ".", "shape", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.geo_utils.compare_rotations": [[11, 20], ["isinstance", "numpy.arccos", "numpy.transpose", "cos_err.sum", "[].sum", "numpy.arange", "numpy.arange", "torch.bmm", "R2.transpose", "torch.arange", "torch.arange"], "function", ["home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.sparse_utils.SparseMat.sum", "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.sparse_utils.SparseMat.sum"], ["def", "compare_rotations", "(", "R1", ",", "R2", ")", ":", "\n", "    ", "if", "isinstance", "(", "R1", ",", "np", ".", "ndarray", ")", ":", "\n", "        ", "cos_err", "=", "(", "R1", "@", "np", ".", "transpose", "(", "R2", ",", "[", "0", ",", "2", ",", "1", "]", ")", ")", "[", ":", ",", "np", ".", "arange", "(", "3", ")", ",", "np", ".", "arange", "(", "3", ")", "]", "\n", "cos_err", "=", "(", "cos_err", ".", "sum", "(", "axis", "=", "-", "1", ")", "-", "1", ")", "/", "2", "\n", "", "else", ":", "\n", "        ", "cos_err", "=", "(", "torch", ".", "bmm", "(", "R1", ",", "R2", ".", "transpose", "(", "1", ",", "2", ")", ")", "[", ":", ",", "torch", ".", "arange", "(", "3", ")", ",", "torch", ".", "arange", "(", "3", ")", "]", ".", "sum", "(", "dim", "=", "-", "1", ")", "-", "1", ")", "/", "2", "\n", "", "cos_err", "[", "cos_err", ">", "1", "]", "=", "1", "\n", "cos_err", "[", "cos_err", "<", "-", "1", "]", "=", "-", "1", "\n", "return", "np", ".", "arccos", "(", "cos_err", ")", "*", "180", "/", "np", ".", "pi", "\n", "\n"]], "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.geo_utils.project_to_rot": [[22, 29], ["torch.svd", "torch.transpose", "torch.det", "det.view.view", "torch.cat", "torch.matmul", "torch.matmul"], "function", ["None"], ["", "def", "project_to_rot", "(", "m", ")", ":", "\n", "    ", "u", ",", "s", ",", "v", "=", "torch", ".", "svd", "(", "m", ")", "\n", "vt", "=", "torch", ".", "transpose", "(", "v", ",", "1", ",", "2", ")", "\n", "det", "=", "torch", ".", "det", "(", "torch", ".", "matmul", "(", "u", ",", "vt", ")", ")", "\n", "det", "=", "det", ".", "view", "(", "-", "1", ",", "1", ",", "1", ")", "\n", "vt", "=", "torch", ".", "cat", "(", "(", "vt", "[", ":", ",", ":", "2", ",", ":", "]", ",", "vt", "[", ":", ",", "-", "1", ":", ",", ":", "]", "*", "det", ")", ",", "1", ")", "\n", "return", "torch", ".", "matmul", "(", "u", ",", "vt", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.geo_utils.generate_random_homography": [[31, 43], ["numpy.random.Generator", "numpy.eye", "range", "numpy.random._mt19937.MT19937", "numpy.random.Generator.choice", "torch.from_numpy", "numpy.random.Generator.uniform", "numpy.random.Generator.choice", "numpy.arange"], "function", ["None"], ["", "def", "generate_random_homography", "(", "n", ",", "seed", "=", "0", ",", "to_numpy", "=", "False", ",", "num_row_addition", "=", "5", ")", ":", "\n", "    ", "rand_gen", "=", "Generator", "(", "MT19937", "(", "seed", "=", "seed", ")", ")", "\n", "H", "=", "np", ".", "eye", "(", "n", ")", "\n", "for", "i", "in", "range", "(", "num_row_addition", ")", ":", "\n", "        ", "constants", "=", "rand_gen", ".", "uniform", "(", "0.9", ",", "1.1", ",", "(", "n", ",", "1", ")", ")", "*", "rand_gen", ".", "choice", "(", "[", "-", "1", ",", "1", "]", ",", "size", "=", "(", "n", ",", "1", ")", ")", "\n", "H", "*=", "constants", "\n", "row1", ",", "row2", "=", "rand_gen", ".", "choice", "(", "a", "=", "np", ".", "arange", "(", "n", ")", ",", "size", "=", "(", "2", ",", ")", ",", "replace", "=", "False", ")", "\n", "H", "[", "row1", "]", "+=", "H", "[", "row2", "]", "\n", "", "if", "to_numpy", ":", "\n", "        ", "return", "H", "\n", "", "else", ":", "\n", "        ", "return", "torch", ".", "from_numpy", "(", "H", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.geo_utils.tranlsation_rotation_errors": [[44, 48], ["geo_utils.compare_rotations", "numpy.linalg.norm"], "function", ["home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.geo_utils.compare_rotations"], ["", "", "def", "tranlsation_rotation_errors", "(", "R_fixed", ",", "t_fixed", ",", "gt_Rs", ",", "gt_ts", ")", ":", "\n", "    ", "R_error", "=", "compare_rotations", "(", "R_fixed", ",", "gt_Rs", ")", "\n", "t_error", "=", "np", ".", "linalg", ".", "norm", "(", "t_fixed", "-", "gt_ts", ",", "axis", "=", "-", "1", ")", "\n", "return", "R_error", ",", "t_error", "\n", "\n"]], "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.geo_utils.align_cameras": [[51, 93], ["numpy.sum", "numpy.linalg.svd", "numpy.ones", "numpy.linalg.det", "cvxpy.Variable", "cvxpy.Variable", "cvxpy.Minimize", "cvxpy.Problem", "cp.Problem.solve", "print", "R_opt.reshape", "cvxpy.sum", "cp.Variable.value.reshape", "numpy.eye", "numpy.transpose", "numpy.diag", "cvxpy.norm", "numpy.ones"], "function", ["home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.sparse_utils.SparseMat.sum", "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.sparse_utils.SparseMat.sum"], ["", "def", "align_cameras", "(", "pred_Rs", ",", "gt_Rs", ",", "pred_ts", ",", "gt_ts", ",", "return_alignment", "=", "False", ")", ":", "\n", "    ", "'''\n\n    :param pred_Rs: torch double - n x 3 x 3 predicted camera rotation\n    :param gt_Rs: torch double - n x 3 x 3 camera ground truth rotation\n    :param pred_ts: torch double - n x 3 predicted translation\n    :param gt_ts: torch double - n x 3 ground truth translation\n    :return:\n    '''", "\n", "# find rotation", "\n", "d", "=", "3", "\n", "n", "=", "pred_Rs", ".", "shape", "[", "0", "]", "\n", "\n", "Q", "=", "np", ".", "sum", "(", "gt_Rs", "@", "np", ".", "transpose", "(", "pred_Rs", ",", "[", "0", ",", "2", ",", "1", "]", ")", ",", "axis", "=", "0", ")", "#sum over the n views of R_gt[i] @ R_pred[i].T", "\n", "Uq", ",", "_", ",", "Vqh", "=", "np", ".", "linalg", ".", "svd", "(", "Q", ")", "\n", "sv", "=", "np", ".", "ones", "(", "3", ")", "\n", "sv", "[", "-", "1", "]", "=", "np", ".", "linalg", ".", "det", "(", "Uq", "@", "Vqh", ")", "\n", "R_opt", "=", "Uq", "@", "np", ".", "diag", "(", "sv", ")", "@", "Vqh", "\n", "\n", "R_fixed", "=", "R_opt", ".", "reshape", "(", "[", "1", ",", "3", ",", "3", "]", ")", "@", "pred_Rs", "\n", "\n", "# find translation", "\n", "pred_ts", "=", "pred_ts", "@", "R_opt", ".", "T", "# Apply the optimal rotation on all the translations", "\n", "c_opt", "=", "cp", ".", "Variable", "(", ")", "\n", "t_opt", "=", "cp", ".", "Variable", "(", "(", "1", ",", "d", ")", ")", "\n", "\n", "constraints", "=", "[", "]", "\n", "obj", "=", "cp", ".", "Minimize", "(", "\n", "cp", ".", "sum", "(", "cp", ".", "norm", "(", "gt_ts", "-", "(", "c_opt", "*", "pred_ts", "+", "np", ".", "ones", "(", "(", "n", ",", "1", ")", ",", "dtype", "=", "np", ".", "double", ")", "@", "t_opt", ")", ",", "axis", "=", "1", ")", ")", ")", "\n", "# obj = cp.Minimize(cp.sum(cp.norm(gt_ts.numpy() - (c_opt * pred_ts.numpy() + t_opt_rep), axis=1)))", "\n", "prob", "=", "cp", ".", "Problem", "(", "obj", ",", "constraints", ")", "\n", "prob", ".", "solve", "(", ")", "\n", "print", "(", "\"status:\"", ",", "prob", ".", "status", ")", "\n", "t_fixed", "=", "c_opt", ".", "value", "*", "pred_ts", "+", "t_opt", ".", "value", ".", "reshape", "(", "[", "1", ",", "3", "]", ")", "\n", "\n", "if", "return_alignment", ":", "\n", "        ", "similarity_mat", "=", "np", ".", "eye", "(", "4", ")", "\n", "similarity_mat", "[", "0", ":", "3", ",", "0", ":", "3", "]", "=", "c_opt", ".", "value", "*", "R_opt", "\n", "similarity_mat", "[", "0", ":", "3", ",", "3", "]", "=", "t_opt", ".", "value", "\n", "return", "R_fixed", ",", "t_fixed", ",", "similarity_mat", "\n", "", "else", ":", "\n", "        ", "return", "R_fixed", ",", "t_fixed", "\n", "\n"]], "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.geo_utils.decompose_camera_matrix": [[95, 109], ["isinstance", "numpy.transpose", "torch.bmm", "Rt[].transpose", "torch.bmm().squeeze", "torch.eye().expand", "torch.eye().expand.inverse", "numpy.linalg.inv", "torch.bmm", "Rt[].reshape", "torch.eye", "Rt[].unsqueeze"], "function", ["None"], ["", "", "def", "decompose_camera_matrix", "(", "Ps", ",", "Ks", "=", "None", ")", ":", "\n", "    ", "if", "isinstance", "(", "Ps", ",", "np", ".", "ndarray", ")", ":", "\n", "        ", "Rt", "=", "np", ".", "linalg", ".", "inv", "(", "Ks", ")", "@", "Ps", "if", "Ks", "is", "not", "None", "else", "Ps", "\n", "Rs", "=", "np", ".", "transpose", "(", "Rt", "[", ":", ",", "0", ":", "3", ",", "0", ":", "3", "]", ",", "[", "0", ",", "2", ",", "1", "]", ")", "\n", "ts", "=", "(", "-", "Rs", "@", "Rt", "[", ":", ",", "0", ":", "3", ",", "3", "]", ".", "reshape", "(", "[", "-", "1", ",", "3", ",", "1", "]", ")", ")", ".", "squeeze", "(", ")", "\n", "", "else", ":", "\n", "        ", "n_cams", "=", "Ps", ".", "shape", "[", "0", "]", "\n", "if", "Ks", "is", "None", ":", "\n", "            ", "Ks", "=", "torch", ".", "eye", "(", "3", ",", "device", "=", "Ps", ".", "device", ")", ".", "expand", "(", "(", "n_cams", ",", "3", ",", "3", ")", ")", "\n", "\n", "", "Rt", "=", "torch", ".", "bmm", "(", "Ks", ".", "inverse", "(", ")", ",", "Ps", ")", "\n", "Rs", "=", "Rt", "[", ":", ",", "0", ":", "3", ",", "0", ":", "3", "]", ".", "transpose", "(", "1", ",", "2", ")", "\n", "ts", "=", "torch", ".", "bmm", "(", "-", "Rs", ",", "Rt", "[", ":", ",", "0", ":", "3", ",", "3", "]", ".", "unsqueeze", "(", "-", "1", ")", ")", ".", "squeeze", "(", ")", "\n", "", "return", "Rs", ",", "ts", "\n", "\n"]], "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.geo_utils.decompose_projection_matrix": [[111, 115], ["Ps[].inverse().transpose", "torch.bmm().squeeze", "Ps[].inverse", "torch.bmm", "Ps[].unsqueeze", "Ps[].inverse().transpose.transpose"], "function", ["None"], ["", "def", "decompose_projection_matrix", "(", "Ps", ")", ":", "\n", "    ", "Vs", "=", "Ps", "[", ":", ",", "0", ":", "3", ",", "0", ":", "3", "]", ".", "inverse", "(", ")", ".", "transpose", "(", "1", ",", "2", ")", "\n", "ts", "=", "torch", ".", "bmm", "(", "-", "Vs", ".", "transpose", "(", "1", ",", "2", ")", ",", "Ps", "[", ":", ",", "0", ":", "3", ",", "3", "]", ".", "unsqueeze", "(", "-", "1", ")", ")", ".", "squeeze", "(", ")", "\n", "return", "Vs", ",", "ts", "\n", "\n"]], "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.geo_utils.decompose_essential_matrix": [[117, 137], ["cv2.decomposeEssentialMat", "numpy.concatenate", "numpy.zeros", "enumerate", "int", "numpy.concatenate", "geo_utils.pflat", "numpy.dot", "numpy.dot", "numpy.sum", "numpy.sum", "numpy.argmax", "range", "numpy.eye", "numpy.zeros", "cv2.triangulatePoints", "numpy.sum"], "function", ["home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.geo_utils.pflat", "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.sparse_utils.SparseMat.sum", "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.sparse_utils.SparseMat.sum", "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.sparse_utils.SparseMat.sum"], ["", "def", "decompose_essential_matrix", "(", "E", ",", "x1", ",", "x2", ")", ":", "\n", "# [R1,t], [R1,\u2212t], [R2,t], [R2,\u2212t]", "\n", "    ", "if", "x1", ".", "shape", "[", "0", "]", "==", "3", ":", "\n", "        ", "x1", "=", "x1", "/", "x1", "[", "2", "]", "\n", "x1", "=", "x1", "[", ":", "2", "]", "\n", "x2", "=", "x2", "/", "x2", "[", "2", "]", "\n", "x2", "=", "x2", "[", ":", "2", "]", "\n", "", "R1", ",", "R2", ",", "t", "=", "cv2", ".", "decomposeEssentialMat", "(", "E", "=", "E", ")", "\n", "pose_options", "=", "[", "[", "R1", ",", "t", "]", ",", "[", "R1", ",", "-", "t", "]", ",", "[", "R2", ",", "t", "]", ",", "[", "R2", ",", "-", "t", "]", "]", "\n", "P2_options", "=", "[", "np", ".", "concatenate", "(", "pose_options", "[", "i", "]", ",", "axis", "=", "1", ")", "for", "i", "in", "range", "(", "4", ")", "]", "\n", "P1", "=", "np", ".", "concatenate", "(", "[", "np", ".", "eye", "(", "3", ")", ",", "np", ".", "zeros", "(", "[", "3", ",", "1", "]", ")", "]", ",", "axis", "=", "1", ")", "\n", "number_of_points_in_front", "=", "np", ".", "zeros", "(", "[", "4", ",", "2", "]", ")", "\n", "for", "i", ",", "P2", "in", "enumerate", "(", "P2_options", ")", ":", "\n", "        ", "X", "=", "pflat", "(", "cv2", ".", "triangulatePoints", "(", "P1", ",", "P2", ",", "x1", ",", "x2", ")", ")", "\n", "proj1", "=", "np", ".", "dot", "(", "P1", ",", "X", ")", "\n", "proj2", "=", "np", ".", "dot", "(", "P2", ",", "X", ")", "\n", "number_of_points_in_front", "[", "i", ",", "0", "]", "=", "np", ".", "sum", "(", "proj1", "[", "-", "1", "]", ">", "0", ")", "\n", "number_of_points_in_front", "[", "i", ",", "1", "]", "=", "np", ".", "sum", "(", "proj2", "[", "-", "1", "]", ">", "0", ")", "\n", "", "best_option", "=", "int", "(", "np", ".", "argmax", "(", "np", ".", "sum", "(", "number_of_points_in_front", ",", "axis", "=", "1", ")", ")", ")", "\n", "return", "pose_options", "[", "best_option", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.geo_utils.M_to_xs": [[139, 153], ["M.reshape", "isinstance", "numpy.transpose", "xs.transpose.transpose"], "function", ["None"], ["", "def", "M_to_xs", "(", "M", ")", ":", "\n", "    ", "\"\"\"\n    reshapes the 2d points\n    :param M: [2*m, n]\n    :return: xs [m,n,2]\n    \"\"\"", "\n", "m", ",", "n", "=", "M", ".", "shape", "\n", "m", "=", "m", "//", "2", "\n", "xs", "=", "M", ".", "reshape", "(", "[", "m", ",", "2", ",", "n", "]", ")", "\n", "if", "isinstance", "(", "M", ",", "np", ".", "ndarray", ")", ":", "\n", "        ", "xs", "=", "np", ".", "transpose", "(", "xs", ",", "[", "0", ",", "2", ",", "1", "]", ")", "\n", "", "else", ":", "\n", "        ", "xs", "=", "xs", ".", "transpose", "(", "1", ",", "2", ")", "\n", "", "return", "xs", "\n", "\n"]], "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.geo_utils.xs_to_M": [[155, 163], ["isinstance", "xs.transpose.reshape", "numpy.transpose", "xs.transpose"], "function", ["None"], ["", "def", "xs_to_M", "(", "xs", ")", ":", "\n", "    ", "n", ",", "m", ",", "_", "=", "xs", ".", "shape", "\n", "if", "isinstance", "(", "xs", ",", "np", ".", "ndarray", ")", ":", "\n", "        ", "xs_tran", "=", "np", ".", "transpose", "(", "xs", ",", "[", "0", ",", "2", ",", "1", "]", ")", "\n", "", "else", ":", "\n", "        ", "xs_tran", "=", "xs", ".", "transpose", "(", "1", ",", "2", ")", "\n", "", "M", "=", "xs_tran", ".", "reshape", "(", "[", "2", "*", "n", ",", "m", "]", ")", "\n", "return", "M", "\n", "\n"]], "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.geo_utils.get_V_from_RK": [[165, 167], ["torch.inverse().permute", "Rs.permute", "torch.inverse"], "function", ["None"], ["", "def", "get_V_from_RK", "(", "Rs", ",", "Ks", ")", ":", "\n", "    ", "return", "torch", ".", "inverse", "(", "Ks", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "@", "Rs", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.geo_utils.get_cross_product_matrix": [[168, 177], ["torch.zeros"], "function", ["None"], ["", "def", "get_cross_product_matrix", "(", "t", ")", ":", "\n", "    ", "T", "=", "torch", ".", "zeros", "(", "(", "3", ",", "3", ")", ",", "device", "=", "t", ".", "device", ")", "\n", "T", "[", "0", ",", "1", "]", "=", "-", "t", "[", "2", "]", "\n", "T", "[", "0", ",", "2", "]", "=", "t", "[", "1", "]", "\n", "T", "[", "1", ",", "0", "]", "=", "t", "[", "2", "]", "\n", "T", "[", "1", ",", "2", "]", "=", "-", "t", "[", "0", "]", "\n", "T", "[", "2", ",", "0", "]", "=", "-", "t", "[", "1", "]", "\n", "T", "[", "2", ",", "1", "]", "=", "t", "[", "0", "]", "\n", "return", "T", "\n", "\n"]], "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.geo_utils.batch_get_cross_product_matrix": [[179, 189], ["torch.zeros"], "function", ["None"], ["", "def", "batch_get_cross_product_matrix", "(", "t", ")", ":", "\n", "    ", "batch_size", "=", "t", ".", "shape", "[", "0", "]", "\n", "T", "=", "torch", ".", "zeros", "(", "(", "batch_size", ",", "3", ",", "3", ")", ",", "device", "=", "t", ".", "device", ")", "\n", "T", "[", ":", ",", "0", ",", "1", "]", "=", "-", "t", "[", ":", ",", "2", "]", "\n", "T", "[", ":", ",", "0", ",", "2", "]", "=", "t", "[", ":", ",", "1", "]", "\n", "T", "[", ":", ",", "1", ",", "0", "]", "=", "t", "[", ":", ",", "2", "]", "\n", "T", "[", ":", ",", "1", ",", "2", "]", "=", "-", "t", "[", ":", ",", "0", "]", "\n", "T", "[", ":", ",", "2", ",", "0", "]", "=", "-", "t", "[", ":", ",", "1", "]", "\n", "T", "[", ":", ",", "2", ",", "1", "]", "=", "t", "[", ":", ",", "0", "]", "\n", "return", "T", "\n", "\n"]], "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.geo_utils.get_essential_matrix": [[191, 196], ["geo_utils.get_cross_product_matrix", "geo_utils.get_cross_product_matrix"], "function", ["home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.geo_utils.get_cross_product_matrix", "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.geo_utils.get_cross_product_matrix"], ["", "def", "get_essential_matrix", "(", "Ri", ",", "Rj", ",", "ti", ",", "tj", ")", ":", "\n", "    ", "Ti", "=", "get_cross_product_matrix", "(", "ti", ")", "\n", "Tj", "=", "get_cross_product_matrix", "(", "tj", ")", "\n", "\n", "return", "Ri", ".", "T", "@", "(", "Ti", "-", "Tj", ")", "@", "Rj", "\n", "\n"]], "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.geo_utils.batch_get_bifocal_tensors": [[197, 204], ["len", "torch.zeros", "range", "range", "geo_utils.get_cross_product_matrix"], "function", ["home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.geo_utils.get_cross_product_matrix"], ["", "def", "batch_get_bifocal_tensors", "(", "Rs", ",", "ts", ")", ":", "\n", "    ", "n", "=", "len", "(", "Rs", ")", "\n", "E", "=", "torch", ".", "zeros", "(", "[", "n", ",", "n", ",", "3", ",", "3", "]", ")", "\n", "for", "i", "in", "range", "(", "n", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "n", ")", ":", "\n", "            ", "E", "[", "i", ",", "j", "]", "=", "Rs", "[", "i", "]", ".", "T", "@", "get_cross_product_matrix", "(", "ts", "[", "i", "]", "-", "ts", "[", "j", "]", ")", "@", "Rs", "[", "j", "]", "\n", "", "", "return", "E", "\n", "\n"]], "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.geo_utils.batch_fundamental_from_essential": [[205, 212], ["len", "torch.zeros_like", "range", "range", "torch.inverse", "torch.inverse"], "function", ["None"], ["", "def", "batch_fundamental_from_essential", "(", "E", ",", "Ks", ")", ":", "\n", "    ", "n", "=", "len", "(", "Ks", ")", "\n", "F", "=", "torch", ".", "zeros_like", "(", "E", ")", "\n", "for", "i", "in", "range", "(", "n", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "n", ")", ":", "\n", "            ", "F", "[", "i", ",", "j", "]", "=", "torch", ".", "inverse", "(", "Ks", "[", "i", "]", ")", ".", "T", "@", "E", "[", "i", ",", "j", "]", "@", "torch", ".", "inverse", "(", "Ks", "[", "j", "]", ")", "\n", "", "", "return", "F", "\n", "\n"]], "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.geo_utils.get_fundamental_matrix": [[213, 217], ["geo_utils.get_essential_matrix", "torch.inverse", "torch.inverse"], "function", ["home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.geo_utils.get_essential_matrix"], ["", "def", "get_fundamental_matrix", "(", "Ri", ",", "Rj", ",", "ti", ",", "tj", ",", "Ki", ",", "Kj", ")", ":", "\n", "    ", "Eij", "=", "get_essential_matrix", "(", "Ri", ",", "Rj", ",", "ti", ",", "tj", ")", "\n", "Fij", "=", "torch", ".", "inverse", "(", "Ki", ")", ".", "T", "@", "Eij", "@", "torch", ".", "inverse", "(", "Kj", ")", "\n", "return", "Fij", "\n", "\n"]], "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.geo_utils.get_fundamental_from_V_t": [[219, 223], ["geo_utils.get_cross_product_matrix", "geo_utils.get_cross_product_matrix"], "function", ["home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.geo_utils.get_cross_product_matrix", "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.geo_utils.get_cross_product_matrix"], ["", "def", "get_fundamental_from_V_t", "(", "Vi", ",", "Vj", ",", "ti", ",", "tj", ")", ":", "\n", "    ", "Ti", "=", "get_cross_product_matrix", "(", "ti", ")", "\n", "Tj", "=", "get_cross_product_matrix", "(", "tj", ")", "\n", "return", "Vi", "@", "(", "Ti", "-", "Tj", ")", "@", "Vj", ".", "T", "\n", "\n"]], "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.geo_utils.batch_get_fundamental_from_V_t": [[225, 229], ["geo_utils.batch_get_cross_product_matrix", "geo_utils.batch_get_cross_product_matrix", "torch.bmm", "torch.bmm", "Vj.transpose"], "function", ["home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.geo_utils.batch_get_cross_product_matrix", "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.geo_utils.batch_get_cross_product_matrix"], ["", "def", "batch_get_fundamental_from_V_t", "(", "Vi", ",", "Vj", ",", "ti", ",", "tj", ")", ":", "\n", "    ", "Ti", "=", "batch_get_cross_product_matrix", "(", "ti", ")", "\n", "Tj", "=", "batch_get_cross_product_matrix", "(", "tj", ")", "\n", "return", "torch", ".", "bmm", "(", "Vi", ",", "torch", ".", "bmm", "(", "(", "Ti", "-", "Tj", ")", ",", "Vj", ".", "transpose", "(", "1", ",", "2", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.geo_utils.get_camera_matrix": [[231, 243], ["isinstance", "numpy.concatenate", "torch.cat", "numpy.eye", "torch.eye", "t.reshape", "t.view"], "function", ["None"], ["", "def", "get_camera_matrix", "(", "R", ",", "t", ",", "K", ")", ":", "\n", "    ", "\"\"\"\n    Get the camera matrix as described in paper\n    :param R: Orientation Matrix\n    :param t: Camera Position   \n    :param K: Intrinsic parameters\n    :return: Camera matrix\n    \"\"\"", "\n", "if", "isinstance", "(", "R", ",", "np", ".", "ndarray", ")", ":", "\n", "        ", "return", "K", "@", "R", ".", "T", "@", "np", ".", "concatenate", "(", "(", "np", ".", "eye", "(", "3", ")", ",", "-", "t", ".", "reshape", "(", "3", ",", "1", ")", ")", ",", "axis", "=", "1", ")", "\n", "", "else", ":", "\n", "        ", "return", "K", "@", "R", ".", "T", "@", "torch", ".", "cat", "(", "(", "torch", ".", "eye", "(", "3", ")", ",", "-", "t", ".", "view", "(", "3", ",", "1", ")", ")", ",", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.geo_utils.batch_get_camera_matrix_from_rtk": [[244, 253], ["len", "isinstance", "zip", "numpy.zeros", "torch.zeros", "numpy.arange", "geo_utils.get_camera_matrix"], "function", ["home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.geo_utils.get_camera_matrix"], ["", "", "def", "batch_get_camera_matrix_from_rtk", "(", "Rs", ",", "ts", ",", "Ks", ")", ":", "\n", "    ", "n", "=", "len", "(", "Rs", ")", "\n", "if", "isinstance", "(", "Rs", ",", "np", ".", "ndarray", ")", ":", "\n", "        ", "Ps", "=", "np", ".", "zeros", "(", "[", "n", ",", "3", ",", "4", "]", ")", "\n", "", "else", ":", "\n", "        ", "Ps", "=", "torch", ".", "zeros", "(", "[", "n", ",", "3", ",", "4", "]", ")", "\n", "", "for", "i", ",", "r", ",", "t", ",", "k", "in", "zip", "(", "np", ".", "arange", "(", "n", ")", ",", "Rs", ",", "ts", ",", "Ks", ")", ":", "\n", "        ", "Ps", "[", "i", "]", "=", "get_camera_matrix", "(", "r", ",", "t", ",", "k", ")", "\n", "", "return", "Ps", "\n", "\n"]], "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.geo_utils.get_camera_matrix_from_Vt": [[254, 262], ["torch.cat", "torch.inverse", "torch.eye"], "function", ["None"], ["", "def", "get_camera_matrix_from_Vt", "(", "V", ",", "t", ")", ":", "\n", "    ", "\"\"\"\n    Get the camera matrix as described in paper\n    :param V: inv(K).T @ R.T Orientation Matrix\n    :param t: Camera Position\n    :return: Camera matrix\n    \"\"\"", "\n", "return", "torch", ".", "inverse", "(", "V", ")", ".", "T", "@", "torch", ".", "cat", "(", "(", "torch", ".", "eye", "(", "3", ")", ",", "-", "t", ")", ",", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.geo_utils.batch_get_camera_matrix_from_Vt": [[264, 267], ["torch.inverse().transpose", "torch.cat", "torch.inverse", "torch.bmm", "ts.unsqueeze"], "function", ["None"], ["", "def", "batch_get_camera_matrix_from_Vt", "(", "Vs", ",", "ts", ")", ":", "\n", "    ", "vT_inv", "=", "torch", ".", "inverse", "(", "Vs", ")", ".", "transpose", "(", "1", ",", "2", ")", "\n", "return", "torch", ".", "cat", "(", "(", "vT_inv", ",", "torch", ".", "bmm", "(", "vT_inv", ",", "-", "ts", ".", "unsqueeze", "(", "-", "1", ")", ")", ")", ",", "dim", "=", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.geo_utils.pflat": [[269, 271], ["None"], "function", ["None"], ["", "def", "pflat", "(", "x", ")", ":", "\n", "    ", "return", "x", "/", "x", "[", "-", "1", ",", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.geo_utils.batch_pflat": [[272, 274], ["None"], "function", ["None"], ["", "def", "batch_pflat", "(", "x", ")", ":", "\n", "    ", "return", "x", "/", "x", "[", ":", ",", "2", ":", "3", ",", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.geo_utils.correct_matches": [[275, 280], ["cv2.triangulatePoints", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy", "torch.from_numpy", "geo_utils.pflat", "geo_utils.pflat"], "function", ["home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.geo_utils.pflat", "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.geo_utils.pflat"], ["", "def", "correct_matches", "(", "P1", ",", "P2", ",", "pts_img1", ",", "pts_img2", ")", ":", "\n", "    ", "pts3D", "=", "cv2", ".", "triangulatePoints", "(", "P1", ",", "P2", ",", "pts_img1", "[", "0", ":", "2", ",", ":", "]", ",", "pts_img2", "[", "0", ":", "2", ",", ":", "]", ")", "\n", "pts_img1", "=", "torch", ".", "from_numpy", "(", "pflat", "(", "P1", "@", "pts3D", ")", ")", ".", "float", "(", ")", "\n", "pts_img2", "=", "torch", ".", "from_numpy", "(", "pflat", "(", "P2", "@", "pts3D", ")", ")", ".", "float", "(", ")", "\n", "return", "pts_img1", ",", "pts_img2", "\n", "\n"]], "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.geo_utils.calc_pFp": [[282, 285], ["torch.abs", "torch.sum"], "function", ["home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.sparse_utils.SparseMat.sum"], ["", "def", "calc_pFp", "(", "Fij", ",", "pi", ",", "pj", ")", ":", "\n", "    ", "tmp", "=", "Fij", "@", "pj", "\n", "return", "torch", ".", "abs", "(", "torch", ".", "sum", "(", "pi", "*", "tmp", ",", "dim", "=", "0", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.geo_utils.batch_calc_pFp": [[287, 289], ["torch.bmm"], "function", ["None"], ["", "def", "batch_calc_pFp", "(", "Fij", ",", "pi", ",", "pj", ")", ":", "\n", "    ", "return", "(", "pi", "*", "torch", ".", "bmm", "(", "Fij", ",", "pj", ")", ")", ".", "sum", "(", "dim", "=", "1", ")", ".", "abs", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.geo_utils.calc_reprojection_error": [[291, 296], ["geo_utils.correct_matches", "torch.norm", "torch.norm", "P1.numpy", "P2.numpy", "pts_img1.numpy", "pts_img2.numpy", "geo_utils.pflat", "geo_utils.pflat", "geo_utils.pflat", "geo_utils.pflat"], "function", ["home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.geo_utils.correct_matches", "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.geo_utils.pflat", "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.geo_utils.pflat", "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.geo_utils.pflat", "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.geo_utils.pflat"], ["", "def", "calc_reprojection_error", "(", "P1", ",", "P2", ",", "pts_img1", ",", "pts_img2", ")", ":", "\n", "    ", "coorected_pts_img1", ",", "coorected_pts_img2", "=", "correct_matches", "(", "P1", ".", "numpy", "(", ")", ",", "P2", ".", "numpy", "(", ")", ",", "pts_img1", ".", "numpy", "(", ")", ",", "pts_img2", ".", "numpy", "(", ")", ")", "\n", "reproj_err1", "=", "torch", ".", "norm", "(", "pflat", "(", "coorected_pts_img1", ")", "[", "0", ":", "2", ",", ":", "]", "-", "pflat", "(", "pts_img1", ")", "[", "0", ":", "2", ",", ":", "]", ",", "dim", "=", "0", ",", "p", "=", "2", ")", "\n", "reproj_err2", "=", "torch", ".", "norm", "(", "pflat", "(", "coorected_pts_img2", ")", "[", "0", ":", "2", ",", ":", "]", "-", "pflat", "(", "pts_img2", ")", "[", "0", ":", "2", ",", ":", "]", ",", "dim", "=", "0", ",", "p", "=", "2", ")", "\n", "return", "reproj_err1", ",", "reproj_err2", "\n", "\n"]], "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.geo_utils.calc_global_reprojection_error": [[298, 306], ["len", "utils.dataset_utils.get_M_valid_points", "geo_utils.n_view_triangulation", "M.reshape", "numpy.linalg.norm", "numpy.where", "geo_utils.batch_pflat", "numpy.full"], "function", ["home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.dataset_utils.get_M_valid_points", "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.geo_utils.n_view_triangulation", "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.geo_utils.batch_pflat"], ["", "def", "calc_global_reprojection_error", "(", "Ps", ",", "M", ",", "Ns", ")", ":", "\n", "    ", "n", "=", "len", "(", "Ps", ")", "\n", "valid_pts", "=", "dataset_utils", ".", "get_M_valid_points", "(", "M", ")", "\n", "X", "=", "n_view_triangulation", "(", "Ps", ",", "M", ",", "Ns", ")", "\n", "projected_pts", "=", "batch_pflat", "(", "Ps", "@", "X", ")", "[", ":", ",", "0", ":", "2", ",", ":", "]", "\n", "image_points", "=", "M", ".", "reshape", "(", "n", ",", "2", ",", "M", ".", "shape", "[", "-", "1", "]", ")", "\n", "reproj_err", "=", "np", ".", "linalg", ".", "norm", "(", "image_points", "-", "projected_pts", ",", "axis", "=", "1", ")", "\n", "return", "np", ".", "where", "(", "valid_pts", ",", "reproj_err", ",", "np", ".", "full", "(", "reproj_err", ".", "shape", ",", "np", ".", "nan", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.geo_utils.reprojection_error_with_points": [[308, 331], ["isinstance", "numpy.linalg.norm", "numpy.concatenate", "numpy.transpose", "projected_points.transpose.transpose", "projected_points[].reshape", "numpy.ones"], "function", ["None"], ["", "def", "reprojection_error_with_points", "(", "Ps", ",", "Xs", ",", "xs", ",", "visible_points", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    :param Ps: [m,3,4]\n    :param Xs: [n,3] or [n,4]\n    :param xs: [m,n,2]\n    :return: errors [m,n]\n    \"\"\"", "\n", "m", ",", "n", ",", "d", "=", "xs", ".", "shape", "\n", "_", ",", "D", "=", "Xs", ".", "shape", "\n", "X4", "=", "np", ".", "concatenate", "(", "[", "Xs", ",", "np", ".", "ones", "(", "[", "n", ",", "1", "]", ")", "]", ",", "axis", "=", "1", ")", "if", "D", "==", "3", "else", "Xs", "\n", "\n", "if", "visible_points", "is", "None", ":", "\n", "        ", "visible_points", "=", "xs", "[", ":", ",", ":", ",", "0", "]", ">", "0", "\n", "\n", "", "projected_points", "=", "Ps", "@", "X4", ".", "T", "# [m,3,4] @ [4,n] -> [m,3,n]", "\n", "if", "isinstance", "(", "projected_points", ",", "np", ".", "ndarray", ")", ":", "\n", "        ", "projected_points", "=", "np", ".", "transpose", "(", "projected_points", ",", "[", "0", ",", "2", ",", "1", "]", ")", "# [m,n,3]", "\n", "", "else", ":", "\n", "        ", "projected_points", "=", "projected_points", ".", "transpose", "(", "1", ",", "2", ")", "\n", "", "projected_points", "=", "projected_points", "/", "projected_points", "[", ":", ",", ":", ",", "-", "1", "]", ".", "reshape", "(", "[", "m", ",", "n", ",", "1", "]", ")", "\n", "errors", "=", "np", ".", "linalg", ".", "norm", "(", "xs", "[", ":", ",", ":", ",", ":", "2", "]", "-", "projected_points", "[", ":", ",", ":", ",", ":", "2", "]", ",", "axis", "=", "2", ")", "\n", "errors", "[", "~", "visible_points", "]", "=", "np", ".", "nan", "\n", "return", "errors", "\n", "\n"]], "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.geo_utils.get_points_in_view": [[332, 338], ["numpy.logical_or", "numpy.logical_and", "numpy.where", "numpy.isnan"], "function", ["None"], ["", "def", "get_points_in_view", "(", "M", ",", "img_idx", ",", "X", "=", "None", ")", ":", "\n", "    ", "points_indices", "=", "np", ".", "logical_or", "(", "M", "[", "2", "*", "img_idx", ",", ":", "]", "!=", "0", ",", "M", "[", "2", "*", "img_idx", "+", "1", ",", ":", "]", "!=", "0", ")", "\n", "if", "X", "is", "not", "None", ":", "\n", "        ", "points_indices", "=", "np", ".", "logical_and", "(", "points_indices", ",", "~", "np", ".", "isnan", "(", "X", "[", "0", ",", ":", "]", ")", ")", "\n", "\n", "", "return", "np", ".", "where", "(", "points_indices", ")", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.geo_utils.drawlines": [[340, 354], ["zip", "tuple", "map", "map", "cv2.line", "cv2.circle", "cv2.circle", "numpy.random.randint().tolist", "tuple", "tuple", "numpy.random.randint"], "function", ["None"], ["", "def", "drawlines", "(", "img1", ",", "img2", ",", "lines", ",", "pts1", ",", "pts2", ")", ":", "\n", "    ", "''' img1 - image on which we draw the epilines for the points in img2\n        lines - corresponding epilines '''", "\n", "# img1 = cv2.cvtColor(img1, cv2.COLOR_GRAY2BGR)", "\n", "# img2 = cv2.cvtColor(img2, cv2.COLOR_GRAY2BGR)", "\n", "r", ",", "c", ",", "_", "=", "img1", ".", "shape", "\n", "for", "r", ",", "pt1", ",", "pt2", "in", "zip", "(", "lines", ",", "pts1", ",", "pts2", ")", ":", "\n", "        ", "color", "=", "tuple", "(", "np", ".", "random", ".", "randint", "(", "0", ",", "255", ",", "3", ")", ".", "tolist", "(", ")", ")", "\n", "x0", ",", "y0", "=", "map", "(", "int", ",", "[", "0", ",", "-", "r", "[", "2", "]", "/", "r", "[", "1", "]", "]", ")", "\n", "x1", ",", "y1", "=", "map", "(", "int", ",", "[", "c", ",", "-", "(", "r", "[", "2", "]", "+", "r", "[", "0", "]", "*", "c", ")", "/", "r", "[", "1", "]", "]", ")", "\n", "img1", "=", "cv2", ".", "line", "(", "img1", ",", "(", "x0", ",", "y0", ")", ",", "(", "x1", ",", "y1", ")", ",", "color", ",", "1", ")", "\n", "img1", "=", "cv2", ".", "circle", "(", "img1", ",", "tuple", "(", "pt1", ")", ",", "5", ",", "color", ",", "-", "1", ")", "\n", "img2", "=", "cv2", ".", "circle", "(", "img2", ",", "tuple", "(", "pt2", ")", ",", "5", ",", "color", ",", "-", "1", ")", "\n", "", "return", "img1", ",", "img2", "\n", "\n"]], "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.geo_utils.get_normalization_matrix": [[356, 373], ["isinstance", "numpy.eye", "numpy.mean", "pts.unique.unique", "torch.eye", "torch.mean", "numpy.std", "torch.std"], "function", ["home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.sparse_utils.SparseMat.mean", "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.sparse_utils.SparseMat.mean"], ["", "def", "get_normalization_matrix", "(", "pts", ")", ":", "\n", "    ", "if", "isinstance", "(", "pts", ",", "np", ".", "ndarray", ")", ":", "\n", "        ", "norm_mat", "=", "np", ".", "eye", "(", "3", ")", "\n", "m", "=", "np", ".", "mean", "(", "pts", "[", ":", "2", ",", ":", "]", ",", "axis", "=", "1", ")", "\n", "s", "=", "1.", "/", "np", ".", "std", "(", "pts", "[", ":", "2", ",", ":", "]", ",", "axis", "=", "1", ")", "\n", "norm_mat", "[", "0", ",", "0", "]", "=", "s", "[", "0", "]", "\n", "norm_mat", "[", "1", ",", "1", "]", "=", "s", "[", "1", "]", "\n", "norm_mat", "[", ":", "2", ",", "2", "]", "=", "-", "s", "*", "m", "\n", "", "else", ":", "\n", "        ", "pts", "=", "pts", ".", "unique", "(", "dim", "=", "1", ")", "\n", "norm_mat", "=", "torch", ".", "eye", "(", "3", ")", "\n", "m", "=", "torch", ".", "mean", "(", "pts", "[", "0", ":", "2", ",", ":", "]", ",", "dim", "=", "1", ")", "\n", "s", "=", "1.", "/", "torch", ".", "std", "(", "pts", "[", "0", ":", "2", ",", ":", "]", ",", "dim", "=", "1", ")", "\n", "norm_mat", "[", "0", ",", "0", "]", "=", "s", "[", "0", "]", "\n", "norm_mat", "[", "1", ",", "1", "]", "=", "s", "[", "1", "]", "\n", "norm_mat", "[", "0", ":", "2", ",", "2", "]", "=", "-", "s", "*", "m", "\n", "", "return", "norm_mat", "\n", "\n"]], "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.geo_utils.batch_get_normalization_matrices": [[375, 388], ["numpy.zeros", "range", "geo_utils.get_normalization_matrix"], "function", ["home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.geo_utils.get_normalization_matrix"], ["", "def", "batch_get_normalization_matrices", "(", "xs", ")", ":", "\n", "    ", "\"\"\"\n    Given all the observed points return normalization matrices such thet N[i] takes the\n    points at x[i] and normalizes them to have a zero mean and 1 std across both\n    he x axis and the y axis.\n    :param xs: np.ndarray [m,n,2] or [m,n,3]\n    :return:  np.ndarray Ns [m,3,3]\n    \"\"\"", "\n", "m", ",", "n", ",", "d", "=", "xs", ".", "shape", "\n", "Ns", "=", "np", ".", "zeros", "(", "[", "m", ",", "3", ",", "3", "]", ")", "\n", "for", "i", "in", "range", "(", "m", ")", ":", "\n", "        ", "Ns", "[", "i", "]", "=", "get_normalization_matrix", "(", "xs", "[", "i", "]", ".", "T", ")", "# xs[i].T is [3,n]", "\n", "", "return", "Ns", "\n", "\n"]], "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.geo_utils.normalize_points": [[390, 400], ["len", "numpy.zeros", "range", "range", "numpy.sum", "numpy.dot", "numpy.dot"], "function", ["home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.sparse_utils.SparseMat.sum"], ["", "def", "normalize_points", "(", "points", ",", "Ns", ")", ":", "\n", "# points is nXnX2", "\n", "    ", "n", "=", "len", "(", "points", ")", "\n", "norm_points", "=", "np", ".", "zeros", "(", "points", ".", "shape", ",", "dtype", "=", "object", ")", "\n", "for", "i", "in", "range", "(", "n", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "n", ")", ":", "\n", "            ", "if", "np", ".", "sum", "(", "points", "[", "i", ",", "j", ",", "0", "]", ")", ":", "\n", "                ", "norm_points", "[", "i", ",", "j", ",", "0", "]", "=", "np", ".", "dot", "(", "Ns", "[", "i", "]", ",", "points", "[", "i", ",", "j", ",", "0", "]", ")", "\n", "norm_points", "[", "i", ",", "j", ",", "1", "]", "=", "np", ".", "dot", "(", "Ns", "[", "j", "]", ",", "points", "[", "i", ",", "j", ",", "1", "]", ")", "\n", "", "", "", "return", "norm_points", "\n", "\n"]], "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.geo_utils.normalize_points_cams": [[402, 426], ["numpy.zeros_like", "numpy.zeros_like", "range", "numpy.concatenate", "norm_points[].reshape", "numpy.ones"], "function", ["None"], ["", "def", "normalize_points_cams", "(", "Ps", ",", "xs", ",", "Ns", ")", ":", "\n", "    ", "\"\"\"\n    Normalize the points and the cameras using the matrices in N.\n    if :\n    xs[i,j] ~ P[i] @ X[j]\n    than so is:\n     N[i] @ xs[i,j] ~ N[i] @ P[i] @ X[j]\n    :param Ps:  [m,3,4]\n    :param xs:  [m,n,2] or [m,n,3]\n    :param Ns:  [m,3,3]\n    :return:  norm_P, norm_x\n    \"\"\"", "\n", "m", ",", "n", ",", "d", "=", "xs", ".", "shape", "\n", "xs_3", "=", "np", ".", "concatenate", "(", "[", "xs", ",", "np", ".", "ones", "(", "[", "m", ",", "n", ",", "1", "]", ")", "]", ",", "axis", "=", "2", ")", "if", "d", "==", "2", "else", "xs", "\n", "norm_P", "=", "np", ".", "zeros_like", "(", "Ps", ")", "\n", "norm_x", "=", "np", ".", "zeros_like", "(", "xs", ")", "\n", "for", "i", "in", "range", "(", "m", ")", ":", "\n", "        ", "norm_P", "[", "i", "]", "=", "Ns", "[", "i", "]", "@", "Ps", "[", "i", "]", "# [3,3] @ [3,4]", "\n", "norm_points", "=", "(", "Ns", "[", "i", "]", "@", "xs_3", "[", "i", "]", ".", "T", ")", ".", "T", "# ([3,3] @ [3,n]) -> [n,3]", "\n", "norm_points", "[", "norm_points", "[", ":", ",", "-", "1", "]", "==", "0", ",", "-", "1", "]", "=", "1", "\n", "norm_points", "=", "norm_points", "/", "norm_points", "[", ":", ",", "-", "1", "]", ".", "reshape", "(", "[", "-", "1", ",", "1", "]", ")", "\n", "if", "d", "==", "2", ":", "\n", "            ", "norm_x", "[", "i", "]", "=", "norm_points", "[", ":", ",", ":", "2", "]", "\n", "", "", "return", "norm_P", ",", "norm_x", "\n", "\n"]], "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.geo_utils.normalize_bifocal_mat": [[428, 432], ["torch.inverse", "torch.inverse"], "function", ["None"], ["", "def", "normalize_bifocal_mat", "(", "bifocalMat_ij", ",", "Ni", ",", "Nj", ")", ":", "\n", "# pj_norm = N @ pj", "\n", "# F_norm = Ni^(-T) @ Fij @ Nj^(-1)", "\n", "    ", "return", "torch", ".", "inverse", "(", "Ni", ")", ".", "T", "@", "bifocalMat_ij", "@", "torch", ".", "inverse", "(", "Nj", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.geo_utils.get_fundamental_from_P": [[434, 439], ["geo_utils.decompose_projection_matrix", "geo_utils.decompose_projection_matrix", "geo_utils.get_fundamental_from_V_t", "torch.unsqueeze", "torch.unsqueeze", "V1.squeeze", "V2.squeeze"], "function", ["home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.geo_utils.decompose_projection_matrix", "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.geo_utils.decompose_projection_matrix", "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.geo_utils.get_fundamental_from_V_t"], ["", "def", "get_fundamental_from_P", "(", "P1", ",", "P2", ")", ":", "\n", "    ", "V1", ",", "t1", "=", "decompose_projection_matrix", "(", "torch", ".", "unsqueeze", "(", "P1", ",", "0", ")", ")", "\n", "V2", ",", "t2", "=", "decompose_projection_matrix", "(", "torch", ".", "unsqueeze", "(", "P2", ",", "0", ")", ")", "\n", "F12", "=", "get_fundamental_from_V_t", "(", "V1", ".", "squeeze", "(", ")", ",", "V2", ".", "squeeze", "(", ")", ",", "t1", ",", "t2", ")", "\n", "return", "F12", "\n", "\n"]], "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.geo_utils.sed_from_P_x": [[440, 443], ["geo_utils.get_fundamental_from_P", "geo_utils.symmetric_epipolar_distance"], "function", ["home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.geo_utils.get_fundamental_from_P", "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.geo_utils.symmetric_epipolar_distance"], ["", "def", "sed_from_P_x", "(", "P1", ",", "P2", ",", "x1", ",", "x2", ")", ":", "\n", "    ", "F12", "=", "get_fundamental_from_P", "(", "P1", ",", "P2", ")", "\n", "return", "symmetric_epipolar_distance", "(", "F12", ",", "x1", ",", "x2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.geo_utils.symmetric_epipolar_distance": [[445, 449], ["geo_utils.calc_pFp", "torch.norm", "torch.norm"], "function", ["home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.geo_utils.calc_pFp"], ["", "def", "symmetric_epipolar_distance", "(", "Fij", ",", "pts_i", ",", "pts_j", ")", ":", "\n", "# sym_epi_dist = geo_utils.calc_pFp(Fij, pts_imgi, pts_imgj) * (1 / torch.norm(Fij @ pts_imgj, p=2, dim=0) + 1 / torch.norm(Fij.T @ pts_imgi, p=2, dim=0))", "\n", "    ", "return", "calc_pFp", "(", "Fij", ",", "pts_i", ",", "pts_j", ")", "*", "(", "1", "/", "torch", ".", "norm", "(", "(", "Fij", "@", "pts_j", ")", "[", "0", ":", "2", ",", ":", "]", ",", "p", "=", "2", ",", "dim", "=", "0", ")", "+", "1", "/", "torch", ".", "norm", "(", "(", "Fij", ".", "T", "@", "pts_i", ")", "[", "0", ":", "2", ",", ":", "]", ",", "p", "=", "2", ",", "dim", "=", "0", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.geo_utils.batch_symmetric_epipolar_distance": [[451, 454], ["geo_utils.batch_calc_pFp", "[].norm", "[].norm", "torch.bmm", "torch.bmm", "Fij.transpose"], "function", ["home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.geo_utils.batch_calc_pFp"], ["", "def", "batch_symmetric_epipolar_distance", "(", "Fij", ",", "pts_i", ",", "pts_j", ")", ":", "\n", "    ", "return", "batch_calc_pFp", "(", "Fij", ",", "pts_i", ",", "pts_j", ")", "*", "(", "1", "/", "(", "torch", ".", "bmm", "(", "Fij", ",", "pts_j", ")", "[", ":", ",", "0", ":", "2", ",", ":", "]", ".", "norm", "(", "p", "=", "2", ",", "dim", "=", "1", ")", ")", "+", "\n", "1", "/", "(", "torch", ".", "bmm", "(", "Fij", ".", "transpose", "(", "1", ",", "2", ")", ",", "pts_i", ")", "[", ":", ",", "0", ":", "2", ",", ":", "]", ".", "norm", "(", "p", "=", "2", ",", "dim", "=", "1", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.geo_utils.get_inliers": [[456, 466], ["geo_utils.sampson_distance", "torch.logical_and", "geo_utils.calc_pFp", "geo_utils.calc_pFp", "torch.norm", "torch.norm"], "function", ["home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.geo_utils.sampson_distance", "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.geo_utils.calc_pFp", "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.geo_utils.calc_pFp"], ["", "def", "get_inliers", "(", "Fij", ",", "pts_i", ",", "pts_j", ",", "threshold", ",", "method", "=", "'SED'", ")", ":", "\n", "    ", "if", "method", "==", "'sampson'", ":", "\n", "        ", "sam_dist", "=", "sampson_distance", "(", "Fij", ",", "pts_i", ",", "pts_j", ")", "\n", "inliers_idx", "=", "sam_dist", "<", "threshold", "\n", "", "else", ":", "\n", "        ", "epip_dist_i", "=", "calc_pFp", "(", "Fij", ",", "pts_i", ",", "pts_j", ")", "*", "(", "1", "/", "torch", ".", "norm", "(", "(", "Fij", "@", "pts_j", ")", "[", "0", ":", "2", ",", ":", "]", ",", "p", "=", "2", ",", "dim", "=", "0", ")", ")", "\n", "epip_dist_j", "=", "calc_pFp", "(", "Fij", ",", "pts_i", ",", "pts_j", ")", "*", "(", "1", "/", "torch", ".", "norm", "(", "(", "Fij", ".", "T", "@", "pts_i", ")", "[", "0", ":", "2", ",", ":", "]", ",", "p", "=", "2", ",", "dim", "=", "0", ")", ")", "\n", "inliers_idx", "=", "torch", ".", "logical_and", "(", "epip_dist_i", "<", "threshold", ",", "epip_dist_j", "<", "threshold", ")", "\n", "\n", "", "return", "inliers_idx", "\n", "\n"]], "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.geo_utils.sampson_distance": [[468, 470], ["geo_utils.calc_pFp", "torch.cat().norm", "torch.cat"], "function", ["home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.geo_utils.calc_pFp"], ["", "def", "sampson_distance", "(", "Fij", ",", "pts_i", ",", "pts_j", ")", ":", "\n", "    ", "return", "calc_pFp", "(", "Fij", ",", "pts_i", ",", "pts_j", ")", "/", "torch", ".", "cat", "(", "(", "(", "Fij", "@", "pts_j", ")", "[", "0", ":", "2", ",", ":", "]", ",", "(", "Fij", ".", "T", "@", "pts_i", ")", "[", "0", ":", "2", ",", ":", "]", ")", ",", "dim", "=", "0", ")", ".", "norm", "(", "p", "=", "2", ",", "dim", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.geo_utils.batch_sampson_distance": [[472, 475], ["geo_utils.batch_calc_pFp", "torch.cat().norm", "torch.cat", "torch.bmm", "torch.bmm", "Fij.transpose"], "function", ["home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.geo_utils.batch_calc_pFp"], ["", "def", "batch_sampson_distance", "(", "Fij", ",", "pts_i", ",", "pts_j", ")", ":", "\n", "    ", "return", "batch_calc_pFp", "(", "Fij", ",", "pts_i", ",", "pts_j", ")", "/", "torch", ".", "cat", "(", "(", "torch", ".", "bmm", "(", "Fij", ",", "pts_j", ")", "[", ":", ",", "0", ":", "2", ",", ":", "]", ",", "torch", ".", "bmm", "(", "Fij", ".", "transpose", "(", "1", ",", "2", ")", ",", "pts_i", ")", "[", ":", ",", "0", ":", "2", ",", ":", "]", ")", ",", "dim", "=", "1", ")", ".", "norm", "(", "p", "=", "2", ",", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.geo_utils.dlt_triangulation": [[476, 508], ["numpy.zeros", "range", "len", "numpy.zeros", "enumerate", "numpy.where", "dask.linalg.svd", "pflat().squeeze", "numpy.linalg.svd", "pflat().squeeze", "dask.from_array", "geo_utils.pflat", "geo_utils.pflat", "V_H[].compute().reshape", "V_H[].reshape", "V_H[].compute"], "function", ["home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.geo_utils.pflat", "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.geo_utils.pflat"], ["", "def", "dlt_triangulation", "(", "Ps", ",", "xs", ",", "visible_points", ")", ":", "\n", "    ", "\"\"\"\n    Use  linear triangulation to find the points X[j] such that  xs[i,j] ~ P[i] @ X[j]\n    :param Ps:  [m,3,4]\n    :param xs: [m,n,2] or [m,n,3]\n    :param visible_points: [m,n] a boolean matrix of which cameras see which points\n    :return: Xs [n,4] normalized such the X[j,-1] == 1\n    \"\"\"", "\n", "m", ",", "n", ",", "_", "=", "xs", ".", "shape", "\n", "X", "=", "np", ".", "zeros", "(", "[", "n", ",", "4", "]", ")", "\n", "for", "i", "in", "range", "(", "n", ")", ":", "\n", "        ", "cameras_showing_ind", "=", "np", ".", "where", "(", "visible_points", "[", ":", ",", "i", "]", ")", "[", "0", "]", "# The cameras that show this point", "\n", "num_cam_show", "=", "len", "(", "cameras_showing_ind", ")", "\n", "if", "num_cam_show", "<", "2", ":", "\n", "            ", "X", "[", "i", "]", "=", "np", ".", "nan", "\n", "continue", "\n", "", "A", "=", "np", ".", "zeros", "(", "[", "3", "*", "num_cam_show", ",", "num_cam_show", "+", "4", "]", ")", "\n", "for", "j", ",", "cam_index", "in", "enumerate", "(", "cameras_showing_ind", ")", ":", "\n", "            ", "xij", "=", "xs", "[", "cam_index", ",", "i", ",", ":", "2", "]", "\n", "Pj", "=", "Ps", "[", "cam_index", "]", "\n", "A", "[", "3", "*", "j", ":", "3", "*", "(", "j", "+", "1", ")", ",", ":", "4", "]", "=", "Pj", "\n", "A", "[", "3", "*", "j", ":", "3", "*", "j", "+", "2", ",", "4", "+", "j", "]", "=", "-", "xij", "\n", "A", "[", "3", "*", "j", "+", "2", ",", "4", "+", "j", "]", "=", "-", "1", "\n", "\n", "", "if", "num_cam_show", ">", "40", ":", "\n", "            ", "[", "U", ",", "S", ",", "V_H", "]", "=", "da", ".", "linalg", ".", "svd", "(", "da", ".", "from_array", "(", "A", ")", ")", "# in python svd returns V conjugate! so we need the last row and not column", "\n", "X", "[", "i", "]", "=", "pflat", "(", "V_H", "[", "-", "1", ",", ":", "4", "]", ".", "compute", "(", ")", ".", "reshape", "(", "[", "-", "1", ",", "1", "]", ")", ")", ".", "squeeze", "(", ")", "\n", "", "else", ":", "\n", "            ", "[", "U", ",", "S", ",", "V_H", "]", "=", "np", ".", "linalg", ".", "svd", "(", "A", ")", "# in python svd returns V conjugate! so we need the last row and not column", "\n", "X", "[", "i", "]", "=", "pflat", "(", "V_H", "[", "-", "1", ",", ":", "4", "]", ".", "reshape", "(", "[", "-", "1", ",", "1", "]", ")", ")", ".", "squeeze", "(", ")", "\n", "\n", "", "", "return", "X", "\n", "\n"]], "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.geo_utils.n_view_triangulation": [[509, 518], ["geo_utils.M_to_xs", "geo_utils.dlt_triangulation", "Ps.copy.copy", "geo_utils.normalize_points_cams"], "function", ["home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.geo_utils.M_to_xs", "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.geo_utils.dlt_triangulation", "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.geo_utils.normalize_points_cams"], ["", "def", "n_view_triangulation", "(", "Ps", ",", "M", ",", "Ns", "=", "None", ")", ":", "\n", "# normalizing matrix can be K inverse or a matrix that normalizes the points in M", "\n", "    ", "xs", "=", "M_to_xs", "(", "M", ")", "\n", "visible_points", "=", "xs", "[", ":", ",", ":", ",", "0", "]", ">", "0", "\n", "if", "Ns", "is", "not", "None", ":", "\n", "        ", "Ps", "=", "Ps", ".", "copy", "(", ")", "\n", "Ps", ",", "xs", "=", "normalize_points_cams", "(", "Ps", ",", "xs", ",", "Ns", ")", "\n", "", "X", "=", "dlt_triangulation", "(", "Ps", ",", "xs", ",", "visible_points", ")", "\n", "return", "X", ".", "T", "\n", "\n"]], "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.geo_utils.xs_valid_points": [[520, 527], ["None"], "function", ["None"], ["", "def", "xs_valid_points", "(", "xs", ")", ":", "\n", "    ", "\"\"\"\n\n    :param xs: [m,n,2]\n    :return: A boolean matrix of the visible 2d points\n    \"\"\"", "\n", "return", "xs", "[", ":", ",", ":", ",", "0", "]", ">", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.geo_utils.normalize_M": [[529, 540], ["M.clone", "torch.cat.reshape", "torch.cat", "utils.dataset_utils.get_M_valid_points", "torch.ones"], "function", ["home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.dataset_utils.get_M_valid_points"], ["", "def", "normalize_M", "(", "M", ",", "Ns", ",", "valid_points", "=", "None", ")", ":", "\n", "    ", "if", "valid_points", "is", "None", ":", "\n", "        ", "valid_points", "=", "dataset_utils", ".", "get_M_valid_points", "(", "M", ")", "\n", "", "norm_M", "=", "M", ".", "clone", "(", ")", "\n", "n_images", "=", "norm_M", ".", "shape", "[", "0", "]", "//", "2", "\n", "norm_M", "=", "norm_M", ".", "reshape", "(", "[", "n_images", ",", "2", ",", "-", "1", "]", ")", "# [m,2,n]", "\n", "norm_M", "=", "torch", ".", "cat", "(", "(", "norm_M", ",", "torch", ".", "ones", "(", "n_images", ",", "1", ",", "norm_M", ".", "shape", "[", "-", "1", "]", ",", "device", "=", "M", ".", "device", ")", ")", ",", "dim", "=", "1", ")", "# [m,3,n]", "\n", "\n", "norm_M", "=", "(", "Ns", "@", "norm_M", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "[", ":", ",", ":", ",", ":", "2", "]", "# [m,3,3]@[m,3,n] -> [m,3,n]->[m,n,3]", "\n", "norm_M", "[", "~", "valid_points", "]", "=", "0", "\n", "return", "norm_M", "\n", "\n"]], "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.geo_utils.normalize_ts": [[542, 555], ["ts.clone", "ts.clone.mean", "ts.clone.norm().mean", "ts.clone.norm"], "function", ["home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.sparse_utils.SparseMat.mean", "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.sparse_utils.SparseMat.mean"], ["", "def", "normalize_ts", "(", "ts", ",", "return_parameters", "=", "False", ")", ":", "\n", "    ", "ts_norm", "=", "ts", ".", "clone", "(", ")", "\n", "\n", "trans_vec", "=", "ts_norm", ".", "mean", "(", "dim", "=", "0", ")", "\n", "ts_norm", "=", "ts_norm", "-", "trans_vec", "\n", "\n", "scale_factor", "=", "ts_norm", ".", "norm", "(", "p", "=", "2", ",", "dim", "=", "1", ")", ".", "mean", "(", ")", "\n", "ts_norm", "=", "ts_norm", "/", "scale_factor", "\n", "\n", "if", "return_parameters", ":", "\n", "        ", "return", "ts_norm", ",", "trans_vec", ",", "scale_factor", "\n", "", "else", ":", "\n", "        ", "return", "ts_norm", "\n", "\n"]], "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.geo_utils.get_positive_projected_pts_mask": [[557, 559], ["None"], "function", ["None"], ["", "", "def", "get_positive_projected_pts_mask", "(", "pts2D", ",", "infinity_pts_margin", ")", ":", "\n", "    ", "return", "pts2D", "[", ":", ",", "2", ",", ":", "]", ">=", "infinity_pts_margin", "\n", "\n"]], "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.geo_utils.get_projected_pts_mask": [[561, 563], ["pts2D[].abs"], "function", ["None"], ["", "def", "get_projected_pts_mask", "(", "pts2D", ",", "infinity_pts_margin", ")", ":", "\n", "    ", "return", "pts2D", "[", ":", ",", "2", ",", ":", "]", ".", "abs", "(", ")", ">=", "infinity_pts_margin", "\n", "\n"]], "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.geo_utils.ones_padding": [[565, 567], ["torch.cat", "torch.ones"], "function", ["None"], ["", "def", "ones_padding", "(", "pts", ")", ":", "\n", "    ", "return", "torch", ".", "cat", "(", "(", "pts", ",", "torch", ".", "ones", "(", "1", ",", "pts", ".", "shape", "[", "1", "]", ",", "device", "=", "pts", ".", "device", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.geo_utils.dilutePoint": [[569, 580], ["utils.dataset_utils.get_M_valid_points", "dataset_utils.get_M_valid_points.sum"], "function", ["home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.dataset_utils.get_M_valid_points", "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.sparse_utils.SparseMat.sum"], ["", "def", "dilutePoint", "(", "M", ")", ":", "\n", "    ", "if", "M", ".", "shape", "[", "1", "]", ">", "20000", ":", "\n", "        ", "param", "=", "4", "\n", "", "else", ":", "\n", "        ", "param", "=", "3", "\n", "\n", "", "valid_pts", "=", "dataset_utils", ".", "get_M_valid_points", "(", "M", ")", "\n", "rm_pts", "=", "valid_pts", ".", "sum", "(", "axis", "=", "0", ")", "<", "param", "\n", "keep_pts", "=", "~", "rm_pts", "\n", "newM", "=", "M", "[", ":", ",", "keep_pts", "]", "\n", "return", "newM", "\n", "\n"]], "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.geo_utils.sample_sub_matrix": [[582, 587], ["numpy.sort", "numpy.sort", "numpy.ix_", "numpy.random.choice", "numpy.random.choice", "int", "int"], "function", ["None"], ["", "def", "sample_sub_matrix", "(", "m", ",", "n", ",", "part", "=", "0.5", ")", ":", "\n", "    ", "i_idx", "=", "np", ".", "sort", "(", "np", ".", "random", ".", "choice", "(", "m", ",", "size", "=", "int", "(", "m", "*", "part", ")", ",", "replace", "=", "False", ")", ")", "\n", "j_idx", "=", "np", ".", "sort", "(", "np", ".", "random", ".", "choice", "(", "n", ",", "size", "=", "int", "(", "n", "*", "part", ")", ",", "replace", "=", "False", ")", ")", "\n", "together_idx", "=", "np", ".", "ix_", "(", "i_idx", ",", "j_idx", ")", "\n", "return", "together_idx", "\n", "\n"]], "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.geo_utils.bound_function": [[589, 591], ["None"], "function", ["None"], ["", "def", "bound_function", "(", "x", ",", "alpha", "=", "1", ",", "beta", "=", "1", ",", "gamma", "=", "1", ")", ":", "\n", "    ", "return", "alpha", "*", "(", "x", "/", "beta", ")", "/", "(", "(", "x", "/", "beta", ")", "+", "gamma", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.geo_utils.cross_product_2d_points": [[593, 597], ["torch.cross", "pts1.norm", "pts2.norm"], "function", ["None"], ["", "def", "cross_product_2d_points", "(", "pts1", ",", "pts2", ",", "dim", ",", "epsilon", "=", "1e-4", ")", ":", "\n", "    ", "cross", "=", "torch", ".", "cross", "(", "pts1", "/", "(", "pts1", ".", "norm", "(", "dim", "=", "dim", ")", "+", "epsilon", ")", ".", "unsqueeze", "(", "dim", "=", "dim", ")", ",", "\n", "pts2", "/", "(", "pts2", ".", "norm", "(", "dim", "=", "dim", ")", "+", "epsilon", ")", ".", "unsqueeze", "(", "dim", "=", "dim", ")", ",", "dim", "=", "dim", ")", "\n", "return", "cross", "\n", "\n"]], "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.path_utils.join_and_create": [[5, 11], ["os.path.join", "os.path.exists", "os.mkdir"], "function", ["None"], ["def", "join_and_create", "(", "path", ",", "folder", ")", ":", "\n", "    ", "full_path", "=", "os", ".", "path", ".", "join", "(", "path", ",", "folder", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "full_path", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "full_path", ")", "\n", "\n", "", "return", "full_path", "\n", "\n"]], "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.path_utils.path_to_datasets": [[13, 15], ["os.path.join"], "function", ["None"], ["", "def", "path_to_datasets", "(", ")", ":", "\n", "    ", "return", "os", ".", "path", ".", "join", "(", "'..'", ",", "'datasets'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.path_utils.path_to_condition": [[17, 23], ["os.path.join", "conf.get_string", "path_utils.join_and_create", "os.path.exists", "os.mkdir"], "function", ["home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.path_utils.join_and_create"], ["", "def", "path_to_condition", "(", "conf", ")", ":", "\n", "    ", "experiments_folder", "=", "os", ".", "path", ".", "join", "(", "'..'", ",", "'results'", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "experiments_folder", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "experiments_folder", ")", "\n", "", "exp_name", "=", "conf", ".", "get_string", "(", "'exp_name'", ")", "\n", "return", "join_and_create", "(", "experiments_folder", ",", "exp_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.path_utils.path_to_exp": [[25, 30], ["conf.get_string", "path_utils.join_and_create", "path_utils.path_to_condition"], "function", ["home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.path_utils.join_and_create", "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.path_utils.path_to_condition"], ["", "def", "path_to_exp", "(", "conf", ")", ":", "\n", "    ", "exp_ver", "=", "conf", ".", "get_string", "(", "'exp_version'", ")", "\n", "exp_ver_path", "=", "join_and_create", "(", "path_to_condition", "(", "conf", ")", ",", "exp_ver", ")", "\n", "\n", "return", "exp_ver_path", "\n", "\n"]], "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.path_utils.path_to_phase": [[32, 35], ["path_utils.path_to_exp", "path_utils.join_and_create"], "function", ["home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.path_utils.path_to_exp", "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.path_utils.join_and_create"], ["", "def", "path_to_phase", "(", "conf", ",", "phase", ")", ":", "\n", "    ", "exp_path", "=", "path_to_exp", "(", "conf", ")", "\n", "return", "join_and_create", "(", "exp_path", ",", "phase", ".", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.path_utils.path_to_scan": [[37, 41], ["path_utils.path_to_phase", "path_utils.join_and_create", "conf.get_string"], "function", ["home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.path_utils.path_to_phase", "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.path_utils.join_and_create"], ["", "def", "path_to_scan", "(", "conf", ",", "phase", ",", "scan", "=", "None", ")", ":", "\n", "    ", "exp_path", "=", "path_to_phase", "(", "conf", ",", "phase", ")", "\n", "scan", "=", "conf", ".", "get_string", "(", "\"dataset.scan\"", ")", "if", "scan", "is", "None", "else", "scan", "\n", "return", "join_and_create", "(", "exp_path", ",", "scan", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.path_utils.path_to_model": [[43, 57], ["path_utils.join_and_create", "os.path.join", "path_utils.path_to_exp", "path_utils.path_to_scan"], "function", ["home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.path_utils.join_and_create", "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.path_utils.path_to_exp", "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.path_utils.path_to_scan"], ["", "def", "path_to_model", "(", "conf", ",", "phase", ",", "epoch", "=", "None", ",", "scan", "=", "None", ")", ":", "\n", "    ", "if", "phase", "in", "[", "Phases", ".", "TRAINING", ",", "Phases", ".", "VALIDATION", ",", "Phases", ".", "TEST", "]", ":", "\n", "        ", "parent_folder", "=", "path_to_exp", "(", "conf", ")", "\n", "", "else", ":", "\n", "        ", "parent_folder", "=", "path_to_scan", "(", "conf", ",", "phase", ",", "scan", "=", "scan", ")", "\n", "\n", "", "models_path", "=", "join_and_create", "(", "parent_folder", ",", "'models'", ")", "\n", "\n", "if", "epoch", "is", "None", ":", "\n", "        ", "model_file_name", "=", "\"Final_Model.pt\"", "\n", "", "else", ":", "\n", "        ", "model_file_name", "=", "\"Model_Ep{}.pt\"", ".", "format", "(", "epoch", ")", "\n", "\n", "", "return", "os", ".", "path", ".", "join", "(", "models_path", ",", "model_file_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.path_utils.path_to_learning_data": [[59, 61], ["path_utils.join_and_create", "path_utils.path_to_condition"], "function", ["home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.path_utils.join_and_create", "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.path_utils.path_to_condition"], ["", "def", "path_to_learning_data", "(", "conf", ",", "phase", ")", ":", "\n", "    ", "return", "join_and_create", "(", "path_to_condition", "(", "conf", ")", ",", "phase", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.path_utils.path_to_cameras": [[63, 73], ["path_utils.path_to_scan", "path_utils.join_and_create", "os.path.join"], "function", ["home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.path_utils.path_to_scan", "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.path_utils.join_and_create"], ["", "def", "path_to_cameras", "(", "conf", ",", "phase", ",", "epoch", "=", "None", ",", "scan", "=", "None", ")", ":", "\n", "    ", "scan_path", "=", "path_to_scan", "(", "conf", ",", "phase", ",", "scan", "=", "scan", ")", "\n", "cameras_path", "=", "join_and_create", "(", "scan_path", ",", "'cameras'", ")", "\n", "\n", "if", "epoch", "is", "None", ":", "\n", "        ", "cameras_file_name", "=", "\"Final_Cameras\"", "\n", "", "else", ":", "\n", "        ", "cameras_file_name", "=", "\"Cameras_Ep{}\"", ".", "format", "(", "epoch", ")", "\n", "\n", "", "return", "os", ".", "path", ".", "join", "(", "cameras_path", ",", "cameras_file_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.path_utils.path_to_plots": [[75, 85], ["path_utils.path_to_scan", "path_utils.join_and_create", "os.path.join"], "function", ["home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.path_utils.path_to_scan", "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.path_utils.join_and_create"], ["", "def", "path_to_plots", "(", "conf", ",", "phase", ",", "epoch", "=", "None", ",", "scan", "=", "None", ")", ":", "\n", "    ", "scan_path", "=", "path_to_scan", "(", "conf", ",", "phase", ",", "scan", "=", "scan", ")", "\n", "plots_path", "=", "join_and_create", "(", "scan_path", ",", "'plots'", ")", "\n", "\n", "if", "epoch", "is", "None", ":", "\n", "        ", "plots_file_name", "=", "\"Final_plots.html\"", "\n", "", "else", ":", "\n", "        ", "plots_file_name", "=", "\"Plot_Ep{}.html\"", ".", "format", "(", "epoch", ")", "\n", "\n", "", "return", "os", ".", "path", ".", "join", "(", "plots_path", ",", "plots_file_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.path_utils.path_to_logs": [[87, 91], ["path_utils.path_to_phase", "path_utils.join_and_create"], "function", ["home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.path_utils.path_to_phase", "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.path_utils.join_and_create"], ["", "def", "path_to_logs", "(", "conf", ",", "phase", ")", ":", "\n", "    ", "phase_path", "=", "path_to_phase", "(", "conf", ",", "phase", ")", "\n", "logs_path", "=", "join_and_create", "(", "phase_path", ",", "\"logs\"", ")", "\n", "return", "logs_path", "\n", "\n"]], "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.path_utils.path_to_code_logs": [[93, 97], ["path_utils.path_to_exp", "path_utils.join_and_create"], "function", ["home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.path_utils.path_to_exp", "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.path_utils.join_and_create"], ["", "def", "path_to_code_logs", "(", "conf", ")", ":", "\n", "    ", "exp_path", "=", "path_to_exp", "(", "conf", ")", "\n", "code_path", "=", "join_and_create", "(", "exp_path", ",", "\"code\"", ")", "\n", "return", "code_path", "\n", "\n"]], "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.path_utils.path_to_conf": [[99, 101], ["os.path.join"], "function", ["None"], ["", "def", "path_to_conf", "(", "conf_file", ")", ":", "\n", "    ", "return", "os", ".", "path", ".", "join", "(", "'confs'", ",", "conf_file", ")", "", "", ""]], "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.ceres_utils.order_cam_param_for_c": [[11, 30], ["len", "numpy.zeros", "range", "cv2.Rodrigues", "ts[].reshape"], "function", ["None"], ["def", "order_cam_param_for_c", "(", "Rs", ",", "ts", ",", "Ks", ")", ":", "\n", "    ", "\"\"\"\n    Orders a [m, 12] matrix for the ceres function as follows:\n    Ps_for_c[i, 0:3] 3 parameters for the vector representing the rotation\n    Ps_for_c[i, 3:6] 3 parameters for the location of the camera\n    Ps_for_c[i, 6:11] 5 parameters for the upper triangular part of the calibration matrix\n    :param Rs: [m,3,3]\n    :param ts: [m,3]\n    :param Ks: [m,3,3]\n    :return: Ps_for_c [m, 12]\n    \"\"\"", "\n", "n_cam", "=", "len", "(", "Rs", ")", "\n", "Ps_for_c", "=", "np", ".", "zeros", "(", "[", "n_cam", ",", "12", "]", ")", "\n", "for", "i", "in", "range", "(", "n_cam", ")", ":", "\n", "        ", "Ps_for_c", "[", "i", ",", "0", ":", "3", "]", "=", "cv2", ".", "Rodrigues", "(", "Rs", "[", "i", "]", ".", "T", ")", "[", "0", "]", ".", "T", "\n", "Ps_for_c", "[", "i", ",", "3", ":", "6", "]", "=", "(", "-", "Rs", "[", "i", "]", ".", "T", "@", "ts", "[", "i", "]", ".", "reshape", "(", "[", "3", ",", "1", "]", ")", ")", ".", "T", "\n", "Ps_for_c", "[", "i", ",", "6", ":", "11", "]", "=", "[", "Ks", "[", "i", ",", "0", ",", "0", "]", ",", "Ks", "[", "i", ",", "0", ",", "1", "]", ",", "Ks", "[", "i", ",", "0", ",", "2", "]", ",", "Ks", "[", "i", ",", "1", ",", "1", "]", ",", "Ks", "[", "i", ",", "1", ",", "2", "]", "]", "\n", "Ps_for_c", "[", "i", ",", "-", "1", "]", "=", "1.0", "\n", "", "return", "Ps_for_c", "\n", "\n"]], "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.ceres_utils.reorder_from_c_to_py": [[32, 47], ["len", "numpy.zeros", "numpy.zeros", "numpy.zeros", "range", "utils.geo_utils.get_camera_matrix", "Ps_for_c[].reshape().flatten", "cv2.Rodrigues", "Ps_for_c[].reshape"], "function", ["home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.geo_utils.get_camera_matrix"], ["", "def", "reorder_from_c_to_py", "(", "Ps_for_c", ",", "Ks", ")", ":", "\n", "    ", "\"\"\"\n    Read back the camera parameters from the\n    :param Ps_for_c:\n    :return: Rs, ts, Ps\n    \"\"\"", "\n", "n_cam", "=", "len", "(", "Ps_for_c", ")", "\n", "Rs", "=", "np", ".", "zeros", "(", "[", "n_cam", ",", "3", ",", "3", "]", ")", "\n", "ts", "=", "np", ".", "zeros", "(", "[", "n_cam", ",", "3", "]", ")", "\n", "Ps", "=", "np", ".", "zeros", "(", "[", "n_cam", ",", "3", ",", "4", "]", ")", "\n", "for", "i", "in", "range", "(", "n_cam", ")", ":", "\n", "        ", "Rs", "[", "i", "]", "=", "cv2", ".", "Rodrigues", "(", "Ps_for_c", "[", "i", ",", "0", ":", "3", "]", ")", "[", "0", "]", ".", "T", "\n", "ts", "[", "i", "]", "=", "-", "Rs", "[", "i", "]", "@", "Ps_for_c", "[", "i", ",", "3", ":", "6", "]", ".", "reshape", "(", "[", "3", ",", "1", "]", ")", ".", "flatten", "(", ")", "\n", "Ps", "[", "i", "]", "=", "geo_utils", ".", "get_camera_matrix", "(", "R", "=", "Rs", "[", "i", "]", ",", "t", "=", "ts", "[", "i", "]", ",", "K", "=", "Ks", "[", "i", "]", ")", "\n", "", "return", "Rs", ",", "ts", ",", "Ps", "\n", "\n"]], "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.ceres_utils.run_euclidean_ceres": [[49, 86], ["len", "order_cam_param_for_c().astype", "Xs.flatten().astype", "order_cam_param_for_c().astype.flatten().astype", "xs.flatten().astype", "point_indices.flatten.flatten", "numpy.zeros_like", "numpy.zeros_like", "PyCeres.eucPythonFunctionOursBA", "ceres_utils.reorder_from_c_to_py", "np.zeros_like.reshape", "np.zeros_like.reshape", "ceres_utils.order_cam_param_for_c", "Xs.flatten", "order_cam_param_for_c().astype.flatten", "xs.flatten"], "function", ["home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.ceres_utils.reorder_from_c_to_py", "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.ceres_utils.order_cam_param_for_c"], ["", "def", "run_euclidean_ceres", "(", "Xs", ",", "xs", ",", "Rs", ",", "ts", ",", "Ks", ",", "point_indices", ")", ":", "\n", "    ", "\"\"\"\n    Calls a c++ function that optimizes the camera parameters and the 3D points for a lower reprojection error.\n    :param Xs: [n, 3]\n    :param xs: [v,2]\n    :param Rs: [m,3,3]\n    :param ts: [m,3]\n    :param Ks: [m,3,3]\n    :param point_indices: [2,v]\n    :return:\n    new_Rs, new_ts, new_Ps, new_Xs Which have a lower reprojection error\n    \"\"\"", "\n", "if", "Xs", ".", "shape", "[", "-", "1", "]", "==", "4", ":", "\n", "        ", "Xs", "=", "Xs", "[", ":", ",", ":", "3", "]", "\n", "", "assert", "Xs", ".", "shape", "[", "-", "1", "]", "==", "3", "\n", "assert", "xs", ".", "shape", "[", "-", "1", "]", "==", "2", "\n", "n_cam", "=", "len", "(", "Rs", ")", "\n", "n_pts", "=", "Xs", ".", "shape", "[", "0", "]", "\n", "n_observe", "=", "xs", ".", "shape", "[", "0", "]", "\n", "\n", "Ps_for_c", "=", "order_cam_param_for_c", "(", "Rs", ",", "ts", ",", "Ks", ")", ".", "astype", "(", "np", ".", "double", ")", "\n", "Xs_flat", "=", "Xs", ".", "flatten", "(", "\"C\"", ")", ".", "astype", "(", "np", ".", "double", ")", "\n", "Ps_for_c_flat", "=", "Ps_for_c", ".", "flatten", "(", "\"C\"", ")", ".", "astype", "(", "np", ".", "double", ")", "\n", "xs_flat", "=", "xs", ".", "flatten", "(", "\"C\"", ")", ".", "astype", "(", "np", ".", "double", ")", "\n", "point_indices", "=", "point_indices", ".", "flatten", "(", "\"C\"", ")", "\n", "\n", "Xsu", "=", "np", ".", "zeros_like", "(", "Xs_flat", ")", "\n", "Psu", "=", "np", ".", "zeros_like", "(", "Ps_for_c_flat", ")", "\n", "\n", "PyCeres", ".", "eucPythonFunctionOursBA", "(", "Xs_flat", ",", "xs_flat", ",", "Ps_for_c_flat", ",", "point_indices", ",", "Xsu", ",", "Psu", ",", "n_cam", ",", "n_pts", ",", "n_observe", ")", "\n", "\n", "new_Ps_for_c", "=", "Ps_for_c", "+", "Psu", ".", "reshape", "(", "[", "n_cam", ",", "12", "]", ",", "order", "=", "\"C\"", ")", "\n", "\n", "new_Rs", ",", "new_ts", ",", "new_Ps", "=", "reorder_from_c_to_py", "(", "new_Ps_for_c", ",", "Ks", ")", "\n", "new_Xs", "=", "Xs", "+", "Xsu", ".", "reshape", "(", "[", "n_pts", ",", "3", "]", ",", "order", "=", "\"C\"", ")", "\n", "\n", "return", "new_Rs", ",", "new_ts", ",", "new_Ps", ",", "new_Xs", "\n", "\n"]], "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.ceres_utils.run_projective_ceres": [[88, 126], ["Ps.reshape", "Ps.reshape.flatten", "Xs.flatten", "xs.flatten", "point_indices.flatten", "numpy.zeros_like", "numpy.zeros_like", "PyCeres.pythonFunctionOursBA", "Psu.reshape.reshape", "Psu.reshape.reshape", "Xsu.reshape.reshape"], "function", ["None"], ["", "def", "run_projective_ceres", "(", "Ps", ",", "Xs", ",", "xs", ",", "point_indices", ")", ":", "\n", "    ", "\"\"\"\n    Calls the c++ function, that loops over the variables:\n    for i in range(v):\n        xs[2*i], xs[2*i + 1], Ps + 12 * (camIndex), Xs + 3 * (point3DIndex)\n    :param Ps: [m,  3, 4]\n    :param Xs: [n, 3]\n    :param xs: [v, 2]\n    :param point_indices: [2,v]\n    :return: new_Ps: [m, 12]\n            new_Xs: [n,3]\n    \"\"\"", "\n", "if", "Xs", ".", "shape", "[", "-", "1", "]", "==", "4", ":", "\n", "        ", "Xs", "=", "Xs", "[", ":", ",", ":", "3", "]", "\n", "", "assert", "Xs", ".", "shape", "[", "-", "1", "]", "==", "3", "\n", "assert", "xs", ".", "shape", "[", "-", "1", "]", "==", "2", "\n", "m", "=", "Ps", ".", "shape", "[", "0", "]", "\n", "n", "=", "Xs", ".", "shape", "[", "0", "]", "\n", "v", "=", "point_indices", ".", "shape", "[", "1", "]", "\n", "Ps_single_flat", "=", "Ps", ".", "reshape", "(", "[", "-", "1", ",", "12", "]", ",", "order", "=", "\"F\"", ")", "#  [m, 12] Each camera is in *column* major as in matlab! the cpp code assumes it because the original code was in matlab", "\n", "\n", "Ps_flat", "=", "Ps_single_flat", ".", "flatten", "(", "\"C\"", ")", "# row major as in python", "\n", "Xs_flat", "=", "Xs", ".", "flatten", "(", "\"C\"", ")", "\n", "xs_flat", "=", "xs", ".", "flatten", "(", "\"C\"", ")", "\n", "point_idx_flat", "=", "point_indices", ".", "flatten", "(", "\"C\"", ")", "\n", "\n", "Psu", "=", "np", ".", "zeros_like", "(", "Ps_flat", ")", "\n", "Xsu", "=", "np", ".", "zeros_like", "(", "Xs_flat", ")", "\n", "\n", "PyCeres", ".", "pythonFunctionOursBA", "(", "Xs_flat", ",", "xs_flat", ",", "Ps_flat", ",", "point_idx_flat", ",", "Xsu", ",", "Psu", ",", "m", ",", "n", ",", "v", ")", "\n", "Psu", "=", "Psu", ".", "reshape", "(", "[", "m", ",", "12", "]", ",", "order", "=", "\"C\"", ")", "\n", "Psu", "=", "Psu", ".", "reshape", "(", "[", "m", ",", "3", ",", "4", "]", ",", "order", "=", "\"F\"", ")", "#  [m, 12] Each camera is in *column* major as in matlab! the cpp code assumes it because the original code was in matlab", "\n", "Xsu", "=", "Xsu", ".", "reshape", "(", "[", "n", ",", "3", "]", ")", "\n", "\n", "new_Ps", "=", "Ps", "+", "Psu", "\n", "new_Xs", "=", "Xs", "+", "Xsu", "\n", "\n", "return", "new_Ps", ",", "new_Xs", "\n", "\n"]], "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.ceres_utils.run_euclidean_python_ceres": [[127, 196], ["len", "order_cam_param_for_c().astype", "Xs.flatten().astype", "order_cam_param_for_c().astype.flatten().astype", "xs.flatten().astype", "point_indices.flatten.flatten", "numpy.zeros_like", "numpy.zeros_like", "PyCeres.Problem", "range", "PyCeres.SolverOptions", "PyCeres.Summary", "PyCeres.Solve", "ceres_utils.reorder_from_c_to_py", "int", "int", "PyCeres.eucReprojectionError", "PyCeres.HuberLoss", "PyCeres.Problem.AddResidualBlock", "print", "np.zeros_like.any", "print", "np.zeros_like.any", "print", "np.zeros_like.reshape", "np.zeros_like.reshape", "ceres_utils.order_cam_param_for_c", "Xs.flatten", "order_cam_param_for_c().astype.flatten", "xs.flatten", "PyCeres.Summary.FullReport"], "function", ["home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.ceres_utils.reorder_from_c_to_py", "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.ceres_utils.order_cam_param_for_c"], ["", "def", "run_euclidean_python_ceres", "(", "Xs", ",", "xs", ",", "Rs", ",", "ts", ",", "Ks", ",", "point_indices", ",", "print_out", "=", "True", ")", ":", "\n", "    ", "\"\"\"\n    Calls a c++ function that optimizes the camera parameters and the 3D points for a lower reprojection error.\n    :param Xs: [n, 3]\n    :param xs: [v,2]\n    :param Rs: [m,3,3]\n    :param ts: [m,3]\n    :param Ks: [m,3,3]\n    :param point_indices: [2,v]\n    :return:\n    new_Rs, new_ts, new_Ps, new_Xs Which have a lower reprojection error\n    \"\"\"", "\n", "if", "Xs", ".", "shape", "[", "-", "1", "]", "==", "4", ":", "\n", "        ", "Xs", "=", "Xs", "[", ":", ",", ":", "3", "]", "\n", "", "assert", "Xs", ".", "shape", "[", "-", "1", "]", "==", "3", "\n", "assert", "xs", ".", "shape", "[", "-", "1", "]", "==", "2", "\n", "n_cam", "=", "len", "(", "Rs", ")", "\n", "n_pts", "=", "Xs", ".", "shape", "[", "0", "]", "\n", "n_observe", "=", "xs", ".", "shape", "[", "0", "]", "\n", "\n", "Ps_for_c", "=", "order_cam_param_for_c", "(", "Rs", ",", "ts", ",", "Ks", ")", ".", "astype", "(", "np", ".", "double", ")", "\n", "Xs_flat", "=", "Xs", ".", "flatten", "(", "\"C\"", ")", ".", "astype", "(", "np", ".", "double", ")", "\n", "Ps_for_c_flat", "=", "Ps_for_c", ".", "flatten", "(", "\"C\"", ")", ".", "astype", "(", "np", ".", "double", ")", "\n", "xs_flat", "=", "xs", ".", "flatten", "(", "\"C\"", ")", ".", "astype", "(", "np", ".", "double", ")", "\n", "point_indices", "=", "point_indices", ".", "flatten", "(", "\"C\"", ")", "\n", "\n", "Xsu", "=", "np", ".", "zeros_like", "(", "Xs_flat", ")", "\n", "Psu", "=", "np", ".", "zeros_like", "(", "Ps_for_c_flat", ")", "\n", "\n", "problem", "=", "PyCeres", ".", "Problem", "(", ")", "\n", "for", "i", "in", "range", "(", "n_observe", ")", ":", "# loop over the observations", "\n", "        ", "camIndex", "=", "int", "(", "point_indices", "[", "i", "]", ")", "\n", "point3DIndex", "=", "int", "(", "point_indices", "[", "i", "+", "n_observe", "]", ")", "\n", "\n", "cost_function", "=", "PyCeres", ".", "eucReprojectionError", "(", "xs_flat", "[", "2", "*", "i", "]", ",", "xs_flat", "[", "2", "*", "i", "+", "1", "]", ",", "\n", "Ps_for_c_flat", "[", "12", "*", "camIndex", ":", "12", "*", "(", "camIndex", "+", "1", ")", "]", ",", "\n", "Xs_flat", "[", "3", "*", "point3DIndex", ":", "3", "*", "(", "point3DIndex", "+", "1", ")", "]", ")", "\n", "\n", "loss_function", "=", "PyCeres", ".", "HuberLoss", "(", "0.1", ")", "\n", "problem", ".", "AddResidualBlock", "(", "cost_function", ",", "loss_function", ",", "Psu", "[", "12", "*", "camIndex", ":", "12", "*", "(", "camIndex", "+", "1", ")", "]", ",", "\n", "Xsu", "[", "3", "*", "point3DIndex", ":", "3", "*", "(", "point3DIndex", "+", "1", ")", "]", ")", "\n", "\n", "", "options", "=", "PyCeres", ".", "SolverOptions", "(", ")", "\n", "\n", "options", ".", "function_tolerance", "=", "0.0001", "\n", "options", ".", "max_num_iterations", "=", "100", "\n", "options", ".", "num_threads", "=", "24", "\n", "\n", "options", ".", "linear_solver_type", "=", "PyCeres", ".", "LinearSolverType", ".", "DENSE_SCHUR", "\n", "options", ".", "minimizer_progress_to_stdout", "=", "True", "\n", "if", "not", "print_out", ":", "\n", "        ", "PyCeres", ".", "LoggingType", "=", "PyCeres", ".", "LoggingType", ".", "SILENT", "\n", "\n", "", "summary", "=", "PyCeres", ".", "Summary", "(", ")", "\n", "PyCeres", ".", "Solve", "(", "options", ",", "problem", ",", "summary", ")", "\n", "if", "print_out", ":", "\n", "        ", "print", "(", "summary", ".", "FullReport", "(", ")", ")", "\n", "\n", "", "if", "~", "Psu", ".", "any", "(", ")", ":", "\n", "        ", "print", "(", "'Warning no change to Ps'", ")", "\n", "", "if", "~", "Xsu", ".", "any", "(", ")", ":", "\n", "        ", "print", "(", "'Warning no change to Xs'", ")", "\n", "\n", "", "new_Ps_for_c", "=", "Ps_for_c", "+", "Psu", ".", "reshape", "(", "[", "n_cam", ",", "12", "]", ",", "order", "=", "\"C\"", ")", "\n", "\n", "new_Rs", ",", "new_ts", ",", "new_Ps", "=", "reorder_from_c_to_py", "(", "new_Ps_for_c", ",", "Ks", ")", "\n", "new_Xs", "=", "Xs", "+", "Xsu", ".", "reshape", "(", "[", "n_pts", ",", "3", "]", ",", "order", "=", "\"C\"", ")", "\n", "\n", "return", "new_Rs", ",", "new_ts", ",", "new_Ps", ",", "new_Xs", "\n", "\n"]], "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.ceres_utils.run_projective_python_ceres": [[198, 259], ["Ps.reshape", "Ps.reshape.flatten().astype", "Xs.flatten().astype", "xs.flatten", "point_indices.flatten", "numpy.zeros_like", "numpy.zeros_like", "PyCeres.Problem", "range", "PyCeres.SolverOptions", "PyCeres.Summary", "PyCeres.Solve", "Psu.reshape.reshape", "Psu.reshape.reshape", "Xsu.reshape.reshape", "int", "int", "PyCeres.projReprojectionError", "PyCeres.HuberLoss", "PyCeres.Problem.AddResidualBlock", "print", "Ps.reshape.flatten", "Xs.flatten", "PyCeres.Summary.FullReport"], "function", ["None"], ["", "def", "run_projective_python_ceres", "(", "Ps", ",", "Xs", ",", "xs", ",", "point_indices", ",", "print_out", "=", "True", ")", ":", "\n", "    ", "\"\"\"\n    Calls the c++ function, that loops over the variables:\n    for i in range(v):\n        xs[2*i], xs[2*i + 1], Ps + 12 * (camIndex), Xs + 3 * (point3DIndex)\n    :param Ps: [m,  3, 4]\n    :param Xs: [n, 3]\n    :param xs: [v, 2]\n    :param point_indices: [2,v]\n    :return: new_Ps: [m, 12]\n            new_Xs: [n,3]\n    \"\"\"", "\n", "if", "Xs", ".", "shape", "[", "-", "1", "]", "==", "4", ":", "\n", "        ", "Xs", "=", "Xs", "[", ":", ",", ":", "3", "]", "\n", "", "assert", "Xs", ".", "shape", "[", "-", "1", "]", "==", "3", "\n", "assert", "xs", ".", "shape", "[", "-", "1", "]", "==", "2", "\n", "m", "=", "Ps", ".", "shape", "[", "0", "]", "\n", "n", "=", "Xs", ".", "shape", "[", "0", "]", "\n", "v", "=", "point_indices", ".", "shape", "[", "1", "]", "\n", "Ps_single_flat", "=", "Ps", ".", "reshape", "(", "[", "-", "1", ",", "12", "]", ",", "order", "=", "\"F\"", ")", "#  [m, 12] Each camera is in *column* major as in matlab! the cpp code assumes it because the original code was in matlab", "\n", "\n", "Ps_flat", "=", "Ps_single_flat", ".", "flatten", "(", "\"C\"", ")", ".", "astype", "(", "np", ".", "double", ")", "# row major as in python", "\n", "Xs_flat", "=", "Xs", ".", "flatten", "(", "\"C\"", ")", ".", "astype", "(", "np", ".", "double", ")", "\n", "xs_flat", "=", "xs", ".", "flatten", "(", "\"C\"", ")", "\n", "point_idx_flat", "=", "point_indices", ".", "flatten", "(", "\"C\"", ")", "\n", "\n", "Psu", "=", "np", ".", "zeros_like", "(", "Ps_flat", ")", "\n", "Xsu", "=", "np", ".", "zeros_like", "(", "Xs_flat", ")", "\n", "\n", "problem", "=", "PyCeres", ".", "Problem", "(", ")", "\n", "for", "i", "in", "range", "(", "v", ")", ":", "# loop over the observations", "\n", "        ", "camIndex", "=", "int", "(", "point_idx_flat", "[", "i", "]", ")", "\n", "point3DIndex", "=", "int", "(", "point_idx_flat", "[", "i", "+", "v", "]", ")", "\n", "\n", "cost_function", "=", "PyCeres", ".", "projReprojectionError", "(", "xs_flat", "[", "2", "*", "i", "]", ",", "xs_flat", "[", "2", "*", "i", "+", "1", "]", ",", "Ps_flat", "[", "12", "*", "camIndex", ":", "12", "*", "(", "camIndex", "+", "1", ")", "]", ",", "Xs_flat", "[", "3", "*", "point3DIndex", ":", "3", "*", "(", "point3DIndex", "+", "1", ")", "]", ")", "\n", "\n", "loss_function", "=", "PyCeres", ".", "HuberLoss", "(", "0.1", ")", "\n", "problem", ".", "AddResidualBlock", "(", "cost_function", ",", "loss_function", ",", "Psu", "[", "12", "*", "camIndex", ":", "12", "*", "(", "camIndex", "+", "1", ")", "]", ",", "Xsu", "[", "3", "*", "point3DIndex", ":", "3", "*", "(", "point3DIndex", "+", "1", ")", "]", ")", "\n", "\n", "\n", "", "options", "=", "PyCeres", ".", "SolverOptions", "(", ")", "\n", "\n", "options", ".", "function_tolerance", "=", "0.0001", "\n", "options", ".", "max_num_iterations", "=", "100", "\n", "options", ".", "num_threads", "=", "24", "\n", "\n", "options", ".", "linear_solver_type", "=", "PyCeres", ".", "LinearSolverType", ".", "DENSE_SCHUR", "\n", "options", ".", "minimizer_progress_to_stdout", "=", "True", "\n", "\n", "summary", "=", "PyCeres", ".", "Summary", "(", ")", "\n", "PyCeres", ".", "Solve", "(", "options", ",", "problem", ",", "summary", ")", "\n", "if", "print_out", ":", "\n", "        ", "print", "(", "summary", ".", "FullReport", "(", ")", ")", "\n", "", "Psu", "=", "Psu", ".", "reshape", "(", "[", "m", ",", "12", "]", ",", "order", "=", "\"C\"", ")", "\n", "Psu", "=", "Psu", ".", "reshape", "(", "[", "m", ",", "3", ",", "4", "]", ",", "order", "=", "\"F\"", ")", "#  [m, 12] Each camera is in *column* major as in matlab! the cpp code assumes it because the original code was in matlab", "\n", "Xsu", "=", "Xsu", ".", "reshape", "(", "[", "n", ",", "3", "]", ")", "\n", "\n", "new_Ps", "=", "Ps", "+", "Psu", "\n", "new_Xs", "=", "Xs", "+", "Xsu", "\n", "\n", "return", "new_Ps", ",", "new_Xs", "", "", ""]], "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.ba_functions.euc_ba": [[6, 64], ["numpy.stack", "utils.ceres_utils.run_euclidean_python_ceres", "numpy.concatenate", "numpy.where", "utils.geo_utils.batch_get_camera_matrix_from_rtk", "utils.geo_utils.normalize_points_cams", "utils.geo_utils.dlt_triangulation", "numpy.nanmean", "utils.geo_utils.normalize_points_cams", "utils.geo_utils.dlt_triangulation", "utils.ceres_utils.run_euclidean_python_ceres", "numpy.nanmean", "numpy.linalg.inv", "utils.geo_utils.reprojection_error_with_points", "numpy.nanmean", "utils.geo_utils.reprojection_error_with_points", "numpy.ones", "utils.geo_utils.reprojection_error_with_points"], "function", ["home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.ceres_utils.run_euclidean_python_ceres", "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.geo_utils.batch_get_camera_matrix_from_rtk", "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.geo_utils.normalize_points_cams", "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.geo_utils.dlt_triangulation", "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.geo_utils.normalize_points_cams", "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.geo_utils.dlt_triangulation", "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.ceres_utils.run_euclidean_python_ceres", "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.geo_utils.reprojection_error_with_points", "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.geo_utils.reprojection_error_with_points", "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.geo_utils.reprojection_error_with_points"], ["def", "euc_ba", "(", "xs", ",", "Rs", ",", "ts", ",", "Ks", ",", "Xs_our", "=", "None", ",", "Ps", "=", "None", ",", "Ns", "=", "None", ",", "repeat", "=", "True", ",", "triangulation", "=", "False", ",", "return_repro", "=", "True", ")", ":", "\n", "    ", "\"\"\"\n    Computes bundle adjustment with ceres solver\n    :param xs: 2d points [m,n,2]\n    :param Rs: rotations [m,3,3]\n    :param ts: translations [m,3]\n    :param Ks: inner parameters, calibration matrices [m,3,3]\n    :param Xs_our: initial 3d points [n,3] or None if triangulation needed\n    :param Ps: cameras [m,3,4]. Ps[i] = Ks[i] @ Rs[i].T @ [I, -ts[i]]\n    :param Ns: normalization matrices. If Ks are known, Ns = inv(Ks)\n    :param repeat: run ba twice. default: True\n    :param triangulation: For initial point run triangulation. default: False\n    :param return_repro: compute and return the reprojection errors before and after.\n    :return: results. The new camera parameters, 3d points, and if requested the reprojection errors.\n    \"\"\"", "\n", "results", "=", "{", "}", "\n", "\n", "visible_points", "=", "xs", "[", ":", ",", ":", ",", "0", "]", ">", "0", "\n", "point_indices", "=", "np", ".", "stack", "(", "np", ".", "where", "(", "visible_points", ")", ")", "\n", "visible_xs", "=", "xs", "[", "visible_points", "]", "\n", "\n", "if", "Ps", "is", "None", ":", "\n", "        ", "Ps", "=", "geo_utils", ".", "batch_get_camera_matrix_from_rtk", "(", "Rs", ",", "ts", ",", "Ks", ")", "\n", "\n", "", "if", "triangulation", ":", "\n", "        ", "if", "Ns", "is", "None", ":", "\n", "            ", "Ns", "=", "np", ".", "linalg", ".", "inv", "(", "Ks", ")", "\n", "", "norm_P", ",", "norm_x", "=", "geo_utils", ".", "normalize_points_cams", "(", "Ps", ",", "xs", ",", "Ns", ")", "\n", "Xs", "=", "geo_utils", ".", "dlt_triangulation", "(", "norm_P", ",", "norm_x", ",", "visible_points", ")", "\n", "", "else", ":", "\n", "        ", "Xs", "=", "Xs_our", "\n", "\n", "", "if", "return_repro", ":", "\n", "        ", "results", "[", "'repro_before'", "]", "=", "np", ".", "nanmean", "(", "geo_utils", ".", "reprojection_error_with_points", "(", "Ps", ",", "Xs", ",", "xs", ",", "visible_points", ")", ")", "\n", "\n", "", "new_Rs", ",", "new_ts", ",", "new_Ps", ",", "new_Xs", "=", "ceres_utils", ".", "run_euclidean_python_ceres", "(", "Xs", ",", "visible_xs", ",", "Rs", ",", "ts", ",", "Ks", ",", "point_indices", ")", "\n", "\n", "if", "repeat", ":", "\n", "        ", "if", "return_repro", ":", "\n", "            ", "results", "[", "'repro_middle'", "]", "=", "np", ".", "nanmean", "(", "geo_utils", ".", "reprojection_error_with_points", "(", "new_Ps", ",", "new_Xs", ",", "xs", ",", "visible_points", ")", ")", "\n", "\n", "", "norm_P", ",", "norm_x", "=", "geo_utils", ".", "normalize_points_cams", "(", "new_Ps", ",", "xs", ",", "Ns", ")", "\n", "new_Xs", "=", "geo_utils", ".", "dlt_triangulation", "(", "norm_P", ",", "norm_x", ",", "visible_points", ")", "\n", "\n", "# second ba with triangulated x", "\n", "new_Rs", ",", "new_ts", ",", "new_Ps", ",", "new_Xs", "=", "ceres_utils", ".", "run_euclidean_python_ceres", "(", "new_Xs", ",", "visible_xs", ",", "new_Rs", ",", "new_ts", ",", "Ks", ",", "\n", "point_indices", ")", "\n", "\n", "", "if", "return_repro", ":", "\n", "        ", "results", "[", "'repro_after'", "]", "=", "np", ".", "nanmean", "(", "geo_utils", ".", "reprojection_error_with_points", "(", "new_Ps", ",", "new_Xs", ",", "xs", ",", "visible_points", ")", ")", "\n", "\n", "", "new_Xs", "=", "np", ".", "concatenate", "(", "[", "new_Xs", ",", "np", ".", "ones", "(", "[", "new_Xs", ".", "shape", "[", "0", "]", ",", "1", "]", ")", "]", ",", "axis", "=", "1", ")", "\n", "\n", "results", "[", "'Rs'", "]", "=", "new_Rs", "\n", "results", "[", "'ts'", "]", "=", "new_ts", "\n", "results", "[", "'Ps'", "]", "=", "new_Ps", "\n", "results", "[", "'Xs'", "]", "=", "new_Xs", "\n", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.ba_functions.proj_ba": [[66, 123], ["numpy.stack", "utils.ceres_utils.run_projective_python_ceres", "numpy.concatenate", "numpy.where", "numpy.nanmean", "utils.ceres_utils.run_projective_python_ceres", "numpy.nanmean", "utils.geo_utils.normalize_points_cams", "utils.geo_utils.dlt_triangulation", "utils.geo_utils.dlt_triangulation", "utils.geo_utils.reprojection_error_with_points", "numpy.nanmean", "utils.geo_utils.normalize_points_cams", "utils.geo_utils.dlt_triangulation", "utils.geo_utils.dlt_triangulation", "utils.geo_utils.reprojection_error_with_points", "numpy.ones", "utils.geo_utils.batch_get_normalization_matrices", "utils.geo_utils.reprojection_error_with_points", "utils.geo_utils.batch_get_normalization_matrices"], "function", ["home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.ceres_utils.run_projective_python_ceres", "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.ceres_utils.run_projective_python_ceres", "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.geo_utils.normalize_points_cams", "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.geo_utils.dlt_triangulation", "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.geo_utils.dlt_triangulation", "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.geo_utils.reprojection_error_with_points", "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.geo_utils.normalize_points_cams", "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.geo_utils.dlt_triangulation", "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.geo_utils.dlt_triangulation", "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.geo_utils.reprojection_error_with_points", "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.geo_utils.batch_get_normalization_matrices", "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.geo_utils.reprojection_error_with_points", "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.geo_utils.batch_get_normalization_matrices"], ["", "def", "proj_ba", "(", "Ps", ",", "xs", ",", "Xs_our", "=", "None", ",", "Ns", "=", "None", ",", "repeat", "=", "True", ",", "triangulation", "=", "False", ",", "return_repro", "=", "True", ",", "normalize_in_tri", "=", "True", ")", ":", "\n", "    ", "\"\"\"\n    Computes bundle adjustment with ceres solve\n    :param Ps: cameras [m,3,4]. Ps[i] = Ks[i] @ Rs[i].T @ [I, -ts[i]]\n    :param xs: 2d points [m,n,2]\n    :param Xs_our: initial 3d points [n,3] or None if triangulation needed\n    :param Ns: normalization matrices.\n    :param repeat: run ba twice. default: True\n    :param triangulation: For initial point run triangulation. default: False\n    :param return_repro: compute and return the reprojection errors before and after.\n    :param normalize_in_tri: Normalize the points and the cameras when computing triangulation. default: True\n    :return: results. The new camera parameters, 3d points, and if requested the reprojection errors.\n    \"\"\"", "\n", "results", "=", "{", "}", "\n", "\n", "visible_points", "=", "xs", "[", ":", ",", ":", ",", "0", "]", ">", "0", "\n", "point_indices", "=", "np", ".", "stack", "(", "np", ".", "where", "(", "visible_points", ")", ")", "\n", "visible_xs", "=", "xs", "[", "visible_points", "]", "\n", "\n", "if", "triangulation", ":", "\n", "        ", "if", "normalize_in_tri", ":", "\n", "            ", "if", "Ns", "is", "None", ":", "\n", "                ", "Ns", "=", "geo_utils", ".", "batch_get_normalization_matrices", "(", "xs", ")", "\n", "", "norm_P", ",", "norm_x", "=", "geo_utils", ".", "normalize_points_cams", "(", "Ps", ",", "xs", ",", "Ns", ")", "\n", "Xs", "=", "geo_utils", ".", "dlt_triangulation", "(", "norm_P", ",", "norm_x", ",", "visible_points", ")", "\n", "", "else", ":", "\n", "            ", "Xs", "=", "geo_utils", ".", "dlt_triangulation", "(", "Ps", ",", "xs", ",", "visible_points", ")", "\n", "", "", "else", ":", "\n", "        ", "Xs", "=", "Xs_our", "\n", "\n", "", "if", "return_repro", ":", "\n", "        ", "results", "[", "'repro_before'", "]", "=", "np", ".", "nanmean", "(", "geo_utils", ".", "reprojection_error_with_points", "(", "Ps", ",", "Xs", ",", "xs", ",", "visible_points", ")", ")", "\n", "\n", "", "new_Ps", ",", "new_Xs", "=", "ceres_utils", ".", "run_projective_python_ceres", "(", "Ps", ",", "Xs", ",", "visible_xs", ",", "point_indices", ")", "\n", "\n", "if", "repeat", ":", "\n", "        ", "if", "return_repro", ":", "\n", "            ", "results", "[", "'repro_middle'", "]", "=", "np", ".", "nanmean", "(", "geo_utils", ".", "reprojection_error_with_points", "(", "new_Ps", ",", "new_Xs", ",", "xs", ",", "visible_points", ")", ")", "\n", "\n", "", "if", "normalize_in_tri", ":", "\n", "            ", "if", "Ns", "is", "None", ":", "\n", "                ", "Ns", "=", "geo_utils", ".", "batch_get_normalization_matrices", "(", "xs", ")", "\n", "", "norm_P", ",", "norm_x", "=", "geo_utils", ".", "normalize_points_cams", "(", "new_Ps", ",", "xs", ",", "Ns", ")", "\n", "new_Xs", "=", "geo_utils", ".", "dlt_triangulation", "(", "norm_P", ",", "norm_x", ",", "visible_points", ")", "\n", "", "else", ":", "\n", "            ", "new_Xs", "=", "geo_utils", ".", "dlt_triangulation", "(", "new_Ps", ",", "xs", ",", "visible_points", ")", "\n", "\n", "", "new_Ps", ",", "new_Xs", "=", "ceres_utils", ".", "run_projective_python_ceres", "(", "new_Ps", ",", "new_Xs", ",", "visible_xs", ",", "point_indices", ")", "\n", "\n", "", "if", "return_repro", ":", "\n", "        ", "results", "[", "'repro_after'", "]", "=", "np", ".", "nanmean", "(", "geo_utils", ".", "reprojection_error_with_points", "(", "new_Ps", ",", "new_Xs", ",", "xs", ",", "visible_points", ")", ")", "\n", "\n", "", "new_Xs", "=", "np", ".", "concatenate", "(", "[", "new_Xs", ",", "np", ".", "ones", "(", "[", "new_Xs", ".", "shape", "[", "0", "]", ",", "1", "]", ")", "]", ",", "axis", "=", "1", ")", "\n", "\n", "results", "[", "'Ps'", "]", "=", "new_Ps", "\n", "results", "[", "'Xs'", "]", "=", "new_Xs", "\n", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.general_utils.log_code": [[19, 33], ["utils.path_utils.path_to_code_logs", "shutil.copyfile", "shutil.copytree", "open", "conf_log_file.write", "os.path.join", "os.path.join", "os.path.join", "pyhocon.HOCONConverter.convert"], "function", ["home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.path_utils.path_to_code_logs"], ["def", "log_code", "(", "conf", ")", ":", "\n", "    ", "code_path", "=", "path_to_code_logs", "(", "conf", ")", "\n", "\n", "files_to_log", "=", "[", "\"train.py\"", ",", "\"single_scene_optimization.py\"", ",", "\"multiple_scenes_learning.py\"", ",", "\"loss_functions.py\"", "]", "\n", "for", "file_name", "in", "files_to_log", ":", "\n", "        ", "shutil", ".", "copyfile", "(", "'{}'", ".", "format", "(", "file_name", ")", ",", "os", ".", "path", ".", "join", "(", "code_path", ",", "file_name", ")", ")", "\n", "\n", "", "dirs_to_log", "=", "[", "\"datasets\"", ",", "\"models\"", "]", "\n", "for", "dir_name", "in", "dirs_to_log", ":", "\n", "        ", "shutil", ".", "copytree", "(", "'{}'", ".", "format", "(", "dir_name", ")", ",", "os", ".", "path", ".", "join", "(", "code_path", ",", "dir_name", ")", ")", "\n", "\n", "# Print conf", "\n", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "code_path", ",", "'exp.conf'", ")", ",", "'w'", ")", "as", "conf_log_file", ":", "\n", "        ", "conf_log_file", ".", "write", "(", "HOCONConverter", ".", "convert", "(", "conf", ",", "'hocon'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.general_utils.save_camera_mat": [[35, 39], ["utils.path_utils.path_to_cameras", "numpy.savez", "scipy.io.savemat"], "function", ["home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.path_utils.path_to_cameras"], ["", "", "def", "save_camera_mat", "(", "conf", ",", "save_cam_dict", ",", "scan", ",", "phase", ",", "epoch", "=", "None", ")", ":", "\n", "    ", "path_cameras", "=", "path_to_cameras", "(", "conf", ",", "phase", ",", "epoch", "=", "epoch", ",", "scan", "=", "scan", ")", "\n", "np", ".", "savez", "(", "path_cameras", ",", "**", "save_cam_dict", ")", "\n", "savemat", "(", "path_cameras", ",", "save_cam_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.general_utils.write_results": [[41, 58], ["utils.path_utils.path_to_exp", "os.path.join", "os.path.join", "portalocker.Lock", "df.to_excel", "os.path.exists", "prev_df.append.to_excel", "pandas.read_excel().set_index", "pd.read_excel().set_index.append", "pandas.read_excel"], "function", ["home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.path_utils.path_to_exp"], ["", "def", "write_results", "(", "conf", ",", "df", ",", "file_name", "=", "\"Results\"", ",", "append", "=", "False", ")", ":", "\n", "    ", "exp_path", "=", "path_to_exp", "(", "conf", ")", "\n", "results_file_path", "=", "os", ".", "path", ".", "join", "(", "exp_path", ",", "'{}.xlsx'", ".", "format", "(", "file_name", ")", ")", "\n", "\n", "if", "append", ":", "\n", "        ", "locker_file", "=", "os", ".", "path", ".", "join", "(", "exp_path", ",", "'{}.lock'", ".", "format", "(", "file_name", ")", ")", "\n", "lock", "=", "portalocker", ".", "Lock", "(", "locker_file", ",", "timeout", "=", "1000", ")", "\n", "with", "lock", ":", "\n", "            ", "if", "os", ".", "path", ".", "exists", "(", "results_file_path", ")", ":", "\n", "                ", "prev_df", "=", "pd", ".", "read_excel", "(", "results_file_path", ")", ".", "set_index", "(", "\"Scene\"", ")", "\n", "merged_err_df", "=", "prev_df", ".", "append", "(", "df", ")", "\n", "", "else", ":", "\n", "                ", "merged_err_df", "=", "df", "\n", "\n", "", "merged_err_df", ".", "to_excel", "(", "results_file_path", ")", "\n", "", "", "else", ":", "\n", "        ", "df", ".", "to_excel", "(", "results_file_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.general_utils.init_exp_version": [[60, 62], ["datetime.datetime.now"], "function", ["None"], ["", "", "def", "init_exp_version", "(", ")", ":", "\n", "    ", "return", "'{:%Y_%m_%d_%H_%M_%S}'", ".", "format", "(", "datetime", ".", "now", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.general_utils.get_class": [[64, 71], ["kls.split", "__import__", "getattr"], "function", ["None"], ["", "def", "get_class", "(", "kls", ")", ":", "\n", "    ", "parts", "=", "kls", ".", "split", "(", "'.'", ")", "\n", "module", "=", "\".\"", ".", "join", "(", "parts", "[", ":", "-", "1", "]", ")", "\n", "m", "=", "__import__", "(", "module", ")", "\n", "for", "comp", "in", "parts", "[", "1", ":", "]", ":", "\n", "        ", "m", "=", "getattr", "(", "m", ",", "comp", ")", "\n", "", "return", "m", "\n", "\n"]], "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.general_utils.count_parameters": [[73, 75], ["sum", "p.numel", "model.parameters"], "function", ["home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.sparse_utils.SparseMat.sum"], ["", "def", "count_parameters", "(", "model", ")", ":", "\n", "    ", "return", "sum", "(", "p", ".", "numel", "(", ")", "for", "p", "in", "model", ".", "parameters", "(", ")", "if", "p", ".", "requires_grad", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.general_utils.print_error": [[77, 79], ["print"], "function", ["None"], ["", "def", "print_error", "(", "err_string", ")", ":", "\n", "    ", "print", "(", "err_string", ",", "file", "=", "sys", ".", "stderr", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.general_utils.config_tree_to_string": [[81, 90], ["config.keys", "json.dumps", "isinstance", "config[].items"], "function", ["None"], ["", "def", "config_tree_to_string", "(", "config", ")", ":", "\n", "    ", "config_dict", "=", "{", "}", "\n", "for", "it", "in", "config", ".", "keys", "(", ")", ":", "\n", "        ", "if", "isinstance", "(", "config", "[", "it", "]", ",", "ConfigTree", ")", ":", "\n", "            ", "it_dict", "=", "{", "key", ":", "val", "for", "key", ",", "val", "in", "config", "[", "it", "]", ".", "items", "(", ")", "}", "\n", "config_dict", "[", "it", "]", "=", "it_dict", "\n", "", "else", ":", "\n", "            ", "config_dict", "[", "it", "]", "=", "config", "[", "it", "]", "\n", "", "", "return", "json", ".", "dumps", "(", "config_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.general_utils.bmvm": [[92, 94], ["torch.bmm().squeeze", "torch.bmm", "bvecs.unsqueeze"], "function", ["None"], ["", "def", "bmvm", "(", "bmats", ",", "bvecs", ")", ":", "\n", "    ", "return", "torch", ".", "bmm", "(", "bmats", ",", "bvecs", ".", "unsqueeze", "(", "-", "1", ")", ")", ".", "squeeze", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.general_utils.get_full_conf_vals": [[96, 110], ["conf.items", "isinstance", "general_utils.get_full_conf_vals", "get_full_conf_vals.items"], "function", ["home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.general_utils.get_full_conf_vals"], ["", "def", "get_full_conf_vals", "(", "conf", ")", ":", "\n", "# return a conf file as a dictionary as follow:", "\n", "# \"key.key.key...key\": value", "\n", "# Useful for the conf.put() command", "\n", "    ", "full_vals", "=", "{", "}", "\n", "for", "key", ",", "val", "in", "conf", ".", "items", "(", ")", ":", "\n", "        ", "if", "isinstance", "(", "val", ",", "dict", ")", ":", "\n", "            ", "part_vals", "=", "get_full_conf_vals", "(", "val", ")", "\n", "for", "part_key", ",", "part_val", "in", "part_vals", ".", "items", "(", ")", ":", "\n", "                ", "full_vals", "[", "key", "+", "\".\"", "+", "part_key", "]", "=", "part_val", "\n", "", "", "else", ":", "\n", "            ", "full_vals", "[", "key", "]", "=", "val", "\n", "\n", "", "", "return", "full_vals", "\n", "\n"]], "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.general_utils.parse_external_params": [[112, 120], ["ext_params_str.split", "param.split", "len", "len"], "function", ["None"], ["", "def", "parse_external_params", "(", "ext_params_str", ",", "conf", ")", ":", "\n", "    ", "for", "param", "in", "ext_params_str", ".", "split", "(", "','", ")", ":", "\n", "        ", "key_val", "=", "param", ".", "split", "(", "':'", ")", "\n", "if", "len", "(", "key_val", ")", "==", "3", ":", "\n", "            ", "conf", "[", "key_val", "[", "0", "]", "]", "[", "key_val", "[", "1", "]", "]", "=", "key_val", "[", "2", "]", "\n", "", "elif", "len", "(", "key_val", ")", "==", "2", ":", "\n", "            ", "conf", "[", "key_val", "[", "0", "]", "]", "=", "key_val", "[", "1", "]", "\n", "", "", "return", "conf", "\n", "\n"]], "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.general_utils.init_exp": [[122, 167], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "torch.device", "utils.path_utils.path_to_conf", "pyhocon.ConfigFactory.parse_file", "parse_external_params.get_int", "general_utils.parse_external_params", "general_utils.init_exp_version", "torch.manual_seed", "numpy.random.seed", "torch.cuda.is_available", "conf[].keys"], "function", ["home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.path_utils.path_to_conf", "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.general_utils.parse_external_params", "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.general_utils.init_exp_version"], ["", "def", "init_exp", "(", "default_phase", ")", ":", "\n", "# Parse Arguments", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "'--conf'", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--scan'", ",", "type", "=", "str", ",", "default", "=", "None", ")", "\n", "parser", ".", "add_argument", "(", "'--exp_version'", ",", "type", "=", "str", ",", "default", "=", "None", ")", "\n", "parser", ".", "add_argument", "(", "'--external_params'", ",", "type", "=", "str", ",", "default", "=", "None", ")", "\n", "parser", ".", "add_argument", "(", "'--phase'", ",", "type", "=", "str", ",", "default", "=", "default_phase", ")", "\n", "opt", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "# Init Device", "\n", "device", "=", "torch", ".", "device", "(", "'cuda'", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "'cpu'", ")", "\n", "\n", "# Init Conf", "\n", "conf_file_path", "=", "path_to_conf", "(", "opt", ".", "conf", ")", "\n", "conf", "=", "ConfigFactory", ".", "parse_file", "(", "conf_file_path", ")", "\n", "conf", "[", "\"original_file_name\"", "]", "=", "opt", ".", "conf", "\n", "\n", "# Init external params", "\n", "if", "opt", ".", "external_params", "is", "not", "None", ":", "\n", "        ", "conf", "=", "parse_external_params", "(", "opt", ".", "external_params", ",", "conf", ")", "\n", "\n", "# Init Version", "\n", "", "if", "opt", ".", "exp_version", "is", "None", ":", "\n", "        ", "exp_version", "=", "init_exp_version", "(", ")", "\n", "", "else", ":", "\n", "        ", "exp_version", "=", "opt", ".", "exp_version", "\n", "", "conf", "[", "'exp_version'", "]", "=", "exp_version", "\n", "\n", "# Init scan", "\n", "if", "opt", ".", "scan", "is", "not", "None", ":", "\n", "        ", "conf", "[", "'dataset'", "]", "[", "'scan'", "]", "=", "opt", ".", "scan", "\n", "", "elif", "'scan'", "not", "in", "conf", "[", "'dataset'", "]", ".", "keys", "(", ")", ":", "\n", "        ", "conf", "[", "'dataset'", "]", "[", "'scan'", "]", "=", "'Multiple_Scenes'", "\n", "\n", "# Init Seed", "\n", "", "seed", "=", "conf", ".", "get_int", "(", "'random_seed'", ",", "default", "=", "None", ")", "\n", "if", "seed", "is", "not", "None", ":", "\n", "        ", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "\n", "# Init Phase", "\n", "", "phase", "=", "Phases", "[", "opt", ".", "phase", "]", "\n", "\n", "return", "conf", ",", "device", ",", "phase", "\n", "", ""]], "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.datasets.ScenesDataSet.DataLoader.__init__": [[6, 15], ["len", "int", "ScenesDataSet.DataLoader.init_permutation", "numpy.ceil"], "methods", ["home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.datasets.ScenesDataSet.DataLoader.init_permutation"], ["    ", "def", "__init__", "(", "self", ",", "dataset", ",", "batch_size", "=", "1", ",", "shuffle", "=", "False", ")", ":", "\n", "        ", "self", ".", "n", "=", "len", "(", "dataset", ")", "\n", "self", ".", "dataset", "=", "dataset", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "num_batches", "=", "int", "(", "np", ".", "ceil", "(", "self", ".", "n", "/", "self", ".", "batch_size", ")", ")", "\n", "self", ".", "shuffle", "=", "shuffle", "\n", "self", ".", "permutation", "=", "self", ".", "init_permutation", "(", ")", "\n", "self", ".", "current_batch", "=", "0", "\n", "self", ".", "device", "=", "'cpu'", "\n", "\n"]], "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.datasets.ScenesDataSet.DataLoader.init_permutation": [[16, 18], ["numpy.random.permutation", "numpy.arange"], "methods", ["None"], ["", "def", "init_permutation", "(", "self", ")", ":", "\n", "        ", "return", "np", ".", "random", ".", "permutation", "(", "self", ".", "n", ")", "if", "self", ".", "shuffle", "else", "np", ".", "arange", "(", "self", ".", "n", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.datasets.ScenesDataSet.DataLoader.__iter__": [[19, 23], ["ScenesDataSet.DataLoader.init_permutation"], "methods", ["home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.datasets.ScenesDataSet.DataLoader.init_permutation"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "self", ".", "current_batch", "=", "0", "\n", "self", ".", "permutation", "=", "self", ".", "init_permutation", "(", ")", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.datasets.ScenesDataSet.DataLoader.__next__": [[24, 32], ["min", "ScenesDataSet.DataLoader.dataset[].to"], "methods", ["home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.datasets.SceneData.SceneData.to"], ["", "def", "__next__", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "current_batch", "==", "self", ".", "num_batches", ":", "\n", "            ", "raise", "StopIteration", "\n", "", "start_ind", "=", "self", ".", "current_batch", "*", "self", ".", "batch_size", "\n", "end_ind", "=", "min", "(", "(", "self", ".", "current_batch", "+", "1", ")", "*", "self", ".", "batch_size", ",", "self", ".", "n", ")", "\n", "current_indices", "=", "self", ".", "permutation", "[", "start_ind", ":", "end_ind", "]", "\n", "self", ".", "current_batch", "+=", "1", "\n", "return", "[", "self", ".", "dataset", "[", "i", "]", ".", "to", "(", "self", ".", "device", ")", "for", "i", "in", "current_indices", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.datasets.ScenesDataSet.DataLoader.__len__": [[33, 35], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "n", "\n", "\n"]], "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.datasets.ScenesDataSet.DataLoader.to": [[36, 39], ["None"], "methods", ["None"], ["", "def", "to", "(", "self", ",", "device", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "device", "=", "device", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.datasets.ScenesDataSet.ScenesDataSet.__init__": [[42, 48], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.models.SetOfSet.SetOfSetNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "data_list", ",", "return_all", ",", "min_sample_size", "=", "10", ",", "max_sample_size", "=", "30", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "data_list", "=", "data_list", "\n", "self", ".", "return_all", "=", "return_all", "\n", "self", ".", "min_sample_size", "=", "min_sample_size", "\n", "self", ".", "max_sample_size", "=", "max_sample_size", "\n", "\n"]], "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.datasets.ScenesDataSet.ScenesDataSet.__getitem__": [[49, 60], ["min", "datasets.SceneData.sample_data", "len", "numpy.random.randint"], "methods", ["home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.datasets.SceneData.sample_data"], ["", "def", "__getitem__", "(", "self", ",", "item", ")", ":", "\n", "        ", "current_data", "=", "self", ".", "data_list", "[", "item", "]", "\n", "if", "self", ".", "return_all", ":", "\n", "            ", "return", "current_data", "\n", "", "else", ":", "\n", "            ", "max_sample", "=", "min", "(", "self", ".", "max_sample_size", ",", "len", "(", "current_data", ".", "y", ")", ")", "\n", "if", "self", ".", "min_sample_size", ">=", "max_sample", ":", "\n", "                ", "sample_fraction", "=", "max_sample", "\n", "", "else", ":", "\n", "                ", "sample_fraction", "=", "np", ".", "random", ".", "randint", "(", "self", ".", "min_sample_size", ",", "max_sample", "+", "1", ")", "\n", "", "return", "SceneData", ".", "sample_data", "(", "current_data", ",", "sample_fraction", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.datasets.ScenesDataSet.ScenesDataSet.__len__": [[61, 63], ["len"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "data_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.datasets.Projective.get_raw_data": [[9, 43], ["os.path.join", "conf.get_bool", "numpy.load", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "utils.path_utils.path_to_datasets", "conf.get_string", "os.path.join.format", "torch.from_numpy", "utils.dataset_utils.correct_matches_global", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "function", ["home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.path_utils.path_to_datasets", "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.dataset_utils.correct_matches_global"], ["def", "get_raw_data", "(", "conf", ",", "scan", ")", ":", "\n", "    ", "\"\"\"\n    :param conf:\n    :return:\n    M - Points Matrix (2mxn)\n    Ns - Normalization matrices (mx3x3)\n    Ps_gt - Olsson's estimated camera matrices (mx3x4)\n    NBs - Normzlize Bifocal Tensor (Normalized Fn) (3mx3m)\n    triplets\n    \"\"\"", "\n", "# Init", "\n", "dataset_path_format", "=", "os", ".", "path", ".", "join", "(", "path_utils", ".", "path_to_datasets", "(", ")", ",", "'Projective'", ",", "'{}.npz'", ")", "\n", "\n", "# Get conf parameters", "\n", "if", "scan", "is", "None", ":", "\n", "        ", "scan", "=", "conf", ".", "get_string", "(", "'dataset.scan'", ")", "\n", "", "use_gt", "=", "conf", ".", "get_bool", "(", "'dataset.use_gt'", ")", "\n", "\n", "# Get raw data", "\n", "dataset", "=", "np", ".", "load", "(", "dataset_path_format", ".", "format", "(", "scan", ")", ")", "\n", "\n", "# Get bifocal tensors and 2D points", "\n", "M", "=", "dataset", "[", "'M'", "]", "\n", "Ps_gt", "=", "dataset", "[", "'Ps_gt'", "]", "\n", "Ns", "=", "dataset", "[", "'Ns'", "]", "\n", "\n", "if", "use_gt", ":", "\n", "        ", "M", "=", "torch", ".", "from_numpy", "(", "dataset_utils", ".", "correct_matches_global", "(", "M", ",", "Ps_gt", ",", "Ns", ")", ")", "\n", "\n", "", "M", "=", "torch", ".", "from_numpy", "(", "M", ")", ".", "float", "(", ")", "\n", "Ps_gt", "=", "torch", ".", "from_numpy", "(", "Ps_gt", ")", ".", "float", "(", ")", "\n", "Ns", "=", "torch", ".", "from_numpy", "(", "Ns", ")", ".", "float", "(", ")", "\n", "\n", "return", "M", ",", "Ns", ",", "Ps_gt", "\n", "\n"]], "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.datasets.Projective.test_Ps_M": [[45, 48], ["utils.geo_utils.calc_global_reprojection_error", "print", "Ps.numpy", "M.numpy", "Ns.numpy", "numpy.nanmean", "numpy.nanmax"], "function", ["home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.geo_utils.calc_global_reprojection_error"], ["", "def", "test_Ps_M", "(", "Ps", ",", "M", ",", "Ns", ")", ":", "\n", "    ", "global_rep_err", "=", "geo_utils", ".", "calc_global_reprojection_error", "(", "Ps", ".", "numpy", "(", ")", ",", "M", ".", "numpy", "(", ")", ",", "Ns", ".", "numpy", "(", ")", ")", "\n", "print", "(", "\"Reprojection Error: Mean = {}, Max = {}\"", ".", "format", "(", "np", ".", "nanmean", "(", "global_rep_err", ")", ",", "np", ".", "nanmax", "(", "global_rep_err", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.datasets.Projective.test_projective_dataset": [[50, 72], ["os.path.join", "numpy.load", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "print", "Projective.test_Ps_M", "print", "Projective.test_Ps_M", "utils.path_utils.path_to_datasets", "os.path.join.format", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "utils.dataset_utils.correct_matches_global"], "function", ["home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.datasets.Euclidean.test_Ps_M", "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.datasets.Euclidean.test_Ps_M", "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.path_utils.path_to_datasets", "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.dataset_utils.correct_matches_global"], ["", "def", "test_projective_dataset", "(", "scan", ")", ":", "\n", "    ", "dataset_path_format", "=", "os", ".", "path", ".", "join", "(", "path_utils", ".", "path_to_datasets", "(", ")", ",", "'Projective'", ",", "'{}.npz'", ")", "\n", "\n", "# Get raw data", "\n", "dataset", "=", "np", ".", "load", "(", "dataset_path_format", ".", "format", "(", "scan", ")", ")", "\n", "\n", "# Get bifocal tensors and 2D points", "\n", "M", "=", "dataset", "[", "'M'", "]", "\n", "Ps_gt", "=", "dataset", "[", "'Ps_gt'", "]", "\n", "Ns", "=", "dataset", "[", "'Ns'", "]", "\n", "\n", "M_gt", "=", "torch", ".", "from_numpy", "(", "dataset_utils", ".", "correct_matches_global", "(", "M", ",", "Ps_gt", ",", "Ns", ")", ")", ".", "float", "(", ")", "\n", "\n", "M", "=", "torch", ".", "from_numpy", "(", "M", ")", ".", "float", "(", ")", "\n", "Ps_gt", "=", "torch", ".", "from_numpy", "(", "Ps_gt", ")", ".", "float", "(", ")", "\n", "Ns", "=", "torch", ".", "from_numpy", "(", "Ns", ")", ".", "float", "(", ")", "\n", "\n", "print", "(", "\"Test Ps and M\"", ")", "\n", "test_Ps_M", "(", "Ps_gt", ",", "M", ",", "Ns", ")", "\n", "\n", "print", "(", "\"Test Ps and M_gt\"", ")", "\n", "test_Ps_M", "(", "Ps_gt", ",", "M_gt", ",", "Ns", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.datasets.SceneData.SceneData.__init__": [[11, 38], ["utils.dataset_utils.M2sparse", "torch.arange", "torch.transpose", "utils.dataset_utils.get_M_valid_points", "utils.geo_utils.normalize_M().transpose().reshape", "utils.geo_utils.dilutePoint", "torch.inverse", "utils.geo_utils.normalize_M().transpose", "utils.geo_utils.normalize_M"], "methods", ["home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.dataset_utils.M2sparse", "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.dataset_utils.get_M_valid_points", "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.geo_utils.dilutePoint", "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.geo_utils.normalize_M"], ["    ", "def", "__init__", "(", "self", ",", "M", ",", "Ns", ",", "Ps_gt", ",", "scan_name", ",", "dilute_M", "=", "False", ")", ":", "\n", "        ", "n_images", "=", "Ps_gt", ".", "shape", "[", "0", "]", "\n", "\n", "# Set attribute", "\n", "self", ".", "scan_name", "=", "scan_name", "\n", "self", ".", "y", "=", "Ps_gt", "\n", "self", ".", "M", "=", "M", "\n", "self", ".", "Ns", "=", "Ns", "\n", "\n", "# Dilute M", "\n", "if", "dilute_M", ":", "\n", "            ", "self", ".", "M", "=", "geo_utils", ".", "dilutePoint", "(", "M", ")", "\n", "\n", "# M to sparse matrix", "\n", "", "self", ".", "x", "=", "dataset_utils", ".", "M2sparse", "(", "M", ",", "normalize", "=", "True", ",", "Ns", "=", "Ns", ")", "\n", "\n", "# Get image list", "\n", "self", ".", "img_list", "=", "torch", ".", "arange", "(", "n_images", ")", "\n", "\n", "# Prepare Ns inverse", "\n", "self", ".", "Ns_invT", "=", "torch", ".", "transpose", "(", "torch", ".", "inverse", "(", "Ns", ")", ",", "1", ",", "2", ")", "\n", "\n", "# Get valid points", "\n", "self", ".", "valid_pts", "=", "dataset_utils", ".", "get_M_valid_points", "(", "M", ")", "\n", "\n", "# Normalize M", "\n", "self", ".", "norm_M", "=", "geo_utils", ".", "normalize_M", "(", "M", ",", "Ns", ",", "self", ".", "valid_pts", ")", ".", "transpose", "(", "1", ",", "2", ")", ".", "reshape", "(", "n_images", "*", "2", ",", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.datasets.SceneData.SceneData.to": [[39, 48], ["key.startswith", "getattr", "isinstance", "torch.is_tensor", "setattr", "getattr.to"], "methods", ["home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.datasets.SceneData.SceneData.to"], ["", "def", "to", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "for", "key", "in", "self", ".", "__dict__", ":", "\n", "            ", "if", "not", "key", ".", "startswith", "(", "'__'", ")", ":", "\n", "                ", "attr", "=", "getattr", "(", "self", ",", "key", ")", "\n", "#if not callable(attr) and (isinstance(attr, sparse_utils.SparseMat) or torch.is_tensor(attr)):", "\n", "if", "isinstance", "(", "attr", ",", "sparse_utils", ".", "SparseMat", ")", "or", "torch", ".", "is_tensor", "(", "attr", ")", ":", "\n", "                    ", "setattr", "(", "self", ",", "key", ",", "attr", ".", "to", "(", "*", "args", ",", "**", "kwargs", ")", ")", "\n", "\n", "", "", "", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.datasets.SceneData.create_scene_data": [[50, 63], ["conf.get_string", "conf.get_bool", "conf.get_bool", "SceneData.SceneData", "datasets.Euclidean.get_raw_data", "datasets.Projective.get_raw_data"], "function", ["home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.datasets.Euclidean.get_raw_data", "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.datasets.Euclidean.get_raw_data"], ["", "", "def", "create_scene_data", "(", "conf", ")", ":", "\n", "# Init", "\n", "    ", "scan", "=", "conf", ".", "get_string", "(", "'dataset.scan'", ")", "\n", "calibrated", "=", "conf", ".", "get_bool", "(", "'dataset.calibrated'", ")", "\n", "dilute_M", "=", "conf", ".", "get_bool", "(", "'dataset.diluteM'", ",", "default", "=", "False", ")", "\n", "\n", "# Get raw data", "\n", "if", "calibrated", ":", "\n", "        ", "M", ",", "Ns", ",", "Ps_gt", "=", "Euclidean", ".", "get_raw_data", "(", "conf", ",", "scan", ")", "\n", "", "else", ":", "\n", "        ", "M", ",", "Ns", ",", "Ps_gt", "=", "Projective", ".", "get_raw_data", "(", "conf", ",", "scan", ")", "\n", "\n", "", "return", "SceneData", "(", "M", ",", "Ns", ",", "Ps_gt", ",", "scan", ",", "dilute_M", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.datasets.SceneData.sample_data": [[65, 83], ["utils.dataset_utils.sample_indices", "numpy.sort", "torch.from_numpy().squeeze", "torch.from_numpy().squeeze", "SceneData.SceneData", "len", "numpy.concatenate", "warnings.warn", "torch.from_numpy", "torch.from_numpy"], "function", ["home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.dataset_utils.sample_indices"], ["", "def", "sample_data", "(", "data", ",", "num_samples", ",", "adjacent", "=", "True", ")", ":", "\n", "# Get indices", "\n", "    ", "indices", "=", "dataset_utils", ".", "sample_indices", "(", "len", "(", "data", ".", "y", ")", ",", "num_samples", ",", "adjacent", "=", "adjacent", ")", "\n", "M_indices", "=", "np", ".", "sort", "(", "np", ".", "concatenate", "(", "(", "2", "*", "indices", ",", "2", "*", "indices", "+", "1", ")", ")", ")", "\n", "\n", "indices", "=", "torch", ".", "from_numpy", "(", "indices", ")", ".", "squeeze", "(", ")", "\n", "M_indices", "=", "torch", ".", "from_numpy", "(", "M_indices", ")", ".", "squeeze", "(", ")", "\n", "\n", "# Get sampled data", "\n", "y", ",", "Ns", "=", "data", ".", "y", "[", "indices", "]", ",", "data", ".", "Ns", "[", "indices", "]", "\n", "M", "=", "data", ".", "M", "[", "M_indices", "]", "\n", "M", "=", "M", "[", ":", ",", "(", "M", ">", "0", ")", ".", "sum", "(", "dim", "=", "0", ")", ">", "2", "]", "\n", "\n", "sampled_data", "=", "SceneData", "(", "M", ",", "Ns", ",", "y", ",", "data", ".", "scan_name", ")", "\n", "if", "(", "sampled_data", ".", "x", ".", "pts_per_cam", "==", "0", ")", ".", "any", "(", ")", ":", "\n", "        ", "warnings", ".", "warn", "(", "'Cameras with no points for dataset '", "+", "data", ".", "scan_name", ")", "\n", "\n", "", "return", "sampled_data", "\n", "\n"]], "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.datasets.SceneData.create_scene_data_from_list": [[85, 93], ["SceneData.create_scene_data", "data_list.append"], "function", ["home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.datasets.SceneData.create_scene_data"], ["", "def", "create_scene_data_from_list", "(", "scan_names_list", ",", "conf", ")", ":", "\n", "    ", "data_list", "=", "[", "]", "\n", "for", "scan_name", "in", "scan_names_list", ":", "\n", "        ", "conf", "[", "\"dataset\"", "]", "[", "\"scan\"", "]", "=", "scan_name", "\n", "data", "=", "create_scene_data", "(", "conf", ")", "\n", "data_list", ".", "append", "(", "data", ")", "\n", "\n", "", "return", "data_list", "\n", "\n"]], "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.datasets.SceneData.test_dataset": [[95, 139], ["print", "pyhocon.ConfigFactory.from_dict", "SceneData.create_scene_data", "SceneData.test_data", "print", "torch.device", "create_scene_data.to", "print", "print", "pyhocon.ConfigFactory.from_dict", "SceneData.create_scene_data", "SceneData.test_data", "print", "print", "pyhocon.ConfigFactory.from_dict", "SceneData.create_scene_data", "SceneData.test_data", "torch.cuda.is_available"], "function", ["home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.datasets.SceneData.create_scene_data", "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.datasets.SceneData.test_data", "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.datasets.SceneData.SceneData.to", "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.datasets.SceneData.create_scene_data", "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.datasets.SceneData.test_data", "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.datasets.SceneData.create_scene_data", "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.datasets.SceneData.test_data"], ["", "def", "test_dataset", "(", ")", ":", "\n", "# Prepare configuration", "\n", "    ", "dataset_dict", "=", "{", "\"images_path\"", ":", "\"/home/labs/waic/hodaya/PycharmProjects/GNN-for-SFM/datasets/images/\"", ",", "\n", "\"normalize_pts\"", ":", "True", ",", "\n", "\"normalize_f\"", ":", "True", ",", "\n", "\"use_gt\"", ":", "False", ",", "\n", "\"calibrated\"", ":", "False", ",", "\n", "\"scan\"", ":", "\"Alcatraz Courtyard\"", ",", "\n", "\"edge_min_inliers\"", ":", "30", ",", "\n", "\"use_all_edges\"", ":", "True", ",", "\n", "}", "\n", "\n", "train_dict", "=", "{", "\"infinity_pts_margin\"", ":", "1e-4", ",", "\n", "\"hinge_loss_weight\"", ":", "1", ",", "\n", "}", "\n", "loss_dict", "=", "{", "\"infinity_pts_margin\"", ":", "1e-4", ",", "\n", "\"normalize_grad\"", ":", "False", ",", "\n", "\"hinge_loss\"", ":", "True", ",", "\n", "\"hinge_loss_weight\"", ":", "1", "\n", "}", "\n", "conf_dict", "=", "{", "\"dataset\"", ":", "dataset_dict", ",", "\"loss\"", ":", "loss_dict", "}", "\n", "\n", "print", "(", "\"Test projective\"", ")", "\n", "conf", "=", "ConfigFactory", ".", "from_dict", "(", "conf_dict", ")", "\n", "data", "=", "create_scene_data", "(", "conf", ")", "\n", "test_data", "(", "data", ",", "conf", ")", "\n", "\n", "print", "(", "'Test move to device'", ")", "\n", "device", "=", "torch", ".", "device", "(", "'cuda'", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "'cpu'", ")", "\n", "new_data", "=", "data", ".", "to", "(", "device", ")", "\n", "\n", "print", "(", "os", ".", "linesep", ")", "\n", "print", "(", "\"Test Euclidean\"", ")", "\n", "conf", "=", "ConfigFactory", ".", "from_dict", "(", "conf_dict", ")", "\n", "conf", "[", "\"dataset\"", "]", "[", "\"calibrated\"", "]", "=", "True", "\n", "data", "=", "create_scene_data", "(", "conf", ")", "\n", "test_data", "(", "data", ",", "conf", ")", "\n", "\n", "print", "(", "os", ".", "linesep", ")", "\n", "print", "(", "\"Test use_gt GT\"", ")", "\n", "conf", "=", "ConfigFactory", ".", "from_dict", "(", "conf_dict", ")", "\n", "conf", "[", "\"dataset\"", "]", "[", "\"use_gt\"", "]", "=", "True", "\n", "data", "=", "create_scene_data", "(", "conf", ")", "\n", "test_data", "(", "data", ",", "conf", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.datasets.SceneData.test_data": [[141, 151], ["loss_functions.ESFMLoss", "SceneData.prepare_cameras_for_loss_func", "SceneData.prepare_cameras_for_loss_func", "print", "print", "torch.rand", "loss_functions.ESFMLoss.", "loss_functions.ESFMLoss."], "function", ["home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.datasets.SceneData.prepare_cameras_for_loss_func", "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.datasets.SceneData.prepare_cameras_for_loss_func"], ["", "def", "test_data", "(", "data", ",", "conf", ")", ":", "\n", "    ", "import", "loss_functions", "\n", "\n", "# Test Losses of GT and random on data", "\n", "repLoss", "=", "loss_functions", ".", "ESFMLoss", "(", "conf", ")", "\n", "cams_gt", "=", "prepare_cameras_for_loss_func", "(", "data", ".", "y", ",", "data", ")", "\n", "cams_rand", "=", "prepare_cameras_for_loss_func", "(", "torch", ".", "rand", "(", "data", ".", "y", ".", "shape", ")", ",", "data", ")", "\n", "\n", "print", "(", "\"Loss for GT: Reprojection = {}\"", ".", "format", "(", "repLoss", "(", "cams_gt", ",", "data", ")", ")", ")", "\n", "print", "(", "\"Loss for rand: Reprojection = {}\"", ".", "format", "(", "repLoss", "(", "cams_rand", ",", "data", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.datasets.SceneData.prepare_cameras_for_loss_func": [[153, 159], ["torch.inverse().transpose", "torch.bmm().squeeze", "torch.from_numpy().float", "torch.bmm", "torch.inverse", "torch.bmm", "torch.from_numpy", "Ps[].unsqueeze", "utils.geo_utils.n_view_triangulation", "torch.inverse().transpose.transpose", "Ps.numpy", "data.M.numpy", "data.Ns.numpy"], "function", ["home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.geo_utils.n_view_triangulation"], ["", "def", "prepare_cameras_for_loss_func", "(", "Ps", ",", "data", ")", ":", "\n", "    ", "Vs_invT", "=", "Ps", "[", ":", ",", "0", ":", "3", ",", "0", ":", "3", "]", "\n", "Vs", "=", "torch", ".", "inverse", "(", "Vs_invT", ")", ".", "transpose", "(", "1", ",", "2", ")", "\n", "ts", "=", "torch", ".", "bmm", "(", "-", "Vs", ".", "transpose", "(", "1", ",", "2", ")", ",", "Ps", "[", ":", ",", "0", ":", "3", ",", "3", "]", ".", "unsqueeze", "(", "dim", "=", "-", "1", ")", ")", ".", "squeeze", "(", ")", "\n", "pts_3D", "=", "torch", ".", "from_numpy", "(", "geo_utils", ".", "n_view_triangulation", "(", "Ps", ".", "numpy", "(", ")", ",", "data", ".", "M", ".", "numpy", "(", ")", ",", "data", ".", "Ns", ".", "numpy", "(", ")", ")", ")", ".", "float", "(", ")", "\n", "return", "{", "\"Ps\"", ":", "torch", ".", "bmm", "(", "data", ".", "Ns", ",", "Ps", ")", ",", "\"pts3D\"", ":", "pts_3D", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.datasets.SceneData.get_subset": [[161, 187], ["utils.dataset_utils.get_M_valid_points", "dataset_utils.get_M_valid_points.sum().argmax().item", "valid_pts[].clone", "range", "print", "print", "SceneData.SceneData", "shared_pts.sum().argmax().item", "indices.append", "torch.sort", "torch.sort", "dataset_utils.get_M_valid_points.sum().argmax", "valid_pts[].clone.expand", "torch.tensor", "torch.cat", "shared_pts.sum().argmax", "dataset_utils.get_M_valid_points.sum", "shared_pts.sum"], "function", ["home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.dataset_utils.get_M_valid_points", "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.sparse_utils.SparseMat.sum", "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.sparse_utils.SparseMat.sum"], ["", "def", "get_subset", "(", "data", ",", "subset_size", ")", ":", "\n", "# Get subset indices", "\n", "    ", "valid_pts", "=", "dataset_utils", ".", "get_M_valid_points", "(", "data", ".", "M", ")", "\n", "n_cams", "=", "valid_pts", ".", "shape", "[", "0", "]", "\n", "\n", "first_idx", "=", "valid_pts", ".", "sum", "(", "dim", "=", "1", ")", ".", "argmax", "(", ")", ".", "item", "(", ")", "\n", "curr_pts", "=", "valid_pts", "[", "first_idx", "]", ".", "clone", "(", ")", "\n", "valid_pts", "[", "first_idx", "]", "=", "False", "\n", "indices", "=", "[", "first_idx", "]", "\n", "\n", "for", "i", "in", "range", "(", "subset_size", "-", "1", ")", ":", "\n", "        ", "shared_pts", "=", "curr_pts", ".", "expand", "(", "n_cams", ",", "-", "1", ")", "&", "valid_pts", "\n", "next_idx", "=", "shared_pts", ".", "sum", "(", "dim", "=", "1", ")", ".", "argmax", "(", ")", ".", "item", "(", ")", "\n", "curr_pts", "=", "curr_pts", "|", "valid_pts", "[", "next_idx", "]", "\n", "valid_pts", "[", "next_idx", "]", "=", "False", "\n", "indices", ".", "append", "(", "next_idx", ")", "\n", "\n", "", "print", "(", "\"Cameras are:\"", ")", "\n", "print", "(", "indices", ")", "\n", "\n", "indices", "=", "torch", ".", "sort", "(", "torch", ".", "tensor", "(", "indices", ")", ")", "[", "0", "]", "\n", "M_indices", "=", "torch", ".", "sort", "(", "torch", ".", "cat", "(", "(", "2", "*", "indices", ",", "2", "*", "indices", "+", "1", ")", ")", ")", "[", "0", "]", "\n", "y", ",", "Ns", "=", "data", ".", "y", "[", "indices", "]", ",", "data", ".", "Ns", "[", "indices", "]", "\n", "M", "=", "data", ".", "M", "[", "M_indices", "]", "\n", "M", "=", "M", "[", ":", ",", "(", "M", ">", "0", ")", ".", "sum", "(", "dim", "=", "0", ")", ">", "2", "]", "\n", "return", "SceneData", "(", "M", ",", "Ns", ",", "y", ",", "data", ".", "scan_name", "+", "\"_{}\"", ".", "format", "(", "subset_size", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.datasets.Euclidean.get_raw_data": [[11, 46], ["os.path.join", "conf.get_bool", "numpy.load", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "utils.path_utils.path_to_datasets", "conf.get_string", "os.path.join.format", "torch.from_numpy().float", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "utils.dataset_utils.correct_matches_global"], "function", ["home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.path_utils.path_to_datasets", "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.dataset_utils.correct_matches_global"], ["def", "get_raw_data", "(", "conf", ",", "scan", ")", ":", "\n", "    ", "\"\"\"\n    :param conf:\n    :return:\n    M - Points Matrix (2mxn)\n    Ns - Inversed Calibration matrix (Ks-1) (mx3x3)\n    Ps_gt - GT projection matrices (mx3x4)\n    NBs - Normzlize Bifocal Tensor (En) (3mx3m)\n    triplets\n    \"\"\"", "\n", "\n", "# Init", "\n", "dataset_path_format", "=", "os", ".", "path", ".", "join", "(", "utils", ".", "path_utils", ".", "path_to_datasets", "(", ")", ",", "'Euclidean'", ",", "'{}.npz'", ")", "\n", "\n", "# Get conf parameters", "\n", "if", "scan", "is", "None", ":", "\n", "        ", "scan", "=", "conf", ".", "get_string", "(", "'dataset.scan'", ")", "\n", "", "use_gt", "=", "conf", ".", "get_bool", "(", "'dataset.use_gt'", ")", "\n", "\n", "# Get raw data", "\n", "dataset", "=", "np", ".", "load", "(", "dataset_path_format", ".", "format", "(", "scan", ")", ")", "\n", "\n", "# Get bifocal tensors and 2D points", "\n", "M", "=", "dataset", "[", "'M'", "]", "\n", "Ps_gt", "=", "dataset", "[", "'Ps_gt'", "]", "\n", "Ns", "=", "dataset", "[", "'Ns'", "]", "\n", "\n", "if", "use_gt", ":", "\n", "        ", "M", "=", "torch", ".", "from_numpy", "(", "dataset_utils", ".", "correct_matches_global", "(", "M", ",", "Ps_gt", ",", "Ns", ")", ")", ".", "float", "(", ")", "\n", "\n", "", "M", "=", "torch", ".", "from_numpy", "(", "M", ")", ".", "float", "(", ")", "\n", "Ps_gt", "=", "torch", ".", "from_numpy", "(", "Ps_gt", ")", ".", "float", "(", ")", "\n", "Ns", "=", "torch", ".", "from_numpy", "(", "Ns", ")", ".", "float", "(", ")", "\n", "\n", "return", "M", ",", "Ns", ",", "Ps_gt", "\n", "\n"]], "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.datasets.Euclidean.test_Ps_M": [[48, 51], ["utils.geo_utils.calc_global_reprojection_error", "print", "Ps.numpy", "M.numpy", "Ns.numpy", "numpy.nanmean", "numpy.nanmax"], "function", ["home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.geo_utils.calc_global_reprojection_error"], ["", "def", "test_Ps_M", "(", "Ps", ",", "M", ",", "Ns", ")", ":", "\n", "    ", "global_rep_err", "=", "geo_utils", ".", "calc_global_reprojection_error", "(", "Ps", ".", "numpy", "(", ")", ",", "M", ".", "numpy", "(", ")", ",", "Ns", ".", "numpy", "(", ")", ")", "\n", "print", "(", "\"Reprojection Error: Mean = {}, Max = {}\"", ".", "format", "(", "np", ".", "nanmean", "(", "global_rep_err", ")", ",", "np", ".", "nanmax", "(", "global_rep_err", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.datasets.Euclidean.test_euclidean_dataset": [[53, 75], ["os.path.join", "numpy.load", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "print", "Euclidean.test_Ps_M", "print", "Euclidean.test_Ps_M", "utils.path_utils.path_to_datasets", "os.path.join.format", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "utils.dataset_utils.correct_matches_global"], "function", ["home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.datasets.Euclidean.test_Ps_M", "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.datasets.Euclidean.test_Ps_M", "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.path_utils.path_to_datasets", "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.dataset_utils.correct_matches_global"], ["", "def", "test_euclidean_dataset", "(", "scan", ")", ":", "\n", "    ", "dataset_path_format", "=", "os", ".", "path", ".", "join", "(", "utils", ".", "path_utils", ".", "path_to_datasets", "(", ")", ",", "'Euclidean'", ",", "'{}.npz'", ")", "\n", "\n", "# Get raw data", "\n", "dataset", "=", "np", ".", "load", "(", "dataset_path_format", ".", "format", "(", "scan", ")", ")", "\n", "\n", "# Get bifocal tensors and 2D points", "\n", "M", "=", "dataset", "[", "'M'", "]", "\n", "Ps_gt", "=", "dataset", "[", "'Ps_gt'", "]", "\n", "Ns", "=", "dataset", "[", "'Ns'", "]", "\n", "\n", "M_gt", "=", "torch", ".", "from_numpy", "(", "dataset_utils", ".", "correct_matches_global", "(", "M", ",", "Ps_gt", ",", "Ns", ")", ")", ".", "float", "(", ")", "\n", "\n", "M", "=", "torch", ".", "from_numpy", "(", "M", ")", ".", "float", "(", ")", "\n", "Ps_gt", "=", "torch", ".", "from_numpy", "(", "Ps_gt", ")", ".", "float", "(", ")", "\n", "Ns", "=", "torch", ".", "from_numpy", "(", "Ns", ")", ".", "float", "(", ")", "\n", "\n", "print", "(", "\"Test Ps and M\"", ")", "\n", "test_Ps_M", "(", "Ps_gt", ",", "M", ",", "Ns", ")", "\n", "\n", "print", "(", "\"Test Ps and M_gt\"", ")", "\n", "test_Ps_M", "(", "Ps_gt", ",", "M_gt", ",", "Ns", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.models.baseNet.BaseNet.__init__": [[9, 29], ["super().__init__", "conf.get_bool", "conf.get_string", "conf.get_string", "torch.nn.Softsign", "print", "print", "exit"], "methods", ["home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.models.SetOfSet.SetOfSetNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "conf", ")", ":", "\n", "        ", "super", "(", "BaseNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "calibrated", "=", "conf", ".", "get_bool", "(", "'dataset.calibrated'", ")", "\n", "self", ".", "normalize_output", "=", "conf", ".", "get_string", "(", "'model.normalize_output'", ",", "default", "=", "None", ")", "\n", "self", ".", "rot_representation", "=", "conf", ".", "get_string", "(", "'model.rot_representation'", ",", "default", "=", "'quat'", ")", "\n", "self", ".", "soft_sign", "=", "torch", ".", "nn", ".", "Softsign", "(", ")", "\n", "\n", "if", "self", ".", "calibrated", "and", "self", ".", "rot_representation", "==", "'6d'", ":", "\n", "            ", "print", "(", "'rot representation: '", "+", "self", ".", "rot_representation", ")", "\n", "self", ".", "out_channels", "=", "9", "\n", "", "elif", "self", ".", "calibrated", "and", "self", ".", "rot_representation", "==", "'quat'", ":", "\n", "            ", "self", ".", "out_channels", "=", "7", "\n", "", "elif", "self", ".", "calibrated", "and", "self", ".", "rot_representation", "==", "'svd'", ":", "\n", "            ", "self", ".", "out_channels", "=", "12", "\n", "", "elif", "not", "self", ".", "calibrated", ":", "\n", "            ", "self", ".", "out_channels", "=", "12", "\n", "", "else", ":", "\n", "            ", "print", "(", "\"Illegal output format\"", ")", "\n", "exit", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.models.baseNet.BaseNet.forward": [[30, 33], ["None"], "methods", ["None"], ["", "", "@", "abc", ".", "abstractmethod", "\n", "def", "forward", "(", "self", ",", "data", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.models.baseNet.BaseNet.extract_model_outputs": [[34, 74], ["utils.geo_utils.ones_padding", "torch.cat", "x.reshape", "pytorch3d.transforms.rotation_6d_to_matrix", "x[].reshape", "utils.geo_utils.project_to_rot", "minRTts.unsqueeze", "torch.sign", "Ps[].norm", "scale.reshape", "pytorch3d.transforms.quaternion_to_matrix", "print", "exit", "Ps[].det", "baseNet.BaseNet.soft_sign", "Ps[].norm", "scale.reshape", "x.reshape.norm", "Ps[].det"], "methods", ["home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.geo_utils.ones_padding", "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.geo_utils.project_to_rot"], ["", "def", "extract_model_outputs", "(", "self", ",", "x", ",", "pts_3D", ",", "data", ")", ":", "\n", "# Get points", "\n", "        ", "pts_3D", "=", "geo_utils", ".", "ones_padding", "(", "pts_3D", ")", "\n", "\n", "# Get calibrated predictions", "\n", "if", "self", ".", "calibrated", ":", "\n", "# Get rotation", "\n", "            ", "if", "self", ".", "rot_representation", "==", "'6d'", ":", "\n", "                ", "RTs", "=", "py3d_trans", ".", "rotation_6d_to_matrix", "(", "x", "[", ":", ",", ":", "6", "]", ")", "\n", "", "elif", "self", ".", "rot_representation", "==", "'svd'", ":", "\n", "                ", "m", "=", "x", "[", ":", ",", ":", "9", "]", ".", "reshape", "(", "-", "1", ",", "3", ",", "3", ")", "\n", "RTs", "=", "geo_utils", ".", "project_to_rot", "(", "m", ")", "\n", "", "elif", "self", ".", "rot_representation", "==", "'quat'", ":", "\n", "                ", "RTs", "=", "py3d_trans", ".", "quaternion_to_matrix", "(", "x", "[", ":", ",", ":", "4", "]", ")", "\n", "", "else", ":", "\n", "                ", "print", "(", "\"Illegal output format\"", ")", "\n", "exit", "(", ")", "\n", "\n", "# Get translation", "\n", "", "minRTts", "=", "x", "[", ":", ",", "-", "3", ":", "]", "\n", "\n", "# Get camera matrix", "\n", "Ps", "=", "torch", ".", "cat", "(", "(", "RTs", ",", "minRTts", ".", "unsqueeze", "(", "dim", "=", "-", "1", ")", ")", ",", "dim", "=", "-", "1", ")", "\n", "\n", "", "else", ":", "# Projective", "\n", "            ", "Ps", "=", "x", ".", "reshape", "(", "-", "1", ",", "3", ",", "4", ")", "\n", "\n", "# Normalize predictions", "\n", "if", "self", ".", "normalize_output", "==", "\"Chirality\"", ":", "\n", "                ", "scale", "=", "torch", ".", "sign", "(", "Ps", "[", ":", ",", "0", ":", "3", ",", "0", ":", "3", "]", ".", "det", "(", ")", ")", "/", "Ps", "[", ":", ",", "2", ",", "0", ":", "3", "]", ".", "norm", "(", "dim", "=", "1", ")", "\n", "Ps", "=", "Ps", "*", "scale", ".", "reshape", "(", "-", "1", ",", "1", ",", "1", ")", "\n", "", "elif", "self", ".", "normalize_output", "==", "\"Differentiable Chirality\"", ":", "\n", "                ", "scale", "=", "self", ".", "soft_sign", "(", "Ps", "[", ":", ",", "0", ":", "3", ",", "0", ":", "3", "]", ".", "det", "(", ")", "*", "10e3", ")", "/", "Ps", "[", ":", ",", "2", ",", "0", ":", "3", "]", ".", "norm", "(", "dim", "=", "1", ")", "\n", "Ps", "=", "Ps", "*", "scale", ".", "reshape", "(", "-", "1", ",", "1", ",", "1", ")", "\n", "", "elif", "self", ".", "normalize_output", "==", "\"Frobenius\"", ":", "\n", "                ", "Ps", "=", "Ps", "/", "Ps", ".", "norm", "(", "dim", "=", "(", "1", ",", "2", ")", ",", "p", "=", "'fro'", ",", "keepdim", "=", "True", ")", "\n", "\n", "# The model outputs a normalized camera! Meaning from world coordinates to camera coordinates, not to pixels in the image.", "\n", "", "", "pred_cams", "=", "{", "\"Ps_norm\"", ":", "Ps", ",", "\"pts3D\"", ":", "pts_3D", "}", "\n", "return", "pred_cams", "\n", "\n"]], "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.models.layers.Parameter3DPts.__init__": [[31, 38], ["super().__init__", "torch.normal", "torch.nn.Parameter"], "methods", ["home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.models.SetOfSet.SetOfSetNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "n_pts", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "# Init points randomly", "\n", "pts_3d", "=", "torch", ".", "normal", "(", "mean", "=", "0", ",", "std", "=", "0.1", ",", "size", "=", "(", "3", ",", "n_pts", ")", ",", "requires_grad", "=", "True", ")", "\n", "\n", "self", ".", "pts_3d", "=", "torch", ".", "nn", ".", "Parameter", "(", "pts_3d", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.models.layers.Parameter3DPts.forward": [[39, 41], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "pts_3d", "\n", "\n"]], "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.models.layers.SetOfSetLayer.__init__": [[44, 51], ["torch.nn.Module.__init__", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.models.SetOfSet.SetOfSetNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "d_in", ",", "d_out", ")", ":", "\n", "        ", "super", "(", "SetOfSetLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# n is the number of points and m is the number of cameras", "\n", "self", ".", "lin_all", "=", "Linear", "(", "d_in", ",", "d_out", ")", "\n", "self", ".", "lin_n", "=", "Linear", "(", "d_in", ",", "d_out", ")", "\n", "self", ".", "lin_m", "=", "Linear", "(", "d_in", ",", "d_out", ")", "\n", "self", ".", "lin_both", "=", "Linear", "(", "d_in", ",", "d_out", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.models.layers.SetOfSetLayer.forward": [[52, 68], ["layers.SetOfSetLayer.lin_all", "x.mean", "layers.SetOfSetLayer.lin_n", "x.mean", "layers.SetOfSetLayer.lin_m", "layers.SetOfSetLayer.lin_both", "utils.sparse_utils.SparseMat", "x.values.mean"], "methods", ["home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.sparse_utils.SparseMat.mean", "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.sparse_utils.SparseMat.mean", "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.sparse_utils.SparseMat.mean"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# x is [m,n,d] sparse matrix", "\n", "        ", "out_all", "=", "self", ".", "lin_all", "(", "x", ".", "values", ")", "# [nnz,d_in] -> [nnz,d_out]", "\n", "\n", "mean_rows", "=", "x", ".", "mean", "(", "dim", "=", "0", ")", "# [m,n,d_in] -> [n,d_in]", "\n", "out_rows", "=", "self", ".", "lin_n", "(", "mean_rows", ")", "# [n,d_in] -> [n,d_out]", "\n", "\n", "mean_cols", "=", "x", ".", "mean", "(", "dim", "=", "1", ")", "# [m,n,d_in] -> [m,d_in]", "\n", "out_cols", "=", "self", ".", "lin_m", "(", "mean_cols", ")", "# [m,d_in] -> [m,d_out]", "\n", "\n", "out_both", "=", "self", ".", "lin_both", "(", "x", ".", "values", ".", "mean", "(", "dim", "=", "0", ",", "keepdim", "=", "True", ")", ")", "# [1,d_in] -> [1,d_out]", "\n", "\n", "new_features", "=", "(", "out_all", "+", "out_rows", "[", "x", ".", "indices", "[", "1", "]", ",", ":", "]", "+", "out_cols", "[", "x", ".", "indices", "[", "0", "]", ",", ":", "]", "+", "out_both", ")", "/", "4", "# [nnz,d_out]", "\n", "new_shape", "=", "(", "x", ".", "shape", "[", "0", "]", ",", "x", ".", "shape", "[", "1", "]", ",", "new_features", ".", "shape", "[", "1", "]", ")", "\n", "\n", "return", "SparseMat", "(", "new_features", ",", "x", ".", "indices", ",", "x", ".", "cam_per_pts", ",", "x", ".", "pts_per_cam", ",", "new_shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.models.layers.ProjLayer.__init__": [[71, 75], ["torch.nn.Module.__init__", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.models.SetOfSet.SetOfSetNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "d_in", ",", "d_out", ")", ":", "\n", "        ", "super", "(", "ProjLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# n is the number of points and m is the number of cameras", "\n", "self", ".", "lin_all", "=", "Linear", "(", "d_in", ",", "d_out", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.models.layers.ProjLayer.forward": [[76, 81], ["layers.ProjLayer.lin_all", "utils.sparse_utils.SparseMat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# x is [m,n,d] sparse matrix", "\n", "        ", "new_features", "=", "self", ".", "lin_all", "(", "x", ".", "values", ")", "# [nnz,d_in] -> [nnz,d_out]", "\n", "new_shape", "=", "(", "x", ".", "shape", "[", "0", "]", ",", "x", ".", "shape", "[", "1", "]", ",", "new_features", ".", "shape", "[", "1", "]", ")", "\n", "return", "SparseMat", "(", "new_features", ",", "x", ".", "indices", ",", "x", ".", "cam_per_pts", ",", "x", ".", "pts_per_cam", ",", "new_shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.models.layers.NormalizationLayer.forward": [[84, 89], ["utils.sparse_utils.SparseMat", "features.mean"], "methods", ["home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.sparse_utils.SparseMat.mean"], ["    ", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "features", "=", "x", ".", "values", "\n", "norm_features", "=", "features", "-", "features", ".", "mean", "(", "dim", "=", "0", ",", "keepdim", "=", "True", ")", "\n", "# norm_features = norm_features / norm_features.std(dim=0, keepdim=True)", "\n", "return", "SparseMat", "(", "norm_features", ",", "x", ".", "indices", ",", "x", ".", "cam_per_pts", ",", "x", ".", "pts_per_cam", ",", "x", ".", "shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.models.layers.ActivationLayer.__init__": [[92, 95], ["torch.nn.Module.__init__", "torch.nn.ReLU"], "methods", ["home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.models.SetOfSet.SetOfSetNet.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "ActivationLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "relu", "=", "ReLU", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.models.layers.ActivationLayer.forward": [[96, 99], ["layers.ActivationLayer.relu", "utils.sparse_utils.SparseMat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "new_features", "=", "self", ".", "relu", "(", "x", ".", "values", ")", "\n", "return", "SparseMat", "(", "new_features", ",", "x", ".", "indices", ",", "x", ".", "cam_per_pts", ",", "x", ".", "pts_per_cam", ",", "x", ".", "shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.models.layers.IdentityLayer.forward": [[102, 104], ["None"], "methods", ["None"], ["    ", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.models.layers.EmbeddingLayer.__init__": [[107, 113], ["torch.nn.Module.__init__", "utils.pos_enc_utils.get_embedder", "torch.nn.Identity"], "methods", ["home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.models.SetOfSet.SetOfSetNet.__init__", "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.pos_enc_utils.get_embedder"], ["    ", "def", "__init__", "(", "self", ",", "multires", ",", "in_dim", ")", ":", "\n", "        ", "super", "(", "EmbeddingLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "multires", ">", "0", ":", "\n", "            ", "self", ".", "embed", ",", "self", ".", "d_out", "=", "get_embedder", "(", "multires", ",", "in_dim", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "embed", ",", "self", ".", "d_out", "=", "(", "Identity", "(", ")", ",", "in_dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.models.layers.EmbeddingLayer.forward": [[114, 118], ["layers.EmbeddingLayer.embed", "utils.sparse_utils.SparseMat"], "methods", ["home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.pos_enc_utils.Embedder.embed"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "embeded_features", "=", "self", ".", "embed", "(", "x", ".", "values", ")", "\n", "new_shape", "=", "(", "x", ".", "shape", "[", "0", "]", ",", "x", ".", "shape", "[", "1", "]", ",", "embeded_features", ".", "shape", "[", "1", "]", ")", "\n", "return", "SparseMat", "(", "embeded_features", ",", "x", ".", "indices", ",", "x", ".", "cam_per_pts", ",", "x", ".", "pts_per_cam", ",", "new_shape", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.models.layers.get_linear_layers": [[7, 28], ["range", "layers.append", "torch.nn.Sequential", "layers.append", "layers.append", "torch.nn.Linear", "layers.append", "len", "torch.nn.Linear", "layers.append", "torch.nn.ReLU", "layers.append", "torch.nn.ReLU", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d"], "function", ["None"], ["def", "get_linear_layers", "(", "feats", ",", "final_layer", "=", "False", ",", "batchnorm", "=", "True", ")", ":", "\n", "    ", "layers", "=", "[", "]", "\n", "\n", "# Add layers", "\n", "for", "i", "in", "range", "(", "len", "(", "feats", ")", "-", "2", ")", ":", "\n", "        ", "layers", ".", "append", "(", "Linear", "(", "feats", "[", "i", "]", ",", "feats", "[", "i", "+", "1", "]", ")", ")", "\n", "\n", "if", "batchnorm", ":", "\n", "            ", "layers", ".", "append", "(", "BatchNorm1d", "(", "feats", "[", "i", "+", "1", "]", ",", "track_running_stats", "=", "False", ")", ")", "\n", "\n", "", "layers", ".", "append", "(", "ReLU", "(", ")", ")", "\n", "\n", "# Add final layer", "\n", "", "layers", ".", "append", "(", "Linear", "(", "feats", "[", "-", "2", "]", ",", "feats", "[", "-", "1", "]", ")", ")", "\n", "if", "not", "final_layer", ":", "\n", "        ", "if", "batchnorm", ":", "\n", "            ", "layers", ".", "append", "(", "BatchNorm1d", "(", "feats", "[", "-", "1", "]", ",", "track_running_stats", "=", "False", ")", ")", "\n", "\n", "", "layers", ".", "append", "(", "ReLU", "(", ")", ")", "\n", "\n", "", "return", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.models.SetOfSet.SetOfSetBlock.__init__": [[8, 26], ["torch.nn.Module.__init__", "conf.get_int", "conf.get_bool", "modules.extend", "range", "torch.nn.Sequential", "ActivationLayer", "modules.extend", "SetOfSetLayer", "NormalizationLayer", "IdentityLayer", "torch.nn.Sequential", "ActivationLayer", "SetOfSetLayer", "NormalizationLayer", "ProjLayer", "NormalizationLayer"], "methods", ["home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.models.SetOfSet.SetOfSetNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "d_in", ",", "d_out", ",", "conf", ")", ":", "\n", "        ", "super", "(", "SetOfSetBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "block_size", "=", "conf", ".", "get_int", "(", "\"model.block_size\"", ")", "\n", "self", ".", "use_skip", "=", "conf", ".", "get_bool", "(", "\"model.use_skip\"", ")", "\n", "\n", "modules", "=", "[", "]", "\n", "modules", ".", "extend", "(", "[", "SetOfSetLayer", "(", "d_in", ",", "d_out", ")", ",", "NormalizationLayer", "(", ")", "]", ")", "\n", "for", "i", "in", "range", "(", "1", ",", "self", ".", "block_size", ")", ":", "\n", "            ", "modules", ".", "extend", "(", "[", "ActivationLayer", "(", ")", ",", "SetOfSetLayer", "(", "d_out", ",", "d_out", ")", ",", "NormalizationLayer", "(", ")", "]", ")", "\n", "", "self", ".", "layers", "=", "nn", ".", "Sequential", "(", "*", "modules", ")", "\n", "\n", "self", ".", "final_act", "=", "ActivationLayer", "(", ")", "\n", "\n", "if", "self", ".", "use_skip", ":", "\n", "            ", "if", "d_in", "==", "d_out", ":", "\n", "                ", "self", ".", "skip", "=", "IdentityLayer", "(", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "skip", "=", "nn", ".", "Sequential", "(", "ProjLayer", "(", "d_in", ",", "d_out", ")", ",", "NormalizationLayer", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.models.SetOfSet.SetOfSetBlock.forward": [[27, 35], ["SetOfSet.SetOfSetBlock.layers", "SetOfSet.SetOfSetBlock.final_act", "SetOfSet.SetOfSetBlock.skip"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# x is [m,n,d] sparse matrix", "\n", "        ", "xl", "=", "self", ".", "layers", "(", "x", ")", "\n", "if", "self", ".", "use_skip", ":", "\n", "            ", "xl", "=", "self", ".", "skip", "(", "x", ")", "+", "xl", "\n", "\n", "", "out", "=", "self", ".", "final_act", "(", "xl", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.models.SetOfSet.SetOfSetNet.__init__": [[38, 57], ["models.baseNet.BaseNet.__init__", "conf.get_int", "conf.get_int", "conf.get_int", "EmbeddingLayer", "torch.nn.ModuleList", "range", "get_linear_layers", "get_linear_layers", "SetOfSet.SetOfSetNet.equivariant_blocks.append", "SetOfSet.SetOfSetBlock", "SetOfSet.SetOfSetBlock"], "methods", ["home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.models.SetOfSet.SetOfSetNet.__init__", "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.models.layers.get_linear_layers", "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.models.layers.get_linear_layers"], ["    ", "def", "__init__", "(", "self", ",", "conf", ")", ":", "\n", "        ", "super", "(", "SetOfSetNet", ",", "self", ")", ".", "__init__", "(", "conf", ")", "\n", "# n is the number of points and m is the number of cameras", "\n", "num_blocks", "=", "conf", ".", "get_int", "(", "'model.num_blocks'", ")", "\n", "num_feats", "=", "conf", ".", "get_int", "(", "'model.num_features'", ")", "\n", "multires", "=", "conf", ".", "get_int", "(", "'model.multires'", ")", "\n", "\n", "n_d_out", "=", "3", "\n", "m_d_out", "=", "self", ".", "out_channels", "\n", "d_in", "=", "2", "\n", "\n", "self", ".", "embed", "=", "EmbeddingLayer", "(", "multires", ",", "d_in", ")", "\n", "\n", "self", ".", "equivariant_blocks", "=", "torch", ".", "nn", ".", "ModuleList", "(", "[", "SetOfSetBlock", "(", "self", ".", "embed", ".", "d_out", ",", "num_feats", ",", "conf", ")", "]", ")", "\n", "for", "i", "in", "range", "(", "num_blocks", "-", "1", ")", ":", "\n", "            ", "self", ".", "equivariant_blocks", ".", "append", "(", "SetOfSetBlock", "(", "num_feats", ",", "num_feats", ",", "conf", ")", ")", "\n", "\n", "", "self", ".", "m_net", "=", "get_linear_layers", "(", "[", "num_feats", "]", "*", "2", "+", "[", "m_d_out", "]", ",", "final_layer", "=", "True", ",", "batchnorm", "=", "False", ")", "\n", "self", ".", "n_net", "=", "get_linear_layers", "(", "[", "num_feats", "]", "*", "2", "+", "[", "n_d_out", "]", ",", "final_layer", "=", "True", ",", "batchnorm", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.models.SetOfSet.SetOfSetNet.forward": [[58, 75], ["SetOfSet.SetOfSetNet.embed", "eq_block.mean", "SetOfSet.SetOfSetNet.m_net", "eq_block.mean", "SetOfSet.SetOfSetNet.extract_model_outputs", "eq_block", "SetOfSet.SetOfSetNet.n_net"], "methods", ["home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.pos_enc_utils.Embedder.embed", "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.sparse_utils.SparseMat.mean", "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.utils.sparse_utils.SparseMat.mean", "home.repos.pwc.inspect_result.drormoran_Equivariant-SFM.models.baseNet.BaseNet.extract_model_outputs"], ["", "def", "forward", "(", "self", ",", "data", ")", ":", "\n", "        ", "x", "=", "data", ".", "x", "# x is [m,n,d] sparse matrix", "\n", "x", "=", "self", ".", "embed", "(", "x", ")", "\n", "for", "eq_block", "in", "self", ".", "equivariant_blocks", ":", "\n", "            ", "x", "=", "eq_block", "(", "x", ")", "# [m,n,d_in] -> [m,n,d_out]", "\n", "\n", "# Cameras predictions", "\n", "", "m_input", "=", "x", ".", "mean", "(", "dim", "=", "1", ")", "# [m,d_out]", "\n", "m_out", "=", "self", ".", "m_net", "(", "m_input", ")", "# [m, d_m]", "\n", "\n", "# Points predictions", "\n", "n_input", "=", "x", ".", "mean", "(", "dim", "=", "0", ")", "# [n,d_out]", "\n", "n_out", "=", "self", ".", "n_net", "(", "n_input", ")", ".", "T", "# [n, d_n] -> [d_n, n]", "\n", "\n", "pred_cam", "=", "self", ".", "extract_model_outputs", "(", "m_out", ",", "n_out", ",", "data", ")", "\n", "\n", "return", "pred_cam", "\n", "\n"]]}