{"home.repos.pwc.inspect_result.codereef-ai_client.codereef.solution.get_platform_desc": [[28, 77], ["i.get", "i.get", "i.get", "ck.access", "hosd.get", "i.get", "hosd.get"], "function", ["home.repos.pwc.inspect_result.codereef-ai_client.codereef.main.access"], ["def", "get_platform_desc", "(", "i", ")", ":", "\n", "\n", "# Get platform info", "\n", "# Check host/target OS/CPU", "\n", "    ", "hos", "=", "i", ".", "get", "(", "'host_os'", ",", "''", ")", "\n", "tos", "=", "i", ".", "get", "(", "'target_os'", ",", "''", ")", "\n", "tdid", "=", "i", ".", "get", "(", "'device_id'", ",", "''", ")", "\n", "\n", "# Get some info about platforms", "\n", "ii", "=", "{", "'action'", ":", "'detect'", ",", "\n", "'module_uoa'", ":", "'platform.os'", ",", "\n", "'host_os'", ":", "hos", ",", "\n", "'target_os'", ":", "tos", ",", "\n", "'device_id'", ":", "tdid", "}", "\n", "\n", "if", "i", ".", "get", "(", "'skip_info_collection'", ",", "''", ")", "!=", "''", ":", "\n", "       ", "ii", "[", "'skip_info_collection'", "]", "=", "i", "[", "'skip_info_collection'", "]", "\n", "\n", "", "r", "=", "ck", ".", "access", "(", "ii", ")", "\n", "if", "r", "[", "'return'", "]", ">", "0", ":", "return", "r", "\n", "\n", "hosd", "=", "r", "[", "'host_os_dict'", "]", "\n", "host_os_name", "=", "hosd", ".", "get", "(", "'ck_name3'", ",", "''", ")", "\n", "if", "host_os_name", "==", "''", ":", "\n", "       ", "host_os_name", "=", "hosd", ".", "get", "(", "'ck_name2'", ",", "''", ")", "\n", "if", "host_os_name", "==", "'win'", ":", "host_os_name", "=", "'windows'", "\n", "\n", "", "if", "host_os_name", "==", "''", ":", "\n", "       ", "return", "{", "'return'", ":", "1", ",", "'error'", ":", "'your CK OS component is outdated! Try \"ck pull repo:ck-env\"'", "}", "\n", "\n", "# Extra info", "\n", "", "host_desc", "=", "{", "}", "\n", "\n", "if", "host_os_name", "==", "'windows'", ":", "\n", "       ", "host_desc", "[", "'extra_cmd'", "]", "=", "'call '", "\n", "host_desc", "[", "'venv_bin'", "]", "=", "'Scripts'", "\n", "host_desc", "[", "'venv_activate'", "]", "=", "'activate.bat'", "\n", "host_desc", "[", "'python_bin'", "]", "=", "'python.exe'", "\n", "host_desc", "[", "'activate_cmd'", "]", "=", "'cmd'", "\n", "", "else", ":", "\n", "       ", "host_desc", "[", "'extra_cmd'", "]", "=", "''", "\n", "host_desc", "[", "'venv_bin'", "]", "=", "'bin'", "\n", "host_desc", "[", "'venv_activate'", "]", "=", "'activate'", "\n", "host_desc", "[", "'python_bin'", "]", "=", "'python'", "\n", "host_desc", "[", "'activate_cmd'", "]", "=", "'bash'", "\n", "\n", "", "r", "[", "'host_desc'", "]", "=", "host_desc", "\n", "\n", "return", "r", "\n", "\n"]], "home.repos.pwc.inspect_result.codereef-ai_client.codereef.solution.init": [[83, 789], ["os.getcwd", "config.load", "ck.access.get", "ck.access.get", "ck.out", "ck.out", "solution.get_platform_desc", "get_platform_desc.get", "i.get", "ck.access", "i.get", "i.get", "i.get", "i.get", "i.get", "i.get", "i.get", "i.get", "i.get", "i.get", "i.get", "i.get", "i.get", "i.get", "i.get", "ck.access", "ck.out", "ck.out", "i.get", "i.get", "ck.out", "ck.out", "ck.out", "ck.out", "os.path.join", "os.path.isfile", "print", "ck.access", "ck.out", "ck.out", "os.path.join", "os.path.isfile", "ck.access", "ck.out", "ck.out", "ck.out", "i.get", "dd.get", "ck.out", "ck.out", "os.path.join", "ck.out", "ck.out", "ck.out", "ck.access", "ck.out", "ck.out", "ck.out", "i.get", "dd.get", "ck.out", "ck.out", "ck.out", "ck.out", "ck.out", "ck.out", "ck.out", "ck.out", "ck.out", "ck.out", "ck.out", "ck.gen_uid", "os.path.join", "ck.out", "ck.out", "ck.out", "ck.out", "obj.download", "dd.get", "dd.get", "dd.get", "dd.get", "dd.get", "dd.get", "dd.get", "dd.get", "dd.get", "dd.get", "graphs.split.split", "dd.get", "i.get", "ck.load_json_file", "dd.update", "i.get.split", "ck.out", "ck.out", "ck.load_json_file", "os.path.join", "ck.save_json_to_file", "i.get", "ck.out", "ck.out", "ck.load_json_file", "os.path.join", "ck.save_json_to_file", "locale.getdefaultlocale", "print", "print", "print", "print", "print", "ck.access", "ck.out", "ck.out", "ck.access", "ck.out", "ck.out", "ck.out", "ck.out", "ck.out", "ck.access", "ck.out", "ck.out", "ck.access", "i.get", "i.get", "dd.get", "os.remove", "i.get", "os.path.isfile", "os.remove", "os.path.isfile", "i.get", "ck.out", "ck.out", "ck.load_text_file", "ck.access", "ck.out", "ck.out", "ck.out", "ck.access", "ck.load_text_file", "ck.access", "ck.out", "ck.out", "ck.out", "ck.access", "ck.out", "ck.inp", "r[].strip", "ck.access", "os.path.join", "ck.out", "ck.out", "os.path.isfile", "graphs.split.append", "os.path.isfile", "ck.out", "ck.out", "ck.access", "ck.access", "ck.out", "ck.inp", "i_env[].strip", "os.path.isdir", "os.path.join", "os.path.isfile", "ck.out", "ck.out", "ck.access", "ck.out", "ck.out", "ck.out", "glob.glob", "ck.load_text_file", "ck.out", "ck.out", "ck.out", "ck.out", "ck.out", "ck.out", "ck.access", "os.path.isfile", "ck.out", "ck.out", "os.path.isfile", "ck.out", "ck.out", "ck.out", "ck.out", "ck.out", "graph.init", "os.path.join", "ck.out", "ck.out", "ck.out", "ck.gen_tmp_file", "ck.save_json_to_file", "ck.out", "ck.out", "ck.access", "os.path.isfile", "r[].strip.get", "ck.out", "shutil.copy", "os.path.isfile", "ck.out", "i.get", "ck.out", "ck.out", "ck.out", "ck.out", "ck.out", "ck.out", "ck.out", "ck.out", "ck.out", "ck.access", "os.remove", "os.path.join", "os.path.join", "os.path.join", "os.path.join"], "function", ["home.repos.pwc.inspect_result.codereef-ai_client.codereef.config.load", "home.repos.pwc.inspect_result.codereef-ai_client.codereef.solution.get_platform_desc", "home.repos.pwc.inspect_result.codereef-ai_client.codereef.main.access", "home.repos.pwc.inspect_result.codereef-ai_client.codereef.main.access", "home.repos.pwc.inspect_result.codereef-ai_client.codereef.main.access", "home.repos.pwc.inspect_result.codereef-ai_client.codereef.main.access", "home.repos.pwc.inspect_result.codereef-ai_client.codereef.main.access", "home.repos.pwc.inspect_result.codereef-ai_client.codereef.main.download", "home.repos.pwc.inspect_result.codereef-ai_client.codereef.main.update", "home.repos.pwc.inspect_result.codereef-ai_client.codereef.main.access", "home.repos.pwc.inspect_result.codereef-ai_client.codereef.main.access", "home.repos.pwc.inspect_result.codereef-ai_client.codereef.main.access", "home.repos.pwc.inspect_result.codereef-ai_client.codereef.main.access", "home.repos.pwc.inspect_result.codereef-ai_client.codereef.main.access", "home.repos.pwc.inspect_result.codereef-ai_client.codereef.main.access", "home.repos.pwc.inspect_result.codereef-ai_client.codereef.main.access", "home.repos.pwc.inspect_result.codereef-ai_client.codereef.main.access", "home.repos.pwc.inspect_result.codereef-ai_client.codereef.main.access", "home.repos.pwc.inspect_result.codereef-ai_client.codereef.main.access", "home.repos.pwc.inspect_result.codereef-ai_client.codereef.main.access", "home.repos.pwc.inspect_result.codereef-ai_client.codereef.main.access", "home.repos.pwc.inspect_result.codereef-ai_client.codereef.main.access", "home.repos.pwc.inspect_result.codereef-ai_client.codereef.main.init", "home.repos.pwc.inspect_result.codereef-ai_client.codereef.main.access", "home.repos.pwc.inspect_result.codereef-ai_client.codereef.main.access"], ["", "def", "init", "(", "i", ")", ":", "\n", "    ", "\"\"\"\n    Input:  {\n              uid [str] - CodeReef identifier of the solution\n            }\n\n    Output: {\n              return  [int]    - return code = 0 if success or >0 if error\n              (error) [str]    - error string if return>0 \n            }\n    \"\"\"", "\n", "\n", "# Save current directory", "\n", "cur_dir", "=", "os", ".", "getcwd", "(", ")", "\n", "\n", "# Get main configuration", "\n", "r", "=", "config", ".", "load", "(", "{", "}", ")", "\n", "if", "r", "[", "'return'", "]", ">", "0", ":", "return", "r", "\n", "cfg", "=", "r", ".", "get", "(", "'dict'", ",", "{", "}", ")", "\n", "pcfg", "=", "r", ".", "get", "(", "'path'", ",", "''", ")", "\n", "\n", "# Get platform info ", "\n", "ck", ".", "out", "(", "config", ".", "CR_LINE", ")", "\n", "ck", ".", "out", "(", "'Detecting minimal platform info ...'", ")", "\n", "\n", "i", "[", "'skip_info_collection'", "]", "=", "'yes'", "\n", "rplat", "=", "get_platform_desc", "(", "i", ")", "# Pass input from init", "\n", "if", "rplat", "[", "'return'", "]", ">", "0", ":", "return", "rplat", "\n", "\n", "hos", "=", "rplat", "[", "'host_os_uid'", "]", "\n", "hosx", "=", "rplat", "[", "'host_os_uoa'", "]", "\n", "hosd", "=", "rplat", "[", "'host_os_dict'", "]", "\n", "hosd_extra", "=", "rplat", "[", "'host_desc'", "]", "\n", "\n", "hplat", "=", "hosd", "[", "'ck_name'", "]", "\n", "\n", "tos", "=", "rplat", "[", "'os_uid'", "]", "\n", "tosx", "=", "rplat", "[", "'os_uoa'", "]", "\n", "tosd", "=", "rplat", "[", "'os_dict'", "]", "\n", "\n", "tdid", "=", "rplat", ".", "get", "(", "'device_id'", ",", "''", ")", "\n", "\n", "resume", "=", "i", ".", "get", "(", "'resume'", ")", "\n", "if", "resume", "==", "None", ":", "resume", "=", "False", "\n", "\n", "# Get solution UID", "\n", "uid", "=", "i", "[", "'uid'", "]", "\n", "if", "uid", "==", "None", ":", "\n", "       ", "r", "=", "ck", ".", "gen_uid", "(", "{", "}", ")", "\n", "if", "r", "[", "'return'", "]", ">", "0", ":", "return", "r", "\n", "uid", "=", "r", "[", "'data_uid'", "]", "\n", "\n", "# Check if entry already exists", "\n", "", "ii", "=", "{", "'action'", ":", "'load'", ",", "\n", "'module_uoa'", ":", "config", ".", "CR_MODULE_UOA", ",", "\n", "'data_uoa'", ":", "uid", "}", "\n", "r", "=", "ck", ".", "access", "(", "ii", ")", "\n", "if", "r", "[", "'return'", "]", "==", "0", ":", "\n", "       ", "p", "=", "r", "[", "'path'", "]", "\n", "px", "=", "os", ".", "path", ".", "join", "(", "p", ",", "'.cm'", ",", "'meta.json'", ")", "\n", "\n", "dd", "=", "r", "[", "'dict'", "]", "\n", "\n", "ck", ".", "out", "(", "config", ".", "CR_LINE", ")", "\n", "ck", ".", "out", "(", "\"Preloaded solution meta from \"", "+", "px", ")", "\n", "", "else", ":", "\n", "       ", "if", "r", "[", "'return'", "]", "!=", "16", ":", "return", "r", "\n", "\n", "ck", ".", "out", "(", "config", ".", "CR_LINE", ")", "\n", "r", "=", "ck", ".", "out", "(", "'Solution \"'", "+", "uid", "+", "'\" is not found locally. Attempting to download from CodeReef ...'", ")", "\n", "\n", "dd", "=", "{", "}", "\n", "\n", "r", "=", "obj", ".", "download", "(", "{", "'cid'", ":", "'local:cr-solution:'", "+", "uid", "}", ")", "\n", "if", "r", "[", "'return'", "]", ">", "0", ":", "\n", "          ", "if", "r", "[", "'return'", "]", "!=", "16", ":", "return", "r", "\n", "\n", "ck", ".", "out", "(", "''", ")", "\n", "r", "=", "ck", ".", "inp", "(", "{", "'text'", ":", "'Warning: solution was not found on the CodeReef portal. Do you want to initialize the new one (Y/n): '", "}", ")", "\n", "if", "r", "[", "'return'", "]", ">", "0", ":", "return", "r", "\n", "\n", "x", "=", "r", "[", "'string'", "]", ".", "strip", "(", ")", "\n", "if", "x", "==", "'n'", "or", "x", "==", "'N'", ":", "\n", "             ", "return", "{", "'return'", ":", "16", ",", "'error'", ":", "'Solution was not found on CodeReef portal'", "}", "\n", "\n", "", "", "else", ":", "\n", "          ", "ii", "=", "{", "'action'", ":", "'load'", ",", "\n", "'module_uoa'", ":", "config", ".", "CR_MODULE_UOA", ",", "\n", "'data_uoa'", ":", "uid", "}", "\n", "r", "=", "ck", ".", "access", "(", "ii", ")", "\n", "if", "r", "[", "'return'", "]", ">", "0", ":", "return", "r", "\n", "\n", "p", "=", "r", "[", "'path'", "]", "\n", "px", "=", "os", ".", "path", ".", "join", "(", "p", ",", "'.cm'", ",", "'meta.json'", ")", "\n", "\n", "dd", "=", "r", "[", "'dict'", "]", "\n", "\n", "ck", ".", "out", "(", "config", ".", "CR_LINE", ")", "\n", "ck", ".", "out", "(", "\"Preloaded solution meta from \"", "+", "px", ")", "\n", "\n", "# Get extra vars", "\n", "", "", "workflow", "=", "i", ".", "get", "(", "'workflow'", ",", "''", ")", "\n", "if", "workflow", "==", "''", ":", "workflow", "=", "dd", ".", "get", "(", "'workflow'", ",", "''", ")", "\n", "\n", "workflow_repo_url", "=", "i", ".", "get", "(", "'workflow_repo_url'", ",", "''", ")", "\n", "if", "workflow_repo_url", "==", "''", ":", "workflow_repo_url", "=", "dd", ".", "get", "(", "'workflow_repo_url'", ",", "''", ")", "\n", "\n", "workflow_cmd", "=", "i", ".", "get", "(", "'workflow_cmd'", ",", "''", ")", "\n", "if", "workflow_cmd", "==", "''", ":", "workflow_cmd", "=", "dd", ".", "get", "(", "'workflow_cmd'", ",", "''", ")", "\n", "\n", "workflow_cmd_extra", "=", "i", ".", "get", "(", "'workflow_cmd_extra'", ",", "''", ")", "\n", "if", "workflow_cmd_extra", "==", "''", ":", "workflow_cmd_extra", "=", "dd", ".", "get", "(", "'workflow_cmd_extra'", ",", "''", ")", "\n", "\n", "workflow_input", "=", "i", ".", "get", "(", "'workflow_input'", ",", "''", ")", "\n", "if", "workflow_input", "==", "''", ":", "workflow_input", "=", "dd", ".", "get", "(", "'workflow_input'", ",", "''", ")", "\n", "\n", "workflow_input_dir", "=", "i", ".", "get", "(", "'workflow_input_dir'", ",", "''", ")", "\n", "if", "workflow_input_dir", "==", "''", ":", "workflow_input_dir", "=", "dd", ".", "get", "(", "'workflow_input_dir'", ",", "''", ")", "\n", "\n", "workflow_output_dir", "=", "i", ".", "get", "(", "'workflow_output_dir'", ",", "''", ")", "\n", "if", "workflow_output_dir", "==", "''", ":", "workflow_output_dir", "=", "dd", ".", "get", "(", "'workflow_output_dir'", ",", "''", ")", "\n", "\n", "python_version", "=", "i", ".", "get", "(", "'python_version'", ",", "''", ")", "\n", "#    if python_version!='':", "\n", "#       i['python_version_from']=python_version", "\n", "#       i['python_version_to']=python_version", "\n", "\n", "python_version_from", "=", "i", ".", "get", "(", "'python_version_from'", ",", "''", ")", "\n", "if", "python_version_from", "==", "''", ":", "python_version_from", "=", "dd", ".", "get", "(", "'python_version_from'", ",", "''", ")", "\n", "if", "python_version_from", "==", "' '", ":", "python_version_from", "=", "''", "\n", "\n", "python_version_to", "=", "i", ".", "get", "(", "'python_version_to'", ",", "''", ")", "\n", "if", "python_version_to", "==", "''", ":", "python_version_to", "=", "dd", ".", "get", "(", "'python_version_to'", ",", "''", ")", "\n", "if", "python_version_to", "==", "' '", ":", "python_version_to", "=", "''", "\n", "\n", "# Check graphs", "\n", "graphs", "=", "i", ".", "get", "(", "'graphs'", ",", "''", ")", "\n", "if", "graphs", "==", "''", ":", "\n", "       ", "graphs", "=", "dd", ".", "get", "(", "'graphs'", ",", "[", "]", ")", "\n", "", "else", ":", "\n", "       ", "graphs", "=", "graphs", ".", "split", "(", "','", ")", "\n", "i", "[", "'graphs'", "]", "=", "graphs", "\n", "\n", "", "tos", "=", "i", ".", "get", "(", "'target_os'", ",", "''", ")", "\n", "if", "tos", "==", "''", ":", "tos", "=", "dd", ".", "get", "(", "'target_os'", ",", "''", ")", "\n", "\n", "# Update meta and create entry for a solution", "\n", "name", "=", "i", ".", "get", "(", "'name'", ",", "''", ")", "\n", "tags", "=", "i", ".", "get", "(", "'tags'", ",", "''", ")", "\n", "\n", "for", "k", "in", "[", "'host_os'", ",", "'target_os'", ",", "'device_id'", ",", "'hostname'", ",", "\n", "'workflow'", ",", "'workflow_repo_url'", ",", "\n", "'workflow_cmd'", ",", "'workflow_cmd_extra'", ",", "'workflow_input'", ",", "\n", "'workflow_input_dir'", ",", "'workflow_output_dir'", ",", "'result_file'", ",", "\n", "'python_version'", ",", "'python_version_from'", ",", "'python_version_to'", ",", "\n", "'graphs'", "]", ":", "\n", "        ", "v", "=", "i", ".", "get", "(", "k", ")", "\n", "if", "v", "!=", "None", "and", "v", "!=", "''", ":", "\n", "           ", "dd", "[", "k", "]", "=", "v", "\n", "\n", "#    dd['detected_platform_info']=rplat", "\n", "\n", "", "", "dd", "[", "'tags'", "]", "=", "[", "\"codereef-solution\"", "]", "\n", "\n", "from", ".", "import", "__version__", "\n", "dd", "[", "'cr_client_version'", "]", "=", "__version__", "\n", "\n", "# Check if extra meta", "\n", "add_extra_meta_from_file", "=", "i", ".", "get", "(", "'add_extra_meta_from_file'", ",", "''", ")", "\n", "if", "add_extra_meta_from_file", "!=", "''", ":", "\n", "       ", "r", "=", "ck", ".", "load_json_file", "(", "{", "'json_file'", ":", "add_extra_meta_from_file", "}", ")", "\n", "if", "r", "[", "'return'", "]", ">", "0", ":", "return", "r", "\n", "dd", ".", "update", "(", "r", "[", "'dict'", "]", ")", "\n", "\n", "# Add/update CK entry for the solution", "\n", "", "update_dict", "=", "{", "'action'", ":", "'update'", ",", "\n", "'module_uoa'", ":", "config", ".", "CR_MODULE_UOA", ",", "\n", "'data_uoa'", ":", "uid", ",", "\n", "'dict'", ":", "dd", ",", "\n", "'sort_keys'", ":", "'yes'", "}", "\n", "if", "name", "!=", "''", ":", "update_dict", "[", "'data_name'", "]", "=", "name", "\n", "if", "tags", "!=", "''", ":", "\n", "       ", "dd", "[", "'tags'", "]", "+=", "tags", ".", "split", "(", "','", ")", "\n", "\n", "", "r", "=", "ck", ".", "access", "(", "update_dict", ")", "\n", "if", "r", "[", "'return'", "]", ">", "0", ":", "return", "r", "\n", "\n", "solution_uoa", "=", "r", "[", "'data_uoa'", "]", "\n", "solution_uid", "=", "r", "[", "'data_uid'", "]", "\n", "\n", "p", "=", "r", "[", "'path'", "]", "\n", "\n", "ck", ".", "out", "(", "config", ".", "CR_LINE", ")", "\n", "ck", ".", "out", "(", "'Path to the CodeReef solution: '", "+", "p", ")", "\n", "\n", "##############################################################", "\n", "# Process graph description", "\n", "desc_graph", "=", "i", ".", "get", "(", "'desc_graph'", ",", "''", ")", "\n", "if", "desc_graph", "!=", "''", ":", "\n", "##############################################################", "\n", "# Graphs", "\n", "       ", "ck", ".", "out", "(", "config", ".", "CR_LINE", ")", "\n", "ck", ".", "out", "(", "'Initializing graphs:'", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "isfile", "(", "desc_graph", ")", ":", "\n", "          ", "return", "{", "'return'", ":", "1", ",", "'error'", ":", "'can\\'t find file \"'", "+", "desc_graph", "+", "'\"'", "}", "\n", "\n", "", "r", "=", "ck", ".", "load_json_file", "(", "{", "'json_file'", ":", "desc_graph", "}", ")", "\n", "if", "r", "[", "'return'", "]", ">", "0", ":", "return", "r", "\n", "\n", "d", "=", "r", "[", "'dict'", "]", "\n", "\n", "pdesc", "=", "os", ".", "path", ".", "join", "(", "p", ",", "'graph-desc.json'", ")", "\n", "\n", "r", "=", "ck", ".", "save_json_to_file", "(", "{", "'json_file'", ":", "pdesc", ",", "'dict'", ":", "d", ",", "'sort_keys'", ":", "'yes'", "}", ")", "\n", "if", "r", "[", "'return'", "]", ">", "0", ":", "return", "r", "\n", "\n", "if", "solution_uoa", "not", "in", "graphs", ":", "\n", "          ", "graphs", ".", "append", "(", "solution_uoa", ")", "\n", "\n", "", "sgi", "=", "i", ".", "get", "(", "'skip_graph_init'", ")", "\n", "if", "sgi", "!=", "None", "and", "not", "sgi", ":", "\n", "          ", "for", "gr", "in", "graphs", ":", "\n", "              ", "ck", ".", "out", "(", "''", ")", "\n", "ck", ".", "out", "(", "' * Graph: '", "+", "gr", ")", "\n", "ck", ".", "out", "(", "''", ")", "\n", "\n", "r", "=", "graph", ".", "init", "(", "{", "'uid'", ":", "gr", ",", "'version'", ":", "'1.0.0'", ",", "'desc_file'", ":", "desc_graph", "}", ")", "\n", "if", "r", "[", "'return'", "]", ">", "0", ":", "return", "r", "\n", "\n", "##############################################################", "\n", "# Process graph convertor", "\n", "", "", "", "graph_convertor", "=", "i", ".", "get", "(", "'graph_convertor'", ",", "''", ")", "\n", "if", "graph_convertor", "!=", "''", ":", "\n", "##############################################################", "\n", "# Graphs", "\n", "       ", "ck", ".", "out", "(", "config", ".", "CR_LINE", ")", "\n", "ck", ".", "out", "(", "'Processing graph convertor:'", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "isfile", "(", "graph_convertor", ")", ":", "\n", "          ", "return", "{", "'return'", ":", "1", ",", "'error'", ":", "'can\\'t find file \"'", "+", "graph_convertor", "+", "'\"'", "}", "\n", "\n", "", "r", "=", "ck", ".", "load_json_file", "(", "{", "'json_file'", ":", "graph_convertor", "}", ")", "\n", "if", "r", "[", "'return'", "]", ">", "0", ":", "return", "r", "\n", "\n", "d", "=", "r", "[", "'dict'", "]", "\n", "\n", "pconv", "=", "os", ".", "path", ".", "join", "(", "p", ",", "'graph-convertor.json'", ")", "\n", "\n", "r", "=", "ck", ".", "save_json_to_file", "(", "{", "'json_file'", ":", "pconv", ",", "'dict'", ":", "d", ",", "'sort_keys'", ":", "'yes'", "}", ")", "\n", "if", "r", "[", "'return'", "]", ">", "0", ":", "return", "r", "\n", "\n", "##############################################################", "\n", "# Init virtual environment", "\n", "", "ck", ".", "out", "(", "config", ".", "CR_LINE", ")", "\n", "ck", ".", "out", "(", "'Setting (virtual) environment...'", ")", "\n", "\n", "cmd0", "=", "hosd", "[", "'change_dir'", "]", "+", "' '", "+", "hosd", "[", "'env_quotes_if_space'", "]", "+", "p", "+", "hosd", "[", "'env_quotes_if_space'", "]", "+", "'\\n'", "\n", "cmd0", "+=", "hosd", "[", "'env_set'", "]", "+", "' CK_REPOS='", "+", "hosd", "[", "'env_quotes_if_space'", "]", "+", "os", ".", "path", ".", "join", "(", "p", ",", "'CK'", ")", "+", "hosd", "[", "'env_quotes_if_space'", "]", "+", "'\\n'", "\n", "\n", "python_path", "=", "i", "[", "'python_path'", "]", "\n", "\n", "encoding", "=", "locale", ".", "getdefaultlocale", "(", ")", "[", "1", "]", "\n", "\n", "ii", "=", "{", "'action'", ":", "'shell'", ",", "\n", "'module_uoa'", ":", "'os'", ",", "\n", "'encoding'", ":", "encoding", ",", "\n", "'output_to_console'", ":", "'yes'", "}", "\n", "\n", "if", "resume", ":", "\n", "       ", "if", "i", "[", "'python_localenv'", "]", "is", "True", ":", "\n", "             ", "cmd0", "+=", "hosd", "[", "'env_call'", "]", "+", "' '", "+", "hosd", "[", "'env_quotes_if_space'", "]", "+", "os", ".", "path", ".", "join", "(", "p", ",", "\n", "'venv'", ",", "\n", "hosd_extra", "[", "'venv_bin'", "]", ",", "\n", "hosd_extra", "[", "'venv_activate'", "]", ")", "+", "hosd", "[", "'env_quotes_if_space'", "]", "+", "'\\n'", "\n", "\n", "", "", "else", ":", "\n", "       ", "if", "python_path", "==", "''", ":", "\n", "# Searching for python ", "\n", "         ", "ck", ".", "out", "(", "''", ")", "\n", "ck", ".", "out", "(", "'  Searching for the python installation'", ")", "\n", "\n", "if", "python_version_from", "!=", "''", "and", "python_version_from", "!=", "' '", ":", "\n", "            ", "ck", ".", "out", "(", "'    Version must be >= '", "+", "python_version_from", "+", "' (change with --python_version_from=\"version\")'", ")", "\n", "", "if", "python_version_from", "!=", "''", "and", "python_version_from", "!=", "' '", ":", "\n", "            ", "ck", ".", "out", "(", "'    Version must be <= '", "+", "python_version_to", "+", "' (change with --python_version_to=\"version\")'", ")", "\n", "\n", "", "r", "=", "ck", ".", "access", "(", "{", "'action'", ":", "'detect'", ",", "\n", "'module_uoa'", ":", "'soft'", ",", "\n", "'data_uoa'", ":", "'compiler.python'", ",", "\n", "'version_from'", ":", "python_version_from", ",", "\n", "'version_to'", ":", "python_version_to", ",", "\n", "'out'", ":", "'con'", "}", ")", "\n", "if", "r", "[", "'return'", "]", ">", "0", ":", "return", "r", "\n", "\n", "r", "=", "ck", ".", "access", "(", "{", "'action'", ":", "'load'", ",", "\n", "'module_uoa'", ":", "'env'", ",", "\n", "'data_uoa'", ":", "r", "[", "'env_data_uid'", "]", "}", ")", "\n", "if", "r", "[", "'return'", "]", ">", "0", ":", "return", "r", "\n", "python_path", "=", "r", "[", "'dict'", "]", "[", "'env'", "]", "[", "'CK_ENV_COMPILER_PYTHON_FILE'", "]", "\n", "\n", "ck", ".", "out", "(", "config", ".", "CR_LINE", ")", "\n", "\n", "", "cmd", "=", "cmd0", "\n", "if", "i", "[", "'python_localenv'", "]", "is", "True", ":", "\n", "         ", "i_env", "=", "ck", ".", "inp", "(", "{", "'text'", ":", "'Do you want to create a new virtual environment (Y/n): '", "}", ")", "\n", "if", "i_env", "[", "'return'", "]", ">", "0", ":", "return", "i_env", "\n", "\n", "x_env", "=", "i_env", "[", "'string'", "]", ".", "strip", "(", ")", "\n", "\n", "if", "x_env", "==", "'n'", "or", "x_env", "==", "'N'", ":", "\n", "           ", "i", "[", "'python_localenv'", "]", "=", "False", "\n", "", "else", ":", "\n", "           ", "ck", ".", "out", "(", "'creating virtual env'", ")", "\n", "cmd", "+=", "'virtualenv --python='", "+", "python_path", "+", "' venv\\n'", "\n", "\n", "", "", "ii", "[", "'cmd'", "]", "=", "cmd", "\n", "\n", "print", "(", "config", ".", "CR_LINE", ")", "\n", "print", "(", "'Running the following commands to install the virtual env:'", ")", "\n", "print", "(", "''", ")", "\n", "print", "(", "cmd", ")", "\n", "print", "(", "config", ".", "CR_LINE", ")", "\n", "\n", "r", "=", "ck", ".", "access", "(", "ii", ")", "\n", "if", "r", "[", "'return'", "]", ">", "0", ":", "return", "r", "\n", "\n", "##############################################################", "\n", "# Install CK", "\n", "ck", ".", "out", "(", "config", ".", "CR_LINE", ")", "\n", "ck", ".", "out", "(", "'Installing CK ...'", ")", "\n", "\n", "if", "i", "[", "'python_localenv'", "]", "is", "True", ":", "\n", "             ", "cmd0", "+=", "hosd", "[", "'env_call'", "]", "+", "' '", "+", "hosd", "[", "'env_quotes_if_space'", "]", "+", "os", ".", "path", ".", "join", "(", "p", ",", "\n", "'venv'", ",", "\n", "hosd_extra", "[", "'venv_bin'", "]", ",", "\n", "hosd_extra", "[", "'venv_activate'", "]", ")", "+", "hosd", "[", "'env_quotes_if_space'", "]", "+", "'\\n'", "\n", "\n", "", "cmd", "=", "cmd0", "\n", "cmd", "+=", "'pip install ck\\n'", "\n", "cmd", "+=", "'\\n'", "\n", "cmd", "+=", "hosd_extra", "[", "'extra_cmd'", "]", "+", "'ck\\n'", "\n", "\n", "ii", "[", "'cmd'", "]", "=", "cmd", "\n", "r", "=", "ck", ".", "access", "(", "ii", ")", "\n", "if", "r", "[", "'return'", "]", ">", "0", ":", "return", "r", "\n", "\n", "##############################################################", "\n", "# Initializing CR config ...", "\n", "ck", ".", "out", "(", "config", ".", "CR_LINE", ")", "\n", "ck", ".", "out", "(", "'Initializing CR client for this solution ...'", ")", "\n", "\n", "if", "pcfg", "!=", "''", "and", "os", ".", "path", ".", "isdir", "(", "pcfg", ")", ":", "\n", "          ", "pcfg2", "=", "os", ".", "path", ".", "join", "(", "pcfg", ",", "'.cm'", ",", "'meta.json'", ")", "\n", "if", "os", ".", "path", ".", "isfile", "(", "pcfg2", ")", ":", "\n", "             ", "rx", "=", "ck", ".", "gen_tmp_file", "(", "{", "'prefix'", ":", "'ck-tmp-'", ",", "'suffix'", ":", "'.json'", "}", ")", "\n", "if", "rx", "[", "'return'", "]", ">", "0", ":", "return", "rx", "\n", "\n", "pfn", "=", "rx", "[", "'file_name'", "]", "\n", "\n", "rx", "=", "ck", ".", "save_json_to_file", "(", "{", "'json_file'", ":", "pfn", ",", "'dict'", ":", "{", "'dict'", ":", "cfg", "}", "}", ")", "\n", "if", "rx", "[", "'return'", "]", ">", "0", ":", "return", "rx", "\n", "\n", "# Update CR cfg of the solution", "\n", "cmd", "=", "cmd0", "\n", "cmd", "+=", "'ck update cfg:codereef-client @'", "+", "pfn", "+", "'\\n'", "\n", "\n", "ck", ".", "out", "(", "''", ")", "\n", "ck", ".", "out", "(", "cmd", ")", "\n", "\n", "ii", "[", "'cmd'", "]", "=", "cmd", "\n", "r", "=", "ck", ".", "access", "(", "ii", ")", "\n", "\n", "if", "os", ".", "path", ".", "isfile", "(", "pfn", ")", ":", "\n", "                ", "os", ".", "remove", "(", "pfn", ")", "\n", "\n", "", "if", "r", "[", "'return'", "]", ">", "0", ":", "return", "r", "\n", "\n", "##############################################################", "\n", "# Downloading CK components", "\n", "", "", "ck", ".", "out", "(", "config", ".", "CR_LINE", ")", "\n", "ck", ".", "out", "(", "'Downloading CK components from CodeReef portal ...'", ")", "\n", "ck", ".", "out", "(", "''", ")", "\n", "\n", "ck_components", "=", "config", ".", "CR_SOLUTION_CK_COMPONENTS", "\n", "\n", "cmd", "=", "cmd0", "\n", "\n", "for", "x", "in", "ck_components", ":", "\n", "           ", "cmd", "+=", "'\\n'", "\n", "cmd", "+=", "'cr download '", "+", "x", "[", "'cid'", "]", "\n", "if", "x", ".", "get", "(", "'version'", ",", "''", ")", "!=", "''", ":", "\n", "              ", "cmd", "+=", "' --version='", "+", "x", "[", "'version'", "]", "\n", "", "cmd", "+=", "' --force\\n'", "\n", "if", "hplat", "==", "'linux'", ":", "\n", "              ", "cmd", "+=", "'if [[ $? != 0 ]]; then exit 1 ; fi\\n'", "\n", "\n", "", "", "ii", "[", "'cmd'", "]", "=", "cmd", "\n", "\n", "r", "=", "ck", ".", "access", "(", "ii", ")", "\n", "if", "r", "[", "'return'", "]", ">", "0", ":", "return", "r", "\n", "rc", "=", "r", "[", "'return_code'", "]", "\n", "if", "rc", ">", "0", ":", "\n", "          ", "return", "{", "'return'", ":", "99", ",", "'error'", ":", "'last command returned error'", "}", "\n", "\n", "##############################################################", "\n", "# Install ck-env repo and detect python", "\n", "", "ck", ".", "out", "(", "config", ".", "CR_LINE", ")", "\n", "ck", ".", "out", "(", "'Installing ck-env repo and detecting compiler ...'", ")", "\n", "\n", "cmd", "=", "cmd0", "\n", "cmd", "+=", "hosd_extra", "[", "'extra_cmd'", "]", "+", "'ck set kernel var.install_to_env=yes\\n'", "\n", "#    Now downloading from CodeReef", "\n", "#    cmd+=hosd_extra['extra_cmd']+'ck pull repo:ck-env\\n'", "\n", "cmd", "+=", "hosd_extra", "[", "'extra_cmd'", "]", "+", "'ck detect soft:compiler.python --quiet --full_path='", "+", "hosd", "[", "'env_quotes_if_space'", "]", "+", "os", ".", "path", ".", "join", "(", "p", ",", "\n", "'venv'", ",", "\n", "hosd_extra", "[", "'venv_bin'", "]", ",", "\n", "hosd_extra", "[", "'python_bin'", "]", ")", "+", "hosd", "[", "'env_quotes_if_space'", "]", "+", "'\\n'", "\n", "\n", "ii", "[", "'cmd'", "]", "=", "cmd", "\n", "r", "=", "ck", ".", "access", "(", "ii", ")", "\n", "if", "r", "[", "'return'", "]", ">", "0", ":", "return", "r", "\n", "\n", "##############################################################", "\n", "# Pull workflow repo", "\n", "if", "workflow_repo_url", "==", "None", "or", "workflow_repo_url", "==", "''", ":", "\n", "          ", "return", "{", "'return'", ":", "1", ",", "'error'", ":", "'workflow_repo_url is not defined'", "}", "\n", "\n", "", "if", "workflow_repo_url", "!=", "'local'", ":", "\n", "          ", "ck", ".", "out", "(", "config", ".", "CR_LINE", ")", "\n", "ck", ".", "out", "(", "'Installing workflow repo ...'", ")", "\n", "\n", "cmd", "=", "cmd0", "\n", "cmd", "+=", "hosd_extra", "[", "'extra_cmd'", "]", "+", "'ck pull repo --url='", "+", "workflow_repo_url", "+", "'\\n'", "\n", "\n", "ii", "[", "'cmd'", "]", "=", "cmd", "\n", "r", "=", "ck", ".", "access", "(", "ii", ")", "\n", "if", "r", "[", "'return'", "]", ">", "0", ":", "return", "r", "\n", "\n", "##############################################################", "\n", "# Copy extra scripts if needed", "\n", "", "es", "=", "i", ".", "get", "(", "'add_extra_scripts'", ",", "''", ")", "\n", "if", "es", "!=", "''", ":", "\n", "          ", "ck", ".", "out", "(", "config", ".", "CR_LINE", ")", "\n", "ck", ".", "out", "(", "'Copying extra scripts ...'", ")", "\n", "\n", "import", "glob", "\n", "import", "shutil", "\n", "\n", "ck", ".", "out", "(", "''", ")", "\n", "for", "fl", "in", "glob", ".", "glob", "(", "es", ")", ":", "\n", "              ", "ck", ".", "out", "(", "'  * '", "+", "fl", ")", "\n", "shutil", ".", "copy", "(", "fl", ",", "p", ")", "\n", "\n", "##############################################################", "\n", "# Describe workflow preparation steps", "\n", "", "", "desc_prereq", "=", "i", ".", "get", "(", "'desc_prereq'", ",", "''", ")", "\n", "prereq_workflow", "=", "dd", ".", "get", "(", "'prereq_workflow'", ",", "[", "]", ")", "\n", "if", "desc_prereq", "!=", "''", ":", "\n", "          ", "if", "not", "os", ".", "path", ".", "isfile", "(", "desc_prereq", ")", ":", "\n", "             ", "return", "{", "'return'", ":", "1", ",", "'error'", ":", "'can\\'t find file \"'", "+", "desc_prereq", "+", "'\"'", "}", "\n", "\n", "", "r", "=", "ck", ".", "load_text_file", "(", "{", "'text_file'", ":", "desc_prereq", ",", "'split_to_list'", ":", "'yes'", "}", ")", "\n", "if", "r", "[", "'return'", "]", ">", "0", ":", "return", "r", "\n", "\n", "prereq_workflow", "=", "r", "[", "'lst'", "]", "\n", "\n", "ck", ".", "out", "(", "''", ")", "\n", "ck", ".", "out", "(", "''", ")", "\n", "ck", ".", "out", "(", "'***************************************************'", ")", "\n", "ck", ".", "out", "(", "'***************************************************'", ")", "\n", "ck", ".", "out", "(", "'Prequisite steps:'", ")", "\n", "\n", "ck", ".", "out", "(", "''", ")", "\n", "for", "s", "in", "prereq_workflow", ":", "\n", "              ", "ck", ".", "out", "(", "'  '", "+", "s", ")", "\n", "\n", "", "dd", "[", "'prereq_workflow'", "]", "=", "prereq_workflow", "\n", "\n", "update_dict", "[", "'dict'", "]", "=", "dd", "\n", "r", "=", "ck", ".", "access", "(", "update_dict", ")", "\n", "if", "r", "[", "'return'", "]", ">", "0", ":", "return", "r", "\n", "\n", "if", "not", "i", ".", "get", "(", "'skip_stop'", ",", "False", ")", ":", "\n", "             ", "ck", ".", "out", "(", "''", ")", "\n", "ck", ".", "out", "(", "'***************************************************'", ")", "\n", "ck", ".", "out", "(", "'***************************************************'", ")", "\n", "ck", ".", "out", "(", "'We start virtual env to let you install above deps!'", ")", "\n", "ck", ".", "out", "(", "'Enter \"exit\" to continue solution preparation:'", ")", "\n", "ck", ".", "out", "(", "'***************************************************'", ")", "\n", "ck", ".", "out", "(", "'***************************************************'", ")", "\n", "ck", ".", "out", "(", "''", ")", "\n", "ck", ".", "out", "(", "''", ")", "\n", "\n", "cmd", "=", "cmd0", "\n", "cmd", "+=", "hosd", "[", "'env_call'", "]", "+", "' '", "+", "hosd", "[", "'env_quotes_if_space'", "]", "+", "os", ".", "path", ".", "join", "(", "p", ",", "'venv'", ",", "hosd_extra", "[", "'venv_bin'", "]", ",", "hosd_extra", "[", "'venv_activate'", "]", ")", "+", "hosd", "[", "'env_quotes_if_space'", "]", "+", "'\\n'", "\n", "cmd", "+=", "hosd_extra", "[", "'activate_cmd'", "]", "+", "'\\n'", "\n", "\n", "ii", "[", "'cmd'", "]", "=", "cmd", "\n", "r", "=", "ck", ".", "access", "(", "ii", ")", "\n", "if", "r", "[", "'return'", "]", ">", "0", ":", "return", "r", "\n", "\n", "##############################################################", "\n", "", "", "", "ck", ".", "out", "(", "config", ".", "CR_LINE", ")", "\n", "ck", ".", "out", "(", "'Detecting complete platform info ...'", ")", "\n", "\n", "pinfo", "=", "os", ".", "path", ".", "join", "(", "p", ",", "'platform-info.json'", ")", "\n", "if", "os", ".", "path", ".", "isfile", "(", "pinfo", ")", ":", "os", ".", "remove", "(", "pinfo", ")", "\n", "\n", "cmd", "=", "cmd0", "\n", "\n", "# Need to do it from virtual env since it's the correct way for Android devices which may require specific files (adb)", "\n", "s", "=", "'ck detect platform'", "\n", "if", "i", ".", "get", "(", "'target_os'", ",", "''", ")", "!=", "''", ":", "s", "+=", "' --target_os='", "+", "i", "[", "'target_os'", "]", "\n", "if", "tdid", "!=", "''", ":", "s", "+=", "' --device_id='", "+", "tdid", "\n", "s", "+=", "' --out=json_file --out_file='", "+", "pinfo", "\n", "\n", "cmd", "+=", "s", "+", "'\\n'", "\n", "\n", "ii", "[", "'cmd'", "]", "=", "cmd", "\n", "print", "(", "cmd", ")", "\n", "r", "=", "ck", ".", "access", "(", "ii", ")", "\n", "if", "r", "[", "'return'", "]", ">", "0", ":", "return", "r", "\n", "\n", "if", "not", "os", ".", "path", ".", "isfile", "(", "pinfo", ")", ":", "\n", "       ", "return", "{", "'return'", ":", "1", ",", "'error'", ":", "'platform info file was not created'", "}", "\n", "\n", "#    # Get some info about platforms", "\n", "#    ii={'action':'detect',", "\n", "#        'module_uoa':'platform',", "\n", "#        'host_os':hos,", "\n", "#        'target_os':tos,", "\n", "#        'device_id':tdid}", "\n", "#    r=ck.access(ii)", "\n", "#    if r['return']>0: return r", "\n", "#", "\n", "#    rx=ck.save_json_to_file({'json_file':pinfo, 'dict':r, 'sort_keys':'yes'})", "\n", "#    if rx['return']>0: return rx", "\n", "#", "\n", "##############################################################", "\n", "", "ck", ".", "out", "(", "config", ".", "CR_LINE", ")", "\n", "ck", ".", "out", "(", "'Detecting complete platform host OS info ...'", ")", "\n", "\n", "pinfo2", "=", "os", ".", "path", ".", "join", "(", "p", ",", "'platform-host-os-info.json'", ")", "\n", "if", "os", ".", "path", ".", "isfile", "(", "pinfo2", ")", ":", "os", ".", "remove", "(", "pinfo2", ")", "\n", "\n", "cmd", "=", "cmd0", "\n", "\n", "# Need to do it from virtual env since it's the correct way for Android devices which may require specific files (adb)", "\n", "s", "=", "'ck detect platform.os'", "\n", "s", "+=", "' --out=json_file --out_file='", "+", "pinfo2", "\n", "\n", "cmd", "+=", "s", "+", "'\\n'", "\n", "\n", "ii", "[", "'cmd'", "]", "=", "cmd", "\n", "r", "=", "ck", ".", "access", "(", "ii", ")", "\n", "if", "r", "[", "'return'", "]", ">", "0", ":", "return", "r", "\n", "\n", "if", "not", "os", ".", "path", ".", "isfile", "(", "pinfo2", ")", ":", "\n", "       ", "return", "{", "'return'", ":", "1", ",", "'error'", ":", "'platform info file was not created'", "}", "\n", "\n", "##############################################################", "\n", "", "if", "i", ".", "get", "(", "'update_meta_and_stop'", ",", "''", ")", "==", "True", ":", "\n", "       ", "ck", ".", "out", "(", "config", ".", "CR_LINE", ")", "\n", "ck", ".", "out", "(", "'Skipping the rest by user request'", ")", "\n", "return", "{", "'return'", ":", "0", "}", "\n", "\n", "##############################################################", "\n", "# Describe workflow preparation steps", "\n", "", "ck", ".", "out", "(", "config", ".", "CR_LINE", ")", "\n", "ck", ".", "out", "(", "'Preparation steps:'", ")", "\n", "ck", ".", "out", "(", "''", ")", "\n", "\n", "desc_prepare", "=", "i", ".", "get", "(", "'desc_prepare'", ",", "''", ")", "\n", "prepare_workflow", "=", "dd", ".", "get", "(", "'prepare_workflow'", ",", "[", "]", ")", "\n", "if", "desc_prepare", "!=", "''", ":", "\n", "       ", "if", "not", "os", ".", "path", ".", "isfile", "(", "desc_prepare", ")", ":", "\n", "          ", "return", "{", "'return'", ":", "1", ",", "'error'", ":", "'can\\'t find file \"'", "+", "desc_prepare", "+", "'\"'", "}", "\n", "\n", "", "r", "=", "ck", ".", "load_text_file", "(", "{", "'text_file'", ":", "desc_prepare", ",", "'split_to_list'", ":", "'yes'", "}", ")", "\n", "if", "r", "[", "'return'", "]", ">", "0", ":", "return", "r", "\n", "\n", "prepare_workflow", "=", "r", "[", "'lst'", "]", "\n", "\n", "for", "s", "in", "prepare_workflow", ":", "\n", "           ", "ck", ".", "out", "(", "'  '", "+", "s", ")", "\n", "\n", "", "dd", "[", "'prepare_workflow'", "]", "=", "prepare_workflow", "\n", "\n", "update_dict", "[", "'dict'", "]", "=", "dd", "\n", "r", "=", "ck", ".", "access", "(", "update_dict", ")", "\n", "if", "r", "[", "'return'", "]", ">", "0", ":", "return", "r", "\n", "\n", "", "for", "s", "in", "prepare_workflow", ":", "\n", "        ", "if", "s", "==", "''", ":", "\n", "           ", "ck", ".", "out", "(", "''", ")", "\n", "continue", "\n", "\n", "", "ck", ".", "out", "(", "config", ".", "CR_LINE", ")", "\n", "ck", ".", "out", "(", "'Command:  '", "+", "s", ")", "\n", "ck", ".", "out", "(", "''", ")", "\n", "\n", "cmd", "=", "cmd0", "\n", "cmd", "+=", "s", "+", "'\\n'", "\n", "if", "hplat", "==", "'linux'", ":", "\n", "           ", "cmd", "+=", "'if [[ $? != 0 ]]; then exit 1 ; fi\\n'", "\n", "\n", "", "ii", "[", "'cmd'", "]", "=", "cmd", "\n", "r", "=", "ck", ".", "access", "(", "ii", ")", "\n", "if", "r", "[", "'return'", "]", ">", "0", ":", "return", "r", "\n", "\n", "rc", "=", "r", "[", "'return_code'", "]", "\n", "if", "rc", ">", "0", ":", "\n", "           ", "return", "{", "'return'", ":", "99", ",", "'error'", ":", "'last command returned error'", "}", "\n", "\n", "##############################################################", "\n", "# Check dependencies", "\n", "", "", "ck", ".", "out", "(", "config", ".", "CR_LINE", ")", "\n", "ck", ".", "out", "(", "'Checking and recording workflow dependencies'", ")", "\n", "\n", "pdeps", "=", "os", ".", "path", ".", "join", "(", "p", ",", "'resolved-deps.json'", ")", "\n", "\n", "s", "=", "hosd_extra", "[", "'extra_cmd'", "]", "+", "'ck run '", "+", "workflow", "+", "' --cmd_key='", "+", "workflow_cmd", "+", "' '", "+", "workflow_cmd_extra", "+", "' --record_deps=\"'", "+", "pdeps", "+", "'\" --skip_exec'", "\n", "\n", "if", "hos", "!=", "''", ":", "s", "+=", "' --host_os='", "+", "hos", "\n", "if", "tos", "!=", "''", ":", "s", "+=", "' --target_os='", "+", "tos", "\n", "if", "tdid", "!=", "''", ":", "s", "+=", "' --device_id='", "+", "tdid", "\n", "\n", "ck", ".", "out", "(", "''", ")", "\n", "ck", ".", "out", "(", "s", ")", "\n", "\n", "ck", ".", "out", "(", "''", ")", "\n", "cmd", "=", "cmd0", "\n", "cmd", "+=", "s", "+", "'\\n'", "\n", "\n", "if", "hplat", "==", "'linux'", ":", "\n", "      ", "cmd", "+=", "'if [[ $? != 0 ]]; then exit 1 ; fi\\n'", "\n", "\n", "", "ii", "[", "'cmd'", "]", "=", "cmd", "\n", "r", "=", "ck", ".", "access", "(", "ii", ")", "\n", "if", "r", "[", "'return'", "]", ">", "0", ":", "return", "r", "\n", "\n", "rc", "=", "r", "[", "'return_code'", "]", "\n", "if", "rc", ">", "0", ":", "\n", "      ", "return", "{", "'return'", ":", "99", ",", "'error'", ":", "'last command returned error'", "}", "\n", "\n", "##############################################################", "\n", "# Describe workflow run steps", "\n", "", "ck", ".", "out", "(", "config", ".", "CR_LINE", ")", "\n", "ck", ".", "out", "(", "'Run steps:'", ")", "\n", "ck", ".", "out", "(", "''", ")", "\n", "\n", "desc_run", "=", "i", ".", "get", "(", "'desc_run'", ",", "''", ")", "\n", "run_workflow", "=", "dd", ".", "get", "(", "'run_workflow'", ",", "[", "]", ")", "\n", "if", "desc_run", "!=", "''", ":", "\n", "      ", "if", "not", "os", ".", "path", ".", "isfile", "(", "desc_run", ")", ":", "\n", "        ", "return", "{", "'return'", ":", "1", ",", "'error'", ":", "'can\\'t find file \"'", "+", "desc_run", "+", "'\"'", "}", "\n", "\n", "", "r", "=", "ck", ".", "load_text_file", "(", "{", "'text_file'", ":", "desc_run", ",", "'split_to_list'", ":", "'yes'", "}", ")", "\n", "if", "r", "[", "'return'", "]", ">", "0", ":", "return", "r", "\n", "\n", "run_workflow", "=", "r", "[", "'lst'", "]", "\n", "\n", "for", "s", "in", "run_workflow", ":", "\n", "          ", "ck", ".", "out", "(", "'  '", "+", "s", ")", "\n", "\n", "", "dd", "[", "'run_workflow'", "]", "=", "run_workflow", "\n", "\n", "update_dict", "[", "'dict'", "]", "=", "dd", "\n", "r", "=", "ck", ".", "access", "(", "update_dict", ")", "\n", "if", "r", "[", "'return'", "]", ">", "0", ":", "return", "r", "\n", "\n", "", "for", "s", "in", "run_workflow", ":", "\n", "      ", "if", "s", "==", "''", ":", "\n", "        ", "ck", ".", "out", "(", "''", ")", "\n", "continue", "\n", "\n", "", "ck", ".", "out", "(", "config", ".", "CR_LINE", ")", "\n", "ck", ".", "out", "(", "'Command:  '", "+", "s", ")", "\n", "ck", ".", "out", "(", "''", ")", "\n", "\n", "cmd", "=", "cmd0", "\n", "cmd", "+=", "s", "+", "'\\n'", "\n", "\n", "ii", "[", "'cmd'", "]", "=", "cmd", "\n", "r", "=", "ck", ".", "access", "(", "ii", ")", "\n", "if", "r", "[", "'return'", "]", ">", "0", ":", "return", "r", "\n", "\n", "##############################################################", "\n", "# Check dependencies", "\n", "", "ck", ".", "out", "(", "config", ".", "CR_LINE", ")", "\n", "ck", ".", "out", "(", "'CodeReef solution was successfully prepared!'", ")", "\n", "\n", "ck", ".", "out", "(", "''", ")", "\n", "ck", ".", "out", "(", "'You can crowd-benchmark this CodeReef solution (if supported) as follows:'", ")", "\n", "ck", ".", "out", "(", "'cr benchmark '", "+", "uid", ")", "\n", "\n", "ck", ".", "out", "(", "''", ")", "\n", "ck", ".", "out", "(", "'You can run this CodeReef solution locally as follows:'", ")", "\n", "ck", ".", "out", "(", "'cr run '", "+", "uid", ")", "\n", "\n", "ck", ".", "out", "(", "''", ")", "\n", "ck", ".", "out", "(", "'You can activate CodeReef virtual env for this solution to debug/improve it as follows:'", ")", "\n", "ck", ".", "out", "(", "'cr activate '", "+", "uid", ")", "\n", "\n", "return", "{", "'return'", ":", "0", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.codereef-ai_client.codereef.solution.activate": [[793, 855], ["os.getcwd", "solution.get_platform_desc", "ck.access", "ck.out", "ck.out", "ck.out", "ck.access", "locale.getdefaultlocale", "os.path.join", "os.path.join"], "function", ["home.repos.pwc.inspect_result.codereef-ai_client.codereef.solution.get_platform_desc", "home.repos.pwc.inspect_result.codereef-ai_client.codereef.main.access", "home.repos.pwc.inspect_result.codereef-ai_client.codereef.main.access"], ["", "def", "activate", "(", "i", ")", ":", "\n", "    ", "\"\"\"\n    Input:  {\n              uid [str] - CodeReef identifier of the solution\n            }\n\n    Output: {\n              return  [int]    - return code = 0 if success or >0 if error\n              (error) [str]    - error string if return>0 \n            }\n    \"\"\"", "\n", "\n", "cur_dir", "=", "os", ".", "getcwd", "(", ")", "\n", "\n", "# Check if Windows or Linux", "\n", "# Get platform info ", "\n", "r", "=", "get_platform_desc", "(", "i", ")", "# Pass input from init", "\n", "if", "r", "[", "'return'", "]", ">", "0", ":", "return", "r", "\n", "\n", "hos", "=", "r", "[", "'host_os_uid'", "]", "\n", "hosx", "=", "r", "[", "'host_os_uoa'", "]", "\n", "hosd", "=", "r", "[", "'host_os_dict'", "]", "\n", "hosd_extra", "=", "r", "[", "'host_desc'", "]", "\n", "\n", "tos", "=", "r", "[", "'os_uid'", "]", "\n", "tosx", "=", "r", "[", "'os_uoa'", "]", "\n", "tosd", "=", "r", "[", "'os_dict'", "]", "\n", "\n", "# Load entry with the solution", "\n", "uid", "=", "i", "[", "'uid'", "]", "\n", "\n", "r", "=", "ck", ".", "access", "(", "{", "'action'", ":", "'load'", ",", "\n", "'module_uoa'", ":", "config", ".", "CR_MODULE_UOA", ",", "\n", "'data_uoa'", ":", "uid", "}", ")", "\n", "if", "r", "[", "'return'", "]", ">", "0", ":", "return", "r", "\n", "\n", "p", "=", "r", "[", "'path'", "]", "\n", "\n", "##############################################################", "\n", "ck", ".", "out", "(", "config", ".", "CR_LINE", ")", "\n", "ck", ".", "out", "(", "'Activate CodeReef solution: '", "+", "p", ")", "\n", "ck", ".", "out", "(", "''", ")", "\n", "\n", "cmd0", "=", "hosd", "[", "'change_dir'", "]", "+", "' '", "+", "hosd", "[", "'env_quotes_if_space'", "]", "+", "p", "+", "hosd", "[", "'env_quotes_if_space'", "]", "+", "'\\n'", "\n", "cmd0", "+=", "hosd", "[", "'env_set'", "]", "+", "' CK_REPOS='", "+", "hosd", "[", "'env_quotes_if_space'", "]", "+", "os", ".", "path", ".", "join", "(", "p", ",", "'CK'", ")", "+", "hosd", "[", "'env_quotes_if_space'", "]", "+", "'\\n'", "\n", "\n", "cmd", "=", "cmd0", "\n", "cmd", "+=", "hosd", "[", "'env_call'", "]", "+", "' '", "+", "hosd", "[", "'env_quotes_if_space'", "]", "+", "os", ".", "path", ".", "join", "(", "p", ",", "'venv'", ",", "hosd_extra", "[", "'venv_bin'", "]", ",", "hosd_extra", "[", "'venv_activate'", "]", ")", "+", "hosd", "[", "'env_quotes_if_space'", "]", "+", "'\\n'", "\n", "cmd", "+=", "hosd_extra", "[", "'activate_cmd'", "]", "+", "'\\n'", "\n", "\n", "encoding", "=", "locale", ".", "getdefaultlocale", "(", ")", "[", "1", "]", "\n", "\n", "ii", "=", "{", "'action'", ":", "'shell'", ",", "\n", "'module_uoa'", ":", "'os'", ",", "\n", "'cmd'", ":", "cmd", ",", "\n", "'encoding'", ":", "encoding", ",", "\n", "'output_to_console'", ":", "'yes'", "}", "\n", "\n", "r", "=", "ck", ".", "access", "(", "ii", ")", "\n", "if", "r", "[", "'return'", "]", ">", "0", ":", "return", "r", "\n", "\n", "return", "{", "'return'", ":", "0", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.codereef-ai_client.codereef.solution.run": [[859, 957], ["os.getcwd", "solution.get_platform_desc", "ck.access.get", "i.get", "xcmd.strip.strip", "ck.access", "dd.get", "dd.get", "dd.get", "dd.get", "dd.get", "dd.get", "dd.get", "ck.out", "ck.out", "ck.out", "ck.out", "ck.out", "ck.out", "ck.access", "locale.getdefaultlocale", "os.path.join", "os.path.join"], "function", ["home.repos.pwc.inspect_result.codereef-ai_client.codereef.solution.get_platform_desc", "home.repos.pwc.inspect_result.codereef-ai_client.codereef.main.access", "home.repos.pwc.inspect_result.codereef-ai_client.codereef.main.access"], ["", "def", "run", "(", "i", ")", ":", "\n", "\n", "    ", "\"\"\"\n    Input:  {\n              uid [str] - CodeReef identifier of the solution\n            }\n\n    Output: {\n              return  [int]    - return code = 0 if success or >0 if error\n              (error) [str]    - error string if return>0 \n            }\n    \"\"\"", "\n", "\n", "cur_dir", "=", "os", ".", "getcwd", "(", ")", "\n", "\n", "# Check if Windows or Linux", "\n", "# Get platform info ", "\n", "r", "=", "get_platform_desc", "(", "i", ")", "# Pass input from init", "\n", "if", "r", "[", "'return'", "]", ">", "0", ":", "return", "r", "\n", "\n", "hos", "=", "r", "[", "'host_os_uid'", "]", "\n", "hosx", "=", "r", "[", "'host_os_uoa'", "]", "\n", "hosd", "=", "r", "[", "'host_os_dict'", "]", "\n", "hosd_extra", "=", "r", "[", "'host_desc'", "]", "\n", "\n", "tos", "=", "r", "[", "'os_uid'", "]", "\n", "tosx", "=", "r", "[", "'os_uoa'", "]", "\n", "tosd", "=", "r", "[", "'os_dict'", "]", "\n", "\n", "tdid", "=", "r", ".", "get", "(", "'device_id'", ",", "''", ")", "\n", "\n", "xcmd", "=", "i", ".", "get", "(", "'cmd'", ",", "''", ")", "\n", "if", "xcmd", "==", "None", ":", "xcmd", "=", "''", "\n", "xcmd", "=", "xcmd", ".", "strip", "(", ")", "\n", "\n", "# Load entry with the solution", "\n", "uid", "=", "i", "[", "'uid'", "]", "\n", "\n", "r", "=", "ck", ".", "access", "(", "{", "'action'", ":", "'load'", ",", "\n", "'module_uoa'", ":", "config", ".", "CR_MODULE_UOA", ",", "\n", "'data_uoa'", ":", "uid", "}", ")", "\n", "if", "r", "[", "'return'", "]", ">", "0", ":", "return", "r", "\n", "\n", "p", "=", "r", "[", "'path'", "]", "\n", "dd", "=", "r", "[", "'dict'", "]", "\n", "\n", "# TBD: need to be checked from outside ...", "\n", "# host_os=dd.get('host_os','')", "\n", "tos", "=", "dd", ".", "get", "(", "'target_os'", ",", "''", ")", "\n", "tdid", "=", "dd", ".", "get", "(", "'device_id'", ",", "''", ")", "\n", "\n", "workflow", "=", "dd", ".", "get", "(", "'workflow'", ",", "''", ")", "\n", "workflow_cmd", "=", "dd", ".", "get", "(", "'workflow_cmd'", ",", "''", ")", "\n", "workflow_cmd_extra", "=", "dd", ".", "get", "(", "'workflow_cmd_extra'", ",", "''", ")", "\n", "\n", "workflow_input_dir", "=", "dd", ".", "get", "(", "'workflow_input_dir'", ",", "''", ")", "\n", "workflow_output_dir", "=", "dd", ".", "get", "(", "'workflow_output_dir'", ",", "''", ")", "\n", "\n", "##############################################################", "\n", "ck", ".", "out", "(", "config", ".", "CR_LINE", ")", "\n", "ck", ".", "out", "(", "'Run CodeReef solution: '", "+", "p", ")", "\n", "ck", ".", "out", "(", "''", ")", "\n", "\n", "cmd0", "=", "hosd", "[", "'change_dir'", "]", "+", "' '", "+", "hosd", "[", "'env_quotes_if_space'", "]", "+", "p", "+", "hosd", "[", "'env_quotes_if_space'", "]", "+", "'\\n'", "\n", "cmd0", "+=", "hosd", "[", "'env_set'", "]", "+", "' CK_REPOS='", "+", "hosd", "[", "'env_quotes_if_space'", "]", "+", "os", ".", "path", ".", "join", "(", "p", ",", "'CK'", ")", "+", "hosd", "[", "'env_quotes_if_space'", "]", "+", "'\\n'", "\n", "\n", "cmd", "=", "cmd0", "\n", "cmd", "+=", "hosd", "[", "'env_call'", "]", "+", "' '", "+", "hosd", "[", "'env_quotes_if_space'", "]", "+", "os", ".", "path", ".", "join", "(", "p", ",", "'venv'", ",", "hosd_extra", "[", "'venv_bin'", "]", ",", "hosd_extra", "[", "'venv_activate'", "]", ")", "+", "hosd", "[", "'env_quotes_if_space'", "]", "+", "'\\n'", "\n", "\n", "if", "xcmd", "!=", "''", ":", "\n", "      ", "s", "=", "xcmd", "\n", "", "else", ":", "\n", "      ", "s", "=", "hosd_extra", "[", "'extra_cmd'", "]", "+", "'ck run '", "+", "workflow", "+", "' --cmd_key='", "+", "workflow_cmd", "\n", "\n", "if", "workflow_cmd_extra", "!=", "''", ":", "\n", "        ", "s", "+=", "' '", "+", "workflow_cmd_extra", "\n", "\n", "", "if", "hos", "!=", "''", ":", "s", "+=", "' --host_os='", "+", "hos", "\n", "if", "tos", "!=", "''", ":", "s", "+=", "' --target_os='", "+", "tos", "\n", "if", "tdid", "!=", "''", ":", "s", "+=", "' --device_id='", "+", "tdid", "\n", "\n", "", "cmd", "+=", "s", "+", "'\\n'", "\n", "\n", "ck", ".", "out", "(", "''", ")", "\n", "ck", ".", "out", "(", "s", ")", "\n", "ck", ".", "out", "(", "''", ")", "\n", "\n", "encoding", "=", "locale", ".", "getdefaultlocale", "(", ")", "[", "1", "]", "\n", "\n", "ii", "=", "{", "'action'", ":", "'shell'", ",", "\n", "'module_uoa'", ":", "'os'", ",", "\n", "'cmd'", ":", "cmd", ",", "\n", "'encoding'", ":", "encoding", ",", "\n", "'output_to_console'", ":", "'yes'", "}", "\n", "r", "=", "ck", ".", "access", "(", "ii", ")", "\n", "if", "r", "[", "'return'", "]", ">", "0", ":", "return", "r", "\n", "\n", "return", "r", "\n", "\n"]], "home.repos.pwc.inspect_result.codereef-ai_client.codereef.solution.benchmark": [[962, 1352], ["datetime.datetime.now().strftime", "time.time", "os.getcwd", "solution.get_platform_desc", "ck.load_json_file.get", "i.get", "xcmd.strip.strip", "ck.access", "dd.get", "dd.get", "dd.get", "dd.get", "dd.get", "dd.get", "dd.get", "dd.get", "dd.get", "ck.out", "ck.out", "ck.out", "ck.access", "r[].strip", "os.path.join", "ck.out", "ck.out", "ck.out", "os.path.join", "os.path.isfile", "ck.access", "os.path.isfile", "os.path.join", "os.path.isfile", "os.path.join", "os.path.join", "ck.load_json_file", "ck.save_json_to_file", "os.path.isfile", "locale.getdefaultlocale", "os.remove", "os.path.isfile", "ck.load_json_file", "ck.load_json_file", "os.path.isdir", "os.mkdir", "ck.save_json_to_file", "rdf_st.get", "ck.out", "os.remove", "ck.out", "ck.out", "ck.out", "ck.out", "ck.out", "ck.out", "ck.out", "ck.out", "ck.out", "ck.access", "ck.out", "ck.out", "ck.out", "datetime.datetime.now", "r[].get", "solution.deps_summary", "ck.save_json_to_file", "ck.save_json_to_file", "time.time", "os.path.isfile", "ck.out", "ck.save_json_to_file", "ck.load_json_file", "ck.flatten_dict", "os.path.isfile", "os.path.join", "os.path.isfile", "ck.out", "ck.save_json_to_file", "os.path.join", "os.path.isfile", "os.path.join", "os.path.join", "k.startswith", "ck.load_json_file", "ck.load_json_file", "json.dumps", "len", "ck.out", "ck.out", "ck.gen_tmp_file", "ck.save_json_to_file", "os.path.isfile", "ck.load_json_file", "dd.get.append", "ck.out", "ck.out", "ck.out", "graph.push", "ck.save_json_to_file", "os.remove", "ck.out", "ck.out", "ck.out", "ck.out", "ck.gen_tmp_file", "ck.save_json_to_file", "ck.out", "graph.push", "os.path.isfile", "k.get", "os.remove", "k.get", "k.get", "k.get", "k.get", "kx.startswith", "ck.get_by_flat_key", "crdf.get", "k.get", "type", "type", "type", "type"], "function", ["home.repos.pwc.inspect_result.codereef-ai_client.codereef.solution.get_platform_desc", "home.repos.pwc.inspect_result.codereef-ai_client.codereef.main.access", "home.repos.pwc.inspect_result.codereef-ai_client.codereef.main.access", "home.repos.pwc.inspect_result.codereef-ai_client.codereef.main.access", "home.repos.pwc.inspect_result.codereef-ai_client.codereef.main.access", "home.repos.pwc.inspect_result.codereef-ai_client.codereef.solution.deps_summary", "home.repos.pwc.inspect_result.codereef-ai_client.codereef.graph.push", "home.repos.pwc.inspect_result.codereef-ai_client.codereef.graph.push"], ["", "def", "benchmark", "(", "i", ")", ":", "\n", "\n", "    ", "\"\"\"\n    Input:  {\n              uid [str] - CodeReef identifier of the solution\n            }\n\n    Output: {\n              return  [int]    - return code = 0 if success or >0 if error\n              (error) [str]    - error string if return>0 \n            }\n    \"\"\"", "\n", "import", "datetime", "\n", "import", "time", "\n", "\n", "sdate", "=", "datetime", ".", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "'%Y-%m-%dT%H:%M:%SZ'", ")", "\n", "t", "=", "time", ".", "time", "(", ")", "\n", "\n", "cur_dir", "=", "os", ".", "getcwd", "(", ")", "\n", "\n", "# Check if Windows or Linux", "\n", "# Get platform info ", "\n", "r", "=", "get_platform_desc", "(", "i", ")", "# Pass input from init", "\n", "if", "r", "[", "'return'", "]", ">", "0", ":", "return", "r", "\n", "\n", "hos", "=", "r", "[", "'host_os_uid'", "]", "\n", "hosx", "=", "r", "[", "'host_os_uoa'", "]", "\n", "hosd", "=", "r", "[", "'host_os_dict'", "]", "\n", "hosd_extra", "=", "r", "[", "'host_desc'", "]", "\n", "\n", "tos", "=", "r", "[", "'os_uid'", "]", "\n", "tosx", "=", "r", "[", "'os_uoa'", "]", "\n", "tosd", "=", "r", "[", "'os_dict'", "]", "\n", "\n", "tdid", "=", "r", ".", "get", "(", "'device_id'", ",", "''", ")", "\n", "\n", "xcmd", "=", "i", ".", "get", "(", "'cmd'", ",", "''", ")", "\n", "if", "xcmd", "==", "None", ":", "xcmd", "=", "''", "\n", "xcmd", "=", "xcmd", ".", "strip", "(", ")", "\n", "\n", "# Load entry with the solution", "\n", "uid", "=", "i", "[", "'uid'", "]", "\n", "\n", "r", "=", "ck", ".", "access", "(", "{", "'action'", ":", "'load'", ",", "\n", "'module_uoa'", ":", "config", ".", "CR_MODULE_UOA", ",", "\n", "'data_uoa'", ":", "uid", "}", ")", "\n", "if", "r", "[", "'return'", "]", ">", "0", ":", "return", "r", "\n", "\n", "solution_uoa", "=", "r", "[", "'data_uoa'", "]", "\n", "solution_uid", "=", "r", "[", "'data_uid'", "]", "\n", "\n", "p", "=", "r", "[", "'path'", "]", "\n", "dd", "=", "r", "[", "'dict'", "]", "\n", "\n", "# TBD: need to be checked from outside ...", "\n", "# host_os=dd.get('host_os','')", "\n", "tos", "=", "dd", ".", "get", "(", "'target_os'", ",", "''", ")", "\n", "tdid", "=", "dd", ".", "get", "(", "'device_id'", ",", "''", ")", "\n", "\n", "workflow", "=", "dd", ".", "get", "(", "'workflow'", ",", "''", ")", "\n", "workflow_cmd", "=", "dd", ".", "get", "(", "'workflow_cmd'", ",", "''", ")", "\n", "workflow_cmd_extra", "=", "dd", ".", "get", "(", "'workflow_cmd_extra'", ",", "''", ")", "\n", "\n", "workflow_input_dir", "=", "dd", ".", "get", "(", "'workflow_input_dir'", ",", "''", ")", "\n", "workflow_output_dir", "=", "dd", ".", "get", "(", "'workflow_output_dir'", ",", "''", ")", "\n", "\n", "result_file", "=", "dd", ".", "get", "(", "'result_file'", ",", "''", ")", "\n", "\n", "graphs", "=", "dd", ".", "get", "(", "'graphs'", ",", "[", "]", ")", "\n", "\n", "##############################################################", "\n", "ck", ".", "out", "(", "config", ".", "CR_LINE", ")", "\n", "ck", ".", "out", "(", "'Find path to output file '", "+", "result_file", "+", "' ...'", ")", "\n", "ck", ".", "out", "(", "''", ")", "\n", "\n", "encoding", "=", "locale", ".", "getdefaultlocale", "(", ")", "[", "1", "]", "\n", "\n", "cmd0", "=", "hosd", "[", "'change_dir'", "]", "+", "' '", "+", "hosd", "[", "'env_quotes_if_space'", "]", "+", "p", "+", "hosd", "[", "'env_quotes_if_space'", "]", "+", "'\\n'", "\n", "cmd0", "+=", "hosd", "[", "'env_set'", "]", "+", "' CK_REPOS='", "+", "hosd", "[", "'env_quotes_if_space'", "]", "+", "os", ".", "path", ".", "join", "(", "p", ",", "'CK'", ")", "+", "hosd", "[", "'env_quotes_if_space'", "]", "+", "'\\n'", "\n", "cmd0", "+=", "hosd", "[", "'env_call'", "]", "+", "' '", "+", "hosd", "[", "'env_quotes_if_space'", "]", "+", "os", ".", "path", ".", "join", "(", "p", ",", "'venv'", ",", "hosd_extra", "[", "'venv_bin'", "]", ",", "hosd_extra", "[", "'venv_activate'", "]", ")", "+", "hosd", "[", "'env_quotes_if_space'", "]", "+", "'\\n'", "\n", "\n", "cmd", "=", "cmd0", "\n", "cmd", "+=", "'ck find '", "+", "workflow", "+", "'\\n'", "\n", "\n", "ii", "=", "{", "'action'", ":", "'shell'", ",", "\n", "'module_uoa'", ":", "'os'", ",", "\n", "'cmd'", ":", "cmd", ",", "\n", "'encoding'", ":", "encoding", "}", "\n", "r", "=", "ck", ".", "access", "(", "ii", ")", "\n", "if", "r", "[", "'return'", "]", ">", "0", ":", "\n", "      ", "status", "=", "-", "1", "\n", "return", "r", "\n", "\n", "", "path_result", "=", "r", "[", "'stdout'", "]", ".", "strip", "(", ")", "\n", "path_result_file", "=", "os", ".", "path", ".", "join", "(", "path_result", ",", "result_file", ")", "\n", "\n", "ck", ".", "out", "(", "'  Found path: '", "+", "path_result_file", ")", "\n", "\n", "##############################################################", "\n", "ck", ".", "out", "(", "config", ".", "CR_LINE", ")", "\n", "ck", ".", "out", "(", "'Detecting complete platform info ...'", ")", "\n", "\n", "pinfo", "=", "os", ".", "path", ".", "join", "(", "p", ",", "'platform-info.json'", ")", "\n", "if", "os", ".", "path", ".", "isfile", "(", "pinfo", ")", ":", "os", ".", "remove", "(", "pinfo", ")", "\n", "\n", "cmd", "=", "cmd0", "\n", "\n", "# Need to do it from virtual env since it's the correct way for Android devices which may require specific files (adb)", "\n", "s", "=", "'ck detect platform'", "\n", "if", "tos", "!=", "''", ":", "s", "+=", "' --target_os='", "+", "tos", "\n", "if", "tdid", "!=", "''", ":", "s", "+=", "' --device_id='", "+", "tdid", "\n", "s", "+=", "' --out=json_file --out_file='", "+", "pinfo", "\n", "\n", "cmd", "+=", "s", "+", "'\\n'", "\n", "\n", "ii", "[", "'cmd'", "]", "=", "cmd", "\n", "r", "=", "ck", ".", "access", "(", "ii", ")", "\n", "if", "r", "[", "'return'", "]", ">", "0", ":", "return", "r", "\n", "\n", "if", "not", "os", ".", "path", ".", "isfile", "(", "pinfo", ")", ":", "\n", "       ", "return", "{", "'return'", ":", "1", ",", "'error'", ":", "'platform info file was not created'", "}", "\n", "\n", "# Get some sub-info about deps and platforms", "\n", "", "dinfo", "=", "{", "}", "\n", "if", "os", ".", "path", ".", "isfile", "(", "pinfo", ")", ":", "\n", "       ", "r", "=", "ck", ".", "load_json_file", "(", "{", "'json_file'", ":", "pinfo", "}", ")", "\n", "if", "r", "[", "'return'", "]", "==", "0", ":", "\n", "          ", "dinfo", "=", "r", "[", "'dict'", "]", ".", "get", "(", "'features'", ",", "{", "}", ")", "\n", "for", "k", "in", "[", "'cpu_misc'", ",", "'cpu'", "]", ":", "\n", "              ", "if", "k", "in", "dinfo", ":", "del", "(", "dinfo", "[", "k", "]", ")", "\n", "\n", "", "", "", "pdeps", "=", "os", ".", "path", ".", "join", "(", "p", ",", "'resolved-deps.json'", ")", "\n", "ddeps", "=", "{", "}", "\n", "if", "os", ".", "path", ".", "isfile", "(", "pdeps", ")", ":", "\n", "       ", "r", "=", "ck", ".", "load_json_file", "(", "{", "'json_file'", ":", "pdeps", "}", ")", "\n", "if", "r", "[", "'return'", "]", "==", "0", ":", "\n", "          ", "ddeps2", "=", "r", "[", "'dict'", "]", "\n", "\n", "r", "=", "deps_summary", "(", "{", "'deps'", ":", "ddeps2", "}", ")", "\n", "if", "r", "[", "'return'", "]", "==", "0", ":", "\n", "             ", "ddeps", "=", "r", "[", "'deps_summary'", "]", "\n", "\n", "##############################################################", "\n", "# status management", "\n", "\n", "", "", "", "path_tmpSol", "=", "os", ".", "path", ".", "join", "(", "p", ",", "\"tmp\"", ")", "\n", "tmp_solStatus", "=", "os", ".", "path", ".", "join", "(", "path_tmpSol", ",", "\"status.json\"", ")", "\n", "\n", "status", "=", "0", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "path_tmpSol", ")", ":", "\n", "      ", "os", ".", "mkdir", "(", "path_tmpSol", ")", "\n", "\n", "", "rdf_st", "=", "{", "}", "\n", "rx", "=", "ck", ".", "load_json_file", "(", "{", "'json_file'", ":", "tmp_solStatus", "}", ")", "\n", "if", "rx", "[", "'return'", "]", ">", "0", ":", "\n", "      ", "rx", "=", "ck", ".", "save_json_to_file", "(", "{", "'json_file'", ":", "tmp_solStatus", ",", "'dict'", ":", "{", "'status'", ":", "0", "}", "}", ")", "\n", "if", "rx", "[", "'return'", "]", ">", "0", ":", "return", "rx", "\n", "", "else", ":", "\n", "      ", "rdf_st", "=", "rx", "[", "'dict'", "]", "\n", "status", "=", "rdf_st", ".", "get", "(", "'status'", ",", "''", ")", "\n", "\n", "", "run", "=", "True", "\n", "if", "status", "==", "1", ":", "\n", "      ", "run", "=", "False", "\n", "", "elif", "status", "==", "2", ":", "\n", "# To be done try to push the result to server ", "\n", "      ", "status", "=", "1", "\n", "\n", "", "rdf_st", "[", "'status'", "]", "=", "1", "\n", "rx", "=", "ck", ".", "save_json_to_file", "(", "{", "'json_file'", ":", "tmp_solStatus", ",", "'dict'", ":", "rdf_st", "}", ")", "\n", "if", "rx", "[", "'return'", "]", ">", "0", ":", "return", "rx", "\n", "\n", "if", "os", ".", "path", ".", "isfile", "(", "path_result_file", ")", ":", "\n", "      ", "ck", ".", "out", "(", "'  Cleaning output ...'", ")", "\n", "os", ".", "remove", "(", "path_result_file", ")", "\n", "\n", "##############################################################", "\n", "", "if", "run", "is", "True", ":", "\n", "\n", "      ", "ck", ".", "out", "(", "config", ".", "CR_LINE", ")", "\n", "ck", ".", "out", "(", "'Run CodeReef solution: '", "+", "p", ")", "\n", "ck", ".", "out", "(", "''", ")", "\n", "\n", "cmd", "=", "cmd0", "\n", "\n", "if", "xcmd", "!=", "''", ":", "\n", "        ", "s", "=", "xcmd", "\n", "", "else", ":", "\n", "        ", "s", "=", "hosd_extra", "[", "'extra_cmd'", "]", "+", "'ck benchmark '", "+", "workflow", "+", "' --cmd_key='", "+", "workflow_cmd", "\n", "\n", "if", "workflow_cmd_extra", "!=", "''", ":", "\n", "          ", "s", "+=", "' '", "+", "workflow_cmd_extra", "\n", "\n", "", "if", "hos", "!=", "''", ":", "s", "+=", "' --host_os='", "+", "hos", "\n", "if", "tos", "!=", "''", ":", "s", "+=", "' --target_os='", "+", "tos", "\n", "if", "tdid", "!=", "''", ":", "s", "+=", "' --device_id='", "+", "tdid", "\n", "", "ck", ".", "out", "(", "config", ".", "CR_LINE", ")", "\n", "ck", ".", "out", "(", "'Command: '", "+", "cmd", ")", "\n", "ck", ".", "out", "(", "''", ")", "\n", "\n", "cmd", "+=", "s", "+", "'\\n'", "\n", "\n", "ck", ".", "out", "(", "''", ")", "\n", "ck", ".", "out", "(", "s", ")", "\n", "ck", ".", "out", "(", "''", ")", "\n", "\n", "\n", "ii", "=", "{", "'action'", ":", "'shell'", ",", "\n", "'module_uoa'", ":", "'os'", ",", "\n", "'cmd'", ":", "cmd", ",", "\n", "'encoding'", ":", "encoding", ",", "\n", "'output_to_console'", ":", "'yes'", "}", "\n", "r", "=", "ck", ".", "access", "(", "ii", ")", "\n", "\n", "if", "r", "[", "'return'", "]", ">", "0", ":", "\n", "        ", "rdf_st", "[", "'status'", "]", "=", "-", "1", "\n", "rx", "=", "ck", ".", "save_json_to_file", "(", "{", "'json_file'", ":", "tmp_solStatus", ",", "'dict'", ":", "rdf_st", "}", ")", "\n", "if", "rx", "[", "'return'", "]", ">", "0", ":", "return", "rx", "\n", "return", "r", "\n", "", "else", ":", "\n", "        ", "rdf_st", "[", "'status'", "]", "=", "2", "\n", "rx", "=", "ck", ".", "save_json_to_file", "(", "{", "'json_file'", ":", "tmp_solStatus", ",", "'dict'", ":", "rdf_st", "}", ")", "\n", "if", "rx", "[", "'return'", "]", ">", "0", ":", "return", "rx", "\n", "\n", "", "elapsed", "=", "time", ".", "time", "(", ")", "-", "t", "\n", "\n", "##############################################################", "\n", "ck", ".", "out", "(", "config", ".", "CR_LINE", ")", "\n", "ck", ".", "out", "(", "'Reading output: '", "+", "path_result_file", ")", "\n", "ck", ".", "out", "(", "''", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "isfile", "(", "path_result_file", ")", ":", "\n", "        ", "ck", ".", "out", "(", "'  Error: output file not found!'", ")", "\n", "rdf_st", "[", "'status'", "]", "=", "-", "2", "\n", "rx", "=", "ck", ".", "save_json_to_file", "(", "{", "'json_file'", ":", "tmp_solStatus", ",", "'dict'", ":", "rdf_st", "}", ")", "\n", "if", "rx", "[", "'return'", "]", ">", "0", ":", "return", "rx", "\n", "", "else", ":", "\n", "        ", "rx", "=", "ck", ".", "load_json_file", "(", "{", "'json_file'", ":", "path_result_file", "}", ")", "\n", "if", "rx", "[", "'return'", "]", ">", "0", ":", "return", "rx", "\n", "\n", "rd", "=", "rx", "[", "'dict'", "]", "\n", "\n", "# Add solution info", "\n", "rd", "[", "'codereef_solution_uoa'", "]", "=", "solution_uoa", "\n", "rd", "[", "'codereef_solution_uid'", "]", "=", "solution_uid", "\n", "rd", "[", "'solution_run_date'", "]", "=", "sdate", "\n", "rd", "[", "'solution_duration'", "]", "=", "elapsed", "\n", "\n", "from", ".", "import", "__version__", "\n", "rd", "[", "'codereef_client_version'", "]", "=", "__version__", "\n", "\n", "\n", "rx", "=", "ck", ".", "flatten_dict", "(", "{", "'dict'", ":", "rd", "}", ")", "\n", "if", "rx", "[", "'return'", "]", ">", "0", ":", "return", "rx", "\n", "\n", "rdf", "=", "rx", "[", "'dict'", "]", "\n", "crdf", "=", "{", "}", "\n", "\n", "crdf", "[", "'platform_info'", "]", "=", "dinfo", "\n", "crdf", "[", "'resolved_deps'", "]", "=", "ddeps", "\n", "\n", "# Remove first ## (do not need here)", "\n", "for", "k", "in", "rdf", ":", "\n", "          ", "v", "=", "rdf", "[", "k", "]", "\n", "if", "k", ".", "startswith", "(", "'##'", ")", ":", "k", "=", "k", "[", "2", ":", "]", "\n", "crdf", "[", "k", "]", "=", "v", "\n", "\n", "# Get some sub-info about deps and platforms", "\n", "", "if", "os", ".", "path", ".", "isfile", "(", "pinfo", ")", ":", "\n", "           ", "r", "=", "ck", ".", "load_json_file", "(", "{", "'json_file'", ":", "pinfo", "}", ")", "\n", "if", "r", "[", "'return'", "]", "==", "0", ":", "\n", "              ", "dx", "=", "r", "[", "'dict'", "]", "\n", "\n", "", "", "pdeps", "=", "os", ".", "path", ".", "join", "(", "p", ",", "'resolved-deps.json'", ")", "\n", "if", "os", ".", "path", ".", "isfile", "(", "pdeps", ")", ":", "\n", "           ", "r", "=", "ck", ".", "load_json_file", "(", "{", "'json_file'", ":", "pdeps", "}", ")", "\n", "if", "r", "[", "'return'", "]", "==", "0", ":", "\n", "              ", "dx", "=", "r", "[", "'dict'", "]", "\n", "\n", "\n", "", "", "ck", ".", "out", "(", "json", ".", "dumps", "(", "crdf", ",", "indent", "=", "2", ")", ")", "\n", "\n", "#over write the file ", "\n", "rx", "=", "ck", ".", "save_json_to_file", "(", "{", "'json_file'", ":", "path_result_file", ",", "'dict'", ":", "crdf", "}", ")", "\n", "if", "rx", "[", "'return'", "]", ">", "0", ":", "return", "rx", "\n", "\n", "################################################################", "\n", "if", "len", "(", "graphs", ")", ">", "0", ":", "\n", "          ", "ck", ".", "out", "(", "config", ".", "CR_LINE", ")", "\n", "ck", ".", "out", "(", "'Pushing results to graphs...'", ")", "\n", "\n", "rx", "=", "ck", ".", "gen_tmp_file", "(", "{", "'prefix'", ":", "'tmp-codereef-result-'", ",", "'suffix'", ":", "'.json'", "}", ")", "\n", "if", "rx", "[", "'return'", "]", ">", "0", ":", "return", "rx", "\n", "fn", "=", "rx", "[", "'file_name'", "]", "\n", "\n", "rx", "=", "ck", ".", "save_json_to_file", "(", "{", "'json_file'", ":", "fn", ",", "'dict'", ":", "crdf", "}", ")", "\n", "if", "rx", "[", "'return'", "]", ">", "0", ":", "return", "rx", "\n", "\n", "if", "solution_uoa", "not", "in", "graphs", ":", "\n", "            ", "graphs", ".", "append", "(", "solution_uoa", ")", "\n", "\n", "", "for", "gr", "in", "graphs", ":", "\n", "            ", "ck", ".", "out", "(", "''", ")", "\n", "ck", ".", "out", "(", "'  * Graph: '", "+", "gr", ")", "\n", "\n", "ck", ".", "out", "(", "''", ")", "\n", "rx", "=", "graph", ".", "push", "(", "{", "'uid'", ":", "gr", ",", "'version'", ":", "'1.0.0'", ",", "'filename'", ":", "fn", "}", ")", "\n", "if", "rx", "[", "'return'", "]", ">", "0", ":", "return", "rx", "\n", "\n", "rdf_st", "[", "'status'", "]", "=", "3", "\n", "rx", "=", "ck", ".", "save_json_to_file", "(", "{", "'json_file'", ":", "tmp_solStatus", ",", "'dict'", ":", "rdf_st", "}", ")", "\n", "if", "rx", "[", "'return'", "]", ">", "0", ":", "return", "rx", "\n", "\n", "# Clean temp data file", "\n", "", "if", "os", ".", "path", ".", "isfile", "(", "fn", ")", ":", "\n", "            ", "os", ".", "remove", "(", "fn", ")", "\n", "\n", "################################################################", "\n", "", "", "pconv", "=", "os", ".", "path", ".", "join", "(", "p", ",", "'graph-convertor.json'", ")", "\n", "if", "os", ".", "path", ".", "isfile", "(", "pconv", ")", ":", "\n", "           ", "rx", "=", "ck", ".", "load_json_file", "(", "{", "'json_file'", ":", "pconv", "}", ")", "\n", "if", "rx", "[", "'return'", "]", "==", "0", ":", "\n", "              ", "ck", ".", "out", "(", "config", ".", "CR_LINE", ")", "\n", "ck", ".", "out", "(", "'Converting data for extra graphs ...'", ")", "\n", "\n", "dconv", "=", "rx", "[", "'dict'", "]", "\n", "\n", "for", "eg", "in", "dconv", ":", "\n", "                  ", "gr", "=", "eg", "[", "'graph_id'", "]", "\n", "\n", "ck", ".", "out", "(", "''", ")", "\n", "ck", ".", "out", "(", "'  * Graph: '", "+", "gr", ")", "\n", "\n", "keys", "=", "eg", "[", "'keys'", "]", "\n", "\n", "cdata", "=", "{", "}", "\n", "\n", "for", "k", "in", "keys", ":", "\n", "                      ", "ok", "=", "k", "[", "'out_key'", "]", "\n", "\n", "kk", "=", "[", "k", ".", "get", "(", "'key1'", ",", "''", ")", ",", "k", ".", "get", "(", "'key2'", ",", "''", ")", ",", "k", ".", "get", "(", "'key3'", ",", "''", ")", ",", "k", ".", "get", "(", "'key4'", ",", "''", ")", "]", "\n", "\n", "vv", "=", "''", "\n", "v", "=", "k", ".", "get", "(", "'value'", ",", "''", ")", "\n", "if", "v", "!=", "''", "and", "v", "!=", "None", ":", "\n", "                         ", "vv", "=", "v", "\n", "\n", "", "first", "=", "True", "\n", "for", "kx", "in", "kk", ":", "\n", "                          ", "if", "kx", "!=", "''", ":", "\n", "                             ", "if", "kx", ".", "startswith", "(", "'##'", ")", ":", "\n", "                                ", "ry", "=", "ck", ".", "get_by_flat_key", "(", "{", "'dict'", ":", "crdf", ",", "'key'", ":", "kx", "}", ")", "\n", "if", "ry", "[", "'return'", "]", ">", "0", ":", "return", "ry", "\n", "v", "=", "ry", "[", "'value'", "]", "\n", "", "else", ":", "\n", "                                ", "v", "=", "crdf", ".", "get", "(", "kx", ")", "\n", "\n", "vm", "=", "k", ".", "get", "(", "'multiply'", ",", "0", ")", "\n", "if", "vm", "!=", "0", "and", "vm", "!=", "''", "and", "vm", "!=", "None", "and", "(", "type", "(", "v", ")", "==", "float", "or", "type", "(", "v", ")", "==", "int", ")", ":", "\n", "                                   ", "v", "=", "v", "*", "vm", "\n", "\n", "", "", "if", "v", "!=", "''", "and", "v", "!=", "None", ":", "\n", "                                ", "if", "first", ":", "\n", "                                   ", "first", "=", "False", "\n", "if", "type", "(", "v", ")", "==", "float", "or", "type", "(", "v", ")", "==", "int", ":", "\n", "                                      ", "vv", "=", "0", "\n", "", "", "else", ":", "\n", "                                   ", "vv", "+=", "', '", "\n", "", "vv", "+=", "v", "\n", "\n", "", "", "", "if", "vv", "!=", "''", ":", "\n", "                         ", "cdata", "[", "ok", "]", "=", "vv", "\n", "\n", "", "", "rx", "=", "ck", ".", "gen_tmp_file", "(", "{", "'prefix'", ":", "'tmp-codereef-result-'", ",", "'suffix'", ":", "'.json'", "}", ")", "\n", "if", "rx", "[", "'return'", "]", ">", "0", ":", "return", "rx", "\n", "fn", "=", "rx", "[", "'file_name'", "]", "\n", "\n", "rx", "=", "ck", ".", "save_json_to_file", "(", "{", "'json_file'", ":", "fn", ",", "'dict'", ":", "cdata", "}", ")", "\n", "if", "rx", "[", "'return'", "]", ">", "0", ":", "return", "rx", "\n", "\n", "ck", ".", "out", "(", "''", ")", "\n", "rx", "=", "graph", ".", "push", "(", "{", "'uid'", ":", "gr", ",", "'version'", ":", "'1.0.0'", ",", "'filename'", ":", "fn", "}", ")", "\n", "if", "rx", "[", "'return'", "]", ">", "0", ":", "return", "rx", "\n", "\n", "# Clean temp data file", "\n", "if", "os", ".", "path", ".", "isfile", "(", "fn", ")", ":", "\n", "                     ", "os", ".", "remove", "(", "fn", ")", "\n", "\n", "", "", "", "", "", "return", "r", "\n", "", "return", "{", "'return'", ":", "0", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.codereef-ai_client.codereef.solution.ls": [[1356, 1380], ["ck.access"], "function", ["home.repos.pwc.inspect_result.codereef-ai_client.codereef.main.access"], ["", "def", "ls", "(", "i", ")", ":", "\n", "\n", "    ", "\"\"\"\n    Input:  {\n              (uid) [str] - CodeReef identifier of the solution (can have wiledcards)\n            }\n\n    Output: {\n              return  [int]    - return code = 0 if success or >0 if error\n              (error) [str]    - error string if return>0 \n            }\n    \"\"\"", "\n", "\n", "# Create entry", "\n", "uid", "=", "i", "[", "'uid'", "]", "\n", "if", "uid", "==", "None", ":", "uid", "=", "''", "\n", "\n", "r", "=", "ck", ".", "access", "(", "{", "'action'", ":", "'ls'", ",", "\n", "'module_uoa'", ":", "config", ".", "CR_MODULE_UOA", ",", "\n", "'data_uoa'", ":", "uid", ",", "\n", "'common_func'", ":", "'yes'", ",", "\n", "'all'", ":", "'yes'", ",", "\n", "'out'", ":", "'con'", "}", ")", "\n", "return", "r", "\n", "\n"]], "home.repos.pwc.inspect_result.codereef-ai_client.codereef.solution.find": [[1384, 1406], ["ck.access"], "function", ["home.repos.pwc.inspect_result.codereef-ai_client.codereef.main.access"], ["", "def", "find", "(", "i", ")", ":", "\n", "\n", "    ", "\"\"\"\n    Input:  {\n              uid [str] - CodeReef identifier of the solution\n            }\n\n    Output: {\n              return  [int]    - return code = 0 if success or >0 if error\n              (error) [str]    - error string if return>0 \n            }\n    \"\"\"", "\n", "\n", "# Find entry", "\n", "uid", "=", "i", "[", "'uid'", "]", "\n", "\n", "r", "=", "ck", ".", "access", "(", "{", "'action'", ":", "'find'", ",", "\n", "'module_uoa'", ":", "config", ".", "CR_MODULE_UOA", ",", "\n", "'data_uoa'", ":", "uid", ",", "\n", "'common_func'", ":", "'yes'", ",", "\n", "'out'", ":", "'con'", "}", ")", "\n", "return", "r", "\n", "\n"]], "home.repos.pwc.inspect_result.codereef-ai_client.codereef.solution.rm": [[1410, 1432], ["ck.access"], "function", ["home.repos.pwc.inspect_result.codereef-ai_client.codereef.main.access"], ["", "def", "rm", "(", "i", ")", ":", "\n", "\n", "    ", "\"\"\"\n    Input:  {\n              uid [str] - CodeReef identifier of the solution\n            }\n\n    Output: {\n              return  [int]    - return code = 0 if success or >0 if error\n              (error) [str]    - error string if return>0 \n            }\n    \"\"\"", "\n", "\n", "# Delete entry", "\n", "uid", "=", "i", "[", "'uid'", "]", "\n", "\n", "r", "=", "ck", ".", "access", "(", "{", "'action'", ":", "'rm'", ",", "\n", "'module_uoa'", ":", "config", ".", "CR_MODULE_UOA", ",", "\n", "'data_uoa'", ":", "uid", ",", "\n", "'common_func'", ":", "'yes'", ",", "\n", "'out'", ":", "'con'", "}", ")", "\n", "return", "r", "\n", "\n"]], "home.repos.pwc.inspect_result.codereef-ai_client.codereef.solution.get_solution_dir": [[1436, 1456], ["config.get_work_dir", "os.path.join", "os.path.join", "os.path.isdir", "os.makedirs", "os.path.isdir", "os.makedirs"], "function", ["home.repos.pwc.inspect_result.codereef-ai_client.codereef.config.get_work_dir"], ["", "def", "get_solution_dir", "(", "i", ")", ":", "\n", "    ", "uid", "=", "i", "[", "'uid'", "]", "\n", "\n", "# Get work dir", "\n", "r", "=", "config", ".", "get_work_dir", "(", "{", "}", ")", "\n", "if", "r", "[", "'return'", "]", ">", "0", ":", "return", "r", "\n", "\n", "work_dir", "=", "r", "[", "'path'", "]", "\n", "\n", "# Get solutions dir", "\n", "solutions_dir", "=", "os", ".", "path", ".", "join", "(", "work_dir", ",", "config", ".", "CR_SOLUTIONS_DIR", ")", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "solutions_dir", ")", ":", "\n", "      ", "os", ".", "makedirs", "(", "solutions_dir", ")", "\n", "\n", "# Get the solution dir", "\n", "", "solution_dir", "=", "os", ".", "path", ".", "join", "(", "solutions_dir", ",", "uid", ")", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "solution_dir", ")", ":", "\n", "      ", "os", ".", "makedirs", "(", "solution_dir", ")", "\n", "\n", "", "return", "{", "'return'", ":", "0", ",", "'solutions_dir'", ":", "solutions_dir", ",", "'solution_dir'", ":", "solution_dir", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.codereef-ai_client.codereef.solution.deps_summary": [[1460, 1510], ["i.get", "d.get", "d.get.get", "d.get", "d.get", "d.get.get", "d.get.get", "dd.get.get", "dd.get.get().get", "dd.get.get().get", "d.get.get", "d.get.get", "d.get().get", "len", "solution.deps_summary", "dd.get.get", "dd.get.get", "d.get"], "function", ["home.repos.pwc.inspect_result.codereef-ai_client.codereef.solution.deps_summary"], ["", "def", "deps_summary", "(", "i", ")", ":", "\n", "    ", "\"\"\"\n    Input:  {\n              deps - resolved deps\n            }\n\n    Output: {\n              return       - return code =  0, if successful\n                                         >  0, if error\n              (error)      - error text if return > 0\n\n              deps_summary - summary of deps\n            }\n\n    \"\"\"", "\n", "\n", "deps", "=", "i", "[", "'deps'", "]", "\n", "ds", "=", "i", ".", "get", "(", "'deps_summary'", ",", "{", "}", ")", "\n", "\n", "for", "x", "in", "deps", ":", "\n", "        ", "d", "=", "deps", "[", "x", "]", "\n", "dd", "=", "d", ".", "get", "(", "'dict'", ",", "{", "}", ")", "\n", "\n", "ds", "[", "x", "]", "=", "{", "}", "\n", "\n", "cx", "=", "dd", ".", "get", "(", "'customize'", ",", "{", "}", ")", "\n", "\n", "ds", "[", "x", "]", "[", "'tags'", "]", "=", "d", ".", "get", "(", "'tags'", ",", "[", "]", ")", "\n", "ds", "[", "x", "]", "[", "'name'", "]", "=", "d", ".", "get", "(", "'name'", ",", "''", ")", "\n", "\n", "ds", "[", "x", "]", "[", "'package_tags'", "]", "=", "','", ".", "join", "(", "dd", ".", "get", "(", "'tags'", ",", "[", "]", ")", ")", "\n", "ds", "[", "x", "]", "[", "'data_name'", "]", "=", "dd", ".", "get", "(", "'data_name'", ",", "''", ")", "\n", "\n", "puoa", "=", "dd", ".", "get", "(", "'package_uoa'", ",", "''", ")", "\n", "if", "puoa", "==", "''", ":", "\n", "           ", "puoa", "=", "d", ".", "get", "(", "'cus'", ",", "{", "}", ")", ".", "get", "(", "'used_package_uid'", ",", "''", ")", "\n", "", "ds", "[", "x", "]", "[", "'package_uoa'", "]", "=", "puoa", "\n", "\n", "ds", "[", "x", "]", "[", "'version'", "]", "=", "cx", ".", "get", "(", "'version'", ",", "''", ")", "\n", "ds", "[", "x", "]", "[", "'git_revision'", "]", "=", "cx", ".", "get", "(", "'git_info'", ",", "{", "}", ")", ".", "get", "(", "'revision'", ",", "''", ")", "\n", "ds", "[", "x", "]", "[", "'git_iso_datetime_cut_revision'", "]", "=", "cx", ".", "get", "(", "'git_info'", ",", "{", "}", ")", ".", "get", "(", "'iso_datetime_cut_revision'", ",", "''", ")", "\n", "\n", "sdeps", "=", "dd", ".", "get", "(", "'deps'", ",", "{", "}", ")", "\n", "if", "len", "(", "sdeps", ")", ">", "0", ":", "\n", "# Recursion", "\n", "           ", "r", "=", "deps_summary", "(", "{", "'deps'", ":", "sdeps", "}", ")", "\n", "if", "r", "[", "'return'", "]", ">", "0", ":", "return", "r", "\n", "ds", "[", "x", "]", "[", "'deps'", "]", "=", "r", "[", "'deps_summary'", "]", "\n", "\n", "", "", "return", "{", "'return'", ":", "0", ",", "'deps_summary'", ":", "ds", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.codereef-ai_client.codereef.solution.publish_result": [[1514, 1787], ["i.get", "xcmd.strip.strip", "os.getcwd", "solution.get_platform_desc", "ck.access", "dd.get", "dd.get", "dd.get", "dd.get", "dd.get", "dd.get", "dd.get", "dd.get", "dd.get", "dd.get", "ck.out", "ck.out", "ck.out", "ck.access", "r[].strip", "os.path.join", "ck.out", "os.path.join", "os.path.join", "ck.load_json_file", "rdf_st.get", "locale.getdefaultlocale", "os.path.isdir", "os.mkdir", "ck.save_json_to_file", "ck.out", "ck.out", "ck.out", "os.path.isfile", "ck.out", "ck.save_json_to_file", "ck.load_json_file", "os.path.join", "os.path.isfile", "os.path.join", "os.path.join", "len", "ck.out", "ck.out", "ck.gen_tmp_file", "ck.save_json_to_file", "os.path.isfile", "ck.load_json_file", "dd.get.append", "ck.out", "ck.out", "ck.out", "graph.push", "ck.save_json_to_file", "os.remove", "ck.out", "ck.out", "ck.out", "ck.out", "ck.gen_tmp_file", "ck.save_json_to_file", "ck.out", "graph.push", "os.path.isfile", "k.get", "os.remove", "k.get", "k.get", "k.get", "k.get", "kx.startswith", "ck.get_by_flat_key", "crdf.get", "k.get", "type", "type", "type", "type"], "function", ["home.repos.pwc.inspect_result.codereef-ai_client.codereef.solution.get_platform_desc", "home.repos.pwc.inspect_result.codereef-ai_client.codereef.main.access", "home.repos.pwc.inspect_result.codereef-ai_client.codereef.main.access", "home.repos.pwc.inspect_result.codereef-ai_client.codereef.graph.push", "home.repos.pwc.inspect_result.codereef-ai_client.codereef.graph.push"], ["", "def", "publish_result", "(", "i", ")", ":", "\n", "\n", "    ", "\"\"\"\n    Input:  {\n              uid [str] - CodeReef identifier of the solution\n            }\n\n    Output: {\n              return  [int]    - return code = 0 if success or >0 if error\n              (error) [str]    - error string if return>0 \n            }\n    \"\"\"", "\n", "xcmd", "=", "i", ".", "get", "(", "'cmd'", ",", "''", ")", "\n", "if", "xcmd", "==", "None", ":", "xcmd", "=", "''", "\n", "xcmd", "=", "xcmd", ".", "strip", "(", ")", "\n", "\n", "cur_dir", "=", "os", ".", "getcwd", "(", ")", "\n", "\n", "# Check if Windows or Linux", "\n", "# Get platform info ", "\n", "r", "=", "get_platform_desc", "(", "i", ")", "# Pass input from init", "\n", "if", "r", "[", "'return'", "]", ">", "0", ":", "return", "r", "\n", "\n", "hos", "=", "r", "[", "'host_os_uid'", "]", "\n", "hosx", "=", "r", "[", "'host_os_uoa'", "]", "\n", "hosd", "=", "r", "[", "'host_os_dict'", "]", "\n", "hosd_extra", "=", "r", "[", "'host_desc'", "]", "\n", "\n", "tos", "=", "r", "[", "'os_uid'", "]", "\n", "tosx", "=", "r", "[", "'os_uoa'", "]", "\n", "tosd", "=", "r", "[", "'os_dict'", "]", "\n", "\n", "# Load entry with the solution", "\n", "uid", "=", "i", "[", "'uid'", "]", "\n", "\n", "r", "=", "ck", ".", "access", "(", "{", "'action'", ":", "'load'", ",", "\n", "'module_uoa'", ":", "config", ".", "CR_MODULE_UOA", ",", "\n", "'data_uoa'", ":", "uid", "}", ")", "\n", "if", "r", "[", "'return'", "]", ">", "0", ":", "return", "r", "\n", "\n", "solution_uoa", "=", "r", "[", "'data_uoa'", "]", "\n", "solution_uid", "=", "r", "[", "'data_uid'", "]", "\n", "\n", "p", "=", "r", "[", "'path'", "]", "\n", "dd", "=", "r", "[", "'dict'", "]", "\n", "\n", "# TBD: need to be checked from outside ...", "\n", "host_os", "=", "dd", ".", "get", "(", "'host_os'", ",", "''", ")", "\n", "tos", "=", "dd", ".", "get", "(", "'target_os'", ",", "''", ")", "\n", "tdid", "=", "dd", ".", "get", "(", "'device_id'", ",", "''", ")", "\n", "\n", "workflow", "=", "dd", ".", "get", "(", "'workflow'", ",", "''", ")", "\n", "workflow_cmd", "=", "dd", ".", "get", "(", "'workflow_cmd'", ",", "''", ")", "\n", "workflow_cmd_extra", "=", "dd", ".", "get", "(", "'workflow_cmd_extra'", ",", "''", ")", "\n", "\n", "workflow_input_dir", "=", "dd", ".", "get", "(", "'workflow_input_dir'", ",", "''", ")", "\n", "workflow_output_dir", "=", "dd", ".", "get", "(", "'workflow_output_dir'", ",", "''", ")", "\n", "\n", "result_file", "=", "dd", ".", "get", "(", "'result_file'", ",", "''", ")", "\n", "\n", "graphs", "=", "dd", ".", "get", "(", "'graphs'", ",", "[", "]", ")", "\n", "\n", "##############################################################", "\n", "ck", ".", "out", "(", "config", ".", "CR_LINE", ")", "\n", "ck", ".", "out", "(", "'Find path to output file '", "+", "result_file", "+", "' ...'", ")", "\n", "ck", ".", "out", "(", "''", ")", "\n", "\n", "encoding", "=", "locale", ".", "getdefaultlocale", "(", ")", "[", "1", "]", "\n", "\n", "cmd0", "=", "hosd", "[", "'change_dir'", "]", "+", "' '", "+", "hosd", "[", "'env_quotes_if_space'", "]", "+", "p", "+", "hosd", "[", "'env_quotes_if_space'", "]", "+", "'\\n'", "\n", "cmd0", "+=", "hosd", "[", "'env_set'", "]", "+", "' CK_REPOS='", "+", "hosd", "[", "'env_quotes_if_space'", "]", "+", "os", ".", "path", ".", "join", "(", "p", ",", "'CK'", ")", "+", "hosd", "[", "'env_quotes_if_space'", "]", "+", "'\\n'", "\n", "cmd0", "+=", "hosd", "[", "'env_call'", "]", "+", "' '", "+", "hosd", "[", "'env_quotes_if_space'", "]", "+", "os", ".", "path", ".", "join", "(", "p", ",", "'venv'", ",", "hosd_extra", "[", "'venv_bin'", "]", ",", "hosd_extra", "[", "'venv_activate'", "]", ")", "+", "hosd", "[", "'env_quotes_if_space'", "]", "+", "'\\n'", "\n", "\n", "cmd", "=", "cmd0", "\n", "cmd", "+=", "'ck find '", "+", "workflow", "+", "'\\n'", "\n", "\n", "ii", "=", "{", "'action'", ":", "'shell'", ",", "\n", "'module_uoa'", ":", "'os'", ",", "\n", "'cmd'", ":", "cmd", ",", "\n", "'encoding'", ":", "encoding", "}", "\n", "r", "=", "ck", ".", "access", "(", "ii", ")", "\n", "if", "r", "[", "'return'", "]", ">", "0", ":", "\n", "      ", "status", "=", "-", "1", "\n", "return", "r", "\n", "\n", "", "path_result", "=", "r", "[", "'stdout'", "]", ".", "strip", "(", ")", "\n", "path_result_file", "=", "os", ".", "path", ".", "join", "(", "path_result", ",", "result_file", ")", "\n", "\n", "ck", ".", "out", "(", "'  Found path: '", "+", "path_result_file", ")", "\n", "\n", "# ##############################################################", "\n", "# ck.out(config.CR_LINE)", "\n", "# ck.out('Detecting complete platform info ...')", "\n", "\n", "# pinfo=os.path.join(p, 'platform-info.json')", "\n", "# if os.path.isfile(pinfo): os.remove(pinfo)", "\n", "\n", "# cmd=cmd0", "\n", "\n", "# # Need to do it from virtual env since it's the correct way for Android devices which may require specific files (adb)", "\n", "# s='ck detect platform'", "\n", "# if i.get('target_os','')!='': s+=' --target_os='+i['target_os']", "\n", "# if tdid!='': s+=' --device_id='+tdid", "\n", "# s+=' --out=json_file --out_file='+pinfo", "\n", "\n", "# cmd+=s+'\\n'", "\n", "\n", "# ii['cmd']=cmd", "\n", "# r=ck.access(ii)", "\n", "# if r['return']>0: return r", "\n", "\n", "# if not os.path.isfile(pinfo):", "\n", "#    return {'return':1, 'error':'platform info file was not created'}", "\n", "\n", "# # Get some sub-info about deps and platforms", "\n", "# dinfo={}", "\n", "# if os.path.isfile(pinfo):", "\n", "#    r=ck.load_json_file({'json_file':pinfo})", "\n", "#    if r['return']==0:", "\n", "#       dinfo=r['dict'].get('features',{})", "\n", "#       for k in ['cpu_misc', 'cpu']:", "\n", "#           if k in dinfo: del(dinfo[k])", "\n", "\n", "# pdeps=os.path.join(p, 'resolved-deps.json')", "\n", "# ddeps={}", "\n", "# if os.path.isfile(pdeps):", "\n", "#    r=ck.load_json_file({'json_file':pdeps})", "\n", "#    if r['return']==0:", "\n", "#       ddeps2=r['dict']", "\n", "\n", "#       r=deps_summary({'deps':ddeps2})", "\n", "#       if r['return']==0:", "\n", "#          ddeps=r['deps_summary']", "\n", "\n", "##############################################################", "\n", "# status management", "\n", "\n", "path_tmpSol", "=", "os", ".", "path", ".", "join", "(", "p", ",", "\"tmp\"", ")", "\n", "tmp_solStatus", "=", "os", ".", "path", ".", "join", "(", "path_tmpSol", ",", "\"status.json\"", ")", "\n", "\n", "status", "=", "0", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "path_tmpSol", ")", ":", "\n", "      ", "os", ".", "mkdir", "(", "path_tmpSol", ")", "\n", "\n", "", "rdf_st", "=", "{", "}", "\n", "rx", "=", "ck", ".", "load_json_file", "(", "{", "'json_file'", ":", "tmp_solStatus", "}", ")", "\n", "if", "rx", "[", "'return'", "]", ">", "0", ":", "\n", "      ", "rx", "=", "ck", ".", "save_json_to_file", "(", "{", "'json_file'", ":", "tmp_solStatus", ",", "'dict'", ":", "{", "'status'", ":", "0", "}", "}", ")", "\n", "return", "rx", "\n", "\n", "", "rdf_st", "=", "rx", "[", "'dict'", "]", "\n", "status", "=", "rdf_st", ".", "get", "(", "'status'", ",", "''", ")", "\n", "\n", "if", "status", "==", "2", ":", "\n", "##############################################################", "\n", "      ", "ck", ".", "out", "(", "config", ".", "CR_LINE", ")", "\n", "ck", ".", "out", "(", "'Reading output: '", "+", "path_result_file", ")", "\n", "ck", ".", "out", "(", "''", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "isfile", "(", "path_result_file", ")", ":", "\n", "        ", "ck", ".", "out", "(", "'  Error: output file not found!'", ")", "\n", "rdf_st", "[", "'status'", "]", "=", "-", "2", "\n", "rx", "=", "ck", ".", "save_json_to_file", "(", "{", "'json_file'", ":", "tmp_solStatus", ",", "'dict'", ":", "rdf_st", "}", ")", "\n", "if", "rx", "[", "'return'", "]", ">", "0", ":", "return", "rx", "\n", "", "else", ":", "\n", "        ", "rx", "=", "ck", ".", "load_json_file", "(", "{", "'json_file'", ":", "path_result_file", "}", ")", "\n", "if", "rx", "[", "'return'", "]", ">", "0", ":", "return", "rx", "\n", "\n", "crdf", "=", "rx", "[", "'dict'", "]", "\n", "################################################################", "\n", "if", "len", "(", "graphs", ")", ">", "0", ":", "\n", "          ", "ck", ".", "out", "(", "config", ".", "CR_LINE", ")", "\n", "ck", ".", "out", "(", "'Pushing results to graphs...'", ")", "\n", "\n", "rx", "=", "ck", ".", "gen_tmp_file", "(", "{", "'prefix'", ":", "'tmp-codereef-result-'", ",", "'suffix'", ":", "'.json'", "}", ")", "\n", "if", "rx", "[", "'return'", "]", ">", "0", ":", "return", "rx", "\n", "fn", "=", "rx", "[", "'file_name'", "]", "\n", "\n", "rx", "=", "ck", ".", "save_json_to_file", "(", "{", "'json_file'", ":", "fn", ",", "'dict'", ":", "crdf", "}", ")", "\n", "if", "rx", "[", "'return'", "]", ">", "0", ":", "return", "rx", "\n", "\n", "if", "solution_uoa", "not", "in", "graphs", ":", "\n", "            ", "graphs", ".", "append", "(", "solution_uoa", ")", "\n", "\n", "", "for", "gr", "in", "graphs", ":", "\n", "            ", "ck", ".", "out", "(", "''", ")", "\n", "ck", ".", "out", "(", "'  * Graph: '", "+", "gr", ")", "\n", "\n", "ck", ".", "out", "(", "''", ")", "\n", "rx", "=", "graph", ".", "push", "(", "{", "'uid'", ":", "gr", ",", "'version'", ":", "'1.0.0'", ",", "'filename'", ":", "fn", "}", ")", "\n", "if", "rx", "[", "'return'", "]", ">", "0", ":", "return", "rx", "\n", "\n", "rdf_st", "[", "'status'", "]", "=", "3", "\n", "rx", "=", "ck", ".", "save_json_to_file", "(", "{", "'json_file'", ":", "tmp_solStatus", ",", "'dict'", ":", "rdf_st", "}", ")", "\n", "if", "rx", "[", "'return'", "]", ">", "0", ":", "return", "rx", "\n", "\n", "# Clean temp data file", "\n", "", "if", "os", ".", "path", ".", "isfile", "(", "fn", ")", ":", "\n", "            ", "os", ".", "remove", "(", "fn", ")", "\n", "\n", "################################################################", "\n", "", "", "pconv", "=", "os", ".", "path", ".", "join", "(", "p", ",", "'graph-convertor.json'", ")", "\n", "if", "os", ".", "path", ".", "isfile", "(", "pconv", ")", ":", "\n", "            ", "rx", "=", "ck", ".", "load_json_file", "(", "{", "'json_file'", ":", "pconv", "}", ")", "\n", "if", "rx", "[", "'return'", "]", "==", "0", ":", "\n", "              ", "ck", ".", "out", "(", "config", ".", "CR_LINE", ")", "\n", "ck", ".", "out", "(", "'Converting data for extra graphs ...'", ")", "\n", "\n", "dconv", "=", "rx", "[", "'dict'", "]", "\n", "\n", "for", "eg", "in", "dconv", ":", "\n", "                ", "gr", "=", "eg", "[", "'graph_id'", "]", "\n", "\n", "ck", ".", "out", "(", "''", ")", "\n", "ck", ".", "out", "(", "'  * Graph: '", "+", "gr", ")", "\n", "\n", "keys", "=", "eg", "[", "'keys'", "]", "\n", "\n", "cdata", "=", "{", "}", "\n", "\n", "for", "k", "in", "keys", ":", "\n", "                  ", "ok", "=", "k", "[", "'out_key'", "]", "\n", "\n", "kk", "=", "[", "k", ".", "get", "(", "'key1'", ",", "''", ")", ",", "k", ".", "get", "(", "'key2'", ",", "''", ")", ",", "k", ".", "get", "(", "'key3'", ",", "''", ")", ",", "k", ".", "get", "(", "'key4'", ",", "''", ")", "]", "\n", "\n", "vv", "=", "''", "\n", "v", "=", "k", ".", "get", "(", "'value'", ",", "''", ")", "\n", "if", "v", "!=", "''", "and", "v", "!=", "None", ":", "\n", "                      ", "vv", "=", "v", "\n", "\n", "", "first", "=", "True", "\n", "for", "kx", "in", "kk", ":", "\n", "                    ", "if", "kx", "!=", "''", ":", "\n", "                      ", "if", "kx", ".", "startswith", "(", "'##'", ")", ":", "\n", "                        ", "ry", "=", "ck", ".", "get_by_flat_key", "(", "{", "'dict'", ":", "crdf", ",", "'key'", ":", "kx", "}", ")", "\n", "if", "ry", "[", "'return'", "]", ">", "0", ":", "return", "ry", "\n", "v", "=", "ry", "[", "'value'", "]", "\n", "", "else", ":", "\n", "                        ", "v", "=", "crdf", ".", "get", "(", "kx", ")", "\n", "\n", "vm", "=", "k", ".", "get", "(", "'multiply'", ",", "0", ")", "\n", "if", "vm", "!=", "0", "and", "vm", "!=", "''", "and", "vm", "!=", "None", "and", "(", "type", "(", "v", ")", "==", "float", "or", "type", "(", "v", ")", "==", "int", ")", ":", "\n", "                          ", "v", "=", "v", "*", "vm", "\n", "\n", "", "", "if", "v", "!=", "''", "and", "v", "!=", "None", ":", "\n", "                        ", "if", "first", ":", "\n", "                          ", "first", "=", "False", "\n", "if", "type", "(", "v", ")", "==", "float", "or", "type", "(", "v", ")", "==", "int", ":", "\n", "                            ", "vv", "=", "0", "\n", "", "", "else", ":", "\n", "                          ", "vv", "+=", "', '", "\n", "", "vv", "+=", "v", "\n", "\n", "", "", "", "if", "vv", "!=", "''", ":", "\n", "                    ", "cdata", "[", "ok", "]", "=", "vv", "\n", "\n", "", "", "rx", "=", "ck", ".", "gen_tmp_file", "(", "{", "'prefix'", ":", "'tmp-codereef-result-'", ",", "'suffix'", ":", "'.json'", "}", ")", "\n", "if", "rx", "[", "'return'", "]", ">", "0", ":", "return", "rx", "\n", "fn", "=", "rx", "[", "'file_name'", "]", "\n", "\n", "rx", "=", "ck", ".", "save_json_to_file", "(", "{", "'json_file'", ":", "fn", ",", "'dict'", ":", "cdata", "}", ")", "\n", "if", "rx", "[", "'return'", "]", ">", "0", ":", "return", "rx", "\n", "\n", "ck", ".", "out", "(", "''", ")", "\n", "rx", "=", "graph", ".", "push", "(", "{", "'uid'", ":", "gr", ",", "'version'", ":", "'1.0.0'", ",", "'filename'", ":", "fn", "}", ")", "\n", "if", "rx", "[", "'return'", "]", ">", "0", ":", "return", "rx", "\n", "\n", "# Clean temp data file", "\n", "if", "os", ".", "path", ".", "isfile", "(", "fn", ")", ":", "\n", "                  ", "os", ".", "remove", "(", "fn", ")", "\n", "\n", "", "", "", "", "", "return", "r", "\n", "", "return", "{", "'return'", ":", "0", "}", "\n", "", ""]], "home.repos.pwc.inspect_result.codereef-ai_client.codereef.obj.publish": [[28, 390], ["os.getcwd", "config.load", "cfg.get", "cfg.get", "i.get", "i.get", "i.get", "i.get", "i.get", "i.get", "i.get", "i.get", "i.get", "i.get", "ck.access", "len", "sorted", "os.chdir", "i.get", "i.get", "i.get.find", "ck.out", "ck.out", "obj.get().get", "data_meta.get", "data_meta.get", "data_meta.get", "obj[].get", "ck.gen_tmp_file", "ck.list_all_files", "os.stat", "ck.convert_file_to_upload_string", "os.path.isfile", "i.get", "os.chdir", "ck.run_and_get_stdout", "ck.run_and_get_stdout", "ck.run_and_get_stdout", "comm.send", "data_meta.get().get", "data_meta.get", "ck.out", "open", "zipfile.ZipFile", "zipfile.ZipFile.close", "open.close", "repo_dict.get", "repo_dict.get", "ck.out", "os.path.isfile", "os.remove", "i.get.strip().split", "r[].strip", "r[].strip", "r[].strip", "ck.out", "ck.out", "obj.get", "data_meta.get().get", "extra_dict[].append", "data_meta.get", "data_meta.get.get", "ck.out", "ck.access", "repo_dict.get", "ck.inp", "r[].strip", "os.remove", "r[].strip.get", "r[].strip.get", "r[].strip.get", "data_meta.get", "data_meta.get", "extra_tags.append", "data_meta.get.get", "data_meta2.get.split", "os.path.join", "zipfile.ZipFile.write", "str", "i.get.strip", "i.get", "data_meta.get", "data_meta.get.get", "extra_tags.append", "aa.strip.strip", "extra_dict[].append", "format", "str", "str", "str"], "function", ["home.repos.pwc.inspect_result.codereef-ai_client.codereef.config.load", "home.repos.pwc.inspect_result.codereef-ai_client.codereef.main.access", "home.repos.pwc.inspect_result.codereef-ai_client.codereef.main.find", "home.repos.pwc.inspect_result.codereef-ai_client.codereef.comm.send", "home.repos.pwc.inspect_result.codereef-ai_client.codereef.main.open", "home.repos.pwc.inspect_result.codereef-ai_client.codereef.main.access"], ["def", "publish", "(", "i", ")", ":", "\n", "\n", "    ", "\"\"\"\n    Input:  {\n              cid [str] - CK CID of format (repo UOA:)module UOA:data UOA\n                          (can use wildcards)\n              (tags) [str] - search multiple CK components by these tags separated by comma\n              (version) [str] - assign version\n            }\n\n    Output: {\n              return  [int]    - return code = 0 if success or >0 if error\n              (error) [str]    - error string if return>0 \n            }\n    \"\"\"", "\n", "\n", "# Get current directory (since will be changing it to get info about Git repo)", "\n", "cur_dir", "=", "os", ".", "getcwd", "(", ")", "\n", "\n", "# Get current configuration", "\n", "r", "=", "config", ".", "load", "(", "{", "}", ")", "\n", "if", "r", "[", "'return'", "]", ">", "0", ":", "return", "r", "\n", "cfg", "=", "r", "[", "'dict'", "]", "\n", "\n", "# Check commands", "\n", "# Username ##########################################################", "\n", "username", "=", "cfg", ".", "get", "(", "'username'", ",", "''", ")", "\n", "if", "i", ".", "get", "(", "'username'", ")", "!=", "None", ":", "username", "=", "i", "[", "'username'", "]", "\n", "\n", "if", "username", "==", "''", "or", "username", "==", "None", ":", "\n", "       ", "return", "{", "'return'", ":", "1", ",", "'error'", ":", "'Username is not defined'", "}", "\n", "\n", "", "cfg", "[", "'username'", "]", "=", "username", "\n", "\n", "# API key ###########################################################        ", "\n", "api_key", "=", "cfg", ".", "get", "(", "'api_key'", ",", "''", ")", "\n", "\n", "if", "i", ".", "get", "(", "'api_key'", ")", "!=", "None", ":", "api_key", "=", "i", "[", "'api_key'", "]", "\n", "\n", "if", "api_key", "==", "''", "or", "api_key", "==", "None", ":", "\n", "       ", "return", "{", "'return'", ":", "1", ",", "'error'", ":", "'API key is not defined'", "}", "\n", "\n", "", "cfg", "[", "'api_key'", "]", "=", "api_key", "\n", "\n", "# CID ###########################################################        ", "\n", "cid", "=", "i", ".", "get", "(", "'cid'", ")", "\n", "\n", "if", "cid", "==", "''", "or", "cid", "==", "None", ":", "\n", "       ", "return", "{", "'return'", ":", "1", ",", "'error'", ":", "'CK entry (CID) is not defined'", "}", "\n", "\n", "", "tags", "=", "i", ".", "get", "(", "'tags'", ",", "''", ")", "\n", "\n", "# Check if no module and use \"cr-solution\" by default", "\n", "if", "cid", ".", "find", "(", "':'", ")", "<", "0", ":", "\n", "       ", "cid", "=", "'cr-solution:'", "+", "cid", "\n", "\n", "# Version ###########################################################        ", "\n", "", "version", "=", "i", ".", "get", "(", "'version'", ")", "\n", "if", "version", "==", "''", "or", "version", "==", "None", ":", "\n", "       ", "return", "{", "'return'", ":", "1", ",", "'error'", ":", "'Version is not defined'", "}", "\n", "\n", "# Extra info about authors", "\n", "", "author", "=", "i", ".", "get", "(", "'author'", ",", "''", ")", "\n", "if", "author", "==", "None", ":", "author", "=", "''", "\n", "\n", "author_codereef_id", "=", "i", ".", "get", "(", "'author_codereef_id'", ",", "''", ")", "\n", "if", "author_codereef_id", "==", "None", ":", "author_codereef_id", "=", "''", "\n", "\n", "copyright", "=", "i", ".", "get", "(", "'copyright'", ",", "''", ")", "\n", "if", "copyright", "==", "None", ":", "copyright", "=", "''", "\n", "\n", "license", "=", "i", ".", "get", "(", "'license'", ",", "''", ")", "\n", "if", "license", "==", "None", ":", "license", "=", "''", "\n", "\n", "source", "=", "i", ".", "get", "(", "'source'", ",", "''", ")", "\n", "if", "source", "==", "None", ":", "source", "=", "''", "\n", "\n", "quiet", "=", "i", ".", "get", "(", "'quiet'", ",", "False", ")", "\n", "force", "=", "i", ".", "get", "(", "'force'", ",", "False", ")", "\n", "\n", "# List CK components", "\n", "r", "=", "ck", ".", "access", "(", "{", "'action'", ":", "'search'", ",", "\n", "'cid'", ":", "cid", ",", "\n", "'tags'", ":", "tags", ",", "\n", "'add_info'", ":", "'yes'", ",", "\n", "'add_meta'", ":", "'yes'", ",", "\n", "'common_func'", ":", "'yes'", "}", ")", "\n", "if", "r", "[", "'return'", "]", ">", "0", ":", "return", "r", "\n", "\n", "lst", "=", "r", "[", "'lst'", "]", "\n", "llst", "=", "len", "(", "lst", ")", "\n", "\n", "if", "llst", "==", "0", ":", "\n", "       ", "ck", ".", "out", "(", "'No CK objects found'", ")", "\n", "\n", "", "num", "=", "0", "\n", "\n", "# Sort lst by modules and then data", "\n", "lst1", "=", "sorted", "(", "lst", ",", "key", "=", "lambda", "x", ":", "(", "x", ".", "get", "(", "'repo_uoa'", ",", "''", ")", ",", "x", ".", "get", "(", "'module_uoa'", ",", "''", ")", ",", "x", ".", "get", "(", "'data_uoa'", ",", "''", ")", ")", ")", "\n", "\n", "for", "obj", "in", "lst1", ":", "\n", "        ", "num", "+=", "1", "\n", "\n", "# Basic info about CK object", "\n", "repo_uoa", "=", "obj", "[", "'repo_uoa'", "]", "\n", "repo_uid", "=", "obj", "[", "'repo_uid'", "]", "\n", "\n", "module_uoa", "=", "obj", "[", "'module_uoa'", "]", "\n", "module_uid", "=", "obj", "[", "'module_uid'", "]", "\n", "\n", "data_uoa", "=", "obj", "[", "'data_uoa'", "]", "\n", "data_uid", "=", "obj", "[", "'data_uid'", "]", "\n", "\n", "# Print info", "\n", "ck", ".", "out", "(", "str", "(", "num", ")", "+", "' out of '", "+", "str", "(", "llst", ")", "+", "') '", "+", "repo_uoa", "+", "':'", "+", "module_uoa", "+", "':'", "+", "data_uoa", ")", "\n", "\n", "# Check name and date", "\n", "data_name", "=", "obj", ".", "get", "(", "'info'", ",", "{", "}", ")", ".", "get", "(", "'data_name'", ",", "''", ")", "\n", "if", "data_name", "==", "data_uoa", ":", "data_name", "=", "''", "\n", "\n", "data_meta", "=", "obj", "[", "'meta'", "]", "\n", "if", "data_name", "==", "''", ":", "\n", "           ", "if", "data_meta", ".", "get", "(", "'misc'", ",", "{", "}", ")", ".", "get", "(", "'title'", ",", "''", ")", "!=", "''", ":", "\n", "              ", "data_name", "=", "data_meta", "[", "'misc'", "]", "[", "'title'", "]", "\n", "\n", "", "", "data_date", "=", "''", "\n", "if", "data_meta", ".", "get", "(", "'misc'", ",", "{", "}", ")", ".", "get", "(", "'date'", ",", "''", ")", "!=", "''", ":", "\n", "           ", "data_date", "=", "data_meta", "[", "'misc'", "]", "[", "'date'", "]", "\n", "\n", "", "source2", "=", "data_meta", ".", "get", "(", "'source'", ",", "''", ")", "\n", "if", "source2", "==", "''", ":", "source2", "=", "source", "\n", "\n", "license2", "=", "data_meta", ".", "get", "(", "'license'", ",", "''", ")", "\n", "if", "license2", "==", "''", ":", "license2", "=", "license", "\n", "\n", "copyright2", "=", "data_meta", ".", "get", "(", "'copyright'", ",", "''", ")", "\n", "if", "copyright2", "==", "''", ":", "copyright2", "=", "copyright", "\n", "\n", "# Specialize per specific modules", "\n", "not_digital_component", "=", "False", "\n", "extra_dict", "=", "{", "}", "\n", "extra_tags", "=", "{", "}", "\n", "\n", "if", "module_uoa", "==", "'module'", ":", "\n", "           ", "extra_dict", "[", "'last_module_actions'", "]", "=", "[", "]", "\n", "actions", "=", "data_meta", ".", "get", "(", "'actions'", ",", "{", "}", ")", "\n", "for", "a", "in", "actions", ":", "\n", "               ", "extra_dict", "[", "'last_module_actions'", "]", ".", "append", "(", "a", "+", "' '", "+", "data_uoa", ")", "\n", "\n", "", "", "elif", "module_uoa", "==", "'cr-lib'", ":", "\n", "           ", "not_digital_component", "=", "True", "\n", "extra_tags", "=", "[", "'codereef-library'", "]", "\n", "\n", "if", "'reproduced-papers'", "in", "data_meta", ".", "get", "(", "'tags'", ",", "[", "]", ")", ":", "\n", "              ", "extra_tags", ".", "append", "(", "'reproduced-papers'", ")", "\n", "\n", "", "data_meta2", "=", "data_meta", ".", "get", "(", "'meta'", ",", "{", "}", ")", "\n", "\n", "if", "data_name", "==", "''", ":", "\n", "              ", "data_name", "=", "data_meta2", ".", "get", "(", "'title'", ",", "''", ")", "\n", "\n", "", "all_authors", "=", "data_meta2", ".", "get", "(", "'authors'", ",", "''", ")", "\n", "if", "all_authors", "!=", "''", ":", "\n", "              ", "extra_dict", "[", "'all_authors'", "]", "=", "[", "]", "\n", "for", "aa", "in", "all_authors", ".", "split", "(", "','", ")", ":", "\n", "                  ", "if", "aa", "!=", "''", ":", "aa", "=", "aa", ".", "strip", "(", ")", "\n", "if", "aa", "!=", "''", ":", "\n", "                     ", "extra_dict", "[", "'all_authors'", "]", ".", "append", "(", "aa", ")", "\n", "\n", "", "", "", "for", "k", "in", "[", "'badge_acm_artifact_available'", ",", "'badge_acm_artifact_functional'", ",", "\n", "'badge_acm_artifact_reusable'", ",", "'badge_acm_results_replicated'", ",", "\n", "'badge_acm_results_reproduced'", "]", ":", "\n", "               ", "if", "data_meta2", ".", "get", "(", "k", ",", "''", ")", "==", "'yes'", ":", "\n", "                  ", "extra_tags", ".", "append", "(", "k", ")", "\n", "\n", "", "", "", "elif", "module_uoa", "==", "'cr-event'", "or", "module_uoa", "==", "'repo'", ":", "\n", "           ", "not_digital_component", "=", "True", "\n", "\n", "# Get info of the first creation", "\n", "", "first_creation", "=", "obj", "[", "'info'", "]", ".", "get", "(", "'control'", ",", "{", "}", ")", "\n", "\n", "# Load info about repo", "\n", "repo_dict", "=", "{", "}", "\n", "\n", "if", "not", "force", "and", "repo_uoa", "==", "'local'", "and", "module_uoa", "!=", "'repo'", ":", "# Normally skip everything from local unless we publish repos themselves", "\n", "           ", "ck", ".", "out", "(", "'     SKIPPED'", ")", "\n", "continue", "\n", "\n", "", "if", "module_uoa", "==", "'repo'", ":", "\n", "           ", "if", "not", "force", "and", "data_uoa", "==", "'local'", ":", "\n", "              ", "ck", ".", "out", "(", "'     SKIPPED'", ")", "\n", "continue", "\n", "\n", "", "repo_dict", "=", "obj", "[", "'meta'", "]", "\n", "\n", "", "elif", "repo_uoa", "!=", "'default'", "and", "repo_uoa", "!=", "'local'", ":", "\n", "           ", "r", "=", "ck", ".", "access", "(", "{", "'action'", ":", "'load'", ",", "\n", "'repo_uoa'", ":", "config", ".", "CK_CFG_REPO_UOA", ",", "\n", "'module_uoa'", ":", "config", ".", "CK_CFG_MODULE_REPO_UOA", ",", "\n", "'data_uoa'", ":", "repo_uid", ",", "\n", "'common_func'", ":", "'yes'", "}", ")", "\n", "if", "r", "[", "'return'", "]", ">", "0", ":", "return", "r", "\n", "repo_dict", "=", "r", "[", "'dict'", "]", "\n", "if", "'path'", "in", "repo_dict", ":", "\n", "              ", "del", "(", "repo_dict", "[", "'path'", "]", ")", "\n", "\n", "# Generate temp file to pack", "\n", "", "", "r", "=", "ck", ".", "gen_tmp_file", "(", "{", "'prefix'", ":", "'cr-obj-'", ",", "'suffix'", ":", "'.zip'", "}", ")", "\n", "if", "r", "[", "'return'", "]", ">", "0", ":", "return", "r", "\n", "\n", "fn", "=", "r", "[", "'file_name'", "]", "\n", "\n", "# Pack component", "\n", "p", "=", "obj", "[", "'path'", "]", "\n", "\n", "zip_method", "=", "zipfile", ".", "ZIP_DEFLATED", "\n", "\n", "ii", "=", "{", "'path'", ":", "p", ",", "'all'", ":", "'yes'", "}", "\n", "\n", "# Prune files for cr-solution", "\n", "if", "module_uoa", "==", "'cr-solution'", ":", "\n", "           ", "ii", "[", "'ignore_names'", "]", "=", "[", "'CK'", ",", "'venv'", "]", "\n", "\n", "", "r", "=", "ck", ".", "list_all_files", "(", "ii", ")", "\n", "if", "r", "[", "'return'", "]", ">", "0", ":", "return", "r", "\n", "\n", "fl", "=", "r", "[", "'list'", "]", "\n", "\n", "# Write archive", "\n", "try", ":", "\n", "          ", "f", "=", "open", "(", "fn", ",", "'wb'", ")", "\n", "z", "=", "zipfile", ".", "ZipFile", "(", "f", ",", "'w'", ",", "zip_method", ")", "\n", "for", "fx", "in", "fl", ":", "\n", "              ", "add", "=", "True", "\n", "for", "k", "in", "skip_words_in_files", ":", "\n", "                  ", "if", "k", "in", "fx", ":", "\n", "                     ", "add", "=", "False", "\n", "break", "\n", "\n", "", "", "if", "add", ":", "\n", "                 ", "p1", "=", "os", ".", "path", ".", "join", "(", "p", ",", "fx", ")", "\n", "z", ".", "write", "(", "p1", ",", "fx", ",", "zip_method", ")", "\n", "", "", "z", ".", "close", "(", ")", "\n", "f", ".", "close", "(", ")", "\n", "\n", "", "except", "Exception", "as", "e", ":", "\n", "           ", "return", "{", "'return'", ":", "1", ",", "'error'", ":", "'failed to prepare archive ('", "+", "format", "(", "e", ")", "+", "')'", "}", "\n", "\n", "# Check size", "\n", "", "statinfo", "=", "os", ".", "stat", "(", "fn", ")", "\n", "pack_size", "=", "statinfo", ".", "st_size", "\n", "\n", "# Check problems with repository or components", "\n", "x", "=", "''", "\n", "if", "repo_dict", ".", "get", "(", "'remote'", ",", "''", ")", "==", "'yes'", ":", "\n", "           ", "x", "+=", "'remote repo;'", "\n", "", "if", "repo_dict", ".", "get", "(", "'private'", ",", "''", ")", "==", "'yes'", ":", "\n", "           ", "x", "+=", "'private repo;'", "\n", "", "if", "repo_dict", ".", "get", "(", "'url'", ",", "''", ")", "==", "''", "and", "repo_uoa", "!=", "'default'", ":", "\n", "           ", "x", "+=", "'repo not shared;'", "\n", "", "if", "pack_size", ">", "config", ".", "PACK_SIZE_WARNING", ":", "\n", "           ", "x", "+=", "'pack size ('", "+", "str", "(", "pack_size", ")", "+", "') > '", "+", "str", "(", "config", ".", "PACK_SIZE_WARNING", ")", "+", "';'", "\n", "\n", "", "skip_component", "=", "False", "\n", "if", "not", "force", "and", "x", "!=", "''", ":", "\n", "           ", "if", "quiet", ":", "\n", "              ", "skip_component", "=", "True", "\n", "", "else", ":", "\n", "              ", "r", "=", "ck", ".", "inp", "(", "{", "'text'", ":", "'  This component has potential issues ('", "+", "x", "+", "'). Skip processing (Y/n)? '", "}", ")", "\n", "if", "r", "[", "'return'", "]", ">", "0", ":", "return", "r", "\n", "s", "=", "r", "[", "'string'", "]", ".", "strip", "(", ")", "\n", "if", "s", "==", "''", "or", "s", "==", "'Y'", "or", "s", "==", "'y'", ":", "\n", "                 ", "skip_component", "=", "True", "\n", "\n", "", "", "", "if", "skip_component", ":", "\n", "           ", "ck", ".", "out", "(", "'    SKIPPED ('", "+", "x", "+", "')'", ")", "\n", "\n", "if", "os", ".", "path", ".", "isfile", "(", "fn", ")", ":", "\n", "              ", "os", ".", "remove", "(", "fn", ")", "\n", "\n", "", "continue", "\n", "\n", "# Convert to MIME to send over internet", "\n", "", "r", "=", "ck", ".", "convert_file_to_upload_string", "(", "{", "'filename'", ":", "fn", "}", ")", "\n", "if", "r", "[", "'return'", "]", ">", "0", ":", "return", "r", "\n", "\n", "pack64", "=", "r", "[", "'file_content_base64'", "]", "\n", "\n", "if", "os", ".", "path", ".", "isfile", "(", "fn", ")", ":", "\n", "           ", "os", ".", "remove", "(", "fn", ")", "\n", "\n", "# Check workspaces", "\n", "", "lworkspaces", "=", "[", "]", "\n", "workspaces", "=", "i", ".", "get", "(", "'workspaces'", ",", "''", ")", "\n", "if", "workspaces", "!=", "None", ":", "\n", "           ", "lworkspaces", "=", "workspaces", ".", "strip", "(", ")", ".", "split", "(", "','", ")", "\n", "\n", "# Get extra info about repo", "\n", "", "os", ".", "chdir", "(", "p", ")", "\n", "\n", "repo_info", "=", "{", "'publish_repo_uoa'", ":", "repo_uoa", ",", "\n", "'publish_repo_uid'", ":", "repo_uid", "}", "\n", "\n", "# Get current Git URL", "\n", "r", "=", "ck", ".", "run_and_get_stdout", "(", "{", "'cmd'", ":", "[", "'git'", ",", "'config'", ",", "'--get'", ",", "'remote.origin.url'", "]", "}", ")", "\n", "if", "r", "[", "'return'", "]", "==", "0", "and", "r", "[", "'return_code'", "]", "==", "0", ":", "\n", "           ", "x", "=", "r", "[", "'stdout'", "]", ".", "strip", "(", ")", "\n", "if", "x", "!=", "''", ":", "repo_info", "[", "'remote_git_url'", "]", "=", "x", "\n", "\n", "# Get current Git branch", "\n", "", "r", "=", "ck", ".", "run_and_get_stdout", "(", "{", "'cmd'", ":", "[", "'git'", ",", "'rev-parse'", ",", "'--abbrev-ref'", ",", "'HEAD'", "]", "}", ")", "\n", "if", "r", "[", "'return'", "]", "==", "0", "and", "r", "[", "'return_code'", "]", "==", "0", ":", "\n", "           ", "x", "=", "r", "[", "'stdout'", "]", ".", "strip", "(", ")", "\n", "if", "x", "!=", "''", ":", "repo_info", "[", "'remote_git_branch'", "]", "=", "x", "\n", "\n", "# Get current Git checkout", "\n", "", "r", "=", "ck", ".", "run_and_get_stdout", "(", "{", "'cmd'", ":", "[", "'git'", ",", "'rev-parse'", ",", "'--short'", ",", "'HEAD'", "]", "}", ")", "\n", "if", "r", "[", "'return'", "]", "==", "0", "and", "r", "[", "'return_code'", "]", "==", "0", ":", "\n", "           ", "x", "=", "r", "[", "'stdout'", "]", ".", "strip", "(", ")", "\n", "if", "x", "!=", "''", ":", "repo_info", "[", "'remote_git_checkout'", "]", "=", "x", "\n", "\n", "", "repo_info", "[", "'dict'", "]", "=", "repo_dict", "\n", "\n", "#TBD: owner, version, info about repo", "\n", "# Sending request", "\n", "r", "=", "comm", ".", "send", "(", "{", "'config'", ":", "cfg", ",", "\n", "'action'", ":", "'publish'", ",", "\n", "'ownership'", ":", "{", "\n", "'private'", ":", "i", ".", "get", "(", "'private'", ",", "False", ")", ",", "\n", "'workspaces'", ":", "lworkspaces", "\n", "}", ",", "\n", "'dict'", ":", "{", "\n", "'publish_module_uoa'", ":", "module_uoa", ",", "\n", "'publish_module_uid'", ":", "module_uid", ",", "\n", "'publish_data_uoa'", ":", "data_uoa", ",", "\n", "'publish_data_uid'", ":", "data_uid", ",", "\n", "'publish_data_name'", ":", "data_name", ",", "\n", "'publish_data_date'", ":", "data_date", ",", "\n", "'publish_pack'", ":", "pack64", ",", "\n", "'publish_pack_size'", ":", "pack_size", ",", "\n", "'repo_info'", ":", "repo_info", ",", "\n", "'first_creation'", ":", "first_creation", ",", "\n", "'version'", ":", "version", ",", "\n", "'author'", ":", "author", ",", "\n", "'author_codereef_id'", ":", "author_codereef_id", ",", "\n", "'copyright'", ":", "copyright2", ",", "\n", "'license'", ":", "license2", ",", "\n", "'source'", ":", "source2", ",", "\n", "'not_digital_component'", ":", "not_digital_component", ",", "\n", "'extra_dict'", ":", "extra_dict", ",", "\n", "'extra_tags'", ":", "extra_tags", ",", "\n", "}", "\n", "}", ")", "\n", "if", "r", "[", "'return'", "]", ">", "0", ":", "\n", "           ", "ck", ".", "out", "(", "'    WARNING: CodeReef API returned error: '", "+", "r", "[", "'error'", "]", ")", "\n", "", "else", ":", "\n", "           ", "data_uid", "=", "r", "[", "'data_uid'", "]", "\n", "ck", ".", "out", "(", "'    CodeReef component ID: '", "+", "data_uid", ")", "\n", "\n", "", "", "os", ".", "chdir", "(", "cur_dir", ")", "\n", "\n", "return", "{", "'return'", ":", "0", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.codereef-ai_client.codereef.obj.versions": [[394, 443], ["config.load", "i.get", "ck.parse_cid", "comm.send.get", "comm.send.get", "comm.send", "comm.send.get", "v.get", "v.get().replace", "ck.out", "v.get"], "function", ["home.repos.pwc.inspect_result.codereef-ai_client.codereef.config.load", "home.repos.pwc.inspect_result.codereef-ai_client.codereef.comm.send"], ["", "def", "versions", "(", "i", ")", ":", "\n", "\n", "    ", "\"\"\"\n    Input:  {\n              cid [str] - CK CID of format (repo UOA:)module UOA:data UOA\n            }\n\n    Output: {\n              return  [int]    - return code = 0 if success or >0 if error\n              (error) [str]    - error string if return>0 \n            }\n    \"\"\"", "\n", "\n", "# Get current configuration", "\n", "r", "=", "config", ".", "load", "(", "{", "}", ")", "\n", "if", "r", "[", "'return'", "]", ">", "0", ":", "return", "r", "\n", "cfg", "=", "r", "[", "'dict'", "]", "\n", "\n", "# CID ###########################################################        ", "\n", "cid", "=", "i", ".", "get", "(", "'cid'", ")", "\n", "\n", "if", "cid", "==", "''", "or", "cid", "==", "None", ":", "\n", "       ", "return", "{", "'return'", ":", "1", ",", "'error'", ":", "'CK entry (CID) is not defined'", "}", "\n", "\n", "# Parse CID", "\n", "", "r", "=", "ck", ".", "parse_cid", "(", "{", "'cid'", ":", "cid", "}", ")", "\n", "if", "r", "[", "'return'", "]", ">", "0", ":", "return", "r", "\n", "\n", "data_uoa", "=", "r", ".", "get", "(", "'data_uoa'", ",", "''", ")", "\n", "module_uoa", "=", "r", ".", "get", "(", "'module_uoa'", ",", "''", ")", "\n", "\n", "# Call CodeReef API", "\n", "r", "=", "comm", ".", "send", "(", "{", "'config'", ":", "cfg", ",", "\n", "'action'", ":", "'list_versions'", ",", "\n", "'dict'", ":", "{", "\n", "'module_uoa'", ":", "module_uoa", ",", "\n", "'data_uoa'", ":", "data_uoa", "\n", "}", "\n", "}", ")", "\n", "if", "r", "[", "'return'", "]", ">", "0", ":", "return", "r", "\n", "\n", "versions", "=", "r", ".", "get", "(", "'versions'", ",", "[", "]", ")", "\n", "for", "v", "in", "versions", ":", "\n", "        ", "vv", "=", "v", ".", "get", "(", "'version'", ",", "''", ")", "\n", "dt", "=", "v", ".", "get", "(", "'iso_datetime'", ",", "''", ")", ".", "replace", "(", "'T'", ",", "' '", ")", "\n", "\n", "ck", ".", "out", "(", "vv", "+", "' ('", "+", "dt", "+", "')'", ")", "\n", "\n", "", "return", "r", "\n", "\n"]], "home.repos.pwc.inspect_result.codereef-ai_client.codereef.obj.open_page": [[447, 499], ["config.load", "cfg.get", "i.get", "ck.parse_cid", "ck.parse_cid.get", "ck.parse_cid.get", "ck.out", "webbrowser.open", "cfg.get.find"], "function", ["home.repos.pwc.inspect_result.codereef-ai_client.codereef.config.load", "home.repos.pwc.inspect_result.codereef-ai_client.codereef.main.open", "home.repos.pwc.inspect_result.codereef-ai_client.codereef.main.find"], ["", "def", "open_page", "(", "i", ")", ":", "\n", "\n", "    ", "\"\"\"\n    Input:  {\n              cid [str] - CK CID of format (repo UOA:)module UOA:data UOA\n            }\n\n    Output: {\n              return  [int]    - return code = 0 if success or >0 if error\n              (error) [str]    - error string if return>0 \n            }\n    \"\"\"", "\n", "\n", "# Get current configuration", "\n", "r", "=", "config", ".", "load", "(", "{", "}", ")", "\n", "if", "r", "[", "'return'", "]", ">", "0", ":", "return", "r", "\n", "cfg", "=", "r", "[", "'dict'", "]", "\n", "\n", "# URL", "\n", "url", "=", "cfg", ".", "get", "(", "'server_url'", ",", "''", ")", "\n", "if", "url", "!=", "''", ":", "\n", "       ", "h", "=", "url", ".", "find", "(", "'api/'", ")", "\n", "if", "h", ">", "0", ":", "\n", "          ", "url", "=", "url", "[", ":", "h", "]", "\n", "", "else", ":", "\n", "          ", "url", "=", "''", "\n", "\n", "", "", "if", "url", "==", "''", ":", "\n", "       ", "url", "=", "'https://codereef.ai/portal/'", "\n", "\n", "# CID ###########################################################        ", "\n", "", "cid", "=", "i", ".", "get", "(", "'cid'", ")", "\n", "\n", "if", "cid", "==", "''", "or", "cid", "==", "None", ":", "\n", "       ", "return", "{", "'return'", ":", "1", ",", "'error'", ":", "'CK entry (CID) is not defined'", "}", "\n", "\n", "# Parse CID", "\n", "", "r", "=", "ck", ".", "parse_cid", "(", "{", "'cid'", ":", "cid", "}", ")", "\n", "if", "r", "[", "'return'", "]", ">", "0", ":", "return", "r", "\n", "\n", "data_uoa", "=", "r", ".", "get", "(", "'data_uoa'", ",", "''", ")", "\n", "module_uoa", "=", "r", ".", "get", "(", "'module_uoa'", ",", "''", ")", "\n", "\n", "# Form URL", "\n", "url", "+=", "'c/'", "+", "module_uoa", "+", "'/'", "+", "data_uoa", "\n", "\n", "ck", ".", "out", "(", "'Opening CodeReef page '", "+", "url", "+", "' ...'", ")", "\n", "\n", "import", "webbrowser", "\n", "webbrowser", ".", "open", "(", "url", ")", "\n", "\n", "return", "{", "'return'", ":", "0", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.codereef-ai_client.codereef.obj.download": [[503, 716], ["i.get", "i.get", "i.get", "i.get", "i.get", "ck.parse_cid", "download.get", "download.get", "download.get", "i.get", "i.get", "config.load", "comm.send", "l.get", "ck.access", "os.path.join", "os.path.isfile", "ck.convert_upload_string_to_file", "ck.load_text_file", "hashlib.md5().hexdigest", "open", "zipfile.ZipFile", "zipfile.ZipFile.namelist", "open.close", "os.remove", "ck.out", "ck.access", "ck.access", "os.remove", "obj.download", "hashlib.md5", "os.path.join", "d.endswith", "len", "ck.out", "dep.get", "dep.get", "dep.get", "obj.download", "d.startswith", "d.startswith", "os.path.dirname", "open", "open.write", "open.close", "len", "obj.download", "os.path.exists", "os.makedirs", "os.path.exists", "os.makedirs", "zipfile.ZipFile.read", "os.path.join.endswith", "os.path.join.endswith", "os.stat", "os.chmod"], "function", ["home.repos.pwc.inspect_result.codereef-ai_client.codereef.config.load", "home.repos.pwc.inspect_result.codereef-ai_client.codereef.comm.send", "home.repos.pwc.inspect_result.codereef-ai_client.codereef.main.access", "home.repos.pwc.inspect_result.codereef-ai_client.codereef.main.open", "home.repos.pwc.inspect_result.codereef-ai_client.codereef.main.access", "home.repos.pwc.inspect_result.codereef-ai_client.codereef.main.access", "home.repos.pwc.inspect_result.codereef-ai_client.codereef.main.download", "home.repos.pwc.inspect_result.codereef-ai_client.codereef.main.download", "home.repos.pwc.inspect_result.codereef-ai_client.codereef.main.open", "home.repos.pwc.inspect_result.codereef-ai_client.codereef.main.download"], ["", "def", "download", "(", "i", ")", ":", "\n", "\n", "    ", "\"\"\"\n    Input:  {\n              cid [str] - CK CID of format (repo UOA:)module UOA:data UOA\n                          (can use wildcards)\n              (version) [str] - assign version\n              (force) [bool] - if True, force download even if components already exists\n\n              (tags) [str] - can search by tags (usually soft/package)\n\n              (all) [bool] - if True, download dependencies (without force!)\n            }\n\n    Output: {\n              return  [int]    - return code = 0 if success or >0 if error\n              (error) [str]    - error string if return>0 \n            }\n    \"\"\"", "\n", "\n", "# CID ###########################################################        ", "\n", "cid", "=", "i", ".", "get", "(", "'cid'", ")", "\n", "\n", "if", "cid", "==", "''", "or", "cid", "==", "None", ":", "\n", "       ", "return", "{", "'return'", ":", "1", ",", "'error'", ":", "'CK entry (CID) is not defined'", "}", "\n", "\n", "", "version", "=", "i", ".", "get", "(", "'version'", ")", "\n", "if", "version", "==", "None", ":", "version", "=", "''", "\n", "\n", "force", "=", "i", ".", "get", "(", "'force'", ")", "\n", "al", "=", "i", ".", "get", "(", "'all'", ")", "\n", "\n", "skip_module_check", "=", "i", ".", "get", "(", "'skip_module_check'", ",", "False", ")", "\n", "\n", "# Parse CID", "\n", "r", "=", "ck", ".", "parse_cid", "(", "{", "'cid'", ":", "cid", "}", ")", "\n", "if", "r", "[", "'return'", "]", ">", "0", ":", "return", "r", "\n", "\n", "repo_uoa", "=", "r", ".", "get", "(", "'repo_uoa'", ",", "''", ")", "\n", "data_uoa", "=", "r", ".", "get", "(", "'data_uoa'", ",", "''", ")", "\n", "module_uoa", "=", "r", ".", "get", "(", "'module_uoa'", ",", "''", ")", "\n", "\n", "tags", "=", "i", ".", "get", "(", "'tags'", ",", "''", ")", "\n", "\n", "spaces", "=", "i", ".", "get", "(", "'spaces'", ",", "''", ")", "\n", "\n", "# Get current configuration", "\n", "r", "=", "config", ".", "load", "(", "{", "}", ")", "\n", "if", "r", "[", "'return'", "]", ">", "0", ":", "return", "r", "\n", "cfg", "=", "r", "[", "'dict'", "]", "\n", "\n", "# Sending request to download", "\n", "r", "=", "comm", ".", "send", "(", "{", "'config'", ":", "cfg", ",", "\n", "'action'", ":", "'download'", ",", "\n", "'dict'", ":", "{", "\n", "'module_uoa'", ":", "module_uoa", ",", "\n", "'data_uoa'", ":", "data_uoa", ",", "\n", "'version'", ":", "version", ",", "\n", "'tags'", ":", "tags", "\n", "}", "\n", "}", ")", "\n", "if", "r", "[", "'return'", "]", ">", "0", ":", "\n", "       ", "return", "r", "\n", "\n", "", "lst", "=", "r", "[", "'components'", "]", "\n", "\n", "for", "l", "in", "lst", ":", "\n", "\n", "        ", "fpack64", "=", "l", "[", "'file_base64'", "]", "\n", "fmd5", "=", "l", "[", "'file_md5'", "]", "\n", "\n", "muoa", "=", "l", "[", "'module_uoa'", "]", "\n", "muid", "=", "l", "[", "'module_uid'", "]", "\n", "\n", "duoa", "=", "l", "[", "'data_uoa'", "]", "\n", "duid", "=", "l", "[", "'data_uid'", "]", "\n", "\n", "dependencies", "=", "l", ".", "get", "(", "'dependencies'", ",", "[", "]", ")", "\n", "\n", "xcid", "=", "muoa", "+", "':'", "+", "duoa", "\n", "\n", "# Check if module exists", "\n", "if", "not", "skip_module_check", ":", "\n", "           ", "r", "=", "ck", ".", "access", "(", "{", "'action'", ":", "'find'", ",", "\n", "'module_uoa'", ":", "'module'", ",", "\n", "'data_uoa'", ":", "muoa", ",", "\n", "'common_func'", ":", "'yes'", "}", ")", "\n", "if", "r", "[", "'return'", "]", ">", "0", ":", "\n", "              ", "if", "r", "[", "'return'", "]", "!=", "16", ":", "return", "r", "\n", "\n", "x", "=", "'module:'", "+", "muoa", "\n", "if", "repo_uoa", "!=", "''", ":", "x", "=", "repo_uoa", "+", "':'", "+", "x", "\n", "\n", "# FGG: we should not add \"version\" for dependencies or related components since it's not the same!", "\n", "#              r=download({'cid':x, 'force':force, 'version':version, 'skip_module_check':True, 'all':al})", "\n", "r", "=", "download", "(", "{", "'cid'", ":", "x", ",", "'force'", ":", "force", ",", "'skip_module_check'", ":", "True", ",", "'all'", ":", "al", "}", ")", "\n", "if", "r", "[", "'return'", "]", ">", "0", ":", "return", "r", "\n", "\n", "# Check if entry already exists", "\n", "", "", "path", "=", "''", "\n", "r", "=", "ck", ".", "access", "(", "{", "'action'", ":", "'find'", ",", "\n", "'common_func'", ":", "'yes'", ",", "\n", "'repo_uoa'", ":", "repo_uoa", ",", "\n", "'module_uoa'", ":", "muid", ",", "\n", "'data_uoa'", ":", "duoa", "}", ")", "\n", "if", "r", "[", "'return'", "]", "==", "0", ":", "\n", "           ", "if", "not", "force", ":", "\n", "              ", "return", "{", "'return'", ":", "8", ",", "'error'", ":", "'local entry for \"'", "+", "xcid", "+", "'\" already exists'", "}", "\n", "", "", "else", ":", "\n", "           ", "if", "r", "[", "'return'", "]", "!=", "16", ":", "return", "r", "\n", "\n", "r", "=", "ck", ".", "access", "(", "{", "'action'", ":", "'add'", ",", "\n", "'common_func'", ":", "'yes'", ",", "\n", "'repo_uoa'", ":", "repo_uoa", ",", "\n", "'module_uoa'", ":", "muid", ",", "\n", "'data_uoa'", ":", "duoa", ",", "\n", "'data_uid'", ":", "duid", ",", "\n", "'ignore_update'", ":", "'yes'", "}", ")", "\n", "if", "r", "[", "'return'", "]", ">", "0", ":", "return", "r", "\n", "\n", "", "path", "=", "r", "[", "'path'", "]", "\n", "\n", "# Prepare pack", "\n", "ppz", "=", "os", ".", "path", ".", "join", "(", "path", ",", "config", ".", "PACK_FILE", ")", "\n", "\n", "if", "os", ".", "path", ".", "isfile", "(", "ppz", ")", ":", "\n", "           ", "if", "not", "force", ":", "\n", "              ", "return", "{", "'return'", ":", "1", ",", "'error'", ":", "'pack file already exists ('", "+", "ppz", "+", "')'", "}", "\n", "", "os", ".", "remove", "(", "ppz", ")", "\n", "\n", "# Save pack to file", "\n", "", "rx", "=", "ck", ".", "convert_upload_string_to_file", "(", "{", "'file_content_base64'", ":", "fpack64", ",", "'filename'", ":", "ppz", "}", ")", "\n", "if", "rx", "[", "'return'", "]", ">", "0", ":", "return", "rx", "\n", "\n", "# MD5 of the pack", "\n", "rx", "=", "ck", ".", "load_text_file", "(", "{", "'text_file'", ":", "ppz", ",", "'keep_as_bin'", ":", "'yes'", "}", ")", "\n", "if", "rx", "[", "'return'", "]", ">", "0", ":", "return", "rx", "\n", "bpack", "=", "rx", "[", "'bin'", "]", "\n", "\n", "import", "hashlib", "\n", "md5", "=", "hashlib", ".", "md5", "(", "bpack", ")", ".", "hexdigest", "(", ")", "\n", "\n", "if", "md5", "!=", "fmd5", ":", "\n", "           ", "return", "{", "'return'", ":", "1", ",", "'error'", ":", "'MD5 of the newly created pack ('", "+", "md5", "+", "') did not match the one from CodeReef server ('", "+", "fmd5", "+", "')'", "}", "\n", "\n", "# Unpack to src subdirectory", "\n", "", "import", "zipfile", "\n", "\n", "f", "=", "open", "(", "ppz", ",", "'rb'", ")", "\n", "z", "=", "zipfile", ".", "ZipFile", "(", "f", ")", "\n", "for", "d", "in", "z", ".", "namelist", "(", ")", ":", "\n", "            ", "if", "d", "!=", "'.'", "and", "d", "!=", "'..'", "and", "not", "d", ".", "startswith", "(", "'/'", ")", "and", "not", "d", ".", "startswith", "(", "'\\\\'", ")", ":", "\n", "               ", "pp", "=", "os", ".", "path", ".", "join", "(", "path", ",", "d", ")", "\n", "if", "d", ".", "endswith", "(", "'/'", ")", ":", "\n", "# create directory", "\n", "                  ", "if", "not", "os", ".", "path", ".", "exists", "(", "pp", ")", ":", "os", ".", "makedirs", "(", "pp", ")", "\n", "", "else", ":", "\n", "                  ", "ppd", "=", "os", ".", "path", ".", "dirname", "(", "pp", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "ppd", ")", ":", "os", ".", "makedirs", "(", "ppd", ")", "\n", "\n", "# extract file", "\n", "fo", "=", "open", "(", "pp", ",", "'wb'", ")", "\n", "fo", ".", "write", "(", "z", ".", "read", "(", "d", ")", ")", "\n", "fo", ".", "close", "(", ")", "\n", "\n", "if", "pp", ".", "endswith", "(", "'.sh'", ")", "or", "pp", ".", "endswith", "(", "'.bash'", ")", ":", "\n", "                     ", "import", "stat", "\n", "st", "=", "os", ".", "stat", "(", "pp", ")", "\n", "os", ".", "chmod", "(", "pp", ",", "st", ".", "st_mode", "|", "stat", ".", "S_IEXEC", ")", "\n", "\n", "", "", "", "", "f", ".", "close", "(", ")", "\n", "\n", "# Remove pack file", "\n", "os", ".", "remove", "(", "ppz", ")", "\n", "\n", "# Note", "\n", "ck", ".", "out", "(", "spaces", "+", "'Successfully downloaded \"'", "+", "xcid", "+", "'\" to '", "+", "path", ")", "\n", "\n", "# Check deps", "\n", "if", "al", ":", "\n", "           ", "if", "len", "(", "dependencies", ")", ">", "0", ":", "\n", "              ", "ck", ".", "out", "(", "spaces", "+", "'  Checking dependencies ...'", ")", "\n", "\n", "#           import json", "\n", "#           print (json.dumps(dependencies))", "\n", "#           input('xyz')", "\n", "\n", "", "for", "dep", "in", "dependencies", ":", "\n", "               ", "muoa", "=", "dep", ".", "get", "(", "'module_uid'", ",", "''", ")", "\n", "duoa", "=", "dep", ".", "get", "(", "'data_uid'", ",", "''", ")", "\n", "\n", "tags", "=", "dep", ".", "get", "(", "'tags'", ",", "[", "]", ")", "\n", "xtags", "=", "''", "\n", "if", "len", "(", "tags", ")", ">", "0", ":", "\n", "                  ", "xtags", "=", "','", ".", "join", "(", "tags", ")", "\n", "muoa", "=", "'package'", "\n", "duoa", "=", "''", "\n", "\n", "", "cid", "=", "muoa", "+", "':'", "+", "duoa", "\n", "rx", "=", "download", "(", "{", "'cid'", ":", "cid", ",", "\n", "'all'", ":", "al", ",", "\n", "'tags'", ":", "xtags", ",", "\n", "'spaces'", ":", "spaces", "+", "'    '", "}", ")", "\n", "if", "rx", "[", "'return'", "]", ">", "0", "and", "rx", "[", "'return'", "]", "!=", "8", "and", "rx", "[", "'return'", "]", "!=", "16", ":", "return", "rx", "\n", "if", "rx", "[", "'return'", "]", "==", "16", ":", "\n", "                  ", "if", "xtags", "==", "''", ":", "return", "rx", "\n", "rx", "=", "download", "(", "{", "'cid'", ":", "'soft:'", ",", "\n", "'all'", ":", "al", ",", "\n", "'tags'", ":", "xtags", ",", "\n", "'spaces'", ":", "spaces", "+", "'    '", "}", ")", "\n", "if", "rx", "[", "'return'", "]", ">", "0", "and", "rx", "[", "'return'", "]", "!=", "8", ":", "return", "rx", "\n", "\n", "", "", "", "", "return", "r", "\n", "", ""]], "home.repos.pwc.inspect_result.codereef-ai_client.codereef.config.load": [[63, 110], ["ck.access", "os.environ.get", "os.environ.get", "config.update", "cfg.get"], "function", ["home.repos.pwc.inspect_result.codereef-ai_client.codereef.main.access", "home.repos.pwc.inspect_result.codereef-ai_client.codereef.main.update"], ["def", "load", "(", "i", ")", ":", "\n", "    ", "\"\"\"\n    Input:  {\n            }\n\n    Output: {\n              return  [int]    - return code = 0 if success or >0 if error\n              (error) [str]    - error string if return>0 \n\n              dict    [dict]   - configuration dictionary\n              path    [str]    - path to CK cfg entry\n            }\n    \"\"\"", "\n", "\n", "global", "bootstrapping", "\n", "\n", "import", "os", "\n", "\n", "# Get current configuration", "\n", "cfg", "=", "{", "\n", "'server_url'", ":", "CR_DEFAULT_SERVER_URL", "# Default", "\n", "}", "\n", "path", "=", "''", "\n", "\n", "ii", "=", "{", "'action'", ":", "'load'", ",", "\n", "'repo_uoa'", ":", "CK_CFG_REPO_UOA", ",", "\n", "'module_uoa'", ":", "CK_CFG_MODULE_UID", ",", "\n", "'data_uoa'", ":", "CK_CFG_DATA_UOA", "}", "\n", "\n", "r", "=", "ck", ".", "access", "(", "ii", ")", "\n", "if", "(", "r", "[", "'return'", "]", ">", "0", "and", "r", "[", "'return'", "]", "!=", "16", ")", ":", "return", "r", "\n", "\n", "if", "r", "[", "'return'", "]", "==", "0", ":", "\n", "       ", "cfg", "=", "r", "[", "'dict'", "]", "\n", "path", "=", "r", "[", "'path'", "]", "\n", "\n", "", "if", "not", "bootstrapping", "and", "(", "r", "[", "'return'", "]", "==", "16", "or", "cfg", ".", "get", "(", "'bootstrapped'", ",", "''", ")", "!=", "'yes'", ")", ":", "\n", "       ", "rx", "=", "update", "(", "{", "'cfg'", ":", "cfg", "}", ")", "\n", "if", "rx", "[", "'return'", "]", ">", "0", ":", "return", "rx", "\n", "\n", "# Check overriding by env", "\n", "", "v", "=", "os", ".", "environ", ".", "get", "(", "CR_ENV_USERNAME", ",", "''", ")", "\n", "if", "v", "!=", "''", ":", "cfg", "[", "'username'", "]", "=", "v", "\n", "v", "=", "os", ".", "environ", ".", "get", "(", "CR_ENV_API_KEY", ",", "''", ")", "\n", "if", "v", "!=", "''", ":", "cfg", "[", "'api_key'", "]", "=", "v", "\n", "\n", "return", "{", "'return'", ":", "0", ",", "'dict'", ":", "cfg", ",", "'path'", ":", "path", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.codereef-ai_client.codereef.config.update": [[114, 164], ["i.get", "i.get", "ck.out", "ck.out", "ck.out", "ck.access", "ck.out", "ck.out", "i.get.get", "obj.download", "x.get", "ck.out"], "function", ["home.repos.pwc.inspect_result.codereef-ai_client.codereef.main.access", "home.repos.pwc.inspect_result.codereef-ai_client.codereef.main.download"], ["", "def", "update", "(", "i", ")", ":", "\n", "    ", "\"\"\"\n    Input:  {\n              (force) [bool] - if True, force update\n            }\n\n    Output: {\n              return  [int]    - return code = 0 if success or >0 if error\n              (error) [str]    - error string if return>0 \n            }\n    \"\"\"", "\n", "\n", "global", "bootstrapping", "\n", "bootstrapping", "=", "True", "\n", "\n", "force", "=", "i", ".", "get", "(", "'force'", ")", "\n", "cfg", "=", "i", ".", "get", "(", "'cfg'", ",", "{", "}", ")", "\n", "\n", "from", ".", "import", "obj", "\n", "\n", "title", "=", "'Bootstrapping'", "\n", "if", "cfg", ".", "get", "(", "'bootstrapped'", ",", "''", ")", "==", "'yes'", ":", "title", "=", "'Updating'", "\n", "\n", "ck", ".", "out", "(", "title", "+", "' CodeReef client:'", ")", "\n", "ck", ".", "out", "(", "''", ")", "\n", "\n", "for", "x", "in", "CR_SOLUTION_CK_COMPONENTS", ":", "\n", "        ", "r", "=", "obj", ".", "download", "(", "{", "'cid'", ":", "x", "[", "'cid'", "]", ",", "'version'", ":", "x", ".", "get", "(", "'version'", ",", "''", ")", ",", "'force'", ":", "force", "}", ")", "\n", "if", "r", "[", "'return'", "]", ">", "0", ":", "\n", "           ", "if", "r", "[", "'return'", "]", "!=", "8", ":", "return", "r", "\n", "else", ":", "ck", ".", "out", "(", "r", "[", "'error'", "]", ")", "\n", "\n", "", "", "ck", ".", "out", "(", "''", ")", "\n", "\n", "# Update cfg", "\n", "cfg", "[", "'bootstrapped'", "]", "=", "'yes'", "\n", "\n", "ii", "=", "{", "'action'", ":", "'update'", ",", "\n", "'repo_uoa'", ":", "CK_CFG_REPO_UOA", ",", "\n", "'module_uoa'", ":", "CK_CFG_MODULE_UID", ",", "\n", "'data_uoa'", ":", "CK_CFG_DATA_UOA", ",", "\n", "'dict'", ":", "cfg", ",", "\n", "'sort_keys'", ":", "'yes'", "}", "\n", "\n", "r", "=", "ck", ".", "access", "(", "ii", ")", "\n", "\n", "ck", ".", "out", "(", "title", "+", "' finished!'", ")", "\n", "ck", ".", "out", "(", "''", ")", "\n", "\n", "return", "r", "\n", "\n"]], "home.repos.pwc.inspect_result.codereef-ai_client.codereef.config.get_work_dir": [[168, 192], ["expanduser", "os.path.join", "os.path.isdir", "os.makedirs"], "function", ["None"], ["", "def", "get_work_dir", "(", "i", ")", ":", "\n", "    ", "\"\"\"\n    Input:  {\n            }\n\n    Output: {\n              return  [int]    - return code = 0 if success or >0 if error\n              (error) [str]    - error string if return>0 \n\n              path    [str]    - path to work dir\n            }\n    \"\"\"", "\n", "\n", "import", "os", "\n", "\n", "# Get home user directory", "\n", "from", "os", ".", "path", "import", "expanduser", "\n", "home", "=", "expanduser", "(", "\"~\"", ")", "\n", "\n", "work_dir", "=", "os", ".", "path", ".", "join", "(", "home", ",", "CR_WORK_DIR", ")", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "work_dir", ")", ":", "\n", "       ", "os", ".", "makedirs", "(", "work_dir", ")", "\n", "\n", "", "return", "{", "'return'", ":", "0", ",", "'path'", ":", "work_dir", "}", "\n", "", ""]], "home.repos.pwc.inspect_result.codereef-ai_client.codereef.graph.init": [[63, 246], ["i.get", "i.get", "ck.access", "ck.out", "ck.out", "ck.out", "ck.out", "ck.out", "os.path.join", "copy.deepcopy", "os.path.join", "ck.out", "ck.out", "ck.out", "ck.out", "ck.out", "ck.out", "ck.out", "ck.out", "ck.out", "ck.inp", "rx[].strip().lower", "ck.access", "ck.inp", "r[].strip", "ck.inp", "r[].strip", "ck.inp", "r[].strip().split", "ck.inp", "r[].strip", "ck.load_json_file", "dt[].update", "ck.save_json_to_file", "ck.out", "obj.publish", "ck.out", "ck.out", "ck.out", "ck.out", "meta.get", "meta.get", "meta.get().get", "r[].get", "meta.get.append", "ck.inp", "r[].strip", "os.path.isfile", "rx[].strip", "len", "r[].strip", "t.strip", "r[].get.get", "meta.get"], "function", ["home.repos.pwc.inspect_result.codereef-ai_client.codereef.main.access", "home.repos.pwc.inspect_result.codereef-ai_client.codereef.main.access", "home.repos.pwc.inspect_result.codereef-ai_client.codereef.main.update", "home.repos.pwc.inspect_result.codereef-ai_client.codereef.main.publish"], ["def", "init", "(", "i", ")", ":", "\n", "\n", "    ", "\"\"\"\n    Input:  {\n              uid [str] - graph CodeReef identifyer\n              (version) [str] - graph version\n              (desc_file) [str] - file with graph description\n            }\n\n    Output: {\n              return  [int]    - return code = 0 if success or >0 if error\n              (error) [str]    - error string if return>0 \n\n              dict    [dict]   - configuration dictionary\n              path    [str]    - path to CK cfg entry\n            }\n    \"\"\"", "\n", "\n", "# CID ###########################################################        ", "\n", "uid", "=", "i", "[", "'uid'", "]", "\n", "if", "uid", "==", "None", ":", "uid", "=", "''", "\n", "\n", "version", "=", "i", ".", "get", "(", "'version'", ")", "\n", "if", "version", "==", "None", ":", "version", "=", "''", "\n", "\n", "desc_file", "=", "i", ".", "get", "(", "'desc_file'", ",", "''", ")", "\n", "if", "desc_file", "==", "None", ":", "desc_file", "=", "''", "\n", "\n", "# If UID!='', check if already exists ...", "\n", "found", "=", "False", "\n", "meta", "=", "meta_template", "\n", "path", "=", "''", "\n", "data_name", "=", "''", "\n", "tags", "=", "[", "]", "\n", "meta_info", "=", "''", "\n", "source", "=", "''", "\n", "extra_info", "=", "{", "}", "\n", "\n", "if", "uid", "!=", "''", ":", "\n", "       ", "r", "=", "ck", ".", "access", "(", "{", "'action'", ":", "'load'", ",", "\n", "'module_uoa'", ":", "'cr-result'", ",", "\n", "'data_uoa'", ":", "uid", "}", ")", "\n", "if", "r", "[", "'return'", "]", ">", "0", ":", "\n", "          ", "if", "r", "[", "'return'", "]", "!=", "16", ":", "return", "r", "\n", "", "else", ":", "\n", "          ", "found", "=", "True", "\n", "meta", "=", "r", "[", "'dict'", "]", "\n", "path", "=", "r", "[", "'path'", "]", "\n", "data_name", "=", "r", "[", "'data_name'", "]", "\n", "\n", "tags", "=", "meta", ".", "get", "(", "'tags'", ",", "[", "]", ")", "\n", "source", "=", "meta", ".", "get", "(", "'source'", ",", "''", ")", "\n", "meta_info", "=", "meta", ".", "get", "(", "'meta'", ",", "{", "}", ")", ".", "get", "(", "'info'", ",", "''", ")", "\n", "\n", "extra_info", "=", "r", "[", "'info'", "]", ".", "get", "(", "'control'", ",", "{", "}", ")", "\n", "\n", "# Check if init from scratch and no title", "\n", "", "", "if", "not", "found", "or", "data_name", "==", "''", ":", "\n", "       ", "r", "=", "ck", ".", "inp", "(", "{", "'text'", ":", "'Select a title for your graph: '", "}", ")", "\n", "if", "r", "[", "'return'", "]", ">", "0", ":", "return", "r", "\n", "\n", "data_name", "=", "r", "[", "'string'", "]", ".", "strip", "(", ")", "\n", "\n", "meta", "[", "'meta'", "]", "[", "'title'", "]", "=", "data_name", "\n", "\n", "# Check if init from scratch and no title", "\n", "", "if", "not", "found", "or", "meta_info", "==", "''", ":", "\n", "       ", "r", "=", "ck", ".", "inp", "(", "{", "'text'", ":", "'Enter general info about your graph: '", "}", ")", "\n", "if", "r", "[", "'return'", "]", ">", "0", ":", "return", "r", "\n", "\n", "x", "=", "r", "[", "'string'", "]", ".", "strip", "(", ")", "\n", "\n", "if", "x", "==", "''", ":", "x", "=", "' '", "\n", "\n", "meta", "[", "'meta'", "]", "[", "'info'", "]", "=", "x", "\n", "\n", "# Adding tags", "\n", "", "if", "not", "found", "or", "(", "len", "(", "tags", ")", "==", "1", "and", "'codereef-result'", "in", "tags", ")", ":", "\n", "       ", "r", "=", "ck", ".", "inp", "(", "{", "'text'", ":", "'Enter tags for your graph separated by commas: '", "}", ")", "\n", "if", "r", "[", "'return'", "]", ">", "0", ":", "return", "r", "\n", "\n", "xtags", "=", "r", "[", "'string'", "]", ".", "strip", "(", ")", ".", "split", "(", "','", ")", "\n", "\n", "for", "t", "in", "xtags", ":", "\n", "           ", "tags", ".", "append", "(", "t", ".", "strip", "(", ")", ")", "\n", "\n", "", "meta", "[", "'tags'", "]", "=", "tags", "\n", "\n", "# Checking source", "\n", "", "if", "not", "found", "or", "source", "==", "''", ":", "\n", "       ", "r", "=", "ck", ".", "inp", "(", "{", "'text'", ":", "'Enter source of results for your graph (can be URL): '", "}", ")", "\n", "if", "r", "[", "'return'", "]", ">", "0", ":", "return", "r", "\n", "\n", "source", "=", "r", "[", "'string'", "]", ".", "strip", "(", ")", "\n", "\n", "meta", "[", "'source'", "]", "=", "source", "\n", "\n", "# Checking authors", "\n", "", "for", "x", "in", "extra_info_desc", ":", "\n", "        ", "k", "=", "x", "[", "'key'", "]", "\n", "n", "=", "x", "[", "'name'", "]", "\n", "\n", "if", "not", "found", "or", "extra_info", ".", "get", "(", "k", ",", "''", ")", "==", "''", ":", "\n", "           ", "r", "=", "ck", ".", "inp", "(", "{", "'text'", ":", "'Enter '", "+", "n", "+", "': '", "}", ")", "\n", "if", "r", "[", "'return'", "]", ">", "0", ":", "return", "r", "\n", "\n", "s", "=", "r", "[", "'string'", "]", ".", "strip", "(", ")", "\n", "\n", "extra_info", "[", "k", "]", "=", "s", "\n", "\n", "# Creating/updating graph", "\n", "", "", "a", "=", "'add'", "\n", "if", "found", ":", "a", "=", "'update'", "\n", "\n", "ii", "=", "{", "'action'", ":", "a", ",", "\n", "'module_uoa'", ":", "'cr-result'", ",", "\n", "'data_uoa'", ":", "uid", ",", "\n", "'dict'", ":", "meta", ",", "\n", "'sort_keys'", ":", "'yes'", ",", "\n", "'data_name'", ":", "data_name", ",", "\n", "'substitute'", ":", "'yes'", ",", "\n", "'extra_info'", ":", "extra_info", "}", "\n", "\n", "r", "=", "ck", ".", "access", "(", "ii", ")", "\n", "if", "r", "[", "'return'", "]", ">", "0", ":", "return", "r", "\n", "\n", "data_uoa", "=", "r", "[", "'data_uoa'", "]", "\n", "data_uid", "=", "r", "[", "'data_uid'", "]", "\n", "path", "=", "r", "[", "'path'", "]", "\n", "\n", "x", "=", "'initialized'", "\n", "if", "found", ":", "x", "=", "'updated'", "\n", "\n", "ck", ".", "out", "(", "'CodeReef graph was successfully '", "+", "x", "+", "':'", ")", "\n", "ck", ".", "out", "(", "''", ")", "\n", "ck", ".", "out", "(", "'  CK UID:  '", "+", "data_uid", ")", "\n", "ck", ".", "out", "(", "'  CK name: '", "+", "data_uoa", ")", "\n", "ck", ".", "out", "(", "'  CK path: '", "+", "path", ")", "\n", "\n", "# Add desc", "\n", "p1", "=", "os", ".", "path", ".", "join", "(", "path", ",", "'desc.json'", ")", "\n", "\n", "dt", "=", "copy", ".", "deepcopy", "(", "desc_template", ")", "\n", "if", "desc_file", "!=", "''", ":", "\n", "       ", "rx", "=", "ck", ".", "load_json_file", "(", "{", "'json_file'", ":", "desc_file", "}", ")", "\n", "if", "rx", "[", "'return'", "]", ">", "0", ":", "return", "rx", "\n", "dx", "=", "rx", "[", "'dict'", "]", "\n", "dt", "[", "'data_config'", "]", ".", "update", "(", "dx", ")", "\n", "\n", "", "if", "desc_file", "!=", "''", "or", "not", "os", ".", "path", ".", "isfile", "(", "p1", ")", ":", "\n", "       ", "rx", "=", "ck", ".", "save_json_to_file", "(", "{", "'json_file'", ":", "p1", ",", "'dict'", ":", "dt", ",", "'sort_keys'", ":", "'yes'", "}", ")", "\n", "if", "rx", "[", "'return'", "]", ">", "0", ":", "return", "rx", "\n", "\n", "", "p2", "=", "os", ".", "path", ".", "join", "(", "path", ",", "'.cm'", ",", "'meta.json'", ")", "\n", "\n", "ck", ".", "out", "(", "''", ")", "\n", "ck", ".", "out", "(", "'You can continue updating graph using following files: '", ")", "\n", "ck", ".", "out", "(", "''", ")", "\n", "ck", ".", "out", "(", "'  Graph general meta info: '", "+", "p1", ")", "\n", "ck", ".", "out", "(", "'     See example at https://codereef.ai/portal/c/cr-result/sota-mlperf-inference-results-v0.5-open-available/?action=download&filename=.cm/meta.json'", ")", "\n", "ck", ".", "out", "(", "''", ")", "\n", "ck", ".", "out", "(", "'  Graph axes info: '", "+", "p2", ")", "\n", "ck", ".", "out", "(", "'     See example at https://codereef.ai/portal/c/cr-result/sota-mlperf-inference-results-v0.5-open-available/?action=download&filename=desc.json'", ")", "\n", "\n", "# Need to publish", "\n", "ck", ".", "out", "(", "''", ")", "\n", "rx", "=", "ck", ".", "inp", "(", "{", "'text'", ":", "'Publish graph at CodeReef (Y/n)?'", "}", ")", "\n", "if", "rx", "[", "'return'", "]", ">", "0", ":", "return", "rx", "\n", "s", "=", "rx", "[", "'string'", "]", ".", "strip", "(", ")", ".", "lower", "(", ")", "\n", "\n", "if", "s", "==", "''", "or", "s", "==", "'y'", ":", "\n", "       ", "ck", ".", "out", "(", "''", ")", "\n", "r", "=", "obj", ".", "publish", "(", "{", "'cid'", ":", "'cr-result:'", "+", "data_uoa", ",", "\n", "'version'", ":", "version", ",", "\n", "'force'", ":", "True", "}", ")", "\n", "\n", "", "else", ":", "\n", "       ", "ck", ".", "out", "(", "''", ")", "\n", "ck", ".", "out", "(", "'You can publish your graph on CodeReef portal using the following commands when ready: '", ")", "\n", "ck", ".", "out", "(", "''", ")", "\n", "ck", ".", "out", "(", "'  cr publish cr-result:'", "+", "data_uoa", "+", "' --version=1.0.0 --force (--private)'", ")", "\n", "\n", "", "return", "r", "\n", "\n"]], "home.repos.pwc.inspect_result.codereef-ai_client.codereef.graph.push": [[250, 339], ["i.get", "i.get", "i.get", "i.get", "config.load", "cfg.get", "comm.send", "ck.out", "ck.load_json_file", "json_string.replace.replace", "json.loads", "type", "type"], "function", ["home.repos.pwc.inspect_result.codereef-ai_client.codereef.config.load", "home.repos.pwc.inspect_result.codereef-ai_client.codereef.comm.send"], ["", "def", "push", "(", "i", ")", ":", "\n", "\n", "    ", "\"\"\"\n    Input:  {\n              uid [str] - graph CodeReef identifyer\n              (version) [str] - graph version\n              (filename) [str] - JSON file with results\n              (json) [str] - JSON string from command line (use ' instead of \")\n              (point) [str] - specific point name to add/update\n            }\n\n    Output: {\n              return  [int]    - return code = 0 if success or >0 if error\n              (error) [str]    - error string if return>0 \n\n              dict    [dict]   - configuration dictionary\n              path    [str]    - path to CK cfg entry\n            }\n    \"\"\"", "\n", "\n", "# CID ###########################################################        ", "\n", "uid", "=", "i", "[", "'uid'", "]", "\n", "if", "uid", "==", "''", ":", "\n", "       ", "return", "{", "'return'", ":", "1", ",", "'error'", ":", "'graph UID is not defined!'", "}", "\n", "\n", "", "version", "=", "i", ".", "get", "(", "'version'", ")", "\n", "if", "version", "==", "None", ":", "version", "=", "''", "\n", "\n", "filename", "=", "i", ".", "get", "(", "'filename'", ",", "''", ")", "\n", "json_string", "=", "i", ".", "get", "(", "'json'", ",", "''", ")", "\n", "\n", "if", "filename", "==", "''", "and", "json_string", "==", "''", ":", "\n", "       ", "return", "{", "'return'", ":", "1", ",", "'error'", ":", "'either \"filename\" or \"json\" should define results to be pushed'", "}", "\n", "\n", "", "point", "=", "i", ".", "get", "(", "'point'", ",", "''", ")", "\n", "\n", "# Prepare data", "\n", "data", "=", "[", "]", "\n", "\n", "if", "filename", "!=", "''", ":", "\n", "       ", "r", "=", "ck", ".", "load_json_file", "(", "{", "'json_file'", ":", "filename", "}", ")", "\n", "if", "r", "[", "'return'", "]", ">", "0", ":", "return", "r", "\n", "\n", "data2", "=", "r", "[", "'dict'", "]", "\n", "if", "type", "(", "data2", ")", "==", "dict", ":", "\n", "          ", "data2", "=", "[", "data2", "]", "\n", "\n", "", "data", "+=", "data2", "\n", "\n", "", "if", "json_string", "!=", "''", ":", "\n", "       ", "import", "json", "\n", "\n", "json_string", "=", "json_string", ".", "replace", "(", "\"'\"", ",", "'\"'", ")", "\n", "\n", "data2", "=", "json", ".", "loads", "(", "json_string", ")", "\n", "\n", "if", "type", "(", "data2", ")", "==", "dict", ":", "\n", "          ", "data2", "=", "[", "data2", "]", "\n", "\n", "", "data", "+=", "data2", "\n", "\n", "# Send request", "\n", "\n", "# Get current configuration", "\n", "", "r", "=", "config", ".", "load", "(", "{", "}", ")", "\n", "if", "r", "[", "'return'", "]", ">", "0", ":", "return", "r", "\n", "cfg", "=", "r", "[", "'dict'", "]", "\n", "\n", "# Check if username and API_Key are empty and then use default crowd-user ...", "\n", "username", "=", "cfg", ".", "get", "(", "'username'", ",", "''", ")", "\n", "if", "username", "==", "''", "or", "username", "==", "None", ":", "\n", "       ", "cfg", "[", "'username'", "]", "=", "config", ".", "CR_DEFAULT_SERVER_USER", "\n", "cfg", "[", "'api_key'", "]", "=", "config", ".", "CR_DEFAULT_SERVER_API_KEY", "\n", "\n", "# Sending request to download", "\n", "", "r", "=", "comm", ".", "send", "(", "{", "'config'", ":", "cfg", ",", "\n", "'action'", ":", "'push_result'", ",", "\n", "'dict'", ":", "{", "\n", "'data_uoa'", ":", "uid", ",", "\n", "'version'", ":", "version", ",", "\n", "'point'", ":", "point", ",", "\n", "'data'", ":", "data", "\n", "}", "\n", "}", ")", "\n", "if", "r", "[", "'return'", "]", ">", "0", ":", "return", "r", "\n", "\n", "ck", ".", "out", "(", "'  Successfully pushed point to CodeReef graph!'", ")", "\n", "\n", "return", "r", "\n", "", ""]], "home.repos.pwc.inspect_result.codereef-ai_client.codereef.comm.send": [[22, 155], ["i.get", "i.get.get", "i.get.get", "i.get.get", "i.get.get", "i.get.get", "i.get.get", "i.get", "i.get", "i.get", "ck.dumps_json", "urlencode", "urllib2.Request", "ck.convert_json_str_to_dict", "s.decode.encode", "post.encode.encode", "ssl.create_default_context", "urllib2.HTTPPasswordMgrWithDefaultRealm", "urllib2.HTTPPasswordMgrWithDefaultRealm.add_password", "urllib2.install_opener", "urllib2.urlopen", "urllib2.urlopen.read", "urllib2.urlopen.close", "s.decode.decode", "int", "urllib2.build_opener", "urllib2.install_opener", "urllib2.HTTPBasicAuthHandler", "urllib2.HTTPSHandler", "urllib2.build_opener", "urllib2.install_opener", "urllib2.HTTPBasicAuthHandler", "urllib2.build_opener", "urllib2.HTTPSHandler", "format", "format"], "function", ["None"], ["def", "send", "(", "i", ")", ":", "\n", "    ", "\"\"\"\n    Input:  {\n              action [str]     - remote API action name\n              config [dict]    - configuration for remote server\n              dict [dict]      - dict to send to remote server\n              ownership [dict] - info about user ownership\n            }\n\n    Output: {\n              return  [int]    - return code = 0 if success or >0 if error\n              (error) [str]    - error string if return>0 \n            }\n    \"\"\"", "\n", "\n", "# Get server and user config", "\n", "config", "=", "i", ".", "get", "(", "'config'", ",", "{", "}", ")", "\n", "\n", "username", "=", "config", ".", "get", "(", "'username'", ")", "\n", "#    if username=='' or username==None: ", "\n", "#       return {'return':1, 'error':'Username is not defined'}", "\n", "\n", "api_key", "=", "config", ".", "get", "(", "'api_key'", ")", "\n", "#    if api_key=='' or api_key==None: ", "\n", "#       return {'return':1, 'error': 'API key is not defined'}", "\n", "\n", "url", "=", "config", ".", "get", "(", "'server_url'", ")", "\n", "if", "url", "==", "''", "or", "url", "==", "None", ":", "\n", "       ", "return", "{", "'return'", ":", "1", ",", "'error'", ":", "'CodeReef API URL is not defined'", "}", "\n", "\n", "", "remote_server_user", "=", "config", ".", "get", "(", "'server_user'", ")", "\n", "if", "remote_server_user", "==", "None", ":", "remote_server_user", "=", "''", "\n", "\n", "remote_server_password", "=", "config", ".", "get", "(", "'server_pass'", ")", "\n", "if", "remote_server_password", "==", "None", ":", "remote_server_password", "=", "''", "\n", "\n", "remote_skip_certificate_validation", "=", "config", ".", "get", "(", "'server_skip_validation'", ")", "\n", "if", "remote_skip_certificate_validation", "==", "None", ":", "remote_skip_certificate_validation", "=", "''", "\n", "\n", "# Import modules compatible with Python 2.x and 3.x", "\n", "import", "urllib", "\n", "\n", "try", ":", "import", "urllib", ".", "request", "as", "urllib2", "\n", "except", ":", "import", "urllib2", "\n", "\n", "try", ":", "from", "urllib", ".", "parse", "import", "urlencode", "\n", "except", ":", "from", "urllib", "import", "urlencode", "\n", "\n", "# Prepare dict to send to remote server", "\n", "ii", "=", "{", "}", "\n", "ii", "[", "'action'", "]", "=", "i", ".", "get", "(", "'action'", ",", "''", ")", "\n", "ii", "[", "'dict'", "]", "=", "i", ".", "get", "(", "'dict'", ",", "{", "}", ")", "\n", "ii", "[", "'ownership'", "]", "=", "i", ".", "get", "(", "'ownership'", ",", "{", "}", ")", "\n", "ii", "[", "'username'", "]", "=", "username", "\n", "ii", "[", "'api_key'", "]", "=", "api_key", "\n", "\n", "# Prepare post variables", "\n", "r", "=", "ck", ".", "dumps_json", "(", "{", "'dict'", ":", "ii", ",", "'skip_indent'", ":", "'yes'", "}", ")", "\n", "if", "r", "[", "'return'", "]", ">", "0", ":", "return", "r", "\n", "\n", "s", "=", "r", "[", "'string'", "]", "\n", "if", "sys", ".", "version_info", "[", "0", "]", ">", "2", ":", "s", "=", "s", ".", "encode", "(", "'utf8'", ")", "\n", "\n", "post", "=", "urlencode", "(", "{", "'cr_json'", ":", "s", "}", ")", "# We have to send JSON as string", "\n", "if", "sys", ".", "version_info", "[", "0", "]", ">", "2", ":", "post", "=", "post", ".", "encode", "(", "'utf8'", ")", "\n", "\n", "# Check if skip SSL certificate", "\n", "ctx", "=", "None", "\n", "add_ctx", "=", "False", "\n", "\n", "if", "remote_skip_certificate_validation", "==", "'yes'", ":", "\n", "\n", "       ", "import", "ssl", "\n", "\n", "ctx", "=", "ssl", ".", "create_default_context", "(", ")", "\n", "ctx", ".", "check_hostname", "=", "False", "\n", "ctx", ".", "verify_mode", "=", "ssl", ".", "CERT_NONE", "\n", "\n", "add_ctx", "=", "True", "\n", "\n", "# If auth", "\n", "", "auth", "=", "None", "\n", "add_auth", "=", "False", "\n", "\n", "if", "remote_server_user", "!=", "''", "and", "remote_server_user", "!=", "None", ":", "\n", "       ", "if", "remote_server_password", "==", "None", ":", "remote_server_password", "=", "''", "\n", "\n", "auth", "=", "urllib2", ".", "HTTPPasswordMgrWithDefaultRealm", "(", ")", "\n", "auth", ".", "add_password", "(", "None", ",", "url", ",", "remote_server_user", ",", "remote_server_password", ")", "\n", "\n", "add_auth", "=", "True", "\n", "\n", "# Prepare handler (TBD: maybe there is another, more elegant way?)", "\n", "", "if", "add_auth", "and", "add_ctx", ":", "\n", "       ", "urllib2", ".", "install_opener", "(", "urllib2", ".", "build_opener", "(", "urllib2", ".", "HTTPBasicAuthHandler", "(", "auth", ")", ",", "urllib2", ".", "HTTPSHandler", "(", "context", "=", "ctx", ")", ")", ")", "\n", "", "elif", "add_auth", ":", "\n", "       ", "urllib2", ".", "install_opener", "(", "urllib2", ".", "build_opener", "(", "urllib2", ".", "HTTPBasicAuthHandler", "(", "auth", ")", ")", ")", "\n", "", "elif", "add_ctx", ":", "\n", "       ", "urllib2", ".", "install_opener", "(", "urllib2", ".", "build_opener", "(", "urllib2", ".", "HTTPSHandler", "(", "context", "=", "ctx", ")", ")", ")", "\n", "\n", "# Prepare request", "\n", "", "request", "=", "urllib2", ".", "Request", "(", "url", ",", "post", ")", "\n", "\n", "# Connect", "\n", "try", ":", "\n", "       ", "f", "=", "urllib2", ".", "urlopen", "(", "request", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "       ", "return", "{", "'return'", ":", "1", ",", "'error'", ":", "'Access to the CodeReef portal failed ('", "+", "format", "(", "e", ")", "+", "')'", "}", "\n", "\n", "# Read from Internet", "\n", "", "try", ":", "\n", "       ", "s", "=", "f", ".", "read", "(", ")", "\n", "f", ".", "close", "(", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "       ", "return", "{", "'return'", ":", "1", ",", "'error'", ":", "'Failed reading stream from the CodeReef portal ('", "+", "format", "(", "e", ")", "+", "')'", "}", "\n", "\n", "# Check output", "\n", "", "try", ":", "s", "=", "s", ".", "decode", "(", "'utf8'", ")", "\n", "except", "Exception", "as", "e", ":", "pass", "\n", "\n", "# Try to convert output to dictionary", "\n", "r", "=", "ck", ".", "convert_json_str_to_dict", "(", "{", "'str'", ":", "s", ",", "'skip_quote_replacement'", ":", "'yes'", "}", ")", "\n", "if", "r", "[", "'return'", "]", ">", "0", ":", "\n", "       ", "return", "{", "'return'", ":", "1", ",", "'error'", ":", "'can\\'t parse output from the CodeReef portal ('", "+", "r", "[", "'error'", "]", "+", "'):\\n'", "+", "s", "[", ":", "256", "]", "+", "'\\n\\n...)'", "}", "\n", "\n", "", "d", "=", "r", "[", "'dict'", "]", "\n", "\n", "if", "'return'", "in", "d", ":", "d", "[", "'return'", "]", "=", "int", "(", "d", "[", "'return'", "]", ")", "# Fix for some strange behavior when 'return' is not integer - should check why ...", "\n", "else", ":", "\n", "       ", "d", "[", "'return'", "]", "=", "99", "\n", "d", "[", "'error'", "]", "=", "'repsonse doesn\\'t follow the CodeReef standard'", "\n", "\n", "", "return", "d", "\n", "\n"]], "home.repos.pwc.inspect_result.codereef-ai_client.codereef.comm.access": [[159, 224], ["i.get", "i.get", "i.get", "i.get", "config.load", "ii.update", "comm.send", "ck.load_json_file", "i.get.update", "json_string.replace.replace", "json.loads", "i.get.update", "ck.out", "ck.out", "ck.out", "len", "json.dumps"], "function", ["home.repos.pwc.inspect_result.codereef-ai_client.codereef.config.load", "home.repos.pwc.inspect_result.codereef-ai_client.codereef.main.update", "home.repos.pwc.inspect_result.codereef-ai_client.codereef.comm.send", "home.repos.pwc.inspect_result.codereef-ai_client.codereef.main.update", "home.repos.pwc.inspect_result.codereef-ai_client.codereef.main.update"], ["", "def", "access", "(", "i", ")", ":", "\n", "\n", "    ", "\"\"\"\n    Input:  {\n              (filename) [str] - load JSON from this file\n                or\n              (json) [str] - parse JSON string from command line (use ' instead of \")\n                or\n              (dict) [dict] - dictionary to send to the CodeReef API\n            }\n\n    Output: {\n              return  [int]    - return code = 0 if success or >0 if error\n              (error) [str]    - error string if return>0 \n            }\n    \"\"\"", "\n", "\n", "import", "json", "\n", "\n", "filename", "=", "i", ".", "get", "(", "'filename'", ",", "''", ")", "\n", "json_string", "=", "i", ".", "get", "(", "'json'", ",", "''", ")", "\n", "\n", "display", "=", "i", ".", "get", "(", "'display'", ",", "''", ")", "\n", "\n", "data", "=", "i", ".", "get", "(", "'dict'", ",", "{", "}", ")", "\n", "\n", "if", "filename", "==", "''", "and", "json_string", "==", "''", "and", "len", "(", "data", ")", "==", "0", ":", "\n", "       ", "return", "{", "'return'", ":", "1", ",", "'error'", ":", "'either \"filename\" or \"json\" or \"dict\" should define data to be pushed to CodeReef API'", "}", "\n", "\n", "", "if", "filename", "!=", "''", ":", "\n", "       ", "r", "=", "ck", ".", "load_json_file", "(", "{", "'json_file'", ":", "filename", "}", ")", "\n", "if", "r", "[", "'return'", "]", ">", "0", ":", "return", "r", "\n", "\n", "data2", "=", "r", "[", "'dict'", "]", "\n", "data", ".", "update", "(", "data2", ")", "\n", "\n", "", "if", "json_string", "!=", "''", ":", "\n", "       ", "json_string", "=", "json_string", ".", "replace", "(", "\"'\"", ",", "'\"'", ")", "\n", "\n", "data2", "=", "json", ".", "loads", "(", "json_string", ")", "\n", "\n", "data", ".", "update", "(", "data2", ")", "\n", "", "if", "display", "==", "''", ":", "\n", "       ", "display", "=", "False", "\n", "\n", "# Get current configuration", "\n", "", "r", "=", "config", ".", "load", "(", "{", "}", ")", "\n", "if", "r", "[", "'return'", "]", ">", "0", ":", "return", "r", "\n", "cfg", "=", "r", "[", "'dict'", "]", "\n", "\n", "# Prepare request", "\n", "ii", "=", "{", "'config'", ":", "cfg", "}", "\n", "ii", ".", "update", "(", "data", ")", "\n", "\n", "# Sending request to download", "\n", "r", "=", "send", "(", "ii", ")", "\n", "if", "r", "[", "'return'", "]", ">", "0", ":", "return", "r", "\n", "\n", "if", "display", "is", "True", ":", "\n", "      ", "ck", ".", "out", "(", "'Output:'", ")", "\n", "ck", ".", "out", "(", "''", ")", "\n", "\n", "ck", ".", "out", "(", "json", ".", "dumps", "(", "r", ",", "indent", "=", "2", ")", ")", "\n", "\n", "", "return", "r", "\n", "", ""]], "home.repos.pwc.inspect_result.codereef-ai_client.codereef.main.cli": [[13, 16], ["click.group"], "function", ["None"], ["@", "click", ".", "group", "(", ")", "\n", "def", "cli", "(", ")", ":", "\n", "    ", "return", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.codereef-ai_client.codereef.main.process_error": [[18, 28], ["r.get", "ck.err"], "function", ["None"], ["", "def", "process_error", "(", "r", ")", ":", "\n", "\n", "    ", "e", "=", "r", ".", "get", "(", "'error'", ",", "''", ")", "\n", "if", "e", "!=", "''", ":", "\n", "       ", "e", "+=", "' (check CodeReef docs at https://CodeReef.ai/static/docs)'", "\n", "r", "[", "'error'", "]", "=", "e", "\n", "\n", "", "ck", ".", "err", "(", "r", ")", "\n", "# Should not reach here since ck.err exits program", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.codereef-ai_client.codereef.main.setup": [[30, 55], ["cli.command", "click.option", "click.option", "click.option", "click.option", "click.option", "click.option", "setup.setup"], "function", ["home.repos.pwc.inspect_result.codereef-ai_client.codereef.setup.setup"], ["", "@", "cli", ".", "command", "(", ")", "\n", "\n", "@", "click", ".", "option", "(", "'-u'", ",", "'--username'", ",", "'username'", ",", "required", "=", "False", ")", "\n", "@", "click", ".", "option", "(", "'-a'", ",", "'--api_key'", ",", "'api_key'", ",", "required", "=", "False", ")", "\n", "@", "click", ".", "option", "(", "'-s'", ",", "'--server_url'", ",", "'server_url'", ",", "required", "=", "False", ")", "\n", "@", "click", ".", "option", "(", "'-su'", ",", "'--server_user'", ",", "'server_user'", ",", "required", "=", "False", ")", "\n", "@", "click", ".", "option", "(", "'-sp'", ",", "'--server_pass'", ",", "'server_pass'", ",", "required", "=", "False", ")", "\n", "@", "click", ".", "option", "(", "'-ss'", ",", "'--server_skip_validation'", ",", "'server_skip_validation'", ",", "required", "=", "False", ")", "\n", "\n", "def", "setup", "(", "username", ",", "\n", "api_key", ",", "\n", "server_url", ",", "\n", "server_user", ",", "\n", "server_pass", ",", "\n", "server_skip_validation", ")", ":", "\n", "    ", "'''\n     Setup CodeReef client.\n    '''", "\n", "from", ".", "import", "setup", "\n", "return", "setup", ".", "setup", "(", "{", "'username'", ":", "username", ",", "\n", "'api_key'", ":", "api_key", ",", "\n", "'server_url'", ":", "server_url", ",", "\n", "'server_user'", ":", "server_user", ",", "\n", "'server_pass'", ":", "server_pass", ",", "\n", "'server_skip_validation'", ":", "server_skip_validation", "}", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.codereef-ai_client.codereef.main.login": [[57, 82], ["cli.command", "click.option", "click.option", "click.option", "click.option", "click.option", "click.option", "setup.login"], "function", ["home.repos.pwc.inspect_result.codereef-ai_client.codereef.setup.login"], ["", "@", "cli", ".", "command", "(", ")", "\n", "\n", "@", "click", ".", "option", "(", "'-u'", ",", "'--username'", ",", "'username'", ",", "required", "=", "False", ")", "\n", "@", "click", ".", "option", "(", "'-a'", ",", "'--api_key'", ",", "'api_key'", ",", "required", "=", "False", ")", "\n", "@", "click", ".", "option", "(", "'-s'", ",", "'--server_url'", ",", "'server_url'", ",", "required", "=", "False", ")", "\n", "@", "click", ".", "option", "(", "'-su'", ",", "'--server_user'", ",", "'server_user'", ",", "required", "=", "False", ")", "\n", "@", "click", ".", "option", "(", "'-sp'", ",", "'--server_pass'", ",", "'server_pass'", ",", "required", "=", "False", ")", "\n", "@", "click", ".", "option", "(", "'-ss'", ",", "'--server_skip_validation'", ",", "'server_skip_validation'", ",", "required", "=", "False", ")", "\n", "\n", "def", "login", "(", "username", ",", "\n", "api_key", ",", "\n", "server_url", ",", "\n", "server_user", ",", "\n", "server_pass", ",", "\n", "server_skip_validation", ")", ":", "\n", "    ", "'''\n     Test login to CodeReef portal.\n    '''", "\n", "from", ".", "import", "setup", "\n", "return", "setup", ".", "login", "(", "{", "'username'", ":", "username", ",", "\n", "'api_key'", ":", "api_key", ",", "\n", "'server_url'", ":", "server_url", ",", "\n", "'server_user'", ":", "server_user", ",", "\n", "'server_pass'", ":", "server_pass", ",", "\n", "'server_skip_validation'", ":", "server_skip_validation", "}", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.codereef-ai_client.codereef.main.publish": [[84, 139], ["cli.command", "click.argument", "click.option", "click.option", "click.option", "click.option", "click.option", "click.option", "click.option", "click.option", "click.option", "click.option", "click.option", "click.option", "click.option", "obj.publish", "main.process_error"], "function", ["home.repos.pwc.inspect_result.codereef-ai_client.codereef.main.publish", "home.repos.pwc.inspect_result.codereef-ai_client.codereef.main.process_error"], ["", "@", "cli", ".", "command", "(", ")", "\n", "\n", "@", "click", ".", "argument", "(", "'cid'", ")", "\n", "\n", "@", "click", ".", "option", "(", "'-t'", ",", "'--tags'", ",", "'tags'", ",", "required", "=", "False", ",", "default", "=", "''", ")", "\n", "@", "click", ".", "option", "(", "'-u'", ",", "'--username'", ",", "'username'", ",", "required", "=", "False", ")", "\n", "@", "click", ".", "option", "(", "'-a'", ",", "'--api_key'", ",", "'api_key'", ",", "required", "=", "False", ")", "\n", "@", "click", ".", "option", "(", "'--quiet'", ",", "'quiet'", ",", "required", "=", "False", ",", "is_flag", "=", "True", ")", "\n", "@", "click", ".", "option", "(", "'--force'", ",", "'force'", ",", "required", "=", "False", ",", "is_flag", "=", "True", ")", "\n", "@", "click", ".", "option", "(", "'--private'", ",", "is_flag", "=", "True", ")", "\n", "@", "click", ".", "option", "(", "'-w'", ",", "'--workspaces'", ",", "'workspaces'", ",", "required", "=", "False", ")", "\n", "@", "click", ".", "option", "(", "'-v'", ",", "'--version'", ",", "'version'", ",", "required", "=", "False", ")", "\n", "@", "click", ".", "option", "(", "'--author'", ",", "'author'", ",", "required", "=", "False", ")", "\n", "@", "click", ".", "option", "(", "'--author_codereef_id'", ",", "'author_codereef_id'", ",", "required", "=", "False", ")", "\n", "@", "click", ".", "option", "(", "'--copyright'", ",", "'copyright'", ",", "required", "=", "False", ")", "\n", "@", "click", ".", "option", "(", "'--license'", ",", "'license'", ",", "required", "=", "False", ")", "\n", "@", "click", ".", "option", "(", "'--source'", ",", "'source'", ",", "required", "=", "False", ")", "\n", "\n", "def", "publish", "(", "cid", ",", "\n", "tags", ",", "\n", "username", ",", "\n", "api_key", ",", "\n", "force", ",", "\n", "quiet", ",", "\n", "private", ",", "\n", "workspaces", ",", "\n", "version", ",", "\n", "author", ",", "\n", "author_codereef_id", ",", "\n", "copyright", ",", "\n", "license", ",", "\n", "source", ")", ":", "\n", "    ", "'''\n    Publish CK component to the CodeReef portal.\n\n    CID: CK identifier ({repo UOA}:){module UOA}:{data UOA}.\n    '''", "\n", "from", ".", "import", "obj", "\n", "r", "=", "obj", ".", "publish", "(", "{", "'cid'", ":", "cid", ",", "\n", "'tags'", ":", "tags", ",", "\n", "'username'", ":", "username", ",", "\n", "'api_key'", ":", "api_key", ",", "\n", "'quiet'", ":", "quiet", ",", "\n", "'force'", ":", "force", ",", "\n", "'private'", ":", "private", ",", "\n", "'workspaces'", ":", "workspaces", ",", "\n", "'version'", ":", "version", ",", "\n", "'author'", ":", "author", ",", "\n", "'author_codereef_id'", ":", "author_codereef_id", ",", "\n", "'copyright'", ":", "copyright", ",", "\n", "'license'", ":", "license", ",", "\n", "'source'", ":", "source", "}", ")", "\n", "\n", "if", "r", "[", "'return'", "]", ">", "0", ":", "process_error", "(", "r", ")", "\n", "return", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.codereef-ai_client.codereef.main.versions": [[141, 156], ["cli.command", "click.argument", "obj.versions", "main.process_error"], "function", ["home.repos.pwc.inspect_result.codereef-ai_client.codereef.main.versions", "home.repos.pwc.inspect_result.codereef-ai_client.codereef.main.process_error"], ["", "@", "cli", ".", "command", "(", ")", "\n", "\n", "@", "click", ".", "argument", "(", "'cid'", ")", "\n", "\n", "def", "versions", "(", "cid", ")", ":", "\n", "    ", "'''\n    List versions of a given component at the CodeReef portal.\n\n    CID: CK identifier ({repo UOA}:){module UOA}:{data UOA}.\n    '''", "\n", "from", ".", "import", "obj", "\n", "r", "=", "obj", ".", "versions", "(", "{", "'cid'", ":", "cid", "}", ")", "\n", "\n", "if", "r", "[", "'return'", "]", ">", "0", ":", "process_error", "(", "r", ")", "\n", "return", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.codereef-ai_client.codereef.main.open": [[158, 173], ["cli.command", "click.argument", "obj.open_page", "main.process_error"], "function", ["home.repos.pwc.inspect_result.codereef-ai_client.codereef.obj.open_page", "home.repos.pwc.inspect_result.codereef-ai_client.codereef.main.process_error"], ["", "@", "cli", ".", "command", "(", ")", "\n", "\n", "@", "click", ".", "argument", "(", "'cid'", ")", "\n", "\n", "def", "open", "(", "cid", ")", ":", "\n", "    ", "'''\n    Open CodeReef portal with a given component\n\n    CID: CK identifier ({repo UOA}:){module UOA}:{data UOA}.\n    '''", "\n", "from", ".", "import", "obj", "\n", "r", "=", "obj", ".", "open_page", "(", "{", "'cid'", ":", "cid", "}", ")", "\n", "\n", "if", "r", "[", "'return'", "]", ">", "0", ":", "process_error", "(", "r", ")", "\n", "return", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.codereef-ai_client.codereef.main.download": [[175, 203], ["cli.command", "click.argument", "click.option", "click.option", "click.option", "click.option", "obj.download", "main.process_error"], "function", ["home.repos.pwc.inspect_result.codereef-ai_client.codereef.main.download", "home.repos.pwc.inspect_result.codereef-ai_client.codereef.main.process_error"], ["", "@", "cli", ".", "command", "(", ")", "\n", "\n", "@", "click", ".", "argument", "(", "'cid'", ")", "\n", "\n", "@", "click", ".", "option", "(", "'-v'", ",", "'--version'", ",", "'version'", ",", "required", "=", "False", ")", "\n", "@", "click", ".", "option", "(", "'-f'", ",", "'--force'", ",", "'force'", ",", "required", "=", "False", ",", "is_flag", "=", "True", ")", "\n", "@", "click", ".", "option", "(", "'-t'", ",", "'--tags'", ",", "'tags'", ",", "required", "=", "False", ",", "default", "=", "''", ")", "\n", "@", "click", ".", "option", "(", "'-a'", ",", "'--all'", ",", "'all'", ",", "required", "=", "False", ",", "is_flag", "=", "True", ")", "\n", "\n", "def", "download", "(", "cid", ",", "\n", "version", ",", "\n", "force", ",", "\n", "tags", ",", "\n", "all", ")", ":", "\n", "    ", "'''\n    Download CK component from the CodeReef portal.\n\n    CID: CK identifier {module UOA}:{data UOA}.\n    '''", "\n", "from", ".", "import", "obj", "\n", "r", "=", "obj", ".", "download", "(", "{", "'cid'", ":", "cid", ",", "\n", "'version'", ":", "version", ",", "\n", "'force'", ":", "force", ",", "\n", "'tags'", ":", "tags", ",", "\n", "'all'", ":", "all", "}", ")", "\n", "\n", "if", "r", "[", "'return'", "]", ">", "0", ":", "process_error", "(", "r", ")", "\n", "return", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.codereef-ai_client.codereef.main.update": [[205, 219], ["cli.command", "click.option", "config.update", "main.process_error"], "function", ["home.repos.pwc.inspect_result.codereef-ai_client.codereef.main.update", "home.repos.pwc.inspect_result.codereef-ai_client.codereef.main.process_error"], ["", "@", "cli", ".", "command", "(", ")", "\n", "\n", "@", "click", ".", "option", "(", "'-f'", ",", "'--force'", ",", "'force'", ",", "required", "=", "False", ",", "is_flag", "=", "True", ")", "\n", "\n", "def", "update", "(", "force", ")", ":", "\n", "    ", "'''\n    Update/bootstrap CodeReef components.\n    '''", "\n", "\n", "from", ".", "import", "config", "\n", "r", "=", "config", ".", "update", "(", "{", "'force'", ":", "force", "}", ")", "\n", "\n", "if", "r", "[", "'return'", "]", ">", "0", ":", "process_error", "(", "r", ")", "\n", "return", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.codereef-ai_client.codereef.main.init_graph": [[221, 243], ["cli.command", "click.argument", "click.option", "click.option", "graph.init", "main.process_error"], "function", ["home.repos.pwc.inspect_result.codereef-ai_client.codereef.main.init", "home.repos.pwc.inspect_result.codereef-ai_client.codereef.main.process_error"], ["", "@", "cli", ".", "command", "(", ")", "\n", "\n", "@", "click", ".", "argument", "(", "'uid'", ",", "required", "=", "False", ")", "\n", "\n", "@", "click", ".", "option", "(", "'-v'", ",", "'--version'", ",", "'version'", ",", "required", "=", "False", ")", "\n", "@", "click", ".", "option", "(", "'-d'", ",", "'--desc_file'", ",", "'desc_file'", ",", "required", "=", "False", ")", "\n", "\n", "def", "init_graph", "(", "uid", ",", "\n", "version", ",", "\n", "desc_file", ")", ":", "\n", "    ", "'''\n    Init graph at the CodeReef portal.\n\n    UID: CodeReef graph identifier.\n    '''", "\n", "from", ".", "import", "graph", "\n", "r", "=", "graph", ".", "init", "(", "{", "'uid'", ":", "uid", ",", "\n", "'version'", ":", "version", ",", "\n", "'desc_file'", ":", "desc_file", "}", ")", "\n", "\n", "if", "r", "[", "'return'", "]", ">", "0", ":", "process_error", "(", "r", ")", "\n", "return", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.codereef-ai_client.codereef.main.push_result": [[245, 273], ["cli.command", "click.argument", "click.option", "click.option", "click.option", "click.option", "graph.push", "main.process_error"], "function", ["home.repos.pwc.inspect_result.codereef-ai_client.codereef.graph.push", "home.repos.pwc.inspect_result.codereef-ai_client.codereef.main.process_error"], ["", "@", "cli", ".", "command", "(", ")", "\n", "\n", "@", "click", ".", "argument", "(", "'uid'", ",", "required", "=", "True", ")", "\n", "\n", "@", "click", ".", "option", "(", "'-v'", ",", "'--version'", ",", "'version'", ",", "required", "=", "False", ",", "default", "=", "''", ")", "\n", "@", "click", ".", "option", "(", "'-f'", ",", "'--filename'", ",", "'filename'", ",", "required", "=", "False", ",", "default", "=", "''", ")", "\n", "@", "click", ".", "option", "(", "'-j'", ",", "'--json'", ",", "'json_string'", ",", "required", "=", "False", ",", "default", "=", "''", ")", "\n", "@", "click", ".", "option", "(", "'-p'", ",", "'--point'", ",", "'point'", ",", "required", "=", "False", ",", "default", "=", "''", ")", "\n", "\n", "def", "push_result", "(", "uid", ",", "\n", "version", ",", "\n", "filename", ",", "\n", "json_string", ",", "\n", "point", ")", ":", "\n", "    ", "'''\n    Push result to a graph at the CodeReef portal.\n\n    UID: CodeReef graph identifier.\n    '''", "\n", "from", ".", "import", "graph", "\n", "r", "=", "graph", ".", "push", "(", "{", "'uid'", ":", "uid", ",", "\n", "'version'", ":", "version", ",", "\n", "'filename'", ":", "filename", ",", "\n", "'json'", ":", "json_string", ",", "\n", "'point'", ":", "point", "}", ")", "\n", "\n", "if", "r", "[", "'return'", "]", ">", "0", ":", "process_error", "(", "r", ")", "\n", "return", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.codereef-ai_client.codereef.main.access": [[275, 295], ["cli.command", "click.option", "click.option", "click.option", "comm.access", "main.process_error"], "function", ["home.repos.pwc.inspect_result.codereef-ai_client.codereef.main.access", "home.repos.pwc.inspect_result.codereef-ai_client.codereef.main.process_error"], ["", "@", "cli", ".", "command", "(", ")", "\n", "\n", "@", "click", ".", "option", "(", "'-f'", ",", "'--filename'", ",", "'filename'", ",", "required", "=", "False", ",", "default", "=", "''", ")", "\n", "@", "click", ".", "option", "(", "'-j'", ",", "'--json'", ",", "'json_string'", ",", "required", "=", "False", ",", "default", "=", "''", ")", "\n", "@", "click", ".", "option", "(", "'-m'", ",", "'--mute'", ",", "'display'", ",", "is_flag", "=", "True", ",", "default", "=", "True", ")", "\n", "\n", "\n", "def", "access", "(", "filename", ",", "\n", "json_string", ",", "\n", "display", ")", ":", "\n", "    ", "'''\n    Access CodeReef Portal via JSON API.\n    '''", "\n", "from", ".", "import", "comm", "\n", "r", "=", "comm", ".", "access", "(", "{", "'filename'", ":", "filename", ",", "\n", "'json'", ":", "json_string", ",", "\n", "'display'", ":", "display", "}", ")", "\n", "\n", "if", "r", "[", "'return'", "]", ">", "0", ":", "process_error", "(", "r", ")", "\n", "return", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.codereef-ai_client.codereef.main.init": [[297, 412], ["cli.command", "click.argument", "click.option", "click.option", "click.option", "click.option", "click.option", "click.option", "click.option", "click.option", "click.option", "click.option", "click.option", "click.option", "click.option", "click.option", "click.option", "click.option", "click.option", "click.option", "click.option", "click.option", "click.option", "click.option", "click.option", "click.option", "click.option", "click.option", "click.option", "click.option", "click.option", "click.option", "click.option", "click.option", "click.option", "solution.init", "main.process_error"], "function", ["home.repos.pwc.inspect_result.codereef-ai_client.codereef.main.init", "home.repos.pwc.inspect_result.codereef-ai_client.codereef.main.process_error"], ["", "@", "cli", ".", "command", "(", ")", "\n", "\n", "@", "click", ".", "argument", "(", "'uid'", ",", "required", "=", "False", ")", "\n", "\n", "@", "click", ".", "option", "(", "'-u'", ",", "'--username'", ",", "'username'", ",", "required", "=", "False", ",", "default", "=", "''", ")", "\n", "@", "click", ".", "option", "(", "'-a'", ",", "'--api_key'", ",", "'api_key'", ",", "required", "=", "False", ",", "default", "=", "''", ")", "\n", "@", "click", ".", "option", "(", "'-n'", ",", "'--name'", ",", "'name'", ",", "required", "=", "False", ",", "default", "=", "''", ")", "\n", "@", "click", ".", "option", "(", "'-t'", ",", "'--tags'", ",", "'tags'", ",", "required", "=", "False", ",", "default", "=", "''", ")", "\n", "@", "click", ".", "option", "(", "'-pp'", ",", "'--python_path'", ",", "required", "=", "False", ",", "default", "=", "''", ")", "\n", "@", "click", ".", "option", "(", "'-pv'", ",", "'--python_version'", ",", "required", "=", "False", ",", "default", "=", "''", ")", "\n", "@", "click", ".", "option", "(", "'-pvf'", ",", "'--python_version_from'", ",", "required", "=", "False", ",", "default", "=", "''", ")", "\n", "@", "click", ".", "option", "(", "'-pvt'", ",", "'--python_version_to'", ",", "required", "=", "False", ",", "default", "=", "''", ")", "\n", "@", "click", ".", "option", "(", "'-pl'", ",", "'--python_localenv'", ",", "'python_localenv'", ",", "is_flag", "=", "True", ",", "default", "=", "True", ")", "\n", "@", "click", ".", "option", "(", "'-ho'", ",", "'--host_os'", ",", "'host_os'", ",", "required", "=", "False", ",", "default", "=", "''", ")", "\n", "@", "click", ".", "option", "(", "'-to'", ",", "'--target_os'", ",", "'target_os'", ",", "required", "=", "False", ",", "default", "=", "''", ")", "\n", "@", "click", ".", "option", "(", "'-di'", ",", "'--device_id'", ",", "'device_id'", ",", "required", "=", "False", ",", "default", "=", "''", ")", "\n", "@", "click", ".", "option", "(", "'-h'", ",", "'--hostname'", ",", "'hostname'", ",", "required", "=", "False", ",", "default", "=", "''", ")", "\n", "@", "click", ".", "option", "(", "'-w'", ",", "'--workflow'", ",", "'workflow'", ",", "required", "=", "False", ",", "default", "=", "''", ")", "\n", "@", "click", ".", "option", "(", "'-wr'", ",", "'--workflow_repo_url'", ",", "'workflow_repo_url'", ",", "required", "=", "False", ",", "default", "=", "''", ")", "\n", "@", "click", ".", "option", "(", "'-wc'", ",", "'--workflow_cmd'", ",", "'workflow_cmd'", ",", "required", "=", "False", ",", "default", "=", "''", ")", "\n", "@", "click", ".", "option", "(", "'-wce'", ",", "'--workflow_cmd_extra'", ",", "'workflow_cmd_extra'", ",", "required", "=", "False", ",", "default", "=", "''", ")", "\n", "@", "click", ".", "option", "(", "'-wi'", ",", "'--workflow_input'", ",", "'workflow_input'", ",", "required", "=", "False", ",", "default", "=", "''", ")", "# Input source (stream, webcam, etc)", "\n", "@", "click", ".", "option", "(", "'-wid'", ",", "'--workflow_input_dir'", ",", "'workflow_input_dir'", ",", "required", "=", "False", ",", "default", "=", "''", ")", "# Input directory (will be cleaned)", "\n", "@", "click", ".", "option", "(", "'-wod'", ",", "'--workflow_output_dir'", ",", "'workflow_output_dir'", ",", "required", "=", "False", ",", "default", "=", "''", ")", "# Output directory (will be cleaned)", "\n", "@", "click", ".", "option", "(", "'-d'", ",", "'--desc_prereq'", ",", "'desc_prereq'", ",", "required", "=", "False", ",", "default", "=", "''", ")", "\n", "@", "click", ".", "option", "(", "'-dp'", ",", "'--desc_prepare'", ",", "'desc_prepare'", ",", "required", "=", "False", ",", "default", "=", "''", ")", "\n", "@", "click", ".", "option", "(", "'-dr'", ",", "'--desc_run'", ",", "'desc_run'", ",", "required", "=", "False", ",", "default", "=", "''", ")", "\n", "@", "click", ".", "option", "(", "'-s'", ",", "'--add_extra_scripts'", ",", "'add_extra_scripts'", ",", "required", "=", "False", ",", "default", "=", "''", ")", "\n", "@", "click", ".", "option", "(", "'-e'", ",", "'--add_extra_meta_from_file'", ",", "'add_extra_meta_from_file'", ",", "required", "=", "False", ",", "default", "=", "''", ")", "\n", "@", "click", ".", "option", "(", "'-rf'", ",", "'--result_file'", ",", "'result_file'", ",", "required", "=", "False", ",", "default", "=", "''", ")", "\n", "@", "click", ".", "option", "(", "'--update_meta_and_stop'", ",", "'update_meta_and_stop'", ",", "is_flag", "=", "True", ",", "default", "=", "False", ")", "\n", "@", "click", ".", "option", "(", "'--skip_graph_init'", ",", "'skip_graph_init'", ",", "is_flag", "=", "True", ",", "default", "=", "False", ")", "\n", "@", "click", ".", "option", "(", "'-r'", ",", "'--resume'", ",", "'resume'", ",", "is_flag", "=", "True", ",", "default", "=", "False", ")", "\n", "@", "click", ".", "option", "(", "'-ss'", ",", "'--skip_stop'", ",", "'skip_stop'", ",", "is_flag", "=", "True", ",", "default", "=", "False", ")", "\n", "@", "click", ".", "option", "(", "'-g'", ",", "'--graphs'", ",", "'graphs'", ",", "required", "=", "False", ",", "default", "=", "''", ")", "\n", "@", "click", ".", "option", "(", "'-dg'", ",", "'--desc_graph'", ",", "'desc_graph'", ",", "required", "=", "False", ",", "default", "=", "''", ")", "\n", "@", "click", ".", "option", "(", "'-gc'", ",", "'--graph_convertor'", ",", "'graph_convertor'", ",", "required", "=", "False", ",", "default", "=", "''", ")", "\n", "\n", "def", "init", "(", "uid", ",", "\n", "username", ",", "\n", "api_key", ",", "\n", "name", ",", "\n", "tags", ",", "\n", "python_path", ",", "\n", "python_version", ",", "\n", "python_version_from", ",", "\n", "python_version_to", ",", "\n", "python_localenv", ",", "\n", "host_os", ",", "\n", "target_os", ",", "\n", "device_id", ",", "\n", "hostname", ",", "\n", "workflow", ",", "\n", "workflow_repo_url", ",", "\n", "workflow_cmd", ",", "\n", "workflow_cmd_extra", ",", "\n", "workflow_input", ",", "\n", "workflow_input_dir", ",", "\n", "workflow_output_dir", ",", "\n", "desc_prereq", ",", "\n", "desc_prepare", ",", "\n", "desc_run", ",", "\n", "add_extra_scripts", ",", "\n", "add_extra_meta_from_file", ",", "\n", "result_file", ",", "\n", "update_meta_and_stop", ",", "\n", "skip_graph_init", ",", "\n", "resume", ",", "\n", "skip_stop", ",", "\n", "graphs", ",", "\n", "desc_graph", ",", "\n", "graph_convertor", ")", ":", "\n", "    ", "'''\n    Init CodeReef portable solution.\n\n    UID: CodeReef solution identifier.\n    '''", "\n", "from", ".", "import", "solution", "\n", "r", "=", "solution", ".", "init", "(", "{", "'uid'", ":", "uid", ",", "\n", "'username'", ":", "username", ",", "\n", "'api_key'", ":", "api_key", ",", "\n", "'name'", ":", "name", ",", "\n", "'tags'", ":", "tags", ",", "\n", "'python_path'", ":", "python_path", ",", "\n", "'python_version'", ":", "python_version", ",", "\n", "'python_version_from'", ":", "python_version_from", ",", "\n", "'python_version_to'", ":", "python_version_to", ",", "\n", "'python_localenv'", ":", "python_localenv", ",", "\n", "'host_os'", ":", "host_os", ",", "\n", "'target_os'", ":", "target_os", ",", "\n", "'device_id'", ":", "device_id", ",", "\n", "'hostname'", ":", "hostname", ",", "\n", "'workflow_repo_url'", ":", "workflow_repo_url", ",", "\n", "'workflow'", ":", "workflow", ",", "\n", "'workflow_cmd'", ":", "workflow_cmd", ",", "\n", "'workflow_cmd_extra'", ":", "workflow_cmd_extra", ",", "\n", "'workflow_input'", ":", "workflow_input", ",", "\n", "'workflow_input_dir'", ":", "workflow_input_dir", ",", "\n", "'workflow_output_dir'", ":", "workflow_output_dir", ",", "\n", "'desc_prereq'", ":", "desc_prereq", ",", "\n", "'desc_prepare'", ":", "desc_prepare", ",", "\n", "'desc_run'", ":", "desc_run", ",", "\n", "'add_extra_meta_from_file'", ":", "add_extra_meta_from_file", ",", "\n", "'result_file'", ":", "result_file", ",", "\n", "'add_extra_scripts'", ":", "add_extra_scripts", ",", "\n", "'update_meta_and_stop'", ":", "update_meta_and_stop", ",", "\n", "'skip_graph_init'", ":", "skip_graph_init", ",", "\n", "'resume'", ":", "resume", ",", "\n", "'skip_stop'", ":", "skip_stop", ",", "\n", "'graphs'", ":", "graphs", ",", "\n", "'desc_graph'", ":", "desc_graph", ",", "\n", "'graph_convertor'", ":", "graph_convertor", "}", ")", "\n", "\n", "if", "r", "[", "'return'", "]", ">", "0", ":", "process_error", "(", "r", ")", "\n", "return", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.codereef-ai_client.codereef.main.activate": [[414, 429], ["cli.command", "click.argument", "solution.activate", "main.process_error"], "function", ["home.repos.pwc.inspect_result.codereef-ai_client.codereef.main.activate", "home.repos.pwc.inspect_result.codereef-ai_client.codereef.main.process_error"], ["", "@", "cli", ".", "command", "(", ")", "\n", "\n", "@", "click", ".", "argument", "(", "'uid'", ")", "\n", "\n", "def", "activate", "(", "uid", ")", ":", "\n", "    ", "'''\n     Activate virtual environment from the prepared solution.\n\n     UID - CodeReef solution identifier.\n    '''", "\n", "from", ".", "import", "solution", "\n", "r", "=", "solution", ".", "activate", "(", "{", "'uid'", ":", "uid", "}", ")", "\n", "\n", "if", "r", "[", "'return'", "]", ">", "0", ":", "process_error", "(", "r", ")", "\n", "return", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.codereef-ai_client.codereef.main.benchmark": [[431, 450], ["cli.command", "click.argument", "click.option", "solution.benchmark", "main.process_error"], "function", ["home.repos.pwc.inspect_result.codereef-ai_client.codereef.main.benchmark", "home.repos.pwc.inspect_result.codereef-ai_client.codereef.main.process_error"], ["", "@", "cli", ".", "command", "(", ")", "\n", "\n", "@", "click", ".", "argument", "(", "'uid'", ")", "\n", "\n", "@", "click", ".", "option", "(", "'-c'", ",", "'--cmd'", ",", "'cmd'", ",", "required", "=", "False", ",", "default", "=", "''", ")", "\n", "\n", "def", "benchmark", "(", "uid", ",", "\n", "cmd", ")", ":", "\n", "    ", "'''\n    Benchmark CodeReef solution.\n\n    UID: CodeReef solution identifier.\n    '''", "\n", "from", ".", "import", "solution", "\n", "r", "=", "solution", ".", "benchmark", "(", "{", "'uid'", ":", "uid", ",", "\n", "'cmd'", ":", "cmd", "}", ")", "\n", "\n", "if", "r", "[", "'return'", "]", ">", "0", ":", "process_error", "(", "r", ")", "\n", "return", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.codereef-ai_client.codereef.main.run": [[452, 471], ["cli.command", "click.argument", "click.option", "solution.run", "main.process_error"], "function", ["home.repos.pwc.inspect_result.codereef-ai_client.codereef.main.run", "home.repos.pwc.inspect_result.codereef-ai_client.codereef.main.process_error"], ["", "@", "cli", ".", "command", "(", ")", "\n", "\n", "@", "click", ".", "argument", "(", "'uid'", ")", "\n", "\n", "@", "click", ".", "option", "(", "'-c'", ",", "'--cmd'", ",", "'cmd'", ",", "required", "=", "False", ",", "default", "=", "''", ")", "\n", "\n", "def", "run", "(", "uid", ",", "\n", "cmd", ")", ":", "\n", "    ", "'''\n    Run CodeReef portable solution.\n\n    UID: CodeReef solution identifier.\n    '''", "\n", "from", ".", "import", "solution", "\n", "r", "=", "solution", ".", "run", "(", "{", "'uid'", ":", "uid", ",", "\n", "'cmd'", ":", "cmd", "}", ")", "\n", "\n", "if", "r", "[", "'return'", "]", ">", "0", ":", "process_error", "(", "r", ")", "\n", "return", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.codereef-ai_client.codereef.main.ls": [[473, 488], ["cli.command", "click.argument", "solution.ls", "main.process_error"], "function", ["home.repos.pwc.inspect_result.codereef-ai_client.codereef.main.ls", "home.repos.pwc.inspect_result.codereef-ai_client.codereef.main.process_error"], ["", "@", "cli", ".", "command", "(", ")", "\n", "\n", "@", "click", ".", "argument", "(", "'uid'", ",", "required", "=", "False", ")", "\n", "\n", "def", "ls", "(", "uid", ")", ":", "\n", "    ", "'''\n    List CodeReef portable solutions.\n\n    UID: CodeReef solution identifier (can use wildcards)..\n    '''", "\n", "from", ".", "import", "solution", "\n", "r", "=", "solution", ".", "ls", "(", "{", "'uid'", ":", "uid", "}", ")", "\n", "\n", "if", "r", "[", "'return'", "]", ">", "0", ":", "process_error", "(", "r", ")", "\n", "return", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.codereef-ai_client.codereef.main.find": [[490, 505], ["cli.command", "click.argument", "solution.find", "main.process_error"], "function", ["home.repos.pwc.inspect_result.codereef-ai_client.codereef.main.find", "home.repos.pwc.inspect_result.codereef-ai_client.codereef.main.process_error"], ["", "@", "cli", ".", "command", "(", ")", "\n", "\n", "@", "click", ".", "argument", "(", "'uid'", ")", "\n", "\n", "def", "find", "(", "uid", ")", ":", "\n", "    ", "'''\n    Find CodeReef portable solution.\n\n    UID: CodeReef solution identifier.\n    '''", "\n", "from", ".", "import", "solution", "\n", "r", "=", "solution", ".", "find", "(", "{", "'uid'", ":", "uid", "}", ")", "\n", "\n", "if", "r", "[", "'return'", "]", ">", "0", ":", "process_error", "(", "r", ")", "\n", "return", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.codereef-ai_client.codereef.main.rm": [[507, 522], ["cli.command", "click.argument", "solution.rm", "main.process_error"], "function", ["home.repos.pwc.inspect_result.codereef-ai_client.codereef.main.rm", "home.repos.pwc.inspect_result.codereef-ai_client.codereef.main.process_error"], ["", "@", "cli", ".", "command", "(", ")", "\n", "\n", "@", "click", ".", "argument", "(", "'uid'", ")", "\n", "\n", "def", "rm", "(", "uid", ")", ":", "\n", "    ", "'''\n    Delete CodeReef portable solution.\n\n    UID: CodeReef solution identifier (can use wildcards).\n    '''", "\n", "from", ".", "import", "solution", "\n", "r", "=", "solution", ".", "rm", "(", "{", "'uid'", ":", "uid", "}", ")", "\n", "\n", "if", "r", "[", "'return'", "]", ">", "0", ":", "process_error", "(", "r", ")", "\n", "return", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.codereef-ai_client.codereef.main.start": [[524, 542], ["cli.command", "click.option", "click.option", "click.option", "client.start"], "function", ["home.repos.pwc.inspect_result.codereef-ai_client.codereef.client.start"], ["", "@", "cli", ".", "command", "(", ")", "\n", "\n", "@", "click", ".", "option", "(", "'-h'", ",", "'--host'", ",", "'host'", ",", "required", "=", "False", ")", "\n", "@", "click", ".", "option", "(", "'-p'", ",", "'--port'", ",", "'port'", ",", "required", "=", "False", ")", "\n", "@", "click", ".", "option", "(", "'-t'", ",", "'--tunnel'", ",", "'tunnel'", ",", "required", "=", "False", ")", "\n", "\n", "\n", "def", "start", "(", "host", ",", "\n", "port", ",", "\n", "tunnel", ")", ":", "\n", "    ", "'''\n    Start CodeReef server.\n    '''", "\n", "\n", "from", ".", "import", "client", "\n", "return", "client", ".", "start", "(", "{", "'host'", ":", "host", ",", "\n", "'port'", ":", "port", ",", "\n", "'tunnel'", ":", "tunnel", "}", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.codereef-ai_client.codereef.main.version": [[544, 556], ["cli.command", "print"], "function", ["None"], ["", "@", "cli", ".", "command", "(", ")", "\n", "\n", "def", "version", "(", ")", ":", "\n", "    ", "'''\n    Show CodeReef client version.\n    '''", "\n", "\n", "from", ".", "import", "__version__", "\n", "\n", "print", "(", "__version__", ")", "\n", "\n", "return", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.codereef-ai_client.codereef.setup.setup": [[19, 124], ["ck.access", "cfg.get", "cfg.get", "cfg.get", "cfg.get", "cfg.get", "cfg.get", "ck.access", "ck.out", "ck.out", "ck.out", "ck.out", "ck.err", "i.get", "ck.inp", "r[].strip", "i.get", "ck.inp", "r[].strip", "ck.err", "json.dumps", "ck.err", "ck.err", "i.get", "i.get", "i.get", "i.get", "i.get", "i.get", "i.get", "i.get"], "function", ["home.repos.pwc.inspect_result.codereef-ai_client.codereef.main.access", "home.repos.pwc.inspect_result.codereef-ai_client.codereef.main.access"], ["'codereef.__init__'", ",", "os", ".", "path", ".", "join", "(", "'codereef'", ",", "'__init__.py'", ")", ")", ".", "__version__", "\n", "\n", "# Default portal", "\n", "portal_url", "=", "'https://codereef.ai/portal'", "\n", "\n", "# Read description (TBD: should add short description!)", "\n", "with", "open", "(", "convert_path", "(", "'./README.md'", ")", ")", "as", "f", ":", "\n", "    ", "long_readme", "=", "f", ".", "read", "(", ")", "\n", "\n", "# Package description", "\n", "", "setup", "(", "\n", "name", "=", "'codereef'", ",", "\n", "\n", "author", "=", "\"Grigori Fursin\"", ",", "\n", "author_email", "=", "\"Grigori.Fursin@CodeReef.ai\"", ",", "\n", "\n", "version", "=", "version", ",", "\n", "\n", "description", "=", "\"CodeReef client to deal with portable workflows\"", ",", "\n", "\n", "license", "=", "\"Apache Software License (Apache 2.0)\"", ",", "\n", "\n", "long_description_content_type", "=", "'text/markdown'", ",", "\n", "long_description", "=", "long_readme", ",", "\n", "\n", "url", "=", "portal_url", ",", "\n", "\n", "python_requires", "=", "\">=2.7\"", ",", "\n", "\n", "packages", "=", "find_packages", "(", "exclude", "=", "[", "\"tests*\"", ",", "\"docs*\"", "]", ")", ",", "\n", "package_data", "=", "{", "\"codereef\"", ":", "[", "'static/*'", "]", "}", ",", "\n", "\n", "include_package_data", "=", "True", ",", "\n", "\n", "install_requires", "=", "[", "\n", "'click>=7.0'", ",", "\n", "'ck'", ",", "\n", "'requests'", ",", "\n", "'virtualenv'", "\n", "]", ",", "\n", "\n", "entry_points", "=", "{", "\n", "\"console_scripts\"", ":", "\n", "[", "\n", "\"cr = codereef.main:cli\"", ",", "\n", "\"codereef = codereef.main:cli\"", "\n", "]", "\n", "}", ",", "\n", "\n", "zip_safe", "=", "False", ",", "\n", "\n", "keywords", "=", "\"portable workflows, reproducibility, collaborative experiments, portability, dependencies, workflows, automation, pipelines, data pipelines, computer systems, data science\"", ",", "\n", "\n", "classifiers", "=", "[", "\n", "\"Development Status :: 4 - Beta\"", ",", "\n", "\"Programming Language :: Python :: 2.7\"", ",", "\n", "\"Programming Language :: Python :: 3\"", ",", "\n", "\"Intended Audience :: Developers\"", ",", "\n", "\"Intended Audience :: Education\"", ",", "\n", "\"Intended Audience :: End Users/Desktop\"", ",", "\n", "\"Intended Audience :: Information Technology\"", ",", "\n", "\"Intended Audience :: Science/Research\"", "\n", "]", ",", "\n", ")", "\n", "\n", "###########################################################", "\n", "# Get release notes ", "\n", "import", "codereef", ".", "misc", "\n", "r", "=", "codereef", ".", "misc", ".", "request", "(", "{", "'url'", ":", "portal_url", "+", "'/api/v1/?'", ",", "\n", "'get'", ":", "{", "'action'", ":", "'get_client_release_notes'", ",", "\n", "'version'", ":", "version", "}", "}", ")", "\n", "if", "r", "[", "'return'", "]", "==", "0", ":", "\n", "   ", "notes", "=", "r", ".", "get", "(", "'dict'", ",", "{", "}", ")", ".", "get", "(", "'notes'", ",", "''", ")", "\n", "if", "notes", "!=", "''", ":", "\n", "      ", "print", "(", "'*********************************************************************'", ")", "\n", "print", "(", "'Release notes:'", ")", "\n", "print", "(", "''", ")", "\n", "print", "(", "notes", ")", "\n", "print", "(", "'*********************************************************************'", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.codereef-ai_client.codereef.setup.login": [[128, 180], ["ck.access", "config.load", "comm.send.get", "comm.send", "ck.out", "ck.err", "setup.setup", "ck.err"], "function", ["home.repos.pwc.inspect_result.codereef-ai_client.codereef.main.access", "home.repos.pwc.inspect_result.codereef-ai_client.codereef.config.load", "home.repos.pwc.inspect_result.codereef-ai_client.codereef.comm.send", "home.repos.pwc.inspect_result.codereef-ai_client.codereef.setup.setup"], []], "home.repos.pwc.inspect_result.codereef-ai_client.codereef.client.server_handler.do_GET": [[1081, 1085], ["client.process_web_request_post_via_tunnel", "client.process_web_request"], "methods", ["home.repos.pwc.inspect_result.codereef-ai_client.codereef.client.process_web_request_post_via_tunnel", "home.repos.pwc.inspect_result.codereef-ai_client.codereef.client.process_web_request"], ["def", "do_GET", "(", "self", ")", ":", "\n", "      ", "if", "tunnel_url", "!=", "''", ":", "process_web_request_post_via_tunnel", "(", "{", "'http'", ":", "self", "}", ")", "\n", "else", ":", "process_web_request", "(", "{", "'http'", ":", "self", "}", ")", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.codereef-ai_client.codereef.client.server_handler.do_POST": [[1087, 1091], ["client.process_web_request_post_via_tunnel", "client.process_web_request"], "methods", ["home.repos.pwc.inspect_result.codereef-ai_client.codereef.client.process_web_request_post_via_tunnel", "home.repos.pwc.inspect_result.codereef-ai_client.codereef.client.process_web_request"], ["", "def", "do_POST", "(", "self", ")", ":", "\n", "      ", "if", "tunnel_url", "!=", "''", ":", "process_web_request_post_via_tunnel", "(", "{", "'http'", ":", "self", ",", "'post'", ":", "'yes'", "}", ")", "\n", "else", ":", "process_web_request", "(", "{", "'http'", ":", "self", "}", ")", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.codereef-ai_client.codereef.client.server_handler.log_request": [[1092, 1095], ["client.server_handler.log_message", "str", "str"], "methods", ["None"], ["", "def", "log_request", "(", "self", ",", "code", "=", "'-'", ",", "size", "=", "'-'", ")", ":", "\n", "      ", "self", ".", "log_message", "(", "'\"%s\" %s %s'", ",", "self", ".", "requestline", ",", "str", "(", "code", ")", ",", "str", "(", "size", ")", ")", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.codereef-ai_client.codereef.client.server_handler.log_error": [[1096, 1099], ["client.server_handler.log_message"], "methods", ["None"], ["", "def", "log_error", "(", "self", ",", "format", ",", "*", "args", ")", ":", "\n", "      ", "self", ".", "log_message", "(", "format", ",", "*", "args", ")", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.codereef-ai_client.codereef.client.web_out": [[150, 191], ["context_types.get", "i.get", "sorted", "http.send_header", "http.send_header", "http.end_headers", "http.wfile.write", "len", "context_types.get.keys", "http.send_header", "str", "v.replace.replace", "len"], "function", ["None"], ["", "def", "web_out", "(", "i", ")", ":", "\n", "  ", "\"\"\"\n  Input:  {\n            http       - http object\n            type       - content type\n            bin        - bytes to output\n            (filename) - if !='', substitute filename in headers\n          }\n\n  Output: {\n            return - 0\n          }\n  \"\"\"", "\n", "\n", "http", "=", "i", "[", "'http'", "]", "\n", "bin", "=", "i", "[", "'bin'", "]", "\n", "\n", "tp", "=", "i", "[", "'type'", "]", "\n", "\n", "if", "tp", "==", "''", "or", "tp", "==", "'web'", ":", "tp", "=", "'html'", "\n", "\n", "tpx", "=", "context_types", ".", "get", "(", "tp", ",", "{", "}", ")", "\n", "if", "len", "(", "tpx", ")", "==", "0", ":", "\n", "    ", "tp", "=", "'unknown'", "\n", "tpx", "=", "cfg", "[", "'content_types'", "]", "[", "tp", "]", "\n", "\n", "", "fn", "=", "i", ".", "get", "(", "'filename'", ",", "''", ")", "\n", "\n", "# Output", "\n", "for", "k", "in", "sorted", "(", "tpx", ".", "keys", "(", ")", ")", ":", "\n", "    ", "v", "=", "tpx", "[", "k", "]", "\n", "if", "fn", "!=", "''", ":", "v", "=", "v", ".", "replace", "(", "'$#filename#$'", ",", "fn", ")", "\n", "http", ".", "send_header", "(", "k", ",", "v", ")", "\n", "\n", "", "http", ".", "send_header", "(", "'Access-Control-Allow-Origin'", ",", "'*'", ")", "\n", "http", ".", "send_header", "(", "'Content-Length'", ",", "str", "(", "len", "(", "bin", ")", ")", ")", "\n", "http", ".", "end_headers", "(", ")", "\n", "\n", "http", ".", "wfile", ".", "write", "(", "bin", ")", "\n", "\n", "return", "{", "'return'", ":", "0", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.codereef-ai_client.codereef.client.web_err": [[195, 228], ["client.web_out", "bin.decode.decode", "ck.dumps_json", "rx[].encode", "rx[].encode", "bin.decode.encode", "bin.decode.encode"], "function", ["home.repos.pwc.inspect_result.codereef-ai_client.codereef.client.web_out"], ["", "def", "web_err", "(", "i", ")", ":", "\n", "  ", "\"\"\"\n  Input:  {\n            http - http object\n            type - content type\n            bin  - bytes to output\n          }\n\n  Output: {\n            return - 0\n          }\n  \"\"\"", "\n", "\n", "http", "=", "i", "[", "'http'", "]", "\n", "tp", "=", "i", "[", "'type'", "]", "\n", "bin", "=", "i", "[", "'bin'", "]", "\n", "\n", "try", ":", "bin", "=", "bin", ".", "decode", "(", "'utf-8'", ")", "\n", "except", "Exception", "as", "e", ":", "pass", "\n", "\n", "if", "tp", "==", "'json'", ":", "\n", "    ", "rx", "=", "ck", ".", "dumps_json", "(", "{", "'dict'", ":", "{", "'return'", ":", "1", ",", "'error'", ":", "bin", "}", "}", ")", "\n", "if", "rx", "[", "'return'", "]", ">", "0", ":", "\n", "      ", "bin2", "=", "rx", "[", "'error'", "]", ".", "encode", "(", "'utf8'", ")", "\n", "", "else", ":", "\n", "      ", "bin2", "=", "rx", "[", "'string'", "]", ".", "encode", "(", "'utf-8'", ")", "\n", "", "", "elif", "tp", "==", "'con'", ":", "\n", "    ", "bin2", "=", "bin", ".", "encode", "(", "'utf8'", ")", "\n", "", "else", ":", "\n", "    ", "bin2", "=", "b'<html><body><pre>'", "+", "bin", ".", "encode", "(", "'utf8'", ")", "+", "b'</pre></body></html>'", "\n", "\n", "", "i", "[", "'bin'", "]", "=", "bin2", "\n", "return", "web_out", "(", "i", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.codereef-ai_client.codereef.client.process_web_request": [[232, 1027], ["i.get", "i.get", "ii.update", "ii.get", "tempfile.mkstemp", "os.close", "os.path.isfile", "tempfile.gettempdir", "ck.out", "ck.out", "http.send_response", "urlparse.urlparse", "xp.startswith", "xp.find", "urlparse.parse_qs", "headers.get", "k.endswith", "os.remove", "ck.access", "json.dumps", "client.web_out", "urlunquote", "cgi.parse_header", "client.web_err", "ck.out", "cgi.parse_qs.get", "xpost[].decode", "client.web_err", "ii.get", "json.load.run", "json.dumps", "client.web_out", "xget[].decode", "pdict[].encode", "cgi.parse_multipart", "cgi.FieldStorage", "cgi.FieldStorage.keys", "int", "http.rfile.read", "cgi.parse_qs", "xpost[].append", "urlunquote", "tempfile.mkstemp", "os.close", "open", "open.write", "open.close", "base64.urlsafe_b64encode().decode", "json.dumps.encode", "client.web_err", "ii.get", "json.load.benchmark", "json.dumps", "client.web_out", "http.headers.get", "json.dumps.decode", "bin.encode.decode", "urlunquote", "r[].encode", "json.dumps.encode", "client.web_err", "ii.get", "json.load.publish_result", "json.dumps", "client.web_out", "type", "len", "base64.urlsafe_b64encode", "r[].encode", "json.dumps.encode", "client.web_err", "ii.get", "meta.get.split", "ck.access", "meta.get", "meta.get", "meta.get.rfind", "os.path.join", "os.path.join", "ck.out", "ck.load_text_file", "client.web_out", "r[].encode", "json.dumps.encode", "client.web_err", "os.path.join", "ck.out", "ck.out", "ck.out", "ck.out", "sorted", "len", "client.web_err", "len", "ii.get", "os.path.join", "ck.out", "ck.out", "os.system", "os.path.isfile", "ck.out", "os.path.join", "os.path.isfile", "r[].encode", "meta.get.split", "ck.access", "meta.get", "meta.get", "meta.get", "meta.get.rfind", "os.path.join", "xpost.get", "xpost.get.startswith", "os.listdir", "os.listdir", "os.path.join", "os.path.isfile", "os.path.join", "os.path.join", "ck.out", "ck.out", "ck.out", "os.path.isfile", "ck.out", "json.dumps", "client.web_out", "r[].encode", "os.listdir", "client.web_err", "len", "os.remove", "os.remove", "client.web_err", "os.path.join", "os.path.join", "os.path.isdir", "os.makedirs", "os.path.join", "os.path.join", "os.path.isdir", "os.makedirs", "time.sleep", "ck.out", "client.web_out", "str", "os.path.join", "ck.convert_upload_string_to_file", "ck.out", "ck.out", "os.path.join", "os.path.isfile", "str", "os.path.join", "ck.out", "ck.out", "ck.out", "json.load.run", "os.path.isfile", "ck.out", "os.path.isfile", "os.path.isfile", "time.sleep", "open", "json.load", "ck.out", "os.remove", "os.path.isfile", "ck.out", "os.remove", "ii.get", "int", "str", "os.path.join", "ck.out", "ck.load_text_file", "client.web_out", "r[].encode", "file.endswith", "file.startswith", "found_files.append", "err.encode", "len", "open.startswith", "open.endswith", "open.find", "ck.out", "ck.out", "ck.out", "json.load.run", "client.web_err", "ck.out", "json.load.run", "json.dumps", "json.dumps.encode", "r[].encode", "ck.access", "meta.get", "meta.get.split", "meta.get", "meta.get", "meta.get.rfind", "os.path.join", "os.path.join", "ck.out", "ck.out", "ck.out", "ck.load_json_file", "ck.flatten_dict", "ck.out", "ck.out", "json.dumps", "client.web_out", "len", "err.encode", "r[].encode", "len", "int", "int", "json.dumps.encode", "client.web_err", "client.web_err", "client.web_err", "os.path.join", "os.path.join", "os.path.isfile", "ck.out", "os.path.isfile", "os.path.isfile", "time.sleep", "k.startswith", "json.dumps", "ck.access", "os.path.join", "ck.load_json_file", "ck.out", "ck.out", "json.dumps", "client.web_out", "len", "os.path.join", "r[].encode", "ck.out", "json.load.run", "json.dumps.encode", "client.web_err", "json.dumps", "os.path.dirname", "ck.out", "os.path.join", "ck.out", "ck.load_text_file", "client.web_out", "client.web_out", "ck.load_text_file", "ck.convert_json_str_to_dict", "client.web_out", "len", "r[].encode", "len", "r[].encode", "r[].encode", "client.web_err", "json.dumps.encode", "os.path.realpath", "r[].encode", "os.path.isfile", "client.web_err", "os.path.isfile", "client.web_err", "client.web_err", "bin.encode.decode", "client.web_err", "client.web_err", "rr.get", "rr.get", "base64.urlsafe_b64decode", "os.path.splitext", "fne.startswith", "r[].encode", "os.remove", "bout.encode.encode", "bout.encode.encode", "bout.encode.encode", "bout.encode.encode", "rr.get", "str.encode", "str", "rr.get", "rr[].encode", "len", "r[].encode", "bin.encode.encode", "r[].encode"], "function", ["home.repos.pwc.inspect_result.codereef-ai_client.codereef.main.update", "home.repos.pwc.inspect_result.codereef-ai_client.codereef.main.find", "home.repos.pwc.inspect_result.codereef-ai_client.codereef.main.access", "home.repos.pwc.inspect_result.codereef-ai_client.codereef.client.web_out", "home.repos.pwc.inspect_result.codereef-ai_client.codereef.client.web_err", "home.repos.pwc.inspect_result.codereef-ai_client.codereef.client.web_err", "home.repos.pwc.inspect_result.codereef-ai_client.codereef.main.run", "home.repos.pwc.inspect_result.codereef-ai_client.codereef.client.web_out", "home.repos.pwc.inspect_result.codereef-ai_client.codereef.main.open", "home.repos.pwc.inspect_result.codereef-ai_client.codereef.client.web_err", "home.repos.pwc.inspect_result.codereef-ai_client.codereef.main.benchmark", "home.repos.pwc.inspect_result.codereef-ai_client.codereef.client.web_out", "home.repos.pwc.inspect_result.codereef-ai_client.codereef.client.web_err", "home.repos.pwc.inspect_result.codereef-ai_client.codereef.solution.publish_result", "home.repos.pwc.inspect_result.codereef-ai_client.codereef.client.web_out", "home.repos.pwc.inspect_result.codereef-ai_client.codereef.client.web_err", "home.repos.pwc.inspect_result.codereef-ai_client.codereef.main.access", "home.repos.pwc.inspect_result.codereef-ai_client.codereef.client.web_out", "home.repos.pwc.inspect_result.codereef-ai_client.codereef.client.web_err", "home.repos.pwc.inspect_result.codereef-ai_client.codereef.client.web_err", "home.repos.pwc.inspect_result.codereef-ai_client.codereef.main.access", "home.repos.pwc.inspect_result.codereef-ai_client.codereef.client.web_out", "home.repos.pwc.inspect_result.codereef-ai_client.codereef.client.web_err", "home.repos.pwc.inspect_result.codereef-ai_client.codereef.client.web_err", "home.repos.pwc.inspect_result.codereef-ai_client.codereef.client.web_out", "home.repos.pwc.inspect_result.codereef-ai_client.codereef.main.run", "home.repos.pwc.inspect_result.codereef-ai_client.codereef.main.open", "home.repos.pwc.inspect_result.codereef-ai_client.codereef.config.load", "home.repos.pwc.inspect_result.codereef-ai_client.codereef.client.web_out", "home.repos.pwc.inspect_result.codereef-ai_client.codereef.main.find", "home.repos.pwc.inspect_result.codereef-ai_client.codereef.main.run", "home.repos.pwc.inspect_result.codereef-ai_client.codereef.client.web_err", "home.repos.pwc.inspect_result.codereef-ai_client.codereef.main.run", "home.repos.pwc.inspect_result.codereef-ai_client.codereef.main.access", "home.repos.pwc.inspect_result.codereef-ai_client.codereef.client.web_out", "home.repos.pwc.inspect_result.codereef-ai_client.codereef.client.web_err", "home.repos.pwc.inspect_result.codereef-ai_client.codereef.client.web_err", "home.repos.pwc.inspect_result.codereef-ai_client.codereef.client.web_err", "home.repos.pwc.inspect_result.codereef-ai_client.codereef.main.access", "home.repos.pwc.inspect_result.codereef-ai_client.codereef.client.web_out", "home.repos.pwc.inspect_result.codereef-ai_client.codereef.main.run", "home.repos.pwc.inspect_result.codereef-ai_client.codereef.client.web_err", "home.repos.pwc.inspect_result.codereef-ai_client.codereef.client.web_out", "home.repos.pwc.inspect_result.codereef-ai_client.codereef.client.web_out", "home.repos.pwc.inspect_result.codereef-ai_client.codereef.client.web_out", "home.repos.pwc.inspect_result.codereef-ai_client.codereef.client.web_err", "home.repos.pwc.inspect_result.codereef-ai_client.codereef.client.web_err", "home.repos.pwc.inspect_result.codereef-ai_client.codereef.client.web_err", "home.repos.pwc.inspect_result.codereef-ai_client.codereef.client.web_err", "home.repos.pwc.inspect_result.codereef-ai_client.codereef.client.web_err", "home.repos.pwc.inspect_result.codereef-ai_client.codereef.client.web_err"], ["", "def", "process_web_request", "(", "i", ")", ":", "\n", "  ", "\"\"\"\n\n  Input:  {\n            http - Python http object\n          }\n\n  Output: { None }\n  \"\"\"", "\n", "\n", "from", ".", "import", "solution", "\n", "\n", "# http object", "\n", "http", "=", "i", "[", "'http'", "]", "\n", "\n", "# Parse GET variables and path", "\n", "xget", "=", "{", "}", "\n", "xpath", "=", "{", "'host'", ":", "''", ",", "'port'", ":", "''", ",", "'first'", ":", "''", ",", "'rest'", ":", "''", ",", "'query'", ":", "''", "}", "# May be used in the future", "\n", "\n", "xt", "=", "'json'", "\n", "\n", "xpath", "[", "'host'", "]", "=", "i", ".", "get", "(", "'host'", ",", "''", ")", "\n", "xpath", "[", "'port'", "]", "=", "i", ".", "get", "(", "'port'", ",", "''", ")", "\n", "\n", "# Check GET variables", "\n", "if", "http", ".", "path", "!=", "''", ":", "\n", "    ", "http", ".", "send_response", "(", "200", ")", "\n", "\n", "a", "=", "urlparse", ".", "urlparse", "(", "http", ".", "path", ")", "\n", "xp", "=", "a", ".", "path", "\n", "xr", "=", "''", "\n", "\n", "if", "xp", ".", "startswith", "(", "'/'", ")", ":", "xp", "=", "xp", "[", "1", ":", "]", "\n", "\n", "u", "=", "xp", ".", "find", "(", "'/'", ")", "\n", "if", "u", ">=", "0", ":", "\n", "      ", "xr", "=", "xp", "[", "u", "+", "1", ":", "]", "\n", "xp", "=", "xp", "[", ":", "u", "]", "\n", "\n", "", "xt", "=", "xp", "\n", "\n", "xpath", "[", "'first'", "]", "=", "xp", "\n", "xpath", "[", "'rest'", "]", "=", "xr", "\n", "xpath", "[", "'query'", "]", "=", "a", ".", "query", "\n", "b", "=", "urlparse", ".", "parse_qs", "(", "a", ".", "query", ",", "keep_blank_values", "=", "True", ",", ")", "\n", "\n", "xget", "=", "{", "}", "\n", "for", "k", "in", "b", ":", "\n", "      ", "xget", "[", "k", "]", "=", "urlunquote", "(", "b", "[", "k", "]", "[", "0", "]", ")", "\n", "if", "sys", ".", "version_info", "[", "0", "]", "<", "3", ":", "\n", "        ", "xget", "[", "k", "]", "=", "xget", "[", "k", "]", ".", "decode", "(", "'utf8'", ")", "\n", "\n", "# Check POST", "\n", "", "", "", "xpost", "=", "{", "}", "\n", "xpost1", "=", "{", "}", "\n", "\n", "try", ":", "\n", "    ", "headers", "=", "http", ".", "headers", "\n", "content_type", "=", "headers", ".", "get", "(", "'content-type'", ")", "\n", "ctype", "=", "''", "\n", "if", "content_type", "!=", "None", ":", "\n", "      ", "ctype", ",", "pdict", "=", "cgi", ".", "parse_header", "(", "content_type", ")", "\n", "# Python3 cgi.parse_multipart expects boundary to be bytes, not str.", "\n", "if", "sys", ".", "version_info", "[", "0", "]", "<", "3", "and", "'boundary'", "in", "pdict", ":", "\n", "        ", "pdict", "[", "'boundary'", "]", "=", "pdict", "[", "'boundary'", "]", ".", "encode", "(", ")", "\n", "\n", "", "", "if", "ctype", "==", "'multipart/form-data'", ":", "\n", "      ", "if", "sys", ".", "version_info", "[", "0", "]", "<", "3", ":", "\n", "        ", "xpost1", "=", "cgi", ".", "parse_multipart", "(", "http", ".", "rfile", ",", "pdict", ")", "\n", "", "else", ":", "\n", "        ", "xxpost1", "=", "cgi", ".", "FieldStorage", "(", "fp", "=", "http", ".", "rfile", ",", "headers", "=", "headers", ",", "environ", "=", "{", "'REQUEST_METHOD'", ":", "'POST'", "}", ")", "\n", "for", "k", "in", "xxpost1", ".", "keys", "(", ")", ":", "\n", "            ", "xpost1", "[", "k", "]", "=", "[", "xxpost1", "[", "k", "]", ".", "value", "]", "\n", "", "", "", "elif", "ctype", "==", "'application/x-www-form-urlencoded'", ":", "\n", "      ", "length", "=", "int", "(", "http", ".", "headers", ".", "get", "(", "'content-length'", ")", ")", "\n", "s", "=", "http", ".", "rfile", ".", "read", "(", "length", ")", "\n", "if", "sys", ".", "version_info", "[", "0", "]", ">", "2", ":", "s", "=", "s", ".", "decode", "(", "'utf8'", ")", "\n", "xpost1", "=", "cgi", ".", "parse_qs", "(", "s", ",", "keep_blank_values", "=", "1", ")", "\n", "\n", "", "", "except", "Exception", "as", "e", ":", "\n", "    ", "web_err", "(", "{", "'http'", ":", "http", ",", "'type'", ":", "xt", ",", "'bin'", ":", "bin", "}", ")", "\n", "ck", ".", "out", "(", "ck", ".", "cfg", "[", "'error'", "]", "+", "bin", ".", "decode", "(", "'utf8'", ")", ")", "\n", "return", "\n", "\n", "# Post processing", "\n", "", "for", "k", "in", "xpost1", ":", "\n", "    ", "v", "=", "xpost1", "[", "k", "]", "\n", "if", "k", ".", "endswith", "(", "'[]'", ")", ":", "\n", "      ", "k1", "=", "k", "[", ":", "-", "2", "]", "\n", "xpost", "[", "k1", "]", "=", "[", "]", "\n", "for", "l", "in", "v", ":", "\n", "        ", "xpost", "[", "k1", "]", ".", "append", "(", "urlunquote", "(", "l", ")", ")", "\n", "", "", "else", ":", "\n", "      ", "if", "k", "!=", "'file_content'", ":", "\n", "        ", "xpost", "[", "k", "]", "=", "urlunquote", "(", "v", "[", "0", "]", ")", "\n", "", "else", ":", "\n", "        ", "xpost", "[", "k", "]", "=", "v", "[", "0", "]", "\n", "\n", "", "", "if", "k", "==", "'file_content'", ":", "\n", "      ", "fcrt", "=", "xpost1", ".", "get", "(", "'file_content_record_to_tmp'", ",", "''", ")", "\n", "if", "(", "type", "(", "fcrt", ")", "==", "list", "and", "len", "(", "fcrt", ")", ">", "0", "and", "fcrt", "[", "0", "]", "==", "'yes'", ")", "or", "fcrt", "==", "'yes'", ":", "\n", "        ", "fd", ",", "fn", "=", "tempfile", ".", "mkstemp", "(", "suffix", "=", "'.tmp'", ",", "prefix", "=", "'ck-'", ")", "# suffix is important - CK will delete such file!", "\n", "os", ".", "close", "(", "fd", ")", "\n", "\n", "f", "=", "open", "(", "fn", ",", "'wb'", ")", "\n", "f", ".", "write", "(", "xpost", "[", "k", "]", ")", "\n", "f", ".", "close", "(", ")", "\n", "\n", "xpost", "[", "k", "+", "'_uploaded'", "]", "=", "fn", "\n", "del", "(", "xpost", "[", "k", "]", ")", "\n", "k", "+=", "'_uploaded'", "\n", "", "else", ":", "\n", "        ", "import", "base64", "\n", "xpost", "[", "k", "+", "'_base64'", "]", "=", "base64", ".", "urlsafe_b64encode", "(", "xpost", "[", "k", "]", ")", ".", "decode", "(", "'utf8'", ")", "\n", "del", "(", "xpost", "[", "k", "]", ")", "\n", "k", "+=", "'_base64'", "\n", "\n", "", "", "if", "sys", ".", "version_info", "[", "0", "]", "<", "3", ":", "\n", "      ", "xpost", "[", "k", "]", "=", "xpost", "[", "k", "]", ".", "decode", "(", "'utf8'", ")", "\n", "\n", "# Prepare input and check if CK json present", "\n", "", "", "ii", "=", "xget", "\n", "ii", ".", "update", "(", "xpost", ")", "\n", "\n", "act", "=", "ii", ".", "get", "(", "'action'", ",", "''", ")", "\n", "\n", "# Generate tmp file (to output images for example)", "\n", "fd", ",", "fn", "=", "tempfile", ".", "mkstemp", "(", "suffix", "=", "'.tmp'", ",", "prefix", "=", "'ck-'", ")", "# suffix is important - CK will delete such file!", "\n", "os", ".", "close", "(", "fd", ")", "\n", "if", "os", ".", "path", ".", "isfile", "(", "fn", ")", ":", "os", ".", "remove", "(", "fn", ")", "\n", "\n", "# Get tmp dir", "\n", "p", "=", "tempfile", ".", "gettempdir", "(", ")", "\n", "\n", "# Execute command *********************************************************", "\n", "ck", ".", "out", "(", "'***************************************************************'", ")", "\n", "ck", ".", "out", "(", "'Received action request: '", "+", "act", ")", "\n", "if", "act", "==", "'get_host_platform_info'", ":", "\n", "    ", "r", "=", "ck", ".", "access", "(", "{", "'action'", ":", "'detect'", ",", "\n", "'module_uoa'", ":", "'platform'", "}", ")", "\n", "if", "r", "[", "'return'", "]", ">", "0", ":", "\n", "# Process error properly", "\n", "      ", "web_err", "(", "{", "'http'", ":", "http", ",", "'type'", ":", "xt", ",", "'bin'", ":", "r", "[", "'error'", "]", ".", "encode", "(", "'utf8'", ")", "}", ")", "\n", "return", "\n", "\n", "", "s", "=", "json", ".", "dumps", "(", "r", ",", "indent", "=", "2", ",", "sort_keys", "=", "True", ")", "\n", "web_out", "(", "{", "'http'", ":", "http", ",", "'type'", ":", "'json'", ",", "'bin'", ":", "s", ".", "encode", "(", "'utf8'", ")", "}", ")", "\n", "\n", "return", "\n", "#############################################################################################################3", "\n", "", "elif", "act", "==", "'run_program'", ":", "\n", "\n", "    ", "data_id", "=", "ii", ".", "get", "(", "'data_id'", ",", "''", ")", "\n", "\n", "r", "=", "solution", ".", "run", "(", "{", "'uid'", ":", "data_id", "}", ")", "\n", "\n", "# start program", "\n", "#    r=ck.access({'action':'run',", "\n", "#          'module_uoa':'program',", "\n", "#          'data_uoa':ii.get('program_name',''), ", "\n", "#          'cmd_key': 'use_continuous',", "\n", "#          'deps.python': 'a699c0c7de43a121',", "\n", "#          'quiet': 'yes'})", "\n", "\n", "if", "r", "[", "'return'", "]", ">", "0", ":", "\n", "# Process error properly", "\n", "      ", "web_err", "(", "{", "'http'", ":", "http", ",", "'type'", ":", "xt", ",", "'bin'", ":", "r", "[", "'error'", "]", ".", "encode", "(", "'utf8'", ")", "}", ")", "\n", "return", "\n", "\n", "", "solution", "=", "{", "'status'", ":", "True", "}", "\n", "s", "=", "json", ".", "dumps", "(", "solution", ",", "indent", "=", "4", ",", "sort_keys", "=", "True", ")", "\n", "web_out", "(", "{", "'http'", ":", "http", ",", "'type'", ":", "'json'", ",", "'bin'", ":", "s", ".", "encode", "(", "'utf8'", ")", "}", ")", "\n", "\n", "return", "\n", "\n", "", "elif", "act", "==", "'benchmark_program'", ":", "\n", "\n", "    ", "data_id", "=", "ii", ".", "get", "(", "'data_id'", ",", "''", ")", "\n", "\n", "r", "=", "solution", ".", "benchmark", "(", "{", "'uid'", ":", "data_id", "}", ")", "\n", "\n", "if", "r", "[", "'return'", "]", ">", "0", ":", "\n", "# Process error properly", "\n", "      ", "web_err", "(", "{", "'http'", ":", "http", ",", "'type'", ":", "xt", ",", "'bin'", ":", "r", "[", "'error'", "]", ".", "encode", "(", "'utf8'", ")", "}", ")", "\n", "return", "\n", "\n", "", "solution", "=", "{", "'status'", ":", "True", "}", "\n", "s", "=", "json", ".", "dumps", "(", "solution", ",", "indent", "=", "4", ",", "sort_keys", "=", "True", ")", "\n", "web_out", "(", "{", "'http'", ":", "http", ",", "'type'", ":", "'json'", ",", "'bin'", ":", "s", ".", "encode", "(", "'utf8'", ")", "}", ")", "\n", "return", "\n", "\n", "", "elif", "act", "==", "'publish_result'", ":", "\n", "\n", "    ", "data_id", "=", "ii", ".", "get", "(", "'data_id'", ",", "''", ")", "\n", "\n", "r", "=", "solution", ".", "publish_result", "(", "{", "'uid'", ":", "data_id", "}", ")", "\n", "\n", "if", "r", "[", "'return'", "]", ">", "0", ":", "\n", "# Process error properly", "\n", "      ", "web_err", "(", "{", "'http'", ":", "http", ",", "'type'", ":", "xt", ",", "'bin'", ":", "r", "[", "'error'", "]", ".", "encode", "(", "'utf8'", ")", "}", ")", "\n", "return", "\n", "\n", "", "solution", "=", "{", "'status'", ":", "True", "}", "\n", "s", "=", "json", ".", "dumps", "(", "solution", ",", "indent", "=", "4", ",", "sort_keys", "=", "True", ")", "\n", "web_out", "(", "{", "'http'", ":", "http", ",", "'type'", ":", "'json'", ",", "'bin'", ":", "s", ".", "encode", "(", "'utf8'", ")", "}", ")", "\n", "return", "\n", "\n", "#############################################################################################################3", "\n", "", "elif", "act", "==", "'get_program_result_image'", ":", "\n", "\n", "    ", "data_id", "=", "ii", "[", "'data_id'", "]", "\n", "program_name", "=", "ii", "[", "'program_name'", "]", "\n", "\n", "jpeg", "=", "ii", ".", "get", "(", "'jpeg'", ",", "''", ")", "\n", "\n", "ck_entry", "=", "program_name", ".", "split", "(", "':'", ")", "\n", "\n", "# Find solution", "\n", "r", "=", "ck", ".", "access", "(", "{", "'action'", ":", "'load'", ",", "\n", "'module_uoa'", ":", "'cr-solution'", ",", "\n", "'data_uoa'", ":", "data_id", "}", ")", "\n", "if", "r", "[", "'return'", "]", ">", "0", ":", "\n", "# Process error properly", "\n", "      ", "web_err", "(", "{", "'http'", ":", "http", ",", "'type'", ":", "xt", ",", "'bin'", ":", "r", "[", "'error'", "]", ".", "encode", "(", "'utf8'", ")", "}", ")", "\n", "return", "\n", "\n", "", "p", "=", "r", "[", "'path'", "]", "\n", "\n", "meta", "=", "r", "[", "'dict'", "]", "\n", "workflow_output_dir", "=", "meta", ".", "get", "(", "'workflow_output_dir'", ",", "''", ")", "\n", "\n", "workflow_repo", "=", "meta", ".", "get", "(", "'workflow_repo_url'", ",", "''", ")", "\n", "j", "=", "workflow_repo", ".", "rfind", "(", "'/'", ")", "\n", "if", "j", ">", "0", ":", "\n", "      ", "workflow_repo", "=", "workflow_repo", "[", "j", "+", "1", ":", "]", "\n", "\n", "", "cur_dir", "=", "os", ".", "path", ".", "join", "(", "p", ",", "'CK'", ",", "workflow_repo", ",", "ck_entry", "[", "0", "]", ",", "ck_entry", "[", "1", "]", ")", "\n", "if", "workflow_output_dir", "!=", "''", ":", "\n", "      ", "cur_dir", "=", "os", ".", "path", ".", "join", "(", "cur_dir", ",", "workflow_output_dir", ")", "\n", "\n", "#       r=ck.access({'action':'find',", "\n", "#            'module_uoa':'program',", "\n", "#            'data_uoa':ii.get('program_name','')})", "\n", "#", "\n", "#       if r['return']>0: ", "\n", "#          # Process error properly", "\n", "#          web_err({'http':http, 'type':xt, 'bin':r['error'].encode('utf8')})", "\n", "#          return", "\n", "\n", "#    cur_dir = 'D:\\\\Work1\\\\CK\\\\ck-repos\\\\local\\\\cr-solution\\\\demo-obj-detection-kitti-min-tf-cpu-win\\\\CK\\\\ck-tensorflow\\\\program\\\\squeezedet\\\\tmp\\\\out' #os.path.join(r['path'],\"tmp/out\") ", "\n", "#    cur_dir='/home/cindex/CK/local/cr-solution/demo-obj-detection-self-driving-win/CK/ck-tensorflow/program/squeezedet/tmp/out'", "\n", "#    cur_dir='/home/cindex/CK/local/cr-solution/demo-obj-detection-kitti-min-tf-cpu-win/CK/ck-tensorflow/program/squeezedet/tmp/out'", "\n", "\n", "# find the penultimate image provided", "\n", "", "try", ":", "\n", "      ", "st", "=", "False", "\n", "filepath", "=", "''", "\n", "filepath_buf", "=", "''", "\n", "\n", "found_files", "=", "[", "]", "\n", "\n", "ck", ".", "out", "(", "''", ")", "\n", "ck", ".", "out", "(", "'Checking for output files in directory:'", ")", "\n", "ck", ".", "out", "(", "'  '", "+", "cur_dir", ")", "\n", "ck", ".", "out", "(", "''", ")", "\n", "\n", "sorted_list", "=", "sorted", "(", "os", ".", "listdir", "(", "cur_dir", ")", ")", "\n", "for", "file", "in", "sorted_list", ":", "\n", "        ", "if", "file", ".", "endswith", "(", "\".png\"", ")", "and", "file", ".", "startswith", "(", "\"boxed_\"", ")", ":", "\n", "          ", "found_files", ".", "append", "(", "file", ")", "\n", "if", "len", "(", "found_files", ")", "==", "3", ":", "\n", "            ", "break", "\n", "", "", "", "", "except", ":", "\n", "      ", "err", "=", "'no files available'", "\n", "web_err", "(", "{", "'http'", ":", "http", ",", "'type'", ":", "xt", ",", "'bin'", ":", "err", ".", "encode", "(", "'utf8'", ")", "}", ")", "\n", "return", "\n", "\n", "", "if", "len", "(", "found_files", ")", "==", "0", ":", "\n", "      ", "err", "=", "'no files available'", "\n", "web_err", "(", "{", "'http'", ":", "http", ",", "'type'", ":", "xt", ",", "'bin'", ":", "err", ".", "encode", "(", "'utf8'", ")", "}", ")", "\n", "return", "\n", "\n", "", "if", "len", "(", "found_files", ")", "==", "1", ":", "\n", "      ", "filepath", "=", "''", "\n", "filepath_buf", "=", "found_files", "[", "0", "]", "\n", "", "elif", "len", "(", "found_files", ")", "==", "2", ":", "\n", "      ", "filepath", "=", "''", "\n", "filepath_buf", "=", "found_files", "[", "1", "]", "\n", "", "elif", "len", "(", "found_files", ")", "==", "3", ":", "\n", "      ", "filepath", "=", "found_files", "[", "0", "]", "\n", "filepath_buf", "=", "found_files", "[", "1", "]", "\n", "\n", "# Check if convert to jpeg", "\n", "", "file_type", "=", "'png'", "\n", "pinp", "=", "os", ".", "path", ".", "join", "(", "cur_dir", ",", "filepath_buf", ")", "\n", "\n", "if", "jpeg", "==", "'yes'", ":", "\n", "      ", "quality", "=", "ii", ".", "get", "(", "'jpeg_quality'", ",", "''", ")", "\n", "if", "quality", "==", "None", "or", "quality", "==", "''", ":", "quality", "=", "'70'", "\n", "\n", "pout", "=", "os", ".", "path", ".", "join", "(", "cur_dir", ",", "filepath_buf", "+", "'.jpg'", ")", "\n", "\n", "s", "=", "'convert -quality '", "+", "quality", "+", "' '", "+", "pinp", "+", "' '", "+", "pout", "\n", "\n", "ck", ".", "out", "(", "''", ")", "\n", "ck", ".", "out", "(", "'  Converting to jpeg: '", "+", "s", ")", "\n", "\n", "os", ".", "system", "(", "s", ")", "\n", "\n", "pinp", "=", "pout", "\n", "filepath_buf", "+=", "'.jpg'", "\n", "file_type", "=", "'jpg'", "\n", "\n", "# First file will be deleted (only if 2 afterwards), second served", "\n", "", "ck", ".", "out", "(", "'  Loading file '", "+", "filepath_buf", ")", "\n", "r", "=", "ck", ".", "load_text_file", "(", "{", "'text_file'", ":", "pinp", ",", "'keep_as_bin'", ":", "'yes'", "}", ")", "\n", "\n", "if", "jpeg", "==", "'yes'", ":", "\n", "      ", "if", "os", ".", "path", ".", "isfile", "(", "pinp", ")", ":", "\n", "        ", "os", ".", "remove", "(", "pinp", ")", "\n", "\n", "# Remove first", "\n", "", "", "if", "filepath", "!=", "''", ":", "\n", "      ", "ck", ".", "out", "(", "'  Trying to delete file '", "+", "filepath", ")", "\n", "x", "=", "os", ".", "path", ".", "join", "(", "cur_dir", ",", "filepath", ")", "\n", "if", "os", ".", "path", ".", "isfile", "(", "x", ")", ":", "\n", "        ", "os", ".", "remove", "(", "x", ")", "\n", "\n", "# Then finish checking previous one", "\n", "", "", "if", "r", "[", "'return'", "]", ">", "0", ":", "\n", "      ", "bout", "=", "r", "[", "'error'", "]", ".", "encode", "(", "'utf-8'", ")", "\n", "", "else", ":", "\n", "      ", "bout", "=", "r", "[", "'bin'", "]", "\n", "\n", "", "web_out", "(", "{", "'http'", ":", "http", ",", "'type'", ":", "file_type", ",", "'bin'", ":", "bout", "}", ")", "\n", "\n", "return", "\n", "\n", "#############################################################################################################3", "\n", "", "elif", "act", "==", "'process_webcam'", ":", "\n", "\n", "    ", "data_id", "=", "ii", "[", "'data_id'", "]", "\n", "program_name", "=", "ii", "[", "'program_name'", "]", "\n", "\n", "ck_entry", "=", "program_name", ".", "split", "(", "':'", ")", "\n", "\n", "# Find solution", "\n", "r", "=", "ck", ".", "access", "(", "{", "'action'", ":", "'load'", ",", "\n", "'module_uoa'", ":", "'cr-solution'", ",", "\n", "'data_uoa'", ":", "data_id", "}", ")", "\n", "if", "r", "[", "'return'", "]", ">", "0", ":", "\n", "# Process error properly", "\n", "      ", "web_err", "(", "{", "'http'", ":", "http", ",", "'type'", ":", "xt", ",", "'bin'", ":", "r", "[", "'error'", "]", ".", "encode", "(", "'utf8'", ")", "}", ")", "\n", "return", "\n", "\n", "", "pp", "=", "r", "[", "'path'", "]", "# Path to solution!", "\n", "\n", "meta", "=", "r", "[", "'dict'", "]", "\n", "\n", "# Find workflow output path", "\n", "workflow_input_dir", "=", "meta", ".", "get", "(", "'workflow_input_dir'", ",", "''", ")", "\n", "workflow_output_dir", "=", "meta", ".", "get", "(", "'workflow_output_dir'", ",", "''", ")", "\n", "workflow_repo", "=", "meta", ".", "get", "(", "'workflow_repo_url'", ",", "''", ")", "\n", "\n", "j", "=", "workflow_repo", ".", "rfind", "(", "'/'", ")", "\n", "if", "j", ">", "0", ":", "\n", "      ", "workflow_repo", "=", "workflow_repo", "[", "j", "+", "1", ":", "]", "\n", "\n", "", "workflow_dir", "=", "os", ".", "path", ".", "join", "(", "pp", ",", "'CK'", ",", "workflow_repo", ",", "ck_entry", "[", "0", "]", ",", "ck_entry", "[", "1", "]", ")", "\n", "\n", "if", "workflow_input_dir", "!=", "''", ":", "\n", "      ", "p", "=", "os", ".", "path", ".", "join", "(", "workflow_dir", ",", "workflow_input_dir", ")", "\n", "", "else", ":", "\n", "      ", "p", "=", "os", ".", "path", ".", "join", "(", "workflow_dir", ",", "\"tmp\"", ",", "\"input\"", ")", "\n", "\n", "", "if", "not", "os", ".", "path", ".", "isdir", "(", "p", ")", ":", "os", ".", "makedirs", "(", "p", ")", "\n", "\n", "if", "workflow_output_dir", "!=", "''", ":", "\n", "      ", "pout", "=", "os", ".", "path", ".", "join", "(", "workflow_dir", ",", "workflow_output_dir", ")", "\n", "", "else", ":", "\n", "      ", "pout", "=", "os", ".", "path", ".", "join", "(", "workflow_dir", ",", "\"tmp\"", ")", "\n", "\n", "", "if", "not", "os", ".", "path", ".", "isdir", "(", "pout", ")", ":", "os", ".", "makedirs", "(", "pout", ")", "\n", "\n", "# Record image", "\n", "image_uri", "=", "xpost", ".", "get", "(", "'image_uri'", ",", "''", ")", "\n", "\n", "x", "=", "'data:image/jpeg;base64,'", "\n", "if", "image_uri", ".", "startswith", "(", "x", ")", ":", "\n", "      ", "image64", "=", "image_uri", "[", "len", "(", "x", ")", ":", "]", "\n", "\n", "# Finding last file and incrementing", "\n", "", "ff", "=", "'cr-stream-'", "\n", "\n", "l", "=", "os", ".", "listdir", "(", "p", ")", "\n", "\n", "inum", "=", "0", "\n", "ffound", "=", "''", "\n", "for", "f", "in", "os", ".", "listdir", "(", "p", ")", ":", "\n", "      ", "if", "f", ".", "startswith", "(", "ff", ")", "and", "f", ".", "endswith", "(", "'.jpg'", ")", ":", "\n", "        ", "j", "=", "f", ".", "find", "(", "'.'", ")", "\n", "num", "=", "f", "[", "len", "(", "ff", ")", ":", "j", "]", "\n", "if", "int", "(", "num", ")", ">", "inum", ":", "\n", "          ", "inum", "=", "int", "(", "num", ")", "\n", "ffound", "=", "f", "\n", "\n", "# New logic: if file already exists, just skip next request from web (otherwise many parallel requests)", "\n", "# When program starts, it should clean input/output to let this code continue processing image", "\n", "", "", "", "if", "(", "inum", ">", "0", ")", ":", "\n", "      ", "time", ".", "sleep", "(", "1", ")", "\n", "ss", "=", "'request skipped because there is already file in queue'", "\n", "ck", ".", "out", "(", "'  Warning: '", "+", "ss", "+", "' ('", "+", "os", ".", "path", ".", "join", "(", "p", ",", "ffound", ")", "+", "') ...'", ")", "\n", "s", "=", "'{\"return\":16, \"error\":\"'", "+", "ss", "+", "'\"}'", "\n", "web_out", "(", "{", "'http'", ":", "http", ",", "'type'", ":", "'json'", ",", "'bin'", ":", "s", ".", "encode", "(", "'utf8'", ")", "}", ")", "\n", "return", "\n", "\n", "# Otherwise continue processing ...", "\n", "", "if", "inum", "==", "0", ":", "\n", "      ", "inum", "+=", "1", "\n", "sinum", "=", "str", "(", "inum", ")", "\n", "filename", "=", "ff", "+", "(", "'0'", "*", "(", "8", "-", "len", "(", "sinum", ")", ")", ")", "+", "sinum", "\n", "\n", "filename2", "=", "filename", "+", "'.jpg'", "\n", "pf", "=", "os", ".", "path", ".", "join", "(", "p", ",", "filename2", ")", "\n", "\n", "r", "=", "ck", ".", "convert_upload_string_to_file", "(", "{", "'file_content_base64'", ":", "image64", ",", "'filename'", ":", "pf", "}", ")", "\n", "if", "r", "[", "'return'", "]", ">", "0", ":", "return", "r", "\n", "\n", "ck", ".", "out", "(", "'  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!'", ")", "\n", "ck", ".", "out", "(", "'  Recorded external image to '", "+", "pf", ")", "\n", "\n", "# Need extra converting", "\n", "pp1", "=", "os", ".", "path", ".", "join", "(", "pp", ",", "'support-script-convert.sh'", ")", "\n", "if", "os", ".", "path", ".", "isfile", "(", "pp1", ")", ":", "\n", "        ", "ck", ".", "out", "(", "''", ")", "\n", "ck", ".", "out", "(", "'Extra image processing ...'", ")", "\n", "ck", ".", "out", "(", "''", ")", "\n", "\n", "extra_cmd", "=", "'cd \"'", "+", "p", "+", "'\"\\n'", "\n", "extra_cmd", "+=", "'. \"'", "+", "pp1", "+", "'\" '", "+", "filename2", "+", "'\\n'", "\n", "\n", "r", "=", "solution", ".", "run", "(", "{", "'uid'", ":", "data_id", ",", "'cmd'", ":", "extra_cmd", "}", ")", "\n", "if", "r", "[", "'return'", "]", ">", "0", ":", "\n", "# Process error properly", "\n", "          ", "web_err", "(", "{", "'http'", ":", "http", ",", "'type'", ":", "xt", ",", "'bin'", ":", "r", "[", "'error'", "]", ".", "encode", "(", "'utf8'", ")", "}", ")", "\n", "return", "\n", "\n", "", "", "", "else", ":", "\n", "      ", "sinum", "=", "str", "(", "inum", ")", "\n", "filename", "=", "ff", "+", "(", "'0'", "*", "(", "8", "-", "len", "(", "sinum", ")", ")", ")", "+", "sinum", "\n", "\n", "filename2", "=", "filename", "+", "'.jpg'", "\n", "pf", "=", "os", ".", "path", ".", "join", "(", "p", ",", "filename2", ")", "\n", "\n", "# Need extra pushing", "\n", "", "pp1", "=", "os", ".", "path", ".", "join", "(", "pp", ",", "'support-script-push.sh'", ")", "\n", "if", "os", ".", "path", ".", "isfile", "(", "pp1", ")", ":", "\n", "      ", "ck", ".", "out", "(", "''", ")", "\n", "ck", ".", "out", "(", "'Extra image pushing to device ...'", ")", "\n", "ck", ".", "out", "(", "''", ")", "\n", "\n", "extra_cmd", "=", "'cd \"'", "+", "p", "+", "'\"\\n'", "\n", "extra_cmd", "+=", "'. \"'", "+", "pp1", "+", "'\" '", "+", "filename", "+", "'\\n'", "\n", "\n", "r", "=", "solution", ".", "run", "(", "{", "'uid'", ":", "data_id", ",", "'cmd'", ":", "extra_cmd", "}", ")", "\n", "if", "r", "[", "'return'", "]", ">", "0", ":", "\n", "# Process error properly", "\n", "        ", "web_err", "(", "{", "'http'", ":", "http", ",", "'type'", ":", "xt", ",", "'bin'", ":", "r", "[", "'error'", "]", ".", "encode", "(", "'utf8'", ")", "}", ")", "\n", "return", "\n", "\n", "# If Android-like device wait for the file ...", "\n", "", "", "ppull", "=", "os", ".", "path", ".", "join", "(", "pp", ",", "'support-script-pull.sh'", ")", "\n", "\n", "# Waiting for output file", "\n", "poutf", "=", "os", ".", "path", ".", "join", "(", "pout", ",", "filename", "+", "'.json'", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "isfile", "(", "poutf", ")", ":", "\n", "      ", "ck", ".", "out", "(", "'Waiting for output file: '", "+", "poutf", ")", "\n", "\n", "", "while", "not", "os", ".", "path", ".", "isfile", "(", "poutf", ")", ":", "\n", "# Check if need to pull", "\n", "      ", "if", "os", ".", "path", ".", "isfile", "(", "ppull", ")", ":", "\n", "        ", "ck", ".", "out", "(", "'Trying to pull from device ...'", ")", "\n", "\n", "extra_cmd", "=", "'cd \"'", "+", "pout", "+", "'\"\\n'", "\n", "extra_cmd", "+=", "'export CODEREEF_SOLUTION_PATH=\"'", "+", "pp", "+", "'\"\\n'", "\n", "extra_cmd", "+=", "'. \"'", "+", "ppull", "+", "'\" '", "+", "filename", "+", "'\\n'", "\n", "\n", "r", "=", "solution", ".", "run", "(", "{", "'uid'", ":", "data_id", ",", "'cmd'", ":", "extra_cmd", "}", ")", "\n", "if", "r", "[", "'return'", "]", ">", "0", ":", "\n", "# Process error properly", "\n", "          ", "web_err", "(", "{", "'http'", ":", "http", ",", "'type'", ":", "xt", ",", "'bin'", ":", "r", "[", "'error'", "]", ".", "encode", "(", "'utf8'", ")", "}", ")", "\n", "return", "\n", "\n", "", "", "time", ".", "sleep", "(", "0.1", ")", "\n", "\n", "", "ck", ".", "out", "(", "''", ")", "\n", "ck", ".", "out", "(", "'Found solution!'", ")", "\n", "ck", ".", "out", "(", "''", ")", "\n", "\n", "with", "open", "(", "poutf", ")", "as", "json_file", ":", "\n", "      ", "solution", "=", "json", ".", "load", "(", "json_file", ")", "\n", "ck", ".", "out", "(", "json", ".", "dumps", "(", "solution", ",", "indent", "=", "2", ")", ")", "\n", "\n", "", "if", "os", ".", "path", ".", "isfile", "(", "poutf", ")", ":", "\n", "      ", "os", ".", "remove", "(", "poutf", ")", "\n", "\n", "", "if", "inum", "==", "1", "and", "os", ".", "path", ".", "isfile", "(", "pf", ")", ":", "\n", "      ", "ck", ".", "out", "(", "'  REMOVING '", "+", "pf", ")", "\n", "os", ".", "remove", "(", "pf", ")", "\n", "\n", "", "ck", ".", "out", "(", "''", ")", "\n", "\n", "s", "=", "json", ".", "dumps", "(", "solution", ",", "indent", "=", "4", ",", "sort_keys", "=", "True", ")", "\n", "web_out", "(", "{", "'http'", ":", "http", ",", "'type'", ":", "'json'", ",", "'bin'", ":", "s", ".", "encode", "(", "'utf8'", ")", "}", ")", "\n", "\n", "return", "\n", "\n", "#############################################################################################################3", "\n", "", "elif", "act", "==", "'get_image'", ":", "\n", "    ", "num", "=", "ii", ".", "get", "(", "'num'", ",", "''", ")", "\n", "inum", "=", "int", "(", "num", ")", "\n", "sinum", "=", "str", "(", "inum", ")", "\n", "\n", "# Finding last file and incrementing", "\n", "ff", "=", "'cr-stream-'", "\n", "pf", "=", "os", ".", "path", ".", "join", "(", "p", ",", "ff", "+", "(", "'0'", "*", "(", "8", "-", "len", "(", "sinum", ")", ")", ")", "+", "sinum", "+", "'.jpg'", ")", "\n", "\n", "ck", ".", "out", "(", "'  Loaded file '", "+", "pf", ")", "\n", "\n", "r", "=", "ck", ".", "load_text_file", "(", "{", "'text_file'", ":", "pf", ",", "'keep_as_bin'", ":", "'yes'", "}", ")", "\n", "if", "r", "[", "'return'", "]", ">", "0", ":", "\n", "      ", "bout", "=", "r", "[", "'error'", "]", ".", "encode", "(", "'utf-8'", ")", "\n", "", "else", ":", "\n", "      ", "bout", "=", "r", "[", "'bin'", "]", "\n", "\n", "", "web_out", "(", "{", "'http'", ":", "http", ",", "'type'", ":", "'jpeg'", ",", "'bin'", ":", "bout", "}", ")", "\n", "\n", "return", "\n", "\n", "#############################################################################################################3", "\n", "", "elif", "act", "==", "'get_result'", ":", "\n", "\n", "    ", "data_id", "=", "ii", "[", "'data_id'", "]", "\n", "\n", "# Find solution", "\n", "r", "=", "ck", ".", "access", "(", "{", "'action'", ":", "'load'", ",", "\n", "'module_uoa'", ":", "'cr-solution'", ",", "\n", "'data_uoa'", ":", "data_id", "}", ")", "\n", "if", "r", "[", "'return'", "]", ">", "0", ":", "\n", "# Process error properly", "\n", "      ", "web_err", "(", "{", "'http'", ":", "http", ",", "'type'", ":", "xt", ",", "'bin'", ":", "r", "[", "'error'", "]", ".", "encode", "(", "'utf8'", ")", "}", ")", "\n", "return", "\n", "\n", "", "pp", "=", "r", "[", "'path'", "]", "# Path to solution!", "\n", "\n", "meta", "=", "r", "[", "'dict'", "]", "\n", "\n", "program_name", "=", "meta", ".", "get", "(", "'workflow'", ",", "''", ")", "\n", "ck_entry", "=", "program_name", ".", "split", "(", "':'", ")", "\n", "\n", "# Find workflow output path", "\n", "result_file", "=", "meta", ".", "get", "(", "'result_file'", ",", "''", ")", "\n", "workflow_repo", "=", "meta", ".", "get", "(", "'workflow_repo_url'", ",", "''", ")", "\n", "\n", "j", "=", "workflow_repo", ".", "rfind", "(", "'/'", ")", "\n", "if", "j", ">", "0", ":", "\n", "      ", "workflow_repo", "=", "workflow_repo", "[", "j", "+", "1", ":", "]", "\n", "\n", "", "workflow_dir", "=", "os", ".", "path", ".", "join", "(", "pp", ",", "'CK'", ",", "workflow_repo", ",", "ck_entry", "[", "0", "]", ",", "ck_entry", "[", "1", "]", ")", "\n", "\n", "if", "result_file", "!=", "''", ":", "\n", "      ", "pout", "=", "os", ".", "path", ".", "join", "(", "workflow_dir", ",", "result_file", ")", "\n", "", "else", ":", "\n", "      ", "pout", "=", "os", ".", "path", ".", "join", "(", "workflow_dir", ",", "\"tmp\"", ",", "\"tmp-ck-timer.json\"", ")", "\n", "\n", "# if not os.path.isdir(pout):  os.makedirs(pout)", "\n", "\n", "\n", "# If Android-like device wait for the file ...", "\n", "", "ppull", "=", "os", ".", "path", ".", "join", "(", "pp", ",", "'support-script-pull.sh'", ")", "\n", "\n", "# Waiting for output file", "\n", "if", "not", "os", ".", "path", ".", "isfile", "(", "pout", ")", ":", "\n", "      ", "ck", ".", "out", "(", "'Waiting for output file: '", "+", "pout", ")", "\n", "\n", "", "while", "not", "os", ".", "path", ".", "isfile", "(", "pout", ")", ":", "\n", "# Check if need to pull", "\n", "      ", "if", "os", ".", "path", ".", "isfile", "(", "ppull", ")", ":", "\n", "        ", "ck", ".", "out", "(", "'Trying to pull from device ...'", ")", "\n", "\n", "extra_cmd", "=", "'cd \"'", "+", "pout", "+", "'\"\\n'", "\n", "extra_cmd", "+=", "'export CODEREEF_SOLUTION_PATH=\"'", "+", "pp", "+", "'\"\\n'", "\n", "extra_cmd", "+=", "'. \"'", "+", "ppull", "+", "'\" '", "+", "filename", "+", "'\\n'", "\n", "\n", "r", "=", "solution", ".", "run", "(", "{", "'uid'", ":", "data_id", ",", "'cmd'", ":", "extra_cmd", "}", ")", "\n", "if", "r", "[", "'return'", "]", ">", "0", ":", "\n", "# Process error properly", "\n", "          ", "web_err", "(", "{", "'http'", ":", "http", ",", "'type'", ":", "xt", ",", "'bin'", ":", "r", "[", "'error'", "]", ".", "encode", "(", "'utf8'", ")", "}", ")", "\n", "return", "\n", "\n", "", "", "time", ".", "sleep", "(", "0.1", ")", "\n", "\n", "", "ck", ".", "out", "(", "''", ")", "\n", "ck", ".", "out", "(", "'Found solution!'", ")", "\n", "ck", ".", "out", "(", "''", ")", "\n", "\n", "rx", "=", "ck", ".", "load_json_file", "(", "{", "'json_file'", ":", "pout", "}", ")", "\n", "if", "rx", "[", "'return'", "]", ">", "0", ":", "return", "rx", "\n", "\n", "rx", "=", "ck", ".", "flatten_dict", "(", "rx", ")", "\n", "if", "rx", "[", "'return'", "]", ">", "0", ":", "return", "rx", "\n", "\n", "rdf", "=", "rx", "[", "'dict'", "]", "\n", "crdf", "=", "{", "}", "\n", "\n", "# Remove first ## (do not need here)", "\n", "for", "k", "in", "rdf", ":", "\n", "      ", "v", "=", "rdf", "[", "k", "]", "\n", "if", "k", ".", "startswith", "(", "'##'", ")", ":", "k", "=", "k", "[", "2", ":", "]", "\n", "crdf", "[", "k", "]", "=", "v", "\n", "", "ck", ".", "out", "(", "json", ".", "dumps", "(", "crdf", ",", "indent", "=", "2", ")", ")", "\n", "\n", "# if os.path.isfile(pout):", "\n", "#   os.remove(pout)", "\n", "\n", "# if inum==1 and os.path.isfile(pf):", "\n", "# ck.out('  REMOVING '+pf)", "\n", "# os.remove(pf)", "\n", "\n", "ck", ".", "out", "(", "''", ")", "\n", "\n", "s", "=", "json", ".", "dumps", "(", "crdf", ",", "indent", "=", "4", ",", "sort_keys", "=", "True", ")", "\n", "web_out", "(", "{", "'http'", ":", "http", ",", "'type'", ":", "'json'", ",", "'bin'", ":", "s", ".", "encode", "(", "'utf8'", ")", "}", ")", "\n", "\n", "return", "\n", "\n", "", "elif", "act", "==", "'get_status'", ":", "\n", "\n", "    ", "data_id", "=", "ii", "[", "'data_id'", "]", "\n", "\n", "# Find solution", "\n", "r", "=", "ck", ".", "access", "(", "{", "'action'", ":", "'load'", ",", "\n", "'module_uoa'", ":", "'cr-solution'", ",", "\n", "'data_uoa'", ":", "data_id", "}", ")", "\n", "if", "r", "[", "'return'", "]", ">", "0", ":", "\n", "# Process error properly", "\n", "      ", "web_err", "(", "{", "'http'", ":", "http", ",", "'type'", ":", "xt", ",", "'bin'", ":", "r", "[", "'error'", "]", ".", "encode", "(", "'utf8'", ")", "}", ")", "\n", "return", "\n", "\n", "", "pp", "=", "r", "[", "'path'", "]", "# Path to solution!", "\n", "tmp_solStatus", "=", "os", ".", "path", ".", "join", "(", "pp", ",", "\"tmp\"", ",", "\"status.json\"", ")", "\n", "\n", "rx", "=", "ck", ".", "load_json_file", "(", "{", "'json_file'", ":", "tmp_solStatus", "}", ")", "\n", "if", "rx", "[", "'return'", "]", ">", "0", ":", "return", "rx", "\n", "\n", "ck", ".", "out", "(", "json", ".", "dumps", "(", "rx", ",", "indent", "=", "2", ")", ")", "\n", "\n", "rdf", "=", "rx", "[", "'dict'", "]", "\n", "\n", "ck", ".", "out", "(", "''", ")", "\n", "\n", "s", "=", "json", ".", "dumps", "(", "rdf", ",", "indent", "=", "4", ",", "sort_keys", "=", "True", ")", "\n", "web_out", "(", "{", "'http'", ":", "http", ",", "'type'", ":", "'json'", ",", "'bin'", ":", "s", ".", "encode", "(", "'utf8'", ")", "}", ")", "\n", "\n", "return", "\n", "\n", "#############################################################################################################3", "\n", "", "elif", "act", "==", "'heartbit'", ":", "\n", "\n", "    ", "locdir", "=", "os", ".", "path", ".", "dirname", "(", "os", ".", "path", ".", "realpath", "(", "__file__", ")", ")", "\n", "ck", ".", "out", "(", "'  Local directory: '", "+", "locdir", ")", "\n", "\n", "# Finding last file and incrementing", "\n", "pf", "=", "os", ".", "path", ".", "join", "(", "locdir", ",", "'static/favicon.ico'", ")", "\n", "\n", "ck", ".", "out", "(", "'  Loaded file '", "+", "pf", ")", "\n", "\n", "r", "=", "ck", ".", "load_text_file", "(", "{", "'text_file'", ":", "pf", ",", "'keep_as_bin'", ":", "'yes'", "}", ")", "\n", "if", "r", "[", "'return'", "]", ">", "0", ":", "\n", "      ", "bout", "=", "r", "[", "'error'", "]", ".", "encode", "(", "'utf-8'", ")", "\n", "", "else", ":", "\n", "      ", "bout", "=", "r", "[", "'bin'", "]", "\n", "\n", "", "web_out", "(", "{", "'http'", ":", "http", ",", "'type'", ":", "'jpeg'", ",", "'bin'", ":", "bout", "}", ")", "\n", "\n", "return", "\n", "\n", "\n", "r", "=", "{", "'return'", ":", "0", "}", "\n", "xt", "=", "'web'", "\n", "bout", "=", "b'TEST WORKS'", "\n", "\n", "web_out", "(", "{", "'http'", ":", "http", ",", "'type'", ":", "xt", ",", "'bin'", ":", "bout", "}", ")", "\n", "return", "\n", "\n", "# Process output", "\n", "if", "r", "[", "'return'", "]", ">", "0", ":", "\n", "      ", "if", "os", ".", "path", ".", "isfile", "(", "fn", ")", ":", "os", ".", "remove", "(", "fn", ")", "\n", "\n", "bout", "=", "r", "[", "'error'", "]", "\n", "\n", "try", ":", "bout", "=", "bout", ".", "encode", "(", "'utf-8'", ")", "\n", "except", "Exception", "as", "e", ":", "pass", "\n", "\n", "web_err", "(", "{", "'http'", ":", "http", ",", "\n", "'type'", ":", "xt", ",", "\n", "'bin'", ":", "bout", "}", ")", "\n", "return", "\n", "\n", "# If json or web", "\n", "# Try to load output file", "\n", "", "if", "not", "os", ".", "path", ".", "isfile", "(", "fn", ")", ":", "\n", "      ", "web_err", "(", "{", "'http'", ":", "http", ",", "\n", "'type'", ":", "xt", ",", "\n", "'bin'", ":", "b'Output file was not created, see output ('", "+", "r", "[", "'std'", "]", ".", "encode", "(", "'utf8'", ")", "+", "b')!'", "}", ")", "\n", "return", "\n", "\n", "", "r", "=", "ck", ".", "load_text_file", "(", "{", "'text_file'", ":", "fn", ",", "'keep_as_bin'", ":", "'yes'", "}", ")", "\n", "if", "r", "[", "'return'", "]", ">", "0", ":", "\n", "      ", "bout", "=", "r", "[", "'error'", "]", "\n", "\n", "try", ":", "bout", "=", "bout", ".", "encode", "(", "'utf-8'", ")", "\n", "except", "Exception", "as", "e", ":", "pass", "\n", "\n", "web_err", "(", "{", "'http'", ":", "http", ",", "'type'", ":", "xt", ",", "'bin'", ":", "bout", "}", ")", "\n", "\n", "return", "\n", "\n", "", "bin", "=", "r", "[", "'bin'", "]", "\n", "\n", "# Process JSON output from file", "\n", "fx", "=", "''", "\n", "\n", "if", "sys", ".", "version_info", "[", "0", "]", ">", "2", ":", "bin", "=", "bin", ".", "decode", "(", "'utf-8'", ")", "\n", "\n", "ru", "=", "ck", ".", "convert_json_str_to_dict", "(", "{", "'str'", ":", "bin", ",", "'skip_quote_replacement'", ":", "'yes'", "}", ")", "\n", "if", "ru", "[", "'return'", "]", ">", "0", ":", "\n", "      ", "bout", "=", "ru", "[", "'error'", "]", "\n", "\n", "try", ":", "bout", "=", "bout", ".", "encode", "(", "'utf-8'", ")", "\n", "except", "Exception", "as", "e", ":", "pass", "\n", "\n", "web_err", "(", "{", "'http'", ":", "http", ",", "'type'", ":", "xt", ",", "'bin'", ":", "bout", "}", ")", "\n", "\n", "return", "\n", "\n", "", "rr", "=", "ru", "[", "'dict'", "]", "\n", "if", "rr", "[", "'return'", "]", ">", "0", ":", "\n", "      ", "bout", "=", "rr", "[", "'error'", "]", "\n", "\n", "try", ":", "bout", "=", "bout", ".", "encode", "(", "'utf-8'", ")", "\n", "except", "Exception", "as", "e", ":", "pass", "\n", "\n", "web_err", "(", "{", "'http'", ":", "http", ",", "'type'", ":", "xt", ",", "'bin'", ":", "bout", "}", ")", "\n", "return", "\n", "\n", "# Check if file was returned", "\n", "", "fr", "=", "False", "\n", "\n", "if", "'file_content_base64'", "in", "rr", "and", "rr", ".", "get", "(", "'filename'", ",", "''", ")", "!=", "''", ":", "\n", "      ", "fr", "=", "True", "\n", "\n", "# Check if download", "\n", "", "if", "(", "xt", "==", "'web'", "and", "fr", ")", "or", "(", "act", "==", "'pull'", "and", "xt", "!=", "'json'", ")", ":", "\n", "      ", "import", "base64", "\n", "x", "=", "rr", ".", "get", "(", "'file_content_base64'", ",", "''", ")", "\n", "\n", "fx", "=", "rr", ".", "get", "(", "'filename'", ",", "''", ")", "\n", "if", "fx", "==", "''", ":", "fx", "=", "ck", ".", "cfg", "[", "'default_archive_name'", "]", "\n", "\n", "# Fixing Python bug", "\n", "if", "sys", ".", "version_info", "[", "0", "]", "==", "3", "and", "sys", ".", "version_info", "[", "1", "]", "<", "3", ":", "\n", "          ", "x", "=", "x", ".", "encode", "(", "'utf-8'", ")", "\n", "", "else", ":", "\n", "          ", "x", "=", "str", "(", "x", ")", "\n", "", "bin", "=", "base64", ".", "urlsafe_b64decode", "(", "x", ")", "# convert from unicode to str since base64 works on strings", "\n", "# should be safe in Python 2.x and 3.x", "\n", "\n", "# Process extension", "\n", "fn1", ",", "fne", "=", "os", ".", "path", ".", "splitext", "(", "fx", ")", "\n", "if", "fne", ".", "startswith", "(", "'.'", ")", ":", "fne", "=", "fne", "[", "1", ":", "]", "\n", "if", "fne", "!=", "''", ":", "xt", "=", "fne", "\n", "else", ":", "xt", "=", "'unknown'", "\n", "", "else", ":", "\n", "# Check and output html", "\n", "      ", "if", "rr", ".", "get", "(", "'html'", ",", "''", ")", "!=", "''", ":", "\n", "        ", "bin", "=", "rr", "[", "'html'", "]", ".", "encode", "(", "'utf-8'", ")", "\n", "", "else", ":", "\n", "        ", "if", "sys", ".", "version_info", "[", "0", "]", ">", "2", ":", "# Unknown output", "\n", "          ", "bin", "=", "bin", ".", "encode", "(", "'utf-8'", ")", "\n", "\n", "", "", "", "web_out", "(", "{", "'http'", ":", "http", ",", "'type'", ":", "xt", ",", "'bin'", ":", "bin", ",", "'filename'", ":", "fx", "}", ")", "\n", "\n", "return", "{", "'return'", ":", "0", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.codereef-ai_client.codereef.client.process_web_request_post_via_tunnel": [[1031, 1069], ["ck.out", "i.get", "http.send_response", "http.send_header", "http.end_headers", "http.wfile.write", "http.rfile.read", "requests.post", "requests.get", "h.lower", "len", "print", "http.send_error", "int", "http.send_header", "format", "http.headers.get_all"], "function", ["None"], ["", "", "def", "process_web_request_post_via_tunnel", "(", "i", ")", ":", "\n", "\n", "    ", "http", "=", "i", "[", "'http'", "]", "\n", "post", "=", "(", "i", ".", "get", "(", "'post'", ",", "''", ")", "==", "'yes'", ")", "\n", "\n", "target_url", "=", "tunnel_url", "+", "http", ".", "path", "\n", "\n", "ck", ".", "out", "(", "'* Tunneling **************************************************************'", ")", "\n", "\n", "try", ":", "\n", "\n", "      ", "if", "post", ":", "\n", "        ", "post_body", "=", "http", ".", "rfile", ".", "read", "(", "int", "(", "http", ".", "headers", ".", "get_all", "(", "'content-length'", ",", "0", ")", "[", "0", "]", ")", ")", "\n", "\n", "", "parsed_headers", "=", "{", "}", "\n", "for", "h", "in", "http", ".", "headers", ":", "\n", "        ", "parsed_headers", "[", "h", "]", "=", "http", ".", "headers", "[", "h", "]", "\n", "\n", "", "if", "post", ":", "receive", "=", "requests", ".", "post", "(", "target_url", ",", "headers", "=", "parsed_headers", ",", "verify", "=", "False", ",", "data", "=", "post_body", ",", ")", "\n", "else", ":", "receive", "=", "requests", ".", "get", "(", "target_url", ",", "headers", "=", "parsed_headers", ",", "verify", "=", "False", ")", "\n", "\n", "http", ".", "send_response", "(", "receive", ".", "status_code", ")", "\n", "\n", "received_headers", "=", "receive", ".", "headers", "\n", "for", "h", "in", "received_headers", ":", "\n", "        ", "h1", "=", "h", ".", "lower", "(", ")", "\n", "if", "'-encoding'", "not", "in", "h1", "and", "h1", "!=", "'content-length'", ":", "http", ".", "send_header", "(", "h", ",", "received_headers", "[", "h", "]", ")", "\n", "\n", "", "http", ".", "send_header", "(", "'Content-Length'", ",", "len", "(", "receive", ".", "content", ")", ")", "\n", "http", ".", "end_headers", "(", ")", "\n", "\n", "http", ".", "wfile", ".", "write", "(", "receive", ".", "content", ")", "\n", "\n", "", "except", "Exception", "as", "e", ":", "\n", "      ", "print", "(", "'Error: '", "+", "format", "(", "e", ")", ")", "\n", "http", ".", "send_error", "(", "500", ",", "'problem accessing remote host'", ")", "\n", "\n", "", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.codereef-ai_client.codereef.client.start": [[1103, 1162], ["i.get", "i.get", "i.get", "ck.out", "ck.out", "sys.stdout.flush", "ck.out", "client.ThreadedHTTPServer", "ThreadedHTTPServer.serve_forever", "ck.out", "ThreadedHTTPServer.socket.close", "ck.out", "int", "format"], "function", ["None"], ["", "", "def", "start", "(", "i", ")", ":", "\n", "    ", "global", "tunnel_url", "\n", "\n", "# Check tunnel URL", "\n", "tunnel", "=", "i", ".", "get", "(", "'tunnel'", ",", "''", ")", "\n", "if", "tunnel", "!=", "None", "and", "tunnel", "!=", "''", ":", "\n", "      ", "tunnel_url", "=", "tunnel", "\n", "\n", "ck", ".", "out", "(", "'All CodeReef web requests will be tunneled to '", "+", "tunnel_url", ")", "\n", "\n", "", "host", "=", "i", ".", "get", "(", "'host'", ")", "\n", "if", "host", "==", "''", "or", "host", "==", "None", ":", "host", "=", "'localhost'", "\n", "\n", "port", "=", "i", ".", "get", "(", "'port'", ")", "\n", "if", "port", "==", "''", "or", "port", "==", "None", ":", "port", "=", "'4444'", "\n", "\n", "# Assemble URL.", "\n", "url", "=", "host", "+", "':'", "+", "port", "\n", "\n", "ck", ".", "out", "(", "'Starting web service for CodeReef client on '", "+", "url", "+", "' ...'", ")", "\n", "ck", ".", "out", "(", "''", ")", "\n", "\n", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "\n", "# We do not need secure HTTPS connection here since the user ", "\n", "# runs webbrowser on her/his machine and communicates with", "\n", "# CodeReef service on the same machine via 127.0.0.1 ", "\n", "# while avoiding Internet!", "\n", "\n", "# Still it's possible to start this service with SSL", "\n", "# but it will require a propoer SSL certificate", "\n", "# otherwise the connection will not be validated", "\n", "# if it's purely local ...", "\n", "\n", "# Get certificates for SSL", "\n", "# ssl_certificate_file = {path to client.pem}", "\n", "\n", "# Generate it using \"openssl req -new -x509 -keyout server.pem -out server.pem -days 365 -nodes\"", "\n", "\n", "try", ":", "\n", "      ", "server", "=", "ThreadedHTTPServer", "(", "(", "host", ",", "int", "(", "port", ")", ")", ",", "server_handler", ")", "\n", "\n", "#       Needed for SSL connection (non-SSL connection will not work then)", "\n", "#       server.socket = ssl.wrap_socket (server.socket, server_side=True,", "\n", "#                                       certfile=ssl_certificate_file)", "\n", "\n", "# Prevent issues with socket reuse", "\n", "server", ".", "allow_reuse_address", "=", "True", "\n", "\n", "server", ".", "serve_forever", "(", ")", "\n", "", "except", "KeyboardInterrupt", ":", "\n", "      ", "ck", ".", "out", "(", "'Keyboard interrupt, terminating CodeReef web service ...'", ")", "\n", "server", ".", "socket", ".", "close", "(", ")", "\n", "return", "1", "\n", "", "except", "OSError", "as", "e", ":", "\n", "      ", "ck", ".", "out", "(", "'Internal CodeReef web service error ('", "+", "format", "(", "e", ")", "+", "')'", ")", "\n", "return", "1", "\n", "\n", "", "return", "0", "\n", "", ""]], "home.repos.pwc.inspect_result.codereef-ai_client.codereef.misc.request": [[23, 87], ["i.get", "urllib2.Request", "urllib2.urlopen", "urllib2.urlopen.read", "urllib2.urlopen.close", "s.decode.decode", "json.loads", "quote_plus", "format", "format", "format"], "function", ["None"], ["", "def", "request", "(", "i", ")", ":", "\n", "    ", "\"\"\"\n    Input:  {\n              url - URL\n              get - get parameters\n              post - post parameters\n            }\n\n    Output: {\n              return  - return code = 0 if success or >0 if error\n              (error) - error string if return>0 \n            }\n    \"\"\"", "\n", "\n", "url", "=", "i", "[", "'url'", "]", "\n", "\n", "# Prepare dict to send to remote server", "\n", "ii", "=", "i", ".", "get", "(", "'get'", ",", "{", "}", ")", "\n", "\n", "started", "=", "False", "\n", "for", "k", "in", "ii", ":", "\n", "        ", "v", "=", "ii", "[", "k", "]", "\n", "if", "started", ":", "\n", "           ", "url", "+=", "'&'", "\n", "", "started", "=", "True", "\n", "url", "+=", "k", "+", "'='", "+", "quote_plus", "(", "v", ")", "\n", "\n", "# Request", "\n", "", "request", "=", "urllib2", ".", "Request", "(", "url", ")", "\n", "\n", "# Connect", "\n", "try", ":", "\n", "       ", "f", "=", "urllib2", ".", "urlopen", "(", "request", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "       ", "return", "{", "'return'", ":", "1", ",", "'error'", ":", "'Access failed ('", "+", "format", "(", "e", ")", "+", "')'", "}", "\n", "\n", "# Read", "\n", "", "try", ":", "\n", "       ", "s", "=", "f", ".", "read", "(", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "       ", "return", "{", "'return'", ":", "1", ",", "'error'", ":", "'Failed to read stream ('", "+", "format", "(", "e", ")", "+", "')'", "}", "\n", "\n", "# CLose", "\n", "", "try", ":", "\n", "       ", "f", ".", "close", "(", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "       ", "return", "{", "'return'", ":", "1", ",", "'error'", ":", "'Failed to close stream ('", "+", "format", "(", "e", ")", "+", "')'", "}", "\n", "\n", "# Check UTF", "\n", "", "try", ":", "\n", "       ", "s", "=", "s", ".", "decode", "(", "'utf8'", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "       ", "pass", "\n", "\n", "# Check output", "\n", "", "d", "=", "{", "}", "\n", "\n", "# Try to convert output to dictionary", "\n", "try", ":", "\n", "      ", "d", "=", "json", ".", "loads", "(", "s", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "       ", "pass", "\n", "\n", "", "return", "{", "'return'", ":", "0", ",", "'string'", ":", "s", ",", "'dict'", ":", "d", "}", "\n", "", ""]]}