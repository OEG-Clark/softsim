{"home.repos.pwc.inspect_result.ReyonRen_MFGAN.None.dis_modules.positional_encoding": [[15, 22], ["numpy.array", "numpy.sin", "numpy.cos", "tensorflow.convert_to_tensor", "np.array.reshape", "numpy.power", "range", "range"], "function", ["None"], ["def", "positional_encoding", "(", "dim", ",", "sentence_length", ",", "dtype", "=", "tf", ".", "float32", ")", ":", "\n", "\n", "    ", "encoded_vec", "=", "np", ".", "array", "(", "[", "pos", "/", "np", ".", "power", "(", "10000", ",", "2", "*", "i", "/", "dim", ")", "for", "pos", "in", "range", "(", "sentence_length", ")", "for", "i", "in", "range", "(", "dim", ")", "]", ")", "\n", "encoded_vec", "[", ":", ":", "2", "]", "=", "np", ".", "sin", "(", "encoded_vec", "[", ":", ":", "2", "]", ")", "\n", "encoded_vec", "[", "1", ":", ":", "2", "]", "=", "np", ".", "cos", "(", "encoded_vec", "[", "1", ":", ":", "2", "]", ")", "\n", "\n", "return", "tf", ".", "convert_to_tensor", "(", "encoded_vec", ".", "reshape", "(", "[", "sentence_length", ",", "dim", "]", ")", ",", "dtype", "=", "dtype", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ReyonRen_MFGAN.None.dis_modules.normalize": [[24, 52], ["tensorflow.variable_scope", "inputs.get_shape", "tensorflow.nn.moments", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.zeros", "tensorflow.ones"], "function", ["None"], ["", "def", "normalize", "(", "inputs", ",", "\n", "epsilon", "=", "1e-8", ",", "\n", "scope", "=", "\"ln_dis\"", ",", "\n", "reuse", "=", "None", ")", ":", "\n", "    ", "'''Applies layer normalization.\n    \n    Args:\n      inputs: A tensor with 2 or more dimensions, where the first dimension has\n        `batch_size`.\n      epsilon: A floating number. A very small number for preventing ZeroDivision Error.\n      scope: Optional scope for `variable_scope`.\n      reuse: Boolean, whether to reuse the weights of a previous layer\n        by the same name.\n      \n    Returns:\n      A tensor with the same shape and data dtype as `inputs`.\n    '''", "\n", "with", "tf", ".", "variable_scope", "(", "scope", ",", "reuse", "=", "reuse", ")", ":", "\n", "        ", "inputs_shape", "=", "inputs", ".", "get_shape", "(", ")", "\n", "params_shape", "=", "inputs_shape", "[", "-", "1", ":", "]", "\n", "\n", "mean", ",", "variance", "=", "tf", ".", "nn", ".", "moments", "(", "inputs", ",", "[", "-", "1", "]", ",", "keep_dims", "=", "True", ")", "\n", "beta", "=", "tf", ".", "Variable", "(", "tf", ".", "zeros", "(", "params_shape", ")", ")", "\n", "gamma", "=", "tf", ".", "Variable", "(", "tf", ".", "ones", "(", "params_shape", ")", ")", "\n", "normalized", "=", "(", "inputs", "-", "mean", ")", "/", "(", "(", "variance", "+", "epsilon", ")", "**", "(", ".5", ")", ")", "\n", "outputs", "=", "gamma", "*", "normalized", "+", "beta", "\n", "\n", "", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.ReyonRen_MFGAN.None.dis_modules.cat_match": [[54, 67], ["open", "numpy.array", "max", "tensorflow.constant", "tensorflow.nn.embedding_lookup", "line.split.split", "tf.constant.append", "int"], "function", ["None"], ["", "def", "cat_match", "(", "inputs", ")", ":", "\n", "    ", "f_cat", "=", "open", "(", "'movielens_attributes/movielens_category.txt'", ",", "'r'", ",", "encoding", "=", "'UTF-8'", ")", "\n", "index", "=", "0", "\n", "match", "=", "[", "0", "]", "\n", "for", "line", "in", "f_cat", ":", "\n", "        ", "line", "=", "line", ".", "split", "(", ")", "\n", "index", "+=", "1", "\n", "match", ".", "append", "(", "int", "(", "line", "[", "0", "]", ")", ")", "\n", "", "match", "=", "np", ".", "array", "(", "match", ")", "\n", "cat_num", "=", "max", "(", "match", ")", "\n", "match", "=", "tf", ".", "constant", "(", "match", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "outputs", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "match", ",", "inputs", ")", "\n", "return", "outputs", ",", "cat_num", "\n", "\n"]], "home.repos.pwc.inspect_result.ReyonRen_MFGAN.None.dis_modules.pop_match": [[69, 82], ["open", "numpy.array", "max", "tensorflow.constant", "tensorflow.nn.embedding_lookup", "line.split.split", "tf.constant.append", "int"], "function", ["None"], ["", "def", "pop_match", "(", "inputs", ")", ":", "\n", "    ", "f_pop", "=", "open", "(", "'movielens_attributes/movielens_popularity.txt'", ",", "'r'", ",", "encoding", "=", "'UTF-8'", ")", "\n", "index", "=", "0", "\n", "match", "=", "[", "0", "]", "\n", "for", "line", "in", "f_pop", ":", "\n", "        ", "line", "=", "line", ".", "split", "(", ")", "\n", "index", "+=", "1", "\n", "match", ".", "append", "(", "int", "(", "line", "[", "0", "]", ")", ")", "\n", "", "match", "=", "np", ".", "array", "(", "match", ")", "\n", "pop_num", "=", "max", "(", "match", ")", "\n", "match", "=", "tf", ".", "constant", "(", "match", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "outputs", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "match", ",", "inputs", ")", "\n", "return", "outputs", ",", "pop_num", "\n", "\n"]], "home.repos.pwc.inspect_result.ReyonRen_MFGAN.None.dis_modules.kg_embedding": [[84, 113], ["tensorflow.variable_scope", "open", "tensorflow.constant", "tensorflow.concat", "tensorflow.nn.embedding_lookup", "line.strip().split.strip().split", "range", "id2embedding.append", "numpy.array", "s.split", "s.split", "round", "len", "dis_modules.kg_embedding.str2float"], "function", ["None"], ["", "def", "kg_embedding", "(", "inputs", ",", "\n", "num_units", ",", "\n", "scope", "=", "\"kg_embedding\"", ",", "\n", "reuse", "=", "None", ")", ":", "\n", "    ", "with", "tf", ".", "variable_scope", "(", "scope", ",", "reuse", "=", "reuse", ")", ":", "\n", "        ", "def", "str2float", "(", "s", ")", ":", "\n", "            ", "if", "s", "[", "0", "]", "==", "'-'", ":", "\n", "                ", "s", "=", "s", "[", "1", ":", "]", "\n", "a", "=", "s", ".", "split", "(", "'.'", ")", "\n", "return", "-", "round", "(", "(", "reduce", "(", "lambda", "x", ",", "y", ":", "x", "*", "10", "+", "y", ",", "map", "(", "int", ",", "a", "[", "0", "]", ")", ")", "+", "reduce", "(", "lambda", "x", ",", "y", ":", "x", "/", "10", "+", "y", ",", "map", "(", "int", ",", "a", "[", "1", "]", "[", ":", ":", "-", "1", "]", ")", ")", "/", "10", ")", ",", "12", ")", "\n", "", "else", ":", "\n", "                ", "a", "=", "s", ".", "split", "(", "'.'", ")", "\n", "return", "round", "(", "reduce", "(", "lambda", "x", ",", "y", ":", "x", "*", "10", "+", "y", ",", "map", "(", "int", ",", "a", "[", "0", "]", ")", ")", "+", "reduce", "(", "lambda", "x", ",", "y", ":", "x", "/", "10", "+", "y", ",", "map", "(", "int", ",", "a", "[", "1", "]", "[", ":", ":", "-", "1", "]", ")", ")", "/", "10", ",", "12", ")", "\n", "\n", "", "", "f_transe", "=", "open", "(", "'movielens_attributes/final_embedding_50_5000.txt'", ",", "'r'", ",", "encoding", "=", "'UTF-8'", ")", "\n", "id2embedding", "=", "[", "]", "\n", "for", "line", "in", "f_transe", ":", "\n", "            ", "line", "=", "line", ".", "strip", "(", ")", ".", "split", "(", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "line", ")", ")", ":", "\n", "                ", "line", "[", "i", "]", "=", "str2float", "(", "line", "[", "i", "]", ")", "\n", "", "id2embedding", ".", "append", "(", "line", ")", "\n", "", "transe_table", "=", "tf", ".", "constant", "(", "np", ".", "array", "(", "id2embedding", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "lookup_table", "=", "transe_table", "\n", "lookup_table", "=", "tf", ".", "concat", "(", "(", "tf", ".", "zeros", "(", "shape", "=", "[", "1", ",", "num_units", "]", ")", ",", "lookup_table", "[", ":", ",", ":", "]", ")", ",", "0", ")", "\n", "outputs", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "lookup_table", ",", "inputs", ")", "\n", "\n", "", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.ReyonRen_MFGAN.None.dis_modules.embedding": [[115, 195], ["tensorflow.variable_scope", "tensorflow.get_variable", "tensorflow.nn.embedding_lookup", "tensorflow.concat", "tensorflow.contrib.layers.l2_regularizer", "tensorflow.zeros"], "function", ["None"], ["", "def", "embedding", "(", "inputs", ",", "\n", "vocab_size", ",", "\n", "num_units", ",", "\n", "zero_pad", "=", "True", ",", "\n", "scale", "=", "True", ",", "\n", "l2_reg", "=", "0.0", ",", "\n", "scope", "=", "\"embedding_dis\"", ",", "\n", "with_t", "=", "False", ",", "\n", "reuse", "=", "None", ")", ":", "\n", "    ", "'''Embeds a given tensor.\n\n    Args:\n      inputs: A `Tensor` with type `int32` or `int64` containing the ids\n         to be looked up in `lookup table`.\n      vocab_size: An int. Vocabulary size.\n      num_units: An int. Number of embedding hidden units.\n      zero_pad: A boolean. If True, all the values of the fist row (id 0)\n        should be constant zeros.\n      scale: A boolean. If True. the outputs is multiplied by sqrt num_units.\n      scope: Optional scope for `variable_scope`.\n      reuse: Boolean, whether to reuse the weights of a previous layer\n        by the same name.\n\n    Returns:\n      A `Tensor` with one more rank than inputs's. The last dimensionality\n        should be `num_units`.\n        \n    For example,\n    \n    ```\n    import tensorflow as tf\n    \n    inputs = tf.to_int32(tf.reshape(tf.range(2*3), (2, 3)))\n    outputs = embedding(inputs, 6, 2, zero_pad=True)\n    with tf.Session() as sess:\n        sess.run(tf.global_variables_initializer())\n        print sess.run(outputs)\n    >>\n    [[[ 0.          0.        ]\n      [ 0.09754146  0.67385566]\n      [ 0.37864095 -0.35689294]]\n\n     [[-1.01329422 -1.09939694]\n      [ 0.7521342   0.38203377]\n      [-0.04973143 -0.06210355]]]\n    ```\n    \n    ```\n    import tensorflow as tf\n    \n    inputs = tf.to_int32(tf.reshape(tf.range(2*3), (2, 3)))\n    outputs = embedding(inputs, 6, 2, zero_pad=False)\n    with tf.Session() as sess:\n        sess.run(tf.global_variables_initializer())\n        print sess.run(outputs)\n    >>\n    [[[-0.19172323 -0.39159766]\n      [-0.43212751 -0.66207761]\n      [ 1.03452027 -0.26704335]]\n\n     [[-0.11634696 -0.35983452]\n      [ 0.50208133  0.53509563]\n      [ 1.22204471 -0.96587461]]]    \n    ```    \n    '''", "\n", "with", "tf", ".", "variable_scope", "(", "scope", ",", "reuse", "=", "reuse", ")", ":", "\n", "        ", "lookup_table", "=", "tf", ".", "get_variable", "(", "'lookup_table_dis'", ",", "\n", "dtype", "=", "tf", ".", "float32", ",", "\n", "shape", "=", "[", "vocab_size", ",", "num_units", "]", ",", "\n", "#initializer=tf.contrib.layers.xavier_initializer(),", "\n", "regularizer", "=", "tf", ".", "contrib", ".", "layers", ".", "l2_regularizer", "(", "l2_reg", ")", ")", "\n", "if", "zero_pad", ":", "\n", "            ", "lookup_table", "=", "tf", ".", "concat", "(", "(", "tf", ".", "zeros", "(", "shape", "=", "[", "1", ",", "num_units", "]", ")", ",", "#\u628aembedding table\u91cc\u9762\u7684\u7b2c0\u4e2a\u8d4b\u503c\u4e3a0\u3002", "\n", "lookup_table", "[", "1", ":", ",", ":", "]", ")", ",", "0", ")", "\n", "", "outputs", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "lookup_table", ",", "inputs", ")", "\n", "\n", "if", "scale", ":", "\n", "            ", "outputs", "=", "outputs", "*", "(", "num_units", "**", "0.5", ")", "\n", "", "", "if", "with_t", ":", "return", "outputs", "\n", "else", ":", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.ReyonRen_MFGAN.None.dis_modules.multihead_attention": [[197, 291], ["tensorflow.variable_scope", "tensorflow.layers.dense", "tensorflow.layers.dense", "tensorflow.layers.dense", "tensorflow.concat", "tensorflow.concat", "tensorflow.concat", "tensorflow.matmul", "tensorflow.sign", "tensorflow.tile", "tensorflow.tile", "tensorflow.where", "tensorflow.nn.softmax", "tensorflow.sign", "tensorflow.tile", "tensorflow.tile", "tensorflow.layers.dropout", "tensorflow.matmul", "tensorflow.concat", "tensorflow.split", "tensorflow.split", "tensorflow.split", "tensorflow.transpose", "tensorflow.abs", "tensorflow.expand_dims", "tensorflow.ones_like", "tensorflow.equal", "tensorflow.ones_like", "tensorflow.contrib.linalg.LinearOperatorTriL().to_dense", "tensorflow.tile", "tensorflow.where", "tensorflow.abs", "tensorflow.expand_dims", "tensorflow.split", "tensorflow.reduce_sum", "tensorflow.expand_dims", "tensorflow.ones_like", "tensorflow.equal", "tensorflow.reduce_sum", "tensorflow.convert_to_tensor", "queries.get_shape", "tf.concat.get_shape().as_list", "tensorflow.shape", "tensorflow.contrib.linalg.LinearOperatorTriL", "tensorflow.shape", "tensorflow.shape", "tf.concat.get_shape"], "function", ["None"], ["", "def", "multihead_attention", "(", "queries", ",", "\n", "keys", ",", "\n", "num_units", "=", "None", ",", "\n", "num_heads", "=", "8", ",", "\n", "dropout_rate", "=", "0", ",", "\n", "is_training", "=", "True", ",", "\n", "causality", "=", "False", ",", "\n", "scope", "=", "\"multihead_attention_dis\"", ",", "\n", "reuse", "=", "None", ",", "\n", "with_qk", "=", "False", ")", ":", "\n", "    ", "'''Applies multihead attention.\n    \n    Args:\n      queries: A 3d tensor with shape of [N, T_q, C_q].\n      keys: A 3d tensor with shape of [N, T_k, C_k].\n      num_units: A scalar. Attention size.\n      dropout_rate: A floating point number.\n      is_training: Boolean. Controller of mechanism for dropout.\n      causality: Boolean. If true, units that reference the future are masked. \n      num_heads: An int. Number of heads.\n      scope: Optional scope for `variable_scope`.\n      reuse: Boolean, whether to reuse the weights of a previous layer\n        by the same name.\n        \n    Returns\n      A 3d tensor with shape of (N, T_q, C)  \n    '''", "\n", "with", "tf", ".", "variable_scope", "(", "scope", ",", "reuse", "=", "reuse", ")", ":", "\n", "# Set the fall back option for num_units", "\n", "        ", "if", "num_units", "is", "None", ":", "\n", "            ", "num_units", "=", "queries", ".", "get_shape", "(", ")", ".", "as_list", "[", "-", "1", "]", "\n", "\n", "# Linear projections", "\n", "# Q = tf.layers.dense(queries, num_units, activation=tf.nn.relu) # (N, T_q, C)", "\n", "# K = tf.layers.dense(keys, num_units, activation=tf.nn.relu) # (N, T_k, C)", "\n", "# V = tf.layers.dense(keys, num_units, activation=tf.nn.relu) # (N, T_k, C)", "\n", "", "Q", "=", "tf", ".", "layers", ".", "dense", "(", "queries", ",", "num_units", ",", "activation", "=", "None", ")", "# (N, T_q, C)", "\n", "K", "=", "tf", ".", "layers", ".", "dense", "(", "keys", ",", "num_units", ",", "activation", "=", "None", ")", "# (N, T_k, C)", "\n", "V", "=", "tf", ".", "layers", ".", "dense", "(", "keys", ",", "num_units", ",", "activation", "=", "None", ")", "# (N, T_k, C)", "\n", "\n", "# Split and concat", "\n", "Q_", "=", "tf", ".", "concat", "(", "tf", ".", "split", "(", "Q", ",", "num_heads", ",", "axis", "=", "2", ")", ",", "axis", "=", "0", ")", "# (h*N, T_q, C/h) ", "\n", "K_", "=", "tf", ".", "concat", "(", "tf", ".", "split", "(", "K", ",", "num_heads", ",", "axis", "=", "2", ")", ",", "axis", "=", "0", ")", "# (h*N, T_k, C/h) ", "\n", "V_", "=", "tf", ".", "concat", "(", "tf", ".", "split", "(", "V", ",", "num_heads", ",", "axis", "=", "2", ")", ",", "axis", "=", "0", ")", "# (h*N, T_k, C/h) ", "\n", "\n", "# Multiplication", "\n", "outputs", "=", "tf", ".", "matmul", "(", "Q_", ",", "tf", ".", "transpose", "(", "K_", ",", "[", "0", ",", "2", ",", "1", "]", ")", ")", "# (h*N, T_q, T_k)", "\n", "\n", "# Scale", "\n", "outputs", "=", "outputs", "/", "(", "K_", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "-", "1", "]", "**", "0.5", ")", "\n", "\n", "# Key Masking", "\n", "key_masks", "=", "tf", ".", "sign", "(", "tf", ".", "abs", "(", "tf", ".", "reduce_sum", "(", "keys", ",", "axis", "=", "-", "1", ")", ")", ")", "# (N, T_k)", "\n", "key_masks", "=", "tf", ".", "tile", "(", "key_masks", ",", "[", "num_heads", ",", "1", "]", ")", "# (h*N, T_k)", "\n", "key_masks", "=", "tf", ".", "tile", "(", "tf", ".", "expand_dims", "(", "key_masks", ",", "1", ")", ",", "[", "1", ",", "tf", ".", "shape", "(", "queries", ")", "[", "1", "]", ",", "1", "]", ")", "# (h*N, T_q, T_k)", "\n", "\n", "paddings", "=", "tf", ".", "ones_like", "(", "outputs", ")", "*", "(", "-", "2", "**", "32", "+", "1", ")", "\n", "outputs", "=", "tf", ".", "where", "(", "tf", ".", "equal", "(", "key_masks", ",", "0", ")", ",", "paddings", ",", "outputs", ")", "# (h*N, T_q, T_k)", "\n", "\n", "# Causality = Future blinding", "\n", "if", "causality", ":", "\n", "            ", "diag_vals", "=", "tf", ".", "ones_like", "(", "outputs", "[", "0", ",", ":", ",", ":", "]", ")", "# (T_q, T_k)", "\n", "tril", "=", "tf", ".", "contrib", ".", "linalg", ".", "LinearOperatorTriL", "(", "diag_vals", ")", ".", "to_dense", "(", ")", "# (T_q, T_k)", "\n", "masks", "=", "tf", ".", "tile", "(", "tf", ".", "expand_dims", "(", "tril", ",", "0", ")", ",", "[", "tf", ".", "shape", "(", "outputs", ")", "[", "0", "]", ",", "1", ",", "1", "]", ")", "# (h*N, T_q, T_k)", "\n", "\n", "paddings", "=", "tf", ".", "ones_like", "(", "masks", ")", "*", "(", "-", "2", "**", "32", "+", "1", ")", "\n", "outputs", "=", "tf", ".", "where", "(", "tf", ".", "equal", "(", "masks", ",", "0", ")", ",", "paddings", ",", "outputs", ")", "# (h*N, T_q, T_k)", "\n", "\n", "# Activation", "\n", "", "outputs", "=", "tf", ".", "nn", ".", "softmax", "(", "outputs", ")", "# (h*N, T_q, T_k)", "\n", "\n", "# Query Masking", "\n", "query_masks", "=", "tf", ".", "sign", "(", "tf", ".", "abs", "(", "tf", ".", "reduce_sum", "(", "queries", ",", "axis", "=", "-", "1", ")", ")", ")", "# (N, T_q)", "\n", "query_masks", "=", "tf", ".", "tile", "(", "query_masks", ",", "[", "num_heads", ",", "1", "]", ")", "# (h*N, T_q)", "\n", "query_masks", "=", "tf", ".", "tile", "(", "tf", ".", "expand_dims", "(", "query_masks", ",", "-", "1", ")", ",", "[", "1", ",", "1", ",", "tf", ".", "shape", "(", "keys", ")", "[", "1", "]", "]", ")", "# (h*N, T_q, T_k)", "\n", "# outputs *= query_masks # broadcasting. (N, T_q, C)", "\n", "\n", "# Dropouts", "\n", "outputs", "=", "tf", ".", "layers", ".", "dropout", "(", "outputs", ",", "rate", "=", "dropout_rate", ",", "training", "=", "tf", ".", "convert_to_tensor", "(", "is_training", ")", ")", "\n", "\n", "# Weighted sum", "\n", "outputs", "=", "tf", ".", "matmul", "(", "outputs", ",", "V_", ")", "# ( h*N, T_q, C/h)", "\n", "\n", "# Restore shape", "\n", "outputs", "=", "tf", ".", "concat", "(", "tf", ".", "split", "(", "outputs", ",", "num_heads", ",", "axis", "=", "0", ")", ",", "axis", "=", "2", ")", "# (N, T_q, C)", "\n", "\n", "# Residual connection", "\n", "outputs", "+=", "queries", "\n", "\n", "# Normalize", "\n", "#outputs = normalize(outputs) # (N, T_q, C)", "\n", "\n", "", "if", "with_qk", ":", "return", "Q", ",", "K", "\n", "else", ":", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.ReyonRen_MFGAN.None.dis_modules.feedforward": [[292, 329], ["tensorflow.variable_scope", "tensorflow.layers.conv1d", "tensorflow.layers.dropout", "tensorflow.layers.conv1d", "tensorflow.layers.dropout", "tensorflow.convert_to_tensor", "tensorflow.convert_to_tensor"], "function", ["None"], ["", "def", "feedforward", "(", "inputs", ",", "\n", "num_units", "=", "[", "2048", ",", "512", "]", ",", "\n", "scope", "=", "\"multihead_attention_dis\"", ",", "\n", "dropout_rate", "=", "0.2", ",", "\n", "is_training", "=", "True", ",", "\n", "reuse", "=", "None", ")", ":", "\n", "    ", "'''Point-wise feed forward net.\n    \n    Args:\n      inputs: A 3d tensor with shape of [N, T, C].\n      num_units: A list of two integers.\n      scope: Optional scope for `variable_scope`.\n      reuse: Boolean, whether to reuse the weights of a previous layer\n        by the same name.\n        \n    Returns:\n      A 3d tensor with the same shape and dtype as inputs\n    '''", "\n", "with", "tf", ".", "variable_scope", "(", "scope", ",", "reuse", "=", "reuse", ")", ":", "\n", "# Inner layer", "\n", "        ", "params", "=", "{", "\"inputs\"", ":", "inputs", ",", "\"filters\"", ":", "num_units", "[", "0", "]", ",", "\"kernel_size\"", ":", "1", ",", "\n", "\"activation\"", ":", "tf", ".", "nn", ".", "relu", ",", "\"use_bias\"", ":", "True", "}", "\n", "outputs", "=", "tf", ".", "layers", ".", "conv1d", "(", "**", "params", ")", "\n", "outputs", "=", "tf", ".", "layers", ".", "dropout", "(", "outputs", ",", "rate", "=", "dropout_rate", ",", "training", "=", "tf", ".", "convert_to_tensor", "(", "is_training", ")", ")", "\n", "# Readout layer", "\n", "params", "=", "{", "\"inputs\"", ":", "outputs", ",", "\"filters\"", ":", "num_units", "[", "1", "]", ",", "\"kernel_size\"", ":", "1", ",", "\n", "\"activation\"", ":", "None", ",", "\"use_bias\"", ":", "True", "}", "\n", "outputs", "=", "tf", ".", "layers", ".", "conv1d", "(", "**", "params", ")", "\n", "outputs", "=", "tf", ".", "layers", ".", "dropout", "(", "outputs", ",", "rate", "=", "dropout_rate", ",", "training", "=", "tf", ".", "convert_to_tensor", "(", "is_training", ")", ")", "\n", "\n", "# Residual connection", "\n", "outputs", "+=", "inputs", "\n", "\n", "# Normalize", "\n", "#outputs = normalize(outputs)", "\n", "\n", "", "return", "outputs", "", "", ""]], "home.repos.pwc.inspect_result.ReyonRen_MFGAN.None.main.dis_expand_k": [[53, 65], ["numpy.zeros", "numpy.zeros", "range", "range", "numpy.shape", "int", "numpy.shape", "numpy.shape", "int"], "function", ["None"], ["def", "dis_expand_k", "(", "pos", ",", "sample_k", ")", ":", "\n", "    ", "seq_temp", "=", "np", ".", "zeros", "(", "shape", "=", "(", "np", ".", "shape", "(", "pos", ")", "[", "0", "]", "*", "(", "k", "+", "1", ")", ",", "args", ".", "maxlen", ")", ")", "\n", "label_temp", "=", "np", ".", "zeros", "(", "shape", "=", "(", "np", ".", "shape", "(", "pos", ")", "[", "0", "]", "*", "(", "k", "+", "1", ")", ",", "2", ")", ")", "\n", "for", "i", "in", "range", "(", "np", ".", "shape", "(", "pos", ")", "[", "0", "]", "*", "(", "k", "+", "1", ")", ")", ":", "\n", "        ", "if", "i", "%", "(", "k", "+", "1", ")", "==", "0", ":", "\n", "            ", "seq_temp", "[", "i", "]", "=", "pos", "[", "int", "(", "i", "/", "(", "k", "+", "1", ")", ")", "]", "\n", "label_temp", "[", "i", "]", "=", "[", "0", ",", "1", "]", "\n", "for", "j", "in", "range", "(", "k", ")", ":", "\n", "                ", "seq_temp", "[", "i", "+", "j", "+", "1", "]", "=", "seq_temp", "[", "i", "]", "\n", "seq_temp", "[", "i", "+", "j", "+", "1", "]", "[", "-", "1", "]", "=", "sample_k", "[", "int", "(", "i", "/", "(", "k", "+", "1", ")", ")", "]", "[", "j", "]", "\n", "label_temp", "[", "i", "+", "j", "+", "1", "]", "=", "[", "1", ",", "0", "]", "\n", "", "", "", "return", "seq_temp", ",", "label_temp", "\n", "\n"]], "home.repos.pwc.inspect_result.ReyonRen_MFGAN.None.main.get_leader": [[67, 96], ["numpy.zeros", "numpy.zeros", "numpy.zeros", "range", "len", "range", "range", "range", "len", "len", "numpy.zeros", "sess.run", "len", "numpy.argmax"], "function", ["None"], ["", "def", "get_leader", "(", "u_test", ")", ":", "\n", "# u_test = [1]", "\n", "    ", "seq_test", "=", "[", "seq_total", "[", "u_test", "[", "i", "]", "-", "1", "]", "for", "i", "in", "range", "(", "len", "(", "u_test", ")", ")", "]", "\n", "mask", "=", "np", ".", "zeros", "(", "args", ".", "maxlen", ")", "\n", "lead", "=", "np", ".", "zeros", "(", "(", "len", "(", "u_test", ")", ",", "args", ".", "maxlen", ")", ")", "\n", "reward", "=", "np", ".", "zeros", "(", "(", "len", "(", "u_test", ")", ",", "args", ".", "maxlen", ",", "4", ")", ")", "\n", "for", "user", "in", "range", "(", "len", "(", "u_test", ")", ")", ":", "\n", "        ", "for", "i", "in", "range", "(", "args", ".", "maxlen", ")", ":", "\n", "            ", "if", "seq_test", "[", "user", "]", "[", "i", "]", "==", "0", ":", "\n", "                ", "continue", "\n", "", "else", ":", "\n", "                ", "begin", "=", "i", "\n", "break", "\n", "\n", "", "", "for", "i", "in", "range", "(", "begin", ",", "args", ".", "maxlen", ")", ":", "\n", "            ", "mask", "[", "i", "]", "=", "1", "\n", "seq_temp", "=", "seq_test", "[", "user", "]", "*", "mask", "\n", "seq_shifted", "=", "np", ".", "zeros", "(", "args", ".", "maxlen", ")", "\n", "seq_shifted", "[", "args", ".", "maxlen", "-", "1", "-", "(", "i", "-", "begin", ")", ":", "]", "=", "seq_temp", "[", "begin", ":", "i", "+", "1", "]", "\n", "\n", "reward1", ",", "reward2", ",", "reward3", ",", "reward4", "=", "sess", ".", "run", "(", "\n", "[", "dis_model", ".", "ypred_for_auc1", ",", "dis_model", ".", "ypred_for_auc2", ",", "dis_model", ".", "ypred_for_auc3", ",", "dis_model", ".", "ypred_for_auc4", "]", ",", "\n", "{", "dis_model", ".", "u", ":", "u", ",", "dis_model", ".", "input_seq", ":", "[", "seq_shifted", "]", ",", "dis_model", ".", "is_training", ":", "False", "}", ")", "\n", "reward", "[", "user", "]", "[", "i", "]", "[", "0", "]", "=", "reward1", "[", "0", "]", "[", "1", "]", "\n", "reward", "[", "user", "]", "[", "i", "]", "[", "1", "]", "=", "reward2", "[", "0", "]", "[", "1", "]", "\n", "reward", "[", "user", "]", "[", "i", "]", "[", "2", "]", "=", "reward3", "[", "0", "]", "[", "1", "]", "\n", "reward", "[", "user", "]", "[", "i", "]", "[", "3", "]", "=", "reward4", "[", "0", "]", "[", "1", "]", "\n", "lead", "[", "user", "]", "[", "i", "]", "=", "np", ".", "argmax", "(", "reward", "[", "user", "]", "[", "i", "]", ")", "+", "1", "\n", "", "", "return", "lead", ",", "reward", "\n", "\n"]], "home.repos.pwc.inspect_result.ReyonRen_MFGAN.None.dis_model.Dis.__init__": [[5, 268], ["tf.placeholder", "tf.placeholder", "tf.placeholder", "tf.placeholder", "tf.expand_dims", "tf.summary.merge_all", "tf.to_float", "tf.variable_scope", "dis_modules.embedding", "dis_modules.embedding", "tf.layers.dropout", "range", "dis_modules.normalize", "dis_modules.kg_embedding", "dis_modules.embedding", "tf.layers.dropout", "range", "dis_modules.normalize", "dis_modules.cat_match", "dis_modules.embedding", "dis_modules.embedding", "tf.layers.dropout", "range", "dis_modules.normalize", "dis_modules.pop_match", "dis_modules.embedding", "dis_modules.embedding", "tf.layers.dropout", "range", "dis_modules.normalize", "tf.constant", "tf.constant", "tf.constant", "tf.constant", "tf.Variable", "tf.train.AdamOptimizer", "dis_model.Dis.optimizer.minimize", "tf.not_equal", "tf.tile", "tf.tile", "tf.tile", "tf.tile", "tf.name_scope", "tf.Variable", "tf.Variable", "tf.nn.l2_loss", "tf.nn.l2_loss", "tf.nn.xw_plus_b", "tf.nn.softmax", "tf.name_scope", "tf.Variable", "tf.Variable", "tf.nn.l2_loss", "tf.nn.l2_loss", "tf.nn.xw_plus_b", "tf.nn.softmax", "tf.name_scope", "tf.Variable", "tf.Variable", "tf.nn.l2_loss", "tf.nn.l2_loss", "tf.nn.xw_plus_b", "tf.nn.softmax", "tf.name_scope", "tf.Variable", "tf.Variable", "tf.nn.l2_loss", "tf.nn.l2_loss", "tf.nn.xw_plus_b", "tf.nn.softmax", "tf.name_scope", "tf.nn.softmax_cross_entropy_with_logits", "tf.nn.softmax_cross_entropy_with_logits", "tf.nn.softmax_cross_entropy_with_logits", "tf.nn.softmax_cross_entropy_with_logits", "tf.expand_dims", "tf.convert_to_tensor", "tf.variable_scope", "dis_modules.multihead_attention", "dis_modules.feedforward", "tf.expand_dims", "tf.convert_to_tensor", "tf.variable_scope", "dis_modules.multihead_attention", "dis_modules.feedforward", "tf.expand_dims", "tf.convert_to_tensor", "tf.variable_scope", "dis_modules.multihead_attention", "dis_modules.feedforward", "tf.expand_dims", "tf.convert_to_tensor", "tf.variable_scope", "dis_modules.multihead_attention", "dis_modules.feedforward", "tf.truncated_normal", "tf.constant", "tf.truncated_normal", "tf.constant", "tf.truncated_normal", "tf.constant", "tf.truncated_normal", "tf.constant", "tf.reduce_mean", "tf.trainable_variables", "tf.range", "dis_modules.normalize", "tf.range", "dis_modules.normalize", "tf.range", "dis_modules.normalize", "tf.range", "dis_modules.normalize", "tf.shape", "dis_modules.normalize", "tf.shape", "dis_modules.normalize", "tf.shape", "dis_modules.normalize", "tf.shape", "dis_modules.normalize", "tf.shape", "tf.shape", "tf.shape", "tf.shape"], "methods", ["home.repos.pwc.inspect_result.ReyonRen_MFGAN.None.gen_modules.embedding", "home.repos.pwc.inspect_result.ReyonRen_MFGAN.None.gen_modules.embedding", "home.repos.pwc.inspect_result.ReyonRen_MFGAN.None.gen_modules.normalize", "home.repos.pwc.inspect_result.ReyonRen_MFGAN.None.dis_modules.kg_embedding", "home.repos.pwc.inspect_result.ReyonRen_MFGAN.None.gen_modules.embedding", "home.repos.pwc.inspect_result.ReyonRen_MFGAN.None.gen_modules.normalize", "home.repos.pwc.inspect_result.ReyonRen_MFGAN.None.dis_modules.cat_match", "home.repos.pwc.inspect_result.ReyonRen_MFGAN.None.gen_modules.embedding", "home.repos.pwc.inspect_result.ReyonRen_MFGAN.None.gen_modules.embedding", "home.repos.pwc.inspect_result.ReyonRen_MFGAN.None.gen_modules.normalize", "home.repos.pwc.inspect_result.ReyonRen_MFGAN.None.dis_modules.pop_match", "home.repos.pwc.inspect_result.ReyonRen_MFGAN.None.gen_modules.embedding", "home.repos.pwc.inspect_result.ReyonRen_MFGAN.None.gen_modules.embedding", "home.repos.pwc.inspect_result.ReyonRen_MFGAN.None.gen_modules.normalize", "home.repos.pwc.inspect_result.ReyonRen_MFGAN.None.gen_modules.multihead_attention", "home.repos.pwc.inspect_result.ReyonRen_MFGAN.None.gen_modules.feedforward", "home.repos.pwc.inspect_result.ReyonRen_MFGAN.None.gen_modules.multihead_attention", "home.repos.pwc.inspect_result.ReyonRen_MFGAN.None.gen_modules.feedforward", "home.repos.pwc.inspect_result.ReyonRen_MFGAN.None.gen_modules.multihead_attention", "home.repos.pwc.inspect_result.ReyonRen_MFGAN.None.gen_modules.feedforward", "home.repos.pwc.inspect_result.ReyonRen_MFGAN.None.gen_modules.multihead_attention", "home.repos.pwc.inspect_result.ReyonRen_MFGAN.None.gen_modules.feedforward", "home.repos.pwc.inspect_result.ReyonRen_MFGAN.None.gen_modules.normalize", "home.repos.pwc.inspect_result.ReyonRen_MFGAN.None.gen_modules.normalize", "home.repos.pwc.inspect_result.ReyonRen_MFGAN.None.gen_modules.normalize", "home.repos.pwc.inspect_result.ReyonRen_MFGAN.None.gen_modules.normalize", "home.repos.pwc.inspect_result.ReyonRen_MFGAN.None.gen_modules.normalize", "home.repos.pwc.inspect_result.ReyonRen_MFGAN.None.gen_modules.normalize", "home.repos.pwc.inspect_result.ReyonRen_MFGAN.None.gen_modules.normalize", "home.repos.pwc.inspect_result.ReyonRen_MFGAN.None.gen_modules.normalize"], ["    ", "def", "__init__", "(", "self", ",", "usernum", ",", "itemnum", ",", "args", ",", "reuse", "=", "None", ")", ":", "\n", "        ", "self", ".", "is_training", "=", "tf", ".", "placeholder", "(", "tf", ".", "bool", ",", "shape", "=", "(", ")", ")", "\n", "self", ".", "u", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "(", "None", ")", ")", "\n", "self", ".", "input_seq", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "(", "None", ",", "args", ".", "maxlen", ")", ")", "\n", "self", ".", "label", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "(", "None", ",", "2", ")", ")", "\n", "\n", "mask", "=", "tf", ".", "expand_dims", "(", "tf", ".", "to_float", "(", "tf", ".", "not_equal", "(", "self", ".", "input_seq", ",", "0", ")", ")", ",", "-", "1", ")", "\n", "\n", "with", "tf", ".", "variable_scope", "(", "\"discriminator\"", ",", "reuse", "=", "reuse", ")", ":", "\n", "# -------------------------------------- ID ---------------------------------------", "\n", "# sequence embedding", "\n", "            ", "self", ".", "seq", "=", "embedding", "(", "self", ".", "input_seq", ",", "\n", "vocab_size", "=", "itemnum", "+", "1", ",", "\n", "num_units", "=", "args", ".", "hidden_units", ",", "\n", "zero_pad", "=", "True", ",", "\n", "scale", "=", "True", ",", "\n", "l2_reg", "=", "args", ".", "l2_emb", ",", "\n", "scope", "=", "\"input_embeddings_dis\"", ",", "\n", "with_t", "=", "True", ",", "\n", "reuse", "=", "reuse", "\n", ")", "\n", "# Positional Encoding", "\n", "t", "=", "embedding", "(", "\n", "tf", ".", "tile", "(", "tf", ".", "expand_dims", "(", "tf", ".", "range", "(", "tf", ".", "shape", "(", "self", ".", "input_seq", ")", "[", "1", "]", ")", ",", "0", ")", ",", "[", "tf", ".", "shape", "(", "self", ".", "input_seq", ")", "[", "0", "]", ",", "1", "]", ")", ",", "\n", "vocab_size", "=", "args", ".", "maxlen", ",", "\n", "num_units", "=", "args", ".", "hidden_units", ",", "\n", "zero_pad", "=", "False", ",", "\n", "scale", "=", "False", ",", "\n", "l2_reg", "=", "args", ".", "l2_emb", ",", "\n", "scope", "=", "\"dec_pos_dis\"", ",", "\n", "reuse", "=", "reuse", ",", "\n", "with_t", "=", "True", "\n", ")", "\n", "self", ".", "seq", "+=", "t", "\n", "# Dropout", "\n", "self", ".", "seq", "=", "tf", ".", "layers", ".", "dropout", "(", "self", ".", "seq", ",", "rate", "=", "args", ".", "dis_dropout_rate", ",", "\n", "training", "=", "tf", ".", "convert_to_tensor", "(", "self", ".", "is_training", ")", ")", "\n", "self", ".", "seq", "*=", "mask", "\n", "# Build blocks", "\n", "for", "i", "in", "range", "(", "args", ".", "dis_num_blocks", ")", ":", "\n", "                ", "with", "tf", ".", "variable_scope", "(", "\"num_blocks_dis_%d\"", "%", "i", ")", ":", "\n", "# Self-attention", "\n", "                    ", "self", ".", "seq", "=", "multihead_attention", "(", "queries", "=", "normalize", "(", "self", ".", "seq", ")", ",", "\n", "keys", "=", "self", ".", "seq", ",", "\n", "num_units", "=", "args", ".", "hidden_units", ",", "\n", "num_heads", "=", "args", ".", "dis_num_heads", ",", "\n", "dropout_rate", "=", "args", ".", "dis_dropout_rate", ",", "\n", "is_training", "=", "self", ".", "is_training", ",", "\n", "causality", "=", "False", ",", "\n", "scope", "=", "\"self_attention_dis\"", ")", "\n", "\n", "# Feed forward", "\n", "self", ".", "seq", "=", "feedforward", "(", "normalize", "(", "self", ".", "seq", ")", ",", "num_units", "=", "[", "args", ".", "hidden_units", ",", "args", ".", "hidden_units", "]", ",", "\n", "dropout_rate", "=", "args", ".", "dis_dropout_rate", ",", "is_training", "=", "self", ".", "is_training", ")", "\n", "self", ".", "seq", "*=", "mask", "\n", "", "", "self", ".", "seq", "=", "normalize", "(", "self", ".", "seq", ")", "\n", "self", ".", "seq", "=", "self", ".", "seq", "[", ":", ",", "-", "1", ",", ":", "]", "\n", "\n", "# -------------------------------------- KG ---------------------------------------", "\n", "# KG Embedding", "\n", "self", ".", "kg_seq", "=", "kg_embedding", "(", "self", ".", "input_seq", ",", "\n", "num_units", "=", "args", ".", "hidden_units_kg", ",", "\n", "scope", "=", "\"kg_embeddings\"", ",", "\n", "reuse", "=", "reuse", "\n", ")", "\n", "# Positional Encoding", "\n", "t", "=", "embedding", "(", "\n", "tf", ".", "tile", "(", "tf", ".", "expand_dims", "(", "tf", ".", "range", "(", "tf", ".", "shape", "(", "self", ".", "input_seq", ")", "[", "1", "]", ")", ",", "0", ")", ",", "[", "tf", ".", "shape", "(", "self", ".", "input_seq", ")", "[", "0", "]", ",", "1", "]", ")", ",", "\n", "vocab_size", "=", "args", ".", "maxlen", ",", "\n", "num_units", "=", "args", ".", "hidden_units_kg", ",", "\n", "zero_pad", "=", "False", ",", "\n", "scale", "=", "False", ",", "\n", "l2_reg", "=", "args", ".", "l2_emb", ",", "\n", "scope", "=", "\"dec_pos_dis_kg\"", ",", "\n", "reuse", "=", "reuse", ",", "\n", "with_t", "=", "True", "\n", ")", "\n", "self", ".", "kg_seq", "+=", "t", "\n", "# Dropout", "\n", "self", ".", "kg_seq", "=", "tf", ".", "layers", ".", "dropout", "(", "self", ".", "kg_seq", ",", "rate", "=", "args", ".", "dis_dropout_rate", ",", "\n", "training", "=", "tf", ".", "convert_to_tensor", "(", "self", ".", "is_training", ")", ")", "\n", "self", ".", "kg_seq", "*=", "mask", "\n", "# Build blocks", "\n", "for", "i", "in", "range", "(", "args", ".", "dis_num_blocks", ")", ":", "\n", "                ", "with", "tf", ".", "variable_scope", "(", "\"num_blocks_dis_kg_%d\"", "%", "i", ")", ":", "\n", "# Self-attention", "\n", "                    ", "self", ".", "kg_seq", "=", "multihead_attention", "(", "queries", "=", "normalize", "(", "self", ".", "kg_seq", ")", ",", "\n", "keys", "=", "self", ".", "kg_seq", ",", "\n", "num_units", "=", "args", ".", "hidden_units_kg", ",", "\n", "num_heads", "=", "args", ".", "dis_num_heads", ",", "\n", "dropout_rate", "=", "args", ".", "dis_dropout_rate", ",", "\n", "is_training", "=", "self", ".", "is_training", ",", "\n", "causality", "=", "False", ",", "\n", "scope", "=", "\"self_attention_dis_kg\"", ")", "\n", "# Feed forward", "\n", "self", ".", "kg_seq", "=", "feedforward", "(", "normalize", "(", "self", ".", "kg_seq", ")", ",", "\n", "num_units", "=", "[", "args", ".", "hidden_units_kg", ",", "args", ".", "hidden_units_kg", "]", ",", "\n", "dropout_rate", "=", "args", ".", "dis_dropout_rate", ",", "is_training", "=", "self", ".", "is_training", ",", "\n", "scope", "=", "\"self_attention_dis_kg\"", ")", "\n", "self", ".", "kg_seq", "*=", "mask", "\n", "", "", "self", ".", "kg_seq", "=", "normalize", "(", "self", ".", "kg_seq", ")", "\n", "self", ".", "kg_seq", "=", "self", ".", "kg_seq", "[", ":", ",", "-", "1", ",", ":", "]", "\n", "\n", "# -------------------------------------- category ---------------------------------------", "\n", "# sequence embedding, item embedding table", "\n", "self", ".", "input_cat", ",", "cat_num", "=", "cat_match", "(", "self", ".", "input_seq", ")", "\n", "self", ".", "cat_seq", "=", "embedding", "(", "self", ".", "input_cat", ",", "\n", "vocab_size", "=", "cat_num", "+", "1", ",", "\n", "num_units", "=", "args", ".", "hidden_units", ",", "\n", "zero_pad", "=", "True", ",", "\n", "scale", "=", "True", ",", "\n", "l2_reg", "=", "args", ".", "l2_emb", ",", "\n", "scope", "=", "\"category_embeddings_dis\"", ",", "\n", "with_t", "=", "True", ",", "\n", "reuse", "=", "reuse", "\n", ")", "\n", "# Positional Encoding", "\n", "t", "=", "embedding", "(", "\n", "tf", ".", "tile", "(", "tf", ".", "expand_dims", "(", "tf", ".", "range", "(", "tf", ".", "shape", "(", "self", ".", "input_seq", ")", "[", "1", "]", ")", ",", "0", ")", ",", "[", "tf", ".", "shape", "(", "self", ".", "input_seq", ")", "[", "0", "]", ",", "1", "]", ")", ",", "\n", "vocab_size", "=", "args", ".", "maxlen", ",", "\n", "num_units", "=", "args", ".", "hidden_units", ",", "\n", "zero_pad", "=", "False", ",", "\n", "scale", "=", "False", ",", "\n", "l2_reg", "=", "args", ".", "l2_emb", ",", "\n", "scope", "=", "\"dec_pos_dis_cat\"", ",", "\n", "reuse", "=", "reuse", ",", "\n", "with_t", "=", "True", "\n", ")", "\n", "self", ".", "cat_seq", "+=", "t", "\n", "# Dropout", "\n", "self", ".", "cat_seq", "=", "tf", ".", "layers", ".", "dropout", "(", "self", ".", "cat_seq", ",", "rate", "=", "args", ".", "dis_dropout_rate", ",", "\n", "training", "=", "tf", ".", "convert_to_tensor", "(", "self", ".", "is_training", ")", ")", "\n", "self", ".", "cat_seq", "*=", "mask", "\n", "# Build blocks", "\n", "for", "i", "in", "range", "(", "args", ".", "dis_num_blocks", ")", ":", "\n", "                ", "with", "tf", ".", "variable_scope", "(", "\"num_blocks_dis_cat_%d\"", "%", "i", ")", ":", "\n", "# Self-attention", "\n", "                    ", "self", ".", "cat_seq", "=", "multihead_attention", "(", "queries", "=", "normalize", "(", "self", ".", "cat_seq", ")", ",", "\n", "keys", "=", "self", ".", "cat_seq", ",", "\n", "num_units", "=", "args", ".", "hidden_units_cat", ",", "\n", "num_heads", "=", "args", ".", "dis_num_heads", ",", "\n", "dropout_rate", "=", "args", ".", "dis_dropout_rate", ",", "\n", "is_training", "=", "self", ".", "is_training", ",", "\n", "causality", "=", "False", ",", "\n", "scope", "=", "\"self_attention_cat_dis\"", ")", "\n", "\n", "# Feed forward", "\n", "self", ".", "cat_seq", "=", "feedforward", "(", "normalize", "(", "self", ".", "cat_seq", ")", ",", "\n", "num_units", "=", "[", "args", ".", "hidden_units_cat", ",", "args", ".", "hidden_units_cat", "]", ",", "\n", "dropout_rate", "=", "args", ".", "dis_dropout_rate", ",", "is_training", "=", "self", ".", "is_training", ")", "\n", "self", ".", "cat_seq", "*=", "mask", "\n", "", "", "self", ".", "cat_seq", "=", "normalize", "(", "self", ".", "cat_seq", ")", "\n", "self", ".", "cat_seq", "=", "self", ".", "cat_seq", "[", ":", ",", "-", "1", ",", ":", "]", "\n", "\n", "# -------------------------------------- popularity ---------------------------------------", "\n", "# sequence embedding", "\n", "self", ".", "input_pop", ",", "pop_num", "=", "pop_match", "(", "self", ".", "input_seq", ")", "\n", "self", ".", "pop_seq", "=", "embedding", "(", "self", ".", "input_pop", ",", "\n", "vocab_size", "=", "pop_num", "+", "1", ",", "\n", "num_units", "=", "args", ".", "hidden_units", ",", "\n", "zero_pad", "=", "True", ",", "\n", "scale", "=", "True", ",", "\n", "l2_reg", "=", "args", ".", "l2_emb", ",", "\n", "scope", "=", "\"popularity_embeddings_dis\"", ",", "\n", "with_t", "=", "True", ",", "\n", "reuse", "=", "reuse", "\n", ")", "\n", "# Positional Encoding", "\n", "t", "=", "embedding", "(", "\n", "tf", ".", "tile", "(", "tf", ".", "expand_dims", "(", "tf", ".", "range", "(", "tf", ".", "shape", "(", "self", ".", "input_seq", ")", "[", "1", "]", ")", ",", "0", ")", ",", "[", "tf", ".", "shape", "(", "self", ".", "input_seq", ")", "[", "0", "]", ",", "1", "]", ")", ",", "\n", "vocab_size", "=", "args", ".", "maxlen", ",", "\n", "num_units", "=", "args", ".", "hidden_units", ",", "\n", "zero_pad", "=", "False", ",", "\n", "scale", "=", "False", ",", "\n", "l2_reg", "=", "args", ".", "l2_emb", ",", "\n", "scope", "=", "\"dec_pos_dis_pop\"", ",", "\n", "reuse", "=", "reuse", ",", "\n", "with_t", "=", "True", "\n", ")", "\n", "self", ".", "pop_seq", "+=", "t", "\n", "# Dropout", "\n", "self", ".", "pop_seq", "=", "tf", ".", "layers", ".", "dropout", "(", "self", ".", "pop_seq", ",", "rate", "=", "args", ".", "dis_dropout_rate", ",", "\n", "training", "=", "tf", ".", "convert_to_tensor", "(", "self", ".", "is_training", ")", ")", "\n", "self", ".", "pop_seq", "*=", "mask", "\n", "# Build blocks", "\n", "for", "i", "in", "range", "(", "args", ".", "dis_num_blocks", ")", ":", "\n", "                ", "with", "tf", ".", "variable_scope", "(", "\"num_blocks_dis_pop_%d\"", "%", "i", ")", ":", "\n", "# Self-attention", "\n", "                    ", "self", ".", "pop_seq", "=", "multihead_attention", "(", "queries", "=", "normalize", "(", "self", ".", "pop_seq", ")", ",", "\n", "keys", "=", "self", ".", "pop_seq", ",", "\n", "num_units", "=", "args", ".", "hidden_units_pop", ",", "\n", "num_heads", "=", "args", ".", "dis_num_heads", ",", "\n", "dropout_rate", "=", "args", ".", "dis_dropout_rate", ",", "\n", "is_training", "=", "self", ".", "is_training", ",", "\n", "causality", "=", "False", ",", "\n", "scope", "=", "\"self_attention_pop_dis\"", ")", "\n", "\n", "# Feed forward", "\n", "self", ".", "pop_seq", "=", "feedforward", "(", "normalize", "(", "self", ".", "pop_seq", ")", ",", "\n", "num_units", "=", "[", "args", ".", "hidden_units_pop", ",", "args", ".", "hidden_units_pop", "]", ",", "\n", "dropout_rate", "=", "args", ".", "dis_dropout_rate", ",", "is_training", "=", "self", ".", "is_training", ")", "\n", "self", ".", "pop_seq", "*=", "mask", "\n", "", "", "self", ".", "pop_seq", "=", "normalize", "(", "self", ".", "pop_seq", ")", "\n", "self", ".", "pop_seq", "=", "self", ".", "pop_seq", "[", ":", ",", "-", "1", ",", ":", "]", "\n", "\n", "# Final (unnormalized) scores and predictions", "\n", "l2_reg_lambda", "=", "0.2", "\n", "l2_loss1", "=", "tf", ".", "constant", "(", "0.0", ")", "\n", "with", "tf", ".", "name_scope", "(", "\"output1\"", ")", ":", "\n", "                ", "W1", "=", "tf", ".", "Variable", "(", "tf", ".", "truncated_normal", "(", "[", "args", ".", "hidden_units", ",", "2", "]", ",", "stddev", "=", "0.1", ")", ",", "name", "=", "\"W1\"", ")", "\n", "b1", "=", "tf", ".", "Variable", "(", "tf", ".", "constant", "(", "0.1", ",", "shape", "=", "[", "2", "]", ")", ",", "name", "=", "\"b1\"", ")", "\n", "l2_loss1", "+=", "tf", ".", "nn", ".", "l2_loss", "(", "W1", ")", "\n", "l2_loss1", "+=", "tf", ".", "nn", ".", "l2_loss", "(", "b1", ")", "\n", "self", ".", "scores1", "=", "tf", ".", "nn", ".", "xw_plus_b", "(", "self", ".", "seq", ",", "W1", ",", "b1", ",", "name", "=", "\"scores1\"", ")", "\n", "self", ".", "ypred_for_auc1", "=", "tf", ".", "nn", ".", "softmax", "(", "self", ".", "scores1", ")", "\n", "\n", "", "l2_loss2", "=", "tf", ".", "constant", "(", "0.0", ")", "\n", "with", "tf", ".", "name_scope", "(", "\"output2\"", ")", ":", "\n", "                ", "W2", "=", "tf", ".", "Variable", "(", "tf", ".", "truncated_normal", "(", "[", "args", ".", "hidden_units_kg", ",", "2", "]", ",", "stddev", "=", "0.1", ")", ",", "name", "=", "\"W2\"", ")", "\n", "b2", "=", "tf", ".", "Variable", "(", "tf", ".", "constant", "(", "0.1", ",", "shape", "=", "[", "2", "]", ")", ",", "name", "=", "\"b2\"", ")", "\n", "l2_loss2", "+=", "tf", ".", "nn", ".", "l2_loss", "(", "W2", ")", "\n", "l2_loss2", "+=", "tf", ".", "nn", ".", "l2_loss", "(", "b2", ")", "\n", "self", ".", "scores2", "=", "tf", ".", "nn", ".", "xw_plus_b", "(", "self", ".", "kg_seq", ",", "W2", ",", "b2", ",", "name", "=", "\"scores2\"", ")", "\n", "self", ".", "ypred_for_auc2", "=", "tf", ".", "nn", ".", "softmax", "(", "self", ".", "scores2", ")", "\n", "\n", "", "l2_loss3", "=", "tf", ".", "constant", "(", "0.0", ")", "\n", "with", "tf", ".", "name_scope", "(", "\"output3\"", ")", ":", "\n", "                ", "W3", "=", "tf", ".", "Variable", "(", "tf", ".", "truncated_normal", "(", "[", "args", ".", "hidden_units_cat", ",", "2", "]", ",", "stddev", "=", "0.1", ")", ",", "name", "=", "\"W3\"", ")", "\n", "b3", "=", "tf", ".", "Variable", "(", "tf", ".", "constant", "(", "0.1", ",", "shape", "=", "[", "2", "]", ")", ",", "name", "=", "\"b3\"", ")", "\n", "l2_loss3", "+=", "tf", ".", "nn", ".", "l2_loss", "(", "W3", ")", "\n", "l2_loss3", "+=", "tf", ".", "nn", ".", "l2_loss", "(", "b3", ")", "\n", "self", ".", "scores3", "=", "tf", ".", "nn", ".", "xw_plus_b", "(", "self", ".", "cat_seq", ",", "W3", ",", "b3", ",", "name", "=", "\"scores3\"", ")", "\n", "self", ".", "ypred_for_auc3", "=", "tf", ".", "nn", ".", "softmax", "(", "self", ".", "scores3", ")", "\n", "\n", "", "l2_loss4", "=", "tf", ".", "constant", "(", "0.0", ")", "\n", "with", "tf", ".", "name_scope", "(", "\"output4\"", ")", ":", "\n", "                ", "W4", "=", "tf", ".", "Variable", "(", "tf", ".", "truncated_normal", "(", "[", "args", ".", "hidden_units_pop", ",", "2", "]", ",", "stddev", "=", "0.1", ")", ",", "name", "=", "\"W4\"", ")", "\n", "b4", "=", "tf", ".", "Variable", "(", "tf", ".", "constant", "(", "0.1", ",", "shape", "=", "[", "2", "]", ")", ",", "name", "=", "\"b4\"", ")", "\n", "l2_loss4", "+=", "tf", ".", "nn", ".", "l2_loss", "(", "W4", ")", "\n", "l2_loss4", "+=", "tf", ".", "nn", ".", "l2_loss", "(", "b4", ")", "\n", "self", ".", "scores4", "=", "tf", ".", "nn", ".", "xw_plus_b", "(", "self", ".", "pop_seq", ",", "W4", ",", "b4", ",", "name", "=", "\"scores4\"", ")", "\n", "self", ".", "ypred_for_auc4", "=", "tf", ".", "nn", ".", "softmax", "(", "self", ".", "scores4", ")", "\n", "# self.predictions4 = tf.argmax(self.scores4, 1, name=\"predictions4\")", "\n", "\n", "", "self", ".", "ypred_for_auc", "=", "(", "self", ".", "ypred_for_auc1", "+", "self", ".", "ypred_for_auc2", "+", "self", ".", "ypred_for_auc3", "+", "\n", "self", ".", "ypred_for_auc4", ")", "/", "4", "\n", "\n", "# Calculate mean cross-entropy loss", "\n", "with", "tf", ".", "name_scope", "(", "\"loss\"", ")", ":", "\n", "                ", "loss1", "=", "tf", ".", "nn", ".", "softmax_cross_entropy_with_logits", "(", "logits", "=", "self", ".", "scores1", ",", "labels", "=", "self", ".", "label", ")", "\n", "loss2", "=", "tf", ".", "nn", ".", "softmax_cross_entropy_with_logits", "(", "logits", "=", "self", ".", "scores2", ",", "labels", "=", "self", ".", "label", ")", "\n", "loss3", "=", "tf", ".", "nn", ".", "softmax_cross_entropy_with_logits", "(", "logits", "=", "self", ".", "scores3", ",", "labels", "=", "self", ".", "label", ")", "\n", "loss4", "=", "tf", ".", "nn", ".", "softmax_cross_entropy_with_logits", "(", "logits", "=", "self", ".", "scores4", ",", "labels", "=", "self", ".", "label", ")", "\n", "self", ".", "loss", "=", "tf", ".", "reduce_mean", "(", "loss1", "+", "loss2", "+", "loss3", "+", "loss4", ")", "+", "l2_reg_lambda", "*", "(", "l2_loss1", "+", "l2_loss2", "+", "l2_loss3", "+", "l2_loss4", ")", "\n", "\n", "", "", "if", "reuse", "is", "None", ":", "\n", "            ", "self", ".", "params", "=", "[", "param", "for", "param", "in", "tf", ".", "trainable_variables", "(", ")", "if", "'discriminator'", "in", "param", ".", "name", "]", "\n", "self", ".", "global_step", "=", "tf", ".", "Variable", "(", "0", ",", "name", "=", "'global_step_dis'", ",", "trainable", "=", "False", ")", "\n", "self", ".", "optimizer", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "learning_rate", "=", "args", ".", "dis_lr", ",", "beta2", "=", "0.98", ")", "\n", "self", ".", "train_op", "=", "self", ".", "optimizer", ".", "minimize", "(", "self", ".", "loss", ",", "global_step", "=", "self", ".", "global_step", ")", "\n", "\n", "", "self", ".", "merged", "=", "tf", ".", "summary", ".", "merge_all", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ReyonRen_MFGAN.None.gen_modules.positional_encoding": [[14, 21], ["numpy.array", "numpy.sin", "numpy.cos", "tensorflow.convert_to_tensor", "np.array.reshape", "numpy.power", "range", "range"], "function", ["None"], ["def", "positional_encoding", "(", "dim", ",", "sentence_length", ",", "dtype", "=", "tf", ".", "float32", ")", ":", "\n", "\n", "    ", "encoded_vec", "=", "np", ".", "array", "(", "[", "pos", "/", "np", ".", "power", "(", "10000", ",", "2", "*", "i", "/", "dim", ")", "for", "pos", "in", "range", "(", "sentence_length", ")", "for", "i", "in", "range", "(", "dim", ")", "]", ")", "\n", "encoded_vec", "[", ":", ":", "2", "]", "=", "np", ".", "sin", "(", "encoded_vec", "[", ":", ":", "2", "]", ")", "\n", "encoded_vec", "[", "1", ":", ":", "2", "]", "=", "np", ".", "cos", "(", "encoded_vec", "[", "1", ":", ":", "2", "]", ")", "\n", "\n", "return", "tf", ".", "convert_to_tensor", "(", "encoded_vec", ".", "reshape", "(", "[", "sentence_length", ",", "dim", "]", ")", ",", "dtype", "=", "dtype", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ReyonRen_MFGAN.None.gen_modules.normalize": [[22, 50], ["tensorflow.variable_scope", "inputs.get_shape", "tensorflow.nn.moments", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.zeros", "tensorflow.ones"], "function", ["None"], ["", "def", "normalize", "(", "inputs", ",", "\n", "epsilon", "=", "1e-8", ",", "\n", "scope", "=", "\"ln_gen\"", ",", "\n", "reuse", "=", "None", ")", ":", "\n", "    ", "'''Applies layer normalization.\n    \n    Args:\n      inputs: A tensor with 2 or more dimensions, where the first dimension has\n        `batch_size`.\n      epsilon: A floating number. A very small number for preventing ZeroDivision Error.\n      scope: Optional scope for `variable_scope`.\n      reuse: Boolean, whether to reuse the weights of a previous layer\n        by the same name.\n      \n    Returns:\n      A tensor with the same shape and data dtype as `inputs`.\n    '''", "\n", "with", "tf", ".", "variable_scope", "(", "scope", ",", "reuse", "=", "reuse", ")", ":", "\n", "        ", "inputs_shape", "=", "inputs", ".", "get_shape", "(", ")", "\n", "params_shape", "=", "inputs_shape", "[", "-", "1", ":", "]", "\n", "\n", "mean", ",", "variance", "=", "tf", ".", "nn", ".", "moments", "(", "inputs", ",", "[", "-", "1", "]", ",", "keep_dims", "=", "True", ")", "\n", "beta", "=", "tf", ".", "Variable", "(", "tf", ".", "zeros", "(", "params_shape", ")", ")", "\n", "gamma", "=", "tf", ".", "Variable", "(", "tf", ".", "ones", "(", "params_shape", ")", ")", "\n", "normalized", "=", "(", "inputs", "-", "mean", ")", "/", "(", "(", "variance", "+", "epsilon", ")", "**", "(", ".5", ")", ")", "\n", "outputs", "=", "gamma", "*", "normalized", "+", "beta", "\n", "\n", "", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.ReyonRen_MFGAN.None.gen_modules.embedding": [[51, 131], ["tensorflow.variable_scope", "tensorflow.get_variable", "tensorflow.nn.embedding_lookup", "tensorflow.concat", "tensorflow.contrib.layers.l2_regularizer", "tensorflow.zeros"], "function", ["None"], ["", "def", "embedding", "(", "inputs", ",", "\n", "vocab_size", ",", "\n", "num_units", ",", "\n", "zero_pad", "=", "True", ",", "\n", "scale", "=", "True", ",", "\n", "l2_reg", "=", "0.0", ",", "\n", "scope", "=", "\"embedding_gen\"", ",", "\n", "with_t", "=", "False", ",", "\n", "reuse", "=", "None", ")", ":", "\n", "    ", "'''Embeds a given tensor.\n\n    Args:\n      inputs: A `Tensor` with type `int32` or `int64` containing the ids\n         to be looked up in `lookup table`.\n      vocab_size: An int. Vocabulary size.\n      num_units: An int. Number of embedding hidden units.\n      zero_pad: A boolean. If True, all the values of the fist row (id 0)\n        should be constant zeros.\n      scale: A boolean. If True. the outputs is multiplied by sqrt num_units.\n      scope: Optional scope for `variable_scope`.\n      reuse: Boolean, whether to reuse the weights of a previous layer\n        by the same name.\n\n    Returns:\n      A `Tensor` with one more rank than inputs's. The last dimensionality\n        should be `num_units`.\n        \n    For example,\n    \n    ```\n    import tensorflow as tf\n    \n    inputs = tf.to_int32(tf.reshape(tf.range(2*3), (2, 3)))\n    outputs = embedding(inputs, 6, 2, zero_pad=True)\n    with tf.Session() as sess:\n        sess.run(tf.global_variables_initializer())\n        print sess.run(outputs)\n    >>\n    [[[ 0.          0.        ]\n      [ 0.09754146  0.67385566]\n      [ 0.37864095 -0.35689294]]\n\n     [[-1.01329422 -1.09939694]\n      [ 0.7521342   0.38203377]\n      [-0.04973143 -0.06210355]]]\n    ```\n    \n    ```\n    import tensorflow as tf\n    \n    inputs = tf.to_int32(tf.reshape(tf.range(2*3), (2, 3)))\n    outputs = embedding(inputs, 6, 2, zero_pad=False)\n    with tf.Session() as sess:\n        sess.run(tf.global_variables_initializer())\n        print sess.run(outputs)\n    >>\n    [[[-0.19172323 -0.39159766]\n      [-0.43212751 -0.66207761]\n      [ 1.03452027 -0.26704335]]\n\n     [[-0.11634696 -0.35983452]\n      [ 0.50208133  0.53509563]\n      [ 1.22204471 -0.96587461]]]    \n    ```    \n    '''", "\n", "with", "tf", ".", "variable_scope", "(", "scope", ",", "reuse", "=", "reuse", ")", ":", "\n", "        ", "lookup_table", "=", "tf", ".", "get_variable", "(", "'lookup_table_gen'", ",", "\n", "dtype", "=", "tf", ".", "float32", ",", "\n", "shape", "=", "[", "vocab_size", ",", "num_units", "]", ",", "\n", "#initializer=tf.contrib.layers.xavier_initializer(),", "\n", "regularizer", "=", "tf", ".", "contrib", ".", "layers", ".", "l2_regularizer", "(", "l2_reg", ")", ")", "\n", "if", "zero_pad", ":", "\n", "            ", "lookup_table", "=", "tf", ".", "concat", "(", "(", "tf", ".", "zeros", "(", "shape", "=", "[", "1", ",", "num_units", "]", ")", ",", "#\u628aembedding table\u91cc\u9762\u7684\u7b2c0\u4e2a\u8d4b\u503c\u4e3a0\u3002", "\n", "lookup_table", "[", "1", ":", ",", ":", "]", ")", ",", "0", ")", "\n", "", "outputs", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "lookup_table", ",", "inputs", ")", "\n", "\n", "if", "scale", ":", "\n", "            ", "outputs", "=", "outputs", "*", "(", "num_units", "**", "0.5", ")", "\n", "", "", "if", "with_t", ":", "return", "outputs", ",", "lookup_table", "\n", "else", ":", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.ReyonRen_MFGAN.None.gen_modules.multihead_attention": [[133, 227], ["tensorflow.variable_scope", "tensorflow.layers.dense", "tensorflow.layers.dense", "tensorflow.layers.dense", "tensorflow.concat", "tensorflow.concat", "tensorflow.concat", "tensorflow.matmul", "tensorflow.sign", "tensorflow.tile", "tensorflow.tile", "tensorflow.where", "tensorflow.nn.softmax", "tensorflow.sign", "tensorflow.tile", "tensorflow.tile", "tensorflow.layers.dropout", "tensorflow.matmul", "tensorflow.concat", "tensorflow.split", "tensorflow.split", "tensorflow.split", "tensorflow.transpose", "tensorflow.abs", "tensorflow.expand_dims", "tensorflow.ones_like", "tensorflow.equal", "tensorflow.ones_like", "tensorflow.contrib.linalg.LinearOperatorTriL().to_dense", "tensorflow.tile", "tensorflow.where", "tensorflow.abs", "tensorflow.expand_dims", "tensorflow.split", "tensorflow.reduce_sum", "tensorflow.expand_dims", "tensorflow.ones_like", "tensorflow.equal", "tensorflow.reduce_sum", "tensorflow.convert_to_tensor", "queries.get_shape", "tf.concat.get_shape().as_list", "tensorflow.shape", "tensorflow.contrib.linalg.LinearOperatorTriL", "tensorflow.shape", "tensorflow.shape", "tf.concat.get_shape"], "function", ["None"], ["", "def", "multihead_attention", "(", "queries", ",", "\n", "keys", ",", "\n", "num_units", "=", "None", ",", "\n", "num_heads", "=", "8", ",", "\n", "dropout_rate", "=", "0", ",", "\n", "is_training", "=", "True", ",", "\n", "causality", "=", "False", ",", "\n", "scope", "=", "\"multihead_attention_gen\"", ",", "\n", "reuse", "=", "None", ",", "\n", "with_qk", "=", "False", ")", ":", "\n", "    ", "'''Applies multihead attention.\n    \n    Args:\n      queries: A 3d tensor with shape of [N, T_q, C_q].\n      keys: A 3d tensor with shape of [N, T_k, C_k].\n      num_units: A scalar. Attention size.\n      dropout_rate: A floating point number.\n      is_training: Boolean. Controller of mechanism for dropout.\n      causality: Boolean. If true, units that reference the future are masked. \n      num_heads: An int. Number of heads.\n      scope: Optional scope for `variable_scope`.\n      reuse: Boolean, whether to reuse the weights of a previous layer\n        by the same name.\n        \n    Returns\n      A 3d tensor with shape of (N, T_q, C)  \n    '''", "\n", "with", "tf", ".", "variable_scope", "(", "scope", ",", "reuse", "=", "reuse", ")", ":", "\n", "# Set the fall back option for num_units", "\n", "        ", "if", "num_units", "is", "None", ":", "\n", "            ", "num_units", "=", "queries", ".", "get_shape", "(", ")", ".", "as_list", "[", "-", "1", "]", "\n", "\n", "# Linear projections", "\n", "# Q = tf.layers.dense(queries, num_units, activation=tf.nn.relu) # (N, T_q, C)", "\n", "# K = tf.layers.dense(keys, num_units, activation=tf.nn.relu) # (N, T_k, C)", "\n", "# V = tf.layers.dense(keys, num_units, activation=tf.nn.relu) # (N, T_k, C)", "\n", "", "Q", "=", "tf", ".", "layers", ".", "dense", "(", "queries", ",", "num_units", ",", "activation", "=", "None", ")", "# (N, T_q, C)", "\n", "K", "=", "tf", ".", "layers", ".", "dense", "(", "keys", ",", "num_units", ",", "activation", "=", "None", ")", "# (N, T_k, C)", "\n", "V", "=", "tf", ".", "layers", ".", "dense", "(", "keys", ",", "num_units", ",", "activation", "=", "None", ")", "# (N, T_k, C)", "\n", "\n", "# Split and concat", "\n", "Q_", "=", "tf", ".", "concat", "(", "tf", ".", "split", "(", "Q", ",", "num_heads", ",", "axis", "=", "2", ")", ",", "axis", "=", "0", ")", "# (h*N, T_q, C/h) ", "\n", "K_", "=", "tf", ".", "concat", "(", "tf", ".", "split", "(", "K", ",", "num_heads", ",", "axis", "=", "2", ")", ",", "axis", "=", "0", ")", "# (h*N, T_k, C/h) ", "\n", "V_", "=", "tf", ".", "concat", "(", "tf", ".", "split", "(", "V", ",", "num_heads", ",", "axis", "=", "2", ")", ",", "axis", "=", "0", ")", "# (h*N, T_k, C/h) ", "\n", "\n", "# Multiplication", "\n", "outputs", "=", "tf", ".", "matmul", "(", "Q_", ",", "tf", ".", "transpose", "(", "K_", ",", "[", "0", ",", "2", ",", "1", "]", ")", ")", "# (h*N, T_q, T_k)", "\n", "\n", "# Scale", "\n", "outputs", "=", "outputs", "/", "(", "K_", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "-", "1", "]", "**", "0.5", ")", "\n", "\n", "# Key Masking", "\n", "key_masks", "=", "tf", ".", "sign", "(", "tf", ".", "abs", "(", "tf", ".", "reduce_sum", "(", "keys", ",", "axis", "=", "-", "1", ")", ")", ")", "# (N, T_k)", "\n", "key_masks", "=", "tf", ".", "tile", "(", "key_masks", ",", "[", "num_heads", ",", "1", "]", ")", "# (h*N, T_k)", "\n", "key_masks", "=", "tf", ".", "tile", "(", "tf", ".", "expand_dims", "(", "key_masks", ",", "1", ")", ",", "[", "1", ",", "tf", ".", "shape", "(", "queries", ")", "[", "1", "]", ",", "1", "]", ")", "# (h*N, T_q, T_k)", "\n", "\n", "paddings", "=", "tf", ".", "ones_like", "(", "outputs", ")", "*", "(", "-", "2", "**", "32", "+", "1", ")", "\n", "outputs", "=", "tf", ".", "where", "(", "tf", ".", "equal", "(", "key_masks", ",", "0", ")", ",", "paddings", ",", "outputs", ")", "# (h*N, T_q, T_k)", "\n", "\n", "# Causality = Future blinding", "\n", "if", "causality", ":", "\n", "            ", "diag_vals", "=", "tf", ".", "ones_like", "(", "outputs", "[", "0", ",", ":", ",", ":", "]", ")", "# (T_q, T_k)", "\n", "tril", "=", "tf", ".", "contrib", ".", "linalg", ".", "LinearOperatorTriL", "(", "diag_vals", ")", ".", "to_dense", "(", ")", "# (T_q, T_k)", "\n", "masks", "=", "tf", ".", "tile", "(", "tf", ".", "expand_dims", "(", "tril", ",", "0", ")", ",", "[", "tf", ".", "shape", "(", "outputs", ")", "[", "0", "]", ",", "1", ",", "1", "]", ")", "# (h*N, T_q, T_k)", "\n", "\n", "paddings", "=", "tf", ".", "ones_like", "(", "masks", ")", "*", "(", "-", "2", "**", "32", "+", "1", ")", "\n", "outputs", "=", "tf", ".", "where", "(", "tf", ".", "equal", "(", "masks", ",", "0", ")", ",", "paddings", ",", "outputs", ")", "# (h*N, T_q, T_k)", "\n", "\n", "# Activation", "\n", "", "outputs", "=", "tf", ".", "nn", ".", "softmax", "(", "outputs", ")", "# (h*N, T_q, T_k)", "\n", "\n", "# Query Masking", "\n", "query_masks", "=", "tf", ".", "sign", "(", "tf", ".", "abs", "(", "tf", ".", "reduce_sum", "(", "queries", ",", "axis", "=", "-", "1", ")", ")", ")", "# (N, T_q)", "\n", "query_masks", "=", "tf", ".", "tile", "(", "query_masks", ",", "[", "num_heads", ",", "1", "]", ")", "# (h*N, T_q)", "\n", "query_masks", "=", "tf", ".", "tile", "(", "tf", ".", "expand_dims", "(", "query_masks", ",", "-", "1", ")", ",", "[", "1", ",", "1", ",", "tf", ".", "shape", "(", "keys", ")", "[", "1", "]", "]", ")", "# (h*N, T_q, T_k)", "\n", "outputs", "*=", "query_masks", "# broadcasting. (N, T_q, C)", "\n", "\n", "# Dropouts", "\n", "outputs", "=", "tf", ".", "layers", ".", "dropout", "(", "outputs", ",", "rate", "=", "dropout_rate", ",", "training", "=", "tf", ".", "convert_to_tensor", "(", "is_training", ")", ")", "\n", "\n", "# Weighted sum", "\n", "outputs", "=", "tf", ".", "matmul", "(", "outputs", ",", "V_", ")", "# ( h*N, T_q, C/h)", "\n", "\n", "# Restore shape", "\n", "outputs", "=", "tf", ".", "concat", "(", "tf", ".", "split", "(", "outputs", ",", "num_heads", ",", "axis", "=", "0", ")", ",", "axis", "=", "2", ")", "# (N, T_q, C)", "\n", "\n", "# Residual connection", "\n", "outputs", "+=", "queries", "\n", "\n", "# Normalize", "\n", "#outputs = normalize(outputs) # (N, T_q, C)", "\n", "\n", "", "if", "with_qk", ":", "return", "Q", ",", "K", "\n", "else", ":", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.ReyonRen_MFGAN.None.gen_modules.feedforward": [[228, 265], ["tensorflow.variable_scope", "tensorflow.layers.conv1d", "tensorflow.layers.dropout", "tensorflow.layers.conv1d", "tensorflow.layers.dropout", "tensorflow.convert_to_tensor", "tensorflow.convert_to_tensor"], "function", ["None"], ["", "def", "feedforward", "(", "inputs", ",", "\n", "num_units", "=", "[", "2048", ",", "512", "]", ",", "\n", "scope", "=", "\"multihead_attention_gen\"", ",", "\n", "dropout_rate", "=", "0.2", ",", "\n", "is_training", "=", "True", ",", "\n", "reuse", "=", "None", ")", ":", "\n", "    ", "'''Point-wise feed forward net.\n    \n    Args:\n      inputs: A 3d tensor with shape of [N, T, C].\n      num_units: A list of two integers.\n      scope: Optional scope for `variable_scope`.\n      reuse: Boolean, whether to reuse the weights of a previous layer\n        by the same name.\n        \n    Returns:\n      A 3d tensor with the same shape and dtype as inputs\n    '''", "\n", "with", "tf", ".", "variable_scope", "(", "scope", ",", "reuse", "=", "reuse", ")", ":", "\n", "# Inner layer", "\n", "        ", "params", "=", "{", "\"inputs\"", ":", "inputs", ",", "\"filters\"", ":", "num_units", "[", "0", "]", ",", "\"kernel_size\"", ":", "1", ",", "\n", "\"activation\"", ":", "tf", ".", "nn", ".", "relu", ",", "\"use_bias\"", ":", "True", "}", "\n", "outputs", "=", "tf", ".", "layers", ".", "conv1d", "(", "**", "params", ")", "\n", "outputs", "=", "tf", ".", "layers", ".", "dropout", "(", "outputs", ",", "rate", "=", "dropout_rate", ",", "training", "=", "tf", ".", "convert_to_tensor", "(", "is_training", ")", ")", "\n", "# Readout layer", "\n", "params", "=", "{", "\"inputs\"", ":", "outputs", ",", "\"filters\"", ":", "num_units", "[", "1", "]", ",", "\"kernel_size\"", ":", "1", ",", "\n", "\"activation\"", ":", "None", ",", "\"use_bias\"", ":", "True", "}", "\n", "outputs", "=", "tf", ".", "layers", ".", "conv1d", "(", "**", "params", ")", "\n", "outputs", "=", "tf", ".", "layers", ".", "dropout", "(", "outputs", ",", "rate", "=", "dropout_rate", ",", "training", "=", "tf", ".", "convert_to_tensor", "(", "is_training", ")", ")", "\n", "\n", "# Residual connection", "\n", "outputs", "=", "outputs", "*", "0.5", "+", "inputs", "\n", "\n", "# Normalize", "\n", "#outputs = normalize(outputs)", "\n", "\n", "", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.ReyonRen_MFGAN.None.gen_modules.feedforward2": [[267, 304], ["tensorflow.variable_scope", "tensorflow.layers.conv1d", "tensorflow.layers.dropout", "tensorflow.layers.conv1d", "tensorflow.layers.dropout", "tensorflow.convert_to_tensor", "tensorflow.convert_to_tensor"], "function", ["None"], ["", "def", "feedforward2", "(", "inputs", ",", "\n", "num_units", "=", "[", "2048", ",", "512", "]", ",", "\n", "scope", "=", "\"multihead_attention2_gen\"", ",", "\n", "dropout_rate", "=", "0.2", ",", "\n", "is_training", "=", "True", ",", "\n", "reuse", "=", "None", ")", ":", "\n", "    ", "'''Point-wise feed forward net.\n\n    Args:\n      inputs: A 3d tensor with shape of [N, T, C].\n      num_units: A list of two integers.\n      scope: Optional scope for `variable_scope`.\n      reuse: Boolean, whether to reuse the weights of a previous layer\n        by the same name.\n\n    Returns:\n      A 3d tensor with the same shape and dtype as inputs\n    '''", "\n", "with", "tf", ".", "variable_scope", "(", "scope", ",", "reuse", "=", "reuse", ")", ":", "\n", "# Inner layer", "\n", "        ", "params", "=", "{", "\"inputs\"", ":", "inputs", ",", "\"filters\"", ":", "num_units", "[", "0", "]", ",", "\"kernel_size\"", ":", "1", ",", "\n", "\"activation\"", ":", "tf", ".", "nn", ".", "relu", ",", "\"use_bias\"", ":", "True", "}", "\n", "outputs", "=", "tf", ".", "layers", ".", "conv1d", "(", "**", "params", ")", "\n", "outputs", "=", "tf", ".", "layers", ".", "dropout", "(", "outputs", ",", "rate", "=", "dropout_rate", ",", "training", "=", "tf", ".", "convert_to_tensor", "(", "is_training", ")", ")", "\n", "# Readout layer", "\n", "params", "=", "{", "\"inputs\"", ":", "outputs", ",", "\"filters\"", ":", "num_units", "[", "1", "]", ",", "\"kernel_size\"", ":", "1", ",", "\n", "\"activation\"", ":", "None", ",", "\"use_bias\"", ":", "True", "}", "\n", "outputs", "=", "tf", ".", "layers", ".", "conv1d", "(", "**", "params", ")", "\n", "outputs", "=", "tf", ".", "layers", ".", "dropout", "(", "outputs", ",", "rate", "=", "dropout_rate", ",", "training", "=", "tf", ".", "convert_to_tensor", "(", "is_training", ")", ")", "\n", "\n", "# Residual connection", "\n", "outputs", "=", "outputs", "*", "0.5", "+", "inputs", "\n", "\n", "# Normalize", "\n", "# outputs = normalize(outputs)", "\n", "\n", "", "return", "outputs", "", "", ""]], "home.repos.pwc.inspect_result.ReyonRen_MFGAN.None.gen_sampler.gen_WarpSampler.__init__": [[48, 63], ["multiprocessing.Queue", "range", "gen_sampler.gen_WarpSampler.processors.append", "gen_sampler.gen_WarpSampler.processors[].start", "multiprocessing.Process", "numpy.random.randint"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "User", ",", "usernum", ",", "itemnum", ",", "batch_size", "=", "64", ",", "maxlen", "=", "10", ",", "n_workers", "=", "1", ")", ":", "\n", "        ", "self", ".", "result_queue", "=", "Queue", "(", "maxsize", "=", "n_workers", "*", "10", ")", "\n", "self", ".", "processors", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "n_workers", ")", ":", "\n", "            ", "self", ".", "processors", ".", "append", "(", "\n", "Process", "(", "target", "=", "sample_function", ",", "args", "=", "(", "User", ",", "\n", "usernum", ",", "\n", "itemnum", ",", "\n", "batch_size", ",", "\n", "maxlen", ",", "\n", "self", ".", "result_queue", ",", "\n", "np", ".", "random", ".", "randint", "(", "2e9", ")", "\n", ")", ")", ")", "\n", "self", ".", "processors", "[", "-", "1", "]", ".", "daemon", "=", "True", "\n", "self", ".", "processors", "[", "-", "1", "]", ".", "start", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ReyonRen_MFGAN.None.gen_sampler.gen_WarpSampler.next_batch": [[64, 66], ["gen_sampler.gen_WarpSampler.result_queue.get"], "methods", ["None"], ["", "", "def", "next_batch", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "result_queue", ".", "get", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ReyonRen_MFGAN.None.gen_sampler.gen_WarpSampler.close": [[67, 71], ["p.terminate", "p.join"], "methods", ["None"], ["", "def", "close", "(", "self", ")", ":", "\n", "        ", "for", "p", "in", "self", ".", "processors", ":", "\n", "            ", "p", ".", "terminate", "(", ")", "\n", "p", ".", "join", "(", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.ReyonRen_MFGAN.None.gen_sampler.random_neq": [[5, 10], ["numpy.random.randint", "numpy.random.randint"], "function", ["None"], ["def", "random_neq", "(", "l", ",", "r", ",", "s", ")", ":", "\n", "    ", "t", "=", "np", ".", "random", ".", "randint", "(", "l", ",", "r", ")", "\n", "while", "t", "in", "s", ":", "\n", "        ", "t", "=", "np", ".", "random", ".", "randint", "(", "l", ",", "r", ")", "\n", "", "return", "t", "\n", "\n"]], "home.repos.pwc.inspect_result.ReyonRen_MFGAN.None.gen_sampler.sample_function": [[12, 45], ["numpy.random.seed", "numpy.random.randint", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "set", "reversed", "range", "result_queue.put", "len", "numpy.random.randint", "one_batch.append", "zip", "gen_sampler.random_neq", "gen_sampler.sample_function.sample"], "function", ["home.repos.pwc.inspect_result.ReyonRen_MFGAN.None.dis_sampler.random_neq"], ["", "def", "sample_function", "(", "user_train", ",", "usernum", ",", "itemnum", ",", "batch_size", ",", "maxlen", ",", "result_queue", ",", "SEED", ")", ":", "\n", "    ", "def", "sample", "(", ")", ":", "\n", "\n", "        ", "user", "=", "np", ".", "random", ".", "randint", "(", "1", ",", "usernum", "+", "1", ")", "\n", "while", "len", "(", "user_train", "[", "user", "]", ")", "<=", "1", ":", "user", "=", "np", ".", "random", ".", "randint", "(", "1", ",", "usernum", "+", "1", ")", "\n", "\n", "seq", "=", "np", ".", "zeros", "(", "[", "maxlen", "]", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "pos", "=", "np", ".", "zeros", "(", "[", "maxlen", "]", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "neg", "=", "np", ".", "zeros", "(", "[", "maxlen", "]", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "total", "=", "np", ".", "zeros", "(", "[", "maxlen", "]", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "nxt", "=", "user_train", "[", "user", "]", "[", "-", "1", "]", "\n", "idx", "=", "maxlen", "-", "1", "\n", "\n", "ts", "=", "set", "(", "user_train", "[", "user", "]", ")", "\n", "for", "i", "in", "reversed", "(", "user_train", "[", "user", "]", "[", ":", "-", "1", "]", ")", ":", "\n", "            ", "seq", "[", "idx", "]", "=", "i", "# \u9664\u53bb\u6700\u540e\u4e00\u4f4d", "\n", "total", "[", "idx", "]", "=", "nxt", "\n", "pos", "[", "idx", "]", "=", "nxt", "#\u9664\u53bb\u7b2c\u4e00\u4f4d", "\n", "if", "nxt", "!=", "0", ":", "neg", "[", "idx", "]", "=", "random_neq", "(", "1", ",", "itemnum", "+", "1", ",", "ts", ")", "\n", "nxt", "=", "i", "\n", "idx", "-=", "1", "\n", "if", "idx", "==", "-", "1", ":", "break", "\n", "", "if", "idx", "!=", "-", "1", ":", "\n", "            ", "total", "[", "idx", "]", "=", "nxt", "\n", "", "return", "user", ",", "seq", ",", "pos", ",", "neg", ",", "total", "\n", "\n", "", "np", ".", "random", ".", "seed", "(", "SEED", ")", "\n", "while", "True", ":", "\n", "        ", "one_batch", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "batch_size", ")", ":", "\n", "            ", "one_batch", ".", "append", "(", "sample", "(", ")", ")", "\n", "\n", "", "result_queue", ".", "put", "(", "zip", "(", "*", "one_batch", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ReyonRen_MFGAN.None.util.data_partition": [[8, 41], ["collections.defaultdict", "open", "line.rstrip().split", "int", "int", "max", "max", "User[].append", "len", "user_valid[].append", "user_test[].append", "line.rstrip"], "function", ["None"], ["def", "data_partition", "(", "fname", ")", ":", "\n", "    ", "usernum", "=", "0", "\n", "itemnum", "=", "0", "\n", "User", "=", "defaultdict", "(", "list", ")", "\n", "user_train", "=", "{", "}", "\n", "user_valid", "=", "{", "}", "\n", "user_test", "=", "{", "}", "\n", "user_total", "=", "{", "}", "\n", "# assume user/item index starting from 1", "\n", "f", "=", "open", "(", "'data/%s.txt'", "%", "fname", ",", "'r'", ")", "\n", "for", "line", "in", "f", ":", "\n", "        ", "u", ",", "i", "=", "line", ".", "rstrip", "(", ")", ".", "split", "(", ")", "\n", "u", "=", "int", "(", "u", ")", "\n", "i", "=", "int", "(", "i", ")", "\n", "usernum", "=", "max", "(", "u", ",", "usernum", ")", "\n", "itemnum", "=", "max", "(", "i", ",", "itemnum", ")", "\n", "User", "[", "u", "]", ".", "append", "(", "i", ")", "\n", "\n", "", "for", "user", "in", "User", ":", "\n", "        ", "nfeedback", "=", "len", "(", "User", "[", "user", "]", ")", "\n", "if", "nfeedback", "<", "3", ":", "\n", "            ", "user_total", "[", "user", "]", "=", "User", "[", "user", "]", "\n", "user_train", "[", "user", "]", "=", "User", "[", "user", "]", "\n", "user_valid", "[", "user", "]", "=", "[", "]", "\n", "user_test", "[", "user", "]", "=", "[", "]", "\n", "", "else", ":", "\n", "            ", "user_total", "[", "user", "]", "=", "User", "[", "user", "]", "\n", "user_train", "[", "user", "]", "=", "User", "[", "user", "]", "[", ":", "-", "2", "]", "\n", "user_valid", "[", "user", "]", "=", "[", "]", "\n", "user_valid", "[", "user", "]", ".", "append", "(", "User", "[", "user", "]", "[", "-", "2", "]", ")", "\n", "user_test", "[", "user", "]", "=", "[", "]", "\n", "user_test", "[", "user", "]", ".", "append", "(", "User", "[", "user", "]", "[", "-", "1", "]", ")", "\n", "", "", "return", "[", "user_total", ",", "user_train", ",", "user_valid", ",", "user_test", ",", "usernum", ",", "itemnum", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ReyonRen_MFGAN.None.util.evaluate": [[43, 133], ["copy.deepcopy", "random.sample", "range", "numpy.zeros", "reversed", "set", "set.add", "range", "range", "numpy.random.randint", "item_idx.append", "model.predict", "predictions.argsort().argsort", "len", "sys.stdout.flush", "len", "len", "numpy.random.randint", "numpy.log2", "predictions.argsort", "numpy.log2"], "function", ["home.repos.pwc.inspect_result.ReyonRen_MFGAN.None.gen_model.Gen.predict"], ["", "def", "evaluate", "(", "model", ",", "dataset", ",", "args", ",", "sess", ")", ":", "\n", "    ", "[", "total", ",", "train", ",", "valid", ",", "test", ",", "usernum", ",", "itemnum", "]", "=", "copy", ".", "deepcopy", "(", "dataset", ")", "\n", "\n", "NDCG", "=", "0.0", "\n", "NDCG_sparse", "=", "0.0", "\n", "HT", "=", "0.0", "\n", "HT_sparse", "=", "0.0", "\n", "valid_user", "=", "0.0", "\n", "\n", "if", "usernum", ">", "10000", ":", "\n", "        ", "users", "=", "random", ".", "sample", "(", "range", "(", "1", ",", "usernum", "+", "1", ")", ",", "10000", ")", "\n", "", "else", ":", "\n", "        ", "users", "=", "range", "(", "1", ",", "usernum", "+", "1", ")", "### \u6ce8\u610fuser\u662f\u4ece0\u5f00\u59cb\u7684\u8fd8\u662f\u4ece1\u5f00\u59cb\u7684", "\n", "\n", "", "P", "=", "0.0", ";", "\n", "R", "=", "0.0", ";", "\n", "MAP", "=", "0.0", ";", "\n", "MRR", "=", "0.0", ";", "\n", "MRR_sparse", "=", "0.0", ";", "\n", "sparse_user", "=", "0.0", "\n", "for", "u", "in", "users", ":", "\n", "        ", "if", "len", "(", "train", "[", "u", "]", ")", "<", "1", "or", "len", "(", "test", "[", "u", "]", ")", "<", "1", ":", "continue", "\n", "\n", "seq", "=", "np", ".", "zeros", "(", "[", "args", ".", "maxlen", "]", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "idx", "=", "args", ".", "maxlen", "-", "1", "\n", "seq", "[", "idx", "]", "=", "valid", "[", "u", "]", "[", "0", "]", "\n", "idx", "-=", "1", "\n", "for", "i", "in", "reversed", "(", "train", "[", "u", "]", ")", ":", "\n", "            ", "seq", "[", "idx", "]", "=", "i", "\n", "idx", "-=", "1", "\n", "if", "idx", "==", "-", "1", ":", "break", "\n", "", "rated", "=", "set", "(", "train", "[", "u", "]", ")", "\n", "rated", ".", "add", "(", "0", ")", "### \uff1f\uff1f\uff1f", "\n", "item_idx", "=", "[", "test", "[", "u", "]", "[", "0", "]", "]", "\n", "for", "_", "in", "range", "(", "100", ")", ":", "# 100\u4e2a\u8d1f\u4f8b", "\n", "            ", "t", "=", "np", ".", "random", ".", "randint", "(", "1", ",", "itemnum", "+", "1", ")", "\n", "while", "t", "in", "rated", ":", "t", "=", "np", ".", "random", ".", "randint", "(", "1", ",", "itemnum", "+", "1", ")", "\n", "item_idx", ".", "append", "(", "t", ")", "\n", "\n", "", "predictions", "=", "-", "model", ".", "predict", "(", "sess", ",", "[", "u", "]", ",", "[", "seq", "]", ",", "item_idx", ")", "\n", "# print(predictions)", "\n", "#", "\n", "# print(np.shape(predictions))", "\n", "predictions", "=", "predictions", "[", "0", "]", "\n", "\n", "rank", "=", "predictions", ".", "argsort", "(", ")", ".", "argsort", "(", ")", "[", "0", "]", "# pos item rank", "\n", "\n", "valid_user", "+=", "1", "\n", "\n", "if", "rank", "<", "10", ":", "\n", "            ", "NDCG", "+=", "1", "/", "np", ".", "log2", "(", "rank", "+", "2", ")", "\n", "HT", "+=", "1", "\n", "MRR", "+=", "1", "/", "(", "rank", "+", "1", ")", "\n", "", "if", "len", "(", "train", "[", "u", "]", ")", "<", "32", ":", "\n", "            ", "sparse_user", "+=", "1", "\n", "if", "rank", "<", "10", ":", "\n", "                ", "NDCG_sparse", "+=", "1", "/", "np", ".", "log2", "(", "rank", "+", "2", ")", "\n", "HT_sparse", "+=", "1", "\n", "MRR_sparse", "+=", "1", "/", "(", "rank", "+", "1", ")", "\n", "\n", "\n", "", "", "top_k", "=", "10", "\n", "\n", "# trueResult = [test[u][0]]", "\n", "# predictions = -predictions", "\n", "# total_pro = [(item_idx[i], predictions[i]) for i in range(101)]", "\n", "# total_pro.sort(key=lambda x: x[1], reverse=True)", "\n", "# rankedItem = [pair[0] for pair in total_pro]", "\n", "#", "\n", "# right_num = 0", "\n", "# trueNum = len(trueResult)", "\n", "# count = 0", "\n", "# for j in rankedItem:", "\n", "#     if count == top_k:", "\n", "#         P += 1.0 * right_num / count", "\n", "#         R += 1.0 * right_num / trueNum", "\n", "#     count += 1", "\n", "#     if j in trueResult:", "\n", "#         right_num += 1", "\n", "#         MAP = MAP + 1.0 * right_num / count", "\n", "#         if right_num == 1:", "\n", "#             MRR += 1.0 / count", "\n", "# if right_num != 0:", "\n", "#     MAP /= right_num", "\n", "\n", "if", "valid_user", "%", "100", "==", "0", ":", "\n", "            ", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "\n", "", "", "return", "NDCG", "/", "valid_user", ",", "HT", "/", "valid_user", ",", "MRR", "/", "valid_user", ",", "NDCG_sparse", "/", "sparse_user", ",", "HT_sparse", "/", "sparse_user", ",", "MRR_sparse", "/", "sparse_user", "\n", "\n"]], "home.repos.pwc.inspect_result.ReyonRen_MFGAN.None.util.evaluate_valid": [[135, 204], ["copy.deepcopy", "random.sample", "range", "numpy.zeros", "reversed", "set", "set.add", "range", "total_pro.sort", "len", "range", "numpy.random.randint", "item_idx.append", "model.predict", "predictions.argsort().argsort", "sys.stdout.flush", "numpy.random.randint", "numpy.log2", "range", "predictions.argsort"], "function", ["home.repos.pwc.inspect_result.ReyonRen_MFGAN.None.gen_model.Gen.predict"], ["", "def", "evaluate_valid", "(", "model", ",", "dataset", ",", "args", ",", "sess", ")", ":", "\n", "    ", "[", "total", ",", "train", ",", "valid", ",", "test", ",", "usernum", ",", "itemnum", "]", "=", "copy", ".", "deepcopy", "(", "dataset", ")", "\n", "\n", "NDCG", "=", "0.0", "\n", "valid_user", "=", "0.0", "\n", "HT", "=", "0.0", "\n", "if", "usernum", ">", "10000", ":", "\n", "        ", "users", "=", "random", ".", "sample", "(", "range", "(", "1", ",", "usernum", "+", "1", ")", ",", "10000", ")", "\n", "", "else", ":", "\n", "        ", "users", "=", "range", "(", "1", ",", "usernum", "+", "1", ")", "\n", "\n", "", "P", "=", "0.0", ";", "R", "=", "0.0", ";", "MAP", "=", "0.0", ";", "MRR", "=", "0.0", ";", "\n", "for", "u", "in", "users", ":", "\n", "# if len(train[u]) < 1 or len(valid[u]) < 1: continue", "\n", "\n", "        ", "seq", "=", "np", ".", "zeros", "(", "[", "args", ".", "maxlen", "]", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "idx", "=", "args", ".", "maxlen", "-", "1", "\n", "for", "i", "in", "reversed", "(", "train", "[", "u", "]", ")", ":", "\n", "            ", "seq", "[", "idx", "]", "=", "i", "\n", "idx", "-=", "1", "\n", "if", "idx", "==", "-", "1", ":", "break", "\n", "\n", "", "rated", "=", "set", "(", "train", "[", "u", "]", ")", "\n", "rated", ".", "add", "(", "0", ")", "\n", "item_idx", "=", "[", "valid", "[", "u", "]", "[", "0", "]", "]", "\n", "for", "_", "in", "range", "(", "100", ")", ":", "\n", "            ", "t", "=", "np", ".", "random", ".", "randint", "(", "1", ",", "itemnum", "+", "1", ")", "\n", "while", "t", "in", "rated", ":", "t", "=", "np", ".", "random", ".", "randint", "(", "1", ",", "itemnum", "+", "1", ")", "\n", "item_idx", ".", "append", "(", "t", ")", "\n", "\n", "", "predictions", "=", "-", "model", ".", "predict", "(", "sess", ",", "[", "u", "]", ",", "[", "seq", "]", ",", "item_idx", ")", "\n", "predictions", "=", "predictions", "[", "0", "]", "\n", "\n", "rank", "=", "predictions", ".", "argsort", "(", ")", ".", "argsort", "(", ")", "[", "0", "]", "\n", "\n", "valid_user", "+=", "1", "\n", "\n", "if", "rank", "<", "10", ":", "\n", "            ", "NDCG", "+=", "1", "/", "np", ".", "log2", "(", "rank", "+", "2", ")", "\n", "HT", "+=", "1", "\n", "\n", "", "top_k", "=", "10", "\n", "\n", "trueResult", "=", "[", "valid", "[", "u", "]", "[", "0", "]", "]", "\n", "predictions", "=", "-", "predictions", "\n", "total_pro", "=", "[", "(", "item_idx", "[", "i", "]", ",", "predictions", "[", "i", "]", ")", "for", "i", "in", "range", "(", "101", ")", "]", "\n", "total_pro", ".", "sort", "(", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ",", "reverse", "=", "True", ")", "\n", "rankedItem", "=", "[", "pair", "[", "0", "]", "for", "pair", "in", "total_pro", "]", "\n", "\n", "right_num", "=", "0", "\n", "trueNum", "=", "len", "(", "trueResult", ")", "\n", "count", "=", "0", "\n", "for", "j", "in", "rankedItem", ":", "\n", "            ", "if", "count", "==", "top_k", ":", "\n", "                ", "P", "+=", "1.0", "*", "right_num", "/", "count", "\n", "R", "+=", "1.0", "*", "right_num", "/", "trueNum", "\n", "", "count", "+=", "1", "\n", "if", "j", "in", "trueResult", ":", "\n", "                ", "right_num", "+=", "1", "\n", "MAP", "=", "MAP", "+", "1.0", "*", "right_num", "/", "count", "\n", "if", "right_num", "==", "1", ":", "\n", "                    ", "MRR", "+=", "1.0", "/", "count", "\n", "", "", "", "if", "right_num", "!=", "0", ":", "\n", "            ", "MAP", "/=", "right_num", "\n", "\n", "", "if", "valid_user", "%", "100", "==", "0", ":", "\n", "            ", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "\n", "", "", "return", "NDCG", "/", "valid_user", ",", "HT", "/", "valid_user", ",", "R", "/", "valid_user", ",", "MRR", "/", "valid_user", "\n", "", ""]], "home.repos.pwc.inspect_result.ReyonRen_MFGAN.None.dis_sampler.dis_WarpSampler.__init__": [[48, 63], ["multiprocessing.Queue", "range", "dis_sampler.dis_WarpSampler.processors.append", "dis_sampler.dis_WarpSampler.processors[].start", "multiprocessing.Process", "numpy.random.randint"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "User", ",", "usernum", ",", "itemnum", ",", "batch_size", "=", "64", ",", "maxlen", "=", "10", ",", "n_workers", "=", "1", ")", ":", "\n", "        ", "self", ".", "result_queue", "=", "Queue", "(", "maxsize", "=", "n_workers", "*", "10", ")", "\n", "self", ".", "processors", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "n_workers", ")", ":", "\n", "            ", "self", ".", "processors", ".", "append", "(", "\n", "Process", "(", "target", "=", "sample_function", ",", "args", "=", "(", "User", ",", "\n", "usernum", ",", "\n", "itemnum", ",", "\n", "batch_size", ",", "\n", "maxlen", ",", "\n", "self", ".", "result_queue", ",", "\n", "np", ".", "random", ".", "randint", "(", "2e9", ")", "\n", ")", ")", ")", "\n", "self", ".", "processors", "[", "-", "1", "]", ".", "daemon", "=", "True", "\n", "self", ".", "processors", "[", "-", "1", "]", ".", "start", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ReyonRen_MFGAN.None.dis_sampler.dis_WarpSampler.next_batch": [[64, 66], ["dis_sampler.dis_WarpSampler.result_queue.get"], "methods", ["None"], ["", "", "def", "next_batch", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "result_queue", ".", "get", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ReyonRen_MFGAN.None.dis_sampler.dis_WarpSampler.close": [[67, 71], ["p.terminate", "p.join"], "methods", ["None"], ["", "def", "close", "(", "self", ")", ":", "\n", "        ", "for", "p", "in", "self", ".", "processors", ":", "\n", "            ", "p", ".", "terminate", "(", ")", "\n", "p", ".", "join", "(", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.ReyonRen_MFGAN.None.dis_sampler.random_neq": [[5, 10], ["numpy.random.randint", "numpy.random.randint"], "function", ["None"], ["def", "random_neq", "(", "l", ",", "r", ",", "s", ")", ":", "\n", "    ", "t", "=", "np", ".", "random", ".", "randint", "(", "l", ",", "r", ")", "\n", "while", "t", "in", "s", ":", "\n", "        ", "t", "=", "np", ".", "random", ".", "randint", "(", "l", ",", "r", ")", "\n", "", "return", "t", "\n", "\n"]], "home.repos.pwc.inspect_result.ReyonRen_MFGAN.None.dis_sampler.sample_function": [[12, 45], ["numpy.random.seed", "numpy.random.randint", "numpy.zeros", "reversed", "range", "result_queue.put", "len", "numpy.random.randint", "one_batch.append", "zip", "dis_sampler.sample_function.sample"], "function", ["None"], ["", "def", "sample_function", "(", "user_train", ",", "usernum", ",", "itemnum", ",", "batch_size", ",", "maxlen", ",", "result_queue", ",", "SEED", ")", ":", "\n", "    ", "def", "sample", "(", ")", ":", "\n", "\n", "        ", "user", "=", "np", ".", "random", ".", "randint", "(", "1", ",", "usernum", "+", "1", ")", "\n", "while", "len", "(", "user_train", "[", "user", "]", ")", "<=", "1", ":", "user", "=", "np", ".", "random", ".", "randint", "(", "1", ",", "usernum", "+", "1", ")", "\n", "\n", "# seq = np.zeros([maxlen], dtype=np.int32)", "\n", "pos", "=", "np", ".", "zeros", "(", "[", "maxlen", "]", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "# neg = np.zeros([maxlen], dtype=np.int32)", "\n", "# nxt = user_train[user][-1]", "\n", "idx", "=", "maxlen", "-", "1", "\n", "\n", "# ts = set(user_train[user])", "\n", "for", "i", "in", "reversed", "(", "user_train", "[", "user", "]", "[", ":", "]", ")", ":", "\n", "# seq[idx] = i # \u9664\u53bb\u6700\u540e\u4e00\u4f4d", "\n", "            ", "pos", "[", "idx", "]", "=", "i", "#\u9664\u53bb\u7b2c\u4e00\u4f4d", "\n", "# if nxt != 0: neg[idx] = random_neq(1, itemnum + 1, ts)", "\n", "# nxt = i", "\n", "idx", "-=", "1", "\n", "if", "idx", "==", "-", "1", ":", "\n", "                ", "break", "\n", "# if idx > 0:", "\n", "#     pos[idx] = nxt", "\n", "\n", "", "", "return", "user", ",", "pos", "\n", "\n", "", "np", ".", "random", ".", "seed", "(", "SEED", ")", "\n", "while", "True", ":", "\n", "        ", "one_batch", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "batch_size", ")", ":", "\n", "            ", "one_batch", ".", "append", "(", "sample", "(", ")", ")", "\n", "\n", "", "result_queue", ".", "put", "(", "zip", "(", "*", "one_batch", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ReyonRen_MFGAN.None.gen_model.Gen.__init__": [[8, 127], ["tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.expand_dims", "tensorflow.placeholder", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.reshape", "tensorflow.placeholder", "tensorflow.nn.embedding_lookup", "tensorflow.matmul", "tensorflow.reshape", "tensorflow.matmul", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.reshape", "tensorflow.get_collection", "sum", "tensorflow.Variable", "tensorflow.train.AdamOptimizer", "gen_model.Gen.pre_optimizer.minimize", "tensorflow.get_collection", "sum", "tensorflow.Variable", "tensorflow.train.AdamOptimizer", "gen_model.Gen.gen_optimizer.minimize", "tensorflow.summary.merge_all", "tensorflow.to_float", "tensorflow.variable_scope", "gen_modules.embedding", "gen_modules.embedding", "tensorflow.layers.dropout", "range", "gen_modules.normalize", "tensorflow.transpose", "tensorflow.transpose", "tensorflow.to_float", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.not_equal", "tensorflow.tile", "tensorflow.not_equal", "tensorflow.expand_dims", "tensorflow.convert_to_tensor", "tensorflow.variable_scope", "gen_modules.feedforward", "gen_modules.multihead_attention", "gen_modules.feedforward2", "tensorflow.shape", "tensorflow.range", "gen_modules.normalize", "gen_modules.normalize", "tensorflow.shape", "tensorflow.shape", "tensorflow.shape", "tensorflow.shape", "tensorflow.log", "tensorflow.log", "tensorflow.shape", "gen_modules.normalize", "tensorflow.log", "tensorflow.shape", "tensorflow.log", "tensorflow.sigmoid", "tensorflow.sigmoid", "tensorflow.sigmoid", "tensorflow.sigmoid"], "methods", ["home.repos.pwc.inspect_result.ReyonRen_MFGAN.None.gen_modules.embedding", "home.repos.pwc.inspect_result.ReyonRen_MFGAN.None.gen_modules.embedding", "home.repos.pwc.inspect_result.ReyonRen_MFGAN.None.gen_modules.normalize", "home.repos.pwc.inspect_result.ReyonRen_MFGAN.None.gen_modules.feedforward", "home.repos.pwc.inspect_result.ReyonRen_MFGAN.None.gen_modules.multihead_attention", "home.repos.pwc.inspect_result.ReyonRen_MFGAN.None.gen_modules.feedforward2", "home.repos.pwc.inspect_result.ReyonRen_MFGAN.None.gen_modules.normalize", "home.repos.pwc.inspect_result.ReyonRen_MFGAN.None.gen_modules.normalize", "home.repos.pwc.inspect_result.ReyonRen_MFGAN.None.gen_modules.normalize"], ["    ", "def", "__init__", "(", "self", ",", "usernum", ",", "itemnum", ",", "args", ",", "reuse", "=", "None", ")", ":", "\n", "        ", "self", ".", "is_training", "=", "tf", ".", "placeholder", "(", "tf", ".", "bool", ",", "shape", "=", "(", ")", ")", "\n", "self", ".", "u", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "(", "None", ")", ")", "\n", "self", ".", "input_seq", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "(", "None", ",", "args", ".", "maxlen", ")", ")", "\n", "self", ".", "pos", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "(", "None", ",", "args", ".", "maxlen", ")", ")", "\n", "self", ".", "neg", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "(", "None", ",", "args", ".", "maxlen", ")", ")", "\n", "pos", "=", "self", ".", "pos", "\n", "neg", "=", "self", ".", "neg", "\n", "mask", "=", "tf", ".", "expand_dims", "(", "tf", ".", "to_float", "(", "tf", ".", "not_equal", "(", "self", ".", "input_seq", ",", "0", ")", ")", ",", "-", "1", ")", "\n", "\n", "with", "tf", ".", "variable_scope", "(", "\"SA_gen\"", ",", "reuse", "=", "reuse", ")", ":", "\n", "# sequence embedding, item embedding table", "\n", "            ", "self", ".", "seq", ",", "self", ".", "item_emb_table", "=", "embedding", "(", "self", ".", "input_seq", ",", "\n", "vocab_size", "=", "itemnum", "+", "1", ",", "\n", "num_units", "=", "args", ".", "hidden_units", ",", "\n", "zero_pad", "=", "True", ",", "\n", "scale", "=", "True", ",", "\n", "l2_reg", "=", "args", ".", "l2_emb", ",", "\n", "scope", "=", "\"input_embeddings_gen\"", ",", "\n", "with_t", "=", "True", ",", "\n", "reuse", "=", "reuse", "\n", ")", "\n", "\n", "# Positional Encoding", "\n", "t", ",", "pos_emb_table", "=", "embedding", "(", "\n", "tf", ".", "tile", "(", "tf", ".", "expand_dims", "(", "tf", ".", "range", "(", "tf", ".", "shape", "(", "self", ".", "input_seq", ")", "[", "1", "]", ")", ",", "0", ")", ",", "[", "tf", ".", "shape", "(", "self", ".", "input_seq", ")", "[", "0", "]", ",", "1", "]", ")", ",", "\n", "vocab_size", "=", "args", ".", "maxlen", ",", "\n", "num_units", "=", "args", ".", "hidden_units", ",", "\n", "zero_pad", "=", "False", ",", "\n", "scale", "=", "False", ",", "\n", "l2_reg", "=", "args", ".", "l2_emb", ",", "\n", "scope", "=", "\"dec_pos_gen\"", ",", "\n", "reuse", "=", "reuse", ",", "\n", "with_t", "=", "True", "\n", ")", "\n", "self", ".", "seq", "+=", "t", "\n", "\n", "# Dropout", "\n", "self", ".", "seq", "=", "tf", ".", "layers", ".", "dropout", "(", "self", ".", "seq", ",", "\n", "rate", "=", "args", ".", "gen_dropout_rate", ",", "\n", "training", "=", "tf", ".", "convert_to_tensor", "(", "self", ".", "is_training", ")", ")", "\n", "self", ".", "seq", "*=", "mask", "\n", "\n", "# Build blocks", "\n", "for", "i", "in", "range", "(", "args", ".", "gen_num_blocks", ")", ":", "\n", "                ", "with", "tf", ".", "variable_scope", "(", "\"num_blocks_gen_%d\"", "%", "i", ")", ":", "\n", "# Feed-forward1", "\n", "                    ", "self", ".", "seq", "=", "feedforward", "(", "normalize", "(", "self", ".", "seq", ")", ",", "num_units", "=", "[", "args", ".", "hidden_units", ",", "args", ".", "hidden_units", "]", ",", "\n", "dropout_rate", "=", "args", ".", "gen_dropout_rate", ",", "is_training", "=", "self", ".", "is_training", ")", "\n", "# Self-attention", "\n", "self", ".", "seq", "=", "multihead_attention", "(", "queries", "=", "normalize", "(", "self", ".", "seq", ")", ",", "\n", "keys", "=", "self", ".", "seq", ",", "\n", "num_units", "=", "args", ".", "hidden_units", ",", "\n", "num_heads", "=", "args", ".", "gen_num_heads", ",", "\n", "dropout_rate", "=", "args", ".", "gen_dropout_rate", ",", "\n", "is_training", "=", "self", ".", "is_training", ",", "\n", "causality", "=", "True", ",", "\n", "scope", "=", "\"self_attention_gen\"", ")", "\n", "\n", "# Feed forward2", "\n", "self", ".", "seq", "=", "feedforward2", "(", "normalize", "(", "self", ".", "seq", ")", ",", "num_units", "=", "[", "args", ".", "hidden_units", ",", "args", ".", "hidden_units", "]", ",", "\n", "dropout_rate", "=", "args", ".", "gen_dropout_rate", ",", "is_training", "=", "self", ".", "is_training", ")", "\n", "self", ".", "seq", "*=", "mask", "\n", "\n", "", "", "self", ".", "seq", "=", "normalize", "(", "self", ".", "seq", ")", "\n", "\n", "", "self", ".", "rewards", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "(", "args", ".", "gen_batch_size", "*", "args", ".", "maxlen", ")", ")", "\n", "\n", "pos", "=", "tf", ".", "reshape", "(", "pos", ",", "[", "tf", ".", "shape", "(", "self", ".", "input_seq", ")", "[", "0", "]", "*", "args", ".", "maxlen", "]", ")", "\n", "neg", "=", "tf", ".", "reshape", "(", "neg", ",", "[", "tf", ".", "shape", "(", "self", ".", "input_seq", ")", "[", "0", "]", "*", "args", ".", "maxlen", "]", ")", "\n", "pos_emb", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "item_emb_table", ",", "pos", ")", "\n", "neg_emb", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "item_emb_table", ",", "neg", ")", "\n", "seq_emb", "=", "tf", ".", "reshape", "(", "self", ".", "seq", ",", "[", "tf", ".", "shape", "(", "self", ".", "input_seq", ")", "[", "0", "]", "*", "args", ".", "maxlen", ",", "args", ".", "hidden_units", "]", ")", "\n", "\n", "self", ".", "test_item", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "(", "101", ")", ")", "\n", "test_item_emb", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "item_emb_table", ",", "self", ".", "test_item", ")", "\n", "self", ".", "test_logits", "=", "tf", ".", "matmul", "(", "seq_emb", ",", "tf", ".", "transpose", "(", "test_item_emb", ")", ")", "\n", "self", ".", "test_logits", "=", "tf", ".", "reshape", "(", "self", ".", "test_logits", ",", "[", "tf", ".", "shape", "(", "self", ".", "input_seq", ")", "[", "0", "]", ",", "args", ".", "maxlen", ",", "101", "]", ")", "\n", "self", ".", "test_logits", "=", "self", ".", "test_logits", "[", ":", ",", "-", "1", ",", ":", "]", "\n", "\n", "# self.position = tf.placeholder(tf.int32, shape=None)", "\n", "# self.seq_emb_i = self.seq[:, self.position, :]", "\n", "# self.seq_emb_i = tf.reshape(self.seq_emb_i, [tf.shape(self.input_seq)[0], args.hidden_units])", "\n", "# self.item_logits = tf.matmul(seq_emb, tf.transpose(self.item_emb_table))", "\n", "# self.item_logits = tf.reshape(self.item_logits, [tf.shape(self.input_seq)[0], args.maxlen, tf.shape(self.item_emb_table)[0]])", "\n", "# self.item_logits = self.item_logits[:, -1, :]", "\n", "\n", "self", ".", "seq_emb_i", "=", "self", ".", "seq", "[", ":", ",", "-", "1", ",", ":", "]", "\n", "self", ".", "last_item_logits", "=", "tf", ".", "matmul", "(", "self", ".", "seq_emb_i", ",", "tf", ".", "transpose", "(", "self", ".", "item_emb_table", ")", ")", "\n", "\n", "# prediction layer", "\n", "self", ".", "pos_logits", "=", "tf", ".", "reduce_sum", "(", "pos_emb", "*", "seq_emb", ",", "-", "1", ")", "\n", "self", ".", "neg_logits", "=", "tf", ".", "reduce_sum", "(", "neg_emb", "*", "seq_emb", ",", "-", "1", ")", "\n", "\n", "# ignore padding items (0)", "\n", "istarget", "=", "tf", ".", "reshape", "(", "tf", ".", "to_float", "(", "tf", ".", "not_equal", "(", "pos", ",", "0", ")", ")", ",", "[", "tf", ".", "shape", "(", "self", ".", "input_seq", ")", "[", "0", "]", "*", "args", ".", "maxlen", "]", ")", "\n", "self", ".", "pre_loss", "=", "tf", ".", "reduce_sum", "(", "\n", "-", "tf", ".", "log", "(", "tf", ".", "sigmoid", "(", "self", ".", "pos_logits", ")", "+", "1e-24", ")", "*", "istarget", "-", "\n", "tf", ".", "log", "(", "1", "-", "tf", ".", "sigmoid", "(", "self", ".", "neg_logits", ")", "+", "1e-24", ")", "*", "istarget", "\n", ")", "/", "tf", ".", "reduce_sum", "(", "istarget", ")", "\n", "reg_losses", "=", "tf", ".", "get_collection", "(", "tf", ".", "GraphKeys", ".", "REGULARIZATION_LOSSES", ")", "\n", "self", ".", "pre_loss", "+=", "sum", "(", "reg_losses", ")", "\n", "\n", "self", ".", "pre_global_step", "=", "tf", ".", "Variable", "(", "0", ",", "name", "=", "'global_step_gen'", ",", "trainable", "=", "False", ")", "\n", "self", ".", "pre_optimizer", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "learning_rate", "=", "args", ".", "gen_lr", ",", "beta2", "=", "0.98", ")", "\n", "self", ".", "pre_train_op", "=", "self", ".", "pre_optimizer", ".", "minimize", "(", "self", ".", "pre_loss", ",", "global_step", "=", "self", ".", "pre_global_step", ")", "\n", "\n", "self", ".", "gen_loss", "=", "tf", ".", "reduce_sum", "(", "\n", "(", "-", "tf", ".", "log", "(", "tf", ".", "sigmoid", "(", "self", ".", "pos_logits", ")", "+", "1e-24", ")", "*", "istarget", "*", "self", ".", "rewards", "-", "\n", "tf", ".", "log", "(", "1", "-", "tf", ".", "sigmoid", "(", "self", ".", "neg_logits", ")", "+", "1e-24", ")", "*", "istarget", ")", "\n", ")", "/", "tf", ".", "reduce_sum", "(", "istarget", ")", "\n", "reg_losses", "=", "tf", ".", "get_collection", "(", "tf", ".", "GraphKeys", ".", "REGULARIZATION_LOSSES", ")", "\n", "self", ".", "gen_loss", "+=", "sum", "(", "reg_losses", ")", "\n", "\n", "self", ".", "gen_global_step", "=", "tf", ".", "Variable", "(", "0", ",", "name", "=", "'global_step_gen'", ",", "trainable", "=", "False", ")", "\n", "self", ".", "gen_optimizer", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "learning_rate", "=", "args", ".", "gen_lr", ",", "beta2", "=", "0.98", ")", "\n", "self", ".", "gen_train_op", "=", "self", ".", "gen_optimizer", ".", "minimize", "(", "self", ".", "gen_loss", ",", "global_step", "=", "self", ".", "gen_global_step", ")", "\n", "\n", "self", ".", "merged", "=", "tf", ".", "summary", ".", "merge_all", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ReyonRen_MFGAN.None.gen_model.Gen.predict": [[128, 131], ["sess.run"], "methods", ["None"], ["", "def", "predict", "(", "self", ",", "sess", ",", "u", ",", "seq", ",", "item_idx", ")", ":", "\n", "        ", "return", "sess", ".", "run", "(", "self", ".", "test_logits", ",", "\n", "{", "self", ".", "u", ":", "u", ",", "self", ".", "input_seq", ":", "seq", ",", "self", ".", "test_item", ":", "item_idx", ",", "self", ".", "is_training", ":", "False", "}", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ReyonRen_MFGAN.None.gen_model.Gen.generate_position_k": [[132, 151], ["print", "numpy.zeros", "tqdm.tqdm.tqdm", "range", "sess.run", "sess.run.argsort", "range", "len", "range"], "methods", ["None"], ["", "def", "generate_position_k", "(", "self", ",", "sess", ",", "u", ",", "seq", ",", "k", ",", "args", ",", "batch", "=", "6040", ")", ":", "\n", "        ", "print", "(", "\"sampling\"", ")", "\n", "sampled_item", "=", "np", ".", "zeros", "(", "[", "len", "(", "u", ")", ",", "args", ".", "maxlen", ",", "k", "]", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "for", "i", "in", "tqdm", "(", "range", "(", "batch", ")", ",", "total", "=", "batch", ",", "ncols", "=", "70", ",", "leave", "=", "False", ",", "unit", "=", "'u'", ")", ":", "\n", "            ", "logit", "=", "sess", ".", "run", "(", "self", ".", "item_logits", ",", "\n", "{", "self", ".", "u", ":", "u", ",", "self", ".", "input_seq", ":", "[", "seq", "[", "i", "]", "]", ",", "self", ".", "is_training", ":", "False", "}", ")", "\n", "logit", "=", "-", "logit", "\n", "index", "=", "logit", ".", "argsort", "(", ")", "\n", "for", "position", "in", "range", "(", "args", ".", "maxlen", ")", ":", "\n", "                ", "if", "seq", "[", "i", "]", "[", "args", ".", "maxlen", "-", "1", "-", "position", "]", "==", "0", ":", "\n", "                    ", "break", "\n", "", "cnt", "=", "0", "\n", "for", "j", "in", "range", "(", "k", ")", ":", "\n", "                    ", "if", "index", "[", "args", ".", "maxlen", "-", "1", "-", "position", "]", "[", "cnt", "]", "==", "seq", "[", "i", "]", "[", "args", ".", "maxlen", "-", "1", "-", "position", "]", ":", "\n", "                        ", "cnt", "+=", "1", "\n", "", "sampled_item", "[", "i", "]", "[", "args", ".", "maxlen", "-", "1", "-", "position", "]", "[", "j", "]", "=", "index", "[", "args", ".", "maxlen", "-", "1", "-", "position", "]", "[", "cnt", "]", "\n", "cnt", "+=", "1", "\n", "\n", "", "", "", "return", "sampled_item", "# user * maxlen * k", "\n", "\n"]], "home.repos.pwc.inspect_result.ReyonRen_MFGAN.None.gen_model.Gen.generate_k": [[152, 183], ["int", "numpy.zeros", "tqdm.tqdm.tqdm", "sess.run", "range", "range", "sess.run", "sess.run.argsort", "range", "len", "range", "len", "len", "len", "range", "len"], "methods", ["None"], ["", "def", "generate_k", "(", "self", ",", "sess", ",", "u", ",", "seq", ",", "pos", ",", "k", ")", ":", "\n", "        ", "batch", "=", "10", "\n", "interval", "=", "int", "(", "len", "(", "seq", ")", "/", "batch", ")", "\n", "begin", "=", "0", "\n", "sampled_item", "=", "np", ".", "zeros", "(", "[", "len", "(", "u", ")", ",", "k", "]", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "global_pos", "=", "0", "\n", "for", "i", "in", "tqdm", "(", "range", "(", "batch", "-", "1", ")", ",", "total", "=", "batch", "-", "1", ",", "ncols", "=", "70", ",", "leave", "=", "False", ",", "unit", "=", "'u'", ")", ":", "\n", "            ", "logit", "=", "sess", ".", "run", "(", "self", ".", "last_item_logits", ",", "\n", "{", "self", ".", "u", ":", "u", ",", "self", ".", "input_seq", ":", "seq", "[", "begin", ":", "begin", "+", "interval", "]", ",", "self", ".", "is_training", ":", "False", "}", ")", "\n", "begin", "+=", "interval", "\n", "logit", "=", "-", "logit", "\n", "index", "=", "logit", ".", "argsort", "(", ")", "\n", "for", "line", "in", "range", "(", "len", "(", "logit", ")", ")", ":", "\n", "                ", "cnt", "=", "0", "\n", "for", "rank", "in", "range", "(", "k", ")", ":", "\n", "                    ", "if", "index", "[", "line", "]", "[", "cnt", "]", "==", "pos", "[", "global_pos", "]", ":", "cnt", "+=", "1", "\n", "sampled_item", "[", "global_pos", "]", "[", "rank", "]", "=", "index", "[", "line", "]", "[", "cnt", "]", "\n", "cnt", "+=", "1", "\n", "", "global_pos", "+=", "1", "\n", "\n", "", "", "logit", "=", "sess", ".", "run", "(", "self", ".", "last_item_logits", ",", "\n", "{", "self", ".", "u", ":", "u", ",", "self", ".", "input_seq", ":", "seq", "[", "begin", ":", "len", "(", "seq", ")", "]", ",", "self", ".", "is_training", ":", "False", "}", ")", "\n", "for", "line", "in", "range", "(", "len", "(", "logit", ")", ")", ":", "\n", "            ", "cnt", "=", "0", "\n", "for", "rank", "in", "range", "(", "k", ")", ":", "\n", "                ", "if", "index", "[", "line", "]", "[", "cnt", "]", "==", "pos", "[", "global_pos", "]", ":", "cnt", "+=", "1", "\n", "sampled_item", "[", "global_pos", "]", "[", "rank", "]", "=", "index", "[", "line", "]", "[", "cnt", "]", "\n", "cnt", "+=", "1", "\n", "", "global_pos", "+=", "1", "\n", "\n", "", "return", "sampled_item", "\n", "\n"]], "home.repos.pwc.inspect_result.ReyonRen_MFGAN.None.gen_model.Gen.generate_last_item": [[184, 207], ["int", "numpy.zeros", "range", "sess.run", "sess.run.argsort", "range", "sess.run", "sess.run.argsort", "range", "len", "len", "len", "len", "len"], "methods", ["None"], ["", "def", "generate_last_item", "(", "self", ",", "sess", ",", "u", ",", "seq", ")", ":", "\n", "        ", "batch", "=", "1", "\n", "interval", "=", "int", "(", "len", "(", "seq", ")", "/", "batch", ")", "\n", "begin", "=", "0", "\n", "global_pos", "=", "0", "\n", "top_item", "=", "np", ".", "zeros", "(", "[", "len", "(", "u", ")", "]", ")", "\n", "for", "i", "in", "range", "(", "batch", "-", "1", ")", ":", "\n", "            ", "logit", "=", "sess", ".", "run", "(", "self", ".", "last_item_logits", ",", "\n", "{", "self", ".", "u", ":", "u", ",", "self", ".", "input_seq", ":", "seq", "[", "begin", ":", "begin", "+", "interval", "]", ",", "self", ".", "is_training", ":", "False", "}", ")", "\n", "begin", "+=", "interval", "\n", "logit", "=", "-", "logit", "\n", "index", "=", "logit", ".", "argsort", "(", ")", "\n", "for", "line", "in", "range", "(", "len", "(", "logit", ")", ")", ":", "\n", "                ", "top_item", "[", "global_pos", "]", "=", "index", "[", "line", "]", "[", "0", "]", "\n", "global_pos", "+=", "1", "\n", "", "", "logit", "=", "sess", ".", "run", "(", "self", ".", "last_item_logits", ",", "\n", "{", "self", ".", "u", ":", "u", ",", "self", ".", "input_seq", ":", "seq", "[", "begin", ":", "len", "(", "seq", ")", "]", ",", "self", ".", "is_training", ":", "False", "}", ")", "\n", "logit", "=", "-", "logit", "\n", "index", "=", "logit", ".", "argsort", "(", ")", "\n", "for", "line", "in", "range", "(", "len", "(", "logit", ")", ")", ":", "\n", "            ", "top_item", "[", "global_pos", "]", "=", "index", "[", "line", "]", "[", "0", "]", "\n", "global_pos", "+=", "1", "\n", "", "return", "top_item", "\n", "", "", ""]]}