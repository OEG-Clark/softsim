{"home.repos.pwc.inspect_result.jon--lee_aor.tools.statistics.F2": [[7, 29], ["range", "statistics.stats", "statistics.collect_traj", "numpy.array", "numpy.array", "numpy.array", "len", "sklearn.metrics.hinge_loss", "print", "print", "losses.append", "numpy.square", "numpy.mean", "pi2.intended_action", "pi2.decision_function", "sup.intended_action", "numpy.linalg.norm", "str", "str"], "function", ["home.repos.pwc.inspect_result.jon--lee_aor.tools.statistics.stats", "home.repos.pwc.inspect_result.jon--lee_aor.tools.statistics.collect_traj", "home.repos.pwc.inspect_result.jon--lee_aor.expert.tf_util.mean", "home.repos.pwc.inspect_result.jon--lee_aor.tools.learner.Learner.intended_action", "home.repos.pwc.inspect_result.jon--lee_aor.tools.learner.Learner.decision_function", "home.repos.pwc.inspect_result.jon--lee_aor.tools.learner.Learner.intended_action"], ["def", "F2", "(", "env", ",", "pi1", ",", "pi2", ",", "sup", ",", "T", ",", "num_samples", "=", "1", ")", ":", "\n", "    ", "losses", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_samples", ")", ":", "\n", "# collect trajectory with states visited and actions taken by agent", "\n", "        ", "tmp_states", ",", "_", ",", "_", ",", "_", "=", "collect_traj", "(", "env", ",", "pi1", ",", "T", ")", "\n", "tmp_actions", "=", "np", ".", "array", "(", "[", "pi2", ".", "intended_action", "(", "s", ")", "for", "s", "in", "tmp_states", "]", ")", "\n", "tmp_scores", "=", "np", ".", "array", "(", "[", "pi2", ".", "decision_function", "(", "s", ")", "for", "s", "in", "tmp_states", "]", ")", "\n", "sup_actions", "=", "np", ".", "array", "(", "[", "sup", ".", "intended_action", "(", "s", ")", "for", "s", "in", "tmp_states", "]", ")", "\n", "n", "=", "len", "(", "sup_actions", ")", "\n", "\n", "\n", "hinge", "=", "hinge_loss", "(", "sup_actions", ",", "tmp_scores", ")", "\n", "penalty", "=", "pi2", ".", "est", ".", "alpha", "*", ".5", "*", "np", ".", "square", "(", "np", ".", "linalg", ".", "norm", "(", "pi2", ".", "est", ".", "coef_", ")", ")", "\n", "print", "(", "\"hinge: \"", "+", "str", "(", "hinge", ")", ")", "\n", "print", "(", "\"penalty: \"", "+", "str", "(", "penalty", ")", ")", "\n", "errors", "=", "hinge", "/", "n", "+", "penalty", "\n", "\n", "# compute the mean error on that trajectory (may not be T samples since game ends early on failures)", "\n", "losses", ".", "append", "(", "np", ".", "mean", "(", "errors", ")", ")", "\n", "\n", "# compute the mean and sem on averaged losses.", "\n", "", "return", "stats", "(", "losses", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jon--lee_aor.tools.statistics.F": [[30, 43], ["range", "statistics.stats", "statistics.collect_traj", "numpy.array", "numpy.array", "losses.append", "numpy.mean", "numpy.mean", "pi2.intended_action", "sup.intended_action"], "function", ["home.repos.pwc.inspect_result.jon--lee_aor.tools.statistics.stats", "home.repos.pwc.inspect_result.jon--lee_aor.tools.statistics.collect_traj", "home.repos.pwc.inspect_result.jon--lee_aor.expert.tf_util.mean", "home.repos.pwc.inspect_result.jon--lee_aor.expert.tf_util.mean", "home.repos.pwc.inspect_result.jon--lee_aor.tools.learner.Learner.intended_action", "home.repos.pwc.inspect_result.jon--lee_aor.tools.learner.Learner.intended_action"], ["", "def", "F", "(", "env", ",", "pi1", ",", "pi2", ",", "sup", ",", "T", ",", "num_samples", "=", "1", ")", ":", "\n", "    ", "losses", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_samples", ")", ":", "\n", "# collect trajectory with states visited and actions taken by agent", "\n", "        ", "tmp_states", ",", "_", ",", "_", ",", "_", "=", "collect_traj", "(", "env", ",", "pi1", ",", "T", ")", "\n", "tmp_actions", "=", "np", ".", "array", "(", "[", "pi2", ".", "intended_action", "(", "s", ")", "for", "s", "in", "tmp_states", "]", ")", "\n", "sup_actions", "=", "np", ".", "array", "(", "[", "sup", ".", "intended_action", "(", "s", ")", "for", "s", "in", "tmp_states", "]", ")", "\n", "errors", "=", "1.0", "-", "np", ".", "mean", "(", "sup_actions", "==", "tmp_actions", ")", "\n", "# compute the mean error on that trajectory (may not be T samples since game ends early on failures)", "\n", "losses", ".", "append", "(", "np", ".", "mean", "(", "errors", ")", ")", "\n", "\n", "# compute the mean and sem on averaged losses.", "\n", "", "return", "stats", "(", "losses", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jon--lee_aor.tools.statistics.eval_agent_statistics_discrete": [[44, 60], ["range", "statistics.stats", "statistics.collect_traj", "numpy.array", "losses.append", "numpy.mean", "numpy.mean", "sup.intended_action"], "function", ["home.repos.pwc.inspect_result.jon--lee_aor.tools.statistics.stats", "home.repos.pwc.inspect_result.jon--lee_aor.tools.statistics.collect_traj", "home.repos.pwc.inspect_result.jon--lee_aor.expert.tf_util.mean", "home.repos.pwc.inspect_result.jon--lee_aor.expert.tf_util.mean", "home.repos.pwc.inspect_result.jon--lee_aor.tools.learner.Learner.intended_action"], ["", "def", "eval_agent_statistics_discrete", "(", "env", ",", "lnr", ",", "sup", ",", "T", ",", "num_samples", "=", "1", ")", ":", "\n", "    ", "\"\"\"\n        evaluate loss in the given environment along the agent's distribution\n        for T timesteps on num_samples\n    \"\"\"", "\n", "losses", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_samples", ")", ":", "\n", "# collect trajectory with states visited and actions taken by agent", "\n", "        ", "tmp_states", ",", "_", ",", "tmp_actions", ",", "_", "=", "collect_traj", "(", "env", ",", "lnr", ",", "T", ")", "\n", "sup_actions", "=", "np", ".", "array", "(", "[", "sup", ".", "intended_action", "(", "s", ")", "for", "s", "in", "tmp_states", "]", ")", "\n", "errors", "=", "1.0", "-", "np", ".", "mean", "(", "sup_actions", "==", "tmp_actions", ")", "\n", "# compute the mean error on that trajectory (may not be T samples since game ends early on failures)", "\n", "losses", ".", "append", "(", "np", ".", "mean", "(", "errors", ")", ")", "\n", "\n", "# compute the mean and sem on averaged losses.", "\n", "", "return", "stats", "(", "losses", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jon--lee_aor.tools.statistics.stats": [[61, 70], ["len", "scipy.stats.sem", "numpy.mean"], "function", ["home.repos.pwc.inspect_result.jon--lee_aor.expert.tf_util.mean"], ["", "def", "stats", "(", "losses", ")", ":", "\n", "    ", "if", "len", "(", "losses", ")", "==", "1", ":", "sem", "=", "0.0", "\n", "else", ":", "sem", "=", "scipy", ".", "stats", ".", "sem", "(", "losses", ")", "\n", "\n", "d", "=", "{", "\n", "'mean'", ":", "np", ".", "mean", "(", "losses", ")", ",", "\n", "'sem'", ":", "sem", "\n", "}", "\n", "return", "d", "\n", "\n"]], "home.repos.pwc.inspect_result.jon--lee_aor.tools.statistics.ste": [[71, 75], ["scipy.stats.sem", "numpy.zeros"], "function", ["None"], ["", "def", "ste", "(", "trial_rewards", ")", ":", "\n", "    ", "if", "trial_rewards", ".", "shape", "[", "0", "]", "==", "1", ":", "\n", "        ", "return", "np", ".", "zeros", "(", "trial_rewards", ".", "shape", "[", "1", "]", ")", "\n", "", "return", "scipy", ".", "stats", ".", "sem", "(", "trial_rewards", ",", "axis", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jon--lee_aor.tools.statistics.mean": [[76, 78], ["numpy.mean"], "function", ["home.repos.pwc.inspect_result.jon--lee_aor.expert.tf_util.mean"], ["", "def", "mean", "(", "trial_rewards", ")", ":", "\n", "    ", "return", "np", ".", "mean", "(", "trial_rewards", ",", "axis", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jon--lee_aor.tools.statistics.mean_sem": [[80, 84], ["statistics.ste", "statistics.mean"], "function", ["home.repos.pwc.inspect_result.jon--lee_aor.tools.statistics.ste", "home.repos.pwc.inspect_result.jon--lee_aor.expert.tf_util.mean"], ["", "def", "mean_sem", "(", "trial_data", ")", ":", "\n", "    ", "s", "=", "ste", "(", "trial_data", ")", "\n", "m", "=", "mean", "(", "trial_data", ")", "\n", "return", "m", ",", "s", "\n", "\n"]], "home.repos.pwc.inspect_result.jon--lee_aor.tools.statistics.evaluate_lnr_discrete": [[86, 89], ["statistics.eval_agent_statistics_discrete"], "function", ["home.repos.pwc.inspect_result.jon--lee_aor.tools.statistics.eval_agent_statistics_discrete"], ["", "def", "evaluate_lnr_discrete", "(", "env", ",", "lnr", ",", "sup", ",", "T", ")", ":", "\n", "    ", "stats", "=", "eval_agent_statistics_discrete", "(", "env", ",", "lnr", ",", "sup", ",", "T", ",", "1", ")", "\n", "return", "stats", "[", "'mean'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.jon--lee_aor.tools.statistics.collect_traj": [[91, 126], ["env.reset", "range", "agent.intended_action", "agent.sample_action", "env.step", "states.append", "intended_actions.append", "taken_actions.append", "env.render"], "function", ["home.repos.pwc.inspect_result.jon--lee_aor.expert.tf_util.reset", "home.repos.pwc.inspect_result.jon--lee_aor.tools.learner.Learner.intended_action", "home.repos.pwc.inspect_result.jon--lee_aor.tools.learner.Learner.sample_action"], ["", "def", "collect_traj", "(", "env", ",", "agent", ",", "T", ",", "visualize", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n        agent must have methods: sample_action and intended_action\n        Run trajectory on sampled actions\n        record states, sampled actions, intended actions and reward\n    \"\"\"", "\n", "states", "=", "[", "]", "\n", "intended_actions", "=", "[", "]", "\n", "taken_actions", "=", "[", "]", "\n", "\n", "s", "=", "env", ".", "reset", "(", ")", "\n", "\n", "reward", "=", "0.0", "\n", "\n", "for", "t", "in", "range", "(", "T", ")", ":", "\n", "\n", "        ", "a_intended", "=", "agent", ".", "intended_action", "(", "s", ")", "\n", "a", "=", "agent", ".", "sample_action", "(", "s", ")", "\n", "next_s", ",", "r", ",", "done", ",", "_", "=", "env", ".", "step", "(", "a", ")", "\n", "reward", "+=", "r", "\n", "\n", "states", ".", "append", "(", "s", ")", "\n", "intended_actions", ".", "append", "(", "a_intended", ")", "\n", "taken_actions", ".", "append", "(", "a", ")", "\n", "\n", "s", "=", "next_s", "\n", "\n", "if", "visualize", ":", "\n", "            ", "env", ".", "render", "(", ")", "\n", "\n", "", "if", "done", ":", "\n", "            ", "break", "\n", "\n", "\n", "", "", "return", "states", ",", "intended_actions", ",", "taken_actions", ",", "reward", "\n", "", ""]], "home.repos.pwc.inspect_result.jon--lee_aor.tools.svm2.evaluate": [[14, 22], ["numpy.mean", "numpy.square", "X.dot", "numpy.linalg.norm"], "function", ["home.repos.pwc.inspect_result.jon--lee_aor.expert.tf_util.mean"], ["def", "evaluate", "(", "w", ",", "X", ",", "Y", ")", ":", "\n", "\n", "    ", "scores", "=", "1", "-", "X", ".", "dot", "(", "w", ")", "*", "Y", "\n", "scores", "[", "scores", "<", "0", "]", "=", "0.0", "\n", "mean_hinge", "=", "np", ".", "mean", "(", "scores", ")", "\n", "\n", "reg", "=", ".5", "*", "np", ".", "square", "(", "np", ".", "linalg", ".", "norm", "(", "w", ")", ")", "\n", "return", "mean_hinge", "+", "reg", "\n", "\n"]], "home.repos.pwc.inspect_result.jon--lee_aor.tools.svm2.svm_sgd": [[25, 42], ["numpy.zeros", "range", "len", "enumerate", "history.append", "svm2.evaluate", "numpy.dot"], "function", ["home.repos.pwc.inspect_result.jon--lee_aor.tools.svm2.evaluate"], ["", "def", "svm_sgd", "(", "X", ",", "Y", ")", ":", "\n", "\n", "    ", "w", "=", "np", ".", "zeros", "(", "len", "(", "X", "[", "0", "]", ")", ")", "\n", "eta", "=", "1", "\n", "epochs", "=", "100000", "\n", "history", "=", "[", "]", "\n", "\n", "for", "epoch", "in", "range", "(", "1", ",", "epochs", ")", ":", "\n", "        ", "for", "i", ",", "x", "in", "enumerate", "(", "X", ")", ":", "\n", "            ", "if", "(", "Y", "[", "i", "]", "*", "np", ".", "dot", "(", "X", "[", "i", "]", ",", "w", ")", ")", "<", "1", ":", "\n", "                ", "w", "=", "w", "+", "eta", "/", "epoch", "*", "(", "(", "X", "[", "i", "]", "*", "Y", "[", "i", "]", ")", "+", "(", "-", "2", "*", "(", "1", "/", "epoch", ")", "*", "w", ")", ")", "\n", "", "else", ":", "\n", "                ", "w", "=", "w", "+", "eta", "/", "epoch", "*", "(", "-", "2", "*", "(", "1", "/", "epoch", ")", "*", "w", ")", "\n", "\n", "", "", "history", ".", "append", "(", "evaluate", "(", "w", ",", "X", ",", "Y", ")", ")", "\n", "\n", "", "return", "w", ",", "history", "\n", "\n"]], "home.repos.pwc.inspect_result.jon--lee_aor.tools.lqr.run": [[55, 62], ["env.reset", "numpy.array", "range", "env.render", "env.step", "K.dot().flatten", "K.dot"], "function", ["home.repos.pwc.inspect_result.jon--lee_aor.expert.tf_util.reset"], ["def", "run", "(", ")", ":", "\n", "    ", "x", "=", "env", ".", "reset", "(", ")", "\n", "env", ".", "state", "=", "np", ".", "array", "(", "[", "0.0", ",", "0.0", ",", ".7", ",", ".01", "]", ")", "\n", "for", "i", "in", "range", "(", "300", ")", ":", "\n", "        ", "env", ".", "render", "(", ")", "\n", "u", "=", "-", "K", ".", "dot", "(", "x", ")", ".", "flatten", "(", ")", "\n", "x", ",", "_", ",", "_", ",", "_", "=", "env", ".", "step", "(", "u", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jon--lee_aor.tools.svm.SVM.__init__": [[10, 16], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "alpha", ",", "eta", ",", "intercept", "=", "False", ")", ":", "\n", "\n", "        ", "self", ".", "alpha", "=", "alpha", "\n", "self", ".", "eta", "=", "eta", "\n", "self", ".", "coef_", "=", "None", "\n", "self", ".", "intercept", "=", "intercept", "\n", "\n"]], "home.repos.pwc.inspect_result.jon--lee_aor.tools.svm.SVM.enforce": [[17, 27], ["numpy.array", "numpy.array", "numpy.unique", "len", "len", "len"], "methods", ["None"], ["", "@", "jit", "\n", "def", "enforce", "(", "self", ",", "X", ",", "y", ")", ":", "\n", "        ", "X", "=", "np", ".", "array", "(", "X", ")", "\n", "y", "=", "np", ".", "array", "(", "y", ")", "\n", "unique", "=", "np", ".", "unique", "(", "y", ")", "\n", "assert", "len", "(", "unique", "==", "2", ")", "\n", "assert", "1", "in", "unique", "\n", "assert", "-", "1", "in", "unique", "\n", "assert", "len", "(", "X", ")", "==", "len", "(", "y", ")", "\n", "y", "=", "y", "*", "2", "-", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.jon--lee_aor.tools.svm.SVM.multiple_update": [[29, 62], ["numpy.array", "numpy.array", "numpy.hstack.copy", "numpy.array.copy", "svm.SVM.enforce", "range", "numpy.hstack", "numpy.zeros", "hinge_grads.copy", "numpy.dot", "numpy.mean", "numpy.ones"], "methods", ["home.repos.pwc.inspect_result.jon--lee_aor.tools.lr.LR.enforce", "home.repos.pwc.inspect_result.jon--lee_aor.expert.tf_util.mean"], ["", "@", "jit", "\n", "def", "multiple_update", "(", "self", ",", "X", ",", "y", ",", "K", ",", "T", ")", ":", "\n", "        ", "X", "=", "np", ".", "array", "(", "X", ")", "\n", "y", "=", "np", ".", "array", "(", "y", ")", "\n", "X_original", "=", "X", ".", "copy", "(", ")", "\n", "y_original", "=", "y", ".", "copy", "(", ")", "\n", "\n", "if", "self", ".", "intercept", ":", "\n", "            ", "X", "=", "np", ".", "hstack", "(", "(", "X", ",", "np", ".", "ones", "(", "(", "X", ".", "shape", "[", "0", "]", ",", "1", ")", ")", ")", ")", "\n", "", "y", "=", "y", "*", "2", "-", "1", "\n", "self", ".", "enforce", "(", "X", ",", "y", ")", "\n", "\n", "d", "=", "X", ".", "shape", "[", "1", "]", "\n", "if", "self", ".", "coef_", "is", "None", "or", "T", "==", "0", ":", "\n", "            ", "self", ".", "coef_", "=", "np", ".", "zeros", "(", "d", ")", "#np.random.normal(0, 1, d)", "\n", "", "w", "=", "self", ".", "coef_", "\n", "history", "=", "[", "]", "\n", "\n", "hinge_grads", "=", "(", "X", ".", "T", "*", "y", ")", ".", "T", "\n", "\n", "for", "epoch", "in", "range", "(", "K", ")", ":", "\n", "            ", "hinge_grads_copy", "=", "hinge_grads", ".", "copy", "(", ")", "\n", "scores", "=", "y", "*", "np", ".", "dot", "(", "X", ",", "w", ")", "\n", "hinge_grads_copy", "[", "scores", ">", "1", "]", "=", "0.0", "\n", "\n", "hinge_mean", "=", "-", "np", ".", "mean", "(", "hinge_grads_copy", ",", "axis", "=", "0", ")", "\n", "reg", "=", "w", "*", "self", ".", "alpha", "\n", "\n", "w", "=", "w", "-", "self", ".", "eta", "/", "(", "T", "+", "1", ")", "/", "K", "*", "(", "hinge_mean", "+", "reg", ")", "\n", "# w = w - self.eta * (hinge_mean + reg) ", "\n", "\n", "", "self", ".", "coef_", "=", "w", "\n", "return", "history", "\n", "\n"]], "home.repos.pwc.inspect_result.jon--lee_aor.tools.svm.SVM.update": [[63, 95], ["numpy.array", "numpy.array", "numpy.hstack.copy", "numpy.array.copy", "svm.SVM.enforce", "hinge_grads.copy", "numpy.hstack", "numpy.zeros", "numpy.dot", "numpy.mean", "numpy.ones"], "methods", ["home.repos.pwc.inspect_result.jon--lee_aor.tools.lr.LR.enforce", "home.repos.pwc.inspect_result.jon--lee_aor.expert.tf_util.mean"], ["", "@", "jit", "\n", "def", "update", "(", "self", ",", "X", ",", "y", ",", "T", ")", ":", "\n", "        ", "X", "=", "np", ".", "array", "(", "X", ")", "\n", "y", "=", "np", ".", "array", "(", "y", ")", "\n", "X_original", "=", "X", ".", "copy", "(", ")", "\n", "y_original", "=", "y", ".", "copy", "(", ")", "\n", "\n", "if", "self", ".", "intercept", ":", "\n", "            ", "X", "=", "np", ".", "hstack", "(", "(", "X", ",", "np", ".", "ones", "(", "(", "X", ".", "shape", "[", "0", "]", ",", "1", ")", ")", ")", ")", "\n", "", "y", "=", "y", "*", "2", "-", "1", "\n", "self", ".", "enforce", "(", "X", ",", "y", ")", "\n", "\n", "d", "=", "X", ".", "shape", "[", "1", "]", "\n", "if", "self", ".", "coef_", "is", "None", "or", "T", "==", "0", ":", "\n", "            ", "self", ".", "coef_", "=", "np", ".", "zeros", "(", "d", ")", "# np.random.normal(0, 1, d)", "\n", "", "w", "=", "self", ".", "coef_", "\n", "history", "=", "[", "]", "\n", "\n", "hinge_grads", "=", "(", "X", ".", "T", "*", "y", ")", ".", "T", "\n", "\n", "hinge_grads_copy", "=", "hinge_grads", ".", "copy", "(", ")", "\n", "scores", "=", "y", "*", "np", ".", "dot", "(", "X", ",", "w", ")", "\n", "hinge_grads_copy", "[", "scores", ">", "1", "]", "=", "0.0", "\n", "\n", "hinge_mean", "=", "-", "np", ".", "mean", "(", "hinge_grads_copy", ",", "axis", "=", "0", ")", "\n", "reg", "=", "w", "*", "self", ".", "alpha", "\n", "\n", "w", "=", "w", "-", "self", ".", "eta", "/", "(", "T", "+", "1", ")", "*", "(", "hinge_mean", "+", "reg", ")", "\n", "# w = w - self.eta * (hinge_mean + reg) ", "\n", "\n", "self", ".", "coef_", "=", "w", "\n", "return", "history", "\n", "\n"]], "home.repos.pwc.inspect_result.jon--lee_aor.tools.svm.SVM.fit": [[96, 131], ["numpy.array", "numpy.array", "numpy.hstack.copy", "numpy.array.copy", "svm.SVM.enforce", "numpy.zeros", "numpy.zeros", "range", "numpy.hstack", "numpy.zeros", "svm.SVM.compute_grad", "svm.SVM._loss", "numpy.argmin", "numpy.ones"], "methods", ["home.repos.pwc.inspect_result.jon--lee_aor.tools.lr.LR.enforce", "home.repos.pwc.inspect_result.jon--lee_aor.tools.svm.SVM.compute_grad", "home.repos.pwc.inspect_result.jon--lee_aor.tools.lr.LR._loss"], ["", "def", "fit", "(", "self", ",", "X", ",", "y", ",", "w", "=", "None", ",", "epochs", "=", "1000", ")", ":", "\n", "        ", "X", "=", "np", ".", "array", "(", "X", ")", "\n", "y", "=", "np", ".", "array", "(", "y", ")", "\n", "X_original", "=", "X", ".", "copy", "(", ")", "\n", "y_original", "=", "y", ".", "copy", "(", ")", "\n", "\n", "if", "self", ".", "intercept", ":", "\n", "            ", "X", "=", "np", ".", "hstack", "(", "(", "X", ",", "np", ".", "ones", "(", "(", "X", ".", "shape", "[", "0", "]", ",", "1", ")", ")", ")", ")", "\n", "", "y", "=", "y", "*", "2", "-", "1", "\n", "self", ".", "enforce", "(", "X", ",", "y", ")", "\n", "\n", "d", "=", "X", ".", "shape", "[", "1", "]", "\n", "if", "self", ".", "coef_", "is", "None", ":", "\n", "            ", "self", ".", "coef_", "=", "np", ".", "zeros", "(", "d", ")", "#np.random.normal(0, 1, d)", "\n", "", "if", "not", "w", "is", "None", ":", "\n", "            ", "self", ".", "coef_", "=", "w", "\n", "", "w", "=", "self", ".", "coef_", "\n", "\n", "\n", "loss_history", "=", "np", ".", "zeros", "(", "epochs", "-", "1", ")", "\n", "param_history", "=", "np", ".", "zeros", "(", "(", "epochs", "-", "1", ",", "d", ")", ")", "\n", "\n", "min_loss", "=", "None", "\n", "hinge_grads", "=", "(", "X", ".", "T", "*", "y", ")", ".", "T", "\n", "\n", "for", "epoch", "in", "range", "(", "1", ",", "epochs", ")", ":", "\n", "            ", "w", "=", "self", ".", "compute_grad", "(", "epoch", ",", "hinge_grads", ",", "w", ")", "\n", "\n", "\n", "loss", "=", "self", ".", "_loss", "(", "X", ",", "y", ",", "w", "=", "w", ")", "\n", "loss_history", "[", "epoch", "-", "1", "]", "=", "loss", "\n", "param_history", "[", "epoch", "-", "1", ",", ":", "]", "=", "w", "\n", "\n", "", "self", ".", "coef_", "=", "param_history", "[", "np", ".", "argmin", "(", "loss_history", ")", "]", "\n", "return", "loss_history", ",", "param_history", "\n", "\n"]], "home.repos.pwc.inspect_result.jon--lee_aor.tools.svm.SVM.compute_grad": [[133, 143], ["hinge_grads.copy", "hinge_grads.copy.dot", "numpy.mean", "numpy.sqrt"], "methods", ["home.repos.pwc.inspect_result.jon--lee_aor.expert.tf_util.mean"], ["", "@", "jit", "\n", "def", "compute_grad", "(", "self", ",", "epoch", ",", "hinge_grads", ",", "w", ")", ":", "\n", "        ", "hinge_grads_copy", "=", "hinge_grads", ".", "copy", "(", ")", "\n", "scores", "=", "hinge_grads_copy", ".", "dot", "(", "w", ")", "\n", "hinge_grads_copy", "[", "scores", ">", "1", "]", "=", "0.0", "\n", "\n", "hinge_mean", "=", "-", "np", ".", "mean", "(", "hinge_grads_copy", ",", "axis", "=", "0", ")", "\n", "reg", "=", "w", "*", "self", ".", "alpha", "\n", "w", "=", "w", "-", "self", ".", "eta", "/", "np", ".", "sqrt", "(", "epoch", ")", "*", "(", "hinge_mean", "+", "reg", ")", "\n", "return", "w", "\n", "\n"]], "home.repos.pwc.inspect_result.jon--lee_aor.tools.svm.SVM._loss": [[146, 157], ["numpy.clip", "numpy.mean", "X.dot", "numpy.square", "numpy.linalg.norm"], "methods", ["home.repos.pwc.inspect_result.jon--lee_aor.expert.tf_util.mean"], ["", "@", "jit", "\n", "def", "_loss", "(", "self", ",", "X", ",", "y", ",", "w", "=", "None", ")", ":", "\n", "        ", "if", "w", "is", "None", ":", "\n", "            ", "w", "=", "self", ".", "coef_", "\n", "\n", "", "scores", "=", "X", ".", "dot", "(", "w", ")", "*", "y", "\n", "hinge_losses", "=", "np", ".", "clip", "(", "1", "-", "scores", ",", "0", ",", "None", ")", "\n", "hinge", "=", "np", ".", "mean", "(", "hinge_losses", ")", "\n", "reg", "=", "self", ".", "alpha", "*", ".5", "*", "np", ".", "square", "(", "np", ".", "linalg", ".", "norm", "(", "w", ")", ")", "\n", "\n", "return", "hinge", "+", "reg", "\n", "\n"]], "home.repos.pwc.inspect_result.jon--lee_aor.tools.svm.SVM.loss": [[159, 180], ["numpy.array", "numpy.array", "numpy.hstack.copy", "numpy.array.copy", "svm.SVM.enforce", "svm.SVM._loss", "numpy.hstack", "numpy.zeros", "numpy.ones"], "methods", ["home.repos.pwc.inspect_result.jon--lee_aor.tools.lr.LR.enforce", "home.repos.pwc.inspect_result.jon--lee_aor.tools.lr.LR._loss"], ["", "@", "jit", "\n", "def", "loss", "(", "self", ",", "X", ",", "y", ",", "w", "=", "None", ")", ":", "\n", "        ", "X", "=", "np", ".", "array", "(", "X", ")", "\n", "y", "=", "np", ".", "array", "(", "y", ")", "\n", "\n", "X_original", "=", "X", ".", "copy", "(", ")", "\n", "y_original", "=", "y", ".", "copy", "(", ")", "\n", "\n", "if", "self", ".", "intercept", ":", "\n", "            ", "X", "=", "np", ".", "hstack", "(", "(", "X", ",", "np", ".", "ones", "(", "(", "X", ".", "shape", "[", "0", "]", ",", "1", ")", ")", ")", ")", "\n", "", "y", "=", "y", "*", "2", "-", "1", "\n", "self", ".", "enforce", "(", "X", ",", "y", ")", "\n", "\n", "d", "=", "X", ".", "shape", "[", "1", "]", "\n", "if", "self", ".", "coef_", "is", "None", ":", "\n", "            ", "self", ".", "coef_", "=", "np", ".", "zeros", "(", "d", ")", "#np.random.normal(0, 1, d)", "\n", "\n", "", "if", "w", "is", "None", ":", "\n", "            ", "w", "=", "self", ".", "coef_", "\n", "\n", "", "return", "self", ".", "_loss", "(", "X", ",", "y", ",", "w", "=", "w", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jon--lee_aor.tools.svm.SVM.decision_function": [[182, 195], ["numpy.array", "numpy.hstack.copy", "numpy.hstack.dot", "numpy.hstack", "numpy.zeros", "numpy.ones"], "methods", ["None"], ["", "@", "jit", "\n", "def", "decision_function", "(", "self", ",", "X", ")", ":", "\n", "        ", "X", "=", "np", ".", "array", "(", "X", ")", "\n", "X_original", "=", "X", ".", "copy", "(", ")", "\n", "\n", "if", "self", ".", "intercept", ":", "\n", "            ", "X", "=", "np", ".", "hstack", "(", "(", "X", ",", "np", ".", "ones", "(", "(", "X", ".", "shape", "[", "0", "]", ",", "1", ")", ")", ")", ")", "\n", "", "d", "=", "X", ".", "shape", "[", "1", "]", "\n", "if", "self", ".", "coef_", "is", "None", ":", "\n", "            ", "self", ".", "coef_", "=", "np", ".", "zeros", "(", "d", ")", "#np.random.normal(0, 1, d)", "\n", "\n", "", "scores", "=", "X", ".", "dot", "(", "self", ".", "coef_", ")", "\n", "return", "scores", "\n", "\n"]], "home.repos.pwc.inspect_result.jon--lee_aor.tools.svm.SVM.predict": [[196, 205], ["numpy.array", "svm.SVM.decision_function", "numpy.zeros", "numpy.zeros.astype", "numpy.where"], "methods", ["home.repos.pwc.inspect_result.jon--lee_aor.tools.learner.Learner.decision_function"], ["", "@", "jit", "\n", "def", "predict", "(", "self", ",", "X", ")", ":", "\n", "        ", "X", "=", "np", ".", "array", "(", "X", ")", "\n", "scores", "=", "self", ".", "decision_function", "(", "X", ")", "\n", "\n", "yhat", "=", "np", ".", "zeros", "(", "X", ".", "shape", "[", "0", "]", ")", "\n", "yhat", "[", "np", ".", "where", "(", "scores", ">", "0", ")", "]", "=", "1.0", "\n", "\n", "return", "yhat", ".", "astype", "(", "int", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jon--lee_aor.tools.supervisor.Supervisor.__init__": [[6, 8], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "act", ")", ":", "\n", "        ", "self", ".", "act", "=", "act", "\n", "\n"]], "home.repos.pwc.inspect_result.jon--lee_aor.tools.supervisor.Supervisor.sample_action": [[9, 11], ["supervisor.Supervisor.intended_action"], "methods", ["home.repos.pwc.inspect_result.jon--lee_aor.tools.learner.Learner.intended_action"], ["", "def", "sample_action", "(", "self", ",", "s", ")", ":", "\n", "        ", "return", "self", ".", "intended_action", "(", "s", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jon--lee_aor.tools.supervisor.Supervisor.intended_action": [[12, 15], ["supervisor.Supervisor.act"], "methods", ["None"], ["", "def", "intended_action", "(", "self", ",", "s", ")", ":", "\n", "        ", "action", "=", "self", ".", "act", "(", "s", "[", "None", "]", ",", "stochastic", "=", "False", ")", "[", "0", "]", "\n", "return", "action", "\n", "\n"]], "home.repos.pwc.inspect_result.jon--lee_aor.tools.supervisor.Supervisor2.__init__": [[19, 24], ["supervisor.Supervisor2.sess.as_default", "expert.tf_util.initialize"], "methods", ["home.repos.pwc.inspect_result.jon--lee_aor.expert.tf_util.initialize"], ["    ", "def", "__init__", "(", "self", ",", "policy_fn", ",", "sess", ")", ":", "\n", "        ", "self", ".", "policy_fn", "=", "policy_fn", "\n", "self", ".", "sess", "=", "sess", "\n", "with", "self", ".", "sess", ".", "as_default", "(", ")", ":", "\n", "            ", "tf_util", ".", "initialize", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jon--lee_aor.tools.supervisor.Supervisor2.sample_action": [[25, 29], ["supervisor.Supervisor2.sess.as_default", "supervisor.Supervisor2.policy_fn"], "methods", ["None"], ["", "", "def", "sample_action", "(", "self", ",", "s", ")", ":", "\n", "        ", "with", "self", ".", "sess", ".", "as_default", "(", ")", ":", "\n", "            ", "intended_action", "=", "self", ".", "policy_fn", "(", "s", "[", "None", ",", ":", "]", ")", "[", "0", "]", "\n", "return", "intended_action", "\n", "\n"]], "home.repos.pwc.inspect_result.jon--lee_aor.tools.supervisor.Supervisor2.intended_action": [[30, 32], ["supervisor.Supervisor2.sample_action"], "methods", ["home.repos.pwc.inspect_result.jon--lee_aor.tools.learner.Learner.sample_action"], ["", "", "def", "intended_action", "(", "self", ",", "s", ")", ":", "\n", "        ", "return", "self", ".", "sample_action", "(", "s", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jon--lee_aor.tools.supervisor.Supervisor3.__init__": [[34, 36], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "act", ")", ":", "\n", "        ", "self", ".", "act", "=", "act", "\n", "\n"]], "home.repos.pwc.inspect_result.jon--lee_aor.tools.supervisor.Supervisor3.sample_action": [[37, 39], ["supervisor.Supervisor3.intended_action"], "methods", ["home.repos.pwc.inspect_result.jon--lee_aor.tools.learner.Learner.intended_action"], ["", "def", "sample_action", "(", "self", ",", "s", ")", ":", "\n", "        ", "return", "self", ".", "intended_action", "(", "s", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jon--lee_aor.tools.supervisor.Supervisor3.intended_action": [[40, 43], ["supervisor.Supervisor3.act"], "methods", ["None"], ["", "def", "intended_action", "(", "self", ",", "s", ")", ":", "\n", "        ", "action", "=", "self", ".", "act", "(", "False", ",", "s", ")", "[", "0", "]", "\n", "return", "action", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jon--lee_aor.tools.lrc.LRC.__init__": [[10, 18], ["Exception"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "alpha", ",", "eta", ",", "intercept", "=", "False", ")", ":", "\n", "\n", "        ", "self", ".", "alpha", "=", "alpha", "\n", "self", ".", "eta", "=", "eta", "\n", "self", ".", "coef_", "=", "None", "\n", "self", ".", "intercept", "=", "intercept", "\n", "if", "intercept", ":", "\n", "            ", "raise", "Exception", "(", "\"didn't implement intercept yet\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jon--lee_aor.tools.lrc.LRC.enforce": [[20, 27], ["numpy.array", "numpy.array", "numpy.unique", "len", "len", "len"], "methods", ["None"], ["", "", "def", "enforce", "(", "self", ",", "X", ",", "y", ")", ":", "\n", "        ", "X", "=", "np", ".", "array", "(", "X", ")", "\n", "y", "=", "np", ".", "array", "(", "y", ")", "\n", "unique", "=", "np", ".", "unique", "(", "y", ")", "\n", "assert", "len", "(", "unique", "==", "2", ")", "\n", "assert", "1", "in", "unique", "or", "-", "1", "in", "unique", "\n", "assert", "len", "(", "X", ")", "==", "len", "(", "y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jon--lee_aor.tools.lrc.LRC.multiple_update": [[28, 58], ["numpy.array", "numpy.array", "numpy.array", "numpy.array.copy", "numpy.array.copy", "lrc.LRC.enforce", "numpy.array.T.dot", "numpy.array.T.dot", "range", "numpy.zeros", "numpy.array.T.dot", "numpy.array.dot"], "methods", ["home.repos.pwc.inspect_result.jon--lee_aor.tools.lr.LR.enforce"], ["", "def", "multiple_update", "(", "self", ",", "X", ",", "y", ",", "K", ",", "T", ")", ":", "\n", "\n", "        ", "X", "=", "np", ".", "array", "(", "X", ")", "\n", "X", "=", "np", ".", "array", "(", "X", ")", "\n", "y", "=", "np", ".", "array", "(", "y", ")", "\n", "X_original", "=", "X", ".", "copy", "(", ")", "\n", "y_original", "=", "y", ".", "copy", "(", ")", "\n", "\n", "y", "=", "y", "*", "2", "-", "1", "\n", "self", ".", "enforce", "(", "X", ",", "y", ")", "\n", "\n", "n", "=", "X", ".", "shape", "[", "0", "]", "\n", "d", "=", "X", ".", "shape", "[", "1", "]", "\n", "if", "self", ".", "coef_", "is", "None", ":", "\n", "            ", "self", ".", "coef_", "=", "np", ".", "zeros", "(", "d", ")", "\n", "", "w", "=", "self", ".", "coef_", "\n", "\n", "var", "=", "X", ".", "T", ".", "dot", "(", "X", ")", "\n", "cov", "=", "X", ".", "T", ".", "dot", "(", "y", ")", "\n", "\n", "for", "_", "in", "range", "(", "K", ")", ":", "\n", "            ", "grad", "=", "2.0", "/", "n", "*", "X", ".", "T", ".", "dot", "(", "X", ".", "dot", "(", "w", ")", "-", "y", ")", "+", "self", ".", "alpha", "*", "w", "\n", "# w = w - self.eta / np.sqrt(T+1) * grad", "\n", "w", "=", "w", "-", "self", ".", "eta", "*", "grad", "/", "K", "\n", "\n", "\n", "# print(\"\\t\\tw: \" + str(w))", "\n", "# print(\"\\t\\tgrad: \" + str(grad))", "\n", "# print(\"\\t\\teta: \" + str(self.eta))", "\n", "", "self", ".", "coef_", "=", "w", "\n", "\n"]], "home.repos.pwc.inspect_result.jon--lee_aor.tools.lrc.LRC.update": [[60, 82], ["numpy.array", "numpy.array", "numpy.array", "numpy.array.copy", "numpy.array.copy", "lrc.LRC.enforce", "numpy.zeros", "numpy.array.T.dot", "numpy.array.dot"], "methods", ["home.repos.pwc.inspect_result.jon--lee_aor.tools.lr.LR.enforce"], ["", "def", "update", "(", "self", ",", "X", ",", "y", ",", "T", ")", ":", "\n", "\n", "        ", "X", "=", "np", ".", "array", "(", "X", ")", "\n", "X", "=", "np", ".", "array", "(", "X", ")", "\n", "y", "=", "np", ".", "array", "(", "y", ")", "\n", "X_original", "=", "X", ".", "copy", "(", ")", "\n", "y_original", "=", "y", ".", "copy", "(", ")", "\n", "\n", "y", "=", "y", "*", "2", "-", "1", "\n", "self", ".", "enforce", "(", "X", ",", "y", ")", "\n", "\n", "n", "=", "X", ".", "shape", "[", "0", "]", "\n", "d", "=", "X", ".", "shape", "[", "1", "]", "\n", "if", "self", ".", "coef_", "is", "None", ":", "\n", "            ", "self", ".", "coef_", "=", "np", ".", "zeros", "(", "d", ")", "\n", "", "w", "=", "self", ".", "coef_", "\n", "\n", "grad", "=", "2.0", "/", "n", "*", "X", ".", "T", ".", "dot", "(", "X", ".", "dot", "(", "w", ")", "-", "y", ")", "+", "self", ".", "alpha", "*", "w", "\n", "# w = w - self.eta / np.sqrt(T+1) * grad", "\n", "w", "=", "w", "-", "self", ".", "eta", "*", "grad", "\n", "\n", "self", ".", "coef_", "=", "w", "\n", "\n"]], "home.repos.pwc.inspect_result.jon--lee_aor.tools.lrc.LRC.fit": [[83, 108], ["numpy.array", "numpy.array", "numpy.hstack.copy", "numpy.array.copy", "lrc.LRC.enforce", "numpy.zeros", "numpy.zeros", "numpy.hstack.T.dot", "numpy.linalg.inv().dot", "numpy.hstack", "numpy.zeros", "numpy.linalg.inv", "numpy.ones", "numpy.hstack.T.dot", "numpy.identity"], "methods", ["home.repos.pwc.inspect_result.jon--lee_aor.tools.lr.LR.enforce"], ["", "def", "fit", "(", "self", ",", "X", ",", "y", ",", "w", "=", "None", ",", "epochs", "=", "1000", ")", ":", "\n", "        ", "X", "=", "np", ".", "array", "(", "X", ")", "\n", "y", "=", "np", ".", "array", "(", "y", ")", "\n", "X_original", "=", "X", ".", "copy", "(", ")", "\n", "y_original", "=", "y", ".", "copy", "(", ")", "\n", "\n", "if", "self", ".", "intercept", ":", "\n", "            ", "X", "=", "np", ".", "hstack", "(", "(", "X", ",", "np", ".", "ones", "(", "(", "X", ".", "shape", "[", "0", "]", ",", "1", ")", ")", ")", ")", "\n", "", "y", "=", "y", "*", "2", "-", "1", "\n", "self", ".", "enforce", "(", "X", ",", "y", ")", "\n", "\n", "d", "=", "X", ".", "shape", "[", "1", "]", "\n", "if", "self", ".", "coef_", "is", "None", ":", "\n", "            ", "self", ".", "coef_", "=", "np", ".", "zeros", "(", "d", ")", "#np.random.normal(0, 1, d)", "\n", "", "if", "not", "w", "is", "None", ":", "\n", "            ", "self", ".", "coef_", "=", "w", "\n", "", "w", "=", "self", ".", "coef_", "\n", "\n", "\n", "loss_history", "=", "np", ".", "zeros", "(", "epochs", "-", "1", ")", "\n", "param_history", "=", "np", ".", "zeros", "(", "(", "epochs", "-", "1", ",", "d", ")", ")", "\n", "\n", "cov", "=", "X", ".", "T", ".", "dot", "(", "y", ")", "\n", "self", ".", "coef_", "=", "np", ".", "linalg", ".", "inv", "(", "X", ".", "T", ".", "dot", "(", "X", ")", "+", "X", ".", "shape", "[", "0", "]", "*", "self", ".", "alpha", "/", "2", "*", "np", ".", "identity", "(", "d", ")", ")", ".", "dot", "(", "cov", ")", "\n", "return", "loss_history", ",", "param_history", "\n", "\n"]], "home.repos.pwc.inspect_result.jon--lee_aor.tools.lrc.LRC.gradient": [[110, 118], ["numpy.array", "numpy.array", "lrc.LRC.enforce", "numpy.array.T.dot", "numpy.array.dot"], "methods", ["home.repos.pwc.inspect_result.jon--lee_aor.tools.lr.LR.enforce"], ["", "def", "gradient", "(", "self", ",", "X", ",", "y", ",", "w", ")", ":", "\n", "        ", "X", "=", "np", ".", "array", "(", "X", ")", "\n", "y", "=", "np", ".", "array", "(", "y", ")", "\n", "y", "=", "y", "*", "2", "-", "1", "\n", "self", ".", "enforce", "(", "X", ",", "y", ")", "\n", "n", "=", "X", ".", "shape", "[", "0", "]", "\n", "grad", "=", "2.0", "/", "n", "*", "X", ".", "T", ".", "dot", "(", "X", ".", "dot", "(", "w", ")", "-", "y", ")", "+", "self", ".", "alpha", "*", "w", "\n", "return", "grad", "\n", "\n"]], "home.repos.pwc.inspect_result.jon--lee_aor.tools.lrc.LRC._loss": [[119, 127], ["numpy.mean", "numpy.square", "numpy.square", "numpy.linalg.norm", "X.dot"], "methods", ["home.repos.pwc.inspect_result.jon--lee_aor.expert.tf_util.mean"], ["", "def", "_loss", "(", "self", ",", "X", ",", "y", ",", "w", "=", "None", ")", ":", "\n", "        ", "if", "w", "is", "None", ":", "\n", "            ", "w", "=", "self", ".", "coef_", "\n", "\n", "", "diff", "=", "np", ".", "mean", "(", "np", ".", "square", "(", "X", ".", "dot", "(", "w", ")", "-", "y", ")", ")", "\n", "reg", "=", "self", ".", "alpha", "*", ".5", "*", "np", ".", "square", "(", "np", ".", "linalg", ".", "norm", "(", "w", ")", ")", "\n", "\n", "return", "diff", "+", "reg", "\n", "\n"]], "home.repos.pwc.inspect_result.jon--lee_aor.tools.lrc.LRC.loss": [[129, 149], ["numpy.array", "numpy.array", "numpy.hstack.copy", "numpy.array.copy", "lrc.LRC.enforce", "lrc.LRC._loss", "numpy.hstack", "numpy.zeros", "numpy.ones"], "methods", ["home.repos.pwc.inspect_result.jon--lee_aor.tools.lr.LR.enforce", "home.repos.pwc.inspect_result.jon--lee_aor.tools.lr.LR._loss"], ["", "def", "loss", "(", "self", ",", "X", ",", "y", ",", "w", "=", "None", ")", ":", "\n", "        ", "X", "=", "np", ".", "array", "(", "X", ")", "\n", "y", "=", "np", ".", "array", "(", "y", ")", "\n", "\n", "X_original", "=", "X", ".", "copy", "(", ")", "\n", "y_original", "=", "y", ".", "copy", "(", ")", "\n", "\n", "if", "self", ".", "intercept", ":", "\n", "            ", "X", "=", "np", ".", "hstack", "(", "(", "X", ",", "np", ".", "ones", "(", "(", "X", ".", "shape", "[", "0", "]", ",", "1", ")", ")", ")", ")", "\n", "", "y", "=", "y", "*", "2", "-", "1", "\n", "self", ".", "enforce", "(", "X", ",", "y", ")", "\n", "\n", "d", "=", "X", ".", "shape", "[", "1", "]", "\n", "if", "self", ".", "coef_", "is", "None", ":", "\n", "            ", "self", ".", "coef_", "=", "np", ".", "zeros", "(", "d", ")", "#np.random.normal(0, 1, d)", "\n", "\n", "", "if", "w", "is", "None", ":", "\n", "            ", "w", "=", "self", ".", "coef_", "\n", "\n", "", "return", "self", ".", "_loss", "(", "X", ",", "y", ",", "w", "=", "w", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jon--lee_aor.tools.lrc.LRC.decision_function": [[150, 162], ["numpy.array", "numpy.hstack.copy", "numpy.hstack.dot", "numpy.hstack", "numpy.zeros", "numpy.ones"], "methods", ["None"], ["", "def", "decision_function", "(", "self", ",", "X", ")", ":", "\n", "        ", "X", "=", "np", ".", "array", "(", "X", ")", "\n", "X_original", "=", "X", ".", "copy", "(", ")", "\n", "\n", "if", "self", ".", "intercept", ":", "\n", "            ", "X", "=", "np", ".", "hstack", "(", "(", "X", ",", "np", ".", "ones", "(", "(", "X", ".", "shape", "[", "0", "]", ",", "1", ")", ")", ")", ")", "\n", "", "d", "=", "X", ".", "shape", "[", "1", "]", "\n", "if", "self", ".", "coef_", "is", "None", ":", "\n", "            ", "self", ".", "coef_", "=", "np", ".", "zeros", "(", "d", ")", "#np.random.normal(0, 1, d)", "\n", "\n", "", "scores", "=", "X", ".", "dot", "(", "self", ".", "coef_", ")", "\n", "return", "scores", "\n", "\n"]], "home.repos.pwc.inspect_result.jon--lee_aor.tools.lrc.LRC.predict": [[164, 172], ["numpy.array", "lrc.LRC.decision_function", "numpy.zeros", "numpy.zeros.astype", "numpy.where"], "methods", ["home.repos.pwc.inspect_result.jon--lee_aor.tools.learner.Learner.decision_function"], ["", "def", "predict", "(", "self", ",", "X", ")", ":", "\n", "        ", "X", "=", "np", ".", "array", "(", "X", ")", "\n", "scores", "=", "self", ".", "decision_function", "(", "X", ")", "\n", "\n", "yhat", "=", "np", ".", "zeros", "(", "X", ".", "shape", "[", "0", "]", ")", "\n", "yhat", "[", "np", ".", "where", "(", "scores", ">=", "0", ")", "]", "=", "1.0", "\n", "\n", "return", "yhat", ".", "astype", "(", "int", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jon--lee_aor.tools.poly_est.PolyEst.__init__": [[7, 10], ["sklearn.preprocessing.PolynomialFeatures"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "base_est", ")", ":", "\n", "        ", "self", ".", "est", "=", "base_est", "\n", "self", ".", "poly", "=", "PolynomialFeatures", "(", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jon--lee_aor.tools.poly_est.PolyEst.fit": [[11, 14], ["poly_est.PolyEst.poly.fit_transform", "poly_est.PolyEst.est.fit"], "methods", ["home.repos.pwc.inspect_result.jon--lee_aor.tools.lr.LR.fit"], ["", "def", "fit", "(", "self", ",", "X", ",", "y", ")", ":", "\n", "        ", "X", "=", "self", ".", "poly", ".", "fit_transform", "(", "X", ")", "\n", "return", "self", ".", "est", ".", "fit", "(", "X", ",", "y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jon--lee_aor.tools.poly_est.PolyEst.update": [[15, 18], ["poly_est.PolyEst.poly.fit_transform", "poly_est.PolyEst.est.update"], "methods", ["home.repos.pwc.inspect_result.jon--lee_aor.tools.lr.LR.update"], ["", "def", "update", "(", "self", ",", "X", ",", "y", ",", "T", ")", ":", "\n", "        ", "X", "=", "self", ".", "poly", ".", "fit_transform", "(", "X", ")", "\n", "return", "self", ".", "est", ".", "update", "(", "X", ",", "y", ",", "T", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jon--lee_aor.tools.poly_est.PolyEst.multiple_update": [[19, 22], ["poly_est.PolyEst.poly.fit_transform", "poly_est.PolyEst.est.multiple_update"], "methods", ["home.repos.pwc.inspect_result.jon--lee_aor.tools.lr.LR.multiple_update"], ["", "def", "multiple_update", "(", "self", ",", "X", ",", "y", ",", "K", ",", "T", ")", ":", "\n", "        ", "X", "=", "self", ".", "poly", ".", "fit_transform", "(", "X", ")", "\n", "return", "self", ".", "est", ".", "multiple_update", "(", "X", ",", "y", ",", "K", ",", "T", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jon--lee_aor.tools.poly_est.PolyEst.predict": [[23, 26], ["poly_est.PolyEst.poly.fit_transform", "poly_est.PolyEst.est.predict"], "methods", ["home.repos.pwc.inspect_result.jon--lee_aor.tools.lr.LR.predict"], ["", "def", "predict", "(", "self", ",", "X", ")", ":", "\n", "        ", "X", "=", "self", ".", "poly", ".", "fit_transform", "(", "X", ")", "\n", "return", "self", ".", "est", ".", "predict", "(", "X", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jon--lee_aor.tools.poly_est.PolyEst.score": [[27, 30], ["poly_est.PolyEst.poly.fit_transform", "poly_est.PolyEst.est.score"], "methods", ["home.repos.pwc.inspect_result.jon--lee_aor.tools.poly_est.PolyEst.score"], ["", "def", "score", "(", "self", ",", "X", ",", "y", ")", ":", "\n", "        ", "X", "=", "self", ".", "poly", ".", "fit_transform", "(", "X", ")", "\n", "return", "self", ".", "est", ".", "score", "(", "X", ",", "y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jon--lee_aor.tools.poly_est.PolyEst.decision_function": [[31, 34], ["poly_est.PolyEst.poly.fit_transform", "poly_est.PolyEst.est.decision_function"], "methods", ["home.repos.pwc.inspect_result.jon--lee_aor.tools.learner.Learner.decision_function"], ["", "def", "decision_function", "(", "self", ",", "X", ")", ":", "\n", "        ", "X", "=", "self", ".", "poly", ".", "fit_transform", "(", "X", ")", "\n", "return", "self", ".", "est", ".", "decision_function", "(", "X", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jon--lee_aor.tools.poly_est.PolyEst.coef_": [[39, 42], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "coef_", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "est", ".", "coef_", "\n", "\n"]], "home.repos.pwc.inspect_result.jon--lee_aor.tools.poly_est.PolyEst.intercept_": [[43, 46], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "intercept_", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "est", ".", "intercept_", "\n", "\n"]], "home.repos.pwc.inspect_result.jon--lee_aor.tools.poly_est.PolyEst.gradient": [[47, 50], ["poly_est.PolyEst.poly.fit_transform", "poly_est.PolyEst.est.gradient"], "methods", ["home.repos.pwc.inspect_result.jon--lee_aor.tools.lr.LR.gradient"], ["", "def", "gradient", "(", "self", ",", "X", ",", "y", ",", "w", "=", "None", ")", ":", "\n", "        ", "X", "=", "self", ".", "poly", ".", "fit_transform", "(", "X", ")", "\n", "return", "self", ".", "est", ".", "gradient", "(", "X", ",", "y", ",", "w", "=", "w", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jon--lee_aor.tools.poly_est.PolyEst.alpha": [[60, 63], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "alpha", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "est", ".", "alpha", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jon--lee_aor.tools.poly_est.PolyEst.loss": [[56, 59], ["poly_est.PolyEst.poly.fit_transform", "poly_est.PolyEst.est.loss"], "methods", ["home.repos.pwc.inspect_result.jon--lee_aor.tools.lr.LR.loss"], ["", "def", "loss", "(", "self", ",", "X", ",", "y", ",", "w", "=", "None", ")", ":", "\n", "        ", "X", "=", "self", ".", "poly", ".", "fit_transform", "(", "X", ")", "\n", "return", "self", ".", "est", ".", "loss", "(", "X", ",", "y", ",", "w", "=", "w", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jon--lee_aor.tools.learner.Learner.__init__": [[13, 18], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "est", ",", "sup", "=", "None", ")", ":", "\n", "        ", "self", ".", "X", "=", "[", "]", "\n", "self", ".", "y", "=", "[", "]", "\n", "self", ".", "est", "=", "est", "\n", "self", ".", "one_class_error", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.jon--lee_aor.tools.learner.Learner.add_data": [[19, 25], ["type", "type", "len", "len"], "methods", ["None"], ["", "def", "add_data", "(", "self", ",", "states", ",", "actions", ")", ":", "\n", "        ", "assert", "type", "(", "states", ")", "==", "list", "\n", "assert", "type", "(", "actions", ")", "==", "list", "\n", "assert", "len", "(", "states", ")", "==", "len", "(", "actions", ")", "\n", "self", ".", "X", "+=", "states", "\n", "self", ".", "y", "+=", "actions", "\n", "\n"]], "home.repos.pwc.inspect_result.jon--lee_aor.tools.learner.Learner.set_data": [[26, 32], ["type", "type", "len", "len"], "methods", ["None"], ["", "def", "set_data", "(", "self", ",", "states", ",", "actions", ")", ":", "\n", "        ", "assert", "type", "(", "states", ")", "==", "list", "\n", "assert", "type", "(", "actions", ")", "==", "list", "\n", "assert", "len", "(", "states", ")", "==", "len", "(", "actions", ")", "\n", "self", ".", "X", "=", "states", "\n", "self", ".", "y", "=", "actions", "\n", "\n"]], "home.repos.pwc.inspect_result.jon--lee_aor.tools.learner.Learner.set_update": [[33, 40], ["type", "type", "type", "len", "len"], "methods", ["None"], ["", "def", "set_update", "(", "self", ",", "states", ",", "actions", ")", ":", "\n", "        ", "assert", "type", "(", "states", ")", "==", "list", "\n", "assert", "type", "(", "states", ")", "==", "list", "\n", "assert", "type", "(", "actions", ")", "==", "list", "\n", "assert", "len", "(", "states", ")", "==", "len", "(", "actions", ")", "\n", "self", ".", "X_update", "=", "states", "\n", "self", ".", "y_update", "=", "actions", "\n", "\n"]], "home.repos.pwc.inspect_result.jon--lee_aor.tools.learner.Learner.clear_data": [[41, 44], ["None"], "methods", ["None"], ["", "def", "clear_data", "(", "self", ")", ":", "\n", "        ", "self", ".", "X", "=", "[", "]", "\n", "self", ".", "y", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.jon--lee_aor.tools.learner.Learner.train": [[45, 56], ["learner.Learner.est.fit", "print", "str", "learner.Learner.est.score"], "methods", ["home.repos.pwc.inspect_result.jon--lee_aor.tools.lr.LR.fit", "home.repos.pwc.inspect_result.jon--lee_aor.tools.poly_est.PolyEst.score"], ["", "def", "train", "(", "self", ",", "verbose", "=", "False", ")", ":", "\n", "        ", "X_train", ",", "y_train", "=", "self", ".", "X", ",", "self", ".", "y", "\n", "try", ":", "\n", "            ", "self", ".", "est", ".", "fit", "(", "X_train", ",", "y_train", ")", "\n", "self", ".", "one_class_error", "=", "None", "\n", "", "except", "ValueError", ":", "\n", "            ", "self", ".", "one_class_error", "=", "y_train", "[", "0", "]", "\n", "\n", "\n", "", "if", "verbose", "==", "True", ":", "\n", "            ", "print", "(", "\"Train score: \"", "+", "str", "(", "self", ".", "est", ".", "score", "(", "X_train", ",", "y_train", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jon--lee_aor.tools.learner.Learner.update": [[57, 60], ["learner.Learner.est.update"], "methods", ["home.repos.pwc.inspect_result.jon--lee_aor.tools.lr.LR.update"], ["", "", "def", "update", "(", "self", ",", "T", ")", ":", "\n", "        ", "X_train", ",", "y_train", "=", "self", ".", "X_update", ",", "self", ".", "y_update", "\n", "self", ".", "est", ".", "update", "(", "X_train", ",", "y_train", ",", "T", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jon--lee_aor.tools.learner.Learner.multiple_update": [[62, 65], ["learner.Learner.est.multiple_update"], "methods", ["home.repos.pwc.inspect_result.jon--lee_aor.tools.lr.LR.multiple_update"], ["", "def", "multiple_update", "(", "self", ",", "T", ")", ":", "\n", "        ", "X_train", ",", "y_train", "=", "self", ".", "X_update", ",", "self", ".", "y_update", "\n", "self", ".", "est", ".", "multiple_update", "(", "X_train", ",", "y_train", ",", "20", ",", "T", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jon--lee_aor.tools.learner.Learner.acc": [[67, 73], ["learner.Learner.est.score", "numpy.mean", "numpy.ones", "len", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.jon--lee_aor.tools.poly_est.PolyEst.score", "home.repos.pwc.inspect_result.jon--lee_aor.expert.tf_util.mean"], ["", "def", "acc", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "one_class_error", "is", "not", "None", ":", "\n", "            ", "predictions", "=", "np", ".", "ones", "(", "len", "(", "self", ".", "y", ")", ")", "*", "self", ".", "one_class_error", "\n", "return", "np", ".", "mean", "(", "(", "predictions", "==", "np", ".", "array", "(", "self", ".", "y", ")", ")", ".", "astype", "(", "int", ")", ")", "\n", "\n", "", "return", "self", ".", "est", ".", "score", "(", "self", ".", "X", ",", "self", ".", "y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jon--lee_aor.tools.learner.Learner.intended_action": [[74, 81], ["learner.Learner.est.predict", "numpy.random.choice"], "methods", ["home.repos.pwc.inspect_result.jon--lee_aor.tools.lr.LR.predict"], ["", "def", "intended_action", "(", "self", ",", "s", ")", ":", "\n", "        ", "if", "self", ".", "one_class_error", "is", "not", "None", ":", "\n", "            ", "return", "self", ".", "one_class_error", "\n", "", "try", ":", "\n", "            ", "return", "self", ".", "est", ".", "predict", "(", "[", "s", "]", ")", "[", "0", "]", "\n", "", "except", "NotFittedError", ":", "\n", "            ", "return", "np", ".", "random", ".", "choice", "(", "[", "0", ",", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jon--lee_aor.tools.learner.Learner.sample_action": [[82, 84], ["learner.Learner.intended_action"], "methods", ["home.repos.pwc.inspect_result.jon--lee_aor.tools.learner.Learner.intended_action"], ["", "", "def", "sample_action", "(", "self", ",", "s", ")", ":", "\n", "        ", "return", "self", ".", "intended_action", "(", "s", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jon--lee_aor.tools.learner.Learner.decision_function": [[86, 90], ["learner.Learner.est.decision_function"], "methods", ["home.repos.pwc.inspect_result.jon--lee_aor.tools.learner.Learner.decision_function"], ["", "def", "decision_function", "(", "self", ",", "s", ")", ":", "\n", "        ", "if", "self", ".", "one_class_error", "is", "not", "None", ":", "\n", "            ", "return", "self", ".", "one_class_error", "\n", "", "return", "self", ".", "est", ".", "decision_function", "(", "[", "s", "]", ")", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.jon--lee_aor.tools.lr.LR.__init__": [[9, 18], ["Exception"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "alpha", ",", "eta", ",", "intercept", "=", "False", ",", "p", "=", "None", ")", ":", "\n", "\n", "        ", "self", ".", "alpha", "=", "alpha", "\n", "self", ".", "eta", "=", "eta", "\n", "self", ".", "coef_", "=", "None", "\n", "self", ".", "p", "=", "p", "\n", "self", ".", "intercept", "=", "intercept", "\n", "if", "intercept", ":", "\n", "            ", "raise", "Exception", "(", "\"didn't implement intercept yet\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jon--lee_aor.tools.lr.LR.enforce": [[20, 24], ["numpy.array", "numpy.array", "len", "len"], "methods", ["None"], ["", "", "def", "enforce", "(", "self", ",", "X", ",", "y", ")", ":", "\n", "        ", "X", "=", "np", ".", "array", "(", "X", ")", "\n", "y", "=", "np", ".", "array", "(", "y", ")", "\n", "assert", "len", "(", "X", ")", "==", "len", "(", "y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jon--lee_aor.tools.lr.LR.multiple_update": [[25, 47], ["numpy.array", "numpy.array", "numpy.array.copy", "numpy.array.copy", "numpy.array.T.dot", "numpy.array.T.dot", "range", "numpy.zeros", "numpy.array.T.dot", "numpy.array.dot"], "methods", ["None"], ["", "def", "multiple_update", "(", "self", ",", "X", ",", "y", ",", "K", ",", "T", ")", ":", "\n", "        ", "X", "=", "np", ".", "array", "(", "X", ")", "\n", "y", "=", "np", ".", "array", "(", "y", ")", "\n", "X_original", "=", "X", ".", "copy", "(", ")", "\n", "y_original", "=", "y", ".", "copy", "(", ")", "\n", "\n", "n", "=", "X", ".", "shape", "[", "0", "]", "\n", "d", "=", "X", ".", "shape", "[", "1", "]", "\n", "p", "=", "y", ".", "shape", "[", "1", "]", "\n", "if", "self", ".", "coef_", "is", "None", ":", "\n", "            ", "self", ".", "coef_", "=", "np", ".", "zeros", "(", "(", "d", ",", "p", ")", ")", "\n", "", "w", "=", "self", ".", "coef_", "\n", "\n", "var", "=", "X", ".", "T", ".", "dot", "(", "X", ")", "\n", "cov", "=", "X", ".", "T", ".", "dot", "(", "y", ")", "\n", "\n", "for", "_", "in", "range", "(", "K", ")", ":", "\n", "            ", "grad", "=", "2.0", "/", "n", "*", "X", ".", "T", ".", "dot", "(", "X", ".", "dot", "(", "w", ")", "-", "y", ")", "+", "self", ".", "alpha", "*", "w", "\n", "# w = w - self.eta / np.sqrt(T+1) * grad / K", "\n", "w", "=", "w", "-", "self", ".", "eta", "*", "grad", "/", "K", "\n", "\n", "", "self", ".", "coef_", "=", "w", "\n", "\n"]], "home.repos.pwc.inspect_result.jon--lee_aor.tools.lr.LR.update": [[49, 71], ["numpy.array", "numpy.array", "numpy.array", "numpy.array.copy", "numpy.array.copy", "print", "numpy.zeros", "numpy.array.T.dot", "str", "numpy.array.dot", "numpy.linalg.norm"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "X", ",", "y", ",", "T", ")", ":", "\n", "\n", "        ", "X", "=", "np", ".", "array", "(", "X", ")", "\n", "X", "=", "np", ".", "array", "(", "X", ")", "\n", "y", "=", "np", ".", "array", "(", "y", ")", "\n", "X_original", "=", "X", ".", "copy", "(", ")", "\n", "y_original", "=", "y", ".", "copy", "(", ")", "\n", "\n", "n", "=", "X", ".", "shape", "[", "0", "]", "\n", "d", "=", "X", ".", "shape", "[", "1", "]", "\n", "p", "=", "y", ".", "shape", "[", "1", "]", "\n", "if", "self", ".", "coef_", "is", "None", ":", "\n", "            ", "self", ".", "coef_", "=", "np", ".", "zeros", "(", "(", "d", ",", "p", ")", ")", "\n", "", "w", "=", "self", ".", "coef_", "\n", "\n", "\n", "grad", "=", "2.0", "/", "n", "*", "X", ".", "T", ".", "dot", "(", "X", ".", "dot", "(", "w", ")", "-", "y", ")", "+", "self", ".", "alpha", "*", "w", "\n", "print", "(", "\"\\t\\t Gradient Norm: \"", "+", "str", "(", "np", ".", "linalg", ".", "norm", "(", "grad", ")", "/", "(", "d", "*", "p", ")", ")", ")", "\n", "# w = w - self.eta / np.sqrt(T+1) * grad", "\n", "w", "=", "w", "-", "self", ".", "eta", "*", "grad", "\n", "\n", "self", ".", "coef_", "=", "w", "\n", "\n"]], "home.repos.pwc.inspect_result.jon--lee_aor.tools.lr.LR.fit": [[72, 96], ["numpy.array", "numpy.array", "numpy.hstack.copy", "numpy.array.copy", "numpy.zeros", "numpy.zeros", "numpy.hstack.T.dot", "numpy.linalg.inv().dot", "numpy.hstack", "numpy.zeros", "numpy.linalg.inv", "numpy.ones", "numpy.hstack.T.dot", "numpy.identity"], "methods", ["None"], ["", "def", "fit", "(", "self", ",", "X", ",", "y", ",", "w", "=", "None", ",", "epochs", "=", "1000", ")", ":", "\n", "        ", "X", "=", "np", ".", "array", "(", "X", ")", "\n", "y", "=", "np", ".", "array", "(", "y", ")", "\n", "X_original", "=", "X", ".", "copy", "(", ")", "\n", "y_original", "=", "y", ".", "copy", "(", ")", "\n", "\n", "if", "self", ".", "intercept", ":", "\n", "            ", "X", "=", "np", ".", "hstack", "(", "(", "X", ",", "np", ".", "ones", "(", "(", "X", ".", "shape", "[", "0", "]", ",", "1", ")", ")", ")", ")", "\n", "\n", "", "d", "=", "X", ".", "shape", "[", "1", "]", "\n", "p", "=", "y", ".", "shape", "[", "1", "]", "\n", "if", "self", ".", "coef_", "is", "None", ":", "\n", "            ", "self", ".", "coef_", "=", "np", ".", "zeros", "(", "(", "d", ",", "p", ")", ")", "\n", "", "if", "not", "w", "is", "None", ":", "\n", "            ", "self", ".", "coef_", "=", "w", "\n", "", "w", "=", "self", ".", "coef_", "\n", "\n", "\n", "loss_history", "=", "np", ".", "zeros", "(", "epochs", "-", "1", ")", "\n", "param_history", "=", "np", ".", "zeros", "(", "(", "epochs", "-", "1", ",", "d", ")", ")", "\n", "\n", "cov", "=", "X", ".", "T", ".", "dot", "(", "y", ")", "\n", "self", ".", "coef_", "=", "np", ".", "linalg", ".", "inv", "(", "X", ".", "T", ".", "dot", "(", "X", ")", "+", "X", ".", "shape", "[", "0", "]", "*", "self", ".", "alpha", "/", "2.0", "*", "np", ".", "identity", "(", "d", ")", ")", ".", "dot", "(", "cov", ")", "\n", "return", "loss_history", ",", "param_history", "\n", "\n"]], "home.repos.pwc.inspect_result.jon--lee_aor.tools.lr.LR.gradient": [[98, 105], ["numpy.array", "numpy.array", "lr.LR.enforce", "numpy.array.T.dot", "numpy.array.dot"], "methods", ["home.repos.pwc.inspect_result.jon--lee_aor.tools.lr.LR.enforce"], ["", "def", "gradient", "(", "self", ",", "X", ",", "y", ",", "w", ")", ":", "\n", "        ", "X", "=", "np", ".", "array", "(", "X", ")", "\n", "y", "=", "np", ".", "array", "(", "y", ")", "\n", "self", ".", "enforce", "(", "X", ",", "y", ")", "\n", "n", "=", "X", ".", "shape", "[", "0", "]", "\n", "grad", "=", "2.0", "/", "n", "*", "X", ".", "T", ".", "dot", "(", "X", ".", "dot", "(", "w", ")", "-", "y", ")", "+", "self", ".", "alpha", "*", "w", "\n", "return", "grad", "\n", "\n"]], "home.repos.pwc.inspect_result.jon--lee_aor.tools.lr.LR._loss": [[106, 115], ["numpy.sum", "numpy.square", "numpy.square", "numpy.linalg.norm", "X.dot"], "methods", ["home.repos.pwc.inspect_result.jon--lee_aor.expert.tf_util.sum"], ["", "def", "_loss", "(", "self", ",", "X", ",", "y", ",", "w", "=", "None", ")", ":", "\n", "        ", "if", "w", "is", "None", ":", "\n", "            ", "w", "=", "self", ".", "coef_", "\n", "\n", "", "n", "=", "X", ".", "shape", "[", "0", "]", "\n", "diff", "=", "np", ".", "sum", "(", "np", ".", "square", "(", "X", ".", "dot", "(", "w", ")", "-", "y", ")", ")", "/", "n", "\n", "reg", "=", "self", ".", "alpha", "*", ".5", "*", "np", ".", "square", "(", "np", ".", "linalg", ".", "norm", "(", "w", ")", ")", "\n", "\n", "return", "diff", "+", "reg", "\n", "\n"]], "home.repos.pwc.inspect_result.jon--lee_aor.tools.lr.LR.loss": [[117, 136], ["numpy.array", "numpy.array", "numpy.hstack.copy", "numpy.array.copy", "lr.LR.enforce", "lr.LR._loss", "numpy.hstack", "numpy.zeros", "numpy.ones"], "methods", ["home.repos.pwc.inspect_result.jon--lee_aor.tools.lr.LR.enforce", "home.repos.pwc.inspect_result.jon--lee_aor.tools.lr.LR._loss"], ["", "def", "loss", "(", "self", ",", "X", ",", "y", ",", "w", "=", "None", ")", ":", "\n", "        ", "X", "=", "np", ".", "array", "(", "X", ")", "\n", "y", "=", "np", ".", "array", "(", "y", ")", "\n", "\n", "X_original", "=", "X", ".", "copy", "(", ")", "\n", "y_original", "=", "y", ".", "copy", "(", ")", "\n", "\n", "if", "self", ".", "intercept", ":", "\n", "            ", "X", "=", "np", ".", "hstack", "(", "(", "X", ",", "np", ".", "ones", "(", "(", "X", ".", "shape", "[", "0", "]", ",", "1", ")", ")", ")", ")", "\n", "", "self", ".", "enforce", "(", "X", ",", "y", ")", "\n", "\n", "d", "=", "X", ".", "shape", "[", "1", "]", "\n", "p", "=", "y", ".", "shape", "[", "1", "]", "\n", "if", "self", ".", "coef_", "is", "None", ":", "\n", "            ", "self", ".", "coef_", "=", "np", ".", "zeros", "(", "(", "d", ",", "p", ")", ")", "\n", "", "if", "w", "is", "None", ":", "\n", "            ", "w", "=", "self", ".", "coef_", "\n", "\n", "", "return", "self", ".", "_loss", "(", "X", ",", "y", ",", "w", "=", "w", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jon--lee_aor.tools.lr.LR.predict": [[137, 143], ["numpy.array", "numpy.array.dot", "numpy.zeros"], "methods", ["None"], ["", "def", "predict", "(", "self", ",", "X", ")", ":", "\n", "        ", "X", "=", "np", ".", "array", "(", "X", ")", "\n", "if", "self", ".", "coef_", "is", "None", ":", "\n", "            ", "return", "np", ".", "zeros", "(", "(", "X", ".", "shape", "[", "0", "]", ",", "self", ".", "p", ")", ")", "\n", "", "predictions", "=", "X", ".", "dot", "(", "self", ".", "coef_", ")", "\n", "return", "predictions", "\n", "\n"]], "home.repos.pwc.inspect_result.jon--lee_aor.expert.load_policy.load_policy": [[8, 70], ["tensorflow.placeholder", "load_policy.load_policy.build_policy"], "function", ["None"], ["def", "load_policy", "(", "filename", ")", ":", "\n", "    ", "with", "open", "(", "filename", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "data", "=", "pickle", ".", "loads", "(", "f", ".", "read", "(", ")", ")", "\n", "\n", "# assert len(data.keys()) == 2", "\n", "", "nonlin_type", "=", "data", "[", "'nonlin_type'", "]", "\n", "# print nonlin_type", "\n", "policy_type", "=", "[", "k", "for", "k", "in", "data", ".", "keys", "(", ")", "if", "k", "!=", "'nonlin_type'", "]", "[", "0", "]", "\n", "\n", "assert", "policy_type", "==", "'GaussianPolicy'", ",", "'Policy type {} not supported'", ".", "format", "(", "policy_type", ")", "\n", "policy_params", "=", "data", "[", "policy_type", "]", "\n", "\n", "assert", "set", "(", "policy_params", ".", "keys", "(", ")", ")", "==", "{", "'logstdevs_1_Da'", ",", "'hidden'", ",", "'obsnorm'", ",", "'out'", "}", "\n", "\n", "# Keep track of input and output dims (i.e. observation and action dims) for the user", "\n", "\n", "def", "build_policy", "(", "obs_bo", ")", ":", "\n", "        ", "def", "read_layer", "(", "l", ")", ":", "\n", "            ", "assert", "list", "(", "l", ".", "keys", "(", ")", ")", "==", "[", "'AffineLayer'", "]", "\n", "assert", "sorted", "(", "l", "[", "'AffineLayer'", "]", ".", "keys", "(", ")", ")", "==", "[", "'W'", ",", "'b'", "]", "\n", "return", "l", "[", "'AffineLayer'", "]", "[", "'W'", "]", ".", "astype", "(", "np", ".", "float32", ")", ",", "l", "[", "'AffineLayer'", "]", "[", "'b'", "]", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n", "", "def", "apply_nonlin", "(", "x", ")", ":", "\n", "            ", "if", "nonlin_type", "==", "'lrelu'", ":", "\n", "                ", "return", "tf_util", ".", "lrelu", "(", "x", ",", "leak", "=", ".01", ")", "# openai/imitation nn.py:233", "\n", "", "elif", "nonlin_type", "==", "'tanh'", ":", "\n", "                ", "return", "tf", ".", "tanh", "(", "x", ")", "\n", "", "else", ":", "\n", "                ", "raise", "NotImplementedError", "(", "nonlin_type", ")", "\n", "\n", "# Build the policy. First, observation normalization.", "\n", "", "", "assert", "list", "(", "policy_params", "[", "'obsnorm'", "]", ".", "keys", "(", ")", ")", "==", "[", "'Standardizer'", "]", "\n", "obsnorm_mean", "=", "policy_params", "[", "'obsnorm'", "]", "[", "'Standardizer'", "]", "[", "'mean_1_D'", "]", "\n", "obsnorm_meansq", "=", "policy_params", "[", "'obsnorm'", "]", "[", "'Standardizer'", "]", "[", "'meansq_1_D'", "]", "\n", "obsnorm_stdev", "=", "np", ".", "sqrt", "(", "np", ".", "maximum", "(", "0", ",", "obsnorm_meansq", "-", "np", ".", "square", "(", "obsnorm_mean", ")", ")", ")", "\n", "# log('obs', obsnorm_mean.shape, obsnorm_stdev.shape)", "\n", "normedobs_bo", "=", "(", "obs_bo", "-", "obsnorm_mean", ")", "/", "(", "obsnorm_stdev", "+", "1e-6", ")", "# 1e-6 constant from Standardizer class in nn.py:409 in openai/imitation", "\n", "\n", "curr_activations_bd", "=", "normedobs_bo", "\n", "\n", "# Hidden layers next", "\n", "assert", "list", "(", "policy_params", "[", "'hidden'", "]", ".", "keys", "(", ")", ")", "==", "[", "'FeedforwardNet'", "]", "\n", "layer_params", "=", "policy_params", "[", "'hidden'", "]", "[", "'FeedforwardNet'", "]", "\n", "for", "layer_name", "in", "sorted", "(", "layer_params", ".", "keys", "(", ")", ")", ":", "\n", "            ", "l", "=", "layer_params", "[", "layer_name", "]", "\n", "W", ",", "b", "=", "read_layer", "(", "l", ")", "\n", "# print \"\\nW: \" + str(W.shape)", "\n", "# print \"b: \" + str(b.shape)", "\n", "curr_activations_bd", "=", "apply_nonlin", "(", "tf", ".", "matmul", "(", "curr_activations_bd", ",", "W", ")", "+", "b", ")", "\n", "\n", "# Output layer", "\n", "", "W", ",", "b", "=", "read_layer", "(", "policy_params", "[", "'out'", "]", ")", "\n", "# print \"\\nOutput:\"", "\n", "# print \"W: \" + str(W.shape)", "\n", "# print \"b: \" + str(b.shape)", "\n", "output_bo", "=", "tf", ".", "matmul", "(", "curr_activations_bd", ",", "W", ")", "+", "b", "\n", "return", "output_bo", "\n", "\n", "", "obs_bo", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "None", ",", "None", "]", ")", "\n", "a_ba", "=", "build_policy", "(", "obs_bo", ")", "\n", "policy_fn", "=", "tf_util", ".", "function", "(", "[", "obs_bo", "]", ",", "a_ba", ")", "\n", "return", "policy_fn", "\n", "", ""]], "home.repos.pwc.inspect_result.jon--lee_aor.expert.run_expert.main": [[19, 70], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "log", "load_policy.load_policy", "log", "tensorflow.Session", "tf_util.initialize", "gym.make", "range", "log", "log", "log", "log", "gym.make.reset", "returns.append", "numpy.mean", "numpy.std", "numpy.array", "numpy.array", "load_policy.load_policy.", "observations.append", "actions.append", "gym.make.step", "gym.make.render", "log"], "function", ["home.repos.pwc.inspect_result.jon--lee_aor.expert.load_policy.load_policy", "home.repos.pwc.inspect_result.jon--lee_aor.expert.tf_util.initialize", "home.repos.pwc.inspect_result.jon--lee_aor.expert.tf_util.reset", "home.repos.pwc.inspect_result.jon--lee_aor.expert.tf_util.mean", "home.repos.pwc.inspect_result.jon--lee_aor.expert.tf_util.std"], ["def", "main", "(", ")", ":", "\n", "    ", "import", "argparse", "\n", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "'expert_policy_file'", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'envname'", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--render'", ",", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "\"--max_timesteps\"", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--num_rollouts'", ",", "type", "=", "int", ",", "default", "=", "20", ",", "\n", "help", "=", "'Number of expert roll outs'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "log", "(", "'loading and building expert policy'", ")", "\n", "policy_fn", "=", "load_policy", ".", "load_policy", "(", "args", ".", "expert_policy_file", ")", "\n", "log", "(", "'loaded and built'", ")", "\n", "\n", "with", "tf", ".", "Session", "(", ")", ":", "\n", "        ", "tf_util", ".", "initialize", "(", ")", "\n", "\n", "import", "gym", "\n", "env", "=", "gym", ".", "make", "(", "args", ".", "envname", ")", "\n", "max_steps", "=", "args", ".", "max_timesteps", "or", "env", ".", "spec", ".", "timestep_limit", "\n", "\n", "returns", "=", "[", "]", "\n", "observations", "=", "[", "]", "\n", "actions", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "args", ".", "num_rollouts", ")", ":", "\n", "            ", "log", "(", "'iter'", ",", "i", ")", "\n", "obs", "=", "env", ".", "reset", "(", ")", "\n", "done", "=", "False", "\n", "totalr", "=", "0.", "\n", "steps", "=", "0", "\n", "while", "not", "done", ":", "\n", "                ", "action", "=", "policy_fn", "(", "obs", "[", "None", ",", ":", "]", ")", "\n", "observations", ".", "append", "(", "obs", ")", "\n", "actions", ".", "append", "(", "action", ")", "\n", "obs", ",", "r", ",", "done", ",", "_", "=", "env", ".", "step", "(", "action", ")", "\n", "totalr", "+=", "r", "\n", "steps", "+=", "1", "\n", "if", "args", ".", "render", ":", "\n", "                    ", "env", ".", "render", "(", ")", "\n", "", "if", "steps", "%", "100", "==", "0", ":", "log", "(", "\"%i/%i\"", "%", "(", "steps", ",", "max_steps", ")", ")", "\n", "if", "steps", ">=", "max_steps", ":", "\n", "                    ", "break", "\n", "", "", "returns", ".", "append", "(", "totalr", ")", "\n", "\n", "", "log", "(", "'returns'", ",", "returns", ")", "\n", "log", "(", "'mean return'", ",", "np", ".", "mean", "(", "returns", ")", ")", "\n", "log", "(", "'std of return'", ",", "np", ".", "std", "(", "returns", ")", ")", "\n", "\n", "expert_data", "=", "{", "'observations'", ":", "np", ".", "array", "(", "observations", ")", ",", "\n", "'actions'", ":", "np", ".", "array", "(", "actions", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.jon--lee_aor.expert.tf_util._Function.__init__": [[230, 238], ["all", "tensorflow.group", "list", "len"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "inputs", ",", "outputs", ",", "updates", ",", "givens", ",", "check_nan", "=", "False", ")", ":", "\n", "        ", "assert", "all", "(", "len", "(", "i", ".", "op", ".", "inputs", ")", "==", "0", "for", "i", "in", "inputs", ")", ",", "\"inputs should all be placeholders\"", "\n", "self", ".", "inputs", "=", "inputs", "\n", "updates", "=", "updates", "or", "[", "]", "\n", "self", ".", "update_group", "=", "tf", ".", "group", "(", "*", "updates", ")", "\n", "self", ".", "outputs_update", "=", "list", "(", "outputs", ")", "+", "[", "self", ".", "update_group", "]", "\n", "self", ".", "givens", "=", "{", "}", "if", "givens", "is", "None", "else", "givens", "\n", "self", ".", "check_nan", "=", "check_nan", "\n", "", "def", "__call__", "(", "self", ",", "*", "inputvals", ")", ":", "\n"]], "home.repos.pwc.inspect_result.jon--lee_aor.expert.tf_util._Function.__call__": [[238, 247], ["dict", "dict.update", "len", "len", "zip", "get_session().run", "any", "RuntimeError", "tf_util.get_session", "numpy.isnan().any", "numpy.isnan"], "methods", ["home.repos.pwc.inspect_result.jon--lee_aor.tools.lr.LR.update", "home.repos.pwc.inspect_result.jon--lee_aor.tools.lqr.run", "home.repos.pwc.inspect_result.jon--lee_aor.expert.tf_util.get_session"], ["", "def", "__call__", "(", "self", ",", "*", "inputvals", ")", ":", "\n", "        ", "assert", "len", "(", "inputvals", ")", "==", "len", "(", "self", ".", "inputs", ")", "\n", "feed_dict", "=", "dict", "(", "zip", "(", "self", ".", "inputs", ",", "inputvals", ")", ")", "\n", "feed_dict", ".", "update", "(", "self", ".", "givens", ")", "\n", "results", "=", "get_session", "(", ")", ".", "run", "(", "self", ".", "outputs_update", ",", "feed_dict", "=", "feed_dict", ")", "[", ":", "-", "1", "]", "\n", "if", "self", ".", "check_nan", ":", "\n", "            ", "if", "any", "(", "np", ".", "isnan", "(", "r", ")", ".", "any", "(", ")", "for", "r", "in", "results", ")", ":", "\n", "                ", "raise", "RuntimeError", "(", "\"Nan detected\"", ")", "\n", "", "", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.jon--lee_aor.expert.tf_util._MemFriendlyFunction.__init__": [[256, 261], ["list"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "nondata_inputs", ",", "data_inputs", ",", "outputs", ",", "batch_size", ")", ":", "\n", "        ", "self", ".", "nondata_inputs", "=", "nondata_inputs", "\n", "self", ".", "data_inputs", "=", "data_inputs", "\n", "self", ".", "outputs", "=", "list", "(", "outputs", ")", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "", "def", "__call__", "(", "self", ",", "*", "inputvals", ")", ":", "\n"]], "home.repos.pwc.inspect_result.jon--lee_aor.expert.tf_util._MemFriendlyFunction.__call__": [[261, 282], ["dict", "range", "range", "len", "zip", "zip", "tensorflow.get_default_session().run", "len", "len", "len", "len", "len", "range", "tensorflow.get_default_session", "len", "tf_util.min"], "methods", ["home.repos.pwc.inspect_result.jon--lee_aor.tools.lqr.run", "home.repos.pwc.inspect_result.jon--lee_aor.expert.tf_util.min"], ["", "def", "__call__", "(", "self", ",", "*", "inputvals", ")", ":", "\n", "        ", "assert", "len", "(", "inputvals", ")", "==", "len", "(", "self", ".", "nondata_inputs", ")", "+", "len", "(", "self", ".", "data_inputs", ")", "\n", "nondata_vals", "=", "inputvals", "[", "0", ":", "len", "(", "self", ".", "nondata_inputs", ")", "]", "\n", "data_vals", "=", "inputvals", "[", "len", "(", "self", ".", "nondata_inputs", ")", ":", "]", "\n", "feed_dict", "=", "dict", "(", "zip", "(", "self", ".", "nondata_inputs", ",", "nondata_vals", ")", ")", "\n", "n", "=", "data_vals", "[", "0", "]", ".", "shape", "[", "0", "]", "\n", "for", "v", "in", "data_vals", "[", "1", ":", "]", ":", "\n", "            ", "assert", "v", ".", "shape", "[", "0", "]", "==", "n", "\n", "", "for", "i_start", "in", "range", "(", "0", ",", "n", ",", "self", ".", "batch_size", ")", ":", "\n", "            ", "slice_vals", "=", "[", "v", "[", "i_start", ":", "min", "(", "i_start", "+", "self", ".", "batch_size", ",", "n", ")", "]", "for", "v", "in", "data_vals", "]", "\n", "for", "(", "var", ",", "val", ")", "in", "zip", "(", "self", ".", "data_inputs", ",", "slice_vals", ")", ":", "\n", "                ", "feed_dict", "[", "var", "]", "=", "val", "\n", "", "results", "=", "tf", ".", "get_default_session", "(", ")", ".", "run", "(", "self", ".", "outputs", ",", "feed_dict", "=", "feed_dict", ")", "\n", "if", "i_start", "==", "0", ":", "\n", "                ", "sum_results", "=", "results", "\n", "", "else", ":", "\n", "                ", "for", "i", "in", "range", "(", "len", "(", "results", ")", ")", ":", "\n", "                    ", "sum_results", "[", "i", "]", "=", "sum_results", "[", "i", "]", "+", "results", "[", "i", "]", "\n", "", "", "", "for", "i", "in", "range", "(", "len", "(", "results", ")", ")", ":", "\n", "            ", "sum_results", "[", "i", "]", "=", "sum_results", "[", "i", "]", "/", "n", "\n", "", "return", "sum_results", "\n", "\n"]], "home.repos.pwc.inspect_result.jon--lee_aor.expert.tf_util.Module.__init__": [[288, 293], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "name", ")", ":", "\n", "        ", "self", ".", "name", "=", "name", "\n", "self", ".", "first_time", "=", "True", "\n", "self", ".", "scope", "=", "None", "\n", "self", ".", "cache", "=", "{", "}", "\n", "", "def", "__call__", "(", "self", ",", "*", "args", ")", ":", "\n"]], "home.repos.pwc.inspect_result.jon--lee_aor.expert.tf_util.Module.__call__": [[293, 309], ["log", "tensorflow.variable_scope", "tf_util.Module._call", "tensorflow.get_variable_scope", "log", "log"], "methods", ["home.repos.pwc.inspect_result.jon--lee_aor.expert.tf_util.Module._call"], ["", "def", "__call__", "(", "self", ",", "*", "args", ")", ":", "\n", "        ", "if", "args", "in", "self", ".", "cache", ":", "\n", "            ", "log", "(", "\"(%s) retrieving value from cache\"", "%", "self", ".", "name", ")", "\n", "return", "self", ".", "cache", "[", "args", "]", "\n", "", "with", "tf", ".", "variable_scope", "(", "self", ".", "name", ",", "reuse", "=", "not", "self", ".", "first_time", ")", ":", "\n", "            ", "scope", "=", "tf", ".", "get_variable_scope", "(", ")", ".", "name", "\n", "if", "self", ".", "first_time", ":", "\n", "                ", "self", ".", "scope", "=", "scope", "\n", "log", "(", "\"(%s) running function for the first time\"", "%", "self", ".", "name", ")", "\n", "", "else", ":", "\n", "                ", "assert", "self", ".", "scope", "==", "scope", ",", "\"Tried calling function with a different scope\"", "\n", "log", "(", "\"(%s) running function on new inputs\"", "%", "self", ".", "name", ")", "\n", "", "self", ".", "first_time", "=", "False", "\n", "out", "=", "self", ".", "_call", "(", "*", "args", ")", "\n", "", "self", ".", "cache", "[", "args", "]", "=", "out", "\n", "return", "out", "\n", "", "def", "_call", "(", "self", ",", "*", "args", ")", ":", "\n"]], "home.repos.pwc.inspect_result.jon--lee_aor.expert.tf_util.Module._call": [[309, 311], ["None"], "methods", ["None"], ["", "def", "_call", "(", "self", ",", "*", "args", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.jon--lee_aor.expert.tf_util.Module.trainable_variables": [[312, 316], ["tensorflow.get_collection"], "methods", ["None"], ["", "@", "property", "\n", "def", "trainable_variables", "(", "self", ")", ":", "\n", "        ", "assert", "self", ".", "scope", "is", "not", "None", ",", "\"need to call module once before getting variables\"", "\n", "return", "tf", ".", "get_collection", "(", "tf", ".", "GraphKeys", ".", "TRAINABLE_VARIABLES", ",", "self", ".", "scope", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jon--lee_aor.expert.tf_util.Module.variables": [[317, 321], ["tensorflow.get_collection"], "methods", ["None"], ["", "@", "property", "\n", "def", "variables", "(", "self", ")", ":", "\n", "        ", "assert", "self", ".", "scope", "is", "not", "None", ",", "\"need to call module once before getting variables\"", "\n", "return", "tf", ".", "get_collection", "(", "tf", ".", "GraphKeys", ".", "VARIABLES", ",", "self", ".", "scope", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jon--lee_aor.expert.tf_util.SetFromFlat.__init__": [[401, 414], ["list", "numpy.sum", "tensorflow.placeholder", "zip", "tensorflow.group", "map", "tf_util.intprod", "assigns.append", "tf_util.intprod", "tensorflow.assign", "tensorflow.reshape"], "methods", ["home.repos.pwc.inspect_result.jon--lee_aor.expert.tf_util.sum", "home.repos.pwc.inspect_result.jon--lee_aor.expert.tf_util.intprod", "home.repos.pwc.inspect_result.jon--lee_aor.expert.tf_util.intprod"], ["    ", "def", "__init__", "(", "self", ",", "var_list", ",", "dtype", "=", "tf", ".", "float32", ")", ":", "\n", "        ", "assigns", "=", "[", "]", "\n", "shapes", "=", "list", "(", "map", "(", "var_shape", ",", "var_list", ")", ")", "\n", "total_size", "=", "np", ".", "sum", "(", "[", "intprod", "(", "shape", ")", "for", "shape", "in", "shapes", "]", ")", "\n", "\n", "self", ".", "theta", "=", "theta", "=", "tf", ".", "placeholder", "(", "dtype", ",", "[", "total_size", "]", ")", "\n", "start", "=", "0", "\n", "assigns", "=", "[", "]", "\n", "for", "(", "shape", ",", "v", ")", "in", "zip", "(", "shapes", ",", "var_list", ")", ":", "\n", "            ", "size", "=", "intprod", "(", "shape", ")", "\n", "assigns", ".", "append", "(", "tf", ".", "assign", "(", "v", ",", "tf", ".", "reshape", "(", "theta", "[", "start", ":", "start", "+", "size", "]", ",", "shape", ")", ")", ")", "\n", "start", "+=", "size", "\n", "", "self", ".", "op", "=", "tf", ".", "group", "(", "*", "assigns", ")", "\n", "", "def", "__call__", "(", "self", ",", "theta", ")", ":", "\n"]], "home.repos.pwc.inspect_result.jon--lee_aor.expert.tf_util.SetFromFlat.__call__": [[414, 416], ["get_session().run", "tf_util.get_session"], "methods", ["home.repos.pwc.inspect_result.jon--lee_aor.tools.lqr.run", "home.repos.pwc.inspect_result.jon--lee_aor.expert.tf_util.get_session"], ["", "def", "__call__", "(", "self", ",", "theta", ")", ":", "\n", "        ", "get_session", "(", ")", ".", "run", "(", "self", ".", "op", ",", "feed_dict", "=", "{", "self", ".", "theta", ":", "theta", "}", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jon--lee_aor.expert.tf_util.GetFlat.__init__": [[418, 420], ["tensorflow.concat", "tensorflow.reshape", "tf_util.numel"], "methods", ["home.repos.pwc.inspect_result.jon--lee_aor.expert.tf_util.numel"], ["    ", "def", "__init__", "(", "self", ",", "var_list", ")", ":", "\n", "        ", "self", ".", "op", "=", "tf", ".", "concat", "(", "0", ",", "[", "tf", ".", "reshape", "(", "v", ",", "[", "numel", "(", "v", ")", "]", ")", "for", "v", "in", "var_list", "]", ")", "\n", "", "def", "__call__", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.jon--lee_aor.expert.tf_util.GetFlat.__call__": [[420, 422], ["get_session().run", "tf_util.get_session"], "methods", ["home.repos.pwc.inspect_result.jon--lee_aor.tools.lqr.run", "home.repos.pwc.inspect_result.jon--lee_aor.expert.tf_util.get_session"], ["", "def", "__call__", "(", "self", ")", ":", "\n", "        ", "return", "get_session", "(", ")", ".", "run", "(", "self", ".", "op", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jon--lee_aor.expert.tf_util.sum": [[22, 24], ["tensorflow.reduce_sum"], "function", ["None"], ["def", "sum", "(", "x", ",", "axis", "=", "None", ",", "keepdims", "=", "False", ")", ":", "\n", "    ", "return", "tf", ".", "reduce_sum", "(", "x", ",", "reduction_indices", "=", "None", "if", "axis", "is", "None", "else", "[", "axis", "]", ",", "keep_dims", "=", "keepdims", ")", "\n", "", "def", "mean", "(", "x", ",", "axis", "=", "None", ",", "keepdims", "=", "False", ")", ":", "\n"]], "home.repos.pwc.inspect_result.jon--lee_aor.expert.tf_util.mean": [[24, 26], ["tensorflow.reduce_mean"], "function", ["None"], ["", "def", "mean", "(", "x", ",", "axis", "=", "None", ",", "keepdims", "=", "False", ")", ":", "\n", "    ", "return", "tf", ".", "reduce_mean", "(", "x", ",", "reduction_indices", "=", "None", "if", "axis", "is", "None", "else", "[", "axis", "]", ",", "keep_dims", "=", "keepdims", ")", "\n", "", "def", "var", "(", "x", ",", "axis", "=", "None", ",", "keepdims", "=", "False", ")", ":", "\n"]], "home.repos.pwc.inspect_result.jon--lee_aor.expert.tf_util.var": [[26, 29], ["tf_util.mean", "tf_util.mean", "tensorflow.square"], "function", ["home.repos.pwc.inspect_result.jon--lee_aor.expert.tf_util.mean", "home.repos.pwc.inspect_result.jon--lee_aor.expert.tf_util.mean"], ["", "def", "var", "(", "x", ",", "axis", "=", "None", ",", "keepdims", "=", "False", ")", ":", "\n", "    ", "meanx", "=", "mean", "(", "x", ",", "axis", "=", "axis", ",", "keepdims", "=", "keepdims", ")", "\n", "return", "mean", "(", "tf", ".", "square", "(", "x", "-", "meanx", ")", ",", "axis", "=", "axis", ",", "keepdims", "=", "keepdims", ")", "\n", "", "def", "std", "(", "x", ",", "axis", "=", "None", ",", "keepdims", "=", "False", ")", ":", "\n"]], "home.repos.pwc.inspect_result.jon--lee_aor.expert.tf_util.std": [[29, 31], ["tensorflow.sqrt", "tf_util.var"], "function", ["home.repos.pwc.inspect_result.jon--lee_aor.expert.tf_util.var"], ["", "def", "std", "(", "x", ",", "axis", "=", "None", ",", "keepdims", "=", "False", ")", ":", "\n", "    ", "return", "tf", ".", "sqrt", "(", "var", "(", "x", ",", "axis", "=", "axis", ",", "keepdims", "=", "keepdims", ")", ")", "\n", "", "def", "max", "(", "x", ",", "axis", "=", "None", ",", "keepdims", "=", "False", ")", ":", "\n"]], "home.repos.pwc.inspect_result.jon--lee_aor.expert.tf_util.max": [[31, 33], ["tensorflow.reduce_max"], "function", ["None"], ["", "def", "max", "(", "x", ",", "axis", "=", "None", ",", "keepdims", "=", "False", ")", ":", "\n", "    ", "return", "tf", ".", "reduce_max", "(", "x", ",", "reduction_indices", "=", "None", "if", "axis", "is", "None", "else", "[", "axis", "]", ",", "keep_dims", "=", "keepdims", ")", "\n", "", "def", "min", "(", "x", ",", "axis", "=", "None", ",", "keepdims", "=", "False", ")", ":", "\n"]], "home.repos.pwc.inspect_result.jon--lee_aor.expert.tf_util.min": [[33, 35], ["tensorflow.reduce_min"], "function", ["None"], ["", "def", "min", "(", "x", ",", "axis", "=", "None", ",", "keepdims", "=", "False", ")", ":", "\n", "    ", "return", "tf", ".", "reduce_min", "(", "x", ",", "reduction_indices", "=", "None", "if", "axis", "is", "None", "else", "[", "axis", "]", ",", "keep_dims", "=", "keepdims", ")", "\n", "", "def", "concatenate", "(", "arrs", ",", "axis", "=", "0", ")", ":", "\n"]], "home.repos.pwc.inspect_result.jon--lee_aor.expert.tf_util.concatenate": [[35, 37], ["tensorflow.concat"], "function", ["None"], ["", "def", "concatenate", "(", "arrs", ",", "axis", "=", "0", ")", ":", "\n", "    ", "return", "tf", ".", "concat", "(", "axis", ",", "arrs", ")", "\n", "", "def", "argmax", "(", "x", ",", "axis", "=", "None", ")", ":", "\n"]], "home.repos.pwc.inspect_result.jon--lee_aor.expert.tf_util.argmax": [[37, 39], ["tensorflow.argmax"], "function", ["home.repos.pwc.inspect_result.jon--lee_aor.expert.tf_util.argmax"], ["", "def", "argmax", "(", "x", ",", "axis", "=", "None", ")", ":", "\n", "    ", "return", "tf", ".", "argmax", "(", "x", ",", "dimension", "=", "axis", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jon--lee_aor.expert.tf_util.switch": [[40, 56], ["copy.copy", "tensorflow.cond", "tf.cond.set_shape", "then_expression.get_shape", "tensorflow.cast"], "function", ["None"], ["", "def", "switch", "(", "condition", ",", "then_expression", ",", "else_expression", ")", ":", "\n", "    ", "'''Switches between two operations depending on a scalar value (int or bool).\n    Note that both `then_expression` and `else_expression`\n    should be symbolic tensors of the *same shape*.\n\n    # Arguments\n        condition: scalar tensor.\n        then_expression: TensorFlow operation.\n        else_expression: TensorFlow operation.\n    '''", "\n", "x_shape", "=", "copy", ".", "copy", "(", "then_expression", ".", "get_shape", "(", ")", ")", "\n", "x", "=", "tf", ".", "cond", "(", "tf", ".", "cast", "(", "condition", ",", "'bool'", ")", ",", "\n", "lambda", ":", "then_expression", ",", "\n", "lambda", ":", "else_expression", ")", "\n", "x", ".", "set_shape", "(", "x_shape", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.jon--lee_aor.expert.tf_util.l2loss": [[59, 64], ["len", "tensorflow.constant", "tensorflow.add_n", "tf_util.sum", "tensorflow.square"], "function", ["home.repos.pwc.inspect_result.jon--lee_aor.expert.tf_util.sum"], ["", "def", "l2loss", "(", "params", ")", ":", "\n", "    ", "if", "len", "(", "params", ")", "==", "0", ":", "\n", "        ", "return", "tf", ".", "constant", "(", "0.0", ")", "\n", "", "else", ":", "\n", "        ", "return", "tf", ".", "add_n", "(", "[", "sum", "(", "tf", ".", "square", "(", "p", ")", ")", "for", "p", "in", "params", "]", ")", "\n", "", "", "def", "lrelu", "(", "x", ",", "leak", "=", "0.2", ")", ":", "\n"]], "home.repos.pwc.inspect_result.jon--lee_aor.expert.tf_util.lrelu": [[64, 68], ["abs"], "function", ["None"], ["", "", "def", "lrelu", "(", "x", ",", "leak", "=", "0.2", ")", ":", "\n", "    ", "f1", "=", "0.5", "*", "(", "1", "+", "leak", ")", "\n", "f2", "=", "0.5", "*", "(", "1", "-", "leak", ")", "\n", "return", "f1", "*", "x", "+", "f2", "*", "abs", "(", "x", ")", "\n", "", "def", "categorical_sample_logits", "(", "X", ")", ":", "\n"]], "home.repos.pwc.inspect_result.jon--lee_aor.expert.tf_util.categorical_sample_logits": [[68, 72], ["tensorflow.random_uniform", "tf_util.argmax", "tensorflow.shape", "tensorflow.log", "tensorflow.log"], "function", ["home.repos.pwc.inspect_result.jon--lee_aor.expert.tf_util.argmax"], ["", "def", "categorical_sample_logits", "(", "X", ")", ":", "\n", "# https://github.com/tensorflow/tensorflow/issues/456", "\n", "    ", "U", "=", "tf", ".", "random_uniform", "(", "tf", ".", "shape", "(", "X", ")", ")", "\n", "return", "argmax", "(", "X", "-", "tf", ".", "log", "(", "-", "tf", ".", "log", "(", "U", ")", ")", ",", "axis", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jon--lee_aor.expert.tf_util.get_session": [[77, 79], ["tensorflow.get_default_session"], "function", ["None"], ["", "def", "get_session", "(", ")", ":", "\n", "    ", "return", "tf", ".", "get_default_session", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jon--lee_aor.expert.tf_util.single_threaded_session": [[80, 85], ["tensorflow.ConfigProto", "tensorflow.Session"], "function", ["None"], ["", "def", "single_threaded_session", "(", ")", ":", "\n", "    ", "tf_config", "=", "tf", ".", "ConfigProto", "(", "\n", "inter_op_parallelism_threads", "=", "1", ",", "\n", "intra_op_parallelism_threads", "=", "1", ")", "\n", "return", "tf", ".", "Session", "(", "config", "=", "tf_config", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jon--lee_aor.expert.tf_util.make_session": [[86, 91], ["tensorflow.ConfigProto", "tensorflow.Session"], "function", ["None"], ["", "def", "make_session", "(", "num_cpu", ")", ":", "\n", "    ", "tf_config", "=", "tf", ".", "ConfigProto", "(", "\n", "inter_op_parallelism_threads", "=", "num_cpu", ",", "\n", "intra_op_parallelism_threads", "=", "num_cpu", ")", "\n", "return", "tf", ".", "Session", "(", "config", "=", "tf_config", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jon--lee_aor.expert.tf_util.initialize": [[94, 100], ["get_session().run", "ALREADY_INITIALIZED.update", "set", "tensorflow.variables_initializer", "tensorflow.global_variables", "tf_util.get_session"], "function", ["home.repos.pwc.inspect_result.jon--lee_aor.tools.lqr.run", "home.repos.pwc.inspect_result.jon--lee_aor.tools.lr.LR.update", "home.repos.pwc.inspect_result.jon--lee_aor.expert.tf_util.get_session"], ["def", "initialize", "(", ")", ":", "\n", "# new_variables = set(tf.all_variables()) - ALREADY_INITIALIZED", "\n", "    ", "new_variables", "=", "set", "(", "tf", ".", "global_variables", "(", ")", ")", "-", "ALREADY_INITIALIZED", "\n", "# get_session().run(tf.initialize_variables(new_variables))", "\n", "get_session", "(", ")", ".", "run", "(", "tf", ".", "variables_initializer", "(", "new_variables", ")", ")", "\n", "ALREADY_INITIALIZED", ".", "update", "(", "new_variables", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jon--lee_aor.expert.tf_util.eval": [[102, 105], ["get_session().run", "tf_util.get_session"], "function", ["home.repos.pwc.inspect_result.jon--lee_aor.tools.lqr.run", "home.repos.pwc.inspect_result.jon--lee_aor.expert.tf_util.get_session"], ["", "def", "eval", "(", "expr", ",", "feed_dict", "=", "None", ")", ":", "\n", "    ", "if", "feed_dict", "is", "None", ":", "feed_dict", "=", "{", "}", "\n", "return", "get_session", "(", ")", ".", "run", "(", "expr", ",", "feed_dict", "=", "feed_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jon--lee_aor.expert.tf_util.set_value": [[106, 108], ["get_session().run", "v.assign", "tf_util.get_session"], "function", ["home.repos.pwc.inspect_result.jon--lee_aor.tools.lqr.run", "home.repos.pwc.inspect_result.jon--lee_aor.expert.tf_util.get_session"], ["", "def", "set_value", "(", "v", ",", "val", ")", ":", "\n", "    ", "get_session", "(", ")", ".", "run", "(", "v", ".", "assign", "(", "val", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jon--lee_aor.expert.tf_util.load_state": [[109, 112], ["tensorflow.train.Saver", "tf.train.Saver.restore", "tf_util.get_session"], "function", ["home.repos.pwc.inspect_result.jon--lee_aor.expert.tf_util.get_session"], ["", "def", "load_state", "(", "fname", ")", ":", "\n", "    ", "saver", "=", "tf", ".", "train", ".", "Saver", "(", ")", "\n", "saver", ".", "restore", "(", "get_session", "(", ")", ",", "fname", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jon--lee_aor.expert.tf_util.save_state": [[113, 117], ["os.makedirs", "tensorflow.train.Saver", "tf.train.Saver.save", "os.path.dirname", "tf_util.get_session"], "function", ["home.repos.pwc.inspect_result.jon--lee_aor.expert.tf_util.get_session"], ["", "def", "save_state", "(", "fname", ")", ":", "\n", "    ", "os", ".", "makedirs", "(", "os", ".", "path", ".", "dirname", "(", "fname", ")", ",", "exist_ok", "=", "True", ")", "\n", "saver", "=", "tf", ".", "train", ".", "Saver", "(", ")", "\n", "saver", ".", "save", "(", "get_session", "(", ")", ",", "fname", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jon--lee_aor.expert.tf_util.normc_initializer": [[123, 129], ["numpy.random.randn().astype", "tensorflow.constant", "numpy.sqrt", "numpy.random.randn", "numpy.square().sum", "numpy.square"], "function", ["home.repos.pwc.inspect_result.jon--lee_aor.expert.tf_util.sum"], ["", "def", "normc_initializer", "(", "std", "=", "1.0", ")", ":", "\n", "    ", "def", "_initializer", "(", "shape", ",", "dtype", "=", "None", ",", "partition_info", "=", "None", ")", ":", "#pylint: disable=W0613", "\n", "        ", "out", "=", "np", ".", "random", ".", "randn", "(", "*", "shape", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "out", "*=", "std", "/", "np", ".", "sqrt", "(", "np", ".", "square", "(", "out", ")", ".", "sum", "(", "axis", "=", "0", ",", "keepdims", "=", "True", ")", ")", "\n", "return", "tf", ".", "constant", "(", "out", ")", "\n", "", "return", "_initializer", "\n", "\n"]], "home.repos.pwc.inspect_result.jon--lee_aor.expert.tf_util.conv2d": [[131, 159], ["tensorflow.variable_scope", "tf_util.intprod", "numpy.sqrt", "tensorflow.get_variable", "tensorflow.get_variable", "int", "tf_util.intprod", "tensorflow.random_uniform_initializer", "tensorflow.image_summary", "tensorflow.nn.conv2d", "tensorflow.transpose", "x.get_shape", "tensorflow.reshape"], "function", ["home.repos.pwc.inspect_result.jon--lee_aor.expert.tf_util.intprod", "home.repos.pwc.inspect_result.jon--lee_aor.expert.tf_util.intprod", "home.repos.pwc.inspect_result.jon--lee_aor.expert.tf_util.conv2d"], ["", "def", "conv2d", "(", "x", ",", "num_filters", ",", "name", ",", "filter_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "pad", "=", "\"SAME\"", ",", "dtype", "=", "tf", ".", "float32", ",", "collections", "=", "None", ",", "\n", "summary_tag", "=", "None", ")", ":", "\n", "    ", "with", "tf", ".", "variable_scope", "(", "name", ")", ":", "\n", "        ", "stride_shape", "=", "[", "1", ",", "stride", "[", "0", "]", ",", "stride", "[", "1", "]", ",", "1", "]", "\n", "filter_shape", "=", "[", "filter_size", "[", "0", "]", ",", "filter_size", "[", "1", "]", ",", "int", "(", "x", ".", "get_shape", "(", ")", "[", "3", "]", ")", ",", "num_filters", "]", "\n", "\n", "# there are \"num input feature maps * filter height * filter width\"", "\n", "# inputs to each hidden unit", "\n", "fan_in", "=", "intprod", "(", "filter_shape", "[", ":", "3", "]", ")", "\n", "# each unit in the lower layer receives a gradient from:", "\n", "# \"num output feature maps * filter height * filter width\" /", "\n", "#   pooling size", "\n", "fan_out", "=", "intprod", "(", "filter_shape", "[", ":", "2", "]", ")", "*", "num_filters", "\n", "# initialize weights with random weights", "\n", "w_bound", "=", "np", ".", "sqrt", "(", "6.", "/", "(", "fan_in", "+", "fan_out", ")", ")", "\n", "\n", "w", "=", "tf", ".", "get_variable", "(", "\"W\"", ",", "filter_shape", ",", "dtype", ",", "tf", ".", "random_uniform_initializer", "(", "-", "w_bound", ",", "w_bound", ")", ",", "\n", "collections", "=", "collections", ")", "\n", "b", "=", "tf", ".", "get_variable", "(", "\"b\"", ",", "[", "1", ",", "1", ",", "1", ",", "num_filters", "]", ",", "initializer", "=", "tf", ".", "zeros_initializer", ",", "\n", "collections", "=", "collections", ")", "\n", "\n", "if", "summary_tag", "is", "not", "None", ":", "\n", "            ", "tf", ".", "image_summary", "(", "summary_tag", ",", "\n", "tf", ".", "transpose", "(", "tf", ".", "reshape", "(", "w", ",", "[", "filter_size", "[", "0", "]", ",", "filter_size", "[", "1", "]", ",", "-", "1", ",", "1", "]", ")", ",", "\n", "[", "2", ",", "0", ",", "1", ",", "3", "]", ")", ",", "\n", "max_images", "=", "10", ")", "\n", "\n", "", "return", "tf", ".", "nn", ".", "conv2d", "(", "x", ",", "w", ",", "stride_shape", ",", "pad", ")", "+", "b", "\n", "\n"]], "home.repos.pwc.inspect_result.jon--lee_aor.expert.tf_util.dense": [[161, 169], ["tensorflow.get_variable", "tensorflow.matmul", "tensorflow.get_variable", "x.get_shape"], "function", ["None"], ["", "", "def", "dense", "(", "x", ",", "size", ",", "name", ",", "weight_init", "=", "None", ",", "bias", "=", "True", ")", ":", "\n", "    ", "w", "=", "tf", ".", "get_variable", "(", "name", "+", "\"/w\"", ",", "[", "x", ".", "get_shape", "(", ")", "[", "1", "]", ",", "size", "]", ",", "initializer", "=", "weight_init", ")", "\n", "ret", "=", "tf", ".", "matmul", "(", "x", ",", "w", ")", "\n", "if", "bias", ":", "\n", "        ", "b", "=", "tf", ".", "get_variable", "(", "name", "+", "\"/b\"", ",", "[", "size", "]", ",", "initializer", "=", "tf", ".", "zeros_initializer", ")", "\n", "return", "ret", "+", "b", "\n", "", "else", ":", "\n", "        ", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.jon--lee_aor.expert.tf_util.wndense": [[170, 180], ["tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.matmul", "tensorflow.sqrt", "tensorflow.reshape", "int", "tensorflow.random_normal_initializer", "tensorflow.constant_initializer", "tensorflow.constant_initializer", "tf_util.sum", "tensorflow.reshape", "tensorflow.square", "tf.matmul.get_shape"], "function", ["home.repos.pwc.inspect_result.jon--lee_aor.expert.tf_util.sum"], ["", "", "def", "wndense", "(", "x", ",", "size", ",", "name", ",", "init_scale", "=", "1.0", ")", ":", "\n", "    ", "v", "=", "tf", ".", "get_variable", "(", "name", "+", "\"/V\"", ",", "[", "int", "(", "x", ".", "get_shape", "(", ")", "[", "1", "]", ")", ",", "size", "]", ",", "\n", "initializer", "=", "tf", ".", "random_normal_initializer", "(", "0", ",", "0.05", ")", ")", "\n", "g", "=", "tf", ".", "get_variable", "(", "name", "+", "\"/g\"", ",", "[", "size", "]", ",", "initializer", "=", "tf", ".", "constant_initializer", "(", "init_scale", ")", ")", "\n", "b", "=", "tf", ".", "get_variable", "(", "name", "+", "\"/b\"", ",", "[", "size", "]", ",", "initializer", "=", "tf", ".", "constant_initializer", "(", "0.0", ")", ")", "\n", "\n", "# use weight normalization (Salimans & Kingma, 2016)", "\n", "x", "=", "tf", ".", "matmul", "(", "x", ",", "v", ")", "\n", "scaler", "=", "g", "/", "tf", ".", "sqrt", "(", "sum", "(", "tf", ".", "square", "(", "v", ")", ",", "axis", "=", "0", ",", "keepdims", "=", "True", ")", ")", "\n", "return", "tf", ".", "reshape", "(", "scaler", ",", "[", "1", ",", "size", "]", ")", "*", "x", "+", "tf", ".", "reshape", "(", "b", ",", "[", "1", ",", "size", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jon--lee_aor.expert.tf_util.densenobias": [[181, 183], ["tf_util.dense"], "function", ["home.repos.pwc.inspect_result.jon--lee_aor.expert.tf_util.dense"], ["", "def", "densenobias", "(", "x", ",", "size", ",", "name", ",", "weight_init", "=", "None", ")", ":", "\n", "    ", "return", "dense", "(", "x", ",", "size", ",", "name", ",", "weight_init", "=", "weight_init", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jon--lee_aor.expert.tf_util.dropout": [[184, 190], ["tensorflow.floor", "tf_util.switch", "tensorflow.random_uniform", "tensorflow.shape"], "function", ["home.repos.pwc.inspect_result.jon--lee_aor.expert.tf_util.switch"], ["", "def", "dropout", "(", "x", ",", "pkeep", ",", "phase", "=", "None", ",", "mask", "=", "None", ")", ":", "\n", "    ", "mask", "=", "tf", ".", "floor", "(", "pkeep", "+", "tf", ".", "random_uniform", "(", "tf", ".", "shape", "(", "x", ")", ")", ")", "if", "mask", "is", "None", "else", "mask", "\n", "if", "phase", "is", "None", ":", "\n", "        ", "return", "mask", "*", "x", "\n", "", "else", ":", "\n", "        ", "return", "switch", "(", "phase", ",", "mask", "*", "x", ",", "pkeep", "*", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jon--lee_aor.expert.tf_util.batchnorm": [[191, 212], ["tensorflow.get_variable", "tensorflow.get_variable", "tf_util.mean", "tf_util.mean", "tensorflow.sqrt", "updates.extend", "tf_util.switch", "x.get_shape", "tensorflow.sqrt", "tensorflow.square", "tensorflow.get_variable", "tensorflow.constant_initializer", "tensorflow.constant_initializer", "tensorflow.assign", "tensorflow.assign", "tensorflow.get_variable", "tensorflow.constant_initializer", "tensorflow.constant_initializer"], "function", ["home.repos.pwc.inspect_result.jon--lee_aor.expert.tf_util.mean", "home.repos.pwc.inspect_result.jon--lee_aor.expert.tf_util.mean", "home.repos.pwc.inspect_result.jon--lee_aor.expert.tf_util.switch"], ["", "", "def", "batchnorm", "(", "x", ",", "name", ",", "phase", ",", "updates", ",", "gamma", "=", "0.96", ")", ":", "\n", "    ", "k", "=", "x", ".", "get_shape", "(", ")", "[", "1", "]", "\n", "runningmean", "=", "tf", ".", "get_variable", "(", "name", "+", "\"/mean\"", ",", "shape", "=", "[", "1", ",", "k", "]", ",", "initializer", "=", "tf", ".", "constant_initializer", "(", "0.0", ")", ",", "trainable", "=", "False", ")", "\n", "runningvar", "=", "tf", ".", "get_variable", "(", "name", "+", "\"/var\"", ",", "shape", "=", "[", "1", ",", "k", "]", ",", "initializer", "=", "tf", ".", "constant_initializer", "(", "1e-4", ")", ",", "trainable", "=", "False", ")", "\n", "testy", "=", "(", "x", "-", "runningmean", ")", "/", "tf", ".", "sqrt", "(", "runningvar", ")", "\n", "\n", "mean_", "=", "mean", "(", "x", ",", "axis", "=", "0", ",", "keepdims", "=", "True", ")", "\n", "var_", "=", "mean", "(", "tf", ".", "square", "(", "x", ")", ",", "axis", "=", "0", ",", "keepdims", "=", "True", ")", "\n", "std", "=", "tf", ".", "sqrt", "(", "var_", ")", "\n", "trainy", "=", "(", "x", "-", "mean_", ")", "/", "std", "\n", "\n", "updates", ".", "extend", "(", "[", "\n", "tf", ".", "assign", "(", "runningmean", ",", "runningmean", "*", "gamma", "+", "mean_", "*", "(", "1", "-", "gamma", ")", ")", ",", "\n", "tf", ".", "assign", "(", "runningvar", ",", "runningvar", "*", "gamma", "+", "var_", "*", "(", "1", "-", "gamma", ")", ")", "\n", "]", ")", "\n", "\n", "y", "=", "switch", "(", "phase", ",", "trainy", ",", "testy", ")", "\n", "\n", "out", "=", "y", "*", "tf", ".", "get_variable", "(", "name", "+", "\"/scaling\"", ",", "shape", "=", "[", "1", ",", "k", "]", ",", "initializer", "=", "tf", ".", "constant_initializer", "(", "1.0", ")", ",", "trainable", "=", "True", ")", "+", "tf", ".", "get_variable", "(", "name", "+", "\"/translation\"", ",", "shape", "=", "[", "1", ",", "k", "]", ",", "initializer", "=", "tf", ".", "constant_initializer", "(", "0.0", ")", ",", "trainable", "=", "True", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.jon--lee_aor.expert.tf_util.function": [[219, 228], ["isinstance", "tf_util._Function", "isinstance", "tf_util._Function", "tf_util._Function", "outputs.values", "type", "zip", "_Function.", "outputs.keys", "_Function."], "function", ["None"], ["", "def", "function", "(", "inputs", ",", "outputs", ",", "updates", "=", "None", ",", "givens", "=", "None", ")", ":", "\n", "    ", "if", "isinstance", "(", "outputs", ",", "list", ")", ":", "\n", "        ", "return", "_Function", "(", "inputs", ",", "outputs", ",", "updates", ",", "givens", "=", "givens", ")", "\n", "", "elif", "isinstance", "(", "outputs", ",", "(", "dict", ",", "collections", ".", "OrderedDict", ")", ")", ":", "\n", "        ", "f", "=", "_Function", "(", "inputs", ",", "outputs", ".", "values", "(", ")", ",", "updates", ",", "givens", "=", "givens", ")", "\n", "return", "lambda", "*", "inputs", ":", "type", "(", "outputs", ")", "(", "zip", "(", "outputs", ".", "keys", "(", ")", ",", "f", "(", "*", "inputs", ")", ")", ")", "\n", "", "else", ":", "\n", "        ", "f", "=", "_Function", "(", "inputs", ",", "[", "outputs", "]", ",", "updates", ",", "givens", "=", "givens", ")", "\n", "return", "lambda", "*", "inputs", ":", "f", "(", "*", "inputs", ")", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.jon--lee_aor.expert.tf_util.mem_friendly_function": [[248, 254], ["isinstance", "tf_util._MemFriendlyFunction", "tf_util._MemFriendlyFunction", "_MemFriendlyFunction."], "function", ["None"], ["", "", "def", "mem_friendly_function", "(", "nondata_inputs", ",", "data_inputs", ",", "outputs", ",", "batch_size", ")", ":", "\n", "    ", "if", "isinstance", "(", "outputs", ",", "list", ")", ":", "\n", "        ", "return", "_MemFriendlyFunction", "(", "nondata_inputs", ",", "data_inputs", ",", "outputs", ",", "batch_size", ")", "\n", "", "else", ":", "\n", "        ", "f", "=", "_MemFriendlyFunction", "(", "nondata_inputs", ",", "data_inputs", ",", "[", "outputs", "]", ",", "batch_size", ")", "\n", "return", "lambda", "*", "inputs", ":", "f", "(", "*", "inputs", ")", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.jon--lee_aor.expert.tf_util.module": [[323, 331], ["WrapperModule", "f"], "function", ["None"], ["", "", "def", "module", "(", "name", ")", ":", "\n", "    ", "@", "functools", ".", "wraps", "\n", "def", "wrapper", "(", "f", ")", ":", "\n", "        ", "class", "WrapperModule", "(", "Module", ")", ":", "\n", "            ", "def", "_call", "(", "self", ",", "*", "args", ")", ":", "\n", "                ", "return", "f", "(", "*", "args", ")", "\n", "", "", "return", "WrapperModule", "(", "name", ")", "\n", "", "return", "wrapper", "\n", "\n"]], "home.repos.pwc.inspect_result.jon--lee_aor.expert.tf_util.get_parents": [[339, 341], ["None"], "function", ["None"], ["def", "get_parents", "(", "node", ")", ":", "\n", "    ", "return", "node", ".", "op", ".", "inputs", "\n", "\n"]], "home.repos.pwc.inspect_result.jon--lee_aor.expert.tf_util.topsorted": [[342, 377], ["isinstance", "stack.append", "stack.pop", "tf_util.get_parents", "marks.get", "len", "out.append", "stack.append", "stack.append", "ValueError"], "function", ["home.repos.pwc.inspect_result.jon--lee_aor.expert.tf_util.get_parents"], ["", "def", "topsorted", "(", "outputs", ")", ":", "\n", "    ", "\"\"\"\n    Topological sort via non-recursive depth-first search\n    \"\"\"", "\n", "assert", "isinstance", "(", "outputs", ",", "(", "list", ",", "tuple", ")", ")", "\n", "marks", "=", "{", "}", "\n", "out", "=", "[", "]", "\n", "stack", "=", "[", "]", "#pylint: disable=W0621", "\n", "# i: node", "\n", "# jidx = number of children visited so far from that node", "\n", "# marks: state of each node, which is one of", "\n", "#   0: haven't visited", "\n", "#   1: have visited, but not done visiting children", "\n", "#   2: done visiting children", "\n", "for", "x", "in", "outputs", ":", "\n", "        ", "stack", ".", "append", "(", "(", "x", ",", "0", ")", ")", "\n", "while", "stack", ":", "\n", "            ", "(", "i", ",", "jidx", ")", "=", "stack", ".", "pop", "(", ")", "\n", "if", "jidx", "==", "0", ":", "\n", "                ", "m", "=", "marks", ".", "get", "(", "i", ",", "0", ")", "\n", "if", "m", "==", "0", ":", "\n", "                    ", "marks", "[", "i", "]", "=", "1", "\n", "", "elif", "m", "==", "1", ":", "\n", "                    ", "raise", "ValueError", "(", "\"not a dag\"", ")", "\n", "", "else", ":", "\n", "                    ", "continue", "\n", "", "", "ps", "=", "get_parents", "(", "i", ")", "\n", "if", "jidx", "==", "len", "(", "ps", ")", ":", "\n", "                ", "marks", "[", "i", "]", "=", "2", "\n", "out", ".", "append", "(", "i", ")", "\n", "", "else", ":", "\n", "                ", "stack", ".", "append", "(", "(", "i", ",", "jidx", "+", "1", ")", ")", "\n", "j", "=", "ps", "[", "jidx", "]", "\n", "stack", ".", "append", "(", "(", "j", ",", "0", ")", ")", "\n", "", "", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.jon--lee_aor.expert.tf_util.var_shape": [[383, 388], ["all", "x.get_shape", "isinstance"], "function", ["None"], ["", "def", "var_shape", "(", "x", ")", ":", "\n", "    ", "out", "=", "[", "k", ".", "value", "for", "k", "in", "x", ".", "get_shape", "(", ")", "]", "\n", "assert", "all", "(", "isinstance", "(", "a", ",", "int", ")", "for", "a", "in", "out", ")", ",", "\"shape function assumes that shape is fully known\"", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.jon--lee_aor.expert.tf_util.numel": [[389, 391], ["tf_util.intprod", "tf_util.var_shape"], "function", ["home.repos.pwc.inspect_result.jon--lee_aor.expert.tf_util.intprod", "home.repos.pwc.inspect_result.jon--lee_aor.expert.tf_util.var_shape"], ["", "def", "numel", "(", "x", ")", ":", "\n", "    ", "return", "intprod", "(", "var_shape", "(", "x", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jon--lee_aor.expert.tf_util.intprod": [[392, 394], ["int", "numpy.prod"], "function", ["None"], ["", "def", "intprod", "(", "x", ")", ":", "\n", "    ", "return", "int", "(", "np", ".", "prod", "(", "x", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jon--lee_aor.expert.tf_util.flatgrad": [[395, 399], ["tensorflow.gradients", "tensorflow.concat", "tensorflow.reshape", "zip", "tf_util.numel"], "function", ["home.repos.pwc.inspect_result.jon--lee_aor.expert.tf_util.numel"], ["", "def", "flatgrad", "(", "loss", ",", "var_list", ")", ":", "\n", "    ", "grads", "=", "tf", ".", "gradients", "(", "loss", ",", "var_list", ")", "\n", "return", "tf", ".", "concat", "(", "0", ",", "[", "tf", ".", "reshape", "(", "grad", ",", "[", "numel", "(", "v", ")", "]", ")", "\n", "for", "(", "v", ",", "grad", ")", "in", "zip", "(", "var_list", ",", "grads", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jon--lee_aor.expert.tf_util.fancy_slice_2d": [[428, 439], ["tensorflow.cast", "tensorflow.cast", "tensorflow.cast", "tensorflow.reshape", "tensorflow.gather", "tensorflow.shape"], "function", ["None"], ["", "", "def", "fancy_slice_2d", "(", "X", ",", "inds0", ",", "inds1", ")", ":", "\n", "    ", "\"\"\"\n    like numpy X[inds0, inds1]\n    XXX this implementation is bad\n    \"\"\"", "\n", "inds0", "=", "tf", ".", "cast", "(", "inds0", ",", "tf", ".", "int64", ")", "\n", "inds1", "=", "tf", ".", "cast", "(", "inds1", ",", "tf", ".", "int64", ")", "\n", "shape", "=", "tf", ".", "cast", "(", "tf", ".", "shape", "(", "X", ")", ",", "tf", ".", "int64", ")", "\n", "ncols", "=", "shape", "[", "1", "]", "\n", "Xflat", "=", "tf", ".", "reshape", "(", "X", ",", "[", "-", "1", "]", ")", "\n", "return", "tf", ".", "gather", "(", "Xflat", ",", "inds0", "*", "ncols", "+", "inds1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jon--lee_aor.expert.tf_util.scope_vars": [[441, 449], ["tensorflow.get_collection", "isinstance"], "function", ["None"], ["", "def", "scope_vars", "(", "scope", ",", "trainable_only", ")", ":", "\n", "    ", "\"\"\"\n    Get variables inside a scope\n    The scope can be specified as a string\n    \"\"\"", "\n", "return", "tf", ".", "get_collection", "(", "\n", "tf", ".", "GraphKeys", ".", "TRAINABLE_VARIABLES", "if", "trainable_only", "else", "tf", ".", "GraphKeys", ".", "VARIABLES", ",", "\n", "scope", "=", "scope", "if", "isinstance", "(", "scope", ",", "str", ")", "else", "scope", ".", "name", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.jon--lee_aor.expert.tf_util.lengths_to_mask": [[451, 467], ["tensorflow.convert_to_tensor", "tensorflow.expand_dims", "tensorflow.expand_dims", "tf.convert_to_tensor.get_shape", "tensorflow.range"], "function", ["None"], ["", "def", "lengths_to_mask", "(", "lengths_b", ",", "max_length", ")", ":", "\n", "    ", "\"\"\"\n    Turns a vector of lengths into a boolean mask\n\n    Args:\n        lengths_b: an integer vector of lengths\n        max_length: maximum length to fill the mask\n\n    Returns:\n        a boolean array of shape (batch_size, max_length)\n        row[i] consists of True repeated lengths_b[i] times, followed by False\n    \"\"\"", "\n", "lengths_b", "=", "tf", ".", "convert_to_tensor", "(", "lengths_b", ")", "\n", "assert", "lengths_b", ".", "get_shape", "(", ")", ".", "ndims", "==", "1", "\n", "mask_bt", "=", "tf", ".", "expand_dims", "(", "tf", ".", "range", "(", "max_length", ")", ",", "0", ")", "<", "tf", ".", "expand_dims", "(", "lengths_b", ",", "1", ")", "\n", "return", "mask_bt", "\n", "\n"]], "home.repos.pwc.inspect_result.jon--lee_aor.expert.tf_util.in_session": [[469, 475], ["functools.wraps", "tensorflow.Session", "f"], "function", ["None"], ["", "def", "in_session", "(", "f", ")", ":", "\n", "    ", "@", "functools", ".", "wraps", "(", "f", ")", "\n", "def", "newfunc", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "with", "tf", ".", "Session", "(", ")", ":", "\n", "            ", "f", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "", "", "return", "newfunc", "\n", "\n"]], "home.repos.pwc.inspect_result.jon--lee_aor.expert.tf_util.get_placeholder": [[478, 488], ["log", "tensorflow.placeholder"], "function", ["None"], ["def", "get_placeholder", "(", "name", ",", "dtype", ",", "shape", ")", ":", "\n", "    ", "log", "(", "\"calling get_placeholder\"", ",", "name", ")", "\n", "if", "name", "in", "_PLACEHOLDER_CACHE", ":", "\n", "        ", "out", ",", "dtype1", ",", "shape1", "=", "_PLACEHOLDER_CACHE", "[", "name", "]", "\n", "assert", "dtype1", "==", "dtype", "and", "shape1", "==", "shape", "\n", "return", "out", "\n", "", "else", ":", "\n", "        ", "out", "=", "tf", ".", "placeholder", "(", "dtype", "=", "dtype", ",", "shape", "=", "shape", ",", "name", "=", "name", ")", "\n", "_PLACEHOLDER_CACHE", "[", "name", "]", "=", "(", "out", ",", "dtype", ",", "shape", ")", "\n", "return", "out", "\n", "", "", "def", "get_placeholder_cached", "(", "name", ")", ":", "\n"]], "home.repos.pwc.inspect_result.jon--lee_aor.expert.tf_util.get_placeholder_cached": [[488, 490], ["None"], "function", ["None"], ["", "", "def", "get_placeholder_cached", "(", "name", ")", ":", "\n", "    ", "return", "_PLACEHOLDER_CACHE", "[", "name", "]", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.jon--lee_aor.expert.tf_util.flattenallbut0": [[491, 493], ["tensorflow.reshape", "tf_util.intprod", "x.get_shape().as_list", "x.get_shape"], "function", ["home.repos.pwc.inspect_result.jon--lee_aor.expert.tf_util.intprod"], ["", "def", "flattenallbut0", "(", "x", ")", ":", "\n", "    ", "return", "tf", ".", "reshape", "(", "x", ",", "[", "-", "1", ",", "intprod", "(", "x", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "1", ":", "]", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jon--lee_aor.expert.tf_util.reset": [[494, 500], ["tensorflow.reset_default_graph"], "function", ["None"], ["", "def", "reset", "(", ")", ":", "\n", "    ", "global", "_PLACEHOLDER_CACHE", "\n", "global", "VARIABLES", "\n", "_PLACEHOLDER_CACHE", "=", "{", "}", "\n", "VARIABLES", "=", "{", "}", "\n", "tf", ".", "reset_default_graph", "(", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.jon--lee_aor.exp.cartpole_dagger.CartpoleDagger.__init__": [[23, 48], ["list", "baselines.deepq.load", "os.path.join", "os.path.join", "numpy.ones", "str", "str"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "force_mag", ",", "reg", ")", ":", "\n", "        ", "self", ".", "reg", "=", "reg", "\n", "self", ".", "iters", "=", "100", "\n", "self", ".", "T", "=", "200", "\n", "self", ".", "trials", "=", "1", "\n", "\n", "self", ".", "alpha", "=", "0.1", "\n", "self", ".", "lambda_prior", "=", "list", "(", "np", ".", "ones", "(", "10", ")", ")", "\n", "\n", "\n", "self", ".", "eta", "=", "1.0", "\n", "self", ".", "inner_eta", "=", "self", ".", "eta", "\n", "self", ".", "params", "=", "{", "}", "\n", "self", ".", "params", "[", "'T'", "]", "=", "self", ".", "T", "\n", "self", ".", "params", "[", "'iters'", "]", "=", "self", ".", "iters", "\n", "self", ".", "act", "=", "deepq", ".", "load", "(", "\"cartpole_model_alt2.pkl\"", ")", "\n", "\n", "if", "self", ".", "reg", ":", "self", ".", "base_dir", "=", "'data/reg_cartpole_force_mag'", "+", "str", "(", "force_mag", ")", "\n", "else", ":", "self", ".", "base_dir", "=", "'data/cartpole_force_mag'", "+", "str", "(", "force_mag", ")", "\n", "self", ".", "dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "base_dir", ",", "'dagger'", ")", "\n", "self", ".", "prefix", "=", "'dagger'", "\n", "self", ".", "path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "dir", ",", "self", ".", "prefix", ")", "\n", "self", ".", "force_mag", "=", "force_mag", "\n", "\n", "self", ".", "t", "=", ".01", "\n", "\n"]], "home.repos.pwc.inspect_result.jon--lee_aor.exp.cartpole_dagger.CartpoleDagger.prologue": [[49, 57], ["gym.envs.make", "tools.supervisor.Supervisor", "tools.learner.Learner", "print", "tools.lrc.LRC"], "methods", ["None"], ["", "def", "prologue", "(", "self", ")", ":", "\n", "# self.env = gym.envs.make('CartPoleAltRandom-v0')     # Used over mutliple trials", "\n", "        ", "self", ".", "env", "=", "gym", ".", "envs", ".", "make", "(", "'CartPoleAlt-v0'", ")", "# Used for just one trial", "\n", "self", ".", "sup", "=", "Supervisor", "(", "self", ".", "act", ")", "\n", "self", ".", "lnr", "=", "Learner", "(", "LRC", "(", "self", ".", "alpha", ",", "self", ".", "eta", ",", "intercept", "=", "False", ")", ")", "\n", "print", "(", "self", ".", "env", ".", "env", ".", "force_mag", ")", "\n", "\n", "self", ".", "env", ".", "env", ".", "force_mag", "=", "self", ".", "force_mag", "\n", "\n"]], "home.repos.pwc.inspect_result.jon--lee_aor.exp.cartpole_dagger.CartpoleDagger.run_trials": [[58, 83], ["range", "cartpole_dagger.CartpoleDagger.aggregate", "open", "pickle.dump", "open.close", "os.path.exists", "os.makedirs", "cartpole_dagger.CartpoleDagger.prologue", "cartpole_dagger.CartpoleDagger.run_iters", "all_results.append", "os.path.join", "str", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.jon--lee_aor.exp_mujoco.analyze_hopper_static.aggregate", "home.repos.pwc.inspect_result.jon--lee_aor.exp_mujoco.mj_dagger.MujocoDagger.prologue", "home.repos.pwc.inspect_result.jon--lee_aor.exp_mujoco.mj_dagger.MujocoDagger.run_iters"], ["", "def", "run_trials", "(", "self", ")", ":", "\n", "        ", "all_results", "=", "[", "]", "\n", "# Used for multiple trials with random initial states", "\n", "# init_states = np.load(\"data/init_states.npy\")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "dir", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "self", ".", "dir", ")", "\n", "\n", "", "for", "trial", "in", "range", "(", "self", ".", "trials", ")", ":", "\n", "            ", "self", ".", "prologue", "(", ")", "\n", "# print(\"Init state: \" + str(self.env.env.init_state))", "\n", "# self.env.env.init_state = init_states[trial, :]", "\n", "# print(\"Setting init state: \" + str(self.env.env.init_state))", "\n", "self", ".", "path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "dir", ",", "self", ".", "prefix", ")", "+", "'_trial'", "+", "str", "(", "trial", ")", "\n", "results", "=", "self", ".", "run_iters", "(", ")", "\n", "all_results", ".", "append", "(", "results", ")", "\n", "\n", "\n", "", "self", ".", "aggregate", "(", "all_results", ")", "\n", "\n", "filepath", "=", "os", ".", "path", ".", "join", "(", "self", ".", "dir", ",", "self", ".", "prefix", ")", "+", "'.p'", "\n", "f", "=", "open", "(", "filepath", ",", "'wb'", ")", "\n", "pickle", ".", "dump", "(", "all_results", ",", "f", ")", "\n", "f", ".", "close", "(", ")", "\n", "\n", "return", "all_results", "\n", "\n"]], "home.repos.pwc.inspect_result.jon--lee_aor.exp.cartpole_dagger.CartpoleDagger.aggregate": [[85, 152], ["len", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "enumerate", "tools.statistics.mean_sem", "tools.statistics.mean_sem", "tools.statistics.mean_sem", "tools.statistics.mean_sem", "tools.statistics.mean_sem", "tools.statistics.mean_sem", "numpy.arange", "matplotlib.subplot", "matplotlib.subplot", "matplotlib.title", "matplotlib.title", "matplotlib.errorbar", "matplotlib.errorbar", "matplotlib.errorbar", "matplotlib.errorbar", "matplotlib.legend", "matplotlib.legend", "matplotlib.subplot", "matplotlib.subplot", "matplotlib.title", "matplotlib.title", "matplotlib.errorbar", "matplotlib.errorbar", "matplotlib.tight_layout", "matplotlib.tight_layout", "matplotlib.savefig", "matplotlib.savefig", "matplotlib.close", "matplotlib.close", "matplotlib.cla", "matplotlib.cla", "matplotlib.clf", "matplotlib.clf", "matplotlib.subplot", "matplotlib.subplot", "matplotlib.title", "matplotlib.title", "matplotlib.errorbar", "matplotlib.errorbar", "matplotlib.errorbar", "matplotlib.errorbar", "matplotlib.legend", "matplotlib.legend", "matplotlib.subplot", "matplotlib.subplot", "matplotlib.title", "matplotlib.title", "matplotlib.errorbar", "matplotlib.errorbar", "matplotlib.tight_layout", "matplotlib.tight_layout", "matplotlib.savefig", "matplotlib.savefig", "matplotlib.close", "matplotlib.close", "matplotlib.cla", "matplotlib.cla", "matplotlib.clf", "matplotlib.clf", "len", "os.path.join", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.jon--lee_aor.tools.statistics.mean_sem", "home.repos.pwc.inspect_result.jon--lee_aor.tools.statistics.mean_sem", "home.repos.pwc.inspect_result.jon--lee_aor.tools.statistics.mean_sem", "home.repos.pwc.inspect_result.jon--lee_aor.tools.statistics.mean_sem", "home.repos.pwc.inspect_result.jon--lee_aor.tools.statistics.mean_sem", "home.repos.pwc.inspect_result.jon--lee_aor.tools.statistics.mean_sem"], ["", "def", "aggregate", "(", "self", ",", "all_results", ")", ":", "\n", "        ", "n", "=", "len", "(", "all_results", ")", "\n", "d", "=", "self", ".", "iters", "\n", "\n", "lnr_costs", "=", "np", ".", "zeros", "(", "(", "n", ",", "d", ")", ")", "\n", "opt_costs", "=", "np", ".", "zeros", "(", "(", "n", ",", "d", ")", ")", "\n", "diff_costs", "=", "np", ".", "zeros", "(", "(", "n", ",", "d", ")", ")", "\n", "\n", "lnr_batch_costs", "=", "np", ".", "zeros", "(", "(", "n", ",", "d", ")", ")", "\n", "opt_batch_costs", "=", "np", ".", "zeros", "(", "(", "n", ",", "d", ")", ")", "\n", "static_regret", "=", "np", ".", "zeros", "(", "(", "n", ",", "d", ")", ")", "\n", "\n", "for", "t", ",", "result", "in", "enumerate", "(", "all_results", ")", ":", "\n", "            ", "lnr_costs", "[", "t", ",", ":", "]", "=", "result", "[", "'lnr_costs'", "]", "\n", "opt_costs", "[", "t", ",", ":", "]", "=", "result", "[", "'opt_costs'", "]", "\n", "diff_costs", "[", "t", ",", ":", "]", "=", "result", "[", "'lnr_costs'", "]", "-", "result", "[", "'opt_costs'", "]", "\n", "lnr_batch_costs", "[", "t", ",", ":", "]", "=", "result", "[", "'lnr_batch_costs'", "]", "\n", "opt_batch_costs", "[", "t", ",", ":", "]", "=", "result", "[", "'opt_batch_costs'", "]", "\n", "static_regret", "[", "t", ",", ":", "]", "=", "result", "[", "'static_regret'", "]", "\n", "\n", "\n", "", "lnr_mean", ",", "lnr_std", "=", "statistics", ".", "mean_sem", "(", "lnr_costs", ")", "\n", "opt_mean", ",", "opt_std", "=", "statistics", ".", "mean_sem", "(", "opt_costs", ")", "\n", "diff_mean", ",", "diff_std", "=", "statistics", ".", "mean_sem", "(", "diff_costs", ")", "\n", "\n", "lnr_batch_mean", ",", "lnr_batch_std", "=", "statistics", ".", "mean_sem", "(", "lnr_batch_costs", ")", "\n", "opt_batch_mean", ",", "opt_batch_std", "=", "statistics", ".", "mean_sem", "(", "opt_batch_costs", ")", "\n", "static_regret_mean", ",", "static_regret_sem", "=", "statistics", ".", "mean_sem", "(", "static_regret", ")", "\n", "\n", "x_axis", "=", "np", ".", "arange", "(", "len", "(", "lnr_mean", ")", ")", "\n", "\n", "# Dynamic Regret", "\n", "plt", ".", "subplot", "(", "211", ")", "\n", "plt", ".", "title", "(", "\"Actual loss\"", ")", "\n", "plt", ".", "errorbar", "(", "x_axis", ",", "lnr_mean", ",", "yerr", "=", "lnr_std", ",", "label", "=", "'lnr costs'", ")", "\n", "plt", ".", "errorbar", "(", "x_axis", ",", "opt_mean", ",", "yerr", "=", "opt_std", ",", "label", "=", "'opt costs'", ")", "\n", "plt", ".", "legend", "(", ")", "\n", "\n", "plt", ".", "subplot", "(", "212", ")", "\n", "plt", ".", "title", "(", "\"Difference\"", ")", "\n", "plt", ".", "errorbar", "(", "x_axis", ",", "diff_mean", ",", "yerr", "=", "diff_std", ")", "\n", "plt", ".", "tight_layout", "(", ")", "\n", "\n", "filepath", "=", "os", ".", "path", ".", "join", "(", "self", ".", "dir", ",", "self", ".", "prefix", ")", "+", "'.pdf'", "\n", "plt", ".", "savefig", "(", "filepath", ")", "\n", "plt", ".", "close", "(", ")", "\n", "plt", ".", "cla", "(", ")", "\n", "plt", ".", "clf", "(", ")", "\n", "\n", "\n", "# Static Regret", "\n", "plt", ".", "subplot", "(", "211", ")", "\n", "plt", ".", "title", "(", "\"Batch loss\"", ")", "\n", "plt", ".", "errorbar", "(", "x_axis", ",", "lnr_batch_mean", ",", "yerr", "=", "lnr_std", ",", "label", "=", "'lnr costs'", ")", "\n", "plt", ".", "errorbar", "(", "x_axis", ",", "opt_batch_mean", ",", "yerr", "=", "opt_std", ",", "label", "=", "'opt costs'", ")", "\n", "plt", ".", "legend", "(", ")", "\n", "\n", "plt", ".", "subplot", "(", "212", ")", "\n", "plt", ".", "title", "(", "\"Static Regret\"", ")", "\n", "plt", ".", "errorbar", "(", "x_axis", ",", "static_regret_mean", ",", "yerr", "=", "diff_std", ")", "\n", "plt", ".", "tight_layout", "(", ")", "\n", "\n", "filepath", "=", "os", ".", "path", ".", "join", "(", "self", ".", "dir", ",", "self", ".", "prefix", ")", "+", "'_batch.pdf'", "\n", "plt", ".", "savefig", "(", "filepath", ")", "\n", "plt", ".", "close", "(", ")", "\n", "plt", ".", "cla", "(", ")", "\n", "plt", ".", "clf", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jon--lee_aor.exp.cartpole_dagger.CartpoleDagger.compute_statistics": [[158, 227], ["tools.statistics.collect_traj", "tools.lrc.LRC", "tools.lrc.LRC.fit", "cartpole_dagger.CartpoleDagger.lnr.est.loss", "tools.lrc.LRC.loss", "print", "print", "results[].append", "results[].append", "results[].append", "results[].append", "cartpole_dagger.CartpoleDagger.lnr.est.coef_.copy", "tools.lrc.LRC.coef_.copy", "results[].append", "results[].append", "cartpole_dagger.CartpoleDagger.copy", "tools.lrc.LRC.coef_.copy.copy", "tools.lrc.LRC", "tools.lrc.LRC.fit", "tools.lrc.LRC.loss", "numpy.mean", "print", "print", "print", "results[].append", "results[].append", "results[].append", "cartpole_dagger.CartpoleDagger.sup.intended_action", "numpy.linalg.norm", "numpy.linalg.norm", "numpy.linalg.norm", "numpy.linalg.norm", "tools.lrc.LRC.gradient", "tools.lrc.LRC.gradient", "results[].append", "results[].append", "results[].append", "results[].append", "str", "str", "numpy.linalg.norm", "str", "str"], "methods", ["home.repos.pwc.inspect_result.jon--lee_aor.tools.statistics.collect_traj", "home.repos.pwc.inspect_result.jon--lee_aor.tools.lr.LR.fit", "home.repos.pwc.inspect_result.jon--lee_aor.tools.lr.LR.loss", "home.repos.pwc.inspect_result.jon--lee_aor.tools.lr.LR.loss", "home.repos.pwc.inspect_result.jon--lee_aor.tools.lr.LR.fit", "home.repos.pwc.inspect_result.jon--lee_aor.tools.lr.LR.loss", "home.repos.pwc.inspect_result.jon--lee_aor.expert.tf_util.mean", "home.repos.pwc.inspect_result.jon--lee_aor.tools.learner.Learner.intended_action", "home.repos.pwc.inspect_result.jon--lee_aor.tools.lr.LR.gradient", "home.repos.pwc.inspect_result.jon--lee_aor.tools.lr.LR.gradient"], ["", "def", "compute_statistics", "(", "self", ",", "iteration", ",", "results", ")", ":", "\n", "\n", "        ", "states", ",", "tmp_actions", ",", "_", ",", "reward", "=", "statistics", ".", "collect_traj", "(", "self", ".", "env", ",", "self", ".", "lnr", ",", "self", ".", "params", "[", "'T'", "]", ",", "False", ")", "\n", "actions", "=", "[", "self", ".", "sup", ".", "intended_action", "(", "s", ")", "for", "s", "in", "states", "]", "\n", "d", "=", "self", ".", "env", ".", "observation_space", ".", "shape", "[", "0", "]", "\n", "# states += [np.zeros(d), np.zeros(d)]", "\n", "# actions += [1, 0]", "\n", "\n", "\n", "est", "=", "LRC", "(", "self", ".", "lnr", ".", "est", ".", "alpha", ",", "self", ".", "inner_eta", ",", "intercept", "=", "False", ")", "\n", "lh", ",", "ph", "=", "est", ".", "fit", "(", "states", ",", "actions", ")", "\n", "\n", "lnr_cost", "=", "self", ".", "lnr", ".", "est", ".", "loss", "(", "states", ",", "actions", ")", "\n", "opt_cost", "=", "est", ".", "loss", "(", "states", ",", "actions", ")", "\n", "\n", "print", "(", "\"\\tlnr_cost: \"", "+", "str", "(", "lnr_cost", ")", ")", "\n", "print", "(", "\"\\topt_cost: \"", "+", "str", "(", "opt_cost", ")", ")", "\n", "\n", "\n", "results", "[", "'lnr_costs'", "]", ".", "append", "(", "lnr_cost", ")", "\n", "results", "[", "'opt_costs'", "]", ".", "append", "(", "opt_cost", ")", "\n", "results", "[", "'rewards'", "]", ".", "append", "(", "reward", ")", "\n", "results", "[", "'alphas'", "]", ".", "append", "(", "self", ".", "lnr", ".", "est", ".", "alpha", ")", "\n", "\n", "curr_coef_", "=", "self", ".", "lnr", ".", "est", ".", "coef_", ".", "copy", "(", ")", "\n", "curr_opt_coef_", "=", "est", ".", "coef_", ".", "copy", "(", ")", "\n", "\n", "results", "[", "'param_norms'", "]", ".", "append", "(", "np", ".", "linalg", ".", "norm", "(", "curr_coef_", ")", ")", "\n", "results", "[", "'opt_param_norms'", "]", ".", "append", "(", "np", ".", "linalg", ".", "norm", "(", "curr_opt_coef_", ")", ")", "\n", "\n", "if", "not", "iteration", "is", "0", ":", "\n", "\n", "            ", "variation", "=", "np", ".", "linalg", ".", "norm", "(", "self", ".", "last_coef_", "-", "curr_coef_", ")", "\n", "opt_variation", "=", "np", ".", "linalg", ".", "norm", "(", "self", ".", "last_opt_coef_", "-", "curr_opt_coef_", ")", "\n", "\n", "last_gradient", "=", "est", ".", "gradient", "(", "self", ".", "last_states", ",", "self", ".", "last_actions", ",", "curr_coef_", ")", "\n", "curr_gradient", "=", "est", ".", "gradient", "(", "states", ",", "actions", ",", "curr_coef_", ")", "\n", "beta", "=", "np", ".", "linalg", ".", "norm", "(", "last_gradient", "-", "curr_gradient", ")", "/", "variation", "\n", "\n", "results", "[", "'variations'", "]", ".", "append", "(", "variation", ")", "\n", "results", "[", "'opt_variations'", "]", ".", "append", "(", "opt_variation", ")", "\n", "results", "[", "'lambdas'", "]", ".", "append", "(", "opt_variation", "/", "variation", ")", "\n", "results", "[", "'betas'", "]", ".", "append", "(", "beta", ")", "\n", "\n", "\n", "\n", "", "self", ".", "last_coef_", "=", "curr_coef_", ".", "copy", "(", ")", "\n", "self", ".", "last_opt_coef_", "=", "curr_opt_coef_", ".", "copy", "(", ")", "\n", "self", ".", "last_states", "=", "states", "\n", "self", ".", "last_actions", "=", "actions", "\n", "\n", "static_est", "=", "LRC", "(", "self", ".", "lnr", ".", "est", ".", "alpha", ",", "self", ".", "inner_eta", ",", "intercept", "=", "False", ")", "\n", "batch_states", "=", "self", ".", "data_states", "+", "states", "\n", "batch_actions", "=", "self", ".", "data_actions", "+", "actions", "\n", "\n", "lh_batch", ",", "ph_batch", "=", "static_est", ".", "fit", "(", "batch_states", ",", "batch_actions", ")", "\n", "opt_batch_cost", "=", "static_est", ".", "loss", "(", "batch_states", ",", "batch_actions", ")", "\n", "lnr_batch_cost", "=", "np", ".", "mean", "(", "results", "[", "'lnr_costs'", "]", ")", "\n", "static_regret", "=", "lnr_batch_cost", "-", "opt_batch_cost", "\n", "\n", "print", "(", "\"\\tlnr_batch_cost: \"", "+", "str", "(", "lnr_batch_cost", ")", ")", "\n", "print", "(", "\"\\topt_batch_cost: \"", "+", "str", "(", "opt_batch_cost", ")", ")", "\n", "print", "(", ")", "\n", "\n", "results", "[", "'lnr_batch_costs'", "]", ".", "append", "(", "lnr_batch_cost", ")", "\n", "results", "[", "'opt_batch_costs'", "]", ".", "append", "(", "opt_batch_cost", ")", "\n", "results", "[", "'static_regret'", "]", ".", "append", "(", "static_regret", ")", "\n", "\n", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.jon--lee_aor.exp.cartpole_dagger.CartpoleDagger.compute_results": [[229, 291], ["tools.statistics.collect_traj", "matplotlib.subplot", "matplotlib.subplot", "matplotlib.title", "matplotlib.title", "matplotlib.plot", "matplotlib.plot", "matplotlib.plot", "matplotlib.plot", "matplotlib.legend", "matplotlib.legend", "matplotlib.subplot", "matplotlib.subplot", "matplotlib.title", "matplotlib.title", "matplotlib.plot", "matplotlib.plot", "matplotlib.tight_layout", "matplotlib.tight_layout", "matplotlib.savefig", "matplotlib.savefig", "matplotlib.close", "matplotlib.close", "matplotlib.cla", "matplotlib.cla", "matplotlib.clf", "matplotlib.clf", "matplotlib.subplot", "matplotlib.subplot", "matplotlib.title", "matplotlib.title", "matplotlib.plot", "matplotlib.plot", "matplotlib.plot", "matplotlib.plot", "matplotlib.legend", "matplotlib.legend", "matplotlib.subplot", "matplotlib.subplot", "matplotlib.title", "matplotlib.title", "matplotlib.plot", "matplotlib.plot", "matplotlib.tight_layout", "matplotlib.tight_layout", "matplotlib.savefig", "matplotlib.savefig", "matplotlib.close", "matplotlib.close", "matplotlib.cla", "matplotlib.cla", "matplotlib.clf", "matplotlib.clf", "matplotlib.subplot", "matplotlib.subplot", "matplotlib.title", "matplotlib.title", "matplotlib.plot", "matplotlib.plot", "matplotlib.plot", "matplotlib.plot", "matplotlib.legend", "matplotlib.legend", "matplotlib.ylim", "matplotlib.ylim", "matplotlib.savefig", "matplotlib.savefig", "matplotlib.close", "matplotlib.close", "matplotlib.cla", "matplotlib.cla", "matplotlib.clf", "matplotlib.clf", "open", "pickle.dump", "open.close", "len"], "methods", ["home.repos.pwc.inspect_result.jon--lee_aor.tools.statistics.collect_traj"], ["", "def", "compute_results", "(", "self", ",", "results", ")", ":", "\n", "\n", "        ", "_", ",", "_", ",", "_", ",", "sup_reward", "=", "statistics", ".", "collect_traj", "(", "self", ".", "env", ",", "self", ".", "sup", ",", "self", ".", "params", "[", "'T'", "]", ",", "False", ")", "\n", "results", "[", "'sup_rewards'", "]", "=", "[", "sup_reward", "]", "*", "len", "(", "results", "[", "'rewards'", "]", ")", "\n", "\n", "# DYNAMIC REGRET", "\n", "plt", ".", "subplot", "(", "211", ")", "\n", "plt", ".", "title", "(", "\"Actual loss\"", ")", "\n", "plt", ".", "plot", "(", "results", "[", "'lnr_costs'", "]", ",", "label", "=", "'lnr costs'", ")", "\n", "plt", ".", "plot", "(", "results", "[", "'opt_costs'", "]", ",", "label", "=", "'opt costs'", ")", "\n", "plt", ".", "legend", "(", ")", "\n", "\n", "\n", "difference", "=", "results", "[", "'lnr_costs'", "]", "-", "results", "[", "'opt_costs'", "]", "\n", "plt", ".", "subplot", "(", "212", ")", "\n", "plt", ".", "title", "(", "\"Difference\"", ")", "\n", "plt", ".", "plot", "(", "difference", ")", "\n", "plt", ".", "tight_layout", "(", ")", "\n", "\n", "filepath", "=", "self", ".", "path", "+", "'.pdf'", "\n", "plt", ".", "savefig", "(", "filepath", ")", "\n", "plt", ".", "close", "(", ")", "\n", "plt", ".", "cla", "(", ")", "\n", "plt", ".", "clf", "(", ")", "\n", "\n", "# STATIC REGRET ", "\n", "plt", ".", "subplot", "(", "211", ")", "\n", "plt", ".", "title", "(", "\"Batch costs\"", ")", "\n", "plt", ".", "plot", "(", "results", "[", "'lnr_batch_costs'", "]", ",", "label", "=", "'lnr costs'", ")", "\n", "plt", ".", "plot", "(", "results", "[", "'opt_batch_costs'", "]", ",", "label", "=", "'opt costs'", ")", "\n", "plt", ".", "legend", "(", ")", "\n", "\n", "\n", "plt", ".", "subplot", "(", "212", ")", "\n", "plt", ".", "title", "(", "\"Static regret (lnr batch - opt batch)\"", ")", "\n", "plt", ".", "plot", "(", "results", "[", "'static_regret'", "]", ")", "\n", "plt", ".", "tight_layout", "(", ")", "\n", "\n", "filepath", "=", "self", ".", "path", "+", "'_batch.pdf'", "\n", "plt", ".", "savefig", "(", "filepath", ")", "\n", "plt", ".", "close", "(", ")", "\n", "plt", ".", "cla", "(", ")", "\n", "plt", ".", "clf", "(", ")", "\n", "\n", "\n", "plt", ".", "subplot", "(", "111", ")", "\n", "plt", ".", "title", "(", "\"Rewards\"", ")", "\n", "plt", ".", "plot", "(", "results", "[", "'rewards'", "]", ",", "label", "=", "'Learner rewards'", ")", "\n", "plt", ".", "plot", "(", "results", "[", "'sup_rewards'", "]", ",", "label", "=", "'Supervisor Rewards'", ")", "\n", "plt", ".", "legend", "(", ")", "\n", "plt", ".", "ylim", "(", "0", ",", "20", ")", "\n", "filepath", "=", "self", ".", "path", "+", "'_reward.pdf'", "\n", "plt", ".", "savefig", "(", "filepath", ")", "\n", "plt", ".", "close", "(", ")", "\n", "plt", ".", "cla", "(", ")", "\n", "plt", ".", "clf", "(", ")", "\n", "\n", "\n", "filepath", "=", "self", ".", "path", "+", "'.p'", "\n", "f", "=", "open", "(", "filepath", ",", "'wb'", ")", "\n", "pickle", ".", "dump", "(", "results", ",", "f", ")", "\n", "f", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jon--lee_aor.exp.cartpole_dagger.CartpoleDagger.run_iters": [[293, 351], ["range", "results.keys", "cartpole_dagger.CartpoleDagger.compute_results", "print", "print", "cartpole_dagger.CartpoleDagger.compute_statistics", "tools.statistics.collect_traj", "cartpole_dagger.CartpoleDagger.lnr.set_data", "cartpole_dagger.CartpoleDagger.lnr.train", "numpy.array", "cartpole_dagger.CartpoleDagger.sup.intended_action", "numpy.mean", "print", "print", "str", "str", "len", "str", "str"], "methods", ["home.repos.pwc.inspect_result.jon--lee_aor.exp_mujoco.mj_dagger.MujocoDagger.compute_results", "home.repos.pwc.inspect_result.jon--lee_aor.exp_mujoco.mj_dagger.MujocoDagger.compute_statistics", "home.repos.pwc.inspect_result.jon--lee_aor.tools.statistics.collect_traj", "home.repos.pwc.inspect_result.jon--lee_aor.tools.learner.Learner.set_data", "home.repos.pwc.inspect_result.jon--lee_aor.tools.learner.Learner.train", "home.repos.pwc.inspect_result.jon--lee_aor.tools.learner.Learner.intended_action", "home.repos.pwc.inspect_result.jon--lee_aor.expert.tf_util.mean"], ["", "def", "run_iters", "(", "self", ")", ":", "\n", "\n", "        ", "results", "=", "{", "\n", "'lnr_costs'", ":", "[", "]", ",", "\n", "'opt_costs'", ":", "[", "]", ",", "\n", "'variations'", ":", "[", "]", ",", "\n", "'opt_variations'", ":", "[", "]", ",", "\n", "'param_norms'", ":", "[", "]", ",", "\n", "'opt_param_norms'", ":", "[", "]", ",", "\n", "'lambdas'", ":", "[", "]", ",", "\n", "'lnr_batch_costs'", ":", "[", "]", ",", "\n", "'opt_batch_costs'", ":", "[", "]", ",", "\n", "'static_regret'", ":", "[", "]", ",", "\n", "'rewards'", ":", "[", "]", ",", "\n", "'betas'", ":", "[", "]", ",", "\n", "'alphas'", ":", "[", "]", ",", "\n", "}", "\n", "\n", "\n", "d", "=", "self", ".", "env", ".", "observation_space", ".", "shape", "[", "0", "]", "\n", "# self.data_states = [np.zeros(d), np.zeros(d)]", "\n", "# self.data_actions = [1, 0]", "\n", "self", ".", "data_states", "=", "[", "]", "\n", "self", ".", "data_actions", "=", "[", "]", "\n", "\n", "for", "iteration", "in", "range", "(", "self", ".", "iters", ")", ":", "\n", "            ", "print", "(", "\"\\tIteration: \"", "+", "str", "(", "iteration", ")", ")", "\n", "print", "(", "\"\\tData states: \"", "+", "str", "(", "len", "(", "self", ".", "data_states", ")", ")", ")", "\n", "\n", "self", ".", "compute_statistics", "(", "iteration", ",", "results", ")", "\n", "\n", "states", ",", "tmp_actions", ",", "_", ",", "_", "=", "statistics", ".", "collect_traj", "(", "self", ".", "env", ",", "self", ".", "lnr", ",", "self", ".", "params", "[", "'T'", "]", ",", "False", ")", "\n", "i_actions", "=", "[", "self", ".", "sup", ".", "intended_action", "(", "s", ")", "for", "s", "in", "states", "]", "\n", "\n", "\n", "self", ".", "data_states", "+=", "states", "\n", "self", ".", "data_actions", "+=", "i_actions", "\n", "\n", "self", ".", "lnr", ".", "set_data", "(", "self", ".", "data_states", ",", "self", ".", "data_actions", ")", "\n", "self", ".", "lnr", ".", "train", "(", ")", "\n", "\n", "\n", "# Adaptive regularization:", "\n", "if", "self", ".", "reg", "and", "(", "iteration", "+", "1", ")", "%", "10", "==", "0", ":", "\n", "# mean_lambda = np.mean(results['lambdas'][-10:] + self.lambda_prior)", "\n", "                ", "mean_lambda", "=", "np", ".", "mean", "(", "results", "[", "'lambdas'", "]", "[", "-", "10", ":", "]", ")", "\n", "next_alpha", "=", "mean_lambda", "*", "self", ".", "lnr", ".", "est", ".", "alpha", "\n", "self", ".", "lnr", ".", "est", ".", "alpha", "=", "self", ".", "t", "*", "next_alpha", "+", "(", "1", "-", "self", ".", "t", ")", "*", "self", ".", "lnr", ".", "est", ".", "alpha", "\n", "print", "(", "\"\\n\\n\\t\\t Updated alpha: \"", "+", "str", "(", "self", ".", "lnr", ".", "est", ".", "alpha", ")", ")", "\n", "print", "(", "\"\\t\\t Lambda was: \"", "+", "str", "(", "mean_lambda", ")", ")", "\n", "\n", "\n", "", "", "for", "key", "in", "results", ".", "keys", "(", ")", ":", "\n", "            ", "results", "[", "key", "]", "=", "np", ".", "array", "(", "results", "[", "key", "]", ")", "\n", "\n", "", "self", ".", "compute_results", "(", "results", ")", "\n", "\n", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.jon--lee_aor.exp.cartpole_dagger.CartpoleDaggerLambda.run_trials": [[355, 383], ["os.path.join", "exp.analyze_lambdas.aggregate_save", "open", "pickle.dump", "open.close", "os.path.exists", "os.makedirs", "cartpole_dagger.CartpoleDaggerLambda.prologue", "cartpole_dagger.CartpoleDaggerLambda.run_iters", "all_results.append", "os.path.join", "str", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.jon--lee_aor.exp.analyze_lambdas.aggregate_save", "home.repos.pwc.inspect_result.jon--lee_aor.exp_mujoco.mj_dagger.MujocoDagger.prologue", "home.repos.pwc.inspect_result.jon--lee_aor.exp_mujoco.mj_dagger.MujocoDagger.run_iters"], ["    ", "def", "run_trials", "(", "self", ")", ":", "\n", "\n", "        ", "title", "=", "'force_mag'", "\n", "self", ".", "base_dir", "=", "'data/cartpole_lambda_'", "+", "title", "\n", "self", ".", "dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "base_dir", ",", "'dagger'", ")", "\n", "# params = [.001, .01, .1, 1.0, 10.0, 100.0]", "\n", "# params = [.001, .1, 1.0]", "\n", "params", "=", "[", ".5", ",", "2.0", ",", "4.0", ",", "8.0", ",", "16.0", ",", "32.0", "]", "\n", "all_results", "=", "[", "]", "\n", "self", ".", "path", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "dir", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "self", ".", "dir", ")", "\n", "", "for", "param", "in", "params", ":", "\n", "            ", "self", ".", "prologue", "(", ")", "\n", "self", ".", "env", ".", "env", ".", "force_mag", "=", "param", "\n", "self", ".", "path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "dir", ",", "self", ".", "prefix", ")", "+", "'_'", "+", "title", "+", "str", "(", "param", ")", "\n", "results", "=", "self", ".", "run_iters", "(", ")", "\n", "results", "[", "'param'", "]", "=", "param", "\n", "results", "[", "'title'", "]", "=", "title", "\n", "all_results", ".", "append", "(", "results", ")", "\n", "\n", "", "analyze_lambdas", ".", "aggregate_save", "(", "self", ".", "dir", ",", "self", ".", "prefix", ",", "all_results", ")", "\n", "filepath", "=", "os", ".", "path", ".", "join", "(", "self", ".", "dir", ",", "self", ".", "prefix", ")", "+", "'_lambda.p'", "\n", "f", "=", "open", "(", "filepath", ",", "'wb'", ")", "\n", "pickle", ".", "dump", "(", "all_results", ",", "f", ")", "\n", "f", ".", "close", "(", ")", "\n", "\n", "return", "all_results", "\n", "\n"]], "home.repos.pwc.inspect_result.jon--lee_aor.exp.cartpole_dagger.main": [[385, 396], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "vars", "cartpole_dagger.CartpoleDagger", "cartpole_dagger.CartpoleDagger.run_trials", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.jon--lee_aor.exp_mujoco.mj_dagger.MujocoDagger.run_trials"], ["", "", "def", "main", "(", ")", ":", "\n", "    ", "ap", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "ap", ".", "add_argument", "(", "'--force_mag'", ",", "type", "=", "float", ")", "\n", "ap", ".", "add_argument", "(", "'--reg'", ",", "action", "=", "'store_true'", ")", "\n", "args", "=", "vars", "(", "ap", ".", "parse_args", "(", ")", ")", "\n", "force_mag", "=", "args", "[", "'force_mag'", "]", "\n", "reg", "=", "args", "[", "'reg'", "]", "\n", "\n", "test", "=", "CartpoleDagger", "(", "force_mag", ",", "reg", ")", "\n", "# test = CartpoleDaggerLambda()", "\n", "results", "=", "test", ".", "run_trials", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jon--lee_aor.exp.analyze_cartpole6.aggregate": [[13, 77], ["open", "pickle.load", "open.close", "len", "len", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "enumerate", "tools.statistics.mean_sem", "tools.statistics.mean_sem", "tools.statistics.mean_sem", "tools.statistics.mean_sem", "tools.statistics.mean_sem", "tools.statistics.mean_sem", "tools.statistics.mean_sem", "tools.statistics.mean_sem", "tools.statistics.mean_sem", "tools.statistics.mean_sem", "numpy.arange", "len", "numpy.cumsum", "numpy.cumsum", "numpy.arange", "numpy.arange"], "function", ["home.repos.pwc.inspect_result.jon--lee_aor.tools.statistics.mean_sem", "home.repos.pwc.inspect_result.jon--lee_aor.tools.statistics.mean_sem", "home.repos.pwc.inspect_result.jon--lee_aor.tools.statistics.mean_sem", "home.repos.pwc.inspect_result.jon--lee_aor.tools.statistics.mean_sem", "home.repos.pwc.inspect_result.jon--lee_aor.tools.statistics.mean_sem", "home.repos.pwc.inspect_result.jon--lee_aor.tools.statistics.mean_sem", "home.repos.pwc.inspect_result.jon--lee_aor.tools.statistics.mean_sem", "home.repos.pwc.inspect_result.jon--lee_aor.tools.statistics.mean_sem", "home.repos.pwc.inspect_result.jon--lee_aor.tools.statistics.mean_sem", "home.repos.pwc.inspect_result.jon--lee_aor.tools.statistics.mean_sem"], ["def", "aggregate", "(", "filepath", ")", ":", "\n", "    ", "f", "=", "open", "(", "filepath", ",", "'rb'", ")", "\n", "all_results", "=", "pickle", ".", "load", "(", "f", ")", "\n", "f", ".", "close", "(", ")", "\n", "\n", "n", "=", "len", "(", "all_results", ")", "\n", "d", "=", "len", "(", "all_results", "[", "0", "]", "[", "'lnr_costs'", "]", ")", "\n", "\n", "lnr_costs", "=", "np", ".", "zeros", "(", "(", "n", ",", "d", ")", ")", "\n", "opt_costs", "=", "np", ".", "zeros", "(", "(", "n", ",", "d", ")", ")", "\n", "diff_costs", "=", "np", ".", "zeros", "(", "(", "n", ",", "d", ")", ")", "\n", "static_regret", "=", "np", ".", "zeros", "(", "(", "n", ",", "d", ")", ")", "\n", "\n", "rewards", "=", "np", ".", "zeros", "(", "(", "n", ",", "d", ")", ")", "\n", "sup_rewards", "=", "np", ".", "zeros", "(", "(", "n", ",", "d", ")", ")", "\n", "variations", "=", "np", ".", "zeros", "(", "(", "n", ",", "d", "-", "1", ")", ")", "\n", "opt_variations", "=", "np", ".", "zeros", "(", "(", "n", ",", "d", "-", "1", ")", ")", "\n", "lambdas", "=", "np", ".", "zeros", "(", "(", "n", ",", "d", "-", "1", ")", ")", "\n", "betas", "=", "np", ".", "zeros", "(", "(", "n", ",", "d", "-", "1", ")", ")", "\n", "\n", "for", "t", ",", "result", "in", "enumerate", "(", "all_results", ")", ":", "\n", "# lnr_costs[t, :] = result['lnr_costs']", "\n", "# opt_costs[t, :] = result['opt_costs']", "\n", "        ", "lnr_costs", "[", "t", ",", ":", "]", "=", "np", ".", "cumsum", "(", "result", "[", "'lnr_costs'", "]", ")", "/", "(", "np", ".", "arange", "(", "d", ")", "+", "1", ")", "\n", "opt_costs", "[", "t", ",", ":", "]", "=", "np", ".", "cumsum", "(", "result", "[", "'opt_costs'", "]", ")", "/", "(", "np", ".", "arange", "(", "d", ")", "+", "1", ")", "\n", "rewards", "[", "t", ",", ":", "]", "=", "result", "[", "'rewards'", "]", "\n", "sup_rewards", "[", "t", ",", ":", "]", "=", "result", "[", "'sup_rewards'", "]", "\n", "\n", "variations", "[", "t", ",", ":", "]", "=", "result", "[", "'variations'", "]", "\n", "opt_variations", "[", "t", ",", ":", "]", "=", "result", "[", "'opt_variations'", "]", "\n", "lambdas", "[", "t", ",", ":", "]", "=", "result", "[", "'lambdas'", "]", "\n", "betas", "[", "t", ",", ":", "]", "=", "result", "[", "'betas'", "]", "\n", "\n", "static_regret", "[", "t", ",", ":", "]", "=", "result", "[", "'static_regret'", "]", "\n", "\n", "\n", "", "diff_costs", "=", "lnr_costs", "-", "opt_costs", "\n", "\n", "lnr_mean", ",", "lnr_std", "=", "statistics", ".", "mean_sem", "(", "lnr_costs", ")", "\n", "opt_mean", ",", "opt_std", "=", "statistics", ".", "mean_sem", "(", "opt_costs", ")", "\n", "diff_mean", ",", "diff_std", "=", "statistics", ".", "mean_sem", "(", "diff_costs", ")", "\n", "sr_mean", ",", "sr_std", "=", "statistics", ".", "mean_sem", "(", "static_regret", ")", "\n", "\n", "var_mean", ",", "var_std", "=", "statistics", ".", "mean_sem", "(", "variations", ")", "\n", "opt_var_mean", ",", "opt_var_std", "=", "statistics", ".", "mean_sem", "(", "opt_variations", ")", "\n", "lam_mean", ",", "lam_std", "=", "statistics", ".", "mean_sem", "(", "lambdas", ")", "\n", "beta_mean", ",", "beta_std", "=", "statistics", ".", "mean_sem", "(", "betas", ")", "\n", "\n", "reward_mean", ",", "reward_std", "=", "statistics", ".", "mean_sem", "(", "rewards", ")", "\n", "sup_reward_mean", ",", "sup_reward_std", "=", "statistics", ".", "mean_sem", "(", "sup_rewards", ")", "\n", "\n", "x_axis", "=", "np", ".", "arange", "(", "len", "(", "lnr_mean", ")", ")", "\n", "\n", "results", "=", "{", "\n", "\"dyn_regret\"", ":", "(", "diff_mean", ",", "diff_std", ")", ",", "\n", "\"static_regret\"", ":", "(", "sr_mean", ",", "sr_std", ")", ",", "\n", "\"reward\"", ":", "(", "reward_mean", ",", "reward_std", ")", ",", "\n", "\"sup_reward\"", ":", "(", "sup_reward_mean", ",", "sup_reward_std", ")", ",", "\n", "\"var\"", ":", "(", "var_mean", ",", "var_std", ")", ",", "\n", "\"opt_var\"", ":", "(", "opt_var_mean", ",", "opt_var_std", ")", ",", "\n", "\"lam\"", ":", "(", "lam_mean", ",", "lam_std", ")", ",", "\n", "'beta'", ":", "(", "beta_mean", ",", "beta_std", ")", "\n", "}", "\n", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.jon--lee_aor.exp.analyze_cartpole6.plot_results": [[79, 111], ["matplotlib.subplot", "matplotlib.title", "matplotlib.ylim", "matplotlib.tight_layout", "matplotlib.legend", "matplotlib.ylabel", "matplotlib.subplot", "matplotlib.title", "matplotlib.errorbar", "matplotlib.ylabel", "matplotlib.tight_layout", "matplotlib.legend", "matplotlib.ylim", "numpy.arange", "matplotlib.errorbar", "matplotlib.errorbar", "matplotlib.errorbar", "matplotlib.xlabel", "len", "p[].get_color"], "function", ["None"], ["", "def", "plot_results", "(", "all_results", ",", "i", ")", ":", "\n", "\n", "    ", "plt", ".", "subplot", "(", "3", ",", "2", ",", "1", "+", "i", "*", "2", ")", "\n", "plt", ".", "title", "(", "all_results", "[", "0", "]", "[", "'title'", "]", "+", "\": Regret Rates\"", ",", "fontsize", "=", "22", ")", "\n", "for", "results", "in", "all_results", ":", "\n", "        ", "sr_mean", ",", "sr_std", "=", "results", "[", "'static_regret'", "]", "\n", "diff_mean", ",", "diff_std", "=", "results", "[", "'dyn_regret'", "]", "\n", "x_axis", "=", "np", ".", "arange", "(", "len", "(", "sr_mean", ")", ")", "\n", "p", "=", "plt", ".", "errorbar", "(", "x_axis", ",", "sr_mean", ",", "yerr", "=", "sr_std", ",", "label", "=", "results", "[", "'label'", "]", "+", "': Static Regret'", ",", "linestyle", "=", "'--'", ")", "\n", "plt", ".", "errorbar", "(", "x_axis", ",", "diff_mean", ",", "yerr", "=", "diff_std", ",", "label", "=", "results", "[", "'label'", "]", "+", "': Dynamic Regret'", ",", "color", "=", "p", "[", "0", "]", ".", "get_color", "(", ")", ")", "\n", "", "plt", ".", "ylim", "(", "0", ",", ".8", ")", "\n", "plt", ".", "tight_layout", "(", ")", "\n", "plt", ".", "legend", "(", "fontsize", "=", "18", ")", "\n", "plt", ".", "ylabel", "(", "'Regret'", ",", "fontsize", "=", "20", ")", "\n", "# plt.ylim(0, 1)", "\n", "\n", "\n", "\n", "plt", ".", "subplot", "(", "3", ",", "2", ",", "i", "*", "2", "+", "2", ")", "\n", "plt", ".", "title", "(", "all_results", "[", "0", "]", "[", "'title'", "]", "+", "\": System Cost\"", ",", "fontsize", "=", "22", ")", "\n", "for", "results", "in", "all_results", ":", "\n", "        ", "sup_reward_mean", ",", "reward_std", "=", "results", "[", "'sup_reward'", "]", "\n", "reward_mean", ",", "sup_reward_std", "=", "results", "[", "'reward'", "]", "\n", "p", "=", "plt", ".", "errorbar", "(", "x_axis", ",", "reward_mean", ",", "yerr", "=", "reward_std", ",", "label", "=", "results", "[", "'label'", "]", ")", "\n", "", "plt", ".", "errorbar", "(", "x_axis", ",", "sup_reward_mean", ",", "yerr", "=", "sup_reward_std", ",", "label", "=", "'Supervisor Cost'", ",", "linestyle", "=", "'--'", ",", "color", "=", "\"green\"", ")", "\n", "plt", ".", "ylabel", "(", "'Angular Deviation'", ",", "fontsize", "=", "20", ")", "\n", "\n", "if", "i", "==", "2", ":", "\n", "        ", "plt", ".", "xlabel", "(", "'Iterations'", ",", "fontsize", "=", "20", ")", "\n", "", "plt", ".", "tight_layout", "(", ")", "\n", "plt", ".", "legend", "(", "fontsize", "=", "20", ")", "\n", "plt", ".", "ylim", "(", "0", ",", "20", ")", "\n", "# plt.show()", "\n"]], "home.repos.pwc.inspect_result.jon--lee_aor.exp.analyze_trials.load_data": [[9, 22], ["os.path.join", "open", "pickle.load", "open.close", "numpy.zeros", "enumerate", "len", "len"], "function", ["None"], ["def", "load_data", "(", "path", ",", "alg", ")", ":", "\n", "    ", "filename", "=", "alg", "+", "'.p'", "\n", "filepath", "=", "os", ".", "path", ".", "join", "(", "path", ",", "filename", ")", "\n", "\n", "f", "=", "open", "(", "filepath", ",", "'rb'", ")", "\n", "results", "=", "pickle", ".", "load", "(", "f", ")", "\n", "f", ".", "close", "(", ")", "\n", "\n", "costs", "=", "np", ".", "zeros", "(", "(", "len", "(", "results", ")", ",", "len", "(", "results", "[", "0", "]", "[", "'rewards'", "]", ")", ")", ")", "\n", "for", "t", ",", "result", "in", "enumerate", "(", "results", ")", ":", "\n", "        ", "costs", "[", "t", ",", ":", "]", "=", "result", "[", "'rewards'", "]", "\n", "\n", "", "return", "costs", "\n", "\n"]], "home.repos.pwc.inspect_result.jon--lee_aor.exp.analyze_lambdas.aggregate_save": [[8, 56], ["len", "len", "numpy.zeros", "numpy.zeros", "numpy.zeros", "enumerate", "tools.statistics.mean_sem", "tools.statistics.mean_sem", "numpy.max", "tools.statistics.mean_sem", "matplotlib.subplot", "matplotlib.title", "matplotlib.errorbar", "matplotlib.errorbar", "matplotlib.xscale", "matplotlib.legend", "matplotlib.subplot", "matplotlib.title", "matplotlib.xscale", "matplotlib.plot", "matplotlib.subplot", "matplotlib.title", "matplotlib.errorbar", "matplotlib.xscale", "matplotlib.tight_layout", "matplotlib.savefig", "matplotlib.close", "matplotlib.cla", "matplotlib.clf", "params.append", "os.path.join"], "function", ["home.repos.pwc.inspect_result.jon--lee_aor.tools.statistics.mean_sem", "home.repos.pwc.inspect_result.jon--lee_aor.tools.statistics.mean_sem", "home.repos.pwc.inspect_result.jon--lee_aor.expert.tf_util.max", "home.repos.pwc.inspect_result.jon--lee_aor.tools.statistics.mean_sem"], ["def", "aggregate_save", "(", "direc", ",", "prefix", ",", "all_results", ")", ":", "\n", "        ", "n", "=", "len", "(", "all_results", ")", "\n", "d", "=", "len", "(", "all_results", "[", "0", "]", "[", "'lnr_costs'", "]", ")", "\n", "\n", "var", "=", "np", ".", "zeros", "(", "(", "n", ",", "d", "-", "1", ")", ")", "\n", "opt_var", "=", "np", ".", "zeros", "(", "(", "n", ",", "d", "-", "1", ")", ")", "\n", "lamb", "=", "np", ".", "zeros", "(", "(", "n", ",", "d", "-", "1", ")", ")", "\n", "\n", "params", "=", "[", "]", "\n", "title", "=", "None", "\n", "\n", "for", "t", ",", "result", "in", "enumerate", "(", "all_results", ")", ":", "\n", "            ", "params", ".", "append", "(", "result", "[", "'param'", "]", ")", "\n", "title", "=", "result", "[", "'title'", "]", "\n", "var", "[", "t", ",", ":", "]", "=", "result", "[", "'variations'", "]", "\n", "opt_var", "[", "t", ",", ":", "]", "=", "result", "[", "'opt_variations'", "]", "\n", "lamb", "[", "t", ",", ":", "]", "=", "result", "[", "'lambdas'", "]", "\n", "\n", "\n", "", "var_mean", ",", "var_std", "=", "statistics", ".", "mean_sem", "(", "var", ".", "T", ")", "\n", "opt_var_mean", ",", "opt_var_std", "=", "statistics", ".", "mean_sem", "(", "opt_var", ".", "T", ")", "\n", "lamb_max", "=", "np", ".", "max", "(", "lamb", ",", "axis", "=", "1", ")", "\n", "lamb_mean", ",", "lamb_std", "=", "statistics", ".", "mean_sem", "(", "lamb", ".", "T", ")", "\n", "\n", "# Dynamic Regret", "\n", "plt", ".", "subplot", "(", "311", ")", "\n", "plt", ".", "title", "(", "\"Variations\"", ")", "\n", "plt", ".", "errorbar", "(", "params", ",", "var_mean", ",", "yerr", "=", "var_std", ",", "label", "=", "'lnr variations'", ")", "\n", "plt", ".", "errorbar", "(", "params", ",", "opt_var_mean", ",", "yerr", "=", "opt_var_std", ",", "label", "=", "'opt variations'", ")", "\n", "plt", ".", "xscale", "(", "'log'", ")", "\n", "plt", ".", "legend", "(", ")", "\n", "\n", "plt", ".", "subplot", "(", "312", ")", "\n", "plt", ".", "title", "(", "\"Max Lambda Ratio\"", ")", "\n", "plt", ".", "xscale", "(", "'log'", ")", "\n", "plt", ".", "plot", "(", "params", ",", "lamb_max", ")", "\n", "\n", "plt", ".", "subplot", "(", "313", ")", "\n", "plt", ".", "title", "(", "\"Mean Lambda Ratio\"", ")", "\n", "plt", ".", "errorbar", "(", "params", ",", "lamb_mean", ",", "yerr", "=", "lamb_std", ")", "\n", "plt", ".", "xscale", "(", "'log'", ")", "\n", "plt", ".", "tight_layout", "(", ")", "\n", "\n", "filepath", "=", "os", ".", "path", ".", "join", "(", "direc", ",", "prefix", ")", "+", "'_lambda.pdf'", "\n", "plt", ".", "savefig", "(", "filepath", ")", "\n", "plt", ".", "close", "(", ")", "\n", "plt", ".", "cla", "(", ")", "\n", "plt", ".", "clf", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jon--lee_aor.exp.analyze_lambdas.aggregate": [[60, 95], ["open", "pickle.load", "open.close", "len", "len", "numpy.zeros", "numpy.zeros", "numpy.zeros", "enumerate", "tools.statistics.mean_sem", "tools.statistics.mean_sem", "numpy.max", "tools.statistics.mean_sem", "params.append"], "function", ["home.repos.pwc.inspect_result.jon--lee_aor.tools.statistics.mean_sem", "home.repos.pwc.inspect_result.jon--lee_aor.tools.statistics.mean_sem", "home.repos.pwc.inspect_result.jon--lee_aor.expert.tf_util.max", "home.repos.pwc.inspect_result.jon--lee_aor.tools.statistics.mean_sem"], ["", "def", "aggregate", "(", "filepath", ")", ":", "\n", "    ", "f", "=", "open", "(", "filepath", ",", "'rb'", ")", "\n", "all_results", "=", "pickle", ".", "load", "(", "f", ")", "\n", "f", ".", "close", "(", ")", "\n", "\n", "n", "=", "len", "(", "all_results", ")", "\n", "d", "=", "len", "(", "all_results", "[", "0", "]", "[", "'lnr_costs'", "]", ")", "\n", "\n", "var", "=", "np", ".", "zeros", "(", "(", "n", ",", "d", "-", "1", ")", ")", "\n", "opt_var", "=", "np", ".", "zeros", "(", "(", "n", ",", "d", "-", "1", ")", ")", "\n", "lamb", "=", "np", ".", "zeros", "(", "(", "n", ",", "d", "-", "1", ")", ")", "\n", "\n", "params", "=", "[", "]", "\n", "title", "=", "None", "\n", "\n", "for", "t", ",", "result", "in", "enumerate", "(", "all_results", ")", ":", "\n", "        ", "params", ".", "append", "(", "result", "[", "'param'", "]", ")", "\n", "title", "=", "result", "[", "'title'", "]", "\n", "var", "[", "t", ",", ":", "]", "=", "result", "[", "'variations'", "]", "\n", "opt_var", "[", "t", ",", ":", "]", "=", "result", "[", "'opt_variations'", "]", "\n", "lamb", "[", "t", ",", ":", "]", "=", "result", "[", "'lambdas'", "]", "\n", "\n", "\n", "", "var_mean", ",", "var_std", "=", "statistics", ".", "mean_sem", "(", "var", ".", "T", ")", "\n", "opt_var_mean", ",", "opt_var_std", "=", "statistics", ".", "mean_sem", "(", "opt_var", ".", "T", ")", "\n", "lamb_max", "=", "np", ".", "max", "(", "lamb", ",", "axis", "=", "1", ")", "\n", "lamb_mean", ",", "lamb_std", "=", "statistics", ".", "mean_sem", "(", "lamb", ".", "T", ")", "\n", "\n", "results", "=", "{", "\n", "'var'", ":", "[", "var_mean", ",", "var_std", "]", ",", "\n", "'opt_var'", ":", "[", "opt_var_mean", ",", "opt_var_std", "]", ",", "\n", "'lamb'", ":", "[", "lamb_max", ",", "lamb_mean", ",", "lamb_std", "]", "\n", "}", "\n", "\n", "return", "params", ",", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.jon--lee_aor.exp.analyze_cartpole6_instantaneous.aggregate": [[13, 77], ["open", "pickle.load", "open.close", "len", "len", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "enumerate", "tools.statistics.mean_sem", "tools.statistics.mean_sem", "tools.statistics.mean_sem", "tools.statistics.mean_sem", "tools.statistics.mean_sem", "tools.statistics.mean_sem", "tools.statistics.mean_sem", "tools.statistics.mean_sem", "tools.statistics.mean_sem", "tools.statistics.mean_sem", "numpy.arange", "len"], "function", ["home.repos.pwc.inspect_result.jon--lee_aor.tools.statistics.mean_sem", "home.repos.pwc.inspect_result.jon--lee_aor.tools.statistics.mean_sem", "home.repos.pwc.inspect_result.jon--lee_aor.tools.statistics.mean_sem", "home.repos.pwc.inspect_result.jon--lee_aor.tools.statistics.mean_sem", "home.repos.pwc.inspect_result.jon--lee_aor.tools.statistics.mean_sem", "home.repos.pwc.inspect_result.jon--lee_aor.tools.statistics.mean_sem", "home.repos.pwc.inspect_result.jon--lee_aor.tools.statistics.mean_sem", "home.repos.pwc.inspect_result.jon--lee_aor.tools.statistics.mean_sem", "home.repos.pwc.inspect_result.jon--lee_aor.tools.statistics.mean_sem", "home.repos.pwc.inspect_result.jon--lee_aor.tools.statistics.mean_sem"], ["def", "aggregate", "(", "filepath", ")", ":", "\n", "    ", "f", "=", "open", "(", "filepath", ",", "'rb'", ")", "\n", "all_results", "=", "pickle", ".", "load", "(", "f", ")", "\n", "f", ".", "close", "(", ")", "\n", "\n", "n", "=", "len", "(", "all_results", ")", "\n", "d", "=", "len", "(", "all_results", "[", "0", "]", "[", "'lnr_costs'", "]", ")", "\n", "\n", "lnr_costs", "=", "np", ".", "zeros", "(", "(", "n", ",", "d", ")", ")", "\n", "opt_costs", "=", "np", ".", "zeros", "(", "(", "n", ",", "d", ")", ")", "\n", "diff_costs", "=", "np", ".", "zeros", "(", "(", "n", ",", "d", ")", ")", "\n", "static_regret", "=", "np", ".", "zeros", "(", "(", "n", ",", "d", ")", ")", "\n", "\n", "rewards", "=", "np", ".", "zeros", "(", "(", "n", ",", "d", ")", ")", "\n", "sup_rewards", "=", "np", ".", "zeros", "(", "(", "n", ",", "d", ")", ")", "\n", "variations", "=", "np", ".", "zeros", "(", "(", "n", ",", "d", "-", "1", ")", ")", "\n", "opt_variations", "=", "np", ".", "zeros", "(", "(", "n", ",", "d", "-", "1", ")", ")", "\n", "lambdas", "=", "np", ".", "zeros", "(", "(", "n", ",", "d", "-", "1", ")", ")", "\n", "betas", "=", "np", ".", "zeros", "(", "(", "n", ",", "d", "-", "1", ")", ")", "\n", "\n", "for", "t", ",", "result", "in", "enumerate", "(", "all_results", ")", ":", "\n", "        ", "lnr_costs", "[", "t", ",", ":", "]", "=", "result", "[", "'lnr_costs'", "]", "\n", "opt_costs", "[", "t", ",", ":", "]", "=", "result", "[", "'opt_costs'", "]", "\n", "# lnr_costs[t, :] = np.cumsum(result['lnr_costs']) / (np.arange(d) + 1)", "\n", "# opt_costs[t, :] = np.cumsum(result['opt_costs']) / (np.arange(d) + 1)", "\n", "rewards", "[", "t", ",", ":", "]", "=", "result", "[", "'rewards'", "]", "\n", "sup_rewards", "[", "t", ",", ":", "]", "=", "result", "[", "'sup_rewards'", "]", "\n", "\n", "variations", "[", "t", ",", ":", "]", "=", "result", "[", "'variations'", "]", "\n", "opt_variations", "[", "t", ",", ":", "]", "=", "result", "[", "'opt_variations'", "]", "\n", "lambdas", "[", "t", ",", ":", "]", "=", "result", "[", "'lambdas'", "]", "\n", "betas", "[", "t", ",", ":", "]", "=", "result", "[", "'betas'", "]", "\n", "\n", "static_regret", "[", "t", ",", ":", "]", "=", "result", "[", "'static_regret'", "]", "\n", "\n", "\n", "", "diff_costs", "=", "lnr_costs", "-", "opt_costs", "\n", "\n", "lnr_mean", ",", "lnr_std", "=", "statistics", ".", "mean_sem", "(", "lnr_costs", ")", "\n", "opt_mean", ",", "opt_std", "=", "statistics", ".", "mean_sem", "(", "opt_costs", ")", "\n", "diff_mean", ",", "diff_std", "=", "statistics", ".", "mean_sem", "(", "diff_costs", ")", "\n", "sr_mean", ",", "sr_std", "=", "statistics", ".", "mean_sem", "(", "static_regret", ")", "\n", "\n", "var_mean", ",", "var_std", "=", "statistics", ".", "mean_sem", "(", "variations", ")", "\n", "opt_var_mean", ",", "opt_var_std", "=", "statistics", ".", "mean_sem", "(", "opt_variations", ")", "\n", "lam_mean", ",", "lam_std", "=", "statistics", ".", "mean_sem", "(", "lambdas", ")", "\n", "beta_mean", ",", "beta_std", "=", "statistics", ".", "mean_sem", "(", "betas", ")", "\n", "\n", "reward_mean", ",", "reward_std", "=", "statistics", ".", "mean_sem", "(", "rewards", ")", "\n", "sup_reward_mean", ",", "sup_reward_std", "=", "statistics", ".", "mean_sem", "(", "sup_rewards", ")", "\n", "\n", "x_axis", "=", "np", ".", "arange", "(", "len", "(", "lnr_mean", ")", ")", "\n", "\n", "results", "=", "{", "\n", "\"dyn_regret\"", ":", "(", "diff_mean", ",", "diff_std", ")", ",", "\n", "\"static_regret\"", ":", "(", "sr_mean", ",", "sr_std", ")", ",", "\n", "\"reward\"", ":", "(", "reward_mean", ",", "reward_std", ")", ",", "\n", "\"sup_reward\"", ":", "(", "sup_reward_mean", ",", "sup_reward_std", ")", ",", "\n", "\"var\"", ":", "(", "var_mean", ",", "var_std", ")", ",", "\n", "\"opt_var\"", ":", "(", "opt_var_mean", ",", "opt_var_std", ")", ",", "\n", "\"lam\"", ":", "(", "lam_mean", ",", "lam_std", ")", ",", "\n", "'beta'", ":", "(", "beta_mean", ",", "beta_std", ")", "\n", "}", "\n", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.jon--lee_aor.exp.analyze_cartpole6_instantaneous.plot_results": [[79, 111], ["matplotlib.subplot", "matplotlib.title", "matplotlib.ylim", "matplotlib.tight_layout", "matplotlib.legend", "matplotlib.ylabel", "matplotlib.subplot", "matplotlib.title", "matplotlib.errorbar", "matplotlib.ylabel", "matplotlib.tight_layout", "matplotlib.legend", "matplotlib.ylim", "numpy.arange", "matplotlib.errorbar", "matplotlib.errorbar", "matplotlib.xlabel", "len"], "function", ["None"], ["", "def", "plot_results", "(", "all_results", ",", "i", ")", ":", "\n", "\n", "    ", "plt", ".", "subplot", "(", "3", ",", "2", ",", "1", "+", "i", "*", "2", ")", "\n", "plt", ".", "title", "(", "all_results", "[", "0", "]", "[", "'title'", "]", "+", "\": Regret\"", ",", "fontsize", "=", "22", ")", "\n", "for", "results", "in", "all_results", ":", "\n", "        ", "sr_mean", ",", "sr_std", "=", "results", "[", "'static_regret'", "]", "\n", "diff_mean", ",", "diff_std", "=", "results", "[", "'dyn_regret'", "]", "\n", "x_axis", "=", "np", ".", "arange", "(", "len", "(", "sr_mean", ")", ")", "\n", "# p = plt.errorbar(x_axis, sr_mean, yerr=sr_std, label=results['label'] + ': Static Regret', linestyle='--')", "\n", "plt", ".", "errorbar", "(", "x_axis", ",", "diff_mean", ",", "yerr", "=", "diff_std", ",", "label", "=", "results", "[", "'label'", "]", ",", "linewidth", "=", "3.0", ")", "\n", "", "plt", ".", "ylim", "(", "-", ".05", ",", ".8", ")", "\n", "plt", ".", "tight_layout", "(", ")", "\n", "plt", ".", "legend", "(", "fontsize", "=", "20", ")", "\n", "plt", ".", "ylabel", "(", "'Instantaneous Regret'", ",", "fontsize", "=", "20", ")", "\n", "# plt.ylim(0, 1)", "\n", "\n", "\n", "\n", "plt", ".", "subplot", "(", "3", ",", "2", ",", "i", "*", "2", "+", "2", ")", "\n", "plt", ".", "title", "(", "all_results", "[", "0", "]", "[", "'title'", "]", "+", "\": System Cost\"", ",", "fontsize", "=", "22", ")", "\n", "for", "results", "in", "all_results", ":", "\n", "        ", "sup_reward_mean", ",", "reward_std", "=", "results", "[", "'sup_reward'", "]", "\n", "reward_mean", ",", "sup_reward_std", "=", "results", "[", "'reward'", "]", "\n", "p", "=", "plt", ".", "errorbar", "(", "x_axis", ",", "reward_mean", ",", "yerr", "=", "reward_std", ",", "label", "=", "results", "[", "'label'", "]", ",", "linewidth", "=", "3.0", ")", "\n", "", "plt", ".", "errorbar", "(", "x_axis", ",", "sup_reward_mean", ",", "yerr", "=", "sup_reward_std", ",", "label", "=", "'Supervisor'", ",", "linestyle", "=", "'--'", ",", "color", "=", "\"green\"", ",", "linewidth", "=", "3.0", ")", "\n", "plt", ".", "ylabel", "(", "'Angular Deviation'", ",", "fontsize", "=", "20", ")", "\n", "\n", "if", "i", "==", "2", ":", "\n", "        ", "plt", ".", "xlabel", "(", "'Iterations'", ",", "fontsize", "=", "20", ")", "\n", "", "plt", ".", "tight_layout", "(", ")", "\n", "plt", ".", "legend", "(", "fontsize", "=", "20", ")", "\n", "plt", ".", "ylim", "(", "0", ",", "20", ")", "\n", "# plt.show()", "\n"]], "home.repos.pwc.inspect_result.jon--lee_aor.exp.cartpole_mig.CartpoleMIG.__init__": [[22, 37], ["exp.cartpole_dagger.CartpoleDagger.__init__", "numpy.min", "os.path.join", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.jon--lee_aor.exp_mujoco.mj_dagger.MujocoDagger.__init__", "home.repos.pwc.inspect_result.jon--lee_aor.expert.tf_util.min"], ["    ", "def", "__init__", "(", "self", ",", "force_mag", ",", "reg", ")", ":", "\n", "        ", "CartpoleDagger", ".", "__init__", "(", "self", ",", "force_mag", ",", "reg", ")", "\n", "self", ".", "iters", "=", "100", "\n", "self", ".", "trials", "=", "1", "\n", "\n", "# Adaptive testing", "\n", "self", ".", "alpha", "=", ".1", "\n", "self", ".", "eta", "=", "np", ".", "min", "(", "[", ".01", ",", "1.0", "/", "self", ".", "alpha", "/", "10", "]", ")", "\n", "self", ".", "t", "=", ".01", "\n", "\n", "self", ".", "inner_eta", "=", "1.0", "\n", "\n", "self", ".", "dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "base_dir", ",", "'mig'", ")", "\n", "self", ".", "prefix", "=", "'mig'", "\n", "self", ".", "path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "dir", ",", "self", ".", "prefix", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jon--lee_aor.exp.cartpole_mig.CartpoleMIG.run_iters": [[39, 100], ["range", "results.keys", "cartpole_mig.CartpoleMIG.compute_results", "print", "print", "cartpole_mig.CartpoleMIG.compute_statistics", "tools.statistics.collect_traj", "cartpole_mig.CartpoleMIG.lnr.set_update", "cartpole_mig.CartpoleMIG.lnr.multiple_update", "numpy.array", "cartpole_mig.CartpoleMIG.sup.intended_action", "numpy.mean", "numpy.min", "print", "print", "str", "str", "len", "str", "str"], "methods", ["home.repos.pwc.inspect_result.jon--lee_aor.exp_mujoco.mj_dagger.MujocoDagger.compute_results", "home.repos.pwc.inspect_result.jon--lee_aor.exp_mujoco.mj_dagger.MujocoDagger.compute_statistics", "home.repos.pwc.inspect_result.jon--lee_aor.tools.statistics.collect_traj", "home.repos.pwc.inspect_result.jon--lee_aor.tools.learner.Learner.set_update", "home.repos.pwc.inspect_result.jon--lee_aor.tools.lr.LR.multiple_update", "home.repos.pwc.inspect_result.jon--lee_aor.tools.learner.Learner.intended_action", "home.repos.pwc.inspect_result.jon--lee_aor.expert.tf_util.mean", "home.repos.pwc.inspect_result.jon--lee_aor.expert.tf_util.min"], ["", "def", "run_iters", "(", "self", ")", ":", "\n", "\n", "        ", "results", "=", "{", "\n", "'lnr_costs'", ":", "[", "]", ",", "\n", "'opt_costs'", ":", "[", "]", ",", "\n", "'variations'", ":", "[", "]", ",", "\n", "'opt_variations'", ":", "[", "]", ",", "\n", "'param_norms'", ":", "[", "]", ",", "\n", "'opt_param_norms'", ":", "[", "]", ",", "\n", "'lambdas'", ":", "[", "]", ",", "\n", "'lnr_batch_costs'", ":", "[", "]", ",", "\n", "'opt_batch_costs'", ":", "[", "]", ",", "\n", "'static_regret'", ":", "[", "]", ",", "\n", "'rewards'", ":", "[", "]", ",", "\n", "'betas'", ":", "[", "]", ",", "\n", "'alphas'", ":", "[", "]", ",", "\n", "\n", "}", "\n", "\n", "d", "=", "self", ".", "env", ".", "observation_space", ".", "shape", "[", "0", "]", "\n", "# self.data_states = [np.zeros(d), np.zeros(d)]", "\n", "# self.data_actions = [1, 0]", "\n", "self", ".", "data_states", "=", "[", "]", "\n", "self", ".", "data_actions", "=", "[", "]", "\n", "\n", "for", "iteration", "in", "range", "(", "self", ".", "iters", ")", ":", "\n", "            ", "print", "(", "\"\\tIteration: \"", "+", "str", "(", "iteration", ")", ")", "\n", "print", "(", "\"\\tData states: \"", "+", "str", "(", "len", "(", "self", ".", "data_states", ")", ")", ")", "\n", "\n", "self", ".", "compute_statistics", "(", "iteration", ",", "results", ")", "\n", "\n", "states", ",", "tmp_actions", ",", "_", ",", "_", "=", "statistics", ".", "collect_traj", "(", "self", ".", "env", ",", "self", ".", "lnr", ",", "self", ".", "params", "[", "'T'", "]", ")", "\n", "i_actions", "=", "[", "self", ".", "sup", ".", "intended_action", "(", "s", ")", "for", "s", "in", "states", "]", "\n", "\n", "\n", "self", ".", "data_states", "+=", "states", "\n", "self", ".", "data_actions", "+=", "i_actions", "\n", "\n", "self", ".", "lnr", ".", "set_update", "(", "states", ",", "i_actions", ")", "\n", "self", ".", "lnr", ".", "multiple_update", "(", "iteration", ")", "\n", "\n", "# Adaptive regularization:", "\n", "if", "self", ".", "reg", "and", "(", "iteration", "+", "1", ")", "%", "10", "==", "0", ":", "\n", "                ", "mean_lambda", "=", "np", ".", "mean", "(", "results", "[", "'lambdas'", "]", "[", "-", "10", ":", "]", "+", "self", ".", "lambda_prior", ")", "\n", "next_alpha", "=", "mean_lambda", "*", "self", ".", "lnr", ".", "est", ".", "alpha", "\n", "self", ".", "lnr", ".", "est", ".", "alpha", "=", "self", ".", "t", "*", "next_alpha", "+", "(", "1", "-", "self", ".", "t", ")", "*", "self", ".", "lnr", ".", "est", ".", "alpha", "\n", "self", ".", "lnr", ".", "est", ".", "eta", "=", "np", ".", "min", "(", "[", ".001", ",", "1.0", "/", "self", ".", "lnr", ".", "est", ".", "alpha", "/", "10", "]", ")", "\n", "\n", "print", "(", "\"\\n\\n\\t\\t Updated alpha: \"", "+", "str", "(", "self", ".", "lnr", ".", "est", ".", "alpha", ")", ")", "\n", "print", "(", "\"\\t\\t Lambda was: \"", "+", "str", "(", "mean_lambda", ")", ")", "\n", "\n", "\n", "\n", "\n", "", "", "for", "key", "in", "results", ".", "keys", "(", ")", ":", "\n", "            ", "results", "[", "key", "]", "=", "np", ".", "array", "(", "results", "[", "key", "]", ")", "\n", "\n", "", "self", ".", "compute_results", "(", "results", ")", "\n", "\n", "\n", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.jon--lee_aor.exp.cartpole_mig.CartpoleMIGLambda.run_trials": [[104, 131], ["os.path.join", "exp.analyze_lambdas.aggregate_save", "open", "pickle.dump", "open.close", "os.path.exists", "os.makedirs", "cartpole_mig.CartpoleMIGLambda.prologue", "cartpole_mig.CartpoleMIGLambda.run_iters", "all_results.append", "os.path.join", "str", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.jon--lee_aor.exp.analyze_lambdas.aggregate_save", "home.repos.pwc.inspect_result.jon--lee_aor.exp_mujoco.mj_dagger.MujocoDagger.prologue", "home.repos.pwc.inspect_result.jon--lee_aor.exp_mujoco.mj_dagger.MujocoDagger.run_iters"], ["    ", "def", "run_trials", "(", "self", ")", ":", "\n", "\n", "        ", "title", "=", "'force_mag'", "\n", "self", ".", "base_dir", "=", "'data/cartpole_lambda_'", "+", "title", "\n", "self", ".", "dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "base_dir", ",", "'mig'", ")", "\n", "# params = [.001, .01, .1, 1.0, 10.0, 100.0]", "\n", "params", "=", "[", ".5", ",", "2.0", ",", "4.0", ",", "8.0", ",", "16.0", ",", "32.0", "]", "\n", "all_results", "=", "[", "]", "\n", "self", ".", "path", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "dir", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "self", ".", "dir", ")", "\n", "", "for", "param", "in", "params", ":", "\n", "            ", "self", ".", "prologue", "(", ")", "\n", "self", ".", "env", ".", "env", ".", "force_mag", "=", "param", "\n", "self", ".", "path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "dir", ",", "self", ".", "prefix", ")", "+", "'_'", "+", "title", "+", "str", "(", "param", ")", "\n", "results", "=", "self", ".", "run_iters", "(", ")", "\n", "results", "[", "'param'", "]", "=", "param", "\n", "results", "[", "'title'", "]", "=", "title", "\n", "all_results", ".", "append", "(", "results", ")", "\n", "\n", "", "analyze_lambdas", ".", "aggregate_save", "(", "self", ".", "dir", ",", "self", ".", "prefix", ",", "all_results", ")", "\n", "filepath", "=", "os", ".", "path", ".", "join", "(", "self", ".", "dir", ",", "self", ".", "prefix", ")", "+", "'_lambda.p'", "\n", "f", "=", "open", "(", "filepath", ",", "'wb'", ")", "\n", "pickle", ".", "dump", "(", "all_results", ",", "f", ")", "\n", "f", ".", "close", "(", ")", "\n", "\n", "return", "all_results", "\n", "\n"]], "home.repos.pwc.inspect_result.jon--lee_aor.exp.cartpole_mig.main": [[134, 144], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "vars", "cartpole_mig.CartpoleMIG", "CartpoleMIG.run_trials", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.jon--lee_aor.exp_mujoco.mj_dagger.MujocoDagger.run_trials"], ["", "", "def", "main", "(", ")", ":", "\n", "    ", "ap", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "ap", ".", "add_argument", "(", "'--force_mag'", ",", "type", "=", "float", ")", "\n", "ap", ".", "add_argument", "(", "'--reg'", ",", "action", "=", "'store_true'", ")", "\n", "args", "=", "vars", "(", "ap", ".", "parse_args", "(", ")", ")", "\n", "force_mag", "=", "args", "[", "'force_mag'", "]", "\n", "reg", "=", "args", "[", "'reg'", "]", "\n", "test", "=", "CartpoleMIG", "(", "force_mag", ",", "reg", ")", "\n", "# test = CartpoleMIGLambda()", "\n", "results", "=", "test", ".", "run_trials", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jon--lee_aor.exp.analyze_cartpole6_static.aggregate": [[13, 77], ["open", "pickle.load", "open.close", "len", "len", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "enumerate", "tools.statistics.mean_sem", "tools.statistics.mean_sem", "tools.statistics.mean_sem", "tools.statistics.mean_sem", "tools.statistics.mean_sem", "tools.statistics.mean_sem", "tools.statistics.mean_sem", "tools.statistics.mean_sem", "tools.statistics.mean_sem", "tools.statistics.mean_sem", "numpy.arange", "len"], "function", ["home.repos.pwc.inspect_result.jon--lee_aor.tools.statistics.mean_sem", "home.repos.pwc.inspect_result.jon--lee_aor.tools.statistics.mean_sem", "home.repos.pwc.inspect_result.jon--lee_aor.tools.statistics.mean_sem", "home.repos.pwc.inspect_result.jon--lee_aor.tools.statistics.mean_sem", "home.repos.pwc.inspect_result.jon--lee_aor.tools.statistics.mean_sem", "home.repos.pwc.inspect_result.jon--lee_aor.tools.statistics.mean_sem", "home.repos.pwc.inspect_result.jon--lee_aor.tools.statistics.mean_sem", "home.repos.pwc.inspect_result.jon--lee_aor.tools.statistics.mean_sem", "home.repos.pwc.inspect_result.jon--lee_aor.tools.statistics.mean_sem", "home.repos.pwc.inspect_result.jon--lee_aor.tools.statistics.mean_sem"], ["def", "aggregate", "(", "filepath", ")", ":", "\n", "    ", "f", "=", "open", "(", "filepath", ",", "'rb'", ")", "\n", "all_results", "=", "pickle", ".", "load", "(", "f", ")", "\n", "f", ".", "close", "(", ")", "\n", "\n", "n", "=", "len", "(", "all_results", ")", "\n", "d", "=", "len", "(", "all_results", "[", "0", "]", "[", "'lnr_costs'", "]", ")", "\n", "\n", "lnr_costs", "=", "np", ".", "zeros", "(", "(", "n", ",", "d", ")", ")", "\n", "opt_costs", "=", "np", ".", "zeros", "(", "(", "n", ",", "d", ")", ")", "\n", "diff_costs", "=", "np", ".", "zeros", "(", "(", "n", ",", "d", ")", ")", "\n", "static_regret", "=", "np", ".", "zeros", "(", "(", "n", ",", "d", ")", ")", "\n", "\n", "rewards", "=", "np", ".", "zeros", "(", "(", "n", ",", "d", ")", ")", "\n", "sup_rewards", "=", "np", ".", "zeros", "(", "(", "n", ",", "d", ")", ")", "\n", "variations", "=", "np", ".", "zeros", "(", "(", "n", ",", "d", "-", "1", ")", ")", "\n", "opt_variations", "=", "np", ".", "zeros", "(", "(", "n", ",", "d", "-", "1", ")", ")", "\n", "lambdas", "=", "np", ".", "zeros", "(", "(", "n", ",", "d", "-", "1", ")", ")", "\n", "betas", "=", "np", ".", "zeros", "(", "(", "n", ",", "d", "-", "1", ")", ")", "\n", "\n", "for", "t", ",", "result", "in", "enumerate", "(", "all_results", ")", ":", "\n", "        ", "lnr_costs", "[", "t", ",", ":", "]", "=", "result", "[", "'lnr_costs'", "]", "\n", "opt_costs", "[", "t", ",", ":", "]", "=", "result", "[", "'opt_costs'", "]", "\n", "# lnr_costs[t, :] = np.cumsum(result['lnr_costs']) / (np.arange(d) + 1)", "\n", "# opt_costs[t, :] = np.cumsum(result['opt_costs']) / (np.arange(d) + 1)", "\n", "rewards", "[", "t", ",", ":", "]", "=", "result", "[", "'rewards'", "]", "\n", "sup_rewards", "[", "t", ",", ":", "]", "=", "result", "[", "'sup_rewards'", "]", "\n", "\n", "variations", "[", "t", ",", ":", "]", "=", "result", "[", "'variations'", "]", "\n", "opt_variations", "[", "t", ",", ":", "]", "=", "result", "[", "'opt_variations'", "]", "\n", "lambdas", "[", "t", ",", ":", "]", "=", "result", "[", "'lambdas'", "]", "\n", "betas", "[", "t", ",", ":", "]", "=", "result", "[", "'betas'", "]", "\n", "\n", "static_regret", "[", "t", ",", ":", "]", "=", "result", "[", "'static_regret'", "]", "\n", "\n", "\n", "", "diff_costs", "=", "lnr_costs", "-", "opt_costs", "\n", "\n", "lnr_mean", ",", "lnr_std", "=", "statistics", ".", "mean_sem", "(", "lnr_costs", ")", "\n", "opt_mean", ",", "opt_std", "=", "statistics", ".", "mean_sem", "(", "opt_costs", ")", "\n", "diff_mean", ",", "diff_std", "=", "statistics", ".", "mean_sem", "(", "diff_costs", ")", "\n", "sr_mean", ",", "sr_std", "=", "statistics", ".", "mean_sem", "(", "static_regret", ")", "\n", "\n", "var_mean", ",", "var_std", "=", "statistics", ".", "mean_sem", "(", "variations", ")", "\n", "opt_var_mean", ",", "opt_var_std", "=", "statistics", ".", "mean_sem", "(", "opt_variations", ")", "\n", "lam_mean", ",", "lam_std", "=", "statistics", ".", "mean_sem", "(", "lambdas", ")", "\n", "beta_mean", ",", "beta_std", "=", "statistics", ".", "mean_sem", "(", "betas", ")", "\n", "\n", "reward_mean", ",", "reward_std", "=", "statistics", ".", "mean_sem", "(", "rewards", ")", "\n", "sup_reward_mean", ",", "sup_reward_std", "=", "statistics", ".", "mean_sem", "(", "sup_rewards", ")", "\n", "\n", "x_axis", "=", "np", ".", "arange", "(", "len", "(", "lnr_mean", ")", ")", "\n", "\n", "results", "=", "{", "\n", "\"dyn_regret\"", ":", "(", "diff_mean", ",", "diff_std", ")", ",", "\n", "\"static_regret\"", ":", "(", "sr_mean", ",", "sr_std", ")", ",", "\n", "\"reward\"", ":", "(", "reward_mean", ",", "reward_std", ")", ",", "\n", "\"sup_reward\"", ":", "(", "sup_reward_mean", ",", "sup_reward_std", ")", ",", "\n", "\"var\"", ":", "(", "var_mean", ",", "var_std", ")", ",", "\n", "\"opt_var\"", ":", "(", "opt_var_mean", ",", "opt_var_std", ")", ",", "\n", "\"lam\"", ":", "(", "lam_mean", ",", "lam_std", ")", ",", "\n", "'beta'", ":", "(", "beta_mean", ",", "beta_std", ")", "\n", "}", "\n", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.jon--lee_aor.exp.analyze_cartpole6_static.plot_results": [[79, 111], ["matplotlib.subplot", "matplotlib.title", "matplotlib.ylim", "matplotlib.tight_layout", "matplotlib.legend", "matplotlib.ylabel", "matplotlib.subplot", "matplotlib.title", "matplotlib.errorbar", "matplotlib.ylabel", "matplotlib.tight_layout", "matplotlib.legend", "matplotlib.ylim", "numpy.arange", "matplotlib.errorbar", "matplotlib.errorbar", "matplotlib.xlabel", "len"], "function", ["None"], ["", "def", "plot_results", "(", "all_results", ",", "i", ")", ":", "\n", "\n", "    ", "plt", ".", "subplot", "(", "3", ",", "2", ",", "1", "+", "i", "*", "2", ")", "\n", "plt", ".", "title", "(", "all_results", "[", "0", "]", "[", "'title'", "]", "+", "\": Regret\"", ",", "fontsize", "=", "22", ")", "\n", "for", "results", "in", "all_results", ":", "\n", "        ", "sr_mean", ",", "sr_std", "=", "results", "[", "'static_regret'", "]", "\n", "diff_mean", ",", "diff_std", "=", "results", "[", "'dyn_regret'", "]", "\n", "x_axis", "=", "np", ".", "arange", "(", "len", "(", "sr_mean", ")", ")", "\n", "p", "=", "plt", ".", "errorbar", "(", "x_axis", ",", "sr_mean", ",", "yerr", "=", "sr_std", ",", "label", "=", "results", "[", "'label'", "]", "+", "': Static Regret'", ",", "linestyle", "=", "'--'", ",", "linewidth", "=", "3.0", ")", "\n", "# plt.errorbar(x_axis, diff_mean, yerr=diff_std, label=results['label'], linewidth=3.0)", "\n", "", "plt", ".", "ylim", "(", "-", ".05", ",", ".8", ")", "\n", "plt", ".", "tight_layout", "(", ")", "\n", "plt", ".", "legend", "(", "fontsize", "=", "20", ")", "\n", "plt", ".", "ylabel", "(", "'Regret'", ",", "fontsize", "=", "20", ")", "\n", "# plt.ylim(0, 1)", "\n", "\n", "\n", "\n", "plt", ".", "subplot", "(", "3", ",", "2", ",", "i", "*", "2", "+", "2", ")", "\n", "plt", ".", "title", "(", "all_results", "[", "0", "]", "[", "'title'", "]", "+", "\": System Cost\"", ",", "fontsize", "=", "22", ")", "\n", "for", "results", "in", "all_results", ":", "\n", "        ", "sup_reward_mean", ",", "reward_std", "=", "results", "[", "'sup_reward'", "]", "\n", "reward_mean", ",", "sup_reward_std", "=", "results", "[", "'reward'", "]", "\n", "p", "=", "plt", ".", "errorbar", "(", "x_axis", ",", "reward_mean", ",", "yerr", "=", "reward_std", ",", "label", "=", "results", "[", "'label'", "]", ",", "linewidth", "=", "3.0", ")", "\n", "", "plt", ".", "errorbar", "(", "x_axis", ",", "sup_reward_mean", ",", "yerr", "=", "sup_reward_std", ",", "label", "=", "'Supervisor'", ",", "linestyle", "=", "'--'", ",", "color", "=", "\"green\"", ",", "linewidth", "=", "3.0", ")", "\n", "plt", ".", "ylabel", "(", "'Angular Deviation'", ",", "fontsize", "=", "20", ")", "\n", "\n", "if", "i", "==", "2", ":", "\n", "        ", "plt", ".", "xlabel", "(", "'Iterations'", ",", "fontsize", "=", "20", ")", "\n", "", "plt", ".", "tight_layout", "(", ")", "\n", "plt", ".", "legend", "(", "fontsize", "=", "20", ")", "\n", "plt", ".", "ylim", "(", "0", ",", "20", ")", "\n", "# plt.show()", "\n"]], "home.repos.pwc.inspect_result.jon--lee_aor.exp.analyze_alpha.aggregate": [[13, 83], ["open", "pickle.load", "open.close", "len", "len", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "enumerate", "tools.statistics.mean_sem", "tools.statistics.mean_sem", "tools.statistics.mean_sem", "tools.statistics.mean_sem", "tools.statistics.mean_sem", "tools.statistics.mean_sem", "tools.statistics.mean_sem", "tools.statistics.mean_sem", "tools.statistics.mean_sem", "tools.statistics.mean_sem", "tools.statistics.mean_sem", "tools.statistics.mean_sem", "numpy.arange", "len"], "function", ["home.repos.pwc.inspect_result.jon--lee_aor.tools.statistics.mean_sem", "home.repos.pwc.inspect_result.jon--lee_aor.tools.statistics.mean_sem", "home.repos.pwc.inspect_result.jon--lee_aor.tools.statistics.mean_sem", "home.repos.pwc.inspect_result.jon--lee_aor.tools.statistics.mean_sem", "home.repos.pwc.inspect_result.jon--lee_aor.tools.statistics.mean_sem", "home.repos.pwc.inspect_result.jon--lee_aor.tools.statistics.mean_sem", "home.repos.pwc.inspect_result.jon--lee_aor.tools.statistics.mean_sem", "home.repos.pwc.inspect_result.jon--lee_aor.tools.statistics.mean_sem", "home.repos.pwc.inspect_result.jon--lee_aor.tools.statistics.mean_sem", "home.repos.pwc.inspect_result.jon--lee_aor.tools.statistics.mean_sem", "home.repos.pwc.inspect_result.jon--lee_aor.tools.statistics.mean_sem", "home.repos.pwc.inspect_result.jon--lee_aor.tools.statistics.mean_sem"], ["def", "aggregate", "(", "filepath", ")", ":", "\n", "    ", "f", "=", "open", "(", "filepath", ",", "'rb'", ")", "\n", "all_results", "=", "pickle", ".", "load", "(", "f", ")", "\n", "f", ".", "close", "(", ")", "\n", "\n", "n", "=", "len", "(", "all_results", ")", "\n", "d", "=", "len", "(", "all_results", "[", "0", "]", "[", "'lnr_costs'", "]", ")", "\n", "\n", "lnr_costs", "=", "np", ".", "zeros", "(", "(", "n", ",", "d", ")", ")", "\n", "opt_costs", "=", "np", ".", "zeros", "(", "(", "n", ",", "d", ")", ")", "\n", "diff_costs", "=", "np", ".", "zeros", "(", "(", "n", ",", "d", ")", ")", "\n", "static_regret", "=", "np", ".", "zeros", "(", "(", "n", ",", "d", ")", ")", "\n", "\n", "rewards", "=", "np", ".", "zeros", "(", "(", "n", ",", "d", ")", ")", "\n", "sup_rewards", "=", "np", ".", "zeros", "(", "(", "n", ",", "d", ")", ")", "\n", "variations", "=", "np", ".", "zeros", "(", "(", "n", ",", "d", "-", "1", ")", ")", "\n", "opt_variations", "=", "np", ".", "zeros", "(", "(", "n", ",", "d", "-", "1", ")", ")", "\n", "lambdas", "=", "np", ".", "zeros", "(", "(", "n", ",", "d", "-", "1", ")", ")", "\n", "betas", "=", "np", ".", "zeros", "(", "(", "n", ",", "d", "-", "1", ")", ")", "\n", "alphas", "=", "np", ".", "zeros", "(", "(", "n", ",", "d", ")", ")", "\n", "\n", "for", "t", ",", "result", "in", "enumerate", "(", "all_results", ")", ":", "\n", "        ", "lnr_costs", "[", "t", ",", ":", "]", "=", "result", "[", "'lnr_costs'", "]", "\n", "opt_costs", "[", "t", ",", ":", "]", "=", "result", "[", "'opt_costs'", "]", "\n", "# lnr_costs[t, :] = np.cumsum(result['lnr_costs']) / (np.arange(d) + 1)", "\n", "# opt_costs[t, :] = np.cumsum(result['opt_costs']) / (np.arange(d) + 1)", "\n", "rewards", "[", "t", ",", ":", "]", "=", "result", "[", "'rewards'", "]", "\n", "sup_rewards", "[", "t", ",", ":", "]", "=", "result", "[", "'sup_rewards'", "]", "\n", "\n", "variations", "[", "t", ",", ":", "]", "=", "result", "[", "'variations'", "]", "\n", "opt_variations", "[", "t", ",", ":", "]", "=", "result", "[", "'opt_variations'", "]", "\n", "lambdas", "[", "t", ",", ":", "]", "=", "result", "[", "'lambdas'", "]", "\n", "betas", "[", "t", ",", ":", "]", "=", "result", "[", "'betas'", "]", "\n", "alphas", "[", "t", ",", ":", "]", "=", "result", "[", "'alphas'", "]", "\n", "\n", "static_regret", "[", "t", ",", ":", "]", "=", "result", "[", "'static_regret'", "]", "\n", "\n", "\n", "", "diff_costs", "=", "lnr_costs", "-", "opt_costs", "\n", "\n", "lnr_mean", ",", "lnr_std", "=", "statistics", ".", "mean_sem", "(", "lnr_costs", ")", "\n", "opt_mean", ",", "opt_std", "=", "statistics", ".", "mean_sem", "(", "opt_costs", ")", "\n", "diff_mean", ",", "diff_std", "=", "statistics", ".", "mean_sem", "(", "diff_costs", ")", "\n", "sr_mean", ",", "sr_std", "=", "statistics", ".", "mean_sem", "(", "static_regret", ")", "\n", "\n", "var_mean", ",", "var_std", "=", "statistics", ".", "mean_sem", "(", "variations", ")", "\n", "opt_var_mean", ",", "opt_var_std", "=", "statistics", ".", "mean_sem", "(", "opt_variations", ")", "\n", "lam_mean", ",", "lam_std", "=", "statistics", ".", "mean_sem", "(", "lambdas", ")", "\n", "beta_mean", ",", "beta_std", "=", "statistics", ".", "mean_sem", "(", "betas", ")", "\n", "alpha_mean", ",", "alpha_std", "=", "statistics", ".", "mean_sem", "(", "alphas", ")", "\n", "alpha_alt_mean", ",", "alpha_alt_std", "=", "statistics", ".", "mean_sem", "(", "lambdas", "*", "betas", ")", "\n", "\n", "reward_mean", ",", "reward_std", "=", "statistics", ".", "mean_sem", "(", "rewards", ")", "\n", "sup_reward_mean", ",", "sup_reward_std", "=", "statistics", ".", "mean_sem", "(", "sup_rewards", ")", "\n", "\n", "x_axis", "=", "np", ".", "arange", "(", "len", "(", "lnr_mean", ")", ")", "\n", "\n", "results", "=", "{", "\n", "\"dyn_regret\"", ":", "(", "diff_mean", ",", "diff_std", ")", ",", "\n", "\"static_regret\"", ":", "(", "sr_mean", ",", "sr_std", ")", ",", "\n", "\"reward\"", ":", "(", "reward_mean", ",", "reward_std", ")", ",", "\n", "\"sup_reward\"", ":", "(", "sup_reward_mean", ",", "sup_reward_std", ")", ",", "\n", "\"var\"", ":", "(", "var_mean", ",", "var_std", ")", ",", "\n", "\"opt_var\"", ":", "(", "opt_var_mean", ",", "opt_var_std", ")", ",", "\n", "\"lam\"", ":", "(", "lam_mean", ",", "lam_std", ")", ",", "\n", "'beta'", ":", "(", "beta_mean", ",", "beta_std", ")", ",", "\n", "\"alpha\"", ":", "(", "alpha_mean", ",", "alpha_std", ")", ",", "\n", "\"alpha_alt\"", ":", "(", "alpha_alt_mean", ",", "alpha_alt_std", ")", ",", "\n", "}", "\n", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.jon--lee_aor.exp.analyze_alpha.plot_results": [[85, 97], ["matplotlib.title", "matplotlib.legend", "matplotlib.ylabel", "matplotlib.xlabel", "matplotlib.tight_layout", "numpy.arange", "matplotlib.errorbar", "len"], "function", ["None"], ["", "def", "plot_results", "(", "all_results", ")", ":", "\n", "\n", "\n", "    ", "plt", ".", "title", "(", "all_results", "[", "0", "]", "[", "'title'", "]", "+", "\": Alpha\"", ",", "fontsize", "=", "22", ")", "\n", "for", "results", "in", "all_results", ":", "\n", "        ", "alpha_mean", ",", "alpha_std", "=", "results", "[", "'alpha'", "]", "\n", "x_axis", "=", "np", ".", "arange", "(", "len", "(", "alpha_mean", ")", ")", "\n", "plt", ".", "errorbar", "(", "x_axis", ",", "alpha_mean", ",", "yerr", "=", "alpha_std", ",", "label", "=", "results", "[", "'label'", "]", ",", "linewidth", "=", "3.0", ")", "\n", "", "plt", ".", "legend", "(", "fontsize", "=", "20", ")", "\n", "plt", ".", "ylabel", "(", "'Alpha Value'", ",", "fontsize", "=", "20", ")", "\n", "plt", ".", "xlabel", "(", "'Iterations'", ",", "fontsize", "=", "20", ")", "\n", "plt", ".", "tight_layout", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jon--lee_aor.exp.cartpole_ig.CartpoleIG.__init__": [[23, 40], ["exp.cartpole_dagger.CartpoleDagger.__init__", "numpy.min", "os.path.join", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.jon--lee_aor.exp_mujoco.mj_dagger.MujocoDagger.__init__", "home.repos.pwc.inspect_result.jon--lee_aor.expert.tf_util.min"], ["    ", "def", "__init__", "(", "self", ",", "force_mag", ",", "reg", ")", ":", "\n", "        ", "CartpoleDagger", ".", "__init__", "(", "self", ",", "force_mag", ",", "reg", ")", "\n", "self", ".", "iters", "=", "100", "\n", "self", ".", "trials", "=", "1", "\n", "\n", "# Adaptive reg weighting", "\n", "self", ".", "alpha", "=", ".1", "\n", "self", ".", "eta", "=", "np", ".", "min", "(", "[", ".0001", ",", "1", "/", "self", ".", "alpha", "]", ")", "\n", "\n", "\n", "self", ".", "inner_eta", "=", "1.0", "\n", "\n", "self", ".", "dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "base_dir", ",", "'ig'", ")", "\n", "self", ".", "prefix", "=", "'ig'", "\n", "self", ".", "path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "dir", ",", "self", ".", "prefix", ")", "\n", "\n", "self", ".", "t", "=", ".01", "\n", "\n"]], "home.repos.pwc.inspect_result.jon--lee_aor.exp.cartpole_ig.CartpoleIG.run_iters": [[41, 101], ["range", "results.keys", "cartpole_ig.CartpoleIG.compute_results", "print", "print", "print", "cartpole_ig.CartpoleIG.compute_statistics", "tools.statistics.collect_traj", "cartpole_ig.CartpoleIG.lnr.set_update", "cartpole_ig.CartpoleIG.lnr.update", "numpy.array", "cartpole_ig.CartpoleIG.sup.intended_action", "numpy.mean", "numpy.min", "print", "print", "str", "str", "str", "len", "str", "str"], "methods", ["home.repos.pwc.inspect_result.jon--lee_aor.exp_mujoco.mj_dagger.MujocoDagger.compute_results", "home.repos.pwc.inspect_result.jon--lee_aor.exp_mujoco.mj_dagger.MujocoDagger.compute_statistics", "home.repos.pwc.inspect_result.jon--lee_aor.tools.statistics.collect_traj", "home.repos.pwc.inspect_result.jon--lee_aor.tools.learner.Learner.set_update", "home.repos.pwc.inspect_result.jon--lee_aor.tools.lr.LR.update", "home.repos.pwc.inspect_result.jon--lee_aor.tools.learner.Learner.intended_action", "home.repos.pwc.inspect_result.jon--lee_aor.expert.tf_util.mean", "home.repos.pwc.inspect_result.jon--lee_aor.expert.tf_util.min"], ["", "def", "run_iters", "(", "self", ")", ":", "\n", "\n", "        ", "results", "=", "{", "\n", "'lnr_costs'", ":", "[", "]", ",", "\n", "'opt_costs'", ":", "[", "]", ",", "\n", "'variations'", ":", "[", "]", ",", "\n", "'opt_variations'", ":", "[", "]", ",", "\n", "'param_norms'", ":", "[", "]", ",", "\n", "'opt_param_norms'", ":", "[", "]", ",", "\n", "'lambdas'", ":", "[", "]", ",", "\n", "'lnr_batch_costs'", ":", "[", "]", ",", "\n", "'opt_batch_costs'", ":", "[", "]", ",", "\n", "'static_regret'", ":", "[", "]", ",", "\n", "'rewards'", ":", "[", "]", ",", "\n", "'betas'", ":", "[", "]", ",", "\n", "'alphas'", ":", "[", "]", ",", "\n", "\n", "}", "\n", "\n", "d", "=", "self", ".", "env", ".", "observation_space", ".", "shape", "[", "0", "]", "\n", "# self.data_states = [np.zeros(d), np.zeros(d)]", "\n", "# self.data_actions = [1, 0]", "\n", "self", ".", "data_states", "=", "[", "]", "\n", "self", ".", "data_actions", "=", "[", "]", "\n", "\n", "for", "iteration", "in", "range", "(", "self", ".", "iters", ")", ":", "\n", "            ", "print", "(", "\"\\tIteration: \"", "+", "str", "(", "iteration", ")", ")", "\n", "print", "(", "\"\\tData states: \"", "+", "str", "(", "len", "(", "self", ".", "data_states", ")", ")", ")", "\n", "print", "(", "\"\\tParameters: \"", "+", "str", "(", "self", ".", "lnr", ".", "est", ".", "coef_", ")", ")", "\n", "self", ".", "compute_statistics", "(", "iteration", ",", "results", ")", "\n", "\n", "states", ",", "tmp_actions", ",", "_", ",", "_", "=", "statistics", ".", "collect_traj", "(", "self", ".", "env", ",", "self", ".", "lnr", ",", "self", ".", "params", "[", "'T'", "]", ")", "\n", "i_actions", "=", "[", "self", ".", "sup", ".", "intended_action", "(", "s", ")", "for", "s", "in", "states", "]", "\n", "\n", "\n", "self", ".", "data_states", "+=", "states", "\n", "self", ".", "data_actions", "+=", "i_actions", "\n", "\n", "self", ".", "lnr", ".", "set_update", "(", "states", ",", "i_actions", ")", "\n", "self", ".", "lnr", ".", "update", "(", "iteration", ")", "\n", "\n", "# Adaptive regularization:", "\n", "if", "self", ".", "reg", "and", "(", "iteration", "+", "1", ")", "%", "20", "==", "0", ":", "\n", "                ", "mean_lambda", "=", "np", ".", "mean", "(", "results", "[", "'lambdas'", "]", "[", "-", "10", ":", "]", "+", "self", ".", "lambda_prior", ")", "\n", "next_alpha", "=", "mean_lambda", "*", "self", ".", "lnr", ".", "est", ".", "alpha", "\n", "self", ".", "lnr", ".", "est", ".", "alpha", "=", "self", ".", "t", "*", "next_alpha", "+", "(", "1", "-", "self", ".", "t", ")", "*", "self", ".", "lnr", ".", "est", ".", "alpha", "\n", "self", ".", "lnr", ".", "est", ".", "eta", "=", "np", ".", "min", "(", "[", ".0001", ",", "1", "/", "self", ".", "lnr", ".", "est", ".", "alpha", "]", ")", "\n", "\n", "print", "(", "\"\\n\\n\\t\\t Updated alpha: \"", "+", "str", "(", "self", ".", "lnr", ".", "est", ".", "alpha", ")", ")", "\n", "print", "(", "\"\\t\\t Lambda was: \"", "+", "str", "(", "mean_lambda", ")", ")", "\n", "\n", "\n", "\n", "\n", "", "", "for", "key", "in", "results", ".", "keys", "(", ")", ":", "\n", "            ", "results", "[", "key", "]", "=", "np", ".", "array", "(", "results", "[", "key", "]", ")", "\n", "\n", "", "self", ".", "compute_results", "(", "results", ")", "\n", "\n", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.jon--lee_aor.exp.cartpole_ig.CartpoleIGLambda.run_trials": [[105, 132], ["os.path.join", "exp.analyze_lambdas.aggregate_save", "open", "pickle.dump", "open.close", "os.path.exists", "os.makedirs", "cartpole_ig.CartpoleIGLambda.prologue", "cartpole_ig.CartpoleIGLambda.run_iters", "all_results.append", "os.path.join", "str", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.jon--lee_aor.exp.analyze_lambdas.aggregate_save", "home.repos.pwc.inspect_result.jon--lee_aor.exp_mujoco.mj_dagger.MujocoDagger.prologue", "home.repos.pwc.inspect_result.jon--lee_aor.exp_mujoco.mj_dagger.MujocoDagger.run_iters"], ["    ", "def", "run_trials", "(", "self", ")", ":", "\n", "\n", "        ", "title", "=", "'force_mag'", "\n", "self", ".", "base_dir", "=", "'data/cartpole_lambda_'", "+", "title", "\n", "self", ".", "dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "base_dir", ",", "'ig'", ")", "\n", "# params = [.001, .01, .1, 1.0, 10.0, 100.0]", "\n", "params", "=", "[", ".5", ",", "2.0", ",", "4.0", ",", "8.0", ",", "16.0", ",", "32.0", "]", "\n", "all_results", "=", "[", "]", "\n", "self", ".", "path", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "dir", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "self", ".", "dir", ")", "\n", "", "for", "param", "in", "params", ":", "\n", "            ", "self", ".", "prologue", "(", ")", "\n", "self", ".", "env", ".", "env", ".", "force_mag", "=", "param", "\n", "self", ".", "path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "dir", ",", "self", ".", "prefix", ")", "+", "'_'", "+", "title", "+", "str", "(", "param", ")", "\n", "results", "=", "self", ".", "run_iters", "(", ")", "\n", "results", "[", "'param'", "]", "=", "param", "\n", "results", "[", "'title'", "]", "=", "title", "\n", "all_results", ".", "append", "(", "results", ")", "\n", "\n", "", "analyze_lambdas", ".", "aggregate_save", "(", "self", ".", "dir", ",", "self", ".", "prefix", ",", "all_results", ")", "\n", "filepath", "=", "os", ".", "path", ".", "join", "(", "self", ".", "dir", ",", "self", ".", "prefix", ")", "+", "'_lambda.p'", "\n", "f", "=", "open", "(", "filepath", ",", "'wb'", ")", "\n", "pickle", ".", "dump", "(", "all_results", ",", "f", ")", "\n", "f", ".", "close", "(", ")", "\n", "\n", "return", "all_results", "\n", "\n"]], "home.repos.pwc.inspect_result.jon--lee_aor.exp.cartpole_ig.main": [[135, 145], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "vars", "cartpole_ig.CartpoleIG", "CartpoleIG.run_trials", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.jon--lee_aor.exp_mujoco.mj_dagger.MujocoDagger.run_trials"], ["", "", "def", "main", "(", ")", ":", "\n", "    ", "ap", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "ap", ".", "add_argument", "(", "'--force_mag'", ",", "type", "=", "float", ")", "\n", "ap", ".", "add_argument", "(", "'--reg'", ",", "action", "=", "'store_true'", ")", "\n", "args", "=", "vars", "(", "ap", ".", "parse_args", "(", ")", ")", "\n", "force_mag", "=", "args", "[", "'force_mag'", "]", "\n", "reg", "=", "args", "[", "'reg'", "]", "\n", "test", "=", "CartpoleIG", "(", "force_mag", ",", "reg", ")", "\n", "# test = CartpoleIGLambda()", "\n", "results", "=", "test", ".", "run_trials", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jon--lee_aor.exp_mujoco.analyze_hopper_alpha.aggregate": [[13, 83], ["open", "pickle.load", "open.close", "len", "len", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "enumerate", "tools.statistics.mean_sem", "tools.statistics.mean_sem", "tools.statistics.mean_sem", "tools.statistics.mean_sem", "tools.statistics.mean_sem", "tools.statistics.mean_sem", "tools.statistics.mean_sem", "tools.statistics.mean_sem", "tools.statistics.mean_sem", "tools.statistics.mean_sem", "tools.statistics.mean_sem", "tools.statistics.mean_sem", "numpy.arange", "len"], "function", ["home.repos.pwc.inspect_result.jon--lee_aor.tools.statistics.mean_sem", "home.repos.pwc.inspect_result.jon--lee_aor.tools.statistics.mean_sem", "home.repos.pwc.inspect_result.jon--lee_aor.tools.statistics.mean_sem", "home.repos.pwc.inspect_result.jon--lee_aor.tools.statistics.mean_sem", "home.repos.pwc.inspect_result.jon--lee_aor.tools.statistics.mean_sem", "home.repos.pwc.inspect_result.jon--lee_aor.tools.statistics.mean_sem", "home.repos.pwc.inspect_result.jon--lee_aor.tools.statistics.mean_sem", "home.repos.pwc.inspect_result.jon--lee_aor.tools.statistics.mean_sem", "home.repos.pwc.inspect_result.jon--lee_aor.tools.statistics.mean_sem", "home.repos.pwc.inspect_result.jon--lee_aor.tools.statistics.mean_sem", "home.repos.pwc.inspect_result.jon--lee_aor.tools.statistics.mean_sem", "home.repos.pwc.inspect_result.jon--lee_aor.tools.statistics.mean_sem"], ["def", "aggregate", "(", "filepath", ")", ":", "\n", "    ", "f", "=", "open", "(", "filepath", ",", "'rb'", ")", "\n", "all_results", "=", "pickle", ".", "load", "(", "f", ")", "\n", "f", ".", "close", "(", ")", "\n", "\n", "n", "=", "len", "(", "all_results", ")", "\n", "d", "=", "len", "(", "all_results", "[", "0", "]", "[", "'lnr_costs'", "]", ")", "\n", "\n", "lnr_costs", "=", "np", ".", "zeros", "(", "(", "n", ",", "d", ")", ")", "\n", "opt_costs", "=", "np", ".", "zeros", "(", "(", "n", ",", "d", ")", ")", "\n", "diff_costs", "=", "np", ".", "zeros", "(", "(", "n", ",", "d", ")", ")", "\n", "static_regret", "=", "np", ".", "zeros", "(", "(", "n", ",", "d", ")", ")", "\n", "\n", "rewards", "=", "np", ".", "zeros", "(", "(", "n", ",", "d", ")", ")", "\n", "sup_rewards", "=", "np", ".", "zeros", "(", "(", "n", ",", "d", ")", ")", "\n", "variations", "=", "np", ".", "zeros", "(", "(", "n", ",", "d", "-", "1", ")", ")", "\n", "opt_variations", "=", "np", ".", "zeros", "(", "(", "n", ",", "d", "-", "1", ")", ")", "\n", "lambdas", "=", "np", ".", "zeros", "(", "(", "n", ",", "d", "-", "1", ")", ")", "\n", "betas", "=", "np", ".", "zeros", "(", "(", "n", ",", "d", "-", "1", ")", ")", "\n", "alphas", "=", "np", ".", "zeros", "(", "(", "n", ",", "d", ")", ")", "\n", "\n", "for", "t", ",", "result", "in", "enumerate", "(", "all_results", ")", ":", "\n", "        ", "lnr_costs", "[", "t", ",", ":", "]", "=", "result", "[", "'lnr_costs'", "]", "\n", "opt_costs", "[", "t", ",", ":", "]", "=", "result", "[", "'opt_costs'", "]", "\n", "# lnr_costs[t, :] = np.cumsum(result['lnr_costs']) / (np.arange(d) + 1)", "\n", "# opt_costs[t, :] = np.cumsum(result['opt_costs']) / (np.arange(d) + 1)", "\n", "rewards", "[", "t", ",", ":", "]", "=", "result", "[", "'rewards'", "]", "\n", "sup_rewards", "[", "t", ",", ":", "]", "=", "result", "[", "'sup_rewards'", "]", "\n", "\n", "variations", "[", "t", ",", ":", "]", "=", "result", "[", "'variations'", "]", "\n", "opt_variations", "[", "t", ",", ":", "]", "=", "result", "[", "'opt_variations'", "]", "\n", "lambdas", "[", "t", ",", ":", "]", "=", "result", "[", "'lambdas'", "]", "\n", "betas", "[", "t", ",", ":", "]", "=", "result", "[", "'betas'", "]", "\n", "alphas", "[", "t", ",", ":", "]", "=", "result", "[", "'alphas'", "]", "\n", "\n", "static_regret", "[", "t", ",", ":", "]", "=", "result", "[", "'static_regret'", "]", "\n", "\n", "\n", "", "diff_costs", "=", "lnr_costs", "-", "opt_costs", "\n", "\n", "lnr_mean", ",", "lnr_std", "=", "statistics", ".", "mean_sem", "(", "lnr_costs", ")", "\n", "opt_mean", ",", "opt_std", "=", "statistics", ".", "mean_sem", "(", "opt_costs", ")", "\n", "diff_mean", ",", "diff_std", "=", "statistics", ".", "mean_sem", "(", "diff_costs", ")", "\n", "sr_mean", ",", "sr_std", "=", "statistics", ".", "mean_sem", "(", "static_regret", ")", "\n", "\n", "var_mean", ",", "var_std", "=", "statistics", ".", "mean_sem", "(", "variations", ")", "\n", "opt_var_mean", ",", "opt_var_std", "=", "statistics", ".", "mean_sem", "(", "opt_variations", ")", "\n", "lam_mean", ",", "lam_std", "=", "statistics", ".", "mean_sem", "(", "lambdas", ")", "\n", "beta_mean", ",", "beta_std", "=", "statistics", ".", "mean_sem", "(", "betas", ")", "\n", "alpha_mean", ",", "alpha_std", "=", "statistics", ".", "mean_sem", "(", "alphas", ")", "\n", "alpha_alt_mean", ",", "alpha_alt_std", "=", "statistics", ".", "mean_sem", "(", "lambdas", "*", "betas", ")", "\n", "\n", "reward_mean", ",", "reward_std", "=", "statistics", ".", "mean_sem", "(", "rewards", ")", "\n", "sup_reward_mean", ",", "sup_reward_std", "=", "statistics", ".", "mean_sem", "(", "sup_rewards", ")", "\n", "\n", "x_axis", "=", "np", ".", "arange", "(", "len", "(", "lnr_mean", ")", ")", "\n", "\n", "results", "=", "{", "\n", "\"dyn_regret\"", ":", "(", "diff_mean", ",", "diff_std", ")", ",", "\n", "\"static_regret\"", ":", "(", "sr_mean", ",", "sr_std", ")", ",", "\n", "\"reward\"", ":", "(", "reward_mean", ",", "reward_std", ")", ",", "\n", "\"sup_reward\"", ":", "(", "sup_reward_mean", ",", "sup_reward_std", ")", ",", "\n", "\"var\"", ":", "(", "var_mean", ",", "var_std", ")", ",", "\n", "\"opt_var\"", ":", "(", "opt_var_mean", ",", "opt_var_std", ")", ",", "\n", "\"lam\"", ":", "(", "lam_mean", ",", "lam_std", ")", ",", "\n", "'beta'", ":", "(", "beta_mean", ",", "beta_std", ")", ",", "\n", "\"alpha\"", ":", "(", "alpha_mean", ",", "alpha_std", ")", ",", "\n", "\"alpha_alt\"", ":", "(", "alpha_alt_mean", ",", "alpha_alt_std", ")", ",", "\n", "}", "\n", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.jon--lee_aor.exp_mujoco.analyze_hopper_alpha.plot_results": [[85, 97], ["matplotlib.title", "matplotlib.legend", "matplotlib.ylabel", "matplotlib.xlabel", "matplotlib.tight_layout", "numpy.arange", "matplotlib.errorbar", "len"], "function", ["None"], ["", "def", "plot_results", "(", "all_results", ")", ":", "\n", "\n", "\n", "    ", "plt", ".", "title", "(", "all_results", "[", "0", "]", "[", "'title'", "]", "+", "\": Alpha\"", ",", "fontsize", "=", "22", ")", "\n", "for", "results", "in", "all_results", ":", "\n", "        ", "alpha_mean", ",", "alpha_std", "=", "results", "[", "'alpha'", "]", "\n", "x_axis", "=", "np", ".", "arange", "(", "len", "(", "alpha_mean", ")", ")", "\n", "plt", ".", "errorbar", "(", "x_axis", ",", "alpha_mean", ",", "yerr", "=", "alpha_std", ",", "label", "=", "results", "[", "'label'", "]", ",", "linewidth", "=", "3.0", ")", "\n", "", "plt", ".", "legend", "(", "fontsize", "=", "20", ")", "\n", "plt", ".", "ylabel", "(", "'Alpha Value'", ",", "fontsize", "=", "20", ")", "\n", "plt", ".", "xlabel", "(", "'Iterations'", ",", "fontsize", "=", "20", ")", "\n", "plt", ".", "tight_layout", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jon--lee_aor.exp_mujoco.analyze_walker_static.aggregate": [[13, 76], ["open", "pickle.load", "open.close", "len", "len", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "enumerate", "tools.statistics.mean_sem", "tools.statistics.mean_sem", "tools.statistics.mean_sem", "tools.statistics.mean_sem", "tools.statistics.mean_sem", "tools.statistics.mean_sem", "tools.statistics.mean_sem", "tools.statistics.mean_sem", "tools.statistics.mean_sem", "tools.statistics.mean_sem", "numpy.arange", "len"], "function", ["home.repos.pwc.inspect_result.jon--lee_aor.tools.statistics.mean_sem", "home.repos.pwc.inspect_result.jon--lee_aor.tools.statistics.mean_sem", "home.repos.pwc.inspect_result.jon--lee_aor.tools.statistics.mean_sem", "home.repos.pwc.inspect_result.jon--lee_aor.tools.statistics.mean_sem", "home.repos.pwc.inspect_result.jon--lee_aor.tools.statistics.mean_sem", "home.repos.pwc.inspect_result.jon--lee_aor.tools.statistics.mean_sem", "home.repos.pwc.inspect_result.jon--lee_aor.tools.statistics.mean_sem", "home.repos.pwc.inspect_result.jon--lee_aor.tools.statistics.mean_sem", "home.repos.pwc.inspect_result.jon--lee_aor.tools.statistics.mean_sem", "home.repos.pwc.inspect_result.jon--lee_aor.tools.statistics.mean_sem"], ["def", "aggregate", "(", "filepath", ")", ":", "\n", "    ", "f", "=", "open", "(", "filepath", ",", "'rb'", ")", "\n", "all_results", "=", "pickle", ".", "load", "(", "f", ")", "\n", "f", ".", "close", "(", ")", "\n", "\n", "n", "=", "len", "(", "all_results", ")", "\n", "d", "=", "len", "(", "all_results", "[", "0", "]", "[", "'lnr_costs'", "]", ")", "\n", "\n", "lnr_costs", "=", "np", ".", "zeros", "(", "(", "n", ",", "d", ")", ")", "\n", "opt_costs", "=", "np", ".", "zeros", "(", "(", "n", ",", "d", ")", ")", "\n", "diff_costs", "=", "np", ".", "zeros", "(", "(", "n", ",", "d", ")", ")", "\n", "static_regret", "=", "np", ".", "zeros", "(", "(", "n", ",", "d", ")", ")", "\n", "\n", "rewards", "=", "np", ".", "zeros", "(", "(", "n", ",", "d", ")", ")", "\n", "sup_rewards", "=", "np", ".", "zeros", "(", "(", "n", ",", "d", ")", ")", "\n", "variations", "=", "np", ".", "zeros", "(", "(", "n", ",", "d", "-", "1", ")", ")", "\n", "opt_variations", "=", "np", ".", "zeros", "(", "(", "n", ",", "d", "-", "1", ")", ")", "\n", "lambdas", "=", "np", ".", "zeros", "(", "(", "n", ",", "d", "-", "1", ")", ")", "\n", "betas", "=", "np", ".", "zeros", "(", "(", "n", ",", "d", "-", "1", ")", ")", "\n", "\n", "for", "t", ",", "result", "in", "enumerate", "(", "all_results", ")", ":", "\n", "        ", "lnr_costs", "[", "t", ",", ":", "]", "=", "result", "[", "'lnr_costs'", "]", "\n", "opt_costs", "[", "t", ",", ":", "]", "=", "result", "[", "'opt_costs'", "]", "\n", "# lnr_costs[t, :] = np.cumsum(result['lnr_costs']) / (np.arange(d) + 1)", "\n", "# opt_costs[t, :] = np.cumsum(result['opt_costs']) / (np.arange(d) + 1)", "\n", "rewards", "[", "t", ",", ":", "]", "=", "result", "[", "'rewards'", "]", "\n", "sup_rewards", "[", "t", ",", ":", "]", "=", "result", "[", "'sup_rewards'", "]", "\n", "\n", "variations", "[", "t", ",", ":", "]", "=", "result", "[", "'variations'", "]", "\n", "opt_variations", "[", "t", ",", ":", "]", "=", "result", "[", "'opt_variations'", "]", "\n", "lambdas", "[", "t", ",", ":", "]", "=", "result", "[", "'lambdas'", "]", "\n", "betas", "[", "t", ",", ":", "]", "=", "result", "[", "'betas'", "]", "\n", "\n", "static_regret", "[", "t", ",", ":", "]", "=", "result", "[", "'static_regret'", "]", "\n", "\n", "", "diff_costs", "=", "lnr_costs", "-", "opt_costs", "\n", "\n", "lnr_mean", ",", "lnr_std", "=", "statistics", ".", "mean_sem", "(", "lnr_costs", ")", "\n", "opt_mean", ",", "opt_std", "=", "statistics", ".", "mean_sem", "(", "opt_costs", ")", "\n", "diff_mean", ",", "diff_std", "=", "statistics", ".", "mean_sem", "(", "diff_costs", ")", "\n", "sr_mean", ",", "sr_std", "=", "statistics", ".", "mean_sem", "(", "static_regret", ")", "\n", "\n", "var_mean", ",", "var_std", "=", "statistics", ".", "mean_sem", "(", "variations", ")", "\n", "opt_var_mean", ",", "opt_var_std", "=", "statistics", ".", "mean_sem", "(", "opt_variations", ")", "\n", "lam_mean", ",", "lam_std", "=", "statistics", ".", "mean_sem", "(", "lambdas", ")", "\n", "beta_mean", ",", "beta_std", "=", "statistics", ".", "mean_sem", "(", "betas", ")", "\n", "\n", "reward_mean", ",", "reward_std", "=", "statistics", ".", "mean_sem", "(", "rewards", ")", "\n", "sup_reward_mean", ",", "sup_reward_std", "=", "statistics", ".", "mean_sem", "(", "sup_rewards", ")", "\n", "\n", "x_axis", "=", "np", ".", "arange", "(", "len", "(", "lnr_mean", ")", ")", "\n", "\n", "results", "=", "{", "\n", "\"dyn_regret\"", ":", "(", "diff_mean", ",", "diff_std", ")", ",", "\n", "\"static_regret\"", ":", "(", "sr_mean", ",", "sr_std", ")", ",", "\n", "\"reward\"", ":", "(", "reward_mean", ",", "reward_std", ")", ",", "\n", "\"sup_reward\"", ":", "(", "sup_reward_mean", ",", "sup_reward_std", ")", ",", "\n", "\"var\"", ":", "(", "var_mean", ",", "var_std", ")", ",", "\n", "\"opt_var\"", ":", "(", "opt_var_mean", ",", "opt_var_std", ")", ",", "\n", "\"lam\"", ":", "(", "lam_mean", ",", "lam_std", ")", ",", "\n", "'beta'", ":", "(", "beta_mean", ",", "beta_std", ")", "\n", "}", "\n", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.jon--lee_aor.exp_mujoco.analyze_walker_static.plot_results": [[78, 112], ["matplotlib.subplot", "matplotlib.title", "matplotlib.ylim", "matplotlib.tight_layout", "matplotlib.legend", "matplotlib.ylabel", "matplotlib.subplot", "matplotlib.title", "matplotlib.errorbar", "matplotlib.ylabel", "matplotlib.tight_layout", "matplotlib.legend", "matplotlib.ylim", "numpy.arange", "matplotlib.errorbar", "matplotlib.xlabel", "matplotlib.errorbar", "matplotlib.xlabel", "len"], "function", ["None"], ["", "def", "plot_results", "(", "all_results", ",", "i", ")", ":", "\n", "\n", "    ", "plt", ".", "subplot", "(", "2", ",", "2", ",", "1", "+", "i", "*", "2", ")", "\n", "plt", ".", "title", "(", "all_results", "[", "0", "]", "[", "'title'", "]", "+", "\": Regret\"", ",", "fontsize", "=", "22", ")", "\n", "for", "results", "in", "all_results", ":", "\n", "        ", "sr_mean", ",", "sr_std", "=", "results", "[", "'static_regret'", "]", "\n", "diff_mean", ",", "diff_std", "=", "results", "[", "'dyn_regret'", "]", "\n", "x_axis", "=", "np", ".", "arange", "(", "len", "(", "sr_mean", ")", ")", "\n", "p", "=", "plt", ".", "errorbar", "(", "x_axis", ",", "sr_mean", ",", "yerr", "=", "sr_std", ",", "label", "=", "results", "[", "'label'", "]", "+", "': Static Regret'", ",", "linestyle", "=", "'--'", ",", "linewidth", "=", "3.0", ")", "\n", "# plt.errorbar(x_axis, diff_mean, yerr=diff_std, label=results['label'], linewidth=3.0)", "\n", "", "plt", ".", "ylim", "(", "-", "3", ",", "20", ")", "\n", "plt", ".", "tight_layout", "(", ")", "\n", "plt", ".", "legend", "(", "fontsize", "=", "20", ",", "loc", "=", "'upper right'", ")", "\n", "if", "i", "==", "1", ":", "\n", "        ", "plt", ".", "xlabel", "(", "'Iterations'", ",", "fontsize", "=", "20", ")", "\n", "", "plt", ".", "ylabel", "(", "'Regret'", ",", "fontsize", "=", "20", ")", "\n", "# plt.ylim(0, 1)", "\n", "\n", "\n", "\n", "plt", ".", "subplot", "(", "2", ",", "2", ",", "i", "*", "2", "+", "2", ")", "\n", "plt", ".", "title", "(", "all_results", "[", "0", "]", "[", "'title'", "]", "+", "\": Distance Traveled\"", ",", "fontsize", "=", "22", ")", "\n", "for", "results", "in", "all_results", ":", "\n", "        ", "sup_reward_mean", ",", "reward_std", "=", "results", "[", "'sup_reward'", "]", "\n", "reward_mean", ",", "sup_reward_std", "=", "results", "[", "'reward'", "]", "\n", "p", "=", "plt", ".", "errorbar", "(", "x_axis", ",", "reward_mean", ",", "yerr", "=", "reward_std", ",", "label", "=", "results", "[", "'label'", "]", ",", "linewidth", "=", "3.0", ")", "\n", "", "plt", ".", "errorbar", "(", "x_axis", ",", "sup_reward_mean", ",", "yerr", "=", "sup_reward_std", ",", "label", "=", "'Supervisor'", ",", "linestyle", "=", "'--'", ",", "color", "=", "\"green\"", ",", "linewidth", "=", "3.0", ")", "\n", "plt", ".", "ylabel", "(", "'Distance Traveled'", ",", "fontsize", "=", "20", ")", "\n", "\n", "if", "i", "==", "1", ":", "\n", "        ", "plt", ".", "xlabel", "(", "'Iterations'", ",", "fontsize", "=", "20", ")", "\n", "", "plt", ".", "tight_layout", "(", ")", "\n", "plt", ".", "legend", "(", "fontsize", "=", "20", ",", "loc", "=", "'upper right'", ",", "ncol", "=", "2", ")", "\n", "plt", ".", "ylim", "(", "-", "200", ",", "600", ")", "\n", "# plt.show()", "\n"]], "home.repos.pwc.inspect_result.jon--lee_aor.exp_mujoco.analyze_hopper.aggregate": [[13, 77], ["open", "pickle.load", "open.close", "len", "len", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "enumerate", "tools.statistics.mean_sem", "tools.statistics.mean_sem", "tools.statistics.mean_sem", "tools.statistics.mean_sem", "tools.statistics.mean_sem", "tools.statistics.mean_sem", "tools.statistics.mean_sem", "tools.statistics.mean_sem", "tools.statistics.mean_sem", "tools.statistics.mean_sem", "numpy.arange", "len", "numpy.cumsum", "numpy.cumsum", "numpy.arange", "numpy.arange"], "function", ["home.repos.pwc.inspect_result.jon--lee_aor.tools.statistics.mean_sem", "home.repos.pwc.inspect_result.jon--lee_aor.tools.statistics.mean_sem", "home.repos.pwc.inspect_result.jon--lee_aor.tools.statistics.mean_sem", "home.repos.pwc.inspect_result.jon--lee_aor.tools.statistics.mean_sem", "home.repos.pwc.inspect_result.jon--lee_aor.tools.statistics.mean_sem", "home.repos.pwc.inspect_result.jon--lee_aor.tools.statistics.mean_sem", "home.repos.pwc.inspect_result.jon--lee_aor.tools.statistics.mean_sem", "home.repos.pwc.inspect_result.jon--lee_aor.tools.statistics.mean_sem", "home.repos.pwc.inspect_result.jon--lee_aor.tools.statistics.mean_sem", "home.repos.pwc.inspect_result.jon--lee_aor.tools.statistics.mean_sem"], ["def", "aggregate", "(", "filepath", ")", ":", "\n", "    ", "f", "=", "open", "(", "filepath", ",", "'rb'", ")", "\n", "all_results", "=", "pickle", ".", "load", "(", "f", ")", "\n", "f", ".", "close", "(", ")", "\n", "\n", "n", "=", "len", "(", "all_results", ")", "\n", "d", "=", "len", "(", "all_results", "[", "0", "]", "[", "'lnr_costs'", "]", ")", "\n", "\n", "lnr_costs", "=", "np", ".", "zeros", "(", "(", "n", ",", "d", ")", ")", "\n", "opt_costs", "=", "np", ".", "zeros", "(", "(", "n", ",", "d", ")", ")", "\n", "diff_costs", "=", "np", ".", "zeros", "(", "(", "n", ",", "d", ")", ")", "\n", "static_regret", "=", "np", ".", "zeros", "(", "(", "n", ",", "d", ")", ")", "\n", "\n", "rewards", "=", "np", ".", "zeros", "(", "(", "n", ",", "d", ")", ")", "\n", "sup_rewards", "=", "np", ".", "zeros", "(", "(", "n", ",", "d", ")", ")", "\n", "variations", "=", "np", ".", "zeros", "(", "(", "n", ",", "d", "-", "1", ")", ")", "\n", "opt_variations", "=", "np", ".", "zeros", "(", "(", "n", ",", "d", "-", "1", ")", ")", "\n", "lambdas", "=", "np", ".", "zeros", "(", "(", "n", ",", "d", "-", "1", ")", ")", "\n", "betas", "=", "np", ".", "zeros", "(", "(", "n", ",", "d", "-", "1", ")", ")", "\n", "\n", "for", "t", ",", "result", "in", "enumerate", "(", "all_results", ")", ":", "\n", "# lnr_costs[t, :] = result['lnr_costs']", "\n", "# opt_costs[t, :] = result['opt_costs']", "\n", "        ", "lnr_costs", "[", "t", ",", ":", "]", "=", "np", ".", "cumsum", "(", "result", "[", "'lnr_costs'", "]", ")", "/", "(", "np", ".", "arange", "(", "d", ")", "+", "1", ")", "\n", "opt_costs", "[", "t", ",", ":", "]", "=", "np", ".", "cumsum", "(", "result", "[", "'opt_costs'", "]", ")", "/", "(", "np", ".", "arange", "(", "d", ")", "+", "1", ")", "\n", "rewards", "[", "t", ",", ":", "]", "=", "result", "[", "'rewards'", "]", "\n", "sup_rewards", "[", "t", ",", ":", "]", "=", "result", "[", "'sup_rewards'", "]", "\n", "\n", "variations", "[", "t", ",", ":", "]", "=", "result", "[", "'variations'", "]", "\n", "opt_variations", "[", "t", ",", ":", "]", "=", "result", "[", "'opt_variations'", "]", "\n", "lambdas", "[", "t", ",", ":", "]", "=", "result", "[", "'lambdas'", "]", "\n", "betas", "[", "t", ",", ":", "]", "=", "result", "[", "'betas'", "]", "\n", "\n", "static_regret", "[", "t", ",", ":", "]", "=", "result", "[", "'static_regret'", "]", "\n", "\n", "\n", "", "diff_costs", "=", "lnr_costs", "-", "opt_costs", "\n", "\n", "lnr_mean", ",", "lnr_std", "=", "statistics", ".", "mean_sem", "(", "lnr_costs", ")", "\n", "opt_mean", ",", "opt_std", "=", "statistics", ".", "mean_sem", "(", "opt_costs", ")", "\n", "diff_mean", ",", "diff_std", "=", "statistics", ".", "mean_sem", "(", "diff_costs", ")", "\n", "sr_mean", ",", "sr_std", "=", "statistics", ".", "mean_sem", "(", "static_regret", ")", "\n", "\n", "var_mean", ",", "var_std", "=", "statistics", ".", "mean_sem", "(", "variations", ")", "\n", "opt_var_mean", ",", "opt_var_std", "=", "statistics", ".", "mean_sem", "(", "opt_variations", ")", "\n", "lam_mean", ",", "lam_std", "=", "statistics", ".", "mean_sem", "(", "lambdas", ")", "\n", "beta_mean", ",", "beta_std", "=", "statistics", ".", "mean_sem", "(", "betas", ")", "\n", "\n", "reward_mean", ",", "reward_std", "=", "statistics", ".", "mean_sem", "(", "rewards", ")", "\n", "sup_reward_mean", ",", "sup_reward_std", "=", "statistics", ".", "mean_sem", "(", "sup_rewards", ")", "\n", "\n", "x_axis", "=", "np", ".", "arange", "(", "len", "(", "lnr_mean", ")", ")", "\n", "\n", "results", "=", "{", "\n", "\"dyn_regret\"", ":", "(", "diff_mean", ",", "diff_std", ")", ",", "\n", "\"static_regret\"", ":", "(", "sr_mean", ",", "sr_std", ")", ",", "\n", "\"reward\"", ":", "(", "reward_mean", ",", "reward_std", ")", ",", "\n", "\"sup_reward\"", ":", "(", "sup_reward_mean", ",", "sup_reward_std", ")", ",", "\n", "\"var\"", ":", "(", "var_mean", ",", "var_std", ")", ",", "\n", "\"opt_var\"", ":", "(", "opt_var_mean", ",", "opt_var_std", ")", ",", "\n", "\"lam\"", ":", "(", "lam_mean", ",", "lam_std", ")", ",", "\n", "'beta'", ":", "(", "beta_mean", ",", "beta_std", ")", "\n", "}", "\n", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.jon--lee_aor.exp_mujoco.analyze_hopper.plot_results": [[79, 114], ["matplotlib.subplot", "matplotlib.title", "matplotlib.ylim", "matplotlib.tight_layout", "matplotlib.legend", "matplotlib.ylabel", "matplotlib.subplot", "matplotlib.title", "matplotlib.errorbar", "matplotlib.ylabel", "matplotlib.tight_layout", "matplotlib.legend", "matplotlib.ylim", "numpy.arange", "matplotlib.errorbar", "matplotlib.errorbar", "matplotlib.xlabel", "matplotlib.errorbar", "matplotlib.xlabel", "len", "p[].get_color"], "function", ["None"], ["", "def", "plot_results", "(", "all_results", ",", "i", ")", ":", "\n", "\n", "    ", "plt", ".", "subplot", "(", "2", ",", "2", ",", "1", "+", "i", "*", "2", ")", "\n", "plt", ".", "title", "(", "all_results", "[", "0", "]", "[", "'title'", "]", "+", "\": Regret Rates\"", ",", "fontsize", "=", "22", ")", "\n", "for", "results", "in", "all_results", ":", "\n", "        ", "sr_mean", ",", "sr_std", "=", "results", "[", "'static_regret'", "]", "\n", "diff_mean", ",", "diff_std", "=", "results", "[", "'dyn_regret'", "]", "\n", "x_axis", "=", "np", ".", "arange", "(", "len", "(", "sr_mean", ")", ")", "\n", "p", "=", "plt", ".", "errorbar", "(", "x_axis", ",", "sr_mean", ",", "yerr", "=", "sr_std", ",", "label", "=", "results", "[", "'label'", "]", "+", "': Static Regret'", ",", "linestyle", "=", "'--'", ")", "\n", "plt", ".", "errorbar", "(", "x_axis", ",", "diff_mean", ",", "yerr", "=", "diff_std", ",", "label", "=", "results", "[", "'label'", "]", "+", "': Dynamic Regret'", ",", "color", "=", "p", "[", "0", "]", ".", "get_color", "(", ")", ")", "\n", "", "plt", ".", "ylim", "(", "-", "3", ",", "20", ")", "\n", "plt", ".", "tight_layout", "(", ")", "\n", "plt", ".", "legend", "(", "fontsize", "=", "18", ",", "loc", "=", "'upper right'", ")", "\n", "if", "i", "==", "1", ":", "\n", "        ", "plt", ".", "xlabel", "(", "'Iterations'", ",", "fontsize", "=", "20", ")", "\n", "\n", "", "plt", ".", "ylabel", "(", "'Regret'", ",", "fontsize", "=", "20", ")", "\n", "# plt.ylim(0, 1)", "\n", "\n", "\n", "\n", "plt", ".", "subplot", "(", "2", ",", "2", ",", "i", "*", "2", "+", "2", ")", "\n", "plt", ".", "title", "(", "all_results", "[", "0", "]", "[", "'title'", "]", "+", "\": Distance Traveled\"", ",", "fontsize", "=", "22", ")", "\n", "for", "results", "in", "all_results", ":", "\n", "        ", "sup_reward_mean", ",", "reward_std", "=", "results", "[", "'sup_reward'", "]", "\n", "reward_mean", ",", "sup_reward_std", "=", "results", "[", "'reward'", "]", "\n", "p", "=", "plt", ".", "errorbar", "(", "x_axis", ",", "reward_mean", ",", "yerr", "=", "reward_std", ",", "label", "=", "results", "[", "'label'", "]", ")", "\n", "", "plt", ".", "errorbar", "(", "x_axis", ",", "sup_reward_mean", ",", "yerr", "=", "sup_reward_std", ",", "label", "=", "'Supervisor Cost'", ",", "linestyle", "=", "'--'", ",", "color", "=", "\"green\"", ")", "\n", "plt", ".", "ylabel", "(", "'Distance Traveled'", ",", "fontsize", "=", "20", ")", "\n", "\n", "if", "i", "==", "1", ":", "\n", "        ", "plt", ".", "xlabel", "(", "'Iterations'", ",", "fontsize", "=", "20", ")", "\n", "", "plt", ".", "tight_layout", "(", ")", "\n", "plt", ".", "legend", "(", "fontsize", "=", "20", ",", "loc", "=", "'upper right'", ")", "\n", "plt", ".", "ylim", "(", "-", "200", ",", "600", ")", "\n", "# plt.show()", "\n"]], "home.repos.pwc.inspect_result.jon--lee_aor.exp_mujoco.analyze_hopper_instantaneous.aggregate": [[13, 77], ["open", "pickle.load", "open.close", "len", "len", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "enumerate", "tools.statistics.mean_sem", "tools.statistics.mean_sem", "tools.statistics.mean_sem", "tools.statistics.mean_sem", "tools.statistics.mean_sem", "tools.statistics.mean_sem", "tools.statistics.mean_sem", "tools.statistics.mean_sem", "tools.statistics.mean_sem", "tools.statistics.mean_sem", "numpy.arange", "len"], "function", ["home.repos.pwc.inspect_result.jon--lee_aor.tools.statistics.mean_sem", "home.repos.pwc.inspect_result.jon--lee_aor.tools.statistics.mean_sem", "home.repos.pwc.inspect_result.jon--lee_aor.tools.statistics.mean_sem", "home.repos.pwc.inspect_result.jon--lee_aor.tools.statistics.mean_sem", "home.repos.pwc.inspect_result.jon--lee_aor.tools.statistics.mean_sem", "home.repos.pwc.inspect_result.jon--lee_aor.tools.statistics.mean_sem", "home.repos.pwc.inspect_result.jon--lee_aor.tools.statistics.mean_sem", "home.repos.pwc.inspect_result.jon--lee_aor.tools.statistics.mean_sem", "home.repos.pwc.inspect_result.jon--lee_aor.tools.statistics.mean_sem", "home.repos.pwc.inspect_result.jon--lee_aor.tools.statistics.mean_sem"], ["def", "aggregate", "(", "filepath", ")", ":", "\n", "    ", "f", "=", "open", "(", "filepath", ",", "'rb'", ")", "\n", "all_results", "=", "pickle", ".", "load", "(", "f", ")", "\n", "f", ".", "close", "(", ")", "\n", "\n", "n", "=", "len", "(", "all_results", ")", "\n", "d", "=", "len", "(", "all_results", "[", "0", "]", "[", "'lnr_costs'", "]", ")", "\n", "\n", "lnr_costs", "=", "np", ".", "zeros", "(", "(", "n", ",", "d", ")", ")", "\n", "opt_costs", "=", "np", ".", "zeros", "(", "(", "n", ",", "d", ")", ")", "\n", "diff_costs", "=", "np", ".", "zeros", "(", "(", "n", ",", "d", ")", ")", "\n", "static_regret", "=", "np", ".", "zeros", "(", "(", "n", ",", "d", ")", ")", "\n", "\n", "rewards", "=", "np", ".", "zeros", "(", "(", "n", ",", "d", ")", ")", "\n", "sup_rewards", "=", "np", ".", "zeros", "(", "(", "n", ",", "d", ")", ")", "\n", "variations", "=", "np", ".", "zeros", "(", "(", "n", ",", "d", "-", "1", ")", ")", "\n", "opt_variations", "=", "np", ".", "zeros", "(", "(", "n", ",", "d", "-", "1", ")", ")", "\n", "lambdas", "=", "np", ".", "zeros", "(", "(", "n", ",", "d", "-", "1", ")", ")", "\n", "betas", "=", "np", ".", "zeros", "(", "(", "n", ",", "d", "-", "1", ")", ")", "\n", "\n", "for", "t", ",", "result", "in", "enumerate", "(", "all_results", ")", ":", "\n", "        ", "lnr_costs", "[", "t", ",", ":", "]", "=", "result", "[", "'lnr_costs'", "]", "\n", "opt_costs", "[", "t", ",", ":", "]", "=", "result", "[", "'opt_costs'", "]", "\n", "# lnr_costs[t, :] = np.cumsum(result['lnr_costs']) / (np.arange(d) + 1)", "\n", "# opt_costs[t, :] = np.cumsum(result['opt_costs']) / (np.arange(d) + 1)", "\n", "rewards", "[", "t", ",", ":", "]", "=", "result", "[", "'rewards'", "]", "\n", "sup_rewards", "[", "t", ",", ":", "]", "=", "result", "[", "'sup_rewards'", "]", "\n", "\n", "variations", "[", "t", ",", ":", "]", "=", "result", "[", "'variations'", "]", "\n", "opt_variations", "[", "t", ",", ":", "]", "=", "result", "[", "'opt_variations'", "]", "\n", "lambdas", "[", "t", ",", ":", "]", "=", "result", "[", "'lambdas'", "]", "\n", "betas", "[", "t", ",", ":", "]", "=", "result", "[", "'betas'", "]", "\n", "\n", "static_regret", "[", "t", ",", ":", "]", "=", "result", "[", "'static_regret'", "]", "\n", "\n", "\n", "", "diff_costs", "=", "lnr_costs", "-", "opt_costs", "\n", "\n", "lnr_mean", ",", "lnr_std", "=", "statistics", ".", "mean_sem", "(", "lnr_costs", ")", "\n", "opt_mean", ",", "opt_std", "=", "statistics", ".", "mean_sem", "(", "opt_costs", ")", "\n", "diff_mean", ",", "diff_std", "=", "statistics", ".", "mean_sem", "(", "diff_costs", ")", "\n", "sr_mean", ",", "sr_std", "=", "statistics", ".", "mean_sem", "(", "static_regret", ")", "\n", "\n", "var_mean", ",", "var_std", "=", "statistics", ".", "mean_sem", "(", "variations", ")", "\n", "opt_var_mean", ",", "opt_var_std", "=", "statistics", ".", "mean_sem", "(", "opt_variations", ")", "\n", "lam_mean", ",", "lam_std", "=", "statistics", ".", "mean_sem", "(", "lambdas", ")", "\n", "beta_mean", ",", "beta_std", "=", "statistics", ".", "mean_sem", "(", "betas", ")", "\n", "\n", "reward_mean", ",", "reward_std", "=", "statistics", ".", "mean_sem", "(", "rewards", ")", "\n", "sup_reward_mean", ",", "sup_reward_std", "=", "statistics", ".", "mean_sem", "(", "sup_rewards", ")", "\n", "\n", "x_axis", "=", "np", ".", "arange", "(", "len", "(", "lnr_mean", ")", ")", "\n", "\n", "results", "=", "{", "\n", "\"dyn_regret\"", ":", "(", "diff_mean", ",", "diff_std", ")", ",", "\n", "\"static_regret\"", ":", "(", "sr_mean", ",", "sr_std", ")", ",", "\n", "\"reward\"", ":", "(", "reward_mean", ",", "reward_std", ")", ",", "\n", "\"sup_reward\"", ":", "(", "sup_reward_mean", ",", "sup_reward_std", ")", ",", "\n", "\"var\"", ":", "(", "var_mean", ",", "var_std", ")", ",", "\n", "\"opt_var\"", ":", "(", "opt_var_mean", ",", "opt_var_std", ")", ",", "\n", "\"lam\"", ":", "(", "lam_mean", ",", "lam_std", ")", ",", "\n", "'beta'", ":", "(", "beta_mean", ",", "beta_std", ")", "\n", "}", "\n", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.jon--lee_aor.exp_mujoco.analyze_hopper_instantaneous.plot_results": [[79, 115], ["matplotlib.subplot", "matplotlib.title", "matplotlib.ylim", "matplotlib.tight_layout", "matplotlib.legend", "matplotlib.ylabel", "matplotlib.subplot", "matplotlib.title", "matplotlib.errorbar", "matplotlib.ylabel", "matplotlib.tight_layout", "matplotlib.legend", "matplotlib.ylim", "numpy.arange", "matplotlib.errorbar", "matplotlib.xlabel", "matplotlib.errorbar", "matplotlib.xlabel", "len"], "function", ["None"], ["", "def", "plot_results", "(", "all_results", ",", "i", ")", ":", "\n", "\n", "    ", "plt", ".", "subplot", "(", "2", ",", "2", ",", "1", "+", "i", "*", "2", ")", "\n", "plt", ".", "title", "(", "all_results", "[", "0", "]", "[", "'title'", "]", "+", "\": Regret\"", ",", "fontsize", "=", "22", ")", "\n", "for", "results", "in", "all_results", ":", "\n", "        ", "sr_mean", ",", "sr_std", "=", "results", "[", "'static_regret'", "]", "\n", "diff_mean", ",", "diff_std", "=", "results", "[", "'dyn_regret'", "]", "\n", "x_axis", "=", "np", ".", "arange", "(", "len", "(", "sr_mean", ")", ")", "\n", "# p = plt.errorbar(x_axis, sr_mean, yerr=sr_std, label=results['label'] + ': Static Regret', linestyle='--')", "\n", "plt", ".", "errorbar", "(", "x_axis", ",", "diff_mean", ",", "yerr", "=", "diff_std", ",", "label", "=", "results", "[", "'label'", "]", ",", "linewidth", "=", "3.0", ")", "\n", "", "plt", ".", "ylim", "(", "-", "3", ",", "20", ")", "\n", "plt", ".", "tight_layout", "(", ")", "\n", "plt", ".", "legend", "(", "fontsize", "=", "20", ",", "loc", "=", "'upper right'", ")", "\n", "if", "i", "==", "1", ":", "\n", "        ", "plt", ".", "xlabel", "(", "'Iterations'", ",", "fontsize", "=", "20", ")", "\n", "", "plt", ".", "ylabel", "(", "'Instantaneous Regret'", ",", "fontsize", "=", "20", ")", "\n", "# plt.ylim(0, 1)", "\n", "\n", "\n", "\n", "plt", ".", "subplot", "(", "2", ",", "2", ",", "i", "*", "2", "+", "2", ")", "\n", "plt", ".", "title", "(", "all_results", "[", "0", "]", "[", "'title'", "]", "+", "\": Fraction of Distance Traveled\"", ",", "fontsize", "=", "22", ")", "\n", "for", "results", "in", "all_results", ":", "\n", "        ", "sup_reward_mean", ",", "reward_std", "=", "results", "[", "'sup_reward'", "]", "\n", "reward_mean", ",", "sup_reward_std", "=", "results", "[", "'reward'", "]", "\n", "# p = plt.errorbar(x_axis, reward_mean, yerr=reward_std, label=results['label'], linewidth=3.0)", "\n", "p", "=", "plt", ".", "errorbar", "(", "x_axis", ",", "reward_mean", "/", "sup_reward_mean", ",", "yerr", "=", "reward_std", ",", "label", "=", "results", "[", "'label'", "]", ",", "linewidth", "=", "3.0", ")", "\n", "# plt.errorbar(x_axis, sup_reward_mean, yerr=sup_reward_std, label='Supervisor', linestyle='--', color=\"green\", linewidth=3.0)", "\n", "", "plt", ".", "errorbar", "(", "x_axis", ",", "sup_reward_mean", "/", "sup_reward_mean", ",", "yerr", "=", "sup_reward_std", ",", "label", "=", "'Supervisor'", ",", "linestyle", "=", "'--'", ",", "color", "=", "\"green\"", ",", "linewidth", "=", "3.0", ")", "\n", "plt", ".", "ylabel", "(", "'Fraction of Distance'", ",", "fontsize", "=", "20", ")", "\n", "\n", "if", "i", "==", "1", ":", "\n", "        ", "plt", ".", "xlabel", "(", "'Iterations'", ",", "fontsize", "=", "20", ")", "\n", "", "plt", ".", "tight_layout", "(", ")", "\n", "plt", ".", "legend", "(", "fontsize", "=", "20", ",", "loc", "=", "'lower right'", ",", "ncol", "=", "2", ")", "\n", "plt", ".", "ylim", "(", "-", ".3", ",", "1.2", ")", "\n", "# plt.show()", "\n"]], "home.repos.pwc.inspect_result.jon--lee_aor.exp_mujoco.mj_mig.MujocoMIG.__init__": [[16, 30], ["exp_mujoco.mj_dagger.MujocoDagger.__init__", "numpy.min", "os.path.join", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.jon--lee_aor.exp_mujoco.mj_dagger.MujocoDagger.__init__", "home.repos.pwc.inspect_result.jon--lee_aor.expert.tf_util.min"], ["    ", "def", "__init__", "(", "self", ",", "param", ",", "force_mag", ",", "envname", ",", "reg", ")", ":", "\n", "        ", "MujocoDagger", ".", "__init__", "(", "self", ",", "param", ",", "force_mag", ",", "envname", ",", "reg", ")", "\n", "# self.iters = 200", "\n", "self", ".", "trials", "=", "1", "\n", "\n", "self", ".", "alpha", "=", "1.0", "\n", "self", ".", "eta", "=", "np", ".", "min", "(", "[", ".01", ",", "1.0", "/", "self", ".", "alpha", "/", "10.0", "]", ")", "\n", "self", ".", "t", "=", ".1", "\n", "\n", "self", ".", "inner_eta", "=", "1.0", "#1/self.alpha", "\n", "\n", "self", ".", "dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "base_dir", ",", "'mig'", ")", "\n", "self", ".", "prefix", "=", "'mig'", "\n", "self", ".", "path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "dir", ",", "self", ".", "prefix", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jon--lee_aor.exp_mujoco.mj_mig.MujocoMIG.run_iters": [[32, 106], ["range", "results.keys", "mj_mig.MujocoMIG.compute_results", "print", "print", "mj_mig.MujocoMIG.compute_statistics", "tools.statistics.collect_traj", "mj_mig.MujocoMIG.lnr.set_update", "mj_mig.MujocoMIG.lnr.multiple_update", "numpy.array", "len", "numpy.array", "numpy.array", "print", "mj_mig.MujocoMIG.sup.intended_action", "numpy.mean", "numpy.mean", "print", "print", "print", "print", "str", "str", "numpy.min", "len", "str", "numpy.array", "numpy.array", "str", "str", "str", "str", "numpy.linalg.norm"], "methods", ["home.repos.pwc.inspect_result.jon--lee_aor.exp_mujoco.mj_dagger.MujocoDagger.compute_results", "home.repos.pwc.inspect_result.jon--lee_aor.exp_mujoco.mj_dagger.MujocoDagger.compute_statistics", "home.repos.pwc.inspect_result.jon--lee_aor.tools.statistics.collect_traj", "home.repos.pwc.inspect_result.jon--lee_aor.tools.learner.Learner.set_update", "home.repos.pwc.inspect_result.jon--lee_aor.tools.lr.LR.multiple_update", "home.repos.pwc.inspect_result.jon--lee_aor.tools.learner.Learner.intended_action", "home.repos.pwc.inspect_result.jon--lee_aor.expert.tf_util.mean", "home.repos.pwc.inspect_result.jon--lee_aor.expert.tf_util.mean", "home.repos.pwc.inspect_result.jon--lee_aor.expert.tf_util.min"], ["", "def", "run_iters", "(", "self", ")", ":", "\n", "\n", "        ", "results", "=", "{", "\n", "'lnr_costs'", ":", "[", "]", ",", "\n", "'opt_costs'", ":", "[", "]", ",", "\n", "'variations'", ":", "[", "]", ",", "\n", "'opt_variations'", ":", "[", "]", ",", "\n", "'param_norms'", ":", "[", "]", ",", "\n", "'opt_param_norms'", ":", "[", "]", ",", "\n", "'lambdas'", ":", "[", "]", ",", "\n", "'lnr_batch_costs'", ":", "[", "]", ",", "\n", "'opt_batch_costs'", ":", "[", "]", ",", "\n", "'static_regret'", ":", "[", "]", ",", "\n", "'rewards'", ":", "[", "]", ",", "\n", "'betas'", ":", "[", "]", ",", "\n", "'alphas'", ":", "[", "]", ",", "\n", "\n", "}", "\n", "\n", "d", "=", "self", ".", "env", ".", "observation_space", ".", "shape", "[", "0", "]", "\n", "# self.data_states = [np.zeros(d), np.zeros(d)]", "\n", "# self.data_actions = [1, 0]", "\n", "self", ".", "data_states", "=", "[", "]", "\n", "self", ".", "data_actions", "=", "[", "]", "\n", "\n", "for", "iteration", "in", "range", "(", "self", ".", "iters", ")", ":", "\n", "            ", "print", "(", "\"\\tIteration: \"", "+", "str", "(", "iteration", ")", ")", "\n", "print", "(", "\"\\tData states: \"", "+", "str", "(", "len", "(", "self", ".", "data_states", ")", ")", ")", "\n", "if", "len", "(", "self", ".", "data_states", ")", ">", "0", ":", "\n", "                ", "X", "=", "np", ".", "array", "(", "states", ")", "\n", "y", "=", "np", ".", "array", "(", "tmp_actions", ")", "\n", "print", "(", "\"\\t Coef norm: \"", "+", "str", "(", "np", ".", "linalg", ".", "norm", "(", "self", ".", "lnr", ".", "est", ".", "coef_", ")", "/", "(", "X", ".", "shape", "[", "1", "]", "*", "y", ".", "shape", "[", "1", "]", ")", ")", ")", "\n", "\n", "# if iteration == 0 or iteration % 25 == 0:", "\n", "#     IPython.embed()", "\n", "\n", "", "self", ".", "compute_statistics", "(", "iteration", ",", "results", ")", "\n", "\n", "states", ",", "tmp_actions", ",", "_", ",", "_", "=", "statistics", ".", "collect_traj", "(", "self", ".", "env", ",", "self", ".", "lnr", ",", "self", ".", "params", "[", "'T'", "]", ")", "\n", "i_actions", "=", "[", "self", ".", "sup", ".", "intended_action", "(", "s", ")", "for", "s", "in", "states", "]", "\n", "\n", "\n", "self", ".", "data_states", "+=", "states", "\n", "self", ".", "data_actions", "+=", "i_actions", "\n", "\n", "self", ".", "lnr", ".", "set_update", "(", "states", ",", "i_actions", ")", "\n", "self", ".", "lnr", ".", "multiple_update", "(", "iteration", ")", "\n", "\n", "# Adaptive regularization:", "\n", "if", "self", ".", "reg", "and", "(", "iteration", "+", "1", ")", "%", "10", "==", "0", ":", "\n", "                ", "mean_lambda", "=", "np", ".", "mean", "(", "results", "[", "'lambdas'", "]", "[", "-", "10", ":", "]", "+", "self", ".", "lambda_prior", ")", "\n", "\n", "mean_ratio", "=", "np", ".", "mean", "(", "np", ".", "array", "(", "results", "[", "'opt_costs'", "]", "[", "-", "10", ":", "]", ")", "/", "np", ".", "array", "(", "results", "[", "'lnr_costs'", "]", "[", "-", "10", ":", "]", ")", ")", "\n", "\n", "if", "mean_ratio", "<", ".998", ":", "\n", "                    ", "next_alpha", "=", "mean_lambda", "*", "self", ".", "lnr", ".", "est", ".", "alpha", "\n", "# self.lnr.est.alpha = (1 - mean_ratio) * next_alpha + mean_ratio * self.lnr.est.alpha", "\n", "self", ".", "lnr", ".", "est", ".", "alpha", "=", "self", ".", "t", "*", "next_alpha", "+", "(", "1", "-", "self", ".", "t", ")", "*", "self", ".", "lnr", ".", "est", ".", "alpha", "\n", "self", ".", "lnr", ".", "est", ".", "eta", "=", "np", ".", "min", "(", "[", ".01", ",", "1.0", "/", "self", ".", "lnr", ".", "est", ".", "alpha", "/", "10.0", "]", ")", "\n", "\n", "", "print", "(", "\"\\n\\n\\t\\t Updated alpha: \"", "+", "str", "(", "self", ".", "lnr", ".", "est", ".", "alpha", ")", ")", "\n", "print", "(", "\"\\t\\t Mean ratio: \"", "+", "str", "(", "mean_ratio", ")", ")", "\n", "print", "(", "\"\\t\\t Lambda was: \"", "+", "str", "(", "mean_lambda", ")", ")", "\n", "print", "(", "\"\\t\\t Eta: \"", "+", "str", "(", "self", ".", "lnr", ".", "est", ".", "eta", ")", ")", "\n", "\n", "\n", "\n", "\n", "", "", "for", "key", "in", "results", ".", "keys", "(", ")", ":", "\n", "            ", "results", "[", "key", "]", "=", "np", ".", "array", "(", "results", "[", "key", "]", ")", "\n", "\n", "", "self", ".", "compute_results", "(", "results", ")", "\n", "\n", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.jon--lee_aor.exp_mujoco.mj_mig.main": [[110, 123], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "vars", "mj_mig.MujocoMIG", "MujocoMIG.run_trials", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.jon--lee_aor.exp_mujoco.mj_dagger.MujocoDagger.run_trials"], ["", "", "def", "main", "(", ")", ":", "\n", "    ", "ap", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "ap", ".", "add_argument", "(", "'--frame_skip'", ",", "type", "=", "int", ",", "required", "=", "False", ",", "default", "=", "None", ")", "\n", "ap", ".", "add_argument", "(", "'--env'", ",", "type", "=", "str", ",", "required", "=", "True", ")", "\n", "ap", ".", "add_argument", "(", "'--force_mag'", ",", "type", "=", "float", ",", "required", "=", "False", ",", "default", "=", "1.0", ")", "\n", "ap", ".", "add_argument", "(", "'--reg'", ",", "action", "=", "'store_true'", ")", "\n", "args", "=", "vars", "(", "ap", ".", "parse_args", "(", ")", ")", "\n", "param", "=", "args", "[", "'frame_skip'", "]", "\n", "envname", "=", "args", "[", "'env'", "]", "\n", "force_mag", "=", "args", "[", "'force_mag'", "]", "\n", "reg", "=", "args", "[", "'reg'", "]", "\n", "test", "=", "MujocoMIG", "(", "param", ",", "force_mag", ",", "envname", ",", "reg", ")", "\n", "results", "=", "test", ".", "run_trials", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jon--lee_aor.exp_mujoco.mj_ig.MujocoIG.__init__": [[16, 34], ["exp_mujoco.mj_dagger.MujocoDagger.__init__", "numpy.min", "print", "os.path.join", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.jon--lee_aor.exp_mujoco.mj_dagger.MujocoDagger.__init__", "home.repos.pwc.inspect_result.jon--lee_aor.expert.tf_util.min"], ["    ", "def", "__init__", "(", "self", ",", "param", ",", "force_mag", ",", "envname", ",", "reg", ")", ":", "\n", "        ", "MujocoDagger", ".", "__init__", "(", "self", ",", "param", ",", "force_mag", ",", "envname", ",", "reg", ")", "\n", "# self.iters = 200", "\n", "self", ".", "trials", "=", "1", "\n", "\n", "# Adaptive reg weighting", "\n", "\n", "self", ".", "alpha", "=", "1.0", "\n", "self", ".", "eta", "=", "np", ".", "min", "(", "[", ".0001", ",", "1.0", "/", "self", ".", "alpha", "/", "10", "]", ")", "\n", "print", "(", "self", ".", "eta", ")", "\n", "\n", "self", ".", "inner_eta", "=", "1.0", "#1/self.alpha", "\n", "\n", "self", ".", "dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "base_dir", ",", "'ig'", ")", "\n", "self", ".", "prefix", "=", "'ig'", "\n", "self", ".", "path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "dir", ",", "self", ".", "prefix", ")", "\n", "\n", "self", ".", "t", "=", ".01", "\n", "\n"]], "home.repos.pwc.inspect_result.jon--lee_aor.exp_mujoco.mj_ig.MujocoIG.run_iters": [[36, 107], ["range", "results.keys", "mj_ig.MujocoIG.compute_results", "print", "print", "mj_ig.MujocoIG.compute_statistics", "tools.statistics.collect_traj", "mj_ig.MujocoIG.lnr.set_update", "mj_ig.MujocoIG.lnr.update", "numpy.array", "len", "numpy.array", "numpy.array", "print", "mj_ig.MujocoIG.sup.intended_action", "numpy.mean", "numpy.mean", "print", "print", "print", "print", "str", "str", "numpy.min", "len", "str", "numpy.array", "numpy.array", "str", "str", "str", "str", "numpy.linalg.norm"], "methods", ["home.repos.pwc.inspect_result.jon--lee_aor.exp_mujoco.mj_dagger.MujocoDagger.compute_results", "home.repos.pwc.inspect_result.jon--lee_aor.exp_mujoco.mj_dagger.MujocoDagger.compute_statistics", "home.repos.pwc.inspect_result.jon--lee_aor.tools.statistics.collect_traj", "home.repos.pwc.inspect_result.jon--lee_aor.tools.learner.Learner.set_update", "home.repos.pwc.inspect_result.jon--lee_aor.tools.lr.LR.update", "home.repos.pwc.inspect_result.jon--lee_aor.tools.learner.Learner.intended_action", "home.repos.pwc.inspect_result.jon--lee_aor.expert.tf_util.mean", "home.repos.pwc.inspect_result.jon--lee_aor.expert.tf_util.mean", "home.repos.pwc.inspect_result.jon--lee_aor.expert.tf_util.min"], ["", "def", "run_iters", "(", "self", ")", ":", "\n", "\n", "        ", "results", "=", "{", "\n", "'lnr_costs'", ":", "[", "]", ",", "\n", "'opt_costs'", ":", "[", "]", ",", "\n", "'variations'", ":", "[", "]", ",", "\n", "'opt_variations'", ":", "[", "]", ",", "\n", "'param_norms'", ":", "[", "]", ",", "\n", "'opt_param_norms'", ":", "[", "]", ",", "\n", "'lambdas'", ":", "[", "]", ",", "\n", "'lnr_batch_costs'", ":", "[", "]", ",", "\n", "'opt_batch_costs'", ":", "[", "]", ",", "\n", "'static_regret'", ":", "[", "]", ",", "\n", "'rewards'", ":", "[", "]", ",", "\n", "'betas'", ":", "[", "]", ",", "\n", "'alphas'", ":", "[", "]", ",", "\n", "\n", "}", "\n", "\n", "d", "=", "self", ".", "env", ".", "observation_space", ".", "shape", "[", "0", "]", "\n", "# self.data_states = [np.zeros(d), np.zeros(d)]", "\n", "# self.data_actions = [1, 0]", "\n", "self", ".", "data_states", "=", "[", "]", "\n", "self", ".", "data_actions", "=", "[", "]", "\n", "\n", "for", "iteration", "in", "range", "(", "self", ".", "iters", ")", ":", "\n", "            ", "print", "(", "\"\\tIteration: \"", "+", "str", "(", "iteration", ")", ")", "\n", "print", "(", "\"\\tData states: \"", "+", "str", "(", "len", "(", "self", ".", "data_states", ")", ")", ")", "\n", "if", "len", "(", "self", ".", "data_states", ")", ">", "0", ":", "\n", "                ", "X", "=", "np", ".", "array", "(", "states", ")", "\n", "y", "=", "np", ".", "array", "(", "tmp_actions", ")", "\n", "print", "(", "\"\\t Coef norm: \"", "+", "str", "(", "np", ".", "linalg", ".", "norm", "(", "self", ".", "lnr", ".", "est", ".", "coef_", ")", "/", "(", "X", ".", "shape", "[", "1", "]", "*", "y", ".", "shape", "[", "1", "]", ")", ")", ")", "\n", "\n", "", "self", ".", "compute_statistics", "(", "iteration", ",", "results", ")", "\n", "\n", "states", ",", "tmp_actions", ",", "_", ",", "_", "=", "statistics", ".", "collect_traj", "(", "self", ".", "env", ",", "self", ".", "lnr", ",", "self", ".", "params", "[", "'T'", "]", ")", "\n", "i_actions", "=", "[", "self", ".", "sup", ".", "intended_action", "(", "s", ")", "for", "s", "in", "states", "]", "\n", "\n", "\n", "self", ".", "data_states", "+=", "states", "\n", "self", ".", "data_actions", "+=", "i_actions", "\n", "\n", "self", ".", "lnr", ".", "set_update", "(", "states", ",", "i_actions", ")", "\n", "self", ".", "lnr", ".", "update", "(", "iteration", ")", "\n", "\n", "# Adaptive regularization:", "\n", "if", "self", ".", "reg", "and", "(", "iteration", "+", "1", ")", "%", "10", "==", "0", ":", "\n", "                ", "mean_lambda", "=", "np", ".", "mean", "(", "results", "[", "'lambdas'", "]", "[", "-", "10", ":", "]", "+", "self", ".", "lambda_prior", ")", "\n", "\n", "mean_ratio", "=", "np", ".", "mean", "(", "np", ".", "array", "(", "results", "[", "'opt_costs'", "]", "[", "-", "10", ":", "]", ")", "/", "np", ".", "array", "(", "results", "[", "'lnr_costs'", "]", "[", "-", "10", ":", "]", ")", ")", "\n", "\n", "if", "mean_ratio", "<", ".998", ":", "\n", "                    ", "next_alpha", "=", "mean_lambda", "*", "self", ".", "lnr", ".", "est", ".", "alpha", "\n", "# self.lnr.est.alpha = (1 - mean_ratio) * next_alpha + mean_ratio * self.lnr.est.alpha", "\n", "self", ".", "lnr", ".", "est", ".", "alpha", "=", "self", ".", "t", "*", "next_alpha", "+", "(", "1", "-", "self", ".", "t", ")", "*", "self", ".", "lnr", ".", "est", ".", "alpha", "\n", "self", ".", "lnr", ".", "est", ".", "eta", "=", "np", ".", "min", "(", "[", ".0001", ",", "1.0", "/", "self", ".", "lnr", ".", "est", ".", "alpha", "/", "10", "]", ")", "\n", "\n", "", "print", "(", "\"\\n\\n\\t\\t Updated alpha: \"", "+", "str", "(", "self", ".", "lnr", ".", "est", ".", "alpha", ")", ")", "\n", "print", "(", "\"\\t\\t Mean ratio: \"", "+", "str", "(", "mean_ratio", ")", ")", "\n", "print", "(", "\"\\t\\t Lambda was: \"", "+", "str", "(", "mean_lambda", ")", ")", "\n", "print", "(", "\"\\t\\t Eta: \"", "+", "str", "(", "self", ".", "lnr", ".", "est", ".", "eta", ")", ")", "\n", "\n", "\n", "\n", "\n", "", "", "for", "key", "in", "results", ".", "keys", "(", ")", ":", "\n", "            ", "results", "[", "key", "]", "=", "np", ".", "array", "(", "results", "[", "key", "]", ")", "\n", "\n", "", "self", ".", "compute_results", "(", "results", ")", "\n", "\n", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.jon--lee_aor.exp_mujoco.mj_ig.main": [[112, 126], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "vars", "mj_ig.MujocoIG", "MujocoIG.run_trials", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.jon--lee_aor.exp_mujoco.mj_dagger.MujocoDagger.run_trials"], ["", "", "def", "main", "(", ")", ":", "\n", "    ", "ap", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "ap", ".", "add_argument", "(", "'--frame_skip'", ",", "type", "=", "int", ",", "required", "=", "False", ",", "default", "=", "None", ")", "\n", "ap", ".", "add_argument", "(", "'--env'", ",", "type", "=", "str", ",", "required", "=", "True", ")", "\n", "ap", ".", "add_argument", "(", "'--force_mag'", ",", "type", "=", "float", ",", "required", "=", "False", ",", "default", "=", "1.0", ")", "\n", "ap", ".", "add_argument", "(", "'--reg'", ",", "action", "=", "'store_true'", ")", "\n", "args", "=", "vars", "(", "ap", ".", "parse_args", "(", ")", ")", "\n", "param", "=", "args", "[", "'frame_skip'", "]", "\n", "envname", "=", "args", "[", "'env'", "]", "\n", "force_mag", "=", "args", "[", "'force_mag'", "]", "\n", "reg", "=", "args", "[", "'reg'", "]", "\n", "test", "=", "MujocoIG", "(", "param", ",", "force_mag", ",", "envname", ",", "reg", ")", "\n", "# test = CartpoleIGLambda()", "\n", "results", "=", "test", ".", "run_trials", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jon--lee_aor.exp_mujoco.analyze_walker.aggregate": [[13, 77], ["open", "pickle.load", "open.close", "len", "len", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "enumerate", "tools.statistics.mean_sem", "tools.statistics.mean_sem", "tools.statistics.mean_sem", "tools.statistics.mean_sem", "tools.statistics.mean_sem", "tools.statistics.mean_sem", "tools.statistics.mean_sem", "tools.statistics.mean_sem", "tools.statistics.mean_sem", "tools.statistics.mean_sem", "numpy.arange", "len", "numpy.cumsum", "numpy.cumsum", "numpy.arange", "numpy.arange"], "function", ["home.repos.pwc.inspect_result.jon--lee_aor.tools.statistics.mean_sem", "home.repos.pwc.inspect_result.jon--lee_aor.tools.statistics.mean_sem", "home.repos.pwc.inspect_result.jon--lee_aor.tools.statistics.mean_sem", "home.repos.pwc.inspect_result.jon--lee_aor.tools.statistics.mean_sem", "home.repos.pwc.inspect_result.jon--lee_aor.tools.statistics.mean_sem", "home.repos.pwc.inspect_result.jon--lee_aor.tools.statistics.mean_sem", "home.repos.pwc.inspect_result.jon--lee_aor.tools.statistics.mean_sem", "home.repos.pwc.inspect_result.jon--lee_aor.tools.statistics.mean_sem", "home.repos.pwc.inspect_result.jon--lee_aor.tools.statistics.mean_sem", "home.repos.pwc.inspect_result.jon--lee_aor.tools.statistics.mean_sem"], ["def", "aggregate", "(", "filepath", ")", ":", "\n", "    ", "f", "=", "open", "(", "filepath", ",", "'rb'", ")", "\n", "all_results", "=", "pickle", ".", "load", "(", "f", ")", "\n", "f", ".", "close", "(", ")", "\n", "\n", "n", "=", "len", "(", "all_results", ")", "\n", "d", "=", "len", "(", "all_results", "[", "0", "]", "[", "'lnr_costs'", "]", ")", "\n", "\n", "lnr_costs", "=", "np", ".", "zeros", "(", "(", "n", ",", "d", ")", ")", "\n", "opt_costs", "=", "np", ".", "zeros", "(", "(", "n", ",", "d", ")", ")", "\n", "diff_costs", "=", "np", ".", "zeros", "(", "(", "n", ",", "d", ")", ")", "\n", "static_regret", "=", "np", ".", "zeros", "(", "(", "n", ",", "d", ")", ")", "\n", "\n", "rewards", "=", "np", ".", "zeros", "(", "(", "n", ",", "d", ")", ")", "\n", "sup_rewards", "=", "np", ".", "zeros", "(", "(", "n", ",", "d", ")", ")", "\n", "variations", "=", "np", ".", "zeros", "(", "(", "n", ",", "d", "-", "1", ")", ")", "\n", "opt_variations", "=", "np", ".", "zeros", "(", "(", "n", ",", "d", "-", "1", ")", ")", "\n", "lambdas", "=", "np", ".", "zeros", "(", "(", "n", ",", "d", "-", "1", ")", ")", "\n", "betas", "=", "np", ".", "zeros", "(", "(", "n", ",", "d", "-", "1", ")", ")", "\n", "\n", "for", "t", ",", "result", "in", "enumerate", "(", "all_results", ")", ":", "\n", "# lnr_costs[t, :] = result['lnr_costs']", "\n", "# opt_costs[t, :] = result['opt_costs']", "\n", "        ", "lnr_costs", "[", "t", ",", ":", "]", "=", "np", ".", "cumsum", "(", "result", "[", "'lnr_costs'", "]", ")", "/", "(", "np", ".", "arange", "(", "d", ")", "+", "1", ")", "\n", "opt_costs", "[", "t", ",", ":", "]", "=", "np", ".", "cumsum", "(", "result", "[", "'opt_costs'", "]", ")", "/", "(", "np", ".", "arange", "(", "d", ")", "+", "1", ")", "\n", "rewards", "[", "t", ",", ":", "]", "=", "result", "[", "'rewards'", "]", "\n", "sup_rewards", "[", "t", ",", ":", "]", "=", "result", "[", "'sup_rewards'", "]", "\n", "\n", "variations", "[", "t", ",", ":", "]", "=", "result", "[", "'variations'", "]", "\n", "opt_variations", "[", "t", ",", ":", "]", "=", "result", "[", "'opt_variations'", "]", "\n", "lambdas", "[", "t", ",", ":", "]", "=", "result", "[", "'lambdas'", "]", "\n", "betas", "[", "t", ",", ":", "]", "=", "result", "[", "'betas'", "]", "\n", "\n", "static_regret", "[", "t", ",", ":", "]", "=", "result", "[", "'static_regret'", "]", "\n", "\n", "\n", "", "diff_costs", "=", "lnr_costs", "-", "opt_costs", "\n", "\n", "lnr_mean", ",", "lnr_std", "=", "statistics", ".", "mean_sem", "(", "lnr_costs", ")", "\n", "opt_mean", ",", "opt_std", "=", "statistics", ".", "mean_sem", "(", "opt_costs", ")", "\n", "diff_mean", ",", "diff_std", "=", "statistics", ".", "mean_sem", "(", "diff_costs", ")", "\n", "sr_mean", ",", "sr_std", "=", "statistics", ".", "mean_sem", "(", "static_regret", ")", "\n", "\n", "var_mean", ",", "var_std", "=", "statistics", ".", "mean_sem", "(", "variations", ")", "\n", "opt_var_mean", ",", "opt_var_std", "=", "statistics", ".", "mean_sem", "(", "opt_variations", ")", "\n", "lam_mean", ",", "lam_std", "=", "statistics", ".", "mean_sem", "(", "lambdas", ")", "\n", "beta_mean", ",", "beta_std", "=", "statistics", ".", "mean_sem", "(", "betas", ")", "\n", "\n", "reward_mean", ",", "reward_std", "=", "statistics", ".", "mean_sem", "(", "rewards", ")", "\n", "sup_reward_mean", ",", "sup_reward_std", "=", "statistics", ".", "mean_sem", "(", "sup_rewards", ")", "\n", "\n", "x_axis", "=", "np", ".", "arange", "(", "len", "(", "lnr_mean", ")", ")", "\n", "\n", "results", "=", "{", "\n", "\"dyn_regret\"", ":", "(", "diff_mean", ",", "diff_std", ")", ",", "\n", "\"static_regret\"", ":", "(", "sr_mean", ",", "sr_std", ")", ",", "\n", "\"reward\"", ":", "(", "reward_mean", ",", "reward_std", ")", ",", "\n", "\"sup_reward\"", ":", "(", "sup_reward_mean", ",", "sup_reward_std", ")", ",", "\n", "\"var\"", ":", "(", "var_mean", ",", "var_std", ")", ",", "\n", "\"opt_var\"", ":", "(", "opt_var_mean", ",", "opt_var_std", ")", ",", "\n", "\"lam\"", ":", "(", "lam_mean", ",", "lam_std", ")", ",", "\n", "'beta'", ":", "(", "beta_mean", ",", "beta_std", ")", "\n", "}", "\n", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.jon--lee_aor.exp_mujoco.analyze_walker.plot_results": [[79, 114], ["matplotlib.subplot", "matplotlib.title", "matplotlib.ylim", "matplotlib.tight_layout", "matplotlib.legend", "matplotlib.ylabel", "matplotlib.subplot", "matplotlib.title", "matplotlib.errorbar", "matplotlib.ylabel", "matplotlib.tight_layout", "matplotlib.legend", "matplotlib.ylim", "numpy.arange", "matplotlib.errorbar", "matplotlib.errorbar", "matplotlib.xlabel", "matplotlib.errorbar", "matplotlib.xlabel", "len", "p[].get_color"], "function", ["None"], ["", "def", "plot_results", "(", "all_results", ",", "i", ")", ":", "\n", "\n", "    ", "plt", ".", "subplot", "(", "2", ",", "2", ",", "1", "+", "i", "*", "2", ")", "\n", "plt", ".", "title", "(", "all_results", "[", "0", "]", "[", "'title'", "]", "+", "\": Regret Rates\"", ",", "fontsize", "=", "22", ")", "\n", "for", "results", "in", "all_results", ":", "\n", "        ", "sr_mean", ",", "sr_std", "=", "results", "[", "'static_regret'", "]", "\n", "diff_mean", ",", "diff_std", "=", "results", "[", "'dyn_regret'", "]", "\n", "x_axis", "=", "np", ".", "arange", "(", "len", "(", "sr_mean", ")", ")", "\n", "p", "=", "plt", ".", "errorbar", "(", "x_axis", ",", "sr_mean", ",", "yerr", "=", "sr_std", ",", "label", "=", "results", "[", "'label'", "]", "+", "': Static Regret'", ",", "linestyle", "=", "'--'", ")", "\n", "plt", ".", "errorbar", "(", "x_axis", ",", "diff_mean", ",", "yerr", "=", "diff_std", ",", "label", "=", "results", "[", "'label'", "]", "+", "': Dynamic Regret'", ",", "color", "=", "p", "[", "0", "]", ".", "get_color", "(", ")", ")", "\n", "", "plt", ".", "ylim", "(", "-", "3", ",", "20", ")", "\n", "plt", ".", "tight_layout", "(", ")", "\n", "plt", ".", "legend", "(", "fontsize", "=", "18", ",", "loc", "=", "'upper right'", ")", "\n", "if", "i", "==", "1", ":", "\n", "        ", "plt", ".", "xlabel", "(", "'Iterations'", ",", "fontsize", "=", "20", ")", "\n", "\n", "", "plt", ".", "ylabel", "(", "'Regret'", ",", "fontsize", "=", "20", ")", "\n", "# plt.ylim(0, 1)", "\n", "\n", "\n", "\n", "plt", ".", "subplot", "(", "2", ",", "2", ",", "i", "*", "2", "+", "2", ")", "\n", "plt", ".", "title", "(", "all_results", "[", "0", "]", "[", "'title'", "]", "+", "\": Distance Traveled\"", ",", "fontsize", "=", "22", ")", "\n", "for", "results", "in", "all_results", ":", "\n", "        ", "sup_reward_mean", ",", "reward_std", "=", "results", "[", "'sup_reward'", "]", "\n", "reward_mean", ",", "sup_reward_std", "=", "results", "[", "'reward'", "]", "\n", "p", "=", "plt", ".", "errorbar", "(", "x_axis", ",", "reward_mean", ",", "yerr", "=", "reward_std", ",", "label", "=", "results", "[", "'label'", "]", ")", "\n", "", "plt", ".", "errorbar", "(", "x_axis", ",", "sup_reward_mean", ",", "yerr", "=", "sup_reward_std", ",", "label", "=", "'Supervisor Cost'", ",", "linestyle", "=", "'--'", ",", "color", "=", "\"green\"", ")", "\n", "plt", ".", "ylabel", "(", "'Distance Traveled'", ",", "fontsize", "=", "20", ")", "\n", "\n", "if", "i", "==", "1", ":", "\n", "        ", "plt", ".", "xlabel", "(", "'Iterations'", ",", "fontsize", "=", "20", ")", "\n", "", "plt", ".", "tight_layout", "(", ")", "\n", "plt", ".", "legend", "(", "fontsize", "=", "20", ",", "loc", "=", "'upper right'", ")", "\n", "plt", ".", "ylim", "(", "-", "200", ",", "600", ")", "\n", "# plt.show()", "\n"]], "home.repos.pwc.inspect_result.jon--lee_aor.exp_mujoco.mj_dagger.MujocoDagger.__init__": [[19, 48], ["list", "tensorflow.Session", "expert.load_policy.load_policy", "os.path.join", "os.path.join", "numpy.ones", "str", "str", "str", "str", "str"], "methods", ["home.repos.pwc.inspect_result.jon--lee_aor.expert.load_policy.load_policy"], ["    ", "def", "__init__", "(", "self", ",", "param", ",", "force_mag", ",", "envname", ",", "reg", ")", ":", "\n", "        ", "self", ".", "reg", "=", "reg", "\n", "self", ".", "iters", "=", "300", "\n", "self", ".", "T", "=", "200", "\n", "self", ".", "trials", "=", "1", "\n", "\n", "self", ".", "alpha", "=", "1.0", "\n", "self", ".", "lambda_prior", "=", "list", "(", "np", ".", "ones", "(", "10", ")", ")", "\n", "self", ".", "t", "=", ".1", "\n", "\n", "\n", "self", ".", "eta", "=", "1.0", "# does not matter for dagger", "\n", "self", ".", "inner_eta", "=", "self", ".", "eta", "\n", "self", ".", "params", "=", "{", "}", "\n", "self", ".", "params", "[", "'T'", "]", "=", "self", ".", "T", "\n", "self", ".", "params", "[", "'iters'", "]", "=", "self", ".", "iters", "\n", "\n", "self", ".", "sess", "=", "tf", ".", "Session", "(", ")", "\n", "self", ".", "policy", "=", "load_policy", ".", "load_policy", "(", "envname", "+", "\"-v1.pkl\"", ")", "\n", "\n", "self", ".", "base_dir", "=", "\"data/mujoco/\"", "+", "str", "(", "envname", ")", "+", "\"/\"", "\n", "if", "self", ".", "reg", ":", "self", ".", "base_dir", "=", "self", ".", "base_dir", "+", "'reg_other_frame_skip'", "+", "str", "(", "param", ")", "+", "\"_force_mag\"", "+", "str", "(", "force_mag", ")", "\n", "else", ":", "self", ".", "base_dir", "=", "self", ".", "base_dir", "+", "'other_frame_skip'", "+", "str", "(", "param", ")", "+", "\"_force_mag\"", "+", "str", "(", "force_mag", ")", "\n", "self", ".", "dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "base_dir", ",", "'dagger'", ")", "\n", "self", ".", "prefix", "=", "'dagger'", "\n", "self", ".", "path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "dir", ",", "self", ".", "prefix", ")", "\n", "self", ".", "param", "=", "param", "\n", "self", ".", "force_mag", "=", "force_mag", "\n", "self", ".", "envname", "=", "envname", "\n", "\n"]], "home.repos.pwc.inspect_result.jon--lee_aor.exp_mujoco.mj_dagger.MujocoDagger.prologue": [[49, 64], ["gym.envs.make", "tools.supervisor.Supervisor2", "tools.learner.Learner", "print", "print", "tools.lr.LR", "print", "print", "str", "str", "str", "str"], "methods", ["None"], ["", "def", "prologue", "(", "self", ")", ":", "\n", "        ", "self", ".", "env", "=", "gym", ".", "envs", ".", "make", "(", "self", ".", "envname", "+", "'-v2'", ")", "\n", "self", ".", "sup", "=", "Supervisor2", "(", "self", ".", "policy", ",", "self", ".", "sess", ")", "\n", "p", "=", "self", ".", "env", ".", "env", ".", "action_space", ".", "shape", "[", "0", "]", "\n", "self", ".", "lnr", "=", "Learner", "(", "LR", "(", "self", ".", "alpha", ",", "self", ".", "eta", ",", "intercept", "=", "False", ",", "p", "=", "p", ")", ")", "\n", "self", ".", "alphas", "=", "[", "]", "\n", "\n", "print", "(", "\"Force mag: \"", "+", "str", "(", "self", ".", "env", ".", "env", ".", "force_mag", ")", ")", "\n", "self", ".", "env", ".", "env", ".", "force_mag", "=", "self", ".", "force_mag", "\n", "print", "(", "\"New force mag: \"", "+", "str", "(", "self", ".", "env", ".", "env", ".", "force_mag", ")", ")", "\n", "\n", "if", "self", ".", "param", "is", "not", "None", ":", "\n", "            ", "print", "(", "\"Frame skip: \"", "+", "str", "(", "self", ".", "env", ".", "env", ".", "frame_skip", ")", ")", "\n", "self", ".", "env", ".", "env", ".", "frame_skip", "=", "self", ".", "param", "\n", "print", "(", "\"New frame skip: \"", "+", "str", "(", "self", ".", "env", ".", "env", ".", "frame_skip", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jon--lee_aor.exp_mujoco.mj_dagger.MujocoDagger.compute_statistics": [[66, 141], ["mj_dagger.MujocoDagger.alphas.append", "tools.statistics.collect_traj", "tools.lr.LR", "tools.lr.LR.fit", "mj_dagger.MujocoDagger.lnr.est.loss", "tools.lr.LR.loss", "print", "print", "results[].append", "results[].append", "results[].append", "results[].append", "mj_dagger.MujocoDagger.lnr.est.coef_.copy", "tools.lr.LR.coef_.copy", "results[].append", "results[].append", "mj_dagger.MujocoDagger.copy", "tools.lr.LR.coef_.copy.copy", "tools.lr.LR", "tools.lr.LR.fit", "tools.lr.LR.loss", "numpy.mean", "print", "print", "print", "results[].append", "results[].append", "results[].append", "mj_dagger.MujocoDagger.sup.intended_action", "numpy.linalg.norm", "numpy.linalg.norm", "numpy.linalg.norm", "numpy.linalg.norm", "tools.lr.LR.gradient", "tools.lr.LR.gradient", "results[].append", "results[].append", "results[].append", "results[].append", "numpy.mean", "str", "str", "numpy.linalg.norm", "str", "str"], "methods", ["home.repos.pwc.inspect_result.jon--lee_aor.tools.statistics.collect_traj", "home.repos.pwc.inspect_result.jon--lee_aor.tools.lr.LR.fit", "home.repos.pwc.inspect_result.jon--lee_aor.tools.lr.LR.loss", "home.repos.pwc.inspect_result.jon--lee_aor.tools.lr.LR.loss", "home.repos.pwc.inspect_result.jon--lee_aor.tools.lr.LR.fit", "home.repos.pwc.inspect_result.jon--lee_aor.tools.lr.LR.loss", "home.repos.pwc.inspect_result.jon--lee_aor.expert.tf_util.mean", "home.repos.pwc.inspect_result.jon--lee_aor.tools.learner.Learner.intended_action", "home.repos.pwc.inspect_result.jon--lee_aor.tools.lr.LR.gradient", "home.repos.pwc.inspect_result.jon--lee_aor.tools.lr.LR.gradient", "home.repos.pwc.inspect_result.jon--lee_aor.expert.tf_util.mean"], ["", "", "def", "compute_statistics", "(", "self", ",", "iteration", ",", "results", ")", ":", "\n", "        ", "self", ".", "alphas", ".", "append", "(", "self", ".", "lnr", ".", "est", ".", "alpha", ")", "\n", "states", ",", "tmp_actions", ",", "_", ",", "reward", "=", "statistics", ".", "collect_traj", "(", "self", ".", "env", ",", "self", ".", "lnr", ",", "self", ".", "params", "[", "'T'", "]", ",", "False", ")", "\n", "actions", "=", "[", "self", ".", "sup", ".", "intended_action", "(", "s", ")", "for", "s", "in", "states", "]", "\n", "d", "=", "self", ".", "env", ".", "observation_space", ".", "shape", "[", "0", "]", "\n", "\n", "\n", "est", "=", "LR", "(", "self", ".", "lnr", ".", "est", ".", "alpha", ",", "self", ".", "inner_eta", ",", "intercept", "=", "False", ")", "\n", "lh", ",", "ph", "=", "est", ".", "fit", "(", "states", ",", "actions", ")", "\n", "\n", "lnr_cost", "=", "self", ".", "lnr", ".", "est", ".", "loss", "(", "states", ",", "actions", ")", "\n", "opt_cost", "=", "est", ".", "loss", "(", "states", ",", "actions", ")", "\n", "\n", "# if lnr_cost < opt_cost:", "\n", "#     IPython.embed()", "\n", "\n", "print", "(", "\"\\tlnr_cost: \"", "+", "str", "(", "lnr_cost", ")", ")", "\n", "print", "(", "\"\\topt_cost: \"", "+", "str", "(", "opt_cost", ")", ")", "\n", "\n", "\n", "results", "[", "'lnr_costs'", "]", ".", "append", "(", "lnr_cost", ")", "\n", "results", "[", "'opt_costs'", "]", ".", "append", "(", "opt_cost", ")", "\n", "results", "[", "'rewards'", "]", ".", "append", "(", "reward", ")", "\n", "results", "[", "'alphas'", "]", ".", "append", "(", "self", ".", "lnr", ".", "est", ".", "alpha", ")", "\n", "\n", "curr_coef_", "=", "self", ".", "lnr", ".", "est", ".", "coef_", ".", "copy", "(", ")", "\n", "curr_opt_coef_", "=", "est", ".", "coef_", ".", "copy", "(", ")", "\n", "\n", "results", "[", "'param_norms'", "]", ".", "append", "(", "np", ".", "linalg", ".", "norm", "(", "curr_coef_", ")", ")", "\n", "results", "[", "'opt_param_norms'", "]", ".", "append", "(", "np", ".", "linalg", ".", "norm", "(", "curr_opt_coef_", ")", ")", "\n", "\n", "if", "not", "iteration", "is", "0", ":", "\n", "\n", "            ", "variation", "=", "np", ".", "linalg", ".", "norm", "(", "self", ".", "last_coef_", "-", "curr_coef_", ")", "\n", "opt_variation", "=", "np", ".", "linalg", ".", "norm", "(", "self", ".", "last_opt_coef_", "-", "curr_opt_coef_", ")", "\n", "\n", "last_gradient", "=", "est", ".", "gradient", "(", "self", ".", "last_states", ",", "self", ".", "last_actions", ",", "curr_coef_", ")", "\n", "curr_gradient", "=", "est", ".", "gradient", "(", "states", ",", "actions", ",", "curr_coef_", ")", "\n", "beta", "=", "np", ".", "linalg", ".", "norm", "(", "last_gradient", "-", "curr_gradient", ")", "/", "variation", "\n", "\n", "results", "[", "'variations'", "]", ".", "append", "(", "variation", ")", "\n", "results", "[", "'opt_variations'", "]", ".", "append", "(", "opt_variation", ")", "\n", "results", "[", "'lambdas'", "]", ".", "append", "(", "opt_variation", "/", "variation", ")", "\n", "results", "[", "'betas'", "]", ".", "append", "(", "beta", ")", "\n", "\n", "\n", "\n", "", "self", ".", "last_coef_", "=", "curr_coef_", ".", "copy", "(", ")", "\n", "self", ".", "last_opt_coef_", "=", "curr_opt_coef_", ".", "copy", "(", ")", "\n", "self", ".", "last_states", "=", "states", "\n", "self", ".", "last_actions", "=", "actions", "\n", "\n", "# static_est = LR(self.lnr.est.alpha, self.inner_eta, intercept=False)", "\n", "static_est", "=", "LR", "(", "np", ".", "mean", "(", "self", ".", "alphas", ")", ",", "self", ".", "inner_eta", ",", "intercept", "=", "False", ")", "\n", "batch_states", "=", "self", ".", "data_states", "+", "states", "\n", "batch_actions", "=", "self", ".", "data_actions", "+", "actions", "\n", "\n", "lh_batch", ",", "ph_batch", "=", "static_est", ".", "fit", "(", "batch_states", ",", "batch_actions", ")", "\n", "opt_batch_cost", "=", "static_est", ".", "loss", "(", "batch_states", ",", "batch_actions", ")", "\n", "lnr_batch_cost", "=", "np", ".", "mean", "(", "results", "[", "'lnr_costs'", "]", ")", "\n", "static_regret", "=", "lnr_batch_cost", "-", "opt_batch_cost", "\n", "\n", "# if lnr_batch_cost < opt_batch_cost:", "\n", "#     IPython.embed()", "\n", "\n", "print", "(", "\"\\tlnr_batch_cost: \"", "+", "str", "(", "lnr_batch_cost", ")", ")", "\n", "print", "(", "\"\\topt_batch_cost: \"", "+", "str", "(", "opt_batch_cost", ")", ")", "\n", "print", "(", ")", "\n", "\n", "results", "[", "'lnr_batch_costs'", "]", ".", "append", "(", "lnr_batch_cost", ")", "\n", "results", "[", "'opt_batch_costs'", "]", ".", "append", "(", "opt_batch_cost", ")", "\n", "results", "[", "'static_regret'", "]", ".", "append", "(", "static_regret", ")", "\n", "\n", "\n", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.jon--lee_aor.exp_mujoco.mj_dagger.MujocoDagger.run_iters": [[143, 214], ["range", "results.keys", "IPython.embed", "mj_dagger.MujocoDagger.compute_results", "print", "mj_dagger.MujocoDagger.compute_statistics", "tools.statistics.collect_traj", "mj_dagger.MujocoDagger.lnr.set_data", "mj_dagger.MujocoDagger.lnr.train", "numpy.array", "mj_dagger.MujocoDagger.sup.intended_action", "numpy.mean", "numpy.mean", "print", "print", "print", "str", "numpy.array", "numpy.array", "str", "str", "str"], "methods", ["home.repos.pwc.inspect_result.jon--lee_aor.exp_mujoco.mj_dagger.MujocoDagger.compute_results", "home.repos.pwc.inspect_result.jon--lee_aor.exp_mujoco.mj_dagger.MujocoDagger.compute_statistics", "home.repos.pwc.inspect_result.jon--lee_aor.tools.statistics.collect_traj", "home.repos.pwc.inspect_result.jon--lee_aor.tools.learner.Learner.set_data", "home.repos.pwc.inspect_result.jon--lee_aor.tools.learner.Learner.train", "home.repos.pwc.inspect_result.jon--lee_aor.tools.learner.Learner.intended_action", "home.repos.pwc.inspect_result.jon--lee_aor.expert.tf_util.mean", "home.repos.pwc.inspect_result.jon--lee_aor.expert.tf_util.mean"], ["", "def", "run_iters", "(", "self", ")", ":", "\n", "\n", "        ", "results", "=", "{", "\n", "'lnr_costs'", ":", "[", "]", ",", "\n", "'opt_costs'", ":", "[", "]", ",", "\n", "'variations'", ":", "[", "]", ",", "\n", "'opt_variations'", ":", "[", "]", ",", "\n", "'param_norms'", ":", "[", "]", ",", "\n", "'opt_param_norms'", ":", "[", "]", ",", "\n", "'lambdas'", ":", "[", "]", ",", "\n", "'lnr_batch_costs'", ":", "[", "]", ",", "\n", "'opt_batch_costs'", ":", "[", "]", ",", "\n", "'static_regret'", ":", "[", "]", ",", "\n", "'rewards'", ":", "[", "]", ",", "\n", "'betas'", ":", "[", "]", ",", "\n", "'alphas'", ":", "[", "]", ",", "\n", "\n", "}", "\n", "\n", "\n", "d", "=", "self", ".", "env", ".", "observation_space", ".", "shape", "[", "0", "]", "\n", "# self.data_states = [np.zeros(d), np.zeros(d)]", "\n", "# self.data_actions = [1, 0]", "\n", "self", ".", "data_states", "=", "[", "]", "\n", "self", ".", "data_actions", "=", "[", "]", "\n", "\n", "for", "iteration", "in", "range", "(", "self", ".", "iters", ")", ":", "\n", "            ", "print", "(", "\"\\tIteration: \"", "+", "str", "(", "iteration", ")", ")", "\n", "# print(\"\\tData states: \" + str(len(self.data_states)))", "\n", "# if len(self.data_states) > 0:", "\n", "#     X = np.array(states)", "\n", "#     y = np.array(tmp_actions)", "\n", "#     print(\"\\t Coef norm: \" + str( np.linalg.norm(self.lnr.est.coef_) / (X.shape[1] * y.shape[1]) ))", "\n", "\n", "self", ".", "compute_statistics", "(", "iteration", ",", "results", ")", "\n", "\n", "states", ",", "tmp_actions", ",", "_", ",", "_", "=", "statistics", ".", "collect_traj", "(", "self", ".", "env", ",", "self", ".", "lnr", ",", "self", ".", "params", "[", "'T'", "]", ",", "False", ")", "\n", "i_actions", "=", "[", "self", ".", "sup", ".", "intended_action", "(", "s", ")", "for", "s", "in", "states", "]", "\n", "\n", "\n", "self", ".", "data_states", "+=", "states", "\n", "self", ".", "data_actions", "+=", "i_actions", "\n", "\n", "self", ".", "lnr", ".", "set_data", "(", "self", ".", "data_states", ",", "self", ".", "data_actions", ")", "\n", "self", ".", "lnr", ".", "train", "(", ")", "\n", "\n", "\n", "# Adaptive regularization:", "\n", "if", "self", ".", "reg", "and", "(", "iteration", "+", "1", ")", "%", "10", "==", "0", ":", "\n", "                ", "mean_lambda", "=", "np", ".", "mean", "(", "results", "[", "'lambdas'", "]", "[", "-", "10", ":", "]", "+", "self", ".", "lambda_prior", ")", "\n", "\n", "mean_ratio", "=", "np", ".", "mean", "(", "np", ".", "array", "(", "results", "[", "'opt_costs'", "]", "[", "-", "10", ":", "]", ")", "/", "np", ".", "array", "(", "results", "[", "'lnr_costs'", "]", "[", "-", "10", ":", "]", ")", ")", "\n", "\n", "if", "mean_ratio", "<", ".98", ":", "\n", "                    ", "next_alpha", "=", "mean_lambda", "*", "self", ".", "lnr", ".", "est", ".", "alpha", "\n", "# self.lnr.est.alpha = (1 - mean_ratio) * next_alpha + mean_ratio * self.lnr.est.alpha", "\n", "self", ".", "lnr", ".", "est", ".", "alpha", "=", "self", ".", "t", "*", "next_alpha", "+", "(", "1", "-", "self", ".", "t", ")", "*", "self", ".", "lnr", ".", "est", ".", "alpha", "\n", "\n", "", "print", "(", "\"\\n\\n\\t\\t Updated alpha: \"", "+", "str", "(", "self", ".", "lnr", ".", "est", ".", "alpha", ")", ")", "\n", "print", "(", "\"\\t\\t Mean ratio: \"", "+", "str", "(", "mean_ratio", ")", ")", "\n", "print", "(", "\"\\t\\t Lambda was: \"", "+", "str", "(", "mean_lambda", ")", ")", "\n", "\n", "\n", "\n", "", "", "for", "key", "in", "results", ".", "keys", "(", ")", ":", "\n", "            ", "results", "[", "key", "]", "=", "np", ".", "array", "(", "results", "[", "key", "]", ")", "\n", "\n", "", "IPython", ".", "embed", "(", ")", "\n", "self", ".", "compute_results", "(", "results", ")", "\n", "\n", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.jon--lee_aor.exp_mujoco.mj_dagger.MujocoDagger.compute_results": [[216, 276], ["tools.statistics.collect_traj", "matplotlib.subplot", "matplotlib.title", "matplotlib.plot", "matplotlib.plot", "matplotlib.legend", "matplotlib.subplot", "matplotlib.title", "matplotlib.plot", "matplotlib.tight_layout", "matplotlib.savefig", "matplotlib.close", "matplotlib.cla", "matplotlib.clf", "matplotlib.subplot", "matplotlib.title", "matplotlib.plot", "matplotlib.plot", "matplotlib.legend", "matplotlib.subplot", "matplotlib.title", "matplotlib.plot", "matplotlib.tight_layout", "matplotlib.savefig", "matplotlib.close", "matplotlib.cla", "matplotlib.clf", "matplotlib.subplot", "matplotlib.title", "matplotlib.plot", "matplotlib.plot", "matplotlib.legend", "matplotlib.savefig", "matplotlib.close", "matplotlib.cla", "matplotlib.clf", "open", "pickle.dump", "open.close", "len"], "methods", ["home.repos.pwc.inspect_result.jon--lee_aor.tools.statistics.collect_traj"], ["", "def", "compute_results", "(", "self", ",", "results", ")", ":", "\n", "        ", "_", ",", "_", ",", "_", ",", "sup_reward", "=", "statistics", ".", "collect_traj", "(", "self", ".", "env", ",", "self", ".", "sup", ",", "self", ".", "params", "[", "'T'", "]", ",", "False", ")", "\n", "results", "[", "'sup_rewards'", "]", "=", "[", "sup_reward", "]", "*", "len", "(", "results", "[", "'rewards'", "]", ")", "\n", "\n", "# DYNAMIC REGRET", "\n", "plt", ".", "subplot", "(", "211", ")", "\n", "plt", ".", "title", "(", "\"Actual loss\"", ")", "\n", "plt", ".", "plot", "(", "results", "[", "'lnr_costs'", "]", ",", "label", "=", "'lnr costs'", ")", "\n", "plt", ".", "plot", "(", "results", "[", "'opt_costs'", "]", ",", "label", "=", "'opt costs'", ")", "\n", "plt", ".", "legend", "(", ")", "\n", "\n", "\n", "difference", "=", "results", "[", "'lnr_costs'", "]", "-", "results", "[", "'opt_costs'", "]", "\n", "plt", ".", "subplot", "(", "212", ")", "\n", "plt", ".", "title", "(", "\"Difference\"", ")", "\n", "plt", ".", "plot", "(", "difference", ")", "\n", "plt", ".", "tight_layout", "(", ")", "\n", "\n", "filepath", "=", "self", ".", "path", "+", "'.pdf'", "\n", "plt", ".", "savefig", "(", "filepath", ")", "\n", "plt", ".", "close", "(", ")", "\n", "plt", ".", "cla", "(", ")", "\n", "plt", ".", "clf", "(", ")", "\n", "\n", "# STATIC REGRET ", "\n", "plt", ".", "subplot", "(", "211", ")", "\n", "plt", ".", "title", "(", "\"Batch costs\"", ")", "\n", "plt", ".", "plot", "(", "results", "[", "'lnr_batch_costs'", "]", ",", "label", "=", "'lnr costs'", ")", "\n", "plt", ".", "plot", "(", "results", "[", "'opt_batch_costs'", "]", ",", "label", "=", "'opt costs'", ")", "\n", "plt", ".", "legend", "(", ")", "\n", "\n", "\n", "plt", ".", "subplot", "(", "212", ")", "\n", "plt", ".", "title", "(", "\"Static regret (lnr batch - opt batch)\"", ")", "\n", "plt", ".", "plot", "(", "results", "[", "'static_regret'", "]", ")", "\n", "plt", ".", "tight_layout", "(", ")", "\n", "\n", "filepath", "=", "self", ".", "path", "+", "'_batch.pdf'", "\n", "plt", ".", "savefig", "(", "filepath", ")", "\n", "plt", ".", "close", "(", ")", "\n", "plt", ".", "cla", "(", ")", "\n", "plt", ".", "clf", "(", ")", "\n", "\n", "\n", "plt", ".", "subplot", "(", "111", ")", "\n", "plt", ".", "title", "(", "\"Rewards\"", ")", "\n", "plt", ".", "plot", "(", "results", "[", "'rewards'", "]", ",", "label", "=", "'Learner rewards'", ")", "\n", "plt", ".", "plot", "(", "results", "[", "'sup_rewards'", "]", ",", "label", "=", "'Supervisor Rewards'", ")", "\n", "plt", ".", "legend", "(", ")", "\n", "filepath", "=", "self", ".", "path", "+", "'_reward.pdf'", "\n", "plt", ".", "savefig", "(", "filepath", ")", "\n", "plt", ".", "close", "(", ")", "\n", "plt", ".", "cla", "(", ")", "\n", "plt", ".", "clf", "(", ")", "\n", "\n", "\n", "filepath", "=", "self", ".", "path", "+", "'.p'", "\n", "f", "=", "open", "(", "filepath", ",", "'wb'", ")", "\n", "pickle", ".", "dump", "(", "results", ",", "f", ")", "\n", "f", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jon--lee_aor.exp_mujoco.mj_dagger.MujocoDagger.run_trials": [[280, 307], ["time.time", "range", "mj_dagger.MujocoDagger.aggregate", "open", "pickle.dump", "open.close", "time.time", "print", "os.path.exists", "os.makedirs", "mj_dagger.MujocoDagger.prologue", "mj_dagger.MujocoDagger.run_iters", "all_results.append", "os.path.join", "str", "str", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.jon--lee_aor.exp_mujoco.analyze_hopper_static.aggregate", "home.repos.pwc.inspect_result.jon--lee_aor.exp_mujoco.mj_dagger.MujocoDagger.prologue", "home.repos.pwc.inspect_result.jon--lee_aor.exp_mujoco.mj_dagger.MujocoDagger.run_iters"], ["", "def", "run_trials", "(", "self", ")", ":", "\n", "        ", "self", ".", "start_time", "=", "timer", ".", "time", "(", ")", "\n", "all_results", "=", "[", "]", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "dir", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "self", ".", "dir", ")", "\n", "\n", "# TEsting", "\n", "# end testing", "\n", "\n", "", "for", "trial", "in", "range", "(", "self", ".", "trials", ")", ":", "\n", "            ", "self", ".", "prologue", "(", ")", "\n", "self", ".", "path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "dir", ",", "self", ".", "prefix", ")", "+", "'_trial'", "+", "str", "(", "trial", ")", "\n", "results", "=", "self", ".", "run_iters", "(", ")", "\n", "all_results", ".", "append", "(", "results", ")", "\n", "\n", "\n", "", "self", ".", "aggregate", "(", "all_results", ")", "\n", "\n", "filepath", "=", "os", ".", "path", ".", "join", "(", "self", ".", "dir", ",", "self", ".", "prefix", ")", "+", "'.p'", "\n", "f", "=", "open", "(", "filepath", ",", "'wb'", ")", "\n", "pickle", ".", "dump", "(", "all_results", ",", "f", ")", "\n", "f", ".", "close", "(", ")", "\n", "\n", "self", ".", "end_time", "=", "timer", ".", "time", "(", ")", "\n", "print", "(", "\"Total time: \"", "+", "str", "(", "self", ".", "end_time", "-", "self", ".", "start_time", ")", ")", "\n", "\n", "return", "all_results", "\n", "\n"]], "home.repos.pwc.inspect_result.jon--lee_aor.exp_mujoco.mj_dagger.main": [[308, 322], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "vars", "mj_dagger.MujocoDagger", "mj_dagger.MujocoDagger.run_trials", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.jon--lee_aor.exp_mujoco.mj_dagger.MujocoDagger.run_trials"], ["", "", "def", "main", "(", ")", ":", "\n", "    ", "ap", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "ap", ".", "add_argument", "(", "'--frame_skip'", ",", "type", "=", "int", ",", "required", "=", "False", ",", "default", "=", "None", ")", "\n", "ap", ".", "add_argument", "(", "'--env'", ",", "type", "=", "str", ",", "required", "=", "True", ")", "\n", "ap", ".", "add_argument", "(", "'--force_mag'", ",", "type", "=", "float", ",", "required", "=", "False", ",", "default", "=", "1.0", ")", "\n", "ap", ".", "add_argument", "(", "'--reg'", ",", "action", "=", "'store_true'", ")", "\n", "args", "=", "vars", "(", "ap", ".", "parse_args", "(", ")", ")", "\n", "param", "=", "args", "[", "'frame_skip'", "]", "\n", "envname", "=", "args", "[", "'env'", "]", "\n", "force_mag", "=", "args", "[", "'force_mag'", "]", "\n", "reg", "=", "args", "[", "'reg'", "]", "\n", "\n", "test", "=", "MujocoDagger", "(", "param", ",", "force_mag", ",", "envname", ",", "reg", ")", "\n", "results", "=", "test", ".", "run_trials", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jon--lee_aor.exp_mujoco.analyze_walker_alpha.aggregate": [[13, 82], ["open", "pickle.load", "open.close", "len", "len", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "enumerate", "tools.statistics.mean_sem", "tools.statistics.mean_sem", "tools.statistics.mean_sem", "tools.statistics.mean_sem", "tools.statistics.mean_sem", "tools.statistics.mean_sem", "tools.statistics.mean_sem", "tools.statistics.mean_sem", "tools.statistics.mean_sem", "tools.statistics.mean_sem", "tools.statistics.mean_sem", "tools.statistics.mean_sem", "numpy.arange", "len"], "function", ["home.repos.pwc.inspect_result.jon--lee_aor.tools.statistics.mean_sem", "home.repos.pwc.inspect_result.jon--lee_aor.tools.statistics.mean_sem", "home.repos.pwc.inspect_result.jon--lee_aor.tools.statistics.mean_sem", "home.repos.pwc.inspect_result.jon--lee_aor.tools.statistics.mean_sem", "home.repos.pwc.inspect_result.jon--lee_aor.tools.statistics.mean_sem", "home.repos.pwc.inspect_result.jon--lee_aor.tools.statistics.mean_sem", "home.repos.pwc.inspect_result.jon--lee_aor.tools.statistics.mean_sem", "home.repos.pwc.inspect_result.jon--lee_aor.tools.statistics.mean_sem", "home.repos.pwc.inspect_result.jon--lee_aor.tools.statistics.mean_sem", "home.repos.pwc.inspect_result.jon--lee_aor.tools.statistics.mean_sem", "home.repos.pwc.inspect_result.jon--lee_aor.tools.statistics.mean_sem", "home.repos.pwc.inspect_result.jon--lee_aor.tools.statistics.mean_sem"], ["def", "aggregate", "(", "filepath", ")", ":", "\n", "    ", "f", "=", "open", "(", "filepath", ",", "'rb'", ")", "\n", "all_results", "=", "pickle", ".", "load", "(", "f", ")", "\n", "f", ".", "close", "(", ")", "\n", "\n", "n", "=", "len", "(", "all_results", ")", "\n", "d", "=", "len", "(", "all_results", "[", "0", "]", "[", "'lnr_costs'", "]", ")", "\n", "\n", "lnr_costs", "=", "np", ".", "zeros", "(", "(", "n", ",", "d", ")", ")", "\n", "opt_costs", "=", "np", ".", "zeros", "(", "(", "n", ",", "d", ")", ")", "\n", "diff_costs", "=", "np", ".", "zeros", "(", "(", "n", ",", "d", ")", ")", "\n", "static_regret", "=", "np", ".", "zeros", "(", "(", "n", ",", "d", ")", ")", "\n", "\n", "rewards", "=", "np", ".", "zeros", "(", "(", "n", ",", "d", ")", ")", "\n", "sup_rewards", "=", "np", ".", "zeros", "(", "(", "n", ",", "d", ")", ")", "\n", "variations", "=", "np", ".", "zeros", "(", "(", "n", ",", "d", "-", "1", ")", ")", "\n", "opt_variations", "=", "np", ".", "zeros", "(", "(", "n", ",", "d", "-", "1", ")", ")", "\n", "lambdas", "=", "np", ".", "zeros", "(", "(", "n", ",", "d", "-", "1", ")", ")", "\n", "betas", "=", "np", ".", "zeros", "(", "(", "n", ",", "d", "-", "1", ")", ")", "\n", "alphas", "=", "np", ".", "zeros", "(", "(", "n", ",", "d", ")", ")", "\n", "\n", "for", "t", ",", "result", "in", "enumerate", "(", "all_results", ")", ":", "\n", "        ", "lnr_costs", "[", "t", ",", ":", "]", "=", "result", "[", "'lnr_costs'", "]", "\n", "opt_costs", "[", "t", ",", ":", "]", "=", "result", "[", "'opt_costs'", "]", "\n", "# lnr_costs[t, :] = np.cumsum(result['lnr_costs']) / (np.arange(d) + 1)", "\n", "# opt_costs[t, :] = np.cumsum(result['opt_costs']) / (np.arange(d) + 1)", "\n", "rewards", "[", "t", ",", ":", "]", "=", "result", "[", "'rewards'", "]", "\n", "sup_rewards", "[", "t", ",", ":", "]", "=", "result", "[", "'sup_rewards'", "]", "\n", "\n", "variations", "[", "t", ",", ":", "]", "=", "result", "[", "'variations'", "]", "\n", "opt_variations", "[", "t", ",", ":", "]", "=", "result", "[", "'opt_variations'", "]", "\n", "lambdas", "[", "t", ",", ":", "]", "=", "result", "[", "'lambdas'", "]", "\n", "betas", "[", "t", ",", ":", "]", "=", "result", "[", "'betas'", "]", "\n", "alphas", "[", "t", ",", ":", "]", "=", "result", "[", "'alphas'", "]", "\n", "\n", "static_regret", "[", "t", ",", ":", "]", "=", "result", "[", "'static_regret'", "]", "\n", "\n", "", "diff_costs", "=", "lnr_costs", "-", "opt_costs", "\n", "\n", "lnr_mean", ",", "lnr_std", "=", "statistics", ".", "mean_sem", "(", "lnr_costs", ")", "\n", "opt_mean", ",", "opt_std", "=", "statistics", ".", "mean_sem", "(", "opt_costs", ")", "\n", "diff_mean", ",", "diff_std", "=", "statistics", ".", "mean_sem", "(", "diff_costs", ")", "\n", "sr_mean", ",", "sr_std", "=", "statistics", ".", "mean_sem", "(", "static_regret", ")", "\n", "\n", "var_mean", ",", "var_std", "=", "statistics", ".", "mean_sem", "(", "variations", ")", "\n", "opt_var_mean", ",", "opt_var_std", "=", "statistics", ".", "mean_sem", "(", "opt_variations", ")", "\n", "lam_mean", ",", "lam_std", "=", "statistics", ".", "mean_sem", "(", "lambdas", ")", "\n", "beta_mean", ",", "beta_std", "=", "statistics", ".", "mean_sem", "(", "betas", ")", "\n", "alpha_mean", ",", "alpha_std", "=", "statistics", ".", "mean_sem", "(", "alphas", ")", "\n", "alpha_alt_mean", ",", "alpha_alt_std", "=", "statistics", ".", "mean_sem", "(", "lambdas", "*", "betas", ")", "\n", "\n", "reward_mean", ",", "reward_std", "=", "statistics", ".", "mean_sem", "(", "rewards", ")", "\n", "sup_reward_mean", ",", "sup_reward_std", "=", "statistics", ".", "mean_sem", "(", "sup_rewards", ")", "\n", "\n", "x_axis", "=", "np", ".", "arange", "(", "len", "(", "lnr_mean", ")", ")", "\n", "\n", "results", "=", "{", "\n", "\"dyn_regret\"", ":", "(", "diff_mean", ",", "diff_std", ")", ",", "\n", "\"static_regret\"", ":", "(", "sr_mean", ",", "sr_std", ")", ",", "\n", "\"reward\"", ":", "(", "reward_mean", ",", "reward_std", ")", ",", "\n", "\"sup_reward\"", ":", "(", "sup_reward_mean", ",", "sup_reward_std", ")", ",", "\n", "\"var\"", ":", "(", "var_mean", ",", "var_std", ")", ",", "\n", "\"opt_var\"", ":", "(", "opt_var_mean", ",", "opt_var_std", ")", ",", "\n", "\"lam\"", ":", "(", "lam_mean", ",", "lam_std", ")", ",", "\n", "'beta'", ":", "(", "beta_mean", ",", "beta_std", ")", ",", "\n", "\"alpha\"", ":", "(", "alpha_mean", ",", "alpha_std", ")", ",", "\n", "\"alpha_alt\"", ":", "(", "alpha_alt_mean", ",", "alpha_alt_std", ")", ",", "\n", "}", "\n", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.jon--lee_aor.exp_mujoco.analyze_walker_alpha.plot_results": [[84, 96], ["matplotlib.title", "matplotlib.legend", "matplotlib.ylabel", "matplotlib.xlabel", "matplotlib.tight_layout", "numpy.arange", "matplotlib.errorbar", "len"], "function", ["None"], ["", "def", "plot_results", "(", "all_results", ")", ":", "\n", "\n", "\n", "    ", "plt", ".", "title", "(", "all_results", "[", "0", "]", "[", "'title'", "]", "+", "\": Alpha\"", ",", "fontsize", "=", "22", ")", "\n", "for", "results", "in", "all_results", ":", "\n", "        ", "alpha_mean", ",", "alpha_std", "=", "results", "[", "'alpha'", "]", "\n", "x_axis", "=", "np", ".", "arange", "(", "len", "(", "alpha_mean", ")", ")", "\n", "plt", ".", "errorbar", "(", "x_axis", ",", "alpha_mean", ",", "yerr", "=", "alpha_std", ",", "label", "=", "results", "[", "'label'", "]", ",", "linewidth", "=", "3.0", ")", "\n", "", "plt", ".", "legend", "(", "fontsize", "=", "20", ")", "\n", "plt", ".", "ylabel", "(", "'Alpha Value'", ",", "fontsize", "=", "20", ")", "\n", "plt", ".", "xlabel", "(", "'Iterations'", ",", "fontsize", "=", "20", ")", "\n", "plt", ".", "tight_layout", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jon--lee_aor.exp_mujoco.analyze_walker_instantaneous.aggregate": [[13, 77], ["open", "pickle.load", "open.close", "len", "len", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "enumerate", "tools.statistics.mean_sem", "tools.statistics.mean_sem", "tools.statistics.mean_sem", "tools.statistics.mean_sem", "tools.statistics.mean_sem", "tools.statistics.mean_sem", "tools.statistics.mean_sem", "tools.statistics.mean_sem", "tools.statistics.mean_sem", "tools.statistics.mean_sem", "numpy.arange", "len"], "function", ["home.repos.pwc.inspect_result.jon--lee_aor.tools.statistics.mean_sem", "home.repos.pwc.inspect_result.jon--lee_aor.tools.statistics.mean_sem", "home.repos.pwc.inspect_result.jon--lee_aor.tools.statistics.mean_sem", "home.repos.pwc.inspect_result.jon--lee_aor.tools.statistics.mean_sem", "home.repos.pwc.inspect_result.jon--lee_aor.tools.statistics.mean_sem", "home.repos.pwc.inspect_result.jon--lee_aor.tools.statistics.mean_sem", "home.repos.pwc.inspect_result.jon--lee_aor.tools.statistics.mean_sem", "home.repos.pwc.inspect_result.jon--lee_aor.tools.statistics.mean_sem", "home.repos.pwc.inspect_result.jon--lee_aor.tools.statistics.mean_sem", "home.repos.pwc.inspect_result.jon--lee_aor.tools.statistics.mean_sem"], ["def", "aggregate", "(", "filepath", ")", ":", "\n", "    ", "f", "=", "open", "(", "filepath", ",", "'rb'", ")", "\n", "all_results", "=", "pickle", ".", "load", "(", "f", ")", "\n", "f", ".", "close", "(", ")", "\n", "\n", "n", "=", "len", "(", "all_results", ")", "\n", "d", "=", "len", "(", "all_results", "[", "0", "]", "[", "'lnr_costs'", "]", ")", "\n", "\n", "lnr_costs", "=", "np", ".", "zeros", "(", "(", "n", ",", "d", ")", ")", "\n", "opt_costs", "=", "np", ".", "zeros", "(", "(", "n", ",", "d", ")", ")", "\n", "diff_costs", "=", "np", ".", "zeros", "(", "(", "n", ",", "d", ")", ")", "\n", "static_regret", "=", "np", ".", "zeros", "(", "(", "n", ",", "d", ")", ")", "\n", "\n", "rewards", "=", "np", ".", "zeros", "(", "(", "n", ",", "d", ")", ")", "\n", "sup_rewards", "=", "np", ".", "zeros", "(", "(", "n", ",", "d", ")", ")", "\n", "variations", "=", "np", ".", "zeros", "(", "(", "n", ",", "d", "-", "1", ")", ")", "\n", "opt_variations", "=", "np", ".", "zeros", "(", "(", "n", ",", "d", "-", "1", ")", ")", "\n", "lambdas", "=", "np", ".", "zeros", "(", "(", "n", ",", "d", "-", "1", ")", ")", "\n", "betas", "=", "np", ".", "zeros", "(", "(", "n", ",", "d", "-", "1", ")", ")", "\n", "\n", "for", "t", ",", "result", "in", "enumerate", "(", "all_results", ")", ":", "\n", "        ", "lnr_costs", "[", "t", ",", ":", "]", "=", "result", "[", "'lnr_costs'", "]", "\n", "opt_costs", "[", "t", ",", ":", "]", "=", "result", "[", "'opt_costs'", "]", "\n", "# lnr_costs[t, :] = np.cumsum(result['lnr_costs']) / (np.arange(d) + 1)", "\n", "# opt_costs[t, :] = np.cumsum(result['opt_costs']) / (np.arange(d) + 1)", "\n", "rewards", "[", "t", ",", ":", "]", "=", "result", "[", "'rewards'", "]", "\n", "sup_rewards", "[", "t", ",", ":", "]", "=", "result", "[", "'sup_rewards'", "]", "\n", "\n", "variations", "[", "t", ",", ":", "]", "=", "result", "[", "'variations'", "]", "\n", "opt_variations", "[", "t", ",", ":", "]", "=", "result", "[", "'opt_variations'", "]", "\n", "lambdas", "[", "t", ",", ":", "]", "=", "result", "[", "'lambdas'", "]", "\n", "betas", "[", "t", ",", ":", "]", "=", "result", "[", "'betas'", "]", "\n", "\n", "static_regret", "[", "t", ",", ":", "]", "=", "result", "[", "'static_regret'", "]", "\n", "\n", "\n", "", "diff_costs", "=", "lnr_costs", "-", "opt_costs", "\n", "\n", "lnr_mean", ",", "lnr_std", "=", "statistics", ".", "mean_sem", "(", "lnr_costs", ")", "\n", "opt_mean", ",", "opt_std", "=", "statistics", ".", "mean_sem", "(", "opt_costs", ")", "\n", "diff_mean", ",", "diff_std", "=", "statistics", ".", "mean_sem", "(", "diff_costs", ")", "\n", "sr_mean", ",", "sr_std", "=", "statistics", ".", "mean_sem", "(", "static_regret", ")", "\n", "\n", "var_mean", ",", "var_std", "=", "statistics", ".", "mean_sem", "(", "variations", ")", "\n", "opt_var_mean", ",", "opt_var_std", "=", "statistics", ".", "mean_sem", "(", "opt_variations", ")", "\n", "lam_mean", ",", "lam_std", "=", "statistics", ".", "mean_sem", "(", "lambdas", ")", "\n", "beta_mean", ",", "beta_std", "=", "statistics", ".", "mean_sem", "(", "betas", ")", "\n", "\n", "reward_mean", ",", "reward_std", "=", "statistics", ".", "mean_sem", "(", "rewards", ")", "\n", "sup_reward_mean", ",", "sup_reward_std", "=", "statistics", ".", "mean_sem", "(", "sup_rewards", ")", "\n", "\n", "x_axis", "=", "np", ".", "arange", "(", "len", "(", "lnr_mean", ")", ")", "\n", "\n", "results", "=", "{", "\n", "\"dyn_regret\"", ":", "(", "diff_mean", ",", "diff_std", ")", ",", "\n", "\"static_regret\"", ":", "(", "sr_mean", ",", "sr_std", ")", ",", "\n", "\"reward\"", ":", "(", "reward_mean", ",", "reward_std", ")", ",", "\n", "\"sup_reward\"", ":", "(", "sup_reward_mean", ",", "sup_reward_std", ")", ",", "\n", "\"var\"", ":", "(", "var_mean", ",", "var_std", ")", ",", "\n", "\"opt_var\"", ":", "(", "opt_var_mean", ",", "opt_var_std", ")", ",", "\n", "\"lam\"", ":", "(", "lam_mean", ",", "lam_std", ")", ",", "\n", "'beta'", ":", "(", "beta_mean", ",", "beta_std", ")", "\n", "}", "\n", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.jon--lee_aor.exp_mujoco.analyze_walker_instantaneous.plot_results": [[79, 116], ["matplotlib.subplot", "matplotlib.title", "matplotlib.ylim", "matplotlib.tight_layout", "matplotlib.legend", "matplotlib.ylabel", "matplotlib.subplot", "matplotlib.title", "matplotlib.errorbar", "matplotlib.ylabel", "matplotlib.tight_layout", "matplotlib.legend", "matplotlib.ylim", "matplotlib.ylim", "numpy.arange", "matplotlib.errorbar", "matplotlib.xlabel", "matplotlib.errorbar", "matplotlib.xlabel", "len"], "function", ["None"], ["", "def", "plot_results", "(", "all_results", ",", "i", ")", ":", "\n", "\n", "    ", "plt", ".", "subplot", "(", "2", ",", "2", ",", "1", "+", "i", "*", "2", ")", "\n", "plt", ".", "title", "(", "all_results", "[", "0", "]", "[", "'title'", "]", "+", "\": Regret\"", ",", "fontsize", "=", "22", ")", "\n", "for", "results", "in", "all_results", ":", "\n", "        ", "sr_mean", ",", "sr_std", "=", "results", "[", "'static_regret'", "]", "\n", "diff_mean", ",", "diff_std", "=", "results", "[", "'dyn_regret'", "]", "\n", "x_axis", "=", "np", ".", "arange", "(", "len", "(", "sr_mean", ")", ")", "\n", "# p = plt.errorbar(x_axis, sr_mean, yerr=sr_std, label=results['label'] + ': Static Regret', linestyle='--')", "\n", "plt", ".", "errorbar", "(", "x_axis", ",", "diff_mean", ",", "yerr", "=", "diff_std", ",", "label", "=", "results", "[", "'label'", "]", ",", "linewidth", "=", "3.0", ")", "\n", "", "plt", ".", "ylim", "(", "-", "3", ",", "20", ")", "\n", "plt", ".", "tight_layout", "(", ")", "\n", "plt", ".", "legend", "(", "fontsize", "=", "20", ",", "loc", "=", "'upper right'", ")", "\n", "if", "i", "==", "1", ":", "\n", "        ", "plt", ".", "xlabel", "(", "'Iterations'", ",", "fontsize", "=", "20", ")", "\n", "", "plt", ".", "ylabel", "(", "'Instantaneous Regret'", ",", "fontsize", "=", "20", ")", "\n", "# plt.ylim(0, 1)", "\n", "\n", "\n", "\n", "plt", ".", "subplot", "(", "2", ",", "2", ",", "i", "*", "2", "+", "2", ")", "\n", "plt", ".", "title", "(", "all_results", "[", "0", "]", "[", "'title'", "]", "+", "\": Fraction of Distance Traveled\"", ",", "fontsize", "=", "22", ")", "\n", "for", "results", "in", "all_results", ":", "\n", "        ", "sup_reward_mean", ",", "reward_std", "=", "results", "[", "'sup_reward'", "]", "\n", "reward_mean", ",", "sup_reward_std", "=", "results", "[", "'reward'", "]", "\n", "# p = plt.errorbar(x_axis, reward_mean, yerr=reward_std, label=results['label'], linewidth=3.0)", "\n", "p", "=", "plt", ".", "errorbar", "(", "x_axis", ",", "reward_mean", "/", "sup_reward_mean", ",", "yerr", "=", "reward_std", ",", "label", "=", "results", "[", "'label'", "]", ",", "linewidth", "=", "3.0", ")", "\n", "#plt.errorbar(x_axis, sup_reward_mean, yerr=sup_reward_std, label='Supervisor', linestyle='--', color=\"green\", linewidth=3.0)", "\n", "", "plt", ".", "errorbar", "(", "x_axis", ",", "sup_reward_mean", "/", "sup_reward_mean", ",", "yerr", "=", "sup_reward_std", ",", "label", "=", "'Supervisor'", ",", "linestyle", "=", "'--'", ",", "color", "=", "\"green\"", ",", "linewidth", "=", "3.0", ")", "\n", "plt", ".", "ylabel", "(", "'Fraction of Distance'", ",", "fontsize", "=", "20", ")", "\n", "\n", "if", "i", "==", "1", ":", "\n", "        ", "plt", ".", "xlabel", "(", "'Iterations'", ",", "fontsize", "=", "20", ")", "\n", "", "plt", ".", "tight_layout", "(", ")", "\n", "plt", ".", "legend", "(", "fontsize", "=", "20", ",", "loc", "=", "'upper right'", ",", "ncol", "=", "2", ")", "\n", "plt", ".", "ylim", "(", "-", "200", ",", "600", ")", "\n", "plt", ".", "ylim", "(", "-", ".3", ",", "1.2", ")", "\n", "# plt.show()", "\n"]], "home.repos.pwc.inspect_result.jon--lee_aor.exp_mujoco.analyze_hopper_static.aggregate": [[13, 77], ["open", "pickle.load", "open.close", "len", "len", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "enumerate", "tools.statistics.mean_sem", "tools.statistics.mean_sem", "tools.statistics.mean_sem", "tools.statistics.mean_sem", "tools.statistics.mean_sem", "tools.statistics.mean_sem", "tools.statistics.mean_sem", "tools.statistics.mean_sem", "tools.statistics.mean_sem", "tools.statistics.mean_sem", "numpy.arange", "len"], "function", ["home.repos.pwc.inspect_result.jon--lee_aor.tools.statistics.mean_sem", "home.repos.pwc.inspect_result.jon--lee_aor.tools.statistics.mean_sem", "home.repos.pwc.inspect_result.jon--lee_aor.tools.statistics.mean_sem", "home.repos.pwc.inspect_result.jon--lee_aor.tools.statistics.mean_sem", "home.repos.pwc.inspect_result.jon--lee_aor.tools.statistics.mean_sem", "home.repos.pwc.inspect_result.jon--lee_aor.tools.statistics.mean_sem", "home.repos.pwc.inspect_result.jon--lee_aor.tools.statistics.mean_sem", "home.repos.pwc.inspect_result.jon--lee_aor.tools.statistics.mean_sem", "home.repos.pwc.inspect_result.jon--lee_aor.tools.statistics.mean_sem", "home.repos.pwc.inspect_result.jon--lee_aor.tools.statistics.mean_sem"], ["def", "aggregate", "(", "filepath", ")", ":", "\n", "    ", "f", "=", "open", "(", "filepath", ",", "'rb'", ")", "\n", "all_results", "=", "pickle", ".", "load", "(", "f", ")", "\n", "f", ".", "close", "(", ")", "\n", "\n", "n", "=", "len", "(", "all_results", ")", "\n", "d", "=", "len", "(", "all_results", "[", "0", "]", "[", "'lnr_costs'", "]", ")", "\n", "\n", "lnr_costs", "=", "np", ".", "zeros", "(", "(", "n", ",", "d", ")", ")", "\n", "opt_costs", "=", "np", ".", "zeros", "(", "(", "n", ",", "d", ")", ")", "\n", "diff_costs", "=", "np", ".", "zeros", "(", "(", "n", ",", "d", ")", ")", "\n", "static_regret", "=", "np", ".", "zeros", "(", "(", "n", ",", "d", ")", ")", "\n", "\n", "rewards", "=", "np", ".", "zeros", "(", "(", "n", ",", "d", ")", ")", "\n", "sup_rewards", "=", "np", ".", "zeros", "(", "(", "n", ",", "d", ")", ")", "\n", "variations", "=", "np", ".", "zeros", "(", "(", "n", ",", "d", "-", "1", ")", ")", "\n", "opt_variations", "=", "np", ".", "zeros", "(", "(", "n", ",", "d", "-", "1", ")", ")", "\n", "lambdas", "=", "np", ".", "zeros", "(", "(", "n", ",", "d", "-", "1", ")", ")", "\n", "betas", "=", "np", ".", "zeros", "(", "(", "n", ",", "d", "-", "1", ")", ")", "\n", "\n", "for", "t", ",", "result", "in", "enumerate", "(", "all_results", ")", ":", "\n", "        ", "lnr_costs", "[", "t", ",", ":", "]", "=", "result", "[", "'lnr_costs'", "]", "\n", "opt_costs", "[", "t", ",", ":", "]", "=", "result", "[", "'opt_costs'", "]", "\n", "# lnr_costs[t, :] = np.cumsum(result['lnr_costs']) / (np.arange(d) + 1)", "\n", "# opt_costs[t, :] = np.cumsum(result['opt_costs']) / (np.arange(d) + 1)", "\n", "rewards", "[", "t", ",", ":", "]", "=", "result", "[", "'rewards'", "]", "\n", "sup_rewards", "[", "t", ",", ":", "]", "=", "result", "[", "'sup_rewards'", "]", "\n", "\n", "variations", "[", "t", ",", ":", "]", "=", "result", "[", "'variations'", "]", "\n", "opt_variations", "[", "t", ",", ":", "]", "=", "result", "[", "'opt_variations'", "]", "\n", "lambdas", "[", "t", ",", ":", "]", "=", "result", "[", "'lambdas'", "]", "\n", "betas", "[", "t", ",", ":", "]", "=", "result", "[", "'betas'", "]", "\n", "\n", "static_regret", "[", "t", ",", ":", "]", "=", "result", "[", "'static_regret'", "]", "\n", "\n", "\n", "", "diff_costs", "=", "lnr_costs", "-", "opt_costs", "\n", "\n", "lnr_mean", ",", "lnr_std", "=", "statistics", ".", "mean_sem", "(", "lnr_costs", ")", "\n", "opt_mean", ",", "opt_std", "=", "statistics", ".", "mean_sem", "(", "opt_costs", ")", "\n", "diff_mean", ",", "diff_std", "=", "statistics", ".", "mean_sem", "(", "diff_costs", ")", "\n", "sr_mean", ",", "sr_std", "=", "statistics", ".", "mean_sem", "(", "static_regret", ")", "\n", "\n", "var_mean", ",", "var_std", "=", "statistics", ".", "mean_sem", "(", "variations", ")", "\n", "opt_var_mean", ",", "opt_var_std", "=", "statistics", ".", "mean_sem", "(", "opt_variations", ")", "\n", "lam_mean", ",", "lam_std", "=", "statistics", ".", "mean_sem", "(", "lambdas", ")", "\n", "beta_mean", ",", "beta_std", "=", "statistics", ".", "mean_sem", "(", "betas", ")", "\n", "\n", "reward_mean", ",", "reward_std", "=", "statistics", ".", "mean_sem", "(", "rewards", ")", "\n", "sup_reward_mean", ",", "sup_reward_std", "=", "statistics", ".", "mean_sem", "(", "sup_rewards", ")", "\n", "\n", "x_axis", "=", "np", ".", "arange", "(", "len", "(", "lnr_mean", ")", ")", "\n", "\n", "results", "=", "{", "\n", "\"dyn_regret\"", ":", "(", "diff_mean", ",", "diff_std", ")", ",", "\n", "\"static_regret\"", ":", "(", "sr_mean", ",", "sr_std", ")", ",", "\n", "\"reward\"", ":", "(", "reward_mean", ",", "reward_std", ")", ",", "\n", "\"sup_reward\"", ":", "(", "sup_reward_mean", ",", "sup_reward_std", ")", ",", "\n", "\"var\"", ":", "(", "var_mean", ",", "var_std", ")", ",", "\n", "\"opt_var\"", ":", "(", "opt_var_mean", ",", "opt_var_std", ")", ",", "\n", "\"lam\"", ":", "(", "lam_mean", ",", "lam_std", ")", ",", "\n", "'beta'", ":", "(", "beta_mean", ",", "beta_std", ")", "\n", "}", "\n", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.jon--lee_aor.exp_mujoco.analyze_hopper_static.plot_results": [[79, 113], ["matplotlib.subplot", "matplotlib.title", "matplotlib.ylim", "matplotlib.tight_layout", "matplotlib.legend", "matplotlib.ylabel", "matplotlib.subplot", "matplotlib.title", "matplotlib.errorbar", "matplotlib.ylabel", "matplotlib.tight_layout", "matplotlib.legend", "matplotlib.ylim", "numpy.arange", "matplotlib.errorbar", "matplotlib.xlabel", "matplotlib.errorbar", "matplotlib.xlabel", "len"], "function", ["None"], ["", "def", "plot_results", "(", "all_results", ",", "i", ")", ":", "\n", "\n", "    ", "plt", ".", "subplot", "(", "2", ",", "2", ",", "1", "+", "i", "*", "2", ")", "\n", "plt", ".", "title", "(", "all_results", "[", "0", "]", "[", "'title'", "]", "+", "\": Regret\"", ",", "fontsize", "=", "22", ")", "\n", "for", "results", "in", "all_results", ":", "\n", "        ", "sr_mean", ",", "sr_std", "=", "results", "[", "'static_regret'", "]", "\n", "diff_mean", ",", "diff_std", "=", "results", "[", "'dyn_regret'", "]", "\n", "x_axis", "=", "np", ".", "arange", "(", "len", "(", "sr_mean", ")", ")", "\n", "p", "=", "plt", ".", "errorbar", "(", "x_axis", ",", "sr_mean", ",", "yerr", "=", "sr_std", ",", "label", "=", "results", "[", "'label'", "]", "+", "': Static Regret'", ",", "linestyle", "=", "'--'", ",", "linewidth", "=", "3.0", ")", "\n", "# plt.errorbar(x_axis, diff_mean, yerr=diff_std, label=results['label'], linewidth=3.0)", "\n", "", "plt", ".", "ylim", "(", "-", "3", ",", "20", ")", "\n", "plt", ".", "tight_layout", "(", ")", "\n", "plt", ".", "legend", "(", "fontsize", "=", "20", ",", "loc", "=", "'upper right'", ")", "\n", "if", "i", "==", "1", ":", "\n", "        ", "plt", ".", "xlabel", "(", "'Iterations'", ",", "fontsize", "=", "20", ")", "\n", "", "plt", ".", "ylabel", "(", "'Regret'", ",", "fontsize", "=", "20", ")", "\n", "# plt.ylim(0, 1)", "\n", "\n", "\n", "\n", "plt", ".", "subplot", "(", "2", ",", "2", ",", "i", "*", "2", "+", "2", ")", "\n", "plt", ".", "title", "(", "all_results", "[", "0", "]", "[", "'title'", "]", "+", "\": Distance Traveled\"", ",", "fontsize", "=", "22", ")", "\n", "for", "results", "in", "all_results", ":", "\n", "        ", "sup_reward_mean", ",", "reward_std", "=", "results", "[", "'sup_reward'", "]", "\n", "reward_mean", ",", "sup_reward_std", "=", "results", "[", "'reward'", "]", "\n", "p", "=", "plt", ".", "errorbar", "(", "x_axis", ",", "reward_mean", ",", "yerr", "=", "reward_std", ",", "label", "=", "results", "[", "'label'", "]", ",", "linewidth", "=", "3.0", ")", "\n", "", "plt", ".", "errorbar", "(", "x_axis", ",", "sup_reward_mean", ",", "yerr", "=", "sup_reward_std", ",", "label", "=", "'Supervisor'", ",", "linestyle", "=", "'--'", ",", "color", "=", "\"green\"", ",", "linewidth", "=", "3.0", ")", "\n", "plt", ".", "ylabel", "(", "'Distance Traveled'", ",", "fontsize", "=", "20", ")", "\n", "\n", "if", "i", "==", "1", ":", "\n", "        ", "plt", ".", "xlabel", "(", "'Iterations'", ",", "fontsize", "=", "20", ")", "\n", "", "plt", ".", "tight_layout", "(", ")", "\n", "plt", ".", "legend", "(", "fontsize", "=", "20", ",", "loc", "=", "'upper right'", ",", "ncol", "=", "2", ")", "\n", "plt", ".", "ylim", "(", "-", "200", ",", "600", ")", "\n", "# plt.show()", "\n"]]}