{"home.repos.pwc.inspect_result.wpy1999_bas.CUB.BAS_inference.opts.__init__": [[21, 33], ["argparse.ArgumentParser", "BAS_inference.opts.parser.add_argument", "BAS_inference.opts.parser.add_argument", "BAS_inference.opts.parser.add_argument", "BAS_inference.opts.parser.add_argument", "BAS_inference.opts.parser.add_argument", "BAS_inference.opts.parser.add_argument", "BAS_inference.opts.parser.add_argument", "BAS_inference.opts.parser.add_argument", "BAS_inference.opts.parser.add_argument", "BAS_inference.opts.parser.add_argument"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'BAS Localization evaluation'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--input_size'", ",", "default", "=", "256", ",", "dest", "=", "'input_size'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--crop_size'", ",", "default", "=", "224", ",", "dest", "=", "'crop_size'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--num_classes'", ",", "default", "=", "200", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--tencrop'", ",", "default", "=", "True", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--phase'", ",", "type", "=", "str", ",", "default", "=", "'test'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--gpu'", ",", "help", "=", "'which gpu to use'", ",", "default", "=", "'0'", ",", "dest", "=", "'gpu'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--data'", ",", "metavar", "=", "'DIR'", ",", "default", "=", "'CUB_200_2011/'", ",", "help", "=", "'path to imagenet dataset'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--threshold'", ",", "type", "=", "float", ",", "default", "=", "0.15", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--top_k'", ",", "type", "=", "int", ",", "default", "=", "200", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--arch'", ",", "type", "=", "str", ",", "default", "=", "'mobilenet'", ")", "## choosen  [ vgg, resnet, inception, mobilenet]   ", "\n", "", "def", "parse", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.wpy1999_bas.CUB.BAS_inference.opts.parse": [[33, 37], ["BAS_inference.opts.parser.parse_args"], "methods", ["None"], ["", "def", "parse", "(", "self", ")", ":", "\n", "        ", "opt", "=", "self", ".", "parser", ".", "parse_args", "(", ")", "\n", "opt", ".", "arch", "=", "opt", ".", "arch", "\n", "return", "opt", "\n", "\n"]], "home.repos.pwc.inspect_result.wpy1999_bas.CUB.BAS_inference.normalize_map": [[49, 55], ["numpy.min", "numpy.max", "cv2.resize"], "function", ["None"], ["def", "normalize_map", "(", "atten_map", ",", "w", ",", "h", ")", ":", "\n", "    ", "min_val", "=", "np", ".", "min", "(", "atten_map", ")", "\n", "max_val", "=", "np", ".", "max", "(", "atten_map", ")", "\n", "atten_norm", "=", "(", "atten_map", "-", "min_val", ")", "/", "(", "max_val", "-", "min_val", ")", "\n", "atten_norm", "=", "cv2", ".", "resize", "(", "atten_norm", ",", "dsize", "=", "(", "w", ",", "h", ")", ")", "\n", "return", "atten_norm", "\n", "\n"]], "home.repos.pwc.inspect_result.wpy1999_bas.CUB.BAS_inference.to_data": [[56, 60], ["torch.cuda.is_available", "torch.cuda.is_available", "x.cpu.cpu"], "function", ["None"], ["", "def", "to_data", "(", "x", ")", ":", "\n", "    ", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "x", "=", "x", ".", "cpu", "(", ")", "\n", "", "return", "x", ".", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.wpy1999_bas.CUB.train.opts.__init__": [[25, 54], ["argparse.ArgumentParser", "train.opts.parser.add_argument", "train.opts.parser.add_argument", "train.opts.parser.add_argument", "train.opts.parser.add_argument", "train.opts.parser.add_argument", "train.opts.parser.add_argument", "train.opts.parser.add_argument", "train.opts.parser.add_argument", "train.opts.parser.add_argument", "train.opts.parser.add_argument", "train.opts.parser.add_argument", "train.opts.parser.add_argument", "train.opts.parser.add_argument", "train.opts.parser.add_argument", "train.opts.parser.add_argument", "train.opts.parser.add_argument", "train.opts.parser.add_argument", "train.opts.parser.add_argument", "train.opts.parser.add_argument", "train.opts.parser.add_argument"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "##  path", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--root'", ",", "type", "=", "str", ",", "default", "=", "'CUB_200_2011'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--test_gt_path'", ",", "type", "=", "str", ",", "default", "=", "'CUB_200_2011/test_bounding_box.txt'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--num_classes'", ",", "type", "=", "int", ",", "default", "=", "200", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--test_txt_path'", ",", "type", "=", "str", ",", "default", "=", "'CUB_200_2011/test_list.txt'", ")", "\n", "##  save", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--save_path'", ",", "type", "=", "str", ",", "default", "=", "'logs'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--load_path'", ",", "type", "=", "str", ",", "default", "=", "'VGG.pth.tar'", ")", "\n", "##  dataloader", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--crop_size'", ",", "type", "=", "int", ",", "default", "=", "224", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--resize_size'", ",", "type", "=", "int", ",", "default", "=", "256", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--num_workers'", ",", "type", "=", "int", ",", "default", "=", "1", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--nest'", ",", "action", "=", "'store_true'", ")", "\n", "##  train", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--batch_size'", ",", "type", "=", "int", ",", "default", "=", "32", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--epochs'", ",", "type", "=", "int", ",", "default", "=", "100", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--phase'", ",", "type", "=", "str", ",", "default", "=", "'train'", ")", "## train / test", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--lr'", ",", "type", "=", "float", ",", "default", "=", "0.001", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--weight_decay'", ",", "type", "=", "float", ",", "default", "=", "5e-4", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--power'", ",", "type", "=", "float", ",", "default", "=", "0.9", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--momentum'", ",", "type", "=", "float", ",", "default", "=", "0.9", ")", "\n", "##  model", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--arch'", ",", "type", "=", "str", ",", "default", "=", "'vgg'", ")", "##  choose  [ vgg, resnet, inception, mobilenet ]         ", "\n", "##  show", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--show_step'", ",", "type", "=", "int", ",", "default", "=", "94", ")", "\n", "##  GPU'", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--gpu'", ",", "type", "=", "str", ",", "default", "=", "'0'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wpy1999_bas.CUB.train.opts.parse": [[55, 59], ["train.opts.parser.parse_args"], "methods", ["None"], ["", "def", "parse", "(", "self", ")", ":", "\n", "        ", "opt", "=", "self", ".", "parser", ".", "parse_args", "(", ")", "\n", "opt", ".", "arch", "=", "opt", ".", "arch", "\n", "return", "opt", "\n", "\n"]], "home.repos.pwc.inspect_result.wpy1999_bas.CUB.DataLoader.ImageDataset.__init__": [[42, 74], ["DataLoader.ImageDataset.img_dataset.class_to_idx.items", "DataLoader.load_test_bbox", "torchvision.datasets.ImageFolder", "torchvision.datasets.ImageFolder", "torchvision.Compose", "torchvision.Compose", "DataLoader.ImageDataset.label_classes.append", "os.path.join", "torchvision.datasets.ImageFolder", "torchvision.datasets.ImageFolder", "torchvision.Compose", "torchvision.Compose", "torchvision.Resize", "torchvision.Resize", "torchvision.RandomCrop", "torchvision.RandomCrop", "torchvision.RandomHorizontalFlip", "torchvision.RandomHorizontalFlip", "torchvision.ToTensor", "torchvision.ToTensor", "torchvision.Normalize", "torchvision.Normalize", "os.path.join", "torchvision.Resize", "torchvision.Resize", "torchvision.CenterCrop", "torchvision.CenterCrop", "torchvision.ToTensor", "torchvision.ToTensor", "torchvision.Normalize", "torchvision.Normalize"], "methods", ["home.repos.pwc.inspect_result.wpy1999_bas.ILSVRC.DataLoader.load_test_bbox"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "self", ".", "args", "=", "args", "\n", "self", ".", "root", "=", "args", ".", "root", "\n", "self", ".", "test_txt_path", "=", "args", ".", "test_txt_path", "\n", "self", ".", "test_gt_path", "=", "args", ".", "test_gt_path", "\n", "self", ".", "crop_size", "=", "args", ".", "crop_size", "\n", "self", ".", "resize_size", "=", "args", ".", "resize_size", "\n", "self", ".", "phase", "=", "args", ".", "phase", "\n", "self", ".", "num_classes", "=", "args", ".", "num_classes", "\n", "if", "self", ".", "phase", "==", "'train'", ":", "\n", "            ", "self", ".", "img_dataset", "=", "ImageFolder", "(", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "'train'", ")", ")", "\n", "self", ".", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "Resize", "(", "(", "self", ".", "resize_size", ",", "self", ".", "resize_size", ")", ")", ",", "\n", "transforms", ".", "RandomCrop", "(", "self", ".", "crop_size", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "mean", "=", "(", "0.485", ",", "0.456", ",", "0.406", ")", ",", "std", "=", "(", "0.229", ",", "0.224", ",", "0.225", ")", ")", "\n", "]", ")", "\n", "", "elif", "self", ".", "phase", "==", "'test'", ":", "\n", "            ", "self", ".", "img_dataset", "=", "ImageFolder", "(", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "'test'", ")", ")", "\n", "self", ".", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "Resize", "(", "(", "self", ".", "resize_size", ",", "self", ".", "resize_size", ")", ")", ",", "\n", "transforms", ".", "CenterCrop", "(", "self", ".", "crop_size", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "mean", "=", "(", "0.485", ",", "0.456", ",", "0.406", ")", ",", "std", "=", "(", "0.229", ",", "0.224", ",", "0.225", ")", ")", "\n", "]", ")", "\n", "\n", "", "self", ".", "label_classes", "=", "[", "]", "\n", "for", "k", ",", "v", "in", "self", ".", "img_dataset", ".", "class_to_idx", ".", "items", "(", ")", ":", "\n", "            ", "self", ".", "label_classes", ".", "append", "(", "k", ")", "\n", "", "self", ".", "img_dataset", "=", "self", ".", "img_dataset", ".", "imgs", "\n", "self", ".", "test_bbox", "=", "load_test_bbox", "(", "self", ".", "root", ",", "self", ".", "test_txt_path", ",", "self", ".", "test_gt_path", ",", "self", ".", "resize_size", ",", "self", ".", "crop_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wpy1999_bas.CUB.DataLoader.ImageDataset.__getitem__": [[75, 88], ["torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "PIL.Image.open().convert", "DataLoader.ImageDataset.transform", "path.replace.replace.replace", "PIL.Image.open"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "path", ",", "img_class", "=", "self", ".", "img_dataset", "[", "index", "]", "\n", "##  one-hot ", "\n", "label", "=", "torch", ".", "zeros", "(", "self", ".", "num_classes", ")", "\n", "label", "[", "img_class", "]", "=", "1", "\n", "img", "=", "Image", ".", "open", "(", "path", ")", ".", "convert", "(", "'RGB'", ")", "\n", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "if", "self", ".", "phase", "==", "'train'", ":", "\n", "            ", "return", "path", ",", "img", ",", "img_class", "\n", "", "else", ":", "\n", "            ", "path", "=", "path", ".", "replace", "(", "'/'", ",", "'\\\\'", ")", "\n", "bbox", "=", "self", ".", "test_bbox", "[", "path", "]", "\n", "return", "img", ",", "img_class", ",", "bbox", ",", "path", "\n", "\n"]], "home.repos.pwc.inspect_result.wpy1999_bas.CUB.DataLoader.ImageDataset.__len__": [[89, 91], ["len"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "img_dataset", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.wpy1999_bas.CUB.DataLoader.load_test_bbox": [[11, 40], ["zip", "open", "open", "os.path.join", "k.replace.replace", "test_txt.append", "line.strip().split", "test_gt.append", "line.strip().split", "float", "float", "float", "float", "float", "float", "line.strip", "line.strip"], "function", ["None"], ["def", "load_test_bbox", "(", "root", ",", "test_txt_path", ",", "test_gt_path", ",", "resize_size", ",", "crop_size", ")", ":", "\n", "    ", "test_gt", "=", "[", "]", "\n", "test_txt", "=", "[", "]", "\n", "shift_size", "=", "(", "resize_size", "-", "crop_size", ")", "//", "2.", "\n", "with", "open", "(", "test_txt_path", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "for", "line", "in", "f", ":", "\n", "            ", "img_path", "=", "line", ".", "strip", "(", "'\\n'", ")", ".", "split", "(", "';'", ")", "[", "0", "]", "\n", "test_txt", ".", "append", "(", "img_path", ")", "\n", "", "", "with", "open", "(", "test_gt_path", ",", "'r'", ")", "as", "f", ":", "\n", "\n", "        ", "for", "line", "in", "f", ":", "\n", "            ", "x0", ",", "y0", ",", "x1", ",", "y1", ",", "h", ",", "w", "=", "line", ".", "strip", "(", "'\\n'", ")", ".", "split", "(", "' '", ")", "\n", "x0", ",", "y0", ",", "x1", ",", "y1", ",", "h", ",", "w", "=", "float", "(", "x0", ")", ",", "float", "(", "y0", ")", ",", "float", "(", "x1", ")", ",", "float", "(", "y1", ")", ",", "float", "(", "h", ")", ",", "float", "(", "w", ")", "\n", "x0", ",", "y0", ",", "x1", ",", "y1", "=", "x0", "/", "w", "*", "resize_size", "-", "shift_size", ",", "y0", "/", "h", "*", "resize_size", "-", "shift_size", ",", "x1", "/", "w", "*", "resize_size", "-", "shift_size", ",", "y1", "/", "h", "*", "resize_size", "-", "shift_size", "\n", "if", "x0", "<", "0", ":", "\n", "                ", "x0", "=", "0", "\n", "", "if", "y0", "<", "0", ":", "\n", "                ", "y0", "=", "0", "\n", "", "if", "x1", ">", "crop_size", ":", "\n", "                ", "x1", "=", "crop_size", "\n", "", "if", "y1", ">", "crop_size", ":", "\n", "                ", "y1", "=", "crop_size", "\n", "", "test_gt", ".", "append", "(", "[", "x0", ",", "y0", ",", "x1", ",", "y1", "]", ")", "\n", "", "", "final_dict", "=", "{", "}", "\n", "for", "k", ",", "v", "in", "zip", "(", "test_txt", ",", "test_gt", ")", ":", "\n", "        ", "k", "=", "os", ".", "path", ".", "join", "(", "root", ",", "'test'", ",", "k", ")", "\n", "k", "=", "k", ".", "replace", "(", "'/'", ",", "'\\\\'", ")", "\n", "final_dict", "[", "k", "]", "=", "v", "\n", "", "return", "final_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.wpy1999_bas.utils.augment.RandomHorizontalFlipBBox.__init__": [[11, 13], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "p", "=", "0.5", ")", ":", "\n", "        ", "self", ".", "p", "=", "p", "\n", "\n"]], "home.repos.pwc.inspect_result.wpy1999_bas.utils.augment.RandomHorizontalFlipBBox.__call__": [[14, 22], ["random.random", "copy.deepcopy", "torchvision.transforms.functional.hflip"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ",", "bbox", ")", ":", "\n", "        ", "if", "random", ".", "random", "(", ")", "<", "self", ".", "p", ":", "\n", "            ", "flipbox", "=", "copy", ".", "deepcopy", "(", "bbox", ")", "\n", "flipbox", "[", "0", "]", "=", "1", "-", "bbox", "[", "2", "]", "\n", "flipbox", "[", "2", "]", "=", "1", "-", "bbox", "[", "0", "]", "\n", "return", "F", ".", "hflip", "(", "img", ")", ",", "flipbox", "\n", "\n", "", "return", "img", ",", "bbox", "\n", "", "", "class", "RandomResizedBBoxCrop", "(", "object", ")", ":", "\n"]], "home.repos.pwc.inspect_result.wpy1999_bas.utils.augment.RandomResizedBBoxCrop.__init__": [[37, 48], ["isinstance", "warnings.warn"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "size", ",", "scale", "=", "(", "0.2", ",", "1.0", ")", ",", "ratio", "=", "(", "3.", "/", "4.", ",", "4.", "/", "3.", ")", ",", "interpolation", "=", "Image", ".", "BILINEAR", ")", ":", "\n", "        ", "if", "isinstance", "(", "size", ",", "tuple", ")", ":", "\n", "            ", "self", ".", "size", "=", "size", "\n", "", "else", ":", "\n", "            ", "self", ".", "size", "=", "(", "size", ",", "size", ")", "\n", "", "if", "(", "scale", "[", "0", "]", ">", "scale", "[", "1", "]", ")", "or", "(", "ratio", "[", "0", "]", ">", "ratio", "[", "1", "]", ")", ":", "\n", "            ", "warnings", ".", "warn", "(", "\"range should be of kind (min, max)\"", ")", "\n", "\n", "", "self", ".", "interpolation", "=", "interpolation", "\n", "self", ".", "scale", "=", "scale", "\n", "self", ".", "ratio", "=", "ratio", "\n", "\n"]], "home.repos.pwc.inspect_result.wpy1999_bas.utils.augment.RandomResizedBBoxCrop.get_params": [[49, 103], ["range", "func.compute_intersec", "func.normalize_intersec", "math.exp", "int", "int", "min", "int", "random.uniform", "math.log", "math.log", "random.uniform", "round", "round", "random.randint", "random.randint", "func.compute_intersec", "round", "max", "int", "math.sqrt", "math.sqrt", "func.normalize_intersec", "round", "min", "max"], "methods", ["home.repos.pwc.inspect_result.wpy1999_bas.utils.func.compute_intersec", "home.repos.pwc.inspect_result.wpy1999_bas.utils.func.normalize_intersec", "home.repos.pwc.inspect_result.wpy1999_bas.utils.func.compute_intersec", "home.repos.pwc.inspect_result.wpy1999_bas.utils.func.normalize_intersec"], ["", "@", "staticmethod", "\n", "def", "get_params", "(", "img", ",", "bbox", ",", "scale", ",", "ratio", ")", ":", "\n", "        ", "\"\"\"Get parameters for ``crop`` for a random sized crop.\n\n        Args:\n            img (PIL Image): Image to be cropped.\n            scale (tuple): range of size of the origin size cropped\n            ratio (tuple): range of aspect ratio of the origin aspect ratio cropped\n\n        Returns:\n            tuple: params (i, j, h, w) to be passed to ``crop`` for a random\n                sized crop.\n        \"\"\"", "\n", "\n", "area", "=", "img", ".", "size", "[", "0", "]", "*", "img", ".", "size", "[", "1", "]", "\n", "\n", "for", "attempt", "in", "range", "(", "30", ")", ":", "\n", "            ", "target_area", "=", "random", ".", "uniform", "(", "*", "scale", ")", "*", "area", "\n", "log_ratio", "=", "(", "math", ".", "log", "(", "ratio", "[", "0", "]", ")", ",", "math", ".", "log", "(", "ratio", "[", "1", "]", ")", ")", "\n", "aspect_ratio", "=", "math", ".", "exp", "(", "random", ".", "uniform", "(", "*", "log_ratio", ")", ")", "\n", "\n", "w", "=", "int", "(", "round", "(", "math", ".", "sqrt", "(", "target_area", "*", "aspect_ratio", ")", ")", ")", "\n", "h", "=", "int", "(", "round", "(", "math", ".", "sqrt", "(", "target_area", "/", "aspect_ratio", ")", ")", ")", "\n", "\n", "if", "w", "<=", "img", ".", "size", "[", "0", "]", "and", "h", "<=", "img", ".", "size", "[", "1", "]", ":", "\n", "\n", "                ", "i", "=", "random", ".", "randint", "(", "0", ",", "img", ".", "size", "[", "1", "]", "-", "h", ")", "# i is y actually", "\n", "j", "=", "random", ".", "randint", "(", "0", ",", "img", ".", "size", "[", "0", "]", "-", "w", ")", "# j is x", "\n", "\n", "#compute intersection between crop image and bbox", "\n", "intersec", "=", "compute_intersec", "(", "i", ",", "j", ",", "h", ",", "w", ",", "bbox", ")", "\n", "\n", "if", "intersec", "[", "2", "]", "-", "intersec", "[", "0", "]", ">", "0", "and", "intersec", "[", "3", "]", "-", "intersec", "[", "1", "]", ">", "0", ":", "\n", "                    ", "intersec", "=", "normalize_intersec", "(", "i", ",", "j", ",", "h", ",", "w", ",", "intersec", ")", "\n", "return", "i", ",", "j", ",", "h", ",", "w", ",", "intersec", "\n", "\n", "# Fallback to central crop", "\n", "", "", "", "in_ratio", "=", "img", ".", "size", "[", "0", "]", "/", "img", ".", "size", "[", "1", "]", "\n", "if", "(", "in_ratio", "<", "min", "(", "ratio", ")", ")", ":", "\n", "            ", "w", "=", "img", ".", "size", "[", "0", "]", "\n", "h", "=", "int", "(", "round", "(", "w", "/", "min", "(", "ratio", ")", ")", ")", "\n", "", "elif", "(", "in_ratio", ">", "max", "(", "ratio", ")", ")", ":", "\n", "            ", "h", "=", "img", ".", "size", "[", "1", "]", "\n", "w", "=", "int", "(", "round", "(", "h", "*", "max", "(", "ratio", ")", ")", ")", "\n", "", "else", ":", "# whole image", "\n", "            ", "w", "=", "img", ".", "size", "[", "0", "]", "\n", "h", "=", "img", ".", "size", "[", "1", "]", "\n", "\n", "", "i", "=", "(", "img", ".", "size", "[", "1", "]", "-", "h", ")", "//", "2", "\n", "j", "=", "(", "img", ".", "size", "[", "0", "]", "-", "w", ")", "//", "2", "\n", "\n", "intersec", "=", "compute_intersec", "(", "i", ",", "j", ",", "h", ",", "w", ",", "bbox", ")", "\n", "intersec", "=", "normalize_intersec", "(", "i", ",", "j", ",", "h", ",", "w", ",", "intersec", ")", "\n", "return", "i", ",", "j", ",", "h", ",", "w", ",", "intersec", "\n", "\n"]], "home.repos.pwc.inspect_result.wpy1999_bas.utils.augment.RandomResizedBBoxCrop.__call__": [[104, 114], ["augment.RandomResizedBBoxCrop.get_params", "torchvision.transforms.functional.resized_crop"], "methods", ["home.repos.pwc.inspect_result.wpy1999_bas.utils.augment.CenterBBoxCrop.get_params"], ["", "def", "__call__", "(", "self", ",", "img", ",", "bbox", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            img (PIL Image): Image to be cropped and resized.\n\n        Returns:\n            PIL Image: Randomly cropped and resized image.\n        \"\"\"", "\n", "i", ",", "j", ",", "h", ",", "w", ",", "crop_bbox", "=", "self", ".", "get_params", "(", "img", ",", "bbox", ",", "self", ".", "scale", ",", "self", ".", "ratio", ")", "\n", "return", "F", ".", "resized_crop", "(", "img", ",", "i", ",", "j", ",", "h", ",", "w", ",", "self", ".", "size", ",", "self", ".", "interpolation", ")", ",", "crop_bbox", "\n", "", "", "class", "RandomBBoxCrop", "(", "object", ")", ":", "\n"]], "home.repos.pwc.inspect_result.wpy1999_bas.utils.augment.RandomBBoxCrop.__init__": [[150, 155], ["isinstance", "int", "int"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "size", ")", ":", "\n", "        ", "if", "isinstance", "(", "size", ",", "numbers", ".", "Number", ")", ":", "\n", "            ", "self", ".", "size", "=", "(", "int", "(", "size", ")", ",", "int", "(", "size", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "size", "=", "size", "\n", "\n"]], "home.repos.pwc.inspect_result.wpy1999_bas.utils.augment.RandomBBoxCrop.get_params": [[156, 177], ["random.randint", "random.randint", "func.compute_intersec", "func.normalize_intersec"], "methods", ["home.repos.pwc.inspect_result.wpy1999_bas.utils.func.compute_intersec", "home.repos.pwc.inspect_result.wpy1999_bas.utils.func.normalize_intersec"], ["", "", "@", "staticmethod", "\n", "def", "get_params", "(", "img", ",", "bbox", ",", "output_size", ")", ":", "\n", "        ", "\"\"\"Get parameters for ``crop`` for a random crop.\n\n        Args:\n            img (PIL Image): Image to be cropped.\n            output_size (tuple): Expected output size of the crop.\n\n        Returns:\n            tuple: params (i, j, h, w) to be passed to ``crop`` for random crop.\n        \"\"\"", "\n", "w", ",", "h", "=", "img", ".", "size", "\n", "th", ",", "tw", "=", "output_size", "\n", "if", "w", "==", "tw", "and", "h", "==", "th", ":", "\n", "            ", "return", "0", ",", "0", ",", "h", ",", "w", "\n", "\n", "", "i", "=", "random", ".", "randint", "(", "0", ",", "h", "-", "th", ")", "\n", "j", "=", "random", ".", "randint", "(", "0", ",", "w", "-", "tw", ")", "\n", "intersec", "=", "compute_intersec", "(", "i", ",", "j", ",", "h", ",", "w", ",", "bbox", ")", "\n", "intersec", "=", "normalize_intersec", "(", "i", ",", "j", ",", "h", ",", "w", ",", "intersec", ")", "\n", "return", "i", ",", "j", ",", "th", ",", "tw", ",", "intersec", "\n", "\n"]], "home.repos.pwc.inspect_result.wpy1999_bas.utils.augment.RandomBBoxCrop.__call__": [[178, 190], ["augment.RandomBBoxCrop.get_params", "torchvision.transforms.functional.crop"], "methods", ["home.repos.pwc.inspect_result.wpy1999_bas.utils.augment.CenterBBoxCrop.get_params"], ["", "def", "__call__", "(", "self", ",", "img", ",", "bbox", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            img (PIL Image): Image to be cropped.\n\n        Returns:\n            PIL Image: Cropped image.\n        \"\"\"", "\n", "\n", "i", ",", "j", ",", "h", ",", "w", ",", "crop_bbox", "=", "self", ".", "get_params", "(", "img", ",", "bbox", ",", "self", ".", "size", ")", "\n", "\n", "return", "F", ".", "crop", "(", "img", ",", "i", ",", "j", ",", "h", ",", "w", ")", ",", "crop_bbox", "\n", "\n"]], "home.repos.pwc.inspect_result.wpy1999_bas.utils.augment.RandomBBoxCrop.__repr__": [[191, 193], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__class__", ".", "__name__", "+", "'(size={0}, padding={1})'", ".", "format", "(", "self", ".", "size", ",", "self", ".", "padding", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wpy1999_bas.utils.augment.ResizedBBoxCrop.__init__": [[196, 200], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "size", ",", "interpolation", "=", "Image", ".", "BILINEAR", ")", ":", "\n", "        ", "self", ".", "size", "=", "size", "\n", "\n", "self", ".", "interpolation", "=", "interpolation", "\n", "\n"]], "home.repos.pwc.inspect_result.wpy1999_bas.utils.augment.ResizedBBoxCrop.get_params": [[201, 232], ["isinstance", "copy.deepcopy", "range", "len", "copy.deepcopy", "int", "int"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "get_params", "(", "img", ",", "bbox", ",", "size", ")", ":", "\n", "#resize to 256", "\n", "        ", "if", "isinstance", "(", "size", ",", "int", ")", ":", "\n", "            ", "w", ",", "h", "=", "img", ".", "size", "\n", "if", "(", "w", "<=", "h", "and", "w", "==", "size", ")", "or", "(", "h", "<=", "w", "and", "h", "==", "size", ")", ":", "\n", "                ", "img", "=", "copy", ".", "deepcopy", "(", "img", ")", "\n", "ow", ",", "oh", "=", "w", ",", "h", "\n", "", "if", "w", "<", "h", ":", "\n", "                ", "ow", "=", "size", "\n", "oh", "=", "int", "(", "size", "*", "h", "/", "w", ")", "\n", "", "else", ":", "\n", "                ", "oh", "=", "size", "\n", "ow", "=", "int", "(", "size", "*", "w", "/", "h", ")", "\n", "", "", "else", ":", "\n", "            ", "ow", ",", "oh", "=", "size", "[", ":", ":", "-", "1", "]", "\n", "w", ",", "h", "=", "img", ".", "size", "\n", "\n", "\n", "", "intersec", "=", "copy", ".", "deepcopy", "(", "bbox", ")", "\n", "ratew", "=", "ow", "/", "w", "\n", "rateh", "=", "oh", "/", "h", "\n", "intersec", "[", "0", "]", "=", "bbox", "[", "0", "]", "*", "ratew", "\n", "intersec", "[", "2", "]", "=", "bbox", "[", "2", "]", "*", "ratew", "\n", "intersec", "[", "1", "]", "=", "bbox", "[", "1", "]", "*", "rateh", "\n", "intersec", "[", "3", "]", "=", "bbox", "[", "3", "]", "*", "rateh", "\n", "\n", "#intersec = normalize_intersec(i, j, h, w, intersec)", "\n", "return", "(", "oh", ",", "ow", ")", ",", "intersec", "\n", "\n", "", "def", "__call__", "(", "self", ",", "img", ",", "bbox", ")", ":", "\n", "        "]], "home.repos.pwc.inspect_result.wpy1999_bas.utils.augment.ResizedBBoxCrop.__call__": [[233, 243], ["augment.ResizedBBoxCrop.get_params", "torchvision.transforms.functional.resize"], "methods", ["home.repos.pwc.inspect_result.wpy1999_bas.utils.augment.CenterBBoxCrop.get_params"], ["\n", "size", ",", "crop_bbox", "=", "self", ".", "get_params", "(", "img", ",", "bbox", ",", "self", ".", "size", ")", "\n", "return", "F", ".", "resize", "(", "img", ",", "self", ".", "size", ",", "self", ".", "interpolation", ")", ",", "crop_bbox", "\n", "\n", "\n", "", "", "class", "CenterBBoxCrop", "(", "object", ")", ":", "\n"]], "home.repos.pwc.inspect_result.wpy1999_bas.utils.augment.CenterBBoxCrop.__init__": [[247, 251], ["None"], "methods", ["None"], ["\n", "self", ".", "interpolation", "=", "interpolation", "\n", "\n", "", "@", "staticmethod", "\n", "def", "get_params", "(", "img", ",", "bbox", ",", "size", ")", ":", "\n"]], "home.repos.pwc.inspect_result.wpy1999_bas.utils.augment.CenterBBoxCrop.get_params": [[252, 269], ["isinstance", "int", "int", "func.compute_intersec", "func.normalize_intersec", "round", "round", "int", "int"], "methods", ["home.repos.pwc.inspect_result.wpy1999_bas.utils.func.compute_intersec", "home.repos.pwc.inspect_result.wpy1999_bas.utils.func.normalize_intersec"], ["#center crop", "\n", "        ", "if", "isinstance", "(", "size", ",", "numbers", ".", "Number", ")", ":", "\n", "            ", "output_size", "=", "(", "int", "(", "size", ")", ",", "int", "(", "size", ")", ")", "\n", "\n", "", "w", ",", "h", "=", "img", ".", "size", "\n", "th", ",", "tw", "=", "output_size", "\n", "\n", "i", "=", "int", "(", "round", "(", "(", "h", "-", "th", ")", "/", "2.", ")", ")", "\n", "j", "=", "int", "(", "round", "(", "(", "w", "-", "tw", ")", "/", "2.", ")", ")", "\n", "\n", "intersec", "=", "compute_intersec", "(", "i", ",", "j", ",", "th", ",", "tw", ",", "bbox", ")", "\n", "intersec", "=", "normalize_intersec", "(", "i", ",", "j", ",", "th", ",", "tw", ",", "intersec", ")", "\n", "\n", "#intersec = normalize_intersec(i, j, h, w, intersec)", "\n", "return", "i", ",", "j", ",", "th", ",", "tw", ",", "intersec", "\n", "\n", "", "def", "__call__", "(", "self", ",", "img", ",", "bbox", ")", ":", "\n", "        "]], "home.repos.pwc.inspect_result.wpy1999_bas.utils.augment.CenterBBoxCrop.__call__": [[270, 280], ["augment.CenterBBoxCrop.get_params", "torchvision.transforms.functional.center_crop"], "methods", ["home.repos.pwc.inspect_result.wpy1999_bas.utils.augment.CenterBBoxCrop.get_params"], ["\n", "i", ",", "j", ",", "th", ",", "tw", ",", "crop_bbox", "=", "self", ".", "get_params", "(", "img", ",", "bbox", ",", "self", ".", "size", ")", "\n", "return", "F", ".", "center_crop", "(", "img", ",", "self", ".", "size", ")", ",", "crop_bbox", "\n", "\n", "\n", "", "", ""]], "home.repos.pwc.inspect_result.wpy1999_bas.utils.func.count_max": [[5, 18], ["sorted", "sorted.items", "sorted.keys"], "function", ["None"], ["def", "count_max", "(", "x", ")", ":", "\n", "    ", "count_dict", "=", "{", "}", "\n", "for", "xlist", "in", "x", ":", "\n", "        ", "for", "item", "in", "xlist", ":", "\n", "            ", "if", "item", "==", "0", ":", "\n", "                ", "continue", "\n", "", "if", "item", "not", "in", "count_dict", ".", "keys", "(", ")", ":", "\n", "                ", "count_dict", "[", "item", "]", "=", "0", "\n", "", "count_dict", "[", "item", "]", "+=", "1", "\n", "", "", "if", "count_dict", "==", "{", "}", ":", "\n", "        ", "return", "-", "1", "\n", "", "count_dict", "=", "sorted", "(", "count_dict", ".", "items", "(", ")", ",", "key", "=", "lambda", "d", ":", "d", "[", "1", "]", ",", "reverse", "=", "True", ")", "\n", "return", "count_dict", "[", "0", "]", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.wpy1999_bas.utils.func.compute_intersec": [[19, 31], ["copy.deepcopy", "range", "len", "max", "max", "min", "min"], "function", ["None"], ["", "def", "compute_intersec", "(", "i", ",", "j", ",", "h", ",", "w", ",", "bbox", ")", ":", "\n", "    ", "'''\n    intersection box between croped box and GT BBox\n    '''", "\n", "intersec", "=", "copy", ".", "deepcopy", "(", "bbox", ")", "\n", "\n", "intersec", "[", "0", "]", "=", "max", "(", "j", ",", "bbox", "[", "0", "]", ")", "\n", "intersec", "[", "1", "]", "=", "max", "(", "i", ",", "bbox", "[", "1", "]", ")", "\n", "intersec", "[", "2", "]", "=", "min", "(", "j", "+", "w", ",", "bbox", "[", "2", "]", ")", "\n", "intersec", "[", "3", "]", "=", "min", "(", "i", "+", "h", ",", "bbox", "[", "3", "]", ")", "\n", "return", "intersec", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.wpy1999_bas.utils.func.normalize_intersec": [[33, 44], ["range", "len"], "function", ["None"], ["    ", "'''\n    return: normalize into [0, 1]\n    '''", "\n", "\n", "intersec", "[", "0", "]", "=", "(", "intersec", "[", "0", "]", "-", "j", ")", "/", "w", "\n", "intersec", "[", "2", "]", "=", "(", "intersec", "[", "2", "]", "-", "j", ")", "/", "w", "\n", "intersec", "[", "1", "]", "=", "(", "intersec", "[", "1", "]", "-", "i", ")", "/", "h", "\n", "intersec", "[", "3", "]", "=", "(", "intersec", "[", "3", "]", "-", "i", ")", "/", "h", "\n", "return", "intersec", "\n", "", ""]], "home.repos.pwc.inspect_result.wpy1999_bas.utils.IoU.IoU": [[3, 15], ["max", "max", "min", "min", "max", "max", "float"], "function", ["None"], ["def", "IoU", "(", "boxA", ",", "boxB", ")", ":", "\n", "    ", "xA", "=", "max", "(", "boxA", "[", "0", "]", ",", "boxB", "[", "0", "]", ")", "\n", "yA", "=", "max", "(", "boxA", "[", "1", "]", ",", "boxB", "[", "1", "]", ")", "\n", "xB", "=", "min", "(", "boxA", "[", "2", "]", ",", "boxB", "[", "2", "]", ")", "\n", "yB", "=", "min", "(", "boxA", "[", "3", "]", ",", "boxB", "[", "3", "]", ")", "\n", "\n", "interArea", "=", "max", "(", "0", ",", "xB", "-", "xA", "+", "1", ")", "*", "max", "(", "0", ",", "yB", "-", "yA", "+", "1", ")", "\n", "boxAArea", "=", "(", "boxA", "[", "2", "]", "-", "boxA", "[", "0", "]", "+", "1", ")", "*", "(", "boxA", "[", "3", "]", "-", "boxA", "[", "1", "]", "+", "1", ")", "\n", "boxBArea", "=", "(", "boxB", "[", "2", "]", "-", "boxB", "[", "0", "]", "+", "1", ")", "*", "(", "boxB", "[", "3", "]", "-", "boxB", "[", "1", "]", "+", "1", ")", "\n", "\n", "iou", "=", "interArea", "/", "float", "(", "boxAArea", "+", "boxBArea", "-", "interArea", ")", "\n", "return", "iou", "", "", ""]], "home.repos.pwc.inspect_result.wpy1999_bas.utils.util.remove_layer": [[27, 33], ["state_dict.keys", "state_dict.pop"], "function", ["None"], ["def", "remove_layer", "(", "state_dict", ",", "keyword", ")", ":", "\n", "    ", "keys", "=", "[", "key", "for", "key", "in", "state_dict", ".", "keys", "(", ")", "]", "\n", "for", "key", "in", "keys", ":", "\n", "        ", "if", "keyword", "in", "key", ":", "\n", "            ", "state_dict", ".", "pop", "(", "key", ")", "\n", "", "", "return", "state_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.wpy1999_bas.utils.util.replace_layer": [[35, 42], ["state_dict.keys", "key.replace", "state_dict.pop"], "function", ["None"], ["", "def", "replace_layer", "(", "state_dict", ",", "keyword1", ",", "keyword2", ")", ":", "\n", "    ", "keys", "=", "[", "key", "for", "key", "in", "state_dict", ".", "keys", "(", ")", "]", "\n", "for", "key", "in", "keys", ":", "\n", "        ", "if", "keyword1", "in", "key", ":", "\n", "            ", "new_key", "=", "key", ".", "replace", "(", "keyword1", ",", "keyword2", ")", "\n", "state_dict", "[", "new_key", "]", "=", "state_dict", ".", "pop", "(", "key", ")", "\n", "", "", "return", "state_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.wpy1999_bas.utils.util.initialize_weights": [[44, 62], ["isinstance", "isinstance", "torch.init.kaiming_normal_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "isinstance", "torch.init.xavier_uniform_", "ValueError", "torch.init.normal_", "torch.init.constant_"], "function", ["None"], ["", "def", "initialize_weights", "(", "modules", ",", "init_mode", ")", ":", "\n", "    ", "for", "m", "in", "modules", ":", "\n", "        ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "            ", "if", "init_mode", "==", "'he'", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ",", "\n", "nonlinearity", "=", "'relu'", ")", "\n", "", "elif", "init_mode", "==", "'xavier'", ":", "\n", "                ", "nn", ".", "init", ".", "xavier_uniform_", "(", "m", ".", "weight", ".", "data", ")", "\n", "", "else", ":", "\n", "                ", "raise", "ValueError", "(", "'Invalid init_mode {}'", ".", "format", "(", "init_mode", ")", ")", "\n", "", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "            ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "            ", "nn", ".", "init", ".", "normal_", "(", "m", ".", "weight", ",", "0", ",", "0.01", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "", "", "", "", ""]], "home.repos.pwc.inspect_result.wpy1999_bas.utils.accuracy.AverageMeter.__init__": [[19, 21], ["accuracy.AverageMeter.reset"], "methods", ["home.repos.pwc.inspect_result.wpy1999_bas.utils.accuracy.AverageMeter.reset"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wpy1999_bas.utils.accuracy.AverageMeter.reset": [[22, 27], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "val", "=", "0.0", "\n", "self", ".", "avg", "=", "0.0", "\n", "self", ".", "sum", "=", "0.0", "\n", "self", ".", "cnt", "=", "0.0", "\n", "\n"]], "home.repos.pwc.inspect_result.wpy1999_bas.utils.accuracy.AverageMeter.updata": [[28, 36], ["None"], "methods", ["None"], ["", "def", "updata", "(", "self", ",", "val", ",", "n", "=", "1.0", ")", ":", "\n", "        ", "self", ".", "val", "=", "val", "\n", "self", ".", "sum", "+=", "val", "*", "n", "\n", "self", ".", "cnt", "+=", "n", "\n", "if", "self", ".", "cnt", "==", "0", ":", "\n", "            ", "self", ".", "avg", "=", "1", "\n", "", "else", ":", "\n", "            ", "self", ".", "avg", "=", "self", ".", "sum", "/", "self", ".", "cnt", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.wpy1999_bas.utils.accuracy.compute_cls_acc": [[5, 10], ["torch.max", "float", "float", "preds.size"], "function", ["None"], ["def", "compute_cls_acc", "(", "preds", ",", "label", ")", ":", "\n", "    ", "pred", "=", "torch", ".", "max", "(", "preds", ",", "1", ")", "[", "1", "]", "\n", "#label = torch.max(labels, 1)[1]", "\n", "num_correct", "=", "(", "pred", "==", "label", ")", ".", "sum", "(", ")", "\n", "return", "float", "(", "num_correct", ")", "/", "float", "(", "preds", ".", "size", "(", "0", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wpy1999_bas.utils.accuracy.compute_loc_acc": [[11, 17], ["range", "loc_preds.size", "utils.IoU.IoU", "float", "float", "loc_preds.size"], "function", ["home.repos.pwc.inspect_result.wpy1999_bas.utils.IoU.IoU"], ["", "def", "compute_loc_acc", "(", "loc_preds", ",", "loc_gt", ",", "theta", "=", "0.5", ")", ":", "\n", "    ", "correct", "=", "0", "\n", "for", "i", "in", "range", "(", "loc_preds", ".", "size", "(", "0", ")", ")", ":", "\n", "        ", "iou", "=", "IoU", "(", "loc_preds", "[", "i", "]", ",", "loc_gt", "[", "i", "]", ")", "\n", "correct", "+=", "(", "iou", ">=", "theta", ")", ".", "sum", "(", ")", "\n", "", "return", "float", "(", "correct", ")", "/", "float", "(", "loc_preds", ".", "size", "(", "0", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wpy1999_bas.utils.optimizer.get_optimizer": [[2, 30], ["model.named_parameters", "torch.optim.SGD", "last_weight_list.append", "weight_list.append", "last_bias_list.append", "bias_list.append"], "function", ["None"], ["def", "get_optimizer", "(", "model", ",", "args", ")", ":", "\n", "        ", "lr", "=", "args", ".", "lr", "\n", "weight_list", "=", "[", "]", "\n", "bias_list", "=", "[", "]", "\n", "last_weight_list", "=", "[", "]", "\n", "last_bias_list", "=", "[", "]", "\n", "for", "name", ",", "value", "in", "model", ".", "named_parameters", "(", ")", ":", "\n", "            ", "if", "'classifier'", "in", "name", ":", "\n", "                ", "if", "'weight'", "in", "name", ":", "\n", "                    ", "last_weight_list", ".", "append", "(", "value", ")", "\n", "", "elif", "'bias'", "in", "name", ":", "\n", "                    ", "last_bias_list", ".", "append", "(", "value", ")", "\n", "", "", "else", ":", "\n", "                ", "if", "'weight'", "in", "name", ":", "\n", "                    ", "weight_list", ".", "append", "(", "value", ")", "\n", "", "elif", "'bias'", "in", "name", ":", "\n", "                    ", "bias_list", ".", "append", "(", "value", ")", "\n", "", "", "", "optmizer", "=", "torch", ".", "optim", ".", "SGD", "(", "[", "{", "'params'", ":", "weight_list", ",", "\n", "'lr'", ":", "lr", "}", ",", "\n", "{", "'params'", ":", "bias_list", ",", "\n", "'lr'", ":", "lr", "*", "2", "}", ",", "\n", "{", "'params'", ":", "last_weight_list", ",", "\n", "'lr'", ":", "lr", "*", "10", "}", ",", "\n", "{", "'params'", ":", "last_bias_list", ",", "\n", "'lr'", ":", "lr", "*", "20", "}", "]", ",", "momentum", "=", "args", ".", "momentum", ",", "weight_decay", "=", "args", ".", "weight_decay", ",", "nesterov", "=", "True", ")", "\n", "return", "optmizer", "", "", ""]], "home.repos.pwc.inspect_result.wpy1999_bas.utils.lr.poly_lr_scheduler": [[1, 5], ["None"], "function", ["None"], ["def", "poly_lr_scheduler", "(", "optimizer", ",", "epoch", ",", "lr_decay_rate", "=", "0.1", ",", "decay_epoch", "=", "80", ")", ":", "\n", "    ", "if", "epoch", "!=", "0", "and", "epoch", "%", "decay_epoch", "==", "0", ":", "\n", "        ", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "            ", "param_group", "[", "'lr'", "]", "*=", "lr_decay_rate", "", "", "", "", ""]], "home.repos.pwc.inspect_result.wpy1999_bas.utils.vis.vis_bbox": [[10, 16], ["img.astype.astype", "cv2.rectangle", "int", "int", "int", "int"], "function", ["None"], ["def", "vis_bbox", "(", "img", ",", "bbox", ",", "color", "=", "_GREEN", ",", "thick", "=", "1", ")", ":", "\n", "    ", "'''Visualize a bounding box'''", "\n", "img", "=", "img", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "(", "x0", ",", "y0", ",", "x1", ",", "y1", ")", "=", "bbox", "\n", "cv2", ".", "rectangle", "(", "img", ",", "(", "int", "(", "x0", ")", ",", "int", "(", "y0", ")", ")", ",", "(", "int", "(", "x1", ")", ",", "int", "(", "y1", ")", ")", ",", "color", ",", "thickness", "=", "thick", ")", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.wpy1999_bas.utils.vis.vis_one_image": [[17, 21], ["vis.vis_bbox"], "function", ["home.repos.pwc.inspect_result.wpy1999_bas.utils.vis.vis_bbox"], ["", "def", "vis_one_image", "(", "img", ",", "boxes", ",", "color", "=", "_GREEN", ")", ":", "\n", "    ", "for", "bbox", "in", "boxes", ":", "\n", "        ", "img", "=", "vis_bbox", "(", "img", ",", "(", "bbox", "[", "0", "]", ",", "bbox", "[", "1", "]", ",", "bbox", "[", "2", "]", ",", "bbox", "[", "3", "]", ")", ",", "color", ")", "\n", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.wpy1999_bas.utils.loss.Loss.__init__": [[5, 7], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.wpy1999_bas.ILSVRC.DataLoader.ImageDataset.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "Loss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wpy1999_bas.utils.loss.Loss.forward": [[8, 17], ["torch.zeros.float().cuda.data.cpu", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.zeros.scatter_", "torch.zeros.scatter_", "torch.zeros.scatter_", "torch.zeros.float().cuda", "torch.zeros.float().cuda", "torch.zeros.float().cuda", "torch.multilabel_soft_margin_loss", "torch.multilabel_soft_margin_loss", "torch.multilabel_soft_margin_loss", "torch.zeros.float().cuda.size", "torch.zeros.float", "torch.zeros.float", "torch.zeros.float"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "output", ",", "labels", ")", ":", "\n", "        ", "labels", "=", "labels", ".", "data", ".", "cpu", "(", ")", "\n", "zero_", "=", "torch", ".", "zeros", "(", "labels", ".", "size", "(", "0", ")", ",", "200", ")", "\n", "index", "=", "torch", ".", "unsqueeze", "(", "labels", ",", "1", ")", "\n", "zero_", ".", "scatter_", "(", "1", ",", "index", ",", "1", ")", "\n", "labels", "=", "zero_", ".", "float", "(", ")", ".", "cuda", "(", ")", "\n", "\n", "loss_cls", "=", "F", ".", "multilabel_soft_margin_loss", "(", "output", ",", "labels", ")", "\n", "return", "loss_cls", "\n", "", "", ""]], "home.repos.pwc.inspect_result.wpy1999_bas.Model.mobilenet.Model.__init__": [[14, 64], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "mobilenet.Model._initialize_weights", "copy.deepcopy", "copy.deepcopy", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "mobilenet.Model.__init__.conv_bn"], "methods", ["home.repos.pwc.inspect_result.wpy1999_bas.ILSVRC.DataLoader.ImageDataset.__init__", "home.repos.pwc.inspect_result.wpy1999_bas.Model.inception.Model._initialize_weights"], ["        ", "super", "(", "Model", ",", "self", ")", ".", "__init__", "(", ")", "\n", "def", "conv_bn", "(", "inp", ",", "oup", ",", "stride", ")", ":", "\n", "            ", "return", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "inp", ",", "oup", ",", "3", ",", "stride", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "oup", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", ")", "\n", "", "def", "conv_dw", "(", "inp", ",", "oup", ",", "stride", ")", ":", "\n", "            ", "return", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "inp", ",", "inp", ",", "3", ",", "stride", ",", "1", ",", "groups", "=", "inp", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "inp", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "\n", "nn", ".", "Conv2d", "(", "inp", ",", "oup", ",", "1", ",", "1", ",", "0", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "oup", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", ")", "\n", "", "self", ".", "model", "=", "nn", ".", "Sequential", "(", "\n", "conv_bn", "(", "3", ",", "32", ",", "2", ")", ",", "## ->112", "\n", "conv_dw", "(", "32", ",", "64", ",", "1", ")", ",", "\n", "conv_dw", "(", "64", ",", "128", ",", "2", ")", ",", "## ->56", "\n", "conv_dw", "(", "128", ",", "128", ",", "1", ")", ",", "\n", "conv_dw", "(", "128", ",", "256", ",", "2", ")", ",", "## ->28", "\n", "conv_dw", "(", "256", ",", "256", ",", "1", ")", ",", "\n", "conv_dw", "(", "256", ",", "512", ",", "1", ")", ",", "\n", "conv_dw", "(", "512", ",", "512", ",", "1", ")", ",", "\n", "conv_dw", "(", "512", ",", "512", ",", "1", ")", ",", "\n", "conv_dw", "(", "512", ",", "512", ",", "1", ")", ",", "\n", "conv_dw", "(", "512", ",", "512", ",", "1", ")", ",", "\n", "conv_dw", "(", "512", ",", "512", ",", "1", ")", ",", "\n", "conv_dw", "(", "512", ",", "1024", ",", "2", ")", ",", "## ->14", "\n", "conv_dw", "(", "1024", ",", "1024", ",", "1", ")", ",", "\n", ")", "\n", "self", ".", "avg_pool", "=", "nn", ".", "AvgPool2d", "(", "14", ")", "\n", "self", ".", "classifier_cls", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "1024", ",", "1024", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "1024", ",", "1024", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "1024", ",", "200", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", ")", "\n", "self", ".", "classifier_loc", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "512", ",", "200", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "Sigmoid", "(", ")", ",", "\n", ")", "\n", "self", ".", "_initialize_weights", "(", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ",", "label", "=", "None", ",", "N", "=", "1", ")", ":", "\n", "        ", "erase_branch", "=", "copy", ".", "deepcopy", "(", "self", ".", "model", "[", "-", "2", ":", "]", ")", "\n", "classifier_cls_copy", "=", "copy", ".", "deepcopy", "(", "self", ".", "classifier_cls", ")", "\n"]], "home.repos.pwc.inspect_result.wpy1999_bas.Model.mobilenet.Model.forward": [[65, 126], ["mobilenet.Model.weight_deepcopy", "mobilenet.Model.size", "mobilenet.Model.clone", "mobilenet.Model.classifier_cls", "mobilenet.Model.avg_pool().view", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "range", "mobilenet.Model.classifier_loc", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "range", "mobilenet.Model.erase_branch", "mobilenet.Model.classifier_cls_copy", "mobilenet.Model.avg_pool().view", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "range", "mobilenet.Model.avg_pool().squeeze().squeeze", "mobilenet.Model.x_sum.clone().detach", "x_saliency.mean.mean.clone().view", "x_saliency.mean.mean.mean", "loss_loc.mean.mean.mean", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss.cuda", "torch.CrossEntropyLoss.cuda", "mobilenet.Model.size", "label.unsqueeze", "mobilenet.Model.score_1.topk", "[].mean", "mobilenet.Model.clone.detach", "mobilenet.Model.size", "mobilenet.Model.avg_pool", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "mobilenet.Model.avg_pool", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "mobilenet.Model.avg_pool().squeeze", "mobilenet.Model.x_sum.clone", "x_saliency.mean.mean.clone", "torch.CrossEntropyLoss.", "torch.CrossEntropyLoss.", "mobilenet.Model.avg_pool"], "methods", ["home.repos.pwc.inspect_result.wpy1999_bas.Model.resnet.ResNetCam.weight_deepcopy"], ["\n", "batch", "=", "x", ".", "size", "(", "0", ")", "\n", "x", "=", "self", ".", "model", "[", ":", "-", "2", "]", "(", "x", ")", "\n", "x_4", "=", "x", ".", "clone", "(", ")", "\n", "x", "=", "self", ".", "model", "[", "-", "2", ":", "]", "(", "x", ")", "\n", "x", "=", "self", ".", "classifier_cls", "(", "x", ")", "\n", "self", ".", "feature_map", "=", "x", "\n", "\n", "## score", "\n", "x", "=", "self", ".", "avg_pool", "(", "x", ")", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "self", ".", "score_1", "=", "x", "\n", "\n", "# p_label ", "\n", "if", "N", "==", "1", ":", "\n", "            ", "p_label", "=", "label", ".", "unsqueeze", "(", "-", "1", ")", "\n", "", "else", ":", "\n", "            ", "_", ",", "p_label", "=", "self", ".", "score_1", ".", "topk", "(", "N", ",", "1", ",", "True", ",", "True", ")", "\n", "\n", "# x_sum   ", "\n", "", "self", ".", "x_sum", "=", "torch", ".", "zeros", "(", "batch", ")", ".", "cuda", "(", ")", "\n", "for", "i", "in", "range", "(", "batch", ")", ":", "\n", "            ", "self", ".", "x_sum", "[", "i", "]", "=", "self", ".", "score_1", "[", "i", "]", "[", "label", "[", "i", "]", "]", "\n", "\n", "## x_saliency    ", "\n", "", "x_saliency_all", "=", "self", ".", "classifier_loc", "(", "x_4", ")", "\n", "x_saliency", "=", "torch", ".", "zeros", "(", "batch", ",", "1", ",", "28", ",", "28", ")", ".", "cuda", "(", ")", "\n", "for", "i", "in", "range", "(", "batch", ")", ":", "\n", "            ", "x_saliency", "[", "i", "]", "[", "0", "]", "=", "x_saliency_all", "[", "i", "]", "[", "p_label", "[", "i", "]", "]", ".", "mean", "(", "0", ")", "\n", "", "self", ".", "x_saliency", "=", "x_saliency", "\n", "\n", "## erase", "\n", "x_erase", "=", "x_4", ".", "detach", "(", ")", "*", "(", "1", "-", "x_saliency", ")", "\n", "x_erase", "=", "erase_branch", "(", "x_erase", ")", "\n", "x_erase", "=", "classifier_cls_copy", "(", "x_erase", ")", "\n", "x_erase", "=", "self", ".", "avg_pool", "(", "x_erase", ")", ".", "view", "(", "x_erase", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "\n", "## x_erase_sum", "\n", "self", ".", "x_erase_sum", "=", "torch", ".", "zeros", "(", "batch", ")", ".", "cuda", "(", ")", "\n", "for", "i", "in", "range", "(", "batch", ")", ":", "\n", "            ", "self", ".", "x_erase_sum", "[", "i", "]", "=", "x_erase", "[", "i", "]", "[", "label", "[", "i", "]", "]", "\n", "\n", "## score_2", "\n", "", "x", "=", "self", ".", "feature_map", "*", "nn", ".", "AvgPool2d", "(", "2", ")", "(", "self", ".", "x_saliency", ")", "\n", "self", ".", "score_2", "=", "self", ".", "avg_pool", "(", "x", ")", ".", "squeeze", "(", "-", "1", ")", ".", "squeeze", "(", "-", "1", ")", "\n", "\n", "return", "self", ".", "score_1", ",", "self", ".", "score_2", "\n", "\n", "", "def", "bas_loss", "(", "self", ")", ":", "\n", "        ", "batch", "=", "self", ".", "x_sum", ".", "size", "(", "0", ")", "\n", "x_sum", "=", "self", ".", "x_sum", ".", "clone", "(", ")", ".", "detach", "(", ")", "\n", "x_res", "=", "self", ".", "x_erase_sum", "\n", "res", "=", "x_res", "/", "(", "x_sum", "+", "1e-8", ")", "\n", "res", "[", "x_res", ">=", "x_sum", "]", "=", "0", "## or 1", "\n", "\n", "x_saliency", "=", "self", ".", "x_saliency", "\n", "x_saliency", "=", "x_saliency", ".", "clone", "(", ")", ".", "view", "(", "batch", ",", "-", "1", ")", "\n", "x_saliency", "=", "x_saliency", ".", "mean", "(", "1", ")", "\n", "\n", "loss", "=", "res", "+", "x_saliency", "*", "1.5", "\n", "loss", "=", "loss", ".", "mean", "(", "0", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.wpy1999_bas.Model.mobilenet.Model.bas_loss": [[112, 126], ["mobilenet.Model.x_sum.size", "mobilenet.Model.x_sum.clone().detach", "x_saliency.mean.mean.clone().view", "x_saliency.mean.mean.mean", "loss.mean.mean.mean", "mobilenet.Model.x_sum.clone", "x_saliency.mean.mean.clone"], "methods", ["None"], ["", "def", "bas_loss", "(", "self", ")", ":", "\n", "        ", "batch", "=", "self", ".", "x_sum", ".", "size", "(", "0", ")", "\n", "x_sum", "=", "self", ".", "x_sum", ".", "clone", "(", ")", ".", "detach", "(", ")", "\n", "x_res", "=", "self", ".", "x_erase_sum", "\n", "res", "=", "x_res", "/", "(", "x_sum", "+", "1e-8", ")", "\n", "res", "[", "x_res", ">=", "x_sum", "]", "=", "0", "## or 1", "\n", "\n", "x_saliency", "=", "self", ".", "x_saliency", "\n", "x_saliency", "=", "x_saliency", ".", "clone", "(", ")", ".", "view", "(", "batch", ",", "-", "1", ")", "\n", "x_saliency", "=", "x_saliency", ".", "mean", "(", "1", ")", "\n", "\n", "loss", "=", "res", "+", "x_saliency", "*", "1.5", "\n", "loss", "=", "loss", ".", "mean", "(", "0", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.wpy1999_bas.Model.mobilenet.Model.normalize_atten_maps": [[127, 138], ["atten_maps.size", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "atten_normed.view.view.view", "atten_maps.view", "atten_maps.view", "atten_maps.view"], "methods", ["None"], ["", "def", "normalize_atten_maps", "(", "self", ",", "atten_maps", ")", ":", "\n", "        ", "atten_shape", "=", "atten_maps", ".", "size", "(", ")", "\n", "\n", "#--------------------------", "\n", "batch_mins", ",", "_", "=", "torch", ".", "min", "(", "atten_maps", ".", "view", "(", "atten_shape", "[", "0", ":", "-", "2", "]", "+", "(", "-", "1", ",", ")", ")", ",", "dim", "=", "-", "1", ",", "keepdim", "=", "True", ")", "\n", "batch_maxs", ",", "_", "=", "torch", ".", "max", "(", "atten_maps", ".", "view", "(", "atten_shape", "[", "0", ":", "-", "2", "]", "+", "(", "-", "1", ",", ")", ")", ",", "dim", "=", "-", "1", ",", "keepdim", "=", "True", ")", "\n", "atten_normed", "=", "torch", ".", "div", "(", "atten_maps", ".", "view", "(", "atten_shape", "[", "0", ":", "-", "2", "]", "+", "(", "-", "1", ",", ")", ")", "-", "batch_mins", ",", "\n", "batch_maxs", "-", "batch_mins", "+", "1e-10", ")", "\n", "atten_normed", "=", "atten_normed", ".", "view", "(", "atten_shape", ")", "\n", "\n", "return", "atten_normed", "\n", "\n"]], "home.repos.pwc.inspect_result.wpy1999_bas.Model.mobilenet.Model._initialize_weights": [[140, 152], ["mobilenet.Model.modules", "isinstance", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "isinstance", "m.bias.data.zero_", "m.weight.data.fill_", "m.bias.data.zero_", "isinstance", "m.weight.data.normal_", "m.bias.data.zero_"], "methods", ["None"], ["        ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "xavier_uniform_", "(", "m", ".", "weight", ".", "data", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "0.01", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.wpy1999_bas.Model.mobilenet.model": [[165, 181], ["mobilenet.Model", "torch.load", "torch.load", "torch.load", "Model.state_dict", "enumerate", "enumerate", "Model.load_state_dict", "print", "model.state_dict.items", "model_conv_name.append", "torch.load.items"], "function", ["None"], ["", "for", "i", ",", "(", "k", ",", "v", ")", "in", "enumerate", "(", "pretrained_dict", ".", "items", "(", ")", ")", ":", "\n", "            ", "model_dict", "[", "model_conv_name", "[", "i", "]", "]", "=", "v", "\n", "", "model", ".", "load_state_dict", "(", "model_dict", ")", "\n", "", "print", "(", "\"pretrained weight load complete..\"", ")", "\n", "return", "model", "", "", ""]], "home.repos.pwc.inspect_result.wpy1999_bas.Model.vgg.Model.__init__": [[11, 69], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "copy.deepcopy", "copy.deepcopy", "copy.deepcopy", "copy.deepcopy", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.wpy1999_bas.ILSVRC.DataLoader.ImageDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "super", "(", "Model", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "args", "=", "args", "\n", "self", ".", "num_classes", "=", "args", ".", "num_classes", "\n", "self", ".", "conv1_1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "## -> 64x224x224", "\n", "self", ".", "relu1_1", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv1_2", "=", "nn", ".", "Conv2d", "(", "64", ",", "64", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "## -> 64x224x224", "\n", "self", ".", "relu1_2", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "pool1", "=", "nn", ".", "MaxPool2d", "(", "2", ")", "## -> 64x112x112", "\n", "\n", "self", ".", "conv2_1", "=", "nn", ".", "Conv2d", "(", "64", ",", "128", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "## -> 128x112x112", "\n", "self", ".", "relu2_1", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2_2", "=", "nn", ".", "Conv2d", "(", "128", ",", "128", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "## -> 128x112x112", "\n", "self", ".", "relu2_2", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "pool2", "=", "nn", ".", "MaxPool2d", "(", "2", ")", "## -> 128x56x56", "\n", "\n", "self", ".", "conv3_1", "=", "nn", ".", "Conv2d", "(", "128", ",", "256", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "## -> 256x56x56", "\n", "self", ".", "relu3_1", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv3_2", "=", "nn", ".", "Conv2d", "(", "256", ",", "256", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "## -> 256x56x56", "\n", "self", ".", "relu3_2", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv3_3", "=", "nn", ".", "Conv2d", "(", "256", ",", "256", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "## -> 256x56x56", "\n", "self", ".", "relu3_3", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "pool3", "=", "nn", ".", "MaxPool2d", "(", "2", ")", "## -> 256x28x28 ", "\n", "\n", "self", ".", "conv4_1", "=", "nn", ".", "Conv2d", "(", "256", ",", "512", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "## -> 512x28x28", "\n", "self", ".", "relu4_1", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv4_2", "=", "nn", ".", "Conv2d", "(", "512", ",", "512", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "## -> 512x28x28", "\n", "self", ".", "relu4_2", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv4_3", "=", "nn", ".", "Conv2d", "(", "512", ",", "512", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "## -> 512x28x28", "\n", "self", ".", "relu4_3", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "pool4", "=", "nn", ".", "MaxPool2d", "(", "2", ")", "## -> 512x14x14", "\n", "\n", "self", ".", "conv5_1", "=", "nn", ".", "Conv2d", "(", "512", ",", "512", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "## -> 512x14x14", "\n", "self", ".", "relu5_1", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv5_2", "=", "nn", ".", "Conv2d", "(", "512", ",", "512", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "## -> 512x14x14", "\n", "self", ".", "relu5_2", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv5_3", "=", "nn", ".", "Conv2d", "(", "512", ",", "512", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "## -> 512x14x14", "\n", "self", ".", "relu5_3", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "pool5", "=", "nn", ".", "MaxPool2d", "(", "2", ")", "\n", "\n", "self", ".", "avg_pool", "=", "nn", ".", "AvgPool2d", "(", "14", ")", "## ->(512,1,1)", "\n", "\n", "self", ".", "classifier_cls", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "512", ",", "1024", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "1024", ",", "1024", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "1024", ",", "200", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", ")", "\n", "self", ".", "classifier_loc", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "512", ",", "200", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "## num_classes", "\n", "nn", ".", "Sigmoid", "(", ")", ",", "\n", ")", "\n", "", "def", "forward", "(", "self", ",", "x", ",", "label", "=", "None", ",", "N", "=", "1", ")", ":", "\n", "        ", "conv_copy_5_1", "=", "copy", ".", "deepcopy", "(", "self", ".", "conv5_1", ")", "\n", "relu_copy_5_1", "=", "copy", ".", "deepcopy", "(", "self", ".", "relu5_1", ")", "\n", "conv_copy_5_2", "=", "copy", ".", "deepcopy", "(", "self", ".", "conv5_2", ")", "\n", "relu_copy_5_2", "=", "copy", ".", "deepcopy", "(", "self", ".", "relu5_2", ")", "\n"]], "home.repos.pwc.inspect_result.wpy1999_bas.Model.vgg.Model.forward": [[70, 174], ["vgg.Model.weight_deepcopy", "vgg.Model.size", "vgg.Model.conv1_1", "vgg.Model.relu1_1", "vgg.Model.conv1_2", "vgg.Model.relu1_2", "vgg.Model.pool1", "vgg.Model.conv2_1", "vgg.Model.relu2_1", "vgg.Model.conv2_2", "vgg.Model.relu2_2", "vgg.Model.pool2", "vgg.Model.conv3_1", "vgg.Model.relu3_1", "vgg.Model.conv3_2", "vgg.Model.relu3_2", "vgg.Model.conv3_3", "vgg.Model.relu3_3", "vgg.Model.pool3", "vgg.Model.conv4_1", "vgg.Model.relu4_1", "vgg.Model.conv4_2", "vgg.Model.relu4_2", "vgg.Model.conv4_3", "vgg.Model.relu4_3", "vgg.Model.clone", "vgg.Model.pool4", "vgg.Model.conv5_1", "vgg.Model.relu5_1", "vgg.Model.conv5_2", "vgg.Model.relu5_2", "vgg.Model.conv5_3", "vgg.Model.relu5_3", "vgg.Model.classifier_cls", "vgg.Model.avg_pool().view", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "range", "vgg.Model.classifier_loc", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "range", "vgg.Model.pool4", "vgg.Model.conv_copy_5_1", "vgg.Model.relu5_1", "vgg.Model.conv_copy_5_2", "vgg.Model.relu5_2", "vgg.Model.conv_copy_5_3", "vgg.Model.relu5_3", "vgg.Model.classifier_cls_copy", "vgg.Model.avg_pool().view", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "range", "vgg.Model.avg_pool().squeeze().squeeze", "vgg.Model.x_sum.clone().detach", "x_saliency.mean.mean.clone().view", "x_saliency.mean.mean.mean", "loss_loc.mean.mean.mean", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss.cuda", "torch.CrossEntropyLoss.cuda", "vgg.Model.size", "label.unsqueeze", "vgg.Model.score_1.topk", "[].mean", "vgg.Model.clone.detach", "vgg.Model.size", "vgg.Model.avg_pool", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "vgg.Model.avg_pool", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "vgg.Model.avg_pool().squeeze", "vgg.Model.x_sum.clone", "x_saliency.mean.mean.clone", "torch.CrossEntropyLoss.", "torch.CrossEntropyLoss.", "vgg.Model.avg_pool"], "methods", ["home.repos.pwc.inspect_result.wpy1999_bas.Model.resnet.ResNetCam.weight_deepcopy"], ["conv_copy_5_3", "=", "copy", ".", "deepcopy", "(", "self", ".", "conv5_3", ")", "\n", "relu_copy_5_3", "=", "copy", ".", "deepcopy", "(", "self", ".", "relu5_3", ")", "\n", "classifier_cls_copy", "=", "copy", ".", "deepcopy", "(", "self", ".", "classifier_cls", ")", "\n", "\n", "batch", "=", "x", ".", "size", "(", "0", ")", "\n", "x", "=", "self", ".", "conv1_1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu1_1", "(", "x", ")", "\n", "x", "=", "self", ".", "conv1_2", "(", "x", ")", "\n", "x", "=", "self", ".", "relu1_2", "(", "x", ")", "\n", "x", "=", "self", ".", "pool1", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "conv2_1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu2_1", "(", "x", ")", "\n", "x", "=", "self", ".", "conv2_2", "(", "x", ")", "\n", "x", "=", "self", ".", "relu2_2", "(", "x", ")", "\n", "x", "=", "self", ".", "pool2", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "conv3_1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu3_1", "(", "x", ")", "\n", "x", "=", "self", ".", "conv3_2", "(", "x", ")", "\n", "x", "=", "self", ".", "relu3_2", "(", "x", ")", "\n", "x", "=", "self", ".", "conv3_3", "(", "x", ")", "\n", "x", "=", "self", ".", "relu3_3", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "pool3", "(", "x", ")", "\n", "x", "=", "self", ".", "conv4_1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu4_1", "(", "x", ")", "\n", "x", "=", "self", ".", "conv4_2", "(", "x", ")", "\n", "x", "=", "self", ".", "relu4_2", "(", "x", ")", "\n", "x", "=", "self", ".", "conv4_3", "(", "x", ")", "\n", "x", "=", "self", ".", "relu4_3", "(", "x", ")", "\n", "x_4", "=", "x", ".", "clone", "(", ")", "\n", "\n", "x", "=", "self", ".", "pool4", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "conv5_1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu5_1", "(", "x", ")", "\n", "x", "=", "self", ".", "conv5_2", "(", "x", ")", "\n", "x", "=", "self", ".", "relu5_2", "(", "x", ")", "\n", "x", "=", "self", ".", "conv5_3", "(", "x", ")", "\n", "x", "=", "self", ".", "relu5_3", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "classifier_cls", "(", "x", ")", "\n", "self", ".", "feature_map", "=", "x", "\n", "\n", "## score", "\n", "x", "=", "self", ".", "avg_pool", "(", "x", ")", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "self", ".", "score_1", "=", "x", "\n", "\n", "# p_label ", "\n", "if", "N", "==", "1", ":", "\n", "            ", "p_label", "=", "label", ".", "unsqueeze", "(", "-", "1", ")", "\n", "", "else", ":", "\n", "            ", "_", ",", "p_label", "=", "self", ".", "score_1", ".", "topk", "(", "N", ",", "1", ",", "True", ",", "True", ")", "\n", "\n", "# x_sum   ", "\n", "", "self", ".", "x_sum", "=", "torch", ".", "zeros", "(", "batch", ")", ".", "cuda", "(", ")", "\n", "for", "i", "in", "range", "(", "batch", ")", ":", "\n", "            ", "self", ".", "x_sum", "[", "i", "]", "=", "self", ".", "score_1", "[", "i", "]", "[", "label", "[", "i", "]", "]", "\n", "\n", "## x_saliency    ", "\n", "", "x_saliency_all", "=", "self", ".", "classifier_loc", "(", "x_4", ")", "\n", "x_saliency", "=", "torch", ".", "zeros", "(", "batch", ",", "1", ",", "28", ",", "28", ")", ".", "cuda", "(", ")", "\n", "for", "i", "in", "range", "(", "batch", ")", ":", "\n", "            ", "x_saliency", "[", "i", "]", "[", "0", "]", "=", "x_saliency_all", "[", "i", "]", "[", "p_label", "[", "i", "]", "]", ".", "mean", "(", "0", ")", "\n", "", "self", ".", "x_saliency", "=", "x_saliency", "\n", "\n", "## erase ", "\n", "x_erase", "=", "x_4", ".", "detach", "(", ")", "*", "(", "1", "-", "x_saliency", ")", "\n", "\n", "x_erase", "=", "self", ".", "pool4", "(", "x_erase", ")", "\n", "x_erase", "=", "conv_copy_5_1", "(", "x_erase", ")", "\n", "x_erase", "=", "relu_copy_5_1", "(", "x_erase", ")", "\n", "x_erase", "=", "conv_copy_5_2", "(", "x_erase", ")", "\n", "x_erase", "=", "relu_copy_5_2", "(", "x_erase", ")", "\n", "x_erase", "=", "conv_copy_5_3", "(", "x_erase", ")", "\n", "x_erase", "=", "relu_copy_5_3", "(", "x_erase", ")", "\n", "x_erase", "=", "classifier_cls_copy", "(", "x_erase", ")", "\n", "x_erase", "=", "self", ".", "avg_pool", "(", "x_erase", ")", ".", "view", "(", "x_erase", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "\n", "## x_erase_sum", "\n", "self", ".", "x_erase_sum", "=", "torch", ".", "zeros", "(", "batch", ")", ".", "cuda", "(", ")", "\n", "for", "i", "in", "range", "(", "batch", ")", ":", "\n", "            ", "self", ".", "x_erase_sum", "[", "i", "]", "=", "x_erase", "[", "i", "]", "[", "label", "[", "i", "]", "]", "\n", "\n", "## score_2", "\n", "", "x", "=", "self", ".", "feature_map", "*", "nn", ".", "AvgPool2d", "(", "2", ")", "(", "self", ".", "x_saliency", ")", "\n", "self", ".", "score_2", "=", "self", ".", "avg_pool", "(", "x", ")", ".", "squeeze", "(", "-", "1", ")", ".", "squeeze", "(", "-", "1", ")", "\n", "\n", "return", "self", ".", "score_1", ",", "self", ".", "score_2", "\n", "\n", "", "def", "bas_loss", "(", "self", ")", ":", "\n", "        ", "batch", "=", "self", ".", "x_sum", ".", "size", "(", "0", ")", "\n", "x_sum", "=", "self", ".", "x_sum", ".", "clone", "(", ")", ".", "detach", "(", ")", "\n", "x_res", "=", "self", ".", "x_erase_sum", "\n", "res", "=", "x_res", "/", "(", "x_sum", "+", "1e-8", ")", "\n", "res", "[", "x_res", ">=", "x_sum", "]", "=", "0", "## or 1", "\n", "\n", "x_saliency", "=", "self", ".", "x_saliency", "\n", "x_saliency", "=", "x_saliency", ".", "clone", "(", ")", ".", "view", "(", "batch", ",", "-", "1", ")", "\n", "x_saliency", "=", "x_saliency", ".", "mean", "(", "1", ")", "\n", "\n", "loss", "=", "res", "+", "x_saliency", "*", "0.7", "\n", "loss", "=", "loss", ".", "mean", "(", "0", ")", "\n", "return", "loss", "\n"]], "home.repos.pwc.inspect_result.wpy1999_bas.Model.vgg.Model.bas_loss": [[161, 175], ["vgg.Model.x_sum.size", "vgg.Model.x_sum.clone().detach", "x_saliency.mean.mean.clone().view", "x_saliency.mean.mean.mean", "loss.mean.mean.mean", "vgg.Model.x_sum.clone", "x_saliency.mean.mean.clone"], "methods", ["None"], ["", "def", "bas_loss", "(", "self", ")", ":", "\n", "        ", "batch", "=", "self", ".", "x_sum", ".", "size", "(", "0", ")", "\n", "x_sum", "=", "self", ".", "x_sum", ".", "clone", "(", ")", ".", "detach", "(", ")", "\n", "x_res", "=", "self", ".", "x_erase_sum", "\n", "res", "=", "x_res", "/", "(", "x_sum", "+", "1e-8", ")", "\n", "res", "[", "x_res", ">=", "x_sum", "]", "=", "0", "## or 1", "\n", "\n", "x_saliency", "=", "self", ".", "x_saliency", "\n", "x_saliency", "=", "x_saliency", ".", "clone", "(", ")", ".", "view", "(", "batch", ",", "-", "1", ")", "\n", "x_saliency", "=", "x_saliency", ".", "mean", "(", "1", ")", "\n", "\n", "loss", "=", "res", "+", "x_saliency", "*", "0.7", "\n", "loss", "=", "loss", ".", "mean", "(", "0", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.wpy1999_bas.Model.vgg.Model.normalize_atten_maps": [[175, 186], ["atten_maps.size", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "atten_normed.view.view.view", "atten_maps.view", "atten_maps.view", "atten_maps.view"], "methods", ["None"], ["\n", "", "def", "normalize_atten_maps", "(", "self", ",", "atten_maps", ")", ":", "\n", "        ", "atten_shape", "=", "atten_maps", ".", "size", "(", ")", "\n", "\n", "#--------------------------", "\n", "batch_mins", ",", "_", "=", "torch", ".", "min", "(", "atten_maps", ".", "view", "(", "atten_shape", "[", "0", ":", "-", "2", "]", "+", "(", "-", "1", ",", ")", ")", ",", "dim", "=", "-", "1", ",", "keepdim", "=", "True", ")", "\n", "batch_maxs", ",", "_", "=", "torch", ".", "max", "(", "atten_maps", ".", "view", "(", "atten_shape", "[", "0", ":", "-", "2", "]", "+", "(", "-", "1", ",", ")", ")", ",", "dim", "=", "-", "1", ",", "keepdim", "=", "True", ")", "\n", "atten_normed", "=", "torch", ".", "div", "(", "atten_maps", ".", "view", "(", "atten_shape", "[", "0", ":", "-", "2", "]", "+", "(", "-", "1", ",", ")", ")", "-", "batch_mins", ",", "\n", "batch_maxs", "-", "batch_mins", "+", "1e-10", ")", "\n", "atten_normed", "=", "atten_normed", ".", "view", "(", "atten_shape", ")", "\n", "\n", "return", "atten_normed", "\n"]], "home.repos.pwc.inspect_result.wpy1999_bas.Model.vgg.weight_init": [[200, 210], ["classname.find", "m.weight.data.normal_", "classname.find", "m.weight.data.normal_", "m.bias.data.fill_", "classname.find", "m.weight.data.normal_", "m.weight.data.fill_"], "function", ["None"], ["\n", "    ", "model", "=", "Model", "(", "args", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "apply", "(", "weight_init", ")", "\n", "pretrained_dict", "=", "torch", ".", "load", "(", "'vgg16.pth'", ")", "\n", "model_dict", "=", "model", ".", "state_dict", "(", ")", "\n", "model_conv_name", "=", "[", "]", "\n", "\n", "for", "i", ",", "(", "k", ",", "v", ")", "in", "enumerate", "(", "model_dict", ".", "items", "(", ")", ")", ":", "\n", "            ", "model_conv_name", ".", "append", "(", "k", ")", "\n", "", "for", "i", ",", "(", "k", ",", "v", ")", "in", "enumerate", "(", "pretrained_dict", ".", "items", "(", ")", ")", ":", "\n"]], "home.repos.pwc.inspect_result.wpy1999_bas.Model.vgg.model": [[211, 229], ["vgg.Model", "Model.apply", "torch.load", "torch.load", "torch.load", "Model.state_dict", "enumerate", "enumerate", "Model.load_state_dict", "print", "model.state_dict.items", "model_conv_name.append", "torch.load.items", "numpy.shape", "numpy.shape", "k.split"], "function", ["None"], ["            ", "if", "k", ".", "split", "(", "'.'", ")", "[", "0", "]", "!=", "'features'", ":", "\n", "                ", "break", "\n", "", "if", "np", ".", "shape", "(", "model_dict", "[", "model_conv_name", "[", "i", "]", "]", ")", "==", "np", ".", "shape", "(", "v", ")", ":", "\n", "                ", "model_dict", "[", "model_conv_name", "[", "i", "]", "]", "=", "v", "\n", "", "", "model", ".", "load_state_dict", "(", "model_dict", ")", "\n", "print", "(", "\"pretrained weight load complete..\"", ")", "\n", "", "return", "model", "", "", ""]], "home.repos.pwc.inspect_result.wpy1999_bas.Model.inception.Model.__init__": [[15, 57], ["torch.Module.__init__", "inception.BasicConv2d", "inception.BasicConv2d", "inception.BasicConv2d", "inception.BasicConv2d", "inception.BasicConv2d", "inception.InceptionA", "inception.InceptionA", "inception.InceptionA", "inception.InceptionB", "inception.InceptionC", "inception.InceptionC", "inception.InceptionC", "inception.InceptionC", "inception.InceptionD", "inception.InceptionE", "inception.InceptionE", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "inception.Model._initialize_weights", "copy.deepcopy", "copy.deepcopy", "copy.deepcopy", "copy.deepcopy", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.wpy1999_bas.ILSVRC.DataLoader.ImageDataset.__init__", "home.repos.pwc.inspect_result.wpy1999_bas.Model.inception.Model._initialize_weights"], ["self", ".", "Conv2d_2a_3x3", "=", "BasicConv2d", "(", "32", ",", "32", ",", "kernel_size", "=", "3", ")", "\n", "self", ".", "Conv2d_2b_3x3", "=", "BasicConv2d", "(", "32", ",", "64", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "Conv2d_3b_1x1", "=", "BasicConv2d", "(", "64", ",", "80", ",", "kernel_size", "=", "1", ")", "\n", "self", ".", "Conv2d_4a_3x3", "=", "BasicConv2d", "(", "80", ",", "192", ",", "kernel_size", "=", "3", ")", "\n", "self", ".", "Mixed_5b", "=", "InceptionA", "(", "192", ",", "pool_features", "=", "32", ")", "\n", "self", ".", "Mixed_5c", "=", "InceptionA", "(", "256", ",", "pool_features", "=", "64", ")", "\n", "self", ".", "Mixed_5d", "=", "InceptionA", "(", "288", ",", "pool_features", "=", "64", ")", "\n", "self", ".", "Mixed_6a", "=", "InceptionB", "(", "288", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "Mixed_6b", "=", "InceptionC", "(", "768", ",", "channels_7x7", "=", "128", ")", "\n", "self", ".", "Mixed_6c", "=", "InceptionC", "(", "768", ",", "channels_7x7", "=", "160", ")", "\n", "self", ".", "Mixed_6d", "=", "InceptionC", "(", "768", ",", "channels_7x7", "=", "160", ")", "\n", "self", ".", "Mixed_6e", "=", "InceptionC", "(", "768", ",", "channels_7x7", "=", "192", ")", "\n", "\n", "self", ".", "Mixed_7a", "=", "InceptionD", "(", "768", ")", "\n", "self", ".", "Mixed_7b", "=", "InceptionE", "(", "1280", ")", "\n", "self", ".", "Mixed_7c", "=", "InceptionE", "(", "2048", ")", "\n", "\n", "self", ".", "avg_pool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "## ->(512,1,1)", "\n", "\n", "self", ".", "classifier", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "2048", ",", "1024", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "1024", ",", "1024", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "1024", ",", "200", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", ")", "\n", "\n", "self", ".", "classifier_loc", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "768", ",", "200", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "Sigmoid", "(", ")", ",", "\n", ")", "\n", "\n", "self", ".", "_initialize_weights", "(", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ",", "label", "=", "None", ",", "N", "=", "1", ")", ":", "\n", "        ", "classifier_copy", "=", "copy", ".", "deepcopy", "(", "self", ".", "classifier", ")", "\n", "Mixed_7a_copy", "=", "copy", ".", "deepcopy", "(", "self", ".", "Mixed_7a", ")", "\n", "Mixed_7b_copy", "=", "copy", ".", "deepcopy", "(", "self", ".", "Mixed_7b", ")", "\n", "Mixed_7c_copy", "=", "copy", ".", "deepcopy", "(", "self", ".", "Mixed_7c", ")", "\n", "\n", "batch", "=", "x", ".", "size", "(", "0", ")", "\n", "x", "=", "self", ".", "Conv2d_1a_3x3", "(", "x", ")", "\n"]], "home.repos.pwc.inspect_result.wpy1999_bas.Model.inception.Model.forward": [[58, 154], ["inception.Model.weight_deepcopy", "inception.Model.size", "inception.Model.Conv2d_1a_3x3", "inception.Model.Conv2d_2a_3x3", "inception.Model.Conv2d_2b_3x3", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "inception.Model.Conv2d_3b_1x1", "inception.Model.Conv2d_4a_3x3", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "inception.Model.Mixed_5b", "inception.Model.Mixed_5c", "inception.Model.Mixed_5d", "inception.Model.Mixed_6a", "inception.Model.Mixed_6b", "inception.Model.Mixed_6c", "inception.Model.Mixed_6d", "inception.Model.Mixed_6e", "inception.Model.clone", "inception.Model.Mixed_7a", "inception.Model.Mixed_7b", "inception.Model.Mixed_7c", "inception.Model.classifier_cls", "inception.Model.avg_pool().view", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "range", "inception.Model.classifier_loc", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "range", "inception.Model.Mixed_7a_copy", "inception.Model.Mixed_7b_copy", "inception.Model.Mixed_7c_copy", "inception.Model.classifier_cls_copy", "inception.Model.avg_pool().view", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "range", "inception.Model.avg_pool().squeeze().squeeze", "inception.Model.x_sum.clone().detach", "x_saliency.mean.mean.clone().view", "x_saliency.mean.mean.mean", "loss_loc.mean.mean.mean", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss.cuda", "torch.CrossEntropyLoss.cuda", "inception.Model.size", "label.unsqueeze", "inception.Model.score_1.topk", "[].mean", "inception.Model.clone.detach", "inception.Model.size", "inception.Model.avg_pool", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "inception.Model.avg_pool", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "inception.Model.avg_pool().squeeze", "inception.Model.x_sum.clone", "x_saliency.mean.mean.clone", "torch.CrossEntropyLoss.", "torch.CrossEntropyLoss.", "inception.Model.avg_pool"], "methods", ["home.repos.pwc.inspect_result.wpy1999_bas.Model.resnet.ResNetCam.weight_deepcopy"], ["# 112 x 112 x 32", "\n", "x", "=", "self", ".", "Conv2d_2a_3x3", "(", "x", ")", "\n", "# 112 x 112 x 32", "\n", "x", "=", "self", ".", "Conv2d_2b_3x3", "(", "x", ")", "\n", "# 112 x 112 x 32", "\n", "x", "=", "F", ".", "max_pool2d", "(", "x", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "ceil_mode", "=", "True", ")", "\n", "# 56 x 56 x 64", "\n", "x", "=", "self", ".", "Conv2d_3b_1x1", "(", "x", ")", "\n", "# 56 x 56 x 64", "\n", "x", "=", "self", ".", "Conv2d_4a_3x3", "(", "x", ")", "\n", "# 56 x 56 x 64", "\n", "x", "=", "F", ".", "max_pool2d", "(", "x", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "ceil_mode", "=", "True", ")", "\n", "# 28 x 28 x 192", "\n", "\n", "x", "=", "self", ".", "Mixed_5b", "(", "x", ")", "\n", "# 28 x 28 x 192", "\n", "x", "=", "self", ".", "Mixed_5c", "(", "x", ")", "\n", "# 28 x 28 x 192", "\n", "x", "=", "self", ".", "Mixed_5d", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "Mixed_6a", "(", "x", ")", "\n", "x", "=", "self", ".", "Mixed_6b", "(", "x", ")", "\n", "x", "=", "self", ".", "Mixed_6c", "(", "x", ")", "\n", "x", "=", "self", ".", "Mixed_6d", "(", "x", ")", "\n", "x", "=", "self", ".", "Mixed_6e", "(", "x", ")", "\n", "x_3", "=", "x", ".", "clone", "(", ")", "\n", "# 14 x 14 x 768", "\n", "x", "=", "self", ".", "Mixed_7a", "(", "x", ")", "\n", "x", "=", "self", ".", "Mixed_7b", "(", "x", ")", "\n", "x", "=", "self", ".", "Mixed_7c", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "classifier", "(", "x", ")", "\n", "self", ".", "feature_map", "=", "x", "\n", "\n", "## score", "\n", "x", "=", "self", ".", "avg_pool", "(", "x", ")", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "self", ".", "score_1", "=", "x", "\n", "\n", "# p_label ", "\n", "if", "N", "==", "1", ":", "\n", "            ", "p_label", "=", "label", ".", "unsqueeze", "(", "-", "1", ")", "\n", "", "else", ":", "\n", "            ", "_", ",", "p_label", "=", "self", ".", "score_1", ".", "topk", "(", "N", ",", "1", ",", "True", ",", "True", ")", "\n", "\n", "# x_sum   ", "\n", "", "self", ".", "x_sum", "=", "torch", ".", "zeros", "(", "batch", ")", ".", "cuda", "(", ")", "\n", "for", "i", "in", "range", "(", "batch", ")", ":", "\n", "            ", "self", ".", "x_sum", "[", "i", "]", "=", "self", ".", "score_1", "[", "i", "]", "[", "label", "[", "i", "]", "]", "\n", "\n", "## x_saliency    ", "\n", "", "x_saliency_all", "=", "self", ".", "classifier_loc", "(", "x_3", ")", "\n", "x_saliency", "=", "torch", ".", "zeros", "(", "batch", ",", "1", ",", "28", ",", "28", ")", ".", "cuda", "(", ")", "\n", "for", "i", "in", "range", "(", "batch", ")", ":", "\n", "            ", "x_saliency", "[", "i", "]", "[", "0", "]", "=", "x_saliency_all", "[", "i", "]", "[", "p_label", "[", "i", "]", "]", ".", "mean", "(", "0", ")", "\n", "", "self", ".", "x_saliency", "=", "x_saliency", "\n", "\n", "## erase", "\n", "x_erase", "=", "x_3", ".", "detach", "(", ")", "*", "(", "1", "-", "x_saliency", ")", "\n", "x_erase", "=", "Mixed_7a_copy", "(", "x_erase", ")", "\n", "x_erase", "=", "Mixed_7b_copy", "(", "x_erase", ")", "\n", "x_erase", "=", "Mixed_7c_copy", "(", "x_erase", ")", "\n", "\n", "x_erase", "=", "classifier_copy", "(", "x_erase", ")", "\n", "x_erase", "=", "self", ".", "avg_pool", "(", "x_erase", ")", ".", "view", "(", "x_erase", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "\n", "## x_erase_sum", "\n", "self", ".", "x_erase_sum", "=", "torch", ".", "zeros", "(", "batch", ")", ".", "cuda", "(", ")", "\n", "for", "i", "in", "range", "(", "batch", ")", ":", "\n", "            ", "self", ".", "x_erase_sum", "[", "i", "]", "=", "x_erase", "[", "i", "]", "[", "label", "[", "i", "]", "]", "\n", "\n", "## score_2", "\n", "", "x", "=", "self", ".", "feature_map", "*", "nn", ".", "AvgPool2d", "(", "2", ")", "(", "x_saliency", ")", "\n", "self", ".", "score_2", "=", "self", ".", "avg_pool", "(", "x", ")", ".", "squeeze", "(", "-", "1", ")", ".", "squeeze", "(", "-", "1", ")", "\n", "\n", "return", "self", ".", "score_1", ",", "self", ".", "score_2", "\n", "\n", "", "def", "bas_loss", "(", "self", ")", ":", "\n", "        ", "batch", "=", "self", ".", "x_sum", ".", "size", "(", "0", ")", "\n", "x_sum", "=", "self", ".", "x_sum", ".", "clone", "(", ")", ".", "detach", "(", ")", "\n", "x_res", "=", "self", ".", "x_erase_sum", "\n", "res", "=", "x_res", "/", "(", "x_sum", "+", "1e-8", ")", "\n", "res", "[", "x_res", ">=", "x_sum", "]", "=", "0", "## or 1", "\n", "\n", "x_saliency", "=", "self", ".", "x_saliency", "\n", "x_saliency", "=", "x_saliency", ".", "clone", "(", ")", ".", "view", "(", "batch", ",", "-", "1", ")", "\n", "x_saliency", "=", "x_saliency", ".", "mean", "(", "1", ")", "\n", "\n", "loss", "=", "res", "+", "x_saliency", "*", "1.0", "\n", "loss", "=", "loss", ".", "mean", "(", "0", ")", "\n", "return", "loss", "\n", "\n", "", "def", "_initialize_weights", "(", "self", ")", ":", "\n", "        ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "xavier_uniform_", "(", "m", ".", "weight", ".", "data", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n"]], "home.repos.pwc.inspect_result.wpy1999_bas.Model.inception.Model.bas_loss": [[134, 148], ["inception.Model.x_sum.size", "inception.Model.x_sum.clone().detach", "x_saliency.mean.mean.clone().view", "x_saliency.mean.mean.mean", "loss.mean.mean.mean", "inception.Model.x_sum.clone", "x_saliency.mean.mean.clone"], "methods", ["None"], ["", "def", "bas_loss", "(", "self", ")", ":", "\n", "        ", "batch", "=", "self", ".", "x_sum", ".", "size", "(", "0", ")", "\n", "x_sum", "=", "self", ".", "x_sum", ".", "clone", "(", ")", ".", "detach", "(", ")", "\n", "x_res", "=", "self", ".", "x_erase_sum", "\n", "res", "=", "x_res", "/", "(", "x_sum", "+", "1e-8", ")", "\n", "res", "[", "x_res", ">=", "x_sum", "]", "=", "0", "## or 1", "\n", "\n", "x_saliency", "=", "self", ".", "x_saliency", "\n", "x_saliency", "=", "x_saliency", ".", "clone", "(", ")", ".", "view", "(", "batch", ",", "-", "1", ")", "\n", "x_saliency", "=", "x_saliency", ".", "mean", "(", "1", ")", "\n", "\n", "loss", "=", "res", "+", "x_saliency", "*", "1.0", "\n", "loss", "=", "loss", ".", "mean", "(", "0", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.wpy1999_bas.Model.inception.Model._initialize_weights": [[155, 167], ["inception.Model.modules", "isinstance", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "isinstance", "m.bias.data.zero_", "m.weight.data.fill_", "m.bias.data.zero_", "isinstance", "m.weight.data.normal_", "m.bias.data.zero_"], "methods", ["None"], ["", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "0.01", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n", "", "", "", "def", "normalize_atten_maps", "(", "self", ",", "atten_maps", ")", ":", "\n", "        ", "atten_shape", "=", "atten_maps", ".", "size", "(", ")", "\n", "\n", "#--------------------------", "\n", "batch_mins", ",", "_", "=", "torch", ".", "min", "(", "atten_maps", ".", "view", "(", "atten_shape", "[", "0", ":", "-", "2", "]", "+", "(", "-", "1", ",", ")", ")", ",", "dim", "=", "-", "1", ",", "keepdim", "=", "True", ")", "\n", "batch_maxs", ",", "_", "=", "torch", ".", "max", "(", "atten_maps", ".", "view", "(", "atten_shape", "[", "0", ":", "-", "2", "]", "+", "(", "-", "1", ",", ")", ")", ",", "dim", "=", "-", "1", ",", "keepdim", "=", "True", ")", "\n"]], "home.repos.pwc.inspect_result.wpy1999_bas.Model.inception.Model.normalize_atten_maps": [[168, 179], ["atten_maps.size", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "atten_normed.view.view.view", "atten_maps.view", "atten_maps.view", "atten_maps.view"], "methods", ["None"], ["atten_normed", "=", "torch", ".", "div", "(", "atten_maps", ".", "view", "(", "atten_shape", "[", "0", ":", "-", "2", "]", "+", "(", "-", "1", ",", ")", ")", "-", "batch_mins", ",", "\n", "batch_maxs", "-", "batch_mins", "+", "1e-10", ")", "\n", "atten_normed", "=", "atten_normed", ".", "view", "(", "atten_shape", ")", "\n", "\n", "return", "atten_normed", "\n", "\n", "", "", "class", "InceptionA", "(", "nn", ".", "Module", ")", ":", "\n", "\n", "    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "pool_features", ")", ":", "\n", "        ", "super", "(", "InceptionA", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "branch1x1", "=", "BasicConv2d", "(", "in_channels", ",", "64", ",", "kernel_size", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wpy1999_bas.Model.inception.InceptionA.__init__": [[199, 211], ["torch.Module.__init__", "inception.BasicConv2d", "inception.BasicConv2d", "inception.BasicConv2d", "inception.BasicConv2d", "inception.BasicConv2d", "inception.BasicConv2d", "inception.BasicConv2d"], "methods", ["home.repos.pwc.inspect_result.wpy1999_bas.ILSVRC.DataLoader.ImageDataset.__init__"], ["branch_pool", "=", "F", ".", "avg_pool2d", "(", "x", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "branch_pool", "=", "self", ".", "branch_pool", "(", "branch_pool", ")", "\n", "\n", "outputs", "=", "[", "branch1x1", ",", "branch5x5", ",", "branch3x3dbl", ",", "branch_pool", "]", "\n", "return", "torch", ".", "cat", "(", "outputs", ",", "1", ")", "\n", "\n", "\n", "", "", "class", "InceptionB", "(", "nn", ".", "Module", ")", ":", "\n", "\n", "    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "0", ")", ":", "\n", "        ", "self", ".", "stride", "=", "stride", "\n", "super", "(", "InceptionB", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "branch3x3", "=", "BasicConv2d", "(", "in_channels", ",", "384", ",", "\n"]], "home.repos.pwc.inspect_result.wpy1999_bas.Model.inception.InceptionA.forward": [[212, 227], ["inception.InceptionA.branch1x1", "inception.InceptionA.branch5x5_1", "inception.InceptionA.branch5x5_2", "inception.InceptionA.branch3x3dbl_1", "inception.InceptionA.branch3x3dbl_2", "inception.InceptionA.branch3x3dbl_3", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "inception.InceptionA.branch_pool", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["kernel_size", "=", "kernel_size", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ")", "\n", "\n", "self", ".", "branch3x3dbl_1", "=", "BasicConv2d", "(", "in_channels", ",", "64", ",", "kernel_size", "=", "1", ")", "\n", "self", ".", "branch3x3dbl_2", "=", "BasicConv2d", "(", "64", ",", "96", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "branch3x3dbl_3", "=", "BasicConv2d", "(", "96", ",", "96", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "branch3x3", "=", "self", ".", "branch3x3", "(", "x", ")", "\n", "\n", "branch3x3dbl", "=", "self", ".", "branch3x3dbl_1", "(", "x", ")", "\n", "branch3x3dbl", "=", "self", ".", "branch3x3dbl_2", "(", "branch3x3dbl", ")", "\n", "branch3x3dbl", "=", "self", ".", "branch3x3dbl_3", "(", "branch3x3dbl", ")", "\n", "\n", "branch_pool", "=", "F", ".", "max_pool2d", "(", "x", ",", "kernel_size", "=", "3", ",", "stride", "=", "self", ".", "stride", ",", "padding", "=", "1", ")", "\n", "\n", "outputs", "=", "[", "branch3x3", ",", "branch3x3dbl", ",", "branch_pool", "]", "\n"]], "home.repos.pwc.inspect_result.wpy1999_bas.Model.inception.InceptionB.__init__": [[231, 240], ["torch.Module.__init__", "inception.BasicConv2d", "inception.BasicConv2d", "inception.BasicConv2d", "inception.BasicConv2d"], "methods", ["home.repos.pwc.inspect_result.wpy1999_bas.ILSVRC.DataLoader.ImageDataset.__init__"], ["", "", "class", "InceptionC", "(", "nn", ".", "Module", ")", ":", "\n", "\n", "    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "channels_7x7", ")", ":", "\n", "        ", "super", "(", "InceptionC", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "branch1x1", "=", "BasicConv2d", "(", "in_channels", ",", "192", ",", "kernel_size", "=", "1", ")", "\n", "\n", "c7", "=", "channels_7x7", "\n", "self", ".", "branch7x7_1", "=", "BasicConv2d", "(", "in_channels", ",", "c7", ",", "kernel_size", "=", "1", ")", "\n", "self", ".", "branch7x7_2", "=", "BasicConv2d", "(", "c7", ",", "c7", ",", "kernel_size", "=", "(", "1", ",", "7", ")", ",", "padding", "=", "(", "0", ",", "3", ")", ")", "\n", "self", ".", "branch7x7_3", "=", "BasicConv2d", "(", "c7", ",", "192", ",", "kernel_size", "=", "(", "7", ",", "1", ")", ",", "padding", "=", "(", "3", ",", "0", ")", ")", "\n"]], "home.repos.pwc.inspect_result.wpy1999_bas.Model.inception.InceptionB.forward": [[241, 252], ["inception.InceptionB.branch3x3", "inception.InceptionB.branch3x3dbl_1", "inception.InceptionB.branch3x3dbl_2", "inception.InceptionB.branch3x3dbl_3", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["\n", "self", ".", "branch7x7dbl_1", "=", "BasicConv2d", "(", "in_channels", ",", "c7", ",", "kernel_size", "=", "1", ")", "\n", "self", ".", "branch7x7dbl_2", "=", "BasicConv2d", "(", "c7", ",", "c7", ",", "kernel_size", "=", "(", "7", ",", "1", ")", ",", "padding", "=", "(", "3", ",", "0", ")", ")", "\n", "self", ".", "branch7x7dbl_3", "=", "BasicConv2d", "(", "c7", ",", "c7", ",", "kernel_size", "=", "(", "1", ",", "7", ")", ",", "padding", "=", "(", "0", ",", "3", ")", ")", "\n", "self", ".", "branch7x7dbl_4", "=", "BasicConv2d", "(", "c7", ",", "c7", ",", "kernel_size", "=", "(", "7", ",", "1", ")", ",", "padding", "=", "(", "3", ",", "0", ")", ")", "\n", "self", ".", "branch7x7dbl_5", "=", "BasicConv2d", "(", "c7", ",", "192", ",", "kernel_size", "=", "(", "1", ",", "7", ")", ",", "padding", "=", "(", "0", ",", "3", ")", ")", "\n", "\n", "self", ".", "branch_pool", "=", "BasicConv2d", "(", "in_channels", ",", "192", ",", "kernel_size", "=", "1", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "branch1x1", "=", "self", ".", "branch1x1", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wpy1999_bas.Model.inception.InceptionC.__init__": [[256, 272], ["torch.Module.__init__", "inception.BasicConv2d", "inception.BasicConv2d", "inception.BasicConv2d", "inception.BasicConv2d", "inception.BasicConv2d", "inception.BasicConv2d", "inception.BasicConv2d", "inception.BasicConv2d", "inception.BasicConv2d", "inception.BasicConv2d"], "methods", ["home.repos.pwc.inspect_result.wpy1999_bas.ILSVRC.DataLoader.ImageDataset.__init__"], ["\n", "branch7x7dbl", "=", "self", ".", "branch7x7dbl_1", "(", "x", ")", "\n", "branch7x7dbl", "=", "self", ".", "branch7x7dbl_2", "(", "branch7x7dbl", ")", "\n", "branch7x7dbl", "=", "self", ".", "branch7x7dbl_3", "(", "branch7x7dbl", ")", "\n", "branch7x7dbl", "=", "self", ".", "branch7x7dbl_4", "(", "branch7x7dbl", ")", "\n", "branch7x7dbl", "=", "self", ".", "branch7x7dbl_5", "(", "branch7x7dbl", ")", "\n", "\n", "branch_pool", "=", "F", ".", "avg_pool2d", "(", "x", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "branch_pool", "=", "self", ".", "branch_pool", "(", "branch_pool", ")", "\n", "\n", "outputs", "=", "[", "branch1x1", ",", "branch7x7", ",", "branch7x7dbl", ",", "branch_pool", "]", "\n", "return", "torch", ".", "cat", "(", "outputs", ",", "1", ")", "\n", "\n", "\n", "", "", "class", "InceptionD", "(", "nn", ".", "Module", ")", ":", "\n", "\n", "    ", "def", "__init__", "(", "self", ",", "in_channels", ")", ":", "\n"]], "home.repos.pwc.inspect_result.wpy1999_bas.Model.inception.InceptionC.forward": [[273, 291], ["inception.InceptionC.branch1x1", "inception.InceptionC.branch7x7_1", "inception.InceptionC.branch7x7_2", "inception.InceptionC.branch7x7_3", "inception.InceptionC.branch7x7dbl_1", "inception.InceptionC.branch7x7dbl_2", "inception.InceptionC.branch7x7dbl_3", "inception.InceptionC.branch7x7dbl_4", "inception.InceptionC.branch7x7dbl_5", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "inception.InceptionC.branch_pool", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["        ", "super", "(", "InceptionD", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "branch3x3_1", "=", "BasicConv2d", "(", "in_channels", ",", "192", ",", "kernel_size", "=", "1", ")", "\n", "self", ".", "branch3x3_2", "=", "BasicConv2d", "(", "192", ",", "320", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "\n", "self", ".", "branch7x7x3_1", "=", "BasicConv2d", "(", "in_channels", ",", "192", ",", "kernel_size", "=", "1", ")", "\n", "self", ".", "branch7x7x3_2", "=", "BasicConv2d", "(", "192", ",", "192", ",", "kernel_size", "=", "(", "1", ",", "7", ")", ",", "padding", "=", "(", "0", ",", "3", ")", ")", "\n", "self", ".", "branch7x7x3_3", "=", "BasicConv2d", "(", "192", ",", "192", ",", "kernel_size", "=", "(", "7", ",", "1", ")", ",", "padding", "=", "(", "3", ",", "0", ")", ")", "\n", "self", ".", "branch7x7x3_4", "=", "BasicConv2d", "(", "192", ",", "192", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "branch3x3", "=", "self", ".", "branch3x3_1", "(", "x", ")", "\n", "branch3x3", "=", "self", ".", "branch3x3_2", "(", "branch3x3", ")", "\n", "\n", "branch7x7x3", "=", "self", ".", "branch7x7x3_1", "(", "x", ")", "\n", "branch7x7x3", "=", "self", ".", "branch7x7x3_2", "(", "branch7x7x3", ")", "\n", "branch7x7x3", "=", "self", ".", "branch7x7x3_3", "(", "branch7x7x3", ")", "\n", "branch7x7x3", "=", "self", ".", "branch7x7x3_4", "(", "branch7x7x3", ")", "\n", "\n", "branch_pool", "=", "F", ".", "max_pool2d", "(", "x", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n"]], "home.repos.pwc.inspect_result.wpy1999_bas.Model.inception.InceptionD.__init__": [[295, 304], ["torch.Module.__init__", "inception.BasicConv2d", "inception.BasicConv2d", "inception.BasicConv2d", "inception.BasicConv2d", "inception.BasicConv2d", "inception.BasicConv2d"], "methods", ["home.repos.pwc.inspect_result.wpy1999_bas.ILSVRC.DataLoader.ImageDataset.__init__"], ["\n", "", "", "class", "InceptionE", "(", "nn", ".", "Module", ")", ":", "\n", "\n", "    ", "def", "__init__", "(", "self", ",", "in_channels", ")", ":", "\n", "        ", "super", "(", "InceptionE", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "branch1x1", "=", "BasicConv2d", "(", "in_channels", ",", "320", ",", "kernel_size", "=", "1", ")", "\n", "\n", "self", ".", "branch3x3_1", "=", "BasicConv2d", "(", "in_channels", ",", "384", ",", "kernel_size", "=", "1", ")", "\n", "self", ".", "branch3x3_2a", "=", "BasicConv2d", "(", "384", ",", "384", ",", "kernel_size", "=", "(", "1", ",", "3", ")", ",", "padding", "=", "(", "0", ",", "1", ")", ")", "\n", "self", ".", "branch3x3_2b", "=", "BasicConv2d", "(", "384", ",", "384", ",", "kernel_size", "=", "(", "3", ",", "1", ")", ",", "padding", "=", "(", "1", ",", "0", ")", ")", "\n"]], "home.repos.pwc.inspect_result.wpy1999_bas.Model.inception.InceptionD.forward": [[305, 317], ["inception.InceptionD.branch3x3_1", "inception.InceptionD.branch3x3_2", "inception.InceptionD.branch7x7x3_1", "inception.InceptionD.branch7x7x3_2", "inception.InceptionD.branch7x7x3_3", "inception.InceptionD.branch7x7x3_4", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["\n", "self", ".", "branch3x3dbl_1", "=", "BasicConv2d", "(", "in_channels", ",", "448", ",", "kernel_size", "=", "1", ")", "\n", "self", ".", "branch3x3dbl_2", "=", "BasicConv2d", "(", "448", ",", "384", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "branch3x3dbl_3a", "=", "BasicConv2d", "(", "384", ",", "384", ",", "kernel_size", "=", "(", "1", ",", "3", ")", ",", "padding", "=", "(", "0", ",", "1", ")", ")", "\n", "self", ".", "branch3x3dbl_3b", "=", "BasicConv2d", "(", "384", ",", "384", ",", "kernel_size", "=", "(", "3", ",", "1", ")", ",", "padding", "=", "(", "1", ",", "0", ")", ")", "\n", "\n", "self", ".", "branch_pool", "=", "BasicConv2d", "(", "in_channels", ",", "192", ",", "kernel_size", "=", "1", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "branch1x1", "=", "self", ".", "branch1x1", "(", "x", ")", "\n", "\n", "branch3x3", "=", "self", ".", "branch3x3_1", "(", "x", ")", "\n", "branch3x3", "=", "[", "\n"]], "home.repos.pwc.inspect_result.wpy1999_bas.Model.inception.InceptionE.__init__": [[321, 335], ["torch.Module.__init__", "inception.BasicConv2d", "inception.BasicConv2d", "inception.BasicConv2d", "inception.BasicConv2d", "inception.BasicConv2d", "inception.BasicConv2d", "inception.BasicConv2d", "inception.BasicConv2d", "inception.BasicConv2d"], "methods", ["home.repos.pwc.inspect_result.wpy1999_bas.ILSVRC.DataLoader.ImageDataset.__init__"], ["branch3x3", "=", "torch", ".", "cat", "(", "branch3x3", ",", "1", ")", "\n", "\n", "branch3x3dbl", "=", "self", ".", "branch3x3dbl_1", "(", "x", ")", "\n", "branch3x3dbl", "=", "self", ".", "branch3x3dbl_2", "(", "branch3x3dbl", ")", "\n", "branch3x3dbl", "=", "[", "\n", "self", ".", "branch3x3dbl_3a", "(", "branch3x3dbl", ")", ",", "\n", "self", ".", "branch3x3dbl_3b", "(", "branch3x3dbl", ")", ",", "\n", "]", "\n", "branch3x3dbl", "=", "torch", ".", "cat", "(", "branch3x3dbl", ",", "1", ")", "\n", "\n", "branch_pool", "=", "F", ".", "avg_pool2d", "(", "x", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "branch_pool", "=", "self", ".", "branch_pool", "(", "branch_pool", ")", "\n", "\n", "outputs", "=", "[", "branch1x1", ",", "branch3x3", ",", "branch3x3dbl", ",", "branch_pool", "]", "\n", "return", "torch", ".", "cat", "(", "outputs", ",", "1", ")", "\n"]], "home.repos.pwc.inspect_result.wpy1999_bas.Model.inception.InceptionE.forward": [[336, 359], ["inception.InceptionE.branch1x1", "inception.InceptionE.branch3x3_1", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "inception.InceptionE.branch3x3dbl_1", "inception.InceptionE.branch3x3dbl_2", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "inception.InceptionE.branch_pool", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "inception.InceptionE.branch3x3_2a", "inception.InceptionE.branch3x3_2b", "inception.InceptionE.branch3x3dbl_3a", "inception.InceptionE.branch3x3dbl_3b"], "methods", ["None"], ["\n", "\n", "", "", "class", "InceptionAux", "(", "nn", ".", "Module", ")", ":", "\n", "\n", "    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "num_classes", ")", ":", "\n", "        ", "super", "(", "InceptionAux", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv0", "=", "BasicConv2d", "(", "in_channels", ",", "128", ",", "kernel_size", "=", "1", ")", "\n", "self", ".", "conv1", "=", "BasicConv2d", "(", "128", ",", "768", ",", "kernel_size", "=", "5", ")", "\n", "self", ".", "conv1", ".", "stddev", "=", "0.01", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "768", ",", "num_classes", ")", "\n", "self", ".", "fc", ".", "stddev", "=", "0.001", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# 17 x 17 x 768", "\n", "        ", "x", "=", "F", ".", "avg_pool2d", "(", "x", ",", "kernel_size", "=", "5", ",", "stride", "=", "3", ")", "\n", "# 5 x 5 x 768", "\n", "x", "=", "self", ".", "conv0", "(", "x", ")", "\n", "# 5 x 5 x 128", "\n", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "# 1 x 1 x 768", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "# 768", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "# 1000", "\n"]], "home.repos.pwc.inspect_result.wpy1999_bas.Model.inception.InceptionAux.__init__": [[363, 370], ["torch.Module.__init__", "inception.BasicConv2d", "inception.BasicConv2d", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.wpy1999_bas.ILSVRC.DataLoader.ImageDataset.__init__"], ["", "", "class", "BasicConv2d", "(", "nn", ".", "Module", ")", ":", "\n", "\n", "    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "BasicConv2d", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "bias", "=", "False", ",", "**", "kwargs", ")", "\n", "self", ".", "bn", "=", "nn", ".", "BatchNorm2d", "(", "out_channels", ",", "eps", "=", "0.001", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.wpy1999_bas.Model.inception.InceptionAux.forward": [[371, 384], ["torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "inception.InceptionAux.conv0", "inception.InceptionAux.conv1", "inception.InceptionAux.view", "inception.InceptionAux.fc", "inception.InceptionAux.size"], "methods", ["None"], ["        ", "x", "=", "self", ".", "conv", "(", "x", ")", "\n", "x", "=", "self", ".", "bn", "(", "x", ")", "\n", "return", "F", ".", "relu", "(", "x", ",", "inplace", "=", "True", ")", "\n", "\n", "", "", "def", "model", "(", "args", ",", "pretrained", "=", "True", ")", ":", "\n", "# base and dilation can be modified according to your needs", "\n", "    ", "model", "=", "Model", "(", "args", ")", "\n", "if", "pretrained", ":", "\n", "        ", "pretrained_dict", "=", "torch", ".", "load", "(", "'inception_v3_google-1a9a5a14.pth'", ")", "\n", "model_dict", "=", "model", ".", "state_dict", "(", ")", "\n", "model_conv_name", "=", "[", "]", "\n", "\n", "for", "i", ",", "(", "k", ",", "v", ")", "in", "enumerate", "(", "model_dict", ".", "items", "(", ")", ")", ":", "\n", "            ", "if", "'tracked'", "in", "k", "[", "-", "7", ":", "]", ":", "\n"]], "home.repos.pwc.inspect_result.wpy1999_bas.Model.inception.BasicConv2d.__init__": [[388, 392], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.wpy1999_bas.ILSVRC.DataLoader.ImageDataset.__init__"], ["for", "i", ",", "(", "k", ",", "v", ")", "in", "enumerate", "(", "pretrained_dict", ".", "items", "(", ")", ")", ":", "\n", "            ", "if", "k", ".", "split", "(", "'.'", ")", "[", "0", "]", "==", "'AuxLogits'", "or", "k", ".", "split", "(", "'.'", ")", "[", "0", "]", "==", "'fc'", ":", "\n", "                ", "continue", "\n", "", "else", ":", "\n", "                ", "ii", "+=", "1", "\n"]], "home.repos.pwc.inspect_result.wpy1999_bas.Model.inception.BasicConv2d.forward": [[393, 397], ["inception.BasicConv2d.conv", "inception.BasicConv2d.bn", "torch.relu", "torch.relu", "torch.relu"], "methods", ["None"], ["", "model_dict", "[", "model_conv_name", "[", "ii", "]", "]", "=", "v", "\n", "\n", "", "model", ".", "load_state_dict", "(", "model_dict", ")", "\n", "print", "(", "\"pretrained weight load complete..\"", ")", "\n", "", "return", "model", ""]], "home.repos.pwc.inspect_result.wpy1999_bas.Model.inception.model": [[398, 420], ["inception.Model", "torch.load", "torch.load", "torch.load", "Model.state_dict", "enumerate", "enumerate", "Model.load_state_dict", "print", "model.state_dict.items", "model_conv_name.append", "torch.load.items", "k.split", "k.split"], "function", ["None"], ["", ""]], "home.repos.pwc.inspect_result.wpy1999_bas.Model.resnet.Bottleneck.__init__": [[18, 32], ["torch.Module.__init__", "int", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.wpy1999_bas.ILSVRC.DataLoader.ImageDataset.__init__"], ["        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "width", "=", "int", "(", "planes", "*", "(", "base_width", "/", "64.", ")", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "width", ",", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "width", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "width", ",", "width", ",", "3", ",", "\n", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "width", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "width", ",", "planes", "*", "self", ".", "expansion", ",", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "planes", "*", "self", ".", "expansion", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "identity", "=", "x", "\n"]], "home.repos.pwc.inspect_result.wpy1999_bas.Model.resnet.Bottleneck.forward": [[33, 54], ["resnet.Bottleneck.conv1", "resnet.Bottleneck.bn1", "resnet.Bottleneck.relu", "resnet.Bottleneck.conv2", "resnet.Bottleneck.bn2", "resnet.Bottleneck.relu", "resnet.Bottleneck.conv3", "resnet.Bottleneck.bn3", "resnet.Bottleneck.relu", "resnet.Bottleneck.downsample"], "methods", ["None"], ["\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "identity", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "identity", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n", "\n", "", "", "class", "ResNetCam", "(", "nn", ".", "Module", ")", ":", "\n"]], "home.repos.pwc.inspect_result.wpy1999_bas.Model.resnet.ResNetCam.__init__": [[57, 93], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "resnet.ResNetCam._make_layer", "resnet.ResNetCam._make_layer", "resnet.ResNetCam._make_layer", "resnet.ResNetCam._make_layer", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "util.initialize_weights", "copy.deepcopy", "copy.deepcopy", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "resnet.ResNetCam.modules"], "methods", ["home.repos.pwc.inspect_result.wpy1999_bas.ILSVRC.DataLoader.ImageDataset.__init__", "home.repos.pwc.inspect_result.wpy1999_bas.Model.resnet.ResNetCam._make_layer", "home.repos.pwc.inspect_result.wpy1999_bas.Model.resnet.ResNetCam._make_layer", "home.repos.pwc.inspect_result.wpy1999_bas.Model.resnet.ResNetCam._make_layer", "home.repos.pwc.inspect_result.wpy1999_bas.Model.resnet.ResNetCam._make_layer", "home.repos.pwc.inspect_result.wpy1999_bas.ILSVRC.util.initialize_weights"], ["\n", "stride_l3", "=", "1", "if", "large_feature_map", "else", "2", "\n", "self", ".", "inplanes", "=", "64", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "self", ".", "inplanes", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "\n", "padding", "=", "3", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "self", ".", "inplanes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ",", "stride", "=", "1", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "stride_l3", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "1", ")", "\n", "self", ".", "avg_pool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "1", ",", "1", ")", ")", "\n", "\n", "self", ".", "classifier_cls", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "2048", ",", "1024", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "1024", ",", "1024", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "1024", ",", "200", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", ")", "\n", "\n", "self", ".", "classifier_loc", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "1024", ",", "200", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "Sigmoid", "(", ")", ",", "\n", ")", "\n", "initialize_weights", "(", "self", ".", "modules", "(", ")", ",", "init_mode", "=", "'xavier'", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ",", "label", "=", "None", ",", "N", "=", "1", ")", ":", "\n", "        ", "classifier_cls_copy", "=", "copy", ".", "deepcopy", "(", "self", ".", "classifier_cls", ")", "\n", "layer4_copy", "=", "copy", ".", "deepcopy", "(", "self", ".", "layer4", ")", "\n", "\n", "batch", "=", "x", ".", "size", "(", "0", ")", "\n", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n"]], "home.repos.pwc.inspect_result.wpy1999_bas.Model.resnet.ResNetCam.forward": [[94, 166], ["resnet.ResNetCam.weight_deepcopy", "resnet.ResNetCam.size", "resnet.ResNetCam.conv1", "resnet.ResNetCam.bn1", "resnet.ResNetCam.relu", "resnet.ResNetCam.maxpool", "resnet.ResNetCam.layer1", "resnet.ResNetCam.layer2", "resnet.ResNetCam.layer3", "resnet.ResNetCam.clone", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "resnet.ResNetCam.layer4", "resnet.ResNetCam.classifier_cls", "resnet.ResNetCam.avg_pool().squeeze().squeeze", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "range", "resnet.ResNetCam.classifier_loc", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "range", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "resnet.ResNetCam.layer4_copy", "resnet.ResNetCam.classifier_cls_copy", "resnet.ResNetCam.avg_pool().view", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "range", "resnet.ResNetCam.avg_pool().squeeze().squeeze", "resnet.ResNetCam.x_sum.clone().detach", "x_saliency.mean.mean.clone().view", "x_saliency.mean.mean.mean", "loss_loc.mean.mean.mean", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss.cuda", "torch.CrossEntropyLoss.cuda", "label.unsqueeze", "resnet.ResNetCam.score_1.topk", "[].mean", "resnet.ResNetCam.clone.detach", "resnet.ResNetCam.size", "resnet.ResNetCam.avg_pool().squeeze", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "resnet.ResNetCam.avg_pool", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "resnet.ResNetCam.avg_pool().squeeze", "resnet.ResNetCam.x_sum.clone", "x_saliency.mean.mean.clone", "torch.CrossEntropyLoss.", "torch.CrossEntropyLoss.", "resnet.ResNetCam.avg_pool", "resnet.ResNetCam.avg_pool"], "methods", ["home.repos.pwc.inspect_result.wpy1999_bas.Model.resnet.ResNetCam.weight_deepcopy"], ["x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x_3", "=", "x", ".", "clone", "(", ")", "\n", "\n", "x", "=", "F", ".", "max_pool2d", "(", "x", ",", "kernel_size", "=", "2", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "classifier_cls", "(", "x", ")", "\n", "self", ".", "feature_map", "=", "x", "\n", "\n", "self", ".", "score_1", "=", "self", ".", "avg_pool", "(", "x", ")", ".", "squeeze", "(", "-", "1", ")", ".", "squeeze", "(", "-", "1", ")", "\n", "\n", "# p_label ", "\n", "if", "N", "==", "1", ":", "\n", "            ", "p_label", "=", "label", ".", "unsqueeze", "(", "-", "1", ")", "\n", "", "else", ":", "\n", "            ", "_", ",", "p_label", "=", "self", ".", "score_1", ".", "topk", "(", "N", ",", "1", ",", "True", ",", "True", ")", "\n", "\n", "# x_sum   ", "\n", "", "self", ".", "x_sum", "=", "torch", ".", "zeros", "(", "batch", ")", ".", "cuda", "(", ")", "\n", "for", "i", "in", "range", "(", "batch", ")", ":", "\n", "            ", "self", ".", "x_sum", "[", "i", "]", "=", "self", ".", "score_1", "[", "i", "]", "[", "label", "[", "i", "]", "]", "\n", "\n", "## x_saliency    ", "\n", "", "x_saliency_all", "=", "self", ".", "classifier_loc", "(", "x_3", ")", "\n", "x_saliency", "=", "torch", ".", "zeros", "(", "batch", ",", "1", ",", "28", ",", "28", ")", ".", "cuda", "(", ")", "\n", "for", "i", "in", "range", "(", "batch", ")", ":", "\n", "            ", "x_saliency", "[", "i", "]", "[", "0", "]", "=", "x_saliency_all", "[", "i", "]", "[", "p_label", "[", "i", "]", "]", ".", "mean", "(", "0", ")", "\n", "", "self", ".", "x_saliency", "=", "x_saliency", "\n", "\n", "##  erase", "\n", "x_erase", "=", "x_3", ".", "detach", "(", ")", "*", "(", "1", "-", "x_saliency", ")", "\n", "x_erase", "=", "F", ".", "max_pool2d", "(", "x_erase", ",", "kernel_size", "=", "2", ")", "\n", "x_erase", "=", "layer4_copy", "(", "x_erase", ")", "\n", "x_erase", "=", "classifier_cls_copy", "(", "x_erase", ")", "\n", "x_erase", "=", "self", ".", "avg_pool", "(", "x_erase", ")", ".", "view", "(", "x_erase", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "\n", "## x_erase_sum", "\n", "self", ".", "x_erase_sum", "=", "torch", ".", "zeros", "(", "batch", ")", ".", "cuda", "(", ")", "\n", "for", "i", "in", "range", "(", "batch", ")", ":", "\n", "            ", "self", ".", "x_erase_sum", "[", "i", "]", "=", "x_erase", "[", "i", "]", "[", "label", "[", "i", "]", "]", "\n", "\n", "## score_2", "\n", "", "x", "=", "self", ".", "feature_map", "*", "nn", ".", "AvgPool2d", "(", "2", ")", "(", "x_saliency", ")", "\n", "self", ".", "score_2", "=", "self", ".", "avg_pool", "(", "x", ")", ".", "squeeze", "(", "-", "1", ")", ".", "squeeze", "(", "-", "1", ")", "\n", "\n", "return", "self", ".", "score_1", ",", "self", ".", "score_2", "\n", "\n", "", "def", "bas_loss", "(", "self", ")", ":", "\n", "        ", "batch", "=", "self", ".", "x_sum", ".", "size", "(", "0", ")", "\n", "x_sum", "=", "self", ".", "x_sum", ".", "clone", "(", ")", ".", "detach", "(", ")", "\n", "x_res", "=", "self", ".", "x_erase_sum", "\n", "res", "=", "x_res", "/", "(", "x_sum", "+", "1e-8", ")", "\n", "res", "[", "x_res", ">=", "x_sum", "]", "=", "0", "## or 1", "\n", "\n", "x_saliency", "=", "self", ".", "x_saliency", "\n", "x_saliency", "=", "x_saliency", ".", "clone", "(", ")", ".", "view", "(", "batch", ",", "-", "1", ")", "\n", "x_saliency", "=", "x_saliency", ".", "mean", "(", "1", ")", "\n", "\n", "loss", "=", "res", "+", "x_saliency", "*", "1.2", "\n", "loss", "=", "loss", ".", "mean", "(", "0", ")", "\n", "return", "loss", "\n", "\n", "\n", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", ")", ":", "\n", "        ", "layers", "=", "self", ".", "_layer", "(", "block", ",", "planes", ",", "blocks", ",", "stride", ")", "\n", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n"]], "home.repos.pwc.inspect_result.wpy1999_bas.Model.resnet.ResNetCam.bas_loss": [[148, 162], ["resnet.ResNetCam.x_sum.size", "resnet.ResNetCam.x_sum.clone().detach", "x_saliency.mean.mean.clone().view", "x_saliency.mean.mean.mean", "loss.mean.mean.mean", "resnet.ResNetCam.x_sum.clone", "x_saliency.mean.mean.clone"], "methods", ["None"], ["", "def", "bas_loss", "(", "self", ")", ":", "\n", "        ", "batch", "=", "self", ".", "x_sum", ".", "size", "(", "0", ")", "\n", "x_sum", "=", "self", ".", "x_sum", ".", "clone", "(", ")", ".", "detach", "(", ")", "\n", "x_res", "=", "self", ".", "x_erase_sum", "\n", "res", "=", "x_res", "/", "(", "x_sum", "+", "1e-8", ")", "\n", "res", "[", "x_res", ">=", "x_sum", "]", "=", "0", "## or 1", "\n", "\n", "x_saliency", "=", "self", ".", "x_saliency", "\n", "x_saliency", "=", "x_saliency", ".", "clone", "(", ")", ".", "view", "(", "batch", ",", "-", "1", ")", "\n", "x_saliency", "=", "x_saliency", ".", "mean", "(", "1", ")", "\n", "\n", "loss", "=", "res", "+", "x_saliency", "*", "1.2", "\n", "loss", "=", "loss", ".", "mean", "(", "0", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.wpy1999_bas.Model.resnet.ResNetCam._make_layer": [[168, 171], ["resnet.ResNetCam._layer", "torch.Sequential", "torch.Sequential", "torch.Sequential"], "methods", ["home.repos.pwc.inspect_result.wpy1999_bas.Model.resnet.ResNetCam._layer"], ["", "def", "_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", ")", ":", "\n", "        ", "downsample", "=", "get_downsampling_layer", "(", "self", ".", "inplanes", ",", "block", ",", "planes", ",", "\n", "stride", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wpy1999_bas.Model.resnet.ResNetCam._layer": [[172, 182], ["resnet.get_downsampling_layer", "range", "block", "layers.append", "block"], "methods", ["home.repos.pwc.inspect_result.wpy1999_bas.Model.resnet.get_downsampling_layer"], ["layers", "=", "[", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ")", "]", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "_", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ")", ")", "\n", "\n", "", "return", "layers", "\n", "\n", "", "def", "normalize_atten_maps", "(", "self", ",", "atten_maps", ")", ":", "\n", "        ", "atten_shape", "=", "atten_maps", ".", "size", "(", ")", "\n", "\n", "#--------------------------", "\n"]], "home.repos.pwc.inspect_result.wpy1999_bas.Model.resnet.ResNetCam.normalize_atten_maps": [[184, 195], ["atten_maps.size", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "atten_normed.view.view.view", "atten_maps.view", "atten_maps.view", "atten_maps.view"], "methods", ["None"], ["batch_maxs", ",", "_", "=", "torch", ".", "max", "(", "atten_maps", ".", "view", "(", "atten_shape", "[", "0", ":", "-", "2", "]", "+", "(", "-", "1", ",", ")", ")", ",", "dim", "=", "-", "1", ",", "keepdim", "=", "True", ")", "\n", "atten_normed", "=", "torch", ".", "div", "(", "atten_maps", ".", "view", "(", "atten_shape", "[", "0", ":", "-", "2", "]", "+", "(", "-", "1", ",", ")", ")", "-", "batch_mins", ",", "\n", "batch_maxs", "-", "batch_mins", "+", "1e-10", ")", "\n", "atten_normed", "=", "atten_normed", ".", "view", "(", "atten_shape", ")", "\n", "\n", "return", "atten_normed", "\n", "\n", "\n", "", "", "def", "get_downsampling_layer", "(", "inplanes", ",", "block", ",", "planes", ",", "stride", ")", ":", "\n", "    ", "outplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "if", "stride", "==", "1", "and", "inplanes", "==", "outplanes", ":", "\n", "        ", "return", "\n"]], "home.repos.pwc.inspect_result.wpy1999_bas.Model.resnet.get_downsampling_layer": [[217, 225], ["torch.Sequential", "torch.Conv2d", "torch.BatchNorm2d"], "function", ["None"], ["        ", "model", "=", "load_pretrained_model", "(", "model", ")", "\n", "", "return", "model", "\n", "", ""]], "home.repos.pwc.inspect_result.wpy1999_bas.Model.resnet.load_pretrained_model": [[227, 237], ["torch.load", "torch.load", "torch.load", "util.remove_layer", "model.load_state_dict", "resnet.model"], "function", ["home.repos.pwc.inspect_result.wpy1999_bas.ILSVRC.util.remove_layer", "home.repos.pwc.inspect_result.wpy1999_bas.Model.resnet.model"], []], "home.repos.pwc.inspect_result.wpy1999_bas.Model.resnet.model": [[239, 244], ["resnet.ResNetCam", "resnet.load_pretrained_model"], "function", ["home.repos.pwc.inspect_result.wpy1999_bas.Model.resnet.load_pretrained_model"], []], "home.repos.pwc.inspect_result.wpy1999_bas.Model.mobilenet.Model.weight_deepcopy": [[153, 164], ["range", "range", "len", "len", "range", "mobilenet.Model.classifier_cls[].weight.clone().detach", "mobilenet.Model.classifier_cls[].bias.clone().detach", "len", "str", "str", "[].weight.clone().detach", "str", "[].bias.clone().detach", "mobilenet.Model.classifier_cls[].weight.clone", "mobilenet.Model.classifier_cls[].bias.clone", "str", "str", "[].weight.clone", "[].bias.clone"], "methods", ["None"], ["", "", "", "", "def", "model", "(", "args", ",", "pretrained", "=", "True", ")", ":", "\n", "\n", "    ", "model", "=", "Model", "(", "args", ")", "\n", "if", "pretrained", ":", "\n", "        ", "pretrained_dict", "=", "torch", ".", "load", "(", "'mobilenet_v1_with_relu_69_5.pth'", ")", "\n", "model_dict", "=", "model", ".", "state_dict", "(", ")", "\n", "model_conv_name", "=", "[", "]", "\n", "\n", "for", "i", ",", "(", "k", ",", "v", ")", "in", "enumerate", "(", "model_dict", ".", "items", "(", ")", ")", ":", "\n", "            ", "if", "'tracked'", "in", "k", "[", "-", "7", ":", "]", ":", "\n", "                ", "continue", "\n", "", "model_conv_name", ".", "append", "(", "k", ")", "\n"]], "home.repos.pwc.inspect_result.wpy1999_bas.Model.vgg.Model.weight_deepcopy": [[187, 198], ["vgg.Model.conv5_1.weight.clone().detach", "vgg.Model.conv5_2.weight.clone().detach", "vgg.Model.conv5_3.weight.clone().detach", "vgg.Model.conv5_1.bias.clone().detach", "vgg.Model.conv5_2.bias.clone().detach", "vgg.Model.conv5_3.bias.clone().detach", "range", "len", "vgg.Model.conv5_1.weight.clone", "vgg.Model.conv5_2.weight.clone", "vgg.Model.conv5_3.weight.clone", "vgg.Model.conv5_1.bias.clone", "vgg.Model.conv5_2.bias.clone", "vgg.Model.conv5_3.bias.clone", "vgg.Model.classifier_cls[].weight.clone().detach", "vgg.Model.classifier_cls[].bias.clone().detach", "str", "str", "vgg.Model.classifier_cls[].weight.clone", "vgg.Model.classifier_cls[].bias.clone"], "methods", ["None"], ["\n", "", "", "def", "weight_init", "(", "m", ")", ":", "\n", "    ", "classname", "=", "m", ".", "__class__", ".", "__name__", "## __class__\u5c06\u5b9e\u4f8b\u6307\u5411\u7c7b\uff0c\u7136\u540e\u8c03\u7528\u7c7b\u7684__name__\u5c5e\u6027", "\n", "if", "classname", ".", "find", "(", "'Conv'", ")", "!=", "-", "1", ":", "\n", "        ", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0.0", ",", "0.02", ")", "\n", "", "elif", "classname", ".", "find", "(", "'BatchNorm'", ")", "!=", "-", "1", ":", "\n", "        ", "m", ".", "weight", ".", "data", ".", "normal_", "(", "1.0", ",", "0.02", ")", "\n", "m", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "", "elif", "classname", ".", "find", "(", "'Linear'", ")", "!=", "-", "1", ":", "\n", "        ", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "0.01", ")", "\n", "m", ".", "weight", ".", "data", ".", "fill_", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wpy1999_bas.Model.inception.Model.weight_deepcopy": [[180, 195], ["range", "len", "exec", "exec", "exec", "inception.Model.classifier_cls[].weight.clone().detach", "inception.Model.classifier_cls[].bias.clone().detach", "exec", "exec", "exec", "str", "str", "inception.Model.classifier_cls[].weight.clone", "inception.Model.classifier_cls[].bias.clone"], "methods", ["None"], ["self", ".", "branch5x5_1", "=", "BasicConv2d", "(", "in_channels", ",", "48", ",", "kernel_size", "=", "1", ")", "\n", "self", ".", "branch5x5_2", "=", "BasicConv2d", "(", "48", ",", "64", ",", "kernel_size", "=", "5", ",", "padding", "=", "2", ")", "\n", "\n", "self", ".", "branch3x3dbl_1", "=", "BasicConv2d", "(", "in_channels", ",", "64", ",", "kernel_size", "=", "1", ")", "\n", "self", ".", "branch3x3dbl_2", "=", "BasicConv2d", "(", "64", ",", "96", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "branch3x3dbl_3", "=", "BasicConv2d", "(", "96", ",", "96", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "\n", "self", ".", "branch_pool", "=", "BasicConv2d", "(", "in_channels", ",", "pool_features", ",", "kernel_size", "=", "1", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "branch1x1", "=", "self", ".", "branch1x1", "(", "x", ")", "\n", "\n", "branch5x5", "=", "self", ".", "branch5x5_1", "(", "x", ")", "\n", "branch5x5", "=", "self", ".", "branch5x5_2", "(", "branch5x5", ")", "\n", "\n", "branch3x3dbl", "=", "self", ".", "branch3x3dbl_1", "(", "x", ")", "\n"]], "home.repos.pwc.inspect_result.wpy1999_bas.Model.resnet.ResNetCam.weight_deepcopy": [[196, 216], ["range", "range", "resnet.ResNetCam.layer4[].downsample[].weight.clone().detach", "resnet.ResNetCam.layer4[].downsample[].weight.clone().detach", "resnet.ResNetCam.layer4[].downsample[].bias.clone().detach", "len", "len", "resnet.ResNetCam.layer4[].conv1.weight.clone().detach", "resnet.ResNetCam.layer4[].conv2.weight.clone().detach", "resnet.ResNetCam.layer4[].conv3.weight.clone().detach", "resnet.ResNetCam.layer4[].bn1.weight.clone().detach", "resnet.ResNetCam.layer4[].bn1.bias.clone().detach", "resnet.ResNetCam.layer4[].bn2.weight.clone().detach", "resnet.ResNetCam.layer4[].bn2.bias.clone().detach", "resnet.ResNetCam.layer4[].bn3.weight.clone().detach", "resnet.ResNetCam.layer4[].bn3.bias.clone().detach", "resnet.ResNetCam.classifier_cls[].weight.clone().detach", "resnet.ResNetCam.classifier_cls[].bias.clone().detach", "resnet.ResNetCam.layer4[].downsample[].weight.clone", "resnet.ResNetCam.layer4[].downsample[].weight.clone", "resnet.ResNetCam.layer4[].downsample[].bias.clone", "str", "str", "resnet.ResNetCam.layer4[].conv1.weight.clone", "resnet.ResNetCam.layer4[].conv2.weight.clone", "resnet.ResNetCam.layer4[].conv3.weight.clone", "resnet.ResNetCam.layer4[].bn1.weight.clone", "resnet.ResNetCam.layer4[].bn1.bias.clone", "resnet.ResNetCam.layer4[].bn2.weight.clone", "resnet.ResNetCam.layer4[].bn2.bias.clone", "resnet.ResNetCam.layer4[].bn3.weight.clone", "resnet.ResNetCam.layer4[].bn3.bias.clone", "resnet.ResNetCam.classifier_cls[].weight.clone", "resnet.ResNetCam.classifier_cls[].bias.clone"], "methods", ["None"], ["", "else", ":", "\n", "        ", "return", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "inplanes", ",", "outplanes", ",", "1", ",", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "outplanes", ")", ",", "\n", ")", "\n", "\n", "", "", "def", "load_pretrained_model", "(", "model", ")", ":", "\n", "    ", "strict_rule", "=", "True", "\n", "\n", "state_dict", "=", "torch", ".", "load", "(", "'resnet50-19c8e357.pth'", ")", "\n", "\n", "state_dict", "=", "remove_layer", "(", "state_dict", ",", "'fc'", ")", "\n", "strict_rule", "=", "False", "\n", "\n", "model", ".", "load_state_dict", "(", "state_dict", ",", "strict", "=", "strict_rule", ")", "\n", "return", "model", "\n", "\n", "\n", "", "def", "model", "(", "args", ",", "pretrained", "=", "True", ")", ":", "\n", "    ", "model", "=", "ResNetCam", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "args", ")", "\n", "if", "pretrained", ":", "\n"]], "home.repos.pwc.inspect_result.wpy1999_bas.ILSVRC.BAS_inference.opts.__init__": [[20, 31], ["argparse.ArgumentParser", "BAS_inference.opts.parser.add_argument", "BAS_inference.opts.parser.add_argument", "BAS_inference.opts.parser.add_argument", "BAS_inference.opts.parser.add_argument", "BAS_inference.opts.parser.add_argument", "BAS_inference.opts.parser.add_argument", "BAS_inference.opts.parser.add_argument", "BAS_inference.opts.parser.add_argument", "BAS_inference.opts.parser.add_argument"], "methods", ["None"], ["class", "opts", "(", "object", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'BAS Localization evaluation'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--input_size'", ",", "default", "=", "256", ",", "dest", "=", "'input_size'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--crop_size'", ",", "default", "=", "224", ",", "dest", "=", "'crop_size'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--num_classes'", ",", "default", "=", "200", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--tencrop'", ",", "default", "=", "True", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--phase'", ",", "type", "=", "str", ",", "default", "=", "'test'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--gpu'", ",", "help", "=", "'which gpu to use'", ",", "default", "=", "'0'", ",", "dest", "=", "'gpu'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--data'", ",", "metavar", "=", "'DIR'", ",", "default", "=", "'CUB_200_2011/'", ",", "help", "=", "'path to imagenet dataset'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--threshold'", ",", "type", "=", "float", ",", "default", "=", "0.15", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--top_k'", ",", "type", "=", "int", ",", "default", "=", "200", ")", "\n"]], "home.repos.pwc.inspect_result.wpy1999_bas.ILSVRC.BAS_inference.opts.parse": [[32, 36], ["BAS_inference.opts.parser.parse_args"], "methods", ["None"], ["self", ".", "parser", ".", "add_argument", "(", "'--arch'", ",", "type", "=", "str", ",", "default", "=", "'mobilenet'", ")", "## choosen  [ vgg, resnet, inception, mobilenet]   ", "\n", "", "def", "parse", "(", "self", ")", ":", "\n", "        ", "opt", "=", "self", ".", "parser", ".", "parse_args", "(", ")", "\n", "opt", ".", "arch", "=", "opt", ".", "arch", "\n", "return", "opt", "\n"]], "home.repos.pwc.inspect_result.wpy1999_bas.ILSVRC.BAS_inference.normalize_map": [[48, 54], ["numpy.min", "numpy.max", "cv2.resize"], "function", ["None"], ["\n", "def", "normalize_map", "(", "atten_map", ",", "w", ",", "h", ")", ":", "\n", "    ", "min_val", "=", "np", ".", "min", "(", "atten_map", ")", "\n", "max_val", "=", "np", ".", "max", "(", "atten_map", ")", "\n", "atten_norm", "=", "(", "atten_map", "-", "min_val", ")", "/", "(", "max_val", "-", "min_val", ")", "\n", "atten_norm", "=", "cv2", ".", "resize", "(", "atten_norm", ",", "dsize", "=", "(", "w", ",", "h", ")", ")", "\n", "return", "atten_norm", "\n"]], "home.repos.pwc.inspect_result.wpy1999_bas.ILSVRC.BAS_inference.to_data": [[54, 58], ["torch.cuda.is_available", "torch.cuda.is_available", "x.cpu.cpu"], "function", ["None"], ["return", "atten_norm", "\n", "\n", "", "def", "to_data", "(", "x", ")", ":", "\n", "    ", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "x", "=", "x", ".", "cpu", "(", ")", "\n"]], "home.repos.pwc.inspect_result.wpy1999_bas.ILSVRC.train.opts.__init__": [[27, 58], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "train.opts.parser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument"], "methods", ["None"], ["##  path", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--root'", ",", "type", "=", "str", ",", "default", "=", "'CUB_200_2011'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--test_gt_path'", ",", "type", "=", "str", ",", "default", "=", "'CUB_200_2011/test_bounding_box.txt'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--num_classes'", ",", "type", "=", "int", ",", "default", "=", "200", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--test_txt_path'", ",", "type", "=", "str", ",", "default", "=", "'CUB_200_2011/test_list.txt'", ")", "\n", "##  save", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--save_path'", ",", "type", "=", "str", ",", "default", "=", "'logs'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--load_path'", ",", "type", "=", "str", ",", "default", "=", "'VGG.pth.tar'", ")", "\n", "##  dataloader", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--crop_size'", ",", "type", "=", "int", ",", "default", "=", "224", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--resize_size'", ",", "type", "=", "int", ",", "default", "=", "256", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--num_workers'", ",", "type", "=", "int", ",", "default", "=", "1", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--nest'", ",", "action", "=", "'store_true'", ")", "\n", "##  train", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--batch_size'", ",", "type", "=", "int", ",", "default", "=", "32", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--epochs'", ",", "type", "=", "int", ",", "default", "=", "100", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--phase'", ",", "type", "=", "str", ",", "default", "=", "'train'", ")", "## train / test", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--lr'", ",", "type", "=", "float", ",", "default", "=", "0.001", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--weight_decay'", ",", "type", "=", "float", ",", "default", "=", "5e-4", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--power'", ",", "type", "=", "float", ",", "default", "=", "0.9", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--momentum'", ",", "type", "=", "float", ",", "default", "=", "0.9", ")", "\n", "##  model", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--arch'", ",", "type", "=", "str", ",", "default", "=", "'vgg'", ")", "##  choose  [ vgg, resnet, inception, mobilenet ]         ", "\n", "##  show", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--show_step'", ",", "type", "=", "int", ",", "default", "=", "94", ")", "\n", "##  GPU'", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--gpu'", ",", "type", "=", "str", ",", "default", "=", "'0'", ")", "\n", "\n", "", "def", "parse", "(", "self", ")", ":", "\n", "        ", "opt", "=", "self", ".", "parser", ".", "parse_args", "(", ")", "\n", "opt", ".", "arch", "=", "opt", ".", "arch", "\n", "return", "opt", "\n"]], "home.repos.pwc.inspect_result.wpy1999_bas.ILSVRC.train.opts.parse": [[59, 63], ["train.opts.parser.parse_args"], "methods", ["None"], ["\n", "", "", "args", "=", "opts", "(", ")", ".", "parse", "(", ")", "\n", "os", ".", "environ", "[", "'CUDA_VISIBLE_DEVICES'", "]", "=", "args", ".", "gpu", "\n", "\n", "lr", "=", "args", ".", "lr", "\n"]], "home.repos.pwc.inspect_result.wpy1999_bas.ILSVRC.DataLoader.ImageDataset.__init__": [[48, 80], ["DataLoader.ImageDataset.img_dataset.class_to_idx.items", "DataLoader.load_test_bbox", "torchvision.datasets.ImageFolder", "torchvision.datasets.ImageFolder", "torchvision.Compose", "torchvision.Compose", "DataLoader.ImageDataset.label_classes.append", "os.path.join", "torchvision.datasets.ImageFolder", "torchvision.datasets.ImageFolder", "torchvision.Compose", "torchvision.Compose", "torchvision.Resize", "torchvision.Resize", "torchvision.RandomCrop", "torchvision.RandomCrop", "torchvision.RandomHorizontalFlip", "torchvision.RandomHorizontalFlip", "torchvision.ToTensor", "torchvision.ToTensor", "torchvision.Normalize", "torchvision.Normalize", "os.path.join", "torchvision.Resize", "torchvision.Resize", "torchvision.CenterCrop", "torchvision.CenterCrop", "torchvision.ToTensor", "torchvision.ToTensor", "torchvision.Normalize", "torchvision.Normalize"], "methods", ["home.repos.pwc.inspect_result.wpy1999_bas.ILSVRC.DataLoader.load_test_bbox"], ["self", ".", "resize_size", "=", "args", ".", "resize_size", "\n", "self", ".", "phase", "=", "args", ".", "phase", "\n", "self", ".", "num_classes", "=", "args", ".", "num_classes", "\n", "if", "self", ".", "phase", "==", "'train'", ":", "\n", "            ", "self", ".", "img_dataset", "=", "ImageFolder", "(", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "'train'", ")", ")", "\n", "self", ".", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "Resize", "(", "(", "self", ".", "resize_size", ",", "self", ".", "resize_size", ")", ")", ",", "\n", "transforms", ".", "RandomCrop", "(", "self", ".", "crop_size", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "mean", "=", "(", "0.485", ",", "0.456", ",", "0.406", ")", ",", "std", "=", "(", "0.229", ",", "0.224", ",", "0.225", ")", ")", "\n", "]", ")", "\n", "", "elif", "self", ".", "phase", "==", "'test'", ":", "\n", "            ", "self", ".", "img_dataset", "=", "ImageFolder", "(", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "'test'", ")", ")", "\n", "self", ".", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "Resize", "(", "(", "self", ".", "resize_size", ",", "self", ".", "resize_size", ")", ")", ",", "\n", "transforms", ".", "CenterCrop", "(", "self", ".", "crop_size", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "mean", "=", "(", "0.485", ",", "0.456", ",", "0.406", ")", ",", "std", "=", "(", "0.229", ",", "0.224", ",", "0.225", ")", ")", "\n", "]", ")", "\n", "\n", "", "self", ".", "label_classes", "=", "[", "]", "\n", "for", "k", ",", "v", "in", "self", ".", "img_dataset", ".", "class_to_idx", ".", "items", "(", ")", ":", "\n", "            ", "self", ".", "label_classes", ".", "append", "(", "k", ")", "\n", "", "self", ".", "img_dataset", "=", "self", ".", "img_dataset", ".", "imgs", "\n", "self", ".", "test_bbox", "=", "load_test_bbox", "(", "self", ".", "root", ",", "self", ".", "test_txt_path", ",", "self", ".", "test_gt_path", ",", "self", ".", "resize_size", ",", "self", ".", "crop_size", ")", "\n", "\n", "", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "path", ",", "img_class", "=", "self", ".", "img_dataset", "[", "index", "]", "\n", "##  one-hot ", "\n", "label", "=", "torch", ".", "zeros", "(", "self", ".", "num_classes", ")", "\n", "label", "[", "img_class", "]", "=", "1", "\n", "img", "=", "Image", ".", "open", "(", "path", ")", ".", "convert", "(", "'RGB'", ")", "\n"]], "home.repos.pwc.inspect_result.wpy1999_bas.ILSVRC.DataLoader.ImageDataset.__getitem__": [[81, 94], ["torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "PIL.Image.open().convert", "DataLoader.ImageDataset.transform", "path.replace.replace.replace", "PIL.Image.open"], "methods", ["None"], ["img", "=", "self", ".", "transform", "(", "img", ")", "\n", "if", "self", ".", "phase", "==", "'train'", ":", "\n", "            ", "return", "path", ",", "img", ",", "img_class", "\n", "", "else", ":", "\n", "            ", "path", "=", "path", ".", "replace", "(", "'/'", ",", "'\\\\'", ")", "\n", "bbox", "=", "self", ".", "test_bbox", "[", "path", "]", "\n", "return", "img", ",", "img_class", ",", "bbox", ",", "path", "\n", "\n", "", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "img_dataset", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.wpy1999_bas.ILSVRC.DataLoader.ImageDataset.__len__": [[95, 97], ["len"], "methods", ["None"], []], "home.repos.pwc.inspect_result.wpy1999_bas.ILSVRC.DataLoader.load_test_bbox": [[11, 46], ["zip", "open", "os.path.join", "k.replace.replace", "line.strip().split", "part_1.split", "part_2.split", "numpy.array", "range", "test_gt.append", "img_path.replace.replace", "test_txt.append", "len", "numpy.float32", "numpy.float32", "temp_gt.append", "line.strip"], "function", ["None"], ["def", "load_test_bbox", "(", "root", ",", "test_txt_path", ",", "test_gt_path", ",", "resize_size", ",", "crop_size", ")", ":", "\n", "    ", "test_gt", "=", "[", "]", "\n", "test_txt", "=", "[", "]", "\n", "shift_size", "=", "(", "resize_size", "-", "crop_size", ")", "//", "2.", "\n", "with", "open", "(", "test_txt_path", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "for", "line", "in", "f", ":", "\n", "            ", "img_path", "=", "line", ".", "strip", "(", "'\\n'", ")", ".", "split", "(", "';'", ")", "[", "0", "]", "\n", "test_txt", ".", "append", "(", "img_path", ")", "\n", "", "", "with", "open", "(", "test_gt_path", ",", "'r'", ")", "as", "f", ":", "\n", "\n", "        ", "for", "line", "in", "f", ":", "\n", "            ", "x0", ",", "y0", ",", "x1", ",", "y1", ",", "h", ",", "w", "=", "line", ".", "strip", "(", "'\\n'", ")", ".", "split", "(", "' '", ")", "\n", "x0", ",", "y0", ",", "x1", ",", "y1", ",", "h", ",", "w", "=", "float", "(", "x0", ")", ",", "float", "(", "y0", ")", ",", "float", "(", "x1", ")", ",", "float", "(", "y1", ")", ",", "float", "(", "h", ")", ",", "float", "(", "w", ")", "\n", "x0", ",", "y0", ",", "x1", ",", "y1", "=", "x0", "/", "w", "*", "resize_size", "-", "shift_size", ",", "y0", "/", "h", "*", "resize_size", "-", "shift_size", ",", "x1", "/", "w", "*", "resize_size", "-", "shift_size", ",", "y1", "/", "h", "*", "resize_size", "-", "shift_size", "\n", "if", "x0", "<", "0", ":", "\n", "                ", "x0", "=", "0", "\n", "", "if", "y0", "<", "0", ":", "\n", "                ", "y0", "=", "0", "\n", "", "if", "x1", ">", "crop_size", ":", "\n", "                ", "x1", "=", "crop_size", "\n", "", "if", "y1", ">", "crop_size", ":", "\n", "                ", "y1", "=", "crop_size", "\n", "", "test_gt", ".", "append", "(", "[", "x0", ",", "y0", ",", "x1", ",", "y1", "]", ")", "\n", "", "", "final_dict", "=", "{", "}", "\n", "for", "k", ",", "v", "in", "zip", "(", "test_txt", ",", "test_gt", ")", ":", "\n", "        ", "k", "=", "os", ".", "path", ".", "join", "(", "root", ",", "'test'", ",", "k", ")", "\n", "k", "=", "k", ".", "replace", "(", "'/'", ",", "'\\\\'", ")", "\n", "final_dict", "[", "k", "]", "=", "v", "\n", "", "return", "final_dict", "\n", "\n", "", "class", "ImageDataset", "(", "data", ".", "Dataset", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "self", ".", "args", "=", "args", "\n", "self", ".", "root", "=", "args", ".", "root", "\n", "self", ".", "test_txt_path", "=", "args", ".", "test_txt_path", "\n", "self", ".", "test_gt_path", "=", "args", ".", "test_gt_path", "\n"]], "home.repos.pwc.inspect_result.wpy1999_bas.ILSVRC.util.remove_layer": [[27, 33], ["state_dict.keys", "state_dict.pop"], "function", ["None"], ["def", "remove_layer", "(", "state_dict", ",", "keyword", ")", ":", "\n", "    ", "keys", "=", "[", "key", "for", "key", "in", "state_dict", ".", "keys", "(", ")", "]", "\n", "for", "key", "in", "keys", ":", "\n", "        ", "if", "keyword", "in", "key", ":", "\n", "            ", "state_dict", ".", "pop", "(", "key", ")", "\n", "", "", "return", "state_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.wpy1999_bas.ILSVRC.util.replace_layer": [[35, 42], ["state_dict.keys", "key.replace", "state_dict.pop"], "function", ["None"], ["", "def", "replace_layer", "(", "state_dict", ",", "keyword1", ",", "keyword2", ")", ":", "\n", "    ", "keys", "=", "[", "key", "for", "key", "in", "state_dict", ".", "keys", "(", ")", "]", "\n", "for", "key", "in", "keys", ":", "\n", "        ", "if", "keyword1", "in", "key", ":", "\n", "            ", "new_key", "=", "key", ".", "replace", "(", "keyword1", ",", "keyword2", ")", "\n", "state_dict", "[", "new_key", "]", "=", "state_dict", ".", "pop", "(", "key", ")", "\n", "", "", "return", "state_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.wpy1999_bas.ILSVRC.util.initialize_weights": [[44, 61], ["isinstance", "isinstance", "torch.init.kaiming_normal_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "isinstance", "torch.init.xavier_uniform_", "ValueError", "torch.init.normal_"], "function", ["None"], ["", "def", "initialize_weights", "(", "modules", ",", "init_mode", ")", ":", "\n", "    ", "for", "m", "in", "modules", ":", "\n", "        ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "            ", "if", "init_mode", "==", "'he'", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ",", "\n", "nonlinearity", "=", "'relu'", ")", "\n", "", "elif", "init_mode", "==", "'xavier'", ":", "\n", "                ", "nn", ".", "init", ".", "xavier_uniform_", "(", "m", ".", "weight", ".", "data", ")", "\n", "", "else", ":", "\n", "                ", "raise", "ValueError", "(", "'Invalid init_mode {}'", ".", "format", "(", "init_mode", ")", ")", "\n", "", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "            ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "            ", "nn", ".", "init", ".", "normal_", "(", "m", ".", "weight", ",", "0", ",", "0.01", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", ""]]}