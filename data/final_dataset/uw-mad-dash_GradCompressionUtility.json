{"home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.modeling.BertConfig.__init__": [[40, 86], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "\n", "vocab_size", ",", "\n", "hidden_size", "=", "768", ",", "\n", "num_hidden_layers", "=", "12", ",", "\n", "num_attention_heads", "=", "12", ",", "\n", "intermediate_size", "=", "3072", ",", "\n", "hidden_act", "=", "\"gelu\"", ",", "\n", "hidden_dropout_prob", "=", "0.1", ",", "\n", "attention_probs_dropout_prob", "=", "0.1", ",", "\n", "max_position_embeddings", "=", "512", ",", "\n", "type_vocab_size", "=", "16", ",", "\n", "initializer_range", "=", "0.02", ")", ":", "\n", "        ", "\"\"\"Constructs BertConfig.\n        Args:\n            vocab_size: Vocabulary size of `inputs_ids` in `BertModel`.\n            hidden_size: Size of the encoder layers and the pooler layer.\n            num_hidden_layers: Number of hidden layers in the Transformer encoder.\n            num_attention_heads: Number of attention heads for each attention layer in\n                the Transformer encoder.\n            intermediate_size: The size of the \"intermediate\" (i.e., feed-forward)\n                layer in the Transformer encoder.\n            hidden_act: The non-linear activation function (function or string) in the\n                encoder and pooler.\n            hidden_dropout_prob: The dropout probabilitiy for all fully connected\n                layers in the embeddings, encoder, and pooler.\n            attention_probs_dropout_prob: The dropout ratio for the attention\n                probabilities.\n            max_position_embeddings: The maximum sequence length that this model might\n                ever be used with. Typically set this to something large just in case\n                (e.g., 512 or 1024 or 2048).\n            type_vocab_size: The vocabulary size of the `token_type_ids` passed into\n                `BertModel`.\n            initializer_range: The sttdev of the truncated_normal_initializer for\n                initializing all weight matrices.\n        \"\"\"", "\n", "self", ".", "vocab_size", "=", "vocab_size", "\n", "self", ".", "hidden_size", "=", "hidden_size", "\n", "self", ".", "num_hidden_layers", "=", "num_hidden_layers", "\n", "self", ".", "num_attention_heads", "=", "num_attention_heads", "\n", "self", ".", "hidden_act", "=", "hidden_act", "\n", "self", ".", "intermediate_size", "=", "intermediate_size", "\n", "self", ".", "hidden_dropout_prob", "=", "hidden_dropout_prob", "\n", "self", ".", "attention_probs_dropout_prob", "=", "attention_probs_dropout_prob", "\n", "self", ".", "max_position_embeddings", "=", "max_position_embeddings", "\n", "self", ".", "type_vocab_size", "=", "type_vocab_size", "\n", "self", ".", "initializer_range", "=", "initializer_range", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.modeling.BertConfig.from_dict": [[87, 94], ["modeling.BertConfig", "six.iteritems"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "from_dict", "(", "cls", ",", "json_object", ")", ":", "\n", "        ", "\"\"\"Constructs a `BertConfig` from a Python dictionary of parameters.\"\"\"", "\n", "config", "=", "BertConfig", "(", "vocab_size", "=", "None", ")", "\n", "for", "(", "key", ",", "value", ")", "in", "six", ".", "iteritems", "(", "json_object", ")", ":", "\n", "            ", "config", ".", "__dict__", "[", "key", "]", "=", "value", "\n", "", "return", "config", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.modeling.BertConfig.from_json_file": [[95, 101], ["cls.from_dict", "open", "reader.read", "json.loads"], "methods", ["home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.modeling.BertConfig.from_dict"], ["", "@", "classmethod", "\n", "def", "from_json_file", "(", "cls", ",", "json_file", ")", ":", "\n", "        ", "\"\"\"Constructs a `BertConfig` from a json file of parameters.\"\"\"", "\n", "with", "open", "(", "json_file", ",", "\"r\"", ")", "as", "reader", ":", "\n", "            ", "text", "=", "reader", ".", "read", "(", ")", "\n", "", "return", "cls", ".", "from_dict", "(", "json", ".", "loads", "(", "text", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.modeling.BertConfig.to_dict": [[102, 106], ["copy.deepcopy"], "methods", ["None"], ["", "def", "to_dict", "(", "self", ")", ":", "\n", "        ", "\"\"\"Serializes this instance to a Python dictionary.\"\"\"", "\n", "output", "=", "copy", ".", "deepcopy", "(", "self", ".", "__dict__", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.modeling.BertConfig.to_json_string": [[107, 110], ["json.dumps", "modeling.BertConfig.to_dict"], "methods", ["home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.modeling.BertConfig.to_dict"], ["", "def", "to_json_string", "(", "self", ")", ":", "\n", "        ", "\"\"\"Serializes this instance to a JSON string.\"\"\"", "\n", "return", "json", ".", "dumps", "(", "self", ".", "to_dict", "(", ")", ",", "indent", "=", "2", ",", "sort_keys", "=", "True", ")", "+", "\"\\n\"", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.modeling.BERTLayerNorm.__init__": [[113, 120], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.cifar_architectures.wresnet.Wide_ResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "variance_epsilon", "=", "1e-12", ")", ":", "\n", "        ", "\"\"\"Construct a layernorm module in the TF style (epsilon inside the square root).\n        \"\"\"", "\n", "super", "(", "BERTLayerNorm", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "gamma", "=", "nn", ".", "Parameter", "(", "torch", ".", "ones", "(", "config", ".", "hidden_size", ")", ")", "\n", "self", ".", "beta", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "config", ".", "hidden_size", ")", ")", "\n", "self", ".", "variance_epsilon", "=", "variance_epsilon", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.modeling.BERTLayerNorm.forward": [[121, 126], ["x.mean", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "u", "=", "x", ".", "mean", "(", "-", "1", ",", "keepdim", "=", "True", ")", "\n", "s", "=", "(", "x", "-", "u", ")", ".", "pow", "(", "2", ")", ".", "mean", "(", "-", "1", ",", "keepdim", "=", "True", ")", "\n", "x", "=", "(", "x", "-", "u", ")", "/", "torch", ".", "sqrt", "(", "s", "+", "self", ".", "variance_epsilon", ")", "\n", "return", "self", ".", "gamma", "*", "x", "+", "self", ".", "beta", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.modeling.BERTEmbeddings.__init__": [[128, 140], ["torch.Module.__init__", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "modeling.BERTLayerNorm", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.cifar_architectures.wresnet.Wide_ResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "BERTEmbeddings", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\"\"\"Construct the embedding module from word, position and token_type embeddings.\n        \"\"\"", "\n", "self", ".", "word_embeddings", "=", "nn", ".", "Embedding", "(", "config", ".", "vocab_size", ",", "config", ".", "hidden_size", ")", "\n", "self", ".", "position_embeddings", "=", "nn", ".", "Embedding", "(", "config", ".", "max_position_embeddings", ",", "config", ".", "hidden_size", ")", "\n", "self", ".", "token_type_embeddings", "=", "nn", ".", "Embedding", "(", "config", ".", "type_vocab_size", ",", "config", ".", "hidden_size", ")", "\n", "\n", "# self.LayerNorm is not snake-cased to stick with TensorFlow model variable name and be able to load", "\n", "# any TensorFlow checkpoint file", "\n", "self", ".", "LayerNorm", "=", "BERTLayerNorm", "(", "config", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "config", ".", "hidden_dropout_prob", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.modeling.BERTEmbeddings.forward": [[141, 156], ["input_ids.size", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "position_ids.unsqueeze().expand_as.unsqueeze().expand_as.unsqueeze().expand_as", "modeling.BERTEmbeddings.word_embeddings", "modeling.BERTEmbeddings.position_embeddings", "modeling.BERTEmbeddings.token_type_embeddings", "modeling.BERTEmbeddings.LayerNorm", "modeling.BERTEmbeddings.dropout", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "position_ids.unsqueeze().expand_as.unsqueeze().expand_as.unsqueeze"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_ids", ",", "token_type_ids", "=", "None", ")", ":", "\n", "        ", "seq_length", "=", "input_ids", ".", "size", "(", "1", ")", "\n", "position_ids", "=", "torch", ".", "arange", "(", "seq_length", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "input_ids", ".", "device", ")", "\n", "position_ids", "=", "position_ids", ".", "unsqueeze", "(", "0", ")", ".", "expand_as", "(", "input_ids", ")", "\n", "if", "token_type_ids", "is", "None", ":", "\n", "            ", "token_type_ids", "=", "torch", ".", "zeros_like", "(", "input_ids", ")", "\n", "\n", "", "words_embeddings", "=", "self", ".", "word_embeddings", "(", "input_ids", ")", "\n", "position_embeddings", "=", "self", ".", "position_embeddings", "(", "position_ids", ")", "\n", "token_type_embeddings", "=", "self", ".", "token_type_embeddings", "(", "token_type_ids", ")", "\n", "\n", "embeddings", "=", "words_embeddings", "+", "position_embeddings", "+", "token_type_embeddings", "\n", "embeddings", "=", "self", ".", "LayerNorm", "(", "embeddings", ")", "\n", "embeddings", "=", "self", ".", "dropout", "(", "embeddings", ")", "\n", "return", "embeddings", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.modeling.BERTSelfAttention.__init__": [[159, 174], ["torch.Module.__init__", "int", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "ValueError"], "methods", ["home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.cifar_architectures.wresnet.Wide_ResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "BERTSelfAttention", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "config", ".", "hidden_size", "%", "config", ".", "num_attention_heads", "!=", "0", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"The hidden size (%d) is not a multiple of the number of attention \"", "\n", "\"heads (%d)\"", "%", "(", "config", ".", "hidden_size", ",", "config", ".", "num_attention_heads", ")", ")", "\n", "", "self", ".", "num_attention_heads", "=", "config", ".", "num_attention_heads", "\n", "self", ".", "attention_head_size", "=", "int", "(", "config", ".", "hidden_size", "/", "config", ".", "num_attention_heads", ")", "\n", "self", ".", "all_head_size", "=", "self", ".", "num_attention_heads", "*", "self", ".", "attention_head_size", "\n", "\n", "self", ".", "query", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "self", ".", "all_head_size", ")", "\n", "self", ".", "key", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "self", ".", "all_head_size", ")", "\n", "self", ".", "value", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "self", ".", "all_head_size", ")", "\n", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "config", ".", "attention_probs_dropout_prob", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.modeling.BERTSelfAttention.transpose_for_scores": [[175, 179], ["x.view.view.view", "x.view.view.permute", "x.view.view.size"], "methods", ["None"], ["", "def", "transpose_for_scores", "(", "self", ",", "x", ")", ":", "\n", "        ", "new_x_shape", "=", "x", ".", "size", "(", ")", "[", ":", "-", "1", "]", "+", "(", "self", ".", "num_attention_heads", ",", "self", ".", "attention_head_size", ")", "\n", "x", "=", "x", ".", "view", "(", "*", "new_x_shape", ")", "\n", "return", "x", ".", "permute", "(", "0", ",", "2", ",", "1", ",", "3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.modeling.BERTSelfAttention.forward": [[180, 207], ["modeling.BERTSelfAttention.query", "modeling.BERTSelfAttention.key", "modeling.BERTSelfAttention.value", "modeling.BERTSelfAttention.transpose_for_scores", "modeling.BERTSelfAttention.transpose_for_scores", "modeling.BERTSelfAttention.transpose_for_scores", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "modeling.BERTSelfAttention.dropout", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "context_layer.view.view.permute().contiguous", "context_layer.view.view.view", "modeling.BERTSelfAttention.transpose", "math.sqrt", "torch.Softmax", "torch.Softmax", "context_layer.view.view.permute", "context_layer.view.view.size"], "methods", ["home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.modeling.BERTSelfAttention.transpose_for_scores", "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.modeling.BERTSelfAttention.transpose_for_scores", "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.modeling.BERTSelfAttention.transpose_for_scores"], ["", "def", "forward", "(", "self", ",", "hidden_states", ",", "attention_mask", ")", ":", "\n", "        ", "mixed_query_layer", "=", "self", ".", "query", "(", "hidden_states", ")", "\n", "mixed_key_layer", "=", "self", ".", "key", "(", "hidden_states", ")", "\n", "mixed_value_layer", "=", "self", ".", "value", "(", "hidden_states", ")", "\n", "\n", "query_layer", "=", "self", ".", "transpose_for_scores", "(", "mixed_query_layer", ")", "\n", "key_layer", "=", "self", ".", "transpose_for_scores", "(", "mixed_key_layer", ")", "\n", "value_layer", "=", "self", ".", "transpose_for_scores", "(", "mixed_value_layer", ")", "\n", "\n", "# Take the dot product between \"query\" and \"key\" to get the raw attention scores.", "\n", "attention_scores", "=", "torch", ".", "matmul", "(", "query_layer", ",", "key_layer", ".", "transpose", "(", "-", "1", ",", "-", "2", ")", ")", "\n", "attention_scores", "=", "attention_scores", "/", "math", ".", "sqrt", "(", "self", ".", "attention_head_size", ")", "\n", "# Apply the attention mask is (precomputed for all layers in BertModel forward() function)", "\n", "attention_scores", "=", "attention_scores", "+", "attention_mask", "\n", "\n", "# Normalize the attention scores to probabilities.", "\n", "attention_probs", "=", "nn", ".", "Softmax", "(", "dim", "=", "-", "1", ")", "(", "attention_scores", ")", "\n", "\n", "# This is actually dropping out entire tokens to attend to, which might", "\n", "# seem a bit unusual, but is taken from the original Transformer paper.", "\n", "attention_probs", "=", "self", ".", "dropout", "(", "attention_probs", ")", "\n", "\n", "context_layer", "=", "torch", ".", "matmul", "(", "attention_probs", ",", "value_layer", ")", "\n", "context_layer", "=", "context_layer", ".", "permute", "(", "0", ",", "2", ",", "1", ",", "3", ")", ".", "contiguous", "(", ")", "\n", "new_context_layer_shape", "=", "context_layer", ".", "size", "(", ")", "[", ":", "-", "2", "]", "+", "(", "self", ".", "all_head_size", ",", ")", "\n", "context_layer", "=", "context_layer", ".", "view", "(", "*", "new_context_layer_shape", ")", "\n", "return", "context_layer", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.modeling.BERTSelfOutput.__init__": [[210, 215], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "modeling.BERTLayerNorm", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.cifar_architectures.wresnet.Wide_ResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "BERTSelfOutput", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dense", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "config", ".", "hidden_size", ")", "\n", "self", ".", "LayerNorm", "=", "BERTLayerNorm", "(", "config", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "config", ".", "hidden_dropout_prob", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.modeling.BERTSelfOutput.forward": [[216, 221], ["modeling.BERTSelfOutput.dense", "modeling.BERTSelfOutput.dropout", "modeling.BERTSelfOutput.LayerNorm"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "hidden_states", ",", "input_tensor", ")", ":", "\n", "        ", "hidden_states", "=", "self", ".", "dense", "(", "hidden_states", ")", "\n", "hidden_states", "=", "self", ".", "dropout", "(", "hidden_states", ")", "\n", "hidden_states", "=", "self", ".", "LayerNorm", "(", "hidden_states", "+", "input_tensor", ")", "\n", "return", "hidden_states", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.modeling.BERTAttention.__init__": [[224, 228], ["torch.Module.__init__", "modeling.BERTSelfAttention", "modeling.BERTSelfOutput"], "methods", ["home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.cifar_architectures.wresnet.Wide_ResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "BERTAttention", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "self", "=", "BERTSelfAttention", "(", "config", ")", "\n", "self", ".", "output", "=", "BERTSelfOutput", "(", "config", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.modeling.BERTAttention.forward": [[229, 233], ["modeling.BERTAttention.self", "modeling.BERTAttention.output"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_tensor", ",", "attention_mask", ")", ":", "\n", "        ", "self_output", "=", "self", ".", "self", "(", "input_tensor", ",", "attention_mask", ")", "\n", "attention_output", "=", "self", ".", "output", "(", "self_output", ",", "input_tensor", ")", "\n", "return", "attention_output", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.modeling.BERTIntermediate.__init__": [[236, 240], ["torch.Module.__init__", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.cifar_architectures.wresnet.Wide_ResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "BERTIntermediate", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dense", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "config", ".", "intermediate_size", ")", "\n", "self", ".", "intermediate_act_fn", "=", "gelu", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.modeling.BERTIntermediate.forward": [[241, 245], ["modeling.BERTIntermediate.dense", "modeling.BERTIntermediate.intermediate_act_fn"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "hidden_states", ")", ":", "\n", "        ", "hidden_states", "=", "self", ".", "dense", "(", "hidden_states", ")", "\n", "hidden_states", "=", "self", ".", "intermediate_act_fn", "(", "hidden_states", ")", "\n", "return", "hidden_states", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.modeling.BERTOutput.__init__": [[248, 253], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "modeling.BERTLayerNorm", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.cifar_architectures.wresnet.Wide_ResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "BERTOutput", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dense", "=", "nn", ".", "Linear", "(", "config", ".", "intermediate_size", ",", "config", ".", "hidden_size", ")", "\n", "self", ".", "LayerNorm", "=", "BERTLayerNorm", "(", "config", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "config", ".", "hidden_dropout_prob", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.modeling.BERTOutput.forward": [[254, 259], ["modeling.BERTOutput.dense", "modeling.BERTOutput.dropout", "modeling.BERTOutput.LayerNorm"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "hidden_states", ",", "input_tensor", ")", ":", "\n", "        ", "hidden_states", "=", "self", ".", "dense", "(", "hidden_states", ")", "\n", "hidden_states", "=", "self", ".", "dropout", "(", "hidden_states", ")", "\n", "hidden_states", "=", "self", ".", "LayerNorm", "(", "hidden_states", "+", "input_tensor", ")", "\n", "return", "hidden_states", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.modeling.BERTLayer.__init__": [[262, 267], ["torch.Module.__init__", "modeling.BERTAttention", "modeling.BERTIntermediate", "modeling.BERTOutput"], "methods", ["home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.cifar_architectures.wresnet.Wide_ResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "BERTLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "attention", "=", "BERTAttention", "(", "config", ")", "\n", "self", ".", "intermediate", "=", "BERTIntermediate", "(", "config", ")", "\n", "self", ".", "output", "=", "BERTOutput", "(", "config", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.modeling.BERTLayer.forward": [[268, 273], ["modeling.BERTLayer.attention", "modeling.BERTLayer.intermediate", "modeling.BERTLayer.output"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "hidden_states", ",", "attention_mask", ")", ":", "\n", "        ", "attention_output", "=", "self", ".", "attention", "(", "hidden_states", ",", "attention_mask", ")", "\n", "intermediate_output", "=", "self", ".", "intermediate", "(", "attention_output", ")", "\n", "layer_output", "=", "self", ".", "output", "(", "intermediate_output", ",", "attention_output", ")", "\n", "return", "layer_output", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.modeling.BERTEncoder.__init__": [[276, 280], ["torch.Module.__init__", "modeling.BERTLayer", "torch.ModuleList", "torch.ModuleList", "copy.deepcopy", "range"], "methods", ["home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.cifar_architectures.wresnet.Wide_ResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "BERTEncoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "layer", "=", "BERTLayer", "(", "config", ")", "\n", "self", ".", "layer", "=", "nn", ".", "ModuleList", "(", "[", "copy", ".", "deepcopy", "(", "layer", ")", "for", "_", "in", "range", "(", "config", ".", "num_hidden_layers", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.modeling.BERTEncoder.forward": [[281, 287], ["layer_module", "all_encoder_layers.append"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "hidden_states", ",", "attention_mask", ")", ":", "\n", "        ", "all_encoder_layers", "=", "[", "]", "\n", "for", "layer_module", "in", "self", ".", "layer", ":", "\n", "            ", "hidden_states", "=", "layer_module", "(", "hidden_states", ",", "attention_mask", ")", "\n", "all_encoder_layers", ".", "append", "(", "hidden_states", ")", "\n", "", "return", "all_encoder_layers", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.modeling.BERTPooler.__init__": [[290, 294], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Tanh", "torch.Tanh"], "methods", ["home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.cifar_architectures.wresnet.Wide_ResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "BERTPooler", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dense", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "config", ".", "hidden_size", ")", "\n", "self", ".", "activation", "=", "nn", ".", "Tanh", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.modeling.BERTPooler.forward": [[295, 302], ["modeling.BERTPooler.dense", "modeling.BERTPooler.activation"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "hidden_states", ")", ":", "\n", "# We \"pool\" the model by simply taking the hidden state corresponding", "\n", "# to the first token.", "\n", "        ", "first_token_tensor", "=", "hidden_states", "[", ":", ",", "0", "]", "\n", "pooled_output", "=", "self", ".", "dense", "(", "first_token_tensor", ")", "\n", "pooled_output", "=", "self", ".", "activation", "(", "pooled_output", ")", "\n", "return", "pooled_output", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.modeling.BertModel.__init__": [[318, 327], ["torch.Module.__init__", "modeling.BERTEmbeddings", "modeling.BERTEncoder", "modeling.BERTPooler"], "methods", ["home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.cifar_architectures.wresnet.Wide_ResNet.__init__"], ["def", "__init__", "(", "self", ",", "config", ":", "BertConfig", ")", ":", "\n", "        ", "\"\"\"Constructor for BertModel.\n        Args:\n            config: `BertConfig` instance.\n        \"\"\"", "\n", "super", "(", "BertModel", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "embeddings", "=", "BERTEmbeddings", "(", "config", ")", "\n", "self", ".", "encoder", "=", "BERTEncoder", "(", "config", ")", "\n", "self", ".", "pooler", "=", "BERTPooler", "(", "config", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.modeling.BertModel.forward": [[328, 354], ["torch.ones_like.unsqueeze().unsqueeze", "torch.ones_like.unsqueeze().unsqueeze", "extended_attention_mask.float.float.float", "modeling.BertModel.embeddings", "modeling.BertModel.encoder", "modeling.BertModel.pooler", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.ones_like.unsqueeze", "torch.ones_like.unsqueeze"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_ids", ",", "token_type_ids", "=", "None", ",", "attention_mask", "=", "None", ")", ":", "\n", "        ", "if", "attention_mask", "is", "None", ":", "\n", "            ", "attention_mask", "=", "torch", ".", "ones_like", "(", "input_ids", ")", "\n", "", "if", "token_type_ids", "is", "None", ":", "\n", "            ", "token_type_ids", "=", "torch", ".", "zeros_like", "(", "input_ids", ")", "\n", "\n", "# We create a 3D attention mask from a 2D tensor mask.", "\n", "# Sizes are [batch_size, 1, 1, from_seq_length]", "\n", "# So we can broadcast to [batch_size, num_heads, to_seq_length, from_seq_length]", "\n", "# this attention mask is more simple than the triangular masking of causal attention", "\n", "# used in OpenAI GPT, we just need to prepare the broadcast dimension here.", "\n", "", "extended_attention_mask", "=", "attention_mask", ".", "unsqueeze", "(", "1", ")", ".", "unsqueeze", "(", "2", ")", "\n", "\n", "# Since attention_mask is 1.0 for positions we want to attend and 0.0 for", "\n", "# masked positions, this operation will create a tensor which is 0.0 for", "\n", "# positions we want to attend and -10000.0 for masked positions.", "\n", "# Since we are adding it to the raw scores before the softmax, this is", "\n", "# effectively the same as removing these entirely.", "\n", "extended_attention_mask", "=", "extended_attention_mask", ".", "float", "(", ")", "\n", "extended_attention_mask", "=", "(", "1.0", "-", "extended_attention_mask", ")", "*", "-", "10000.0", "\n", "\n", "embedding_output", "=", "self", ".", "embeddings", "(", "input_ids", ",", "token_type_ids", ")", "\n", "all_encoder_layers", "=", "self", ".", "encoder", "(", "embedding_output", ",", "extended_attention_mask", ")", "\n", "sequence_output", "=", "all_encoder_layers", "[", "-", "1", "]", "\n", "pooled_output", "=", "self", ".", "pooler", "(", "sequence_output", ")", "\n", "return", "all_encoder_layers", ",", "pooled_output", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.modeling.BertForSequenceClassification.__init__": [[372, 389], ["torch.Module.__init__", "modeling.BertModel", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "modeling.BertForSequenceClassification.apply", "isinstance", "isinstance", "module.weight.data.normal_", "isinstance", "module.bias.data.zero_", "module.beta.data.normal_", "module.gamma.data.normal_"], "methods", ["home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.cifar_architectures.wresnet.Wide_ResNet.__init__"], ["def", "__init__", "(", "self", ",", "config", ",", "num_labels", ")", ":", "\n", "        ", "super", "(", "BertForSequenceClassification", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "bert", "=", "BertModel", "(", "config", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "config", ".", "hidden_dropout_prob", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "num_labels", ")", "\n", "\n", "def", "init_weights", "(", "module", ")", ":", "\n", "            ", "if", "isinstance", "(", "module", ",", "(", "nn", ".", "Linear", ",", "nn", ".", "Embedding", ")", ")", ":", "\n", "# Slightly different from the TF version which uses truncated_normal for initialization", "\n", "# cf https://github.com/pytorch/pytorch/pull/5617", "\n", "                ", "module", ".", "weight", ".", "data", ".", "normal_", "(", "mean", "=", "0.0", ",", "std", "=", "config", ".", "initializer_range", ")", "\n", "", "elif", "isinstance", "(", "module", ",", "BERTLayerNorm", ")", ":", "\n", "                ", "module", ".", "beta", ".", "data", ".", "normal_", "(", "mean", "=", "0.0", ",", "std", "=", "config", ".", "initializer_range", ")", "\n", "module", ".", "gamma", ".", "data", ".", "normal_", "(", "mean", "=", "0.0", ",", "std", "=", "config", ".", "initializer_range", ")", "\n", "", "if", "isinstance", "(", "module", ",", "nn", ".", "Linear", ")", ":", "\n", "                ", "module", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "", "self", ".", "apply", "(", "init_weights", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.modeling.BertForSequenceClassification.forward": [[390, 401], ["modeling.BertForSequenceClassification.bert", "modeling.BertForSequenceClassification.dropout", "modeling.BertForSequenceClassification.classifier", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss.", "torch.nn.CrossEntropyLoss."], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_ids", ",", "token_type_ids", ",", "attention_mask", ",", "labels", "=", "None", ")", ":", "\n", "        ", "_", ",", "pooled_output", "=", "self", ".", "bert", "(", "input_ids", ",", "token_type_ids", ",", "attention_mask", ")", "\n", "pooled_output", "=", "self", ".", "dropout", "(", "pooled_output", ")", "\n", "logits", "=", "self", ".", "classifier", "(", "pooled_output", ")", "\n", "\n", "if", "labels", "is", "not", "None", ":", "\n", "            ", "loss_fct", "=", "CrossEntropyLoss", "(", ")", "\n", "loss", "=", "loss_fct", "(", "logits", ",", "labels", ")", "\n", "return", "loss", ",", "logits", "\n", "", "else", ":", "\n", "            ", "return", "logits", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.modeling.BertForQuestionAnswering.__init__": [[419, 437], ["torch.Module.__init__", "modeling.BertModel", "torch.Linear", "torch.Linear", "modeling.BertForQuestionAnswering.apply", "isinstance", "isinstance", "module.weight.data.normal_", "isinstance", "module.bias.data.zero_", "module.beta.data.normal_", "module.gamma.data.normal_"], "methods", ["home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.cifar_architectures.wresnet.Wide_ResNet.__init__"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "BertForQuestionAnswering", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "bert", "=", "BertModel", "(", "config", ")", "\n", "# TODO check with Google if it's normal there is no dropout on the token classifier of SQuAD in the TF version", "\n", "# self.dropout = nn.Dropout(config.hidden_dropout_prob)", "\n", "self", ".", "qa_outputs", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "2", ")", "\n", "\n", "def", "init_weights", "(", "module", ")", ":", "\n", "            ", "if", "isinstance", "(", "module", ",", "(", "nn", ".", "Linear", ",", "nn", ".", "Embedding", ")", ")", ":", "\n", "# Slightly different from the TF version which uses truncated_normal for initialization", "\n", "# cf https://github.com/pytorch/pytorch/pull/5617", "\n", "                ", "module", ".", "weight", ".", "data", ".", "normal_", "(", "mean", "=", "0.0", ",", "std", "=", "config", ".", "initializer_range", ")", "\n", "", "elif", "isinstance", "(", "module", ",", "BERTLayerNorm", ")", ":", "\n", "                ", "module", ".", "beta", ".", "data", ".", "normal_", "(", "mean", "=", "0.0", ",", "std", "=", "config", ".", "initializer_range", ")", "\n", "module", ".", "gamma", ".", "data", ".", "normal_", "(", "mean", "=", "0.0", ",", "std", "=", "config", ".", "initializer_range", ")", "\n", "", "if", "isinstance", "(", "module", ",", "nn", ".", "Linear", ")", ":", "\n", "                ", "module", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "", "self", ".", "apply", "(", "init_weights", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.modeling.BertForQuestionAnswering.forward": [[438, 462], ["modeling.BertForQuestionAnswering.bert", "modeling.BertForQuestionAnswering.qa_outputs", "modeling.BertForQuestionAnswering.split", "start_logits.squeeze.squeeze.squeeze", "end_logits.squeeze.squeeze.squeeze", "start_positions.squeeze.squeeze.squeeze", "end_positions.squeeze.squeeze.squeeze", "start_logits.squeeze.squeeze.size", "start_positions.squeeze.squeeze.clamp_", "end_positions.squeeze.squeeze.clamp_", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss.", "torch.nn.CrossEntropyLoss.", "torch.nn.CrossEntropyLoss.", "torch.nn.CrossEntropyLoss."], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_ids", ",", "token_type_ids", ",", "attention_mask", ",", "start_positions", "=", "None", ",", "end_positions", "=", "None", ")", ":", "\n", "        ", "all_encoder_layers", ",", "_", "=", "self", ".", "bert", "(", "input_ids", ",", "token_type_ids", ",", "attention_mask", ")", "\n", "sequence_output", "=", "all_encoder_layers", "[", "-", "1", "]", "\n", "logits", "=", "self", ".", "qa_outputs", "(", "sequence_output", ")", "\n", "start_logits", ",", "end_logits", "=", "logits", ".", "split", "(", "1", ",", "dim", "=", "-", "1", ")", "\n", "start_logits", "=", "start_logits", ".", "squeeze", "(", "-", "1", ")", "\n", "end_logits", "=", "end_logits", ".", "squeeze", "(", "-", "1", ")", "\n", "\n", "if", "start_positions", "is", "not", "None", "and", "end_positions", "is", "not", "None", ":", "\n", "# If we are on multi-GPU, split add a dimension - if not this is a no-op", "\n", "            ", "start_positions", "=", "start_positions", ".", "squeeze", "(", "-", "1", ")", "\n", "end_positions", "=", "end_positions", ".", "squeeze", "(", "-", "1", ")", "\n", "# sometimes the start/end positions are outside our model inputs, we ignore these terms", "\n", "ignored_index", "=", "start_logits", ".", "size", "(", "1", ")", "\n", "start_positions", ".", "clamp_", "(", "0", ",", "ignored_index", ")", "\n", "end_positions", ".", "clamp_", "(", "0", ",", "ignored_index", ")", "\n", "\n", "loss_fct", "=", "CrossEntropyLoss", "(", "ignore_index", "=", "ignored_index", ")", "\n", "start_loss", "=", "loss_fct", "(", "start_logits", ",", "start_positions", ")", "\n", "end_loss", "=", "loss_fct", "(", "end_logits", ",", "end_positions", ")", "\n", "total_loss", "=", "(", "start_loss", "+", "end_loss", ")", "/", "2", "\n", "return", "total_loss", "\n", "", "else", ":", "\n", "            ", "return", "start_logits", ",", "end_logits", "", "", "", "", ""]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.modeling.gelu": [[29, 35], ["torch.erf", "torch.erf", "math.sqrt"], "function", ["None"], ["def", "gelu", "(", "x", ")", ":", "\n", "    ", "\"\"\"Implementation of the gelu activation function.\n        For information: OpenAI GPT's gelu is slightly different (and gives slightly different results):\n        0.5 * x * (1 + torch.tanh(math.sqrt(2 / math.pi) * (x + 0.044715 * torch.pow(x, 3))))\n    \"\"\"", "\n", "return", "x", "*", "0.5", "*", "(", "1.0", "+", "torch", ".", "erf", "(", "x", "/", "math", ".", "sqrt", "(", "2.0", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.timer.Timer.__init__": [[25, 31], ["timer.Timer.reset"], "methods", ["home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.timer.Timer.reset"], ["def", "__init__", "(", "self", ",", "verbosity_level", "=", "1", ",", "log_fn", "=", "None", ",", "skip_first", "=", "True", ")", ":", "\n", "        ", "self", ".", "verbosity_level", "=", "verbosity_level", "\n", "self", ".", "log_fn", "=", "log_fn", "if", "log_fn", "is", "not", "None", "else", "self", ".", "_default_log_fn", "\n", "self", ".", "skip_first", "=", "skip_first", "\n", "\n", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.timer.Timer.reset": [[32, 38], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "\"\"\"Reset the timer\"\"\"", "\n", "self", ".", "totals", "=", "{", "}", "# Total time per label", "\n", "self", ".", "first_time", "=", "{", "}", "# First occurrence of a label (start time)", "\n", "self", ".", "last_time", "=", "{", "}", "# Last occurence of a label (end time)", "\n", "self", ".", "call_counts", "=", "{", "}", "# Number of times a label occurred", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.timer.Timer.__call__": [[39, 80], ["timer.Timer._cuda_sync", "time.time", "timer.Timer._cuda_sync", "time.time", "numpy.random.rand", "timer.Timer.log_fn", "float"], "methods", ["home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.timer.Timer._cuda_sync", "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.timer.Timer._cuda_sync"], ["", "@", "contextmanager", "\n", "def", "__call__", "(", "self", ",", "label", ",", "epoch", "=", "-", "1.0", ",", "verbosity", "=", "1", ")", ":", "\n", "# Don't measure this if the verbosity level is too high", "\n", "        ", "if", "verbosity", ">", "self", ".", "verbosity_level", ":", "\n", "            ", "yield", "\n", "return", "\n", "\n", "# Measure the time", "\n", "", "self", ".", "_cuda_sync", "(", ")", "\n", "# we switch to a lower resolution timer for now", "\n", "#start = time.time_ns() * NS", "\n", "start", "=", "time", ".", "time", "(", ")", "\n", "yield", "\n", "self", ".", "_cuda_sync", "(", ")", "\n", "#end = time.time_ns() * NS", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "# Update first and last occurrence of this label", "\n", "if", "not", "label", "in", "self", ".", "first_time", ":", "\n", "            ", "self", ".", "first_time", "[", "label", "]", "=", "start", "\n", "", "self", ".", "last_time", "[", "label", "]", "=", "end", "\n", "\n", "# Update the totals and call counts", "\n", "if", "not", "label", "in", "self", ".", "totals", "and", "self", ".", "skip_first", ":", "\n", "            ", "self", ".", "totals", "[", "label", "]", "=", "0.0", "\n", "del", "self", ".", "first_time", "[", "label", "]", "\n", "self", ".", "call_counts", "[", "label", "]", "=", "0", "\n", "", "elif", "not", "label", "in", "self", ".", "totals", "and", "not", "self", ".", "skip_first", ":", "\n", "            ", "self", ".", "totals", "[", "label", "]", "=", "end", "-", "start", "\n", "self", ".", "call_counts", "[", "label", "]", "=", "1", "\n", "", "else", ":", "\n", "            ", "self", ".", "totals", "[", "label", "]", "+=", "end", "-", "start", "\n", "self", ".", "call_counts", "[", "label", "]", "+=", "1", "\n", "\n", "", "if", "self", ".", "call_counts", "[", "label", "]", ">", "0", ":", "\n", "# We will reduce the probability of logging a timing linearly with the number of times", "\n", "# we have seen it.", "\n", "# It will always be recorded in the totals, though", "\n", "            ", "if", "np", ".", "random", ".", "rand", "(", ")", "<", "1", "/", "self", ".", "call_counts", "[", "label", "]", ":", "\n", "                ", "self", ".", "log_fn", "(", "\n", "\"timer\"", ",", "{", "\"epoch\"", ":", "float", "(", "epoch", ")", ",", "\"value\"", ":", "end", "-", "start", "}", ",", "{", "\"event\"", ":", "label", "}", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.timer.Timer.summary": [[82, 103], ["io.StringIO", "print", "print", "sorted", "print", "buffer.getvalue", "print"], "methods", ["None"], ["", "", "", "def", "summary", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Return a summary in string-form of all the timings recorded so far\n        \"\"\"", "\n", "with", "StringIO", "(", ")", "as", "buffer", ":", "\n", "            ", "print", "(", "\"--- Timer summary -----------------------------------------------\"", ",", "file", "=", "buffer", ")", "\n", "print", "(", "\"  Event                          |  Count | Average time |  Frac.\"", ",", "file", "=", "buffer", ")", "\n", "for", "event_label", "in", "sorted", "(", "self", ".", "totals", ")", ":", "\n", "                ", "total", "=", "self", ".", "totals", "[", "event_label", "]", "\n", "count", "=", "self", ".", "call_counts", "[", "event_label", "]", "\n", "if", "count", "==", "0", ":", "\n", "                    ", "continue", "\n", "", "avg_duration", "=", "total", "/", "count", "\n", "total_runtime", "=", "self", ".", "last_time", "[", "event_label", "]", "-", "self", ".", "first_time", "[", "event_label", "]", "\n", "runtime_percentage", "=", "100", "*", "total", "/", "total_runtime", "\n", "print", "(", "\n", "f\"- {event_label:30s} | {count:6d} | {avg_duration:11.5f}s | {runtime_percentage:5.1f}%\"", ",", "\n", "file", "=", "buffer", ",", "\n", ")", "\n", "", "print", "(", "\"-----------------------------------------------------------------\"", ",", "file", "=", "buffer", ")", "\n", "return", "buffer", ".", "getvalue", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.timer.Timer.save_summary": [[104, 121], ["sorted", "open", "json.dump"], "methods", ["None"], ["", "", "def", "save_summary", "(", "self", ",", "json_file_path", ")", ":", "\n", "        ", "data", "=", "{", "}", "\n", "for", "event_label", "in", "sorted", "(", "self", ".", "totals", ")", ":", "\n", "            ", "total", "=", "self", ".", "totals", "[", "event_label", "]", "\n", "count", "=", "self", ".", "call_counts", "[", "event_label", "]", "\n", "if", "count", "==", "0", ":", "\n", "                ", "continue", "\n", "", "avg_duration", "=", "total", "/", "count", "\n", "data", "[", "event_label", "]", "=", "{", "\n", "\"label\"", ":", "event_label", ",", "\n", "\"average_duration\"", ":", "avg_duration", ",", "\n", "\"n_events\"", ":", "count", ",", "\n", "\"total_time\"", ":", "total", ",", "\n", "}", "\n", "\n", "", "with", "open", "(", "json_file_path", ",", "\"w\"", ")", "as", "fp", ":", "\n", "            ", "json", ".", "dump", "(", "data", ",", "fp", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.timer.Timer._cuda_sync": [[122, 126], ["torch.cuda.is_available", "torch.cuda.synchronize"], "methods", ["None"], ["", "", "def", "_cuda_sync", "(", "self", ")", ":", "\n", "        ", "\"\"\"Finish all asynchronous GPU computations to get correct timings\"\"\"", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "            ", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.timer.Timer._default_log_fn": [[127, 132], ["print"], "methods", ["None"], ["", "", "def", "_default_log_fn", "(", "self", ",", "_", ",", "values", ",", "tags", ")", ":", "\n", "        ", "label", "=", "tags", "[", "\"label\"", "]", "\n", "epoch", "=", "values", "[", "\"epoch\"", "]", "\n", "duration", "=", "values", "[", "\"value\"", "]", "\n", "print", "(", "f\"Timer: {label:30s} @ {epoch:4.1f} - {duration:8.5f}s\"", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.gradient_reducers.Reducer.__init__": [[18, 32], ["numpy.random.RandomState", "torch.distributed.is_available", "torch.distributed.get_world_size", "torch.distributed.get_rank"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "random_seed", ",", "device", ",", "timer", ")", ":", "\n", "        ", "self", ".", "rng", "=", "np", ".", "random", ".", "RandomState", "(", "random_seed", ")", "\n", "# M = 1024 * 1024", "\n", "# self.precalc_numbers = (", "\n", "# torch.from_numpy(self.rng.randn(128 * M)).to(device).type(torch.float32)", "\n", "# )", "\n", "if", "torch", ".", "distributed", ".", "is_available", "(", ")", ":", "\n", "            ", "self", ".", "n_workers", "=", "torch", ".", "distributed", ".", "get_world_size", "(", ")", "\n", "self", ".", "rank", "=", "torch", ".", "distributed", ".", "get_rank", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "n_workers", "=", "1", "\n", "self", ".", "rank", "=", "0", "\n", "", "self", ".", "device", "=", "device", "\n", "self", ".", "timer", "=", "timer", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.gradient_reducers.Reducer.reduce": [[33, 36], ["NotImplementedError"], "methods", ["None"], ["", "def", "reduce", "(", "self", ",", "grad_in", ",", "grad_out", ",", "memory_out", ")", ":", "\n", "        ", "\"\"\"Return communicated bits\"\"\"", "\n", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.gradient_reducers.SignAndNormReducer.reduce": [[44, 107], ["gradient_reducers.SignCompressor", "gradient_reducers.n_bits", "gradient_reducers.n_bits", "gradient_reducers.SignAndNormReducer.timer", "gradient_reducers.TensorBuffer", "gradient_reducers.SignAndNormReducer.timer", "torch.empty", "enumerate", "gradient_reducers.SignAndNormReducer.timer", "gradient_reducers.SignCompressor.compress", "gradient_reducers.SignAndNormReducer.timer", "gradient_reducers.SignAndNormReducer.timer", "gradient_reducers.SignAndNormReducer.timer", "zip", "gradient_reducers.SignAndNormReducer.timer", "zip", "len", "tensor.norm", "gradient_reducers.all_gather", "gradient_reducers.all_gather", "all_gather.wait", "all_gather.wait", "gradient_reducers.SignCompressor.uncompress", "flatsigns.append", "zip", "mem.data.add_", "torch.empty_like", "torch.empty_like", "out.data.add_", "tensor.sign", "range", "range", "tensor.nelement", "sign.nelement"], "methods", ["home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.gradient_reducers.n_bits", "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.gradient_reducers.n_bits", "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.gradient_reducers.SignCompressor.compress", "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.gradient_reducers.all_gather", "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.gradient_reducers.all_gather", "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.gradient_reducers.SignCompressor.uncompress", "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.gradient_reducers.TensorBuffer.nelement", "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.gradient_reducers.TensorBuffer.nelement"], ["def", "reduce", "(", "self", ",", "grad_in", ",", "grad_out", ",", "memory_out", ")", ":", "\n", "        ", "\"\"\"\n        Reduce gradients between the workers in place\n        :param grad_in: dictionary\n        :param grad_out: dictionary\n        :param memory_out: dictionary\n        \"\"\"", "\n", "bits_communicated", "=", "0", "\n", "sign_compressor", "=", "SignCompressor", "(", ")", "\n", "\n", "with", "self", ".", "timer", "(", "\"reduce.flatpack\"", ")", ":", "\n", "            ", "flatgrad", "=", "TensorBuffer", "(", "grad_in", ")", "\n", "\n", "# Compute norms", "\n", "", "with", "self", ".", "timer", "(", "\"reduce.norms\"", ",", "verbosity", "=", "2", ")", ":", "\n", "            ", "my_norms", "=", "torch", ".", "empty", "(", "len", "(", "grad_in", ")", ",", "device", "=", "self", ".", "device", ")", "\n", "for", "i", ",", "tensor", "in", "enumerate", "(", "grad_in", ")", ":", "\n", "                ", "my_norms", "[", "i", "]", "=", "tensor", ".", "norm", "(", "p", "=", "1", ")", "\n", "\n", "", "", "with", "self", ".", "timer", "(", "\"reduce.compress\"", ",", "verbosity", "=", "2", ")", ":", "\n", "            ", "my_bits", ",", "sign_size", "=", "sign_compressor", ".", "compress", "(", "flatgrad", ".", "buffer", ")", "\n", "\n", "", "with", "self", ".", "timer", "(", "\"reduce.gather\"", ",", "verbosity", "=", "2", ")", ":", "\n", "            ", "if", "self", ".", "n_workers", ">", "1", ":", "\n", "                ", "bits", "=", "[", "torch", ".", "empty_like", "(", "my_bits", ")", "for", "i", "in", "range", "(", "self", ".", "n_workers", ")", "]", "\n", "norms", "=", "[", "torch", ".", "empty_like", "(", "my_norms", ")", "for", "i", "in", "range", "(", "self", ".", "n_workers", ")", "]", "\n", "h1", "=", "all_gather", "(", "bits", ",", "my_bits", ",", "async_op", "=", "True", ")", "\n", "h2", "=", "all_gather", "(", "norms", ",", "my_norms", ",", "async_op", "=", "True", ")", "\n", "h1", ".", "wait", "(", ")", "\n", "h2", ".", "wait", "(", ")", "\n", "", "else", ":", "\n", "                ", "bits", "=", "[", "my_bits", "]", "\n", "norms", "=", "[", "my_norms", "]", "\n", "\n", "", "", "bits_communicated", "+=", "n_bits", "(", "my_bits", ")", "# for the norm vector, being optimistic here", "\n", "bits_communicated", "+=", "n_bits", "(", "my_norms", ")", "# for the norm", "\n", "\n", "with", "self", ".", "timer", "(", "\"reduce.decompress\"", ",", "verbosity", "=", "2", ")", ":", "\n", "            ", "flatsigns", "=", "[", "]", "\n", "for", "their_bits", "in", "bits", ":", "\n", "                ", "uncompressed", "=", "sign_compressor", ".", "uncompress", "(", "their_bits", ",", "sign_size", ")", "\n", "flatsigns", ".", "append", "(", "uncompressed", ")", "\n", "\n", "", "", "with", "self", ".", "timer", "(", "\"reduce.average\"", ",", "verbosity", "=", "2", ")", ":", "\n", "            ", "for", "out", "in", "grad_out", ":", "\n", "                ", "out", ".", "data", "[", ":", "]", "=", "0.0", "\n", "\n", "", "for", "their_flatsigns", ",", "their_norms", "in", "zip", "(", "flatsigns", ",", "norms", ")", ":", "\n", "                ", "flatgrad", ".", "buffer", "=", "their_flatsigns", "\n", "for", "sign", ",", "out", ",", "norm", "in", "zip", "(", "\n", "flatgrad", ",", "grad_out", ",", "their_norms", "\n", ")", ":", "\n", "                    ", "out", ".", "data", ".", "add_", "(", "\n", "norm", "/", "sign", ".", "nelement", "(", ")", "/", "self", ".", "n_workers", ",", "\n", "sign", ",", "\n", ")", "\n", "\n", "", "", "", "with", "self", ".", "timer", "(", "\"reduce.memory\"", ",", "verbosity", "=", "2", ")", ":", "\n", "            ", "for", "tensor", ",", "mem", ",", "norm", "in", "zip", "(", "grad_in", ",", "memory_out", ",", "my_norms", ")", ":", "\n", "                ", "mem", ".", "data", "[", ":", "]", "=", "tensor", "\n", "mem", ".", "data", ".", "add_", "(", "-", "norm", "/", "tensor", ".", "nelement", "(", ")", ",", "tensor", ".", "sign", "(", ")", ")", "\n", "\n", "", "", "return", "bits_communicated", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.gradient_reducers.SignReducer.reduce": [[115, 159], ["gradient_reducers.SignCompressor", "gradient_reducers.n_bits", "gradient_reducers.SignReducer.timer", "gradient_reducers.TensorBuffer", "gradient_reducers.SignReducer.timer", "gradient_reducers.SignCompressor.compress", "gradient_reducers.SignReducer.timer", "gradient_reducers.SignReducer.timer", "gradient_reducers.SignReducer.timer", "zip", "gradient_reducers.SignReducer.timer", "zip", "gradient_reducers.all_gather", "gradient_reducers.SignCompressor.uncompress", "flatsigns.append", "torch.stack().sum", "mem.data.add_", "torch.empty_like", "tensor.sign", "range", "torch.stack"], "methods", ["home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.gradient_reducers.n_bits", "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.gradient_reducers.SignCompressor.compress", "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.gradient_reducers.all_gather", "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.gradient_reducers.SignCompressor.uncompress"], ["def", "reduce", "(", "self", ",", "grad_in", ",", "grad_out", ",", "memory_out", ")", ":", "\n", "        ", "\"\"\"\n        Reduce gradients between the workers in place\n        :param grad_in: dictionary\n        :param grad_out: dictionary\n        :param memory_out: dictionary\n        \"\"\"", "\n", "bits_communicated", "=", "0", "\n", "sign_compressor", "=", "SignCompressor", "(", ")", "\n", "\n", "with", "self", ".", "timer", "(", "\"reduce.flatpack\"", ")", ":", "\n", "            ", "flatgrad", "=", "TensorBuffer", "(", "grad_in", ")", "\n", "\n", "", "with", "self", ".", "timer", "(", "\"reduce.compress\"", ",", "verbosity", "=", "2", ")", ":", "\n", "            ", "my_bits", ",", "sign_size", "=", "sign_compressor", ".", "compress", "(", "flatgrad", ".", "buffer", ")", "\n", "\n", "", "with", "self", ".", "timer", "(", "\"reduce.gather\"", ",", "verbosity", "=", "2", ")", ":", "\n", "            ", "if", "self", ".", "n_workers", ">", "1", ":", "\n", "                ", "bits", "=", "[", "torch", ".", "empty_like", "(", "my_bits", ")", "for", "i", "in", "range", "(", "self", ".", "n_workers", ")", "]", "\n", "h1", "=", "all_gather", "(", "bits", ",", "my_bits", ")", "\n", "", "else", ":", "\n", "                ", "bits", "=", "[", "my_bits", "]", "\n", "\n", "", "", "bits_communicated", "+=", "n_bits", "(", "my_bits", ")", "# for the norm vector, being optimistic here", "\n", "\n", "with", "self", ".", "timer", "(", "\"reduce.decompress\"", ",", "verbosity", "=", "2", ")", ":", "\n", "            ", "flatsigns", "=", "[", "]", "\n", "for", "their_bits", "in", "bits", ":", "\n", "                ", "uncompressed", "=", "sign_compressor", ".", "uncompress", "(", "their_bits", ",", "sign_size", ")", "\n", "flatsigns", ".", "append", "(", "uncompressed", ")", "\n", "\n", "", "", "with", "self", ".", "timer", "(", "\"reduce.average\"", ",", "verbosity", "=", "2", ")", ":", "\n", "            ", "avg_flatsign", "=", "torch", ".", "stack", "(", "flatsigns", ")", ".", "sum", "(", "dim", "=", "0", ")", "/", "self", ".", "n_workers", "\n", "flatgrad", ".", "buffer", "=", "avg_flatsign", "\n", "\n", "for", "out", ",", "avg", "in", "zip", "(", "grad_out", ",", "flatgrad", ")", ":", "\n", "                ", "out", ".", "data", "[", ":", "]", "=", "avg", "\n", "\n", "", "", "with", "self", ".", "timer", "(", "\"reduce.memory\"", ",", "verbosity", "=", "2", ")", ":", "\n", "            ", "for", "tensor", ",", "mem", "in", "zip", "(", "grad_in", ",", "memory_out", ")", ":", "\n", "                ", "mem", ".", "data", "[", ":", "]", "=", "tensor", "\n", "mem", ".", "data", ".", "add_", "(", "tensor", ".", "sign", "(", ")", ")", "\n", "\n", "", "", "return", "bits_communicated", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.gradient_reducers.SignSGDwithMajorityVoteReducer.reduce": [[162, 233], ["gradient_reducers.SignCompressor", "gradient_reducers.n_bits", "gradient_reducers.SignSGDwithMajorityVoteReducer.timer", "gradient_reducers.TensorBuffer", "gradient_reducers.SignSGDwithMajorityVoteReducer.timer", "gradient_reducers.SignCompressor.compress", "gradient_reducers.SignSGDwithMajorityVoteReducer.timer", "gradient_reducers.SignSGDwithMajorityVoteReducer.timer", "range", "gradient_reducers.SignSGDwithMajorityVoteReducer.timer", "sum_of_signs.sign", "gradient_reducers.SignSGDwithMajorityVoteReducer.timer", "zip", "gradient_reducers.SignSGDwithMajorityVoteReducer.timer", "gradient_reducers.all_gather", "torch.empty_like", "gradient_reducers.SignCompressor.uncompress", "range"], "methods", ["home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.gradient_reducers.n_bits", "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.gradient_reducers.SignCompressor.compress", "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.gradient_reducers.all_gather", "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.gradient_reducers.SignCompressor.uncompress"], ["    ", "def", "reduce", "(", "self", ",", "grad_in", ",", "grad_out", ",", "memory_out", ")", ":", "\n", "        ", "\"\"\"\n        Reduce gradients between the workers in place\n        :param grad_in: dictionary\n        :param grad_out: dictionary\n        :param memory_out: dictionary\n        \"\"\"", "\n", "bits_communicated", "=", "0", "\n", "sign_compressor", "=", "SignCompressor", "(", ")", "\n", "# start_time = torch.cuda.Event(enable_timing=True)", "\n", "# stop_time = torch.cuda.Event(enable_timing=True)", "\n", "# start_time.record()", "\n", "with", "self", ".", "timer", "(", "\"reduce.flatpack\"", ")", ":", "\n", "            ", "flatgrad", "=", "TensorBuffer", "(", "grad_in", ")", "\n", "# stop_time.record()", "\n", "# torch.cuda.synchronize()", "\n", "# print (\"Time spent flatpack{}\".format(", "\n", "# start_time.elapsed_time(stop_time)))", "\n", "# start_time.record()", "\n", "", "with", "self", ".", "timer", "(", "\"reduce.compress\"", ",", "verbosity", "=", "2", ")", ":", "\n", "            ", "my_bits", ",", "sign_size", "=", "sign_compressor", ".", "compress", "(", "flatgrad", ".", "buffer", ")", "\n", "# stop_time.record()", "\n", "# torch.cuda.synchronize()", "\n", "# print (\"Time spent compression{}\".format(", "\n", "# start_time.elapsed_time(stop_time)))", "\n", "# start_time.record()", "\n", "", "with", "self", ".", "timer", "(", "\"reduce.gather\"", ",", "verbosity", "=", "2", ")", ":", "\n", "            ", "if", "self", ".", "n_workers", ">", "1", ":", "\n", "                ", "bits", "=", "[", "torch", ".", "empty_like", "(", "my_bits", ")", "for", "i", "in", "range", "(", "self", ".", "n_workers", ")", "]", "\n", "all_gather", "(", "bits", ",", "my_bits", ")", "\n", "", "else", ":", "\n", "                ", "bits", "=", "[", "my_bits", "]", "\n", "# stop_time.record()", "\n", "# torch.cuda.synchronize()", "\n", "# print(\"Time all gather {}\".format(start_time.elapsed_time(stop_time)))", "\n", "", "", "bits_communicated", "+=", "n_bits", "(", "my_bits", ")", "# for the norm vector, being optimistic here", "\n", "\n", "# start_time.record()", "\n", "with", "self", ".", "timer", "(", "\"reduce.decompress\"", ",", "verbosity", "=", "2", ")", ":", "\n", "            ", "sum_of_signs", "=", "None", "\n", "for", "t", "in", "range", "(", "1", ")", ":", "\n", "                ", "for", "their_bits", "in", "bits", ":", "\n", "                    ", "uncompressed", "=", "sign_compressor", ".", "uncompress", "(", "their_bits", ",", "sign_size", ")", "\n", "if", "sum_of_signs", "is", "None", ":", "\n", "                        ", "sum_of_signs", "=", "uncompressed", "\n", "", "else", ":", "\n", "                        ", "sum_of_signs", "+=", "uncompressed", "\n", "# stop_time.record()", "\n", "# torch.cuda.synchronize()", "\n", "# print (\"Time for decompress{}\".format(", "\n", "# start_time.elapsed_time(stop_time)))", "\n", "# start_time.record()", "\n", "", "", "", "", "with", "self", ".", "timer", "(", "\"reduce.majorityvote\"", ",", "verbosity", "=", "2", ")", ":", "\n", "            ", "total_sign", "=", "sum_of_signs", ".", "sign", "(", ")", "\n", "# stop_time.record()", "\n", "# torch.cuda.synchronize()", "\n", "# print(\"Time for majority vote{}\".format( start_time.elapsed_time(stop_time)))", "\n", "# start_time.record()", "\n", "", "with", "self", ".", "timer", "(", "\"reduce.set_out\"", ",", "verbosity", "=", "2", ")", ":", "\n", "            ", "flatgrad", ".", "buffer", "=", "total_sign", "\n", "for", "out", ",", "majorityvote", "in", "zip", "(", "grad_out", ",", "flatgrad", ")", ":", "\n", "                ", "out", ".", "data", "[", ":", "]", "=", "majorityvote", "\n", "# stop_time.record()", "\n", "# torch.cuda.synchronize()", "\n", "# print (\"Time for copy data back{}\".format(", "\n", "# start_time.elapsed_time(stop_time)))", "\n", "", "", "with", "self", ".", "timer", "(", "\"reduce.memory\"", ",", "verbosity", "=", "2", ")", ":", "\n", "            ", "for", "mem", "in", "memory_out", ":", "\n", "                ", "mem", ".", "data", "[", ":", "]", "=", "-", "10_000_000", "# don't try to use memory", "\n", "# print (\"Bit communication{}\\n\".format( bits_communicated))", "\n", "", "", "return", "bits_communicated", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.gradient_reducers.TopKReducer.__init__": [[238, 241], ["gradient_reducers.Reducer.__init__"], "methods", ["home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.cifar_architectures.wresnet.Wide_ResNet.__init__"], ["def", "__init__", "(", "self", ",", "random_seed", ",", "device", ",", "timer", ",", "compression", "=", "1", "/", "244", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "random_seed", ",", "device", ",", "timer", ")", "\n", "self", ".", "compression", "=", "0.2", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.gradient_reducers.TopKReducer.reduce": [[242, 315], ["gradient_reducers.TopKReducer.timer", "torch.empty", "torch.empty", "gradient_reducers.TopKReducer.timer", "zip", "gradient_reducers.TopKReducer.timer", "zip", "gradient_reducers.TopKReducer.timer", "gradient_reducers.TopKReducer.timer", "zip", "max", "tensor_idx.append", "max", "torch.topk", "[].contiguous", "gradient_reducers.all_gather", "gradient_reducers.all_gather", "all_gather.wait", "all_gather.wait", "gradient_reducers.n_bits", "gradient_reducers.n_bits", "zip", "int", "int", "tensor.view().abs", "mem.view", "torch.empty_like", "torch.empty_like", "positions.long", "range", "range", "out.view", "tensor.nelement", "tensor.nelement", "tensor.view", "tensor.view", "positions.long"], "methods", ["home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.gradient_reducers.all_gather", "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.gradient_reducers.all_gather", "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.gradient_reducers.n_bits", "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.gradient_reducers.n_bits", "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.gradient_reducers.TensorBuffer.nelement", "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.gradient_reducers.TensorBuffer.nelement"], ["", "def", "reduce", "(", "self", ",", "grad_in", ",", "grad_out", ",", "memory_out", ")", ":", "\n", "        ", "\"\"\"\n        Reduce gradients between the workers in place\n        :param grad_in: dictionary\n        :param grad_out: dictionary\n        :param memory_out: dictionary\n        \"\"\"", "\n", "bits_communicated", "=", "0", "\n", "\n", "# start_time = torch.cuda.Event(enable_timing=True)", "\n", "# stop_time = torch.cuda.Event(enable_timing=True)", "\n", "\n", "# start_time.record()", "\n", "with", "self", ".", "timer", "(", "\"reduce.flatpack\"", ",", "verbosity", "=", "2", ")", ":", "\n", "# Find the size of a flatpacked gradient", "\n", "            ", "flatgrad_size", "=", "0", "\n", "tensor_idx", "=", "[", "0", "]", "\n", "for", "tensor", "in", "grad_in", ":", "\n", "                ", "top_size", "=", "max", "(", "1", ",", "int", "(", "0.5", "*", "self", ".", "compression", "*", "tensor", ".", "nelement", "(", ")", ")", ")", "\n", "flatgrad_size", "+=", "top_size", "\n", "tensor_idx", ".", "append", "(", "tensor_idx", "[", "-", "1", "]", "+", "top_size", ")", "\n", "", "flatgrad_start_idx", "=", "tensor_idx", "[", ":", "-", "1", "]", "\n", "flatgrad_end_idx", "=", "tensor_idx", "[", "1", ":", "]", "\n", "flat_values", "=", "torch", ".", "empty", "(", "flatgrad_size", ",", "device", "=", "self", ".", "device", ")", "\n", "flat_positions", "=", "torch", ".", "empty", "(", "flatgrad_size", ",", "device", "=", "self", ".", "device", ",", "dtype", "=", "torch", ".", "int", ")", "\n", "# end_time.record()", "\n", "# torch.cuda.synchronize()", "\n", "# print (\"Time flatpack {}\".format(start_time.elapsed_time(stop_time)))", "\n", "# start_time.record()", "\n", "", "with", "self", ".", "timer", "(", "\"reduce.topk\"", ",", "verbosity", "=", "2", ")", ":", "\n", "            ", "for", "tensor", ",", "start", ",", "end", "in", "zip", "(", "grad_in", ",", "flatgrad_start_idx", ",", "flatgrad_end_idx", ")", ":", "\n", "                ", "top_size", "=", "max", "(", "1", ",", "int", "(", "0.5", "*", "self", ".", "compression", "*", "tensor", ".", "nelement", "(", ")", ")", ")", "\n", "_", ",", "positions", "=", "torch", ".", "topk", "(", "tensor", ".", "view", "(", "-", "1", ")", ".", "abs", "(", ")", ",", "top_size", ",", "sorted", "=", "False", ")", "\n", "values", "=", "tensor", ".", "view", "(", "-", "1", ")", "[", "positions", "]", ".", "contiguous", "(", ")", "\n", "flat_values", "[", "start", ":", "end", "]", "=", "values", "\n", "flat_positions", "[", "start", ":", "end", "]", "=", "positions", "\n", "# stop_time.record()", "\n", "# torch.cuda.synchronize()", "\n", "# print (\"Time topk sort {}\".format(start_time.elapsed_time(stop_time)))", "\n", "\n", "", "", "with", "self", ".", "timer", "(", "\"reduce.memory\"", ",", "verbosity", "=", "2", ")", ":", "\n", "            ", "for", "tensor", ",", "mem", ",", "start", ",", "end", "in", "zip", "(", "\n", "grad_in", ",", "memory_out", ",", "flatgrad_start_idx", ",", "flatgrad_end_idx", "\n", ")", ":", "\n", "                ", "positions", "=", "flat_positions", "[", "start", ":", "end", "]", "\n", "mem", ".", "data", "[", ":", "]", "=", "tensor", "\n", "mem", ".", "view", "(", "-", "1", ")", "[", "positions", ".", "long", "(", ")", "]", "=", "0.0", "\n", "\n", "", "", "with", "self", ".", "timer", "(", "\"reduce.gather\"", ",", "verbosity", "=", "2", ")", ":", "\n", "            ", "if", "self", ".", "n_workers", ">", "1", ":", "\n", "                ", "worker_values", "=", "[", "torch", ".", "empty_like", "(", "flat_values", ")", "for", "i", "in", "range", "(", "self", ".", "n_workers", ")", "]", "\n", "worker_positions", "=", "[", "torch", ".", "empty_like", "(", "flat_positions", ")", "for", "i", "in", "range", "(", "self", ".", "n_workers", ")", "]", "\n", "h1", "=", "all_gather", "(", "worker_values", ",", "flat_values", ",", "async_op", "=", "True", ")", "\n", "h2", "=", "all_gather", "(", "worker_positions", ",", "flat_positions", ",", "async_op", "=", "True", ")", "\n", "h1", ".", "wait", "(", ")", "\n", "h2", ".", "wait", "(", ")", "\n", "", "else", ":", "\n", "                ", "worker_values", "=", "[", "flat_values", "]", "\n", "worker_positions", "=", "[", "flat_positions", "]", "\n", "", "bits_communicated", "+=", "n_bits", "(", "flat_values", ")", "+", "n_bits", "(", "flat_positions", ")", "\n", "\n", "", "with", "self", ".", "timer", "(", "\"reduce.combine\"", ",", "verbosity", "=", "2", ")", ":", "\n", "            ", "for", "tensor", ",", "out", ",", "start", ",", "end", "in", "zip", "(", "\n", "grad_in", ",", "grad_out", ",", "flatgrad_start_idx", ",", "flatgrad_end_idx", "\n", ")", ":", "\n", "                ", "out", ".", "data", "[", ":", "]", "=", "0", "\n", "for", "pos", ",", "val", "in", "zip", "(", "worker_positions", ",", "worker_values", ")", ":", "\n", "                    ", "positions", "=", "pos", "[", "start", ":", "end", "]", "\n", "values", "=", "val", "[", "start", ":", "end", "]", "\n", "# out.view(-1)[pos].add_(1.0 / self.n_workers, val)", "\n", "out", ".", "view", "(", "-", "1", ")", "[", "positions", ".", "long", "(", ")", "]", "+=", "values", "/", "self", ".", "n_workers", "\n", "# print (\"Bit bits_communicated {}\".format(bits_communicated))", "\n", "", "", "", "return", "bits_communicated", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.gradient_reducers.GlobalTopKReducer.__init__": [[318, 321], ["gradient_reducers.Reducer.__init__"], "methods", ["home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.cifar_architectures.wresnet.Wide_ResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "random_seed", ",", "device", ",", "timer", ",", "compression", "=", "1", "/", "244", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "random_seed", ",", "device", ",", "timer", ")", "\n", "self", ".", "compression", "=", "compression", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.gradient_reducers.GlobalTopKReducer.reduce": [[322, 385], ["max", "gradient_reducers.GlobalTopKReducer.timer", "torch.empty", "zip", "int", "gradient_reducers.GlobalTopKReducer.timer", "torch.topk", "flatgrad[].contiguous", "gradient_reducers.GlobalTopKReducer.timer", "zip", "gradient_reducers.GlobalTopKReducer.timer", "gradient_reducers.GlobalTopKReducer.timer", "zip", "tensor.nelement", "tensor_idx.append", "tensor.view", "torch.empty.abs", "gradient_reducers.all_gather", "gradient_reducers.all_gather", "all_gather.wait", "all_gather.wait", "gradient_reducers.n_bits", "gradient_reducers.n_bits", "zip", "torch.empty.nelement", "mem.view", "torch.empty_like", "torch.empty_like", "range", "range", "out.view"], "methods", ["home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.gradient_reducers.TensorBuffer.nelement", "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.gradient_reducers.all_gather", "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.gradient_reducers.all_gather", "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.gradient_reducers.n_bits", "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.gradient_reducers.n_bits", "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.gradient_reducers.TensorBuffer.nelement"], ["", "def", "reduce", "(", "self", ",", "grad_in", ",", "grad_out", ",", "memory_out", ")", ":", "\n", "        ", "\"\"\"\n        Reduce gradients between the workers in place\n        :param grad_in: dictionary\n        :param grad_out: dictionary\n        :param memory_out: dictionary\n        \"\"\"", "\n", "bits_communicated", "=", "0", "\n", "\n", "with", "self", ".", "timer", "(", "\"reduce.flatpack\"", ")", ":", "\n", "# Find the size of a flatpacked gradient", "\n", "            ", "flatgrad_size", "=", "0", "\n", "tensor_idx", "=", "[", "0", "]", "\n", "for", "tensor", "in", "grad_in", ":", "\n", "                ", "n", "=", "tensor", ".", "nelement", "(", ")", "\n", "flatgrad_size", "+=", "n", "\n", "tensor_idx", ".", "append", "(", "tensor_idx", "[", "-", "1", "]", "+", "n", ")", "\n", "", "flatgrad_start_idx", "=", "tensor_idx", "[", ":", "-", "1", "]", "\n", "flatgrad_end_idx", "=", "tensor_idx", "[", "1", ":", "]", "\n", "flatgrad", "=", "torch", ".", "empty", "(", "flatgrad_size", ",", "device", "=", "self", ".", "device", ")", "\n", "\n", "# Pack the flatgrad", "\n", "for", "tensor", ",", "start", ",", "end", "in", "zip", "(", "grad_in", ",", "flatgrad_start_idx", ",", "flatgrad_end_idx", ")", ":", "\n", "                ", "flatgrad", "[", "start", ":", "end", "]", "=", "tensor", ".", "view", "(", "-", "1", ")", "\n", "\n", "", "", "top_size", "=", "max", "(", "1", ",", "int", "(", "0.5", "*", "self", ".", "compression", "*", "flatgrad", ".", "nelement", "(", ")", ")", ")", "\n", "\n", "with", "self", ".", "timer", "(", "\"reduce.topk\"", ",", "verbosity", "=", "2", ")", ":", "\n", "            ", "_", ",", "positions", "=", "torch", ".", "topk", "(", "flatgrad", ".", "abs", "(", ")", ",", "top_size", ",", "sorted", "=", "False", ")", "\n", "values", "=", "flatgrad", "[", "positions", "]", ".", "contiguous", "(", ")", "\n", "\n", "", "with", "self", ".", "timer", "(", "\"reduce.set_memory\"", ",", "verbosity", "=", "2", ")", ":", "\n", "            ", "for", "tensor", ",", "mem", ",", "start", ",", "end", "in", "zip", "(", "\n", "grad_in", ",", "memory_out", ",", "flatgrad_start_idx", ",", "flatgrad_end_idx", "\n", ")", ":", "\n", "                ", "local_positions", "=", "positions", "[", "(", "positions", ">=", "start", ")", "&", "(", "positions", "<", "end", ")", "]", "-", "start", "\n", "mem", ".", "data", "[", ":", "]", "=", "tensor", "\n", "mem", ".", "view", "(", "-", "1", ")", "[", "local_positions", "]", "=", "0.0", "\n", "\n", "", "", "with", "self", ".", "timer", "(", "\"reduce.reduce\"", ",", "verbosity", "=", "2", ")", ":", "\n", "            ", "if", "self", ".", "n_workers", ">", "1", ":", "\n", "                ", "worker_values", "=", "[", "torch", ".", "empty_like", "(", "values", ")", "for", "i", "in", "range", "(", "self", ".", "n_workers", ")", "]", "\n", "worker_positions", "=", "[", "torch", ".", "empty_like", "(", "positions", ")", "for", "i", "in", "range", "(", "self", ".", "n_workers", ")", "]", "\n", "h1", "=", "all_gather", "(", "worker_values", ",", "values", ",", "async_op", "=", "True", ")", "\n", "h2", "=", "all_gather", "(", "worker_positions", ",", "positions", ",", "async_op", "=", "True", ")", "\n", "h1", ".", "wait", "(", ")", "\n", "h2", ".", "wait", "(", ")", "\n", "", "else", ":", "\n", "                ", "worker_values", "=", "[", "values", "]", "\n", "worker_positions", "=", "[", "positions", "]", "\n", "", "bits_communicated", "+=", "n_bits", "(", "values", ")", "+", "n_bits", "(", "positions", ")", "\n", "\n", "", "with", "self", ".", "timer", "(", "\"reduce.combine\"", ",", "verbosity", "=", "2", ")", ":", "\n", "            ", "for", "tensor", ",", "out", ",", "start", ",", "end", "in", "zip", "(", "\n", "grad_in", ",", "grad_out", ",", "flatgrad_start_idx", ",", "flatgrad_end_idx", "\n", ")", ":", "\n", "                ", "out", ".", "data", "[", ":", "]", "=", "0.0", "\n", "for", "pos", ",", "val", "in", "zip", "(", "worker_positions", ",", "worker_values", ")", ":", "\n", "                    ", "local_positions", "=", "pos", "[", "(", "pos", ">=", "start", ")", "&", "(", "pos", "<", "end", ")", "]", "-", "start", "\n", "local_vals", "=", "val", "[", "(", "pos", ">=", "start", ")", "&", "(", "pos", "<", "end", ")", "]", "\n", "out", ".", "view", "(", "-", "1", ")", "[", "local_positions", "]", "+=", "local_vals", "/", "self", ".", "n_workers", "\n", "\n", "", "", "", "return", "bits_communicated", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.gradient_reducers.UniformRandomSparseBlockReducer.__init__": [[388, 391], ["gradient_reducers.Reducer.__init__"], "methods", ["home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.cifar_architectures.wresnet.Wide_ResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "random_seed", ",", "device", ",", "timer", ",", "compression", "=", "1", "/", "244", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "random_seed", ",", "device", ",", "timer", ")", "\n", "self", ".", "compression", "=", "compression", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.gradient_reducers.UniformRandomSparseBlockReducer.reduce": [[392, 446], ["gradient_reducers.UniformRandomSparseBlockReducer.timer", "gradient_reducers.UniformRandomSparseBlockReducer.timer", "gradient_reducers.TensorBuffer", "gradient_reducers.UniformRandomSparseBlockReducer.timer", "zip", "gradient_reducers.UniformRandomSparseBlockReducer.timer", "gradient_reducers.TensorBuffer.all_reduce", "gradient_reducers.TensorBuffer.bits", "gradient_reducers.UniformRandomSparseBlockReducer.timer", "zip", "max", "block_sizes.append", "gradient_reducers.UniformRandomSparseBlockReducer.rng.choice", "start_idx_list.append", "min", "torch.empty", "values_list.append", "min", "tensor.clone", "min", "out.data.zero_", "int", "tensor.nelement", "tensor.nelement", "tensor.view", "tensor.nelement", "mem.view", "tensor.nelement", "out.view", "tensor.view", "mem.view", "out.view", "tensor.nelement"], "methods", ["home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.gradient_reducers.all_reduce", "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.gradient_reducers.TensorBuffer.bits", "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.gradient_reducers.TensorBuffer.nelement", "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.gradient_reducers.TensorBuffer.nelement", "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.gradient_reducers.TensorBuffer.nelement", "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.gradient_reducers.TensorBuffer.nelement", "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.gradient_reducers.TensorBuffer.nelement"], ["", "def", "reduce", "(", "self", ",", "grad_in", ",", "grad_out", ",", "memory_out", ")", ":", "\n", "        ", "\"\"\"\n        Reduce gradients between the workers in place\n        :param grad_in: dictionary\n        :param grad_out: dictionary\n        :param memory_out: dictionary\n        \"\"\"", "\n", "bits_communicated", "=", "0", "\n", "\n", "values_list", "=", "[", "]", "\n", "start_idx_list", "=", "[", "]", "\n", "block_sizes", "=", "[", "]", "\n", "\n", "with", "self", ".", "timer", "(", "\"reduce.block\"", ",", "verbosity", "=", "2", ")", ":", "\n", "            ", "for", "tensor", "in", "grad_in", ":", "\n", "                ", "block_size", "=", "max", "(", "1", ",", "int", "(", "self", ".", "compression", "*", "tensor", ".", "nelement", "(", ")", ")", ")", "\n", "block_sizes", ".", "append", "(", "block_size", ")", "\n", "start_idx", "=", "self", ".", "rng", ".", "choice", "(", "tensor", ".", "nelement", "(", ")", ")", "\n", "start_idx_list", ".", "append", "(", "start_idx", ")", "\n", "end_idx", "=", "min", "(", "start_idx", "+", "block_size", ",", "tensor", ".", "nelement", "(", ")", ")", "\n", "bfr", "=", "torch", ".", "empty", "(", "block_size", ",", "dtype", "=", "torch", ".", "float32", ",", "device", "=", "self", ".", "device", ")", "\n", "bfr", "[", ":", "end_idx", "-", "start_idx", "]", "=", "tensor", ".", "view", "(", "-", "1", ")", "[", "start_idx", ":", "end_idx", "]", "\n", "rest", "=", "block_size", "-", "(", "end_idx", "-", "start_idx", ")", "\n", "if", "rest", ">", "0", ":", "\n", "                    ", "bfr", "[", "end_idx", "-", "start_idx", ":", "]", "=", "tensor", ".", "view", "(", "-", "1", ")", "[", ":", "rest", "]", "\n", "", "values_list", ".", "append", "(", "bfr", ")", "\n", "\n", "", "", "with", "self", ".", "timer", "(", "\"reduce.flatpack\"", ",", "verbosity", "=", "2", ")", ":", "\n", "            ", "flat_values", "=", "TensorBuffer", "(", "values_list", ")", "\n", "\n", "", "with", "self", ".", "timer", "(", "\"reduce.memory\"", ",", "verbosity", "=", "2", ")", ":", "\n", "            ", "for", "tensor", ",", "mem", ",", "start_idx", ",", "block_size", "in", "zip", "(", "grad_in", ",", "memory_out", ",", "start_idx_list", ",", "block_sizes", ")", ":", "\n", "                ", "end_idx", "=", "min", "(", "start_idx", "+", "block_size", ",", "tensor", ".", "nelement", "(", ")", ")", "\n", "rest", "=", "block_size", "-", "(", "end_idx", "-", "start_idx", ")", "\n", "mem", ".", "data", "=", "tensor", ".", "clone", "(", ")", "\n", "mem", ".", "view", "(", "-", "1", ")", "[", "start_idx", ":", "end_idx", "]", "=", "0.0", "\n", "if", "rest", ">", "0", ":", "\n", "                    ", "mem", ".", "view", "(", "-", "1", ")", "[", ":", "rest", "]", "=", "0.0", "\n", "\n", "", "", "", "with", "self", ".", "timer", "(", "\"reduce.reduce\"", ",", "verbosity", "=", "2", ")", ":", "\n", "            ", "flat_values", ".", "all_reduce", "(", ")", "\n", "flat_values", ".", "buffer", "/=", "self", ".", "n_workers", "\n", "bits_communicated", "+=", "flat_values", ".", "bits", "(", ")", "\n", "\n", "", "with", "self", ".", "timer", "(", "\"reduce.combine\"", ",", "verbosity", "=", "2", ")", ":", "\n", "            ", "for", "tensor", ",", "out", ",", "start_idx", ",", "block_size", ",", "values", "in", "zip", "(", "grad_in", ",", "grad_out", ",", "start_idx_list", ",", "block_sizes", ",", "flat_values", ")", ":", "\n", "                ", "end_idx", "=", "min", "(", "start_idx", "+", "block_size", ",", "tensor", ".", "nelement", "(", ")", ")", "\n", "rest", "=", "block_size", "-", "(", "end_idx", "-", "start_idx", ")", "\n", "out", ".", "data", ".", "zero_", "(", ")", "\n", "out", ".", "view", "(", "-", "1", ")", "[", "start_idx", ":", "end_idx", "]", "=", "values", "[", ":", "end_idx", "-", "start_idx", "]", "\n", "if", "rest", ">", "0", ":", "\n", "                    ", "out", ".", "view", "(", "-", "1", ")", "[", ":", "rest", "]", "=", "values", "[", "end_idx", "-", "start_idx", ":", "]", "\n", "\n", "", "", "", "return", "bits_communicated", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.gradient_reducers.UniformRandomSparseReducer.__init__": [[449, 452], ["gradient_reducers.Reducer.__init__"], "methods", ["home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.cifar_architectures.wresnet.Wide_ResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "random_seed", ",", "device", ",", "timer", ",", "compression", "=", "1", "/", "244", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "random_seed", ",", "device", ",", "timer", ")", "\n", "self", ".", "compression", "=", "compression", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.gradient_reducers.UniformRandomSparseReducer.reduce": [[453, 492], ["gradient_reducers.UniformRandomSparseReducer.timer", "gradient_reducers.UniformRandomSparseReducer.timer", "gradient_reducers.TensorBuffer", "gradient_reducers.UniformRandomSparseReducer.timer", "zip", "gradient_reducers.UniformRandomSparseReducer.timer", "gradient_reducers.TensorBuffer.all_reduce", "gradient_reducers.TensorBuffer.bits", "gradient_reducers.UniformRandomSparseReducer.timer", "zip", "max", "gradient_reducers.UniformRandomSparseReducer.rng.choice", "indices_list.append", "values_list.append", "out.data.zero_", "int", "tensor.nelement", "tensor.view", "mem.view", "out.view", "tensor.nelement"], "methods", ["home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.gradient_reducers.all_reduce", "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.gradient_reducers.TensorBuffer.bits", "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.gradient_reducers.TensorBuffer.nelement", "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.gradient_reducers.TensorBuffer.nelement"], ["", "def", "reduce", "(", "self", ",", "grad_in", ",", "grad_out", ",", "memory_out", ")", ":", "\n", "        ", "\"\"\"\n        Reduce gradients between the workers in place\n        :param grad_in: dictionary\n        :param grad_out: dictionary\n        :param memory_out: dictionary\n        \"\"\"", "\n", "bits_communicated", "=", "0", "\n", "\n", "indices_list", "=", "[", "]", "\n", "values_list", "=", "[", "]", "\n", "\n", "with", "self", ".", "timer", "(", "\"reduce.block\"", ",", "verbosity", "=", "2", ")", ":", "\n", "            ", "for", "tensor", "in", "grad_in", ":", "\n", "                ", "block_size", "=", "max", "(", "1", ",", "int", "(", "self", ".", "compression", "*", "tensor", ".", "nelement", "(", ")", ")", ")", "\n", "indices", "=", "self", ".", "rng", ".", "choice", "(", "tensor", ".", "nelement", "(", ")", ",", "block_size", ",", "replace", "=", "False", ")", "\n", "indices_list", ".", "append", "(", "indices", ")", "\n", "values", "=", "tensor", ".", "view", "(", "-", "1", ")", "[", "indices", "]", "\n", "values_list", ".", "append", "(", "values", ")", "\n", "\n", "", "", "with", "self", ".", "timer", "(", "\"reduce.flatpack\"", ",", "verbosity", "=", "2", ")", ":", "\n", "            ", "flat_values", "=", "TensorBuffer", "(", "values_list", ")", "\n", "\n", "", "with", "self", ".", "timer", "(", "\"reduce.memory\"", ",", "verbosity", "=", "2", ")", ":", "\n", "            ", "for", "tensor", ",", "mem", ",", "indices", "in", "zip", "(", "grad_in", ",", "memory_out", ",", "indices_list", ")", ":", "\n", "                ", "mem", ".", "data", "[", ":", "]", "=", "tensor", "\n", "mem", ".", "view", "(", "-", "1", ")", "[", "indices", "]", "=", "0.0", "\n", "\n", "", "", "with", "self", ".", "timer", "(", "\"reduce.reduce\"", ",", "verbosity", "=", "2", ")", ":", "\n", "            ", "flat_values", ".", "all_reduce", "(", ")", "\n", "flat_values", ".", "buffer", ".", "data", "/=", "self", ".", "n_workers", "\n", "bits_communicated", "+=", "flat_values", ".", "bits", "(", ")", "\n", "\n", "", "with", "self", ".", "timer", "(", "\"reduce.combine\"", ",", "verbosity", "=", "2", ")", ":", "\n", "            ", "for", "tensor", ",", "out", ",", "values", ",", "indices", "in", "zip", "(", "grad_in", ",", "grad_out", ",", "flat_values", ",", "indices_list", ")", ":", "\n", "                ", "out", ".", "data", ".", "zero_", "(", ")", "\n", "out", ".", "view", "(", "-", "1", ")", "[", "indices", "]", "=", "values", "\n", "\n", "", "", "return", "bits_communicated", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.gradient_reducers.RandomSparseBlockReducer.__init__": [[495, 498], ["gradient_reducers.Reducer.__init__"], "methods", ["home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.cifar_architectures.wresnet.Wide_ResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "random_seed", ",", "device", ",", "timer", ",", "rank", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "random_seed", ",", "device", ",", "timer", ")", "\n", "self", ".", "rank", "=", "rank", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.gradient_reducers.RandomSparseBlockReducer.block_size": [[499, 504], ["tensor.view", "min", "tensor.nelement"], "methods", ["home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.gradient_reducers.TensorBuffer.nelement"], ["", "def", "block_size", "(", "self", ",", "tensor", ")", ":", "\n", "# return max(1, int(self.compression * tensor.nelement()))", "\n", "        ", "m", "=", "tensor", ".", "view", "(", "tensor", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", "size", "=", "self", ".", "rank", "*", "(", "m", ".", "shape", "[", "0", "]", "+", "m", ".", "shape", "[", "1", "]", ")", "\n", "return", "min", "(", "size", ",", "tensor", ".", "nelement", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.gradient_reducers.RandomSparseBlockReducer.reduce": [[505, 562], ["gradient_reducers.RandomSparseBlockReducer.timer", "gradient_reducers.RandomSparseBlockReducer.timer", "gradient_reducers.TensorBuffer", "gradient_reducers.RandomSparseBlockReducer.timer", "zip", "gradient_reducers.RandomSparseBlockReducer.timer", "gradient_reducers.TensorBuffer.all_reduce", "gradient_reducers.TensorBuffer.bits", "gradient_reducers.RandomSparseBlockReducer.timer", "zip", "gradient_reducers.RandomSparseBlockReducer.block_size", "block_sizes.append", "start_idx_list.append", "min", "torch.empty", "values_list.append", "min", "tensor.clone", "min", "out.data.zero_", "tensor.nelement", "gradient_reducers.RandomSparseBlockReducer.rng.choice", "tensor.nelement", "tensor.view", "tensor.nelement", "mem.view", "tensor.nelement", "out.view", "tensor.nelement", "tensor.view", "mem.view", "out.view"], "methods", ["home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.gradient_reducers.all_reduce", "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.gradient_reducers.TensorBuffer.bits", "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.gradient_reducers.RandomSparseReducer.block_size", "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.gradient_reducers.TensorBuffer.nelement", "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.gradient_reducers.TensorBuffer.nelement", "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.gradient_reducers.TensorBuffer.nelement", "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.gradient_reducers.TensorBuffer.nelement", "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.gradient_reducers.TensorBuffer.nelement"], ["", "def", "reduce", "(", "self", ",", "grad_in", ",", "grad_out", ",", "memory_out", ")", ":", "\n", "        ", "\"\"\"\n        Reduce gradients between the workers in place\n        :param grad_in: dictionary\n        :param grad_out: dictionary\n        :param memory_out: dictionary\n        \"\"\"", "\n", "bits_communicated", "=", "0", "\n", "\n", "values_list", "=", "[", "]", "\n", "start_idx_list", "=", "[", "]", "\n", "block_sizes", "=", "[", "]", "\n", "\n", "with", "self", ".", "timer", "(", "\"reduce.block\"", ",", "verbosity", "=", "2", ")", ":", "\n", "            ", "for", "tensor", "in", "grad_in", ":", "\n", "                ", "block_size", "=", "self", ".", "block_size", "(", "tensor", ")", "\n", "block_sizes", ".", "append", "(", "block_size", ")", "\n", "if", "block_size", "==", "tensor", ".", "nelement", "(", ")", ":", "\n", "                    ", "start_idx", "=", "0", "\n", "", "else", ":", "\n", "                    ", "start_idx", "=", "self", ".", "rng", ".", "choice", "(", "tensor", ".", "nelement", "(", ")", ")", "\n", "", "start_idx_list", ".", "append", "(", "start_idx", ")", "\n", "end_idx", "=", "min", "(", "start_idx", "+", "block_size", ",", "tensor", ".", "nelement", "(", ")", ")", "\n", "bfr", "=", "torch", ".", "empty", "(", "block_size", ",", "dtype", "=", "torch", ".", "float32", ",", "device", "=", "self", ".", "device", ")", "\n", "bfr", "[", ":", "end_idx", "-", "start_idx", "]", "=", "tensor", ".", "view", "(", "-", "1", ")", "[", "start_idx", ":", "end_idx", "]", "\n", "rest", "=", "block_size", "-", "(", "end_idx", "-", "start_idx", ")", "\n", "if", "rest", ">", "0", ":", "\n", "                    ", "bfr", "[", "end_idx", "-", "start_idx", ":", "]", "=", "tensor", ".", "view", "(", "-", "1", ")", "[", ":", "rest", "]", "\n", "", "values_list", ".", "append", "(", "bfr", ")", "\n", "\n", "", "", "with", "self", ".", "timer", "(", "\"reduce.flatpack\"", ",", "verbosity", "=", "2", ")", ":", "\n", "            ", "flat_values", "=", "TensorBuffer", "(", "values_list", ")", "\n", "\n", "", "with", "self", ".", "timer", "(", "\"reduce.memory\"", ",", "verbosity", "=", "2", ")", ":", "\n", "            ", "for", "tensor", ",", "mem", ",", "start_idx", ",", "block_size", "in", "zip", "(", "grad_in", ",", "memory_out", ",", "start_idx_list", ",", "block_sizes", ")", ":", "\n", "                ", "end_idx", "=", "min", "(", "start_idx", "+", "block_size", ",", "tensor", ".", "nelement", "(", ")", ")", "\n", "rest", "=", "block_size", "-", "(", "end_idx", "-", "start_idx", ")", "\n", "mem", ".", "data", "=", "tensor", ".", "clone", "(", ")", "\n", "mem", ".", "view", "(", "-", "1", ")", "[", "start_idx", ":", "end_idx", "]", "=", "0.0", "\n", "if", "rest", ">", "0", ":", "\n", "                    ", "mem", ".", "view", "(", "-", "1", ")", "[", ":", "rest", "]", "=", "0.0", "\n", "\n", "", "", "", "with", "self", ".", "timer", "(", "\"reduce.reduce\"", ",", "verbosity", "=", "2", ")", ":", "\n", "            ", "flat_values", ".", "all_reduce", "(", ")", "\n", "flat_values", ".", "buffer", "/=", "self", ".", "n_workers", "\n", "bits_communicated", "+=", "flat_values", ".", "bits", "(", ")", "\n", "\n", "", "with", "self", ".", "timer", "(", "\"reduce.combine\"", ",", "verbosity", "=", "2", ")", ":", "\n", "            ", "for", "tensor", ",", "out", ",", "start_idx", ",", "block_size", ",", "values", "in", "zip", "(", "grad_in", ",", "grad_out", ",", "start_idx_list", ",", "block_sizes", ",", "flat_values", ")", ":", "\n", "                ", "end_idx", "=", "min", "(", "start_idx", "+", "block_size", ",", "tensor", ".", "nelement", "(", ")", ")", "\n", "rest", "=", "block_size", "-", "(", "end_idx", "-", "start_idx", ")", "\n", "out", ".", "data", ".", "zero_", "(", ")", "\n", "out", ".", "view", "(", "-", "1", ")", "[", "start_idx", ":", "end_idx", "]", "=", "values", "[", ":", "end_idx", "-", "start_idx", "]", "\n", "if", "rest", ">", "0", ":", "\n", "                    ", "out", ".", "view", "(", "-", "1", ")", "[", ":", "rest", "]", "=", "values", "[", "end_idx", "-", "start_idx", ":", "]", "\n", "\n", "", "", "", "return", "bits_communicated", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.gradient_reducers.RandomSparseReducer.__init__": [[565, 568], ["gradient_reducers.Reducer.__init__"], "methods", ["home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.cifar_architectures.wresnet.Wide_ResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "random_seed", ",", "device", ",", "timer", ",", "rank", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "random_seed", ",", "device", ",", "timer", ")", "\n", "self", ".", "rank", "=", "rank", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.gradient_reducers.RandomSparseReducer.block_size": [[569, 574], ["tensor.view", "min", "tensor.nelement"], "methods", ["home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.gradient_reducers.TensorBuffer.nelement"], ["", "def", "block_size", "(", "self", ",", "tensor", ")", ":", "\n", "# return max(1, int(self.compression * tensor.nelement()))", "\n", "        ", "m", "=", "tensor", ".", "view", "(", "tensor", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", "size", "=", "self", ".", "rank", "*", "(", "m", ".", "shape", "[", "0", "]", "+", "m", ".", "shape", "[", "1", "]", ")", "\n", "return", "min", "(", "size", ",", "tensor", ".", "nelement", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.gradient_reducers.RandomSparseReducer.reduce": [[575, 617], ["gradient_reducers.RandomSparseReducer.timer", "gradient_reducers.RandomSparseReducer.timer", "gradient_reducers.TensorBuffer", "gradient_reducers.RandomSparseReducer.timer", "zip", "gradient_reducers.RandomSparseReducer.timer", "gradient_reducers.TensorBuffer.all_reduce", "gradient_reducers.TensorBuffer.bits", "gradient_reducers.RandomSparseReducer.timer", "zip", "gradient_reducers.RandomSparseReducer.block_size", "indices_list.append", "values_list.append", "out.data.zero_", "tensor.nelement", "numpy.arange", "gradient_reducers.RandomSparseReducer.rng.choice", "tensor.view", "mem.view", "out.view", "tensor.nelement", "tensor.nelement"], "methods", ["home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.gradient_reducers.all_reduce", "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.gradient_reducers.TensorBuffer.bits", "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.gradient_reducers.RandomSparseReducer.block_size", "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.gradient_reducers.TensorBuffer.nelement", "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.gradient_reducers.TensorBuffer.nelement", "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.gradient_reducers.TensorBuffer.nelement"], ["", "def", "reduce", "(", "self", ",", "grad_in", ",", "grad_out", ",", "memory_out", ")", ":", "\n", "        ", "\"\"\"\n        Reduce gradients between the workers in place\n        :param grad_in: dictionary\n        :param grad_out: dictionary\n        :param memory_out: dictionary\n        \"\"\"", "\n", "bits_communicated", "=", "0", "\n", "\n", "indices_list", "=", "[", "]", "\n", "values_list", "=", "[", "]", "\n", "\n", "with", "self", ".", "timer", "(", "\"reduce.block\"", ",", "verbosity", "=", "2", ")", ":", "\n", "            ", "for", "tensor", "in", "grad_in", ":", "\n", "                ", "block_size", "=", "self", ".", "block_size", "(", "tensor", ")", "\n", "if", "block_size", "==", "tensor", ".", "nelement", "(", ")", ":", "\n", "                    ", "indices", "=", "np", ".", "arange", "(", "tensor", ".", "nelement", "(", ")", ")", "\n", "", "else", ":", "\n", "                    ", "indices", "=", "self", ".", "rng", ".", "choice", "(", "tensor", ".", "nelement", "(", ")", ",", "block_size", ",", "replace", "=", "False", ")", "\n", "", "indices_list", ".", "append", "(", "indices", ")", "\n", "values", "=", "tensor", ".", "view", "(", "-", "1", ")", "[", "indices", "]", "\n", "values_list", ".", "append", "(", "values", ")", "\n", "\n", "", "", "with", "self", ".", "timer", "(", "\"reduce.flatpack\"", ",", "verbosity", "=", "2", ")", ":", "\n", "            ", "flat_values", "=", "TensorBuffer", "(", "values_list", ")", "\n", "\n", "", "with", "self", ".", "timer", "(", "\"reduce.memory\"", ",", "verbosity", "=", "2", ")", ":", "\n", "            ", "for", "tensor", ",", "mem", ",", "indices", "in", "zip", "(", "grad_in", ",", "memory_out", ",", "indices_list", ")", ":", "\n", "                ", "mem", ".", "data", "[", ":", "]", "=", "tensor", "\n", "mem", ".", "view", "(", "-", "1", ")", "[", "indices", "]", "=", "0.0", "\n", "\n", "", "", "with", "self", ".", "timer", "(", "\"reduce.reduce\"", ",", "verbosity", "=", "2", ")", ":", "\n", "            ", "flat_values", ".", "all_reduce", "(", ")", "\n", "flat_values", ".", "buffer", ".", "data", "/=", "self", ".", "n_workers", "\n", "bits_communicated", "+=", "flat_values", ".", "bits", "(", ")", "\n", "\n", "", "with", "self", ".", "timer", "(", "\"reduce.combine\"", ",", "verbosity", "=", "2", ")", ":", "\n", "            ", "for", "tensor", ",", "out", ",", "values", ",", "indices", "in", "zip", "(", "grad_in", ",", "grad_out", ",", "flat_values", ",", "indices_list", ")", ":", "\n", "                ", "out", ".", "data", ".", "zero_", "(", ")", "\n", "out", ".", "view", "(", "-", "1", ")", "[", "indices", "]", "=", "values", "\n", "\n", "", "", "return", "bits_communicated", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.gradient_reducers.SVDReducer.__init__": [[620, 623], ["gradient_reducers.Reducer.__init__"], "methods", ["home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.cifar_architectures.wresnet.Wide_ResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "random_seed", ",", "device", ",", "timer", ",", "rank", "=", "1", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "random_seed", ",", "device", ",", "timer", ")", "\n", "self", ".", "rank", "=", "rank", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.gradient_reducers.SVDReducer.reduce": [[624, 686], ["gradient_reducers.SVDReducer._reduce_rank1", "tensor.view", "min", "torch.svd", "torch.einsum", "zip", "zip", "zip", "tensor.nelement", "mem.view", "gradient_reducers.all_gather", "gradient_reducers.all_gather", "gradient_reducers.all_gather", "all_gather.wait", "all_gather.wait", "all_gather.wait", "out.view().add_", "gradient_reducers.n_bits", "tensor.ndimension", "tensor.ndimension", "torch.empty_like", "torch.empty_like", "torch.empty_like", "torch.einsum", "gradient_reducers.n_bits", "gradient_reducers.n_bits", "range", "range", "range", "out.view"], "methods", ["home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.gradient_reducers.SVDReducer._reduce_rank1", "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.gradient_reducers.TensorBuffer.nelement", "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.gradient_reducers.all_gather", "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.gradient_reducers.all_gather", "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.gradient_reducers.all_gather", "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.gradient_reducers.n_bits", "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.gradient_reducers.n_bits", "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.gradient_reducers.n_bits"], ["", "def", "reduce", "(", "self", ",", "grad_in", ",", "grad_out", ",", "memory_out", ")", ":", "\n", "        ", "\"\"\"\n        Reduce gradients between the workers in place\n        :param grad_in: dictionary\n        :param grad_out: dictionary\n        :param memory_out: dictionary\n        \"\"\"", "\n", "bits_communicated", "=", "0", "\n", "\n", "# Split the tensors into rank1-ones that will be reduced un-compressed", "\n", "# and rank > 1 tensors that are compressed", "\n", "rank1_tensors", "=", "[", "\n", "(", "tensor", ",", "out", ",", "mem", ")", "\n", "for", "tensor", ",", "out", ",", "mem", "in", "zip", "(", "grad_in", ",", "grad_out", ",", "memory_out", ")", "\n", "if", "tensor", ".", "ndimension", "(", ")", "<=", "1", "\n", "]", "\n", "high_rank_tensors", "=", "[", "\n", "(", "tensor", ",", "out", ",", "mem", ")", "\n", "for", "tensor", ",", "out", ",", "mem", "in", "zip", "(", "grad_in", ",", "grad_out", ",", "memory_out", ")", "\n", "if", "tensor", ".", "ndimension", "(", ")", ">", "1", "\n", "]", "\n", "\n", "# Communicate rank 1 tensors", "\n", "bits_communicated", "+=", "self", ".", "_reduce_rank1", "(", "rank1_tensors", ")", "\n", "\n", "for", "tensor", ",", "out", ",", "mem", "in", "high_rank_tensors", ":", "\n", "            ", "m", "=", "tensor", ".", "shape", "[", "0", "]", "\n", "n", "=", "tensor", ".", "nelement", "(", ")", "//", "m", "\n", "\n", "matrix", "=", "tensor", ".", "view", "(", "tensor", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", "\n", "rnk", "=", "min", "(", "self", ".", "rank", ",", "m", ",", "n", ")", "\n", "u", ",", "s", ",", "v", "=", "torch", ".", "svd", "(", "matrix", ")", "\n", "u", ",", "s", ",", "v", "=", "u", "[", ":", ",", ":", "rnk", "]", ",", "s", "[", ":", "rnk", "]", ",", "v", "[", ":", ",", ":", "rnk", "]", "\n", "\n", "mem", ".", "data", "[", ":", "]", "=", "tensor", "\n", "mem", ".", "view", "(", "*", "matrix", ".", "shape", ")", ".", "data", "-=", "torch", ".", "einsum", "(", "\"in, n, jn -> ij\"", ",", "u", ",", "s", ",", "v", ")", "\n", "\n", "if", "self", ".", "n_workers", ">", "1", ":", "\n", "                ", "worker_u", "=", "[", "torch", ".", "empty_like", "(", "u", ")", "for", "i", "in", "range", "(", "self", ".", "n_workers", ")", "]", "\n", "worker_v", "=", "[", "torch", ".", "empty_like", "(", "v", ")", "for", "i", "in", "range", "(", "self", ".", "n_workers", ")", "]", "\n", "worker_s", "=", "[", "torch", ".", "empty_like", "(", "s", ")", "for", "i", "in", "range", "(", "self", ".", "n_workers", ")", "]", "\n", "h1", "=", "all_gather", "(", "worker_u", ",", "u", ",", "async_op", "=", "True", ")", "\n", "h2", "=", "all_gather", "(", "worker_v", ",", "v", ",", "async_op", "=", "True", ")", "\n", "h3", "=", "all_gather", "(", "worker_s", ",", "s", ",", "async_op", "=", "True", ")", "\n", "h1", ".", "wait", "(", ")", "\n", "h2", ".", "wait", "(", ")", "\n", "h3", ".", "wait", "(", ")", "\n", "", "else", ":", "\n", "                ", "worker_u", "=", "[", "u", "]", "\n", "worker_v", "=", "[", "v", "]", "\n", "worker_s", "=", "[", "s", "]", "\n", "\n", "", "out", ".", "data", "[", ":", "]", "=", "0.0", "\n", "for", "uu", ",", "ss", ",", "vv", "in", "zip", "(", "worker_u", ",", "worker_s", ",", "worker_v", ")", ":", "\n", "                ", "out", ".", "view", "(", "*", "matrix", ".", "shape", ")", ".", "add_", "(", "\n", "1.0", "/", "self", ".", "n_workers", ",", "torch", ".", "einsum", "(", "\"in, n, jn -> ij\"", ",", "uu", ",", "ss", ",", "vv", ")", "\n", ")", "\n", "\n", "", "bits_communicated", "+=", "n_bits", "(", "u", ")", "+", "n_bits", "(", "s", ")", "+", "n_bits", "(", "v", ")", "\n", "\n", "", "return", "bits_communicated", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.gradient_reducers.SVDReducer._reduce_rank1": [[687, 697], ["gradient_reducers.SVDReducer.timer", "gradient_reducers.SVDReducer.timer", "gradient_reducers.reduce_mean_list", "mem.zero_"], "methods", ["home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.gradient_reducers.reduce_mean_list"], ["", "def", "_reduce_rank1", "(", "self", ",", "pairs", ")", ":", "\n", "        ", "with", "self", ".", "timer", "(", "\"reduce.rank1.zero_memory\"", ",", "verbosity", "=", "2", ")", ":", "\n", "            ", "for", "_", ",", "_", ",", "mem", "in", "pairs", ":", "\n", "                ", "mem", ".", "zero_", "(", ")", "\n", "\n", "", "", "list_in", "=", "[", "tensor", "for", "(", "tensor", ",", "_", ",", "_", ")", "in", "pairs", "]", "\n", "list_out", "=", "[", "out", "for", "(", "_", ",", "out", ",", "_", ")", "in", "pairs", "]", "\n", "\n", "with", "self", ".", "timer", "(", "\"reduce.rank1.reduce\"", ",", "verbosity", "=", "2", ")", ":", "\n", "            ", "return", "reduce_mean_list", "(", "self", ".", "device", ",", "list_in", ",", "list_out", ",", "self", ".", "timer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.gradient_reducers.RankKReducer.__init__": [[699, 706], ["gradient_reducers.Reducer.__init__"], "methods", ["home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.cifar_architectures.wresnet.Wide_ResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "random_seed", ",", "device", ",", "timer", ",", "n_power_iterations", "=", "0", ",", "reuse_query", "=", "False", ",", "rank", "=", "1", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "random_seed", ",", "device", ",", "timer", ")", "\n", "assert", "n_power_iterations", "==", "0", "\n", "self", ".", "rank", "=", "rank", "\n", "self", ".", "p_memory", "=", "None", "\n", "self", ".", "q_memory", "=", "None", "\n", "self", ".", "reuse_query", "=", "reuse_query", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.gradient_reducers.RankKReducer.set_random": [[707, 710], ["torch.manual_seed", "torch.randn", "gradient_reducers.RankKReducer.rng.randint"], "methods", ["None"], ["", "def", "set_random", "(", "self", ",", "vector", ")", ":", "\n", "        ", "torch", ".", "manual_seed", "(", "self", ".", "rng", ".", "randint", "(", "1_000_000_000", ")", ")", "\n", "vector", ".", "data", "[", ":", "]", "=", "torch", ".", "randn", "(", "*", "vector", ".", "shape", ",", "device", "=", "self", ".", "device", ")", "\n", "# orthogonalize(vector)", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.gradient_reducers.RankKReducer.reduce": [[712, 858], ["torch.cuda.synchronize", "gradient_reducers.n_bits", "gradient_reducers.RankKReducer.timer", "gradient_reducers.RankKReducer.timer", "zip", "gradient_reducers.RankKReducer.timer", "zip", "gradient_reducers.RankKReducer.timer", "gradient_reducers.all_reduce", "gradient_reducers.RankKReducer.timer", "gradient_reducers.TensorBuffer", "gradient_reducers.RankKReducer.timer", "gradient_reducers.TensorBuffer.all_reduce", "gradient_reducers.TensorBuffer.bits", "gradient_reducers.RankKReducer.timer", "gradient_reducers.RankKReducer.timer", "zip", "gradient_reducers.RankKReducer.timer", "gradient_reducers.all_reduce", "gradient_reducers.n_bits", "gradient_reducers.RankKReducer.timer", "zip", "gradient_reducers.RankKReducer.timer", "gradient_reducers.TensorBuffer.all_reduce", "gradient_reducers.TensorBuffer.unpack", "zip", "zip", "tensor.view", "min", "torch.empty", "torch.empty", "tensor.view", "min", "ps.append", "qs.append", "tensor.view", "tensor.view", "torch.matmul", "gradient_reducers.orthogonalize", "tensor.view", "torch.matmul", "torch.matmul", "tensor.ndimension", "tensor.ndimension", "gradient_reducers.RankKReducer.p_memory[].view", "gradient_reducers.RankKReducer.q_memory[].view", "gradient_reducers.RankKReducer.set_random", "tensor.view.t", "q.t"], "methods", ["home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.gradient_reducers.n_bits", "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.gradient_reducers.all_reduce", "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.gradient_reducers.all_reduce", "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.gradient_reducers.TensorBuffer.bits", "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.gradient_reducers.all_reduce", "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.gradient_reducers.n_bits", "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.gradient_reducers.all_reduce", "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.gradient_reducers.TensorBuffer.unpack", "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.gradient_reducers.orthogonalize", "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.gradient_reducers.HalfRankKReducer.set_random"], ["", "def", "reduce", "(", "self", ",", "grad_in", ",", "grad_out", ",", "memory_out", ")", ":", "\n", "        ", "\"\"\"\n        Reduce gradients between the workers in place\n        :param grad_in: dictionary\n        :param grad_out: dictionary\n        :param memory_out: dictionary\n        \"\"\"", "\n", "bits_communicated", "=", "0", "\n", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "# start_epoch = torch.cuda.Event(enable_timing=True)", "\n", "# stop_epoch = torch.cuda.Event(enable_timing=True)", "\n", "# Split the tensors into rank1-ones that will be reduced un-compressed", "\n", "# and rank > 1 tensors that are compressed", "\n", "rank1_tensors", "=", "[", "\n", "(", "tensor", ",", "out", ",", "mem", ")", "\n", "for", "tensor", ",", "out", ",", "mem", "in", "zip", "(", "grad_in", ",", "grad_out", ",", "memory_out", ")", "\n", "if", "tensor", ".", "ndimension", "(", ")", "<=", "1", "\n", "]", "\n", "high_rank_tensors", "=", "[", "\n", "(", "tensor", ",", "out", ",", "mem", ")", "\n", "for", "tensor", ",", "out", ",", "mem", "in", "zip", "(", "grad_in", ",", "grad_out", ",", "memory_out", ")", "\n", "if", "tensor", ".", "ndimension", "(", ")", ">", "1", "\n", "]", "\n", "\n", "# We are building a rank-1 approximation of every tensor", "\n", "# that can be interpreted as a matrix. Let the approximation be", "\n", "# M = p q^T", "\n", "# We are allocating consequtive memory for the p's and q's", "\n", "\n", "memory_is_uninitialized", "=", "self", ".", "p_memory", "is", "None", "\n", "# start_epoch.record()", "\n", "with", "self", ".", "timer", "(", "\"reduce.allocate_memory\"", ",", "verbosity", "=", "2", ")", ":", "\n", "            ", "p_total_size", "=", "0", "\n", "q_total_size", "=", "0", "\n", "for", "tensor", ",", "_", ",", "_", "in", "high_rank_tensors", ":", "\n", "                ", "matrix", "=", "tensor", ".", "view", "(", "tensor", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", "n", ",", "m", "=", "matrix", ".", "shape", "\n", "rank", "=", "min", "(", "n", ",", "m", ",", "self", ".", "rank", ")", "\n", "p_total_size", "+=", "n", "*", "rank", "\n", "q_total_size", "+=", "m", "*", "rank", "\n", "", "if", "self", ".", "p_memory", "is", "None", ":", "\n", "                ", "self", ".", "p_memory", "=", "torch", ".", "empty", "(", "p_total_size", ",", "device", "=", "self", ".", "device", ")", "\n", "self", ".", "q_memory", "=", "torch", ".", "empty", "(", "q_total_size", ",", "device", "=", "self", ".", "device", ")", "\n", "\n", "# Find them again and make lists of pointers", "\n", "", "ps", "=", "[", "]", "\n", "qs", "=", "[", "]", "\n", "p_idx", "=", "0", "\n", "q_idx", "=", "0", "\n", "for", "tensor", ",", "_", ",", "_", "in", "high_rank_tensors", ":", "\n", "                ", "matrix", "=", "tensor", ".", "view", "(", "tensor", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", "n", ",", "m", "=", "matrix", ".", "shape", "\n", "rank", "=", "min", "(", "n", ",", "m", ",", "self", ".", "rank", ")", "\n", "ps", ".", "append", "(", "self", ".", "p_memory", "[", "p_idx", ":", "p_idx", "+", "n", "*", "rank", "]", ".", "view", "(", "n", ",", "rank", ")", ")", "\n", "qs", ".", "append", "(", "self", ".", "q_memory", "[", "q_idx", ":", "q_idx", "+", "m", "*", "rank", "]", ".", "view", "(", "m", ",", "rank", ")", ")", "\n", "p_idx", "+=", "n", "*", "rank", "\n", "q_idx", "+=", "m", "*", "rank", "\n", "# stop_epoch.record()", "\n", "# torch.cuda.synchronize()", "\n", "# print (\"Time spent allocate memory{}\".format(start_epoch.elapsed_time(stop_epoch)))", "\n", "# start_epoch.record()", "\n", "", "", "with", "self", ".", "timer", "(", "\"reduce.prepare.q\"", ",", "verbosity", "=", "2", ")", ":", "\n", "            ", "for", "(", "tensor", ",", "_", ",", "_", ")", ",", "q", ",", "p", "in", "zip", "(", "high_rank_tensors", ",", "qs", ",", "ps", ")", ":", "\n", "                ", "matrix", "=", "tensor", ".", "view", "(", "tensor", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", "n", ",", "m", "=", "matrix", ".", "shape", "\n", "\n", "if", "self", ".", "reuse_query", "and", "not", "memory_is_uninitialized", ":", "\n", "# orthogonalize(q)", "\n", "                    ", "pass", "\n", "", "else", ":", "\n", "# Sample a query vector q", "\n", "                    ", "self", ".", "set_random", "(", "q", ")", "\n", "# stop_epoch.record()", "\n", "# torch.cuda.synchronize()", "\n", "# print (\"Time spent prepare q{}\".format(start_epoch.elapsed_time(stop_epoch)))", "\n", "# start_epoch.record()", "\n", "", "", "", "with", "self", ".", "timer", "(", "\"reduce.compute.p\"", ",", "verbosity", "=", "2", ")", ":", "\n", "            ", "for", "(", "tensor", ",", "_", ",", "_", ")", ",", "q", ",", "p", "in", "zip", "(", "high_rank_tensors", ",", "qs", ",", "ps", ")", ":", "\n", "                ", "matrix", "=", "tensor", ".", "view", "(", "tensor", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", "torch", ".", "matmul", "(", "matrix", ",", "q", ",", "out", "=", "p", ")", "\n", "# stop_epoch.record()", "\n", "# torch.cuda.synchronize()", "\n", "# print (\"Time spent compute p{}\".format(start_epoch.elapsed_time(stop_epoch)))", "\n", "# start_epoch.record()", "\n", "", "", "with", "self", ".", "timer", "(", "\"reduce.p\"", ",", "verbosity", "=", "2", ")", ":", "\n", "            ", "all_reduce", "(", "self", ".", "p_memory", ")", "\n", "# stop_epoch.record()", "\n", "# torch.cuda.synchronize()", "\n", "# print (\"P_memory shape {}\".format(self.p_memory.shape))", "\n", "", "bits_communicated", "+=", "n_bits", "(", "self", ".", "p_memory", ")", "\n", "# print (\"Time spent reduce p{}\".format(start_epoch.elapsed_time(stop_epoch)))", "\n", "# Start communicating rank 1 tensors", "\n", "# start_epoch.record()", "\n", "with", "self", ".", "timer", "(", "\"reduce.rank1.pack\"", ",", "verbosity", "=", "2", ")", ":", "\n", "            ", "rank1_tensor_list", "=", "TensorBuffer", "(", "[", "tensor", "for", "(", "tensor", ",", "_", ",", "_", ")", "in", "rank1_tensors", "]", ")", "\n", "", "with", "self", ".", "timer", "(", "\"reduce.rank1.all_reduce\"", ",", "verbosity", "=", "2", ")", ":", "\n", "            ", "rank1_handle", "=", "rank1_tensor_list", ".", "all_reduce", "(", "async_op", "=", "True", ")", "\n", "bits_communicated", "+=", "rank1_tensor_list", ".", "bits", "(", ")", "\n", "# stop_epoch.record()", "\n", "# torch.cuda.synchronize()", "\n", "# print(\"Time spent rank1 reduce{}\".format(", "\n", "# start_epoch.elapsed_time(stop_epoch)))", "\n", "# start_epoch.record()", "\n", "", "with", "self", ".", "timer", "(", "\"reduce.normalize.p\"", ",", "verbosity", "=", "2", ")", ":", "\n", "            ", "for", "p", "in", "ps", ":", "\n", "                ", "orthogonalize", "(", "p", ")", "\n", "# stop_epoch.record()", "\n", "# torch.cuda.synchronize()", "\n", "# print (\"Time spent normalize p{}\".format(start_epoch.elapsed_time(stop_epoch)))", "\n", "# start_epoch.record()", "\n", "", "", "with", "self", ".", "timer", "(", "\"reduce.compute.q\"", ",", "verbosity", "=", "2", ")", ":", "\n", "            ", "for", "p", ",", "q", ",", "(", "tensor", ",", "_", ",", "_", ")", "in", "zip", "(", "ps", ",", "qs", ",", "high_rank_tensors", ")", ":", "\n", "                ", "matrix", "=", "tensor", ".", "view", "(", "tensor", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", "torch", ".", "matmul", "(", "matrix", ".", "t", "(", ")", ",", "p", ",", "out", "=", "q", ")", "\n", "# stop_epoch.record()", "\n", "# torch.cuda.synchronize()", "\n", "# print (\"Time spent compute q{}\".format(start_epoch.elapsed_time(stop_epoch)))", "\n", "# start_epoch.record()", "\n", "", "", "with", "self", ".", "timer", "(", "\"reduce.q\"", ",", "verbosity", "=", "2", ")", ":", "\n", "            ", "all_reduce", "(", "self", ".", "q_memory", ")", "\n", "# print (\"Q_memory shape {}\".format(self.q_memory.shape))", "\n", "bits_communicated", "+=", "n_bits", "(", "self", ".", "q_memory", ")", "\n", "self", ".", "q_memory", ".", "data", "[", ":", "]", "/=", "self", ".", "n_workers", "\n", "# stop_epoch.record()", "\n", "# torch.cuda.synchronize()", "\n", "# print (\"time spent reduce q{}\".format(start_epoch.elapsed_time(stop_epoch)))", "\n", "# start_epoch.record()", "\n", "", "with", "self", ".", "timer", "(", "\"reduce.outerprod\"", ",", "verbosity", "=", "2", ")", ":", "\n", "            ", "for", "p", ",", "q", ",", "(", "tensor", ",", "out", ",", "mem", ")", "in", "zip", "(", "ps", ",", "qs", ",", "high_rank_tensors", ")", ":", "\n", "# Set the output gradient", "\n", "                ", "torch", ".", "matmul", "(", "p", ",", "q", ".", "t", "(", ")", ",", "out", "=", "out", ".", "data", "[", ":", "]", ")", "\n", "mem", ".", "data", "[", ":", "]", "=", "tensor", "-", "out", "\n", "# stop_epoch.record()", "\n", "# torch.cuda.synchronize()", "\n", "# print(\"time spent outerprod{}\".format(start_epoch.elapsed_time(stop_epoch)))", "\n", "# start_epoch.record()", "\n", "", "", "with", "self", ".", "timer", "(", "\"reduce.rank1.unpack\"", ",", "verbosity", "=", "2", ")", ":", "\n", "            ", "rank1_handle", ".", "wait", "(", ")", "\n", "rank1_tensor_list", ".", "buffer", "/=", "self", ".", "n_workers", "\n", "rank1_tensor_list", ".", "unpack", "(", "[", "out", "for", "(", "_", ",", "out", ",", "_", ")", "in", "rank1_tensors", "]", ")", "\n", "# stop_epoch.record()", "\n", "# torch.cuda.synchronize()", "\n", "# print(\"time spent rank 1 unpack{}\".format(start_epoch.elapsed_time(stop_epoch)))", "\n", "# print (\"\\n\")", "\n", "# print (bits_communicated)", "\n", "", "return", "bits_communicated", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.gradient_reducers.MsTopKReducer.__init__": [[868, 872], ["gradient_reducers.Reducer.__init__"], "methods", ["home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.cifar_architectures.wresnet.Wide_ResNet.__init__"], ["def", "__init__", "(", "self", ",", "random_seed", ",", "device", ",", "timer", ",", "k", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "random_seed", ",", "device", ",", "timer", ")", "\n", "self", ".", "k", "=", "k", "\n", "self", ".", "N", "=", "100", "\n", "", "def", "reduce", "(", "self", ",", "grad_in", ",", "grad_out", ")", ":", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.gradient_reducers.MsTopKReducer.reduce": [[872, 938], ["torch.cuda.Event", "torch.cuda.Event", "start.record", "gradient_reducers.list_to_tensor", "list_to_tensor.reshape", "int", "torch.abs", "torch.mean", "torch.max", "len", "range", "torch.cuda.Event.record", "print", "torch.zeros", "torch.zeros", "torch.distributed.all_gather", "torch.distributed.all_gather", "torch.distributed.all_gather.wait", "torch.distributed.all_gather.wait", "torch.zeros_like", "zip", "torch.count_nonzero", "torch.nonzero", "torch.nonzero", "torch.cat", "random.randint", "torch.cat", "torch.zeros_like", "torch.zeros_like", "len", "torch.cuda.Event.elapsed_time", "range", "range", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.gradient_reducers.list_to_tensor", "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.gradient_reducers.all_gather", "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.gradient_reducers.all_gather"], ["", "def", "reduce", "(", "self", ",", "grad_in", ",", "grad_out", ")", ":", "\n", "        ", "start_time", "=", "torch", ".", "cuda", ".", "Event", "(", "enable_timing", "=", "True", ")", "\n", "stop_time", "=", "torch", ".", "cuda", ".", "Event", "(", "enable_timing", "=", "True", ")", "\n", "start", ".", "record", "(", ")", "\n", "grad_in", "=", "list_to_tensor", "(", "grad_in", ")", "\n", "grad_1d", "=", "grad_in", ".", "reshape", "(", "-", "1", ")", "#reshaping to 1d", "\n", "k", "=", "int", "(", "self", ".", "k", "*", "len", "(", "grad_1d", ")", ")", "#change percent to actual number", "\n", "a", "=", "torch", ".", "abs", "(", "grad_1d", ")", "\n", "a_hat", "=", "torch", ".", "mean", "(", "a", ")", "\n", "u", "=", "torch", ".", "max", "(", "a", ")", "\n", "l", "=", "0", "\n", "r", "=", "1", "\n", "k1", "=", "0", "\n", "k2", "=", "len", "(", "grad_1d", ")", "\n", "thres1", "=", "0", "\n", "thres2", "=", "0", "\n", "for", "i", "in", "range", "(", "self", ".", "N", ")", ":", "\n", "            ", "ratio", "=", "l", "+", "(", "r", "-", "l", ")", "/", "2", "\n", "thres", "=", "a_hat", "+", "ratio", "*", "(", "u", "-", "a_hat", ")", "\n", "nnz", "=", "torch", ".", "count_nonzero", "(", "a", ">=", "thres", ")", "\n", "if", "nnz", "<=", "k", ":", "\n", "                ", "r", "=", "ratio", "\n", "if", "nnz", ">", "k1", ":", "\n", "                    ", "k1", "=", "nnz", "\n", "thres1", "=", "thres", "\n", "", "", "elif", "nnz", ">", "k", ":", "\n", "                ", "l", "=", "ratio", "\n", "if", "nnz", "<", "k2", ":", "\n", "                    ", "k2", "=", "nnz", "\n", "thres2", "=", "thres", "\n", "", "", "", "l1", "=", "torch", ".", "nonzero", "(", "a", ">=", "thres1", ",", "as_tuple", "=", "True", ")", "[", "0", "]", "#since 1d no problem", "\n", "l2", "=", "torch", ".", "nonzero", "(", "(", "a", "<", "thres1", ")", "&", "(", "a", ">=", "thres2", ")", ",", "as_tuple", "=", "True", ")", "[", "0", "]", "\n", "\n", "if", "len", "(", "l2", ")", "-", "(", "k", "-", "k1", ")", "+", "1", "<", "0", ":", "\n", "            ", "l", "=", "torch", ".", "cat", "(", "(", "l1", ",", "l2", "[", "0", ":", "k", "-", "len", "(", "l1", ")", "]", ")", ")", "\n", "# print(\"Fake if\")", "\n", "", "else", ":", "\n", "            ", "rand", "=", "random", ".", "randint", "(", "0", ",", "len", "(", "l2", ")", "-", "(", "k", "-", "k1", ")", "+", "1", ")", "\n", "l", "=", "torch", ".", "cat", "(", "(", "l1", ",", "l2", "[", "rand", ":", "rand", "+", "k", "-", "k1", "]", ")", ")", "\n", "# print (\"Actual if\")", "\n", "", "kai", "=", "grad_1d", "[", "l", "]", "\n", "stop_time", ".", "record", "(", ")", "\n", "print", "(", "\"Time taken {}\"", ".", "format", "(", "start_time", ".", "elapsed_time", "(", "stop_time", ")", ")", ")", "\n", "kai", "=", "torch", ".", "zeros", "(", "(", "k", ")", ",", "device", "=", "kai", ".", "device", ",", "dtype", "=", "kai", ".", "dtype", ")", "\n", "l", "=", "torch", ".", "zeros", "(", "(", "k", ")", ",", "device", "=", "l", ".", "device", ",", "dtype", "=", "l", ".", "dtype", ")", "\n", "index_list", "=", "[", "torch", ".", "zeros_like", "(", "l", ",", "device", "=", "l", ".", "device", ",", "dtype", "=", "l", ".", "dtype", ")", "for", "_", "in", "range", "(", "self", ".", "n_workers", ")", "]", "\n", "ind_wait", "=", "torch", ".", "distributed", ".", "all_gather", "(", "index_list", ",", "l", ",", "async_op", "=", "True", ")", "\n", "value_list", "=", "[", "torch", ".", "zeros_like", "(", "kai", ",", "device", "=", "kai", ".", "device", ",", "dtype", "=", "kai", ".", "dtype", ")", "for", "_", "in", "range", "(", "self", ".", "n_workers", ")", "]", "\n", "val_wait", "=", "torch", ".", "distributed", ".", "all_gather", "(", "value_list", ",", "kai", ",", "async_op", "=", "True", ")", "\n", "ind_wait", ".", "wait", "(", ")", "\n", "val_wait", ".", "wait", "(", ")", "\n", "\n", "grad_accum", "=", "torch", ".", "zeros_like", "(", "grad_1d", ")", "\n", "for", "idx", ",", "vals", "in", "zip", "(", "index_list", ",", "value_list", ")", ":", "\n", "            ", "grad_accum", "[", "idx", "]", "+=", "vals", "\n", "\n", "# print (\"Starting element copy\") ", "\n", "# start_index = 0", "\n", "# for idx, ts in enumerate(grad_out):", "\n", "# num_element_ts = grad_out[idx].numel()", "\n", "# ts = grad_accum[start_index:start_index+num_element_ts]", "\n", "# grad_out[idx] = ts", "\n", "# start_index += num_element_ts", "\n", "# print (\"Done element copy\")", "\n", "# grad_out = grad_1.reshape(grad_in.shape)", "\n", "", "return", "grad_out", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.gradient_reducers.HalfRankKReducer.__init__": [[948, 954], ["gradient_reducers.Reducer.__init__"], "methods", ["home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.cifar_architectures.wresnet.Wide_ResNet.__init__"], ["def", "__init__", "(", "self", ",", "random_seed", ",", "device", ",", "timer", ",", "rank", "=", "1", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "random_seed", ",", "device", ",", "timer", ")", "\n", "self", ".", "rank", "=", "rank", "\n", "self", ".", "p_memory", "=", "None", "\n", "self", ".", "q_memory", "=", "None", "\n", "self", ".", "next_operation", "=", "\"p\"", "# or q, binary state", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.gradient_reducers.HalfRankKReducer.set_random": [[955, 959], ["torch.manual_seed", "torch.randn", "gradient_reducers.orthogonalize", "gradient_reducers.HalfRankKReducer.rng.randint"], "methods", ["home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.gradient_reducers.orthogonalize"], ["", "def", "set_random", "(", "self", ",", "vector", ")", ":", "\n", "        ", "torch", ".", "manual_seed", "(", "self", ".", "rng", ".", "randint", "(", "1_000_000_000", ")", ")", "\n", "vector", ".", "data", "[", ":", "]", "=", "torch", ".", "randn", "(", "*", "vector", ".", "shape", ",", "device", "=", "self", ".", "device", ")", "\n", "orthogonalize", "(", "vector", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.gradient_reducers.HalfRankKReducer.reduce": [[960, 1085], ["gradient_reducers.HalfRankKReducer.timer", "gradient_reducers.TensorBuffer", "gradient_reducers.HalfRankKReducer.timer", "gradient_reducers.TensorBuffer.all_reduce", "gradient_reducers.TensorBuffer.bits", "gradient_reducers.HalfRankKReducer.timer", "gradient_reducers.HalfRankKReducer.timer", "zip", "gradient_reducers.HalfRankKReducer.timer", "gradient_reducers.TensorBuffer.all_reduce", "gradient_reducers.TensorBuffer.unpack", "zip", "zip", "gradient_reducers.HalfRankKReducer.timer", "torch.empty", "torch.empty", "tensor.view", "min", "ps.append", "qs.append", "gradient_reducers.HalfRankKReducer.timer", "gradient_reducers.HalfRankKReducer.timer", "zip", "gradient_reducers.HalfRankKReducer.timer", "zip", "gradient_reducers.HalfRankKReducer.timer", "gradient_reducers.all_reduce", "gradient_reducers.n_bits", "torch.einsum().view", "tensor.ndimension", "tensor.ndimension", "tensor.view", "min", "gradient_reducers.HalfRankKReducer.p_memory[].view", "gradient_reducers.HalfRankKReducer.q_memory[].view", "tensor.view", "torch.matmul", "tensor.view", "gradient_reducers.HalfRankKReducer.timer", "gradient_reducers.HalfRankKReducer.timer", "zip", "gradient_reducers.HalfRankKReducer.timer", "zip", "gradient_reducers.HalfRankKReducer.timer", "gradient_reducers.all_reduce", "gradient_reducers.n_bits", "gradient_reducers.HalfRankKReducer.set_random", "gradient_reducers.orthogonalize", "gradient_reducers.orthogonalize", "tensor.view", "torch.matmul", "tensor.view", "torch.einsum", "tensor.view.t", "torch.einsum", "torch.einsum"], "methods", ["home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.gradient_reducers.all_reduce", "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.gradient_reducers.TensorBuffer.bits", "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.gradient_reducers.all_reduce", "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.gradient_reducers.TensorBuffer.unpack", "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.gradient_reducers.all_reduce", "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.gradient_reducers.n_bits", "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.gradient_reducers.all_reduce", "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.gradient_reducers.n_bits", "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.gradient_reducers.HalfRankKReducer.set_random", "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.gradient_reducers.orthogonalize", "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.gradient_reducers.orthogonalize"], ["", "def", "reduce", "(", "self", ",", "grad_in", ",", "grad_out", ",", "memory_out", ")", ":", "\n", "        ", "\"\"\"\n        Reduce gradients between the workers in place\n        :param grad_in: dictionary\n        :param grad_out: dictionary\n        :param memory_out: dictionary\n        \"\"\"", "\n", "bits_communicated", "=", "0", "\n", "\n", "# Split the tensors into rank1-ones that will be reduced un-compressed", "\n", "# and rank > 1 tensors that are compressed", "\n", "rank1_tensors", "=", "[", "\n", "(", "tensor", ",", "out", ",", "mem", ")", "\n", "for", "tensor", ",", "out", ",", "mem", "in", "zip", "(", "grad_in", ",", "grad_out", ",", "memory_out", ")", "\n", "if", "tensor", ".", "ndimension", "(", ")", "<=", "1", "\n", "]", "\n", "high_rank_tensors", "=", "[", "\n", "(", "tensor", ",", "out", ",", "mem", ")", "\n", "for", "tensor", ",", "out", ",", "mem", "in", "zip", "(", "grad_in", ",", "grad_out", ",", "memory_out", ")", "\n", "if", "tensor", ".", "ndimension", "(", ")", ">", "1", "\n", "]", "\n", "\n", "# Communicate rank 1 tensors", "\n", "with", "self", ".", "timer", "(", "\"reduce.rank1.pack\"", ",", "verbosity", "=", "2", ")", ":", "\n", "            ", "rank1_tensor_list", "=", "TensorBuffer", "(", "[", "tensor", "for", "(", "tensor", ",", "_", ",", "_", ")", "in", "rank1_tensors", "]", ")", "\n", "", "with", "self", ".", "timer", "(", "\"reduce.rank1.all_reduce\"", ",", "verbosity", "=", "2", ")", ":", "\n", "            ", "rank1_handle", "=", "rank1_tensor_list", ".", "all_reduce", "(", "async_op", "=", "True", ")", "\n", "bits_communicated", "+=", "rank1_tensor_list", ".", "bits", "(", ")", "\n", "\n", "# We are building a rank-1 approximation of every tensor", "\n", "# that can be interpreted as a matrix. Let the approximation be", "\n", "# M = p q^T", "\n", "# We are allocating consequtive memory for the p's and q's", "\n", "\n", "", "memory_is_uninitialized", "=", "self", ".", "p_memory", "is", "None", "\n", "\n", "if", "self", ".", "p_memory", "is", "None", ":", "\n", "            ", "with", "self", ".", "timer", "(", "\"reduce.allocate_memory\"", ",", "verbosity", "=", "2", ")", ":", "\n", "                ", "p_total_size", "=", "0", "\n", "q_total_size", "=", "0", "\n", "for", "tensor", ",", "_", ",", "_", "in", "high_rank_tensors", ":", "\n", "                    ", "matrix", "=", "tensor", ".", "view", "(", "tensor", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", "n", ",", "m", "=", "matrix", ".", "shape", "\n", "rank", "=", "min", "(", "n", ",", "m", ",", "self", ".", "rank", ")", "\n", "p_total_size", "+=", "n", "*", "rank", "\n", "q_total_size", "+=", "m", "*", "rank", "\n", "", "self", ".", "p_memory", "=", "torch", ".", "empty", "(", "p_total_size", ",", "device", "=", "self", ".", "device", ")", "\n", "self", ".", "q_memory", "=", "torch", ".", "empty", "(", "q_total_size", ",", "device", "=", "self", ".", "device", ")", "\n", "\n", "", "", "with", "self", ".", "timer", "(", "\"reduce.build_index\"", ",", "verbosity", "=", "2", ")", ":", "\n", "            ", "ps", "=", "[", "]", "\n", "qs", "=", "[", "]", "\n", "p_idx", "=", "0", "\n", "q_idx", "=", "0", "\n", "for", "tensor", ",", "_", ",", "_", "in", "high_rank_tensors", ":", "\n", "                ", "matrix", "=", "tensor", ".", "view", "(", "tensor", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", "n", ",", "m", "=", "matrix", ".", "shape", "\n", "rank", "=", "min", "(", "n", ",", "m", ",", "self", ".", "rank", ")", "\n", "ps", ".", "append", "(", "self", ".", "p_memory", "[", "p_idx", ":", "p_idx", "+", "n", "*", "rank", "]", ".", "view", "(", "n", ",", "rank", ")", ")", "\n", "qs", ".", "append", "(", "self", ".", "q_memory", "[", "q_idx", ":", "q_idx", "+", "m", "*", "rank", "]", ".", "view", "(", "m", ",", "rank", ")", ")", "\n", "p_idx", "+=", "n", "*", "rank", "\n", "q_idx", "+=", "m", "*", "rank", "\n", "\n", "", "", "if", "self", ".", "next_operation", "==", "\"p\"", ":", "\n", "            ", "self", ".", "next_operation", "=", "\"q\"", "\n", "with", "self", ".", "timer", "(", "\"reduce.normalize.q\"", ",", "verbosity", "=", "2", ")", ":", "\n", "                ", "for", "q", "in", "qs", ":", "\n", "                    ", "if", "memory_is_uninitialized", ":", "\n", "                        ", "self", ".", "set_random", "(", "q", ")", "\n", "", "else", ":", "\n", "                        ", "orthogonalize", "(", "q", ")", "\n", "\n", "", "", "", "with", "self", ".", "timer", "(", "\"reduce.compute.p\"", ",", "verbosity", "=", "2", ")", ":", "\n", "                ", "for", "(", "tensor", ",", "_", ",", "_", ")", ",", "q", ",", "p", "in", "zip", "(", "high_rank_tensors", ",", "qs", ",", "ps", ")", ":", "\n", "                    ", "matrix", "=", "tensor", ".", "view", "(", "tensor", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", "torch", ".", "matmul", "(", "matrix", ",", "q", ",", "out", "=", "p", ")", "\n", "\n", "", "", "with", "self", ".", "timer", "(", "\"reduce.fill_memory\"", ")", ":", "\n", "                ", "for", "p", ",", "q", ",", "(", "tensor", ",", "_", ",", "mem", ")", "in", "zip", "(", "ps", ",", "qs", ",", "high_rank_tensors", ")", ":", "\n", "                    ", "matrix", "=", "tensor", ".", "view", "(", "tensor", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", "# Keep what we couldn't send in memory", "\n", "mem", ".", "data", "[", ":", "]", "=", "(", "matrix", "-", "torch", ".", "einsum", "(", "\"nr, mr -> nm\"", ",", "(", "p", ",", "q", ")", ")", ")", ".", "view", "(", "\n", "*", "tensor", ".", "shape", "\n", ")", "\n", "\n", "", "", "with", "self", ".", "timer", "(", "\"reduce.p\"", ",", "verbosity", "=", "2", ")", ":", "\n", "                ", "all_reduce", "(", "self", ".", "p_memory", ")", "\n", "bits_communicated", "+=", "n_bits", "(", "self", ".", "p_memory", ")", "\n", "self", ".", "p_memory", ".", "data", "[", ":", "]", "/=", "self", ".", "n_workers", "\n", "\n", "", "", "elif", "self", ".", "next_operation", "==", "\"q\"", ":", "\n", "            ", "self", ".", "next_operation", "=", "\"p\"", "\n", "with", "self", ".", "timer", "(", "\"reduce.normalize.p\"", ",", "verbosity", "=", "2", ")", ":", "\n", "                ", "for", "p", "in", "ps", ":", "\n", "                    ", "orthogonalize", "(", "p", ")", "\n", "\n", "", "", "with", "self", ".", "timer", "(", "\"reduce.compute.q\"", ",", "verbosity", "=", "2", ")", ":", "\n", "                ", "for", "p", ",", "q", ",", "(", "tensor", ",", "_", ",", "_", ")", "in", "zip", "(", "ps", ",", "qs", ",", "high_rank_tensors", ")", ":", "\n", "                    ", "matrix", "=", "tensor", ".", "view", "(", "tensor", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", "torch", ".", "matmul", "(", "matrix", ".", "t", "(", ")", ",", "p", ",", "out", "=", "q", ")", "\n", "\n", "", "", "with", "self", ".", "timer", "(", "\"reduce.fill_memory\"", ",", "verbosity", "=", "2", ")", ":", "\n", "                ", "for", "p", ",", "q", ",", "(", "tensor", ",", "_", ",", "mem", ")", "in", "zip", "(", "ps", ",", "qs", ",", "high_rank_tensors", ")", ":", "\n", "                    ", "matrix", "=", "tensor", ".", "view", "(", "tensor", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", "# Keep what we couldn't send in memory", "\n", "mem", ".", "data", "[", ":", "]", "=", "(", "matrix", "-", "torch", ".", "einsum", "(", "\"nr, mr -> nm\"", ",", "(", "p", ",", "q", ")", ")", ")", ".", "view", "(", "\n", "*", "tensor", ".", "shape", "\n", ")", "\n", "\n", "", "", "with", "self", ".", "timer", "(", "\"reduce.q\"", ",", "verbosity", "=", "2", ")", ":", "\n", "                ", "all_reduce", "(", "self", ".", "q_memory", ")", "\n", "bits_communicated", "+=", "n_bits", "(", "self", ".", "q_memory", ")", "\n", "self", ".", "q_memory", ".", "data", "[", ":", "]", "/=", "self", ".", "n_workers", "\n", "\n", "", "", "with", "self", ".", "timer", "(", "\"reduce.outerprod\"", ",", "verbosity", "=", "2", ")", ":", "\n", "            ", "for", "p", ",", "q", ",", "(", "tensor", ",", "out", ",", "_", ")", "in", "zip", "(", "ps", ",", "qs", ",", "high_rank_tensors", ")", ":", "\n", "# Set the output gradient", "\n", "                ", "out", ".", "data", "[", ":", "]", "=", "torch", ".", "einsum", "(", "\"nr, mr -> nm\"", ",", "(", "p", ",", "q", ")", ")", ".", "view", "(", "*", "tensor", ".", "shape", ")", "\n", "\n", "", "", "with", "self", ".", "timer", "(", "\"reduce.rank1.unpack\"", ",", "verbosity", "=", "2", ")", ":", "\n", "            ", "rank1_handle", ".", "wait", "(", ")", "\n", "rank1_tensor_list", ".", "buffer", "/=", "self", ".", "n_workers", "\n", "rank1_tensor_list", ".", "unpack", "(", "[", "out", "for", "(", "_", ",", "out", ",", "_", ")", "in", "rank1_tensors", "]", ")", "\n", "\n", "", "return", "bits_communicated", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.gradient_reducers.ExactReducer.reduce": [[1108, 1127], ["gradient_reducers.ExactReducer.timer", "gradient_reducers.ExactReducer.timer", "gradient_reducers.reduce_mean_list"], "methods", ["home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.gradient_reducers.reduce_mean_list"], ["    ", "def", "reduce", "(", "self", ",", "grad_in", ",", "grad_out", ",", "memory_out", ")", ":", "\n", "        ", "\"\"\"\n        Reduce gradients between the workers in place\n        :param grad_in: dictionary\n        :param grad_out: dictionary\n        :param memory_out: dictionary\n        \"\"\"", "\n", "# with self.timer(\"reduce.zero_mem\", verbosity=2):", "\n", "# for mem in memory_out:", "\n", "# mem.zero_()", "\n", "\n", "with", "self", ".", "timer", "(", "\"reduce.build_lists\"", ",", "verbosity", "=", "2", ")", ":", "\n", "            ", "list_in", "=", "grad_in", "\n", "list_out", "=", "grad_out", "\n", "\n", "", "with", "self", ".", "timer", "(", "\"reduce.reduce\"", ",", "verbosity", "=", "2", ")", ":", "\n", "            ", "bits_communicated", "=", "reduce_mean_list", "(", "self", ".", "device", ",", "list_in", ",", "list_out", ",", "self", ".", "timer", ")", "\n", "\n", "", "return", "bits_communicated", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.gradient_reducers.ExactReducerPs.reduce": [[1129, 1167], ["torch.cat", "torch.zeros_like", "torch.distributed.broadcast", "gradient_reducers.ExactReducerPs.timer", "range", "torch.distributed.send", "l.view", "torch.distributed.recv"], "methods", ["None"], ["    ", "def", "reduce", "(", "self", ",", "grad_in", ",", "grad_out", ",", "memory_out", ")", ":", "\n", "        ", "\"\"\"\n        Reduce gradients between the workers in place\n        :param grad_in: dictionary\n        :param grad_out: dictionary\n        :param memory_out: dictionary\n        \"\"\"", "\n", "# with self.timer(\"reduce.zero_mem\", verbosity=2):", "\n", "# for mem in memory_out:", "\n", "# mem.zero_()", "\n", "\n", "with", "self", ".", "timer", "(", "\"reduce.build_lists\"", ",", "verbosity", "=", "2", ")", ":", "\n", "            ", "list_in", "=", "grad_in", "\n", "list_out", "=", "grad_out", "\n", "\n", "\n", "", "tensor_to_reduce", "=", "torch", ".", "cat", "(", "[", "l", ".", "view", "(", "-", "1", ")", "for", "l", "in", "list_in", "]", ")", "\n", "\n", "receive_tensor", "=", "torch", ".", "zeros_like", "(", "tensor_to_reduce", ")", "\n", "\n", "if", "self", ".", "rank", "==", "0", ":", "\n", "            ", "for", "i", "in", "range", "(", "1", ",", "self", ".", "n_workers", ")", ":", "\n", "                ", "torch", ".", "distributed", ".", "recv", "(", "receive_tensor", ",", "src", "=", "i", ")", "\n", "tensor_to_reduce", "+=", "receive_tensor", "\n", "", "", "else", ":", "\n", "            ", "torch", ".", "distributed", ".", "send", "(", "tensor_to_reduce", ",", "0", ")", "\n", "\n", "\n", "# torch.distributed.barrier()", "\n", "\n", "", "torch", ".", "distributed", ".", "broadcast", "(", "tensor_to_reduce", ",", "src", "=", "0", ")", "\n", "\n", "# torch.distributed.barrier()", "\n", "\n", "# with self.timer(\"reduce.reduce\", verbosity=2):", "\n", "# bits_communicated = reduce_mean_list(self.device, list_in, list_out, self.timer)", "\n", "\n", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.gradient_reducers.TensorBuffer.__init__": [[1206, 1217], ["torch.cat", "indices.append", "tensor.nelement", "t.view"], "methods", ["home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.gradient_reducers.TensorBuffer.nelement"], ["def", "__init__", "(", "self", ",", "tensors", ")", ":", "\n", "        ", "indices", "=", "[", "0", "]", "\n", "for", "tensor", "in", "tensors", ":", "\n", "            ", "new_end", "=", "indices", "[", "-", "1", "]", "+", "tensor", ".", "nelement", "(", ")", "\n", "indices", ".", "append", "(", "new_end", ")", "\n", "\n", "", "self", ".", "_start_idx", "=", "indices", "[", ":", "-", "1", "]", "\n", "self", ".", "_end_idx", "=", "indices", "[", "1", ":", "]", "\n", "self", ".", "_tensors", "=", "tensors", "\n", "\n", "self", ".", "buffer", "=", "torch", ".", "cat", "(", "[", "t", ".", "view", "(", "-", "1", ")", "for", "t", "in", "tensors", "]", ")", "# copies", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.gradient_reducers.TensorBuffer.__getitem__": [[1218, 1220], ["gradient_reducers.TensorBuffer.buffer[].view"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "return", "self", ".", "buffer", "[", "self", ".", "_start_idx", "[", "index", "]", ":", "self", ".", "_end_idx", "[", "index", "]", "]", ".", "view", "(", "*", "self", ".", "_tensors", "[", "index", "]", ".", "shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.gradient_reducers.TensorBuffer.__len__": [[1221, 1223], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "_tensors", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.gradient_reducers.TensorBuffer.pack": [[1224, 1230], ["zip"], "methods", ["None"], ["", "def", "pack", "(", "self", ",", "tensors", "=", "None", ")", ":", "\n", "# Optional. init already does this.", "\n", "        ", "if", "tensors", "is", "None", ":", "\n", "            ", "tensors", "=", "self", ".", "_tensors", "\n", "", "for", "tensor", ",", "entry", "in", "zip", "(", "tensors", ",", "self", ")", ":", "\n", "            ", "entry", "[", ":", "]", "=", "tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.gradient_reducers.TensorBuffer.unpack": [[1231, 1234], ["zip"], "methods", ["None"], ["", "", "def", "unpack", "(", "self", ",", "tensors", ")", ":", "\n", "        ", "for", "tensor", ",", "entry", "in", "zip", "(", "tensors", ",", "self", ")", ":", "\n", "            ", "tensor", "[", ":", "]", "=", "entry", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.gradient_reducers.TensorBuffer.nelement": [[1235, 1237], ["gradient_reducers.TensorBuffer.buffer.nelement"], "methods", ["home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.gradient_reducers.TensorBuffer.nelement"], ["", "", "def", "nelement", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "buffer", ".", "nelement", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.gradient_reducers.TensorBuffer.element_size": [[1238, 1240], ["gradient_reducers.TensorBuffer.buffer.element_size"], "methods", ["home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.gradient_reducers.TensorBuffer.element_size"], ["", "def", "element_size", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "buffer", ".", "element_size", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.gradient_reducers.TensorBuffer.bits": [[1241, 1243], ["gradient_reducers.TensorBuffer.element_size", "gradient_reducers.TensorBuffer.nelement"], "methods", ["home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.gradient_reducers.TensorBuffer.element_size", "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.gradient_reducers.TensorBuffer.nelement"], ["", "def", "bits", "(", "self", ")", ":", "\n", "        ", "return", "8", "*", "self", ".", "nelement", "(", ")", "*", "self", ".", "element_size", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.gradient_reducers.TensorBuffer.all_reduce": [[1244, 1246], ["torch.distributed.all_reduce"], "methods", ["home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.gradient_reducers.all_reduce"], ["", "def", "all_reduce", "(", "self", ",", "async_op", "=", "False", ")", ":", "\n", "        ", "return", "torch", ".", "distributed", ".", "all_reduce", "(", "self", ".", "buffer", ",", "async_op", "=", "async_op", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.gradient_reducers.TensorBuffer.all_gather": [[1247, 1255], ["gradient_reducers.TensorBuffer.all_gather"], "methods", ["home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.gradient_reducers.all_gather"], ["", "def", "all_gather", "(", "self", ",", "async_op", "=", "False", ")", ":", "\n", "        ", "n_workers", "=", "torch", ".", "distributed", ".", "get_world_size", "(", ")", "if", "torch", ".", "distributed", ".", "is_available", "(", ")", "else", "1", "\n", "buffers", "=", "[", "torch", ".", "empty_like", "(", "self", ".", "buffer", ")", "for", "i", "in", "range", "(", "n_workers", ")", "]", "\n", "handle", "=", "all_gather", "(", "buffers", ",", "self", ".", "buffer", ",", "async_op", "=", "async_op", ")", "\n", "if", "async_op", ":", "\n", "            ", "return", "buffers", ",", "handle", "\n", "", "else", ":", "\n", "            ", "return", "buffers", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.gradient_reducers.SignCompressor.packing": [[1283, 1298], ["torch.sign", "src_tensor.to.to.size", "src_tensor.to.to.view", "len", "torch.zeros", "torch.cat", "src_tensor.to.to.view", "src_tensor.to.to.to", "bit2byte.packing", "dst_tensor.to.to.to"], "methods", ["home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.gradient_reducers.SignCompressor.packing"], ["def", "packing", "(", "self", ",", "src_tensor", ")", ":", "\n", "        ", "src_tensor", "=", "torch", ".", "sign", "(", "src_tensor", ")", "\n", "src_tensor_size", "=", "src_tensor", ".", "size", "(", ")", "\n", "src_tensor", "=", "src_tensor", ".", "view", "(", "-", "1", ")", "\n", "src_len", "=", "len", "(", "src_tensor", ")", "\n", "add_elm", "=", "32", "-", "(", "src_len", "%", "32", ")", "\n", "if", "src_len", "%", "32", "==", "0", ":", "\n", "            ", "add_elm", "=", "0", "\n", "", "new_tensor", "=", "torch", ".", "zeros", "(", "[", "add_elm", "]", ",", "dtype", "=", "torch", ".", "float32", ",", "device", "=", "src_tensor", ".", "device", ")", "\n", "src_tensor", "=", "torch", ".", "cat", "(", "(", "src_tensor", ",", "new_tensor", ")", ",", "0", ")", "\n", "src_tensor", "=", "src_tensor", ".", "view", "(", "32", ",", "-", "1", ")", "\n", "src_tensor", "=", "src_tensor", ".", "to", "(", "dtype", "=", "torch", ".", "int32", ")", "\n", "dst_tensor", "=", "bit2byte", ".", "packing", "(", "src_tensor", ")", "\n", "dst_tensor", "=", "dst_tensor", ".", "to", "(", "dtype", "=", "torch", ".", "int32", ")", "\n", "return", "dst_tensor", ",", "src_tensor_size", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.gradient_reducers.SignCompressor.unpacking": [[1299, 1316], ["gradient_reducers.SignCompressor.element_num", "src_tensor.int.int.int", "torch.ones", "new_tensor.float.float.view", "bit2byte.unpacking", "new_tensor.float.float.view", "new_tensor.float.float.view", "new_tensor.float.float.float", "new_tensor.float.float.add_"], "methods", ["home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.gradient_reducers.SignCompressor.element_num", "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.gradient_reducers.SignCompressor.unpacking"], ["", "def", "unpacking", "(", "self", ",", "src_tensor", ",", "src_tensor_size", ")", ":", "\n", "        ", "src_element_num", "=", "self", ".", "element_num", "(", "src_tensor_size", ")", "\n", "add_elm", "=", "32", "-", "(", "src_element_num", "%", "32", ")", "\n", "if", "src_element_num", "%", "32", "==", "0", ":", "\n", "            ", "add_elm", "=", "0", "\n", "", "src_tensor", "=", "src_tensor", ".", "int", "(", ")", "\n", "new_tensor", "=", "torch", ".", "ones", "(", "\n", "src_element_num", "+", "add_elm", ",", "device", "=", "src_tensor", ".", "device", ",", "dtype", "=", "torch", ".", "int32", "\n", ")", "\n", "new_tensor", "=", "new_tensor", ".", "view", "(", "32", ",", "-", "1", ")", "\n", "new_tensor", "=", "bit2byte", ".", "unpacking", "(", "src_tensor", ",", "new_tensor", ")", "\n", "new_tensor", "=", "new_tensor", ".", "view", "(", "-", "1", ")", "\n", "new_tensor", "=", "new_tensor", "[", ":", "src_element_num", "]", "\n", "new_tensor", "=", "new_tensor", ".", "view", "(", "src_tensor_size", ")", "\n", "new_tensor", "=", "-", "new_tensor", ".", "add_", "(", "-", "1", ")", "\n", "new_tensor", "=", "new_tensor", ".", "float", "(", ")", "\n", "return", "new_tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.gradient_reducers.SignCompressor.majority_vote": [[1317, 1334], ["len", "torch.stack", "src_tensor.view.view.view", "torch.ones", "new_tensor.to.to.view", "bit2byte.unpacking", "new_tensor.to.to.permute().contiguous().view", "torch.sum", "new_tensor.to.to.view().permute", "torch.sign", "bit2byte.packing", "new_tensor.to.to.to", "len", "new_tensor.to.to.add_", "new_tensor.to.to.permute().contiguous", "new_tensor.to.to.view", "new_tensor.to.to.permute"], "methods", ["home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.gradient_reducers.SignCompressor.unpacking", "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.gradient_reducers.SignCompressor.packing"], ["", "def", "majority_vote", "(", "self", ",", "src_tensor_list", ")", ":", "\n", "        ", "voter_num", "=", "len", "(", "src_tensor_list", ")", "\n", "src_tensor", "=", "torch", ".", "stack", "(", "src_tensor_list", ")", "\n", "src_tensor", "=", "src_tensor", ".", "view", "(", "-", "1", ")", "\n", "full_size", "=", "32", "*", "len", "(", "src_tensor", ")", "\n", "new_tensor", "=", "torch", ".", "ones", "(", "full_size", ",", "device", "=", "src_tensor", ".", "device", ",", "dtype", "=", "torch", ".", "int32", ")", "\n", "new_tensor", "=", "new_tensor", ".", "view", "(", "32", ",", "-", "1", ")", "\n", "new_tensor", "=", "bit2byte", ".", "unpacking", "(", "src_tensor", ",", "new_tensor", ")", "\n", "new_tensor", "=", "-", "new_tensor", ".", "add_", "(", "-", "1", ")", "\n", "# sum", "\n", "new_tensor", "=", "new_tensor", ".", "permute", "(", "1", ",", "0", ")", ".", "contiguous", "(", ")", ".", "view", "(", "voter_num", ",", "-", "1", ")", "\n", "new_tensor", "=", "torch", ".", "sum", "(", "new_tensor", ",", "0", ")", "\n", "new_tensor", "=", "new_tensor", ".", "view", "(", "-", "1", ",", "32", ")", ".", "permute", "(", "1", ",", "0", ")", "\n", "new_tensor", "=", "torch", ".", "sign", "(", "new_tensor", ")", "\n", "new_tensor", "=", "bit2byte", ".", "packing", "(", "new_tensor", ")", "\n", "new_tensor", "=", "new_tensor", ".", "to", "(", "dtype", "=", "torch", ".", "int32", ")", "\n", "return", "new_tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.gradient_reducers.SignCompressor.element_num": [[1335, 1340], ["range", "len"], "methods", ["None"], ["", "def", "element_num", "(", "self", ",", "size", ")", ":", "\n", "        ", "num", "=", "1", "\n", "for", "i", "in", "range", "(", "len", "(", "size", ")", ")", ":", "\n", "            ", "num", "*=", "size", "[", "i", "]", "\n", "", "return", "num", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.gradient_reducers.SignCompressor.compress": [[1341, 1343], ["gradient_reducers.SignCompressor.packing"], "methods", ["home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.gradient_reducers.SignCompressor.packing"], ["", "def", "compress", "(", "self", ",", "src_tensor", ")", ":", "\n", "        ", "return", "self", ".", "packing", "(", "src_tensor", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.gradient_reducers.SignCompressor.uncompress": [[1344, 1347], ["gradient_reducers.SignCompressor.unpacking"], "methods", ["home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.gradient_reducers.SignCompressor.unpacking"], ["", "def", "uncompress", "(", "self", ",", "src_tensor", ",", "src_tensor_size", ")", ":", "\n", "        ", "dst_tensor", "=", "self", ".", "unpacking", "(", "src_tensor", ",", "src_tensor_size", ")", "\n", "return", "dst_tensor", "\n", "", "", ""]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.gradient_reducers.list_to_tensor": [[859, 862], ["torch.cat", "t.reshape"], "function", ["None"], ["", "", "def", "list_to_tensor", "(", "input_list", ")", ":", "\n", "    ", "temp_list", "=", "[", "t", ".", "reshape", "(", "-", "1", ")", "for", "t", "in", "input_list", "]", "\n", "return", "(", "torch", ".", "cat", "(", "temp_list", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.gradient_reducers.orthogonalize": [[1093, 1105], ["range", "torch.sqrt", "torch.sum", "torch.sum"], "function", ["None"], ["", "", "@", "torch", ".", "jit", ".", "script", "\n", "def", "orthogonalize", "(", "matrix", ")", ":", "\n", "    ", "n", ",", "m", "=", "matrix", ".", "shape", "\n", "for", "i", "in", "range", "(", "m", ")", ":", "\n", "# Normalize the i'th column", "\n", "        ", "col", "=", "matrix", "[", ":", ",", "i", ":", "i", "+", "1", "]", "\n", "col", "/=", "torch", ".", "sqrt", "(", "torch", ".", "sum", "(", "col", "**", "2", ")", ")", "\n", "# Project it on the rest and remove it", "\n", "if", "i", "+", "1", "<", "m", ":", "\n", "            ", "rest", "=", "matrix", "[", ":", ",", "i", "+", "1", ":", "]", "\n", "# rest -= torch.matmul(col.t(), rest) * col", "\n", "rest", "-=", "torch", ".", "sum", "(", "col", "*", "rest", ",", "dim", "=", "0", ")", "*", "col", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.gradient_reducers.reduce_mean_list": [[1170, 1195], ["torch.distributed.is_available", "torch.distributed.get_world_size", "zip", "timer", "gradient_reducers.TensorBuffer", "timer", "gradient_reducers.TensorBuffer.all_reduce", "gradient_reducers.TensorBuffer.bits", "timer", "gradient_reducers.TensorBuffer.unpack"], "function", ["home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.gradient_reducers.all_reduce", "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.gradient_reducers.TensorBuffer.bits", "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.gradient_reducers.TensorBuffer.unpack"], ["", "", "def", "reduce_mean_list", "(", "\n", "device", ":", "torch", ".", "device", ",", "list_in", ":", "List", "[", "torch", ".", "Tensor", "]", ",", "list_out", ":", "List", "[", "torch", ".", "Tensor", "]", ",", "timer", "\n", ")", ":", "\n", "    ", "if", "torch", ".", "distributed", ".", "is_available", "(", ")", ":", "\n", "        ", "n_workers", "=", "torch", ".", "distributed", ".", "get_world_size", "(", ")", "\n", "", "else", ":", "\n", "        ", "n_workers", "=", "1", "\n", "\n", "", "if", "n_workers", "==", "1", ":", "\n", "        ", "for", "t_in", ",", "t_out", "in", "zip", "(", "list_in", ",", "list_out", ")", ":", "\n", "            ", "t_out", "[", ":", "]", "=", "t_in", "\n", "", "return", "0", "\n", "\n", "", "with", "timer", "(", "\"reduce.mean.pack\"", ")", ":", "\n", "        ", "buffer", "=", "TensorBuffer", "(", "list_in", ")", "\n", "\n", "", "with", "timer", "(", "\"reduce.mean.allreduce\"", ")", ":", "\n", "        ", "buffer", ".", "all_reduce", "(", ")", "\n", "buffer", ".", "buffer", "/=", "n_workers", "\n", "bits_communicated", "=", "buffer", ".", "bits", "(", ")", "\n", "\n", "", "with", "timer", "(", "\"reduce.mean.unpack\"", ",", "verbosity", "=", "2", ")", ":", "\n", "        ", "buffer", ".", "unpack", "(", "list_out", ")", "\n", "\n", "", "return", "bits_communicated", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.gradient_reducers.n_bits": [[1197, 1199], ["tensor.element_size", "tensor.nelement"], "function", ["home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.gradient_reducers.TensorBuffer.element_size", "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.gradient_reducers.TensorBuffer.nelement"], ["", "def", "n_bits", "(", "tensor", ")", ":", "\n", "    ", "return", "8", "*", "tensor", ".", "nelement", "(", ")", "*", "tensor", ".", "element_size", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.gradient_reducers.all_reduce": [[1257, 1260], ["torch.distributed.is_available", "torch.distributed.all_reduce", "torch.distributed.get_world_size"], "function", ["home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.gradient_reducers.all_reduce"], ["", "", "", "def", "all_reduce", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "if", "torch", ".", "distributed", ".", "is_available", "(", ")", "and", "torch", ".", "distributed", ".", "get_world_size", "(", ")", ">", "1", ":", "\n", "        ", "return", "torch", ".", "distributed", ".", "all_reduce", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.gradient_reducers.all_gather": [[1262, 1268], ["torch.distributed.is_available", "torch.distributed.all_gather", "torch.distributed.get_world_size", "len"], "function", ["home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.gradient_reducers.all_gather"], ["", "", "def", "all_gather", "(", "out_list", ",", "in_tensor", ",", "**", "kwargs", ")", ":", "\n", "    ", "if", "torch", ".", "distributed", ".", "is_available", "(", ")", "and", "torch", ".", "distributed", ".", "get_world_size", "(", ")", ">", "1", ":", "\n", "        ", "return", "torch", ".", "distributed", ".", "all_gather", "(", "out_list", ",", "in_tensor", ",", "**", "kwargs", ")", "\n", "", "else", ":", "\n", "        ", "assert", "len", "(", "out_list", ")", "==", "1", "\n", "out_list", "[", "0", "]", ".", "data", "=", "in_tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.gradient_reducers.l2norm": [[1270, 1273], ["torch.sqrt", "torch.sum"], "function", ["None"], ["", "", "@", "torch", ".", "jit", ".", "script", "\n", "def", "l2norm", "(", "x", ")", ":", "\n", "    ", "return", "torch", ".", "sqrt", "(", "torch", ".", "sum", "(", "x", "**", "2", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.gradient_reducers.normalize_": [[1275, 1278], ["gradient_reducers.l2norm"], "function", ["home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.gradient_reducers.l2norm"], ["", "def", "normalize_", "(", "tensor", ")", ":", "\n", "    ", "\"\"\"Divide by L2 norm. In place\"\"\"", "\n", "tensor", "/=", "l2norm", "(", "tensor", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.main_bert.InputExample.__init__": [[54, 69], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "guid", ",", "text_a", ",", "text_b", "=", "None", ",", "label", "=", "None", ")", ":", "\n", "        ", "\"\"\"Constructs a InputExample.\n        Args:\n            guid: Unique id for the example.\n            text_a: string. The untokenized text of the first sequence. For single\n            sequence tasks, only this sequence must be specified.\n            text_b: (Optional) string. The untokenized text of the second sequence.\n            Only must be specified for sequence pair tasks.\n            label: (Optional) string. The label of the example. This should be\n            specified for train and dev examples, but not for test examples.\n        \"\"\"", "\n", "self", ".", "guid", "=", "guid", "\n", "self", ".", "text_a", "=", "text_a", "\n", "self", ".", "text_b", "=", "text_b", "\n", "self", ".", "label", "=", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.main_bert.InputFeatures.__init__": [[74, 79], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "input_ids", ",", "input_mask", ",", "segment_ids", ",", "label_id", ")", ":", "\n", "        ", "self", ".", "input_ids", "=", "input_ids", "\n", "self", ".", "input_mask", "=", "input_mask", "\n", "self", ".", "segment_ids", "=", "segment_ids", "\n", "self", ".", "label_id", "=", "label_id", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.main_bert.DataProcessor.get_train_examples": [[84, 87], ["NotImplementedError"], "methods", ["None"], ["def", "get_train_examples", "(", "self", ",", "data_dir", ")", ":", "\n", "        ", "\"\"\"Gets a collection of `InputExample`s for the train set.\"\"\"", "\n", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.main_bert.DataProcessor.get_dev_examples": [[88, 91], ["NotImplementedError"], "methods", ["None"], ["", "def", "get_dev_examples", "(", "self", ",", "data_dir", ")", ":", "\n", "        ", "\"\"\"Gets a collection of `InputExample`s for the dev set.\"\"\"", "\n", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.main_bert.DataProcessor.get_labels": [[92, 95], ["NotImplementedError"], "methods", ["None"], ["", "def", "get_labels", "(", "self", ")", ":", "\n", "        ", "\"\"\"Gets the list of labels for this data set.\"\"\"", "\n", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.main_bert.DataProcessor._read_tsv": [[96, 105], ["open", "csv.reader", "lines.append"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "_read_tsv", "(", "cls", ",", "input_file", ",", "quotechar", "=", "None", ")", ":", "\n", "        ", "\"\"\"Reads a tab separated value file.\"\"\"", "\n", "with", "open", "(", "input_file", ",", "\"r\"", ")", "as", "f", ":", "\n", "            ", "reader", "=", "csv", ".", "reader", "(", "f", ",", "delimiter", "=", "\"\\t\"", ",", "quotechar", "=", "quotechar", ")", "\n", "lines", "=", "[", "]", "\n", "for", "line", "in", "reader", ":", "\n", "                ", "lines", ".", "append", "(", "line", ")", "\n", "", "return", "lines", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.main_bert.Sogou_Processor.get_train_examples": [[110, 114], ["main_bert.Sogou_Processor._create_examples", "pandas.read_csv", "os.path.join", "os.path.join", "os.path.join", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.main_bert.Dbpedia_Processor._create_examples"], ["def", "get_train_examples", "(", "self", ",", "data_dir", ",", "data_num", "=", "None", ")", ":", "\n", "        ", "\"\"\"See base class.\"\"\"", "\n", "train_data", "=", "pd", ".", "read_csv", "(", "os", ".", "path", ".", "join", "(", "data_dir", ",", "\"train.csv\"", ")", ",", "header", "=", "None", ",", "sep", "=", "\"\\t\"", ",", "encoding", "=", "'utf-8-sig'", ")", ".", "values", "\n", "return", "self", ".", "_create_examples", "(", "train_data", ",", "\"train\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.main_bert.Sogou_Processor.get_dev_examples": [[115, 119], ["main_bert.Sogou_Processor._create_examples", "pandas.read_csv", "os.path.join", "os.path.join", "os.path.join", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.main_bert.Dbpedia_Processor._create_examples"], ["", "def", "get_dev_examples", "(", "self", ",", "data_dir", ")", ":", "\n", "        ", "\"\"\"See base class.\"\"\"", "\n", "dev_data", "=", "pd", ".", "read_csv", "(", "os", ".", "path", ".", "join", "(", "data_dir", ",", "\"test.csv\"", ")", ",", "header", "=", "None", ",", "sep", "=", "\"\\t\"", ",", "encoding", "=", "'utf-8-sig'", ")", ".", "values", "\n", "return", "self", ".", "_create_examples", "(", "dev_data", ",", "\"dev\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.main_bert.Sogou_Processor.get_labels": [[120, 123], ["None"], "methods", ["None"], ["", "def", "get_labels", "(", "self", ")", ":", "\n", "        ", "\"\"\"See base class.\"\"\"", "\n", "return", "[", "\"1\"", ",", "\"2\"", ",", "\"3\"", ",", "\"4\"", ",", "\"5\"", ",", "\"6\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.main_bert.Sogou_Processor._create_examples": [[124, 140], ["enumerate", "tokenization.convert_to_unicode", "tokenization.convert_to_unicode", "examples.append", "str", "print", "print", "print", "print", "main_bert.InputExample", "str", "str"], "methods", ["home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.tokenization.convert_to_unicode", "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.tokenization.convert_to_unicode"], ["", "def", "_create_examples", "(", "self", ",", "lines", ",", "set_type", ")", ":", "\n", "        ", "\"\"\"Creates examples for the training and dev sets.\"\"\"", "\n", "examples", "=", "[", "]", "\n", "for", "(", "i", ",", "line", ")", "in", "enumerate", "(", "lines", ")", ":", "\n", "            ", "if", "i", ">", "1199", ":", "break", "\n", "guid", "=", "\"%s-%s\"", "%", "(", "set_type", ",", "i", ")", "\n", "text_a", "=", "tokenization", ".", "convert_to_unicode", "(", "str", "(", "line", "[", "1", "]", ")", "+", "\" \"", "+", "str", "(", "line", "[", "2", "]", ")", ")", "\n", "label", "=", "tokenization", ".", "convert_to_unicode", "(", "str", "(", "line", "[", "0", "]", ")", ")", "\n", "if", "i", "%", "1000", "==", "0", ":", "\n", "                ", "print", "(", "i", ")", "\n", "print", "(", "\"guid=\"", ",", "guid", ")", "\n", "print", "(", "\"text_a=\"", ",", "text_a", ")", "\n", "print", "(", "\"label=\"", ",", "label", ")", "\n", "", "examples", ".", "append", "(", "\n", "InputExample", "(", "guid", "=", "guid", ",", "text_a", "=", "text_a", ",", "text_b", "=", "None", ",", "label", "=", "label", ")", ")", "\n", "", "return", "examples", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.main_bert.AGNewsProcessor.get_train_examples": [[144, 148], ["main_bert.AGNewsProcessor._create_examples", "pandas.read_csv", "os.path.join", "os.path.join", "os.path.join", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.main_bert.Dbpedia_Processor._create_examples"], ["def", "get_train_examples", "(", "self", ",", "data_dir", ")", ":", "\n", "        ", "\"\"\"See base class.\"\"\"", "\n", "train_data", "=", "pd", ".", "read_csv", "(", "os", ".", "path", ".", "join", "(", "data_dir", ",", "\"train.csv\"", ")", ",", "header", "=", "None", ")", ".", "values", "\n", "return", "self", ".", "_create_examples", "(", "train_data", ",", "\"train\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.main_bert.AGNewsProcessor.get_dev_examples": [[149, 153], ["main_bert.AGNewsProcessor._create_examples", "pandas.read_csv", "os.path.join", "os.path.join", "os.path.join", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.main_bert.Dbpedia_Processor._create_examples"], ["", "def", "get_dev_examples", "(", "self", ",", "data_dir", ")", ":", "\n", "        ", "\"\"\"See base class.\"\"\"", "\n", "dev_data", "=", "pd", ".", "read_csv", "(", "os", ".", "path", ".", "join", "(", "data_dir", ",", "\"test.csv\"", ")", ",", "header", "=", "None", ")", ".", "values", "\n", "return", "self", ".", "_create_examples", "(", "dev_data", ",", "\"dev\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.main_bert.AGNewsProcessor.get_labels": [[154, 157], ["None"], "methods", ["None"], ["", "def", "get_labels", "(", "self", ")", ":", "\n", "        ", "\"\"\"See base class.\"\"\"", "\n", "return", "[", "\"1\"", ",", "\"2\"", ",", "\"3\"", ",", "\"4\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.main_bert.AGNewsProcessor._create_examples": [[158, 173], ["enumerate", "tokenization.convert_to_unicode", "tokenization.convert_to_unicode", "examples.append", "str", "print", "print", "print", "print", "main_bert.InputExample"], "methods", ["home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.tokenization.convert_to_unicode", "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.tokenization.convert_to_unicode"], ["", "def", "_create_examples", "(", "self", ",", "lines", ",", "set_type", ")", ":", "\n", "        ", "\"\"\"Creates examples for the training and dev sets.\"\"\"", "\n", "examples", "=", "[", "]", "\n", "for", "(", "i", ",", "line", ")", "in", "enumerate", "(", "lines", ")", ":", "\n", "            ", "guid", "=", "\"%s-%s\"", "%", "(", "set_type", ",", "i", ")", "\n", "text_a", "=", "tokenization", ".", "convert_to_unicode", "(", "line", "[", "1", "]", "+", "\" - \"", "+", "line", "[", "2", "]", ")", "\n", "label", "=", "tokenization", ".", "convert_to_unicode", "(", "str", "(", "line", "[", "0", "]", ")", ")", "\n", "if", "i", "%", "1000", "==", "0", ":", "\n", "                ", "print", "(", "i", ")", "\n", "print", "(", "\"guid=\"", ",", "guid", ")", "\n", "print", "(", "\"text_a=\"", ",", "text_a", ")", "\n", "print", "(", "\"label=\"", ",", "label", ")", "\n", "", "examples", ".", "append", "(", "\n", "InputExample", "(", "guid", "=", "guid", ",", "text_a", "=", "text_a", ",", "text_b", "=", "None", ",", "label", "=", "label", ")", ")", "\n", "", "return", "examples", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.main_bert.AGNewsProcessor_sep.get_train_examples": [[178, 182], ["main_bert.AGNewsProcessor_sep._create_examples", "pandas.read_csv", "os.path.join", "os.path.join", "os.path.join", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.main_bert.Dbpedia_Processor._create_examples"], ["def", "get_train_examples", "(", "self", ",", "data_dir", ")", ":", "\n", "        ", "\"\"\"See base class.\"\"\"", "\n", "train_data", "=", "pd", ".", "read_csv", "(", "os", ".", "path", ".", "join", "(", "data_dir", ",", "\"train.csv\"", ")", ",", "header", "=", "None", ")", ".", "values", "\n", "return", "self", ".", "_create_examples", "(", "train_data", ",", "\"train\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.main_bert.AGNewsProcessor_sep.get_dev_examples": [[183, 187], ["main_bert.AGNewsProcessor_sep._create_examples", "pandas.read_csv", "os.path.join", "os.path.join", "os.path.join", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.main_bert.Dbpedia_Processor._create_examples"], ["", "def", "get_dev_examples", "(", "self", ",", "data_dir", ")", ":", "\n", "        ", "\"\"\"See base class.\"\"\"", "\n", "dev_data", "=", "pd", ".", "read_csv", "(", "os", ".", "path", ".", "join", "(", "data_dir", ",", "\"test.csv\"", ")", ",", "header", "=", "None", ")", ".", "values", "\n", "return", "self", ".", "_create_examples", "(", "dev_data", ",", "\"dev\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.main_bert.AGNewsProcessor_sep.get_labels": [[188, 191], ["None"], "methods", ["None"], ["", "def", "get_labels", "(", "self", ")", ":", "\n", "        ", "\"\"\"See base class.\"\"\"", "\n", "return", "[", "\"1\"", ",", "\"2\"", ",", "\"3\"", ",", "\"4\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.main_bert.AGNewsProcessor_sep._create_examples": [[192, 209], ["enumerate", "tokenization.convert_to_unicode", "tokenization.convert_to_unicode", "tokenization.convert_to_unicode", "examples.append", "str", "print", "print", "print", "print", "print", "main_bert.InputExample"], "methods", ["home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.tokenization.convert_to_unicode", "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.tokenization.convert_to_unicode", "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.tokenization.convert_to_unicode"], ["", "def", "_create_examples", "(", "self", ",", "lines", ",", "set_type", ")", ":", "\n", "        ", "\"\"\"Creates examples for the training and dev sets.\"\"\"", "\n", "examples", "=", "[", "]", "\n", "for", "(", "i", ",", "line", ")", "in", "enumerate", "(", "lines", ")", ":", "\n", "            ", "guid", "=", "\"%s-%s\"", "%", "(", "set_type", ",", "i", ")", "\n", "text_a", "=", "tokenization", ".", "convert_to_unicode", "(", "line", "[", "1", "]", ")", "\n", "text_b", "=", "tokenization", ".", "convert_to_unicode", "(", "line", "[", "2", "]", ")", "\n", "label", "=", "tokenization", ".", "convert_to_unicode", "(", "str", "(", "line", "[", "0", "]", ")", ")", "\n", "if", "i", "%", "1000", "==", "0", ":", "\n", "                ", "print", "(", "i", ")", "\n", "print", "(", "\"guid=\"", ",", "guid", ")", "\n", "print", "(", "\"text_a=\"", ",", "text_a", ")", "\n", "print", "(", "\"text_b=\"", ",", "text_b", ")", "\n", "print", "(", "\"label=\"", ",", "label", ")", "\n", "", "examples", ".", "append", "(", "\n", "InputExample", "(", "guid", "=", "guid", ",", "text_a", "=", "text_a", ",", "text_b", "=", "text_b", ",", "label", "=", "label", ")", ")", "\n", "", "return", "examples", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.main_bert.AGNewsProcessor_sep_aug.get_train_examples": [[213, 217], ["main_bert.AGNewsProcessor_sep_aug._create_examples", "pandas.read_csv", "os.path.join", "os.path.join", "os.path.join", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.main_bert.Dbpedia_Processor._create_examples"], ["def", "get_train_examples", "(", "self", ",", "data_dir", ")", ":", "\n", "        ", "\"\"\"See base class.\"\"\"", "\n", "train_data", "=", "pd", ".", "read_csv", "(", "os", ".", "path", ".", "join", "(", "data_dir", ",", "\"train.csv\"", ")", ",", "header", "=", "None", ")", ".", "values", "\n", "return", "self", ".", "_create_examples", "(", "train_data", ",", "\"train\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.main_bert.AGNewsProcessor_sep_aug.get_dev_examples": [[218, 222], ["main_bert.AGNewsProcessor_sep_aug._create_examples", "pandas.read_csv", "os.path.join", "os.path.join", "os.path.join", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.main_bert.Dbpedia_Processor._create_examples"], ["", "def", "get_dev_examples", "(", "self", ",", "data_dir", ")", ":", "\n", "        ", "\"\"\"See base class.\"\"\"", "\n", "dev_data", "=", "pd", ".", "read_csv", "(", "os", ".", "path", ".", "join", "(", "data_dir", ",", "\"test.csv\"", ")", ",", "header", "=", "None", ")", ".", "values", "\n", "return", "self", ".", "_create_examples", "(", "dev_data", ",", "\"dev\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.main_bert.AGNewsProcessor_sep_aug.get_labels": [[223, 226], ["None"], "methods", ["None"], ["", "def", "get_labels", "(", "self", ")", ":", "\n", "        ", "\"\"\"See base class.\"\"\"", "\n", "return", "[", "\"1\"", ",", "\"2\"", ",", "\"3\"", ",", "\"4\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.main_bert.AGNewsProcessor_sep_aug._create_examples": [[227, 252], ["enumerate", "len", "range", "random.randint", "random.randint", "random.randint", "random.randint", "tokenization.convert_to_unicode", "tokenization.convert_to_unicode", "tokenization.convert_to_unicode", "examples.append", "str", "print", "print", "print", "print", "print", "main_bert.InputExample"], "methods", ["home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.tokenization.convert_to_unicode", "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.tokenization.convert_to_unicode", "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.tokenization.convert_to_unicode"], ["", "def", "_create_examples", "(", "self", ",", "lines", ",", "set_type", ")", ":", "\n", "        ", "\"\"\"Creates examples for the training and dev sets.\"\"\"", "\n", "if", "set_type", "==", "\"train\"", ":", "\n", "            ", "scale", "=", "5", "\n", "", "else", ":", "\n", "            ", "scale", "=", "1", "\n", "", "examples", "=", "[", "]", "\n", "for", "(", "i", ",", "line", ")", "in", "enumerate", "(", "lines", ")", ":", "\n", "            ", "s", "=", "(", "line", "[", "1", "]", "+", "\" - \"", "+", "line", "[", "2", "]", ")", ".", "split", "(", ")", "\n", "l", "=", "len", "(", "s", ")", "\n", "for", "j", "in", "range", "(", "scale", ")", ":", "\n", "                ", "r", "=", "random", ".", "randint", "(", "1", ",", "l", "-", "1", ")", "\n", "guid", "=", "\"%s-%s\"", "%", "(", "set_type", ",", "i", "*", "scale", "+", "j", ")", "\n", "text_a", "=", "tokenization", ".", "convert_to_unicode", "(", "\" \"", ".", "join", "(", "s", "[", ":", "r", "]", ")", ")", "\n", "text_b", "=", "tokenization", ".", "convert_to_unicode", "(", "\" \"", ".", "join", "(", "s", "[", "r", ":", "]", ")", ")", "\n", "label", "=", "tokenization", ".", "convert_to_unicode", "(", "str", "(", "line", "[", "0", "]", ")", ")", "\n", "if", "i", "%", "1000", "==", "0", ":", "\n", "                    ", "print", "(", "i", ")", "\n", "print", "(", "\"guid=\"", ",", "guid", ")", "\n", "print", "(", "\"text_a=\"", ",", "text_a", ")", "\n", "print", "(", "\"text_b=\"", ",", "text_b", ")", "\n", "print", "(", "\"label=\"", ",", "label", ")", "\n", "", "examples", ".", "append", "(", "\n", "InputExample", "(", "guid", "=", "guid", ",", "text_a", "=", "text_a", ",", "text_b", "=", "text_b", ",", "label", "=", "label", ")", ")", "\n", "", "", "return", "examples", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.main_bert.IMDBProcessor.get_train_examples": [[256, 260], ["main_bert.IMDBProcessor._create_examples", "pandas.read_csv", "os.path.join", "os.path.join", "os.path.join", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.main_bert.Dbpedia_Processor._create_examples"], ["def", "get_train_examples", "(", "self", ",", "data_dir", ")", ":", "\n", "        ", "\"\"\"See base class.\"\"\"", "\n", "train_data", "=", "pd", ".", "read_csv", "(", "os", ".", "path", ".", "join", "(", "data_dir", ",", "\"train.csv\"", ")", ",", "header", "=", "None", ",", "sep", "=", "\"\\t\"", ")", ".", "values", "\n", "return", "self", ".", "_create_examples", "(", "train_data", ",", "\"train\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.main_bert.IMDBProcessor.get_dev_examples": [[261, 265], ["main_bert.IMDBProcessor._create_examples", "pandas.read_csv", "os.path.join", "os.path.join", "os.path.join", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.main_bert.Dbpedia_Processor._create_examples"], ["", "def", "get_dev_examples", "(", "self", ",", "data_dir", ")", ":", "\n", "        ", "\"\"\"See base class.\"\"\"", "\n", "dev_data", "=", "pd", ".", "read_csv", "(", "os", ".", "path", ".", "join", "(", "data_dir", ",", "\"test.csv\"", ")", ",", "header", "=", "None", ",", "sep", "=", "\"\\t\"", ")", ".", "values", "\n", "return", "self", ".", "_create_examples", "(", "dev_data", ",", "\"dev\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.main_bert.IMDBProcessor.get_labels": [[266, 269], ["None"], "methods", ["None"], ["", "def", "get_labels", "(", "self", ")", ":", "\n", "        ", "\"\"\"See base class.\"\"\"", "\n", "return", "[", "\"0\"", ",", "\"1\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.main_bert.IMDBProcessor._create_examples": [[270, 286], ["enumerate", "tokenization.convert_to_unicode", "tokenization.convert_to_unicode", "examples.append", "str", "str", "print", "print", "print", "print", "main_bert.InputExample"], "methods", ["home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.tokenization.convert_to_unicode", "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.tokenization.convert_to_unicode"], ["", "def", "_create_examples", "(", "self", ",", "lines", ",", "set_type", ")", ":", "\n", "        ", "\"\"\"Creates examples for the training and dev sets.\"\"\"", "\n", "examples", "=", "[", "]", "\n", "for", "(", "i", ",", "line", ")", "in", "enumerate", "(", "lines", ")", ":", "\n", "            ", "if", "i", ">", "1000", ":", "break", "\n", "guid", "=", "\"%s-%s\"", "%", "(", "set_type", ",", "i", ")", "\n", "text_a", "=", "tokenization", ".", "convert_to_unicode", "(", "str", "(", "line", "[", "1", "]", ")", ")", "\n", "label", "=", "tokenization", ".", "convert_to_unicode", "(", "str", "(", "line", "[", "0", "]", ")", ")", "\n", "if", "i", "%", "1000", "==", "0", ":", "\n", "                ", "print", "(", "i", ")", "\n", "print", "(", "\"guid=\"", ",", "guid", ")", "\n", "print", "(", "\"text_a=\"", ",", "text_a", ")", "\n", "print", "(", "\"label=\"", ",", "label", ")", "\n", "", "examples", ".", "append", "(", "\n", "InputExample", "(", "guid", "=", "guid", ",", "text_a", "=", "text_a", ",", "text_b", "=", "None", ",", "label", "=", "label", ")", ")", "\n", "", "return", "examples", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.main_bert.IMDBProcessor_sep.get_train_examples": [[291, 295], ["main_bert.IMDBProcessor_sep._create_examples", "pandas.read_csv", "os.path.join", "os.path.join", "os.path.join", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.main_bert.Dbpedia_Processor._create_examples"], ["def", "get_train_examples", "(", "self", ",", "data_dir", ")", ":", "\n", "        ", "\"\"\"See base class.\"\"\"", "\n", "train_data", "=", "pd", ".", "read_csv", "(", "os", ".", "path", ".", "join", "(", "data_dir", ",", "\"train.csv\"", ")", ",", "header", "=", "None", ",", "sep", "=", "\"\\t\"", ")", ".", "values", "\n", "return", "self", ".", "_create_examples", "(", "train_data", ",", "\"train\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.main_bert.IMDBProcessor_sep.get_dev_examples": [[296, 300], ["main_bert.IMDBProcessor_sep._create_examples", "pandas.read_csv", "os.path.join", "os.path.join", "os.path.join", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.main_bert.Dbpedia_Processor._create_examples"], ["", "def", "get_dev_examples", "(", "self", ",", "data_dir", ")", ":", "\n", "        ", "\"\"\"See base class.\"\"\"", "\n", "dev_data", "=", "pd", ".", "read_csv", "(", "os", ".", "path", ".", "join", "(", "data_dir", ",", "\"test.csv\"", ")", ",", "header", "=", "None", ",", "sep", "=", "\"\\t\"", ")", ".", "values", "\n", "return", "self", ".", "_create_examples", "(", "dev_data", ",", "\"dev\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.main_bert.IMDBProcessor_sep.get_labels": [[301, 304], ["None"], "methods", ["None"], ["", "def", "get_labels", "(", "self", ")", ":", "\n", "        ", "\"\"\"See base class.\"\"\"", "\n", "return", "[", "\"0\"", ",", "\"1\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.main_bert.IMDBProcessor_sep._create_examples": [[305, 327], ["enumerate", "line[].split", "len", "range", "random.randint", "random.randint", "random.randint", "random.randint", "tokenization.convert_to_unicode", "tokenization.convert_to_unicode", "tokenization.convert_to_unicode", "examples.append", "str", "print", "print", "print", "print", "print", "main_bert.InputExample"], "methods", ["home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.tokenization.convert_to_unicode", "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.tokenization.convert_to_unicode", "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.tokenization.convert_to_unicode"], ["", "def", "_create_examples", "(", "self", ",", "lines", ",", "set_type", ")", ":", "\n", "        ", "\"\"\"Creates examples for the training and dev sets.\"\"\"", "\n", "scale", "=", "1", "\n", "examples", "=", "[", "]", "\n", "for", "(", "i", ",", "line", ")", "in", "enumerate", "(", "lines", ")", ":", "\n", "            ", "s", "=", "(", "line", "[", "1", "]", ")", ".", "split", "(", ")", "\n", "l", "=", "len", "(", "s", ")", "\n", "for", "j", "in", "range", "(", "scale", ")", ":", "\n", "                ", "r", "=", "random", ".", "randint", "(", "1", ",", "l", "-", "1", ")", "\n", "guid", "=", "\"%s-%s\"", "%", "(", "set_type", ",", "i", "*", "scale", "+", "j", ")", "\n", "text_a", "=", "tokenization", ".", "convert_to_unicode", "(", "\" \"", ".", "join", "(", "s", "[", ":", "r", "]", ")", ")", "\n", "text_b", "=", "tokenization", ".", "convert_to_unicode", "(", "\" \"", ".", "join", "(", "s", "[", "r", ":", "]", ")", ")", "\n", "label", "=", "tokenization", ".", "convert_to_unicode", "(", "str", "(", "line", "[", "0", "]", ")", ")", "\n", "if", "i", "%", "1000", "==", "0", ":", "\n", "                    ", "print", "(", "i", ")", "\n", "print", "(", "\"guid=\"", ",", "guid", ")", "\n", "print", "(", "\"text_a=\"", ",", "text_a", ")", "\n", "print", "(", "\"text_b=\"", ",", "text_b", ")", "\n", "print", "(", "\"label=\"", ",", "label", ")", "\n", "", "examples", ".", "append", "(", "\n", "InputExample", "(", "guid", "=", "guid", ",", "text_a", "=", "text_a", ",", "text_b", "=", "text_b", ",", "label", "=", "label", ")", ")", "\n", "", "", "return", "examples", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.main_bert.IMDBProcessor_sep_aug.get_train_examples": [[332, 336], ["main_bert.IMDBProcessor_sep_aug._create_examples", "pandas.read_csv", "os.path.join", "os.path.join", "os.path.join", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.main_bert.Dbpedia_Processor._create_examples"], ["def", "get_train_examples", "(", "self", ",", "data_dir", ")", ":", "\n", "        ", "\"\"\"See base class.\"\"\"", "\n", "train_data", "=", "pd", ".", "read_csv", "(", "os", ".", "path", ".", "join", "(", "data_dir", ",", "\"train.csv\"", ")", ",", "header", "=", "None", ",", "sep", "=", "\"\\t\"", ")", ".", "values", "\n", "return", "self", ".", "_create_examples", "(", "train_data", ",", "\"train\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.main_bert.IMDBProcessor_sep_aug.get_dev_examples": [[337, 341], ["main_bert.IMDBProcessor_sep_aug._create_examples", "pandas.read_csv", "os.path.join", "os.path.join", "os.path.join", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.main_bert.Dbpedia_Processor._create_examples"], ["", "def", "get_dev_examples", "(", "self", ",", "data_dir", ")", ":", "\n", "        ", "\"\"\"See base class.\"\"\"", "\n", "dev_data", "=", "pd", ".", "read_csv", "(", "os", ".", "path", ".", "join", "(", "data_dir", ",", "\"test.csv\"", ")", ",", "header", "=", "None", ",", "sep", "=", "\"\\t\"", ")", ".", "values", "\n", "return", "self", ".", "_create_examples", "(", "dev_data", ",", "\"dev\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.main_bert.IMDBProcessor_sep_aug.get_labels": [[342, 345], ["None"], "methods", ["None"], ["", "def", "get_labels", "(", "self", ")", ":", "\n", "        ", "\"\"\"See base class.\"\"\"", "\n", "return", "[", "\"0\"", ",", "\"1\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.main_bert.IMDBProcessor_sep_aug._create_examples": [[346, 373], ["enumerate", "line[].split", "len", "range", "random.randint", "random.randint", "random.randint", "random.randint", "tokenization.convert_to_unicode", "tokenization.convert_to_unicode", "tokenization.convert_to_unicode", "examples.append", "str", "print", "print", "print", "print", "print", "main_bert.InputExample"], "methods", ["home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.tokenization.convert_to_unicode", "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.tokenization.convert_to_unicode", "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.tokenization.convert_to_unicode"], ["", "def", "_create_examples", "(", "self", ",", "lines", ",", "set_type", ")", ":", "\n", "        ", "\"\"\"Creates examples for the training and dev sets.\"\"\"", "\n", "if", "set_type", "==", "\"train\"", ":", "\n", "            ", "scale", "=", "5", "\n", "", "else", ":", "\n", "            ", "scale", "=", "1", "\n", "", "examples", "=", "[", "]", "\n", "for", "(", "i", ",", "line", ")", "in", "enumerate", "(", "lines", ")", ":", "\n", "            ", "if", "i", "==", "100", "and", "set_type", "==", "\"train\"", ":", "break", "\n", "if", "i", "==", "1009", "and", "set_type", "==", "\"dev\"", ":", "break", "\n", "s", "=", "(", "line", "[", "1", "]", ")", ".", "split", "(", ")", "\n", "l", "=", "len", "(", "s", ")", "\n", "for", "j", "in", "range", "(", "scale", ")", ":", "\n", "                ", "r", "=", "random", ".", "randint", "(", "1", ",", "l", "-", "1", ")", "\n", "guid", "=", "\"%s-%s\"", "%", "(", "set_type", ",", "i", "*", "scale", "+", "j", ")", "\n", "text_a", "=", "tokenization", ".", "convert_to_unicode", "(", "\" \"", ".", "join", "(", "s", "[", ":", "r", "]", ")", ")", "\n", "text_b", "=", "tokenization", ".", "convert_to_unicode", "(", "\" \"", ".", "join", "(", "s", "[", "r", ":", "]", ")", ")", "\n", "label", "=", "tokenization", ".", "convert_to_unicode", "(", "str", "(", "line", "[", "0", "]", ")", ")", "\n", "if", "i", "%", "1000", "==", "0", ":", "\n", "                    ", "print", "(", "i", ")", "\n", "print", "(", "\"guid=\"", ",", "guid", ")", "\n", "print", "(", "\"text_a=\"", ",", "text_a", ")", "\n", "print", "(", "\"text_b=\"", ",", "text_b", ")", "\n", "print", "(", "\"label=\"", ",", "label", ")", "\n", "", "examples", ".", "append", "(", "\n", "InputExample", "(", "guid", "=", "guid", ",", "text_a", "=", "text_a", ",", "text_b", "=", "text_b", ",", "label", "=", "label", ")", ")", "\n", "", "", "return", "examples", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.main_bert.Yelp_p_Processor.get_train_examples": [[378, 382], ["main_bert.Yelp_p_Processor._create_examples", "pandas.read_csv", "os.path.join", "os.path.join", "os.path.join", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.main_bert.Dbpedia_Processor._create_examples"], ["def", "get_train_examples", "(", "self", ",", "data_dir", ")", ":", "\n", "        ", "\"\"\"See base class.\"\"\"", "\n", "train_data", "=", "pd", ".", "read_csv", "(", "os", ".", "path", ".", "join", "(", "data_dir", ",", "\"train.csv\"", ")", ",", "header", "=", "None", ",", "sep", "=", "\",\"", ")", ".", "values", "\n", "return", "self", ".", "_create_examples", "(", "train_data", ",", "\"train\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.main_bert.Yelp_p_Processor.get_dev_examples": [[383, 387], ["main_bert.Yelp_p_Processor._create_examples", "pandas.read_csv", "os.path.join", "os.path.join", "os.path.join", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.main_bert.Dbpedia_Processor._create_examples"], ["", "def", "get_dev_examples", "(", "self", ",", "data_dir", ")", ":", "\n", "        ", "\"\"\"See base class.\"\"\"", "\n", "dev_data", "=", "pd", ".", "read_csv", "(", "os", ".", "path", ".", "join", "(", "data_dir", ",", "\"test.csv\"", ")", ",", "header", "=", "None", ",", "sep", "=", "\",\"", ")", ".", "values", "\n", "return", "self", ".", "_create_examples", "(", "dev_data", ",", "\"dev\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.main_bert.Yelp_p_Processor.get_labels": [[388, 391], ["None"], "methods", ["None"], ["", "def", "get_labels", "(", "self", ")", ":", "\n", "        ", "\"\"\"See base class.\"\"\"", "\n", "return", "[", "\"1\"", ",", "\"2\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.main_bert.Yelp_p_Processor._create_examples": [[392, 408], ["enumerate", "tokenization.convert_to_unicode", "tokenization.convert_to_unicode", "examples.append", "str", "str", "print", "print", "print", "print", "main_bert.InputExample"], "methods", ["home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.tokenization.convert_to_unicode", "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.tokenization.convert_to_unicode"], ["", "def", "_create_examples", "(", "self", ",", "lines", ",", "set_type", ")", ":", "\n", "        ", "\"\"\"Creates examples for the training and dev sets.\"\"\"", "\n", "examples", "=", "[", "]", "\n", "for", "(", "i", ",", "line", ")", "in", "enumerate", "(", "lines", ")", ":", "\n", "#if i>147:break", "\n", "            ", "guid", "=", "\"%s-%s\"", "%", "(", "set_type", ",", "i", ")", "\n", "text_a", "=", "tokenization", ".", "convert_to_unicode", "(", "str", "(", "line", "[", "1", "]", ")", ")", "\n", "label", "=", "tokenization", ".", "convert_to_unicode", "(", "str", "(", "line", "[", "0", "]", ")", ")", "\n", "if", "i", "%", "1000", "==", "0", ":", "\n", "                ", "print", "(", "i", ")", "\n", "print", "(", "\"guid=\"", ",", "guid", ")", "\n", "print", "(", "\"text_a=\"", ",", "text_a", ")", "\n", "print", "(", "\"label=\"", ",", "label", ")", "\n", "", "examples", ".", "append", "(", "\n", "InputExample", "(", "guid", "=", "guid", ",", "text_a", "=", "text_a", ",", "text_b", "=", "None", ",", "label", "=", "label", ")", ")", "\n", "", "return", "examples", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.main_bert.Yelp_f_Processor.get_train_examples": [[412, 416], ["main_bert.Yelp_f_Processor._create_examples", "pandas.read_csv", "os.path.join", "os.path.join", "os.path.join", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.main_bert.Dbpedia_Processor._create_examples"], ["def", "get_train_examples", "(", "self", ",", "data_dir", ")", ":", "\n", "        ", "\"\"\"See base class.\"\"\"", "\n", "train_data", "=", "pd", ".", "read_csv", "(", "os", ".", "path", ".", "join", "(", "data_dir", ",", "\"train.csv\"", ")", ",", "header", "=", "None", ",", "sep", "=", "\",\"", ")", ".", "values", "\n", "return", "self", ".", "_create_examples", "(", "train_data", ",", "\"train\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.main_bert.Yelp_f_Processor.get_dev_examples": [[417, 421], ["main_bert.Yelp_f_Processor._create_examples", "pandas.read_csv", "os.path.join", "os.path.join", "os.path.join", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.main_bert.Dbpedia_Processor._create_examples"], ["", "def", "get_dev_examples", "(", "self", ",", "data_dir", ")", ":", "\n", "        ", "\"\"\"See base class.\"\"\"", "\n", "dev_data", "=", "pd", ".", "read_csv", "(", "os", ".", "path", ".", "join", "(", "data_dir", ",", "\"test.csv\"", ")", ",", "header", "=", "None", ",", "sep", "=", "\",\"", ")", ".", "values", "\n", "return", "self", ".", "_create_examples", "(", "dev_data", ",", "\"dev\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.main_bert.Yelp_f_Processor.get_labels": [[422, 425], ["None"], "methods", ["None"], ["", "def", "get_labels", "(", "self", ")", ":", "\n", "        ", "\"\"\"See base class.\"\"\"", "\n", "return", "[", "\"1\"", ",", "\"2\"", ",", "\"3\"", ",", "\"4\"", ",", "\"5\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.main_bert.Yelp_f_Processor._create_examples": [[426, 442], ["enumerate", "tokenization.convert_to_unicode", "tokenization.convert_to_unicode", "examples.append", "str", "str", "print", "print", "print", "print", "main_bert.InputExample"], "methods", ["home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.tokenization.convert_to_unicode", "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.tokenization.convert_to_unicode"], ["", "def", "_create_examples", "(", "self", ",", "lines", ",", "set_type", ")", ":", "\n", "        ", "\"\"\"Creates examples for the training and dev sets.\"\"\"", "\n", "examples", "=", "[", "]", "\n", "for", "(", "i", ",", "line", ")", "in", "enumerate", "(", "lines", ")", ":", "\n", "#if i>147:break", "\n", "            ", "guid", "=", "\"%s-%s\"", "%", "(", "set_type", ",", "i", ")", "\n", "text_a", "=", "tokenization", ".", "convert_to_unicode", "(", "str", "(", "line", "[", "1", "]", ")", ")", "\n", "label", "=", "tokenization", ".", "convert_to_unicode", "(", "str", "(", "line", "[", "0", "]", ")", ")", "\n", "if", "i", "%", "1000", "==", "0", ":", "\n", "                ", "print", "(", "i", ")", "\n", "print", "(", "\"guid=\"", ",", "guid", ")", "\n", "print", "(", "\"text_a=\"", ",", "text_a", ")", "\n", "print", "(", "\"label=\"", ",", "label", ")", "\n", "", "examples", ".", "append", "(", "\n", "InputExample", "(", "guid", "=", "guid", ",", "text_a", "=", "text_a", ",", "text_b", "=", "None", ",", "label", "=", "label", ")", ")", "\n", "", "return", "examples", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.main_bert.Yahoo_Processor.get_train_examples": [[447, 451], ["main_bert.Yahoo_Processor._create_examples", "pandas.read_csv", "os.path.join", "os.path.join", "os.path.join", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.main_bert.Dbpedia_Processor._create_examples"], ["def", "get_train_examples", "(", "self", ",", "data_dir", ")", ":", "\n", "        ", "\"\"\"See base class.\"\"\"", "\n", "train_data", "=", "pd", ".", "read_csv", "(", "os", ".", "path", ".", "join", "(", "data_dir", ",", "\"train.csv\"", ")", ",", "header", "=", "None", ",", "sep", "=", "\",\"", ")", ".", "values", "\n", "return", "self", ".", "_create_examples", "(", "train_data", ",", "\"train\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.main_bert.Yahoo_Processor.get_dev_examples": [[452, 456], ["main_bert.Yahoo_Processor._create_examples", "pandas.read_csv", "os.path.join", "os.path.join", "os.path.join", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.main_bert.Dbpedia_Processor._create_examples"], ["", "def", "get_dev_examples", "(", "self", ",", "data_dir", ")", ":", "\n", "        ", "\"\"\"See base class.\"\"\"", "\n", "dev_data", "=", "pd", ".", "read_csv", "(", "os", ".", "path", ".", "join", "(", "data_dir", ",", "\"test.csv\"", ")", ",", "header", "=", "None", ",", "sep", "=", "\",\"", ")", ".", "values", "\n", "return", "self", ".", "_create_examples", "(", "dev_data", ",", "\"dev\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.main_bert.Yahoo_Processor.get_labels": [[457, 460], ["None"], "methods", ["None"], ["", "def", "get_labels", "(", "self", ")", ":", "\n", "        ", "\"\"\"See base class.\"\"\"", "\n", "return", "[", "\"1\"", ",", "\"2\"", ",", "\"3\"", ",", "\"4\"", ",", "\"5\"", ",", "\"6\"", ",", "\"7\"", ",", "\"8\"", ",", "\"9\"", ",", "\"10\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.main_bert.Yahoo_Processor._create_examples": [[461, 479], ["enumerate", "tokenization.convert_to_unicode", "tokenization.convert_to_unicode", "tokenization.convert_to_unicode", "examples.append", "str", "str", "print", "print", "print", "print", "print", "main_bert.InputExample", "str", "str"], "methods", ["home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.tokenization.convert_to_unicode", "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.tokenization.convert_to_unicode", "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.tokenization.convert_to_unicode"], ["", "def", "_create_examples", "(", "self", ",", "lines", ",", "set_type", ")", ":", "\n", "        ", "\"\"\"Creates examples for the training and dev sets.\"\"\"", "\n", "examples", "=", "[", "]", "\n", "for", "(", "i", ",", "line", ")", "in", "enumerate", "(", "lines", ")", ":", "\n", "#if i>147:break", "\n", "            ", "guid", "=", "\"%s-%s\"", "%", "(", "set_type", ",", "i", ")", "\n", "text_a", "=", "tokenization", ".", "convert_to_unicode", "(", "str", "(", "line", "[", "1", "]", ")", "+", "\" \"", "+", "str", "(", "line", "[", "2", "]", ")", ")", "\n", "text_b", "=", "tokenization", ".", "convert_to_unicode", "(", "str", "(", "line", "[", "3", "]", ")", ")", "\n", "label", "=", "tokenization", ".", "convert_to_unicode", "(", "str", "(", "line", "[", "0", "]", ")", ")", "\n", "if", "i", "%", "1000", "==", "0", ":", "\n", "                ", "print", "(", "i", ")", "\n", "print", "(", "\"guid=\"", ",", "guid", ")", "\n", "print", "(", "\"text_a=\"", ",", "text_a", ")", "\n", "print", "(", "\"text_b=\"", ",", "text_b", ")", "\n", "print", "(", "\"label=\"", ",", "label", ")", "\n", "", "examples", ".", "append", "(", "\n", "InputExample", "(", "guid", "=", "guid", ",", "text_a", "=", "text_a", ",", "text_b", "=", "text_b", ",", "label", "=", "label", ")", ")", "\n", "", "return", "examples", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.main_bert.Trec_Processor.get_train_examples": [[483, 487], ["main_bert.Trec_Processor._create_examples", "pandas.read_csv", "os.path.join", "os.path.join", "os.path.join", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.main_bert.Dbpedia_Processor._create_examples"], ["def", "get_train_examples", "(", "self", ",", "data_dir", ")", ":", "\n", "        ", "\"\"\"See base class.\"\"\"", "\n", "train_data", "=", "pd", ".", "read_csv", "(", "os", ".", "path", ".", "join", "(", "data_dir", ",", "\"train.csv\"", ")", ",", "header", "=", "None", ",", "sep", "=", "\"\\t\"", ")", ".", "values", "\n", "return", "self", ".", "_create_examples", "(", "train_data", ",", "\"train\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.main_bert.Trec_Processor.get_dev_examples": [[488, 492], ["main_bert.Trec_Processor._create_examples", "pandas.read_csv", "os.path.join", "os.path.join", "os.path.join", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.main_bert.Dbpedia_Processor._create_examples"], ["", "def", "get_dev_examples", "(", "self", ",", "data_dir", ")", ":", "\n", "        ", "\"\"\"See base class.\"\"\"", "\n", "dev_data", "=", "pd", ".", "read_csv", "(", "os", ".", "path", ".", "join", "(", "data_dir", ",", "\"test.csv\"", ")", ",", "header", "=", "None", ",", "sep", "=", "\"\\t\"", ")", ".", "values", "\n", "return", "self", ".", "_create_examples", "(", "dev_data", ",", "\"dev\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.main_bert.Trec_Processor.get_labels": [[493, 496], ["None"], "methods", ["None"], ["", "def", "get_labels", "(", "self", ")", ":", "\n", "        ", "\"\"\"See base class.\"\"\"", "\n", "return", "[", "'LOC'", ",", "'NUM'", ",", "'HUM'", ",", "'ENTY'", ",", "'ABBR'", ",", "'DESC'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.main_bert.Trec_Processor._create_examples": [[497, 513], ["enumerate", "tokenization.convert_to_unicode", "tokenization.convert_to_unicode", "examples.append", "str", "str", "print", "print", "print", "print", "main_bert.InputExample"], "methods", ["home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.tokenization.convert_to_unicode", "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.tokenization.convert_to_unicode"], ["", "def", "_create_examples", "(", "self", ",", "lines", ",", "set_type", ")", ":", "\n", "        ", "\"\"\"Creates examples for the training and dev sets.\"\"\"", "\n", "examples", "=", "[", "]", "\n", "for", "(", "i", ",", "line", ")", "in", "enumerate", "(", "lines", ")", ":", "\n", "#if i>147:break", "\n", "            ", "guid", "=", "\"%s-%s\"", "%", "(", "set_type", ",", "i", ")", "\n", "text_a", "=", "tokenization", ".", "convert_to_unicode", "(", "str", "(", "line", "[", "1", "]", ")", ")", "\n", "label", "=", "tokenization", ".", "convert_to_unicode", "(", "str", "(", "line", "[", "0", "]", ")", ")", "\n", "if", "i", "%", "1000", "==", "0", ":", "\n", "                ", "print", "(", "i", ")", "\n", "print", "(", "\"guid=\"", ",", "guid", ")", "\n", "print", "(", "\"text_a=\"", ",", "text_a", ")", "\n", "print", "(", "\"label=\"", ",", "label", ")", "\n", "", "examples", ".", "append", "(", "\n", "InputExample", "(", "guid", "=", "guid", ",", "text_a", "=", "text_a", ",", "text_b", "=", "None", ",", "label", "=", "label", ")", ")", "\n", "", "return", "examples", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.main_bert.Dbpedia_Processor.get_train_examples": [[517, 521], ["main_bert.Dbpedia_Processor._create_examples", "pandas.read_csv", "os.path.join", "os.path.join", "os.path.join", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.main_bert.Dbpedia_Processor._create_examples"], ["def", "get_train_examples", "(", "self", ",", "data_dir", ")", ":", "\n", "        ", "\"\"\"See base class.\"\"\"", "\n", "train_data", "=", "pd", ".", "read_csv", "(", "os", ".", "path", ".", "join", "(", "data_dir", ",", "\"train.csv\"", ")", ",", "header", "=", "None", ",", "sep", "=", "\",\"", ")", ".", "values", "\n", "return", "self", ".", "_create_examples", "(", "train_data", ",", "\"train\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.main_bert.Dbpedia_Processor.get_dev_examples": [[522, 526], ["main_bert.Dbpedia_Processor._create_examples", "pandas.read_csv", "os.path.join", "os.path.join", "os.path.join", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.main_bert.Dbpedia_Processor._create_examples"], ["", "def", "get_dev_examples", "(", "self", ",", "data_dir", ")", ":", "\n", "        ", "\"\"\"See base class.\"\"\"", "\n", "dev_data", "=", "pd", ".", "read_csv", "(", "os", ".", "path", ".", "join", "(", "data_dir", ",", "\"test.csv\"", ")", ",", "header", "=", "None", ",", "sep", "=", "\",\"", ")", ".", "values", "\n", "return", "self", ".", "_create_examples", "(", "dev_data", ",", "\"dev\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.main_bert.Dbpedia_Processor.get_labels": [[527, 530], ["None"], "methods", ["None"], ["", "def", "get_labels", "(", "self", ")", ":", "\n", "        ", "\"\"\"See base class.\"\"\"", "\n", "return", "[", "'1'", ",", "'2'", ",", "'3'", ",", "'4'", ",", "'5'", ",", "'6'", ",", "'7'", ",", "'8'", ",", "'9'", ",", "'10'", ",", "'11'", ",", "'12'", ",", "'13'", ",", "'14'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.main_bert.Dbpedia_Processor._create_examples": [[531, 546], ["enumerate", "tokenization.convert_to_unicode", "tokenization.convert_to_unicode", "examples.append", "str", "print", "print", "print", "print", "main_bert.InputExample", "str", "str"], "methods", ["home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.tokenization.convert_to_unicode", "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.tokenization.convert_to_unicode"], ["", "def", "_create_examples", "(", "self", ",", "lines", ",", "set_type", ")", ":", "\n", "        ", "\"\"\"Creates examples for the training and dev sets.\"\"\"", "\n", "examples", "=", "[", "]", "\n", "for", "(", "i", ",", "line", ")", "in", "enumerate", "(", "lines", ")", ":", "\n", "            ", "guid", "=", "\"%s-%s\"", "%", "(", "set_type", ",", "i", ")", "\n", "text_a", "=", "tokenization", ".", "convert_to_unicode", "(", "str", "(", "line", "[", "1", "]", ")", "+", "\" \"", "+", "str", "(", "line", "[", "2", "]", ")", ")", "\n", "label", "=", "tokenization", ".", "convert_to_unicode", "(", "str", "(", "line", "[", "0", "]", ")", ")", "\n", "if", "i", "%", "1000", "==", "0", ":", "\n", "                ", "print", "(", "i", ")", "\n", "print", "(", "\"guid=\"", ",", "guid", ")", "\n", "print", "(", "\"text_a=\"", ",", "text_a", ")", "\n", "print", "(", "\"label=\"", ",", "label", ")", "\n", "", "examples", ".", "append", "(", "\n", "InputExample", "(", "guid", "=", "guid", ",", "text_a", "=", "text_a", ",", "text_b", "=", "None", ",", "label", "=", "label", ")", ")", "\n", "", "return", "examples", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.main_bert.metric": [[44, 47], ["log_metric"], "function", ["None"], ["def", "metric", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "if", "True", "==", "0", ":", "\n", "        ", "log_metric", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.main_bert.convert_examples_to_features": [[548, 643], ["enumerate", "enumerate", "tokenizer.tokenize", "tokens.append", "segment_ids.append", "tokens.append", "segment_ids.append", "tokenizer.convert_tokens_to_ids", "features.append", "tokenizer.tokenize", "main_bert._truncate_seq_pair", "tokens.append", "segment_ids.append", "tokens.append", "segment_ids.append", "len", "len", "tokenizer.convert_tokens_to_ids.append", "input_mask.append", "segment_ids.append", "len", "len", "len", "logger.info", "logger.info", "logger.info", "logger.info", "logger.info", "logger.info", "logger.info", "main_bert.InputFeatures", "len", "tokens.append", "segment_ids.append", "tokenization.printable_text", "str", "str", "str"], "function", ["home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.tokenization.WordpieceTokenizer.tokenize", "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.tokenization.convert_tokens_to_ids", "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.tokenization.WordpieceTokenizer.tokenize", "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.main_bert._truncate_seq_pair", "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.tokenization.printable_text"], ["", "", "def", "convert_examples_to_features", "(", "examples", ",", "label_list", ",", "max_seq_length", ",", "tokenizer", ")", ":", "\n", "    ", "\"\"\"Loads a data file into a list of `InputBatch`s.\"\"\"", "\n", "\n", "label_map", "=", "{", "}", "\n", "for", "(", "i", ",", "label", ")", "in", "enumerate", "(", "label_list", ")", ":", "\n", "        ", "label_map", "[", "label", "]", "=", "i", "\n", "\n", "", "features", "=", "[", "]", "\n", "for", "(", "ex_index", ",", "example", ")", "in", "enumerate", "(", "examples", ")", ":", "\n", "        ", "tokens_a", "=", "tokenizer", ".", "tokenize", "(", "example", ".", "text_a", ")", "\n", "\n", "tokens_b", "=", "None", "\n", "if", "example", ".", "text_b", ":", "\n", "            ", "tokens_b", "=", "tokenizer", ".", "tokenize", "(", "example", ".", "text_b", ")", "\n", "\n", "", "if", "tokens_b", ":", "\n", "# Modifies `tokens_a` and `tokens_b` in place so that the total", "\n", "# length is less than the specified length.", "\n", "# Account for [CLS], [SEP], [SEP] with \"- 3\"", "\n", "            ", "_truncate_seq_pair", "(", "tokens_a", ",", "tokens_b", ",", "max_seq_length", "-", "3", ")", "\n", "", "else", ":", "\n", "# Account for [CLS] and [SEP] with \"- 2\"", "\n", "            ", "if", "len", "(", "tokens_a", ")", ">", "max_seq_length", "-", "2", ":", "\n", "                ", "tokens_a", "=", "tokens_a", "[", "0", ":", "(", "max_seq_length", "-", "2", ")", "]", "\n", "\n", "# The convention in BERT is:", "\n", "# (a) For sequence pairs:", "\n", "#  tokens:   [CLS] is this jack ##son ##ville ? [SEP] no it is not . [SEP]", "\n", "#  type_ids: 0   0  0    0    0     0       0 0    1  1  1  1   1 1", "\n", "# (b) For single sequences:", "\n", "#  tokens:   [CLS] the dog is hairy . [SEP]", "\n", "#  type_ids: 0   0   0   0  0     0 0", "\n", "#", "\n", "# Where \"type_ids\" are used to indicate whether this is the first", "\n", "# sequence or the second sequence. The embedding vectors for `type=0` and", "\n", "# `type=1` were learned during pre-training and are added to the wordpiece", "\n", "# embedding vector (and position vector). This is not *strictly* necessary", "\n", "# since the [SEP] token unambigiously separates the sequences, but it makes", "\n", "# it easier for the model to learn the concept of sequences.", "\n", "#", "\n", "# For classification tasks, the first vector (corresponding to [CLS]) is", "\n", "# used as as the \"sentence vector\". Note that this only makes sense because", "\n", "# the entire model is fine-tuned.", "\n", "", "", "tokens", "=", "[", "]", "\n", "segment_ids", "=", "[", "]", "\n", "tokens", ".", "append", "(", "\"[CLS]\"", ")", "\n", "segment_ids", ".", "append", "(", "0", ")", "\n", "for", "token", "in", "tokens_a", ":", "\n", "            ", "tokens", ".", "append", "(", "token", ")", "\n", "segment_ids", ".", "append", "(", "0", ")", "\n", "", "tokens", ".", "append", "(", "\"[SEP]\"", ")", "\n", "segment_ids", ".", "append", "(", "0", ")", "\n", "\n", "if", "tokens_b", ":", "\n", "            ", "for", "token", "in", "tokens_b", ":", "\n", "                ", "tokens", ".", "append", "(", "token", ")", "\n", "segment_ids", ".", "append", "(", "1", ")", "\n", "", "tokens", ".", "append", "(", "\"[SEP]\"", ")", "\n", "segment_ids", ".", "append", "(", "1", ")", "\n", "\n", "", "input_ids", "=", "tokenizer", ".", "convert_tokens_to_ids", "(", "tokens", ")", "\n", "\n", "# The mask has 1 for real tokens and 0 for padding tokens. Only real", "\n", "# tokens are attended to.", "\n", "input_mask", "=", "[", "1", "]", "*", "len", "(", "input_ids", ")", "\n", "\n", "# Zero-pad up to the sequence length.", "\n", "while", "len", "(", "input_ids", ")", "<", "max_seq_length", ":", "\n", "            ", "input_ids", ".", "append", "(", "0", ")", "\n", "input_mask", ".", "append", "(", "0", ")", "\n", "segment_ids", ".", "append", "(", "0", ")", "\n", "\n", "", "assert", "len", "(", "input_ids", ")", "==", "max_seq_length", "\n", "assert", "len", "(", "input_mask", ")", "==", "max_seq_length", "\n", "assert", "len", "(", "segment_ids", ")", "==", "max_seq_length", "\n", "\n", "label_id", "=", "label_map", "[", "example", ".", "label", "]", "\n", "if", "ex_index", "<", "5", ":", "\n", "            ", "logger", ".", "info", "(", "\"*** Example ***\"", ")", "\n", "logger", ".", "info", "(", "\"guid: %s\"", "%", "(", "example", ".", "guid", ")", ")", "\n", "logger", ".", "info", "(", "\"tokens: %s\"", "%", "\" \"", ".", "join", "(", "\n", "[", "tokenization", ".", "printable_text", "(", "x", ")", "for", "x", "in", "tokens", "]", ")", ")", "\n", "logger", ".", "info", "(", "\"input_ids: %s\"", "%", "\" \"", ".", "join", "(", "[", "str", "(", "x", ")", "for", "x", "in", "input_ids", "]", ")", ")", "\n", "logger", ".", "info", "(", "\"input_mask: %s\"", "%", "\" \"", ".", "join", "(", "[", "str", "(", "x", ")", "for", "x", "in", "input_mask", "]", ")", ")", "\n", "logger", ".", "info", "(", "\n", "\"segment_ids: %s\"", "%", "\" \"", ".", "join", "(", "[", "str", "(", "x", ")", "for", "x", "in", "segment_ids", "]", ")", ")", "\n", "logger", ".", "info", "(", "\"label: %s (id = %d)\"", "%", "(", "example", ".", "label", ",", "label_id", ")", ")", "\n", "\n", "", "features", ".", "append", "(", "\n", "InputFeatures", "(", "\n", "input_ids", "=", "input_ids", ",", "\n", "input_mask", "=", "input_mask", ",", "\n", "segment_ids", "=", "segment_ids", ",", "\n", "label_id", "=", "label_id", ")", ")", "\n", "", "return", "features", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.main_bert._truncate_seq_pair": [[645, 660], ["len", "len", "len", "len", "tokens_a.pop", "tokens_b.pop"], "function", ["None"], ["", "def", "_truncate_seq_pair", "(", "tokens_a", ",", "tokens_b", ",", "max_length", ")", ":", "\n", "    ", "\"\"\"Truncates a sequence pair in place to the maximum length.\"\"\"", "\n", "\n", "# This is a simple heuristic which will always truncate the longer sequence", "\n", "# one token at a time. This makes more sense than truncating an equal percent", "\n", "# of tokens from each, since if one sequence is very short then each token", "\n", "# that's truncated likely contains more information than a longer sequence.", "\n", "while", "True", ":", "\n", "        ", "total_length", "=", "len", "(", "tokens_a", ")", "+", "len", "(", "tokens_b", ")", "\n", "if", "total_length", "<=", "max_length", ":", "\n", "            ", "break", "\n", "", "if", "len", "(", "tokens_a", ")", ">", "len", "(", "tokens_b", ")", ":", "\n", "            ", "tokens_a", ".", "pop", "(", ")", "\n", "", "else", ":", "\n", "            ", "tokens_b", ".", "pop", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.main_bert.accuracy": [[661, 664], ["numpy.argmax", "numpy.sum"], "function", ["None"], ["", "", "", "def", "accuracy", "(", "out", ",", "labels", ")", ":", "\n", "    ", "outputs", "=", "np", ".", "argmax", "(", "out", ",", "axis", "=", "1", ")", "\n", "return", "np", ".", "sum", "(", "outputs", "==", "labels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.main_bert.parse_args": [[666, 685], ["parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.parse_args"], "function", ["home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.main_ddp_final.parse_args"], ["", "def", "parse_args", "(", "parser", ")", ":", "\n", "# parser.add_argument(\"--arch\", default=\"resnet50\", type=str,", "\n", "# help=\"network type\")", "\n", "# parser.add_argument(\"--master-ip\", type=str, help=\"Ip address of master\")", "\n", "    ", "parser", ".", "add_argument", "(", "\"--local_rank\"", ",", "type", "=", "int", ",", "help", "=", "\"Rank of the experiment\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--batch-size\"", ",", "type", "=", "int", ",", "help", "=", "\"Batch size to use\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--dataset-location\"", ",", "type", "=", "str", ",", "help", "=", "\"Data path\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--loader-threads\"", ",", "type", "=", "int", ",", "default", "=", "2", ",", "help", "=", "\"Loader threads\"", ")", "\n", "# parser.add_argument(\"--device\", type=str, default=\"cuda:0\", ", "\n", "# help=\"GPU to use\")", "\n", "parser", ".", "add_argument", "(", "\"--log-file\"", ",", "type", "=", "str", ",", "default", "=", "\"Log file\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--num-workers\"", ",", "type", "=", "int", ",", "\n", "help", "=", "\"Number of total  workers\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--s3-prefix\"", ",", "type", "=", "str", ",", "default", "=", "None", ",", "\n", "help", "=", "\"s3-prefix to write\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--node_rank\"", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "\"--max_seq_length\"", ",", "type", "=", "int", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.main_bert._get_compression_param": [[687, 717], ["gradient_reducers.RankKReducer", "gradient_reducers.SignSGDwithMajorityVoteReducer", "gradient_reducers.GlobalTopKReducer", "gradient_reducers.MsTopKReducer", "gradient_reducers.ExactReducer", "gradient_reducers.ExactReducerPs"], "function", ["None"], ["", "def", "_get_compression_param", "(", "reducer_name", ",", "device", ",", "reducer_param", ")", ":", "\n", "    ", "if", "reducer_name", "==", "\"PowerSGD\"", ":", "\n", "        ", "reducer", "=", "gradient_reducers", ".", "RankKReducer", "(", "random_seed", "=", "42", ",", "\n", "device", "=", "device", ",", "\n", "timer", "=", "timer", ",", "\n", "n_power_iterations", "=", "0", ",", "\n", "reuse_query", "=", "True", ",", "\n", "rank", "=", "reducer_param", ")", "\n", "\n", "", "if", "reducer_name", "==", "\"SignSGD\"", ":", "\n", "        ", "reducer", "=", "gradient_reducers", ".", "SignSGDwithMajorityVoteReducer", "(", "random_seed", "=", "42", ",", "\n", "device", "=", "device", ",", "\n", "timer", "=", "timer", ")", "\n", "", "if", "reducer_name", "==", "\"Topk\"", ":", "\n", "        ", "reducer", "=", "gradient_reducers", ".", "GlobalTopKReducer", "(", "random_seed", "=", "42", ",", "\n", "device", "=", "device", ",", "\n", "timer", "=", "timer", ",", "\n", "compression", "=", "reducer_param", ")", "\n", "", "if", "reducer_name", "==", "\"MSTopK\"", ":", "\n", "        ", "reducer", "=", "gradient_reducers", ".", "MsTopKReducer", "(", "random_seed", "=", "42", ",", "\n", "device", "=", "device", ",", "timer", "=", "timer", ",", "\n", "k", "=", "reducer_param", ")", "\n", "", "if", "reducer_name", "==", "\"ExactSerial\"", ":", "\n", "        ", "reducer", "=", "gradient_reducers", ".", "ExactReducer", "(", "random_seed", "=", "42", ",", "device", "=", "device", ",", "\n", "timer", "=", "timer", ")", "\n", "\n", "", "if", "reducer_name", "==", "\"ExactSerial_ps\"", ":", "\n", "        ", "reducer", "=", "gradient_reducers", ".", "ExactReducerPs", "(", "random_seed", "=", "42", ",", "device", "=", "device", ",", "\n", "timer", "=", "timer", ")", "\n", "", "return", "reducer", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.main_bert.main_bert": [[719, 783], ["torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "modeling.BertConfig.from_json_file", "main_bert.Sogou_Processor", "main_bert.Sogou_Processor.get_labels", "tokenization.FullTokenizer", "main_bert.Sogou_Processor.get_train_examples", "modeling.BertForSequenceClassification().to", "main_bert.convert_examples_to_features", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.utils.data.TensorDataset", "torch.utils.data.DataLoader", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "list", "enumerate", "tuple", "torch.nn.parallel.DistributedDataParallel.", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.Event.record", "loss.backward", "torch.cuda.Event.record", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "list.append", "modeling.BertForSequenceClassification", "torch.nn.parallel.DistributedDataParallel.parameters", "torch.cuda.Event.elapsed_time", "s3_utils.uploadFile", "dict", "args.__str__", "s3_utils.uploadFile.push_file", "print", "len", "t.to", "open", "json.dump"], "function", ["home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.modeling.BertConfig.from_json_file", "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.main_bert.Dbpedia_Processor.get_labels", "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.main_bert.Dbpedia_Processor.get_train_examples", "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.main_bert.convert_examples_to_features", "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.s3_utils.uploadFile.push_file"], ["", "def", "main_bert", "(", "args", ")", ":", "\n", "    ", "assigned_device", "=", "\"cuda:{}\"", ".", "format", "(", "args", ".", "local_rank", ")", "\n", "torch", ".", "cuda", ".", "set_device", "(", "args", ".", "local_rank", ")", "\n", "global_rank", "=", "args", ".", "node_rank", "*", "8", "+", "args", ".", "local_rank", "\n", "\n", "data_dir", "=", "\"/home/ubuntu/bert_data/Sogou_data\"", "\n", "bert_config_file", "=", "\"/home/ubuntu/bert_data/chinese_L-12_H-768_A-12/bert_config.json\"", "\n", "task_name", "=", "\"sogou\"", "\n", "vocab_file", "=", "\"/home/ubuntu/bert_data/chinese_L-12_H-768_A-12/vocab.txt\"", "\n", "do_lower_case", "=", "True", "\n", "max_seq_length", "=", "args", ".", "max_seq_length", "\n", "train_batch_size", "=", "args", ".", "batch_size", "\n", "learning_rate", "=", "1e-5", "\n", "bert_config", "=", "BertConfig", ".", "from_json_file", "(", "bert_config_file", ")", "\n", "processor", "=", "Sogou_Processor", "(", ")", "\n", "label_list", "=", "processor", ".", "get_labels", "(", ")", "\n", "tokenizer", "=", "tokenization", ".", "FullTokenizer", "(", "vocab_file", "=", "vocab_file", ",", "\n", "do_lower_case", "=", "do_lower_case", ")", "\n", "train_examples", "=", "processor", ".", "get_train_examples", "(", "data_dir", ")", "\n", "model", "=", "BertForSequenceClassification", "(", "bert_config", ",", "\n", "len", "(", "label_list", ")", ")", ".", "to", "(", "assigned_device", ")", "\n", "train_features", "=", "convert_examples_to_features", "(", "train_examples", ",", "label_list", ",", "\n", "max_seq_length", ",", "tokenizer", ")", "\n", "\n", "\n", "all_input_ids", "=", "torch", ".", "tensor", "(", "[", "f", ".", "input_ids", "for", "f", "in", "train_features", "]", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "all_input_mask", "=", "torch", ".", "tensor", "(", "[", "f", ".", "input_mask", "for", "f", "in", "train_features", "]", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "all_segment_ids", "=", "torch", ".", "tensor", "(", "[", "f", ".", "segment_ids", "for", "f", "in", "train_features", "]", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "all_label_ids", "=", "torch", ".", "tensor", "(", "[", "f", ".", "label_id", "for", "f", "in", "train_features", "]", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "\n", "\n", "state", "=", "[", "parameter", "for", "parameter", "in", "model", ".", "parameters", "(", ")", "]", "\n", "\n", "train_data", "=", "TensorDataset", "(", "all_input_ids", ",", "all_input_mask", ",", "all_segment_ids", ",", "all_label_ids", ")", "\n", "\n", "train_dataloader", "=", "DataLoader", "(", "train_data", ",", "train_batch_size", ")", "\n", "model", "=", "torch", ".", "nn", ".", "parallel", ".", "DistributedDataParallel", "(", "model", ",", "bucket_cap_mb", "=", "45", ",", "\n", "device_ids", "=", "[", "args", ".", "local_rank", "]", ",", "\n", "output_device", "=", "args", ".", "local_rank", ")", "\n", "start_time", "=", "torch", ".", "cuda", ".", "Event", "(", "enable_timing", "=", "True", ")", "\n", "stop_time", "=", "torch", ".", "cuda", ".", "Event", "(", "enable_timing", "=", "True", ")", "\n", "time_list", "=", "list", "(", ")", "\n", "for", "idx", ",", "data", "in", "enumerate", "(", "train_dataloader", ")", ":", "\n", "        ", "batch", "=", "tuple", "(", "t", ".", "to", "(", "assigned_device", ")", "for", "t", "in", "data", ")", "\n", "input_ids", ",", "input_mask", ",", "segment_ids", ",", "label_ids", "=", "batch", "\n", "(", "loss", ",", "_", ")", "=", "model", "(", "input_ids", ",", "segment_ids", ",", "input_mask", ",", "label_ids", ")", "\n", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "start_time", ".", "record", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "stop_time", ".", "record", "(", ")", "\n", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "time_list", ".", "append", "(", "start_time", ".", "elapsed_time", "(", "stop_time", ")", ")", "\n", "if", "idx", "==", "60", ":", "\n", "            ", "file_uploader", "=", "s3_utils", ".", "uploadFile", "(", "\"large-scale-compression\"", ")", "\n", "data_dict", "=", "dict", "(", ")", "\n", "data_dict", "[", "'args'", "]", "=", "args", ".", "__str__", "(", ")", "\n", "data_dict", "[", "'timing_log'", "]", "=", "time_list", "\n", "file_name", "=", "\"bert_ddp_out_file_{}.json\"", ".", "format", "(", "global_rank", ")", "\n", "with", "open", "(", "file_name", ",", "\"w\"", ")", "as", "fout", ":", "\n", "                ", "json", ".", "dump", "(", "data_dict", ",", "fout", ")", "\n", "", "file_uploader", ".", "push_file", "(", "file_name", ",", "\n", "\"{}/{}\"", ".", "format", "(", "args", ".", "s3_prefix", ",", "file_name", ")", ")", "\n", "print", "(", "\"Done bert\"", ")", "\n", "break", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.main_bert.main_bert_single": [[784, 850], ["torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "modeling.BertConfig.from_json_file", "main_bert.Sogou_Processor", "main_bert.Sogou_Processor.get_labels", "tokenization.FullTokenizer", "main_bert.Sogou_Processor.get_train_examples", "modeling.BertForSequenceClassification().to", "main_bert.convert_examples_to_features", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.utils.data.TensorDataset", "torch.utils.data.DataLoader", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "list", "enumerate", "tuple", "BertForSequenceClassification().to.", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.Event.record", "loss.backward", "torch.cuda.Event.record", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "list.append", "print", "modeling.BertForSequenceClassification", "BertForSequenceClassification().to.parameters", "torch.cuda.Event.elapsed_time", "s3_utils.uploadFile", "dict", "args.__str__", "s3_utils.uploadFile.push_file", "print", "len", "t.to", "open", "json.dump"], "function", ["home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.modeling.BertConfig.from_json_file", "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.main_bert.Dbpedia_Processor.get_labels", "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.main_bert.Dbpedia_Processor.get_train_examples", "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.main_bert.convert_examples_to_features", "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.s3_utils.uploadFile.push_file"], ["", "", "", "def", "main_bert_single", "(", "args", ")", ":", "\n", "    ", "assigned_device", "=", "\"cuda:{}\"", ".", "format", "(", "args", ".", "local_rank", ")", "\n", "torch", ".", "cuda", ".", "set_device", "(", "args", ".", "local_rank", ")", "\n", "global_rank", "=", "args", ".", "node_rank", "*", "8", "+", "args", ".", "local_rank", "\n", "\n", "data_dir", "=", "\"/home/ubuntu/bert_data/Sogou_data\"", "\n", "bert_config_file", "=", "\"/home/ubuntu/bert_data/chinese_L-12_H-768_A-12/bert_config.json\"", "\n", "task_name", "=", "\"sogou\"", "\n", "vocab_file", "=", "\"/home/ubuntu/bert_data/chinese_L-12_H-768_A-12/vocab.txt\"", "\n", "do_lower_case", "=", "True", "\n", "max_seq_length", "=", "args", ".", "max_seq_length", "\n", "train_batch_size", "=", "args", ".", "batch_size", "\n", "learning_rate", "=", "1e-5", "\n", "bert_config", "=", "BertConfig", ".", "from_json_file", "(", "bert_config_file", ")", "\n", "processor", "=", "Sogou_Processor", "(", ")", "\n", "label_list", "=", "processor", ".", "get_labels", "(", ")", "\n", "tokenizer", "=", "tokenization", ".", "FullTokenizer", "(", "vocab_file", "=", "vocab_file", ",", "\n", "do_lower_case", "=", "do_lower_case", ")", "\n", "train_examples", "=", "processor", ".", "get_train_examples", "(", "data_dir", ")", "\n", "model", "=", "BertForSequenceClassification", "(", "bert_config", ",", "\n", "len", "(", "label_list", ")", ")", ".", "to", "(", "assigned_device", ")", "\n", "train_features", "=", "convert_examples_to_features", "(", "train_examples", ",", "label_list", ",", "\n", "max_seq_length", ",", "tokenizer", ")", "\n", "\n", "\n", "all_input_ids", "=", "torch", ".", "tensor", "(", "[", "f", ".", "input_ids", "for", "f", "in", "train_features", "]", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "all_input_mask", "=", "torch", ".", "tensor", "(", "[", "f", ".", "input_mask", "for", "f", "in", "train_features", "]", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "all_segment_ids", "=", "torch", ".", "tensor", "(", "[", "f", ".", "segment_ids", "for", "f", "in", "train_features", "]", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "all_label_ids", "=", "torch", ".", "tensor", "(", "[", "f", ".", "label_id", "for", "f", "in", "train_features", "]", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "\n", "\n", "state", "=", "[", "parameter", "for", "parameter", "in", "model", ".", "parameters", "(", ")", "]", "\n", "\n", "train_data", "=", "TensorDataset", "(", "all_input_ids", ",", "all_input_mask", ",", "all_segment_ids", ",", "all_label_ids", ")", "\n", "\n", "train_dataloader", "=", "DataLoader", "(", "train_data", ",", "train_batch_size", ")", "\n", "# model = torch.nn.parallel.DistributedDataParallel(model, bucket_cap_mb=45,", "\n", "# device_ids=[args.local_rank],", "\n", "# output_device=args.local_rank)", "\n", "\n", "start_time", "=", "torch", ".", "cuda", ".", "Event", "(", "enable_timing", "=", "True", ")", "\n", "stop_time", "=", "torch", ".", "cuda", ".", "Event", "(", "enable_timing", "=", "True", ")", "\n", "time_list", "=", "list", "(", ")", "\n", "for", "idx", ",", "data", "in", "enumerate", "(", "train_dataloader", ")", ":", "\n", "        ", "batch", "=", "tuple", "(", "t", ".", "to", "(", "assigned_device", ")", "for", "t", "in", "data", ")", "\n", "input_ids", ",", "input_mask", ",", "segment_ids", ",", "label_ids", "=", "batch", "\n", "(", "loss", ",", "_", ")", "=", "model", "(", "input_ids", ",", "segment_ids", ",", "input_mask", ",", "label_ids", ")", "\n", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "start_time", ".", "record", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "stop_time", ".", "record", "(", ")", "\n", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "time_list", ".", "append", "(", "start_time", ".", "elapsed_time", "(", "stop_time", ")", ")", "\n", "print", "(", "time_list", ")", "\n", "if", "idx", "==", "60", ":", "\n", "            ", "file_uploader", "=", "s3_utils", ".", "uploadFile", "(", "\"large-scale-compression\"", ")", "\n", "data_dict", "=", "dict", "(", ")", "\n", "data_dict", "[", "'args'", "]", "=", "args", ".", "__str__", "(", ")", "\n", "data_dict", "[", "'timing_log'", "]", "=", "time_list", "\n", "file_name", "=", "\"bert_ddp_out_file_{}.json\"", ".", "format", "(", "global_rank", ")", "\n", "with", "open", "(", "file_name", ",", "\"w\"", ")", "as", "fout", ":", "\n", "                ", "json", ".", "dump", "(", "data_dict", ",", "fout", ")", "\n", "", "file_uploader", ".", "push_file", "(", "file_name", ",", "\n", "\"{}/{}\"", ".", "format", "(", "args", ".", "s3_prefix", ",", "file_name", ")", ")", "\n", "print", "(", "\"Done bert\"", ")", "\n", "break", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.main_bert.powersgd_bert": [[852, 928], ["torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "modeling.BertConfig.from_json_file", "main_bert.Sogou_Processor", "main_bert.Sogou_Processor.get_labels", "tokenization.FullTokenizer", "main_bert.Sogou_Processor.get_train_examples", "modeling.BertForSequenceClassification().to", "main_bert.convert_examples_to_features", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.utils.data.TensorDataset", "torch.utils.data.DataLoader", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "list", "main_bert._get_compression_param", "enumerate", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "tuple", "BertForSequenceClassification().to.", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.Event.record", "loss.backward", "zip", "_get_compression_param.reduce", "torch.cuda.Event.record", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "list.append", "modeling.BertForSequenceClassification", "BertForSequenceClassification().to.parameters", "BertForSequenceClassification().to.parameters", "BertForSequenceClassification().to.parameters", "torch.cuda.Event.elapsed_time", "s3_utils.uploadFile", "dict", "args.__str__", "s3_utils.uploadFile.push_file", "print", "len", "t.to", "BertForSequenceClassification().to.parameters", "open", "json.dump"], "function", ["home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.modeling.BertConfig.from_json_file", "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.main_bert.Dbpedia_Processor.get_labels", "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.main_bert.Dbpedia_Processor.get_train_examples", "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.main_bert.convert_examples_to_features", "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.main_ddp_final._get_compression_param", "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.gradient_reducers.ExactReducerPs.reduce", "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.s3_utils.uploadFile.push_file"], ["", "", "", "def", "powersgd_bert", "(", "args", ",", "psgd_rank", ")", ":", "\n", "    ", "assigned_device", "=", "\"cuda:{}\"", ".", "format", "(", "args", ".", "local_rank", ")", "\n", "torch", ".", "cuda", ".", "set_device", "(", "args", ".", "local_rank", ")", "\n", "global_rank", "=", "args", ".", "node_rank", "*", "8", "+", "args", ".", "local_rank", "\n", "\n", "data_dir", "=", "\"/home/ubuntu/bert_data/Sogou_data\"", "\n", "bert_config_file", "=", "\"/home/ubuntu/bert_data/chinese_L-12_H-768_A-12/bert_config.json\"", "\n", "task_name", "=", "\"sogou\"", "\n", "vocab_file", "=", "\"/home/ubuntu/bert_data/chinese_L-12_H-768_A-12/vocab.txt\"", "\n", "do_lower_case", "=", "True", "\n", "max_seq_length", "=", "args", ".", "max_seq_length", "\n", "train_batch_size", "=", "args", ".", "batch_size", "\n", "learning_rate", "=", "1e-5", "\n", "bert_config", "=", "BertConfig", ".", "from_json_file", "(", "bert_config_file", ")", "\n", "processor", "=", "Sogou_Processor", "(", ")", "\n", "label_list", "=", "processor", ".", "get_labels", "(", ")", "\n", "tokenizer", "=", "tokenization", ".", "FullTokenizer", "(", "vocab_file", "=", "vocab_file", ",", "\n", "do_lower_case", "=", "do_lower_case", ")", "\n", "train_examples", "=", "processor", ".", "get_train_examples", "(", "data_dir", ")", "\n", "model", "=", "BertForSequenceClassification", "(", "bert_config", ",", "\n", "len", "(", "label_list", ")", ")", ".", "to", "(", "assigned_device", ")", "\n", "train_features", "=", "convert_examples_to_features", "(", "train_examples", ",", "label_list", ",", "\n", "max_seq_length", ",", "tokenizer", ")", "\n", "\n", "\n", "all_input_ids", "=", "torch", ".", "tensor", "(", "[", "f", ".", "input_ids", "for", "f", "in", "train_features", "]", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "all_input_mask", "=", "torch", ".", "tensor", "(", "[", "f", ".", "input_mask", "for", "f", "in", "train_features", "]", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "all_segment_ids", "=", "torch", ".", "tensor", "(", "[", "f", ".", "segment_ids", "for", "f", "in", "train_features", "]", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "all_label_ids", "=", "torch", ".", "tensor", "(", "[", "f", ".", "label_id", "for", "f", "in", "train_features", "]", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "\n", "\n", "state", "=", "[", "parameter", "for", "parameter", "in", "model", ".", "parameters", "(", ")", "]", "\n", "\n", "train_data", "=", "TensorDataset", "(", "all_input_ids", ",", "all_input_mask", ",", "all_segment_ids", ",", "all_label_ids", ")", "\n", "\n", "train_dataloader", "=", "DataLoader", "(", "train_data", ",", "train_batch_size", ")", "\n", "\n", "start_time", "=", "torch", ".", "cuda", ".", "Event", "(", "enable_timing", "=", "True", ")", "\n", "stop_time", "=", "torch", ".", "cuda", ".", "Event", "(", "enable_timing", "=", "True", ")", "\n", "time_list", "=", "list", "(", ")", "\n", "\n", "reducer", "=", "_get_compression_param", "(", "\"PowerSGD\"", ",", "assigned_device", ",", "psgd_rank", ")", "\n", "\n", "memories", "=", "[", "torch", ".", "zeros_like", "(", "p", ")", "for", "p", "in", "model", ".", "parameters", "(", ")", "]", "\n", "send_buffers", "=", "[", "torch", ".", "zeros_like", "(", "p", ")", "for", "p", "in", "model", ".", "parameters", "(", ")", "]", "\n", "\n", "for", "idx", ",", "data", "in", "enumerate", "(", "train_dataloader", ")", ":", "\n", "        ", "batch", "=", "tuple", "(", "t", ".", "to", "(", "assigned_device", ")", "for", "t", "in", "data", ")", "\n", "input_ids", ",", "input_mask", ",", "segment_ids", ",", "label_ids", "=", "batch", "\n", "(", "loss", ",", "_", ")", "=", "model", "(", "input_ids", ",", "segment_ids", ",", "input_mask", ",", "label_ids", ")", "\n", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "start_time", ".", "record", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "grad_list", "=", "[", "parameter", ".", "grad", "for", "parameter", "in", "model", ".", "parameters", "(", ")", "]", "\n", "\n", "for", "grad", ",", "memory", ",", "send_bfr", "in", "zip", "(", "grad_list", ",", "memories", ",", "send_buffers", ")", ":", "\n", "            ", "send_bfr", ".", "data", "[", ":", "]", "=", "grad", "+", "memory", "\n", "", "reducer", ".", "reduce", "(", "send_buffers", ",", "grad_list", ",", "memories", ")", "\n", "\n", "stop_time", ".", "record", "(", ")", "\n", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "\n", "time_list", ".", "append", "(", "start_time", ".", "elapsed_time", "(", "stop_time", ")", ")", "\n", "if", "idx", "==", "60", ":", "\n", "            ", "file_uploader", "=", "s3_utils", ".", "uploadFile", "(", "\"large-scale-compression\"", ")", "\n", "data_dict", "=", "dict", "(", ")", "\n", "data_dict", "[", "'args'", "]", "=", "args", ".", "__str__", "(", ")", "\n", "data_dict", "[", "'timing_log'", "]", "=", "time_list", "\n", "file_name", "=", "\"bert_powersgd_serial_rank_{}_ddp_out_file_{}.json\"", ".", "format", "(", "\n", "psgd_rank", ",", "global_rank", ")", "\n", "with", "open", "(", "file_name", ",", "\"w\"", ")", "as", "fout", ":", "\n", "                ", "json", ".", "dump", "(", "data_dict", ",", "fout", ")", "\n", "", "file_uploader", ".", "push_file", "(", "file_name", ",", "\n", "\"{}/{}\"", ".", "format", "(", "args", ".", "s3_prefix", ",", "file_name", ")", ")", "\n", "print", "(", "\"Done bert\"", ")", "\n", "break", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.main_bert.powersgd_bert_integrated": [[929, 1014], ["torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "modeling.BertConfig.from_json_file", "main_bert.Sogou_Processor", "main_bert.Sogou_Processor.get_labels", "tokenization.FullTokenizer", "main_bert.Sogou_Processor.get_train_examples", "modeling.BertForSequenceClassification().to", "main_bert.convert_examples_to_features", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.utils.data.TensorDataset", "torch.utils.data.DataLoader", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "list", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.PowerSGDState", "torch.nn.parallel.DistributedDataParallel.register_comm_hook", "enumerate", "tuple", "torch.nn.parallel.DistributedDataParallel.", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.Event.record", "loss.backward", "torch.cuda.Event.record", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "list.append", "modeling.BertForSequenceClassification", "torch.nn.parallel.DistributedDataParallel.parameters", "torch.cuda.Event.elapsed_time", "s3_utils.uploadFile", "dict", "args.__str__", "s3_utils.uploadFile.push_file", "print", "len", "t.to", "open", "json.dump"], "function", ["home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.modeling.BertConfig.from_json_file", "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.main_bert.Dbpedia_Processor.get_labels", "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.main_bert.Dbpedia_Processor.get_train_examples", "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.main_bert.convert_examples_to_features", "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.s3_utils.uploadFile.push_file"], ["", "", "", "def", "powersgd_bert_integrated", "(", "args", ",", "psgd_rank", ")", ":", "\n", "    ", "assigned_device", "=", "\"cuda:{}\"", ".", "format", "(", "args", ".", "local_rank", ")", "\n", "torch", ".", "cuda", ".", "set_device", "(", "args", ".", "local_rank", ")", "\n", "global_rank", "=", "args", ".", "node_rank", "*", "8", "+", "args", ".", "local_rank", "\n", "\n", "data_dir", "=", "\"/home/ubuntu/bert_data/Sogou_data\"", "\n", "bert_config_file", "=", "\"/home/ubuntu/bert_data/chinese_L-12_H-768_A-12/bert_config.json\"", "\n", "task_name", "=", "\"sogou\"", "\n", "vocab_file", "=", "\"/home/ubuntu/bert_data/chinese_L-12_H-768_A-12/vocab.txt\"", "\n", "do_lower_case", "=", "True", "\n", "max_seq_length", "=", "args", ".", "max_seq_length", "\n", "train_batch_size", "=", "args", ".", "batch_size", "\n", "learning_rate", "=", "1e-5", "\n", "bert_config", "=", "BertConfig", ".", "from_json_file", "(", "bert_config_file", ")", "\n", "processor", "=", "Sogou_Processor", "(", ")", "\n", "label_list", "=", "processor", ".", "get_labels", "(", ")", "\n", "tokenizer", "=", "tokenization", ".", "FullTokenizer", "(", "vocab_file", "=", "vocab_file", ",", "\n", "do_lower_case", "=", "do_lower_case", ")", "\n", "train_examples", "=", "processor", ".", "get_train_examples", "(", "data_dir", ")", "\n", "model", "=", "BertForSequenceClassification", "(", "bert_config", ",", "\n", "len", "(", "label_list", ")", ")", ".", "to", "(", "assigned_device", ")", "\n", "train_features", "=", "convert_examples_to_features", "(", "train_examples", ",", "label_list", ",", "\n", "max_seq_length", ",", "tokenizer", ")", "\n", "\n", "\n", "all_input_ids", "=", "torch", ".", "tensor", "(", "[", "f", ".", "input_ids", "for", "f", "in", "train_features", "]", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "all_input_mask", "=", "torch", ".", "tensor", "(", "[", "f", ".", "input_mask", "for", "f", "in", "train_features", "]", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "all_segment_ids", "=", "torch", ".", "tensor", "(", "[", "f", ".", "segment_ids", "for", "f", "in", "train_features", "]", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "all_label_ids", "=", "torch", ".", "tensor", "(", "[", "f", ".", "label_id", "for", "f", "in", "train_features", "]", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "\n", "\n", "state", "=", "[", "parameter", "for", "parameter", "in", "model", ".", "parameters", "(", ")", "]", "\n", "\n", "train_data", "=", "TensorDataset", "(", "all_input_ids", ",", "all_input_mask", ",", "all_segment_ids", ",", "all_label_ids", ")", "\n", "\n", "train_dataloader", "=", "DataLoader", "(", "train_data", ",", "train_batch_size", ")", "\n", "\n", "start_time", "=", "torch", ".", "cuda", ".", "Event", "(", "enable_timing", "=", "True", ")", "\n", "stop_time", "=", "torch", ".", "cuda", ".", "Event", "(", "enable_timing", "=", "True", ")", "\n", "time_list", "=", "list", "(", ")", "\n", "\n", "# reducer = _get_compression_param(\"PowerSGD\", assigned_device, psgd_rank)", "\n", "\n", "# memories = [torch.zeros_like(p) for p in model.parameters()]", "\n", "# send_buffers = [torch.zeros_like(p) for p in model.parameters()]", "\n", "\n", "model", "=", "torch", ".", "nn", ".", "parallel", ".", "DistributedDataParallel", "(", "model", ",", "\n", "device_ids", "=", "[", "args", ".", "local_rank", "]", ",", "\n", "output_device", "=", "args", ".", "local_rank", ")", "\n", "state", "=", "PowerSGD", ".", "PowerSGDState", "(", "process_group", "=", "None", ",", "\n", "matrix_approximation_rank", "=", "psgd_rank", ",", "\n", "start_powerSGD_iter", "=", "3", ")", "\n", "\n", "model", ".", "register_comm_hook", "(", "state", ",", "PowerSGD", ".", "powerSGD_hook", ")", "\n", "\n", "for", "idx", ",", "data", "in", "enumerate", "(", "train_dataloader", ")", ":", "\n", "        ", "batch", "=", "tuple", "(", "t", ".", "to", "(", "assigned_device", ")", "for", "t", "in", "data", ")", "\n", "input_ids", ",", "input_mask", ",", "segment_ids", ",", "label_ids", "=", "batch", "\n", "(", "loss", ",", "_", ")", "=", "model", "(", "input_ids", ",", "segment_ids", ",", "input_mask", ",", "label_ids", ")", "\n", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "start_time", ".", "record", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "# grad_list = [parameter.grad for parameter in model.parameters()]", "\n", "\n", "# for grad, memory, send_bfr in zip(grad_list, memories, send_buffers):", "\n", "# send_bfr.data[:] = grad + memory", "\n", "# reducer.reduce(send_buffers, grad_list, memories)", "\n", "\n", "stop_time", ".", "record", "(", ")", "\n", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "\n", "time_list", ".", "append", "(", "start_time", ".", "elapsed_time", "(", "stop_time", ")", ")", "\n", "if", "idx", "==", "60", ":", "\n", "            ", "file_uploader", "=", "s3_utils", ".", "uploadFile", "(", "\"large-scale-compression\"", ")", "\n", "data_dict", "=", "dict", "(", ")", "\n", "data_dict", "[", "'args'", "]", "=", "args", ".", "__str__", "(", ")", "\n", "data_dict", "[", "'timing_log'", "]", "=", "time_list", "\n", "file_name", "=", "\"bert_powersgd_overlap_rank_{}_ddp_out_file_{}.json\"", ".", "format", "(", "\n", "psgd_rank", ",", "global_rank", ")", "\n", "with", "open", "(", "file_name", ",", "\"w\"", ")", "as", "fout", ":", "\n", "                ", "json", ".", "dump", "(", "data_dict", ",", "fout", ")", "\n", "", "file_uploader", ".", "push_file", "(", "file_name", ",", "\n", "\"{}/{}\"", ".", "format", "(", "args", ".", "s3_prefix", ",", "file_name", ")", ")", "\n", "print", "(", "\"Done bert\"", ")", "\n", "break", "\n", "", "", "", "def", "topk_bert", "(", "args", ",", "psgd_rank", ")", ":", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.main_bert.topk_bert": [[1014, 1090], ["torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "modeling.BertConfig.from_json_file", "main_bert.Sogou_Processor", "main_bert.Sogou_Processor.get_labels", "tokenization.FullTokenizer", "main_bert.Sogou_Processor.get_train_examples", "modeling.BertForSequenceClassification().to", "main_bert.convert_examples_to_features", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.utils.data.TensorDataset", "torch.utils.data.DataLoader", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "list", "main_bert._get_compression_param", "enumerate", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "tuple", "BertForSequenceClassification().to.", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.Event.record", "loss.backward", "zip", "_get_compression_param.reduce", "torch.cuda.Event.record", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "list.append", "modeling.BertForSequenceClassification", "BertForSequenceClassification().to.parameters", "BertForSequenceClassification().to.parameters", "BertForSequenceClassification().to.parameters", "torch.cuda.Event.elapsed_time", "s3_utils.uploadFile", "dict", "args.__str__", "s3_utils.uploadFile.push_file", "print", "len", "t.to", "BertForSequenceClassification().to.parameters", "open", "json.dump"], "function", ["home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.modeling.BertConfig.from_json_file", "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.main_bert.Dbpedia_Processor.get_labels", "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.main_bert.Dbpedia_Processor.get_train_examples", "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.main_bert.convert_examples_to_features", "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.main_ddp_final._get_compression_param", "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.gradient_reducers.ExactReducerPs.reduce", "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.s3_utils.uploadFile.push_file"], ["", "", "", "def", "topk_bert", "(", "args", ",", "psgd_rank", ")", ":", "\n", "    ", "assigned_device", "=", "\"cuda:{}\"", ".", "format", "(", "args", ".", "local_rank", ")", "\n", "torch", ".", "cuda", ".", "set_device", "(", "args", ".", "local_rank", ")", "\n", "global_rank", "=", "args", ".", "node_rank", "*", "8", "+", "args", ".", "local_rank", "\n", "\n", "data_dir", "=", "\"/home/ubuntu/bert_data/Sogou_data\"", "\n", "bert_config_file", "=", "\"/home/ubuntu/bert_data/chinese_L-12_H-768_A-12/bert_config.json\"", "\n", "task_name", "=", "\"sogou\"", "\n", "vocab_file", "=", "\"/home/ubuntu/bert_data/chinese_L-12_H-768_A-12/vocab.txt\"", "\n", "do_lower_case", "=", "True", "\n", "max_seq_length", "=", "args", ".", "max_seq_length", "\n", "train_batch_size", "=", "args", ".", "batch_size", "\n", "learning_rate", "=", "1e-5", "\n", "bert_config", "=", "BertConfig", ".", "from_json_file", "(", "bert_config_file", ")", "\n", "processor", "=", "Sogou_Processor", "(", ")", "\n", "label_list", "=", "processor", ".", "get_labels", "(", ")", "\n", "tokenizer", "=", "tokenization", ".", "FullTokenizer", "(", "vocab_file", "=", "vocab_file", ",", "\n", "do_lower_case", "=", "do_lower_case", ")", "\n", "train_examples", "=", "processor", ".", "get_train_examples", "(", "data_dir", ")", "\n", "model", "=", "BertForSequenceClassification", "(", "bert_config", ",", "\n", "len", "(", "label_list", ")", ")", ".", "to", "(", "assigned_device", ")", "\n", "train_features", "=", "convert_examples_to_features", "(", "train_examples", ",", "label_list", ",", "\n", "max_seq_length", ",", "tokenizer", ")", "\n", "\n", "\n", "all_input_ids", "=", "torch", ".", "tensor", "(", "[", "f", ".", "input_ids", "for", "f", "in", "train_features", "]", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "all_input_mask", "=", "torch", ".", "tensor", "(", "[", "f", ".", "input_mask", "for", "f", "in", "train_features", "]", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "all_segment_ids", "=", "torch", ".", "tensor", "(", "[", "f", ".", "segment_ids", "for", "f", "in", "train_features", "]", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "all_label_ids", "=", "torch", ".", "tensor", "(", "[", "f", ".", "label_id", "for", "f", "in", "train_features", "]", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "\n", "\n", "state", "=", "[", "parameter", "for", "parameter", "in", "model", ".", "parameters", "(", ")", "]", "\n", "\n", "train_data", "=", "TensorDataset", "(", "all_input_ids", ",", "all_input_mask", ",", "all_segment_ids", ",", "all_label_ids", ")", "\n", "\n", "train_dataloader", "=", "DataLoader", "(", "train_data", ",", "train_batch_size", ")", "\n", "\n", "start_time", "=", "torch", ".", "cuda", ".", "Event", "(", "enable_timing", "=", "True", ")", "\n", "stop_time", "=", "torch", ".", "cuda", ".", "Event", "(", "enable_timing", "=", "True", ")", "\n", "time_list", "=", "list", "(", ")", "\n", "\n", "reducer", "=", "_get_compression_param", "(", "\"Topk\"", ",", "assigned_device", ",", "psgd_rank", ")", "\n", "\n", "memories", "=", "[", "torch", ".", "zeros_like", "(", "p", ")", "for", "p", "in", "model", ".", "parameters", "(", ")", "]", "\n", "send_buffers", "=", "[", "torch", ".", "zeros_like", "(", "p", ")", "for", "p", "in", "model", ".", "parameters", "(", ")", "]", "\n", "\n", "for", "idx", ",", "data", "in", "enumerate", "(", "train_dataloader", ")", ":", "\n", "        ", "batch", "=", "tuple", "(", "t", ".", "to", "(", "assigned_device", ")", "for", "t", "in", "data", ")", "\n", "input_ids", ",", "input_mask", ",", "segment_ids", ",", "label_ids", "=", "batch", "\n", "(", "loss", ",", "_", ")", "=", "model", "(", "input_ids", ",", "segment_ids", ",", "input_mask", ",", "label_ids", ")", "\n", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "start_time", ".", "record", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "grad_list", "=", "[", "parameter", ".", "grad", "for", "parameter", "in", "model", ".", "parameters", "(", ")", "]", "\n", "\n", "for", "grad", ",", "memory", ",", "send_bfr", "in", "zip", "(", "grad_list", ",", "memories", ",", "send_buffers", ")", ":", "\n", "            ", "send_bfr", ".", "data", "[", ":", "]", "=", "grad", "+", "memory", "\n", "", "reducer", ".", "reduce", "(", "send_buffers", ",", "grad_list", ",", "memories", ")", "\n", "\n", "stop_time", ".", "record", "(", ")", "\n", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "\n", "time_list", ".", "append", "(", "start_time", ".", "elapsed_time", "(", "stop_time", ")", ")", "\n", "if", "idx", "==", "7", ":", "\n", "            ", "file_uploader", "=", "s3_utils", ".", "uploadFile", "(", "\"large-scale-compression\"", ")", "\n", "data_dict", "=", "dict", "(", ")", "\n", "data_dict", "[", "'args'", "]", "=", "args", ".", "__str__", "(", ")", "\n", "data_dict", "[", "'timing_log'", "]", "=", "time_list", "\n", "file_name", "=", "\"bert_topk_{}_out_file_{}.json\"", ".", "format", "(", "\n", "psgd_rank", ",", "global_rank", ")", "\n", "with", "open", "(", "file_name", ",", "\"w\"", ")", "as", "fout", ":", "\n", "                ", "json", ".", "dump", "(", "data_dict", ",", "fout", ")", "\n", "", "file_uploader", ".", "push_file", "(", "file_name", ",", "\n", "\"{}/{}\"", ".", "format", "(", "args", ".", "s3_prefix", ",", "file_name", ")", ")", "\n", "print", "(", "\"Done bert\"", ")", "\n", "break", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.main_bert.encode_decode": [[1091, 1161], ["int", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "len", "range", "group_to_use.size", "torch.all_gather", "torch.all_gather().get_future", "dist.all_gather().get_future.then", "bucket.get_tensors", "torch.count_nonzero", "torch.count_nonzero", "torch.count_nonzero", "torch.count_nonzero", "torch.count_nonzero", "torch.count_nonzero", "torch.count_nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "random.randint", "random.randint", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "len", "range", "range", "torch.all_gather", "dist.all_gather().get_future.value", "bucket.get_tensors", "len", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.gradient_reducers.all_gather", "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.gradient_reducers.all_gather"], ["", "", "", "def", "encode_decode", "(", "state", ",", "bucket", ")", ":", "\n", "# tensors = [ t/dist.world_size for t in bucket.get_tensors()]", "\n", "\n", "# print (state)", "\n", "    ", "tensor", "=", "bucket", ".", "get_tensors", "(", ")", "[", "0", "]", "\n", "k", "=", "int", "(", "state", "[", "'k'", "]", "*", "len", "(", "tensor", ")", ")", "\n", "N", "=", "state", "[", "'N'", "]", "\n", "grad_1d", "=", "tensor", "\n", "# grad_1d = grad_in.reshape(-1) #reshaping to 1d", "\n", "a", "=", "torch", ".", "abs", "(", "grad_1d", ")", "\n", "a_hat", "=", "torch", ".", "mean", "(", "a", ")", "\n", "u", "=", "torch", ".", "max", "(", "a", ")", "\n", "l", "=", "0", "\n", "r", "=", "1", "\n", "k1", "=", "0", "\n", "k2", "=", "len", "(", "grad_1d", ")", "\n", "thres1", "=", "0", "\n", "thres2", "=", "0", "\n", "for", "i", "in", "range", "(", "N", ")", ":", "\n", "        ", "ratio", "=", "l", "+", "(", "r", "-", "l", ")", "/", "2", "\n", "thres", "=", "a_hat", "+", "ratio", "*", "(", "u", "-", "a_hat", ")", "\n", "nnz", "=", "torch", ".", "count_nonzero", "(", "a", ">=", "thres", ")", "\n", "if", "nnz", "<=", "k", ":", "\n", "            ", "r", "=", "ratio", "\n", "if", "nnz", ">", "k1", ":", "\n", "                ", "k1", "=", "nnz", "\n", "thres1", "=", "thres", "\n", "", "", "elif", "nnz", ">", "k", ":", "\n", "            ", "l", "=", "ratio", "\n", "if", "nnz", "<", "k2", ":", "\n", "                ", "k2", "=", "nnz", "\n", "thres2", "=", "thres", "\n", "", "", "", "l1", "=", "torch", ".", "nonzero", "(", "a", ">=", "thres1", ",", "as_tuple", "=", "True", ")", "[", "0", "]", "#since 1d no problem", "\n", "l2", "=", "torch", ".", "nonzero", "(", "(", "a", "<", "thres1", ")", "&", "(", "a", ">=", "thres2", ")", ",", "as_tuple", "=", "True", ")", "[", "0", "]", "\n", "if", "len", "(", "l2", ")", "-", "(", "k", "-", "k1", ")", "+", "1", "<", "0", ":", "\n", "        ", "l", "=", "torch", ".", "cat", "(", "(", "l1", ",", "l2", "[", "0", ":", "k", "-", "len", "(", "l1", ")", "]", ")", ")", "\n", "", "else", ":", "\n", "        ", "rand", "=", "random", ".", "randint", "(", "0", ",", "len", "(", "l2", ")", "-", "(", "k", "-", "k1", ")", "+", "1", ")", "\n", "l", "=", "torch", ".", "cat", "(", "(", "l1", ",", "l2", "[", "rand", ":", "rand", "+", "k", "-", "k1", "]", ")", ")", "\n", "", "kai", "=", "tensor", "[", "l", "]", "\n", "\n", "\n", "\n", "\n", "# tensor = torch.ones_like(tensor, device=tensor.device, dtype=tensor.dtype)", "\n", "group_to_use", "=", "dist", ".", "group", ".", "WORLD", "\n", "world_size", "=", "group_to_use", ".", "size", "(", ")", "\n", "\n", "out_list", "=", "[", "torch", ".", "zeros_like", "(", "kai", ",", "device", "=", "kai", ".", "device", ",", "\n", "dtype", "=", "kai", ".", "dtype", ")", "for", "_", "in", "range", "(", "world_size", ")", "]", "\n", "\n", "idx_list", "=", "[", "torch", ".", "zeros_like", "(", "l", ",", "device", "=", "l", ".", "device", ",", "\n", "dtype", "=", "l", ".", "dtype", ")", "for", "_", "in", "range", "(", "world_size", ")", "]", "\n", "\n", "dist", ".", "all_gather", "(", "idx_list", ",", "l", ",", "group", "=", "group_to_use", ",", "\n", "async_op", "=", "True", ")", "\n", "\n", "fut", "=", "dist", ".", "all_gather", "(", "\n", "out_list", ",", "kai", ",", "group", "=", "group_to_use", ",", "async_op", "=", "True", ")", ".", "get_future", "(", ")", "\n", "\n", "def", "decode", "(", "fut", ")", ":", "\n", "        ", "agg_tensor", "=", "fut", ".", "value", "(", ")", "[", "0", "]", "\n", "fut_tensor", "=", "bucket", ".", "get_tensors", "(", ")", "[", "0", "]", "\n", "out_tensor", "=", "torch", ".", "zeros_like", "(", "fut_tensor", ",", "device", "=", "tensor", ".", "device", ",", "\n", "dtype", "=", "tensor", ".", "dtype", ")", "\n", "for", "gt", "in", "agg_tensor", ":", "\n", "            ", "out_tensor", "[", ":", "len", "(", "gt", ")", "]", "+=", "gt", "\n", "# print (out_tensor) ", "\n", "", "return", "[", "out_tensor", "]", "\n", "", "return", "fut", ".", "then", "(", "decode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.main_bert.topk_bert_single_call": [[1163, 1243], ["torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "modeling.BertConfig.from_json_file", "main_bert.Sogou_Processor", "main_bert.Sogou_Processor.get_labels", "tokenization.FullTokenizer", "main_bert.Sogou_Processor.get_train_examples", "modeling.BertForSequenceClassification().to", "main_bert.convert_examples_to_features", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.utils.data.TensorDataset", "torch.utils.data.DataLoader", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "list", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel.register_comm_hook", "enumerate", "tuple", "torch.nn.parallel.DistributedDataParallel.", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.Event.record", "loss.backward", "torch.cuda.Event.record", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "list.append", "modeling.BertForSequenceClassification", "torch.nn.parallel.DistributedDataParallel.parameters", "torch.cuda.Event.elapsed_time", "s3_utils.uploadFile", "dict", "args.__str__", "s3_utils.uploadFile.push_file", "print", "len", "t.to", "open", "json.dump"], "function", ["home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.modeling.BertConfig.from_json_file", "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.main_bert.Dbpedia_Processor.get_labels", "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.main_bert.Dbpedia_Processor.get_train_examples", "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.main_bert.convert_examples_to_features", "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.s3_utils.uploadFile.push_file"], ["", "def", "topk_bert_single_call", "(", "args", ",", "topk_k", ")", ":", "\n", "    ", "assigned_device", "=", "\"cuda:{}\"", ".", "format", "(", "args", ".", "local_rank", ")", "\n", "torch", ".", "cuda", ".", "set_device", "(", "args", ".", "local_rank", ")", "\n", "global_rank", "=", "args", ".", "node_rank", "*", "8", "+", "args", ".", "local_rank", "\n", "\n", "data_dir", "=", "\"/home/ubuntu/bert_data/Sogou_data\"", "\n", "bert_config_file", "=", "\"/home/ubuntu/bert_data/chinese_L-12_H-768_A-12/bert_config.json\"", "\n", "task_name", "=", "\"sogou\"", "\n", "vocab_file", "=", "\"/home/ubuntu/bert_data/chinese_L-12_H-768_A-12/vocab.txt\"", "\n", "do_lower_case", "=", "True", "\n", "max_seq_length", "=", "args", ".", "max_seq_length", "\n", "train_batch_size", "=", "args", ".", "batch_size", "\n", "learning_rate", "=", "1e-5", "\n", "bert_config", "=", "BertConfig", ".", "from_json_file", "(", "bert_config_file", ")", "\n", "processor", "=", "Sogou_Processor", "(", ")", "\n", "label_list", "=", "processor", ".", "get_labels", "(", ")", "\n", "tokenizer", "=", "tokenization", ".", "FullTokenizer", "(", "vocab_file", "=", "vocab_file", ",", "\n", "do_lower_case", "=", "do_lower_case", ")", "\n", "train_examples", "=", "processor", ".", "get_train_examples", "(", "data_dir", ")", "\n", "model", "=", "BertForSequenceClassification", "(", "bert_config", ",", "\n", "len", "(", "label_list", ")", ")", ".", "to", "(", "assigned_device", ")", "\n", "train_features", "=", "convert_examples_to_features", "(", "train_examples", ",", "label_list", ",", "\n", "max_seq_length", ",", "tokenizer", ")", "\n", "\n", "\n", "all_input_ids", "=", "torch", ".", "tensor", "(", "[", "f", ".", "input_ids", "for", "f", "in", "train_features", "]", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "all_input_mask", "=", "torch", ".", "tensor", "(", "[", "f", ".", "input_mask", "for", "f", "in", "train_features", "]", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "all_segment_ids", "=", "torch", ".", "tensor", "(", "[", "f", ".", "segment_ids", "for", "f", "in", "train_features", "]", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "all_label_ids", "=", "torch", ".", "tensor", "(", "[", "f", ".", "label_id", "for", "f", "in", "train_features", "]", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "\n", "\n", "state", "=", "[", "parameter", "for", "parameter", "in", "model", ".", "parameters", "(", ")", "]", "\n", "\n", "train_data", "=", "TensorDataset", "(", "all_input_ids", ",", "all_input_mask", ",", "all_segment_ids", ",", "all_label_ids", ")", "\n", "\n", "train_dataloader", "=", "DataLoader", "(", "train_data", ",", "train_batch_size", ")", "\n", "\n", "start_time", "=", "torch", ".", "cuda", ".", "Event", "(", "enable_timing", "=", "True", ")", "\n", "stop_time", "=", "torch", ".", "cuda", ".", "Event", "(", "enable_timing", "=", "True", ")", "\n", "time_list", "=", "list", "(", ")", "\n", "\n", "model", "=", "torch", ".", "nn", ".", "parallel", ".", "DistributedDataParallel", "(", "model", ",", "\n", "device_ids", "=", "[", "args", ".", "local_rank", "]", ",", "\n", "output_device", "=", "args", ".", "local_rank", ")", "\n", "model", ".", "register_comm_hook", "(", "state", "=", "{", "'N'", ":", "100", ",", "'k'", ":", "topk_k", "}", ",", "hook", "=", "encode_decode", ")", "\n", "# reducer = _get_compression_param(\"Topk\", assigned_device, psgd_rank)", "\n", "\n", "# memories = [torch.zeros_like(p) for p in model.parameters()]", "\n", "# send_buffers = [torch.zeros_like(p) for p in model.parameters()]", "\n", "\n", "for", "idx", ",", "data", "in", "enumerate", "(", "train_dataloader", ")", ":", "\n", "        ", "batch", "=", "tuple", "(", "t", ".", "to", "(", "assigned_device", ")", "for", "t", "in", "data", ")", "\n", "input_ids", ",", "input_mask", ",", "segment_ids", ",", "label_ids", "=", "batch", "\n", "(", "loss", ",", "_", ")", "=", "model", "(", "input_ids", ",", "segment_ids", ",", "input_mask", ",", "label_ids", ")", "\n", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "start_time", ".", "record", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "# grad_list = [parameter.grad for parameter in model.parameters()]", "\n", "\n", "# for grad, memory, send_bfr in zip(grad_list, memories, send_buffers):", "\n", "# send_bfr.data[:] = grad + memory", "\n", "# reducer.reduce(send_buffers, grad_list, memories)", "\n", "\n", "stop_time", ".", "record", "(", ")", "\n", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "\n", "time_list", ".", "append", "(", "start_time", ".", "elapsed_time", "(", "stop_time", ")", ")", "\n", "if", "idx", "==", "60", ":", "\n", "            ", "file_uploader", "=", "s3_utils", ".", "uploadFile", "(", "\"large-scale-compression\"", ")", "\n", "data_dict", "=", "dict", "(", ")", "\n", "data_dict", "[", "'args'", "]", "=", "args", ".", "__str__", "(", ")", "\n", "data_dict", "[", "'timing_log'", "]", "=", "time_list", "\n", "file_name", "=", "\"bert_mstopk_overlap_{}_out_file_{}.json\"", ".", "format", "(", "\n", "topk_k", ",", "global_rank", ")", "\n", "with", "open", "(", "file_name", ",", "\"w\"", ")", "as", "fout", ":", "\n", "                ", "json", ".", "dump", "(", "data_dict", ",", "fout", ")", "\n", "", "file_uploader", ".", "push_file", "(", "file_name", ",", "\n", "\"{}/{}\"", ".", "format", "(", "args", ".", "s3_prefix", ",", "file_name", ")", ")", "\n", "print", "(", "\"Done bert\"", ")", "\n", "break", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.main_bert.mstopk_serial": [[1244, 1326], ["torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "modeling.BertConfig.from_json_file", "main_bert.Sogou_Processor", "main_bert.Sogou_Processor.get_labels", "tokenization.FullTokenizer", "main_bert.Sogou_Processor.get_train_examples", "modeling.BertForSequenceClassification().to", "main_bert.convert_examples_to_features", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.utils.data.TensorDataset", "torch.utils.data.DataLoader", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "list", "main_bert._get_compression_param", "BertForSequenceClassification().to.train", "enumerate", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "tuple", "BertForSequenceClassification().to.", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.Event.record", "loss.backward", "_get_compression_param.reduce", "torch.cuda.Event.record", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "list.append", "modeling.BertForSequenceClassification", "BertForSequenceClassification().to.parameters", "BertForSequenceClassification().to.parameters", "torch.cuda.Event.elapsed_time", "s3_utils.uploadFile", "dict", "args.__str__", "s3_utils.uploadFile.push_file", "print", "len", "t.to", "BertForSequenceClassification().to.parameters", "open", "json.dump"], "function", ["home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.modeling.BertConfig.from_json_file", "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.main_bert.Dbpedia_Processor.get_labels", "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.main_bert.Dbpedia_Processor.get_train_examples", "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.main_bert.convert_examples_to_features", "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.main_ddp_final._get_compression_param", "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.gradient_reducers.ExactReducerPs.reduce", "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.s3_utils.uploadFile.push_file"], ["", "", "", "def", "mstopk_serial", "(", "args", ",", "topk_k", ")", ":", "\n", "    ", "assigned_device", "=", "\"cuda:{}\"", ".", "format", "(", "args", ".", "local_rank", ")", "\n", "torch", ".", "cuda", ".", "set_device", "(", "args", ".", "local_rank", ")", "\n", "global_rank", "=", "args", ".", "node_rank", "*", "8", "+", "args", ".", "local_rank", "\n", "\n", "data_dir", "=", "\"/home/ubuntu/bert_data/Sogou_data\"", "\n", "bert_config_file", "=", "\"/home/ubuntu/bert_data/chinese_L-12_H-768_A-12/bert_config.json\"", "\n", "task_name", "=", "\"sogou\"", "\n", "vocab_file", "=", "\"/home/ubuntu/bert_data/chinese_L-12_H-768_A-12/vocab.txt\"", "\n", "do_lower_case", "=", "True", "\n", "max_seq_length", "=", "args", ".", "max_seq_length", "\n", "train_batch_size", "=", "args", ".", "batch_size", "\n", "learning_rate", "=", "1e-5", "\n", "bert_config", "=", "BertConfig", ".", "from_json_file", "(", "bert_config_file", ")", "\n", "processor", "=", "Sogou_Processor", "(", ")", "\n", "label_list", "=", "processor", ".", "get_labels", "(", ")", "\n", "tokenizer", "=", "tokenization", ".", "FullTokenizer", "(", "vocab_file", "=", "vocab_file", ",", "\n", "do_lower_case", "=", "do_lower_case", ")", "\n", "train_examples", "=", "processor", ".", "get_train_examples", "(", "data_dir", ")", "\n", "model", "=", "BertForSequenceClassification", "(", "bert_config", ",", "\n", "len", "(", "label_list", ")", ")", ".", "to", "(", "assigned_device", ")", "\n", "train_features", "=", "convert_examples_to_features", "(", "train_examples", ",", "label_list", ",", "\n", "max_seq_length", ",", "tokenizer", ")", "\n", "\n", "\n", "all_input_ids", "=", "torch", ".", "tensor", "(", "[", "f", ".", "input_ids", "for", "f", "in", "train_features", "]", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "all_input_mask", "=", "torch", ".", "tensor", "(", "[", "f", ".", "input_mask", "for", "f", "in", "train_features", "]", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "all_segment_ids", "=", "torch", ".", "tensor", "(", "[", "f", ".", "segment_ids", "for", "f", "in", "train_features", "]", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "all_label_ids", "=", "torch", ".", "tensor", "(", "[", "f", ".", "label_id", "for", "f", "in", "train_features", "]", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "\n", "\n", "state", "=", "[", "parameter", "for", "parameter", "in", "model", ".", "parameters", "(", ")", "]", "\n", "\n", "train_data", "=", "TensorDataset", "(", "all_input_ids", ",", "all_input_mask", ",", "all_segment_ids", ",", "all_label_ids", ")", "\n", "\n", "train_dataloader", "=", "DataLoader", "(", "train_data", ",", "train_batch_size", ")", "\n", "\n", "start_time", "=", "torch", ".", "cuda", ".", "Event", "(", "enable_timing", "=", "True", ")", "\n", "stop_time", "=", "torch", ".", "cuda", ".", "Event", "(", "enable_timing", "=", "True", ")", "\n", "time_list", "=", "list", "(", ")", "\n", "\n", "# model = torch.nn.parallel.DistributedDataParallel(model,", "\n", "# device_ids=[args.local_rank],", "\n", "# output_device=args.local_rank)", "\n", "# model.register_comm_hook(state={'N':100, 'k':topk_k}, hook=encode_decode)", "\n", "# reducer = _get_compression_param(\"Topk\", assigned_device, psgd_rank)", "\n", "\n", "# memories = [torch.zeros_like(p) for p in model.parameters()]", "\n", "send_buffers", "=", "[", "torch", ".", "zeros_like", "(", "p", ")", "for", "p", "in", "model", ".", "parameters", "(", ")", "]", "\n", "reducer", "=", "_get_compression_param", "(", "\"MSTopK\"", ",", "assigned_device", ",", "topk_k", ")", "\n", "model", ".", "train", "(", ")", "\n", "\n", "for", "idx", ",", "data", "in", "enumerate", "(", "train_dataloader", ")", ":", "\n", "        ", "batch", "=", "tuple", "(", "t", ".", "to", "(", "assigned_device", ")", "for", "t", "in", "data", ")", "\n", "input_ids", ",", "input_mask", ",", "segment_ids", ",", "label_ids", "=", "batch", "\n", "(", "loss", ",", "_", ")", "=", "model", "(", "input_ids", ",", "segment_ids", ",", "input_mask", ",", "label_ids", ")", "\n", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "start_time", ".", "record", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "grad_list", "=", "[", "parameter", ".", "grad", "for", "parameter", "in", "model", ".", "parameters", "(", ")", "]", "\n", "\n", "# for grad, memory, send_bfr in zip(grad_list, memories, send_buffers):", "\n", "# send_bfr.data[:] = grad + memory", "\n", "reducer", ".", "reduce", "(", "send_buffers", ",", "grad_list", ")", "\n", "\n", "stop_time", ".", "record", "(", ")", "\n", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "\n", "time_list", ".", "append", "(", "start_time", ".", "elapsed_time", "(", "stop_time", ")", ")", "\n", "if", "idx", "==", "60", ":", "\n", "            ", "file_uploader", "=", "s3_utils", ".", "uploadFile", "(", "\"large-scale-compression\"", ")", "\n", "data_dict", "=", "dict", "(", ")", "\n", "data_dict", "[", "'args'", "]", "=", "args", ".", "__str__", "(", ")", "\n", "data_dict", "[", "'timing_log'", "]", "=", "time_list", "\n", "file_name", "=", "\"bert_mstopk_serial_{}_out_file_{}.json\"", ".", "format", "(", "\n", "topk_k", ",", "global_rank", ")", "\n", "with", "open", "(", "file_name", ",", "\"w\"", ")", "as", "fout", ":", "\n", "                ", "json", ".", "dump", "(", "data_dict", ",", "fout", ")", "\n", "", "file_uploader", ".", "push_file", "(", "file_name", ",", "\n", "\"{}/{}\"", ".", "format", "(", "args", ".", "s3_prefix", ",", "file_name", ")", ")", "\n", "print", "(", "\"Done bert\"", ")", "\n", "break", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.main_bert.encode_decode_signsgd": [[1328, 1351], ["gradient_reducers.SignCompressor", "gradient_reducers.SignCompressor.compress", "torch.all_gather().get_future", "dist.all_gather().get_future.then", "torch.empty_like", "torch.empty_like", "torch.empty_like", "torch.empty_like", "torch.empty_like", "torch.empty_like", "torch.empty_like", "sum_of_signs.sign", "bucket.get_tensors", "range", "torch.all_gather", "dist.all_gather().get_future.value", "gradient_reducers.SignCompressor.uncompress", "torch.get_world_size"], "function", ["home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.gradient_reducers.SignCompressor.compress", "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.gradient_reducers.all_gather", "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.gradient_reducers.SignCompressor.uncompress"], ["", "", "", "def", "encode_decode_signsgd", "(", "state", ",", "bucket", ")", ":", "\n", "    ", "\"\"\"\n    signsgd in parallel\n    \"\"\"", "\n", "sign_compressor", "=", "gradient_reducers", ".", "SignCompressor", "(", ")", "\n", "# tensor_flat = TensorBuffer(bucket)", "\n", "bits", ",", "sign_size", "=", "sign_compressor", ".", "compress", "(", "bucket", ".", "get_tensors", "(", ")", "[", "0", "]", ")", "\n", "copy_bits", "=", "[", "torch", ".", "empty_like", "(", "bits", ")", "for", "i", "in", "range", "(", "dist", ".", "get_world_size", "(", ")", ")", "]", "\n", "\n", "fut", "=", "dist", ".", "all_gather", "(", "copy_bits", ",", "bits", ",", "group", "=", "dist", ".", "group", ".", "WORLD", ",", "\n", "async_op", "=", "True", ")", ".", "get_future", "(", ")", "\n", "def", "decode", "(", "fut", ")", ":", "\n", "        ", "sum_of_signs", "=", "None", "\n", "agg_tensor", "=", "fut", ".", "value", "(", ")", "[", "0", "]", "\n", "for", "their_bits", "in", "agg_tensor", ":", "\n", "            ", "uncompressed", "=", "sign_compressor", ".", "uncompress", "(", "their_bits", ",", "sign_size", ")", "\n", "if", "sum_of_signs", "is", "None", ":", "\n", "                ", "sum_of_signs", "=", "uncompressed", "\n", "", "else", ":", "\n", "                ", "sum_of_signs", "+=", "uncompressed", "\n", "", "", "total_sign", "=", "sum_of_signs", ".", "sign", "(", ")", "\n", "return", "[", "total_sign", "]", "\n", "", "return", "fut", ".", "then", "(", "decode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.main_bert.signsgd_bert_single_call": [[1353, 1432], ["torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "modeling.BertConfig.from_json_file", "main_bert.Sogou_Processor", "main_bert.Sogou_Processor.get_labels", "tokenization.FullTokenizer", "main_bert.Sogou_Processor.get_train_examples", "modeling.BertForSequenceClassification().to", "main_bert.convert_examples_to_features", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.utils.data.TensorDataset", "torch.utils.data.DataLoader", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "list", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel.register_comm_hook", "enumerate", "tuple", "torch.nn.parallel.DistributedDataParallel.", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.Event.record", "loss.backward", "torch.cuda.Event.record", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "list.append", "modeling.BertForSequenceClassification", "torch.nn.parallel.DistributedDataParallel.parameters", "torch.cuda.Event.elapsed_time", "s3_utils.uploadFile", "dict", "args.__str__", "s3_utils.uploadFile.push_file", "print", "len", "t.to", "open", "json.dump"], "function", ["home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.modeling.BertConfig.from_json_file", "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.main_bert.Dbpedia_Processor.get_labels", "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.main_bert.Dbpedia_Processor.get_train_examples", "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.main_bert.convert_examples_to_features", "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.s3_utils.uploadFile.push_file"], ["", "def", "signsgd_bert_single_call", "(", "args", ")", ":", "\n", "    ", "assigned_device", "=", "\"cuda:{}\"", ".", "format", "(", "args", ".", "local_rank", ")", "\n", "torch", ".", "cuda", ".", "set_device", "(", "args", ".", "local_rank", ")", "\n", "global_rank", "=", "args", ".", "node_rank", "*", "8", "+", "args", ".", "local_rank", "\n", "\n", "data_dir", "=", "\"/home/ubuntu/bert_data/Sogou_data\"", "\n", "bert_config_file", "=", "\"/home/ubuntu/bert_data/chinese_L-12_H-768_A-12/bert_config.json\"", "\n", "task_name", "=", "\"sogou\"", "\n", "vocab_file", "=", "\"/home/ubuntu/bert_data/chinese_L-12_H-768_A-12/vocab.txt\"", "\n", "do_lower_case", "=", "True", "\n", "max_seq_length", "=", "args", ".", "max_seq_length", "\n", "train_batch_size", "=", "args", ".", "batch_size", "\n", "learning_rate", "=", "1e-5", "\n", "bert_config", "=", "BertConfig", ".", "from_json_file", "(", "bert_config_file", ")", "\n", "processor", "=", "Sogou_Processor", "(", ")", "\n", "label_list", "=", "processor", ".", "get_labels", "(", ")", "\n", "tokenizer", "=", "tokenization", ".", "FullTokenizer", "(", "vocab_file", "=", "vocab_file", ",", "\n", "do_lower_case", "=", "do_lower_case", ")", "\n", "train_examples", "=", "processor", ".", "get_train_examples", "(", "data_dir", ")", "\n", "model", "=", "BertForSequenceClassification", "(", "bert_config", ",", "\n", "len", "(", "label_list", ")", ")", ".", "to", "(", "assigned_device", ")", "\n", "train_features", "=", "convert_examples_to_features", "(", "train_examples", ",", "label_list", ",", "\n", "max_seq_length", ",", "tokenizer", ")", "\n", "\n", "\n", "all_input_ids", "=", "torch", ".", "tensor", "(", "[", "f", ".", "input_ids", "for", "f", "in", "train_features", "]", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "all_input_mask", "=", "torch", ".", "tensor", "(", "[", "f", ".", "input_mask", "for", "f", "in", "train_features", "]", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "all_segment_ids", "=", "torch", ".", "tensor", "(", "[", "f", ".", "segment_ids", "for", "f", "in", "train_features", "]", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "all_label_ids", "=", "torch", ".", "tensor", "(", "[", "f", ".", "label_id", "for", "f", "in", "train_features", "]", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "\n", "\n", "state", "=", "[", "parameter", "for", "parameter", "in", "model", ".", "parameters", "(", ")", "]", "\n", "\n", "train_data", "=", "TensorDataset", "(", "all_input_ids", ",", "all_input_mask", ",", "all_segment_ids", ",", "all_label_ids", ")", "\n", "\n", "train_dataloader", "=", "DataLoader", "(", "train_data", ",", "train_batch_size", ")", "\n", "\n", "start_time", "=", "torch", ".", "cuda", ".", "Event", "(", "enable_timing", "=", "True", ")", "\n", "stop_time", "=", "torch", ".", "cuda", ".", "Event", "(", "enable_timing", "=", "True", ")", "\n", "time_list", "=", "list", "(", ")", "\n", "\n", "model", "=", "torch", ".", "nn", ".", "parallel", ".", "DistributedDataParallel", "(", "model", ",", "\n", "device_ids", "=", "[", "args", ".", "local_rank", "]", ",", "\n", "output_device", "=", "args", ".", "local_rank", ")", "\n", "model", ".", "register_comm_hook", "(", "state", "=", "None", ",", "hook", "=", "encode_decode_signsgd", ")", "\n", "# reducer = _get_compression_param(\"Topk\", assigned_device, psgd_rank)", "\n", "\n", "# memories = [torch.zeros_like(p) for p in model.parameters()]", "\n", "# send_buffers = [torch.zeros_like(p) for p in model.parameters()]", "\n", "\n", "for", "idx", ",", "data", "in", "enumerate", "(", "train_dataloader", ")", ":", "\n", "        ", "batch", "=", "tuple", "(", "t", ".", "to", "(", "assigned_device", ")", "for", "t", "in", "data", ")", "\n", "input_ids", ",", "input_mask", ",", "segment_ids", ",", "label_ids", "=", "batch", "\n", "(", "loss", ",", "_", ")", "=", "model", "(", "input_ids", ",", "segment_ids", ",", "input_mask", ",", "label_ids", ")", "\n", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "start_time", ".", "record", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "# grad_list = [parameter.grad for parameter in model.parameters()]", "\n", "\n", "# for grad, memory, send_bfr in zip(grad_list, memories, send_buffers):", "\n", "# send_bfr.data[:] = grad + memory", "\n", "# reducer.reduce(send_buffers, grad_list, memories)", "\n", "\n", "stop_time", ".", "record", "(", ")", "\n", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "\n", "time_list", ".", "append", "(", "start_time", ".", "elapsed_time", "(", "stop_time", ")", ")", "\n", "if", "idx", "==", "60", ":", "\n", "            ", "file_uploader", "=", "s3_utils", ".", "uploadFile", "(", "\"large-scale-compression\"", ")", "\n", "data_dict", "=", "dict", "(", ")", "\n", "data_dict", "[", "'args'", "]", "=", "args", ".", "__str__", "(", ")", "\n", "data_dict", "[", "'timing_log'", "]", "=", "time_list", "\n", "file_name", "=", "\"bert_signsgd_overlap_out_file_{}.json\"", ".", "format", "(", "global_rank", ")", "\n", "with", "open", "(", "file_name", ",", "\"w\"", ")", "as", "fout", ":", "\n", "                ", "json", ".", "dump", "(", "data_dict", ",", "fout", ")", "\n", "", "file_uploader", ".", "push_file", "(", "file_name", ",", "\n", "\"{}/{}\"", ".", "format", "(", "args", ".", "s3_prefix", ",", "file_name", ")", ")", "\n", "print", "(", "\"Done bert\"", ")", "\n", "break", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.main_bert.signsgd_bert": [[1434, 1509], ["torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "modeling.BertConfig.from_json_file", "main_bert.Sogou_Processor", "main_bert.Sogou_Processor.get_labels", "tokenization.FullTokenizer", "main_bert.Sogou_Processor.get_train_examples", "modeling.BertForSequenceClassification().to", "main_bert.convert_examples_to_features", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.utils.data.TensorDataset", "torch.utils.data.DataLoader", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "list", "main_bert._get_compression_param", "enumerate", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "tuple", "BertForSequenceClassification().to.", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.Event.record", "loss.backward", "zip", "_get_compression_param.reduce", "torch.cuda.Event.record", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "list.append", "modeling.BertForSequenceClassification", "BertForSequenceClassification().to.parameters", "BertForSequenceClassification().to.parameters", "BertForSequenceClassification().to.parameters", "torch.cuda.Event.elapsed_time", "s3_utils.uploadFile", "dict", "args.__str__", "s3_utils.uploadFile.push_file", "print", "len", "t.to", "BertForSequenceClassification().to.parameters", "open", "json.dump"], "function", ["home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.modeling.BertConfig.from_json_file", "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.main_bert.Dbpedia_Processor.get_labels", "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.main_bert.Dbpedia_Processor.get_train_examples", "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.main_bert.convert_examples_to_features", "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.main_ddp_final._get_compression_param", "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.gradient_reducers.ExactReducerPs.reduce", "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.s3_utils.uploadFile.push_file"], ["", "", "", "def", "signsgd_bert", "(", "args", ")", ":", "\n", "    ", "assigned_device", "=", "\"cuda:{}\"", ".", "format", "(", "args", ".", "local_rank", ")", "\n", "torch", ".", "cuda", ".", "set_device", "(", "args", ".", "local_rank", ")", "\n", "global_rank", "=", "args", ".", "node_rank", "*", "8", "+", "args", ".", "local_rank", "\n", "\n", "data_dir", "=", "\"/home/ubuntu/bert_data/Sogou_data\"", "\n", "bert_config_file", "=", "\"/home/ubuntu/bert_data/chinese_L-12_H-768_A-12/bert_config.json\"", "\n", "task_name", "=", "\"sogou\"", "\n", "vocab_file", "=", "\"/home/ubuntu/bert_data/chinese_L-12_H-768_A-12/vocab.txt\"", "\n", "do_lower_case", "=", "True", "\n", "max_seq_length", "=", "args", ".", "max_seq_length", "\n", "train_batch_size", "=", "args", ".", "batch_size", "\n", "learning_rate", "=", "1e-5", "\n", "bert_config", "=", "BertConfig", ".", "from_json_file", "(", "bert_config_file", ")", "\n", "processor", "=", "Sogou_Processor", "(", ")", "\n", "label_list", "=", "processor", ".", "get_labels", "(", ")", "\n", "tokenizer", "=", "tokenization", ".", "FullTokenizer", "(", "vocab_file", "=", "vocab_file", ",", "\n", "do_lower_case", "=", "do_lower_case", ")", "\n", "train_examples", "=", "processor", ".", "get_train_examples", "(", "data_dir", ")", "\n", "model", "=", "BertForSequenceClassification", "(", "bert_config", ",", "\n", "len", "(", "label_list", ")", ")", ".", "to", "(", "assigned_device", ")", "\n", "train_features", "=", "convert_examples_to_features", "(", "train_examples", ",", "label_list", ",", "\n", "max_seq_length", ",", "tokenizer", ")", "\n", "\n", "\n", "all_input_ids", "=", "torch", ".", "tensor", "(", "[", "f", ".", "input_ids", "for", "f", "in", "train_features", "]", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "all_input_mask", "=", "torch", ".", "tensor", "(", "[", "f", ".", "input_mask", "for", "f", "in", "train_features", "]", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "all_segment_ids", "=", "torch", ".", "tensor", "(", "[", "f", ".", "segment_ids", "for", "f", "in", "train_features", "]", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "all_label_ids", "=", "torch", ".", "tensor", "(", "[", "f", ".", "label_id", "for", "f", "in", "train_features", "]", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "\n", "\n", "state", "=", "[", "parameter", "for", "parameter", "in", "model", ".", "parameters", "(", ")", "]", "\n", "\n", "train_data", "=", "TensorDataset", "(", "all_input_ids", ",", "all_input_mask", ",", "all_segment_ids", ",", "all_label_ids", ")", "\n", "\n", "train_dataloader", "=", "DataLoader", "(", "train_data", ",", "train_batch_size", ")", "\n", "\n", "start_time", "=", "torch", ".", "cuda", ".", "Event", "(", "enable_timing", "=", "True", ")", "\n", "stop_time", "=", "torch", ".", "cuda", ".", "Event", "(", "enable_timing", "=", "True", ")", "\n", "time_list", "=", "list", "(", ")", "\n", "\n", "reducer", "=", "_get_compression_param", "(", "\"SignSGD\"", ",", "assigned_device", ",", "None", ")", "\n", "\n", "memories", "=", "[", "torch", ".", "zeros_like", "(", "p", ")", "for", "p", "in", "model", ".", "parameters", "(", ")", "]", "\n", "send_buffers", "=", "[", "torch", ".", "zeros_like", "(", "p", ")", "for", "p", "in", "model", ".", "parameters", "(", ")", "]", "\n", "\n", "for", "idx", ",", "data", "in", "enumerate", "(", "train_dataloader", ")", ":", "\n", "        ", "batch", "=", "tuple", "(", "t", ".", "to", "(", "assigned_device", ")", "for", "t", "in", "data", ")", "\n", "input_ids", ",", "input_mask", ",", "segment_ids", ",", "label_ids", "=", "batch", "\n", "(", "loss", ",", "_", ")", "=", "model", "(", "input_ids", ",", "segment_ids", ",", "input_mask", ",", "label_ids", ")", "\n", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "start_time", ".", "record", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "grad_list", "=", "[", "parameter", ".", "grad", "for", "parameter", "in", "model", ".", "parameters", "(", ")", "]", "\n", "\n", "for", "grad", ",", "memory", ",", "send_bfr", "in", "zip", "(", "grad_list", ",", "memories", ",", "send_buffers", ")", ":", "\n", "            ", "send_bfr", ".", "data", "[", ":", "]", "=", "grad", "+", "memory", "\n", "", "reducer", ".", "reduce", "(", "send_buffers", ",", "grad_list", ",", "memories", ")", "\n", "\n", "stop_time", ".", "record", "(", ")", "\n", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "\n", "time_list", ".", "append", "(", "start_time", ".", "elapsed_time", "(", "stop_time", ")", ")", "\n", "if", "idx", "==", "60", ":", "\n", "            ", "file_uploader", "=", "s3_utils", ".", "uploadFile", "(", "\"large-scale-compression\"", ")", "\n", "data_dict", "=", "dict", "(", ")", "\n", "data_dict", "[", "'args'", "]", "=", "args", ".", "__str__", "(", ")", "\n", "data_dict", "[", "'timing_log'", "]", "=", "time_list", "\n", "file_name", "=", "\"bert_signsgd_serial_out_file_{}.json\"", ".", "format", "(", "global_rank", ")", "\n", "with", "open", "(", "file_name", ",", "\"w\"", ")", "as", "fout", ":", "\n", "                ", "json", ".", "dump", "(", "data_dict", ",", "fout", ")", "\n", "", "file_uploader", ".", "push_file", "(", "file_name", ",", "\n", "\"{}/{}\"", ".", "format", "(", "args", ".", "s3_prefix", ",", "file_name", ")", ")", "\n", "print", "(", "\"Done bert\"", ")", "\n", "break", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.main_bert.fullcomm_serial": [[1510, 1597], ["torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "modeling.BertConfig.from_json_file", "main_bert.Sogou_Processor", "main_bert.Sogou_Processor.get_labels", "tokenization.FullTokenizer", "main_bert.Sogou_Processor.get_train_examples", "modeling.BertForSequenceClassification().to", "main_bert.convert_examples_to_features", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.utils.data.TensorDataset", "torch.utils.data.DataLoader", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "list", "list", "main_bert._get_compression_param", "enumerate", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "tuple", "BertForSequenceClassification().to.", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.Event.record", "loss.backward", "torch.cuda.Event.record", "torch.cuda.Event.record", "zip", "_get_compression_param.reduce", "torch.cuda.Event.record", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "list.append", "list.append", "modeling.BertForSequenceClassification", "BertForSequenceClassification().to.parameters", "BertForSequenceClassification().to.parameters", "BertForSequenceClassification().to.parameters", "torch.cuda.Event.elapsed_time", "torch.cuda.Event.elapsed_time", "s3_utils.uploadFile", "dict", "args.__str__", "s3_utils.uploadFile.push_file", "print", "len", "t.to", "BertForSequenceClassification().to.parameters", "open", "json.dump"], "function", ["home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.modeling.BertConfig.from_json_file", "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.main_bert.Dbpedia_Processor.get_labels", "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.main_bert.Dbpedia_Processor.get_train_examples", "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.main_bert.convert_examples_to_features", "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.main_ddp_final._get_compression_param", "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.gradient_reducers.ExactReducerPs.reduce", "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.s3_utils.uploadFile.push_file"], ["", "", "", "def", "fullcomm_serial", "(", "args", ")", ":", "\n", "    ", "assigned_device", "=", "\"cuda:{}\"", ".", "format", "(", "args", ".", "local_rank", ")", "\n", "torch", ".", "cuda", ".", "set_device", "(", "args", ".", "local_rank", ")", "\n", "global_rank", "=", "args", ".", "node_rank", "*", "8", "+", "args", ".", "local_rank", "\n", "\n", "data_dir", "=", "\"/home/ubuntu/bert_data/Sogou_data\"", "\n", "bert_config_file", "=", "\"/home/ubuntu/bert_data/chinese_L-12_H-768_A-12/bert_config.json\"", "\n", "task_name", "=", "\"sogou\"", "\n", "vocab_file", "=", "\"/home/ubuntu/bert_data/chinese_L-12_H-768_A-12/vocab.txt\"", "\n", "do_lower_case", "=", "True", "\n", "max_seq_length", "=", "args", ".", "max_seq_length", "\n", "train_batch_size", "=", "args", ".", "batch_size", "\n", "learning_rate", "=", "1e-5", "\n", "bert_config", "=", "BertConfig", ".", "from_json_file", "(", "bert_config_file", ")", "\n", "processor", "=", "Sogou_Processor", "(", ")", "\n", "label_list", "=", "processor", ".", "get_labels", "(", ")", "\n", "tokenizer", "=", "tokenization", ".", "FullTokenizer", "(", "vocab_file", "=", "vocab_file", ",", "\n", "do_lower_case", "=", "do_lower_case", ")", "\n", "train_examples", "=", "processor", ".", "get_train_examples", "(", "data_dir", ")", "\n", "model", "=", "BertForSequenceClassification", "(", "bert_config", ",", "\n", "len", "(", "label_list", ")", ")", ".", "to", "(", "assigned_device", ")", "\n", "train_features", "=", "convert_examples_to_features", "(", "train_examples", ",", "label_list", ",", "\n", "max_seq_length", ",", "tokenizer", ")", "\n", "\n", "\n", "all_input_ids", "=", "torch", ".", "tensor", "(", "[", "f", ".", "input_ids", "for", "f", "in", "train_features", "]", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "all_input_mask", "=", "torch", ".", "tensor", "(", "[", "f", ".", "input_mask", "for", "f", "in", "train_features", "]", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "all_segment_ids", "=", "torch", ".", "tensor", "(", "[", "f", ".", "segment_ids", "for", "f", "in", "train_features", "]", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "all_label_ids", "=", "torch", ".", "tensor", "(", "[", "f", ".", "label_id", "for", "f", "in", "train_features", "]", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "\n", "\n", "state", "=", "[", "parameter", "for", "parameter", "in", "model", ".", "parameters", "(", ")", "]", "\n", "\n", "train_data", "=", "TensorDataset", "(", "all_input_ids", ",", "all_input_mask", ",", "all_segment_ids", ",", "all_label_ids", ")", "\n", "\n", "train_dataloader", "=", "DataLoader", "(", "train_data", ",", "train_batch_size", ")", "\n", "\n", "start_time_backward", "=", "torch", ".", "cuda", ".", "Event", "(", "enable_timing", "=", "True", ")", "\n", "stop_time_backward", "=", "torch", ".", "cuda", ".", "Event", "(", "enable_timing", "=", "True", ")", "\n", "\n", "start_time_comm", "=", "torch", ".", "cuda", ".", "Event", "(", "enable_timing", "=", "True", ")", "\n", "stop_time_comm", "=", "torch", ".", "cuda", ".", "Event", "(", "enable_timing", "=", "True", ")", "\n", "\n", "time_comm_list", "=", "list", "(", ")", "\n", "time_backward_list", "=", "list", "(", ")", "\n", "\n", "reducer", "=", "_get_compression_param", "(", "\"ExactSerial\"", ",", "assigned_device", ",", "None", ")", "\n", "\n", "memories", "=", "[", "torch", ".", "zeros_like", "(", "p", ")", "for", "p", "in", "model", ".", "parameters", "(", ")", "]", "\n", "send_buffers", "=", "[", "torch", ".", "zeros_like", "(", "p", ")", "for", "p", "in", "model", ".", "parameters", "(", ")", "]", "\n", "\n", "for", "idx", ",", "data", "in", "enumerate", "(", "train_dataloader", ")", ":", "\n", "        ", "batch", "=", "tuple", "(", "t", ".", "to", "(", "assigned_device", ")", "for", "t", "in", "data", ")", "\n", "input_ids", ",", "input_mask", ",", "segment_ids", ",", "label_ids", "=", "batch", "\n", "(", "loss", ",", "_", ")", "=", "model", "(", "input_ids", ",", "segment_ids", ",", "input_mask", ",", "label_ids", ")", "\n", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "start_time_backward", ".", "record", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "stop_time_backward", ".", "record", "(", ")", "\n", "\n", "start_time_comm", ".", "record", "(", ")", "\n", "grad_list", "=", "[", "parameter", ".", "grad", "for", "parameter", "in", "model", ".", "parameters", "(", ")", "]", "\n", "\n", "for", "grad", ",", "memory", ",", "send_bfr", "in", "zip", "(", "grad_list", ",", "memories", ",", "send_buffers", ")", ":", "\n", "            ", "send_bfr", ".", "data", "[", ":", "]", "=", "grad", "+", "memory", "\n", "", "reducer", ".", "reduce", "(", "send_buffers", ",", "grad_list", ",", "memories", ")", "\n", "\n", "stop_time_comm", ".", "record", "(", ")", "\n", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "\n", "time_comm_list", ".", "append", "(", "start_time_comm", ".", "elapsed_time", "(", "stop_time_comm", ")", ")", "\n", "\n", "time_backward_list", ".", "append", "(", "start_time_backward", ".", "elapsed_time", "(", "stop_time_backward", ")", ")", "\n", "\n", "if", "idx", "==", "60", ":", "\n", "            ", "file_uploader", "=", "s3_utils", ".", "uploadFile", "(", "\"large-scale-compression\"", ")", "\n", "data_dict", "=", "dict", "(", ")", "\n", "data_dict", "[", "'args'", "]", "=", "args", ".", "__str__", "(", ")", "\n", "data_dict", "[", "'comm_timing_log'", "]", "=", "time_comm_list", "\n", "data_dict", "[", "'backward_timing_log'", "]", "=", "time_backward_list", "\n", "file_name", "=", "\"bert_serial_full_out_file_{}.json\"", ".", "format", "(", "global_rank", ")", "\n", "with", "open", "(", "file_name", ",", "\"w\"", ")", "as", "fout", ":", "\n", "                ", "json", ".", "dump", "(", "data_dict", ",", "fout", ")", "\n", "", "file_uploader", ".", "push_file", "(", "file_name", ",", "\n", "\"{}/{}\"", ".", "format", "(", "args", ".", "s3_prefix", ",", "file_name", ")", ")", "\n", "print", "(", "\"Done bert\"", ")", "\n", "break", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.main_bert.fullcomm_serial_ps": [[1598, 1685], ["torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "modeling.BertConfig.from_json_file", "main_bert.Sogou_Processor", "main_bert.Sogou_Processor.get_labels", "tokenization.FullTokenizer", "main_bert.Sogou_Processor.get_train_examples", "modeling.BertForSequenceClassification().to", "main_bert.convert_examples_to_features", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.utils.data.TensorDataset", "torch.utils.data.DataLoader", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "list", "list", "main_bert._get_compression_param", "enumerate", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "tuple", "BertForSequenceClassification().to.", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.Event.record", "loss.backward", "torch.cuda.Event.record", "torch.cuda.Event.record", "zip", "_get_compression_param.reduce", "torch.cuda.Event.record", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "list.append", "list.append", "modeling.BertForSequenceClassification", "BertForSequenceClassification().to.parameters", "BertForSequenceClassification().to.parameters", "BertForSequenceClassification().to.parameters", "torch.cuda.Event.elapsed_time", "torch.cuda.Event.elapsed_time", "s3_utils.uploadFile", "dict", "args.__str__", "s3_utils.uploadFile.push_file", "print", "len", "t.to", "BertForSequenceClassification().to.parameters", "open", "json.dump"], "function", ["home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.modeling.BertConfig.from_json_file", "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.main_bert.Dbpedia_Processor.get_labels", "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.main_bert.Dbpedia_Processor.get_train_examples", "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.main_bert.convert_examples_to_features", "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.main_ddp_final._get_compression_param", "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.gradient_reducers.ExactReducerPs.reduce", "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.s3_utils.uploadFile.push_file"], ["", "", "", "def", "fullcomm_serial_ps", "(", "args", ")", ":", "\n", "    ", "assigned_device", "=", "\"cuda:{}\"", ".", "format", "(", "args", ".", "local_rank", ")", "\n", "torch", ".", "cuda", ".", "set_device", "(", "args", ".", "local_rank", ")", "\n", "global_rank", "=", "args", ".", "node_rank", "*", "8", "+", "args", ".", "local_rank", "\n", "\n", "data_dir", "=", "\"/home/ubuntu/bert_data/Sogou_data\"", "\n", "bert_config_file", "=", "\"/home/ubuntu/bert_data/chinese_L-12_H-768_A-12/bert_config.json\"", "\n", "task_name", "=", "\"sogou\"", "\n", "vocab_file", "=", "\"/home/ubuntu/bert_data/chinese_L-12_H-768_A-12/vocab.txt\"", "\n", "do_lower_case", "=", "True", "\n", "max_seq_length", "=", "args", ".", "max_seq_length", "\n", "train_batch_size", "=", "args", ".", "batch_size", "\n", "learning_rate", "=", "1e-5", "\n", "bert_config", "=", "BertConfig", ".", "from_json_file", "(", "bert_config_file", ")", "\n", "processor", "=", "Sogou_Processor", "(", ")", "\n", "label_list", "=", "processor", ".", "get_labels", "(", ")", "\n", "tokenizer", "=", "tokenization", ".", "FullTokenizer", "(", "vocab_file", "=", "vocab_file", ",", "\n", "do_lower_case", "=", "do_lower_case", ")", "\n", "train_examples", "=", "processor", ".", "get_train_examples", "(", "data_dir", ")", "\n", "model", "=", "BertForSequenceClassification", "(", "bert_config", ",", "\n", "len", "(", "label_list", ")", ")", ".", "to", "(", "assigned_device", ")", "\n", "train_features", "=", "convert_examples_to_features", "(", "train_examples", ",", "label_list", ",", "\n", "max_seq_length", ",", "tokenizer", ")", "\n", "\n", "\n", "all_input_ids", "=", "torch", ".", "tensor", "(", "[", "f", ".", "input_ids", "for", "f", "in", "train_features", "]", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "all_input_mask", "=", "torch", ".", "tensor", "(", "[", "f", ".", "input_mask", "for", "f", "in", "train_features", "]", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "all_segment_ids", "=", "torch", ".", "tensor", "(", "[", "f", ".", "segment_ids", "for", "f", "in", "train_features", "]", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "all_label_ids", "=", "torch", ".", "tensor", "(", "[", "f", ".", "label_id", "for", "f", "in", "train_features", "]", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "\n", "\n", "state", "=", "[", "parameter", "for", "parameter", "in", "model", ".", "parameters", "(", ")", "]", "\n", "\n", "train_data", "=", "TensorDataset", "(", "all_input_ids", ",", "all_input_mask", ",", "all_segment_ids", ",", "all_label_ids", ")", "\n", "\n", "train_dataloader", "=", "DataLoader", "(", "train_data", ",", "train_batch_size", ")", "\n", "\n", "start_time_backward", "=", "torch", ".", "cuda", ".", "Event", "(", "enable_timing", "=", "True", ")", "\n", "stop_time_backward", "=", "torch", ".", "cuda", ".", "Event", "(", "enable_timing", "=", "True", ")", "\n", "\n", "start_time_comm", "=", "torch", ".", "cuda", ".", "Event", "(", "enable_timing", "=", "True", ")", "\n", "stop_time_comm", "=", "torch", ".", "cuda", ".", "Event", "(", "enable_timing", "=", "True", ")", "\n", "\n", "time_comm_list", "=", "list", "(", ")", "\n", "time_backward_list", "=", "list", "(", ")", "\n", "\n", "reducer", "=", "_get_compression_param", "(", "\"ExactSerial_ps\"", ",", "assigned_device", ",", "None", ")", "\n", "\n", "memories", "=", "[", "torch", ".", "zeros_like", "(", "p", ")", "for", "p", "in", "model", ".", "parameters", "(", ")", "]", "\n", "send_buffers", "=", "[", "torch", ".", "zeros_like", "(", "p", ")", "for", "p", "in", "model", ".", "parameters", "(", ")", "]", "\n", "\n", "for", "idx", ",", "data", "in", "enumerate", "(", "train_dataloader", ")", ":", "\n", "        ", "batch", "=", "tuple", "(", "t", ".", "to", "(", "assigned_device", ")", "for", "t", "in", "data", ")", "\n", "input_ids", ",", "input_mask", ",", "segment_ids", ",", "label_ids", "=", "batch", "\n", "(", "loss", ",", "_", ")", "=", "model", "(", "input_ids", ",", "segment_ids", ",", "input_mask", ",", "label_ids", ")", "\n", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "start_time_backward", ".", "record", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "stop_time_backward", ".", "record", "(", ")", "\n", "\n", "start_time_comm", ".", "record", "(", ")", "\n", "grad_list", "=", "[", "parameter", ".", "grad", "for", "parameter", "in", "model", ".", "parameters", "(", ")", "]", "\n", "\n", "for", "grad", ",", "memory", ",", "send_bfr", "in", "zip", "(", "grad_list", ",", "memories", ",", "send_buffers", ")", ":", "\n", "            ", "send_bfr", ".", "data", "[", ":", "]", "=", "grad", "+", "memory", "\n", "", "reducer", ".", "reduce", "(", "send_buffers", ",", "grad_list", ",", "memories", ")", "\n", "\n", "stop_time_comm", ".", "record", "(", ")", "\n", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "\n", "time_comm_list", ".", "append", "(", "start_time_comm", ".", "elapsed_time", "(", "stop_time_comm", ")", ")", "\n", "\n", "time_backward_list", ".", "append", "(", "start_time_backward", ".", "elapsed_time", "(", "stop_time_backward", ")", ")", "\n", "\n", "if", "idx", "==", "60", ":", "\n", "            ", "file_uploader", "=", "s3_utils", ".", "uploadFile", "(", "\"large-scale-compression\"", ")", "\n", "data_dict", "=", "dict", "(", ")", "\n", "data_dict", "[", "'args'", "]", "=", "args", ".", "__str__", "(", ")", "\n", "data_dict", "[", "'comm_timing_log'", "]", "=", "time_comm_list", "\n", "data_dict", "[", "'backward_timing_log'", "]", "=", "time_backward_list", "\n", "file_name", "=", "\"bert_serial_full_out_ps_file_{}.json\"", ".", "format", "(", "global_rank", ")", "\n", "with", "open", "(", "file_name", ",", "\"w\"", ")", "as", "fout", ":", "\n", "                ", "json", ".", "dump", "(", "data_dict", ",", "fout", ")", "\n", "", "file_uploader", ".", "push_file", "(", "file_name", ",", "\n", "\"{}/{}\"", ".", "format", "(", "args", ".", "s3_prefix", ",", "file_name", ")", ")", "\n", "print", "(", "\"Done bert\"", ")", "\n", "break", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.launch_ec2_run_commands.launch_instances": [[25, 104], ["boto3.client", "boto3.resource", "list", "list", "print", "time.sleep", "print", "boto3.resource.instances.filter", "boto3.client.request_spot_instances", "print", "print", "sys.exit", "list.append", "boto3.client.describe_spot_instance_requests", "time.sleep", "print", "sys.exit", "boto3.client.describe_instance_status", "print", "private_ip.append", "print", "public_ip.append", "print", "len", "print", "print", "list.append", "print"], "function", ["None"], ["def", "launch_instances", "(", ")", ":", "\n", "    ", "client", "=", "boto3", ".", "client", "(", "\"ec2\"", ",", "region_name", "=", "launch_cfg", "[", "\"region\"", "]", ")", "\n", "ec2", "=", "boto3", ".", "resource", "(", "\"ec2\"", ",", "region_name", "=", "launch_cfg", "[", "\"region\"", "]", ")", "\n", "\n", "instance_lifecycle", "=", "launch_cfg", "[", "'method'", "]", "\n", "instance_count", "=", "launch_cfg", "[", "'instance_count'", "]", "\n", "launch_dict", "=", "{", "\"KeyName\"", ":", "launch_cfg", "[", "'key_name'", "]", ",", "\n", "\"ImageId\"", ":", "launch_cfg", "[", "'ami_id'", "]", ",", "\n", "\"InstanceType\"", ":", "launch_cfg", "[", "'instance_type'", "]", ",", "\n", "\"Placement\"", ":", "{", "\"AvailabilityZone\"", ":", "launch_cfg", "[", "'az'", "]", "}", ",", "\n", "\"SecurityGroups\"", ":", "[", "\"pytorch-distributed\"", "]", ",", "\n", "\"IamInstanceProfile\"", ":", "{", "'Name'", ":", "launch_cfg", "[", "'iam_role'", "]", "}", "\n", "}", "\n", "\n", "if", "instance_lifecycle", "==", "\"spot\"", ":", "\n", "        ", "response", "=", "client", ".", "request_spot_instances", "(", "\n", "InstanceCount", "=", "launch_cfg", "[", "'instance_count'", "]", ",", "\n", "LaunchSpecification", "=", "launch_dict", ",", "\n", "SpotPrice", "=", "launch_cfg", "[", "'spot_price'", "]", ",", "\n", ")", "\n", "print", "(", "response", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "\"Spot is not being used\"", ")", "\n", "sys", ".", "exit", "(", ")", "\n", "\n", "", "request_ids", "=", "list", "(", ")", "\n", "for", "request", "in", "response", "[", "'SpotInstanceRequests'", "]", ":", "\n", "        ", "request_ids", ".", "append", "(", "request", "[", "'SpotInstanceRequestId'", "]", ")", "\n", "\n", "\n", "", "fulfilled_instances", "=", "list", "(", ")", "\n", "loop", "=", "True", "\n", "\n", "print", "(", "\"Waiting for requests to fulfill\"", ")", "\n", "time", ".", "sleep", "(", "5", ")", "\n", "while", "loop", ":", "\n", "        ", "request", "=", "client", ".", "describe_spot_instance_requests", "(", "\n", "SpotInstanceRequestIds", "=", "request_ids", ")", "\n", "for", "req", "in", "request", "[", "'SpotInstanceRequests'", "]", ":", "\n", "            ", "print", "(", "req", ")", "\n", "if", "req", "[", "'State'", "]", "in", "[", "'closed'", ",", "'cancelled'", ",", "'failed'", "]", ":", "\n", "                ", "print", "(", "\"{}:{}\"", ".", "format", "(", "req", "[", "'SpotInstanceRequestId'", "]", ",", "\n", "req", "[", "'State'", "]", ")", ")", "\n", "loop", "=", "False", "\n", "break", "\n", "", "if", "'InstanceId'", "in", "req", "and", "req", "[", "'InstanceId'", "]", ":", "\n", "                ", "fulfilled_instances", ".", "append", "(", "req", "[", "'InstanceId'", "]", ")", "\n", "print", "(", "req", "[", "'InstanceId'", "]", "+", "'running...'", ")", "\n", "", "", "if", "len", "(", "fulfilled_instances", ")", "==", "launch_cfg", "[", "'instance_count'", "]", ":", "\n", "            ", "print", "(", "\"All requested instances are fulfilled\"", ")", "\n", "break", "\n", "", "time", ".", "sleep", "(", "5", ")", "\n", "", "if", "loop", "==", "False", ":", "\n", "        ", "print", "(", "\"Unable to fulfill all requested instance ..\"", ")", "\n", "sys", ".", "exit", "(", ")", "\n", "\n", "", "while", "loop", ":", "\n", "        ", "loop", "=", "False", "\n", "response", "=", "client", ".", "describe_instance_status", "(", "\n", "InstanceIds", "=", "fulfilled_instances", ")", "\n", "for", "status", "in", "response", "[", "'InstanceStatuses'", "]", ":", "\n", "            ", "if", "status", "[", "'InstanceType'", "]", "[", "'Name'", "]", "!=", "'running'", ":", "\n", "                ", "loop", "=", "True", "\n", "", "", "", "print", "(", "'All instances are running ..'", ")", "\n", "\n", "\n", "#getting host keys", "\n", "\n", "instance_collection", "=", "ec2", ".", "instances", ".", "filter", "(", "Filters", "=", "[", "{", "'Name'", ":", "'instance-id'", ",", "\n", "'Values'", ":", "\n", "fulfilled_instances", "}", "]", ")", "\n", "private_ip", "=", "[", "]", "\n", "public_ip", "=", "[", "]", "\n", "for", "instance", "in", "instance_collection", ":", "\n", "        ", "print", "(", "instance", ".", "private_ip_address", ")", "\n", "private_ip", ".", "append", "(", "instance", ".", "private_ip_address", ")", "\n", "print", "(", "instance", ".", "public_ip_address", ")", "\n", "public_ip", ".", "append", "(", "instance", ".", "public_ip_address", ")", "\n", "", "return", "(", "private_ip", ",", "public_ip", ",", "fulfilled_instances", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.launch_ec2_run_commands.terminate_instances": [[106, 116], ["print", "boto3.client", "boto3.resource", "boto3.resource.instances.filter", "print", "instance.terminate"], "function", ["None"], ["", "def", "terminate_instances", "(", "instance_id", ")", ":", "\n", "    ", "print", "(", "\"Terminating instances ....\"", ")", "\n", "client", "=", "boto3", ".", "client", "(", "\"ec2\"", ",", "region_name", "=", "launch_cfg", "[", "\"region\"", "]", ")", "\n", "ec2", "=", "boto3", ".", "resource", "(", "\"ec2\"", ",", "region_name", "=", "launch_cfg", "[", "\"region\"", "]", ")", "\n", "instance_collection", "=", "ec2", ".", "instances", ".", "filter", "(", "Filters", "=", "[", "{", "'Name'", ":", "'instance-id'", ",", "\n", "'Values'", ":", "\n", "instance_id", "}", "]", ")", "\n", "for", "instance", "in", "instance_collection", ":", "\n", "        ", "instance", ".", "terminate", "(", ")", "\n", "", "print", "(", "\"Bye Bye instances ...\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.launch_ec2_run_commands.run_large_scale": [[117, 140], ["launch_ec2_run_commands.launch_instances", "time.sleep", "pssh.clients.ParallelSSHClient", "print", "pssh.clients.ParallelSSHClient.run_command", "pssh.clients.ParallelSSHClient.join", "launch_ec2_run_commands.terminate_instances", "range", "print", "print", "len"], "function", ["home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.launch_ec2_run_commands.launch_instances", "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.launch_ec2_run_commands.terminate_instances"], ["", "def", "run_large_scale", "(", ")", ":", "\n", "    ", "private_ip", ",", "public_ip", ",", "instance_ids", "=", "launch_instances", "(", ")", "\n", "time", ".", "sleep", "(", "1", ")", "\n", "# host_name = [\"ubuntu@{}\".format(i) for i in public_ip]", "\n", "client", "=", "ParallelSSHClient", "(", "public_ip", ",", "user", "=", "\"ubuntu\"", ",", "pkey", "=", "launch_cfg", "[", "'key_path'", "]", ")", "\n", "\n", "\n", "# bash run.sh resnet50 tcp://172.31.70.9:2345 0 64 /home/ubuntu/imagenet_data", "\n", "# cuda:0 temp PowerSGD 4 2  powersgd_rank_4_bsize_64_2machine", "\n", "\n", "run_args", "=", "[", "{", "'cmd'", ":", "\"git clone repo_code&& cd compression_imagenet_code && bash run_ddp_ps.sh {} {} 64 /home/ubuntu/imagenet_data trial {} ps_resnets_64 \"", ".", "format", "(", "private_ip", "[", "0", "]", ",", "i", ",", "len", "(", "private_ip", ")", ")", "}", "for", "i", "in", "range", "(", "launch_cfg", "[", "'instance_count'", "]", ")", "]", "\n", "print", "(", "run_args", ")", "\n", "output", "=", "client", ".", "run_command", "(", "'%(cmd)s'", ",", "host_args", "=", "run_args", ")", "\n", "\n", "for", "hosts_out", "in", "output", ":", "\n", "        ", "for", "line", "in", "hosts_out", ".", "stdout", ":", "\n", "            ", "print", "(", "line", ")", "\n", "\n", "", "for", "line", "in", "hosts_out", ".", "stderr", ":", "\n", "            ", "print", "(", "line", ")", "\n", "\n", "", "", "client", ".", "join", "(", "consume_output", "=", "True", ")", "\n", "terminate_instances", "(", "instance_ids", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.tokenization.FullTokenizer.__init__": [[104, 108], ["tokenization.load_vocab", "tokenization.BasicTokenizer", "tokenization.WordpieceTokenizer"], "methods", ["home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.tokenization.load_vocab"], ["def", "__init__", "(", "self", ",", "vocab_file", ",", "do_lower_case", "=", "True", ")", ":", "\n", "        ", "self", ".", "vocab", "=", "load_vocab", "(", "vocab_file", ")", "\n", "self", ".", "basic_tokenizer", "=", "BasicTokenizer", "(", "do_lower_case", "=", "do_lower_case", ")", "\n", "self", ".", "wordpiece_tokenizer", "=", "WordpieceTokenizer", "(", "vocab", "=", "self", ".", "vocab", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.tokenization.FullTokenizer.tokenize": [[109, 116], ["tokenization.FullTokenizer.basic_tokenizer.tokenize", "tokenization.FullTokenizer.wordpiece_tokenizer.tokenize", "split_tokens.append"], "methods", ["home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.tokenization.WordpieceTokenizer.tokenize", "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.tokenization.WordpieceTokenizer.tokenize"], ["", "def", "tokenize", "(", "self", ",", "text", ")", ":", "\n", "        ", "split_tokens", "=", "[", "]", "\n", "for", "token", "in", "self", ".", "basic_tokenizer", ".", "tokenize", "(", "text", ")", ":", "\n", "            ", "for", "sub_token", "in", "self", ".", "wordpiece_tokenizer", ".", "tokenize", "(", "token", ")", ":", "\n", "                ", "split_tokens", ".", "append", "(", "sub_token", ")", "\n", "\n", "", "", "return", "split_tokens", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.tokenization.FullTokenizer.convert_tokens_to_ids": [[117, 119], ["tokenization.FullTokenizer.convert_tokens_to_ids"], "methods", ["home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.tokenization.convert_tokens_to_ids"], ["", "def", "convert_tokens_to_ids", "(", "self", ",", "tokens", ")", ":", "\n", "        ", "return", "convert_tokens_to_ids", "(", "self", ".", "vocab", ",", "tokens", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.tokenization.BasicTokenizer.__init__": [[124, 131], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "do_lower_case", "=", "True", ")", ":", "\n", "        ", "\"\"\"Constructs a BasicTokenizer.\n\n        Args:\n          do_lower_case: Whether to lower case the input.\n        \"\"\"", "\n", "self", ".", "do_lower_case", "=", "do_lower_case", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.tokenization.BasicTokenizer.tokenize": [[132, 146], ["tokenization.convert_to_unicode", "tokenization.BasicTokenizer._clean_text", "tokenization.whitespace_tokenize", "tokenization.whitespace_tokenize", "split_tokens.extend", "tokenization.BasicTokenizer.lower", "tokenization.BasicTokenizer._run_strip_accents", "tokenization.BasicTokenizer._run_split_on_punc"], "methods", ["home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.tokenization.convert_to_unicode", "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.tokenization.BasicTokenizer._clean_text", "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.tokenization.whitespace_tokenize", "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.tokenization.whitespace_tokenize", "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.tokenization.BasicTokenizer._run_strip_accents", "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.tokenization.BasicTokenizer._run_split_on_punc"], ["", "def", "tokenize", "(", "self", ",", "text", ")", ":", "\n", "        ", "\"\"\"Tokenizes a piece of text.\"\"\"", "\n", "text", "=", "convert_to_unicode", "(", "text", ")", "\n", "text", "=", "self", ".", "_clean_text", "(", "text", ")", "\n", "orig_tokens", "=", "whitespace_tokenize", "(", "text", ")", "\n", "split_tokens", "=", "[", "]", "\n", "for", "token", "in", "orig_tokens", ":", "\n", "            ", "if", "self", ".", "do_lower_case", ":", "\n", "                ", "token", "=", "token", ".", "lower", "(", ")", "\n", "token", "=", "self", ".", "_run_strip_accents", "(", "token", ")", "\n", "", "split_tokens", ".", "extend", "(", "self", ".", "_run_split_on_punc", "(", "token", ")", ")", "\n", "\n", "", "output_tokens", "=", "whitespace_tokenize", "(", "\" \"", ".", "join", "(", "split_tokens", ")", ")", "\n", "return", "output_tokens", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.tokenization.BasicTokenizer._run_strip_accents": [[147, 157], ["unicodedata.normalize", "unicodedata.category", "output.append"], "methods", ["None"], ["", "def", "_run_strip_accents", "(", "self", ",", "text", ")", ":", "\n", "        ", "\"\"\"Strips accents from a piece of text.\"\"\"", "\n", "text", "=", "unicodedata", ".", "normalize", "(", "\"NFD\"", ",", "text", ")", "\n", "output", "=", "[", "]", "\n", "for", "char", "in", "text", ":", "\n", "            ", "cat", "=", "unicodedata", ".", "category", "(", "char", ")", "\n", "if", "cat", "==", "\"Mn\"", ":", "\n", "                ", "continue", "\n", "", "output", ".", "append", "(", "char", ")", "\n", "", "return", "\"\"", ".", "join", "(", "output", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.tokenization.BasicTokenizer._run_split_on_punc": [[158, 177], ["list", "len", "tokenization._is_punctuation", "output.append", "output[].append", "output.append"], "methods", ["home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.tokenization._is_punctuation"], ["", "def", "_run_split_on_punc", "(", "self", ",", "text", ")", ":", "\n", "        ", "\"\"\"Splits punctuation on a piece of text.\"\"\"", "\n", "chars", "=", "list", "(", "text", ")", "\n", "i", "=", "0", "\n", "start_new_word", "=", "True", "\n", "output", "=", "[", "]", "\n", "while", "i", "<", "len", "(", "chars", ")", ":", "\n", "            ", "char", "=", "chars", "[", "i", "]", "\n", "if", "_is_punctuation", "(", "char", ")", ":", "\n", "                ", "output", ".", "append", "(", "[", "char", "]", ")", "\n", "start_new_word", "=", "True", "\n", "", "else", ":", "\n", "                ", "if", "start_new_word", ":", "\n", "                    ", "output", ".", "append", "(", "[", "]", ")", "\n", "", "start_new_word", "=", "False", "\n", "output", "[", "-", "1", "]", ".", "append", "(", "char", ")", "\n", "", "i", "+=", "1", "\n", "\n", "", "return", "[", "\"\"", ".", "join", "(", "x", ")", "for", "x", "in", "output", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.tokenization.BasicTokenizer._clean_text": [[178, 190], ["ord", "tokenization._is_whitespace", "tokenization._is_control", "output.append", "output.append"], "methods", ["home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.tokenization._is_whitespace", "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.tokenization._is_control"], ["", "def", "_clean_text", "(", "self", ",", "text", ")", ":", "\n", "        ", "\"\"\"Performs invalid character removal and whitespace cleanup on text.\"\"\"", "\n", "output", "=", "[", "]", "\n", "for", "char", "in", "text", ":", "\n", "            ", "cp", "=", "ord", "(", "char", ")", "\n", "if", "cp", "==", "0", "or", "cp", "==", "0xfffd", "or", "_is_control", "(", "char", ")", ":", "\n", "                ", "continue", "\n", "", "if", "_is_whitespace", "(", "char", ")", ":", "\n", "                ", "output", ".", "append", "(", "\" \"", ")", "\n", "", "else", ":", "\n", "                ", "output", ".", "append", "(", "char", ")", "\n", "", "", "return", "\"\"", ".", "join", "(", "output", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.tokenization.WordpieceTokenizer.__init__": [[195, 199], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "vocab", ",", "unk_token", "=", "\"[UNK]\"", ",", "max_input_chars_per_word", "=", "100", ")", ":", "\n", "        ", "self", ".", "vocab", "=", "vocab", "\n", "self", ".", "unk_token", "=", "unk_token", "\n", "self", ".", "max_input_chars_per_word", "=", "max_input_chars_per_word", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.tokenization.WordpieceTokenizer.tokenize": [[200, 252], ["tokenization.convert_to_unicode", "tokenization.whitespace_tokenize", "list", "len", "output_tokens.append", "len", "len", "sub_tokens.append", "output_tokens.append", "output_tokens.extend"], "methods", ["home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.tokenization.convert_to_unicode", "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.tokenization.whitespace_tokenize"], ["", "def", "tokenize", "(", "self", ",", "text", ")", ":", "\n", "        ", "\"\"\"Tokenizes a piece of text into its word pieces.\n\n        This uses a greedy longest-match-first algorithm to perform tokenization\n        using the given vocabulary.\n\n        For example:\n          input = \"unaffable\"\n          output = [\"un\", \"##aff\", \"##able\"]\n\n        Args:\n          text: A single token or whitespace separated tokens. This should have\n            already been passed through `BasicTokenizer.\n\n        Returns:\n          A list of wordpiece tokens.\n        \"\"\"", "\n", "\n", "text", "=", "convert_to_unicode", "(", "text", ")", "\n", "\n", "output_tokens", "=", "[", "]", "\n", "for", "token", "in", "whitespace_tokenize", "(", "text", ")", ":", "\n", "            ", "chars", "=", "list", "(", "token", ")", "\n", "if", "len", "(", "chars", ")", ">", "self", ".", "max_input_chars_per_word", ":", "\n", "                ", "output_tokens", ".", "append", "(", "self", ".", "unk_token", ")", "\n", "continue", "\n", "\n", "", "is_bad", "=", "False", "\n", "start", "=", "0", "\n", "sub_tokens", "=", "[", "]", "\n", "while", "start", "<", "len", "(", "chars", ")", ":", "\n", "                ", "end", "=", "len", "(", "chars", ")", "\n", "cur_substr", "=", "None", "\n", "while", "start", "<", "end", ":", "\n", "                    ", "substr", "=", "\"\"", ".", "join", "(", "chars", "[", "start", ":", "end", "]", ")", "\n", "if", "start", ">", "0", ":", "\n", "                        ", "substr", "=", "\"##\"", "+", "substr", "\n", "", "if", "substr", "in", "self", ".", "vocab", ":", "\n", "                        ", "cur_substr", "=", "substr", "\n", "break", "\n", "", "end", "-=", "1", "\n", "", "if", "cur_substr", "is", "None", ":", "\n", "                    ", "is_bad", "=", "True", "\n", "break", "\n", "", "sub_tokens", ".", "append", "(", "cur_substr", ")", "\n", "start", "=", "end", "\n", "\n", "", "if", "is_bad", ":", "\n", "                ", "output_tokens", ".", "append", "(", "self", ".", "unk_token", ")", "\n", "", "else", ":", "\n", "                ", "output_tokens", ".", "extend", "(", "sub_tokens", ")", "\n", "", "", "return", "output_tokens", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.tokenization.convert_to_unicode": [[26, 44], ["isinstance", "isinstance", "isinstance", "ValueError", "text.decode", "ValueError", "text.decode", "isinstance", "ValueError", "type", "type"], "function", ["None"], ["def", "convert_to_unicode", "(", "text", ")", ":", "\n", "    ", "\"\"\"Converts `text` to Unicode (if it's not already), assuming utf-8 input.\"\"\"", "\n", "if", "six", ".", "PY3", ":", "\n", "        ", "if", "isinstance", "(", "text", ",", "str", ")", ":", "\n", "            ", "return", "text", "\n", "", "elif", "isinstance", "(", "text", ",", "bytes", ")", ":", "\n", "            ", "return", "text", ".", "decode", "(", "\"utf-8\"", ",", "\"ignore\"", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"Unsupported string type: %s\"", "%", "(", "type", "(", "text", ")", ")", ")", "\n", "", "", "elif", "six", ".", "PY2", ":", "\n", "        ", "if", "isinstance", "(", "text", ",", "str", ")", ":", "\n", "            ", "return", "text", ".", "decode", "(", "\"utf-8\"", ",", "\"ignore\"", ")", "\n", "", "elif", "isinstance", "(", "text", ",", "unicode", ")", ":", "\n", "            ", "return", "text", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"Unsupported string type: %s\"", "%", "(", "type", "(", "text", ")", ")", ")", "\n", "", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\"Not running on Python2 or Python 3?\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.tokenization.printable_text": [[46, 67], ["isinstance", "isinstance", "isinstance", "ValueError", "text.decode", "ValueError", "isinstance", "text.encode", "ValueError", "type", "type"], "function", ["None"], ["", "", "def", "printable_text", "(", "text", ")", ":", "\n", "    ", "\"\"\"Returns text encoded in a way suitable for print or `tf.logging`.\"\"\"", "\n", "\n", "# These functions want `str` for both Python2 and Python3, but in one case", "\n", "# it's a Unicode string and in the other it's a byte string.", "\n", "if", "six", ".", "PY3", ":", "\n", "        ", "if", "isinstance", "(", "text", ",", "str", ")", ":", "\n", "            ", "return", "text", "\n", "", "elif", "isinstance", "(", "text", ",", "bytes", ")", ":", "\n", "            ", "return", "text", ".", "decode", "(", "\"utf-8\"", ",", "\"ignore\"", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"Unsupported string type: %s\"", "%", "(", "type", "(", "text", ")", ")", ")", "\n", "", "", "elif", "six", ".", "PY2", ":", "\n", "        ", "if", "isinstance", "(", "text", ",", "str", ")", ":", "\n", "            ", "return", "text", "\n", "", "elif", "isinstance", "(", "text", ",", "unicode", ")", ":", "\n", "            ", "return", "text", ".", "encode", "(", "\"utf-8\"", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"Unsupported string type: %s\"", "%", "(", "type", "(", "text", ")", ")", ")", "\n", "", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\"Not running on Python2 or Python 3?\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.tokenization.load_vocab": [[69, 82], ["collections.OrderedDict", "open", "tokenization.convert_to_unicode", "token.strip.strip", "reader.readline"], "function", ["home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.tokenization.convert_to_unicode"], ["", "", "def", "load_vocab", "(", "vocab_file", ")", ":", "\n", "    ", "\"\"\"Loads a vocabulary file into a dictionary.\"\"\"", "\n", "vocab", "=", "collections", ".", "OrderedDict", "(", ")", "\n", "index", "=", "0", "\n", "with", "open", "(", "vocab_file", ",", "\"r\"", ")", "as", "reader", ":", "\n", "        ", "while", "True", ":", "\n", "            ", "token", "=", "convert_to_unicode", "(", "reader", ".", "readline", "(", ")", ")", "\n", "if", "not", "token", ":", "\n", "                ", "break", "\n", "", "token", "=", "token", ".", "strip", "(", ")", "\n", "vocab", "[", "token", "]", "=", "index", "\n", "index", "+=", "1", "\n", "", "", "return", "vocab", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.tokenization.convert_tokens_to_ids": [[84, 90], ["ids.append"], "function", ["None"], ["", "def", "convert_tokens_to_ids", "(", "vocab", ",", "tokens", ")", ":", "\n", "    ", "\"\"\"Converts a sequence of tokens into ids using the vocab.\"\"\"", "\n", "ids", "=", "[", "]", "\n", "for", "token", "in", "tokens", ":", "\n", "        ", "ids", ".", "append", "(", "vocab", "[", "token", "]", ")", "\n", "", "return", "ids", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.tokenization.whitespace_tokenize": [[92, 99], ["text.strip.strip", "text.strip.split"], "function", ["None"], ["", "def", "whitespace_tokenize", "(", "text", ")", ":", "\n", "    ", "\"\"\"Runs basic whitespace cleaning and splitting on a peice of text.\"\"\"", "\n", "text", "=", "text", ".", "strip", "(", ")", "\n", "if", "not", "text", ":", "\n", "        ", "return", "[", "]", "\n", "", "tokens", "=", "text", ".", "split", "(", ")", "\n", "return", "tokens", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.tokenization._is_whitespace": [[254, 264], ["unicodedata.category"], "function", ["None"], ["", "", "def", "_is_whitespace", "(", "char", ")", ":", "\n", "    ", "\"\"\"Checks whether `chars` is a whitespace character.\"\"\"", "\n", "# \\t, \\n, and \\r are technically contorl characters but we treat them", "\n", "# as whitespace since they are generally considered as such.", "\n", "if", "char", "==", "\" \"", "or", "char", "==", "\"\\t\"", "or", "char", "==", "\"\\n\"", "or", "char", "==", "\"\\r\"", ":", "\n", "        ", "return", "True", "\n", "", "cat", "=", "unicodedata", ".", "category", "(", "char", ")", "\n", "if", "cat", "==", "\"Zs\"", ":", "\n", "        ", "return", "True", "\n", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.tokenization._is_control": [[266, 276], ["unicodedata.category", "unicodedata.category.startswith"], "function", ["None"], ["", "def", "_is_control", "(", "char", ")", ":", "\n", "    ", "\"\"\"Checks whether `chars` is a control character.\"\"\"", "\n", "# These are technically control characters but we count them as whitespace", "\n", "# characters.", "\n", "if", "char", "==", "\"\\t\"", "or", "char", "==", "\"\\n\"", "or", "char", "==", "\"\\r\"", ":", "\n", "        ", "return", "False", "\n", "", "cat", "=", "unicodedata", ".", "category", "(", "char", ")", "\n", "if", "cat", ".", "startswith", "(", "\"C\"", ")", ":", "\n", "        ", "return", "True", "\n", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.tokenization._is_punctuation": [[278, 292], ["ord", "unicodedata.category", "unicodedata.category.startswith"], "function", ["None"], ["", "def", "_is_punctuation", "(", "char", ")", ":", "\n", "    ", "\"\"\"Checks whether `chars` is a punctuation character.\"\"\"", "\n", "cp", "=", "ord", "(", "char", ")", "\n", "# We treat all non-letter/number ASCII as punctuation.", "\n", "# Characters such as \"^\", \"$\", and \"`\" are not in the Unicode", "\n", "# Punctuation class but we treat them as punctuation anyways, for", "\n", "# consistency.", "\n", "if", "(", "(", "cp", ">=", "33", "and", "cp", "<=", "47", ")", "or", "(", "cp", ">=", "58", "and", "cp", "<=", "64", ")", "or", "\n", "(", "cp", ">=", "91", "and", "cp", "<=", "96", ")", "or", "(", "cp", ">=", "123", "and", "cp", "<=", "126", ")", ")", ":", "\n", "        ", "return", "True", "\n", "", "cat", "=", "unicodedata", ".", "category", "(", "char", ")", "\n", "if", "cat", ".", "startswith", "(", "\"P\"", ")", ":", "\n", "        ", "return", "True", "\n", "", "return", "False", "\n", "", ""]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.main_ddp_final.metric": [[25, 28], ["log_metric"], "function", ["None"], ["def", "metric", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "if", "True", "==", "0", ":", "\n", "        ", "log_metric", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.main_ddp_final.parse_args": [[39, 57], ["parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.parse_args"], "function", ["home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.main_ddp_final.parse_args"], ["def", "parse_args", "(", "parser", ")", ":", "\n", "# parser.add_argument(\"--arch\", default=\"resnet50\", type=str,", "\n", "# help=\"network type\")", "\n", "# parser.add_argument(\"--master-ip\", type=str, help=\"Ip address of master\")", "\n", "    ", "parser", ".", "add_argument", "(", "\"--local_rank\"", ",", "type", "=", "int", ",", "help", "=", "\"Rank of the experiment\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--batch-size\"", ",", "type", "=", "int", ",", "help", "=", "\"Batch size to use\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--dataset-location\"", ",", "type", "=", "str", ",", "help", "=", "\"Data path\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--loader-threads\"", ",", "type", "=", "int", ",", "default", "=", "2", ",", "help", "=", "\"Loader threads\"", ")", "\n", "# parser.add_argument(\"--device\", type=str, default=\"cuda:0\", ", "\n", "# help=\"GPU to use\")", "\n", "parser", ".", "add_argument", "(", "\"--log-file\"", ",", "type", "=", "str", ",", "default", "=", "\"Log file\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--num-workers\"", ",", "type", "=", "int", ",", "\n", "help", "=", "\"Number of total  workers\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--s3-prefix\"", ",", "type", "=", "str", ",", "default", "=", "None", ",", "\n", "help", "=", "\"s3-prefix to write\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--node_rank\"", ",", "type", "=", "int", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.main_ddp_final._create_data_loader": [[58, 80], ["os.path.join", "torchvision.transforms.Normalize", "torchvision.datasets.ImageFolder", "torch.utils.data.DistributedSampler", "torch.utils.data.DistributedSampler", "torch.utils.data.DistributedSampler", "torch.utils.data.DistributedSampler", "torch.utils.data.DistributedSampler", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torchvision.transforms.Compose", "torchvision.transforms.RandomResizedCrop", "torchvision.transforms.RandomHorizontalFlip", "torchvision.transforms.ToTensor"], "function", ["None"], ["", "def", "_create_data_loader", "(", "args", ")", ":", "\n", "    ", "train_dir", "=", "os", ".", "path", ".", "join", "(", "args", ".", "dataset_location", ",", "'train'", ")", "\n", "normalize", "=", "transforms", ".", "Normalize", "(", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "\n", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", "\n", "train_dataset", "=", "datasets", ".", "ImageFolder", "(", "\n", "train_dir", ",", "\n", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "RandomResizedCrop", "(", "224", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", ",", "\n", "]", ")", ")", "\n", "\n", "sampler", "=", "torch", ".", "utils", ".", "data", ".", "DistributedSampler", "(", "train_dataset", ")", "\n", "\n", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "train_dataset", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "args", ".", "loader_threads", ",", "\n", "pin_memory", "=", "True", ",", "\n", "sampler", "=", "sampler", ")", "\n", "return", "train_loader", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.main_ddp_final._get_compression_param": [[81, 105], ["gradient_reducers.RankKReducer", "gradient_reducers.SignSGDwithMajorityVoteReducer", "gradient_reducers.GlobalTopKReducer", "gradient_reducers.ExactReducer"], "function", ["None"], ["", "def", "_get_compression_param", "(", "reducer_name", ",", "device", ",", "reducer_param", ")", ":", "\n", "    ", "if", "reducer_name", "==", "\"PowerSGD\"", ":", "\n", "        ", "reducer", "=", "gradient_reducers", ".", "RankKReducer", "(", "random_seed", "=", "42", ",", "\n", "device", "=", "device", ",", "\n", "timer", "=", "timer", ",", "\n", "n_power_iterations", "=", "0", ",", "\n", "reuse_query", "=", "True", ",", "\n", "rank", "=", "reducer_param", ")", "\n", "", "if", "reducer_name", "==", "\"SignSGD\"", ":", "\n", "        ", "reducer", "=", "gradient_reducers", ".", "SignSGDwithMajorityVoteReducer", "(", "random_seed", "=", "42", ",", "\n", "device", "=", "device", ",", "\n", "timer", "=", "timer", ")", "\n", "", "if", "reducer_name", "==", "\"Topk\"", ":", "\n", "        ", "reducer", "=", "gradient_reducers", ".", "GlobalTopKReducer", "(", "random_seed", "=", "42", ",", "\n", "device", "=", "device", ",", "\n", "timer", "=", "timer", ",", "\n", "compression", "=", "reducer_param", ")", "\n", "\n", "", "if", "reducer_name", "==", "\"ExactSerial\"", ":", "\n", "        ", "reducer", "=", "gradient_reducers", ".", "ExactReducer", "(", "random_seed", "=", "42", ",", "device", "=", "device", ",", "\n", "timer", "=", "timer", ")", "\n", "\n", "\n", "", "return", "reducer", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.main_ddp_final.main_resnet50": [[108, 155], ["torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.nn.parallel.DistributedDataParallel.to", "torch.nn.CrossEntropyLoss().to", "torch.nn.CrossEntropyLoss().to", "torch.nn.CrossEntropyLoss().to", "torch.nn.CrossEntropyLoss().to", "torch.nn.CrossEntropyLoss().to", "torch.SGD", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel.train", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "list", "main_ddp_final._create_data_loader", "enumerate", "torch.nn.parallel.DistributedDataParallel.parameters", "torch.nn.parallel.DistributedDataParallel.", "torch.nn.CrossEntropyLoss().to.", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.Event.record", "criterion.backward", "torch.cuda.Event.record", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "list.append", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "data.to", "target.to", "torch.cuda.Event.elapsed_time", "s3_utils.uploadFile", "dict", "args.__str__", "s3_utils.uploadFile.push_file", "print", "open", "json.dump"], "function", ["home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.main_ddp_final._create_data_loader", "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.s3_utils.uploadFile.push_file"], ["", "def", "main_resnet50", "(", "args", ",", "bsize", ")", ":", "\n", "#Initialize dataset", "\n", "\n", "    ", "assigned_device", "=", "\"cuda:{}\"", ".", "format", "(", "args", ".", "local_rank", ")", "\n", "torch", ".", "cuda", ".", "set_device", "(", "args", ".", "local_rank", ")", "\n", "global_rank", "=", "args", ".", "node_rank", "*", "4", "+", "args", ".", "local_rank", "\n", "model", "=", "models", ".", "__dict__", "[", "\"resnet50\"", "]", "(", ")", "\n", "model", ".", "to", "(", "assigned_device", ")", "\n", "\n", "criterion", "=", "torch", ".", "nn", ".", "CrossEntropyLoss", "(", ")", ".", "to", "(", "assigned_device", ")", "\n", "optimizer", "=", "optim", ".", "SGD", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "0.1", ",", "momentum", "=", "0.9", ",", "\n", "weight_decay", "=", "0.0001", ")", "\n", "# train_loader = _create_data_loader(args)", "\n", "#reducer = _get_compression_param(args)", "\n", "\n", "model", "=", "torch", ".", "nn", ".", "parallel", ".", "DistributedDataParallel", "(", "model", ",", "\n", "device_ids", "=", "[", "args", ".", "local_rank", "]", ",", "\n", "output_device", "=", "args", ".", "local_rank", ")", "\n", "model", ".", "train", "(", ")", "\n", "start_time", "=", "torch", ".", "cuda", ".", "Event", "(", "enable_timing", "=", "True", ")", "\n", "stop_time", "=", "torch", ".", "cuda", ".", "Event", "(", "enable_timing", "=", "True", ")", "\n", "time_list", "=", "list", "(", ")", "\n", "# for batch_idx, (data, target) in enumerate(train_loader):", "\n", "train_loader", "=", "_create_data_loader", "(", "args", ")", "\n", "for", "batch_idx", ",", "data", ",", "target", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "        ", "data", ",", "target", "=", "data", ".", "to", "(", "assigned_device", ")", ",", "target", ".", "to", "(", "assigned_device", ")", "\n", "output", "=", "model", "(", "data", ")", "\n", "loss", "=", "criterion", "(", "output", ",", "target", ")", "\n", "torch", ".", "cuda", ".", "synchronize", "(", ")", "#let's sync before starting", "\n", "start_time", ".", "record", "(", ")", "\n", "loss", ".", "backward", "(", ")", "#we have the gradients", "\n", "stop_time", ".", "record", "(", ")", "\n", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "time_list", ".", "append", "(", "start_time", ".", "elapsed_time", "(", "stop_time", ")", ")", "\n", "if", "batch_idx", "==", "60", ":", "\n", "            ", "file_uploader", "=", "s3_utils", ".", "uploadFile", "(", "\"large-scale-compression\"", ")", "\n", "data_dict", "=", "dict", "(", ")", "\n", "data_dict", "[", "'args'", "]", "=", "args", ".", "__str__", "(", ")", "\n", "data_dict", "[", "'timing_log'", "]", "=", "time_list", "\n", "file_name", "=", "\"resnet50_out_file_{}_bsize_{}.json\"", ".", "format", "(", "\n", "global_rank", ",", "bsize", ")", "\n", "with", "open", "(", "file_name", ",", "\"w\"", ")", "as", "fout", ":", "\n", "                ", "json", ".", "dump", "(", "data_dict", ",", "fout", ")", "\n", "", "file_uploader", ".", "push_file", "(", "file_name", ",", "\n", "\"{}/{}\"", ".", "format", "(", "args", ".", "s3_prefix", ",", "file_name", ")", ")", "\n", "print", "(", "\"Res 50 done\"", ")", "\n", "break", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.main_ddp_final.main_resnet50_single_machine": [[157, 206], ["print", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "model.to", "torch.nn.CrossEntropyLoss().to", "torch.nn.CrossEntropyLoss().to", "torch.nn.CrossEntropyLoss().to", "torch.nn.CrossEntropyLoss().to", "torch.nn.CrossEntropyLoss().to", "torch.SGD", "model.train", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "list", "main_ddp_final._create_data_loader", "enumerate", "model.parameters", "model", "torch.nn.CrossEntropyLoss().to.", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.Event.record", "criterion.backward", "torch.cuda.Event.record", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "list.append", "print", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "data.to", "target.to", "torch.cuda.Event.elapsed_time", "s3_utils.uploadFile", "dict", "args.__str__", "s3_utils.uploadFile.push_file", "print", "open", "json.dump"], "function", ["home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.main_ddp_final._create_data_loader", "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.s3_utils.uploadFile.push_file"], ["", "", "", "def", "main_resnet50_single_machine", "(", "args", ",", "bsize", ")", ":", "\n", "#Initialize dataset", "\n", "    ", "print", "(", "\"main_resnet50_single_machine\"", ")", "\n", "assigned_device", "=", "\"cuda:{}\"", ".", "format", "(", "args", ".", "local_rank", ")", "\n", "torch", ".", "cuda", ".", "set_device", "(", "args", ".", "local_rank", ")", "\n", "global_rank", "=", "args", ".", "node_rank", "*", "4", "+", "args", ".", "local_rank", "\n", "model", "=", "models", ".", "__dict__", "[", "\"resnet50\"", "]", "(", ")", "\n", "model", ".", "to", "(", "assigned_device", ")", "\n", "\n", "criterion", "=", "torch", ".", "nn", ".", "CrossEntropyLoss", "(", ")", ".", "to", "(", "assigned_device", ")", "\n", "optimizer", "=", "optim", ".", "SGD", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "0.1", ",", "momentum", "=", "0.9", ",", "\n", "weight_decay", "=", "0.0001", ")", "\n", "# train_loader = _create_data_loader(args)", "\n", "#reducer = _get_compression_param(args)", "\n", "\n", "# model = torch.nn.parallel.DistributedDataParallel(model,", "\n", "# device_ids=[args.local_rank],", "\n", "# output_device=args.local_rank)", "\n", "\n", "model", ".", "train", "(", ")", "\n", "start_time", "=", "torch", ".", "cuda", ".", "Event", "(", "enable_timing", "=", "True", ")", "\n", "stop_time", "=", "torch", ".", "cuda", ".", "Event", "(", "enable_timing", "=", "True", ")", "\n", "time_list", "=", "list", "(", ")", "\n", "# for batch_idx, (data, target) in enumerate(train_loader):", "\n", "train_loader", "=", "_create_data_loader", "(", "args", ")", "\n", "for", "batch_idx", ",", "data", ",", "target", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "        ", "data", ",", "target", "=", "data", ".", "to", "(", "assigned_device", ")", ",", "target", ".", "to", "(", "assigned_device", ")", "\n", "output", "=", "model", "(", "data", ")", "\n", "loss", "=", "criterion", "(", "output", ",", "target", ")", "\n", "torch", ".", "cuda", ".", "synchronize", "(", ")", "#let's sync before starting", "\n", "start_time", ".", "record", "(", ")", "\n", "loss", ".", "backward", "(", ")", "#we have the gradients", "\n", "stop_time", ".", "record", "(", ")", "\n", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "time_list", ".", "append", "(", "start_time", ".", "elapsed_time", "(", "stop_time", ")", ")", "\n", "print", "(", "time_list", ")", "\n", "if", "batch_idx", "==", "60", ":", "\n", "            ", "file_uploader", "=", "s3_utils", ".", "uploadFile", "(", "\"large-scale-compression\"", ")", "\n", "data_dict", "=", "dict", "(", ")", "\n", "data_dict", "[", "'args'", "]", "=", "args", ".", "__str__", "(", ")", "\n", "data_dict", "[", "'timing_log'", "]", "=", "time_list", "\n", "file_name", "=", "\"resnet50_out_file_{}_bsize_{}.json\"", ".", "format", "(", "\n", "global_rank", ",", "bsize", ")", "\n", "with", "open", "(", "file_name", ",", "\"w\"", ")", "as", "fout", ":", "\n", "                ", "json", ".", "dump", "(", "data_dict", ",", "fout", ")", "\n", "", "file_uploader", ".", "push_file", "(", "file_name", ",", "\n", "\"{}/{}\"", ".", "format", "(", "args", ".", "s3_prefix", ",", "file_name", ")", ")", "\n", "print", "(", "\"Res 50 done\"", ")", "\n", "break", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.main_ddp_final.main_resnet101_single": [[208, 261], ["print", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "model.to", "torch.nn.CrossEntropyLoss().to", "torch.nn.CrossEntropyLoss().to", "torch.nn.CrossEntropyLoss().to", "torch.nn.CrossEntropyLoss().to", "torch.nn.CrossEntropyLoss().to", "torch.SGD", "model.train", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "list", "main_ddp_final._create_data_loader", "enumerate", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "model.parameters", "model", "torch.nn.CrossEntropyLoss().to.", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.Event.record", "criterion.backward", "torch.cuda.Event.record", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "list.append", "print", "model.parameters", "model.parameters", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "data.to", "target.to", "torch.cuda.Event.elapsed_time", "s3_utils.uploadFile", "dict", "args.__str__", "s3_utils.uploadFile.push_file", "print", "open", "json.dump"], "function", ["home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.main_ddp_final._create_data_loader", "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.s3_utils.uploadFile.push_file"], ["", "", "", "def", "main_resnet101_single", "(", "args", ",", "bsize", ")", ":", "\n", "#Initialize dataset", "\n", "\n", "    ", "print", "(", "\"main_resnet101_single_machine\"", ")", "\n", "assigned_device", "=", "\"cuda:{}\"", ".", "format", "(", "args", ".", "local_rank", ")", "\n", "torch", ".", "cuda", ".", "set_device", "(", "args", ".", "local_rank", ")", "\n", "global_rank", "=", "args", ".", "node_rank", "*", "4", "+", "args", ".", "local_rank", "\n", "model", "=", "models", ".", "__dict__", "[", "\"resnet101\"", "]", "(", ")", "\n", "model", ".", "to", "(", "assigned_device", ")", "\n", "\n", "\n", "memories", "=", "[", "torch", ".", "zeros_like", "(", "p", ")", "for", "p", "in", "model", ".", "parameters", "(", ")", "]", "\n", "send_buffers", "=", "[", "torch", ".", "zeros_like", "(", "p", ")", "for", "p", "in", "model", ".", "parameters", "(", ")", "]", "\n", "\n", "criterion", "=", "torch", ".", "nn", ".", "CrossEntropyLoss", "(", ")", ".", "to", "(", "assigned_device", ")", "\n", "optimizer", "=", "optim", ".", "SGD", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "0.1", ",", "momentum", "=", "0.9", ",", "\n", "weight_decay", "=", "0.0001", ")", "\n", "# train_loader = _create_data_loader(args)", "\n", "# reducer = _get_compression_param(args)", "\n", "\n", "# model = torch.nn.parallel.DistributedDataParallel(model,", "\n", "# device_ids=[args.local_rank],", "\n", "# output_device=args.local_rank)", "\n", "model", ".", "train", "(", ")", "\n", "start_time", "=", "torch", ".", "cuda", ".", "Event", "(", "enable_timing", "=", "True", ")", "\n", "stop_time", "=", "torch", ".", "cuda", ".", "Event", "(", "enable_timing", "=", "True", ")", "\n", "time_list", "=", "list", "(", ")", "\n", "# for batch_idx, (data, target) in enumerate(train_loader):", "\n", "train_loader", "=", "_create_data_loader", "(", "args", ")", "\n", "for", "batch_idx", ",", "data", ",", "target", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "        ", "data", ",", "target", "=", "data", ".", "to", "(", "assigned_device", ")", ",", "target", ".", "to", "(", "assigned_device", ")", "\n", "output", "=", "model", "(", "data", ")", "\n", "loss", "=", "criterion", "(", "output", ",", "target", ")", "\n", "torch", ".", "cuda", ".", "synchronize", "(", ")", "#let's sync before starting", "\n", "start_time", ".", "record", "(", ")", "\n", "loss", ".", "backward", "(", ")", "#we have the gradients", "\n", "stop_time", ".", "record", "(", ")", "\n", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "time_list", ".", "append", "(", "start_time", ".", "elapsed_time", "(", "stop_time", ")", ")", "\n", "print", "(", "time_list", ")", "\n", "if", "batch_idx", "==", "60", ":", "\n", "            ", "file_uploader", "=", "s3_utils", ".", "uploadFile", "(", "\"large-scale-compression\"", ")", "\n", "data_dict", "=", "dict", "(", ")", "\n", "data_dict", "[", "'args'", "]", "=", "args", ".", "__str__", "(", ")", "\n", "data_dict", "[", "'timing_log'", "]", "=", "time_list", "\n", "file_name", "=", "\"resnet101_out_file_{}_bsize_{}.json\"", ".", "format", "(", "\n", "global_rank", ",", "bsize", ")", "\n", "with", "open", "(", "file_name", ",", "\"w\"", ")", "as", "fout", ":", "\n", "                ", "json", ".", "dump", "(", "data_dict", ",", "fout", ")", "\n", "", "file_uploader", ".", "push_file", "(", "file_name", ",", "\n", "\"{}/{}\"", ".", "format", "(", "args", ".", "s3_prefix", ",", "file_name", ")", ")", "\n", "print", "(", "\"Done res 101\"", ")", "\n", "break", "\n", "", "", "", "def", "main_resnet101", "(", "args", ",", "bsize", ")", ":", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.main_ddp_final.main_resnet101": [[261, 312], ["torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.nn.parallel.DistributedDataParallel.to", "torch.nn.CrossEntropyLoss().to", "torch.nn.CrossEntropyLoss().to", "torch.nn.CrossEntropyLoss().to", "torch.nn.CrossEntropyLoss().to", "torch.nn.CrossEntropyLoss().to", "torch.SGD", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel.train", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "list", "main_ddp_final._create_data_loader", "enumerate", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.nn.parallel.DistributedDataParallel.parameters", "torch.nn.parallel.DistributedDataParallel.", "torch.nn.CrossEntropyLoss().to.", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.Event.record", "criterion.backward", "torch.cuda.Event.record", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "list.append", "torch.nn.parallel.DistributedDataParallel.parameters", "torch.nn.parallel.DistributedDataParallel.parameters", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "data.to", "target.to", "torch.cuda.Event.elapsed_time", "s3_utils.uploadFile", "dict", "args.__str__", "s3_utils.uploadFile.push_file", "print", "open", "json.dump"], "function", ["home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.main_ddp_final._create_data_loader", "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.s3_utils.uploadFile.push_file"], ["", "", "", "def", "main_resnet101", "(", "args", ",", "bsize", ")", ":", "\n", "#Initialize dataset", "\n", "\n", "    ", "assigned_device", "=", "\"cuda:{}\"", ".", "format", "(", "args", ".", "local_rank", ")", "\n", "torch", ".", "cuda", ".", "set_device", "(", "args", ".", "local_rank", ")", "\n", "global_rank", "=", "args", ".", "node_rank", "*", "4", "+", "args", ".", "local_rank", "\n", "model", "=", "models", ".", "__dict__", "[", "\"resnet101\"", "]", "(", ")", "\n", "model", ".", "to", "(", "assigned_device", ")", "\n", "\n", "\n", "memories", "=", "[", "torch", ".", "zeros_like", "(", "p", ")", "for", "p", "in", "model", ".", "parameters", "(", ")", "]", "\n", "send_buffers", "=", "[", "torch", ".", "zeros_like", "(", "p", ")", "for", "p", "in", "model", ".", "parameters", "(", ")", "]", "\n", "\n", "criterion", "=", "torch", ".", "nn", ".", "CrossEntropyLoss", "(", ")", ".", "to", "(", "assigned_device", ")", "\n", "optimizer", "=", "optim", ".", "SGD", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "0.1", ",", "momentum", "=", "0.9", ",", "\n", "weight_decay", "=", "0.0001", ")", "\n", "# train_loader = _create_data_loader(args)", "\n", "# reducer = _get_compression_param(args)", "\n", "\n", "model", "=", "torch", ".", "nn", ".", "parallel", ".", "DistributedDataParallel", "(", "model", ",", "\n", "device_ids", "=", "[", "args", ".", "local_rank", "]", ",", "\n", "output_device", "=", "args", ".", "local_rank", ")", "\n", "model", ".", "train", "(", ")", "\n", "start_time", "=", "torch", ".", "cuda", ".", "Event", "(", "enable_timing", "=", "True", ")", "\n", "stop_time", "=", "torch", ".", "cuda", ".", "Event", "(", "enable_timing", "=", "True", ")", "\n", "time_list", "=", "list", "(", ")", "\n", "# for batch_idx, (data, target) in enumerate(train_loader):", "\n", "train_loader", "=", "_create_data_loader", "(", "args", ")", "\n", "for", "batch_idx", ",", "data", ",", "target", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "        ", "data", ",", "target", "=", "data", ".", "to", "(", "assigned_device", ")", ",", "target", ".", "to", "(", "assigned_device", ")", "\n", "output", "=", "model", "(", "data", ")", "\n", "loss", "=", "criterion", "(", "output", ",", "target", ")", "\n", "torch", ".", "cuda", ".", "synchronize", "(", ")", "#let's sync before starting", "\n", "start_time", ".", "record", "(", ")", "\n", "loss", ".", "backward", "(", ")", "#we have the gradients", "\n", "stop_time", ".", "record", "(", ")", "\n", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "time_list", ".", "append", "(", "start_time", ".", "elapsed_time", "(", "stop_time", ")", ")", "\n", "if", "batch_idx", "==", "60", ":", "\n", "            ", "file_uploader", "=", "s3_utils", ".", "uploadFile", "(", "\"large-scale-compression\"", ")", "\n", "data_dict", "=", "dict", "(", ")", "\n", "data_dict", "[", "'args'", "]", "=", "args", ".", "__str__", "(", ")", "\n", "data_dict", "[", "'timing_log'", "]", "=", "time_list", "\n", "file_name", "=", "\"resnet101_out_file_{}_bsize_{}.json\"", ".", "format", "(", "\n", "global_rank", ",", "bsize", ")", "\n", "with", "open", "(", "file_name", ",", "\"w\"", ")", "as", "fout", ":", "\n", "                ", "json", ".", "dump", "(", "data_dict", ",", "fout", ")", "\n", "", "file_uploader", ".", "push_file", "(", "file_name", ",", "\n", "\"{}/{}\"", ".", "format", "(", "args", ".", "s3_prefix", ",", "file_name", ")", ")", "\n", "print", "(", "\"Done res 101\"", ")", "\n", "break", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.main_ddp_final.powersgd_single_call": [[313, 374], ["torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.nn.parallel.DistributedDataParallel.to", "torch.nn.CrossEntropyLoss().to", "torch.nn.CrossEntropyLoss().to", "torch.nn.CrossEntropyLoss().to", "torch.nn.CrossEntropyLoss().to", "torch.nn.CrossEntropyLoss().to", "torch.SGD", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "PowerSGD.PowerSGDState", "torch.nn.parallel.DistributedDataParallel.register_comm_hook", "torch.nn.parallel.DistributedDataParallel.train", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "list", "main_ddp_final._create_data_loader", "enumerate", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.nn.parallel.DistributedDataParallel.parameters", "torch.nn.parallel.DistributedDataParallel.", "torch.nn.CrossEntropyLoss().to.", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.Event.record", "criterion.backward", "torch.cuda.Event.record", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "list.append", "torch.nn.parallel.DistributedDataParallel.parameters", "torch.nn.parallel.DistributedDataParallel.parameters", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "data.to", "target.to", "torch.cuda.Event.elapsed_time", "s3_utils.uploadFile", "dict", "args.__str__", "s3_utils.uploadFile.push_file", "print", "open", "json.dump"], "function", ["home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.main_ddp_final._create_data_loader", "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.s3_utils.uploadFile.push_file"], ["", "", "", "def", "powersgd_single_call", "(", "args", ",", "psgd_rank", ",", "bsize", ",", "network_name", ")", ":", "\n", "    ", "assigned_device", "=", "\"cuda:{}\"", ".", "format", "(", "args", ".", "local_rank", ")", "\n", "torch", ".", "cuda", ".", "set_device", "(", "args", ".", "local_rank", ")", "\n", "global_rank", "=", "args", ".", "node_rank", "*", "4", "+", "args", ".", "local_rank", "\n", "model", "=", "models", ".", "__dict__", "[", "network_name", "]", "(", ")", "\n", "model", ".", "to", "(", "assigned_device", ")", "\n", "\n", "\n", "memories", "=", "[", "torch", ".", "zeros_like", "(", "p", ")", "for", "p", "in", "model", ".", "parameters", "(", ")", "]", "\n", "send_buffers", "=", "[", "torch", ".", "zeros_like", "(", "p", ")", "for", "p", "in", "model", ".", "parameters", "(", ")", "]", "\n", "\n", "criterion", "=", "torch", ".", "nn", ".", "CrossEntropyLoss", "(", ")", ".", "to", "(", "assigned_device", ")", "\n", "optimizer", "=", "optim", ".", "SGD", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "0.1", ",", "momentum", "=", "0.9", ",", "\n", "weight_decay", "=", "0.0001", ")", "\n", "\n", "model", "=", "torch", ".", "nn", ".", "parallel", ".", "DistributedDataParallel", "(", "model", ",", "\n", "device_ids", "=", "[", "args", ".", "local_rank", "]", ",", "\n", "output_device", "=", "args", ".", "local_rank", ")", "\n", "state", "=", "PowerSGD", ".", "PowerSGDState", "(", "process_group", "=", "None", ",", "\n", "matrix_approximation_rank", "=", "psgd_rank", ",", "\n", "start_powerSGD_iter", "=", "3", ")", "\n", "\n", "model", ".", "register_comm_hook", "(", "state", ",", "PowerSGD", ".", "powerSGD_hook", ")", "\n", "\n", "model", ".", "train", "(", ")", "\n", "start_time", "=", "torch", ".", "cuda", ".", "Event", "(", "enable_timing", "=", "True", ")", "\n", "stop_time", "=", "torch", ".", "cuda", ".", "Event", "(", "enable_timing", "=", "True", ")", "\n", "time_list", "=", "list", "(", ")", "\n", "train_loader", "=", "_create_data_loader", "(", "args", ")", "\n", "for", "batch_idx", ",", "data", ",", "target", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "        ", "data", ",", "target", "=", "data", ".", "to", "(", "assigned_device", ")", ",", "target", ".", "to", "(", "assigned_device", ")", "\n", "output", "=", "model", "(", "data", ")", "\n", "loss", "=", "criterion", "(", "output", ",", "target", ")", "\n", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "start_time", ".", "record", "(", ")", "\n", "loss", ".", "backward", "(", ")", "#we have the gradients", "\n", "# grad_list = [p.grad for p in model.parameters()]", "\n", "# for grad, memory, send_bfr in zip(grad_list, memories, send_buffers):", "\n", "# send_bfr.data[:] = grad + memory", "\n", "# reducer.reduce(send_buffers, grad_list, memories)", "\n", "# we have the gradients synchronized", "\n", "stop_time", ".", "record", "(", ")", "\n", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "# print (\"Time {}, Device {}\".format(start_time.elapsed_time(stop_time),", "\n", "# args.device))", "\n", "time_list", ".", "append", "(", "start_time", ".", "elapsed_time", "(", "stop_time", ")", ")", "\n", "if", "batch_idx", "==", "60", ":", "\n", "            ", "file_uploader", "=", "s3_utils", ".", "uploadFile", "(", "\"large-scale-compression\"", ")", "\n", "data_dict", "=", "dict", "(", ")", "\n", "data_dict", "[", "'args'", "]", "=", "args", ".", "__str__", "(", ")", "\n", "data_dict", "[", "'timing_log'", "]", "=", "time_list", "\n", "file_name", "=", "\"{}_powersgd_rank_{}_out_file_{}_batch_size_{}.json\"", ".", "format", "(", "network_name", ",", "psgd_rank", ",", "\n", "global_rank", ",", "\n", "bsize", ")", "\n", "with", "open", "(", "file_name", ",", "\"w\"", ")", "as", "fout", ":", "\n", "                ", "json", ".", "dump", "(", "data_dict", ",", "fout", ")", "\n", "", "file_uploader", ".", "push_file", "(", "file_name", ",", "\n", "\"{}/{}\"", ".", "format", "(", "args", ".", "s3_prefix", ",", "file_name", ")", ")", "\n", "\n", "print", "(", "\"Done {}\"", ".", "format", "(", "network_name", ")", ")", "\n", "break", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.main_ddp_final.encode_decode_signsgd": [[376, 399], ["gradient_reducers.SignCompressor", "gradient_reducers.SignCompressor.compress", "torch.all_gather().get_future", "dist.all_gather().get_future.then", "torch.empty_like", "torch.empty_like", "torch.empty_like", "torch.empty_like", "torch.empty_like", "sum_of_signs.sign", "bucket.get_tensors", "range", "torch.all_gather", "dist.all_gather().get_future.value", "gradient_reducers.SignCompressor.uncompress", "torch.get_world_size"], "function", ["home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.gradient_reducers.SignCompressor.compress", "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.gradient_reducers.all_gather", "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.gradient_reducers.SignCompressor.uncompress"], ["", "", "", "def", "encode_decode_signsgd", "(", "state", ",", "bucket", ")", ":", "\n", "    ", "\"\"\"\n    signsgd in parallel\n    \"\"\"", "\n", "sign_compressor", "=", "gradient_reducers", ".", "SignCompressor", "(", ")", "\n", "# tensor_flat = TensorBuffer(bucket)", "\n", "bits", ",", "sign_size", "=", "sign_compressor", ".", "compress", "(", "bucket", ".", "get_tensors", "(", ")", "[", "0", "]", ")", "\n", "copy_bits", "=", "[", "torch", ".", "empty_like", "(", "bits", ")", "for", "i", "in", "range", "(", "dist", ".", "get_world_size", "(", ")", ")", "]", "\n", "\n", "fut", "=", "dist", ".", "all_gather", "(", "copy_bits", ",", "bits", ",", "group", "=", "dist", ".", "group", ".", "WORLD", ",", "\n", "async_op", "=", "True", ")", ".", "get_future", "(", ")", "\n", "def", "decode", "(", "fut", ")", ":", "\n", "        ", "sum_of_signs", "=", "None", "\n", "agg_tensor", "=", "fut", ".", "value", "(", ")", "[", "0", "]", "\n", "for", "their_bits", "in", "agg_tensor", ":", "\n", "            ", "uncompressed", "=", "sign_compressor", ".", "uncompress", "(", "their_bits", ",", "sign_size", ")", "\n", "if", "sum_of_signs", "is", "None", ":", "\n", "                ", "sum_of_signs", "=", "uncompressed", "\n", "", "else", ":", "\n", "                ", "sum_of_signs", "+=", "uncompressed", "\n", "", "", "total_sign", "=", "sum_of_signs", ".", "sign", "(", ")", "\n", "return", "[", "total_sign", "]", "\n", "", "return", "fut", ".", "then", "(", "decode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.main_ddp_final.signsgd_single_call_reducer": [[400, 460], ["print", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.nn.parallel.DistributedDataParallel.to", "torch.nn.CrossEntropyLoss().to", "torch.nn.CrossEntropyLoss().to", "torch.nn.CrossEntropyLoss().to", "torch.nn.CrossEntropyLoss().to", "torch.nn.CrossEntropyLoss().to", "torch.SGD", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel.register_comm_hook", "torch.nn.parallel.DistributedDataParallel.train", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "list", "main_ddp_final._create_data_loader", "enumerate", "torch.nn.parallel.DistributedDataParallel.parameters", "torch.nn.parallel.DistributedDataParallel.", "torch.nn.CrossEntropyLoss().to.", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.Event.record", "criterion.backward", "torch.cuda.Event.record", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "list.append", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "data.to", "target.to", "torch.cuda.Event.elapsed_time", "s3_utils.uploadFile", "dict", "args.__str__", "s3_utils.uploadFile.push_file", "print", "open", "json.dump"], "function", ["home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.main_ddp_final._create_data_loader", "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.s3_utils.uploadFile.push_file"], ["", "def", "signsgd_single_call_reducer", "(", "args", ",", "bsize", ",", "network_name", ")", ":", "\n", "    ", "assigned_device", "=", "\"cuda:{}\"", ".", "format", "(", "args", ".", "local_rank", ")", "\n", "print", "(", "\"Assigned Device {}\"", ".", "format", "(", "assigned_device", ")", ")", "\n", "torch", ".", "cuda", ".", "set_device", "(", "args", ".", "local_rank", ")", "\n", "global_rank", "=", "args", ".", "node_rank", "*", "4", "+", "args", ".", "local_rank", "\n", "model", "=", "models", ".", "__dict__", "[", "network_name", "]", "(", ")", "\n", "model", ".", "to", "(", "assigned_device", ")", "\n", "\n", "\n", "criterion", "=", "torch", ".", "nn", ".", "CrossEntropyLoss", "(", ")", ".", "to", "(", "assigned_device", ")", "\n", "optimizer", "=", "optim", ".", "SGD", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "0.1", ",", "momentum", "=", "0.9", ",", "\n", "weight_decay", "=", "0.0001", ")", "\n", "\n", "model", "=", "torch", ".", "nn", ".", "parallel", ".", "DistributedDataParallel", "(", "model", ",", "\n", "device_ids", "=", "[", "args", ".", "local_rank", "]", ",", "\n", "output_device", "=", "args", ".", "local_rank", ")", "\n", "\n", "\n", "model", ".", "register_comm_hook", "(", "state", "=", "None", ",", "\n", "hook", "=", "encode_decode_signsgd", ")", "\n", "\n", "model", ".", "train", "(", ")", "\n", "start_time", "=", "torch", ".", "cuda", ".", "Event", "(", "enable_timing", "=", "True", ")", "\n", "stop_time", "=", "torch", ".", "cuda", ".", "Event", "(", "enable_timing", "=", "True", ")", "\n", "time_list", "=", "list", "(", ")", "\n", "\n", "train_loader", "=", "_create_data_loader", "(", "args", ")", "\n", "for", "batch_idx", ",", "data", ",", "target", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "        ", "data", ",", "target", "=", "data", ".", "to", "(", "assigned_device", ")", ",", "target", ".", "to", "(", "assigned_device", ")", "\n", "output", "=", "model", "(", "data", ")", "\n", "loss", "=", "criterion", "(", "output", ",", "target", ")", "\n", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "start_time", ".", "record", "(", ")", "\n", "loss", ".", "backward", "(", ")", "#we have the gradients", "\n", "# grad_list = [p.grad for p in model.parameters()]", "\n", "# for grad, memory, send_bfr in zip(grad_list, memories, send_buffers):", "\n", "# send_bfr.data[:] = grad + memory", "\n", "# reducer.reduce(send_buffers, grad_list, memories)", "\n", "# we have the gradients synchronized", "\n", "stop_time", ".", "record", "(", ")", "\n", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "# for param in model.parameters():", "\n", "# import ipdb; ipdb.set_trace()", "\n", "# print (\"Time {}, Device {}\".format(start_time.elapsed_time(stop_time),", "\n", "# args.device))", "\n", "time_list", ".", "append", "(", "start_time", ".", "elapsed_time", "(", "stop_time", ")", ")", "\n", "if", "batch_idx", "==", "60", ":", "\n", "            ", "file_uploader", "=", "s3_utils", ".", "uploadFile", "(", "\"large-scale-compression\"", ")", "\n", "data_dict", "=", "dict", "(", ")", "\n", "data_dict", "[", "'args'", "]", "=", "args", ".", "__str__", "(", ")", "\n", "data_dict", "[", "'timing_log'", "]", "=", "time_list", "\n", "file_name", "=", "\"{}_signsgd_overlap_out_file_{}_batch_size_{}.json\"", ".", "format", "(", "network_name", ",", "\n", "global_rank", ",", "bsize", ")", "\n", "with", "open", "(", "file_name", ",", "\"w\"", ")", "as", "fout", ":", "\n", "                ", "json", ".", "dump", "(", "data_dict", ",", "fout", ")", "\n", "", "file_uploader", ".", "push_file", "(", "file_name", ",", "\n", "\"{}/{}\"", ".", "format", "(", "args", ".", "s3_prefix", ",", "file_name", ")", ")", "\n", "\n", "print", "(", "\"Done {} TopK\"", ".", "format", "(", "network_name", ")", ")", "\n", "break", "\n", "", "", "", "def", "encode_decode", "(", "state", ",", "bucket", ")", ":", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.main_ddp_final.encode_decode": [[460, 528], ["int", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "len", "range", "group_to_use.size", "torch.all_gather", "torch.all_gather().get_future", "dist.all_gather().get_future.then", "bucket.get_tensors", "torch.count_nonzero", "torch.count_nonzero", "torch.count_nonzero", "torch.count_nonzero", "torch.count_nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "random.randint", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "len", "range", "torch.all_gather", "dist.all_gather().get_future.value", "len", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.gradient_reducers.all_gather", "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.gradient_reducers.all_gather"], ["", "", "", "def", "encode_decode", "(", "state", ",", "bucket", ")", ":", "\n", "# tensors = [ t/dist.world_size for t in bucket.get_tensors()]", "\n", "\n", "# print (state)", "\n", "    ", "tensor", "=", "bucket", ".", "get_tensors", "(", ")", "[", "0", "]", "\n", "k", "=", "int", "(", "state", "[", "'k'", "]", "*", "len", "(", "tensor", ")", ")", "\n", "N", "=", "state", "[", "'N'", "]", "\n", "grad_1d", "=", "tensor", "\n", "# grad_1d = grad_in.reshape(-1) #reshaping to 1d", "\n", "a", "=", "torch", ".", "abs", "(", "grad_1d", ")", "\n", "a_hat", "=", "torch", ".", "mean", "(", "a", ")", "\n", "u", "=", "torch", ".", "max", "(", "a", ")", "\n", "l", "=", "0", "\n", "r", "=", "1", "\n", "k1", "=", "0", "\n", "k2", "=", "len", "(", "grad_1d", ")", "\n", "thres1", "=", "0", "\n", "thres2", "=", "0", "\n", "for", "i", "in", "range", "(", "N", ")", ":", "\n", "        ", "ratio", "=", "l", "+", "(", "r", "-", "l", ")", "/", "2", "\n", "thres", "=", "a_hat", "+", "ratio", "*", "(", "u", "-", "a_hat", ")", "\n", "nnz", "=", "torch", ".", "count_nonzero", "(", "a", ">=", "thres", ")", "\n", "if", "nnz", "<=", "k", ":", "\n", "            ", "r", "=", "ratio", "\n", "if", "nnz", ">", "k1", ":", "\n", "                ", "k1", "=", "nnz", "\n", "thres1", "=", "thres", "\n", "", "", "elif", "nnz", ">", "k", ":", "\n", "            ", "l", "=", "ratio", "\n", "if", "nnz", "<", "k2", ":", "\n", "                ", "k2", "=", "nnz", "\n", "thres2", "=", "thres", "\n", "", "", "", "l1", "=", "torch", ".", "nonzero", "(", "a", ">=", "thres1", ",", "as_tuple", "=", "True", ")", "[", "0", "]", "#since 1d no problem", "\n", "l2", "=", "torch", ".", "nonzero", "(", "(", "a", "<", "thres1", ")", "&", "(", "a", ">=", "thres2", ")", ",", "as_tuple", "=", "True", ")", "[", "0", "]", "\n", "if", "len", "(", "l2", ")", "-", "(", "k", "-", "k1", ")", "+", "1", "<", "0", ":", "\n", "        ", "l", "=", "torch", ".", "cat", "(", "(", "l1", ",", "l2", "[", "0", ":", "k", "-", "len", "(", "l1", ")", "]", ")", ")", "\n", "", "else", ":", "\n", "        ", "rand", "=", "random", ".", "randint", "(", "0", ",", "len", "(", "l2", ")", "-", "(", "k", "-", "k1", ")", "+", "1", ")", "\n", "l", "=", "torch", ".", "cat", "(", "(", "l1", ",", "l2", "[", "rand", ":", "rand", "+", "k", "-", "k1", "]", ")", ")", "\n", "", "kai", "=", "tensor", "[", "l", "]", "\n", "del", "a", "\n", "del", "l", "\n", "# tensor = torch.ones_like(tensor, device=tensor.device, dtype=tensor.dtype)", "\n", "group_to_use", "=", "dist", ".", "group", ".", "WORLD", "\n", "world_size", "=", "group_to_use", ".", "size", "(", ")", "\n", "\n", "out_list", "=", "[", "torch", ".", "zeros_like", "(", "kai", ",", "device", "=", "kai", ".", "device", ",", "\n", "dtype", "=", "kai", ".", "dtype", ")", "for", "_", "in", "range", "(", "world_size", ")", "]", "\n", "\n", "# idx_list = [torch.zeros_like(l, device=l.device,", "\n", "# dtype=l.dtype) for _ in range(world_size)]", "\n", "\n", "dist", ".", "all_gather", "(", "out_list", ",", "kai", ",", "group", "=", "group_to_use", ",", "\n", "async_op", "=", "True", ")", "\n", "\n", "fut", "=", "dist", ".", "all_gather", "(", "\n", "out_list", ",", "kai", ",", "group", "=", "group_to_use", ",", "async_op", "=", "True", ")", ".", "get_future", "(", ")", "\n", "\n", "def", "decode", "(", "fut", ")", ":", "\n", "        ", "agg_tensor", "=", "fut", ".", "value", "(", ")", "[", "0", "]", "\n", "fut_tensor", "=", "grad_1d", "\n", "out_tensor", "=", "torch", ".", "zeros_like", "(", "fut_tensor", ",", "device", "=", "tensor", ".", "device", ",", "\n", "dtype", "=", "tensor", ".", "dtype", ")", "\n", "for", "gt", "in", "agg_tensor", ":", "\n", "            ", "out_tensor", "[", ":", "len", "(", "gt", ")", "]", "+=", "gt", "\n", "# print (out_tensor) ", "\n", "", "return", "[", "out_tensor", "]", "\n", "", "return", "fut", ".", "then", "(", "decode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.main_ddp_final.mstopk_single_call_reducer": [[529, 589], ["print", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.nn.parallel.DistributedDataParallel.to", "torch.nn.CrossEntropyLoss().to", "torch.nn.CrossEntropyLoss().to", "torch.nn.CrossEntropyLoss().to", "torch.nn.CrossEntropyLoss().to", "torch.nn.CrossEntropyLoss().to", "torch.SGD", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel.register_comm_hook", "torch.nn.parallel.DistributedDataParallel.train", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "list", "main_ddp_final._create_data_loader", "enumerate", "torch.nn.parallel.DistributedDataParallel.parameters", "torch.nn.parallel.DistributedDataParallel.", "torch.nn.CrossEntropyLoss().to.", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.Event.record", "criterion.backward", "torch.cuda.Event.record", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "list.append", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "data.to", "target.to", "torch.cuda.Event.elapsed_time", "s3_utils.uploadFile", "dict", "args.__str__", "s3_utils.uploadFile.push_file", "print", "open", "json.dump"], "function", ["home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.main_ddp_final._create_data_loader", "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.s3_utils.uploadFile.push_file"], ["", "def", "mstopk_single_call_reducer", "(", "args", ",", "topk_k", ",", "bsize", ",", "network_name", ")", ":", "\n", "    ", "assigned_device", "=", "\"cuda:{}\"", ".", "format", "(", "args", ".", "local_rank", ")", "\n", "print", "(", "\"Assigned Device {}\"", ".", "format", "(", "assigned_device", ")", ")", "\n", "torch", ".", "cuda", ".", "set_device", "(", "args", ".", "local_rank", ")", "\n", "global_rank", "=", "args", ".", "node_rank", "*", "4", "+", "args", ".", "local_rank", "\n", "model", "=", "models", ".", "__dict__", "[", "network_name", "]", "(", ")", "\n", "model", ".", "to", "(", "assigned_device", ")", "\n", "\n", "\n", "criterion", "=", "torch", ".", "nn", ".", "CrossEntropyLoss", "(", ")", ".", "to", "(", "assigned_device", ")", "\n", "optimizer", "=", "optim", ".", "SGD", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "0.1", ",", "momentum", "=", "0.9", ",", "\n", "weight_decay", "=", "0.0001", ")", "\n", "\n", "model", "=", "torch", ".", "nn", ".", "parallel", ".", "DistributedDataParallel", "(", "model", ",", "\n", "device_ids", "=", "[", "args", ".", "local_rank", "]", ",", "\n", "output_device", "=", "args", ".", "local_rank", ")", "\n", "\n", "\n", "model", ".", "register_comm_hook", "(", "state", "=", "{", "'N'", ":", "20", ",", "'k'", ":", "topk_k", "}", ",", "hook", "=", "encode_decode", ")", "\n", "\n", "model", ".", "train", "(", ")", "\n", "start_time", "=", "torch", ".", "cuda", ".", "Event", "(", "enable_timing", "=", "True", ")", "\n", "stop_time", "=", "torch", ".", "cuda", ".", "Event", "(", "enable_timing", "=", "True", ")", "\n", "time_list", "=", "list", "(", ")", "\n", "\n", "\n", "train_loader", "=", "_create_data_loader", "(", "args", ")", "\n", "for", "batch_idx", ",", "data", ",", "target", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "        ", "data", ",", "target", "=", "data", ".", "to", "(", "assigned_device", ")", ",", "target", ".", "to", "(", "assigned_device", ")", "\n", "output", "=", "model", "(", "data", ")", "\n", "loss", "=", "criterion", "(", "output", ",", "target", ")", "\n", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "start_time", ".", "record", "(", ")", "\n", "loss", ".", "backward", "(", ")", "#we have the gradients", "\n", "# grad_list = [p.grad for p in model.parameters()]", "\n", "# for grad, memory, send_bfr in zip(grad_list, memories, send_buffers):", "\n", "# send_bfr.data[:] = grad + memory", "\n", "# reducer.reduce(send_buffers, grad_list, memories)", "\n", "# we have the gradients synchronized", "\n", "stop_time", ".", "record", "(", ")", "\n", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "# for param in model.parameters():", "\n", "# import ipdb; ipdb.set_trace()", "\n", "# print (\"Time {}, Device {}\".format(start_time.elapsed_time(stop_time),", "\n", "# args.device))", "\n", "time_list", ".", "append", "(", "start_time", ".", "elapsed_time", "(", "stop_time", ")", ")", "\n", "if", "batch_idx", "==", "60", ":", "\n", "            ", "file_uploader", "=", "s3_utils", ".", "uploadFile", "(", "\"large-scale-compression\"", ")", "\n", "data_dict", "=", "dict", "(", ")", "\n", "data_dict", "[", "'args'", "]", "=", "args", ".", "__str__", "(", ")", "\n", "data_dict", "[", "'timing_log'", "]", "=", "time_list", "\n", "file_name", "=", "\"{}_mstopk_overlap_k_{}_out_file_{}_batch_size_{}.json\"", ".", "format", "(", "network_name", ",", "\n", "topk_k", ",", "global_rank", ",", "bsize", ")", "\n", "with", "open", "(", "file_name", ",", "\"w\"", ")", "as", "fout", ":", "\n", "                ", "json", ".", "dump", "(", "data_dict", ",", "fout", ")", "\n", "", "file_uploader", ".", "push_file", "(", "file_name", ",", "\n", "\"{}/{}\"", ".", "format", "(", "args", ".", "s3_prefix", ",", "file_name", ")", ")", "\n", "\n", "print", "(", "\"Done {} TopK\"", ".", "format", "(", "network_name", ")", ")", "\n", "break", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.main_ddp_final.mstopk_serial": [[591, 644], ["torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "model.to", "torch.nn.CrossEntropyLoss().to", "torch.nn.CrossEntropyLoss().to", "torch.nn.CrossEntropyLoss().to", "torch.nn.CrossEntropyLoss().to", "torch.nn.CrossEntropyLoss().to", "torch.SGD", "main_ddp_final._get_compression_param", "model.train", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "list", "main_ddp_final._create_data_loader", "enumerate", "model.parameters", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "model", "torch.nn.CrossEntropyLoss().to.", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.Event.record", "criterion.backward", "_get_compression_param.reduce", "torch.cuda.Event.record", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "list.append", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "model.parameters", "data.to", "target.to", "torch.cuda.Event.elapsed_time", "s3_utils.uploadFile", "dict", "args.__str__", "s3_utils.uploadFile.push_file", "print", "model.parameters", "open", "json.dump"], "function", ["home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.main_ddp_final._get_compression_param", "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.main_ddp_final._create_data_loader", "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.gradient_reducers.ExactReducerPs.reduce", "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.s3_utils.uploadFile.push_file"], ["", "", "", "def", "mstopk_serial", "(", "args", ",", "topk_k", ",", "bsize", ",", "network_name", ")", ":", "\n", "\n", "    ", "assigned_device", "=", "\"cuda:{}\"", ".", "format", "(", "args", ".", "local_rank", ")", "\n", "torch", ".", "cuda", ".", "set_device", "(", "args", ".", "local_rank", ")", "\n", "global_rank", "=", "args", ".", "node_rank", "*", "4", "+", "args", ".", "local_rank", "\n", "model", "=", "models", ".", "__dict__", "[", "network_name", "]", "(", ")", "\n", "model", ".", "to", "(", "assigned_device", ")", "\n", "\n", "criterion", "=", "torch", ".", "nn", ".", "CrossEntropyLoss", "(", ")", ".", "to", "(", "assigned_device", ")", "\n", "optimizer", "=", "optim", ".", "SGD", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "0.1", ",", "momentum", "=", "0.9", ",", "\n", "weight_decay", "=", "0.0001", ")", "\n", "\n", "send_buffers", "=", "[", "torch", ".", "zeros_like", "(", "p", ")", "for", "p", "in", "model", ".", "parameters", "(", ")", "]", "\n", "reducer", "=", "_get_compression_param", "(", "\"MSTopK\"", ",", "assigned_device", ",", "topk_k", ")", "\n", "model", ".", "train", "(", ")", "\n", "start_time", "=", "torch", ".", "cuda", ".", "Event", "(", "enable_timing", "=", "True", ")", "\n", "stop_time", "=", "torch", ".", "cuda", ".", "Event", "(", "enable_timing", "=", "True", ")", "\n", "time_list", "=", "list", "(", ")", "\n", "\n", "train_loader", "=", "_create_data_loader", "(", "args", ")", "\n", "for", "batch_idx", ",", "data", ",", "target", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "        ", "data", ",", "target", "=", "data", ".", "to", "(", "assigned_device", ")", ",", "target", ".", "to", "(", "assigned_device", ")", "\n", "output", "=", "model", "(", "data", ")", "\n", "loss", "=", "criterion", "(", "output", ",", "target", ")", "\n", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "start_time", ".", "record", "(", ")", "\n", "loss", ".", "backward", "(", ")", "#we have the gradients", "\n", "grad_list", "=", "[", "p", ".", "grad", "for", "p", "in", "model", ".", "parameters", "(", ")", "]", "\n", "# for grad, memory, send_bfr in zip(grad_list, memories, send_buffers):", "\n", "# send_bfr.data[:] = grad + memory", "\n", "reducer", ".", "reduce", "(", "grad_list", ",", "send_buffers", ")", "\n", "# we have the gradients synchronized", "\n", "stop_time", ".", "record", "(", ")", "\n", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "# for param in model.parameters():", "\n", "# import ipdb; ipdb.set_trace()", "\n", "# print (\"Time {}, Device {}\".format(start_time.elapsed_time(stop_time),", "\n", "# args.device))", "\n", "time_list", ".", "append", "(", "start_time", ".", "elapsed_time", "(", "stop_time", ")", ")", "\n", "if", "batch_idx", "==", "60", ":", "\n", "            ", "file_uploader", "=", "s3_utils", ".", "uploadFile", "(", "\"large-scale-compression\"", ")", "\n", "data_dict", "=", "dict", "(", ")", "\n", "data_dict", "[", "'args'", "]", "=", "args", ".", "__str__", "(", ")", "\n", "data_dict", "[", "'timing_log'", "]", "=", "time_list", "\n", "file_name", "=", "\"{}_mstopk_serial_k_{}_out_file_{}_batch_size_{}.json\"", ".", "format", "(", "network_name", ",", "\n", "topk_k", ",", "global_rank", ",", "bsize", ")", "\n", "with", "open", "(", "file_name", ",", "\"w\"", ")", "as", "fout", ":", "\n", "                ", "json", ".", "dump", "(", "data_dict", ",", "fout", ")", "\n", "", "file_uploader", ".", "push_file", "(", "file_name", ",", "\n", "\"{}/{}\"", ".", "format", "(", "args", ".", "s3_prefix", ",", "file_name", ")", ")", "\n", "\n", "print", "(", "\"Done {} TopK\"", ".", "format", "(", "network_name", ")", ")", "\n", "break", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.main_ddp_final.powersgd_resnet101": [[645, 699], ["torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "model.to", "torch.nn.CrossEntropyLoss().to", "torch.nn.CrossEntropyLoss().to", "torch.nn.CrossEntropyLoss().to", "torch.nn.CrossEntropyLoss().to", "torch.nn.CrossEntropyLoss().to", "torch.SGD", "main_ddp_final._get_compression_param", "model.train", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "list", "main_ddp_final._create_data_loader", "enumerate", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "model.parameters", "model", "torch.nn.CrossEntropyLoss().to.", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.Event.record", "criterion.backward", "zip", "_get_compression_param.reduce", "torch.cuda.Event.record", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "list.append", "model.parameters", "model.parameters", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "data.to", "target.to", "torch.cuda.Event.elapsed_time", "s3_utils.uploadFile", "dict", "args.__str__", "s3_utils.uploadFile.push_file", "print", "model.parameters", "open", "json.dump"], "function", ["home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.main_ddp_final._get_compression_param", "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.main_ddp_final._create_data_loader", "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.gradient_reducers.ExactReducerPs.reduce", "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.s3_utils.uploadFile.push_file"], ["", "", "", "def", "powersgd_resnet101", "(", "args", ",", "psgd_rank", ",", "bsize", ")", ":", "\n", "    ", "assigned_device", "=", "\"cuda:{}\"", ".", "format", "(", "args", ".", "local_rank", ")", "\n", "torch", ".", "cuda", ".", "set_device", "(", "args", ".", "local_rank", ")", "\n", "global_rank", "=", "args", ".", "node_rank", "*", "4", "+", "args", ".", "local_rank", "\n", "model", "=", "models", ".", "__dict__", "[", "\"resnet101\"", "]", "(", ")", "\n", "model", ".", "to", "(", "assigned_device", ")", "\n", "\n", "memories", "=", "[", "torch", ".", "zeros_like", "(", "p", ")", "for", "p", "in", "model", ".", "parameters", "(", ")", "]", "\n", "send_buffers", "=", "[", "torch", ".", "zeros_like", "(", "p", ")", "for", "p", "in", "model", ".", "parameters", "(", ")", "]", "\n", "\n", "criterion", "=", "torch", ".", "nn", ".", "CrossEntropyLoss", "(", ")", ".", "to", "(", "assigned_device", ")", "\n", "optimizer", "=", "optim", ".", "SGD", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "0.1", ",", "momentum", "=", "0.9", ",", "\n", "weight_decay", "=", "0.0001", ")", "\n", "reducer", "=", "_get_compression_param", "(", "\"PowerSGD\"", ",", "assigned_device", ",", "psgd_rank", ")", "\n", "\n", "model", ".", "train", "(", ")", "\n", "start_time", "=", "torch", ".", "cuda", ".", "Event", "(", "enable_timing", "=", "True", ")", "\n", "stop_time", "=", "torch", ".", "cuda", ".", "Event", "(", "enable_timing", "=", "True", ")", "\n", "time_list", "=", "list", "(", ")", "\n", "\n", "\n", "train_loader", "=", "_create_data_loader", "(", "args", ")", "\n", "for", "batch_idx", ",", "data", ",", "target", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "        ", "data", ",", "target", "=", "data", ".", "to", "(", "assigned_device", ")", ",", "target", ".", "to", "(", "assigned_device", ")", "\n", "output", "=", "model", "(", "data", ")", "\n", "loss", "=", "criterion", "(", "output", ",", "target", ")", "\n", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "start_time", ".", "record", "(", ")", "\n", "loss", ".", "backward", "(", ")", "#we have the gradients", "\n", "grad_list", "=", "[", "p", ".", "grad", "for", "p", "in", "model", ".", "parameters", "(", ")", "]", "\n", "for", "grad", ",", "memory", ",", "send_bfr", "in", "zip", "(", "grad_list", ",", "memories", ",", "send_buffers", ")", ":", "\n", "            ", "send_bfr", ".", "data", "[", ":", "]", "=", "grad", "+", "memory", "\n", "", "reducer", ".", "reduce", "(", "send_buffers", ",", "grad_list", ",", "memories", ")", "\n", "# we have the gradients synchronized", "\n", "stop_time", ".", "record", "(", ")", "\n", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "# print (\"Time {}, Device {}\".format(start_time.elapsed_time(stop_time),", "\n", "# args.device))", "\n", "time_list", ".", "append", "(", "start_time", ".", "elapsed_time", "(", "stop_time", ")", ")", "\n", "if", "batch_idx", "==", "60", ":", "\n", "            ", "file_uploader", "=", "s3_utils", ".", "uploadFile", "(", "\"large-scale-compression\"", ")", "\n", "data_dict", "=", "dict", "(", ")", "\n", "data_dict", "[", "'args'", "]", "=", "args", ".", "__str__", "(", ")", "\n", "data_dict", "[", "'timing_log'", "]", "=", "time_list", "\n", "file_name", "=", "\"resnet101_powersgd_rank_{}_out_file_{}_batch_size_{}.json\"", ".", "format", "(", "psgd_rank", ",", "\n", "global_rank", ",", "\n", "bsize", ")", "\n", "with", "open", "(", "file_name", ",", "\"w\"", ")", "as", "fout", ":", "\n", "                ", "json", ".", "dump", "(", "data_dict", ",", "fout", ")", "\n", "", "file_uploader", ".", "push_file", "(", "file_name", ",", "\n", "\"{}/{}\"", ".", "format", "(", "args", ".", "s3_prefix", ",", "file_name", ")", ")", "\n", "\n", "print", "(", "\"Done Resnet 101\"", ")", "\n", "break", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.main_ddp_final.signsgd_resnet101": [[700, 753], ["torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "model.to", "torch.nn.CrossEntropyLoss().to", "torch.nn.CrossEntropyLoss().to", "torch.nn.CrossEntropyLoss().to", "torch.nn.CrossEntropyLoss().to", "torch.nn.CrossEntropyLoss().to", "torch.SGD", "main_ddp_final._get_compression_param", "model.train", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "list", "main_ddp_final._create_data_loader", "enumerate", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "model.parameters", "model", "torch.nn.CrossEntropyLoss().to.", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.Event.record", "criterion.backward", "zip", "_get_compression_param.reduce", "torch.cuda.Event.record", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "list.append", "model.parameters", "model.parameters", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "data.to", "target.to", "torch.cuda.Event.elapsed_time", "s3_utils.uploadFile", "dict", "args.__str__", "s3_utils.uploadFile.push_file", "print", "model.parameters", "open", "json.dump"], "function", ["home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.main_ddp_final._get_compression_param", "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.main_ddp_final._create_data_loader", "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.gradient_reducers.ExactReducerPs.reduce", "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.s3_utils.uploadFile.push_file"], ["", "", "", "def", "signsgd_resnet101", "(", "args", ",", "bsize", ")", ":", "\n", "    ", "assigned_device", "=", "\"cuda:{}\"", ".", "format", "(", "args", ".", "local_rank", ")", "\n", "torch", ".", "cuda", ".", "set_device", "(", "args", ".", "local_rank", ")", "\n", "global_rank", "=", "args", ".", "node_rank", "*", "4", "+", "args", ".", "local_rank", "\n", "model", "=", "models", ".", "__dict__", "[", "\"resnet101\"", "]", "(", ")", "\n", "model", ".", "to", "(", "assigned_device", ")", "\n", "\n", "memories", "=", "[", "torch", ".", "zeros_like", "(", "p", ")", "for", "p", "in", "model", ".", "parameters", "(", ")", "]", "\n", "send_buffers", "=", "[", "torch", ".", "zeros_like", "(", "p", ")", "for", "p", "in", "model", ".", "parameters", "(", ")", "]", "\n", "\n", "criterion", "=", "torch", ".", "nn", ".", "CrossEntropyLoss", "(", ")", ".", "to", "(", "assigned_device", ")", "\n", "optimizer", "=", "optim", ".", "SGD", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "0.1", ",", "momentum", "=", "0.9", ",", "\n", "weight_decay", "=", "0.0001", ")", "\n", "reducer", "=", "_get_compression_param", "(", "\"SignSGD\"", ",", "assigned_device", ",", "None", ")", "\n", "\n", "model", ".", "train", "(", ")", "\n", "start_time", "=", "torch", ".", "cuda", ".", "Event", "(", "enable_timing", "=", "True", ")", "\n", "stop_time", "=", "torch", ".", "cuda", ".", "Event", "(", "enable_timing", "=", "True", ")", "\n", "time_list", "=", "list", "(", ")", "\n", "\n", "\n", "train_loader", "=", "_create_data_loader", "(", "args", ")", "\n", "for", "batch_idx", ",", "data", ",", "target", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "        ", "data", ",", "target", "=", "data", ".", "to", "(", "assigned_device", ")", ",", "target", ".", "to", "(", "assigned_device", ")", "\n", "output", "=", "model", "(", "data", ")", "\n", "loss", "=", "criterion", "(", "output", ",", "target", ")", "\n", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "start_time", ".", "record", "(", ")", "\n", "loss", ".", "backward", "(", ")", "#we have the gradients", "\n", "grad_list", "=", "[", "p", ".", "grad", "for", "p", "in", "model", ".", "parameters", "(", ")", "]", "\n", "for", "grad", ",", "memory", ",", "send_bfr", "in", "zip", "(", "grad_list", ",", "memories", ",", "send_buffers", ")", ":", "\n", "            ", "send_bfr", ".", "data", "[", ":", "]", "=", "grad", "+", "memory", "\n", "", "reducer", ".", "reduce", "(", "send_buffers", ",", "grad_list", ",", "memories", ")", "\n", "# we have the gradients synchronized", "\n", "stop_time", ".", "record", "(", ")", "\n", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "# print (\"Time {}, Device {}\".format(start_time.elapsed_time(stop_time),", "\n", "# args.device))", "\n", "time_list", ".", "append", "(", "start_time", ".", "elapsed_time", "(", "stop_time", ")", ")", "\n", "if", "batch_idx", "==", "60", ":", "\n", "            ", "file_uploader", "=", "s3_utils", ".", "uploadFile", "(", "\"large-scale-compression\"", ")", "\n", "data_dict", "=", "dict", "(", ")", "\n", "data_dict", "[", "'args'", "]", "=", "args", ".", "__str__", "(", ")", "\n", "data_dict", "[", "'timing_log'", "]", "=", "time_list", "\n", "file_name", "=", "\"resnet101_signsgd_serial_out_file_{}.json\"", ".", "format", "(", "\n", "global_rank", ")", "\n", "with", "open", "(", "file_name", ",", "\"w\"", ")", "as", "fout", ":", "\n", "                ", "json", ".", "dump", "(", "data_dict", ",", "fout", ")", "\n", "", "file_uploader", ".", "push_file", "(", "file_name", ",", "\n", "\"{}/{}\"", ".", "format", "(", "args", ".", "s3_prefix", ",", "file_name", ")", ")", "\n", "\n", "print", "(", "\"Done Resnet 101\"", ")", "\n", "break", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.main_ddp_final.signsgd_resnet50": [[754, 807], ["torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "model.to", "torch.nn.CrossEntropyLoss().to", "torch.nn.CrossEntropyLoss().to", "torch.nn.CrossEntropyLoss().to", "torch.nn.CrossEntropyLoss().to", "torch.nn.CrossEntropyLoss().to", "torch.SGD", "main_ddp_final._get_compression_param", "model.train", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "list", "main_ddp_final._create_data_loader", "enumerate", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "model.parameters", "model", "torch.nn.CrossEntropyLoss().to.", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.Event.record", "criterion.backward", "zip", "_get_compression_param.reduce", "torch.cuda.Event.record", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "list.append", "model.parameters", "model.parameters", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "data.to", "target.to", "torch.cuda.Event.elapsed_time", "s3_utils.uploadFile", "dict", "args.__str__", "s3_utils.uploadFile.push_file", "print", "model.parameters", "open", "json.dump"], "function", ["home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.main_ddp_final._get_compression_param", "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.main_ddp_final._create_data_loader", "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.gradient_reducers.ExactReducerPs.reduce", "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.s3_utils.uploadFile.push_file"], ["", "", "", "def", "signsgd_resnet50", "(", "args", ",", "bsize", ")", ":", "\n", "    ", "assigned_device", "=", "\"cuda:{}\"", ".", "format", "(", "args", ".", "local_rank", ")", "\n", "torch", ".", "cuda", ".", "set_device", "(", "args", ".", "local_rank", ")", "\n", "global_rank", "=", "args", ".", "node_rank", "*", "4", "+", "args", ".", "local_rank", "\n", "model", "=", "models", ".", "__dict__", "[", "\"resnet50\"", "]", "(", ")", "\n", "model", ".", "to", "(", "assigned_device", ")", "\n", "\n", "memories", "=", "[", "torch", ".", "zeros_like", "(", "p", ")", "for", "p", "in", "model", ".", "parameters", "(", ")", "]", "\n", "send_buffers", "=", "[", "torch", ".", "zeros_like", "(", "p", ")", "for", "p", "in", "model", ".", "parameters", "(", ")", "]", "\n", "\n", "criterion", "=", "torch", ".", "nn", ".", "CrossEntropyLoss", "(", ")", ".", "to", "(", "assigned_device", ")", "\n", "optimizer", "=", "optim", ".", "SGD", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "0.1", ",", "momentum", "=", "0.9", ",", "\n", "weight_decay", "=", "0.0001", ")", "\n", "reducer", "=", "_get_compression_param", "(", "\"SignSGD\"", ",", "assigned_device", ",", "None", ")", "\n", "\n", "model", ".", "train", "(", ")", "\n", "start_time", "=", "torch", ".", "cuda", ".", "Event", "(", "enable_timing", "=", "True", ")", "\n", "stop_time", "=", "torch", ".", "cuda", ".", "Event", "(", "enable_timing", "=", "True", ")", "\n", "time_list", "=", "list", "(", ")", "\n", "\n", "\n", "train_loader", "=", "_create_data_loader", "(", "args", ")", "\n", "for", "batch_idx", ",", "data", ",", "target", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "        ", "data", ",", "target", "=", "data", ".", "to", "(", "assigned_device", ")", ",", "target", ".", "to", "(", "assigned_device", ")", "\n", "output", "=", "model", "(", "data", ")", "\n", "loss", "=", "criterion", "(", "output", ",", "target", ")", "\n", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "start_time", ".", "record", "(", ")", "\n", "loss", ".", "backward", "(", ")", "#we have the gradients", "\n", "grad_list", "=", "[", "p", ".", "grad", "for", "p", "in", "model", ".", "parameters", "(", ")", "]", "\n", "for", "grad", ",", "memory", ",", "send_bfr", "in", "zip", "(", "grad_list", ",", "memories", ",", "send_buffers", ")", ":", "\n", "            ", "send_bfr", ".", "data", "[", ":", "]", "=", "grad", "+", "memory", "\n", "", "reducer", ".", "reduce", "(", "send_buffers", ",", "grad_list", ",", "memories", ")", "\n", "# we have the gradients synchronized", "\n", "stop_time", ".", "record", "(", ")", "\n", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "# print (\"Time {}, Device {}\".format(start_time.elapsed_time(stop_time),", "\n", "# args.device))", "\n", "time_list", ".", "append", "(", "start_time", ".", "elapsed_time", "(", "stop_time", ")", ")", "\n", "if", "batch_idx", "==", "60", ":", "\n", "            ", "file_uploader", "=", "s3_utils", ".", "uploadFile", "(", "\"large-scale-compression\"", ")", "\n", "data_dict", "=", "dict", "(", ")", "\n", "data_dict", "[", "'args'", "]", "=", "args", ".", "__str__", "(", ")", "\n", "data_dict", "[", "'timing_log'", "]", "=", "time_list", "\n", "file_name", "=", "\"resnet50_signsgd_serial_out_file_{}.json\"", ".", "format", "(", "\n", "global_rank", ")", "\n", "with", "open", "(", "file_name", ",", "\"w\"", ")", "as", "fout", ":", "\n", "                ", "json", ".", "dump", "(", "data_dict", ",", "fout", ")", "\n", "", "file_uploader", ".", "push_file", "(", "file_name", ",", "\n", "\"{}/{}\"", ".", "format", "(", "args", ".", "s3_prefix", ",", "file_name", ")", ")", "\n", "\n", "print", "(", "\"Done Resnet 101\"", ")", "\n", "break", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.main_ddp_final.topk_resnet50": [[808, 861], ["torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "model.to", "torch.nn.CrossEntropyLoss().to", "torch.nn.CrossEntropyLoss().to", "torch.nn.CrossEntropyLoss().to", "torch.nn.CrossEntropyLoss().to", "torch.nn.CrossEntropyLoss().to", "torch.SGD", "main_ddp_final._get_compression_param", "model.train", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "list", "main_ddp_final._create_data_loader", "enumerate", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "model.parameters", "model", "torch.nn.CrossEntropyLoss().to.", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.Event.record", "criterion.backward", "zip", "_get_compression_param.reduce", "torch.cuda.Event.record", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "list.append", "model.parameters", "model.parameters", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "data.to", "target.to", "torch.cuda.Event.elapsed_time", "s3_utils.uploadFile", "dict", "args.__str__", "s3_utils.uploadFile.push_file", "print", "model.parameters", "open", "json.dump"], "function", ["home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.main_ddp_final._get_compression_param", "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.main_ddp_final._create_data_loader", "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.gradient_reducers.ExactReducerPs.reduce", "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.s3_utils.uploadFile.push_file"], ["", "", "", "def", "topk_resnet50", "(", "args", ",", "topk_compression", ")", ":", "\n", "    ", "assigned_device", "=", "\"cuda:{}\"", ".", "format", "(", "args", ".", "local_rank", ")", "\n", "torch", ".", "cuda", ".", "set_device", "(", "args", ".", "local_rank", ")", "\n", "global_rank", "=", "args", ".", "node_rank", "*", "4", "+", "args", ".", "local_rank", "\n", "model", "=", "models", ".", "__dict__", "[", "\"resnet50\"", "]", "(", ")", "\n", "model", ".", "to", "(", "assigned_device", ")", "\n", "\n", "memories", "=", "[", "torch", ".", "zeros_like", "(", "p", ")", "for", "p", "in", "model", ".", "parameters", "(", ")", "]", "\n", "send_buffers", "=", "[", "torch", ".", "zeros_like", "(", "p", ")", "for", "p", "in", "model", ".", "parameters", "(", ")", "]", "\n", "\n", "criterion", "=", "torch", ".", "nn", ".", "CrossEntropyLoss", "(", ")", ".", "to", "(", "assigned_device", ")", "\n", "optimizer", "=", "optim", ".", "SGD", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "0.1", ",", "momentum", "=", "0.9", ",", "\n", "weight_decay", "=", "0.0001", ")", "\n", "reducer", "=", "_get_compression_param", "(", "\"Topk\"", ",", "assigned_device", ",", "topk_compression", ")", "\n", "\n", "model", ".", "train", "(", ")", "\n", "start_time", "=", "torch", ".", "cuda", ".", "Event", "(", "enable_timing", "=", "True", ")", "\n", "stop_time", "=", "torch", ".", "cuda", ".", "Event", "(", "enable_timing", "=", "True", ")", "\n", "time_list", "=", "list", "(", ")", "\n", "\n", "\n", "train_loader", "=", "_create_data_loader", "(", "args", ")", "\n", "for", "batch_idx", ",", "data", ",", "target", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "        ", "data", ",", "target", "=", "data", ".", "to", "(", "assigned_device", ")", ",", "target", ".", "to", "(", "assigned_device", ")", "\n", "output", "=", "model", "(", "data", ")", "\n", "loss", "=", "criterion", "(", "output", ",", "target", ")", "\n", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "start_time", ".", "record", "(", ")", "\n", "loss", ".", "backward", "(", ")", "#we have the gradients", "\n", "grad_list", "=", "[", "p", ".", "grad", "for", "p", "in", "model", ".", "parameters", "(", ")", "]", "\n", "for", "grad", ",", "memory", ",", "send_bfr", "in", "zip", "(", "grad_list", ",", "memories", ",", "send_buffers", ")", ":", "\n", "            ", "send_bfr", ".", "data", "[", ":", "]", "=", "grad", "+", "memory", "\n", "", "reducer", ".", "reduce", "(", "send_buffers", ",", "grad_list", ",", "memories", ")", "\n", "# we have the gradients synchronized", "\n", "stop_time", ".", "record", "(", ")", "\n", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "# print (\"Time {}, Device {}\".format(start_time.elapsed_time(stop_time),", "\n", "# args.device))", "\n", "time_list", ".", "append", "(", "start_time", ".", "elapsed_time", "(", "stop_time", ")", ")", "\n", "if", "batch_idx", "==", "10", ":", "\n", "            ", "file_uploader", "=", "s3_utils", ".", "uploadFile", "(", "\"large-scale-compression\"", ")", "\n", "data_dict", "=", "dict", "(", ")", "\n", "data_dict", "[", "'args'", "]", "=", "args", ".", "__str__", "(", ")", "\n", "data_dict", "[", "'timing_log'", "]", "=", "time_list", "\n", "file_name", "=", "\"resnet50_topk_{}_out_file_{}.json\"", ".", "format", "(", "\n", "topk_compression", ",", "global_rank", ")", "\n", "with", "open", "(", "file_name", ",", "\"w\"", ")", "as", "fout", ":", "\n", "                ", "json", ".", "dump", "(", "data_dict", ",", "fout", ")", "\n", "", "file_uploader", ".", "push_file", "(", "file_name", ",", "\n", "\"{}/{}\"", ".", "format", "(", "args", ".", "s3_prefix", ",", "file_name", ")", ")", "\n", "\n", "print", "(", "\"Done Resnet 50\"", ")", "\n", "break", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.main_ddp_final.topk_resnet101": [[862, 914], ["torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "model.to", "torch.nn.CrossEntropyLoss().to", "torch.nn.CrossEntropyLoss().to", "torch.nn.CrossEntropyLoss().to", "torch.nn.CrossEntropyLoss().to", "torch.nn.CrossEntropyLoss().to", "torch.SGD", "main_ddp_final._get_compression_param", "model.train", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "list", "main_ddp_final._create_data_loader", "enumerate", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "model.parameters", "model", "torch.nn.CrossEntropyLoss().to.", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.Event.record", "criterion.backward", "zip", "_get_compression_param.reduce", "torch.cuda.Event.record", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "list.append", "model.parameters", "model.parameters", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "data.to", "target.to", "torch.cuda.Event.elapsed_time", "s3_utils.uploadFile", "dict", "args.__str__", "s3_utils.uploadFile.push_file", "print", "model.parameters", "open", "json.dump"], "function", ["home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.main_ddp_final._get_compression_param", "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.main_ddp_final._create_data_loader", "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.gradient_reducers.ExactReducerPs.reduce", "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.s3_utils.uploadFile.push_file"], ["", "", "", "def", "topk_resnet101", "(", "args", ",", "topk_compression", ")", ":", "\n", "    ", "assigned_device", "=", "\"cuda:{}\"", ".", "format", "(", "args", ".", "local_rank", ")", "\n", "torch", ".", "cuda", ".", "set_device", "(", "args", ".", "local_rank", ")", "\n", "global_rank", "=", "args", ".", "node_rank", "*", "4", "+", "args", ".", "local_rank", "\n", "model", "=", "models", ".", "__dict__", "[", "\"resnet101\"", "]", "(", ")", "\n", "model", ".", "to", "(", "assigned_device", ")", "\n", "\n", "memories", "=", "[", "torch", ".", "zeros_like", "(", "p", ")", "for", "p", "in", "model", ".", "parameters", "(", ")", "]", "\n", "send_buffers", "=", "[", "torch", ".", "zeros_like", "(", "p", ")", "for", "p", "in", "model", ".", "parameters", "(", ")", "]", "\n", "\n", "criterion", "=", "torch", ".", "nn", ".", "CrossEntropyLoss", "(", ")", ".", "to", "(", "assigned_device", ")", "\n", "optimizer", "=", "optim", ".", "SGD", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "0.1", ",", "momentum", "=", "0.9", ",", "\n", "weight_decay", "=", "0.0001", ")", "\n", "reducer", "=", "_get_compression_param", "(", "\"Topk\"", ",", "assigned_device", ",", "topk_compression", ")", "\n", "\n", "model", ".", "train", "(", ")", "\n", "start_time", "=", "torch", ".", "cuda", ".", "Event", "(", "enable_timing", "=", "True", ")", "\n", "stop_time", "=", "torch", ".", "cuda", ".", "Event", "(", "enable_timing", "=", "True", ")", "\n", "time_list", "=", "list", "(", ")", "\n", "\n", "\n", "train_loader", "=", "_create_data_loader", "(", "args", ")", "\n", "for", "batch_idx", ",", "data", ",", "target", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "        ", "data", ",", "target", "=", "data", ".", "to", "(", "assigned_device", ")", ",", "target", ".", "to", "(", "assigned_device", ")", "\n", "output", "=", "model", "(", "data", ")", "\n", "loss", "=", "criterion", "(", "output", ",", "target", ")", "\n", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "start_time", ".", "record", "(", ")", "\n", "loss", ".", "backward", "(", ")", "#we have the gradients", "\n", "grad_list", "=", "[", "p", ".", "grad", "for", "p", "in", "model", ".", "parameters", "(", ")", "]", "\n", "for", "grad", ",", "memory", ",", "send_bfr", "in", "zip", "(", "grad_list", ",", "memories", ",", "send_buffers", ")", ":", "\n", "            ", "send_bfr", ".", "data", "[", ":", "]", "=", "grad", "+", "memory", "\n", "", "reducer", ".", "reduce", "(", "send_buffers", ",", "grad_list", ",", "memories", ")", "\n", "# we have the gradients synchronized", "\n", "stop_time", ".", "record", "(", ")", "\n", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "# print (\"Time {}, Device {}\".format(start_time.elapsed_time(stop_time),", "\n", "# args.device))", "\n", "time_list", ".", "append", "(", "start_time", ".", "elapsed_time", "(", "stop_time", ")", ")", "\n", "if", "batch_idx", "==", "10", ":", "\n", "            ", "file_uploader", "=", "s3_utils", ".", "uploadFile", "(", "\"large-scale-compression\"", ")", "\n", "data_dict", "=", "dict", "(", ")", "\n", "data_dict", "[", "'args'", "]", "=", "args", ".", "__str__", "(", ")", "\n", "data_dict", "[", "'timing_log'", "]", "=", "time_list", "\n", "file_name", "=", "\"resnet101_topk_{}_out_file_{}.json\"", ".", "format", "(", "\n", "topk_compression", ",", "global_rank", ")", "\n", "with", "open", "(", "file_name", ",", "\"w\"", ")", "as", "fout", ":", "\n", "                ", "json", ".", "dump", "(", "data_dict", ",", "fout", ")", "\n", "", "file_uploader", ".", "push_file", "(", "file_name", ",", "\n", "\"{}/{}\"", ".", "format", "(", "args", ".", "s3_prefix", ",", "file_name", ")", ")", "\n", "print", "(", "\"Done Resnet 101\"", ")", "\n", "break", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.optimizer_lr.AdamW.__init__": [[177, 196], ["dict", "torch.optim.Optimizer.__init__", "ValueError", "ValueError", "ValueError", "ValueError"], "methods", ["home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.cifar_architectures.wresnet.Wide_ResNet.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "params", ":", "Iterable", "[", "torch", ".", "nn", ".", "parameter", ".", "Parameter", "]", ",", "\n", "lr", ":", "float", "=", "1e-3", ",", "\n", "betas", ":", "Tuple", "[", "float", ",", "float", "]", "=", "(", "0.9", ",", "0.999", ")", ",", "\n", "eps", ":", "float", "=", "1e-6", ",", "\n", "weight_decay", ":", "float", "=", "0.0", ",", "\n", "correct_bias", ":", "bool", "=", "True", ",", "\n", ")", ":", "\n", "        ", "if", "lr", "<", "0.0", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid learning rate: {} - should be >= 0.0\"", ".", "format", "(", "lr", ")", ")", "\n", "", "if", "not", "0.0", "<=", "betas", "[", "0", "]", "<", "1.0", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid beta parameter: {} - should be in [0.0, 1.0[\"", ".", "format", "(", "betas", "[", "0", "]", ")", ")", "\n", "", "if", "not", "0.0", "<=", "betas", "[", "1", "]", "<", "1.0", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid beta parameter: {} - should be in [0.0, 1.0[\"", ".", "format", "(", "betas", "[", "1", "]", ")", ")", "\n", "", "if", "not", "0.0", "<=", "eps", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid epsilon value: {} - should be >= 0.0\"", ".", "format", "(", "eps", ")", ")", "\n", "", "defaults", "=", "dict", "(", "lr", "=", "lr", ",", "betas", "=", "betas", ",", "eps", "=", "eps", ",", "weight_decay", "=", "weight_decay", ",", "correct_bias", "=", "correct_bias", ")", "\n", "super", "(", ")", ".", "__init__", "(", "params", ",", "defaults", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.optimizer_lr.AdamW.step": [[197, 256], ["closure", "exp_avg.mul_().add_", "exp_avg_sq.mul_().addcmul_", "exp_avg_sq.sqrt().add_", "p.data.addcdiv_", "RuntimeError", "len", "torch.zeros_like", "torch.zeros_like", "p.data.add_", "exp_avg.mul_", "exp_avg_sq.mul_", "exp_avg_sq.sqrt", "math.sqrt"], "methods", ["None"], ["", "def", "step", "(", "self", ",", "closure", ":", "Callable", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Performs a single optimization step.\n        Arguments:\n            closure (:obj:`Callable`, `optional`): A closure that reevaluates the model and returns the loss.\n        \"\"\"", "\n", "loss", "=", "None", "\n", "if", "closure", "is", "not", "None", ":", "\n", "            ", "loss", "=", "closure", "(", ")", "\n", "\n", "", "for", "group", "in", "self", ".", "param_groups", ":", "\n", "            ", "for", "p", "in", "group", "[", "\"params\"", "]", ":", "\n", "                ", "if", "p", ".", "grad", "is", "None", ":", "\n", "                    ", "continue", "\n", "", "grad", "=", "p", ".", "grad", ".", "data", "\n", "if", "grad", ".", "is_sparse", ":", "\n", "                    ", "raise", "RuntimeError", "(", "\"Adam does not support sparse gradients, please consider SparseAdam instead\"", ")", "\n", "\n", "", "state", "=", "self", ".", "state", "[", "p", "]", "\n", "\n", "# State initialization", "\n", "if", "len", "(", "state", ")", "==", "0", ":", "\n", "                    ", "state", "[", "\"step\"", "]", "=", "0", "\n", "# Exponential moving average of gradient values", "\n", "state", "[", "\"exp_avg\"", "]", "=", "torch", ".", "zeros_like", "(", "p", ".", "data", ")", "\n", "# Exponential moving average of squared gradient values", "\n", "state", "[", "\"exp_avg_sq\"", "]", "=", "torch", ".", "zeros_like", "(", "p", ".", "data", ")", "\n", "\n", "", "exp_avg", ",", "exp_avg_sq", "=", "state", "[", "\"exp_avg\"", "]", ",", "state", "[", "\"exp_avg_sq\"", "]", "\n", "beta1", ",", "beta2", "=", "group", "[", "\"betas\"", "]", "\n", "\n", "state", "[", "\"step\"", "]", "+=", "1", "\n", "\n", "# Decay the first and second moment running average coefficient", "\n", "# In-place operations to update the averages at the same time", "\n", "exp_avg", ".", "mul_", "(", "beta1", ")", ".", "add_", "(", "grad", ",", "alpha", "=", "1.0", "-", "beta1", ")", "\n", "exp_avg_sq", ".", "mul_", "(", "beta2", ")", ".", "addcmul_", "(", "grad", ",", "grad", ",", "value", "=", "1.0", "-", "beta2", ")", "\n", "denom", "=", "exp_avg_sq", ".", "sqrt", "(", ")", ".", "add_", "(", "group", "[", "\"eps\"", "]", ")", "\n", "\n", "step_size", "=", "group", "[", "\"lr\"", "]", "\n", "if", "group", "[", "\"correct_bias\"", "]", ":", "# No bias correction for Bert", "\n", "                    ", "bias_correction1", "=", "1.0", "-", "beta1", "**", "state", "[", "\"step\"", "]", "\n", "bias_correction2", "=", "1.0", "-", "beta2", "**", "state", "[", "\"step\"", "]", "\n", "step_size", "=", "step_size", "*", "math", ".", "sqrt", "(", "bias_correction2", ")", "/", "bias_correction1", "\n", "\n", "", "p", ".", "data", ".", "addcdiv_", "(", "exp_avg", ",", "denom", ",", "value", "=", "-", "step_size", ")", "\n", "\n", "# Just adding the square of the weights to the loss function is *not*", "\n", "# the correct way of using L2 regularization/weight decay with Adam,", "\n", "# since that will interact with the m and v parameters in strange ways.", "\n", "#", "\n", "# Instead we want to decay the weights in a manner that doesn't interact", "\n", "# with the m/v parameters. This is equivalent to adding the square", "\n", "# of the weights to the loss with plain (non-momentum) SGD.", "\n", "# Add weight decay at the end (fixed version)", "\n", "if", "group", "[", "\"weight_decay\"", "]", ">", "0.0", ":", "\n", "                    ", "p", ".", "data", ".", "add_", "(", "p", ".", "data", ",", "alpha", "=", "-", "group", "[", "\"lr\"", "]", "*", "group", "[", "\"weight_decay\"", "]", ")", "\n", "\n", "", "", "", "return", "loss", "", "", "", ""]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.optimizer_lr.get_constant_schedule": [[29, 41], ["torch.optim.lr_scheduler.LambdaLR"], "function", ["None"], ["def", "get_constant_schedule", "(", "optimizer", ":", "Optimizer", ",", "last_epoch", ":", "int", "=", "-", "1", ")", ":", "\n", "    ", "\"\"\"\n    Create a schedule with a constant learning rate, using the learning rate set in optimizer.\n    Args:\n        optimizer (:class:`~torch.optim.Optimizer`):\n            The optimizer for which to schedule the learning rate.\n        last_epoch (:obj:`int`, `optional`, defaults to -1):\n            The index of the last epoch when resuming training.\n    Return:\n        :obj:`torch.optim.lr_scheduler.LambdaLR` with the appropriate schedule.\n    \"\"\"", "\n", "return", "LambdaLR", "(", "optimizer", ",", "lambda", "_", ":", "1", ",", "last_epoch", "=", "last_epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.optimizer_lr.get_constant_schedule_with_warmup": [[43, 64], ["torch.optim.lr_scheduler.LambdaLR", "float", "float", "max"], "function", ["None"], ["", "def", "get_constant_schedule_with_warmup", "(", "optimizer", ":", "Optimizer", ",", "num_warmup_steps", ":", "int", ",", "last_epoch", ":", "int", "=", "-", "1", ")", ":", "\n", "    ", "\"\"\"\n    Create a schedule with a constant learning rate preceded by a warmup period during which the learning rate\n    increases linearly between 0 and the initial lr set in the optimizer.\n    Args:\n        optimizer (:class:`~torch.optim.Optimizer`):\n            The optimizer for which to schedule the learning rate.\n        num_warmup_steps (:obj:`int`):\n            The number of steps for the warmup phase.\n        last_epoch (:obj:`int`, `optional`, defaults to -1):\n            The index of the last epoch when resuming training.\n    Return:\n        :obj:`torch.optim.lr_scheduler.LambdaLR` with the appropriate schedule.\n    \"\"\"", "\n", "\n", "def", "lr_lambda", "(", "current_step", ":", "int", ")", ":", "\n", "        ", "if", "current_step", "<", "num_warmup_steps", ":", "\n", "            ", "return", "float", "(", "current_step", ")", "/", "float", "(", "max", "(", "1.0", ",", "num_warmup_steps", ")", ")", "\n", "", "return", "1.0", "\n", "\n", "", "return", "LambdaLR", "(", "optimizer", ",", "lr_lambda", ",", "last_epoch", "=", "last_epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.optimizer_lr.get_linear_schedule_with_warmup": [[66, 91], ["torch.optim.lr_scheduler.LambdaLR", "max", "float", "float", "float", "float", "max", "max"], "function", ["None"], ["", "def", "get_linear_schedule_with_warmup", "(", "optimizer", ",", "num_warmup_steps", ",", "num_training_steps", ",", "last_epoch", "=", "-", "1", ")", ":", "\n", "    ", "\"\"\"\n    Create a schedule with a learning rate that decreases linearly from the initial lr set in the optimizer to 0,\n    after a warmup period during which it increases linearly from 0 to the initial lr set in the optimizer.\n    Args:\n        optimizer (:class:`~torch.optim.Optimizer`):\n            The optimizer for which to schedule the learning rate.\n        num_warmup_steps (:obj:`int`):\n            The number of steps for the warmup phase.\n        num_training_steps (:obj:`int`):\n            The totale number of training steps.\n        last_epoch (:obj:`int`, `optional`, defaults to -1):\n            The index of the last epoch when resuming training.\n    Return:\n        :obj:`torch.optim.lr_scheduler.LambdaLR` with the appropriate schedule.\n    \"\"\"", "\n", "\n", "def", "lr_lambda", "(", "current_step", ":", "int", ")", ":", "\n", "        ", "if", "current_step", "<", "num_warmup_steps", ":", "\n", "            ", "return", "float", "(", "current_step", ")", "/", "float", "(", "max", "(", "1", ",", "num_warmup_steps", ")", ")", "\n", "", "return", "max", "(", "\n", "0.0", ",", "float", "(", "num_training_steps", "-", "current_step", ")", "/", "float", "(", "max", "(", "1", ",", "num_training_steps", "-", "num_warmup_steps", ")", ")", "\n", ")", "\n", "\n", "", "return", "LambdaLR", "(", "optimizer", ",", "lr_lambda", ",", "last_epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.optimizer_lr.get_cosine_schedule_with_warmup": [[93, 123], ["torch.optim.lr_scheduler.LambdaLR", "max", "float", "float", "float", "float", "max", "max", "math.cos", "float"], "function", ["None"], ["", "def", "get_cosine_schedule_with_warmup", "(", "\n", "optimizer", ":", "Optimizer", ",", "num_warmup_steps", ":", "int", ",", "num_training_steps", ":", "int", ",", "num_cycles", ":", "float", "=", "0.5", ",", "last_epoch", ":", "int", "=", "-", "1", "\n", ")", ":", "\n", "    ", "\"\"\"\n    Create a schedule with a learning rate that decreases following the values of the cosine function between the\n    initial lr set in the optimizer to 0, after a warmup period during which it increases linearly between 0 and the\n    initial lr set in the optimizer.\n    Args:\n        optimizer (:class:`~torch.optim.Optimizer`):\n            The optimizer for which to schedule the learning rate.\n        num_warmup_steps (:obj:`int`):\n            The number of steps for the warmup phase.\n        num_training_steps (:obj:`int`):\n            The total number of training steps.\n        num_cycles (:obj:`float`, `optional`, defaults to 0.5):\n            The number of waves in the cosine schedule (the defaults is to just decrease from the max value to 0\n            following a half-cosine).\n        last_epoch (:obj:`int`, `optional`, defaults to -1):\n            The index of the last epoch when resuming training.\n    Return:\n        :obj:`torch.optim.lr_scheduler.LambdaLR` with the appropriate schedule.\n    \"\"\"", "\n", "\n", "def", "lr_lambda", "(", "current_step", ")", ":", "\n", "        ", "if", "current_step", "<", "num_warmup_steps", ":", "\n", "            ", "return", "float", "(", "current_step", ")", "/", "float", "(", "max", "(", "1", ",", "num_warmup_steps", ")", ")", "\n", "", "progress", "=", "float", "(", "current_step", "-", "num_warmup_steps", ")", "/", "float", "(", "max", "(", "1", ",", "num_training_steps", "-", "num_warmup_steps", ")", ")", "\n", "return", "max", "(", "0.0", ",", "0.5", "*", "(", "1.0", "+", "math", ".", "cos", "(", "math", ".", "pi", "*", "float", "(", "num_cycles", ")", "*", "2.0", "*", "progress", ")", ")", ")", "\n", "\n", "", "return", "LambdaLR", "(", "optimizer", ",", "lr_lambda", ",", "last_epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.optimizer_lr.get_cosine_with_hard_restarts_schedule_with_warmup": [[125, 156], ["torch.optim.lr_scheduler.LambdaLR", "max", "float", "float", "float", "float", "max", "max", "math.cos", "float"], "function", ["None"], ["", "def", "get_cosine_with_hard_restarts_schedule_with_warmup", "(", "\n", "optimizer", ":", "Optimizer", ",", "num_warmup_steps", ":", "int", ",", "num_training_steps", ":", "int", ",", "num_cycles", ":", "int", "=", "1", ",", "last_epoch", ":", "int", "=", "-", "1", "\n", ")", ":", "\n", "    ", "\"\"\"\n    Create a schedule with a learning rate that decreases following the values of the cosine function between the\n    initial lr set in the optimizer to 0, with several hard restarts, after a warmup period during which it increases\n    linearly between 0 and the initial lr set in the optimizer.\n    Args:\n        optimizer (:class:`~torch.optim.Optimizer`):\n            The optimizer for which to schedule the learning rate.\n        num_warmup_steps (:obj:`int`):\n            The number of steps for the warmup phase.\n        num_training_steps (:obj:`int`):\n            The total number of training steps.\n        num_cycles (:obj:`int`, `optional`, defaults to 1):\n            The number of hard restarts to use.\n        last_epoch (:obj:`int`, `optional`, defaults to -1):\n            The index of the last epoch when resuming training.\n    Return:\n        :obj:`torch.optim.lr_scheduler.LambdaLR` with the appropriate schedule.\n    \"\"\"", "\n", "\n", "def", "lr_lambda", "(", "current_step", ")", ":", "\n", "        ", "if", "current_step", "<", "num_warmup_steps", ":", "\n", "            ", "return", "float", "(", "current_step", ")", "/", "float", "(", "max", "(", "1", ",", "num_warmup_steps", ")", ")", "\n", "", "progress", "=", "float", "(", "current_step", "-", "num_warmup_steps", ")", "/", "float", "(", "max", "(", "1", ",", "num_training_steps", "-", "num_warmup_steps", ")", ")", "\n", "if", "progress", ">=", "1.0", ":", "\n", "            ", "return", "0.0", "\n", "", "return", "max", "(", "0.0", ",", "0.5", "*", "(", "1.0", "+", "math", ".", "cos", "(", "math", ".", "pi", "*", "(", "(", "float", "(", "num_cycles", ")", "*", "progress", ")", "%", "1.0", ")", ")", ")", ")", "\n", "\n", "", "return", "LambdaLR", "(", "optimizer", ",", "lr_lambda", ",", "last_epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.s3_utils.uploadFile.__init__": [[10, 25], ["boto3.client", "s3_utils.uploadFile.resource.list_buckets", "s3_utils.uploadFile.resource.create_bucket"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "bucket_name", ")", ":", "\n", "        ", "\"\"\"\n        create s3 resource and creates the bucket if the given bucket name\n        doesn't exist\n        \"\"\"", "\n", "self", ".", "bucket_name", "=", "bucket_name", "\n", "self", ".", "resource", "=", "boto3", ".", "client", "(", "'s3'", ")", "\n", "bucket_response", "=", "self", ".", "resource", ".", "list_buckets", "(", ")", "\n", "all_buckets", "=", "[", "\n", "bucket", "[", "'Name'", "]", "for", "bucket", "in", "bucket_response", "[", "'Buckets'", "]", "]", "\n", "if", "self", ".", "bucket_name", "not", "in", "all_buckets", ":", "\n", "# Creat the bucket if doesn't exist", "\n", "            ", "resp", "=", "self", ".", "resource", ".", "create_bucket", "(", "Bucket", "=", "self", ".", "bucket_name", ")", "\n", "# print(resp)", "\n", "", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.s3_utils.uploadFile.push_file": [[26, 28], ["s3_utils.uploadFile.resource.upload_file"], "methods", ["None"], ["", "def", "push_file", "(", "self", ",", "input_path", ",", "out_file_path", ")", ":", "\n", "        ", "self", ".", "resource", ".", "upload_file", "(", "input_path", ",", "self", ".", "bucket_name", ",", "out_file_path", ")", "\n", "", "def", "pull_file", "(", "self", ",", "input_path", ",", "out_file_path", ")", ":", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.None.s3_utils.uploadFile.pull_file": [[28, 30], ["s3_utils.uploadFile.resource.download_file"], "methods", ["None"], ["", "def", "pull_file", "(", "self", ",", "input_path", ",", "out_file_path", ")", ":", "\n", "        ", "self", ".", "resource", ".", "download_file", "(", "self", ".", "bucket_name", ",", "input_path", ",", "out_file_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.cifar_architectures.mobilenet.Block.__init__": [[15, 21], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.cifar_architectures.wresnet.Wide_ResNet.__init__"], ["def", "__init__", "(", "self", ",", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "Block", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "in_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "groups", "=", "in_planes", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "in_planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "out_planes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.cifar_architectures.mobilenet.Block.forward": [[22, 26], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "mobilenet.Block.bn1", "mobilenet.Block.bn2", "mobilenet.Block.conv1", "mobilenet.Block.conv2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "F", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ")", ")", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.cifar_architectures.mobilenet.MobileNet.__init__": [[32, 38], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "mobilenet.MobileNet._make_layers", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.cifar_architectures.wresnet.Wide_ResNet.__init__", "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.cifar_architectures.mobilenetv2.MobileNetV2._make_layers"], ["def", "__init__", "(", "self", ",", "num_classes", "=", "10", ")", ":", "\n", "        ", "super", "(", "MobileNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "32", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "32", ")", "\n", "self", ".", "layers", "=", "self", ".", "_make_layers", "(", "in_planes", "=", "32", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "1024", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.cifar_architectures.mobilenet.MobileNet._make_layers": [[39, 47], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "isinstance", "isinstance", "mobilenet.Block"], "methods", ["None"], ["", "def", "_make_layers", "(", "self", ",", "in_planes", ")", ":", "\n", "        ", "layers", "=", "[", "]", "\n", "for", "x", "in", "self", ".", "cfg", ":", "\n", "            ", "out_planes", "=", "x", "if", "isinstance", "(", "x", ",", "int", ")", "else", "x", "[", "0", "]", "\n", "stride", "=", "1", "if", "isinstance", "(", "x", ",", "int", ")", "else", "x", "[", "1", "]", "\n", "layers", ".", "append", "(", "Block", "(", "in_planes", ",", "out_planes", ",", "stride", ")", ")", "\n", "in_planes", "=", "out_planes", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.cifar_architectures.mobilenet.MobileNet.forward": [[48, 55], ["torch.relu", "torch.relu", "torch.relu", "mobilenet.MobileNet.layers", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "mobilenet.MobileNet.view", "mobilenet.MobileNet.linear", "mobilenet.MobileNet.bn1", "mobilenet.MobileNet.size", "mobilenet.MobileNet.conv1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "layers", "(", "out", ")", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "2", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "linear", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.cifar_architectures.mobilenet.test": [[57, 62], ["mobilenet.MobileNet", "torch.randn", "torch.randn", "torch.randn", "MobileNet.", "print", "torch.autograd.Variable", "net.size"], "function", ["None"], ["", "", "def", "test", "(", ")", ":", "\n", "    ", "net", "=", "MobileNet", "(", ")", "\n", "x", "=", "torch", ".", "randn", "(", "1", ",", "3", ",", "32", ",", "32", ")", "\n", "y", "=", "net", "(", "Variable", "(", "x", ")", ")", "\n", "print", "(", "y", ".", "size", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.cifar_architectures.vgg.VGG.__init__": [[16, 34], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "vgg.VGG.modules", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "isinstance", "m.weight.data.normal_", "m.bias.data.zero_", "math.sqrt"], "methods", ["home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.cifar_architectures.wresnet.Wide_ResNet.__init__"], ["def", "__init__", "(", "self", ",", "features", ")", ":", "\n", "        ", "super", "(", "VGG", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "features", "=", "features", "\n", "self", ".", "classifier", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Dropout", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "512", ",", "512", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "Dropout", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "512", ",", "512", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "512", ",", "10", ")", ",", "\n", ")", "\n", "# Initialize weights", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.cifar_architectures.vgg.VGG.forward": [[36, 41], ["vgg.VGG.features", "vgg.VGG.view", "vgg.VGG.classifier", "vgg.VGG.size"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "features", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "x", "=", "self", ".", "classifier", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.cifar_architectures.vgg.make_layers": [[43, 57], ["torch.Sequential", "torch.Conv2d", "torch.MaxPool2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU"], "function", ["None"], ["", "", "def", "make_layers", "(", "cfg", ",", "batch_norm", "=", "False", ")", ":", "\n", "    ", "layers", "=", "[", "]", "\n", "in_channels", "=", "3", "\n", "for", "v", "in", "cfg", ":", "\n", "        ", "if", "v", "==", "'M'", ":", "\n", "            ", "layers", "+=", "[", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "]", "\n", "", "else", ":", "\n", "            ", "conv2d", "=", "nn", ".", "Conv2d", "(", "in_channels", ",", "v", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "if", "batch_norm", ":", "\n", "                ", "layers", "+=", "[", "conv2d", ",", "nn", ".", "BatchNorm2d", "(", "v", ")", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "]", "\n", "", "else", ":", "\n", "                ", "layers", "+=", "[", "conv2d", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "]", "\n", "", "in_channels", "=", "v", "\n", "", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.cifar_architectures.vgg.vgg11": [[68, 71], ["vgg.VGG", "vgg.make_layers"], "function", ["home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.cifar_architectures.vgg.make_layers"], ["def", "vgg11", "(", ")", ":", "\n", "    ", "\"\"\"VGG 11-layer model (configuration \"A\")\"\"\"", "\n", "return", "VGG", "(", "make_layers", "(", "cfg", "[", "'A'", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.cifar_architectures.vgg.vgg11_bn": [[73, 76], ["vgg.VGG", "vgg.make_layers"], "function", ["home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.cifar_architectures.vgg.make_layers"], ["", "def", "vgg11_bn", "(", ")", ":", "\n", "    ", "\"\"\"VGG 11-layer model (configuration \"A\") with batch normalization\"\"\"", "\n", "return", "VGG", "(", "make_layers", "(", "cfg", "[", "'A'", "]", ",", "batch_norm", "=", "True", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.cifar_architectures.vgg.vgg13": [[78, 81], ["vgg.VGG", "vgg.make_layers"], "function", ["home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.cifar_architectures.vgg.make_layers"], ["", "def", "vgg13", "(", ")", ":", "\n", "    ", "\"\"\"VGG 13-layer model (configuration \"B\")\"\"\"", "\n", "return", "VGG", "(", "make_layers", "(", "cfg", "[", "'B'", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.cifar_architectures.vgg.vgg13_bn": [[83, 86], ["vgg.VGG", "vgg.make_layers"], "function", ["home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.cifar_architectures.vgg.make_layers"], ["", "def", "vgg13_bn", "(", ")", ":", "\n", "    ", "\"\"\"VGG 13-layer model (configuration \"B\") with batch normalization\"\"\"", "\n", "return", "VGG", "(", "make_layers", "(", "cfg", "[", "'B'", "]", ",", "batch_norm", "=", "True", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.cifar_architectures.vgg.vgg16": [[88, 91], ["vgg.VGG", "vgg.make_layers"], "function", ["home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.cifar_architectures.vgg.make_layers"], ["", "def", "vgg16", "(", ")", ":", "\n", "    ", "\"\"\"VGG 16-layer model (configuration \"D\")\"\"\"", "\n", "return", "VGG", "(", "make_layers", "(", "cfg", "[", "'D'", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.cifar_architectures.vgg.vgg16_bn": [[93, 96], ["vgg.VGG", "vgg.make_layers"], "function", ["home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.cifar_architectures.vgg.make_layers"], ["", "def", "vgg16_bn", "(", ")", ":", "\n", "    ", "\"\"\"VGG 16-layer model (configuration \"D\") with batch normalization\"\"\"", "\n", "return", "VGG", "(", "make_layers", "(", "cfg", "[", "'D'", "]", ",", "batch_norm", "=", "True", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.cifar_architectures.vgg.vgg19": [[98, 101], ["vgg.VGG", "vgg.make_layers"], "function", ["home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.cifar_architectures.vgg.make_layers"], ["", "def", "vgg19", "(", ")", ":", "\n", "    ", "\"\"\"VGG 19-layer model (configuration \"E\")\"\"\"", "\n", "return", "VGG", "(", "make_layers", "(", "cfg", "[", "'E'", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.cifar_architectures.vgg.vgg19_bn": [[103, 106], ["vgg.VGG", "vgg.make_layers"], "function", ["home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.cifar_architectures.vgg.make_layers"], ["", "def", "vgg19_bn", "(", ")", ":", "\n", "    ", "\"\"\"VGG 19-layer model (configuration 'E') with batch normalization\"\"\"", "\n", "return", "VGG", "(", "make_layers", "(", "cfg", "[", "'E'", "]", ",", "batch_norm", "=", "True", ")", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.cifar_architectures.mobilenetv2.Block.__init__": [[15, 32], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.cifar_architectures.wresnet.Wide_ResNet.__init__"], ["def", "__init__", "(", "self", ",", "in_planes", ",", "out_planes", ",", "expansion", ",", "stride", ")", ":", "\n", "        ", "super", "(", "Block", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "stride", "=", "stride", "\n", "\n", "planes", "=", "expansion", "*", "in_planes", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "groups", "=", "planes", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "out_planes", ")", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "==", "1", "and", "in_planes", "!=", "out_planes", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_planes", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.cifar_architectures.mobilenetv2.Block.forward": [[34, 40], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "mobilenetv2.Block.bn3", "mobilenetv2.Block.bn1", "mobilenetv2.Block.bn2", "mobilenetv2.Block.conv3", "mobilenetv2.Block.conv1", "mobilenetv2.Block.conv2", "mobilenetv2.Block.shortcut"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "F", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ")", ")", ")", "\n", "out", "=", "self", ".", "bn3", "(", "self", ".", "conv3", "(", "out", ")", ")", "\n", "out", "=", "out", "+", "self", ".", "shortcut", "(", "x", ")", "if", "self", ".", "stride", "==", "1", "else", "out", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.cifar_architectures.mobilenetv2.MobileNetV2.__init__": [[52, 61], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "mobilenetv2.MobileNetV2._make_layers", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.cifar_architectures.wresnet.Wide_ResNet.__init__", "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.cifar_architectures.mobilenetv2.MobileNetV2._make_layers"], ["def", "__init__", "(", "self", ",", "num_classes", "=", "10", ")", ":", "\n", "        ", "super", "(", "MobileNetV2", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# NOTE: change conv1 stride 2 -> 1 for CIFAR10", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "32", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "32", ")", "\n", "self", ".", "layers", "=", "self", ".", "_make_layers", "(", "in_planes", "=", "32", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "320", ",", "1280", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "1280", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "1280", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.cifar_architectures.mobilenetv2.MobileNetV2._make_layers": [[62, 70], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "mobilenetv2.Block"], "methods", ["None"], ["", "def", "_make_layers", "(", "self", ",", "in_planes", ")", ":", "\n", "        ", "layers", "=", "[", "]", "\n", "for", "expansion", ",", "out_planes", ",", "num_blocks", ",", "stride", "in", "self", ".", "cfg", ":", "\n", "            ", "strides", "=", "[", "stride", "]", "+", "[", "1", "]", "*", "(", "num_blocks", "-", "1", ")", "\n", "for", "stride", "in", "strides", ":", "\n", "                ", "layers", ".", "append", "(", "Block", "(", "in_planes", ",", "out_planes", ",", "expansion", ",", "stride", ")", ")", "\n", "in_planes", "=", "out_planes", "\n", "", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.cifar_architectures.mobilenetv2.MobileNetV2.forward": [[71, 80], ["torch.relu", "torch.relu", "torch.relu", "mobilenetv2.MobileNetV2.layers", "torch.relu", "torch.relu", "torch.relu", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "mobilenetv2.MobileNetV2.view", "mobilenetv2.MobileNetV2.linear", "mobilenetv2.MobileNetV2.bn1", "mobilenetv2.MobileNetV2.bn2", "mobilenetv2.MobileNetV2.size", "mobilenetv2.MobileNetV2.conv1", "mobilenetv2.MobileNetV2.conv2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "layers", "(", "out", ")", "\n", "out", "=", "F", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ")", ")", ")", "\n", "# NOTE: change pooling kernel_size 7 -> 4 for CIFAR10", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "4", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "linear", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.cifar_architectures.mobilenetv2.test": [[82, 87], ["mobilenetv2.MobileNetV2", "torch.autograd.Variable", "MobileNetV2.", "print", "torch.randn", "torch.randn", "torch.randn", "net.size"], "function", ["None"], ["", "", "def", "test", "(", ")", ":", "\n", "    ", "net", "=", "MobileNetV2", "(", ")", "\n", "x", "=", "Variable", "(", "torch", ".", "randn", "(", "2", ",", "3", ",", "32", ",", "32", ")", ")", "\n", "y", "=", "net", "(", "x", ")", "\n", "print", "(", "y", ".", "size", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.cifar_architectures.pnasnet.SepConv.__init__": [[14, 21], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.cifar_architectures.wresnet.Wide_ResNet.__init__"], ["def", "__init__", "(", "self", ",", "in_planes", ",", "out_planes", ",", "kernel_size", ",", "stride", ")", ":", "\n", "        ", "super", "(", "SepConv", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "\n", "kernel_size", ",", "stride", ",", "\n", "padding", "=", "(", "kernel_size", "-", "1", ")", "//", "2", ",", "\n", "bias", "=", "False", ",", "groups", "=", "in_planes", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "out_planes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.cifar_architectures.pnasnet.SepConv.forward": [[22, 24], ["pnasnet.SepConv.bn1", "pnasnet.SepConv.conv1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.cifar_architectures.pnasnet.CellA.__init__": [[27, 34], ["torch.Module.__init__", "pnasnet.SepConv", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.cifar_architectures.wresnet.Wide_ResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "CellA", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "stride", "=", "stride", "\n", "self", ".", "sep_conv1", "=", "SepConv", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "7", ",", "stride", "=", "stride", ")", "\n", "if", "stride", "==", "2", ":", "\n", "            ", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "out_planes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.cifar_architectures.pnasnet.CellA.forward": [[35, 41], ["pnasnet.CellA.sep_conv1", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.relu", "torch.relu", "torch.relu", "pnasnet.CellA.bn1", "pnasnet.CellA.conv1"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "y1", "=", "self", ".", "sep_conv1", "(", "x", ")", "\n", "y2", "=", "F", ".", "max_pool2d", "(", "x", ",", "kernel_size", "=", "3", ",", "stride", "=", "self", ".", "stride", ",", "padding", "=", "1", ")", "\n", "if", "self", ".", "stride", "==", "2", ":", "\n", "            ", "y2", "=", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "y2", ")", ")", "\n", "", "return", "F", ".", "relu", "(", "y1", "+", "y2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.cifar_architectures.pnasnet.CellB.__init__": [[43, 57], ["torch.Module.__init__", "pnasnet.SepConv", "pnasnet.SepConv", "pnasnet.SepConv", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.cifar_architectures.wresnet.Wide_ResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "CellB", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "stride", "=", "stride", "\n", "# Left branch", "\n", "self", ".", "sep_conv1", "=", "SepConv", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "7", ",", "stride", "=", "stride", ")", "\n", "self", ".", "sep_conv2", "=", "SepConv", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ")", "\n", "# Right branch", "\n", "self", ".", "sep_conv3", "=", "SepConv", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "5", ",", "stride", "=", "stride", ")", "\n", "if", "stride", "==", "2", ":", "\n", "            ", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "out_planes", ")", "\n", "# Reduce channels", "\n", "", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "2", "*", "out_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "out_planes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.cifar_architectures.pnasnet.CellB.forward": [[58, 72], ["pnasnet.CellB.sep_conv1", "pnasnet.CellB.sep_conv2", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "pnasnet.CellB.sep_conv3", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.relu", "torch.relu", "torch.relu", "pnasnet.CellB.bn1", "pnasnet.CellB.bn2", "pnasnet.CellB.conv1", "pnasnet.CellB.conv2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# Left branch", "\n", "        ", "y1", "=", "self", ".", "sep_conv1", "(", "x", ")", "\n", "y2", "=", "self", ".", "sep_conv2", "(", "x", ")", "\n", "# Right branch", "\n", "y3", "=", "F", ".", "max_pool2d", "(", "x", ",", "kernel_size", "=", "3", ",", "stride", "=", "self", ".", "stride", ",", "padding", "=", "1", ")", "\n", "if", "self", ".", "stride", "==", "2", ":", "\n", "            ", "y3", "=", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "y3", ")", ")", "\n", "", "y4", "=", "self", ".", "sep_conv3", "(", "x", ")", "\n", "# Concat & reduce channels", "\n", "b1", "=", "F", ".", "relu", "(", "y1", "+", "y2", ")", "\n", "b2", "=", "F", ".", "relu", "(", "y3", "+", "y4", ")", "\n", "y", "=", "torch", ".", "cat", "(", "[", "b1", ",", "b2", "]", ",", "1", ")", "\n", "return", "F", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "y", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.cifar_architectures.pnasnet.PNASNet.__init__": [[74, 89], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "pnasnet.PNASNet._make_layer", "pnasnet.PNASNet._downsample", "pnasnet.PNASNet._make_layer", "pnasnet.PNASNet._downsample", "pnasnet.PNASNet._make_layer", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.cifar_architectures.wresnet.Wide_ResNet.__init__", "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.cifar_architectures.preact_resnet.PreActResNet._make_layer", "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.cifar_architectures.pnasnet.PNASNet._downsample", "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.cifar_architectures.preact_resnet.PreActResNet._make_layer", "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.cifar_architectures.pnasnet.PNASNet._downsample", "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.cifar_architectures.preact_resnet.PreActResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "cell_type", ",", "num_cells", ",", "num_planes", ")", ":", "\n", "        ", "super", "(", "PNASNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_planes", "=", "num_planes", "\n", "self", ".", "cell_type", "=", "cell_type", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "num_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "num_planes", ")", "\n", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "num_planes", ",", "num_cells", "=", "6", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_downsample", "(", "num_planes", "*", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "num_planes", "*", "2", ",", "num_cells", "=", "6", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_downsample", "(", "num_planes", "*", "4", ")", "\n", "self", ".", "layer5", "=", "self", ".", "_make_layer", "(", "num_planes", "*", "4", ",", "num_cells", "=", "6", ")", "\n", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "num_planes", "*", "4", ",", "10", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.cifar_architectures.pnasnet.PNASNet._make_layer": [[90, 96], ["range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "pnasnet.PNASNet.cell_type"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ",", "planes", ",", "num_cells", ")", ":", "\n", "        ", "layers", "=", "[", "]", "\n", "for", "_", "in", "range", "(", "num_cells", ")", ":", "\n", "            ", "layers", ".", "append", "(", "self", ".", "cell_type", "(", "self", ".", "in_planes", ",", "planes", ",", "stride", "=", "1", ")", ")", "\n", "self", ".", "in_planes", "=", "planes", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.cifar_architectures.pnasnet.PNASNet._downsample": [[97, 101], ["pnasnet.PNASNet.cell_type"], "methods", ["None"], ["", "def", "_downsample", "(", "self", ",", "planes", ")", ":", "\n", "        ", "layer", "=", "self", ".", "cell_type", "(", "self", ".", "in_planes", ",", "planes", ",", "stride", "=", "2", ")", "\n", "self", ".", "in_planes", "=", "planes", "\n", "return", "layer", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.cifar_architectures.pnasnet.PNASNet.forward": [[102, 112], ["torch.relu", "torch.relu", "torch.relu", "pnasnet.PNASNet.layer1", "pnasnet.PNASNet.layer2", "pnasnet.PNASNet.layer3", "pnasnet.PNASNet.layer4", "pnasnet.PNASNet.layer5", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "pnasnet.PNASNet.linear", "pnasnet.PNASNet.bn1", "pnasnet.PNASNet.view", "pnasnet.PNASNet.conv1", "pnasnet.PNASNet.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "layer1", "(", "out", ")", "\n", "out", "=", "self", ".", "layer2", "(", "out", ")", "\n", "out", "=", "self", ".", "layer3", "(", "out", ")", "\n", "out", "=", "self", ".", "layer4", "(", "out", ")", "\n", "out", "=", "self", ".", "layer5", "(", "out", ")", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "8", ")", "\n", "out", "=", "self", ".", "linear", "(", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.cifar_architectures.pnasnet.PNASNetA": [[114, 116], ["pnasnet.PNASNet"], "function", ["None"], ["", "", "def", "PNASNetA", "(", ")", ":", "\n", "    ", "return", "PNASNet", "(", "CellA", ",", "num_cells", "=", "6", ",", "num_planes", "=", "44", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.cifar_architectures.pnasnet.PNASNetB": [[117, 119], ["pnasnet.PNASNet"], "function", ["None"], ["", "def", "PNASNetB", "(", ")", ":", "\n", "    ", "return", "PNASNet", "(", "CellB", ",", "num_cells", "=", "6", ",", "num_planes", "=", "32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.cifar_architectures.pnasnet.test": [[121, 127], ["pnasnet.PNASNetB", "print", "torch.autograd.Variable", "PNASNetB.", "print", "torch.randn", "torch.randn", "torch.randn"], "function", ["home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.cifar_architectures.pnasnet.PNASNetB"], ["", "def", "test", "(", ")", ":", "\n", "    ", "net", "=", "PNASNetB", "(", ")", "\n", "print", "(", "net", ")", "\n", "x", "=", "Variable", "(", "torch", ".", "randn", "(", "1", ",", "3", ",", "32", ",", "32", ")", ")", "\n", "y", "=", "net", "(", "x", ")", "\n", "print", "(", "y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.cifar_architectures.lenet.LeNet.__init__": [[6, 13], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.cifar_architectures.wresnet.Wide_ResNet.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "LeNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "6", ",", "5", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "6", ",", "16", ",", "5", ")", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "16", "*", "5", "*", "5", ",", "120", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "120", ",", "84", ")", "\n", "self", ".", "fc3", "=", "nn", ".", "Linear", "(", "84", ",", "10", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.cifar_architectures.lenet.LeNet.forward": [[14, 24], ["torch.relu", "torch.relu", "torch.max_pool2d", "torch.max_pool2d", "torch.relu", "torch.relu", "torch.max_pool2d", "torch.max_pool2d", "lenet.LeNet.view", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "lenet.LeNet.fc3", "lenet.LeNet.conv1", "lenet.LeNet.conv2", "lenet.LeNet.size", "lenet.LeNet.fc1", "lenet.LeNet.fc2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "conv1", "(", "x", ")", ")", "\n", "out", "=", "F", ".", "max_pool2d", "(", "out", ",", "2", ")", "\n", "out", "=", "F", ".", "relu", "(", "self", ".", "conv2", "(", "out", ")", ")", "\n", "out", "=", "F", ".", "max_pool2d", "(", "out", ",", "2", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "F", ".", "relu", "(", "self", ".", "fc1", "(", "out", ")", ")", "\n", "out", "=", "F", ".", "relu", "(", "self", ".", "fc2", "(", "out", ")", ")", "\n", "out", "=", "self", ".", "fc3", "(", "out", ")", "\n", "return", "out", "\n", "", "", ""]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.cifar_architectures.dpn.Bottleneck.__init__": [[10, 27], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.cifar_architectures.wresnet.Wide_ResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "last_planes", ",", "in_planes", ",", "out_planes", ",", "dense_depth", ",", "stride", ",", "first_layer", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "out_planes", "=", "out_planes", "\n", "self", ".", "dense_depth", "=", "dense_depth", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "last_planes", ",", "in_planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "in_planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "in_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "groups", "=", "32", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "in_planes", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", "+", "dense_depth", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "out_planes", "+", "dense_depth", ")", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "first_layer", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "last_planes", ",", "out_planes", "+", "dense_depth", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_planes", "+", "dense_depth", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.cifar_architectures.dpn.Bottleneck.forward": [[29, 38], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "dpn.Bottleneck.bn3", "dpn.Bottleneck.shortcut", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.relu", "torch.relu", "torch.relu", "dpn.Bottleneck.bn1", "dpn.Bottleneck.bn2", "dpn.Bottleneck.conv3", "dpn.Bottleneck.conv1", "dpn.Bottleneck.conv2"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "F", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ")", ")", ")", "\n", "out", "=", "self", ".", "bn3", "(", "self", ".", "conv3", "(", "out", ")", ")", "\n", "x", "=", "self", ".", "shortcut", "(", "x", ")", "\n", "d", "=", "self", ".", "out_planes", "\n", "out", "=", "torch", ".", "cat", "(", "[", "x", "[", ":", ",", ":", "d", ",", ":", ",", ":", "]", "+", "out", "[", ":", ",", ":", "d", ",", ":", ",", ":", "]", ",", "x", "[", ":", ",", "d", ":", ",", ":", ",", ":", "]", ",", "out", "[", ":", ",", "d", ":", ",", ":", ",", ":", "]", "]", ",", "1", ")", "\n", "out", "=", "F", ".", "relu", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.cifar_architectures.dpn.DPN.__init__": [[41, 54], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "dpn.DPN._make_layer", "dpn.DPN._make_layer", "dpn.DPN._make_layer", "dpn.DPN._make_layer", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.cifar_architectures.wresnet.Wide_ResNet.__init__", "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.cifar_architectures.preact_resnet.PreActResNet._make_layer", "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.cifar_architectures.preact_resnet.PreActResNet._make_layer", "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.cifar_architectures.preact_resnet.PreActResNet._make_layer", "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.cifar_architectures.preact_resnet.PreActResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "cfg", ")", ":", "\n", "        ", "super", "(", "DPN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "in_planes", ",", "out_planes", "=", "cfg", "[", "'in_planes'", "]", ",", "cfg", "[", "'out_planes'", "]", "\n", "num_blocks", ",", "dense_depth", "=", "cfg", "[", "'num_blocks'", "]", ",", "cfg", "[", "'dense_depth'", "]", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "last_planes", "=", "64", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "in_planes", "[", "0", "]", ",", "out_planes", "[", "0", "]", ",", "num_blocks", "[", "0", "]", ",", "dense_depth", "[", "0", "]", ",", "stride", "=", "1", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "in_planes", "[", "1", "]", ",", "out_planes", "[", "1", "]", ",", "num_blocks", "[", "1", "]", ",", "dense_depth", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "in_planes", "[", "2", "]", ",", "out_planes", "[", "2", "]", ",", "num_blocks", "[", "2", "]", ",", "dense_depth", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "in_planes", "[", "3", "]", ",", "out_planes", "[", "3", "]", ",", "num_blocks", "[", "3", "]", ",", "dense_depth", "[", "3", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "out_planes", "[", "3", "]", "+", "(", "num_blocks", "[", "3", "]", "+", "1", ")", "*", "dense_depth", "[", "3", "]", ",", "10", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.cifar_architectures.dpn.DPN._make_layer": [[55, 62], ["enumerate", "torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "dpn.Bottleneck"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ",", "in_planes", ",", "out_planes", ",", "num_blocks", ",", "dense_depth", ",", "stride", ")", ":", "\n", "        ", "strides", "=", "[", "stride", "]", "+", "[", "1", "]", "*", "(", "num_blocks", "-", "1", ")", "\n", "layers", "=", "[", "]", "\n", "for", "i", ",", "stride", "in", "enumerate", "(", "strides", ")", ":", "\n", "            ", "layers", ".", "append", "(", "Bottleneck", "(", "self", ".", "last_planes", ",", "in_planes", ",", "out_planes", ",", "dense_depth", ",", "stride", ",", "i", "==", "0", ")", ")", "\n", "self", ".", "last_planes", "=", "out_planes", "+", "(", "i", "+", "2", ")", "*", "dense_depth", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.cifar_architectures.dpn.DPN.forward": [[63, 73], ["torch.relu", "torch.relu", "torch.relu", "dpn.DPN.layer1", "dpn.DPN.layer2", "dpn.DPN.layer3", "dpn.DPN.layer4", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "dpn.DPN.view", "dpn.DPN.linear", "dpn.DPN.bn1", "dpn.DPN.size", "dpn.DPN.conv1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "layer1", "(", "out", ")", "\n", "out", "=", "self", ".", "layer2", "(", "out", ")", "\n", "out", "=", "self", ".", "layer3", "(", "out", ")", "\n", "out", "=", "self", ".", "layer4", "(", "out", ")", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "4", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "linear", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.cifar_architectures.dpn.DPN26": [[75, 83], ["dpn.DPN"], "function", ["None"], ["", "", "def", "DPN26", "(", ")", ":", "\n", "    ", "cfg", "=", "{", "\n", "'in_planes'", ":", "(", "96", ",", "192", ",", "384", ",", "768", ")", ",", "\n", "'out_planes'", ":", "(", "256", ",", "512", ",", "1024", ",", "2048", ")", ",", "\n", "'num_blocks'", ":", "(", "2", ",", "2", ",", "2", ",", "2", ")", ",", "\n", "'dense_depth'", ":", "(", "16", ",", "32", ",", "24", ",", "128", ")", "\n", "}", "\n", "return", "DPN", "(", "cfg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.cifar_architectures.dpn.DPN92": [[84, 92], ["dpn.DPN"], "function", ["None"], ["", "def", "DPN92", "(", ")", ":", "\n", "    ", "cfg", "=", "{", "\n", "'in_planes'", ":", "(", "96", ",", "192", ",", "384", ",", "768", ")", ",", "\n", "'out_planes'", ":", "(", "256", ",", "512", ",", "1024", ",", "2048", ")", ",", "\n", "'num_blocks'", ":", "(", "3", ",", "4", ",", "20", ",", "3", ")", ",", "\n", "'dense_depth'", ":", "(", "16", ",", "32", ",", "24", ",", "128", ")", "\n", "}", "\n", "return", "DPN", "(", "cfg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.cifar_architectures.dpn.test": [[94, 99], ["dpn.DPN92", "torch.autograd.Variable", "DPN92.", "print", "torch.randn", "torch.randn", "torch.randn"], "function", ["home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.cifar_architectures.dpn.DPN92"], ["", "def", "test", "(", ")", ":", "\n", "    ", "net", "=", "DPN92", "(", ")", "\n", "x", "=", "Variable", "(", "torch", ".", "randn", "(", "1", ",", "3", ",", "32", ",", "32", ")", ")", "\n", "y", "=", "net", "(", "x", ")", "\n", "print", "(", "y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.cifar_architectures.shufflenet.ShuffleBlock.__init__": [[13, 16], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.cifar_architectures.wresnet.Wide_ResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "groups", ")", ":", "\n", "        ", "super", "(", "ShuffleBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "groups", "=", "groups", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.cifar_architectures.shufflenet.ShuffleBlock.forward": [[17, 22], ["x.size", "x.view().permute().contiguous().view", "x.view().permute().contiguous", "x.view().permute", "x.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "'''Channel shuffle: [N,C,H,W] -> [N,g,C/g,H,W] -> [N,C/g,g,H,w] -> [N,C,H,W]'''", "\n", "N", ",", "C", ",", "H", ",", "W", "=", "x", ".", "size", "(", ")", "\n", "g", "=", "self", ".", "groups", "\n", "return", "x", ".", "view", "(", "N", ",", "g", ",", "C", "/", "g", ",", "H", ",", "W", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ",", "3", ",", "4", ")", ".", "contiguous", "(", ")", ".", "view", "(", "N", ",", "C", ",", "H", ",", "W", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.cifar_architectures.shufflenet.Bottleneck.__init__": [[25, 42], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "shufflenet.ShuffleBlock", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d"], "methods", ["home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.cifar_architectures.wresnet.Wide_ResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_planes", ",", "out_planes", ",", "stride", ",", "groups", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "stride", "=", "stride", "\n", "\n", "mid_planes", "=", "out_planes", "/", "4", "\n", "g", "=", "1", "if", "in_planes", "==", "24", "else", "groups", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "mid_planes", ",", "kernel_size", "=", "1", ",", "groups", "=", "g", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "mid_planes", ")", "\n", "self", ".", "shuffle1", "=", "ShuffleBlock", "(", "groups", "=", "g", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "mid_planes", ",", "mid_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "groups", "=", "mid_planes", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "mid_planes", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "mid_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "groups", "=", "groups", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "out_planes", ")", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "==", "2", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "nn", ".", "AvgPool2d", "(", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.cifar_architectures.shufflenet.Bottleneck.forward": [[43, 51], ["torch.relu", "torch.relu", "torch.relu", "shufflenet.Bottleneck.shuffle1", "torch.relu", "torch.relu", "torch.relu", "shufflenet.Bottleneck.bn3", "shufflenet.Bottleneck.shortcut", "shufflenet.Bottleneck.bn1", "shufflenet.Bottleneck.bn2", "shufflenet.Bottleneck.conv3", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "shufflenet.Bottleneck.conv1", "shufflenet.Bottleneck.conv2", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "shuffle1", "(", "out", ")", "\n", "out", "=", "F", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ")", ")", ")", "\n", "out", "=", "self", ".", "bn3", "(", "self", ".", "conv3", "(", "out", ")", ")", "\n", "res", "=", "self", ".", "shortcut", "(", "x", ")", "\n", "out", "=", "F", ".", "relu", "(", "torch", ".", "cat", "(", "[", "out", ",", "res", "]", ",", "1", ")", ")", "if", "self", ".", "stride", "==", "2", "else", "F", ".", "relu", "(", "out", "+", "res", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.cifar_architectures.shufflenet.ShuffleNet.__init__": [[54, 67], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "shufflenet.ShuffleNet._make_layer", "shufflenet.ShuffleNet._make_layer", "shufflenet.ShuffleNet._make_layer", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.cifar_architectures.wresnet.Wide_ResNet.__init__", "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.cifar_architectures.preact_resnet.PreActResNet._make_layer", "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.cifar_architectures.preact_resnet.PreActResNet._make_layer", "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.cifar_architectures.preact_resnet.PreActResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "cfg", ")", ":", "\n", "        ", "super", "(", "ShuffleNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "out_planes", "=", "cfg", "[", "'out_planes'", "]", "\n", "num_blocks", "=", "cfg", "[", "'num_blocks'", "]", "\n", "groups", "=", "cfg", "[", "'groups'", "]", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "24", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "24", ")", "\n", "self", ".", "in_planes", "=", "24", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "out_planes", "[", "0", "]", ",", "num_blocks", "[", "0", "]", ",", "groups", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "out_planes", "[", "1", "]", ",", "num_blocks", "[", "1", "]", ",", "groups", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "out_planes", "[", "2", "]", ",", "num_blocks", "[", "2", "]", ",", "groups", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "out_planes", "[", "2", "]", ",", "10", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.cifar_architectures.shufflenet.ShuffleNet._make_layer": [[68, 76], ["range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "shufflenet.Bottleneck"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ",", "out_planes", ",", "num_blocks", ",", "groups", ")", ":", "\n", "        ", "layers", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_blocks", ")", ":", "\n", "            ", "stride", "=", "2", "if", "i", "==", "0", "else", "1", "\n", "cat_planes", "=", "self", ".", "in_planes", "if", "i", "==", "0", "else", "0", "\n", "layers", ".", "append", "(", "Bottleneck", "(", "self", ".", "in_planes", ",", "out_planes", "-", "cat_planes", ",", "stride", "=", "stride", ",", "groups", "=", "groups", ")", ")", "\n", "self", ".", "in_planes", "=", "out_planes", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.cifar_architectures.shufflenet.ShuffleNet.forward": [[77, 86], ["torch.relu", "torch.relu", "torch.relu", "shufflenet.ShuffleNet.layer1", "shufflenet.ShuffleNet.layer2", "shufflenet.ShuffleNet.layer3", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "shufflenet.ShuffleNet.view", "shufflenet.ShuffleNet.linear", "shufflenet.ShuffleNet.bn1", "shufflenet.ShuffleNet.size", "shufflenet.ShuffleNet.conv1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "layer1", "(", "out", ")", "\n", "out", "=", "self", ".", "layer2", "(", "out", ")", "\n", "out", "=", "self", ".", "layer3", "(", "out", ")", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "4", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "linear", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.cifar_architectures.shufflenet.ShuffleNetG2": [[88, 95], ["shufflenet.ShuffleNet"], "function", ["None"], ["", "", "def", "ShuffleNetG2", "(", ")", ":", "\n", "    ", "cfg", "=", "{", "\n", "'out_planes'", ":", "[", "200", ",", "400", ",", "800", "]", ",", "\n", "'num_blocks'", ":", "[", "4", ",", "8", ",", "4", "]", ",", "\n", "'groups'", ":", "2", "\n", "}", "\n", "return", "ShuffleNet", "(", "cfg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.cifar_architectures.shufflenet.ShuffleNetG3": [[96, 103], ["shufflenet.ShuffleNet"], "function", ["None"], ["", "def", "ShuffleNetG3", "(", ")", ":", "\n", "    ", "cfg", "=", "{", "\n", "'out_planes'", ":", "[", "240", ",", "480", ",", "960", "]", ",", "\n", "'num_blocks'", ":", "[", "4", ",", "8", ",", "4", "]", ",", "\n", "'groups'", ":", "3", "\n", "}", "\n", "return", "ShuffleNet", "(", "cfg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.cifar_architectures.shufflenet.test": [[105, 110], ["shufflenet.ShuffleNetG2", "torch.autograd.Variable", "ShuffleNetG2.", "print", "torch.randn", "torch.randn", "torch.randn"], "function", ["home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.cifar_architectures.shufflenet.ShuffleNetG2"], ["", "def", "test", "(", ")", ":", "\n", "    ", "net", "=", "ShuffleNetG2", "(", ")", "\n", "x", "=", "Variable", "(", "torch", ".", "randn", "(", "1", ",", "3", ",", "32", ",", "32", ")", ")", "\n", "y", "=", "net", "(", "x", ")", "\n", "print", "(", "y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.cifar_architectures.senet_new.BasicResidualSEBlock.__init__": [[9, 35], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.cifar_architectures.wresnet.Wide_ResNet.__init__"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "stride", ",", "r", "=", "16", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "residual", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_channels", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "\n", "nn", ".", "Conv2d", "(", "out_channels", ",", "out_channels", "*", "self", ".", "expansion", ",", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_channels", "*", "self", ".", "expansion", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", ")", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "!=", "1", "or", "in_channels", "!=", "out_channels", "*", "self", ".", "expansion", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", "*", "self", ".", "expansion", ",", "1", ",", "stride", "=", "stride", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_channels", "*", "self", ".", "expansion", ")", "\n", ")", "\n", "\n", "", "self", ".", "squeeze", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "self", ".", "excitation", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "out_channels", "*", "self", ".", "expansion", ",", "out_channels", "*", "self", ".", "expansion", "//", "r", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "out_channels", "*", "self", ".", "expansion", "//", "r", ",", "out_channels", "*", "self", ".", "expansion", ")", ",", "\n", "nn", ".", "Sigmoid", "(", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.cifar_architectures.senet_new.BasicResidualSEBlock.forward": [[37, 49], ["senet_new.BasicResidualSEBlock.shortcut", "senet_new.BasicResidualSEBlock.residual", "senet_new.BasicResidualSEBlock.squeeze", "squeeze.view.view.view", "senet_new.BasicResidualSEBlock.excitation", "excitation.view.view.view", "torch.relu", "torch.relu", "torch.relu", "squeeze.view.view.size", "senet_new.BasicResidualSEBlock.size", "senet_new.BasicResidualSEBlock.size", "excitation.view.view.expand_as"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "shortcut", "=", "self", ".", "shortcut", "(", "x", ")", "\n", "residual", "=", "self", ".", "residual", "(", "x", ")", "\n", "\n", "squeeze", "=", "self", ".", "squeeze", "(", "residual", ")", "\n", "squeeze", "=", "squeeze", ".", "view", "(", "squeeze", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "excitation", "=", "self", ".", "excitation", "(", "squeeze", ")", "\n", "excitation", "=", "excitation", ".", "view", "(", "residual", ".", "size", "(", "0", ")", ",", "residual", ".", "size", "(", "1", ")", ",", "1", ",", "1", ")", "\n", "\n", "x", "=", "residual", "*", "excitation", ".", "expand_as", "(", "residual", ")", "+", "shortcut", "\n", "\n", "return", "F", ".", "relu", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.cifar_architectures.senet_new.BottleneckResidualSEBlock.__init__": [[54, 84], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.cifar_architectures.wresnet.Wide_ResNet.__init__"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "stride", ",", "r", "=", "16", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "residual", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_channels", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "\n", "nn", ".", "Conv2d", "(", "out_channels", ",", "out_channels", ",", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_channels", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "\n", "nn", ".", "Conv2d", "(", "out_channels", ",", "out_channels", "*", "self", ".", "expansion", ",", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_channels", "*", "self", ".", "expansion", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", ")", "\n", "\n", "self", ".", "squeeze", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "self", ".", "excitation", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "out_channels", "*", "self", ".", "expansion", ",", "out_channels", "*", "self", ".", "expansion", "//", "r", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "out_channels", "*", "self", ".", "expansion", "//", "r", ",", "out_channels", "*", "self", ".", "expansion", ")", ",", "\n", "nn", ".", "Sigmoid", "(", ")", "\n", ")", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "!=", "1", "or", "in_channels", "!=", "out_channels", "*", "self", ".", "expansion", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", "*", "self", ".", "expansion", ",", "1", ",", "stride", "=", "stride", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_channels", "*", "self", ".", "expansion", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.cifar_architectures.senet_new.BottleneckResidualSEBlock.forward": [[86, 99], ["senet_new.BottleneckResidualSEBlock.shortcut", "senet_new.BottleneckResidualSEBlock.residual", "senet_new.BottleneckResidualSEBlock.squeeze", "squeeze.view.view.view", "senet_new.BottleneckResidualSEBlock.excitation", "excitation.view.view.view", "torch.relu", "torch.relu", "torch.relu", "squeeze.view.view.size", "senet_new.BottleneckResidualSEBlock.size", "senet_new.BottleneckResidualSEBlock.size", "excitation.view.view.expand_as"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\n", "        ", "shortcut", "=", "self", ".", "shortcut", "(", "x", ")", "\n", "\n", "residual", "=", "self", ".", "residual", "(", "x", ")", "\n", "squeeze", "=", "self", ".", "squeeze", "(", "residual", ")", "\n", "squeeze", "=", "squeeze", ".", "view", "(", "squeeze", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "excitation", "=", "self", ".", "excitation", "(", "squeeze", ")", "\n", "excitation", "=", "excitation", ".", "view", "(", "residual", ".", "size", "(", "0", ")", ",", "residual", ".", "size", "(", "1", ")", ",", "1", ",", "1", ")", "\n", "\n", "x", "=", "residual", "*", "excitation", ".", "expand_as", "(", "residual", ")", "+", "shortcut", "\n", "\n", "return", "F", ".", "relu", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.cifar_architectures.senet_new.SEResNet.__init__": [[102, 119], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "senet_new.SEResNet._make_stage", "senet_new.SEResNet._make_stage", "senet_new.SEResNet._make_stage", "senet_new.SEResNet._make_stage", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.cifar_architectures.wresnet.Wide_ResNet.__init__", "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.cifar_architectures.senet_new.SEResNet._make_stage", "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.cifar_architectures.senet_new.SEResNet._make_stage", "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.cifar_architectures.senet_new.SEResNet._make_stage", "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.cifar_architectures.senet_new.SEResNet._make_stage"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "block_num", ",", "class_num", "=", "10", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "in_channels", "=", "64", "\n", "\n", "self", ".", "pre", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "64", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", ")", "\n", "\n", "self", ".", "stage1", "=", "self", ".", "_make_stage", "(", "block", ",", "block_num", "[", "0", "]", ",", "64", ",", "1", ")", "\n", "self", ".", "stage2", "=", "self", ".", "_make_stage", "(", "block", ",", "block_num", "[", "1", "]", ",", "128", ",", "2", ")", "\n", "self", ".", "stage3", "=", "self", ".", "_make_stage", "(", "block", ",", "block_num", "[", "2", "]", ",", "256", ",", "2", ")", "\n", "self", ".", "stage4", "=", "self", ".", "_make_stage", "(", "block", ",", "block_num", "[", "3", "]", ",", "516", ",", "2", ")", "\n", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "self", ".", "in_channels", ",", "class_num", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.cifar_architectures.senet_new.SEResNet.forward": [[120, 134], ["senet_new.SEResNet.pre", "senet_new.SEResNet.stage1", "senet_new.SEResNet.stage2", "senet_new.SEResNet.stage3", "senet_new.SEResNet.stage4", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d", "senet_new.SEResNet.view", "senet_new.SEResNet.linear", "senet_new.SEResNet.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "pre", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "stage1", "(", "x", ")", "\n", "x", "=", "self", ".", "stage2", "(", "x", ")", "\n", "x", "=", "self", ".", "stage3", "(", "x", ")", "\n", "x", "=", "self", ".", "stage4", "(", "x", ")", "\n", "\n", "x", "=", "F", ".", "adaptive_avg_pool2d", "(", "x", ",", "1", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "\n", "x", "=", "self", ".", "linear", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.cifar_architectures.senet_new.SEResNet._make_stage": [[136, 147], ["layers.append", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "block"], "methods", ["None"], ["", "def", "_make_stage", "(", "self", ",", "block", ",", "num", ",", "out_channels", ",", "stride", ")", ":", "\n", "\n", "        ", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "in_channels", ",", "out_channels", ",", "stride", ")", ")", "\n", "self", ".", "in_channels", "=", "out_channels", "*", "block", ".", "expansion", "\n", "\n", "while", "num", "-", "1", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "in_channels", ",", "out_channels", ",", "1", ")", ")", "\n", "num", "-=", "1", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.cifar_architectures.senet_new.seresnet18": [[148, 151], ["print", "senet_new.SEResNet"], "function", ["None"], ["", "", "def", "seresnet18", "(", ")", ":", "\n", "    ", "print", "(", "\"Seresnet18\"", ")", "\n", "return", "SEResNet", "(", "BasicResidualSEBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.cifar_architectures.senet_new.seresnet34": [[152, 154], ["senet_new.SEResNet"], "function", ["None"], ["", "def", "seresnet34", "(", ")", ":", "\n", "    ", "return", "SEResNet", "(", "BasicResidualSEBlock", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.cifar_architectures.senet_new.seresnet50": [[155, 157], ["senet_new.SEResNet"], "function", ["None"], ["", "def", "seresnet50", "(", ")", ":", "\n", "    ", "return", "SEResNet", "(", "BottleneckResidualSEBlock", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.cifar_architectures.senet_new.seresnet101": [[158, 160], ["senet_new.SEResNet"], "function", ["None"], ["", "def", "seresnet101", "(", ")", ":", "\n", "    ", "return", "SEResNet", "(", "BottleneckResidualSEBlock", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.cifar_architectures.senet_new.seresnet152": [[161, 163], ["senet_new.SEResNet"], "function", ["None"], ["", "def", "seresnet152", "(", ")", ":", "\n", "    ", "return", "SEResNet", "(", "BottleneckResidualSEBlock", ",", "[", "3", ",", "8", ",", "36", ",", "3", "]", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.cifar_architectures.resnet.BasicBlock.__init__": [[19, 34], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Sequential", "torch.Sequential", "torch.Sequential"], "methods", ["home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.cifar_architectures.wresnet.Wide_ResNet.__init__"], ["def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "stride", "=", "1", ",", "use_batchnorm", "=", "True", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "\n", "if", "not", "use_batchnorm", ":", "\n", "            ", "self", ".", "bn1", "=", "self", ".", "bn2", "=", "nn", ".", "Sequential", "(", ")", "\n", "\n", "", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "self", ".", "expansion", "*", "planes", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "self", ".", "expansion", "*", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "self", ".", "expansion", "*", "planes", ")", "if", "use_batchnorm", "else", "nn", ".", "Sequential", "(", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.cifar_architectures.resnet.BasicBlock.forward": [[36, 42], ["torch.relu", "torch.relu", "torch.relu", "resnet.BasicBlock.bn2", "resnet.BasicBlock.shortcut", "torch.relu", "torch.relu", "torch.relu", "resnet.BasicBlock.bn1", "resnet.BasicBlock.conv2", "resnet.BasicBlock.conv1"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ")", ")", "\n", "out", "+=", "self", ".", "shortcut", "(", "x", ")", "\n", "out", "=", "F", ".", "relu", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.cifar_architectures.resnet.Bottleneck.__init__": [[47, 64], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Sequential", "torch.Sequential", "torch.Sequential"], "methods", ["home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.cifar_architectures.wresnet.Wide_ResNet.__init__"], ["def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "stride", "=", "1", ",", "use_batchnorm", "=", "True", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", ",", "self", ".", "expansion", "*", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "self", ".", "expansion", "*", "planes", ")", "\n", "\n", "if", "not", "use_batchnorm", ":", "\n", "            ", "self", ".", "bn1", "=", "self", ".", "bn2", "=", "self", ".", "bn3", "=", "nn", ".", "Sequential", "(", ")", "\n", "\n", "", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "self", ".", "expansion", "*", "planes", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "self", ".", "expansion", "*", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "self", ".", "expansion", "*", "planes", ")", "if", "use_batchnorm", "else", "nn", ".", "Sequential", "(", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.cifar_architectures.resnet.Bottleneck.forward": [[66, 73], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "resnet.Bottleneck.bn3", "resnet.Bottleneck.shortcut", "torch.relu", "torch.relu", "torch.relu", "resnet.Bottleneck.bn1", "resnet.Bottleneck.bn2", "resnet.Bottleneck.conv3", "resnet.Bottleneck.conv1", "resnet.Bottleneck.conv2"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "F", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ")", ")", ")", "\n", "out", "=", "self", ".", "bn3", "(", "self", ".", "conv3", "(", "out", ")", ")", "\n", "out", "+=", "self", ".", "shortcut", "(", "x", ")", "\n", "out", "=", "F", ".", "relu", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.cifar_architectures.resnet.ResNet.__init__": [[76, 87], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "torch.Linear", "torch.Linear", "torch.Linear", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Sequential", "torch.Sequential", "torch.Sequential"], "methods", ["home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.cifar_architectures.wresnet.Wide_ResNet.__init__", "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.cifar_architectures.preact_resnet.PreActResNet._make_layer", "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.cifar_architectures.preact_resnet.PreActResNet._make_layer", "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.cifar_architectures.preact_resnet.PreActResNet._make_layer", "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.cifar_architectures.preact_resnet.PreActResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "num_blocks", ",", "num_classes", "=", "10", ",", "use_batchnorm", "=", "True", ")", ":", "\n", "        ", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_planes", "=", "64", "\n", "self", ".", "use_batchnorm", "=", "use_batchnorm", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "if", "use_batchnorm", "else", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "num_blocks", "[", "0", "]", ",", "stride", "=", "1", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "num_blocks", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "num_blocks", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "num_blocks", "[", "3", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "512", "*", "block", ".", "expansion", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.cifar_architectures.resnet.ResNet._make_layer": [[88, 95], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "block"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "num_blocks", ",", "stride", ")", ":", "\n", "        ", "strides", "=", "[", "stride", "]", "+", "[", "1", "]", "*", "(", "num_blocks", "-", "1", ")", "\n", "layers", "=", "[", "]", "\n", "for", "stride", "in", "strides", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "in_planes", ",", "planes", ",", "stride", ",", "self", ".", "use_batchnorm", ")", ")", "\n", "self", ".", "in_planes", "=", "planes", "*", "block", ".", "expansion", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.cifar_architectures.resnet.ResNet.forward": [[96, 106], ["torch.relu", "torch.relu", "torch.relu", "resnet.ResNet.layer1", "resnet.ResNet.layer2", "resnet.ResNet.layer3", "resnet.ResNet.layer4", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "resnet.ResNet.view", "resnet.ResNet.linear", "resnet.ResNet.bn1", "resnet.ResNet.size", "resnet.ResNet.conv1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "layer1", "(", "out", ")", "\n", "out", "=", "self", ".", "layer2", "(", "out", ")", "\n", "out", "=", "self", ".", "layer3", "(", "out", ")", "\n", "out", "=", "self", ".", "layer4", "(", "out", ")", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "4", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "linear", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.cifar_architectures.resnet.ResNet18": [[108, 110], ["resnet.ResNet"], "function", ["None"], ["", "", "def", "ResNet18", "(", "use_batchnorm", "=", "True", ")", ":", "\n", "    ", "return", "ResNet", "(", "BasicBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "use_batchnorm", "=", "use_batchnorm", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.cifar_architectures.resnet.ResNet34": [[111, 113], ["resnet.ResNet"], "function", ["None"], ["", "def", "ResNet34", "(", "use_batchnorm", "=", "True", ")", ":", "\n", "    ", "return", "ResNet", "(", "BasicBlock", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "use_batchnorm", "=", "use_batchnorm", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.cifar_architectures.resnet.ResNet50": [[114, 116], ["resnet.ResNet"], "function", ["None"], ["", "def", "ResNet50", "(", "use_batchnorm", "=", "True", ")", ":", "\n", "    ", "return", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "use_batchnorm", "=", "use_batchnorm", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.cifar_architectures.resnet.ResNet101": [[117, 119], ["resnet.ResNet"], "function", ["None"], ["", "def", "ResNet101", "(", "use_batchnorm", "=", "True", ")", ":", "\n", "    ", "return", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "use_batchnorm", "=", "use_batchnorm", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.cifar_architectures.resnet.ResNet152": [[120, 122], ["resnet.ResNet"], "function", ["None"], ["", "def", "ResNet152", "(", "use_batchnorm", "=", "True", ")", ":", "\n", "    ", "return", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "8", ",", "36", ",", "3", "]", ",", "use_batchnorm", "=", "use_batchnorm", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.cifar_architectures.resnet.test": [[124, 128], ["resnet.ResNet18", "ResNet18.", "print", "torch.autograd.Variable", "net.size", "torch.randn", "torch.randn", "torch.randn"], "function", ["home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.cifar_architectures.resnet.ResNet18"], ["", "def", "test", "(", ")", ":", "\n", "    ", "net", "=", "ResNet18", "(", ")", "\n", "y", "=", "net", "(", "Variable", "(", "torch", ".", "randn", "(", "1", ",", "3", ",", "32", ",", "32", ")", ")", ")", "\n", "print", "(", "y", ".", "size", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.cifar_architectures.senet.BasicBlock.__init__": [[13, 30], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.cifar_architectures.wresnet.Wide_ResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "planes", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", ")", "\n", "\n", "# SE layers", "\n", "", "self", ".", "fc1", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", "//", "16", ",", "kernel_size", "=", "1", ")", "# Use nn.Conv2d instead of nn.Linear", "\n", "self", ".", "fc2", "=", "nn", ".", "Conv2d", "(", "planes", "//", "16", ",", "planes", ",", "kernel_size", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.cifar_architectures.senet.BasicBlock.forward": [[31, 45], ["torch.relu", "torch.relu", "torch.relu", "senet.BasicBlock.bn2", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "torch.relu", "torch.relu", "torch.relu", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "senet.BasicBlock.shortcut", "torch.relu", "torch.relu", "torch.relu", "senet.BasicBlock.bn1", "senet.BasicBlock.conv2", "torch.relu.size", "senet.BasicBlock.fc1", "senet.BasicBlock.fc2", "senet.BasicBlock.conv1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ")", ")", "\n", "\n", "# Squeeze", "\n", "w", "=", "F", ".", "avg_pool2d", "(", "out", ",", "out", ".", "size", "(", "2", ")", ")", "\n", "w", "=", "F", ".", "relu", "(", "self", ".", "fc1", "(", "w", ")", ")", "\n", "w", "=", "F", ".", "sigmoid", "(", "self", ".", "fc2", "(", "w", ")", ")", "\n", "# Excitation", "\n", "out", "=", "out", "*", "w", "# New broadcasting feature from v0.2!", "\n", "\n", "out", "+=", "self", ".", "shortcut", "(", "x", ")", "\n", "out", "=", "F", ".", "relu", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.cifar_architectures.senet.PreActBlock.__init__": [[48, 63], ["torch.Module.__init__", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.cifar_architectures.wresnet.Wide_ResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "PreActBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "in_planes", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "planes", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", "\n", ")", "\n", "\n", "# SE layers", "\n", "", "self", ".", "fc1", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", "//", "16", ",", "kernel_size", "=", "1", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Conv2d", "(", "planes", "//", "16", ",", "planes", ",", "kernel_size", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.cifar_architectures.senet.PreActBlock.forward": [[64, 79], ["torch.relu", "torch.relu", "torch.relu", "senet.PreActBlock.conv1", "senet.PreActBlock.conv2", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "torch.relu", "torch.relu", "torch.relu", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "senet.PreActBlock.bn1", "hasattr", "senet.PreActBlock.shortcut", "torch.relu", "torch.relu", "torch.relu", "senet.PreActBlock.size", "senet.PreActBlock.fc1", "senet.PreActBlock.fc2", "senet.PreActBlock.bn2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "x", ")", ")", "\n", "shortcut", "=", "self", ".", "shortcut", "(", "out", ")", "if", "hasattr", "(", "self", ",", "'shortcut'", ")", "else", "x", "\n", "out", "=", "self", ".", "conv1", "(", "out", ")", "\n", "out", "=", "self", ".", "conv2", "(", "F", ".", "relu", "(", "self", ".", "bn2", "(", "out", ")", ")", ")", "\n", "\n", "# Squeeze", "\n", "w", "=", "F", ".", "avg_pool2d", "(", "out", ",", "out", ".", "size", "(", "2", ")", ")", "\n", "w", "=", "F", ".", "relu", "(", "self", ".", "fc1", "(", "w", ")", ")", "\n", "w", "=", "F", ".", "sigmoid", "(", "self", ".", "fc2", "(", "w", ")", ")", "\n", "# Excitation", "\n", "out", "=", "out", "*", "w", "\n", "\n", "out", "+=", "shortcut", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.cifar_architectures.senet.SENet.__init__": [[82, 93], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "senet.SENet._make_layer", "senet.SENet._make_layer", "senet.SENet._make_layer", "senet.SENet._make_layer", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.cifar_architectures.wresnet.Wide_ResNet.__init__", "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.cifar_architectures.preact_resnet.PreActResNet._make_layer", "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.cifar_architectures.preact_resnet.PreActResNet._make_layer", "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.cifar_architectures.preact_resnet.PreActResNet._make_layer", "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.cifar_architectures.preact_resnet.PreActResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "num_blocks", ",", "num_classes", "=", "10", ")", ":", "\n", "        ", "super", "(", "SENet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_planes", "=", "64", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "num_blocks", "[", "0", "]", ",", "stride", "=", "1", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "num_blocks", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "num_blocks", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "num_blocks", "[", "3", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "512", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.cifar_architectures.senet.SENet._make_layer": [[94, 101], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "block"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "num_blocks", ",", "stride", ")", ":", "\n", "        ", "strides", "=", "[", "stride", "]", "+", "[", "1", "]", "*", "(", "num_blocks", "-", "1", ")", "\n", "layers", "=", "[", "]", "\n", "for", "stride", "in", "strides", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "in_planes", ",", "planes", ",", "stride", ")", ")", "\n", "self", ".", "in_planes", "=", "planes", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.cifar_architectures.senet.SENet.forward": [[102, 112], ["torch.relu", "torch.relu", "torch.relu", "senet.SENet.layer1", "senet.SENet.layer2", "senet.SENet.layer3", "senet.SENet.layer4", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "senet.SENet.view", "senet.SENet.linear", "senet.SENet.bn1", "senet.SENet.size", "senet.SENet.conv1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "layer1", "(", "out", ")", "\n", "out", "=", "self", ".", "layer2", "(", "out", ")", "\n", "out", "=", "self", ".", "layer3", "(", "out", ")", "\n", "out", "=", "self", ".", "layer4", "(", "out", ")", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "4", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "linear", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.cifar_architectures.senet.SENet18": [[114, 116], ["senet.SENet"], "function", ["None"], ["", "", "def", "SENet18", "(", ")", ":", "\n", "    ", "return", "SENet", "(", "PreActBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.cifar_architectures.senet.test": [[118, 122], ["senet.SENet18", "SENet18.", "print", "torch.autograd.Variable", "net.size", "torch.randn", "torch.randn", "torch.randn"], "function", ["home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.cifar_architectures.senet.SENet18"], ["", "def", "test", "(", ")", ":", "\n", "    ", "net", "=", "SENet18", "(", ")", "\n", "y", "=", "net", "(", "Variable", "(", "torch", ".", "randn", "(", "1", ",", "3", ",", "32", ",", "32", ")", ")", ")", "\n", "print", "(", "y", ".", "size", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.cifar_architectures.densenet.Bottleneck.__init__": [[12, 18], ["torch.Module.__init__", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.cifar_architectures.wresnet.Wide_ResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_planes", ",", "growth_rate", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "in_planes", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "4", "*", "growth_rate", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "4", "*", "growth_rate", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "4", "*", "growth_rate", ",", "growth_rate", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.cifar_architectures.densenet.Bottleneck.forward": [[19, 24], ["densenet.Bottleneck.conv1", "densenet.Bottleneck.conv2", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "densenet.Bottleneck.bn1", "densenet.Bottleneck.bn2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv1", "(", "F", ".", "relu", "(", "self", ".", "bn1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "conv2", "(", "F", ".", "relu", "(", "self", ".", "bn2", "(", "out", ")", ")", ")", "\n", "out", "=", "torch", ".", "cat", "(", "[", "out", ",", "x", "]", ",", "1", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.cifar_architectures.densenet.Transition.__init__": [[27, 31], ["torch.Module.__init__", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.cifar_architectures.wresnet.Wide_ResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_planes", ",", "out_planes", ")", ":", "\n", "        ", "super", "(", "Transition", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "bn", "=", "nn", ".", "BatchNorm2d", "(", "in_planes", ")", "\n", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.cifar_architectures.densenet.Transition.forward": [[32, 36], ["densenet.Transition.conv", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "torch.relu", "torch.relu", "torch.relu", "densenet.Transition.bn"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv", "(", "F", ".", "relu", "(", "self", ".", "bn", "(", "x", ")", ")", ")", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "2", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.cifar_architectures.densenet.DenseNet.__init__": [[39, 69], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "densenet.DenseNet._make_dense_layers", "int", "densenet.Transition", "densenet.DenseNet._make_dense_layers", "int", "densenet.Transition", "densenet.DenseNet._make_dense_layers", "int", "densenet.Transition", "densenet.DenseNet._make_dense_layers", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Linear", "torch.Linear", "torch.Linear", "math.floor", "math.floor", "math.floor"], "methods", ["home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.cifar_architectures.wresnet.Wide_ResNet.__init__", "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.cifar_architectures.densenet.DenseNet._make_dense_layers", "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.cifar_architectures.densenet.DenseNet._make_dense_layers", "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.cifar_architectures.densenet.DenseNet._make_dense_layers", "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.cifar_architectures.densenet.DenseNet._make_dense_layers"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "nblocks", ",", "growth_rate", "=", "12", ",", "reduction", "=", "0.5", ",", "num_classes", "=", "10", ")", ":", "\n", "        ", "super", "(", "DenseNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "growth_rate", "=", "growth_rate", "\n", "\n", "num_planes", "=", "2", "*", "growth_rate", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "num_planes", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n", "self", ".", "dense1", "=", "self", ".", "_make_dense_layers", "(", "block", ",", "num_planes", ",", "nblocks", "[", "0", "]", ")", "\n", "num_planes", "+=", "nblocks", "[", "0", "]", "*", "growth_rate", "\n", "out_planes", "=", "int", "(", "math", ".", "floor", "(", "num_planes", "*", "reduction", ")", ")", "\n", "self", ".", "trans1", "=", "Transition", "(", "num_planes", ",", "out_planes", ")", "\n", "num_planes", "=", "out_planes", "\n", "\n", "self", ".", "dense2", "=", "self", ".", "_make_dense_layers", "(", "block", ",", "num_planes", ",", "nblocks", "[", "1", "]", ")", "\n", "num_planes", "+=", "nblocks", "[", "1", "]", "*", "growth_rate", "\n", "out_planes", "=", "int", "(", "math", ".", "floor", "(", "num_planes", "*", "reduction", ")", ")", "\n", "self", ".", "trans2", "=", "Transition", "(", "num_planes", ",", "out_planes", ")", "\n", "num_planes", "=", "out_planes", "\n", "\n", "self", ".", "dense3", "=", "self", ".", "_make_dense_layers", "(", "block", ",", "num_planes", ",", "nblocks", "[", "2", "]", ")", "\n", "num_planes", "+=", "nblocks", "[", "2", "]", "*", "growth_rate", "\n", "out_planes", "=", "int", "(", "math", ".", "floor", "(", "num_planes", "*", "reduction", ")", ")", "\n", "self", ".", "trans3", "=", "Transition", "(", "num_planes", ",", "out_planes", ")", "\n", "num_planes", "=", "out_planes", "\n", "\n", "self", ".", "dense4", "=", "self", ".", "_make_dense_layers", "(", "block", ",", "num_planes", ",", "nblocks", "[", "3", "]", ")", "\n", "num_planes", "+=", "nblocks", "[", "3", "]", "*", "growth_rate", "\n", "\n", "self", ".", "bn", "=", "nn", ".", "BatchNorm2d", "(", "num_planes", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "num_planes", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.cifar_architectures.densenet.DenseNet._make_dense_layers": [[70, 76], ["range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "block"], "methods", ["None"], ["", "def", "_make_dense_layers", "(", "self", ",", "block", ",", "in_planes", ",", "nblock", ")", ":", "\n", "        ", "layers", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "nblock", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "in_planes", ",", "self", ".", "growth_rate", ")", ")", "\n", "in_planes", "+=", "self", ".", "growth_rate", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.cifar_architectures.densenet.DenseNet.forward": [[77, 87], ["densenet.DenseNet.conv1", "densenet.DenseNet.trans1", "densenet.DenseNet.trans2", "densenet.DenseNet.trans3", "densenet.DenseNet.dense4", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "densenet.DenseNet.view", "densenet.DenseNet.linear", "densenet.DenseNet.dense1", "densenet.DenseNet.dense2", "densenet.DenseNet.dense3", "torch.relu", "torch.relu", "torch.relu", "densenet.DenseNet.size", "densenet.DenseNet.bn"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "trans1", "(", "self", ".", "dense1", "(", "out", ")", ")", "\n", "out", "=", "self", ".", "trans2", "(", "self", ".", "dense2", "(", "out", ")", ")", "\n", "out", "=", "self", ".", "trans3", "(", "self", ".", "dense3", "(", "out", ")", ")", "\n", "out", "=", "self", ".", "dense4", "(", "out", ")", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "F", ".", "relu", "(", "self", ".", "bn", "(", "out", ")", ")", ",", "4", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "linear", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.cifar_architectures.densenet.DenseNet121": [[88, 90], ["densenet.DenseNet"], "function", ["None"], ["", "", "def", "DenseNet121", "(", ")", ":", "\n", "    ", "return", "DenseNet", "(", "Bottleneck", ",", "[", "6", ",", "12", ",", "24", ",", "16", "]", ",", "growth_rate", "=", "32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.cifar_architectures.densenet.DenseNet169": [[91, 93], ["densenet.DenseNet"], "function", ["None"], ["", "def", "DenseNet169", "(", ")", ":", "\n", "    ", "return", "DenseNet", "(", "Bottleneck", ",", "[", "6", ",", "12", ",", "32", ",", "32", "]", ",", "growth_rate", "=", "32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.cifar_architectures.densenet.DenseNet201": [[94, 96], ["densenet.DenseNet"], "function", ["None"], ["", "def", "DenseNet201", "(", ")", ":", "\n", "    ", "return", "DenseNet", "(", "Bottleneck", ",", "[", "6", ",", "12", ",", "48", ",", "32", "]", ",", "growth_rate", "=", "32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.cifar_architectures.densenet.DenseNet161": [[97, 99], ["densenet.DenseNet"], "function", ["None"], ["", "def", "DenseNet161", "(", ")", ":", "\n", "    ", "return", "DenseNet", "(", "Bottleneck", ",", "[", "6", ",", "12", ",", "36", ",", "24", "]", ",", "growth_rate", "=", "48", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.cifar_architectures.densenet.densenet_cifar": [[100, 102], ["densenet.DenseNet"], "function", ["None"], ["", "def", "densenet_cifar", "(", ")", ":", "\n", "    ", "return", "DenseNet", "(", "Bottleneck", ",", "[", "6", ",", "12", ",", "24", ",", "16", "]", ",", "growth_rate", "=", "12", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.cifar_architectures.densenet.test_densenet": [[103, 108], ["densenet.densenet_cifar", "torch.randn", "torch.randn", "torch.randn", "densenet_cifar.", "print", "torch.autograd.Variable"], "function", ["home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.cifar_architectures.densenet.densenet_cifar"], ["", "def", "test_densenet", "(", ")", ":", "\n", "    ", "net", "=", "densenet_cifar", "(", ")", "\n", "x", "=", "torch", ".", "randn", "(", "1", ",", "3", ",", "32", ",", "32", ")", "\n", "y", "=", "net", "(", "Variable", "(", "x", ")", ")", "\n", "print", "(", "y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.cifar_architectures.resnext.Block.__init__": [[16, 31], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.cifar_architectures.wresnet.Wide_ResNet.__init__"], ["def", "__init__", "(", "self", ",", "in_planes", ",", "cardinality", "=", "32", ",", "bottleneck_width", "=", "4", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "Block", ",", "self", ")", ".", "__init__", "(", ")", "\n", "group_width", "=", "cardinality", "*", "bottleneck_width", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "group_width", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "group_width", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "group_width", ",", "group_width", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "groups", "=", "cardinality", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "group_width", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "group_width", ",", "self", ".", "expansion", "*", "group_width", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "self", ".", "expansion", "*", "group_width", ")", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "self", ".", "expansion", "*", "group_width", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "self", ".", "expansion", "*", "group_width", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "self", ".", "expansion", "*", "group_width", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.cifar_architectures.resnext.Block.forward": [[33, 40], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "resnext.Block.bn3", "resnext.Block.shortcut", "torch.relu", "torch.relu", "torch.relu", "resnext.Block.bn1", "resnext.Block.bn2", "resnext.Block.conv3", "resnext.Block.conv1", "resnext.Block.conv2"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "F", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ")", ")", ")", "\n", "out", "=", "self", ".", "bn3", "(", "self", ".", "conv3", "(", "out", ")", ")", "\n", "out", "+=", "self", ".", "shortcut", "(", "x", ")", "\n", "out", "=", "F", ".", "relu", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.cifar_architectures.resnext.ResNeXt.__init__": [[43, 56], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "resnext.ResNeXt._make_layer", "resnext.ResNeXt._make_layer", "resnext.ResNeXt._make_layer", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.cifar_architectures.wresnet.Wide_ResNet.__init__", "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.cifar_architectures.preact_resnet.PreActResNet._make_layer", "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.cifar_architectures.preact_resnet.PreActResNet._make_layer", "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.cifar_architectures.preact_resnet.PreActResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "num_blocks", ",", "cardinality", ",", "bottleneck_width", ",", "num_classes", "=", "10", ")", ":", "\n", "        ", "super", "(", "ResNeXt", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "cardinality", "=", "cardinality", "\n", "self", ".", "bottleneck_width", "=", "bottleneck_width", "\n", "self", ".", "in_planes", "=", "64", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "num_blocks", "[", "0", "]", ",", "1", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "num_blocks", "[", "1", "]", ",", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "num_blocks", "[", "2", "]", ",", "2", ")", "\n", "# self.layer4 = self._make_layer(num_blocks[3], 2)", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "cardinality", "*", "bottleneck_width", "*", "8", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.cifar_architectures.resnext.ResNeXt._make_layer": [[57, 66], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "resnext.Block"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ",", "num_blocks", ",", "stride", ")", ":", "\n", "        ", "strides", "=", "[", "stride", "]", "+", "[", "1", "]", "*", "(", "num_blocks", "-", "1", ")", "\n", "layers", "=", "[", "]", "\n", "for", "stride", "in", "strides", ":", "\n", "            ", "layers", ".", "append", "(", "Block", "(", "self", ".", "in_planes", ",", "self", ".", "cardinality", ",", "self", ".", "bottleneck_width", ",", "stride", ")", ")", "\n", "self", ".", "in_planes", "=", "Block", ".", "expansion", "*", "self", ".", "cardinality", "*", "self", ".", "bottleneck_width", "\n", "# Increase bottleneck_width by 2 after each stage.", "\n", "", "self", ".", "bottleneck_width", "*=", "2", "\n", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.cifar_architectures.resnext.ResNeXt.forward": [[67, 77], ["torch.relu", "torch.relu", "torch.relu", "resnext.ResNeXt.layer1", "resnext.ResNeXt.layer2", "resnext.ResNeXt.layer3", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "resnext.ResNeXt.view", "resnext.ResNeXt.linear", "resnext.ResNeXt.bn1", "resnext.ResNeXt.size", "resnext.ResNeXt.conv1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "layer1", "(", "out", ")", "\n", "out", "=", "self", ".", "layer2", "(", "out", ")", "\n", "out", "=", "self", ".", "layer3", "(", "out", ")", "\n", "# out = self.layer4(out)", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "8", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "linear", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.cifar_architectures.resnext.ResNeXt29_2x64d": [[79, 81], ["resnext.ResNeXt"], "function", ["None"], ["", "", "def", "ResNeXt29_2x64d", "(", ")", ":", "\n", "    ", "return", "ResNeXt", "(", "num_blocks", "=", "[", "3", ",", "3", ",", "3", "]", ",", "cardinality", "=", "2", ",", "bottleneck_width", "=", "64", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.cifar_architectures.resnext.ResNeXt29_4x64d": [[82, 84], ["resnext.ResNeXt"], "function", ["None"], ["", "def", "ResNeXt29_4x64d", "(", ")", ":", "\n", "    ", "return", "ResNeXt", "(", "num_blocks", "=", "[", "3", ",", "3", ",", "3", "]", ",", "cardinality", "=", "4", ",", "bottleneck_width", "=", "64", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.cifar_architectures.resnext.ResNeXt29_8x64d": [[85, 87], ["resnext.ResNeXt"], "function", ["None"], ["", "def", "ResNeXt29_8x64d", "(", ")", ":", "\n", "    ", "return", "ResNeXt", "(", "num_blocks", "=", "[", "3", ",", "3", ",", "3", "]", ",", "cardinality", "=", "8", ",", "bottleneck_width", "=", "64", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.cifar_architectures.resnext.ResNeXt29_32x4d": [[88, 90], ["resnext.ResNeXt"], "function", ["None"], ["", "def", "ResNeXt29_32x4d", "(", ")", ":", "\n", "    ", "return", "ResNeXt", "(", "num_blocks", "=", "[", "3", ",", "3", ",", "3", "]", ",", "cardinality", "=", "32", ",", "bottleneck_width", "=", "4", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.cifar_architectures.resnext.test_resnext": [[91, 96], ["resnext.ResNeXt29_2x64d", "torch.randn", "torch.randn", "torch.randn", "ResNeXt29_2x64d.", "print", "torch.autograd.Variable", "net.size"], "function", ["home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.cifar_architectures.resnext.ResNeXt29_2x64d"], ["", "def", "test_resnext", "(", ")", ":", "\n", "    ", "net", "=", "ResNeXt29_2x64d", "(", ")", "\n", "x", "=", "torch", ".", "randn", "(", "1", ",", "3", ",", "32", ",", "32", ")", "\n", "y", "=", "net", "(", "Variable", "(", "x", ")", ")", "\n", "print", "(", "y", ".", "size", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.cifar_architectures.squeezenet.fire.__init__": [[10, 26], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "squeezenet.fire.modules", "isinstance", "m.weight.data.normal_", "math.sqrt"], "methods", ["home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.cifar_architectures.wresnet.Wide_ResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "inplanes", ",", "squeeze_planes", ",", "expand_planes", ")", ":", "\n", "        ", "super", "(", "fire", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "squeeze_planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "squeeze_planes", ")", "\n", "self", ".", "relu1", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "squeeze_planes", ",", "expand_planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "expand_planes", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "squeeze_planes", ",", "expand_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "expand_planes", ")", "\n", "self", ".", "relu2", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n", "# using MSR initilization", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "in_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.cifar_architectures.squeezenet.fire.forward": [[27, 38], ["squeezenet.fire.conv1", "squeezenet.fire.bn1", "squeezenet.fire.relu1", "squeezenet.fire.conv2", "squeezenet.fire.bn2", "squeezenet.fire.conv3", "squeezenet.fire.bn3", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "squeezenet.fire.relu2"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu1", "(", "x", ")", "\n", "out1", "=", "self", ".", "conv2", "(", "x", ")", "\n", "out1", "=", "self", ".", "bn2", "(", "out1", ")", "\n", "out2", "=", "self", ".", "conv3", "(", "x", ")", "\n", "out2", "=", "self", ".", "bn3", "(", "out2", ")", "\n", "out", "=", "torch", ".", "cat", "(", "[", "out1", ",", "out2", "]", ",", "1", ")", "\n", "out", "=", "self", ".", "relu2", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.cifar_architectures.squeezenet.SqueezeNet.__init__": [[41, 67], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "squeezenet.fire", "squeezenet.fire", "squeezenet.fire", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "squeezenet.fire", "squeezenet.fire", "squeezenet.fire", "squeezenet.fire", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "squeezenet.fire", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "squeezenet.SqueezeNet.modules", "isinstance", "m.weight.data.normal_", "isinstance", "math.sqrt", "m.weight.data.fill_", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.cifar_architectures.wresnet.Wide_ResNet.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "SqueezeNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "96", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "# 32", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "96", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool1", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "# 16", "\n", "self", ".", "fire2", "=", "fire", "(", "96", ",", "16", ",", "64", ")", "\n", "self", ".", "fire3", "=", "fire", "(", "128", ",", "16", ",", "64", ")", "\n", "self", ".", "fire4", "=", "fire", "(", "128", ",", "32", ",", "128", ")", "\n", "self", ".", "maxpool2", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "# 8", "\n", "self", ".", "fire5", "=", "fire", "(", "256", ",", "32", ",", "128", ")", "\n", "self", ".", "fire6", "=", "fire", "(", "256", ",", "48", ",", "192", ")", "\n", "self", ".", "fire7", "=", "fire", "(", "384", ",", "48", ",", "192", ")", "\n", "self", ".", "fire8", "=", "fire", "(", "384", ",", "64", ",", "256", ")", "\n", "self", ".", "maxpool3", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "# 4", "\n", "self", ".", "fire9", "=", "fire", "(", "512", ",", "64", ",", "256", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "512", ",", "10", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ")", "\n", "self", ".", "avg_pool", "=", "nn", ".", "AvgPool2d", "(", "kernel_size", "=", "4", ",", "stride", "=", "4", ")", "\n", "# self.softmax = nn.LogSoftmax(dim=1)", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "in_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.cifar_architectures.squeezenet.SqueezeNet.forward": [[69, 91], ["squeezenet.SqueezeNet.conv1", "squeezenet.SqueezeNet.bn1", "squeezenet.SqueezeNet.relu", "squeezenet.SqueezeNet.maxpool1", "squeezenet.SqueezeNet.fire2", "squeezenet.SqueezeNet.fire3", "squeezenet.SqueezeNet.fire4", "squeezenet.SqueezeNet.maxpool2", "squeezenet.SqueezeNet.fire5", "squeezenet.SqueezeNet.fire6", "squeezenet.SqueezeNet.fire7", "squeezenet.SqueezeNet.fire8", "squeezenet.SqueezeNet.maxpool3", "squeezenet.SqueezeNet.fire9", "squeezenet.SqueezeNet.conv2", "squeezenet.SqueezeNet.avg_pool", "x.squeeze.squeeze.squeeze"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool1", "(", "x", ")", "\n", "x", "=", "self", ".", "fire2", "(", "x", ")", "\n", "x", "=", "self", ".", "fire3", "(", "x", ")", "\n", "x", "=", "self", ".", "fire4", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool2", "(", "x", ")", "\n", "x", "=", "self", ".", "fire5", "(", "x", ")", "\n", "x", "=", "self", ".", "fire6", "(", "x", ")", "\n", "x", "=", "self", ".", "fire7", "(", "x", ")", "\n", "x", "=", "self", ".", "fire8", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool3", "(", "x", ")", "\n", "x", "=", "self", ".", "fire9", "(", "x", ")", "\n", "x", "=", "self", ".", "conv2", "(", "x", ")", "\n", "x", "=", "self", ".", "avg_pool", "(", "x", ")", "\n", "# x = self.softmax(x)", "\n", "# x = x.view(128,10) # 128 is batch size ", "\n", "# # 10 is number of classes", "\n", "x", "=", "x", ".", "squeeze", "(", ")", "# moved to squeeze a little more flexible", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.cifar_architectures.squeezenet.fire_layer": [[92, 95], ["squeezenet.fire"], "function", ["None"], ["", "", "def", "fire_layer", "(", "inp", ",", "s", ",", "e", ")", ":", "\n", "    ", "f", "=", "fire", "(", "inp", ",", "s", ",", "e", ")", "\n", "return", "f", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.cifar_architectures.squeezenet.squeezenet_cifar": [[96, 102], ["squeezenet.SqueezeNet"], "function", ["None"], ["", "def", "squeezenet_cifar", "(", "pretrained", "=", "False", ")", ":", "\n", "    ", "net", "=", "SqueezeNet", "(", ")", "\n", "# inp = Variable(torch.randn(64,3,32,32))", "\n", "# out = net.forward(inp)", "\n", "# print(out.size())", "\n", "return", "net", "\n", "", ""]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.cifar_architectures.googlenet.Inception.__init__": [[10, 48], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.cifar_architectures.wresnet.Wide_ResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_planes", ",", "n1x1", ",", "n3x3red", ",", "n3x3", ",", "n5x5red", ",", "n5x5", ",", "pool_planes", ")", ":", "\n", "        ", "super", "(", "Inception", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# 1x1 conv branch", "\n", "self", ".", "b1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "n1x1", ",", "kernel_size", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "n1x1", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", ")", "\n", "\n", "# 1x1 conv -> 3x3 conv branch", "\n", "self", ".", "b2", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "n3x3red", ",", "kernel_size", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "n3x3red", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "n3x3red", ",", "n3x3", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "n3x3", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", ")", "\n", "\n", "# 1x1 conv -> 5x5 conv branch", "\n", "self", ".", "b3", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "n5x5red", ",", "kernel_size", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "n5x5red", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "n5x5red", ",", "n5x5", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "n5x5", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "n5x5", ",", "n5x5", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "n5x5", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", ")", "\n", "\n", "# 3x3 pool -> 1x1 conv branch", "\n", "self", ".", "b4", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "MaxPool2d", "(", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "pool_planes", ",", "kernel_size", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "pool_planes", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.cifar_architectures.googlenet.Inception.forward": [[50, 56], ["googlenet.Inception.b1", "googlenet.Inception.b2", "googlenet.Inception.b3", "googlenet.Inception.b4", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "y1", "=", "self", ".", "b1", "(", "x", ")", "\n", "y2", "=", "self", ".", "b2", "(", "x", ")", "\n", "y3", "=", "self", ".", "b3", "(", "x", ")", "\n", "y4", "=", "self", ".", "b4", "(", "x", ")", "\n", "return", "torch", ".", "cat", "(", "[", "y1", ",", "y2", ",", "y3", ",", "y4", "]", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.cifar_architectures.googlenet.GoogLeNet.__init__": [[59, 83], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "googlenet.Inception", "googlenet.Inception", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "googlenet.Inception", "googlenet.Inception", "googlenet.Inception", "googlenet.Inception", "googlenet.Inception", "googlenet.Inception", "googlenet.Inception", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.cifar_architectures.wresnet.Wide_ResNet.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "GoogLeNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "pre_layers", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "3", ",", "192", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "192", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", ")", "\n", "\n", "self", ".", "a3", "=", "Inception", "(", "192", ",", "64", ",", "96", ",", "128", ",", "16", ",", "32", ",", "32", ")", "\n", "self", ".", "b3", "=", "Inception", "(", "256", ",", "128", ",", "128", ",", "192", ",", "32", ",", "96", ",", "64", ")", "\n", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "\n", "self", ".", "a4", "=", "Inception", "(", "480", ",", "192", ",", "96", ",", "208", ",", "16", ",", "48", ",", "64", ")", "\n", "self", ".", "b4", "=", "Inception", "(", "512", ",", "160", ",", "112", ",", "224", ",", "24", ",", "64", ",", "64", ")", "\n", "self", ".", "c4", "=", "Inception", "(", "512", ",", "128", ",", "128", ",", "256", ",", "24", ",", "64", ",", "64", ")", "\n", "self", ".", "d4", "=", "Inception", "(", "512", ",", "112", ",", "144", ",", "288", ",", "32", ",", "64", ",", "64", ")", "\n", "self", ".", "e4", "=", "Inception", "(", "528", ",", "256", ",", "160", ",", "320", ",", "32", ",", "128", ",", "128", ")", "\n", "\n", "self", ".", "a5", "=", "Inception", "(", "832", ",", "256", ",", "160", ",", "320", ",", "32", ",", "128", ",", "128", ")", "\n", "self", ".", "b5", "=", "Inception", "(", "832", ",", "384", ",", "192", ",", "384", ",", "48", ",", "128", ",", "128", ")", "\n", "\n", "self", ".", "avgpool", "=", "nn", ".", "AvgPool2d", "(", "8", ",", "stride", "=", "1", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "1024", ",", "10", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.cifar_architectures.googlenet.GoogLeNet.forward": [[84, 101], ["googlenet.GoogLeNet.pre_layers", "googlenet.GoogLeNet.a3", "googlenet.GoogLeNet.b3", "googlenet.GoogLeNet.maxpool", "googlenet.GoogLeNet.a4", "googlenet.GoogLeNet.b4", "googlenet.GoogLeNet.c4", "googlenet.GoogLeNet.d4", "googlenet.GoogLeNet.e4", "googlenet.GoogLeNet.maxpool", "googlenet.GoogLeNet.a5", "googlenet.GoogLeNet.b5", "googlenet.GoogLeNet.avgpool", "googlenet.GoogLeNet.view", "googlenet.GoogLeNet.linear", "googlenet.GoogLeNet.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "pre_layers", "(", "x", ")", "\n", "out", "=", "self", ".", "a3", "(", "out", ")", "\n", "out", "=", "self", ".", "b3", "(", "out", ")", "\n", "out", "=", "self", ".", "maxpool", "(", "out", ")", "\n", "out", "=", "self", ".", "a4", "(", "out", ")", "\n", "out", "=", "self", ".", "b4", "(", "out", ")", "\n", "out", "=", "self", ".", "c4", "(", "out", ")", "\n", "out", "=", "self", ".", "d4", "(", "out", ")", "\n", "out", "=", "self", ".", "e4", "(", "out", ")", "\n", "out", "=", "self", ".", "maxpool", "(", "out", ")", "\n", "out", "=", "self", ".", "a5", "(", "out", ")", "\n", "out", "=", "self", ".", "b5", "(", "out", ")", "\n", "out", "=", "self", ".", "avgpool", "(", "out", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "linear", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.cifar_architectures.preact_resnet.PreActBlock.__init__": [[18, 28], ["torch.Module.__init__", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.cifar_architectures.wresnet.Wide_ResNet.__init__"], ["def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "PreActBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "in_planes", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "self", ".", "expansion", "*", "planes", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "self", ".", "expansion", "*", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.cifar_architectures.preact_resnet.PreActBlock.forward": [[30, 37], ["torch.relu", "torch.relu", "torch.relu", "preact_resnet.PreActBlock.conv1", "preact_resnet.PreActBlock.conv2", "preact_resnet.PreActBlock.bn1", "hasattr", "preact_resnet.PreActBlock.shortcut", "torch.relu", "torch.relu", "torch.relu", "preact_resnet.PreActBlock.bn2"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "x", ")", ")", "\n", "shortcut", "=", "self", ".", "shortcut", "(", "out", ")", "if", "hasattr", "(", "self", ",", "'shortcut'", ")", "else", "x", "\n", "out", "=", "self", ".", "conv1", "(", "out", ")", "\n", "out", "=", "self", ".", "conv2", "(", "F", ".", "relu", "(", "self", ".", "bn2", "(", "out", ")", ")", ")", "\n", "out", "+=", "shortcut", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.cifar_architectures.preact_resnet.PreActBottleneck.__init__": [[43, 55], ["torch.Module.__init__", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.cifar_architectures.wresnet.Wide_ResNet.__init__"], ["def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "PreActBottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "in_planes", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", ",", "self", ".", "expansion", "*", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "self", ".", "expansion", "*", "planes", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "self", ".", "expansion", "*", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.cifar_architectures.preact_resnet.PreActBottleneck.forward": [[57, 65], ["torch.relu", "torch.relu", "torch.relu", "preact_resnet.PreActBottleneck.conv1", "preact_resnet.PreActBottleneck.conv2", "preact_resnet.PreActBottleneck.conv3", "preact_resnet.PreActBottleneck.bn1", "hasattr", "preact_resnet.PreActBottleneck.shortcut", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "preact_resnet.PreActBottleneck.bn2", "preact_resnet.PreActBottleneck.bn3"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "x", ")", ")", "\n", "shortcut", "=", "self", ".", "shortcut", "(", "out", ")", "if", "hasattr", "(", "self", ",", "'shortcut'", ")", "else", "x", "\n", "out", "=", "self", ".", "conv1", "(", "out", ")", "\n", "out", "=", "self", ".", "conv2", "(", "F", ".", "relu", "(", "self", ".", "bn2", "(", "out", ")", ")", ")", "\n", "out", "=", "self", ".", "conv3", "(", "F", ".", "relu", "(", "self", ".", "bn3", "(", "out", ")", ")", ")", "\n", "out", "+=", "shortcut", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.cifar_architectures.preact_resnet.PreActResNet.__init__": [[68, 78], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "preact_resnet.PreActResNet._make_layer", "preact_resnet.PreActResNet._make_layer", "preact_resnet.PreActResNet._make_layer", "preact_resnet.PreActResNet._make_layer", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.cifar_architectures.wresnet.Wide_ResNet.__init__", "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.cifar_architectures.preact_resnet.PreActResNet._make_layer", "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.cifar_architectures.preact_resnet.PreActResNet._make_layer", "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.cifar_architectures.preact_resnet.PreActResNet._make_layer", "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.cifar_architectures.preact_resnet.PreActResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "num_blocks", ",", "num_classes", "=", "10", ")", ":", "\n", "        ", "super", "(", "PreActResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_planes", "=", "64", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "num_blocks", "[", "0", "]", ",", "stride", "=", "1", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "num_blocks", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "num_blocks", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "num_blocks", "[", "3", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "512", "*", "block", ".", "expansion", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.cifar_architectures.preact_resnet.PreActResNet._make_layer": [[79, 86], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "block"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "num_blocks", ",", "stride", ")", ":", "\n", "        ", "strides", "=", "[", "stride", "]", "+", "[", "1", "]", "*", "(", "num_blocks", "-", "1", ")", "\n", "layers", "=", "[", "]", "\n", "for", "stride", "in", "strides", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "in_planes", ",", "planes", ",", "stride", ")", ")", "\n", "self", ".", "in_planes", "=", "planes", "*", "block", ".", "expansion", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.cifar_architectures.preact_resnet.PreActResNet.forward": [[87, 97], ["preact_resnet.PreActResNet.conv1", "preact_resnet.PreActResNet.layer1", "preact_resnet.PreActResNet.layer2", "preact_resnet.PreActResNet.layer3", "preact_resnet.PreActResNet.layer4", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "preact_resnet.PreActResNet.view", "preact_resnet.PreActResNet.linear", "preact_resnet.PreActResNet.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "layer1", "(", "out", ")", "\n", "out", "=", "self", ".", "layer2", "(", "out", ")", "\n", "out", "=", "self", ".", "layer3", "(", "out", ")", "\n", "out", "=", "self", ".", "layer4", "(", "out", ")", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "4", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "linear", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.cifar_architectures.preact_resnet.PreActResNet18": [[99, 101], ["preact_resnet.PreActResNet"], "function", ["None"], ["", "", "def", "PreActResNet18", "(", ")", ":", "\n", "    ", "return", "PreActResNet", "(", "PreActBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.cifar_architectures.preact_resnet.PreActResNet34": [[102, 104], ["preact_resnet.PreActResNet"], "function", ["None"], ["", "def", "PreActResNet34", "(", ")", ":", "\n", "    ", "return", "PreActResNet", "(", "PreActBlock", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.cifar_architectures.preact_resnet.PreActResNet50": [[105, 107], ["preact_resnet.PreActResNet"], "function", ["None"], ["", "def", "PreActResNet50", "(", ")", ":", "\n", "    ", "return", "PreActResNet", "(", "PreActBottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.cifar_architectures.preact_resnet.PreActResNet101": [[108, 110], ["preact_resnet.PreActResNet"], "function", ["None"], ["", "def", "PreActResNet101", "(", ")", ":", "\n", "    ", "return", "PreActResNet", "(", "PreActBottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.cifar_architectures.preact_resnet.PreActResNet152": [[111, 113], ["preact_resnet.PreActResNet"], "function", ["None"], ["", "def", "PreActResNet152", "(", ")", ":", "\n", "    ", "return", "PreActResNet", "(", "PreActBottleneck", ",", "[", "3", ",", "8", ",", "36", ",", "3", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.cifar_architectures.preact_resnet.test": [[115, 119], ["preact_resnet.PreActResNet18", "PreActResNet18.", "print", "torch.autograd.Variable", "net.size", "torch.randn", "torch.randn", "torch.randn"], "function", ["home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.cifar_architectures.preact_resnet.PreActResNet18"], ["", "def", "test", "(", ")", ":", "\n", "    ", "net", "=", "PreActResNet18", "(", ")", "\n", "y", "=", "net", "(", "Variable", "(", "torch", ".", "randn", "(", "1", ",", "3", ",", "32", ",", "32", ")", ")", ")", "\n", "print", "(", "y", ".", "size", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.cifar_architectures.wresnet.wide_basic.__init__": [[23, 35], ["torch.Module.__init__", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.cifar_architectures.wresnet.Wide_ResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "dropout_rate", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "wide_basic", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "in_planes", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "bias", "=", "True", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "p", "=", "dropout_rate", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "True", ")", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "planes", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "True", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.cifar_architectures.wresnet.wide_basic.forward": [[37, 43], ["wresnet.wide_basic.dropout", "wresnet.wide_basic.conv2", "wresnet.wide_basic.shortcut", "wresnet.wide_basic.conv1", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "wresnet.wide_basic.bn2", "wresnet.wide_basic.bn1"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "dropout", "(", "self", ".", "conv1", "(", "F", ".", "relu", "(", "self", ".", "bn1", "(", "x", ")", ")", ")", ")", "\n", "out", "=", "self", ".", "conv2", "(", "F", ".", "relu", "(", "self", ".", "bn2", "(", "out", ")", ")", ")", "\n", "out", "+=", "self", ".", "shortcut", "(", "x", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.cifar_architectures.wresnet.Wide_ResNet.__init__": [[45, 62], ["torch.Module.__init__", "print", "wresnet.conv3x3", "wresnet.Wide_ResNet._wide_layer", "wresnet.Wide_ResNet._wide_layer", "wresnet.Wide_ResNet._wide_layer", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.cifar_architectures.wresnet.Wide_ResNet.__init__", "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.cifar_architectures.wresnet.conv3x3", "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.cifar_architectures.wresnet.Wide_ResNet._wide_layer", "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.cifar_architectures.wresnet.Wide_ResNet._wide_layer", "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.cifar_architectures.wresnet.Wide_ResNet._wide_layer"], ["    ", "def", "__init__", "(", "self", ",", "depth", ",", "widen_factor", ",", "dropout_rate", ",", "num_classes", ")", ":", "\n", "        ", "super", "(", "Wide_ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_planes", "=", "16", "\n", "\n", "assert", "(", "(", "depth", "-", "4", ")", "%", "6", "==", "0", ")", ",", "'Wide-resnet depth should be 6n+4'", "\n", "n", "=", "(", "depth", "-", "4", ")", "/", "6", "\n", "k", "=", "widen_factor", "\n", "\n", "print", "(", "'| Wide-Resnet %dx%d'", "%", "(", "depth", ",", "k", ")", ")", "\n", "nStages", "=", "[", "16", ",", "16", "*", "k", ",", "32", "*", "k", ",", "64", "*", "k", "]", "\n", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "3", ",", "nStages", "[", "0", "]", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_wide_layer", "(", "wide_basic", ",", "nStages", "[", "1", "]", ",", "n", ",", "dropout_rate", ",", "stride", "=", "1", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_wide_layer", "(", "wide_basic", ",", "nStages", "[", "2", "]", ",", "n", ",", "dropout_rate", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_wide_layer", "(", "wide_basic", ",", "nStages", "[", "3", "]", ",", "n", ",", "dropout_rate", ",", "stride", "=", "2", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "nStages", "[", "3", "]", ",", "momentum", "=", "0.9", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "nStages", "[", "3", "]", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.cifar_architectures.wresnet.Wide_ResNet._wide_layer": [[63, 72], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "block", "int"], "methods", ["None"], ["", "def", "_wide_layer", "(", "self", ",", "block", ",", "planes", ",", "num_blocks", ",", "dropout_rate", ",", "stride", ")", ":", "\n", "        ", "strides", "=", "[", "stride", "]", "+", "[", "1", "]", "*", "(", "int", "(", "num_blocks", ")", "-", "1", ")", "\n", "layers", "=", "[", "]", "\n", "\n", "for", "stride", "in", "strides", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "in_planes", ",", "planes", ",", "dropout_rate", ",", "stride", ")", ")", "\n", "self", ".", "in_planes", "=", "planes", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.cifar_architectures.wresnet.Wide_ResNet.forward": [[73, 84], ["wresnet.Wide_ResNet.conv1", "wresnet.Wide_ResNet.layer1", "wresnet.Wide_ResNet.layer2", "wresnet.Wide_ResNet.layer3", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "wresnet.Wide_ResNet.view", "wresnet.Wide_ResNet.linear", "wresnet.Wide_ResNet.bn1", "wresnet.Wide_ResNet.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "layer1", "(", "out", ")", "\n", "out", "=", "self", ".", "layer2", "(", "out", ")", "\n", "out", "=", "self", ".", "layer3", "(", "out", ")", "\n", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "out", ")", ")", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "8", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "linear", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.cifar_architectures.wresnet.conv3x3": [[10, 12], ["torch.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.cifar_architectures.wresnet.conv_init": [[13, 21], ["classname.find", "torch.xavier_uniform_", "torch.constant_", "classname.find", "torch.constant_", "torch.constant_", "numpy.sqrt"], "function", ["None"], ["", "def", "conv_init", "(", "m", ")", ":", "\n", "    ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "if", "classname", ".", "find", "(", "'Conv'", ")", "!=", "-", "1", ":", "\n", "        ", "init", ".", "xavier_uniform_", "(", "m", ".", "weight", ",", "gain", "=", "np", ".", "sqrt", "(", "2", ")", ")", "\n", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "elif", "classname", ".", "find", "(", "'BatchNorm'", ")", "!=", "-", "1", ":", "\n", "        ", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.uw-mad-dash_GradCompressionUtility.cifar_architectures.wresnet.wresnet_cifar": [[85, 87], ["wresnet.Wide_ResNet"], "function", ["None"], ["", "", "def", "wresnet_cifar", "(", ")", ":", "\n", "    ", "return", "Wide_ResNet", "(", "28", ",", "10", ",", "0", ",", "10", ")", "\n", "\n"]]}