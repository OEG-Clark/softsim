{"home.repos.pwc.inspect_result.batmanlab_Context_Aware_SSL.None.dataset_train_graph.COPD_dataset.__init__": [[11, 26], ["glob.glob", "dataset_train_graph.COPD_dataset.sid_list.sort", "numpy.load", "numpy.asarray", "print", "dataset_train_graph.COPD_dataset.sid_list.append", "dataset_train_graph.COPD_dataset.patch_loc.max", "len", "item.split"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "stage", ",", "cfg", ",", "transforms", "=", "default_transform", ",", "graph_cutoff", "=", "0.13", ")", ":", "\n", "        ", "self", ".", "cfg", "=", "cfg", "\n", "self", ".", "root_dir", "=", "cfg", ".", "root_dir", "\n", "self", ".", "transforms", "=", "transforms", "\n", "self", ".", "graph_cutoff", "=", "graph_cutoff", "# hyper-parameter used to control graph sparsity", "\n", "\n", "self", ".", "sid_list", "=", "[", "]", "\n", "for", "item", "in", "glob", ".", "glob", "(", "self", ".", "cfg", ".", "root_dir", "+", "\"patch/\"", "+", "\"*_patch.npy\"", ")", ":", "\n", "            ", "self", ".", "sid_list", ".", "append", "(", "item", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "[", ":", "-", "10", "]", ")", "\n", "", "self", ".", "sid_list", ".", "sort", "(", ")", "\n", "self", ".", "patch_loc", "=", "np", ".", "load", "(", "\"/pghbio/dbmi/batmanlab/lisun/copd/gnn_shared/data/patch_data_32_6_reg/19676E_INSP_STD_JHU_COPD_BSpline_Iso1_patch_loc.npy\"", ")", "\n", "self", ".", "patch_loc", "=", "self", ".", "patch_loc", "/", "self", ".", "patch_loc", ".", "max", "(", "0", ")", "# column-wise norm", "\n", "\n", "self", ".", "sid_list", "=", "np", ".", "asarray", "(", "self", ".", "sid_list", ")", "\n", "print", "(", "stage", "+", "\" dataset size:\"", ",", "len", "(", "self", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.batmanlab_Context_Aware_SSL.None.dataset_train_graph.COPD_dataset.__len__": [[27, 29], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "sid_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.batmanlab_Context_Aware_SSL.None.dataset_train_graph.COPD_dataset.__getitem__": [[30, 43], ["numpy.load", "dataset_train_graph.COPD_dataset.transforms", "numpy.load", "dataset_train_graph.COPD_dataset.patch_loc.copy"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "img", "=", "np", ".", "load", "(", "self", ".", "root_dir", "+", "\"patch/\"", "+", "self", ".", "sid_list", "[", "idx", "]", "+", "\"_patch.npy\"", ")", "\n", "img", "=", "img", "+", "1024.", "\n", "\n", "# Get 2 augmented images (positive pair)", "\n", "img", "=", "self", ".", "transforms", "(", "img", ")", "\n", "img", "[", "0", "]", "=", "img", "[", "0", "]", "[", ":", ",", "None", ",", ":", ",", ":", ",", ":", "]", "/", "632.", "-", "1", "# Normalize to [-1,1], 632=(1024+240)/2", "\n", "img", "[", "1", "]", "=", "img", "[", "1", "]", "[", ":", ",", "None", ",", ":", ",", ":", ",", ":", "]", "/", "632.", "-", "1", "# Normalize to [-1,1], 632=(1024+240)/2", "\n", "\n", "adj", "=", "np", ".", "load", "(", "self", ".", "root_dir", "+", "\"adj/\"", "+", "self", ".", "sid_list", "[", "idx", "]", "+", "\"_adj.npy\"", ")", "\n", "adj", "=", "(", "adj", ">", "self", ".", "graph_cutoff", ")", ".", "astype", "(", "np", ".", "int", ")", "\n", "\n", "return", "img", ",", "self", ".", "patch_loc", ".", "copy", "(", ")", ",", "adj", "\n", "", "", ""]], "home.repos.pwc.inspect_result.batmanlab_Context_Aware_SSL.None.dataset_train_graph.default_transform": [[6, 8], ["None"], "function", ["None"], ["def", "default_transform", "(", "x", ")", ":", "\n", "    ", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.batmanlab_Context_Aware_SSL.None.dataset_train_patch.COPD_dataset.__init__": [[11, 31], ["numpy.load", "glob.glob", "dataset_train_patch.COPD_dataset.sid_list.sort", "numpy.load", "print", "numpy.asarray", "len", "print", "dataset_train_patch.COPD_dataset.sid_list.append", "len", "dataset_train_patch.COPD_dataset.patch_loc.max", "str", "item.split"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "stage", ",", "args", ",", "transforms", "=", "default_transform", ")", ":", "\n", "        ", "self", ".", "args", "=", "args", "\n", "self", ".", "root_dir", "=", "args", ".", "root_dir", "\n", "self", ".", "transforms", "=", "transforms", "\n", "self", ".", "patch_idx", "=", "0", "\n", "self", ".", "patch_data", "=", "np", ".", "load", "(", "self", ".", "args", ".", "root_dir", "+", "\"grouped_patch/patch_loc_\"", "+", "str", "(", "self", ".", "patch_idx", ")", "+", "\".npy\"", ")", "\n", "\n", "self", ".", "sid_list", "=", "[", "]", "\n", "for", "item", "in", "glob", ".", "glob", "(", "self", ".", "args", ".", "root_dir", "+", "\"patch/\"", "+", "\"*_patch.npy\"", ")", ":", "\n", "            ", "self", ".", "sid_list", ".", "append", "(", "item", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "[", ":", "-", "10", "]", ")", "\n", "", "self", ".", "sid_list", ".", "sort", "(", ")", "\n", "assert", "len", "(", "self", ".", "sid_list", ")", "==", "self", ".", "patch_data", ".", "shape", "[", "0", "]", "\n", "# point to your patch location file", "\n", "self", ".", "patch_loc", "=", "np", ".", "load", "(", "\"/pghbio/dbmi/batmanlab/lisun/copd/gnn_shared/data/patch_data_32_6_reg/19676E_INSP_STD_JHU_COPD_BSpline_Iso1_patch_loc.npy\"", ")", "\n", "self", ".", "patch_loc", "=", "self", ".", "patch_loc", "/", "self", ".", "patch_loc", ".", "max", "(", "0", ")", "\n", "\n", "print", "(", "\"Fold: full\"", ")", "\n", "self", ".", "sid_list", "=", "np", ".", "asarray", "(", "self", ".", "sid_list", ")", "\n", "self", ".", "sid_list_len", "=", "len", "(", "self", ".", "sid_list", ")", "\n", "print", "(", "stage", "+", "\" dataset size:\"", ",", "self", ".", "sid_list_len", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.batmanlab_Context_Aware_SSL.None.dataset_train_patch.COPD_dataset.set_patch_idx": [[32, 35], ["numpy.load", "str"], "methods", ["None"], ["", "def", "set_patch_idx", "(", "self", ",", "idx", ")", ":", "\n", "        ", "self", ".", "patch_idx", "=", "idx", "\n", "self", ".", "patch_data", "=", "np", ".", "load", "(", "self", ".", "args", ".", "root_dir", "+", "\"grouped_patch/patch_loc_\"", "+", "str", "(", "idx", ")", "+", "\".npy\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.batmanlab_Context_Aware_SSL.None.dataset_train_patch.COPD_dataset.__len__": [[36, 38], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "sid_list_len", "*", "self", ".", "args", ".", "num_patch", "\n", "\n"]], "home.repos.pwc.inspect_result.batmanlab_Context_Aware_SSL.None.dataset_train_patch.COPD_dataset.__getitem__": [[39, 51], ["dataset_train_patch.COPD_dataset.transforms", "numpy.array"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "idx", "=", "idx", "%", "self", ".", "sid_list_len", "\n", "img", "=", "self", ".", "patch_data", "[", "idx", ",", ":", ",", ":", ",", ":", "]", "\n", "img", "=", "img", "+", "1024.", "\n", "img", "=", "self", ".", "transforms", "(", "img", "[", "None", ",", ":", ",", ":", ",", ":", "]", ")", "\n", "img", "[", "0", "]", "=", "img", "[", "0", "]", "/", "632.", "-", "1", "# Normalize to [-1,1], 632=(1024+240)/2", "\n", "img", "[", "1", "]", "=", "img", "[", "1", "]", "/", "632.", "-", "1", "# Normalize to [-1,1], 632=(1024+240)/2", "\n", "\n", "patch_loc_idx", "=", "self", ".", "patch_loc", "[", "self", ".", "patch_idx", ",", ":", "]", "# patch location", "\n", "adj", "=", "np", ".", "array", "(", "[", "]", ")", "# adj matrix not needed for patch-level training", "\n", "\n", "return", "img", ",", "patch_loc_idx", ",", "adj", "\n", "", "", ""]], "home.repos.pwc.inspect_result.batmanlab_Context_Aware_SSL.None.dataset_train_patch.default_transform": [[6, 8], ["None"], "function", ["None"], ["def", "default_transform", "(", "x", ")", ":", "\n", "    ", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.batmanlab_Context_Aware_SSL.None.train.AverageMeter.__init__": [[492, 496], ["train.AverageMeter.reset"], "methods", ["home.repos.pwc.inspect_result.batmanlab_Context_Aware_SSL.None.train.AverageMeter.reset"], ["def", "__init__", "(", "self", ",", "name", ",", "fmt", "=", "':f'", ")", ":", "\n", "        ", "self", ".", "name", "=", "name", "\n", "self", ".", "fmt", "=", "fmt", "\n", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.batmanlab_Context_Aware_SSL.None.train.AverageMeter.reset": [[497, 502], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "val", "=", "0", "\n", "self", ".", "avg", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.batmanlab_Context_Aware_SSL.None.train.AverageMeter.update": [[503, 508], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "        ", "self", ".", "val", "=", "val", "\n", "self", ".", "sum", "+=", "val", "*", "n", "\n", "self", ".", "count", "+=", "n", "\n", "self", ".", "avg", "=", "self", ".", "sum", "/", "self", ".", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.batmanlab_Context_Aware_SSL.None.train.AverageMeter.__str__": [[509, 512], ["fmtstr.format"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "fmtstr", "=", "'{name} {val'", "+", "self", ".", "fmt", "+", "'} ({avg'", "+", "self", ".", "fmt", "+", "'})'", "\n", "return", "fmtstr", ".", "format", "(", "**", "self", ".", "__dict__", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.batmanlab_Context_Aware_SSL.None.train.ProgressMeter.__init__": [[515, 520], ["train.ProgressMeter._get_batch_fmtstr"], "methods", ["home.repos.pwc.inspect_result.batmanlab_Context_Aware_SSL.None.train.ProgressMeter._get_batch_fmtstr"], ["    ", "def", "__init__", "(", "self", ",", "num_batches", ",", "meters", ",", "prefix", "=", "\"\"", ",", "patch_idx", "=", "0", ")", ":", "\n", "        ", "self", ".", "batch_fmtstr", "=", "self", ".", "_get_batch_fmtstr", "(", "num_batches", ")", "\n", "self", ".", "meters", "=", "meters", "\n", "self", ".", "prefix", "=", "prefix", "\n", "self", ".", "patch_idx", "=", "patch_idx", "\n", "\n"]], "home.repos.pwc.inspect_result.batmanlab_Context_Aware_SSL.None.train.ProgressMeter.display_graph": [[521, 525], ["print", "str", "train.ProgressMeter.batch_fmtstr.format"], "methods", ["None"], ["", "def", "display_graph", "(", "self", ",", "batch", ")", ":", "\n", "        ", "entries", "=", "[", "self", ".", "prefix", "+", "self", ".", "batch_fmtstr", ".", "format", "(", "batch", ")", "]", "\n", "entries", "+=", "[", "str", "(", "meter", ")", "for", "meter", "in", "self", ".", "meters", "]", "\n", "print", "(", "'\\t'", ".", "join", "(", "entries", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.batmanlab_Context_Aware_SSL.None.train.ProgressMeter.display_patch": [[526, 531], ["print", "str", "train.ProgressMeter.batch_fmtstr.format"], "methods", ["None"], ["", "def", "display_patch", "(", "self", ",", "batch", ",", "patch_idx", ")", ":", "\n", "        ", "entries", "=", "[", "self", ".", "prefix", "+", "self", ".", "batch_fmtstr", ".", "format", "(", "batch", ")", "]", "\n", "entries", "+=", "[", "\"Patch :[{}]\"", ".", "format", "(", "patch_idx", ")", "]", "\n", "entries", "+=", "[", "str", "(", "meter", ")", "for", "meter", "in", "self", ".", "meters", "]", "\n", "print", "(", "'\\t'", ".", "join", "(", "entries", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.batmanlab_Context_Aware_SSL.None.train.ProgressMeter._get_batch_fmtstr": [[532, 536], ["len", "str", "str", "fmt.format"], "methods", ["None"], ["", "def", "_get_batch_fmtstr", "(", "self", ",", "num_batches", ")", ":", "\n", "        ", "num_digits", "=", "len", "(", "str", "(", "num_batches", "//", "1", ")", ")", "\n", "fmt", "=", "'{:'", "+", "str", "(", "num_digits", ")", "+", "'d}'", "\n", "return", "'['", "+", "fmt", "+", "'/'", "+", "fmt", ".", "format", "(", "num_batches", ")", "+", "']'", "\n", "\n"]], "home.repos.pwc.inspect_result.batmanlab_Context_Aware_SSL.None.train.main": [[126, 172], ["parser.parse_args", "os.path.join", "print", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "os.path.isdir", "os.makedirs", "open", "json.dump", "random.seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "warnings.warn", "int", "torch.spawn", "train.main_worker", "os.path.isfile", "os.makedirs", "os.path.join", "vars", "os.path.isdir", "os.path.isfile", "os.path.isfile", "NotImplementedError", "os.path.isdir"], "function", ["home.repos.pwc.inspect_result.batmanlab_Context_Aware_SSL.None.test.main_worker"], ["def", "main", "(", ")", ":", "\n", "# read configurations", "\n", "    ", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "# define experiment directory", "\n", "exp_dir", "=", "os", ".", "path", ".", "join", "(", "'./exp'", ",", "args", ".", "exp_name", ")", "\n", "if", "os", ".", "path", ".", "isdir", "(", "exp_dir", ")", "and", "(", "not", "os", ".", "path", ".", "isfile", "(", "args", ".", "resume", ")", ")", ":", "\n", "#shutil.rmtree(exp_dir)", "\n", "        ", "os", ".", "makedirs", "(", "exp_dir", ",", "exist_ok", "=", "True", ")", "\n", "", "elif", "(", "not", "os", ".", "path", ".", "isdir", "(", "exp_dir", ")", ")", "and", "(", "not", "os", ".", "path", ".", "isfile", "(", "args", ".", "resume", ")", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "exp_dir", ",", "exist_ok", "=", "True", ")", "\n", "", "elif", "(", "not", "os", ".", "path", ".", "isdir", "(", "exp_dir", ")", ")", "and", "os", ".", "path", ".", "isfile", "(", "args", ".", "resume", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", "\"Experiment directory does not exist.\"", ")", "\n", "\n", "# save configurations to a dictionary", "\n", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "exp_dir", ",", "'configs.json'", ")", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "json", ".", "dump", "(", "vars", "(", "args", ")", ",", "f", ",", "indent", "=", "2", ")", "\n", "\n", "", "if", "args", ".", "seed", "is", "not", "None", ":", "\n", "        ", "random", ".", "seed", "(", "args", ".", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "args", ".", "seed", ")", "\n", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "True", "\n", "#cudnn.deterministic = True", "\n", "\n", "", "if", "args", ".", "gpu", "is", "not", "None", ":", "\n", "        ", "warnings", ".", "warn", "(", "'You have chosen a specific GPU. This will completely '", "\n", "'disable data parallelism.'", ")", "\n", "\n", "", "if", "args", ".", "dist_url", "==", "\"env://\"", "and", "args", ".", "world_size", "==", "-", "1", ":", "\n", "        ", "args", ".", "world_size", "=", "int", "(", "os", ".", "environ", "[", "\"WORLD_SIZE\"", "]", ")", "\n", "\n", "", "args", ".", "distributed", "=", "args", ".", "world_size", ">", "1", "or", "args", ".", "multiprocessing_distributed", "\n", "print", "(", "\"Distributed:\"", ",", "args", ".", "distributed", ")", "\n", "\n", "ngpus_per_node", "=", "torch", ".", "cuda", ".", "device_count", "(", ")", "\n", "if", "args", ".", "multiprocessing_distributed", ":", "\n", "# Since we have ngpus_per_node processes per node, the total world_size", "\n", "# needs to be adjusted accordingly", "\n", "        ", "args", ".", "world_size", "=", "ngpus_per_node", "*", "args", ".", "world_size", "\n", "# Use torch.multiprocessing.spawn to launch distributed processes: the", "\n", "# main_worker process function", "\n", "mp", ".", "spawn", "(", "main_worker", ",", "nprocs", "=", "ngpus_per_node", ",", "args", "=", "(", "ngpus_per_node", ",", "args", ")", ")", "\n", "", "else", ":", "\n", "# Simply call main_worker function", "\n", "        ", "main_worker", "(", "args", ".", "gpu", ",", "ngpus_per_node", ",", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.batmanlab_Context_Aware_SSL.None.train.main_worker": [[174, 347], ["moco.builder_v3.MoCo", "moco.builder_graph.MoCo", "torch.CrossEntropyLoss().cuda", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "monai.transforms.Rand3DElastic", "monai.transforms.RandGaussianNoise", "monai.transforms.RandAdjustContrast", "monai.transforms.Compose", "dataset_train_graph.COPD_dataset", "dataset_train_patch.COPD_dataset", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "range", "print", "torch.init_process_group", "tensorboard_logger.configure", "torch.nn.parallel.DistributedDataParallel.parameters", "torch.nn.parallel.DistributedDataParallel.parameters", "train.save_checkpoint", "train.save_checkpoint", "os.path.isfile", "moco.loader.TwoCropsTransform", "moco.loader.TwoCropsTransform", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "train.adjust_learning_rate", "train.train_patch", "range", "int", "os.path.join", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.nn.parallel.DistributedDataParallel.cuda", "torch.nn.parallel.DistributedDataParallel.cuda", "int", "int", "int", "int", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "model.cuda.cuda", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "model.cuda.cuda", "NotImplementedError", "NotImplementedError", "torch.CrossEntropyLoss", "print", "torch.nn.parallel.DistributedDataParallel.load_state_dict", "torch.nn.parallel.DistributedDataParallel.load_state_dict", "torch.optim.SGD.load_state_dict", "torch.optim.SGD.load_state_dict", "print", "print", "exit", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.utils.data.distributed.DistributedSampler.set_epoch", "train.save_checkpoint", "train.adjust_learning_rate", "train.train_graph", "torch.nn.parallel.DistributedDataParallel.state_dict", "torch.optim.SGD.state_dict", "os.path.join", "torch.nn.parallel.DistributedDataParallel.state_dict", "torch.optim.SGD.state_dict", "os.path.join", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.utils.data.distributed.DistributedSampler.set_epoch", "train.save_checkpoint", "os.path.join", "os.path.join", "str", "torch.nn.parallel.DistributedDataParallel.state_dict", "torch.optim.SGD.state_dict", "os.path.join", "os.path.join", "torch.nn.parallel.DistributedDataParallel.state_dict", "torch.optim.SGD.state_dict", "os.path.join", "os.path.join"], "function", ["home.repos.pwc.inspect_result.batmanlab_Context_Aware_SSL.None.train.save_checkpoint", "home.repos.pwc.inspect_result.batmanlab_Context_Aware_SSL.None.train.save_checkpoint", "home.repos.pwc.inspect_result.batmanlab_Context_Aware_SSL.None.train.adjust_learning_rate", "home.repos.pwc.inspect_result.batmanlab_Context_Aware_SSL.None.train.train_patch", "home.repos.pwc.inspect_result.batmanlab_Context_Aware_SSL.None.train.save_checkpoint", "home.repos.pwc.inspect_result.batmanlab_Context_Aware_SSL.None.train.adjust_learning_rate", "home.repos.pwc.inspect_result.batmanlab_Context_Aware_SSL.None.train.train_graph", "home.repos.pwc.inspect_result.batmanlab_Context_Aware_SSL.None.train.save_checkpoint"], ["", "", "def", "main_worker", "(", "gpu", ",", "ngpus_per_node", ",", "args", ")", ":", "\n", "    ", "args", ".", "gpu", "=", "gpu", "\n", "\n", "# suppress printing if not master", "\n", "if", "args", ".", "multiprocessing_distributed", "and", "args", ".", "gpu", "!=", "0", ":", "\n", "        ", "def", "print_pass", "(", "*", "args", ")", ":", "\n", "            ", "pass", "\n", "", "builtins", ".", "print", "=", "print_pass", "\n", "\n", "", "if", "args", ".", "gpu", "is", "not", "None", ":", "\n", "        ", "print", "(", "\"Use GPU: {} for training\"", ".", "format", "(", "args", ".", "gpu", ")", ")", "\n", "\n", "", "if", "args", ".", "distributed", ":", "\n", "        ", "if", "args", ".", "dist_url", "==", "\"env://\"", "and", "args", ".", "rank", "==", "-", "1", ":", "\n", "            ", "args", ".", "rank", "=", "int", "(", "os", ".", "environ", "[", "\"RANK\"", "]", ")", "\n", "", "if", "args", ".", "multiprocessing_distributed", ":", "\n", "# For multiprocessing distributed training, rank needs to be the", "\n", "# global rank among all the processes", "\n", "            ", "args", ".", "rank", "=", "args", ".", "rank", "*", "ngpus_per_node", "+", "gpu", "\n", "", "dist", ".", "init_process_group", "(", "backend", "=", "args", ".", "dist_backend", ",", "init_method", "=", "args", ".", "dist_url", ",", "\n", "world_size", "=", "args", ".", "world_size", ",", "rank", "=", "args", ".", "rank", ")", "\n", "", "if", "args", ".", "rank", "==", "0", ":", "\n", "       ", "configure", "(", "os", ".", "path", ".", "join", "(", "'./exp'", ",", "args", ".", "exp_name", ")", ")", "\n", "\n", "# create model", "\n", "", "model_patch", "=", "moco", ".", "builder_v3", ".", "MoCo", "(", "\n", "Encoder", ",", "\n", "args", ".", "num_patch", ",", "args", ".", "moco_dim", ",", "args", ".", "moco_k_patch", ",", "args", ".", "moco_m", ",", "args", ".", "moco_t", ",", "args", ".", "mlp", ")", "\n", "\n", "model_graph", "=", "moco", ".", "builder_graph", ".", "MoCo", "(", "\n", "GraphNet", ",", "args", ".", "gpu", ",", "\n", "args", ".", "moco_dim", ",", "args", ".", "moco_k_graph", ",", "args", ".", "moco_m", ",", "args", ".", "moco_t", ",", "args", ".", "mlp", ")", "\n", "\n", "if", "args", ".", "distributed", ":", "\n", "# For multiprocessing distributed, DistributedDataParallel constructor", "\n", "# should always set the single device scope, otherwise,", "\n", "# DistributedDataParallel will use all available devices.", "\n", "        ", "if", "args", ".", "gpu", "is", "not", "None", ":", "\n", "            ", "torch", ".", "cuda", ".", "set_device", "(", "args", ".", "gpu", ")", "\n", "model_patch", ".", "cuda", "(", "args", ".", "gpu", ")", "\n", "model_graph", ".", "cuda", "(", "args", ".", "gpu", ")", "\n", "# When using a single GPU per process and per", "\n", "# DistributedDataParallel, we need to divide the batch size", "\n", "# ourselves based on the total number of GPUs we have", "\n", "args", ".", "batch_size_patch", "=", "int", "(", "args", ".", "batch_size_patch", "/", "ngpus_per_node", ")", "\n", "args", ".", "batch_size_graph", "=", "int", "(", "args", ".", "batch_size_graph", "/", "ngpus_per_node", ")", "\n", "args", ".", "workers_patch", "=", "int", "(", "(", "args", ".", "workers_patch", "+", "ngpus_per_node", "-", "1", ")", "/", "ngpus_per_node", ")", "\n", "args", ".", "workers_graph", "=", "int", "(", "(", "args", ".", "workers_graph", "+", "ngpus_per_node", "-", "1", ")", "/", "ngpus_per_node", ")", "\n", "model_patch", "=", "torch", ".", "nn", ".", "parallel", ".", "DistributedDataParallel", "(", "model_patch", ",", "device_ids", "=", "[", "args", ".", "gpu", "]", ")", "\n", "model_graph", "=", "torch", ".", "nn", ".", "parallel", ".", "DistributedDataParallel", "(", "model_graph", ",", "device_ids", "=", "[", "args", ".", "gpu", "]", ",", "find_unused_parameters", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "model", ".", "cuda", "(", ")", "\n", "# DistributedDataParallel will divide and allocate batch_size to all", "\n", "# available GPUs if device_ids are not set", "\n", "model", "=", "torch", ".", "nn", ".", "parallel", ".", "DistributedDataParallel", "(", "model", ")", "\n", "", "", "elif", "args", ".", "gpu", "is", "not", "None", ":", "\n", "        ", "torch", ".", "cuda", ".", "set_device", "(", "args", ".", "gpu", ")", "\n", "model", "=", "model", ".", "cuda", "(", "args", ".", "gpu", ")", "\n", "# comment out the following line for debugging", "\n", "raise", "NotImplementedError", "(", "\"Only DistributedDataParallel is supported.\"", ")", "\n", "", "else", ":", "\n", "# AllGather implementation (batch shuffle, queue update, etc.) in", "\n", "# this code only supports DistributedDataParallel.", "\n", "        ", "raise", "NotImplementedError", "(", "\"Only DistributedDataParallel is supported.\"", ")", "\n", "\n", "# define loss function (criterion) and optimizer", "\n", "", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", ")", ".", "cuda", "(", "args", ".", "gpu", ")", "\n", "\n", "optimizer_patch", "=", "torch", ".", "optim", ".", "SGD", "(", "model_patch", ".", "parameters", "(", ")", ",", "args", ".", "lr", ",", "\n", "momentum", "=", "args", ".", "momentum", ",", "\n", "weight_decay", "=", "args", ".", "weight_decay", ")", "\n", "optimizer_graph", "=", "torch", ".", "optim", ".", "SGD", "(", "model_graph", ".", "parameters", "(", ")", ",", "args", ".", "lr", ",", "\n", "momentum", "=", "args", ".", "momentum", ",", "\n", "weight_decay", "=", "args", ".", "weight_decay", ")", "\n", "# save the initial model", "\n", "if", "not", "args", ".", "resume", ":", "\n", "        ", "save_checkpoint", "(", "{", "\n", "'epoch'", ":", "0", ",", "\n", "'arch'", ":", "args", ".", "arch", ",", "\n", "'state_dict'", ":", "model_patch", ".", "state_dict", "(", ")", ",", "\n", "'optimizer'", ":", "optimizer_patch", ".", "state_dict", "(", ")", ",", "\n", "}", ",", "is_best", "=", "False", ",", "\n", "filename", "=", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "join", "(", "'./exp'", ",", "args", ".", "exp_name", ")", ",", "'checkpoint_patch_init.pth.tar'", ")", ")", "\n", "save_checkpoint", "(", "{", "\n", "'epoch'", ":", "0", ",", "\n", "'arch'", ":", "args", ".", "arch", ",", "\n", "'state_dict'", ":", "model_graph", ".", "state_dict", "(", ")", ",", "\n", "'optimizer'", ":", "optimizer_graph", ".", "state_dict", "(", ")", ",", "\n", "}", ",", "is_best", "=", "False", ",", "\n", "filename", "=", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "join", "(", "'./exp'", ",", "args", ".", "exp_name", ")", ",", "'checkpoint_graph_init.pth.tar'", ")", ")", "\n", "\n", "# optionally resume from a checkpoint", "\n", "", "if", "args", ".", "resume", ":", "\n", "        ", "if", "os", ".", "path", ".", "isfile", "(", "args", ".", "resume", ")", ":", "\n", "            ", "print", "(", "\"=> loading checkpoint '{}'\"", ".", "format", "(", "args", ".", "resume", ")", ")", "\n", "if", "args", ".", "gpu", "is", "None", ":", "\n", "                ", "checkpoint_patch", "=", "torch", ".", "load", "(", "args", ".", "resume", ")", "\n", "checkpoint_graph", "=", "torch", ".", "load", "(", "args", ".", "resume_graph", ")", "\n", "", "else", ":", "\n", "# Map model to be loaded to specified single gpu.", "\n", "                ", "loc", "=", "'cuda:{}'", ".", "format", "(", "args", ".", "gpu", ")", "\n", "checkpoint_patch", "=", "torch", ".", "load", "(", "args", ".", "resume", ",", "map_location", "=", "loc", ")", "\n", "checkpoint_graph", "=", "torch", ".", "load", "(", "args", ".", "resume_graph", ",", "map_location", "=", "loc", ")", "\n", "", "args", ".", "start_epoch", "=", "checkpoint_patch", "[", "'epoch'", "]", "\n", "model_patch", ".", "load_state_dict", "(", "checkpoint_patch", "[", "'state_dict'", "]", ")", "\n", "model_graph", ".", "load_state_dict", "(", "checkpoint_graph", "[", "'state_dict'", "]", ")", "\n", "optimizer_patch", ".", "load_state_dict", "(", "checkpoint_patch", "[", "'optimizer'", "]", ")", "\n", "optimizer_graph", ".", "load_state_dict", "(", "checkpoint_graph", "[", "'optimizer'", "]", ")", "\n", "print", "(", "\"=> loaded checkpoint '{}' (epoch {})\"", "\n", ".", "format", "(", "args", ".", "resume", ",", "checkpoint_patch", "[", "'epoch'", "]", ")", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "\"=> no checkpoint found at '{}'\"", ".", "format", "(", "args", ".", "resume", ")", ")", "\n", "exit", "(", ")", "\n", "\n", "", "", "transform_re", "=", "Rand3DElastic", "(", "mode", "=", "'bilinear'", ",", "prob", "=", "1.0", ",", "\n", "sigma_range", "=", "(", "8", ",", "12", ")", ",", "\n", "magnitude_range", "=", "(", "0", ",", "1024", "+", "240", ")", ",", "#[-1024, 240] -> [0, 1024+240]", "\n", "spatial_size", "=", "(", "32", ",", "32", ",", "32", ")", ",", "\n", "translate_range", "=", "(", "12", ",", "12", ",", "12", ")", ",", "\n", "rotate_range", "=", "(", "np", ".", "pi", "/", "18", ",", "np", ".", "pi", "/", "18", ",", "np", ".", "pi", "/", "18", ")", ",", "\n", "scale_range", "=", "(", "0.1", ",", "0.1", ",", "0.1", ")", ",", "\n", "padding_mode", "=", "'border'", ",", "\n", "device", "=", "torch", ".", "device", "(", "'cuda:'", "+", "str", "(", "args", ".", "gpu", ")", ")", ")", "\n", "transform_rgn", "=", "RandGaussianNoise", "(", "prob", "=", "0.25", ",", "mean", "=", "0.0", ",", "std", "=", "50", ")", "\n", "transform_rac", "=", "RandAdjustContrast", "(", "prob", "=", "0.25", ")", "\n", "\n", "train_tratransforms", "=", "Compose", "(", "[", "transform_rac", ",", "transform_rgn", ",", "transform_re", "]", ")", "\n", "\n", "train_dataset_patch", "=", "COPD_dataset_patch", "(", "\"train\"", ",", "args", ",", "moco", ".", "loader", ".", "TwoCropsTransform", "(", "train_tratransforms", ")", ")", "\n", "train_dataset_graph", "=", "COPD_dataset_graph", "(", "\"train\"", ",", "args", ",", "moco", ".", "loader", ".", "TwoCropsTransform", "(", "train_tratransforms", ")", ")", "\n", "\n", "if", "args", ".", "distributed", ":", "\n", "        ", "train_sampler_patch", "=", "torch", ".", "utils", ".", "data", ".", "distributed", ".", "DistributedSampler", "(", "train_dataset_patch", ")", "\n", "train_sampler_graph", "=", "torch", ".", "utils", ".", "data", ".", "distributed", ".", "DistributedSampler", "(", "train_dataset_graph", ")", "\n", "", "else", ":", "\n", "        ", "train_sampler", "=", "None", "\n", "\n", "", "train_loader_patch", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "train_dataset_patch", ",", "batch_size", "=", "args", ".", "batch_size_patch", ",", "shuffle", "=", "(", "train_sampler_patch", "is", "None", ")", ",", "\n", "num_workers", "=", "args", ".", "workers_patch", ",", "pin_memory", "=", "True", ",", "sampler", "=", "train_sampler_patch", ",", "drop_last", "=", "True", ")", "\n", "train_loader_graph", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "train_dataset_graph", ",", "batch_size", "=", "args", ".", "batch_size_graph", ",", "shuffle", "=", "(", "train_sampler_graph", "is", "None", ")", ",", "\n", "num_workers", "=", "args", ".", "workers_graph", ",", "pin_memory", "=", "True", ",", "sampler", "=", "train_sampler_graph", ",", "drop_last", "=", "True", ")", "\n", "\n", "for", "epoch", "in", "range", "(", "args", ".", "start_epoch", ",", "args", ".", "epochs", ")", ":", "\n", "        ", "if", "args", ".", "distributed", ":", "\n", "            ", "train_sampler_patch", ".", "set_epoch", "(", "epoch", ")", "\n", "", "adjust_learning_rate", "(", "optimizer_patch", ",", "epoch", ",", "args", ")", "\n", "# train for one epoch", "\n", "train_patch", "(", "train_loader_patch", ",", "model_patch", ",", "criterion", ",", "optimizer_patch", ",", "epoch", ",", "args", ")", "\n", "# save model for every epoch", "\n", "if", "not", "args", ".", "multiprocessing_distributed", "or", "(", "args", ".", "multiprocessing_distributed", "\n", "and", "args", ".", "rank", "%", "ngpus_per_node", "==", "0", ")", ":", "\n", "            ", "save_checkpoint", "(", "{", "\n", "'epoch'", ":", "epoch", "+", "1", ",", "\n", "'arch'", ":", "args", ".", "arch", ",", "\n", "'state_dict'", ":", "model_patch", ".", "state_dict", "(", ")", ",", "\n", "'optimizer'", ":", "optimizer_patch", ".", "state_dict", "(", ")", ",", "\n", "}", ",", "is_best", "=", "False", ",", "filename", "=", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "join", "(", "'./exp'", ",", "args", ".", "exp_name", ")", ",", "'checkpoint_patch_{:04d}.pth.tar'", ".", "format", "(", "epoch", ")", ")", ")", "\n", "\n", "", "for", "sub_epoch", "in", "range", "(", "args", ".", "num_sub_epoch", ")", ":", "\n", "            ", "if", "args", ".", "distributed", ":", "\n", "                ", "train_sampler_graph", ".", "set_epoch", "(", "args", ".", "num_sub_epoch", "*", "epoch", "+", "sub_epoch", ")", "\n", "", "adjust_learning_rate", "(", "optimizer_graph", ",", "args", ".", "num_sub_epoch", "*", "epoch", "+", "sub_epoch", ",", "args", ")", "\n", "train_graph", "(", "train_loader_graph", ",", "model_graph", ",", "model_patch", ",", "criterion", ",", "optimizer_graph", ",", "args", ".", "num_sub_epoch", "*", "epoch", "+", "sub_epoch", ",", "args", ")", "\n", "if", "not", "args", ".", "multiprocessing_distributed", "or", "(", "args", ".", "multiprocessing_distributed", "\n", "and", "args", ".", "rank", "%", "ngpus_per_node", "==", "0", ")", ":", "\n", "                ", "save_checkpoint", "(", "{", "\n", "'epoch'", ":", "args", ".", "num_sub_epoch", "*", "epoch", "+", "sub_epoch", "+", "1", ",", "\n", "'arch'", ":", "args", ".", "arch", ",", "\n", "'state_dict'", ":", "model_graph", ".", "state_dict", "(", ")", ",", "\n", "'optimizer'", ":", "optimizer_graph", ".", "state_dict", "(", ")", ",", "\n", "}", ",", "is_best", "=", "False", ",", "filename", "=", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "join", "(", "'./exp'", ",", "args", ".", "exp_name", ")", ",", "'checkpoint_graph_{:04d}.pth.tar'", ".", "format", "(", "args", ".", "num_sub_epoch", "*", "epoch", "+", "sub_epoch", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.batmanlab_Context_Aware_SSL.None.train.train_graph": [[349, 416], ["train.AverageMeter", "train.AverageMeter", "train.AverageMeter", "train.AverageMeter", "train.AverageMeter", "len", "train.ProgressMeter", "model.train", "model.train", "model.train", "model_patch.eval", "time.time", "enumerate", "train.AverageMeter.update", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "model", "model", "model", "criterion", "train.accuracy", "train.AverageMeter.update", "train.AverageMeter.update", "train.AverageMeter.update", "optimizer.zero_grad", "criterion.backward", "optimizer.step", "train.AverageMeter.update", "time.time", "patch_loc.float().cuda.float().cuda", "adj.float().cuda.float().cuda", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "range", "criterion.item", "images[].size", "images[].size", "images[].size", "train.ProgressMeter.display_graph", "time.time", "torch.stack.append", "torch.stack.append", "time.time", "tensorboard_logger.log_value", "tensorboard_logger.log_value", "tensorboard_logger.log_value", "tensorboard_logger.log_value", "patch_loc.float().cuda.float", "adj.float().cuda.float", "model_patch.module.encoder_q", "model_patch.module.encoder_q", "[].cuda", "[].cuda"], "function", ["home.repos.pwc.inspect_result.batmanlab_Context_Aware_SSL.None.train.AverageMeter.update", "home.repos.pwc.inspect_result.batmanlab_Context_Aware_SSL.None.train.accuracy", "home.repos.pwc.inspect_result.batmanlab_Context_Aware_SSL.None.train.AverageMeter.update", "home.repos.pwc.inspect_result.batmanlab_Context_Aware_SSL.None.train.AverageMeter.update", "home.repos.pwc.inspect_result.batmanlab_Context_Aware_SSL.None.train.AverageMeter.update", "home.repos.pwc.inspect_result.batmanlab_Context_Aware_SSL.None.train.AverageMeter.update", "home.repos.pwc.inspect_result.batmanlab_Context_Aware_SSL.None.train.ProgressMeter.display_graph"], ["", "", "", "", "def", "train_graph", "(", "train_loader", ",", "model", ",", "model_patch", ",", "criterion", ",", "optimizer", ",", "epoch", ",", "args", ")", ":", "\n", "    ", "batch_time", "=", "AverageMeter", "(", "'Time'", ",", "':6.3f'", ")", "\n", "data_time", "=", "AverageMeter", "(", "'Data'", ",", "':6.3f'", ")", "\n", "losses", "=", "AverageMeter", "(", "'Loss'", ",", "':.4e'", ")", "\n", "top1", "=", "AverageMeter", "(", "'Acc@1'", ",", "':6.2f'", ")", "\n", "top5", "=", "AverageMeter", "(", "'Acc@5'", ",", "':6.2f'", ")", "\n", "\n", "len_loader", "=", "len", "(", "train_loader", ")", "\n", "progress", "=", "ProgressMeter", "(", "\n", "len_loader", ",", "\n", "[", "batch_time", ",", "data_time", ",", "losses", ",", "top1", ",", "top5", "]", ",", "\n", "prefix", "=", "\"Epoch: [{}]\"", ".", "format", "(", "epoch", ")", ")", "\n", "\n", "# switch to train mode", "\n", "model", ".", "train", "(", ")", "\n", "model_patch", ".", "eval", "(", ")", "\n", "model_patch", ".", "module", ".", "encoder_q", ".", "flag", "=", "1", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "for", "i", ",", "data", "in", "enumerate", "(", "train_loader", ",", "0", ")", ":", "\n", "# measure data loading time", "\n", "        ", "data_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "images", ",", "patch_loc", ",", "adj", "=", "data", "\n", "if", "args", ".", "gpu", "is", "not", "None", ":", "\n", "            ", "patch_loc", "=", "patch_loc", ".", "float", "(", ")", ".", "cuda", "(", "args", ".", "gpu", ",", "non_blocking", "=", "True", ")", "\n", "adj", "=", "adj", ".", "float", "(", ")", ".", "cuda", "(", "args", ".", "gpu", ",", "non_blocking", "=", "True", ")", "\n", "\n", "# extract feature", "\n", "", "graph_batch_0", "=", "[", "]", "\n", "graph_batch_1", "=", "[", "]", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "args", ".", "batch_size_graph", ")", ":", "\n", "                ", "graph_batch_0", ".", "append", "(", "model_patch", ".", "module", ".", "encoder_q", "(", "images", "[", "0", "]", "[", "j", "]", ".", "cuda", "(", "args", ".", "gpu", ",", "non_blocking", "=", "True", ")", ",", "patch_loc", "[", "j", "]", ")", "[", ":", ",", ":", "args", ".", "moco_dim", "]", ")", "# img in:[num_patch,1,size,size,size], output:[num_patch,moco_dim]", "\n", "graph_batch_1", ".", "append", "(", "model_patch", ".", "module", ".", "encoder_q", "(", "images", "[", "1", "]", "[", "j", "]", ".", "cuda", "(", "args", ".", "gpu", ",", "non_blocking", "=", "True", ")", ",", "patch_loc", "[", "j", "]", ")", "[", ":", ",", ":", "args", ".", "moco_dim", "]", ")", "# patch_loc in:[num_patch,3]", "\n", "", "", "graph_batch_0", "=", "torch", ".", "stack", "(", "graph_batch_0", ")", "\n", "graph_batch_1", "=", "torch", ".", "stack", "(", "graph_batch_1", ")", "# output:[batch,num_patch,moco_dim]", "\n", "#print(graph_batch_0.shape)", "\n", "#print(adj.shape)", "\n", "# compute output", "\n", "output", ",", "target", "=", "model", "(", "im_q", "=", "[", "graph_batch_0", ",", "adj", "]", ",", "im_k", "=", "[", "graph_batch_1", ",", "adj", "]", ")", "# adj:[batch,num_patch,num_patch]", "\n", "loss", "=", "criterion", "(", "output", ",", "target", ")", "\n", "\n", "# acc1/acc5 are (K+1)-way contrast classifier accuracy", "\n", "# measure accuracy and record loss", "\n", "acc1", ",", "acc5", "=", "accuracy", "(", "output", ",", "target", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "losses", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "images", "[", "0", "]", ".", "size", "(", "0", ")", ")", "\n", "top1", ".", "update", "(", "acc1", "[", "0", "]", ",", "images", "[", "0", "]", ".", "size", "(", "0", ")", ")", "\n", "top5", ".", "update", "(", "acc5", "[", "0", "]", ",", "images", "[", "0", "]", ".", "size", "(", "0", ")", ")", "\n", "\n", "# compute gradient and do SGD step", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "# measure elapsed time", "\n", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "if", "i", "%", "args", ".", "print_freq", "==", "0", ":", "\n", "            ", "progress", ".", "display_graph", "(", "i", ")", "\n", "if", "args", ".", "rank", "==", "0", ":", "\n", "                ", "log_value", "(", "'graph/epoch'", ",", "epoch", ",", "i", "+", "epoch", "*", "len_loader", ")", "\n", "log_value", "(", "'graph/loss'", ",", "progress", ".", "meters", "[", "2", "]", ".", "avg", ",", "i", "+", "epoch", "*", "len_loader", ")", "\n", "log_value", "(", "'graph/acc_1'", ",", "progress", ".", "meters", "[", "3", "]", ".", "avg", ",", "i", "+", "epoch", "*", "len_loader", ")", "\n", "log_value", "(", "'graph/acc_5'", ",", "progress", ".", "meters", "[", "4", "]", ".", "avg", ",", "i", "+", "epoch", "*", "len_loader", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.batmanlab_Context_Aware_SSL.None.train.train_patch": [[417, 483], ["train.AverageMeter", "train.AverageMeter", "train.AverageMeter", "train.AverageMeter", "train.AverageMeter", "train.ProgressMeter", "model.train", "model.train", "model.train", "time.time", "len", "print", "enumerate", "len", "train.AverageMeter.update", "model", "model", "model", "criterion", "train.accuracy", "train.AverageMeter.update", "train.AverageMeter.update", "train.AverageMeter.update", "optimizer.zero_grad", "criterion.backward", "optimizer.step", "train.AverageMeter.update", "time.time", "train_loader.dataset.set_patch_idx", "images[].cuda", "images[].cuda", "patch_loc_idx.float().cuda.float().cuda", "criterion.item", "images[].size", "images[].size", "images[].size", "train.ProgressMeter.display_patch", "time.time", "time.time", "tensorboard_logger.log_value", "tensorboard_logger.log_value", "tensorboard_logger.log_value", "tensorboard_logger.log_value", "patch_loc_idx.float().cuda.float"], "function", ["home.repos.pwc.inspect_result.batmanlab_Context_Aware_SSL.None.train.AverageMeter.update", "home.repos.pwc.inspect_result.batmanlab_Context_Aware_SSL.None.train.accuracy", "home.repos.pwc.inspect_result.batmanlab_Context_Aware_SSL.None.train.AverageMeter.update", "home.repos.pwc.inspect_result.batmanlab_Context_Aware_SSL.None.train.AverageMeter.update", "home.repos.pwc.inspect_result.batmanlab_Context_Aware_SSL.None.train.AverageMeter.update", "home.repos.pwc.inspect_result.batmanlab_Context_Aware_SSL.None.train.AverageMeter.update", "home.repos.pwc.inspect_result.batmanlab_Context_Aware_SSL.None.dataset_train_patch.COPD_dataset.set_patch_idx", "home.repos.pwc.inspect_result.batmanlab_Context_Aware_SSL.None.train.ProgressMeter.display_patch"], ["", "", "", "", "def", "train_patch", "(", "train_loader", ",", "model", ",", "criterion", ",", "optimizer", ",", "epoch", ",", "args", ")", ":", "\n", "    ", "batch_time", "=", "AverageMeter", "(", "'Time'", ",", "':6.3f'", ")", "\n", "data_time", "=", "AverageMeter", "(", "'Data'", ",", "':6.3f'", ")", "\n", "losses", "=", "AverageMeter", "(", "'Loss'", ",", "':.4e'", ")", "\n", "top1", "=", "AverageMeter", "(", "'Acc@1'", ",", "':6.2f'", ")", "\n", "top5", "=", "AverageMeter", "(", "'Acc@5'", ",", "':6.2f'", ")", "\n", "\n", "dataset_len", "=", "train_loader", ".", "dataset", ".", "sid_list_len", "\n", "progress", "=", "ProgressMeter", "(", "\n", "len", "(", "train_loader", ")", ",", "\n", "[", "batch_time", ",", "data_time", ",", "losses", ",", "top1", ",", "top5", "]", ",", "\n", "prefix", "=", "\"Epoch: [{}]\"", ".", "format", "(", "epoch", ")", ")", "\n", "\n", "# switch to train mode", "\n", "model", ".", "train", "(", ")", "\n", "model", ".", "module", ".", "encoder_q", ".", "flag", "=", "0", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "num_iter_epoch", "=", "len", "(", "train_loader", ")", "\n", "num_iter_sub_epoch", "=", "num_iter_epoch", "//", "args", ".", "num_patch", "\n", "print", "(", "\"num_iter_sub_epoch:\"", ",", "num_iter_sub_epoch", ")", "\n", "\n", "patch_idx", "=", "-", "1", "# init patch_idx", "\n", "for", "i", ",", "data", "in", "enumerate", "(", "train_loader", ",", "0", ")", ":", "\n", "# measure data loading time", "\n", "        ", "data_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "if", "i", "%", "num_iter_sub_epoch", "==", "0", ":", "\n", "            ", "patch_idx", "+=", "1", "\n", "if", "patch_idx", "==", "args", ".", "num_patch", ":", "# tail issue", "\n", "                ", "break", "\n", "", "train_loader", ".", "dataset", ".", "set_patch_idx", "(", "patch_idx", ")", "\n", "\n", "", "images", ",", "patch_loc_idx", ",", "adj", "=", "data", "\n", "\n", "if", "args", ".", "gpu", "is", "not", "None", ":", "\n", "            ", "images", "[", "0", "]", "=", "images", "[", "0", "]", ".", "cuda", "(", "args", ".", "gpu", ",", "non_blocking", "=", "True", ")", "\n", "images", "[", "1", "]", "=", "images", "[", "1", "]", ".", "cuda", "(", "args", ".", "gpu", ",", "non_blocking", "=", "True", ")", "\n", "patch_loc_idx", "=", "patch_loc_idx", ".", "float", "(", ")", ".", "cuda", "(", "args", ".", "gpu", ",", "non_blocking", "=", "True", ")", "\n", "\n", "# compute output", "\n", "", "output", ",", "target", "=", "model", "(", "patch_idx", "=", "patch_idx", ",", "im_q", "=", "[", "images", "[", "0", "]", ",", "patch_loc_idx", "]", ",", "im_k", "=", "[", "images", "[", "1", "]", ",", "patch_loc_idx", "]", ")", "\n", "loss", "=", "criterion", "(", "output", ",", "target", ")", "\n", "\n", "# acc1/acc5 are (K+1)-way contrast classifier accuracy", "\n", "# measure accuracy and record loss", "\n", "acc1", ",", "acc5", "=", "accuracy", "(", "output", ",", "target", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "losses", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "images", "[", "0", "]", ".", "size", "(", "0", ")", ")", "\n", "top1", ".", "update", "(", "acc1", "[", "0", "]", ",", "images", "[", "0", "]", ".", "size", "(", "0", ")", ")", "\n", "top5", ".", "update", "(", "acc5", "[", "0", "]", ",", "images", "[", "0", "]", ".", "size", "(", "0", ")", ")", "\n", "\n", "# compute gradient and do SGD step", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "# measure elapsed time", "\n", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "if", "(", "i", "%", "args", ".", "print_freq", "==", "0", ")", "and", "(", "i", ">", "0", ")", ":", "\n", "            ", "progress", ".", "display_patch", "(", "i", ",", "patch_idx", ")", "\n", "if", "args", ".", "rank", "==", "0", ":", "\n", "                ", "step", "=", "i", "+", "num_iter_epoch", "*", "epoch", "\n", "log_value", "(", "'patch/epoch'", ",", "epoch", ",", "step", ")", "\n", "log_value", "(", "'patch/loss'", ",", "progress", ".", "meters", "[", "2", "]", ".", "avg", ",", "step", ")", "\n", "log_value", "(", "'patch/acc_1'", ",", "progress", ".", "meters", "[", "3", "]", ".", "avg", ",", "step", ")", "\n", "log_value", "(", "'patch/acc_5'", ",", "progress", ".", "meters", "[", "4", "]", ".", "avg", ",", "step", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.batmanlab_Context_Aware_SSL.None.train.save_checkpoint": [[484, 488], ["torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "shutil.copyfile"], "function", ["None"], ["", "", "", "", "def", "save_checkpoint", "(", "state", ",", "is_best", ",", "filename", "=", "'checkpoint.pth.tar'", ")", ":", "\n", "    ", "torch", ".", "save", "(", "state", ",", "filename", ")", "\n", "if", "is_best", ":", "\n", "        ", "shutil", ".", "copyfile", "(", "filename", ",", "'model_best.pth.tar'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.batmanlab_Context_Aware_SSL.None.train.adjust_learning_rate": [[538, 548], ["math.cos"], "function", ["None"], ["", "", "def", "adjust_learning_rate", "(", "optimizer", ",", "epoch", ",", "args", ")", ":", "\n", "    ", "\"\"\"Decay the learning rate based on schedule\"\"\"", "\n", "lr", "=", "args", ".", "lr", "\n", "if", "args", ".", "cos", ":", "# cosine lr schedule", "\n", "        ", "lr", "*=", "0.5", "*", "(", "1.", "+", "math", ".", "cos", "(", "math", ".", "pi", "*", "epoch", "/", "args", ".", "epochs", ")", ")", "\n", "", "else", ":", "# stepwise lr schedule", "\n", "        ", "for", "milestone", "in", "args", ".", "schedule", ":", "\n", "            ", "lr", "*=", "0.1", "if", "epoch", ">=", "milestone", "else", "1.", "\n", "", "", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "        ", "param_group", "[", "'lr'", "]", "=", "lr", "\n", "\n"]], "home.repos.pwc.inspect_result.batmanlab_Context_Aware_SSL.None.train.accuracy": [[550, 565], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "max", "target.size", "output.topk", "pred.t.t", "pred.t.eq", "target.view().expand_as", "correct[].view().float().sum", "res.append", "correct[].view().float().sum.mul_", "target.view", "correct[].view().float", "correct[].view"], "function", ["None"], ["", "", "def", "accuracy", "(", "output", ",", "target", ",", "topk", "=", "(", "1", ",", ")", ")", ":", "\n", "    ", "\"\"\"Computes the accuracy over the k top predictions for the specified values of k\"\"\"", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "maxk", "=", "max", "(", "topk", ")", "\n", "batch_size", "=", "target", ".", "size", "(", "0", ")", "\n", "\n", "_", ",", "pred", "=", "output", ".", "topk", "(", "maxk", ",", "1", ",", "True", ",", "True", ")", "\n", "pred", "=", "pred", ".", "t", "(", ")", "\n", "correct", "=", "pred", ".", "eq", "(", "target", ".", "view", "(", "1", ",", "-", "1", ")", ".", "expand_as", "(", "pred", ")", ")", "\n", "\n", "res", "=", "[", "]", "\n", "for", "k", "in", "topk", ":", "\n", "            ", "correct_k", "=", "correct", "[", ":", "k", "]", ".", "view", "(", "-", "1", ")", ".", "float", "(", ")", ".", "sum", "(", "0", ",", "keepdim", "=", "True", ")", "\n", "res", ".", "append", "(", "correct_k", ".", "mul_", "(", "100.0", "/", "batch_size", ")", ")", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.batmanlab_Context_Aware_SSL.None.test.main": [[24, 42], ["parser.parse_args", "random.seed", "torch.manual_seed", "torch.manual_seed", "os.makedirs", "test.main_worker", "open", "easydict.EasyDict", "os.path.join", "json.load", "easydict.EasyDict.checkpoint_graph.split", "easydict.EasyDict.checkpoint_patch.split"], "function", ["home.repos.pwc.inspect_result.batmanlab_Context_Aware_SSL.None.test.main_worker"], ["def", "main", "(", ")", ":", "\n", "# read configurations", "\n", "    ", "p", "=", "parser", ".", "parse_args", "(", ")", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "p", ".", "exp_dir", ",", "'configs.json'", ")", ")", "as", "f", ":", "\n", "        ", "args", "=", "edict", "(", "json", ".", "load", "(", "f", ")", ")", "\n", "", "args", ".", "exp_dir", "=", "p", ".", "exp_dir", "\n", "args", ".", "checkpoint_patch", "=", "p", ".", "checkpoint_patch", "\n", "args", ".", "checkpoint_graph", "=", "p", ".", "checkpoint_graph", "\n", "args", ".", "batch_size", "=", "p", ".", "batch_size", "\n", "args", ".", "root_dir", "=", "\"/pghbio/dbmi/batmanlab/lisun/copd/gnn_shared/data/patch_data_32_6_reg/\"", "\n", "\n", "# Set random seed", "\n", "random", ".", "seed", "(", "args", ".", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "True", "\n", "\n", "os", ".", "makedirs", "(", "args", ".", "exp_dir", "+", "args", ".", "checkpoint_patch", ".", "split", "(", "'.'", ")", "[", "0", "]", "+", "\"_\"", "+", "args", ".", "checkpoint_graph", ".", "split", "(", "'.'", ")", "[", "0", "]", ",", "exist_ok", "=", "True", ")", "\n", "main_worker", "(", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.batmanlab_Context_Aware_SSL.None.test.main_worker": [[43, 113], ["utils.cond_encoder.Encoder", "torch.nn.Sequential", "torch.nn.Sequential", "list", "torch.nn.DataParallel().cuda.load_state_dict", "print", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda.eval", "utils.gcn_eval.GraphNet", "torch.nn.Sequential", "torch.nn.Sequential", "list", "model2.cuda.load_state_dict", "print", "model2.cuda.cuda", "model2.cuda.eval", "dataset_test_full.COPD_dataset", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "numpy.empty", "numpy.empty", "enumerate", "numpy.save", "numpy.save", "print", "torch.load", "torch.load", "state_dict.keys", "torch.load", "torch.load", "state_dict.keys", "images[].float().cuda", "patch_loc_idx[].float().cuda", "adj.cuda.cuda", "model2.cpu().numpy", "k.startswith", "torch.nn.DataParallel", "torch.nn.DataParallel", "k.startswith", "len", "len", "print", "torch.no_grad", "torch.no_grad", "torch.nn.DataParallel().cuda.", "torch_geometric.data.Batch.from_data_list", "Batch.from_data_list.batch.cuda", "model2.cuda.", "k.startswith", "k.startswith", "len", "images[].float", "patch_loc_idx[].float", "print", "torch_geometric.data.Data", "print", "model2.cpu", "len", "len", "args.checkpoint_graph.split", "args.checkpoint_graph.split", "len", "len", "torch_geometric.utils.sparse.dense_to_sparse", "args.checkpoint_patch.split", "args.checkpoint_patch.split"], "function", ["None"], ["", "def", "main_worker", "(", "args", ")", ":", "\n", "\n", "    ", "model", "=", "Encoder", "(", "args", ".", "moco_dim", ")", "\n", "model", ".", "fc", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "state_dict", "=", "torch", ".", "load", "(", "args", ".", "exp_dir", "+", "\"checkpoint_patch_\"", "+", "args", ".", "checkpoint_patch", "+", "\".pth.tar\"", ")", "[", "'state_dict'", "]", "\n", "for", "k", "in", "list", "(", "state_dict", ".", "keys", "(", ")", ")", ":", "\n", "# retain only encoder_q", "\n", "        ", "if", "k", ".", "startswith", "(", "'module.encoder_q'", ")", "and", "not", "k", ".", "startswith", "(", "'module.encoder_q.fc'", ")", ":", "\n", "# remove prefix", "\n", "            ", "state_dict", "[", "k", "[", "len", "(", "\"module.encoder_q.\"", ")", ":", "]", "]", "=", "state_dict", "[", "k", "]", "\n", "# delete renamed or unused k", "\n", "", "del", "state_dict", "[", "k", "]", "\n", "\n", "", "model", ".", "load_state_dict", "(", "state_dict", ")", "\n", "print", "(", "\"CNN Weights loaded:\"", ",", "args", ".", "exp_dir", "+", "\"checkpoint_patch_\"", "+", "args", ".", "checkpoint_patch", "+", "\".pth.tar\"", ")", "\n", "model", "=", "torch", ".", "nn", ".", "DataParallel", "(", "model", ")", ".", "cuda", "(", ")", "\n", "model", ".", "eval", "(", ")", "\n", "\n", "model2", "=", "GraphNet", "(", "args", ".", "moco_dim", ")", "\n", "model2", ".", "fc", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "#dim_mlp = model2.fc.weight.shape[1]", "\n", "#model2.fc = nn.Sequential(nn.Linear(dim_mlp, dim_mlp), nn.ReLU(), model2.fc)", "\n", "state_dict", "=", "torch", ".", "load", "(", "args", ".", "exp_dir", "+", "\"checkpoint_graph_\"", "+", "args", ".", "checkpoint_graph", "+", "\".pth.tar\"", ")", "[", "'state_dict'", "]", "\n", "for", "k", "in", "list", "(", "state_dict", ".", "keys", "(", ")", ")", ":", "\n", "# retain only encoder_q", "\n", "        ", "if", "k", ".", "startswith", "(", "'module.encoder_q'", ")", "and", "not", "k", ".", "startswith", "(", "'module.encoder_q.fc'", ")", ":", "\n", "# remove prefix", "\n", "            ", "state_dict", "[", "k", "[", "len", "(", "\"module.encoder_q.\"", ")", ":", "]", "]", "=", "state_dict", "[", "k", "]", "\n", "# delete renamed or unused k", "\n", "", "del", "state_dict", "[", "k", "]", "\n", "\n", "", "model2", ".", "load_state_dict", "(", "state_dict", ")", "\n", "print", "(", "\"GNN Weights loaded:\"", ",", "args", ".", "exp_dir", "+", "\"checkpoint_graph_\"", "+", "args", ".", "checkpoint_graph", "+", "\".pth.tar\"", ")", "\n", "model2", "=", "model2", ".", "cuda", "(", ")", "\n", "#model2 = torch.nn.DataParallel(model2).cuda()", "\n", "model2", ".", "eval", "(", ")", "\n", "\n", "train_dataset", "=", "COPD_dataset", "(", "\"train\"", ",", "args", ")", "\n", "\n", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "train_dataset", ",", "batch_size", "=", "1", ",", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "4", ",", "drop_last", "=", "False", ")", "\n", "\n", "args", ".", "label_name", "=", "args", ".", "label_name", "+", "args", ".", "label_name_set2", "\n", "# train dataset", "\n", "pred_arr", "=", "np", ".", "empty", "(", "(", "len", "(", "train_dataset", ")", ",", "args", ".", "num_patch", ",", "args", ".", "moco_dim", ")", ")", "\n", "feature_arr", "=", "np", ".", "empty", "(", "(", "len", "(", "train_dataset", ")", ",", "len", "(", "args", ".", "label_name", ")", "+", "len", "(", "args", ".", "visual_score", ")", "+", "len", "(", "args", ".", "P2_Pheno", ")", ")", ")", "\n", "\n", "for", "i", ",", "batch", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "        ", "if", "i", "%", "10", "==", "0", ":", "\n", "            ", "print", "(", "'\\rPropagating batch %d'", "%", "i", ",", "end", "=", "''", ",", "flush", "=", "True", ")", "\n", "", "images", ",", "patch_loc_idx", ",", "adj", ",", "labels", "=", "batch", "\n", "images", "=", "images", "[", "0", "]", ".", "float", "(", ")", ".", "cuda", "(", ")", "\n", "patch_loc_idx", "=", "patch_loc_idx", "[", "0", "]", ".", "float", "(", ")", ".", "cuda", "(", ")", "\n", "adj", "=", "adj", ".", "cuda", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "pred", "=", "model", "(", "images", ",", "patch_loc_idx", ")", "\n", "if", "i", "==", "0", ":", "\n", "                ", "print", "(", "\"\\nCNN output shape:\"", ",", "pred", ".", "shape", ")", "\n", "", "batch", "=", "[", "Data", "(", "x", "=", "pred", "[", ":", ",", ":", "args", ".", "moco_dim", "]", ",", "edge_index", "=", "dense_to_sparse", "(", "adj", "[", "0", "]", ")", "[", "0", "]", ")", "]", "\n", "batch", "=", "Batch", ".", "from_data_list", "(", "batch", ")", "\n", "batch", ".", "batch", "=", "batch", ".", "batch", ".", "cuda", "(", ")", "\n", "pred", "=", "model2", "(", "batch", ")", "\n", "if", "i", "==", "0", ":", "\n", "                ", "print", "(", "\"GNN output shape:\"", ",", "pred", ".", "shape", ")", "\n", "", "", "pred_arr", "[", "i", ",", ":", ",", ":", "]", "=", "pred", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "feature_arr", "[", "i", ":", "i", "+", "1", ",", ":", "]", "=", "labels", "\n", "", "np", ".", "save", "(", "args", ".", "exp_dir", "+", "args", ".", "checkpoint_patch", ".", "split", "(", "'.'", ")", "[", "0", "]", "+", "\"_\"", "+", "args", ".", "checkpoint_graph", ".", "split", "(", "'.'", ")", "[", "0", "]", "+", "\"/pred_arr_full.npy\"", ",", "pred_arr", ")", "\n", "np", ".", "save", "(", "args", ".", "exp_dir", "+", "args", ".", "checkpoint_patch", ".", "split", "(", "'.'", ")", "[", "0", "]", "+", "\"_\"", "+", "args", ".", "checkpoint_graph", ".", "split", "(", "'.'", ")", "[", "0", "]", "+", "\"/feature_arr_full.npy\"", ",", "feature_arr", ")", "\n", "print", "(", "\"\\nEvaluation on full set finished.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.batmanlab_Context_Aware_SSL.None.dataset_test_full.COPD_dataset.__init__": [[11, 72], ["dict", "open", "open.readline().strip().split", "open.readlines", "open", "open.readline().strip().split", "open.readlines", "open.close", "open", "open.readline().strip().split", "open.readlines", "open.close", "glob.glob", "dataset_test_full.COPD_dataset.sid_list.sort", "numpy.load", "print", "numpy.asarray", "print", "line.strip().split.index", "line.strip().split", "range", "line.strip().split.index", "line.strip().split", "range", "line.strip().split.index", "line.strip().split", "range", "dataset_test_full.COPD_dataset.sid_list.append", "dataset_test_full.COPD_dataset.patch_loc.max", "len", "open.readline().strip", "len", "open.readline().strip", "len", "metric_list.append", "open.readline().strip", "len", "metric_list.append", "line.strip", "metric_list.append", "metric_list.append", "line.strip", "float", "line.strip", "float", "open.readline", "float", "open.readline", "len", "len", "open.readline", "len", "item.split", "item.split", "len"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "stage", ",", "cfg", ",", "transforms", "=", "default_transform", ")", ":", "\n", "        ", "self", ".", "cfg", "=", "cfg", "\n", "self", ".", "root_dir", "=", "cfg", ".", "root_dir", "\n", "self", ".", "metric_dict", "=", "dict", "(", ")", "# initialize metric dictionary", "\n", "self", ".", "transforms", "=", "transforms", "\n", "\n", "self", ".", "label_name", "=", "self", ".", "cfg", ".", "label_name", "+", "self", ".", "cfg", ".", "label_name_set2", "\n", "FILE", "=", "open", "(", "DATA_DIR", "+", "\"phase 1 Final 10K/phase 1 Pheno/Final10000_Phase1_Rev_28oct16.txt\"", ",", "\"r\"", ")", "\n", "mylist", "=", "FILE", ".", "readline", "(", ")", ".", "strip", "(", "\"\\n\"", ")", ".", "split", "(", "\"\\t\"", ")", "\n", "metric_idx", "=", "[", "mylist", ".", "index", "(", "label", ")", "for", "label", "in", "self", ".", "label_name", "]", "\n", "for", "line", "in", "FILE", ".", "readlines", "(", ")", ":", "\n", "            ", "mylist", "=", "line", ".", "strip", "(", "\"\\n\"", ")", ".", "split", "(", "\"\\t\"", ")", "\n", "tmp", "=", "[", "mylist", "[", "idx", "]", "for", "idx", "in", "metric_idx", "]", "\n", "if", "\"\"", "in", "tmp", "[", ":", "3", "]", ":", "\n", "                ", "continue", "\n", "", "metric_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "metric_idx", ")", ")", ":", "\n", "                ", "if", "tmp", "[", "i", "]", "==", "\"\"", ":", "\n", "                    ", "metric_list", ".", "append", "(", "-", "1024", ")", "\n", "", "else", ":", "\n", "                    ", "metric_list", ".", "append", "(", "float", "(", "tmp", "[", "i", "]", ")", ")", "\n", "", "", "self", ".", "metric_dict", "[", "mylist", "[", "0", "]", "]", "=", "metric_list", "+", "[", "-", "1024", ",", "-", "1024", ",", "-", "1024", "]", "\n", "", "FILE", "=", "open", "(", "DATA_DIR", "+", "\"CT scan datasets/CT visual scoring/COPDGene_CT_Visual_20JUL17.txt\"", ",", "\"r\"", ")", "\n", "mylist", "=", "FILE", ".", "readline", "(", ")", ".", "strip", "(", "\"\\n\"", ")", ".", "split", "(", "\"\\t\"", ")", "\n", "metric_idx", "=", "[", "mylist", ".", "index", "(", "label", ")", "for", "label", "in", "self", ".", "cfg", ".", "visual_score", "]", "\n", "for", "line", "in", "FILE", ".", "readlines", "(", ")", ":", "\n", "            ", "mylist", "=", "line", ".", "strip", "(", "\"\\n\"", ")", ".", "split", "(", "\"\\t\"", ")", "\n", "if", "mylist", "[", "0", "]", "not", "in", "self", ".", "metric_dict", ":", "\n", "                ", "continue", "\n", "", "tmp", "=", "[", "mylist", "[", "idx", "]", "for", "idx", "in", "metric_idx", "]", "\n", "metric_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "metric_idx", ")", ")", ":", "\n", "                ", "metric_list", ".", "append", "(", "float", "(", "tmp", "[", "i", "]", ")", ")", "\n", "", "self", ".", "metric_dict", "[", "mylist", "[", "0", "]", "]", "[", "-", "len", "(", "self", ".", "cfg", ".", "visual_score", ")", "-", "len", "(", "self", ".", "cfg", ".", "P2_Pheno", ")", ":", "-", "len", "(", "self", ".", "cfg", ".", "P2_Pheno", ")", "]", "=", "metric_list", "\n", "", "FILE", ".", "close", "(", ")", "\n", "FILE", "=", "open", "(", "DATA_DIR", "+", "'P1-P2 First 5K Long Data/Subject-flattened- one row per subject/First5000_P1P2_Pheno_Flat24sep16.txt'", ",", "'r'", ")", "\n", "mylist", "=", "FILE", ".", "readline", "(", ")", ".", "strip", "(", "\"\\n\"", ")", ".", "split", "(", "\"\\t\"", ")", "\n", "metric_idx", "=", "[", "mylist", ".", "index", "(", "label", ")", "for", "label", "in", "self", ".", "cfg", ".", "P2_Pheno", "]", "\n", "for", "line", "in", "FILE", ".", "readlines", "(", ")", ":", "\n", "            ", "mylist", "=", "line", ".", "strip", "(", "\"\\n\"", ")", ".", "split", "(", "\"\\t\"", ")", "\n", "if", "mylist", "[", "0", "]", "not", "in", "self", ".", "metric_dict", ":", "\n", "                ", "continue", "\n", "", "tmp", "=", "[", "mylist", "[", "idx", "]", "for", "idx", "in", "metric_idx", "]", "\n", "metric_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "metric_idx", ")", ")", ":", "\n", "                ", "metric_list", ".", "append", "(", "float", "(", "tmp", "[", "i", "]", ")", ")", "\n", "", "self", ".", "metric_dict", "[", "mylist", "[", "0", "]", "]", "[", "-", "len", "(", "self", ".", "cfg", ".", "P2_Pheno", ")", ":", "]", "=", "metric_list", "\n", "", "FILE", ".", "close", "(", ")", "\n", "\n", "self", ".", "sid_list", "=", "[", "]", "\n", "for", "item", "in", "glob", ".", "glob", "(", "self", ".", "cfg", ".", "root_dir", "+", "\"patch/\"", "+", "\"*_patch.npy\"", ")", ":", "\n", "            ", "if", "item", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "[", ":", "6", "]", "not", "in", "self", ".", "metric_dict", ":", "\n", "                ", "continue", "\n", "", "self", ".", "sid_list", ".", "append", "(", "item", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "[", ":", "-", "10", "]", ")", "\n", "", "self", ".", "sid_list", ".", "sort", "(", ")", "\n", "self", ".", "patch_loc", "=", "np", ".", "load", "(", "self", ".", "cfg", ".", "root_dir", "+", "\"19676E_INSP_STD_JHU_COPD_BSpline_Iso1_patch_loc.npy\"", ")", "\n", "self", ".", "patch_loc", "=", "self", ".", "patch_loc", "/", "self", ".", "patch_loc", ".", "max", "(", "0", ")", "# column-wise norm", "\n", "\n", "print", "(", "\"Fold: full\"", ")", "\n", "self", ".", "sid_list", "=", "np", ".", "asarray", "(", "self", ".", "sid_list", ")", "\n", "print", "(", "stage", "+", "\" dataset size:\"", ",", "len", "(", "self", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.batmanlab_Context_Aware_SSL.None.dataset_test_full.COPD_dataset.__len__": [[73, 75], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "sid_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.batmanlab_Context_Aware_SSL.None.dataset_test_full.COPD_dataset.__getitem__": [[77, 90], ["numpy.load", "dataset_test_full.COPD_dataset.transforms", "numpy.asarray", "numpy.load", "dataset_test_full.COPD_dataset.patch_loc.copy"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "img", "=", "np", ".", "load", "(", "self", ".", "root_dir", "+", "\"patch/\"", "+", "self", ".", "sid_list", "[", "idx", "]", "+", "\"_patch.npy\"", ")", "\n", "img", "=", "img", "+", "1024.", "\n", "img", "=", "self", ".", "transforms", "(", "img", ")", "\n", "img", "=", "img", "[", ":", ",", "None", ",", ":", ",", ":", ",", ":", "]", "/", "632.", "-", "1", "# Normalize to [-1,1], 632=(1024+240)/2", "\n", "\n", "key", "=", "self", ".", "sid_list", "[", "idx", "]", "[", ":", "6", "]", "\n", "label", "=", "np", ".", "asarray", "(", "self", ".", "metric_dict", "[", "key", "]", ")", "# TODO: self.sid_list[idx][:6] extract sid from the first 6 letters", "\n", "\n", "adj", "=", "np", ".", "load", "(", "self", ".", "root_dir", "+", "\"adj/\"", "+", "self", ".", "sid_list", "[", "idx", "]", "+", "\"_adj.npy\"", ")", "\n", "adj", "=", "(", "adj", ">", "0.13", ")", ".", "astype", "(", "np", ".", "int", ")", "\n", "\n", "return", "img", ",", "self", ".", "patch_loc", ".", "copy", "(", ")", ",", "adj", ",", "label", "\n", "", "", ""]], "home.repos.pwc.inspect_result.batmanlab_Context_Aware_SSL.None.dataset_test_full.default_transform": [[6, 8], ["None"], "function", ["None"], ["def", "default_transform", "(", "x", ")", ":", "\n", "    ", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.batmanlab_Context_Aware_SSL.utils.gcn.GraphNet.__init__": [[6, 11], ["super().__init__", "torch_geometric.nn.GCNConv", "torch_geometric.nn.BatchNorm", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.batmanlab_Context_Aware_SSL.model.loader.GaussianBlur.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_classes", ")", ":", "\n", "        ", "super", "(", "GraphNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "GCNConv", "(", "num_classes", ",", "num_classes", ")", "\n", "self", ".", "bn1", "=", "BatchNorm", "(", "num_classes", ")", "\n", "self", ".", "fc", "=", "torch", ".", "nn", ".", "Linear", "(", "num_classes", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.batmanlab_Context_Aware_SSL.utils.gcn.GraphNet.forward": [[12, 19], ["gcn.GraphNet.conv1", "torch.elu", "torch.elu", "torch_geometric.nn.global_mean_pool", "gcn.GraphNet.fc", "gcn.GraphNet.bn1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "data", ")", ":", "\n", "        ", "x", ",", "edge_index", "=", "data", ".", "x", ",", "data", ".", "edge_index", "\n", "x", "=", "self", ".", "conv1", "(", "x", ",", "edge_index", ")", "\n", "x", "=", "F", ".", "elu", "(", "self", ".", "bn1", "(", "x", ")", ")", "\n", "x", "=", "global_mean_pool", "(", "x", ",", "data", ".", "batch", ")", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "return", "x", "\n", "", "", ""]], "home.repos.pwc.inspect_result.batmanlab_Context_Aware_SSL.utils.gcn_eval.GraphNet.__init__": [[6, 11], ["super().__init__", "torch_geometric.nn.GCNConv", "torch_geometric.nn.BatchNorm", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.batmanlab_Context_Aware_SSL.model.loader.GaussianBlur.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_classes", ")", ":", "\n", "        ", "super", "(", "GraphNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "GCNConv", "(", "num_classes", ",", "num_classes", ")", "\n", "self", ".", "bn1", "=", "BatchNorm", "(", "num_classes", ")", "\n", "self", ".", "fc", "=", "torch", ".", "nn", ".", "Linear", "(", "num_classes", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.batmanlab_Context_Aware_SSL.utils.gcn_eval.GraphNet.forward": [[12, 19], ["gcn_eval.GraphNet.conv1", "torch.elu", "torch.elu", "gcn_eval.GraphNet.bn1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "data", ")", ":", "\n", "        ", "x", ",", "edge_index", "=", "data", ".", "x", ",", "data", ".", "edge_index", "\n", "x", "=", "self", ".", "conv1", "(", "x", ",", "edge_index", ")", "\n", "x", "=", "F", ".", "elu", "(", "self", ".", "bn1", "(", "x", ")", ")", "\n", "#x = global_mean_pool(x, data.batch)", "\n", "#x = self.fc(x)", "\n", "return", "x", "\n", "", "", ""]], "home.repos.pwc.inspect_result.batmanlab_Context_Aware_SSL.utils.cond_encoder.Encoder.__init__": [[6, 22], ["torch.Module.__init__", "torch.Conv3d", "torch.Conv3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.ELU", "torch.ELU", "torch.Conv3d", "torch.Conv3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "cond_encoder.Encoder._make_layer", "cond_encoder.Encoder._make_layer", "cond_encoder.Encoder._make_layer", "torch.Conv3d", "torch.Conv3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.Conv3d", "torch.Conv3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.batmanlab_Context_Aware_SSL.model.loader.GaussianBlur.__init__", "home.repos.pwc.inspect_result.batmanlab_Context_Aware_SSL.utils.cond_encoder.Encoder._make_layer", "home.repos.pwc.inspect_result.batmanlab_Context_Aware_SSL.utils.cond_encoder.Encoder._make_layer", "home.repos.pwc.inspect_result.batmanlab_Context_Aware_SSL.utils.cond_encoder.Encoder._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "num_classes", "=", "128", ")", ":", "\n", "        ", "super", "(", "Encoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "flag", "=", "0", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv3d", "(", "1", ",", "8", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm3d", "(", "8", ")", "\n", "self", ".", "act", "=", "nn", ".", "ELU", "(", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv3d", "(", "8", ",", "8", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm3d", "(", "8", ")", "\n", "self", ".", "downsample1", "=", "self", ".", "_make_layer", "(", "8", ",", "16", ")", "\n", "self", ".", "downsample2", "=", "self", ".", "_make_layer", "(", "16", ",", "32", ")", "\n", "self", ".", "downsample3", "=", "self", ".", "_make_layer", "(", "32", ",", "64", ")", "#[N,64,2,2,2]", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv3d", "(", "64", ",", "128", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm3d", "(", "128", ")", "\n", "self", ".", "conv4", "=", "nn", ".", "Conv3d", "(", "128", ",", "128", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "bn4", "=", "nn", ".", "BatchNorm3d", "(", "128", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "128", "+", "3", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.batmanlab_Context_Aware_SSL.utils.cond_encoder.Encoder._make_layer": [[23, 33], ["torch.Sequential", "torch.Sequential", "torch.Conv3d", "torch.Conv3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.ELU", "torch.ELU", "torch.Conv3d", "torch.Conv3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.ELU", "torch.ELU", "torch.Conv3d", "torch.Conv3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.ELU", "torch.ELU"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ",", "in_channels", ",", "out_channels", ")", ":", "\n", "        ", "return", "nn", ".", "Sequential", "(", "nn", ".", "Conv3d", "(", "in_channels", ",", "out_channels", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm3d", "(", "out_channels", ")", ",", "\n", "nn", ".", "ELU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv3d", "(", "out_channels", ",", "out_channels", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm3d", "(", "out_channels", ")", ",", "\n", "nn", ".", "ELU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv3d", "(", "out_channels", ",", "out_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm3d", "(", "out_channels", ")", ",", "\n", "nn", ".", "ELU", "(", "inplace", "=", "True", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.batmanlab_Context_Aware_SSL.utils.cond_encoder.Encoder.forward": [[34, 56], ["cond_encoder.Encoder.conv1", "cond_encoder.Encoder.bn1", "cond_encoder.Encoder.act", "cond_encoder.Encoder.conv2", "cond_encoder.Encoder.bn2", "cond_encoder.Encoder.act", "cond_encoder.Encoder.downsample1", "cond_encoder.Encoder.downsample2", "cond_encoder.Encoder.downsample3", "cond_encoder.Encoder.conv3", "cond_encoder.Encoder.bn3", "cond_encoder.Encoder.act", "cond_encoder.Encoder.conv4", "cond_encoder.Encoder.bn4", "cond_encoder.Encoder.act", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "cond_encoder.Encoder.fc", "cond_encoder.Encoder.view", "cond_encoder.Encoder.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "loc", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "act", "(", "x", ")", "\n", "x", "=", "self", ".", "conv2", "(", "x", ")", "\n", "x", "=", "self", ".", "bn2", "(", "x", ")", "\n", "x", "=", "self", ".", "act", "(", "x", ")", "\n", "x", "=", "self", ".", "downsample1", "(", "x", ")", "\n", "x", "=", "self", ".", "downsample2", "(", "x", ")", "\n", "x", "=", "self", ".", "downsample3", "(", "x", ")", "\n", "x", "=", "self", ".", "conv3", "(", "x", ")", "\n", "x", "=", "self", ".", "bn3", "(", "x", ")", "\n", "x", "=", "self", ".", "act", "(", "x", ")", "\n", "x", "=", "self", ".", "conv4", "(", "x", ")", "\n", "x", "=", "self", ".", "bn4", "(", "x", ")", "\n", "x", "=", "self", ".", "act", "(", "x", ")", "\n", "#print(x.shape)", "\n", "if", "self", ".", "flag", "==", "1", ":", "\n", "            ", "return", "x", ".", "view", "(", "-", "1", ",", "128", ")", "\n", "", "x", "=", "torch", ".", "cat", "(", "[", "x", ".", "view", "(", "-", "1", ",", "128", ")", ",", "loc", "]", ",", "1", ")", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "return", "x", "\n", "", "", ""]], "home.repos.pwc.inspect_result.batmanlab_Context_Aware_SSL.model.builder_patch.MoCo.__init__": [[11, 44], ["torch.Module.__init__", "base_encoder", "base_encoder", "zip", "builder_patch.MoCo.register_buffer", "torch.functional.normalize", "torch.functional.normalize", "builder_patch.MoCo.register_buffer", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "builder_patch.MoCo.encoder_q.parameters", "builder_patch.MoCo.encoder_k.parameters", "param_k.data.copy_", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.batmanlab_Context_Aware_SSL.model.loader.GaussianBlur.__init__"], ["def", "__init__", "(", "self", ",", "base_encoder", ",", "num_patch", ",", "dim", ",", "K", ",", "m", ",", "T", ",", "mlp", ")", ":", "\n", "        ", "\"\"\"\n        dim: feature dimension (default: 128)\n        K: queue size; number of negative keys (default: 65536)\n        m: moco momentum of updating key encoder (default: 0.999)\n        T: softmax temperature (default: 0.07)\n        \"\"\"", "\n", "super", "(", "MoCo", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "K", "=", "K", "\n", "self", ".", "m", "=", "m", "\n", "self", ".", "T", "=", "T", "\n", "self", ".", "num_locs", "=", "num_patch", "# TODO: add the new dimension of number of locations", "\n", "\n", "# create the encoders", "\n", "# num_classes is the output fc dimension", "\n", "self", ".", "encoder_q", "=", "base_encoder", "(", "num_classes", "=", "dim", ")", "\n", "self", ".", "encoder_k", "=", "base_encoder", "(", "num_classes", "=", "dim", ")", "\n", "\n", "if", "mlp", ":", "# hack: brute-force replacement", "\n", "            ", "dim_mlp", "=", "self", ".", "encoder_q", ".", "fc", ".", "weight", ".", "shape", "[", "1", "]", "\n", "self", ".", "encoder_q", ".", "fc", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "dim_mlp", ",", "dim_mlp", ")", ",", "nn", ".", "ReLU", "(", ")", ",", "self", ".", "encoder_q", ".", "fc", ")", "\n", "self", ".", "encoder_k", ".", "fc", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "dim_mlp", ",", "dim_mlp", ")", ",", "nn", ".", "ReLU", "(", ")", ",", "self", ".", "encoder_k", ".", "fc", ")", "\n", "\n", "", "for", "param_q", ",", "param_k", "in", "zip", "(", "self", ".", "encoder_q", ".", "parameters", "(", ")", ",", "self", ".", "encoder_k", ".", "parameters", "(", ")", ")", ":", "\n", "            ", "param_k", ".", "data", ".", "copy_", "(", "param_q", ".", "data", ")", "# initialize", "\n", "param_k", ".", "requires_grad", "=", "False", "# not update by gradient", "\n", "\n", "# create the queue", "\n", "", "self", ".", "register_buffer", "(", "\"queue\"", ",", "torch", ".", "randn", "(", "dim", ",", "K", ",", "self", ".", "num_locs", ")", ")", "#TODO: the queue should be the size of (dim of reps) * (number of negative pairs) * (number of total locations)", "\n", "self", ".", "queue", "=", "nn", ".", "functional", ".", "normalize", "(", "self", ".", "queue", ",", "dim", "=", "0", ")", "# TODO: normalize patch representation", "\n", "\n", "self", ".", "register_buffer", "(", "\"queue_ptr\"", ",", "torch", ".", "zeros", "(", "self", ".", "num_locs", ",", "dtype", "=", "torch", ".", "long", ")", ")", "# TODO: set pointer in buffer to 1 for each path location", "\n", "\n"]], "home.repos.pwc.inspect_result.batmanlab_Context_Aware_SSL.model.builder_patch.MoCo._momentum_update_key_encoder": [[45, 52], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "zip", "builder_patch.MoCo.encoder_q.parameters", "builder_patch.MoCo.encoder_k.parameters"], "methods", ["None"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "_momentum_update_key_encoder", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Momentum update of the key encoder\n        \"\"\"", "\n", "for", "param_q", ",", "param_k", "in", "zip", "(", "self", ".", "encoder_q", ".", "parameters", "(", ")", ",", "self", ".", "encoder_k", ".", "parameters", "(", ")", ")", ":", "\n", "            ", "param_k", ".", "data", "=", "param_k", ".", "data", "*", "self", ".", "m", "+", "param_q", ".", "data", "*", "(", "1.", "-", "self", ".", "m", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.batmanlab_Context_Aware_SSL.model.builder_patch.MoCo._dequeue_and_enqueue": [[53, 68], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "builder_patch.concat_all_gather"], "methods", ["home.repos.pwc.inspect_result.batmanlab_Context_Aware_SSL.model.builder_graph.concat_all_gather"], ["", "", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "_dequeue_and_enqueue", "(", "self", ",", "keys", ",", "patch_idx", ")", ":", "\n", "# gather keys before updating queue", "\n", "        ", "keys", "=", "concat_all_gather", "(", "keys", ")", "\n", "\n", "batch_size", "=", "keys", ".", "shape", "[", "0", "]", "\n", "\n", "ptr", "=", "self", ".", "queue_ptr", "\n", "assert", "self", ".", "K", "%", "batch_size", "==", "0", "# for simplicity", "\n", "\n", "# replace the keys at ptr (dequeue and enqueue)", "\n", "self", ".", "queue", "[", ":", ",", "ptr", "[", "patch_idx", "]", ":", "ptr", "[", "patch_idx", "]", "+", "batch_size", ",", "patch_idx", "]", "=", "keys", ".", "T", "\n", "ptr", "[", "patch_idx", "]", "=", "(", "ptr", "[", "patch_idx", "]", "+", "batch_size", ")", "%", "self", ".", "K", "# move pointer", "\n", "\n", "self", ".", "queue_ptr", "=", "ptr", "\n", "\n"]], "home.repos.pwc.inspect_result.batmanlab_Context_Aware_SSL.model.builder_patch.MoCo._batch_shuffle_ddp": [[69, 96], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "builder_patch.concat_all_gather", "torch.randperm().cuda", "torch.randperm().cuda", "torch.randperm().cuda", "torch.randperm().cuda", "torch.distributed.broadcast", "torch.distributed.broadcast", "torch.distributed.broadcast", "torch.distributed.broadcast", "torch.argsort", "torch.argsort", "torch.argsort", "torch.argsort", "torch.distributed.get_rank", "torch.distributed.get_rank", "torch.distributed.get_rank", "torch.distributed.get_rank", "torch.randperm().cuda.view", "torch.randperm().cuda.view", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm"], "methods", ["home.repos.pwc.inspect_result.batmanlab_Context_Aware_SSL.model.builder_graph.concat_all_gather"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "_batch_shuffle_ddp", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"\n        Batch shuffle, for making use of BatchNorm.\n        *** Only support DistributedDataParallel (DDP) model. ***\n        \"\"\"", "\n", "# gather from all gpus", "\n", "batch_size_this", "=", "x", ".", "shape", "[", "0", "]", "\n", "x_gather", "=", "concat_all_gather", "(", "x", ")", "\n", "batch_size_all", "=", "x_gather", ".", "shape", "[", "0", "]", "\n", "\n", "num_gpus", "=", "batch_size_all", "//", "batch_size_this", "\n", "\n", "# random shuffle index", "\n", "idx_shuffle", "=", "torch", ".", "randperm", "(", "batch_size_all", ")", ".", "cuda", "(", ")", "\n", "\n", "# broadcast to all gpus", "\n", "torch", ".", "distributed", ".", "broadcast", "(", "idx_shuffle", ",", "src", "=", "0", ")", "\n", "\n", "# index for restoring", "\n", "idx_unshuffle", "=", "torch", ".", "argsort", "(", "idx_shuffle", ")", "\n", "\n", "# shuffled index for this gpu", "\n", "gpu_idx", "=", "torch", ".", "distributed", ".", "get_rank", "(", ")", "\n", "idx_this", "=", "idx_shuffle", ".", "view", "(", "num_gpus", ",", "-", "1", ")", "[", "gpu_idx", "]", "\n", "\n", "return", "x_gather", "[", "idx_this", "]", ",", "idx_unshuffle", "\n", "\n"]], "home.repos.pwc.inspect_result.batmanlab_Context_Aware_SSL.model.builder_patch.MoCo._batch_unshuffle_ddp": [[97, 115], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "builder_patch.concat_all_gather", "torch.distributed.get_rank", "torch.distributed.get_rank", "torch.distributed.get_rank", "torch.distributed.get_rank", "idx_unshuffle.view"], "methods", ["home.repos.pwc.inspect_result.batmanlab_Context_Aware_SSL.model.builder_graph.concat_all_gather"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "_batch_unshuffle_ddp", "(", "self", ",", "x", ",", "idx_unshuffle", ")", ":", "\n", "        ", "\"\"\"\n        Undo batch shuffle.\n        *** Only support DistributedDataParallel (DDP) model. ***\n        \"\"\"", "\n", "# gather from all gpus", "\n", "batch_size_this", "=", "x", ".", "shape", "[", "0", "]", "\n", "x_gather", "=", "concat_all_gather", "(", "x", ")", "\n", "batch_size_all", "=", "x_gather", ".", "shape", "[", "0", "]", "\n", "\n", "num_gpus", "=", "batch_size_all", "//", "batch_size_this", "\n", "\n", "# restored index for this gpu", "\n", "gpu_idx", "=", "torch", ".", "distributed", ".", "get_rank", "(", ")", "\n", "idx_this", "=", "idx_unshuffle", ".", "view", "(", "num_gpus", ",", "-", "1", ")", "[", "gpu_idx", "]", "\n", "\n", "return", "x_gather", "[", "idx_this", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.batmanlab_Context_Aware_SSL.model.builder_patch.MoCo.forward": [[116, 163], ["builder_patch.MoCo.encoder_q", "torch.functional.normalize", "torch.functional.normalize", "torch.einsum().unsqueeze", "torch.einsum().unsqueeze", "torch.einsum().unsqueeze", "torch.einsum().unsqueeze", "builder_patch.MoCo.queue[].clone().detach", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "builder_patch.MoCo._dequeue_and_enqueue", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "builder_patch.MoCo._momentum_update_key_encoder", "builder_patch.MoCo._batch_shuffle_ddp", "builder_patch.MoCo.encoder_k", "torch.functional.normalize", "torch.functional.normalize", "builder_patch.MoCo._batch_unshuffle_ddp", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "builder_patch.MoCo.queue[].clone", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.batmanlab_Context_Aware_SSL.model.builder_graph.MoCo._dequeue_and_enqueue", "home.repos.pwc.inspect_result.batmanlab_Context_Aware_SSL.model.builder_graph.MoCo._momentum_update_key_encoder", "home.repos.pwc.inspect_result.batmanlab_Context_Aware_SSL.model.builder_graph.MoCo._batch_shuffle_ddp", "home.repos.pwc.inspect_result.batmanlab_Context_Aware_SSL.model.builder_graph.MoCo._batch_unshuffle_ddp"], ["", "def", "forward", "(", "self", ",", "patch_idx", ",", "im_q", ",", "im_k", ")", ":", "\n", "        ", "\"\"\"\n        Input:\n            im_q: a batch of query images\n            im_k: a batch of key images\n        Output:\n            logits, targets\n        \"\"\"", "\n", "# compute query features", "\n", "q", "=", "self", ".", "encoder_q", "(", "im_q", "[", "0", "]", ",", "im_q", "[", "1", "]", ")", "# queries: NxC # TODO: encoder needs to take both pathces and their locations as inputs", "\n", "q", "=", "nn", ".", "functional", ".", "normalize", "(", "q", ",", "dim", "=", "1", ")", "\n", "\n", "# compute key features", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "# no gradient to keys", "\n", "            ", "self", ".", "_momentum_update_key_encoder", "(", ")", "# update the key encoder", "\n", "\n", "# shuffle for making use of BN", "\n", "im_k", "[", "0", "]", ",", "idx_unshuffle", "=", "self", ".", "_batch_shuffle_ddp", "(", "im_k", "[", "0", "]", ")", "\n", "\n", "k", "=", "self", ".", "encoder_k", "(", "im_k", "[", "0", "]", ",", "im_k", "[", "1", "]", ")", "# keys: NxC", "\n", "k", "=", "nn", ".", "functional", ".", "normalize", "(", "k", ",", "dim", "=", "1", ")", "\n", "\n", "# undo shuffle", "\n", "k", "=", "self", ".", "_batch_unshuffle_ddp", "(", "k", ",", "idx_unshuffle", ")", "\n", "\n", "# compute logits", "\n", "# Einstein sum is more intuitive", "\n", "# positive logits: Nx1", "\n", "", "l_pos", "=", "torch", ".", "einsum", "(", "'nc,nc->n'", ",", "[", "q", ",", "k", "]", ")", ".", "unsqueeze", "(", "-", "1", ")", "\n", "# negative logits: NxK", "\n", "# TODO: compute negative logits for each path in the batch conditioned on their locations", "\n", "negs", "=", "self", ".", "queue", "[", ":", ",", ":", ",", "patch_idx", "]", ".", "clone", "(", ")", ".", "detach", "(", ")", "\n", "l_neg", "=", "torch", ".", "einsum", "(", "'nc,ck->nk'", ",", "[", "q", ",", "negs", "]", ")", "\n", "\n", "# logits: Nx(1+K)", "\n", "logits", "=", "torch", ".", "cat", "(", "[", "l_pos", ",", "l_neg", "]", ",", "dim", "=", "1", ")", "\n", "\n", "# apply temperature", "\n", "logits", "/=", "self", ".", "T", "\n", "\n", "# labels: positive key indicators", "\n", "labels", "=", "torch", ".", "zeros", "(", "logits", ".", "shape", "[", "0", "]", ",", "dtype", "=", "torch", ".", "long", ")", ".", "cuda", "(", ")", "\n", "\n", "# dequeue and enqueue", "\n", "self", ".", "_dequeue_and_enqueue", "(", "k", ",", "patch_idx", ")", "# TODO: consider location for each patch in the batch", "\n", "\n", "return", "logits", ",", "labels", "\n", "\n"]], "home.repos.pwc.inspect_result.batmanlab_Context_Aware_SSL.model.builder_patch.concat_all_gather": [[166, 178], ["torch.no_grad", "torch.no_grad", "torch.distributed.all_gather", "torch.distributed.all_gather", "torch.cat", "torch.cat", "torch.ones_like", "torch.ones_like", "range", "torch.distributed.get_world_size", "torch.distributed.get_world_size"], "function", ["None"], ["", "", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "concat_all_gather", "(", "tensor", ")", ":", "\n", "    ", "\"\"\"\n    Performs all_gather operation on the provided tensors.\n    *** Warning ***: torch.distributed.all_gather has no gradient.\n    \"\"\"", "\n", "tensors_gather", "=", "[", "torch", ".", "ones_like", "(", "tensor", ")", "\n", "for", "_", "in", "range", "(", "torch", ".", "distributed", ".", "get_world_size", "(", ")", ")", "]", "\n", "torch", ".", "distributed", ".", "all_gather", "(", "tensors_gather", ",", "tensor", ",", "async_op", "=", "False", ")", "\n", "\n", "output", "=", "torch", ".", "cat", "(", "tensors_gather", ",", "dim", "=", "0", ")", "\n", "return", "output", "\n", "", ""]], "home.repos.pwc.inspect_result.batmanlab_Context_Aware_SSL.model.builder_graph.MoCo.__init__": [[15, 48], ["torch.Module.__init__", "base_encoder", "base_encoder", "zip", "builder_graph.MoCo.register_buffer", "torch.functional.normalize", "torch.functional.normalize", "builder_graph.MoCo.register_buffer", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "builder_graph.MoCo.encoder_q.parameters", "builder_graph.MoCo.encoder_k.parameters", "param_k.data.copy_", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.batmanlab_Context_Aware_SSL.model.loader.GaussianBlur.__init__"], ["def", "__init__", "(", "self", ",", "base_encoder", ",", "gpu", ",", "dim", "=", "128", ",", "K", "=", "65536", ",", "m", "=", "0.999", ",", "T", "=", "0.07", ",", "mlp", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        dim: feature dimension (default: 128)\n        K: queue size; number of negative keys (default: 65536)\n        m: moco momentum of updating key encoder (default: 0.999)\n        T: softmax temperature (default: 0.07)\n        \"\"\"", "\n", "super", "(", "MoCo", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "K", "=", "K", "\n", "self", ".", "m", "=", "m", "\n", "self", ".", "T", "=", "T", "\n", "self", ".", "gpu", "=", "gpu", "\n", "\n", "# create the encoders", "\n", "# num_classes is the output fc dimension", "\n", "self", ".", "encoder_q", "=", "base_encoder", "(", "num_classes", "=", "dim", ")", "\n", "self", ".", "encoder_k", "=", "base_encoder", "(", "num_classes", "=", "dim", ")", "\n", "\n", "if", "mlp", ":", "# hack: brute-force replacement", "\n", "            ", "dim_mlp", "=", "self", ".", "encoder_q", ".", "fc", ".", "weight", ".", "shape", "[", "1", "]", "\n", "self", ".", "encoder_q", ".", "fc", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "dim_mlp", ",", "dim_mlp", ")", ",", "nn", ".", "ReLU", "(", ")", ",", "self", ".", "encoder_q", ".", "fc", ")", "\n", "self", ".", "encoder_k", ".", "fc", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "dim_mlp", ",", "dim_mlp", ")", ",", "nn", ".", "ReLU", "(", ")", ",", "self", ".", "encoder_k", ".", "fc", ")", "\n", "\n", "", "for", "param_q", ",", "param_k", "in", "zip", "(", "self", ".", "encoder_q", ".", "parameters", "(", ")", ",", "self", ".", "encoder_k", ".", "parameters", "(", ")", ")", ":", "\n", "            ", "param_k", ".", "data", ".", "copy_", "(", "param_q", ".", "data", ")", "# initialize", "\n", "param_k", ".", "requires_grad", "=", "False", "# not update by gradient", "\n", "\n", "# create the queue", "\n", "", "self", ".", "register_buffer", "(", "\"queue\"", ",", "torch", ".", "randn", "(", "dim", ",", "K", ")", ")", "\n", "self", ".", "queue", "=", "nn", ".", "functional", ".", "normalize", "(", "self", ".", "queue", ",", "dim", "=", "0", ")", "\n", "\n", "self", ".", "register_buffer", "(", "\"queue_ptr\"", ",", "torch", ".", "zeros", "(", "1", ",", "dtype", "=", "torch", ".", "long", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.batmanlab_Context_Aware_SSL.model.builder_graph.MoCo._momentum_update_key_encoder": [[49, 56], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "zip", "builder_graph.MoCo.encoder_q.parameters", "builder_graph.MoCo.encoder_k.parameters"], "methods", ["None"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "_momentum_update_key_encoder", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Momentum update of the key encoder\n        \"\"\"", "\n", "for", "param_q", ",", "param_k", "in", "zip", "(", "self", ".", "encoder_q", ".", "parameters", "(", ")", ",", "self", ".", "encoder_k", ".", "parameters", "(", ")", ")", ":", "\n", "            ", "param_k", ".", "data", "=", "param_k", ".", "data", "*", "self", ".", "m", "+", "param_q", ".", "data", "*", "(", "1.", "-", "self", ".", "m", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.batmanlab_Context_Aware_SSL.model.builder_graph.MoCo._dequeue_and_enqueue": [[57, 72], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "builder_graph.concat_all_gather", "int"], "methods", ["home.repos.pwc.inspect_result.batmanlab_Context_Aware_SSL.model.builder_graph.concat_all_gather"], ["", "", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "_dequeue_and_enqueue", "(", "self", ",", "keys", ")", ":", "\n", "# gather keys before updating queue", "\n", "        ", "keys", "=", "concat_all_gather", "(", "keys", ")", "\n", "\n", "batch_size", "=", "keys", ".", "shape", "[", "0", "]", "\n", "\n", "ptr", "=", "int", "(", "self", ".", "queue_ptr", ")", "\n", "assert", "self", ".", "K", "%", "batch_size", "==", "0", "# for simplicity", "\n", "\n", "# replace the keys at ptr (dequeue and enqueue)", "\n", "self", ".", "queue", "[", ":", ",", "ptr", ":", "ptr", "+", "batch_size", "]", "=", "keys", ".", "T", "\n", "ptr", "=", "(", "ptr", "+", "batch_size", ")", "%", "self", ".", "K", "# move pointer", "\n", "\n", "self", ".", "queue_ptr", "[", "0", "]", "=", "ptr", "\n", "\n"]], "home.repos.pwc.inspect_result.batmanlab_Context_Aware_SSL.model.builder_graph.MoCo._batch_shuffle_ddp": [[73, 102], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "builder_graph.concat_all_gather", "builder_graph.concat_all_gather", "torch.randperm().cuda", "torch.randperm().cuda", "torch.randperm().cuda", "torch.randperm().cuda", "torch.distributed.broadcast", "torch.distributed.broadcast", "torch.distributed.broadcast", "torch.distributed.broadcast", "torch.argsort", "torch.argsort", "torch.argsort", "torch.argsort", "torch.distributed.get_rank", "torch.distributed.get_rank", "torch.distributed.get_rank", "torch.distributed.get_rank", "torch.randperm().cuda.view", "torch.randperm().cuda.view", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm"], "methods", ["home.repos.pwc.inspect_result.batmanlab_Context_Aware_SSL.model.builder_graph.concat_all_gather", "home.repos.pwc.inspect_result.batmanlab_Context_Aware_SSL.model.builder_graph.concat_all_gather"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "_batch_shuffle_ddp", "(", "self", ",", "x", ",", "adj", ")", ":", "\n", "        ", "\"\"\"\n        Batch shuffle, for making use of BatchNorm.\n        *** Only support DistributedDataParallel (DDP) model. ***\n        \"\"\"", "\n", "# gather from all gpus", "\n", "batch_size_this", "=", "x", ".", "shape", "[", "0", "]", "\n", "x_gather", "=", "concat_all_gather", "(", "x", ")", "\n", "adj_gather", "=", "concat_all_gather", "(", "adj", ")", "\n", "\n", "batch_size_all", "=", "x_gather", ".", "shape", "[", "0", "]", "\n", "\n", "num_gpus", "=", "batch_size_all", "//", "batch_size_this", "\n", "\n", "# random shuffle index", "\n", "idx_shuffle", "=", "torch", ".", "randperm", "(", "batch_size_all", ")", ".", "cuda", "(", ")", "\n", "\n", "# broadcast to all gpus", "\n", "torch", ".", "distributed", ".", "broadcast", "(", "idx_shuffle", ",", "src", "=", "0", ")", "\n", "\n", "# index for restoring", "\n", "idx_unshuffle", "=", "torch", ".", "argsort", "(", "idx_shuffle", ")", "\n", "\n", "# shuffled index for this gpu", "\n", "gpu_idx", "=", "torch", ".", "distributed", ".", "get_rank", "(", ")", "\n", "idx_this", "=", "idx_shuffle", ".", "view", "(", "num_gpus", ",", "-", "1", ")", "[", "gpu_idx", "]", "\n", "\n", "return", "x_gather", "[", "idx_this", "]", ",", "adj_gather", "[", "idx_this", "]", ",", "idx_unshuffle", "\n", "\n"]], "home.repos.pwc.inspect_result.batmanlab_Context_Aware_SSL.model.builder_graph.MoCo._batch_unshuffle_ddp": [[103, 121], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "builder_graph.concat_all_gather", "torch.distributed.get_rank", "torch.distributed.get_rank", "torch.distributed.get_rank", "torch.distributed.get_rank", "idx_unshuffle.view"], "methods", ["home.repos.pwc.inspect_result.batmanlab_Context_Aware_SSL.model.builder_graph.concat_all_gather"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "_batch_unshuffle_ddp", "(", "self", ",", "x", ",", "idx_unshuffle", ")", ":", "\n", "        ", "\"\"\"\n        Undo batch shuffle.\n        *** Only support DistributedDataParallel (DDP) model. ***\n        \"\"\"", "\n", "# gather from all gpus", "\n", "batch_size_this", "=", "x", ".", "shape", "[", "0", "]", "\n", "x_gather", "=", "concat_all_gather", "(", "x", ")", "\n", "batch_size_all", "=", "x_gather", ".", "shape", "[", "0", "]", "\n", "\n", "num_gpus", "=", "batch_size_all", "//", "batch_size_this", "\n", "\n", "# restored index for this gpu", "\n", "gpu_idx", "=", "torch", ".", "distributed", ".", "get_rank", "(", ")", "\n", "idx_this", "=", "idx_unshuffle", ".", "view", "(", "num_gpus", ",", "-", "1", ")", "[", "gpu_idx", "]", "\n", "\n", "return", "x_gather", "[", "idx_this", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.batmanlab_Context_Aware_SSL.model.builder_graph.MoCo._prep_batch": [[122, 130], ["range", "torch_geometric.data.Batch.from_data_list", "torch_geometric.data.Batch.from_data_list.batch.cuda", "torch_geometric.data.Batch.from_data_list.append", "torch_geometric.data.Data", "torch_geometric.utils.sparse.dense_to_sparse"], "methods", ["None"], ["", "def", "_prep_batch", "(", "self", ",", "im", ",", "adj", ")", ":", "\n", "        ", "batch", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "im", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "batch", ".", "append", "(", "Data", "(", "x", "=", "im", "[", "i", "]", ",", "edge_index", "=", "dense_to_sparse", "(", "adj", "[", "i", "]", ")", "[", "0", "]", ")", ")", "\n", "", "batch", "=", "Batch", ".", "from_data_list", "(", "batch", ")", "\n", "#batch.x = batch.x.cuda(self.gpu, non_blocking=True)", "\n", "batch", ".", "batch", "=", "batch", ".", "batch", ".", "cuda", "(", "self", ".", "gpu", ",", "non_blocking", "=", "True", ")", "\n", "return", "batch", "\n", "\n"]], "home.repos.pwc.inspect_result.batmanlab_Context_Aware_SSL.model.builder_graph.MoCo.forward": [[131, 181], ["builder_graph.MoCo._prep_batch", "builder_graph.MoCo.encoder_q", "torch.functional.normalize", "torch.functional.normalize", "torch.einsum().unsqueeze", "torch.einsum().unsqueeze", "torch.einsum().unsqueeze", "torch.einsum().unsqueeze", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "builder_graph.MoCo._dequeue_and_enqueue", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "builder_graph.MoCo._momentum_update_key_encoder", "builder_graph.MoCo._batch_shuffle_ddp", "builder_graph.MoCo._prep_batch", "builder_graph.MoCo.encoder_k", "torch.functional.normalize", "torch.functional.normalize", "builder_graph.MoCo._batch_unshuffle_ddp", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "builder_graph.MoCo.queue.clone().detach", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "builder_graph.MoCo.queue.clone"], "methods", ["home.repos.pwc.inspect_result.batmanlab_Context_Aware_SSL.model.builder_graph.MoCo._prep_batch", "home.repos.pwc.inspect_result.batmanlab_Context_Aware_SSL.model.builder_graph.MoCo._dequeue_and_enqueue", "home.repos.pwc.inspect_result.batmanlab_Context_Aware_SSL.model.builder_graph.MoCo._momentum_update_key_encoder", "home.repos.pwc.inspect_result.batmanlab_Context_Aware_SSL.model.builder_graph.MoCo._batch_shuffle_ddp", "home.repos.pwc.inspect_result.batmanlab_Context_Aware_SSL.model.builder_graph.MoCo._prep_batch", "home.repos.pwc.inspect_result.batmanlab_Context_Aware_SSL.model.builder_graph.MoCo._batch_unshuffle_ddp"], ["", "def", "forward", "(", "self", ",", "im_q", ",", "im_k", ")", ":", "\n", "        ", "\"\"\"\n        Input:\n            im_q: a batch of query images\n            im_k: a batch of key images\n        Output:\n            logits, targets\n        \"\"\"", "\n", "\n", "# compute query features", "\n", "# im_q[0]: patch data, im_q[1]: adjacency matrix", "\n", "\n", "batch_q", "=", "self", ".", "_prep_batch", "(", "im_q", "[", "0", "]", ",", "im_q", "[", "1", "]", ")", "\n", "q", "=", "self", ".", "encoder_q", "(", "batch_q", ")", "# queries: NxC", "\n", "q", "=", "nn", ".", "functional", ".", "normalize", "(", "q", ",", "dim", "=", "1", ")", "\n", "\n", "# compute key features", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "# no gradient to keys", "\n", "            ", "self", ".", "_momentum_update_key_encoder", "(", ")", "# update the key encoder", "\n", "\n", "# shuffle for making use of BN", "\n", "im_k", "[", "0", "]", ",", "im_k", "[", "1", "]", ",", "idx_unshuffle", "=", "self", ".", "_batch_shuffle_ddp", "(", "im_k", "[", "0", "]", ",", "im_k", "[", "1", "]", ")", "\n", "batch_k", "=", "self", ".", "_prep_batch", "(", "im_k", "[", "0", "]", ",", "im_k", "[", "1", "]", ")", "\n", "\n", "k", "=", "self", ".", "encoder_k", "(", "batch_k", ")", "# keys: NxC", "\n", "k", "=", "nn", ".", "functional", ".", "normalize", "(", "k", ",", "dim", "=", "1", ")", "\n", "\n", "# undo shuffle", "\n", "k", "=", "self", ".", "_batch_unshuffle_ddp", "(", "k", ",", "idx_unshuffle", ")", "\n", "\n", "# compute logits", "\n", "# Einstein sum is more intuitive", "\n", "# positive logits: Nx1", "\n", "", "l_pos", "=", "torch", ".", "einsum", "(", "'nc,nc->n'", ",", "[", "q", ",", "k", "]", ")", ".", "unsqueeze", "(", "-", "1", ")", "\n", "# negative logits: NxK", "\n", "l_neg", "=", "torch", ".", "einsum", "(", "'nc,ck->nk'", ",", "[", "q", ",", "self", ".", "queue", ".", "clone", "(", ")", ".", "detach", "(", ")", "]", ")", "\n", "\n", "# logits: Nx(1+K)", "\n", "logits", "=", "torch", ".", "cat", "(", "[", "l_pos", ",", "l_neg", "]", ",", "dim", "=", "1", ")", "\n", "\n", "# apply temperature", "\n", "logits", "/=", "self", ".", "T", "\n", "\n", "# labels: positive key indicators", "\n", "labels", "=", "torch", ".", "zeros", "(", "logits", ".", "shape", "[", "0", "]", ",", "dtype", "=", "torch", ".", "long", ")", ".", "cuda", "(", ")", "\n", "\n", "# dequeue and enqueue", "\n", "self", ".", "_dequeue_and_enqueue", "(", "k", ")", "\n", "\n", "return", "logits", ",", "labels", "\n", "\n"]], "home.repos.pwc.inspect_result.batmanlab_Context_Aware_SSL.model.builder_graph.concat_all_gather": [[184, 196], ["torch.no_grad", "torch.no_grad", "torch.distributed.all_gather", "torch.distributed.all_gather", "torch.cat", "torch.cat", "torch.ones_like", "torch.ones_like", "range", "torch.distributed.get_world_size", "torch.distributed.get_world_size"], "function", ["None"], ["", "", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "concat_all_gather", "(", "tensor", ")", ":", "\n", "    ", "\"\"\"\n    Performs all_gather operation on the provided tensors.\n    *** Warning ***: torch.distributed.all_gather has no gradient.\n    \"\"\"", "\n", "tensors_gather", "=", "[", "torch", ".", "ones_like", "(", "tensor", ")", "\n", "for", "_", "in", "range", "(", "torch", ".", "distributed", ".", "get_world_size", "(", ")", ")", "]", "\n", "torch", ".", "distributed", ".", "all_gather", "(", "tensors_gather", ",", "tensor", ",", "async_op", "=", "False", ")", "\n", "\n", "output", "=", "torch", ".", "cat", "(", "tensors_gather", ",", "dim", "=", "0", ")", "\n", "return", "output", "\n", "", ""]], "home.repos.pwc.inspect_result.batmanlab_Context_Aware_SSL.model.loader.TwoCropsTransform.__init__": [[9, 11], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "base_transform", ")", ":", "\n", "        ", "self", ".", "base_transform", "=", "base_transform", "\n", "\n"]], "home.repos.pwc.inspect_result.batmanlab_Context_Aware_SSL.model.loader.TwoCropsTransform.__call__": [[12, 16], ["loader.TwoCropsTransform.base_transform", "loader.TwoCropsTransform.base_transform"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "x", ")", ":", "\n", "        ", "q", "=", "self", ".", "base_transform", "(", "x", ")", "\n", "k", "=", "self", ".", "base_transform", "(", "x", ")", "\n", "return", "[", "q", ",", "k", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.batmanlab_Context_Aware_SSL.model.loader.GaussianBlur.__init__": [[21, 23], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "sigma", "=", "[", ".1", ",", "2.", "]", ")", ":", "\n", "        ", "self", ".", "sigma", "=", "sigma", "\n", "\n"]], "home.repos.pwc.inspect_result.batmanlab_Context_Aware_SSL.model.loader.GaussianBlur.__call__": [[24, 28], ["random.uniform", "x.filter.filter.filter", "PIL.ImageFilter.GaussianBlur"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "x", ")", ":", "\n", "        ", "sigma", "=", "random", ".", "uniform", "(", "self", ".", "sigma", "[", "0", "]", ",", "self", ".", "sigma", "[", "1", "]", ")", "\n", "x", "=", "x", ".", "filter", "(", "ImageFilter", ".", "GaussianBlur", "(", "radius", "=", "sigma", ")", ")", "\n", "return", "x", "\n", "", "", ""]], "home.repos.pwc.inspect_result.batmanlab_Context_Aware_SSL.preprocess.4_group_patch.batch_load": [[19, 27], ["numpy.load", "range", "sub_patches.append"], "function", ["None"], ["def", "batch_load", "(", "path", ",", "batch_idx", ")", ":", "\n", "    ", "sub_patches", "=", "[", "]", "\n", "img", "=", "np", ".", "load", "(", "path", ")", "\n", "for", "j", "in", "range", "(", "batch_idx", "*", "BATCH", ",", "(", "batch_idx", "+", "1", ")", "*", "BATCH", ")", ":", "\n", "        ", "if", "j", ">=", "NUM_PATCH", ":", "\n", "            ", "continue", "\n", "", "sub_patches", ".", "append", "(", "img", "[", "j", ",", ":", ",", ":", ",", ":", "]", ")", "\n", "", "return", "sub_patches", "\n", "\n"]], "home.repos.pwc.inspect_result.batmanlab_Context_Aware_SSL.preprocess.4_group_patch.main": [[28, 59], ["os.makedirs", "glob.glob", "sid_list.sort", "range", "sid_list.append", "print", "range", "range", "range", "joblib.Parallel", "patches.append", "range", "numpy.stack", "numpy.isnan", "numpy.save", "len", "patches[].append", "joblib.delayed", "[].copy", "str"], "function", ["None"], ["", "def", "main", "(", ")", ":", "\n", "\n", "    ", "os", ".", "makedirs", "(", "ROOT_DIR", "+", "\"grouped_patch/\"", ",", "exist_ok", "=", "True", ")", "\n", "sid_list", "=", "[", "]", "\n", "for", "item", "in", "glob", ".", "glob", "(", "ROOT_DIR", "+", "\"patch/\"", "+", "\"*_patch.npy\"", ")", ":", "\n", "        ", "sid_list", ".", "append", "(", "item", ")", "\n", "", "sid_list", ".", "sort", "(", ")", "\n", "#    sid_list = sid_list[:2] # test only", "\n", "#    print(sid_list)", "\n", "#    exit()", "\n", "for", "batch_idx", "in", "range", "(", "NUM_PATCH", "//", "BATCH", "+", "1", ")", ":", "\n", "        ", "print", "(", "\"Processing batch\"", ",", "batch_idx", ")", "\n", "batch_patches", "=", "Parallel", "(", "n_jobs", "=", "NUM_JOBS", ")", "(", "delayed", "(", "batch_load", ")", "(", "item", ",", "batch_idx", ")", "for", "item", "in", "sid_list", ")", "\n", "patches", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "BATCH", ")", ":", "\n", "            ", "if", "batch_idx", "*", "BATCH", "+", "i", ">=", "NUM_PATCH", ":", "\n", "                ", "continue", "\n", "", "patches", ".", "append", "(", "[", "]", ")", "\n", "", "for", "i", "in", "range", "(", "BATCH", ")", ":", "\n", "            ", "if", "batch_idx", "*", "BATCH", "+", "i", ">=", "NUM_PATCH", ":", "\n", "                ", "continue", "\n", "", "for", "j", "in", "range", "(", "len", "(", "sid_list", ")", ")", ":", "\n", "                ", "patches", "[", "i", "]", ".", "append", "(", "batch_patches", "[", "j", "]", "[", "i", "]", ".", "copy", "(", ")", ")", "\n", "batch_patches", "[", "j", "]", "[", "i", "]", "=", "None", "\n", "", "", "for", "i", "in", "range", "(", "BATCH", ")", ":", "\n", "            ", "if", "batch_idx", "*", "BATCH", "+", "i", ">=", "NUM_PATCH", ":", "\n", "                ", "continue", "\n", "", "stack_patch", "=", "np", ".", "stack", "(", "patches", "[", "i", "]", ")", "\n", "nan_mask", "=", "np", ".", "isnan", "(", "stack_patch", ")", "# Remove NaN", "\n", "stack_patch", "[", "nan_mask", "]", "=", "-", "1024", "\n", "np", ".", "save", "(", "ROOT_DIR", "+", "\"grouped_patch/patch_loc_\"", "+", "str", "(", "batch_idx", "*", "BATCH", "+", "i", ")", "+", "\".npy\"", ",", "stack_patch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.batmanlab_Context_Aware_SSL.preprocess.3_patchify_images.convert_to_isotropic": [[18, 45], ["inputVolume.GetSpacing", "inputVolume.GetSize", "SimpleITK.ResampleImageFilter", "SimpleITK.Transform", "sitk.Transform.SetIdentity", "sitk.ResampleImageFilter.SetTransform", "sitk.ResampleImageFilter.SetInterpolator", "sitk.ResampleImageFilter.SetDefaultPixelValue", "sitk.ResampleImageFilter.SetOutputSpacing", "sitk.ResampleImageFilter.SetOutputOrigin", "sitk.ResampleImageFilter.SetOutputDirection", "int", "int", "int", "sitk.ResampleImageFilter.SetSize", "float", "inputVolume.GetOrigin", "inputVolume.GetDirection", "sitk.ResampleImageFilter.Execute", "print", "print", "err.decode", "str"], "function", ["None"], ["def", "convert_to_isotropic", "(", "inputVolume", ",", "isoSpacing", "=", "1.0", ")", ":", "\n", "\n", "    ", "inputSpacing", "=", "inputVolume", ".", "GetSpacing", "(", ")", "\n", "inputSize", "=", "inputVolume", ".", "GetSize", "(", ")", "\n", "#Resample the images to make them iso-tropic", "\n", "resampleFilter", "=", "sitk", ".", "ResampleImageFilter", "(", ")", "\n", "T", "=", "sitk", ".", "Transform", "(", ")", "\n", "T", ".", "SetIdentity", "(", ")", "\n", "resampleFilter", ".", "SetTransform", "(", "T", ")", "\n", "resampleFilter", ".", "SetInterpolator", "(", "sitk", ".", "sitkBSpline", ")", "\n", "resampleFilter", ".", "SetDefaultPixelValue", "(", "float", "(", "-", "1024", ")", ")", "\n", "# isoSpacing = 1 #math.sqrt(inputSpacing[2] * inputSpacing[0])", "\n", "resampleFilter", ".", "SetOutputSpacing", "(", "(", "isoSpacing", ",", "isoSpacing", ",", "isoSpacing", ")", ")", "\n", "resampleFilter", ".", "SetOutputOrigin", "(", "inputVolume", ".", "GetOrigin", "(", ")", ")", "\n", "resampleFilter", ".", "SetOutputDirection", "(", "inputVolume", ".", "GetDirection", "(", ")", ")", "\n", "dx", "=", "int", "(", "inputSize", "[", "0", "]", "*", "inputSpacing", "[", "0", "]", "/", "isoSpacing", ")", "\n", "dy", "=", "int", "(", "inputSize", "[", "1", "]", "*", "inputSpacing", "[", "1", "]", "/", "isoSpacing", ")", "\n", "dz", "=", "int", "(", "(", "inputSize", "[", "2", "]", "-", "1", ")", "*", "inputSpacing", "[", "2", "]", "/", "isoSpacing", ")", "\n", "resampleFilter", ".", "SetSize", "(", "(", "dx", ",", "dy", ",", "dz", ")", ")", "\n", "try", ":", "\n", "        ", "resampleVolume", "=", "resampleFilter", ".", "Execute", "(", "inputVolume", ")", "\n", "", "except", "Error", "as", "err", ":", "\n", "        ", "print", "(", "\"Resample failed: \"", "+", "str", "(", "imageFilePath", ")", ")", "\n", "print", "(", "err", ".", "decode", "(", "encoding", "=", "'UTF-8'", ")", ")", "\n", "return", "None", "\n", "\n", "", "return", "resampleVolume", "\n", "\n"]], "home.repos.pwc.inspect_result.batmanlab_Context_Aware_SSL.preprocess.3_patchify_images.pad_img": [[46, 55], ["SimpleITK.ConstantPadImageFilter", "sitk.ConstantPadImageFilter.SetConstant", "sitk.ConstantPadImageFilter.SetPadLowerBound", "sitk.ConstantPadImageFilter.SetPadUpperBound", "sitk.ConstantPadImageFilter.Execute"], "function", ["None"], ["", "def", "pad_img", "(", "input_img", ",", "image_lowest_intensity", "=", "-", "1024", ")", ":", "\n", "    ", "lower_bound", "=", "[", "30", "]", "*", "3", "\n", "upper_bound", "=", "[", "30", "]", "*", "3", "\n", "cpf", "=", "sitk", ".", "ConstantPadImageFilter", "(", ")", "\n", "cpf", ".", "SetConstant", "(", "image_lowest_intensity", ")", "\n", "cpf", ".", "SetPadLowerBound", "(", "lower_bound", ")", "\n", "cpf", ".", "SetPadUpperBound", "(", "upper_bound", ")", "\n", "input_img", "=", "cpf", ".", "Execute", "(", "input_img", ")", "\n", "return", "input_img", "\n", "\n"]], "home.repos.pwc.inspect_result.batmanlab_Context_Aware_SSL.preprocess.3_patchify_images.Image2Patch": [[56, 81], ["range", "numpy.asarray", "numpy.asarray", "registered_patch_loc[].tolist", "SimpleITK.RegionOfInterest", "SimpleITK.GetArrayFromImage", "np.asarray.append", "np.asarray.append", "sitk.GetArrayFromImage.copy"], "function", ["None"], ["", "def", "Image2Patch", "(", "inputImg", ",", "step_size", ",", "patch_size", ",", "registered_patch_loc", ")", ":", "\n", "    ", "\"\"\" This function converts image to patches. \n        Here is the input of the function:\n          inputImg : input image. This should be simpleITK object\n          patchSize : size of the patch. It should be array of three scalar\n        Here is the output of the function:\n          patchImgData : It is a list containing the patches of the image\n          patchLblData : Is is a list containing the patches of the label image\n          \n    \"\"\"", "\n", "patch_vol", "=", "patch_size", "[", "0", "]", "*", "patch_size", "[", "1", "]", "*", "patch_size", "[", "2", "]", "\n", "patch_img_data", "=", "[", "]", "\n", "patch_loc", "=", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "registered_patch_loc", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "x", ",", "y", ",", "z", "=", "registered_patch_loc", "[", "i", "]", ".", "tolist", "(", ")", "\n", "#print(x,y,z)", "\n", "patchImg", "=", "sitk", ".", "RegionOfInterest", "(", "inputImg", ",", "size", "=", "patch_size", ",", "index", "=", "[", "x", ",", "y", ",", "z", "]", ")", "\n", "npLargePatchImg", "=", "sitk", ".", "GetArrayFromImage", "(", "patchImg", ")", "\n", "patch_img_data", ".", "append", "(", "npLargePatchImg", ".", "copy", "(", ")", ")", "\n", "patch_loc", ".", "append", "(", "[", "x", ",", "y", ",", "z", "]", ")", "\n", "\n", "", "patch_img_data", "=", "np", ".", "asarray", "(", "patch_img_data", ")", "\n", "patch_loc", "=", "np", ".", "asarray", "(", "patch_loc", ")", "\n", "return", "patch_img_data", ",", "patch_loc", "\n", "\n"]], "home.repos.pwc.inspect_result.batmanlab_Context_Aware_SSL.preprocess.3_patchify_images.extract_patch": [[82, 115], ["SimpleITK.ReadImage", "3_patchify_images.convert_to_isotropic", "3_patchify_images.pad_img", "SimpleITK.GetArrayFromImage", "SimpleITK.GetImageFromArray", "sitk.GetImageFromArray.SetOrigin", "sitk.GetImageFromArray.SetSpacing", "sitk.GetImageFromArray.SetDirection", "SimpleITK.ReadTransform", "range", "numpy.array", "3_patchify_images.Image2Patch", "pad_img.GetOrigin", "pad_img.GetSpacing", "pad_img.GetDirection", "tuple", "sitk.ReadTransform.TransformPoint", "pad_img.TransformPhysicalPointToIndex", "np.array.append", "list", "isoRawImage_file.split"], "function", ["home.repos.pwc.inspect_result.batmanlab_Context_Aware_SSL.preprocess.3_patchify_images.convert_to_isotropic", "home.repos.pwc.inspect_result.batmanlab_Context_Aware_SSL.preprocess.3_patchify_images.pad_img", "home.repos.pwc.inspect_result.batmanlab_Context_Aware_SSL.preprocess.1_patchify_atlas.Image2Patch"], ["", "def", "extract_patch", "(", "isoRawImage_file", ",", "altas_patch_loc", ")", ":", "\n", "#Read the input isotropic image volume", "\n", "    ", "isoRawImage", "=", "sitk", ".", "ReadImage", "(", "isoRawImage_file", ")", "\n", "isoRawImage", "=", "convert_to_isotropic", "(", "isoRawImage", ")", "\n", "isoRawImage", "=", "pad_img", "(", "isoRawImage", ")", "\n", "npIsoRawImage", "=", "sitk", ".", "GetArrayFromImage", "(", "isoRawImage", ")", "\n", "#print(npIsoRawImage.shape)", "\n", "\n", "# Thresholding the isotropic raw image", "\n", "npIsoRawImage", "[", "npIsoRawImage", ">", "upperThreshold", "]", "=", "upperThreshold", "\n", "npIsoRawImage", "[", "npIsoRawImage", "<", "lowerThreshold", "]", "=", "lowerThreshold", "\n", "\n", "thresholdIsoRawImage", "=", "sitk", ".", "GetImageFromArray", "(", "npIsoRawImage", ")", "\n", "thresholdIsoRawImage", ".", "SetOrigin", "(", "isoRawImage", ".", "GetOrigin", "(", ")", ")", "\n", "thresholdIsoRawImage", ".", "SetSpacing", "(", "isoRawImage", ".", "GetSpacing", "(", ")", ")", "\n", "thresholdIsoRawImage", ".", "SetDirection", "(", "isoRawImage", ".", "GetDirection", "(", ")", ")", "\n", "\n", "# Prepare registered patch location", "\n", "registered_patch_loc", "=", "[", "]", "\n", "affine_trans", "=", "sitk", ".", "ReadTransform", "(", "\"./INSP2Atlas/transform/\"", "+", "isoRawImage_file", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "[", ":", "-", "7", "]", "+", "\"_Reg_Atlas_Affine_0GenericAffine.mat\"", ")", "\n", "for", "i", "in", "range", "(", "altas_patch_loc", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "physical_cor_on_fixed", "=", "tuple", "(", "altas_patch_loc", "[", "i", "]", ")", "\n", "physical_cor_on_moving", "=", "affine_trans", ".", "TransformPoint", "(", "physical_cor_on_fixed", ")", "\n", "index_on_moving", "=", "isoRawImage", ".", "TransformPhysicalPointToIndex", "(", "physical_cor_on_moving", ")", "\n", "registered_patch_loc", ".", "append", "(", "list", "(", "index_on_moving", ")", ")", "\n", "", "registered_patch_loc", "=", "np", ".", "array", "(", "registered_patch_loc", ")", "\n", "\n", "#Extract Patches", "\n", "# Generate Patches of the masked Image", "\n", "patchImgData", ",", "patch_loc", "=", "Image2Patch", "(", "thresholdIsoRawImage", ",", "[", "step_size", "]", "*", "3", ",", "[", "patch_size", "]", "*", "3", ",", "registered_patch_loc", ")", "\n", "return", "patchImgData", ",", "patch_loc", "\n", "\n"]], "home.repos.pwc.inspect_result.batmanlab_Context_Aware_SSL.preprocess.3_patchify_images.prep_adjacency_matrix": [[116, 132], ["range", "numpy.asarray", "numpy.zeros", "numpy.abs", "np.abs.max", "numpy.abs", "np.asarray.append", "np.zeros.transpose"], "function", ["None"], ["", "def", "prep_adjacency_matrix", "(", "patch_loc", ")", ":", "\n", "    ", "adj", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "patch_loc", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "adj_row", "=", "np", ".", "zeros", "(", "(", "patch_loc", ".", "shape", "[", "0", "]", ",", ")", ")", "\n", "dist", "=", "np", ".", "abs", "(", "patch_loc", "-", "patch_loc", "[", "i", "]", ")", "\n", "max_side_dist", "=", "dist", ".", "max", "(", "1", ")", "\n", "dist", "=", "dist", "[", "max_side_dist", "<", "patch_size", ",", ":", "]", "\n", "volume", "=", "np", ".", "abs", "(", "dist", "-", "patch_size", ")", "\n", "volume", "=", "volume", "[", ":", ",", "0", "]", "*", "volume", "[", ":", ",", "1", "]", "*", "volume", "[", ":", ",", "2", "]", "\n", "#print(volume.shape)", "\n", "#print(adj_row[max_side_dist<patch_size].shape)", "\n", "adj_row", "[", "max_side_dist", "<", "patch_size", "]", "=", "volume", "/", "(", "patch_size", "**", "3", ")", "\n", "adj", ".", "append", "(", "adj_row", ".", "transpose", "(", ")", ")", "\n", "", "adj", "=", "np", ".", "asarray", "(", "adj", ")", "\n", "#adj = (adj / np.sum(adj, 0)).transpose()", "\n", "return", "adj", "\n", "\n"]], "home.repos.pwc.inspect_result.batmanlab_Context_Aware_SSL.preprocess.3_patchify_images.run": [[133, 178], ["pandas.read_csv", "SimpleITK.ReadImage", "range", "numpy.array", "range", "altas_patch_loc_temp.append", "print", "os.path.join", "list", "os.path.exists", "print", "os.path.exists", "print", "os.path.exists", "df[].isnull", "sitk.ReadImage.TransformIndexToPhysicalPoint", "row[].split", "os.path.getsize", "3_patchify_images.extract_patch", "3_patchify_images.prep_adjacency_matrix", "numpy.save", "numpy.save", "numpy.save", "tuple", "os.path.join", "os.path.join", "print", "print", "altas_patch_loc[].tolist", "str"], "function", ["home.repos.pwc.inspect_result.batmanlab_Context_Aware_SSL.preprocess.1_patchify_atlas.extract_patch", "home.repos.pwc.inspect_result.batmanlab_Context_Aware_SSL.preprocess.1_patchify_atlas.prep_adjacency_matrix"], ["", "def", "run", "(", "start", ",", "end", ",", "batch_index", ")", ":", "\n", "    ", "df", "=", "pd", ".", "read_csv", "(", "input_csv", ")", "\n", "df", "=", "df", "[", "~", "df", "[", "'image'", "]", ".", "isnull", "(", ")", "]", "\n", "\n", "# Prepare physical coord of patch location", "\n", "fixed_img", "=", "sitk", ".", "ReadImage", "(", "atlas_image", ")", "\n", "altas_patch_loc_temp", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "altas_patch_loc", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "altas_patch_loc_temp", ".", "append", "(", "list", "(", "fixed_img", ".", "TransformIndexToPhysicalPoint", "(", "tuple", "(", "altas_patch_loc", "[", "i", ",", ":", "]", ".", "tolist", "(", ")", ")", ")", ")", ")", "\n", "", "altas_patch_loc", "=", "np", ".", "array", "(", "altas_patch_loc_temp", ")", "\n", "del", "altas_patch_loc_temp", ",", "fixed_img", "\n", "\n", "for", "i", "in", "range", "(", "start", ",", "end", ")", ":", "\n", "        ", "row", "=", "df", ".", "iloc", "[", "i", "]", "\n", "subject_id", "=", "row", "[", "'sid'", "]", "\n", "#if subject_id != '19676E':", "\n", "#    continue", "\n", "print", "(", "row", "[", "'image'", "]", ")", "\n", "output_basename", "=", "row", "[", "'image'", "]", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "[", ":", "-", "24", "]", "\n", "isotropicFileName", "=", "\"./INSP2Atlas/clamped/\"", "+", "output_basename", "+", "\".nii.gz\"", "\n", "patchFileName", "=", "os", ".", "path", ".", "join", "(", "output_dir", ",", "'patch'", ",", "output_basename", "+", "'_patch.npy'", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "isotropicFileName", ")", ":", "\n", "            ", "print", "(", "output_basename", ",", "\"image not found\"", ")", "\n", "continue", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "\"./INSP2Atlas/transform/\"", "+", "output_basename", "+", "\"_Reg_Atlas_Affine_0GenericAffine.mat\"", ")", ":", "\n", "            ", "print", "(", "output_basename", ",", "\"mat not found\"", ")", "\n", "continue", "\n", "", "if", "os", ".", "path", ".", "getsize", "(", "isotropicFileName", ")", "/", "(", "1024.", "**", "2", ")", "<", "16", ":", "\n", "            ", "continue", "\n", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "patchFileName", ")", ":", "\n", "            ", "try", ":", "\n", "                ", "patchImgData", ",", "patch_loc", "=", "extract_patch", "(", "isotropicFileName", ",", "altas_patch_loc", ")", "\n", "\n", "adj", "=", "prep_adjacency_matrix", "(", "patch_loc", ")", "\n", "np", ".", "save", "(", "patchFileName", ",", "patchImgData", ")", "\n", "np", ".", "save", "(", "os", ".", "path", ".", "join", "(", "output_dir", ",", "'patch_loc'", ",", "output_basename", "+", "'_patch_loc.npy'", ")", ",", "patch_loc", ")", "\n", "np", ".", "save", "(", "os", ".", "path", ".", "join", "(", "output_dir", ",", "'adj'", ",", "output_basename", "+", "'_adj.npy'", ")", ",", "adj", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "                ", "print", "(", "e", ")", "\n", "print", "(", "\"Failed in extract patch: \"", "+", "str", "(", "output_basename", ")", ")", "\n", "continue", "\n", "", "", "", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.batmanlab_Context_Aware_SSL.preprocess.3_patchify_images.main": [[179, 233], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "pandas.read_csv", "math.ceil", "range", "3_patchify_images.run", "processes.append", "p.start", "df[].isnull", "multiprocessing.Process"], "function", ["home.repos.pwc.inspect_result.batmanlab_Context_Aware_SSL.preprocess.1_patchify_atlas.run"], ["", "def", "main", "(", "argv", ")", ":", "\n", "    ", "global", "output_dir", "\n", "global", "input_csv", "\n", "global", "patch_size", "\n", "global", "step_size", "\n", "global", "atlas_image", ",", "atlas_patch_loc", "\n", "global", "lowerThreshold", ",", "upperThreshold", "\n", "\n", "#Parse the arguments", "\n", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Data Preprocessing'", ")", "\n", "parser", ".", "add_argument", "(", "'--atlas_image'", ",", "type", "=", "str", ",", "default", "=", "\"19676E_INSP_STD_JHU_COPD_BSpline_Iso1.0mm.nii.gz\"", ")", "\n", "parser", ".", "add_argument", "(", "'--atlas_patch_loc'", ",", "type", "=", "str", ",", "default", "=", "\"./patch_data_32_6_reg/19676E_INSP_STD_JHU_COPD_BSpline_Iso1_patch_loc.npy\"", ")", "\n", "parser", ".", "add_argument", "(", "'--lowerThreshold'", ",", "type", "=", "int", ",", "default", "=", "-", "1024", ")", "\n", "parser", ".", "add_argument", "(", "'--upperThreshold'", ",", "type", "=", "int", ",", "default", "=", "240", ")", "\n", "parser", ".", "add_argument", "(", "'-i'", ",", "'--input_csv'", ",", "type", "=", "str", ",", "default", "=", "'/pghbio/dbmi/batmanlab/Data/COPDGene/Database/Final_Status_Phase-1_18_11_2019_13_12_04.csv'", ",", "help", "=", "'Input csv with patient_id, isotropic volume path and lung segmentation path.'", ")", "\n", "parser", ".", "add_argument", "(", "'-o'", ",", "'--output_dir'", ",", "type", "=", "str", ",", "default", "=", "'./patch_data_32_6_reg/'", ",", "help", "=", "'Directory where intermediate and final files are saved.'", ")", "\n", "parser", ".", "add_argument", "(", "'-p'", ",", "'--num_processor'", ",", "type", "=", "int", ",", "default", "=", "16", ",", "help", "=", "'Preprocess files in parallel. 1: no-parallel, n: number of nodes for parallel use'", ")", "\n", "parser", ".", "add_argument", "(", "'-s'", ",", "'--patch_size'", ",", "type", "=", "int", ",", "default", "=", "32", ",", "help", "=", "'The size of the 3D patch.'", ")", "\n", "parser", ".", "add_argument", "(", "'-l'", ",", "'--step_size'", ",", "type", "=", "int", ",", "default", "=", "26", ",", "help", "=", "'The overlap between consecutive patches.'", ")", "\n", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "input_csv", "=", "args", ".", "input_csv", "\n", "output_dir", "=", "args", ".", "output_dir", "\n", "num_processor", "=", "args", ".", "num_processor", "\n", "patch_size", "=", "args", ".", "patch_size", "\n", "step_size", "=", "args", ".", "step_size", "\n", "atlas_image", "=", "args", ".", "atlas_image", "\n", "atlas_patch_loc", "=", "args", ".", "atlas_patch_loc", "\n", "lowerThreshold", "=", "args", ".", "lowerThreshold", "\n", "upperThreshold", "=", "args", ".", "upperThreshold", "\n", "\n", "df", "=", "pd", ".", "read_csv", "(", "input_csv", ")", "\n", "df", "=", "df", "[", "~", "df", "[", "'image'", "]", ".", "isnull", "(", ")", "]", "\n", "\n", "start", "=", "0", "\n", "end", "=", "df", ".", "shape", "[", "0", "]", "\n", "\n", "if", "num_processor", ">", "1", ":", "\n", "        ", "processes", "=", "[", "]", "\n", "count", "=", "math", ".", "ceil", "(", "(", "end", "-", "start", ")", "/", "num_processor", ")", "\n", "for", "i", "in", "range", "(", "num_processor", ")", ":", "\n", "            ", "if", "start", "+", "count", ">", "end", ":", "\n", "                ", "count", "=", "end", "-", "start", "\n", "", "processes", ".", "append", "(", "mp", ".", "Process", "(", "target", "=", "run", ",", "args", "=", "(", "start", ",", "start", "+", "count", ",", "args", ".", "batch_index", ")", ")", ")", "\n", "start", "+=", "count", "\n", "", "for", "p", "in", "processes", ":", "\n", "            ", "p", ".", "start", "(", ")", "\n", "", "", "else", ":", "\n", "        ", "run", "(", "start", ",", "end", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.batmanlab_Context_Aware_SSL.preprocess.1_patchify_atlas.Image2Patch": [[17, 48], ["inputImg.GetSize", "enumerate", "numpy.asarray", "numpy.asarray", "range", "enumerate", "range", "enumerate", "range", "SimpleITK.RegionOfInterest", "SimpleITK.GetArrayFromImage", "SimpleITK.RegionOfInterest", "SimpleITK.GetArrayFromImage", "np.asarray.append", "np.asarray.append", "sitk.GetArrayFromImage.copy"], "function", ["None"], ["def", "Image2Patch", "(", "inputImg", ",", "labelMaskImg", ",", "step_size", ",", "patch_size", ",", "acceptRate", ")", ":", "\n", "    ", "\"\"\" This function converts image to patches. \n        Here is the input of the function:\n          inputImg : input image. This should be simpleITK object\n          labelMaskImg : label image containing mask of the lobes (values greater than 0)\n          patchSize : size of the patch. It should be array of three scalar\n          acceptRate : If portion of the patch inside of the mask exceeds value, it would be accepted \n        Here is the output of the function:\n          patchImgData : It is a list containing the patches of the image\n          patchLblData : Is is a list containing the patches of the label image\n          \n    \"\"\"", "\n", "patch_vol", "=", "patch_size", "[", "0", "]", "*", "patch_size", "[", "1", "]", "*", "patch_size", "[", "2", "]", "\n", "patch_img_data", "=", "[", "]", "\n", "patch_loc", "=", "[", "]", "\n", "img_size", "=", "inputImg", ".", "GetSize", "(", ")", "\n", "\n", "for", "idx_x", ",", "x", "in", "enumerate", "(", "range", "(", "0", ",", "img_size", "[", "0", "]", "-", "patch_size", "[", "0", "]", ",", "step_size", "[", "0", "]", ")", ")", ":", "\n", "        ", "for", "idx_y", ",", "y", "in", "enumerate", "(", "range", "(", "0", ",", "img_size", "[", "1", "]", "-", "patch_size", "[", "1", "]", ",", "step_size", "[", "1", "]", ")", ")", ":", "\n", "            ", "for", "idx_z", ",", "z", "in", "enumerate", "(", "range", "(", "0", ",", "img_size", "[", "2", "]", "-", "patch_size", "[", "2", "]", ",", "step_size", "[", "2", "]", ")", ")", ":", "\n", "                ", "patchLblImg", "=", "sitk", ".", "RegionOfInterest", "(", "labelMaskImg", ",", "size", "=", "patch_size", ",", "index", "=", "[", "x", ",", "y", ",", "z", "]", ")", "\n", "npPatchLblImg", "=", "sitk", ".", "GetArrayFromImage", "(", "patchLblImg", ")", "\n", "if", "(", "npPatchLblImg", ">", "0", ")", ".", "sum", "(", ")", ">", "acceptRate", "*", "patch_vol", ":", "\n", "                    ", "patchImg", "=", "sitk", ".", "RegionOfInterest", "(", "inputImg", ",", "size", "=", "patch_size", ",", "index", "=", "[", "x", ",", "y", ",", "z", "]", ")", "\n", "npLargePatchImg", "=", "sitk", ".", "GetArrayFromImage", "(", "patchImg", ")", "\n", "patch_img_data", ".", "append", "(", "npLargePatchImg", ".", "copy", "(", ")", ")", "\n", "patch_loc", ".", "append", "(", "[", "x", ",", "y", ",", "z", "]", ")", "\n", "\n", "", "", "", "", "patch_img_data", "=", "np", ".", "asarray", "(", "patch_img_data", ")", "\n", "patch_loc", "=", "np", ".", "asarray", "(", "patch_loc", ")", "\n", "return", "patch_img_data", ",", "patch_loc", "\n", "\n"]], "home.repos.pwc.inspect_result.batmanlab_Context_Aware_SSL.preprocess.1_patchify_atlas.extract_patch": [[49, 90], ["SimpleITK.ReadImage", "SimpleITK.GetArrayFromImage", "SimpleITK.GetImageFromArray", "sitk.GetImageFromArray.SetOrigin", "sitk.GetImageFromArray.SetSpacing", "sitk.GetImageFromArray.SetDirection", "SimpleITK.ReadImage", "SimpleITK.GetArrayFromImage", "SimpleITK.GetImageFromArray", "sitk.GetImageFromArray.SetOrigin", "sitk.GetImageFromArray.SetSpacing", "sitk.GetImageFromArray.SetDirection", "sitk.ReadImage.GetOrigin", "sitk.ReadImage.GetSpacing", "sitk.ReadImage.GetDirection", "sitk.ReadImage.GetOrigin", "sitk.ReadImage.GetSpacing", "sitk.ReadImage.GetDirection", "sitk.GetImageFromArray.GetSize", "sitk.GetImageFromArray.GetSize", "1_patchify_atlas.Image2Patch", "print", "numpy.empty", "numpy.empty"], "function", ["home.repos.pwc.inspect_result.batmanlab_Context_Aware_SSL.preprocess.1_patchify_atlas.Image2Patch"], ["", "def", "extract_patch", "(", "isoRawImage_file", ",", "isoLabelImage_file", ")", ":", "\n", "#Read the input isotropic image volume", "\n", "    ", "isoRawImage", "=", "sitk", ".", "ReadImage", "(", "isoRawImage_file", ")", "\n", "npIsoRawImage", "=", "sitk", ".", "GetArrayFromImage", "(", "isoRawImage", ")", "\n", "#print(npIsoRawImage.shape)", "\n", "\n", "# Thresholding the isotropic raw image", "\n", "npIsoRawImage", "[", "npIsoRawImage", ">", "upperThreshold", "]", "=", "upperThreshold", "\n", "npIsoRawImage", "[", "npIsoRawImage", "<", "lowerThreshold", "]", "=", "lowerThreshold", "\n", "\n", "thresholdIsoRawImage", "=", "sitk", ".", "GetImageFromArray", "(", "npIsoRawImage", ")", "\n", "thresholdIsoRawImage", ".", "SetOrigin", "(", "isoRawImage", ".", "GetOrigin", "(", ")", ")", "\n", "thresholdIsoRawImage", ".", "SetSpacing", "(", "isoRawImage", ".", "GetSpacing", "(", ")", ")", "\n", "thresholdIsoRawImage", ".", "SetDirection", "(", "isoRawImage", ".", "GetDirection", "(", ")", ")", "\n", "\n", "#Read the input isotropic label image", "\n", "isoLabelImage", "=", "sitk", ".", "ReadImage", "(", "isoLabelImage_file", ")", "\n", "#npIsoLabelImage = sitk.GetArrayFromImage(isoLabelImage)", "\n", "\n", "#Generate binary label map", "\n", "binaryLabelImage", "=", "sitk", ".", "GetArrayFromImage", "(", "isoLabelImage", ")", "\n", "binaryLabelImage", "[", "binaryLabelImage", ">", "0", "]", "=", "1", "\n", "binaryLabelImage", "=", "sitk", ".", "GetImageFromArray", "(", "binaryLabelImage", ")", "\n", "binaryLabelImage", ".", "SetOrigin", "(", "isoLabelImage", ".", "GetOrigin", "(", ")", ")", "\n", "binaryLabelImage", ".", "SetSpacing", "(", "isoLabelImage", ".", "GetSpacing", "(", ")", ")", "\n", "binaryLabelImage", ".", "SetDirection", "(", "isoLabelImage", ".", "GetDirection", "(", ")", ")", "\n", "assert", "thresholdIsoRawImage", ".", "GetSize", "(", ")", "==", "binaryLabelImage", ".", "GetSize", "(", ")", "\n", "\n", "#Extract Patches", "\n", "# Generate Patches of the masked Image", "\n", "threshold", "=", "0.1", "\n", "while", "True", ":", "\n", "        ", "patchImgData", ",", "patch_loc", "=", "Image2Patch", "(", "thresholdIsoRawImage", ",", "binaryLabelImage", ",", "[", "step_size", "]", "*", "3", ",", "[", "patch_size", "]", "*", "3", ",", "threshold", ")", "\n", "if", "patchImgData", ".", "shape", "[", "0", "]", "<", "1000", ":", "\n", "            ", "return", "patchImgData", ",", "patch_loc", "\n", "", "if", "threshold", "<", "1", ":", "\n", "            ", "threshold", "+=", "0.1", "\n", "print", "(", "\"Too many patches, trying again with threshold:\"", ",", "threshold", ")", "\n", "", "else", ":", "\n", "            ", "return", "np", ".", "empty", "(", "[", "0", "]", ")", ",", "np", ".", "empty", "(", "[", "0", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.batmanlab_Context_Aware_SSL.preprocess.1_patchify_atlas.prep_adjacency_matrix": [[91, 107], ["range", "numpy.asarray", "numpy.zeros", "numpy.abs", "np.abs.max", "numpy.abs", "np.asarray.append", "np.zeros.transpose"], "function", ["None"], ["", "", "", "def", "prep_adjacency_matrix", "(", "patch_loc", ")", ":", "\n", "    ", "adj", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "patch_loc", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "adj_row", "=", "np", ".", "zeros", "(", "(", "patch_loc", ".", "shape", "[", "0", "]", ",", ")", ")", "\n", "dist", "=", "np", ".", "abs", "(", "patch_loc", "-", "patch_loc", "[", "i", "]", ")", "\n", "max_side_dist", "=", "dist", ".", "max", "(", "1", ")", "\n", "dist", "=", "dist", "[", "max_side_dist", "<", "patch_size", ",", ":", "]", "\n", "volume", "=", "np", ".", "abs", "(", "dist", "-", "patch_size", ")", "\n", "volume", "=", "volume", "[", ":", ",", "0", "]", "*", "volume", "[", ":", ",", "1", "]", "*", "volume", "[", ":", ",", "2", "]", "\n", "#print(volume.shape)", "\n", "#print(adj_row[max_side_dist<patch_size].shape)", "\n", "adj_row", "[", "max_side_dist", "<", "patch_size", "]", "=", "volume", "/", "(", "patch_size", "**", "3", ")", "\n", "adj", ".", "append", "(", "adj_row", ".", "transpose", "(", ")", ")", "\n", "", "adj", "=", "np", ".", "asarray", "(", "adj", ")", "\n", "#adj = (adj / np.sum(adj, 0)).transpose()", "\n", "return", "adj", "\n", "\n"]], "home.repos.pwc.inspect_result.batmanlab_Context_Aware_SSL.preprocess.1_patchify_atlas.run": [[108, 121], ["1_patchify_atlas.extract_patch", "1_patchify_atlas.prep_adjacency_matrix", "numpy.save", "numpy.save", "numpy.save", "print", "[].split", "os.path.join", "os.path.join", "os.path.join", "isotropicFileName.split"], "function", ["home.repos.pwc.inspect_result.batmanlab_Context_Aware_SSL.preprocess.1_patchify_atlas.extract_patch", "home.repos.pwc.inspect_result.batmanlab_Context_Aware_SSL.preprocess.1_patchify_atlas.prep_adjacency_matrix"], ["", "def", "run", "(", ")", ":", "\n", "\n", "    ", "isotropicFileName", "=", "atlas_image", "\n", "partialLungLabelMapFileName", "=", "atlas_roi_mask", "\n", "\n", "output_basename", "=", "isotropicFileName", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", ".", "split", "(", "'.'", ")", "[", "0", "]", "\n", "\n", "patchImgData", ",", "patch_loc", "=", "extract_patch", "(", "isotropicFileName", ",", "partialLungLabelMapFileName", ")", "\n", "adj", "=", "prep_adjacency_matrix", "(", "patch_loc", ")", "\n", "np", ".", "save", "(", "os", ".", "path", ".", "join", "(", "output_dir", ",", "output_basename", "+", "'_patch.npy'", ")", ",", "patchImgData", ")", "\n", "np", ".", "save", "(", "os", ".", "path", ".", "join", "(", "output_dir", ",", "output_basename", "+", "'_patch_loc.npy'", ")", ",", "patch_loc", ")", "\n", "np", ".", "save", "(", "os", ".", "path", ".", "join", "(", "output_dir", ",", "output_basename", "+", "'_adj.npy'", ")", ",", "adj", ")", "\n", "print", "(", "\"Finished. Total number of patches:\"", ",", "patchImgData", ".", "shape", "[", "0", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.batmanlab_Context_Aware_SSL.preprocess.1_patchify_atlas.main": [[122, 148], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "1_patchify_atlas.run", "os.path.exists", "os.makedirs"], "function", ["home.repos.pwc.inspect_result.batmanlab_Context_Aware_SSL.preprocess.1_patchify_atlas.run"], ["", "def", "main", "(", "argv", ")", ":", "\n", "    ", "global", "output_dir", "\n", "global", "patch_size", "\n", "global", "step_size", "\n", "global", "atlas_image", ",", "atlas_roi_mask", "\n", "\n", "#Parse the arguments", "\n", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Data Preprocessing'", ")", "\n", "parser", ".", "add_argument", "(", "'--atlas_image'", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--atlas_roi_mask'", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'-o'", ",", "'--output_dir'", ",", "type", "=", "str", ",", "default", "=", "'./patch_data_32_6_reg'", ",", "help", "=", "'Directory where intermediate and final files are saved.'", ")", "\n", "parser", ".", "add_argument", "(", "'-s'", ",", "'--patch_size'", ",", "type", "=", "int", ",", "default", "=", "32", ",", "help", "=", "'The size of the 3D patch.'", ")", "\n", "parser", ".", "add_argument", "(", "'-l'", ",", "'--step_size'", ",", "type", "=", "int", ",", "default", "=", "26", ",", "help", "=", "'The overlap between consecutive patches.'", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "output_dir", "=", "args", ".", "output_dir", "\n", "patch_size", "=", "args", ".", "patch_size", "\n", "step_size", "=", "args", ".", "step_size", "\n", "atlas_image", "=", "args", ".", "atlas_image", "\n", "atlas_roi_mask", "=", "args", ".", "atlas_roi_mask", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "output_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "output_dir", ")", "\n", "\n", "", "run", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.batmanlab_Context_Aware_SSL.preprocess.2_registration.clamp_img": [[7, 12], ["SimpleITK.ReadImage", "cif.Execute", "SimpleITK.Cast", "SimpleITK.WriteImage", "img_path.split"], "function", ["None"], ["def", "clamp_img", "(", "img_path", ",", "cif", ")", ":", "\n", "    ", "img", "=", "sitk", ".", "ReadImage", "(", "img_path", ")", "\n", "img", "=", "cif", ".", "Execute", "(", "img", ")", "\n", "img", "=", "sitk", ".", "Cast", "(", "img", ",", "sitk", ".", "sitkInt16", ")", "\n", "sitk", ".", "WriteImage", "(", "img", ",", "\"./INSP2Atlas/clamped/\"", "+", "img_path", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", ")", "\n", "\n"]]}