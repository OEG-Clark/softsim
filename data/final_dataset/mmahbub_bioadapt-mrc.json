{"home.repos.pwc.inspect_result.mmahbub_bioadapt-mrc.src.bioadapt_mrc_model.bioadapt_mrc_net.__init__": [[17, 43], ["torch.Module.__init__", "src.model_type.lower", "transformers.AutoConfig.from_pretrained", "transformers.AutoModelForQuestionAnswering.from_pretrained", "src.enc_disc_mrc.Encoder", "src.enc_disc_mrc.QA_Out", "src.enc_disc_mrc.Disc_QA_Out", "bioadapt_mrc_model.bioadapt_mrc_net.disc_aux_qa_layer.apply", "bool"], "methods", ["home.repos.pwc.inspect_result.mmahbub_bioadapt-mrc.src.enc_disc_mrc.Disc_QA_Out.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "bioadapt_mrc_net", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "configs", ".", "model_type", "=", "configs", ".", "model_type", ".", "lower", "(", ")", "\n", "config", "=", "AutoConfig", ".", "from_pretrained", "(", "\n", "configs", ".", "config_name", "if", "configs", ".", "config_name", "else", "configs", ".", "pretrained_model_name_or_path", ",", "\n", "cache_dir", "=", "configs", ".", "cache_dir", "if", "configs", ".", "cache_dir", "else", "None", ",", "\n", ")", "\n", "\n", "pretrained_model", "=", "AutoModelForQuestionAnswering", ".", "from_pretrained", "(", "\n", "configs", ".", "pretrained_model_name_or_path", ",", "\n", "from_tf", "=", "bool", "(", "\".ckpt\"", "in", "configs", ".", "pretrained_model_name_or_path", ")", ",", "\n", "config", "=", "config", ",", "\n", "cache_dir", "=", "configs", ".", "cache_dir", "if", "configs", ".", "cache_dir", "else", "None", ",", "\n", ")", "\n", "\n", "self", ".", "encoder", "=", "Encoder", "(", "pretrained_model", ",", "\n", "freeze_encoder", "=", "configs", ".", "freeze_encoder", ")", "\n", "\n", "self", ".", "factoid_qa_output_generator", "=", "QA_Out", "(", "pretrained_model", ",", "\n", "freeze_qa_output_generator", "=", "configs", ".", "freeze_qa_output_generator", ")", "\n", "\n", "self", ".", "disc_aux_qa_layer", "=", "Disc_QA_Out", "(", "freeze_aux_qa_output_generator", "=", "configs", ".", "freeze_aux_qa_output_generator", ",", "\n", "freeze_discriminator_encoder", "=", "configs", ".", "freeze_discriminator_encoder", ")", "\n", "\n", "self", ".", "disc_aux_qa_layer", ".", "apply", "(", "self", ".", "init_weights", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mmahbub_bioadapt-mrc.src.bioadapt_mrc_model.bioadapt_mrc_net.forward": [[44, 67], ["bioadapt_mrc_model.bioadapt_mrc_net.move_to_cuda", "bioadapt_mrc_model.bioadapt_mrc_net.siamese_encoder", "bioadapt_mrc_model.bioadapt_mrc_net.siamese_factoid_qa_out_gen", "bioadapt_mrc_model.bioadapt_mrc_net.siamese_discriminator"], "methods", ["home.repos.pwc.inspect_result.mmahbub_bioadapt-mrc.src.bioadapt_mrc_model.bioadapt_mrc_net.move_to_cuda", "home.repos.pwc.inspect_result.mmahbub_bioadapt-mrc.src.bioadapt_mrc_model.bioadapt_mrc_net.siamese_encoder", "home.repos.pwc.inspect_result.mmahbub_bioadapt-mrc.src.bioadapt_mrc_model.bioadapt_mrc_net.siamese_factoid_qa_out_gen", "home.repos.pwc.inspect_result.mmahbub_bioadapt-mrc.src.bioadapt_mrc_model.bioadapt_mrc_net.siamese_discriminator"], ["", "def", "forward", "(", "self", ",", "data_batch", ")", ":", "\n", "        ", "'''\n        input: data batch\n        output: encodings, total loss        \n        '''", "\n", "question_context_features", ",", "start_positions", ",", "end_positions", "=", "self", ".", "move_to_cuda", "(", "data_batch", ")", "\n", "\n", "encodings", "=", "self", ".", "siamese_encoder", "(", "question_context_features", ")", "\n", "factoid_qa_outputs", ",", "original_qa_loss", "=", "self", ".", "siamese_factoid_qa_out_gen", "(", "encodings", ",", "\n", "start_positions", ",", "\n", "end_positions", ")", "\n", "adv_loss", "=", "None", "\n", "aux_qa_loss", "=", "None", "\n", "aux_qa_outputs", "=", "None", "\n", "total_loss", "=", "configs", ".", "qa_loss_alpha", "*", "original_qa_loss", "\n", "if", "configs", ".", "do_train", "and", "configs", ".", "domain_adaptation", ":", "\n", "            ", "adv_loss", ",", "aux_qa_outputs", ",", "aux_qa_loss", "=", "self", ".", "siamese_discriminator", "(", "encodings", ",", "\n", "start_positions", ",", "\n", "end_positions", ")", "\n", "total_loss", "+=", "configs", ".", "adv_loss_beta", "*", "adv_loss", "+", "configs", ".", "aux_layer_gamma", "*", "aux_qa_loss", "\n", "\n", "", "return", "encodings", ",", "factoid_qa_outputs", ",", "aux_qa_outputs", ",", "adv_loss", ",", "aux_qa_loss", ",", "original_qa_loss", ",", "total_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.mmahbub_bioadapt-mrc.src.bioadapt_mrc_model.bioadapt_mrc_net.init_weights": [[68, 81], ["isinstance", "module.weight.data.normal_", "isinstance", "module.bias.data.zero_", "module.weight.data.normal_", "isinstance", "module.weight.data[].zero_", "module.bias.data.zero_", "module.weight.data.fill_"], "methods", ["None"], ["", "def", "init_weights", "(", "self", ",", "module", ")", ":", "\n", "        ", "'''Initialize the weights'''", "\n", "if", "isinstance", "(", "module", ",", "nn", ".", "Linear", ")", ":", "\n", "            ", "module", ".", "weight", ".", "data", ".", "normal_", "(", "mean", "=", "0.0", ",", "std", "=", "configs", ".", "initializer_range", ")", "\n", "if", "module", ".", "bias", "is", "not", "None", ":", "\n", "                ", "module", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "", "elif", "isinstance", "(", "module", ",", "nn", ".", "Embedding", ")", ":", "\n", "            ", "module", ".", "weight", ".", "data", ".", "normal_", "(", "mean", "=", "0.0", ",", "std", "=", "configs", ".", "initializer_range", ")", "\n", "if", "module", ".", "padding_idx", "is", "not", "None", ":", "\n", "                ", "module", ".", "weight", ".", "data", "[", "module", ".", "padding_idx", "]", ".", "zero_", "(", ")", "\n", "", "", "elif", "isinstance", "(", "module", ",", "nn", ".", "LayerNorm", ")", ":", "\n", "            ", "module", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "module", ".", "weight", ".", "data", ".", "fill_", "(", "1.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mmahbub_bioadapt-mrc.src.bioadapt_mrc_model.bioadapt_mrc_net.move_to_cuda": [[82, 100], ["torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "start_positions[].to().long", "end_positions[].to().long", "start_positions[].to().long", "end_positions[].to().long", "start_positions[].to().long", "end_positions[].to().long", "[].to().long", "[].to().long", "[].to().long", "start_positions[].to", "end_positions[].to", "start_positions[].to", "end_positions[].to", "start_positions[].to", "end_positions[].to", "[].to", "[].to", "[].to"], "methods", ["None"], ["", "", "def", "move_to_cuda", "(", "self", ",", "data_batch", ")", ":", "\n", "        ", "'''mode data batch to cuda'''", "\n", "question_context_features", ",", "start_positions", ",", "end_positions", "=", "data_batch", "\n", "for", "key", "in", "question_context_features", "[", "0", "]", ":", "\n", "            ", "question_context_features", "[", "0", "]", "[", "key", "]", "=", "torch", ".", "autograd", ".", "Variable", "(", "\n", "question_context_features", "[", "0", "]", "[", "key", "]", ".", "to", "(", "configs", ".", "device", ")", ".", "long", "(", ")", ")", "\n", "question_context_features", "[", "1", "]", "[", "key", "]", "=", "torch", ".", "autograd", ".", "Variable", "(", "\n", "question_context_features", "[", "1", "]", "[", "key", "]", ".", "to", "(", "configs", ".", "device", ")", ".", "long", "(", ")", ")", "\n", "question_context_features", "[", "2", "]", "[", "key", "]", "=", "torch", ".", "autograd", ".", "Variable", "(", "\n", "question_context_features", "[", "2", "]", "[", "key", "]", ".", "to", "(", "configs", ".", "device", ")", ".", "long", "(", ")", ")", "\n", "\n", "", "start_positions", "[", "0", "]", "=", "torch", ".", "autograd", ".", "Variable", "(", "start_positions", "[", "0", "]", ".", "to", "(", "configs", ".", "device", ")", ".", "long", "(", ")", ")", "\n", "end_positions", "[", "0", "]", "=", "torch", ".", "autograd", ".", "Variable", "(", "end_positions", "[", "0", "]", ".", "to", "(", "configs", ".", "device", ")", ".", "long", "(", ")", ")", "\n", "start_positions", "[", "1", "]", "=", "torch", ".", "autograd", ".", "Variable", "(", "start_positions", "[", "1", "]", ".", "to", "(", "configs", ".", "device", ")", ".", "long", "(", ")", ")", "\n", "end_positions", "[", "1", "]", "=", "torch", ".", "autograd", ".", "Variable", "(", "end_positions", "[", "1", "]", ".", "to", "(", "configs", ".", "device", ")", ".", "long", "(", ")", ")", "\n", "start_positions", "[", "2", "]", "=", "torch", ".", "autograd", ".", "Variable", "(", "start_positions", "[", "2", "]", ".", "to", "(", "configs", ".", "device", ")", ".", "long", "(", ")", ")", "\n", "end_positions", "[", "2", "]", "=", "torch", ".", "autograd", ".", "Variable", "(", "end_positions", "[", "2", "]", ".", "to", "(", "configs", ".", "device", ")", ".", "long", "(", ")", ")", "\n", "return", "question_context_features", ",", "start_positions", ",", "end_positions", "\n", "\n"]], "home.repos.pwc.inspect_result.mmahbub_bioadapt-mrc.src.bioadapt_mrc_model.bioadapt_mrc_net.siamese_encoder": [[102, 108], ["bioadapt_mrc_model.bioadapt_mrc_net.encoder", "bioadapt_mrc_model.bioadapt_mrc_net.encoder", "bioadapt_mrc_model.bioadapt_mrc_net.encoder"], "methods", ["None"], ["", "def", "siamese_encoder", "(", "self", ",", "question_context_features", ")", ":", "\n", "        ", "'''generate encodings'''", "\n", "encoding_domain_0", "=", "self", ".", "encoder", "(", "question_context_features", "[", "0", "]", ")", "# out dim: B X 512 X 784", "\n", "encoding_domain_1", "=", "self", ".", "encoder", "(", "question_context_features", "[", "1", "]", ")", "# out dim: B X 512 X 784", "\n", "encoding_domain_2", "=", "self", ".", "encoder", "(", "question_context_features", "[", "2", "]", ")", "# out dim: B X 512 X 784", "\n", "return", "[", "encoding_domain_0", ",", "encoding_domain_1", ",", "encoding_domain_2", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.mmahbub_bioadapt-mrc.src.bioadapt_mrc_model.bioadapt_mrc_net.siamese_discriminator": [[110, 138], ["bioadapt_mrc_model.bioadapt_mrc_net.gradient_reversal_layer", "bioadapt_mrc_model.bioadapt_mrc_net.disc_aux_qa_layer", "bioadapt_mrc_model.bioadapt_mrc_net.gradient_reversal_layer", "bioadapt_mrc_model.bioadapt_mrc_net.disc_aux_qa_layer", "bioadapt_mrc_model.bioadapt_mrc_net.gradient_reversal_layer", "bioadapt_mrc_model.bioadapt_mrc_net.disc_aux_qa_layer", "torch.nn.TripletMarginWithDistanceLoss", "torch.nn.TripletMarginWithDistanceLoss", "torch.nn.TripletMarginWithDistanceLoss", "torch.nn.TripletMarginWithDistanceLoss", "[].cuda", "torch.nn.TripletMarginWithDistanceLoss.", "torch.nn.TripletMarginWithDistanceLoss.", "torch.nn.functional.cosine_similarity", "torch.nn.functional.cosine_similarity", "torch.nn.functional.cosine_similarity", "torch.nn.functional.cosine_similarity"], "methods", ["home.repos.pwc.inspect_result.mmahbub_bioadapt-mrc.src.bioadapt_mrc_model.bioadapt_mrc_net.gradient_reversal_layer", "home.repos.pwc.inspect_result.mmahbub_bioadapt-mrc.src.bioadapt_mrc_model.bioadapt_mrc_net.gradient_reversal_layer", "home.repos.pwc.inspect_result.mmahbub_bioadapt-mrc.src.bioadapt_mrc_model.bioadapt_mrc_net.gradient_reversal_layer"], ["", "def", "siamese_discriminator", "(", "self", ",", "encodings", ",", "start_positions", ",", "end_positions", ")", ":", "\n", "        ", "'''\n        generate the probability of the two samples coming from the same domain \n        :param encodings:\n        :return:\n        '''", "\n", "encoding_domain_0", ",", "encoding_domain_1", ",", "encoding_domain_2", "=", "encodings", "\n", "\n", "reversed_representation_0", "=", "self", ".", "gradient_reversal_layer", "(", "encoding_domain_0", ")", "\n", "reversed_representation_0", ",", "aux_qa_outputs_0", "=", "self", ".", "disc_aux_qa_layer", "(", "reversed_representation_0", ",", "start_positions", "[", "0", "]", ",", "end_positions", "[", "0", "]", ")", "\n", "\n", "reversed_representation_1", "=", "self", ".", "gradient_reversal_layer", "(", "encoding_domain_1", ")", "\n", "reversed_representation_1", ",", "_", "=", "self", ".", "disc_aux_qa_layer", "(", "reversed_representation_1", ",", "start_positions", "[", "1", "]", ",", "end_positions", "[", "1", "]", ")", "\n", "\n", "reversed_representation_2", "=", "self", ".", "gradient_reversal_layer", "(", "encoding_domain_2", ")", "\n", "reversed_representation_2", ",", "_", "=", "self", ".", "disc_aux_qa_layer", "(", "reversed_representation_2", ",", "start_positions", "[", "2", "]", ",", "end_positions", "[", "2", "]", ")", "\n", "\n", "triplet_loss", "=", "torch", ".", "nn", ".", "TripletMarginWithDistanceLoss", "(", "\n", "distance_function", "=", "lambda", "x", ",", "y", ":", "1.0", "-", "torch", ".", "nn", ".", "functional", ".", "cosine_similarity", "(", "x", ",", "y", ")", ",", "\n", "margin", "=", "1.0", ",", "reduction", "=", "'none'", ")", "\n", "\n", "adv_loss", "=", "triplet_loss", "(", "anchor", "=", "reversed_representation_0", ",", "\n", "positive", "=", "reversed_representation_1", ",", "\n", "negative", "=", "reversed_representation_2", ")", "[", "0", "]", ".", "cuda", "(", ")", "\n", "\n", "aux_qa_loss", "=", "aux_qa_outputs_0", ".", "loss", "\n", "\n", "return", "adv_loss", ",", "aux_qa_outputs_0", ",", "aux_qa_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.mmahbub_bioadapt-mrc.src.bioadapt_mrc_model.bioadapt_mrc_net.gradient_reversal_layer": [[140, 147], ["src.enc_disc_mrc.ReverseLayerF.apply"], "methods", ["None"], ["", "def", "gradient_reversal_layer", "(", "self", ",", "encoding", ")", ":", "\n", "        ", "'''\n        generate an output with the same floating values but during backpass their gradient will be negated\n        '''", "\n", "reversed_feature", "=", "ReverseLayerF", ".", "apply", "(", "encoding", ".", "last_hidden_state", ",", "\n", "configs", ".", "reverse_layer_lambda", ")", "\n", "return", "reversed_feature", "\n", "\n"]], "home.repos.pwc.inspect_result.mmahbub_bioadapt-mrc.src.bioadapt_mrc_model.bioadapt_mrc_net.siamese_factoid_qa_out_gen": [[149, 162], ["bioadapt_mrc_model.bioadapt_mrc_net.factoid_qa_output_generator"], "methods", ["None"], ["", "def", "siamese_factoid_qa_out_gen", "(", "self", ",", "encodings", ",", "start_positions", ",", "end_positions", ")", ":", "\n", "        ", "'''\n        input: encodings, start_positions, end_positions\n        output: QA loss\n        '''", "\n", "encoding_domain_0", ",", "encoding_domain_1", ",", "encoding_domain_2", "=", "encodings", "\n", "\n", "factoid_qa_output_0", "=", "self", ".", "factoid_qa_output_generator", "(", "encoding_domain_0", ",", "\n", "start_positions", "[", "0", "]", ",", "\n", "end_positions", "[", "0", "]", ")", "\n", "total_loss", "=", "factoid_qa_output_0", ".", "loss", "\n", "\n", "return", "factoid_qa_output_0", ",", "total_loss", "\n", "", "", ""]], "home.repos.pwc.inspect_result.mmahbub_bioadapt-mrc.src.tokenization.load_and_cache_examples": [[28, 85], ["os.path.join", "print", "torch.distributed.barrier", "os.path.exists", "logger.info", "torch.load", "logger.info", "transformers.data.processors.squad.SquadV1Processor", "transformers.data.processors.squad.SquadV1Processor.get_dev_examples", "transformers.squad_convert_examples_to_features", "torch.distributed.barrier", "list().pop", "str", "logger.info", "torch.save", "exit", "list", "filter", "src.original_model_name_or_path.split"], "function", ["None"], ["def", "load_and_cache_examples", "(", "tokenizer", ",", "evaluate", "=", "False", ",", "output_examples", "=", "False", ")", ":", "\n", "    ", "if", "configs", ".", "local_rank", "not", "in", "[", "-", "1", ",", "0", "]", "and", "not", "evaluate", ":", "\n", "# Make sure only the first process in distributed training process the dataset, and the others will use the cache", "\n", "        ", "torch", ".", "distributed", ".", "barrier", "(", ")", "\n", "\n", "# Load data features from cache or dataset file", "\n", "", "input_dir", "=", "configs", ".", "output_dir", "if", "configs", ".", "output_dir", "else", "\".\"", "\n", "cached_features_file", "=", "os", ".", "path", ".", "join", "(", "\n", "input_dir", ",", "\n", "\"cached_{}_{}_{}_{}_{}\"", ".", "format", "(", "\n", "\"dev\"", ",", "\n", "list", "(", "filter", "(", "None", ",", "configs", ".", "original_model_name_or_path", ".", "split", "(", "\"/\"", ")", ")", ")", ".", "pop", "(", ")", ",", "\n", "str", "(", "configs", ".", "max_seq_length", ")", ",", "\n", "\"test\"", "if", "configs", ".", "do_test", "else", "exit", "(", "1", ")", ",", "\n", "configs", ".", "out_domain_name", ",", "\n", ")", ",", "\n", ")", "\n", "\n", "print", "(", "cached_features_file", ")", "\n", "\n", "# init features and dataset from cache if it exists", "\n", "if", "os", ".", "path", ".", "exists", "(", "cached_features_file", ")", "and", "not", "configs", ".", "overwrite_cache", ":", "\n", "        ", "logger", ".", "info", "(", "\"Loading features from cached file %s\"", ",", "cached_features_file", ")", "\n", "features_and_dataset", "=", "torch", ".", "load", "(", "cached_features_file", ")", "\n", "features", ",", "dataset", ",", "examples", "=", "(", "\n", "features_and_dataset", "[", "\"features\"", "]", ",", "\n", "features_and_dataset", "[", "\"dataset\"", "]", ",", "\n", "features_and_dataset", "[", "\"examples\"", "]", ",", "\n", ")", "\n", "", "else", ":", "\n", "        ", "logger", ".", "info", "(", "\"Creating features from dataset file at %s\"", ",", "input_dir", ")", "\n", "\n", "processor", "=", "SquadV1Processor", "(", ")", "\n", "examples", "=", "processor", ".", "get_dev_examples", "(", "configs", ".", "data_dir", ",", "filename", "=", "configs", ".", "predict_file", ")", "\n", "\n", "features", ",", "dataset", "=", "squad_convert_examples_to_features", "(", "\n", "examples", "=", "examples", ",", "\n", "tokenizer", "=", "tokenizer", ",", "\n", "max_seq_length", "=", "configs", ".", "max_seq_length", ",", "\n", "doc_stride", "=", "configs", ".", "doc_stride", ",", "\n", "max_query_length", "=", "configs", ".", "max_query_length", ",", "\n", "is_training", "=", "False", ",", "\n", "return_dataset", "=", "\"pt\"", ",", "\n", "threads", "=", "configs", ".", "threads", ",", "\n", ")", "\n", "\n", "if", "configs", ".", "local_rank", "in", "[", "-", "1", ",", "0", "]", ":", "\n", "            ", "logger", ".", "info", "(", "\"Saving features into cached file %s\"", ",", "cached_features_file", ")", "\n", "torch", ".", "save", "(", "{", "\"features\"", ":", "features", ",", "\"dataset\"", ":", "dataset", ",", "\"examples\"", ":", "examples", "}", ",", "cached_features_file", ")", "\n", "\n", "", "", "if", "configs", ".", "local_rank", "==", "0", "and", "not", "evaluate", ":", "\n", "# Make sure only the first process in distributed training process the dataset, and the others will use the cache", "\n", "        ", "torch", ".", "distributed", ".", "barrier", "(", ")", "\n", "\n", "", "if", "output_examples", ":", "\n", "        ", "return", "dataset", ",", "examples", ",", "features", "\n", "", "return", "dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.mmahbub_bioadapt-mrc.src.tokenization.main": [[87, 96], ["transformers.AutoTokenizer.from_pretrained", "tokenization.load_and_cache_examples"], "function", ["home.repos.pwc.inspect_result.mmahbub_bioadapt-mrc.src.tokenization.load_and_cache_examples"], ["", "def", "main", "(", ")", ":", "\n", "\n", "    ", "tokenizer", "=", "AutoTokenizer", ".", "from_pretrained", "(", "\n", "configs", ".", "tokenizer_name", "if", "configs", ".", "tokenizer_name", "else", "configs", ".", "pretrained_model_name_or_path", ",", "\n", "do_lower_case", "=", "configs", ".", "do_lower_case", ",", "\n", "cache_dir", "=", "configs", ".", "cache_dir", "if", "configs", ".", "cache_dir", "else", "None", ",", "\n", "use_fast", "=", "False", ",", "# SquadDataset is not compatible with Fast tokenizers which have a smarter overflow handeling", "\n", ")", "\n", "load_and_cache_examples", "(", "tokenizer", ",", "evaluate", "=", "True", ",", "output_examples", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mmahbub_bioadapt-mrc.src.test.set_seed": [[40, 46], ["random.seed", "numpy.random.seed", "torch.manual_seed", "torch.cuda.manual_seed_all", "src.configs"], "function", ["None"], ["def", "set_seed", "(", "configs", ")", ":", "\n", "    ", "random", ".", "seed", "(", "configs", ".", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "configs", ".", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "configs", ".", "seed", ")", "\n", "if", "configs", ".", "n_gpu", ">", "0", ":", "\n", "        ", "torch", ".", "cuda", ".", "manual_seed_all", "(", "configs", ".", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mmahbub_bioadapt-mrc.src.test.to_list": [[48, 50], ["tensor.detach().cpu().tolist", "tensor.detach().cpu", "tensor.detach"], "function", ["None"], ["", "", "def", "to_list", "(", "tensor", ")", ":", "\n", "    ", "return", "tensor", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "tolist", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mmahbub_bioadapt-mrc.src.test.load_all_examples": [[51, 80], ["os.path.join", "logger.info", "torch.load", "list().pop", "str", "str", "exit", "list", "filter", "src.original_model_name_or_path.split"], "function", ["None"], ["", "def", "load_all_examples", "(", "output_examples", ")", ":", "\n", "# Load data features", "\n", "    ", "input_dir", "=", "configs", ".", "output_dir", "if", "configs", ".", "output_dir", "else", "\".\"", "\n", "dataset_name", "=", "configs", ".", "out_domain_name", "\n", "\n", "prefix", "=", "f'test_{dataset_name}'", "\n", "\n", "cached_features_file", "=", "os", ".", "path", ".", "join", "(", "\n", "input_dir", ",", "\n", "\"cached_{}_{}_{}_{}_{}\"", ".", "format", "(", "\n", "\"dev\"", ",", "\n", "list", "(", "filter", "(", "None", ",", "configs", ".", "original_model_name_or_path", ".", "split", "(", "\"/\"", ")", ")", ")", ".", "pop", "(", ")", ",", "\n", "str", "(", "configs", ".", "max_seq_length", ")", ",", "\n", "\"test\"", "if", "configs", ".", "do_test", "else", "exit", "(", "1", ")", ",", "\n", "str", "(", "dataset_name", ")", ",", "\n", ")", ",", "\n", ")", "\n", "\n", "logger", ".", "info", "(", "\"Loading features from cached file %s\"", ",", "cached_features_file", ")", "\n", "features_and_dataset", "=", "torch", ".", "load", "(", "cached_features_file", ")", "\n", "features", ",", "dataset", ",", "examples", "=", "(", "\n", "features_and_dataset", "[", "\"features\"", "]", ",", "\n", "features_and_dataset", "[", "\"dataset\"", "]", ",", "\n", "features_and_dataset", "[", "\"examples\"", "]", ",", "\n", ")", "\n", "\n", "if", "output_examples", ":", "\n", "        ", "return", "dataset", ",", "examples", ",", "features", ",", "prefix", ",", "dataset_name", "\n", "", "return", "dataset", ",", "prefix", ",", "dataset_name", "\n", "\n"]], "home.repos.pwc.inspect_result.mmahbub_bioadapt-mrc.src.test.evaluate": [[82, 159], ["test.load_all_examples", "torch.utils.data.SequentialSampler", "torch.utils.data.DataLoader", "logger.info", "logger.info", "logger.info", "timeit.default_timer", "tqdm.tqdm", "logger.info", "os.path.join", "os.path.join", "os.path.isfile", "transformers.data.metrics.squad_metrics.compute_predictions_logits", "os.makedirs", "max", "torch.nn.DataParallel", "len", "torch.nn.DataParallel.eval", "tuple", "enumerate", "timeit.default_timer", "os.remove", "os.path.exists", "isinstance", "torch.no_grad", "torch.nn.DataParallel.encoder", "torch.nn.DataParallel.factoid_qa_output_generator", "int", "transformers.data.processors.squad.SquadResult", "all_results.append", "len", "t.to", "test.to_list", "feature_index.item"], "function", ["home.repos.pwc.inspect_result.mmahbub_bioadapt-mrc.src.test.load_all_examples", "home.repos.pwc.inspect_result.mmahbub_bioadapt-mrc.src.test.to_list"], ["", "def", "evaluate", "(", "model", ",", "tokenizer", ")", ":", "\n", "    ", "dataset", ",", "examples", ",", "features", ",", "prefix", ",", "dataset_name", "=", "load_all_examples", "(", "output_examples", "=", "True", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "configs", ".", "output_dir", ")", "and", "configs", ".", "local_rank", "in", "[", "-", "1", ",", "0", "]", ":", "\n", "        ", "os", ".", "makedirs", "(", "configs", ".", "output_dir", ")", "\n", "\n", "", "eval_batch_size", "=", "configs", ".", "per_gpu_eval_batch_size", "*", "max", "(", "1", ",", "configs", ".", "n_gpu", ")", "\n", "\n", "eval_sampler", "=", "SequentialSampler", "(", "dataset", ")", "\n", "eval_dataloader", "=", "DataLoader", "(", "dataset", ",", "sampler", "=", "eval_sampler", ",", "batch_size", "=", "eval_batch_size", ")", "\n", "\n", "# multi-gpu evaluate", "\n", "if", "configs", ".", "n_gpu", ">", "1", "and", "not", "isinstance", "(", "model", ",", "torch", ".", "nn", ".", "DataParallel", ")", ":", "\n", "        ", "model", "=", "torch", ".", "nn", ".", "DataParallel", "(", "model", ")", "\n", "\n", "# evaluation", "\n", "", "logger", ".", "info", "(", "\"***** Running evaluation {} *****\"", ".", "format", "(", "prefix", ")", ")", "\n", "logger", ".", "info", "(", "\"  Num examples = %d\"", ",", "len", "(", "dataset", ")", ")", "\n", "logger", ".", "info", "(", "\"  Batch size = %d\"", ",", "eval_batch_size", ")", "\n", "\n", "all_results", "=", "[", "]", "\n", "start_time", "=", "timeit", ".", "default_timer", "(", ")", "\n", "\n", "for", "batch", "in", "tqdm", "(", "eval_dataloader", ",", "desc", "=", "\"Evaluating\"", ")", ":", "\n", "        ", "model", ".", "eval", "(", ")", "\n", "batch", "=", "tuple", "(", "t", ".", "to", "(", "configs", ".", "device", ")", "for", "t", "in", "batch", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "inputs", "=", "{", "\n", "\"input_ids\"", ":", "batch", "[", "0", "]", ",", "\n", "\"attention_mask\"", ":", "batch", "[", "1", "]", ",", "\n", "\"token_type_ids\"", ":", "batch", "[", "2", "]", ",", "\n", "}", "\n", "\n", "if", "configs", ".", "model_type", "in", "[", "\"xlm\"", ",", "\"roberta\"", ",", "\"distilbert\"", ",", "\"camembert\"", ",", "\"bart\"", ",", "\"longformer\"", "]", ":", "\n", "                ", "del", "inputs", "[", "\"token_type_ids\"", "]", "\n", "\n", "", "feature_indices", "=", "batch", "[", "3", "]", "\n", "encoded_output", "=", "model", ".", "encoder", "(", "inputs", ")", "\n", "outputs", "=", "model", ".", "factoid_qa_output_generator", "(", "encoded_output", ")", "\n", "\n", "", "for", "i", ",", "feature_index", "in", "enumerate", "(", "feature_indices", ")", ":", "\n", "            ", "eval_feature", "=", "features", "[", "feature_index", ".", "item", "(", ")", "]", "\n", "unique_id", "=", "int", "(", "eval_feature", ".", "unique_id", ")", "\n", "\n", "output", "=", "[", "to_list", "(", "output", "[", "i", "]", ")", "for", "output", "in", "outputs", "[", ":", "2", "]", "]", "\n", "\n", "start_logits", ",", "end_logits", "=", "output", "\n", "result", "=", "SquadResult", "(", "unique_id", ",", "start_logits", ",", "end_logits", ")", "\n", "\n", "all_results", ".", "append", "(", "result", ")", "\n", "\n", "", "", "evalTime", "=", "timeit", ".", "default_timer", "(", ")", "-", "start_time", "\n", "logger", ".", "info", "(", "\"  Evaluation done in total %f secs (%f sec per example)\"", ",", "evalTime", ",", "evalTime", "/", "len", "(", "dataset", ")", ")", "\n", "\n", "# Compute predictions", "\n", "output_prediction_file", "=", "os", ".", "path", ".", "join", "(", "configs", ".", "output_dir", ",", "\"predictions_{}.json\"", ".", "format", "(", "prefix", ")", ")", "\n", "output_nbest_file", "=", "os", ".", "path", ".", "join", "(", "configs", ".", "output_dir", ",", "\"nbest_predictions_{}_base.json\"", ".", "format", "(", "prefix", ")", ")", "\n", "output_null_log_odds_file", "=", "None", "\n", "\n", "if", "os", ".", "path", ".", "isfile", "(", "output_nbest_file", ")", ":", "\n", "        ", "os", ".", "remove", "(", "output_nbest_file", ")", "\n", "\n", "\n", "", "predictions", "=", "compute_predictions_logits", "(", "\n", "examples", ",", "\n", "features", ",", "\n", "all_results", ",", "\n", "configs", ".", "n_best_size", ",", "\n", "configs", ".", "max_answer_length", ",", "\n", "configs", ".", "do_lower_case", ",", "\n", "output_prediction_file", ",", "\n", "output_nbest_file", ",", "\n", "output_null_log_odds_file", ",", "\n", "configs", ".", "verbose_logging", ",", "\n", "configs", ".", "version_2_with_negative", ",", "\n", "configs", ".", "null_score_diff_threshold", ",", "\n", "tokenizer", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.mmahbub_bioadapt-mrc.src.test.main": [[162, 220], ["test.set_seed", "src.model_type.lower", "transformers.AutoTokenizer.from_pretrained", "logger.warning", "torch.distributed.barrier", "logger.info", "logger.info", "src.bioadapt_mrc_model.bioadapt_mrc_net", "src.bioadapt_mrc_model.bioadapt_mrc_net.to", "test.evaluate", "os.path.exists", "os.system", "os.system", "print", "list", "print", "print", "print", "src.bioadapt_mrc_model.bioadapt_mrc_net.load_state_dict", "os.remove", "open", "f.readlines", "map", "round", "len", "checkpoint.split", "torch.load", "result[].replace().split", "result[].replace"], "function", ["home.repos.pwc.inspect_result.mmahbub_bioadapt-mrc.src.test.set_seed", "home.repos.pwc.inspect_result.mmahbub_bioadapt-mrc.src.test.evaluate"], ["", "def", "main", "(", ")", ":", "\n", "\n", "    ", "set_seed", "(", "configs", ")", "\n", "\n", "if", "configs", ".", "doc_stride", ">=", "configs", ".", "max_seq_length", "-", "configs", ".", "max_query_length", ":", "\n", "        ", "logger", ".", "warning", "(", "\n", "\"WARNING - You've set a doc stride which may be superior to the document length in some \"", "\n", "\"examples. This could result in errors when building features from the examples. Please reduce the doc \"", "\n", "\"stride or increase the maximum length to ensure the features are correctly built.\"", "\n", ")", "\n", "\n", "# load pretrained model and tokenizer", "\n", "", "if", "configs", ".", "local_rank", "not", "in", "[", "-", "1", ",", "0", "]", ":", "\n", "# make sure only the first process in distributed training will download model & vocab", "\n", "        ", "torch", ".", "distributed", ".", "barrier", "(", ")", "\n", "\n", "", "configs", ".", "model_type", "=", "configs", ".", "model_type", ".", "lower", "(", ")", "\n", "\n", "tokenizer", "=", "AutoTokenizer", ".", "from_pretrained", "(", "\n", "configs", ".", "tokenizer_name", "if", "configs", ".", "tokenizer_name", "else", "configs", ".", "pretrained_model_name_or_path", ",", "\n", "do_lower_case", "=", "configs", ".", "do_lower_case", ",", "\n", "cache_dir", "=", "configs", ".", "cache_dir", "if", "configs", ".", "cache_dir", "else", "None", ",", "\n", "use_fast", "=", "False", ",", "# SquadDataset is not compatible with Fast tokenizers which have a smarter overflow handeling", "\n", ")", "\n", "\n", "if", "configs", ".", "local_rank", "in", "[", "-", "1", ",", "0", "]", ":", "\n", "        ", "logger", ".", "info", "(", "\"Loading checkpoint %s for evaluation\"", ",", "configs", ".", "trained_model_name", ")", "\n", "checkpoints", "=", "[", "configs", ".", "output_model_dir", "]", "\n", "\n", "logger", ".", "info", "(", "\"Evaluate the following checkpoints: %s\"", ",", "checkpoints", ")", "\n", "\n", "for", "checkpoint", "in", "checkpoints", ":", "\n", "# reload the model", "\n", "            ", "global_step", "=", "checkpoint", ".", "split", "(", "\"-\"", ")", "[", "-", "1", "]", "if", "len", "(", "checkpoints", ")", ">", "1", "else", "\"\"", "\n", "model", "=", "bioadapt_mrc_net", "(", ")", "\n", "\n", "if", "configs", ".", "USE_TRAINED_MODEL", ":", "\n", "                ", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "f'{checkpoint}{configs.trained_model_name}'", ")", ")", "# , force_download=True)", "\n", "\n", "", "model", ".", "to", "(", "configs", ".", "device", ")", "\n", "\n", "evaluate", "(", "model", ",", "tokenizer", ")", "\n", "\n", "if", "os", ".", "path", ".", "exists", "(", "f'{configs.output_dir}sacc_lacc_mrr.txt'", ")", ":", "\n", "                ", "os", ".", "remove", "(", "f'{configs.output_dir}sacc_lacc_mrr.txt'", ")", "\n", "\n", "", "os", ".", "system", "(", "f\"python3 transform_n2b_factoid.py --nbest_path /net/kdinxidk03/opt/NFS/75y/data/qa/output/nbest_predictions_test_{configs.out_domain_name}_base.json --output_path {configs.output_dir}\"", ")", "\n", "os", ".", "system", "(", "f\"java -Xmx10G -cp {configs.java_file_path} {configs.golden_data_folder}{configs.golden_file} {configs.output_dir}BioASQform_BioASQ-answer.json | cut -d' ' -f2,3,4 | sed -e 's/ /,/g' >> {configs.output_dir}sacc_lacc_mrr.txt\"", ")", "\n", "print", "(", "'\\n'", ")", "\n", "\n", "with", "open", "(", "f'{configs.output_dir}sacc_lacc_mrr.txt'", ",", "'r'", ")", "as", "f", ":", "\n", "                ", "result", "=", "f", ".", "readlines", "(", ")", "\n", "", "result", "=", "list", "(", "map", "(", "float", ",", "result", "[", "-", "1", "]", ".", "replace", "(", "'\\n'", ",", "''", ")", ".", "split", "(", "','", ")", ")", ")", "\n", "result", "=", "[", "round", "(", "res", ",", "4", ")", "for", "res", "in", "result", "]", "\n", "\n", "print", "(", "f'SAcc: {result[0]}'", ")", "\n", "print", "(", "f'LAcc: {result[1]}'", ")", "\n", "print", "(", "f'MRR : {result[2]}'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mmahbub_bioadapt-mrc.src.enc_disc_mrc.Encoder.__init__": [[8, 25], ["torch.Module.__init__", "enc_disc_mrc.Encoder.encoder.parameters"], "methods", ["home.repos.pwc.inspect_result.mmahbub_bioadapt-mrc.src.enc_disc_mrc.Disc_QA_Out.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "model", ",", "\n", "freeze_encoder", "=", "False", ")", ":", "\n", "        ", "super", "(", "Encoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "if", "configs", ".", "model_type", "==", "'bert'", ":", "\n", "            ", "self", ".", "encoder", "=", "model", ".", "bert", "\n", "", "elif", "configs", ".", "model_type", "==", "'bart'", ":", "\n", "            ", "self", ".", "encoder", "=", "model", ".", "model", ".", "encoder", "\n", "", "elif", "configs", ".", "model_type", "==", "'electra'", ":", "\n", "            ", "self", ".", "encoder", "=", "model", ".", "electra", "\n", "", "elif", "configs", ".", "model_type", "==", "'distilbert'", ":", "\n", "            ", "self", ".", "encoder", "=", "model", ".", "distilbert", "\n", "\n", "", "if", "freeze_encoder", ":", "\n", "            ", "for", "param", "in", "self", ".", "encoder", ".", "parameters", "(", ")", ":", "\n", "                ", "param", ".", "requires_grad", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.mmahbub_bioadapt-mrc.src.enc_disc_mrc.Encoder.forward": [[26, 35], ["enc_disc_mrc.Encoder.encoder"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "\n", "inputs", ")", ":", "\n", "        ", "sequence_output", "=", "self", ".", "encoder", "(", "\n", "**", "inputs", ",", "\n", "output_attentions", "=", "True", ",", "\n", "output_hidden_states", "=", "True", ",", "\n", ")", "\n", "\n", "return", "sequence_output", "\n", "\n"]], "home.repos.pwc.inspect_result.mmahbub_bioadapt-mrc.src.enc_disc_mrc.QA_Out.__init__": [[38, 48], ["torch.Module.__init__", "enc_disc_mrc.QA_Out.qa_outputs.parameters"], "methods", ["home.repos.pwc.inspect_result.mmahbub_bioadapt-mrc.src.enc_disc_mrc.Disc_QA_Out.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "model", ",", "\n", "freeze_qa_output_generator", "=", "False", "\n", ")", ":", "\n", "        ", "super", "(", "QA_Out", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "qa_outputs", "=", "model", ".", "qa_outputs", "\n", "\n", "if", "freeze_qa_output_generator", ":", "\n", "            ", "for", "param", "in", "self", ".", "qa_outputs", ".", "parameters", "(", ")", ":", "\n", "                ", "param", ".", "requires_grad", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.mmahbub_bioadapt-mrc.src.enc_disc_mrc.QA_Out.forward": [[49, 84], ["enc_disc_mrc.QA_Out.qa_outputs", "enc_disc_mrc.QA_Out.split", "start_logits.squeeze().contiguous.squeeze().contiguous.squeeze().contiguous", "end_logits.squeeze().contiguous.squeeze().contiguous.squeeze().contiguous", "transformers.modeling_outputs.QuestionAnsweringModelOutput", "start_logits.squeeze().contiguous.squeeze().contiguous.size", "start_positions.squeeze.squeeze.clamp", "end_positions.squeeze.squeeze.clamp", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss.", "torch.nn.CrossEntropyLoss.", "torch.nn.CrossEntropyLoss.", "torch.nn.CrossEntropyLoss.", "start_logits.squeeze().contiguous.squeeze().contiguous.squeeze", "end_logits.squeeze().contiguous.squeeze().contiguous.squeeze", "len", "start_positions.squeeze.squeeze.squeeze", "len", "end_positions.squeeze.squeeze.squeeze", "start_positions.squeeze.squeeze.size", "end_positions.squeeze.squeeze.size"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "\n", "encoder_out", ",", "\n", "start_positions", "=", "None", ",", "\n", "end_positions", "=", "None", ")", ":", "\n", "\n", "        ", "logits", "=", "self", ".", "qa_outputs", "(", "encoder_out", ".", "last_hidden_state", ")", "\n", "\n", "start_logits", ",", "end_logits", "=", "logits", ".", "split", "(", "1", ",", "dim", "=", "-", "1", ")", "\n", "start_logits", "=", "start_logits", ".", "squeeze", "(", "-", "1", ")", ".", "contiguous", "(", ")", "\n", "end_logits", "=", "end_logits", ".", "squeeze", "(", "-", "1", ")", ".", "contiguous", "(", ")", "\n", "\n", "total_loss", "=", "None", "\n", "if", "start_positions", "is", "not", "None", "and", "end_positions", "is", "not", "None", ":", "\n", "# if we are on multi-GPU, split add a dimension", "\n", "            ", "if", "len", "(", "start_positions", ".", "size", "(", ")", ")", ">", "1", ":", "\n", "                ", "start_positions", "=", "start_positions", ".", "squeeze", "(", "-", "1", ")", "\n", "", "if", "len", "(", "end_positions", ".", "size", "(", ")", ")", ">", "1", ":", "\n", "                ", "end_positions", "=", "end_positions", ".", "squeeze", "(", "-", "1", ")", "\n", "# sometimes the start/end positions are outside our model inputs, we ignore these terms", "\n", "", "ignored_index", "=", "start_logits", ".", "size", "(", "1", ")", "\n", "start_positions", "=", "start_positions", ".", "clamp", "(", "0", ",", "ignored_index", ")", "\n", "end_positions", "=", "end_positions", ".", "clamp", "(", "0", ",", "ignored_index", ")", "\n", "\n", "loss_fct", "=", "torch", ".", "nn", ".", "CrossEntropyLoss", "(", "ignore_index", "=", "ignored_index", ")", "\n", "\n", "start_loss", "=", "loss_fct", "(", "start_logits", ",", "start_positions", ")", "\n", "end_loss", "=", "loss_fct", "(", "end_logits", ",", "end_positions", ")", "\n", "total_loss", "=", "(", "start_loss", "+", "end_loss", ")", "/", "2", "\n", "\n", "", "return", "QuestionAnsweringModelOutput", "(", "\n", "loss", "=", "total_loss", ",", "\n", "start_logits", "=", "start_logits", ",", "\n", "end_logits", "=", "end_logits", ",", "\n", "hidden_states", "=", "encoder_out", ".", "hidden_states", ",", "\n", "attentions", "=", "encoder_out", ".", "attentions", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.mmahbub_bioadapt-mrc.src.enc_disc_mrc.Disc_QA_Out.__init__": [[88, 113], ["torch.Module.__init__", "torch.TransformerEncoderLayer", "torch.TransformerEncoderLayer", "torch.TransformerEncoder", "torch.TransformerEncoder", "torch.Linear", "torch.Linear", "enc_disc_mrc.Disc_QA_Out.discriminator_encoder.parameters", "enc_disc_mrc.Disc_QA_Out.qa_outputs.parameters"], "methods", ["home.repos.pwc.inspect_result.mmahbub_bioadapt-mrc.src.enc_disc_mrc.Disc_QA_Out.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "freeze_aux_qa_output_generator", "=", "False", ",", "\n", "freeze_discriminator_encoder", "=", "False", "\n", ")", ":", "\n", "        ", "super", "(", "Disc_QA_Out", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "encoder_layer", "=", "nn", ".", "TransformerEncoderLayer", "(", "d_model", "=", "configs", ".", "emb_dim", ",", "\n", "dim_feedforward", "=", "3072", ",", "\n", "dropout", "=", "0.1", ",", "\n", "activation", "=", "\"gelu\"", ",", "\n", "nhead", "=", "12", ")", "\n", "self", ".", "discriminator_encoder", "=", "nn", ".", "TransformerEncoder", "(", "encoder_layer", ",", "\n", "num_layers", "=", "1", ")", "\n", "\n", "if", "configs", ".", "USE_AUX_QA_LOSS", ":", "\n", "            ", "self", ".", "qa_outputs", "=", "nn", ".", "Linear", "(", "configs", ".", "emb_dim", ",", "2", ")", "\n", "\n", "", "if", "freeze_discriminator_encoder", ":", "\n", "            ", "for", "param", "in", "self", ".", "discriminator_encoder", ".", "parameters", "(", ")", ":", "\n", "                ", "param", ".", "requires_grad", "=", "False", "\n", "\n", "", "", "if", "freeze_aux_qa_output_generator", ":", "\n", "            ", "if", "configs", ".", "USE_AUX_QA_LOSS", ":", "\n", "                ", "for", "param", "in", "self", ".", "qa_outputs", ".", "parameters", "(", ")", ":", "\n", "                    ", "param", ".", "requires_grad", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.mmahbub_bioadapt-mrc.src.enc_disc_mrc.Disc_QA_Out.forward": [[114, 154], ["enc_disc_mrc.Disc_QA_Out.discriminator_encoder", "enc_disc_mrc.Disc_QA_Out.qa_outputs", "enc_disc_mrc.Disc_QA_Out.split", "start_logits.squeeze().contiguous.squeeze().contiguous.squeeze().contiguous", "end_logits.squeeze().contiguous.squeeze().contiguous.squeeze().contiguous", "start_logits.squeeze().contiguous.squeeze().contiguous.size", "start_positions.squeeze.squeeze.clamp", "end_positions.squeeze.squeeze.clamp", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss.", "torch.nn.CrossEntropyLoss.", "torch.nn.CrossEntropyLoss.", "torch.nn.CrossEntropyLoss.", "transformers.modeling_outputs.QuestionAnsweringModelOutput", "start_logits.squeeze().contiguous.squeeze().contiguous.squeeze", "end_logits.squeeze().contiguous.squeeze().contiguous.squeeze", "len", "start_positions.squeeze.squeeze.squeeze", "len", "end_positions.squeeze.squeeze.squeeze", "start_positions.squeeze.squeeze.size", "end_positions.squeeze.squeeze.size"], "methods", ["None"], ["", "", "", "", "def", "forward", "(", "self", ",", "\n", "encoder_out", ",", "\n", "start_positions", "=", "None", ",", "\n", "end_positions", "=", "None", ")", ":", "\n", "\n", "        ", "output", "=", "self", ".", "discriminator_encoder", "(", "encoder_out", ")", "\n", "\n", "# hidden representation of the CLS token, which is at position 0", "\n", "last_hidden_state_cls", "=", "output", "[", ":", ",", "0", ",", ":", "]", "\n", "encoder_last_hidden_state_cls", "=", "encoder_out", "[", ":", ",", "0", ",", ":", "]", "\n", "\n", "if", "not", "configs", ".", "USE_AUX_QA_LOSS", ":", "\n", "            ", "return", "last_hidden_state_cls", ",", "0", "\n", "\n", "", "logits", "=", "self", ".", "qa_outputs", "(", "output", ")", "\n", "\n", "start_logits", ",", "end_logits", "=", "logits", ".", "split", "(", "1", ",", "dim", "=", "-", "1", ")", "\n", "start_logits", "=", "start_logits", ".", "squeeze", "(", "-", "1", ")", ".", "contiguous", "(", ")", "\n", "end_logits", "=", "end_logits", ".", "squeeze", "(", "-", "1", ")", ".", "contiguous", "(", ")", "\n", "\n", "total_loss", "=", "None", "\n", "if", "start_positions", "is", "not", "None", "and", "end_positions", "is", "not", "None", ":", "\n", "# If we are on multi-GPU, split add a dimension", "\n", "            ", "if", "len", "(", "start_positions", ".", "size", "(", ")", ")", ">", "1", ":", "\n", "                ", "start_positions", "=", "start_positions", ".", "squeeze", "(", "-", "1", ")", "\n", "", "if", "len", "(", "end_positions", ".", "size", "(", ")", ")", ">", "1", ":", "\n", "                ", "end_positions", "=", "end_positions", ".", "squeeze", "(", "-", "1", ")", "\n", "# sometimes the start/end positions are outside our model inputs, we ignore these terms", "\n", "", "ignored_index", "=", "start_logits", ".", "size", "(", "1", ")", "\n", "start_positions", "=", "start_positions", ".", "clamp", "(", "0", ",", "ignored_index", ")", "\n", "end_positions", "=", "end_positions", ".", "clamp", "(", "0", ",", "ignored_index", ")", "\n", "\n", "loss_fct", "=", "torch", ".", "nn", ".", "CrossEntropyLoss", "(", "ignore_index", "=", "ignored_index", ")", "\n", "start_loss", "=", "loss_fct", "(", "start_logits", ",", "start_positions", ")", "\n", "end_loss", "=", "loss_fct", "(", "end_logits", ",", "end_positions", ")", "\n", "total_loss", "=", "(", "start_loss", "+", "end_loss", ")", "/", "2", "\n", "\n", "", "return", "last_hidden_state_cls", ",", "QuestionAnsweringModelOutput", "(", "loss", "=", "total_loss", ",", "\n", "start_logits", "=", "start_logits", ",", "\n", "end_logits", "=", "end_logits", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mmahbub_bioadapt-mrc.src.enc_disc_mrc.ReverseLayerF.forward": [[162, 166], ["x.view_as"], "methods", ["None"], ["@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "x", ",", "_lambda_", ")", ":", "\n", "        ", "ctx", ".", "_lambda_", "=", "_lambda_", "\n", "return", "x", ".", "view_as", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mmahbub_bioadapt-mrc.src.enc_disc_mrc.ReverseLayerF.backward": [[167, 171], ["grad_output.neg"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "grad_output", ")", ":", "\n", "        ", "output", "=", "grad_output", ".", "neg", "(", ")", "*", "ctx", ".", "_lambda_", "\n", "return", "output", ",", "None", "\n", "", "", ""]]}