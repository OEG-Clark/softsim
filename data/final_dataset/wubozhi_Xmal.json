{"home.repos.pwc.inspect_result.wubozhi_Xmal.GetFeature.GetFeature.GetFeature.__init__": [[11, 22], ["log.Log", "list"], "methods", ["home.repos.pwc.inspect_result.wubozhi_Xmal.Log.log.Log"], ["def", "__init__", "(", "self", ")", ":", "\n", "\t\t", "\"\"\"\n\t\tGet the features to be extracted\n\t\t:param :\n\t\t:return:\n\t\t\"\"\"", "\n", "self", ".", "logger", "=", "Log", "(", "self", ")", "\n", "self", ".", "APIFile", "=", "\"..\"", "+", "os", ".", "sep", "+", "\"Feature\"", "+", "os", ".", "sep", "+", "\"API.txt\"", "\n", "self", ".", "permissionFile", "=", "\"..\"", "+", "os", ".", "sep", "+", "\"Feature\"", "+", "os", ".", "sep", "+", "\"permission.txt\"", "\n", "self", ".", "featurelistPath", "=", "\"..\"", "+", "os", ".", "sep", "+", "\"Data\"", "+", "os", ".", "sep", "+", "\"featureList.csv\"", "\n", "self", ".", "featurelist", "=", "list", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wubozhi_Xmal.GetFeature.GetFeature.GetFeature.featureFromFile": [[23, 42], ["list", "os.path.exists", "GetFeature.GetFeature.logger.error", "print", "open", "f.readline", "f.readline.replace", "s.replace.replace.replace", "list.append"], "methods", ["None"], ["", "def", "featureFromFile", "(", "self", ",", "filePath", ")", ":", "\n", "\t\t", "\"\"\"\n\t\tGet the features to be extracted from one feature file\n\t\t:param filePath:  file path\n\t\t:return: features list\n\t\t\"\"\"", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "filePath", ")", ":", "\n", "\t\t\t", "self", ".", "logger", ".", "error", "(", "filePath", "+", "\"does not exist\"", ")", "\n", "print", "(", "filePath", "+", "\"does not exist\"", ")", "\n", "return", "\n", "", "ls", "=", "list", "(", ")", "\n", "with", "open", "(", "filePath", ",", "'r'", ")", "as", "f", ":", "\n", "\t\t\t", "while", "(", "True", ")", ":", "\n", "\t\t\t\t", "line", "=", "f", ".", "readline", "(", ")", "\n", "if", "not", "line", ":", "break", "\n", "s", "=", "line", ".", "replace", "(", "\"\\n\"", ",", "\"\"", ")", "\n", "s", "=", "s", ".", "replace", "(", "\"\\r\"", ",", "\"\"", ")", "\n", "ls", ".", "append", "(", "s", ")", "\n", "", "", "return", "ls", "\n", "\n"]], "home.repos.pwc.inspect_result.wubozhi_Xmal.GetFeature.GetFeature.GetFeature.generateFeatureList": [[43, 57], ["GetFeature.GetFeature.featureFromFile", "GetFeature.GetFeature.featureFromFile", "pandas.DataFrame", "pandas.DataFrame.to_csv"], "methods", ["home.repos.pwc.inspect_result.wubozhi_Xmal.FeatureProcess.GetFeatureMatrix.GetFeatureMatrix.featureFromFile", "home.repos.pwc.inspect_result.wubozhi_Xmal.FeatureProcess.GetFeatureMatrix.GetFeatureMatrix.featureFromFile"], ["", "def", "generateFeatureList", "(", "self", ")", ":", "\n", "\t\t", "\"\"\"\n\t\tGet the features to be extracted from all features\n\t\t:param : \n\t\t:return: features list from all feature files\n\t\t\"\"\"", "\n", "ls1", "=", "self", ".", "featureFromFile", "(", "self", ".", "APIFile", ")", "\n", "ls2", "=", "self", ".", "featureFromFile", "(", "self", ".", "permissionFile", ")", "\n", "self", ".", "featurelist", "=", "ls1", "+", "ls2", "\n", "\n", "frame", "=", "pd", ".", "DataFrame", "(", "self", ".", "featurelist", ")", "\n", "frame", ".", "to_csv", "(", "self", ".", "featurelistPath", ",", "header", "=", "False", ",", "index", "=", "False", ")", "\n", "\n", "return", "self", ".", "featurelist", "\n", "\n"]], "home.repos.pwc.inspect_result.wubozhi_Xmal.FeatureExtraction.FeatureExtraction.FeatureExtraction.__init__": [[13, 17], ["log.Log"], "methods", ["home.repos.pwc.inspect_result.wubozhi_Xmal.Log.log.Log"], ["\t", "def", "__init__", "(", "self", ")", ":", "\n", "\t\t", "\"\"\"init params\"\"\"", "\n", "self", ".", "logger", "=", "Log", "(", "self", ")", "\n", "self", ".", "apk", "=", "\"..\"", "+", "os", ".", "sep", "+", "\"apk\"", "\n", "\n"]], "home.repos.pwc.inspect_result.wubozhi_Xmal.FeatureExtraction.FeatureExtraction.FeatureExtraction.filesInFolder": [[19, 36], ["FeatureExtraction.FeatureExtraction.logger.info", "os.listdir", "list", "os.path.exists", "FeatureExtraction.FeatureExtraction.logger.error", "file.endswith", "list.append"], "methods", ["None"], ["", "def", "filesInFolder", "(", "self", ",", "folderPath", ",", "suffix", ")", ":", "\n", "\t\t", "\"\"\"\n\t\tget the files in folderPath\n\t\t:param folderPath: the folder path\n\t\t:param suffix: the file extension\n\t\t:return: files list\n\t\t\"\"\"", "\n", "self", ".", "logger", ".", "info", "(", "\"Traversing \"", "+", "folderPath", "+", "\" folder\"", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "folderPath", ")", ":", "\n", "\t\t\t", "self", ".", "logger", ".", "error", "(", "folderPath", "+", "\"does not exist\"", ")", "\n", "return", "\n", "", "files", "=", "os", ".", "listdir", "(", "folderPath", ")", "\n", "suit", "=", "list", "(", ")", "\n", "for", "file", "in", "files", ":", "\n", "\t\t\t", "if", "file", ".", "endswith", "(", "suffix", ")", ":", "\n", "\t\t\t\t", "suit", ".", "append", "(", "file", ")", "\n", "", "", "return", "suit", "\n", "\n"]], "home.repos.pwc.inspect_result.wubozhi_Xmal.FeatureExtraction.FeatureExtraction.FeatureExtraction.getFeature": [[37, 60], ["GetAPI.GetAPI.GetAPI", "GetPermission.GetPermission.GetPermission", "GetAPI.GetAPI.GetAPI.getAPICalls", "GetPermission.GetPermission.GetPermission.getPermissions", "apk.replace", "os.path.exists", "os.path.exists", "FeatureExtraction.FeatureExtraction.logger.info", "print", "os.remove", "os.remove"], "methods", ["home.repos.pwc.inspect_result.wubozhi_Xmal.FeatureExtraction.GetAPI.GetAPI.getAPICalls", "home.repos.pwc.inspect_result.wubozhi_Xmal.FeatureExtraction.GetPermission.GetPermission.getPermissions"], ["", "def", "getFeature", "(", "self", ",", "Apkpath", ",", "apk", ",", "Datapath", ")", ":", "\n", "\t\t", "\"\"\"\n\t\tget features from apk\n\t\t:param Apkpath: APK file folder path\n\t\t:param apk: apk name\n\t\t:param Datapath: the folder where the feature files save\n\t\t:return:\n\t\t\"\"\"", "\n", "GetAPIClass", "=", "GetAPI", "(", ")", "\n", "GetPermissionClass", "=", "GetPermission", "(", ")", "\n", "try", ":", "\n", "\t\t\t", "GetAPIClass", ".", "getAPICalls", "(", "Apkpath", ",", "apk", ",", "Datapath", ")", "\n", "GetPermissionClass", ".", "getPermissions", "(", "Apkpath", ",", "apk", ",", "Datapath", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "\t\t\t", "name", "=", "apk", ".", "replace", "(", "\".apk\"", ",", "\"\"", ")", "\n", "permissionName", "=", "Datapath", "+", "os", ".", "sep", "+", "name", "+", "\"_Permission.txt\"", "\n", "if", "os", ".", "path", ".", "exists", "(", "permissionName", ")", ":", "\n", "\t\t\t\t", "os", ".", "remove", "(", "permissionName", ")", "\n", "", "apiName", "=", "Datapath", "+", "os", ".", "sep", "+", "name", "+", "\"_API.txt\"", "\n", "if", "os", ".", "path", ".", "exists", "(", "apiName", ")", ":", "\n", "\t\t\t\t", "os", ".", "remove", "(", "apiName", ")", "\n", "", "self", ".", "logger", ".", "info", "(", "apk", "+", "\"Features Extraction errors.\"", ")", "\n", "print", "(", "apk", "+", "\"Features Extraction errors.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wubozhi_Xmal.FeatureExtraction.FeatureExtraction.FeatureExtraction.getFeatures": [[62, 82], ["random.shuffle", "fileLock.acquire", "getfile.append", "fileLock.release", "FeatureExtraction.FeatureExtraction.getFeature", "fileLock.release"], "methods", ["home.repos.pwc.inspect_result.wubozhi_Xmal.FeatureExtraction.FeatureExtraction.FeatureExtraction.getFeature"], ["", "", "def", "getFeatures", "(", "self", ",", "Apkpath", ",", "apks", ",", "Datapath", ",", "fileLock", ",", "getfile", ")", ":", "\n", "\t\t", "\"\"\"\n\t\tget features from apks\n\t\t:param Apkpath: APK file folder path\n\t\t:param apk: apk name\n\t\t:param Datapath: the folder where the feature files save\n\t\t:param fileLock: multiple process lock\n\t\t:param getfile: the list of the apk files that have been extracted\n\t\t:return:\n\t\t\"\"\"", "\n", "random", ".", "shuffle", "(", "apks", ")", "\n", "\n", "for", "apk", "in", "apks", ":", "\n", "\t\t\t", "fileLock", ".", "acquire", "(", ")", "\n", "if", "apk", "not", "in", "getfile", ":", "\n", "\t\t\t\t", "getfile", ".", "append", "(", "apk", ")", "\n", "fileLock", ".", "release", "(", ")", "\n", "self", ".", "getFeature", "(", "Apkpath", ",", "apk", ",", "Datapath", ")", "\n", "", "else", ":", "\n", "\t\t\t\t", "fileLock", ".", "release", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wubozhi_Xmal.FeatureExtraction.FeatureExtraction.FeatureExtraction.productFeature": [[84, 126], ["multiprocessing.Lock", "multiprocessing.Lock", "multiprocessing.Manager", "multiprocessing.Manager.list", "multiprocessing.Manager.list", "FeatureExtraction.FeatureExtraction.filesInFolder", "FeatureExtraction.FeatureExtraction.filesInFolder", "range", "range", "print", "multiprocessing.Process", "bthreads.append", "multiprocessing.Process", "mthreads.append", "multiprocessing.Process.start", "multiprocessing.Process.start", "multiprocessing.Process.join", "multiprocessing.Process.join"], "methods", ["home.repos.pwc.inspect_result.wubozhi_Xmal.FeatureProcess.GetFeatureMatrix.GetFeatureMatrix.filesInFolder", "home.repos.pwc.inspect_result.wubozhi_Xmal.FeatureProcess.GetFeatureMatrix.GetFeatureMatrix.filesInFolder"], ["", "", "", "def", "productFeature", "(", "self", ",", "benApkpath", ",", "malApkPath", ",", "benDatapath", ",", "malDatapath", ")", ":", "\n", "\t\t", "\"\"\"\n\t\tget features from apks by multi-process\n\t\t:param benApkpath: benign APK file folder path\n\t\t:param malApkPath: malicious APK file folder path\n\t\t:param benDatapath: the folder where the feature files of benign APKs save\n\t\t:param malDatapath: the folder where the feature files of malicious APKs save\n\t\t:return:\n\t\t\"\"\"", "\n", "BenFileLock", "=", "Lock", "(", ")", "\n", "MalFileLock", "=", "Lock", "(", ")", "\n", "\n", "m", "=", "Manager", "(", ")", "\n", "getBenFile", "=", "m", ".", "list", "(", ")", "\n", "getMalFile", "=", "m", ".", "list", "(", ")", "\n", "\n", "\n", "\"\"\" from APK folder to product the feature\"\"\"", "\n", "benApks", "=", "self", ".", "filesInFolder", "(", "benApkpath", ",", "\".apk\"", ")", "\n", "malApks", "=", "self", ".", "filesInFolder", "(", "malApkPath", ",", "\".apk\"", ")", "\n", "\n", "bthreads", "=", "[", "]", "\n", "mthreads", "=", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "0", ")", ":", "\n", "\t\t\t", "bthread", "=", "Process", "(", "target", "=", "self", ".", "getFeatures", ",", "args", "=", "(", "benApkpath", ",", "benApks", ",", "benDatapath", ",", "BenFileLock", ",", "getBenFile", ")", ")", "\n", "bthreads", ".", "append", "(", "bthread", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "20", ")", ":", "\n", "\t\t\t", "mthread", "=", "Process", "(", "target", "=", "self", ".", "getFeatures", ",", "args", "=", "(", "malApkPath", ",", "malApks", ",", "malDatapath", ",", "MalFileLock", ",", "getMalFile", ")", ")", "\n", "mthreads", ".", "append", "(", "mthread", ")", "\n", "\n", "", "for", "bthread", "in", "bthreads", ":", "\n", "\t\t\t", "bthread", ".", "start", "(", ")", "\n", "", "for", "mthread", "in", "mthreads", ":", "\n", "\t\t\t", "mthread", ".", "start", "(", ")", "\n", "\n", "", "for", "bthread", "in", "bthreads", ":", "\n", "\t\t\t", "bthread", ".", "join", "(", ")", "\n", "", "for", "mthread", "in", "mthreads", ":", "\n", "\t\t\t", "mthread", ".", "join", "(", ")", "\n", "", "print", "(", "\"exists multi-process\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wubozhi_Xmal.FeatureExtraction.GetAPI.GetAPI.__init__": [[13, 20], ["log.Log"], "methods", ["home.repos.pwc.inspect_result.wubozhi_Xmal.Log.log.Log"], ["\t", "def", "__init__", "(", "self", ")", ":", "\n", "\t\t", "\"\"\"\n\t\tinit \n\t\t:param file:\n\t\t:return: \n\t\t\"\"\"", "\n", "self", ".", "logger", "=", "Log", "(", "self", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wubozhi_Xmal.FeatureExtraction.GetAPI.GetAPI.getAPICalls": [[21, 62], ["GetAPI.GetAPI.logger.info", "print", "androguard.core.bytecodes.apk.APK", "androguard.core.bytecodes.dvm.DalvikVMFormat", "androguard.core.analysis.analysis.Analysis", "list", "androguard.core.bytecodes.dvm.DalvikVMFormat.get_methods", "fileName.replace", "androguard.core.bytecodes.apk.APK.get_dex", "cc.get_name", "androguard.core.analysis.analysis.Analysis.get_method", "analysis.Analysis.get_method.get_basic_blocks().get", "open", "print", "GetAPI.GetAPI.logger.info", "range", "androguard.core.bytecodes.dvm.DalvikVMFormat.get_classes", "method.get_code", "i.get_instructions", "list.__len__", "f.write", "analysis.Analysis.get_method.get_basic_blocks", "ins.get_output", "re.search", "re.search.group", "re.search.group", "re.search.group", "list.append"], "methods", ["None"], ["", "def", "getAPICalls", "(", "self", ",", "Path", ",", "fileName", ",", "dataPath", ")", ":", "\n", "\t\t", "\"\"\"\n\t\tget the API Calls\n\t\t:param Path: the APK folder path\n\t\t:param fileNmae: the APK Nmae\n\t\t:param dataPath: the folder path where the api files save\n\t\t:return: api files\n\t\t\"\"\"", "\n", "filePath", "=", "Path", "+", "os", ".", "sep", "+", "fileName", "\n", "self", ".", "logger", ".", "info", "(", "\"Extract\"", "+", "fileName", "+", "\"API calls\"", ")", "\n", "print", "(", "\"Extract\"", "+", "fileName", "+", "\"API calls\"", ")", "\n", "app", "=", "APK", "(", "filePath", ")", "\n", "app_dex", "=", "dvm", ".", "DalvikVMFormat", "(", "app", ".", "get_dex", "(", ")", ")", "\n", "app_x", "=", "analysis", ".", "Analysis", "(", "app_dex", ")", "\n", "APIs", "=", "list", "(", ")", "\n", "\n", "classes", "=", "[", "cc", ".", "get_name", "(", ")", "for", "cc", "in", "app_dex", ".", "get_classes", "(", ")", "]", "\n", "for", "method", "in", "app_dex", ".", "get_methods", "(", ")", ":", "\n", "\t\t\t", "methodBlock", "=", "app_x", ".", "get_method", "(", "method", ")", "\n", "if", "method", ".", "get_code", "(", ")", "==", "None", ":", "\n", "\t\t\t\t", "continue", "\n", "", "for", "i", "in", "methodBlock", ".", "get_basic_blocks", "(", ")", ".", "get", "(", ")", ":", "\n", "\t\t\t\t", "for", "ins", "in", "i", ".", "get_instructions", "(", ")", ":", "\n", "\t\t\t\t\t", "output", "=", "ins", ".", "get_output", "(", ")", "\n", "match", "=", "re", ".", "search", "(", "r'(L[^;]*;)->([^\\(]*)'", ",", "output", ")", "\n", "if", "match", "and", "match", ".", "group", "(", "1", ")", "not", "in", "classes", ":", "\n", "# print \"API: \"+match.group()+\"\t \"+match.group(1)", "\n", "\t\t\t\t\t\t", "if", "match", ".", "group", "(", "2", ")", "==", "\"<init>\"", ":", "\n", "\t\t\t\t\t\t\t", "continue", "\n", "", "api", "=", "match", ".", "group", "(", ")", "\n", "if", "api", "in", "APIs", ":", "\n", "\t\t\t\t\t\t\t", "continue", "\n", "", "else", ":", "\n", "\t\t\t\t\t\t\t", "APIs", ".", "append", "(", "api", ")", "\n", "\n", "", "", "", "", "", "name", "=", "fileName", ".", "replace", "(", "\".apk\"", ",", "\"\"", ")", "\n", "with", "open", "(", "dataPath", "+", "os", ".", "sep", "+", "name", "+", "\"_API.txt\"", ",", "'w'", ")", "as", "f", ":", "\n", "\t\t\t", "print", "(", "\"Saving \"", "+", "fileName", "+", "\" APIs\"", ")", "\n", "self", ".", "logger", ".", "info", "(", "\"Saving \"", "+", "fileName", "+", "\" APIs\"", ")", "\n", "for", "i", "in", "range", "(", "APIs", ".", "__len__", "(", ")", ")", ":", "\n", "\t\t\t\t\t", "f", ".", "write", "(", "APIs", "[", "i", "]", "+", "\"\\n\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wubozhi_Xmal.FeatureExtraction.GetPermission.GetPermission.__init__": [[11, 14], ["log.Log"], "methods", ["home.repos.pwc.inspect_result.wubozhi_Xmal.Log.log.Log"], ["\t", "def", "__init__", "(", "self", ")", ":", "\n", "\t\t", "\"\"\"init params\"\"\"", "\n", "self", ".", "logger", "=", "Log", "(", "self", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wubozhi_Xmal.FeatureExtraction.GetPermission.GetPermission.getPermissions": [[15, 34], ["GetPermission.GetPermission.logger.info", "print", "androguard.core.bytecodes.apk.APK", "androguard.core.bytecodes.apk.APK.get_permissions", "fileName.replace", "open", "GetPermission.GetPermission.logger.info", "print", "range", "androguard.core.bytecodes.apk.APK.get_permissions.__len__", "f.write"], "methods", ["None"], ["", "def", "getPermissions", "(", "self", ",", "Path", ",", "fileName", ",", "dataPath", ")", ":", "\n", "\t\t", "\"\"\"\n\t\tget the API Calls\n\t\t:param Path: the APK folder path\n\t\t:param fileNmae: the APK Nmae\n\t\t:param dataPath: the folder path where the permission files save\n\t\t:return: permission files\n\t\t\"\"\"", "\n", "filePath", "=", "Path", "+", "os", ".", "sep", "+", "fileName", "\n", "self", ".", "logger", ".", "info", "(", "\"Extract\"", "+", "fileName", "+", "\" Permissions\"", ")", "\n", "print", "(", "\"Extract\"", "+", "fileName", "+", "\"Permissions\"", ")", "\n", "app", "=", "APK", "(", "filePath", ")", "\n", "permissions", "=", "app", ".", "get_permissions", "(", ")", "\n", "name", "=", "fileName", ".", "replace", "(", "\".apk\"", ",", "\"\"", ")", "\n", "with", "open", "(", "dataPath", "+", "os", ".", "sep", "+", "name", "+", "\"_Permission.txt\"", ",", "'w'", ")", "as", "f", ":", "\n", "\t\t\t", "self", ".", "logger", ".", "info", "(", "\"Saving\"", "+", "fileName", "+", "\" Permissions\"", ")", "\n", "print", "(", "\"Saving\"", "+", "fileName", "+", "\"Permissions\"", ")", "\n", "for", "i", "in", "range", "(", "permissions", ".", "__len__", "(", ")", ")", ":", "\n", "\t\t\t\t", "f", ".", "write", "(", "permissions", "[", "i", "]", "+", "\"\\n\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wubozhi_Xmal.FeatureProcess.FeatureProcess.FeatureProcess.__init__": [[13, 16], ["log.Log"], "methods", ["home.repos.pwc.inspect_result.wubozhi_Xmal.Log.log.Log"], ["\t", "def", "__init__", "(", "self", ")", ":", "\n", "\t\t", "\"\"\"init params\"\"\"", "\n", "self", ".", "logger", "=", "Log", "(", "self", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wubozhi_Xmal.FeatureProcess.FeatureProcess.FeatureProcess.featureDeal": [[17, 42], ["GetFeatureMatrix.GetFeatureMatrix.GetFeatureMatrix", "GetFeatureMatrix.GetFeatureMatrix.GetFeatureMatrix.getFeatureMatric", "sklearn.externals.joblib.dump", "sklearn.externals.joblib.dump", "sklearn.externals.joblib.dump", "print", "pandas.DataFrame", "pandas.DataFrame.to_csv", "pandas.DataFrame", "pandas.DataFrame.to_csv"], "methods", ["home.repos.pwc.inspect_result.wubozhi_Xmal.ModelCheck.Test.test.getFeatureMatric"], ["", "def", "featureDeal", "(", "self", ",", "benDatapath", ",", "malDatapath", ",", "FeaturePath", ",", "matrixPath", ",", "labelPath", ")", ":", "\n", "\t\t", "\"\"\"\n\t\tget the feature matrix and label of the training apks\n\t\t:param benDatapath: the folder where the feature files of benign APKs save\n\t\t:param malDatapath: the folder where the feature files of malicious APKs save\n\t\t:param FeaturePath: the feature file path\n\t\t:param matrixPath: the path of feature matrix file\n\t\t:param labelPath: the path of feature label file\n\t\t:return: Matrix,label\n\t\t\"\"\"", "\n", "GetFeatureMatrixClass", "=", "GetFeatureMatrix", "(", ")", "\n", "Matrix", ",", "label", ",", "featureList", "=", "GetFeatureMatrixClass", ".", "getFeatureMatric", "(", "benDatapath", ",", "malDatapath", ")", "\n", "\n", "joblib", ".", "dump", "(", "featureList", ",", "FeaturePath", ")", "\n", "joblib", ".", "dump", "(", "Matrix", ",", "matrixPath", ")", "\n", "joblib", ".", "dump", "(", "label", ",", "labelPath", ")", "\n", "\n", "\n", "print", "(", "\"length:%d\"", "%", "(", "Matrix", ".", "shape", "[", "1", "]", ")", ")", "\n", "frame", "=", "pd", ".", "DataFrame", "(", "Matrix", ",", "columns", "=", "featureList", ")", "\n", "frame", ".", "to_csv", "(", "\"..\"", "+", "os", ".", "sep", "+", "\"Data\"", "+", "os", ".", "sep", "+", "'feature.csv'", ",", "index", "=", "False", ")", "\n", "frame", "=", "pd", ".", "DataFrame", "(", "label", ")", "\n", "frame", ".", "to_csv", "(", "\"..\"", "+", "os", ".", "sep", "+", "\"Data\"", "+", "os", ".", "sep", "+", "'label.csv'", ",", "header", "=", "False", ",", "index", "=", "False", ")", "\n", "\n", "return", "Matrix", ",", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.wubozhi_Xmal.FeatureProcess.GetFeatureMatrix.GetFeatureMatrix.__init__": [[15, 24], ["GetFeature.GetFeature.GetFeature().getFeatureList", "list", "numpy.zeros", "list", "threading.Lock", "threading.Lock", "log.Log", "GetFeature.GetFeature.GetFeature", "GetFeatureMatrix.GetFeatureMatrix.featureList.__len__"], "methods", ["home.repos.pwc.inspect_result.wubozhi_Xmal.Log.log.Log"], ["\t", "def", "__init__", "(", "self", ")", ":", "\n", "\t\t", "\"\"\"init params\"\"\"", "\n", "self", ".", "featureList", "=", "GetFeature", "(", ")", ".", "getFeatureList", "(", ")", "\n", "self", ".", "APKlist", "=", "list", "(", ")", "\n", "self", ".", "Matrix", "=", "np", ".", "zeros", "(", "(", "0", ",", "self", ".", "featureList", ".", "__len__", "(", ")", ")", ",", "dtype", "=", "int", ")", "\n", "self", ".", "label", "=", "list", "(", ")", "\n", "self", ".", "MatrixLock", "=", "threading", ".", "Lock", "(", ")", "\n", "self", ".", "APKlistLock", "=", "threading", ".", "Lock", "(", ")", "\n", "self", ".", "logger", "=", "Log", "(", "self", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wubozhi_Xmal.FeatureProcess.GetFeatureMatrix.GetFeatureMatrix.featureFromFile": [[25, 44], ["list", "os.path.exists", "GetFeatureMatrix.GetFeatureMatrix.logger.error", "print", "open", "f.readline", "f.readline.replace", "s.replace.replace.replace", "list.append"], "methods", ["None"], ["", "def", "featureFromFile", "(", "self", ",", "filePath", ")", ":", "\n", "\t\t", "\"\"\"\n\t\tget features from file\n\t\t:param filePath: the feature files path\n\t\t:return: feature list\n\t\t\"\"\"", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "filePath", ")", ":", "\n", "\t\t\t", "self", ".", "logger", ".", "error", "(", "filePath", "+", "\" does not exist\"", ")", "\n", "print", "(", "filePath", "+", "\" does not exist\"", ")", "\n", "return", "\n", "", "ls", "=", "list", "(", ")", "\n", "with", "open", "(", "filePath", ",", "'r'", ",", "encoding", "=", "'UTF-8'", ")", "as", "f", ":", "\n", "\t\t\t", "while", "(", "True", ")", ":", "\n", "\t\t\t\t", "line", "=", "f", ".", "readline", "(", ")", "\n", "if", "not", "line", ":", "break", "\n", "s", "=", "line", ".", "replace", "(", "\"\\n\"", ",", "\"\"", ")", "\n", "s", "=", "s", ".", "replace", "(", "\"\\r\"", ",", "\"\"", ")", "\n", "ls", ".", "append", "(", "s", ")", "\n", "", "", "return", "ls", "\n", "\n"]], "home.repos.pwc.inspect_result.wubozhi_Xmal.FeatureProcess.GetFeatureMatrix.GetFeatureMatrix.filesInFolder": [[45, 63], ["GetFeatureMatrix.GetFeatureMatrix.logger.info", "os.listdir", "list", "os.path.exists", "GetFeatureMatrix.GetFeatureMatrix.logger.error", "file.endswith", "list.append"], "methods", ["None"], ["", "def", "filesInFolder", "(", "self", ",", "folderPath", ",", "suffix", ")", ":", "\n", "\t\t", "\"\"\"\n\t\tget the files in folderPath\n\t\t:param folderPath: the folder path\n\t\t:param suffix: the file extension\n\t\t:return: files list\n\t\t\"\"\"", "\n", "self", ".", "logger", ".", "info", "(", "\"Traversing \"", "+", "folderPath", "+", "\" folder\"", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "folderPath", ")", ":", "\n", "\t\t\t", "self", ".", "logger", ".", "error", "(", "folderPath", "+", "\" does not exist\"", ")", "\n", "return", "\n", "", "files", "=", "os", ".", "listdir", "(", "folderPath", ")", "\n", "#print files", "\n", "suit", "=", "list", "(", ")", "\n", "for", "file", "in", "files", ":", "\n", "\t\t\t", "if", "file", ".", "endswith", "(", "suffix", ")", ":", "\n", "\t\t\t\t", "suit", ".", "append", "(", "file", ")", "\n", "", "", "return", "suit", "\n", "\n"]], "home.repos.pwc.inspect_result.wubozhi_Xmal.FeatureProcess.GetFeatureMatrix.GetFeatureMatrix.getFeaturefromAPK": [[64, 96], ["apkName.replace", "apkName.replace", "numpy.zeros", "GetFeatureMatrix.GetFeatureMatrix.featureFromFile", "GetFeatureMatrix.GetFeatureMatrix.logger.info", "print", "GetFeatureMatrix.GetFeatureMatrix.featureFromFile", "GetFeatureMatrix.GetFeatureMatrix.logger.info", "print", "GetFeatureMatrix.GetFeatureMatrix.featureList.__len__", "GetFeatureMatrix.GetFeatureMatrix.logger.info", "print", "GetFeatureMatrix.GetFeatureMatrix.featureList.index", "GetFeatureMatrix.GetFeatureMatrix.featureList.index"], "methods", ["home.repos.pwc.inspect_result.wubozhi_Xmal.FeatureProcess.GetFeatureMatrix.GetFeatureMatrix.featureFromFile", "home.repos.pwc.inspect_result.wubozhi_Xmal.FeatureProcess.GetFeatureMatrix.GetFeatureMatrix.featureFromFile"], ["", "def", "getFeaturefromAPK", "(", "self", ",", "dataPath", ",", "apkName", ")", ":", "\n", "\t\t", "\"\"\"\n\t\tget the features of apkName from feature file in dataPath\n\t\t:param dataPath: the folder path where feature files save\n\t\t:param apkName: apk name\n\t\t:return: feature matrix of apk\n\t\t\"\"\"", "\n", "apiFile", "=", "apkName", ".", "replace", "(", "\".apk\"", ",", "\"_API.txt\"", ")", "\n", "permissionFile", "=", "apkName", ".", "replace", "(", "\".apk\"", ",", "\"_Permission.txt\"", ")", "\n", "\n", "apkFeature", "=", "np", ".", "zeros", "(", "(", "1", ",", "self", ".", "featureList", ".", "__len__", "(", ")", ")", ",", "dtype", "=", "int", ")", "\n", "try", ":", "\n", "\t\t\t", "perList", "=", "self", ".", "featureFromFile", "(", "dataPath", "+", "os", ".", "sep", "+", "apiFile", ")", "\n", "self", ".", "logger", ".", "info", "(", "\"Extract \"", "+", "apiFile", "+", "\" feature Matrix\"", ")", "\n", "print", "(", "\"Extract \"", "+", "apiFile", "+", "\"feature Matrix\"", ")", "\n", "for", "p", "in", "perList", ":", "\n", "\t\t\t\t", "if", "p", "in", "self", ".", "featureList", ":", "\n", "\t\t\t\t\t", "i", "=", "self", ".", "featureList", ".", "index", "(", "p", ")", "\n", "apkFeature", "[", "0", "]", "[", "i", "]", "=", "1", "\n", "\n", "", "", "perList", "=", "self", ".", "featureFromFile", "(", "dataPath", "+", "os", ".", "sep", "+", "permissionFile", ")", "\n", "self", ".", "logger", ".", "info", "(", "\"Extract \"", "+", "permissionFile", "+", "\"feature Matrix\"", ")", "\n", "print", "(", "\"Extract \"", "+", "permissionFile", "+", "\"feature Matrix\"", ")", "\n", "for", "p", "in", "perList", ":", "\n", "\t\t\t\t", "if", "p", "in", "self", ".", "featureList", ":", "\n", "\t\t\t\t\t", "i", "=", "self", ".", "featureList", ".", "index", "(", "p", ")", "\n", "apkFeature", "[", "0", "]", "[", "i", "]", "=", "1", "\n", "\n", "", "", "", "except", "Exception", "as", "e", ":", "\n", "\t\t\t", "self", ".", "logger", ".", "info", "(", "apkName", "+", "\"feature matrix extraction errors.\"", ")", "\n", "print", "(", "apkName", "+", "\"feature matrix extraction errors.\"", ")", "\n", "", "return", "apkFeature", "\n", "\n"]], "home.repos.pwc.inspect_result.wubozhi_Xmal.FeatureProcess.GetFeatureMatrix.GetFeatureMatrix.getFeaturefromDocument": [[97, 123], ["GetFeatureMatrix.GetFeatureMatrix.filesInFolder", "range", "list", "random.shuffle", "GetFeatureMatrix.GetFeatureMatrix.__len__", "apks[].replace", "set().difference", "GetFeatureMatrix.GetFeatureMatrix.APKlistLock.acquire", "set", "GetFeatureMatrix.GetFeatureMatrix.APKlist.append", "GetFeatureMatrix.GetFeatureMatrix.APKlistLock.release", "GetFeatureMatrix.GetFeatureMatrix.getFeaturefromAPK", "GetFeatureMatrix.GetFeatureMatrix.MatrixLock.acquire", "numpy.vstack", "GetFeatureMatrix.GetFeatureMatrix.label.append", "GetFeatureMatrix.GetFeatureMatrix.MatrixLock.release", "GetFeatureMatrix.GetFeatureMatrix.APKlistLock.release", "set"], "methods", ["home.repos.pwc.inspect_result.wubozhi_Xmal.FeatureProcess.GetFeatureMatrix.GetFeatureMatrix.filesInFolder", "home.repos.pwc.inspect_result.wubozhi_Xmal.FeatureProcess.GetFeatureMatrix.GetFeatureMatrix.getFeaturefromAPK"], ["", "def", "getFeaturefromDocument", "(", "self", ",", "dataPath", ",", "flag", ")", ":", "\n", "\t\t", "\"\"\"\n\t\tget the features matrix from dataPath\n\t\t:param dataPath: the folder path where feature files save\n\t\t:param flag: benign or malicious\n\t\t:return: \n\t\t\"\"\"", "\n", "apks", "=", "self", ".", "filesInFolder", "(", "dataPath", ",", "\"_Permission.txt\"", ")", "\n", "for", "i", "in", "range", "(", "apks", ".", "__len__", "(", ")", ")", ":", "\n", "\t\t\t", "apks", "[", "i", "]", "=", "apks", "[", "i", "]", ".", "replace", "(", "\"_Permission.txt\"", ",", "\".apk\"", ")", "\n", "\n", "", "ll", "=", "list", "(", "set", "(", "apks", ")", ".", "difference", "(", "set", "(", "self", ".", "APKlist", ")", ")", ")", "\n", "random", ".", "shuffle", "(", "ll", ")", "\n", "\n", "for", "apk", "in", "ll", ":", "\n", "\t\t\t", "self", ".", "APKlistLock", ".", "acquire", "(", ")", "\n", "if", "apk", "not", "in", "self", ".", "APKlist", ":", "\n", "\t\t\t\t", "self", ".", "APKlist", ".", "append", "(", "apk", ")", "\n", "self", ".", "APKlistLock", ".", "release", "(", ")", "\n", "features", "=", "self", ".", "getFeaturefromAPK", "(", "dataPath", ",", "apk", ")", "\n", "self", ".", "MatrixLock", ".", "acquire", "(", ")", "\n", "self", ".", "Matrix", "=", "np", ".", "vstack", "(", "(", "self", ".", "Matrix", ",", "features", ")", ")", "\n", "self", ".", "label", ".", "append", "(", "flag", ")", "\n", "self", ".", "MatrixLock", ".", "release", "(", ")", "\n", "", "else", ":", "\n", "\t\t\t\t", "self", ".", "APKlistLock", ".", "release", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wubozhi_Xmal.FeatureProcess.GetFeatureMatrix.GetFeatureMatrix.getFeatureMatric": [[125, 159], ["print", "range", "range", "print", "numpy.array", "threading.Thread", "bthreads.append", "threading.Thread", "mthreads.append", "threading.Thread.start", "threading.Thread.start", "threading.Thread.join", "threading.Thread.join"], "methods", ["None"], ["", "", "", "def", "getFeatureMatric", "(", "self", ",", "benDatapath", ",", "malDatapath", ")", ":", "\n", "\t\t", "\"\"\"\n\t\tget the features matrix from benDatapath and malDatapath\n\t\t:param dataPath: the folder path where feature files save\n\t\t:param benDatapath: the folder where the feature files of benign APKs save\n\t\t:param malDatapath: the folder where the feature files of malicious APKs save\n\t\t:return: \n\t\t\"\"\"", "\n", "\n", "print", "(", "\"Start multithreading to extract API features\"", ")", "\n", "bthreads", "=", "[", "]", "\n", "mthreads", "=", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "10", ")", ":", "\n", "\t\t\t", "bthread", "=", "threading", ".", "Thread", "(", "target", "=", "self", ".", "getFeaturefromDocument", ",", "args", "=", "(", "benDatapath", ",", "0", ")", ")", "\n", "bthreads", ".", "append", "(", "bthread", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "10", ")", ":", "\n", "\t\t\t", "mthread", "=", "threading", ".", "Thread", "(", "target", "=", "self", ".", "getFeaturefromDocument", ",", "args", "=", "(", "malDatapath", ",", "1", ")", ")", "\n", "mthreads", ".", "append", "(", "mthread", ")", "\n", "\n", "", "for", "bthread", "in", "bthreads", ":", "\n", "\t\t\t", "bthread", ".", "start", "(", ")", "\n", "", "for", "mthread", "in", "mthreads", ":", "\n", "\t\t\t", "mthread", ".", "start", "(", ")", "\n", "\n", "", "for", "bthread", "in", "bthreads", ":", "\n", "\t\t\t", "bthread", ".", "join", "(", ")", "\n", "", "for", "mthread", "in", "mthreads", ":", "\n", "\t\t\t", "mthread", ".", "join", "(", ")", "\n", "", "print", "(", "\"exist multithreading\"", ")", "\n", "\n", "self", ".", "label", "=", "np", ".", "array", "(", "self", ".", "label", ")", "\n", "return", "self", ".", "Matrix", ",", "self", ".", "label", ",", "self", ".", "featureList", "\n", "\n"]], "home.repos.pwc.inspect_result.wubozhi_Xmal.ModelTrain.attention.attention.show_accuracy": [[19, 59], ["print", "len", "range", "print", "print", "print", "pandas.DataFrame", "pandas.DataFrame.to_csv", "float", "float", "float"], "methods", ["None"], ["\t", "def", "show_accuracy", "(", "self", ",", "x_train", ",", "y_hat", ",", "y_train", ",", "name", ")", ":", "\n", "\t\t", "\"\"\"\n\t\tcalculate the training results\n\t\t:param x_train: feature matrix of training set \n\t\t:param y_hat: detection result of training set \n\t\t:param y_train: label of training set \n\t\t:param name: apk name\n\t\t:return: Accurary \n\t\t\"\"\"", "\n", "\n", "print", "(", "name", ")", "\n", "tp", "=", "0", "\n", "fp", "=", "0", "\n", "tn", "=", "0", "\n", "fn", "=", "0", "\n", "num", "=", "len", "(", "x_train", ")", "\n", "for", "i", "in", "range", "(", "num", ")", ":", "\n", "\t\t\t", "if", "y_hat", "[", "i", "]", "==", "y_train", "[", "i", "]", ":", "\n", "\t\t\t\t", "if", "y_hat", "[", "i", "]", "==", "0", ":", "\n", "\t\t\t\t\t", "tp", "+=", "1", "\n", "", "else", ":", "\n", "\t\t\t\t\t", "tn", "+=", "1", "\n", "", "", "else", ":", "\n", "\t\t\t\t", "if", "y_hat", "[", "i", "]", "==", "0", ":", "\n", "\t\t\t\t\t", "fp", "+=", "1", "\n", "", "else", ":", "\n", "\t\t\t\t\t", "fn", "+=", "1", "\n", "", "", "", "Recall", "=", "tp", "/", "float", "(", "tp", "+", "fn", ")", "\n", "Precision", "=", "tp", "/", "float", "(", "tp", "+", "fp", ")", "\n", "Accurary", "=", "(", "tp", "+", "tn", ")", "/", "float", "(", "tp", "+", "tn", "+", "fn", "+", "fp", ")", "\n", "FalseRate", "=", "1", "-", "Precision", "\n", "AllFalseRate", "=", "1", "-", "Accurary", "\n", "print", "(", "\"Total num:\"", ",", "num", ")", "\n", "printlist", "=", "[", "'Precision'", ",", "'Recall'", ",", "'Accurary'", ",", "'FalseRate'", ",", "'AllFalseRate'", "]", "\n", "datalist", "=", "[", "Precision", ",", "Recall", ",", "Accurary", ",", "FalseRate", ",", "AllFalseRate", "]", "\n", "print", "(", "printlist", ")", "\n", "print", "(", "datalist", ")", "\n", "frame", "=", "pd", ".", "DataFrame", "(", "datalist", ",", "index", "=", "printlist", ")", "\n", "frame", ".", "to_csv", "(", "\"..\"", "+", "os", ".", "sep", "+", "\"Data\"", "+", "os", ".", "sep", "+", "'trainResult.csv'", ",", "mode", "=", "'a'", ")", "\n", "return", "Accurary", "\n", "\n"]], "home.repos.pwc.inspect_result.wubozhi_Xmal.ModelTrain.attention.attention.Att": [[61, 68], ["keras.layers.Dense", "keras.layers.Activation", "keras.layers.Multiply"], "methods", ["None"], ["", "def", "Att", "(", "self", ",", "att_dim", ",", "inputs", ",", "name", ")", ":", "\n", "\t\t", "\"\"\" attention layer \"\"\"", "\n", "V", "=", "inputs", "\n", "QK", "=", "Dense", "(", "att_dim", ",", "bias", "=", "None", ")", "(", "inputs", ")", "\n", "QK", "=", "Activation", "(", "\"softmax\"", ",", "name", "=", "name", ")", "(", "QK", ")", "\n", "MV", "=", "Multiply", "(", ")", "(", "[", "V", ",", "QK", "]", ")", "\n", "return", "(", "MV", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wubozhi_Xmal.ModelTrain.attention.attention.train": [[69, 96], ["sklearn.preprocessing.OneHotEncoder", "sklearn.preprocessing.OneHotEncoder.fit_transform().toarray.reshape", "sklearn.preprocessing.OneHotEncoder.fit_transform().toarray", "sklearn.model_selection.train_test_split", "keras.layers.Input", "attention.attention.attention.Att", "keras.models.Model", "keras.optimizers.Adam", "keras.models.Model.compile", "keras.models.Model.fit", "keras.models.Model.predict", "attention.attention.attention.show_accuracy", "keras.models.Model.predict", "attention.attention.attention.show_accuracy", "keras.models.Model.save", "keras.layers.Dense", "round", "round", "sklearn.preprocessing.OneHotEncoder.fit_transform"], "methods", ["home.repos.pwc.inspect_result.wubozhi_Xmal.ModelTrain.attention.attention.Att", "home.repos.pwc.inspect_result.wubozhi_Xmal.ModelTrain.attention.attention.show_accuracy", "home.repos.pwc.inspect_result.wubozhi_Xmal.ModelTrain.attention.attention.show_accuracy"], ["", "def", "train", "(", "self", ",", "Matrix", ",", "label", ",", "modelPath", ")", ":", "\n", "\t\t", "\"\"\" start train model \"\"\"", "\n", "dimemsion", "=", "158", "\n", "enc", "=", "OneHotEncoder", "(", ")", "\n", "label", "=", "label", ".", "reshape", "(", "-", "1", ",", "1", ")", "\n", "label", "=", "enc", ".", "fit_transform", "(", "label", ")", ".", "toarray", "(", ")", "\n", "# print(label)", "\n", "\n", "X_train", ",", "X_test", ",", "y_train", ",", "y_test", "=", "train_test_split", "(", "Matrix", ",", "label", ",", "random_state", "=", "1", ",", "train_size", "=", "0.7", ")", "\n", "\n", "inputs", "=", "Input", "(", "shape", "=", "(", "dimemsion", ",", ")", ")", "\n", "attention", "=", "self", ".", "Att", "(", "dimemsion", ",", "inputs", ",", "\"attention\"", ")", "\n", "output", "=", "Dense", "(", "2", ",", "activation", "=", "'softmax'", ")", "(", "attention", ")", "\n", "model", "=", "Model", "(", "input", "=", "[", "inputs", "]", ",", "output", "=", "output", ")", "\n", "adam", "=", "optimizers", ".", "Adam", "(", "lr", "=", "0.0001", ",", "beta_1", "=", "0.9", ",", "beta_2", "=", "0.999", ",", "epsilon", "=", "None", ",", "decay", "=", "0.0", ")", "\n", "model", ".", "compile", "(", "optimizer", "=", "'adam'", ",", "loss", "=", "'binary_crossentropy'", ",", "metrics", "=", "[", "'accuracy'", "]", ")", "\n", "model", ".", "fit", "(", "[", "X_train", "]", ",", "y_train", ",", "epochs", "=", "20", ",", "batch_size", "=", "100", ",", "shuffle", "=", "True", ",", "validation_split", "=", "0.1", ")", "\n", "\n", "y_hat_proba", "=", "model", ".", "predict", "(", "X_train", ")", "\n", "y_hat", "=", "[", "round", "(", "i", "[", "1", "]", ")", "for", "i", "in", "y_hat_proba", "]", "\n", "self", ".", "show_accuracy", "(", "X_train", ",", "y_hat", ",", "y_train", "[", ":", ",", "1", "]", ",", "\"train set\"", ")", "\n", "y_hat_proba", "=", "model", ".", "predict", "(", "X_test", ")", "\n", "y_hat", "=", "[", "round", "(", "i", "[", "1", "]", ")", "for", "i", "in", "y_hat_proba", "]", "\n", "self", ".", "show_accuracy", "(", "X_test", ",", "y_hat", ",", "y_test", "[", ":", ",", "1", "]", ",", "\"test set\"", ")", "\n", "\n", "model", ".", "save", "(", "modelPath", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.wubozhi_Xmal.Log.log.Log": [[4, 15], ["logging.getLogger", "logging.getLogger.setLevel", "logging.Formatter", "logging.FileHandler", "logging.FileHandler.setFormatter", "logging.getLogger.addHandler"], "function", ["None"], ["def", "Log", "(", "self", ")", ":", "\n", "\t", "\"\"\"log\"\"\"", "\n", "logPath", "=", "\"log.txt\"", "\n", "logger", "=", "logging", ".", "getLogger", "(", "\"RESULT\"", ")", "\n", "logger", ".", "setLevel", "(", "logging", ".", "INFO", ")", "\n", "if", "not", "logger", ".", "handlers", ":", "\n", "\t\t", "formatter", "=", "logging", ".", "Formatter", "(", "'%(asctime)s %(levelname)-8s: %(message)s'", ")", "\n", "file_handler", "=", "logging", ".", "FileHandler", "(", "logPath", ")", "\n", "file_handler", ".", "setFormatter", "(", "formatter", ")", "\n", "logger", ".", "addHandler", "(", "file_handler", ")", "\n", "", "return", "logger", "\n", "\n"]], "home.repos.pwc.inspect_result.wubozhi_Xmal.ModelCheck.attention_utils.get_activations": [[5, 22], ["print", "keras.function", "activations.append", "func", "print", "print", "keras.learning_phase"], "function", ["None"], ["def", "get_activations", "(", "model", ",", "inputs", ",", "print_shape_only", "=", "False", ",", "layer_name", "=", "None", ")", ":", "\n", "    ", "print", "(", "'----- activations -----'", ")", "\n", "activations", "=", "[", "]", "\n", "inp", "=", "model", ".", "input", "\n", "if", "layer_name", "is", "None", ":", "\n", "        ", "outputs", "=", "[", "layer", ".", "output", "for", "layer", "in", "model", ".", "layers", "]", "\n", "", "else", ":", "\n", "        ", "outputs", "=", "[", "layer", ".", "output", "for", "layer", "in", "model", ".", "layers", "if", "layer", ".", "name", "==", "layer_name", "]", "# all layer outputs", "\n", "", "funcs", "=", "[", "K", ".", "function", "(", "[", "inp", "]", "+", "[", "K", ".", "learning_phase", "(", ")", "]", ",", "[", "out", "]", ")", "for", "out", "in", "outputs", "]", "# evaluation functions", "\n", "layer_outputs", "=", "[", "func", "(", "[", "inputs", ",", "1.", "]", ")", "[", "0", "]", "for", "func", "in", "funcs", "]", "\n", "for", "layer_activations", "in", "layer_outputs", ":", "\n", "        ", "activations", ".", "append", "(", "layer_activations", ")", "\n", "if", "print_shape_only", ":", "\n", "            ", "print", "(", "layer_activations", ".", "shape", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "layer_activations", ")", "\n", "", "", "return", "activations", "\n", "\n"]], "home.repos.pwc.inspect_result.wubozhi_Xmal.ModelCheck.attention_utils.get_data": [[24, 38], ["numpy.random.standard_normal", "numpy.random.randint"], "function", ["None"], ["", "def", "get_data", "(", "n", ",", "input_dim", ",", "attention_column", "=", "1", ")", ":", "\n", "    ", "\"\"\"\n    Data generation. x is purely random except that it's first value equals the target y.\n    In practice, the network should learn that the target = x[attention_column].\n    Therefore, most of its attention should be focused on the value addressed by attention_column.\n    :param n: the number of samples to retrieve.\n    :param input_dim: the number of dimensions of each element in the series.\n    :param attention_column: the column linked to the target. Everything else is purely random.\n    :return: x: model inputs, y: model targets\n    \"\"\"", "\n", "x", "=", "np", ".", "random", ".", "standard_normal", "(", "size", "=", "(", "n", ",", "input_dim", ")", ")", "\n", "y", "=", "np", ".", "random", ".", "randint", "(", "low", "=", "0", ",", "high", "=", "2", ",", "size", "=", "(", "n", ",", "1", ")", ")", "\n", "x", "[", ":", ",", "attention_column", "]", "=", "y", "[", ":", ",", "0", "]", "\n", "return", "x", ",", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.wubozhi_Xmal.ModelCheck.attention_utils.get_data_recurrent": [[40, 55], ["numpy.random.standard_normal", "numpy.random.randint", "numpy.tile"], "function", ["None"], ["", "def", "get_data_recurrent", "(", "n", ",", "time_steps", ",", "input_dim", ",", "attention_column", "=", "10", ")", ":", "\n", "    ", "\"\"\"\n    Data generation. x is purely random except that it's first value equals the target y.\n    In practice, the network should learn that the target = x[attention_column].\n    Therefore, most of its attention should be focused on the value addressed by attention_column.\n    :param n: the number of samples to retrieve.\n    :param time_steps: the number of time steps of your series.\n    :param input_dim: the number of dimensions of each element in the series.\n    :param attention_column: the column linked to the target. Everything else is purely random.\n    :return: x: model inputs, y: model targets\n    \"\"\"", "\n", "x", "=", "np", ".", "random", ".", "standard_normal", "(", "size", "=", "(", "n", ",", "time_steps", ",", "input_dim", ")", ")", "\n", "y", "=", "np", ".", "random", ".", "randint", "(", "low", "=", "0", ",", "high", "=", "2", ",", "size", "=", "(", "n", ",", "1", ")", ")", "\n", "x", "[", ":", ",", "attention_column", ",", ":", "]", "=", "np", ".", "tile", "(", "y", "[", ":", "]", ",", "(", "1", ",", "input_dim", ")", ")", "\n", "return", "x", ",", "y", "\n", "", ""]], "home.repos.pwc.inspect_result.wubozhi_Xmal.ModelCheck.Test.test.__init__": [[33, 45], ["sklearn.externals.joblib.load", "log.Log", "FeatureExtraction.FeatureExtraction.FeatureExtraction"], "methods", ["home.repos.pwc.inspect_result.wubozhi_Xmal.Log.log.Log"], ["\t", "def", "__init__", "(", "self", ",", "clf", ")", ":", "\n", "\t\t", "\"\"\"init params\"\"\"", "\n", "self", ".", "clf", "=", "clf", "\n", "self", ".", "trainModel", "=", "\"..\"", "+", "os", ".", "sep", "+", "\"Data\"", "+", "os", ".", "sep", "+", "\"train_model.m\"", "\n", "self", ".", "xtrain", "=", "\"..\"", "+", "os", ".", "sep", "+", "\"Data\"", "+", "os", ".", "sep", "+", "\"xtrain\"", "\n", "self", ".", "Check", "=", "\"..\"", "+", "os", ".", "sep", "+", "\"CheckApk\"", "\n", "self", ".", "DataImportant", "=", "\"..\"", "+", "os", ".", "sep", "+", "\"TestData\"", "\n", "self", ".", "CheckData", "=", "\"..\"", "+", "os", ".", "sep", "+", "\"Data\"", "+", "os", ".", "sep", "+", "\"CheckData\"", "\n", "self", ".", "TestMatrix", "=", "\"..\"", "+", "os", ".", "sep", "+", "\"Data\"", "+", "os", ".", "sep", "+", "\"testMatrix\"", "\n", "self", ".", "Featurelist", "=", "joblib", ".", "load", "(", "\"..\"", "+", "os", ".", "sep", "+", "\"Data\"", "+", "os", ".", "sep", "+", "\"Featurelist\"", ")", "\n", "self", ".", "logger", "=", "Log", "(", "self", ")", "\n", "self", ".", "FeatureExtractionClass", "=", "FeatureExtraction", "(", ")", "\n", "", "def", "getCheckApkFeature", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.wubozhi_Xmal.ModelCheck.Test.test.getCheckApkFeature": [[45, 60], ["Test.test.FeatureExtractionClass.filesInFolder", "multiprocessing.Lock", "multiprocessing.Manager", "multiprocessing.Manager.list", "multiprocessing.Process", "p.start", "p.join", "range"], "methods", ["home.repos.pwc.inspect_result.wubozhi_Xmal.FeatureProcess.GetFeatureMatrix.GetFeatureMatrix.filesInFolder"], ["", "def", "getCheckApkFeature", "(", "self", ")", ":", "\n", "\t\t", "\"\"\"\n\t\tget feature files from CheckAPK file\n\t\t:return: checkApks \n\t\t\"\"\"", "\n", "checkApks", "=", "self", ".", "FeatureExtractionClass", ".", "filesInFolder", "(", "self", ".", "Check", ",", "\".apk\"", ")", "\n", "TestFileLock", "=", "Lock", "(", ")", "\n", "m", "=", "Manager", "(", ")", "\n", "getTestFile", "=", "m", ".", "list", "(", ")", "\n", "processes", "=", "[", "Process", "(", "target", "=", "self", ".", "FeatureExtractionClass", ".", "getFeatures", ",", "args", "=", "(", "self", ".", "Check", ",", "checkApks", ",", "self", ".", "CheckData", ",", "TestFileLock", ",", "getTestFile", ")", ")", "for", "i", "in", "range", "(", "3", ")", "]", "\n", "for", "p", "in", "processes", ":", "\n", "\t\t\t", "p", ".", "start", "(", ")", "\n", "", "for", "p", "in", "processes", ":", "\n", "\t\t\t", "p", ".", "join", "(", ")", "\n", "", "return", "checkApks", "\n", "\n"]], "home.repos.pwc.inspect_result.wubozhi_Xmal.ModelCheck.Test.test.getFeatureMatric": [[61, 73], ["numpy.zeros", "GetFeatureMatrix.GetFeatureMatrix.GetFeatureMatrix", "GetFeatureMatrix.GetFeatureMatrix.GetFeatureMatrix.getFeaturefromAPK", "numpy.vstack", "Test.test.Featurelist.__len__"], "methods", ["home.repos.pwc.inspect_result.wubozhi_Xmal.FeatureProcess.GetFeatureMatrix.GetFeatureMatrix.getFeaturefromAPK"], ["", "def", "getFeatureMatric", "(", "self", ",", "checkApks", ")", ":", "\n", "\t\t", "\"\"\"\n\t\tget feature files from CheckAPK file\n\t\t:param checkApks: the checkApks files path\n\t\t:return: Matrix \n\t\t\"\"\"", "\n", "Matrix", "=", "np", ".", "zeros", "(", "(", "0", ",", "self", ".", "Featurelist", ".", "__len__", "(", ")", ")", ",", "dtype", "=", "int", ")", "\n", "GetFeatureMatrixClass", "=", "GetFeatureMatrix", "(", ")", "\n", "for", "apk", "in", "checkApks", ":", "\n", "\t\t\t", "features", "=", "GetFeatureMatrixClass", ".", "getFeaturefromAPK", "(", "self", ".", "CheckData", ",", "apk", ")", "\n", "Matrix", "=", "np", ".", "vstack", "(", "(", "Matrix", ",", "features", ")", ")", "\n", "", "return", "Matrix", "\n", "\n"]], "home.repos.pwc.inspect_result.wubozhi_Xmal.ModelCheck.Test.test.check": [[75, 127], ["Test.test.getCheckApkFeature", "Test.test.FeatureExtractionClass.filesInFolder", "Test.test.getFeatureMatric", "Test.test.clf.predict", "print", "print", "open", "open.write", "csv.writer", "csv.writer.writerow", "print", "print", "range", "pandas.DataFrame", "pandas.DataFrame", "pandas.DataFrame.to_csv", "attention_utils.get_activations", "print", "range", "APKlist.append", "round", "APKlist.__len__", "APKlist.__len__", "print", "csv.writer.writerow", "csv.writer.writerow", "map", "list", "sorted", "i.replace", "print", "csv.writer.writerow", "print", "csv.writer.writerow", "heapq.nlargest", "f.update", "list", "list", "print", "csv.writer.writerow", "list"], "methods", ["home.repos.pwc.inspect_result.wubozhi_Xmal.ModelCheck.Test.test.getCheckApkFeature", "home.repos.pwc.inspect_result.wubozhi_Xmal.FeatureProcess.GetFeatureMatrix.GetFeatureMatrix.filesInFolder", "home.repos.pwc.inspect_result.wubozhi_Xmal.ModelCheck.Test.test.getFeatureMatric", "home.repos.pwc.inspect_result.wubozhi_Xmal.ModelCheck.attention_utils.get_activations"], ["", "def", "check", "(", "self", ")", ":", "\n", "\t\t", "\"\"\"\n\t\tget the detection result of checkApks \n\n\t\t\"\"\"", "\n", "self", ".", "getCheckApkFeature", "(", ")", "\n", "APKlist", "=", "[", "]", "\n", "for", "i", "in", "self", ".", "FeatureExtractionClass", ".", "filesInFolder", "(", "self", ".", "CheckData", ",", "\"_Permission.txt\"", ")", ":", "\n", "\t\t\t", "APKlist", ".", "append", "(", "i", ".", "replace", "(", "\"_Permission.txt\"", ",", "\".apk\"", ")", ")", "\n", "\n", "", "Matrix", "=", "self", ".", "getFeatureMatric", "(", "APKlist", ")", "\n", "\n", "predict_proba_y", "=", "self", ".", "clf", ".", "predict", "(", "Matrix", ")", "\n", "predict_y", "=", "[", "round", "(", "i", "[", "1", "]", ")", "for", "i", "in", "predict_proba_y", "]", "\n", "print", "(", "predict_proba_y", ")", "\n", "print", "(", "predict_y", ")", "\n", "\n", "out", "=", "open", "(", "\"..\"", "+", "os", ".", "sep", "+", "'Data'", "+", "os", ".", "sep", "+", "'checkResult.csv'", ",", "'w'", ",", "encoding", "=", "'utf_8'", ")", "\n", "out", ".", "write", "(", "''", ")", "\n", "writer", "=", "csv", ".", "writer", "(", "out", ",", "lineterminator", "=", "'\\n'", ")", "\n", "writer", ".", "writerow", "(", "[", "'APKname'", ",", "'Category'", "]", ")", "\n", "\n", "print", "(", "\"\\nAPK checking...\\n\"", ")", "\n", "print", "(", "\"--------------------------------result--------------------------------------\"", ")", "\n", "for", "i", "in", "range", "(", "APKlist", ".", "__len__", "(", ")", ")", ":", "\n", "\t\t\t", "if", "predict_y", "[", "i", "]", "==", "1", ":", "\n", "\t\t\t\t", "print", "(", "\"APK name:\t\"", "+", "APKlist", "[", "i", "]", "+", "\"\t\"", "+", "\"Category:\tMalicious APK\\n\"", ")", "\n", "writer", ".", "writerow", "(", "[", "APKlist", "[", "i", "]", ",", "'Malicious APK'", "]", ")", "\n", "", "else", ":", "\n", "\t\t\t\t", "print", "(", "\"APK name:\t\"", "+", "APKlist", "[", "i", "]", "+", "\"\t\"", "+", "\"Category:\tBenign APK\\n\"", ")", "\n", "writer", ".", "writerow", "(", "[", "APKlist", "[", "i", "]", ",", "'Benign APK'", "]", ")", "\n", "\n", "", "", "frame", "=", "pd", ".", "DataFrame", "(", "Matrix", ",", "columns", "=", "self", ".", "Featurelist", ")", "\n", "frame", ".", "to_csv", "(", "\"..\"", "+", "os", ".", "sep", "+", "\"Data\"", "+", "os", ".", "sep", "+", "'testMatrix.csv'", ",", "index", "=", "False", ")", "\n", "\n", "attention_vector", "=", "get_activations", "(", "self", ".", "clf", ",", "Matrix", ",", "print_shape_only", "=", "True", ",", "layer_name", "=", "'attention'", ")", "\n", "print", "(", "attention_vector", ")", "\n", "for", "j", "in", "range", "(", "APKlist", ".", "__len__", "(", ")", ")", ":", "\n", "\t\t\t", "print", "(", "APKlist", "[", "j", "]", ")", "\n", "writer", ".", "writerow", "(", "[", "\"--------\"", "]", ")", "\n", "writer", ".", "writerow", "(", "[", "APKlist", "[", "j", "]", "]", ")", "\n", "max_num_index_list", "=", "map", "(", "list", "(", "attention_vector", "[", "0", "]", "[", "j", "]", ")", ".", "index", ",", "heapq", ".", "nlargest", "(", "20", ",", "list", "(", "attention_vector", "[", "0", "]", "[", "j", "]", ")", ")", ")", "\n", "max_num_index_list", "=", "list", "(", "max_num_index_list", ")", "\n", "f", "=", "{", "}", "\n", "for", "i", "in", "max_num_index_list", ":", "\n", "\t\t\t\t", "dic", "=", "{", "i", ":", "list", "(", "attention_vector", "[", "0", "]", "[", "j", "]", ")", "[", "i", "]", "}", "\n", "f", ".", "update", "(", "dic", ")", "\n", "", "for", "k", "in", "sorted", "(", "f", ",", "key", "=", "f", ".", "__getitem__", ",", "reverse", "=", "True", ")", ":", "\n", "# for i in max_num_index_list:", "\n", "\t\t\t\t", "if", "Matrix", "[", "j", "]", "[", "k", "]", "==", "1", ":", "\n", "\t\t\t\t\t", "print", "(", "self", ".", "Featurelist", "[", "k", "]", ",", "' : '", ",", "Matrix", "[", "j", "]", "[", "k", "]", ",", "' : '", ",", "f", "[", "k", "]", ",", "' : '", ",", "k", ")", "\n", "writer", ".", "writerow", "(", "[", "self", ".", "Featurelist", "[", "k", "]", ",", "Matrix", "[", "j", "]", "[", "k", "]", ",", "f", "[", "k", "]", ",", "k", "]", ")", "\n", "\n"]]}