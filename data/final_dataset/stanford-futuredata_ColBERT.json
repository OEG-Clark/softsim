{"home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.colbert.searcher.Searcher.__init__": [[23, 46], ["colbert.infra.launcher.print_memory_stats", "colbert.infra.config.ColBERTConfig.from_existing", "os.path.join", "colbert.infra.config.ColBERTConfig.load_from_index", "colbert.infra.config.ColBERTConfig.load_from_checkpoint", "colbert.infra.config.ColBERTConfig.from_existing", "colbert.data.Collection.cast", "searcher.Searcher.configure", "colbert.modeling.checkpoint.Checkpoint", "colbert.search.index_storage.IndexScorer", "colbert.infra.launcher.print_memory_stats", "searcher.Searcher.checkpoint.cuda", "colbert.infra.run.Run"], "methods", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.infra.launcher.print_memory_stats", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.config.base_config.BaseConfig.from_existing", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.config.base_config.BaseConfig.load_from_index", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.config.base_config.BaseConfig.load_from_checkpoint", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.config.base_config.BaseConfig.from_existing", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.data.examples.Examples.cast", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.config.core_config.CoreConfig.configure", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.infra.launcher.print_memory_stats"], ["    ", "def", "__init__", "(", "self", ",", "index", ",", "checkpoint", "=", "None", ",", "collection", "=", "None", ",", "config", "=", "None", ")", ":", "\n", "        ", "print_memory_stats", "(", ")", "\n", "\n", "initial_config", "=", "ColBERTConfig", ".", "from_existing", "(", "config", ",", "Run", "(", ")", ".", "config", ")", "\n", "\n", "default_index_root", "=", "initial_config", ".", "index_root_", "\n", "self", ".", "index", "=", "os", ".", "path", ".", "join", "(", "default_index_root", ",", "index", ")", "\n", "self", ".", "index_config", "=", "ColBERTConfig", ".", "load_from_index", "(", "self", ".", "index", ")", "\n", "\n", "self", ".", "checkpoint", "=", "checkpoint", "or", "self", ".", "index_config", ".", "checkpoint", "\n", "self", ".", "checkpoint_config", "=", "ColBERTConfig", ".", "load_from_checkpoint", "(", "self", ".", "checkpoint", ")", "\n", "self", ".", "config", "=", "ColBERTConfig", ".", "from_existing", "(", "self", ".", "checkpoint_config", ",", "self", ".", "index_config", ",", "initial_config", ")", "\n", "\n", "self", ".", "collection", "=", "Collection", ".", "cast", "(", "collection", "or", "self", ".", "config", ".", "collection", ")", "\n", "self", ".", "configure", "(", "checkpoint", "=", "self", ".", "checkpoint", ",", "collection", "=", "self", ".", "collection", ")", "\n", "\n", "self", ".", "checkpoint", "=", "Checkpoint", "(", "self", ".", "checkpoint", ",", "colbert_config", "=", "self", ".", "config", ")", "\n", "use_gpu", "=", "self", ".", "config", ".", "total_visible_gpus", ">", "0", "\n", "if", "use_gpu", ":", "\n", "            ", "self", ".", "checkpoint", "=", "self", ".", "checkpoint", ".", "cuda", "(", ")", "\n", "", "self", ".", "ranker", "=", "IndexScorer", "(", "self", ".", "index", ",", "use_gpu", ")", "\n", "\n", "print_memory_stats", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.colbert.searcher.Searcher.configure": [[47, 49], ["searcher.Searcher.config.configure"], "methods", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.config.core_config.CoreConfig.configure"], ["", "def", "configure", "(", "self", ",", "**", "kw_args", ")", ":", "\n", "        ", "self", ".", "config", ".", "configure", "(", "**", "kw_args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.colbert.searcher.Searcher.encode": [[50, 58], ["searcher.Searcher.checkpoint.queryFromText", "type", "len"], "methods", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.modeling.checkpoint.Checkpoint.queryFromText"], ["", "def", "encode", "(", "self", ",", "text", ":", "TextQueries", ")", ":", "\n", "        ", "queries", "=", "text", "if", "type", "(", "text", ")", "is", "list", "else", "[", "text", "]", "\n", "bsize", "=", "128", "if", "len", "(", "queries", ")", ">", "128", "else", "None", "\n", "\n", "self", ".", "checkpoint", ".", "query_tokenizer", ".", "query_maxlen", "=", "self", ".", "config", ".", "query_maxlen", "\n", "Q", "=", "self", ".", "checkpoint", ".", "queryFromText", "(", "queries", ",", "bsize", "=", "bsize", ",", "to_cpu", "=", "True", ")", "\n", "\n", "return", "Q", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.colbert.searcher.Searcher.search": [[59, 62], ["searcher.Searcher.encode", "searcher.Searcher.dense_search"], "methods", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.baleen.hop_searcher.HopSearcher.encode", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.colbert.searcher.Searcher.dense_search"], ["", "def", "search", "(", "self", ",", "text", ":", "str", ",", "k", "=", "10", ")", ":", "\n", "        ", "Q", "=", "self", ".", "encode", "(", "text", ")", "\n", "return", "self", ".", "dense_search", "(", "Q", ",", "k", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.colbert.searcher.Searcher.search_all": [[63, 70], ["colbert.data.Queries.cast", "list", "searcher.Searcher.encode", "searcher.Searcher._search_all_Q", "colbert.data.Queries.cast.values"], "methods", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.data.examples.Examples.cast", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.baleen.hop_searcher.HopSearcher.encode", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.colbert.searcher.Searcher._search_all_Q", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.data.queries.Queries.values"], ["", "def", "search_all", "(", "self", ",", "queries", ":", "TextQueries", ",", "k", "=", "10", ")", ":", "\n", "        ", "queries", "=", "Queries", ".", "cast", "(", "queries", ")", "\n", "queries_", "=", "list", "(", "queries", ".", "values", "(", ")", ")", "\n", "\n", "Q", "=", "self", ".", "encode", "(", "queries_", ")", "\n", "\n", "return", "self", ".", "_search_all_Q", "(", "queries", ",", "Q", ",", "k", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.colbert.searcher.Searcher._search_all_Q": [[71, 84], ["colbert.infra.provenance.Provenance", "queries.provenance", "searcher.Searcher.config.export", "colbert.data.Ranking", "list", "zip", "tqdm.tqdm.tqdm", "zip", "range", "queries.keys", "searcher.Searcher.dense_search", "Q.size"], "methods", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.distillation.ranking_scorer.RankingScorer.provenance", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.config.core_config.CoreConfig.export", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.data.queries.Queries.keys", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.colbert.searcher.Searcher.dense_search"], ["", "def", "_search_all_Q", "(", "self", ",", "queries", ",", "Q", ",", "k", ")", ":", "\n", "        ", "all_scored_pids", "=", "[", "list", "(", "zip", "(", "*", "self", ".", "dense_search", "(", "Q", "[", "query_idx", ":", "query_idx", "+", "1", "]", ",", "k", ")", ")", ")", "\n", "for", "query_idx", "in", "tqdm", "(", "range", "(", "Q", ".", "size", "(", "0", ")", ")", ")", "]", "\n", "\n", "data", "=", "{", "qid", ":", "val", "for", "qid", ",", "val", "in", "zip", "(", "queries", ".", "keys", "(", ")", ",", "all_scored_pids", ")", "}", "\n", "\n", "provenance", "=", "Provenance", "(", ")", "\n", "provenance", ".", "source", "=", "'Searcher::search_all'", "\n", "provenance", ".", "queries", "=", "queries", ".", "provenance", "(", ")", "\n", "provenance", ".", "config", "=", "self", ".", "config", ".", "export", "(", ")", "\n", "provenance", ".", "k", "=", "k", "\n", "\n", "return", "Ranking", "(", "data", "=", "data", ",", "provenance", "=", "provenance", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.colbert.searcher.Searcher.dense_search": [[85, 111], ["searcher.Searcher.ranker.rank", "list", "searcher.Searcher.configure", "searcher.Searcher.configure", "searcher.Searcher.configure", "range", "searcher.Searcher.configure", "searcher.Searcher.configure", "searcher.Searcher.configure", "searcher.Searcher.configure", "searcher.Searcher.configure", "searcher.Searcher.configure", "max"], "methods", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.search.index_storage.IndexScorer.rank", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.config.core_config.CoreConfig.configure", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.config.core_config.CoreConfig.configure", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.config.core_config.CoreConfig.configure", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.config.core_config.CoreConfig.configure", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.config.core_config.CoreConfig.configure", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.config.core_config.CoreConfig.configure", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.config.core_config.CoreConfig.configure", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.config.core_config.CoreConfig.configure", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.config.core_config.CoreConfig.configure"], ["", "def", "dense_search", "(", "self", ",", "Q", ":", "torch", ".", "Tensor", ",", "k", "=", "10", ")", ":", "\n", "        ", "if", "k", "<=", "10", ":", "\n", "            ", "if", "self", ".", "config", ".", "ncells", "is", "None", ":", "\n", "                ", "self", ".", "configure", "(", "ncells", "=", "1", ")", "\n", "", "if", "self", ".", "config", ".", "centroid_score_threshold", "is", "None", ":", "\n", "                ", "self", ".", "configure", "(", "centroid_score_threshold", "=", "0.5", ")", "\n", "", "if", "self", ".", "config", ".", "ndocs", "is", "None", ":", "\n", "                ", "self", ".", "configure", "(", "ndocs", "=", "256", ")", "\n", "", "", "elif", "k", "<=", "100", ":", "\n", "            ", "if", "self", ".", "config", ".", "ncells", "is", "None", ":", "\n", "                ", "self", ".", "configure", "(", "ncells", "=", "2", ")", "\n", "", "if", "self", ".", "config", ".", "centroid_score_threshold", "is", "None", ":", "\n", "                ", "self", ".", "configure", "(", "centroid_score_threshold", "=", "0.45", ")", "\n", "", "if", "self", ".", "config", ".", "ndocs", "is", "None", ":", "\n", "                ", "self", ".", "configure", "(", "ndocs", "=", "1024", ")", "\n", "", "", "else", ":", "\n", "            ", "if", "self", ".", "config", ".", "ncells", "is", "None", ":", "\n", "                ", "self", ".", "configure", "(", "ncells", "=", "4", ")", "\n", "", "if", "self", ".", "config", ".", "centroid_score_threshold", "is", "None", ":", "\n", "                ", "self", ".", "configure", "(", "centroid_score_threshold", "=", "0.4", ")", "\n", "", "if", "self", ".", "config", ".", "ndocs", "is", "None", ":", "\n", "                ", "self", ".", "configure", "(", "ndocs", "=", "max", "(", "k", "*", "4", ",", "4096", ")", ")", "\n", "\n", "", "", "pids", ",", "scores", "=", "self", ".", "ranker", ".", "rank", "(", "self", ".", "config", ",", "Q", ")", "\n", "\n", "return", "pids", "[", ":", "k", "]", ",", "list", "(", "range", "(", "1", ",", "k", "+", "1", ")", ")", ",", "scores", "[", ":", "k", "]", "\n", "", "", ""]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.colbert.trainer.Trainer.__init__": [[9, 15], ["colbert.infra.config.ColBERTConfig.from_existing", "colbert.infra.run.Run"], "methods", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.config.base_config.BaseConfig.from_existing"], ["    ", "def", "__init__", "(", "self", ",", "triples", ",", "queries", ",", "collection", ",", "config", "=", "None", ")", ":", "\n", "        ", "self", ".", "config", "=", "ColBERTConfig", ".", "from_existing", "(", "config", ",", "Run", "(", ")", ".", "config", ")", "\n", "\n", "self", ".", "triples", "=", "triples", "\n", "self", ".", "queries", "=", "queries", "\n", "self", ".", "collection", "=", "collection", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.colbert.trainer.Trainer.configure": [[16, 18], ["trainer.Trainer.config.configure"], "methods", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.config.core_config.CoreConfig.configure"], ["", "def", "configure", "(", "self", ",", "**", "kw_args", ")", ":", "\n", "        ", "self", ".", "config", ".", "configure", "(", "**", "kw_args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.colbert.trainer.Trainer.train": [[19, 32], ["trainer.Trainer.configure", "trainer.Trainer.configure", "colbert.infra.launcher.Launcher", "colbert.infra.launcher.Launcher.launch"], "methods", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.config.core_config.CoreConfig.configure", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.config.core_config.CoreConfig.configure", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.distillation.scorer.Scorer.launch"], ["", "def", "train", "(", "self", ",", "checkpoint", "=", "'bert-base-uncased'", ")", ":", "\n", "        ", "\"\"\"\n            Note that config.checkpoint is ignored. Only the supplied checkpoint here is used.\n        \"\"\"", "\n", "\n", "# Resources don't come from the config object. They come from the input parameters.", "\n", "# TODO: After the API stabilizes, make this \"self.config.assign()\" to emphasize this distinction.", "\n", "self", ".", "configure", "(", "triples", "=", "self", ".", "triples", ",", "queries", "=", "self", ".", "queries", ",", "collection", "=", "self", ".", "collection", ")", "\n", "self", ".", "configure", "(", "checkpoint", "=", "checkpoint", ")", "\n", "\n", "launcher", "=", "Launcher", "(", "train", ")", "\n", "\n", "self", ".", "_best_checkpoint_path", "=", "launcher", ".", "launch", "(", "self", ".", "config", ",", "self", ".", "triples", ",", "self", ".", "queries", ",", "self", ".", "collection", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.colbert.trainer.Trainer.best_checkpoint_path": [[34, 36], ["None"], "methods", ["None"], ["", "def", "best_checkpoint_path", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_best_checkpoint_path", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.colbert.indexer.Indexer.__init__": [[16, 27], ["colbert.infra.config.ColBERTConfig.load_from_checkpoint", "colbert.infra.config.ColBERTConfig.from_existing", "indexer.Indexer.configure", "colbert.infra.run.Run"], "methods", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.config.base_config.BaseConfig.load_from_checkpoint", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.config.base_config.BaseConfig.from_existing", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.config.core_config.CoreConfig.configure"], ["    ", "def", "__init__", "(", "self", ",", "checkpoint", ",", "config", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n           Use Run().context() to choose the run's configuration. They are NOT extracted from `config`.\n        \"\"\"", "\n", "\n", "self", ".", "index_path", "=", "None", "\n", "self", ".", "checkpoint", "=", "checkpoint", "\n", "self", ".", "checkpoint_config", "=", "ColBERTConfig", ".", "load_from_checkpoint", "(", "checkpoint", ")", "\n", "\n", "self", ".", "config", "=", "ColBERTConfig", ".", "from_existing", "(", "self", ".", "checkpoint_config", ",", "config", ",", "Run", "(", ")", ".", "config", ")", "\n", "self", ".", "configure", "(", "checkpoint", "=", "checkpoint", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.colbert.indexer.Indexer.configure": [[28, 30], ["indexer.Indexer.config.configure"], "methods", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.config.core_config.CoreConfig.configure"], ["", "def", "configure", "(", "self", ",", "**", "kw_args", ")", ":", "\n", "        ", "self", ".", "config", ".", "configure", "(", "**", "kw_args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.colbert.indexer.Indexer.get_index": [[31, 33], ["None"], "methods", ["None"], ["", "def", "get_index", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "index_path", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.colbert.indexer.Indexer.erase": [[34, 57], ["sorted", "len", "os.listdir", "os.path.join", "os.path.join.endswith", "colbert.utils.utils.print_message", "time.sleep", "os.path.join.endswith", "deleted.append", "os.remove", "len"], "methods", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.utils.print_message"], ["", "def", "erase", "(", "self", ")", ":", "\n", "        ", "assert", "self", ".", "index_path", "is", "not", "None", "\n", "directory", "=", "self", ".", "index_path", "\n", "deleted", "=", "[", "]", "\n", "\n", "for", "filename", "in", "sorted", "(", "os", ".", "listdir", "(", "directory", ")", ")", ":", "\n", "            ", "filename", "=", "os", ".", "path", ".", "join", "(", "directory", ",", "filename", ")", "\n", "\n", "delete", "=", "filename", ".", "endswith", "(", "\".json\"", ")", "\n", "delete", "=", "delete", "and", "(", "'metadata'", "in", "filename", "or", "'doclen'", "in", "filename", "or", "'plan'", "in", "filename", ")", "\n", "delete", "=", "delete", "or", "filename", ".", "endswith", "(", "\".pt\"", ")", "\n", "\n", "if", "delete", ":", "\n", "                ", "deleted", ".", "append", "(", "filename", ")", "\n", "\n", "", "", "if", "len", "(", "deleted", ")", ":", "\n", "            ", "print_message", "(", "f\"#> Will delete {len(deleted)} files already at {directory} in 20 seconds...\"", ")", "\n", "time", ".", "sleep", "(", "20", ")", "\n", "\n", "for", "filename", "in", "deleted", ":", "\n", "                ", "os", ".", "remove", "(", "filename", ")", "\n", "\n", "", "", "return", "deleted", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.colbert.indexer.Indexer.index": [[58, 77], ["indexer.Indexer.configure", "indexer.Indexer.configure", "colbert.utils.utils.create_directory", "os.path.exists", "indexer.Indexer.erase", "indexer.Indexer.__launch"], "methods", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.config.core_config.CoreConfig.configure", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.config.core_config.CoreConfig.configure", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.utils.create_directory", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.colbert.indexer.Indexer.erase", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.colbert.indexer.Indexer.__launch"], ["", "def", "index", "(", "self", ",", "name", ",", "collection", ",", "overwrite", "=", "False", ")", ":", "\n", "        ", "assert", "overwrite", "in", "[", "True", ",", "False", ",", "'reuse'", ",", "'resume'", "]", "\n", "\n", "self", ".", "configure", "(", "collection", "=", "collection", ",", "index_name", "=", "name", ",", "resume", "=", "overwrite", "==", "'resume'", ")", "\n", "self", ".", "configure", "(", "bsize", "=", "64", ",", "partitions", "=", "None", ")", "\n", "\n", "self", ".", "index_path", "=", "self", ".", "config", ".", "index_path_", "\n", "index_does_not_exist", "=", "(", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "config", ".", "index_path_", ")", ")", "\n", "\n", "assert", "(", "overwrite", "in", "[", "True", ",", "'reuse'", ",", "'resume'", "]", ")", "or", "index_does_not_exist", ",", "self", ".", "config", ".", "index_path_", "\n", "create_directory", "(", "self", ".", "config", ".", "index_path_", ")", "\n", "\n", "if", "overwrite", "is", "True", ":", "\n", "            ", "self", ".", "erase", "(", ")", "\n", "\n", "", "if", "index_does_not_exist", "or", "overwrite", "!=", "'reuse'", ":", "\n", "            ", "self", ".", "__launch", "(", "collection", ")", "\n", "\n", "", "return", "self", ".", "index_path", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.colbert.indexer.Indexer.__launch": [[78, 85], ["torch.Manager", "colbert.infra.launcher.Launcher", "colbert.infra.launcher.Launcher.launch", "torch.Manager.list", "torch.Manager.Queue", "range", "range"], "methods", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.distillation.scorer.Scorer.launch"], ["", "def", "__launch", "(", "self", ",", "collection", ")", ":", "\n", "        ", "manager", "=", "mp", ".", "Manager", "(", ")", "\n", "shared_lists", "=", "[", "manager", ".", "list", "(", ")", "for", "_", "in", "range", "(", "self", ".", "config", ".", "nranks", ")", "]", "\n", "shared_queues", "=", "[", "manager", ".", "Queue", "(", "maxsize", "=", "1", ")", "for", "_", "in", "range", "(", "self", ".", "config", ".", "nranks", ")", "]", "\n", "\n", "launcher", "=", "Launcher", "(", "encode", ")", "\n", "launcher", ".", "launch", "(", "self", ".", "config", ",", "collection", ",", "shared_lists", ",", "shared_queues", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.logging.Logger.__init__": [[12, 22], ["os.path.join", "colbert.utils.utils.create_directory"], "methods", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.utils.create_directory"], ["    ", "def", "__init__", "(", "self", ",", "rank", ",", "run", ")", ":", "\n", "        ", "self", ".", "rank", "=", "rank", "\n", "self", ".", "is_main", "=", "self", ".", "rank", "in", "[", "-", "1", ",", "0", "]", "\n", "self", ".", "run", "=", "run", "\n", "self", ".", "logs_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "run", ".", "path", ",", "\"logs/\"", ")", "\n", "\n", "if", "self", ".", "is_main", ":", "\n", "# self._init_mlflow()", "\n", "# self.initialized_tensorboard = False", "\n", "            ", "create_directory", "(", "self", ".", "logs_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.logging.Logger._log_exception": [[39, 48], ["os.path.join", "colbert.utils.utils.print_message", "logging.Logger.log_new_artifact", "traceback.format_exception"], "methods", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.utils.print_message", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.logging.Logger.log_new_artifact"], ["", "", "def", "_log_exception", "(", "self", ",", "etype", ",", "value", ",", "tb", ")", ":", "\n", "        ", "if", "not", "self", ".", "is_main", ":", "\n", "            ", "return", "\n", "\n", "", "output_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "logs_path", ",", "'exception.txt'", ")", "\n", "trace", "=", "''", ".", "join", "(", "traceback", ".", "format_exception", "(", "etype", ",", "value", ",", "tb", ")", ")", "+", "'\\n'", "\n", "print_message", "(", "trace", ",", "'\\n\\n'", ")", "\n", "\n", "self", ".", "log_new_artifact", "(", "output_path", ",", "trace", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.logging.Logger._log_all_artifacts": [[49, 52], ["None"], "methods", ["None"], ["", "def", "_log_all_artifacts", "(", "self", ")", ":", "\n", "        ", "if", "not", "self", ".", "is_main", ":", "\n", "            ", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.logging.Logger._log_args": [[55, 71], ["open", "output_metadata.write", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.infra.run.Run.open"], ["", "", "def", "_log_args", "(", "self", ",", "args", ")", ":", "\n", "        ", "if", "not", "self", ".", "is_main", ":", "\n", "            ", "return", "\n", "\n", "# for key in vars(args):", "\n", "#     value = getattr(args, key)", "\n", "#     if type(value) in [int, float, str, bool]:", "\n", "#         mlflow.log_param(key, value)", "\n", "\n", "# with open(os.path.join(self.logs_path, 'args.json'), 'w') as output_metadata:", "\n", "#     # TODO: Call provenance() on the values that support it", "\n", "#     ujson.dump(args.input_arguments.__dict__, output_metadata, indent=4)", "\n", "#     output_metadata.write('\\n')", "\n", "\n", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "logs_path", ",", "'args.txt'", ")", ",", "'w'", ")", "as", "output_metadata", ":", "\n", "            ", "output_metadata", ".", "write", "(", "' '", ".", "join", "(", "sys", ".", "argv", ")", "+", "'\\n'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.logging.Logger.log_metric": [[72, 75], ["None"], "methods", ["None"], ["", "", "def", "log_metric", "(", "self", ",", "name", ",", "value", ",", "step", ",", "log_to_mlflow", "=", "True", ")", ":", "\n", "        ", "if", "not", "self", ".", "is_main", ":", "\n", "            ", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.logging.Logger.log_new_artifact": [[83, 86], ["open", "f.write"], "methods", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.infra.run.Run.open"], ["", "", "def", "log_new_artifact", "(", "self", ",", "path", ",", "content", ")", ":", "\n", "        ", "with", "open", "(", "path", ",", "'w'", ")", "as", "f", ":", "\n", "            ", "f", ".", "write", "(", "content", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.logging.Logger.warn": [[89, 94], ["colbert.utils.utils.print_message", "open", "output_metadata.write", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.utils.print_message", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.infra.run.Run.open"], ["", "", "def", "warn", "(", "self", ",", "*", "args", ")", ":", "\n", "        ", "msg", "=", "print_message", "(", "'[WARNING]'", ",", "'\\t'", ",", "*", "args", ")", "\n", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "logs_path", ",", "'warnings.txt'", ")", ",", "'a'", ")", "as", "output_metadata", ":", "\n", "            ", "output_metadata", ".", "write", "(", "msg", "+", "'\\n\\n\\n'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.logging.Logger.info_all": [[95, 97], ["colbert.utils.utils.print_message", "str"], "methods", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.utils.print_message"], ["", "", "def", "info_all", "(", "self", ",", "*", "args", ")", ":", "\n", "        ", "print_message", "(", "'['", "+", "str", "(", "self", ".", "rank", ")", "+", "']'", ",", "'\\t'", ",", "*", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.logging.Logger.info": [[98, 101], ["colbert.utils.utils.print_message"], "methods", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.utils.print_message"], ["", "def", "info", "(", "self", ",", "*", "args", ")", ":", "\n", "        ", "if", "self", ".", "is_main", ":", "\n", "            ", "print_message", "(", "*", "args", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.distributed.init": [[11, 30], ["max", "int", "torch.cuda.device_count", "print", "torch.cuda.set_device", "torch.distributed.init_process_group"], "function", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.infra.run.Run.print"], ["def", "init", "(", "rank", ")", ":", "\n", "    ", "nranks", "=", "'WORLD_SIZE'", "in", "os", ".", "environ", "and", "int", "(", "os", ".", "environ", "[", "'WORLD_SIZE'", "]", ")", "\n", "nranks", "=", "max", "(", "1", ",", "nranks", ")", "\n", "is_distributed", "=", "(", "nranks", ">", "1", ")", "or", "(", "'WORLD_SIZE'", "in", "os", ".", "environ", ")", "\n", "\n", "global", "ALREADY_INITALIZED", "\n", "if", "ALREADY_INITALIZED", ":", "\n", "        ", "return", "nranks", ",", "is_distributed", "\n", "\n", "", "ALREADY_INITALIZED", "=", "True", "\n", "\n", "if", "is_distributed", ":", "\n", "        ", "num_gpus", "=", "torch", ".", "cuda", ".", "device_count", "(", ")", "\n", "print", "(", "f'nranks = {nranks} \\t num_gpus = {num_gpus} \\t device={rank % num_gpus}'", ")", "\n", "\n", "torch", ".", "cuda", ".", "set_device", "(", "rank", "%", "num_gpus", ")", "\n", "torch", ".", "distributed", ".", "init_process_group", "(", "backend", "=", "'nccl'", ",", "init_method", "=", "'env://'", ")", "\n", "\n", "", "return", "nranks", ",", "is_distributed", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.distributed.barrier": [[32, 38], ["max", "int", "torch.distributed.barrier", "torch.cuda.device_count"], "function", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.distributed.barrier"], ["", "def", "barrier", "(", "rank", ")", ":", "\n", "    ", "nranks", "=", "'WORLD_SIZE'", "in", "os", ".", "environ", "and", "int", "(", "os", ".", "environ", "[", "'WORLD_SIZE'", "]", ")", "\n", "nranks", "=", "max", "(", "1", ",", "nranks", ")", "\n", "\n", "if", "rank", ">=", "0", "and", "nranks", ">", "1", ":", "\n", "        ", "torch", ".", "distributed", ".", "barrier", "(", "device_ids", "=", "[", "rank", "%", "torch", ".", "cuda", ".", "device_count", "(", ")", "]", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.runs._RunManager.__init__": [[16, 27], ["runs._RunManager._get_script_name", "runs._RunManager._generate_default_run_name", "time.time"], "methods", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.runs._RunManager._get_script_name", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.runs._RunManager._generate_default_run_name"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "experiments_root", "=", "None", "\n", "self", ".", "experiment", "=", "None", "\n", "self", ".", "path", "=", "None", "\n", "self", ".", "script", "=", "self", ".", "_get_script_name", "(", ")", "\n", "self", ".", "name", "=", "self", ".", "_generate_default_run_name", "(", ")", "\n", "self", ".", "original_name", "=", "self", ".", "name", "\n", "self", ".", "exit_status", "=", "'FINISHED'", "\n", "\n", "self", ".", "_logger", "=", "None", "\n", "self", ".", "start_time", "=", "time", ".", "time", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.runs._RunManager.init": [[28, 60], ["os.path.abspath", "os.path.join", "colbert.barrier", "colbert.utils.logging.Logger", "os.path.exists", "print", "colbert.utils.utils.print_message", "colbert.utils.utils.print_message", "input", "colbert.utils.utils.create_directory", "input.strip", "os.path.exists"], "methods", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.distributed.barrier", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.infra.run.Run.print", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.utils.print_message", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.utils.print_message", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.utils.create_directory"], ["", "def", "init", "(", "self", ",", "rank", ",", "root", ",", "experiment", ",", "name", ")", ":", "\n", "        ", "assert", "'/'", "not", "in", "experiment", ",", "experiment", "\n", "assert", "'/'", "not", "in", "name", ",", "name", "\n", "\n", "self", ".", "experiments_root", "=", "os", ".", "path", ".", "abspath", "(", "root", ")", "\n", "self", ".", "experiment", "=", "experiment", "\n", "self", ".", "name", "=", "name", "\n", "self", ".", "path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "experiments_root", ",", "self", ".", "experiment", ",", "self", ".", "script", ",", "self", ".", "name", ")", "\n", "\n", "if", "rank", "<", "1", ":", "\n", "            ", "if", "os", ".", "path", ".", "exists", "(", "self", ".", "path", ")", ":", "\n", "                ", "print", "(", "'\\n\\n'", ")", "\n", "print_message", "(", "\"It seems that \"", ",", "self", ".", "path", ",", "\" already exists.\"", ")", "\n", "print_message", "(", "\"Do you want to overwrite it? \\t yes/no \\n\"", ")", "\n", "\n", "# TODO: This should timeout and exit (i.e., fail) given no response for 60 seconds.", "\n", "\n", "response", "=", "input", "(", ")", "\n", "if", "response", ".", "strip", "(", ")", "!=", "'yes'", ":", "\n", "                    ", "assert", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "path", ")", ",", "self", ".", "path", "\n", "", "", "else", ":", "\n", "                ", "create_directory", "(", "self", ".", "path", ")", "\n", "\n", "", "", "distributed", ".", "barrier", "(", "rank", ")", "\n", "\n", "self", ".", "_logger", "=", "Logger", "(", "rank", ",", "self", ")", "\n", "self", ".", "_log_args", "=", "self", ".", "_logger", ".", "_log_args", "\n", "self", ".", "warn", "=", "self", ".", "_logger", ".", "warn", "\n", "self", ".", "info", "=", "self", ".", "_logger", ".", "info", "\n", "self", ".", "info_all", "=", "self", ".", "_logger", ".", "info_all", "\n", "self", ".", "log_metric", "=", "self", ".", "_logger", ".", "log_metric", "\n", "self", ".", "log_new_artifact", "=", "self", ".", "_logger", ".", "log_new_artifact", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.runs._RunManager._generate_default_run_name": [[61, 63], ["colbert.utils.utils.timestamp"], "methods", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.utils.timestamp"], ["", "def", "_generate_default_run_name", "(", "self", ")", ":", "\n", "        ", "return", "timestamp", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.runs._RunManager._get_script_name": [[64, 66], ["os.path.basename", "dir"], "methods", ["None"], ["", "def", "_get_script_name", "(", "self", ")", ":", "\n", "        ", "return", "os", ".", "path", ".", "basename", "(", "__main__", ".", "__file__", ")", "if", "'__file__'", "in", "dir", "(", "__main__", ")", "else", "'none'", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.runs._RunManager.context": [[67, 100], ["str", "str", "runs._RunManager.log_new_artifact", "runs._RunManager.log_new_artifact", "runs._RunManager.log_new_artifact", "runs._RunManager._logger._log_all_artifacts", "print", "runs._RunManager._logger._log_exception", "runs._RunManager._logger._log_all_artifacts", "sys.exit", "runs._RunManager._logger._log_exception", "runs._RunManager._logger._log_all_artifacts", "str", "os.path.join", "os.path.join", "os.path.join", "time.time"], "methods", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.logging.Logger.log_new_artifact", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.logging.Logger.log_new_artifact", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.logging.Logger.log_new_artifact", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.logging.Logger._log_all_artifacts", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.infra.run.Run.print", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.logging.Logger._log_exception", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.logging.Logger._log_all_artifacts", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.logging.Logger._log_exception", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.logging.Logger._log_all_artifacts"], ["", "@", "contextmanager", "\n", "def", "context", "(", "self", ",", "consider_failed_if_interrupted", "=", "True", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "yield", "\n", "\n", "", "except", "KeyboardInterrupt", "as", "ex", ":", "\n", "            ", "print", "(", "'\\n\\nInterrupted\\n\\n'", ")", "\n", "self", ".", "_logger", ".", "_log_exception", "(", "ex", ".", "__class__", ",", "ex", ",", "ex", ".", "__traceback__", ")", "\n", "self", ".", "_logger", ".", "_log_all_artifacts", "(", ")", "\n", "\n", "if", "consider_failed_if_interrupted", ":", "\n", "                ", "self", ".", "exit_status", "=", "'KILLED'", "# mlflow.entities.RunStatus.KILLED", "\n", "\n", "", "sys", ".", "exit", "(", "128", "+", "2", ")", "\n", "\n", "", "except", "Exception", "as", "ex", ":", "\n", "            ", "self", ".", "_logger", ".", "_log_exception", "(", "ex", ".", "__class__", ",", "ex", ",", "ex", ".", "__traceback__", ")", "\n", "self", ".", "_logger", ".", "_log_all_artifacts", "(", ")", "\n", "\n", "self", ".", "exit_status", "=", "'FAILED'", "# mlflow.entities.RunStatus.FAILED", "\n", "\n", "raise", "ex", "\n", "\n", "", "finally", ":", "\n", "            ", "total_seconds", "=", "str", "(", "time", ".", "time", "(", ")", "-", "self", ".", "start_time", ")", "+", "'\\n'", "\n", "original_name", "=", "str", "(", "self", ".", "original_name", ")", "\n", "name", "=", "str", "(", "self", ".", "name", ")", "\n", "\n", "self", ".", "log_new_artifact", "(", "os", ".", "path", ".", "join", "(", "self", ".", "_logger", ".", "logs_path", ",", "'elapsed.txt'", ")", ",", "total_seconds", ")", "\n", "self", ".", "log_new_artifact", "(", "os", ".", "path", ".", "join", "(", "self", ".", "_logger", ".", "logs_path", ",", "'name.original.txt'", ")", ",", "original_name", ")", "\n", "self", ".", "log_new_artifact", "(", "os", ".", "path", ".", "join", "(", "self", ".", "_logger", ".", "logs_path", ",", "'name.txt'", ")", ",", "name", ")", "\n", "\n", "self", ".", "_logger", ".", "_log_all_artifacts", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.parser.Arguments.__init__": [[13, 22], ["argparse.ArgumentParser", "parser.Arguments.add_argument", "parser.Arguments.add_argument", "parser.Arguments.add_argument", "parser.Arguments.add_argument"], "methods", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.parser.Arguments.add_argument", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.parser.Arguments.add_argument", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.parser.Arguments.add_argument", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.parser.Arguments.add_argument"], ["    ", "def", "__init__", "(", "self", ",", "description", ")", ":", "\n", "        ", "self", ".", "parser", "=", "ArgumentParser", "(", "description", "=", "description", ")", "\n", "self", ".", "checks", "=", "[", "]", "\n", "\n", "self", ".", "add_argument", "(", "'--root'", ",", "dest", "=", "'root'", ",", "default", "=", "'experiments'", ")", "\n", "self", ".", "add_argument", "(", "'--experiment'", ",", "dest", "=", "'experiment'", ",", "default", "=", "'dirty'", ")", "\n", "self", ".", "add_argument", "(", "'--run'", ",", "dest", "=", "'run'", ",", "default", "=", "Run", ".", "name", ")", "\n", "\n", "self", ".", "add_argument", "(", "'--local_rank'", ",", "dest", "=", "'rank'", ",", "default", "=", "-", "1", ",", "type", "=", "int", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.parser.Arguments.add_model_parameters": [[23, 32], ["parser.Arguments.add_argument", "parser.Arguments.add_argument", "parser.Arguments.add_argument", "parser.Arguments.add_argument", "parser.Arguments.add_argument"], "methods", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.parser.Arguments.add_argument", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.parser.Arguments.add_argument", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.parser.Arguments.add_argument", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.parser.Arguments.add_argument", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.parser.Arguments.add_argument"], ["", "def", "add_model_parameters", "(", "self", ")", ":", "\n", "# Core Arguments", "\n", "        ", "self", ".", "add_argument", "(", "'--similarity'", ",", "dest", "=", "'similarity'", ",", "default", "=", "'cosine'", ",", "choices", "=", "[", "'cosine'", ",", "'l2'", "]", ")", "\n", "self", ".", "add_argument", "(", "'--dim'", ",", "dest", "=", "'dim'", ",", "default", "=", "128", ",", "type", "=", "int", ")", "\n", "self", ".", "add_argument", "(", "'--query_maxlen'", ",", "dest", "=", "'query_maxlen'", ",", "default", "=", "32", ",", "type", "=", "int", ")", "\n", "self", ".", "add_argument", "(", "'--doc_maxlen'", ",", "dest", "=", "'doc_maxlen'", ",", "default", "=", "180", ",", "type", "=", "int", ")", "\n", "\n", "# Filtering-related Arguments", "\n", "self", ".", "add_argument", "(", "'--mask-punctuation'", ",", "dest", "=", "'mask_punctuation'", ",", "default", "=", "False", ",", "action", "=", "'store_true'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.parser.Arguments.add_model_training_parameters": [[33, 44], ["parser.Arguments.add_argument", "parser.Arguments.add_argument", "parser.Arguments.add_argument", "parser.Arguments.add_argument", "parser.Arguments.add_argument", "parser.Arguments.add_argument", "parser.Arguments.add_argument", "parser.Arguments.add_argument"], "methods", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.parser.Arguments.add_argument", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.parser.Arguments.add_argument", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.parser.Arguments.add_argument", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.parser.Arguments.add_argument", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.parser.Arguments.add_argument", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.parser.Arguments.add_argument", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.parser.Arguments.add_argument", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.parser.Arguments.add_argument"], ["", "def", "add_model_training_parameters", "(", "self", ")", ":", "\n", "# NOTE: Providing a checkpoint is one thing, --resume is another, --resume_optimizer is yet another.", "\n", "        ", "self", ".", "add_argument", "(", "'--resume'", ",", "dest", "=", "'resume'", ",", "default", "=", "False", ",", "action", "=", "'store_true'", ")", "\n", "self", ".", "add_argument", "(", "'--resume_optimizer'", ",", "dest", "=", "'resume_optimizer'", ",", "default", "=", "False", ",", "action", "=", "'store_true'", ")", "\n", "self", ".", "add_argument", "(", "'--checkpoint'", ",", "dest", "=", "'checkpoint'", ",", "default", "=", "None", ",", "required", "=", "False", ")", "\n", "\n", "self", ".", "add_argument", "(", "'--lr'", ",", "dest", "=", "'lr'", ",", "default", "=", "3e-06", ",", "type", "=", "float", ")", "\n", "self", ".", "add_argument", "(", "'--maxsteps'", ",", "dest", "=", "'maxsteps'", ",", "default", "=", "400000", ",", "type", "=", "int", ")", "\n", "self", ".", "add_argument", "(", "'--bsize'", ",", "dest", "=", "'bsize'", ",", "default", "=", "32", ",", "type", "=", "int", ")", "\n", "self", ".", "add_argument", "(", "'--accum'", ",", "dest", "=", "'accumsteps'", ",", "default", "=", "2", ",", "type", "=", "int", ")", "\n", "self", ".", "add_argument", "(", "'--amp'", ",", "dest", "=", "'amp'", ",", "default", "=", "False", ",", "action", "=", "'store_true'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.parser.Arguments.add_model_inference_parameters": [[45, 49], ["parser.Arguments.add_argument", "parser.Arguments.add_argument", "parser.Arguments.add_argument"], "methods", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.parser.Arguments.add_argument", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.parser.Arguments.add_argument", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.parser.Arguments.add_argument"], ["", "def", "add_model_inference_parameters", "(", "self", ")", ":", "\n", "        ", "self", ".", "add_argument", "(", "'--checkpoint'", ",", "dest", "=", "'checkpoint'", ",", "required", "=", "True", ")", "\n", "self", ".", "add_argument", "(", "'--bsize'", ",", "dest", "=", "'bsize'", ",", "default", "=", "128", ",", "type", "=", "int", ")", "\n", "self", ".", "add_argument", "(", "'--amp'", ",", "dest", "=", "'amp'", ",", "default", "=", "False", ",", "action", "=", "'store_true'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.parser.Arguments.add_training_input": [[50, 61], ["parser.Arguments.add_argument", "parser.Arguments.add_argument", "parser.Arguments.add_argument", "parser.Arguments.checks.append"], "methods", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.parser.Arguments.add_argument", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.parser.Arguments.add_argument", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.parser.Arguments.add_argument"], ["", "def", "add_training_input", "(", "self", ")", ":", "\n", "        ", "self", ".", "add_argument", "(", "'--triples'", ",", "dest", "=", "'triples'", ",", "required", "=", "True", ")", "\n", "self", ".", "add_argument", "(", "'--queries'", ",", "dest", "=", "'queries'", ",", "default", "=", "None", ")", "\n", "self", ".", "add_argument", "(", "'--collection'", ",", "dest", "=", "'collection'", ",", "default", "=", "None", ")", "\n", "\n", "def", "check_training_input", "(", "args", ")", ":", "\n", "            ", "assert", "(", "args", ".", "collection", "is", "None", ")", "==", "(", "args", ".", "queries", "is", "None", ")", ",", "\"For training, both (or neither) --collection and --queries must be supplied.\"", "\"If neither is supplied, the --triples file must contain texts (not PIDs).\"", "\n", "\n", "", "self", ".", "checks", ".", "append", "(", "check_training_input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.parser.Arguments.add_ranking_input": [[62, 66], ["parser.Arguments.add_argument", "parser.Arguments.add_argument", "parser.Arguments.add_argument"], "methods", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.parser.Arguments.add_argument", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.parser.Arguments.add_argument", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.parser.Arguments.add_argument"], ["", "def", "add_ranking_input", "(", "self", ")", ":", "\n", "        ", "self", ".", "add_argument", "(", "'--queries'", ",", "dest", "=", "'queries'", ",", "default", "=", "None", ")", "\n", "self", ".", "add_argument", "(", "'--collection'", ",", "dest", "=", "'collection'", ",", "default", "=", "None", ")", "\n", "self", ".", "add_argument", "(", "'--qrels'", ",", "dest", "=", "'qrels'", ",", "default", "=", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.parser.Arguments.add_reranking_input": [[67, 71], ["parser.Arguments.add_ranking_input", "parser.Arguments.add_argument", "parser.Arguments.add_argument"], "methods", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.parser.Arguments.add_ranking_input", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.parser.Arguments.add_argument", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.parser.Arguments.add_argument"], ["", "def", "add_reranking_input", "(", "self", ")", ":", "\n", "        ", "self", ".", "add_ranking_input", "(", ")", "\n", "self", ".", "add_argument", "(", "'--topk'", ",", "dest", "=", "'topK'", ",", "required", "=", "True", ")", "\n", "self", ".", "add_argument", "(", "'--shortcircuit'", ",", "dest", "=", "'shortcircuit'", ",", "default", "=", "False", ",", "action", "=", "'store_true'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.parser.Arguments.add_indexing_input": [[72, 76], ["parser.Arguments.add_argument", "parser.Arguments.add_argument", "parser.Arguments.add_argument"], "methods", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.parser.Arguments.add_argument", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.parser.Arguments.add_argument", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.parser.Arguments.add_argument"], ["", "def", "add_indexing_input", "(", "self", ")", ":", "\n", "        ", "self", ".", "add_argument", "(", "'--collection'", ",", "dest", "=", "'collection'", ",", "required", "=", "True", ")", "\n", "self", ".", "add_argument", "(", "'--index_root'", ",", "dest", "=", "'index_root'", ",", "required", "=", "True", ")", "\n", "self", ".", "add_argument", "(", "'--index_name'", ",", "dest", "=", "'index_name'", ",", "required", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.parser.Arguments.add_compressed_index_input": [[77, 80], ["parser.Arguments.add_argument"], "methods", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.parser.Arguments.add_argument"], ["", "def", "add_compressed_index_input", "(", "self", ")", ":", "\n", "        ", "self", ".", "add_argument", "(", "'--compression_level'", ",", "dest", "=", "'compression_level'", ",", "\n", "choices", "=", "[", "1", ",", "2", "]", ",", "type", "=", "int", ",", "default", "=", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.parser.Arguments.add_index_use_input": [[82, 86], ["parser.Arguments.add_argument", "parser.Arguments.add_argument", "parser.Arguments.add_argument"], "methods", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.parser.Arguments.add_argument", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.parser.Arguments.add_argument", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.parser.Arguments.add_argument"], ["", "def", "add_index_use_input", "(", "self", ")", ":", "\n", "        ", "self", ".", "add_argument", "(", "'--index_root'", ",", "dest", "=", "'index_root'", ",", "required", "=", "True", ")", "\n", "self", ".", "add_argument", "(", "'--index_name'", ",", "dest", "=", "'index_name'", ",", "required", "=", "True", ")", "\n", "self", ".", "add_argument", "(", "'--partitions'", ",", "dest", "=", "'partitions'", ",", "default", "=", "None", ",", "type", "=", "int", ",", "required", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.parser.Arguments.add_retrieval_input": [[87, 91], ["parser.Arguments.add_index_use_input", "parser.Arguments.add_argument", "parser.Arguments.add_argument"], "methods", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.parser.Arguments.add_index_use_input", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.parser.Arguments.add_argument", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.parser.Arguments.add_argument"], ["", "def", "add_retrieval_input", "(", "self", ")", ":", "\n", "        ", "self", ".", "add_index_use_input", "(", ")", "\n", "self", ".", "add_argument", "(", "'--nprobe'", ",", "dest", "=", "'nprobe'", ",", "default", "=", "10", ",", "type", "=", "int", ")", "\n", "self", ".", "add_argument", "(", "'--retrieve_only'", ",", "dest", "=", "'retrieve_only'", ",", "default", "=", "False", ",", "action", "=", "'store_true'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.parser.Arguments.add_argument": [[92, 94], ["parser.Arguments.parser.add_argument"], "methods", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.parser.Arguments.add_argument"], ["", "def", "add_argument", "(", "self", ",", "*", "args", ",", "**", "kw_args", ")", ":", "\n", "        ", "return", "self", ".", "parser", ".", "add_argument", "(", "*", "args", ",", "**", "kw_args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.parser.Arguments.check_arguments": [[95, 98], ["check"], "methods", ["None"], ["", "def", "check_arguments", "(", "self", ",", "args", ")", ":", "\n", "        ", "for", "check", "in", "self", ".", "checks", ":", "\n", "            ", "check", "(", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.parser.Arguments.parse": [[99, 120], ["parser.Arguments.parser.parse_args", "parser.Arguments.check_arguments", "copy.deepcopy", "colbert.init", "int", "max", "colbert.utils.runs.Run.init", "colbert.utils.runs.Run._log_args", "colbert.utils.runs.Run.info", "colbert.utils.utils.print_message", "faiss.omp_set_num_threads", "max", "os.cpu_count", "faiss.omp_get_max_threads"], "methods", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.parser.Arguments.check_arguments", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.runs._RunManager.init", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.runs._RunManager.init", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.logging.Logger._log_args", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.logging.Logger.info", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.utils.print_message"], ["", "", "def", "parse", "(", "self", ")", ":", "\n", "        ", "args", "=", "self", ".", "parser", ".", "parse_args", "(", ")", "\n", "self", ".", "check_arguments", "(", "args", ")", "\n", "\n", "args", ".", "input_arguments", "=", "copy", ".", "deepcopy", "(", "args", ")", "\n", "\n", "args", ".", "nranks", ",", "args", ".", "distributed", "=", "distributed", ".", "init", "(", "args", ".", "rank", ")", "\n", "\n", "args", ".", "nthreads", "=", "int", "(", "max", "(", "os", ".", "cpu_count", "(", ")", ",", "faiss", ".", "omp_get_max_threads", "(", ")", ")", "*", "0.8", ")", "\n", "args", ".", "nthreads", "=", "max", "(", "1", ",", "args", ".", "nthreads", "//", "args", ".", "nranks", ")", "\n", "\n", "if", "args", ".", "nranks", ">", "1", ":", "\n", "            ", "print_message", "(", "f\"#> Restricting number of threads for FAISS to {args.nthreads} per process\"", ",", "\n", "condition", "=", "(", "args", ".", "rank", "==", "0", ")", ")", "\n", "faiss", ".", "omp_set_num_threads", "(", "args", ".", "nthreads", ")", "\n", "\n", "", "Run", ".", "init", "(", "args", ".", "rank", ",", "args", ".", "root", ",", "args", ".", "experiment", ",", "args", ".", "run", ")", "\n", "Run", ".", "_log_args", "(", "args", ")", "\n", "Run", ".", "info", "(", "args", ".", "input_arguments", ".", "__dict__", ",", "'\\n'", ")", "\n", "\n", "return", "args", "\n", "", "", ""]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.amp.MixedPrecisionManager.__init__": [[8, 13], ["torch.cuda.amp.GradScaler"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "activated", ")", ":", "\n", "        ", "self", ".", "activated", "=", "activated", "\n", "\n", "if", "self", ".", "activated", ":", "\n", "            ", "self", ".", "scaler", "=", "torch", ".", "cuda", ".", "amp", ".", "GradScaler", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.amp.MixedPrecisionManager.context": [[14, 16], ["torch.cuda.amp.autocast", "colbert.utils.utils.NullContextManager"], "methods", ["None"], ["", "", "def", "context", "(", "self", ")", ":", "\n", "        ", "return", "torch", ".", "cuda", ".", "amp", ".", "autocast", "(", ")", "if", "self", ".", "activated", "else", "NullContextManager", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.amp.MixedPrecisionManager.backward": [[17, 22], ["amp.MixedPrecisionManager.scaler.scale().backward", "loss.backward", "amp.MixedPrecisionManager.scaler.scale"], "methods", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.amp.MixedPrecisionManager.backward", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.amp.MixedPrecisionManager.backward"], ["", "def", "backward", "(", "self", ",", "loss", ")", ":", "\n", "        ", "if", "self", ".", "activated", ":", "\n", "            ", "self", ".", "scaler", ".", "scale", "(", "loss", ")", ".", "backward", "(", ")", "\n", "", "else", ":", "\n", "            ", "loss", ".", "backward", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.amp.MixedPrecisionManager.step": [[23, 38], ["optimizer.zero_grad", "amp.MixedPrecisionManager.scaler.unscale_", "torch.nn.utils.clip_grad_norm_", "amp.MixedPrecisionManager.scaler.step", "amp.MixedPrecisionManager.scaler.update", "torch.nn.utils.clip_grad_norm_", "optimizer.step", "scheduler.step", "colbert.parameters", "colbert.parameters"], "methods", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.amp.MixedPrecisionManager.step", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.amp.MixedPrecisionManager.step", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.amp.MixedPrecisionManager.step"], ["", "", "def", "step", "(", "self", ",", "colbert", ",", "optimizer", ",", "scheduler", "=", "None", ")", ":", "\n", "        ", "if", "self", ".", "activated", ":", "\n", "            ", "self", ".", "scaler", ".", "unscale_", "(", "optimizer", ")", "\n", "torch", ".", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "colbert", ".", "parameters", "(", ")", ",", "2.0", ",", "error_if_nonfinite", "=", "False", ")", "\n", "\n", "self", ".", "scaler", ".", "step", "(", "optimizer", ")", "\n", "self", ".", "scaler", ".", "update", "(", ")", "\n", "", "else", ":", "\n", "            ", "torch", ".", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "colbert", ".", "parameters", "(", ")", ",", "2.0", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "", "if", "scheduler", "is", "not", "None", ":", "\n", "            ", "scheduler", ".", "step", "(", ")", "\n", "\n", "", "optimizer", ".", "zero_grad", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.utils.NullContextManager.__init__": [[285, 287], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "dummy_resource", "=", "None", ")", ":", "\n", "        ", "self", ".", "dummy_resource", "=", "dummy_resource", "\n", "", "def", "__enter__", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.utils.NullContextManager.__enter__": [[287, 289], ["None"], "methods", ["None"], ["", "def", "__enter__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "dummy_resource", "\n", "", "def", "__exit__", "(", "self", ",", "*", "args", ")", ":", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.utils.NullContextManager.__exit__": [[289, 291], ["None"], "methods", ["None"], ["", "def", "__exit__", "(", "self", ",", "*", "args", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.utils.print_message": [[11, 21], ["datetime.datetime.now().strftime", "print", "str", "datetime.datetime.now"], "function", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.infra.run.Run.print"], ["def", "print_message", "(", "*", "s", ",", "condition", "=", "True", ",", "pad", "=", "False", ")", ":", "\n", "    ", "s", "=", "' '", ".", "join", "(", "[", "str", "(", "x", ")", "for", "x", "in", "s", "]", ")", "\n", "msg", "=", "\"[{}] {}\"", ".", "format", "(", "datetime", ".", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "\"%b %d, %H:%M:%S\"", ")", ",", "s", ")", "\n", "\n", "if", "condition", ":", "\n", "        ", "msg", "=", "msg", "if", "not", "pad", "else", "f'\\n{msg}\\n'", "\n", "print", "(", "msg", ",", "flush", "=", "True", ")", "\n", "\n", "\n", "", "return", "msg", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.utils.timestamp": [[23, 27], ["datetime.datetime.now().strftime", "datetime.datetime.now"], "function", ["None"], ["", "def", "timestamp", "(", "daydir", "=", "False", ")", ":", "\n", "    ", "format_str", "=", "f\"%Y-%m{'/' if daydir else '-'}%d{'/' if daydir else '_'}%H.%M.%S\"", "\n", "result", "=", "datetime", ".", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "format_str", ")", "\n", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.utils.file_tqdm": [[29, 38], ["print", "tqdm.tqdm", "pbar.close", "pbar.update", "os.path.getsize", "len"], "function", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.infra.run.Run.print"], ["", "def", "file_tqdm", "(", "file", ")", ":", "\n", "    ", "print", "(", "f\"#> Reading {file.name}\"", ")", "\n", "\n", "with", "tqdm", ".", "tqdm", "(", "total", "=", "os", ".", "path", ".", "getsize", "(", "file", ".", "name", ")", "/", "1024.0", "/", "1024.0", ",", "unit", "=", "\"MiB\"", ")", "as", "pbar", ":", "\n", "        ", "for", "line", "in", "file", ":", "\n", "            ", "yield", "line", "\n", "pbar", ".", "update", "(", "len", "(", "line", ")", "/", "1024.0", "/", "1024.0", ")", "\n", "\n", "", "pbar", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.utils.torch_load_dnn": [[40, 47], ["path.startswith", "path.startswith", "torch.hub.load_state_dict_from_url", "torch.load"], "function", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.codecs.residual_embeddings.ResidualEmbeddings.load"], ["", "", "def", "torch_load_dnn", "(", "path", ")", ":", "\n", "    ", "if", "path", ".", "startswith", "(", "\"http:\"", ")", "or", "path", ".", "startswith", "(", "\"https:\"", ")", ":", "\n", "        ", "dnn", "=", "torch", ".", "hub", ".", "load_state_dict_from_url", "(", "path", ",", "map_location", "=", "'cpu'", ")", "\n", "", "else", ":", "\n", "        ", "dnn", "=", "torch", ".", "load", "(", "path", ",", "map_location", "=", "'cpu'", ")", "\n", "\n", "", "return", "dnn", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.utils.save_checkpoint": [[48, 62], ["print", "hasattr", "model.state_dict", "optimizer.state_dict", "torch.save"], "function", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.infra.run.Run.print", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.codecs.residual_embeddings.ResidualEmbeddings.save"], ["", "def", "save_checkpoint", "(", "path", ",", "epoch_idx", ",", "mb_idx", ",", "model", ",", "optimizer", ",", "arguments", "=", "None", ")", ":", "\n", "    ", "print", "(", "f\"#> Saving a checkpoint to {path} ..\"", ")", "\n", "\n", "if", "hasattr", "(", "model", ",", "'module'", ")", ":", "\n", "        ", "model", "=", "model", ".", "module", "# extract model from a distributed/data-parallel wrapper", "\n", "\n", "", "checkpoint", "=", "{", "}", "\n", "checkpoint", "[", "'epoch'", "]", "=", "epoch_idx", "\n", "checkpoint", "[", "'batch'", "]", "=", "mb_idx", "\n", "checkpoint", "[", "'model_state_dict'", "]", "=", "model", ".", "state_dict", "(", ")", "\n", "checkpoint", "[", "'optimizer_state_dict'", "]", "=", "optimizer", ".", "state_dict", "(", ")", "\n", "checkpoint", "[", "'arguments'", "]", "=", "arguments", "\n", "\n", "torch", ".", "save", "(", "checkpoint", ",", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.utils.load_checkpoint": [[64, 85], ["utils.print_message", "utils.load_checkpoint_raw", "model.load_state_dict", "optimizer.load_state_dict", "utils.print_message", "utils.print_message", "utils.print_message", "model.load_state_dict"], "function", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.utils.print_message", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.utils.load_checkpoint_raw", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.utils.print_message", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.utils.print_message", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.utils.print_message"], ["", "def", "load_checkpoint", "(", "path", ",", "model", ",", "checkpoint", "=", "None", ",", "optimizer", "=", "None", ",", "do_print", "=", "True", ")", ":", "\n", "    ", "if", "do_print", ":", "\n", "        ", "print_message", "(", "\"#> Loading checkpoint\"", ",", "path", ",", "\"..\"", ")", "\n", "\n", "", "if", "checkpoint", "is", "None", ":", "\n", "        ", "checkpoint", "=", "load_checkpoint_raw", "(", "path", ")", "\n", "\n", "", "try", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'model_state_dict'", "]", ")", "\n", "", "except", ":", "\n", "        ", "print_message", "(", "\"[WARNING] Loading checkpoint with strict=False\"", ")", "\n", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'model_state_dict'", "]", ",", "strict", "=", "False", ")", "\n", "\n", "", "if", "optimizer", ":", "\n", "        ", "optimizer", ".", "load_state_dict", "(", "checkpoint", "[", "'optimizer_state_dict'", "]", ")", "\n", "\n", "", "if", "do_print", ":", "\n", "        ", "print_message", "(", "\"#> checkpoint['epoch'] =\"", ",", "checkpoint", "[", "'epoch'", "]", ")", "\n", "print_message", "(", "\"#> checkpoint['batch'] =\"", ",", "checkpoint", "[", "'batch'", "]", ")", "\n", "\n", "", "return", "checkpoint", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.utils.load_checkpoint_raw": [[87, 104], ["collections.OrderedDict", "state_dict.items", "path.startswith", "path.startswith", "torch.hub.load_state_dict_from_url", "torch.load"], "function", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.data.ranking.Ranking.items", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.codecs.residual_embeddings.ResidualEmbeddings.load"], ["", "def", "load_checkpoint_raw", "(", "path", ")", ":", "\n", "    ", "if", "path", ".", "startswith", "(", "\"http:\"", ")", "or", "path", ".", "startswith", "(", "\"https:\"", ")", ":", "\n", "        ", "checkpoint", "=", "torch", ".", "hub", ".", "load_state_dict_from_url", "(", "path", ",", "map_location", "=", "'cpu'", ")", "\n", "", "else", ":", "\n", "        ", "checkpoint", "=", "torch", ".", "load", "(", "path", ",", "map_location", "=", "'cpu'", ")", "\n", "\n", "", "state_dict", "=", "checkpoint", "[", "'model_state_dict'", "]", "\n", "new_state_dict", "=", "OrderedDict", "(", ")", "\n", "for", "k", ",", "v", "in", "state_dict", ".", "items", "(", ")", ":", "\n", "        ", "name", "=", "k", "\n", "if", "k", "[", ":", "7", "]", "==", "'module.'", ":", "\n", "            ", "name", "=", "k", "[", "7", ":", "]", "\n", "", "new_state_dict", "[", "name", "]", "=", "v", "\n", "\n", "", "checkpoint", "[", "'model_state_dict'", "]", "=", "new_state_dict", "\n", "\n", "return", "checkpoint", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.utils.create_directory": [[106, 114], ["os.path.exists", "print", "utils.print_message", "print", "utils.print_message", "os.makedirs"], "function", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.infra.run.Run.print", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.utils.print_message", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.infra.run.Run.print", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.utils.print_message"], ["", "def", "create_directory", "(", "path", ")", ":", "\n", "    ", "if", "os", ".", "path", ".", "exists", "(", "path", ")", ":", "\n", "        ", "print", "(", "'\\n'", ")", "\n", "print_message", "(", "\"#> Note: Output directory\"", ",", "path", ",", "'already exists\\n\\n'", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "'\\n'", ")", "\n", "print_message", "(", "\"#> Creating directory\"", ",", "path", ",", "'\\n\\n'", ")", "\n", "os", ".", "makedirs", "(", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.utils.f7": [[122, 129], ["set", "set.add"], "function", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.config.core_config.CoreConfig.set", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.evaluation.metrics.Metrics.add"], ["", "", "def", "f7", "(", "seq", ")", ":", "\n", "    ", "\"\"\"\n    Source: https://stackoverflow.com/a/480227/1493011\n    \"\"\"", "\n", "\n", "seen", "=", "set", "(", ")", "\n", "return", "[", "x", "for", "x", "in", "seq", "if", "not", "(", "x", "in", "seen", "or", "seen", ".", "add", "(", "x", ")", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.utils.batch": [[131, 138], ["len", "len"], "function", ["None"], ["", "def", "batch", "(", "group", ",", "bsize", ",", "provide_offset", "=", "False", ")", ":", "\n", "    ", "offset", "=", "0", "\n", "while", "offset", "<", "len", "(", "group", ")", ":", "\n", "        ", "L", "=", "group", "[", "offset", ":", "offset", "+", "bsize", "]", "\n", "yield", "(", "(", "offset", ",", "L", ")", "if", "provide_offset", "else", "L", ")", "\n", "offset", "+=", "len", "(", "L", ")", "\n", "", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.utils.flatten": [[156, 164], ["None"], "function", ["None"], ["", "def", "flatten", "(", "L", ")", ":", "\n", "# return [x for y in L for x in y]", "\n", "\n", "    ", "result", "=", "[", "]", "\n", "for", "_list", "in", "L", ":", "\n", "        ", "result", "+=", "_list", "\n", "\n", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.utils.zipstar": [[166, 183], ["len", "zip", "len", "list", "range"], "function", ["None"], ["", "def", "zipstar", "(", "L", ",", "lazy", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    A much faster A, B, C = zip(*[(a, b, c), (a, b, c), ...])\n    May return lists or tuples.\n    \"\"\"", "\n", "\n", "if", "len", "(", "L", ")", "==", "0", ":", "\n", "        ", "return", "L", "\n", "\n", "", "width", "=", "len", "(", "L", "[", "0", "]", ")", "\n", "\n", "if", "width", "<", "100", ":", "\n", "        ", "return", "[", "[", "elem", "[", "idx", "]", "for", "elem", "in", "L", "]", "for", "idx", "in", "range", "(", "width", ")", "]", "\n", "\n", "", "L", "=", "zip", "(", "*", "L", ")", "\n", "\n", "return", "L", "if", "lazy", "else", "list", "(", "L", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.utils.zip_first": [[185, 193], ["list", "len", "zip", "type", "len"], "function", ["None"], ["", "def", "zip_first", "(", "L1", ",", "L2", ")", ":", "\n", "    ", "length", "=", "len", "(", "L1", ")", "if", "type", "(", "L1", ")", "in", "[", "tuple", ",", "list", "]", "else", "None", "\n", "\n", "L3", "=", "list", "(", "zip", "(", "L1", ",", "L2", ")", ")", "\n", "\n", "assert", "length", "in", "[", "None", ",", "len", "(", "L3", ")", "]", ",", "\"zip_first() failure: length differs!\"", "\n", "\n", "return", "L3", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.utils.int_or_float": [[195, 200], ["int", "float"], "function", ["None"], ["", "def", "int_or_float", "(", "val", ")", ":", "\n", "    ", "if", "'.'", "in", "val", ":", "\n", "        ", "return", "float", "(", "val", ")", "\n", "\n", "", "return", "int", "(", "val", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.utils.load_ranking": [[201, 216], ["utils.print_message", "torch.load", "utils.zipstar", "l.tolist", "itertools.cycle", "open", "tqdm.tqdm", "typ", "utils.file_tqdm", "utils.zip_first", "line.strip().split", "line.strip"], "function", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.utils.print_message", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.codecs.residual_embeddings.ResidualEmbeddings.load", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.utils.zipstar", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.data.examples.Examples.tolist", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.infra.run.Run.open", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.utils.file_tqdm", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.utils.zip_first"], ["", "def", "load_ranking", "(", "path", ",", "types", "=", "None", ",", "lazy", "=", "False", ")", ":", "\n", "    ", "print_message", "(", "f\"#> Loading the ranked lists from {path} ..\"", ")", "\n", "\n", "try", ":", "\n", "        ", "lists", "=", "torch", ".", "load", "(", "path", ")", "\n", "lists", "=", "zipstar", "(", "[", "l", ".", "tolist", "(", ")", "for", "l", "in", "tqdm", ".", "tqdm", "(", "lists", ")", "]", ",", "lazy", "=", "lazy", ")", "\n", "", "except", ":", "\n", "        ", "if", "types", "is", "None", ":", "\n", "            ", "types", "=", "itertools", ".", "cycle", "(", "[", "int_or_float", "]", ")", "\n", "\n", "", "with", "open", "(", "path", ")", "as", "f", ":", "\n", "            ", "lists", "=", "[", "[", "typ", "(", "x", ")", "for", "typ", ",", "x", "in", "zip_first", "(", "types", ",", "line", ".", "strip", "(", ")", ".", "split", "(", "'\\t'", ")", ")", "]", "\n", "for", "line", "in", "file_tqdm", "(", "f", ")", "]", "\n", "\n", "", "", "return", "lists", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.utils.save_ranking": [[218, 225], ["utils.zipstar", "torch.save", "torch.tensor"], "function", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.utils.zipstar", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.codecs.residual_embeddings.ResidualEmbeddings.save"], ["", "def", "save_ranking", "(", "ranking", ",", "path", ")", ":", "\n", "    ", "lists", "=", "zipstar", "(", "ranking", ")", "\n", "lists", "=", "[", "torch", ".", "tensor", "(", "l", ")", "for", "l", "in", "lists", "]", "\n", "\n", "torch", ".", "save", "(", "lists", ",", "path", ")", "\n", "\n", "return", "lists", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.utils.groupby_first_item": [[227, 235], ["collections.defaultdict", "groups[].append", "len"], "function", ["None"], ["", "def", "groupby_first_item", "(", "lst", ")", ":", "\n", "    ", "groups", "=", "defaultdict", "(", "list", ")", "\n", "\n", "for", "first", ",", "*", "rest", "in", "lst", ":", "\n", "        ", "rest", "=", "rest", "[", "0", "]", "if", "len", "(", "rest", ")", "==", "1", "else", "rest", "\n", "groups", "[", "first", "]", ".", "append", "(", "rest", ")", "\n", "\n", "", "return", "groups", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.utils.process_grouped_by_first_item": [[237, 260], ["collections.defaultdict", "groups[].append", "len"], "function", ["None"], ["", "def", "process_grouped_by_first_item", "(", "lst", ")", ":", "\n", "    ", "\"\"\"\n        Requires items in list to already be grouped by first item.\n    \"\"\"", "\n", "\n", "groups", "=", "defaultdict", "(", "list", ")", "\n", "\n", "started", "=", "False", "\n", "last_group", "=", "None", "\n", "\n", "for", "first", ",", "*", "rest", "in", "lst", ":", "\n", "        ", "rest", "=", "rest", "[", "0", "]", "if", "len", "(", "rest", ")", "==", "1", "else", "rest", "\n", "\n", "if", "started", "and", "first", "!=", "last_group", ":", "\n", "            ", "yield", "(", "last_group", ",", "groups", "[", "last_group", "]", ")", "\n", "assert", "first", "not", "in", "groups", ",", "f\"{first} seen earlier --- violates precondition.\"", "\n", "\n", "", "groups", "[", "first", "]", ".", "append", "(", "rest", ")", "\n", "\n", "last_group", "=", "first", "\n", "started", "=", "True", "\n", "\n", "", "return", "groups", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.utils.grouper": [[262, 271], ["itertools.zip_longest", "iter"], "function", ["None"], ["", "def", "grouper", "(", "iterable", ",", "n", ",", "fillvalue", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Collect data into fixed-length chunks or blocks\n        Example: grouper('ABCDEFG', 3, 'x') --> ABC DEF Gxx\"\n        Source: https://docs.python.org/3/library/itertools.html#itertools-recipes\n    \"\"\"", "\n", "\n", "args", "=", "[", "iter", "(", "iterable", ")", "]", "*", "n", "\n", "return", "itertools", ".", "zip_longest", "(", "*", "args", ",", "fillvalue", "=", "fillvalue", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.utils.lengths2offsets": [[273, 281], ["None"], "function", ["None"], ["", "def", "lengths2offsets", "(", "lengths", ")", ":", "\n", "    ", "offset", "=", "0", "\n", "\n", "for", "length", "in", "lengths", ":", "\n", "        ", "yield", "(", "offset", ",", "offset", "+", "length", ")", "\n", "offset", "+=", "length", "\n", "\n", "", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.utils.load_batch_backgrounds": [[293, 311], ["qbackgrounds.append", "len", "type", "args.collectionX.get"], "function", ["None"], ["", "", "def", "load_batch_backgrounds", "(", "args", ",", "qids", ")", ":", "\n", "    ", "if", "args", ".", "qid2backgrounds", "is", "None", ":", "\n", "        ", "return", "None", "\n", "\n", "", "qbackgrounds", "=", "[", "]", "\n", "\n", "for", "qid", "in", "qids", ":", "\n", "        ", "back", "=", "args", ".", "qid2backgrounds", "[", "qid", "]", "\n", "\n", "if", "len", "(", "back", ")", "and", "type", "(", "back", "[", "0", "]", ")", "==", "int", ":", "\n", "            ", "x", "=", "[", "args", ".", "collection", "[", "pid", "]", "for", "pid", "in", "back", "]", "\n", "", "else", ":", "\n", "            ", "x", "=", "[", "args", ".", "collectionX", ".", "get", "(", "pid", ",", "''", ")", "for", "pid", "in", "back", "]", "\n", "\n", "", "x", "=", "' [SEP] '", ".", "join", "(", "x", ")", "\n", "qbackgrounds", ".", "append", "(", "x", ")", "\n", "\n", "", "return", "qbackgrounds", "\n", "", ""]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.qa_loaders.load_collection_": [[8, 21], ["open", "colbert.utils.utils.file_tqdm", "line.strip().split", "collection.append", "line.strip"], "function", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.infra.run.Run.open", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.utils.file_tqdm"], ["def", "load_collection_", "(", "path", ",", "retain_titles", ")", ":", "\n", "    ", "with", "open", "(", "path", ")", "as", "f", ":", "\n", "        ", "collection", "=", "[", "]", "\n", "\n", "for", "line", "in", "file_tqdm", "(", "f", ")", ":", "\n", "            ", "_", ",", "passage", ",", "title", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "'\\t'", ")", "\n", "\n", "if", "retain_titles", ":", "\n", "                ", "passage", "=", "title", "+", "' | '", "+", "passage", "\n", "\n", "", "collection", ".", "append", "(", "passage", ")", "\n", "\n", "", "", "return", "collection", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.qa_loaders.load_qas_": [[23, 34], ["colbert.utils.utils.print_message", "open", "ujson.loads", "triples.append"], "function", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.utils.print_message", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.infra.run.Run.open"], ["", "def", "load_qas_", "(", "path", ")", ":", "\n", "    ", "print_message", "(", "\"#> Loading the reference QAs from\"", ",", "path", ")", "\n", "\n", "triples", "=", "[", "]", "\n", "\n", "with", "open", "(", "path", ")", "as", "f", ":", "\n", "        ", "for", "line", "in", "f", ":", "\n", "            ", "qa", "=", "ujson", ".", "loads", "(", "line", ")", "\n", "triples", ".", "append", "(", "(", "qa", "[", "'qid'", "]", ",", "qa", "[", "'question'", "]", ",", "qa", "[", "'answers'", "]", ")", ")", "\n", "\n", "", "", "return", "triples", "\n", "", ""]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.dpr.Tokens.__init__": [[21, 25], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "data", ",", "annotators", ",", "opts", "=", "None", ")", ":", "\n", "        ", "self", ".", "data", "=", "data", "\n", "self", ".", "annotators", "=", "annotators", "\n", "self", ".", "opts", "=", "opts", "or", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.dpr.Tokens.__len__": [[26, 29], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "\"\"\"The number of tokens.\"\"\"", "\n", "return", "len", "(", "self", ".", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.dpr.Tokens.slice": [[30, 35], ["copy.copy"], "methods", ["None"], ["", "def", "slice", "(", "self", ",", "i", "=", "None", ",", "j", "=", "None", ")", ":", "\n", "        ", "\"\"\"Return a view of the list of tokens from [i, j).\"\"\"", "\n", "new_tokens", "=", "copy", ".", "copy", "(", "self", ")", "\n", "new_tokens", ".", "data", "=", "self", ".", "data", "[", "i", ":", "j", "]", "\n", "return", "new_tokens", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.dpr.Tokens.untokenize": [[36, 39], ["None"], "methods", ["None"], ["", "def", "untokenize", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the original text (with whitespace reinserted).\"\"\"", "\n", "return", "''", ".", "join", "(", "[", "t", "[", "self", ".", "TEXT_WS", "]", "for", "t", "in", "self", ".", "data", "]", ")", ".", "strip", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.dpr.Tokens.words": [[40, 50], ["t[].lower"], "methods", ["None"], ["", "def", "words", "(", "self", ",", "uncased", "=", "False", ")", ":", "\n", "        ", "\"\"\"Returns a list of the text of each token\n\n        Args:\n            uncased: lower cases text\n        \"\"\"", "\n", "if", "uncased", ":", "\n", "            ", "return", "[", "t", "[", "self", ".", "TEXT", "]", ".", "lower", "(", ")", "for", "t", "in", "self", ".", "data", "]", "\n", "", "else", ":", "\n", "            ", "return", "[", "t", "[", "self", ".", "TEXT", "]", "for", "t", "in", "self", ".", "data", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.dpr.Tokens.offsets": [[51, 54], ["None"], "methods", ["None"], ["", "", "def", "offsets", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns a list of [start, end) character offsets of each token.\"\"\"", "\n", "return", "[", "t", "[", "self", ".", "SPAN", "]", "for", "t", "in", "self", ".", "data", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.dpr.Tokens.pos": [[55, 62], ["None"], "methods", ["None"], ["", "def", "pos", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns a list of part-of-speech tags of each token.\n        Returns None if this annotation was not included.\n        \"\"\"", "\n", "if", "'pos'", "not", "in", "self", ".", "annotators", ":", "\n", "            ", "return", "None", "\n", "", "return", "[", "t", "[", "self", ".", "POS", "]", "for", "t", "in", "self", ".", "data", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.dpr.Tokens.lemmas": [[63, 70], ["None"], "methods", ["None"], ["", "def", "lemmas", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns a list of the lemmatized text of each token.\n        Returns None if this annotation was not included.\n        \"\"\"", "\n", "if", "'lemma'", "not", "in", "self", ".", "annotators", ":", "\n", "            ", "return", "None", "\n", "", "return", "[", "t", "[", "self", ".", "LEMMA", "]", "for", "t", "in", "self", ".", "data", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.dpr.Tokens.entities": [[71, 78], ["None"], "methods", ["None"], ["", "def", "entities", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns a list of named-entity-recognition tags of each token.\n        Returns None if this annotation was not included.\n        \"\"\"", "\n", "if", "'ner'", "not", "in", "self", ".", "annotators", ":", "\n", "            ", "return", "None", "\n", "", "return", "[", "t", "[", "self", ".", "NER", "]", "for", "t", "in", "self", ".", "data", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.dpr.Tokens.ngrams": [[79, 106], ["dpr.Tokens.words", "filter_fn", "range", "range", "len", "min", "dpr.Tokens.ngrams._skip"], "methods", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.dpr.Tokens.words"], ["", "def", "ngrams", "(", "self", ",", "n", "=", "1", ",", "uncased", "=", "False", ",", "filter_fn", "=", "None", ",", "as_strings", "=", "True", ")", ":", "\n", "        ", "\"\"\"Returns a list of all ngrams from length 1 to n.\n\n        Args:\n            n: upper limit of ngram length\n            uncased: lower cases text\n            filter_fn: user function that takes in an ngram list and returns\n              True or False to keep or not keep the ngram\n            as_string: return the ngram as a string vs list\n        \"\"\"", "\n", "\n", "def", "_skip", "(", "gram", ")", ":", "\n", "            ", "if", "not", "filter_fn", ":", "\n", "                ", "return", "False", "\n", "", "return", "filter_fn", "(", "gram", ")", "\n", "\n", "", "words", "=", "self", ".", "words", "(", "uncased", ")", "\n", "ngrams", "=", "[", "(", "s", ",", "e", "+", "1", ")", "\n", "for", "s", "in", "range", "(", "len", "(", "words", ")", ")", "\n", "for", "e", "in", "range", "(", "s", ",", "min", "(", "s", "+", "n", ",", "len", "(", "words", ")", ")", ")", "\n", "if", "not", "_skip", "(", "words", "[", "s", ":", "e", "+", "1", "]", ")", "]", "\n", "\n", "# Concatenate into strings", "\n", "if", "as_strings", ":", "\n", "            ", "ngrams", "=", "[", "'{}'", ".", "format", "(", "' '", ".", "join", "(", "words", "[", "s", ":", "e", "]", ")", ")", "for", "(", "s", ",", "e", ")", "in", "ngrams", "]", "\n", "\n", "", "return", "ngrams", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.dpr.Tokens.entity_groups": [[107, 127], ["dpr.Tokens.entities", "dpr.Tokens.opts.get", "len", "groups.append", "len", "dpr.Tokens.slice().untokenize", "dpr.Tokens.slice"], "methods", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.dpr.Tokens.entities", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.dpr.Tokens.untokenize", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.dpr.Tokens.slice"], ["", "def", "entity_groups", "(", "self", ")", ":", "\n", "        ", "\"\"\"Group consecutive entity tokens with the same NER tag.\"\"\"", "\n", "entities", "=", "self", ".", "entities", "(", ")", "\n", "if", "not", "entities", ":", "\n", "            ", "return", "None", "\n", "", "non_ent", "=", "self", ".", "opts", ".", "get", "(", "'non_ent'", ",", "'O'", ")", "\n", "groups", "=", "[", "]", "\n", "idx", "=", "0", "\n", "while", "idx", "<", "len", "(", "entities", ")", ":", "\n", "            ", "ner_tag", "=", "entities", "[", "idx", "]", "\n", "# Check for entity tag", "\n", "if", "ner_tag", "!=", "non_ent", ":", "\n", "# Chomp the sequence", "\n", "                ", "start", "=", "idx", "\n", "while", "(", "idx", "<", "len", "(", "entities", ")", "and", "entities", "[", "idx", "]", "==", "ner_tag", ")", ":", "\n", "                    ", "idx", "+=", "1", "\n", "", "groups", ".", "append", "(", "(", "self", ".", "slice", "(", "start", ",", "idx", ")", ".", "untokenize", "(", ")", ",", "ner_tag", ")", ")", "\n", "", "else", ":", "\n", "                ", "idx", "+=", "1", "\n", "", "", "return", "groups", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.dpr.Tokenizer.tokenize": [[134, 136], ["None"], "methods", ["None"], ["def", "tokenize", "(", "self", ",", "text", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.dpr.Tokenizer.shutdown": [[137, 139], ["None"], "methods", ["None"], ["", "def", "shutdown", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.dpr.Tokenizer.__del__": [[140, 142], ["dpr.Tokenizer.shutdown"], "methods", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.dpr.Tokenizer.shutdown"], ["", "def", "__del__", "(", "self", ")", ":", "\n", "        ", "self", ".", "shutdown", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.dpr.SimpleTokenizer.__init__": [[148, 161], ["regex.compile", "set", "len", "logger.warning", "kwargs.get", "kwargs.get", "type"], "methods", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.config.core_config.CoreConfig.set"], ["def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            annotators: None or empty set (only tokenizes).\n        \"\"\"", "\n", "self", ".", "_regexp", "=", "regex", ".", "compile", "(", "\n", "'(%s)|(%s)'", "%", "(", "self", ".", "ALPHA_NUM", ",", "self", ".", "NON_WS", ")", ",", "\n", "flags", "=", "regex", ".", "IGNORECASE", "+", "regex", ".", "UNICODE", "+", "regex", ".", "MULTILINE", "\n", ")", "\n", "if", "len", "(", "kwargs", ".", "get", "(", "'annotators'", ",", "{", "}", ")", ")", ">", "0", ":", "\n", "            ", "logger", ".", "warning", "(", "'%s only tokenizes! Skipping annotators: %s'", "%", "\n", "(", "type", "(", "self", ")", ".", "__name__", ",", "kwargs", ".", "get", "(", "'annotators'", ")", ")", ")", "\n", "", "self", ".", "annotators", "=", "set", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.dpr.SimpleTokenizer.tokenize": [[162, 184], ["range", "dpr.Tokens", "len", "matches[].group", "matches[].span", "data.append", "dpr.SimpleTokenizer._regexp.finditer", "len", "matches[].span"], "methods", ["None"], ["", "def", "tokenize", "(", "self", ",", "text", ")", ":", "\n", "        ", "data", "=", "[", "]", "\n", "matches", "=", "[", "m", "for", "m", "in", "self", ".", "_regexp", ".", "finditer", "(", "text", ")", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "matches", ")", ")", ":", "\n", "# Get text", "\n", "            ", "token", "=", "matches", "[", "i", "]", ".", "group", "(", ")", "\n", "\n", "# Get whitespace", "\n", "span", "=", "matches", "[", "i", "]", ".", "span", "(", ")", "\n", "start_ws", "=", "span", "[", "0", "]", "\n", "if", "i", "+", "1", "<", "len", "(", "matches", ")", ":", "\n", "                ", "end_ws", "=", "matches", "[", "i", "+", "1", "]", ".", "span", "(", ")", "[", "0", "]", "\n", "", "else", ":", "\n", "                ", "end_ws", "=", "span", "[", "1", "]", "\n", "\n", "# Format data", "\n", "", "data", ".", "append", "(", "(", "\n", "token", ",", "\n", "text", "[", "start_ws", ":", "end_ws", "]", ",", "\n", "span", ",", "\n", ")", ")", "\n", "", "return", "Tokens", "(", "data", ",", "self", ".", "annotators", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.dpr.has_answer": [[186, 195], ["dpr.DPR_normalize", "range", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.dpr.DPR_normalize"], ["", "", "def", "has_answer", "(", "tokenized_answers", ",", "text", ")", ":", "\n", "    ", "text", "=", "DPR_normalize", "(", "text", ")", "\n", "\n", "for", "single_answer", "in", "tokenized_answers", ":", "\n", "        ", "for", "i", "in", "range", "(", "0", ",", "len", "(", "text", ")", "-", "len", "(", "single_answer", ")", "+", "1", ")", ":", "\n", "            ", "if", "single_answer", "==", "text", "[", "i", ":", "i", "+", "len", "(", "single_answer", ")", "]", ":", "\n", "                ", "return", "True", "\n", "\n", "", "", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.dpr.locate_answers": [[197, 214], ["dpr.DPR_tokenize", "DPR_tokenize.words", "DPR_tokenize.offsets", "ans.words", "range", "occurrences.append", "len", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.dpr.DPR_tokenize", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.dpr.Tokens.words", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.dpr.Tokens.offsets", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.dpr.Tokens.words"], ["", "def", "locate_answers", "(", "tokenized_answers", ",", "text", ")", ":", "\n", "    ", "\"\"\"\n    Returns each occurrence of an answer as (offset, endpos) in terms of *characters*.\n    \"\"\"", "\n", "tokenized_text", "=", "DPR_tokenize", "(", "text", ")", "\n", "occurrences", "=", "[", "]", "\n", "\n", "text_words", ",", "text_word_positions", "=", "tokenized_text", ".", "words", "(", "uncased", "=", "True", ")", ",", "tokenized_text", ".", "offsets", "(", ")", "\n", "answers_words", "=", "[", "ans", ".", "words", "(", "uncased", "=", "True", ")", "for", "ans", "in", "tokenized_answers", "]", "\n", "\n", "for", "single_answer", "in", "answers_words", ":", "\n", "        ", "for", "i", "in", "range", "(", "0", ",", "len", "(", "text_words", ")", "-", "len", "(", "single_answer", ")", "+", "1", ")", ":", "\n", "            ", "if", "single_answer", "==", "text_words", "[", "i", ":", "i", "+", "len", "(", "single_answer", ")", "]", ":", "\n", "                ", "(", "offset", ",", "_", ")", ",", "(", "_", ",", "endpos", ")", "=", "text_word_positions", "[", "i", "]", ",", "text_word_positions", "[", "i", "+", "len", "(", "single_answer", ")", "-", "1", "]", "\n", "occurrences", ".", "append", "(", "(", "offset", ",", "endpos", ")", ")", "\n", "\n", "", "", "", "return", "occurrences", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.dpr.DPR_tokenize": [[219, 221], ["STokenizer.tokenize", "unicodedata.normalize"], "function", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.tokenization.doc_tokenization.DocTokenizer.tokenize"], ["def", "DPR_tokenize", "(", "text", ")", ":", "\n", "    ", "return", "STokenizer", ".", "tokenize", "(", "unicodedata", ".", "normalize", "(", "'NFD'", ",", "text", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.dpr.DPR_normalize": [[223, 225], ["DPR_tokenize().words", "dpr.DPR_tokenize"], "function", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.dpr.Tokens.words", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.dpr.DPR_tokenize"], ["", "def", "DPR_normalize", "(", "text", ")", ":", "\n", "    ", "return", "DPR_tokenize", "(", "text", ")", ".", "words", "(", "uncased", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.dpr.strip_accents": [[228, 238], ["unicodedata.normalize", "unicodedata.category", "output.append"], "function", ["None"], ["", "def", "strip_accents", "(", "text", ")", ":", "\n", "    ", "\"\"\"Strips accents from a piece of text.\"\"\"", "\n", "text", "=", "unicodedata", ".", "normalize", "(", "\"NFD\"", ",", "text", ")", "\n", "output", "=", "[", "]", "\n", "for", "char", "in", "text", ":", "\n", "      ", "cat", "=", "unicodedata", ".", "category", "(", "char", ")", "\n", "if", "cat", "==", "\"Mn\"", ":", "\n", "        ", "continue", "\n", "", "output", ".", "append", "(", "char", ")", "\n", "", "return", "\"\"", ".", "join", "(", "output", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.save_metadata.get_metadata_only": [[11, 25], ["colbert.utils.utils.dotdict", "socket.gethostname", "time.strftime", "str", "git.Repo", "git.Repo", "git.Repo"], "function", ["None"], ["def", "get_metadata_only", "(", ")", ":", "\n", "    ", "args", "=", "dotdict", "(", ")", "\n", "\n", "args", ".", "hostname", "=", "socket", ".", "gethostname", "(", ")", "\n", "try", ":", "\n", "        ", "args", ".", "git_branch", "=", "git", ".", "Repo", "(", "search_parent_directories", "=", "True", ")", ".", "active_branch", ".", "name", "\n", "args", ".", "git_hash", "=", "git", ".", "Repo", "(", "search_parent_directories", "=", "True", ")", ".", "head", ".", "object", ".", "hexsha", "\n", "args", ".", "git_commit_datetime", "=", "str", "(", "git", ".", "Repo", "(", "search_parent_directories", "=", "True", ")", ".", "head", ".", "object", ".", "committed_datetime", ")", "\n", "", "except", "git", ".", "exc", ".", "InvalidGitRepositoryError", "as", "e", ":", "\n", "        ", "pass", "\n", "", "args", ".", "current_datetime", "=", "time", ".", "strftime", "(", "'%b %d, %Y ; %l:%M%p %Z (%z)'", ")", "\n", "args", ".", "cmd", "=", "' '", ".", "join", "(", "sys", ".", "argv", ")", "\n", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.save_metadata.get_metadata": [[27, 43], ["copy.deepcopy", "socket.gethostname", "str", "time.strftime", "dict", "copy.deepcopy", "git.Repo", "git.Repo", "git.Repo"], "function", ["None"], ["", "def", "get_metadata", "(", "args", ")", ":", "\n", "    ", "args", "=", "copy", ".", "deepcopy", "(", "args", ")", "\n", "\n", "args", ".", "hostname", "=", "socket", ".", "gethostname", "(", ")", "\n", "args", ".", "git_branch", "=", "git", ".", "Repo", "(", "search_parent_directories", "=", "True", ")", ".", "active_branch", ".", "name", "\n", "args", ".", "git_hash", "=", "git", ".", "Repo", "(", "search_parent_directories", "=", "True", ")", ".", "head", ".", "object", ".", "hexsha", "\n", "args", ".", "git_commit_datetime", "=", "str", "(", "git", ".", "Repo", "(", "search_parent_directories", "=", "True", ")", ".", "head", ".", "object", ".", "committed_datetime", ")", "\n", "args", ".", "current_datetime", "=", "time", ".", "strftime", "(", "'%b %d, %Y ; %l:%M%p %Z (%z)'", ")", "\n", "args", ".", "cmd", "=", "' '", ".", "join", "(", "sys", ".", "argv", ")", "\n", "\n", "try", ":", "\n", "        ", "args", ".", "input_arguments", "=", "copy", ".", "deepcopy", "(", "args", ".", "input_arguments", ".", "__dict__", ")", "\n", "", "except", ":", "\n", "        ", "args", ".", "input_arguments", "=", "None", "\n", "\n", "", "return", "dict", "(", "args", ".", "__dict__", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.save_metadata.format_metadata": [[47, 51], ["ujson.dumps", "type"], "function", ["None"], ["", "def", "format_metadata", "(", "metadata", ")", ":", "\n", "    ", "assert", "type", "(", "metadata", ")", "==", "dict", "\n", "\n", "return", "ujson", ".", "dumps", "(", "metadata", ",", "indent", "=", "4", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.save_metadata.save_metadata": [[53, 61], ["os.path.exists", "open", "save_metadata.get_metadata", "output_metadata.write", "save_metadata.format_metadata"], "function", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.infra.run.Run.open", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.save_metadata.get_metadata", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.save_metadata.format_metadata"], ["", "def", "save_metadata", "(", "path", ",", "args", ")", ":", "\n", "    ", "assert", "not", "os", ".", "path", ".", "exists", "(", "path", ")", ",", "path", "\n", "\n", "with", "open", "(", "path", ",", "'w'", ")", "as", "output_metadata", ":", "\n", "        ", "data", "=", "get_metadata", "(", "args", ")", "\n", "output_metadata", ".", "write", "(", "format_metadata", "(", "data", ")", "+", "'\\n'", ")", "\n", "\n", "", "return", "data", "\n", "", ""]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.loaders.load_contexts": [[9, 26], ["colbert.utils.utils.print_message", "open", "colbert.utils.utils.print_message", "ujson.loads", "len", "tuple", "type"], "function", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.utils.print_message", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.infra.run.Run.open", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.utils.print_message"], ["from", "colbert", ".", "modeling", ".", "colbert", "import", "ColBERT", "\n", "from", "colbert", ".", "utils", ".", "utils", "import", "print_message", ",", "load_checkpoint", "\n", "from", "colbert", ".", "evaluation", ".", "load_model", "import", "load_model", "\n", "from", "colbert", ".", "utils", ".", "runs", "import", "Run", "\n", "\n", "\n", "def", "load_queries", "(", "queries_path", ")", ":", "\n", "    ", "queries", "=", "OrderedDict", "(", ")", "\n", "\n", "print_message", "(", "\"#> Loading the queries from\"", ",", "queries_path", ",", "\"...\"", ")", "\n", "\n", "with", "open", "(", "queries_path", ")", "as", "f", ":", "\n", "        ", "for", "line", "in", "f", ":", "\n", "            ", "qid", ",", "query", ",", "*", "_", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "'\\t'", ")", "\n", "qid", "=", "int", "(", "qid", ")", "\n", "\n", "assert", "(", "qid", "not", "in", "queries", ")", ",", "(", "\"Query QID\"", ",", "qid", ",", "\"is repeated!\"", ")", "\n", "queries", "[", "qid", "]", "=", "query", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.loaders.load_collectionX": [[27, 51], ["colbert.utils.utils.print_message", "open", "enumerate", "ujson.loads", "enumerate", "type"], "function", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.utils.print_message", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.infra.run.Run.open", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.data.collection.Collection.enumerate", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.data.collection.Collection.enumerate"], ["\n", "", "", "print_message", "(", "\"#> Got\"", ",", "len", "(", "queries", ")", ",", "\"queries. All QIDs are unique.\\n\"", ")", "\n", "\n", "return", "queries", "\n", "\n", "\n", "", "def", "load_qrels", "(", "qrels_path", ")", ":", "\n", "    ", "if", "qrels_path", "is", "None", ":", "\n", "        ", "return", "None", "\n", "\n", "", "print_message", "(", "\"#> Loading qrels from\"", ",", "qrels_path", ",", "\"...\"", ")", "\n", "\n", "qrels", "=", "OrderedDict", "(", ")", "\n", "with", "open", "(", "qrels_path", ",", "mode", "=", "'r'", ",", "encoding", "=", "\"utf-8\"", ")", "as", "f", ":", "\n", "        ", "for", "line", "in", "f", ":", "\n", "            ", "qid", ",", "x", ",", "pid", ",", "y", "=", "map", "(", "int", ",", "line", ".", "strip", "(", ")", ".", "split", "(", "'\\t'", ")", ")", "\n", "assert", "x", "==", "0", "and", "y", "==", "1", "\n", "qrels", "[", "qid", "]", "=", "qrels", ".", "get", "(", "qid", ",", "[", "]", ")", "\n", "qrels", "[", "qid", "]", ".", "append", "(", "pid", ")", "\n", "\n", "# assert all(len(qrels[qid]) == len(set(qrels[qid])) for qid in qrels)", "\n", "", "", "for", "qid", "in", "qrels", ":", "\n", "        ", "qrels", "[", "qid", "]", "=", "list", "(", "set", "(", "qrels", "[", "qid", "]", ")", ")", "\n", "\n", "", "avg_positive", "=", "round", "(", "sum", "(", "len", "(", "qrels", "[", "qid", "]", ")", "for", "qid", "in", "qrels", ")", "/", "len", "(", "qrels", ")", ",", "2", ")", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.annotate.annotate_to_file": [[7, 38], ["colbert.utils.utils.print_message", "colbert.utils.utils.print_message", "os.path.exists", "open", "colbert.utils.utils.print_message", "colbert.utils.utils.file_tqdm", "open", "colbert.utils.utils.print_message", "ujson.loads", "open", "colbert.utils.utils.file_tqdm", "line.strip().split", "map", "int", "g.write", "line.strip", "map"], "function", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.utils.print_message", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.utils.print_message", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.infra.run.Run.open", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.utils.print_message", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.utils.file_tqdm", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.infra.run.Run.open", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.utils.print_message", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.infra.run.Run.open", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.utils.file_tqdm"], ["def", "annotate_to_file", "(", "qas_path", ",", "ranking_path", ")", ":", "\n", "    ", "output_path", "=", "f'{ranking_path}.annotated'", "\n", "assert", "not", "os", ".", "path", ".", "exists", "(", "output_path", ")", ",", "output_path", "\n", "\n", "QID2pids", "=", "{", "}", "\n", "\n", "with", "open", "(", "qas_path", ")", "as", "f", ":", "\n", "        ", "print_message", "(", "f\"#> Reading QAs from {f.name} ..\"", ")", "\n", "\n", "for", "line", "in", "file_tqdm", "(", "f", ")", ":", "\n", "            ", "example", "=", "ujson", ".", "loads", "(", "line", ")", "\n", "QID2pids", "[", "example", "[", "'qid'", "]", "]", "=", "example", "[", "'support_pids'", "]", "\n", "\n", "", "", "with", "open", "(", "ranking_path", ")", "as", "f", ":", "\n", "        ", "print_message", "(", "f\"#> Reading ranked lists from {f.name} ..\"", ")", "\n", "\n", "with", "open", "(", "output_path", ",", "'w'", ")", "as", "g", ":", "\n", "            ", "for", "line", "in", "file_tqdm", "(", "f", ")", ":", "\n", "                ", "qid", ",", "pid", ",", "*", "other", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "'\\t'", ")", "\n", "qid", ",", "pid", "=", "map", "(", "int", ",", "[", "qid", ",", "pid", "]", ")", "\n", "\n", "label", "=", "int", "(", "pid", "in", "QID2pids", "[", "qid", "]", ")", "\n", "\n", "line_", "=", "[", "qid", ",", "pid", ",", "*", "other", ",", "label", "]", "\n", "line_", "=", "'\\t'", ".", "join", "(", "map", "(", "str", ",", "line_", ")", ")", "+", "'\\n'", "\n", "g", ".", "write", "(", "line_", ")", "\n", "\n", "", "", "", "print_message", "(", "g", ".", "name", ")", "\n", "print_message", "(", "\"#> Done!\"", ")", "\n", "\n", "return", "g", ".", "name", "\n", "", ""]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.search.index_storage.IndexScorer.__init__": [[43, 47], ["index_loader.IndexLoader.__init__", "colbert.indexing.codecs.residual_embeddings_strided.ResidualEmbeddingsStrided"], "methods", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.condenser.model.ElectraReader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "index_path", ",", "use_gpu", "=", "True", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "index_path", "=", "index_path", ",", "use_gpu", "=", "use_gpu", ")", "\n", "\n", "self", ".", "embeddings_strided", "=", "ResidualEmbeddingsStrided", "(", "self", ".", "codec", ",", "self", ".", "embeddings", ",", "self", ".", "doclens", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.search.index_storage.IndexScorer.lookup_eids": [[48, 50], ["index_storage.IndexScorer.embeddings_strided.lookup_eids"], "methods", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.codecs.residual_embeddings_strided.ResidualEmbeddingsStrided.lookup_eids"], ["", "def", "lookup_eids", "(", "self", ",", "embedding_ids", ",", "codes", "=", "None", ",", "out_device", "=", "'cuda'", ")", ":", "\n", "        ", "return", "self", ".", "embeddings_strided", ".", "lookup_eids", "(", "embedding_ids", ",", "codes", "=", "codes", ",", "out_device", "=", "out_device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.search.index_storage.IndexScorer.lookup_pids": [[51, 53], ["index_storage.IndexScorer.embeddings_strided.lookup_pids"], "methods", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.codecs.residual_embeddings_strided.ResidualEmbeddingsStrided.lookup_pids"], ["", "def", "lookup_pids", "(", "self", ",", "passage_ids", ",", "out_device", "=", "'cuda'", ",", "return_mask", "=", "False", ")", ":", "\n", "        ", "return", "self", ".", "embeddings_strided", ".", "lookup_pids", "(", "passage_ids", ",", "out_device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.search.index_storage.IndexScorer.retrieve": [[54, 59], ["index_storage.IndexScorer.generate_candidates"], "methods", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.search.candidate_generation.CandidateGeneration.generate_candidates"], ["", "def", "retrieve", "(", "self", ",", "config", ",", "Q", ")", ":", "\n", "        ", "Q", "=", "Q", "[", ":", ",", ":", "config", ".", "query_maxlen", "]", "# NOTE: Candidate generation uses only the query tokens", "\n", "embedding_ids", ",", "centroid_scores", "=", "self", ".", "generate_candidates", "(", "config", ",", "Q", ")", "\n", "\n", "return", "embedding_ids", ",", "centroid_scores", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.search.index_storage.IndexScorer.embedding_ids_to_pids": [[60, 63], ["torch.unique", "index_storage.IndexScorer.emb2pid[].cuda", "embedding_ids.long"], "methods", ["None"], ["", "def", "embedding_ids_to_pids", "(", "self", ",", "embedding_ids", ")", ":", "\n", "        ", "all_pids", "=", "torch", ".", "unique", "(", "self", ".", "emb2pid", "[", "embedding_ids", ".", "long", "(", ")", "]", ".", "cuda", "(", ")", ",", "sorted", "=", "False", ")", "\n", "return", "all_pids", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.search.index_storage.IndexScorer.rank": [[64, 73], ["torch.inference_mode", "index_storage.IndexScorer.retrieve", "index_storage.IndexScorer.score_pids", "scores.sort", "pids[].tolist", "scores.sort.values.tolist"], "methods", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.search.index_storage.IndexScorer.retrieve", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.search.index_storage.IndexScorer.score_pids", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.data.examples.Examples.tolist", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.data.examples.Examples.tolist"], ["", "def", "rank", "(", "self", ",", "config", ",", "Q", ")", ":", "\n", "        ", "with", "torch", ".", "inference_mode", "(", ")", ":", "\n", "            ", "pids", ",", "centroid_scores", "=", "self", ".", "retrieve", "(", "config", ",", "Q", ")", "\n", "scores", ",", "pids", "=", "self", ".", "score_pids", "(", "config", ",", "Q", ",", "pids", ",", "centroid_scores", ")", "\n", "\n", "scores_sorter", "=", "scores", ".", "sort", "(", "descending", "=", "True", ")", "\n", "pids", ",", "scores", "=", "pids", "[", "scores_sorter", ".", "indices", "]", ".", "tolist", "(", ")", ",", "scores_sorter", ".", "values", ".", "tolist", "(", ")", "\n", "\n", "return", "pids", ",", "scores", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.search.index_storage.IndexScorer.score_pids": [[74, 156], ["colbert.search.strided_tensor.StridedTensor", "colbert.search.strided_tensor.StridedTensor.as_padded_tensor", "centroid_scores.cuda.cuda.cuda", "range", "torch.cat", "index_storage.IndexScorer.embeddings_strided.lookup_codes", "colbert.search.strided_tensor.StridedTensor", "colbert.search.strided_tensor.StridedTensor.as_padded_tensor", "colbert.modeling.colbert.colbert_score_reduce", "filter_pids_cpp.filter_pids_cpp", "index_storage.IndexScorer.lookup_pids", "decompress_residuals_cpp.decompress_residuals_cpp", "torch.nn.functional.normalize", "Q.size", "colbert.modeling.colbert.colbert_score", "centroid_scores.cuda.cuda.max", "math.ceil", "index_storage.IndexScorer.embeddings_strided.lookup_codes", "colbert.search.strided_tensor.StridedTensor", "colbert.search.strided_tensor.StridedTensor.as_padded_tensor", "colbert.search.strided_tensor.StridedTensor", "colbert.search.strided_tensor.StridedTensor.as_padded_tensor", "colbert.modeling.colbert.colbert_score_reduce", "colbert.modeling.colbert.colbert_score_reduce.append", "len", "len", "torch.nn.functional.normalize.to", "colbert.modeling.colbert.colbert_score_packed", "colbert.modeling.colbert.colbert_score_reduce.append", "codes_packed.long", "filter_pids_cpp.filter_pids_cpp.long", "len", "codes_packed.long", "codes_packed_.long", "torch.zeros", "torch.topk", "torch.topk", "len"], "methods", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.search.strided_tensor_core.StridedTensorCore.as_padded_tensor", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.codecs.residual_embeddings_strided.ResidualEmbeddingsStrided.lookup_codes", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.search.strided_tensor_core.StridedTensorCore.as_padded_tensor", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.modeling.colbert.colbert_score_reduce", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.codecs.residual_embeddings_strided.ResidualEmbeddingsStrided.lookup_pids", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.modeling.colbert.colbert_score", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.codecs.residual_embeddings_strided.ResidualEmbeddingsStrided.lookup_codes", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.search.strided_tensor_core.StridedTensorCore.as_padded_tensor", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.search.strided_tensor_core.StridedTensorCore.as_padded_tensor", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.modeling.colbert.colbert_score_reduce", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.modeling.colbert.colbert_score_packed"], ["", "", "def", "score_pids", "(", "self", ",", "config", ",", "Q", ",", "pids", ",", "centroid_scores", ")", ":", "\n", "        ", "\"\"\"\n            Always supply a flat list or tensor for `pids`.\n\n            Supply sizes Q = (1 | num_docs, *, dim) and D = (num_docs, *, dim).\n            If Q.size(0) is 1, the matrix will be compared with all passages.\n            Otherwise, each query matrix will be compared against the *aligned* passage.\n        \"\"\"", "\n", "\n", "# TODO: Remove batching?", "\n", "batch_size", "=", "2", "**", "20", "\n", "\n", "if", "self", ".", "use_gpu", ":", "\n", "            ", "centroid_scores", "=", "centroid_scores", ".", "cuda", "(", ")", "\n", "\n", "", "idx", "=", "centroid_scores", ".", "max", "(", "-", "1", ")", ".", "values", ">=", "config", ".", "centroid_score_threshold", "\n", "\n", "if", "self", ".", "use_gpu", ":", "\n", "            ", "approx_scores", "=", "[", "]", "\n", "\n", "# Filter docs using pruned centroid scores", "\n", "for", "i", "in", "range", "(", "0", ",", "ceil", "(", "len", "(", "pids", ")", "/", "batch_size", ")", ")", ":", "\n", "                ", "pids_", "=", "pids", "[", "i", "*", "batch_size", ":", "(", "i", "+", "1", ")", "*", "batch_size", "]", "\n", "codes_packed", ",", "codes_lengths", "=", "self", ".", "embeddings_strided", ".", "lookup_codes", "(", "pids_", ")", "\n", "idx_", "=", "idx", "[", "codes_packed", ".", "long", "(", ")", "]", "\n", "pruned_codes_strided", "=", "StridedTensor", "(", "idx_", ",", "codes_lengths", ",", "use_gpu", "=", "self", ".", "use_gpu", ")", "\n", "pruned_codes_padded", ",", "pruned_codes_mask", "=", "pruned_codes_strided", ".", "as_padded_tensor", "(", ")", "\n", "pruned_codes_lengths", "=", "(", "pruned_codes_padded", "*", "pruned_codes_mask", ")", ".", "sum", "(", "dim", "=", "1", ")", "\n", "codes_packed_", "=", "codes_packed", "[", "idx_", "]", "\n", "approx_scores_", "=", "centroid_scores", "[", "codes_packed_", ".", "long", "(", ")", "]", "\n", "if", "approx_scores_", ".", "shape", "[", "0", "]", "==", "0", ":", "\n", "                    ", "approx_scores", ".", "append", "(", "torch", ".", "zeros", "(", "(", "len", "(", "pids_", ")", ",", ")", ",", "dtype", "=", "approx_scores_", ".", "dtype", ")", ")", "\n", "continue", "\n", "", "approx_scores_strided", "=", "StridedTensor", "(", "approx_scores_", ",", "pruned_codes_lengths", ",", "use_gpu", "=", "self", ".", "use_gpu", ")", "\n", "approx_scores_padded", ",", "approx_scores_mask", "=", "approx_scores_strided", ".", "as_padded_tensor", "(", ")", "\n", "approx_scores_", "=", "colbert_score_reduce", "(", "approx_scores_padded", ",", "approx_scores_mask", ",", "config", ")", "\n", "approx_scores", ".", "append", "(", "approx_scores_", ")", "\n", "", "approx_scores", "=", "torch", ".", "cat", "(", "approx_scores", ",", "dim", "=", "0", ")", "\n", "if", "config", ".", "ndocs", "<", "len", "(", "approx_scores", ")", ":", "\n", "                ", "pids", "=", "pids", "[", "torch", ".", "topk", "(", "approx_scores", ",", "k", "=", "config", ".", "ndocs", ")", ".", "indices", "]", "\n", "\n", "# Filter docs using full centroid scores", "\n", "", "codes_packed", ",", "codes_lengths", "=", "self", ".", "embeddings_strided", ".", "lookup_codes", "(", "pids", ")", "\n", "approx_scores", "=", "centroid_scores", "[", "codes_packed", ".", "long", "(", ")", "]", "\n", "approx_scores_strided", "=", "StridedTensor", "(", "approx_scores", ",", "codes_lengths", ",", "use_gpu", "=", "self", ".", "use_gpu", ")", "\n", "approx_scores_padded", ",", "approx_scores_mask", "=", "approx_scores_strided", ".", "as_padded_tensor", "(", ")", "\n", "approx_scores", "=", "colbert_score_reduce", "(", "approx_scores_padded", ",", "approx_scores_mask", ",", "config", ")", "\n", "if", "config", ".", "ndocs", "//", "4", "<", "len", "(", "approx_scores", ")", ":", "\n", "                ", "pids", "=", "pids", "[", "torch", ".", "topk", "(", "approx_scores", ",", "k", "=", "(", "config", ".", "ndocs", "//", "4", ")", ")", ".", "indices", "]", "\n", "", "", "else", ":", "\n", "            ", "pids", "=", "filter_pids_cpp", ".", "filter_pids_cpp", "(", "\n", "pids", ",", "centroid_scores", ",", "self", ".", "embeddings", ".", "codes", ",", "self", ".", "doclens", ",", "\n", "self", ".", "embeddings_strided", ".", "codes_strided", ".", "offsets", ",", "idx", ",", "config", ".", "ndocs", "\n", ")", "\n", "\n", "# Rank final list of docs using full approximate embeddings (including residuals)", "\n", "", "if", "self", ".", "use_gpu", ":", "\n", "            ", "D_packed", ",", "D_mask", "=", "self", ".", "lookup_pids", "(", "pids", ")", "\n", "", "else", ":", "\n", "            ", "D_packed", "=", "decompress_residuals_cpp", ".", "decompress_residuals_cpp", "(", "\n", "pids", ",", "\n", "self", ".", "doclens", ",", "\n", "self", ".", "embeddings_strided", ".", "codes_strided", ".", "offsets", ",", "\n", "self", ".", "codec", ".", "bucket_weights", ",", "\n", "self", ".", "codec", ".", "reversed_bit_map", ",", "\n", "self", ".", "codec", ".", "decompression_lookup_table", ",", "\n", "self", ".", "embeddings", ".", "residuals", ",", "\n", "self", ".", "embeddings", ".", "codes", ",", "\n", "self", ".", "codec", ".", "centroids", ",", "\n", "self", ".", "codec", ".", "dim", ",", "\n", "self", ".", "codec", ".", "nbits", "\n", ")", "\n", "D_packed", "=", "torch", ".", "nn", ".", "functional", ".", "normalize", "(", "D_packed", ".", "to", "(", "torch", ".", "float32", ")", ",", "p", "=", "2", ",", "dim", "=", "-", "1", ")", "\n", "D_mask", "=", "self", ".", "doclens", "[", "pids", ".", "long", "(", ")", "]", "\n", "\n", "", "if", "Q", ".", "size", "(", "0", ")", "==", "1", ":", "\n", "            ", "return", "colbert_score_packed", "(", "Q", ",", "D_packed", ",", "D_mask", ",", "config", ")", ",", "pids", "\n", "\n", "", "D_strided", "=", "StridedTensor", "(", "D_packed", ",", "D_mask", ",", "use_gpu", "=", "self", ".", "use_gpu", ")", "\n", "D_padded", ",", "D_lengths", "=", "D_strided", ".", "as_padded_tensor", "(", ")", "\n", "\n", "return", "colbert_score", "(", "Q", ",", "D_padded", ",", "D_lengths", ",", "config", ")", ",", "pids", "\n", "", "", ""]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.search.candidate_generation.CandidateGeneration.__init__": [[9, 11], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "use_gpu", "=", "True", ")", ":", "\n", "        ", "self", ".", "use_gpu", "=", "use_gpu", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.search.candidate_generation.CandidateGeneration.get_cells": [[12, 21], ["scores.topk().indices.permute.flatten().contiguous", "scores.topk().indices.permute.unique", "scores.argmax().permute", "scores.topk().indices.permute", "scores.topk().indices.permute.flatten", "scores.argmax", "scores.topk"], "methods", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.utils.flatten"], ["", "def", "get_cells", "(", "self", ",", "Q", ",", "ncells", ")", ":", "\n", "        ", "scores", "=", "(", "self", ".", "codec", ".", "centroids", "@", "Q", ".", "T", ")", "\n", "if", "ncells", "==", "1", ":", "\n", "            ", "cells", "=", "scores", ".", "argmax", "(", "dim", "=", "0", ",", "keepdim", "=", "True", ")", ".", "permute", "(", "1", ",", "0", ")", "\n", "", "else", ":", "\n", "            ", "cells", "=", "scores", ".", "topk", "(", "ncells", ",", "dim", "=", "0", ",", "sorted", "=", "False", ")", ".", "indices", ".", "permute", "(", "1", ",", "0", ")", "# (32, ncells)", "\n", "", "cells", "=", "cells", ".", "flatten", "(", ")", ".", "contiguous", "(", ")", "# (32 * ncells,)", "\n", "cells", "=", "cells", ".", "unique", "(", "sorted", "=", "False", ")", "\n", "return", "cells", ",", "scores", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.search.candidate_generation.CandidateGeneration.generate_candidate_eids": [[22, 30], ["candidate_generation.CandidateGeneration.get_cells", "candidate_generation.CandidateGeneration.ivf.lookup", "eids.cuda.cuda.long", "eids.cuda.cuda.cuda"], "methods", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.search.candidate_generation.CandidateGeneration.get_cells", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.search.strided_tensor.StridedTensor.lookup"], ["", "def", "generate_candidate_eids", "(", "self", ",", "Q", ",", "ncells", ")", ":", "\n", "        ", "cells", ",", "scores", "=", "self", ".", "get_cells", "(", "Q", ",", "ncells", ")", "\n", "\n", "eids", ",", "cell_lengths", "=", "self", ".", "ivf", ".", "lookup", "(", "cells", ")", "# eids = (packedlen,)  lengths = (32 * ncells,)", "\n", "eids", "=", "eids", ".", "long", "(", ")", "\n", "if", "self", ".", "use_gpu", ":", "\n", "            ", "eids", "=", "eids", ".", "cuda", "(", ")", "\n", "", "return", "eids", ",", "scores", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.search.candidate_generation.CandidateGeneration.generate_candidate_pids": [[31, 38], ["candidate_generation.CandidateGeneration.get_cells", "candidate_generation.CandidateGeneration.ivf.lookup", "pids.cuda.cuda.cuda"], "methods", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.search.candidate_generation.CandidateGeneration.get_cells", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.search.strided_tensor.StridedTensor.lookup"], ["", "def", "generate_candidate_pids", "(", "self", ",", "Q", ",", "ncells", ")", ":", "\n", "        ", "cells", ",", "scores", "=", "self", ".", "get_cells", "(", "Q", ",", "ncells", ")", "\n", "\n", "pids", ",", "cell_lengths", "=", "self", ".", "ivf", ".", "lookup", "(", "cells", ")", "\n", "if", "self", ".", "use_gpu", ":", "\n", "            ", "pids", "=", "pids", ".", "cuda", "(", ")", "\n", "", "return", "pids", ",", "scores", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.search.candidate_generation.CandidateGeneration.generate_candidate_scores": [[39, 44], ["candidate_generation.CandidateGeneration.lookup_eids", "E.cuda.cuda.cuda", "Q.unsqueeze", "E.cuda.cuda.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.codecs.residual_embeddings_strided.ResidualEmbeddingsStrided.lookup_eids"], ["", "def", "generate_candidate_scores", "(", "self", ",", "Q", ",", "eids", ")", ":", "\n", "        ", "E", "=", "self", ".", "lookup_eids", "(", "eids", ")", "\n", "if", "self", ".", "use_gpu", ":", "\n", "            ", "E", "=", "E", ".", "cuda", "(", ")", "\n", "", "return", "(", "Q", ".", "unsqueeze", "(", "0", ")", "@", "E", ".", "unsqueeze", "(", "2", ")", ")", ".", "squeeze", "(", "-", "1", ")", ".", "T", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.search.candidate_generation.CandidateGeneration.generate_candidates": [[45, 65], ["isinstance", "Q.cuda().half.cuda().half.squeeze", "candidate_generation.CandidateGeneration.generate_candidate_pids", "pids.sort", "torch.unique_consecutive", "Q.cuda().half.cuda().half.cuda().half", "Q.cuda().half.cuda().half.dim", "pids.cuda", "pids_counts.cuda", "Q.cuda().half.cuda().half.cuda"], "methods", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.search.candidate_generation.CandidateGeneration.generate_candidate_pids"], ["", "def", "generate_candidates", "(", "self", ",", "config", ",", "Q", ")", ":", "\n", "        ", "ncells", "=", "config", ".", "ncells", "\n", "\n", "assert", "isinstance", "(", "self", ".", "ivf", ",", "StridedTensor", ")", "\n", "\n", "Q", "=", "Q", ".", "squeeze", "(", "0", ")", "\n", "if", "self", ".", "use_gpu", ":", "\n", "            ", "Q", "=", "Q", ".", "cuda", "(", ")", ".", "half", "(", ")", "\n", "", "assert", "Q", ".", "dim", "(", ")", "==", "2", "\n", "\n", "pids", ",", "centroid_scores", "=", "self", ".", "generate_candidate_pids", "(", "Q", ",", "ncells", ")", "\n", "\n", "sorter", "=", "pids", ".", "sort", "(", ")", "\n", "pids", "=", "sorter", ".", "values", "\n", "\n", "pids", ",", "pids_counts", "=", "torch", ".", "unique_consecutive", "(", "pids", ",", "return_counts", "=", "True", ")", "\n", "if", "self", ".", "use_gpu", ":", "\n", "            ", "pids", ",", "pids_counts", "=", "pids", ".", "cuda", "(", ")", ",", "pids_counts", ".", "cuda", "(", ")", "\n", "\n", "", "return", "pids", ",", "centroid_scores", "\n", "", "", ""]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.search.index_loader.IndexLoader.__init__": [[14, 23], ["index_loader.IndexLoader._load_codec", "index_loader.IndexLoader._load_ivf", "index_loader.IndexLoader._load_doclens", "index_loader.IndexLoader._load_embeddings"], "methods", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.search.index_loader.IndexLoader._load_codec", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.search.index_loader.IndexLoader._load_ivf", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.search.index_loader.IndexLoader._load_doclens", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.search.index_loader.IndexLoader._load_embeddings"], ["    ", "def", "__init__", "(", "self", ",", "index_path", ",", "use_gpu", "=", "True", ")", ":", "\n", "        ", "self", ".", "index_path", "=", "index_path", "\n", "self", ".", "use_gpu", "=", "use_gpu", "\n", "\n", "self", ".", "_load_codec", "(", ")", "\n", "self", ".", "_load_ivf", "(", ")", "\n", "\n", "self", ".", "_load_doclens", "(", ")", "\n", "self", ".", "_load_embeddings", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.search.index_loader.IndexLoader._load_codec": [[24, 27], ["colbert.utils.utils.print_message", "colbert.indexing.codecs.residual.ResidualCodec.load"], "methods", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.utils.print_message", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.codecs.residual_embeddings.ResidualEmbeddings.load"], ["", "def", "_load_codec", "(", "self", ")", ":", "\n", "        ", "print_message", "(", "f\"#> Loading codec...\"", ")", "\n", "self", ".", "codec", "=", "ResidualCodec", ".", "load", "(", "self", ".", "index_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.search.index_loader.IndexLoader._load_ivf": [[28, 46], ["colbert.utils.utils.print_message", "os.path.exists", "os.path.join", "torch.load", "os.path.exists", "torch.load", "colbert.indexing.utils.optimize_ivf", "colbert.search.strided_tensor.StridedTensor.tolist", "colbert.search.strided_tensor.StridedTensor", "os.path.join", "os.path.join", "os.path.join", "colbert.utils.utils.lengths2offsets"], "methods", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.utils.print_message", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.codecs.residual_embeddings.ResidualEmbeddings.load", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.codecs.residual_embeddings.ResidualEmbeddings.load", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.indexing.utils.optimize_ivf", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.data.examples.Examples.tolist", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.utils.lengths2offsets"], ["", "def", "_load_ivf", "(", "self", ")", ":", "\n", "        ", "print_message", "(", "f\"#> Loading IVF...\"", ")", "\n", "\n", "if", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "self", ".", "index_path", ",", "\"ivf.pid.pt\"", ")", ")", ":", "\n", "            ", "ivf", ",", "ivf_lengths", "=", "torch", ".", "load", "(", "os", ".", "path", ".", "join", "(", "self", ".", "index_path", ",", "\"ivf.pid.pt\"", ")", ",", "map_location", "=", "'cpu'", ")", "\n", "", "else", ":", "\n", "            ", "assert", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "self", ".", "index_path", ",", "\"ivf.pt\"", ")", ")", "\n", "ivf", ",", "ivf_lengths", "=", "torch", ".", "load", "(", "os", ".", "path", ".", "join", "(", "self", ".", "index_path", ",", "\"ivf.pt\"", ")", ",", "map_location", "=", "'cpu'", ")", "\n", "ivf", ",", "ivf_lengths", "=", "optimize_ivf", "(", "ivf", ",", "ivf_lengths", ",", "self", ".", "index_path", ")", "\n", "\n", "", "if", "False", ":", "\n", "            ", "ivf", "=", "ivf", ".", "tolist", "(", ")", "\n", "ivf", "=", "[", "ivf", "[", "offset", ":", "endpos", "]", "for", "offset", ",", "endpos", "in", "lengths2offsets", "(", "ivf_lengths", ")", "]", "\n", "", "else", ":", "\n", "# ivf, ivf_lengths = ivf.cuda(), torch.LongTensor(ivf_lengths).cuda()  # FIXME: REMOVE THIS LINE!", "\n", "            ", "ivf", "=", "StridedTensor", "(", "ivf", ",", "ivf_lengths", ",", "use_gpu", "=", "self", ".", "use_gpu", ")", "\n", "\n", "", "self", ".", "ivf", "=", "ivf", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.search.index_loader.IndexLoader._load_doclens": [[47, 58], ["colbert.utils.utils.print_message", "tqdm.tqdm", "torch.tensor", "range", "open", "ujson.load", "doclens.extend", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.utils.print_message", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.infra.run.Run.open", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.codecs.residual_embeddings.ResidualEmbeddings.load"], ["", "def", "_load_doclens", "(", "self", ")", ":", "\n", "        ", "doclens", "=", "[", "]", "\n", "\n", "print_message", "(", "\"#> Loading doclens...\"", ")", "\n", "\n", "for", "chunk_idx", "in", "tqdm", ".", "tqdm", "(", "range", "(", "self", ".", "num_chunks", ")", ")", ":", "\n", "            ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "index_path", ",", "f'doclens.{chunk_idx}.json'", ")", ")", "as", "f", ":", "\n", "                ", "chunk_doclens", "=", "ujson", ".", "load", "(", "f", ")", "\n", "doclens", ".", "extend", "(", "chunk_doclens", ")", "\n", "\n", "", "", "self", ".", "doclens", "=", "torch", ".", "tensor", "(", "doclens", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.search.index_loader.IndexLoader._load_embeddings": [[59, 62], ["colbert.indexing.codecs.residual.ResidualCodec.Embeddings.load_chunks", "range"], "methods", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.codecs.residual_embeddings.ResidualEmbeddings.load_chunks"], ["", "def", "_load_embeddings", "(", "self", ")", ":", "\n", "        ", "self", ".", "embeddings", "=", "ResidualCodec", ".", "Embeddings", ".", "load_chunks", "(", "self", ".", "index_path", ",", "range", "(", "self", ".", "num_chunks", ")", ",", "\n", "self", ".", "num_embeddings", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.search.index_loader.IndexLoader.metadata": [[63, 72], ["open", "ujson.load", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.infra.run.Run.open", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.codecs.residual_embeddings.ResidualEmbeddings.load"], ["", "@", "property", "\n", "def", "metadata", "(", "self", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "self", ".", "_metadata", "\n", "", "except", ":", "\n", "            ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "index_path", ",", "'metadata.json'", ")", ")", "as", "f", ":", "\n", "                ", "self", ".", "_metadata", "=", "ujson", ".", "load", "(", "f", ")", "\n", "\n", "", "", "return", "self", ".", "_metadata", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.search.index_loader.IndexLoader.config": [[73, 76], ["NotImplementedError"], "methods", ["None"], ["", "@", "property", "\n", "def", "config", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "# load from dict at metadata['config']", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.search.index_loader.IndexLoader.num_chunks": [[77, 81], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "num_chunks", "(", "self", ")", ":", "\n", "# EVENTUALLY: If num_chunks doesn't exist (i.e., old index), fall back to counting doclens.*.json files.", "\n", "        ", "return", "self", ".", "metadata", "[", "'num_chunks'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.search.index_loader.IndexLoader.num_embeddings": [[82, 86], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "num_embeddings", "(", "self", ")", ":", "\n", "# EVENTUALLY: If num_embeddings doesn't exist (i.e., old index), sum the values in doclens.*.json files.", "\n", "        ", "return", "self", ".", "metadata", "[", "'num_embeddings'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.search.strided_tensor.StridedTensor.__init__": [[26, 28], ["strided_tensor_core.StridedTensorCore.__init__"], "methods", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.condenser.model.ElectraReader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "packed_tensor", ",", "lengths", ",", "dim", "=", "None", ",", "use_gpu", "=", "True", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "packed_tensor", ",", "lengths", ",", "dim", "=", "dim", ",", "use_gpu", "=", "use_gpu", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.search.strided_tensor.StridedTensor.pad_packed": [[29, 46], ["lengths.max().item", "torch.zeros", "torch.cat", "strided_tensor_core._create_mask", "torch.cat.cuda().contiguous", "lengths.cuda", "torch.cat.size", "torch.cumsum", "strided_tensor_core._create_view", "lengths.max", "torch.cat.cuda"], "methods", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.search.strided_tensor_core._create_mask", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.search.strided_tensor_core._create_view"], ["", "@", "classmethod", "\n", "def", "pad_packed", "(", "cls", ",", "packed_tensor", ",", "lengths", ")", ":", "\n", "        ", "assert", "False", ",", "\"This seems to be incorrect but I can't see why. Is it the inner_dims in the views?\"", "\n", "\n", "packed_tensor", ",", "lengths", "=", "packed_tensor", ".", "cuda", "(", ")", ".", "contiguous", "(", ")", ",", "lengths", ".", "cuda", "(", ")", "\n", "\n", "inner_dims", "=", "packed_tensor", ".", "size", "(", ")", "[", "1", ":", "]", "\n", "stride", "=", "lengths", ".", "max", "(", ")", ".", "item", "(", ")", "\n", "offsets", "=", "torch", ".", "cumsum", "(", "lengths", ",", "dim", "=", "0", ")", "-", "lengths", "[", "0", "]", "\n", "\n", "padding", "=", "torch", ".", "zeros", "(", "stride", ",", "*", "inner_dims", ",", "device", "=", "packed_tensor", ".", "device", ",", "dtype", "=", "packed_tensor", ".", "dtype", ")", "\n", "packed_tensor", "=", "torch", ".", "cat", "(", "(", "packed_tensor", ",", "padding", ")", ")", "\n", "\n", "view", "=", "_create_view", "(", "packed_tensor", ",", "stride", ",", "inner_dims", ")", "[", "offsets", "]", "\n", "mask", "=", "_create_mask", "(", "lengths", ",", "stride", ",", "like", "=", "view", ")", "\n", "\n", "return", "view", ",", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.search.strided_tensor.StridedTensor._prepare_lookup": [[47, 62], ["isinstance", "pids.cuda.cuda.long", "torch.tensor", "pids.cuda.cuda.dim", "pids.cuda.cuda.cuda", "lengths.cuda.cuda.cuda"], "methods", ["None"], ["", "def", "_prepare_lookup", "(", "self", ",", "pids", ")", ":", "\n", "        ", "if", "isinstance", "(", "pids", ",", "list", ")", ":", "\n", "            ", "pids", "=", "torch", ".", "tensor", "(", "pids", ")", "\n", "\n", "", "assert", "pids", ".", "dim", "(", ")", "==", "1", "\n", "\n", "if", "self", ".", "use_gpu", ":", "\n", "            ", "pids", "=", "pids", ".", "cuda", "(", ")", "\n", "", "pids", "=", "pids", ".", "long", "(", ")", "\n", "lengths", "=", "self", ".", "lengths", "[", "pids", "]", "\n", "if", "self", ".", "use_gpu", ":", "\n", "            ", "lengths", "=", "lengths", ".", "cuda", "(", ")", "\n", "", "offsets", "=", "self", ".", "offsets", "[", "pids", "]", "\n", "\n", "return", "pids", ",", "lengths", ",", "offsets", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.search.strided_tensor.StridedTensor.lookup": [[63, 86], ["strided_tensor.StridedTensor._prepare_lookup", "lengths.max().item", "next", "strided_tensor_core._create_mask", "segmented_lookup_cpp.segmented_lookup_cpp", "tensor.cuda.cuda.cuda", "lengths.max"], "methods", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.search.strided_tensor.StridedTensor._prepare_lookup", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.search.strided_tensor_core._create_mask"], ["", "def", "lookup", "(", "self", ",", "pids", ",", "output", "=", "'packed'", ")", ":", "\n", "        ", "pids", ",", "lengths", ",", "offsets", "=", "self", ".", "_prepare_lookup", "(", "pids", ")", "\n", "\n", "if", "self", ".", "use_gpu", ":", "\n", "            ", "stride", "=", "lengths", ".", "max", "(", ")", ".", "item", "(", ")", "\n", "stride", "=", "next", "(", "s", "for", "s", "in", "self", ".", "strides", "if", "stride", "<=", "s", ")", "\n", "\n", "tensor", "=", "self", ".", "views", "[", "stride", "]", "[", "offsets", "]", "\n", "if", "self", ".", "use_gpu", ":", "\n", "                ", "tensor", "=", "tensor", ".", "cuda", "(", ")", "\n", "\n", "", "mask", "=", "_create_mask", "(", "lengths", ",", "stride", ",", "use_gpu", "=", "self", ".", "use_gpu", ")", "\n", "\n", "if", "output", "==", "'padded'", ":", "\n", "                ", "return", "tensor", ",", "mask", "\n", "\n", "", "assert", "output", "==", "'packed'", "\n", "\n", "tensor", "=", "tensor", "[", "mask", "]", "\n", "", "else", ":", "\n", "            ", "tensor", "=", "segmented_lookup_cpp", ".", "segmented_lookup_cpp", "(", "self", ".", "tensor", ",", "pids", ",", "lengths", ",", "offsets", ")", "\n", "\n", "", "return", "tensor", ",", "lengths", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.search.strided_tensor.StridedTensor.lookup_staggered": [[87, 114], ["strided_tensor.StridedTensor.lookup_packed_unordered", "torch.empty", "torch.zeros", "zip", "permute_idxs.size", "permute_idxs.size", "tensor.size", "tensor.size", "mask.size"], "methods", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.search.strided_tensor.StridedTensor.lookup_packed_unordered"], ["", "def", "lookup_staggered", "(", "self", ",", "pids", ",", "output", "=", "'packed'", ")", ":", "\n", "        ", "permute_idxs", ",", "unordered_tensors", ",", "unordered_lengths", ",", "unordered_masks", "=", "self", ".", "lookup_packed_unordered", "(", "pids", ")", "\n", "\n", "output_tensor", "=", "torch", ".", "empty", "(", "permute_idxs", ".", "size", "(", "0", ")", ",", "self", ".", "max_stride", ",", "*", "self", ".", "inner_dims", ",", "\n", "dtype", "=", "unordered_tensors", "[", "0", "]", ".", "dtype", ",", "device", "=", "unordered_tensors", "[", "0", "]", ".", "device", ")", "\n", "\n", "output_mask", "=", "torch", ".", "zeros", "(", "permute_idxs", ".", "size", "(", "0", ")", ",", "self", ".", "max_stride", ",", "\n", "dtype", "=", "unordered_masks", "[", "0", "]", ".", "dtype", ",", "device", "=", "unordered_masks", "[", "0", "]", ".", "device", ")", "\n", "\n", "offset", "=", "0", "\n", "for", "tensor", ",", "mask", "in", "zip", "(", "unordered_tensors", ",", "unordered_masks", ")", ":", "\n", "            ", "endpos", "=", "offset", "+", "tensor", ".", "size", "(", "0", ")", "\n", "output_tensor", "[", "offset", ":", "endpos", ",", ":", "tensor", ".", "size", "(", "1", ")", "]", "=", "tensor", "\n", "output_mask", "[", "offset", ":", "endpos", ",", ":", "mask", ".", "size", "(", "1", ")", "]", "=", "mask", "\n", "offset", "=", "endpos", "\n", "\n", "", "output_mask", "=", "output_mask", "[", "permute_idxs", "]", "\n", "output_tensor", "=", "output_tensor", "[", "permute_idxs", "]", "\n", "\n", "if", "output", "==", "'padded'", ":", "\n", "            ", "return", "output_tensor", ",", "output_mask", "\n", "\n", "", "assert", "output", "==", "'packed'", "\n", "\n", "output_tensor", "=", "output_tensor", "[", "output_mask", "]", "\n", "\n", "return", "output_tensor", ",", "unordered_lengths", "[", "permute_idxs", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.search.strided_tensor.StridedTensor.lookup_packed_unordered": [[115, 149], ["strided_tensor.StridedTensor._prepare_lookup", "lengths.clone", "torch.arange", "lengths.clone.allclose", "torch.cat", "pids.size", "strided_tensor.StridedTensor._lookup_with_stride", "torch.cat.append", "all_tensors.append", "all_lengths.append", "all_masks.append", "torch.tensor", "torch.sort", "torch.cat", "is_shorter.sum"], "methods", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.search.strided_tensor.StridedTensor._prepare_lookup", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.search.strided_tensor.StridedTensor._lookup_with_stride"], ["", "def", "lookup_packed_unordered", "(", "self", ",", "pids", ")", ":", "\n", "        ", "pids", ",", "lengths", ",", "offsets", "=", "self", ".", "_prepare_lookup", "(", "pids", ")", "\n", "\n", "lengths2", "=", "lengths", ".", "clone", "(", ")", "\n", "sentinel", "=", "self", ".", "strides", "[", "-", "1", "]", "+", "1", "\n", "order", "=", "torch", ".", "arange", "(", "pids", ".", "size", "(", "0", ")", ",", "device", "=", "'cuda'", "if", "self", ".", "use_gpu", "else", "'cpu'", ")", "\n", "\n", "all_orders", "=", "[", "]", "\n", "all_tensors", "=", "[", "]", "\n", "all_lengths", "=", "[", "]", "\n", "all_masks", "=", "[", "]", "\n", "\n", "for", "stride", "in", "self", ".", "strides", ":", "\n", "            ", "is_shorter", "=", "lengths2", "<=", "stride", "\n", "\n", "if", "is_shorter", ".", "sum", "(", ")", "==", "0", ":", "\n", "                ", "continue", "\n", "\n", "", "order_", "=", "order", "[", "is_shorter", "]", "\n", "tensor_", ",", "lengths_", ",", "mask_", "=", "self", ".", "_lookup_with_stride", "(", "stride", ",", "lengths", "[", "is_shorter", "]", ",", "offsets", "[", "is_shorter", "]", ")", "\n", "\n", "all_orders", ".", "append", "(", "order_", ")", "\n", "all_tensors", ".", "append", "(", "tensor_", ")", "\n", "all_lengths", ".", "append", "(", "lengths_", ")", "\n", "all_masks", ".", "append", "(", "mask_", ")", "\n", "\n", "lengths2", "[", "is_shorter", "]", "=", "sentinel", "\n", "\n", "", "assert", "lengths2", ".", "allclose", "(", "torch", ".", "tensor", "(", "[", "sentinel", "]", ",", "device", "=", "'cuda'", "if", "self", ".", "use_gpu", "else", "'cpu'", ")", ")", "\n", "\n", "all_orders", "=", "torch", ".", "cat", "(", "all_orders", ")", "\n", "permute_idxs", "=", "torch", ".", "sort", "(", "all_orders", ")", ".", "indices", "\n", "\n", "return", "permute_idxs", ",", "all_tensors", ",", "torch", ".", "cat", "(", "all_lengths", ")", ",", "all_masks", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.search.strided_tensor.StridedTensor._lookup_with_stride": [[150, 159], ["strided_tensor_core._create_mask", "tensor.cuda.cuda.cuda"], "methods", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.search.strided_tensor_core._create_mask"], ["", "def", "_lookup_with_stride", "(", "self", ",", "stride", ",", "lengths", ",", "offsets", ")", ":", "\n", "        ", "tensor", "=", "self", ".", "views", "[", "stride", "]", "[", "offsets", "]", "\n", "if", "self", ".", "use_gpu", ":", "\n", "            ", "tensor", "=", "tensor", ".", "cuda", "(", ")", "\n", "\n", "", "mask", "=", "_create_mask", "(", "lengths", ",", "stride", ",", "use_gpu", "=", "self", ".", "use_gpu", ")", "\n", "# tensor = tensor[mask]", "\n", "\n", "return", "tensor", ",", "lengths", ",", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.search.strided_tensor_core.StridedTensorCore.__init__": [[19, 42], ["torch.zeros", "torch.cat", "strided_tensor_core.StridedTensorCore.tensor.size", "torch.is_tensor", "lengths.long", "torch.LongTensor", "strided_tensor_core._select_strides", "strided_tensor_core.StridedTensorCore.tensor.size", "torch.zeros", "torch.cat", "strided_tensor_core._create_view", "strided_tensor_core.StridedTensorCore.lengths.max().item", "torch.cumsum", "strided_tensor_core.StridedTensorCore.lengths.max"], "methods", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.search.strided_tensor_core._select_strides", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.search.strided_tensor_core._create_view"], ["    ", "def", "__init__", "(", "self", ",", "packed_tensor", ",", "lengths", ",", "dim", "=", "None", ",", "use_gpu", "=", "True", ")", ":", "\n", "        ", "self", ".", "dim", "=", "dim", "\n", "self", ".", "tensor", "=", "packed_tensor", "\n", "self", ".", "inner_dims", "=", "self", ".", "tensor", ".", "size", "(", ")", "[", "1", ":", "]", "\n", "self", ".", "use_gpu", "=", "use_gpu", "\n", "\n", "self", ".", "lengths", "=", "lengths", ".", "long", "(", ")", "if", "torch", ".", "is_tensor", "(", "lengths", ")", "else", "torch", ".", "LongTensor", "(", "lengths", ")", "\n", "\n", "self", ".", "strides", "=", "_select_strides", "(", "self", ".", "lengths", ",", "[", ".5", ",", ".75", ",", ".9", ",", ".95", "]", ")", "+", "[", "self", ".", "lengths", ".", "max", "(", ")", ".", "item", "(", ")", "]", "\n", "self", ".", "max_stride", "=", "self", ".", "strides", "[", "-", "1", "]", "\n", "\n", "zero", "=", "torch", ".", "zeros", "(", "1", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "self", ".", "lengths", ".", "device", ")", "\n", "self", ".", "offsets", "=", "torch", ".", "cat", "(", "(", "zero", ",", "torch", ".", "cumsum", "(", "self", ".", "lengths", ",", "dim", "=", "0", ")", ")", ")", "\n", "\n", "if", "self", ".", "offsets", "[", "-", "2", "]", "+", "self", ".", "max_stride", ">", "self", ".", "tensor", ".", "size", "(", "0", ")", ":", "\n", "# if self.tensor.size(0) > 10_000_000:", "\n", "#     print(\"#> WARNING: StridedTensor has to add padding, internally, to a large tensor.\")", "\n", "#     print(\"#> WARNING: Consider doing this padding in advance to save memory!\")", "\n", "\n", "            ", "padding", "=", "torch", ".", "zeros", "(", "self", ".", "max_stride", ",", "*", "self", ".", "inner_dims", ",", "dtype", "=", "self", ".", "tensor", ".", "dtype", ",", "device", "=", "self", ".", "tensor", ".", "device", ")", "\n", "self", ".", "tensor", "=", "torch", ".", "cat", "(", "(", "self", ".", "tensor", ",", "padding", ")", ")", "\n", "\n", "", "self", ".", "views", "=", "{", "stride", ":", "_create_view", "(", "self", ".", "tensor", ",", "stride", ",", "self", ".", "inner_dims", ")", "for", "stride", "in", "self", ".", "strides", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.search.strided_tensor_core.StridedTensorCore.from_packed_tensor": [[43, 46], ["cls"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "from_packed_tensor", "(", "cls", ",", "tensor", ",", "lengths", ")", ":", "\n", "        ", "return", "cls", "(", "tensor", ",", "lengths", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.search.strided_tensor_core.StridedTensorCore.from_padded_tensor": [[47, 50], ["None"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "from_padded_tensor", "(", "cls", ",", "tensor", ",", "mask", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.search.strided_tensor_core.StridedTensorCore.from_nested_list": [[51, 59], ["colbert.utils.utils.flatten", "torch.Tensor", "cls", "len"], "methods", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.utils.flatten"], ["", "@", "classmethod", "\n", "def", "from_nested_list", "(", "cls", ",", "lst", ")", ":", "\n", "        ", "flat_lst", "=", "flatten", "(", "lst", ")", "\n", "\n", "tensor", "=", "torch", ".", "Tensor", "(", "flat_lst", ")", "\n", "lengths", "=", "[", "len", "(", "sublst", ")", "for", "sublst", "in", "lst", "]", "\n", "\n", "return", "cls", "(", "tensor", ",", "lengths", ",", "dim", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.search.strided_tensor_core.StridedTensorCore.from_tensors_list": [[60, 66], ["NotImplementedError"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "from_tensors_list", "(", "cls", ",", "tensors", ")", ":", "\n", "# torch.cat(tensors)", "\n", "# lengths.", "\n", "# cls(tensor, lengths)", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.search.strided_tensor_core.StridedTensorCore.as_packed_tensor": [[67, 76], ["tuple", "return_vals.append"], "methods", ["None"], ["", "def", "as_packed_tensor", "(", "self", ",", "return_offsets", "=", "False", ")", ":", "\n", "        ", "unpadded_packed_tensor", "=", "self", ".", "tensor", "# [:self.offsets[-1]]", "\n", "\n", "return_vals", "=", "[", "unpadded_packed_tensor", ",", "self", ".", "lengths", "]", "\n", "\n", "if", "return_offsets", ":", "\n", "            ", "return_vals", ".", "append", "(", "self", ".", "offsets", ")", "\n", "\n", "", "return", "tuple", "(", "return_vals", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.search.strided_tensor_core.StridedTensorCore.as_padded_tensor": [[78, 90], ["strided_tensor_core._create_mask", "strided_tensor_core._create_view", "strided_tensor_core._create_mask", "strided_tensor_core._create_view", "strided_tensor_core.StridedTensorCore.lengths.cuda", "strided_tensor_core.StridedTensorCore.tensor.cuda"], "methods", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.search.strided_tensor_core._create_mask", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.search.strided_tensor_core._create_view", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.search.strided_tensor_core._create_mask", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.search.strided_tensor_core._create_view"], ["", "def", "as_padded_tensor", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "use_gpu", ":", "\n", "            ", "view", "=", "_create_view", "(", "self", ".", "tensor", ".", "cuda", "(", ")", ",", "self", ".", "max_stride", ",", "self", ".", "inner_dims", ")", "[", "self", ".", "offsets", "[", ":", "-", "1", "]", "]", "\n", "mask", "=", "_create_mask", "(", "self", ".", "lengths", ".", "cuda", "(", ")", ",", "self", ".", "max_stride", ",", "like", "=", "view", ",", "use_gpu", "=", "self", ".", "use_gpu", ")", "\n", "", "else", ":", "\n", "#import pdb", "\n", "#pdb.set_trace()", "\n", "            ", "view", "=", "_create_view", "(", "self", ".", "tensor", ",", "self", ".", "max_stride", ",", "self", ".", "inner_dims", ")", "\n", "view", "=", "view", "[", "self", ".", "offsets", "[", ":", "-", "1", "]", "]", "\n", "mask", "=", "_create_mask", "(", "self", ".", "lengths", ",", "self", ".", "max_stride", ",", "like", "=", "view", ",", "use_gpu", "=", "self", ".", "use_gpu", ")", "\n", "\n", "", "return", "view", ",", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.search.strided_tensor_core.StridedTensorCore.as_tensors_list": [[91, 93], ["NotImplementedError"], "methods", ["None"], ["", "def", "as_tensors_list", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.search.strided_tensor_core._select_strides": [[96, 103], ["torch.randint", "strided_tensor_core._get_quantiles", "lengths.size", "strided_tensor_core._get_quantiles", "lengths.size"], "function", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.search.strided_tensor_core._get_quantiles", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.search.strided_tensor_core._get_quantiles"], ["", "", "def", "_select_strides", "(", "lengths", ",", "quantiles", ")", ":", "\n", "    ", "if", "lengths", ".", "size", "(", "0", ")", "<", "5_000", ":", "\n", "        ", "return", "_get_quantiles", "(", "lengths", ",", "quantiles", ")", "\n", "\n", "", "sample", "=", "torch", ".", "randint", "(", "0", ",", "lengths", ".", "size", "(", "0", ")", ",", "size", "=", "(", "2_000", ",", ")", ")", "\n", "\n", "return", "_get_quantiles", "(", "lengths", "[", "sample", "]", ",", "quantiles", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.search.strided_tensor_core._get_quantiles": [[104, 106], ["torch.quantile().int().tolist", "torch.quantile().int", "torch.quantile", "lengths.float", "torch.tensor"], "function", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.data.examples.Examples.tolist"], ["", "def", "_get_quantiles", "(", "lengths", ",", "quantiles", ")", ":", "\n", "    ", "return", "torch", ".", "quantile", "(", "lengths", ".", "float", "(", ")", ",", "torch", ".", "tensor", "(", "quantiles", ",", "device", "=", "lengths", ".", "device", ")", ")", ".", "int", "(", ")", ".", "tolist", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.search.strided_tensor_core._create_view": [[108, 116], ["int", "torch.as_strided", "numpy.prod", "tensor.size", "len"], "function", ["None"], ["", "def", "_create_view", "(", "tensor", ",", "stride", ",", "inner_dims", ")", ":", "\n", "    ", "outdim", "=", "tensor", ".", "size", "(", "0", ")", "-", "stride", "+", "1", "\n", "size", "=", "(", "outdim", ",", "stride", ",", "*", "inner_dims", ")", "\n", "\n", "inner_dim_prod", "=", "int", "(", "np", ".", "prod", "(", "inner_dims", ")", ")", "\n", "multidim_stride", "=", "[", "inner_dim_prod", ",", "inner_dim_prod", "]", "+", "[", "1", "]", "*", "len", "(", "inner_dims", ")", "\n", "\n", "return", "torch", ".", "as_strided", "(", "tensor", ",", "size", "=", "size", ",", "stride", "=", "multidim_stride", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.search.strided_tensor_core._create_mask": [[118, 131], ["range", "torch.arange().cuda", "mask.unsqueeze.unsqueeze", "lengths.cuda().unsqueeze", "torch.arange", "mask.unsqueeze.unsqueeze", "lengths.unsqueeze", "mask.unsqueeze.unsqueeze", "like.dim", "mask.unsqueeze.dim", "torch.arange", "lengths.cuda"], "function", ["None"], ["", "def", "_create_mask", "(", "lengths", ",", "stride", ",", "like", "=", "None", ",", "use_gpu", "=", "True", ")", ":", "\n", "    ", "if", "use_gpu", ":", "\n", "        ", "mask", "=", "torch", ".", "arange", "(", "stride", ")", ".", "cuda", "(", ")", "+", "1", "\n", "mask", "=", "mask", ".", "unsqueeze", "(", "0", ")", "<=", "lengths", ".", "cuda", "(", ")", ".", "unsqueeze", "(", "-", "1", ")", "\n", "", "else", ":", "\n", "        ", "mask", "=", "torch", ".", "arange", "(", "stride", ")", "+", "1", "\n", "mask", "=", "mask", ".", "unsqueeze", "(", "0", ")", "<=", "lengths", ".", "unsqueeze", "(", "-", "1", ")", "\n", "\n", "", "if", "like", "is", "not", "None", ":", "\n", "        ", "for", "_", "in", "range", "(", "like", ".", "dim", "(", ")", "-", "mask", ".", "dim", "(", ")", ")", ":", "\n", "            ", "mask", "=", "mask", ".", "unsqueeze", "(", "-", "1", ")", "\n", "\n", "", "", "return", "mask", "\n", "", ""]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.modeling.base_colbert.BaseColBERT.__init__": [[19, 28], ["super().__init__", "colbert.infra.config.ColBERTConfig.from_existing", "colbert.modeling.hf_colbert.HF_ColBERT.from_pretrained", "transformers.AutoTokenizer.from_pretrained", "base_colbert.BaseColBERT.eval", "colbert.infra.config.ColBERTConfig.load_from_checkpoint"], "methods", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.condenser.model.ElectraReader.__init__", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.config.base_config.BaseConfig.from_existing", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.modeling.hf_colbert.HF_ColBERT.from_pretrained", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.modeling.hf_colbert.HF_ColBERT.from_pretrained", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.config.base_config.BaseConfig.load_from_checkpoint"], ["def", "__init__", "(", "self", ",", "name", ",", "colbert_config", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "name", "=", "name", "\n", "self", ".", "colbert_config", "=", "ColBERTConfig", ".", "from_existing", "(", "ColBERTConfig", ".", "load_from_checkpoint", "(", "name", ")", ",", "colbert_config", ")", "\n", "self", ".", "model", "=", "HF_ColBERT", ".", "from_pretrained", "(", "name", ",", "colbert_config", "=", "self", ".", "colbert_config", ")", "\n", "self", ".", "raw_tokenizer", "=", "AutoTokenizer", ".", "from_pretrained", "(", "self", ".", "model", ".", "base", ")", "\n", "\n", "self", ".", "eval", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.modeling.base_colbert.BaseColBERT.device": [[29, 32], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "device", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "model", ".", "device", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.modeling.base_colbert.BaseColBERT.bert": [[33, 36], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "bert", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "model", ".", "bert", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.modeling.base_colbert.BaseColBERT.linear": [[37, 40], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "linear", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "model", ".", "linear", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.modeling.base_colbert.BaseColBERT.score_scaler": [[41, 44], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "score_scaler", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "model", ".", "score_scaler", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.modeling.base_colbert.BaseColBERT.save": [[45, 52], ["base_colbert.BaseColBERT.model.save_pretrained", "base_colbert.BaseColBERT.raw_tokenizer.save_pretrained", "base_colbert.BaseColBERT.colbert_config.save_for_checkpoint", "path.endswith"], "methods", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.config.base_config.BaseConfig.save_for_checkpoint"], ["", "def", "save", "(", "self", ",", "path", ")", ":", "\n", "        ", "assert", "not", "path", ".", "endswith", "(", "'.dnn'", ")", ",", "f\"{path}: We reserve *.dnn names for the deprecated checkpoint format.\"", "\n", "\n", "self", ".", "model", ".", "save_pretrained", "(", "path", ")", "\n", "self", ".", "raw_tokenizer", ".", "save_pretrained", "(", "path", ")", "\n", "\n", "self", ".", "colbert_config", ".", "save_for_checkpoint", "(", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.modeling.colbert.ColBERT.__init__": [[29, 37], ["colbert.modeling.base_colbert.BaseColBERT.__init__", "colbert.ColBERT.raw_tokenizer.encode"], "methods", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.condenser.model.ElectraReader.__init__", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.baleen.hop_searcher.HopSearcher.encode"], ["def", "__init__", "(", "self", ",", "name", "=", "'bert-base-uncased'", ",", "colbert_config", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "name", ",", "colbert_config", ")", "\n", "self", ".", "use_gpu", "=", "colbert_config", ".", "total_visible_gpus", ">", "0", "\n", "\n", "if", "self", ".", "colbert_config", ".", "mask_punctuation", ":", "\n", "            ", "self", ".", "skiplist", "=", "{", "w", ":", "True", "\n", "for", "symbol", "in", "string", ".", "punctuation", "\n", "for", "w", "in", "[", "symbol", ",", "self", ".", "raw_tokenizer", ".", "encode", "(", "symbol", ",", "add_special_tokens", "=", "False", ")", "[", "0", "]", "]", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.modeling.colbert.ColBERT.forward": [[38, 51], ["colbert.ColBERT.query", "colbert.ColBERT.doc", "colbert.ColBERT.repeat_interleave().contiguous", "colbert.ColBERT.score", "colbert.ColBERT.compute_ib_loss", "colbert.ColBERT.repeat_interleave"], "methods", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.modeling.checkpoint.Checkpoint.query", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.modeling.checkpoint.Checkpoint.doc", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.modeling.checkpoint.Checkpoint.score", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.modeling.colbert.ColBERT.compute_ib_loss"], ["", "", "def", "forward", "(", "self", ",", "Q", ",", "D", ")", ":", "\n", "        ", "Q", "=", "self", ".", "query", "(", "*", "Q", ")", "\n", "D", ",", "D_mask", "=", "self", ".", "doc", "(", "*", "D", ",", "keep_dims", "=", "'return_mask'", ")", "\n", "\n", "# Repeat each query encoding for every corresponding document.", "\n", "Q_duplicated", "=", "Q", ".", "repeat_interleave", "(", "self", ".", "colbert_config", ".", "nway", ",", "dim", "=", "0", ")", ".", "contiguous", "(", ")", "\n", "scores", "=", "self", ".", "score", "(", "Q_duplicated", ",", "D", ",", "D_mask", ")", "\n", "\n", "if", "self", ".", "colbert_config", ".", "use_ib_negatives", ":", "\n", "            ", "ib_loss", "=", "self", ".", "compute_ib_loss", "(", "Q", ",", "D", ",", "D_mask", ")", "\n", "return", "scores", ",", "ib_loss", "\n", "\n", "", "return", "scores", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.modeling.colbert.ColBERT.compute_ib_loss": [[52, 69], ["colbert.colbert_score_reduce", "scores.view.view.view", "D_mask.repeat", "Q.size", "torch.arange", "torch.nn.CrossEntropyLoss", "Q.size", "list", "list", "range", "colbert.utils.utils.flatten", "Q.size", "D.unsqueeze", "Q.permute().unsqueeze", "range", "range", "Q.size", "Q.permute", "D.size", "D.size", "D.size", "D.size", "D.size"], "methods", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.modeling.colbert.colbert_score_reduce", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.utils.flatten"], ["", "def", "compute_ib_loss", "(", "self", ",", "Q", ",", "D", ",", "D_mask", ")", ":", "\n", "# TODO: Organize the code below! Quite messy.", "\n", "        ", "scores", "=", "(", "D", ".", "unsqueeze", "(", "0", ")", "@", "Q", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ".", "unsqueeze", "(", "1", ")", ")", ".", "flatten", "(", "0", ",", "1", ")", "# query-major unsqueeze", "\n", "\n", "scores", "=", "colbert_score_reduce", "(", "scores", ",", "D_mask", ".", "repeat", "(", "Q", ".", "size", "(", "0", ")", ",", "1", ",", "1", ")", ",", "self", ".", "colbert_config", ")", "\n", "\n", "nway", "=", "self", ".", "colbert_config", ".", "nway", "\n", "all_except_self_negatives", "=", "[", "list", "(", "range", "(", "qidx", "*", "D", ".", "size", "(", "0", ")", ",", "qidx", "*", "D", ".", "size", "(", "0", ")", "+", "nway", "*", "qidx", "+", "1", ")", ")", "+", "\n", "list", "(", "range", "(", "qidx", "*", "D", ".", "size", "(", "0", ")", "+", "nway", "*", "(", "qidx", "+", "1", ")", ",", "qidx", "*", "D", ".", "size", "(", "0", ")", "+", "D", ".", "size", "(", "0", ")", ")", ")", "\n", "for", "qidx", "in", "range", "(", "Q", ".", "size", "(", "0", ")", ")", "]", "\n", "\n", "scores", "=", "scores", "[", "flatten", "(", "all_except_self_negatives", ")", "]", "\n", "scores", "=", "scores", ".", "view", "(", "Q", ".", "size", "(", "0", ")", ",", "-", "1", ")", "# D.size(0) - self.colbert_config.nway + 1)", "\n", "\n", "labels", "=", "torch", ".", "arange", "(", "0", ",", "Q", ".", "size", "(", "0", ")", ",", "device", "=", "scores", ".", "device", ")", "*", "(", "self", ".", "colbert_config", ".", "nway", ")", "\n", "\n", "return", "torch", ".", "nn", ".", "CrossEntropyLoss", "(", ")", "(", "scores", ",", "labels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.modeling.colbert.ColBERT.query": [[70, 79], ["colbert.ColBERT.linear", "torch.tensor().unsqueeze().float", "torch.nn.functional.normalize", "input_ids.to", "attention_mask.to", "colbert.ColBERT.bert", "torch.tensor().unsqueeze", "torch.tensor", "colbert.ColBERT.mask"], "methods", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.modeling.base_colbert.BaseColBERT.linear", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.modeling.base_colbert.BaseColBERT.bert", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.modeling.colbert.ColBERT.mask"], ["", "def", "query", "(", "self", ",", "input_ids", ",", "attention_mask", ")", ":", "\n", "        ", "input_ids", ",", "attention_mask", "=", "input_ids", ".", "to", "(", "self", ".", "device", ")", ",", "attention_mask", ".", "to", "(", "self", ".", "device", ")", "\n", "Q", "=", "self", ".", "bert", "(", "input_ids", ",", "attention_mask", "=", "attention_mask", ")", "[", "0", "]", "\n", "Q", "=", "self", ".", "linear", "(", "Q", ")", "\n", "\n", "mask", "=", "torch", ".", "tensor", "(", "self", ".", "mask", "(", "input_ids", ",", "skiplist", "=", "[", "]", ")", ",", "device", "=", "self", ".", "device", ")", ".", "unsqueeze", "(", "2", ")", ".", "float", "(", ")", "\n", "Q", "=", "Q", "*", "mask", "\n", "\n", "return", "torch", ".", "nn", ".", "functional", ".", "normalize", "(", "Q", ",", "p", "=", "2", ",", "dim", "=", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.modeling.colbert.ColBERT.doc": [[80, 102], ["colbert.ColBERT.linear", "torch.tensor().unsqueeze().float", "torch.nn.functional.normalize", "input_ids.to", "attention_mask.to", "colbert.ColBERT.bert", "D.half.half.half", "torch.tensor().unsqueeze", "D.half.half.cpu", "torch.tensor().unsqueeze().float.bool().cpu().squeeze", "enumerate", "torch.tensor().unsqueeze().float.bool", "torch.tensor", "torch.tensor().unsqueeze().float.bool().cpu", "colbert.ColBERT.mask", "torch.tensor().unsqueeze().float.bool"], "methods", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.modeling.base_colbert.BaseColBERT.linear", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.modeling.base_colbert.BaseColBERT.bert", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.data.collection.Collection.enumerate", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.modeling.colbert.ColBERT.mask"], ["", "def", "doc", "(", "self", ",", "input_ids", ",", "attention_mask", ",", "keep_dims", "=", "True", ")", ":", "\n", "        ", "assert", "keep_dims", "in", "[", "True", ",", "False", ",", "'return_mask'", "]", "\n", "\n", "input_ids", ",", "attention_mask", "=", "input_ids", ".", "to", "(", "self", ".", "device", ")", ",", "attention_mask", ".", "to", "(", "self", ".", "device", ")", "\n", "D", "=", "self", ".", "bert", "(", "input_ids", ",", "attention_mask", "=", "attention_mask", ")", "[", "0", "]", "\n", "D", "=", "self", ".", "linear", "(", "D", ")", "\n", "\n", "mask", "=", "torch", ".", "tensor", "(", "self", ".", "mask", "(", "input_ids", ",", "skiplist", "=", "self", ".", "skiplist", ")", ",", "device", "=", "self", ".", "device", ")", ".", "unsqueeze", "(", "2", ")", ".", "float", "(", ")", "\n", "D", "=", "D", "*", "mask", "\n", "\n", "D", "=", "torch", ".", "nn", ".", "functional", ".", "normalize", "(", "D", ",", "p", "=", "2", ",", "dim", "=", "2", ")", "\n", "if", "self", ".", "use_gpu", ":", "\n", "            ", "D", "=", "D", ".", "half", "(", ")", "\n", "\n", "", "if", "keep_dims", "is", "False", ":", "\n", "            ", "D", ",", "mask", "=", "D", ".", "cpu", "(", ")", ",", "mask", ".", "bool", "(", ")", ".", "cpu", "(", ")", ".", "squeeze", "(", "-", "1", ")", "\n", "D", "=", "[", "d", "[", "mask", "[", "idx", "]", "]", "for", "idx", ",", "d", "in", "enumerate", "(", "D", ")", "]", "\n", "\n", "", "elif", "keep_dims", "==", "'return_mask'", ":", "\n", "            ", "return", "D", ",", "mask", ".", "bool", "(", ")", "\n", "\n", "", "return", "D", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.modeling.colbert.ColBERT.score": [[103, 111], ["colbert.colbert_score", "Q.unsqueeze", "D_padded.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.modeling.colbert.colbert_score"], ["", "def", "score", "(", "self", ",", "Q", ",", "D_padded", ",", "D_mask", ")", ":", "\n", "# assert self.colbert_config.similarity == 'cosine'", "\n", "\n", "        ", "if", "self", ".", "colbert_config", ".", "similarity", "==", "'l2'", ":", "\n", "            ", "assert", "self", ".", "colbert_config", ".", "interaction", "==", "'colbert'", "\n", "return", "(", "-", "1.0", "*", "(", "(", "Q", ".", "unsqueeze", "(", "2", ")", "-", "D_padded", ".", "unsqueeze", "(", "1", ")", ")", "**", "2", ")", ".", "sum", "(", "-", "1", ")", ")", ".", "max", "(", "-", "1", ")", ".", "values", ".", "sum", "(", "-", "1", ")", "\n", "\n", "", "return", "colbert_score", "(", "Q", ",", "D_padded", ",", "D_mask", ",", "config", "=", "self", ".", "colbert_config", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.modeling.colbert.ColBERT.mask": [[112, 115], ["input_ids.cpu().tolist", "input_ids.cpu"], "methods", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.data.examples.Examples.tolist"], ["", "def", "mask", "(", "self", ",", "input_ids", ",", "skiplist", ")", ":", "\n", "        ", "mask", "=", "[", "[", "(", "x", "not", "in", "skiplist", ")", "and", "(", "x", "!=", "0", ")", "for", "x", "in", "d", "]", "for", "d", "in", "input_ids", ".", "cpu", "(", ")", ".", "tolist", "(", ")", "]", "\n", "return", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.modeling.colbert.colbert_score_reduce": [[120, 143], ["scores.sum", "D_mask.view().bool", "scores_padded.max", "scores[].topk().values.sum", "scores[].topk().values.sum", "D_mask.view", "scores.size", "scores_padded.size", "scores_padded.size", "scores[].topk", "scores[].topk"], "function", ["None"], ["", "", "def", "colbert_score_reduce", "(", "scores_padded", ",", "D_mask", ",", "config", ":", "ColBERTConfig", ")", ":", "\n", "    ", "D_padding", "=", "~", "D_mask", ".", "view", "(", "scores_padded", ".", "size", "(", "0", ")", ",", "scores_padded", ".", "size", "(", "1", ")", ")", ".", "bool", "(", ")", "\n", "scores_padded", "[", "D_padding", "]", "=", "-", "9999", "\n", "scores", "=", "scores_padded", ".", "max", "(", "1", ")", ".", "values", "\n", "\n", "assert", "config", ".", "interaction", "in", "[", "'colbert'", ",", "'flipr'", "]", ",", "config", ".", "interaction", "\n", "\n", "if", "config", ".", "interaction", "==", "'flipr'", ":", "\n", "        ", "assert", "config", ".", "query_maxlen", "==", "64", ",", "(", "\"for now\"", ",", "config", ")", "\n", "# assert scores.size(1) == config.query_maxlen, scores.size()", "\n", "\n", "K1", "=", "config", ".", "query_maxlen", "//", "2", "\n", "K2", "=", "8", "\n", "\n", "A", "=", "scores", "[", ":", ",", ":", "config", ".", "query_maxlen", "]", ".", "topk", "(", "K1", ",", "dim", "=", "-", "1", ")", ".", "values", ".", "sum", "(", "-", "1", ")", "\n", "B", "=", "0", "\n", "\n", "if", "K2", "<=", "scores", ".", "size", "(", "1", ")", "-", "config", ".", "query_maxlen", ":", "\n", "            ", "B", "=", "scores", "[", ":", ",", "config", ".", "query_maxlen", ":", "]", ".", "topk", "(", "K2", ",", "dim", "=", "-", "1", ")", ".", "values", ".", "sum", "(", "1", ")", "\n", "\n", "", "return", "A", "+", "B", "\n", "\n", "", "return", "scores", ".", "sum", "(", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.modeling.colbert.colbert_score": [[146, 166], ["colbert.infra.config.config.ColBERTConfig", "Q.size", "D_padded.size", "colbert.colbert_score_reduce", "Q.dim", "D_padded.dim", "Q.size", "Q.to().permute", "Q.cuda", "D_padded.cuda", "D_mask.cuda", "D_padded.size", "Q.to"], "function", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.modeling.colbert.colbert_score_reduce"], ["", "def", "colbert_score", "(", "Q", ",", "D_padded", ",", "D_mask", ",", "config", "=", "ColBERTConfig", "(", ")", ")", ":", "\n", "    ", "\"\"\"\n        Supply sizes Q = (1 | num_docs, *, dim) and D = (num_docs, *, dim).\n        If Q.size(0) is 1, the matrix will be compared with all passages.\n        Otherwise, each query matrix will be compared against the *aligned* passage.\n\n        EVENTUALLY: Consider masking with -inf for the maxsim (or enforcing a ReLU).\n    \"\"\"", "\n", "\n", "use_gpu", "=", "config", ".", "total_visible_gpus", ">", "0", "\n", "if", "use_gpu", ":", "\n", "        ", "Q", ",", "D_padded", ",", "D_mask", "=", "Q", ".", "cuda", "(", ")", ",", "D_padded", ".", "cuda", "(", ")", ",", "D_mask", ".", "cuda", "(", ")", "\n", "\n", "", "assert", "Q", ".", "dim", "(", ")", "==", "3", ",", "Q", ".", "size", "(", ")", "\n", "assert", "D_padded", ".", "dim", "(", ")", "==", "3", ",", "D_padded", ".", "size", "(", ")", "\n", "assert", "Q", ".", "size", "(", "0", ")", "in", "[", "1", ",", "D_padded", ".", "size", "(", "0", ")", "]", "\n", "\n", "scores", "=", "D_padded", "@", "Q", ".", "to", "(", "dtype", "=", "D_padded", ".", "dtype", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "\n", "return", "colbert_score_reduce", "(", "scores", ",", "D_mask", ",", "config", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.modeling.colbert.colbert_score_packed": [[168, 191], ["colbert.infra.config.config.ColBERTConfig", "Q.squeeze.squeeze", "Q.squeeze.size", "D_packed.size", "Q.squeeze.dim", "D_packed.dim", "colbert.search.strided_tensor.StridedTensor().as_padded_tensor", "colbert.colbert_score_reduce", "segmented_maxsim_cpp.segmented_maxsim_cpp", "Q.squeeze.cuda", "D_packed.cuda", "D_lengths.cuda", "Q.squeeze.to", "colbert.search.strided_tensor.StridedTensor"], "function", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.search.strided_tensor_core.StridedTensorCore.as_padded_tensor", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.modeling.colbert.colbert_score_reduce"], ["", "def", "colbert_score_packed", "(", "Q", ",", "D_packed", ",", "D_lengths", ",", "config", "=", "ColBERTConfig", "(", ")", ")", ":", "\n", "    ", "\"\"\"\n        Works with a single query only.\n    \"\"\"", "\n", "\n", "use_gpu", "=", "config", ".", "total_visible_gpus", ">", "0", "\n", "\n", "if", "use_gpu", ":", "\n", "        ", "Q", ",", "D_packed", ",", "D_lengths", "=", "Q", ".", "cuda", "(", ")", ",", "D_packed", ".", "cuda", "(", ")", ",", "D_lengths", ".", "cuda", "(", ")", "\n", "\n", "", "Q", "=", "Q", ".", "squeeze", "(", "0", ")", "\n", "\n", "assert", "Q", ".", "dim", "(", ")", "==", "2", ",", "Q", ".", "size", "(", ")", "\n", "assert", "D_packed", ".", "dim", "(", ")", "==", "2", ",", "D_packed", ".", "size", "(", ")", "\n", "\n", "scores", "=", "D_packed", "@", "Q", ".", "to", "(", "dtype", "=", "D_packed", ".", "dtype", ")", ".", "T", "\n", "\n", "if", "use_gpu", "or", "config", ".", "interaction", "==", "\"flipr\"", ":", "\n", "        ", "scores_padded", ",", "scores_mask", "=", "StridedTensor", "(", "scores", ",", "D_lengths", ",", "use_gpu", "=", "use_gpu", ")", ".", "as_padded_tensor", "(", ")", "\n", "\n", "return", "colbert_score_reduce", "(", "scores_padded", ",", "scores_mask", ",", "config", ")", "\n", "", "else", ":", "\n", "        ", "return", "segmented_maxsim_cpp", ".", "segmented_maxsim_cpp", "(", "scores", ",", "D_lengths", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.modeling.checkpoint.Checkpoint.__init__": [[18, 26], ["colbert.modeling.colbert.ColBERT.__init__", "colbert.modeling.tokenization.QueryTokenizer", "colbert.modeling.tokenization.DocTokenizer", "colbert.utils.amp.MixedPrecisionManager"], "methods", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.condenser.model.ElectraReader.__init__"], ["def", "__init__", "(", "self", ",", "name", ",", "colbert_config", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "name", ",", "colbert_config", ")", "\n", "assert", "self", ".", "training", "is", "False", "\n", "\n", "self", ".", "query_tokenizer", "=", "QueryTokenizer", "(", "self", ".", "colbert_config", ")", "\n", "self", ".", "doc_tokenizer", "=", "DocTokenizer", "(", "self", ".", "colbert_config", ")", "\n", "\n", "self", ".", "amp_manager", "=", "MixedPrecisionManager", "(", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.modeling.checkpoint.Checkpoint.query": [[27, 32], ["torch.no_grad", "checkpoint.Checkpoint.amp_manager.context", "super().query", "super().query.cpu"], "methods", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.infra.run.Run.context", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.modeling.checkpoint.Checkpoint.query"], ["", "def", "query", "(", "self", ",", "*", "args", ",", "to_cpu", "=", "False", ",", "**", "kw_args", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "with", "self", ".", "amp_manager", ".", "context", "(", ")", ":", "\n", "                ", "Q", "=", "super", "(", ")", ".", "query", "(", "*", "args", ",", "**", "kw_args", ")", "\n", "return", "Q", ".", "cpu", "(", ")", "if", "to_cpu", "else", "Q", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.modeling.checkpoint.Checkpoint.doc": [[33, 42], ["torch.no_grad", "checkpoint.Checkpoint.amp_manager.context", "super().doc", "isinstance", "super().doc.cpu", "D[].cpu"], "methods", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.infra.run.Run.context", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.modeling.checkpoint.Checkpoint.doc"], ["", "", "", "def", "doc", "(", "self", ",", "*", "args", ",", "to_cpu", "=", "False", ",", "**", "kw_args", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "with", "self", ".", "amp_manager", ".", "context", "(", ")", ":", "\n", "                ", "D", "=", "super", "(", ")", ".", "doc", "(", "*", "args", ",", "**", "kw_args", ")", "\n", "\n", "if", "to_cpu", ":", "\n", "                    ", "return", "(", "D", "[", "0", "]", ".", "cpu", "(", ")", ",", "*", "D", "[", "1", ":", "]", ")", "if", "isinstance", "(", "D", ",", "tuple", ")", "else", "D", ".", "cpu", "(", ")", "\n", "\n", "", "return", "D", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.modeling.checkpoint.Checkpoint.queryFromText": [[43, 51], ["checkpoint.Checkpoint.query_tokenizer.tensorize", "checkpoint.Checkpoint.query", "checkpoint.Checkpoint.query_tokenizer.tensorize", "torch.cat", "checkpoint.Checkpoint.query"], "methods", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.condenser.tokenization.AnswerAwareTokenizer.tensorize", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.modeling.checkpoint.Checkpoint.query", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.condenser.tokenization.AnswerAwareTokenizer.tensorize", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.modeling.checkpoint.Checkpoint.query"], ["", "", "", "def", "queryFromText", "(", "self", ",", "queries", ",", "bsize", "=", "None", ",", "to_cpu", "=", "False", ",", "context", "=", "None", ")", ":", "\n", "        ", "if", "bsize", ":", "\n", "            ", "batches", "=", "self", ".", "query_tokenizer", ".", "tensorize", "(", "queries", ",", "context", "=", "context", ",", "bsize", "=", "bsize", ")", "\n", "batches", "=", "[", "self", ".", "query", "(", "input_ids", ",", "attention_mask", ",", "to_cpu", "=", "to_cpu", ")", "for", "input_ids", ",", "attention_mask", "in", "batches", "]", "\n", "return", "torch", ".", "cat", "(", "batches", ")", "\n", "\n", "", "input_ids", ",", "attention_mask", "=", "self", ".", "query_tokenizer", ".", "tensorize", "(", "queries", ",", "context", "=", "context", ")", "\n", "return", "self", ".", "query", "(", "input_ids", ",", "attention_mask", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.modeling.checkpoint.Checkpoint.docFromText": [[52, 95], ["checkpoint.Checkpoint.doc_tokenizer.tensorize", "checkpoint.Checkpoint.doc", "checkpoint.Checkpoint.doc_tokenizer.tensorize", "checkpoint.Checkpoint.doc", "checkpoint._stack_3D_tensors", "tqdm.tqdm.tqdm", "mask.squeeze().sum().tolist", "D[].cpu.view", "D[].cpu", "reverse_indices.tolist", "D[].cpu.append", "mask.append", "reverse_indices.tolist", "torch.cat", "torch.cat", "mask.squeeze().sum", "mask.squeeze", "mask.bool().flatten", "mask.bool"], "methods", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.condenser.tokenization.AnswerAwareTokenizer.tensorize", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.modeling.checkpoint.Checkpoint.doc", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.condenser.tokenization.AnswerAwareTokenizer.tensorize", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.modeling.checkpoint.Checkpoint.doc", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.modeling.checkpoint._stack_3D_tensors", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.data.examples.Examples.tolist", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.data.examples.Examples.tolist", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.data.examples.Examples.tolist", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.utils.flatten"], ["", "def", "docFromText", "(", "self", ",", "docs", ",", "bsize", "=", "None", ",", "keep_dims", "=", "True", ",", "to_cpu", "=", "False", ",", "showprogress", "=", "False", ",", "return_tokens", "=", "False", ")", ":", "\n", "        ", "assert", "keep_dims", "in", "[", "True", ",", "False", ",", "'flatten'", "]", "\n", "\n", "if", "bsize", ":", "\n", "            ", "text_batches", ",", "reverse_indices", "=", "self", ".", "doc_tokenizer", ".", "tensorize", "(", "docs", ",", "bsize", "=", "bsize", ")", "\n", "\n", "returned_text", "=", "[", "]", "\n", "if", "return_tokens", ":", "\n", "                ", "returned_text", "=", "[", "text", "for", "batch", "in", "text_batches", "for", "text", "in", "batch", "[", "0", "]", "]", "\n", "returned_text", "=", "[", "returned_text", "[", "idx", "]", "for", "idx", "in", "reverse_indices", ".", "tolist", "(", ")", "]", "\n", "returned_text", "=", "[", "returned_text", "]", "\n", "\n", "", "keep_dims_", "=", "'return_mask'", "if", "keep_dims", "==", "'flatten'", "else", "keep_dims", "\n", "batches", "=", "[", "self", ".", "doc", "(", "input_ids", ",", "attention_mask", ",", "keep_dims", "=", "keep_dims_", ",", "to_cpu", "=", "to_cpu", ")", "\n", "for", "input_ids", ",", "attention_mask", "in", "tqdm", "(", "text_batches", ",", "disable", "=", "not", "showprogress", ")", "]", "\n", "\n", "if", "keep_dims", "is", "True", ":", "\n", "                ", "D", "=", "_stack_3D_tensors", "(", "batches", ")", "\n", "return", "(", "D", "[", "reverse_indices", "]", ",", "*", "returned_text", ")", "\n", "\n", "", "elif", "keep_dims", "==", "'flatten'", ":", "\n", "                ", "D", ",", "mask", "=", "[", "]", ",", "[", "]", "\n", "\n", "for", "D_", ",", "mask_", "in", "batches", ":", "\n", "                    ", "D", ".", "append", "(", "D_", ")", "\n", "mask", ".", "append", "(", "mask_", ")", "\n", "\n", "", "D", ",", "mask", "=", "torch", ".", "cat", "(", "D", ")", "[", "reverse_indices", "]", ",", "torch", ".", "cat", "(", "mask", ")", "[", "reverse_indices", "]", "\n", "\n", "doclens", "=", "mask", ".", "squeeze", "(", "-", "1", ")", ".", "sum", "(", "-", "1", ")", ".", "tolist", "(", ")", "\n", "\n", "D", "=", "D", ".", "view", "(", "-", "1", ",", "self", ".", "colbert_config", ".", "dim", ")", "\n", "D", "=", "D", "[", "mask", ".", "bool", "(", ")", ".", "flatten", "(", ")", "]", ".", "cpu", "(", ")", "\n", "\n", "return", "(", "D", ",", "doclens", ",", "*", "returned_text", ")", "\n", "\n", "", "assert", "keep_dims", "is", "False", "\n", "\n", "D", "=", "[", "d", "for", "batch", "in", "batches", "for", "d", "in", "batch", "]", "\n", "return", "(", "[", "D", "[", "idx", "]", "for", "idx", "in", "reverse_indices", ".", "tolist", "(", ")", "]", ",", "*", "returned_text", ")", "\n", "\n", "", "input_ids", ",", "attention_mask", "=", "self", ".", "doc_tokenizer", ".", "tensorize", "(", "docs", ")", "\n", "return", "self", ".", "doc", "(", "input_ids", ",", "attention_mask", ",", "keep_dims", "=", "keep_dims", ",", "to_cpu", "=", "to_cpu", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.modeling.checkpoint.Checkpoint.lazy_rank": [[96, 101], ["checkpoint.Checkpoint.queryFromText", "checkpoint.Checkpoint.docFromText"], "methods", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.modeling.checkpoint.Checkpoint.queryFromText", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.modeling.checkpoint.Checkpoint.docFromText"], ["", "def", "lazy_rank", "(", "self", ",", "queries", ",", "docs", ")", ":", "\n", "        ", "Q", "=", "self", ".", "queryFromText", "(", "queries", ",", "bsize", "=", "128", ",", "to_cpu", "=", "True", ")", "\n", "D", "=", "self", ".", "docFromText", "(", "docs", ",", "bsize", "=", "128", ",", "to_cpu", "=", "True", ")", "\n", "\n", "assert", "False", ",", "\"Implement scoring\"", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.modeling.checkpoint.Checkpoint.score": [[102, 117], ["scores.max.max.max", "scores.max.max.values.sum().cpu", "torch.arange", "mask.unsqueeze", "lengths.to().unsqueeze", "mask.unsqueeze", "scores.max.max.values.sum", "D.size", "lengths.to"], "methods", ["None"], ["", "def", "score", "(", "self", ",", "Q", ",", "D", ",", "mask", "=", "None", ",", "lengths", "=", "None", ")", ":", "\n", "        ", "assert", "False", ",", "\"Call colbert_score\"", "\n", "# EVENTUALLY: Just call the colbert_score function!", "\n", "\n", "if", "lengths", "is", "not", "None", ":", "\n", "            ", "assert", "mask", "is", "None", ",", "\"don't supply both mask and lengths\"", "\n", "\n", "mask", "=", "torch", ".", "arange", "(", "D", ".", "size", "(", "1", ")", ",", "device", "=", "self", ".", "device", ")", "+", "1", "\n", "mask", "=", "mask", ".", "unsqueeze", "(", "0", ")", "<=", "lengths", ".", "to", "(", "self", ".", "device", ")", ".", "unsqueeze", "(", "-", "1", ")", "\n", "\n", "", "scores", "=", "(", "D", "@", "Q", ")", "\n", "scores", "=", "scores", "if", "mask", "is", "None", "else", "scores", "*", "mask", ".", "unsqueeze", "(", "-", "1", ")", "\n", "scores", "=", "scores", ".", "max", "(", "1", ")", "\n", "\n", "return", "scores", ".", "values", ".", "sum", "(", "-", "1", ")", ".", "cpu", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.modeling.checkpoint._stack_3D_tensors": [[119, 133], ["sum", "max", "groups[].size", "torch.zeros", "x.size", "x.size", "x.size", "x.size"], "function", ["None"], ["", "", "def", "_stack_3D_tensors", "(", "groups", ")", ":", "\n", "    ", "bsize", "=", "sum", "(", "[", "x", ".", "size", "(", "0", ")", "for", "x", "in", "groups", "]", ")", "\n", "maxlen", "=", "max", "(", "[", "x", ".", "size", "(", "1", ")", "for", "x", "in", "groups", "]", ")", "\n", "hdim", "=", "groups", "[", "0", "]", ".", "size", "(", "2", ")", "\n", "\n", "output", "=", "torch", ".", "zeros", "(", "bsize", ",", "maxlen", ",", "hdim", ",", "device", "=", "groups", "[", "0", "]", ".", "device", ",", "dtype", "=", "groups", "[", "0", "]", ".", "dtype", ")", "\n", "\n", "offset", "=", "0", "\n", "for", "x", "in", "groups", ":", "\n", "        ", "endpos", "=", "offset", "+", "x", ".", "size", "(", "0", ")", "\n", "output", "[", "offset", ":", "endpos", ",", ":", "x", ".", "size", "(", "1", ")", "]", "=", "x", "\n", "offset", "=", "endpos", "\n", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.modeling.hf_colbert.HF_ColBERT.__init__": [[15, 26], ["transformers.BertPreTrainedModel.__init__", "transformers.BertModel", "torch.Linear", "hf_colbert.HF_ColBERT.init_weights"], "methods", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.condenser.model.ElectraReader.__init__"], ["def", "__init__", "(", "self", ",", "config", ",", "colbert_config", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "config", ")", "\n", "\n", "self", ".", "dim", "=", "colbert_config", ".", "dim", "\n", "self", ".", "bert", "=", "BertModel", "(", "config", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "colbert_config", ".", "dim", ",", "bias", "=", "False", ")", "\n", "\n", "# if colbert_config.relu:", "\n", "#     self.score_scaler = nn.Linear(1, 1)", "\n", "\n", "self", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.modeling.hf_colbert.HF_ColBERT.from_pretrained": [[31, 46], ["name_or_path.endswith", "super().from_pretrained", "colbert.utils.utils.torch_load_dnn", "colbert.utils.utils.torch_load_dnn.get().get", "super().from_pretrained", "colbert.utils.utils.torch_load_dnn.get"], "methods", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.modeling.hf_colbert.HF_ColBERT.from_pretrained", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.utils.torch_load_dnn", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.modeling.hf_colbert.HF_ColBERT.from_pretrained"], ["", "@", "classmethod", "\n", "def", "from_pretrained", "(", "cls", ",", "name_or_path", ",", "colbert_config", ")", ":", "\n", "        ", "if", "name_or_path", ".", "endswith", "(", "'.dnn'", ")", ":", "\n", "            ", "dnn", "=", "torch_load_dnn", "(", "name_or_path", ")", "\n", "base", "=", "dnn", ".", "get", "(", "'arguments'", ",", "{", "}", ")", ".", "get", "(", "'model'", ",", "'bert-base-uncased'", ")", "\n", "\n", "obj", "=", "super", "(", ")", ".", "from_pretrained", "(", "base", ",", "state_dict", "=", "dnn", "[", "'model_state_dict'", "]", ",", "colbert_config", "=", "colbert_config", ")", "\n", "obj", ".", "base", "=", "base", "\n", "\n", "return", "obj", "\n", "\n", "", "obj", "=", "super", "(", ")", ".", "from_pretrained", "(", "name_or_path", ",", "colbert_config", "=", "colbert_config", ")", "\n", "obj", ".", "base", "=", "name_or_path", "\n", "\n", "return", "obj", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.modeling.hf_colbert.HF_ColBERT.raw_tokenizer_from_pretrained": [[47, 62], ["name_or_path.endswith", "transformers.AutoTokenizer.from_pretrained", "colbert.utils.utils.torch_load_dnn", "colbert.utils.utils.torch_load_dnn.get().get", "transformers.AutoTokenizer.from_pretrained", "colbert.utils.utils.torch_load_dnn.get"], "methods", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.modeling.hf_colbert.HF_ColBERT.from_pretrained", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.utils.torch_load_dnn", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.modeling.hf_colbert.HF_ColBERT.from_pretrained"], ["", "@", "staticmethod", "\n", "def", "raw_tokenizer_from_pretrained", "(", "name_or_path", ")", ":", "\n", "        ", "if", "name_or_path", ".", "endswith", "(", "'.dnn'", ")", ":", "\n", "            ", "dnn", "=", "torch_load_dnn", "(", "name_or_path", ")", "\n", "base", "=", "dnn", ".", "get", "(", "'arguments'", ",", "{", "}", ")", ".", "get", "(", "'model'", ",", "'bert-base-uncased'", ")", "\n", "\n", "obj", "=", "AutoTokenizer", ".", "from_pretrained", "(", "base", ")", "\n", "obj", ".", "base", "=", "base", "\n", "\n", "return", "obj", "\n", "\n", "", "obj", "=", "AutoTokenizer", ".", "from_pretrained", "(", "name_or_path", ")", "\n", "obj", ".", "base", "=", "name_or_path", "\n", "\n", "return", "obj", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.tokenization.query_tokenization.QueryTokenizer.__init__": [[10, 24], ["colbert.modeling.hf_colbert.HF_ColBERT.raw_tokenizer_from_pretrained", "query_tokenization.QueryTokenizer.tok.convert_tokens_to_ids"], "methods", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.modeling.hf_colbert.HF_ColBERT.raw_tokenizer_from_pretrained"], ["    ", "def", "__init__", "(", "self", ",", "config", ":", "ColBERTConfig", ")", ":", "\n", "        ", "self", ".", "tok", "=", "HF_ColBERT", ".", "raw_tokenizer_from_pretrained", "(", "config", ".", "checkpoint", ")", "\n", "\n", "self", ".", "config", "=", "config", "\n", "self", ".", "query_maxlen", "=", "config", ".", "query_maxlen", "\n", "self", ".", "background_maxlen", "=", "512", "-", "self", ".", "query_maxlen", "+", "1", "# FIXME: Make this configurable", "\n", "\n", "self", ".", "Q_marker_token", ",", "self", ".", "Q_marker_token_id", "=", "'[Q]'", ",", "self", ".", "tok", ".", "convert_tokens_to_ids", "(", "'[unused0]'", ")", "\n", "self", ".", "cls_token", ",", "self", ".", "cls_token_id", "=", "self", ".", "tok", ".", "cls_token", ",", "self", ".", "tok", ".", "cls_token_id", "\n", "self", ".", "sep_token", ",", "self", ".", "sep_token_id", "=", "self", ".", "tok", ".", "sep_token", ",", "self", ".", "tok", ".", "sep_token_id", "\n", "self", ".", "mask_token", ",", "self", ".", "mask_token_id", "=", "self", ".", "tok", ".", "mask_token", ",", "self", ".", "tok", ".", "mask_token_id", "\n", "\n", "assert", "self", ".", "Q_marker_token_id", "==", "1", "and", "self", ".", "mask_token_id", "==", "103", "\n", "self", ".", "used", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.tokenization.query_tokenization.QueryTokenizer.tokenize": [[25, 37], ["type", "type", "query_tokenization.QueryTokenizer.tok.tokenize", "len"], "methods", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.tokenization.doc_tokenization.DocTokenizer.tokenize"], ["", "def", "tokenize", "(", "self", ",", "batch_text", ",", "add_special_tokens", "=", "False", ")", ":", "\n", "        ", "assert", "type", "(", "batch_text", ")", "in", "[", "list", ",", "tuple", "]", ",", "(", "type", "(", "batch_text", ")", ")", "\n", "\n", "tokens", "=", "[", "self", ".", "tok", ".", "tokenize", "(", "x", ",", "add_special_tokens", "=", "False", ")", "for", "x", "in", "batch_text", "]", "\n", "\n", "if", "not", "add_special_tokens", ":", "\n", "            ", "return", "tokens", "\n", "\n", "", "prefix", ",", "suffix", "=", "[", "self", ".", "cls_token", ",", "self", ".", "Q_marker_token", "]", ",", "[", "self", ".", "sep_token", "]", "\n", "tokens", "=", "[", "prefix", "+", "lst", "+", "suffix", "+", "[", "self", ".", "mask_token", "]", "*", "(", "self", ".", "query_maxlen", "-", "(", "len", "(", "lst", ")", "+", "3", ")", ")", "for", "lst", "in", "tokens", "]", "\n", "\n", "return", "tokens", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.tokenization.query_tokenization.QueryTokenizer.encode": [[38, 50], ["type", "type", "query_tokenization.QueryTokenizer.tok", "len"], "methods", ["None"], ["", "def", "encode", "(", "self", ",", "batch_text", ",", "add_special_tokens", "=", "False", ")", ":", "\n", "        ", "assert", "type", "(", "batch_text", ")", "in", "[", "list", ",", "tuple", "]", ",", "(", "type", "(", "batch_text", ")", ")", "\n", "\n", "ids", "=", "self", ".", "tok", "(", "batch_text", ",", "add_special_tokens", "=", "False", ")", "[", "'input_ids'", "]", "\n", "\n", "if", "not", "add_special_tokens", ":", "\n", "            ", "return", "ids", "\n", "\n", "", "prefix", ",", "suffix", "=", "[", "self", ".", "cls_token_id", ",", "self", ".", "Q_marker_token_id", "]", ",", "[", "self", ".", "sep_token_id", "]", "\n", "ids", "=", "[", "prefix", "+", "lst", "+", "suffix", "+", "[", "self", ".", "mask_token_id", "]", "*", "(", "self", ".", "query_maxlen", "-", "(", "len", "(", "lst", ")", "+", "3", ")", ")", "for", "lst", "in", "ids", "]", "\n", "\n", "return", "ids", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.tokenization.query_tokenization.QueryTokenizer.tensorize": [[51, 98], ["type", "query_tokenization.QueryTokenizer.tok", "type", "query_tokenization.QueryTokenizer.tok", "torch.cat", "torch.cat", "colbert.modeling.tokenization.utils._split_into_batches", "print", "print", "print", "print", "print", "print", "len", "len", "len", "len", "torch.cat.sum().item", "torch.cat.size", "torch.cat.size", "torch.cat.sum", "ids[].size", "mask[].size"], "methods", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.tokenization.utils._split_into_batches", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.infra.run.Run.print", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.infra.run.Run.print", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.infra.run.Run.print", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.infra.run.Run.print", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.infra.run.Run.print", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.infra.run.Run.print"], ["", "def", "tensorize", "(", "self", ",", "batch_text", ",", "bsize", "=", "None", ",", "context", "=", "None", ")", ":", "\n", "        ", "assert", "type", "(", "batch_text", ")", "in", "[", "list", ",", "tuple", "]", ",", "(", "type", "(", "batch_text", ")", ")", "\n", "\n", "# add placehold for the [Q] marker", "\n", "batch_text", "=", "[", "'. '", "+", "x", "for", "x", "in", "batch_text", "]", "\n", "\n", "obj", "=", "self", ".", "tok", "(", "batch_text", ",", "padding", "=", "'max_length'", ",", "truncation", "=", "True", ",", "\n", "return_tensors", "=", "'pt'", ",", "max_length", "=", "self", ".", "query_maxlen", ")", "\n", "\n", "ids", ",", "mask", "=", "obj", "[", "'input_ids'", "]", ",", "obj", "[", "'attention_mask'", "]", "\n", "\n", "# postprocess for the [Q] marker and the [MASK] augmentation", "\n", "ids", "[", ":", ",", "1", "]", "=", "self", ".", "Q_marker_token_id", "\n", "ids", "[", "ids", "==", "0", "]", "=", "self", ".", "mask_token_id", "\n", "\n", "if", "context", "is", "not", "None", ":", "\n", "            ", "assert", "len", "(", "context", ")", "==", "len", "(", "batch_text", ")", ",", "(", "len", "(", "context", ")", ",", "len", "(", "batch_text", ")", ")", "\n", "\n", "obj_2", "=", "self", ".", "tok", "(", "context", ",", "padding", "=", "'longest'", ",", "truncation", "=", "True", ",", "\n", "return_tensors", "=", "'pt'", ",", "max_length", "=", "self", ".", "background_maxlen", ")", "\n", "\n", "ids_2", ",", "mask_2", "=", "obj_2", "[", "'input_ids'", "]", "[", ":", ",", "1", ":", "]", ",", "obj_2", "[", "'attention_mask'", "]", "[", ":", ",", "1", ":", "]", "# Skip the first [SEP]", "\n", "\n", "ids", "=", "torch", ".", "cat", "(", "(", "ids", ",", "ids_2", ")", ",", "dim", "=", "-", "1", ")", "\n", "mask", "=", "torch", ".", "cat", "(", "(", "mask", ",", "mask_2", ")", ",", "dim", "=", "-", "1", ")", "\n", "\n", "", "if", "self", ".", "config", ".", "attend_to_mask_tokens", ":", "\n", "            ", "mask", "[", "ids", "==", "self", ".", "mask_token_id", "]", "=", "1", "\n", "assert", "mask", ".", "sum", "(", ")", ".", "item", "(", ")", "==", "mask", ".", "size", "(", "0", ")", "*", "mask", ".", "size", "(", "1", ")", ",", "mask", "\n", "\n", "", "if", "bsize", ":", "\n", "            ", "batches", "=", "_split_into_batches", "(", "ids", ",", "mask", ",", "bsize", ")", "\n", "return", "batches", "\n", "\n", "", "if", "self", ".", "used", "is", "False", ":", "\n", "            ", "self", ".", "used", "=", "True", "\n", "\n", "firstbg", "=", "(", "context", "is", "None", ")", "or", "context", "[", "0", "]", "\n", "\n", "print", "(", ")", "\n", "print", "(", "\"#> QueryTokenizer.tensorize(batch_text[0], batch_background[0], bsize) ==\"", ")", "\n", "print", "(", "f\"#> Input: {batch_text[0]}, \\t\\t {firstbg}, \\t\\t {bsize}\"", ")", "\n", "print", "(", "f\"#> Output IDs: {ids[0].size()}, {ids[0]}\"", ")", "\n", "print", "(", "f\"#> Output Mask: {mask[0].size()}, {mask[0]}\"", ")", "\n", "print", "(", ")", "\n", "\n", "", "return", "ids", ",", "mask", "\n", "", "", ""]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.tokenization.doc_tokenization.DocTokenizer.__init__": [[11, 22], ["colbert.modeling.hf_colbert.HF_ColBERT.raw_tokenizer_from_pretrained", "doc_tokenization.DocTokenizer.tok.convert_tokens_to_ids"], "methods", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.modeling.hf_colbert.HF_ColBERT.raw_tokenizer_from_pretrained"], ["    ", "def", "__init__", "(", "self", ",", "config", ":", "ColBERTConfig", ")", ":", "\n", "        ", "self", ".", "tok", "=", "HF_ColBERT", ".", "raw_tokenizer_from_pretrained", "(", "config", ".", "checkpoint", ")", "\n", "\n", "self", ".", "config", "=", "config", "\n", "self", ".", "doc_maxlen", "=", "config", ".", "doc_maxlen", "\n", "\n", "self", ".", "D_marker_token", ",", "self", ".", "D_marker_token_id", "=", "'[D]'", ",", "self", ".", "tok", ".", "convert_tokens_to_ids", "(", "'[unused1]'", ")", "\n", "self", ".", "cls_token", ",", "self", ".", "cls_token_id", "=", "self", ".", "tok", ".", "cls_token", ",", "self", ".", "tok", ".", "cls_token_id", "\n", "self", ".", "sep_token", ",", "self", ".", "sep_token_id", "=", "self", ".", "tok", ".", "sep_token", ",", "self", ".", "tok", ".", "sep_token_id", "\n", "\n", "assert", "self", ".", "D_marker_token_id", "==", "2", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.tokenization.doc_tokenization.DocTokenizer.tokenize": [[23, 35], ["type", "type", "doc_tokenization.DocTokenizer.tok.tokenize"], "methods", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.tokenization.doc_tokenization.DocTokenizer.tokenize"], ["", "def", "tokenize", "(", "self", ",", "batch_text", ",", "add_special_tokens", "=", "False", ")", ":", "\n", "        ", "assert", "type", "(", "batch_text", ")", "in", "[", "list", ",", "tuple", "]", ",", "(", "type", "(", "batch_text", ")", ")", "\n", "\n", "tokens", "=", "[", "self", ".", "tok", ".", "tokenize", "(", "x", ",", "add_special_tokens", "=", "False", ")", "for", "x", "in", "batch_text", "]", "\n", "\n", "if", "not", "add_special_tokens", ":", "\n", "            ", "return", "tokens", "\n", "\n", "", "prefix", ",", "suffix", "=", "[", "self", ".", "cls_token", ",", "self", ".", "D_marker_token", "]", ",", "[", "self", ".", "sep_token", "]", "\n", "tokens", "=", "[", "prefix", "+", "lst", "+", "suffix", "for", "lst", "in", "tokens", "]", "\n", "\n", "return", "tokens", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.tokenization.doc_tokenization.DocTokenizer.encode": [[36, 48], ["type", "type", "doc_tokenization.DocTokenizer.tok"], "methods", ["None"], ["", "def", "encode", "(", "self", ",", "batch_text", ",", "add_special_tokens", "=", "False", ")", ":", "\n", "        ", "assert", "type", "(", "batch_text", ")", "in", "[", "list", ",", "tuple", "]", ",", "(", "type", "(", "batch_text", ")", ")", "\n", "\n", "ids", "=", "self", ".", "tok", "(", "batch_text", ",", "add_special_tokens", "=", "False", ")", "[", "'input_ids'", "]", "\n", "\n", "if", "not", "add_special_tokens", ":", "\n", "            ", "return", "ids", "\n", "\n", "", "prefix", ",", "suffix", "=", "[", "self", ".", "cls_token_id", ",", "self", ".", "D_marker_token_id", "]", ",", "[", "self", ".", "sep_token_id", "]", "\n", "ids", "=", "[", "prefix", "+", "lst", "+", "suffix", "for", "lst", "in", "ids", "]", "\n", "\n", "return", "ids", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.tokenization.doc_tokenization.DocTokenizer.tensorize": [[49, 69], ["type", "doc_tokenization.DocTokenizer.tok", "type", "colbert.modeling.tokenization.utils._sort_by_length", "colbert.modeling.tokenization.utils._split_into_batches"], "methods", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.tokenization.utils._sort_by_length", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.tokenization.utils._split_into_batches"], ["", "def", "tensorize", "(", "self", ",", "batch_text", ",", "bsize", "=", "None", ")", ":", "\n", "        ", "assert", "type", "(", "batch_text", ")", "in", "[", "list", ",", "tuple", "]", ",", "(", "type", "(", "batch_text", ")", ")", "\n", "\n", "# add placehold for the [D] marker", "\n", "batch_text", "=", "[", "'. '", "+", "x", "for", "x", "in", "batch_text", "]", "\n", "\n", "obj", "=", "self", ".", "tok", "(", "batch_text", ",", "padding", "=", "'longest'", ",", "truncation", "=", "'longest_first'", ",", "\n", "return_tensors", "=", "'pt'", ",", "max_length", "=", "self", ".", "doc_maxlen", ")", "\n", "\n", "ids", ",", "mask", "=", "obj", "[", "'input_ids'", "]", ",", "obj", "[", "'attention_mask'", "]", "\n", "\n", "# postprocess for the [D] marker", "\n", "ids", "[", ":", ",", "1", "]", "=", "self", ".", "D_marker_token_id", "\n", "\n", "if", "bsize", ":", "\n", "            ", "ids", ",", "mask", ",", "reverse_indices", "=", "_sort_by_length", "(", "ids", ",", "mask", ",", "bsize", ")", "\n", "batches", "=", "_split_into_batches", "(", "ids", ",", "mask", ",", "bsize", ")", "\n", "return", "batches", ",", "reverse_indices", "\n", "\n", "", "return", "ids", ",", "mask", "\n", "", "", ""]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.tokenization.utils.tensorize_triples": [[4, 38], ["query_tokenizer.tensorize", "doc_tokenizer.tensorize", "utils._split_into_batches", "utils._split_into_batches", "len", "zip", "utils._split_into_batches2", "batches.append"], "function", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.condenser.tokenization.AnswerAwareTokenizer.tensorize", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.condenser.tokenization.AnswerAwareTokenizer.tensorize", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.tokenization.utils._split_into_batches", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.tokenization.utils._split_into_batches", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.tokenization.utils._split_into_batches2"], ["import", "datetime", "\n", "import", "itertools", "\n", "\n", "from", "multiprocessing", "import", "Pool", "\n", "from", "collections", "import", "OrderedDict", ",", "defaultdict", "\n", "\n", "\n", "def", "print_message", "(", "*", "s", ",", "condition", "=", "True", ",", "pad", "=", "False", ")", ":", "\n", "    ", "s", "=", "' '", ".", "join", "(", "[", "str", "(", "x", ")", "for", "x", "in", "s", "]", ")", "\n", "msg", "=", "\"[{}] {}\"", ".", "format", "(", "datetime", ".", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "\"%b %d, %H:%M:%S\"", ")", ",", "s", ")", "\n", "\n", "if", "condition", ":", "\n", "        ", "msg", "=", "msg", "if", "not", "pad", "else", "f'\\n{msg}\\n'", "\n", "print", "(", "msg", ",", "flush", "=", "True", ")", "\n", "\n", "\n", "", "return", "msg", "\n", "\n", "\n", "", "def", "timestamp", "(", "daydir", "=", "False", ")", ":", "\n", "    ", "format_str", "=", "f\"%Y-%m{'/' if daydir else '-'}%d{'/' if daydir else '_'}%H.%M.%S\"", "\n", "result", "=", "datetime", ".", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "format_str", ")", "\n", "return", "result", "\n", "\n", "\n", "", "def", "file_tqdm", "(", "file", ")", ":", "\n", "    ", "print", "(", "f\"#> Reading {file.name}\"", ")", "\n", "\n", "with", "tqdm", ".", "tqdm", "(", "total", "=", "os", ".", "path", ".", "getsize", "(", "file", ".", "name", ")", "/", "1024.0", "/", "1024.0", ",", "unit", "=", "\"MiB\"", ")", "as", "pbar", ":", "\n", "        ", "for", "line", "in", "file", ":", "\n", "            ", "yield", "line", "\n", "pbar", ".", "update", "(", "len", "(", "line", ")", "/", "1024.0", "/", "1024.0", ")", "\n", "\n", "", "pbar", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.tokenization.utils._sort_by_length": [[40, 48], ["ids.size", "mask.sum().sort", "indices.sort", "torch.arange", "ids.size", "mask.sum"], "function", ["None"], ["", "", "def", "torch_load_dnn", "(", "path", ")", ":", "\n", "    ", "if", "path", ".", "startswith", "(", "\"http:\"", ")", "or", "path", ".", "startswith", "(", "\"https:\"", ")", ":", "\n", "        ", "dnn", "=", "torch", ".", "hub", ".", "load_state_dict_from_url", "(", "path", ",", "map_location", "=", "'cpu'", ")", "\n", "", "else", ":", "\n", "        ", "dnn", "=", "torch", ".", "load", "(", "path", ",", "map_location", "=", "'cpu'", ")", "\n", "\n", "", "return", "dnn", "\n", "\n", "", "def", "save_checkpoint", "(", "path", ",", "epoch_idx", ",", "mb_idx", ",", "model", ",", "optimizer", ",", "arguments", "=", "None", ")", ":", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.tokenization.utils._split_into_batches": [[50, 56], ["range", "ids.size", "batches.append"], "function", ["None"], ["\n", "if", "hasattr", "(", "model", ",", "'module'", ")", ":", "\n", "        ", "model", "=", "model", ".", "module", "# extract model from a distributed/data-parallel wrapper", "\n", "\n", "", "checkpoint", "=", "{", "}", "\n", "checkpoint", "[", "'epoch'", "]", "=", "epoch_idx", "\n", "checkpoint", "[", "'batch'", "]", "=", "mb_idx", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.tokenization.utils._split_into_batches2": [[58, 64], ["range", "len", "batches.append"], "function", ["None"], ["checkpoint", "[", "'optimizer_state_dict'", "]", "=", "optimizer", ".", "state_dict", "(", ")", "\n", "checkpoint", "[", "'arguments'", "]", "=", "arguments", "\n", "\n", "torch", ".", "save", "(", "checkpoint", ",", "path", ")", "\n", "\n", "\n", "", "def", "load_checkpoint", "(", "path", ",", "model", ",", "checkpoint", "=", "None", ",", "optimizer", "=", "None", ",", "do_print", "=", "True", ")", ":", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.reranker.tokenizer.RerankerTokenizer.__init__": [[4, 7], ["transformers.AutoTokenizer.from_pretrained"], "methods", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.modeling.hf_colbert.HF_ColBERT.from_pretrained"], ["    ", "def", "__init__", "(", "self", ",", "total_maxlen", ",", "base", ")", ":", "\n", "        ", "self", ".", "total_maxlen", "=", "total_maxlen", "\n", "self", ".", "tok", "=", "AutoTokenizer", ".", "from_pretrained", "(", "base", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.reranker.tokenizer.RerankerTokenizer.tensorize": [[8, 16], ["type", "type", "tokenizer.RerankerTokenizer.tok", "type", "type"], "methods", ["None"], ["", "def", "tensorize", "(", "self", ",", "questions", ",", "passages", ")", ":", "\n", "        ", "assert", "type", "(", "questions", ")", "in", "[", "list", ",", "tuple", "]", ",", "type", "(", "questions", ")", "\n", "assert", "type", "(", "passages", ")", "in", "[", "list", ",", "tuple", "]", ",", "type", "(", "passages", ")", "\n", "\n", "encoding", "=", "self", ".", "tok", "(", "questions", ",", "passages", ",", "padding", "=", "'longest'", ",", "truncation", "=", "'longest_first'", ",", "\n", "return_tensors", "=", "'pt'", ",", "max_length", "=", "self", ".", "total_maxlen", ",", "add_special_tokens", "=", "True", ")", "\n", "\n", "return", "encoding", "\n", "", "", ""]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.reranker.electra.ElectraReranker.__init__": [[13, 21], ["transformers.ElectraPreTrainedModel.__init__", "transformers.ElectraModel", "torch.Linear", "transformers.AutoTokenizer.from_pretrained", "electra.ElectraReranker.init_weights"], "methods", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.condenser.model.ElectraReader.__init__", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.modeling.hf_colbert.HF_ColBERT.from_pretrained"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "config", ")", "\n", "\n", "self", ".", "electra", "=", "ElectraModel", "(", "config", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "1", ")", "\n", "self", ".", "raw_tokenizer", "=", "AutoTokenizer", ".", "from_pretrained", "(", "'google/electra-large-discriminator'", ")", "\n", "\n", "self", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.reranker.electra.ElectraReranker.forward": [[22, 30], ["electra.ElectraReranker.linear().squeeze", "electra.ElectraReranker.electra", "electra.ElectraReranker.linear"], "methods", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.modeling.base_colbert.BaseColBERT.linear"], ["", "def", "forward", "(", "self", ",", "encoding", ")", ":", "\n", "        ", "outputs", "=", "self", ".", "electra", "(", "encoding", ".", "input_ids", ",", "\n", "attention_mask", "=", "encoding", ".", "attention_mask", ",", "\n", "token_type_ids", "=", "encoding", ".", "token_type_ids", ")", "[", "0", "]", "\n", "\n", "scores", "=", "self", ".", "linear", "(", "outputs", "[", ":", ",", "0", "]", ")", ".", "squeeze", "(", "-", "1", ")", "\n", "\n", "return", "scores", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.reranker.electra.ElectraReranker.save": [[31, 36], ["electra.ElectraReranker.save_pretrained", "electra.ElectraReranker.raw_tokenizer.save_pretrained", "path.endswith"], "methods", ["None"], ["", "def", "save", "(", "self", ",", "path", ")", ":", "\n", "        ", "assert", "not", "path", ".", "endswith", "(", "'.dnn'", ")", ",", "f\"{path}: We reserve *.dnn names for the deprecated checkpoint format.\"", "\n", "\n", "self", ".", "save_pretrained", "(", "path", ")", "\n", "self", ".", "raw_tokenizer", ".", "save_pretrained", "(", "path", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.training.eager_batcher.EagerBatcher.__init__": [[12, 22], ["colbert.modeling.tokenization.QueryTokenizer", "colbert.modeling.tokenization.DocTokenizer", "functools.partial", "eager_batcher.EagerBatcher._reset_triples"], "methods", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.training.eager_batcher.EagerBatcher._reset_triples"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "rank", "=", "0", ",", "nranks", "=", "1", ")", ":", "\n", "        ", "self", ".", "rank", ",", "self", ".", "nranks", "=", "rank", ",", "nranks", "\n", "self", ".", "bsize", ",", "self", ".", "accumsteps", "=", "args", ".", "bsize", ",", "args", ".", "accumsteps", "\n", "\n", "self", ".", "query_tokenizer", "=", "QueryTokenizer", "(", "args", ".", "query_maxlen", ")", "\n", "self", ".", "doc_tokenizer", "=", "DocTokenizer", "(", "args", ".", "doc_maxlen", ")", "\n", "self", ".", "tensorize_triples", "=", "partial", "(", "tensorize_triples", ",", "self", ".", "query_tokenizer", ",", "self", ".", "doc_tokenizer", ")", "\n", "\n", "self", ".", "triples_path", "=", "args", ".", "triples", "\n", "self", ".", "_reset_triples", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.training.eager_batcher.EagerBatcher._reset_triples": [[23, 26], ["open"], "methods", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.infra.run.Run.open"], ["", "def", "_reset_triples", "(", "self", ")", ":", "\n", "        ", "self", ".", "reader", "=", "open", "(", "self", ".", "triples_path", ",", "mode", "=", "'r'", ",", "encoding", "=", "\"utf-8\"", ")", "\n", "self", ".", "position", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.training.eager_batcher.EagerBatcher.__iter__": [[27, 29], ["None"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.training.eager_batcher.EagerBatcher.__next__": [[30, 49], ["zip", "eager_batcher.EagerBatcher.collate", "range", "line.strip().split", "queries.append", "positives.append", "negatives.append", "len", "line.strip"], "methods", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.training.rerank_batcher.RerankBatcher.collate"], ["", "def", "__next__", "(", "self", ")", ":", "\n", "        ", "queries", ",", "positives", ",", "negatives", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "\n", "for", "line_idx", ",", "line", "in", "zip", "(", "range", "(", "self", ".", "bsize", "*", "self", ".", "nranks", ")", ",", "self", ".", "reader", ")", ":", "\n", "            ", "if", "(", "self", ".", "position", "+", "line_idx", ")", "%", "self", ".", "nranks", "!=", "self", ".", "rank", ":", "\n", "                ", "continue", "\n", "\n", "", "query", ",", "pos", ",", "neg", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "'\\t'", ")", "\n", "\n", "queries", ".", "append", "(", "query", ")", "\n", "positives", ".", "append", "(", "pos", ")", "\n", "negatives", ".", "append", "(", "neg", ")", "\n", "\n", "", "self", ".", "position", "+=", "line_idx", "+", "1", "\n", "\n", "if", "len", "(", "queries", ")", "<", "self", ".", "bsize", ":", "\n", "            ", "raise", "StopIteration", "\n", "\n", "", "return", "self", ".", "collate", "(", "queries", ",", "positives", ",", "negatives", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.training.eager_batcher.EagerBatcher.collate": [[50, 54], ["eager_batcher.EagerBatcher.tensorize_triples", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.tokenization.utils.tensorize_triples"], ["", "def", "collate", "(", "self", ",", "queries", ",", "positives", ",", "negatives", ")", ":", "\n", "        ", "assert", "len", "(", "queries", ")", "==", "len", "(", "positives", ")", "==", "len", "(", "negatives", ")", "==", "self", ".", "bsize", "\n", "\n", "return", "self", ".", "tensorize_triples", "(", "queries", ",", "positives", ",", "negatives", ",", "self", ".", "bsize", "//", "self", ".", "accumsteps", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.training.eager_batcher.EagerBatcher.skip_to_batch": [[55, 63], ["eager_batcher.EagerBatcher._reset_triples", "colbert.utils.runs.Run.warn", "eager_batcher.EagerBatcher.reader.readline", "range"], "methods", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.training.eager_batcher.EagerBatcher._reset_triples", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.logging.Logger.warn"], ["", "def", "skip_to_batch", "(", "self", ",", "batch_idx", ",", "intended_batch_size", ")", ":", "\n", "        ", "self", ".", "_reset_triples", "(", ")", "\n", "\n", "Run", ".", "warn", "(", "f'Skipping to batch #{batch_idx} (with intended_batch_size = {intended_batch_size}) for training.'", ")", "\n", "\n", "_", "=", "[", "self", ".", "reader", ".", "readline", "(", ")", "for", "_", "in", "range", "(", "batch_idx", "*", "intended_batch_size", ")", "]", "\n", "\n", "return", "None", "\n", "", "", ""]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.training.training.train": [[23, 149], ["random.seed", "numpy.random.seed", "torch.manual_seed", "torch.manual_seed", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "print", "ElectraReranker.from_pretrained.to", "ElectraReranker.from_pretrained.train", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "transformers.AdamW", "transformers.AdamW.zero_grad", "colbert.utils.amp.MixedPrecisionManager", "torch.zeros", "torch.zeros", "time.time", "zip", "config.help", "NotImplementedError", "colbert.modeling.colbert.ColBERT", "colbert.modeling.reranker.electra.ElectraReranker.from_pretrained", "filter", "print", "transformers.get_linear_schedule_with_warmup", "training.set_bert_grad", "range", "colbert.utils.amp.MixedPrecisionManager.step", "colbert.utils.utils.print_message", "colbert.training.utils.manage_checkpoints", "colbert.training.rerank_batcher.RerankBatcher", "colbert.training.lazy_batcher.LazyBatcher", "ElectraReranker.from_pretrained.parameters", "training.set_bert_grad", "colbert.utils.amp.MixedPrecisionManager.backward", "loss.item", "colbert.utils.utils.print_message", "colbert.training.utils.manage_checkpoints", "colbert.utils.amp.MixedPrecisionManager.context", "ElectraReranker.from_pretrained.", "scores.view.view", "colbert.training.utils.print_progress", "len", "torch.tensor().view().to", "torch.tensor().view().to", "torch.nn.functional.log_softmax", "torch.nn.functional.log_softmax", "torch.nn.functional.log_softmax", "torch.nn.functional.log_softmax", "torch.nn.KLDivLoss", "torch.nn.KLDivLoss", "torch.CrossEntropyLoss", "print", "encoding.to", "torch.tensor().view", "torch.tensor().view", "loss.item", "ib_loss.item", "scores.view.size", "torch.tensor", "torch.tensor"], "function", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.infra.run.Run.print", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.indexing.collection_indexer.CollectionIndexer.train", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.config.core_config.CoreConfig.help", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.modeling.hf_colbert.HF_ColBERT.from_pretrained", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.infra.run.Run.print", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.training.training.set_bert_grad", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.amp.MixedPrecisionManager.step", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.utils.print_message", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.training.utils.manage_checkpoints", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.training.training.set_bert_grad", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.amp.MixedPrecisionManager.backward", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.utils.print_message", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.training.utils.manage_checkpoints", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.infra.run.Run.context", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.training.utils.print_progress", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.infra.run.Run.print"], ["def", "train", "(", "config", ":", "ColBERTConfig", ",", "triples", ",", "queries", "=", "None", ",", "collection", "=", "None", ")", ":", "\n", "    ", "config", ".", "checkpoint", "=", "config", ".", "checkpoint", "or", "'bert-base-uncased'", "\n", "\n", "if", "config", ".", "rank", "<", "1", ":", "\n", "        ", "config", ".", "help", "(", ")", "\n", "\n", "", "random", ".", "seed", "(", "12345", ")", "\n", "np", ".", "random", ".", "seed", "(", "12345", ")", "\n", "torch", ".", "manual_seed", "(", "12345", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "12345", ")", "\n", "\n", "assert", "config", ".", "bsize", "%", "config", ".", "nranks", "==", "0", ",", "(", "config", ".", "bsize", ",", "config", ".", "nranks", ")", "\n", "config", ".", "bsize", "=", "config", ".", "bsize", "//", "config", ".", "nranks", "\n", "\n", "print", "(", "\"Using config.bsize =\"", ",", "config", ".", "bsize", ",", "\"(per process) and config.accumsteps =\"", ",", "config", ".", "accumsteps", ")", "\n", "\n", "if", "collection", "is", "not", "None", ":", "\n", "        ", "if", "config", ".", "reranker", ":", "\n", "            ", "reader", "=", "RerankBatcher", "(", "config", ",", "triples", ",", "queries", ",", "collection", ",", "(", "0", "if", "config", ".", "rank", "==", "-", "1", "else", "config", ".", "rank", ")", ",", "config", ".", "nranks", ")", "\n", "", "else", ":", "\n", "            ", "reader", "=", "LazyBatcher", "(", "config", ",", "triples", ",", "queries", ",", "collection", ",", "(", "0", "if", "config", ".", "rank", "==", "-", "1", "else", "config", ".", "rank", ")", ",", "config", ".", "nranks", ")", "\n", "", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n", "", "if", "not", "config", ".", "reranker", ":", "\n", "        ", "colbert", "=", "ColBERT", "(", "name", "=", "config", ".", "checkpoint", ",", "colbert_config", "=", "config", ")", "\n", "", "else", ":", "\n", "        ", "colbert", "=", "ElectraReranker", ".", "from_pretrained", "(", "config", ".", "checkpoint", ")", "\n", "\n", "", "colbert", "=", "colbert", ".", "to", "(", "DEVICE", ")", "\n", "colbert", ".", "train", "(", ")", "\n", "\n", "colbert", "=", "torch", ".", "nn", ".", "parallel", ".", "DistributedDataParallel", "(", "colbert", ",", "device_ids", "=", "[", "config", ".", "rank", "]", ",", "\n", "output_device", "=", "config", ".", "rank", ",", "\n", "find_unused_parameters", "=", "True", ")", "\n", "\n", "optimizer", "=", "AdamW", "(", "filter", "(", "lambda", "p", ":", "p", ".", "requires_grad", ",", "colbert", ".", "parameters", "(", ")", ")", ",", "lr", "=", "config", ".", "lr", ",", "eps", "=", "1e-8", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "scheduler", "=", "None", "\n", "if", "config", ".", "warmup", "is", "not", "None", ":", "\n", "        ", "print", "(", "f\"#> LR will use {config.warmup} warmup steps and linear decay over {config.maxsteps} steps.\"", ")", "\n", "scheduler", "=", "get_linear_schedule_with_warmup", "(", "optimizer", ",", "num_warmup_steps", "=", "config", ".", "warmup", ",", "\n", "num_training_steps", "=", "config", ".", "maxsteps", ")", "\n", "\n", "", "warmup_bert", "=", "config", ".", "warmup_bert", "\n", "if", "warmup_bert", "is", "not", "None", ":", "\n", "        ", "set_bert_grad", "(", "colbert", ",", "False", ")", "\n", "\n", "", "amp", "=", "MixedPrecisionManager", "(", "config", ".", "amp", ")", "\n", "labels", "=", "torch", ".", "zeros", "(", "config", ".", "bsize", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "DEVICE", ")", "\n", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "train_loss", "=", "None", "\n", "train_loss_mu", "=", "0.999", "\n", "\n", "start_batch_idx", "=", "0", "\n", "\n", "# if config.resume:", "\n", "#     assert config.checkpoint is not None", "\n", "#     start_batch_idx = checkpoint['batch']", "\n", "\n", "#     reader.skip_to_batch(start_batch_idx, checkpoint['arguments']['bsize'])", "\n", "\n", "for", "batch_idx", ",", "BatchSteps", "in", "zip", "(", "range", "(", "start_batch_idx", ",", "config", ".", "maxsteps", ")", ",", "reader", ")", ":", "\n", "        ", "if", "(", "warmup_bert", "is", "not", "None", ")", "and", "warmup_bert", "<=", "batch_idx", ":", "\n", "            ", "set_bert_grad", "(", "colbert", ",", "True", ")", "\n", "warmup_bert", "=", "None", "\n", "\n", "", "this_batch_loss", "=", "0.0", "\n", "\n", "for", "batch", "in", "BatchSteps", ":", "\n", "            ", "with", "amp", ".", "context", "(", ")", ":", "\n", "                ", "try", ":", "\n", "                    ", "queries", ",", "passages", ",", "target_scores", "=", "batch", "\n", "encoding", "=", "[", "queries", ",", "passages", "]", "\n", "", "except", ":", "\n", "                    ", "encoding", ",", "target_scores", "=", "batch", "\n", "encoding", "=", "[", "encoding", ".", "to", "(", "DEVICE", ")", "]", "\n", "\n", "", "scores", "=", "colbert", "(", "*", "encoding", ")", "\n", "\n", "if", "config", ".", "use_ib_negatives", ":", "\n", "                    ", "scores", ",", "ib_loss", "=", "scores", "\n", "\n", "", "scores", "=", "scores", ".", "view", "(", "-", "1", ",", "config", ".", "nway", ")", "\n", "\n", "if", "len", "(", "target_scores", ")", "and", "not", "config", ".", "ignore_scores", ":", "\n", "                    ", "target_scores", "=", "torch", ".", "tensor", "(", "target_scores", ")", ".", "view", "(", "-", "1", ",", "config", ".", "nway", ")", ".", "to", "(", "DEVICE", ")", "\n", "target_scores", "=", "target_scores", "*", "config", ".", "distillation_alpha", "\n", "target_scores", "=", "torch", ".", "nn", ".", "functional", ".", "log_softmax", "(", "target_scores", ",", "dim", "=", "-", "1", ")", "\n", "\n", "log_scores", "=", "torch", ".", "nn", ".", "functional", ".", "log_softmax", "(", "scores", ",", "dim", "=", "-", "1", ")", "\n", "loss", "=", "torch", ".", "nn", ".", "KLDivLoss", "(", "reduction", "=", "'batchmean'", ",", "log_target", "=", "True", ")", "(", "log_scores", ",", "target_scores", ")", "\n", "", "else", ":", "\n", "                    ", "loss", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "(", "scores", ",", "labels", "[", ":", "scores", ".", "size", "(", "0", ")", "]", ")", "\n", "\n", "", "if", "config", ".", "use_ib_negatives", ":", "\n", "                    ", "if", "config", ".", "rank", "<", "1", ":", "\n", "                        ", "print", "(", "'\\t\\t\\t\\t'", ",", "loss", ".", "item", "(", ")", ",", "ib_loss", ".", "item", "(", ")", ")", "\n", "\n", "", "loss", "+=", "ib_loss", "\n", "\n", "", "loss", "=", "loss", "/", "config", ".", "accumsteps", "\n", "\n", "", "if", "config", ".", "rank", "<", "1", ":", "\n", "                ", "print_progress", "(", "scores", ")", "\n", "\n", "", "amp", ".", "backward", "(", "loss", ")", "\n", "\n", "this_batch_loss", "+=", "loss", ".", "item", "(", ")", "\n", "\n", "", "train_loss", "=", "this_batch_loss", "if", "train_loss", "is", "None", "else", "train_loss", "\n", "train_loss", "=", "train_loss_mu", "*", "train_loss", "+", "(", "1", "-", "train_loss_mu", ")", "*", "this_batch_loss", "\n", "\n", "amp", ".", "step", "(", "colbert", ",", "optimizer", ",", "scheduler", ")", "\n", "\n", "if", "config", ".", "rank", "<", "1", ":", "\n", "            ", "print_message", "(", "batch_idx", ",", "train_loss", ")", "\n", "manage_checkpoints", "(", "config", ",", "colbert", ",", "optimizer", ",", "batch_idx", "+", "1", ",", "savepath", "=", "None", ")", "\n", "\n", "", "", "if", "config", ".", "rank", "<", "1", ":", "\n", "        ", "print_message", "(", "\"#> Done with all triples!\"", ")", "\n", "ckpt_path", "=", "manage_checkpoints", "(", "config", ",", "colbert", ",", "optimizer", ",", "batch_idx", "+", "1", ",", "savepath", "=", "None", ",", "consumed_all_triples", "=", "True", ")", "\n", "\n", "return", "ckpt_path", "# TODO: This should validate and return the best checkpoint, not just the last one.", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.training.training.set_bert_grad": [[152, 159], ["colbert.bert.parameters", "training.set_bert_grad"], "function", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.training.training.set_bert_grad"], ["", "", "def", "set_bert_grad", "(", "colbert", ",", "value", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "for", "p", "in", "colbert", ".", "bert", ".", "parameters", "(", ")", ":", "\n", "            ", "assert", "p", ".", "requires_grad", "is", "(", "not", "value", ")", "\n", "p", ".", "requires_grad", "=", "value", "\n", "", "", "except", "AttributeError", ":", "\n", "        ", "set_bert_grad", "(", "colbert", ".", "module", ",", "value", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.training.lazy_batcher.LazyBatcher.__init__": [[18, 30], ["colbert.modeling.tokenization.QueryTokenizer", "colbert.modeling.tokenization.DocTokenizer", "functools.partial", "colbert.data.examples.Examples.cast().tolist", "colbert.data.queries.Queries.cast", "colbert.data.collection.Collection.cast", "colbert.data.examples.Examples.cast"], "methods", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.data.examples.Examples.tolist", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.data.examples.Examples.cast", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.data.examples.Examples.cast", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.data.examples.Examples.cast"], ["    ", "def", "__init__", "(", "self", ",", "config", ":", "ColBERTConfig", ",", "triples", ",", "queries", ",", "collection", ",", "rank", "=", "0", ",", "nranks", "=", "1", ")", ":", "\n", "        ", "self", ".", "bsize", ",", "self", ".", "accumsteps", "=", "config", ".", "bsize", ",", "config", ".", "accumsteps", "\n", "self", ".", "nway", "=", "config", ".", "nway", "\n", "\n", "self", ".", "query_tokenizer", "=", "QueryTokenizer", "(", "config", ")", "\n", "self", ".", "doc_tokenizer", "=", "DocTokenizer", "(", "config", ")", "\n", "self", ".", "tensorize_triples", "=", "partial", "(", "tensorize_triples", ",", "self", ".", "query_tokenizer", ",", "self", ".", "doc_tokenizer", ")", "\n", "self", ".", "position", "=", "0", "\n", "\n", "self", ".", "triples", "=", "Examples", ".", "cast", "(", "triples", ",", "nway", "=", "self", ".", "nway", ")", ".", "tolist", "(", "rank", ",", "nranks", ")", "\n", "self", ".", "queries", "=", "Queries", ".", "cast", "(", "queries", ")", "\n", "self", ".", "collection", "=", "Collection", ".", "cast", "(", "collection", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.training.lazy_batcher.LazyBatcher.__iter__": [[31, 33], ["None"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.training.lazy_batcher.LazyBatcher.__len__": [[34, 36], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "triples", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.training.lazy_batcher.LazyBatcher.__next__": [[37, 66], ["range", "len", "lazy_batcher.LazyBatcher.collate", "min", "len", "all_queries.append", "all_passages.extend", "all_scores.extend", "len", "len", "colbert.utils.utils.zipstar", "len"], "methods", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.training.rerank_batcher.RerankBatcher.collate", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.utils.zipstar"], ["", "def", "__next__", "(", "self", ")", ":", "\n", "        ", "offset", ",", "endpos", "=", "self", ".", "position", ",", "min", "(", "self", ".", "position", "+", "self", ".", "bsize", ",", "len", "(", "self", ".", "triples", ")", ")", "\n", "self", ".", "position", "=", "endpos", "\n", "\n", "if", "offset", "+", "self", ".", "bsize", ">", "len", "(", "self", ".", "triples", ")", ":", "\n", "            ", "raise", "StopIteration", "\n", "\n", "", "all_queries", ",", "all_passages", ",", "all_scores", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "\n", "for", "position", "in", "range", "(", "offset", ",", "endpos", ")", ":", "\n", "            ", "query", ",", "*", "pids", "=", "self", ".", "triples", "[", "position", "]", "\n", "pids", "=", "pids", "[", ":", "self", ".", "nway", "]", "\n", "\n", "query", "=", "self", ".", "queries", "[", "query", "]", "\n", "\n", "try", ":", "\n", "                ", "pids", ",", "scores", "=", "zipstar", "(", "pids", ")", "\n", "", "except", ":", "\n", "                ", "scores", "=", "[", "]", "\n", "\n", "", "passages", "=", "[", "self", ".", "collection", "[", "pid", "]", "for", "pid", "in", "pids", "]", "\n", "\n", "all_queries", ".", "append", "(", "query", ")", "\n", "all_passages", ".", "extend", "(", "passages", ")", "\n", "all_scores", ".", "extend", "(", "scores", ")", "\n", "\n", "", "assert", "len", "(", "all_scores", ")", "in", "[", "0", ",", "len", "(", "all_passages", ")", "]", ",", "len", "(", "all_scores", ")", "\n", "\n", "return", "self", ".", "collate", "(", "all_queries", ",", "all_passages", ",", "all_scores", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.training.lazy_batcher.LazyBatcher.collate": [[67, 72], ["lazy_batcher.LazyBatcher.tensorize_triples", "len", "len"], "methods", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.tokenization.utils.tensorize_triples"], ["", "def", "collate", "(", "self", ",", "queries", ",", "passages", ",", "scores", ")", ":", "\n", "        ", "assert", "len", "(", "queries", ")", "==", "self", ".", "bsize", "\n", "assert", "len", "(", "passages", ")", "==", "self", ".", "nway", "*", "self", ".", "bsize", "\n", "\n", "return", "self", ".", "tensorize_triples", "(", "queries", ",", "passages", ",", "scores", ",", "self", ".", "bsize", "//", "self", ".", "accumsteps", ",", "self", ".", "nway", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.training.utils.print_progress": [[10, 13], ["print", "round", "round", "scores[].mean().item", "scores[].mean().item", "scores[].mean", "scores[].mean"], "function", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.infra.run.Run.print"], ["\n", "def", "print_message", "(", "*", "s", ",", "condition", "=", "True", ",", "pad", "=", "False", ")", ":", "\n", "    ", "s", "=", "' '", ".", "join", "(", "[", "str", "(", "x", ")", "for", "x", "in", "s", "]", ")", "\n", "msg", "=", "\"[{}] {}\"", ".", "format", "(", "datetime", ".", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "\"%b %d, %H:%M:%S\"", ")", ",", "s", ")", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.training.utils.manage_checkpoints": [[15, 56], ["os.path.join", "os.path.exists", "os.makedirs", "os.path.join", "os.path.join", "print", "save", "colbert.infra.run.Run"], "function", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.infra.run.Run.print", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.codecs.residual_embeddings.ResidualEmbeddings.save"], ["if", "condition", ":", "\n", "        ", "msg", "=", "msg", "if", "not", "pad", "else", "f'\\n{msg}\\n'", "\n", "print", "(", "msg", ",", "flush", "=", "True", ")", "\n", "\n", "\n", "", "return", "msg", "\n", "\n", "\n", "", "def", "timestamp", "(", "daydir", "=", "False", ")", ":", "\n", "    ", "format_str", "=", "f\"%Y-%m{'/' if daydir else '-'}%d{'/' if daydir else '_'}%H.%M.%S\"", "\n", "result", "=", "datetime", ".", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "format_str", ")", "\n", "return", "result", "\n", "\n", "\n", "", "def", "file_tqdm", "(", "file", ")", ":", "\n", "    ", "print", "(", "f\"#> Reading {file.name}\"", ")", "\n", "\n", "with", "tqdm", ".", "tqdm", "(", "total", "=", "os", ".", "path", ".", "getsize", "(", "file", ".", "name", ")", "/", "1024.0", "/", "1024.0", ",", "unit", "=", "\"MiB\"", ")", "as", "pbar", ":", "\n", "        ", "for", "line", "in", "file", ":", "\n", "            ", "yield", "line", "\n", "pbar", ".", "update", "(", "len", "(", "line", ")", "/", "1024.0", "/", "1024.0", ")", "\n", "\n", "", "pbar", ".", "close", "(", ")", "\n", "\n", "\n", "", "", "def", "torch_load_dnn", "(", "path", ")", ":", "\n", "    ", "if", "path", ".", "startswith", "(", "\"http:\"", ")", "or", "path", ".", "startswith", "(", "\"https:\"", ")", ":", "\n", "        ", "dnn", "=", "torch", ".", "hub", ".", "load_state_dict_from_url", "(", "path", ",", "map_location", "=", "'cpu'", ")", "\n", "", "else", ":", "\n", "        ", "dnn", "=", "torch", ".", "load", "(", "path", ",", "map_location", "=", "'cpu'", ")", "\n", "\n", "", "return", "dnn", "\n", "\n", "", "def", "save_checkpoint", "(", "path", ",", "epoch_idx", ",", "mb_idx", ",", "model", ",", "optimizer", ",", "arguments", "=", "None", ")", ":", "\n", "    ", "print", "(", "f\"#> Saving a checkpoint to {path} ..\"", ")", "\n", "\n", "if", "hasattr", "(", "model", ",", "'module'", ")", ":", "\n", "        ", "model", "=", "model", ".", "module", "# extract model from a distributed/data-parallel wrapper", "\n", "\n", "", "checkpoint", "=", "{", "}", "\n", "checkpoint", "[", "'epoch'", "]", "=", "epoch_idx", "\n", "checkpoint", "[", "'batch'", "]", "=", "mb_idx", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.training.rerank_batcher.RerankBatcher.__init__": [[17, 29], ["colbert.modeling.reranker.tokenizer.RerankerTokenizer", "colbert.data.examples.Examples.cast().tolist", "colbert.data.queries.Queries.cast", "colbert.data.collection.Collection.cast", "colbert.data.examples.Examples.cast"], "methods", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.data.examples.Examples.tolist", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.data.examples.Examples.cast", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.data.examples.Examples.cast", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.data.examples.Examples.cast"], ["    ", "def", "__init__", "(", "self", ",", "config", ":", "ColBERTConfig", ",", "triples", ",", "queries", ",", "collection", ",", "rank", "=", "0", ",", "nranks", "=", "1", ")", ":", "\n", "        ", "self", ".", "bsize", ",", "self", ".", "accumsteps", "=", "config", ".", "bsize", ",", "config", ".", "accumsteps", "\n", "self", ".", "nway", "=", "config", ".", "nway", "\n", "\n", "assert", "self", ".", "accumsteps", "==", "1", ",", "\"The tensorizer doesn't support larger accumsteps yet --- but it's easy to add.\"", "\n", "\n", "self", ".", "tokenizer", "=", "RerankerTokenizer", "(", "total_maxlen", "=", "config", ".", "doc_maxlen", ",", "base", "=", "config", ".", "checkpoint", ")", "\n", "self", ".", "position", "=", "0", "\n", "\n", "self", ".", "triples", "=", "Examples", ".", "cast", "(", "triples", ",", "nway", "=", "self", ".", "nway", ")", ".", "tolist", "(", "rank", ",", "nranks", ")", "\n", "self", ".", "queries", "=", "Queries", ".", "cast", "(", "queries", ")", "\n", "self", ".", "collection", "=", "Collection", ".", "cast", "(", "collection", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.training.rerank_batcher.RerankBatcher.__iter__": [[30, 32], ["None"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.training.rerank_batcher.RerankBatcher.__len__": [[33, 35], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "triples", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.training.rerank_batcher.RerankBatcher.__next__": [[36, 65], ["range", "len", "rerank_batcher.RerankBatcher.collate", "min", "len", "all_queries.append", "all_passages.extend", "all_scores.extend", "len", "len", "colbert.utils.utils.zipstar", "len"], "methods", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.training.rerank_batcher.RerankBatcher.collate", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.utils.zipstar"], ["", "def", "__next__", "(", "self", ")", ":", "\n", "        ", "offset", ",", "endpos", "=", "self", ".", "position", ",", "min", "(", "self", ".", "position", "+", "self", ".", "bsize", ",", "len", "(", "self", ".", "triples", ")", ")", "\n", "self", ".", "position", "=", "endpos", "\n", "\n", "if", "offset", "+", "self", ".", "bsize", ">", "len", "(", "self", ".", "triples", ")", ":", "\n", "            ", "raise", "StopIteration", "\n", "\n", "", "all_queries", ",", "all_passages", ",", "all_scores", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "\n", "for", "position", "in", "range", "(", "offset", ",", "endpos", ")", ":", "\n", "            ", "query", ",", "*", "pids", "=", "self", ".", "triples", "[", "position", "]", "\n", "pids", "=", "pids", "[", ":", "self", ".", "nway", "]", "\n", "\n", "query", "=", "self", ".", "queries", "[", "query", "]", "\n", "\n", "try", ":", "\n", "                ", "pids", ",", "scores", "=", "zipstar", "(", "pids", ")", "\n", "", "except", ":", "\n", "                ", "scores", "=", "[", "]", "\n", "\n", "", "passages", "=", "[", "self", ".", "collection", "[", "pid", "]", "for", "pid", "in", "pids", "]", "\n", "\n", "all_queries", ".", "append", "(", "query", ")", "\n", "all_passages", ".", "extend", "(", "passages", ")", "\n", "all_scores", ".", "extend", "(", "scores", ")", "\n", "\n", "", "assert", "len", "(", "all_scores", ")", "in", "[", "0", ",", "len", "(", "all_passages", ")", "]", ",", "len", "(", "all_scores", ")", "\n", "\n", "return", "self", ".", "collate", "(", "all_queries", ",", "all_passages", ",", "all_scores", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.training.rerank_batcher.RerankBatcher.collate": [[66, 72], ["colbert.utils.utils.flatten", "len", "len", "rerank_batcher.RerankBatcher.tokenizer.tensorize"], "methods", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.utils.flatten", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.condenser.tokenization.AnswerAwareTokenizer.tensorize"], ["", "def", "collate", "(", "self", ",", "queries", ",", "passages", ",", "scores", ")", ":", "\n", "        ", "assert", "len", "(", "queries", ")", "==", "self", ".", "bsize", "\n", "assert", "len", "(", "passages", ")", "==", "self", ".", "nway", "*", "self", ".", "bsize", "\n", "\n", "queries", "=", "flatten", "(", "[", "[", "query", "]", "*", "self", ".", "nway", "for", "query", "in", "queries", "]", ")", "\n", "return", "[", "(", "self", ".", "tokenizer", ".", "tensorize", "(", "queries", ",", "passages", ")", ",", "scores", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.infra.launcher.Launcher.__init__": [[23, 29], ["colbert.infra.config.RunConfig.from_existing", "colbert.infra.run.Run"], "methods", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.config.base_config.BaseConfig.from_existing"], ["    ", "def", "__init__", "(", "self", ",", "callee", ",", "run_config", "=", "None", ",", "return_all", "=", "False", ")", ":", "\n", "        ", "self", ".", "callee", "=", "callee", "\n", "self", ".", "return_all", "=", "return_all", "\n", "\n", "self", ".", "run_config", "=", "RunConfig", ".", "from_existing", "(", "Run", "(", ")", ".", "config", ",", "run_config", ")", "\n", "self", ".", "nranks", "=", "self", ".", "run_config", ".", "nranks", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.infra.launcher.Launcher.launch": [[30, 89], ["torch.Queue", "torch.Queue", "random.Random", "str", "range", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "launcher.print_memory_stats", "launcher.print_memory_stats", "sorted", "launcher.print_memory_stats", "time.time", "isinstance", "isinstance", "type().from_existing", "all_procs.append", "print", "proc.start", "proc.join", "print", "random.Random.randint", "colbert.infra.config.RunConfig", "torch.Process", "torch.Process", "torch.Queue.get", "type"], "methods", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.infra.launcher.print_memory_stats", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.infra.launcher.print_memory_stats", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.infra.launcher.print_memory_stats", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.config.base_config.BaseConfig.from_existing", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.infra.run.Run.print", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.infra.run.Run.print"], ["", "def", "launch", "(", "self", ",", "custom_config", ",", "*", "args", ")", ":", "\n", "        ", "return_value_queue", "=", "mp", ".", "Queue", "(", ")", "\n", "\n", "rng", "=", "random", ".", "Random", "(", "time", ".", "time", "(", ")", ")", "\n", "port", "=", "str", "(", "12355", "+", "rng", ".", "randint", "(", "0", ",", "1000", ")", ")", "# randomize the port to avoid collision on launching several jobs.", "\n", "\n", "all_procs", "=", "[", "]", "\n", "for", "new_rank", "in", "range", "(", "0", ",", "self", ".", "nranks", ")", ":", "\n", "            ", "assert", "isinstance", "(", "custom_config", ",", "BaseConfig", ")", "\n", "assert", "isinstance", "(", "custom_config", ",", "RunSettings", ")", "\n", "\n", "new_config", "=", "type", "(", "custom_config", ")", ".", "from_existing", "(", "custom_config", ",", "self", ".", "run_config", ",", "RunConfig", "(", "rank", "=", "new_rank", ")", ")", "\n", "\n", "args_", "=", "(", "self", ".", "callee", ",", "port", ",", "return_value_queue", ",", "new_config", ",", "*", "args", ")", "\n", "all_procs", ".", "append", "(", "mp", ".", "Process", "(", "target", "=", "setup_new_process", ",", "args", "=", "args_", ")", ")", "\n", "\n", "# Clear GPU space (e.g., after a `Searcher` on GPU-0 is deleted)", "\n", "# TODO: Generalize this from GPU-0 only!", "\n", "# TODO: Move this to a function. And call that function from __del__ in a class that's inherited by Searcher, Indexer, etc.", "\n", "\n", "# t = torch.cuda.get_device_properties(0).total_memory", "\n", "# r = torch.cuda.memory_reserved(0)", "\n", "# a = torch.cuda.memory_allocated(0)", "\n", "# f = r-a", "\n", "\n", "# print_message(f\"[Pre-Emptying] GPU memory check: r={r}, a={a}, f={f}\")", "\n", "\n", "", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "\n", "# t = torch.cuda.get_device_properties(0).total_memory", "\n", "# r = torch.cuda.memory_reserved(0)", "\n", "# a = torch.cuda.memory_allocated(0)", "\n", "# f = r-a", "\n", "\n", "# print_message(f\"[Post-Emptying] GPU memory check: r={r}, a={a}, f={f}\")", "\n", "\n", "print_memory_stats", "(", "'MAIN'", ")", "\n", "\n", "for", "proc", "in", "all_procs", ":", "\n", "            ", "print", "(", "\"#> Starting...\"", ")", "\n", "proc", ".", "start", "(", ")", "\n", "\n", "", "print_memory_stats", "(", "'MAIN'", ")", "\n", "\n", "# TODO: If the processes crash upon join, raise an exception and don't block on .get() below!", "\n", "\n", "return_values", "=", "sorted", "(", "[", "return_value_queue", ".", "get", "(", ")", "for", "_", "in", "all_procs", "]", ")", "\n", "return_values", "=", "[", "val", "for", "rank", ",", "val", "in", "return_values", "]", "\n", "\n", "if", "not", "self", ".", "return_all", ":", "\n", "            ", "return_values", "=", "return_values", "[", "0", "]", "\n", "\n", "", "for", "proc", "in", "all_procs", ":", "\n", "            ", "proc", ".", "join", "(", ")", "\n", "print", "(", "\"#> Joined...\"", ")", "\n", "\n", "", "print_memory_stats", "(", "'MAIN'", ")", "\n", "\n", "return", "return_values", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.infra.launcher.setup_new_process": [[91, 118], ["launcher.print_memory_stats", "random.seed", "numpy.random.seed", "torch.manual_seed", "torch.manual_seed", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "str", "str", "colbert.init", "return_value_queue.put", "map", "colbert.infra.run.Run().context", "callee", "colbert.infra.run.Run"], "function", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.infra.launcher.print_memory_stats", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.runs._RunManager.init", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.infra.run.Run.context"], ["", "", "def", "setup_new_process", "(", "callee", ",", "port", ",", "return_value_queue", ",", "config", ",", "*", "args", ")", ":", "\n", "    ", "print_memory_stats", "(", ")", "\n", "\n", "random", ".", "seed", "(", "12345", ")", "\n", "np", ".", "random", ".", "seed", "(", "12345", ")", "\n", "torch", ".", "manual_seed", "(", "12345", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "12345", ")", "\n", "\n", "rank", ",", "nranks", "=", "config", ".", "rank", ",", "config", ".", "nranks", "\n", "\n", "os", ".", "environ", "[", "\"MASTER_ADDR\"", "]", "=", "\"localhost\"", "\n", "os", ".", "environ", "[", "\"MASTER_PORT\"", "]", "=", "port", "\n", "os", ".", "environ", "[", "\"WORLD_SIZE\"", "]", "=", "str", "(", "config", ".", "nranks", ")", "\n", "os", ".", "environ", "[", "\"RANK\"", "]", "=", "str", "(", "config", ".", "rank", ")", "\n", "\n", "# TODO: Ideally the gpus \"getter\" handles this max-nranks thing!", "\n", "os", ".", "environ", "[", "\"CUDA_VISIBLE_DEVICES\"", "]", "=", "','", ".", "join", "(", "map", "(", "str", ",", "config", ".", "gpus_", "[", ":", "nranks", "]", ")", ")", "\n", "\n", "nranks_", ",", "distributed_", "=", "distributed", ".", "init", "(", "rank", ")", "\n", "assert", "nranks_", "==", "nranks", "\n", "\n", "# Run.init(args.rank, args.root, args.experiment, args.run)", "\n", "\n", "with", "Run", "(", ")", ".", "context", "(", "config", ",", "inherit_config", "=", "False", ")", ":", "\n", "        ", "return_val", "=", "callee", "(", "config", ",", "*", "args", ")", "\n", "\n", "", "return_value_queue", ".", "put", "(", "(", "rank", ",", "return_val", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.infra.launcher.print_memory_stats": [[120, 148], ["psutil.virtual_memory", "psutil.Process().memory_info", "colbert.utils.utils.print_message", "psutil.Process().memory_full_info", "psutil.Process", "psutil.Process", "os.getpid"], "function", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.utils.print_message"], ["", "def", "print_memory_stats", "(", "message", "=", "''", ")", ":", "\n", "    ", "return", "# FIXME: Add this back before release.", "\n", "\n", "import", "psutil", "# Remove before releases? Or at least make optional with try/except.", "\n", "\n", "global_info", "=", "psutil", ".", "virtual_memory", "(", ")", "\n", "total", ",", "available", ",", "used", ",", "free", "=", "global_info", ".", "total", ",", "global_info", ".", "available", ",", "global_info", ".", "used", ",", "global_info", ".", "free", "\n", "\n", "info", "=", "psutil", ".", "Process", "(", ")", ".", "memory_info", "(", ")", "\n", "rss", ",", "vms", ",", "shared", "=", "info", ".", "rss", ",", "info", ".", "vms", ",", "info", ".", "shared", "\n", "uss", "=", "psutil", ".", "Process", "(", ")", ".", "memory_full_info", "(", ")", ".", "uss", "\n", "\n", "gib", "=", "1024", "**", "3", "\n", "\n", "summary", "=", "f\"\"\"\n    \"[PID: {os.getpid()}]\n    [{message}]\n    Available: {available / gib:,.1f} / {total / gib:,.1f}\n    Free: {free / gib:,.1f} / {total / gib:,.1f}\n    Usage: {used / gib:,.1f} / {total / gib:,.1f}\n\n    RSS: {rss  / gib:,.1f}\n    VMS: {vms  / gib:,.1f}\n    USS: {uss  / gib:,.1f}\n    SHARED: {shared  / gib:,.1f}\n    \"\"\"", ".", "strip", "(", ")", ".", "replace", "(", "'\\n'", ",", "'\\t'", ")", "\n", "\n", "print_message", "(", "summary", ",", "pad", "=", "True", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.infra.provenance.Provenance.__init__": [[7, 9], ["provenance.Provenance.stacktrace"], "methods", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.infra.provenance.Provenance.stacktrace"], ["    ", "def", "__init__", "(", "self", ")", "->", "None", ":", "\n", "        ", "self", ".", "initial_stacktrace", "=", "self", ".", "stacktrace", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.infra.provenance.Provenance.stacktrace": [[10, 22], ["inspect.stack", "output.append", "output.append", "frame.code_context[].strip"], "methods", ["None"], ["", "def", "stacktrace", "(", "self", ")", ":", "\n", "        ", "trace", "=", "inspect", ".", "stack", "(", ")", "\n", "output", "=", "[", "]", "\n", "\n", "for", "frame", "in", "trace", "[", "2", ":", "-", "1", "]", ":", "\n", "            ", "try", ":", "\n", "                ", "frame", "=", "f'{frame.filename}:{frame.lineno}:{frame.function}:   {frame.code_context[0].strip()}'", "\n", "output", ".", "append", "(", "frame", ")", "\n", "", "except", ":", "\n", "                ", "output", ".", "append", "(", "None", ")", "\n", "\n", "", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.infra.provenance.Provenance.toDict": [[23, 26], ["provenance.Provenance.stacktrace", "dict"], "methods", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.infra.provenance.Provenance.stacktrace"], ["", "def", "toDict", "(", "self", ")", ":", "# for ujson", "\n", "        ", "self", ".", "serialization_stacktrace", "=", "self", ".", "stacktrace", "(", ")", "\n", "return", "dict", "(", "self", ".", "__dict__", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.infra.run.Run.__new__": [[15, 32], ["object.__new__", "colbert.infra.config.RunConfig", "colbert.infra.config.RunConfig.assign_defaults", "cls._instance.__append"], "methods", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.infra.run.Run.__new__", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.config.core_config.CoreConfig.assign_defaults", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.infra.run.Run.__append"], ["def", "__new__", "(", "cls", ")", ":", "\n", "        ", "\"\"\"\n        Singleton Pattern. See https://python-patterns.guide/gang-of-four/singleton/\n        \"\"\"", "\n", "if", "cls", ".", "_instance", "is", "None", ":", "\n", "            ", "cls", ".", "_instance", "=", "super", "(", ")", ".", "__new__", "(", "cls", ")", "\n", "cls", ".", "_instance", ".", "stack", "=", "[", "]", "\n", "\n", "# TODO: Save a timestamp here! And re-use it! But allow the user to override it on calling Run().context a second time.", "\n", "run_config", "=", "RunConfig", "(", ")", "\n", "run_config", ".", "assign_defaults", "(", ")", "\n", "\n", "cls", ".", "_instance", ".", "__append", "(", "run_config", ")", "\n", "\n", "# TODO: atexit.register(all_done)", "\n", "\n", "", "return", "cls", ".", "_instance", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.infra.run.Run.config": [[33, 36], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "config", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "stack", "[", "-", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.infra.run.Run.__getattr__": [[37, 42], ["hasattr", "super().__getattr__", "getattr"], "methods", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.infra.run.Run.__getattr__"], ["", "def", "__getattr__", "(", "self", ",", "name", ")", ":", "\n", "        ", "if", "hasattr", "(", "self", ".", "config", ",", "name", ")", ":", "\n", "            ", "return", "getattr", "(", "self", ".", "config", ",", "name", ")", "\n", "\n", "", "super", "(", ")", ".", "__getattr__", "(", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.infra.run.Run.__append": [[43, 46], ["run.Run.stack.append"], "methods", ["None"], ["", "def", "__append", "(", "self", ",", "runconfig", ":", "RunConfig", ")", ":", "\n", "# runconfig.disallow_writes(readonly=True)", "\n", "        ", "self", ".", "stack", ".", "append", "(", "runconfig", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.infra.run.Run.__pop": [[47, 49], ["run.Run.stack.pop"], "methods", ["None"], ["", "def", "__pop", "(", "self", ")", ":", "\n", "        ", "self", ".", "stack", ".", "pop", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.infra.run.Run.context": [[50, 61], ["run.Run.__append", "colbert.infra.config.RunConfig.from_existing", "run.Run.__pop"], "methods", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.infra.run.Run.__append", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.config.base_config.BaseConfig.from_existing", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.infra.run.Run.__pop"], ["", "@", "contextmanager", "\n", "def", "context", "(", "self", ",", "runconfig", ":", "RunConfig", ",", "inherit_config", "=", "True", ")", ":", "\n", "        ", "if", "inherit_config", ":", "\n", "            ", "runconfig", "=", "RunConfig", ".", "from_existing", "(", "self", ".", "config", ",", "runconfig", ")", "\n", "\n", "", "self", ".", "__append", "(", "runconfig", ")", "\n", "\n", "try", ":", "\n", "            ", "yield", "\n", "", "finally", ":", "\n", "            ", "self", ".", "__pop", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.infra.run.Run.open": [[62, 72], ["os.path.join", "run.Run.open"], "methods", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.infra.run.Run.open"], ["", "", "def", "open", "(", "self", ",", "path", ",", "mode", "=", "'r'", ")", ":", "\n", "        ", "path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "path_", ",", "path", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "path_", ")", ":", "\n", "            ", "create_directory", "(", "self", ".", "path_", ")", "\n", "\n", "", "if", "(", "'w'", "in", "mode", "or", "'a'", "in", "mode", ")", "and", "not", "self", ".", "overwrite", ":", "\n", "            ", "assert", "not", "os", ".", "path", ".", "exists", "(", "path", ")", ",", "(", "self", ".", "overwrite", ",", "path", ")", "\n", "\n", "", "return", "open", "(", "path", ",", "mode", "=", "mode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.infra.run.Run.print": [[73, 75], ["colbert.utils.utils.print_message", "str"], "methods", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.utils.print_message"], ["", "def", "print", "(", "self", ",", "*", "args", ")", ":", "\n", "        ", "print_message", "(", "\"[\"", "+", "str", "(", "self", ".", "rank", ")", "+", "\"]\"", ",", "\"\\t\\t\"", ",", "*", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.infra.run.Run.print_main": [[76, 79], ["run.Run.print"], "methods", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.infra.run.Run.print"], ["", "def", "print_main", "(", "self", ",", "*", "args", ")", ":", "\n", "        ", "if", "self", ".", "rank", "==", "0", ":", "\n", "            ", "self", ".", "print", "(", "*", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.config.base_config.BaseConfig.from_existing": [[17, 32], ["cls", "dataclasses.asdict"], "methods", ["None"], ["    ", "@", "classmethod", "\n", "def", "from_existing", "(", "cls", ",", "*", "sources", ")", ":", "\n", "        ", "kw_args", "=", "{", "}", "\n", "\n", "for", "source", "in", "sources", ":", "\n", "            ", "if", "source", "is", "None", ":", "\n", "                ", "continue", "\n", "\n", "", "local_kw_args", "=", "dataclasses", ".", "asdict", "(", "source", ")", "\n", "local_kw_args", "=", "{", "k", ":", "local_kw_args", "[", "k", "]", "for", "k", "in", "source", ".", "assigned", "}", "\n", "kw_args", "=", "{", "**", "kw_args", ",", "**", "local_kw_args", "}", "\n", "\n", "", "obj", "=", "cls", "(", "**", "kw_args", ")", "\n", "\n", "return", "obj", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.config.base_config.BaseConfig.from_deprecated_args": [[33, 39], ["cls", "cls.configure"], "methods", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.config.core_config.CoreConfig.configure"], ["", "@", "classmethod", "\n", "def", "from_deprecated_args", "(", "cls", ",", "args", ")", ":", "\n", "        ", "obj", "=", "cls", "(", ")", "\n", "ignored", "=", "obj", ".", "configure", "(", "ignore_unrecognized", "=", "True", ",", "**", "args", ")", "\n", "\n", "return", "obj", ",", "ignored", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.config.base_config.BaseConfig.from_path": [[40, 49], ["cls.from_deprecated_args", "open", "ujson.load"], "methods", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.config.base_config.BaseConfig.from_deprecated_args", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.infra.run.Run.open", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.codecs.residual_embeddings.ResidualEmbeddings.load"], ["", "@", "classmethod", "\n", "def", "from_path", "(", "cls", ",", "name", ")", ":", "\n", "        ", "with", "open", "(", "name", ")", "as", "f", ":", "\n", "            ", "args", "=", "ujson", ".", "load", "(", "f", ")", "\n", "\n", "if", "'config'", "in", "args", ":", "\n", "                ", "args", "=", "args", "[", "'config'", "]", "\n", "\n", "", "", "return", "cls", ".", "from_deprecated_args", "(", "args", ")", "# the new, non-deprecated version functions the same at this level.", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.config.base_config.BaseConfig.load_from_checkpoint": [[50, 69], ["checkpoint_path.endswith", "os.path.join", "os.path.exists", "colbert.utils.utils.torch_load_dnn", "cls.from_deprecated_args", "config.set", "cls.from_path", "loaded_config.set", "colbert.utils.utils.torch_load_dnn.get"], "methods", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.utils.torch_load_dnn", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.config.base_config.BaseConfig.from_deprecated_args", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.config.core_config.CoreConfig.set", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.config.base_config.BaseConfig.from_path", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.config.core_config.CoreConfig.set"], ["", "@", "classmethod", "\n", "def", "load_from_checkpoint", "(", "cls", ",", "checkpoint_path", ")", ":", "\n", "        ", "if", "checkpoint_path", ".", "endswith", "(", "'.dnn'", ")", ":", "\n", "            ", "dnn", "=", "torch_load_dnn", "(", "checkpoint_path", ")", "\n", "config", ",", "_", "=", "cls", ".", "from_deprecated_args", "(", "dnn", ".", "get", "(", "'arguments'", ",", "{", "}", ")", ")", "\n", "\n", "# TODO: FIXME: Decide if the line below will have any unintended consequences. We don't want to overwrite those!", "\n", "config", ".", "set", "(", "'checkpoint'", ",", "checkpoint_path", ")", "\n", "\n", "return", "config", "\n", "\n", "", "loaded_config_path", "=", "os", ".", "path", ".", "join", "(", "checkpoint_path", ",", "'artifact.metadata'", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "loaded_config_path", ")", ":", "\n", "            ", "loaded_config", ",", "_", "=", "cls", ".", "from_path", "(", "loaded_config_path", ")", "\n", "loaded_config", ".", "set", "(", "'checkpoint'", ",", "checkpoint_path", ")", "\n", "\n", "return", "loaded_config", "\n", "\n", "", "return", "None", "# can happen if checkpoint_path is something like 'bert-base-uncased'", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.config.base_config.BaseConfig.load_from_index": [[70, 88], ["os.path.join", "cls.from_path", "os.path.join", "cls.from_path"], "methods", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.config.base_config.BaseConfig.from_path", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.config.base_config.BaseConfig.from_path"], ["", "@", "classmethod", "\n", "def", "load_from_index", "(", "cls", ",", "index_path", ")", ":", "\n", "# FIXME: We should start here with initial_config = ColBERTConfig(config, Run().config).", "\n", "# This should allow us to say initial_config.index_root. Then, below, set config = Config(..., initial_c)", "\n", "\n", "# default_index_root = os.path.join(Run().root, Run().experiment, 'indexes/')", "\n", "# index_path = os.path.join(default_index_root, index_path)", "\n", "\n", "# CONSIDER: No more plan/metadata.json. Only metadata.json to avoid weird issues when loading an index.", "\n", "\n", "        ", "try", ":", "\n", "            ", "metadata_path", "=", "os", ".", "path", ".", "join", "(", "index_path", ",", "'metadata.json'", ")", "\n", "loaded_config", ",", "_", "=", "cls", ".", "from_path", "(", "metadata_path", ")", "\n", "", "except", ":", "\n", "            ", "metadata_path", "=", "os", ".", "path", ".", "join", "(", "index_path", ",", "'plan.json'", ")", "\n", "loaded_config", ",", "_", "=", "cls", ".", "from_path", "(", "metadata_path", ")", "\n", "\n", "", "return", "loaded_config", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.config.base_config.BaseConfig.save": [[89, 99], ["open", "base_config.BaseConfig.export", "utility.utils.save_metadata.get_metadata_only", "f.write", "os.path.exists", "ujson.dumps"], "methods", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.infra.run.Run.open", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.config.core_config.CoreConfig.export", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.save_metadata.get_metadata_only"], ["", "def", "save", "(", "self", ",", "path", ",", "overwrite", "=", "False", ")", ":", "\n", "        ", "assert", "overwrite", "or", "not", "os", ".", "path", ".", "exists", "(", "path", ")", ",", "path", "\n", "\n", "with", "open", "(", "path", ",", "'w'", ")", "as", "f", ":", "\n", "            ", "args", "=", "self", ".", "export", "(", ")", "# dict(self.__config)", "\n", "args", "[", "'meta'", "]", "=", "get_metadata_only", "(", ")", "\n", "args", "[", "'meta'", "]", "[", "'version'", "]", "=", "'colbert-v0.4'", "\n", "# TODO: Add git_status details.. It can't be too large! It should be a path that Runs() saves on exit, maybe!", "\n", "\n", "f", ".", "write", "(", "ujson", ".", "dumps", "(", "args", ",", "indent", "=", "4", ")", "+", "'\\n'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.config.base_config.BaseConfig.save_for_checkpoint": [[100, 106], ["os.path.join", "base_config.BaseConfig.save", "checkpoint_path.endswith"], "methods", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.codecs.residual_embeddings.ResidualEmbeddings.save"], ["", "", "def", "save_for_checkpoint", "(", "self", ",", "checkpoint_path", ")", ":", "\n", "        ", "assert", "not", "checkpoint_path", ".", "endswith", "(", "'.dnn'", ")", ",", "f\"{checkpoint_path}: We reserve *.dnn names for the deprecated checkpoint format.\"", "\n", "\n", "output_config_path", "=", "os", ".", "path", ".", "join", "(", "checkpoint_path", ",", "'artifact.metadata'", ")", "\n", "self", ".", "save", "(", "output_config_path", ",", "overwrite", "=", "True", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.config.settings.RunSettings.gpus_": [[33, 49], ["isinstance", "isinstance", "list", "sorted", "all", "list", "value.split.split.split", "map", "list", "range", "set", "range"], "methods", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.config.core_config.CoreConfig.set"], ["@", "property", "\n", "def", "gpus_", "(", "self", ")", ":", "\n", "        ", "value", "=", "self", ".", "gpus", "\n", "\n", "if", "isinstance", "(", "value", ",", "int", ")", ":", "\n", "            ", "value", "=", "list", "(", "range", "(", "value", ")", ")", "\n", "\n", "", "if", "isinstance", "(", "value", ",", "str", ")", ":", "\n", "            ", "value", "=", "value", ".", "split", "(", "','", ")", "\n", "\n", "", "value", "=", "list", "(", "map", "(", "int", ",", "value", ")", ")", "\n", "value", "=", "sorted", "(", "list", "(", "set", "(", "value", ")", ")", ")", "\n", "\n", "assert", "all", "(", "device_idx", "in", "range", "(", "0", ",", "self", ".", "total_visible_gpus", ")", "for", "device_idx", "in", "value", ")", ",", "value", "\n", "\n", "return", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.config.settings.RunSettings.index_root_": [[50, 53], ["os.path.join"], "methods", ["None"], ["", "@", "property", "\n", "def", "index_root_", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "index_root", "or", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "self", ".", "experiment", ",", "'indexes/'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.config.settings.RunSettings.script_name_": [[54, 80], ["dir", "os.path.abspath", "os.path.abspath", "os.path.abspath", "os.path.abspath.startswith", "os.path.abspath.endswith", "os.getcwd", "os.path.abspath.replace().strip", "len", "os.path.commonpath", "len", "os.path.abspath.replace", "len"], "methods", ["None"], ["", "@", "property", "\n", "def", "script_name_", "(", "self", ")", ":", "\n", "        ", "if", "'__file__'", "in", "dir", "(", "__main__", ")", ":", "\n", "            ", "cwd", "=", "os", ".", "path", ".", "abspath", "(", "os", ".", "getcwd", "(", ")", ")", "\n", "script_path", "=", "os", ".", "path", ".", "abspath", "(", "__main__", ".", "__file__", ")", "\n", "root_path", "=", "os", ".", "path", ".", "abspath", "(", "self", ".", "root", ")", "\n", "\n", "if", "script_path", ".", "startswith", "(", "cwd", ")", ":", "\n", "                ", "script_path", "=", "script_path", "[", "len", "(", "cwd", ")", ":", "]", "\n", "\n", "", "else", ":", "\n", "                ", "try", ":", "\n", "                    ", "commonpath", "=", "os", ".", "path", ".", "commonpath", "(", "[", "script_path", ",", "root_path", "]", ")", "\n", "script_path", "=", "script_path", "[", "len", "(", "commonpath", ")", ":", "]", "\n", "", "except", ":", "\n", "                    ", "pass", "\n", "\n", "\n", "", "", "assert", "script_path", ".", "endswith", "(", "'.py'", ")", "\n", "script_name", "=", "script_path", ".", "replace", "(", "'/'", ",", "'.'", ")", ".", "strip", "(", "'.'", ")", "[", ":", "-", "3", "]", "\n", "\n", "assert", "len", "(", "script_name", ")", ">", "0", ",", "(", "script_name", ",", "script_path", ",", "cwd", ")", "\n", "\n", "return", "script_name", "\n", "\n", "", "return", "'none'", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.config.settings.RunSettings.path_": [[81, 84], ["os.path.join"], "methods", ["None"], ["", "@", "property", "\n", "def", "path_", "(", "self", ")", ":", "\n", "        ", "return", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "self", ".", "experiment", ",", "self", ".", "script_name_", ",", "self", ".", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.config.settings.RunSettings.device_": [[85, 88], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "device_", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "gpus_", "[", "self", ".", "rank", "%", "self", ".", "nranks", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.config.settings.IndexingSettings.index_path_": [[157, 160], ["os.path.join"], "methods", ["None"], ["@", "property", "\n", "def", "index_path_", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "index_path", "or", "os", ".", "path", ".", "join", "(", "self", ".", "index_root_", ",", "self", ".", "index_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.config.core_config.CoreConfig.__post_init__": [[21, 36], ["dataclasses.fields", "getattr", "isinstance", "setattr", "isinstance"], "methods", ["None"], ["    ", "def", "__post_init__", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Source: https://stackoverflow.com/a/58081120/1493011\n        \"\"\"", "\n", "\n", "self", ".", "assigned", "=", "{", "}", "\n", "\n", "for", "field", "in", "fields", "(", "self", ")", ":", "\n", "            ", "field_val", "=", "getattr", "(", "self", ",", "field", ".", "name", ")", "\n", "\n", "if", "isinstance", "(", "field_val", ",", "DefaultVal", ")", "or", "field_val", "is", "None", ":", "\n", "                ", "setattr", "(", "self", ",", "field", ".", "name", ",", "field", ".", "default", ".", "val", ")", "\n", "\n", "", "if", "not", "isinstance", "(", "field_val", ",", "DefaultVal", ")", ":", "\n", "                ", "self", ".", "assigned", "[", "field", ".", "name", "]", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.config.core_config.CoreConfig.assign_defaults": [[37, 41], ["dataclasses.fields", "setattr"], "methods", ["None"], ["", "", "", "def", "assign_defaults", "(", "self", ")", ":", "\n", "        ", "for", "field", "in", "fields", "(", "self", ")", ":", "\n", "            ", "setattr", "(", "self", ",", "field", ".", "name", ",", "field", ".", "default", ".", "val", ")", "\n", "self", ".", "assigned", "[", "field", ".", "name", "]", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.config.core_config.CoreConfig.configure": [[42, 56], ["core_config.CoreConfig.set"], "methods", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.config.core_config.CoreConfig.set"], ["", "", "def", "configure", "(", "self", ",", "ignore_unrecognized", "=", "True", ",", "**", "kw_args", ")", ":", "\n", "        ", "ignored", "=", "set", "(", ")", "\n", "\n", "for", "key", ",", "value", "in", "kw_args", ".", "items", "(", ")", ":", "\n", "            ", "self", ".", "set", "(", "key", ",", "value", ",", "ignore_unrecognized", ")", "or", "ignored", ".", "update", "(", "{", "key", "}", ")", "\n", "\n", "", "return", "ignored", "\n", "\n", "\"\"\"\n        # TODO: Take a config object, not kw_args.\n\n        for key in config.assigned:\n            value = getattr(config, key)\n        \"\"\"", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.config.core_config.CoreConfig.set": [[57, 65], ["hasattr", "setattr", "Exception", "type"], "methods", ["None"], ["", "def", "set", "(", "self", ",", "key", ",", "value", ",", "ignore_unrecognized", "=", "False", ")", ":", "\n", "        ", "if", "hasattr", "(", "self", ",", "key", ")", ":", "\n", "            ", "setattr", "(", "self", ",", "key", ",", "value", ")", "\n", "self", ".", "assigned", "[", "key", "]", "=", "True", "\n", "return", "True", "\n", "\n", "", "if", "not", "ignore_unrecognized", ":", "\n", "            ", "raise", "Exception", "(", "f\"Unrecognized key `{key}` for {type(self)}\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.config.core_config.CoreConfig.help": [[66, 68], ["print", "ujson.dumps", "dataclasses.asdict"], "methods", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.infra.run.Run.print"], ["", "", "def", "help", "(", "self", ")", ":", "\n", "        ", "print", "(", "ujson", ".", "dumps", "(", "dataclasses", ".", "asdict", "(", "self", ")", ",", "indent", "=", "4", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.config.core_config.CoreConfig.__export_value": [[69, 79], ["hasattr", "v.provenance", "isinstance", "isinstance", "len", "len", "list", "len", "len", "v.keys"], "methods", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.distillation.ranking_scorer.RankingScorer.provenance", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.data.queries.Queries.keys"], ["", "def", "__export_value", "(", "self", ",", "v", ")", ":", "\n", "        ", "v", "=", "v", ".", "provenance", "(", ")", "if", "hasattr", "(", "v", ",", "'provenance'", ")", "else", "v", "\n", "\n", "if", "isinstance", "(", "v", ",", "list", ")", "and", "len", "(", "v", ")", ">", "100", ":", "\n", "            ", "v", "=", "(", "f\"list with {len(v)} elements starting with...\"", ",", "v", "[", ":", "3", "]", ")", "\n", "\n", "", "if", "isinstance", "(", "v", ",", "dict", ")", "and", "len", "(", "v", ")", ">", "100", ":", "\n", "            ", "v", "=", "(", "f\"dict with {len(v)} keys starting with...\"", ",", "list", "(", "v", ".", "keys", "(", ")", ")", "[", ":", "3", "]", ")", "\n", "\n", "", "return", "v", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.config.core_config.CoreConfig.export": [[80, 87], ["dataclasses.asdict", "dataclasses.asdict.items", "core_config.CoreConfig.__export_value"], "methods", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.data.ranking.Ranking.items", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.config.core_config.CoreConfig.__export_value"], ["", "def", "export", "(", "self", ")", ":", "\n", "        ", "d", "=", "dataclasses", ".", "asdict", "(", "self", ")", "\n", "\n", "for", "k", ",", "v", "in", "d", ".", "items", "(", ")", ":", "\n", "            ", "d", "[", "k", "]", "=", "self", ".", "__export_value", "(", "v", ")", "\n", "\n", "", "return", "d", "\n", "", "", ""]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utilities.create_triples.Triples.__init__": [[16, 23], ["random.seed", "colbert.data.ranking.Ranking.cast", "colbert.data.ranking.Ranking.cast.provenance", "colbert.data.ranking.Ranking.cast.todict"], "methods", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.data.examples.Examples.cast", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.distillation.ranking_scorer.RankingScorer.provenance", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.data.ranking.Ranking.todict"], ["self", ".", "qid2rankings", "=", "Ranking", ".", "cast", "(", "ranking", ")", ".", "todict", "(", ")", "\n", "\n", "", "def", "create", "(", "self", ",", "positives", ",", "depth", ")", ":", "\n", "        ", "assert", "all", "(", "len", "(", "x", ")", "==", "2", "for", "x", "in", "positives", ")", "\n", "assert", "all", "(", "maxBest", "<=", "maxDepth", "for", "maxBest", ",", "maxDepth", "in", "positives", ")", ",", "positives", "\n", "\n", "Triples", "=", "[", "]", "\n", "NonEmptyQIDs", "=", "0", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utilities.create_triples.Triples.create": [[24, 56], ["all", "all", "enumerate", "colbert.utils.utils.print_message", "colbert.utils.utils.print_message", "colbert.utils.utils.print_message", "random.shuffle", "colbert.data.examples.Examples", "utility.supervision.triples.sample_for_query", "random.sample.extend", "len", "random.sample", "len", "colbert.utils.utils.print_message", "len", "len", "str", "len"], "methods", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.data.collection.Collection.enumerate", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.utils.print_message", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.utils.print_message", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.utils.print_message", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.supervision.self_training.sample_for_query", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.utils.print_message"], ["\n", "for", "processing_idx", ",", "qid", "in", "enumerate", "(", "self", ".", "qid2rankings", ")", ":", "\n", "            ", "l", "=", "sample_for_query", "(", "qid", ",", "self", ".", "qid2rankings", "[", "qid", "]", ",", "positives", ",", "depth", ",", "False", ",", "None", ")", "\n", "NonEmptyQIDs", "+=", "(", "len", "(", "l", ")", ">", "0", ")", "\n", "Triples", ".", "extend", "(", "l", ")", "\n", "\n", "if", "processing_idx", "%", "(", "10_000", ")", "==", "0", ":", "\n", "                ", "print_message", "(", "f\"#> Done with {processing_idx+1} questions!\\t\\t \"", "\n", "f\"{str(len(Triples) / 1000)}k triples for {NonEmptyQIDs} unqiue QIDs.\"", ")", "\n", "\n", "", "", "print_message", "(", "f\"#> Sub-sample the triples (if > {MAX_NUM_TRIPLES})..\"", ")", "\n", "print_message", "(", "f\"#> len(Triples) = {len(Triples)}\"", ")", "\n", "\n", "if", "len", "(", "Triples", ")", ">", "MAX_NUM_TRIPLES", ":", "\n", "            ", "Triples", "=", "random", ".", "sample", "(", "Triples", ",", "MAX_NUM_TRIPLES", ")", "\n", "\n", "### Prepare the triples ###", "\n", "", "print_message", "(", "\"#> Shuffling the triples...\"", ")", "\n", "random", ".", "shuffle", "(", "Triples", ")", "\n", "\n", "self", ".", "Triples", "=", "Examples", "(", "data", "=", "Triples", ")", "\n", "\n", "return", "Triples", "\n", "\n", "", "def", "save", "(", "self", ",", "new_path", ")", ":", "\n", "        ", "Examples", "(", "data", "=", "self", ".", "Triples", ")", ".", "save", "(", "new_path", ")", "\n", "\n", "# save_metadata(f'{output}.meta', args)  # TODO: What args to save?? {seed, positives, depth, rankings if path or else whatever provenance the rankings object shares}", "\n", "\n", "", "", ""]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utilities.create_triples.Triples.save": [[57, 66], ["colbert.infra.provenance.Provenance", "colbert.data.examples.Examples().save", "colbert.data.examples.Examples"], "methods", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.codecs.residual_embeddings.ResidualEmbeddings.save"], []], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utilities.minicorpus.sample_minicorpus": [[11, 63], ["random.seed", "colbert.data.collection.Collection", "colbert.data.queries.Queries().qas", "colbert.data.queries.Queries().qas", "colbert.data.ranking.Ranking().todict", "colbert.data.ranking.Ranking().todict", "random.sample", "random.sample", "sorted", "print", "colbert.utils.utils.create_directory", "colbert.utils.utils.create_directory", "colbert.data.queries.Queries", "colbert.data.queries.Queries.save", "colbert.data.queries.Queries.save_qas", "colbert.data.queries.Queries", "colbert.data.queries.Queries.save", "colbert.data.queries.Queries.save_qas", "print", "colbert.data.collection.Collection().save", "print", "list", "min", "list", "min", "list", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "colbert.data.queries.Queries", "colbert.data.queries.Queries", "colbert.data.ranking.Ranking", "colbert.data.ranking.Ranking", "Queries().qas.keys", "len", "Queries().qas.keys", "len", "set", "colbert.data.collection.Collection", "Queries().qas.keys", "Queries().qas.keys", "len", "os.path.join"], "function", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.data.queries.Queries.qas", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.data.queries.Queries.qas", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.data.ranking.Ranking.todict", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.data.ranking.Ranking.todict", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.infra.run.Run.print", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.utils.create_directory", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.utils.create_directory", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.codecs.residual_embeddings.ResidualEmbeddings.save", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.data.queries.Queries.save_qas", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.codecs.residual_embeddings.ResidualEmbeddings.save", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.data.queries.Queries.save_qas", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.infra.run.Run.print", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.codecs.residual_embeddings.ResidualEmbeddings.save", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.infra.run.Run.print", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.data.queries.Queries.keys", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.data.queries.Queries.keys", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.config.core_config.CoreConfig.set", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.data.queries.Queries.keys", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.data.queries.Queries.keys"], ["\n", "\n", "random", ".", "seed", "(", "12345", ")", "\n", "\n", "# Load collection", "\n", "collection", "=", "Collection", "(", "path", "=", "'/dfs/scratch0/okhattab/OpenQA/collection.tsv'", ")", "\n", "\n", "# Load train and dev queries", "\n", "qas_train", "=", "Queries", "(", "path", "=", "'/dfs/scratch0/okhattab/OpenQA/NQ/train/qas.json'", ")", ".", "qas", "(", ")", "\n", "qas_dev", "=", "Queries", "(", "path", "=", "'/dfs/scratch0/okhattab/OpenQA/NQ/dev/qas.json'", ")", ".", "qas", "(", ")", "\n", "\n", "# Load train and dev C3 rankings", "\n", "ranking_train", "=", "Ranking", "(", "path", "=", "'/dfs/scratch0/okhattab/OpenQA/NQ/train/rankings/C3.tsv.annotated'", ")", ".", "todict", "(", ")", "\n", "ranking_dev", "=", "Ranking", "(", "path", "=", "'/dfs/scratch0/okhattab/OpenQA/NQ/dev/rankings/C3.tsv.annotated'", ")", ".", "todict", "(", ")", "\n", "\n", "# Sample NT and ND queries from each, keep only the top-k passages for those", "\n", "sample_train", "=", "random", ".", "sample", "(", "list", "(", "qas_train", ".", "keys", "(", ")", ")", ",", "min", "(", "len", "(", "qas_train", ".", "keys", "(", ")", ")", ",", "300", "*", "factor", ")", ")", "\n", "sample_dev", "=", "random", ".", "sample", "(", "list", "(", "qas_dev", ".", "keys", "(", ")", ")", ",", "min", "(", "len", "(", "qas_dev", ".", "keys", "(", ")", ")", ",", "maxdev", ",", "30", "*", "factor", ")", ")", "\n", "\n", "train_pids", "=", "[", "pid", "for", "qid", "in", "sample_train", "for", "qpids", "in", "ranking_train", "[", "qid", "]", "[", ":", "topk", "]", "for", "pid", "in", "qpids", "]", "\n", "dev_pids", "=", "[", "pid", "for", "qid", "in", "sample_dev", "for", "qpids", "in", "ranking_dev", "[", "qid", "]", "[", ":", "topk", "]", "for", "pid", "in", "qpids", "]", "\n", "\n", "sample_pids", "=", "sorted", "(", "list", "(", "set", "(", "train_pids", "+", "dev_pids", ")", ")", ")", "\n", "print", "(", "f'len(sample_pids) = {len(sample_pids)}'", ")", "\n", "\n", "# Save the new query sets: train and dev", "\n", "ROOT", "=", "f'/future/u/okhattab/root/unit/data/NQ-{name}'", "\n", "\n", "create_directory", "(", "os", ".", "path", ".", "join", "(", "ROOT", ",", "'train'", ")", ")", "\n", "create_directory", "(", "os", ".", "path", ".", "join", "(", "ROOT", ",", "'dev'", ")", ")", "\n", "\n", "new_train", "=", "Queries", "(", "data", "=", "{", "qid", ":", "qas_train", "[", "qid", "]", "for", "qid", "in", "sample_train", "}", ")", "\n", "new_train", ".", "save", "(", "os", ".", "path", ".", "join", "(", "ROOT", ",", "'train/questions.tsv'", ")", ")", "\n", "new_train", ".", "save_qas", "(", "os", ".", "path", ".", "join", "(", "ROOT", ",", "'train/qas.json'", ")", ")", "\n", "\n", "new_dev", "=", "Queries", "(", "data", "=", "{", "qid", ":", "qas_dev", "[", "qid", "]", "for", "qid", "in", "sample_dev", "}", ")", "\n", "new_dev", ".", "save", "(", "os", ".", "path", ".", "join", "(", "ROOT", ",", "'dev/questions.tsv'", ")", ")", "\n", "new_dev", ".", "save_qas", "(", "os", ".", "path", ".", "join", "(", "ROOT", ",", "'dev/qas.json'", ")", ")", "\n", "\n", "# Save the new collection", "\n", "print", "(", "f\"Saving to {os.path.join(ROOT, 'collection.tsv')}\"", ")", "\n", "Collection", "(", "data", "=", "[", "collection", "[", "pid", "]", "for", "pid", "in", "sample_pids", "]", ")", ".", "save", "(", "os", ".", "path", ".", "join", "(", "ROOT", ",", "'collection.tsv'", ")", ")", "\n", "\n", "print", "(", "'#> Done!'", ")", "\n", "\n", "\n", "", "if", "__name__", "==", "'__main__'", ":", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utilities.annotate_em.AnnotateEM.__init__": [[23, 38], ["utility.utils.qa_loaders.load_qas_", "colbert.data.collection.Collection.cast", "multiprocessing.Pool", "colbert.utils.utils.print_message", "list", "annotate_em.AnnotateEM.parallel_pool.map", "len", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.qa_loaders.load_qas_", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.data.examples.Examples.cast", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.utils.print_message"], ["    ", "def", "__init__", "(", "self", ",", "collection", ",", "qas", ")", ":", "\n", "# TODO: These should just be Queries! But Queries needs to support looking up answers as qid2answers below.", "\n", "        ", "qas", "=", "load_qas_", "(", "qas", ")", "\n", "collection", "=", "Collection", ".", "cast", "(", "collection", ")", "# .tolist() #load_collection_(collection, retain_titles=True)", "\n", "\n", "self", ".", "parallel_pool", "=", "Pool", "(", "30", ")", "\n", "\n", "print_message", "(", "'#> Tokenize the answers in the Q&As in parallel...'", ")", "\n", "qas", "=", "list", "(", "self", ".", "parallel_pool", ".", "map", "(", "tokenize_all_answers", ",", "qas", ")", ")", "\n", "\n", "qid2answers", "=", "{", "qid", ":", "tok_answers", "for", "qid", ",", "_", ",", "tok_answers", "in", "qas", "}", "\n", "assert", "len", "(", "qas", ")", "==", "len", "(", "qid2answers", ")", ",", "(", "len", "(", "qas", ")", ",", "len", "(", "qid2answers", ")", ")", "\n", "\n", "self", ".", "qas", ",", "self", ".", "collection", "=", "qas", ",", "collection", "\n", "self", ".", "qid2answers", "=", "qid2answers", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utilities.annotate_em.AnnotateEM.annotate": [[39, 62], ["colbert.data.ranking.Ranking.cast", "colbert.utils.utils.print_message", "colbert.utils.utils.print_message", "list", "colbert.utils.utils.groupby_first_item", "check_sizes", "annotate_em.AnnotateEM._compute_labels", "print", "colbert.data.ranking.Ranking", "annotate_em.AnnotateEM.parallel_pool.map", "colbert.data.ranking.Ranking.cast.provenance", "colbert.data.ranking.Ranking.cast.tolist", "enumerate", "colbert.data.ranking.Ranking.cast.provenance"], "methods", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.data.examples.Examples.cast", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.utils.print_message", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.utils.print_message", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.utils.groupby_first_item", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.evaluate.annotate_EM_helpers.check_sizes", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utilities.annotate_em.AnnotateEM._compute_labels", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.infra.run.Run.print", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.distillation.ranking_scorer.RankingScorer.provenance", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.data.examples.Examples.tolist", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.data.collection.Collection.enumerate", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.distillation.ranking_scorer.RankingScorer.provenance"], ["", "def", "annotate", "(", "self", ",", "ranking", ")", ":", "\n", "        ", "rankings", "=", "Ranking", ".", "cast", "(", "ranking", ")", "\n", "\n", "# print(len(rankings), rankings[0])", "\n", "\n", "print_message", "(", "'#> Lookup passages from PIDs...'", ")", "\n", "expanded_rankings", "=", "[", "(", "qid", ",", "pid", ",", "rank", ",", "self", ".", "collection", "[", "pid", "]", ",", "self", ".", "qid2answers", "[", "qid", "]", ")", "\n", "for", "qid", ",", "pid", ",", "rank", ",", "*", "_", "in", "rankings", ".", "tolist", "(", ")", "]", "\n", "\n", "print_message", "(", "'#> Assign labels in parallel...'", ")", "\n", "labeled_rankings", "=", "list", "(", "self", ".", "parallel_pool", ".", "map", "(", "assign_label_to_passage", ",", "enumerate", "(", "expanded_rankings", ")", ")", ")", "\n", "\n", "# Dump output.", "\n", "self", ".", "qid2rankings", "=", "groupby_first_item", "(", "labeled_rankings", ")", "\n", "\n", "self", ".", "num_judged_queries", ",", "self", ".", "num_ranked_queries", "=", "check_sizes", "(", "self", ".", "qid2answers", ",", "self", ".", "qid2rankings", ")", "\n", "\n", "# Evaluation metrics and depths.", "\n", "self", ".", "success", ",", "self", ".", "counts", "=", "self", ".", "_compute_labels", "(", "self", ".", "qid2answers", ",", "self", ".", "qid2rankings", ")", "\n", "\n", "print", "(", "rankings", ".", "provenance", "(", ")", ",", "self", ".", "success", ")", "\n", "\n", "return", "Ranking", "(", "data", "=", "self", ".", "qid2rankings", ",", "provenance", "=", "(", "\"AnnotateEM\"", ",", "rankings", ".", "provenance", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utilities.annotate_em.AnnotateEM._compute_labels": [[63, 90], ["labels.append", "sum", "sum", "sum", "sum"], "methods", ["None"], ["", "def", "_compute_labels", "(", "self", ",", "qid2answers", ",", "qid2rankings", ")", ":", "\n", "        ", "cutoffs", "=", "[", "1", ",", "5", ",", "10", ",", "20", ",", "30", ",", "50", ",", "100", ",", "1000", ",", "'all'", "]", "\n", "success", "=", "{", "cutoff", ":", "0.0", "for", "cutoff", "in", "cutoffs", "}", "\n", "counts", "=", "{", "cutoff", ":", "0.0", "for", "cutoff", "in", "cutoffs", "}", "\n", "\n", "for", "qid", "in", "qid2answers", ":", "\n", "            ", "if", "qid", "not", "in", "qid2rankings", ":", "\n", "                ", "continue", "\n", "\n", "", "prev_rank", "=", "0", "# ranks should start at one (i.e., and not zero)", "\n", "labels", "=", "[", "]", "\n", "\n", "for", "pid", ",", "rank", ",", "label", "in", "qid2rankings", "[", "qid", "]", ":", "\n", "                ", "assert", "rank", "==", "prev_rank", "+", "1", ",", "(", "qid", ",", "pid", ",", "(", "prev_rank", ",", "rank", ")", ")", "\n", "prev_rank", "=", "rank", "\n", "\n", "labels", ".", "append", "(", "label", ")", "\n", "\n", "", "for", "cutoff", "in", "cutoffs", ":", "\n", "                ", "if", "cutoff", "!=", "'all'", ":", "\n", "                    ", "success", "[", "cutoff", "]", "+=", "sum", "(", "labels", "[", ":", "cutoff", "]", ")", ">", "0", "\n", "counts", "[", "cutoff", "]", "+=", "sum", "(", "labels", "[", ":", "cutoff", "]", ")", "\n", "", "else", ":", "\n", "                    ", "success", "[", "cutoff", "]", "+=", "sum", "(", "labels", ")", ">", "0", "\n", "counts", "[", "cutoff", "]", "+=", "sum", "(", "labels", ")", "\n", "\n", "", "", "", "return", "success", ",", "counts", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utilities.annotate_em.AnnotateEM.save": [[91, 106], ["colbert.utils.utils.print_message", "colbert.data.ranking.Ranking().save", "colbert.infra.run.Run().open", "f.write", "colbert.data.ranking.Ranking", "colbert.infra.run.Run", "annotate_em.AnnotateEM.success.items", "annotate_em.AnnotateEM.counts.items", "utility.utils.save_metadata.format_metadata"], "methods", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.utils.print_message", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.codecs.residual_embeddings.ResidualEmbeddings.save", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.infra.run.Run.open", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.data.ranking.Ranking.items", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.data.ranking.Ranking.items", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.save_metadata.format_metadata"], ["", "def", "save", "(", "self", ",", "new_path", ")", ":", "\n", "        ", "print_message", "(", "\"#> Dumping output to\"", ",", "new_path", ",", "\"...\"", ")", "\n", "\n", "Ranking", "(", "data", "=", "self", ".", "qid2rankings", ")", ".", "save", "(", "new_path", ")", "\n", "\n", "# Dump metrics.", "\n", "with", "Run", "(", ")", ".", "open", "(", "f'{new_path}.metrics'", ",", "'w'", ")", "as", "f", ":", "\n", "            ", "d", "=", "{", "'num_ranked_queries'", ":", "self", ".", "num_ranked_queries", ",", "'num_judged_queries'", ":", "self", ".", "num_judged_queries", "}", "\n", "\n", "extra", "=", "'__WARNING'", "if", "self", ".", "num_judged_queries", "!=", "self", ".", "num_ranked_queries", "else", "''", "\n", "d", "[", "f'success{extra}'", "]", "=", "{", "k", ":", "v", "/", "self", ".", "num_judged_queries", "for", "k", ",", "v", "in", "self", ".", "success", ".", "items", "(", ")", "}", "\n", "d", "[", "f'counts{extra}'", "]", "=", "{", "k", ":", "v", "/", "self", ".", "num_judged_queries", "for", "k", ",", "v", "in", "self", ".", "counts", ".", "items", "(", ")", "}", "\n", "# d['arguments'] = get_metadata(args)  # TODO: Need arguments...", "\n", "\n", "f", ".", "write", "(", "format_metadata", "(", "d", ")", "+", "'\\n'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.data.collection.Collection.__init__": [[15, 18], ["collection.Collection._load_file"], "methods", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.data.examples.Examples._load_file"], ["    ", "def", "__init__", "(", "self", ",", "path", "=", "None", ",", "data", "=", "None", ")", ":", "\n", "        ", "self", ".", "path", "=", "path", "\n", "self", ".", "data", "=", "data", "or", "self", ".", "_load_file", "(", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.data.collection.Collection.__iter__": [[19, 22], ["collection.Collection.data.__iter__"], "methods", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.data.queries.Queries.__iter__"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "# TODO: If __data isn't there, stream from disk!", "\n", "        ", "return", "self", ".", "data", ".", "__iter__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.data.collection.Collection.__getitem__": [[23, 26], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "item", ")", ":", "\n", "# TODO: Load from disk the first time this is called. Unless self.data is already not None.", "\n", "        ", "return", "self", ".", "data", "[", "item", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.data.collection.Collection.__len__": [[27, 30], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "# TODO: Load here too. Basically, let's make data a property function and, on first call, either load or get __data.", "\n", "        ", "return", "len", "(", "self", ".", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.data.collection.Collection._load_file": [[31, 34], ["path.endswith", "collection.Collection._load_tsv", "collection.Collection._load_jsonl"], "methods", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.data.ranking.Ranking._load_tsv", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.data.ranking.Ranking._load_jsonl"], ["", "def", "_load_file", "(", "self", ",", "path", ")", ":", "\n", "        ", "self", ".", "path", "=", "path", "\n", "return", "self", ".", "_load_tsv", "(", "path", ")", "if", "path", ".", "endswith", "(", "'.tsv'", ")", "else", "self", ".", "_load_jsonl", "(", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.data.collection.Collection._load_tsv": [[35, 37], ["colbert.evaluation.loaders.load_collection"], "methods", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.evaluation.loaders.load_collection"], ["", "def", "_load_tsv", "(", "self", ",", "path", ")", ":", "\n", "        ", "return", "load_collection", "(", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.data.collection.Collection._load_jsonl": [[38, 40], ["NotImplementedError"], "methods", ["None"], ["", "def", "_load_jsonl", "(", "self", ",", "path", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.data.collection.Collection.provenance": [[41, 43], ["None"], "methods", ["None"], ["", "def", "provenance", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "path", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.data.collection.Collection.toDict": [[44, 46], ["collection.Collection.provenance"], "methods", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.distillation.ranking_scorer.RankingScorer.provenance"], ["", "def", "toDict", "(", "self", ")", ":", "\n", "        ", "return", "{", "'provenance'", ":", "self", ".", "provenance", "(", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.data.collection.Collection.save": [[47, 58], ["new_path.endswith", "os.path.exists", "colbert.infra.run.Run().open", "collection.Collection.enumerate"], "methods", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.infra.run.Run.open", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.data.collection.Collection.enumerate"], ["", "def", "save", "(", "self", ",", "new_path", ")", ":", "\n", "        ", "assert", "new_path", ".", "endswith", "(", "'.tsv'", ")", ",", "\"TODO: Support .json[l] too.\"", "\n", "assert", "not", "os", ".", "path", ".", "exists", "(", "new_path", ")", ",", "new_path", "\n", "\n", "with", "Run", "(", ")", ".", "open", "(", "new_path", ",", "'w'", ")", "as", "f", ":", "\n", "# TODO: expects content to always be a string here; no separate title!", "\n", "            ", "for", "pid", ",", "content", "in", "enumerate", "(", "self", ".", "data", ")", ":", "\n", "                ", "content", "=", "f'{pid}\\t{content}\\n'", "\n", "f", ".", "write", "(", "content", ")", "\n", "\n", "", "return", "f", ".", "name", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.data.collection.Collection.enumerate": [[59, 63], ["collection.Collection.enumerate_batches", "collection.Collection.enumerate"], "methods", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.data.collection.Collection.enumerate_batches", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.data.collection.Collection.enumerate"], ["", "", "def", "enumerate", "(", "self", ",", "rank", ")", ":", "\n", "        ", "for", "_", ",", "offset", ",", "passages", "in", "self", ".", "enumerate_batches", "(", "rank", "=", "rank", ")", ":", "\n", "            ", "for", "idx", ",", "passage", "in", "enumerate", "(", "passages", ")", ":", "\n", "                ", "yield", "(", "offset", "+", "idx", ",", "passage", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.data.collection.Collection.enumerate_batches": [[64, 82], ["iter", "collection.Collection.enumerate"], "methods", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.data.collection.Collection.enumerate"], ["", "", "", "def", "enumerate_batches", "(", "self", ",", "rank", ",", "chunksize", "=", "None", ")", ":", "\n", "        ", "assert", "rank", "is", "not", "None", ",", "\"TODO: Add support for the rank=None case.\"", "\n", "\n", "chunksize", "=", "chunksize", "or", "self", ".", "get_chunksize", "(", ")", "\n", "\n", "offset", "=", "0", "\n", "iterator", "=", "iter", "(", "self", ")", "\n", "\n", "for", "chunk_idx", ",", "owner", "in", "enumerate", "(", "itertools", ".", "cycle", "(", "range", "(", "Run", "(", ")", ".", "nranks", ")", ")", ")", ":", "\n", "            ", "L", "=", "[", "line", "for", "_", ",", "line", "in", "zip", "(", "range", "(", "chunksize", ")", ",", "iterator", ")", "]", "\n", "\n", "if", "len", "(", "L", ")", ">", "0", "and", "owner", "==", "rank", ":", "\n", "                ", "yield", "(", "chunk_idx", ",", "offset", ",", "L", ")", "\n", "\n", "", "offset", "+=", "len", "(", "L", ")", "\n", "\n", "if", "len", "(", "L", ")", "<", "chunksize", ":", "\n", "                ", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.data.collection.Collection.get_chunksize": [[83, 85], ["min", "len", "colbert.infra.run.Run"], "methods", ["None"], ["", "", "", "def", "get_chunksize", "(", "self", ")", ":", "\n", "        ", "return", "min", "(", "25_000", ",", "1", "+", "len", "(", "self", ")", "//", "Run", "(", ")", ".", "nranks", ")", "# 25k is great, 10k allows things to reside on GPU??", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.data.collection.Collection.cast": [[86, 98], ["type", "cls", "type", "cls", "type", "type"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "cast", "(", "cls", ",", "obj", ")", ":", "\n", "        ", "if", "type", "(", "obj", ")", "is", "str", ":", "\n", "            ", "return", "cls", "(", "path", "=", "obj", ")", "\n", "\n", "", "if", "type", "(", "obj", ")", "is", "list", ":", "\n", "            ", "return", "cls", "(", "data", "=", "obj", ")", "\n", "\n", "", "if", "type", "(", "obj", ")", "is", "cls", ":", "\n", "            ", "return", "obj", "\n", "\n", "", "assert", "False", ",", "f\"obj has type {type(obj)} which is not compatible with cast()\"", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.data.queries.Queries.__init__": [[12, 18], ["isinstance", "type", "queries.Queries._load_data", "queries.Queries._load_file"], "methods", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.data.queries.Queries._load_data", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.data.examples.Examples._load_file"], ["    ", "def", "__init__", "(", "self", ",", "path", "=", "None", ",", "data", "=", "None", ")", ":", "\n", "        ", "self", ".", "path", "=", "path", "\n", "\n", "if", "data", ":", "\n", "            ", "assert", "isinstance", "(", "data", ",", "dict", ")", ",", "type", "(", "data", ")", "\n", "", "self", ".", "_load_data", "(", "data", ")", "or", "self", ".", "_load_file", "(", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.data.queries.Queries.__len__": [[19, 21], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.data.queries.Queries.__iter__": [[22, 24], ["iter", "queries.Queries.data.items"], "methods", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.data.ranking.Ranking.items"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "return", "iter", "(", "self", ".", "data", ".", "items", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.data.queries.Queries.provenance": [[25, 27], ["None"], "methods", ["None"], ["", "def", "provenance", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "path", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.data.queries.Queries.toDict": [[28, 30], ["queries.Queries.provenance"], "methods", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.distillation.ranking_scorer.RankingScorer.provenance"], ["", "def", "toDict", "(", "self", ")", ":", "\n", "        ", "return", "{", "'provenance'", ":", "self", ".", "provenance", "(", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.data.queries.Queries._load_data": [[31, 49], ["data.items", "isinstance", "len"], "methods", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.data.ranking.Ranking.items"], ["", "def", "_load_data", "(", "self", ",", "data", ")", ":", "\n", "        ", "if", "data", "is", "None", ":", "\n", "            ", "return", "None", "\n", "\n", "", "self", ".", "data", "=", "{", "}", "\n", "self", ".", "_qas", "=", "{", "}", "\n", "\n", "for", "qid", ",", "content", "in", "data", ".", "items", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "content", ",", "dict", ")", ":", "\n", "                ", "self", ".", "data", "[", "qid", "]", "=", "content", "[", "'question'", "]", "\n", "self", ".", "_qas", "[", "qid", "]", "=", "content", "\n", "", "else", ":", "\n", "                ", "self", ".", "data", "[", "qid", "]", "=", "content", "\n", "\n", "", "", "if", "len", "(", "self", ".", "_qas", ")", "==", "0", ":", "\n", "            ", "del", "self", ".", "_qas", "\n", "\n", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.data.queries.Queries._load_file": [[50, 68], ["path.endswith", "colbert.evaluation.loaders.load_queries", "open", "ujson.loads"], "methods", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.evaluation.loaders.load_queries", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.infra.run.Run.open"], ["", "def", "_load_file", "(", "self", ",", "path", ")", ":", "\n", "        ", "if", "not", "path", ".", "endswith", "(", "'.json'", ")", ":", "\n", "            ", "self", ".", "data", "=", "load_queries", "(", "path", ")", "\n", "return", "True", "\n", "\n", "# Load QAs", "\n", "", "self", ".", "data", "=", "{", "}", "\n", "self", ".", "_qas", "=", "{", "}", "\n", "\n", "with", "open", "(", "path", ")", "as", "f", ":", "\n", "            ", "for", "line", "in", "f", ":", "\n", "                ", "qa", "=", "ujson", ".", "loads", "(", "line", ")", "\n", "\n", "assert", "qa", "[", "'qid'", "]", "not", "in", "self", ".", "data", "\n", "self", ".", "data", "[", "qa", "[", "'qid'", "]", "]", "=", "qa", "[", "'question'", "]", "\n", "self", ".", "_qas", "[", "qa", "[", "'qid'", "]", "]", "=", "qa", "\n", "\n", "", "", "return", "self", ".", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.data.queries.Queries.qas": [[69, 71], ["dict"], "methods", ["None"], ["", "def", "qas", "(", "self", ")", ":", "\n", "        ", "return", "dict", "(", "self", ".", "_qas", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.data.queries.Queries.__getitem__": [[72, 74], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "key", ")", ":", "\n", "        ", "return", "self", ".", "data", "[", "key", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.data.queries.Queries.keys": [[75, 77], ["queries.Queries.data.keys"], "methods", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.data.queries.Queries.keys"], ["", "def", "keys", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "data", ".", "keys", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.data.queries.Queries.values": [[78, 80], ["queries.Queries.data.values"], "methods", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.data.queries.Queries.values"], ["", "def", "values", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "data", ".", "values", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.data.queries.Queries.items": [[81, 83], ["queries.Queries.data.items"], "methods", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.data.ranking.Ranking.items"], ["", "def", "items", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "data", ".", "items", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.data.queries.Queries.save": [[84, 94], ["new_path.endswith", "os.path.exists", "colbert.infra.run.Run().open", "queries.Queries.data.items", "f.write", "colbert.infra.run.Run"], "methods", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.infra.run.Run.open", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.data.ranking.Ranking.items"], ["", "def", "save", "(", "self", ",", "new_path", ")", ":", "\n", "        ", "assert", "new_path", ".", "endswith", "(", "'.tsv'", ")", "\n", "assert", "not", "os", ".", "path", ".", "exists", "(", "new_path", ")", ",", "new_path", "\n", "\n", "with", "Run", "(", ")", ".", "open", "(", "new_path", ",", "'w'", ")", "as", "f", ":", "\n", "            ", "for", "qid", ",", "content", "in", "self", ".", "data", ".", "items", "(", ")", ":", "\n", "                ", "content", "=", "f'{qid}\\t{content}\\n'", "\n", "f", ".", "write", "(", "content", ")", "\n", "\n", "", "return", "f", ".", "name", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.data.queries.Queries.save_qas": [[95, 103], ["new_path.endswith", "os.path.exists", "open", "queries.Queries._qas.items", "f.write", "ujson.dumps"], "methods", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.infra.run.Run.open", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.data.ranking.Ranking.items"], ["", "", "def", "save_qas", "(", "self", ",", "new_path", ")", ":", "\n", "        ", "assert", "new_path", ".", "endswith", "(", "'.json'", ")", "\n", "assert", "not", "os", ".", "path", ".", "exists", "(", "new_path", ")", ",", "new_path", "\n", "\n", "with", "open", "(", "new_path", ",", "'w'", ")", "as", "f", ":", "\n", "            ", "for", "qid", ",", "qa", "in", "self", ".", "_qas", ".", "items", "(", ")", ":", "\n", "                ", "qa", "[", "'qid'", "]", "=", "qid", "\n", "f", ".", "write", "(", "ujson", ".", "dumps", "(", "qa", ")", "+", "'\\n'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.data.queries.Queries._load_tsv": [[104, 106], ["None"], "methods", ["None"], ["", "", "", "def", "_load_tsv", "(", "self", ",", "path", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.data.queries.Queries._load_jsonl": [[107, 109], ["None"], "methods", ["None"], ["", "def", "_load_jsonl", "(", "self", ",", "path", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.data.queries.Queries.cast": [[110, 122], ["type", "cls", "isinstance", "isinstance", "cls", "type", "type"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "cast", "(", "cls", ",", "obj", ")", ":", "\n", "        ", "if", "type", "(", "obj", ")", "is", "str", ":", "\n", "            ", "return", "cls", "(", "path", "=", "obj", ")", "\n", "\n", "", "if", "isinstance", "(", "obj", ",", "dict", ")", "or", "isinstance", "(", "obj", ",", "list", ")", ":", "\n", "            ", "return", "cls", "(", "data", "=", "obj", ")", "\n", "\n", "", "if", "type", "(", "obj", ")", "is", "cls", ":", "\n", "            ", "return", "obj", "\n", "\n", "", "assert", "False", ",", "f\"obj has type {type(obj)} which is not compatible with cast()\"", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.data.dataset.Dataset.__init__": [[9, 11], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.data.dataset.Dataset.select": [[12, 15], ["None"], "methods", ["None"], ["", "def", "select", "(", "self", ",", "key", ")", ":", "\n", "# Select the {corpus, queryset, tripleset, rankingset} determined by uniqueness or by key and return a \"unique\" dataset (e.g., for key=train)", "\n", "        ", "pass", "\n", "", "", ""]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.data.ranking.Ranking.__init__": [[26, 29], ["ranking.Ranking._prepare_data", "colbert.infra.provenance.Provenance", "ranking.Ranking._load_file"], "methods", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.data.ranking.Ranking._prepare_data", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.data.examples.Examples._load_file"], ["    ", "def", "__init__", "(", "self", ",", "path", "=", "None", ",", "data", "=", "None", ",", "metrics", "=", "None", ",", "provenance", "=", "None", ")", ":", "\n", "        ", "self", ".", "__provenance", "=", "provenance", "or", "path", "or", "Provenance", "(", ")", "\n", "self", ".", "data", "=", "self", ".", "_prepare_data", "(", "data", "or", "self", ".", "_load_file", "(", "path", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.data.ranking.Ranking.provenance": [[30, 32], ["None"], "methods", ["None"], ["", "def", "provenance", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__provenance", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.data.ranking.Ranking.toDict": [[33, 35], ["ranking.Ranking.provenance"], "methods", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.distillation.ranking_scorer.RankingScorer.provenance"], ["", "def", "toDict", "(", "self", ")", ":", "\n", "        ", "return", "{", "'provenance'", ":", "self", ".", "provenance", "(", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.data.ranking.Ranking._prepare_data": [[36, 44], ["isinstance", "colbert.utils.utils.groupby_first_item", "tqdm.tqdm", "data.items"], "methods", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.utils.groupby_first_item", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.data.ranking.Ranking.items"], ["", "def", "_prepare_data", "(", "self", ",", "data", ")", ":", "\n", "# TODO: Handle list of lists???", "\n", "        ", "if", "isinstance", "(", "data", ",", "dict", ")", ":", "\n", "            ", "self", ".", "flat_ranking", "=", "[", "(", "qid", ",", "*", "rest", ")", "for", "qid", ",", "subranking", "in", "data", ".", "items", "(", ")", "for", "rest", "in", "subranking", "]", "\n", "return", "data", "\n", "\n", "", "self", ".", "flat_ranking", "=", "data", "\n", "return", "groupby_first_item", "(", "tqdm", ".", "tqdm", "(", "self", ".", "flat_ranking", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.data.ranking.Ranking._load_file": [[45, 47], ["ranking.load_ranking"], "methods", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.data.ranking.load_ranking"], ["", "def", "_load_file", "(", "self", ",", "path", ")", ":", "\n", "        ", "return", "load_ranking", "(", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.data.ranking.Ranking.todict": [[48, 50], ["dict"], "methods", ["None"], ["", "def", "todict", "(", "self", ")", ":", "\n", "        ", "return", "dict", "(", "self", ".", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.data.ranking.Ranking.tolist": [[51, 53], ["list"], "methods", ["None"], ["", "def", "tolist", "(", "self", ")", ":", "\n", "        ", "return", "list", "(", "self", ".", "flat_ranking", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.data.ranking.Ranking.items": [[54, 56], ["ranking.Ranking.data.items"], "methods", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.data.ranking.Ranking.items"], ["", "def", "items", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "data", ".", "items", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.data.ranking.Ranking._load_tsv": [[57, 59], ["None"], "methods", ["None"], ["", "def", "_load_tsv", "(", "self", ",", "path", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.data.ranking.Ranking._load_jsonl": [[60, 62], ["None"], "methods", ["None"], ["", "def", "_load_jsonl", "(", "self", ",", "path", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.data.ranking.Ranking.save": [[63, 82], ["[].split", "colbert.infra.run.Run().open", "colbert.utils.utils.print_message", "colbert.infra.run.Run().open", "utility.utils.save_metadata.get_metadata_only", "ranking.Ranking.provenance", "ujson.dumps", "f.write", "f.write", "colbert.infra.run.Run", "colbert.infra.run.Run", "new_path.strip().split", "map", "len", "len", "new_path.strip", "str", "int", "type"], "methods", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.infra.run.Run.open", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.utils.print_message", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.infra.run.Run.open", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.save_metadata.get_metadata_only", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.distillation.ranking_scorer.RankingScorer.provenance"], ["", "def", "save", "(", "self", ",", "new_path", ")", ":", "\n", "        ", "assert", "'tsv'", "in", "new_path", ".", "strip", "(", "'/'", ")", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", ".", "split", "(", "'.'", ")", ",", "\"TODO: Support .json[l] too.\"", "\n", "\n", "with", "Run", "(", ")", ".", "open", "(", "new_path", ",", "'w'", ")", "as", "f", ":", "\n", "            ", "for", "items", "in", "self", ".", "flat_ranking", ":", "\n", "                ", "line", "=", "'\\t'", ".", "join", "(", "map", "(", "lambda", "x", ":", "str", "(", "int", "(", "x", ")", "if", "type", "(", "x", ")", "is", "bool", "else", "x", ")", ",", "items", ")", ")", "+", "'\\n'", "\n", "f", ".", "write", "(", "line", ")", "\n", "\n", "", "output_path", "=", "f", ".", "name", "\n", "print_message", "(", "f\"#> Saved ranking of {len(self.data)} queries and {len(self.flat_ranking)} lines to {f.name}\"", ")", "\n", "\n", "", "with", "Run", "(", ")", ".", "open", "(", "f'{new_path}.meta'", ",", "'w'", ")", "as", "f", ":", "\n", "            ", "d", "=", "{", "}", "\n", "d", "[", "'metadata'", "]", "=", "get_metadata_only", "(", ")", "\n", "d", "[", "'provenance'", "]", "=", "self", ".", "provenance", "(", ")", "\n", "line", "=", "ujson", ".", "dumps", "(", "d", ",", "indent", "=", "4", ")", "\n", "f", ".", "write", "(", "line", ")", "\n", "\n", "", "return", "output_path", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.data.ranking.Ranking.cast": [[83, 95], ["type", "cls", "isinstance", "isinstance", "cls", "type", "type"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "cast", "(", "cls", ",", "obj", ")", ":", "\n", "        ", "if", "type", "(", "obj", ")", "is", "str", ":", "\n", "            ", "return", "cls", "(", "path", "=", "obj", ")", "\n", "\n", "", "if", "isinstance", "(", "obj", ",", "dict", ")", "or", "isinstance", "(", "obj", ",", "list", ")", ":", "\n", "            ", "return", "cls", "(", "data", "=", "obj", ")", "\n", "\n", "", "if", "type", "(", "obj", ")", "is", "cls", ":", "\n", "            ", "return", "obj", "\n", "\n", "", "assert", "False", ",", "f\"obj has type {type(obj)} which is not compatible with cast()\"", "\n", "", "", ""]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.data.ranking.numericize": [[11, 16], ["int", "float"], "function", ["None"], ["def", "numericize", "(", "v", ")", ":", "\n", "    ", "if", "'.'", "in", "v", ":", "\n", "        ", "return", "float", "(", "v", ")", "\n", "\n", "", "return", "int", "(", "v", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.data.ranking.load_ranking": [[18, 23], ["colbert.utils.utils.print_message", "open", "list", "map", "line.strip().split", "line.strip"], "function", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.utils.print_message", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.infra.run.Run.open"], ["", "def", "load_ranking", "(", "path", ")", ":", "# works with annotated and un-annotated ranked lists", "\n", "    ", "print_message", "(", "\"#> Loading the ranked lists from\"", ",", "path", ")", "\n", "\n", "with", "open", "(", "path", ")", "as", "f", ":", "\n", "        ", "return", "[", "list", "(", "map", "(", "numericize", ",", "line", ".", "strip", "(", ")", ".", "split", "(", "'\\t'", ")", ")", ")", "for", "line", "in", "f", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.data.examples.Examples.__init__": [[11, 16], ["colbert.infra.provenance.Provenance", "examples.Examples._load_file"], "methods", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.data.examples.Examples._load_file"], ["    ", "def", "__init__", "(", "self", ",", "path", "=", "None", ",", "data", "=", "None", ",", "nway", "=", "None", ",", "provenance", "=", "None", ")", ":", "\n", "        ", "self", ".", "__provenance", "=", "provenance", "or", "path", "or", "Provenance", "(", ")", "\n", "self", ".", "nway", "=", "nway", "\n", "self", ".", "path", "=", "path", "\n", "self", ".", "data", "=", "data", "or", "self", ".", "_load_file", "(", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.data.examples.Examples.provenance": [[17, 19], ["None"], "methods", ["None"], ["", "def", "provenance", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__provenance", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.data.examples.Examples.toDict": [[20, 22], ["examples.Examples.provenance"], "methods", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.distillation.ranking_scorer.RankingScorer.provenance"], ["", "def", "toDict", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "provenance", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.data.examples.Examples._load_file": [[23, 33], ["open", "examples.append", "ujson.loads"], "methods", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.infra.run.Run.open"], ["", "def", "_load_file", "(", "self", ",", "path", ")", ":", "\n", "        ", "nway", "=", "self", ".", "nway", "+", "1", "if", "self", ".", "nway", "else", "self", ".", "nway", "\n", "examples", "=", "[", "]", "\n", "\n", "with", "open", "(", "path", ")", "as", "f", ":", "\n", "            ", "for", "line", "in", "f", ":", "\n", "                ", "example", "=", "ujson", ".", "loads", "(", "line", ")", "[", ":", "nway", "]", "\n", "examples", ".", "append", "(", "example", ")", "\n", "\n", "", "", "return", "examples", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.data.examples.Examples.tolist": [[34, 47], ["list", "range", "range", "len"], "methods", ["None"], ["", "def", "tolist", "(", "self", ",", "rank", "=", "None", ",", "nranks", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        NOTE: For distributed sampling, this isn't equivalent to perfectly uniform sampling.\n        In particular, each subset is perfectly represented in every batch! However, since we never\n        repeat passes over the data, we never repeat any particular triple, and the split across\n        nodes is random (since the underlying file is pre-shuffled), there's no concern here.\n        \"\"\"", "\n", "\n", "if", "rank", "or", "nranks", ":", "\n", "            ", "assert", "rank", "in", "range", "(", "nranks", ")", ",", "(", "rank", ",", "nranks", ")", "\n", "return", "[", "self", ".", "data", "[", "idx", "]", "for", "idx", "in", "range", "(", "0", ",", "len", "(", "self", ".", "data", ")", ",", "nranks", ")", "]", "# if line_idx % nranks == rank", "\n", "\n", "", "return", "list", "(", "self", ".", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.data.examples.Examples.save": [[48, 69], ["colbert.utils.utils.print_message", "[].split", "colbert.infra.run.Run().open", "colbert.utils.utils.print_message", "colbert.infra.run.Run().open", "utility.utils.save_metadata.get_metadata_only", "examples.Examples.provenance", "ujson.dumps", "f.write", "ujson.dump", "f.write", "colbert.infra.run.Run", "colbert.infra.run.Run", "new_path.strip().split", "len", "len", "new_path.strip"], "methods", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.utils.print_message", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.infra.run.Run.open", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.utils.print_message", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.infra.run.Run.open", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.save_metadata.get_metadata_only", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.distillation.ranking_scorer.RankingScorer.provenance"], ["", "def", "save", "(", "self", ",", "new_path", ")", ":", "\n", "        ", "assert", "'json'", "in", "new_path", ".", "strip", "(", "'/'", ")", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", ".", "split", "(", "'.'", ")", ",", "\"TODO: Support .json[l] too.\"", "\n", "\n", "print_message", "(", "f\"#> Writing {len(self.data) / 1000_000.0}M examples to {new_path}\"", ")", "\n", "\n", "with", "Run", "(", ")", ".", "open", "(", "new_path", ",", "'w'", ")", "as", "f", ":", "\n", "            ", "for", "example", "in", "self", ".", "data", ":", "\n", "                ", "ujson", ".", "dump", "(", "example", ",", "f", ")", "\n", "f", ".", "write", "(", "'\\n'", ")", "\n", "\n", "", "output_path", "=", "f", ".", "name", "\n", "print_message", "(", "f\"#> Saved examples with {len(self.data)} lines to {f.name}\"", ")", "\n", "\n", "", "with", "Run", "(", ")", ".", "open", "(", "f'{new_path}.meta'", ",", "'w'", ")", "as", "f", ":", "\n", "            ", "d", "=", "{", "}", "\n", "d", "[", "'metadata'", "]", "=", "get_metadata_only", "(", ")", "\n", "d", "[", "'provenance'", "]", "=", "self", ".", "provenance", "(", ")", "\n", "line", "=", "ujson", ".", "dumps", "(", "d", ",", "indent", "=", "4", ")", "\n", "f", ".", "write", "(", "line", ")", "\n", "\n", "", "return", "output_path", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.data.examples.Examples.cast": [[70, 83], ["isinstance", "type", "cls", "cls", "type", "type"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "cast", "(", "cls", ",", "obj", ",", "nway", "=", "None", ")", ":", "\n", "        ", "if", "type", "(", "obj", ")", "is", "str", ":", "\n", "            ", "return", "cls", "(", "path", "=", "obj", ",", "nway", "=", "nway", ")", "\n", "\n", "", "if", "isinstance", "(", "obj", ",", "list", ")", ":", "\n", "            ", "return", "cls", "(", "data", "=", "obj", ",", "nway", "=", "nway", ")", "\n", "\n", "", "if", "type", "(", "obj", ")", "is", "cls", ":", "\n", "            ", "assert", "nway", "is", "None", ",", "nway", "\n", "return", "obj", "\n", "\n", "", "assert", "False", ",", "f\"obj has type {type(obj)} which is not compatible with cast()\"", "\n", "", "", ""]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.evaluation.loaders.load_queries": [[15, 31], ["collections.OrderedDict", "colbert.utils.utils.print_message", "colbert.utils.utils.print_message", "open", "len", "line.strip().split", "int", "line.strip"], "function", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.utils.print_message", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.utils.print_message", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.infra.run.Run.open"], ["def", "load_queries", "(", "queries_path", ")", ":", "\n", "    ", "queries", "=", "OrderedDict", "(", ")", "\n", "\n", "print_message", "(", "\"#> Loading the queries from\"", ",", "queries_path", ",", "\"...\"", ")", "\n", "\n", "with", "open", "(", "queries_path", ")", "as", "f", ":", "\n", "        ", "for", "line", "in", "f", ":", "\n", "            ", "qid", ",", "query", ",", "*", "_", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "'\\t'", ")", "\n", "qid", "=", "int", "(", "qid", ")", "\n", "\n", "assert", "(", "qid", "not", "in", "queries", ")", ",", "(", "\"Query QID\"", ",", "qid", ",", "\"is repeated!\"", ")", "\n", "queries", "[", "qid", "]", "=", "query", "\n", "\n", "", "", "print_message", "(", "\"#> Got\"", ",", "len", "(", "queries", ")", ",", "\"queries. All QIDs are unique.\\n\"", ")", "\n", "\n", "return", "queries", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.evaluation.loaders.load_qrels": [[33, 57], ["colbert.utils.utils.print_message", "collections.OrderedDict", "round", "colbert.utils.utils.print_message", "open", "list", "len", "map", "collections.OrderedDict.get", "qrels[].append", "set", "sum", "len", "line.strip().split", "len", "line.strip"], "function", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.utils.print_message", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.utils.print_message", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.infra.run.Run.open", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.config.core_config.CoreConfig.set"], ["", "def", "load_qrels", "(", "qrels_path", ")", ":", "\n", "    ", "if", "qrels_path", "is", "None", ":", "\n", "        ", "return", "None", "\n", "\n", "", "print_message", "(", "\"#> Loading qrels from\"", ",", "qrels_path", ",", "\"...\"", ")", "\n", "\n", "qrels", "=", "OrderedDict", "(", ")", "\n", "with", "open", "(", "qrels_path", ",", "mode", "=", "'r'", ",", "encoding", "=", "\"utf-8\"", ")", "as", "f", ":", "\n", "        ", "for", "line", "in", "f", ":", "\n", "            ", "qid", ",", "x", ",", "pid", ",", "y", "=", "map", "(", "int", ",", "line", ".", "strip", "(", ")", ".", "split", "(", "'\\t'", ")", ")", "\n", "assert", "x", "==", "0", "and", "y", "==", "1", "\n", "qrels", "[", "qid", "]", "=", "qrels", ".", "get", "(", "qid", ",", "[", "]", ")", "\n", "qrels", "[", "qid", "]", ".", "append", "(", "pid", ")", "\n", "\n", "# assert all(len(qrels[qid]) == len(set(qrels[qid])) for qid in qrels)", "\n", "", "", "for", "qid", "in", "qrels", ":", "\n", "        ", "qrels", "[", "qid", "]", "=", "list", "(", "set", "(", "qrels", "[", "qid", "]", ")", ")", "\n", "\n", "", "avg_positive", "=", "round", "(", "sum", "(", "len", "(", "qrels", "[", "qid", "]", ")", "for", "qid", "in", "qrels", ")", "/", "len", "(", "qrels", ")", ",", "2", ")", "\n", "\n", "print_message", "(", "\"#> Loaded qrels for\"", ",", "len", "(", "qrels", ")", ",", "\"unique queries with\"", ",", "\n", "avg_positive", ",", "\"positives per query on average.\\n\"", ")", "\n", "\n", "return", "qrels", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.evaluation.loaders.load_topK": [[59, 91], ["collections.OrderedDict", "collections.OrderedDict", "collections.OrderedDict", "colbert.utils.utils.print_message", "all", "colbert.utils.utils.print_message", "colbert.utils.utils.print_message", "open", "enumerate", "print", "len", "max", "round", "len", "line.split", "collections.OrderedDict.get", "topK_docs[].append", "collections.OrderedDict.get", "topK_pids[].append", "print", "int", "int", "len", "len", "sum", "len", "set"], "function", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.utils.print_message", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.utils.print_message", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.utils.print_message", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.infra.run.Run.open", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.data.collection.Collection.enumerate", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.infra.run.Run.print", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.infra.run.Run.print", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.config.core_config.CoreConfig.set"], ["", "def", "load_topK", "(", "topK_path", ")", ":", "\n", "    ", "queries", "=", "OrderedDict", "(", ")", "\n", "topK_docs", "=", "OrderedDict", "(", ")", "\n", "topK_pids", "=", "OrderedDict", "(", ")", "\n", "\n", "print_message", "(", "\"#> Loading the top-k per query from\"", ",", "topK_path", ",", "\"...\"", ")", "\n", "\n", "with", "open", "(", "topK_path", ")", "as", "f", ":", "\n", "        ", "for", "line_idx", ",", "line", "in", "enumerate", "(", "f", ")", ":", "\n", "            ", "if", "line_idx", "and", "line_idx", "%", "(", "10", "*", "1000", "*", "1000", ")", "==", "0", ":", "\n", "                ", "print", "(", "line_idx", ",", "end", "=", "' '", ",", "flush", "=", "True", ")", "\n", "\n", "", "qid", ",", "pid", ",", "query", ",", "passage", "=", "line", ".", "split", "(", "'\\t'", ")", "\n", "qid", ",", "pid", "=", "int", "(", "qid", ")", ",", "int", "(", "pid", ")", "\n", "\n", "assert", "(", "qid", "not", "in", "queries", ")", "or", "(", "queries", "[", "qid", "]", "==", "query", ")", "\n", "queries", "[", "qid", "]", "=", "query", "\n", "topK_docs", "[", "qid", "]", "=", "topK_docs", ".", "get", "(", "qid", ",", "[", "]", ")", "\n", "topK_docs", "[", "qid", "]", ".", "append", "(", "passage", ")", "\n", "topK_pids", "[", "qid", "]", "=", "topK_pids", ".", "get", "(", "qid", ",", "[", "]", ")", "\n", "topK_pids", "[", "qid", "]", ".", "append", "(", "pid", ")", "\n", "\n", "", "print", "(", ")", "\n", "\n", "", "assert", "all", "(", "len", "(", "topK_pids", "[", "qid", "]", ")", "==", "len", "(", "set", "(", "topK_pids", "[", "qid", "]", ")", ")", "for", "qid", "in", "topK_pids", ")", "\n", "\n", "Ks", "=", "[", "len", "(", "topK_pids", "[", "qid", "]", ")", "for", "qid", "in", "topK_pids", "]", "\n", "\n", "print_message", "(", "\"#> max(Ks) =\"", ",", "max", "(", "Ks", ")", ",", "\", avg(Ks) =\"", ",", "round", "(", "sum", "(", "Ks", ")", "/", "len", "(", "Ks", ")", ",", "2", ")", ")", "\n", "print_message", "(", "\"#> Loaded the top-k per query for\"", ",", "len", "(", "queries", ")", ",", "\"unique queries.\\n\"", ")", "\n", "\n", "return", "queries", ",", "topK_docs", ",", "topK_pids", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.evaluation.loaders.load_topK_pids": [[93, 153], ["collections.defaultdict", "collections.defaultdict", "colbert.utils.utils.print_message", "all", "all", "colbert.utils.utils.print_message", "colbert.utils.utils.print_message", "open", "enumerate", "print", "set", "len", "max", "round", "len", "len", "set.difference", "round", "colbert.utils.utils.print_message", "line.strip().split", "topK_pids[].append", "len", "len", "set", "set", "len", "len", "len", "print", "int", "int", "len", "len", "int", "len", "len", "len", "len", "sum", "len", "collections.defaultdict.keys", "collections.defaultdict.keys", "sum", "len", "line.strip", "topK_positives[].append", "set", "set", "len"], "function", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.utils.print_message", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.utils.print_message", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.utils.print_message", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.infra.run.Run.open", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.data.collection.Collection.enumerate", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.infra.run.Run.print", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.config.core_config.CoreConfig.set", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.utils.print_message", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.config.core_config.CoreConfig.set", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.config.core_config.CoreConfig.set", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.infra.run.Run.print", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.data.queries.Queries.keys", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.data.queries.Queries.keys", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.config.core_config.CoreConfig.set", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.config.core_config.CoreConfig.set"], ["", "def", "load_topK_pids", "(", "topK_path", ",", "qrels", ")", ":", "\n", "    ", "topK_pids", "=", "defaultdict", "(", "list", ")", "\n", "topK_positives", "=", "defaultdict", "(", "list", ")", "\n", "\n", "print_message", "(", "\"#> Loading the top-k PIDs per query from\"", ",", "topK_path", ",", "\"...\"", ")", "\n", "\n", "with", "open", "(", "topK_path", ")", "as", "f", ":", "\n", "        ", "for", "line_idx", ",", "line", "in", "enumerate", "(", "f", ")", ":", "\n", "            ", "if", "line_idx", "and", "line_idx", "%", "(", "10", "*", "1000", "*", "1000", ")", "==", "0", ":", "\n", "                ", "print", "(", "line_idx", ",", "end", "=", "' '", ",", "flush", "=", "True", ")", "\n", "\n", "", "qid", ",", "pid", ",", "*", "rest", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "'\\t'", ")", "\n", "qid", ",", "pid", "=", "int", "(", "qid", ")", ",", "int", "(", "pid", ")", "\n", "\n", "topK_pids", "[", "qid", "]", ".", "append", "(", "pid", ")", "\n", "\n", "assert", "len", "(", "rest", ")", "in", "[", "1", ",", "2", ",", "3", "]", "\n", "\n", "if", "len", "(", "rest", ")", ">", "1", ":", "\n", "                ", "*", "_", ",", "label", "=", "rest", "\n", "label", "=", "int", "(", "label", ")", "\n", "assert", "label", "in", "[", "0", ",", "1", "]", "\n", "\n", "if", "label", ">=", "1", ":", "\n", "                    ", "topK_positives", "[", "qid", "]", ".", "append", "(", "pid", ")", "\n", "\n", "", "", "", "print", "(", ")", "\n", "\n", "", "assert", "all", "(", "len", "(", "topK_pids", "[", "qid", "]", ")", "==", "len", "(", "set", "(", "topK_pids", "[", "qid", "]", ")", ")", "for", "qid", "in", "topK_pids", ")", "\n", "assert", "all", "(", "len", "(", "topK_positives", "[", "qid", "]", ")", "==", "len", "(", "set", "(", "topK_positives", "[", "qid", "]", ")", ")", "for", "qid", "in", "topK_positives", ")", "\n", "\n", "# Make them sets for fast lookups later", "\n", "topK_positives", "=", "{", "qid", ":", "set", "(", "topK_positives", "[", "qid", "]", ")", "for", "qid", "in", "topK_positives", "}", "\n", "\n", "Ks", "=", "[", "len", "(", "topK_pids", "[", "qid", "]", ")", "for", "qid", "in", "topK_pids", "]", "\n", "\n", "print_message", "(", "\"#> max(Ks) =\"", ",", "max", "(", "Ks", ")", ",", "\", avg(Ks) =\"", ",", "round", "(", "sum", "(", "Ks", ")", "/", "len", "(", "Ks", ")", ",", "2", ")", ")", "\n", "print_message", "(", "\"#> Loaded the top-k per query for\"", ",", "len", "(", "topK_pids", ")", ",", "\"unique queries.\\n\"", ")", "\n", "\n", "if", "len", "(", "topK_positives", ")", "==", "0", ":", "\n", "        ", "topK_positives", "=", "None", "\n", "", "else", ":", "\n", "        ", "assert", "len", "(", "topK_pids", ")", ">=", "len", "(", "topK_positives", ")", "\n", "\n", "for", "qid", "in", "set", ".", "difference", "(", "set", "(", "topK_pids", ".", "keys", "(", ")", ")", ",", "set", "(", "topK_positives", ".", "keys", "(", ")", ")", ")", ":", "\n", "            ", "topK_positives", "[", "qid", "]", "=", "[", "]", "\n", "\n", "", "assert", "len", "(", "topK_pids", ")", "==", "len", "(", "topK_positives", ")", "\n", "\n", "avg_positive", "=", "round", "(", "sum", "(", "len", "(", "topK_positives", "[", "qid", "]", ")", "for", "qid", "in", "topK_positives", ")", "/", "len", "(", "topK_pids", ")", ",", "2", ")", "\n", "\n", "print_message", "(", "\"#> Concurrently got annotations for\"", ",", "len", "(", "topK_positives", ")", ",", "\"unique queries with\"", ",", "\n", "avg_positive", ",", "\"positives per query on average.\\n\"", ")", "\n", "\n", "", "assert", "qrels", "is", "None", "or", "topK_positives", "is", "None", ",", "\"Cannot have both qrels and an annotated top-K file!\"", "\n", "\n", "if", "topK_positives", "is", "None", ":", "\n", "        ", "topK_positives", "=", "qrels", "\n", "\n", "", "return", "topK_pids", ",", "topK_positives", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.evaluation.loaders.load_collection": [[155, 177], ["colbert.utils.utils.print_message", "print", "open", "enumerate", "line.strip().split", "collection.append", "print", "len", "line.strip", "int"], "function", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.utils.print_message", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.infra.run.Run.print", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.infra.run.Run.open", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.data.collection.Collection.enumerate", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.infra.run.Run.print"], ["", "def", "load_collection", "(", "collection_path", ")", ":", "\n", "    ", "print_message", "(", "\"#> Loading collection...\"", ")", "\n", "\n", "collection", "=", "[", "]", "\n", "\n", "with", "open", "(", "collection_path", ")", "as", "f", ":", "\n", "        ", "for", "line_idx", ",", "line", "in", "enumerate", "(", "f", ")", ":", "\n", "            ", "if", "line_idx", "%", "(", "1000", "*", "1000", ")", "==", "0", ":", "\n", "                ", "print", "(", "f'{line_idx // 1000 // 1000}M'", ",", "end", "=", "' '", ",", "flush", "=", "True", ")", "\n", "\n", "", "pid", ",", "passage", ",", "*", "rest", "=", "line", ".", "strip", "(", "'\\n\\r '", ")", ".", "split", "(", "'\\t'", ")", "\n", "assert", "pid", "==", "'id'", "or", "int", "(", "pid", ")", "==", "line_idx", "\n", "\n", "if", "len", "(", "rest", ")", ">=", "1", ":", "\n", "                ", "title", "=", "rest", "[", "0", "]", "\n", "passage", "=", "title", "+", "' | '", "+", "passage", "\n", "\n", "", "collection", ".", "append", "(", "passage", ")", "\n", "\n", "", "", "print", "(", ")", "\n", "\n", "return", "collection", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.evaluation.loaders.load_colbert": [[179, 199], ["colbert.evaluation.load_model.load_model", "print", "hasattr", "print", "colbert.utils.runs.Run.warn", "ujson.dumps", "getattr", "getattr"], "function", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.evaluation.load_model.load_model", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.infra.run.Run.print", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.infra.run.Run.print", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.logging.Logger.warn"], ["", "def", "load_colbert", "(", "args", ",", "do_print", "=", "True", ")", ":", "\n", "    ", "colbert", ",", "checkpoint", "=", "load_model", "(", "args", ",", "do_print", ")", "\n", "\n", "# TODO: If the parameters below were not specified on the command line, their *checkpoint* values should be used.", "\n", "# I.e., not their purely (i.e., training) default values.", "\n", "\n", "for", "k", "in", "[", "'query_maxlen'", ",", "'doc_maxlen'", ",", "'dim'", ",", "'similarity'", ",", "'amp'", "]", ":", "\n", "        ", "if", "'arguments'", "in", "checkpoint", "and", "hasattr", "(", "args", ",", "k", ")", ":", "\n", "            ", "if", "k", "in", "checkpoint", "[", "'arguments'", "]", "and", "checkpoint", "[", "'arguments'", "]", "[", "k", "]", "!=", "getattr", "(", "args", ",", "k", ")", ":", "\n", "                ", "a", ",", "b", "=", "checkpoint", "[", "'arguments'", "]", "[", "k", "]", ",", "getattr", "(", "args", ",", "k", ")", "\n", "Run", ".", "warn", "(", "f\"Got checkpoint['arguments']['{k}'] != args.{k} (i.e., {a} != {b})\"", ")", "\n", "\n", "", "", "", "if", "'arguments'", "in", "checkpoint", ":", "\n", "        ", "if", "args", ".", "rank", "<", "1", ":", "\n", "            ", "print", "(", "ujson", ".", "dumps", "(", "checkpoint", "[", "'arguments'", "]", ",", "indent", "=", "4", ")", ")", "\n", "\n", "", "", "if", "do_print", ":", "\n", "        ", "print", "(", "'\\n'", ")", "\n", "\n", "", "return", "colbert", ",", "checkpoint", "\n", "", ""]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.evaluation.load_model.load_model": [[13, 29], ["colbert.modeling.colbert.ColBERT.from_pretrained", "colbert.to.to", "colbert.utils.utils.print_message", "colbert.utils.utils.load_checkpoint", "colbert.to.eval"], "function", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.modeling.hf_colbert.HF_ColBERT.from_pretrained", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.utils.print_message", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.utils.load_checkpoint"], ["def", "load_model", "(", "args", ",", "do_print", "=", "True", ")", ":", "\n", "    ", "colbert", "=", "ColBERT", ".", "from_pretrained", "(", "'bert-base-uncased'", ",", "\n", "query_maxlen", "=", "args", ".", "query_maxlen", ",", "\n", "doc_maxlen", "=", "args", ".", "doc_maxlen", ",", "\n", "dim", "=", "args", ".", "dim", ",", "\n", "similarity_metric", "=", "args", ".", "similarity", ",", "\n", "mask_punctuation", "=", "args", ".", "mask_punctuation", ")", "\n", "colbert", "=", "colbert", ".", "to", "(", "DEVICE", ")", "\n", "\n", "print_message", "(", "\"#> Loading model checkpoint.\"", ",", "condition", "=", "do_print", ")", "\n", "\n", "checkpoint", "=", "load_checkpoint", "(", "args", ".", "checkpoint", ",", "colbert", ",", "do_print", "=", "do_print", ")", "\n", "\n", "colbert", ".", "eval", "(", ")", "\n", "\n", "return", "colbert", ",", "checkpoint", "\n", "", ""]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.evaluation.metrics.Metrics.__init__": [[8, 17], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "mrr_depths", ":", "set", ",", "recall_depths", ":", "set", ",", "success_depths", ":", "set", ",", "total_queries", "=", "None", ")", ":", "\n", "        ", "self", ".", "results", "=", "{", "}", "\n", "self", ".", "mrr_sums", "=", "{", "depth", ":", "0.0", "for", "depth", "in", "mrr_depths", "}", "\n", "self", ".", "recall_sums", "=", "{", "depth", ":", "0.0", "for", "depth", "in", "recall_depths", "}", "\n", "self", ".", "success_sums", "=", "{", "depth", ":", "0.0", "for", "depth", "in", "success_depths", "}", "\n", "self", ".", "total_queries", "=", "total_queries", "\n", "\n", "self", ".", "max_query_idx", "=", "-", "1", "\n", "self", ".", "num_queries_added", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.evaluation.metrics.Metrics.add": [[18, 44], ["len", "len", "len", "len", "len", "len", "len", "set", "set", "enumerate", "len"], "methods", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.config.core_config.CoreConfig.set", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.config.core_config.CoreConfig.set", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.data.collection.Collection.enumerate"], ["", "def", "add", "(", "self", ",", "query_idx", ",", "query_key", ",", "ranking", ",", "gold_positives", ")", ":", "\n", "        ", "self", ".", "num_queries_added", "+=", "1", "\n", "\n", "assert", "query_key", "not", "in", "self", ".", "results", "\n", "assert", "len", "(", "self", ".", "results", ")", "<=", "query_idx", "\n", "assert", "len", "(", "set", "(", "gold_positives", ")", ")", "==", "len", "(", "gold_positives", ")", "\n", "assert", "len", "(", "set", "(", "[", "pid", "for", "_", ",", "pid", ",", "_", "in", "ranking", "]", ")", ")", "==", "len", "(", "ranking", ")", "\n", "\n", "self", ".", "results", "[", "query_key", "]", "=", "ranking", "\n", "\n", "positives", "=", "[", "i", "for", "i", ",", "(", "_", ",", "pid", ",", "_", ")", "in", "enumerate", "(", "ranking", ")", "if", "pid", "in", "gold_positives", "]", "\n", "\n", "if", "len", "(", "positives", ")", "==", "0", ":", "\n", "            ", "return", "\n", "\n", "", "for", "depth", "in", "self", ".", "mrr_sums", ":", "\n", "            ", "first_positive", "=", "positives", "[", "0", "]", "\n", "self", ".", "mrr_sums", "[", "depth", "]", "+=", "(", "1.0", "/", "(", "first_positive", "+", "1.0", ")", ")", "if", "first_positive", "<", "depth", "else", "0.0", "\n", "\n", "", "for", "depth", "in", "self", ".", "success_sums", ":", "\n", "            ", "first_positive", "=", "positives", "[", "0", "]", "\n", "self", ".", "success_sums", "[", "depth", "]", "+=", "1.0", "if", "first_positive", "<", "depth", "else", "0.0", "\n", "\n", "", "for", "depth", "in", "self", ".", "recall_sums", ":", "\n", "            ", "num_positives_up_to_depth", "=", "len", "(", "[", "pos", "for", "pos", "in", "positives", "if", "pos", "<", "depth", "]", ")", "\n", "self", ".", "recall_sums", "[", "depth", "]", "+=", "num_positives_up_to_depth", "/", "len", "(", "gold_positives", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.evaluation.metrics.Metrics.print_metrics": [[45, 54], ["sorted", "sorted", "sorted", "print", "print", "print", "str", "str", "str"], "methods", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.infra.run.Run.print", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.infra.run.Run.print", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.infra.run.Run.print"], ["", "", "def", "print_metrics", "(", "self", ",", "query_idx", ")", ":", "\n", "        ", "for", "depth", "in", "sorted", "(", "self", ".", "mrr_sums", ")", ":", "\n", "            ", "print", "(", "\"MRR@\"", "+", "str", "(", "depth", ")", ",", "\"=\"", ",", "self", ".", "mrr_sums", "[", "depth", "]", "/", "(", "query_idx", "+", "1.0", ")", ")", "\n", "\n", "", "for", "depth", "in", "sorted", "(", "self", ".", "success_sums", ")", ":", "\n", "            ", "print", "(", "\"Success@\"", "+", "str", "(", "depth", ")", ",", "\"=\"", ",", "self", ".", "success_sums", "[", "depth", "]", "/", "(", "query_idx", "+", "1.0", ")", ")", "\n", "\n", "", "for", "depth", "in", "sorted", "(", "self", ".", "recall_sums", ")", ":", "\n", "            ", "print", "(", "\"Recall@\"", "+", "str", "(", "depth", ")", ",", "\"=\"", ",", "self", ".", "recall_sums", "[", "depth", "]", "/", "(", "query_idx", "+", "1.0", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.evaluation.metrics.Metrics.log": [[55, 73], ["colbert.utils.runs.Run.log_metric", "colbert.utils.runs.Run.log_metric", "sorted", "sorted", "sorted", "colbert.utils.runs.Run.log_metric", "colbert.utils.runs.Run.log_metric", "colbert.utils.runs.Run.log_metric", "str", "str", "str"], "methods", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.logging.Logger.log_metric", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.logging.Logger.log_metric", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.logging.Logger.log_metric", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.logging.Logger.log_metric", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.logging.Logger.log_metric"], ["", "", "def", "log", "(", "self", ",", "query_idx", ")", ":", "\n", "        ", "assert", "query_idx", ">=", "self", ".", "max_query_idx", "\n", "self", ".", "max_query_idx", "=", "query_idx", "\n", "\n", "Run", ".", "log_metric", "(", "\"ranking/max_query_idx\"", ",", "query_idx", ",", "query_idx", ")", "\n", "Run", ".", "log_metric", "(", "\"ranking/num_queries_added\"", ",", "self", ".", "num_queries_added", ",", "query_idx", ")", "\n", "\n", "for", "depth", "in", "sorted", "(", "self", ".", "mrr_sums", ")", ":", "\n", "            ", "score", "=", "self", ".", "mrr_sums", "[", "depth", "]", "/", "(", "query_idx", "+", "1.0", ")", "\n", "Run", ".", "log_metric", "(", "\"ranking/MRR.\"", "+", "str", "(", "depth", ")", ",", "score", ",", "query_idx", ")", "\n", "\n", "", "for", "depth", "in", "sorted", "(", "self", ".", "success_sums", ")", ":", "\n", "            ", "score", "=", "self", ".", "success_sums", "[", "depth", "]", "/", "(", "query_idx", "+", "1.0", ")", "\n", "Run", ".", "log_metric", "(", "\"ranking/Success.\"", "+", "str", "(", "depth", ")", ",", "score", ",", "query_idx", ")", "\n", "\n", "", "for", "depth", "in", "sorted", "(", "self", ".", "recall_sums", ")", ":", "\n", "            ", "score", "=", "self", ".", "recall_sums", "[", "depth", "]", "/", "(", "query_idx", "+", "1.0", ")", "\n", "Run", ".", "log_metric", "(", "\"ranking/Recall.\"", "+", "str", "(", "depth", ")", ",", "score", ",", "query_idx", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.evaluation.metrics.Metrics.output_final_metrics": [[74, 100], ["metrics.Metrics.print_metrics", "collections.defaultdict", "sorted", "sorted", "sorted", "metrics.Metrics.log", "open", "ujson.dump", "f.write"], "methods", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.evaluation.metrics.Metrics.print_metrics", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.evaluation.metrics.Metrics.log", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.infra.run.Run.open"], ["", "", "def", "output_final_metrics", "(", "self", ",", "path", ",", "query_idx", ",", "num_queries", ")", ":", "\n", "        ", "assert", "query_idx", "+", "1", "==", "num_queries", "\n", "assert", "num_queries", "==", "self", ".", "total_queries", "\n", "\n", "if", "self", ".", "max_query_idx", "<", "query_idx", ":", "\n", "            ", "self", ".", "log", "(", "query_idx", ")", "\n", "\n", "", "self", ".", "print_metrics", "(", "query_idx", ")", "\n", "\n", "output", "=", "defaultdict", "(", "dict", ")", "\n", "\n", "for", "depth", "in", "sorted", "(", "self", ".", "mrr_sums", ")", ":", "\n", "            ", "score", "=", "self", ".", "mrr_sums", "[", "depth", "]", "/", "(", "query_idx", "+", "1.0", ")", "\n", "output", "[", "'mrr'", "]", "[", "depth", "]", "=", "score", "\n", "\n", "", "for", "depth", "in", "sorted", "(", "self", ".", "success_sums", ")", ":", "\n", "            ", "score", "=", "self", ".", "success_sums", "[", "depth", "]", "/", "(", "query_idx", "+", "1.0", ")", "\n", "output", "[", "'success'", "]", "[", "depth", "]", "=", "score", "\n", "\n", "", "for", "depth", "in", "sorted", "(", "self", ".", "recall_sums", ")", ":", "\n", "            ", "score", "=", "self", ".", "recall_sums", "[", "depth", "]", "/", "(", "query_idx", "+", "1.0", ")", "\n", "output", "[", "'recall'", "]", "[", "depth", "]", "=", "score", "\n", "\n", "", "with", "open", "(", "path", ",", "'w'", ")", "as", "f", ":", "\n", "            ", "ujson", ".", "dump", "(", "output", ",", "f", ",", "indent", "=", "4", ")", "\n", "f", ".", "write", "(", "'\\n'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.evaluation.metrics.evaluate_recall": [[102, 112], ["round", "print", "set", "set", "sum", "len", "qrels.keys", "queries.keys", "len", "max", "set.intersection", "len", "set", "set"], "function", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.infra.run.Run.print", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.config.core_config.CoreConfig.set", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.config.core_config.CoreConfig.set", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.data.queries.Queries.keys", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.data.queries.Queries.keys", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.config.core_config.CoreConfig.set", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.config.core_config.CoreConfig.set"], ["", "", "", "def", "evaluate_recall", "(", "qrels", ",", "queries", ",", "topK_pids", ")", ":", "\n", "    ", "if", "qrels", "is", "None", ":", "\n", "        ", "return", "\n", "\n", "", "assert", "set", "(", "qrels", ".", "keys", "(", ")", ")", "==", "set", "(", "queries", ".", "keys", "(", ")", ")", "\n", "recall_at_k", "=", "[", "len", "(", "set", ".", "intersection", "(", "set", "(", "qrels", "[", "qid", "]", ")", ",", "set", "(", "topK_pids", "[", "qid", "]", ")", ")", ")", "/", "max", "(", "1.0", ",", "len", "(", "qrels", "[", "qid", "]", ")", ")", "\n", "for", "qid", "in", "qrels", "]", "\n", "recall_at_k", "=", "sum", "(", "recall_at_k", ")", "/", "len", "(", "qrels", ")", "\n", "recall_at_k", "=", "round", "(", "recall_at_k", ",", "3", ")", "\n", "print", "(", "\"Recall @ maximum depth =\"", ",", "recall_at_k", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.indexing.loaders.get_parts": [[6, 19], ["sorted", "list", "os.path.join", "os.path.join", "int", "range", "os.listdir", "filename.endswith", "len", "len"], "function", ["None"], ["from", "collections", "import", "defaultdict", ",", "OrderedDict", "\n", "\n", "from", "colbert", ".", "parameters", "import", "DEVICE", "\n", "from", "colbert", ".", "modeling", ".", "colbert", "import", "ColBERT", "\n", "from", "colbert", ".", "utils", ".", "utils", "import", "print_message", ",", "load_checkpoint", "\n", "from", "colbert", ".", "evaluation", ".", "load_model", "import", "load_model", "\n", "from", "colbert", ".", "utils", ".", "runs", "import", "Run", "\n", "\n", "\n", "def", "load_queries", "(", "queries_path", ")", ":", "\n", "    ", "queries", "=", "OrderedDict", "(", ")", "\n", "\n", "print_message", "(", "\"#> Loading the queries from\"", ",", "queries_path", ",", "\"...\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.indexing.loaders.load_doclens": [[21, 41], ["os.listdir", "re.match", "os.path.join", "ujson.load", "len", "ValueError", "sorted", "open", "doclens_filenames.keys", "int", "re.match.group"], "function", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.codecs.residual_embeddings.ResidualEmbeddings.load", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.infra.run.Run.open", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.data.queries.Queries.keys"], ["        ", "for", "line", "in", "f", ":", "\n", "            ", "qid", ",", "query", ",", "*", "_", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "'\\t'", ")", "\n", "qid", "=", "int", "(", "qid", ")", "\n", "\n", "assert", "(", "qid", "not", "in", "queries", ")", ",", "(", "\"Query QID\"", ",", "qid", ",", "\"is repeated!\"", ")", "\n", "queries", "[", "qid", "]", "=", "query", "\n", "\n", "", "", "print_message", "(", "\"#> Got\"", ",", "len", "(", "queries", ")", ",", "\"queries. All QIDs are unique.\\n\"", ")", "\n", "\n", "return", "queries", "\n", "\n", "\n", "", "def", "load_qrels", "(", "qrels_path", ")", ":", "\n", "    ", "if", "qrels_path", "is", "None", ":", "\n", "        ", "return", "None", "\n", "\n", "", "print_message", "(", "\"#> Loading qrels from\"", ",", "qrels_path", ",", "\"...\"", ")", "\n", "\n", "qrels", "=", "OrderedDict", "(", ")", "\n", "with", "open", "(", "qrels_path", ",", "mode", "=", "'r'", ",", "encoding", "=", "\"utf-8\"", ")", "as", "f", ":", "\n", "        ", "for", "line", "in", "f", ":", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.indexing.loaders.get_deltas": [[43, 55], ["sorted", "list", "os.path.join", "int", "range", "os.listdir", "filename.endswith", "len", "len"], "function", ["None"], ["assert", "x", "==", "0", "and", "y", "==", "1", "\n", "qrels", "[", "qid", "]", "=", "qrels", ".", "get", "(", "qid", ",", "[", "]", ")", "\n", "qrels", "[", "qid", "]", ".", "append", "(", "pid", ")", "\n", "\n", "# assert all(len(qrels[qid]) == len(set(qrels[qid])) for qid in qrels)", "\n", "", "", "for", "qid", "in", "qrels", ":", "\n", "        ", "qrels", "[", "qid", "]", "=", "list", "(", "set", "(", "qrels", "[", "qid", "]", ")", ")", "\n", "\n", "", "avg_positive", "=", "round", "(", "sum", "(", "len", "(", "qrels", "[", "qid", "]", ")", "for", "qid", "in", "qrels", ")", "/", "len", "(", "qrels", ")", ",", "2", ")", "\n", "\n", "print_message", "(", "\"#> Loaded qrels for\"", ",", "len", "(", "qrels", ")", ",", "\"unique queries with\"", ",", "\n", "avg_positive", ",", "\"positives per query on average.\\n\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.indexing.collection_indexer.CollectionIndexer.__init__": [[37, 51], ["colbert.data.collection.Collection.cast", "colbert.modeling.checkpoint.Checkpoint().cuda", "colbert.indexing.collection_encoder.CollectionEncoder", "colbert.indexing.index_saver.IndexSaver", "colbert.infra.launcher.print_memory_stats", "collection_indexer.CollectionIndexer.config.help", "colbert.modeling.checkpoint.Checkpoint"], "methods", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.data.examples.Examples.cast", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.infra.launcher.print_memory_stats", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.config.core_config.CoreConfig.help"], ["    ", "def", "__init__", "(", "self", ",", "config", ":", "ColBERTConfig", ",", "collection", ")", ":", "\n", "        ", "self", ".", "config", "=", "config", "\n", "self", ".", "rank", ",", "self", ".", "nranks", "=", "self", ".", "config", ".", "rank", ",", "self", ".", "config", ".", "nranks", "\n", "\n", "if", "self", ".", "config", ".", "rank", "==", "0", ":", "\n", "            ", "self", ".", "config", ".", "help", "(", ")", "\n", "\n", "", "self", ".", "collection", "=", "Collection", ".", "cast", "(", "collection", ")", "\n", "self", ".", "checkpoint", "=", "Checkpoint", "(", "self", ".", "config", ".", "checkpoint", ",", "colbert_config", "=", "self", ".", "config", ")", ".", "cuda", "(", ")", "\n", "\n", "self", ".", "encoder", "=", "CollectionEncoder", "(", "config", ",", "self", ".", "checkpoint", ")", "\n", "self", ".", "saver", "=", "IndexSaver", "(", "config", ")", "\n", "\n", "print_memory_stats", "(", "f'RANK:{self.rank}'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.indexing.collection_indexer.CollectionIndexer.run": [[52, 70], ["torch.inference_mode", "torch.inference_mode", "torch.inference_mode", "torch.inference_mode", "collection_indexer.CollectionIndexer.setup", "colbert.barrier", "colbert.infra.launcher.print_memory_stats", "colbert.barrier", "colbert.infra.launcher.print_memory_stats", "collection_indexer.CollectionIndexer.index", "colbert.barrier", "colbert.infra.launcher.print_memory_stats", "collection_indexer.CollectionIndexer.finalize", "colbert.barrier", "colbert.infra.launcher.print_memory_stats", "collection_indexer.CollectionIndexer.train", "collection_indexer.CollectionIndexer.saver.try_load_codec"], "methods", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.indexing.collection_indexer.CollectionIndexer.setup", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.distributed.barrier", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.infra.launcher.print_memory_stats", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.distributed.barrier", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.infra.launcher.print_memory_stats", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.indexing.collection_indexer.CollectionIndexer.index", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.distributed.barrier", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.infra.launcher.print_memory_stats", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.indexing.collection_indexer.CollectionIndexer.finalize", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.distributed.barrier", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.infra.launcher.print_memory_stats", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.indexing.collection_indexer.CollectionIndexer.train", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.indexing.index_saver.IndexSaver.try_load_codec"], ["", "def", "run", "(", "self", ",", "shared_lists", ")", ":", "\n", "        ", "with", "torch", ".", "inference_mode", "(", ")", ":", "\n", "            ", "self", ".", "setup", "(", ")", "\n", "distributed", ".", "barrier", "(", "self", ".", "rank", ")", "\n", "print_memory_stats", "(", "f'RANK:{self.rank}'", ")", "\n", "\n", "if", "not", "self", ".", "config", ".", "resume", "or", "not", "self", ".", "saver", ".", "try_load_codec", "(", ")", ":", "\n", "                ", "self", ".", "train", "(", "shared_lists", ")", "\n", "", "distributed", ".", "barrier", "(", "self", ".", "rank", ")", "\n", "print_memory_stats", "(", "f'RANK:{self.rank}'", ")", "\n", "\n", "self", ".", "index", "(", ")", "\n", "distributed", ".", "barrier", "(", "self", ".", "rank", ")", "\n", "print_memory_stats", "(", "f'RANK:{self.rank}'", ")", "\n", "\n", "self", ".", "finalize", "(", ")", "\n", "distributed", ".", "barrier", "(", "self", ".", "rank", ")", "\n", "print_memory_stats", "(", "f'RANK:{self.rank}'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.indexing.collection_indexer.CollectionIndexer.setup": [[71, 95], ["int", "collection_indexer.CollectionIndexer._sample_pids", "collection_indexer.CollectionIndexer._sample_embeddings", "len", "int", "colbert.infra.run.Run().print_main", "colbert.infra.run.Run().print_main", "collection_indexer.CollectionIndexer._save_plan", "collection_indexer.CollectionIndexer._try_load_plan", "numpy.ceil", "colbert.infra.run.Run().print_main", "colbert.infra.run.Run().print_main", "colbert.infra.run.Run().print_main", "colbert.infra.run.Run().print_main", "colbert.infra.run.Run().print_main", "numpy.floor", "colbert.infra.run.Run", "colbert.infra.run.Run", "len", "collection_indexer.CollectionIndexer.collection.get_chunksize", "numpy.log2", "int", "colbert.infra.run.Run", "colbert.infra.run.Run", "colbert.infra.run.Run", "colbert.infra.run.Run", "colbert.infra.run.Run", "numpy.sqrt"], "methods", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.indexing.collection_indexer.CollectionIndexer._sample_pids", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.indexing.collection_indexer.CollectionIndexer._sample_embeddings", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.infra.run.Run.print_main", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.infra.run.Run.print_main", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.indexing.collection_indexer.CollectionIndexer._save_plan", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.indexing.collection_indexer.CollectionIndexer._try_load_plan", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.infra.run.Run.print_main", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.infra.run.Run.print_main", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.infra.run.Run.print_main", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.infra.run.Run.print_main", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.infra.run.Run.print_main", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.data.collection.Collection.get_chunksize"], ["", "", "def", "setup", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "config", ".", "resume", ":", "\n", "            ", "if", "self", ".", "_try_load_plan", "(", ")", ":", "\n", "                ", "Run", "(", ")", ".", "print_main", "(", "f\"#> Loaded plan from {self.plan_path}:\"", ")", "\n", "Run", "(", ")", ".", "print_main", "(", "f\"#> num_chunks = {self.num_chunks}\"", ")", "\n", "Run", "(", ")", ".", "print_main", "(", "f\"#> num_partitions = {self.num_chunks}\"", ")", "\n", "Run", "(", ")", ".", "print_main", "(", "f\"#> num_embeddings_est = {self.num_embeddings_est}\"", ")", "\n", "Run", "(", ")", ".", "print_main", "(", "f\"#> avg_doclen_est = {self.avg_doclen_est}\"", ")", "\n", "return", "\n", "\n", "", "", "self", ".", "num_chunks", "=", "int", "(", "np", ".", "ceil", "(", "len", "(", "self", ".", "collection", ")", "/", "self", ".", "collection", ".", "get_chunksize", "(", ")", ")", ")", "\n", "\n", "sampled_pids", "=", "self", ".", "_sample_pids", "(", ")", "\n", "avg_doclen_est", "=", "self", ".", "_sample_embeddings", "(", "sampled_pids", ")", "\n", "\n", "# Select the number of partitions", "\n", "num_passages", "=", "len", "(", "self", ".", "collection", ")", "\n", "self", ".", "num_embeddings_est", "=", "num_passages", "*", "avg_doclen_est", "\n", "self", ".", "num_partitions", "=", "int", "(", "2", "**", "np", ".", "floor", "(", "np", ".", "log2", "(", "16", "*", "np", ".", "sqrt", "(", "self", ".", "num_embeddings_est", ")", ")", ")", ")", "\n", "\n", "Run", "(", ")", ".", "print_main", "(", "f'Creaing {self.num_partitions:,} partitions.'", ")", "\n", "Run", "(", ")", ".", "print_main", "(", "f'*Estimated* {int(self.num_embeddings_est):,} embeddings.'", ")", "\n", "\n", "self", ".", "_save_plan", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.indexing.collection_indexer.CollectionIndexer._sample_pids": [[96, 113], ["len", "min", "random.sample", "colbert.infra.run.Run().print_main", "set", "numpy.sqrt", "range", "int", "colbert.infra.run.Run", "len"], "methods", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.infra.run.Run.print_main", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.config.core_config.CoreConfig.set"], ["", "def", "_sample_pids", "(", "self", ")", ":", "\n", "        ", "num_passages", "=", "len", "(", "self", ".", "collection", ")", "\n", "\n", "# Simple alternative: < 100k: 100%, < 1M: 15%, < 10M: 7%, < 100M: 3%, > 100M: 1%", "\n", "# Keep in mind that, say, 15% still means at least 100k.", "\n", "# So the formula is max(100% * min(total, 100k), 15% * min(total, 1M), ...)", "\n", "# Then we subsample the vectors to 100 * num_partitions", "\n", "\n", "typical_doclen", "=", "120", "# let's keep sampling independent of the actual doc_maxlen", "\n", "sampled_pids", "=", "16", "*", "np", ".", "sqrt", "(", "typical_doclen", "*", "num_passages", ")", "\n", "# sampled_pids = int(2 ** np.floor(np.log2(1 + sampled_pids)))", "\n", "sampled_pids", "=", "min", "(", "1", "+", "int", "(", "sampled_pids", ")", ",", "num_passages", ")", "\n", "\n", "sampled_pids", "=", "random", ".", "sample", "(", "range", "(", "num_passages", ")", ",", "sampled_pids", ")", "\n", "Run", "(", ")", ".", "print_main", "(", "f\"# of sampled PIDs = {len(sampled_pids)} \\t sampled_pids[:3] = {sampled_pids[:3]}\"", ")", "\n", "\n", "return", "set", "(", "sampled_pids", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.indexing.collection_indexer.CollectionIndexer._sample_embeddings": [[114, 138], ["collection_indexer.CollectionIndexer.collection.enumerate", "collection_indexer.CollectionIndexer.encoder.encode_passages", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.distributed.all_reduce", "torch.distributed.all_reduce", "torch.distributed.all_reduce", "torch.distributed.all_reduce", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.distributed.all_reduce", "torch.distributed.all_reduce", "torch.distributed.all_reduce", "torch.distributed.all_reduce", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.distributed.all_reduce", "torch.distributed.all_reduce", "torch.distributed.all_reduce", "torch.distributed.all_reduce", "colbert.infra.run.Run().print", "torch.save", "torch.save", "torch.save", "torch.save", "torch.tensor().cuda.item", "torch.tensor().cuda.item", "torch.tensor().cuda.item", "torch.tensor().cuda.item", "os.path.join", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "sum", "len", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "colbert.infra.run.Run", "len", "local_sample_embs.size", "float", "len"], "methods", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.data.collection.Collection.enumerate", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.indexing.collection_encoder.CollectionEncoder.encode_passages", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.infra.run.Run.print", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.codecs.residual_embeddings.ResidualEmbeddings.save", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.codecs.residual_embeddings.ResidualEmbeddings.save", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.codecs.residual_embeddings.ResidualEmbeddings.save", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.codecs.residual_embeddings.ResidualEmbeddings.save"], ["", "def", "_sample_embeddings", "(", "self", ",", "sampled_pids", ")", ":", "\n", "        ", "local_pids", "=", "self", ".", "collection", ".", "enumerate", "(", "rank", "=", "self", ".", "rank", ")", "\n", "local_sample", "=", "[", "passage", "for", "pid", ",", "passage", "in", "local_pids", "if", "pid", "in", "sampled_pids", "]", "\n", "\n", "local_sample_embs", ",", "doclens", "=", "self", ".", "encoder", ".", "encode_passages", "(", "local_sample", ")", "\n", "\n", "self", ".", "num_sample_embs", "=", "torch", ".", "tensor", "(", "[", "local_sample_embs", ".", "size", "(", "0", ")", "]", ")", ".", "cuda", "(", ")", "\n", "torch", ".", "distributed", ".", "all_reduce", "(", "self", ".", "num_sample_embs", ")", "\n", "\n", "avg_doclen_est", "=", "sum", "(", "doclens", ")", "/", "len", "(", "doclens", ")", "if", "doclens", "else", "0", "\n", "avg_doclen_est", "=", "torch", ".", "tensor", "(", "[", "avg_doclen_est", "]", ")", ".", "cuda", "(", ")", "\n", "torch", ".", "distributed", ".", "all_reduce", "(", "avg_doclen_est", ")", "\n", "\n", "nonzero_ranks", "=", "torch", ".", "tensor", "(", "[", "float", "(", "len", "(", "local_sample", ")", ">", "0", ")", "]", ")", ".", "cuda", "(", ")", "\n", "torch", ".", "distributed", ".", "all_reduce", "(", "nonzero_ranks", ")", "\n", "\n", "avg_doclen_est", "=", "avg_doclen_est", ".", "item", "(", ")", "/", "nonzero_ranks", ".", "item", "(", ")", "\n", "self", ".", "avg_doclen_est", "=", "avg_doclen_est", "\n", "\n", "Run", "(", ")", ".", "print", "(", "f'avg_doclen_est = {avg_doclen_est} \\t len(local_sample) = {len(local_sample):,}'", ")", "\n", "\n", "torch", ".", "save", "(", "local_sample_embs", ",", "os", ".", "path", ".", "join", "(", "self", ".", "config", ".", "index_path_", ",", "f'sample.{self.rank}.pt'", ")", ")", "\n", "\n", "return", "avg_doclen_est", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.indexing.collection_indexer.CollectionIndexer._try_load_plan": [[139, 163], ["os.path.join", "os.path.exists", "open", "ujson.load"], "methods", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.infra.run.Run.open", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.codecs.residual_embeddings.ResidualEmbeddings.load"], ["", "def", "_try_load_plan", "(", "self", ")", ":", "\n", "        ", "config", "=", "self", ".", "config", "\n", "self", ".", "plan_path", "=", "os", ".", "path", ".", "join", "(", "config", ".", "index_path_", ",", "'plan.json'", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "self", ".", "plan_path", ")", ":", "\n", "            ", "with", "open", "(", "self", ".", "plan_path", ",", "'r'", ")", "as", "f", ":", "\n", "                ", "try", ":", "\n", "                    ", "plan", "=", "ujson", ".", "load", "(", "f", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "                    ", "return", "False", "\n", "", "if", "not", "(", "'num_chunks'", "in", "plan", "and", "\n", "'num_partitions'", "in", "plan", "and", "\n", "'num_embeddings_est'", "in", "plan", "and", "\n", "'avg_doclen_est'", "in", "plan", ")", ":", "\n", "                    ", "return", "False", "\n", "\n", "# TODO: Verify config matches", "\n", "", "self", ".", "num_chunks", "=", "plan", "[", "'num_chunks'", "]", "\n", "self", ".", "num_partitions", "=", "plan", "[", "'num_partitions'", "]", "\n", "self", ".", "num_embeddings_est", "=", "plan", "[", "'num_embeddings_est'", "]", "\n", "self", ".", "avg_doclen_est", "=", "plan", "[", "'avg_doclen_est'", "]", "\n", "\n", "", "return", "True", "\n", "", "else", ":", "\n", "            ", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.indexing.collection_indexer.CollectionIndexer._save_plan": [[164, 178], ["os.path.join", "colbert.infra.run.Run().print", "open", "f.write", "colbert.infra.run.Run", "config.export", "ujson.dumps"], "methods", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.infra.run.Run.print", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.infra.run.Run.open", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.config.core_config.CoreConfig.export"], ["", "", "def", "_save_plan", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "rank", "<", "1", ":", "\n", "            ", "config", "=", "self", ".", "config", "\n", "self", ".", "plan_path", "=", "os", ".", "path", ".", "join", "(", "config", ".", "index_path_", ",", "'plan.json'", ")", "\n", "Run", "(", ")", ".", "print", "(", "\"#> Saving the indexing plan to\"", ",", "self", ".", "plan_path", ",", "\"..\"", ")", "\n", "\n", "with", "open", "(", "self", ".", "plan_path", ",", "'w'", ")", "as", "f", ":", "\n", "                ", "d", "=", "{", "'config'", ":", "config", ".", "export", "(", ")", "}", "\n", "d", "[", "'num_chunks'", "]", "=", "self", ".", "num_chunks", "\n", "d", "[", "'num_partitions'", "]", "=", "self", ".", "num_partitions", "\n", "d", "[", "'num_embeddings_est'", "]", "=", "self", ".", "num_embeddings_est", "\n", "d", "[", "'avg_doclen_est'", "]", "=", "self", ".", "avg_doclen_est", "\n", "\n", "f", ".", "write", "(", "ujson", ".", "dumps", "(", "d", ",", "indent", "=", "4", ")", "+", "'\\n'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.indexing.collection_indexer.CollectionIndexer.train": [[180, 198], ["collection_indexer.CollectionIndexer._concatenate_and_split_sample", "collection_indexer.CollectionIndexer._train_kmeans", "colbert.infra.launcher.print_memory_stats", "collection_indexer.CollectionIndexer._compute_avg_residual", "colbert.utils.utils.print_message", "colbert.indexing.codecs.residual.ResidualCodec", "collection_indexer.CollectionIndexer.saver.save_codec"], "methods", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.indexing.collection_indexer.CollectionIndexer._concatenate_and_split_sample", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.indexing.collection_indexer.CollectionIndexer._train_kmeans", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.infra.launcher.print_memory_stats", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.indexing.collection_indexer.CollectionIndexer._compute_avg_residual", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.utils.print_message", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.indexing.index_saver.IndexSaver.save_codec"], ["", "", "", "def", "train", "(", "self", ",", "shared_lists", ")", ":", "\n", "        ", "if", "self", ".", "rank", ">", "0", ":", "\n", "            ", "return", "\n", "\n", "", "sample", ",", "heldout", "=", "self", ".", "_concatenate_and_split_sample", "(", ")", "\n", "\n", "centroids", "=", "self", ".", "_train_kmeans", "(", "sample", ",", "shared_lists", ")", "\n", "\n", "print_memory_stats", "(", "f'RANK:{self.rank}'", ")", "\n", "del", "sample", "\n", "\n", "bucket_cutoffs", ",", "bucket_weights", ",", "avg_residual", "=", "self", ".", "_compute_avg_residual", "(", "centroids", ",", "heldout", ")", "\n", "\n", "print_message", "(", "f'avg_residual = {avg_residual}'", ")", "\n", "\n", "codec", "=", "ResidualCodec", "(", "config", "=", "self", ".", "config", ",", "centroids", "=", "centroids", ",", "avg_residual", "=", "avg_residual", ",", "\n", "bucket_cutoffs", "=", "bucket_cutoffs", ",", "bucket_weights", "=", "bucket_weights", ")", "\n", "self", ".", "saver", ".", "save_codec", "(", "codec", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.indexing.collection_indexer.CollectionIndexer._concatenate_and_split_sample": [[199, 231], ["colbert.infra.launcher.print_memory_stats", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "range", "colbert.infra.launcher.print_memory_stats", "colbert.infra.launcher.print_memory_stats", "int", "torch.empty.split", "torch.empty.split", "colbert.infra.launcher.print_memory_stats", "os.path.join", "torch.load", "torch.load", "torch.load", "torch.load", "os.remove", "torch.empty.size", "torch.empty.size", "torch.empty.size", "torch.empty.size", "min", "torch.load.size", "torch.load.size", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.empty.size", "torch.empty.size", "torch.empty.size", "torch.empty.size", "torch.empty.size", "torch.empty.size"], "methods", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.infra.launcher.print_memory_stats", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.infra.launcher.print_memory_stats", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.infra.launcher.print_memory_stats", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.infra.launcher.print_memory_stats", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.codecs.residual_embeddings.ResidualEmbeddings.load", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.codecs.residual_embeddings.ResidualEmbeddings.load", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.codecs.residual_embeddings.ResidualEmbeddings.load", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.codecs.residual_embeddings.ResidualEmbeddings.load"], ["", "def", "_concatenate_and_split_sample", "(", "self", ")", ":", "\n", "        ", "print_memory_stats", "(", "f'***1*** \\t RANK:{self.rank}'", ")", "\n", "\n", "# TODO: Allocate a float16 array. Load the samples from disk, copy to array.", "\n", "sample", "=", "torch", ".", "empty", "(", "self", ".", "num_sample_embs", ",", "self", ".", "config", ".", "dim", ",", "dtype", "=", "torch", ".", "float16", ")", "\n", "\n", "offset", "=", "0", "\n", "for", "r", "in", "range", "(", "self", ".", "nranks", ")", ":", "\n", "            ", "sub_sample_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "config", ".", "index_path_", ",", "f'sample.{r}.pt'", ")", "\n", "sub_sample", "=", "torch", ".", "load", "(", "sub_sample_path", ")", "\n", "os", ".", "remove", "(", "sub_sample_path", ")", "\n", "\n", "endpos", "=", "offset", "+", "sub_sample", ".", "size", "(", "0", ")", "\n", "sample", "[", "offset", ":", "endpos", "]", "=", "sub_sample", "\n", "offset", "=", "endpos", "\n", "\n", "", "assert", "endpos", "==", "sample", ".", "size", "(", "0", ")", ",", "(", "endpos", ",", "sample", ".", "size", "(", ")", ")", "\n", "\n", "print_memory_stats", "(", "f'***2*** \\t RANK:{self.rank}'", ")", "\n", "\n", "# Shuffle and split out a 5% \"heldout\" sub-sample [up to 50k elements]", "\n", "sample", "=", "sample", "[", "torch", ".", "randperm", "(", "sample", ".", "size", "(", "0", ")", ")", "]", "\n", "\n", "print_memory_stats", "(", "f'***3*** \\t RANK:{self.rank}'", ")", "\n", "\n", "heldout_fraction", "=", "0.05", "\n", "heldout_size", "=", "int", "(", "min", "(", "heldout_fraction", "*", "sample", ".", "size", "(", "0", ")", ",", "50_000", ")", ")", "\n", "sample", ",", "sample_heldout", "=", "sample", ".", "split", "(", "[", "sample", ".", "size", "(", "0", ")", "-", "heldout_size", ",", "heldout_size", "]", ",", "dim", "=", "0", ")", "\n", "\n", "print_memory_stats", "(", "f'***4*** \\t RANK:{self.rank}'", ")", "\n", "\n", "return", "sample", ",", "sample_heldout", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.indexing.collection_indexer.CollectionIndexer._train_kmeans": [[232, 260], ["torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.nn.functional.normalize().half", "torch.nn.functional.normalize().half", "torch.nn.functional.normalize().half", "torch.nn.functional.normalize().half", "torch.Queue", "torch.Queue", "torch.Process", "torch.Process", "torch.Process.start", "torch.Queue.get", "torch.Process.join", "collection_indexer.compute_faiss_kmeans", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize"], "methods", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.indexing.collection_indexer.compute_faiss_kmeans"], ["", "def", "_train_kmeans", "(", "self", ",", "sample", ",", "shared_lists", ")", ":", "\n", "        ", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "\n", "do_fork_for_faiss", "=", "False", "# set to True to free faiss GPU-0 memory at the cost of one more copy of `sample`.", "\n", "\n", "args_", "=", "[", "self", ".", "config", ".", "dim", ",", "self", ".", "num_partitions", ",", "self", ".", "config", ".", "kmeans_niters", "]", "\n", "\n", "if", "do_fork_for_faiss", ":", "\n", "# For this to work reliably, write the sample to disk. Pickle may not handle >4GB of data.", "\n", "# Delete the sample file after work is done.", "\n", "\n", "            ", "shared_lists", "[", "0", "]", "[", "0", "]", "=", "sample", "\n", "return_value_queue", "=", "mp", ".", "Queue", "(", ")", "\n", "\n", "args_", "=", "args_", "+", "[", "shared_lists", ",", "return_value_queue", "]", "\n", "proc", "=", "mp", ".", "Process", "(", "target", "=", "compute_faiss_kmeans", ",", "args", "=", "args_", ")", "\n", "\n", "proc", ".", "start", "(", ")", "\n", "centroids", "=", "return_value_queue", ".", "get", "(", ")", "\n", "proc", ".", "join", "(", ")", "\n", "\n", "", "else", ":", "\n", "            ", "args_", "=", "args_", "+", "[", "[", "[", "sample", "]", "]", "]", "\n", "centroids", "=", "compute_faiss_kmeans", "(", "*", "args_", ")", "\n", "\n", "", "centroids", "=", "torch", ".", "nn", ".", "functional", ".", "normalize", "(", "centroids", ",", "dim", "=", "-", "1", ")", ".", "half", "(", ")", "\n", "\n", "return", "centroids", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.indexing.collection_indexer.CollectionIndexer._compute_avg_residual": [[261, 283], ["colbert.indexing.codecs.residual.ResidualCodec", "colbert.indexing.codecs.residual.ResidualCodec.compress_into_codes", "colbert.indexing.codecs.residual.ResidualCodec.lookup_centroids", "torch.abs().mean().cpu", "torch.abs().mean().cpu", "torch.abs().mean().cpu", "torch.abs().mean().cpu", "print", "heldout_avg_residual.float().quantile", "heldout_avg_residual.float().quantile", "colbert.utils.utils.print_message", "colbert.utils.utils.print_message", "heldout.cuda", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.abs().mean().cpu.mean", "torch.abs().mean().cpu.mean", "torch.abs().mean", "torch.abs().mean", "torch.abs().mean", "torch.abs().mean", "round", "heldout_avg_residual.float", "heldout_avg_residual.float", "torch.abs().mean().cpu.squeeze().tolist", "torch.abs().mean().cpu.squeeze().tolist", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs().mean().cpu.squeeze", "torch.abs().mean().cpu.squeeze"], "methods", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.codecs.residual.ResidualCodec.compress_into_codes", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.codecs.residual.ResidualCodec.lookup_centroids", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.infra.run.Run.print", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.utils.print_message", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.utils.print_message", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.data.examples.Examples.tolist", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.data.examples.Examples.tolist"], ["", "def", "_compute_avg_residual", "(", "self", ",", "centroids", ",", "heldout", ")", ":", "\n", "        ", "compressor", "=", "ResidualCodec", "(", "config", "=", "self", ".", "config", ",", "centroids", "=", "centroids", ",", "avg_residual", "=", "None", ")", "\n", "\n", "heldout_reconstruct", "=", "compressor", ".", "compress_into_codes", "(", "heldout", ",", "out_device", "=", "'cuda'", ")", "\n", "heldout_reconstruct", "=", "compressor", ".", "lookup_centroids", "(", "heldout_reconstruct", ",", "out_device", "=", "'cuda'", ")", "\n", "heldout_avg_residual", "=", "heldout", ".", "cuda", "(", ")", "-", "heldout_reconstruct", "\n", "\n", "avg_residual", "=", "torch", ".", "abs", "(", "heldout_avg_residual", ")", ".", "mean", "(", "dim", "=", "0", ")", ".", "cpu", "(", ")", "\n", "print", "(", "[", "round", "(", "x", ",", "3", ")", "for", "x", "in", "avg_residual", ".", "squeeze", "(", ")", ".", "tolist", "(", ")", "]", ")", "\n", "\n", "num_options", "=", "2", "**", "self", ".", "config", ".", "nbits", "\n", "quantiles", "=", "torch", ".", "arange", "(", "0", ",", "num_options", ",", "device", "=", "heldout_avg_residual", ".", "device", ")", "*", "(", "1", "/", "num_options", ")", "\n", "bucket_cutoffs_quantiles", ",", "bucket_weights_quantiles", "=", "quantiles", "[", "1", ":", "]", ",", "quantiles", "+", "(", "0.5", "/", "num_options", ")", "\n", "\n", "bucket_cutoffs", "=", "heldout_avg_residual", ".", "float", "(", ")", ".", "quantile", "(", "bucket_cutoffs_quantiles", ")", "\n", "bucket_weights", "=", "heldout_avg_residual", ".", "float", "(", ")", ".", "quantile", "(", "bucket_weights_quantiles", ")", "\n", "\n", "print_message", "(", "\n", "f\"#> Got bucket_cutoffs_quantiles = {bucket_cutoffs_quantiles} and bucket_weights_quantiles = {bucket_weights_quantiles}\"", ")", "\n", "print_message", "(", "f\"#> Got bucket_cutoffs = {bucket_cutoffs} and bucket_weights = {bucket_weights}\"", ")", "\n", "\n", "return", "bucket_cutoffs", ",", "bucket_weights", ",", "avg_residual", ".", "mean", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.indexing.collection_indexer.CollectionIndexer.index": [[289, 304], ["collection_indexer.CollectionIndexer.saver.thread", "collection_indexer.CollectionIndexer.collection.enumerate_batches", "tqdm.tqdm", "collection_indexer.CollectionIndexer.encoder.encode_passages", "colbert.infra.run.Run().print_main", "collection_indexer.CollectionIndexer.saver.save_chunk", "collection_indexer.CollectionIndexer.saver.check_chunk_exists", "colbert.infra.run.Run().print_main", "colbert.infra.run.Run", "colbert.infra.run.Run", "len", "embs.size"], "methods", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.indexing.index_saver.IndexSaver.thread", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.data.collection.Collection.enumerate_batches", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.indexing.collection_encoder.CollectionEncoder.encode_passages", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.infra.run.Run.print_main", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.indexing.index_saver.IndexSaver.save_chunk", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.indexing.index_saver.IndexSaver.check_chunk_exists", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.infra.run.Run.print_main"], ["", "def", "index", "(", "self", ")", ":", "\n", "        ", "with", "self", ".", "saver", ".", "thread", "(", ")", ":", "\n", "            ", "batches", "=", "self", ".", "collection", ".", "enumerate_batches", "(", "rank", "=", "self", ".", "rank", ")", "\n", "for", "chunk_idx", ",", "offset", ",", "passages", "in", "tqdm", ".", "tqdm", "(", "batches", ",", "disable", "=", "self", ".", "rank", ">", "0", ")", ":", "\n", "                ", "if", "self", ".", "config", ".", "resume", "and", "self", ".", "saver", ".", "check_chunk_exists", "(", "chunk_idx", ")", ":", "\n", "                    ", "Run", "(", ")", ".", "print_main", "(", "f\"#> Found chunk {chunk_idx} in the index already, skipping encoding...\"", ")", "\n", "continue", "\n", "", "embs", ",", "doclens", "=", "self", ".", "encoder", ".", "encode_passages", "(", "passages", ")", "\n", "assert", "embs", ".", "dtype", "==", "torch", ".", "float16", "\n", "\n", "Run", "(", ")", ".", "print_main", "(", "f\"#> Saving chunk {chunk_idx}: \\t {len(passages):,} passages \"", "\n", "f\"and {embs.size(0):,} embeddings. From #{offset:,} onward.\"", ")", "\n", "\n", "self", ".", "saver", ".", "save_chunk", "(", "chunk_idx", ",", "offset", ",", "embs", ",", "doclens", ")", "\n", "del", "embs", ",", "doclens", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.indexing.collection_indexer.CollectionIndexer.finalize": [[305, 314], ["collection_indexer.CollectionIndexer._check_all_files_are_saved", "collection_indexer.CollectionIndexer._collect_embedding_id_offset", "collection_indexer.CollectionIndexer._build_ivf", "collection_indexer.CollectionIndexer._update_metadata"], "methods", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.indexing.collection_indexer.CollectionIndexer._check_all_files_are_saved", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.indexing.collection_indexer.CollectionIndexer._collect_embedding_id_offset", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.indexing.collection_indexer.CollectionIndexer._build_ivf", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.indexing.collection_indexer.CollectionIndexer._update_metadata"], ["", "", "", "def", "finalize", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "rank", ">", "0", ":", "\n", "            ", "return", "\n", "\n", "", "self", ".", "_check_all_files_are_saved", "(", ")", "\n", "self", ".", "_collect_embedding_id_offset", "(", ")", "\n", "\n", "self", ".", "_build_ivf", "(", ")", "\n", "self", ".", "_update_metadata", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.indexing.collection_indexer.CollectionIndexer._check_all_files_are_saved": [[315, 325], ["colbert.infra.run.Run().print_main", "range", "colbert.infra.run.Run().print_main", "colbert.infra.run.Run", "collection_indexer.CollectionIndexer.saver.check_chunk_exists", "colbert.infra.run.Run().print_main", "colbert.infra.run.Run", "colbert.infra.run.Run"], "methods", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.infra.run.Run.print_main", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.infra.run.Run.print_main", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.indexing.index_saver.IndexSaver.check_chunk_exists", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.infra.run.Run.print_main"], ["", "def", "_check_all_files_are_saved", "(", "self", ")", ":", "\n", "        ", "Run", "(", ")", ".", "print_main", "(", "\"#> Checking all files were saved...\"", ")", "\n", "success", "=", "True", "\n", "for", "chunk_idx", "in", "range", "(", "self", ".", "num_chunks", ")", ":", "\n", "            ", "if", "not", "self", ".", "saver", ".", "check_chunk_exists", "(", "chunk_idx", ")", ":", "\n", "                ", "success", "=", "False", "\n", "Run", "(", ")", ".", "print_main", "(", "f\"#> ERROR: Could not find chunk {chunk_idx}!\"", ")", "\n", "#TODO: Fail here?", "\n", "", "", "if", "success", ":", "\n", "            ", "Run", "(", ")", ".", "print_main", "(", "\"Found all files!\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.indexing.collection_indexer.CollectionIndexer._collect_embedding_id_offset": [[326, 351], ["range", "os.path.join", "len", "open", "ujson.load", "collection_indexer.CollectionIndexer.embedding_offsets.append", "open", "f.write", "ujson.dumps"], "methods", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.infra.run.Run.open", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.codecs.residual_embeddings.ResidualEmbeddings.load", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.infra.run.Run.open"], ["", "", "def", "_collect_embedding_id_offset", "(", "self", ")", ":", "\n", "        ", "passage_offset", "=", "0", "\n", "embedding_offset", "=", "0", "\n", "\n", "self", ".", "embedding_offsets", "=", "[", "]", "\n", "\n", "for", "chunk_idx", "in", "range", "(", "self", ".", "num_chunks", ")", ":", "\n", "            ", "metadata_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "config", ".", "index_path_", ",", "f'{chunk_idx}.metadata.json'", ")", "\n", "\n", "with", "open", "(", "metadata_path", ")", "as", "f", ":", "\n", "                ", "chunk_metadata", "=", "ujson", ".", "load", "(", "f", ")", "\n", "\n", "chunk_metadata", "[", "'embedding_offset'", "]", "=", "embedding_offset", "\n", "self", ".", "embedding_offsets", ".", "append", "(", "embedding_offset", ")", "\n", "\n", "assert", "chunk_metadata", "[", "'passage_offset'", "]", "==", "passage_offset", ",", "(", "chunk_idx", ",", "passage_offset", ",", "chunk_metadata", ")", "\n", "\n", "passage_offset", "+=", "chunk_metadata", "[", "'num_passages'", "]", "\n", "embedding_offset", "+=", "chunk_metadata", "[", "'num_embeddings'", "]", "\n", "\n", "", "with", "open", "(", "metadata_path", ",", "'w'", ")", "as", "f", ":", "\n", "                ", "f", ".", "write", "(", "ujson", ".", "dumps", "(", "chunk_metadata", ",", "indent", "=", "4", ")", "+", "'\\n'", ")", "\n", "\n", "", "", "self", ".", "num_embeddings", "=", "embedding_offset", "\n", "assert", "len", "(", "self", ".", "embedding_offsets", ")", "==", "self", ".", "num_chunks", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.indexing.collection_indexer.CollectionIndexer._build_ivf": [[352, 410], ["colbert.infra.run.Run().print_main", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "colbert.infra.launcher.print_memory_stats", "colbert.infra.run.Run().print_main", "tqdm.tqdm", "colbert.infra.run.Run().print_main", "colbert.infra.launcher.print_memory_stats", "codes.sort.sort.sort", "colbert.infra.launcher.print_memory_stats", "colbert.infra.run.Run().print_main", "values.unique_consecutive", "colbert.infra.launcher.print_memory_stats", "colbert.indexing.utils.optimize_ivf", "range", "colbert.indexing.codecs.residual.ResidualCodec.Embeddings.load_codes", "codes.sort.sort.size", "colbert.indexing.codecs.residual.ResidualCodec.Embeddings.load_codes.size", "codes.sort.sort.size", "partitions.size", "partitions.size", "colbert.infra.run.Run", "colbert.infra.run.Run", "colbert.indexing.codecs.residual.ResidualCodec.Embeddings.load_codes.size", "colbert.infra.run.Run", "colbert.infra.run.Run", "colbert.indexing.codecs.residual.ResidualCodec.Embeddings.load_codes.size"], "methods", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.infra.run.Run.print_main", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.infra.launcher.print_memory_stats", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.infra.run.Run.print_main", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.infra.run.Run.print_main", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.infra.launcher.print_memory_stats", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.infra.launcher.print_memory_stats", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.infra.run.Run.print_main", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.infra.launcher.print_memory_stats", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.indexing.utils.optimize_ivf", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.codecs.residual_embeddings.ResidualEmbeddings.load_codes"], ["", "def", "_build_ivf", "(", "self", ")", ":", "\n", "# Maybe we should several small IVFs? Every 250M embeddings, so that's every 1 GB.", "\n", "# It would save *memory* here and *disk space* regarding the int64.", "\n", "# But we'd have to decide how many IVFs to use during retrieval: many (loop) or one?", "\n", "# A loop seems nice if we can find a size that's large enough for speed yet small enough to fit on GPU!", "\n", "# Then it would help nicely for batching later: 1GB.", "\n", "\n", "        ", "Run", "(", ")", ".", "print_main", "(", "\"#> Building IVF...\"", ")", "\n", "\n", "codes", "=", "torch", ".", "empty", "(", "self", ".", "num_embeddings", ",", ")", "\n", "print_memory_stats", "(", "f'RANK:{self.rank}'", ")", "\n", "\n", "Run", "(", ")", ".", "print_main", "(", "\"#> Loading codes...\"", ")", "\n", "\n", "for", "chunk_idx", "in", "tqdm", ".", "tqdm", "(", "range", "(", "self", ".", "num_chunks", ")", ")", ":", "\n", "            ", "offset", "=", "self", ".", "embedding_offsets", "[", "chunk_idx", "]", "\n", "chunk_codes", "=", "ResidualCodec", ".", "Embeddings", ".", "load_codes", "(", "self", ".", "config", ".", "index_path_", ",", "chunk_idx", ")", "\n", "\n", "codes", "[", "offset", ":", "offset", "+", "chunk_codes", ".", "size", "(", "0", ")", "]", "=", "chunk_codes", "\n", "\n", "", "assert", "offset", "+", "chunk_codes", ".", "size", "(", "0", ")", "==", "codes", ".", "size", "(", "0", ")", ",", "(", "offset", ",", "chunk_codes", ".", "size", "(", "0", ")", ",", "codes", ".", "size", "(", ")", ")", "\n", "\n", "\n", "Run", "(", ")", ".", "print_main", "(", "f\"Sorting codes...\"", ")", "\n", "\n", "print_memory_stats", "(", "f'RANK:{self.rank}'", ")", "\n", "\n", "codes", "=", "codes", ".", "sort", "(", ")", "\n", "ivf", ",", "values", "=", "codes", ".", "indices", ",", "codes", ".", "values", "\n", "\n", "print_memory_stats", "(", "f'RANK:{self.rank}'", ")", "\n", "\n", "Run", "(", ")", ".", "print_main", "(", "f\"Getting unique codes...\"", ")", "\n", "\n", "partitions", ",", "ivf_lengths", "=", "values", ".", "unique_consecutive", "(", "return_counts", "=", "True", ")", "\n", "\n", "# All partitions should be non-empty. (We can use torch.histc otherwise.)", "\n", "assert", "partitions", ".", "size", "(", "0", ")", "==", "self", ".", "num_partitions", ",", "(", "partitions", ".", "size", "(", ")", ",", "self", ".", "num_partitions", ")", "\n", "\n", "# ivf = [[] for _ in range(self.num_partitions)]", "\n", "# for chunk_idx in range(self.num_chunks):", "\n", "#     embedding_offset = self.embedding_offsets[chunk_idx]", "\n", "#     chunk_codes = ResidualCodec.Embeddings.load_codes(self.config.index_path_, chunk_idx)", "\n", "\n", "#     for local_embedding_idx, partition_idx in enumerate(chunk_codes.tolist()):", "\n", "#         embedding_idx = embedding_offset + local_embedding_idx", "\n", "#         ivf[partition_idx].append(embedding_idx)", "\n", "\n", "# ivf_lengths = [len(partition) for partition in ivf]", "\n", "# ivf = torch.tensor(flatten(ivf), dtype=torch.long)  # FIXME: If num_embeddings > 2B, use torch.long!", "\n", "\n", "print_memory_stats", "(", "f'RANK:{self.rank}'", ")", "\n", "\n", "# TODO: Add a flag to control whether we save the original IVF", "\n", "# original_ivf_path = os.path.join(self.config.index_path_, 'ivf.pt')", "\n", "# torch.save((ivf, ivf_lengths.clone()), original_ivf_path)", "\n", "\n", "_", ",", "_", "=", "optimize_ivf", "(", "ivf", ",", "ivf_lengths", ",", "self", ".", "config", ".", "index_path_", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.indexing.collection_indexer.CollectionIndexer._update_metadata": [[411, 424], ["os.path.join", "colbert.infra.run.Run().print", "open", "f.write", "colbert.infra.run.Run", "config.export", "len", "ujson.dumps"], "methods", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.infra.run.Run.print", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.infra.run.Run.open", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.config.core_config.CoreConfig.export"], ["", "def", "_update_metadata", "(", "self", ")", ":", "\n", "        ", "config", "=", "self", ".", "config", "\n", "self", ".", "metadata_path", "=", "os", ".", "path", ".", "join", "(", "config", ".", "index_path_", ",", "'metadata.json'", ")", "\n", "Run", "(", ")", ".", "print", "(", "\"#> Saving the indexing metadata to\"", ",", "self", ".", "metadata_path", ",", "\"..\"", ")", "\n", "\n", "with", "open", "(", "self", ".", "metadata_path", ",", "'w'", ")", "as", "f", ":", "\n", "            ", "d", "=", "{", "'config'", ":", "config", ".", "export", "(", ")", "}", "\n", "d", "[", "'num_chunks'", "]", "=", "self", ".", "num_chunks", "\n", "d", "[", "'num_partitions'", "]", "=", "self", ".", "num_partitions", "\n", "d", "[", "'num_embeddings'", "]", "=", "self", ".", "num_embeddings", "\n", "d", "[", "'avg_doclen'", "]", "=", "self", ".", "num_embeddings", "/", "len", "(", "self", ".", "collection", ")", "\n", "\n", "f", ".", "write", "(", "ujson", ".", "dumps", "(", "d", ",", "indent", "=", "4", ")", "+", "'\\n'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.indexing.collection_indexer.encode": [[31, 34], ["collection_indexer.CollectionIndexer", "collection_indexer.CollectionIndexer.run"], "function", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.distillation.ranking_scorer.RankingScorer.run"], ["def", "encode", "(", "config", ",", "collection", ",", "shared_lists", ",", "shared_queues", ")", ":", "\n", "    ", "encoder", "=", "CollectionIndexer", "(", "config", "=", "config", ",", "collection", "=", "collection", ")", "\n", "encoder", ".", "run", "(", "shared_lists", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.indexing.collection_indexer.compute_faiss_kmeans": [[426, 441], ["faiss.Kmeans", "sample.float().numpy.float().numpy", "faiss.Kmeans.train", "torch.from_numpy", "torch.from_numpy", "colbert.infra.launcher.print_memory_stats", "return_value_queue.put", "sample.float().numpy.float"], "function", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.indexing.collection_indexer.CollectionIndexer.train", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.infra.launcher.print_memory_stats"], ["", "", "", "def", "compute_faiss_kmeans", "(", "dim", ",", "num_partitions", ",", "kmeans_niters", ",", "shared_lists", ",", "return_value_queue", "=", "None", ")", ":", "\n", "    ", "kmeans", "=", "faiss", ".", "Kmeans", "(", "dim", ",", "num_partitions", ",", "niter", "=", "kmeans_niters", ",", "gpu", "=", "True", ",", "verbose", "=", "True", ",", "seed", "=", "123", ")", "\n", "\n", "sample", "=", "shared_lists", "[", "0", "]", "[", "0", "]", "\n", "sample", "=", "sample", ".", "float", "(", ")", ".", "numpy", "(", ")", "\n", "kmeans", ".", "train", "(", "sample", ")", "\n", "\n", "centroids", "=", "torch", ".", "from_numpy", "(", "kmeans", ".", "centroids", ")", "\n", "\n", "print_memory_stats", "(", "f'RANK:0*'", ")", "\n", "\n", "if", "return_value_queue", "is", "not", "None", ":", "\n", "        ", "return_value_queue", ".", "put", "(", "centroids", ")", "\n", "\n", "", "return", "centroids", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.indexing.collection_encoder.CollectionEncoder.__init__": [[8, 11], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "checkpoint", ")", ":", "\n", "        ", "self", ".", "config", "=", "config", "\n", "self", ".", "checkpoint", "=", "checkpoint", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.indexing.collection_encoder.CollectionEncoder.encode_passages": [[12, 45], ["colbert.infra.run.Run().print", "len", "torch.inference_mode", "colbert.utils.utils.batch", "torch.cat", "colbert.infra.run.Run", "collection_encoder.CollectionEncoder.checkpoint.docFromText", "torch.cat.append", "doclens.extend", "len"], "methods", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.infra.run.Run.print", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.utils.batch", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.modeling.checkpoint.Checkpoint.docFromText"], ["", "def", "encode_passages", "(", "self", ",", "passages", ")", ":", "\n", "        ", "Run", "(", ")", ".", "print", "(", "f\"#> Encoding {len(passages)} passages..\"", ")", "\n", "\n", "if", "len", "(", "passages", ")", "==", "0", ":", "\n", "            ", "return", "None", ",", "None", "\n", "\n", "", "with", "torch", ".", "inference_mode", "(", ")", ":", "\n", "            ", "embs", ",", "doclens", "=", "[", "]", ",", "[", "]", "\n", "\n", "# Batch here to avoid OOM from storing intermediate embeddings on GPU.", "\n", "# Storing on the GPU helps with speed of masking, etc.", "\n", "# But ideally this batching happens internally inside docFromText.", "\n", "for", "passages_batch", "in", "batch", "(", "passages", ",", "self", ".", "config", ".", "bsize", "*", "50", ")", ":", "\n", "                ", "embs_", ",", "doclens_", "=", "self", ".", "checkpoint", ".", "docFromText", "(", "passages_batch", ",", "bsize", "=", "self", ".", "config", ".", "bsize", ",", "\n", "keep_dims", "=", "'flatten'", ",", "showprogress", "=", "False", ")", "\n", "embs", ".", "append", "(", "embs_", ")", "\n", "doclens", ".", "extend", "(", "doclens_", ")", "\n", "\n", "", "embs", "=", "torch", ".", "cat", "(", "embs", ")", "\n", "\n", "# embs, doclens = self.checkpoint.docFromText(passages, bsize=self.config.bsize,", "\n", "#                                                   keep_dims='flatten', showprogress=(self.config.rank < 1))", "\n", "\n", "# with torch.inference_mode():", "\n", "#     embs = self.checkpoint.docFromText(passages, bsize=self.config.bsize,", "\n", "#                                        keep_dims=False, showprogress=(self.config.rank < 1))", "\n", "#     assert type(embs) is list", "\n", "#     assert len(embs) == len(passages)", "\n", "\n", "#     doclens = [d.size(0) for d in embs]", "\n", "#     embs = torch.cat(embs)", "\n", "\n", "", "return", "embs", ",", "doclens", "\n", "", "", ""]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.indexing.index_saver.IndexSaver.__init__": [[14, 16], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "self", ".", "config", "=", "config", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.indexing.index_saver.IndexSaver.save_codec": [[17, 19], ["codec.save"], "methods", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.codecs.residual_embeddings.ResidualEmbeddings.save"], ["", "def", "save_codec", "(", "self", ",", "codec", ")", ":", "\n", "        ", "codec", ".", "save", "(", "index_path", "=", "self", ".", "config", ".", "index_path_", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.indexing.index_saver.IndexSaver.load_codec": [[20, 22], ["colbert.indexing.codecs.residual.ResidualCodec.load"], "methods", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.codecs.residual_embeddings.ResidualEmbeddings.load"], ["", "def", "load_codec", "(", "self", ")", ":", "\n", "        ", "return", "ResidualCodec", ".", "load", "(", "index_path", "=", "self", ".", "config", ".", "index_path_", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.indexing.index_saver.IndexSaver.try_load_codec": [[23, 29], ["colbert.indexing.codecs.residual.ResidualCodec.load"], "methods", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.codecs.residual_embeddings.ResidualEmbeddings.load"], ["", "def", "try_load_codec", "(", "self", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "ResidualCodec", ".", "load", "(", "index_path", "=", "self", ".", "config", ".", "index_path_", ")", "\n", "return", "True", "\n", "", "except", "Exception", "as", "e", ":", "\n", "            ", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.indexing.index_saver.IndexSaver.check_chunk_exists": [[30, 51], ["os.path.join", "os.path.join", "os.path.join", "os.path.exists", "os.path.exists", "str", "os.path.exists", "os.path.exists"], "methods", ["None"], ["", "", "def", "check_chunk_exists", "(", "self", ",", "chunk_idx", ")", ":", "\n", "# TODO: Verify that the chunk has the right amount of data?", "\n", "\n", "        ", "doclens_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "config", ".", "index_path_", ",", "f'doclens.{chunk_idx}.json'", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "doclens_path", ")", ":", "\n", "            ", "return", "False", "\n", "\n", "", "metadata_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "config", ".", "index_path_", ",", "f'{chunk_idx}.metadata.json'", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "metadata_path", ")", ":", "\n", "            ", "return", "False", "\n", "\n", "", "path_prefix", "=", "os", ".", "path", ".", "join", "(", "self", ".", "config", ".", "index_path_", ",", "str", "(", "chunk_idx", ")", ")", "\n", "codes_path", "=", "f'{path_prefix}.codes.pt'", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "codes_path", ")", ":", "\n", "            ", "return", "False", "\n", "\n", "", "residuals_path", "=", "f'{path_prefix}.residuals.pt'", "# f'{path_prefix}.residuals.bn'", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "residuals_path", ")", ":", "\n", "            ", "return", "False", "\n", "\n", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.indexing.index_saver.IndexSaver.thread": [[52, 69], ["index_saver.IndexSaver.load_codec", "queue.Queue", "threading.Thread", "threading.Thread.start", "index_saver.IndexSaver.saver_queue.put", "threading.Thread.join"], "methods", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.indexing.index_saver.IndexSaver.load_codec"], ["", "@", "contextmanager", "\n", "def", "thread", "(", "self", ")", ":", "\n", "        ", "self", ".", "codec", "=", "self", ".", "load_codec", "(", ")", "\n", "\n", "self", ".", "saver_queue", "=", "queue", ".", "Queue", "(", "maxsize", "=", "3", ")", "\n", "thread", "=", "threading", ".", "Thread", "(", "target", "=", "self", ".", "_saver_thread", ")", "\n", "thread", ".", "start", "(", ")", "\n", "\n", "try", ":", "\n", "            ", "yield", "\n", "\n", "", "finally", ":", "\n", "            ", "self", ".", "saver_queue", ".", "put", "(", "None", ")", "\n", "thread", ".", "join", "(", ")", "\n", "\n", "del", "self", ".", "saver_queue", "\n", "del", "self", ".", "codec", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.indexing.index_saver.IndexSaver.save_chunk": [[70, 74], ["index_saver.IndexSaver.codec.compress", "index_saver.IndexSaver.saver_queue.put"], "methods", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.codecs.residual.ResidualCodec.compress"], ["", "", "def", "save_chunk", "(", "self", ",", "chunk_idx", ",", "offset", ",", "embs", ",", "doclens", ")", ":", "\n", "        ", "compressed_embs", "=", "self", ".", "codec", ".", "compress", "(", "embs", ")", "\n", "\n", "self", ".", "saver_queue", ".", "put", "(", "(", "chunk_idx", ",", "offset", ",", "compressed_embs", ",", "doclens", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.indexing.index_saver.IndexSaver._saver_thread": [[75, 78], ["iter", "index_saver.IndexSaver._write_chunk_to_disk"], "methods", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.indexing.index_saver.IndexSaver._write_chunk_to_disk"], ["", "def", "_saver_thread", "(", "self", ")", ":", "\n", "        ", "for", "args", "in", "iter", "(", "self", ".", "saver_queue", ".", "get", ",", "None", ")", ":", "\n", "            ", "self", ".", "_write_chunk_to_disk", "(", "*", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.indexing.index_saver.IndexSaver._write_chunk_to_disk": [[79, 91], ["os.path.join", "compressed_embs.save", "os.path.join", "os.path.join", "str", "open", "ujson.dump", "open", "ujson.dump", "len", "len"], "methods", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.codecs.residual_embeddings.ResidualEmbeddings.save", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.infra.run.Run.open", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.infra.run.Run.open"], ["", "", "def", "_write_chunk_to_disk", "(", "self", ",", "chunk_idx", ",", "offset", ",", "compressed_embs", ",", "doclens", ")", ":", "\n", "        ", "path_prefix", "=", "os", ".", "path", ".", "join", "(", "self", ".", "config", ".", "index_path_", ",", "str", "(", "chunk_idx", ")", ")", "\n", "compressed_embs", ".", "save", "(", "path_prefix", ")", "\n", "\n", "doclens_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "config", ".", "index_path_", ",", "f'doclens.{chunk_idx}.json'", ")", "\n", "with", "open", "(", "doclens_path", ",", "'w'", ")", "as", "output_doclens", ":", "\n", "            ", "ujson", ".", "dump", "(", "doclens", ",", "output_doclens", ")", "\n", "\n", "", "metadata_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "config", ".", "index_path_", ",", "f'{chunk_idx}.metadata.json'", ")", "\n", "with", "open", "(", "metadata_path", ",", "'w'", ")", "as", "output_metadata", ":", "\n", "            ", "metadata", "=", "{", "'passage_offset'", ":", "offset", ",", "'num_passages'", ":", "len", "(", "doclens", ")", ",", "'num_embeddings'", ":", "len", "(", "compressed_embs", ")", "}", "\n", "ujson", ".", "dump", "(", "metadata", ",", "output_metadata", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.indexing.utils.optimize_ivf": [[8, 54], ["colbert.utils.utils.print_message", "colbert.utils.utils.print_message", "colbert.indexing.loaders.load_doclens", "colbert.utils.utils.flatten", "sum", "torch.zeros", "enumerate", "colbert.utils.utils.print_message", "tqdm.tqdm", "torch.cat", "torch.tensor", "os.path.join", "os.path.join", "torch.save", "colbert.utils.utils.print_message", "os.path.exists", "len", "orig_ivf_lengths.tolist", "torch.unique", "unique_pids_per_centroid.append", "torch.tensor.append", "colbert.utils.utils.print_message"], "function", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.utils.print_message", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.utils.print_message", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.indexing.loaders.load_doclens", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.utils.flatten", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.data.collection.Collection.enumerate", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.utils.print_message", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.codecs.residual_embeddings.ResidualEmbeddings.save", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.utils.print_message", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.data.examples.Examples.tolist", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.utils.print_message"], ["from", "collections", "import", "OrderedDict", ",", "defaultdict", "\n", "\n", "\n", "def", "print_message", "(", "*", "s", ",", "condition", "=", "True", ",", "pad", "=", "False", ")", ":", "\n", "    ", "s", "=", "' '", ".", "join", "(", "[", "str", "(", "x", ")", "for", "x", "in", "s", "]", ")", "\n", "msg", "=", "\"[{}] {}\"", ".", "format", "(", "datetime", ".", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "\"%b %d, %H:%M:%S\"", ")", ",", "s", ")", "\n", "\n", "if", "condition", ":", "\n", "        ", "msg", "=", "msg", "if", "not", "pad", "else", "f'\\n{msg}\\n'", "\n", "print", "(", "msg", ",", "flush", "=", "True", ")", "\n", "\n", "\n", "", "return", "msg", "\n", "\n", "\n", "", "def", "timestamp", "(", "daydir", "=", "False", ")", ":", "\n", "    ", "format_str", "=", "f\"%Y-%m{'/' if daydir else '-'}%d{'/' if daydir else '_'}%H.%M.%S\"", "\n", "result", "=", "datetime", ".", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "format_str", ")", "\n", "return", "result", "\n", "\n", "\n", "", "def", "file_tqdm", "(", "file", ")", ":", "\n", "    ", "print", "(", "f\"#> Reading {file.name}\"", ")", "\n", "\n", "with", "tqdm", ".", "tqdm", "(", "total", "=", "os", ".", "path", ".", "getsize", "(", "file", ".", "name", ")", "/", "1024.0", "/", "1024.0", ",", "unit", "=", "\"MiB\"", ")", "as", "pbar", ":", "\n", "        ", "for", "line", "in", "file", ":", "\n", "            ", "yield", "line", "\n", "pbar", ".", "update", "(", "len", "(", "line", ")", "/", "1024.0", "/", "1024.0", ")", "\n", "\n", "", "pbar", ".", "close", "(", ")", "\n", "\n", "\n", "", "", "def", "torch_load_dnn", "(", "path", ")", ":", "\n", "    ", "if", "path", ".", "startswith", "(", "\"http:\"", ")", "or", "path", ".", "startswith", "(", "\"https:\"", ")", ":", "\n", "        ", "dnn", "=", "torch", ".", "hub", ".", "load_state_dict_from_url", "(", "path", ",", "map_location", "=", "'cpu'", ")", "\n", "", "else", ":", "\n", "        ", "dnn", "=", "torch", ".", "load", "(", "path", ",", "map_location", "=", "'cpu'", ")", "\n", "\n", "", "return", "dnn", "\n", "\n", "", "def", "save_checkpoint", "(", "path", ",", "epoch_idx", ",", "mb_idx", ",", "model", ",", "optimizer", ",", "arguments", "=", "None", ")", ":", "\n", "    ", "print", "(", "f\"#> Saving a checkpoint to {path} ..\"", ")", "\n", "\n", "if", "hasattr", "(", "model", ",", "'module'", ")", ":", "\n", "        ", "model", "=", "model", ".", "module", "# extract model from a distributed/data-parallel wrapper", "\n", "\n", "", "checkpoint", "=", "{", "}", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.indexing.index_manager.IndexManager.__init__": [[8, 10], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "dim", ")", ":", "\n", "        ", "self", ".", "dim", "=", "dim", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.indexing.index_manager.IndexManager.save": [[11, 13], ["torch.save"], "methods", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.codecs.residual_embeddings.ResidualEmbeddings.save"], ["", "def", "save", "(", "self", ",", "tensor", ",", "path_prefix", ")", ":", "\n", "        ", "torch", ".", "save", "(", "tensor", ",", "path_prefix", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.indexing.index_manager.IndexManager.save_bitarray": [[14, 17], ["open", "bitarray.bitarray.bitarray.tofile"], "methods", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.infra.run.Run.open"], ["", "def", "save_bitarray", "(", "self", ",", "bitarray", ",", "path_prefix", ")", ":", "\n", "        ", "with", "open", "(", "path_prefix", ",", "\"wb\"", ")", "as", "f", ":", "\n", "            ", "bitarray", ".", "tofile", "(", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.indexing.index_manager.load_index_part": [[19, 26], ["torch.load", "type", "torch.cat"], "function", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.codecs.residual_embeddings.ResidualEmbeddings.load"], ["", "", "", "def", "load_index_part", "(", "filename", ",", "verbose", "=", "True", ")", ":", "\n", "    ", "part", "=", "torch", ".", "load", "(", "filename", ")", "\n", "\n", "if", "type", "(", "part", ")", "==", "list", ":", "# for backward compatibility", "\n", "        ", "part", "=", "torch", ".", "cat", "(", "part", ")", "\n", "\n", "", "return", "part", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.indexing.index_manager.load_compressed_index_part": [[28, 39], ["bitarray.bitarray", "torch.tensor", "part.reshape.reshape", "open", "bitarray.bitarray.fromfile", "numpy.frombuffer", "len", "bitarray.bitarray.tobytes", "int", "numpy.ceil"], "function", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.infra.run.Run.open"], ["", "def", "load_compressed_index_part", "(", "filename", ",", "dim", ",", "bits", ")", ":", "\n", "    ", "a", "=", "bitarray", "(", ")", "\n", "\n", "with", "open", "(", "filename", ",", "\"rb\"", ")", "as", "f", ":", "\n", "        ", "a", ".", "fromfile", "(", "f", ")", "\n", "\n", "", "n", "=", "len", "(", "a", ")", "//", "dim", "//", "bits", "\n", "part", "=", "torch", ".", "tensor", "(", "np", ".", "frombuffer", "(", "a", ".", "tobytes", "(", ")", ",", "dtype", "=", "np", ".", "uint8", ")", ")", "# TODO: isn't from_numpy(.) faster?", "\n", "part", "=", "part", ".", "reshape", "(", "(", "n", ",", "int", "(", "np", ".", "ceil", "(", "dim", "*", "bits", "/", "8", ")", ")", ")", ")", "\n", "\n", "return", "part", "\n", "", ""]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.codecs.residual.ResidualCodec.__init__": [[37, 107], ["torch.is_tensor", "torch.is_tensor", "torch.arange", "range", "torch.tensor().to", "centroids.cuda().half", "centroids.float", "bucket_weights.half().cuda.half().cuda.to", "range", "residual.ResidualCodec.reversed_bit_map.append", "torch.tensor().to", "residual.ResidualCodec.reversed_bit_map.cuda", "residual.ResidualCodec.avg_residual.cuda().half", "bucket_cutoffs.cuda.cuda.cuda", "bucket_weights.half().cuda.half().cuda.half().cuda", "range", "torch.tensor", "residual.ResidualCodec.decompression_lookup_table.cuda", "centroids.cuda", "torch.tensor", "residual.ResidualCodec.avg_residual.cuda", "bucket_weights.half().cuda.half().cuda.half", "list", "itertools.product", "list", "range", "len"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "config", ",", "centroids", ",", "avg_residual", "=", "None", ",", "bucket_cutoffs", "=", "None", ",", "bucket_weights", "=", "None", ")", ":", "\n", "        ", "self", ".", "use_gpu", "=", "config", ".", "total_visible_gpus", ">", "0", "\n", "if", "self", ".", "use_gpu", ">", "0", ":", "\n", "            ", "self", ".", "centroids", "=", "centroids", ".", "cuda", "(", ")", ".", "half", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "centroids", "=", "centroids", ".", "float", "(", ")", "\n", "", "self", ".", "dim", ",", "self", ".", "nbits", "=", "config", ".", "dim", ",", "config", ".", "nbits", "\n", "self", ".", "avg_residual", "=", "avg_residual", "\n", "\n", "if", "torch", ".", "is_tensor", "(", "self", ".", "avg_residual", ")", ":", "\n", "            ", "if", "self", ".", "use_gpu", ":", "\n", "                ", "self", ".", "avg_residual", "=", "self", ".", "avg_residual", ".", "cuda", "(", ")", ".", "half", "(", ")", "\n", "\n", "", "", "if", "torch", ".", "is_tensor", "(", "bucket_cutoffs", ")", ":", "\n", "            ", "if", "self", ".", "use_gpu", ":", "\n", "                ", "bucket_cutoffs", "=", "bucket_cutoffs", ".", "cuda", "(", ")", "\n", "bucket_weights", "=", "bucket_weights", ".", "half", "(", ")", ".", "cuda", "(", ")", "\n", "\n", "", "", "self", ".", "bucket_cutoffs", "=", "bucket_cutoffs", "\n", "self", ".", "bucket_weights", "=", "bucket_weights", "\n", "if", "not", "self", ".", "use_gpu", ":", "\n", "            ", "self", ".", "bucket_weights", "=", "bucket_weights", ".", "to", "(", "torch", ".", "float32", ")", "\n", "\n", "", "self", ".", "arange_bits", "=", "torch", ".", "arange", "(", "0", ",", "self", ".", "nbits", ",", "device", "=", "'cuda'", "if", "self", ".", "use_gpu", "else", "'cpu'", ",", "dtype", "=", "torch", ".", "uint8", ")", "\n", "\n", "# We reverse the residual bits because arange_bits as", "\n", "# currently constructed produces results with the reverse", "\n", "# of the expected endianness", "\n", "self", ".", "reversed_bit_map", "=", "[", "]", "\n", "mask", "=", "(", "1", "<<", "self", ".", "nbits", ")", "-", "1", "\n", "for", "i", "in", "range", "(", "256", ")", ":", "\n", "# The reversed byte", "\n", "            ", "z", "=", "0", "\n", "for", "j", "in", "range", "(", "8", ",", "0", ",", "-", "self", ".", "nbits", ")", ":", "\n", "# Extract a subsequence of length n bits", "\n", "                ", "x", "=", "(", "i", ">>", "(", "j", "-", "self", ".", "nbits", ")", ")", "&", "mask", "\n", "\n", "# Reverse the endianness of each bit subsequence (e.g. 10 -> 01)", "\n", "y", "=", "0", "\n", "for", "k", "in", "range", "(", "self", ".", "nbits", "-", "1", ",", "-", "1", ",", "-", "1", ")", ":", "\n", "                    ", "y", "+=", "(", "(", "x", ">>", "(", "self", ".", "nbits", "-", "k", "-", "1", ")", ")", "&", "1", ")", "*", "(", "2", "**", "k", ")", "\n", "\n", "# Set the corresponding bits in the output byte", "\n", "", "z", "|=", "y", "\n", "if", "j", ">", "self", ".", "nbits", ":", "\n", "                    ", "z", "<<=", "self", ".", "nbits", "\n", "", "", "self", ".", "reversed_bit_map", ".", "append", "(", "z", ")", "\n", "", "self", ".", "reversed_bit_map", "=", "torch", ".", "tensor", "(", "self", ".", "reversed_bit_map", ")", ".", "to", "(", "torch", ".", "uint8", ")", "\n", "\n", "# A table of all possible lookup orders into bucket_weights", "\n", "# given n bits per lookup", "\n", "keys_per_byte", "=", "8", "//", "self", ".", "nbits", "\n", "if", "self", ".", "bucket_weights", "is", "not", "None", ":", "\n", "            ", "self", ".", "decompression_lookup_table", "=", "(", "\n", "torch", ".", "tensor", "(", "\n", "list", "(", "\n", "product", "(", "\n", "list", "(", "range", "(", "len", "(", "self", ".", "bucket_weights", ")", ")", ")", ",", "\n", "repeat", "=", "keys_per_byte", "\n", ")", "\n", ")", "\n", ")", "\n", ".", "to", "(", "torch", ".", "uint8", ")", "\n", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "decompression_lookup_table", "=", "None", "\n", "", "if", "self", ".", "use_gpu", ":", "\n", "            ", "self", ".", "reversed_bit_map", "=", "self", ".", "reversed_bit_map", ".", "cuda", "(", ")", "\n", "if", "self", ".", "decompression_lookup_table", "is", "not", "None", ":", "\n", "                ", "self", ".", "decompression_lookup_table", "=", "self", ".", "decompression_lookup_table", ".", "cuda", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.codecs.residual.ResidualCodec.load": [[108, 123], ["colbert.infra.config.ColBERTConfig.load_from_index", "os.path.join", "os.path.join", "os.path.join", "torch.load", "torch.load", "torch.load", "cls", "avg_residual.item.item.dim", "avg_residual.item.item.item"], "methods", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.config.base_config.BaseConfig.load_from_index", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.codecs.residual_embeddings.ResidualEmbeddings.load", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.codecs.residual_embeddings.ResidualEmbeddings.load", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.codecs.residual_embeddings.ResidualEmbeddings.load"], ["", "", "", "@", "classmethod", "\n", "def", "load", "(", "cls", ",", "index_path", ")", ":", "\n", "        ", "config", "=", "ColBERTConfig", ".", "load_from_index", "(", "index_path", ")", "\n", "centroids_path", "=", "os", ".", "path", ".", "join", "(", "index_path", ",", "'centroids.pt'", ")", "\n", "avgresidual_path", "=", "os", ".", "path", ".", "join", "(", "index_path", ",", "'avg_residual.pt'", ")", "\n", "buckets_path", "=", "os", ".", "path", ".", "join", "(", "index_path", ",", "'buckets.pt'", ")", "\n", "\n", "centroids", "=", "torch", ".", "load", "(", "centroids_path", ",", "map_location", "=", "'cpu'", ")", "\n", "avg_residual", "=", "torch", ".", "load", "(", "avgresidual_path", ",", "map_location", "=", "'cpu'", ")", "\n", "bucket_cutoffs", ",", "bucket_weights", "=", "torch", ".", "load", "(", "buckets_path", ",", "map_location", "=", "'cpu'", ")", "\n", "\n", "if", "avg_residual", ".", "dim", "(", ")", "==", "0", ":", "\n", "            ", "avg_residual", "=", "avg_residual", ".", "item", "(", ")", "\n", "\n", "", "return", "cls", "(", "config", "=", "config", ",", "centroids", "=", "centroids", ",", "avg_residual", "=", "avg_residual", ",", "bucket_cutoffs", "=", "bucket_cutoffs", ",", "bucket_weights", "=", "bucket_weights", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.codecs.residual.ResidualCodec.save": [[124, 140], ["torch.is_tensor", "torch.is_tensor", "os.path.join", "os.path.join", "os.path.join", "torch.save", "torch.save", "torch.is_tensor", "torch.save", "torch.save", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.codecs.residual_embeddings.ResidualEmbeddings.save", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.codecs.residual_embeddings.ResidualEmbeddings.save", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.codecs.residual_embeddings.ResidualEmbeddings.save", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.codecs.residual_embeddings.ResidualEmbeddings.save"], ["", "def", "save", "(", "self", ",", "index_path", ")", ":", "\n", "        ", "assert", "self", ".", "avg_residual", "is", "not", "None", "\n", "assert", "torch", ".", "is_tensor", "(", "self", ".", "bucket_cutoffs", ")", ",", "self", ".", "bucket_cutoffs", "\n", "assert", "torch", ".", "is_tensor", "(", "self", ".", "bucket_weights", ")", ",", "self", ".", "bucket_weights", "\n", "\n", "centroids_path", "=", "os", ".", "path", ".", "join", "(", "index_path", ",", "'centroids.pt'", ")", "\n", "avgresidual_path", "=", "os", ".", "path", ".", "join", "(", "index_path", ",", "'avg_residual.pt'", ")", "\n", "buckets_path", "=", "os", ".", "path", ".", "join", "(", "index_path", ",", "'buckets.pt'", ")", "\n", "\n", "torch", ".", "save", "(", "self", ".", "centroids", ",", "centroids_path", ")", "\n", "torch", ".", "save", "(", "(", "self", ".", "bucket_cutoffs", ",", "self", ".", "bucket_weights", ")", ",", "buckets_path", ")", "\n", "\n", "if", "torch", ".", "is_tensor", "(", "self", ".", "avg_residual", ")", ":", "\n", "            ", "torch", ".", "save", "(", "self", ".", "avg_residual", ",", "avgresidual_path", ")", "\n", "", "else", ":", "\n", "            ", "torch", ".", "save", "(", "torch", ".", "tensor", "(", "[", "self", ".", "avg_residual", "]", ")", ",", "avgresidual_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.codecs.residual.ResidualCodec.compress": [[141, 158], ["embs.split", "torch.cat", "torch.cat", "ResidualCodec.Embeddings", "batch.cuda().half.cuda().half.cuda().half", "residual.ResidualCodec.compress_into_codes", "residual.ResidualCodec.lookup_centroids", "torch.cat.append", "torch.cat.append", "residual.ResidualCodec.cpu", "residual.ResidualCodec.binarize().cpu", "batch.cuda().half.cuda().half.cuda", "residual.ResidualCodec.binarize"], "methods", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.codecs.residual.ResidualCodec.compress_into_codes", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.codecs.residual.ResidualCodec.lookup_centroids", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.codecs.residual.ResidualCodec.binarize"], ["", "", "def", "compress", "(", "self", ",", "embs", ")", ":", "\n", "        ", "codes", ",", "residuals", "=", "[", "]", ",", "[", "]", "\n", "\n", "for", "batch", "in", "embs", ".", "split", "(", "1", "<<", "18", ")", ":", "\n", "            ", "batch", "=", "batch", ".", "cuda", "(", ")", ".", "half", "(", ")", "\n", "codes_", "=", "self", ".", "compress_into_codes", "(", "batch", ",", "out_device", "=", "batch", ".", "device", ")", "\n", "centroids_", "=", "self", ".", "lookup_centroids", "(", "codes_", ",", "out_device", "=", "batch", ".", "device", ")", "\n", "\n", "residuals_", "=", "(", "batch", "-", "centroids_", ")", "\n", "\n", "codes", ".", "append", "(", "codes_", ".", "cpu", "(", ")", ")", "\n", "residuals", ".", "append", "(", "self", ".", "binarize", "(", "residuals_", ")", ".", "cpu", "(", ")", ")", "\n", "\n", "", "codes", "=", "torch", ".", "cat", "(", "codes", ")", "\n", "residuals", "=", "torch", ".", "cat", "(", "residuals", ")", "\n", "\n", "return", "ResidualCodec", ".", "Embeddings", "(", "codes", ",", "residuals", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.codecs.residual.ResidualCodec.binarize": [[159, 174], ["torch.bucketize().to", "residuals.unsqueeze().expand.unsqueeze().expand.unsqueeze().expand", "cupy.packbits", "torch.as_tensor", "residuals_packed.reshape.reshape.reshape", "cupy.asarray", "residuals.unsqueeze().expand.unsqueeze().expand.size", "torch.bucketize", "residuals.unsqueeze().expand.unsqueeze().expand.unsqueeze", "residuals.unsqueeze().expand.unsqueeze().expand.size", "residuals.unsqueeze().expand.unsqueeze().expand.contiguous().flatten", "residuals.unsqueeze().expand.unsqueeze().expand.float", "residuals.unsqueeze().expand.unsqueeze().expand.contiguous"], "methods", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.utils.flatten"], ["", "def", "binarize", "(", "self", ",", "residuals", ")", ":", "\n", "        ", "residuals", "=", "torch", ".", "bucketize", "(", "residuals", ".", "float", "(", ")", ",", "self", ".", "bucket_cutoffs", ")", ".", "to", "(", "dtype", "=", "torch", ".", "uint8", ")", "\n", "residuals", "=", "residuals", ".", "unsqueeze", "(", "-", "1", ")", ".", "expand", "(", "*", "residuals", ".", "size", "(", ")", ",", "self", ".", "nbits", ")", "# add a new nbits-wide dim", "\n", "residuals", "=", "residuals", ">>", "self", ".", "arange_bits", "# divide by 2^bit for each bit position", "\n", "residuals", "=", "residuals", "&", "1", "# apply mod 2 to binarize", "\n", "\n", "assert", "self", ".", "dim", "%", "8", "==", "0", "\n", "assert", "self", ".", "dim", "%", "(", "self", ".", "nbits", "*", "8", ")", "==", "0", ",", "(", "self", ".", "dim", ",", "self", ".", "nbits", ")", "\n", "\n", "residuals_packed", "=", "cupy", ".", "packbits", "(", "cupy", ".", "asarray", "(", "residuals", ".", "contiguous", "(", ")", ".", "flatten", "(", ")", ")", ")", "\n", "residuals_packed", "=", "torch", ".", "as_tensor", "(", "residuals_packed", ",", "dtype", "=", "torch", ".", "uint8", ")", "\n", "\n", "residuals_packed", "=", "residuals_packed", ".", "reshape", "(", "residuals", ".", "size", "(", "0", ")", ",", "self", ".", "dim", "//", "8", "*", "self", ".", "nbits", ")", "\n", "\n", "return", "residuals_packed", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.codecs.residual.ResidualCodec.compress_into_codes": [[175, 189], ["embs.split", "torch.cat", "residual.ResidualCodec.centroids.size", "codes.append", "batch.T.cuda().half", "batch.T.cuda"], "methods", ["None"], ["", "def", "compress_into_codes", "(", "self", ",", "embs", ",", "out_device", ")", ":", "\n", "        ", "\"\"\"\n            EVENTUALLY: Fusing the kernels or otherwise avoiding materalizing the entire matrix before max(dim=0)\n                        seems like it would help here a lot.\n        \"\"\"", "\n", "\n", "codes", "=", "[", "]", "\n", "\n", "bsize", "=", "(", "1", "<<", "29", ")", "//", "self", ".", "centroids", ".", "size", "(", "0", ")", "\n", "for", "batch", "in", "embs", ".", "split", "(", "bsize", ")", ":", "\n", "            ", "indices", "=", "(", "self", ".", "centroids", "@", "batch", ".", "T", ".", "cuda", "(", ")", ".", "half", "(", ")", ")", ".", "max", "(", "dim", "=", "0", ")", ".", "indices", ".", "to", "(", "device", "=", "out_device", ")", "\n", "codes", ".", "append", "(", "indices", ")", "\n", "\n", "", "return", "torch", ".", "cat", "(", "codes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.codecs.residual.ResidualCodec.lookup_centroids": [[190, 206], ["codes.split", "torch.cat", "centroids.append", "centroids.append", "residual.ResidualCodec.centroids[].to", "residual.ResidualCodec.centroids[].to", "batch.cuda().long", "batch.long", "batch.cuda"], "methods", ["None"], ["", "def", "lookup_centroids", "(", "self", ",", "codes", ",", "out_device", ")", ":", "\n", "        ", "\"\"\"\n            Handles multi-dimensional codes too.\n\n            EVENTUALLY: The .split() below should happen on a flat view.\n        \"\"\"", "\n", "\n", "centroids", "=", "[", "]", "\n", "\n", "for", "batch", "in", "codes", ".", "split", "(", "1", "<<", "20", ")", ":", "\n", "            ", "if", "self", ".", "use_gpu", ":", "\n", "                ", "centroids", ".", "append", "(", "self", ".", "centroids", "[", "batch", ".", "cuda", "(", ")", ".", "long", "(", ")", "]", ".", "to", "(", "device", "=", "out_device", ")", ")", "\n", "", "else", ":", "\n", "                ", "centroids", ".", "append", "(", "self", ".", "centroids", "[", "batch", ".", "long", "(", ")", "]", ".", "to", "(", "device", "=", "out_device", ")", ")", "\n", "\n", "", "", "return", "torch", ".", "cat", "(", "centroids", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.codecs.residual.ResidualCodec.decompress": [[208, 245], ["zip", "torch.cat", "codes.split", "residuals.split", "D.append", "decompress_residuals_cpp.decompress_residuals_cpp().cuda", "residual.ResidualCodec.lookup_centroids", "residuals_.reshape.reshape.reshape", "residual.ResidualCodec.add_", "torch.nn.functional.normalize().half", "torch.nn.functional.normalize", "codes_.cuda", "residuals_.reshape.reshape.cuda", "residual.ResidualCodec.to", "decompress_residuals_cpp.decompress_residuals_cpp", "residuals_.reshape.reshape.long", "residuals_.reshape.reshape.long", "residuals_.reshape.reshape.long", "torch.nn.functional.normalize"], "methods", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.codecs.residual.ResidualCodec.lookup_centroids"], ["", "def", "decompress", "(", "self", ",", "compressed_embs", ":", "Embeddings", ")", ":", "\n", "        ", "\"\"\"\n            We batch below even if the target device is CUDA to avoid large temporary buffers causing OOM.\n        \"\"\"", "\n", "\n", "codes", ",", "residuals", "=", "compressed_embs", ".", "codes", ",", "compressed_embs", ".", "residuals", "\n", "\n", "D", "=", "[", "]", "\n", "for", "codes_", ",", "residuals_", "in", "zip", "(", "codes", ".", "split", "(", "1", "<<", "15", ")", ",", "residuals", ".", "split", "(", "1", "<<", "15", ")", ")", ":", "\n", "            ", "if", "self", ".", "use_gpu", ":", "\n", "                ", "codes_", ",", "residuals_", "=", "codes_", ".", "cuda", "(", ")", ",", "residuals_", ".", "cuda", "(", ")", "\n", "centroids_", "=", "decompress_residuals_cpp", ".", "decompress_residuals_cpp", "(", "\n", "residuals_", ",", "\n", "self", ".", "bucket_weights", ",", "\n", "self", ".", "reversed_bit_map", ",", "\n", "self", ".", "decompression_lookup_table", ",", "\n", "codes_", ",", "\n", "self", ".", "centroids", ",", "\n", "self", ".", "dim", ",", "\n", "self", ".", "nbits", ",", "\n", ")", ".", "cuda", "(", ")", "\n", "", "else", ":", "\n", "# TODO: Remove dead code", "\n", "                ", "centroids_", "=", "self", ".", "lookup_centroids", "(", "codes_", ",", "out_device", "=", "'cpu'", ")", "\n", "residuals_", "=", "self", ".", "reversed_bit_map", "[", "residuals_", ".", "long", "(", ")", "]", "\n", "residuals_", "=", "self", ".", "decompression_lookup_table", "[", "residuals_", ".", "long", "(", ")", "]", "\n", "residuals_", "=", "residuals_", ".", "reshape", "(", "residuals_", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", "residuals_", "=", "self", ".", "bucket_weights", "[", "residuals_", ".", "long", "(", ")", "]", "\n", "centroids_", ".", "add_", "(", "residuals_", ")", "\n", "\n", "", "if", "self", ".", "use_gpu", ":", "\n", "                ", "D_", "=", "torch", ".", "nn", ".", "functional", ".", "normalize", "(", "centroids_", ",", "p", "=", "2", ",", "dim", "=", "-", "1", ")", ".", "half", "(", ")", "\n", "", "else", ":", "\n", "                ", "D_", "=", "torch", ".", "nn", ".", "functional", ".", "normalize", "(", "centroids_", ".", "to", "(", "torch", ".", "float32", ")", ",", "p", "=", "2", ",", "dim", "=", "-", "1", ")", "\n", "", "D", ".", "append", "(", "D_", ")", "\n", "\n", "", "return", "torch", ".", "cat", "(", "D", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.codecs.residual_embeddings_strided.ResidualEmbeddingsStrided.__init__": [[14, 22], ["colbert.search.strided_tensor.StridedTensor", "colbert.search.strided_tensor.StridedTensor"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "codec", ",", "embeddings", ",", "doclens", ")", ":", "\n", "        ", "self", ".", "codec", "=", "codec", "\n", "self", ".", "codes", "=", "embeddings", ".", "codes", "\n", "self", ".", "residuals", "=", "embeddings", ".", "residuals", "\n", "self", ".", "use_gpu", "=", "self", ".", "codec", ".", "use_gpu", "\n", "\n", "self", ".", "codes_strided", "=", "StridedTensor", "(", "self", ".", "codes", ",", "doclens", ",", "use_gpu", "=", "self", ".", "use_gpu", ")", "\n", "self", ".", "residuals_strided", "=", "StridedTensor", "(", "self", ".", "residuals", ",", "doclens", ",", "use_gpu", "=", "self", ".", "use_gpu", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.codecs.residual_embeddings_strided.ResidualEmbeddingsStrided.lookup_eids": [[23, 28], ["residual_embeddings_strided.ResidualEmbeddingsStrided.codec.decompress", "colbert.ResidualEmbeddings"], "methods", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.codecs.residual.ResidualCodec.decompress"], ["", "def", "lookup_eids", "(", "self", ",", "embedding_ids", ",", "codes", "=", "None", ",", "out_device", "=", "'cuda'", ")", ":", "\n", "        ", "codes", "=", "self", ".", "codes", "[", "embedding_ids", "]", "if", "codes", "is", "None", "else", "codes", "\n", "residuals", "=", "self", ".", "residuals", "[", "embedding_ids", "]", "\n", "\n", "return", "self", ".", "codec", ".", "decompress", "(", "residual_embeddings", ".", "ResidualEmbeddings", "(", "codes", ",", "residuals", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.codecs.residual_embeddings_strided.ResidualEmbeddingsStrided.lookup_pids": [[30, 37], ["residual_embeddings_strided.ResidualEmbeddingsStrided.codes_strided.lookup", "residual_embeddings_strided.ResidualEmbeddingsStrided.residuals_strided.lookup", "residual_embeddings_strided.ResidualEmbeddingsStrided.codec.decompress", "colbert.ResidualEmbeddings"], "methods", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.search.strided_tensor.StridedTensor.lookup", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.search.strided_tensor.StridedTensor.lookup", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.codecs.residual.ResidualCodec.decompress"], ["", "def", "lookup_pids", "(", "self", ",", "passage_ids", ",", "out_device", "=", "'cuda'", ")", ":", "\n", "        ", "codes_packed", ",", "codes_lengths", "=", "self", ".", "codes_strided", ".", "lookup", "(", "passage_ids", ")", "#.as_packed_tensor()", "\n", "residuals_packed", ",", "_", "=", "self", ".", "residuals_strided", ".", "lookup", "(", "passage_ids", ")", "#.as_packed_tensor()", "\n", "\n", "embeddings_packed", "=", "self", ".", "codec", ".", "decompress", "(", "residual_embeddings", ".", "ResidualEmbeddings", "(", "codes_packed", ",", "residuals_packed", ")", ")", "\n", "\n", "return", "embeddings_packed", ",", "codes_lengths", "\n", "# return StridedTensor(embeddings_packed, codes_lengths).as_padded_tensor()", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.codecs.residual_embeddings_strided.ResidualEmbeddingsStrided.lookup_codes": [[40, 42], ["residual_embeddings_strided.ResidualEmbeddingsStrided.codes_strided.lookup"], "methods", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.search.strided_tensor.StridedTensor.lookup"], ["", "def", "lookup_codes", "(", "self", ",", "passage_ids", ")", ":", "\n", "        ", "return", "self", ".", "codes_strided", ".", "lookup", "(", "passage_ids", ")", "#.as_packed_tensor()", "\n", "", "", ""]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.codecs.residual_embeddings.ResidualEmbeddings.__init__": [[13, 25], ["codes.to", "codes.size", "residuals.size", "codes.size", "residuals.size", "codes.size", "residuals.size", "codes.dim", "residuals.dim"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "codes", ",", "residuals", ")", ":", "\n", "        ", "\"\"\"\n            Supply the already compressed residuals.\n        \"\"\"", "\n", "\n", "# assert isinstance(residuals, bitarray), type(residuals)", "\n", "assert", "codes", ".", "size", "(", "0", ")", "==", "residuals", ".", "size", "(", "0", ")", ",", "(", "codes", ".", "size", "(", ")", ",", "residuals", ".", "size", "(", ")", ")", "\n", "assert", "codes", ".", "dim", "(", ")", "==", "1", "and", "residuals", ".", "dim", "(", ")", "==", "2", ",", "(", "codes", ".", "size", "(", ")", ",", "residuals", ".", "size", "(", ")", ")", "\n", "assert", "residuals", ".", "dtype", "==", "torch", ".", "uint8", "\n", "\n", "self", ".", "codes", "=", "codes", ".", "to", "(", "torch", ".", "int32", ")", "# (num_embeddings,) int32", "\n", "self", ".", "residuals", "=", "residuals", "# (num_embeddings, compressed_dim) uint8", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.codecs.residual_embeddings.ResidualEmbeddings.load_chunks": [[26, 53], ["residual_embeddings.get_dim_and_nbits", "torch.empty", "torch.empty", "colbert.utils.utils.print_message", "tqdm.tqdm", "cls", "cls.load", "cls.load.codes.size"], "methods", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.codecs.residual_embeddings.get_dim_and_nbits", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.utils.print_message", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.codecs.residual_embeddings.ResidualEmbeddings.load"], ["", "@", "classmethod", "\n", "def", "load_chunks", "(", "cls", ",", "index_path", ",", "chunk_idxs", ",", "num_embeddings", ")", ":", "\n", "        ", "num_embeddings", "+=", "512", "# pad for access with strides", "\n", "\n", "dim", ",", "nbits", "=", "get_dim_and_nbits", "(", "index_path", ")", "\n", "\n", "codes", "=", "torch", ".", "empty", "(", "num_embeddings", ",", "dtype", "=", "torch", ".", "int32", ")", "\n", "residuals", "=", "torch", ".", "empty", "(", "num_embeddings", ",", "dim", "//", "8", "*", "nbits", ",", "dtype", "=", "torch", ".", "uint8", ")", "\n", "\n", "codes_offset", "=", "0", "\n", "\n", "print_message", "(", "\"#> Loading codes and residuals...\"", ")", "\n", "\n", "for", "chunk_idx", "in", "tqdm", ".", "tqdm", "(", "chunk_idxs", ")", ":", "\n", "            ", "chunk", "=", "cls", ".", "load", "(", "index_path", ",", "chunk_idx", ")", "\n", "\n", "codes_endpos", "=", "codes_offset", "+", "chunk", ".", "codes", ".", "size", "(", "0", ")", "\n", "\n", "# Copy the values over to the allocated space", "\n", "codes", "[", "codes_offset", ":", "codes_endpos", "]", "=", "chunk", ".", "codes", "\n", "residuals", "[", "codes_offset", ":", "codes_endpos", "]", "=", "chunk", ".", "residuals", "\n", "\n", "codes_offset", "=", "codes_endpos", "\n", "\n", "# codes, residuals = codes.cuda(), residuals.cuda()  # FIXME: REMOVE THIS LINE!", "\n", "\n", "", "return", "cls", "(", "codes", ",", "residuals", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.codecs.residual_embeddings.ResidualEmbeddings.load": [[54, 60], ["cls.load_codes", "cls.load_residuals", "cls"], "methods", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.codecs.residual_embeddings.ResidualEmbeddings.load_codes", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.codecs.residual_embeddings.ResidualEmbeddings.load_residuals"], ["", "@", "classmethod", "\n", "def", "load", "(", "cls", ",", "index_path", ",", "chunk_idx", ")", ":", "\n", "        ", "codes", "=", "cls", ".", "load_codes", "(", "index_path", ",", "chunk_idx", ")", "\n", "residuals", "=", "cls", ".", "load_residuals", "(", "index_path", ",", "chunk_idx", ")", "\n", "\n", "return", "cls", "(", "codes", ",", "residuals", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.codecs.residual_embeddings.ResidualEmbeddings.load_codes": [[61, 65], ["os.path.join", "torch.load"], "methods", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.codecs.residual_embeddings.ResidualEmbeddings.load"], ["", "@", "classmethod", "\n", "def", "load_codes", "(", "self", ",", "index_path", ",", "chunk_idx", ")", ":", "\n", "        ", "codes_path", "=", "os", ".", "path", ".", "join", "(", "index_path", ",", "f'{chunk_idx}.codes.pt'", ")", "\n", "return", "torch", ".", "load", "(", "codes_path", ",", "map_location", "=", "'cpu'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.codecs.residual_embeddings.ResidualEmbeddings.load_residuals": [[66, 72], ["os.path.join", "torch.load"], "methods", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.codecs.residual_embeddings.ResidualEmbeddings.load"], ["", "@", "classmethod", "\n", "def", "load_residuals", "(", "self", ",", "index_path", ",", "chunk_idx", ")", ":", "\n", "        ", "residuals_path", "=", "os", ".", "path", ".", "join", "(", "index_path", ",", "f'{chunk_idx}.residuals.pt'", ")", "# f'{chunk_idx}.residuals.bn'", "\n", "# return _load_bitarray(residuals_path)", "\n", "\n", "return", "torch", ".", "load", "(", "residuals_path", ",", "map_location", "=", "'cpu'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.codecs.residual_embeddings.ResidualEmbeddings.save": [[73, 79], ["torch.save", "torch.save"], "methods", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.codecs.residual_embeddings.ResidualEmbeddings.save", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.codecs.residual_embeddings.ResidualEmbeddings.save"], ["", "def", "save", "(", "self", ",", "path_prefix", ")", ":", "\n", "        ", "codes_path", "=", "f'{path_prefix}.codes.pt'", "\n", "residuals_path", "=", "f'{path_prefix}.residuals.pt'", "# f'{path_prefix}.residuals.bn'", "\n", "\n", "torch", ".", "save", "(", "self", ".", "codes", ",", "codes_path", ")", "\n", "torch", ".", "save", "(", "self", ".", "residuals", ",", "residuals_path", ")", "\n", "# _save_bitarray(self.residuals, residuals_path)", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.codecs.residual_embeddings.ResidualEmbeddings.__len__": [[81, 83], ["residual_embeddings.ResidualEmbeddings.codes.size"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "codes", ".", "size", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.codecs.residual_embeddings.get_dim_and_nbits": [[85, 96], ["open", "os.path.join", "ujson.load"], "function", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.infra.run.Run.open", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.codecs.residual_embeddings.ResidualEmbeddings.load"], ["", "", "def", "get_dim_and_nbits", "(", "index_path", ")", ":", "\n", "# TODO: Ideally load this using ColBERTConfig.load_from_index!", "\n", "    ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "index_path", ",", "'metadata.json'", ")", ")", "as", "f", ":", "\n", "        ", "metadata", "=", "ujson", ".", "load", "(", "f", ")", "[", "'config'", "]", "\n", "\n", "", "dim", "=", "metadata", "[", "'dim'", "]", "\n", "nbits", "=", "metadata", "[", "'nbits'", "]", "\n", "\n", "assert", "(", "dim", "*", "nbits", ")", "%", "8", "==", "0", ",", "(", "dim", ",", "nbits", ",", "dim", "*", "nbits", ")", "\n", "\n", "return", "dim", ",", "nbits", "\n", "", ""]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.distillation.ranking_scorer.RankingScorer.__init__": [[16, 22], ["ranking.tolist", "colbert.infra.provenance.Provenance", "colbert.utils.utils.print_message", "len"], "methods", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.data.examples.Examples.tolist", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.utils.print_message"], ["    ", "def", "__init__", "(", "self", ",", "scorer", ":", "Scorer", ",", "ranking", ":", "Ranking", ")", ":", "\n", "        ", "self", ".", "scorer", "=", "scorer", "\n", "self", ".", "ranking", "=", "ranking", ".", "tolist", "(", ")", "\n", "self", ".", "__provenance", "=", "Provenance", "(", ")", "\n", "\n", "print_message", "(", "f\"#> Loaded ranking with {len(self.ranking)} qid--pid pairs!\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.distillation.ranking_scorer.RankingScorer.provenance": [[23, 25], ["None"], "methods", ["None"], ["", "def", "provenance", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__provenance", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.distillation.ranking_scorer.RankingScorer.run": [[26, 53], ["colbert.utils.utils.print_message", "colbert.utils.utils.zipstar", "ranking_scorer.RankingScorer.scorer.launch", "collections.defaultdict", "tqdm.tqdm", "zip", "scores_by_qid[].append", "colbert.infra.Run().open", "tqdm.tqdm", "colbert.utils.utils.print_message", "colbert.infra.Run().open", "utility.utils.save_metadata.get_metadata_only", "ranking_scorer.RankingScorer.provenance", "ujson.dumps", "f.write", "f.write", "colbert.infra.Run", "colbert.infra.Run", "ujson.dumps"], "methods", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.utils.print_message", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.utils.zipstar", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.distillation.scorer.Scorer.launch", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.infra.run.Run.open", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.utils.print_message", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.infra.run.Run.open", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.save_metadata.get_metadata_only", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.distillation.ranking_scorer.RankingScorer.provenance"], ["", "def", "run", "(", "self", ")", ":", "\n", "        ", "print_message", "(", "f\"#> Starting..\"", ")", "\n", "\n", "qids", ",", "pids", ",", "*", "_", "=", "zipstar", "(", "self", ".", "ranking", ")", "\n", "distillation_scores", "=", "self", ".", "scorer", ".", "launch", "(", "qids", ",", "pids", ")", "\n", "\n", "scores_by_qid", "=", "defaultdict", "(", "list", ")", "\n", "\n", "for", "qid", ",", "pid", ",", "score", "in", "tqdm", ".", "tqdm", "(", "zip", "(", "qids", ",", "pids", ",", "distillation_scores", ")", ")", ":", "\n", "            ", "scores_by_qid", "[", "qid", "]", ".", "append", "(", "(", "score", ",", "pid", ")", ")", "\n", "\n", "", "with", "Run", "(", ")", ".", "open", "(", "'distillation_scores.json'", ",", "'w'", ")", "as", "f", ":", "\n", "            ", "for", "qid", "in", "tqdm", ".", "tqdm", "(", "scores_by_qid", ")", ":", "\n", "                ", "obj", "=", "(", "qid", ",", "scores_by_qid", "[", "qid", "]", ")", "\n", "f", ".", "write", "(", "ujson", ".", "dumps", "(", "obj", ")", "+", "'\\n'", ")", "\n", "\n", "", "output_path", "=", "f", ".", "name", "\n", "print_message", "(", "f'#> Saved the distillation_scores to {output_path}'", ")", "\n", "\n", "", "with", "Run", "(", ")", ".", "open", "(", "f'{output_path}.meta'", ",", "'w'", ")", "as", "f", ":", "\n", "            ", "d", "=", "{", "}", "\n", "d", "[", "'metadata'", "]", "=", "get_metadata_only", "(", ")", "\n", "d", "[", "'provenance'", "]", "=", "self", ".", "provenance", "(", ")", "\n", "line", "=", "ujson", ".", "dumps", "(", "d", ",", "indent", "=", "4", ")", "\n", "f", ".", "write", "(", "line", ")", "\n", "\n", "", "return", "output_path", "\n", "", "", ""]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.distillation.scorer.Scorer.__init__": [[16, 23], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "queries", ",", "collection", ",", "model", "=", "DEFAULT_MODEL", ",", "maxlen", "=", "180", ",", "bsize", "=", "256", ")", ":", "\n", "        ", "self", ".", "queries", "=", "queries", "\n", "self", ".", "collection", "=", "collection", "\n", "self", ".", "model", "=", "model", "\n", "\n", "self", ".", "maxlen", "=", "maxlen", "\n", "self", ".", "bsize", "=", "bsize", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.distillation.scorer.Scorer.launch": [[24, 29], ["colbert.infra.launcher.Launcher", "colbert.infra.launcher.Launcher.launch", "colbert.utils.utils.flatten", "colbert.infra.Run"], "methods", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.distillation.scorer.Scorer.launch", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.utils.flatten"], ["", "def", "launch", "(", "self", ",", "qids", ",", "pids", ")", ":", "\n", "        ", "launcher", "=", "Launcher", "(", "self", ".", "_score_pairs_process", ",", "return_all", "=", "True", ")", "\n", "outputs", "=", "launcher", ".", "launch", "(", "Run", "(", ")", ".", "config", ",", "qids", ",", "pids", ")", "\n", "\n", "return", "flatten", "(", "outputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.distillation.scorer.Scorer._score_pairs_process": [[30, 37], ["scorer.Scorer._score_pairs", "len", "len", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.distillation.scorer.Scorer._score_pairs"], ["", "def", "_score_pairs_process", "(", "self", ",", "config", ",", "qids", ",", "pids", ")", ":", "\n", "        ", "assert", "len", "(", "qids", ")", "==", "len", "(", "pids", ")", ",", "(", "len", "(", "qids", ")", ",", "len", "(", "pids", ")", ")", "\n", "share", "=", "1", "+", "len", "(", "qids", ")", "//", "config", ".", "nranks", "\n", "offset", "=", "config", ".", "rank", "*", "share", "\n", "endpos", "=", "(", "1", "+", "config", ".", "rank", ")", "*", "share", "\n", "\n", "return", "self", ".", "_score_pairs", "(", "qids", "[", "offset", ":", "endpos", "]", ",", "pids", "[", "offset", ":", "endpos", "]", ",", "show_progress", "=", "(", "config", ".", "rank", "<", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.distillation.scorer.Scorer._score_pairs": [[38, 66], ["transformers.AutoTokenizer.from_pretrained", "transformers.AutoModelForSequenceClassification.from_pretrained().cuda", "transformers.AutoModelForSequenceClassification.from_pretrained().cuda.eval", "torch.cat", "scores.tolist.tolist.tolist", "colbert.infra.Run().print", "len", "len", "len", "len", "torch.inference_mode", "transformers.AutoModelForSequenceClassification.from_pretrained", "torch.cuda.amp.autocast", "tqdm.tqdm", "colbert.infra.Run", "range", "transformers.AutoTokenizer.from_pretrained.to", "scores.tolist.tolist.append", "len", "len", "transformers.AutoModelForSequenceClassification.from_pretrained().cuda.logits.flatten", "transformers.AutoTokenizer.from_pretrained.", "transformers.AutoModelForSequenceClassification.from_pretrained().cuda."], "methods", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.modeling.hf_colbert.HF_ColBERT.from_pretrained", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.data.examples.Examples.tolist", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.infra.run.Run.print", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.modeling.hf_colbert.HF_ColBERT.from_pretrained", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.utils.flatten"], ["", "def", "_score_pairs", "(", "self", ",", "qids", ",", "pids", ",", "show_progress", "=", "False", ")", ":", "\n", "        ", "tokenizer", "=", "AutoTokenizer", ".", "from_pretrained", "(", "self", ".", "model", ")", "\n", "model", "=", "AutoModelForSequenceClassification", ".", "from_pretrained", "(", "self", ".", "model", ")", ".", "cuda", "(", ")", "\n", "\n", "assert", "len", "(", "qids", ")", "==", "len", "(", "pids", ")", ",", "(", "len", "(", "qids", ")", ",", "len", "(", "pids", ")", ")", "\n", "\n", "scores", "=", "[", "]", "\n", "\n", "model", ".", "eval", "(", ")", "\n", "with", "torch", ".", "inference_mode", "(", ")", ":", "\n", "            ", "with", "torch", ".", "cuda", ".", "amp", ".", "autocast", "(", ")", ":", "\n", "                ", "for", "offset", "in", "tqdm", ".", "tqdm", "(", "range", "(", "0", ",", "len", "(", "qids", ")", ",", "self", ".", "bsize", ")", ",", "disable", "=", "(", "not", "show_progress", ")", ")", ":", "\n", "                    ", "endpos", "=", "offset", "+", "self", ".", "bsize", "\n", "\n", "queries_", "=", "[", "self", ".", "queries", "[", "qid", "]", "for", "qid", "in", "qids", "[", "offset", ":", "endpos", "]", "]", "\n", "passages_", "=", "[", "self", ".", "collection", "[", "pid", "]", "for", "pid", "in", "pids", "[", "offset", ":", "endpos", "]", "]", "\n", "\n", "features", "=", "tokenizer", "(", "queries_", ",", "passages_", ",", "padding", "=", "'longest'", ",", "truncation", "=", "True", ",", "\n", "return_tensors", "=", "'pt'", ",", "max_length", "=", "self", ".", "maxlen", ")", ".", "to", "(", "model", ".", "device", ")", "\n", "\n", "scores", ".", "append", "(", "model", "(", "**", "features", ")", ".", "logits", ".", "flatten", "(", ")", ")", "\n", "\n", "", "", "", "scores", "=", "torch", ".", "cat", "(", "scores", ")", "\n", "scores", "=", "scores", ".", "tolist", "(", ")", "\n", "\n", "Run", "(", ")", ".", "print", "(", "f'Returning with {len(scores)} scores'", ")", "\n", "\n", "return", "scores", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.supervision.triples.sample_negatives": [[20, 37], ["min", "random.sample", "len", "len", "len", "len", "random.sample", "random.sample"], "function", ["None"], ["def", "sample_negatives", "(", "negatives", ",", "num_sampled", ",", "biased", "=", "None", ")", ":", "\n", "    ", "assert", "biased", "in", "[", "None", ",", "100", ",", "200", "]", ",", "\"NOTE: We bias 50% from the top-200 negatives, if there are twice or more.\"", "\n", "\n", "num_sampled", "=", "min", "(", "len", "(", "negatives", ")", ",", "num_sampled", ")", "\n", "\n", "if", "biased", "and", "num_sampled", "<", "len", "(", "negatives", ")", ":", "\n", "        ", "assert", "num_sampled", "%", "2", "==", "0", ",", "num_sampled", "\n", "\n", "num_sampled_top100", "=", "num_sampled", "//", "2", "\n", "num_sampled_rest", "=", "num_sampled", "-", "num_sampled_top100", "\n", "\n", "oversampled", ",", "undersampled", "=", "negatives", "[", ":", "biased", "]", ",", "negatives", "[", "biased", ":", "]", "\n", "\n", "if", "len", "(", "oversampled", ")", "<", "len", "(", "undersampled", ")", ":", "\n", "            ", "return", "random", ".", "sample", "(", "oversampled", ",", "num_sampled_top100", ")", "+", "random", ".", "sample", "(", "undersampled", ",", "num_sampled_rest", ")", "\n", "\n", "", "", "return", "random", ".", "sample", "(", "negatives", ",", "num_sampled", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.supervision.triples.sample_for_query": [[39, 73], ["triples.sample_negatives", "any", "negatives.append", "triples.append", "positives.append", "positives.append", "len"], "function", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.supervision.self_training.sample_negatives"], ["", "def", "sample_for_query", "(", "qid", ",", "ranking", ",", "args_positives", ",", "depth", ",", "permissive", ",", "biased", ")", ":", "\n", "    ", "\"\"\"\n        Requires that the ranks are sorted per qid.\n    \"\"\"", "\n", "\n", "positives", ",", "negatives", ",", "triples", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "\n", "for", "pid", ",", "rank", ",", "*", "_", ",", "label", "in", "ranking", ":", "\n", "        ", "assert", "rank", ">=", "1", ",", "f\"ranks should start at 1 \\t\\t got rank = {rank}\"", "\n", "assert", "label", "in", "[", "0", ",", "1", "]", "\n", "\n", "if", "rank", ">", "depth", ":", "\n", "            ", "break", "\n", "\n", "", "if", "label", ":", "\n", "            ", "take_this_positive", "=", "any", "(", "rank", "<=", "maxDepth", "and", "len", "(", "positives", ")", "<", "maxBest", "for", "maxBest", ",", "maxDepth", "in", "args_positives", ")", "\n", "\n", "if", "take_this_positive", ":", "\n", "                ", "positives", ".", "append", "(", "(", "pid", ",", "0", ")", ")", "\n", "", "elif", "permissive", ":", "\n", "                ", "positives", ".", "append", "(", "(", "pid", ",", "rank", ")", ")", "# utilize with a few negatives, starting at (next) rank", "\n", "\n", "", "", "else", ":", "\n", "            ", "negatives", ".", "append", "(", "pid", ")", "\n", "\n", "", "", "for", "pos", ",", "neg_start", "in", "positives", ":", "\n", "        ", "num_sampled", "=", "100", "if", "neg_start", "==", "0", "else", "5", "\n", "negatives_", "=", "negatives", "[", "neg_start", ":", "]", "\n", "\n", "biased_", "=", "biased", "if", "neg_start", "==", "0", "else", "None", "\n", "for", "neg", "in", "sample_negatives", "(", "negatives_", ",", "num_sampled", ",", "biased", "=", "biased_", ")", ":", "\n", "            ", "triples", ".", "append", "(", "(", "qid", ",", "pos", ",", "neg", ")", ")", "\n", "\n", "", "", "return", "triples", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.supervision.triples.main": [[75, 118], ["colbert.utils.utils.print_message", "colbert.utils.utils.groupby_first_item", "enumerate", "colbert.utils.utils.print_message", "colbert.utils.utils.print_message", "colbert.utils.utils.print_message", "random.shuffle", "colbert.utils.utils.print_message", "utility.utils.save_metadata.save_metadata", "print", "print", "colbert.utils.utils.print_message", "colbert.utils.utils.load_ranking", "tqdm.tqdm", "triples.sample_for_query", "random.sample.extend", "len", "random.sample", "open", "colbert.utils.utils.load_ranking", "len", "colbert.utils.utils.print_message", "ujson.dump", "f.write", "len", "len", "str", "len"], "function", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.utils.print_message", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.utils.groupby_first_item", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.data.collection.Collection.enumerate", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.utils.print_message", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.utils.print_message", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.utils.print_message", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.utils.print_message", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.save_metadata.save_metadata", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.infra.run.Run.print", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.infra.run.Run.print", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.utils.print_message", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.data.ranking.load_ranking", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.supervision.self_training.sample_for_query", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.infra.run.Run.open", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.data.ranking.load_ranking", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.utils.print_message"], ["", "def", "main", "(", "args", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "rankings", "=", "load_ranking", "(", "args", ".", "ranking", ",", "types", "=", "[", "int", ",", "int", ",", "int", ",", "float", ",", "int", "]", ")", "\n", "", "except", ":", "\n", "        ", "rankings", "=", "load_ranking", "(", "args", ".", "ranking", ",", "types", "=", "[", "int", ",", "int", ",", "int", ",", "int", "]", ")", "\n", "\n", "", "print_message", "(", "\"#> Group by QID\"", ")", "\n", "qid2rankings", "=", "groupby_first_item", "(", "tqdm", ".", "tqdm", "(", "rankings", ")", ")", "\n", "\n", "Triples", "=", "[", "]", "\n", "NonEmptyQIDs", "=", "0", "\n", "\n", "for", "processing_idx", ",", "qid", "in", "enumerate", "(", "qid2rankings", ")", ":", "\n", "        ", "l", "=", "sample_for_query", "(", "qid", ",", "qid2rankings", "[", "qid", "]", ",", "args", ".", "positives", ",", "args", ".", "depth", ",", "args", ".", "permissive", ",", "args", ".", "biased", ")", "\n", "NonEmptyQIDs", "+=", "(", "len", "(", "l", ")", ">", "0", ")", "\n", "Triples", ".", "extend", "(", "l", ")", "\n", "\n", "if", "processing_idx", "%", "(", "10_000", ")", "==", "0", ":", "\n", "            ", "print_message", "(", "f\"#> Done with {processing_idx+1} questions!\\t\\t \"", "\n", "f\"{str(len(Triples) / 1000)}k triples for {NonEmptyQIDs} unqiue QIDs.\"", ")", "\n", "\n", "", "", "print_message", "(", "f\"#> Sub-sample the triples (if > {MAX_NUM_TRIPLES})..\"", ")", "\n", "print_message", "(", "f\"#> len(Triples) = {len(Triples)}\"", ")", "\n", "\n", "if", "len", "(", "Triples", ")", ">", "MAX_NUM_TRIPLES", ":", "\n", "        ", "Triples", "=", "random", ".", "sample", "(", "Triples", ",", "MAX_NUM_TRIPLES", ")", "\n", "\n", "### Prepare the triples ###", "\n", "", "print_message", "(", "\"#> Shuffling the triples...\"", ")", "\n", "random", ".", "shuffle", "(", "Triples", ")", "\n", "\n", "print_message", "(", "\"#> Writing {}M examples to file.\"", ".", "format", "(", "len", "(", "Triples", ")", "/", "1000.0", "/", "1000.0", ")", ")", "\n", "\n", "with", "open", "(", "args", ".", "output", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "for", "example", "in", "Triples", ":", "\n", "            ", "ujson", ".", "dump", "(", "example", ",", "f", ")", "\n", "f", ".", "write", "(", "'\\n'", ")", "\n", "\n", "", "", "save_metadata", "(", "f'{args.output}.meta'", ",", "args", ")", "\n", "\n", "print", "(", "'\\n\\n'", ",", "args", ",", "'\\n\\n'", ")", "\n", "print", "(", "args", ".", "output", ")", "\n", "print_message", "(", "\"#> Done.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.supervision.self_training.sample_negatives": [[15, 26], ["min", "random.sample", "len", "random.sample", "random.sample"], "function", ["None"], ["def", "sample_negatives", "(", "negatives", ",", "num_sampled", ",", "biased", "=", "False", ")", ":", "\n", "    ", "num_sampled", "=", "min", "(", "len", "(", "negatives", ")", ",", "num_sampled", ")", "\n", "\n", "if", "biased", ":", "\n", "        ", "assert", "num_sampled", "%", "2", "==", "0", "\n", "num_sampled_top100", "=", "num_sampled", "//", "2", "\n", "num_sampled_rest", "=", "num_sampled", "-", "num_sampled_top100", "\n", "\n", "return", "random", ".", "sample", "(", "negatives", "[", ":", "100", "]", ",", "num_sampled_top100", ")", "+", "random", ".", "sample", "(", "negatives", "[", "100", ":", "]", ",", "num_sampled_rest", ")", "\n", "\n", "", "return", "random", ".", "sample", "(", "negatives", ",", "num_sampled", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.supervision.self_training.sample_for_query": [[28, 55], ["self_training.sample_negatives", "random.sample", "triples.append", "positives.append", "negatives.append"], "function", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.supervision.self_training.sample_negatives"], ["", "def", "sample_for_query", "(", "qid", ",", "ranking", ",", "npositives", ",", "depth_positive", ",", "depth_negative", ",", "cutoff_negative", ")", ":", "\n", "    ", "\"\"\"\n        Requires that the ranks are sorted per qid.\n    \"\"\"", "\n", "assert", "npositives", "<=", "depth_positive", "<", "cutoff_negative", "<", "depth_negative", "\n", "\n", "positives", ",", "negatives", ",", "triples", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "\n", "for", "pid", ",", "rank", ",", "*", "_", "in", "ranking", ":", "\n", "        ", "assert", "rank", ">=", "1", ",", "f\"ranks should start at 1 \\t\\t got rank = {rank}\"", "\n", "\n", "if", "rank", ">", "depth_negative", ":", "\n", "            ", "break", "\n", "\n", "", "if", "rank", "<=", "depth_positive", ":", "\n", "            ", "positives", ".", "append", "(", "pid", ")", "\n", "", "elif", "rank", ">", "cutoff_negative", ":", "\n", "            ", "negatives", ".", "append", "(", "pid", ")", "\n", "\n", "", "", "num_sampled", "=", "100", "\n", "\n", "for", "neg", "in", "sample_negatives", "(", "negatives", ",", "num_sampled", ")", ":", "\n", "        ", "positives_", "=", "random", ".", "sample", "(", "positives", ",", "npositives", ")", "\n", "positives_", "=", "positives_", "[", "0", "]", "if", "npositives", "==", "1", "else", "positives_", "\n", "triples", ".", "append", "(", "(", "qid", ",", "positives_", ",", "neg", ")", ")", "\n", "\n", "", "return", "triples", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.supervision.self_training.main": [[57, 101], ["colbert.utils.utils.load_ranking", "colbert.utils.utils.print_message", "colbert.utils.utils.groupby_first_item", "enumerate", "colbert.utils.utils.print_message", "colbert.utils.utils.print_message", "colbert.utils.utils.print_message", "random.shuffle", "colbert.utils.utils.print_message", "print", "print", "colbert.utils.utils.print_message", "tqdm.tqdm", "self_training.sample_for_query", "random.sample.extend", "len", "random.sample", "open", "open", "ujson.dump", "f.write", "len", "colbert.utils.utils.print_message", "ujson.dump", "f.write", "len", "len", "git.Repo", "str", "len"], "function", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.data.ranking.load_ranking", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.utils.print_message", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.utils.groupby_first_item", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.data.collection.Collection.enumerate", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.utils.print_message", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.utils.print_message", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.utils.print_message", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.utils.print_message", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.infra.run.Run.print", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.infra.run.Run.print", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.utils.print_message", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.supervision.self_training.sample_for_query", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.infra.run.Run.open", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.infra.run.Run.open", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.utils.print_message"], ["", "def", "main", "(", "args", ")", ":", "\n", "    ", "rankings", "=", "load_ranking", "(", "args", ".", "ranking", ",", "types", "=", "[", "int", ",", "int", ",", "int", ",", "float", ",", "int", "]", ")", "\n", "\n", "print_message", "(", "\"#> Group by QID\"", ")", "\n", "qid2rankings", "=", "groupby_first_item", "(", "tqdm", ".", "tqdm", "(", "rankings", ")", ")", "\n", "\n", "Triples", "=", "[", "]", "\n", "NonEmptyQIDs", "=", "0", "\n", "\n", "for", "processing_idx", ",", "qid", "in", "enumerate", "(", "qid2rankings", ")", ":", "\n", "        ", "l", "=", "sample_for_query", "(", "qid", ",", "qid2rankings", "[", "qid", "]", ",", "args", ".", "positives", ",", "args", ".", "depth_positive", ",", "args", ".", "depth_negative", ",", "args", ".", "cutoff_negative", ")", "\n", "NonEmptyQIDs", "+=", "(", "len", "(", "l", ")", ">", "0", ")", "\n", "Triples", ".", "extend", "(", "l", ")", "\n", "\n", "if", "processing_idx", "%", "(", "10_000", ")", "==", "0", ":", "\n", "            ", "print_message", "(", "f\"#> Done with {processing_idx+1} questions!\\t\\t \"", "\n", "f\"{str(len(Triples) / 1000)}k triples for {NonEmptyQIDs} unqiue QIDs.\"", ")", "\n", "\n", "", "", "print_message", "(", "f\"#> Sub-sample the triples (if > {MAX_NUM_TRIPLES})..\"", ")", "\n", "print_message", "(", "f\"#> len(Triples) = {len(Triples)}\"", ")", "\n", "\n", "if", "len", "(", "Triples", ")", ">", "MAX_NUM_TRIPLES", ":", "\n", "        ", "Triples", "=", "random", ".", "sample", "(", "Triples", ",", "MAX_NUM_TRIPLES", ")", "\n", "\n", "### Prepare the triples ###", "\n", "", "print_message", "(", "\"#> Shuffling the triples...\"", ")", "\n", "random", ".", "shuffle", "(", "Triples", ")", "\n", "\n", "print_message", "(", "\"#> Writing {}M examples to file.\"", ".", "format", "(", "len", "(", "Triples", ")", "/", "1000.0", "/", "1000.0", ")", ")", "\n", "\n", "with", "open", "(", "args", ".", "output", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "for", "example", "in", "Triples", ":", "\n", "            ", "ujson", ".", "dump", "(", "example", ",", "f", ")", "\n", "f", ".", "write", "(", "'\\n'", ")", "\n", "\n", "", "", "with", "open", "(", "f'{args.output}.meta'", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "args", ".", "cmd", "=", "' '", ".", "join", "(", "sys", ".", "argv", ")", "\n", "args", ".", "git_hash", "=", "git", ".", "Repo", "(", "search_parent_directories", "=", "True", ")", ".", "head", ".", "object", ".", "hexsha", "\n", "ujson", ".", "dump", "(", "args", ".", "__dict__", ",", "f", ",", "indent", "=", "4", ")", "\n", "f", ".", "write", "(", "'\\n'", ")", "\n", "\n", "", "print", "(", "'\\n\\n'", ",", "args", ",", "'\\n\\n'", ")", "\n", "print", "(", "args", ".", "output", ")", "\n", "print_message", "(", "\"#> Done.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.evaluate.msmarco_passages.main": [[16, 110], ["collections.defaultdict", "collections.defaultdict", "set.issubset", "len", "len", "colbert.utils.utils.print_message", "tqdm.tqdm", "print", "sum", "colbert.utils.utils.print_message", "colbert.utils.utils.print_message", "print", "open", "colbert.utils.utils.print_message", "colbert.utils.utils.file_tqdm", "open", "colbert.utils.utils.print_message", "colbert.utils.utils.file_tqdm", "set", "set", "print", "colbert.utils.utils.print_message", "colbert.utils.utils.print_message", "print", "enumerate", "enumerate", "len", "len", "qid2mrr.values", "print", "sum", "colbert.utils.utils.print_message", "colbert.utils.utils.print_message", "print", "colbert.utils.utils.print_message", "map", "qid2positives[].append", "line.strip().split", "qid2ranking[].append", "collections.defaultdict.keys", "collections.defaultdict.keys", "len", "len", "qid2recall[].values", "open", "tqdm.tqdm", "line.strip().split", "int", "int", "int", "len", "float", "enumerate", "line.strip", "len", "int", "f.write", "line.strip", "qid2recall[].get", "map", "len"], "function", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.utils.print_message", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.infra.run.Run.print", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.utils.print_message", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.utils.print_message", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.infra.run.Run.print", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.infra.run.Run.open", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.utils.print_message", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.utils.file_tqdm", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.infra.run.Run.open", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.utils.print_message", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.utils.file_tqdm", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.config.core_config.CoreConfig.set", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.config.core_config.CoreConfig.set", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.infra.run.Run.print", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.utils.print_message", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.utils.print_message", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.infra.run.Run.print", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.data.collection.Collection.enumerate", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.data.collection.Collection.enumerate", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.data.queries.Queries.values", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.infra.run.Run.print", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.utils.print_message", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.utils.print_message", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.infra.run.Run.print", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.utils.print_message", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.data.queries.Queries.keys", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.data.queries.Queries.keys", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.data.queries.Queries.values", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.infra.run.Run.open", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.data.collection.Collection.enumerate"], ["def", "main", "(", "args", ")", ":", "\n", "    ", "qid2positives", "=", "defaultdict", "(", "list", ")", "\n", "qid2ranking", "=", "defaultdict", "(", "list", ")", "\n", "qid2mrr", "=", "{", "}", "\n", "qid2recall", "=", "{", "depth", ":", "{", "}", "for", "depth", "in", "[", "50", ",", "200", ",", "1000", ",", "5000", ",", "10000", "]", "}", "\n", "\n", "with", "open", "(", "args", ".", "qrels", ")", "as", "f", ":", "\n", "        ", "print_message", "(", "f\"#> Loading QRELs from {args.qrels} ..\"", ")", "\n", "for", "line", "in", "file_tqdm", "(", "f", ")", ":", "\n", "            ", "qid", ",", "_", ",", "pid", ",", "label", "=", "map", "(", "int", ",", "line", ".", "strip", "(", ")", ".", "split", "(", ")", ")", "\n", "assert", "label", "==", "1", "\n", "\n", "qid2positives", "[", "qid", "]", ".", "append", "(", "pid", ")", "\n", "\n", "", "", "with", "open", "(", "args", ".", "ranking", ")", "as", "f", ":", "\n", "        ", "print_message", "(", "f\"#> Loading ranked lists from {args.ranking} ..\"", ")", "\n", "for", "line", "in", "file_tqdm", "(", "f", ")", ":", "\n", "            ", "qid", ",", "pid", ",", "rank", ",", "*", "score", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "'\\t'", ")", "\n", "qid", ",", "pid", ",", "rank", "=", "int", "(", "qid", ")", ",", "int", "(", "pid", ")", ",", "int", "(", "rank", ")", "\n", "\n", "if", "len", "(", "score", ")", ">", "0", ":", "\n", "                ", "assert", "len", "(", "score", ")", "==", "1", "\n", "score", "=", "float", "(", "score", "[", "0", "]", ")", "\n", "", "else", ":", "\n", "                ", "score", "=", "None", "\n", "\n", "", "qid2ranking", "[", "qid", "]", ".", "append", "(", "(", "rank", ",", "pid", ",", "score", ")", ")", "\n", "\n", "", "", "assert", "set", ".", "issubset", "(", "set", "(", "qid2ranking", ".", "keys", "(", ")", ")", ",", "set", "(", "qid2positives", ".", "keys", "(", ")", ")", ")", "\n", "\n", "num_judged_queries", "=", "len", "(", "qid2positives", ")", "\n", "num_ranked_queries", "=", "len", "(", "qid2ranking", ")", "\n", "\n", "if", "num_judged_queries", "!=", "num_ranked_queries", ":", "\n", "        ", "print", "(", ")", "\n", "print_message", "(", "\"#> [WARNING] num_judged_queries != num_ranked_queries\"", ")", "\n", "print_message", "(", "f\"#> {num_judged_queries} != {num_ranked_queries}\"", ")", "\n", "print", "(", ")", "\n", "\n", "", "print_message", "(", "f\"#> Computing MRR@10 for {num_judged_queries} queries.\"", ")", "\n", "\n", "for", "qid", "in", "tqdm", ".", "tqdm", "(", "qid2positives", ")", ":", "\n", "        ", "ranking", "=", "qid2ranking", "[", "qid", "]", "\n", "positives", "=", "qid2positives", "[", "qid", "]", "\n", "\n", "for", "rank", ",", "(", "_", ",", "pid", ",", "_", ")", "in", "enumerate", "(", "ranking", ")", ":", "\n", "            ", "rank", "=", "rank", "+", "1", "# 1-indexed", "\n", "\n", "if", "pid", "in", "positives", ":", "\n", "                ", "if", "rank", "<=", "10", ":", "\n", "                    ", "qid2mrr", "[", "qid", "]", "=", "1.0", "/", "rank", "\n", "", "break", "\n", "\n", "", "", "for", "rank", ",", "(", "_", ",", "pid", ",", "_", ")", "in", "enumerate", "(", "ranking", ")", ":", "\n", "            ", "rank", "=", "rank", "+", "1", "# 1-indexed", "\n", "\n", "if", "pid", "in", "positives", ":", "\n", "                ", "for", "depth", "in", "qid2recall", ":", "\n", "                    ", "if", "rank", "<=", "depth", ":", "\n", "                        ", "qid2recall", "[", "depth", "]", "[", "qid", "]", "=", "qid2recall", "[", "depth", "]", ".", "get", "(", "qid", ",", "0", ")", "+", "1.0", "/", "len", "(", "positives", ")", "\n", "\n", "", "", "", "", "", "assert", "len", "(", "qid2mrr", ")", "<=", "num_ranked_queries", ",", "(", "len", "(", "qid2mrr", ")", ",", "num_ranked_queries", ")", "\n", "\n", "print", "(", ")", "\n", "mrr_10_sum", "=", "sum", "(", "qid2mrr", ".", "values", "(", ")", ")", "\n", "print_message", "(", "f\"#> MRR@10 = {mrr_10_sum / num_judged_queries}\"", ")", "\n", "print_message", "(", "f\"#> MRR@10 (only for ranked queries) = {mrr_10_sum / num_ranked_queries}\"", ")", "\n", "print", "(", ")", "\n", "\n", "for", "depth", "in", "qid2recall", ":", "\n", "        ", "assert", "len", "(", "qid2recall", "[", "depth", "]", ")", "<=", "num_ranked_queries", ",", "(", "len", "(", "qid2recall", "[", "depth", "]", ")", ",", "num_ranked_queries", ")", "\n", "\n", "print", "(", ")", "\n", "metric_sum", "=", "sum", "(", "qid2recall", "[", "depth", "]", ".", "values", "(", ")", ")", "\n", "print_message", "(", "f\"#> Recall@{depth} = {metric_sum / num_judged_queries}\"", ")", "\n", "print_message", "(", "f\"#> Recall@{depth} (only for ranked queries) = {metric_sum / num_ranked_queries}\"", ")", "\n", "print", "(", ")", "\n", "\n", "", "if", "args", ".", "annotate", ":", "\n", "        ", "print_message", "(", "f\"#> Writing annotations to {args.output} ..\"", ")", "\n", "\n", "with", "open", "(", "args", ".", "output", ",", "'w'", ")", "as", "f", ":", "\n", "            ", "for", "qid", "in", "tqdm", ".", "tqdm", "(", "qid2positives", ")", ":", "\n", "                ", "ranking", "=", "qid2ranking", "[", "qid", "]", "\n", "positives", "=", "qid2positives", "[", "qid", "]", "\n", "\n", "for", "rank", ",", "(", "_", ",", "pid", ",", "score", ")", "in", "enumerate", "(", "ranking", ")", ":", "\n", "                    ", "rank", "=", "rank", "+", "1", "# 1-indexed", "\n", "label", "=", "int", "(", "pid", "in", "positives", ")", "\n", "\n", "line", "=", "[", "qid", ",", "pid", ",", "rank", ",", "score", ",", "label", "]", "\n", "line", "=", "[", "x", "for", "x", "in", "line", "if", "x", "is", "not", "None", "]", "\n", "line", "=", "'\\t'", ".", "join", "(", "map", "(", "str", ",", "line", ")", ")", "+", "'\\n'", "\n", "f", ".", "write", "(", "line", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.evaluate.annotate_EM.main": [[19, 62], ["utility.utils.qa_loaders.load_qas_", "utility.utils.qa_loaders.load_collection_", "colbert.utils.utils.load_ranking", "multiprocessing.Pool", "colbert.utils.utils.print_message", "list", "colbert.utils.utils.print_message", "colbert.utils.utils.print_message", "list", "colbert.utils.utils.print_message", "colbert.utils.utils.groupby_first_item", "check_sizes", "compute_and_write_labels", "print", "print", "print", "print", "multiprocessing.Pool.map", "len", "len", "len", "len", "multiprocessing.Pool.map", "open", "utility.utils.save_metadata.get_metadata", "f.write", "enumerate", "success.items", "counts.items", "utility.utils.save_metadata.format_metadata"], "function", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.qa_loaders.load_qas_", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.qa_loaders.load_collection_", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.data.ranking.load_ranking", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.utils.print_message", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.utils.print_message", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.utils.print_message", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.utils.print_message", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.utils.groupby_first_item", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.evaluate.annotate_EM_helpers.check_sizes", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.evaluate.annotate_EM_helpers.compute_and_write_labels", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.infra.run.Run.print", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.infra.run.Run.print", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.infra.run.Run.print", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.infra.run.Run.print", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.infra.run.Run.open", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.save_metadata.get_metadata", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.data.collection.Collection.enumerate", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.data.ranking.Ranking.items", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.data.ranking.Ranking.items", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.save_metadata.format_metadata"], ["def", "main", "(", "args", ")", ":", "\n", "    ", "qas", "=", "load_qas_", "(", "args", ".", "qas", ")", "\n", "collection", "=", "load_collection_", "(", "args", ".", "collection", ",", "retain_titles", "=", "True", ")", "\n", "rankings", "=", "load_ranking", "(", "args", ".", "ranking", ")", "\n", "parallel_pool", "=", "Pool", "(", "30", ")", "\n", "\n", "print_message", "(", "'#> Tokenize the answers in the Q&As in parallel...'", ")", "\n", "qas", "=", "list", "(", "parallel_pool", ".", "map", "(", "tokenize_all_answers", ",", "qas", ")", ")", "\n", "\n", "qid2answers", "=", "{", "qid", ":", "tok_answers", "for", "qid", ",", "_", ",", "tok_answers", "in", "qas", "}", "\n", "assert", "len", "(", "qas", ")", "==", "len", "(", "qid2answers", ")", ",", "(", "len", "(", "qas", ")", ",", "len", "(", "qid2answers", ")", ")", "\n", "\n", "print_message", "(", "'#> Lookup passages from PIDs...'", ")", "\n", "expanded_rankings", "=", "[", "(", "qid", ",", "pid", ",", "rank", ",", "collection", "[", "pid", "]", ",", "qid2answers", "[", "qid", "]", ")", "\n", "for", "qid", ",", "pid", ",", "rank", ",", "*", "_", "in", "rankings", "]", "\n", "\n", "print_message", "(", "'#> Assign labels in parallel...'", ")", "\n", "labeled_rankings", "=", "list", "(", "parallel_pool", ".", "map", "(", "assign_label_to_passage", ",", "enumerate", "(", "expanded_rankings", ")", ")", ")", "\n", "\n", "# Dump output.", "\n", "print_message", "(", "\"#> Dumping output to\"", ",", "args", ".", "output", ",", "\"...\"", ")", "\n", "qid2rankings", "=", "groupby_first_item", "(", "labeled_rankings", ")", "\n", "\n", "num_judged_queries", ",", "num_ranked_queries", "=", "check_sizes", "(", "qid2answers", ",", "qid2rankings", ")", "\n", "\n", "# Evaluation metrics and depths.", "\n", "success", ",", "counts", "=", "compute_and_write_labels", "(", "args", ".", "output", ",", "qid2answers", ",", "qid2rankings", ")", "\n", "\n", "# Dump metrics.", "\n", "with", "open", "(", "args", ".", "output_metrics", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "d", "=", "{", "'num_ranked_queries'", ":", "num_ranked_queries", ",", "'num_judged_queries'", ":", "num_judged_queries", "}", "\n", "\n", "extra", "=", "'__WARNING'", "if", "num_judged_queries", "!=", "num_ranked_queries", "else", "''", "\n", "d", "[", "f'success{extra}'", "]", "=", "{", "k", ":", "v", "/", "num_judged_queries", "for", "k", ",", "v", "in", "success", ".", "items", "(", ")", "}", "\n", "d", "[", "f'counts{extra}'", "]", "=", "{", "k", ":", "v", "/", "num_judged_queries", "for", "k", ",", "v", "in", "counts", ".", "items", "(", ")", "}", "\n", "d", "[", "'arguments'", "]", "=", "get_metadata", "(", "args", ")", "\n", "\n", "f", ".", "write", "(", "format_metadata", "(", "d", ")", "+", "'\\n'", ")", "\n", "\n", "", "print", "(", "'\\n\\n'", ")", "\n", "print", "(", "args", ".", "output", ")", "\n", "print", "(", "args", ".", "output_metrics", ")", "\n", "print", "(", "\"#> Done\\n\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.evaluate.annotate_EM_helpers.tokenize_all_answers": [[5, 8], ["utility.utils.dpr.DPR_normalize"], "function", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.dpr.DPR_normalize"], ["def", "tokenize_all_answers", "(", "args", ")", ":", "\n", "    ", "qid", ",", "question", ",", "answers", "=", "args", "\n", "return", "qid", ",", "question", ",", "[", "DPR_normalize", "(", "ans", ")", "for", "ans", "in", "answers", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.evaluate.annotate_EM_helpers.assign_label_to_passage": [[10, 17], ["print", "utility.utils.dpr.has_answer"], "function", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.infra.run.Run.print", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.dpr.has_answer"], ["", "def", "assign_label_to_passage", "(", "args", ")", ":", "\n", "    ", "idx", ",", "(", "qid", ",", "pid", ",", "rank", ",", "passage", ",", "tokenized_answers", ")", "=", "args", "\n", "\n", "if", "idx", "%", "(", "1", "*", "1000", "*", "1000", ")", "==", "0", ":", "\n", "        ", "print", "(", "idx", ")", "\n", "\n", "", "return", "qid", ",", "pid", ",", "rank", ",", "has_answer", "(", "tokenized_answers", ",", "passage", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.evaluate.annotate_EM_helpers.check_sizes": [[19, 34], ["len", "len", "colbert.utils.utils.print_message", "colbert.utils.utils.print_message", "print", "colbert.utils.utils.print_message", "print"], "function", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.utils.print_message", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.utils.print_message", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.infra.run.Run.print", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.utils.print_message", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.infra.run.Run.print"], ["", "def", "check_sizes", "(", "qid2answers", ",", "qid2rankings", ")", ":", "\n", "    ", "num_judged_queries", "=", "len", "(", "qid2answers", ")", "\n", "num_ranked_queries", "=", "len", "(", "qid2rankings", ")", "\n", "\n", "print_message", "(", "'num_judged_queries ='", ",", "num_judged_queries", ")", "\n", "print_message", "(", "'num_ranked_queries ='", ",", "num_ranked_queries", ")", "\n", "\n", "if", "num_judged_queries", "!=", "num_ranked_queries", ":", "\n", "        ", "assert", "num_ranked_queries", "<=", "num_judged_queries", "\n", "\n", "print", "(", "'\\n\\n'", ")", "\n", "print_message", "(", "'[WARNING] num_judged_queries != num_ranked_queries'", ")", "\n", "print", "(", "'\\n\\n'", ")", "\n", "\n", "", "return", "num_judged_queries", ",", "num_ranked_queries", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.evaluate.annotate_EM_helpers.compute_and_write_labels": [[36, 66], ["open", "labels.append", "f.write", "sum", "sum", "map", "sum", "sum", "int"], "function", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.infra.run.Run.open"], ["", "def", "compute_and_write_labels", "(", "output_path", ",", "qid2answers", ",", "qid2rankings", ")", ":", "\n", "    ", "cutoffs", "=", "[", "1", ",", "5", ",", "10", ",", "20", ",", "30", ",", "50", ",", "100", ",", "1000", ",", "'all'", "]", "\n", "success", "=", "{", "cutoff", ":", "0.0", "for", "cutoff", "in", "cutoffs", "}", "\n", "counts", "=", "{", "cutoff", ":", "0.0", "for", "cutoff", "in", "cutoffs", "}", "\n", "\n", "with", "open", "(", "output_path", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "for", "qid", "in", "qid2answers", ":", "\n", "            ", "if", "qid", "not", "in", "qid2rankings", ":", "\n", "                ", "continue", "\n", "\n", "", "prev_rank", "=", "0", "# ranks should start at one (i.e., and not zero)", "\n", "labels", "=", "[", "]", "\n", "\n", "for", "pid", ",", "rank", ",", "label", "in", "qid2rankings", "[", "qid", "]", ":", "\n", "                ", "assert", "rank", "==", "prev_rank", "+", "1", ",", "(", "qid", ",", "pid", ",", "(", "prev_rank", ",", "rank", ")", ")", "\n", "prev_rank", "=", "rank", "\n", "\n", "labels", ".", "append", "(", "label", ")", "\n", "line", "=", "'\\t'", ".", "join", "(", "map", "(", "str", ",", "[", "qid", ",", "pid", ",", "rank", ",", "int", "(", "label", ")", "]", ")", ")", "+", "'\\n'", "\n", "f", ".", "write", "(", "line", ")", "\n", "\n", "", "for", "cutoff", "in", "cutoffs", ":", "\n", "                ", "if", "cutoff", "!=", "'all'", ":", "\n", "                    ", "success", "[", "cutoff", "]", "+=", "sum", "(", "labels", "[", ":", "cutoff", "]", ")", ">", "0", "\n", "counts", "[", "cutoff", "]", "+=", "sum", "(", "labels", "[", ":", "cutoff", "]", ")", "\n", "", "else", ":", "\n", "                    ", "success", "[", "cutoff", "]", "+=", "sum", "(", "labels", ")", ">", "0", "\n", "counts", "[", "cutoff", "]", "+=", "sum", "(", "labels", ")", "\n", "\n", "", "", "", "", "return", "success", ",", "counts", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.rankings.split_by_queries.main": [[12, 54], ["enumerate", "all", "print", "print", "open", "open", "colbert.utils.utils.print_message", "colbert.utils.utils.file_tqdm", "print", "f.close", "open", "range", "line.strip().split", "all_outputs[].write", "line.strip().split", "int", "len", "os.path.exists", "colbert.utils.utils.print_message", "qid_to_file_idx.get", "line.strip", "int", "line.strip"], "function", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.data.collection.Collection.enumerate", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.infra.run.Run.print", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.infra.run.Run.print", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.infra.run.Run.open", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.infra.run.Run.open", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.utils.print_message", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.utils.file_tqdm", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.infra.run.Run.print", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.infra.run.Run.open", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.utils.print_message"], ["def", "main", "(", "args", ")", ":", "\n", "    ", "qid_to_file_idx", "=", "{", "}", "\n", "\n", "for", "qrels_idx", ",", "qrels", "in", "enumerate", "(", "args", ".", "all_queries", ")", ":", "\n", "        ", "with", "open", "(", "qrels", ")", "as", "f", ":", "\n", "            ", "for", "line", "in", "f", ":", "\n", "                ", "qid", ",", "*", "_", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "'\\t'", ")", "\n", "qid", "=", "int", "(", "qid", ")", "\n", "\n", "assert", "qid_to_file_idx", ".", "get", "(", "qid", ",", "qrels_idx", ")", "==", "qrels_idx", ",", "(", "qid", ",", "qrels_idx", ")", "\n", "qid_to_file_idx", "[", "qid", "]", "=", "qrels_idx", "\n", "\n", "", "", "", "all_outputs_paths", "=", "[", "f'{args.ranking}.{idx}'", "for", "idx", "in", "range", "(", "len", "(", "args", ".", "all_queries", ")", ")", "]", "\n", "\n", "assert", "all", "(", "not", "os", ".", "path", ".", "exists", "(", "path", ")", "for", "path", "in", "all_outputs_paths", ")", "\n", "\n", "all_outputs", "=", "[", "open", "(", "path", ",", "'w'", ")", "for", "path", "in", "all_outputs_paths", "]", "\n", "\n", "with", "open", "(", "args", ".", "ranking", ")", "as", "f", ":", "\n", "        ", "print_message", "(", "f\"#> Loading ranked lists from {f.name} ..\"", ")", "\n", "\n", "last_file_idx", "=", "-", "1", "\n", "\n", "for", "line", "in", "file_tqdm", "(", "f", ")", ":", "\n", "            ", "qid", ",", "*", "_", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "'\\t'", ")", "\n", "\n", "file_idx", "=", "qid_to_file_idx", "[", "int", "(", "qid", ")", "]", "\n", "\n", "if", "file_idx", "!=", "last_file_idx", ":", "\n", "                ", "print_message", "(", "f\"#> Switched to file #{file_idx} at {all_outputs[file_idx].name}\"", ")", "\n", "\n", "", "last_file_idx", "=", "file_idx", "\n", "\n", "all_outputs", "[", "file_idx", "]", ".", "write", "(", "line", ")", "\n", "\n", "", "", "print", "(", ")", "\n", "\n", "for", "f", "in", "all_outputs", ":", "\n", "        ", "print", "(", "f", ".", "name", ")", "\n", "f", ".", "close", "(", ")", "\n", "\n", "", "print", "(", "\"#> Done!\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.rankings.split_by_offset.main": [[11, 31], ["all", "print", "open", "open", "print", "f.close", "line.strip().split", "int", "split_output_path.write", "os.path.exists", "line.strip", "str"], "function", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.infra.run.Run.print", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.infra.run.Run.open", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.infra.run.Run.open", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.infra.run.Run.print"], ["def", "main", "(", "args", ")", ":", "\n", "    ", "output_paths", "=", "[", "'{}.{}'", ".", "format", "(", "args", ".", "ranking", ",", "split", ")", "for", "split", "in", "args", ".", "names", "]", "\n", "assert", "all", "(", "not", "os", ".", "path", ".", "exists", "(", "path", ")", "for", "path", "in", "output_paths", ")", ",", "output_paths", "\n", "\n", "output_files", "=", "[", "open", "(", "path", ",", "'w'", ")", "for", "path", "in", "output_paths", "]", "\n", "\n", "with", "open", "(", "args", ".", "ranking", ")", "as", "f", ":", "\n", "        ", "for", "line", "in", "f", ":", "\n", "            ", "qid", ",", "pid", ",", "rank", ",", "*", "other", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "'\\t'", ")", "\n", "qid", "=", "int", "(", "qid", ")", "\n", "split_output_path", "=", "output_files", "[", "qid", "//", "args", ".", "gap", "-", "1", "]", "\n", "qid", "=", "qid", "%", "args", ".", "gap", "\n", "\n", "split_output_path", ".", "write", "(", "'\\t'", ".", "join", "(", "[", "str", "(", "x", ")", "for", "x", "in", "[", "qid", ",", "pid", ",", "rank", ",", "*", "other", "]", "]", ")", "+", "'\\n'", ")", "\n", "\n", "", "print", "(", "f", ".", "name", ")", "\n", "\n", "", "_", "=", "[", "f", ".", "close", "(", ")", "for", "f", "in", "output_files", "]", "\n", "\n", "print", "(", "\"#> Done!\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.rankings.dev_subsample.main": [[11, 30], ["colbert.utils.utils.print_message", "utility.utils.qa_loaders.load_qas_", "colbert.utils.utils.load_ranking", "colbert.utils.utils.groupby_first_item", "colbert.utils.utils.print_message", "random.sample", "print", "print", "print", "open", "f.write", "map"], "function", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.utils.print_message", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.qa_loaders.load_qas_", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.data.ranking.load_ranking", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.utils.groupby_first_item", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.utils.print_message", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.infra.run.Run.print", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.infra.run.Run.print", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.infra.run.Run.print", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.infra.run.Run.open"], ["def", "main", "(", "args", ")", ":", "\n", "    ", "print_message", "(", "\"#> Loading all..\"", ")", "\n", "qas", "=", "load_qas_", "(", "args", ".", "qas", ")", "\n", "rankings", "=", "load_ranking", "(", "args", ".", "ranking", ")", "\n", "qid2rankings", "=", "groupby_first_item", "(", "rankings", ")", "\n", "\n", "print_message", "(", "\"#> Subsampling all..\"", ")", "\n", "qas_sample", "=", "random", ".", "sample", "(", "qas", ",", "args", ".", "sample", ")", "\n", "\n", "with", "open", "(", "args", ".", "output", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "for", "qid", ",", "*", "_", "in", "qas_sample", ":", "\n", "            ", "for", "items", "in", "qid2rankings", "[", "qid", "]", ":", "\n", "                ", "items", "=", "[", "qid", "]", "+", "items", "\n", "line", "=", "'\\t'", ".", "join", "(", "map", "(", "str", ",", "items", ")", ")", "+", "'\\n'", "\n", "f", ".", "write", "(", "line", ")", "\n", "\n", "", "", "", "print", "(", "'\\n\\n'", ")", "\n", "print", "(", "args", ".", "output", ")", "\n", "print", "(", "\"#> Done.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.rankings.tune.main": [[10, 47], ["max", "int", "os.path.join", "utility.utils.save_metadata.save_metadata", "print", "print", "colbert.utils.utils.print_message", "os.path.dirname", "open", "ujson.load", "MaxCHECKPOINT.endswith", "open", "f.write", "open", "ujson.load", "[].split", "type", "max.split"], "function", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.save_metadata.save_metadata", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.infra.run.Run.print", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.infra.run.Run.print", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.utils.print_message", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.infra.run.Run.open", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.codecs.residual_embeddings.ResidualEmbeddings.load", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.infra.run.Run.open", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.infra.run.Run.open", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.codecs.residual_embeddings.ResidualEmbeddings.load"], ["def", "main", "(", "args", ")", ":", "\n", "    ", "AllMetrics", "=", "{", "}", "\n", "Scores", "=", "{", "}", "\n", "\n", "for", "path", "in", "args", ".", "paths", ":", "\n", "        ", "with", "open", "(", "path", ")", "as", "f", ":", "\n", "            ", "metric", "=", "ujson", ".", "load", "(", "f", ")", "\n", "AllMetrics", "[", "path", "]", "=", "metric", "\n", "\n", "for", "k", "in", "args", ".", "metric", ":", "\n", "                ", "metric", "=", "metric", "[", "k", "]", "\n", "\n", "", "assert", "type", "(", "metric", ")", "is", "float", "\n", "Scores", "[", "path", "]", "=", "metric", "\n", "\n", "", "", "MaxKey", "=", "max", "(", "Scores", ",", "key", "=", "Scores", ".", "get", ")", "\n", "\n", "MaxCKPT", "=", "int", "(", "MaxKey", ".", "split", "(", "'/'", ")", "[", "-", "2", "]", ".", "split", "(", "'.'", ")", "[", "-", "1", "]", ")", "\n", "MaxARGS", "=", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "dirname", "(", "MaxKey", ")", ",", "'logs'", ",", "'args.json'", ")", "\n", "\n", "with", "open", "(", "MaxARGS", ")", "as", "f", ":", "\n", "        ", "logs", "=", "ujson", ".", "load", "(", "f", ")", "\n", "MaxCHECKPOINT", "=", "logs", "[", "'checkpoint'", "]", "\n", "\n", "assert", "MaxCHECKPOINT", ".", "endswith", "(", "f'colbert-{MaxCKPT}.dnn'", ")", ",", "(", "MaxCHECKPOINT", ",", "MaxCKPT", ")", "\n", "\n", "", "with", "open", "(", "args", ".", "output", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "f", ".", "write", "(", "MaxCHECKPOINT", ")", "\n", "\n", "", "args", ".", "Scores", "=", "Scores", "\n", "args", ".", "AllMetrics", "=", "AllMetrics", "\n", "\n", "save_metadata", "(", "f'{args.output}.meta'", ",", "args", ")", "\n", "\n", "print", "(", "'\\n\\n'", ",", "args", ",", "'\\n\\n'", ")", "\n", "print", "(", "args", ".", "output", ")", "\n", "print_message", "(", "\"#> Done.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.rankings.merge.main": [[13, 42], ["collections.defaultdict", "colbert.utils.utils.print_message", "open", "colbert.utils.utils.print_message", "tqdm.tqdm", "open", "colbert.utils.utils.file_tqdm", "sorted", "enumerate", "line.strip().split", "map", "float", "Rankings[].append", "f.write", "line.strip", "map"], "function", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.utils.print_message", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.infra.run.Run.open", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.utils.print_message", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.infra.run.Run.open", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.utils.file_tqdm", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.data.collection.Collection.enumerate"], ["def", "main", "(", "args", ")", ":", "\n", "    ", "Rankings", "=", "defaultdict", "(", "list", ")", "\n", "\n", "for", "path", "in", "args", ".", "input", ":", "\n", "        ", "print_message", "(", "f\"#> Loading the rankings in {path} ..\"", ")", "\n", "\n", "with", "open", "(", "path", ")", "as", "f", ":", "\n", "            ", "for", "line", "in", "file_tqdm", "(", "f", ")", ":", "\n", "                ", "qid", ",", "pid", ",", "rank", ",", "score", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "'\\t'", ")", "\n", "qid", ",", "pid", ",", "rank", "=", "map", "(", "int", ",", "[", "qid", ",", "pid", ",", "rank", "]", ")", "\n", "score", "=", "float", "(", "score", ")", "\n", "\n", "Rankings", "[", "qid", "]", ".", "append", "(", "(", "score", ",", "rank", ",", "pid", ")", ")", "\n", "\n", "", "", "", "with", "open", "(", "args", ".", "output", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "print_message", "(", "f\"#> Writing the output rankings to {args.output} ..\"", ")", "\n", "\n", "for", "qid", "in", "tqdm", ".", "tqdm", "(", "Rankings", ")", ":", "\n", "            ", "ranking", "=", "sorted", "(", "Rankings", "[", "qid", "]", ",", "reverse", "=", "True", ")", "\n", "\n", "for", "rank", ",", "(", "score", ",", "original_rank", ",", "pid", ")", "in", "enumerate", "(", "ranking", ")", ":", "\n", "                ", "rank", "=", "rank", "+", "1", "# 1-indexed", "\n", "\n", "if", "(", "args", ".", "depth", ">", "0", ")", "and", "(", "rank", ">", "args", ".", "depth", ")", ":", "\n", "                    ", "break", "\n", "\n", "", "line", "=", "[", "qid", ",", "pid", ",", "rank", ",", "score", "]", "\n", "line", "=", "'\\t'", ".", "join", "(", "map", "(", "str", ",", "line", ")", ")", "+", "'\\n'", "\n", "f", ".", "write", "(", "line", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.preprocess.queries_split.main": [[15, 70], ["random.seed", "collections.OrderedDict", "colbert.utils.utils.print_message", "colbert.utils.utils.print_message", "list", "sorted", "sorted", "colbert.utils.utils.print_message", "open", "len", "max", "min", "len", "collections.OrderedDict.keys", "list", "list", "len", "len", "os.path.exists", "os.path.exists", "line.strip().split", "random.sample", "set.difference", "open", "range", "set", "set", "f.write", "line.strip", "len", "list", "range", "len"], "function", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.utils.print_message", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.utils.print_message", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.utils.print_message", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.infra.run.Run.open", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.data.queries.Queries.keys", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.infra.run.Run.open", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.config.core_config.CoreConfig.set", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.config.core_config.CoreConfig.set"], ["def", "main", "(", "args", ")", ":", "\n", "    ", "random", ".", "seed", "(", "12345", ")", "\n", "\n", "\"\"\"\n    Load the queries\n    \"\"\"", "\n", "Queries", "=", "OrderedDict", "(", ")", "\n", "\n", "print_message", "(", "f\"#> Loading queries from {args.input}..\"", ")", "\n", "with", "open", "(", "args", ".", "input", ")", "as", "f", ":", "\n", "        ", "for", "line", "in", "f", ":", "\n", "            ", "qid", ",", "query", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "'\\t'", ")", "\n", "\n", "assert", "qid", "not", "in", "Queries", "\n", "Queries", "[", "qid", "]", "=", "query", "\n", "\n", "", "", "\"\"\"\n    Apply the splitting\n    \"\"\"", "\n", "size_a", "=", "len", "(", "Queries", ")", "-", "args", ".", "holdout", "\n", "size_b", "=", "args", ".", "holdout", "\n", "size_a", ",", "size_b", "=", "max", "(", "size_a", ",", "size_b", ")", ",", "min", "(", "size_a", ",", "size_b", ")", "\n", "\n", "assert", "size_a", ">", "0", "and", "size_b", ">", "0", ",", "(", "len", "(", "Queries", ")", ",", "size_a", ",", "size_b", ")", "\n", "\n", "print_message", "(", "f\"#> Deterministically splitting the queries into ({size_a}, {size_b})-sized splits.\"", ")", "\n", "\n", "keys", "=", "list", "(", "Queries", ".", "keys", "(", ")", ")", "\n", "sample_b_indices", "=", "sorted", "(", "list", "(", "random", ".", "sample", "(", "range", "(", "len", "(", "keys", ")", ")", ",", "size_b", ")", ")", ")", "\n", "sample_a_indices", "=", "sorted", "(", "list", "(", "set", ".", "difference", "(", "set", "(", "list", "(", "range", "(", "len", "(", "keys", ")", ")", ")", ")", ",", "set", "(", "sample_b_indices", ")", ")", ")", ")", "\n", "\n", "assert", "len", "(", "sample_a_indices", ")", "==", "size_a", "\n", "assert", "len", "(", "sample_b_indices", ")", "==", "size_b", "\n", "\n", "sample_a", "=", "[", "keys", "[", "idx", "]", "for", "idx", "in", "sample_a_indices", "]", "\n", "sample_b", "=", "[", "keys", "[", "idx", "]", "for", "idx", "in", "sample_b_indices", "]", "\n", "\n", "\"\"\"\n    Write the output\n    \"\"\"", "\n", "\n", "output_path_a", "=", "f'{args.input}.a'", "\n", "output_path_b", "=", "f'{args.input}.b'", "\n", "\n", "assert", "not", "os", ".", "path", ".", "exists", "(", "output_path_a", ")", ",", "output_path_a", "\n", "assert", "not", "os", ".", "path", ".", "exists", "(", "output_path_b", ")", ",", "output_path_b", "\n", "\n", "print_message", "(", "f\"#> Writing the splits out to {output_path_a} and {output_path_b} ...\"", ")", "\n", "\n", "for", "output_path", ",", "sample", "in", "[", "(", "output_path_a", ",", "sample_a", ")", ",", "(", "output_path_b", ",", "sample_b", ")", "]", ":", "\n", "        ", "with", "open", "(", "output_path", ",", "'w'", ")", "as", "f", ":", "\n", "            ", "for", "qid", "in", "sample", ":", "\n", "                ", "query", "=", "Queries", "[", "qid", "]", "\n", "line", "=", "'\\t'", ".", "join", "(", "[", "qid", ",", "query", "]", ")", "+", "'\\n'", "\n", "f", ".", "write", "(", "line", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.preprocess.docs2passages.process_page": [[19, 54], ["all", "content.split", "tokenizer.tokenize", "list", "len", "print", "print", "print", "print", "len", "range", "map", "print", "print", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.tokenization.doc_tokenization.DocTokenizer.tokenize", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.infra.run.Run.print", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.infra.run.Run.print", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.infra.run.Run.print", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.infra.run.Run.print", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.infra.run.Run.print", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.infra.run.Run.print"], ["def", "process_page", "(", "inp", ")", ":", "\n", "    ", "\"\"\"\n        Wraps around if we split: make sure last passage isn't too short.\n        This is meant to be similar to the DPR preprocessing.\n    \"\"\"", "\n", "\n", "(", "nwords", ",", "overlap", ",", "tokenizer", ")", ",", "(", "title_idx", ",", "docid", ",", "title", ",", "url", ",", "content", ")", "=", "inp", "\n", "\n", "if", "tokenizer", "is", "None", ":", "\n", "        ", "words", "=", "content", ".", "split", "(", ")", "\n", "", "else", ":", "\n", "        ", "words", "=", "tokenizer", ".", "tokenize", "(", "content", ")", "\n", "\n", "", "words_", "=", "(", "words", "+", "words", ")", "if", "len", "(", "words", ")", ">", "nwords", "else", "words", "\n", "passages", "=", "[", "words_", "[", "offset", ":", "offset", "+", "nwords", "]", "for", "offset", "in", "range", "(", "0", ",", "len", "(", "words", ")", "-", "overlap", ",", "nwords", "-", "overlap", ")", "]", "\n", "\n", "assert", "all", "(", "len", "(", "psg", ")", "in", "[", "len", "(", "words", ")", ",", "nwords", "]", "for", "psg", "in", "passages", ")", ",", "(", "list", "(", "map", "(", "len", ",", "passages", ")", ")", ",", "len", "(", "words", ")", ")", "\n", "\n", "if", "tokenizer", "is", "None", ":", "\n", "        ", "passages", "=", "[", "' '", ".", "join", "(", "psg", ")", "for", "psg", "in", "passages", "]", "\n", "", "else", ":", "\n", "        ", "passages", "=", "[", "' '", ".", "join", "(", "psg", ")", ".", "replace", "(", "' ##'", ",", "''", ")", "for", "psg", "in", "passages", "]", "\n", "\n", "", "if", "title_idx", "%", "100000", "==", "0", ":", "\n", "        ", "print", "(", "\"#> \"", ",", "title_idx", ",", "'\\t\\t\\t'", ",", "title", ")", "\n", "\n", "for", "p", "in", "passages", ":", "\n", "            ", "print", "(", "\"$$$ \"", ",", "'\\t\\t'", ",", "p", ")", "\n", "print", "(", ")", "\n", "\n", "", "print", "(", ")", "\n", "print", "(", ")", "\n", "print", "(", ")", "\n", "\n", "", "return", "(", "docid", ",", "title", ",", "url", ",", "passages", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.preprocess.docs2passages.main": [[56, 129], ["random.seed", "colbert.utils.utils.print_message", "print", "colbert.utils.utils.print_message", "multiprocessing.Pool", "colbert.utils.utils.print_message", "multiprocessing.Pool.map", "colbert.utils.utils.print_message", "os.path.exists", "open", "enumerate", "len", "BertTokenizerFast.from_pretrained", "len", "zip", "open", "f.write", "print", "line.strip().split.strip().split", "RawCollection.append", "f.write", "f.write", "f.write", "line.strip().split.strip", "print", "f.write", "f.write", "str", "str", "str"], "function", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.utils.print_message", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.infra.run.Run.print", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.utils.print_message", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.utils.print_message", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.utils.print_message", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.infra.run.Run.open", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.data.collection.Collection.enumerate", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.modeling.hf_colbert.HF_ColBERT.from_pretrained", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.infra.run.Run.open", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.infra.run.Run.print", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.infra.run.Run.print"], ["", "def", "main", "(", "args", ")", ":", "\n", "    ", "random", ".", "seed", "(", "12345", ")", "\n", "print_message", "(", "\"#> Starting...\"", ")", "\n", "\n", "letter", "=", "'w'", "if", "not", "args", ".", "use_wordpiece", "else", "'t'", "\n", "output_path", "=", "f'{args.input}.{letter}{args.nwords}_{args.overlap}'", "\n", "assert", "not", "os", ".", "path", ".", "exists", "(", "output_path", ")", "\n", "\n", "RawCollection", "=", "[", "]", "\n", "Collection", "=", "[", "]", "\n", "\n", "NumIllFormattedLines", "=", "0", "\n", "\n", "with", "open", "(", "args", ".", "input", ")", "as", "f", ":", "\n", "        ", "for", "line_idx", ",", "line", "in", "enumerate", "(", "f", ")", ":", "\n", "            ", "if", "line_idx", "%", "(", "100", "*", "1000", ")", "==", "0", ":", "\n", "                ", "print", "(", "line_idx", ",", "end", "=", "' '", ")", "\n", "\n", "", "title", ",", "url", "=", "None", ",", "None", "\n", "\n", "try", ":", "\n", "                ", "line", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "'\\t'", ")", "\n", "\n", "if", "args", ".", "format", "==", "Format1", ":", "\n", "                    ", "docid", ",", "doc", "=", "line", "\n", "", "elif", "args", ".", "format", "==", "Format2", ":", "\n", "                    ", "docid", ",", "doc", ",", "title", "=", "line", "\n", "", "elif", "args", ".", "format", "==", "Format3", ":", "\n", "                    ", "docid", ",", "url", ",", "title", ",", "doc", "=", "line", "\n", "\n", "", "RawCollection", ".", "append", "(", "(", "line_idx", ",", "docid", ",", "title", ",", "url", ",", "doc", ")", ")", "\n", "", "except", ":", "\n", "                ", "NumIllFormattedLines", "+=", "1", "\n", "\n", "if", "NumIllFormattedLines", "%", "1000", "==", "0", ":", "\n", "                    ", "print", "(", "f'\\n[{line_idx}] NumIllFormattedLines = {NumIllFormattedLines}\\n'", ")", "\n", "\n", "", "", "", "", "print", "(", ")", "\n", "print_message", "(", "\"# of documents is\"", ",", "len", "(", "RawCollection", ")", ",", "'\\n'", ")", "\n", "\n", "p", "=", "Pool", "(", "args", ".", "nthreads", ")", "\n", "\n", "print_message", "(", "\"#> Starting parallel processing...\"", ")", "\n", "\n", "tokenizer", "=", "None", "\n", "if", "args", ".", "use_wordpiece", ":", "\n", "        ", "from", "transformers", "import", "BertTokenizerFast", "\n", "tokenizer", "=", "BertTokenizerFast", ".", "from_pretrained", "(", "'bert-base-uncased'", ")", "\n", "\n", "", "process_page_params", "=", "[", "(", "args", ".", "nwords", ",", "args", ".", "overlap", ",", "tokenizer", ")", "]", "*", "len", "(", "RawCollection", ")", "\n", "Collection", "=", "p", ".", "map", "(", "process_page", ",", "zip", "(", "process_page_params", ",", "RawCollection", ")", ")", "\n", "\n", "print_message", "(", "f\"#> Writing to {output_path} ...\"", ")", "\n", "with", "open", "(", "output_path", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "line_idx", "=", "1", "\n", "\n", "if", "args", ".", "format", "==", "Format1", ":", "\n", "            ", "f", ".", "write", "(", "'\\t'", ".", "join", "(", "[", "'id'", ",", "'text'", "]", ")", "+", "'\\n'", ")", "\n", "", "elif", "args", ".", "format", "==", "Format2", ":", "\n", "            ", "f", ".", "write", "(", "'\\t'", ".", "join", "(", "[", "'id'", ",", "'text'", ",", "'title'", "]", ")", "+", "'\\n'", ")", "\n", "", "elif", "args", ".", "format", "==", "Format3", ":", "\n", "            ", "f", ".", "write", "(", "'\\t'", ".", "join", "(", "[", "'id'", ",", "'text'", ",", "'title'", ",", "'docid'", "]", ")", "+", "'\\n'", ")", "\n", "\n", "", "for", "docid", ",", "title", ",", "url", ",", "passages", "in", "Collection", ":", "\n", "            ", "for", "passage", "in", "passages", ":", "\n", "                ", "if", "args", ".", "format", "==", "Format1", ":", "\n", "                    ", "f", ".", "write", "(", "'\\t'", ".", "join", "(", "[", "str", "(", "line_idx", ")", ",", "passage", "]", ")", "+", "'\\n'", ")", "\n", "", "elif", "args", ".", "format", "==", "Format2", ":", "\n", "                    ", "f", ".", "write", "(", "'\\t'", ".", "join", "(", "[", "str", "(", "line_idx", ")", ",", "passage", ",", "title", "]", ")", "+", "'\\n'", ")", "\n", "", "elif", "args", ".", "format", "==", "Format3", ":", "\n", "                    ", "f", ".", "write", "(", "'\\t'", ".", "join", "(", "[", "str", "(", "line_idx", ")", ",", "passage", ",", "title", ",", "docid", "]", ")", "+", "'\\n'", ")", "\n", "\n", "", "line_idx", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.baleen.engine.Baleen.__init__": [[6, 10], ["load_collectionX"], "methods", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.loaders.load_collectionX"], ["    ", "def", "__init__", "(", "self", ",", "collectionX_path", ":", "str", ",", "searcher", ",", "condenser", ":", "Condenser", ")", ":", "\n", "        ", "self", ".", "collectionX", "=", "load_collectionX", "(", "collectionX_path", ")", "\n", "self", ".", "searcher", "=", "searcher", "\n", "self", ".", "condenser", "=", "condenser", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.baleen.engine.Baleen.search": [[11, 45], ["set", "range", "list", "set", "condenser.condense", "len", "zip", "ranking_.append", "len", "set.add", "collectionX.get", "searcher.search", "len"], "methods", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.config.core_config.CoreConfig.set", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.config.core_config.CoreConfig.set", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.condenser.condense.Condenser.condense", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.evaluation.metrics.Metrics.add", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.baleen.hop_searcher.HopSearcher.search"], ["", "def", "search", "(", "self", ",", "query", ",", "num_hops", ",", "depth", "=", "100", ",", "verbose", "=", "False", ")", ":", "\n", "        ", "assert", "depth", "%", "num_hops", "==", "0", ",", "f\"depth={depth} must be divisible by num_hops={num_hops}.\"", "\n", "k", "=", "depth", "//", "num_hops", "\n", "\n", "searcher", "=", "self", ".", "searcher", "\n", "condenser", "=", "self", ".", "condenser", "\n", "collectionX", "=", "self", ".", "collectionX", "\n", "\n", "facts", "=", "[", "]", "\n", "stage1_preds", "=", "None", "\n", "context", "=", "None", "\n", "\n", "pids_bag", "=", "set", "(", ")", "\n", "\n", "for", "hop_idx", "in", "range", "(", "0", ",", "num_hops", ")", ":", "\n", "            ", "ranking", "=", "list", "(", "zip", "(", "*", "searcher", ".", "search", "(", "query", ",", "context", "=", "context", ",", "k", "=", "depth", ")", ")", ")", "\n", "ranking_", "=", "[", "]", "\n", "\n", "facts_pids", "=", "set", "(", "[", "pid", "for", "pid", ",", "_", "in", "facts", "]", ")", "\n", "\n", "for", "pid", ",", "rank", ",", "score", "in", "ranking", ":", "\n", "# print(f'[{score}] \\t\\t {searcher.collection[pid]}')", "\n", "                ", "if", "len", "(", "ranking_", ")", "<", "k", "and", "pid", "not", "in", "facts_pids", ":", "\n", "                    ", "ranking_", ".", "append", "(", "pid", ")", "\n", "\n", "", "if", "len", "(", "pids_bag", ")", "<", "k", "*", "(", "hop_idx", "+", "1", ")", ":", "\n", "                    ", "pids_bag", ".", "add", "(", "pid", ")", "\n", "\n", "", "", "stage1_preds", ",", "facts", ",", "stage2_L3x", "=", "condenser", ".", "condense", "(", "query", ",", "backs", "=", "facts", ",", "ranking", "=", "ranking_", ")", "\n", "context", "=", "' [SEP] '", ".", "join", "(", "[", "collectionX", ".", "get", "(", "(", "pid", ",", "sid", ")", ",", "''", ")", "for", "pid", ",", "sid", "in", "facts", "]", ")", "\n", "\n", "", "assert", "len", "(", "pids_bag", ")", "==", "depth", "\n", "\n", "return", "stage2_L3x", ",", "pids_bag", ",", "stage1_preds", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.baleen.hop_searcher.HopSearcher.__init__": [[12, 17], ["colbert.infra.config.ColBERTConfig", "colbert.infra.config.ColBERTConfig.from_existing", "colbert.Searcher.__init__"], "methods", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.config.base_config.BaseConfig.from_existing", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.condenser.model.ElectraReader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "*", "args", ",", "config", "=", "None", ",", "interaction", "=", "'flipr'", ",", "**", "kw_args", ")", ":", "\n", "        ", "defaults", "=", "ColBERTConfig", "(", "query_maxlen", "=", "64", ",", "interaction", "=", "interaction", ")", "\n", "config", "=", "ColBERTConfig", ".", "from_existing", "(", "defaults", ",", "config", ")", "\n", "\n", "super", "(", ")", ".", "__init__", "(", "*", "args", ",", "config", "=", "config", ",", "**", "kw_args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.baleen.hop_searcher.HopSearcher.encode": [[18, 27], ["hop_searcher.HopSearcher.checkpoint.queryFromText", "type", "len", "type"], "methods", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.modeling.checkpoint.Checkpoint.queryFromText"], ["", "def", "encode", "(", "self", ",", "text", ":", "TextQueries", ",", "context", ":", "TextQueries", ")", ":", "\n", "        ", "queries", "=", "text", "if", "type", "(", "text", ")", "is", "list", "else", "[", "text", "]", "\n", "context", "=", "context", "if", "context", "is", "None", "or", "type", "(", "context", ")", "is", "list", "else", "[", "context", "]", "\n", "bsize", "=", "128", "if", "len", "(", "queries", ")", ">", "128", "else", "None", "\n", "\n", "self", ".", "checkpoint", ".", "query_tokenizer", ".", "query_maxlen", "=", "self", ".", "config", ".", "query_maxlen", "\n", "Q", "=", "self", ".", "checkpoint", ".", "queryFromText", "(", "queries", ",", "context", "=", "context", ",", "bsize", "=", "bsize", ",", "to_cpu", "=", "True", ")", "\n", "\n", "return", "Q", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.baleen.hop_searcher.HopSearcher.search": [[28, 30], ["hop_searcher.HopSearcher.dense_search", "hop_searcher.HopSearcher.encode"], "methods", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.colbert.searcher.Searcher.dense_search", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.baleen.hop_searcher.HopSearcher.encode"], ["", "def", "search", "(", "self", ",", "text", ":", "str", ",", "context", ":", "str", ",", "k", "=", "10", ")", ":", "\n", "        ", "return", "self", ".", "dense_search", "(", "self", ".", "encode", "(", "text", ",", "context", ")", ",", "k", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.baleen.hop_searcher.HopSearcher.search_all": [[31, 41], ["colbert.data.Queries.cast", "list", "hop_searcher.HopSearcher.encode", "hop_searcher.HopSearcher._search_all_Q", "colbert.data.Queries.cast", "colbert.data.Queries.cast.values", "list", "context.values"], "methods", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.data.examples.Examples.cast", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.baleen.hop_searcher.HopSearcher.encode", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.colbert.searcher.Searcher._search_all_Q", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.data.examples.Examples.cast", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.data.queries.Queries.values", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.data.queries.Queries.values"], ["", "def", "search_all", "(", "self", ",", "queries", ":", "TextQueries", ",", "context", ":", "TextQueries", ",", "k", "=", "10", ")", ":", "\n", "        ", "queries", "=", "Queries", ".", "cast", "(", "queries", ")", "\n", "context", "=", "Queries", ".", "cast", "(", "context", ")", "if", "context", "is", "not", "None", "else", "context", "\n", "\n", "queries_", "=", "list", "(", "queries", ".", "values", "(", ")", ")", "\n", "context_", "=", "list", "(", "context", ".", "values", "(", ")", ")", "if", "context", "is", "not", "None", "else", "context", "\n", "\n", "Q", "=", "self", ".", "encode", "(", "queries_", ",", "context_", ")", "\n", "\n", "return", "self", ".", "_search_all_Q", "(", "queries", ",", "Q", ",", "k", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.condenser.condense.Condenser.__init__": [[14, 22], ["condense.Condenser._load_model", "condense.Condenser._load_model", "condense.Condenser._setup_inference", "condense.Condenser._load_collection"], "methods", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.condenser.condense.Condenser._load_model", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.condenser.condense.Condenser._load_model", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.condenser.condense.Condenser._setup_inference", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.condenser.condense.Condenser._load_collection"], ["    ", "def", "__init__", "(", "self", ",", "collectionX_path", ",", "checkpointL1", ",", "checkpointL2", ",", "deviceL1", "=", "'cuda'", ",", "deviceL2", "=", "'cuda'", ")", ":", "\n", "        ", "self", ".", "modelL1", ",", "self", ".", "maxlenL1", "=", "self", ".", "_load_model", "(", "checkpointL1", ",", "deviceL1", ")", "\n", "self", ".", "modelL2", ",", "self", ".", "maxlenL2", "=", "self", ".", "_load_model", "(", "checkpointL2", ",", "deviceL2", ")", "\n", "\n", "assert", "self", ".", "maxlenL1", "==", "self", ".", "maxlenL2", ",", "\"Add support for different maxlens: use two tokenizers.\"", "\n", "\n", "self", ".", "amp", ",", "self", ".", "tokenizer", "=", "self", ".", "_setup_inference", "(", "self", ".", "maxlenL2", ")", "\n", "self", ".", "CollectionX", ",", "self", ".", "CollectionY", "=", "self", ".", "_load_collection", "(", "collectionX_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.condenser.condense.Condenser.condense": [[23, 28], ["condense.Condenser._stage1", "condense.Condenser._stage2"], "methods", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.condenser.condense.Condenser._stage1", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.condenser.condense.Condenser._stage2"], ["", "def", "condense", "(", "self", ",", "query", ",", "backs", ",", "ranking", ")", ":", "\n", "        ", "stage1_preds", "=", "self", ".", "_stage1", "(", "query", ",", "backs", ",", "ranking", ")", "\n", "stage2_preds", ",", "stage2_preds_L3x", "=", "self", ".", "_stage2", "(", "query", ",", "stage1_preds", ")", "\n", "\n", "return", "stage1_preds", ",", "stage2_preds", ",", "stage2_preds_L3x", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.condenser.condense.Condenser._load_model": [[29, 43], ["torch.load", "baleen.condenser.model.ElectraReader.from_pretrained", "colbert.utils.utils.load_checkpoint", "model.to.to.to", "model.to.to.eval"], "methods", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.codecs.residual_embeddings.ResidualEmbeddings.load", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.modeling.hf_colbert.HF_ColBERT.from_pretrained", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.utils.load_checkpoint"], ["", "def", "_load_model", "(", "self", ",", "path", ",", "device", ")", ":", "\n", "        ", "model", "=", "torch", ".", "load", "(", "path", ",", "map_location", "=", "'cpu'", ")", "\n", "ElectraModels", "=", "[", "'google/electra-base-discriminator'", ",", "'google/electra-large-discriminator'", "]", "\n", "assert", "model", "[", "'arguments'", "]", "[", "'model'", "]", "in", "ElectraModels", ",", "model", "[", "'arguments'", "]", "\n", "\n", "model", "=", "ElectraReader", ".", "from_pretrained", "(", "model", "[", "'arguments'", "]", "[", "'model'", "]", ")", "\n", "checkpoint", "=", "load_checkpoint", "(", "path", ",", "model", ")", "\n", "\n", "model", "=", "model", ".", "to", "(", "device", ")", "\n", "model", ".", "eval", "(", ")", "\n", "\n", "maxlen", "=", "checkpoint", "[", "'arguments'", "]", "[", "'maxlen'", "]", "\n", "\n", "return", "model", ",", "maxlen", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.condenser.condense.Condenser._setup_inference": [[44, 49], ["colbert.utils.amp.MixedPrecisionManager", "baleen.condenser.tokenization.AnswerAwareTokenizer"], "methods", ["None"], ["", "def", "_setup_inference", "(", "self", ",", "maxlen", ")", ":", "\n", "        ", "amp", "=", "MixedPrecisionManager", "(", "activated", "=", "True", ")", "\n", "tokenizer", "=", "AnswerAwareTokenizer", "(", "total_maxlen", "=", "maxlen", ")", "\n", "\n", "return", "amp", ",", "tokenizer", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.condenser.condense.Condenser._load_collection": [[50, 70], ["open", "enumerate", "ujson.loads", "enumerate", "type"], "methods", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.infra.run.Run.open", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.data.collection.Collection.enumerate", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.data.collection.Collection.enumerate"], ["", "def", "_load_collection", "(", "self", ",", "collectionX_path", ")", ":", "\n", "        ", "CollectionX", "=", "{", "}", "\n", "CollectionY", "=", "{", "}", "\n", "\n", "with", "open", "(", "collectionX_path", ")", "as", "f", ":", "\n", "            ", "for", "line_idx", ",", "line", "in", "enumerate", "(", "f", ")", ":", "\n", "                ", "line", "=", "ujson", ".", "loads", "(", "line", ")", "\n", "\n", "assert", "type", "(", "line", "[", "'text'", "]", ")", "is", "list", "\n", "assert", "line", "[", "'pid'", "]", "==", "line_idx", ",", "(", "line_idx", ",", "line", ")", "\n", "\n", "passage", "=", "[", "line", "[", "'title'", "]", "]", "+", "line", "[", "'text'", "]", "\n", "CollectionX", "[", "line_idx", "]", "=", "passage", "\n", "\n", "passage", "=", "[", "line", "[", "'title'", "]", "+", "' | '", "+", "sentence", "for", "sentence", "in", "line", "[", "'text'", "]", "]", "\n", "\n", "for", "idx", ",", "sentence", "in", "enumerate", "(", "passage", ")", ":", "\n", "                    ", "CollectionY", "[", "(", "line_idx", ",", "idx", ")", "]", "=", "sentence", "\n", "\n", "", "", "", "return", "CollectionX", ",", "CollectionY", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.condenser.condense.Condenser._stage1": [[71, 114], ["torch.inference_mode", "condense.Condenser.tokenizer.process", "colbert.utils.utils.flatten", "colbert.utils.utils.flatten", "model().float.view", "model().float.topk().indices.tolist", "actual_ranking.append", "passages.append", "condense.Condenser.amp.context", "model().float", "list", "f7", "model().float.size", "range", "zip", "list", "model", "model().float.size", "model().float.topk", "map", "condense.Condenser.encoding.to", "min", "len"], "methods", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.condenser.tokenization.AnswerAwareTokenizer.process", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.utils.flatten", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.utils.flatten", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.data.examples.Examples.tolist", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.infra.run.Run.context", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.utils.f7"], ["", "def", "_stage1", "(", "self", ",", "query", ",", "BACKS", ",", "ranking", ",", "TOPK", "=", "9", ")", ":", "\n", "        ", "model", "=", "self", ".", "modelL1", "\n", "\n", "with", "torch", ".", "inference_mode", "(", ")", ":", "\n", "            ", "backs", "=", "[", "self", ".", "CollectionY", "[", "(", "pid", ",", "sid", ")", "]", "for", "pid", ",", "sid", "in", "BACKS", "if", "(", "pid", ",", "sid", ")", "in", "self", ".", "CollectionY", "]", "\n", "backs", "=", "[", "query", "]", "+", "backs", "\n", "query", "=", "' # '", ".", "join", "(", "backs", ")", "\n", "\n", "# print(query)", "\n", "# print(backs)", "\n", "passages", "=", "[", "]", "\n", "actual_ranking", "=", "[", "]", "\n", "\n", "for", "pid", "in", "ranking", ":", "\n", "                ", "actual_ranking", ".", "append", "(", "pid", ")", "\n", "psg", "=", "self", ".", "CollectionX", "[", "pid", "]", "\n", "psg", "=", "' [MASK] '", ".", "join", "(", "psg", ")", "\n", "\n", "passages", ".", "append", "(", "psg", ")", "\n", "\n", "", "obj", "=", "self", ".", "tokenizer", ".", "process", "(", "[", "query", "]", ",", "passages", ",", "None", ")", "\n", "\n", "with", "self", ".", "amp", ".", "context", "(", ")", ":", "\n", "                ", "scores", "=", "model", "(", "obj", ".", "encoding", ".", "to", "(", "model", ".", "device", ")", ")", ".", "float", "(", ")", "\n", "\n", "", "pids", "=", "[", "[", "pid", "]", "*", "scores", ".", "size", "(", "1", ")", "for", "pid", "in", "actual_ranking", "]", "\n", "pids", "=", "flatten", "(", "pids", ")", "\n", "\n", "sids", "=", "[", "list", "(", "range", "(", "scores", ".", "size", "(", "1", ")", ")", ")", "for", "pid", "in", "actual_ranking", "]", "\n", "sids", "=", "flatten", "(", "sids", ")", "\n", "\n", "scores", "=", "scores", ".", "view", "(", "-", "1", ")", "\n", "\n", "topk", "=", "scores", ".", "topk", "(", "min", "(", "TOPK", ",", "len", "(", "scores", ")", ")", ")", ".", "indices", ".", "tolist", "(", ")", "\n", "topk_pids", "=", "[", "pids", "[", "idx", "]", "for", "idx", "in", "topk", "]", "\n", "topk_sids", "=", "[", "sids", "[", "idx", "]", "for", "idx", "in", "topk", "]", "\n", "\n", "preds", "=", "[", "(", "pid", ",", "sid", ")", "for", "pid", ",", "sid", "in", "zip", "(", "topk_pids", ",", "topk_sids", ")", "]", "\n", "\n", "pred_plus", "=", "BACKS", "+", "preds", "\n", "pred_plus", "=", "f7", "(", "list", "(", "map", "(", "tuple", ",", "pred_plus", ")", ")", ")", "[", ":", "TOPK", "]", "\n", "\n", "", "return", "pred_plus", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.condenser.condense.Condenser._stage2": [[115, 142], ["condense.Condenser.tokenizer.process", "condense.Condenser.amp.context", "model().float", "scores.view().tolist.view().tolist.view().tolist", "sorted", "f7", "len", "len", "model", "scores.view().tolist.view().tolist.view", "zip", "f7", "condense.Condenser.encoding.to", "min"], "methods", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.condenser.tokenization.AnswerAwareTokenizer.process", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.infra.run.Run.context", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.data.examples.Examples.tolist", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.utils.f7", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.utils.utils.f7"], ["", "def", "_stage2", "(", "self", ",", "query", ",", "preds", ")", ":", "\n", "        ", "model", "=", "self", ".", "modelL2", "\n", "\n", "psgX", "=", "[", "self", ".", "CollectionY", "[", "(", "pid", ",", "sid", ")", "]", "for", "pid", ",", "sid", "in", "preds", "if", "(", "pid", ",", "sid", ")", "in", "self", ".", "CollectionY", "]", "\n", "psg", "=", "' [MASK] '", ".", "join", "(", "[", "''", "]", "+", "psgX", ")", "\n", "passages", "=", "[", "psg", "]", "\n", "# print(passages)", "\n", "\n", "obj", "=", "self", ".", "tokenizer", ".", "process", "(", "[", "query", "]", ",", "passages", ",", "None", ")", "\n", "\n", "with", "self", ".", "amp", ".", "context", "(", ")", ":", "\n", "            ", "scores", "=", "model", "(", "obj", ".", "encoding", ".", "to", "(", "model", ".", "device", ")", ")", ".", "float", "(", ")", "\n", "scores", "=", "scores", ".", "view", "(", "-", "1", ")", ".", "tolist", "(", ")", "\n", "\n", "preds", "=", "[", "(", "score", ",", "(", "pid", ",", "sid", ")", ")", "for", "(", "pid", ",", "sid", ")", ",", "score", "in", "zip", "(", "preds", ",", "scores", ")", "]", "\n", "preds", "=", "sorted", "(", "preds", ",", "reverse", "=", "True", ")", "[", ":", "5", "]", "\n", "\n", "preds_L3x", "=", "[", "x", "for", "score", ",", "x", "in", "preds", "if", "score", ">", "min", "(", "0", ",", "preds", "[", "1", "]", "[", "0", "]", "-", "1e-10", ")", "]", "# Take at least 2!", "\n", "preds", "=", "[", "x", "for", "score", ",", "x", "in", "preds", "if", "score", ">", "0", "]", "\n", "\n", "earliest_pids", "=", "f7", "(", "[", "pid", "for", "pid", ",", "_", "in", "preds_L3x", "]", ")", "[", ":", "4", "]", "# Take at most 4 docs.", "\n", "preds_L3x", "=", "[", "(", "pid", ",", "sid", ")", "for", "pid", ",", "sid", "in", "preds_L3x", "if", "pid", "in", "earliest_pids", "]", "\n", "\n", "assert", "len", "(", "preds_L3x", ")", ">=", "2", "\n", "assert", "len", "(", "f7", "(", "[", "pid", "for", "pid", ",", "_", "in", "preds_L3x", "]", ")", ")", "<=", "4", "\n", "\n", "", "return", "preds", ",", "preds_L3x", "\n", "", "", ""]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.condenser.tokenization.AnswerAwareTokenizer.__init__": [[6, 10], ["transformers.ElectraTokenizerFast.from_pretrained"], "methods", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.modeling.hf_colbert.HF_ColBERT.from_pretrained"], ["    ", "def", "__init__", "(", "self", ",", "total_maxlen", ",", "bert_model", "=", "'google/electra-base-discriminator'", ")", ":", "\n", "        ", "self", ".", "total_maxlen", "=", "total_maxlen", "\n", "\n", "self", ".", "tok", "=", "ElectraTokenizerFast", ".", "from_pretrained", "(", "bert_model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.condenser.tokenization.AnswerAwareTokenizer.process": [[11, 13], ["tokenization.TokenizationObject"], "methods", ["None"], ["", "def", "process", "(", "self", ",", "questions", ",", "passages", ",", "all_answers", "=", "None", ",", "mask", "=", "None", ")", ":", "\n", "        ", "return", "TokenizationObject", "(", "self", ",", "questions", ",", "passages", ",", "all_answers", ",", "mask", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.condenser.tokenization.AnswerAwareTokenizer.tensorize": [[14, 21], ["tokenization.AnswerAwareTokenizer.tok().attention_mask.sum", "tokenization.AnswerAwareTokenizer.tok", "tokenization.AnswerAwareTokenizer.tok"], "methods", ["None"], ["", "def", "tensorize", "(", "self", ",", "questions", ",", "passages", ")", ":", "\n", "        ", "query_lengths", "=", "self", ".", "tok", "(", "questions", ",", "padding", "=", "'longest'", ",", "return_tensors", "=", "'pt'", ")", ".", "attention_mask", ".", "sum", "(", "-", "1", ")", "\n", "\n", "encoding", "=", "self", ".", "tok", "(", "questions", ",", "passages", ",", "padding", "=", "'longest'", ",", "truncation", "=", "'longest_first'", ",", "\n", "return_tensors", "=", "'pt'", ",", "max_length", "=", "self", ".", "total_maxlen", ",", "add_special_tokens", "=", "True", ")", "\n", "\n", "return", "encoding", ",", "query_lengths", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.condenser.tokenization.AnswerAwareTokenizer.get_all_candidates": [[22, 30], ["tokenization.AnswerAwareTokenizer.all_word_positions", "enumerate"], "methods", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.condenser.tokenization.AnswerAwareTokenizer.all_word_positions", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.data.collection.Collection.enumerate"], ["", "def", "get_all_candidates", "(", "self", ",", "encoding", ",", "index", ")", ":", "\n", "        ", "offsets", ",", "endpositions", "=", "self", ".", "all_word_positions", "(", "encoding", ",", "index", ")", "\n", "\n", "candidates", "=", "[", "(", "offset", ",", "endpos", ")", "\n", "for", "idx", ",", "offset", "in", "enumerate", "(", "offsets", ")", "\n", "for", "endpos", "in", "endpositions", "[", "idx", ":", "idx", "+", "10", "]", "]", "\n", "\n", "return", "candidates", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.condenser.tokenization.AnswerAwareTokenizer.all_word_positions": [[31, 40], ["encoding.word_ids", "enumerate", "len", "zip"], "methods", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.data.collection.Collection.enumerate"], ["", "def", "all_word_positions", "(", "self", ",", "encoding", ",", "index", ")", ":", "\n", "        ", "words", "=", "encoding", ".", "word_ids", "(", "index", ")", "\n", "offsets", "=", "[", "position", "\n", "for", "position", ",", "(", "last_word_number", ",", "current_word_number", ")", "in", "enumerate", "(", "zip", "(", "[", "-", "1", "]", "+", "words", ",", "words", ")", ")", "\n", "if", "last_word_number", "!=", "current_word_number", "]", "\n", "\n", "endpositions", "=", "offsets", "[", "1", ":", "]", "+", "[", "len", "(", "words", ")", "]", "\n", "\n", "return", "offsets", ",", "endpositions", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.condenser.tokenization.AnswerAwareTokenizer.characters_to_tokens": [[41, 63], ["range", "range", "encoding.char_to_token", "encoding.char_to_token", "len", "len", "len", "encoding.tokens"], "methods", ["None"], ["", "def", "characters_to_tokens", "(", "self", ",", "text", ",", "answers", ",", "encoding", ",", "index", ",", "offset", ",", "endpos", ")", ":", "\n", "# print(text, answers, encoding, index, offset, endpos)", "\n", "# endpos = endpos - 1", "\n", "\n", "        ", "for", "offset_", "in", "range", "(", "offset", ",", "len", "(", "text", ")", "+", "1", ")", ":", "\n", "            ", "tokens_offset", "=", "encoding", ".", "char_to_token", "(", "index", ",", "offset_", ")", "\n", "# print(f'tokens_offset = {tokens_offset}')", "\n", "if", "tokens_offset", "is", "not", "None", ":", "\n", "                ", "break", "\n", "\n", "", "", "for", "endpos_", "in", "range", "(", "endpos", ",", "len", "(", "text", ")", "+", "1", ")", ":", "\n", "            ", "tokens_endpos", "=", "encoding", ".", "char_to_token", "(", "index", ",", "endpos_", ")", "\n", "# print(f'tokens_endpos = {tokens_endpos}')", "\n", "if", "tokens_endpos", "is", "not", "None", ":", "\n", "                ", "break", "\n", "\n", "# None on whitespace!", "\n", "", "", "assert", "tokens_offset", "is", "not", "None", ",", "(", "text", ",", "answers", ",", "offset", ")", "\n", "# assert tokens_endpos is not None, (text, answers, endpos)", "\n", "tokens_endpos", "=", "tokens_endpos", "if", "tokens_endpos", "is", "not", "None", "else", "len", "(", "encoding", ".", "tokens", "(", "index", ")", ")", "\n", "\n", "return", "tokens_offset", ",", "tokens_endpos", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.condenser.tokenization.AnswerAwareTokenizer.tokens_to_answer": [[64, 79], ["text[].strip", "encoding.word_to_chars", "encoding.token_to_word", "encoding.word_to_chars", "encoding.token_to_word", "encoding.word_to_chars", "encoding.token_to_word"], "methods", ["None"], ["", "def", "tokens_to_answer", "(", "self", ",", "encoding", ",", "index", ",", "text", ",", "tokens_offset", ",", "tokens_endpos", ")", ":", "\n", "# print(encoding, index, text, tokens_offset, tokens_endpos, len(encoding.tokens(index)))", "\n", "\n", "        ", "char_offset", "=", "encoding", ".", "word_to_chars", "(", "index", ",", "encoding", ".", "token_to_word", "(", "index", ",", "tokens_offset", ")", ")", ".", "start", "\n", "\n", "try", ":", "\n", "            ", "char_next_offset", "=", "encoding", ".", "word_to_chars", "(", "index", ",", "encoding", ".", "token_to_word", "(", "index", ",", "tokens_endpos", ")", ")", ".", "start", "\n", "char_endpos", "=", "char_next_offset", "\n", "", "except", ":", "\n", "            ", "char_endpos", "=", "encoding", ".", "word_to_chars", "(", "index", ",", "encoding", ".", "token_to_word", "(", "index", ",", "tokens_endpos", "-", "1", ")", ")", ".", "end", "\n", "\n", "", "assert", "char_offset", "is", "not", "None", "\n", "assert", "char_endpos", "is", "not", "None", "\n", "\n", "return", "text", "[", "char_offset", ":", "char_endpos", "]", ".", "strip", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.condenser.tokenization.TokenizationObject.__init__": [[82, 101], ["tokenization.TokenizationObject._encode", "tokenization.TokenizationObject._candidize", "len", "type", "type", "len", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.condenser.tokenization.TokenizationObject._encode", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.condenser.tokenization.TokenizationObject._candidize"], ["    ", "def", "__init__", "(", "self", ",", "tokenizer", ":", "AnswerAwareTokenizer", ",", "questions", ",", "passages", ",", "answers", "=", "None", ",", "mask", "=", "None", ")", ":", "\n", "        ", "assert", "type", "(", "questions", ")", "is", "list", "and", "type", "(", "passages", ")", "is", "list", "\n", "assert", "len", "(", "questions", ")", "in", "[", "1", ",", "len", "(", "passages", ")", "]", "\n", "\n", "if", "mask", "is", "None", ":", "\n", "            ", "mask", "=", "[", "True", "for", "_", "in", "passages", "]", "\n", "\n", "", "self", ".", "mask", "=", "mask", "\n", "\n", "self", ".", "tok", "=", "tokenizer", "\n", "self", ".", "questions", "=", "questions", "if", "len", "(", "questions", ")", "==", "len", "(", "passages", ")", "else", "questions", "*", "len", "(", "passages", ")", "\n", "self", ".", "passages", "=", "passages", "\n", "self", ".", "answers", "=", "answers", "\n", "\n", "self", ".", "encoding", ",", "self", ".", "query_lengths", "=", "self", ".", "_encode", "(", ")", "\n", "self", ".", "passages_only_encoding", ",", "self", ".", "candidates", ",", "self", ".", "candidates_list", "=", "self", ".", "_candidize", "(", ")", "\n", "\n", "if", "answers", "is", "not", "None", ":", "\n", "            ", "self", ".", "gold_candidates", "=", "self", ".", "answers", "# self._answerize()", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.condenser.tokenization.TokenizationObject._encode": [[102, 104], ["tokenization.TokenizationObject.tok.tensorize"], "methods", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.condenser.tokenization.AnswerAwareTokenizer.tensorize"], ["", "", "def", "_encode", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "tok", ".", "tensorize", "(", "self", ".", "questions", ",", "self", ".", "passages", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.condenser.tokenization.TokenizationObject._candidize": [[105, 119], ["tokenization.TokenizationObject.tok.tok", "torch.tensor", "tokenization.TokenizationObject.tok.get_all_candidates", "len", "max", "torch.tensor.size", "torch.tensor.size", "tokenization.TokenizationObject.query_lengths.unsqueeze().unsqueeze", "range", "map", "len", "tokenization.TokenizationObject.query_lengths.unsqueeze", "len"], "methods", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.condenser.tokenization.AnswerAwareTokenizer.get_all_candidates"], ["", "def", "_candidize", "(", "self", ")", ":", "\n", "        ", "encoding", "=", "self", ".", "tok", ".", "tok", "(", "self", ".", "passages", ",", "add_special_tokens", "=", "False", ")", "\n", "\n", "all_candidates", "=", "[", "self", ".", "tok", ".", "get_all_candidates", "(", "encoding", ",", "index", ")", "for", "index", "in", "range", "(", "len", "(", "self", ".", "passages", ")", ")", "]", "\n", "\n", "bsize", ",", "maxcands", "=", "len", "(", "self", ".", "passages", ")", ",", "max", "(", "map", "(", "len", ",", "all_candidates", ")", ")", "\n", "all_candidates", "=", "[", "cands", "+", "[", "(", "-", "1", ",", "-", "1", ")", "]", "*", "(", "maxcands", "-", "len", "(", "cands", ")", ")", "for", "cands", "in", "all_candidates", "]", "\n", "\n", "candidates", "=", "torch", ".", "tensor", "(", "all_candidates", ")", "\n", "assert", "candidates", ".", "size", "(", ")", "==", "(", "bsize", ",", "maxcands", ",", "2", ")", ",", "(", "candidates", ".", "size", "(", ")", ",", "(", "bsize", ",", "maxcands", ",", "2", ")", ",", "(", "self", ".", "questions", ",", "self", ".", "passages", ")", ")", "\n", "\n", "candidates", "=", "candidates", "+", "self", ".", "query_lengths", ".", "unsqueeze", "(", "-", "1", ")", ".", "unsqueeze", "(", "-", "1", ")", "\n", "\n", "return", "encoding", ",", "candidates", ",", "all_candidates", "\n", "", "", ""]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.condenser.model.ElectraReader.__init__": [[8, 23], ["transformers.ElectraPreTrainedModel.__init__", "transformers.ElectraModel", "torch.Linear", "torch.Linear", "model.ElectraReader.init_weights", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.condenser.model.ElectraReader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "learn_labels", "=", "False", ")", ":", "\n", "        ", "super", "(", "ElectraReader", ",", "self", ")", ".", "__init__", "(", "config", ")", "\n", "\n", "self", ".", "electra", "=", "ElectraModel", "(", "config", ")", "\n", "\n", "self", ".", "relevance", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "1", ")", "\n", "\n", "if", "learn_labels", ":", "\n", "            ", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "2", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "1", ")", "\n", "\n", "", "self", ".", "init_weights", "(", ")", "\n", "\n", "self", ".", "learn_labels", "=", "learn_labels", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.condenser.model.ElectraReader.forward": [[24, 39], ["model.ElectraReader.linear", "model.ElectraReader.electra", "scores[].squeeze", "model.ElectraReader.squeeze", "model.ElectraReader._mask_2d_index"], "methods", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.modeling.base_colbert.BaseColBERT.linear", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.condenser.model.ElectraReader._mask_2d_index"], ["", "def", "forward", "(", "self", ",", "encoding", ")", ":", "\n", "        ", "outputs", "=", "self", ".", "electra", "(", "encoding", ".", "input_ids", ",", "\n", "attention_mask", "=", "encoding", ".", "attention_mask", ",", "\n", "token_type_ids", "=", "encoding", ".", "token_type_ids", ")", "[", "0", "]", "\n", "\n", "scores", "=", "self", ".", "linear", "(", "outputs", ")", "\n", "\n", "if", "self", ".", "learn_labels", ":", "\n", "            ", "scores", "=", "scores", "[", ":", ",", "0", "]", ".", "squeeze", "(", "1", ")", "\n", "", "else", ":", "\n", "            ", "scores", "=", "scores", ".", "squeeze", "(", "-", "1", ")", "\n", "candidates", "=", "(", "encoding", ".", "input_ids", "==", "103", ")", "\n", "scores", "=", "self", ".", "_mask_2d_index", "(", "scores", ",", "candidates", ")", "\n", "\n", "", "return", "scores", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.condenser.model.ElectraReader._mask_2d_index": [[40, 68], ["scores.size", "mask.size", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.unique", "torch.unique", "torch.unique", "torch.unique", "nnzs.max().item", "zip", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "scores.size", "mask.size", "scores.size", "mask.size", "rowidxs.tolist", "nnzs.tolist", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "nnzs.max", "range", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "float", "range", "len"], "methods", ["home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.data.examples.Examples.tolist", "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.data.examples.Examples.tolist"], ["", "def", "_mask_2d_index", "(", "self", ",", "scores", ",", "mask", ")", ":", "\n", "        ", "bsize", ",", "maxlen", "=", "scores", ".", "size", "(", ")", "\n", "bsize_", ",", "maxlen_", "=", "mask", ".", "size", "(", ")", "\n", "\n", "assert", "bsize", "==", "bsize_", ",", "(", "scores", ".", "size", "(", ")", ",", "mask", ".", "size", "(", ")", ")", "\n", "assert", "maxlen", "==", "maxlen_", ",", "(", "scores", ".", "size", "(", ")", ",", "mask", ".", "size", "(", ")", ")", "\n", "\n", "# Get flat scores corresponding to the True mask positions, with -inf at the end", "\n", "flat_scores", "=", "scores", "[", "mask", "]", "\n", "flat_scores", "=", "torch", ".", "cat", "(", "(", "flat_scores", ",", "torch", ".", "ones", "(", "1", ",", "device", "=", "self", ".", "device", ")", "*", "float", "(", "'-inf'", ")", ")", ")", "\n", "\n", "# Get 2D indexes", "\n", "rowidxs", ",", "nnzs", "=", "torch", ".", "unique", "(", "torch", ".", "nonzero", "(", "mask", ",", "as_tuple", "=", "False", ")", "[", ":", ",", "0", "]", ",", "return_counts", "=", "True", ")", "\n", "max_nnzs", "=", "nnzs", ".", "max", "(", ")", ".", "item", "(", ")", "\n", "\n", "rows", "=", "[", "[", "-", "1", "]", "*", "max_nnzs", "for", "_", "in", "range", "(", "bsize", ")", "]", "\n", "offset", "=", "0", "\n", "for", "rowidx", ",", "nnz", "in", "zip", "(", "rowidxs", ".", "tolist", "(", ")", ",", "nnzs", ".", "tolist", "(", ")", ")", ":", "\n", "            ", "rows", "[", "rowidx", "]", "=", "[", "offset", "+", "i", "for", "i", "in", "range", "(", "nnz", ")", "]", "\n", "rows", "[", "rowidx", "]", "+=", "[", "-", "1", "]", "*", "(", "max_nnzs", "-", "len", "(", "rows", "[", "rowidx", "]", ")", ")", "\n", "offset", "+=", "nnz", "\n", "\n", "", "indexes", "=", "torch", ".", "tensor", "(", "rows", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "# Index with the 2D indexes", "\n", "scores_2d", "=", "flat_scores", "[", "indexes", "]", "\n", "\n", "return", "scores_2d", "\n", "\n"]], "home.repos.pwc.inspect_result.stanford-futuredata_ColBERT.condenser.model.ElectraReader._2d_index": [[69, 80], ["embeddings.view.view.size", "positions.size", "embeddings.view.view.view", "positions.max", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange", "torch.arange", "torch.arange", "torch.arange"], "methods", ["None"], ["", "def", "_2d_index", "(", "self", ",", "embeddings", ",", "positions", ")", ":", "\n", "        ", "bsize", ",", "maxlen", ",", "hdim", "=", "embeddings", ".", "size", "(", ")", "\n", "bsize_", ",", "max_out", "=", "positions", ".", "size", "(", ")", "\n", "\n", "assert", "bsize", "==", "bsize_", "\n", "assert", "positions", ".", "max", "(", ")", "<", "maxlen", "\n", "\n", "embeddings", "=", "embeddings", ".", "view", "(", "bsize", "*", "maxlen", ",", "hdim", ")", "\n", "positions", "=", "positions", "+", "torch", ".", "arange", "(", "bsize", ",", "device", "=", "positions", ".", "device", ")", ".", "unsqueeze", "(", "-", "1", ")", "*", "maxlen", "\n", "\n", "return", "embeddings", "[", "positions", "]", "\n", "", "", ""]]}