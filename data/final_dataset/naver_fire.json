{"home.repos.pwc.inspect_result.naver_fire.None.evaluate.evaluate_demo": [[19, 39], ["torch.device", "torch.load", "fire_network.init_network().to", "fire_network.init_network().to.load_state_dict", "torchvision.transforms.Compose", "how.stages.evaluate.eval_asmk", "torch.device", "pathlib.Path", "net_path.is_dir", "fire_network.init_network", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "dict", "zip"], "function", ["home.repos.pwc.inspect_result.naver_fire.None.fire_network.init_network"], ["def", "evaluate_demo", "(", "demo_eval", ",", "evaluation", ",", "globals", ")", ":", "\n", "    ", "globals", "[", "\"device\"", "]", "=", "torch", ".", "device", "(", "\"cpu\"", ")", "\n", "if", "demo_eval", "[", "'gpu_id'", "]", "is", "not", "None", ":", "\n", "        ", "globals", "[", "\"device\"", "]", "=", "torch", ".", "device", "(", "(", "\"cuda:%s\"", "%", "demo_eval", "[", "'gpu_id'", "]", ")", ")", "\n", "\n", "# Handle net_path when directory", "\n", "", "net_path", "=", "Path", "(", "demo_eval", "[", "'exp_folder'", "]", ")", "/", "demo_eval", "[", "'net_path'", "]", "\n", "if", "net_path", ".", "is_dir", "(", ")", "and", "(", "net_path", "/", "\"epochs/model_best.pth\"", ")", ".", "exists", "(", ")", ":", "\n", "        ", "net_path", "=", "net_path", "/", "\"epochs/model_best.pth\"", "\n", "\n", "# Load net", "\n", "", "state", "=", "torch", ".", "load", "(", "net_path", ",", "map_location", "=", "'cpu'", ")", "\n", "state", "[", "'net_params'", "]", "[", "'pretrained'", "]", "=", "None", "# no need for imagenet pretrained model", "\n", "net", "=", "fire_network", ".", "init_network", "(", "**", "state", "[", "'net_params'", "]", ")", ".", "to", "(", "globals", "[", "'device'", "]", ")", "\n", "net", ".", "load_state_dict", "(", "state", "[", "'state_dict'", "]", ")", "\n", "globals", "[", "\"transform\"", "]", "=", "transforms", ".", "Compose", "(", "[", "transforms", ".", "ToTensor", "(", ")", ",", "transforms", ".", "Normalize", "(", "**", "dict", "(", "zip", "(", "[", "\"mean\"", ",", "\"std\"", "]", ",", "net", ".", "runtime", "[", "'mean_std'", "]", ")", ")", ")", "]", ")", "\n", "\n", "# Eval", "\n", "eval_asmk", "(", "net", ",", "evaluation", "[", "'inference'", "]", ",", "globals", ",", "**", "evaluation", "[", "'local_descriptor'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.naver_fire.None.evaluate.main": [[41, 84], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "how.utils.io_helpers.load_params", "vars().items", "io_helpers.load_params.pop", "globals[].mkdir", "examples.demo_how._overwrite_cirtorch_path", "globals[].mkdir", "how.utils.logging.init_logger", "how.utils.io_helpers.save_params", "dict", "how.utils.download.download_for_eval", "evaluate.evaluate_demo", "pathlib.Path().resolve", "str", "vars", "how.utils.io_helpers.dict_deep_set", "pathlib.Path", "arg.split", "pathlib.Path", "len"], "function", ["home.repos.pwc.inspect_result.naver_fire.None.evaluate.evaluate_demo"], ["", "def", "main", "(", "args", ")", ":", "\n", "    ", "\"\"\"Argument parsing and parameter preparation for the demo\"\"\"", "\n", "# Arguments", "\n", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "\"FIRe evaluation.\"", ")", "\n", "parser", ".", "add_argument", "(", "'parameters'", ",", "type", "=", "str", ",", "help", "=", "\"Relative path to a yaml file that contains parameters.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--experiment\"", ",", "\"-e\"", ",", "metavar", "=", "\"NAME\"", ",", "dest", "=", "\"experiment\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--model-load\"", ",", "\"-ml\"", ",", "metavar", "=", "\"PATH\"", ",", "dest", "=", "\"demo_eval.net_path\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--features-num\"", ",", "metavar", "=", "\"NUM\"", ",", "\n", "dest", "=", "\"evaluation.inference.features_num\"", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "\"--scales\"", ",", "metavar", "=", "\"SCALES\"", ",", "dest", "=", "\"evaluation.inference.scales\"", ",", "\n", "type", "=", "ast", ".", "literal_eval", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", "args", ")", "\n", "\n", "# Load yaml params", "\n", "package_root", "=", "Path", "(", "__file__", ")", ".", "resolve", "(", ")", ".", "parent", "\n", "parameters_path", "=", "args", ".", "parameters", "\n", "params", "=", "io_helpers", ".", "load_params", "(", "parameters_path", ")", "\n", "# Overlay with command-line arguments", "\n", "for", "arg", ",", "val", "in", "vars", "(", "args", ")", ".", "items", "(", ")", ":", "\n", "        ", "if", "arg", "not", "in", "{", "\"command\"", ",", "\"parameters\"", "}", "and", "val", "is", "not", "None", ":", "\n", "            ", "io_helpers", ".", "dict_deep_set", "(", "params", ",", "arg", ".", "split", "(", "\".\"", ")", ",", "val", ")", "\n", "\n", "# Resolve experiment name", "\n", "", "", "exp_name", "=", "params", ".", "pop", "(", "\"experiment\"", ")", "\n", "if", "not", "exp_name", ":", "\n", "        ", "exp_name", "=", "Path", "(", "parameters_path", ")", ".", "name", "[", ":", "-", "len", "(", "\".yml\"", ")", "]", "\n", "\n", "# Resolve data folders", "\n", "", "globals", "=", "{", "}", "\n", "globals", "[", "\"root_path\"", "]", "=", "(", "package_root", "/", "params", "[", "'demo_eval'", "]", "[", "'data_folder'", "]", ")", "\n", "globals", "[", "\"root_path\"", "]", ".", "mkdir", "(", "parents", "=", "True", ",", "exist_ok", "=", "True", ")", "\n", "_overwrite_cirtorch_path", "(", "str", "(", "globals", "[", "'root_path'", "]", ")", ")", "\n", "globals", "[", "\"exp_path\"", "]", "=", "(", "package_root", "/", "params", "[", "'demo_eval'", "]", "[", "'exp_folder'", "]", ")", "/", "exp_name", "\n", "globals", "[", "\"exp_path\"", "]", ".", "mkdir", "(", "parents", "=", "True", ",", "exist_ok", "=", "True", ")", "\n", "# Setup logging", "\n", "globals", "[", "\"logger\"", "]", "=", "logging", ".", "init_logger", "(", "globals", "[", "\"exp_path\"", "]", "/", "f\"eval.log\"", ")", "\n", "\n", "# Run demo", "\n", "io_helpers", ".", "save_params", "(", "globals", "[", "\"exp_path\"", "]", "/", "f\"eval_params.yml\"", ",", "params", ")", "\n", "params", "[", "'evaluation'", "]", "[", "'global_descriptor'", "]", "=", "dict", "(", "datasets", "=", "[", "]", ")", "\n", "download", ".", "download_for_eval", "(", "params", "[", "'evaluation'", "]", ",", "params", "[", "'demo_eval'", "]", ",", "DATASET_URL", ",", "globals", ")", "\n", "\n", "evaluate_demo", "(", "**", "params", ",", "globals", "=", "globals", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.naver_fire.None.fire_network.FIReNet.__init__": [[20, 24], ["how.networks.how_net.HOWNet.__init__"], "methods", ["home.repos.pwc.inspect_result.naver_fire.None.losses.SuperfeatureLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "features", ",", "attention", ",", "lit", ",", "dim_reduction", ",", "meta", ",", "runtime", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "features", ",", "attention", ",", "None", ",", "dim_reduction", ",", "meta", ",", "runtime", ")", "\n", "self", ".", "lit", "=", "lit", "\n", "self", ".", "return_global", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.naver_fire.None.fire_network.FIReNet.copy_excluding_dim_reduction": [[25, 29], ["fire_network.FIReNet.__class__"], "methods", ["None"], ["", "def", "copy_excluding_dim_reduction", "(", "self", ")", ":", "\n", "        ", "\"\"\"Return a copy of this network without the dim_reduction layer\"\"\"", "\n", "meta", "=", "{", "**", "self", ".", "meta", ",", "\"outputdim\"", ":", "self", ".", "meta", "[", "'backbone_dim'", "]", "}", "\n", "return", "self", ".", "__class__", "(", "self", ".", "features", ",", "self", ".", "attention", ",", "self", ".", "lit", ",", "None", ",", "meta", ",", "self", ".", "runtime", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.naver_fire.None.fire_network.FIReNet.copy_with_runtime": [[30, 33], ["fire_network.FIReNet.__class__"], "methods", ["None"], ["", "def", "copy_with_runtime", "(", "self", ",", "runtime", ")", ":", "\n", "        ", "\"\"\"Return a copy of this network with a different runtime dict\"\"\"", "\n", "return", "self", ".", "__class__", "(", "self", ".", "features", ",", "self", ".", "attention", ",", "self", ".", "lit", ",", "self", ".", "dim_reduction", ",", "self", ".", "meta", ",", "runtime", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.naver_fire.None.fire_network.FIReNet.parameter_groups": [[34, 42], ["parameters.append", "x.parameters", "fire_network.FIReNet.dim_reduction.parameters"], "methods", ["None"], ["", "def", "parameter_groups", "(", "self", ")", ":", "\n", "        ", "\"\"\"Return torch parameter groups\"\"\"", "\n", "layers", "=", "[", "self", ".", "features", ",", "self", ".", "attention", ",", "self", ".", "smoothing", ",", "self", ".", "lit", "]", "\n", "parameters", "=", "[", "{", "'params'", ":", "x", ".", "parameters", "(", ")", "}", "for", "x", "in", "layers", "if", "x", "is", "not", "None", "]", "\n", "if", "self", ".", "dim_reduction", ":", "\n", "# Do not update dimensionality reduction layer", "\n", "            ", "parameters", ".", "append", "(", "{", "'params'", ":", "self", ".", "dim_reduction", ".", "parameters", "(", ")", ",", "'lr'", ":", "0.0", "}", ")", "\n", "", "return", "parameters", "\n", "\n"]], "home.repos.pwc.inspect_result.naver_fire.None.fire_network.FIReNet.get_superfeatures": [[43, 65], ["torch.nn.functional.interpolate", "fire_network.FIReNet.features", "fire_network.FIReNet.lit", "fire_network.FIReNet.attention", "feats.append", "attns.append", "strengths.append", "fire_network.FIReNet.smoothing", "fire_network.FIReNet.dim_reduction"], "methods", ["None"], ["", "def", "get_superfeatures", "(", "self", ",", "x", ",", "*", ",", "scales", ")", ":", "\n", "        ", "\"\"\"\n        return a list of tuple (features, attentionmpas) where each is a list containing requested scales\n        features is a tensor BxDxNx1\n        attentionmaps is a tensor BxNxHxW\n        \"\"\"", "\n", "feats", "=", "[", "]", "\n", "attns", "=", "[", "]", "\n", "strengths", "=", "[", "]", "\n", "for", "s", "in", "scales", ":", "\n", "            ", "xs", "=", "nn", ".", "functional", ".", "interpolate", "(", "x", ",", "scale_factor", "=", "s", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "False", ")", "\n", "o", "=", "self", ".", "features", "(", "xs", ")", "\n", "o", ",", "attn", "=", "self", ".", "lit", "(", "o", ")", "\n", "strength", "=", "self", ".", "attention", "(", "o", ")", "\n", "if", "self", ".", "smoothing", ":", "\n", "                ", "o", "=", "self", ".", "smoothing", "(", "o", ")", "\n", "", "if", "self", ".", "dim_reduction", ":", "\n", "                ", "o", "=", "self", ".", "dim_reduction", "(", "o", ")", "\n", "", "feats", ".", "append", "(", "o", ")", "\n", "attns", ".", "append", "(", "attn", ")", "\n", "strengths", ".", "append", "(", "strength", ")", "\n", "", "return", "feats", ",", "attns", ",", "strengths", "\n", "\n"]], "home.repos.pwc.inspect_result.naver_fire.None.fire_network.FIReNet.forward": [[66, 70], ["fire_network.FIReNet.get_superfeatures", "fire_network.FIReNet.forward_global"], "methods", ["home.repos.pwc.inspect_result.naver_fire.None.fire_network.FIReNet.get_superfeatures", "home.repos.pwc.inspect_result.naver_fire.None.fire_network.FIReNet.forward_global"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "return_global", ":", "\n", "            ", "return", "self", ".", "forward_global", "(", "x", ",", "scales", "=", "self", ".", "runtime", "[", "'training_scales'", "]", ")", "\n", "", "return", "self", ".", "get_superfeatures", "(", "x", ",", "scales", "=", "self", ".", "runtime", "[", "'training_scales'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.naver_fire.None.fire_network.FIReNet.forward_global": [[71, 75], ["fire_network.FIReNet.get_superfeatures", "how.layers.functional.weighted_spoc"], "methods", ["home.repos.pwc.inspect_result.naver_fire.None.fire_network.FIReNet.get_superfeatures"], ["", "def", "forward_global", "(", "self", ",", "x", ",", "*", ",", "scales", ")", ":", "\n", "        ", "\"\"\"Return global descriptor\"\"\"", "\n", "feats", ",", "_", ",", "strengths", "=", "self", ".", "get_superfeatures", "(", "x", ",", "scales", "=", "scales", ")", "\n", "return", "HF", ".", "weighted_spoc", "(", "feats", ",", "strengths", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.naver_fire.None.fire_network.FIReNet.forward_local": [[76, 80], ["fire_network.FIReNet.get_superfeatures", "how.layers.functional.how_select_local"], "methods", ["home.repos.pwc.inspect_result.naver_fire.None.fire_network.FIReNet.get_superfeatures"], ["", "def", "forward_local", "(", "self", ",", "x", ",", "*", ",", "features_num", ",", "scales", ")", ":", "\n", "        ", "\"\"\"Return selected super features\"\"\"", "\n", "feats", ",", "_", ",", "strengths", "=", "self", ".", "get_superfeatures", "(", "x", ",", "scales", "=", "scales", ")", "\n", "return", "HF", ".", "how_select_local", "(", "feats", ",", "strengths", ",", "scales", "=", "scales", ",", "features_num", "=", "features_num", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.naver_fire.None.fire_network.init_network": [[81, 131], ["how.layers.attention.L2Attention", "lit.LocalfeatureIntegrationTransformer", "fire_network.FIReNet", "getattr", "architecture.startswith", "architecture.startswith", "architecture.startswith", "how.layers.dim_reduction.ConvDimReduction", "torch.nn.Sequential", "os.path.isfile", "torch.load", "FIReNet.load_state_dict", "all", "all", "list", "architecture.startswith", "net_in.features.children", "list", "architecture.startswith", "net_in.children", "list", "list", "ValueError", "net_in.features.children", "torch.nn.ReLU", "net_in.features.children"], "function", ["None"], ["", "", "def", "init_network", "(", "architecture", ",", "pretrained", ",", "skip_layer", ",", "dim_reduction", ",", "lit", ",", "runtime", ")", ":", "\n", "    ", "\"\"\"Initialize FIRe network\n    :param str architecture: Network backbone architecture (e.g. resnet18)\n    :param str pretrained: url of the pretrained model (None for using random initialization)\n    :param int skip_layer: How many layers of blocks should be skipped (from the end)\n    :param dict dim_reduction: Options for the dimensionality reduction layer\n    :param dict lit: Options for the lit layer\n    :param dict runtime: Runtime options to be stored in the network\n    :return FIRe: Initialized network\n    \"\"\"", "\n", "# Take convolutional layers as features, always ends with ReLU to make last activations non-negative", "\n", "net_in", "=", "getattr", "(", "torchvision", ".", "models", ",", "architecture", ")", "(", "pretrained", "=", "False", ")", "# use trained weights including the LIT module instead ", "\n", "if", "architecture", ".", "startswith", "(", "'alexnet'", ")", "or", "architecture", ".", "startswith", "(", "'vgg'", ")", ":", "\n", "        ", "features", "=", "list", "(", "net_in", ".", "features", ".", "children", "(", ")", ")", "[", ":", "-", "1", "]", "\n", "", "elif", "architecture", ".", "startswith", "(", "'resnet'", ")", ":", "\n", "        ", "features", "=", "list", "(", "net_in", ".", "children", "(", ")", ")", "[", ":", "-", "2", "]", "\n", "", "elif", "architecture", ".", "startswith", "(", "'densenet'", ")", ":", "\n", "        ", "features", "=", "list", "(", "net_in", ".", "features", ".", "children", "(", ")", ")", "+", "[", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "]", "\n", "", "elif", "architecture", ".", "startswith", "(", "'squeezenet'", ")", ":", "\n", "        ", "features", "=", "list", "(", "net_in", ".", "features", ".", "children", "(", ")", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'Unsupported or unknown architecture: {}!'", ".", "format", "(", "architecture", ")", ")", "\n", "\n", "", "if", "skip_layer", ">", "0", ":", "\n", "        ", "features", "=", "features", "[", ":", "-", "skip_layer", "]", "\n", "", "backbone_dim", "=", "imageretrievalnet", ".", "OUTPUT_DIM", "[", "architecture", "]", "//", "(", "2", "**", "skip_layer", ")", "\n", "\n", "att_layer", "=", "layers", ".", "attention", ".", "L2Attention", "(", ")", "\n", "\n", "lit_layer", "=", "LocalfeatureIntegrationTransformer", "(", "**", "lit", ",", "input_dim", "=", "backbone_dim", ")", "\n", "\n", "reduction_layer", "=", "None", "\n", "if", "dim_reduction", ":", "\n", "        ", "reduction_layer", "=", "layers", ".", "dim_reduction", ".", "ConvDimReduction", "(", "**", "dim_reduction", ",", "input_dim", "=", "lit", "[", "'dim'", "]", ")", "\n", "\n", "", "meta", "=", "{", "\n", "\"architecture\"", ":", "architecture", ",", "\n", "\"backbone_dim\"", ":", "lit", "[", "'dim'", "]", ",", "\n", "\"outputdim\"", ":", "reduction_layer", ".", "out_channels", "if", "dim_reduction", "else", "lit", "[", "'dim'", "]", ",", "\n", "\"corercf_size\"", ":", "CORERCF_SIZE", "[", "architecture", "]", "//", "(", "2", "**", "skip_layer", ")", ",", "\n", "}", "\n", "net", "=", "FIReNet", "(", "nn", ".", "Sequential", "(", "*", "features", ")", ",", "att_layer", ",", "lit_layer", ",", "reduction_layer", ",", "meta", ",", "runtime", ")", "\n", "\n", "if", "pretrained", "is", "not", "None", ":", "\n", "        ", "assert", "os", ".", "path", ".", "isfile", "(", "pretrained", ")", ",", "pretrained", "\n", "ckpt", "=", "torch", ".", "load", "(", "pretrained", ",", "map_location", "=", "'cpu'", ")", "\n", "missing", ",", "unexpected", "=", "net", ".", "load_state_dict", "(", "ckpt", "[", "'state_dict'", "]", ",", "strict", "=", "False", ")", "\n", "assert", "all", "(", "[", "'dim_reduction'", "in", "a", "for", "a", "in", "missing", "]", ")", ",", "\"Loading did not go well\"", "\n", "assert", "all", "(", "[", "'fc'", "in", "a", "for", "a", "in", "unexpected", "]", ")", ",", "\"Loading did not go well\"", "\n", "", "return", "net", "\n", "", ""]], "home.repos.pwc.inspect_result.naver_fire.None.train.train": [[27, 82], ["how.stages.train.set_seed", "torch.device", "fire_network.init_network().to", "torchvision.transforms.Compose", "train.initialize_training", "how.stages.train.Validation", "range", "logger.info", "torch.device", "how.utils.logging.LoggingStopwatch", "how.stages.train.initialize_dim_reduction", "fire_network.init_network().to.parameter_groups", "how.stages.train.set_seed", "time.time", "train.train_epoch", "how.stages.train.Validation.add_train_loss", "how.stages.train.Validation.validate", "scheduler.step", "how.utils.io_helpers.save_checkpoint", "logger.info", "fire_network.init_network", "torchvision.transforms.RandomHorizontalFlip", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "fire_network.init_network().to.state_dict", "optimizer.state_dict", "dict", "zip", "time.time"], "function", ["home.repos.pwc.inspect_result.naver_fire.None.train.initialize_training", "home.repos.pwc.inspect_result.naver_fire.None.fire_network.FIReNet.parameter_groups", "home.repos.pwc.inspect_result.naver_fire.None.train.train_epoch", "home.repos.pwc.inspect_result.naver_fire.None.fire_network.init_network"], ["def", "train", "(", "demo_train", ",", "training", ",", "validation", ",", "model", ",", "globals", ")", ":", "\n", "    ", "\"\"\"Demo training a network\n    :param dict demo_train: Demo-related options\n    :param dict training: Training options\n    :param dict validation: Validation options\n    :param dict model: Model options\n    :param dict globals: Global options\n    \"\"\"", "\n", "logger", "=", "globals", "[", "\"logger\"", "]", "\n", "(", "globals", "[", "\"exp_path\"", "]", "/", "\"epochs\"", ")", ".", "mkdir", "(", "exist_ok", "=", "True", ")", "\n", "if", "(", "globals", "[", "\"exp_path\"", "]", "/", "f\"epochs/model_epoch{training['epochs']}.pth\"", ")", ".", "exists", "(", ")", ":", "\n", "        ", "logger", ".", "info", "(", "\"Skipping network training, already trained\"", ")", "\n", "return", "\n", "\n", "# Global setup", "\n", "", "set_seed", "(", "0", ")", "\n", "globals", "[", "\"device\"", "]", "=", "torch", ".", "device", "(", "\"cpu\"", ")", "\n", "if", "demo_train", "[", "'gpu_id'", "]", "is", "not", "None", ":", "\n", "        ", "globals", "[", "\"device\"", "]", "=", "torch", ".", "device", "(", "(", "\"cuda:%s\"", "%", "demo_train", "[", "'gpu_id'", "]", ")", ")", "\n", "\n", "# Initialize network", "\n", "", "net", "=", "fire_network", ".", "init_network", "(", "**", "model", ")", ".", "to", "(", "globals", "[", "\"device\"", "]", ")", "\n", "globals", "[", "\"transform\"", "]", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "RandomHorizontalFlip", "(", "p", "=", "training", "[", "'transform'", "]", "[", "'flip_prob'", "]", ")", ",", "transforms", ".", "ToTensor", "(", ")", ",", "transforms", ".", "Normalize", "(", "**", "dict", "(", "zip", "(", "[", "\"mean\"", ",", "\"std\"", "]", ",", "net", ".", "runtime", "[", "'mean_std'", "]", ")", ")", ")", "]", ")", "\n", "\n", "with", "logging", ".", "LoggingStopwatch", "(", "\"initializing network whitening\"", ",", "logger", ".", "info", ",", "logger", ".", "debug", ")", ":", "\n", "        ", "initialize_dim_reduction", "(", "net", ",", "globals", ",", "**", "training", "[", "'initialize_dim_reduction'", "]", ")", "\n", "\n", "# Initialize training", "\n", "", "optimizer", ",", "scheduler", ",", "criterion_superfeatures", ",", "criterion_attns", ",", "train_loader", "=", "initialize_training", "(", "net", ".", "parameter_groups", "(", "training", "[", "\"optimizer\"", "]", ")", ",", "training", ",", "globals", ")", "\n", "validation", "=", "Validation", "(", "validation", ",", "globals", ")", "\n", "\n", "for", "epoch", "in", "range", "(", "training", "[", "'epochs'", "]", ")", ":", "\n", "        ", "epoch1", "=", "epoch", "+", "1", "\n", "set_seed", "(", "epoch1", ")", "\n", "\n", "time0", "=", "time", ".", "time", "(", ")", "\n", "train_loss", "=", "train_epoch", "(", "train_loader", ",", "net", ",", "globals", ",", "criterion_superfeatures", ",", "\n", "criterion_attns", ",", "optimizer", ",", "epoch1", ")", "\n", "\n", "validation", ".", "add_train_loss", "(", "train_loss", ",", "epoch1", ")", "\n", "validation", ".", "validate", "(", "net", ",", "epoch1", ")", "\n", "\n", "scheduler", ".", "step", "(", ")", "\n", "\n", "io_helpers", ".", "save_checkpoint", "(", "{", "\n", "'epoch'", ":", "epoch1", ",", "'meta'", ":", "net", ".", "meta", ",", "'state_dict'", ":", "net", ".", "state_dict", "(", ")", ",", "\n", "'optimizer'", ":", "optimizer", ".", "state_dict", "(", ")", ",", "'best_score'", ":", "validation", ".", "best_score", "[", "1", "]", ",", "\n", "'scores'", ":", "validation", ".", "scores", ",", "'net_params'", ":", "model", ",", "'_version'", ":", "'fire/2021'", ",", "\n", "}", ",", "validation", ".", "best_score", "[", "0", "]", "==", "epoch1", ",", "epoch1", "==", "training", "[", "'epochs'", "]", ",", "globals", "[", "\"exp_path\"", "]", "/", "\"epochs\"", ")", "\n", "\n", "logger", ".", "info", "(", "f\"Epoch {epoch1} finished in {time.time() - time0:.1f}s\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.naver_fire.None.train.train_epoch": [[83, 136], ["how.utils.data_helpers.AverageMeter", "how.utils.data_helpers.AverageMeter", "how.utils.data_helpers.AverageMeter", "how.utils.data_helpers.AverageMeter", "how.utils.data_helpers.AverageMeter", "train_loader.dataset.create_epoch_tuples", "net.train", "time.time", "enumerate", "data_helpers.AverageMeter.update", "optimizer.zero_grad", "len", "zip", "optimizer.step", "data_helpers.AverageMeter.update", "time.time", "range", "criterion_attns", "criterion_superfeatures", "loss.backward", "data_helpers.AverageMeter.update", "data_helpers.AverageMeter.update", "data_helpers.AverageMeter.update", "logger.info", "time.time", "net", "superfeatures.append", "attns.append", "trg.to", "criterion_superfeatures.item", "criterion_attns.item", "loss.item", "time.time", "len", "inp[].to", "attn[].squeeze", "len", "len", "sfs[].squeeze", "len"], "function", ["home.repos.pwc.inspect_result.naver_fire.None.train.train"], ["", "", "def", "train_epoch", "(", "train_loader", ",", "net", ",", "globals", ",", "criterion_superfeatures", ",", "criterion_attns", ",", "optimizer", ",", "epoch1", ")", ":", "\n", "    ", "\"\"\"Train for one epoch\"\"\"", "\n", "logger", "=", "globals", "[", "'logger'", "]", "\n", "batch_time", "=", "data_helpers", ".", "AverageMeter", "(", ")", "\n", "data_time", "=", "data_helpers", ".", "AverageMeter", "(", ")", "\n", "losses", "=", "data_helpers", ".", "AverageMeter", "(", ")", "\n", "losses_super", "=", "data_helpers", ".", "AverageMeter", "(", ")", "\n", "losses_attn", "=", "data_helpers", ".", "AverageMeter", "(", ")", "\n", "\n", "# Prepare epoch", "\n", "net", ".", "return_global", "=", "True", "\n", "train_loader", ".", "dataset", ".", "create_epoch_tuples", "(", "net", ")", "\n", "net", ".", "return_global", "=", "False", "\n", "net", ".", "train", "(", ")", "\n", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "for", "i", ",", "(", "inpt", ",", "target", ")", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "        ", "data_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "num_images", "=", "len", "(", "inpt", "[", "0", "]", ")", "# number of images per tuple", "\n", "for", "inp", ",", "trg", "in", "zip", "(", "inpt", ",", "target", ")", ":", "\n", "            ", "superfeatures", "=", "[", "]", "\n", "attns", "=", "[", "]", "\n", "for", "imi", "in", "range", "(", "num_images", ")", ":", "\n", "                ", "sfs", ",", "attn", ",", "_", "=", "net", "(", "inp", "[", "imi", "]", ".", "to", "(", "globals", "[", "\"device\"", "]", ")", ")", "\n", "assert", "len", "(", "sfs", ")", "==", "1", "and", "len", "(", "attn", ")", "==", "1", ",", "\"Only one scale at a time during training\"", "\n", "superfeatures", ".", "append", "(", "sfs", "[", "0", "]", ".", "squeeze", "(", ")", ".", "T", ")", "\n", "attns", ".", "append", "(", "attn", "[", "0", "]", ".", "squeeze", "(", ")", ")", "\n", "\n", "", "loss_attn", "=", "criterion_attns", "(", "attns", ")", "\n", "loss_super", "=", "criterion_superfeatures", "(", "superfeatures", ",", "trg", ".", "to", "(", "globals", "[", "\"device\"", "]", ")", ")", "\n", "\n", "loss", "=", "loss_attn", "+", "loss_super", "\n", "loss", ".", "backward", "(", ")", "\n", "\n", "losses_super", ".", "update", "(", "loss_super", ".", "item", "(", ")", ")", "\n", "losses_attn", ".", "update", "(", "loss_attn", ".", "item", "(", ")", ")", "\n", "losses", ".", "update", "(", "loss", ".", "item", "(", ")", ")", "\n", "\n", "", "optimizer", ".", "step", "(", ")", "\n", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "if", "(", "i", "+", "1", ")", "%", "20", "==", "0", "or", "i", "==", "0", "or", "(", "i", "+", "1", ")", "==", "len", "(", "train_loader", ")", ":", "\n", "            ", "logger", ".", "info", "(", "f'>> Train: [{epoch1}][{i+1}/{len(train_loader)}]\\t'", "f'Time {batch_time.val:.3f} ({batch_time.avg:.3f})\\t'", "f'Data {data_time.val:.3f} ({data_time.avg:.3f})\\t'", "f'Loss {losses.val:.4f} ({losses.avg:.4f})\\t'", "f'LossSuper {losses_super.val:.4f} ({losses_super.avg:.4f})\\t'", "f'LossAttn {losses_attn.val:.4f} ({losses_attn.avg:.4f})\\t'", ")", "\n", "\n", "", "", "return", "losses", ".", "avg", "\n", "\n"]], "home.repos.pwc.inspect_result.naver_fire.None.train.initialize_training": [[138, 160], ["torch.optim.Adam", "torch.optim.lr_scheduler.ExponentialLR", "losses.SuperfeatureLoss().to", "losses.DecorrelationAttentionLoss().to", "cirtorch.datasets.traindataset.TuplesDataset", "torch.utils.data.DataLoader", "training[].keys", "training[].keys", "training[].keys", "training[].keys", "training[].keys", "training[].keys", "losses.SuperfeatureLoss", "losses.DecorrelationAttentionLoss"], "function", ["None"], ["", "def", "initialize_training", "(", "net_parameters", ",", "training", ",", "globals", ")", ":", "\n", "    ", "\"\"\"Initialize classes necessary for training\"\"\"", "\n", "# Need to check for keys because of defaults", "\n", "assert", "training", "[", "'optimizer'", "]", ".", "keys", "(", ")", "==", "{", "\"lr\"", ",", "\"weight_decay\"", "}", "\n", "assert", "training", "[", "'lr_scheduler'", "]", ".", "keys", "(", ")", "==", "{", "\"gamma\"", "}", "\n", "assert", "training", "[", "'loss_superfeature'", "]", ".", "keys", "(", ")", "==", "{", "\"margin\"", ",", "\"weight\"", "}", "\n", "assert", "training", "[", "'loss_attention'", "]", ".", "keys", "(", ")", "==", "{", "\"weight\"", "}", "\n", "assert", "training", "[", "'dataset'", "]", ".", "keys", "(", ")", "==", "{", "\"name\"", ",", "\"mode\"", ",", "\"imsize\"", ",", "\"nnum\"", ",", "\"qsize\"", ",", "\"poolsize\"", "}", "\n", "assert", "training", "[", "'loader'", "]", ".", "keys", "(", ")", "==", "{", "\"batch_size\"", "}", "\n", "\n", "# Adam params:  {'lr': 3e-05, 'weight_decay': 0.0001}", "\n", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "net_parameters", ",", "**", "training", "[", "\"optimizer\"", "]", ")", "\n", "# scheduler: {'gamma': 0.99}", "\n", "scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "ExponentialLR", "(", "optimizer", ",", "**", "training", "[", "\"lr_scheduler\"", "]", ")", "\n", "# {'margin': 1.1, 'weight': 0.02}", "\n", "criterion_superfeatures", "=", "SuperfeatureLoss", "(", "**", "training", "[", "\"loss_superfeature\"", "]", ")", ".", "to", "(", "globals", "[", "\"device\"", "]", ")", "\n", "criterion_attns", "=", "DecorrelationAttentionLoss", "(", "**", "training", "[", "'loss_attention'", "]", ")", ".", "to", "(", "globals", "[", "'device'", "]", ")", "\n", "train_dataset", "=", "TuplesDataset", "(", "**", "training", "[", "'dataset'", "]", ",", "transform", "=", "globals", "[", "\"transform\"", "]", ")", "\n", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "train_dataset", ",", "**", "training", "[", "'loader'", "]", ",", "pin_memory", "=", "True", ",", "drop_last", "=", "True", ",", "shuffle", "=", "True", ",", "collate_fn", "=", "collate_tuples", ",", "num_workers", "=", "NUM_WORKERS", ")", "\n", "return", "optimizer", ",", "scheduler", ",", "criterion_superfeatures", ",", "criterion_attns", ",", "train_loader", "\n", "\n"]], "home.repos.pwc.inspect_result.naver_fire.None.train.main": [[161, 204], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "how.utils.io_helpers.load_params", "vars().items", "io_helpers.load_params.pop", "globals[].mkdir", "examples.demo_how._overwrite_cirtorch_path", "globals[].mkdir", "how.utils.logging.init_logger", "how.utils.io_helpers.save_params", "how.utils.download.download_for_train", "[].startswith", "train.train", "pathlib.Path().resolve", "str", "os.path.basename", "how.utils.io_helpers.download_files", "vars", "how.utils.io_helpers.dict_deep_set", "pathlib.Path", "arg.split", "pathlib.Path", "os.path.dirname", "len"], "function", ["home.repos.pwc.inspect_result.naver_fire.None.train.train"], ["", "def", "main", "(", "args", ")", ":", "\n", "    ", "\"\"\"Argument parsing and parameter preparation for the demo\"\"\"", "\n", "# Arguments", "\n", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "\"FIRe training.\"", ")", "\n", "parser", ".", "add_argument", "(", "'parameters'", ",", "type", "=", "str", ",", "help", "=", "\"Relative path to a yaml file that contains parameters.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--experiment\"", ",", "\"-e\"", ",", "metavar", "=", "\"NAME\"", ",", "dest", "=", "\"experiment\"", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", "args", ")", "\n", "\n", "# Load yaml params", "\n", "package_root", "=", "Path", "(", "__file__", ")", ".", "resolve", "(", ")", ".", "parent", "\n", "parameters_path", "=", "args", ".", "parameters", "\n", "params", "=", "io_helpers", ".", "load_params", "(", "parameters_path", ")", "\n", "# Overlay with command-line arguments", "\n", "for", "arg", ",", "val", "in", "vars", "(", "args", ")", ".", "items", "(", ")", ":", "\n", "        ", "if", "arg", "not", "in", "{", "\"command\"", ",", "\"parameters\"", "}", "and", "val", "is", "not", "None", ":", "\n", "            ", "io_helpers", ".", "dict_deep_set", "(", "params", ",", "arg", ".", "split", "(", "\".\"", ")", ",", "val", ")", "\n", "\n", "# Resolve experiment name", "\n", "", "", "exp_name", "=", "params", ".", "pop", "(", "\"experiment\"", ")", "\n", "if", "not", "exp_name", ":", "\n", "        ", "exp_name", "=", "Path", "(", "parameters_path", ")", ".", "name", "[", ":", "-", "len", "(", "\".yml\"", ")", "]", "\n", "\n", "# Resolve data folders", "\n", "", "globals", "=", "{", "}", "\n", "globals", "[", "\"root_path\"", "]", "=", "(", "package_root", "/", "params", "[", "'demo_train'", "]", "[", "'data_folder'", "]", ")", "\n", "globals", "[", "\"root_path\"", "]", ".", "mkdir", "(", "parents", "=", "True", ",", "exist_ok", "=", "True", ")", "\n", "_overwrite_cirtorch_path", "(", "str", "(", "globals", "[", "'root_path'", "]", ")", ")", "\n", "globals", "[", "\"exp_path\"", "]", "=", "(", "package_root", "/", "params", "[", "'demo_train'", "]", "[", "'exp_folder'", "]", ")", "/", "exp_name", "\n", "globals", "[", "\"exp_path\"", "]", ".", "mkdir", "(", "parents", "=", "True", ",", "exist_ok", "=", "True", ")", "\n", "# Setup logging", "\n", "globals", "[", "\"logger\"", "]", "=", "logging", ".", "init_logger", "(", "globals", "[", "\"exp_path\"", "]", "/", "f\"train.log\"", ")", "\n", "\n", "# Run training", "\n", "io_helpers", ".", "save_params", "(", "globals", "[", "\"exp_path\"", "]", "/", "f\"train_params.yml\"", ",", "params", ")", "\n", "download", ".", "download_for_train", "(", "params", "[", "'validation'", "]", ",", "DATASET_URL", ",", "globals", ")", "\n", "if", "params", "[", "'model'", "]", "[", "'pretrained'", "]", ".", "startswith", "(", "'http'", ")", ":", "\n", "# additionally download imagenet pretrained model", "\n", "        ", "net_name", "=", "os", ".", "path", ".", "basename", "(", "params", "[", "'model'", "]", "[", "'pretrained'", "]", ")", "\n", "io_helpers", ".", "download_files", "(", "[", "net_name", "]", ",", "globals", "[", "'root_path'", "]", "/", "\"pretraining\"", ",", "\n", "os", ".", "path", ".", "dirname", "(", "params", "[", "'model'", "]", "[", "'pretrained'", "]", ")", "+", "\"/\"", ",", "\n", "logfunc", "=", "globals", "[", "\"logger\"", "]", ".", "info", ")", "\n", "params", "[", "'model'", "]", "[", "'pretrained'", "]", "=", "globals", "[", "'root_path'", "]", "/", "\"pretraining\"", "/", "net_name", "\n", "", "train", "(", "**", "params", ",", "globals", "=", "globals", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.naver_fire.None.lit.LocalfeatureIntegrationTransformer.__init__": [[10, 38], ["torch.nn.Module.__init__", "torch.nn.Parameter", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "torch.nn.Softmax", "torch.nn.LayerNorm", "torch.nn.Sequential", "torch.randn", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.naver_fire.None.losses.SuperfeatureLoss.__init__"], ["def", "__init__", "(", "self", ",", "T", ",", "N", ",", "input_dim", ",", "dim", ")", ":", "\n", "        ", "\"\"\"\n        T: number of iterations\n        N: number of SuperFeatures\n        input_dim: dimension of input local features\n        dim: dimension of SuperFeatures\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "T", "=", "T", "\n", "self", ".", "N", "=", "N", "\n", "self", ".", "input_dim", "=", "input_dim", "\n", "self", ".", "dim", "=", "dim", "\n", "# learnable initialization", "\n", "self", ".", "templates_init", "=", "nn", ".", "Parameter", "(", "torch", ".", "randn", "(", "1", ",", "self", ".", "N", ",", "dim", ")", ")", "\n", "# qkv", "\n", "self", ".", "project_q", "=", "nn", ".", "Linear", "(", "dim", ",", "dim", ",", "bias", "=", "False", ")", "\n", "self", ".", "project_k", "=", "nn", ".", "Linear", "(", "input_dim", ",", "dim", ",", "bias", "=", "False", ")", "\n", "self", ".", "project_v", "=", "nn", ".", "Linear", "(", "input_dim", ",", "dim", ",", "bias", "=", "False", ")", "\n", "# layer norms", "\n", "self", ".", "norm_inputs", "=", "nn", ".", "LayerNorm", "(", "input_dim", ")", "\n", "self", ".", "norm_templates", "=", "nn", ".", "LayerNorm", "(", "dim", ")", "\n", "# for the normalization", "\n", "self", ".", "softmax", "=", "nn", ".", "Softmax", "(", "dim", "=", "-", "1", ")", "\n", "self", ".", "scale", "=", "dim", "**", "-", "0.5", "\n", "# mlp", "\n", "self", ".", "norm_mlp", "=", "nn", ".", "LayerNorm", "(", "dim", ")", "\n", "mlp_dim", "=", "dim", "//", "2", "\n", "self", ".", "mlp", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "dim", ",", "mlp_dim", ")", ",", "nn", ".", "ReLU", "(", ")", ",", "nn", ".", "Linear", "(", "mlp_dim", ",", "dim", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.naver_fire.None.lit.LocalfeatureIntegrationTransformer.forward": [[40, 87], ["lit.LocalfeatureIntegrationTransformer.size", "lit.LocalfeatureIntegrationTransformer.reshape().permute", "lit.LocalfeatureIntegrationTransformer.norm_inputs", "lit.LocalfeatureIntegrationTransformer.project_k", "lit.LocalfeatureIntegrationTransformer.project_v", "torch.repeat_interleave", "range", "lit.LocalfeatureIntegrationTransformer.permute().view", "lit.LocalfeatureIntegrationTransformer.norm_templates", "lit.LocalfeatureIntegrationTransformer.project_q", "torch.einsum", "lit.LocalfeatureIntegrationTransformer.softmax", "lit.LocalfeatureIntegrationTransformer.permute", "lit.LocalfeatureIntegrationTransformer.reshape", "lit.LocalfeatureIntegrationTransformer.sum", "torch.einsum", "lit.LocalfeatureIntegrationTransformer.mlp", "lit.LocalfeatureIntegrationTransformer.permute", "lit.LocalfeatureIntegrationTransformer.norm_mlp"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"\n        input:\n            x has shape BxCxHxW\n        output:\n            template (output SuperFeatures): tensor of shape BxCxNx1\n            attn (attention over local features at the last iteration): tensor of shape BxNxHxW\n        \"\"\"", "\n", "# reshape inputs from BxCxHxW to Bx(H*W)xC", "\n", "B", ",", "C", ",", "H", ",", "W", "=", "x", ".", "size", "(", ")", "\n", "x", "=", "x", ".", "reshape", "(", "B", ",", "C", ",", "H", "*", "W", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "\n", "# k and v projection", "\n", "x", "=", "self", ".", "norm_inputs", "(", "x", ")", "\n", "k", "=", "self", ".", "project_k", "(", "x", ")", "\n", "v", "=", "self", ".", "project_v", "(", "x", ")", "\n", "\n", "# template initialization", "\n", "templates", "=", "torch", ".", "repeat_interleave", "(", "self", ".", "templates_init", ",", "B", ",", "dim", "=", "0", ")", "\n", "attn", "=", "None", "\n", "\n", "# main iteration loop", "\n", "for", "_", "in", "range", "(", "self", ".", "T", ")", ":", "\n", "            ", "templates_prev", "=", "templates", "\n", "\n", "# q projection", "\n", "templates", "=", "self", ".", "norm_templates", "(", "templates", ")", "\n", "q", "=", "self", ".", "project_q", "(", "templates", ")", "\n", "\n", "# attention", "\n", "q", "=", "q", "*", "self", ".", "scale", "# Normalization.", "\n", "attn_logits", "=", "torch", ".", "einsum", "(", "'bnd,bld->bln'", ",", "q", ",", "k", ")", "\n", "attn", "=", "self", ".", "softmax", "(", "attn_logits", ")", "\n", "attn", "=", "attn", "+", "1e-8", "# to avoid zero when with the L1 norm below", "\n", "attn", "=", "attn", "/", "attn", ".", "sum", "(", "dim", "=", "-", "2", ",", "keepdim", "=", "True", ")", "\n", "\n", "# update template", "\n", "templates", "=", "templates_prev", "+", "torch", ".", "einsum", "(", "'bld,bln->bnd'", ",", "v", ",", "attn", ")", "\n", "\n", "# mlp", "\n", "templates", "=", "templates", "+", "self", ".", "mlp", "(", "self", ".", "norm_mlp", "(", "templates", ")", ")", "\n", "\n", "# reshape templates to BxDxNx1", "\n", "", "templates", "=", "templates", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "[", ":", ",", ":", ",", ":", ",", "None", "]", "\n", "attn", "=", "attn", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ".", "view", "(", "B", ",", "self", ".", "N", ",", "H", ",", "W", ")", "\n", "\n", "return", "templates", ",", "attn", "\n", "\n"]], "home.repos.pwc.inspect_result.naver_fire.None.lit.LocalfeatureIntegrationTransformer.__repr__": [[88, 93], ["str", "getattr"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "s", "=", "str", "(", "self", ".", "__class__", ".", "__name__", ")", "\n", "for", "k", "in", "[", "\"T\"", ",", "\"N\"", ",", "\"input_dim\"", ",", "\"dim\"", "]", ":", "\n", "            ", "s", "+=", "\"\\n  {:s}: {:d}\"", ".", "format", "(", "k", ",", "getattr", "(", "self", ",", "k", ")", ")", "\n", "", "return", "s", "\n", "", "", ""]], "home.repos.pwc.inspect_result.naver_fire.None.losses.DecorrelationAttentionLoss.__init__": [[12, 15], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.naver_fire.None.losses.SuperfeatureLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "weight", "=", "1.0", ")", ":", "\n", "      ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "weight", "=", "weight", "\n", "\n"]], "home.repos.pwc.inspect_result.naver_fire.None.losses.DecorrelationAttentionLoss.forward": [[16, 30], ["attn.view.view.size", "attn.view.view.view", "torch.normalize", "torch.normalize", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum.sum", "torch.einsum.sum", "torch.diagonal().sum", "torch.diagonal().sum", "torch.diagonal().sum", "torch.diagonal().sum", "torch.diagonal", "torch.diagonal", "torch.diagonal", "torch.diagonal"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "attention_list", ")", ":", "\n", "        ", "\"\"\"\n        attention_list is a list of tensor of size N x H x W where N is the number of attention maps per image\n        \"\"\"", "\n", "total_loss", "=", "0.0", "\n", "for", "attn", "in", "attention_list", ":", "\n", "            ", "assert", "attn", ".", "ndim", "==", "3", "\n", "N", "=", "attn", ".", "size", "(", "0", ")", "\n", "attn", "=", "attn", ".", "view", "(", "N", ",", "-", "1", ")", "\n", "attnN", "=", "F", ".", "normalize", "(", "attn", ",", "dim", "=", "1", ")", "\n", "corr", "=", "torch", ".", "einsum", "(", "\"rn,sn -> rs\"", ",", "attnN", ",", "attnN", ")", "\n", "loss", "=", "(", "corr", ".", "sum", "(", ")", "-", "torch", ".", "diagonal", "(", "corr", ",", "dim1", "=", "0", ",", "dim2", "=", "1", ")", ".", "sum", "(", ")", ")", "/", "(", "N", "*", "(", "N", "-", "1", ")", ")", "# sum over non-diagonal elements", "\n", "total_loss", "+=", "loss", "\n", "", "return", "total_loss", "*", "self", ".", "weight", "\n", "\n"]], "home.repos.pwc.inspect_result.naver_fire.None.losses.DecorrelationAttentionLoss.__repr__": [[31, 33], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "\"{:s}(weight={:g})\"", ".", "format", "(", "self", ".", "__class__", ".", "__name__", ",", "self", ".", "weight", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.naver_fire.None.losses.SuperfeatureLoss.__init__": [[57, 61], ["torch.nn.Module.__init__", "cirtorch.layers.loss.ContrastiveLoss"], "methods", ["home.repos.pwc.inspect_result.naver_fire.None.losses.SuperfeatureLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "margin", "=", "1.1", ",", "weight", "=", "1.0", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "weight", "=", "weight", "\n", "self", ".", "criterion", "=", "ContrastiveLoss", "(", "margin", "=", "margin", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.naver_fire.None.losses.SuperfeatureLoss.forward": [[62, 85], ["superfeatures_list[].size", "all", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "losses.match", "len", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "catfeats.view.view.view", "losses.SuperfeatureLoss.criterion", "torch.all", "torch.all", "torch.all", "torch.all", "torch.normalize", "torch.normalize", "match.size", "torch.normalize.size", "torch.Tensor().to.detach", "torch.Tensor().to.detach", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "s.size", "len"], "methods", ["home.repos.pwc.inspect_result.naver_fire.None.losses.match"], ["", "def", "forward", "(", "self", ",", "superfeatures_list", ",", "target", ")", ":", "\n", "        ", "\"\"\"\n        superfeatures_list is a list of tensor of size N x D containing the superfeatures for each image\n        \"\"\"", "\n", "assert", "target", "[", "0", "]", "==", "-", "1", "and", "target", "[", "1", "]", "==", "1", "and", "torch", ".", "all", "(", "target", "[", "2", ":", "]", "==", "0", ")", ",", "\"Only implemented for one tuple where the first element is the query, the second one the positive, and the rest are negatives\"", "\n", "N", "=", "superfeatures_list", "[", "0", "]", ".", "size", "(", "0", ")", "\n", "assert", "all", "(", "s", ".", "size", "(", "0", ")", "==", "N", "for", "s", "in", "superfeatures_list", "[", "1", ":", "]", ")", ",", "\"All images should have the same number of features\"", "\n", "query_feat", "=", "F", ".", "normalize", "(", "superfeatures_list", "[", "0", "]", ",", "dim", "=", "1", ")", "\n", "pos_feat", "=", "F", ".", "normalize", "(", "superfeatures_list", "[", "1", "]", ",", "dim", "=", "1", ")", "\n", "neg_feat_list", "=", "[", "F", ".", "normalize", "(", "neg", ",", "dim", "=", "1", ")", "for", "neg", "in", "superfeatures_list", "[", "2", ":", "]", "]", "\n", "# perform matching ", "\n", "indices", "=", "match", "(", "query_feat", ",", "pos_feat", ")", "\n", "if", "indices", ".", "size", "(", "0", ")", "==", "0", ":", "\n", "            ", "return", "torch", ".", "sum", "(", "query_feat", "[", ":", "1", ",", ":", "1", "]", ")", "*", "0.0", "# for having a gradient that depends on the input to avoid torch error when using multiple processes", "\n", "# loss", "\n", "", "nneg", "=", "len", "(", "neg_feat_list", ")", "\n", "target", "=", "torch", ".", "Tensor", "(", "(", "[", "-", "1", ",", "1", "]", "+", "[", "0", "]", "*", "nneg", ")", "*", "len", "(", "indices", ")", ")", ".", "to", "(", "dtype", "=", "torch", ".", "int64", ",", "device", "=", "indices", ".", "device", ")", "\n", "catfeats", "=", "torch", ".", "cat", "(", "[", "query_feat", "[", "indices", ",", "None", ",", ":", "]", ",", "pos_feat", "[", "indices", ",", "None", ",", ":", "]", "]", "+", "[", "neg_feat", "[", "indices", ",", "None", ",", ":", "]", "for", "neg_feat", "in", "neg_feat_list", "]", ",", "dim", "=", "1", ")", "# take qindices for the negatives", "\n", "catfeats", "=", "catfeats", ".", "view", "(", "-", "1", ",", "query_feat", ".", "size", "(", "1", ")", ")", "\n", "\n", "loss", "=", "self", ".", "criterion", "(", "catfeats", ".", "T", ",", "target", ".", "detach", "(", ")", ")", "\n", "return", "loss", "*", "self", ".", "weight", "\n", "\n"]], "home.repos.pwc.inspect_result.naver_fire.None.losses.SuperfeatureLoss.__repr__": [[86, 88], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "\"{:s}(margin={:g}, weight={:g})\"", ".", "format", "(", "self", ".", "__class__", ".", "__name__", ",", "self", ".", "criterion", ".", "margin", ",", "self", ".", "weight", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.naver_fire.None.losses.match": [[35, 53], ["torch.cdist", "torch.cdist", "torch.argmin", "torch.argmin", "torch.argmin", "torch.argmin", "torch.arange", "torch.arange", "torch.cdist.clone", "float", "torch.argmin", "torch.argmin", "torch.logical_and", "torch.logical_and", "torch.argmin.size", "torch.where", "torch.where"], "function", ["None"], ["", "", "def", "match", "(", "query_feat", ",", "pos_feat", ",", "LoweRatioTh", "=", "0.9", ")", ":", "\n", "# first perform reciprocal nn", "\n", "    ", "dist", "=", "torch", ".", "cdist", "(", "query_feat", ",", "pos_feat", ")", "\n", "best1", "=", "torch", ".", "argmin", "(", "dist", ",", "dim", "=", "1", ")", "\n", "best2", "=", "torch", ".", "argmin", "(", "dist", ",", "dim", "=", "0", ")", "\n", "arange", "=", "torch", ".", "arange", "(", "best2", ".", "size", "(", "0", ")", ",", "device", "=", "best2", ".", "device", ")", "\n", "reciprocal", "=", "best1", "[", "best2", "]", "==", "arange", "\n", "# check Lowe ratio test", "\n", "dist2", "=", "dist", ".", "clone", "(", ")", "\n", "dist2", "[", "best2", ",", "arange", "]", "=", "float", "(", "'Inf'", ")", "\n", "dist2_second2", "=", "torch", ".", "argmin", "(", "dist2", ",", "dim", "=", "0", ")", "\n", "ratio1to2", "=", "dist", "[", "best2", ",", "arange", "]", "/", "dist2_second2", "\n", "valid", "=", "torch", ".", "logical_and", "(", "reciprocal", ",", "ratio1to2", "<=", "LoweRatioTh", ")", "\n", "pindices", "=", "torch", ".", "where", "(", "valid", ")", "[", "0", "]", "\n", "qindices", "=", "best2", "[", "pindices", "]", "\n", "# keep only the ones with same indices ", "\n", "valid", "=", "pindices", "==", "qindices", "\n", "return", "pindices", "[", "valid", "]", "\n", "\n"]]}