{"home.repos.pwc.inspect_result.hendrycks_natural-adv-examples.None.eval.get_net_results": [[35, 55], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "enumerate", "confidence.copy", "correct.copy", "pred.eq().sum().item", "confidence.extend", "correct.extend", "len", "data.cuda", "target.cuda", "net", "output.data.max", "to_np().squeeze().tolist", "output.data.max", "pred.eq().to().numpy().squeeze().tolist", "pred.eq().sum", "to_np().squeeze", "pred.eq().to().numpy().squeeze", "pred.eq", "to_np", "pred.eq().to().numpy", "torch.softmax().max", "pred.eq().to", "torch.softmax", "pred.eq"], "function", ["None"], ["def", "get_net_results", "(", ")", ":", "\n", "    ", "confidence", "=", "[", "]", "\n", "correct", "=", "[", "]", "\n", "\n", "num_correct", "=", "0", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "batch_idx", ",", "(", "data", ",", "target", ")", "in", "enumerate", "(", "nae_loader", ")", ":", "\n", "            ", "data", ",", "target", "=", "data", ".", "cuda", "(", ")", ",", "target", ".", "cuda", "(", ")", "\n", "\n", "output", "=", "net", "(", "data", ")", "[", ":", ",", "indices_in_1k", "]", "\n", "\n", "# accuracy", "\n", "pred", "=", "output", ".", "data", ".", "max", "(", "1", ")", "[", "1", "]", "\n", "num_correct", "+=", "pred", ".", "eq", "(", "target", ".", "data", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "\n", "confidence", ".", "extend", "(", "to_np", "(", "F", ".", "softmax", "(", "output", ",", "dim", "=", "1", ")", ".", "max", "(", "1", ")", "[", "0", "]", ")", ".", "squeeze", "(", ")", ".", "tolist", "(", ")", ")", "\n", "pred", "=", "output", ".", "data", ".", "max", "(", "1", ")", "[", "1", "]", "\n", "correct", ".", "extend", "(", "pred", ".", "eq", "(", "target", ")", ".", "to", "(", "'cpu'", ")", ".", "numpy", "(", ")", ".", "squeeze", "(", ")", ".", "tolist", "(", ")", ")", "\n", "\n", "", "", "return", "num_correct", "/", "len", "(", "nae_loader", ".", "dataset", ")", ",", "confidence", ".", "copy", "(", ")", ",", "correct", ".", "copy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hendrycks_natural-adv-examples.None.calibration_tools.calib_err": [[5, 36], ["numpy.argsort", "len", "range", "len", "len", "numpy.sqrt", "range", "len", "numpy.abs", "len", "numpy.nanmean", "numpy.nanmean", "numpy.square", "numpy.maximum"], "function", ["None"], ["def", "calib_err", "(", "confidence", ",", "correct", ",", "p", "=", "'2'", ",", "beta", "=", "100", ")", ":", "\n", "# beta is target bin size", "\n", "    ", "idxs", "=", "np", ".", "argsort", "(", "confidence", ")", "\n", "confidence", "=", "confidence", "[", "idxs", "]", "\n", "correct", "=", "correct", "[", "idxs", "]", "\n", "bins", "=", "[", "[", "i", "*", "beta", ",", "(", "i", "+", "1", ")", "*", "beta", "]", "for", "i", "in", "range", "(", "len", "(", "confidence", ")", "//", "beta", ")", "]", "\n", "bins", "[", "-", "1", "]", "=", "[", "bins", "[", "-", "1", "]", "[", "0", "]", ",", "len", "(", "confidence", ")", "]", "\n", "\n", "cerr", "=", "0", "\n", "total_examples", "=", "len", "(", "confidence", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "bins", ")", "-", "1", ")", ":", "\n", "        ", "bin_confidence", "=", "confidence", "[", "bins", "[", "i", "]", "[", "0", "]", ":", "bins", "[", "i", "]", "[", "1", "]", "]", "\n", "bin_correct", "=", "correct", "[", "bins", "[", "i", "]", "[", "0", "]", ":", "bins", "[", "i", "]", "[", "1", "]", "]", "\n", "num_examples_in_bin", "=", "len", "(", "bin_confidence", ")", "\n", "\n", "if", "num_examples_in_bin", ">", "0", ":", "\n", "            ", "difference", "=", "np", ".", "abs", "(", "np", ".", "nanmean", "(", "bin_confidence", ")", "-", "np", ".", "nanmean", "(", "bin_correct", ")", ")", "\n", "\n", "if", "p", "==", "'2'", ":", "\n", "                ", "cerr", "+=", "num_examples_in_bin", "/", "total_examples", "*", "np", ".", "square", "(", "difference", ")", "\n", "", "elif", "p", "==", "'1'", ":", "\n", "                ", "cerr", "+=", "num_examples_in_bin", "/", "total_examples", "*", "difference", "\n", "", "elif", "p", "==", "'infty'", "or", "p", "==", "'infinity'", "or", "p", "==", "'max'", ":", "\n", "                ", "cerr", "=", "np", ".", "maximum", "(", "cerr", ",", "difference", ")", "\n", "", "else", ":", "\n", "                ", "assert", "False", ",", "\"p must be '1', '2', or 'infty'\"", "\n", "\n", "", "", "", "if", "p", "==", "'2'", ":", "\n", "        ", "cerr", "=", "np", ".", "sqrt", "(", "cerr", ")", "\n", "\n", "", "return", "cerr", "\n", "\n"]], "home.repos.pwc.inspect_result.hendrycks_natural-adv-examples.None.calibration_tools.aurra": [[38, 43], ["numpy.cumsum", "numpy.mean", "numpy.argsort", "numpy.arange", "numpy.asarray", "len"], "function", ["None"], ["", "def", "aurra", "(", "confidence", ",", "correct", ")", ":", "\n", "    ", "conf_ranks", "=", "np", ".", "argsort", "(", "confidence", ")", "[", ":", ":", "-", "1", "]", "# indices from greatest to least confidence", "\n", "rra_curve", "=", "np", ".", "cumsum", "(", "np", ".", "asarray", "(", "correct", ")", "[", "conf_ranks", "]", ")", "\n", "rra_curve", "=", "rra_curve", "/", "np", ".", "arange", "(", "1", ",", "len", "(", "rra_curve", ")", "+", "1", ")", "# accuracy at each response rate", "\n", "return", "np", ".", "mean", "(", "rra_curve", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hendrycks_natural-adv-examples.None.calibration_tools.soft_f1": [[45, 56], ["None"], "function", ["None"], ["", "def", "soft_f1", "(", "confidence", ",", "correct", ")", ":", "\n", "    ", "wrong", "=", "1", "-", "correct", "\n", "\n", "# # the incorrectly classified samples are our interest", "\n", "# # so they make the positive class", "\n", "# tp_soft = np.sum((1 - confidence) * wrong)", "\n", "# fp_soft = np.sum((1 - confidence) * correct)", "\n", "# fn_soft = np.sum(confidence * wrong)", "\n", "\n", "# return 2 * tp_soft / (2 * tp_soft + fn_soft + fp_soft)", "\n", "return", "2", "*", "(", "(", "1", "-", "confidence", ")", "*", "wrong", ")", ".", "sum", "(", ")", "/", "(", "1", "-", "confidence", "+", "wrong", ")", ".", "sum", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hendrycks_natural-adv-examples.None.calibration_tools.tune_temp": [[58, 92], ["numpy.array", "torch.FloatTensor", "torch.LongTensor", "torch.FloatTensor().requires_grad_", "min", "cx.Variable", "sum", "cx.Problem", "cx.Problem.solve", "torch.FloatTensor", "numpy.array", "cx.Minimize", "torch.autograd.grad", "float", "range", "F.cross_entropy", "F.cross_entropy", "cx.log_sum_exp"], "function", ["None"], ["", "def", "tune_temp", "(", "logits", ",", "labels", ",", "binary_search", "=", "True", ",", "lower", "=", "0.2", ",", "upper", "=", "5.0", ",", "eps", "=", "0.0001", ")", ":", "\n", "    ", "logits", "=", "np", ".", "array", "(", "logits", ")", "\n", "\n", "if", "binary_search", ":", "\n", "        ", "import", "torch", "\n", "import", "torch", ".", "nn", ".", "functional", "as", "F", "\n", "\n", "logits", "=", "torch", ".", "FloatTensor", "(", "logits", ")", "\n", "labels", "=", "torch", ".", "LongTensor", "(", "labels", ")", "\n", "t_guess", "=", "torch", ".", "FloatTensor", "(", "[", "0.5", "*", "(", "lower", "+", "upper", ")", "]", ")", ".", "requires_grad_", "(", ")", "\n", "\n", "while", "upper", "-", "lower", ">", "eps", ":", "\n", "            ", "if", "torch", ".", "autograd", ".", "grad", "(", "F", ".", "cross_entropy", "(", "logits", "/", "t_guess", ",", "labels", ")", ",", "t_guess", ")", "[", "0", "]", ">", "0", ":", "\n", "                ", "upper", "=", "0.5", "*", "(", "lower", "+", "upper", ")", "\n", "", "else", ":", "\n", "                ", "lower", "=", "0.5", "*", "(", "lower", "+", "upper", ")", "\n", "", "t_guess", "=", "t_guess", "*", "0", "+", "0.5", "*", "(", "lower", "+", "upper", ")", "\n", "\n", "", "t", "=", "min", "(", "[", "lower", ",", "0.5", "*", "(", "lower", "+", "upper", ")", ",", "upper", "]", ",", "key", "=", "lambda", "x", ":", "float", "(", "F", ".", "cross_entropy", "(", "logits", "/", "x", ",", "labels", ")", ")", ")", "\n", "", "else", ":", "\n", "        ", "import", "cvxpy", "as", "cx", "\n", "\n", "set_size", "=", "np", ".", "array", "(", "logits", ")", ".", "shape", "[", "0", "]", "\n", "\n", "t", "=", "cx", ".", "Variable", "(", ")", "\n", "\n", "expr", "=", "sum", "(", "(", "cx", ".", "Minimize", "(", "cx", ".", "log_sum_exp", "(", "logits", "[", "i", ",", ":", "]", "*", "t", ")", "-", "logits", "[", "i", ",", "labels", "[", "i", "]", "]", "*", "t", ")", "\n", "for", "i", "in", "range", "(", "set_size", ")", ")", ")", "\n", "p", "=", "cx", ".", "Problem", "(", "expr", ",", "[", "lower", "<=", "t", ",", "t", "<=", "upper", "]", ")", "\n", "\n", "p", ".", "solve", "(", ")", "# p.solve(solver=cx.SCS)", "\n", "t", "=", "1", "/", "t", ".", "value", "\n", "\n", "", "return", "t", "\n", "\n"]], "home.repos.pwc.inspect_result.hendrycks_natural-adv-examples.None.calibration_tools.print_measures": [[94, 98], ["print", "print", "print"], "function", ["None"], ["", "def", "print_measures", "(", "rms", ",", "aurra_metric", ",", "mad", ",", "sf1", ",", "method_name", "=", "'Baseline'", ")", ":", "\n", "    ", "print", "(", "'\\t\\t\\t\\t\\t\\t\\t'", "+", "method_name", ")", "\n", "print", "(", "'RMS Calib Error (%): \\t\\t{:.2f}'", ".", "format", "(", "100", "*", "rms", ")", ")", "\n", "print", "(", "'AURRA (%): \\t\\t\\t{:.2f}'", ".", "format", "(", "100", "*", "aurra", ")", ")", "\n", "# print('MAD Calib Error (%): \\t\\t{:.2f}'.format(100 * mad))", "\n"]], "home.repos.pwc.inspect_result.hendrycks_natural-adv-examples.None.calibration_tools.show_calibration_results": [[102, 110], ["print", "print", "print", "calibration_tools.calib_err", "calibration_tools.aurra"], "function", ["home.repos.pwc.inspect_result.hendrycks_natural-adv-examples.None.calibration_tools.calib_err", "home.repos.pwc.inspect_result.hendrycks_natural-adv-examples.None.calibration_tools.aurra"], ["", "def", "show_calibration_results", "(", "confidence", ",", "correct", ",", "method_name", "=", "'Baseline'", ")", ":", "\n", "\n", "    ", "print", "(", "'\\t\\t\\t\\t'", "+", "method_name", ")", "\n", "print", "(", "'RMS Calib Error (%): \\t\\t{:.2f}'", ".", "format", "(", "\n", "100", "*", "calib_err", "(", "confidence", ",", "correct", ",", "p", "=", "'2'", ")", ")", ")", "\n", "\n", "print", "(", "'AURRA (%): \\t\\t\\t{:.2f}'", ".", "format", "(", "\n", "100", "*", "aurra", "(", "confidence", ",", "correct", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hendrycks_natural-adv-examples.None.calibration_tools.fpr_and_fdr_at_recall": [[117, 158], ["numpy.unique", "tps.searchsorted", "slice", "numpy.argmin", "ValueError", "numpy.argsort", "numpy.where", "stable_cumsum", "numpy.abs", "numpy.sum", "numpy.diff", "numpy.logical_not", "numpy.array_equal", "numpy.array_equal", "numpy.array_equal", "numpy.array_equal", "numpy.array_equal"], "function", ["None"], ["", "def", "fpr_and_fdr_at_recall", "(", "y_true", ",", "y_score", ",", "recall_level", "=", "recall_level_default", ",", "pos_label", "=", "None", ")", ":", "\n", "    ", "classes", "=", "np", ".", "unique", "(", "y_true", ")", "\n", "if", "(", "pos_label", "is", "None", "and", "\n", "not", "(", "np", ".", "array_equal", "(", "classes", ",", "[", "0", ",", "1", "]", ")", "or", "\n", "np", ".", "array_equal", "(", "classes", ",", "[", "-", "1", ",", "1", "]", ")", "or", "\n", "np", ".", "array_equal", "(", "classes", ",", "[", "0", "]", ")", "or", "\n", "np", ".", "array_equal", "(", "classes", ",", "[", "-", "1", "]", ")", "or", "\n", "np", ".", "array_equal", "(", "classes", ",", "[", "1", "]", ")", ")", ")", ":", "\n", "        ", "raise", "ValueError", "(", "\"Data is not binary and pos_label is not specified\"", ")", "\n", "", "elif", "pos_label", "is", "None", ":", "\n", "        ", "pos_label", "=", "1.", "\n", "\n", "# make y_true a boolean vector", "\n", "", "y_true", "=", "(", "y_true", "==", "pos_label", ")", "\n", "\n", "# sort scores and corresponding truth values", "\n", "desc_score_indices", "=", "np", ".", "argsort", "(", "y_score", ",", "kind", "=", "\"mergesort\"", ")", "[", ":", ":", "-", "1", "]", "\n", "y_score", "=", "y_score", "[", "desc_score_indices", "]", "\n", "y_true", "=", "y_true", "[", "desc_score_indices", "]", "\n", "\n", "# y_score typically has many tied values. Here we extract", "\n", "# the indices associated with the distinct values. We also", "\n", "# concatenate a value for the end of the curve.", "\n", "distinct_value_indices", "=", "np", ".", "where", "(", "np", ".", "diff", "(", "y_score", ")", ")", "[", "0", "]", "\n", "threshold_idxs", "=", "np", ".", "r_", "[", "distinct_value_indices", ",", "y_true", ".", "size", "-", "1", "]", "\n", "\n", "# accumulate the true positives with decreasing threshold", "\n", "tps", "=", "stable_cumsum", "(", "y_true", ")", "[", "threshold_idxs", "]", "\n", "fps", "=", "1", "+", "threshold_idxs", "-", "tps", "# add one because of zero-based indexing", "\n", "\n", "thresholds", "=", "y_score", "[", "threshold_idxs", "]", "\n", "\n", "recall", "=", "tps", "/", "tps", "[", "-", "1", "]", "\n", "\n", "last_ind", "=", "tps", ".", "searchsorted", "(", "tps", "[", "-", "1", "]", ")", "\n", "sl", "=", "slice", "(", "last_ind", ",", "None", ",", "-", "1", ")", "# [last_ind::-1]", "\n", "recall", ",", "fps", ",", "tps", ",", "thresholds", "=", "np", ".", "r_", "[", "recall", "[", "sl", "]", ",", "1", "]", ",", "np", ".", "r_", "[", "fps", "[", "sl", "]", ",", "0", "]", ",", "np", ".", "r_", "[", "tps", "[", "sl", "]", ",", "0", "]", ",", "thresholds", "[", "sl", "]", "\n", "\n", "cutoff", "=", "np", ".", "argmin", "(", "np", ".", "abs", "(", "recall", "-", "recall_level", ")", ")", "\n", "\n", "return", "fps", "[", "cutoff", "]", "/", "(", "np", ".", "sum", "(", "np", ".", "logical_not", "(", "y_true", ")", ")", ")", "# , fps[cutoff]/(fps[cutoff] + tps[cutoff])", "\n", "\n"]], "home.repos.pwc.inspect_result.hendrycks_natural-adv-examples.None.calibration_tools.get_measures": [[159, 171], ["numpy.array().reshape", "numpy.array().reshape", "numpy.squeeze", "numpy.zeros", "sklearn.roc_auc_score", "sklearn.average_precision_score", "calibration_tools.fpr_and_fdr_at_recall", "numpy.vstack", "len", "numpy.array", "numpy.array", "len"], "function", ["home.repos.pwc.inspect_result.hendrycks_natural-adv-examples.None.calibration_tools.fpr_and_fdr_at_recall"], ["", "def", "get_measures", "(", "_pos", ",", "_neg", ",", "recall_level", "=", "recall_level_default", ")", ":", "\n", "    ", "pos", "=", "np", ".", "array", "(", "_pos", "[", ":", "]", ")", ".", "reshape", "(", "(", "-", "1", ",", "1", ")", ")", "\n", "neg", "=", "np", ".", "array", "(", "_neg", "[", ":", "]", ")", ".", "reshape", "(", "(", "-", "1", ",", "1", ")", ")", "\n", "examples", "=", "np", ".", "squeeze", "(", "np", ".", "vstack", "(", "(", "pos", ",", "neg", ")", ")", ")", "\n", "labels", "=", "np", ".", "zeros", "(", "len", "(", "examples", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "labels", "[", ":", "len", "(", "pos", ")", "]", "+=", "1", "\n", "\n", "auroc", "=", "sk", ".", "roc_auc_score", "(", "labels", ",", "examples", ")", "\n", "aupr", "=", "sk", ".", "average_precision_score", "(", "labels", ",", "examples", ")", "\n", "fpr", "=", "fpr_and_fdr_at_recall", "(", "labels", ",", "examples", ",", "recall_level", ")", "\n", "\n", "return", "auroc", ",", "aupr", ",", "fpr", "\n", "\n"]], "home.repos.pwc.inspect_result.hendrycks_natural-adv-examples.None.calibration_tools.print_measures_old": [[173, 178], ["print", "print", "print", "print", "int"], "function", ["None"], ["", "def", "print_measures_old", "(", "auroc", ",", "aupr", ",", "fpr", ",", "method_name", "=", "'Ours'", ",", "recall_level", "=", "recall_level_default", ")", ":", "\n", "    ", "print", "(", "'\\t\\t\\t'", "+", "method_name", ")", "\n", "print", "(", "'FPR{:d}:\\t{:.2f}'", ".", "format", "(", "int", "(", "100", "*", "recall_level", ")", ",", "100", "*", "fpr", ")", ")", "\n", "print", "(", "'AUROC: \\t{:.2f}'", ".", "format", "(", "100", "*", "auroc", ")", ")", "\n", "print", "(", "'AUPR:  \\t{:.2f}'", ".", "format", "(", "100", "*", "aupr", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hendrycks_natural-adv-examples.None.calibration_tools.print_measures_with_std": [[180, 185], ["print", "print", "print", "print", "int", "numpy.mean", "numpy.std", "numpy.mean", "numpy.std", "numpy.mean", "numpy.std"], "function", ["None"], ["", "def", "print_measures_with_std", "(", "aurocs", ",", "auprs", ",", "fprs", ",", "method_name", "=", "'Ours'", ",", "recall_level", "=", "recall_level_default", ")", ":", "\n", "    ", "print", "(", "'\\t\\t\\t'", "+", "method_name", ")", "\n", "print", "(", "'FPR{:d}:\\t{:.2f}\\t+/- {:.2f}'", ".", "format", "(", "int", "(", "100", "*", "recall_level", ")", ",", "100", "*", "np", ".", "mean", "(", "fprs", ")", ",", "100", "*", "np", ".", "std", "(", "fprs", ")", ")", ")", "\n", "print", "(", "'AUROC: \\t{:.2f}\\t+/- {:.2f}'", ".", "format", "(", "100", "*", "np", ".", "mean", "(", "aurocs", ")", ",", "100", "*", "np", ".", "std", "(", "aurocs", ")", ")", ")", "\n", "print", "(", "'AUPR:  \\t{:.2f}\\t+/- {:.2f}'", ".", "format", "(", "100", "*", "np", ".", "mean", "(", "auprs", ")", ",", "100", "*", "np", ".", "std", "(", "auprs", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hendrycks_natural-adv-examples.None.calibration_tools.get_and_print_results": [[187, 203], ["calibration_tools.get_measures", "aurocs.append", "auprs.append", "fprs.append", "numpy.mean", "numpy.mean", "numpy.mean"], "function", ["home.repos.pwc.inspect_result.hendrycks_natural-adv-examples.None.calibration_tools.get_measures"], ["", "def", "get_and_print_results", "(", "out_score", ",", "in_score", ",", "num_to_avg", "=", "1", ")", ":", "\n", "\n", "    ", "aurocs", ",", "auprs", ",", "fprs", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "#for _ in range(num_to_avg):", "\n", "#    out_score = get_ood_scores(ood_loader)", "\n", "measures", "=", "get_measures", "(", "out_score", ",", "in_score", ")", "\n", "aurocs", ".", "append", "(", "measures", "[", "0", "]", ")", ";", "auprs", ".", "append", "(", "measures", "[", "1", "]", ")", ";", "fprs", ".", "append", "(", "measures", "[", "2", "]", ")", "\n", "\n", "auroc", "=", "np", ".", "mean", "(", "aurocs", ")", ";", "aupr", "=", "np", ".", "mean", "(", "auprs", ")", ";", "fpr", "=", "np", ".", "mean", "(", "fprs", ")", "\n", "#auroc_list.append(auroc); aupr_list.append(aupr); fpr_list.append(fpr)", "\n", "\n", "#if num_to_avg >= 5:", "\n", "#    print_measures_with_std(aurocs, auprs, fprs, method_name='Ours')", "\n", "#else:", "\n", "#    print_measures(auroc, aupr, fpr, method_name='Ours')", "\n", "return", "auroc", ",", "aupr", ",", "fpr", "\n", "", ""]], "home.repos.pwc.inspect_result.hendrycks_natural-adv-examples.None.eval_many_models.create_symlinks_to_imagenet": [[54, 61], ["os.path.exists", "os.makedirs", "os.listdir", "os.symlink"], "function", ["None"], ["def", "create_symlinks_to_imagenet", "(", "imagenet_folder", ",", "folder_to_scan", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "exists", "(", "imagenet_folder", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "imagenet_folder", ")", "\n", "folders_of_interest", "=", "os", ".", "listdir", "(", "folder_to_scan", ")", "\n", "path_prefix", "=", "PATH_TO_IMAGENET_VAL", "\n", "for", "folder", "in", "folders_of_interest", ":", "\n", "            ", "os", ".", "symlink", "(", "path_prefix", "+", "folder", ",", "imagenet_folder", "+", "folder", ",", "target_is_directory", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hendrycks_natural-adv-examples.None.eval_many_models.get_predictions": [[76, 94], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "numpy.array", "numpy.array", "pred.eq().sum().item", "confidence.extend", "correct.extend", "data.cuda", "target.cuda", "net", "output.data.max", "to_np().squeeze().tolist", "output.data.max", "pred.eq().to().numpy().squeeze().tolist", "pred.eq().sum", "to_np().squeeze", "pred.eq().to().numpy().squeeze", "pred.eq", "to_np", "pred.eq().to().numpy", "torch.softmax().max", "pred.eq().to", "torch.softmax", "pred.eq"], "function", ["None"], ["def", "get_predictions", "(", "loader", ",", "net", "=", "None", ",", "mask", "=", "None", ")", ":", "\n", "    ", "confidence", "=", "[", "]", "\n", "correct", "=", "[", "]", "\n", "num_correct", "=", "0", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "data", ",", "target", "in", "loader", ":", "\n", "            ", "data", ",", "target", "=", "data", ".", "cuda", "(", ")", ",", "target", ".", "cuda", "(", ")", "\n", "output", "=", "net", "(", "data", ")", "[", ":", ",", "mask", "]", "\n", "\n", "# accuracy", "\n", "pred", "=", "output", ".", "data", ".", "max", "(", "1", ")", "[", "1", "]", "\n", "num_correct", "+=", "pred", ".", "eq", "(", "target", ".", "data", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "\n", "confidence", ".", "extend", "(", "to_np", "(", "F", ".", "softmax", "(", "output", ",", "dim", "=", "1", ")", ".", "max", "(", "1", ")", "[", "0", "]", ")", ".", "squeeze", "(", ")", ".", "tolist", "(", ")", ")", "\n", "pred", "=", "output", ".", "data", ".", "max", "(", "1", ")", "[", "1", "]", "\n", "correct", ".", "extend", "(", "pred", ".", "eq", "(", "target", ")", ".", "to", "(", "'cpu'", ")", ".", "numpy", "(", ")", ".", "squeeze", "(", ")", ".", "tolist", "(", ")", ")", "\n", "\n", "", "", "return", "np", ".", "array", "(", "confidence", ")", ",", "np", ".", "array", "(", "correct", ")", ",", "num_correct", "\n", "\n"]], "home.repos.pwc.inspect_result.hendrycks_natural-adv-examples.None.eval_many_models.get_imagenet_a_results": [[96, 101], ["eval_many_models.get_predictions", "print", "calibration_tools.show_calibration_results", "len", "round"], "function", ["home.repos.pwc.inspect_result.hendrycks_natural-adv-examples.None.eval_many_models.get_predictions", "home.repos.pwc.inspect_result.hendrycks_natural-adv-examples.None.calibration_tools.show_calibration_results"], ["", "def", "get_imagenet_a_results", "(", "loader", ",", "net", ",", "mask", ")", ":", "\n", "    ", "confidence", ",", "correct", ",", "num_correct", "=", "get_predictions", "(", "loader", ",", "net", ",", "mask", ")", "\n", "acc", "=", "num_correct", "/", "len", "(", "loader", ".", "dataset", ")", "\n", "print", "(", "'Accuracy (%):'", ",", "round", "(", "100", "*", "acc", ",", "4", ")", ")", "\n", "calibration_tools", ".", "show_calibration_results", "(", "confidence", ",", "correct", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hendrycks_natural-adv-examples.None.eval_many_models.get_imagenet_o_results": [[103, 114], ["eval_many_models.get_predictions", "eval_many_models.get_predictions", "calibration_tools.get_measures", "calibration_tools.print_measures_old"], "function", ["home.repos.pwc.inspect_result.hendrycks_natural-adv-examples.None.eval_many_models.get_predictions", "home.repos.pwc.inspect_result.hendrycks_natural-adv-examples.None.eval_many_models.get_predictions", "home.repos.pwc.inspect_result.hendrycks_natural-adv-examples.None.calibration_tools.get_measures", "home.repos.pwc.inspect_result.hendrycks_natural-adv-examples.None.calibration_tools.print_measures_old"], ["", "def", "get_imagenet_o_results", "(", "in_loader", ",", "out_loader", ",", "net", ",", "mask", ")", ":", "\n", "    ", "confidence_in", ",", "correct", ",", "num_correct", "=", "get_predictions", "(", "in_loader", ",", "net", "=", "net", ",", "mask", "=", "mask", ")", "\n", "in_score", "=", "-", "confidence_in", "\n", "confidence_out", ",", "correct_out", ",", "num_correct_out", "=", "get_predictions", "(", "out_loader", ",", "net", "=", "net", ",", "mask", "=", "mask", ")", "\n", "out_score", "=", "-", "confidence_out", "\n", "\n", "aurocs", ",", "auprs", ",", "fprs", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "measures", "=", "calibration_tools", ".", "get_measures", "(", "out_score", ",", "in_score", ")", "\n", "aurocs", "=", "measures", "[", "0", "]", ";", "auprs", "=", "measures", "[", "1", "]", ";", "fprs", "=", "measures", "[", "2", "]", "\n", "\n", "calibration_tools", ".", "print_measures_old", "(", "aurocs", ",", "auprs", ",", "fprs", ",", "method_name", "=", "'MSP'", ")", "\n", "\n"]]}