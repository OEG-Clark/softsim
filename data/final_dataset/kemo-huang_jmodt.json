{"home.repos.pwc.inspect_result.kemo-huang_jmodt.None.setup.get_git_commit_number": [[8, 15], ["subprocess.run", "os.path.exists", "subprocess.run.stdout.decode"], "function", ["None"], ["def", "get_git_commit_number", "(", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "exists", "(", "'.git'", ")", ":", "\n", "        ", "return", "'0000000'", "\n", "\n", "", "cmd_out", "=", "subprocess", ".", "run", "(", "[", "'git'", ",", "'rev-parse'", ",", "'HEAD'", "]", ",", "stdout", "=", "subprocess", ".", "PIPE", ")", "\n", "git_commit_number", "=", "cmd_out", ".", "stdout", ".", "decode", "(", "'utf-8'", ")", "[", ":", "7", "]", "\n", "return", "git_commit_number", "\n", "\n"]], "home.repos.pwc.inspect_result.kemo-huang_jmodt.None.setup.make_cuda_ext": [[17, 24], ["torch.utils.cpp_extension.CUDAExtension", "os.path.join", "module.split"], "function", ["None"], ["", "def", "make_cuda_ext", "(", "name", ",", "module", ",", "sources", ")", ":", "\n", "    ", "cuda_ext", "=", "CUDAExtension", "(", "\n", "name", "=", "'%s.%s'", "%", "(", "module", ",", "name", ")", ",", "\n", "sources", "=", "[", "os", ".", "path", ".", "join", "(", "*", "module", ".", "split", "(", "'.'", ")", ",", "src", ")", "for", "src", "in", "sources", "]", ",", "\n", "# extra_compile_args={'cxx': ['-g'], 'nvcc': ['-O2']}", "\n", ")", "\n", "return", "cuda_ext", "\n", "\n"]], "home.repos.pwc.inspect_result.kemo-huang_jmodt.tools.eval.eval_joint_detection": [[39, 243], ["torch.no_grad", "logger.info", "jmodt.detection.datasets.kitti_dataset.KittiDataset", "torch.utils.data.DataLoader", "jmodt.detection.modeling.point_rcnn.PointRCNN", "jmodt.detection.modeling.point_rcnn.PointRCNN.eval", "jmodt.detection.modeling.point_rcnn.PointRCNN.cuda", "jmodt.utils.train_utils.load_checkpoint", "os.path.join", "os.makedirs", "os.path.join", "os.makedirs", "logger.info", "tqdm.tqdm", "tqdm.tqdm.close", "range", "logger.info", "re.findall", "len", "torch.from_numpy().cuda().float", "jmodt.detection.modeling.point_rcnn.PointRCNN.", "ret_dict[].long", "ret_dict[].view", "ret_dict[].view", "ret_dict[].view", "jmodt.utils.bbox_transform.decode_bbox_target().view", "tqdm.tqdm.set_postfix", "tqdm.tqdm.update", "range", "image_idx_list.__len__", "os.path.join", "logger.info", "logger.info", "logger.info", "logger.info", "logger.info", "enumerate", "enumerate", "logger.info", "jmodt.detection.evaluation.evaluate.evaluate", "logger.info", "num_list.__len__", "len", "torch.from_numpy().cuda().float", "torch.from_numpy().cuda().float().permute", "ret_dict[].view", "torch.max", "torch.sigmoid", "torch.argmax().view", "torch.softmax", "range", "inds[].view", "jmodt.utils.kitti_utils.boxes3d_to_bev_torch", "jmodt.ops.iou3d.iou3d_utils.nms_gpu().view", "pred_boxes3d_selected[].cpu().numpy", "norm_scores_selected[].cpu().numpy", "feat_selected[].cpu().numpy", "jmodt.detection.datasets.kitti_dataset.KittiDataset.get_calib", "jmodt.detection.datasets.kitti_dataset.KittiDataset.get_image_shape", "eval.save_kitti_detection_format", "os.path.exists", "logger.info", "max", "max", "max", "max", "logger.info", "logger.info", "torch.from_numpy().cuda", "torch.max.new().resize_().fill_", "jmodt.utils.bbox_transform.decode_bbox_target", "torch.from_numpy().cuda().long", "inds[].view.sum", "int", "open", "len", "max", "max", "torch.from_numpy().cuda", "torch.from_numpy().cuda().float", "roi_boxes3d.view", "ret_dict[].view.view", "torch.argmax", "torch.from_numpy().cuda().float.__len__", "torch.from_numpy().cuda().float", "jmodt.ops.iou3d.iou3d_utils.boxes_iou3d_gpu", "iou3d_utils.boxes_iou3d_gpu.max", "iou3d_utils.boxes_iou3d_gpu.max", "enumerate", "jmodt.ops.iou3d.iou3d_utils.boxes_iou3d_gpu", "iou3d_utils.boxes_iou3d_gpu.max", "enumerate", "rpn_iou.item", "jmodt.ops.iou3d.iou3d_utils.nms_gpu", "pred_boxes3d_selected[].cpu", "norm_scores_selected[].cpu", "feat_selected[].cpu", "torch.from_numpy", "torch.max.new().resize_", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "cur_gt_boxes3d[].sum", "torch.clamp", "torch.from_numpy", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "fg_mask.sum().float", "torch.max.new", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "fg_mask.sum"], "function", ["home.repos.pwc.inspect_result.kemo-huang_jmodt.utils.train_utils.load_checkpoint", "home.repos.pwc.inspect_result.kemo-huang_jmodt.tracking.kalman.KalmanPSR.update", "home.repos.pwc.inspect_result.kemo-huang_jmodt.datasets.kitti_dataset.KittiDataset.__len__", "home.repos.pwc.inspect_result.kemo-huang_jmodt.tracking.kitti_evaluate.evaluate", "home.repos.pwc.inspect_result.kemo-huang_jmodt.datasets.kitti_dataset.KittiDataset.__len__", "home.repos.pwc.inspect_result.kemo-huang_jmodt.utils.kitti_utils.boxes3d_to_bev_torch", "home.repos.pwc.inspect_result.kemo-huang_jmodt.datasets.kitti_dataset.KittiDataset.get_calib", "home.repos.pwc.inspect_result.kemo-huang_jmodt.datasets.kitti_dataset.KittiDataset.get_image_shape", "home.repos.pwc.inspect_result.kemo-huang_jmodt.tools.eval.save_kitti_detection_format", "home.repos.pwc.inspect_result.kemo-huang_jmodt.utils.bbox_transform.decode_bbox_target", "home.repos.pwc.inspect_result.kemo-huang_jmodt.datasets.kitti_dataset.KittiDataset.__len__", "home.repos.pwc.inspect_result.kemo-huang_jmodt.iou3d.iou3d_utils.boxes_iou3d_gpu", "home.repos.pwc.inspect_result.kemo-huang_jmodt.iou3d.iou3d_utils.boxes_iou3d_gpu", "home.repos.pwc.inspect_result.kemo-huang_jmodt.iou3d.iou3d_utils.nms_gpu"], ["@", "torch", ".", "no_grad", "(", ")", "\n", "def", "eval_joint_detection", "(", "logger", ")", ":", "\n", "    ", "det_output", "=", "args", ".", "det_output", "\n", "# set epoch_id and output dir", "\n", "num_list", "=", "re", ".", "findall", "(", "r'\\d+'", ",", "args", ".", "ckpt", ")", "if", "args", ".", "ckpt", "is", "not", "None", "else", "[", "]", "\n", "epoch_id", "=", "num_list", "[", "-", "1", "]", "if", "num_list", ".", "__len__", "(", ")", ">", "0", "else", "'no_number'", "\n", "\n", "logger", ".", "info", "(", "'**********************Start evaluate detection**********************'", ")", "\n", "\n", "# create dataloader & network", "\n", "mode", "=", "'TEST'", "if", "args", ".", "test", "else", "'EVAL'", "\n", "split", "=", "cfg", ".", "TEST", ".", "SPLIT", "if", "args", ".", "test", "else", "cfg", ".", "EVAL", ".", "SPLIT", "\n", "# create dataloader", "\n", "dataset", "=", "KittiDataset", "(", "root_dir", "=", "args", ".", "data_root", ",", "npoints", "=", "cfg", ".", "RPN", ".", "NUM_POINTS", ",", "split", "=", "split", ",", "mode", "=", "mode", ",", "\n", "classes", "=", "cfg", ".", "CLASSES", ",", "challenge", "=", "'tracking'", ",", "logger", "=", "logger", ")", "\n", "\n", "dataloader", "=", "DataLoader", "(", "dataset", ",", "batch_size", "=", "1", ",", "shuffle", "=", "False", ",", "pin_memory", "=", "True", ",", "\n", "num_workers", "=", "4", ",", "collate_fn", "=", "dataset", ".", "collate_batch", ")", "\n", "model", "=", "PointRCNN", "(", "num_classes", "=", "dataset", ".", "num_class", ",", "use_xyz", "=", "True", ",", "mode", "=", "mode", ")", "\n", "model", ".", "eval", "(", ")", "\n", "model", ".", "cuda", "(", ")", "\n", "\n", "# load checkpoint", "\n", "train_utils", ".", "load_checkpoint", "(", "model", ",", "filename", "=", "args", ".", "ckpt", ",", "logger", "=", "logger", ")", "\n", "\n", "detection_res_txt_dir", "=", "os", ".", "path", ".", "join", "(", "det_output", ",", "'txt'", ")", "\n", "os", ".", "makedirs", "(", "detection_res_txt_dir", ",", "exist_ok", "=", "True", ")", "\n", "detection_res_feat_dir", "=", "os", ".", "path", ".", "join", "(", "det_output", ",", "'feat'", ")", "\n", "os", ".", "makedirs", "(", "detection_res_feat_dir", ",", "exist_ok", "=", "True", ")", "\n", "\n", "logger", ".", "info", "(", "'==> Detection output dir: %s'", "%", "det_output", ")", "\n", "\n", "thresh_list", "=", "[", "0.1", ",", "0.3", ",", "0.5", ",", "0.7", ",", "0.9", "]", "\n", "total_recalled_bbox_list", ",", "total_gt_bbox", "=", "[", "0", "]", "*", "5", ",", "0", "\n", "total_roi_recalled_bbox_list", "=", "[", "0", "]", "*", "5", "\n", "cnt", "=", "final_total", "=", "total_cls_acc", "=", "total_cls_acc_refined", "=", "total_rpn_iou", "=", "0", "\n", "\n", "progress_bar", "=", "tqdm", ".", "tqdm", "(", "total", "=", "len", "(", "dataloader", ")", ",", "leave", "=", "True", ",", "desc", "=", "'test'", "if", "args", ".", "test", "else", "'eval'", ")", "\n", "for", "data", "in", "dataloader", ":", "\n", "        ", "cnt", "+=", "1", "\n", "sample_id", "=", "data", "[", "'sample_id'", "]", "\n", "batch_size", "=", "len", "(", "sample_id", ")", "\n", "\n", "inputs", "=", "torch", ".", "from_numpy", "(", "data", "[", "'pts_input'", "]", ")", ".", "cuda", "(", "non_blocking", "=", "True", ")", ".", "float", "(", ")", "\n", "input_data", "=", "{", "'pts_input'", ":", "inputs", "}", "\n", "# img feature", "\n", "if", "cfg", ".", "LI_FUSION", ".", "ENABLED", ":", "\n", "            ", "pts_xy", ",", "img", "=", "data", "[", "'pts_xy'", "]", ",", "data", "[", "'img'", "]", "\n", "pts_xy", "=", "torch", ".", "from_numpy", "(", "pts_xy", ")", ".", "cuda", "(", "non_blocking", "=", "True", ")", ".", "float", "(", ")", "\n", "img", "=", "torch", ".", "from_numpy", "(", "img", ")", ".", "cuda", "(", "non_blocking", "=", "True", ")", ".", "float", "(", ")", ".", "permute", "(", "(", "0", ",", "3", ",", "1", ",", "2", ")", ")", "\n", "input_data", "[", "'pts_xy'", "]", "=", "pts_xy", "\n", "input_data", "[", "'img'", "]", "=", "img", "\n", "\n", "# model inference", "\n", "", "ret_dict", "=", "model", "(", "input_data", ")", "\n", "\n", "roi_boxes3d", "=", "ret_dict", "[", "'rois'", "]", "# (B, M, 7)", "\n", "seg_result", "=", "ret_dict", "[", "'seg_result'", "]", ".", "long", "(", ")", "# (B, N)", "\n", "\n", "rcnn_cls", "=", "ret_dict", "[", "'rcnn_cls'", "]", ".", "view", "(", "batch_size", ",", "-", "1", ",", "ret_dict", "[", "'rcnn_cls'", "]", ".", "shape", "[", "1", "]", ")", "\n", "rcnn_reg", "=", "ret_dict", "[", "'rcnn_reg'", "]", ".", "view", "(", "batch_size", ",", "-", "1", ",", "ret_dict", "[", "'rcnn_reg'", "]", ".", "shape", "[", "1", "]", ")", "# (B, M, C)", "\n", "rcnn_feat", "=", "ret_dict", "[", "'rcnn_feat'", "]", ".", "view", "(", "batch_size", ",", "-", "1", ",", "ret_dict", "[", "'rcnn_feat'", "]", ".", "shape", "[", "1", "]", ")", "\n", "\n", "if", "cfg", ".", "USE_IOU_BRANCH", ":", "\n", "            ", "rcnn_iou_branch", "=", "ret_dict", "[", "'rcnn_iou_branch'", "]", ".", "view", "(", "batch_size", ",", "-", "1", ",", "ret_dict", "[", "'rcnn_iou_branch'", "]", ".", "shape", "[", "1", "]", ")", "\n", "rcnn_iou_branch", "=", "torch", ".", "max", "(", "rcnn_iou_branch", ",", "\n", "rcnn_iou_branch", ".", "new", "(", ")", ".", "resize_", "(", "rcnn_iou_branch", ".", "shape", ")", ".", "fill_", "(", "1e-4", ")", ")", "\n", "rcnn_cls", "=", "rcnn_iou_branch", "*", "rcnn_cls", "\n", "\n", "# bounding box regression", "\n", "", "pred_boxes3d", "=", "decode_bbox_target", "(", "roi_boxes3d", ".", "view", "(", "-", "1", ",", "7", ")", ",", "rcnn_reg", ".", "view", "(", "-", "1", ",", "rcnn_reg", ".", "shape", "[", "-", "1", "]", ")", ",", "\n", "anchor_size", "=", "torch", ".", "from_numpy", "(", "cfg", ".", "CLS_MEAN_SIZE", "[", "0", "]", ")", ".", "cuda", "(", ")", ",", "\n", "loc_scope", "=", "cfg", ".", "RCNN", ".", "LOC_SCOPE", ",", "\n", "loc_bin_size", "=", "cfg", ".", "RCNN", ".", "LOC_BIN_SIZE", ",", "\n", "num_head_bin", "=", "cfg", ".", "RCNN", ".", "NUM_HEAD_BIN", ",", "\n", "get_xz_fine", "=", "True", ",", "get_y_by_bin", "=", "cfg", ".", "RCNN", ".", "LOC_Y_BY_BIN", ",", "\n", "loc_y_scope", "=", "cfg", ".", "RCNN", ".", "LOC_Y_SCOPE", ",", "loc_y_bin_size", "=", "cfg", ".", "RCNN", ".", "LOC_Y_BIN_SIZE", ",", "\n", "get_ry_fine", "=", "True", ")", ".", "view", "(", "batch_size", ",", "-", "1", ",", "7", ")", "\n", "\n", "# scoring", "\n", "if", "rcnn_cls", ".", "shape", "[", "2", "]", "==", "1", ":", "\n", "            ", "raw_scores", "=", "rcnn_cls", "# (B, M, 1)", "\n", "norm_scores", "=", "torch", ".", "sigmoid", "(", "raw_scores", ")", "\n", "", "else", ":", "\n", "            ", "pred_classes", "=", "torch", ".", "argmax", "(", "rcnn_cls", ",", "dim", "=", "1", ")", ".", "view", "(", "-", "1", ")", "\n", "cls_norm_scores", "=", "torch", ".", "softmax", "(", "rcnn_cls", ",", "dim", "=", "1", ")", "\n", "raw_scores", "=", "rcnn_cls", "[", ":", ",", "pred_classes", "]", "\n", "norm_scores", "=", "cls_norm_scores", "[", ":", ",", "pred_classes", "]", "\n", "\n", "# evaluation", "\n", "", "if", "not", "args", ".", "test", ":", "\n", "            ", "if", "not", "cfg", ".", "RPN", ".", "FIXED", ":", "\n", "                ", "rpn_cls_label", ",", "rpn_reg_label", "=", "data", "[", "'rpn_cls_label'", "]", ",", "data", "[", "'rpn_reg_label'", "]", "\n", "rpn_cls_label", "=", "torch", ".", "from_numpy", "(", "rpn_cls_label", ")", ".", "cuda", "(", "non_blocking", "=", "True", ")", ".", "long", "(", ")", "\n", "\n", "", "gt_boxes3d", "=", "data", "[", "'gt_boxes3d'", "]", "\n", "\n", "for", "k", "in", "range", "(", "batch_size", ")", ":", "\n", "# calculate recall", "\n", "                ", "cur_gt_boxes3d", "=", "gt_boxes3d", "[", "k", "]", "\n", "tmp_idx", "=", "cur_gt_boxes3d", ".", "__len__", "(", ")", "-", "1", "\n", "\n", "while", "tmp_idx", ">=", "0", "and", "cur_gt_boxes3d", "[", "tmp_idx", "]", ".", "sum", "(", ")", "==", "0", ":", "\n", "                    ", "tmp_idx", "-=", "1", "\n", "\n", "", "if", "tmp_idx", ">=", "0", ":", "\n", "                    ", "cur_gt_boxes3d", "=", "cur_gt_boxes3d", "[", ":", "tmp_idx", "+", "1", "]", "\n", "\n", "cur_gt_boxes3d", "=", "torch", ".", "from_numpy", "(", "cur_gt_boxes3d", ")", ".", "cuda", "(", "non_blocking", "=", "True", ")", ".", "float", "(", ")", "\n", "iou3d", "=", "iou3d_utils", ".", "boxes_iou3d_gpu", "(", "pred_boxes3d", "[", "k", "]", ",", "cur_gt_boxes3d", ")", "\n", "gt_max_iou", ",", "_", "=", "iou3d", ".", "max", "(", "dim", "=", "0", ")", "\n", "refined_iou", ",", "_", "=", "iou3d", ".", "max", "(", "dim", "=", "1", ")", "\n", "\n", "for", "idx", ",", "thresh", "in", "enumerate", "(", "thresh_list", ")", ":", "\n", "                        ", "total_recalled_bbox_list", "[", "idx", "]", "+=", "(", "gt_max_iou", ">", "thresh", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "", "total_gt_bbox", "+=", "cur_gt_boxes3d", ".", "shape", "[", "0", "]", "\n", "\n", "# original recall", "\n", "iou3d_in", "=", "iou3d_utils", ".", "boxes_iou3d_gpu", "(", "roi_boxes3d", "[", "k", "]", ",", "cur_gt_boxes3d", ")", "\n", "gt_max_iou_in", ",", "_", "=", "iou3d_in", ".", "max", "(", "dim", "=", "0", ")", "\n", "\n", "for", "idx", ",", "thresh", "in", "enumerate", "(", "thresh_list", ")", ":", "\n", "                        ", "total_roi_recalled_bbox_list", "[", "idx", "]", "+=", "(", "gt_max_iou_in", ">", "thresh", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "\n", "", "", "if", "not", "cfg", ".", "RPN", ".", "FIXED", ":", "\n", "                    ", "fg_mask", "=", "rpn_cls_label", ">", "0", "\n", "correct", "=", "(", "(", "seg_result", "==", "rpn_cls_label", ")", "&", "fg_mask", ")", ".", "sum", "(", ")", ".", "float", "(", ")", "\n", "union", "=", "fg_mask", ".", "sum", "(", ")", ".", "float", "(", ")", "+", "(", "seg_result", ">", "0", ")", ".", "sum", "(", ")", ".", "float", "(", ")", "-", "correct", "\n", "rpn_iou", "=", "correct", "/", "torch", ".", "clamp", "(", "union", ",", "min", "=", "1.0", ")", "\n", "total_rpn_iou", "+=", "rpn_iou", ".", "item", "(", ")", "\n", "\n", "", "", "", "disp_dict", "=", "{", "'mode'", ":", "mode", ",", "'recall'", ":", "'%d/%d'", "%", "(", "total_recalled_bbox_list", "[", "3", "]", ",", "total_gt_bbox", ")", "}", "\n", "progress_bar", ".", "set_postfix", "(", "disp_dict", ")", "\n", "progress_bar", ".", "update", "(", ")", "\n", "\n", "# scores thresh", "\n", "inds", "=", "norm_scores", ">", "cfg", ".", "RCNN", ".", "SCORE_THRESH", "\n", "\n", "for", "k", "in", "range", "(", "batch_size", ")", ":", "\n", "            ", "cur_inds", "=", "inds", "[", "k", "]", ".", "view", "(", "-", "1", ")", "\n", "if", "cur_inds", ".", "sum", "(", ")", "==", "0", ":", "\n", "                ", "continue", "\n", "\n", "", "pred_boxes3d_selected", "=", "pred_boxes3d", "[", "k", ",", "cur_inds", "]", "\n", "raw_scores_selected", "=", "raw_scores", "[", "k", ",", "cur_inds", "]", "\n", "feat_selected", "=", "rcnn_feat", "[", "k", ",", "cur_inds", "]", "\n", "norm_scores_selected", "=", "norm_scores", "[", "k", ",", "cur_inds", "]", "\n", "\n", "# NMS thresh", "\n", "# rotated nms", "\n", "boxes_bev_selected", "=", "kitti_utils", ".", "boxes3d_to_bev_torch", "(", "pred_boxes3d_selected", ")", "\n", "keep_idx", "=", "iou3d_utils", ".", "nms_gpu", "(", "boxes_bev_selected", ",", "raw_scores_selected", ",", "cfg", ".", "RCNN", ".", "NMS_THRESH", ")", ".", "view", "(", "-", "1", ")", "\n", "pred_boxes3d_selected", "=", "pred_boxes3d_selected", "[", "keep_idx", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "scores_selected", "=", "norm_scores_selected", "[", "keep_idx", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "feat_selected", "=", "feat_selected", "[", "keep_idx", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "cur_sample_id", "=", "sample_id", "[", "k", "]", "\n", "calib", "=", "dataset", ".", "get_calib", "(", "cur_sample_id", ")", "\n", "final_total", "+=", "pred_boxes3d_selected", ".", "shape", "[", "0", "]", "\n", "image_shape", "=", "dataset", ".", "get_image_shape", "(", "cur_sample_id", ")", "\n", "save_kitti_detection_format", "(", "cur_sample_id", ",", "calib", ",", "pred_boxes3d_selected", ",", "detection_res_txt_dir", ",", "\n", "scores_selected", ",", "image_shape", ",", "feat_selected", ",", "detection_res_feat_dir", ")", "\n", "\n", "", "", "progress_bar", ".", "close", "(", ")", "\n", "# dump empty files", "\n", "image_idx_list", "=", "dataset", ".", "image_idx_list", "\n", "empty_cnt", "=", "0", "\n", "for", "k", "in", "range", "(", "image_idx_list", ".", "__len__", "(", ")", ")", ":", "\n", "        ", "cur_file", "=", "os", ".", "path", ".", "join", "(", "detection_res_txt_dir", ",", "'%06d.txt'", "%", "int", "(", "image_idx_list", "[", "k", "]", ")", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "cur_file", ")", ":", "\n", "            ", "with", "open", "(", "cur_file", ",", "'w'", ")", ":", "\n", "                ", "pass", "\n", "", "empty_cnt", "+=", "1", "\n", "logger", ".", "info", "(", "'empty_cnt=%d: dump empty file %s'", "%", "(", "empty_cnt", ",", "cur_file", ")", ")", "\n", "\n", "", "", "if", "not", "args", ".", "test", ":", "\n", "        ", "logger", ".", "info", "(", "'-------------------performance of epoch %s---------------------'", "%", "epoch_id", ")", "\n", "avg_rpn_iou", "=", "(", "total_rpn_iou", "/", "max", "(", "cnt", ",", "1", ")", ")", "\n", "avg_cls_acc", "=", "(", "total_cls_acc", "/", "max", "(", "cnt", ",", "1", ")", ")", "\n", "avg_cls_acc_refined", "=", "(", "total_cls_acc_refined", "/", "max", "(", "cnt", ",", "1", ")", ")", "\n", "avg_det_num", "=", "(", "final_total", "/", "max", "(", "len", "(", "dataset", ")", ",", "1", ")", ")", "\n", "logger", ".", "info", "(", "'final average detections: %.3f'", "%", "avg_det_num", ")", "\n", "logger", ".", "info", "(", "'final average rpn_iou refined: %.3f'", "%", "avg_rpn_iou", ")", "\n", "logger", ".", "info", "(", "'final average cls acc: %.3f'", "%", "avg_cls_acc", ")", "\n", "logger", ".", "info", "(", "'final average cls acc refined: %.3f'", "%", "avg_cls_acc_refined", ")", "\n", "\n", "for", "idx", ",", "thresh", "in", "enumerate", "(", "thresh_list", ")", ":", "\n", "            ", "cur_roi_recall", "=", "total_roi_recalled_bbox_list", "[", "idx", "]", "/", "max", "(", "total_gt_bbox", ",", "1", ")", "\n", "logger", ".", "info", "(", "'total roi bbox recall(thresh=%.3f): %d / %d = %f'", "%", "(", "thresh", ",", "total_roi_recalled_bbox_list", "[", "idx", "]", ",", "\n", "total_gt_bbox", ",", "cur_roi_recall", ")", ")", "\n", "\n", "", "for", "idx", ",", "thresh", "in", "enumerate", "(", "thresh_list", ")", ":", "\n", "            ", "cur_recall", "=", "total_recalled_bbox_list", "[", "idx", "]", "/", "max", "(", "total_gt_bbox", ",", "1", ")", "\n", "logger", ".", "info", "(", "'total bbox recall(thresh=%.3f): %d / %d = %f'", "%", "(", "thresh", ",", "total_recalled_bbox_list", "[", "idx", "]", ",", "\n", "total_gt_bbox", ",", "cur_recall", ")", ")", "\n", "\n", "", "logger", ".", "info", "(", "'Averate Precision:'", ")", "\n", "name_to_class", "=", "{", "'Car'", ":", "0", ",", "'Pedestrian'", ":", "1", ",", "'Cyclist'", ":", "2", "}", "\n", "ap_result_str", ",", "ap_dict", "=", "evaluate_detection", "(", "dataset", ".", "label_dir", ",", "detection_res_txt_dir", ",", "\n", "image_idx_list", "=", "image_idx_list", ",", "\n", "current_class", "=", "name_to_class", "[", "cfg", ".", "CLASSES", "]", ")", "\n", "logger", ".", "info", "(", "ap_result_str", ")", "\n", "\n", "", "logger", ".", "info", "(", "'result is saved to: %s\\n'", "%", "det_output", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kemo-huang_jmodt.tools.eval.save_kitti_detection_format": [[245, 275], ["jmodt.utils.kitti_utils.boxes3d_to_corners3d", "calib.corners3d_to_img_boxes", "numpy.clip", "numpy.clip", "numpy.clip", "numpy.clip", "numpy.logical_and", "os.path.join", "open", "range", "os.path.join", "numpy.save", "numpy.arctan2", "print", "feat[].astype", "numpy.sign"], "function", ["home.repos.pwc.inspect_result.kemo-huang_jmodt.utils.kitti_utils.boxes3d_to_corners3d", "home.repos.pwc.inspect_result.kemo-huang_jmodt.utils.calibration.Calibration.corners3d_to_img_boxes"], ["", "def", "save_kitti_detection_format", "(", "sample_id", ",", "calib", ",", "bbox3d", ",", "kitti_output_dir", ",", "scores", ",", "img_shape", ",", "\n", "feat", "=", "None", ",", "feat_output_dir", "=", "None", ")", ":", "\n", "    ", "corners3d", "=", "kitti_utils", ".", "boxes3d_to_corners3d", "(", "bbox3d", ")", "\n", "img_boxes", ",", "_", "=", "calib", ".", "corners3d_to_img_boxes", "(", "corners3d", ")", "\n", "\n", "img_boxes", "[", ":", ",", "0", "]", "=", "np", ".", "clip", "(", "img_boxes", "[", ":", ",", "0", "]", ",", "0", ",", "img_shape", "[", "1", "]", "-", "1", ")", "\n", "img_boxes", "[", ":", ",", "1", "]", "=", "np", ".", "clip", "(", "img_boxes", "[", ":", ",", "1", "]", ",", "0", ",", "img_shape", "[", "0", "]", "-", "1", ")", "\n", "img_boxes", "[", ":", ",", "2", "]", "=", "np", ".", "clip", "(", "img_boxes", "[", ":", ",", "2", "]", ",", "0", ",", "img_shape", "[", "1", "]", "-", "1", ")", "\n", "img_boxes", "[", ":", ",", "3", "]", "=", "np", ".", "clip", "(", "img_boxes", "[", ":", ",", "3", "]", ",", "0", ",", "img_shape", "[", "0", "]", "-", "1", ")", "\n", "\n", "img_boxes_w", "=", "img_boxes", "[", ":", ",", "2", "]", "-", "img_boxes", "[", ":", ",", "0", "]", "\n", "img_boxes_h", "=", "img_boxes", "[", ":", ",", "3", "]", "-", "img_boxes", "[", ":", ",", "1", "]", "\n", "box_valid_mask", "=", "np", ".", "logical_and", "(", "img_boxes_w", "<", "img_shape", "[", "1", "]", "*", "0.8", ",", "img_boxes_h", "<", "img_shape", "[", "0", "]", "*", "0.8", ")", "\n", "\n", "kitti_output_file", "=", "os", ".", "path", ".", "join", "(", "kitti_output_dir", ",", "'%06d.txt'", "%", "sample_id", ")", "\n", "with", "open", "(", "kitti_output_file", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "for", "k", "in", "range", "(", "bbox3d", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "if", "not", "box_valid_mask", "[", "k", "]", ":", "\n", "                ", "continue", "\n", "", "x", ",", "z", ",", "ry", "=", "bbox3d", "[", "k", ",", "0", "]", ",", "bbox3d", "[", "k", ",", "2", "]", ",", "bbox3d", "[", "k", ",", "6", "]", "\n", "beta", "=", "np", ".", "arctan2", "(", "z", ",", "x", ")", "\n", "alpha", "=", "-", "np", ".", "sign", "(", "beta", ")", "*", "np", ".", "pi", "/", "2", "+", "beta", "+", "ry", "\n", "\n", "print", "(", "'%s -1 -1 %.4f %.4f %.4f %.4f %.4f %.4f %.4f %.4f %.4f %.4f %.4f %.4f %.4f'", "%", "\n", "(", "cfg", ".", "CLASSES", ",", "alpha", ",", "img_boxes", "[", "k", ",", "0", "]", ",", "img_boxes", "[", "k", ",", "1", "]", ",", "img_boxes", "[", "k", ",", "2", "]", ",", "img_boxes", "[", "k", ",", "3", "]", ",", "\n", "bbox3d", "[", "k", ",", "3", "]", ",", "bbox3d", "[", "k", ",", "4", "]", ",", "bbox3d", "[", "k", ",", "5", "]", ",", "bbox3d", "[", "k", ",", "0", "]", ",", "bbox3d", "[", "k", ",", "1", "]", ",", "bbox3d", "[", "k", ",", "2", "]", ",", "\n", "bbox3d", "[", "k", ",", "6", "]", ",", "scores", "[", "k", "]", ")", ",", "file", "=", "f", ")", "\n", "", "", "if", "feat", "is", "not", "None", ":", "\n", "        ", "output_file", "=", "os", ".", "path", ".", "join", "(", "feat_output_dir", ",", "'%06d.npy'", "%", "sample_id", ")", "\n", "np", ".", "save", "(", "output_file", ",", "feat", "[", "box_valid_mask", "]", ".", "astype", "(", "np", ".", "float32", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kemo-huang_jmodt.tools.eval.convert_det_sample_to_seq_frame": [[277, 292], ["open", "f.readlines", "line.split", "open", "f.readlines", "line.split"], "function", ["None"], ["", "", "def", "convert_det_sample_to_seq_frame", "(", "seq2sample_path", ",", "sample2frame_path", ")", ":", "\n", "    ", "seq2sample_dict", "=", "{", "}", "\n", "sample2frame_dict", "=", "{", "}", "\n", "with", "open", "(", "seq2sample_path", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "lines", "=", "f", ".", "readlines", "(", ")", "\n", "", "for", "line", "in", "lines", ":", "\n", "        ", "split_line", "=", "line", ".", "split", "(", ")", "\n", "seq_id", "=", "split_line", "[", "0", "]", "\n", "seq2sample_dict", "[", "seq_id", "]", "=", "split_line", "[", "1", ":", "]", "\n", "", "with", "open", "(", "sample2frame_path", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "lines", "=", "f", ".", "readlines", "(", ")", "\n", "", "for", "line", "in", "lines", ":", "\n", "        ", "split_line", "=", "line", ".", "split", "(", ")", "\n", "sample2frame_dict", "[", "split_line", "[", "0", "]", "]", "=", "split_line", "[", "2", "]", "\n", "", "return", "seq2sample_dict", ",", "sample2frame_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.kemo-huang_jmodt.tools.eval.eval_tracking": [[294, 392], ["os.path.join", "os.makedirs", "logger.info", "logger.info", "jmodt.detection.modeling.point_rcnn.PointRCNN", "jmodt.detection.modeling.point_rcnn.PointRCNN.eval", "jmodt.detection.modeling.point_rcnn.PointRCNN.cuda", "jmodt.utils.train_utils.load_checkpoint", "jmodt.tracking.tracker.Tracker", "eval.convert_det_sample_to_seq_frame", "logger.info", "os.path.join", "os.path.join", "open", "tqdm.tqdm", "tracker.Tracker.reset", "open.close", "tqdm.tqdm.close", "os.path.join", "jmodt.tracking.kitti_evaluate.evaluate", "str().zfill", "os.path.join", "torch.no_grad", "range", "len", "numpy.array", "numpy.load", "torch.from_numpy().cuda", "numpy.empty", "range", "numpy.array", "int", "time.time", "tracker.Tracker.update", "tqdm.tqdm.set_postfix", "tqdm.tqdm.update", "eval.save_kitti_tracking_format", "str", "open", "f.readlines", "len", "tqdm.tqdm.update", "os.path.join", "len", "len", "len", "time.time", "os.path.join", "jmodt.utils.object3d.Object3d", "len", "len", "torch.from_numpy", "len"], "function", ["home.repos.pwc.inspect_result.kemo-huang_jmodt.utils.train_utils.load_checkpoint", "home.repos.pwc.inspect_result.kemo-huang_jmodt.tools.eval.convert_det_sample_to_seq_frame", "home.repos.pwc.inspect_result.kemo-huang_jmodt.tracking.tracker.Tracker.reset", "home.repos.pwc.inspect_result.kemo-huang_jmodt.tracking.kitti_evaluate.evaluate", "home.repos.pwc.inspect_result.kemo-huang_jmodt.tracking.kalman.KalmanPSR.update", "home.repos.pwc.inspect_result.kemo-huang_jmodt.tracking.kalman.KalmanPSR.update", "home.repos.pwc.inspect_result.kemo-huang_jmodt.tools.eval.save_kitti_tracking_format", "home.repos.pwc.inspect_result.kemo-huang_jmodt.tracking.kalman.KalmanPSR.update"], ["", "def", "eval_tracking", "(", "logger", ")", ":", "\n", "    ", "part", "=", "'test'", "if", "args", ".", "test", "else", "'val'", "\n", "tracking_res_dir", "=", "os", ".", "path", ".", "join", "(", "args", ".", "output_dir", ",", "args", ".", "tag", ",", "part", ")", "\n", "os", ".", "makedirs", "(", "tracking_res_dir", ",", "exist_ok", "=", "True", ")", "\n", "det_res_dir", "=", "args", ".", "det_output", "\n", "\n", "# MOT hyper-parameters", "\n", "t_miss", "=", "2", "\n", "t_hit", "=", "0", "\n", "w_cls", "=", "100", "\n", "w_app", "=", "2", "\n", "w_iou", "=", "10", "\n", "w_dis", "=", "10", "\n", "w_se", "=", "1", "\n", "cls_threshold", "=", "0.85", "\n", "\n", "logger", ".", "info", "(", "\"**********************Start evaluate tracking**********************\"", ")", "\n", "logger", ".", "info", "(", "f't_miss={t_miss}, t_hit={t_hit}, '", "\n", "f'w_cls={w_cls}, w_app={w_app}, w_iou={w_iou}, w_dis={w_dis}, w_se={w_se}'", ")", "\n", "\n", "model", "=", "PointRCNN", "(", "num_classes", "=", "2", ",", "mode", "=", "'TEST'", "if", "args", ".", "test", "else", "'EVAL'", ")", "\n", "model", ".", "eval", "(", ")", "\n", "model", ".", "cuda", "(", ")", "\n", "\n", "# load checkpoint", "\n", "train_utils", ".", "load_checkpoint", "(", "model", ",", "filename", "=", "args", ".", "ckpt", ",", "logger", "=", "logger", ")", "\n", "\n", "car_tracker", "=", "tracker", ".", "Tracker", "(", "\n", "link_model", "=", "model", ".", "rcnn_net", ".", "link_layer", ",", "\n", "se_model", "=", "model", ".", "rcnn_net", ".", "se_layer", ",", "\n", "t_miss", "=", "t_miss", ",", "t_hit", "=", "t_hit", ",", "\n", "w_cls", "=", "w_cls", ",", "w_app", "=", "w_app", ",", "w_iou", "=", "w_iou", ",", "w_dis", "=", "w_dis", ",", "w_se", "=", "w_se", ",", "\n", "hungarian", "=", "args", ".", "hungarian", ")", "\n", "\n", "total_time", "=", "0", "\n", "total_frames", "=", "0", "\n", "\n", "seq2sample_dict", ",", "sample2frame_dict", "=", "convert_det_sample_to_seq_frame", "(", "\n", "os", ".", "path", ".", "join", "(", "args", ".", "data_root", ",", "'tracking_object'", ",", "'testing'", "if", "args", ".", "test", "else", "'training'", ",", "'seq2sample.txt'", ")", ",", "\n", "os", ".", "path", ".", "join", "(", "args", ".", "data_root", ",", "'tracking_object'", ",", "'testing'", "if", "args", ".", "test", "else", "'training'", ",", "'sample2frame.txt'", ")", "\n", ")", "\n", "\n", "seq_list", "=", "[", "str", "(", "i", ")", ".", "zfill", "(", "4", ")", "for", "i", "in", "range", "(", "29", ")", "]", "if", "args", ".", "test", "else", "VALID_SEQ_ID", "\n", "for", "seq_id", "in", "seq_list", ":", "\n", "        ", "sample_ids", "=", "seq2sample_dict", "[", "seq_id", "]", "\n", "out_file", "=", "open", "(", "os", ".", "path", ".", "join", "(", "tracking_res_dir", ",", "f'{seq_id}.txt'", ")", ",", "'w+'", ")", "\n", "tbar", "=", "tqdm", ".", "tqdm", "(", "total", "=", "len", "(", "sample_ids", ")", ",", "desc", "=", "seq_id", ",", "dynamic_ncols", "=", "True", ",", "leave", "=", "True", ")", "\n", "car_tracker", ".", "reset", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "sample_id", "in", "sample_ids", ":", "\n", "                ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "det_res_dir", ",", "'txt'", ",", "f'{sample_id}.txt'", ")", ",", "'r'", ")", "as", "f", ":", "\n", "                    ", "object_lines", "=", "f", ".", "readlines", "(", ")", "\n", "", "if", "len", "(", "object_lines", ")", "==", "0", ":", "\n", "                    ", "tbar", ".", "update", "(", ")", "\n", "continue", "\n", "", "car_objects", "=", "np", ".", "array", "(", "[", "Object3d", "(", "line", ")", "for", "line", "in", "object_lines", "]", ")", "\n", "car_features", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "det_res_dir", ",", "'feat'", ",", "f'{sample_id}.npy'", ")", ")", "\n", "assert", "len", "(", "car_features", ")", "==", "len", "(", "car_objects", ")", ",", "f\"obj {len(car_objects)} != feat {len(car_features)}\"", "\n", "\n", "car_features", "=", "torch", ".", "from_numpy", "(", "car_features", ")", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "boxes_3d", "=", "np", ".", "empty", "(", "(", "len", "(", "car_objects", ")", ",", "7", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "for", "d", "in", "range", "(", "len", "(", "car_objects", ")", ")", ":", "\n", "                    ", "boxes_3d", "[", "d", ",", ":", "3", "]", "=", "car_objects", "[", "d", "]", ".", "pos", "\n", "boxes_3d", "[", "d", ",", "3", "]", "=", "car_objects", "[", "d", "]", ".", "h", "\n", "boxes_3d", "[", "d", ",", "4", "]", "=", "car_objects", "[", "d", "]", ".", "w", "\n", "boxes_3d", "[", "d", ",", "5", "]", "=", "car_objects", "[", "d", "]", ".", "l", "\n", "boxes_3d", "[", "d", ",", "6", "]", "=", "car_objects", "[", "d", "]", ".", "ry", "\n", "", "scores", "=", "np", ".", "array", "(", "[", "obj", ".", "score", "for", "obj", "in", "car_objects", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "mask", "=", "scores", ">", "cls_threshold", "\n", "\n", "boxes_3d", "=", "boxes_3d", "[", "mask", "]", "\n", "scores", "=", "scores", "[", "mask", "]", "\n", "car_features", "=", "car_features", "[", "mask", "]", "\n", "car_objects", "=", "car_objects", "[", "mask", "]", "\n", "\n", "frame_id", "=", "sample2frame_dict", "[", "sample_id", "]", "\n", "frame_id", "=", "int", "(", "frame_id", ")", "\n", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "car_results", "=", "car_tracker", ".", "update", "(", "frame_id", ",", "boxes_3d", ",", "scores", ",", "car_features", ",", "car_objects", ")", "\n", "frame_time", "=", "time", ".", "time", "(", ")", "-", "start_time", "\n", "\n", "total_time", "+=", "frame_time", "\n", "total_frames", "+=", "1", "\n", "tbar", ".", "set_postfix", "(", "{", "'time'", ":", "frame_time", "}", ")", "\n", "tbar", ".", "update", "(", ")", "\n", "\n", "save_kitti_tracking_format", "(", "car_results", ",", "frame_id", ",", "out_file", ")", "\n", "", "", "out_file", ".", "close", "(", ")", "\n", "tbar", ".", "close", "(", ")", "\n", "", "logger", ".", "info", "(", "\n", "f'total frames: {total_frames}, total time: {total_time}, frames per second: {total_frames / total_time}'", ")", "\n", "\n", "if", "not", "args", ".", "test", ":", "\n", "        ", "gt_path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "data_root", ",", "'tracking'", ",", "'training'", ")", "\n", "evaluate_tracking", "(", "\n", "result_sha", "=", "args", ".", "tag", ",", "result_root", "=", "args", ".", "output_dir", ",", "part", "=", "part", ",", "gt_path", "=", "gt_path", ",", "logger", "=", "logger", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kemo-huang_jmodt.tools.eval.save_kitti_tracking_format": [[394, 402], ["out_file.write", "int", "int"], "function", ["None"], ["", "", "def", "save_kitti_tracking_format", "(", "results", ",", "frame_id", ",", "out_file", ")", ":", "\n", "    ", "for", "tid", ",", "info", ",", "score", "in", "results", ":", "\n", "        ", "out_file", ".", "write", "(", "\n", "'%d %d %s %d %d %.2f %.2f %.2f %.2f %.2f %.2f %.2f %.2f %.2f %.2f %.2f %.2f %.2f\\n'", "%", "(", "\n", "frame_id", ",", "tid", ",", "info", ".", "cls_type", ",", "int", "(", "info", ".", "truncation", ")", ",", "int", "(", "info", ".", "occlusion", ")", ",", "info", ".", "alpha", ",", "\n", "info", ".", "box2d", "[", "0", "]", ",", "info", ".", "box2d", "[", "1", "]", ",", "info", ".", "box2d", "[", "2", "]", ",", "info", ".", "box2d", "[", "3", "]", ",", "\n", "info", ".", "h", ",", "info", ".", "w", ",", "info", ".", "l", ",", "info", ".", "pos", "[", "0", "]", ",", "info", ".", "pos", "[", "1", "]", ",", "info", ".", "pos", "[", "2", "]", ",", "\n", "info", ".", "ry", ",", "info", ".", "score", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.kemo-huang_jmodt.tools.eval.main": [[406, 438], ["logging.getLogger", "logging.getLogger.setLevel", "logging.Formatter", "logging.StreamHandler", "logging.StreamHandler.setFormatter", "logging.StreamHandler.setLevel", "logging.getLogger.addHandler", "os.makedirs", "os.path.join", "logging.FileHandler", "logging.FileHandler.setFormatter", "logging.FileHandler.setLevel", "logging.getLogger.addHandler", "eval.eval_tracking", "os.makedirs", "os.path.join", "logging.FileHandler", "logging.FileHandler.setFormatter", "logging.FileHandler.setLevel", "logging.getLogger.addHandler", "eval.eval_joint_detection", "logging.getLogger.removeHandler", "os.path.join", "datetime.datetime.now().strftime", "datetime.datetime.now().strftime", "datetime.datetime.now", "datetime.datetime.now"], "function", ["home.repos.pwc.inspect_result.kemo-huang_jmodt.tools.eval.eval_tracking", "home.repos.pwc.inspect_result.kemo-huang_jmodt.tools.eval.eval_joint_detection"], ["", "", "def", "main", "(", ")", ":", "\n", "    ", "logger", "=", "logging", ".", "getLogger", "(", "__name__", ")", "\n", "logger", ".", "setLevel", "(", "level", "=", "logging", ".", "INFO", ")", "\n", "formatter", "=", "logging", ".", "Formatter", "(", "'%(message)s'", ")", "\n", "\n", "ch", "=", "logging", ".", "StreamHandler", "(", ")", "\n", "ch", ".", "setFormatter", "(", "formatter", ")", "\n", "ch", ".", "setLevel", "(", "level", "=", "logging", ".", "INFO", ")", "\n", "logger", ".", "addHandler", "(", "ch", ")", "\n", "\n", "if", "not", "args", ".", "only_tracking", ":", "\n", "        ", "os", ".", "makedirs", "(", "args", ".", "det_output", ",", "exist_ok", "=", "True", ")", "\n", "det_log_path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "det_output", ",", "f'{datetime.now().strftime(\"%Y-%m-%d-%S-%M-%H\")}.log'", ")", "\n", "det_fh", "=", "logging", ".", "FileHandler", "(", "det_log_path", ")", "\n", "det_fh", ".", "setFormatter", "(", "formatter", ")", "\n", "det_fh", ".", "setLevel", "(", "level", "=", "logging", ".", "INFO", ")", "\n", "logger", ".", "addHandler", "(", "det_fh", ")", "\n", "\n", "# start eval detection", "\n", "eval_joint_detection", "(", "logger", ")", "\n", "\n", "logger", ".", "removeHandler", "(", "det_fh", ")", "\n", "\n", "", "os", ".", "makedirs", "(", "os", ".", "path", ".", "join", "(", "args", ".", "output_dir", ",", "args", ".", "tag", ")", ",", "exist_ok", "=", "True", ")", "\n", "trk_log_path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "output_dir", ",", "args", ".", "tag", ",", "f'{datetime.now().strftime(\"%Y-%m-%d-%S-%M-%H\")}.log'", ")", "\n", "trk_fh", "=", "logging", ".", "FileHandler", "(", "trk_log_path", ")", "\n", "trk_fh", ".", "setFormatter", "(", "formatter", ")", "\n", "trk_fh", ".", "setLevel", "(", "level", "=", "logging", ".", "INFO", ")", "\n", "logger", ".", "addHandler", "(", "trk_fh", ")", "\n", "\n", "# start eval tracking", "\n", "eval_tracking", "(", "logger", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kemo-huang_jmodt.tools.kitti_converter.init_or_clear_dir": [[12, 19], ["os.path.exists", "os.makedirs", "os.listdir", "os.path.join", "os.remove"], "function", ["None"], ["def", "init_or_clear_dir", "(", "path", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "exists", "(", "path", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "path", ")", "\n", "", "else", ":", "\n", "        ", "for", "f", "in", "os", ".", "listdir", "(", "path", ")", ":", "\n", "            ", "f_path", "=", "os", ".", "path", ".", "join", "(", "path", ",", "f", ")", "\n", "os", ".", "remove", "(", "f_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kemo-huang_jmodt.tools.kitti_converter.create_train_sample_data": [[21, 144], ["os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "range", "print", "os.path.join", "os.makedirs", "kitti_converter.init_or_clear_dir", "kitti_converter.init_or_clear_dir", "kitti_converter.init_or_clear_dir", "kitti_converter.init_or_clear_dir", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.listdir", "frames.sort", "print", "open", "range", "open", "range", "open", "f.readlines", "line.split", "open", "open", "open", "len", "open", "f.readlines", "str().zfill", "os.path.join", "str().zfill", "f.write", "os.path.join", "f.write", "f.write", "os.path.join", "os.path.join", "range", "os.path.join", "os.path.join", "range", "f.split", "line.strip().split", "frame_id_int.zfill", "int", "label_dict[].append", "os.path.isfile", "shutil.copyfile", "os.path.isfile", "shutil.copyfile", "os.path.isfile", "shutil.copyfile", "open", "f.writelines", "seq_to_sample.keys", "seq_to_sample[].append", "f.write", "f.write", "f.write", "f.write", "str", "str", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "str", "len", "len", "line.strip"], "function", ["home.repos.pwc.inspect_result.kemo-huang_jmodt.tools.kitti_converter.init_or_clear_dir", "home.repos.pwc.inspect_result.kemo-huang_jmodt.tools.kitti_converter.init_or_clear_dir", "home.repos.pwc.inspect_result.kemo-huang_jmodt.tools.kitti_converter.init_or_clear_dir", "home.repos.pwc.inspect_result.kemo-huang_jmodt.tools.kitti_converter.init_or_clear_dir"], ["", "", "", "def", "create_train_sample_data", "(", "input_root", ",", "output_root", ",", "init_or_clear_dirs", "=", "True", ",", "only_labels", "=", "False", ")", ":", "\n", "    ", "res_training", "=", "os", ".", "path", ".", "join", "(", "output_root", ",", "'training'", ")", "\n", "\n", "res_calib", "=", "os", ".", "path", ".", "join", "(", "res_training", ",", "'calib'", ")", "\n", "res_image", "=", "os", ".", "path", ".", "join", "(", "res_training", ",", "'image_2'", ")", "\n", "res_label", "=", "os", ".", "path", ".", "join", "(", "res_training", ",", "'label_2'", ")", "\n", "res_lidar", "=", "os", ".", "path", ".", "join", "(", "res_training", ",", "'velodyne'", ")", "\n", "\n", "if", "init_or_clear_dirs", ":", "\n", "        ", "init_or_clear_dir", "(", "res_calib", ")", "\n", "init_or_clear_dir", "(", "res_image", ")", "\n", "init_or_clear_dir", "(", "res_label", ")", "\n", "init_or_clear_dir", "(", "res_lidar", ")", "\n", "\n", "", "in_training", "=", "os", ".", "path", ".", "join", "(", "input_root", ",", "'training'", ")", "\n", "\n", "sample_id", "=", "0", "\n", "used_tid", "=", "0", "# start from tid = 1", "\n", "tid_dict", "=", "{", "}", "# change sparse tid to compact tid for all sequences", "\n", "\n", "sample_to_real_frame", "=", "{", "}", "\n", "seq_to_sample", "=", "{", "}", "\n", "\n", "for", "seq", "in", "range", "(", "21", ")", ":", "\n", "        ", "seq", "=", "'%04d'", "%", "seq", "\n", "tracking_image", "=", "os", ".", "path", ".", "join", "(", "in_training", ",", "'image_02'", ",", "seq", ")", "\n", "tracking_lidar", "=", "os", ".", "path", ".", "join", "(", "in_training", ",", "'velodyne'", ",", "seq", ")", "\n", "tracking_calib", "=", "os", ".", "path", ".", "join", "(", "in_training", ",", "'calib'", ",", "f'{seq}.txt'", ")", "\n", "tracking_label", "=", "os", ".", "path", ".", "join", "(", "in_training", ",", "'label_02'", ",", "f'{seq}.txt'", ")", "\n", "# get number of frames", "\n", "lidar_files", "=", "os", ".", "listdir", "(", "tracking_lidar", ")", "\n", "frames", "=", "[", "f", ".", "split", "(", "'.'", ")", "[", "0", "]", "for", "f", "in", "lidar_files", "]", "\n", "frames", ".", "sort", "(", ")", "\n", "print", "(", "'processing sequence'", ",", "seq", ",", "', length:'", ",", "len", "(", "frames", ")", ")", "\n", "\n", "label_dict", "=", "{", "}", "\n", "for", "frame", "in", "frames", ":", "\n", "            ", "label_dict", "[", "frame", "]", "=", "[", "]", "\n", "", "with", "open", "(", "tracking_label", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "lines", "=", "f", ".", "readlines", "(", ")", "\n", "for", "line", "in", "lines", ":", "\n", "                ", "split_line", "=", "line", ".", "strip", "(", ")", ".", "split", "(", ")", "\n", "frame_id_int", "=", "split_line", "[", "0", "]", "\n", "the_frame", "=", "frame_id_int", ".", "zfill", "(", "6", ")", "\n", "if", "the_frame", "not", "in", "label_dict", ":", "\n", "                    ", "continue", "\n", "", "tid", "=", "int", "(", "split_line", "[", "1", "]", ")", "\n", "if", "tid", "!=", "-", "1", ":", "\n", "                    ", "if", "f'{seq}_{tid}'", "not", "in", "tid_dict", ":", "\n", "                        ", "used_tid", "+=", "1", "\n", "tid_dict", "[", "f'{seq}_{tid}'", "]", "=", "used_tid", "\n", "tid", "=", "used_tid", "\n", "", "else", ":", "\n", "                        ", "tid", "=", "tid_dict", "[", "f'{seq}_{tid}'", "]", "\n", "", "", "obj", "=", "\"\"", "\n", "for", "s", "in", "split_line", "[", "2", ":", "]", ":", "\n", "                    ", "obj", "+=", "s", "+", "\" \"", "\n", "", "obj", "+=", "str", "(", "tid", ")", "+", "\"\\n\"", "\n", "label_dict", "[", "the_frame", "]", ".", "append", "(", "obj", ")", "\n", "\n", "", "", "for", "frame", "in", "frames", ":", "\n", "            ", "sample_str", "=", "str", "(", "sample_id", ")", ".", "zfill", "(", "6", ")", "\n", "if", "not", "only_labels", ":", "\n", "                ", "assert", "os", ".", "path", ".", "isfile", "(", "os", ".", "path", ".", "join", "(", "tracking_image", ",", "f'{frame}.png'", ")", ")", "\n", "shutil", ".", "copyfile", "(", "os", ".", "path", ".", "join", "(", "tracking_image", ",", "f'{frame}.png'", ")", ",", "\n", "os", ".", "path", ".", "join", "(", "res_image", ",", "f'{sample_str}.png'", ")", ")", "\n", "assert", "os", ".", "path", ".", "isfile", "(", "os", ".", "path", ".", "join", "(", "tracking_lidar", ",", "f'{frame}.bin'", ")", ")", "\n", "shutil", ".", "copyfile", "(", "os", ".", "path", ".", "join", "(", "tracking_lidar", ",", "f'{frame}.bin'", ")", ",", "\n", "os", ".", "path", ".", "join", "(", "res_lidar", ",", "f'{sample_str}.bin'", ")", ")", "\n", "assert", "os", ".", "path", ".", "isfile", "(", "tracking_calib", ")", "\n", "shutil", ".", "copyfile", "(", "tracking_calib", ",", "os", ".", "path", ".", "join", "(", "res_calib", ",", "f'{sample_str}.txt'", ")", ")", "\n", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "res_label", ",", "f'{sample_str}.txt'", ")", ",", "'w+'", ")", "as", "f", ":", "\n", "                ", "f", ".", "writelines", "(", "label_dict", "[", "frame", "]", ")", "\n", "", "sample_to_real_frame", "[", "sample_str", "]", "=", "(", "seq", ",", "frame", ")", "\n", "if", "seq", "in", "seq_to_sample", ".", "keys", "(", ")", ":", "\n", "                ", "seq_to_sample", "[", "seq", "]", ".", "append", "(", "sample_str", ")", "\n", "", "else", ":", "\n", "                ", "seq_to_sample", "[", "seq", "]", "=", "[", "sample_str", "]", "\n", "", "sample_id", "+=", "1", "\n", "\n", "", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "res_training", ",", "'sample2frame.txt'", ")", ",", "'w+'", ")", "as", "f", ":", "\n", "        ", "for", "cur_sample_id", "in", "range", "(", "sample_id", ")", ":", "\n", "            ", "cur_sample_id_str", "=", "str", "(", "cur_sample_id", ")", ".", "zfill", "(", "6", ")", "\n", "cur_seq", ",", "cur_frame", "=", "sample_to_real_frame", "[", "cur_sample_id_str", "]", "\n", "f", ".", "write", "(", "f'{cur_sample_id_str} {cur_seq} {cur_frame}\\n'", ")", "\n", "\n", "", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "res_training", ",", "'seq2sample.txt'", ")", ",", "'w+'", ")", "as", "f", ":", "\n", "        ", "for", "seq", "in", "range", "(", "21", ")", ":", "\n", "            ", "seq", "=", "'%04d'", "%", "seq", "\n", "f", ".", "write", "(", "f'{seq} '", ")", "\n", "sample_list", "=", "seq_to_sample", "[", "seq", "]", "\n", "for", "sample", "in", "sample_list", ":", "\n", "                ", "f", ".", "write", "(", "sample", "+", "' '", ")", "\n", "", "f", ".", "write", "(", "'\\n'", ")", "\n", "", "", "print", "(", "sample_id", ",", "used_tid", ")", "\n", "\n", "split_dir", "=", "os", ".", "path", ".", "join", "(", "output_root", ",", "'ImageSets'", ")", "\n", "os", ".", "makedirs", "(", "split_dir", ",", "exist_ok", "=", "True", ")", "\n", "\n", "training_seq_to_sample", "=", "{", "}", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "output_root", ",", "'training'", ",", "'seq2sample.txt'", ")", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "lines", "=", "f", ".", "readlines", "(", ")", "\n", "", "for", "line", "in", "lines", ":", "\n", "        ", "line_split", "=", "line", ".", "split", "(", ")", "\n", "training_seq_to_sample", "[", "line_split", "[", "0", "]", "]", "=", "line_split", "[", "1", ":", "]", "\n", "\n", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "split_dir", ",", "'train.txt'", ")", ",", "'w+'", ")", "as", "f", ":", "\n", "        ", "for", "seq", "in", "TRAIN_SEQ_ID", ":", "\n", "            ", "sample_list", "=", "training_seq_to_sample", "[", "seq", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "sample_list", ")", "-", "1", ")", ":", "\n", "                ", "f", ".", "write", "(", "f'{sample_list[i]} {sample_list[i + 1]}\\n'", ")", "\n", "\n", "", "", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "split_dir", ",", "'val.txt'", ")", ",", "'w+'", ")", "as", "f", ":", "\n", "        ", "for", "seq", "in", "VALID_SEQ_ID", ":", "\n", "            ", "sample_list", "=", "training_seq_to_sample", "[", "seq", "]", "\n", "for", "sample", "in", "sample_list", ":", "\n", "                ", "f", ".", "write", "(", "f'{sample}\\n'", ")", "\n", "\n", "", "", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "split_dir", ",", "'small_val.txt'", ")", ",", "'w+'", ")", "as", "f", ":", "\n", "        ", "for", "seq", "in", "SMALL_VAL_SEQ_ID", ":", "\n", "            ", "sample_list", "=", "training_seq_to_sample", "[", "seq", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "sample_list", ")", "-", "1", ")", ":", "\n", "                ", "f", ".", "write", "(", "f'{sample_list[i]} {sample_list[i + 1]}\\n'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kemo-huang_jmodt.tools.kitti_converter.create_test_sample_data": [[146, 220], ["os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.makedirs", "kitti_converter.init_or_clear_dir", "kitti_converter.init_or_clear_dir", "kitti_converter.init_or_clear_dir", "os.path.join", "os.path.join", "os.path.join", "os.listdir", "frames.sort", "print", "open", "range", "open", "range", "open", "f.readlines", "line.split", "open", "len", "str().zfill", "os.path.isfile", "shutil.copyfile", "os.path.isfile", "shutil.copyfile", "os.path.isfile", "shutil.copyfile", "os.path.join", "str().zfill", "f.write", "os.path.join", "f.write", "f.write", "os.path.join", "os.path.join", "f.split", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "seq_to_sample.keys", "seq_to_sample[].append", "f.write", "f.write", "str", "str"], "function", ["home.repos.pwc.inspect_result.kemo-huang_jmodt.tools.kitti_converter.init_or_clear_dir", "home.repos.pwc.inspect_result.kemo-huang_jmodt.tools.kitti_converter.init_or_clear_dir", "home.repos.pwc.inspect_result.kemo-huang_jmodt.tools.kitti_converter.init_or_clear_dir"], ["", "", "", "", "def", "create_test_sample_data", "(", "input_root", ",", "output_root", ",", "init_or_clear_dirs", "=", "True", ")", ":", "\n", "    ", "out_test_dir", "=", "os", ".", "path", ".", "join", "(", "output_root", ",", "'testing'", ")", "\n", "\n", "res_calib", "=", "os", ".", "path", ".", "join", "(", "out_test_dir", ",", "'calib'", ")", "\n", "res_image", "=", "os", ".", "path", ".", "join", "(", "out_test_dir", ",", "'image_2'", ")", "\n", "res_lidar", "=", "os", ".", "path", ".", "join", "(", "out_test_dir", ",", "'velodyne'", ")", "\n", "\n", "if", "init_or_clear_dirs", ":", "\n", "        ", "init_or_clear_dir", "(", "res_calib", ")", "\n", "init_or_clear_dir", "(", "res_image", ")", "\n", "init_or_clear_dir", "(", "res_lidar", ")", "\n", "\n", "", "in_test_dir", "=", "os", ".", "path", ".", "join", "(", "input_root", ",", "'testing'", ")", "\n", "sample_id", "=", "0", "\n", "sample_to_real_frame", "=", "{", "}", "\n", "seq_to_sample", "=", "{", "}", "\n", "\n", "for", "seq", "in", "TEST_SEQ_ID", ":", "\n", "        ", "tracking_image", "=", "os", ".", "path", ".", "join", "(", "in_test_dir", ",", "'image_02'", ",", "seq", ")", "\n", "tracking_lidar", "=", "os", ".", "path", ".", "join", "(", "in_test_dir", ",", "'velodyne'", ",", "seq", ")", "\n", "tracking_calib", "=", "os", ".", "path", ".", "join", "(", "in_test_dir", ",", "'calib'", ",", "f'{seq}.txt'", ")", "\n", "# get number of frames", "\n", "lidar_files", "=", "os", ".", "listdir", "(", "tracking_lidar", ")", "\n", "frames", "=", "[", "f", ".", "split", "(", "'.'", ")", "[", "0", "]", "for", "f", "in", "lidar_files", "]", "\n", "frames", ".", "sort", "(", ")", "\n", "print", "(", "'processing sequence'", ",", "seq", ",", "', length:'", ",", "len", "(", "frames", ")", ")", "\n", "\n", "for", "frame", "in", "frames", ":", "\n", "            ", "sample_str", "=", "str", "(", "sample_id", ")", ".", "zfill", "(", "6", ")", "\n", "assert", "os", ".", "path", ".", "isfile", "(", "os", ".", "path", ".", "join", "(", "tracking_image", ",", "f'{frame}.png'", ")", ")", "\n", "shutil", ".", "copyfile", "(", "os", ".", "path", ".", "join", "(", "tracking_image", ",", "f'{frame}.png'", ")", ",", "\n", "os", ".", "path", ".", "join", "(", "res_image", ",", "f'{sample_str}.png'", ")", ")", "\n", "assert", "os", ".", "path", ".", "isfile", "(", "os", ".", "path", ".", "join", "(", "tracking_lidar", ",", "f'{frame}.bin'", ")", ")", "\n", "shutil", ".", "copyfile", "(", "os", ".", "path", ".", "join", "(", "tracking_lidar", ",", "f'{frame}.bin'", ")", ",", "\n", "os", ".", "path", ".", "join", "(", "res_lidar", ",", "f'{sample_str}.bin'", ")", ")", "\n", "assert", "os", ".", "path", ".", "isfile", "(", "tracking_calib", ")", "\n", "shutil", ".", "copyfile", "(", "tracking_calib", ",", "os", ".", "path", ".", "join", "(", "res_calib", ",", "f'{sample_str}.txt'", ")", ")", "\n", "sample_to_real_frame", "[", "sample_str", "]", "=", "(", "seq", ",", "frame", ")", "\n", "if", "seq", "in", "seq_to_sample", ".", "keys", "(", ")", ":", "\n", "                ", "seq_to_sample", "[", "seq", "]", ".", "append", "(", "sample_str", ")", "\n", "", "else", ":", "\n", "                ", "seq_to_sample", "[", "seq", "]", "=", "[", "sample_str", "]", "\n", "", "sample_id", "+=", "1", "\n", "\n", "", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "out_test_dir", ",", "'sample2frame.txt'", ")", ",", "'w+'", ")", "as", "f", ":", "\n", "        ", "for", "cur_sample_id", "in", "range", "(", "sample_id", ")", ":", "\n", "            ", "cur_sample_id_str", "=", "str", "(", "cur_sample_id", ")", ".", "zfill", "(", "6", ")", "\n", "cur_seq", ",", "cur_frame", "=", "sample_to_real_frame", "[", "cur_sample_id_str", "]", "\n", "f", ".", "write", "(", "f'{cur_sample_id_str} {cur_seq} {cur_frame}\\n'", ")", "\n", "\n", "", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "out_test_dir", ",", "'seq2sample.txt'", ")", ",", "'w+'", ")", "as", "f", ":", "\n", "        ", "for", "seq", "in", "range", "(", "29", ")", ":", "\n", "            ", "seq", "=", "'%04d'", "%", "seq", "\n", "f", ".", "write", "(", "f'{seq} '", ")", "\n", "sample_list", "=", "seq_to_sample", "[", "seq", "]", "\n", "for", "sample", "in", "sample_list", ":", "\n", "                ", "f", ".", "write", "(", "sample", "+", "' '", ")", "\n", "", "f", ".", "write", "(", "'\\n'", ")", "\n", "\n", "", "", "split_dir", "=", "os", ".", "path", ".", "join", "(", "output_root", ",", "'ImageSets'", ")", "\n", "os", ".", "makedirs", "(", "split_dir", ",", "exist_ok", "=", "True", ")", "\n", "\n", "testing_seq_to_sample", "=", "{", "}", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "output_root", ",", "'testing'", ",", "'seq2sample.txt'", ")", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "lines", "=", "f", ".", "readlines", "(", ")", "\n", "", "for", "line", "in", "lines", ":", "\n", "        ", "line_split", "=", "line", ".", "split", "(", ")", "\n", "testing_seq_to_sample", "[", "line_split", "[", "0", "]", "]", "=", "line_split", "[", "1", ":", "]", "\n", "\n", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "split_dir", ",", "'test.txt'", ")", ",", "'w+'", ")", "as", "f", ":", "\n", "        ", "for", "seq", "in", "TEST_SEQ_ID", ":", "\n", "            ", "sample_list", "=", "testing_seq_to_sample", "[", "seq", "]", "\n", "for", "sample", "in", "sample_list", ":", "\n", "                ", "f", ".", "write", "(", "f'{sample}\\n'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kemo-huang_jmodt.tools.train.create_logger": [[31, 39], ["logging.basicConfig", "logging.StreamHandler", "logging.StreamHandler.setLevel", "logging.StreamHandler.setFormatter", "logging.getLogger().addHandler", "logging.getLogger", "logging.Formatter", "logging.getLogger"], "function", ["None"], ["def", "create_logger", "(", "log_file", ")", ":", "\n", "    ", "log_format", "=", "'%(asctime)s  %(levelname)5s  %(message)s'", "\n", "logging", ".", "basicConfig", "(", "level", "=", "logging", ".", "DEBUG", ",", "format", "=", "log_format", ",", "filename", "=", "log_file", ")", "\n", "console", "=", "logging", ".", "StreamHandler", "(", ")", "\n", "console", ".", "setLevel", "(", "logging", ".", "DEBUG", ")", "\n", "console", ".", "setFormatter", "(", "logging", ".", "Formatter", "(", "log_format", ")", ")", "\n", "logging", ".", "getLogger", "(", "__name__", ")", ".", "addHandler", "(", "console", ")", "\n", "return", "logging", ".", "getLogger", "(", "__name__", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kemo-huang_jmodt.tools.train.create_dataloader": [[41, 48], ["jmodt.detection.datasets.kitti_dataset.KittiDataset", "torch.utils.data.DataLoader"], "function", ["None"], ["", "def", "create_dataloader", "(", "logger", ",", "split", ")", ":", "\n", "    ", "data_set", "=", "KittiDataset", "(", "root_dir", "=", "args", ".", "data_root", ",", "npoints", "=", "cfg", ".", "RPN", ".", "NUM_POINTS", ",", "split", "=", "split", ",", "\n", "mode", "=", "'TRAIN'", ",", "logger", "=", "logger", ",", "classes", "=", "cfg", ".", "CLASSES", ",", "challenge", "=", "args", ".", "challenge", ")", "\n", "data_loader", "=", "DataLoader", "(", "data_set", ",", "batch_size", "=", "args", ".", "batch_size", ",", "pin_memory", "=", "True", ",", "shuffle", "=", "True", ",", "\n", "num_workers", "=", "4", ",", "collate_fn", "=", "data_set", ".", "collate_batch", ",", "\n", "drop_last", "=", "True", ")", "\n", "return", "data_set", ",", "data_loader", "\n", "\n"]], "home.repos.pwc.inspect_result.kemo-huang_jmodt.tools.train.main": [[50, 147], ["os.makedirs", "os.path.join", "train.create_logger", "create_logger.info", "create_logger.info", "vars().items", "jmodt.config.print_config_to_log", "tensorboardX.SummaryWriter", "train.create_dataloader", "jmodt.detection.modeling.train_functions.model_joint_fn_decorator", "jmodt.detection.modeling.point_rcnn.PointRCNN", "nn.DataParallel.cuda", "nn.DataParallel.parameters", "torch.optim.lr_scheduler.CosineAnnealingLR", "create_logger.info", "os.path.join", "os.makedirs", "jmodt.utils.train_utils.Trainer", "train_utils.Trainer.train", "create_logger.info", "jmodt.config.cfg_from_list", "create_logger.info", "torch.nn.DataParallel", "torch.optim.AdamW", "os.environ.keys", "vars", "os.path.join", "train.create_dataloader", "isinstance", "pure_model.parameters", "torch.optim.AdamW", "torch.optim.AdamW", "jmodt.utils.train_utils.load_checkpoint", "jmodt.utils.train_utils.load_checkpoint", "list", "list", "pure_model.rcnn_net.link_layer.parameters", "pure_model.rcnn_net.se_layer.parameters", "pure_model.rcnn_net.link_layer.parameters", "pure_model.rcnn_net.se_layer.parameters"], "function", ["home.repos.pwc.inspect_result.kemo-huang_jmodt.tools.train.create_logger", "home.repos.pwc.inspect_result.kemo-huang_jmodt.jmodt.config.print_config_to_log", "home.repos.pwc.inspect_result.kemo-huang_jmodt.tools.train.create_dataloader", "home.repos.pwc.inspect_result.kemo-huang_jmodt.modeling.train_functions.model_joint_fn_decorator", "home.repos.pwc.inspect_result.kemo-huang_jmodt.utils.train_utils.Trainer.train", "home.repos.pwc.inspect_result.kemo-huang_jmodt.jmodt.config.cfg_from_list", "home.repos.pwc.inspect_result.kemo-huang_jmodt.tools.train.create_dataloader", "home.repos.pwc.inspect_result.kemo-huang_jmodt.utils.train_utils.load_checkpoint", "home.repos.pwc.inspect_result.kemo-huang_jmodt.utils.train_utils.load_checkpoint"], ["", "def", "main", "(", ")", ":", "\n", "    ", "if", "args", ".", "set_cfgs", "is", "not", "None", ":", "\n", "        ", "cfg_from_list", "(", "args", ".", "set_cfgs", ")", "\n", "", "if", "args", ".", "finetune", ":", "\n", "        ", "cfg", ".", "RPN", ".", "FIXED", "=", "True", "\n", "cfg", ".", "TRAIN", ".", "FINETUNE", "=", "True", "\n", "", "else", ":", "\n", "        ", "cfg", ".", "RPN", ".", "FIXED", "=", "False", "\n", "cfg", ".", "TRAIN", ".", "FINETUNE", "=", "False", "\n", "\n", "", "root_result_dir", "=", "args", ".", "output_dir", "\n", "os", ".", "makedirs", "(", "root_result_dir", ",", "exist_ok", "=", "True", ")", "\n", "\n", "log_file", "=", "os", ".", "path", ".", "join", "(", "root_result_dir", ",", "'log_train.txt'", ")", "\n", "logger", "=", "create_logger", "(", "log_file", ")", "\n", "logger", ".", "info", "(", "'**********************Start logging**********************'", ")", "\n", "\n", "# log to file", "\n", "gpu_list", "=", "os", ".", "environ", "[", "'CUDA_VISIBLE_DEVICES'", "]", "if", "'CUDA_VISIBLE_DEVICES'", "in", "os", ".", "environ", ".", "keys", "(", ")", "else", "'ALL'", "\n", "logger", ".", "info", "(", "'CUDA_VISIBLE_DEVICES=%s'", "%", "gpu_list", ")", "\n", "\n", "for", "key", ",", "val", "in", "vars", "(", "args", ")", ".", "items", "(", ")", ":", "\n", "        ", "logger", ".", "info", "(", "\"{:16} {}\"", ".", "format", "(", "key", ",", "val", ")", ")", "\n", "\n", "", "print_config_to_log", "(", "cfg", ",", "logger", "=", "logger", ")", "\n", "\n", "# tensorboard log", "\n", "tb_log", "=", "SummaryWriter", "(", "logdir", "=", "os", ".", "path", ".", "join", "(", "root_result_dir", ",", "'tensorboard'", ")", ")", "\n", "\n", "# create dataloader & network & optimizer", "\n", "train_set", ",", "train_loader", "=", "create_dataloader", "(", "logger", ",", "split", "=", "cfg", ".", "TRAIN", ".", "SPLIT", ")", "\n", "val_set", ",", "val_loader", "=", "create_dataloader", "(", "logger", ",", "split", "=", "cfg", ".", "TRAIN", ".", "VAL_SPLIT", ")", "if", "args", ".", "train_with_eval", "else", "None", ",", "None", "\n", "\n", "fn_decorator", "=", "train_functions", ".", "model_joint_fn_decorator", "(", ")", "\n", "\n", "model", "=", "PointRCNN", "(", "num_classes", "=", "train_set", ".", "num_class", ",", "use_xyz", "=", "True", ",", "mode", "=", "'TRAIN'", ")", "\n", "if", "args", ".", "mgpus", ":", "\n", "        ", "model", "=", "nn", ".", "DataParallel", "(", "model", ")", "\n", "", "model", ".", "cuda", "(", ")", "\n", "\n", "params_to_update", "=", "model", ".", "parameters", "(", ")", "\n", "\n", "start_epoch", "=", "it", "=", "0", "\n", "last_epoch", "=", "-", "1", "\n", "if", "args", ".", "ckpt", "is", "not", "None", ":", "\n", "        ", "pure_model", "=", "model", ".", "module", "if", "isinstance", "(", "model", ",", "torch", ".", "nn", ".", "DataParallel", ")", "else", "model", "\n", "if", "cfg", ".", "TRAIN", ".", "FINETUNE", ":", "\n", "            ", "for", "param", "in", "pure_model", ".", "parameters", "(", ")", ":", "\n", "                ", "param", ".", "requires_grad", "=", "False", "\n", "", "params_to_update", "=", "list", "(", "pure_model", ".", "rcnn_net", ".", "link_layer", ".", "parameters", "(", ")", ")", "+", "list", "(", "pure_model", ".", "rcnn_net", ".", "se_layer", ".", "parameters", "(", ")", ")", "\n", "for", "param", "in", "params_to_update", ":", "\n", "                ", "param", ".", "requires_grad", "=", "True", "\n", "", "optimizer", "=", "optim", ".", "AdamW", "(", "[", "\n", "{", "'params'", ":", "pure_model", ".", "rcnn_net", ".", "link_layer", ".", "parameters", "(", ")", "}", ",", "\n", "{", "'params'", ":", "pure_model", ".", "rcnn_net", ".", "se_layer", ".", "parameters", "(", ")", "}", ",", "\n", "]", ",", "lr", "=", "cfg", ".", "TRAIN", ".", "LR", ",", "weight_decay", "=", "cfg", ".", "TRAIN", ".", "WEIGHT_DECAY", ")", "\n", "", "else", ":", "\n", "            ", "optimizer", "=", "optim", ".", "AdamW", "(", "params_to_update", ",", "lr", "=", "cfg", ".", "TRAIN", ".", "LR", ",", "weight_decay", "=", "cfg", ".", "TRAIN", ".", "WEIGHT_DECAY", ")", "\n", "", "if", "cfg", ".", "TRAIN", ".", "RELOAD_OPTIMIZER", ":", "\n", "            ", "it", ",", "start_epoch", "=", "train_utils", ".", "load_checkpoint", "(", "pure_model", ",", "optimizer", ",", "filename", "=", "args", ".", "ckpt", ",", "logger", "=", "logger", ")", "\n", "last_epoch", "=", "start_epoch", "+", "1", "\n", "", "else", ":", "\n", "            ", "train_utils", ".", "load_checkpoint", "(", "pure_model", ",", "optimizer", "=", "None", ",", "filename", "=", "args", ".", "ckpt", ",", "logger", "=", "logger", ")", "\n", "", "", "else", ":", "\n", "        ", "optimizer", "=", "optim", ".", "AdamW", "(", "params_to_update", ",", "lr", "=", "cfg", ".", "TRAIN", ".", "LR", ",", "weight_decay", "=", "cfg", ".", "TRAIN", ".", "WEIGHT_DECAY", ")", "\n", "\n", "", "lr_scheduler", "=", "optim", ".", "lr_scheduler", ".", "CosineAnnealingLR", "(", "optimizer", ",", "T_max", "=", "cfg", ".", "TRAIN", ".", "TMAX", ",", "\n", "eta_min", "=", "cfg", ".", "TRAIN", ".", "ETA_MIN", ",", "last_epoch", "=", "last_epoch", ")", "\n", "\n", "# start training", "\n", "logger", ".", "info", "(", "'**********************Start training**********************'", ")", "\n", "ckpt_dir", "=", "os", ".", "path", ".", "join", "(", "root_result_dir", ",", "'ckpt'", ")", "\n", "os", ".", "makedirs", "(", "ckpt_dir", ",", "exist_ok", "=", "True", ")", "\n", "trainer", "=", "train_utils", ".", "Trainer", "(", "\n", "model", "=", "model", ",", "\n", "params_to_update", "=", "params_to_update", ",", "\n", "model_fn_train", "=", "fn_decorator", ",", "\n", "optimizer", "=", "optimizer", ",", "\n", "ckpt_dir", "=", "ckpt_dir", ",", "\n", "lr_scheduler", "=", "lr_scheduler", ",", "\n", "model_fn_val", "=", "fn_decorator", ",", "\n", "tb_log", "=", "tb_log", ",", "\n", "eval_frequency", "=", "1", ",", "\n", "grad_norm_clip", "=", "cfg", ".", "TRAIN", ".", "GRAD_NORM_CLIP", "\n", ")", "\n", "\n", "trainer", ".", "train", "(", "\n", "it", ",", "\n", "start_epoch", ",", "\n", "cfg", ".", "TRAIN", ".", "EPOCHS", ",", "\n", "train_loader", ",", "\n", "val_loader", "\n", ")", "\n", "\n", "logger", ".", "info", "(", "'**********************End training**********************'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kemo-huang_jmodt.visualization.viewer.KittiSequenceViewer.__init__": [[16, 52], ["os.makedirs", "str().zfill", "jmodt.utils.calibration.Calibration", "os.path.join", "viewer.KittiSequenceViewer.get_labels", "os.path.join", "os.listdir", "viewer.KittiSequenceViewer.frames.sort", "dict.fromkeys", "numpy.arange", "numpy.random.shuffle", "enumerate", "matplotlib.cm.get_cmap", "open3d.visualization.Visualizer", "viewer.KittiSequenceViewer._vis.create_window", "viewer.KittiSequenceViewer._vis.set_full_screen", "numpy.asarray", "os.path.join", "set", "len", "len", "viewer.KittiSequenceViewer._vis.get_render_option", "str", "int"], "methods", ["home.repos.pwc.inspect_result.kemo-huang_jmodt.visualization.viewer.KittiSequenceViewer.get_labels"], ["    ", "def", "__init__", "(", "self", ",", "root_dir", ",", "seq", ",", "output_dir", ",", "viewpoint_file", ",", "label_dir", ",", "\n", "classes", "=", "(", "'Car'", ",", "'Van'", ")", ",", "radius", "=", "0.1", ",", "trajectory_len", "=", "15", ")", ":", "\n", "        ", "self", ".", "root_dir", "=", "root_dir", "\n", "self", ".", "output_dir", "=", "output_dir", "\n", "os", ".", "makedirs", "(", "output_dir", ",", "exist_ok", "=", "True", ")", "\n", "self", ".", "viewpoint_file", "=", "viewpoint_file", "\n", "self", ".", "radius", "=", "radius", "\n", "self", ".", "trajectory_length", "=", "trajectory_len", "\n", "self", ".", "box_lines", "=", "[", "[", "0", ",", "1", "]", ",", "[", "0", ",", "3", "]", ",", "[", "3", ",", "6", "]", ",", "[", "1", ",", "6", "]", ",", "[", "0", ",", "2", "]", ",", "[", "2", ",", "5", "]", ",", "[", "3", ",", "5", "]", ",", "[", "1", ",", "7", "]", ",", "\n", "[", "7", ",", "4", "]", ",", "[", "4", ",", "6", "]", ",", "[", "4", ",", "5", "]", ",", "[", "2", ",", "7", "]", "]", "\n", "\n", "# load data", "\n", "self", ".", "seq", "=", "str", "(", "int", "(", "seq", ")", ")", ".", "zfill", "(", "4", ")", "\n", "self", ".", "calib", "=", "Calibration", "(", "os", ".", "path", ".", "join", "(", "self", ".", "root_dir", ",", "'calib'", ",", "f'{self.seq}.txt'", ")", ")", "\n", "label_file", "=", "os", ".", "path", ".", "join", "(", "label_dir", ",", "f'{self.seq}.txt'", ")", "\n", "self", ".", "box_data", ",", "self", ".", "seq_id_dict", ",", "all_id_list", "=", "self", ".", "get_labels", "(", "label_file", ",", "classes", ")", "\n", "\n", "# get all the frames of the sequence", "\n", "lidar_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root_dir", ",", "'velodyne'", ",", "self", ".", "seq", ")", "\n", "lidar_files", "=", "os", ".", "listdir", "(", "lidar_dir", ")", "\n", "self", ".", "frames", "=", "[", "lidar_file", "[", ":", "-", "4", "]", "for", "lidar_file", "in", "lidar_files", "]", "\n", "self", ".", "frames", ".", "sort", "(", ")", "\n", "\n", "# create color map", "\n", "self", ".", "id_color_dict", "=", "dict", ".", "fromkeys", "(", "set", "(", "all_id_list", ")", ")", "\n", "color_indices", "=", "np", ".", "arange", "(", "len", "(", "self", ".", "id_color_dict", ")", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "color_indices", ")", "\n", "for", "i", ",", "tracking_id", "in", "enumerate", "(", "self", ".", "id_color_dict", ")", ":", "\n", "            ", "self", ".", "id_color_dict", "[", "tracking_id", "]", "=", "color_indices", "[", "i", "]", "\n", "", "self", ".", "color_map", "=", "cm", ".", "get_cmap", "(", "'gist_rainbow'", ",", "len", "(", "self", ".", "id_color_dict", ")", ")", "\n", "\n", "# init visualizer", "\n", "self", ".", "_vis", "=", "open3d", ".", "visualization", ".", "Visualizer", "(", ")", "\n", "self", ".", "_vis", ".", "create_window", "(", ")", "\n", "self", ".", "_vis", ".", "set_full_screen", "(", "True", ")", "\n", "self", ".", "_vis", ".", "get_render_option", "(", ")", ".", "background_color", "=", "np", ".", "asarray", "(", "[", "0", ",", "0", ",", "0", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kemo-huang_jmodt.visualization.viewer.KittiSequenceViewer.get_image_rgb_with_normal": [[53, 61], ["os.path.exists", "PIL.Image.open().convert", "numpy.array().astype", "PIL.Image.open", "numpy.array"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "get_image_rgb_with_normal", "(", "img_file", ")", ":", "\n", "        ", "assert", "os", ".", "path", ".", "exists", "(", "img_file", ")", "\n", "im", "=", "Image", ".", "open", "(", "img_file", ")", ".", "convert", "(", "'RGB'", ")", "\n", "im", "=", "np", ".", "array", "(", "im", ")", ".", "astype", "(", "np", ".", "float", ")", "\n", "im", "/=", "255.0", "\n", "\n", "return", "im", "# (H,W,3) RGB mode", "\n", "\n"]], "home.repos.pwc.inspect_result.kemo-huang_jmodt.visualization.viewer.KittiSequenceViewer.get_lidar": [[62, 66], ["os.path.exists", "numpy.fromfile().reshape", "numpy.fromfile"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "get_lidar", "(", "file_path", ")", ":", "\n", "        ", "assert", "os", ".", "path", ".", "exists", "(", "file_path", ")", "\n", "return", "np", ".", "fromfile", "(", "file_path", ",", "dtype", "=", "np", ".", "float32", ")", ".", "reshape", "(", "-", "1", ",", "4", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kemo-huang_jmodt.visualization.viewer.KittiSequenceViewer.get_labels": [[67, 91], ["open", "f.readlines", "line.split", "numpy.array", "open3d.geometry.get_rotation_matrix_from_axis_angle", "numpy.array", "int", "all_id_list.append", "numpy.array", "box_data[].append", "seq_id_dict[].append", "int", "float", "float", "float", "float", "float", "int", "int", "float", "float", "float"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "get_labels", "(", "file_path", ",", "classes", ")", ":", "\n", "        ", "with", "open", "(", "file_path", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "lines", "=", "f", ".", "readlines", "(", ")", "\n", "", "box_data", "=", "{", "}", "\n", "seq_id_dict", "=", "{", "}", "\n", "all_id_list", "=", "[", "]", "\n", "for", "line", "in", "lines", ":", "\n", "            ", "label", "=", "line", ".", "split", "(", ")", "\n", "if", "label", "[", "2", "]", "in", "classes", ":", "\n", "                ", "center", "=", "np", ".", "array", "(", "[", "float", "(", "label", "[", "13", "]", ")", ",", "float", "(", "label", "[", "14", "]", ")", "-", "float", "(", "label", "[", "11", "]", ")", "/", "2", ",", "float", "(", "label", "[", "15", "]", ")", "]", ")", "\n", "R", "=", "open3d", ".", "geometry", ".", "get_rotation_matrix_from_axis_angle", "(", "np", ".", "array", "(", "[", "0.0", ",", "float", "(", "label", "[", "16", "]", ")", ",", "0.0", "]", ")", ")", "\n", "extent", "=", "np", ".", "array", "(", "[", "float", "(", "label", "[", "12", "]", ")", ",", "float", "(", "label", "[", "10", "]", ")", ",", "float", "(", "label", "[", "11", "]", ")", "]", ")", "# l, h, w", "\n", "frame", "=", "int", "(", "label", "[", "0", "]", ")", "\n", "if", "frame", "in", "box_data", ":", "\n", "                    ", "box_data", "[", "frame", "]", ".", "append", "(", "(", "center", ",", "R", ",", "extent", ")", ")", "\n", "", "else", ":", "\n", "                    ", "box_data", "[", "frame", "]", "=", "[", "(", "center", ",", "R", ",", "extent", ")", "]", "\n", "", "if", "frame", "in", "seq_id_dict", ":", "\n", "                    ", "seq_id_dict", "[", "frame", "]", ".", "append", "(", "int", "(", "label", "[", "1", "]", ")", ")", "\n", "", "else", ":", "\n", "                    ", "seq_id_dict", "[", "frame", "]", "=", "[", "int", "(", "label", "[", "1", "]", ")", "]", "\n", "", "all_id_list", ".", "append", "(", "int", "(", "label", "[", "1", "]", ")", ")", "\n", "", "", "return", "box_data", ",", "seq_id_dict", ",", "all_id_list", "\n", "\n"]], "home.repos.pwc.inspect_result.kemo-huang_jmodt.visualization.viewer.KittiSequenceViewer.get_painted_point_cloud": [[92, 111], ["os.path.join", "os.path.join", "viewer.KittiSequenceViewer.get_image_rgb_with_normal", "viewer.KittiSequenceViewer.get_lidar", "viewer.KittiSequenceViewer.calib.lidar_to_rect", "viewer.KittiSequenceViewer.calib.rect_to_img", "jmodt.detection.datasets.kitti_dataset.KittiDataset.get_valid_flag", "numpy.array", "open3d.geometry.PointCloud", "open3d.utility.Vector3dVector", "open3d.utility.Vector3dVector", "round", "round"], "methods", ["home.repos.pwc.inspect_result.kemo-huang_jmodt.visualization.viewer.KittiSequenceViewer.get_image_rgb_with_normal", "home.repos.pwc.inspect_result.kemo-huang_jmodt.datasets.kitti_dataset.KittiDataset.get_lidar", "home.repos.pwc.inspect_result.kemo-huang_jmodt.utils.calibration.Calibration.lidar_to_rect", "home.repos.pwc.inspect_result.kemo-huang_jmodt.utils.calibration.Calibration.rect_to_img", "home.repos.pwc.inspect_result.kemo-huang_jmodt.datasets.kitti_dataset.KittiDataset.get_valid_flag"], ["", "def", "get_painted_point_cloud", "(", "self", ",", "frame", ")", ":", "\n", "        ", "img_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root_dir", ",", "'image_02'", ",", "self", ".", "seq", ",", "f'{frame}.png'", ")", "\n", "lidar_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root_dir", ",", "'velodyne'", ",", "self", ".", "seq", ",", "f'{frame}.bin'", ")", "\n", "img", "=", "self", ".", "get_image_rgb_with_normal", "(", "img_path", ")", "\n", "pts_lidar", "=", "self", ".", "get_lidar", "(", "lidar_path", ")", "\n", "\n", "# get valid point (projected points should be in image)", "\n", "pts_rect", "=", "self", ".", "calib", ".", "lidar_to_rect", "(", "pts_lidar", "[", ":", ",", "0", ":", "3", "]", ")", "\n", "\n", "pts_img", ",", "pts_rect_depth", "=", "self", ".", "calib", ".", "rect_to_img", "(", "pts_rect", ")", "\n", "pts_valid_flag", "=", "KittiDataset", ".", "get_valid_flag", "(", "pts_rect", ",", "pts_img", ",", "pts_rect_depth", ",", "img", ".", "shape", ")", "\n", "\n", "pts_rect", "=", "pts_rect", "[", "pts_valid_flag", "]", "[", ":", ",", "0", ":", "3", "]", "\n", "pts_xy", "=", "pts_img", "[", "pts_valid_flag", "]", "# (N, W, H)", "\n", "colors", "=", "np", ".", "array", "(", "[", "img", "[", "round", "(", "h", ")", "-", "1", ",", "round", "(", "w", ")", "-", "1", "]", "for", "w", ",", "h", "in", "pts_xy", "]", ")", "\n", "pc", "=", "open3d", ".", "geometry", ".", "PointCloud", "(", ")", "\n", "pc", ".", "points", "=", "open3d", ".", "utility", ".", "Vector3dVector", "(", "pts_rect", ")", "\n", "pc", ".", "colors", "=", "open3d", ".", "utility", ".", "Vector3dVector", "(", "colors", ")", "\n", "return", "pc", "\n", "\n"]], "home.repos.pwc.inspect_result.kemo-huang_jmodt.visualization.viewer.KittiSequenceViewer.create_boxes_and_trajectories": [[112, 153], ["int", "enumerate", "max", "range", "track_dict.items", "open3d.geometry.OrientedBoundingBox", "open3d.geometry.OrientedBoundingBox.get_box_points", "line_mesh.LineMesh", "boxes.append", "numpy.vstack", "line_mesh.LineMesh", "trajectories.append", "viewer.KittiSequenceViewer._vis.add_geometry", "viewer.KittiSequenceViewer._vis.add_geometry", "viewer.KittiSequenceViewer.color_map", "enumerate", "len", "viewer.KittiSequenceViewer.color_map", "range", "track_dict[].append", "len"], "methods", ["None"], ["", "def", "create_boxes_and_trajectories", "(", "self", ",", "frame", ")", ":", "\n", "        ", "frame", "=", "int", "(", "frame", ")", "\n", "boxes", "=", "[", "]", "\n", "trajectories", "=", "[", "]", "\n", "if", "frame", "in", "self", ".", "box_data", ":", "\n", "            ", "box_frame_data", "=", "self", ".", "box_data", "[", "frame", "]", "\n", "tracking_frame_ids", "=", "self", ".", "seq_id_dict", "[", "frame", "]", "\n", "track_dict", "=", "{", "}", "\n", "for", "i", ",", "label", "in", "enumerate", "(", "box_frame_data", ")", ":", "\n", "                ", "box", "=", "open3d", ".", "geometry", ".", "OrientedBoundingBox", "(", "center", "=", "label", "[", "0", "]", ",", "R", "=", "label", "[", "1", "]", ",", "extent", "=", "label", "[", "2", "]", ")", "\n", "points", "=", "box", ".", "get_box_points", "(", ")", "\n", "tracking_id", "=", "tracking_frame_ids", "[", "i", "]", "\n", "color", "=", "self", ".", "color_map", "(", "self", ".", "id_color_dict", "[", "tracking_id", "]", ")", "[", ":", "3", "]", "\n", "line_mesh1", "=", "LineMesh", "(", "points", ",", "self", ".", "box_lines", ",", "color", ",", "self", ".", "radius", ")", "\n", "boxes", ".", "append", "(", "line_mesh1", ".", "cylinder_segments", ")", "\n", "track_dict", "[", "tracking_id", "]", "=", "[", "label", "[", "0", "]", "]", "\n", "# get box centers from previous frames", "\n", "", "min_frame", "=", "max", "(", "0", ",", "frame", "-", "self", ".", "trajectory_length", ")", "\n", "for", "cur_frame", "in", "range", "(", "frame", "-", "1", ",", "min_frame", "-", "1", ",", "-", "1", ")", ":", "\n", "                ", "if", "cur_frame", "in", "self", ".", "box_data", ":", "\n", "                    ", "box_frame_data", "=", "self", ".", "box_data", "[", "cur_frame", "]", "\n", "tracking_frame_ids", "=", "self", ".", "seq_id_dict", "[", "cur_frame", "]", "\n", "for", "i", ",", "label", "in", "enumerate", "(", "box_frame_data", ")", ":", "\n", "                        ", "tracking_id", "=", "tracking_frame_ids", "[", "i", "]", "\n", "if", "tracking_id", "in", "track_dict", ":", "\n", "                            ", "track_dict", "[", "tracking_id", "]", ".", "append", "(", "label", "[", "0", "]", ")", "\n", "", "", "", "", "for", "tracking_id", ",", "centers", "in", "track_dict", ".", "items", "(", ")", ":", "\n", "                ", "if", "len", "(", "centers", ")", "<", "2", ":", "\n", "                    ", "continue", "\n", "", "centers", "=", "np", ".", "vstack", "(", "centers", ")", "\n", "lines", "=", "[", "[", "q", ",", "q", "+", "1", "]", "for", "q", "in", "range", "(", "len", "(", "centers", ")", "-", "1", ")", "]", "\n", "color", "=", "self", ".", "color_map", "(", "self", ".", "id_color_dict", "[", "tracking_id", "]", ")", "[", ":", "3", "]", "\n", "line_mesh1", "=", "LineMesh", "(", "centers", ",", "lines", ",", "color", ",", "self", ".", "radius", ")", "\n", "trajectories", ".", "append", "(", "line_mesh1", ".", "cylinder_segments", ")", "\n", "\n", "", "", "for", "box", "in", "boxes", ":", "\n", "            ", "for", "line", "in", "box", ":", "\n", "                ", "self", ".", "_vis", ".", "add_geometry", "(", "line", ")", "\n", "", "", "for", "track", "in", "trajectories", ":", "\n", "            ", "for", "line", "in", "track", ":", "\n", "                ", "self", ".", "_vis", ".", "add_geometry", "(", "line", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kemo-huang_jmodt.visualization.viewer.KittiSequenceViewer.save_viewpoint_file": [[154, 164], ["str().zfill", "viewer.KittiSequenceViewer.get_painted_point_cloud", "viewer.KittiSequenceViewer._vis.add_geometry", "viewer.KittiSequenceViewer._vis.run", "viewer.KittiSequenceViewer._vis.get_view_control().convert_to_pinhole_camera_parameters", "open3d.io.write_pinhole_camera_parameters", "viewer.KittiSequenceViewer._vis.clear_geometries", "viewer.KittiSequenceViewer.create_boxes_and_trajectories", "str", "viewer.KittiSequenceViewer._vis.get_view_control", "int"], "methods", ["home.repos.pwc.inspect_result.kemo-huang_jmodt.visualization.viewer.KittiSequenceViewer.get_painted_point_cloud", "home.repos.pwc.inspect_result.kemo-huang_jmodt.visualization.viewer.KittiSequenceViewer.create_boxes_and_trajectories"], ["", "", "", "def", "save_viewpoint_file", "(", "self", ",", "frame", ",", "show_labels", "=", "True", ")", ":", "\n", "        ", "frame", "=", "str", "(", "int", "(", "frame", ")", ")", ".", "zfill", "(", "6", ")", "\n", "pc", "=", "self", ".", "get_painted_point_cloud", "(", "frame", ")", "\n", "self", ".", "_vis", ".", "add_geometry", "(", "pc", ")", "\n", "if", "show_labels", ":", "\n", "            ", "self", ".", "create_boxes_and_trajectories", "(", "frame", ")", "\n", "", "self", ".", "_vis", ".", "run", "(", ")", "# user changes the view and press \"q\" to terminate", "\n", "viewpoint_param", "=", "self", ".", "_vis", ".", "get_view_control", "(", ")", ".", "convert_to_pinhole_camera_parameters", "(", ")", "\n", "open3d", ".", "io", ".", "write_pinhole_camera_parameters", "(", "self", ".", "viewpoint_file", ",", "viewpoint_param", ")", "\n", "self", ".", "_vis", ".", "clear_geometries", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kemo-huang_jmodt.visualization.viewer.KittiSequenceViewer.visualize": [[165, 182], ["open3d.io.read_pinhole_camera_parameters", "viewer.KittiSequenceViewer._vis.poll_events", "viewer.KittiSequenceViewer._vis.update_renderer", "viewer.KittiSequenceViewer._vis.destroy_window", "viewer.KittiSequenceViewer.get_painted_point_cloud", "viewer.KittiSequenceViewer._vis.add_geometry", "viewer.KittiSequenceViewer._vis.get_view_control().convert_from_pinhole_camera_parameters", "viewer.KittiSequenceViewer._vis.poll_events", "viewer.KittiSequenceViewer._vis.update_renderer", "viewer.KittiSequenceViewer._vis.clear_geometries", "str().zfill", "viewer.KittiSequenceViewer.create_boxes_and_trajectories", "viewer.KittiSequenceViewer._vis.capture_screen_image", "viewer.KittiSequenceViewer._vis.get_view_control", "os.path.join", "str", "int"], "methods", ["home.repos.pwc.inspect_result.kemo-huang_jmodt.visualization.viewer.KittiSequenceViewer.get_painted_point_cloud", "home.repos.pwc.inspect_result.kemo-huang_jmodt.visualization.viewer.KittiSequenceViewer.create_boxes_and_trajectories"], ["", "def", "visualize", "(", "self", ",", "frames", "=", "None", ",", "show_labels", "=", "True", ",", "screenshot", "=", "True", ")", ":", "\n", "        ", "frames", "=", "self", ".", "frames", "if", "frames", "is", "None", "else", "[", "str", "(", "int", "(", "frame", ")", ")", ".", "zfill", "(", "6", ")", "for", "frame", "in", "frames", "]", "\n", "viewpoint_param", "=", "open3d", ".", "io", ".", "read_pinhole_camera_parameters", "(", "self", ".", "viewpoint_file", ")", "\n", "self", ".", "_vis", ".", "poll_events", "(", ")", "\n", "self", ".", "_vis", ".", "update_renderer", "(", ")", "\n", "for", "frame", "in", "frames", ":", "\n", "            ", "pc", "=", "self", ".", "get_painted_point_cloud", "(", "frame", ")", "\n", "self", ".", "_vis", ".", "add_geometry", "(", "pc", ")", "\n", "if", "show_labels", ":", "\n", "                ", "self", ".", "create_boxes_and_trajectories", "(", "frame", ")", "\n", "", "self", ".", "_vis", ".", "get_view_control", "(", ")", ".", "convert_from_pinhole_camera_parameters", "(", "viewpoint_param", ")", "\n", "self", ".", "_vis", ".", "poll_events", "(", ")", "\n", "self", ".", "_vis", ".", "update_renderer", "(", ")", "\n", "if", "screenshot", ":", "\n", "                ", "self", ".", "_vis", ".", "capture_screen_image", "(", "os", ".", "path", ".", "join", "(", "self", ".", "output_dir", ",", "f'{frame}.png'", ")", ")", "\n", "", "self", ".", "_vis", ".", "clear_geometries", "(", ")", "\n", "", "self", ".", "_vis", ".", "destroy_window", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kemo-huang_jmodt.visualization.viewer.create_video": [[184, 192], ["cv2.VideoWriter_fourcc", "cv2.VideoWriter", "os.listdir", "os.listdir.sort", "tqdm.tqdm", "cv2.VideoWriter.release", "cv2.VideoWriter.write", "cv2.imread", "os.path.join"], "function", ["None"], ["", "", "def", "create_video", "(", "img_dir", ",", "video_name", ",", "size", ",", "fps", "=", "10", ")", ":", "\n", "    ", "fourcc", "=", "cv2", ".", "VideoWriter_fourcc", "(", "*", "'DIVX'", ")", "\n", "video_writer", "=", "cv2", ".", "VideoWriter", "(", "video_name", ",", "fourcc", ",", "fps", ",", "size", ")", "\n", "images", "=", "os", ".", "listdir", "(", "img_dir", ")", "\n", "images", ".", "sort", "(", ")", "\n", "for", "filename", "in", "tqdm", ".", "tqdm", "(", "images", ")", ":", "\n", "        ", "video_writer", ".", "write", "(", "cv2", ".", "imread", "(", "os", ".", "path", ".", "join", "(", "img_dir", ",", "filename", ")", ")", ")", "\n", "", "video_writer", ".", "release", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kemo-huang_jmodt.visualization.line_mesh.LineMesh.__init__": [[40, 59], ["numpy.array", "numpy.array", "line_mesh.LineMesh.create_line_mesh", "numpy.array", "line_mesh.LineMesh.lines_from_ordered_points"], "methods", ["home.repos.pwc.inspect_result.kemo-huang_jmodt.visualization.line_mesh.LineMesh.create_line_mesh", "home.repos.pwc.inspect_result.kemo-huang_jmodt.visualization.line_mesh.LineMesh.lines_from_ordered_points"], ["    ", "def", "__init__", "(", "self", ",", "points", ",", "lines", "=", "None", ",", "colors", "=", "(", "0", ",", "1", ",", "0", ")", ",", "radius", "=", "0.15", ")", ":", "\n", "        ", "\"\"\"Creates a line represented as sequence of cylinder triangular meshes\n\n        Arguments:\n            points {ndarray} -- Numpy array of points Nx3.\n\n        Keyword Arguments:\n            lines {list[list] or None} -- List of point index pairs denoting line segments. If None, implicit lines from ordered pairwise points. (default: {None})\n            colors {list} -- list of colors, or single color of the line (default: {[0, 1, 0]})\n            radius {float} -- radius of cylinder (default: {0.15})\n        \"\"\"", "\n", "self", ".", "points", "=", "np", ".", "array", "(", "points", ")", "\n", "self", ".", "lines", "=", "np", ".", "array", "(", "\n", "lines", ")", "if", "lines", "is", "not", "None", "else", "self", ".", "lines_from_ordered_points", "(", "self", ".", "points", ")", "\n", "self", ".", "colors", "=", "np", ".", "array", "(", "colors", ")", "\n", "self", ".", "radius", "=", "radius", "\n", "self", ".", "cylinder_segments", "=", "[", "]", "\n", "\n", "self", ".", "create_line_mesh", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kemo-huang_jmodt.visualization.line_mesh.LineMesh.lines_from_ordered_points": [[60, 64], ["numpy.array", "range"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "lines_from_ordered_points", "(", "points", ")", ":", "\n", "        ", "lines", "=", "[", "[", "i", ",", "i", "+", "1", "]", "for", "i", "in", "range", "(", "0", ",", "points", ".", "shape", "[", "0", "]", "-", "1", ",", "1", ")", "]", "\n", "return", "np", ".", "array", "(", "lines", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kemo-huang_jmodt.visualization.line_mesh.LineMesh.create_line_mesh": [[65, 94], ["line_mesh.normalized", "numpy.array", "range", "line_mesh.align_vector_to_another", "open3d.geometry.TriangleMesh.create_cylinder", "cylinder_segment.rotate.rotate.translate", "cylinder_segment.rotate.rotate.paint_uniform_color", "line_mesh.LineMesh.cylinder_segments.append", "cylinder_segment.rotate.rotate.rotate", "open3d.geometry.get_rotation_matrix_from_axis_angle"], "methods", ["home.repos.pwc.inspect_result.kemo-huang_jmodt.visualization.line_mesh.normalized", "home.repos.pwc.inspect_result.kemo-huang_jmodt.visualization.line_mesh.align_vector_to_another"], ["", "def", "create_line_mesh", "(", "self", ")", ":", "\n", "        ", "first_points", "=", "self", ".", "points", "[", "self", ".", "lines", "[", ":", ",", "0", "]", ",", ":", "]", "\n", "second_points", "=", "self", ".", "points", "[", "self", ".", "lines", "[", ":", ",", "1", "]", ",", ":", "]", "\n", "line_segments", "=", "second_points", "-", "first_points", "\n", "line_segments_unit", ",", "line_lengths", "=", "normalized", "(", "line_segments", ")", "\n", "\n", "z_axis", "=", "np", ".", "array", "(", "[", "0", ",", "0", ",", "1", "]", ")", "\n", "# Create triangular mesh cylinder segments of line", "\n", "for", "i", "in", "range", "(", "line_segments_unit", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "line_segment", "=", "line_segments_unit", "[", "i", ",", ":", "]", "\n", "line_length", "=", "line_lengths", "[", "i", "]", "\n", "# get axis angle rotation to align cylinder with line segment", "\n", "axis", ",", "angle", "=", "align_vector_to_another", "(", "z_axis", ",", "line_segment", ")", "\n", "# Get translation vector", "\n", "translation", "=", "first_points", "[", "i", ",", ":", "]", "+", "line_segment", "*", "line_length", "*", "0.5", "\n", "# create cylinder and apply transformations", "\n", "cylinder_segment", "=", "o3d", ".", "geometry", ".", "TriangleMesh", ".", "create_cylinder", "(", "\n", "radius", "=", "self", ".", "radius", ",", "height", "=", "line_length", ")", "\n", "cylinder_segment", "=", "cylinder_segment", ".", "translate", "(", "\n", "translation", ",", "relative", "=", "False", ")", "\n", "if", "axis", "is", "not", "None", ":", "\n", "                ", "axis_a", "=", "axis", "*", "angle", "\n", "cylinder_segment", "=", "cylinder_segment", ".", "rotate", "(", "\n", "R", "=", "o3d", ".", "geometry", ".", "get_rotation_matrix_from_axis_angle", "(", "axis_a", ")", ")", "\n", "# color cylinder", "\n", "", "color", "=", "self", ".", "colors", "if", "self", ".", "colors", ".", "ndim", "==", "1", "else", "self", ".", "colors", "[", "i", ",", ":", "]", "\n", "cylinder_segment", ".", "paint_uniform_color", "(", "color", ")", "\n", "\n", "self", ".", "cylinder_segments", ".", "append", "(", "cylinder_segment", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kemo-huang_jmodt.visualization.line_mesh.LineMesh.add_line": [[95, 99], ["vis.add_geometry"], "methods", ["None"], ["", "", "def", "add_line", "(", "self", ",", "vis", ")", ":", "\n", "        ", "\"\"\"Adds this line to the visualizer\"\"\"", "\n", "for", "cylinder", "in", "self", ".", "cylinder_segments", ":", "\n", "            ", "vis", ".", "add_geometry", "(", "cylinder", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kemo-huang_jmodt.visualization.line_mesh.LineMesh.remove_line": [[100, 104], ["vis.remove_geometry"], "methods", ["None"], ["", "", "def", "remove_line", "(", "self", ",", "vis", ")", ":", "\n", "        ", "\"\"\"Removes this line from the visualizer\"\"\"", "\n", "for", "cylinder", "in", "self", ".", "cylinder_segments", ":", "\n", "            ", "vis", ".", "remove_geometry", "(", "cylinder", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.kemo-huang_jmodt.visualization.line_mesh.align_vector_to_another": [[19, 30], ["numpy.array", "numpy.array", "numpy.array_equal", "numpy.cross", "numpy.arccos", "numpy.linalg.norm", "numpy.dot"], "function", ["None"], ["def", "align_vector_to_another", "(", "a", "=", "np", ".", "array", "(", "[", "0", ",", "0", ",", "1", "]", ")", ",", "b", "=", "np", ".", "array", "(", "[", "1", ",", "0", ",", "0", "]", ")", ")", ":", "\n", "    ", "\"\"\"\n    Aligns vector a to vector b with axis angle rotation\n    \"\"\"", "\n", "if", "np", ".", "array_equal", "(", "a", ",", "b", ")", ":", "\n", "        ", "return", "None", ",", "None", "\n", "", "axis_", "=", "np", ".", "cross", "(", "a", ",", "b", ")", "\n", "axis_", "=", "axis_", "/", "np", ".", "linalg", ".", "norm", "(", "axis_", ")", "\n", "angle", "=", "np", ".", "arccos", "(", "np", ".", "dot", "(", "a", ",", "b", ")", ")", "\n", "\n", "return", "axis_", ",", "angle", "\n", "\n"]], "home.repos.pwc.inspect_result.kemo-huang_jmodt.visualization.line_mesh.normalized": [[32, 37], ["numpy.atleast_1d", "numpy.linalg.norm", "numpy.expand_dims"], "function", ["None"], ["", "def", "normalized", "(", "a", ",", "axis", "=", "-", "1", ",", "order", "=", "2", ")", ":", "\n", "    ", "\"\"\"Normalizes a numpy array of points\"\"\"", "\n", "l2", "=", "np", ".", "atleast_1d", "(", "np", ".", "linalg", ".", "norm", "(", "a", ",", "order", ",", "axis", ")", ")", "\n", "l2", "[", "l2", "==", "0", "]", "=", "1", "\n", "return", "a", "/", "np", ".", "expand_dims", "(", "l2", ",", "axis", ")", ",", "l2", "\n", "\n"]], "home.repos.pwc.inspect_result.kemo-huang_jmodt.jmodt.config.cfg_from_file": [[220, 226], ["config._merge_a_into_b", "open", "easydict.EasyDict", "yaml.load"], "function", ["home.repos.pwc.inspect_result.kemo-huang_jmodt.jmodt.config._merge_a_into_b"], ["def", "cfg_from_file", "(", "filename", ")", ":", "\n", "    ", "\"\"\"Load a config file and merge it into the default options.\"\"\"", "\n", "with", "open", "(", "filename", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "yaml_cfg", "=", "EasyDict", "(", "yaml", ".", "load", "(", "f", ",", "Loader", "=", "yaml", ".", "FullLoader", ")", ")", "\n", "\n", "", "_merge_a_into_b", "(", "yaml_cfg", ",", "cfg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kemo-huang_jmodt.jmodt.config._merge_a_into_b": [[228, 256], ["a.items", "type", "type", "KeyError", "type", "isinstance", "type", "numpy.array", "ValueError", "config._merge_a_into_b", "print", "type", "type"], "function", ["home.repos.pwc.inspect_result.kemo-huang_jmodt.jmodt.config._merge_a_into_b"], ["", "def", "_merge_a_into_b", "(", "a", ",", "b", ")", ":", "\n", "    ", "\"\"\"Merge config dictionary a into config dictionary b, clobbering the\n    options in b whenever they are also specified in a.\n    \"\"\"", "\n", "if", "type", "(", "a", ")", "is", "not", "EasyDict", ":", "\n", "        ", "return", "\n", "\n", "", "for", "k", ",", "v", "in", "a", ".", "items", "(", ")", ":", "\n", "# a must specify keys that are in b", "\n", "        ", "if", "k", "not", "in", "b", ":", "\n", "            ", "raise", "KeyError", "(", "'{} is not a valid config key'", ".", "format", "(", "k", ")", ")", "\n", "# the types must match, too", "\n", "", "old_type", "=", "type", "(", "b", "[", "k", "]", ")", "\n", "if", "old_type", "is", "not", "type", "(", "v", ")", ":", "\n", "            ", "if", "isinstance", "(", "b", "[", "k", "]", ",", "np", ".", "ndarray", ")", ":", "\n", "                ", "v", "=", "np", ".", "array", "(", "v", ",", "dtype", "=", "b", "[", "k", "]", ".", "dtype", ")", "\n", "", "else", ":", "\n", "                ", "raise", "ValueError", "(", "(", "'Type mismatch ({} vs. {}) '", "\n", "'for config key: {}'", ")", ".", "format", "(", "type", "(", "b", "[", "k", "]", ")", ",", "type", "(", "v", ")", ",", "k", ")", ")", "\n", "# recursively merge dicts", "\n", "", "", "if", "type", "(", "v", ")", "is", "EasyDict", ":", "\n", "            ", "try", ":", "\n", "                ", "_merge_a_into_b", "(", "a", "[", "k", "]", ",", "b", "[", "k", "]", ")", "\n", "", "except", ":", "\n", "                ", "print", "(", "(", "'Error under config key: {}'", ".", "format", "(", "k", ")", ")", ")", "\n", "raise", "\n", "", "", "else", ":", "\n", "            ", "b", "[", "k", "]", "=", "v", "\n", "\n"]], "home.repos.pwc.inspect_result.kemo-huang_jmodt.jmodt.config.cfg_from_list": [[258, 277], ["zip", "k.split", "isinstance", "len", "ast.literal_eval", "type", "type", "type"], "function", ["None"], ["", "", "", "def", "cfg_from_list", "(", "cfg_list", ")", ":", "\n", "    ", "\"\"\"Set config keys via list (e.g., from command line).\"\"\"", "\n", "assert", "len", "(", "cfg_list", ")", "%", "2", "==", "0", "\n", "for", "k", ",", "v", "in", "zip", "(", "cfg_list", "[", "0", ":", ":", "2", "]", ",", "cfg_list", "[", "1", ":", ":", "2", "]", ")", ":", "\n", "        ", "key_list", "=", "k", ".", "split", "(", "'.'", ")", "\n", "d", "=", "cfg", "\n", "for", "subkey", "in", "key_list", "[", ":", "-", "1", "]", ":", "\n", "            ", "assert", "subkey", "in", "d", "\n", "d", "=", "d", "[", "subkey", "]", "\n", "", "subkey", "=", "key_list", "[", "-", "1", "]", "\n", "assert", "subkey", "in", "d", "\n", "try", ":", "\n", "            ", "value", "=", "literal_eval", "(", "v", ")", "\n", "", "except", ":", "\n", "# handle the case when v is a string literal", "\n", "            ", "value", "=", "v", "\n", "", "assert", "isinstance", "(", "value", ",", "type", "(", "d", "[", "subkey", "]", ")", ")", ",", "'type {} does not match original type {}'", ".", "format", "(", "type", "(", "value", ")", ",", "type", "(", "d", "[", "subkey", "]", ")", ")", "\n", "d", "[", "subkey", "]", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.kemo-huang_jmodt.jmodt.config.print_config_to_log": [[279, 293], ["config.items", "isinstance", "config.print_config_to_log", "logger.info", "print", "logger.info", "print"], "function", ["home.repos.pwc.inspect_result.kemo-huang_jmodt.jmodt.config.print_config_to_log"], ["", "", "def", "print_config_to_log", "(", "config", ",", "pre", "=", "'cfg'", ",", "logger", "=", "None", ")", ":", "\n", "    ", "for", "key", ",", "val", "in", "config", ".", "items", "(", ")", ":", "\n", "        ", "if", "isinstance", "(", "config", "[", "key", "]", ",", "EasyDict", ")", ":", "\n", "            ", "if", "logger", "is", "not", "None", ":", "\n", "                ", "logger", ".", "info", "(", "'\\n%s.%s = edict()'", "%", "(", "pre", ",", "key", ")", ")", "\n", "", "else", ":", "\n", "                ", "print", "(", "'\\n%s.%s = edict()'", "%", "(", "pre", ",", "key", ")", ")", "\n", "", "print_config_to_log", "(", "config", "[", "key", "]", ",", "pre", "=", "pre", "+", "'.'", "+", "key", ",", "logger", "=", "logger", ")", "\n", "continue", "\n", "\n", "", "if", "logger", "is", "not", "None", ":", "\n", "            ", "logger", ".", "info", "(", "'%s.%s: %s'", "%", "(", "pre", ",", "key", ",", "val", ")", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "'%s.%s: %s'", "%", "(", "pre", ",", "key", ",", "val", ")", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.kemo-huang_jmodt.utils.kitti_utils.get_objects_from_label": [[9, 14], ["open", "f.readlines", "jmodt.utils.object3d.Object3d"], "function", ["None"], ["def", "get_objects_from_label", "(", "label_file", ")", ":", "\n", "    ", "with", "open", "(", "label_file", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "lines", "=", "f", ".", "readlines", "(", ")", "\n", "", "objects", "=", "[", "Object3d", "(", "line", ")", "for", "line", "in", "lines", "]", "\n", "return", "objects", "\n", "\n"]], "home.repos.pwc.inspect_result.kemo-huang_jmodt.utils.kitti_utils.dist_to_plane": [[16, 31], ["numpy.array", "numpy.sqrt"], "function", ["None"], ["", "def", "dist_to_plane", "(", "plane", ",", "points", ")", ":", "\n", "    ", "\"\"\"\n    Calculates the signed distance from a 3D plane to each point in a list of points\n    :param plane: (a, b, c, d)\n    :param points: (N, 3)\n    :return: (N), signed distance of each point to the plane\n    \"\"\"", "\n", "a", ",", "b", ",", "c", ",", "d", "=", "plane", "\n", "\n", "points", "=", "np", ".", "array", "(", "points", ")", "\n", "x", "=", "points", "[", ":", ",", "0", "]", "\n", "y", "=", "points", "[", ":", ",", "1", "]", "\n", "z", "=", "points", "[", ":", ",", "2", "]", "\n", "\n", "return", "(", "a", "*", "x", "+", "b", "*", "y", "+", "c", "*", "z", "+", "d", ")", "/", "np", ".", "sqrt", "(", "a", "**", "2", "+", "b", "**", "2", "+", "c", "**", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kemo-huang_jmodt.utils.kitti_utils.rotate_pc_along_y": [[33, 44], ["numpy.cos", "numpy.sin", "numpy.array", "numpy.dot", "numpy.transpose"], "function", ["None"], ["", "def", "rotate_pc_along_y", "(", "pc", ",", "rot_angle", ")", ":", "\n", "    ", "\"\"\"\n    params pc: (N, 3+C), (N, 3) is in the rectified camera coordinate\n    params rot_angle: rad scalar\n    Output pc: updated pc with XYZ rotated\n    \"\"\"", "\n", "cosval", "=", "np", ".", "cos", "(", "rot_angle", ")", "\n", "sinval", "=", "np", ".", "sin", "(", "rot_angle", ")", "\n", "rotmat", "=", "np", ".", "array", "(", "[", "[", "cosval", ",", "-", "sinval", "]", ",", "[", "sinval", ",", "cosval", "]", "]", ")", "\n", "pc", "[", ":", ",", "[", "0", ",", "2", "]", "]", "=", "np", ".", "dot", "(", "pc", "[", ":", ",", "[", "0", ",", "2", "]", "]", ",", "np", ".", "transpose", "(", "rotmat", ")", ")", "\n", "return", "pc", "\n", "\n"]], "home.repos.pwc.inspect_result.kemo-huang_jmodt.utils.kitti_utils.rotate_pc_along_y_torch": [[46, 65], ["torch.cos().view", "torch.sin().view", "torch.cat", "torch.cat", "torch.cat", "torch.matmul().float", "torch.cos", "torch.sin", "torch.cat.unsqueeze", "torch.cat.unsqueeze", "torch.matmul", "torch.cat.permute"], "function", ["None"], ["", "def", "rotate_pc_along_y_torch", "(", "pc", ",", "rot_angle", ")", ":", "\n", "    ", "\"\"\"\n    :param pc: (N, 512, 3 + C)\n    :param rot_angle: (N)\n    :return:\n    TODO: merge with rotate_pc_along_y_torch in bbox_transform.py\n    \"\"\"", "\n", "cosa", "=", "torch", ".", "cos", "(", "rot_angle", ")", ".", "view", "(", "-", "1", ",", "1", ")", "# (N, 1)", "\n", "sina", "=", "torch", ".", "sin", "(", "rot_angle", ")", ".", "view", "(", "-", "1", ",", "1", ")", "# (N, 1)", "\n", "\n", "raw_1", "=", "torch", ".", "cat", "(", "[", "cosa", ",", "-", "sina", "]", ",", "dim", "=", "1", ")", "# (N, 2)", "\n", "raw_2", "=", "torch", ".", "cat", "(", "[", "sina", ",", "cosa", "]", ",", "dim", "=", "1", ")", "# (N, 2)", "\n", "R", "=", "torch", ".", "cat", "(", "(", "raw_1", ".", "unsqueeze", "(", "dim", "=", "1", ")", ",", "raw_2", ".", "unsqueeze", "(", "dim", "=", "1", ")", ")", ",", "dim", "=", "1", ")", "# (N, 2, 2)", "\n", "\n", "pc_temp", "=", "pc", "[", ":", ",", ":", ",", "[", "0", ",", "2", "]", "]", "# (N, 512, 2)", "\n", "\n", "pc", "[", ":", ",", ":", ",", "[", "0", ",", "2", "]", "]", "=", "torch", ".", "matmul", "(", "pc_temp", ",", "R", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ")", ".", "float", "(", ")", "# (N, 512, 2)", "\n", "\n", "return", "pc", "\n", "\n"]], "home.repos.pwc.inspect_result.kemo-huang_jmodt.utils.kitti_utils.boxes3d_to_corners3d": [[67, 105], ["numpy.zeros", "numpy.concatenate", "np.concatenate.astype", "numpy.array", "numpy.array", "h.reshape().repeat", "numpy.array", "numpy.transpose", "numpy.concatenate", "numpy.matmul", "x_loc.reshape", "x_corners.reshape", "y_loc.reshape", "np.zeros.reshape", "z_loc.reshape", "z_corners.reshape", "numpy.zeros", "numpy.ones", "x.reshape", "y.reshape", "z.reshape", "h.reshape", "x_corners.reshape", "np.zeros.reshape", "z_corners.reshape", "numpy.cos", "numpy.sin", "numpy.cos", "numpy.sin"], "function", ["None"], ["", "def", "boxes3d_to_corners3d", "(", "boxes3d", ",", "rotate", "=", "True", ")", ":", "\n", "    ", "\"\"\"\n    :param boxes3d: (N, 7) [x, y, z, h, w, l, ry]\n    :param rotate:\n    :return: corners3d: (N, 8, 3)\n    \"\"\"", "\n", "boxes_num", "=", "boxes3d", ".", "shape", "[", "0", "]", "\n", "h", ",", "w", ",", "l", "=", "boxes3d", "[", ":", ",", "3", "]", ",", "boxes3d", "[", ":", ",", "4", "]", ",", "boxes3d", "[", ":", ",", "5", "]", "\n", "x_corners", "=", "np", ".", "array", "(", "[", "l", "/", "2.", ",", "l", "/", "2.", ",", "-", "l", "/", "2.", ",", "-", "l", "/", "2.", ",", "l", "/", "2.", ",", "l", "/", "2.", ",", "-", "l", "/", "2.", ",", "-", "l", "/", "2.", "]", ",", "\n", "dtype", "=", "np", ".", "float32", ")", ".", "T", "# (N, 8)", "\n", "z_corners", "=", "np", ".", "array", "(", "[", "w", "/", "2.", ",", "-", "w", "/", "2.", ",", "-", "w", "/", "2.", ",", "w", "/", "2.", ",", "w", "/", "2.", ",", "-", "w", "/", "2.", ",", "-", "w", "/", "2.", ",", "w", "/", "2.", "]", ",", "\n", "dtype", "=", "np", ".", "float32", ")", ".", "T", "# (N, 8)", "\n", "\n", "y_corners", "=", "np", ".", "zeros", "(", "(", "boxes_num", ",", "8", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "y_corners", "[", ":", ",", "4", ":", "8", "]", "=", "-", "h", ".", "reshape", "(", "boxes_num", ",", "1", ")", ".", "repeat", "(", "4", ",", "axis", "=", "1", ")", "# (N, 8)", "\n", "\n", "if", "rotate", ":", "\n", "        ", "ry", "=", "boxes3d", "[", ":", ",", "6", "]", "\n", "zeros", ",", "ones", "=", "np", ".", "zeros", "(", "ry", ".", "size", ",", "dtype", "=", "np", ".", "float32", ")", ",", "np", ".", "ones", "(", "ry", ".", "size", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "rot_list", "=", "np", ".", "array", "(", "[", "[", "np", ".", "cos", "(", "ry", ")", ",", "zeros", ",", "-", "np", ".", "sin", "(", "ry", ")", "]", ",", "\n", "[", "zeros", ",", "ones", ",", "zeros", "]", ",", "\n", "[", "np", ".", "sin", "(", "ry", ")", ",", "zeros", ",", "np", ".", "cos", "(", "ry", ")", "]", "]", ")", "# (3, 3, N)", "\n", "R_list", "=", "np", ".", "transpose", "(", "rot_list", ",", "(", "2", ",", "0", ",", "1", ")", ")", "# (N, 3, 3)", "\n", "\n", "temp_corners", "=", "np", ".", "concatenate", "(", "(", "x_corners", ".", "reshape", "(", "-", "1", ",", "8", ",", "1", ")", ",", "y_corners", ".", "reshape", "(", "-", "1", ",", "8", ",", "1", ")", ",", "\n", "z_corners", ".", "reshape", "(", "-", "1", ",", "8", ",", "1", ")", ")", ",", "axis", "=", "2", ")", "# (N, 8, 3)", "\n", "rotated_corners", "=", "np", ".", "matmul", "(", "temp_corners", ",", "R_list", ")", "# (N, 8, 3)", "\n", "x_corners", ",", "y_corners", ",", "z_corners", "=", "rotated_corners", "[", ":", ",", ":", ",", "0", "]", ",", "rotated_corners", "[", ":", ",", ":", ",", "1", "]", ",", "rotated_corners", "[", ":", ",", ":", ",", "2", "]", "\n", "\n", "", "x_loc", ",", "y_loc", ",", "z_loc", "=", "boxes3d", "[", ":", ",", "0", "]", ",", "boxes3d", "[", ":", ",", "1", "]", ",", "boxes3d", "[", ":", ",", "2", "]", "\n", "\n", "x", "=", "x_loc", ".", "reshape", "(", "-", "1", ",", "1", ")", "+", "x_corners", ".", "reshape", "(", "-", "1", ",", "8", ")", "\n", "y", "=", "y_loc", ".", "reshape", "(", "-", "1", ",", "1", ")", "+", "y_corners", ".", "reshape", "(", "-", "1", ",", "8", ")", "\n", "z", "=", "z_loc", ".", "reshape", "(", "-", "1", ",", "1", ")", "+", "z_corners", ".", "reshape", "(", "-", "1", ",", "8", ")", "\n", "\n", "corners", "=", "np", ".", "concatenate", "(", "(", "x", ".", "reshape", "(", "-", "1", ",", "8", ",", "1", ")", ",", "y", ".", "reshape", "(", "-", "1", ",", "8", ",", "1", ")", ",", "z", ".", "reshape", "(", "-", "1", ",", "8", ",", "1", ")", ")", ",", "axis", "=", "2", ")", "\n", "\n", "return", "corners", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kemo-huang_jmodt.utils.kitti_utils.boxes3d_to_corners3d_torch": [[107, 134], ["torch.cuda.FloatTensor().fill_", "torch.cuda.FloatTensor().fill_", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.matmul", "corners_rotated.permute.permute", "torch.cos", "torch.sin", "centers.unsqueeze().expand", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cat.unsqueeze", "torch.cat.unsqueeze", "torch.cat.unsqueeze", "torch.cat.unsqueeze", "torch.cat.unsqueeze", "torch.cat.unsqueeze", "centers.unsqueeze"], "function", ["None"], ["", "def", "boxes3d_to_corners3d_torch", "(", "boxes3d", ")", ":", "\n", "    ", "\"\"\"\n    :param boxes3d: (N, 7) [x, y, z, h, w, l, ry]\n    :return: corners_rotated: (N, 8, 3)\n    \"\"\"", "\n", "boxes_num", "=", "boxes3d", ".", "shape", "[", "0", "]", "\n", "h", ",", "w", ",", "l", ",", "ry", "=", "boxes3d", "[", ":", ",", "3", ":", "4", "]", ",", "boxes3d", "[", ":", ",", "4", ":", "5", "]", ",", "boxes3d", "[", ":", ",", "5", ":", "6", "]", ",", "boxes3d", "[", ":", ",", "6", ":", "7", "]", "\n", "centers", "=", "boxes3d", "[", ":", ",", "0", ":", "3", "]", "\n", "zeros", "=", "torch", ".", "cuda", ".", "FloatTensor", "(", "boxes_num", ",", "1", ")", ".", "fill_", "(", "0", ")", "\n", "ones", "=", "torch", ".", "cuda", ".", "FloatTensor", "(", "boxes_num", ",", "1", ")", ".", "fill_", "(", "1", ")", "\n", "\n", "x_corners", "=", "torch", ".", "cat", "(", "[", "l", "/", "2.", ",", "l", "/", "2.", ",", "-", "l", "/", "2.", ",", "-", "l", "/", "2.", ",", "l", "/", "2.", ",", "l", "/", "2.", ",", "-", "l", "/", "2.", ",", "-", "l", "/", "2.", "]", ",", "dim", "=", "1", ")", "# (N, 8)", "\n", "y_corners", "=", "torch", ".", "cat", "(", "[", "zeros", ",", "zeros", ",", "zeros", ",", "zeros", ",", "-", "h", ",", "-", "h", ",", "-", "h", ",", "-", "h", "]", ",", "dim", "=", "1", ")", "# (N, 8)", "\n", "z_corners", "=", "torch", ".", "cat", "(", "[", "w", "/", "2.", ",", "-", "w", "/", "2.", ",", "-", "w", "/", "2.", ",", "w", "/", "2.", ",", "w", "/", "2.", ",", "-", "w", "/", "2.", ",", "-", "w", "/", "2.", ",", "w", "/", "2.", "]", ",", "dim", "=", "1", ")", "# (N, 8)", "\n", "corners", "=", "torch", ".", "cat", "(", "(", "x_corners", ".", "unsqueeze", "(", "dim", "=", "1", ")", ",", "y_corners", ".", "unsqueeze", "(", "dim", "=", "1", ")", ",", "z_corners", ".", "unsqueeze", "(", "dim", "=", "1", ")", ")", ",", "\n", "dim", "=", "1", ")", "# (N, 3, 8)", "\n", "\n", "cosa", ",", "sina", "=", "torch", ".", "cos", "(", "ry", ")", ",", "torch", ".", "sin", "(", "ry", ")", "\n", "raw_1", "=", "torch", ".", "cat", "(", "[", "cosa", ",", "zeros", ",", "sina", "]", ",", "dim", "=", "1", ")", "\n", "raw_2", "=", "torch", ".", "cat", "(", "[", "zeros", ",", "ones", ",", "zeros", "]", ",", "dim", "=", "1", ")", "\n", "raw_3", "=", "torch", ".", "cat", "(", "[", "-", "sina", ",", "zeros", ",", "cosa", "]", ",", "dim", "=", "1", ")", "\n", "R", "=", "torch", ".", "cat", "(", "(", "raw_1", ".", "unsqueeze", "(", "dim", "=", "1", ")", ",", "raw_2", ".", "unsqueeze", "(", "dim", "=", "1", ")", ",", "raw_3", ".", "unsqueeze", "(", "dim", "=", "1", ")", ")", ",", "dim", "=", "1", ")", "# (N, 3, 3)", "\n", "\n", "corners_rotated", "=", "torch", ".", "matmul", "(", "R", ",", "corners", ")", "# (N, 3, 8)", "\n", "corners_rotated", "=", "corners_rotated", "+", "centers", ".", "unsqueeze", "(", "dim", "=", "2", ")", ".", "expand", "(", "-", "1", ",", "-", "1", ",", "8", ")", "\n", "corners_rotated", "=", "corners_rotated", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "return", "corners_rotated", "\n", "\n"]], "home.repos.pwc.inspect_result.kemo-huang_jmodt.utils.kitti_utils.boxes3d_to_bev_torch": [[136, 150], ["boxes3d.new", "torch.Size"], "function", ["None"], ["", "def", "boxes3d_to_bev_torch", "(", "boxes3d", ")", ":", "\n", "    ", "\"\"\"\n    :param boxes3d: (N, 7) [x, y, z, h, w, l, ry]\n    :return:\n        boxes_bev: (N, 5) [x1, y1, x2, y2, ry]\n    \"\"\"", "\n", "boxes_bev", "=", "boxes3d", ".", "new", "(", "torch", ".", "Size", "(", "(", "boxes3d", ".", "shape", "[", "0", "]", ",", "5", ")", ")", ")", "\n", "\n", "cu", ",", "cv", "=", "boxes3d", "[", ":", ",", "0", "]", ",", "boxes3d", "[", ":", ",", "2", "]", "\n", "half_l", ",", "half_w", "=", "boxes3d", "[", ":", ",", "5", "]", "/", "2", ",", "boxes3d", "[", ":", ",", "4", "]", "/", "2", "\n", "boxes_bev", "[", ":", ",", "0", "]", ",", "boxes_bev", "[", ":", ",", "1", "]", "=", "cu", "-", "half_l", ",", "cv", "-", "half_w", "\n", "boxes_bev", "[", ":", ",", "2", "]", ",", "boxes_bev", "[", ":", ",", "3", "]", "=", "cu", "+", "half_l", ",", "cv", "+", "half_w", "\n", "boxes_bev", "[", ":", ",", "4", "]", "=", "boxes3d", "[", ":", ",", "6", "]", "\n", "return", "boxes_bev", "\n", "\n"]], "home.repos.pwc.inspect_result.kemo-huang_jmodt.utils.kitti_utils.enlarge_box3d": [[152, 163], ["isinstance", "boxes3d.copy", "boxes3d.clone"], "function", ["None"], ["", "def", "enlarge_box3d", "(", "boxes3d", ",", "extra_width", ")", ":", "\n", "    ", "\"\"\"\n    :param boxes3d: (N, 7) [x, y, z, h, w, l, ry]\n    \"\"\"", "\n", "if", "isinstance", "(", "boxes3d", ",", "np", ".", "ndarray", ")", ":", "\n", "        ", "large_boxes3d", "=", "boxes3d", ".", "copy", "(", ")", "\n", "", "else", ":", "\n", "        ", "large_boxes3d", "=", "boxes3d", ".", "clone", "(", ")", "\n", "", "large_boxes3d", "[", ":", ",", "3", ":", "6", "]", "+=", "extra_width", "*", "2", "\n", "large_boxes3d", "[", ":", ",", "1", "]", "+=", "extra_width", "\n", "return", "large_boxes3d", "\n", "\n"]], "home.repos.pwc.inspect_result.kemo-huang_jmodt.utils.kitti_utils.in_hull": [[165, 180], ["isinstance", "scipy.spatial.Delaunay", "scipy.spatial.Delaunay.find_simplex", "print", "numpy.zeros", "str"], "function", ["None"], ["", "def", "in_hull", "(", "p", ",", "hull", ")", ":", "\n", "    ", "\"\"\"\n    :param p: (N, K) test points\n    :param hull: (M, K) M corners of a box\n    :return (N) bool\n    \"\"\"", "\n", "try", ":", "\n", "        ", "if", "not", "isinstance", "(", "hull", ",", "Delaunay", ")", ":", "\n", "            ", "hull", "=", "Delaunay", "(", "hull", ")", "\n", "", "flag", "=", "hull", ".", "find_simplex", "(", "p", ")", ">=", "0", "\n", "", "except", "scipy", ".", "spatial", ".", "qhull", ".", "QhullError", ":", "\n", "        ", "print", "(", "'Warning: not a hull %s'", "%", "str", "(", "hull", ")", ")", "\n", "flag", "=", "np", ".", "zeros", "(", "p", ".", "shape", "[", "0", "]", ",", "dtype", "=", "np", ".", "bool", ")", "\n", "\n", "", "return", "flag", "\n", "\n"]], "home.repos.pwc.inspect_result.kemo-huang_jmodt.utils.kitti_utils.get_iou3d": [[182, 223], ["numpy.zeros", "numpy.zeros", "range", "range", "A[].sum", "A[].sum", "B[].sum", "B[].sum", "numpy.max", "numpy.min", "numpy.max", "Polygon", "Polygon", "bottom_a.intersection"], "function", ["None"], ["", "def", "get_iou3d", "(", "corners3d", ",", "query_corners3d", ",", "need_bev", "=", "False", ")", ":", "\n", "    ", "\"\"\"\t\n    :param corners3d: (N, 8, 3) in rect coords\t\n    :param query_corners3d: (M, 8, 3)\t\n    :return:\t\n    \"\"\"", "\n", "from", "shapely", ".", "geometry", "import", "Polygon", "\n", "A", ",", "B", "=", "corners3d", ",", "query_corners3d", "\n", "N", ",", "M", "=", "A", ".", "shape", "[", "0", "]", ",", "B", ".", "shape", "[", "0", "]", "\n", "iou3d", "=", "np", ".", "zeros", "(", "(", "N", ",", "M", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "iou_bev", "=", "np", ".", "zeros", "(", "(", "N", ",", "M", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "# for height overlap, since y face down, use the negative y", "\n", "min_h_a", "=", "-", "A", "[", ":", ",", "0", ":", "4", ",", "1", "]", ".", "sum", "(", "axis", "=", "1", ")", "/", "4.0", "\n", "max_h_a", "=", "-", "A", "[", ":", ",", "4", ":", "8", ",", "1", "]", ".", "sum", "(", "axis", "=", "1", ")", "/", "4.0", "\n", "min_h_b", "=", "-", "B", "[", ":", ",", "0", ":", "4", ",", "1", "]", ".", "sum", "(", "axis", "=", "1", ")", "/", "4.0", "\n", "max_h_b", "=", "-", "B", "[", ":", ",", "4", ":", "8", ",", "1", "]", ".", "sum", "(", "axis", "=", "1", ")", "/", "4.0", "\n", "\n", "for", "i", "in", "range", "(", "N", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "M", ")", ":", "\n", "            ", "max_of_min", "=", "np", ".", "max", "(", "[", "min_h_a", "[", "i", "]", ",", "min_h_b", "[", "j", "]", "]", ")", "\n", "min_of_max", "=", "np", ".", "min", "(", "[", "max_h_a", "[", "i", "]", ",", "max_h_b", "[", "j", "]", "]", ")", "\n", "h_overlap", "=", "np", ".", "max", "(", "[", "0", ",", "min_of_max", "-", "max_of_min", "]", ")", "\n", "if", "h_overlap", "==", "0", ":", "\n", "                ", "continue", "\n", "\n", "", "bottom_a", ",", "bottom_b", "=", "Polygon", "(", "A", "[", "i", ",", "0", ":", "4", ",", "[", "0", ",", "2", "]", "]", ".", "T", ")", ",", "Polygon", "(", "B", "[", "j", ",", "0", ":", "4", ",", "[", "0", ",", "2", "]", "]", ".", "T", ")", "\n", "if", "bottom_a", ".", "is_valid", "and", "bottom_b", ".", "is_valid", ":", "\n", "# check is valid,  A valid Polygon may not possess any overlapping exterior or interior rings.", "\n", "                ", "bottom_overlap", "=", "bottom_a", ".", "intersection", "(", "bottom_b", ")", ".", "area", "\n", "", "else", ":", "\n", "                ", "bottom_overlap", "=", "0.", "\n", "", "overlap3d", "=", "bottom_overlap", "*", "h_overlap", "\n", "union3d", "=", "bottom_a", ".", "area", "*", "(", "max_h_a", "[", "i", "]", "-", "min_h_a", "[", "i", "]", ")", "+", "bottom_b", ".", "area", "*", "(", "max_h_b", "[", "j", "]", "-", "min_h_b", "[", "j", "]", ")", "-", "overlap3d", "\n", "iou3d", "[", "i", "]", "[", "j", "]", "=", "overlap3d", "/", "union3d", "\n", "iou_bev", "[", "i", "]", "[", "j", "]", "=", "bottom_overlap", "/", "(", "bottom_a", ".", "area", "+", "bottom_b", ".", "area", "-", "bottom_overlap", ")", "\n", "\n", "", "", "if", "need_bev", ":", "\n", "        ", "return", "iou3d", ",", "iou_bev", "\n", "\n", "", "return", "iou3d", "\n", "", ""]], "home.repos.pwc.inspect_result.kemo-huang_jmodt.utils.object3d.Object3d.__init__": [[5, 19], ["line.strip().split", "float", "float", "float", "numpy.array", "float", "float", "float", "numpy.array", "numpy.linalg.norm", "float", "float", "line.strip", "float", "float", "float", "float", "float", "float", "float", "line.strip().split.__len__"], "methods", ["home.repos.pwc.inspect_result.kemo-huang_jmodt.datasets.kitti_dataset.KittiDataset.__len__"], ["    ", "def", "__init__", "(", "self", ",", "line", ")", ":", "\n", "        ", "label", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "' '", ")", "\n", "self", ".", "cls_type", "=", "label", "[", "0", "]", "\n", "self", ".", "truncation", "=", "float", "(", "label", "[", "1", "]", ")", "\n", "self", ".", "occlusion", "=", "float", "(", "label", "[", "2", "]", ")", "# 0:fully visible 1:partly occluded 2:largely occluded 3:unknown", "\n", "self", ".", "alpha", "=", "float", "(", "label", "[", "3", "]", ")", "\n", "self", ".", "box2d", "=", "np", ".", "array", "(", "(", "float", "(", "label", "[", "4", "]", ")", ",", "float", "(", "label", "[", "5", "]", ")", ",", "float", "(", "label", "[", "6", "]", ")", ",", "float", "(", "label", "[", "7", "]", ")", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "self", ".", "h", "=", "float", "(", "label", "[", "8", "]", ")", "\n", "self", ".", "w", "=", "float", "(", "label", "[", "9", "]", ")", "\n", "self", ".", "l", "=", "float", "(", "label", "[", "10", "]", ")", "\n", "self", ".", "pos", "=", "np", ".", "array", "(", "(", "float", "(", "label", "[", "11", "]", ")", ",", "float", "(", "label", "[", "12", "]", ")", ",", "float", "(", "label", "[", "13", "]", ")", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "self", ".", "dis_to_cam", "=", "np", ".", "linalg", ".", "norm", "(", "self", ".", "pos", ")", "\n", "self", ".", "ry", "=", "float", "(", "label", "[", "14", "]", ")", "\n", "self", ".", "score", "=", "float", "(", "label", "[", "15", "]", ")", "if", "label", ".", "__len__", "(", ")", "==", "16", "else", "-", "1.0", "\n", "\n"]], "home.repos.pwc.inspect_result.kemo-huang_jmodt.utils.object3d.Object3d.to_kitti_format": [[20, 26], ["int", "int"], "methods", ["None"], ["", "def", "to_kitti_format", "(", "self", ")", ":", "\n", "        ", "kitti_str", "=", "'%s %d %d %.2f %.2f %.2f %.2f %.2f %.2f %.2f %.2f %.2f %.2f %.2f %.2f'", "%", "(", "self", ".", "cls_type", ",", "int", "(", "self", ".", "truncation", ")", ",", "int", "(", "self", ".", "occlusion", ")", ",", "self", ".", "alpha", ",", "\n", "self", ".", "box2d", "[", "0", "]", ",", "self", ".", "box2d", "[", "1", "]", ",", "self", ".", "box2d", "[", "2", "]", ",", "self", ".", "box2d", "[", "3", "]", ",", "\n", "self", ".", "h", ",", "self", ".", "w", ",", "self", ".", "l", ",", "self", ".", "pos", "[", "0", "]", ",", "self", ".", "pos", "[", "1", "]", ",", "self", ".", "pos", "[", "2", "]", ",", "self", ".", "ry", ")", "\n", "return", "kitti_str", "\n", "", "", ""]], "home.repos.pwc.inspect_result.kemo-huang_jmodt.utils.bbox_transform.rotate_pc_along_y_torch": [[8, 25], ["torch.cos().view", "torch.cos().view", "torch.sin().view", "torch.sin().view", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "pc[].unsqueeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.cos", "torch.cos", "torch.sin", "torch.sin", "torch.cat.unsqueeze", "torch.cat.unsqueeze", "torch.matmul", "torch.matmul", "torch.cat.permute"], "function", ["None"], ["def", "rotate_pc_along_y_torch", "(", "pc", ",", "rot_angle", ")", ":", "\n", "    ", "\"\"\"\n    :param pc: (N, 3 + C)\n    :param rot_angle: (N)\n    :return:\n    \"\"\"", "\n", "cosa", "=", "torch", ".", "cos", "(", "rot_angle", ")", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "sina", "=", "torch", ".", "sin", "(", "rot_angle", ")", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "\n", "raw_1", "=", "torch", ".", "cat", "(", "[", "cosa", ",", "-", "sina", "]", ",", "dim", "=", "1", ")", "\n", "raw_2", "=", "torch", ".", "cat", "(", "[", "sina", ",", "cosa", "]", ",", "dim", "=", "1", ")", "\n", "R", "=", "torch", ".", "cat", "(", "(", "raw_1", ".", "unsqueeze", "(", "dim", "=", "1", ")", ",", "raw_2", ".", "unsqueeze", "(", "dim", "=", "1", ")", ")", ",", "dim", "=", "1", ")", "# (N, 2, 2)", "\n", "\n", "pc_temp", "=", "pc", "[", ":", ",", "[", "0", ",", "2", "]", "]", ".", "unsqueeze", "(", "dim", "=", "1", ")", "# (N, 1, 2)", "\n", "\n", "pc", "[", ":", ",", "[", "0", ",", "2", "]", "]", "=", "torch", ".", "matmul", "(", "pc_temp", ",", "R", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ")", ".", "squeeze", "(", "dim", "=", "1", ")", "\n", "return", "pc", "\n", "\n"]], "home.repos.pwc.inspect_result.kemo-huang_jmodt.utils.bbox_transform.decode_bbox_target": [[27, 261], ["anchor_size.to.to", "torch.cat", "torch.cat", "roi_box3d.get_device", "int", "int", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.softmax", "torch.softmax", "torch.arange().float", "torch.arange().float", "xz_bin_center.to.to", "torch.argmax", "torch.argmax", "torch.gather().squeeze", "torch.gather().squeeze", "torch.argmax", "torch.argmax", "torch.gather().squeeze", "torch.gather().squeeze", "torch.softmax", "bbox_transform.rotate_pc_along_y_torch", "torch.gather().squeeze", "torch.gather().squeeze", "torch.gather().squeeze", "torch.gather().squeeze", "torch.arange().float().to", "torch.arange().float().to", "F.softmax.clone", "F.softmax.clone", "ry.clone", "ry.clone", "torch.arange().float().to", "torch.arange().float().to", "F.softmax.clone", "F.softmax.clone", "ry.clone", "ry.clone", "pos_x.view", "pos_y.view", "pos_z.view", "ry.view", "torch.arange", "torch.arange", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "ry_bin.clone.sum", "ry_bin.clone.sum", "p_rside.squeeze", "p_lside.squeeze", "p_rside.squeeze", "p_lside.squeeze", "ry_bin.clone.sum", "ry_bin.clone.sum", "p_rside.squeeze", "p_lside.squeeze", "p_rside.squeeze", "p_lside.squeeze", "torch.argmax.float", "torch.argmax.float", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.arange().float", "torch.arange().float", "use_r.float", "use_l.float", "torch.arange().float", "torch.arange().float", "use_r.float", "use_l.float", "torch.argmax.unsqueeze", "torch.argmax.float", "F.softmax.unsqueeze", "F.softmax.float", "torch.argmax.unsqueeze", "torch.argmax.unsqueeze", "F.softmax.float", "torch.arange", "torch.arange", "torch.arange", "torch.arange"], "function", ["home.repos.pwc.inspect_result.kemo-huang_jmodt.utils.bbox_transform.rotate_pc_along_y_torch"], ["", "def", "decode_bbox_target", "(", "roi_box3d", ",", "pred_reg", ",", "loc_scope", ",", "loc_bin_size", ",", "num_head_bin", ",", "anchor_size", ",", "\n", "get_xz_fine", "=", "True", ",", "get_y_by_bin", "=", "False", ",", "loc_y_scope", "=", "0.5", ",", "loc_y_bin_size", "=", "0.25", ",", "get_ry_fine", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    :param roi_box3d: (N, 7)\n    :param pred_reg: (N, C)\n    :param loc_scope:\n    :param loc_bin_size:\n    :param num_head_bin:\n    :param anchor_size:\n    :param get_xz_fine:\n    :param get_y_by_bin:\n    :param loc_y_scope:\n    :param loc_y_bin_size:\n    :param get_ry_fine:\n    :return:\n    \"\"\"", "\n", "assert", "roi_box3d", ".", "shape", "[", "0", "]", "==", "pred_reg", ".", "shape", "[", "0", "]", ",", "f\"{roi_box3d.shape[0]} != {pred_reg.shape[0]}\"", "\n", "anchor_size", "=", "anchor_size", ".", "to", "(", "roi_box3d", ".", "get_device", "(", ")", ")", "\n", "per_loc_bin_num", "=", "int", "(", "loc_scope", "/", "loc_bin_size", ")", "*", "2", "\n", "loc_y_bin_num", "=", "int", "(", "loc_y_scope", "/", "loc_y_bin_size", ")", "*", "2", "\n", "\n", "# recover xz localization", "\n", "assert", "cfg", ".", "TRAIN", ".", "BBOX_AVG_BY_BIN", "==", "cfg", ".", "EVAL", ".", "BBOX_AVG_BY_BIN", "\n", "\n", "if", "not", "cfg", ".", "TRAIN", ".", "BBOX_AVG_BY_BIN", ":", "\n", "        ", "x_bin_l", ",", "x_bin_r", "=", "0", ",", "per_loc_bin_num", "\n", "z_bin_l", ",", "z_bin_r", "=", "per_loc_bin_num", ",", "per_loc_bin_num", "*", "2", "\n", "start_offset", "=", "z_bin_r", "\n", "\n", "x_bin", "=", "torch", ".", "argmax", "(", "pred_reg", "[", ":", ",", "x_bin_l", ":", "x_bin_r", "]", ",", "dim", "=", "1", ")", "\n", "z_bin", "=", "torch", ".", "argmax", "(", "pred_reg", "[", ":", ",", "z_bin_l", ":", "z_bin_r", "]", ",", "dim", "=", "1", ")", "\n", "\n", "pos_x", "=", "x_bin", ".", "float", "(", ")", "*", "loc_bin_size", "+", "loc_bin_size", "/", "2", "-", "loc_scope", "\n", "pos_z", "=", "z_bin", ".", "float", "(", ")", "*", "loc_bin_size", "+", "loc_bin_size", "/", "2", "-", "loc_scope", "\n", "\n", "if", "get_xz_fine", ":", "\n", "            ", "x_res_l", ",", "x_res_r", "=", "per_loc_bin_num", "*", "2", ",", "per_loc_bin_num", "*", "3", "\n", "z_res_l", ",", "z_res_r", "=", "per_loc_bin_num", "*", "3", ",", "per_loc_bin_num", "*", "4", "\n", "start_offset", "=", "z_res_r", "\n", "\n", "x_res_norm", "=", "torch", ".", "gather", "(", "pred_reg", "[", ":", ",", "x_res_l", ":", "x_res_r", "]", ",", "dim", "=", "1", ",", "index", "=", "x_bin", ".", "unsqueeze", "(", "dim", "=", "1", ")", ")", ".", "squeeze", "(", "dim", "=", "1", ")", "\n", "z_res_norm", "=", "torch", ".", "gather", "(", "pred_reg", "[", ":", ",", "z_res_l", ":", "z_res_r", "]", ",", "dim", "=", "1", ",", "index", "=", "z_bin", ".", "unsqueeze", "(", "dim", "=", "1", ")", ")", ".", "squeeze", "(", "dim", "=", "1", ")", "\n", "x_res", "=", "x_res_norm", "*", "loc_bin_size", "\n", "z_res", "=", "z_res_norm", "*", "loc_bin_size", "\n", "\n", "pos_x", "+=", "x_res", "\n", "pos_z", "+=", "z_res", "\n", "", "", "else", ":", "\n", "# print('BBOX_AVG_BY_BIN: True')", "\n", "\n", "        ", "x_bin_l", ",", "x_bin_r", "=", "0", ",", "per_loc_bin_num", "\n", "z_bin_l", ",", "z_bin_r", "=", "per_loc_bin_num", ",", "per_loc_bin_num", "*", "2", "\n", "start_offset", "=", "z_bin_r", "\n", "\n", "pred_x_bin", "=", "F", ".", "softmax", "(", "pred_reg", "[", ":", ",", "x_bin_l", ":", "x_bin_r", "]", ",", "1", ")", "# N x num_bin", "\n", "pred_z_bin", "=", "F", ".", "softmax", "(", "pred_reg", "[", ":", ",", "z_bin_l", ":", "z_bin_r", "]", ",", "1", ")", "\n", "\n", "# print(pred_x_bin[:10, :])", "\n", "# input()", "\n", "\n", "xz_bin_ind", "=", "torch", ".", "arange", "(", "per_loc_bin_num", ")", ".", "float", "(", ")", "\n", "xz_bin_center", "=", "xz_bin_ind", "*", "loc_bin_size", "+", "loc_bin_size", "/", "2", "-", "loc_scope", "# num_bin", "\n", "xz_bin_center", "=", "xz_bin_center", ".", "to", "(", "pred_x_bin", ".", "device", ")", "\n", "\n", "pred_x_abs", "=", "xz_bin_center", "\n", "pred_z_abs", "=", "xz_bin_center", "\n", "\n", "assert", "get_xz_fine", ",", "'now only support bin format!'", "\n", "if", "get_xz_fine", ":", "\n", "            ", "x_res_l", ",", "x_res_r", "=", "per_loc_bin_num", "*", "2", ",", "per_loc_bin_num", "*", "3", "\n", "z_res_l", ",", "z_res_r", "=", "per_loc_bin_num", "*", "3", ",", "per_loc_bin_num", "*", "4", "\n", "start_offset", "=", "z_res_r", "\n", "\n", "pred_x_reg", "=", "pred_reg", "[", ":", ",", "x_res_l", ":", "x_res_r", "]", "*", "loc_bin_size", "# N x num_bin", "\n", "pred_z_reg", "=", "pred_reg", "[", ":", ",", "z_res_l", ":", "z_res_r", "]", "*", "loc_bin_size", "\n", "\n", "pred_x_abs", "=", "pred_x_abs", "+", "pred_x_reg", "\n", "pred_z_abs", "=", "pred_z_abs", "+", "pred_z_reg", "\n", "\n", "", "pos_x", "=", "(", "pred_x_abs", "*", "pred_x_bin", ")", ".", "sum", "(", "dim", "=", "1", ")", "\n", "pos_z", "=", "(", "pred_z_abs", "*", "pred_z_bin", ")", ".", "sum", "(", "dim", "=", "1", ")", "\n", "\n", "# recover y localization", "\n", "", "if", "get_y_by_bin", ":", "\n", "        ", "y_bin_l", ",", "y_bin_r", "=", "start_offset", ",", "start_offset", "+", "loc_y_bin_num", "\n", "y_res_l", ",", "y_res_r", "=", "y_bin_r", ",", "y_bin_r", "+", "loc_y_bin_num", "\n", "start_offset", "=", "y_res_r", "\n", "\n", "y_bin", "=", "torch", ".", "argmax", "(", "pred_reg", "[", ":", ",", "y_bin_l", ":", "y_bin_r", "]", ",", "dim", "=", "1", ")", "\n", "y_res_norm", "=", "torch", ".", "gather", "(", "pred_reg", "[", ":", ",", "y_res_l", ":", "y_res_r", "]", ",", "dim", "=", "1", ",", "index", "=", "y_bin", ".", "unsqueeze", "(", "dim", "=", "1", ")", ")", ".", "squeeze", "(", "dim", "=", "1", ")", "\n", "y_res", "=", "y_res_norm", "*", "loc_y_bin_size", "\n", "pos_y", "=", "y_bin", ".", "float", "(", ")", "*", "loc_y_bin_size", "+", "loc_y_bin_size", "/", "2", "-", "loc_y_scope", "+", "y_res", "\n", "pos_y", "=", "pos_y", "+", "roi_box3d", "[", ":", ",", "1", "]", "\n", "", "else", ":", "\n", "        ", "y_offset_l", ",", "y_offset_r", "=", "start_offset", ",", "start_offset", "+", "1", "\n", "start_offset", "=", "y_offset_r", "\n", "\n", "pos_y", "=", "roi_box3d", "[", ":", ",", "1", "]", "+", "pred_reg", "[", ":", ",", "y_offset_l", "]", "\n", "\n", "# recover ry rotation", "\n", "", "ry_bin_l", ",", "ry_bin_r", "=", "start_offset", ",", "start_offset", "+", "num_head_bin", "\n", "ry_res_l", ",", "ry_res_r", "=", "ry_bin_r", ",", "ry_bin_r", "+", "num_head_bin", "\n", "\n", "assert", "cfg", ".", "TRAIN", ".", "RY_WITH_BIN", "==", "cfg", ".", "EVAL", ".", "RY_WITH_BIN", "\n", "if", "not", "cfg", ".", "EVAL", ".", "RY_WITH_BIN", ":", "\n", "        ", "ry_bin", "=", "torch", ".", "argmax", "(", "pred_reg", "[", ":", ",", "ry_bin_l", ":", "ry_bin_r", "]", ",", "dim", "=", "1", ")", "\n", "ry_res_norm", "=", "torch", ".", "gather", "(", "pred_reg", "[", ":", ",", "ry_res_l", ":", "ry_res_r", "]", ",", "dim", "=", "1", ",", "index", "=", "ry_bin", ".", "unsqueeze", "(", "dim", "=", "1", ")", ")", ".", "squeeze", "(", "dim", "=", "1", ")", "\n", "if", "get_ry_fine", ":", "\n", "# divide pi/2 into several bins", "\n", "            ", "angle_per_class", "=", "(", "np", ".", "pi", "/", "2", ")", "/", "num_head_bin", "\n", "ry_res", "=", "ry_res_norm", "*", "(", "angle_per_class", "/", "2", ")", "\n", "ry", "=", "(", "ry_bin", ".", "float", "(", ")", "*", "angle_per_class", "+", "angle_per_class", "/", "2", ")", "+", "ry_res", "-", "np", ".", "pi", "/", "4", "\n", "", "else", ":", "\n", "            ", "angle_per_class", "=", "(", "2", "*", "np", ".", "pi", ")", "/", "num_head_bin", "\n", "ry_res", "=", "ry_res_norm", "*", "(", "angle_per_class", "/", "2", ")", "\n", "\n", "# bin_center is (0, 30, 60, 90, 120, ..., 270, 300, 330)", "\n", "ry", "=", "(", "ry_bin", ".", "float", "(", ")", "*", "angle_per_class", "+", "ry_res", ")", "%", "(", "2", "*", "np", ".", "pi", ")", "\n", "ry", "[", "ry", ">", "np", ".", "pi", "]", "-=", "2", "*", "np", ".", "pi", "\n", "", "", "else", ":", "\n", "# print(\"RY with BIN\")", "\n", "        ", "ry_bin", "=", "F", ".", "softmax", "(", "pred_reg", "[", ":", ",", "ry_bin_l", ":", "ry_bin_r", "]", ",", "1", ")", "\n", "# print(ry_bin[:10, :])", "\n", "# input()", "\n", "ry_res_norm", "=", "pred_reg", "[", ":", ",", "ry_res_l", ":", "ry_res_r", "]", "\n", "if", "get_ry_fine", ":", "\n", "# divide pi/2 into several bins", "\n", "            ", "angle_per_class", "=", "(", "np", ".", "pi", "/", "2", ")", "/", "num_head_bin", "\n", "ry_res", "=", "ry_res_norm", "*", "(", "angle_per_class", "/", "2", ")", "\n", "# ry = (ry_bin.float() * angle_per_class + angle_per_class / 2) + ry_res - np.pi / 4", "\n", "ry_bin_ind", "=", "torch", ".", "arange", "(", "num_head_bin", ")", ".", "float", "(", ")", ".", "to", "(", "ry_res_norm", ".", "device", ")", "\n", "ry", "=", "(", "ry_bin_ind", "*", "angle_per_class", "+", "angle_per_class", "/", "2", ")", "+", "ry_res", "-", "np", ".", "pi", "/", "4", "\n", "# [way1]", "\n", "# ry = (ry * ry_bin).sum(dim=1)", "\n", "\n", "# [way2]", "\n", "ry_bin_r", "=", "ry_bin", ".", "clone", "(", ")", "\n", "ry_bin_r", "[", "ry", "<", "0", "]", "=", "0", "# [0, pi/4]", "\n", "p_rside", "=", "ry_bin_r", ".", "sum", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "+", "1e-7", "# B", "\n", "ry_bin_r", "=", "ry_bin_r", "/", "p_rside", "\n", "\n", "ry_bin_l", "=", "ry_bin", ".", "clone", "(", ")", "\n", "ry_bin_l", "[", "ry", ">=", "0", "]", "=", "0", "# [-pi/4, 0]", "\n", "p_lside", "=", "ry_bin_l", ".", "sum", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "+", "1e-7", "\n", "ry_bin_l", "=", "ry_bin_l", "/", "p_lside", "\n", "\n", "# assert 1 - (p_rside + p_lside) < p_lside.new().resize_(p_lside.size()).fill_(1e-4)", "\n", "ry_r", "=", "ry", ".", "clone", "(", ")", "\n", "ry_r", "[", "ry_r", "<", "0", "]", "=", "0", "\n", "ry_r", "=", "(", "ry_r", "*", "ry_bin_r", ")", ".", "sum", "(", "dim", "=", "1", ")", "\n", "\n", "ry_l", "=", "ry", ".", "clone", "(", ")", "\n", "ry_l", "[", "ry_l", ">=", "0", "]", "=", "0", "\n", "ry_l", "=", "(", "ry_l", "*", "ry_bin_l", ")", ".", "sum", "(", "dim", "=", "1", ")", "\n", "\n", "# flags", "\n", "use_r", "=", "p_rside", ".", "squeeze", "(", ")", ">=", "p_lside", ".", "squeeze", "(", ")", "\n", "use_l", "=", "p_rside", ".", "squeeze", "(", ")", "<", "p_lside", ".", "squeeze", "(", ")", "\n", "ry", "=", "ry_r", "*", "use_r", ".", "float", "(", ")", "+", "ry_l", "*", "use_l", ".", "float", "(", ")", "\n", "\n", "", "else", ":", "\n", "            ", "angle_per_class", "=", "(", "2", "*", "np", ".", "pi", ")", "/", "num_head_bin", "\n", "ry_res", "=", "ry_res_norm", "*", "(", "angle_per_class", "/", "2", ")", "\n", "\n", "# bin_center is (0, 30, 60, 90, 120, ..., 270, 300, 330)", "\n", "# ry = (ry_bin.float() * angle_per_class + ry_res) % (2 * np.pi)", "\n", "ry_bin_ind", "=", "torch", ".", "arange", "(", "num_head_bin", ")", ".", "float", "(", ")", ".", "to", "(", "ry_res_norm", ".", "device", ")", "\n", "ry", "=", "(", "ry_bin_ind", "*", "angle_per_class", "+", "ry_res", ")", "%", "(", "2", "*", "np", ".", "pi", ")", "\n", "\n", "# [way1] to [0, pi]", "\n", "# ry[ry > np.pi] -= np.pi", "\n", "# ry = (ry * ry_bin).sum(dim=1)", "\n", "# ry[ry > np.pi] -= 2 * np.pi", "\n", "\n", "# [way2] ry [0, 2pi]", "\n", "ry_bin_r", "=", "ry_bin", ".", "clone", "(", ")", "\n", "ry_bin_r", "[", "ry", ">", "np", ".", "pi", "]", "=", "0", "# [0, pi]", "\n", "p_rside", "=", "ry_bin_r", ".", "sum", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "+", "1e-7", "# B", "\n", "ry_bin_r", "=", "ry_bin_r", "/", "p_rside", "\n", "\n", "ry_bin_l", "=", "ry_bin", ".", "clone", "(", ")", "\n", "ry_bin_l", "[", "ry", "<=", "np", ".", "pi", "]", "=", "0", "# (pi, 2*pi]", "\n", "p_lside", "=", "ry_bin_l", ".", "sum", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "+", "1e-7", "\n", "ry_bin_l", "=", "ry_bin_l", "/", "p_lside", "\n", "\n", "ry_r", "=", "ry", ".", "clone", "(", ")", "\n", "ry_r", "[", "ry_r", ">", "np", ".", "pi", "]", "=", "0", "\n", "ry_r", "=", "(", "ry_r", "*", "ry_bin_r", ")", ".", "sum", "(", "dim", "=", "1", ")", "# [0, pi]", "\n", "# print('ry_r', ry_r.size())", "\n", "\n", "ry_l", "=", "ry", ".", "clone", "(", ")", "\n", "ry_l", "[", "ry_l", "<=", "np", ".", "pi", "]", "=", "0", "\n", "ry_l", "=", "(", "ry_l", "*", "ry_bin_l", ")", ".", "sum", "(", "dim", "=", "1", ")", "# (pi, 2*pi]", "\n", "# print('ry_l', ry_l.size())", "\n", "\n", "# flags", "\n", "use_r", "=", "p_rside", ".", "squeeze", "(", ")", ">=", "p_lside", ".", "squeeze", "(", ")", "\n", "use_l", "=", "p_rside", ".", "squeeze", "(", ")", "<", "p_lside", ".", "squeeze", "(", ")", "\n", "# print('use_r', use_r.size())", "\n", "ry", "=", "ry_r", "*", "use_r", ".", "float", "(", ")", "+", "ry_l", "*", "use_l", ".", "float", "(", ")", "\n", "\n", "# p_rside = ry_bin[ry <= np.pi].sum()", "\n", "# p_lside = ry_bin[ry > np.pi].sum()", "\n", "# assert 1 - (p_rside + p_lside).sum().data < 1e-4", "\n", "# if p_rside > p_lside:", "\n", "#     ws_r = ry_bin[ry <= np.pi]/ry_bin[ry <= np.pi].sum(dim=1, keepdim=True)", "\n", "#     ry_r = ry[ry<=np.pi]", "\n", "#     ry = (ry_r * ws_r).sum(dim=1) # [0, np.pi]", "\n", "# else:", "\n", "#     ws_l = ry_bin[ry>np.pi]/ry_bin[ry>np.pi].sum(dim=1, keepdim=True)", "\n", "#     ry_l = ry[ry>np.pi]", "\n", "#     ry = (ry_l * ws_l).sum(dim=1) # [np.pi, 2*np.pi]", "\n", "ry", "[", "ry", ">", "np", ".", "pi", "]", "-=", "2", "*", "np", ".", "pi", "\n", "\n", "# print(ry.size())", "\n", "\n", "# recover size", "\n", "", "", "size_res_l", ",", "size_res_r", "=", "ry_res_r", ",", "ry_res_r", "+", "3", "\n", "assert", "size_res_r", "==", "pred_reg", ".", "shape", "[", "1", "]", "\n", "\n", "size_res_norm", "=", "pred_reg", "[", ":", ",", "size_res_l", ":", "size_res_r", "]", "\n", "hwl", "=", "size_res_norm", "*", "anchor_size", "+", "anchor_size", "\n", "\n", "# shift to original coords", "\n", "roi_center", "=", "roi_box3d", "[", ":", ",", "0", ":", "3", "]", "\n", "shift_ret_box3d", "=", "torch", ".", "cat", "(", "(", "pos_x", ".", "view", "(", "-", "1", ",", "1", ")", ",", "pos_y", ".", "view", "(", "-", "1", ",", "1", ")", ",", "pos_z", ".", "view", "(", "-", "1", ",", "1", ")", ",", "hwl", ",", "ry", ".", "view", "(", "-", "1", ",", "1", ")", ")", ",", "dim", "=", "1", ")", "\n", "ret_box3d", "=", "shift_ret_box3d", "\n", "if", "roi_box3d", ".", "shape", "[", "1", "]", "==", "7", ":", "\n", "        ", "roi_ry", "=", "roi_box3d", "[", ":", ",", "6", "]", "\n", "ret_box3d", "=", "rotate_pc_along_y_torch", "(", "shift_ret_box3d", ",", "-", "roi_ry", ")", "\n", "ret_box3d", "[", ":", ",", "6", "]", "+=", "roi_ry", "\n", "", "ret_box3d", "[", ":", ",", "[", "0", ",", "2", "]", "]", "+=", "roi_center", "[", ":", ",", "[", "0", ",", "2", "]", "]", "\n", "\n", "return", "ret_box3d", "\n", "", ""]], "home.repos.pwc.inspect_result.kemo-huang_jmodt.utils.train_utils.Trainer.__init__": [[70, 82], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "model", ",", "params_to_update", ",", "model_fn_train", ",", "optimizer", ",", "ckpt_dir", ",", "lr_scheduler", ",", "\n", "model_fn_val", ",", "tb_log", ",", "eval_frequency", "=", "1", ",", "grad_norm_clip", "=", "1.0", ")", ":", "\n", "        ", "self", ".", "model", "=", "model", "\n", "self", ".", "params_to_update", "=", "params_to_update", "\n", "self", ".", "model_fn", "=", "model_fn_train", "\n", "self", ".", "optimizer", "=", "optimizer", "\n", "self", ".", "lr_scheduler", "=", "lr_scheduler", "\n", "self", ".", "model_fn_eval", "=", "model_fn_val", "\n", "self", ".", "ckpt_dir", "=", "ckpt_dir", "\n", "self", ".", "eval_frequency", "=", "eval_frequency", "\n", "self", ".", "tb_log", "=", "tb_log", "\n", "self", ".", "grad_norm_clip", "=", "grad_norm_clip", "\n", "\n"]], "home.repos.pwc.inspect_result.kemo-huang_jmodt.utils.train_utils.Trainer.eval_epoch": [[83, 115], ["train_utils.Trainer.model.eval", "eval_dict.items", "tqdm.tqdm", "train_utils.Trainer.model_fn_eval", "tbar.set_postfix", "tb_dict.items", "max", "total_loss.append", "len", "nan_dict.get", "len", "sum", "len", "loss.item", "math.isnan", "eval_dict.get", "nan_dict.get"], "methods", ["None"], ["", "def", "eval_epoch", "(", "self", ",", "val_loader", ")", ":", "\n", "        ", "self", ".", "model", ".", "eval", "(", ")", "\n", "\n", "eval_dict", "=", "{", "}", "\n", "total_loss", "=", "[", "]", "\n", "nan_dict", "=", "{", "}", "\n", "\n", "# eval one epoch", "\n", "with", "tqdm", ".", "tqdm", "(", "val_loader", ",", "leave", "=", "False", ",", "desc", "=", "'val'", ")", "as", "tbar", ":", "\n", "            ", "for", "data", "in", "tbar", ":", "\n", "                ", "loss", ",", "tb_dict", ",", "disp_dict", "=", "self", ".", "model_fn_eval", "(", "self", ".", "model", ",", "data", ")", "\n", "if", "loss", ">", "0", ":", "\n", "                    ", "total_loss", ".", "append", "(", "loss", ".", "item", "(", ")", ")", "\n", "", "tbar", ".", "set_postfix", "(", "disp_dict", ")", "\n", "for", "k", ",", "v", "in", "tb_dict", ".", "items", "(", ")", ":", "\n", "                    ", "if", "not", "math", ".", "isnan", "(", "v", ")", ":", "\n", "                        ", "eval_dict", "[", "k", "]", "=", "eval_dict", ".", "get", "(", "k", ",", "0", ")", "+", "v", "\n", "", "else", ":", "\n", "                        ", "nan_dict", "[", "k", "]", "=", "nan_dict", ".", "get", "(", "k", ",", "0", ")", "+", "1", "\n", "\n", "# statistics this epoch", "\n", "", "", "", "", "for", "k", ",", "v", "in", "eval_dict", ".", "items", "(", ")", ":", "\n", "            ", "eval_dict", "[", "k", "]", "=", "eval_dict", "[", "k", "]", "/", "(", "len", "(", "val_loader", ")", "-", "nan_dict", ".", "get", "(", "k", ",", "0", ")", ")", "\n", "\n", "", "cur_performance", "=", "0", "\n", "if", "'recalled_cnt'", "in", "eval_dict", ":", "\n", "            ", "eval_dict", "[", "'recall'", "]", "=", "eval_dict", "[", "'recalled_cnt'", "]", "/", "max", "(", "eval_dict", "[", "'gt_cnt'", "]", ",", "1", ")", "\n", "cur_performance", "=", "eval_dict", "[", "'recall'", "]", "\n", "", "elif", "'iou'", "in", "eval_dict", ":", "\n", "            ", "cur_performance", "=", "eval_dict", "[", "'iou'", "]", "\n", "\n", "", "return", "sum", "(", "total_loss", ")", "/", "len", "(", "total_loss", ")", "if", "len", "(", "total_loss", ")", ">", "0", "else", "0", ",", "eval_dict", ",", "cur_performance", "\n", "\n"]], "home.repos.pwc.inspect_result.kemo-huang_jmodt.utils.train_utils.Trainer.train": [[116, 211], ["float", "torch.cuda.amp.GradScaler", "tqdm.trange", "tqdm.tqdm", "train_utils.Trainer.model.train", "tqdm.tqdm.close", "os.path.join", "train_utils.save_checkpoint", "tqdm.tqdm", "tqdm.tqdm.set_postfix", "len", "train_utils.Trainer.optimizer.zero_grad", "tqdm.tqdm.update", "tqdm.tqdm.set_postfix", "tbar.set_postfix", "tbar.refresh", "train_utils.Trainer.lr_scheduler.step", "train_utils.Trainer.tb_log.add_scalar", "train_utils.checkpoint_state", "os.path.join", "isinstance", "train_utils.save_checkpoint", "dict", "torch.cuda.amp.autocast", "train_utils.Trainer.model_fn", "torch.cuda.amp.GradScaler.scale().backward", "torch.nn.utils.clip_grad_norm_", "train_loss_epoch.append", "torch.cuda.amp.GradScaler.step", "torch.cuda.amp.GradScaler.update", "dict", "len", "sum", "len", "train_utils.Trainer.lr_scheduler.get_last_lr", "cur_logger.info", "train_utils.Trainer.model.module.state_dict", "train_utils.Trainer.model.state_dict", "len", "train_loss.item", "train_utils.Trainer.tb_log.add_scalar", "tb_dict.items", "type", "train_utils.Trainer.tb_log.add_scalar", "train_utils.Trainer.tb_log.add_scalar", "train_utils.Trainer.tb_log.add_scalar", "torch.set_grad_enabled", "train_utils.Trainer.eval_epoch", "train_utils.Trainer.tb_log.add_scalar", "eval_dict.items", "cur_logger.info", "torch.cuda.amp.GradScaler.scale", "train_loss.item", "train_utils.Trainer.tb_log.add_scalar", "train_utils.Trainer.tb_log.add_scalar"], "methods", ["home.repos.pwc.inspect_result.kemo-huang_jmodt.utils.train_utils.Trainer.train", "home.repos.pwc.inspect_result.kemo-huang_jmodt.utils.train_utils.save_checkpoint", "home.repos.pwc.inspect_result.kemo-huang_jmodt.tracking.kalman.KalmanPSR.update", "home.repos.pwc.inspect_result.kemo-huang_jmodt.utils.train_utils.checkpoint_state", "home.repos.pwc.inspect_result.kemo-huang_jmodt.utils.train_utils.save_checkpoint", "home.repos.pwc.inspect_result.kemo-huang_jmodt.pointnet2.pointnet2_utils.BallQuery.backward", "home.repos.pwc.inspect_result.kemo-huang_jmodt.tracking.kalman.KalmanPSR.update", "home.repos.pwc.inspect_result.kemo-huang_jmodt.utils.train_utils.Trainer.eval_epoch"], ["", "def", "train", "(", "self", ",", "start_it", ",", "start_epoch", ",", "n_epochs", ",", "train_loader", ",", "val_loader", "=", "None", ",", "stop_thres", "=", "5", ")", ":", "\n", "        ", "eval_frequency", "=", "self", ".", "eval_frequency", "if", "self", ".", "eval_frequency", ">", "0", "else", "1", "\n", "\n", "it", "=", "start_it", "\n", "min_val_loss", "=", "float", "(", "'inf'", ")", "\n", "prev_train_loss", "=", "-", "1", "\n", "prev_val_loss", "=", "-", "1", "\n", "counter", "=", "0", "\n", "scaler", "=", "torch", ".", "cuda", ".", "amp", ".", "GradScaler", "(", ")", "\n", "\n", "with", "tqdm", ".", "trange", "(", "start_epoch", ",", "n_epochs", ",", "desc", "=", "'epochs'", ")", "as", "tbar", ",", "tqdm", ".", "tqdm", "(", "total", "=", "len", "(", "train_loader", ")", ",", "leave", "=", "False", ",", "desc", "=", "'train'", ")", "as", "pbar", ":", "\n", "\n", "            ", "for", "epoch", "in", "tbar", ":", "\n", "# train one epoch", "\n", "                ", "self", ".", "model", ".", "train", "(", ")", "\n", "train_loss_epoch", "=", "[", "]", "\n", "for", "batch", "in", "train_loader", ":", "\n", "                    ", "it", "+=", "1", "\n", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "with", "torch", ".", "cuda", ".", "amp", ".", "autocast", "(", ")", ":", "\n", "                        ", "train_loss", ",", "tb_dict", ",", "disp_dict", "=", "self", ".", "model_fn", "(", "self", ".", "model", ",", "batch", ")", "\n", "", "if", "train_loss", ">", "0", ":", "\n", "                        ", "scaler", ".", "scale", "(", "train_loss", ")", ".", "backward", "(", ")", "\n", "clip_grad_norm_", "(", "self", ".", "params_to_update", ",", "self", ".", "grad_norm_clip", ")", "\n", "train_loss_epoch", ".", "append", "(", "train_loss", ".", "item", "(", ")", ")", "\n", "scaler", ".", "step", "(", "self", ".", "optimizer", ")", "\n", "scaler", ".", "update", "(", ")", "\n", "if", "self", ".", "tb_log", "is", "not", "None", ":", "\n", "                            ", "self", ".", "tb_log", ".", "add_scalar", "(", "'train_loss'", ",", "train_loss", ".", "item", "(", ")", ",", "it", ")", "\n", "for", "key", ",", "val", "in", "tb_dict", ".", "items", "(", ")", ":", "\n", "                                ", "self", ".", "tb_log", ".", "add_scalar", "(", "'train_'", "+", "key", ",", "val", ",", "it", ")", "\n", "", "", "", "pbar", ".", "update", "(", ")", "\n", "pbar", ".", "set_postfix", "(", "dict", "(", "total_it", "=", "it", ")", ")", "\n", "tbar", ".", "set_postfix", "(", "disp_dict", ")", "\n", "tbar", ".", "refresh", "(", ")", "\n", "\n", "", "trained_epoch", "=", "epoch", "+", "1", "\n", "train_loss_epoch", "=", "sum", "(", "train_loss_epoch", ")", "/", "len", "(", "train_loss_epoch", ")", "if", "len", "(", "train_loss_epoch", ")", ">", "0", "else", "0", "\n", "\n", "if", "self", ".", "lr_scheduler", "is", "not", "None", ":", "\n", "                    ", "self", ".", "lr_scheduler", ".", "step", "(", ")", "\n", "if", "self", ".", "tb_log", "is", "not", "None", ":", "\n", "                        ", "cur_lr", "=", "self", ".", "lr_scheduler", ".", "get_last_lr", "(", ")", "\n", "if", "type", "(", "cur_lr", ")", "==", "list", ":", "\n", "                            ", "self", ".", "tb_log", ".", "add_scalar", "(", "'learning_rate_1'", ",", "cur_lr", "[", "0", "]", ",", "trained_epoch", ")", "\n", "self", ".", "tb_log", ".", "add_scalar", "(", "'learning_rate_2'", ",", "cur_lr", "[", "-", "1", "]", ",", "trained_epoch", ")", "\n", "", "else", ":", "\n", "                            ", "self", ".", "tb_log", ".", "add_scalar", "(", "'learning_rate'", ",", "cur_lr", ",", "trained_epoch", ")", "\n", "\n", "", "", "", "if", "self", ".", "tb_log", "is", "not", "None", ":", "\n", "                    ", "self", ".", "tb_log", ".", "add_scalar", "(", "'train_loss_epoch'", ",", "train_loss_epoch", ",", "trained_epoch", ")", "\n", "\n", "", "pbar", ".", "close", "(", ")", "\n", "# save trained model", "\n", "ckpt_name", "=", "os", ".", "path", ".", "join", "(", "self", ".", "ckpt_dir", ",", "'checkpoint_epoch_%d'", "%", "trained_epoch", ")", "\n", "save_checkpoint", "(", "\n", "checkpoint_state", "(", "self", ".", "model", ",", "self", ".", "optimizer", ",", "trained_epoch", ",", "it", ")", ",", "filename", "=", "ckpt_name", ",", "\n", ")", "\n", "\n", "# eval one epoch", "\n", "if", "(", "epoch", "%", "eval_frequency", ")", "==", "0", ":", "\n", "                    ", "if", "val_loader", "is", "not", "None", ":", "\n", "                        ", "with", "torch", ".", "set_grad_enabled", "(", "False", ")", ":", "\n", "                            ", "val_loss_epoch", ",", "eval_dict", ",", "cur_performance", "=", "self", ".", "eval_epoch", "(", "val_loader", ")", "\n", "\n", "", "if", "self", ".", "tb_log", "is", "not", "None", ":", "\n", "                            ", "self", ".", "tb_log", ".", "add_scalar", "(", "'val_loss_epoch'", ",", "val_loss_epoch", ",", "trained_epoch", ")", "\n", "for", "key", ",", "val", "in", "eval_dict", ".", "items", "(", ")", ":", "\n", "                                ", "self", ".", "tb_log", ".", "add_scalar", "(", "'val_'", "+", "key", ",", "val", ",", "trained_epoch", ")", "\n", "\n", "", "", "", "", "if", "prev_train_loss", "!=", "-", "1", "and", "prev_val_loss", "!=", "-", "1", ":", "\n", "                    ", "if", "train_loss_epoch", "<", "prev_train_loss", "and", "val_loss_epoch", ">", "prev_val_loss", ":", "\n", "                        ", "counter", "+=", "1", "\n", "cur_logger", ".", "info", "(", "\"Bad train\"", ")", "\n", "if", "counter", ">", "stop_thres", ":", "\n", "                            ", "cur_logger", ".", "info", "(", "\"Early stopping\"", ")", "\n", "break", "\n", "", "", "else", ":", "\n", "                        ", "counter", "=", "0", "\n", "", "", "else", ":", "\n", "                    ", "prev_train_loss", "=", "train_loss_epoch", "\n", "prev_val_loss", "=", "val_loss_epoch", "\n", "\n", "", "if", "val_loss_epoch", "<", "min_val_loss", ":", "\n", "                    ", "min_val_loss", "=", "val_loss_epoch", "\n", "ckpt_name", "=", "os", ".", "path", ".", "join", "(", "self", ".", "ckpt_dir", ",", "'best_model'", ")", "\n", "if", "isinstance", "(", "self", ".", "model", ",", "torch", ".", "nn", ".", "DataParallel", ")", ":", "\n", "                        ", "model_state", "=", "self", ".", "model", ".", "module", ".", "state_dict", "(", ")", "\n", "", "else", ":", "\n", "                        ", "model_state", "=", "self", ".", "model", ".", "state_dict", "(", ")", "\n", "", "save_checkpoint", "(", "{", "'model_state'", ":", "model_state", "}", ",", "filename", "=", "ckpt_name", ")", "\n", "\n", "", "pbar", "=", "tqdm", ".", "tqdm", "(", "total", "=", "len", "(", "train_loader", ")", ",", "leave", "=", "False", ",", "desc", "=", "'train'", ")", "\n", "pbar", ".", "set_postfix", "(", "dict", "(", "total_it", "=", "it", ")", ")", "\n", "", "", "", "", ""]], "home.repos.pwc.inspect_result.kemo-huang_jmodt.utils.train_utils.checkpoint_state": [[13, 24], ["optimizer.state_dict", "isinstance", "model.module.state_dict", "model.state_dict"], "function", ["None"], ["def", "checkpoint_state", "(", "model", "=", "None", ",", "optimizer", "=", "None", ",", "epoch", "=", "None", ",", "it", "=", "None", ")", ":", "\n", "    ", "optim_state", "=", "optimizer", ".", "state_dict", "(", ")", "if", "optimizer", "is", "not", "None", "else", "None", "\n", "if", "model", "is", "not", "None", ":", "\n", "        ", "if", "isinstance", "(", "model", ",", "torch", ".", "nn", ".", "DataParallel", ")", ":", "\n", "            ", "model_state", "=", "model", ".", "module", ".", "state_dict", "(", ")", "\n", "", "else", ":", "\n", "            ", "model_state", "=", "model", ".", "state_dict", "(", ")", "\n", "", "", "else", ":", "\n", "        ", "model_state", "=", "None", "\n", "\n", "", "return", "{", "'epoch'", ":", "epoch", ",", "'it'", ":", "it", ",", "'model_state'", ":", "model_state", ",", "'optimizer_state'", ":", "optim_state", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.kemo-huang_jmodt.utils.train_utils.save_checkpoint": [[26, 29], ["torch.save"], "function", ["None"], ["", "def", "save_checkpoint", "(", "state", ",", "filename", "=", "'checkpoint'", ")", ":", "\n", "    ", "filename", "=", "'{}.pth'", ".", "format", "(", "filename", ")", "\n", "torch", ".", "save", "(", "state", ",", "filename", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kemo-huang_jmodt.utils.train_utils.load_checkpoint": [[31, 48], ["os.path.isfile", "logger.info", "torch.load", "torch.load.get", "logger.info", "model.load_state_dict", "logger.info", "logger.info", "optimizer.load_state_dict", "torch.load.keys"], "function", ["None"], ["", "def", "load_checkpoint", "(", "model", "=", "None", ",", "optimizer", "=", "None", ",", "filename", "=", "'checkpoint'", ",", "logger", "=", "cur_logger", ")", ":", "\n", "    ", "if", "os", ".", "path", ".", "isfile", "(", "filename", ")", ":", "\n", "        ", "logger", ".", "info", "(", "\"==> Loading from checkpoint '{}'\"", ".", "format", "(", "filename", ")", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "filename", ")", "\n", "epoch", "=", "checkpoint", "[", "'epoch'", "]", "if", "'epoch'", "in", "checkpoint", ".", "keys", "(", ")", "else", "-", "1", "\n", "it", "=", "checkpoint", ".", "get", "(", "'it'", ",", "0.0", ")", "\n", "if", "model", "is", "not", "None", "and", "checkpoint", "[", "'model_state'", "]", "is", "not", "None", ":", "\n", "            ", "keys", "=", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'model_state'", "]", ",", "strict", "=", "False", ")", "\n", "logger", ".", "info", "(", "f\"missing keys: {keys.missing_keys}\\n\"", ")", "\n", "logger", ".", "info", "(", "f\"unexpected keys: {keys.unexpected_keys}\\n\"", ")", "\n", "", "if", "optimizer", "is", "not", "None", "and", "checkpoint", "[", "'optimizer_state'", "]", "is", "not", "None", ":", "\n", "            ", "optimizer", ".", "load_state_dict", "(", "checkpoint", "[", "'optimizer_state'", "]", ")", "\n", "", "logger", ".", "info", "(", "\"==> Done\"", ")", "\n", "", "else", ":", "\n", "        ", "raise", "FileNotFoundError", "\n", "\n", "", "return", "it", ",", "epoch", "\n", "\n"]], "home.repos.pwc.inspect_result.kemo-huang_jmodt.utils.train_utils.load_part_ckpt": [[50, 67], ["os.path.isfile", "logger.info", "torch.load", "model.state_dict", "model.state_dict.update", "model.load_state_dict", "update_model_state.keys().__len__", "logger.info", "model_state.items", "update_model_state.keys", "model.state_dict"], "function", ["home.repos.pwc.inspect_result.kemo-huang_jmodt.tracking.kalman.KalmanPSR.update", "home.repos.pwc.inspect_result.kemo-huang_jmodt.datasets.kitti_dataset.KittiDataset.__len__"], ["", "def", "load_part_ckpt", "(", "model", ",", "filename", ",", "logger", "=", "cur_logger", ",", "total_keys", "=", "-", "1", ")", ":", "\n", "    ", "if", "os", ".", "path", ".", "isfile", "(", "filename", ")", ":", "\n", "        ", "logger", ".", "info", "(", "\"==> Loading part model from checkpoint '{}'\"", ".", "format", "(", "filename", ")", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "filename", ")", "\n", "model_state", "=", "checkpoint", "[", "'model_state'", "]", "\n", "\n", "update_model_state", "=", "{", "key", ":", "val", "for", "key", ",", "val", "in", "model_state", ".", "items", "(", ")", "if", "key", "in", "model", ".", "state_dict", "(", ")", "}", "\n", "state_dict", "=", "model", ".", "state_dict", "(", ")", "\n", "state_dict", ".", "update", "(", "update_model_state", ")", "\n", "model", ".", "load_state_dict", "(", "state_dict", ")", "\n", "\n", "update_keys", "=", "update_model_state", ".", "keys", "(", ")", ".", "__len__", "(", ")", "\n", "if", "update_keys", "==", "0", ":", "\n", "            ", "raise", "RuntimeError", "\n", "", "logger", ".", "info", "(", "\"==> Done (loaded %d/%d)\"", "%", "(", "update_keys", ",", "total_keys", ")", ")", "\n", "", "else", ":", "\n", "        ", "raise", "FileNotFoundError", "\n", "\n"]], "home.repos.pwc.inspect_result.kemo-huang_jmodt.utils.loss_utils.DiceLoss.__init__": [[10, 13], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.kemo-huang_jmodt.pointnet2.pytorch_utils.FC.__init__"], ["    ", "def", "__init__", "(", "self", ",", "ignore_target", "=", "-", "1", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "ignore_target", "=", "ignore_target", "\n", "\n"]], "home.repos.pwc.inspect_result.kemo-huang_jmodt.utils.loss_utils.DiceLoss.forward": [[14, 25], ["torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "target.float().view.float().view.float().view", "torch.sigmoid.view", "torch.sigmoid.view", "torch.sigmoid.view", "target.float().view.float().view.float", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ",", "target", ")", ":", "\n", "        ", "\"\"\"\n        :param input: (N), logit\n        :param target: (N), {0, 1}\n        :return:\n        \"\"\"", "\n", "input", "=", "torch", ".", "sigmoid", "(", "input", ".", "view", "(", "-", "1", ")", ")", "\n", "target", "=", "target", ".", "float", "(", ")", ".", "view", "(", "-", "1", ")", "\n", "mask", "=", "(", "target", "!=", "self", ".", "ignore_target", ")", ".", "float", "(", ")", "\n", "return", "1.0", "-", "(", "torch", ".", "min", "(", "input", ",", "target", ")", "*", "mask", ")", ".", "sum", "(", ")", "/", "torch", ".", "clamp", "(", "(", "torch", ".", "max", "(", "input", ",", "target", ")", "*", "mask", ")", ".", "sum", "(", ")", ",", "\n", "min", "=", "1.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kemo-huang_jmodt.utils.loss_utils.SigmoidFocalClassificationLoss.__init__": [[33, 44], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.kemo-huang_jmodt.pointnet2.pytorch_utils.FC.__init__"], ["def", "__init__", "(", "self", ",", "gamma", "=", "2.0", ",", "alpha", "=", "0.25", ")", ":", "\n", "        ", "\"\"\"Constructor.\n        Args:\n            gamma: exponent of the modulating factor (1 - p_t) ^ gamma.\n            alpha: optional alpha weighting factor to balance positives vs negatives.\n            all_zero_negative: bool. if True, will treat all zero as background.\n            else, will treat first label as background. only affect alpha.\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_alpha", "=", "alpha", "\n", "self", ".", "_gamma", "=", "gamma", "\n", "\n"]], "home.repos.pwc.inspect_result.kemo-huang_jmodt.utils.loss_utils.SigmoidFocalClassificationLoss.forward": [[45, 78], ["loss_utils._sigmoid_cross_entropy_with_logits", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow"], "methods", ["home.repos.pwc.inspect_result.kemo-huang_jmodt.utils.loss_utils._sigmoid_cross_entropy_with_logits"], ["", "def", "forward", "(", "self", ",", "\n", "prediction_tensor", ",", "\n", "target_tensor", ",", "\n", "weights", ")", ":", "\n", "        ", "\"\"\"Compute loss function.\n\n        Args:\n            prediction_tensor: A float tensor of shape [batch_size, num_anchors,\n              num_classes] representing the predicted logits for each class\n            target_tensor: A float tensor of shape [batch_size, num_anchors,\n              num_classes] representing one-hot encoded classification targets\n            weights: a float tensor of shape [batch_size, num_anchors]\n            class_indices: (Optional) A 1-D integer tensor of class indices.\n              If provided, computes loss only for the specified class indices.\n\n        Returns:\n          loss: a float tensor of shape [batch_size, num_anchors, num_classes]\n            representing the value of the loss function.\n        \"\"\"", "\n", "per_entry_cross_ent", "=", "(", "_sigmoid_cross_entropy_with_logits", "(", "\n", "labels", "=", "target_tensor", ",", "logits", "=", "prediction_tensor", ")", ")", "\n", "prediction_probabilities", "=", "torch", ".", "sigmoid", "(", "prediction_tensor", ")", "\n", "p_t", "=", "(", "(", "target_tensor", "*", "prediction_probabilities", ")", "+", "\n", "(", "(", "1", "-", "target_tensor", ")", "*", "(", "1", "-", "prediction_probabilities", ")", ")", ")", "\n", "modulating_factor", "=", "1.0", "\n", "if", "self", ".", "_gamma", ":", "\n", "            ", "modulating_factor", "=", "torch", ".", "pow", "(", "1.0", "-", "p_t", ",", "self", ".", "_gamma", ")", "\n", "", "alpha_weight_factor", "=", "1.0", "\n", "if", "self", ".", "_alpha", "is", "not", "None", ":", "\n", "            ", "alpha_weight_factor", "=", "(", "target_tensor", "*", "self", ".", "_alpha", "+", "(", "1", "-", "target_tensor", ")", "*", "(", "1", "-", "self", ".", "_alpha", ")", ")", "\n", "\n", "", "focal_cross_entropy_loss", "=", "(", "modulating_factor", "*", "alpha_weight_factor", "*", "per_entry_cross_ent", ")", "\n", "return", "focal_cross_entropy_loss", "*", "weights", "\n", "\n"]], "home.repos.pwc.inspect_result.kemo-huang_jmodt.utils.loss_utils._sigmoid_cross_entropy_with_logits": [[80, 89], ["torch.log1p", "torch.log1p", "torch.log1p", "torch.clamp", "torch.clamp", "torch.clamp", "torch.exp", "torch.exp", "torch.exp", "labels.type_as", "torch.abs", "torch.abs", "torch.abs"], "function", ["None"], ["", "", "def", "_sigmoid_cross_entropy_with_logits", "(", "logits", ",", "labels", ")", ":", "\n", "# to be compatible with tensorflow, we don't use ignore_idx", "\n", "    ", "loss", "=", "torch", ".", "clamp", "(", "logits", ",", "min", "=", "0", ")", "-", "logits", "*", "labels", ".", "type_as", "(", "logits", ")", "\n", "loss", "+=", "torch", ".", "log1p", "(", "torch", ".", "exp", "(", "-", "torch", ".", "abs", "(", "logits", ")", ")", ")", "\n", "# transpose_param = [0] + [param[-1]] + param[1:-1]", "\n", "# logits = logits.permute(*transpose_param)", "\n", "# loss_ftor = nn.NLLLoss(reduce=False)", "\n", "# loss = loss_ftor(F.logsigmoid(logits), labels)", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.kemo-huang_jmodt.utils.loss_utils.get_reg_loss": [[91, 356], ["torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.cross_entropy", "torch.cross_entropy", "F.cross_entropy.item", "F.cross_entropy.item", "torch.cuda.FloatTensor().zero_", "torch.cuda.FloatTensor().zero_", "torch.cuda.FloatTensor().zero_", "torch.cuda.FloatTensor().zero_.scatter_", "torch.cross_entropy", "torch.smooth_l1_loss", "F.cross_entropy.item", "F.smooth_l1_loss.item", "torch.smooth_l1_loss", "pred_reg[].sum", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "int", "int", "torch.cuda.FloatTensor().zero_", "torch.cuda.FloatTensor().zero_", "torch.cuda.FloatTensor().zero_", "torch.cuda.FloatTensor().zero_.scatter_", "torch.cuda.FloatTensor().zero_", "torch.cuda.FloatTensor().zero_", "torch.cuda.FloatTensor().zero_", "torch.cuda.FloatTensor().zero_.scatter_", "torch.smooth_l1_loss", "torch.smooth_l1_loss", "F.smooth_l1_loss.item", "F.smooth_l1_loss.item", "torch.clamp", "torch.clamp", "torch.clamp", "torch.cuda.FloatTensor().zero_", "torch.cuda.FloatTensor().zero_", "torch.cuda.FloatTensor().zero_", "torch.cuda.FloatTensor().zero_.scatter_", "torch.cross_entropy", "torch.smooth_l1_loss", "F.cross_entropy.item", "F.smooth_l1_loss.item", "torch.smooth_l1_loss", "F.smooth_l1_loss.item", "torch.clamp", "torch.clamp", "torch.clamp", "ry_bin_label.view().long", "pred_x.new().resize_().fill_", "pred_x.new().resize_().fill_", "pred_x.new().resize_().fill_", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "iou_loss.mean.mean", "x_bin_label.view().long", "z_bin_label.view().long", "y_bin_label.view().long", "pred_reg[].sum", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.min", "torch.min", "torch.min", "torch.max", "torch.max", "torch.max", "torch.min", "torch.min", "torch.min", "torch.max", "torch.max", "torch.max", "torch.min", "torch.min", "torch.min", "torch.max", "torch.max", "torch.max", "pred_size.new().resize_().fill_", "iou_branch_pred.view", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "iou_branch_loss.mean", "torch.max.new().resize_().fill_", "torch.log", "torch.log", "torch.log", "torch.softmax", "torch.softmax", "torch.arange().float", "torch.arange().float", "torch.arange().float", "xz_bin_center.to.to", "pred_reg[].sum", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "iou_loss.mean.mean", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "ry_bin_label.size", "ry_bin_label.view", "pred_x.new().resize_", "pred_x.new().resize_", "pred_x.new().resize_", "pred_x.new().resize_().fill_", "pred_x.new().resize_().fill_", "pred_x.new().resize_().fill_", "pred_size.new().resize_().fill_", "iou_branch_pred.view", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "iou_branch_loss.mean", "torch.max.new().resize_().fill_", "torch.log", "torch.log", "torch.log", "x_bin_label.float", "z_bin_label.float", "x_bin_label.size", "x_bin_label.view", "z_bin_label.size", "z_bin_label.view", "y_bin_label.float", "y_bin_label.size", "y_bin_label.view", "ry_bin_label.float", "ry_bin_label.float", "pred_size.new().resize_", "torch.max.new().resize_", "torch.arange", "torch.arange", "torch.arange", "torch.min", "torch.min", "torch.min", "torch.max", "torch.max", "torch.max", "torch.min", "torch.min", "torch.min", "torch.max", "torch.max", "torch.max", "torch.min", "torch.min", "torch.min", "torch.max", "torch.max", "torch.max", "pred_x.new", "pred_x.new", "pred_x.new", "torch.clamp.detach", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "pred_x.new().resize_", "pred_x.new().resize_", "pred_x.new().resize_", "pred_size.new().resize_", "torch.max.new().resize_", "pred_size.new", "torch.clamp.detach", "torch.max.new", "torch.clamp.detach", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "pred_x.new", "pred_x.new", "pred_x.new", "pred_size.new", "torch.clamp.detach", "torch.max.new"], "function", ["None"], ["", "def", "get_reg_loss", "(", "cls_score", ",", "pred_reg", ",", "reg_label", ",", "loc_scope", ",", "loc_bin_size", ",", "num_head_bin", ",", "anchor_size", ",", "\n", "get_xz_fine", "=", "True", ",", "get_y_by_bin", "=", "False", ",", "loc_y_scope", "=", "0.5", ",", "loc_y_bin_size", "=", "0.25", ",", "\n", "get_ry_fine", "=", "False", ",", "\n", "use_cls_score", "=", "False", ",", "use_mask_score", "=", "False", ",", "\n", "use_iou_branch", "=", "False", ",", "\n", "iou_branch_pred", "=", "None", "\n", ")", ":", "\n", "    ", "\"\"\"\n    Bin-based 3D bounding boxes regression loss. See https://arxiv.org/abs/1812.04244 for more details.\n    :param pred_reg: (N, C)\n    :param reg_label: (N, 7) [dx, dy, dz, h, w, l, ry]\n    :param loc_scope: constant\n    :param loc_bin_size: constant\n    :param num_head_bin: constant\n    :param anchor_size: (N, 3) or (3)\n    :param get_xz_fine:\n    :param get_y_by_bin:\n    :param loc_y_scope:\n    :param loc_y_bin_size:\n    :param get_ry_fine:\n    :return:\n    \"\"\"", "\n", "per_loc_bin_num", "=", "int", "(", "loc_scope", "/", "loc_bin_size", ")", "*", "2", "\n", "loc_y_bin_num", "=", "int", "(", "loc_y_scope", "/", "loc_y_bin_size", ")", "*", "2", "\n", "\n", "reg_loss_dict", "=", "{", "}", "\n", "loc_loss", "=", "0", "\n", "\n", "# xz localization loss", "\n", "x_offset_label", ",", "y_offset_label", ",", "z_offset_label", "=", "reg_label", "[", ":", ",", "0", "]", ",", "reg_label", "[", ":", ",", "1", "]", ",", "reg_label", "[", ":", ",", "2", "]", "\n", "x_shift", "=", "torch", ".", "clamp", "(", "x_offset_label", "+", "loc_scope", ",", "0", ",", "loc_scope", "*", "2", "-", "1e-3", ")", "\n", "z_shift", "=", "torch", ".", "clamp", "(", "z_offset_label", "+", "loc_scope", ",", "0", ",", "loc_scope", "*", "2", "-", "1e-3", ")", "\n", "x_bin_label", "=", "(", "x_shift", "/", "loc_bin_size", ")", ".", "floor", "(", ")", ".", "long", "(", ")", "\n", "z_bin_label", "=", "(", "z_shift", "/", "loc_bin_size", ")", ".", "floor", "(", ")", ".", "long", "(", ")", "\n", "\n", "x_bin_l", ",", "x_bin_r", "=", "0", ",", "per_loc_bin_num", "\n", "z_bin_l", ",", "z_bin_r", "=", "per_loc_bin_num", ",", "per_loc_bin_num", "*", "2", "\n", "start_offset", "=", "z_bin_r", "\n", "\n", "loss_x_bin", "=", "F", ".", "cross_entropy", "(", "pred_reg", "[", ":", ",", "x_bin_l", ":", "x_bin_r", "]", ",", "x_bin_label", ")", "\n", "loss_z_bin", "=", "F", ".", "cross_entropy", "(", "pred_reg", "[", ":", ",", "z_bin_l", ":", "z_bin_r", "]", ",", "z_bin_label", ")", "\n", "reg_loss_dict", "[", "'loss_x_bin'", "]", "=", "loss_x_bin", ".", "item", "(", ")", "\n", "reg_loss_dict", "[", "'loss_z_bin'", "]", "=", "loss_z_bin", ".", "item", "(", ")", "\n", "loc_loss", "+=", "loss_x_bin", "+", "loss_z_bin", "\n", "\n", "if", "get_xz_fine", ":", "\n", "        ", "x_res_l", ",", "x_res_r", "=", "per_loc_bin_num", "*", "2", ",", "per_loc_bin_num", "*", "3", "\n", "z_res_l", ",", "z_res_r", "=", "per_loc_bin_num", "*", "3", ",", "per_loc_bin_num", "*", "4", "\n", "start_offset", "=", "z_res_r", "\n", "\n", "x_res_label", "=", "x_shift", "-", "(", "x_bin_label", ".", "float", "(", ")", "*", "loc_bin_size", "+", "loc_bin_size", "/", "2", ")", "\n", "z_res_label", "=", "z_shift", "-", "(", "z_bin_label", ".", "float", "(", ")", "*", "loc_bin_size", "+", "loc_bin_size", "/", "2", ")", "\n", "x_res_norm_label", "=", "x_res_label", "/", "loc_bin_size", "\n", "z_res_norm_label", "=", "z_res_label", "/", "loc_bin_size", "\n", "\n", "x_bin_onehot", "=", "torch", ".", "cuda", ".", "FloatTensor", "(", "x_bin_label", ".", "size", "(", "0", ")", ",", "per_loc_bin_num", ")", ".", "zero_", "(", ")", "\n", "x_bin_onehot", ".", "scatter_", "(", "1", ",", "x_bin_label", ".", "view", "(", "-", "1", ",", "1", ")", ".", "long", "(", ")", ",", "1", ")", "\n", "z_bin_onehot", "=", "torch", ".", "cuda", ".", "FloatTensor", "(", "z_bin_label", ".", "size", "(", "0", ")", ",", "per_loc_bin_num", ")", ".", "zero_", "(", ")", "\n", "z_bin_onehot", ".", "scatter_", "(", "1", ",", "z_bin_label", ".", "view", "(", "-", "1", ",", "1", ")", ".", "long", "(", ")", ",", "1", ")", "\n", "\n", "loss_x_res", "=", "F", ".", "smooth_l1_loss", "(", "(", "pred_reg", "[", ":", ",", "x_res_l", ":", "x_res_r", "]", "*", "x_bin_onehot", ")", ".", "sum", "(", "dim", "=", "1", ")", ",", "x_res_norm_label", ")", "\n", "loss_z_res", "=", "F", ".", "smooth_l1_loss", "(", "(", "pred_reg", "[", ":", ",", "z_res_l", ":", "z_res_r", "]", "*", "z_bin_onehot", ")", ".", "sum", "(", "dim", "=", "1", ")", ",", "z_res_norm_label", ")", "\n", "reg_loss_dict", "[", "'loss_x_res'", "]", "=", "loss_x_res", ".", "item", "(", ")", "\n", "reg_loss_dict", "[", "'loss_z_res'", "]", "=", "loss_z_res", ".", "item", "(", ")", "\n", "loc_loss", "+=", "loss_x_res", "+", "loss_z_res", "\n", "\n", "# y localization loss", "\n", "", "if", "get_y_by_bin", ":", "\n", "        ", "y_bin_l", ",", "y_bin_r", "=", "start_offset", ",", "start_offset", "+", "loc_y_bin_num", "\n", "y_res_l", ",", "y_res_r", "=", "y_bin_r", ",", "y_bin_r", "+", "loc_y_bin_num", "\n", "start_offset", "=", "y_res_r", "\n", "\n", "y_shift", "=", "torch", ".", "clamp", "(", "y_offset_label", "+", "loc_y_scope", ",", "0", ",", "loc_y_scope", "*", "2", "-", "1e-3", ")", "\n", "y_bin_label", "=", "(", "y_shift", "/", "loc_y_bin_size", ")", ".", "floor", "(", ")", ".", "long", "(", ")", "\n", "y_res_label", "=", "y_shift", "-", "(", "y_bin_label", ".", "float", "(", ")", "*", "loc_y_bin_size", "+", "loc_y_bin_size", "/", "2", ")", "\n", "y_res_norm_label", "=", "y_res_label", "/", "loc_y_bin_size", "\n", "\n", "y_bin_onehot", "=", "torch", ".", "cuda", ".", "FloatTensor", "(", "y_bin_label", ".", "size", "(", "0", ")", ",", "loc_y_bin_num", ")", ".", "zero_", "(", ")", "\n", "y_bin_onehot", ".", "scatter_", "(", "1", ",", "y_bin_label", ".", "view", "(", "-", "1", ",", "1", ")", ".", "long", "(", ")", ",", "1", ")", "\n", "\n", "loss_y_bin", "=", "F", ".", "cross_entropy", "(", "pred_reg", "[", ":", ",", "y_bin_l", ":", "y_bin_r", "]", ",", "y_bin_label", ")", "\n", "loss_y_res", "=", "F", ".", "smooth_l1_loss", "(", "(", "pred_reg", "[", ":", ",", "y_res_l", ":", "y_res_r", "]", "*", "y_bin_onehot", ")", ".", "sum", "(", "dim", "=", "1", ")", ",", "y_res_norm_label", ")", "\n", "\n", "reg_loss_dict", "[", "'loss_y_bin'", "]", "=", "loss_y_bin", ".", "item", "(", ")", "\n", "reg_loss_dict", "[", "'loss_y_res'", "]", "=", "loss_y_res", ".", "item", "(", ")", "\n", "\n", "loc_loss", "+=", "loss_y_bin", "+", "loss_y_res", "\n", "", "else", ":", "\n", "        ", "y_offset_l", ",", "y_offset_r", "=", "start_offset", ",", "start_offset", "+", "1", "\n", "start_offset", "=", "y_offset_r", "\n", "\n", "loss_y_offset", "=", "F", ".", "smooth_l1_loss", "(", "pred_reg", "[", ":", ",", "y_offset_l", ":", "y_offset_r", "]", ".", "sum", "(", "dim", "=", "1", ")", ",", "y_offset_label", ")", "\n", "reg_loss_dict", "[", "'loss_y_offset'", "]", "=", "loss_y_offset", ".", "item", "(", ")", "\n", "loc_loss", "+=", "loss_y_offset", "\n", "\n", "# angle loss", "\n", "", "ry_bin_l", ",", "ry_bin_r", "=", "start_offset", ",", "start_offset", "+", "num_head_bin", "\n", "ry_res_l", ",", "ry_res_r", "=", "ry_bin_r", ",", "ry_bin_r", "+", "num_head_bin", "\n", "\n", "ry_label", "=", "reg_label", "[", ":", ",", "6", "]", "\n", "\n", "if", "get_ry_fine", ":", "\n", "# divide pi/2 into several bins (For RCNN, num_head_bin = 9)", "\n", "        ", "angle_per_class", "=", "(", "np", ".", "pi", "/", "2", ")", "/", "num_head_bin", "\n", "\n", "ry_label", "=", "ry_label", "%", "(", "2", "*", "np", ".", "pi", ")", "# 0 ~ 2pi", "\n", "opposite_flag", "=", "(", "ry_label", ">", "np", ".", "pi", "*", "0.5", ")", "&", "(", "ry_label", "<", "np", ".", "pi", "*", "1.5", ")", "\n", "ry_label", "[", "opposite_flag", "]", "=", "(", "ry_label", "[", "opposite_flag", "]", "+", "np", ".", "pi", ")", "%", "(", "2", "*", "np", ".", "pi", ")", "# (0 ~ pi/2, 3pi/2 ~ 2pi)", "\n", "shift_angle", "=", "(", "ry_label", "+", "np", ".", "pi", "*", "0.5", ")", "%", "(", "2", "*", "np", ".", "pi", ")", "# (0 ~ pi)", "\n", "\n", "shift_angle", "=", "torch", ".", "clamp", "(", "shift_angle", "-", "np", ".", "pi", "*", "0.25", ",", "min", "=", "1e-3", ",", "max", "=", "np", ".", "pi", "*", "0.5", "-", "1e-3", ")", "# (0, pi/2)", "\n", "\n", "# bin center is (5, 10, 15, ..., 85)", "\n", "ry_bin_label", "=", "(", "shift_angle", "/", "angle_per_class", ")", ".", "floor", "(", ")", ".", "long", "(", ")", "\n", "ry_res_label", "=", "shift_angle", "-", "(", "ry_bin_label", ".", "float", "(", ")", "*", "angle_per_class", "+", "angle_per_class", "/", "2", ")", "\n", "ry_res_norm_label", "=", "ry_res_label", "/", "(", "angle_per_class", "/", "2", ")", "\n", "\n", "", "else", ":", "\n", "# divide 2pi into several bins (For RPN, num_head_bin = 12)", "\n", "        ", "angle_per_class", "=", "(", "2", "*", "np", ".", "pi", ")", "/", "num_head_bin", "\n", "heading_angle", "=", "ry_label", "%", "(", "2", "*", "np", ".", "pi", ")", "# 0 ~ 2pi", "\n", "\n", "shift_angle", "=", "(", "heading_angle", "+", "angle_per_class", "/", "2", ")", "%", "(", "2", "*", "np", ".", "pi", ")", "\n", "ry_bin_label", "=", "(", "shift_angle", "/", "angle_per_class", ")", ".", "floor", "(", ")", ".", "long", "(", ")", "\n", "ry_res_label", "=", "shift_angle", "-", "(", "ry_bin_label", ".", "float", "(", ")", "*", "angle_per_class", "+", "angle_per_class", "/", "2", ")", "\n", "ry_res_norm_label", "=", "ry_res_label", "/", "(", "angle_per_class", "/", "2", ")", "\n", "\n", "", "ry_bin_onehot", "=", "torch", ".", "cuda", ".", "FloatTensor", "(", "ry_bin_label", ".", "size", "(", "0", ")", ",", "num_head_bin", ")", ".", "zero_", "(", ")", "\n", "ry_bin_onehot", ".", "scatter_", "(", "1", ",", "ry_bin_label", ".", "view", "(", "-", "1", ",", "1", ")", ".", "long", "(", ")", ",", "1", ")", "\n", "loss_ry_bin", "=", "F", ".", "cross_entropy", "(", "pred_reg", "[", ":", ",", "ry_bin_l", ":", "ry_bin_r", "]", ",", "ry_bin_label", ")", "\n", "loss_ry_res", "=", "F", ".", "smooth_l1_loss", "(", "(", "pred_reg", "[", ":", ",", "ry_res_l", ":", "ry_res_r", "]", "*", "ry_bin_onehot", ")", ".", "sum", "(", "dim", "=", "1", ")", ",", "ry_res_norm_label", ")", "\n", "\n", "reg_loss_dict", "[", "'loss_ry_bin'", "]", "=", "loss_ry_bin", ".", "item", "(", ")", "\n", "reg_loss_dict", "[", "'loss_ry_res'", "]", "=", "loss_ry_res", ".", "item", "(", ")", "\n", "angle_loss", "=", "loss_ry_bin", "+", "loss_ry_res", "\n", "\n", "# size loss", "\n", "size_res_l", ",", "size_res_r", "=", "ry_res_r", ",", "ry_res_r", "+", "3", "\n", "assert", "pred_reg", ".", "shape", "[", "1", "]", "==", "size_res_r", ",", "'%d vs %d'", "%", "(", "pred_reg", ".", "shape", "[", "1", "]", ",", "size_res_r", ")", "\n", "\n", "size_res_norm_label", "=", "(", "reg_label", "[", ":", ",", "3", ":", "6", "]", "-", "anchor_size", ")", "/", "anchor_size", "\n", "size_res_norm", "=", "pred_reg", "[", ":", ",", "size_res_l", ":", "size_res_r", "]", "\n", "size_loss", "=", "F", ".", "smooth_l1_loss", "(", "size_res_norm", ",", "size_res_norm_label", ")", "\n", "\n", "pred_x", "=", "(", "pred_reg", "[", ":", ",", "x_res_l", ":", "x_res_r", "]", "*", "x_bin_onehot", ")", ".", "sum", "(", "dim", "=", "1", ")", "*", "loc_bin_size", "\n", "pred_y", "=", "pred_reg", "[", ":", ",", "y_offset_l", ":", "y_offset_r", "]", ".", "sum", "(", "dim", "=", "1", ")", "\n", "pred_z", "=", "(", "pred_reg", "[", ":", ",", "z_res_l", ":", "z_res_r", "]", "*", "z_bin_onehot", ")", ".", "sum", "(", "dim", "=", "1", ")", "*", "loc_bin_size", "\n", "pred_size", "=", "size_res_norm", "*", "anchor_size", "+", "anchor_size", "# hwl(yzx)", "\n", "\n", "tar_x", ",", "tar_y", ",", "tar_z", "=", "x_res_label", ",", "y_offset_label", ",", "z_res_label", "\n", "tar_size", "=", "reg_label", "[", ":", ",", "3", ":", "6", "]", "\n", "\n", "insect_x", "=", "torch", ".", "max", "(", "torch", ".", "min", "(", "(", "pred_x", "+", "pred_size", "[", ":", ",", "2", "]", "/", "2", ")", ",", "(", "tar_x", "+", "tar_size", "[", ":", ",", "2", "]", "/", "2", ")", ")", "-", "torch", ".", "max", "(", "\n", "(", "pred_x", "-", "pred_size", "[", ":", ",", "2", "]", "/", "2", ")", ",", "(", "tar_x", "-", "tar_size", "[", ":", ",", "2", "]", "/", "2", ")", ")", ",", "\n", "pred_x", ".", "new", "(", ")", ".", "resize_", "(", "pred_x", ".", "shape", ")", ".", "fill_", "(", "1e-3", ")", ")", "\n", "insect_y", "=", "torch", ".", "max", "(", "torch", ".", "min", "(", "(", "pred_y", "+", "pred_size", "[", ":", ",", "0", "]", "/", "2", ")", ",", "(", "tar_y", "+", "tar_size", "[", ":", ",", "0", "]", "/", "2", ")", ")", "-", "torch", ".", "max", "(", "\n", "(", "pred_y", "-", "pred_size", "[", ":", ",", "0", "]", "/", "2", ")", ",", "(", "tar_y", "-", "tar_size", "[", ":", ",", "0", "]", "/", "2", ")", ")", ",", "\n", "pred_x", ".", "new", "(", ")", ".", "resize_", "(", "pred_x", ".", "shape", ")", ".", "fill_", "(", "1e-3", ")", ")", "\n", "insect_z", "=", "torch", ".", "max", "(", "torch", ".", "min", "(", "(", "pred_z", "+", "pred_size", "[", ":", ",", "1", "]", "/", "2", ")", ",", "(", "tar_z", "+", "tar_size", "[", ":", ",", "1", "]", "/", "2", ")", ")", "-", "torch", ".", "max", "(", "\n", "(", "pred_z", "-", "pred_size", "[", ":", ",", "1", "]", "/", "2", ")", ",", "(", "tar_z", "-", "tar_size", "[", ":", ",", "1", "]", "/", "2", ")", ")", ",", "\n", "pred_x", ".", "new", "(", ")", ".", "resize_", "(", "pred_x", ".", "shape", ")", ".", "fill_", "(", "1e-3", ")", ")", "\n", "\n", "if", "cfg", ".", "TRAIN", ".", "IOU_LOSS_TYPE", "==", "'raw'", ":", "\n", "# print('USE RAW LOSS')", "\n", "#", "\n", "        ", "insect_area", "=", "insect_x", "*", "insect_y", "*", "insect_z", "\n", "pred_area", "=", "torch", ".", "max", "(", "pred_size", "[", ":", ",", "0", "]", "*", "pred_size", "[", ":", ",", "1", "]", "*", "pred_size", "[", ":", ",", "2", "]", ",", "\n", "pred_size", ".", "new", "(", ")", ".", "resize_", "(", "pred_size", "[", ":", ",", "2", "]", ".", "shape", ")", ".", "fill_", "(", "1e-3", ")", ")", "\n", "tar_area", "=", "tar_size", "[", ":", ",", "0", "]", "*", "tar_size", "[", ":", ",", "1", "]", "*", "tar_size", "[", ":", ",", "2", "]", "\n", "iou_tmp", "=", "insect_area", "/", "(", "pred_area", "+", "tar_area", "-", "insect_area", ")", "\n", "\n", "if", "use_iou_branch", ":", "\n", "            ", "iou_branch_pred_flat", "=", "iou_branch_pred", ".", "view", "(", "-", "1", ")", "\n", "iou_branch_pred_flat", "=", "torch", ".", "clamp", "(", "iou_branch_pred_flat", ",", "0.0001", ",", "0.9999", ")", "\n", "iou_tmp_taget", "=", "torch", ".", "clamp", "(", "iou_tmp", ",", "0.0001", ",", "0.9999", ")", "\n", "iou_branch_loss", "=", "-", "(", "iou_tmp_taget", ".", "detach", "(", ")", "*", "torch", ".", "log", "(", "iou_branch_pred_flat", ")", "+", "(", "\n", "1", "-", "iou_tmp_taget", ".", "detach", "(", ")", ")", "*", "torch", ".", "log", "(", "1", "-", "iou_branch_pred_flat", ")", ")", "\n", "reg_loss_dict", "[", "'iou_branch_loss'", "]", "=", "iou_branch_loss", ".", "mean", "(", ")", "\n", "\n", "", "if", "use_cls_score", ":", "\n", "            ", "iou_tmp", "=", "cls_score", "*", "iou_tmp", "\n", "\n", "", "if", "use_mask_score", ":", "\n", "# print('mask_score:', mask_score)", "\n", "# iou_tmp = mask_score * iou_tmp", "\n", "            ", "iou_tmp", "=", "iou_tmp", "\n", "", "iou_tmp", "=", "torch", ".", "max", "(", "iou_tmp", ",", "iou_tmp", ".", "new", "(", ")", ".", "resize_", "(", "iou_tmp", ".", "shape", ")", ".", "fill_", "(", "1e-4", ")", ")", "\n", "iou_loss", "=", "-", "torch", ".", "log", "(", "iou_tmp", ")", "\n", "iou_loss", "=", "iou_loss", ".", "mean", "(", ")", "\n", "\n", "", "elif", "cfg", ".", "TRAIN", ".", "IOU_LOSS_TYPE", "==", "'cls_mask_with_bin'", ":", "\n", "# print('cfg.TRAIN.IOU_LOSS_TYPE')", "\n", "        ", "pred_x_bin", "=", "F", ".", "softmax", "(", "pred_reg", "[", ":", ",", "x_bin_l", ":", "x_bin_r", "]", ",", "1", ")", "# N x num_bin", "\n", "pred_z_bin", "=", "F", ".", "softmax", "(", "pred_reg", "[", ":", ",", "z_bin_l", ":", "z_bin_r", "]", ",", "1", ")", "\n", "\n", "#", "\n", "xz_bin_ind", "=", "torch", ".", "arange", "(", "per_loc_bin_num", ")", ".", "float", "(", ")", "\n", "xz_bin_center", "=", "xz_bin_ind", "*", "loc_bin_size", "+", "loc_bin_size", "/", "2", "-", "loc_scope", "# num_bin", "\n", "xz_bin_center", "=", "xz_bin_center", ".", "to", "(", "pred_x_bin", ".", "device", ")", "\n", "\n", "#", "\n", "pred_x_reg", "=", "pred_reg", "[", ":", ",", "x_res_l", ":", "x_res_r", "]", "*", "loc_bin_size", "# N x num_bin", "\n", "pred_z_reg", "=", "pred_reg", "[", ":", ",", "z_res_l", ":", "z_res_r", "]", "*", "loc_bin_size", "\n", "\n", "#", "\n", "pred_x_abs", "=", "xz_bin_center", "+", "pred_x_reg", "\n", "pred_z_abs", "=", "xz_bin_center", "+", "pred_z_reg", "\n", "\n", "pred_x", "=", "(", "pred_x_abs", "*", "pred_x_bin", ")", ".", "sum", "(", "dim", "=", "1", ")", "\n", "pred_z", "=", "(", "pred_z_abs", "*", "pred_z_bin", ")", ".", "sum", "(", "dim", "=", "1", ")", "\n", "pred_y", "=", "pred_reg", "[", ":", ",", "y_offset_l", ":", "y_offset_r", "]", ".", "sum", "(", "dim", "=", "1", ")", "# N", "\n", "\n", "pred_size", "=", "size_res_norm", "*", "anchor_size", "+", "anchor_size", "# hwl(yzx)", "\n", "\n", "#", "\n", "tar_x", ",", "tar_y", ",", "tar_z", "=", "x_res_label", ",", "y_offset_label", ",", "z_res_label", "\n", "#", "\n", "tar_x", "=", "xz_bin_center", "[", "x_bin_label", "]", "+", "tar_x", "\n", "tar_z", "=", "xz_bin_center", "[", "z_bin_label", "]", "+", "tar_z", "\n", "\n", "tar_size", "=", "reg_label", "[", ":", ",", "3", ":", "6", "]", "\n", "\n", "insect_x", "=", "torch", ".", "max", "(", "torch", ".", "min", "(", "(", "pred_x", "+", "pred_size", "[", ":", ",", "2", "]", "/", "2", ")", ",", "(", "tar_x", "+", "tar_size", "[", ":", ",", "2", "]", "/", "2", ")", ")", "-", "torch", ".", "max", "(", "\n", "(", "pred_x", "-", "pred_size", "[", ":", ",", "2", "]", "/", "2", ")", ",", "(", "tar_x", "-", "tar_size", "[", ":", ",", "2", "]", "/", "2", ")", ")", ",", "\n", "pred_x", ".", "new", "(", ")", ".", "resize_", "(", "pred_x", ".", "shape", ")", ".", "fill_", "(", "1e-3", ")", ")", "\n", "insect_y", "=", "torch", ".", "max", "(", "torch", ".", "min", "(", "(", "pred_y", "+", "pred_size", "[", ":", ",", "0", "]", "/", "2", ")", ",", "(", "tar_y", "+", "tar_size", "[", ":", ",", "0", "]", "/", "2", ")", ")", "-", "torch", ".", "max", "(", "\n", "(", "pred_y", "-", "pred_size", "[", ":", ",", "0", "]", "/", "2", ")", ",", "(", "tar_y", "-", "tar_size", "[", ":", ",", "0", "]", "/", "2", ")", ")", ",", "\n", "pred_x", ".", "new", "(", ")", ".", "resize_", "(", "pred_x", ".", "shape", ")", ".", "fill_", "(", "1e-3", ")", ")", "\n", "insect_z", "=", "torch", ".", "max", "(", "torch", ".", "min", "(", "(", "pred_z", "+", "pred_size", "[", ":", ",", "1", "]", "/", "2", ")", ",", "(", "tar_z", "+", "tar_size", "[", ":", ",", "1", "]", "/", "2", ")", ")", "-", "torch", ".", "max", "(", "\n", "(", "pred_z", "-", "pred_size", "[", ":", ",", "1", "]", "/", "2", ")", ",", "(", "tar_z", "-", "tar_size", "[", ":", ",", "1", "]", "/", "2", ")", ")", ",", "\n", "pred_x", ".", "new", "(", ")", ".", "resize_", "(", "pred_x", ".", "shape", ")", ".", "fill_", "(", "1e-3", ")", ")", "\n", "\n", "insect_area", "=", "insect_x", "*", "insect_y", "*", "insect_z", "\n", "pred_area", "=", "torch", ".", "max", "(", "pred_size", "[", ":", ",", "0", "]", "*", "pred_size", "[", ":", ",", "1", "]", "*", "pred_size", "[", ":", ",", "2", "]", ",", "\n", "pred_size", ".", "new", "(", ")", ".", "resize_", "(", "pred_size", "[", ":", ",", "2", "]", ".", "shape", ")", ".", "fill_", "(", "1e-3", ")", ")", "\n", "tar_area", "=", "tar_size", "[", ":", ",", "0", "]", "*", "tar_size", "[", ":", ",", "1", "]", "*", "tar_size", "[", ":", ",", "2", "]", "\n", "iou_tmp", "=", "insect_area", "/", "(", "pred_area", "+", "tar_area", "-", "insect_area", ")", "\n", "\n", "if", "use_iou_branch", ":", "\n", "            ", "iou_branch_pred_flat", "=", "iou_branch_pred", ".", "view", "(", "-", "1", ")", "\n", "iou_branch_pred_flat", "=", "torch", ".", "clamp", "(", "iou_branch_pred_flat", ",", "0.0001", ",", "0.9999", ")", "\n", "iou_tmp_taget", "=", "torch", ".", "clamp", "(", "iou_tmp", ",", "0.0001", ",", "0.9999", ")", "\n", "iou_branch_loss", "=", "-", "(", "iou_tmp_taget", ".", "detach", "(", ")", "*", "torch", ".", "log", "(", "iou_branch_pred_flat", ")", "+", "(", "\n", "1", "-", "iou_tmp_taget", ".", "detach", "(", ")", ")", "*", "torch", ".", "log", "(", "1", "-", "iou_branch_pred_flat", ")", ")", "\n", "reg_loss_dict", "[", "'iou_branch_loss'", "]", "=", "iou_branch_loss", ".", "mean", "(", ")", "\n", "\n", "", "if", "use_cls_score", ":", "\n", "            ", "iou_tmp", "=", "cls_score", "*", "iou_tmp", "\n", "\n", "", "if", "use_mask_score", ":", "\n", "# print('mask_score:', mask_score)", "\n", "# iou_tmp = mask_score * iou_tmp", "\n", "            ", "iou_tmp", "=", "iou_tmp", "\n", "", "iou_tmp", "=", "torch", ".", "max", "(", "iou_tmp", ",", "iou_tmp", ".", "new", "(", ")", ".", "resize_", "(", "iou_tmp", ".", "shape", ")", ".", "fill_", "(", "1e-4", ")", ")", "\n", "iou_loss", "=", "-", "torch", ".", "log", "(", "iou_tmp", ")", "\n", "\n", "iou_loss", "=", "iou_loss", ".", "mean", "(", ")", "\n", "\n", "# Total regression loss", "\n", "", "reg_loss_dict", "[", "'loss_loc'", "]", "=", "loc_loss", "\n", "reg_loss_dict", "[", "'loss_angle'", "]", "=", "angle_loss", "\n", "reg_loss_dict", "[", "'loss_size'", "]", "=", "size_loss", "\n", "reg_loss_dict", "[", "'loss_iou'", "]", "=", "iou_loss", "\n", "\n", "return", "loc_loss", ",", "angle_loss", ",", "size_loss", ",", "iou_loss", ",", "reg_loss_dict", "\n", "", ""]], "home.repos.pwc.inspect_result.kemo-huang_jmodt.utils.calibration.Calibration.__init__": [[24, 41], ["isinstance", "calibration.get_calib_from_file"], "methods", ["home.repos.pwc.inspect_result.kemo-huang_jmodt.utils.calibration.get_calib_from_file"], ["    ", "def", "__init__", "(", "self", ",", "calib_file", ")", ":", "\n", "        ", "if", "isinstance", "(", "calib_file", ",", "str", ")", ":", "\n", "            ", "calib", "=", "get_calib_from_file", "(", "calib_file", ")", "\n", "", "else", ":", "\n", "            ", "calib", "=", "calib_file", "\n", "\n", "", "self", ".", "P2", "=", "calib", "[", "'P2'", "]", "# 3 x 4", "\n", "self", ".", "R0", "=", "calib", "[", "'R0'", "]", "# 3 x 3", "\n", "self", ".", "V2C", "=", "calib", "[", "'Tr_velo2cam'", "]", "# 3 x 4", "\n", "\n", "# Camera intrinsics and extrinsics", "\n", "self", ".", "cu", "=", "self", ".", "P2", "[", "0", ",", "2", "]", "\n", "self", ".", "cv", "=", "self", ".", "P2", "[", "1", ",", "2", "]", "\n", "self", ".", "fu", "=", "self", ".", "P2", "[", "0", ",", "0", "]", "\n", "self", ".", "fv", "=", "self", ".", "P2", "[", "1", ",", "1", "]", "\n", "self", ".", "tx", "=", "self", ".", "P2", "[", "0", ",", "3", "]", "/", "(", "-", "self", ".", "fu", ")", "\n", "self", ".", "ty", "=", "self", ".", "P2", "[", "1", ",", "3", "]", "/", "(", "-", "self", ".", "fv", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kemo-huang_jmodt.utils.calibration.Calibration.cart_to_hom": [[42, 49], ["numpy.hstack", "numpy.ones"], "methods", ["None"], ["", "def", "cart_to_hom", "(", "self", ",", "pts", ")", ":", "\n", "        ", "\"\"\"\n        :param pts: (N, 3 or 2)\n        :return pts_hom: (N, 4 or 3)\n        \"\"\"", "\n", "pts_hom", "=", "np", ".", "hstack", "(", "(", "pts", ",", "np", ".", "ones", "(", "(", "pts", ".", "shape", "[", "0", "]", ",", "1", ")", ",", "dtype", "=", "np", ".", "float32", ")", ")", ")", "\n", "return", "pts_hom", "\n", "\n"]], "home.repos.pwc.inspect_result.kemo-huang_jmodt.utils.calibration.Calibration.lidar_to_rect": [[50, 59], ["calibration.Calibration.cart_to_hom", "numpy.dot", "numpy.dot"], "methods", ["home.repos.pwc.inspect_result.kemo-huang_jmodt.utils.calibration.Calibration.cart_to_hom"], ["", "def", "lidar_to_rect", "(", "self", ",", "pts_lidar", ")", ":", "\n", "        ", "\"\"\"\n        :param pts_lidar: (N, 3)\n        :return pts_rect: (N, 3)\n        \"\"\"", "\n", "pts_lidar_hom", "=", "self", ".", "cart_to_hom", "(", "pts_lidar", ")", "\n", "pts_rect", "=", "np", ".", "dot", "(", "pts_lidar_hom", ",", "np", ".", "dot", "(", "self", ".", "V2C", ".", "T", ",", "self", ".", "R0", ".", "T", ")", ")", "\n", "# pts_rect = reduce(np.dot, (pts_lidar_hom, self.V2C.T, self.R0.T))", "\n", "return", "pts_rect", "\n", "\n"]], "home.repos.pwc.inspect_result.kemo-huang_jmodt.utils.calibration.Calibration.rect_to_img": [[60, 70], ["calibration.Calibration.cart_to_hom", "numpy.dot"], "methods", ["home.repos.pwc.inspect_result.kemo-huang_jmodt.utils.calibration.Calibration.cart_to_hom"], ["", "def", "rect_to_img", "(", "self", ",", "pts_rect", ")", ":", "\n", "        ", "\"\"\"\n        :param pts_rect: (N, 3)\n        :return pts_img: (N, 2)\n        \"\"\"", "\n", "pts_rect_hom", "=", "self", ".", "cart_to_hom", "(", "pts_rect", ")", "\n", "pts_2d_hom", "=", "np", ".", "dot", "(", "pts_rect_hom", ",", "self", ".", "P2", ".", "T", ")", "\n", "pts_img", "=", "(", "pts_2d_hom", "[", ":", ",", "0", ":", "2", "]", ".", "T", "/", "pts_rect_hom", "[", ":", ",", "2", "]", ")", ".", "T", "# (N, 2)", "\n", "pts_rect_depth", "=", "pts_2d_hom", "[", ":", ",", "2", "]", "-", "self", ".", "P2", ".", "T", "[", "3", ",", "2", "]", "# depth in rect camera coord", "\n", "return", "pts_img", ",", "pts_rect_depth", "\n", "\n"]], "home.repos.pwc.inspect_result.kemo-huang_jmodt.utils.calibration.Calibration.lidar_to_img": [[71, 79], ["calibration.Calibration.lidar_to_rect", "calibration.Calibration.rect_to_img"], "methods", ["home.repos.pwc.inspect_result.kemo-huang_jmodt.utils.calibration.Calibration.lidar_to_rect", "home.repos.pwc.inspect_result.kemo-huang_jmodt.utils.calibration.Calibration.rect_to_img"], ["", "def", "lidar_to_img", "(", "self", ",", "pts_lidar", ")", ":", "\n", "        ", "\"\"\"\n        :param pts_lidar: (N, 3)\n        :return pts_img: (N, 2)\n        \"\"\"", "\n", "pts_rect", "=", "self", ".", "lidar_to_rect", "(", "pts_lidar", ")", "\n", "pts_img", ",", "pts_depth", "=", "self", ".", "rect_to_img", "(", "pts_rect", ")", "\n", "return", "pts_img", ",", "pts_depth", "\n", "\n"]], "home.repos.pwc.inspect_result.kemo-huang_jmodt.utils.calibration.Calibration.img_to_rect": [[80, 91], ["numpy.concatenate", "x.reshape", "y.reshape", "depth_rect.reshape"], "methods", ["None"], ["", "def", "img_to_rect", "(", "self", ",", "u", ",", "v", ",", "depth_rect", ")", ":", "\n", "        ", "\"\"\"\n        :param u: (N)\n        :param v: (N)\n        :param depth_rect: (N)\n        :return:\n        \"\"\"", "\n", "x", "=", "(", "(", "u", "-", "self", ".", "cu", ")", "*", "depth_rect", ")", "/", "self", ".", "fu", "+", "self", ".", "tx", "\n", "y", "=", "(", "(", "v", "-", "self", ".", "cv", ")", "*", "depth_rect", ")", "/", "self", ".", "fv", "+", "self", ".", "ty", "\n", "pts_rect", "=", "np", ".", "concatenate", "(", "(", "x", ".", "reshape", "(", "-", "1", ",", "1", ")", ",", "y", ".", "reshape", "(", "-", "1", ",", "1", ")", ",", "depth_rect", ".", "reshape", "(", "-", "1", ",", "1", ")", ")", ",", "axis", "=", "1", ")", "\n", "return", "pts_rect", "\n", "\n"]], "home.repos.pwc.inspect_result.kemo-huang_jmodt.utils.calibration.Calibration.depthmap_to_rect": [[92, 104], ["numpy.arange", "numpy.arange", "numpy.meshgrid", "calibration.Calibration.img_to_rect", "x_idxs.reshape", "y_idxs.reshape"], "methods", ["home.repos.pwc.inspect_result.kemo-huang_jmodt.utils.calibration.Calibration.img_to_rect"], ["", "def", "depthmap_to_rect", "(", "self", ",", "depth_map", ")", ":", "\n", "        ", "\"\"\"\n        :param depth_map: (H, W), depth_map\n        :return:\n        \"\"\"", "\n", "x_range", "=", "np", ".", "arange", "(", "0", ",", "depth_map", ".", "shape", "[", "1", "]", ")", "\n", "y_range", "=", "np", ".", "arange", "(", "0", ",", "depth_map", ".", "shape", "[", "0", "]", ")", "\n", "x_idxs", ",", "y_idxs", "=", "np", ".", "meshgrid", "(", "x_range", ",", "y_range", ")", "\n", "x_idxs", ",", "y_idxs", "=", "x_idxs", ".", "reshape", "(", "-", "1", ")", ",", "y_idxs", ".", "reshape", "(", "-", "1", ")", "\n", "depth", "=", "depth_map", "[", "y_idxs", ",", "x_idxs", "]", "\n", "pts_rect", "=", "self", ".", "img_to_rect", "(", "x_idxs", ",", "y_idxs", ",", "depth", ")", "\n", "return", "pts_rect", ",", "x_idxs", ",", "y_idxs", "\n", "\n"]], "home.repos.pwc.inspect_result.kemo-huang_jmodt.utils.calibration.Calibration.corners3d_to_img_boxes": [[105, 124], ["numpy.concatenate", "numpy.matmul", "numpy.concatenate", "numpy.concatenate", "numpy.min", "numpy.min", "numpy.max", "numpy.max", "numpy.ones", "x1.reshape", "y1.reshape", "x2.reshape", "y2.reshape", "x.reshape", "y.reshape"], "methods", ["None"], ["", "def", "corners3d_to_img_boxes", "(", "self", ",", "corners3d", ")", ":", "\n", "        ", "\"\"\"\n        :param corners3d: (N, 8, 3) corners in rect coordinate\n        :return: boxes: (None, 4) [x1, y1, x2, y2] in rgb coordinate\n        :return: boxes_corner: (None, 8) [xi, yi] in rgb coordinate\n        \"\"\"", "\n", "sample_num", "=", "corners3d", ".", "shape", "[", "0", "]", "\n", "corners3d_hom", "=", "np", ".", "concatenate", "(", "(", "corners3d", ",", "np", ".", "ones", "(", "(", "sample_num", ",", "8", ",", "1", ")", ")", ")", ",", "axis", "=", "2", ")", "# (N, 8, 4)", "\n", "\n", "img_pts", "=", "np", ".", "matmul", "(", "corners3d_hom", ",", "self", ".", "P2", ".", "T", ")", "# (N, 8, 3)", "\n", "\n", "x", ",", "y", "=", "img_pts", "[", ":", ",", ":", ",", "0", "]", "/", "img_pts", "[", ":", ",", ":", ",", "2", "]", ",", "img_pts", "[", ":", ",", ":", ",", "1", "]", "/", "img_pts", "[", ":", ",", ":", ",", "2", "]", "\n", "x1", ",", "y1", "=", "np", ".", "min", "(", "x", ",", "axis", "=", "1", ")", ",", "np", ".", "min", "(", "y", ",", "axis", "=", "1", ")", "\n", "x2", ",", "y2", "=", "np", ".", "max", "(", "x", ",", "axis", "=", "1", ")", ",", "np", ".", "max", "(", "y", ",", "axis", "=", "1", ")", "\n", "\n", "boxes", "=", "np", ".", "concatenate", "(", "(", "x1", ".", "reshape", "(", "-", "1", ",", "1", ")", ",", "y1", ".", "reshape", "(", "-", "1", ",", "1", ")", ",", "x2", ".", "reshape", "(", "-", "1", ",", "1", ")", ",", "y2", ".", "reshape", "(", "-", "1", ",", "1", ")", ")", ",", "axis", "=", "1", ")", "\n", "boxes_corner", "=", "np", ".", "concatenate", "(", "(", "x", ".", "reshape", "(", "-", "1", ",", "8", ",", "1", ")", ",", "y", ".", "reshape", "(", "-", "1", ",", "8", ",", "1", ")", ")", ",", "axis", "=", "2", ")", "\n", "\n", "return", "boxes", ",", "boxes_corner", "\n", "\n"]], "home.repos.pwc.inspect_result.kemo-huang_jmodt.utils.calibration.Calibration.camera_dis_to_rect": [[125, 140], ["numpy.sqrt", "numpy.sqrt", "numpy.concatenate", "x.reshape", "y.reshape", "numpy.sqrt.reshape"], "methods", ["None"], ["", "def", "camera_dis_to_rect", "(", "self", ",", "u", ",", "v", ",", "d", ")", ":", "\n", "        ", "\"\"\"\n        Can only process valid u, v, d, which means u, v can not beyond the image shape, reprojection error 0.02\n        :param u: (N)\n        :param v: (N)\n        :param d: (N), the distance between camera and 3d points, d^2 = x^2 + y^2 + z^2\n        :return:\n        \"\"\"", "\n", "assert", "self", ".", "fu", "==", "self", ".", "fv", ",", "'%.8f != %.8f'", "%", "(", "self", ".", "fu", ",", "self", ".", "fv", ")", "\n", "fd", "=", "np", ".", "sqrt", "(", "(", "u", "-", "self", ".", "cu", ")", "**", "2", "+", "(", "v", "-", "self", ".", "cv", ")", "**", "2", "+", "self", ".", "fu", "**", "2", ")", "\n", "x", "=", "(", "(", "u", "-", "self", ".", "cu", ")", "*", "d", ")", "/", "fd", "+", "self", ".", "tx", "\n", "y", "=", "(", "(", "v", "-", "self", ".", "cv", ")", "*", "d", ")", "/", "fd", "+", "self", ".", "ty", "\n", "z", "=", "np", ".", "sqrt", "(", "d", "**", "2", "-", "x", "**", "2", "-", "y", "**", "2", ")", "\n", "pts_rect", "=", "np", ".", "concatenate", "(", "(", "x", ".", "reshape", "(", "-", "1", ",", "1", ")", ",", "y", ".", "reshape", "(", "-", "1", ",", "1", ")", ",", "z", ".", "reshape", "(", "-", "1", ",", "1", ")", ")", ",", "axis", "=", "1", ")", "\n", "return", "pts_rect", "\n", "", "", ""]], "home.repos.pwc.inspect_result.kemo-huang_jmodt.utils.calibration.get_calib_from_file": [[4, 21], ["numpy.array", "numpy.array", "numpy.array", "numpy.array", "open", "f.readlines", "lines[].strip().split", "lines[].strip().split", "lines[].strip().split", "lines[].strip().split", "np.array.reshape", "np.array.reshape", "np.array.reshape", "np.array.reshape", "lines[].strip", "lines[].strip", "lines[].strip", "lines[].strip"], "function", ["None"], ["def", "get_calib_from_file", "(", "calib_file", ")", ":", "\n", "    ", "with", "open", "(", "calib_file", ")", "as", "f", ":", "\n", "        ", "lines", "=", "f", ".", "readlines", "(", ")", "\n", "\n", "", "obj", "=", "lines", "[", "2", "]", ".", "strip", "(", ")", ".", "split", "(", "' '", ")", "[", "1", ":", "]", "\n", "P2", "=", "np", ".", "array", "(", "obj", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "obj", "=", "lines", "[", "3", "]", ".", "strip", "(", ")", ".", "split", "(", "' '", ")", "[", "1", ":", "]", "\n", "P3", "=", "np", ".", "array", "(", "obj", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "obj", "=", "lines", "[", "4", "]", ".", "strip", "(", ")", ".", "split", "(", "' '", ")", "[", "1", ":", "]", "\n", "R0", "=", "np", ".", "array", "(", "obj", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "obj", "=", "lines", "[", "5", "]", ".", "strip", "(", ")", ".", "split", "(", "' '", ")", "[", "1", ":", "]", "\n", "Tr_velo_to_cam", "=", "np", ".", "array", "(", "obj", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "return", "{", "'P2'", ":", "P2", ".", "reshape", "(", "3", ",", "4", ")", ",", "\n", "'P3'", ":", "P3", ".", "reshape", "(", "3", ",", "4", ")", ",", "\n", "'R0'", ":", "R0", ".", "reshape", "(", "3", ",", "3", ")", ",", "\n", "'Tr_velo2cam'", ":", "Tr_velo_to_cam", ".", "reshape", "(", "3", ",", "4", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.kemo-huang_jmodt.datasets.kitti_dataset.KittiDataset.__init__": [[12, 93], ["os.path.join", "os.path.join", "os.path.join", "os.path.join", "kitti_dataset.KittiDataset.classes.__len__", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "x.strip", "open().readlines", "x.split", "x.strip", "kitti_dataset.KittiDataset.logger.info", "range", "kitti_dataset.KittiDataset.logger.info", "kitti_dataset.KittiDataset.logger.info", "range", "kitti_dataset.KittiDataset.logger.info", "open().readlines", "open().readlines", "len", "int", "kitti_dataset.KittiDataset.filtrate_objects", "int", "len", "int", "int", "kitti_dataset.KittiDataset.filtrate_objects", "kitti_dataset.KittiDataset.filtrate_objects", "int", "int", "open", "kitti_dataset.KittiDataset.get_label", "len", "kitti_dataset.KittiDataset.sample_id_list.append", "kitti_dataset.KittiDataset.get_label", "kitti_dataset.KittiDataset.get_label", "kitti_dataset.KittiDataset.sample_pair_id_list.append", "int", "int", "open", "open", "len", "len", "len", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.kemo-huang_jmodt.datasets.kitti_dataset.KittiDataset.__len__", "home.repos.pwc.inspect_result.kemo-huang_jmodt.datasets.kitti_dataset.KittiDataset.filtrate_objects", "home.repos.pwc.inspect_result.kemo-huang_jmodt.datasets.kitti_dataset.KittiDataset.filtrate_objects", "home.repos.pwc.inspect_result.kemo-huang_jmodt.datasets.kitti_dataset.KittiDataset.filtrate_objects", "home.repos.pwc.inspect_result.kemo-huang_jmodt.datasets.kitti_dataset.KittiDataset.get_label", "home.repos.pwc.inspect_result.kemo-huang_jmodt.datasets.kitti_dataset.KittiDataset.get_label", "home.repos.pwc.inspect_result.kemo-huang_jmodt.datasets.kitti_dataset.KittiDataset.get_label"], ["    ", "def", "__init__", "(", "self", ",", "root_dir", ",", "npoints", "=", "16384", ",", "split", "=", "'train'", ",", "classes", "=", "'Car'", ",", "mode", "=", "'TRAIN'", ",", "logger", "=", "None", ",", "\n", "challenge", "=", "'detection'", ",", "fixed_img_size", "=", "(", "384", ",", "1280", ")", ")", ":", "\n", "        ", "self", ".", "split", "=", "split", "\n", "is_test", "=", "self", ".", "split", "==", "'test'", "\n", "self", ".", "challenge", "=", "challenge", "\n", "self", ".", "fixed_img_size", "=", "fixed_img_size", "\n", "assert", "mode", "in", "[", "'TRAIN'", ",", "'EVAL'", ",", "'TEST'", "]", ",", "'Invalid mode: %s'", "%", "mode", "\n", "self", ".", "mode", "=", "mode", "\n", "if", "challenge", "==", "'detection'", ":", "\n", "            ", "data_dir", "=", "os", ".", "path", ".", "join", "(", "root_dir", ",", "'object'", ",", "'testing'", "if", "is_test", "else", "'training'", ")", "\n", "split_file", "=", "os", ".", "path", ".", "join", "(", "root_dir", ",", "'object'", ",", "'ImageSets'", ",", "split", "+", "'.txt'", ")", "\n", "self", ".", "image_idx_list", "=", "[", "x", ".", "strip", "(", ")", "for", "x", "in", "open", "(", "split_file", ")", ".", "readlines", "(", ")", "]", "\n", "", "else", ":", "\n", "            ", "data_dir", "=", "os", ".", "path", ".", "join", "(", "root_dir", ",", "'tracking_object'", ",", "\n", "'testing'", "if", "is_test", "else", "'training'", ")", "\n", "split_file", "=", "os", ".", "path", ".", "join", "(", "root_dir", ",", "'tracking_object'", ",", "\n", "'ImageSets'", ",", "split", "+", "'.txt'", ")", "\n", "if", "self", ".", "mode", "==", "'TRAIN'", ":", "\n", "# two consecutive frames", "\n", "                ", "self", ".", "sample_pair_list", "=", "[", "x", ".", "split", "(", ")", "for", "x", "in", "open", "(", "split_file", ")", ".", "readlines", "(", ")", "]", "\n", "", "else", ":", "\n", "                ", "self", ".", "image_idx_list", "=", "[", "x", ".", "strip", "(", ")", "for", "x", "in", "open", "(", "split_file", ")", ".", "readlines", "(", ")", "]", "\n", "\n", "", "", "self", ".", "image_dir", "=", "os", ".", "path", ".", "join", "(", "data_dir", ",", "'image_2'", ")", "\n", "self", ".", "lidar_dir", "=", "os", ".", "path", ".", "join", "(", "data_dir", ",", "'velodyne'", ")", "\n", "self", ".", "calib_dir", "=", "os", ".", "path", ".", "join", "(", "data_dir", ",", "'calib'", ")", "\n", "self", ".", "label_dir", "=", "os", ".", "path", ".", "join", "(", "data_dir", ",", "'label_2'", ")", "\n", "\n", "self", ".", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", "\n", "self", ".", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", "\n", "\n", "self", ".", "npoints", "=", "npoints", "\n", "self", ".", "logger", "=", "logger", "\n", "\n", "if", "classes", "==", "'Car'", ":", "\n", "            ", "self", ".", "classes", "=", "(", "'Background'", ",", "'Car'", ")", "\n", "", "elif", "classes", "==", "'People'", ":", "\n", "            ", "self", ".", "classes", "=", "(", "'Background'", ",", "'Pedestrian'", ",", "'Cyclist'", ")", "\n", "", "elif", "classes", "==", "'Pedestrian'", ":", "\n", "            ", "self", ".", "classes", "=", "(", "'Background'", ",", "'Pedestrian'", ")", "\n", "", "elif", "classes", "==", "'Cyclist'", ":", "\n", "            ", "self", ".", "classes", "=", "(", "'Background'", ",", "'Cyclist'", ")", "\n", "", "else", ":", "\n", "            ", "assert", "False", ",", "\"Invalid classes: %s\"", "%", "classes", "\n", "", "self", ".", "num_class", "=", "self", ".", "classes", ".", "__len__", "(", ")", "\n", "\n", "if", "cfg", ".", "RPN", ".", "ENABLED", ":", "\n", "            ", "if", "self", ".", "challenge", "==", "'detection'", ":", "\n", "                ", "if", "self", ".", "mode", "==", "'TRAIN'", ":", "\n", "                    ", "self", ".", "logger", ".", "info", "(", "'Loading %s samples from %s ...'", "%", "(", "self", ".", "mode", ",", "self", ".", "label_dir", ")", ")", "\n", "self", ".", "sample_id_list", "=", "[", "]", "\n", "for", "idx", "in", "range", "(", "len", "(", "self", ".", "image_idx_list", ")", ")", ":", "\n", "                        ", "sample_id", "=", "int", "(", "self", ".", "image_idx_list", "[", "idx", "]", ")", "\n", "obj_list", "=", "self", ".", "filtrate_objects", "(", "self", ".", "get_label", "(", "sample_id", ")", ")", "\n", "if", "len", "(", "obj_list", ")", "!=", "0", ":", "\n", "                            ", "self", ".", "sample_id_list", ".", "append", "(", "sample_id", ")", "\n", "", "", "self", ".", "logger", ".", "info", "(", "\n", "f'Done filtering: {len(self.sample_id_list)} / {len(self.image_idx_list)}\\n'", ")", "\n", "", "else", ":", "\n", "                    ", "self", ".", "sample_id_list", "=", "[", "int", "(", "sample_id", ")", "for", "sample_id", "in", "self", ".", "image_idx_list", "]", "\n", "", "", "else", ":", "\n", "                ", "if", "self", ".", "mode", "==", "'TRAIN'", ":", "\n", "                    ", "self", ".", "logger", ".", "info", "(", "'Loading %s samples from %s ...'", "%", "(", "self", ".", "mode", ",", "self", ".", "label_dir", ")", ")", "\n", "self", ".", "sample_pair_id_list", "=", "[", "]", "\n", "for", "idx", "in", "range", "(", "len", "(", "self", ".", "sample_pair_list", ")", ")", ":", "\n", "                        ", "prev_sample_id", ",", "next_sample_id", "=", "self", ".", "sample_pair_list", "[", "idx", "]", "\n", "prev_sample_id", "=", "int", "(", "prev_sample_id", ")", "\n", "next_sample_id", "=", "int", "(", "next_sample_id", ")", "\n", "prev_obj_list", "=", "self", ".", "filtrate_objects", "(", "self", ".", "get_label", "(", "prev_sample_id", ")", ")", "\n", "next_obj_list", "=", "self", ".", "filtrate_objects", "(", "self", ".", "get_label", "(", "next_sample_id", ")", ")", "\n", "if", "len", "(", "prev_obj_list", ")", ">", "0", "and", "len", "(", "next_obj_list", ")", ">", "0", ":", "\n", "                            ", "self", ".", "sample_pair_id_list", ".", "append", "(", "(", "prev_sample_id", ",", "next_sample_id", ")", ")", "\n", "", "", "self", ".", "logger", ".", "info", "(", "\n", "f'Done filtering: {len(self.sample_pair_id_list)} / {len(self.sample_pair_list)}\\n'", ")", "\n", "", "else", ":", "\n", "                    ", "self", ".", "sample_id_list", "=", "[", "int", "(", "sample_id", ")", "for", "sample_id", "in", "self", ".", "image_idx_list", "]", "\n", "", "", "", "elif", "cfg", ".", "RCNN", ".", "ENABLED", ":", "\n", "            ", "if", "self", ".", "challenge", "==", "'detection'", "or", "self", ".", "mode", "!=", "'TRAIN'", ":", "\n", "                ", "self", ".", "sample_id_list", "=", "[", "int", "(", "sample_id", ")", "for", "sample_id", "in", "self", ".", "image_idx_list", "]", "\n", "", "else", ":", "\n", "                ", "self", ".", "sample_pair_id_list", "=", "[", "(", "int", "(", "x1", ")", ",", "int", "(", "x2", ")", ")", "for", "x1", ",", "x2", "in", "self", ".", "sample_pair_list", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.kemo-huang_jmodt.datasets.kitti_dataset.KittiDataset.get_normalized_image": [[94, 109], ["os.path.join", "os.path.exists", "PIL.Image.open().convert", "numpy.array().astype", "numpy.zeros", "PIL.Image.open", "numpy.array"], "methods", ["None"], ["", "", "", "def", "get_normalized_image", "(", "self", ",", "idx", ")", ":", "\n", "        ", "\"\"\"\n        :return: fixed_size_img (H,W,3)\n        \"\"\"", "\n", "img_file", "=", "os", ".", "path", ".", "join", "(", "self", ".", "image_dir", ",", "'%06d.png'", "%", "idx", ")", "\n", "assert", "os", ".", "path", ".", "exists", "(", "img_file", ")", "\n", "img", "=", "Image", ".", "open", "(", "img_file", ")", ".", "convert", "(", "'RGB'", ")", "\n", "img", "=", "np", ".", "array", "(", "img", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "img", "/=", "255.0", "\n", "img", "-=", "self", ".", "mean", "\n", "img", "/=", "self", ".", "std", "\n", "fixed_size_img", "=", "np", ".", "zeros", "(", "[", "self", ".", "fixed_img_size", "[", "0", "]", ",", "self", ".", "fixed_img_size", "[", "1", "]", ",", "3", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "fixed_size_img", "[", ":", "img", ".", "shape", "[", "0", "]", ",", ":", "img", ".", "shape", "[", "1", "]", ",", ":", "]", "=", "img", "\n", "\n", "return", "fixed_size_img", "\n", "\n"]], "home.repos.pwc.inspect_result.kemo-huang_jmodt.datasets.kitti_dataset.KittiDataset.get_image_shape": [[110, 116], ["os.path.join", "os.path.exists", "PIL.Image.open"], "methods", ["None"], ["", "def", "get_image_shape", "(", "self", ",", "idx", ")", ":", "\n", "        ", "img_file", "=", "os", ".", "path", ".", "join", "(", "self", ".", "image_dir", ",", "'%06d.png'", "%", "idx", ")", "\n", "assert", "os", ".", "path", ".", "exists", "(", "img_file", ")", ",", "f'Path {img_file} does not exist'", "\n", "img", "=", "Image", ".", "open", "(", "img_file", ")", "\n", "width", ",", "height", "=", "img", ".", "size", "\n", "return", "height", ",", "width", ",", "3", "\n", "\n"]], "home.repos.pwc.inspect_result.kemo-huang_jmodt.datasets.kitti_dataset.KittiDataset.get_lidar": [[117, 123], ["os.path.join", "os.path.exists", "numpy.fromfile", "points.reshape.reshape.reshape"], "methods", ["None"], ["", "def", "get_lidar", "(", "self", ",", "idx", ")", ":", "\n", "        ", "lidar_file", "=", "os", ".", "path", ".", "join", "(", "self", ".", "lidar_dir", ",", "'%06d.bin'", "%", "idx", ")", "\n", "assert", "os", ".", "path", ".", "exists", "(", "lidar_file", ")", ",", "f'Path {lidar_file} does not exist'", "\n", "points", "=", "np", ".", "fromfile", "(", "lidar_file", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "points", "=", "points", ".", "reshape", "(", "-", "1", ",", "4", ")", "\n", "return", "points", "\n", "\n"]], "home.repos.pwc.inspect_result.kemo-huang_jmodt.datasets.kitti_dataset.KittiDataset.get_calib": [[124, 128], ["os.path.join", "os.path.exists", "jmodt.utils.calibration.Calibration"], "methods", ["None"], ["", "def", "get_calib", "(", "self", ",", "idx", ")", ":", "\n", "        ", "calib_file", "=", "os", ".", "path", ".", "join", "(", "self", ".", "calib_dir", ",", "'%06d.txt'", "%", "idx", ")", "\n", "assert", "os", ".", "path", ".", "exists", "(", "calib_file", ")", ",", "f'Path {calib_file} does not exist'", "\n", "return", "calibration", ".", "Calibration", "(", "calib_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kemo-huang_jmodt.datasets.kitti_dataset.KittiDataset.get_label": [[129, 133], ["os.path.join", "os.path.exists", "jmodt.utils.kitti_utils.get_objects_from_label"], "methods", ["home.repos.pwc.inspect_result.kemo-huang_jmodt.utils.kitti_utils.get_objects_from_label"], ["", "def", "get_label", "(", "self", ",", "idx", ")", ":", "\n", "        ", "label_file", "=", "os", ".", "path", ".", "join", "(", "self", ".", "label_dir", ",", "'%06d.txt'", "%", "idx", ")", "\n", "assert", "os", ".", "path", ".", "exists", "(", "label_file", ")", ",", "f'Path {label_file} does not exist'", "\n", "return", "kitti_utils", ".", "get_objects_from_label", "(", "label_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kemo-huang_jmodt.datasets.kitti_dataset.KittiDataset.filtrate_objects": [[134, 156], ["list", "valid_obj_list.append", "list.append", "list.append", "kitti_dataset.KittiDataset.check_pc_range"], "methods", ["home.repos.pwc.inspect_result.kemo-huang_jmodt.datasets.kitti_dataset.KittiDataset.check_pc_range"], ["", "def", "filtrate_objects", "(", "self", ",", "obj_list", ")", ":", "\n", "        ", "\"\"\"\n        Discard objects which are not in self.classes (or its similar classes)\n        :param obj_list: list\n        :return: list\n        \"\"\"", "\n", "type_whitelist", "=", "self", ".", "classes", "\n", "if", "self", ".", "mode", "==", "'TRAIN'", "and", "cfg", ".", "INCLUDE_SIMILAR_TYPE", ":", "\n", "            ", "type_whitelist", "=", "list", "(", "self", ".", "classes", ")", "\n", "if", "'Car'", "in", "self", ".", "classes", ":", "\n", "                ", "type_whitelist", ".", "append", "(", "'Van'", ")", "\n", "", "if", "'Pedestrian'", "in", "self", ".", "classes", ":", "\n", "                ", "type_whitelist", ".", "append", "(", "'Person_sitting'", ")", "\n", "\n", "", "", "valid_obj_list", "=", "[", "]", "\n", "for", "obj", "in", "obj_list", ":", "\n", "            ", "if", "obj", ".", "cls_type", "not", "in", "type_whitelist", ":", "\n", "                ", "continue", "\n", "", "if", "self", ".", "mode", "==", "'TRAIN'", "and", "cfg", ".", "PC_REDUCE_BY_RANGE", "and", "(", "self", ".", "check_pc_range", "(", "obj", ".", "pos", ")", "is", "False", ")", ":", "\n", "                ", "continue", "\n", "", "valid_obj_list", ".", "append", "(", "obj", ")", "\n", "", "return", "valid_obj_list", "\n", "\n"]], "home.repos.pwc.inspect_result.kemo-huang_jmodt.datasets.kitti_dataset.KittiDataset.check_pc_range": [[157, 168], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "check_pc_range", "(", "xyz", ")", ":", "\n", "        ", "\"\"\"\n        :param xyz: [x, y, z]\n        :return:\n        \"\"\"", "\n", "x_range", ",", "y_range", ",", "z_range", "=", "cfg", ".", "PC_AREA_SCOPE", "\n", "if", "(", "x_range", "[", "0", "]", "<=", "xyz", "[", "0", "]", "<=", "x_range", "[", "1", "]", ")", "and", "(", "y_range", "[", "0", "]", "<=", "xyz", "[", "1", "]", "<=", "y_range", "[", "1", "]", ")", "and", "(", "z_range", "[", "0", "]", "<=", "xyz", "[", "2", "]", "<=", "z_range", "[", "1", "]", ")", ":", "\n", "            ", "return", "True", "\n", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.kemo-huang_jmodt.datasets.kitti_dataset.KittiDataset.get_valid_flag": [[169, 192], ["numpy.logical_and", "numpy.logical_and", "numpy.logical_and", "numpy.logical_and"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "get_valid_flag", "(", "pts_rect", ",", "pts_img", ",", "pts_rect_depth", ",", "img_shape", ")", ":", "\n", "        ", "\"\"\"\n        Valid point should be in the image (and in the PC_AREA_SCOPE)\n        :param pts_rect:\n        :param pts_img:\n        :param pts_rect_depth:\n        :param img_shape:\n        :return:\n        \"\"\"", "\n", "val_flag_1", "=", "np", ".", "logical_and", "(", "pts_img", "[", ":", ",", "0", "]", ">=", "0", ",", "pts_img", "[", ":", ",", "0", "]", "<", "img_shape", "[", "1", "]", ")", "\n", "val_flag_2", "=", "np", ".", "logical_and", "(", "pts_img", "[", ":", ",", "1", "]", ">=", "0", ",", "pts_img", "[", ":", ",", "1", "]", "<", "img_shape", "[", "0", "]", ")", "\n", "val_flag_merge", "=", "np", ".", "logical_and", "(", "val_flag_1", ",", "val_flag_2", ")", "\n", "pts_valid_flag", "=", "np", ".", "logical_and", "(", "val_flag_merge", ",", "pts_rect_depth", ">=", "0", ")", "\n", "\n", "if", "cfg", ".", "PC_REDUCE_BY_RANGE", ":", "\n", "            ", "x_range", ",", "y_range", ",", "z_range", "=", "cfg", ".", "PC_AREA_SCOPE", "\n", "pts_x", ",", "pts_y", ",", "pts_z", "=", "pts_rect", "[", ":", ",", "0", "]", ",", "pts_rect", "[", ":", ",", "1", "]", ",", "pts_rect", "[", ":", ",", "2", "]", "\n", "range_flag", "=", "(", "pts_x", ">=", "x_range", "[", "0", "]", ")", "&", "(", "pts_x", "<=", "x_range", "[", "1", "]", ")", "&", "(", "pts_y", ">=", "y_range", "[", "0", "]", ")", "&", "(", "pts_y", "<=", "y_range", "[", "1", "]", ")", "&", "(", "pts_z", ">=", "z_range", "[", "0", "]", ")", "&", "(", "pts_z", "<=", "z_range", "[", "1", "]", ")", "\n", "pts_valid_flag", "=", "pts_valid_flag", "&", "range_flag", "\n", "", "return", "pts_valid_flag", "\n", "\n"]], "home.repos.pwc.inspect_result.kemo-huang_jmodt.datasets.kitti_dataset.KittiDataset.__len__": [[193, 198], ["len", "len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "challenge", "==", "'detection'", "or", "self", ".", "mode", "!=", "'TRAIN'", ":", "\n", "            ", "return", "len", "(", "self", ".", "sample_id_list", ")", "\n", "", "else", ":", "\n", "            ", "return", "len", "(", "self", ".", "sample_pair_id_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kemo-huang_jmodt.datasets.kitti_dataset.KittiDataset.__getitem__": [[199, 206], ["kitti_dataset.KittiDataset.get_sample_dict", "kitti_dataset.KittiDataset.get_sample_dict", "kitti_dataset.KittiDataset.get_sample_dict"], "methods", ["home.repos.pwc.inspect_result.kemo-huang_jmodt.datasets.kitti_dataset.KittiDataset.get_sample_dict", "home.repos.pwc.inspect_result.kemo-huang_jmodt.datasets.kitti_dataset.KittiDataset.get_sample_dict", "home.repos.pwc.inspect_result.kemo-huang_jmodt.datasets.kitti_dataset.KittiDataset.get_sample_dict"], ["", "", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "if", "self", ".", "challenge", "==", "'detection'", "or", "self", ".", "mode", "!=", "'TRAIN'", ":", "\n", "            ", "sample_id", "=", "self", ".", "sample_id_list", "[", "index", "]", "\n", "return", "self", ".", "get_sample_dict", "(", "sample_id", ")", "\n", "", "else", ":", "\n", "            ", "prev_sample_id", ",", "next_sample_id", "=", "self", ".", "sample_pair_id_list", "[", "index", "]", "\n", "return", "self", ".", "get_sample_dict", "(", "prev_sample_id", ")", ",", "self", ".", "get_sample_dict", "(", "next_sample_id", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kemo-huang_jmodt.datasets.kitti_dataset.KittiDataset.get_sample_dict": [[207, 303], ["kitti_dataset.KittiDataset.get_calib", "kitti_dataset.KittiDataset.get_normalized_image", "kitti_dataset.KittiDataset.get_image_shape", "kitti_dataset.KittiDataset.get_lidar", "kitti_dataset.KittiDataset.lidar_to_rect", "kitti_dataset.KittiDataset.rect_to_img", "kitti_dataset.KittiDataset.get_valid_flag", "len", "numpy.random.choice", "numpy.random.shuffle", "numpy.arange", "numpy.random.shuffle", "ret_pts_intensity.reshape", "numpy.concatenate", "kitti_dataset.KittiDataset.filtrate_objects", "numpy.zeros", "numpy.zeros", "numpy.zeros", "enumerate", "ret_pts_rect.copy", "numpy.zeros.copy", "numpy.where", "numpy.where", "numpy.concatenate", "len", "len", "numpy.random.choice", "numpy.concatenate", "pts_features.__len__", "numpy.concatenate", "kitti_dataset.KittiDataset.get_label", "kitti_dataset.KittiDataset.__len__", "kitti_dataset.KittiDataset.__len__", "kitti_dataset.KittiDataset.data_augmentation", "numpy.concatenate", "kitti_dataset.KittiDataset.generate_rpn_training_labels", "len", "len", "kitti_dataset.KittiDataset.__len__", "len"], "methods", ["home.repos.pwc.inspect_result.kemo-huang_jmodt.datasets.kitti_dataset.KittiDataset.get_calib", "home.repos.pwc.inspect_result.kemo-huang_jmodt.datasets.kitti_dataset.KittiDataset.get_normalized_image", "home.repos.pwc.inspect_result.kemo-huang_jmodt.datasets.kitti_dataset.KittiDataset.get_image_shape", "home.repos.pwc.inspect_result.kemo-huang_jmodt.datasets.kitti_dataset.KittiDataset.get_lidar", "home.repos.pwc.inspect_result.kemo-huang_jmodt.utils.calibration.Calibration.lidar_to_rect", "home.repos.pwc.inspect_result.kemo-huang_jmodt.utils.calibration.Calibration.rect_to_img", "home.repos.pwc.inspect_result.kemo-huang_jmodt.datasets.kitti_dataset.KittiDataset.get_valid_flag", "home.repos.pwc.inspect_result.kemo-huang_jmodt.datasets.kitti_dataset.KittiDataset.filtrate_objects", "home.repos.pwc.inspect_result.kemo-huang_jmodt.datasets.kitti_dataset.KittiDataset.__len__", "home.repos.pwc.inspect_result.kemo-huang_jmodt.datasets.kitti_dataset.KittiDataset.get_label", "home.repos.pwc.inspect_result.kemo-huang_jmodt.datasets.kitti_dataset.KittiDataset.__len__", "home.repos.pwc.inspect_result.kemo-huang_jmodt.datasets.kitti_dataset.KittiDataset.__len__", "home.repos.pwc.inspect_result.kemo-huang_jmodt.layers.proposal_target_layer.ProposalTargetLayer.data_augmentation", "home.repos.pwc.inspect_result.kemo-huang_jmodt.datasets.kitti_dataset.KittiDataset.generate_rpn_training_labels", "home.repos.pwc.inspect_result.kemo-huang_jmodt.datasets.kitti_dataset.KittiDataset.__len__"], ["", "", "def", "get_sample_dict", "(", "self", ",", "sample_id", ")", ":", "\n", "        ", "\"\"\"\n        :return:\n            sample_id\n            img\n            pts_xy\n            pts_input\n            gt_boxes3d\n            gt_tid\n        \"\"\"", "\n", "calib", "=", "self", ".", "get_calib", "(", "sample_id", ")", "\n", "img", "=", "self", ".", "get_normalized_image", "(", "sample_id", ")", "\n", "img_shape", "=", "self", ".", "get_image_shape", "(", "sample_id", ")", "\n", "pts_lidar", "=", "self", ".", "get_lidar", "(", "sample_id", ")", "\n", "\n", "# get valid points (projected points should be in image)", "\n", "pts_rect", "=", "calib", ".", "lidar_to_rect", "(", "pts_lidar", "[", ":", ",", "0", ":", "3", "]", ")", "\n", "pts_img", ",", "pts_rect_depth", "=", "calib", ".", "rect_to_img", "(", "pts_rect", ")", "\n", "pts_valid_flag", "=", "self", ".", "get_valid_flag", "(", "pts_rect", ",", "pts_img", ",", "pts_rect_depth", ",", "img_shape", ")", "\n", "pts_rect", "=", "pts_rect", "[", "pts_valid_flag", "]", "\n", "pts_intensity", "=", "pts_lidar", "[", "pts_valid_flag", ",", "3", "]", "\n", "pts_xy", "=", "pts_img", "[", "pts_valid_flag", "]", "\n", "\n", "# generate inputs", "\n", "if", "self", ".", "npoints", "<", "len", "(", "pts_rect", ")", ":", "\n", "# keep far points, sample near points", "\n", "            ", "pts_depth", "=", "pts_rect", "[", ":", ",", "2", "]", "\n", "pts_near_flag", "=", "pts_depth", "<", "40.0", "\n", "far_indices_choice", "=", "np", ".", "where", "(", "pts_near_flag", "==", "0", ")", "[", "0", "]", "\n", "near_indices", "=", "np", ".", "where", "(", "pts_near_flag", "==", "1", ")", "[", "0", "]", "\n", "near_indices_choice", "=", "np", ".", "random", ".", "choice", "(", "near_indices", ",", "self", ".", "npoints", "-", "len", "(", "far_indices_choice", ")", ",", "replace", "=", "False", ")", "\n", "\n", "choice", "=", "np", ".", "concatenate", "(", "(", "near_indices_choice", ",", "far_indices_choice", ")", ",", "axis", "=", "0", ")", "if", "len", "(", "far_indices_choice", ")", ">", "0", "else", "near_indices_choice", "\n", "np", ".", "random", ".", "shuffle", "(", "choice", ")", "\n", "", "else", ":", "\n", "            ", "choice", "=", "np", ".", "arange", "(", "0", ",", "len", "(", "pts_rect", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "while", "self", ".", "npoints", ">", "len", "(", "choice", ")", ":", "\n", "                ", "extra_choice", "=", "np", ".", "random", ".", "choice", "(", "choice", ",", "self", ".", "npoints", "%", "len", "(", "choice", ")", ",", "replace", "=", "False", ")", "\n", "choice", "=", "np", ".", "concatenate", "(", "(", "choice", ",", "extra_choice", ")", ",", "axis", "=", "0", ")", "\n", "", "np", ".", "random", ".", "shuffle", "(", "choice", ")", "\n", "\n", "", "ret_pts_rect", "=", "pts_rect", "[", "choice", ",", ":", "]", "\n", "ret_pts_intensity", "=", "pts_intensity", "[", "choice", "]", "-", "0.5", "# translate intensity to [-0.5, 0.5]", "\n", "ret_pts_xy", "=", "pts_xy", "[", "choice", ",", ":", "]", "\n", "\n", "# normalize xy to [-1,1]", "\n", "ret_pts_xy", "[", ":", ",", "0", "]", "=", "ret_pts_xy", "[", ":", ",", "0", "]", "/", "(", "self", ".", "fixed_img_size", "[", "1", "]", "-", "1.0", ")", "*", "2.0", "-", "1.0", "\n", "ret_pts_xy", "[", ":", ",", "1", "]", "=", "ret_pts_xy", "[", ":", ",", "1", "]", "/", "(", "self", ".", "fixed_img_size", "[", "0", "]", "-", "1.0", ")", "*", "2.0", "-", "1.0", "\n", "\n", "pts_features", "=", "[", "ret_pts_intensity", ".", "reshape", "(", "-", "1", ",", "1", ")", "]", "\n", "ret_pts_features", "=", "np", ".", "concatenate", "(", "pts_features", ",", "axis", "=", "1", ")", "if", "pts_features", ".", "__len__", "(", ")", ">", "1", "else", "pts_features", "[", "0", "]", "\n", "\n", "sample_info", "=", "{", "'sample_id'", ":", "sample_id", ",", "'img'", ":", "img", ",", "'pts_xy'", ":", "ret_pts_xy", "}", "\n", "\n", "if", "self", ".", "mode", "==", "'TEST'", ":", "# no label", "\n", "            ", "if", "cfg", ".", "RPN", ".", "USE_INTENSITY", ":", "\n", "                ", "pts_input", "=", "np", ".", "concatenate", "(", "(", "ret_pts_rect", ",", "ret_pts_features", ")", ",", "axis", "=", "1", ")", "# (N, C)", "\n", "", "else", ":", "\n", "                ", "pts_input", "=", "ret_pts_rect", "\n", "", "sample_info", "[", "'pts_input'", "]", "=", "pts_input", "\n", "", "else", ":", "\n", "            ", "gt_obj_list", "=", "self", ".", "filtrate_objects", "(", "self", ".", "get_label", "(", "sample_id", ")", ")", "\n", "\n", "gt_boxes3d", "=", "np", ".", "zeros", "(", "(", "gt_obj_list", ".", "__len__", "(", ")", ",", "7", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "gt_alpha", "=", "np", ".", "zeros", "(", "(", "gt_obj_list", ".", "__len__", "(", ")", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "gt_tids", "=", "np", ".", "zeros", "(", "(", "gt_obj_list", ".", "__len__", "(", ")", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "for", "k", ",", "obj", "in", "enumerate", "(", "gt_obj_list", ")", ":", "\n", "                ", "gt_boxes3d", "[", "k", ",", "0", ":", "3", "]", ",", "gt_boxes3d", "[", "k", ",", "3", "]", ",", "gt_boxes3d", "[", "k", ",", "4", "]", ",", "gt_boxes3d", "[", "k", ",", "5", "]", ",", "gt_boxes3d", "[", "k", ",", "6", "]", "=", "obj", ".", "pos", ",", "obj", ".", "h", ",", "obj", ".", "w", ",", "obj", ".", "l", ",", "obj", ".", "ry", "\n", "gt_alpha", "[", "k", "]", "=", "obj", ".", "alpha", "\n", "gt_tids", "[", "k", "]", "=", "obj", ".", "score", "\n", "\n", "# data augmentation", "\n", "", "aug_pts_rect", "=", "ret_pts_rect", ".", "copy", "(", ")", "\n", "aug_gt_boxes3d", "=", "gt_boxes3d", ".", "copy", "(", ")", "\n", "if", "cfg", ".", "AUG_DATA", "and", "self", ".", "mode", "==", "'TRAIN'", ":", "\n", "                ", "aug_pts_rect", ",", "aug_gt_boxes3d", "=", "self", ".", "data_augmentation", "(", "aug_pts_rect", ",", "aug_gt_boxes3d", ",", "gt_alpha", ")", "\n", "\n", "# prepare input", "\n", "", "if", "cfg", ".", "RPN", ".", "USE_INTENSITY", ":", "\n", "                ", "pts_input", "=", "np", ".", "concatenate", "(", "(", "aug_pts_rect", ",", "ret_pts_features", ")", ",", "axis", "=", "1", ")", "# (N, C)", "\n", "", "else", ":", "\n", "                ", "pts_input", "=", "aug_pts_rect", "\n", "\n", "", "sample_info", "[", "'pts_input'", "]", "=", "pts_input", "\n", "sample_info", "[", "'gt_boxes3d'", "]", "=", "aug_gt_boxes3d", "\n", "sample_info", "[", "'gt_tids'", "]", "=", "gt_tids", "\n", "if", "not", "cfg", ".", "RPN", ".", "FIXED", ":", "\n", "# generate training labels", "\n", "                ", "rpn_cls_label", ",", "rpn_reg_label", "=", "self", ".", "generate_rpn_training_labels", "(", "aug_pts_rect", ",", "aug_gt_boxes3d", ")", "\n", "sample_info", "[", "'rpn_cls_label'", "]", "=", "rpn_cls_label", "\n", "sample_info", "[", "'rpn_reg_label'", "]", "=", "rpn_reg_label", "\n", "\n", "", "", "return", "sample_info", "\n", "\n"]], "home.repos.pwc.inspect_result.kemo-huang_jmodt.datasets.kitti_dataset.KittiDataset.generate_rpn_training_labels": [[304, 335], ["numpy.zeros", "numpy.zeros", "jmodt.utils.kitti_utils.boxes3d_to_corners3d", "jmodt.utils.kitti_utils.enlarge_box3d", "jmodt.utils.kitti_utils.boxes3d_to_corners3d", "range", "jmodt.utils.kitti_utils.in_hull", "jmodt.utils.kitti_utils.in_hull", "numpy.logical_xor", "[].copy"], "methods", ["home.repos.pwc.inspect_result.kemo-huang_jmodt.utils.kitti_utils.boxes3d_to_corners3d", "home.repos.pwc.inspect_result.kemo-huang_jmodt.utils.kitti_utils.enlarge_box3d", "home.repos.pwc.inspect_result.kemo-huang_jmodt.utils.kitti_utils.boxes3d_to_corners3d", "home.repos.pwc.inspect_result.kemo-huang_jmodt.utils.kitti_utils.in_hull", "home.repos.pwc.inspect_result.kemo-huang_jmodt.utils.kitti_utils.in_hull"], ["", "@", "staticmethod", "\n", "def", "generate_rpn_training_labels", "(", "pts_rect", ",", "gt_boxes3d", ")", ":", "\n", "        ", "cls_label", "=", "np", ".", "zeros", "(", "(", "pts_rect", ".", "shape", "[", "0", "]", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "reg_label", "=", "np", ".", "zeros", "(", "(", "pts_rect", ".", "shape", "[", "0", "]", ",", "7", ")", ",", "dtype", "=", "np", ".", "float32", ")", "# dx, dy, dz, ry, h, w, l", "\n", "gt_corners", "=", "kitti_utils", ".", "boxes3d_to_corners3d", "(", "gt_boxes3d", ",", "rotate", "=", "True", ")", "\n", "extend_gt_boxes3d", "=", "kitti_utils", ".", "enlarge_box3d", "(", "gt_boxes3d", ",", "extra_width", "=", "0.2", ")", "\n", "extend_gt_corners", "=", "kitti_utils", ".", "boxes3d_to_corners3d", "(", "extend_gt_boxes3d", ",", "rotate", "=", "True", ")", "\n", "for", "k", "in", "range", "(", "gt_boxes3d", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "box_corners", "=", "gt_corners", "[", "k", "]", "\n", "fg_pt_flag", "=", "kitti_utils", ".", "in_hull", "(", "pts_rect", ",", "box_corners", ")", "\n", "fg_pts_rect", "=", "pts_rect", "[", "fg_pt_flag", "]", "\n", "cls_label", "[", "fg_pt_flag", "]", "=", "1", "\n", "\n", "# enlarge the bbox3d, ignore nearby points", "\n", "extend_box_corners", "=", "extend_gt_corners", "[", "k", "]", "\n", "fg_enlarge_flag", "=", "kitti_utils", ".", "in_hull", "(", "pts_rect", ",", "extend_box_corners", ")", "\n", "ignore_flag", "=", "np", ".", "logical_xor", "(", "fg_pt_flag", ",", "fg_enlarge_flag", ")", "\n", "cls_label", "[", "ignore_flag", "]", "=", "-", "1", "\n", "\n", "# pixel offset of object center", "\n", "center3d", "=", "gt_boxes3d", "[", "k", "]", "[", "0", ":", "3", "]", ".", "copy", "(", ")", "# (x, y, z)", "\n", "center3d", "[", "1", "]", "-=", "gt_boxes3d", "[", "k", "]", "[", "3", "]", "/", "2", "\n", "reg_label", "[", "fg_pt_flag", ",", "0", ":", "3", "]", "=", "center3d", "-", "fg_pts_rect", "# Now y is the true center of 3d box", "\n", "\n", "# size and angle encoding", "\n", "reg_label", "[", "fg_pt_flag", ",", "3", "]", "=", "gt_boxes3d", "[", "k", "]", "[", "3", "]", "# h", "\n", "reg_label", "[", "fg_pt_flag", ",", "4", "]", "=", "gt_boxes3d", "[", "k", "]", "[", "4", "]", "# w", "\n", "reg_label", "[", "fg_pt_flag", ",", "5", "]", "=", "gt_boxes3d", "[", "k", "]", "[", "5", "]", "# l", "\n", "reg_label", "[", "fg_pt_flag", ",", "6", "]", "=", "gt_boxes3d", "[", "k", "]", "[", "6", "]", "# ry", "\n", "\n", "", "return", "cls_label", ",", "reg_label", "\n", "\n"]], "home.repos.pwc.inspect_result.kemo-huang_jmodt.datasets.kitti_dataset.KittiDataset.rotate_box3d_along_y": [[336, 348], ["numpy.arctan2", "numpy.arctan2", "jmodt.utils.kitti_utils.rotate_pc_along_y", "box3d.reshape", "numpy.sign", "numpy.sign"], "methods", ["home.repos.pwc.inspect_result.kemo-huang_jmodt.utils.kitti_utils.rotate_pc_along_y"], ["", "@", "staticmethod", "\n", "def", "rotate_box3d_along_y", "(", "box3d", ",", "rot_angle", ")", ":", "\n", "        ", "old_x", ",", "old_z", ",", "ry", "=", "box3d", "[", "0", "]", ",", "box3d", "[", "2", "]", ",", "box3d", "[", "6", "]", "\n", "old_beta", "=", "np", ".", "arctan2", "(", "old_z", ",", "old_x", ")", "\n", "alpha", "=", "-", "np", ".", "sign", "(", "old_beta", ")", "*", "np", ".", "pi", "/", "2", "+", "old_beta", "+", "ry", "\n", "\n", "box3d", "=", "kitti_utils", ".", "rotate_pc_along_y", "(", "box3d", ".", "reshape", "(", "1", ",", "7", ")", ",", "rot_angle", "=", "rot_angle", ")", "[", "0", "]", "\n", "new_x", ",", "new_z", "=", "box3d", "[", "0", "]", ",", "box3d", "[", "2", "]", "\n", "new_beta", "=", "np", ".", "arctan2", "(", "new_z", ",", "new_x", ")", "\n", "box3d", "[", "6", "]", "=", "np", ".", "sign", "(", "new_beta", ")", "*", "np", ".", "pi", "/", "2", "+", "alpha", "-", "new_beta", "\n", "\n", "return", "box3d", "\n", "\n"]], "home.repos.pwc.inspect_result.kemo-huang_jmodt.datasets.kitti_dataset.KittiDataset.data_augmentation": [[349, 384], ["numpy.random.rand", "numpy.random.uniform", "jmodt.utils.kitti_utils.rotate_pc_along_y", "jmodt.utils.kitti_utils.rotate_pc_along_y", "numpy.arctan2", "numpy.random.uniform", "numpy.sign", "numpy.sign"], "methods", ["home.repos.pwc.inspect_result.kemo-huang_jmodt.utils.kitti_utils.rotate_pc_along_y", "home.repos.pwc.inspect_result.kemo-huang_jmodt.utils.kitti_utils.rotate_pc_along_y"], ["", "@", "staticmethod", "\n", "def", "data_augmentation", "(", "aug_pts_rect", ",", "aug_gt_boxes3d", ",", "gt_alpha", ")", ":", "\n", "        ", "\"\"\"\n        :param aug_pts_rect: (N, 3)\n        :param aug_gt_boxes3d: (N, 7)\n        :param gt_alpha: (N)\n        :return:\n        \"\"\"", "\n", "aug_list", "=", "cfg", ".", "AUG_METHOD_LIST", "\n", "aug_enable", "=", "1", "-", "np", ".", "random", ".", "rand", "(", "3", ")", "\n", "if", "'rotation'", "in", "aug_list", "and", "aug_enable", "[", "0", "]", "<", "cfg", ".", "AUG_METHOD_PROB", "[", "0", "]", ":", "\n", "            ", "angle", "=", "np", ".", "random", ".", "uniform", "(", "-", "np", ".", "pi", "/", "cfg", ".", "AUG_ROT_RANGE", ",", "np", ".", "pi", "/", "cfg", ".", "AUG_ROT_RANGE", ")", "\n", "aug_pts_rect", "=", "kitti_utils", ".", "rotate_pc_along_y", "(", "aug_pts_rect", ",", "rot_angle", "=", "angle", ")", "\n", "# xyz change, hwl unchanged", "\n", "aug_gt_boxes3d", "=", "kitti_utils", ".", "rotate_pc_along_y", "(", "aug_gt_boxes3d", ",", "rot_angle", "=", "angle", ")", "\n", "\n", "# calculate the ry after rotation", "\n", "x", ",", "z", "=", "aug_gt_boxes3d", "[", ":", ",", "0", "]", ",", "aug_gt_boxes3d", "[", ":", ",", "2", "]", "\n", "beta", "=", "np", ".", "arctan2", "(", "z", ",", "x", ")", "\n", "new_ry", "=", "np", ".", "sign", "(", "beta", ")", "*", "np", ".", "pi", "/", "2", "+", "gt_alpha", "-", "beta", "\n", "aug_gt_boxes3d", "[", ":", ",", "6", "]", "=", "new_ry", "# TODO: not in [-np.pi / 2, np.pi / 2]", "\n", "\n", "", "if", "'scaling'", "in", "aug_list", "and", "aug_enable", "[", "1", "]", "<", "cfg", ".", "AUG_METHOD_PROB", "[", "1", "]", ":", "\n", "            ", "scale", "=", "np", ".", "random", ".", "uniform", "(", "0.95", ",", "1.05", ")", "\n", "aug_pts_rect", "=", "aug_pts_rect", "*", "scale", "\n", "aug_gt_boxes3d", "[", ":", ",", "0", ":", "6", "]", "=", "aug_gt_boxes3d", "[", ":", ",", "0", ":", "6", "]", "*", "scale", "\n", "\n", "", "if", "'flip'", "in", "aug_list", "and", "aug_enable", "[", "2", "]", "<", "cfg", ".", "AUG_METHOD_PROB", "[", "2", "]", ":", "\n", "# flip horizontal", "\n", "            ", "aug_pts_rect", "[", ":", ",", "0", "]", "=", "-", "aug_pts_rect", "[", ":", ",", "0", "]", "\n", "aug_gt_boxes3d", "[", ":", ",", "0", "]", "=", "-", "aug_gt_boxes3d", "[", ":", ",", "0", "]", "\n", "# flip orientation: ry > 0: pi - ry, ry < 0: -pi - ry", "\n", "aug_gt_boxes3d", "[", ":", ",", "6", "]", "=", "np", ".", "sign", "(", "aug_gt_boxes3d", "[", ":", ",", "6", "]", ")", "*", "np", ".", "pi", "-", "aug_gt_boxes3d", "[", ":", ",", "6", "]", "\n", "\n", "", "return", "aug_pts_rect", ",", "aug_gt_boxes3d", "\n", "\n"]], "home.repos.pwc.inspect_result.kemo-huang_jmodt.datasets.kitti_dataset.KittiDataset.collate_batch": [[385, 458], ["batch.__len__", "batch[].keys", "[].keys", "batch.__len__", "range", "numpy.zeros", "range", "isinstance", "range", "isinstance", "max", "isinstance", "max", "numpy.zeros", "range", "numpy.zeros", "range", "range", "numpy.concatenate", "range", "isinstance", "[].__len__", "numpy.concatenate", "numpy.array", "isinstance", "[].__len__", "[].__len__", "value_list.append", "value_list.append", "value_list.append", "value_list.append", "numpy.array", "isinstance", "range", "numpy.array", "numpy.array", "[].__len__", "range", "[].__len__", "[].__len__", "[].__len__", "[].__len__"], "methods", ["home.repos.pwc.inspect_result.kemo-huang_jmodt.datasets.kitti_dataset.KittiDataset.__len__", "home.repos.pwc.inspect_result.kemo-huang_jmodt.datasets.kitti_dataset.KittiDataset.__len__", "home.repos.pwc.inspect_result.kemo-huang_jmodt.datasets.kitti_dataset.KittiDataset.__len__", "home.repos.pwc.inspect_result.kemo-huang_jmodt.datasets.kitti_dataset.KittiDataset.__len__", "home.repos.pwc.inspect_result.kemo-huang_jmodt.datasets.kitti_dataset.KittiDataset.__len__", "home.repos.pwc.inspect_result.kemo-huang_jmodt.datasets.kitti_dataset.KittiDataset.__len__", "home.repos.pwc.inspect_result.kemo-huang_jmodt.datasets.kitti_dataset.KittiDataset.__len__", "home.repos.pwc.inspect_result.kemo-huang_jmodt.datasets.kitti_dataset.KittiDataset.__len__", "home.repos.pwc.inspect_result.kemo-huang_jmodt.datasets.kitti_dataset.KittiDataset.__len__", "home.repos.pwc.inspect_result.kemo-huang_jmodt.datasets.kitti_dataset.KittiDataset.__len__"], ["", "def", "collate_batch", "(", "self", ",", "batch", ")", ":", "\n", "        ", "if", "self", ".", "mode", "!=", "'TRAIN'", "and", "cfg", ".", "RCNN", ".", "ENABLED", "and", "not", "cfg", ".", "RPN", ".", "ENABLED", ":", "\n", "            ", "assert", "batch", ".", "__len__", "(", ")", "==", "1", "\n", "return", "batch", "[", "0", "]", "\n", "\n", "", "batch_size", "=", "batch", ".", "__len__", "(", ")", "\n", "ans_dict", "=", "{", "}", "\n", "\n", "if", "self", ".", "challenge", "==", "'detection'", "or", "self", ".", "mode", "!=", "'TRAIN'", ":", "\n", "            ", "for", "key", "in", "batch", "[", "0", "]", ".", "keys", "(", ")", ":", "\n", "                ", "if", "cfg", ".", "RPN", ".", "ENABLED", "and", "key", "==", "'gt_boxes3d'", "or", "(", "\n", "cfg", ".", "RCNN", ".", "ENABLED", "and", "cfg", ".", "RCNN", ".", "ROI_SAMPLE_JIT", "and", "key", "in", "[", "'gt_boxes3d'", ",", "'roi_boxes3d'", "]", ")", ":", "\n", "                    ", "max_gt", "=", "0", "\n", "for", "k", "in", "range", "(", "batch_size", ")", ":", "\n", "                        ", "max_gt", "=", "max", "(", "max_gt", ",", "batch", "[", "k", "]", "[", "key", "]", ".", "__len__", "(", ")", ")", "\n", "", "batch_gt_boxes3d", "=", "np", ".", "zeros", "(", "(", "batch_size", ",", "max_gt", ",", "7", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "for", "i", "in", "range", "(", "batch_size", ")", ":", "\n", "                        ", "batch_gt_boxes3d", "[", "i", ",", ":", "batch", "[", "i", "]", "[", "key", "]", ".", "__len__", "(", ")", ",", ":", "]", "=", "batch", "[", "i", "]", "[", "key", "]", "\n", "", "ans_dict", "[", "key", "]", "=", "batch_gt_boxes3d", "\n", "\n", "", "elif", "isinstance", "(", "batch", "[", "0", "]", "[", "key", "]", ",", "np", ".", "ndarray", ")", ":", "\n", "                    ", "if", "batch_size", "==", "1", ":", "\n", "                        ", "ans_dict", "[", "key", "]", "=", "batch", "[", "0", "]", "[", "key", "]", "[", "np", ".", "newaxis", ",", "...", "]", "\n", "", "else", ":", "\n", "                        ", "ans_dict", "[", "key", "]", "=", "np", ".", "concatenate", "(", "[", "batch", "[", "k", "]", "[", "key", "]", "[", "np", ".", "newaxis", ",", "...", "]", "for", "k", "in", "range", "(", "batch_size", ")", "]", ",", "\n", "axis", "=", "0", ")", "\n", "\n", "", "", "else", ":", "\n", "                    ", "ans_dict", "[", "key", "]", "=", "[", "batch", "[", "k", "]", "[", "key", "]", "for", "k", "in", "range", "(", "batch_size", ")", "]", "\n", "if", "isinstance", "(", "batch", "[", "0", "]", "[", "key", "]", ",", "int", ")", ":", "\n", "                        ", "ans_dict", "[", "key", "]", "=", "np", ".", "array", "(", "ans_dict", "[", "key", "]", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "", "elif", "isinstance", "(", "batch", "[", "0", "]", "[", "key", "]", ",", "float", ")", ":", "\n", "                        ", "ans_dict", "[", "key", "]", "=", "np", ".", "array", "(", "ans_dict", "[", "key", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "", "", "", "", "else", ":", "\n", "            ", "for", "key", "in", "batch", "[", "0", "]", "[", "0", "]", ".", "keys", "(", ")", ":", "\n", "                ", "if", "cfg", ".", "RPN", ".", "ENABLED", "and", "key", "==", "'gt_boxes3d'", "or", "(", "\n", "cfg", ".", "RCNN", ".", "ENABLED", "and", "cfg", ".", "RCNN", ".", "ROI_SAMPLE_JIT", "and", "key", "in", "[", "'gt_boxes3d'", ",", "'roi_boxes3d'", ",", "\n", "'gt_tids'", "]", ")", ":", "\n", "                    ", "max_gt", "=", "0", "\n", "for", "k", "in", "range", "(", "batch_size", ")", ":", "\n", "                        ", "max_gt", "=", "max", "(", "max_gt", ",", "batch", "[", "k", "]", "[", "0", "]", "[", "key", "]", ".", "__len__", "(", ")", ",", "batch", "[", "k", "]", "[", "1", "]", "[", "key", "]", ".", "__len__", "(", ")", ")", "\n", "", "if", "key", "==", "'gt_tids'", ":", "\n", "                        ", "batch_gt_tids", "=", "np", ".", "zeros", "(", "(", "batch_size", "*", "2", ",", "max_gt", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "for", "i", "in", "range", "(", "batch_size", ")", ":", "\n", "                            ", "batch_gt_tids", "[", "2", "*", "i", ",", ":", "batch", "[", "i", "]", "[", "0", "]", "[", "key", "]", ".", "__len__", "(", ")", "]", "=", "batch", "[", "i", "]", "[", "0", "]", "[", "key", "]", "\n", "batch_gt_tids", "[", "2", "*", "i", "+", "1", ",", ":", "batch", "[", "i", "]", "[", "1", "]", "[", "key", "]", ".", "__len__", "(", ")", "]", "=", "batch", "[", "i", "]", "[", "1", "]", "[", "key", "]", "\n", "", "ans_dict", "[", "key", "]", "=", "batch_gt_tids", "\n", "", "else", ":", "\n", "                        ", "batch_gt_boxes3d", "=", "np", ".", "zeros", "(", "(", "batch_size", "*", "2", ",", "max_gt", ",", "7", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "for", "i", "in", "range", "(", "batch_size", ")", ":", "\n", "                            ", "batch_gt_boxes3d", "[", "2", "*", "i", ",", ":", "batch", "[", "i", "]", "[", "0", "]", "[", "key", "]", ".", "__len__", "(", ")", ",", ":", "]", "=", "batch", "[", "i", "]", "[", "0", "]", "[", "key", "]", "\n", "batch_gt_boxes3d", "[", "2", "*", "i", "+", "1", ",", ":", "batch", "[", "i", "]", "[", "1", "]", "[", "key", "]", ".", "__len__", "(", ")", ",", ":", "]", "=", "batch", "[", "i", "]", "[", "1", "]", "[", "key", "]", "\n", "", "ans_dict", "[", "key", "]", "=", "batch_gt_boxes3d", "\n", "\n", "", "", "elif", "isinstance", "(", "batch", "[", "0", "]", "[", "0", "]", "[", "key", "]", ",", "np", ".", "ndarray", ")", ":", "\n", "                    ", "value_list", "=", "[", "]", "\n", "for", "k", "in", "range", "(", "batch_size", ")", ":", "\n", "                        ", "value_list", ".", "append", "(", "batch", "[", "k", "]", "[", "0", "]", "[", "key", "]", "[", "np", ".", "newaxis", ",", "...", "]", ")", "\n", "value_list", ".", "append", "(", "batch", "[", "k", "]", "[", "1", "]", "[", "key", "]", "[", "np", ".", "newaxis", ",", "...", "]", ")", "\n", "", "ans_dict", "[", "key", "]", "=", "np", ".", "concatenate", "(", "value_list", ")", "\n", "\n", "", "else", ":", "\n", "                    ", "value_list", "=", "[", "]", "\n", "for", "k", "in", "range", "(", "batch_size", ")", ":", "\n", "                        ", "value_list", ".", "append", "(", "batch", "[", "k", "]", "[", "0", "]", "[", "key", "]", ")", "\n", "value_list", ".", "append", "(", "batch", "[", "k", "]", "[", "1", "]", "[", "key", "]", ")", "\n", "", "if", "isinstance", "(", "batch", "[", "0", "]", "[", "0", "]", "[", "key", "]", ",", "int", ")", ":", "\n", "                        ", "ans_dict", "[", "key", "]", "=", "np", ".", "array", "(", "value_list", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "", "elif", "isinstance", "(", "batch", "[", "0", "]", "[", "0", "]", "[", "key", "]", ",", "float", ")", ":", "\n", "                        ", "ans_dict", "[", "key", "]", "=", "np", ".", "array", "(", "value_list", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "", "", "", "", "return", "ans_dict", "\n", "", "", ""]], "home.repos.pwc.inspect_result.kemo-huang_jmodt.modeling.rcnn.RCNN.__init__": [[13, 115], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "range", "cls_layers.append", "torch.Sequential", "torch.Sequential", "torch.Sequential", "range", "reg_layers.append", "torch.Sequential", "torch.Sequential", "torch.Sequential", "range", "link_layers.append", "torch.Sequential", "torch.Sequential", "torch.Sequential", "range", "se_layers.append", "torch.Sequential", "torch.Sequential", "torch.Sequential", "jmodt.detection.layers.proposal_target_layer.ProposalTargetLayer", "rcnn.RCNN.init_weights", "jmodt.SharedMLP", "jmodt.SharedMLP", "jmodt.config.cfg.RCNN.SA_CONFIG.NPOINTS.__len__", "rcnn.RCNN.SA_modules.append", "jmodt.config.cfg.RCNN.CLS_FC.__len__", "cls_layers.append", "jmodt.Conv1d", "cls_layers.insert", "jmodt.utils.loss_utils.SigmoidFocalClassificationLoss", "iou_branch.append", "iou_branch.append", "iou_branch.append", "torch.Sequential", "torch.Sequential", "torch.Sequential", "int", "int", "jmodt.config.cfg.RCNN.REG_FC.__len__", "reg_layers.append", "jmodt.Conv1d", "reg_layers.insert", "jmodt.config.cfg.REID.LINK_FC.__len__", "link_layers.append", "jmodt.Conv1d", "link_layers.insert", "jmodt.config.cfg.REID.SE_FC.__len__", "se_layers.append", "jmodt.Conv1d", "se_layers.insert", "int", "jmodt.ops.pointnet2.pointnet2_modules.PointnetSAModule", "jmodt.Conv1d", "torch.Dropout", "torch.Dropout", "torch.Dropout", "jmodt.Conv1d", "jmodt.Conv1d", "jmodt.Conv1d", "iou_branch.insert", "jmodt.Conv1d", "torch.Dropout", "torch.Dropout", "torch.Dropout", "jmodt.Conv1d", "torch.Dropout", "torch.Dropout", "torch.Dropout", "jmodt.Conv1d", "torch.Dropout", "torch.Dropout", "torch.Dropout", "int", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.Dropout", "torch.Dropout", "torch.Dropout", "int", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "methods", ["home.repos.pwc.inspect_result.kemo-huang_jmodt.pointnet2.pytorch_utils.FC.__init__", "home.repos.pwc.inspect_result.kemo-huang_jmodt.modeling.rpn.RPN.init_weights", "home.repos.pwc.inspect_result.kemo-huang_jmodt.datasets.kitti_dataset.KittiDataset.__len__", "home.repos.pwc.inspect_result.kemo-huang_jmodt.datasets.kitti_dataset.KittiDataset.__len__", "home.repos.pwc.inspect_result.kemo-huang_jmodt.datasets.kitti_dataset.KittiDataset.__len__", "home.repos.pwc.inspect_result.kemo-huang_jmodt.datasets.kitti_dataset.KittiDataset.__len__", "home.repos.pwc.inspect_result.kemo-huang_jmodt.datasets.kitti_dataset.KittiDataset.__len__"], ["    ", "def", "__init__", "(", "self", ",", "num_classes", ",", "input_channels", "=", "0", ",", "use_xyz", "=", "True", ",", "mode", "=", "'TRAIN'", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "mode", "=", "mode", "\n", "\n", "self", ".", "SA_modules", "=", "nn", ".", "ModuleList", "(", ")", "\n", "channel_in", "=", "input_channels", "\n", "\n", "if", "cfg", ".", "RCNN", ".", "USE_RPN_FEATURES", ":", "\n", "            ", "self", ".", "rcnn_input_channel", "=", "3", "+", "int", "(", "cfg", ".", "RCNN", ".", "USE_INTENSITY", ")", "+", "int", "(", "cfg", ".", "RCNN", ".", "USE_MASK", ")", "+", "int", "(", "cfg", ".", "RCNN", ".", "USE_DEPTH", ")", "\n", "self", ".", "xyz_up_layer", "=", "pt_utils", ".", "SharedMLP", "(", "[", "self", ".", "rcnn_input_channel", "]", "+", "cfg", ".", "RCNN", ".", "XYZ_UP_LAYER", ",", "\n", "bn", "=", "cfg", ".", "RCNN", ".", "USE_BN", ")", "\n", "c_out", "=", "cfg", ".", "RCNN", ".", "XYZ_UP_LAYER", "[", "-", "1", "]", "\n", "self", ".", "merge_down_layer", "=", "pt_utils", ".", "SharedMLP", "(", "[", "c_out", "*", "2", ",", "c_out", "]", ",", "bn", "=", "cfg", ".", "RCNN", ".", "USE_BN", ")", "\n", "\n", "", "for", "k", "in", "range", "(", "cfg", ".", "RCNN", ".", "SA_CONFIG", ".", "NPOINTS", ".", "__len__", "(", ")", ")", ":", "\n", "            ", "mlps", "=", "[", "channel_in", "]", "+", "cfg", ".", "RCNN", ".", "SA_CONFIG", ".", "MLPS", "[", "k", "]", "\n", "\n", "npoint", "=", "cfg", ".", "RCNN", ".", "SA_CONFIG", ".", "NPOINTS", "[", "k", "]", "if", "cfg", ".", "RCNN", ".", "SA_CONFIG", ".", "NPOINTS", "[", "k", "]", "!=", "-", "1", "else", "None", "\n", "self", ".", "SA_modules", ".", "append", "(", "\n", "PointnetSAModule", "(", "\n", "npoint", "=", "npoint", ",", "\n", "radius", "=", "cfg", ".", "RCNN", ".", "SA_CONFIG", ".", "RADIUS", "[", "k", "]", ",", "\n", "nsample", "=", "cfg", ".", "RCNN", ".", "SA_CONFIG", ".", "NSAMPLE", "[", "k", "]", ",", "\n", "mlp", "=", "mlps", ",", "\n", "use_xyz", "=", "use_xyz", ",", "\n", "bn", "=", "cfg", ".", "RCNN", ".", "USE_BN", "\n", ")", "\n", ")", "\n", "channel_in", "=", "mlps", "[", "-", "1", "]", "\n", "\n", "# classification layer", "\n", "", "cls_channel", "=", "1", "if", "num_classes", "==", "2", "else", "num_classes", "\n", "cls_layers", "=", "[", "]", "\n", "pre_channel", "=", "channel_in", "\n", "for", "k", "in", "range", "(", "0", ",", "cfg", ".", "RCNN", ".", "CLS_FC", ".", "__len__", "(", ")", ")", ":", "\n", "            ", "cls_layers", ".", "append", "(", "pt_utils", ".", "Conv1d", "(", "pre_channel", ",", "cfg", ".", "RCNN", ".", "CLS_FC", "[", "k", "]", ",", "bn", "=", "cfg", ".", "RCNN", ".", "USE_BN", ")", ")", "\n", "pre_channel", "=", "cfg", ".", "RCNN", ".", "CLS_FC", "[", "k", "]", "\n", "", "cls_layers", ".", "append", "(", "pt_utils", ".", "Conv1d", "(", "pre_channel", ",", "cls_channel", ",", "activation", "=", "None", ")", ")", "\n", "if", "cfg", ".", "RCNN", ".", "DP_RATIO", ">=", "0", ":", "\n", "            ", "cls_layers", ".", "insert", "(", "1", ",", "nn", ".", "Dropout", "(", "cfg", ".", "RCNN", ".", "DP_RATIO", ")", ")", "\n", "", "self", ".", "cls_layer", "=", "nn", ".", "Sequential", "(", "*", "cls_layers", ")", "\n", "\n", "if", "cfg", ".", "RCNN", ".", "LOSS_CLS", "==", "'SigmoidFocalLoss'", ":", "\n", "            ", "self", ".", "cls_loss_func", "=", "loss_utils", ".", "SigmoidFocalClassificationLoss", "(", "alpha", "=", "cfg", ".", "RCNN", ".", "FOCAL_ALPHA", "[", "0", "]", ",", "\n", "gamma", "=", "cfg", ".", "RCNN", ".", "FOCAL_GAMMA", ")", "\n", "", "elif", "cfg", ".", "RCNN", ".", "LOSS_CLS", "==", "'BinaryCrossEntropy'", ":", "\n", "            ", "self", ".", "cls_loss_func", "=", "F", ".", "binary_cross_entropy", "\n", "", "elif", "cfg", ".", "RCNN", ".", "LOSS_CLS", "==", "'CrossEntropy'", ":", "\n", "            ", "cls_weight", "=", "torch", ".", "from_numpy", "(", "cfg", ".", "RCNN", ".", "CLS_WEIGHT", ")", ".", "float", "(", ")", "\n", "self", ".", "cls_loss_func", "=", "nn", ".", "CrossEntropyLoss", "(", "ignore_index", "=", "-", "1", ",", "reduce", "=", "False", ",", "weight", "=", "cls_weight", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "", "if", "cfg", ".", "USE_IOU_BRANCH", ":", "\n", "            ", "iou_branch", "=", "[", "]", "\n", "iou_branch", ".", "append", "(", "pt_utils", ".", "Conv1d", "(", "channel_in", ",", "cfg", ".", "RCNN", ".", "REG_FC", "[", "0", "]", ",", "bn", "=", "cfg", ".", "RCNN", ".", "USE_BN", ")", ")", "\n", "iou_branch", ".", "append", "(", "pt_utils", ".", "Conv1d", "(", "cfg", ".", "RCNN", ".", "REG_FC", "[", "0", "]", ",", "cfg", ".", "RCNN", ".", "REG_FC", "[", "1", "]", ",", "bn", "=", "cfg", ".", "RCNN", ".", "USE_BN", ")", ")", "\n", "iou_branch", ".", "append", "(", "pt_utils", ".", "Conv1d", "(", "cfg", ".", "RCNN", ".", "REG_FC", "[", "1", "]", ",", "1", ",", "activation", "=", "None", ")", ")", "\n", "if", "cfg", ".", "RCNN", ".", "DP_RATIO", ">=", "0", ":", "\n", "                ", "iou_branch", ".", "insert", "(", "1", ",", "nn", ".", "Dropout", "(", "cfg", ".", "RCNN", ".", "DP_RATIO", ")", ")", "\n", "", "self", ".", "iou_branch", "=", "nn", ".", "Sequential", "(", "*", "iou_branch", ")", "\n", "\n", "# regression layer", "\n", "", "per_loc_bin_num", "=", "int", "(", "cfg", ".", "RCNN", ".", "LOC_SCOPE", "/", "cfg", ".", "RCNN", ".", "LOC_BIN_SIZE", ")", "*", "2", "\n", "loc_y_bin_num", "=", "int", "(", "cfg", ".", "RCNN", ".", "LOC_Y_SCOPE", "/", "cfg", ".", "RCNN", ".", "LOC_Y_BIN_SIZE", ")", "*", "2", "\n", "reg_channel", "=", "per_loc_bin_num", "*", "4", "+", "cfg", ".", "RCNN", ".", "NUM_HEAD_BIN", "*", "2", "+", "3", "\n", "reg_channel", "+=", "(", "1", "if", "not", "cfg", ".", "RCNN", ".", "LOC_Y_BY_BIN", "else", "loc_y_bin_num", "*", "2", ")", "\n", "\n", "reg_layers", "=", "[", "]", "\n", "pre_channel", "=", "channel_in", "\n", "for", "k", "in", "range", "(", "0", ",", "cfg", ".", "RCNN", ".", "REG_FC", ".", "__len__", "(", ")", ")", ":", "\n", "            ", "reg_layers", ".", "append", "(", "pt_utils", ".", "Conv1d", "(", "pre_channel", ",", "cfg", ".", "RCNN", ".", "REG_FC", "[", "k", "]", ",", "bn", "=", "cfg", ".", "RCNN", ".", "USE_BN", ")", ")", "\n", "pre_channel", "=", "cfg", ".", "RCNN", ".", "REG_FC", "[", "k", "]", "\n", "", "reg_layers", ".", "append", "(", "pt_utils", ".", "Conv1d", "(", "pre_channel", ",", "reg_channel", ",", "activation", "=", "None", ")", ")", "\n", "if", "cfg", ".", "RCNN", ".", "DP_RATIO", ">=", "0", ":", "\n", "            ", "reg_layers", ".", "insert", "(", "1", ",", "nn", ".", "Dropout", "(", "cfg", ".", "RCNN", ".", "DP_RATIO", ")", ")", "\n", "", "self", ".", "reg_layer", "=", "nn", ".", "Sequential", "(", "*", "reg_layers", ")", "\n", "\n", "# link layer", "\n", "link_layers", "=", "[", "]", "\n", "pre_channel", "=", "channel_in", "\n", "for", "k", "in", "range", "(", "0", ",", "cfg", ".", "REID", ".", "LINK_FC", ".", "__len__", "(", ")", ")", ":", "\n", "            ", "link_layers", ".", "append", "(", "pt_utils", ".", "Conv1d", "(", "pre_channel", ",", "cfg", ".", "REID", ".", "LINK_FC", "[", "k", "]", ",", "bn", "=", "cfg", ".", "REID", ".", "USE_BN", ")", ")", "\n", "pre_channel", "=", "cfg", ".", "REID", ".", "LINK_FC", "[", "k", "]", "\n", "", "link_layers", ".", "append", "(", "pt_utils", ".", "Conv1d", "(", "pre_channel", ",", "1", ",", "activation", "=", "None", ")", ")", "\n", "if", "cfg", ".", "REID", ".", "DP_RATIO", ">=", "0", ":", "\n", "            ", "link_layers", ".", "insert", "(", "1", ",", "nn", ".", "Dropout", "(", "cfg", ".", "RCNN", ".", "DP_RATIO", ")", ")", "\n", "", "self", ".", "link_layer", "=", "nn", ".", "Sequential", "(", "*", "link_layers", ")", "\n", "\n", "# start-end layer", "\n", "se_layers", "=", "[", "]", "\n", "pre_channel", "=", "channel_in", "\n", "for", "k", "in", "range", "(", "0", ",", "cfg", ".", "REID", ".", "SE_FC", ".", "__len__", "(", ")", ")", ":", "\n", "            ", "se_layers", ".", "append", "(", "pt_utils", ".", "Conv1d", "(", "pre_channel", ",", "cfg", ".", "REID", ".", "SE_FC", "[", "k", "]", ",", "bn", "=", "cfg", ".", "REID", ".", "USE_BN", ")", ")", "\n", "pre_channel", "=", "cfg", ".", "REID", ".", "SE_FC", "[", "k", "]", "\n", "", "se_layers", ".", "append", "(", "pt_utils", ".", "Conv1d", "(", "pre_channel", ",", "1", ",", "activation", "=", "None", ")", ")", "\n", "if", "cfg", ".", "REID", ".", "DP_RATIO", ">=", "0", ":", "\n", "            ", "se_layers", ".", "insert", "(", "1", ",", "nn", ".", "Dropout", "(", "cfg", ".", "RCNN", ".", "DP_RATIO", ")", ")", "\n", "", "self", ".", "se_layer", "=", "nn", ".", "Sequential", "(", "*", "se_layers", ")", "\n", "\n", "self", ".", "proposal_target_layer", "=", "ProposalTargetLayer", "(", "mode", "=", "self", ".", "mode", ")", "\n", "self", ".", "init_weights", "(", "weight_init", "=", "'xavier'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kemo-huang_jmodt.modeling.rcnn.RCNN.init_weights": [[116, 135], ["rcnn.RCNN.modules", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "isinstance", "isinstance", "init_func", "init_func", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["None"], ["", "def", "init_weights", "(", "self", ",", "weight_init", "=", "'xavier'", ")", ":", "\n", "        ", "if", "weight_init", "==", "'kaiming'", ":", "\n", "            ", "init_func", "=", "nn", ".", "init", ".", "kaiming_normal_", "\n", "", "elif", "weight_init", "==", "'xavier'", ":", "\n", "            ", "init_func", "=", "nn", ".", "init", ".", "xavier_normal_", "\n", "", "elif", "weight_init", "==", "'normal'", ":", "\n", "            ", "init_func", "=", "nn", ".", "init", ".", "normal_", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", "or", "isinstance", "(", "m", ",", "nn", ".", "Conv1d", ")", ":", "\n", "                ", "if", "weight_init", "==", "'normal'", ":", "\n", "                    ", "init_func", "(", "m", ".", "weight", ",", "mean", "=", "0", ",", "std", "=", "0.001", ")", "\n", "", "else", ":", "\n", "                    ", "init_func", "(", "m", ".", "weight", ")", "\n", "", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "", "", "nn", ".", "init", ".", "normal_", "(", "self", ".", "reg_layer", "[", "-", "1", "]", ".", "conv", ".", "weight", ",", "mean", "=", "0", ",", "std", "=", "0.001", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kemo-huang_jmodt.modeling.rcnn.RCNN._break_up_pc": [[136, 144], ["pc[].contiguous", "pc[].transpose().contiguous", "pc.size", "pc[].transpose"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_break_up_pc", "(", "pc", ")", ":", "\n", "        ", "xyz", "=", "pc", "[", "...", ",", "0", ":", "3", "]", ".", "contiguous", "(", ")", "\n", "features", "=", "(", "\n", "pc", "[", "...", ",", "3", ":", "]", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "if", "pc", ".", "size", "(", "-", "1", ")", ">", "3", "else", "None", "\n", ")", "\n", "return", "xyz", ",", "features", "\n", "\n"]], "home.repos.pwc.inspect_result.kemo-huang_jmodt.modeling.rcnn.RCNN.get_unique_tid_feature": [[145, 157], ["torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "prev_fg_tid.new_zeros", "torch.normalize", "torch.normalize", "torch.normalize", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.unique", "torch.unique", "torch.unique", "torch.unique", "torch.unique", "torch.unique", "torch.unique", "torch.unique", "torch.unique", "len", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "len"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "get_unique_tid_feature", "(", "prev_fg_tid", ":", "torch", ".", "Tensor", ",", "prev_fg_feat", ":", "torch", ".", "Tensor", ")", ":", "\n", "        ", "prev_tid_diff", "=", "torch", ".", "min", "(", "prev_fg_tid", ")", "\n", "prev_fg_tid_clip", "=", "(", "prev_fg_tid", "-", "prev_tid_diff", ")", ".", "long", "(", ")", "\n", "m", "=", "prev_fg_tid", ".", "new_zeros", "(", "torch", ".", "max", "(", "prev_fg_tid_clip", ")", "+", "1", ",", "len", "(", "prev_fg_tid", ")", ")", "\n", "m", "[", "prev_fg_tid_clip", ",", "torch", ".", "arange", "(", "len", "(", "prev_fg_tid", ")", ")", "]", "=", "1", "\n", "m", "=", "F", ".", "normalize", "(", "m", ",", "p", "=", "1", ",", "dim", "=", "1", ")", "\n", "prev_tid_feat_mean", "=", "torch", ".", "mm", "(", "m", ",", "prev_fg_feat", ")", "\n", "prev_fg_tid_clip_unique", "=", "torch", ".", "unique", "(", "prev_fg_tid_clip", ")", "\n", "prev_unique_feat", "=", "prev_tid_feat_mean", "[", "prev_fg_tid_clip_unique", "]", "\n", "prev_fg_tid_unique", "=", "prev_fg_tid_clip_unique", "+", "prev_tid_diff", "\n", "return", "prev_fg_tid_unique", ",", "prev_unique_feat", "\n", "\n"]], "home.repos.pwc.inspect_result.kemo-huang_jmodt.modeling.rcnn.RCNN.forward": [[158, 291], ["rcnn.RCNN._break_up_pc", "range", "rcnn.RCNN.cls_layer().squeeze", "rcnn.RCNN.reg_layer().squeeze", "pts_input[].transpose().contiguous().unsqueeze", "rcnn.RCNN.xyz_up_layer", "pts_input[].transpose().contiguous().unsqueeze", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "rcnn.RCNN.merge_down_layer", "len", "l_xyz.append", "l_features.append", "rcnn.RCNN.iou_branch().squeeze", "ret_dict.update", "input_features.view.view.view", "range", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "rcnn.RCNN.proposal_target_layer", "rcnn.RCNN.cls_layer", "rcnn.RCNN.reg_layer", "len", "len", "len", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "gt_tids.new", "gt_tids.new", "len", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat().unsqueeze", "torch.cat().unsqueeze", "torch.cat().unsqueeze", "torch.cat().unsqueeze", "torch.cat().unsqueeze", "torch.cat().unsqueeze", "torch.cat().unsqueeze", "torch.cat().unsqueeze", "torch.cat().unsqueeze", "rcnn.RCNN.se_layer().squeeze", "gt_tids.new", "gt_tids.new", "len", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat().unsqueeze", "torch.cat().unsqueeze", "torch.cat().unsqueeze", "torch.cat().unsqueeze", "torch.cat().unsqueeze", "torch.cat().unsqueeze", "torch.cat().unsqueeze", "torch.cat().unsqueeze", "torch.cat().unsqueeze", "rcnn.RCNN.se_layer().squeeze", "gt_tids.new", "gt_tids.new", "pts_input[].transpose().contiguous", "pts_input[].transpose().contiguous", "rcnn.RCNN.squeeze", "rcnn.RCNN.iou_branch", "range", "range", "range", "range", "rcnn.RCNN.get_unique_tid_feature", "rcnn.RCNN.get_unique_tid_feature", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs.view", "torch.abs.view", "torch.abs.view", "rcnn.RCNN.link_layer().view", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.abs.mean", "torch.abs.mean", "torch.abs.mean", "torch.abs.mean", "torch.abs.mean", "torch.abs.mean", "torch.cat().unsqueeze.append", "torch.cat().unsqueeze.append", "torch.cat().unsqueeze.append", "torch.cat().unsqueeze.append", "torch.cat().unsqueeze.append", "torch.cat().unsqueeze.append", "unique_link.view", "len", "len", "rcnn.RCNN.view", "unique_link.sum", "unique_link.sum", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "rcnn.RCNN.se_layer", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "rcnn.RCNN.se_layer", "pts_input[].transpose", "pts_input[].transpose", "prev_feat_unique.unsqueeze().repeat", "next_feat_unique.unsqueeze().repeat", "len", "len", "rcnn.RCNN.link_layer", "prev_tid_unique.unsqueeze", "len", "len", "len", "len", "prev_feat_unique.unsqueeze", "next_feat_unique.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.kemo-huang_jmodt.modeling.backbone.PointNet2MSG._break_up_pc", "home.repos.pwc.inspect_result.kemo-huang_jmodt.tracking.kalman.KalmanPSR.update", "home.repos.pwc.inspect_result.kemo-huang_jmodt.modeling.rcnn.RCNN.get_unique_tid_feature", "home.repos.pwc.inspect_result.kemo-huang_jmodt.modeling.rcnn.RCNN.get_unique_tid_feature"], ["", "def", "forward", "(", "self", ",", "input_data", ")", ":", "\n", "        ", "\"\"\"\n        :param input_data: input dict\n        :return:\n        \"\"\"", "\n", "if", "cfg", ".", "RCNN", ".", "ROI_SAMPLE_JIT", ":", "\n", "            ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "pts_input", ",", "target_dict", "=", "self", ".", "proposal_target_layer", "(", "input_data", ")", "# generate labels", "\n", "", "", "else", ":", "\n", "            ", "pts_input", "=", "input_data", "[", "'pts_input'", "]", "\n", "target_dict", "=", "{", "}", "\n", "target_dict", "[", "'pts_input'", "]", "=", "input_data", "[", "'pts_input'", "]", "\n", "target_dict", "[", "'roi_boxes3d'", "]", "=", "input_data", "[", "'roi_boxes3d'", "]", "\n", "if", "self", ".", "training", ":", "\n", "                ", "target_dict", "[", "'cls_label'", "]", "=", "input_data", "[", "'cls_label'", "]", "\n", "target_dict", "[", "'reg_valid_mask'", "]", "=", "input_data", "[", "'reg_valid_mask'", "]", "\n", "target_dict", "[", "'gt_of_rois'", "]", "=", "input_data", "[", "'gt_boxes3d'", "]", "\n", "\n", "", "", "xyz", ",", "features", "=", "self", ".", "_break_up_pc", "(", "pts_input", ")", "\n", "\n", "if", "cfg", ".", "RCNN", ".", "USE_RPN_FEATURES", ":", "\n", "            ", "xyz_input", "=", "pts_input", "[", "...", ",", "0", ":", "self", ".", "rcnn_input_channel", "]", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", ".", "unsqueeze", "(", "dim", "=", "3", ")", "\n", "xyz_feature", "=", "self", ".", "xyz_up_layer", "(", "xyz_input", ")", "\n", "\n", "rpn_feature", "=", "pts_input", "[", "...", ",", "self", ".", "rcnn_input_channel", ":", "]", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", ".", "unsqueeze", "(", "dim", "=", "3", ")", "\n", "\n", "merged_feature", "=", "torch", ".", "cat", "(", "(", "xyz_feature", ",", "rpn_feature", ")", ",", "dim", "=", "1", ")", "\n", "merged_feature", "=", "self", ".", "merge_down_layer", "(", "merged_feature", ")", "\n", "l_xyz", ",", "l_features", "=", "[", "xyz", "]", ",", "[", "merged_feature", ".", "squeeze", "(", "dim", "=", "3", ")", "]", "\n", "", "else", ":", "\n", "            ", "l_xyz", ",", "l_features", "=", "[", "xyz", "]", ",", "[", "features", "]", "\n", "\n", "", "for", "i", "in", "range", "(", "len", "(", "self", ".", "SA_modules", ")", ")", ":", "\n", "            ", "li_xyz", ",", "li_features", ",", "_", "=", "self", ".", "SA_modules", "[", "i", "]", "(", "l_xyz", "[", "i", "]", ",", "l_features", "[", "i", "]", ")", "\n", "l_xyz", ".", "append", "(", "li_xyz", ")", "\n", "l_features", ".", "append", "(", "li_features", ")", "\n", "\n", "", "rcnn_cls", "=", "self", ".", "cls_layer", "(", "l_features", "[", "-", "1", "]", ")", ".", "squeeze", "(", "-", "1", ")", "# (B, 1)", "\n", "rcnn_reg", "=", "self", ".", "reg_layer", "(", "l_features", "[", "-", "1", "]", ")", ".", "squeeze", "(", "-", "1", ")", "# (B, C)", "\n", "\n", "if", "cfg", ".", "USE_IOU_BRANCH", ":", "\n", "            ", "rcnn_iou_branch", "=", "self", ".", "iou_branch", "(", "l_features", "[", "-", "1", "]", ")", ".", "squeeze", "(", "-", "1", ")", "# (B,1)", "\n", "ret_dict", "=", "{", "'rcnn_cls'", ":", "rcnn_cls", ",", "'rcnn_reg'", ":", "rcnn_reg", ",", "'rcnn_iou_branch'", ":", "rcnn_iou_branch", "}", "\n", "", "else", ":", "\n", "            ", "ret_dict", "=", "{", "'rcnn_cls'", ":", "rcnn_cls", ",", "'rcnn_reg'", ":", "rcnn_reg", "}", "\n", "\n", "", "if", "self", ".", "mode", "==", "'TRAIN'", ":", "\n", "            ", "ret_dict", ".", "update", "(", "target_dict", ")", "\n", "# reid", "\n", "gt_tids", "=", "target_dict", "[", "'gt_tids'", "]", "\n", "num_frames", "=", "gt_tids", ".", "shape", "[", "0", "]", "\n", "# assert num_frames == 2, str(num_frames)", "\n", "input_features", "=", "l_features", "[", "-", "1", "]", "\n", "# split rois into prev and next", "\n", "prev_tids", "=", "gt_tids", "[", "range", "(", "0", ",", "num_frames", ",", "2", ")", "]", "\n", "next_tids", "=", "gt_tids", "[", "range", "(", "1", ",", "num_frames", ",", "2", ")", "]", "\n", "feat_len", "=", "input_features", ".", "shape", "[", "-", "2", "]", "\n", "input_features", "=", "input_features", ".", "view", "(", "num_frames", ",", "-", "1", ",", "feat_len", ")", "\n", "prev_features", "=", "input_features", "[", "range", "(", "0", ",", "num_frames", ",", "2", ")", "]", "\n", "next_features", "=", "input_features", "[", "range", "(", "1", ",", "num_frames", ",", "2", ")", "]", "\n", "prev_fg_mask", "=", "prev_tids", ">", "0", "\n", "next_fg_mask", "=", "next_tids", ">", "0", "\n", "rcnn_link", "=", "[", "]", "\n", "start_features", "=", "[", "]", "\n", "end_features", "=", "[", "]", "\n", "gt_links", "=", "[", "]", "\n", "gt_starts", "=", "[", "]", "\n", "gt_ends", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_frames", "//", "2", ")", ":", "\n", "                ", "prev_fg_tid", "=", "prev_tids", "[", "i", "]", "[", "prev_fg_mask", "[", "i", "]", "]", "\n", "next_fg_tid", "=", "next_tids", "[", "i", "]", "[", "next_fg_mask", "[", "i", "]", "]", "\n", "prev_fg_feat", "=", "prev_features", "[", "i", "]", "[", "prev_fg_mask", "[", "i", "]", "]", "\n", "next_fg_feat", "=", "next_features", "[", "i", "]", "[", "next_fg_mask", "[", "i", "]", "]", "\n", "n_prev", "=", "len", "(", "prev_fg_feat", ")", "\n", "n_next", "=", "len", "(", "next_fg_feat", ")", "\n", "if", "n_prev", ">", "0", "and", "n_next", ">", "0", ":", "\n", "# link", "\n", "                    ", "prev_tid_unique", ",", "prev_feat_unique", "=", "self", ".", "get_unique_tid_feature", "(", "prev_fg_tid", ",", "prev_fg_feat", ")", "\n", "next_tid_unique", ",", "next_feat_unique", "=", "self", ".", "get_unique_tid_feature", "(", "next_fg_tid", ",", "next_fg_feat", ")", "\n", "unique_link", "=", "(", "prev_tid_unique", ".", "unsqueeze", "(", "1", ")", "==", "next_tid_unique", ")", ".", "float", "(", ")", "\n", "gt_links", ".", "append", "(", "unique_link", ".", "view", "(", "-", "1", ")", ")", "\n", "cor_feat", "=", "torch", ".", "abs", "(", "\n", "prev_feat_unique", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "1", ",", "len", "(", "next_tid_unique", ")", ",", "1", ")", "\n", "-", "next_feat_unique", ".", "unsqueeze", "(", "0", ")", ".", "repeat", "(", "len", "(", "prev_tid_unique", ")", ",", "1", ",", "1", ")", "\n", ")", "\n", "# link + softmax", "\n", "link_feat", "=", "cor_feat", ".", "view", "(", "len", "(", "prev_tid_unique", ")", "*", "len", "(", "next_tid_unique", ")", ",", "feat_len", ",", "1", ")", "\n", "link_scores", "=", "self", ".", "link_layer", "(", "link_feat", ")", ".", "view", "(", "len", "(", "prev_tid_unique", ")", ",", "len", "(", "next_tid_unique", ")", ")", "\n", "link_prev", "=", "torch", ".", "softmax", "(", "link_scores", ",", "dim", "=", "1", ")", "\n", "link_next", "=", "torch", ".", "softmax", "(", "link_scores", ",", "dim", "=", "0", ")", "\n", "link_scores", "=", "(", "link_prev", "+", "link_next", ")", "/", "2", "\n", "rcnn_link", ".", "append", "(", "link_scores", ".", "view", "(", "len", "(", "prev_tid_unique", ")", "*", "len", "(", "next_tid_unique", ")", ",", "1", ")", ")", "\n", "# start end", "\n", "gt_start", "=", "1", "-", "unique_link", ".", "sum", "(", "0", ")", "\n", "gt_end", "=", "1", "-", "unique_link", ".", "sum", "(", "1", ")", "\n", "gt_starts", ".", "append", "(", "gt_start", ")", "\n", "gt_ends", ".", "append", "(", "gt_end", ")", "\n", "start_feat", "=", "cor_feat", ".", "mean", "(", "dim", "=", "0", ")", "\n", "end_feat", "=", "cor_feat", ".", "mean", "(", "dim", "=", "1", ")", "\n", "start_features", ".", "append", "(", "start_feat", ")", "\n", "end_features", ".", "append", "(", "end_feat", ")", "\n", "\n", "", "", "if", "len", "(", "gt_links", ")", ">", "0", ":", "\n", "                ", "gt_links", "=", "torch", ".", "cat", "(", "gt_links", ")", "\n", "rcnn_link", "=", "torch", ".", "cat", "(", "rcnn_link", ")", "\n", "ret_dict", "[", "'gt_links'", "]", "=", "gt_links", "\n", "ret_dict", "[", "'rcnn_link'", "]", "=", "rcnn_link", "\n", "", "else", ":", "\n", "                ", "ret_dict", "[", "'gt_links'", "]", "=", "gt_tids", ".", "new", "(", "0", ")", "\n", "ret_dict", "[", "'rcnn_link'", "]", "=", "gt_tids", ".", "new", "(", "0", ",", "1", ")", "\n", "\n", "", "if", "len", "(", "gt_starts", ")", ">", "0", ":", "\n", "                ", "gt_starts", "=", "torch", ".", "cat", "(", "gt_starts", ")", "\n", "start_features", "=", "torch", ".", "cat", "(", "start_features", ")", ".", "unsqueeze", "(", "-", "1", ")", "\n", "rcnn_start", "=", "self", ".", "se_layer", "(", "start_features", ")", ".", "squeeze", "(", "-", "1", ")", "\n", "ret_dict", "[", "'gt_starts'", "]", "=", "gt_starts", "\n", "ret_dict", "[", "'rcnn_start'", "]", "=", "rcnn_start", "\n", "", "else", ":", "\n", "                ", "ret_dict", "[", "'gt_starts'", "]", "=", "gt_tids", ".", "new", "(", "0", ")", "\n", "ret_dict", "[", "'rcnn_start'", "]", "=", "gt_tids", ".", "new", "(", "0", ",", "1", ")", "\n", "\n", "", "if", "len", "(", "gt_ends", ")", ">", "0", ":", "\n", "                ", "gt_ends", "=", "torch", ".", "cat", "(", "gt_ends", ")", "\n", "end_features", "=", "torch", ".", "cat", "(", "end_features", ")", ".", "unsqueeze", "(", "-", "1", ")", "\n", "rcnn_end", "=", "self", ".", "se_layer", "(", "end_features", ")", ".", "squeeze", "(", "-", "1", ")", "\n", "ret_dict", "[", "'gt_ends'", "]", "=", "gt_ends", "\n", "ret_dict", "[", "'rcnn_end'", "]", "=", "rcnn_end", "\n", "", "else", ":", "\n", "                ", "ret_dict", "[", "'gt_ends'", "]", "=", "gt_tids", ".", "new", "(", "0", ")", "\n", "ret_dict", "[", "'rcnn_end'", "]", "=", "gt_tids", ".", "new", "(", "0", ",", "1", ")", "\n", "", "", "else", ":", "\n", "            ", "ret_dict", "[", "'rcnn_feat'", "]", "=", "l_features", "[", "-", "1", "]", "\n", "", "return", "ret_dict", "\n", "", "", ""]], "home.repos.pwc.inspect_result.kemo-huang_jmodt.modeling.rpn.RPN.__init__": [[13, 60], ["torch.Module.__init__", "jmodt.detection.modeling.backbone.PointNet2MSG", "jmodt.detection.modeling.backbone.PointNet2MSG", "range", "cls_layers.append", "torch.Sequential", "torch.Sequential", "range", "reg_layers.append", "torch.Sequential", "torch.Sequential", "jmodt.detection.layers.proposal_layer.ProposalLayer", "jmodt.detection.layers.proposal_layer.ProposalLayer", "rpn.RPN.init_weights", "int", "jmodt.config.cfg.RPN.CLS_FC.__len__", "jmodt.config.cfg.RPN.CLS_FC.__len__", "cls_layers.append", "jmodt.Conv1d", "jmodt.Conv1d", "cls_layers.insert", "int", "jmodt.config.cfg.RPN.REG_FC.__len__", "jmodt.config.cfg.RPN.REG_FC.__len__", "reg_layers.append", "jmodt.Conv1d", "jmodt.Conv1d", "reg_layers.insert", "jmodt.DiceLoss", "jmodt.DiceLoss", "int", "jmodt.Conv1d", "jmodt.Conv1d", "torch.Dropout", "torch.Dropout", "jmodt.Conv1d", "jmodt.Conv1d", "torch.Dropout", "torch.Dropout", "jmodt.SigmoidFocalClassificationLoss", "jmodt.SigmoidFocalClassificationLoss"], "methods", ["home.repos.pwc.inspect_result.kemo-huang_jmodt.pointnet2.pytorch_utils.FC.__init__", "home.repos.pwc.inspect_result.kemo-huang_jmodt.modeling.rpn.RPN.init_weights", "home.repos.pwc.inspect_result.kemo-huang_jmodt.datasets.kitti_dataset.KittiDataset.__len__", "home.repos.pwc.inspect_result.kemo-huang_jmodt.datasets.kitti_dataset.KittiDataset.__len__", "home.repos.pwc.inspect_result.kemo-huang_jmodt.datasets.kitti_dataset.KittiDataset.__len__", "home.repos.pwc.inspect_result.kemo-huang_jmodt.datasets.kitti_dataset.KittiDataset.__len__"], ["    ", "def", "__init__", "(", "self", ",", "use_xyz", "=", "True", ",", "mode", "=", "'TRAIN'", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "input_channels", "=", "int", "(", "cfg", ".", "RPN", ".", "USE_INTENSITY", ")", "+", "3", "*", "int", "(", "cfg", ".", "RPN", ".", "USE_RGB", ")", "\n", "self", ".", "backbone_net", "=", "PointNet2MSG", "(", "input_channels", "=", "input_channels", ",", "use_xyz", "=", "use_xyz", ")", "\n", "\n", "# classification branch", "\n", "cls_layers", "=", "[", "]", "\n", "pre_channel", "=", "cfg", ".", "RPN", ".", "FP_MLPS", "[", "0", "]", "[", "-", "1", "]", "\n", "for", "k", "in", "range", "(", "0", ",", "cfg", ".", "RPN", ".", "CLS_FC", ".", "__len__", "(", ")", ")", ":", "\n", "            ", "cls_layers", ".", "append", "(", "pt_utils", ".", "Conv1d", "(", "pre_channel", ",", "cfg", ".", "RPN", ".", "CLS_FC", "[", "k", "]", ",", "bn", "=", "cfg", ".", "RPN", ".", "USE_BN", ")", ")", "\n", "pre_channel", "=", "cfg", ".", "RPN", ".", "CLS_FC", "[", "k", "]", "\n", "", "cls_layers", ".", "append", "(", "pt_utils", ".", "Conv1d", "(", "pre_channel", ",", "1", ",", "activation", "=", "None", ")", ")", "\n", "if", "cfg", ".", "RPN", ".", "DP_RATIO", ">=", "0", ":", "\n", "            ", "cls_layers", ".", "insert", "(", "1", ",", "nn", ".", "Dropout", "(", "cfg", ".", "RPN", ".", "DP_RATIO", ")", ")", "\n", "", "self", ".", "rpn_cls_layer", "=", "nn", ".", "Sequential", "(", "*", "cls_layers", ")", "\n", "\n", "# regression branch", "\n", "per_loc_bin_num", "=", "int", "(", "cfg", ".", "RPN", ".", "LOC_SCOPE", "/", "cfg", ".", "RPN", ".", "LOC_BIN_SIZE", ")", "*", "2", "\n", "if", "cfg", ".", "RPN", ".", "LOC_XZ_FINE", ":", "\n", "            ", "reg_channel", "=", "per_loc_bin_num", "*", "4", "+", "cfg", ".", "RPN", ".", "NUM_HEAD_BIN", "*", "2", "+", "3", "\n", "", "else", ":", "\n", "            ", "reg_channel", "=", "per_loc_bin_num", "*", "2", "+", "cfg", ".", "RPN", ".", "NUM_HEAD_BIN", "*", "2", "+", "3", "\n", "", "reg_channel", "+=", "1", "# reg y", "\n", "\n", "reg_layers", "=", "[", "]", "\n", "pre_channel", "=", "cfg", ".", "RPN", ".", "FP_MLPS", "[", "0", "]", "[", "-", "1", "]", "\n", "for", "k", "in", "range", "(", "0", ",", "cfg", ".", "RPN", ".", "REG_FC", ".", "__len__", "(", ")", ")", ":", "\n", "            ", "reg_layers", ".", "append", "(", "pt_utils", ".", "Conv1d", "(", "pre_channel", ",", "cfg", ".", "RPN", ".", "REG_FC", "[", "k", "]", ",", "bn", "=", "cfg", ".", "RPN", ".", "USE_BN", ")", ")", "\n", "pre_channel", "=", "cfg", ".", "RPN", ".", "REG_FC", "[", "k", "]", "\n", "", "reg_layers", ".", "append", "(", "pt_utils", ".", "Conv1d", "(", "pre_channel", ",", "reg_channel", ",", "activation", "=", "None", ")", ")", "\n", "if", "cfg", ".", "RPN", ".", "DP_RATIO", ">=", "0", ":", "\n", "            ", "reg_layers", ".", "insert", "(", "1", ",", "nn", ".", "Dropout", "(", "cfg", ".", "RPN", ".", "DP_RATIO", ")", ")", "\n", "", "self", ".", "rpn_reg_layer", "=", "nn", ".", "Sequential", "(", "*", "reg_layers", ")", "\n", "\n", "if", "cfg", ".", "RPN", ".", "LOSS_CLS", "==", "'DiceLoss'", ":", "\n", "            ", "self", ".", "rpn_cls_loss_func", "=", "loss_utils", ".", "DiceLoss", "(", "ignore_target", "=", "-", "1", ")", "\n", "", "elif", "cfg", ".", "RPN", ".", "LOSS_CLS", "==", "'SigmoidFocalLoss'", ":", "\n", "            ", "self", ".", "rpn_cls_loss_func", "=", "loss_utils", ".", "SigmoidFocalClassificationLoss", "(", "alpha", "=", "cfg", ".", "RPN", ".", "FOCAL_ALPHA", "[", "0", "]", ",", "\n", "gamma", "=", "cfg", ".", "RPN", ".", "FOCAL_GAMMA", ")", "\n", "", "elif", "cfg", ".", "RPN", ".", "LOSS_CLS", "==", "'BinaryCrossEntropy'", ":", "\n", "            ", "self", ".", "rpn_cls_loss_func", "=", "F", ".", "binary_cross_entropy", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "", "self", ".", "proposal_layer", "=", "ProposalLayer", "(", "mode", "=", "mode", ")", "\n", "self", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kemo-huang_jmodt.modeling.rpn.RPN.init_weights": [[61, 67], ["torch.init.normal_", "torch.init.normal_", "torch.init.constant_", "torch.init.constant_", "numpy.log"], "methods", ["None"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "if", "cfg", ".", "RPN", ".", "LOSS_CLS", "in", "[", "'SigmoidFocalLoss'", "]", ":", "\n", "            ", "pi", "=", "0.01", "\n", "nn", ".", "init", ".", "constant_", "(", "self", ".", "rpn_cls_layer", "[", "2", "]", ".", "conv", ".", "bias", ",", "-", "np", ".", "log", "(", "(", "1", "-", "pi", ")", "/", "pi", ")", ")", "\n", "\n", "", "nn", ".", "init", ".", "normal_", "(", "self", ".", "rpn_reg_layer", "[", "-", "1", "]", ".", "conv", ".", "weight", ",", "mean", "=", "0", ",", "std", "=", "0.001", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kemo-huang_jmodt.modeling.rpn.RPN.forward": [[68, 88], ["rpn.RPN.rpn_cls_layer().transpose().contiguous", "rpn.RPN.rpn_reg_layer().transpose().contiguous", "rpn.RPN.backbone_net", "rpn.RPN.backbone_net", "rpn.RPN.rpn_cls_layer().transpose", "rpn.RPN.rpn_reg_layer().transpose", "rpn.RPN.rpn_cls_layer", "rpn.RPN.rpn_reg_layer"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_data", ")", ":", "\n", "        ", "\"\"\"\n        :param input_data: dict (point_cloud)\n        :return:\n        \"\"\"", "\n", "pts_input", "=", "input_data", "[", "'pts_input'", "]", "\n", "if", "cfg", ".", "LI_FUSION", ".", "ENABLED", ":", "\n", "            ", "img_input", "=", "input_data", "[", "'img'", "]", "\n", "xy_input", "=", "input_data", "[", "'pts_xy'", "]", "\n", "backbone_xyz", ",", "backbone_features", "=", "self", ".", "backbone_net", "(", "pts_input", ",", "img_input", ",", "xy_input", ")", "# (B, N, 3), (B, C, N)", "\n", "", "else", ":", "\n", "            ", "backbone_xyz", ",", "backbone_features", "=", "self", ".", "backbone_net", "(", "pts_input", ")", "# (B, N, 3), (B, C, N)", "\n", "\n", "", "rpn_cls", "=", "self", ".", "rpn_cls_layer", "(", "backbone_features", ")", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", "# (B, N, 1)", "\n", "rpn_reg", "=", "self", ".", "rpn_reg_layer", "(", "backbone_features", ")", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", "# (B, N, C)", "\n", "\n", "ret_dict", "=", "{", "'rpn_cls'", ":", "rpn_cls", ",", "'rpn_reg'", ":", "rpn_reg", ",", "\n", "'backbone_xyz'", ":", "backbone_xyz", ",", "'backbone_features'", ":", "backbone_features", "}", "\n", "\n", "return", "ret_dict", "\n", "", "", ""]], "home.repos.pwc.inspect_result.kemo-huang_jmodt.modeling.point_rcnn.PointRCNN.__init__": [[10, 22], ["torch.Module.__init__", "jmodt.detection.modeling.rpn.RPN", "jmodt.detection.modeling.rcnn.RCNN"], "methods", ["home.repos.pwc.inspect_result.kemo-huang_jmodt.pointnet2.pytorch_utils.FC.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_classes", ",", "use_xyz", "=", "True", ",", "mode", "=", "'TRAIN'", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "mode", "=", "mode", "\n", "assert", "cfg", ".", "RPN", ".", "ENABLED", "or", "cfg", ".", "RCNN", ".", "ENABLED", "\n", "\n", "if", "cfg", ".", "RPN", ".", "ENABLED", ":", "\n", "            ", "self", ".", "rpn", "=", "RPN", "(", "use_xyz", "=", "use_xyz", ",", "mode", "=", "mode", ")", "\n", "\n", "", "if", "cfg", ".", "RCNN", ".", "ENABLED", ":", "\n", "            ", "rcnn_input_channels", "=", "128", "# channels of rpn features", "\n", "self", ".", "rcnn_net", "=", "RCNN", "(", "num_classes", "=", "num_classes", ",", "input_channels", "=", "rcnn_input_channels", ",", "\n", "use_xyz", "=", "use_xyz", ",", "mode", "=", "mode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kemo-huang_jmodt.modeling.point_rcnn.PointRCNN.forward": [[23, 73], ["torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "point_rcnn.PointRCNN.rpn", "point_rcnn.PointRCNN.update", "point_rcnn.PointRCNN.rcnn_net", "point_rcnn.PointRCNN.update", "point_rcnn.PointRCNN.rcnn_net", "point_rcnn.PointRCNN.rpn.eval", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "point_rcnn.PointRCNN.rpn.proposal_layer", "backbone_features.permute"], "methods", ["home.repos.pwc.inspect_result.kemo-huang_jmodt.tracking.kalman.KalmanPSR.update", "home.repos.pwc.inspect_result.kemo-huang_jmodt.tracking.kalman.KalmanPSR.update"], ["", "", "def", "forward", "(", "self", ",", "input_data", ")", ":", "\n", "\n", "        ", "if", "cfg", ".", "RPN", ".", "ENABLED", ":", "\n", "            ", "output", "=", "{", "}", "\n", "# rpn inference", "\n", "with", "torch", ".", "set_grad_enabled", "(", "(", "not", "cfg", ".", "RPN", ".", "FIXED", ")", "and", "self", ".", "training", ")", ":", "\n", "                ", "if", "cfg", ".", "RPN", ".", "FIXED", ":", "\n", "                    ", "self", ".", "rpn", ".", "eval", "(", ")", "\n", "", "rpn_output", "=", "self", ".", "rpn", "(", "input_data", ")", "\n", "\n", "output", ".", "update", "(", "rpn_output", ")", "\n", "backbone_xyz", "=", "rpn_output", "[", "'backbone_xyz'", "]", "\n", "backbone_features", "=", "rpn_output", "[", "'backbone_features'", "]", "\n", "\n", "# rcnn inference", "\n", "", "if", "cfg", ".", "RCNN", ".", "ENABLED", ":", "\n", "                ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                    ", "rpn_cls", ",", "rpn_reg", "=", "rpn_output", "[", "'rpn_cls'", "]", ",", "rpn_output", "[", "'rpn_reg'", "]", "\n", "\n", "rpn_scores_raw", "=", "rpn_cls", "[", ":", ",", ":", ",", "0", "]", "\n", "rpn_scores_norm", "=", "torch", ".", "sigmoid", "(", "rpn_scores_raw", ")", "\n", "seg_mask", "=", "(", "rpn_scores_norm", ">", "cfg", ".", "RPN", ".", "SCORE_THRESH", ")", ".", "float", "(", ")", "\n", "pts_depth", "=", "torch", ".", "norm", "(", "backbone_xyz", ",", "p", "=", "2", ",", "dim", "=", "2", ")", "\n", "\n", "# proposal layer", "\n", "rois", ",", "roi_scores_raw", "=", "self", ".", "rpn", ".", "proposal_layer", "(", "rpn_scores_raw", ",", "rpn_reg", ",", "backbone_xyz", ")", "# (B, M, 7)", "\n", "\n", "output", "[", "'rois'", "]", "=", "rois", "\n", "output", "[", "'roi_scores_raw'", "]", "=", "roi_scores_raw", "\n", "output", "[", "'seg_result'", "]", "=", "seg_mask", "\n", "\n", "", "rcnn_input_info", "=", "{", "'rpn_xyz'", ":", "backbone_xyz", ",", "\n", "'rpn_features'", ":", "backbone_features", ".", "permute", "(", "(", "0", ",", "2", ",", "1", ")", ")", ",", "\n", "'seg_mask'", ":", "seg_mask", ",", "\n", "'roi_boxes3d'", ":", "rois", ",", "\n", "'pts_depth'", ":", "pts_depth", "\n", "}", "\n", "if", "self", ".", "mode", "==", "'TRAIN'", ":", "\n", "                    ", "rcnn_input_info", "[", "'gt_boxes3d'", "]", "=", "input_data", "[", "'gt_boxes3d'", "]", "\n", "rcnn_input_info", "[", "'gt_tids'", "]", "=", "input_data", "[", "'gt_tids'", "]", "\n", "\n", "", "rcnn_output", "=", "self", ".", "rcnn_net", "(", "rcnn_input_info", ")", "\n", "output", ".", "update", "(", "rcnn_output", ")", "\n", "\n", "", "", "elif", "cfg", ".", "RCNN", ".", "ENABLED", ":", "\n", "            ", "output", "=", "self", ".", "rcnn_net", "(", "input_data", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "", "return", "output", "\n", "", "", ""]], "home.repos.pwc.inspect_result.kemo-huang_jmodt.modeling.train_functions.model_joint_fn_decorator": [[11, 337], ["collections.namedtuple", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "model", "collections.namedtuple.", "isinstance", "rpn_cls.squeeze.squeeze", "torch.logical_or", "torch.logical_or", "torch.logical_or", "torch.logical_or", "torch.logical_or", "torch.logical_or", "rpn_cls.squeeze.view", "torch.from_numpy().cuda().long.view", "tb_dict.update", "ret_dict[].float", "rcnn_cls.view", "ret_dict[].float.view", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy().cuda().float", "torch.from_numpy().cuda().float", "torch.from_numpy().cuda().float", "torch.from_numpy().cuda().float", "torch.from_numpy().cuda().float", "torch.from_numpy().cuda().float", "data.items", "torch.from_numpy().cuda().float().permute", "torch.from_numpy().cuda().float().permute", "torch.from_numpy().cuda().float().permute", "torch.from_numpy().cuda().float", "torch.from_numpy().cuda().float", "torch.from_numpy().cuda().float", "torch.from_numpy().cuda().float", "torch.from_numpy().cuda().float", "torch.from_numpy().cuda().float", "torch.from_numpy().cuda().float", "torch.from_numpy().cuda().float", "torch.from_numpy().cuda().float", "train_functions.model_joint_fn_decorator.get_rpn_loss"], "function", ["home.repos.pwc.inspect_result.kemo-huang_jmodt.tracking.kalman.KalmanPSR.update"], ["def", "model_joint_fn_decorator", "(", ")", ":", "\n", "    ", "ModelReturn", "=", "namedtuple", "(", "\"ModelReturn\"", ",", "[", "'loss'", ",", "'tb_dict'", ",", "'disp_dict'", "]", ")", "\n", "MEAN_SIZE", "=", "torch", ".", "from_numpy", "(", "cfg", ".", "CLS_MEAN_SIZE", "[", "0", "]", ")", ".", "cuda", "(", ")", "\n", "\n", "def", "model_fn_train", "(", "model", ",", "data", ")", ":", "\n", "        ", "if", "cfg", ".", "RPN", ".", "ENABLED", ":", "\n", "            ", "pts_input", "=", "data", "[", "'pts_input'", "]", "\n", "gt_boxes3d", "=", "data", "[", "'gt_boxes3d'", "]", "\n", "\n", "if", "not", "cfg", ".", "RPN", ".", "FIXED", ":", "\n", "                ", "rpn_cls_label", ",", "rpn_reg_label", "=", "data", "[", "'rpn_cls_label'", "]", ",", "data", "[", "'rpn_reg_label'", "]", "\n", "rpn_cls_label", "=", "torch", ".", "from_numpy", "(", "rpn_cls_label", ")", ".", "cuda", "(", "non_blocking", "=", "True", ")", ".", "long", "(", ")", "\n", "rpn_reg_label", "=", "torch", ".", "from_numpy", "(", "rpn_reg_label", ")", ".", "cuda", "(", "non_blocking", "=", "True", ")", ".", "float", "(", ")", "\n", "\n", "", "inputs", "=", "torch", ".", "from_numpy", "(", "pts_input", ")", ".", "cuda", "(", "non_blocking", "=", "True", ")", ".", "float", "(", ")", "\n", "gt_boxes3d", "=", "torch", ".", "from_numpy", "(", "gt_boxes3d", ")", ".", "cuda", "(", "non_blocking", "=", "True", ")", ".", "float", "(", ")", "\n", "input_data", "=", "{", "'pts_input'", ":", "inputs", ",", "'gt_boxes3d'", ":", "gt_boxes3d", "}", "\n", "", "else", ":", "\n", "            ", "input_data", "=", "{", "}", "\n", "for", "key", ",", "val", "in", "data", ".", "items", "(", ")", ":", "\n", "                ", "if", "key", "!=", "'sample_id'", ":", "\n", "                    ", "input_data", "[", "key", "]", "=", "torch", ".", "from_numpy", "(", "val", ")", ".", "contiguous", "(", ")", ".", "cuda", "(", "non_blocking", "=", "True", ")", ".", "float", "(", ")", "\n", "\n", "", "", "", "if", "cfg", ".", "LI_FUSION", ".", "ENABLED", ":", "\n", "            ", "img", "=", "torch", ".", "from_numpy", "(", "data", "[", "'img'", "]", ")", ".", "cuda", "(", "non_blocking", "=", "True", ")", ".", "float", "(", ")", ".", "permute", "(", "(", "0", ",", "3", ",", "1", ",", "2", ")", ")", "\n", "pts_xy", "=", "torch", ".", "from_numpy", "(", "data", "[", "'pts_xy'", "]", ")", ".", "cuda", "(", "non_blocking", "=", "True", ")", ".", "float", "(", ")", "\n", "input_data", "[", "'img'", "]", "=", "img", "\n", "input_data", "[", "'pts_xy'", "]", "=", "pts_xy", "\n", "", "if", "cfg", ".", "RPN", ".", "USE_RGB", "or", "cfg", ".", "RCNN", ".", "USE_RGB", ":", "\n", "            ", "pts_rgb", "=", "data", "[", "'rgb'", "]", "\n", "pts_rgb", "=", "torch", ".", "from_numpy", "(", "pts_rgb", ")", ".", "cuda", "(", "non_blocking", "=", "True", ")", ".", "float", "(", ")", "\n", "input_data", "[", "'pts_rgb'", "]", "=", "pts_rgb", "\n", "\n", "", "if", "cfg", ".", "REID", ".", "ENABLED", ":", "\n", "            ", "input_data", "[", "'gt_tids'", "]", "=", "torch", ".", "from_numpy", "(", "data", "[", "'gt_tids'", "]", ")", ".", "cuda", "(", "non_blocking", "=", "True", ")", ".", "float", "(", ")", "\n", "\n", "", "ret_dict", "=", "model", "(", "input_data", ")", "\n", "\n", "tb_dict", "=", "{", "}", "\n", "disp_dict", "=", "{", "}", "\n", "loss", "=", "0", "\n", "if", "cfg", ".", "RPN", ".", "ENABLED", "and", "not", "cfg", ".", "RPN", ".", "FIXED", ":", "\n", "            ", "rpn_cls", "=", "ret_dict", "[", "'rpn_cls'", "]", "\n", "rpn_reg", "=", "ret_dict", "[", "'rpn_reg'", "]", "\n", "rpn_loss", ",", "rpn_loss_cls", ",", "rpn_loss_loc", ",", "rpn_loss_angle", ",", "rpn_loss_size", ",", "rpn_loss_iou", "=", "get_rpn_loss", "(", "\n", "model", ",", "\n", "rpn_cls", ",", "\n", "rpn_reg", ",", "\n", "rpn_cls_label", ",", "\n", "rpn_reg_label", ",", "\n", "tb_dict", "\n", ")", "\n", "rpn_loss", "=", "rpn_loss", "*", "cfg", ".", "TRAIN", ".", "RPN_TRAIN_WEIGHT", "\n", "loss", "+=", "rpn_loss", "\n", "disp_dict", "[", "'rpn_loss'", "]", "=", "rpn_loss", ".", "item", "(", ")", "\n", "\n", "", "if", "cfg", ".", "RCNN", ".", "ENABLED", ":", "\n", "            ", "if", "cfg", ".", "USE_IOU_BRANCH", ":", "\n", "                ", "rcnn_loss", ",", "iou_loss", ",", "iou_branch_loss", "=", "get_rcnn_loss", "(", "model", ",", "ret_dict", ",", "tb_dict", ")", "\n", "disp_dict", "[", "'rcnn_iou_loss'", "]", "=", "iou_loss", ".", "item", "(", ")", "\n", "disp_dict", "[", "'iou_branch_loss'", "]", "=", "iou_branch_loss", ".", "item", "(", ")", "\n", "", "else", ":", "\n", "                ", "rcnn_loss", "=", "get_rcnn_loss", "(", "model", ",", "ret_dict", ",", "tb_dict", ")", "\n", "", "max_iou", "=", "ret_dict", "[", "'max_iou'", "]", ".", "tolist", "(", ")", "\n", "disp_dict", "[", "'max_iou'", "]", "=", "[", "round", "(", "x", ",", "2", ")", "for", "x", "in", "max_iou", "]", "if", "type", "(", "max_iou", ")", "==", "list", "else", "max_iou", "\n", "disp_dict", "[", "'link_pos'", "]", "=", "tb_dict", "[", "'rcnn_link_pos'", "]", "\n", "disp_dict", "[", "'link_neg'", "]", "=", "tb_dict", "[", "'rcnn_link_neg'", "]", "\n", "rcnn_loss", "=", "rcnn_loss", "*", "cfg", ".", "TRAIN", ".", "RCNN_TRAIN_WEIGHT", "\n", "disp_dict", "[", "'rcnn_loss'", "]", "=", "rcnn_loss", ".", "item", "(", ")", "if", "type", "(", "rcnn_loss", ")", "==", "torch", ".", "Tensor", "else", "rcnn_loss", "\n", "loss", "+=", "rcnn_loss", "\n", "\n", "", "return", "ModelReturn", "(", "loss", ",", "tb_dict", ",", "disp_dict", ")", "\n", "\n", "", "def", "get_rpn_loss", "(", "model", ",", "rpn_cls", ",", "rpn_reg", ",", "rpn_cls_label", ",", "rpn_reg_label", ",", "tb_dict", ")", ":", "\n", "        ", "if", "isinstance", "(", "model", ",", "nn", ".", "DataParallel", ")", ":", "\n", "            ", "rpn_cls_loss_func", "=", "model", ".", "module", ".", "rpn", ".", "rpn_cls_loss_func", "\n", "", "else", ":", "\n", "            ", "rpn_cls_loss_func", "=", "model", ".", "rpn", ".", "rpn_cls_loss_func", "\n", "\n", "", "rpn_cls", "=", "rpn_cls", ".", "squeeze", "(", "-", "1", ")", "\n", "invalid_mask", "=", "torch", ".", "logical_or", "(", "torch", ".", "isnan", "(", "rpn_cls", ")", ",", "torch", ".", "isinf", "(", "rpn_cls", ")", ")", "\n", "if", "invalid_mask", ".", "sum", "(", ")", ">", "0", ":", "\n", "            ", "valid_mask", "=", "torch", ".", "logical_not", "(", "invalid_mask", ")", "\n", "rpn_cls", "=", "rpn_cls", "[", "valid_mask", "]", "\n", "rpn_cls_label", "=", "rpn_cls_label", "[", "valid_mask", "]", "\n", "", "invalid_mask", "=", "torch", ".", "logical_or", "(", "torch", ".", "isnan", "(", "rpn_reg", ")", ",", "torch", ".", "isinf", "(", "rpn_reg", ")", ")", "\n", "if", "invalid_mask", ".", "sum", "(", ")", ">", "0", ":", "\n", "            ", "invalid_mask", "=", "invalid_mask", ".", "sum", "(", "-", "1", ")", ">", "0", "\n", "valid_mask", "=", "torch", ".", "logical_not", "(", "invalid_mask", ")", "\n", "rpn_reg", "=", "rpn_reg", "[", "valid_mask", "]", "\n", "rpn_reg_label", "=", "rpn_reg_label", "[", "valid_mask", "]", "\n", "", "else", ":", "\n", "            ", "point_num", "=", "rpn_reg", ".", "size", "(", "0", ")", "*", "rpn_reg", ".", "size", "(", "1", ")", "\n", "rpn_reg", "=", "rpn_reg", ".", "view", "(", "point_num", ",", "-", "1", ")", "\n", "rpn_reg_label", "=", "rpn_reg_label", ".", "view", "(", "point_num", ",", "7", ")", "\n", "\n", "", "rpn_cls_flat", "=", "rpn_cls", ".", "view", "(", "-", "1", ")", "\n", "rpn_cls_label_flat", "=", "rpn_cls_label", ".", "view", "(", "-", "1", ")", "\n", "fg_mask", "=", "(", "rpn_cls_label_flat", ">", "0", ")", "\n", "\n", "# RPN classification loss", "\n", "if", "cfg", ".", "RPN", ".", "LOSS_CLS", "==", "'DiceLoss'", ":", "\n", "            ", "rpn_loss_cls", "=", "rpn_cls_loss_func", "(", "rpn_cls_flat", ",", "rpn_cls_label_flat", ")", "\n", "\n", "", "elif", "cfg", ".", "RPN", ".", "LOSS_CLS", "==", "'SigmoidFocalLoss'", ":", "\n", "            ", "rpn_cls_target", "=", "(", "rpn_cls_label_flat", ">", "0", ")", ".", "float", "(", ")", "\n", "pos", "=", "(", "rpn_cls_label_flat", ">", "0", ")", ".", "float", "(", ")", "\n", "neg", "=", "(", "rpn_cls_label_flat", "==", "0", ")", ".", "float", "(", ")", "\n", "cls_weights", "=", "pos", "+", "neg", "\n", "pos_normalizer", "=", "pos", ".", "sum", "(", ")", "\n", "cls_weights", "=", "cls_weights", "/", "torch", ".", "clamp", "(", "pos_normalizer", ",", "min", "=", "1.0", ")", "\n", "rpn_loss_cls", "=", "rpn_cls_loss_func", "(", "rpn_cls_flat", ",", "rpn_cls_target", ",", "cls_weights", ")", "\n", "rpn_loss_cls_pos", "=", "(", "rpn_loss_cls", "*", "pos", ")", ".", "sum", "(", ")", "\n", "rpn_loss_cls_neg", "=", "(", "rpn_loss_cls", "*", "neg", ")", ".", "sum", "(", ")", "\n", "rpn_loss_cls", "=", "rpn_loss_cls", ".", "sum", "(", ")", "\n", "tb_dict", "[", "'rpn_loss_cls_pos'", "]", "=", "rpn_loss_cls_pos", ".", "item", "(", ")", "\n", "tb_dict", "[", "'rpn_loss_cls_neg'", "]", "=", "rpn_loss_cls_neg", ".", "item", "(", ")", "\n", "\n", "", "elif", "cfg", ".", "RPN", ".", "LOSS_CLS", "==", "'BinaryCrossEntropy'", ":", "\n", "            ", "weight", "=", "rpn_cls_flat", ".", "new", "(", "rpn_cls_flat", ".", "shape", "[", "0", "]", ")", ".", "fill_", "(", "1.0", ")", "\n", "weight", "[", "fg_mask", "]", "=", "cfg", ".", "RPN", ".", "FG_WEIGHT", "\n", "rpn_cls_label_target", "=", "(", "rpn_cls_label_flat", ">", "0", ")", ".", "float", "(", ")", "\n", "batch_loss_cls", "=", "F", ".", "binary_cross_entropy", "(", "torch", ".", "sigmoid", "(", "rpn_cls_flat", ")", ",", "rpn_cls_label_target", ",", "\n", "weight", "=", "weight", ",", "reduction", "=", "'none'", ")", "\n", "cls_valid_mask", "=", "(", "rpn_cls_label_flat", ">=", "0", ")", ".", "float", "(", ")", "\n", "rpn_loss_cls", "=", "(", "batch_loss_cls", "*", "cls_valid_mask", ")", ".", "sum", "(", ")", "/", "torch", ".", "clamp", "(", "cls_valid_mask", ".", "sum", "(", ")", ",", "min", "=", "1.0", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "# RPN regression loss", "\n", "\n", "", "if", "fg_mask", ".", "sum", "(", ")", ">", "0", ":", "\n", "            ", "loss_loc", ",", "loss_angle", ",", "loss_size", ",", "loss_iou", ",", "reg_loss_dict", "=", "loss_utils", ".", "get_reg_loss", "(", "cls_score", "=", "torch", ".", "sigmoid", "(", "rpn_cls_flat", ")", "[", "fg_mask", "]", ",", "\n", "pred_reg", "=", "rpn_reg", "[", "fg_mask", "]", ",", "\n", "reg_label", "=", "rpn_reg_label", "[", "fg_mask", "]", ",", "\n", "loc_scope", "=", "cfg", ".", "RPN", ".", "LOC_SCOPE", ",", "\n", "loc_bin_size", "=", "cfg", ".", "RPN", ".", "LOC_BIN_SIZE", ",", "\n", "num_head_bin", "=", "cfg", ".", "RPN", ".", "NUM_HEAD_BIN", ",", "\n", "anchor_size", "=", "MEAN_SIZE", ",", "\n", "get_xz_fine", "=", "cfg", ".", "RPN", ".", "LOC_XZ_FINE", ",", "\n", "use_cls_score", "=", "True", ",", "\n", "use_mask_score", "=", "False", ")", "\n", "\n", "loss_size", "=", "3", "*", "loss_size", "# consistent with old codes", "\n", "\n", "loss_iou", "=", "cfg", ".", "TRAIN", ".", "CE_WEIGHT", "*", "loss_iou", "\n", "rpn_loss_reg", "=", "loss_loc", "+", "loss_angle", "+", "loss_size", "+", "loss_iou", "\n", "", "else", ":", "\n", "            ", "loss_loc", "=", "loss_angle", "=", "loss_size", "=", "loss_iou", "=", "rpn_loss_reg", "=", "rpn_loss_cls", "*", "0", "\n", "\n", "", "rpn_loss", "=", "rpn_loss_cls", "*", "cfg", ".", "RPN", ".", "LOSS_WEIGHT", "[", "0", "]", "+", "rpn_loss_reg", "*", "cfg", ".", "RPN", ".", "LOSS_WEIGHT", "[", "1", "]", "\n", "\n", "tb_dict", ".", "update", "(", "{", "'rpn_loss_cls'", ":", "rpn_loss_cls", ".", "item", "(", ")", ",", "'rpn_loss_reg'", ":", "rpn_loss_reg", ".", "item", "(", ")", ",", "\n", "'rpn_loss'", ":", "rpn_loss", ".", "item", "(", ")", ",", "'rpn_fg_sum'", ":", "fg_mask", ".", "sum", "(", ")", ".", "item", "(", ")", "}", ")", "\n", "\n", "# return rpn_loss", "\n", "return", "rpn_loss", ",", "rpn_loss_cls", ",", "loss_loc", ",", "loss_angle", ",", "loss_size", ",", "loss_iou", "\n", "\n", "", "def", "get_rcnn_loss", "(", "model", ",", "ret_dict", ",", "tb_dict", ")", ":", "\n", "        ", "rcnn_cls", "=", "ret_dict", "[", "'rcnn_cls'", "]", "\n", "rcnn_reg", "=", "ret_dict", "[", "'rcnn_reg'", "]", "\n", "cls_label", "=", "ret_dict", "[", "'cls_label'", "]", ".", "float", "(", ")", "\n", "reg_valid_mask", "=", "ret_dict", "[", "'reg_valid_mask'", "]", "\n", "roi_boxes3d", "=", "ret_dict", "[", "'roi_boxes3d'", "]", "\n", "roi_size", "=", "roi_boxes3d", "[", ":", ",", "3", ":", "6", "]", "\n", "gt_boxes3d_ct", "=", "ret_dict", "[", "'gt_of_rois'", "]", "\n", "\n", "rcnn_cls_flat", "=", "rcnn_cls", ".", "view", "(", "-", "1", ")", "\n", "cls_label_flat", "=", "cls_label", ".", "view", "(", "-", "1", ")", "\n", "\n", "if", "cfg", ".", "TRAIN", ".", "FINETUNE", ":", "\n", "            ", "rcnn_loss", "=", "0", "\n", "", "else", ":", "\n", "# rcnn classification loss", "\n", "            ", "if", "isinstance", "(", "model", ",", "nn", ".", "DataParallel", ")", ":", "\n", "                ", "cls_loss_func", "=", "model", ".", "module", ".", "rcnn_net", ".", "cls_loss_func", "\n", "", "else", ":", "\n", "                ", "cls_loss_func", "=", "model", ".", "rcnn_net", ".", "cls_loss_func", "\n", "\n", "", "invalid_mask", "=", "torch", ".", "logical_or", "(", "torch", ".", "isnan", "(", "rcnn_cls_flat", ")", ",", "torch", ".", "isinf", "(", "rcnn_cls_flat", ")", ")", "\n", "if", "invalid_mask", ".", "sum", "(", ")", ">", "0", ":", "\n", "                ", "valid_mask", "=", "torch", ".", "logical_not", "(", "invalid_mask", ")", "\n", "\n", "rcnn_cls_flat", "=", "rcnn_cls_flat", "[", "valid_mask", "]", "\n", "rcnn_reg", "=", "rcnn_reg", "[", "valid_mask", "]", "\n", "cls_label_flat", "=", "cls_label_flat", "[", "valid_mask", "]", "\n", "reg_valid_mask", "=", "reg_valid_mask", "[", "valid_mask", "]", "\n", "roi_size", "=", "roi_size", "[", "valid_mask", "]", "\n", "gt_boxes3d_ct", "=", "gt_boxes3d_ct", "[", "valid_mask", "]", "\n", "\n", "", "if", "cfg", ".", "RCNN", ".", "LOSS_CLS", "==", "'SigmoidFocalLoss'", ":", "\n", "                ", "pos", "=", "(", "cls_label_flat", ">", "0", ")", ".", "float", "(", ")", "\n", "neg", "=", "(", "cls_label_flat", "==", "0", ")", ".", "float", "(", ")", "\n", "cls_weights", "=", "pos", "+", "neg", "\n", "pos_normalizer", "=", "pos", ".", "sum", "(", ")", "\n", "cls_weights", "=", "cls_weights", "/", "torch", ".", "clamp", "(", "pos_normalizer", ",", "min", "=", "1.0", ")", "\n", "\n", "rcnn_loss_cls", "=", "cls_loss_func", "(", "rcnn_cls_flat", ",", "pos", ",", "cls_weights", ")", "\n", "rcnn_loss_cls", "=", "rcnn_loss_cls", ".", "sum", "(", ")", "\n", "\n", "", "elif", "cfg", ".", "RCNN", ".", "LOSS_CLS", "==", "'BinaryCrossEntropy'", ":", "\n", "                ", "batch_loss_cls", "=", "F", ".", "binary_cross_entropy_with_logits", "(", "rcnn_cls_flat", ",", "cls_label_flat", ",", "reduction", "=", "'none'", ")", "\n", "if", "torch", ".", "isnan", "(", "batch_loss_cls", ")", ".", "any", "(", ")", ":", "\n", "                    ", "print", "(", "'cls loss nan before '", ",", "batch_loss_cls", ".", "shape", ")", "\n", "", "cls_valid_mask", "=", "(", "cls_label_flat", ">=", "0", ")", "\n", "rcnn_loss_cls", "=", "(", "batch_loss_cls", "[", "cls_valid_mask", "]", ")", ".", "sum", "(", ")", "/", "torch", ".", "clamp", "(", "cls_valid_mask", ".", "sum", "(", ")", ",", "min", "=", "1.0", ")", "\n", "if", "torch", ".", "isnan", "(", "rcnn_loss_cls", ")", ".", "any", "(", ")", ":", "\n", "                    ", "print", "(", "'cls loss nan '", ",", "batch_loss_cls", "[", "cls_valid_mask", "]", ".", "shape", ")", "\n", "\n", "", "", "elif", "cfg", ".", "TRAIN", ".", "LOSS_CLS", "==", "'CrossEntropy'", ":", "\n", "                ", "rcnn_cls_reshape", "=", "rcnn_cls", ".", "view", "(", "rcnn_cls", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", "cls_target", "=", "cls_label_flat", ".", "long", "(", ")", "\n", "cls_valid_mask", "=", "(", "cls_label_flat", ">=", "0", ")", ".", "float", "(", ")", "\n", "\n", "batch_loss_cls", "=", "cls_loss_func", "(", "rcnn_cls_reshape", ",", "cls_target", ")", "\n", "normalizer", "=", "torch", ".", "clamp", "(", "cls_valid_mask", ".", "sum", "(", ")", ",", "min", "=", "1.0", ")", "\n", "rcnn_loss_cls", "=", "(", "batch_loss_cls", ".", "mean", "(", "dim", "=", "1", ")", "*", "cls_valid_mask", ")", ".", "sum", "(", ")", "/", "normalizer", "\n", "\n", "", "else", ":", "\n", "                ", "raise", "NotImplementedError", "\n", "\n", "", "tb_dict", "[", "'rcnn_loss_cls'", "]", "=", "rcnn_loss_cls", ".", "item", "(", ")", "\n", "tb_dict", "[", "'rcnn_cls_fg'", "]", "=", "(", "cls_label_flat", ">", "0", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "tb_dict", "[", "'rcnn_cls_bg'", "]", "=", "(", "cls_label_flat", "==", "0", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "\n", "# rcnn regression loss", "\n", "fg_mask", "=", "(", "reg_valid_mask", ">", "0", ")", "\n", "if", "fg_mask", ".", "sum", "(", ")", ">", "0", ":", "\n", "                ", "if", "cfg", ".", "USE_IOU_BRANCH", ":", "\n", "                    ", "iou_branch_pred", "=", "ret_dict", "[", "'rcnn_iou_branch'", "]", "\n", "iou_branch_pred_fg_mask", "=", "iou_branch_pred", "[", "fg_mask", "]", "\n", "", "else", ":", "\n", "                    ", "iou_branch_pred_fg_mask", "=", "None", "\n", "", "all_anchor_size", "=", "roi_size", "\n", "anchor_size", "=", "all_anchor_size", "[", "fg_mask", "]", "if", "cfg", ".", "RCNN", ".", "SIZE_RES_ON_ROI", "else", "MEAN_SIZE", "\n", "\n", "loss_loc", ",", "loss_angle", ",", "loss_size", ",", "loss_iou", ",", "reg_loss_dict", "=", "loss_utils", ".", "get_reg_loss", "(", "cls_score", "=", "torch", ".", "sigmoid", "(", "rcnn_cls_flat", ")", "[", "fg_mask", "]", ",", "\n", "pred_reg", "=", "rcnn_reg", "[", "fg_mask", "]", ",", "\n", "reg_label", "=", "gt_boxes3d_ct", "[", "fg_mask", "]", ",", "\n", "loc_scope", "=", "cfg", ".", "RCNN", ".", "LOC_SCOPE", ",", "\n", "loc_bin_size", "=", "cfg", ".", "RCNN", ".", "LOC_BIN_SIZE", ",", "\n", "num_head_bin", "=", "cfg", ".", "RCNN", ".", "NUM_HEAD_BIN", ",", "\n", "anchor_size", "=", "anchor_size", ",", "\n", "get_xz_fine", "=", "True", ",", "get_y_by_bin", "=", "cfg", ".", "RCNN", ".", "LOC_Y_BY_BIN", ",", "\n", "loc_y_scope", "=", "cfg", ".", "RCNN", ".", "LOC_Y_SCOPE", ",", "loc_y_bin_size", "=", "cfg", ".", "RCNN", ".", "LOC_Y_BIN_SIZE", ",", "\n", "get_ry_fine", "=", "True", ",", "\n", "use_cls_score", "=", "True", ",", "\n", "use_mask_score", "=", "True", ",", "\n", "use_iou_branch", "=", "cfg", ".", "USE_IOU_BRANCH", ",", "\n", "iou_branch_pred", "=", "iou_branch_pred_fg_mask", ")", "\n", "\n", "loss_size", "=", "3", "*", "loss_size", "# consistent with old codes", "\n", "# rcnn_loss_reg = loss_loc + loss_angle + loss_size", "\n", "loss_iou", "=", "cfg", ".", "TRAIN", ".", "CE_WEIGHT", "*", "loss_iou", "\n", "if", "cfg", ".", "USE_IOU_BRANCH", ":", "\n", "                    ", "iou_branch_loss", "=", "reg_loss_dict", "[", "'iou_branch_loss'", "]", "\n", "rcnn_loss_reg", "=", "loss_loc", "+", "loss_angle", "+", "loss_size", "+", "loss_iou", "+", "iou_branch_loss", "\n", "", "else", ":", "\n", "                    ", "rcnn_loss_reg", "=", "loss_loc", "+", "loss_angle", "+", "loss_size", "+", "loss_iou", "\n", "", "tb_dict", ".", "update", "(", "reg_loss_dict", ")", "\n", "", "else", ":", "\n", "                ", "rcnn_loss_reg", "=", "0", "\n", "\n", "", "rcnn_loss", "=", "rcnn_loss_cls", "+", "rcnn_loss_reg", "\n", "\n", "tb_dict", "[", "'rcnn_loss_reg'", "]", "=", "rcnn_loss_reg", ".", "item", "(", ")", "if", "type", "(", "rcnn_loss_reg", ")", "==", "torch", ".", "Tensor", "else", "rcnn_loss_reg", "\n", "tb_dict", "[", "'rcnn_reg_fg'", "]", "=", "reg_valid_mask", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "\n", "# rcnn reid loss", "\n", "", "if", "cfg", ".", "REID", ".", "ENABLED", ":", "\n", "            ", "link_label_flat", "=", "ret_dict", "[", "'gt_links'", "]", "\n", "start_label_flat", "=", "ret_dict", "[", "'gt_starts'", "]", "\n", "end_label_flat", "=", "ret_dict", "[", "'gt_ends'", "]", "\n", "rcnn_link_flat", "=", "ret_dict", "[", "'rcnn_link'", "]", ".", "view", "(", "-", "1", ")", "\n", "rcnn_start_flat", "=", "ret_dict", "[", "'rcnn_start'", "]", ".", "view", "(", "-", "1", ")", "\n", "rcnn_end_flat", "=", "ret_dict", "[", "'rcnn_end'", "]", ".", "view", "(", "-", "1", ")", "\n", "\n", "# link", "\n", "pos", "=", "(", "link_label_flat", ">", "0", ")", "\n", "neg", "=", "(", "link_label_flat", "==", "0", ")", "\n", "tb_dict", "[", "'rcnn_link_pos'", "]", "=", "torch", ".", "sum", "(", "pos", ")", ".", "item", "(", ")", "\n", "tb_dict", "[", "'rcnn_link_neg'", "]", "=", "torch", ".", "sum", "(", "neg", ")", ".", "item", "(", ")", "\n", "rcnn_loss_link", "=", "F", ".", "l1_loss", "(", "rcnn_link_flat", ",", "link_label_flat", ",", "reduction", "=", "'mean'", ")", "\n", "\n", "if", "not", "torch", ".", "isnan", "(", "rcnn_loss_link", ")", ":", "\n", "                ", "rcnn_loss", "+=", "rcnn_loss_link", "*", "cfg", ".", "TRAIN", ".", "LINK_TRAIN_WEIGHT", "\n", "\n", "", "if", "rcnn_loss_link", ">", "0", ":", "\n", "                ", "tb_dict", "[", "'rcnn_loss_link_mean'", "]", "=", "rcnn_loss_link", ".", "item", "(", ")", "\n", "\n", "# start end", "\n", "", "pos", "=", "(", "start_label_flat", ">", "0", ")", "\n", "neg", "=", "(", "start_label_flat", "==", "0", ")", "\n", "tb_dict", "[", "'rcnn_start_pos'", "]", "=", "torch", ".", "sum", "(", "pos", ")", ".", "item", "(", ")", "\n", "tb_dict", "[", "'rcnn_start_neg'", "]", "=", "torch", ".", "sum", "(", "neg", ")", ".", "item", "(", ")", "\n", "pos", "=", "(", "end_label_flat", ">", "0", ")", "\n", "neg", "=", "(", "end_label_flat", "==", "0", ")", "\n", "tb_dict", "[", "'rcnn_end_pos'", "]", "=", "torch", ".", "sum", "(", "pos", ")", ".", "item", "(", ")", "\n", "tb_dict", "[", "'rcnn_end_neg'", "]", "=", "torch", ".", "sum", "(", "neg", ")", ".", "item", "(", ")", "\n", "if", "cfg", ".", "REID", ".", "LOSS_LINK", "==", "'L1'", ":", "\n", "                ", "rcnn_loss_start", "=", "F", ".", "l1_loss", "(", "torch", ".", "sigmoid", "(", "rcnn_start_flat", ")", ",", "start_label_flat", ",", "reduction", "=", "'mean'", ")", "\n", "", "else", ":", "\n", "                ", "raise", "NotImplementedError", "\n", "", "if", "cfg", ".", "REID", ".", "LOSS_SE", "==", "'L1'", ":", "\n", "                ", "rcnn_loss_end", "=", "F", ".", "l1_loss", "(", "torch", ".", "sigmoid", "(", "rcnn_end_flat", ")", ",", "end_label_flat", ",", "reduction", "=", "'mean'", ")", "\n", "", "else", ":", "\n", "                ", "raise", "NotImplementedError", "\n", "\n", "", "if", "not", "torch", ".", "isnan", "(", "rcnn_loss_start", ")", ":", "\n", "                ", "rcnn_loss", "+=", "rcnn_loss_start", "*", "cfg", ".", "TRAIN", ".", "SE_TRAIN_WEIGHT", "\n", "", "if", "not", "torch", ".", "isnan", "(", "rcnn_loss_end", ")", ":", "\n", "                ", "rcnn_loss", "+=", "rcnn_loss_end", "*", "cfg", ".", "TRAIN", ".", "SE_TRAIN_WEIGHT", "\n", "\n", "", "if", "rcnn_loss_start", ">", "0", ":", "\n", "                ", "tb_dict", "[", "'rcnn_loss_start_mean'", "]", "=", "rcnn_loss_start", ".", "item", "(", ")", "\n", "", "if", "rcnn_loss_end", ">", "0", ":", "\n", "                ", "tb_dict", "[", "'rcnn_loss_end_mean'", "]", "=", "rcnn_loss_end", ".", "item", "(", ")", "\n", "\n", "", "", "if", "rcnn_loss", ">", "0", ":", "\n", "            ", "tb_dict", "[", "'rcnn_loss'", "]", "=", "rcnn_loss", ".", "item", "(", ")", "\n", "\n", "", "return", "rcnn_loss", "\n", "\n", "", "return", "model_fn_train", "\n", "", ""]], "home.repos.pwc.inspect_result.kemo-huang_jmodt.modeling.backbone.BasicBlock.__init__": [[16, 22], ["torch.Module.__init__", "backbone.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "backbone.conv3x3"], "methods", ["home.repos.pwc.inspect_result.kemo-huang_jmodt.pointnet2.pytorch_utils.FC.__init__", "home.repos.pwc.inspect_result.kemo-huang_jmodt.modeling.backbone.conv3x3", "home.repos.pwc.inspect_result.kemo-huang_jmodt.modeling.backbone.conv3x3"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "in_channels", ",", "out_channels", ",", "stride", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "out_channels", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "out_channels", ",", "out_channels", ",", "2", "*", "stride", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kemo-huang_jmodt.modeling.backbone.BasicBlock.forward": [[23, 31], ["backbone.BasicBlock.conv1", "backbone.BasicBlock.bn1", "backbone.BasicBlock.relu", "backbone.BasicBlock.conv2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.kemo-huang_jmodt.modeling.backbone.IALayer.__init__": [[34, 44], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.kemo-huang_jmodt.pointnet2.pytorch_utils.FC.__init__"], ["    ", "def", "__init__", "(", "self", ",", "channels", ")", ":", "\n", "        ", "super", "(", "IALayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "ic", ",", "self", ".", "pc", "=", "channels", "\n", "rc", "=", "self", ".", "pc", "//", "4", "\n", "self", ".", "conv1", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv1d", "(", "self", ".", "ic", ",", "self", ".", "pc", ",", "1", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "self", ".", "pc", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ")", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "self", ".", "ic", ",", "rc", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "self", ".", "pc", ",", "rc", ")", "\n", "self", ".", "fc3", "=", "nn", ".", "Linear", "(", "rc", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kemo-huang_jmodt.modeling.backbone.IALayer.forward": [[45, 59], ["img_feas.size", "img_feas.transpose().contiguous().view", "point_feas.transpose().contiguous().view", "backbone.IALayer.fc1", "backbone.IALayer.fc2", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "att.view.view.squeeze", "att.view.view.view", "backbone.IALayer.conv1", "backbone.IALayer.fc3", "img_feas.transpose().contiguous", "point_feas.transpose().contiguous", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "img_feas.transpose", "point_feas.transpose"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "img_feas", ",", "point_feas", ")", ":", "\n", "        ", "batch", "=", "img_feas", ".", "size", "(", "0", ")", "\n", "img_feas_f", "=", "img_feas", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "self", ".", "ic", ")", "# BCN->BNC->(BN)C", "\n", "point_feas_f", "=", "point_feas", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "self", ".", "pc", ")", "# BCN->BNC->(BN)C'", "\n", "ri", "=", "self", ".", "fc1", "(", "img_feas_f", ")", "\n", "rp", "=", "self", ".", "fc2", "(", "point_feas_f", ")", "\n", "att", "=", "torch", ".", "sigmoid", "(", "self", ".", "fc3", "(", "torch", ".", "tanh", "(", "ri", "+", "rp", ")", ")", ")", "# BNx1", "\n", "att", "=", "att", ".", "squeeze", "(", "1", ")", "\n", "att", "=", "att", ".", "view", "(", "batch", ",", "1", ",", "-", "1", ")", "# B1N", "\n", "\n", "img_feas_new", "=", "self", ".", "conv1", "(", "img_feas", ")", "\n", "out", "=", "img_feas_new", "*", "att", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.kemo-huang_jmodt.modeling.backbone.AttentionFusion.__init__": [[62, 68], ["torch.Module.__init__", "backbone.IALayer", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d"], "methods", ["home.repos.pwc.inspect_result.kemo-huang_jmodt.pointnet2.pytorch_utils.FC.__init__"], ["    ", "def", "__init__", "(", "self", ",", "img_in_channels", ",", "pc_in_channels", ",", "out_channels", ")", ":", "\n", "        ", "super", "(", "AttentionFusion", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "IA_Layer", "=", "IALayer", "(", "channels", "=", "[", "img_in_channels", ",", "pc_in_channels", "]", ")", "\n", "self", ".", "conv1", "=", "torch", ".", "nn", ".", "Conv1d", "(", "pc_in_channels", "+", "pc_in_channels", ",", "out_channels", ",", "1", ")", "\n", "self", ".", "bn1", "=", "torch", ".", "nn", ".", "BatchNorm1d", "(", "out_channels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kemo-huang_jmodt.modeling.backbone.AttentionFusion.forward": [[69, 77], ["backbone.AttentionFusion.IA_Layer", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.relu", "torch.relu", "torch.relu", "backbone.AttentionFusion.bn1", "backbone.AttentionFusion.conv1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "point_features", ",", "img_features", ")", ":", "\n", "        ", "img_features", "=", "self", ".", "IA_Layer", "(", "img_features", ",", "point_features", ")", "\n", "\n", "# fusion_features = img_features + point_features", "\n", "fusion_features", "=", "torch", ".", "cat", "(", "[", "point_features", ",", "img_features", "]", ",", "dim", "=", "1", ")", "\n", "fusion_features", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "fusion_features", ")", ")", ")", "\n", "\n", "return", "fusion_features", "\n", "\n"]], "home.repos.pwc.inspect_result.kemo-huang_jmodt.modeling.backbone.PointNet2MSG.__init__": [[93, 147], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "jmodt.config.cfg.RPN.SA_CONFIG.NPOINTS.__len__", "jmodt.config.cfg.RPN.SA_CONFIG.MLPS[].copy", "range", "backbone.PointNet2MSG.SA_modules.append", "skip_channel_list.append", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "backbone.AttentionFusion", "jmodt.config.cfg.RPN.FP_MLPS.__len__", "backbone.PointNet2MSG.FP_modules.append", "jmodt.config.cfg.RPN.SA_CONFIG.MLPS[].copy.__len__", "jmodt.ops.pointnet2.pointnet2_modules.PointnetSAModuleMSG", "backbone.PointNet2MSG.Img_Block.append", "backbone.PointNet2MSG.Fusion_Conv.append", "backbone.PointNet2MSG.DeConv.append", "sum", "jmodt.ops.pointnet2.pointnet2_modules.PointnetFPModule", "len", "backbone.BasicBlock", "backbone.AttentionFusion", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "len"], "methods", ["home.repos.pwc.inspect_result.kemo-huang_jmodt.pointnet2.pytorch_utils.FC.__init__", "home.repos.pwc.inspect_result.kemo-huang_jmodt.datasets.kitti_dataset.KittiDataset.__len__", "home.repos.pwc.inspect_result.kemo-huang_jmodt.datasets.kitti_dataset.KittiDataset.__len__", "home.repos.pwc.inspect_result.kemo-huang_jmodt.datasets.kitti_dataset.KittiDataset.__len__"], ["    ", "def", "__init__", "(", "self", ",", "input_channels", "=", "6", ",", "use_xyz", "=", "True", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "SA_modules", "=", "nn", ".", "ModuleList", "(", ")", "\n", "channel_in", "=", "input_channels", "\n", "\n", "skip_channel_list", "=", "[", "input_channels", "]", "\n", "for", "k", "in", "range", "(", "cfg", ".", "RPN", ".", "SA_CONFIG", ".", "NPOINTS", ".", "__len__", "(", ")", ")", ":", "\n", "            ", "mlps", "=", "cfg", ".", "RPN", ".", "SA_CONFIG", ".", "MLPS", "[", "k", "]", ".", "copy", "(", ")", "\n", "channel_out", "=", "0", "\n", "for", "idx", "in", "range", "(", "mlps", ".", "__len__", "(", ")", ")", ":", "\n", "                ", "mlps", "[", "idx", "]", "=", "[", "channel_in", "]", "+", "mlps", "[", "idx", "]", "\n", "channel_out", "+=", "mlps", "[", "idx", "]", "[", "-", "1", "]", "\n", "\n", "", "self", ".", "SA_modules", ".", "append", "(", "\n", "PointnetSAModuleMSG", "(", "\n", "npoint", "=", "cfg", ".", "RPN", ".", "SA_CONFIG", ".", "NPOINTS", "[", "k", "]", ",", "\n", "radii", "=", "cfg", ".", "RPN", ".", "SA_CONFIG", ".", "RADIUS", "[", "k", "]", ",", "\n", "nsamples", "=", "cfg", ".", "RPN", ".", "SA_CONFIG", ".", "NSAMPLE", "[", "k", "]", ",", "\n", "mlps", "=", "mlps", ",", "\n", "use_xyz", "=", "use_xyz", ",", "\n", "bn", "=", "cfg", ".", "RPN", ".", "USE_BN", "\n", ")", "\n", ")", "\n", "skip_channel_list", ".", "append", "(", "channel_out", ")", "\n", "channel_in", "=", "channel_out", "\n", "\n", "", "if", "cfg", ".", "LI_FUSION", ".", "ENABLED", ":", "\n", "            ", "self", ".", "Img_Block", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "Fusion_Conv", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "DeConv", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "cfg", ".", "LI_FUSION", ".", "IMG_CHANNELS", ")", "-", "1", ")", ":", "\n", "                ", "self", ".", "Img_Block", ".", "append", "(", "\n", "BasicBlock", "(", "cfg", ".", "LI_FUSION", ".", "IMG_CHANNELS", "[", "i", "]", ",", "cfg", ".", "LI_FUSION", ".", "IMG_CHANNELS", "[", "i", "+", "1", "]", ",", "stride", "=", "1", ")", ")", "\n", "self", ".", "Fusion_Conv", ".", "append", "(", "\n", "AttentionFusion", "(", "cfg", ".", "LI_FUSION", ".", "IMG_CHANNELS", "[", "i", "+", "1", "]", ",", "cfg", ".", "LI_FUSION", ".", "POINT_CHANNELS", "[", "i", "]", ",", "\n", "cfg", ".", "LI_FUSION", ".", "POINT_CHANNELS", "[", "i", "]", ")", ")", "\n", "\n", "self", ".", "DeConv", ".", "append", "(", "nn", ".", "ConvTranspose2d", "(", "cfg", ".", "LI_FUSION", ".", "IMG_CHANNELS", "[", "i", "+", "1", "]", ",", "cfg", ".", "LI_FUSION", ".", "DeConv_Reduce", "[", "i", "]", ",", "\n", "kernel_size", "=", "cfg", ".", "LI_FUSION", ".", "DeConv_Kernels", "[", "i", "]", ",", "\n", "stride", "=", "cfg", ".", "LI_FUSION", ".", "DeConv_Kernels", "[", "i", "]", ")", ")", "\n", "\n", "", "self", ".", "image_fusion_conv", "=", "nn", ".", "Conv2d", "(", "sum", "(", "cfg", ".", "LI_FUSION", ".", "DeConv_Reduce", ")", ",", "\n", "cfg", ".", "LI_FUSION", ".", "IMG_FEATURES_CHANNEL", "//", "4", ",", "kernel_size", "=", "1", ")", "\n", "self", ".", "image_fusion_bn", "=", "torch", ".", "nn", ".", "BatchNorm2d", "(", "cfg", ".", "LI_FUSION", ".", "IMG_FEATURES_CHANNEL", "//", "4", ")", "\n", "self", ".", "final_fusion_img_point", "=", "AttentionFusion", "(", "cfg", ".", "LI_FUSION", ".", "IMG_FEATURES_CHANNEL", "//", "4", ",", "\n", "cfg", ".", "LI_FUSION", ".", "IMG_FEATURES_CHANNEL", ",", "\n", "cfg", ".", "LI_FUSION", ".", "IMG_FEATURES_CHANNEL", ")", "\n", "\n", "", "self", ".", "FP_modules", "=", "nn", ".", "ModuleList", "(", ")", "\n", "\n", "for", "k", "in", "range", "(", "cfg", ".", "RPN", ".", "FP_MLPS", ".", "__len__", "(", ")", ")", ":", "\n", "            ", "pre_channel", "=", "cfg", ".", "RPN", ".", "FP_MLPS", "[", "k", "+", "1", "]", "[", "-", "1", "]", "if", "k", "+", "1", "<", "len", "(", "cfg", ".", "RPN", ".", "FP_MLPS", ")", "else", "channel_out", "\n", "self", ".", "FP_modules", ".", "append", "(", "\n", "PointnetFPModule", "(", "mlp", "=", "[", "pre_channel", "+", "skip_channel_list", "[", "k", "]", "]", "+", "cfg", ".", "RPN", ".", "FP_MLPS", "[", "k", "]", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.kemo-huang_jmodt.modeling.backbone.PointNet2MSG._break_up_pc": [[149, 158], ["pc[].contiguous", "pc[].transpose().contiguous", "pc.size", "pc[].transpose"], "methods", ["None"], ["", "", "@", "staticmethod", "\n", "def", "_break_up_pc", "(", "pc", ")", ":", "\n", "        ", "xyz", "=", "pc", "[", "...", ",", "0", ":", "3", "]", ".", "contiguous", "(", ")", "\n", "features", "=", "(", "\n", "pc", "[", "...", ",", "3", ":", "]", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "if", "pc", ".", "size", "(", "-", "1", ")", ">", "3", "else", "None", "\n", ")", "\n", "\n", "return", "xyz", ",", "features", "\n", "\n"]], "home.repos.pwc.inspect_result.kemo-huang_jmodt.modeling.backbone.PointNet2MSG.forward": [[159, 199], ["backbone.PointNet2MSG._break_up_pc", "range", "range", "len", "l_xyz.append", "l_features.append", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.relu", "torch.relu", "torch.relu", "backbone.feature_gather", "backbone.PointNet2MSG.final_fusion_img_point", "li_index.long().unsqueeze().repeat.long().unsqueeze().repeat.long().unsqueeze().repeat", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "backbone.feature_gather", "l_xy_cor.append", "img.append", "de_conv.append", "backbone.PointNet2MSG.image_fusion_bn", "len", "len", "backbone.PointNet2MSG.image_fusion_conv", "li_index.long().unsqueeze().repeat.long().unsqueeze().repeat.long().unsqueeze", "li_index.long().unsqueeze().repeat.long().unsqueeze().repeat.long"], "methods", ["home.repos.pwc.inspect_result.kemo-huang_jmodt.modeling.backbone.PointNet2MSG._break_up_pc", "home.repos.pwc.inspect_result.kemo-huang_jmodt.modeling.backbone.feature_gather", "home.repos.pwc.inspect_result.kemo-huang_jmodt.modeling.backbone.feature_gather"], ["", "def", "forward", "(", "self", ",", "pc", ",", "image", "=", "None", ",", "xy", "=", "None", ")", ":", "\n", "        ", "xyz", ",", "features", "=", "self", ".", "_break_up_pc", "(", "pc", ")", "\n", "\n", "l_xyz", ",", "l_features", "=", "[", "xyz", "]", ",", "[", "features", "]", "\n", "l_xy_cor", "=", "[", "xy", "]", "\n", "img", "=", "[", "image", "]", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "SA_modules", ")", ")", ":", "\n", "            ", "li_xyz", ",", "li_features", ",", "li_index", "=", "self", ".", "SA_modules", "[", "i", "]", "(", "l_xyz", "[", "i", "]", ",", "l_features", "[", "i", "]", ")", "\n", "\n", "if", "cfg", ".", "LI_FUSION", ".", "ENABLED", ":", "\n", "                ", "li_index", "=", "li_index", ".", "long", "(", ")", ".", "unsqueeze", "(", "-", "1", ")", ".", "repeat", "(", "1", ",", "1", ",", "2", ")", "\n", "li_xy_cor", "=", "torch", ".", "gather", "(", "l_xy_cor", "[", "i", "]", ",", "1", ",", "li_index", ")", "\n", "image", "=", "self", ".", "Img_Block", "[", "i", "]", "(", "img", "[", "i", "]", ")", "\n", "img_gather_feature", "=", "feature_gather", "(", "image", ",", "li_xy_cor", ")", "# , scale= 2**(i+1))", "\n", "\n", "li_features", "=", "self", ".", "Fusion_Conv", "[", "i", "]", "(", "li_features", ",", "img_gather_feature", ")", "\n", "l_xy_cor", ".", "append", "(", "li_xy_cor", ")", "\n", "img", ".", "append", "(", "image", ")", "\n", "\n", "", "l_xyz", ".", "append", "(", "li_xyz", ")", "\n", "l_features", ".", "append", "(", "li_features", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "-", "1", ",", "-", "(", "len", "(", "self", ".", "FP_modules", ")", "+", "1", ")", ",", "-", "1", ")", ":", "\n", "            ", "l_features", "[", "i", "-", "1", "]", "=", "self", ".", "FP_modules", "[", "i", "]", "(", "\n", "l_xyz", "[", "i", "-", "1", "]", ",", "l_xyz", "[", "i", "]", ",", "l_features", "[", "i", "-", "1", "]", ",", "l_features", "[", "i", "]", "\n", ")", "\n", "\n", "", "if", "cfg", ".", "LI_FUSION", ".", "ENABLED", ":", "\n", "# for i in range(1,len(img))", "\n", "            ", "de_conv", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "cfg", ".", "LI_FUSION", ".", "IMG_CHANNELS", ")", "-", "1", ")", ":", "\n", "                ", "de_conv", ".", "append", "(", "self", ".", "DeConv", "[", "i", "]", "(", "img", "[", "i", "+", "1", "]", ")", ")", "\n", "", "de_concat", "=", "torch", ".", "cat", "(", "de_conv", ",", "dim", "=", "1", ")", "\n", "\n", "img_fusion", "=", "F", ".", "relu", "(", "self", ".", "image_fusion_bn", "(", "self", ".", "image_fusion_conv", "(", "de_concat", ")", ")", ")", "\n", "img_fusion_gather_feature", "=", "feature_gather", "(", "img_fusion", ",", "xy", ")", "\n", "l_features", "[", "0", "]", "=", "self", ".", "final_fusion_img_point", "(", "l_features", "[", "0", "]", ",", "img_fusion_gather_feature", ")", "\n", "\n", "", "return", "l_xyz", "[", "0", "]", ",", "l_features", "[", "0", "]", "\n", "", "", ""]], "home.repos.pwc.inspect_result.kemo-huang_jmodt.modeling.backbone.conv3x3": [[9, 13], ["torch.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_channels", ",", "out_channels", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"\"\"3x3 convolution with padding\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kemo-huang_jmodt.modeling.backbone.feature_gather": [[79, 90], ["xy.unsqueeze.unsqueeze", "torch.grid_sample", "F.grid_sample.squeeze", "feature_map.float"], "function", ["None"], ["", "", "def", "feature_gather", "(", "feature_map", ",", "xy", ")", ":", "\n", "    ", "\"\"\"\n    :param xy:(B,N,2)  normalize to [-1,1]\n    :param feature_map:(B,C,H,W)\n    :return:\n    \"\"\"", "\n", "xy", "=", "xy", ".", "unsqueeze", "(", "1", ")", "# xy(B,N,2)->(B,1,N,2)", "\n", "# use grid_sample for this.", "\n", "interpolate_feature", "=", "F", ".", "grid_sample", "(", "feature_map", ".", "float", "(", ")", ",", "xy", ",", "align_corners", "=", "True", ")", "# (B,C,1,N)", "\n", "\n", "return", "interpolate_feature", ".", "squeeze", "(", "2", ")", "# (B,C,N)", "\n", "\n"]], "home.repos.pwc.inspect_result.kemo-huang_jmodt.layers.proposal_layer.ProposalLayer.__init__": [[11, 15], ["torch.Module.__init__", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "methods", ["home.repos.pwc.inspect_result.kemo-huang_jmodt.pointnet2.pytorch_utils.FC.__init__"], ["    ", "def", "__init__", "(", "self", ",", "mode", "=", "'TRAIN'", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "mode", "=", "mode", "\n", "self", ".", "MEAN_SIZE", "=", "torch", ".", "from_numpy", "(", "cfg", ".", "CLS_MEAN_SIZE", "[", "0", "]", ")", ".", "cuda", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kemo-huang_jmodt.layers.proposal_layer.ProposalLayer.forward": [[16, 58], ["jmodt.utils.bbox_transform.decode_bbox_target", "jmodt.utils.bbox_transform.decode_bbox_target", "proposals.view.view.view", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "scores.size", "scores.new().zero_", "scores.new().zero_", "range", "xyz.view", "rpn_reg.view", "proposals_single.size", "scores.new", "scores.new", "proposal_layer.ProposalLayer.distance_based_proposal", "proposal_layer.ProposalLayer.score_based_proposal"], "methods", ["home.repos.pwc.inspect_result.kemo-huang_jmodt.utils.bbox_transform.decode_bbox_target", "home.repos.pwc.inspect_result.kemo-huang_jmodt.utils.bbox_transform.decode_bbox_target", "home.repos.pwc.inspect_result.kemo-huang_jmodt.layers.proposal_layer.ProposalLayer.distance_based_proposal", "home.repos.pwc.inspect_result.kemo-huang_jmodt.layers.proposal_layer.ProposalLayer.score_based_proposal"], ["", "def", "forward", "(", "self", ",", "rpn_scores", ",", "rpn_reg", ",", "xyz", ")", ":", "\n", "        ", "\"\"\"\n        :param rpn_scores: (B, N)\n        :param rpn_reg: (B, N, 8)\n        :param xyz: (B, N, 3)\n        :return bbox3d: (B, M, 7)\n        \"\"\"", "\n", "batch_size", "=", "xyz", ".", "shape", "[", "0", "]", "\n", "proposals", "=", "decode_bbox_target", "(", "xyz", ".", "view", "(", "-", "1", ",", "3", ")", ",", "rpn_reg", ".", "view", "(", "-", "1", ",", "rpn_reg", ".", "shape", "[", "-", "1", "]", ")", ",", "\n", "anchor_size", "=", "self", ".", "MEAN_SIZE", ",", "\n", "loc_scope", "=", "cfg", ".", "RPN", ".", "LOC_SCOPE", ",", "\n", "loc_bin_size", "=", "cfg", ".", "RPN", ".", "LOC_BIN_SIZE", ",", "\n", "num_head_bin", "=", "cfg", ".", "RPN", ".", "NUM_HEAD_BIN", ",", "\n", "get_xz_fine", "=", "cfg", ".", "RPN", ".", "LOC_XZ_FINE", ",", "\n", "get_y_by_bin", "=", "False", ",", "\n", "get_ry_fine", "=", "False", ")", "# (N, 7)", "\n", "proposals", "[", ":", ",", "1", "]", "+=", "proposals", "[", ":", ",", "3", "]", "/", "2", "# set y as the center of bottom", "\n", "proposals", "=", "proposals", ".", "view", "(", "batch_size", ",", "-", "1", ",", "7", ")", "\n", "\n", "scores", "=", "rpn_scores", "\n", "_", ",", "sorted_idxs", "=", "torch", ".", "sort", "(", "scores", ",", "dim", "=", "1", ",", "descending", "=", "True", ")", "\n", "\n", "batch_size", "=", "scores", ".", "size", "(", "0", ")", "\n", "ret_bbox3d", "=", "scores", ".", "new", "(", "batch_size", ",", "cfg", "[", "self", ".", "mode", "]", ".", "RPN_POST_NMS_TOP_N", ",", "7", ")", ".", "zero_", "(", ")", "\n", "ret_scores", "=", "scores", ".", "new", "(", "batch_size", ",", "cfg", "[", "self", ".", "mode", "]", ".", "RPN_POST_NMS_TOP_N", ")", ".", "zero_", "(", ")", "\n", "for", "k", "in", "range", "(", "batch_size", ")", ":", "\n", "            ", "scores_single", "=", "scores", "[", "k", "]", "\n", "proposals_single", "=", "proposals", "[", "k", "]", "\n", "order_single", "=", "sorted_idxs", "[", "k", "]", "\n", "\n", "if", "cfg", ".", "EVAL", ".", "RPN_DISTANCE_BASED_PROPOSE", ":", "\n", "                ", "scores_single", ",", "proposals_single", "=", "self", ".", "distance_based_proposal", "(", "scores_single", ",", "proposals_single", ",", "\n", "order_single", ")", "\n", "", "else", ":", "\n", "                ", "scores_single", ",", "proposals_single", "=", "self", ".", "score_based_proposal", "(", "scores_single", ",", "proposals_single", ",", "\n", "order_single", ")", "\n", "\n", "", "proposals_tot", "=", "proposals_single", ".", "size", "(", "0", ")", "\n", "ret_bbox3d", "[", "k", ",", ":", "proposals_tot", "]", "=", "proposals_single", "\n", "ret_scores", "[", "k", ",", ":", "proposals_tot", "]", "=", "scores_single", "\n", "\n", "", "return", "ret_bbox3d", ",", "ret_scores", "\n", "\n"]], "home.repos.pwc.inspect_result.kemo-huang_jmodt.layers.proposal_layer.ProposalLayer.distance_based_proposal": [[59, 122], ["range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "int", "int", "len", "jmodt.boxes3d_to_bev_torch", "jmodt.boxes3d_to_bev_torch", "scores_single_list.append", "proposals_single_list.append", "int", "int", "dist_mask.sum", "jmodt.nms_gpu", "jmodt.nms_gpu", "jmodt.nms_normal_gpu", "jmodt.nms_normal_gpu"], "methods", ["home.repos.pwc.inspect_result.kemo-huang_jmodt.utils.kitti_utils.boxes3d_to_bev_torch", "home.repos.pwc.inspect_result.kemo-huang_jmodt.utils.kitti_utils.boxes3d_to_bev_torch", "home.repos.pwc.inspect_result.kemo-huang_jmodt.iou3d.iou3d_utils.nms_gpu", "home.repos.pwc.inspect_result.kemo-huang_jmodt.iou3d.iou3d_utils.nms_gpu", "home.repos.pwc.inspect_result.kemo-huang_jmodt.iou3d.iou3d_utils.nms_normal_gpu", "home.repos.pwc.inspect_result.kemo-huang_jmodt.iou3d.iou3d_utils.nms_normal_gpu"], ["", "def", "distance_based_proposal", "(", "self", ",", "scores", ",", "proposals", ",", "order", ")", ":", "\n", "        ", "\"\"\"\n         propose rois in two area based on the distance\n        :param scores: (N)\n        :param proposals: (N, 7)\n        :param order: (N)\n        \"\"\"", "\n", "nms_range_list", "=", "[", "0", ",", "40.0", ",", "80.0", "]", "\n", "pre_tot_top_n", "=", "cfg", "[", "self", ".", "mode", "]", ".", "RPN_PRE_NMS_TOP_N", "\n", "pre_top_n_list", "=", "[", "0", ",", "int", "(", "pre_tot_top_n", "*", "0.7", ")", ",", "pre_tot_top_n", "-", "int", "(", "pre_tot_top_n", "*", "0.7", ")", "]", "\n", "post_tot_top_n", "=", "cfg", "[", "self", ".", "mode", "]", ".", "RPN_POST_NMS_TOP_N", "\n", "post_top_n_list", "=", "[", "0", ",", "int", "(", "post_tot_top_n", "*", "0.7", ")", ",", "post_tot_top_n", "-", "int", "(", "post_tot_top_n", "*", "0.7", ")", "]", "\n", "\n", "scores_single_list", ",", "proposals_single_list", "=", "[", "]", ",", "[", "]", "\n", "\n", "# sort by score", "\n", "scores_ordered", "=", "scores", "[", "order", "]", "\n", "proposals_ordered", "=", "proposals", "[", "order", "]", "\n", "\n", "dist", "=", "proposals_ordered", "[", ":", ",", "2", "]", "\n", "first_mask", "=", "(", "dist", ">", "nms_range_list", "[", "0", "]", ")", "&", "(", "dist", "<=", "nms_range_list", "[", "1", "]", ")", "\n", "for", "i", "in", "range", "(", "1", ",", "len", "(", "nms_range_list", ")", ")", ":", "\n", "# get proposal distance mask", "\n", "            ", "dist_mask", "=", "(", "(", "dist", ">", "nms_range_list", "[", "i", "-", "1", "]", ")", "&", "(", "dist", "<=", "nms_range_list", "[", "i", "]", ")", ")", "\n", "\n", "if", "dist_mask", ".", "sum", "(", ")", "!=", "0", ":", "\n", "# this area has points", "\n", "# reduce by mask", "\n", "                ", "cur_scores", "=", "scores_ordered", "[", "dist_mask", "]", "\n", "cur_proposals", "=", "proposals_ordered", "[", "dist_mask", "]", "\n", "\n", "# fetch pre nms top K", "\n", "cur_scores", "=", "cur_scores", "[", ":", "pre_top_n_list", "[", "i", "]", "]", "\n", "cur_proposals", "=", "cur_proposals", "[", ":", "pre_top_n_list", "[", "i", "]", "]", "\n", "", "else", ":", "\n", "                ", "if", "i", "==", "1", ":", "\n", "                    ", "continue", "\n", "# this area doesn't have any points, so use rois of first area", "\n", "", "cur_scores", "=", "scores_ordered", "[", "first_mask", "]", "\n", "cur_proposals", "=", "proposals_ordered", "[", "first_mask", "]", "\n", "\n", "# fetch top K of first area", "\n", "cur_scores", "=", "cur_scores", "[", "pre_top_n_list", "[", "i", "-", "1", "]", ":", "]", "[", ":", "pre_top_n_list", "[", "i", "]", "]", "\n", "cur_proposals", "=", "cur_proposals", "[", "pre_top_n_list", "[", "i", "-", "1", "]", ":", "]", "[", ":", "pre_top_n_list", "[", "i", "]", "]", "\n", "\n", "# oriented nms", "\n", "", "boxes_bev", "=", "kitti_utils", ".", "boxes3d_to_bev_torch", "(", "cur_proposals", ")", "\n", "if", "cfg", ".", "RPN", ".", "NMS_TYPE", "==", "'rotate'", ":", "\n", "                ", "keep_idx", "=", "iou3d_utils", ".", "nms_gpu", "(", "boxes_bev", ",", "cur_scores", ",", "cfg", "[", "self", ".", "mode", "]", ".", "RPN_NMS_THRESH", ")", "\n", "", "elif", "cfg", ".", "RPN", ".", "NMS_TYPE", "==", "'normal'", ":", "\n", "                ", "keep_idx", "=", "iou3d_utils", ".", "nms_normal_gpu", "(", "boxes_bev", ",", "cur_scores", ",", "cfg", "[", "self", ".", "mode", "]", ".", "RPN_NMS_THRESH", ")", "\n", "", "else", ":", "\n", "                ", "raise", "NotImplementedError", "\n", "\n", "# Fetch post nms top k", "\n", "", "keep_idx", "=", "keep_idx", "[", ":", "post_top_n_list", "[", "i", "]", "]", "\n", "\n", "scores_single_list", ".", "append", "(", "cur_scores", "[", "keep_idx", "]", ")", "\n", "proposals_single_list", ".", "append", "(", "cur_proposals", "[", "keep_idx", "]", ")", "\n", "\n", "", "scores_single", "=", "torch", ".", "cat", "(", "scores_single_list", ",", "dim", "=", "0", ")", "\n", "proposals_single", "=", "torch", ".", "cat", "(", "proposals_single_list", ",", "dim", "=", "0", ")", "\n", "return", "scores_single", ",", "proposals_single", "\n", "\n"]], "home.repos.pwc.inspect_result.kemo-huang_jmodt.layers.proposal_layer.ProposalLayer.score_based_proposal": [[123, 145], ["jmodt.boxes3d_to_bev_torch", "jmodt.boxes3d_to_bev_torch", "jmodt.nms_gpu", "jmodt.nms_gpu"], "methods", ["home.repos.pwc.inspect_result.kemo-huang_jmodt.utils.kitti_utils.boxes3d_to_bev_torch", "home.repos.pwc.inspect_result.kemo-huang_jmodt.utils.kitti_utils.boxes3d_to_bev_torch", "home.repos.pwc.inspect_result.kemo-huang_jmodt.iou3d.iou3d_utils.nms_gpu", "home.repos.pwc.inspect_result.kemo-huang_jmodt.iou3d.iou3d_utils.nms_gpu"], ["", "def", "score_based_proposal", "(", "self", ",", "scores", ",", "proposals", ",", "order", ")", ":", "\n", "        ", "\"\"\"\n         propose rois in two area based on the distance\n        :param scores: (N)\n        :param proposals: (N, 7)\n        :param order: (N)\n        \"\"\"", "\n", "# sort by score", "\n", "scores_ordered", "=", "scores", "[", "order", "]", "\n", "proposals_ordered", "=", "proposals", "[", "order", "]", "\n", "\n", "# pre nms top K", "\n", "cur_scores", "=", "scores_ordered", "[", ":", "cfg", "[", "self", ".", "mode", "]", ".", "RPN_PRE_NMS_TOP_N", "]", "\n", "cur_proposals", "=", "proposals_ordered", "[", ":", "cfg", "[", "self", ".", "mode", "]", ".", "RPN_PRE_NMS_TOP_N", "]", "\n", "\n", "boxes_bev", "=", "kitti_utils", ".", "boxes3d_to_bev_torch", "(", "cur_proposals", ")", "\n", "keep_idx", "=", "iou3d_utils", ".", "nms_gpu", "(", "boxes_bev", ",", "cur_scores", ",", "cfg", "[", "self", ".", "mode", "]", ".", "RPN_NMS_THRESH", ")", "\n", "\n", "# Fetch post nms top k", "\n", "keep_idx", "=", "keep_idx", "[", ":", "cfg", "[", "self", ".", "mode", "]", ".", "RPN_POST_NMS_TOP_N", "]", "\n", "\n", "return", "cur_scores", "[", "keep_idx", "]", ",", "cur_proposals", "[", "keep_idx", "]", "\n", "", "", ""]], "home.repos.pwc.inspect_result.kemo-huang_jmodt.layers.proposal_target_layer.ProposalTargetLayer.__init__": [[12, 15], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.kemo-huang_jmodt.pointnet2.pytorch_utils.FC.__init__"], ["    ", "def", "__init__", "(", "self", ",", "mode", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "mode", "=", "mode", "\n", "\n"]], "home.repos.pwc.inspect_result.kemo-huang_jmodt.layers.proposal_target_layer.ProposalTargetLayer.forward": [[16, 118], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "pts_extra_input_list.append", "pts_extra_input_list.append", "proposal_target_layer.ProposalTargetLayer.sample_rois_for_rcnn", "jmodt.ops.roipool3d.roipool3d_utils.roipool3d_gpu", "roi_center.unsqueeze", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "jmodt.ops.roipool3d.roipool3d_utils.roipool3d_gpu", "roi_center.unsqueeze", "range", "pooled_features.view", "input_dict[].unsqueeze", "input_dict[].unsqueeze", "input_dict[].unsqueeze", "pts_depth.unsqueeze", "pooled_features[].sum", "proposal_target_layer.ProposalTargetLayer.data_augmentation", "jmodt.utils.kitti_utils.rotate_pc_along_y_torch", "jmodt.utils.kitti_utils.rotate_pc_along_y_torch().squeeze", "sampled_pts.view", "sampled_features.view", "batch_cls_label.view", "mask_score.view", "reg_valid_mask.view", "batch_gt_of_rois.view", "batch_roi_iou.view", "batch_rois.view", "torch.max", "torch.max", "torch.max", "torch.max", "jmodt.utils.kitti_utils.rotate_pc_along_y_torch", "jmodt.utils.kitti_utils.rotate_pc_along_y_torch", "batch_gt_of_rois[].unsqueeze"], "methods", ["home.repos.pwc.inspect_result.kemo-huang_jmodt.layers.proposal_target_layer.ProposalTargetLayer.sample_rois_for_rcnn", "home.repos.pwc.inspect_result.kemo-huang_jmodt.roipool3d.roipool3d_utils.roipool3d_gpu", "home.repos.pwc.inspect_result.kemo-huang_jmodt.roipool3d.roipool3d_utils.roipool3d_gpu", "home.repos.pwc.inspect_result.kemo-huang_jmodt.layers.proposal_target_layer.ProposalTargetLayer.data_augmentation", "home.repos.pwc.inspect_result.kemo-huang_jmodt.utils.bbox_transform.rotate_pc_along_y_torch", "home.repos.pwc.inspect_result.kemo-huang_jmodt.utils.bbox_transform.rotate_pc_along_y_torch", "home.repos.pwc.inspect_result.kemo-huang_jmodt.utils.bbox_transform.rotate_pc_along_y_torch"], ["", "def", "forward", "(", "self", ",", "input_dict", ")", ":", "\n", "        ", "rpn_xyz", ",", "rpn_features", "=", "input_dict", "[", "'rpn_xyz'", "]", ",", "input_dict", "[", "'rpn_features'", "]", "\n", "if", "cfg", ".", "RCNN", ".", "USE_INTENSITY", ":", "\n", "            ", "pts_extra_input_list", "=", "[", "input_dict", "[", "'rpn_intensity'", "]", ".", "unsqueeze", "(", "dim", "=", "2", ")", ",", "\n", "input_dict", "[", "'seg_mask'", "]", ".", "unsqueeze", "(", "dim", "=", "2", ")", "]", "\n", "", "else", ":", "\n", "            ", "pts_extra_input_list", "=", "[", "input_dict", "[", "'seg_mask'", "]", ".", "unsqueeze", "(", "dim", "=", "2", ")", "]", "\n", "\n", "", "if", "cfg", ".", "RCNN", ".", "USE_DEPTH", ":", "\n", "            ", "pts_depth", "=", "input_dict", "[", "'pts_depth'", "]", "/", "70.0", "-", "0.5", "\n", "pts_extra_input_list", ".", "append", "(", "pts_depth", ".", "unsqueeze", "(", "dim", "=", "2", ")", ")", "\n", "\n", "", "if", "cfg", ".", "RCNN", ".", "USE_RGB", ":", "\n", "            ", "pts_rgb", "=", "input_dict", "[", "'pts_rgb'", "]", "\n", "pts_extra_input_list", ".", "append", "(", "pts_rgb", ")", "\n", "\n", "", "pts_extra_input", "=", "torch", ".", "cat", "(", "pts_extra_input_list", ",", "dim", "=", "2", ")", "\n", "\n", "pts_feature", "=", "torch", ".", "cat", "(", "(", "pts_extra_input", ",", "rpn_features", ")", ",", "dim", "=", "2", ")", "\n", "\n", "if", "self", ".", "mode", "==", "'TRAIN'", ":", "\n", "            ", "roi_boxes3d", "=", "input_dict", "[", "'roi_boxes3d'", "]", "\n", "gt_boxes3d", "=", "input_dict", "[", "'gt_boxes3d'", "]", "\n", "gt_tids", "=", "input_dict", "[", "'gt_tids'", "]", "\n", "batch_rois", ",", "batch_gt_of_rois", ",", "batch_roi_iou", ",", "batch_gt_tids_of_rois", "=", "self", ".", "sample_rois_for_rcnn", "(", "roi_boxes3d", ",", "\n", "gt_boxes3d", ",", "\n", "gt_tids", ")", "\n", "\n", "# point cloud pooling", "\n", "pooled_features", ",", "pooled_empty_flag", "=", "roipool3d_utils", ".", "roipool3d_gpu", "(", "rpn_xyz", ",", "pts_feature", ",", "batch_rois", ",", "cfg", ".", "RCNN", ".", "POOL_EXTRA_WIDTH", ",", "\n", "sampled_pt_num", "=", "cfg", ".", "RCNN", ".", "NUM_POINTS", ")", "\n", "\n", "sampled_pts", "=", "pooled_features", "[", ":", ",", ":", ",", ":", ",", "0", ":", "3", "]", "\n", "sampled_features", "=", "pooled_features", "[", ":", ",", ":", ",", ":", ",", "3", ":", "]", "\n", "mask_score", "=", "pooled_features", "[", ":", ",", ":", ",", ":", ",", "3", "]", ".", "sum", "(", "-", "1", ")", "/", "cfg", ".", "RCNN", ".", "NUM_POINTS", "\n", "\n", "# data augmentation", "\n", "if", "self", ".", "training", "and", "cfg", ".", "AUG_DATA", ":", "\n", "                ", "sampled_pts", ",", "batch_rois", ",", "batch_gt_of_rois", "=", "self", ".", "data_augmentation", "(", "sampled_pts", ",", "batch_rois", ",", "batch_gt_of_rois", ")", "\n", "\n", "# canonical transformation", "\n", "", "batch_size", "=", "batch_rois", ".", "shape", "[", "0", "]", "\n", "roi_ry", "=", "batch_rois", "[", ":", ",", ":", ",", "6", "]", "%", "(", "2", "*", "np", ".", "pi", ")", "\n", "roi_center", "=", "batch_rois", "[", ":", ",", ":", ",", "0", ":", "3", "]", "\n", "sampled_pts", "-=", "roi_center", ".", "unsqueeze", "(", "dim", "=", "2", ")", "# (B, M, 512, 3)", "\n", "batch_gt_of_rois", "[", ":", ",", ":", ",", "0", ":", "3", "]", "=", "batch_gt_of_rois", "[", ":", ",", ":", ",", "0", ":", "3", "]", "-", "roi_center", "\n", "batch_gt_of_rois", "[", ":", ",", ":", ",", "6", "]", "=", "batch_gt_of_rois", "[", ":", ",", ":", ",", "6", "]", "-", "roi_ry", "\n", "\n", "for", "k", "in", "range", "(", "batch_size", ")", ":", "\n", "                ", "sampled_pts", "[", "k", "]", "=", "kitti_utils", ".", "rotate_pc_along_y_torch", "(", "sampled_pts", "[", "k", "]", ",", "batch_rois", "[", "k", ",", ":", ",", "6", "]", ")", "\n", "batch_gt_of_rois", "[", "k", "]", "=", "kitti_utils", ".", "rotate_pc_along_y_torch", "(", "batch_gt_of_rois", "[", "k", "]", ".", "unsqueeze", "(", "dim", "=", "1", ")", ",", "\n", "roi_ry", "[", "k", "]", ")", ".", "squeeze", "(", "dim", "=", "1", ")", "\n", "\n", "# regression valid mask", "\n", "", "valid_mask", "=", "(", "pooled_empty_flag", "==", "0", ")", "\n", "reg_valid_mask", "=", "(", "(", "batch_roi_iou", ">", "cfg", ".", "RCNN", ".", "REG_FG_THRESH", ")", "&", "valid_mask", ")", ".", "long", "(", ")", "\n", "\n", "# classification label (0, 1, -1)", "\n", "batch_cls_label", "=", "(", "batch_roi_iou", ">", "cfg", ".", "RCNN", ".", "CLS_FG_THRESH", ")", ".", "long", "(", ")", "\n", "invalid_mask", "=", "(", "batch_roi_iou", ">", "cfg", ".", "RCNN", ".", "CLS_BG_THRESH", ")", "&", "(", "batch_roi_iou", "<", "cfg", ".", "RCNN", ".", "CLS_FG_THRESH", ")", "\n", "batch_cls_label", "[", "valid_mask", "==", "0", "]", "=", "-", "1", "\n", "batch_cls_label", "[", "invalid_mask", ">", "0", "]", "=", "-", "1", "\n", "\n", "# re-identification label", "\n", "batch_gt_tids_of_rois", "[", "batch_roi_iou", "<", "cfg", ".", "REID", ".", "FG_THRESH", "]", "=", "0", "\n", "\n", "output_dict", "=", "{", "\n", "'sampled_pts'", ":", "sampled_pts", ".", "view", "(", "-", "1", ",", "cfg", ".", "RCNN", ".", "NUM_POINTS", ",", "3", ")", ",", "\n", "'pts_feature'", ":", "sampled_features", ".", "view", "(", "-", "1", ",", "cfg", ".", "RCNN", ".", "NUM_POINTS", ",", "sampled_features", ".", "shape", "[", "3", "]", ")", ",", "\n", "'cls_label'", ":", "batch_cls_label", ".", "view", "(", "-", "1", ")", ",", "\n", "'mask_score'", ":", "mask_score", ".", "view", "(", "-", "1", ")", ",", "\n", "'reg_valid_mask'", ":", "reg_valid_mask", ".", "view", "(", "-", "1", ")", ",", "\n", "'gt_of_rois'", ":", "batch_gt_of_rois", ".", "view", "(", "-", "1", ",", "7", ")", ",", "\n", "'gt_iou'", ":", "batch_roi_iou", ".", "view", "(", "-", "1", ")", ",", "\n", "'roi_boxes3d'", ":", "batch_rois", ".", "view", "(", "-", "1", ",", "7", ")", ",", "\n", "'gt_tids'", ":", "batch_gt_tids_of_rois", ",", "\n", "'max_iou'", ":", "torch", ".", "max", "(", "batch_roi_iou", ")", "\n", "}", "\n", "pts_input", "=", "torch", ".", "cat", "(", "(", "output_dict", "[", "'sampled_pts'", "]", ",", "output_dict", "[", "'pts_feature'", "]", ")", ",", "dim", "=", "2", ")", "\n", "output_dict", "[", "'pts_input'", "]", "=", "pts_input", "\n", "\n", "", "else", ":", "\n", "            ", "batch_rois", "=", "input_dict", "[", "'roi_boxes3d'", "]", "\n", "# point cloud pooling", "\n", "pooled_features", ",", "pooled_empty_flag", "=", "roipool3d_utils", ".", "roipool3d_gpu", "(", "rpn_xyz", ",", "pts_feature", ",", "batch_rois", ",", "cfg", ".", "RCNN", ".", "POOL_EXTRA_WIDTH", ",", "\n", "sampled_pt_num", "=", "cfg", ".", "RCNN", ".", "NUM_POINTS", ")", "\n", "\n", "# canonical transformation", "\n", "batch_size", "=", "batch_rois", ".", "shape", "[", "0", "]", "\n", "roi_center", "=", "batch_rois", "[", ":", ",", ":", ",", "0", ":", "3", "]", "\n", "pooled_features", "[", ":", ",", ":", ",", ":", ",", "0", ":", "3", "]", "-=", "roi_center", ".", "unsqueeze", "(", "dim", "=", "2", ")", "\n", "for", "k", "in", "range", "(", "batch_size", ")", ":", "\n", "                ", "pooled_features", "[", "k", ",", ":", ",", ":", ",", "0", ":", "3", "]", "=", "kitti_utils", ".", "rotate_pc_along_y_torch", "(", "pooled_features", "[", "k", ",", ":", ",", ":", ",", "0", ":", "3", "]", ",", "\n", "batch_rois", "[", "k", ",", ":", ",", "6", "]", ")", "\n", "\n", "", "pts_input", "=", "pooled_features", ".", "view", "(", "-", "1", ",", "pooled_features", ".", "shape", "[", "2", "]", ",", "pooled_features", ".", "shape", "[", "3", "]", ")", "\n", "output_dict", "=", "None", "\n", "\n", "", "return", "pts_input", ",", "output_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.kemo-huang_jmodt.layers.proposal_target_layer.ProposalTargetLayer.sample_rois_for_rcnn": [[119, 239], ["roi_boxes3d.size", "int", "gt_boxes3d.new().zero_", "gt_boxes3d.new().zero_", "gt_boxes3d.new().zero_", "gt_boxes3d.new().zero_", "range", "numpy.round", "jmodt.ops.iou3d.iou3d_utils.boxes_iou3d_gpu", "torch.max", "torch.max", "torch.max", "torch.max", "min", "torch.nonzero().view", "torch.nonzero().view", "torch.nonzero().view", "torch.nonzero().view", "torch.nonzero().view", "torch.nonzero().view", "torch.nonzero().view", "torch.nonzero().view", "torch.nonzero().view", "torch.nonzero().view", "torch.nonzero().view", "torch.nonzero().view", "torch.nonzero().view.numel", "torch.nonzero().view.numel", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "gt_boxes3d.new", "gt_boxes3d.new", "gt_boxes3d.new", "gt_boxes3d.new", "cur_gt_boxes.__len__", "cur_gt_boxes[].sum", "torch.nonzero().view.numel", "torch.nonzero().view.numel", "torch.nonzero().view.numel", "torch.nonzero().view.numel", "min", "torch.from_numpy().type_as().long", "torch.from_numpy().type_as().long", "torch.from_numpy().type_as().long", "torch.from_numpy().type_as().long", "proposal_target_layer.ProposalTargetLayer.sample_bg_inds", "proposal_target_layer.ProposalTargetLayer.aug_roi_by_noise_torch", "roi_list.append", "roi_iou_list.append", "roi_gt_boxes_list.append", "roi_gt_tids_list.append", "proposal_target_layer.ProposalTargetLayer.aug_roi_by_noise_torch", "roi_list.append", "roi_iou_list.append", "roi_gt_boxes_list.append", "roi_gt_tids_list.append", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "numpy.floor", "torch.from_numpy().type_as().long", "torch.from_numpy().type_as().long", "torch.from_numpy().type_as().long", "torch.from_numpy().type_as().long", "torch.from_numpy().type_as", "torch.from_numpy().type_as", "torch.from_numpy().type_as", "torch.from_numpy().type_as", "proposal_target_layer.ProposalTargetLayer.sample_bg_inds", "pdb.set_trace", "numpy.random.rand", "torch.from_numpy().type_as", "torch.from_numpy().type_as", "torch.from_numpy().type_as", "torch.from_numpy().type_as", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "numpy.random.permutation", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "methods", ["home.repos.pwc.inspect_result.kemo-huang_jmodt.iou3d.iou3d_utils.boxes_iou3d_gpu", "home.repos.pwc.inspect_result.kemo-huang_jmodt.datasets.kitti_dataset.KittiDataset.__len__", "home.repos.pwc.inspect_result.kemo-huang_jmodt.layers.proposal_target_layer.ProposalTargetLayer.sample_bg_inds", "home.repos.pwc.inspect_result.kemo-huang_jmodt.layers.proposal_target_layer.ProposalTargetLayer.aug_roi_by_noise_torch", "home.repos.pwc.inspect_result.kemo-huang_jmodt.layers.proposal_target_layer.ProposalTargetLayer.aug_roi_by_noise_torch", "home.repos.pwc.inspect_result.kemo-huang_jmodt.layers.proposal_target_layer.ProposalTargetLayer.sample_bg_inds"], ["", "def", "sample_rois_for_rcnn", "(", "self", ",", "roi_boxes3d", ",", "gt_boxes3d", ",", "gt_tids", ")", ":", "\n", "        ", "\"\"\"\n        :param roi_boxes3d: (B, M, 7)\n        :param gt_boxes3d: (B, N, 7) [x, y, z, h, w, l, ry]\n        :param gt_tids: (B, N)\n        :return\n            batch_rois: (B, N, 7)\n            batch_gt_boxes_of_rois: (B, N, 7)\n            batch_roi_iou: (B, N)\n            batch_gt_tids_of_rois: (B, N)\n        \"\"\"", "\n", "batch_size", "=", "roi_boxes3d", ".", "size", "(", "0", ")", "\n", "\n", "fg_rois_per_image", "=", "int", "(", "np", ".", "round", "(", "cfg", ".", "RCNN", ".", "FG_RATIO", "*", "cfg", ".", "RCNN", ".", "ROI_PER_IMAGE", ")", ")", "\n", "\n", "batch_rois", "=", "gt_boxes3d", ".", "new", "(", "batch_size", ",", "cfg", ".", "RCNN", ".", "ROI_PER_IMAGE", ",", "7", ")", ".", "zero_", "(", ")", "\n", "batch_gt_boxes_of_rois", "=", "gt_boxes3d", ".", "new", "(", "batch_size", ",", "cfg", ".", "RCNN", ".", "ROI_PER_IMAGE", ",", "7", ")", ".", "zero_", "(", ")", "\n", "batch_roi_iou", "=", "gt_boxes3d", ".", "new", "(", "batch_size", ",", "cfg", ".", "RCNN", ".", "ROI_PER_IMAGE", ")", ".", "zero_", "(", ")", "\n", "batch_gt_tids_of_rois", "=", "gt_boxes3d", ".", "new", "(", "batch_size", ",", "cfg", ".", "RCNN", ".", "ROI_PER_IMAGE", ")", ".", "zero_", "(", ")", "\n", "\n", "for", "idx", "in", "range", "(", "batch_size", ")", ":", "\n", "            ", "cur_roi", "=", "roi_boxes3d", "[", "idx", "]", "\n", "cur_gt_boxes", "=", "gt_boxes3d", "[", "idx", "]", "\n", "cur_gt_tids", "=", "gt_tids", "[", "idx", "]", "\n", "\n", "k", "=", "cur_gt_boxes", ".", "__len__", "(", ")", "-", "1", "\n", "while", "cur_gt_boxes", "[", "k", "]", ".", "sum", "(", ")", "==", "0", ":", "\n", "                ", "k", "-=", "1", "\n", "", "cur_gt_boxes", "=", "cur_gt_boxes", "[", ":", "k", "+", "1", "]", "\n", "cur_gt_tids", "=", "cur_gt_tids", "[", ":", "k", "+", "1", "]", "\n", "\n", "# include gt boxes in the candidate rois", "\n", "iou3d", "=", "iou3d_utils", ".", "boxes_iou3d_gpu", "(", "cur_roi", ",", "cur_gt_boxes", ")", "# (M, N)", "\n", "\n", "max_overlaps", ",", "gt_assignment", "=", "torch", ".", "max", "(", "iou3d", ",", "dim", "=", "1", ")", "\n", "\n", "# sample fg, easy_bg, hard_bg", "\n", "fg_thresh", "=", "min", "(", "cfg", ".", "RCNN", ".", "REG_FG_THRESH", ",", "cfg", ".", "RCNN", ".", "CLS_FG_THRESH", ")", "\n", "fg_inds", "=", "torch", ".", "nonzero", "(", "(", "max_overlaps", ">=", "fg_thresh", ")", ",", "as_tuple", "=", "False", ")", ".", "view", "(", "-", "1", ")", "\n", "\n", "# TODO: this will mix the fg and bg when CLS_BG_THRESH_LO < iou < CLS_BG_THRESH", "\n", "# fg_inds = torch.cat((fg_inds, roi_assignment), dim=0)  # consider the roi which has max_iou with gt as fg", "\n", "\n", "easy_bg_inds", "=", "torch", ".", "nonzero", "(", "(", "max_overlaps", "<", "cfg", ".", "RCNN", ".", "CLS_BG_THRESH_LO", ")", ",", "as_tuple", "=", "False", ")", ".", "view", "(", "-", "1", ")", "\n", "hard_bg_inds", "=", "torch", ".", "nonzero", "(", "(", "max_overlaps", "<", "cfg", ".", "RCNN", ".", "CLS_BG_THRESH", ")", "&", "\n", "(", "max_overlaps", ">=", "cfg", ".", "RCNN", ".", "CLS_BG_THRESH_LO", ")", ",", "as_tuple", "=", "False", ")", ".", "view", "(", "-", "1", ")", "\n", "\n", "fg_num_rois", "=", "fg_inds", ".", "numel", "(", ")", "\n", "bg_num_rois", "=", "hard_bg_inds", ".", "numel", "(", ")", "+", "easy_bg_inds", ".", "numel", "(", ")", "\n", "\n", "if", "fg_num_rois", ">", "0", "and", "bg_num_rois", ">", "0", ":", "\n", "# sampling fg", "\n", "                ", "fg_rois_per_this_image", "=", "min", "(", "fg_rois_per_image", ",", "fg_num_rois", ")", "\n", "\n", "rand_num", "=", "torch", ".", "from_numpy", "(", "np", ".", "random", ".", "permutation", "(", "fg_num_rois", ")", ")", ".", "type_as", "(", "gt_boxes3d", ")", ".", "long", "(", ")", "\n", "fg_inds", "=", "fg_inds", "[", "rand_num", "[", ":", "fg_rois_per_this_image", "]", "]", "\n", "\n", "# sampling bg", "\n", "bg_rois_per_this_image", "=", "cfg", ".", "RCNN", ".", "ROI_PER_IMAGE", "-", "fg_rois_per_this_image", "\n", "bg_inds", "=", "self", ".", "sample_bg_inds", "(", "hard_bg_inds", ",", "easy_bg_inds", ",", "bg_rois_per_this_image", ")", "\n", "\n", "", "elif", "fg_num_rois", ">", "0", "and", "bg_num_rois", "==", "0", ":", "\n", "# sampling fg", "\n", "                ", "rand_num", "=", "np", ".", "floor", "(", "np", ".", "random", ".", "rand", "(", "cfg", ".", "RCNN", ".", "ROI_PER_IMAGE", ")", "*", "fg_num_rois", ")", "\n", "rand_num", "=", "torch", ".", "from_numpy", "(", "rand_num", ")", ".", "type_as", "(", "gt_boxes3d", ")", ".", "long", "(", ")", "\n", "fg_inds", "=", "fg_inds", "[", "rand_num", "]", "\n", "fg_rois_per_this_image", "=", "cfg", ".", "RCNN", ".", "ROI_PER_IMAGE", "\n", "bg_rois_per_this_image", "=", "0", "\n", "", "elif", "bg_num_rois", ">", "0", "and", "fg_num_rois", "==", "0", ":", "\n", "# sampling bg", "\n", "                ", "bg_rois_per_this_image", "=", "cfg", ".", "RCNN", ".", "ROI_PER_IMAGE", "\n", "bg_inds", "=", "self", ".", "sample_bg_inds", "(", "hard_bg_inds", ",", "easy_bg_inds", ",", "bg_rois_per_this_image", ")", "\n", "\n", "fg_rois_per_this_image", "=", "0", "\n", "", "else", ":", "\n", "                ", "import", "pdb", "\n", "pdb", ".", "set_trace", "(", ")", "\n", "raise", "NotImplementedError", "\n", "\n", "# augment the rois by noise", "\n", "", "roi_list", "=", "[", "]", "\n", "roi_iou_list", "=", "[", "]", "\n", "roi_gt_boxes_list", "=", "[", "]", "\n", "roi_gt_tids_list", "=", "[", "]", "\n", "if", "fg_rois_per_this_image", ">", "0", ":", "\n", "                ", "fg_rois_src", "=", "cur_roi", "[", "fg_inds", "]", "\n", "gt_boxes_of_fg_rois", "=", "cur_gt_boxes", "[", "gt_assignment", "[", "fg_inds", "]", "]", "\n", "gt_tids_of_fg_rois", "=", "cur_gt_tids", "[", "gt_assignment", "[", "fg_inds", "]", "]", "\n", "iou3d_src", "=", "max_overlaps", "[", "fg_inds", "]", "\n", "fg_rois", ",", "fg_iou3d", "=", "self", ".", "aug_roi_by_noise_torch", "(", "fg_rois_src", ",", "gt_boxes_of_fg_rois", ",", "iou3d_src", ",", "\n", "aug_times", "=", "cfg", ".", "RCNN", ".", "ROI_FG_AUG_TIMES", ")", "\n", "roi_list", ".", "append", "(", "fg_rois", ")", "\n", "roi_iou_list", ".", "append", "(", "fg_iou3d", ")", "\n", "roi_gt_boxes_list", ".", "append", "(", "gt_boxes_of_fg_rois", ")", "\n", "roi_gt_tids_list", ".", "append", "(", "gt_tids_of_fg_rois", ")", "\n", "\n", "", "if", "bg_rois_per_this_image", ">", "0", ":", "\n", "                ", "bg_rois_src", "=", "cur_roi", "[", "bg_inds", "]", "\n", "gt_boxes_of_bg_rois", "=", "cur_gt_boxes", "[", "gt_assignment", "[", "bg_inds", "]", "]", "\n", "gt_tids_of_bg_rois", "=", "cur_gt_tids", "[", "gt_assignment", "[", "bg_inds", "]", "]", "\n", "iou3d_src", "=", "max_overlaps", "[", "bg_inds", "]", "\n", "aug_times", "=", "1", "if", "cfg", ".", "RCNN", ".", "ROI_FG_AUG_TIMES", ">", "0", "else", "0", "\n", "bg_rois", ",", "bg_iou3d", "=", "self", ".", "aug_roi_by_noise_torch", "(", "bg_rois_src", ",", "gt_boxes_of_bg_rois", ",", "iou3d_src", ",", "\n", "aug_times", "=", "aug_times", ")", "\n", "roi_list", ".", "append", "(", "bg_rois", ")", "\n", "roi_iou_list", ".", "append", "(", "bg_iou3d", ")", "\n", "roi_gt_boxes_list", ".", "append", "(", "gt_boxes_of_bg_rois", ")", "\n", "roi_gt_tids_list", ".", "append", "(", "gt_tids_of_bg_rois", ")", "\n", "\n", "", "rois", "=", "torch", ".", "cat", "(", "roi_list", ",", "dim", "=", "0", ")", "\n", "iou_of_rois", "=", "torch", ".", "cat", "(", "roi_iou_list", ",", "dim", "=", "0", ")", "\n", "gt_boxes_of_rois", "=", "torch", ".", "cat", "(", "roi_gt_boxes_list", ",", "dim", "=", "0", ")", "\n", "gt_tids_of_rois", "=", "torch", ".", "cat", "(", "roi_gt_tids_list", ",", "dim", "=", "0", ")", "\n", "\n", "batch_rois", "[", "idx", "]", "=", "rois", "\n", "batch_gt_boxes_of_rois", "[", "idx", "]", "=", "gt_boxes_of_rois", "\n", "batch_roi_iou", "[", "idx", "]", "=", "iou_of_rois", "\n", "batch_gt_tids_of_rois", "[", "idx", "]", "=", "gt_tids_of_rois", "\n", "\n", "", "return", "batch_rois", ",", "batch_gt_boxes_of_rois", ",", "batch_roi_iou", ",", "batch_gt_tids_of_rois", "\n", "\n"]], "home.repos.pwc.inspect_result.kemo-huang_jmodt.layers.proposal_target_layer.ProposalTargetLayer.sample_bg_inds": [[240, 268], ["int", "torch.randint().long", "torch.randint().long", "torch.randint().long", "torch.randint().long", "torch.randint().long", "torch.randint().long", "torch.randint().long", "torch.randint().long", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "hard_bg_inds.numel", "easy_bg_inds.numel", "torch.randint().long", "torch.randint().long", "torch.randint().long", "torch.randint().long", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "hard_bg_inds.numel", "easy_bg_inds.numel", "torch.randint().long", "torch.randint().long", "torch.randint().long", "torch.randint().long", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "hard_bg_inds.numel", "easy_bg_inds.numel", "hard_bg_inds.numel", "easy_bg_inds.numel", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "hard_bg_inds.numel", "easy_bg_inds.numel"], "methods", ["None"], ["", "def", "sample_bg_inds", "(", "self", ",", "hard_bg_inds", ",", "easy_bg_inds", ",", "bg_rois_per_this_image", ")", ":", "\n", "        ", "if", "hard_bg_inds", ".", "numel", "(", ")", ">", "0", "and", "easy_bg_inds", ".", "numel", "(", ")", ">", "0", ":", "\n", "            ", "hard_bg_rois_num", "=", "int", "(", "bg_rois_per_this_image", "*", "cfg", ".", "RCNN", ".", "HARD_BG_RATIO", ")", "\n", "easy_bg_rois_num", "=", "bg_rois_per_this_image", "-", "hard_bg_rois_num", "\n", "\n", "# sampling hard bg", "\n", "rand_idx", "=", "torch", ".", "randint", "(", "low", "=", "0", ",", "high", "=", "hard_bg_inds", ".", "numel", "(", ")", ",", "size", "=", "(", "hard_bg_rois_num", ",", ")", ")", ".", "long", "(", ")", "\n", "hard_bg_inds", "=", "hard_bg_inds", "[", "rand_idx", "]", "\n", "\n", "# sampling easy bg", "\n", "rand_idx", "=", "torch", ".", "randint", "(", "low", "=", "0", ",", "high", "=", "easy_bg_inds", ".", "numel", "(", ")", ",", "size", "=", "(", "easy_bg_rois_num", ",", ")", ")", ".", "long", "(", ")", "\n", "easy_bg_inds", "=", "easy_bg_inds", "[", "rand_idx", "]", "\n", "\n", "bg_inds", "=", "torch", ".", "cat", "(", "[", "hard_bg_inds", ",", "easy_bg_inds", "]", ",", "dim", "=", "0", ")", "\n", "", "elif", "hard_bg_inds", ".", "numel", "(", ")", ">", "0", "and", "easy_bg_inds", ".", "numel", "(", ")", "==", "0", ":", "\n", "            ", "hard_bg_rois_num", "=", "bg_rois_per_this_image", "\n", "# sampling hard bg", "\n", "rand_idx", "=", "torch", ".", "randint", "(", "low", "=", "0", ",", "high", "=", "hard_bg_inds", ".", "numel", "(", ")", ",", "size", "=", "(", "hard_bg_rois_num", ",", ")", ")", ".", "long", "(", ")", "\n", "bg_inds", "=", "hard_bg_inds", "[", "rand_idx", "]", "\n", "", "elif", "hard_bg_inds", ".", "numel", "(", ")", "==", "0", "and", "easy_bg_inds", ".", "numel", "(", ")", ">", "0", ":", "\n", "            ", "easy_bg_rois_num", "=", "bg_rois_per_this_image", "\n", "# sampling easy bg", "\n", "rand_idx", "=", "torch", ".", "randint", "(", "low", "=", "0", ",", "high", "=", "easy_bg_inds", ".", "numel", "(", ")", ",", "size", "=", "(", "easy_bg_rois_num", ",", ")", ")", ".", "long", "(", ")", "\n", "bg_inds", "=", "easy_bg_inds", "[", "rand_idx", "]", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "", "return", "bg_inds", "\n", "\n"]], "home.repos.pwc.inspect_result.kemo-huang_jmodt.layers.proposal_target_layer.ProposalTargetLayer.aug_roi_by_noise_torch": [[269, 297], ["torch.zeros().type_as", "torch.zeros().type_as", "torch.zeros().type_as", "torch.zeros().type_as", "min", "range", "gt_boxes3d[].view", "proposal_target_layer.ProposalTargetLayer.view", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "proposal_target_layer.ProposalTargetLayer.view", "jmodt.ops.iou3d.iou3d_utils.boxes_iou3d_gpu", "numpy.random.rand", "proposal_target_layer.ProposalTargetLayer.random_aug_box3d"], "methods", ["home.repos.pwc.inspect_result.kemo-huang_jmodt.iou3d.iou3d_utils.boxes_iou3d_gpu", "home.repos.pwc.inspect_result.kemo-huang_jmodt.layers.proposal_target_layer.ProposalTargetLayer.random_aug_box3d"], ["", "def", "aug_roi_by_noise_torch", "(", "self", ",", "roi_boxes3d", ",", "gt_boxes3d", ",", "iou3d_src", ",", "aug_times", "=", "10", ")", ":", "\n", "        ", "iou_of_rois", "=", "torch", ".", "zeros", "(", "roi_boxes3d", ".", "shape", "[", "0", "]", ")", ".", "type_as", "(", "gt_boxes3d", ")", "\n", "pos_thresh", "=", "min", "(", "cfg", ".", "RCNN", ".", "REG_FG_THRESH", ",", "cfg", ".", "RCNN", ".", "CLS_FG_THRESH", ")", "\n", "\n", "for", "k", "in", "range", "(", "roi_boxes3d", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "temp_iou", "=", "cnt", "=", "0", "\n", "roi_box3d", "=", "roi_boxes3d", "[", "k", "]", "\n", "\n", "gt_box3d", "=", "gt_boxes3d", "[", "k", "]", ".", "view", "(", "1", ",", "7", ")", "\n", "aug_box3d", "=", "roi_box3d", "\n", "keep", "=", "True", "\n", "while", "temp_iou", "<", "pos_thresh", "and", "cnt", "<", "aug_times", ":", "\n", "                ", "if", "np", ".", "random", ".", "rand", "(", ")", "<", "0.2", ":", "\n", "                    ", "aug_box3d", "=", "roi_box3d", "# p=0.2 to keep the original roi box", "\n", "keep", "=", "True", "\n", "", "else", ":", "\n", "                    ", "aug_box3d", "=", "self", ".", "random_aug_box3d", "(", "roi_box3d", ")", "\n", "keep", "=", "False", "\n", "", "aug_box3d", "=", "aug_box3d", ".", "view", "(", "(", "1", ",", "7", ")", ")", "\n", "iou3d", "=", "iou3d_utils", ".", "boxes_iou3d_gpu", "(", "aug_box3d", ",", "gt_box3d", ")", "\n", "temp_iou", "=", "iou3d", "[", "0", "]", "[", "0", "]", "\n", "cnt", "+=", "1", "\n", "", "roi_boxes3d", "[", "k", "]", "=", "aug_box3d", ".", "view", "(", "-", "1", ")", "\n", "if", "cnt", "==", "0", "or", "keep", ":", "\n", "                ", "iou_of_rois", "[", "k", "]", "=", "iou3d_src", "[", "k", "]", "\n", "", "else", ":", "\n", "                ", "iou_of_rois", "[", "k", "]", "=", "temp_iou", "\n", "", "", "return", "roi_boxes3d", ",", "iou_of_rois", "\n", "\n"]], "home.repos.pwc.inspect_result.kemo-huang_jmodt.layers.proposal_target_layer.ProposalTargetLayer.random_aug_box3d": [[298, 340], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "[].long", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "numpy.random.normal", "numpy.random.normal", "numpy.random.normal", "numpy.random.normal", "numpy.random.normal", "numpy.random.normal", "numpy.array", "torch.from_numpy().type_as", "torch.from_numpy().type_as", "torch.from_numpy().type_as", "torch.from_numpy().type_as", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "len", "torch.rand", "torch.rand", "torch.rand", "torch.rand"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "random_aug_box3d", "(", "box3d", ")", ":", "\n", "        ", "\"\"\"\n        :param box3d: (7) [x, y, z, h, w, l, ry]\n        random shift, scale, orientation\n        \"\"\"", "\n", "if", "cfg", ".", "RCNN", ".", "REG_AUG_METHOD", "==", "'single'", ":", "\n", "            ", "pos_shift", "=", "(", "torch", ".", "rand", "(", "3", ",", "device", "=", "box3d", ".", "device", ")", "-", "0.5", ")", "# [-0.5 ~ 0.5]", "\n", "hwl_scale", "=", "(", "torch", ".", "rand", "(", "3", ",", "device", "=", "box3d", ".", "device", ")", "-", "0.5", ")", "/", "(", "0.5", "/", "0.15", ")", "+", "1.0", "#", "\n", "angle_rot", "=", "(", "torch", ".", "rand", "(", "1", ",", "device", "=", "box3d", ".", "device", ")", "-", "0.5", ")", "/", "(", "0.5", "/", "(", "np", ".", "pi", "/", "12", ")", ")", "# [-pi/12 ~ pi/12]", "\n", "aug_box3d", "=", "torch", ".", "cat", "(", "[", "box3d", "[", "0", ":", "3", "]", "+", "pos_shift", ",", "box3d", "[", "3", ":", "6", "]", "*", "hwl_scale", ",", "box3d", "[", "6", ":", "7", "]", "+", "angle_rot", "]", ",", "dim", "=", "0", ")", "\n", "return", "aug_box3d", "\n", "", "elif", "cfg", ".", "RCNN", ".", "REG_AUG_METHOD", "==", "'multiple'", ":", "\n", "# pos_range, hwl_range, angle_range, mean_iou", "\n", "            ", "range_config", "=", "[", "[", "0.2", ",", "0.1", ",", "np", ".", "pi", "/", "12", ",", "0.7", "]", ",", "\n", "[", "0.3", ",", "0.15", ",", "np", ".", "pi", "/", "12", ",", "0.6", "]", ",", "\n", "[", "0.5", ",", "0.15", ",", "np", ".", "pi", "/", "9", ",", "0.5", "]", ",", "\n", "[", "0.8", ",", "0.15", ",", "np", ".", "pi", "/", "6", ",", "0.3", "]", ",", "\n", "[", "1.0", ",", "0.15", ",", "np", ".", "pi", "/", "3", ",", "0.2", "]", "]", "\n", "idx", "=", "torch", ".", "randint", "(", "low", "=", "0", ",", "high", "=", "len", "(", "range_config", ")", ",", "size", "=", "(", "1", ",", ")", ")", "[", "0", "]", ".", "long", "(", ")", "\n", "\n", "pos_shift", "=", "(", "(", "torch", ".", "rand", "(", "3", ",", "device", "=", "box3d", ".", "device", ")", "-", "0.5", ")", "/", "0.5", ")", "*", "range_config", "[", "idx", "]", "[", "0", "]", "\n", "hwl_scale", "=", "(", "(", "torch", ".", "rand", "(", "3", ",", "device", "=", "box3d", ".", "device", ")", "-", "0.5", ")", "/", "0.5", ")", "*", "range_config", "[", "idx", "]", "[", "1", "]", "+", "1.0", "\n", "angle_rot", "=", "(", "(", "torch", ".", "rand", "(", "1", ",", "device", "=", "box3d", ".", "device", ")", "-", "0.5", ")", "/", "0.5", ")", "*", "range_config", "[", "idx", "]", "[", "2", "]", "\n", "\n", "aug_box3d", "=", "torch", ".", "cat", "(", "[", "box3d", "[", "0", ":", "3", "]", "+", "pos_shift", ",", "box3d", "[", "3", ":", "6", "]", "*", "hwl_scale", ",", "box3d", "[", "6", ":", "7", "]", "+", "angle_rot", "]", ",", "dim", "=", "0", ")", "\n", "return", "aug_box3d", "\n", "", "elif", "cfg", ".", "RCNN", ".", "REG_AUG_METHOD", "==", "'normal'", ":", "\n", "            ", "x_shift", "=", "np", ".", "random", ".", "normal", "(", "loc", "=", "0", ",", "scale", "=", "0.3", ")", "\n", "y_shift", "=", "np", ".", "random", ".", "normal", "(", "loc", "=", "0", ",", "scale", "=", "0.2", ")", "\n", "z_shift", "=", "np", ".", "random", ".", "normal", "(", "loc", "=", "0", ",", "scale", "=", "0.3", ")", "\n", "h_shift", "=", "np", ".", "random", ".", "normal", "(", "loc", "=", "0", ",", "scale", "=", "0.25", ")", "\n", "w_shift", "=", "np", ".", "random", ".", "normal", "(", "loc", "=", "0", ",", "scale", "=", "0.15", ")", "\n", "l_shift", "=", "np", ".", "random", ".", "normal", "(", "loc", "=", "0", ",", "scale", "=", "0.5", ")", "\n", "ry_shift", "=", "(", "(", "torch", ".", "rand", "(", ")", "-", "0.5", ")", "/", "0.5", ")", "*", "np", ".", "pi", "/", "12", "\n", "\n", "aug_box3d", "=", "np", ".", "array", "(", "[", "box3d", "[", "0", "]", "+", "x_shift", ",", "box3d", "[", "1", "]", "+", "y_shift", ",", "box3d", "[", "2", "]", "+", "z_shift", ",", "box3d", "[", "3", "]", "+", "h_shift", ",", "\n", "box3d", "[", "4", "]", "+", "w_shift", ",", "box3d", "[", "5", "]", "+", "l_shift", ",", "box3d", "[", "6", "]", "+", "ry_shift", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "aug_box3d", "=", "torch", ".", "from_numpy", "(", "aug_box3d", ")", ".", "type_as", "(", "box3d", ")", "\n", "return", "aug_box3d", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.kemo-huang_jmodt.layers.proposal_target_layer.ProposalTargetLayer.data_augmentation": [[341, 399], ["torch.atan2", "torch.atan2", "torch.atan2", "torch.atan2", "torch.atan2", "torch.atan2", "torch.atan2", "torch.atan2", "range", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "jmodt.utils.kitti_utils.rotate_pc_along_y_torch", "jmodt.utils.kitti_utils.rotate_pc_along_y_torch().squeeze", "jmodt.utils.kitti_utils.rotate_pc_along_y_torch().squeeze", "torch.atan2", "torch.atan2", "torch.atan2", "torch.atan2", "torch.atan2", "torch.atan2", "torch.atan2", "torch.atan2", "scales.unsqueeze().unsqueeze", "scales.unsqueeze", "scales.unsqueeze", "torch.sign.unsqueeze", "torch.sign.unsqueeze", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "jmodt.utils.kitti_utils.rotate_pc_along_y_torch", "jmodt.utils.kitti_utils.rotate_pc_along_y_torch", "scales.unsqueeze", "gt_of_rois[].unsqueeze", "rois[].unsqueeze", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign"], "methods", ["home.repos.pwc.inspect_result.kemo-huang_jmodt.utils.bbox_transform.rotate_pc_along_y_torch", "home.repos.pwc.inspect_result.kemo-huang_jmodt.utils.bbox_transform.rotate_pc_along_y_torch", "home.repos.pwc.inspect_result.kemo-huang_jmodt.utils.bbox_transform.rotate_pc_along_y_torch"], ["", "", "@", "staticmethod", "\n", "def", "data_augmentation", "(", "pts", ",", "rois", ",", "gt_of_rois", ")", ":", "\n", "        ", "\"\"\"\n        :param pts: (B, M, 512, 3)\n        :param rois: (B, M. 7)\n        :param gt_of_rois: (B, M, 7)\n        :return:\n        \"\"\"", "\n", "batch_size", ",", "boxes_num", "=", "pts", ".", "shape", "[", "0", "]", ",", "pts", ".", "shape", "[", "1", "]", "\n", "\n", "# rotation augmentation", "\n", "angles", "=", "(", "torch", ".", "rand", "(", "(", "batch_size", ",", "boxes_num", ")", ",", "device", "=", "pts", ".", "device", ")", "-", "0.5", "/", "0.5", ")", "*", "(", "np", ".", "pi", "/", "cfg", ".", "AUG_ROT_RANGE", ")", "\n", "\n", "# calculate gt alpha from gt_of_rois", "\n", "temp_x", ",", "temp_z", ",", "temp_ry", "=", "gt_of_rois", "[", ":", ",", ":", ",", "0", "]", ",", "gt_of_rois", "[", ":", ",", ":", ",", "2", "]", ",", "gt_of_rois", "[", ":", ",", ":", ",", "6", "]", "\n", "temp_beta", "=", "torch", ".", "atan2", "(", "temp_z", ",", "temp_x", ")", "\n", "gt_alpha", "=", "-", "torch", ".", "sign", "(", "temp_beta", ")", "*", "np", ".", "pi", "/", "2", "+", "temp_beta", "+", "temp_ry", "# (B, M)", "\n", "\n", "temp_x", ",", "temp_z", ",", "temp_ry", "=", "rois", "[", ":", ",", ":", ",", "0", "]", ",", "rois", "[", ":", ",", ":", ",", "2", "]", ",", "rois", "[", ":", ",", ":", ",", "6", "]", "\n", "temp_beta", "=", "torch", ".", "atan2", "(", "temp_z", ",", "temp_x", ")", "\n", "roi_alpha", "=", "-", "torch", ".", "sign", "(", "temp_beta", ")", "*", "np", ".", "pi", "/", "2", "+", "temp_beta", "+", "temp_ry", "# (B, M)", "\n", "\n", "for", "k", "in", "range", "(", "batch_size", ")", ":", "\n", "            ", "pts", "[", "k", "]", "=", "kitti_utils", ".", "rotate_pc_along_y_torch", "(", "pts", "[", "k", "]", ",", "angles", "[", "k", "]", ")", "\n", "gt_of_rois", "[", "k", "]", "=", "kitti_utils", ".", "rotate_pc_along_y_torch", "(", "gt_of_rois", "[", "k", "]", ".", "unsqueeze", "(", "dim", "=", "1", ")", ",", "angles", "[", "k", "]", ")", ".", "squeeze", "(", "\n", "dim", "=", "1", ")", "\n", "rois", "[", "k", "]", "=", "kitti_utils", ".", "rotate_pc_along_y_torch", "(", "rois", "[", "k", "]", ".", "unsqueeze", "(", "dim", "=", "1", ")", ",", "angles", "[", "k", "]", ")", ".", "squeeze", "(", "dim", "=", "1", ")", "\n", "\n", "# calculate the ry after rotation", "\n", "temp_x", ",", "temp_z", "=", "gt_of_rois", "[", ":", ",", ":", ",", "0", "]", ",", "gt_of_rois", "[", ":", ",", ":", ",", "2", "]", "\n", "temp_beta", "=", "torch", ".", "atan2", "(", "temp_z", ",", "temp_x", ")", "\n", "gt_of_rois", "[", ":", ",", ":", ",", "6", "]", "=", "torch", ".", "sign", "(", "temp_beta", ")", "*", "np", ".", "pi", "/", "2", "+", "gt_alpha", "-", "temp_beta", "\n", "\n", "temp_x", ",", "temp_z", "=", "rois", "[", ":", ",", ":", ",", "0", "]", ",", "rois", "[", ":", ",", ":", ",", "2", "]", "\n", "temp_beta", "=", "torch", ".", "atan2", "(", "temp_z", ",", "temp_x", ")", "\n", "rois", "[", ":", ",", ":", ",", "6", "]", "=", "torch", ".", "sign", "(", "temp_beta", ")", "*", "np", ".", "pi", "/", "2", "+", "roi_alpha", "-", "temp_beta", "\n", "\n", "# scaling augmentation", "\n", "", "scales", "=", "1", "+", "(", "(", "torch", ".", "rand", "(", "(", "batch_size", ",", "boxes_num", ")", ",", "device", "=", "pts", ".", "device", ")", "-", "0.5", ")", "/", "0.5", ")", "*", "0.05", "\n", "pts", "=", "pts", "*", "scales", ".", "unsqueeze", "(", "dim", "=", "2", ")", ".", "unsqueeze", "(", "dim", "=", "3", ")", "\n", "gt_of_rois", "[", ":", ",", ":", ",", "0", ":", "6", "]", "=", "gt_of_rois", "[", ":", ",", ":", ",", "0", ":", "6", "]", "*", "scales", ".", "unsqueeze", "(", "dim", "=", "2", ")", "\n", "rois", "[", ":", ",", ":", ",", "0", ":", "6", "]", "=", "rois", "[", ":", ",", ":", ",", "0", ":", "6", "]", "*", "scales", ".", "unsqueeze", "(", "dim", "=", "2", ")", "\n", "\n", "# flip augmentation", "\n", "flip_flag", "=", "torch", ".", "sign", "(", "torch", ".", "rand", "(", "(", "batch_size", ",", "boxes_num", ")", ",", "device", "=", "pts", ".", "device", ")", "-", "0.5", ")", "\n", "pts", "[", ":", ",", ":", ",", ":", ",", "0", "]", "=", "pts", "[", ":", ",", ":", ",", ":", ",", "0", "]", "*", "flip_flag", ".", "unsqueeze", "(", "dim", "=", "2", ")", "\n", "gt_of_rois", "[", ":", ",", ":", ",", "0", "]", "=", "gt_of_rois", "[", ":", ",", ":", ",", "0", "]", "*", "flip_flag", "\n", "# flip orientation: ry > 0: pi - ry, ry < 0: -pi - ry", "\n", "src_ry", "=", "gt_of_rois", "[", ":", ",", ":", ",", "6", "]", "\n", "ry", "=", "(", "flip_flag", "==", "1", ")", ".", "float", "(", ")", "*", "src_ry", "+", "(", "flip_flag", "==", "-", "1", ")", ".", "float", "(", ")", "*", "(", "torch", ".", "sign", "(", "src_ry", ")", "*", "np", ".", "pi", "-", "src_ry", ")", "\n", "gt_of_rois", "[", ":", ",", ":", ",", "6", "]", "=", "ry", "\n", "rois", "[", ":", ",", ":", ",", "0", "]", "=", "rois", "[", ":", ",", ":", ",", "0", "]", "*", "flip_flag", "\n", "# flip orientation: ry > 0: pi - ry, ry < 0: -pi - ry", "\n", "src_ry", "=", "rois", "[", ":", ",", ":", ",", "6", "]", "\n", "ry", "=", "(", "flip_flag", "==", "1", ")", ".", "float", "(", ")", "*", "src_ry", "+", "(", "flip_flag", "==", "-", "1", ")", ".", "float", "(", ")", "*", "(", "torch", ".", "sign", "(", "src_ry", ")", "*", "np", ".", "pi", "-", "src_ry", ")", "\n", "rois", "[", ":", ",", ":", ",", "6", "]", "=", "ry", "\n", "\n", "return", "pts", ",", "rois", ",", "gt_of_rois", "\n", "", "", ""]], "home.repos.pwc.inspect_result.kemo-huang_jmodt.evaluation.evaluate.get_label_anno": [[10, 47], ["annotations.update", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array().reshape", "numpy.array().reshape", "numpy.array().reshape", "open", "f.readlines", "line.strip().split", "numpy.array().reshape", "numpy.array", "numpy.zeros", "float", "int", "float", "numpy.array", "numpy.array", "numpy.array", "len", "len", "line.strip", "numpy.array", "float", "len", "float", "float", "float", "float"], "function", ["home.repos.pwc.inspect_result.kemo-huang_jmodt.tracking.kalman.KalmanPSR.update"], ["def", "get_label_anno", "(", "label_path", ")", ":", "\n", "    ", "annotations", "=", "{", "}", "\n", "annotations", ".", "update", "(", "{", "\n", "'name'", ":", "[", "]", ",", "\n", "'truncated'", ":", "[", "]", ",", "\n", "'occluded'", ":", "[", "]", ",", "\n", "'alpha'", ":", "[", "]", ",", "\n", "'bbox'", ":", "[", "]", ",", "\n", "'dimensions'", ":", "[", "]", ",", "\n", "'location'", ":", "[", "]", ",", "\n", "'rotation_y'", ":", "[", "]", "\n", "}", ")", "\n", "with", "open", "(", "label_path", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "lines", "=", "f", ".", "readlines", "(", ")", "\n", "# if len(lines) == 0 or len(lines[0]) < 15:", "\n", "#     content = []", "\n", "# else:", "\n", "", "content", "=", "[", "line", ".", "strip", "(", ")", ".", "split", "(", "' '", ")", "for", "line", "in", "lines", "]", "\n", "annotations", "[", "'name'", "]", "=", "np", ".", "array", "(", "[", "x", "[", "0", "]", "for", "x", "in", "content", "]", ")", "\n", "annotations", "[", "'truncated'", "]", "=", "np", ".", "array", "(", "[", "float", "(", "x", "[", "1", "]", ")", "for", "x", "in", "content", "]", ")", "\n", "annotations", "[", "'occluded'", "]", "=", "np", ".", "array", "(", "[", "int", "(", "x", "[", "2", "]", ")", "for", "x", "in", "content", "]", ")", "\n", "annotations", "[", "'alpha'", "]", "=", "np", ".", "array", "(", "[", "float", "(", "x", "[", "3", "]", ")", "for", "x", "in", "content", "]", ")", "\n", "annotations", "[", "'bbox'", "]", "=", "np", ".", "array", "(", "\n", "[", "[", "float", "(", "info", ")", "for", "info", "in", "x", "[", "4", ":", "8", "]", "]", "for", "x", "in", "content", "]", ")", ".", "reshape", "(", "-", "1", ",", "4", ")", "\n", "# dimensions will convert hwl format to standard lhw(camera) format.", "\n", "annotations", "[", "'dimensions'", "]", "=", "np", ".", "array", "(", "\n", "[", "[", "float", "(", "info", ")", "for", "info", "in", "x", "[", "8", ":", "11", "]", "]", "for", "x", "in", "content", "]", ")", ".", "reshape", "(", "\n", "-", "1", ",", "3", ")", "[", ":", ",", "[", "2", ",", "0", ",", "1", "]", "]", "\n", "annotations", "[", "'location'", "]", "=", "np", ".", "array", "(", "\n", "[", "[", "float", "(", "info", ")", "for", "info", "in", "x", "[", "11", ":", "14", "]", "]", "for", "x", "in", "content", "]", ")", ".", "reshape", "(", "-", "1", ",", "3", ")", "\n", "annotations", "[", "'rotation_y'", "]", "=", "np", ".", "array", "(", "\n", "[", "float", "(", "x", "[", "14", "]", ")", "for", "x", "in", "content", "]", ")", ".", "reshape", "(", "-", "1", ")", "\n", "if", "len", "(", "content", ")", "!=", "0", "and", "len", "(", "content", "[", "0", "]", ")", "==", "16", ":", "# have score", "\n", "        ", "annotations", "[", "'score'", "]", "=", "np", ".", "array", "(", "[", "float", "(", "x", "[", "15", "]", ")", "for", "x", "in", "content", "]", ")", "\n", "", "else", ":", "\n", "        ", "annotations", "[", "'score'", "]", "=", "np", ".", "zeros", "(", "[", "len", "(", "annotations", "[", "'bbox'", "]", ")", "]", ")", "\n", "", "return", "annotations", "\n", "\n"]], "home.repos.pwc.inspect_result.kemo-huang_jmodt.evaluation.evaluate.get_label_annos": [[49, 64], ["pathlib.Path", "pathlib.Path().glob", "re.compile", "filter", "sorted", "isinstance", "list", "annos.append", "int", "range", "evaluate.get_label_anno", "pathlib.Path", "re.compile.match", "int"], "function", ["home.repos.pwc.inspect_result.kemo-huang_jmodt.evaluation.evaluate.get_label_anno"], ["", "def", "get_label_annos", "(", "label_folder", ",", "image_ids", "=", "None", ")", ":", "\n", "    ", "if", "image_ids", "is", "None", ":", "\n", "        ", "filepaths", "=", "pathlib", ".", "Path", "(", "label_folder", ")", ".", "glob", "(", "'*.txt'", ")", "\n", "prog", "=", "re", ".", "compile", "(", "r'^\\d{6}.txt$'", ")", "\n", "filepaths", "=", "filter", "(", "lambda", "f", ":", "prog", ".", "match", "(", "f", ".", "name", ")", ",", "filepaths", ")", "\n", "image_ids", "=", "[", "int", "(", "p", ".", "stem", ")", "for", "p", "in", "filepaths", "]", "\n", "image_ids", "=", "sorted", "(", "image_ids", ")", "\n", "", "if", "not", "isinstance", "(", "image_ids", ",", "list", ")", ":", "\n", "        ", "image_ids", "=", "list", "(", "range", "(", "image_ids", ")", ")", "\n", "", "annos", "=", "[", "]", "\n", "label_folder", "=", "pathlib", ".", "Path", "(", "label_folder", ")", "\n", "for", "image_idx", "in", "image_ids", ":", "\n", "        ", "label_filename", "=", "label_folder", "/", "(", "'%06d.txt'", "%", "int", "(", "image_idx", ")", ")", "\n", "annos", ".", "append", "(", "get_label_anno", "(", "label_filename", ")", ")", "\n", "", "return", "annos", "\n", "\n"]], "home.repos.pwc.inspect_result.kemo-huang_jmodt.evaluation.evaluate.filter_annos_low_score": [[66, 78], ["anno.keys", "new_image_annos.append", "enumerate"], "function", ["None"], ["", "def", "filter_annos_low_score", "(", "image_annos", ",", "thresh", ")", ":", "\n", "    ", "new_image_annos", "=", "[", "]", "\n", "for", "anno", "in", "image_annos", ":", "\n", "        ", "img_filtered_annotations", "=", "{", "}", "\n", "relevant_annotation_indices", "=", "[", "\n", "i", "for", "i", ",", "s", "in", "enumerate", "(", "anno", "[", "'score'", "]", ")", "if", "s", ">=", "thresh", "\n", "]", "\n", "for", "key", "in", "anno", ".", "keys", "(", ")", ":", "\n", "            ", "img_filtered_annotations", "[", "key", "]", "=", "(", "\n", "anno", "[", "key", "]", "[", "relevant_annotation_indices", "]", ")", "\n", "", "new_image_annos", ".", "append", "(", "img_filtered_annotations", ")", "\n", "", "return", "new_image_annos", "\n", "\n"]], "home.repos.pwc.inspect_result.kemo-huang_jmodt.evaluation.evaluate.evaluate": [[80, 94], ["evaluate.get_label_annos", "evaluate.get_label_annos", "evaluate.filter_annos_low_score", "jmodt.detection.evaluation.eval.get_coco_eval_result", "jmodt.detection.evaluation.eval.get_official_eval_result"], "function", ["home.repos.pwc.inspect_result.kemo-huang_jmodt.evaluation.evaluate.get_label_annos", "home.repos.pwc.inspect_result.kemo-huang_jmodt.evaluation.evaluate.get_label_annos", "home.repos.pwc.inspect_result.kemo-huang_jmodt.evaluation.evaluate.filter_annos_low_score", "home.repos.pwc.inspect_result.kemo-huang_jmodt.evaluation.eval.get_coco_eval_result", "home.repos.pwc.inspect_result.kemo-huang_jmodt.evaluation.eval.get_official_eval_result"], ["", "def", "evaluate", "(", "label_path", ",", "\n", "result_path", ",", "\n", "image_idx_list", ",", "\n", "current_class", "=", "0", ",", "\n", "coco", "=", "False", ",", "\n", "score_thresh", "=", "-", "1", ")", ":", "\n", "    ", "dt_annos", "=", "get_label_annos", "(", "result_path", ")", "\n", "if", "score_thresh", ">", "0", ":", "\n", "        ", "dt_annos", "=", "filter_annos_low_score", "(", "dt_annos", ",", "score_thresh", ")", "\n", "", "gt_annos", "=", "get_label_annos", "(", "label_path", ",", "image_idx_list", ")", "\n", "if", "coco", ":", "\n", "        ", "return", "get_coco_eval_result", "(", "gt_annos", ",", "dt_annos", ",", "current_class", ")", "\n", "", "else", ":", "\n", "        ", "return", "get_official_eval_result", "(", "gt_annos", ",", "dt_annos", ",", "current_class", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kemo-huang_jmodt.evaluation.eval.get_thresholds": [[9, 28], ["scores.sort", "enumerate", "thresholds.append", "len", "len"], "function", ["None"], ["import", "torch", "\n", "import", "tqdm", "\n", "from", "torch", ".", "utils", ".", "data", "import", "DataLoader", "\n", "\n", "from", "jmodt", ".", "config", "import", "cfg", ",", "VALID_SEQ_ID", "\n", "from", "jmodt", ".", "detection", ".", "datasets", ".", "kitti_dataset", "import", "KittiDataset", "\n", "from", "jmodt", ".", "detection", ".", "evaluation", ".", "evaluate", "import", "evaluate", "as", "evaluate_detection", "\n", "from", "jmodt", ".", "detection", ".", "modeling", ".", "point_rcnn", "import", "PointRCNN", "\n", "from", "jmodt", ".", "ops", ".", "iou3d", "import", "iou3d_utils", "\n", "from", "jmodt", ".", "tracking", "import", "tracker", "\n", "from", "jmodt", ".", "tracking", ".", "kitti_evaluate", "import", "evaluate", "as", "evaluate_tracking", "\n", "from", "jmodt", ".", "utils", "import", "train_utils", ",", "kitti_utils", "\n", "from", "jmodt", ".", "utils", ".", "bbox_transform", "import", "decode_bbox_target", "\n", "from", "jmodt", ".", "utils", ".", "object3d", "import", "Object3d", "\n", "\n", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "\"arg parser\"", ")", "\n", "parser", ".", "add_argument", "(", "'--data_root'", ",", "type", "=", "str", ",", "default", "=", "'data/KITTI'", ",", "help", "=", "'the ground truth data root'", ")", "\n", "parser", ".", "add_argument", "(", "'--det_output'", ",", "type", "=", "str", ",", "default", "=", "'output/det'", ",", "help", "=", "'the detection output directory'", ")", "\n", "parser", ".", "add_argument", "(", "'--output_dir'", ",", "type", "=", "str", ",", "default", "=", "'output'", ",", "help", "=", "'the tracking output directory'", ")", "\n", "parser", ".", "add_argument", "(", "'--ckpt'", ",", "type", "=", "str", ",", "default", "=", "'checkpoints/jmodt.pth'", ",", "help", "=", "'the pretrained model path'", ")", "\n"]], "home.repos.pwc.inspect_result.kemo-huang_jmodt.evaluation.eval.clean_data": [[30, 84], ["CLASS_NAMES[].lower", "len", "len", "range", "range", "[].lower", "abs", "ignored_gt.append", "dc_bboxes.append", "[].lower", "ignored_dt.append", "ignored_gt.append", "ignored_gt.append", "ignored_dt.append", "ignored_dt.append"], "function", ["None"], ["parser", ".", "add_argument", "(", "'--hungarian'", ",", "action", "=", "'store_true'", ",", "help", "=", "'whether to use hungarian algorithm'", ")", "\n", "parser", ".", "add_argument", "(", "'--only_tracking'", ",", "action", "=", "'store_true'", ",", "help", "=", "'whether to evaluate tracking without detection'", ")", "\n", "parser", ".", "add_argument", "(", "'--test'", ",", "action", "=", "'store_true'", ",", "help", "=", "'whether to use the test split data'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "# global random seed can be specified here", "\n", "np", ".", "random", ".", "seed", "(", "2333", ")", "\n", "\n", "\n", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "eval_joint_detection", "(", "logger", ")", ":", "\n", "    ", "det_output", "=", "args", ".", "det_output", "\n", "# set epoch_id and output dir", "\n", "num_list", "=", "re", ".", "findall", "(", "r'\\d+'", ",", "args", ".", "ckpt", ")", "if", "args", ".", "ckpt", "is", "not", "None", "else", "[", "]", "\n", "epoch_id", "=", "num_list", "[", "-", "1", "]", "if", "num_list", ".", "__len__", "(", ")", ">", "0", "else", "'no_number'", "\n", "\n", "logger", ".", "info", "(", "'**********************Start evaluate detection**********************'", ")", "\n", "\n", "# create dataloader & network", "\n", "mode", "=", "'TEST'", "if", "args", ".", "test", "else", "'EVAL'", "\n", "split", "=", "cfg", ".", "TEST", ".", "SPLIT", "if", "args", ".", "test", "else", "cfg", ".", "EVAL", ".", "SPLIT", "\n", "# create dataloader", "\n", "dataset", "=", "KittiDataset", "(", "root_dir", "=", "args", ".", "data_root", ",", "npoints", "=", "cfg", ".", "RPN", ".", "NUM_POINTS", ",", "split", "=", "split", ",", "mode", "=", "mode", ",", "\n", "classes", "=", "cfg", ".", "CLASSES", ",", "challenge", "=", "'tracking'", ",", "logger", "=", "logger", ")", "\n", "\n", "dataloader", "=", "DataLoader", "(", "dataset", ",", "batch_size", "=", "1", ",", "shuffle", "=", "False", ",", "pin_memory", "=", "True", ",", "\n", "num_workers", "=", "4", ",", "collate_fn", "=", "dataset", ".", "collate_batch", ")", "\n", "model", "=", "PointRCNN", "(", "num_classes", "=", "dataset", ".", "num_class", ",", "use_xyz", "=", "True", ",", "mode", "=", "mode", ")", "\n", "model", ".", "eval", "(", ")", "\n", "model", ".", "cuda", "(", ")", "\n", "\n", "# load checkpoint", "\n", "train_utils", ".", "load_checkpoint", "(", "model", ",", "filename", "=", "args", ".", "ckpt", ",", "logger", "=", "logger", ")", "\n", "\n", "detection_res_txt_dir", "=", "os", ".", "path", ".", "join", "(", "det_output", ",", "'txt'", ")", "\n", "os", ".", "makedirs", "(", "detection_res_txt_dir", ",", "exist_ok", "=", "True", ")", "\n", "detection_res_feat_dir", "=", "os", ".", "path", ".", "join", "(", "det_output", ",", "'feat'", ")", "\n", "os", ".", "makedirs", "(", "detection_res_feat_dir", ",", "exist_ok", "=", "True", ")", "\n", "\n", "logger", ".", "info", "(", "'==> Detection output dir: %s'", "%", "det_output", ")", "\n", "\n", "thresh_list", "=", "[", "0.1", ",", "0.3", ",", "0.5", ",", "0.7", ",", "0.9", "]", "\n", "total_recalled_bbox_list", ",", "total_gt_bbox", "=", "[", "0", "]", "*", "5", ",", "0", "\n", "total_roi_recalled_bbox_list", "=", "[", "0", "]", "*", "5", "\n", "cnt", "=", "final_total", "=", "total_cls_acc", "=", "total_cls_acc_refined", "=", "total_rpn_iou", "=", "0", "\n", "\n", "progress_bar", "=", "tqdm", ".", "tqdm", "(", "total", "=", "len", "(", "dataloader", ")", ",", "leave", "=", "True", ",", "desc", "=", "'test'", "if", "args", ".", "test", "else", "'eval'", ")", "\n", "for", "data", "in", "dataloader", ":", "\n", "        ", "cnt", "+=", "1", "\n", "sample_id", "=", "data", "[", "'sample_id'", "]", "\n", "batch_size", "=", "len", "(", "sample_id", ")", "\n", "\n", "inputs", "=", "torch", ".", "from_numpy", "(", "data", "[", "'pts_input'", "]", ")", ".", "cuda", "(", "non_blocking", "=", "True", ")", ".", "float", "(", ")", "\n", "input_data", "=", "{", "'pts_input'", ":", "inputs", "}", "\n", "# img feature", "\n"]], "home.repos.pwc.inspect_result.kemo-huang_jmodt.evaluation.eval.image_box_overlap": [[86, 114], ["numba.jit", "numpy.zeros", "range", "range", "min", "max", "min", "max"], "function", ["None"], ["            ", "pts_xy", ",", "img", "=", "data", "[", "'pts_xy'", "]", ",", "data", "[", "'img'", "]", "\n", "pts_xy", "=", "torch", ".", "from_numpy", "(", "pts_xy", ")", ".", "cuda", "(", "non_blocking", "=", "True", ")", ".", "float", "(", ")", "\n", "img", "=", "torch", ".", "from_numpy", "(", "img", ")", ".", "cuda", "(", "non_blocking", "=", "True", ")", ".", "float", "(", ")", ".", "permute", "(", "(", "0", ",", "3", ",", "1", ",", "2", ")", ")", "\n", "input_data", "[", "'pts_xy'", "]", "=", "pts_xy", "\n", "input_data", "[", "'img'", "]", "=", "img", "\n", "\n", "# model inference", "\n", "", "ret_dict", "=", "model", "(", "input_data", ")", "\n", "\n", "roi_boxes3d", "=", "ret_dict", "[", "'rois'", "]", "# (B, M, 7)", "\n", "seg_result", "=", "ret_dict", "[", "'seg_result'", "]", ".", "long", "(", ")", "# (B, N)", "\n", "\n", "rcnn_cls", "=", "ret_dict", "[", "'rcnn_cls'", "]", ".", "view", "(", "batch_size", ",", "-", "1", ",", "ret_dict", "[", "'rcnn_cls'", "]", ".", "shape", "[", "1", "]", ")", "\n", "rcnn_reg", "=", "ret_dict", "[", "'rcnn_reg'", "]", ".", "view", "(", "batch_size", ",", "-", "1", ",", "ret_dict", "[", "'rcnn_reg'", "]", ".", "shape", "[", "1", "]", ")", "# (B, M, C)", "\n", "rcnn_feat", "=", "ret_dict", "[", "'rcnn_feat'", "]", ".", "view", "(", "batch_size", ",", "-", "1", ",", "ret_dict", "[", "'rcnn_feat'", "]", ".", "shape", "[", "1", "]", ")", "\n", "\n", "if", "cfg", ".", "USE_IOU_BRANCH", ":", "\n", "            ", "rcnn_iou_branch", "=", "ret_dict", "[", "'rcnn_iou_branch'", "]", ".", "view", "(", "batch_size", ",", "-", "1", ",", "ret_dict", "[", "'rcnn_iou_branch'", "]", ".", "shape", "[", "1", "]", ")", "\n", "rcnn_iou_branch", "=", "torch", ".", "max", "(", "rcnn_iou_branch", ",", "\n", "rcnn_iou_branch", ".", "new", "(", ")", ".", "resize_", "(", "rcnn_iou_branch", ".", "shape", ")", ".", "fill_", "(", "1e-4", ")", ")", "\n", "rcnn_cls", "=", "rcnn_iou_branch", "*", "rcnn_cls", "\n", "\n", "# bounding box regression", "\n", "", "pred_boxes3d", "=", "decode_bbox_target", "(", "roi_boxes3d", ".", "view", "(", "-", "1", ",", "7", ")", ",", "rcnn_reg", ".", "view", "(", "-", "1", ",", "rcnn_reg", ".", "shape", "[", "-", "1", "]", ")", ",", "\n", "anchor_size", "=", "torch", ".", "from_numpy", "(", "cfg", ".", "CLS_MEAN_SIZE", "[", "0", "]", ")", ".", "cuda", "(", ")", ",", "\n", "loc_scope", "=", "cfg", ".", "RCNN", ".", "LOC_SCOPE", ",", "\n", "loc_bin_size", "=", "cfg", ".", "RCNN", ".", "LOC_BIN_SIZE", ",", "\n", "num_head_bin", "=", "cfg", ".", "RCNN", ".", "NUM_HEAD_BIN", ",", "\n", "get_xz_fine", "=", "True", ",", "get_y_by_bin", "=", "cfg", ".", "RCNN", ".", "LOC_Y_BY_BIN", ",", "\n"]], "home.repos.pwc.inspect_result.kemo-huang_jmodt.evaluation.eval.bev_box_overlap": [[116, 119], ["jmodt.detection.evaluation.rotate_iou.rotate_iou_gpu_eval"], "function", ["home.repos.pwc.inspect_result.kemo-huang_jmodt.evaluation.rotate_iou.rotate_iou_gpu_eval"], ["get_ry_fine", "=", "True", ")", ".", "view", "(", "batch_size", ",", "-", "1", ",", "7", ")", "\n", "\n", "# scoring", "\n", "if", "rcnn_cls", ".", "shape", "[", "2", "]", "==", "1", ":", "\n"]], "home.repos.pwc.inspect_result.kemo-huang_jmodt.evaluation.eval.d3_box_overlap_kernel": [[121, 148], ["numba.jit", "range", "range", "min", "max"], "function", ["None"], ["norm_scores", "=", "torch", ".", "sigmoid", "(", "raw_scores", ")", "\n", "", "else", ":", "\n", "            ", "pred_classes", "=", "torch", ".", "argmax", "(", "rcnn_cls", ",", "dim", "=", "1", ")", ".", "view", "(", "-", "1", ")", "\n", "cls_norm_scores", "=", "torch", ".", "softmax", "(", "rcnn_cls", ",", "dim", "=", "1", ")", "\n", "raw_scores", "=", "rcnn_cls", "[", ":", ",", "pred_classes", "]", "\n", "norm_scores", "=", "cls_norm_scores", "[", ":", ",", "pred_classes", "]", "\n", "\n", "# evaluation", "\n", "", "if", "not", "args", ".", "test", ":", "\n", "            ", "if", "not", "cfg", ".", "RPN", ".", "FIXED", ":", "\n", "                ", "rpn_cls_label", ",", "rpn_reg_label", "=", "data", "[", "'rpn_cls_label'", "]", ",", "data", "[", "'rpn_reg_label'", "]", "\n", "rpn_cls_label", "=", "torch", ".", "from_numpy", "(", "rpn_cls_label", ")", ".", "cuda", "(", "non_blocking", "=", "True", ")", ".", "long", "(", ")", "\n", "\n", "", "gt_boxes3d", "=", "data", "[", "'gt_boxes3d'", "]", "\n", "\n", "for", "k", "in", "range", "(", "batch_size", ")", ":", "\n", "# calculate recall", "\n", "                ", "cur_gt_boxes3d", "=", "gt_boxes3d", "[", "k", "]", "\n", "tmp_idx", "=", "cur_gt_boxes3d", ".", "__len__", "(", ")", "-", "1", "\n", "\n", "while", "tmp_idx", ">=", "0", "and", "cur_gt_boxes3d", "[", "tmp_idx", "]", ".", "sum", "(", ")", "==", "0", ":", "\n", "                    ", "tmp_idx", "-=", "1", "\n", "\n", "", "if", "tmp_idx", ">=", "0", ":", "\n", "                    ", "cur_gt_boxes3d", "=", "cur_gt_boxes3d", "[", ":", "tmp_idx", "+", "1", "]", "\n", "\n", "cur_gt_boxes3d", "=", "torch", ".", "from_numpy", "(", "cur_gt_boxes3d", ")", ".", "cuda", "(", "non_blocking", "=", "True", ")", ".", "float", "(", ")", "\n", "iou3d", "=", "iou3d_utils", ".", "boxes_iou3d_gpu", "(", "pred_boxes3d", "[", "k", "]", ",", "cur_gt_boxes3d", ")", "\n"]], "home.repos.pwc.inspect_result.kemo-huang_jmodt.evaluation.eval.d3_box_overlap": [[150, 155], ["jmodt.detection.evaluation.rotate_iou.rotate_iou_gpu_eval", "eval.d3_box_overlap_kernel"], "function", ["home.repos.pwc.inspect_result.kemo-huang_jmodt.evaluation.rotate_iou.rotate_iou_gpu_eval", "home.repos.pwc.inspect_result.kemo-huang_jmodt.evaluation.eval.d3_box_overlap_kernel"], ["refined_iou", ",", "_", "=", "iou3d", ".", "max", "(", "dim", "=", "1", ")", "\n", "\n", "for", "idx", ",", "thresh", "in", "enumerate", "(", "thresh_list", ")", ":", "\n", "                        ", "total_recalled_bbox_list", "[", "idx", "]", "+=", "(", "gt_max_iou", ">", "thresh", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "", "total_gt_bbox", "+=", "cur_gt_boxes3d", ".", "shape", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.kemo-huang_jmodt.evaluation.eval.compute_statistics_jit": [[157, 274], ["numba.jit", "numpy.zeros", "numpy.zeros", "range", "range", "range", "range", "eval.image_box_overlap", "range", "numpy.zeros", "range", "range", "numpy.sum", "numpy.cos"], "function", ["home.repos.pwc.inspect_result.kemo-huang_jmodt.evaluation.eval.image_box_overlap"], ["iou3d_in", "=", "iou3d_utils", ".", "boxes_iou3d_gpu", "(", "roi_boxes3d", "[", "k", "]", ",", "cur_gt_boxes3d", ")", "\n", "gt_max_iou_in", ",", "_", "=", "iou3d_in", ".", "max", "(", "dim", "=", "0", ")", "\n", "\n", "for", "idx", ",", "thresh", "in", "enumerate", "(", "thresh_list", ")", ":", "\n", "                        ", "total_roi_recalled_bbox_list", "[", "idx", "]", "+=", "(", "gt_max_iou_in", ">", "thresh", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "\n", "", "", "if", "not", "cfg", ".", "RPN", ".", "FIXED", ":", "\n", "                    ", "fg_mask", "=", "rpn_cls_label", ">", "0", "\n", "correct", "=", "(", "(", "seg_result", "==", "rpn_cls_label", ")", "&", "fg_mask", ")", ".", "sum", "(", ")", ".", "float", "(", ")", "\n", "union", "=", "fg_mask", ".", "sum", "(", ")", ".", "float", "(", ")", "+", "(", "seg_result", ">", "0", ")", ".", "sum", "(", ")", ".", "float", "(", ")", "-", "correct", "\n", "rpn_iou", "=", "correct", "/", "torch", ".", "clamp", "(", "union", ",", "min", "=", "1.0", ")", "\n", "total_rpn_iou", "+=", "rpn_iou", ".", "item", "(", ")", "\n", "\n", "", "", "", "disp_dict", "=", "{", "'mode'", ":", "mode", ",", "'recall'", ":", "'%d/%d'", "%", "(", "total_recalled_bbox_list", "[", "3", "]", ",", "total_gt_bbox", ")", "}", "\n", "progress_bar", ".", "set_postfix", "(", "disp_dict", ")", "\n", "progress_bar", ".", "update", "(", ")", "\n", "\n", "# scores thresh", "\n", "inds", "=", "norm_scores", ">", "cfg", ".", "RCNN", ".", "SCORE_THRESH", "\n", "\n", "for", "k", "in", "range", "(", "batch_size", ")", ":", "\n", "            ", "cur_inds", "=", "inds", "[", "k", "]", ".", "view", "(", "-", "1", ")", "\n", "if", "cur_inds", ".", "sum", "(", ")", "==", "0", ":", "\n", "                ", "continue", "\n", "\n", "", "pred_boxes3d_selected", "=", "pred_boxes3d", "[", "k", ",", "cur_inds", "]", "\n", "raw_scores_selected", "=", "raw_scores", "[", "k", ",", "cur_inds", "]", "\n", "feat_selected", "=", "rcnn_feat", "[", "k", ",", "cur_inds", "]", "\n", "norm_scores_selected", "=", "norm_scores", "[", "k", ",", "cur_inds", "]", "\n", "\n", "# NMS thresh", "\n", "# rotated nms", "\n", "boxes_bev_selected", "=", "kitti_utils", ".", "boxes3d_to_bev_torch", "(", "pred_boxes3d_selected", ")", "\n", "keep_idx", "=", "iou3d_utils", ".", "nms_gpu", "(", "boxes_bev_selected", ",", "raw_scores_selected", ",", "cfg", ".", "RCNN", ".", "NMS_THRESH", ")", ".", "view", "(", "-", "1", ")", "\n", "pred_boxes3d_selected", "=", "pred_boxes3d_selected", "[", "keep_idx", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "scores_selected", "=", "norm_scores_selected", "[", "keep_idx", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "feat_selected", "=", "feat_selected", "[", "keep_idx", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "cur_sample_id", "=", "sample_id", "[", "k", "]", "\n", "calib", "=", "dataset", ".", "get_calib", "(", "cur_sample_id", ")", "\n", "final_total", "+=", "pred_boxes3d_selected", ".", "shape", "[", "0", "]", "\n", "image_shape", "=", "dataset", ".", "get_image_shape", "(", "cur_sample_id", ")", "\n", "save_kitti_detection_format", "(", "cur_sample_id", ",", "calib", ",", "pred_boxes3d_selected", ",", "detection_res_txt_dir", ",", "\n", "scores_selected", ",", "image_shape", ",", "feat_selected", ",", "detection_res_feat_dir", ")", "\n", "\n", "", "", "progress_bar", ".", "close", "(", ")", "\n", "# dump empty files", "\n", "image_idx_list", "=", "dataset", ".", "image_idx_list", "\n", "empty_cnt", "=", "0", "\n", "for", "k", "in", "range", "(", "image_idx_list", ".", "__len__", "(", ")", ")", ":", "\n", "        ", "cur_file", "=", "os", ".", "path", ".", "join", "(", "detection_res_txt_dir", ",", "'%06d.txt'", "%", "int", "(", "image_idx_list", "[", "k", "]", ")", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "cur_file", ")", ":", "\n", "            ", "with", "open", "(", "cur_file", ",", "'w'", ")", ":", "\n", "                ", "pass", "\n", "", "empty_cnt", "+=", "1", "\n", "logger", ".", "info", "(", "'empty_cnt=%d: dump empty file %s'", "%", "(", "empty_cnt", ",", "cur_file", ")", ")", "\n", "\n", "", "", "if", "not", "args", ".", "test", ":", "\n", "        ", "logger", ".", "info", "(", "'-------------------performance of epoch %s---------------------'", "%", "epoch_id", ")", "\n", "avg_rpn_iou", "=", "(", "total_rpn_iou", "/", "max", "(", "cnt", ",", "1", ")", ")", "\n", "avg_cls_acc", "=", "(", "total_cls_acc", "/", "max", "(", "cnt", ",", "1", ")", ")", "\n", "avg_cls_acc_refined", "=", "(", "total_cls_acc_refined", "/", "max", "(", "cnt", ",", "1", ")", ")", "\n", "avg_det_num", "=", "(", "final_total", "/", "max", "(", "len", "(", "dataset", ")", ",", "1", ")", ")", "\n", "logger", ".", "info", "(", "'final average detections: %.3f'", "%", "avg_det_num", ")", "\n", "logger", ".", "info", "(", "'final average rpn_iou refined: %.3f'", "%", "avg_rpn_iou", ")", "\n", "logger", ".", "info", "(", "'final average cls acc: %.3f'", "%", "avg_cls_acc", ")", "\n", "logger", ".", "info", "(", "'final average cls acc refined: %.3f'", "%", "avg_cls_acc_refined", ")", "\n", "\n", "for", "idx", ",", "thresh", "in", "enumerate", "(", "thresh_list", ")", ":", "\n", "            ", "cur_roi_recall", "=", "total_roi_recalled_bbox_list", "[", "idx", "]", "/", "max", "(", "total_gt_bbox", ",", "1", ")", "\n", "logger", ".", "info", "(", "'total roi bbox recall(thresh=%.3f): %d / %d = %f'", "%", "(", "thresh", ",", "total_roi_recalled_bbox_list", "[", "idx", "]", ",", "\n", "total_gt_bbox", ",", "cur_roi_recall", ")", ")", "\n", "\n", "", "for", "idx", ",", "thresh", "in", "enumerate", "(", "thresh_list", ")", ":", "\n", "            ", "cur_recall", "=", "total_recalled_bbox_list", "[", "idx", "]", "/", "max", "(", "total_gt_bbox", ",", "1", ")", "\n", "logger", ".", "info", "(", "'total bbox recall(thresh=%.3f): %d / %d = %f'", "%", "(", "thresh", ",", "total_recalled_bbox_list", "[", "idx", "]", ",", "\n", "total_gt_bbox", ",", "cur_recall", ")", ")", "\n", "\n", "", "logger", ".", "info", "(", "'Averate Precision:'", ")", "\n", "name_to_class", "=", "{", "'Car'", ":", "0", ",", "'Pedestrian'", ":", "1", ",", "'Cyclist'", ":", "2", "}", "\n", "ap_result_str", ",", "ap_dict", "=", "evaluate_detection", "(", "dataset", ".", "label_dir", ",", "detection_res_txt_dir", ",", "\n", "image_idx_list", "=", "image_idx_list", ",", "\n", "current_class", "=", "name_to_class", "[", "cfg", ".", "CLASSES", "]", ")", "\n", "logger", ".", "info", "(", "ap_result_str", ")", "\n", "\n", "", "logger", ".", "info", "(", "'result is saved to: %s\\n'", "%", "det_output", ")", "\n", "\n", "\n", "", "def", "save_kitti_detection_format", "(", "sample_id", ",", "calib", ",", "bbox3d", ",", "kitti_output_dir", ",", "scores", ",", "img_shape", ",", "\n", "feat", "=", "None", ",", "feat_output_dir", "=", "None", ")", ":", "\n", "    ", "corners3d", "=", "kitti_utils", ".", "boxes3d_to_corners3d", "(", "bbox3d", ")", "\n", "img_boxes", ",", "_", "=", "calib", ".", "corners3d_to_img_boxes", "(", "corners3d", ")", "\n", "\n", "img_boxes", "[", ":", ",", "0", "]", "=", "np", ".", "clip", "(", "img_boxes", "[", ":", ",", "0", "]", ",", "0", ",", "img_shape", "[", "1", "]", "-", "1", ")", "\n", "img_boxes", "[", ":", ",", "1", "]", "=", "np", ".", "clip", "(", "img_boxes", "[", ":", ",", "1", "]", ",", "0", ",", "img_shape", "[", "0", "]", "-", "1", ")", "\n", "img_boxes", "[", ":", ",", "2", "]", "=", "np", ".", "clip", "(", "img_boxes", "[", ":", ",", "2", "]", ",", "0", ",", "img_shape", "[", "1", "]", "-", "1", ")", "\n", "img_boxes", "[", ":", ",", "3", "]", "=", "np", ".", "clip", "(", "img_boxes", "[", ":", ",", "3", "]", ",", "0", ",", "img_shape", "[", "0", "]", "-", "1", ")", "\n", "\n", "img_boxes_w", "=", "img_boxes", "[", ":", ",", "2", "]", "-", "img_boxes", "[", ":", ",", "0", "]", "\n", "img_boxes_h", "=", "img_boxes", "[", ":", ",", "3", "]", "-", "img_boxes", "[", ":", ",", "1", "]", "\n", "box_valid_mask", "=", "np", ".", "logical_and", "(", "img_boxes_w", "<", "img_shape", "[", "1", "]", "*", "0.8", ",", "img_boxes_h", "<", "img_shape", "[", "0", "]", "*", "0.8", ")", "\n", "\n", "kitti_output_file", "=", "os", ".", "path", ".", "join", "(", "kitti_output_dir", ",", "'%06d.txt'", "%", "sample_id", ")", "\n", "with", "open", "(", "kitti_output_file", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "for", "k", "in", "range", "(", "bbox3d", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "if", "not", "box_valid_mask", "[", "k", "]", ":", "\n", "                ", "continue", "\n", "", "x", ",", "z", ",", "ry", "=", "bbox3d", "[", "k", ",", "0", "]", ",", "bbox3d", "[", "k", ",", "2", "]", ",", "bbox3d", "[", "k", ",", "6", "]", "\n", "beta", "=", "np", ".", "arctan2", "(", "z", ",", "x", ")", "\n", "alpha", "=", "-", "np", ".", "sign", "(", "beta", ")", "*", "np", ".", "pi", "/", "2", "+", "beta", "+", "ry", "\n", "\n", "print", "(", "'%s -1 -1 %.4f %.4f %.4f %.4f %.4f %.4f %.4f %.4f %.4f %.4f %.4f %.4f %.4f'", "%", "\n", "(", "cfg", ".", "CLASSES", ",", "alpha", ",", "img_boxes", "[", "k", ",", "0", "]", ",", "img_boxes", "[", "k", ",", "1", "]", ",", "img_boxes", "[", "k", ",", "2", "]", ",", "img_boxes", "[", "k", ",", "3", "]", ",", "\n", "bbox3d", "[", "k", ",", "3", "]", ",", "bbox3d", "[", "k", ",", "4", "]", ",", "bbox3d", "[", "k", ",", "5", "]", ",", "bbox3d", "[", "k", ",", "0", "]", ",", "bbox3d", "[", "k", ",", "1", "]", ",", "bbox3d", "[", "k", ",", "2", "]", ",", "\n", "bbox3d", "[", "k", ",", "6", "]", ",", "scores", "[", "k", "]", ")", ",", "file", "=", "f", ")", "\n", "", "", "if", "feat", "is", "not", "None", ":", "\n", "        ", "output_file", "=", "os", ".", "path", ".", "join", "(", "feat_output_dir", ",", "'%06d.npy'", "%", "sample_id", ")", "\n", "np", ".", "save", "(", "output_file", ",", "feat", "[", "box_valid_mask", "]", ".", "astype", "(", "np", ".", "float32", ")", ")", "\n"]], "home.repos.pwc.inspect_result.kemo-huang_jmodt.evaluation.eval.get_split_parts": [[276, 283], ["None"], "function", ["None"], ["\n", "", "", "def", "convert_det_sample_to_seq_frame", "(", "seq2sample_path", ",", "sample2frame_path", ")", ":", "\n", "    ", "seq2sample_dict", "=", "{", "}", "\n", "sample2frame_dict", "=", "{", "}", "\n", "with", "open", "(", "seq2sample_path", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "lines", "=", "f", ".", "readlines", "(", ")", "\n", "", "for", "line", "in", "lines", ":", "\n", "        ", "split_line", "=", "line", ".", "split", "(", ")", "\n"]], "home.repos.pwc.inspect_result.kemo-huang_jmodt.evaluation.eval.fused_compute_statistics": [[285, 333], ["numba.jit", "range", "enumerate", "eval.compute_statistics_jit"], "function", ["home.repos.pwc.inspect_result.kemo-huang_jmodt.evaluation.eval.compute_statistics_jit"], ["seq2sample_dict", "[", "seq_id", "]", "=", "split_line", "[", "1", ":", "]", "\n", "", "with", "open", "(", "sample2frame_path", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "lines", "=", "f", ".", "readlines", "(", ")", "\n", "", "for", "line", "in", "lines", ":", "\n", "        ", "split_line", "=", "line", ".", "split", "(", ")", "\n", "sample2frame_dict", "[", "split_line", "[", "0", "]", "]", "=", "split_line", "[", "2", "]", "\n", "", "return", "seq2sample_dict", ",", "sample2frame_dict", "\n", "\n", "\n", "", "def", "eval_tracking", "(", "logger", ")", ":", "\n", "    ", "part", "=", "'test'", "if", "args", ".", "test", "else", "'val'", "\n", "tracking_res_dir", "=", "os", ".", "path", ".", "join", "(", "args", ".", "output_dir", ",", "args", ".", "tag", ",", "part", ")", "\n", "os", ".", "makedirs", "(", "tracking_res_dir", ",", "exist_ok", "=", "True", ")", "\n", "det_res_dir", "=", "args", ".", "det_output", "\n", "\n", "# MOT hyper-parameters", "\n", "t_miss", "=", "2", "\n", "t_hit", "=", "0", "\n", "w_cls", "=", "100", "\n", "w_app", "=", "2", "\n", "w_iou", "=", "10", "\n", "w_dis", "=", "10", "\n", "w_se", "=", "1", "\n", "cls_threshold", "=", "0.85", "\n", "\n", "logger", ".", "info", "(", "\"**********************Start evaluate tracking**********************\"", ")", "\n", "logger", ".", "info", "(", "f't_miss={t_miss}, t_hit={t_hit}, '", "\n", "f'w_cls={w_cls}, w_app={w_app}, w_iou={w_iou}, w_dis={w_dis}, w_se={w_se}'", ")", "\n", "\n", "model", "=", "PointRCNN", "(", "num_classes", "=", "2", ",", "mode", "=", "'TEST'", "if", "args", ".", "test", "else", "'EVAL'", ")", "\n", "model", ".", "eval", "(", ")", "\n", "model", ".", "cuda", "(", ")", "\n", "\n", "# load checkpoint", "\n", "train_utils", ".", "load_checkpoint", "(", "model", ",", "filename", "=", "args", ".", "ckpt", ",", "logger", "=", "logger", ")", "\n", "\n", "car_tracker", "=", "tracker", ".", "Tracker", "(", "\n", "link_model", "=", "model", ".", "rcnn_net", ".", "link_layer", ",", "\n", "se_model", "=", "model", ".", "rcnn_net", ".", "se_layer", ",", "\n", "t_miss", "=", "t_miss", ",", "t_hit", "=", "t_hit", ",", "\n", "w_cls", "=", "w_cls", ",", "w_app", "=", "w_app", ",", "w_iou", "=", "w_iou", ",", "w_dis", "=", "w_dis", ",", "w_se", "=", "w_se", ",", "\n", "hungarian", "=", "args", ".", "hungarian", ")", "\n", "\n", "total_time", "=", "0", "\n", "total_frames", "=", "0", "\n", "\n", "seq2sample_dict", ",", "sample2frame_dict", "=", "convert_det_sample_to_seq_frame", "(", "\n", "os", ".", "path", ".", "join", "(", "args", ".", "data_root", ",", "'tracking_object'", ",", "'testing'", "if", "args", ".", "test", "else", "'training'", ",", "'seq2sample.txt'", ")", ",", "\n", "os", ".", "path", ".", "join", "(", "args", ".", "data_root", ",", "'tracking_object'", ",", "'testing'", "if", "args", ".", "test", "else", "'training'", ",", "'sample2frame.txt'", ")", "\n"]], "home.repos.pwc.inspect_result.kemo-huang_jmodt.evaluation.eval.calculate_iou_partly": [[335, 408], ["numpy.stack", "numpy.stack", "len", "eval.get_split_parts", "enumerate", "len", "len", "parted_overlaps.append", "range", "len", "len", "numpy.concatenate", "numpy.concatenate", "eval.image_box_overlap", "overlaps.append", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "bev_box_overlap().astype", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "d3_box_overlap().astype", "ValueError", "eval.bev_box_overlap", "eval.d3_box_overlap"], "function", ["home.repos.pwc.inspect_result.kemo-huang_jmodt.evaluation.eval.get_split_parts", "home.repos.pwc.inspect_result.kemo-huang_jmodt.evaluation.eval.image_box_overlap", "home.repos.pwc.inspect_result.kemo-huang_jmodt.evaluation.eval.bev_box_overlap", "home.repos.pwc.inspect_result.kemo-huang_jmodt.evaluation.eval.d3_box_overlap"], ["\n", "seq_list", "=", "[", "str", "(", "i", ")", ".", "zfill", "(", "4", ")", "for", "i", "in", "range", "(", "29", ")", "]", "if", "args", ".", "test", "else", "VALID_SEQ_ID", "\n", "for", "seq_id", "in", "seq_list", ":", "\n", "        ", "sample_ids", "=", "seq2sample_dict", "[", "seq_id", "]", "\n", "out_file", "=", "open", "(", "os", ".", "path", ".", "join", "(", "tracking_res_dir", ",", "f'{seq_id}.txt'", ")", ",", "'w+'", ")", "\n", "tbar", "=", "tqdm", ".", "tqdm", "(", "total", "=", "len", "(", "sample_ids", ")", ",", "desc", "=", "seq_id", ",", "dynamic_ncols", "=", "True", ",", "leave", "=", "True", ")", "\n", "car_tracker", ".", "reset", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "sample_id", "in", "sample_ids", ":", "\n", "                ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "det_res_dir", ",", "'txt'", ",", "f'{sample_id}.txt'", ")", ",", "'r'", ")", "as", "f", ":", "\n", "                    ", "object_lines", "=", "f", ".", "readlines", "(", ")", "\n", "", "if", "len", "(", "object_lines", ")", "==", "0", ":", "\n", "                    ", "tbar", ".", "update", "(", ")", "\n", "continue", "\n", "", "car_objects", "=", "np", ".", "array", "(", "[", "Object3d", "(", "line", ")", "for", "line", "in", "object_lines", "]", ")", "\n", "car_features", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "det_res_dir", ",", "'feat'", ",", "f'{sample_id}.npy'", ")", ")", "\n", "assert", "len", "(", "car_features", ")", "==", "len", "(", "car_objects", ")", ",", "f\"obj {len(car_objects)} != feat {len(car_features)}\"", "\n", "\n", "car_features", "=", "torch", ".", "from_numpy", "(", "car_features", ")", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "boxes_3d", "=", "np", ".", "empty", "(", "(", "len", "(", "car_objects", ")", ",", "7", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "for", "d", "in", "range", "(", "len", "(", "car_objects", ")", ")", ":", "\n", "                    ", "boxes_3d", "[", "d", ",", ":", "3", "]", "=", "car_objects", "[", "d", "]", ".", "pos", "\n", "boxes_3d", "[", "d", ",", "3", "]", "=", "car_objects", "[", "d", "]", ".", "h", "\n", "boxes_3d", "[", "d", ",", "4", "]", "=", "car_objects", "[", "d", "]", ".", "w", "\n", "boxes_3d", "[", "d", ",", "5", "]", "=", "car_objects", "[", "d", "]", ".", "l", "\n", "boxes_3d", "[", "d", ",", "6", "]", "=", "car_objects", "[", "d", "]", ".", "ry", "\n", "", "scores", "=", "np", ".", "array", "(", "[", "obj", ".", "score", "for", "obj", "in", "car_objects", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "mask", "=", "scores", ">", "cls_threshold", "\n", "\n", "boxes_3d", "=", "boxes_3d", "[", "mask", "]", "\n", "scores", "=", "scores", "[", "mask", "]", "\n", "car_features", "=", "car_features", "[", "mask", "]", "\n", "car_objects", "=", "car_objects", "[", "mask", "]", "\n", "\n", "frame_id", "=", "sample2frame_dict", "[", "sample_id", "]", "\n", "frame_id", "=", "int", "(", "frame_id", ")", "\n", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "car_results", "=", "car_tracker", ".", "update", "(", "frame_id", ",", "boxes_3d", ",", "scores", ",", "car_features", ",", "car_objects", ")", "\n", "frame_time", "=", "time", ".", "time", "(", ")", "-", "start_time", "\n", "\n", "total_time", "+=", "frame_time", "\n", "total_frames", "+=", "1", "\n", "tbar", ".", "set_postfix", "(", "{", "'time'", ":", "frame_time", "}", ")", "\n", "tbar", ".", "update", "(", ")", "\n", "\n", "save_kitti_tracking_format", "(", "car_results", ",", "frame_id", ",", "out_file", ")", "\n", "", "", "out_file", ".", "close", "(", ")", "\n", "tbar", ".", "close", "(", ")", "\n", "", "logger", ".", "info", "(", "\n", "f'total frames: {total_frames}, total time: {total_time}, frames per second: {total_frames / total_time}'", ")", "\n", "\n", "if", "not", "args", ".", "test", ":", "\n", "        ", "gt_path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "data_root", ",", "'tracking'", ",", "'training'", ")", "\n", "evaluate_tracking", "(", "\n", "result_sha", "=", "args", ".", "tag", ",", "result_root", "=", "args", ".", "output_dir", ",", "part", "=", "part", ",", "gt_path", "=", "gt_path", ",", "logger", "=", "logger", ")", "\n", "\n", "\n", "", "", "def", "save_kitti_tracking_format", "(", "results", ",", "frame_id", ",", "out_file", ")", ":", "\n", "    ", "for", "tid", ",", "info", ",", "score", "in", "results", ":", "\n", "        ", "out_file", ".", "write", "(", "\n", "'%d %d %s %d %d %.2f %.2f %.2f %.2f %.2f %.2f %.2f %.2f %.2f %.2f %.2f %.2f %.2f\\n'", "%", "(", "\n", "frame_id", ",", "tid", ",", "info", ".", "cls_type", ",", "int", "(", "info", ".", "truncation", ")", ",", "int", "(", "info", ".", "occlusion", ")", ",", "info", ".", "alpha", ",", "\n", "info", ".", "box2d", "[", "0", "]", ",", "info", ".", "box2d", "[", "1", "]", ",", "info", ".", "box2d", "[", "2", "]", ",", "info", ".", "box2d", "[", "3", "]", ",", "\n", "info", ".", "h", ",", "info", ".", "w", ",", "info", ".", "l", ",", "info", ".", "pos", "[", "0", "]", ",", "info", ".", "pos", "[", "1", "]", ",", "info", ".", "pos", "[", "2", "]", ",", "\n", "info", ".", "ry", ",", "info", ".", "score", "\n", ")", "\n", ")", "\n", "\n", "\n", "", "", "def", "main", "(", ")", ":", "\n", "    ", "logger", "=", "logging", ".", "getLogger", "(", "__name__", ")", "\n", "logger", ".", "setLevel", "(", "level", "=", "logging", ".", "INFO", ")", "\n"]], "home.repos.pwc.inspect_result.kemo-huang_jmodt.evaluation.eval._prepare_data": [[410, 439], ["range", "numpy.stack", "len", "eval.clean_data", "ignored_gts.append", "ignored_dets.append", "np.stack.append", "dontcares.append", "numpy.concatenate", "numpy.concatenate", "gt_datas_list.append", "dt_datas_list.append", "numpy.array", "numpy.array", "len", "numpy.zeros().astype", "numpy.stack().astype", "numpy.zeros", "numpy.stack"], "function", ["home.repos.pwc.inspect_result.kemo-huang_jmodt.evaluation.eval.clean_data"], ["\n", "ch", "=", "logging", ".", "StreamHandler", "(", ")", "\n", "ch", ".", "setFormatter", "(", "formatter", ")", "\n", "ch", ".", "setLevel", "(", "level", "=", "logging", ".", "INFO", ")", "\n", "logger", ".", "addHandler", "(", "ch", ")", "\n", "\n", "if", "not", "args", ".", "only_tracking", ":", "\n", "        ", "os", ".", "makedirs", "(", "args", ".", "det_output", ",", "exist_ok", "=", "True", ")", "\n", "det_log_path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "det_output", ",", "f'{datetime.now().strftime(\"%Y-%m-%d-%S-%M-%H\")}.log'", ")", "\n", "det_fh", "=", "logging", ".", "FileHandler", "(", "det_log_path", ")", "\n", "det_fh", ".", "setFormatter", "(", "formatter", ")", "\n", "det_fh", ".", "setLevel", "(", "level", "=", "logging", ".", "INFO", ")", "\n", "logger", ".", "addHandler", "(", "det_fh", ")", "\n", "\n", "# start eval detection", "\n", "eval_joint_detection", "(", "logger", ")", "\n", "\n", "logger", ".", "removeHandler", "(", "det_fh", ")", "\n", "\n", "", "os", ".", "makedirs", "(", "os", ".", "path", ".", "join", "(", "args", ".", "output_dir", ",", "args", ".", "tag", ")", ",", "exist_ok", "=", "True", ")", "\n", "trk_log_path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "output_dir", ",", "args", ".", "tag", ",", "f'{datetime.now().strftime(\"%Y-%m-%d-%S-%M-%H\")}.log'", ")", "\n", "trk_fh", "=", "logging", ".", "FileHandler", "(", "trk_log_path", ")", "\n", "trk_fh", ".", "setFormatter", "(", "formatter", ")", "\n", "trk_fh", ".", "setLevel", "(", "level", "=", "logging", ".", "INFO", ")", "\n", "logger", ".", "addHandler", "(", "trk_fh", ")", "\n", "\n", "# start eval tracking", "\n", "eval_tracking", "(", "logger", ")", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.kemo-huang_jmodt.evaluation.eval.eval_class": [[441, 547], ["len", "eval.get_split_parts", "eval.calculate_iou_partly", "len", "len", "len", "numpy.zeros", "numpy.zeros", "numpy.zeros", "enumerate", "len", "len", "enumerate", "eval._prepare_data", "enumerate", "range", "numpy.array", "eval.get_thresholds", "numpy.array", "numpy.zeros", "enumerate", "range", "range", "len", "eval.compute_statistics_jit", "np.array.tolist", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "eval.fused_compute_statistics", "len", "len", "numpy.max", "numpy.max", "len", "numpy.max"], "function", ["home.repos.pwc.inspect_result.kemo-huang_jmodt.evaluation.eval.get_split_parts", "home.repos.pwc.inspect_result.kemo-huang_jmodt.evaluation.eval.calculate_iou_partly", "home.repos.pwc.inspect_result.kemo-huang_jmodt.evaluation.eval._prepare_data", "home.repos.pwc.inspect_result.kemo-huang_jmodt.evaluation.eval.get_thresholds", "home.repos.pwc.inspect_result.kemo-huang_jmodt.evaluation.eval.compute_statistics_jit", "home.repos.pwc.inspect_result.kemo-huang_jmodt.evaluation.eval.fused_compute_statistics"], ["    ", "main", "(", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.kemo-huang_jmodt.evaluation.eval.get_mAP": [[549, 554], ["range"], "function", ["None"], []], "home.repos.pwc.inspect_result.kemo-huang_jmodt.evaluation.eval.print_str": [[556, 563], ["sysio.StringIO.truncate", "sysio.StringIO.seek", "print", "sysio.StringIO.getvalue", "io.StringIO"], "function", ["None"], []], "home.repos.pwc.inspect_result.kemo-huang_jmodt.evaluation.eval.do_eval": [[565, 586], ["eval.eval_class", "eval.get_mAP", "eval.eval_class", "eval.get_mAP", "eval.eval_class", "eval.get_mAP", "eval.get_mAP"], "function", ["home.repos.pwc.inspect_result.kemo-huang_jmodt.evaluation.eval.eval_class", "home.repos.pwc.inspect_result.kemo-huang_jmodt.evaluation.eval.get_mAP", "home.repos.pwc.inspect_result.kemo-huang_jmodt.evaluation.eval.eval_class", "home.repos.pwc.inspect_result.kemo-huang_jmodt.evaluation.eval.get_mAP", "home.repos.pwc.inspect_result.kemo-huang_jmodt.evaluation.eval.eval_class", "home.repos.pwc.inspect_result.kemo-huang_jmodt.evaluation.eval.get_mAP", "home.repos.pwc.inspect_result.kemo-huang_jmodt.evaluation.eval.get_mAP"], []], "home.repos.pwc.inspect_result.kemo-huang_jmodt.evaluation.eval.do_coco_style_eval": [[588, 604], ["numpy.zeros", "range", "eval.do_eval", "mAP_bbox.mean.mean", "mAP_bev.mean.mean", "mAP_3d.mean.mean", "range", "mAP_aos.mean.mean", "numpy.linspace"], "function", ["home.repos.pwc.inspect_result.kemo-huang_jmodt.evaluation.eval.do_eval"], []], "home.repos.pwc.inspect_result.kemo-huang_jmodt.evaluation.eval.get_official_eval_result": [[606, 676], ["numpy.array", "numpy.array", "numpy.stack", "eval.do_eval", "enumerate", "isinstance", "isinstance", "range", "class_to_name.items", "current_classes_int.append", "current_classes_int.append", "eval.print_str", "eval.print_str", "eval.print_str", "eval.print_str", "eval.print_str"], "function", ["home.repos.pwc.inspect_result.kemo-huang_jmodt.evaluation.eval.do_eval", "home.repos.pwc.inspect_result.kemo-huang_jmodt.evaluation.eval.print_str", "home.repos.pwc.inspect_result.kemo-huang_jmodt.evaluation.eval.print_str", "home.repos.pwc.inspect_result.kemo-huang_jmodt.evaluation.eval.print_str", "home.repos.pwc.inspect_result.kemo-huang_jmodt.evaluation.eval.print_str", "home.repos.pwc.inspect_result.kemo-huang_jmodt.evaluation.eval.print_str"], []], "home.repos.pwc.inspect_result.kemo-huang_jmodt.evaluation.eval.get_coco_eval_result": [[678, 738], ["numpy.zeros", "enumerate", "eval.do_coco_style_eval", "enumerate", "isinstance", "isinstance", "eval.print_str", "eval.print_str", "eval.print_str", "eval.print_str", "class_to_name.items", "current_classes_int.append", "current_classes_int.append", "len", "numpy.array", "numpy.array", "eval.print_str"], "function", ["home.repos.pwc.inspect_result.kemo-huang_jmodt.evaluation.eval.do_coco_style_eval", "home.repos.pwc.inspect_result.kemo-huang_jmodt.evaluation.eval.print_str", "home.repos.pwc.inspect_result.kemo-huang_jmodt.evaluation.eval.print_str", "home.repos.pwc.inspect_result.kemo-huang_jmodt.evaluation.eval.print_str", "home.repos.pwc.inspect_result.kemo-huang_jmodt.evaluation.eval.print_str", "home.repos.pwc.inspect_result.kemo-huang_jmodt.evaluation.eval.print_str"], []], "home.repos.pwc.inspect_result.kemo-huang_jmodt.evaluation.rotate_iou.div_up": [[13, 16], ["numba.jit"], "function", ["None"], ["@", "numba", ".", "jit", "(", "nopython", "=", "True", ")", "\n", "def", "div_up", "(", "m", ",", "n", ")", ":", "\n", "    ", "return", "m", "//", "n", "+", "(", "m", "%", "n", ">", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kemo-huang_jmodt.evaluation.rotate_iou.trangle_area": [[18, 22], ["numba.cuda.jit"], "function", ["None"], ["", "@", "cuda", ".", "jit", "(", "'(float32[:], float32[:], float32[:])'", ",", "device", "=", "True", ",", "inline", "=", "True", ")", "\n", "def", "trangle_area", "(", "a", ",", "b", ",", "c", ")", ":", "\n", "    ", "return", "(", "(", "a", "[", "0", "]", "-", "c", "[", "0", "]", ")", "*", "(", "b", "[", "1", "]", "-", "c", "[", "1", "]", ")", "-", "(", "a", "[", "1", "]", "-", "c", "[", "1", "]", ")", "*", "\n", "(", "b", "[", "0", "]", "-", "c", "[", "0", "]", ")", ")", "/", "2.0", "\n", "\n"]], "home.repos.pwc.inspect_result.kemo-huang_jmodt.evaluation.rotate_iou.area": [[24, 32], ["numba.cuda.jit", "range", "abs", "rotate_iou.trangle_area"], "function", ["home.repos.pwc.inspect_result.kemo-huang_jmodt.evaluation.rotate_iou.trangle_area"], ["", "@", "cuda", ".", "jit", "(", "'(float32[:], int32)'", ",", "device", "=", "True", ",", "inline", "=", "True", ")", "\n", "def", "area", "(", "int_pts", ",", "num_of_inter", ")", ":", "\n", "    ", "area_val", "=", "0.0", "\n", "for", "i", "in", "range", "(", "num_of_inter", "-", "2", ")", ":", "\n", "        ", "area_val", "+=", "abs", "(", "\n", "trangle_area", "(", "int_pts", "[", ":", "2", "]", ",", "int_pts", "[", "2", "*", "i", "+", "2", ":", "2", "*", "i", "+", "4", "]", ",", "\n", "int_pts", "[", "2", "*", "i", "+", "4", ":", "2", "*", "i", "+", "6", "]", ")", ")", "\n", "", "return", "area_val", "\n", "\n"]], "home.repos.pwc.inspect_result.kemo-huang_jmodt.evaluation.rotate_iou.sort_vertex_in_convex_polygon": [[34, 72], ["numba.cuda.jit", "numba.cuda.local.array", "range", "numba.cuda.local.array", "numba.cuda.local.array", "range", "range", "math.sqrt"], "function", ["None"], ["", "@", "cuda", ".", "jit", "(", "'(float32[:], int32)'", ",", "device", "=", "True", ",", "inline", "=", "True", ")", "\n", "def", "sort_vertex_in_convex_polygon", "(", "int_pts", ",", "num_of_inter", ")", ":", "\n", "    ", "if", "num_of_inter", ">", "0", ":", "\n", "        ", "center", "=", "cuda", ".", "local", ".", "array", "(", "(", "2", ",", ")", ",", "dtype", "=", "numba", ".", "float32", ")", "\n", "center", "[", ":", "]", "=", "0.0", "\n", "for", "i", "in", "range", "(", "num_of_inter", ")", ":", "\n", "            ", "center", "[", "0", "]", "+=", "int_pts", "[", "2", "*", "i", "]", "\n", "center", "[", "1", "]", "+=", "int_pts", "[", "2", "*", "i", "+", "1", "]", "\n", "", "center", "[", "0", "]", "/=", "num_of_inter", "\n", "center", "[", "1", "]", "/=", "num_of_inter", "\n", "v", "=", "cuda", ".", "local", ".", "array", "(", "(", "2", ",", ")", ",", "dtype", "=", "numba", ".", "float32", ")", "\n", "vs", "=", "cuda", ".", "local", ".", "array", "(", "(", "16", ",", ")", ",", "dtype", "=", "numba", ".", "float32", ")", "\n", "for", "i", "in", "range", "(", "num_of_inter", ")", ":", "\n", "            ", "v", "[", "0", "]", "=", "int_pts", "[", "2", "*", "i", "]", "-", "center", "[", "0", "]", "\n", "v", "[", "1", "]", "=", "int_pts", "[", "2", "*", "i", "+", "1", "]", "-", "center", "[", "1", "]", "\n", "d", "=", "math", ".", "sqrt", "(", "v", "[", "0", "]", "*", "v", "[", "0", "]", "+", "v", "[", "1", "]", "*", "v", "[", "1", "]", ")", "\n", "v", "[", "0", "]", "=", "v", "[", "0", "]", "/", "d", "\n", "v", "[", "1", "]", "=", "v", "[", "1", "]", "/", "d", "\n", "if", "v", "[", "1", "]", "<", "0", ":", "\n", "                ", "v", "[", "0", "]", "=", "-", "2", "-", "v", "[", "0", "]", "\n", "", "vs", "[", "i", "]", "=", "v", "[", "0", "]", "\n", "", "j", "=", "0", "\n", "temp", "=", "0", "\n", "for", "i", "in", "range", "(", "1", ",", "num_of_inter", ")", ":", "\n", "            ", "if", "vs", "[", "i", "-", "1", "]", ">", "vs", "[", "i", "]", ":", "\n", "                ", "temp", "=", "vs", "[", "i", "]", "\n", "tx", "=", "int_pts", "[", "2", "*", "i", "]", "\n", "ty", "=", "int_pts", "[", "2", "*", "i", "+", "1", "]", "\n", "j", "=", "i", "\n", "while", "j", ">", "0", "and", "vs", "[", "j", "-", "1", "]", ">", "temp", ":", "\n", "                    ", "vs", "[", "j", "]", "=", "vs", "[", "j", "-", "1", "]", "\n", "int_pts", "[", "j", "*", "2", "]", "=", "int_pts", "[", "j", "*", "2", "-", "2", "]", "\n", "int_pts", "[", "j", "*", "2", "+", "1", "]", "=", "int_pts", "[", "j", "*", "2", "-", "1", "]", "\n", "j", "-=", "1", "\n", "\n", "", "vs", "[", "j", "]", "=", "temp", "\n", "int_pts", "[", "j", "*", "2", "]", "=", "tx", "\n", "int_pts", "[", "j", "*", "2", "+", "1", "]", "=", "ty", "\n", "\n"]], "home.repos.pwc.inspect_result.kemo-huang_jmodt.evaluation.rotate_iou.line_segment_intersection": [[74, 118], ["numba.cuda.jit", "numba.cuda.local.array", "numba.cuda.local.array", "numba.cuda.local.array", "numba.cuda.local.array"], "function", ["None"], ["", "", "", "", "@", "cuda", ".", "jit", "(", "\n", "'(float32[:], float32[:], int32, int32, float32[:])'", ",", "\n", "device", "=", "True", ",", "\n", "inline", "=", "True", ")", "\n", "def", "line_segment_intersection", "(", "pts1", ",", "pts2", ",", "i", ",", "j", ",", "temp_pts", ")", ":", "\n", "    ", "A", "=", "cuda", ".", "local", ".", "array", "(", "(", "2", ",", ")", ",", "dtype", "=", "numba", ".", "float32", ")", "\n", "B", "=", "cuda", ".", "local", ".", "array", "(", "(", "2", ",", ")", ",", "dtype", "=", "numba", ".", "float32", ")", "\n", "C", "=", "cuda", ".", "local", ".", "array", "(", "(", "2", ",", ")", ",", "dtype", "=", "numba", ".", "float32", ")", "\n", "D", "=", "cuda", ".", "local", ".", "array", "(", "(", "2", ",", ")", ",", "dtype", "=", "numba", ".", "float32", ")", "\n", "\n", "A", "[", "0", "]", "=", "pts1", "[", "2", "*", "i", "]", "\n", "A", "[", "1", "]", "=", "pts1", "[", "2", "*", "i", "+", "1", "]", "\n", "\n", "B", "[", "0", "]", "=", "pts1", "[", "2", "*", "(", "(", "i", "+", "1", ")", "%", "4", ")", "]", "\n", "B", "[", "1", "]", "=", "pts1", "[", "2", "*", "(", "(", "i", "+", "1", ")", "%", "4", ")", "+", "1", "]", "\n", "\n", "C", "[", "0", "]", "=", "pts2", "[", "2", "*", "j", "]", "\n", "C", "[", "1", "]", "=", "pts2", "[", "2", "*", "j", "+", "1", "]", "\n", "\n", "D", "[", "0", "]", "=", "pts2", "[", "2", "*", "(", "(", "j", "+", "1", ")", "%", "4", ")", "]", "\n", "D", "[", "1", "]", "=", "pts2", "[", "2", "*", "(", "(", "j", "+", "1", ")", "%", "4", ")", "+", "1", "]", "\n", "BA0", "=", "B", "[", "0", "]", "-", "A", "[", "0", "]", "\n", "BA1", "=", "B", "[", "1", "]", "-", "A", "[", "1", "]", "\n", "DA0", "=", "D", "[", "0", "]", "-", "A", "[", "0", "]", "\n", "CA0", "=", "C", "[", "0", "]", "-", "A", "[", "0", "]", "\n", "DA1", "=", "D", "[", "1", "]", "-", "A", "[", "1", "]", "\n", "CA1", "=", "C", "[", "1", "]", "-", "A", "[", "1", "]", "\n", "acd", "=", "DA1", "*", "CA0", ">", "CA1", "*", "DA0", "\n", "bcd", "=", "(", "D", "[", "1", "]", "-", "B", "[", "1", "]", ")", "*", "(", "C", "[", "0", "]", "-", "B", "[", "0", "]", ")", ">", "(", "C", "[", "1", "]", "-", "B", "[", "1", "]", ")", "*", "(", "D", "[", "0", "]", "-", "B", "[", "0", "]", ")", "\n", "if", "acd", "!=", "bcd", ":", "\n", "        ", "abc", "=", "CA1", "*", "BA0", ">", "BA1", "*", "CA0", "\n", "abd", "=", "DA1", "*", "BA0", ">", "BA1", "*", "DA0", "\n", "if", "abc", "!=", "abd", ":", "\n", "            ", "DC0", "=", "D", "[", "0", "]", "-", "C", "[", "0", "]", "\n", "DC1", "=", "D", "[", "1", "]", "-", "C", "[", "1", "]", "\n", "ABBA", "=", "A", "[", "0", "]", "*", "B", "[", "1", "]", "-", "B", "[", "0", "]", "*", "A", "[", "1", "]", "\n", "CDDC", "=", "C", "[", "0", "]", "*", "D", "[", "1", "]", "-", "D", "[", "0", "]", "*", "C", "[", "1", "]", "\n", "DH", "=", "BA1", "*", "DC0", "-", "BA0", "*", "DC1", "\n", "Dx", "=", "ABBA", "*", "DC0", "-", "BA0", "*", "CDDC", "\n", "Dy", "=", "ABBA", "*", "DC1", "-", "BA1", "*", "CDDC", "\n", "temp_pts", "[", "0", "]", "=", "Dx", "/", "DH", "\n", "temp_pts", "[", "1", "]", "=", "Dy", "/", "DH", "\n", "return", "True", "\n", "", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.kemo-huang_jmodt.evaluation.rotate_iou.line_segment_intersection_v1": [[120, 160], ["numba.cuda.jit", "numba.cuda.local.array", "numba.cuda.local.array", "numba.cuda.local.array", "numba.cuda.local.array", "rotate_iou.trangle_area", "rotate_iou.trangle_area", "rotate_iou.trangle_area"], "function", ["home.repos.pwc.inspect_result.kemo-huang_jmodt.evaluation.rotate_iou.trangle_area", "home.repos.pwc.inspect_result.kemo-huang_jmodt.evaluation.rotate_iou.trangle_area", "home.repos.pwc.inspect_result.kemo-huang_jmodt.evaluation.rotate_iou.trangle_area"], ["", "@", "cuda", ".", "jit", "(", "\n", "'(float32[:], float32[:], int32, int32, float32[:])'", ",", "\n", "device", "=", "True", ",", "\n", "inline", "=", "True", ")", "\n", "def", "line_segment_intersection_v1", "(", "pts1", ",", "pts2", ",", "i", ",", "j", ",", "temp_pts", ")", ":", "\n", "    ", "a", "=", "cuda", ".", "local", ".", "array", "(", "(", "2", ",", ")", ",", "dtype", "=", "numba", ".", "float32", ")", "\n", "b", "=", "cuda", ".", "local", ".", "array", "(", "(", "2", ",", ")", ",", "dtype", "=", "numba", ".", "float32", ")", "\n", "c", "=", "cuda", ".", "local", ".", "array", "(", "(", "2", ",", ")", ",", "dtype", "=", "numba", ".", "float32", ")", "\n", "d", "=", "cuda", ".", "local", ".", "array", "(", "(", "2", ",", ")", ",", "dtype", "=", "numba", ".", "float32", ")", "\n", "\n", "a", "[", "0", "]", "=", "pts1", "[", "2", "*", "i", "]", "\n", "a", "[", "1", "]", "=", "pts1", "[", "2", "*", "i", "+", "1", "]", "\n", "\n", "b", "[", "0", "]", "=", "pts1", "[", "2", "*", "(", "(", "i", "+", "1", ")", "%", "4", ")", "]", "\n", "b", "[", "1", "]", "=", "pts1", "[", "2", "*", "(", "(", "i", "+", "1", ")", "%", "4", ")", "+", "1", "]", "\n", "\n", "c", "[", "0", "]", "=", "pts2", "[", "2", "*", "j", "]", "\n", "c", "[", "1", "]", "=", "pts2", "[", "2", "*", "j", "+", "1", "]", "\n", "\n", "d", "[", "0", "]", "=", "pts2", "[", "2", "*", "(", "(", "j", "+", "1", ")", "%", "4", ")", "]", "\n", "d", "[", "1", "]", "=", "pts2", "[", "2", "*", "(", "(", "j", "+", "1", ")", "%", "4", ")", "+", "1", "]", "\n", "\n", "area_abc", "=", "trangle_area", "(", "a", ",", "b", ",", "c", ")", "\n", "area_abd", "=", "trangle_area", "(", "a", ",", "b", ",", "d", ")", "\n", "\n", "if", "area_abc", "*", "area_abd", ">=", "0", ":", "\n", "        ", "return", "False", "\n", "\n", "", "area_cda", "=", "trangle_area", "(", "c", ",", "d", ",", "a", ")", "\n", "area_cdb", "=", "area_cda", "+", "area_abc", "-", "area_abd", "\n", "\n", "if", "area_cda", "*", "area_cdb", ">=", "0", ":", "\n", "        ", "return", "False", "\n", "", "t", "=", "area_cda", "/", "(", "area_abd", "-", "area_abc", ")", "\n", "\n", "dx", "=", "t", "*", "(", "b", "[", "0", "]", "-", "a", "[", "0", "]", ")", "\n", "dy", "=", "t", "*", "(", "b", "[", "1", "]", "-", "a", "[", "1", "]", ")", "\n", "temp_pts", "[", "0", "]", "=", "a", "[", "0", "]", "+", "dx", "\n", "temp_pts", "[", "1", "]", "=", "a", "[", "1", "]", "+", "dy", "\n", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.kemo-huang_jmodt.evaluation.rotate_iou.point_in_quadrilateral": [[162, 179], ["numba.cuda.jit"], "function", ["None"], ["", "@", "cuda", ".", "jit", "(", "'(float32, float32, float32[:])'", ",", "device", "=", "True", ",", "inline", "=", "True", ")", "\n", "def", "point_in_quadrilateral", "(", "pt_x", ",", "pt_y", ",", "corners", ")", ":", "\n", "    ", "ab0", "=", "corners", "[", "2", "]", "-", "corners", "[", "0", "]", "\n", "ab1", "=", "corners", "[", "3", "]", "-", "corners", "[", "1", "]", "\n", "\n", "ad0", "=", "corners", "[", "6", "]", "-", "corners", "[", "0", "]", "\n", "ad1", "=", "corners", "[", "7", "]", "-", "corners", "[", "1", "]", "\n", "\n", "ap0", "=", "pt_x", "-", "corners", "[", "0", "]", "\n", "ap1", "=", "pt_y", "-", "corners", "[", "1", "]", "\n", "\n", "abab", "=", "ab0", "*", "ab0", "+", "ab1", "*", "ab1", "\n", "abap", "=", "ab0", "*", "ap0", "+", "ab1", "*", "ap1", "\n", "adad", "=", "ad0", "*", "ad0", "+", "ad1", "*", "ad1", "\n", "adap", "=", "ad0", "*", "ap0", "+", "ad1", "*", "ap1", "\n", "\n", "return", "abab", ">=", "abap", "and", "abap", ">=", "0", "and", "adad", ">=", "adap", "and", "adap", ">=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.kemo-huang_jmodt.evaluation.rotate_iou.quadrilateral_intersection": [[181, 203], ["numba.cuda.jit", "range", "numba.cuda.local.array", "range", "rotate_iou.point_in_quadrilateral", "rotate_iou.point_in_quadrilateral", "range", "rotate_iou.line_segment_intersection"], "function", ["home.repos.pwc.inspect_result.kemo-huang_jmodt.evaluation.rotate_iou.point_in_quadrilateral", "home.repos.pwc.inspect_result.kemo-huang_jmodt.evaluation.rotate_iou.point_in_quadrilateral", "home.repos.pwc.inspect_result.kemo-huang_jmodt.evaluation.rotate_iou.line_segment_intersection"], ["", "@", "cuda", ".", "jit", "(", "'(float32[:], float32[:], float32[:])'", ",", "device", "=", "True", ",", "inline", "=", "True", ")", "\n", "def", "quadrilateral_intersection", "(", "pts1", ",", "pts2", ",", "int_pts", ")", ":", "\n", "    ", "num_of_inter", "=", "0", "\n", "for", "i", "in", "range", "(", "4", ")", ":", "\n", "        ", "if", "point_in_quadrilateral", "(", "pts1", "[", "2", "*", "i", "]", ",", "pts1", "[", "2", "*", "i", "+", "1", "]", ",", "pts2", ")", ":", "\n", "            ", "int_pts", "[", "num_of_inter", "*", "2", "]", "=", "pts1", "[", "2", "*", "i", "]", "\n", "int_pts", "[", "num_of_inter", "*", "2", "+", "1", "]", "=", "pts1", "[", "2", "*", "i", "+", "1", "]", "\n", "num_of_inter", "+=", "1", "\n", "", "if", "point_in_quadrilateral", "(", "pts2", "[", "2", "*", "i", "]", ",", "pts2", "[", "2", "*", "i", "+", "1", "]", ",", "pts1", ")", ":", "\n", "            ", "int_pts", "[", "num_of_inter", "*", "2", "]", "=", "pts2", "[", "2", "*", "i", "]", "\n", "int_pts", "[", "num_of_inter", "*", "2", "+", "1", "]", "=", "pts2", "[", "2", "*", "i", "+", "1", "]", "\n", "num_of_inter", "+=", "1", "\n", "", "", "temp_pts", "=", "cuda", ".", "local", ".", "array", "(", "(", "2", ",", ")", ",", "dtype", "=", "numba", ".", "float32", ")", "\n", "for", "i", "in", "range", "(", "4", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "4", ")", ":", "\n", "            ", "has_pts", "=", "line_segment_intersection", "(", "pts1", ",", "pts2", ",", "i", ",", "j", ",", "temp_pts", ")", "\n", "if", "has_pts", ":", "\n", "                ", "int_pts", "[", "num_of_inter", "*", "2", "]", "=", "temp_pts", "[", "0", "]", "\n", "int_pts", "[", "num_of_inter", "*", "2", "+", "1", "]", "=", "temp_pts", "[", "1", "]", "\n", "num_of_inter", "+=", "1", "\n", "\n", "", "", "", "return", "num_of_inter", "\n", "\n"]], "home.repos.pwc.inspect_result.kemo-huang_jmodt.evaluation.rotate_iou.rbbox_to_corners": [[205, 230], ["numba.cuda.jit", "math.cos", "math.sin", "numba.cuda.local.array", "numba.cuda.local.array", "range"], "function", ["None"], ["", "@", "cuda", ".", "jit", "(", "'(float32[:], float32[:])'", ",", "device", "=", "True", ",", "inline", "=", "True", ")", "\n", "def", "rbbox_to_corners", "(", "corners", ",", "rbbox", ")", ":", "\n", "# generate clockwise corners and rotate it clockwise", "\n", "    ", "angle", "=", "rbbox", "[", "4", "]", "\n", "a_cos", "=", "math", ".", "cos", "(", "angle", ")", "\n", "a_sin", "=", "math", ".", "sin", "(", "angle", ")", "\n", "center_x", "=", "rbbox", "[", "0", "]", "\n", "center_y", "=", "rbbox", "[", "1", "]", "\n", "x_d", "=", "rbbox", "[", "2", "]", "\n", "y_d", "=", "rbbox", "[", "3", "]", "\n", "corners_x", "=", "cuda", ".", "local", ".", "array", "(", "(", "4", ",", ")", ",", "dtype", "=", "numba", ".", "float32", ")", "\n", "corners_y", "=", "cuda", ".", "local", ".", "array", "(", "(", "4", ",", ")", ",", "dtype", "=", "numba", ".", "float32", ")", "\n", "corners_x", "[", "0", "]", "=", "-", "x_d", "/", "2", "\n", "corners_x", "[", "1", "]", "=", "-", "x_d", "/", "2", "\n", "corners_x", "[", "2", "]", "=", "x_d", "/", "2", "\n", "corners_x", "[", "3", "]", "=", "x_d", "/", "2", "\n", "corners_y", "[", "0", "]", "=", "-", "y_d", "/", "2", "\n", "corners_y", "[", "1", "]", "=", "y_d", "/", "2", "\n", "corners_y", "[", "2", "]", "=", "y_d", "/", "2", "\n", "corners_y", "[", "3", "]", "=", "-", "y_d", "/", "2", "\n", "for", "i", "in", "range", "(", "4", ")", ":", "\n", "        ", "corners", "[", "2", "*", "\n", "i", "]", "=", "a_cos", "*", "corners_x", "[", "i", "]", "+", "a_sin", "*", "corners_y", "[", "i", "]", "+", "center_x", "\n", "corners", "[", "2", "*", "i", "\n", "+", "1", "]", "=", "-", "a_sin", "*", "corners_x", "[", "i", "]", "+", "a_cos", "*", "corners_y", "[", "i", "]", "+", "center_y", "\n", "\n"]], "home.repos.pwc.inspect_result.kemo-huang_jmodt.evaluation.rotate_iou.inter": [[232, 247], ["numba.cuda.jit", "numba.cuda.local.array", "numba.cuda.local.array", "numba.cuda.local.array", "rotate_iou.rbbox_to_corners", "rotate_iou.rbbox_to_corners", "rotate_iou.quadrilateral_intersection", "rotate_iou.sort_vertex_in_convex_polygon", "rotate_iou.area"], "function", ["home.repos.pwc.inspect_result.kemo-huang_jmodt.evaluation.rotate_iou.rbbox_to_corners", "home.repos.pwc.inspect_result.kemo-huang_jmodt.evaluation.rotate_iou.rbbox_to_corners", "home.repos.pwc.inspect_result.kemo-huang_jmodt.evaluation.rotate_iou.quadrilateral_intersection", "home.repos.pwc.inspect_result.kemo-huang_jmodt.evaluation.rotate_iou.sort_vertex_in_convex_polygon", "home.repos.pwc.inspect_result.kemo-huang_jmodt.evaluation.rotate_iou.area"], ["", "", "@", "cuda", ".", "jit", "(", "'(float32[:], float32[:])'", ",", "device", "=", "True", ",", "inline", "=", "True", ")", "\n", "def", "inter", "(", "rbbox1", ",", "rbbox2", ")", ":", "\n", "    ", "corners1", "=", "cuda", ".", "local", ".", "array", "(", "(", "8", ",", ")", ",", "dtype", "=", "numba", ".", "float32", ")", "\n", "corners2", "=", "cuda", ".", "local", ".", "array", "(", "(", "8", ",", ")", ",", "dtype", "=", "numba", ".", "float32", ")", "\n", "intersection_corners", "=", "cuda", ".", "local", ".", "array", "(", "(", "16", ",", ")", ",", "dtype", "=", "numba", ".", "float32", ")", "\n", "\n", "rbbox_to_corners", "(", "corners1", ",", "rbbox1", ")", "\n", "rbbox_to_corners", "(", "corners2", ",", "rbbox2", ")", "\n", "\n", "num_intersection", "=", "quadrilateral_intersection", "(", "corners1", ",", "corners2", ",", "\n", "intersection_corners", ")", "\n", "sort_vertex_in_convex_polygon", "(", "intersection_corners", ",", "num_intersection", ")", "\n", "# print(intersection_corners.reshape([-1, 2])[:num_intersection])", "\n", "\n", "return", "area", "(", "intersection_corners", ",", "num_intersection", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kemo-huang_jmodt.evaluation.rotate_iou.devRotateIoUEval": [[249, 262], ["numba.cuda.jit", "rotate_iou.inter"], "function", ["home.repos.pwc.inspect_result.kemo-huang_jmodt.evaluation.rotate_iou.inter"], ["", "@", "cuda", ".", "jit", "(", "'(float32[:], float32[:], int32)'", ",", "device", "=", "True", ",", "inline", "=", "True", ")", "\n", "def", "devRotateIoUEval", "(", "rbox1", ",", "rbox2", ",", "criterion", "=", "-", "1", ")", ":", "\n", "    ", "area1", "=", "rbox1", "[", "2", "]", "*", "rbox1", "[", "3", "]", "\n", "area2", "=", "rbox2", "[", "2", "]", "*", "rbox2", "[", "3", "]", "\n", "area_inter", "=", "inter", "(", "rbox1", ",", "rbox2", ")", "\n", "if", "criterion", "==", "-", "1", ":", "\n", "        ", "return", "area_inter", "/", "(", "area1", "+", "area2", "-", "area_inter", ")", "\n", "", "elif", "criterion", "==", "0", ":", "\n", "        ", "return", "area_inter", "/", "area1", "\n", "", "elif", "criterion", "==", "1", ":", "\n", "        ", "return", "area_inter", "/", "area2", "\n", "", "else", ":", "\n", "        ", "return", "area_inter", "\n", "\n"]], "home.repos.pwc.inspect_result.kemo-huang_jmodt.evaluation.rotate_iou.rotate_iou_kernel_eval": [[264, 295], ["numba.cuda.jit", "min", "min", "numba.cuda.shared.array", "numba.cuda.shared.array", "numba.cuda.syncthreads", "range", "rotate_iou.devRotateIoUEval"], "function", ["home.repos.pwc.inspect_result.kemo-huang_jmodt.evaluation.rotate_iou.devRotateIoUEval"], ["", "", "@", "cuda", ".", "jit", "(", "'(int64, int64, float32[:], float32[:], float32[:], int32)'", ",", "fastmath", "=", "False", ")", "\n", "def", "rotate_iou_kernel_eval", "(", "N", ",", "K", ",", "dev_boxes", ",", "dev_query_boxes", ",", "dev_iou", ",", "criterion", "=", "-", "1", ")", ":", "\n", "    ", "threadsPerBlock", "=", "8", "*", "8", "\n", "row_start", "=", "cuda", ".", "blockIdx", ".", "x", "\n", "col_start", "=", "cuda", ".", "blockIdx", ".", "y", "\n", "tx", "=", "cuda", ".", "threadIdx", ".", "x", "\n", "row_size", "=", "min", "(", "N", "-", "row_start", "*", "threadsPerBlock", ",", "threadsPerBlock", ")", "\n", "col_size", "=", "min", "(", "K", "-", "col_start", "*", "threadsPerBlock", ",", "threadsPerBlock", ")", "\n", "block_boxes", "=", "cuda", ".", "shared", ".", "array", "(", "shape", "=", "(", "64", "*", "5", ",", ")", ",", "dtype", "=", "numba", ".", "float32", ")", "\n", "block_qboxes", "=", "cuda", ".", "shared", ".", "array", "(", "shape", "=", "(", "64", "*", "5", ",", ")", ",", "dtype", "=", "numba", ".", "float32", ")", "\n", "\n", "dev_query_box_idx", "=", "threadsPerBlock", "*", "col_start", "+", "tx", "\n", "dev_box_idx", "=", "threadsPerBlock", "*", "row_start", "+", "tx", "\n", "if", "(", "tx", "<", "col_size", ")", ":", "\n", "        ", "block_qboxes", "[", "tx", "*", "5", "+", "0", "]", "=", "dev_query_boxes", "[", "dev_query_box_idx", "*", "5", "+", "0", "]", "\n", "block_qboxes", "[", "tx", "*", "5", "+", "1", "]", "=", "dev_query_boxes", "[", "dev_query_box_idx", "*", "5", "+", "1", "]", "\n", "block_qboxes", "[", "tx", "*", "5", "+", "2", "]", "=", "dev_query_boxes", "[", "dev_query_box_idx", "*", "5", "+", "2", "]", "\n", "block_qboxes", "[", "tx", "*", "5", "+", "3", "]", "=", "dev_query_boxes", "[", "dev_query_box_idx", "*", "5", "+", "3", "]", "\n", "block_qboxes", "[", "tx", "*", "5", "+", "4", "]", "=", "dev_query_boxes", "[", "dev_query_box_idx", "*", "5", "+", "4", "]", "\n", "", "if", "(", "tx", "<", "row_size", ")", ":", "\n", "        ", "block_boxes", "[", "tx", "*", "5", "+", "0", "]", "=", "dev_boxes", "[", "dev_box_idx", "*", "5", "+", "0", "]", "\n", "block_boxes", "[", "tx", "*", "5", "+", "1", "]", "=", "dev_boxes", "[", "dev_box_idx", "*", "5", "+", "1", "]", "\n", "block_boxes", "[", "tx", "*", "5", "+", "2", "]", "=", "dev_boxes", "[", "dev_box_idx", "*", "5", "+", "2", "]", "\n", "block_boxes", "[", "tx", "*", "5", "+", "3", "]", "=", "dev_boxes", "[", "dev_box_idx", "*", "5", "+", "3", "]", "\n", "block_boxes", "[", "tx", "*", "5", "+", "4", "]", "=", "dev_boxes", "[", "dev_box_idx", "*", "5", "+", "4", "]", "\n", "", "cuda", ".", "syncthreads", "(", ")", "\n", "if", "tx", "<", "row_size", ":", "\n", "        ", "for", "i", "in", "range", "(", "col_size", ")", ":", "\n", "            ", "offset", "=", "row_start", "*", "threadsPerBlock", "*", "K", "+", "col_start", "*", "threadsPerBlock", "+", "tx", "*", "K", "+", "i", "\n", "dev_iou", "[", "offset", "]", "=", "devRotateIoUEval", "(", "block_qboxes", "[", "i", "*", "5", ":", "i", "*", "5", "+", "5", "]", ",", "\n", "block_boxes", "[", "tx", "*", "5", ":", "tx", "*", "5", "+", "5", "]", ",", "criterion", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kemo-huang_jmodt.evaluation.rotate_iou.rotate_iou_gpu_eval": [[297, 333], ["boxes.astype.astype", "query_boxes.astype.astype", "numpy.zeros", "numba.cuda.select_device", "numba.cuda.stream", "np.zeros.astype", "rotate_iou.div_up", "rotate_iou.div_up", "cuda.stream.auto_synchronize", "numba.cuda.to_device", "numba.cuda.to_device", "numba.cuda.to_device", "cuda.to_device.copy_to_host", "boxes.astype.reshape", "query_boxes.astype.reshape", "np.zeros.reshape", "np.zeros.reshape"], "function", ["home.repos.pwc.inspect_result.kemo-huang_jmodt.evaluation.rotate_iou.div_up", "home.repos.pwc.inspect_result.kemo-huang_jmodt.evaluation.rotate_iou.div_up"], ["", "", "", "def", "rotate_iou_gpu_eval", "(", "boxes", ",", "query_boxes", ",", "criterion", "=", "-", "1", ",", "device_id", "=", "0", ")", ":", "\n", "    ", "\"\"\"rotated box iou running in gpu. 500x faster than cpu version\n    (take 5ms in one example with numba.cuda code).\n    convert from [this project](\n        https://github.com/hongzhenwang/RRPN-revise/tree/master/lib/rotation).\n    \n    Args:\n        boxes (float tensor: [N, 5]): rbboxes. format: centers, dims, \n            angles(clockwise when positive)\n        query_boxes (float tensor: [K, 5]): [description]\n        device_id (int, optional): Defaults to 0. [description]\n    \n    Returns:\n        [type]: [description]\n    \"\"\"", "\n", "box_dtype", "=", "boxes", ".", "dtype", "\n", "boxes", "=", "boxes", ".", "astype", "(", "np", ".", "float32", ")", "\n", "query_boxes", "=", "query_boxes", ".", "astype", "(", "np", ".", "float32", ")", "\n", "N", "=", "boxes", ".", "shape", "[", "0", "]", "\n", "K", "=", "query_boxes", ".", "shape", "[", "0", "]", "\n", "iou", "=", "np", ".", "zeros", "(", "(", "N", ",", "K", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "if", "N", "==", "0", "or", "K", "==", "0", ":", "\n", "        ", "return", "iou", "\n", "", "threadsPerBlock", "=", "8", "*", "8", "\n", "cuda", ".", "select_device", "(", "device_id", ")", "\n", "blockspergrid", "=", "(", "div_up", "(", "N", ",", "threadsPerBlock", ")", ",", "div_up", "(", "K", ",", "threadsPerBlock", ")", ")", "\n", "\n", "stream", "=", "cuda", ".", "stream", "(", ")", "\n", "with", "stream", ".", "auto_synchronize", "(", ")", ":", "\n", "        ", "boxes_dev", "=", "cuda", ".", "to_device", "(", "boxes", ".", "reshape", "(", "[", "-", "1", "]", ")", ",", "stream", ")", "\n", "query_boxes_dev", "=", "cuda", ".", "to_device", "(", "query_boxes", ".", "reshape", "(", "[", "-", "1", "]", ")", ",", "stream", ")", "\n", "iou_dev", "=", "cuda", ".", "to_device", "(", "iou", ".", "reshape", "(", "[", "-", "1", "]", ")", ",", "stream", ")", "\n", "rotate_iou_kernel_eval", "[", "blockspergrid", ",", "threadsPerBlock", ",", "stream", "]", "(", "\n", "N", ",", "K", ",", "boxes_dev", ",", "query_boxes_dev", ",", "iou_dev", ",", "criterion", ")", "\n", "iou_dev", ".", "copy_to_host", "(", "iou", ".", "reshape", "(", "[", "-", "1", "]", ")", ",", "stream", "=", "stream", ")", "\n", "", "return", "iou", ".", "astype", "(", "boxes", ".", "dtype", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.kemo-huang_jmodt.tracking.kitti_evaluate.tData.__init__": [[58, 87], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "frame", "=", "-", "1", ",", "obj_type", "=", "\"unset\"", ",", "truncation", "=", "-", "1", ",", "occlusion", "=", "-", "1", ",", "\n", "obs_angle", "=", "-", "10", ",", "x1", "=", "-", "1", ",", "y1", "=", "-", "1", ",", "x2", "=", "-", "1", ",", "y2", "=", "-", "1", ",", "w", "=", "-", "1", ",", "h", "=", "-", "1", ",", "l", "=", "-", "1", ",", "\n", "X", "=", "-", "1000", ",", "Y", "=", "-", "1000", ",", "Z", "=", "-", "1000", ",", "yaw", "=", "-", "10", ",", "score", "=", "-", "1000", ",", "track_id", "=", "-", "1", ")", ":", "\n", "        ", "\"\"\"\n            Constructor, initializes the object given the parameters.\n        \"\"\"", "\n", "\n", "# init object data", "\n", "self", ".", "frame", "=", "frame", "\n", "self", ".", "track_id", "=", "track_id", "\n", "self", ".", "obj_type", "=", "obj_type", "\n", "self", ".", "truncation", "=", "truncation", "\n", "self", ".", "occlusion", "=", "occlusion", "\n", "self", ".", "obs_angle", "=", "obs_angle", "\n", "self", ".", "x1", "=", "x1", "\n", "self", ".", "y1", "=", "y1", "\n", "self", ".", "x2", "=", "x2", "\n", "self", ".", "y2", "=", "y2", "\n", "self", ".", "w", "=", "w", "\n", "self", ".", "h", "=", "h", "\n", "self", ".", "l", "=", "l", "\n", "self", ".", "X", "=", "X", "\n", "self", ".", "Y", "=", "Y", "\n", "self", ".", "Z", "=", "Z", "\n", "self", ".", "yaw", "=", "yaw", "\n", "self", ".", "score", "=", "score", "\n", "self", ".", "ignored", "=", "False", "\n", "self", ".", "valid", "=", "False", "\n", "self", ".", "tracker", "=", "-", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.kemo-huang_jmodt.tracking.kitti_evaluate.tData.__str__": [[88, 95], ["vars", "vars.items"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n            Print read data.\n        \"\"\"", "\n", "\n", "attrs", "=", "vars", "(", "self", ")", "\n", "return", "'\\n'", ".", "join", "(", "\"%s: %s\"", "%", "item", "for", "item", "in", "attrs", ".", "items", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kemo-huang_jmodt.tracking.kitti_evaluate.TrackingEvaluation.__init__": [[115, 199], ["seqmap.items", "len", "os.path.join", "os.path.join", "kitti_evaluate.TrackingEvaluation.sequence_name.append", "kitti_evaluate.TrackingEvaluation.n_frames.append", "range", "range", "int"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "t_sha", ",", "result_root", ",", "part", ",", "gt_path", ",", "min_overlap", "=", "0.5", ",", "max_truncation", "=", "0", ",", "\n", "min_height", "=", "25", ",", "max_occlusion", "=", "2", ",", "cls", "=", "\"car\"", ")", ":", "\n", "# get number of sequences and", "\n", "# get number of frames per sequence from test mapping", "\n", "# (created while extracting the benchmark)", "\n", "        ", "self", ".", "n_frames", "=", "[", "]", "\n", "self", ".", "sequence_name", "=", "[", "]", "\n", "self", ".", "sequence_id", "=", "[", "]", "\n", "if", "part", "==", "\"val\"", ":", "\n", "            ", "self", ".", "sequence_id", "=", "VALID_SEQ_ID", "\n", "", "elif", "part", "==", "\"train\"", ":", "\n", "            ", "self", ".", "sequence_id", "=", "TRAIN_SEQ_ID", "\n", "", "elif", "part", "==", "\"test\"", ":", "\n", "            ", "self", ".", "sequence_id", "=", "TEST_SEQ_ID", "\n", "\n", "", "for", "seq_id", ",", "n_frames", "in", "seqmap", ".", "items", "(", ")", ":", "\n", "            ", "if", "seq_id", "in", "self", ".", "sequence_id", ":", "\n", "                ", "self", ".", "sequence_name", ".", "append", "(", "seq_id", ")", "\n", "self", ".", "n_frames", ".", "append", "(", "int", "(", "n_frames", ")", ")", "\n", "", "", "self", ".", "n_sequences", "=", "len", "(", "seqmap", ")", "\n", "\n", "# class to evaluate, i.e. pedestrian or car", "\n", "self", ".", "cls", "=", "cls", "\n", "\n", "# data and parameter", "\n", "self", ".", "gt_path", "=", "os", ".", "path", ".", "join", "(", "gt_path", ",", "\"label_02\"", ")", "\n", "self", ".", "t_sha", "=", "t_sha", "\n", "self", ".", "t_path", "=", "os", ".", "path", ".", "join", "(", "result_root", ",", "t_sha", ",", "part", ")", "\n", "\n", "# statistics and numbers for evaluation", "\n", "self", ".", "n_gt", "=", "0", "# number of ground truth detections minus ignored false negatives and true positives", "\n", "self", ".", "n_igt", "=", "0", "# number of ignored ground truth detections", "\n", "self", ".", "n_gts", "=", "[", "]", "# number of ground truth detections minus ignored false negatives and true positives PER SEQUENCE", "\n", "self", ".", "n_igts", "=", "[", "]", "# number of ground ignored truth detections PER SEQUENCE", "\n", "self", ".", "n_gt_trajectories", "=", "0", "\n", "self", ".", "n_gt_seq", "=", "[", "]", "\n", "self", ".", "n_tr", "=", "0", "# number of tracker detections minus ignored tracker detections", "\n", "self", ".", "n_trs", "=", "[", "]", "# number of tracker detections minus ignored tracker detections PER SEQUENCE", "\n", "self", ".", "n_itr", "=", "0", "# number of ignored tracker detections", "\n", "self", ".", "n_itrs", "=", "[", "]", "# number of ignored tracker detections PER SEQUENCE", "\n", "self", ".", "n_igttr", "=", "0", "# number of ignored ground truth detections where the corresponding associated tracker detection is also ignored", "\n", "self", ".", "n_tr_trajectories", "=", "0", "\n", "self", ".", "n_tr_seq", "=", "[", "]", "\n", "self", ".", "MOTA", "=", "0", "\n", "self", ".", "MOTP", "=", "0", "\n", "self", ".", "MOTAL", "=", "0", "\n", "self", ".", "MODA", "=", "0", "\n", "self", ".", "MODP", "=", "0", "\n", "self", ".", "MODP_t", "=", "[", "]", "\n", "self", ".", "recall", "=", "0", "\n", "self", ".", "precision", "=", "0", "\n", "self", ".", "F1", "=", "0", "\n", "self", ".", "FAR", "=", "0", "\n", "self", ".", "total_cost", "=", "0", "\n", "self", ".", "itp", "=", "0", "# number of ignored true positives", "\n", "self", ".", "itps", "=", "[", "]", "# number of ignored true positives PER SEQUENCE", "\n", "self", ".", "tp", "=", "0", "# number of true positives including ignored true positives!", "\n", "self", ".", "tps", "=", "[", "]", "# number of true positives including ignored true positives PER SEQUENCE", "\n", "self", ".", "fn", "=", "0", "# number of false negatives WITHOUT ignored false negatives", "\n", "self", ".", "fns", "=", "[", "]", "# number of false negatives WITHOUT ignored false negatives PER SEQUENCE", "\n", "self", ".", "ifn", "=", "0", "# number of ignored false negatives", "\n", "self", ".", "ifns", "=", "[", "]", "# number of ignored false negatives PER SEQUENCE", "\n", "self", ".", "fp", "=", "0", "# number of false positives", "\n", "# a bit tricky, the number of ignored false negatives and ignored true positives", "\n", "# is subtracted, but if both tracker detection and ground truth detection", "\n", "# are ignored this number is added again to avoid double counting", "\n", "self", ".", "fps", "=", "[", "]", "# above PER SEQUENCE", "\n", "self", ".", "mme", "=", "0", "\n", "self", ".", "fragments", "=", "0", "\n", "self", ".", "id_switches", "=", "0", "\n", "self", ".", "MT", "=", "0", "\n", "self", ".", "PT", "=", "0", "\n", "self", ".", "ML", "=", "0", "\n", "\n", "self", ".", "min_overlap", "=", "min_overlap", "# minimum bounding box overlap for 3rd party metrics", "\n", "self", ".", "max_truncation", "=", "max_truncation", "# maximum truncation of an object for evaluation", "\n", "self", ".", "max_occlusion", "=", "max_occlusion", "# maximum occlusion of an object for evaluation", "\n", "self", ".", "min_height", "=", "min_height", "# minimum height of an object for evaluation", "\n", "self", ".", "n_sample_points", "=", "500", "\n", "\n", "# this should be enough to hold all groundtruth trajectories", "\n", "# is expanded if necessary and reduced in any case", "\n", "self", ".", "gt_trajectories", "=", "[", "[", "]", "for", "x", "in", "range", "(", "self", ".", "n_sequences", ")", "]", "\n", "self", ".", "ign_trajectories", "=", "[", "[", "]", "for", "x", "in", "range", "(", "self", ".", "n_sequences", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.kemo-huang_jmodt.tracking.kitti_evaluate.TrackingEvaluation.createEvalDir": [[200, 210], ["os.path.join", "os.path.exists", "logger.info", "os.makedirs", "logger.info"], "methods", ["None"], ["", "def", "createEvalDir", "(", "self", ",", "logger", ")", ":", "\n", "        ", "\"\"\"\n            Creates directory to store evaluation results and data for visualization.\n        \"\"\"", "\n", "\n", "self", ".", "eval_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "t_path", ",", "\"eval\"", ",", "self", ".", "cls", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "eval_dir", ")", ":", "\n", "            ", "logger", ".", "info", "(", "f\"create directory: {self.eval_dir}\"", ")", "\n", "os", ".", "makedirs", "(", "self", ".", "eval_dir", ")", "\n", "logger", ".", "info", "(", "\"done\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kemo-huang_jmodt.tracking.kitti_evaluate.TrackingEvaluation.loadGroundtruth": [[211, 221], ["kitti_evaluate.TrackingEvaluation._loadData"], "methods", ["home.repos.pwc.inspect_result.kemo-huang_jmodt.tracking.kitti_evaluate.TrackingEvaluation._loadData"], ["", "", "def", "loadGroundtruth", "(", "self", ",", "logger", ")", ":", "\n", "        ", "\"\"\"\n            Helper function to load ground truth.\n        \"\"\"", "\n", "\n", "try", ":", "\n", "            ", "self", ".", "_loadData", "(", "self", ".", "gt_path", ",", "cls", "=", "self", ".", "cls", ",", "loading_groundtruth", "=", "True", ",", "logger", "=", "logger", ")", "\n", "", "except", "IOError", ":", "\n", "            ", "return", "False", "\n", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.kemo-huang_jmodt.tracking.kitti_evaluate.TrackingEvaluation.loadTracker": [[222, 233], ["kitti_evaluate.TrackingEvaluation._loadData"], "methods", ["home.repos.pwc.inspect_result.kemo-huang_jmodt.tracking.kitti_evaluate.TrackingEvaluation._loadData"], ["", "def", "loadTracker", "(", "self", ",", "logger", ")", ":", "\n", "        ", "\"\"\"\n            Helper function to load tracker data.\n        \"\"\"", "\n", "\n", "try", ":", "\n", "            ", "if", "not", "self", ".", "_loadData", "(", "self", ".", "t_path", ",", "cls", "=", "self", ".", "cls", ",", "loading_groundtruth", "=", "False", ",", "logger", "=", "logger", ")", ":", "\n", "                ", "return", "False", "\n", "", "", "except", "IOError", ":", "\n", "            ", "return", "False", "\n", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.kemo-huang_jmodt.tracking.kitti_evaluate.TrackingEvaluation._loadData": [[234, 371], ["kitti_evaluate.tData", "enumerate", "os.path.join", "open", "n_trajectories_seq.append", "seq_data.append", "open.close", "range", "line.strip.strip.strip", "line.strip.strip.split", "int", "int", "fields[].lower", "int", "int", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "len", "range", "kitti_evaluate.TrackingEvaluation.dcareas.append", "kitti_evaluate.TrackingEvaluation.groundtruth.append", "range", "cls.lower", "any", "float", "float", "float", "float", "len", "logger.info", "id_frame_cache.append", "f_data[].append", "ids.append", "len", "s_g.append", "s_dc.append", "cls.lower", "len", "logger.info", "logger.info", "logger.info", "copy.copy", "logger.info", "cls.lower", "range", "len", "dc.append", "g.append", "max", "fields[].lower", "len"], "methods", ["None"], ["", "def", "_loadData", "(", "self", ",", "root_dir", ",", "cls", ",", "logger", ",", "min_score", "=", "-", "1000", ",", "loading_groundtruth", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n            Generic loader for ground truth and tracking data.\n            Use loadGroundtruth() or loadTracker() to load this data.\n            Loads detections in KITTI format from textfiles.\n        \"\"\"", "\n", "# construct objectDetections object to hold detection data", "\n", "t_data", "=", "tData", "(", ")", "\n", "data", "=", "[", "]", "\n", "eval_2d", "=", "True", "\n", "eval_3d", "=", "True", "\n", "\n", "seq_data", "=", "[", "]", "\n", "n_trajectories", "=", "0", "\n", "n_trajectories_seq", "=", "[", "]", "\n", "for", "seq", ",", "s_name", "in", "enumerate", "(", "self", ".", "sequence_name", ")", ":", "\n", "            ", "filename", "=", "os", ".", "path", ".", "join", "(", "root_dir", ",", "\"%s.txt\"", "%", "s_name", ")", "\n", "f", "=", "open", "(", "filename", ",", "\"r\"", ")", "\n", "\n", "f_data", "=", "[", "[", "]", "for", "x", "in", "range", "(", "\n", "self", ".", "n_frames", "[", "seq", "]", ")", "]", "# current set has only 1059 entries, sufficient length is checked anyway", "\n", "ids", "=", "[", "]", "\n", "n_in_seq", "=", "0", "\n", "id_frame_cache", "=", "[", "]", "\n", "for", "line", "in", "f", ":", "\n", "# KITTI tracking benchmark data format:", "\n", "# (frame,tracklet_id,objectType,truncation,occlusion,alpha,x1,y1,x2,y2,h,w,l,X,Y,Z,ry)", "\n", "                ", "line", "=", "line", ".", "strip", "(", ")", "\n", "fields", "=", "line", ".", "split", "(", "\" \"", ")", "\n", "# classes that should be loaded (ignored neighboring classes)", "\n", "if", "\"car\"", "in", "cls", ".", "lower", "(", ")", ":", "\n", "                    ", "classes", "=", "[", "\"car\"", ",", "\"van\"", "]", "\n", "", "elif", "\"pedestrian\"", "in", "cls", ".", "lower", "(", ")", ":", "\n", "                    ", "classes", "=", "[", "\"pedestrian\"", ",", "\"person_sitting\"", "]", "\n", "", "else", ":", "\n", "                    ", "classes", "=", "[", "cls", ".", "lower", "(", ")", "]", "\n", "", "classes", "+=", "[", "\"dontcare\"", "]", "\n", "if", "not", "any", "(", "[", "s", "for", "s", "in", "classes", "if", "s", "in", "fields", "[", "2", "]", ".", "lower", "(", ")", "]", ")", ":", "\n", "                    ", "continue", "\n", "# get fields from table", "\n", "", "t_data", ".", "frame", "=", "int", "(", "float", "(", "fields", "[", "0", "]", ")", ")", "# frame", "\n", "t_data", ".", "track_id", "=", "int", "(", "float", "(", "fields", "[", "1", "]", ")", ")", "# id", "\n", "t_data", ".", "obj_type", "=", "fields", "[", "2", "]", ".", "lower", "(", ")", "# object type [car, pedestrian, cyclist, ...]", "\n", "t_data", ".", "truncation", "=", "int", "(", "float", "(", "fields", "[", "3", "]", ")", ")", "# truncation [-1,0,1,2]", "\n", "t_data", ".", "occlusion", "=", "int", "(", "float", "(", "fields", "[", "4", "]", ")", ")", "# occlusion  [-1,0,1,2]", "\n", "t_data", ".", "obs_angle", "=", "float", "(", "fields", "[", "5", "]", ")", "# observation angle [rad]", "\n", "t_data", ".", "x1", "=", "float", "(", "fields", "[", "6", "]", ")", "# left   [px]", "\n", "t_data", ".", "y1", "=", "float", "(", "fields", "[", "7", "]", ")", "# top    [px]", "\n", "t_data", ".", "x2", "=", "float", "(", "fields", "[", "8", "]", ")", "# right  [px]", "\n", "t_data", ".", "y2", "=", "float", "(", "fields", "[", "9", "]", ")", "# bottom [px]", "\n", "t_data", ".", "h", "=", "float", "(", "fields", "[", "10", "]", ")", "# height [m]", "\n", "t_data", ".", "w", "=", "float", "(", "fields", "[", "11", "]", ")", "# width  [m]", "\n", "t_data", ".", "l", "=", "float", "(", "fields", "[", "12", "]", ")", "# length [m]", "\n", "t_data", ".", "X", "=", "float", "(", "fields", "[", "13", "]", ")", "# X [m]", "\n", "t_data", ".", "Y", "=", "float", "(", "fields", "[", "14", "]", ")", "# Y [m]", "\n", "t_data", ".", "Z", "=", "float", "(", "fields", "[", "15", "]", ")", "# Z [m]", "\n", "t_data", ".", "yaw", "=", "float", "(", "fields", "[", "16", "]", ")", "# yaw angle [rad]", "\n", "# if not loading_groundtruth:", "\n", "#     if len(fields) == 17:", "\n", "#         t_data.score = -1", "\n", "#     elif len(fields) == 18:", "\n", "#         t_data.score = float(fields[17])  # detection score", "\n", "#     else:", "\n", "#         logger.info(\"file is not in KITTI format\")", "\n", "#         return", "\n", "\n", "# do not consider objects marked as invalid", "\n", "if", "t_data", ".", "track_id", "==", "-", "1", "and", "t_data", ".", "obj_type", "!=", "\"dontcare\"", ":", "\n", "                    ", "continue", "\n", "\n", "", "idx", "=", "t_data", ".", "frame", "\n", "# check if length for frame data is sufficient", "\n", "if", "idx", ">=", "len", "(", "f_data", ")", ":", "\n", "                    ", "logger", ".", "info", "(", "\"extend f_data\"", ",", "idx", ",", "len", "(", "f_data", ")", ")", "\n", "f_data", "+=", "[", "[", "]", "for", "x", "in", "range", "(", "max", "(", "500", ",", "idx", "-", "len", "(", "f_data", ")", ")", ")", "]", "\n", "", "try", ":", "\n", "                    ", "id_frame", "=", "(", "t_data", ".", "frame", ",", "t_data", ".", "track_id", ")", "\n", "if", "id_frame", "in", "id_frame_cache", "and", "not", "loading_groundtruth", ":", "\n", "                        ", "logger", ".", "info", "(", "\"track ids are not unique for sequence %d: frame %d\"", "%", "(", "seq", ",", "t_data", ".", "frame", ")", ")", "\n", "logger", ".", "info", "(", "\"track id %d occured at least twice for this frame\"", "%", "t_data", ".", "track_id", ")", "\n", "logger", ".", "info", "(", "\"Exiting...\"", ")", "\n", "# continue # this allows to evaluate non-unique result files", "\n", "return", "False", "\n", "", "id_frame_cache", ".", "append", "(", "id_frame", ")", "\n", "f_data", "[", "t_data", ".", "frame", "]", ".", "append", "(", "copy", ".", "copy", "(", "t_data", ")", ")", "\n", "", "except", ":", "\n", "                    ", "logger", ".", "info", "(", "len", "(", "f_data", ")", ",", "idx", ")", "\n", "raise", "\n", "\n", "", "if", "t_data", ".", "track_id", "not", "in", "ids", "and", "t_data", ".", "obj_type", "!=", "\"dontcare\"", ":", "\n", "                    ", "ids", ".", "append", "(", "t_data", ".", "track_id", ")", "\n", "n_trajectories", "+=", "1", "\n", "n_in_seq", "+=", "1", "\n", "\n", "# check if uploaded data provides information for 2D and 3D evaluation", "\n", "", "if", "not", "loading_groundtruth", "and", "eval_2d", "is", "True", "and", "(", "\n", "t_data", ".", "x1", "==", "-", "1", "or", "t_data", ".", "x2", "==", "-", "1", "or", "t_data", ".", "y1", "==", "-", "1", "or", "t_data", ".", "y2", "==", "-", "1", ")", ":", "\n", "                    ", "eval_2d", "=", "False", "\n", "", "if", "not", "loading_groundtruth", "and", "eval_3d", "is", "True", "and", "(", "\n", "t_data", ".", "X", "==", "-", "1000", "or", "t_data", ".", "Y", "==", "-", "1000", "or", "t_data", ".", "Z", "==", "-", "1000", ")", ":", "\n", "                    ", "eval_3d", "=", "False", "\n", "\n", "# only add existing frames", "\n", "", "", "n_trajectories_seq", ".", "append", "(", "n_in_seq", ")", "\n", "seq_data", ".", "append", "(", "f_data", ")", "\n", "f", ".", "close", "(", ")", "\n", "\n", "", "if", "not", "loading_groundtruth", ":", "\n", "            ", "self", ".", "tracker", "=", "seq_data", "\n", "self", ".", "n_tr_trajectories", "=", "n_trajectories", "\n", "self", ".", "eval_2d", "=", "eval_2d", "\n", "self", ".", "eval_3d", "=", "eval_3d", "\n", "self", ".", "n_tr_seq", "=", "n_trajectories_seq", "\n", "if", "self", ".", "n_tr_trajectories", "==", "0", ":", "\n", "                ", "return", "False", "\n", "", "", "else", ":", "\n", "# split ground truth and DontCare areas", "\n", "            ", "self", ".", "dcareas", "=", "[", "]", "\n", "self", ".", "groundtruth", "=", "[", "]", "\n", "for", "seq_idx", "in", "range", "(", "len", "(", "seq_data", ")", ")", ":", "\n", "                ", "seq_gt", "=", "seq_data", "[", "seq_idx", "]", "\n", "s_g", ",", "s_dc", "=", "[", "]", ",", "[", "]", "\n", "for", "f", "in", "range", "(", "len", "(", "seq_gt", ")", ")", ":", "\n", "                    ", "all_gt", "=", "seq_gt", "[", "f", "]", "\n", "g", ",", "dc", "=", "[", "]", ",", "[", "]", "\n", "for", "gg", "in", "all_gt", ":", "\n", "                        ", "if", "gg", ".", "obj_type", "==", "\"dontcare\"", ":", "\n", "                            ", "dc", ".", "append", "(", "gg", ")", "\n", "", "else", ":", "\n", "                            ", "g", ".", "append", "(", "gg", ")", "\n", "", "", "s_g", ".", "append", "(", "g", ")", "\n", "s_dc", ".", "append", "(", "dc", ")", "\n", "", "self", ".", "dcareas", ".", "append", "(", "s_dc", ")", "\n", "self", ".", "groundtruth", ".", "append", "(", "s_g", ")", "\n", "", "self", ".", "n_gt_seq", "=", "n_trajectories_seq", "\n", "self", ".", "n_gt_trajectories", "=", "n_trajectories", "\n", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.kemo-huang_jmodt.tracking.kitti_evaluate.TrackingEvaluation.boxoverlap": [[372, 400], ["max", "max", "min", "min", "criterion.lower", "float", "criterion.lower", "TypeError", "float", "float"], "methods", ["None"], ["", "def", "boxoverlap", "(", "self", ",", "a", ",", "b", ",", "criterion", "=", "\"union\"", ")", ":", "\n", "        ", "\"\"\"\n            boxoverlap computes intersection over union for bbox a and b in KITTI format.\n            If the criterion is 'union', overlap = (a inter b) / a union b).\n            If the criterion is 'a', overlap = (a inter b) / a, where b should be a dontcare area.\n        \"\"\"", "\n", "\n", "x1", "=", "max", "(", "a", ".", "x1", ",", "b", ".", "x1", ")", "\n", "y1", "=", "max", "(", "a", ".", "y1", ",", "b", ".", "y1", ")", "\n", "x2", "=", "min", "(", "a", ".", "x2", ",", "b", ".", "x2", ")", "\n", "y2", "=", "min", "(", "a", ".", "y2", ",", "b", ".", "y2", ")", "\n", "\n", "w", "=", "x2", "-", "x1", "\n", "h", "=", "y2", "-", "y1", "\n", "\n", "if", "w", "<=", "0.", "or", "h", "<=", "0.", ":", "\n", "            ", "return", "0.", "\n", "", "inter", "=", "w", "*", "h", "\n", "aarea", "=", "(", "a", ".", "x2", "-", "a", ".", "x1", ")", "*", "(", "a", ".", "y2", "-", "a", ".", "y1", ")", "\n", "barea", "=", "(", "b", ".", "x2", "-", "b", ".", "x1", ")", "*", "(", "b", ".", "y2", "-", "b", ".", "y1", ")", "\n", "# intersection over union overlap", "\n", "if", "criterion", ".", "lower", "(", ")", "==", "\"union\"", ":", "\n", "            ", "o", "=", "inter", "/", "float", "(", "aarea", "+", "barea", "-", "inter", ")", "\n", "", "elif", "criterion", ".", "lower", "(", ")", "==", "\"a\"", ":", "\n", "            ", "o", "=", "float", "(", "inter", ")", "/", "float", "(", "aarea", ")", "\n", "", "else", ":", "\n", "            ", "raise", "TypeError", "(", "\"Unkown type for criterion\"", ")", "\n", "", "return", "o", "\n", "\n"]], "home.repos.pwc.inspect_result.kemo-huang_jmodt.tracking.kitti_evaluate.TrackingEvaluation.compute3rdPartyMetrics": [[401, 806], ["munkres.Munkres", "range", "enumerate", "len", "collections.defaultdict", "collections.defaultdict", "range", "kitti_evaluate.TrackingEvaluation.n_gts.append", "kitti_evaluate.TrackingEvaluation.n_trs.append", "kitti_evaluate.TrackingEvaluation.tps.append", "kitti_evaluate.TrackingEvaluation.itps.append", "kitti_evaluate.TrackingEvaluation.fps.append", "kitti_evaluate.TrackingEvaluation.fns.append", "kitti_evaluate.TrackingEvaluation.ifns.append", "kitti_evaluate.TrackingEvaluation.n_igts.append", "kitti_evaluate.TrackingEvaluation.n_itrs.append", "zip", "zip", "float", "float", "float", "sum", "float", "sum", "len", "len", "len", "len", "len", "munkres.Munkres.compute", "dict", "enumerate", "kitti_evaluate.TrackingEvaluation.MODP_t.append", "len", "collections.defaultdict.items", "collections.defaultdict.values", "all", "all", "range", "float", "float", "float", "float", "float", "float", "float", "sum", "float", "this_ids[].append", "this_ids[].append", "cost_matrix.append", "seq_trajectories[].append", "seq_ignored[].append", "len", "len", "abs", "logger.info", "NameError", "logger.info", "NameError", "logger.info", "NameError", "logger.info", "logger.info", "logger.info", "logger.info", "logger.info", "logger.info", "logger.info", "logger.info", "logger.info", "NameError", "len", "logger.info", "logger.info", "NameError", "len", "float", "sum", "float", "float", "sum", "kitti_evaluate.TrackingEvaluation.boxoverlap", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "last_ids[].index", "float", "logger.info", "len", "float", "float", "kitti_evaluate.TrackingEvaluation.boxoverlap", "cost_row.append", "cost_row.append", "len", "len", "sum", "math.log10", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.kemo-huang_jmodt.tracking.kitti_evaluate.TrackingEvaluation.boxoverlap", "home.repos.pwc.inspect_result.kemo-huang_jmodt.tracking.kitti_evaluate.TrackingEvaluation.boxoverlap"], ["", "def", "compute3rdPartyMetrics", "(", "self", ",", "logger", ")", ":", "\n", "        ", "\"\"\"\n            Computes the metrics defined in\n                - Stiefelhagen 2008: Evaluating Multiple Object Tracking Performance: The CLEAR MOT Metrics\n                  MOTA, MOTAL, MOTP\n                - Nevatia 2008: Global Data Association for Multi-Object Tracking Using Network Flows\n                  MT/PT/ML\n        \"\"\"", "\n", "\n", "# construct Munkres object for Hungarian Method association", "\n", "hm", "=", "Munkres", "(", ")", "\n", "max_cost", "=", "1e9", "\n", "\n", "# go through all frames and associate ground truth and tracker results", "\n", "# groundtruth and tracker contain lists for every single frame containing lists of KITTI format detections", "\n", "fr", ",", "ids", "=", "0", ",", "0", "\n", "for", "seq_idx", "in", "range", "(", "len", "(", "self", ".", "groundtruth", ")", ")", ":", "\n", "            ", "seq_gt", "=", "self", ".", "groundtruth", "[", "seq_idx", "]", "\n", "seq_dc", "=", "self", ".", "dcareas", "[", "seq_idx", "]", "# don't care areas", "\n", "seq_tracker", "=", "self", ".", "tracker", "[", "seq_idx", "]", "\n", "seq_trajectories", "=", "defaultdict", "(", "list", ")", "\n", "seq_ignored", "=", "defaultdict", "(", "list", ")", "\n", "\n", "# statistics over the current sequence, check the corresponding", "\n", "# variable comments in __init__ to get their meaning", "\n", "seqtp", "=", "0", "\n", "seqitp", "=", "0", "\n", "seqfn", "=", "0", "\n", "seqifn", "=", "0", "\n", "seqfp", "=", "0", "\n", "seqigt", "=", "0", "\n", "seqitr", "=", "0", "\n", "\n", "last_ids", "=", "[", "[", "]", ",", "[", "]", "]", "\n", "\n", "n_gts", "=", "0", "\n", "n_trs", "=", "0", "\n", "\n", "for", "f", "in", "range", "(", "len", "(", "seq_gt", ")", ")", ":", "\n", "                ", "g", "=", "seq_gt", "[", "f", "]", "\n", "dc", "=", "seq_dc", "[", "f", "]", "\n", "\n", "t", "=", "seq_tracker", "[", "f", "]", "\n", "# counting total number of ground truth and tracker objects", "\n", "self", ".", "n_gt", "+=", "len", "(", "g", ")", "\n", "self", ".", "n_tr", "+=", "len", "(", "t", ")", "\n", "\n", "n_gts", "+=", "len", "(", "g", ")", "\n", "n_trs", "+=", "len", "(", "t", ")", "\n", "\n", "# use hungarian method to associate, using boxoverlap 0..1 as cost", "\n", "# build cost matrix", "\n", "cost_matrix", "=", "[", "]", "\n", "this_ids", "=", "[", "[", "]", ",", "[", "]", "]", "\n", "for", "gg", "in", "g", ":", "\n", "# save current ids", "\n", "                    ", "this_ids", "[", "0", "]", ".", "append", "(", "gg", ".", "track_id", ")", "\n", "this_ids", "[", "1", "]", ".", "append", "(", "-", "1", ")", "\n", "gg", ".", "tracker", "=", "-", "1", "\n", "gg", ".", "id_switch", "=", "0", "\n", "gg", ".", "fragmentation", "=", "0", "\n", "cost_row", "=", "[", "]", "\n", "for", "tt", "in", "t", ":", "\n", "# overlap == 1 is cost ==0", "\n", "                        ", "c", "=", "1", "-", "self", ".", "boxoverlap", "(", "gg", ",", "tt", ")", "\n", "# gating for boxoverlap", "\n", "if", "c", "<=", "self", ".", "min_overlap", ":", "\n", "                            ", "cost_row", ".", "append", "(", "c", ")", "\n", "", "else", ":", "\n", "                            ", "cost_row", ".", "append", "(", "max_cost", ")", "# = 1e9", "\n", "", "", "cost_matrix", ".", "append", "(", "cost_row", ")", "\n", "# all ground truth trajectories are initially not associated", "\n", "# extend groundtruth trajectories lists (merge lists)", "\n", "seq_trajectories", "[", "gg", ".", "track_id", "]", ".", "append", "(", "-", "1", ")", "\n", "seq_ignored", "[", "gg", ".", "track_id", "]", ".", "append", "(", "False", ")", "\n", "\n", "", "if", "len", "(", "g", ")", "==", "0", ":", "\n", "                    ", "cost_matrix", "=", "[", "[", "]", "]", "\n", "# associate", "\n", "", "association_matrix", "=", "hm", ".", "compute", "(", "cost_matrix", ")", "\n", "\n", "# tmp variables for sanity checks and MODP computation", "\n", "tmptp", "=", "0", "\n", "tmpfp", "=", "0", "\n", "tmpfn", "=", "0", "\n", "tmpc", "=", "0", "# this will sum up the overlaps for all true positives", "\n", "tmpcs", "=", "[", "0", "]", "*", "len", "(", "g", ")", "# this will save the overlaps for all true positives", "\n", "# the reason is that some true positives might be ignored", "\n", "# later such that the corrsponding overlaps can", "\n", "# be subtracted from tmpc for MODP computation", "\n", "\n", "# mapping for tracker ids and ground truth ids", "\n", "for", "row", ",", "col", "in", "association_matrix", ":", "\n", "# apply gating on boxoverlap", "\n", "                    ", "c", "=", "cost_matrix", "[", "row", "]", "[", "col", "]", "\n", "if", "c", "<", "max_cost", ":", "\n", "                        ", "g", "[", "row", "]", ".", "tracker", "=", "t", "[", "col", "]", ".", "track_id", "\n", "this_ids", "[", "1", "]", "[", "row", "]", "=", "t", "[", "col", "]", ".", "track_id", "\n", "t", "[", "col", "]", ".", "valid", "=", "True", "\n", "g", "[", "row", "]", ".", "distance", "=", "c", "\n", "self", ".", "total_cost", "+=", "1", "-", "c", "\n", "tmpc", "+=", "1", "-", "c", "\n", "tmpcs", "[", "row", "]", "=", "1", "-", "c", "\n", "seq_trajectories", "[", "g", "[", "row", "]", ".", "track_id", "]", "[", "-", "1", "]", "=", "t", "[", "col", "]", ".", "track_id", "\n", "\n", "# true positives are only valid associations", "\n", "self", ".", "tp", "+=", "1", "\n", "tmptp", "+=", "1", "\n", "", "else", ":", "\n", "                        ", "g", "[", "row", "]", ".", "tracker", "=", "-", "1", "\n", "self", ".", "fn", "+=", "1", "\n", "tmpfn", "+=", "1", "\n", "\n", "# associate tracker and DontCare areas", "\n", "# ignore tracker in neighboring classes", "\n", "", "", "nignoredtracker", "=", "0", "# number of ignored tracker detections", "\n", "ignoredtrackers", "=", "dict", "(", ")", "# will associate the track_id with -1", "\n", "# if it is not ignored and 1 if it is", "\n", "# ignored;", "\n", "# this is used to avoid double counting ignored", "\n", "# cases, see the next loop", "\n", "\n", "for", "tt", "in", "t", ":", "\n", "                    ", "ignoredtrackers", "[", "tt", ".", "track_id", "]", "=", "-", "1", "\n", "# ignore detection if it belongs to a neighboring class or is", "\n", "# smaller or equal to the minimum height", "\n", "\n", "tt_height", "=", "abs", "(", "tt", ".", "y1", "-", "tt", ".", "y2", ")", "\n", "if", "(", "(", "self", ".", "cls", "==", "\"car\"", "and", "tt", ".", "obj_type", "==", "\"van\"", ")", "or", "(", "\n", "self", ".", "cls", "==", "\"pedestrian\"", "and", "tt", ".", "obj_type", "==", "\"person_sitting\"", ")", "or", "tt_height", "<=", "self", ".", "min_height", ")", "and", "not", "tt", ".", "valid", ":", "\n", "                        ", "nignoredtracker", "+=", "1", "\n", "tt", ".", "ignored", "=", "True", "\n", "ignoredtrackers", "[", "tt", ".", "track_id", "]", "=", "1", "\n", "continue", "\n", "", "for", "d", "in", "dc", ":", "\n", "                        ", "overlap", "=", "self", ".", "boxoverlap", "(", "tt", ",", "d", ",", "\"a\"", ")", "\n", "if", "overlap", ">", "0.5", "and", "not", "tt", ".", "valid", ":", "\n", "                            ", "tt", ".", "ignored", "=", "True", "\n", "nignoredtracker", "+=", "1", "\n", "ignoredtrackers", "[", "tt", ".", "track_id", "]", "=", "1", "\n", "break", "\n", "\n", "# check for ignored FN/TP (truncation or neighboring object class)", "\n", "", "", "", "ignoredfn", "=", "0", "# the number of ignored false negatives", "\n", "nignoredtp", "=", "0", "# the number of ignored true positives", "\n", "nignoredpairs", "=", "0", "# the number of ignored pairs, i.e. a true positive", "\n", "# which is ignored but where the associated tracker", "\n", "# detection has already been ignored", "\n", "\n", "gi", "=", "0", "\n", "for", "gg", "in", "g", ":", "\n", "                    ", "if", "gg", ".", "tracker", "<", "0", ":", "\n", "                        ", "if", "gg", ".", "occlusion", ">", "self", ".", "max_occlusion", "or", "gg", ".", "truncation", ">", "self", ".", "max_truncation", "or", "(", "self", ".", "cls", "==", "\"car\"", "and", "gg", ".", "obj_type", "==", "\"van\"", ")", "or", "(", "\n", "self", ".", "cls", "==", "\"pedestrian\"", "and", "gg", ".", "obj_type", "==", "\"person_sitting\"", ")", ":", "\n", "                            ", "seq_ignored", "[", "gg", ".", "track_id", "]", "[", "-", "1", "]", "=", "True", "\n", "gg", ".", "ignored", "=", "True", "\n", "ignoredfn", "+=", "1", "\n", "\n", "", "", "elif", "gg", ".", "tracker", ">=", "0", ":", "\n", "                        ", "if", "gg", ".", "occlusion", ">", "self", ".", "max_occlusion", "or", "gg", ".", "truncation", ">", "self", ".", "max_truncation", "or", "(", "self", ".", "cls", "==", "\"car\"", "and", "gg", ".", "obj_type", "==", "\"van\"", ")", "or", "(", "\n", "self", ".", "cls", "==", "\"pedestrian\"", "and", "gg", ".", "obj_type", "==", "\"person_sitting\"", ")", ":", "\n", "\n", "                            ", "seq_ignored", "[", "gg", ".", "track_id", "]", "[", "-", "1", "]", "=", "True", "\n", "gg", ".", "ignored", "=", "True", "\n", "nignoredtp", "+=", "1", "\n", "\n", "# if the associated tracker detection is already ignored,", "\n", "# we want to avoid double counting ignored detections", "\n", "if", "ignoredtrackers", "[", "gg", ".", "tracker", "]", ">", "0", ":", "\n", "                                ", "nignoredpairs", "+=", "1", "\n", "\n", "# for computing MODP, the overlaps from ignored detections", "\n", "# are subtracted", "\n", "", "tmpc", "-=", "tmpcs", "[", "gi", "]", "\n", "", "", "gi", "+=", "1", "\n", "\n", "# the below might be confusion, check the comments in __init__", "\n", "# to see what the individual statistics represent", "\n", "\n", "# correct TP by number of ignored TP due to truncation", "\n", "# ignored TP are shown as tracked in visualization", "\n", "", "tmptp", "-=", "nignoredtp", "\n", "\n", "# count the number of ignored true positives", "\n", "self", ".", "itp", "+=", "nignoredtp", "\n", "\n", "# adjust the number of ground truth objects considered", "\n", "self", ".", "n_gt", "-=", "(", "ignoredfn", "+", "nignoredtp", ")", "\n", "\n", "# count the number of ignored ground truth objects", "\n", "self", ".", "n_igt", "+=", "ignoredfn", "+", "nignoredtp", "\n", "\n", "# count the number of ignored tracker objects", "\n", "self", ".", "n_itr", "+=", "nignoredtracker", "\n", "\n", "# count the number of ignored pairs, i.e. associated tracker and", "\n", "# ground truth objects that are both ignored", "\n", "self", ".", "n_igttr", "+=", "nignoredpairs", "\n", "\n", "# false negatives = associated gt bboxes exceding association threshold + non-associated gt bboxes", "\n", "# ", "\n", "tmpfn", "+=", "len", "(", "g", ")", "-", "len", "(", "association_matrix", ")", "-", "ignoredfn", "\n", "self", ".", "fn", "+=", "len", "(", "g", ")", "-", "len", "(", "association_matrix", ")", "-", "ignoredfn", "\n", "self", ".", "ifn", "+=", "ignoredfn", "\n", "\n", "# false positives = tracker bboxes - associated tracker bboxes", "\n", "# mismatches (mme_t)", "\n", "tmpfp", "+=", "len", "(", "t", ")", "-", "tmptp", "-", "nignoredtracker", "-", "nignoredtp", "+", "nignoredpairs", "\n", "self", ".", "fp", "+=", "len", "(", "t", ")", "-", "tmptp", "-", "nignoredtracker", "-", "nignoredtp", "+", "nignoredpairs", "\n", "# tmpfp   = len(t) - tmptp - nignoredtp # == len(t) - (tp - ignoredtp) - ignoredtp", "\n", "# self.fp += len(t) - tmptp - nignoredtp", "\n", "\n", "# update sequence data", "\n", "seqtp", "+=", "tmptp", "\n", "seqitp", "+=", "nignoredtp", "\n", "seqfp", "+=", "tmpfp", "\n", "seqfn", "+=", "tmpfn", "\n", "seqifn", "+=", "ignoredfn", "\n", "seqigt", "+=", "ignoredfn", "+", "nignoredtp", "\n", "seqitr", "+=", "nignoredtracker", "\n", "\n", "# sanity checks", "\n", "# - the number of true positives minues ignored true positives", "\n", "#   should be greater or equal to 0", "\n", "# - the number of false negatives should be greater or equal to 0", "\n", "# - the number of false positives needs to be greater or equal to 0", "\n", "#   otherwise ignored detections might be counted double", "\n", "# - the number of counted true positives (plus ignored ones)", "\n", "#   and the number of counted false negatives (plus ignored ones)", "\n", "#   should match the total number of ground truth objects", "\n", "# - the number of counted true positives (plus ignored ones)", "\n", "#   and the number of counted false positives", "\n", "#   plus the number of ignored tracker detections should", "\n", "#   match the total number of tracker detections; note that", "\n", "#   nignoredpairs is subtracted here to avoid double counting", "\n", "#   of ignored detection sin nignoredtp and nignoredtracker", "\n", "if", "tmptp", "<", "0", ":", "\n", "                    ", "logger", ".", "info", "(", "tmptp", ",", "nignoredtp", ")", "\n", "raise", "NameError", "(", "\"Something went wrong! TP is negative\"", ")", "\n", "", "if", "tmpfn", "<", "0", ":", "\n", "                    ", "logger", ".", "info", "(", "tmpfn", ",", "len", "(", "g", ")", ",", "len", "(", "association_matrix", ")", ",", "ignoredfn", ",", "nignoredpairs", ")", "\n", "raise", "NameError", "(", "\"Something went wrong! FN is negative\"", ")", "\n", "", "if", "tmpfp", "<", "0", ":", "\n", "                    ", "logger", ".", "info", "(", "tmpfp", ",", "len", "(", "t", ")", ",", "tmptp", ",", "nignoredtracker", ",", "nignoredtp", ",", "nignoredpairs", ")", "\n", "raise", "NameError", "(", "\"Something went wrong! FP is negative\"", ")", "\n", "", "if", "tmptp", "+", "tmpfn", "is", "not", "len", "(", "g", ")", "-", "ignoredfn", "-", "nignoredtp", ":", "\n", "                    ", "logger", ".", "info", "(", "\"seqidx\"", ",", "seq_idx", ")", "\n", "logger", ".", "info", "(", "\"frame \"", ",", "f", ")", "\n", "logger", ".", "info", "(", "\"TP    \"", ",", "tmptp", ")", "\n", "logger", ".", "info", "(", "\"FN    \"", ",", "tmpfn", ")", "\n", "logger", ".", "info", "(", "\"FP    \"", ",", "tmpfp", ")", "\n", "logger", ".", "info", "(", "\"nGT   \"", ",", "len", "(", "g", ")", ")", "\n", "logger", ".", "info", "(", "\"nAss  \"", ",", "len", "(", "association_matrix", ")", ")", "\n", "logger", ".", "info", "(", "\"ign GT\"", ",", "ignoredfn", ")", "\n", "logger", ".", "info", "(", "\"ign TP\"", ",", "nignoredtp", ")", "\n", "raise", "NameError", "(", "\"Something went wrong! nGroundtruth is not TP+FN\"", ")", "\n", "", "if", "tmptp", "+", "tmpfp", "+", "nignoredtp", "+", "nignoredtracker", "-", "nignoredpairs", "is", "not", "len", "(", "t", ")", ":", "\n", "                    ", "logger", ".", "info", "(", "seq_idx", ",", "f", ",", "len", "(", "t", ")", ",", "tmptp", ",", "tmpfp", ")", "\n", "logger", ".", "info", "(", "len", "(", "association_matrix", ")", ",", "association_matrix", ")", "\n", "raise", "NameError", "(", "\"Something went wrong! nTracker is not TP+FP\"", ")", "\n", "\n", "# check for id switches or fragmentations", "\n", "", "for", "i", ",", "tt", "in", "enumerate", "(", "this_ids", "[", "0", "]", ")", ":", "\n", "                    ", "if", "tt", "in", "last_ids", "[", "0", "]", ":", "\n", "                        ", "idx", "=", "last_ids", "[", "0", "]", ".", "index", "(", "tt", ")", "\n", "tid", "=", "this_ids", "[", "1", "]", "[", "i", "]", "\n", "lid", "=", "last_ids", "[", "1", "]", "[", "idx", "]", "\n", "if", "tid", "!=", "lid", "and", "lid", "!=", "-", "1", "and", "tid", "!=", "-", "1", ":", "\n", "                            ", "if", "g", "[", "i", "]", ".", "truncation", "<", "self", ".", "max_truncation", ":", "\n", "                                ", "g", "[", "i", "]", ".", "id_switch", "=", "1", "\n", "ids", "+=", "1", "\n", "", "", "if", "tid", "!=", "lid", "and", "lid", "!=", "-", "1", ":", "\n", "                            ", "if", "g", "[", "i", "]", ".", "truncation", "<", "self", ".", "max_truncation", ":", "\n", "                                ", "g", "[", "i", "]", ".", "fragmentation", "=", "1", "\n", "fr", "+=", "1", "\n", "\n", "# save current index", "\n", "", "", "", "", "last_ids", "=", "this_ids", "\n", "# compute MOTP_t", "\n", "MODP_t", "=", "1", "\n", "if", "tmptp", "!=", "0", ":", "\n", "                    ", "MODP_t", "=", "tmpc", "/", "float", "(", "tmptp", ")", "\n", "", "self", ".", "MODP_t", ".", "append", "(", "MODP_t", ")", "\n", "\n", "# remove empty lists for current gt trajectories", "\n", "", "self", ".", "gt_trajectories", "[", "seq_idx", "]", "=", "seq_trajectories", "\n", "self", ".", "ign_trajectories", "[", "seq_idx", "]", "=", "seq_ignored", "\n", "\n", "# gather statistics for \"per sequence\" statistics.", "\n", "self", ".", "n_gts", ".", "append", "(", "n_gts", ")", "\n", "self", ".", "n_trs", ".", "append", "(", "n_trs", ")", "\n", "self", ".", "tps", ".", "append", "(", "seqtp", ")", "\n", "self", ".", "itps", ".", "append", "(", "seqitp", ")", "\n", "self", ".", "fps", ".", "append", "(", "seqfp", ")", "\n", "self", ".", "fns", ".", "append", "(", "seqfn", ")", "\n", "self", ".", "ifns", ".", "append", "(", "seqifn", ")", "\n", "self", ".", "n_igts", ".", "append", "(", "seqigt", ")", "\n", "self", ".", "n_itrs", ".", "append", "(", "seqitr", ")", "\n", "\n", "# compute MT/PT/ML, fragments, idswitches for all groundtruth trajectories", "\n", "", "n_ignored_tr_total", "=", "0", "\n", "for", "seq_idx", ",", "(", "seq_trajectories", ",", "seq_ignored", ")", "in", "enumerate", "(", "zip", "(", "self", ".", "gt_trajectories", ",", "self", ".", "ign_trajectories", ")", ")", ":", "\n", "            ", "if", "len", "(", "seq_trajectories", ")", "==", "0", ":", "\n", "                ", "continue", "\n", "", "tmpMT", ",", "tmpML", ",", "tmpPT", ",", "tmpId_switches", ",", "tmpFragments", "=", "[", "0", "]", "*", "5", "\n", "n_ignored_tr", "=", "0", "\n", "for", "g_item", ",", "ign_g", "in", "zip", "(", "seq_trajectories", ".", "items", "(", ")", ",", "seq_ignored", ".", "values", "(", ")", ")", ":", "\n", "                ", "track_id", ",", "g", "=", "g_item", "\n", "# all frames of this gt trajectory are ignored", "\n", "if", "all", "(", "ign_g", ")", ":", "\n", "                    ", "n_ignored_tr", "+=", "1", "\n", "n_ignored_tr_total", "+=", "1", "\n", "continue", "\n", "# all frames of this gt trajectory are not assigned to any detections", "\n", "", "if", "all", "(", "[", "this", "==", "-", "1", "for", "this", "in", "g", "]", ")", ":", "\n", "                    ", "tmpML", "+=", "1", "\n", "self", ".", "ML", "+=", "1", "\n", "continue", "\n", "# compute tracked frames in trajectory", "\n", "", "last_id", "=", "g", "[", "0", "]", "\n", "# first detection (necessary to be in gt_trajectories) is always tracked", "\n", "tracked", "=", "1", "if", "g", "[", "0", "]", ">=", "0", "else", "0", "\n", "lgt", "=", "0", "if", "ign_g", "[", "0", "]", "else", "1", "\n", "for", "f", "in", "range", "(", "1", ",", "len", "(", "g", ")", ")", ":", "\n", "                    ", "if", "ign_g", "[", "f", "]", ":", "\n", "                        ", "last_id", "=", "-", "1", "\n", "continue", "\n", "", "lgt", "+=", "1", "\n", "if", "last_id", "!=", "g", "[", "f", "]", "and", "last_id", "!=", "-", "1", "and", "g", "[", "f", "]", "!=", "-", "1", "and", "g", "[", "f", "-", "1", "]", "!=", "-", "1", ":", "\n", "                        ", "tmpId_switches", "+=", "1", "\n", "self", ".", "id_switches", "+=", "1", "\n", "logger", ".", "info", "(", "f'ID switches: sequence {seq_idx}, track ID {track_id}, number {f}'", ")", "\n", "", "if", "f", "<", "len", "(", "g", ")", "-", "1", "and", "g", "[", "f", "-", "1", "]", "!=", "g", "[", "f", "]", "and", "last_id", "!=", "-", "1", "and", "g", "[", "f", "]", "!=", "-", "1", "and", "g", "[", "f", "+", "1", "]", "!=", "-", "1", ":", "\n", "                        ", "tmpFragments", "+=", "1", "\n", "self", ".", "fragments", "+=", "1", "\n", "", "if", "g", "[", "f", "]", "!=", "-", "1", ":", "\n", "                        ", "tracked", "+=", "1", "\n", "last_id", "=", "g", "[", "f", "]", "\n", "# handle last frame; tracked state is handled in for loop (g[f]!=-1)", "\n", "", "", "if", "len", "(", "g", ")", ">", "1", "and", "g", "[", "f", "-", "1", "]", "!=", "g", "[", "f", "]", "and", "last_id", "!=", "-", "1", "and", "g", "[", "f", "]", "!=", "-", "1", "and", "not", "ign_g", "[", "f", "]", ":", "\n", "                    ", "tmpFragments", "+=", "1", "\n", "self", ".", "fragments", "+=", "1", "\n", "\n", "# compute MT/PT/ML", "\n", "", "tracking_ratio", "=", "tracked", "/", "float", "(", "len", "(", "g", ")", "-", "sum", "(", "ign_g", ")", ")", "\n", "if", "tracking_ratio", ">", "0.8", ":", "\n", "                    ", "tmpMT", "+=", "1", "\n", "self", ".", "MT", "+=", "1", "\n", "", "elif", "tracking_ratio", "<", "0.2", ":", "\n", "                    ", "tmpML", "+=", "1", "\n", "self", ".", "ML", "+=", "1", "\n", "", "else", ":", "# 0.2 <= tracking_ratio <= 0.8", "\n", "                    ", "tmpPT", "+=", "1", "\n", "self", ".", "PT", "+=", "1", "\n", "\n", "", "", "", "if", "(", "self", ".", "n_gt_trajectories", "-", "n_ignored_tr_total", ")", "==", "0", ":", "\n", "            ", "self", ".", "MT", "=", "0.", "\n", "self", ".", "PT", "=", "0.", "\n", "self", ".", "ML", "=", "0.", "\n", "", "else", ":", "\n", "            ", "self", ".", "MT", "/=", "float", "(", "self", ".", "n_gt_trajectories", "-", "n_ignored_tr_total", ")", "\n", "self", ".", "PT", "/=", "float", "(", "self", ".", "n_gt_trajectories", "-", "n_ignored_tr_total", ")", "\n", "self", ".", "ML", "/=", "float", "(", "self", ".", "n_gt_trajectories", "-", "n_ignored_tr_total", ")", "\n", "\n", "# precision/recall etc.", "\n", "", "if", "(", "self", ".", "fp", "+", "self", ".", "tp", ")", "==", "0", "or", "(", "self", ".", "tp", "+", "self", ".", "fn", ")", "==", "0", ":", "\n", "            ", "self", ".", "recall", "=", "0.", "\n", "self", ".", "precision", "=", "0.", "\n", "", "else", ":", "\n", "            ", "self", ".", "recall", "=", "self", ".", "tp", "/", "float", "(", "self", ".", "tp", "+", "self", ".", "fn", ")", "\n", "self", ".", "precision", "=", "self", ".", "tp", "/", "float", "(", "self", ".", "fp", "+", "self", ".", "tp", ")", "\n", "", "if", "(", "self", ".", "recall", "+", "self", ".", "precision", ")", "==", "0", ":", "\n", "            ", "self", ".", "F1", "=", "0.", "\n", "", "else", ":", "\n", "            ", "self", ".", "F1", "=", "2.", "*", "(", "self", ".", "precision", "*", "self", ".", "recall", ")", "/", "(", "self", ".", "precision", "+", "self", ".", "recall", ")", "\n", "", "if", "sum", "(", "self", ".", "n_frames", ")", "==", "0", ":", "\n", "            ", "self", ".", "FAR", "=", "\"n/a\"", "\n", "", "else", ":", "\n", "            ", "self", ".", "FAR", "=", "self", ".", "fp", "/", "float", "(", "sum", "(", "self", ".", "n_frames", ")", ")", "\n", "\n", "# compute CLEARMOT", "\n", "", "if", "self", ".", "n_gt", "==", "0", ":", "\n", "            ", "self", ".", "MOTA", "=", "-", "float", "(", "\"inf\"", ")", "\n", "self", ".", "MODA", "=", "-", "float", "(", "\"inf\"", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "MOTA", "=", "1", "-", "(", "self", ".", "fn", "+", "self", ".", "fp", "+", "self", ".", "id_switches", ")", "/", "float", "(", "self", ".", "n_gt", ")", "\n", "self", ".", "MODA", "=", "1", "-", "(", "self", ".", "fn", "+", "self", ".", "fp", ")", "/", "float", "(", "self", ".", "n_gt", ")", "\n", "", "if", "self", ".", "tp", "==", "0", ":", "\n", "            ", "self", ".", "MOTP", "=", "float", "(", "\"inf\"", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "MOTP", "=", "self", ".", "total_cost", "/", "float", "(", "self", ".", "tp", ")", "\n", "", "if", "self", ".", "n_gt", "!=", "0", ":", "\n", "            ", "if", "self", ".", "id_switches", "==", "0", ":", "\n", "                ", "self", ".", "MOTAL", "=", "1", "-", "(", "self", ".", "fn", "+", "self", ".", "fp", "+", "self", ".", "id_switches", ")", "/", "float", "(", "self", ".", "n_gt", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "MOTAL", "=", "1", "-", "(", "self", ".", "fn", "+", "self", ".", "fp", "+", "math", ".", "log10", "(", "self", ".", "id_switches", ")", ")", "/", "float", "(", "self", ".", "n_gt", ")", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "MOTAL", "=", "-", "float", "(", "\"inf\"", ")", "\n", "", "if", "sum", "(", "self", ".", "n_frames", ")", "==", "0", ":", "\n", "            ", "self", ".", "MODP", "=", "\"n/a\"", "\n", "", "else", ":", "\n", "            ", "self", ".", "MODP", "=", "sum", "(", "self", ".", "MODP_t", ")", "/", "float", "(", "sum", "(", "self", ".", "n_frames", ")", ")", "\n", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.kemo-huang_jmodt.tracking.kitti_evaluate.TrackingEvaluation.createSummary": [[807, 856], ["kitti_evaluate.TrackingEvaluation.printEntry", "kitti_evaluate.TrackingEvaluation.printEntry", "kitti_evaluate.TrackingEvaluation.printEntry", "kitti_evaluate.TrackingEvaluation.printEntry", "kitti_evaluate.TrackingEvaluation.printEntry", "kitti_evaluate.TrackingEvaluation.printEntry", "kitti_evaluate.TrackingEvaluation.printEntry", "kitti_evaluate.TrackingEvaluation.printEntry", "kitti_evaluate.TrackingEvaluation.printEntry", "kitti_evaluate.TrackingEvaluation.printEntry", "kitti_evaluate.TrackingEvaluation.printEntry", "kitti_evaluate.TrackingEvaluation.printEntry", "kitti_evaluate.TrackingEvaluation.printEntry", "kitti_evaluate.TrackingEvaluation.printEntry", "kitti_evaluate.TrackingEvaluation.printEntry", "kitti_evaluate.TrackingEvaluation.printEntry", "kitti_evaluate.TrackingEvaluation.printEntry", "kitti_evaluate.TrackingEvaluation.printEntry", "kitti_evaluate.TrackingEvaluation.printEntry", "kitti_evaluate.TrackingEvaluation.printEntry", "kitti_evaluate.TrackingEvaluation.printEntry", "kitti_evaluate.TrackingEvaluation.printEntry", "kitti_evaluate.TrackingEvaluation.printEntry", "kitti_evaluate.TrackingEvaluation.printEntry", "kitti_evaluate.TrackingEvaluation.printEntry", "kitti_evaluate.TrackingEvaluation.printEntry"], "methods", ["home.repos.pwc.inspect_result.kemo-huang_jmodt.tracking.kitti_evaluate.TrackingEvaluation.printEntry", "home.repos.pwc.inspect_result.kemo-huang_jmodt.tracking.kitti_evaluate.TrackingEvaluation.printEntry", "home.repos.pwc.inspect_result.kemo-huang_jmodt.tracking.kitti_evaluate.TrackingEvaluation.printEntry", "home.repos.pwc.inspect_result.kemo-huang_jmodt.tracking.kitti_evaluate.TrackingEvaluation.printEntry", "home.repos.pwc.inspect_result.kemo-huang_jmodt.tracking.kitti_evaluate.TrackingEvaluation.printEntry", "home.repos.pwc.inspect_result.kemo-huang_jmodt.tracking.kitti_evaluate.TrackingEvaluation.printEntry", "home.repos.pwc.inspect_result.kemo-huang_jmodt.tracking.kitti_evaluate.TrackingEvaluation.printEntry", "home.repos.pwc.inspect_result.kemo-huang_jmodt.tracking.kitti_evaluate.TrackingEvaluation.printEntry", "home.repos.pwc.inspect_result.kemo-huang_jmodt.tracking.kitti_evaluate.TrackingEvaluation.printEntry", "home.repos.pwc.inspect_result.kemo-huang_jmodt.tracking.kitti_evaluate.TrackingEvaluation.printEntry", "home.repos.pwc.inspect_result.kemo-huang_jmodt.tracking.kitti_evaluate.TrackingEvaluation.printEntry", "home.repos.pwc.inspect_result.kemo-huang_jmodt.tracking.kitti_evaluate.TrackingEvaluation.printEntry", "home.repos.pwc.inspect_result.kemo-huang_jmodt.tracking.kitti_evaluate.TrackingEvaluation.printEntry", "home.repos.pwc.inspect_result.kemo-huang_jmodt.tracking.kitti_evaluate.TrackingEvaluation.printEntry", "home.repos.pwc.inspect_result.kemo-huang_jmodt.tracking.kitti_evaluate.TrackingEvaluation.printEntry", "home.repos.pwc.inspect_result.kemo-huang_jmodt.tracking.kitti_evaluate.TrackingEvaluation.printEntry", "home.repos.pwc.inspect_result.kemo-huang_jmodt.tracking.kitti_evaluate.TrackingEvaluation.printEntry", "home.repos.pwc.inspect_result.kemo-huang_jmodt.tracking.kitti_evaluate.TrackingEvaluation.printEntry", "home.repos.pwc.inspect_result.kemo-huang_jmodt.tracking.kitti_evaluate.TrackingEvaluation.printEntry", "home.repos.pwc.inspect_result.kemo-huang_jmodt.tracking.kitti_evaluate.TrackingEvaluation.printEntry", "home.repos.pwc.inspect_result.kemo-huang_jmodt.tracking.kitti_evaluate.TrackingEvaluation.printEntry", "home.repos.pwc.inspect_result.kemo-huang_jmodt.tracking.kitti_evaluate.TrackingEvaluation.printEntry", "home.repos.pwc.inspect_result.kemo-huang_jmodt.tracking.kitti_evaluate.TrackingEvaluation.printEntry", "home.repos.pwc.inspect_result.kemo-huang_jmodt.tracking.kitti_evaluate.TrackingEvaluation.printEntry", "home.repos.pwc.inspect_result.kemo-huang_jmodt.tracking.kitti_evaluate.TrackingEvaluation.printEntry", "home.repos.pwc.inspect_result.kemo-huang_jmodt.tracking.kitti_evaluate.TrackingEvaluation.printEntry"], ["", "def", "createSummary", "(", "self", ")", ":", "\n", "        ", "summary", "=", "\"\"", "\n", "\n", "summary", "+=", "\"tracking evaluation summary\"", ".", "center", "(", "80", ",", "\"=\"", ")", "+", "\"\\n\"", "\n", "summary", "+=", "self", ".", "printEntry", "(", "\"Multiple Object Tracking Accuracy (MOTA)\"", ",", "self", ".", "MOTA", ")", "+", "\"\\n\"", "\n", "summary", "+=", "self", ".", "printEntry", "(", "\"Multiple Object Tracking Precision (MOTP)\"", ",", "self", ".", "MOTP", ")", "+", "\"\\n\"", "\n", "summary", "+=", "self", ".", "printEntry", "(", "\"Multiple Object Tracking Accuracy (MOTAL)\"", ",", "self", ".", "MOTAL", ")", "+", "\"\\n\"", "\n", "summary", "+=", "self", ".", "printEntry", "(", "\"Multiple Object Detection Accuracy (MODA)\"", ",", "self", ".", "MODA", ")", "+", "\"\\n\"", "\n", "summary", "+=", "self", ".", "printEntry", "(", "\"Multiple Object Detection Precision (MODP)\"", ",", "self", ".", "MODP", ")", "+", "\"\\n\"", "\n", "summary", "+=", "\"\\n\"", "\n", "summary", "+=", "self", ".", "printEntry", "(", "\"Recall\"", ",", "self", ".", "recall", ")", "+", "\"\\n\"", "\n", "summary", "+=", "self", ".", "printEntry", "(", "\"Precision\"", ",", "self", ".", "precision", ")", "+", "\"\\n\"", "\n", "summary", "+=", "self", ".", "printEntry", "(", "\"F1\"", ",", "self", ".", "F1", ")", "+", "\"\\n\"", "\n", "summary", "+=", "self", ".", "printEntry", "(", "\"False Alarm Rate\"", ",", "self", ".", "FAR", ")", "+", "\"\\n\"", "\n", "summary", "+=", "\"\\n\"", "\n", "summary", "+=", "self", ".", "printEntry", "(", "\"Mostly Tracked\"", ",", "self", ".", "MT", ")", "+", "\"\\n\"", "\n", "summary", "+=", "self", ".", "printEntry", "(", "\"Partly Tracked\"", ",", "self", ".", "PT", ")", "+", "\"\\n\"", "\n", "summary", "+=", "self", ".", "printEntry", "(", "\"Mostly Lost\"", ",", "self", ".", "ML", ")", "+", "\"\\n\"", "\n", "summary", "+=", "\"\\n\"", "\n", "summary", "+=", "self", ".", "printEntry", "(", "\"True Positives\"", ",", "self", ".", "tp", ")", "+", "\"\\n\"", "\n", "# summary += self.printEntry(\"True Positives per Sequence\", self.tps) + \"\\n\"", "\n", "summary", "+=", "self", ".", "printEntry", "(", "\"Ignored True Positives\"", ",", "self", ".", "itp", ")", "+", "\"\\n\"", "\n", "# summary += self.printEntry(\"Ignored True Positives per Sequence\", self.itps) + \"\\n\"", "\n", "summary", "+=", "self", ".", "printEntry", "(", "\"False Positives\"", ",", "self", ".", "fp", ")", "+", "\"\\n\"", "\n", "# summary += self.printEntry(\"False Positives per Sequence\", self.fps) + \"\\n\"", "\n", "summary", "+=", "self", ".", "printEntry", "(", "\"False Negatives\"", ",", "self", ".", "fn", ")", "+", "\"\\n\"", "\n", "# summary += self.printEntry(\"False Negatives per Sequence\", self.fns) + \"\\n\"", "\n", "summary", "+=", "self", ".", "printEntry", "(", "\"Ignored False Negatives\"", ",", "self", ".", "ifn", ")", "+", "\"\\n\"", "\n", "# summary += self.printEntry(\"Ignored False Negatives per Sequence\", self.ifns) + \"\\n\"", "\n", "summary", "+=", "self", ".", "printEntry", "(", "\"Missed Targets\"", ",", "self", ".", "fn", ")", "+", "\"\\n\"", "\n", "summary", "+=", "self", ".", "printEntry", "(", "\"ID-switches\"", ",", "self", ".", "id_switches", ")", "+", "\"\\n\"", "\n", "summary", "+=", "self", ".", "printEntry", "(", "\"Fragmentations\"", ",", "self", ".", "fragments", ")", "+", "\"\\n\"", "\n", "summary", "+=", "\"\\n\"", "\n", "summary", "+=", "self", ".", "printEntry", "(", "\"Ground Truth Objects (Total)\"", ",", "self", ".", "n_gt", "+", "self", ".", "n_igt", ")", "+", "\"\\n\"", "\n", "# summary += self.printEntry(\"Ground Truth Objects (Total) per Sequence\", self.n_gts) + \"\\n\"", "\n", "summary", "+=", "self", ".", "printEntry", "(", "\"Ignored Ground Truth Objects\"", ",", "self", ".", "n_igt", ")", "+", "\"\\n\"", "\n", "# summary += self.printEntry(\"Ignored Ground Truth Objects per Sequence\", self.n_igts) + \"\\n\"", "\n", "summary", "+=", "self", ".", "printEntry", "(", "\"Ground Truth Trajectories\"", ",", "self", ".", "n_gt_trajectories", ")", "+", "\"\\n\"", "\n", "summary", "+=", "\"\\n\"", "\n", "summary", "+=", "self", ".", "printEntry", "(", "\"Tracker Objects (Total)\"", ",", "self", ".", "n_tr", ")", "+", "\"\\n\"", "\n", "# summary += self.printEntry(\"Tracker Objects (Total) per Sequence\", self.n_trs) + \"\\n\"", "\n", "summary", "+=", "self", ".", "printEntry", "(", "\"Ignored Tracker Objects\"", ",", "self", ".", "n_itr", ")", "+", "\"\\n\"", "\n", "# summary += self.printEntry(\"Ignored Tracker Objects per Sequence\", self.n_itrs) + \"\\n\"", "\n", "summary", "+=", "self", ".", "printEntry", "(", "\"Tracker Trajectories\"", ",", "self", ".", "n_tr_trajectories", ")", "+", "\"\\n\"", "\n", "# summary += \"\\n\"", "\n", "# summary += self.printEntry(\"Ignored Tracker Objects with Associated Ignored Ground Truth Objects\", self.n_igttr) + \"\\n\"", "\n", "summary", "+=", "\"=\"", "*", "80", "\n", "\n", "return", "summary", "\n", "\n"]], "home.repos.pwc.inspect_result.kemo-huang_jmodt.tracking.kitti_evaluate.TrackingEvaluation.printEntry": [[857, 872], ["key.ljust", "type", "type"], "methods", ["None"], ["", "def", "printEntry", "(", "self", ",", "key", ",", "val", ",", "width", "=", "(", "70", ",", "10", ")", ")", ":", "\n", "        ", "\"\"\"\n            Pretty print an entry in a table fashion.\n        \"\"\"", "\n", "\n", "s_out", "=", "key", ".", "ljust", "(", "width", "[", "0", "]", ")", "\n", "if", "type", "(", "val", ")", "==", "int", ":", "\n", "            ", "s", "=", "\"%%%dd\"", "%", "width", "[", "1", "]", "\n", "s_out", "+=", "s", "%", "val", "\n", "", "elif", "type", "(", "val", ")", "==", "float", ":", "\n", "            ", "s", "=", "\"%%%df\"", "%", "(", "width", "[", "1", "]", ")", "\n", "s_out", "+=", "s", "%", "val", "\n", "", "else", ":", "\n", "            ", "s_out", "+=", "(", "\"%s\"", "%", "val", ")", ".", "rjust", "(", "width", "[", "1", "]", ")", "\n", "", "return", "s_out", "\n", "\n"]], "home.repos.pwc.inspect_result.kemo-huang_jmodt.tracking.kitti_evaluate.TrackingEvaluation.saveToStats": [[873, 908], ["kitti_evaluate.TrackingEvaluation.createSummary", "logger.info", "os.path.join", "open", "print", "open.close", "os.path.join", "open", "print", "open.close", "os.path.join", "open", "print", "print", "print", "open.close"], "methods", ["home.repos.pwc.inspect_result.kemo-huang_jmodt.tracking.kitti_evaluate.TrackingEvaluation.createSummary"], ["", "def", "saveToStats", "(", "self", ",", "logger", ")", ":", "\n", "        ", "\"\"\"\n            Save the statistics in a whitespace separate file.\n        \"\"\"", "\n", "\n", "# create pretty summary", "\n", "summary", "=", "self", ".", "createSummary", "(", ")", "\n", "\n", "# mail or print the summary.", "\n", "logger", ".", "info", "(", "summary", ")", "\n", "\n", "# write summary to file summary_cls.txt", "\n", "filename", "=", "os", ".", "path", ".", "join", "(", "self", ".", "eval_dir", ",", "\"summary_%s.txt\"", "%", "self", ".", "cls", ")", "\n", "dump", "=", "open", "(", "filename", ",", "\"w+\"", ")", "\n", "print", "(", "summary", ",", "file", "=", "dump", ")", "\n", "dump", ".", "close", "(", ")", "\n", "\n", "# dump all the statistics to the corresponding stats_cls.txt file", "\n", "filename", "=", "os", ".", "path", ".", "join", "(", "self", ".", "eval_dir", ",", "\"stats_%s.txt\"", "%", "self", ".", "cls", ")", "\n", "dump", "=", "open", "(", "filename", ",", "\"w+\"", ")", "\n", "print", "(", "\"%.6f \"", "*", "21", "\n", "%", "(", "self", ".", "MOTA", ",", "self", ".", "MOTP", ",", "self", ".", "MOTAL", ",", "self", ".", "MODA", ",", "self", ".", "MODP", ",", "\n", "self", ".", "recall", ",", "self", ".", "precision", ",", "self", ".", "F1", ",", "self", ".", "FAR", ",", "\n", "self", ".", "MT", ",", "self", ".", "PT", ",", "self", ".", "ML", ",", "self", ".", "tp", ",", "self", ".", "fp", ",", "self", ".", "fn", ",", "self", ".", "id_switches", ",", "self", ".", "fragments", ",", "\n", "self", ".", "n_gt", ",", "self", ".", "n_gt_trajectories", ",", "self", ".", "n_tr", ",", "self", ".", "n_tr_trajectories", ")", ",", "file", "=", "dump", ")", "\n", "dump", ".", "close", "(", ")", "\n", "\n", "# write description of statistics to description.txt", "\n", "filename", "=", "os", ".", "path", ".", "join", "(", "self", ".", "eval_dir", ",", "\"description.txt\"", ")", "\n", "dump", "=", "open", "(", "filename", ",", "\"w+\"", ")", "\n", "print", "(", "\"MOTA\"", ",", "\"MOTP\"", ",", "\"MOTAL\"", ",", "\"MODA\"", ",", "\"MODP\"", ",", "\"recall\"", ",", "\"precision\"", ",", "\"F1\"", ",", "\"FAR\"", ",", "file", "=", "dump", ")", "\n", "print", "(", "\"MT\"", ",", "\"PT\"", ",", "\"ML\"", ",", "\"tp\"", ",", "\"fp\"", ",", "\"fn\"", ",", "\"id_switches\"", ",", "\"fragments\"", ",", "file", "=", "dump", ")", "\n", "print", "(", "\"n_gt\"", ",", "\"n_gt_trajectories\"", ",", "\"n_tr\"", ",", "\"n_tr_trajectories\"", ",", "file", "=", "dump", ")", "\n", "dump", ".", "close", "(", ")", "\n", "return", "self", ".", "MOTA", ",", "self", ".", "MOTP", ",", "self", ".", "recall", ",", "self", ".", "precision", ",", "self", ".", "F1", ",", "self", ".", "fp", ",", "self", ".", "fn", ",", "self", ".", "id_switches", "\n", "\n"]], "home.repos.pwc.inspect_result.kemo-huang_jmodt.tracking.kitti_evaluate.evaluate": [[910, 960], ["logger.info", "logger.info", "kitti_evaluate.TrackingEvaluation", "logger.info", "logger.info", "logger.info", "kitti_evaluate.TrackingEvaluation.compute3rdPartyMetrics", "len", "logger.info", "logger.info", "logger.info", "classes.append", "kitti_evaluate.TrackingEvaluation.loadGroundtruth", "ValueError", "len", "len", "logger.info", "kitti_evaluate.TrackingEvaluation.createEvalDir", "kitti_evaluate.TrackingEvaluation.saveToStats", "logger.info", "kitti_evaluate.TrackingEvaluation.loadTracker", "logger.info", "logger.info", "len", "logger.info", "logger.info", "c.upper"], "function", ["home.repos.pwc.inspect_result.kemo-huang_jmodt.tracking.kitti_evaluate.TrackingEvaluation.compute3rdPartyMetrics", "home.repos.pwc.inspect_result.kemo-huang_jmodt.tracking.kitti_evaluate.TrackingEvaluation.loadGroundtruth", "home.repos.pwc.inspect_result.kemo-huang_jmodt.tracking.kitti_evaluate.TrackingEvaluation.createEvalDir", "home.repos.pwc.inspect_result.kemo-huang_jmodt.tracking.kitti_evaluate.TrackingEvaluation.saveToStats", "home.repos.pwc.inspect_result.kemo-huang_jmodt.tracking.kitti_evaluate.TrackingEvaluation.loadTracker"], ["", "", "def", "evaluate", "(", "result_sha", ",", "result_root", ",", "part", ",", "gt_path", ",", "logger", ")", ":", "\n", "    ", "\"\"\"\n        Entry point for evaluation, will load the data and start evaluation for\n        CAR and PEDESTRIAN if available.\n    \"\"\"", "\n", "\n", "# start evaluation and instanciated eval object", "\n", "logger", ".", "info", "(", "\"Processing Result for KITTI Tracking Benchmark\"", ")", "\n", "classes", "=", "[", "]", "\n", "for", "c", "in", "(", "\"car\"", ",", "\"pedestrian\"", ")", ":", "\n", "        ", "e", "=", "TrackingEvaluation", "(", "t_sha", "=", "result_sha", ",", "result_root", "=", "result_root", ",", "part", "=", "part", ",", "cls", "=", "c", ",", "gt_path", "=", "gt_path", ")", "\n", "# load tracker data and check provided classes", "\n", "try", ":", "\n", "            ", "if", "not", "e", ".", "loadTracker", "(", "logger", ")", ":", "\n", "                ", "continue", "\n", "", "logger", ".", "info", "(", "\"Loading Results - Success\"", ")", "\n", "logger", ".", "info", "(", "\"Evaluate Object Class: %s\"", "%", "c", ".", "upper", "(", ")", ")", "\n", "classes", ".", "append", "(", "c", ")", "\n", "", "except", ":", "\n", "            ", "logger", ".", "info", "(", "\"Feel free to contact us (lenz@kit.edu), if you receive this error message:\"", ")", "\n", "logger", ".", "info", "(", "\"   Caught exception while loading result data.\"", ")", "\n", "break", "\n", "# load groundtruth data for this class", "\n", "", "if", "not", "e", ".", "loadGroundtruth", "(", "logger", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\"Ground truth not found.\"", ")", "\n", "", "logger", ".", "info", "(", "\"Loading Groundtruth - Success\"", ")", "\n", "# sanity checks", "\n", "if", "len", "(", "e", ".", "groundtruth", ")", "is", "not", "len", "(", "e", ".", "tracker", ")", ":", "\n", "            ", "logger", ".", "info", "(", "\"The uploaded data does not provide results for every sequence.\"", ")", "\n", "return", "False", "\n", "", "logger", ".", "info", "(", "\"Loaded %d Sequences.\"", "%", "len", "(", "e", ".", "groundtruth", ")", ")", "\n", "logger", ".", "info", "(", "\"Start Evaluation...\"", ")", "\n", "# create needed directories, evaluate and save stats", "\n", "try", ":", "\n", "            ", "e", ".", "createEvalDir", "(", "logger", "=", "logger", ")", "\n", "", "except", ":", "\n", "            ", "logger", ".", "info", "(", "\"Feel free to contact us (lenz@kit.edu), if you receive this error message:\"", ")", "\n", "logger", ".", "info", "(", "\"   Caught exception while creating results.\"", ")", "\n", "", "if", "e", ".", "compute3rdPartyMetrics", "(", "logger", ")", ":", "\n", "            ", "MOTA", ",", "MOTP", ",", "recall", ",", "prec", ",", "F1", ",", "fp", ",", "fn", ",", "id_switches", "=", "e", ".", "saveToStats", "(", "logger", ")", "\n", "return", "MOTA", "\n", "", "else", ":", "\n", "            ", "logger", ".", "info", "(", "\"There seem to be no true positives or false positives at all in the submitted data.\"", ")", "\n", "\n", "# finish", "\n", "", "", "if", "len", "(", "classes", ")", "==", "0", ":", "\n", "        ", "logger", ".", "info", "(", "\"The uploaded results could not be evaluated. Check for format errors.\"", ")", "\n", "return", "False", "\n", "", "logger", ".", "info", "(", "\"Thank you for participating in our benchmark!\"", ")", "\n", "return", "True", "\n", "", ""]], "home.repos.pwc.inspect_result.kemo-huang_jmodt.tracking.tracker.Tracker.__init__": [[9, 25], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "link_model", ",", "se_model", ",", "t_miss", ",", "t_hit", ",", "\n", "w_cls", ",", "w_app", ",", "w_iou", ",", "w_dis", ",", "w_se", ",", "hungarian", "=", "False", ")", ":", "\n", "        ", "self", ".", "link_model", "=", "link_model", "\n", "self", ".", "se_model", "=", "se_model", "\n", "self", ".", "t_miss", "=", "t_miss", "\n", "self", ".", "t_hit", "=", "t_hit", "\n", "self", ".", "w_cls", "=", "w_cls", "\n", "self", ".", "w_app", "=", "w_app", "\n", "self", ".", "w_iou", "=", "w_iou", "\n", "self", ".", "w_dis", "=", "w_dis", "\n", "self", ".", "w_se", "=", "w_se", "\n", "self", ".", "hungarian", "=", "hungarian", "\n", "\n", "self", ".", "tracks", "=", "[", "]", "\n", "self", ".", "frame_count", "=", "0", "\n", "self", ".", "last_frame_idx", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.kemo-huang_jmodt.tracking.tracker.Tracker.reset": [[26, 31], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "tracks", "=", "[", "]", "\n", "self", ".", "frame_count", "=", "0", "\n", "self", ".", "last_frame_idx", "=", "0", "\n", "Track", ".", "new_id", "=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.kemo-huang_jmodt.tracking.tracker.Tracker.track_management": [[32, 44], ["len", "reversed", "tracker.Tracker.tracks.pop", "results.append", "trk.get_data"], "methods", ["home.repos.pwc.inspect_result.kemo-huang_jmodt.tracking.track.Track.get_data"], ["", "def", "track_management", "(", "self", ")", ":", "\n", "        ", "idx", "=", "len", "(", "self", ".", "tracks", ")", "\n", "results", "=", "[", "]", "\n", "for", "trk", "in", "reversed", "(", "self", ".", "tracks", ")", ":", "\n", "            ", "if", "trk", ".", "hits", ">=", "self", ".", "t_hit", "or", "self", ".", "frame_count", "<=", "self", ".", "t_hit", ":", "\n", "                ", "if", "trk", ".", "misses", "==", "0", ":", "\n", "                    ", "results", ".", "append", "(", "trk", ".", "get_data", "(", ")", ")", "\n", "", "", "idx", "-=", "1", "\n", "# remove dead tracks", "\n", "if", "trk", ".", "misses", ">=", "self", ".", "t_miss", ":", "\n", "                ", "self", ".", "tracks", ".", "pop", "(", "idx", ")", "\n", "", "", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.kemo-huang_jmodt.tracking.tracker.Tracker.update": [[45, 139], ["len", "len", "numpy.vstack", "numpy.array", "torch.cat", "torch.abs", "tracker.Tracker.link_model().view", "torch.softmax", "torch.softmax", "tracker.Tracker.track_management", "range", "tracker.Tracker.track_management", "jmodt.tracking.track.Track.predict", "numpy.vstack.append", "numpy.array.append", "torch.cat.append", "jmodt.tracking.data_association.hungarian_match", "numpy.concatenate", "numpy.concatenate", "jmodt.tracking.data_association.ortools_solve", "tracker.Tracker.tracks[].update_with_feature", "jmodt.tracking.track.Track", "tracker.Tracker.tracks.append", "jmodt.tracking.track.Track", "tracker.Tracker.tracks.append", "tracker.Tracker.tracks.append", "feature.view", "torch.cat.unsqueeze().repeat", "det_features.unsqueeze().repeat", "tracker.Tracker.link_model", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.sigmoid().cpu().numpy().flatten", "torch.sigmoid().cpu().numpy().flatten", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "jmodt.tracking.track.Track", "torch.abs.view", "numpy.concatenate", "numpy.zeros", "numpy.zeros", "torch.cat.unsqueeze", "det_features.unsqueeze", "torch.from_numpy", "torch.from_numpy", "torch.sigmoid().cpu().numpy", "torch.sigmoid().cpu().numpy", "torch.from_numpy", "torch.from_numpy", "torch.sigmoid().cpu", "torch.sigmoid().cpu", "torch.sigmoid", "torch.sigmoid", "tracker.Tracker.se_model", "tracker.Tracker.se_model", "torch.abs.mean().unsqueeze", "torch.abs.mean().unsqueeze", "torch.abs.mean", "torch.abs.mean"], "methods", ["home.repos.pwc.inspect_result.kemo-huang_jmodt.tracking.tracker.Tracker.track_management", "home.repos.pwc.inspect_result.kemo-huang_jmodt.tracking.tracker.Tracker.track_management", "home.repos.pwc.inspect_result.kemo-huang_jmodt.tracking.kalman.KalmanPSR.predict", "home.repos.pwc.inspect_result.kemo-huang_jmodt.tracking.data_association.hungarian_match", "home.repos.pwc.inspect_result.kemo-huang_jmodt.tracking.data_association.ortools_solve", "home.repos.pwc.inspect_result.kemo-huang_jmodt.tracking.track.Track.update_with_feature"], ["", "def", "update", "(", "self", ",", "frame_id", ",", "boxes_3d", ",", "det_scores", ",", "det_features", ",", "frame_detections", ")", ":", "\n", "        ", "num_det", "=", "len", "(", "det_scores", ")", "\n", "num_pred", "=", "len", "(", "self", ".", "tracks", ")", "\n", "\n", "if", "num_det", "==", "0", ":", "\n", "            ", "return", "[", "]", "\n", "\n", "", "passed_frames", "=", "frame_id", "-", "self", ".", "last_frame_idx", "\n", "self", ".", "frame_count", "+=", "passed_frames", "\n", "self", ".", "last_frame_idx", "=", "frame_id", "\n", "\n", "# for the first frame", "\n", "if", "num_pred", "==", "0", ":", "\n", "# add in tracks", "\n", "            ", "for", "d", "in", "range", "(", "num_det", ")", ":", "\n", "                ", "self", ".", "tracks", ".", "append", "(", "Track", "(", "bbox", "=", "boxes_3d", "[", "d", "]", ",", "score", "=", "det_scores", "[", "d", "]", ",", "feature", "=", "det_features", "[", "d", "]", ",", "\n", "info", "=", "frame_detections", "[", "d", "]", ")", ")", "\n", "", "return", "self", ".", "track_management", "(", ")", "\n", "\n", "# get predictions of the current frame.", "\n", "", "pred_boxes", "=", "[", "]", "\n", "pred_scores", "=", "[", "]", "\n", "pred_features", "=", "[", "]", "\n", "for", "trk", "in", "self", ".", "tracks", ":", "\n", "            ", "box", ",", "score", ",", "feature", "=", "trk", ".", "predict", "(", "passed_frames", ")", "\n", "pred_boxes", ".", "append", "(", "box", ")", "\n", "pred_scores", ".", "append", "(", "score", ")", "\n", "pred_features", ".", "append", "(", "feature", ".", "view", "(", "1", ",", "-", "1", ")", ")", "\n", "\n", "", "pred_boxes", "=", "np", ".", "vstack", "(", "pred_boxes", ")", "\n", "pred_scores", "=", "np", ".", "array", "(", "pred_scores", ")", "\n", "pred_features", "=", "torch", ".", "cat", "(", "pred_features", ")", "\n", "\n", "cor_feat", "=", "torch", ".", "abs", "(", "\n", "pred_features", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "1", ",", "num_det", ",", "1", ")", "\n", "-", "det_features", ".", "unsqueeze", "(", "0", ")", ".", "repeat", "(", "num_pred", ",", "1", ",", "1", ")", "\n", ")", "\n", "\n", "link_scores", "=", "self", ".", "link_model", "(", "cor_feat", ".", "view", "(", "num_pred", "*", "num_det", ",", "-", "1", ",", "1", ")", ")", ".", "view", "(", "num_pred", ",", "num_det", ")", "\n", "link_score_pred", "=", "torch", ".", "softmax", "(", "link_scores", ",", "dim", "=", "1", ")", "\n", "link_score_det", "=", "torch", ".", "softmax", "(", "link_scores", ",", "dim", "=", "0", ")", "\n", "link_scores", "=", "(", "link_score_pred", "+", "link_score_det", ")", "/", "2", "\n", "\n", "if", "self", ".", "hungarian", ":", "\n", "            ", "matched", ",", "unmatched_dets", ",", "tentative_dets", "=", "hungarian_match", "(", "\n", "torch", ".", "from_numpy", "(", "boxes_3d", ")", ".", "cuda", "(", "non_blocking", "=", "True", ")", ",", "\n", "torch", ".", "from_numpy", "(", "pred_boxes", ")", ".", "cuda", "(", "non_blocking", "=", "True", ")", ",", "\n", "det_scores", ",", "\n", "link_scores", ",", "\n", "w_app", "=", "self", ".", "w_app", ",", "\n", "w_iou", "=", "self", ".", "w_iou", ",", "\n", "score_threshold", "=", "0", "\n", ")", "\n", "", "else", ":", "\n", "            ", "cls_scores", "=", "self", ".", "w_cls", "*", "(", "np", ".", "concatenate", "(", "[", "pred_scores", ",", "det_scores", "]", ")", "-", "1", ")", "\n", "start_scores", "=", "self", ".", "w_se", "*", "torch", ".", "sigmoid", "(", "\n", "self", ".", "se_model", "(", "cor_feat", ".", "mean", "(", "dim", "=", "0", ")", ".", "unsqueeze", "(", "-", "1", ")", ")", "\n", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "flatten", "(", ")", "\n", "end_scores", "=", "self", ".", "w_se", "*", "torch", ".", "sigmoid", "(", "\n", "self", ".", "se_model", "(", "cor_feat", ".", "mean", "(", "dim", "=", "1", ")", ".", "unsqueeze", "(", "-", "1", ")", ")", "\n", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "flatten", "(", ")", "\n", "start_scores", "=", "np", ".", "concatenate", "(", "[", "np", ".", "zeros", "(", "num_pred", ")", ",", "start_scores", "]", ")", "\n", "end_scores", "=", "np", ".", "concatenate", "(", "[", "end_scores", ",", "np", ".", "zeros", "(", "num_det", ")", "]", ")", "\n", "\n", "matched", ",", "unmatched_dets", ",", "tentative_dets", "=", "ortools_solve", "(", "\n", "torch", ".", "from_numpy", "(", "boxes_3d", ")", ".", "cuda", "(", "non_blocking", "=", "True", ")", ",", "\n", "torch", ".", "from_numpy", "(", "pred_boxes", ")", ".", "cuda", "(", "non_blocking", "=", "True", ")", ",", "\n", "cls_scores", ",", "\n", "link_scores", ",", "\n", "start_scores", ",", "\n", "end_scores", ",", "\n", "w_app", "=", "self", ".", "w_app", ",", "\n", "w_iou", "=", "self", ".", "w_iou", ",", "\n", "w_dis", "=", "self", ".", "w_dis", "\n", ")", "\n", "# update matched tracks", "\n", "", "for", "t", ",", "d", "in", "matched", ":", "\n", "            ", "self", ".", "tracks", "[", "t", "]", ".", "update_with_feature", "(", "boxes_3d", "[", "d", "]", ",", "\n", "det_features", "[", "d", "]", ",", "\n", "det_scores", "[", "d", "]", ",", "\n", "info", "=", "frame_detections", "[", "d", "]", ")", "\n", "# init new tracks for unmatched detections", "\n", "", "for", "i", "in", "unmatched_dets", ":", "\n", "            ", "trk", "=", "Track", "(", "bbox", "=", "boxes_3d", "[", "i", "]", ",", "feature", "=", "det_features", "[", "i", "]", ",", "\n", "score", "=", "det_scores", "[", "i", "]", ",", "info", "=", "frame_detections", "[", "i", "]", ")", "\n", "self", ".", "tracks", ".", "append", "(", "trk", ")", "\n", "\n", "", "for", "i", "in", "tentative_dets", ":", "\n", "# print('tentative')", "\n", "            ", "trk", "=", "Track", "(", "bbox", "=", "boxes_3d", "[", "i", "]", ",", "feature", "=", "det_features", "[", "i", "]", ",", "\n", "score", "=", "det_scores", "[", "i", "]", ",", "info", "=", "frame_detections", "[", "i", "]", ")", "\n", "trk", ".", "misses", "+=", "1", "\n", "self", ".", "tracks", ".", "append", "(", "trk", ")", "\n", "", "return", "self", ".", "track_management", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.kemo-huang_jmodt.tracking.track.Track.__init__": [[7, 16], ["jmodt.tracking.kalman.Kalman"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "bbox", ",", "score", ",", "info", ",", "feature", ")", ":", "\n", "        ", "self", ".", "id", "=", "Track", ".", "new_id", "\n", "Track", ".", "new_id", "+=", "1", "\n", "self", ".", "motion_model", "=", "Kalman", "(", "bbox", ")", "\n", "self", ".", "score", "=", "score", "\n", "self", ".", "info", "=", "info", "\n", "self", ".", "feature", "=", "feature", "\n", "self", ".", "misses", "=", "0", "\n", "self", ".", "hits", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.kemo-huang_jmodt.tracking.track.Track.predict": [[17, 21], ["track.Track.motion_model.predict().flatten", "track.Track.motion_model.predict"], "methods", ["home.repos.pwc.inspect_result.kemo-huang_jmodt.tracking.kalman.KalmanPSR.predict"], ["", "def", "predict", "(", "self", ",", "t", "=", "1", ")", ":", "\n", "        ", "self", ".", "misses", "+=", "t", "\n", "state", "=", "(", "self", ".", "motion_model", ".", "predict", "(", "t", ")", ".", "flatten", "(", ")", ",", "self", ".", "score", ",", "self", ".", "feature", ")", "\n", "return", "state", "\n", "\n"]], "home.repos.pwc.inspect_result.kemo-huang_jmodt.tracking.track.Track._update_state": [[22, 25], ["None"], "methods", ["None"], ["", "def", "_update_state", "(", "self", ")", ":", "\n", "        ", "self", ".", "misses", "=", "0", "\n", "self", ".", "hits", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.kemo-huang_jmodt.tracking.track.Track._update_motion": [[26, 28], ["track.Track.motion_model.update"], "methods", ["home.repos.pwc.inspect_result.kemo-huang_jmodt.tracking.kalman.KalmanPSR.update"], ["", "def", "_update_motion", "(", "self", ",", "bbox_3d", ")", ":", "\n", "        ", "self", ".", "motion_model", ".", "update", "(", "bbox_3d", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kemo-huang_jmodt.tracking.track.Track._update_feature": [[29, 31], ["None"], "methods", ["None"], ["", "def", "_update_feature", "(", "self", ",", "feature", ")", ":", "\n", "        ", "self", ".", "feature", "=", "feature", "\n", "\n"]], "home.repos.pwc.inspect_result.kemo-huang_jmodt.tracking.track.Track._update_score": [[32, 34], ["None"], "methods", ["None"], ["", "def", "_update_score", "(", "self", ",", "score", ")", ":", "\n", "        ", "self", ".", "score", "=", "score", "\n", "\n"]], "home.repos.pwc.inspect_result.kemo-huang_jmodt.tracking.track.Track._update_info": [[35, 37], ["None"], "methods", ["None"], ["", "def", "_update_info", "(", "self", ",", "info", ")", ":", "\n", "        ", "self", ".", "info", "=", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.kemo-huang_jmodt.tracking.track.Track.update_with_feature": [[38, 44], ["track.Track._update_state", "track.Track._update_motion", "track.Track._update_info", "track.Track._update_feature", "track.Track._update_score"], "methods", ["home.repos.pwc.inspect_result.kemo-huang_jmodt.tracking.track.Track._update_state", "home.repos.pwc.inspect_result.kemo-huang_jmodt.tracking.track.Track._update_motion", "home.repos.pwc.inspect_result.kemo-huang_jmodt.tracking.track.Track._update_info", "home.repos.pwc.inspect_result.kemo-huang_jmodt.tracking.track.Track._update_feature", "home.repos.pwc.inspect_result.kemo-huang_jmodt.tracking.track.Track._update_score"], ["", "def", "update_with_feature", "(", "self", ",", "box", ",", "feature", ",", "score", ",", "info", ")", ":", "\n", "        ", "self", ".", "_update_state", "(", ")", "\n", "self", ".", "_update_motion", "(", "box", ")", "\n", "self", ".", "_update_info", "(", "info", ")", "\n", "self", ".", "_update_feature", "(", "feature", ")", "\n", "self", ".", "_update_score", "(", "score", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kemo-huang_jmodt.tracking.track.Track.update_feature_score": [[45, 48], ["track.Track._update_feature", "track.Track._update_score"], "methods", ["home.repos.pwc.inspect_result.kemo-huang_jmodt.tracking.track.Track._update_feature", "home.repos.pwc.inspect_result.kemo-huang_jmodt.tracking.track.Track._update_score"], ["", "def", "update_feature_score", "(", "self", ",", "feature", ",", "score", ")", ":", "\n", "        ", "self", ".", "_update_feature", "(", "feature", ")", "\n", "self", ".", "_update_score", "(", "score", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kemo-huang_jmodt.tracking.track.Track.get_data": [[49, 51], ["None"], "methods", ["None"], ["", "def", "get_data", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "id", ",", "self", ".", "info", ",", "self", ".", "score", "\n", "\n"]], "home.repos.pwc.inspect_result.kemo-huang_jmodt.tracking.track.Track.get_predicted_data": [[52, 54], ["track.Track.motion_model.get_predicted_box"], "methods", ["home.repos.pwc.inspect_result.kemo-huang_jmodt.tracking.kalman.KalmanPSR.get_predicted_box"], ["", "def", "get_predicted_data", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "id", ",", "self", ".", "motion_model", ".", "get_predicted_box", "(", ")", ",", "self", ".", "info", ",", "self", ".", "score", "\n", "", "", ""]], "home.repos.pwc.inspect_result.kemo-huang_jmodt.tracking.data_association.boxes_dist_gpu": [[10, 29], ["len", "len", "jmodt.utils.kitti_utils.boxes3d_to_corners3d_torch", "jmodt.utils.kitti_utils.boxes3d_to_corners3d_torch", "torch.linalg.norm", "torch.max", "torch.linalg.norm().view", "boxes_a[].unsqueeze().repeat", "boxes_b[].unsqueeze().repeat", "torch.linalg.norm", "boxes_a[].unsqueeze", "boxes_b[].unsqueeze", "kitti_utils.boxes3d_to_corners3d_torch.view().repeat", "kitti_utils.boxes3d_to_corners3d_torch.view().repeat", "kitti_utils.boxes3d_to_corners3d_torch.view", "kitti_utils.boxes3d_to_corners3d_torch.view"], "function", ["home.repos.pwc.inspect_result.kemo-huang_jmodt.utils.kitti_utils.boxes3d_to_corners3d_torch", "home.repos.pwc.inspect_result.kemo-huang_jmodt.utils.kitti_utils.boxes3d_to_corners3d_torch"], ["def", "boxes_dist_gpu", "(", "boxes_a", ",", "boxes_b", ")", ":", "\n", "    ", "\"\"\"\n    :param boxes_a: (M, 7) [x, y, z, h, w, l, ry]\n    :param boxes_b: (N, 7) [x, y, z, h, w, l, ry]\n    :return:\n        distance: (M, N)\n    \"\"\"", "\n", "m", "=", "len", "(", "boxes_a", ")", "\n", "n", "=", "len", "(", "boxes_b", ")", "\n", "boxes_a_corners", "=", "kitti_utils", ".", "boxes3d_to_corners3d_torch", "(", "boxes_a", ")", "\n", "boxes_b_corners", "=", "kitti_utils", ".", "boxes3d_to_corners3d_torch", "(", "boxes_b", ")", "\n", "center_distance", "=", "torch", ".", "linalg", ".", "norm", "(", "\n", "boxes_a", "[", ":", ",", ":", "3", "]", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "1", ",", "n", ",", "1", ")", "-", "boxes_b", "[", ":", ",", ":", "3", "]", ".", "unsqueeze", "(", "0", ")", ".", "repeat", "(", "m", ",", "1", ",", "1", ")", ",", "\n", "ord", "=", "2", ",", "dim", "=", "-", "1", ")", "\n", "corner_distance", ",", "_", "=", "torch", ".", "max", "(", "torch", ".", "linalg", ".", "norm", "(", "\n", "boxes_a_corners", ".", "view", "(", "m", ",", "1", ",", "8", ",", "1", ",", "3", ")", ".", "repeat", "(", "1", ",", "n", ",", "1", ",", "8", ",", "1", ")", "\n", "-", "boxes_b_corners", ".", "view", "(", "1", ",", "n", ",", "1", ",", "8", ",", "3", ")", ".", "repeat", "(", "m", ",", "1", ",", "8", ",", "1", ",", "1", ")", ",", "\n", "ord", "=", "2", ",", "dim", "=", "-", "1", ")", ".", "view", "(", "m", ",", "n", ",", "64", ")", ",", "dim", "=", "-", "1", ")", "\n", "return", "1.", "-", "center_distance", "/", "corner_distance", "\n", "\n"]], "home.repos.pwc.inspect_result.kemo-huang_jmodt.tracking.data_association.ortools_solve": [[31, 105], ["len", "len", "jmodt.ops.iou3d.iou3d_utils.boxes_iou3d_gpu", "data_association.boxes_dist_gpu", "link_matrix.cpu().numpy.cpu().numpy", "ortools.linear_solver.pywraplp.Solver", "range", "range", "pywraplp.Solver.Maximize", "range", "range", "pywraplp.Solver.Solve", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "range", "range", "torch.nonzero().tolist", "torch.flatten().tolist", "torch.flatten().tolist", "len", "pywraplp.Solver.BoolVar", "pywraplp.Solver.BoolVar", "pywraplp.Solver.BoolVar", "range", "pywraplp.Solver.Sum", "pywraplp.Solver.Add", "pywraplp.Solver.Add", "len", "len", "len", "range", "len", "y_det[].solution_value", "y_new[].solution_value", "y_end[].solution_value", "link_matrix.cpu().numpy.cpu", "pywraplp.Solver.BoolVar", "w_link_y.append", "range", "range", "range", "[].solution_value", "torch.nonzero", "torch.flatten", "torch.flatten", "len", "len", "len", "pywraplp.Solver.Sum", "pywraplp.Solver.Sum", "torch.nonzero", "torch.nonzero", "range", "range"], "function", ["home.repos.pwc.inspect_result.kemo-huang_jmodt.iou3d.iou3d_utils.boxes_iou3d_gpu", "home.repos.pwc.inspect_result.kemo-huang_jmodt.tracking.data_association.boxes_dist_gpu"], ["", "def", "ortools_solve", "(", "det_boxes", ",", "\n", "pred_boxes", ",", "\n", "cls_score", ",", "\n", "link_score", ",", "\n", "new_score", ",", "\n", "end_score", ",", "\n", "w_app", ",", "\n", "w_iou", ",", "\n", "w_dis", ")", ":", "\n", "    ", "num_det", "=", "len", "(", "det_boxes", ")", "\n", "num_pred", "=", "len", "(", "pred_boxes", ")", "\n", "iou_matrix", "=", "boxes_iou3d_gpu", "(", "pred_boxes", ",", "det_boxes", ")", "\n", "dis_matrix", "=", "boxes_dist_gpu", "(", "pred_boxes", ",", "det_boxes", ")", "\n", "link_matrix", "=", "link_score", "*", "w_app", "+", "iou_matrix", "*", "w_iou", "+", "dis_matrix", "*", "w_dis", "\n", "link_matrix", "=", "link_matrix", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "solver", "=", "pywraplp", ".", "Solver", "(", "'SolveAssignmentProblemMIP'", ",", "\n", "pywraplp", ".", "Solver", ".", "CBC_MIXED_INTEGER_PROGRAMMING", ")", "\n", "y_det", "=", "{", "}", "\n", "y_new", "=", "{", "}", "\n", "y_end", "=", "{", "}", "\n", "y_link", "=", "{", "}", "\n", "for", "i", "in", "range", "(", "len", "(", "cls_score", ")", ")", ":", "\n", "        ", "y_det", "[", "i", "]", "=", "solver", ".", "BoolVar", "(", "'y_det[%i]'", "%", "i", ")", "\n", "y_new", "[", "i", "]", "=", "solver", ".", "BoolVar", "(", "'y_new[%i]'", "%", "i", ")", "\n", "y_end", "[", "i", "]", "=", "solver", ".", "BoolVar", "(", "'y_end[%i]'", "%", "i", ")", "\n", "", "w_link_y", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "num_pred", ")", ":", "\n", "        ", "y_link", "[", "j", "]", "=", "{", "}", "\n", "for", "k", "in", "range", "(", "num_det", ")", ":", "\n", "            ", "y_link", "[", "j", "]", "[", "k", "]", "=", "solver", ".", "BoolVar", "(", "f'y_link[{j}, {k}]'", ")", "\n", "w_link_y", ".", "append", "(", "y_link", "[", "j", "]", "[", "k", "]", "*", "link_matrix", "[", "j", ",", "k", "]", ")", "\n", "", "", "w_det_y", "=", "[", "y_det", "[", "i", "]", "*", "cls_score", "[", "i", "]", "for", "i", "in", "range", "(", "len", "(", "cls_score", ")", ")", "]", "\n", "w_new_y", "=", "[", "y_new", "[", "i", "]", "*", "new_score", "[", "i", "]", "for", "i", "in", "range", "(", "len", "(", "cls_score", ")", ")", "]", "\n", "w_end_y", "=", "[", "y_end", "[", "i", "]", "*", "end_score", "[", "i", "]", "for", "i", "in", "range", "(", "len", "(", "cls_score", ")", ")", "]", "\n", "\n", "# Objective", "\n", "solver", ".", "Maximize", "(", "solver", ".", "Sum", "(", "w_det_y", "+", "w_new_y", "+", "w_end_y", "+", "w_link_y", ")", ")", "\n", "\n", "# Constraints", "\n", "for", "j", "in", "range", "(", "num_pred", ")", ":", "\n", "        ", "det_idx", "=", "j", "\n", "# pred = link + end", "\n", "solver", ".", "Add", "(", "\n", "solver", ".", "Sum", "(", "[", "y_end", "[", "det_idx", "]", ",", "(", "-", "1", ")", "*", "y_det", "[", "det_idx", "]", "]", "+", "\n", "[", "y_link", "[", "j", "]", "[", "k", "]", "for", "k", "in", "range", "(", "num_det", ")", "]", ")", "==", "0", ")", "\n", "\n", "", "for", "k", "in", "range", "(", "num_det", ")", ":", "\n", "        ", "det_idx", "=", "num_pred", "+", "k", "\n", "# det = link + start", "\n", "solver", ".", "Add", "(", "\n", "solver", ".", "Sum", "(", "[", "y_new", "[", "det_idx", "]", ",", "(", "-", "1", ")", "*", "y_det", "[", "det_idx", "]", "]", "+", "\n", "[", "y_link", "[", "j", "]", "[", "k", "]", "for", "j", "in", "range", "(", "num_pred", ")", "]", ")", "==", "0", ")", "\n", "\n", "", "solver", ".", "Solve", "(", ")", "\n", "\n", "assign_det", "=", "torch", ".", "zeros", "(", "len", "(", "cls_score", ")", ")", "\n", "assign_new", "=", "torch", ".", "zeros", "(", "len", "(", "cls_score", ")", ")", "\n", "assign_end", "=", "torch", ".", "zeros", "(", "len", "(", "cls_score", ")", ")", "\n", "assign_link", "=", "torch", ".", "zeros", "(", "num_pred", ",", "num_det", ")", "\n", "\n", "for", "j", "in", "range", "(", "num_pred", ")", ":", "\n", "        ", "for", "k", "in", "range", "(", "num_det", ")", ":", "\n", "            ", "assign_link", "[", "j", "]", "[", "k", "]", "=", "y_link", "[", "j", "]", "[", "k", "]", ".", "solution_value", "(", ")", "\n", "\n", "", "", "for", "i", "in", "range", "(", "len", "(", "cls_score", ")", ")", ":", "\n", "        ", "assign_det", "[", "i", "]", "=", "y_det", "[", "i", "]", ".", "solution_value", "(", ")", "\n", "assign_new", "[", "i", "]", "=", "y_new", "[", "i", "]", ".", "solution_value", "(", ")", "\n", "assign_end", "[", "i", "]", "=", "y_end", "[", "i", "]", ".", "solution_value", "(", ")", "\n", "\n", "", "matched", "=", "torch", ".", "nonzero", "(", "assign_link", ",", "as_tuple", "=", "False", ")", ".", "tolist", "(", ")", "\n", "unmatched_detections", "=", "torch", ".", "flatten", "(", "torch", ".", "nonzero", "(", "assign_new", "[", "num_pred", ":", "]", ",", "as_tuple", "=", "False", ")", ")", ".", "tolist", "(", ")", "\n", "tentative_detections", "=", "torch", ".", "flatten", "(", "torch", ".", "nonzero", "(", "(", "assign_det", "[", "num_pred", ":", "]", "==", "0", ")", ",", "as_tuple", "=", "False", ")", ")", ".", "tolist", "(", ")", "\n", "\n", "return", "matched", ",", "unmatched_detections", ",", "tentative_detections", "\n", "\n"]], "home.repos.pwc.inspect_result.kemo-huang_jmodt.tracking.data_association.hungarian_match": [[107, 132], ["jmodt.ops.iou3d.iou3d_utils.boxes_iou3d_gpu", "link_matrix.cpu().numpy.cpu().numpy", "scipy.optimize.linear_sum_assignment", "range", "numpy.vstack().T.tolist", "len", "link_matrix.cpu().numpy.cpu", "unmatched_detections.append", "tentative_detections.append", "numpy.vstack"], "function", ["home.repos.pwc.inspect_result.kemo-huang_jmodt.iou3d.iou3d_utils.boxes_iou3d_gpu"], ["", "def", "hungarian_match", "(", "det_boxes", ",", "\n", "pred_boxes", ",", "\n", "det_scores", ",", "\n", "link_scores", ",", "\n", "w_app", ",", "\n", "w_iou", ",", "\n", "score_threshold", "=", "0", ")", ":", "\n", "    ", "iou_matrix", "=", "boxes_iou3d_gpu", "(", "pred_boxes", ",", "det_boxes", ")", "\n", "link_matrix", "=", "link_scores", "*", "w_app", "+", "iou_matrix", "*", "w_iou", "\n", "link_matrix", "=", "link_matrix", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "row_ind", ",", "col_ind", "=", "linear_sum_assignment", "(", "-", "link_matrix", ")", "\n", "\n", "unmatched_detections", "=", "[", "]", "\n", "tentative_detections", "=", "[", "]", "\n", "for", "d", "in", "range", "(", "len", "(", "det_scores", ")", ")", ":", "\n", "        ", "if", "d", "not", "in", "row_ind", ":", "\n", "            ", "if", "det_scores", "[", "d", "]", ">", "score_threshold", ":", "\n", "                ", "unmatched_detections", ".", "append", "(", "d", ")", "\n", "", "else", ":", "\n", "                ", "tentative_detections", ".", "append", "(", "d", ")", "\n", "\n", "", "", "", "matched", "=", "np", ".", "vstack", "(", "(", "row_ind", ",", "col_ind", ")", ")", ".", "T", ".", "tolist", "(", ")", "\n", "\n", "return", "matched", ",", "unmatched_detections", ",", "tentative_detections", "\n", "", ""]], "home.repos.pwc.inspect_result.kemo-huang_jmodt.tracking.kalman.Kalman.__init__": [[10, 42], ["filterpy.kalman.KalmanFilter", "numpy.array", "numpy.array", "bbox_3d.reshape"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "bbox_3d", ")", ":", "\n", "        ", "\"\"\"\n        Initialises a tracker using initial bounding box.\n        [x, y, z, dx, dy, dz, heading]\n        \"\"\"", "\n", "# define constant velocity model", "\n", "#  [x, y, z, dx, dy, dz, heading, vx, vy, vz]", "\n", "self", ".", "kf", "=", "KalmanFilter", "(", "dim_x", "=", "10", ",", "dim_z", "=", "7", ")", "\n", "self", ".", "kf", ".", "F", "=", "np", ".", "array", "(", "[", "[", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", "]", ",", "# state transition matrix", "\n", "[", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", "]", "]", ")", "\n", "\n", "self", ".", "kf", ".", "H", "=", "np", ".", "array", "(", "[", "[", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "# measurement matrix,", "\n", "[", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", "]", "]", ")", "\n", "\n", "# state uncertainty, give high uncertainty to the unobservable initial velocities, covariance matrix", "\n", "self", ".", "kf", ".", "P", "[", "7", ":", ",", "7", ":", "]", "*=", "1000.", "\n", "self", ".", "kf", ".", "P", "*=", "10.", "\n", "self", ".", "kf", ".", "Q", "[", "7", ":", ",", "7", ":", "]", "*=", "0.01", "# process noise matrix", "\n", "self", ".", "kf", ".", "x", "[", ":", "7", "]", "=", "bbox_3d", ".", "reshape", "(", "(", "7", ",", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kemo-huang_jmodt.tracking.kalman.Kalman.update": [[43, 84], ["kalman.Kalman.kf.update", "abs", "abs"], "methods", ["home.repos.pwc.inspect_result.kemo-huang_jmodt.tracking.kalman.KalmanPSR.update"], ["", "def", "update", "(", "self", ",", "bbox_3d", ")", ":", "\n", "        ", "\"\"\"\n        Updates the state vector with observed bbox.\n        \"\"\"", "\n", "# ------------------", "\n", "# orientation correction", "\n", "if", "self", ".", "kf", ".", "x", "[", "6", "]", ">=", "np", ".", "pi", ":", "\n", "            ", "self", ".", "kf", ".", "x", "[", "6", "]", "-=", "np", ".", "pi", "*", "2", "# make the theta still in the range", "\n", "", "if", "self", ".", "kf", ".", "x", "[", "6", "]", "<", "-", "np", ".", "pi", ":", "\n", "            ", "self", ".", "kf", ".", "x", "[", "6", "]", "+=", "np", ".", "pi", "*", "2", "\n", "\n", "", "new_theta", "=", "bbox_3d", "[", "6", "]", "\n", "if", "new_theta", ">=", "np", ".", "pi", ":", "\n", "            ", "new_theta", "-=", "np", ".", "pi", "*", "2", "# make the theta still in the range", "\n", "", "if", "new_theta", "<", "-", "np", ".", "pi", ":", "\n", "            ", "new_theta", "+=", "np", ".", "pi", "*", "2", "\n", "", "bbox_3d", "[", "6", "]", "=", "new_theta", "\n", "\n", "predicted_theta", "=", "self", ".", "kf", ".", "x", "[", "6", "]", "\n", "# if the angle of two theta is not acute angle", "\n", "if", "np", ".", "pi", "/", "2.0", "<", "abs", "(", "new_theta", "-", "predicted_theta", ")", "<", "np", ".", "pi", "*", "3", "/", "2.0", ":", "\n", "            ", "self", ".", "kf", ".", "x", "[", "6", "]", "+=", "np", ".", "pi", "\n", "if", "self", ".", "kf", ".", "x", "[", "6", "]", ">", "np", ".", "pi", ":", "\n", "                ", "self", ".", "kf", ".", "x", "[", "6", "]", "-=", "np", ".", "pi", "*", "2", "# make the theta still in the range", "\n", "", "if", "self", ".", "kf", ".", "x", "[", "6", "]", "<", "-", "np", ".", "pi", ":", "\n", "                ", "self", ".", "kf", ".", "x", "[", "6", "]", "+=", "np", ".", "pi", "*", "2", "\n", "\n", "# now the angle is acute: < 90 or > 270, convert the case of > 270 to < 90", "\n", "", "", "if", "abs", "(", "new_theta", "-", "self", ".", "kf", ".", "x", "[", "6", "]", ")", ">=", "np", ".", "pi", "*", "3", "/", "2.0", ":", "\n", "            ", "if", "new_theta", ">", "0", ":", "\n", "                ", "self", ".", "kf", ".", "x", "[", "6", "]", "+=", "np", ".", "pi", "*", "2", "\n", "", "else", ":", "\n", "                ", "self", ".", "kf", ".", "x", "[", "6", "]", "-=", "np", ".", "pi", "*", "2", "\n", "# ------------------", "\n", "\n", "", "", "self", ".", "kf", ".", "update", "(", "bbox_3d", ")", "\n", "\n", "if", "self", ".", "kf", ".", "x", "[", "6", "]", ">=", "np", ".", "pi", ":", "\n", "            ", "self", ".", "kf", ".", "x", "[", "6", "]", "-=", "np", ".", "pi", "*", "2", "# make the theta still in the range", "\n", "", "if", "self", ".", "kf", ".", "x", "[", "6", "]", "<", "-", "np", ".", "pi", ":", "\n", "            ", "self", ".", "kf", ".", "x", "[", "6", "]", "+=", "np", ".", "pi", "*", "2", "\n", "\n"]], "home.repos.pwc.inspect_result.kemo-huang_jmodt.tracking.kalman.Kalman.predict": [[85, 96], ["range", "kalman.Kalman.kf.predict"], "methods", ["home.repos.pwc.inspect_result.kemo-huang_jmodt.tracking.kalman.KalmanPSR.predict"], ["", "", "def", "predict", "(", "self", ",", "t", "=", "1", ")", "->", "np", ".", "array", ":", "\n", "        ", "\"\"\"\n        Advances the state vector and returns the predicted bounding box estimate.\n        \"\"\"", "\n", "for", "_", "in", "range", "(", "t", ")", ":", "\n", "            ", "self", ".", "kf", ".", "predict", "(", ")", "\n", "", "if", "self", ".", "kf", ".", "x", "[", "6", "]", ">=", "np", ".", "pi", ":", "\n", "            ", "self", ".", "kf", ".", "x", "[", "6", "]", "-=", "np", ".", "pi", "*", "2", "\n", "", "if", "self", ".", "kf", ".", "x", "[", "6", "]", "<", "-", "np", ".", "pi", ":", "\n", "            ", "self", ".", "kf", ".", "x", "[", "6", "]", "+=", "np", ".", "pi", "*", "2", "\n", "", "return", "self", ".", "kf", ".", "x", "[", ":", "7", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.kemo-huang_jmodt.tracking.kalman.Kalman.get_box": [[97, 102], ["None"], "methods", ["None"], ["", "def", "get_box", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Returns the current bounding box estimate.\n        \"\"\"", "\n", "return", "self", ".", "kf", ".", "x", "[", ":", "7", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.kemo-huang_jmodt.tracking.kalman.Kalman.get_predicted_box": [[103, 105], ["numpy.dot"], "methods", ["None"], ["", "def", "get_predicted_box", "(", "self", ")", ":", "\n", "        ", "return", "np", ".", "dot", "(", "self", ".", "kf", ".", "F", ",", "self", ".", "kf", ".", "x", ")", "[", ":", "7", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.kemo-huang_jmodt.tracking.kalman.KalmanPSR.__init__": [[108, 143], ["filterpy.kalman.KalmanFilter", "numpy.array", "numpy.array", "psr.reshape"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "psr", ")", ":", "\n", "        ", "\"\"\"\n        Initialises a tracker using initial bounding box.\n        \"\"\"", "\n", "# define constant velocity model", "\n", "# (px, py, pz, sx, sy, sz, rx, ry, rz, vx, vy, vz)", "\n", "self", ".", "kf", "=", "KalmanFilter", "(", "dim_x", "=", "12", ",", "dim_z", "=", "9", ")", "\n", "self", ".", "kf", ".", "F", "=", "np", ".", "array", "(", "[", "[", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", "]", ",", "# state transition matrix", "\n", "[", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", "]", "]", ")", "\n", "\n", "self", ".", "kf", ".", "H", "=", "np", ".", "array", "(", "[", "[", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "# measurement matrix,", "\n", "[", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", "]", "]", ")", "\n", "\n", "# state uncertainty, give high uncertainty to the unobservable initial velocities, covariance matrix", "\n", "self", ".", "kf", ".", "P", "[", "9", ":", ",", "9", ":", "]", "*=", "1000.", "\n", "self", ".", "kf", ".", "P", "*=", "10.", "\n", "self", ".", "kf", ".", "Q", "[", "9", ":", ",", "9", ":", "]", "*=", "0.01", "# process noise matrix", "\n", "self", ".", "kf", ".", "x", "[", ":", "9", "]", "=", "psr", ".", "reshape", "(", "(", "9", ",", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kemo-huang_jmodt.tracking.kalman.KalmanPSR._rotation_correction": [[144, 159], ["range"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_rotation_correction", "(", "rot", ")", ":", "\n", "        ", "\"\"\"\n        Lets the rotation angles in range [-pi, pi)\n        :param rot:\n        :return:\n        \"\"\"", "\n", "for", "i", "in", "range", "(", "3", ")", ":", "\n", "            ", "r", "=", "rot", "[", "i", "]", "\n", "if", "r", ">=", "np", ".", "pi", ":", "\n", "                ", "r", "-=", "np", ".", "pi", "*", "2", "\n", "", "elif", "r", "<", "-", "np", ".", "pi", ":", "\n", "                ", "r", "+=", "np", ".", "pi", "*", "2", "\n", "", "rot", "[", "i", "]", "=", "r", "\n", "", "return", "rot", "\n", "\n"]], "home.repos.pwc.inspect_result.kemo-huang_jmodt.tracking.kalman.KalmanPSR._rotation_acute_correction": [[160, 176], ["abs", "abs"], "methods", ["None"], ["", "def", "_rotation_acute_correction", "(", "self", ",", "psr", ")", ":", "\n", "        ", "for", "i", "in", "(", "6", ",", "7", ",", "8", ")", ":", "\n", "# if the angle of two theta is not acute angle", "\n", "            ", "if", "np", ".", "pi", "/", "2.0", "<", "abs", "(", "psr", "[", "i", "]", "-", "self", ".", "kf", ".", "x", "[", "i", "]", ")", "<", "np", ".", "pi", "*", "3", "/", "2.0", ":", "\n", "                ", "self", ".", "kf", ".", "x", "[", "i", "]", "+=", "np", ".", "pi", "\n", "if", "self", ".", "kf", ".", "x", "[", "i", "]", ">", "np", ".", "pi", ":", "\n", "                    ", "self", ".", "kf", ".", "x", "[", "i", "]", "-=", "np", ".", "pi", "*", "2", "# make the theta still in the range", "\n", "", "if", "self", ".", "kf", ".", "x", "[", "i", "]", "<", "-", "np", ".", "pi", ":", "\n", "                    ", "self", ".", "kf", ".", "x", "[", "i", "]", "+=", "np", ".", "pi", "*", "2", "\n", "\n", "# now the angle is acute: < 90 or > 270, convert the case of > 270 to < 90", "\n", "", "", "if", "abs", "(", "psr", "[", "i", "]", "-", "self", ".", "kf", ".", "x", "[", "i", "]", ")", ">=", "np", ".", "pi", "*", "3", "/", "2.0", ":", "\n", "                ", "if", "psr", "[", "i", "]", ">", "0", ":", "\n", "                    ", "self", ".", "kf", ".", "x", "[", "i", "]", "+=", "np", ".", "pi", "*", "2", "\n", "", "else", ":", "\n", "                    ", "self", ".", "kf", ".", "x", "[", "i", "]", "-=", "np", ".", "pi", "*", "2", "\n", "\n"]], "home.repos.pwc.inspect_result.kemo-huang_jmodt.tracking.kalman.KalmanPSR.update": [[177, 185], ["kalman.KalmanPSR._rotation_correction", "kalman.KalmanPSR._rotation_acute_correction", "kalman.KalmanPSR.kf.update", "kalman.KalmanPSR._rotation_correction"], "methods", ["home.repos.pwc.inspect_result.kemo-huang_jmodt.tracking.kalman.KalmanPSR._rotation_correction", "home.repos.pwc.inspect_result.kemo-huang_jmodt.tracking.kalman.KalmanPSR._rotation_acute_correction", "home.repos.pwc.inspect_result.kemo-huang_jmodt.tracking.kalman.KalmanPSR.update", "home.repos.pwc.inspect_result.kemo-huang_jmodt.tracking.kalman.KalmanPSR._rotation_correction"], ["", "", "", "", "def", "update", "(", "self", ",", "psr", ")", ":", "\n", "        ", "\"\"\"\n        Updates the state vector with observed bbox.\n        \"\"\"", "\n", "psr", "[", "6", ":", "9", "]", "=", "self", ".", "_rotation_correction", "(", "psr", "[", "6", ":", "9", "]", ")", "\n", "self", ".", "_rotation_acute_correction", "(", "psr", ")", "\n", "self", ".", "kf", ".", "update", "(", "psr", ")", "\n", "self", ".", "kf", ".", "x", "[", "6", ":", "9", "]", "=", "self", ".", "_rotation_correction", "(", "self", ".", "kf", ".", "x", "[", "6", ":", "9", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kemo-huang_jmodt.tracking.kalman.KalmanPSR.predict": [[186, 194], ["range", "kalman.KalmanPSR._rotation_correction", "kalman.KalmanPSR.kf.predict"], "methods", ["home.repos.pwc.inspect_result.kemo-huang_jmodt.tracking.kalman.KalmanPSR._rotation_correction", "home.repos.pwc.inspect_result.kemo-huang_jmodt.tracking.kalman.KalmanPSR.predict"], ["", "def", "predict", "(", "self", ",", "t", ")", "->", "np", ".", "array", ":", "\n", "        ", "\"\"\"\n        Advances the state vector and returns the predicted bounding box estimate.\n        \"\"\"", "\n", "for", "_", "in", "range", "(", "t", ")", ":", "\n", "            ", "self", ".", "kf", ".", "predict", "(", ")", "\n", "", "self", ".", "kf", ".", "x", "[", "6", ":", "9", "]", "=", "self", ".", "_rotation_correction", "(", "self", ".", "kf", ".", "x", "[", "6", ":", "9", "]", ")", "\n", "return", "self", ".", "kf", ".", "x", "[", ":", "9", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.kemo-huang_jmodt.tracking.kalman.KalmanPSR.get_box": [[195, 200], ["None"], "methods", ["None"], ["", "def", "get_box", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Returns the current bounding box estimate.\n        \"\"\"", "\n", "return", "self", ".", "kf", ".", "x", "[", ":", "9", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.kemo-huang_jmodt.tracking.kalman.KalmanPSR.get_predicted_box": [[201, 203], ["numpy.dot"], "methods", ["None"], ["", "def", "get_predicted_box", "(", "self", ")", ":", "\n", "        ", "return", "np", ".", "dot", "(", "self", ".", "kf", ".", "F", ",", "self", ".", "kf", ".", "x", ")", "[", ":", "9", "]", "\n", "", "", ""]], "home.repos.pwc.inspect_result.kemo-huang_jmodt.roipool3d.roipool3d_utils.roipool3d_gpu": [[8, 30], ["jmodt.utils.kitti_utils.enlarge_box3d().view", "torch.cuda.FloatTensor().zero_", "torch.cuda.IntTensor().zero_", "jmodt.ops.roipool3d.roipool3d_cuda.forward", "pts.contiguous", "kitti_utils.enlarge_box3d().view.contiguous", "pts_feature.contiguous", "jmodt.utils.kitti_utils.enlarge_box3d", "torch.cuda.FloatTensor", "torch.cuda.IntTensor", "boxes3d.view", "torch.Size", "torch.Size"], "function", ["home.repos.pwc.inspect_result.kemo-huang_jmodt.pointnet2.pointnet2_utils.GroupAll.forward", "home.repos.pwc.inspect_result.kemo-huang_jmodt.utils.kitti_utils.enlarge_box3d"], ["def", "roipool3d_gpu", "(", "pts", ",", "pts_feature", ",", "boxes3d", ",", "pool_extra_width", ",", "sampled_pt_num", "=", "512", ")", ":", "\n", "    ", "\"\"\"\n    :param pts: (B, N, 3)\n    :param pts_feature: (B, N, C)\n    :param boxes3d: (B, M, 7)\n    :param pool_extra_width: float\n    :param sampled_pt_num: int\n    :return:\n        pooled_features: (B, M, 512, 3 + C)\n        pooled_empty_flag: (B, M)\n    \"\"\"", "\n", "batch_size", ",", "boxes_num", ",", "feature_len", "=", "pts", ".", "shape", "[", "0", "]", ",", "boxes3d", ".", "shape", "[", "1", "]", ",", "pts_feature", ".", "shape", "[", "2", "]", "\n", "pooled_boxes3d", "=", "kitti_utils", ".", "enlarge_box3d", "(", "boxes3d", ".", "view", "(", "-", "1", ",", "7", ")", ",", "pool_extra_width", ")", ".", "view", "(", "batch_size", ",", "-", "1", ",", "7", ")", "\n", "\n", "pooled_features", "=", "torch", ".", "cuda", ".", "FloatTensor", "(", "torch", ".", "Size", "(", "(", "batch_size", ",", "boxes_num", ",", "\n", "sampled_pt_num", ",", "3", "+", "feature_len", ")", ")", ")", ".", "zero_", "(", ")", "\n", "pooled_empty_flag", "=", "torch", ".", "cuda", ".", "IntTensor", "(", "torch", ".", "Size", "(", "(", "batch_size", ",", "boxes_num", ")", ")", ")", ".", "zero_", "(", ")", "\n", "\n", "roipool3d_cuda", ".", "forward", "(", "pts", ".", "contiguous", "(", ")", ",", "pooled_boxes3d", ".", "contiguous", "(", ")", ",", "\n", "pts_feature", ".", "contiguous", "(", ")", ",", "pooled_features", ",", "pooled_empty_flag", ")", "\n", "\n", "return", "pooled_features", ",", "pooled_empty_flag", "\n", "\n"]], "home.repos.pwc.inspect_result.kemo-huang_jmodt.roipool3d.roipool3d_utils.pts_in_boxes3d_cpu": [[32, 51], ["pts.float().contiguous.float().contiguous", "boxes3d.float().contiguous.float().contiguous", "torch.LongTensor", "jmodt.ops.roipool3d.roipool3d_cuda.pts_in_boxes3d_cpu", "range", "torch.Size", "boxes_pts_mask_list.append", "pts.float().contiguous.float", "boxes3d.float().contiguous.float", "boxes3d.float().contiguous.size", "pts.float().contiguous.size"], "function", ["home.repos.pwc.inspect_result.kemo-huang_jmodt.roipool3d.roipool3d_utils.pts_in_boxes3d_cpu"], ["", "def", "pts_in_boxes3d_cpu", "(", "pts", ",", "boxes3d", ")", ":", "\n", "    ", "\"\"\"\n    :param pts: (N, 3) in rect-camera coords\n    :param boxes3d: (M, 7)\n    :return: boxes_pts_mask_list: (M), list with [(N), (N), ..]\n    \"\"\"", "\n", "if", "not", "pts", ".", "is_cuda", ":", "\n", "        ", "pts", "=", "pts", ".", "float", "(", ")", ".", "contiguous", "(", ")", "\n", "boxes3d", "=", "boxes3d", ".", "float", "(", ")", ".", "contiguous", "(", ")", "\n", "pts_flag", "=", "torch", ".", "LongTensor", "(", "torch", ".", "Size", "(", "(", "boxes3d", ".", "size", "(", "0", ")", ",", "pts", ".", "size", "(", "0", ")", ")", ")", ")", "# (M, N)", "\n", "roipool3d_cuda", ".", "pts_in_boxes3d_cpu", "(", "pts_flag", ",", "pts", ",", "boxes3d", ")", "\n", "\n", "boxes_pts_mask_list", "=", "[", "]", "\n", "for", "k", "in", "range", "(", "0", ",", "boxes3d", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "cur_mask", "=", "pts_flag", "[", "k", "]", ">", "0", "\n", "boxes_pts_mask_list", ".", "append", "(", "cur_mask", ")", "\n", "", "return", "boxes_pts_mask_list", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.kemo-huang_jmodt.roipool3d.roipool3d_utils.roipool_pc_cpu": [[53, 71], ["pts.cpu().float().contiguous.cpu().float().contiguous", "pts_feature.cpu().float().contiguous.cpu().float().contiguous", "boxes3d.cpu().float().contiguous.cpu().float().contiguous", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.LongTensor().zero_", "jmodt.ops.roipool3d.roipool3d_cuda.roipool3d_cpu", "pts.cpu().float().contiguous.cpu().float", "pts_feature.cpu().float().contiguous.cpu().float", "boxes3d.cpu().float().contiguous.cpu().float", "torch.FloatTensor", "torch.FloatTensor", "torch.LongTensor", "torch.Size", "torch.Size", "pts.cpu().float().contiguous.cpu", "pts_feature.cpu().float().contiguous.cpu", "boxes3d.cpu().float().contiguous.cpu"], "function", ["home.repos.pwc.inspect_result.kemo-huang_jmodt.roipool3d.roipool3d_utils.roipool3d_cpu"], ["", "", "def", "roipool_pc_cpu", "(", "pts", ",", "pts_feature", ",", "boxes3d", ",", "sampled_pt_num", ")", ":", "\n", "    ", "\"\"\"\n    :param pts: (N, 3)\n    :param pts_feature: (N, C)\n    :param boxes3d: (M, 7)\n    :param sampled_pt_num: int\n    :return:\n    \"\"\"", "\n", "pts", "=", "pts", ".", "cpu", "(", ")", ".", "float", "(", ")", ".", "contiguous", "(", ")", "\n", "pts_feature", "=", "pts_feature", ".", "cpu", "(", ")", ".", "float", "(", ")", ".", "contiguous", "(", ")", "\n", "boxes3d", "=", "boxes3d", ".", "cpu", "(", ")", ".", "float", "(", ")", ".", "contiguous", "(", ")", "\n", "assert", "pts", ".", "shape", "[", "0", "]", "==", "pts_feature", ".", "shape", "[", "0", "]", "and", "pts", ".", "shape", "[", "1", "]", "==", "3", ",", "'%s %s'", "%", "(", "pts", ".", "shape", ",", "pts_feature", ".", "shape", ")", "\n", "assert", "pts", ".", "is_cuda", "is", "False", "\n", "pooled_pts", "=", "torch", ".", "FloatTensor", "(", "torch", ".", "Size", "(", "(", "boxes3d", ".", "shape", "[", "0", "]", ",", "sampled_pt_num", ",", "3", ")", ")", ")", ".", "zero_", "(", ")", "\n", "pooled_features", "=", "torch", ".", "FloatTensor", "(", "torch", ".", "Size", "(", "(", "boxes3d", ".", "shape", "[", "0", "]", ",", "sampled_pt_num", ",", "pts_feature", ".", "shape", "[", "1", "]", ")", ")", ")", ".", "zero_", "(", ")", "\n", "pooled_empty_flag", "=", "torch", ".", "LongTensor", "(", "boxes3d", ".", "shape", "[", "0", "]", ")", ".", "zero_", "(", ")", "\n", "roipool3d_cuda", ".", "roipool3d_cpu", "(", "pts", ",", "boxes3d", ",", "pts_feature", ",", "pooled_pts", ",", "pooled_features", ",", "pooled_empty_flag", ")", "\n", "return", "pooled_pts", ",", "pooled_features", ",", "pooled_empty_flag", "\n", "\n"]], "home.repos.pwc.inspect_result.kemo-huang_jmodt.roipool3d.roipool3d_utils.roipool3d_cpu": [[73, 110], ["jmodt.utils.kitti_utils.enlarge_box3d", "numpy.concatenate", "roipool3d_utils.roipool_pc_cpu", "torch.cat().numpy", "pooled_features[].numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "range", "pooled_empty_flag.numpy", "torch.cat", "jmodt.utils.kitti_utils.rotate_pc_along_y"], "function", ["home.repos.pwc.inspect_result.kemo-huang_jmodt.utils.kitti_utils.enlarge_box3d", "home.repos.pwc.inspect_result.kemo-huang_jmodt.roipool3d.roipool3d_utils.roipool_pc_cpu", "home.repos.pwc.inspect_result.kemo-huang_jmodt.utils.kitti_utils.rotate_pc_along_y"], ["", "def", "roipool3d_cpu", "(", "boxes3d", ",", "pts", ",", "pts_feature", ",", "pts_extra_input", ",", "pool_extra_width", ",", "sampled_pt_num", "=", "512", ",", "\n", "canonical_transform", "=", "True", ")", ":", "\n", "    ", "\"\"\"\n    :param boxes3d: (N, 7)\n    :param pts: (N, 3)\n    :param pts_feature: (N, C)\n    :param pts_extra_input: (N, C2)\n    :param pool_extra_width: constant\n    :param sampled_pt_num: constant\n    :return:\n    \"\"\"", "\n", "pooled_boxes3d", "=", "kitti_utils", ".", "enlarge_box3d", "(", "boxes3d", ",", "pool_extra_width", ")", "\n", "\n", "pts_feature_all", "=", "np", ".", "concatenate", "(", "(", "pts_extra_input", ",", "pts_feature", ")", ",", "axis", "=", "1", ")", "\n", "\n", "#  Note: if pooled_empty_flag[i] > 0, the pooled_pts[i], pooled_features[i] will be zero", "\n", "pooled_pts", ",", "pooled_features", ",", "pooled_empty_flag", "=", "roipool_pc_cpu", "(", "torch", ".", "from_numpy", "(", "pts", ")", ",", "torch", ".", "from_numpy", "(", "pts_feature_all", ")", ",", "\n", "torch", ".", "from_numpy", "(", "pooled_boxes3d", ")", ",", "sampled_pt_num", ")", "\n", "\n", "extra_input_len", "=", "pts_extra_input", ".", "shape", "[", "1", "]", "\n", "sampled_pts_input", "=", "torch", ".", "cat", "(", "(", "pooled_pts", ",", "pooled_features", "[", ":", ",", ":", ",", "0", ":", "extra_input_len", "]", ")", ",", "dim", "=", "2", ")", ".", "numpy", "(", ")", "\n", "sampled_pts_feature", "=", "pooled_features", "[", ":", ",", ":", ",", "extra_input_len", ":", "]", ".", "numpy", "(", ")", "\n", "\n", "if", "canonical_transform", ":", "\n", "# Translate to the roi coordinates", "\n", "        ", "roi_ry", "=", "boxes3d", "[", ":", ",", "6", "]", "%", "(", "2", "*", "np", ".", "pi", ")", "# 0~2pi", "\n", "roi_center", "=", "boxes3d", "[", ":", ",", "0", ":", "3", "]", "\n", "\n", "# shift to center", "\n", "sampled_pts_input", "[", ":", ",", ":", ",", "0", ":", "3", "]", "=", "sampled_pts_input", "[", ":", ",", ":", ",", "0", ":", "3", "]", "-", "roi_center", "[", ":", ",", "np", ".", "newaxis", ",", ":", "]", "\n", "for", "k", "in", "range", "(", "sampled_pts_input", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "sampled_pts_input", "[", "k", "]", "=", "kitti_utils", ".", "rotate_pc_along_y", "(", "sampled_pts_input", "[", "k", "]", ",", "roi_ry", "[", "k", "]", ")", "\n", "\n", "", "return", "sampled_pts_input", ",", "sampled_pts_feature", "\n", "\n", "", "return", "sampled_pts_input", ",", "sampled_pts_feature", ",", "pooled_empty_flag", ".", "numpy", "(", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.kemo-huang_jmodt.iou3d.iou3d_utils.boxes_iou_bev": [[7, 20], ["torch.cuda.FloatTensor().zero_", "jmodt.ops.iou3d.iou3d_cuda.boxes_iou_bev_gpu", "boxes_a.contiguous", "boxes_b.contiguous", "torch.cuda.FloatTensor", "torch.Size"], "function", ["None"], ["def", "boxes_iou_bev", "(", "boxes_a", ",", "boxes_b", ")", ":", "\n", "    ", "\"\"\"\n    :param boxes_a: (M, 5)\n    :param boxes_b: (N, 5)\n    :return:\n        ans_iou: (M, N)\n    \"\"\"", "\n", "\n", "ans_iou", "=", "torch", ".", "cuda", ".", "FloatTensor", "(", "torch", ".", "Size", "(", "(", "boxes_a", ".", "shape", "[", "0", "]", ",", "boxes_b", ".", "shape", "[", "0", "]", ")", ")", ")", ".", "zero_", "(", ")", "\n", "\n", "iou3d_cuda", ".", "boxes_iou_bev_gpu", "(", "boxes_a", ".", "contiguous", "(", ")", ",", "boxes_b", ".", "contiguous", "(", ")", ",", "ans_iou", ")", "\n", "\n", "return", "ans_iou", "\n", "\n"]], "home.repos.pwc.inspect_result.kemo-huang_jmodt.iou3d.iou3d_utils.boxes_iou3d_gpu": [[22, 55], ["jmodt.utils.kitti_utils.boxes3d_to_bev_torch().float", "jmodt.utils.kitti_utils.boxes3d_to_bev_torch().float", "torch.cuda.FloatTensor().zero_", "jmodt.ops.iou3d.iou3d_cuda.boxes_overlap_bev_gpu", "boxes_a[].view", "boxes_b[].view", "torch.max", "torch.min", "torch.clamp", "kitti_utils.boxes3d_to_bev_torch().float.contiguous", "kitti_utils.boxes3d_to_bev_torch().float.contiguous", "torch.clamp", "jmodt.utils.kitti_utils.boxes3d_to_bev_torch", "jmodt.utils.kitti_utils.boxes3d_to_bev_torch", "torch.cuda.FloatTensor", "torch.Size"], "function", ["home.repos.pwc.inspect_result.kemo-huang_jmodt.utils.kitti_utils.boxes3d_to_bev_torch", "home.repos.pwc.inspect_result.kemo-huang_jmodt.utils.kitti_utils.boxes3d_to_bev_torch"], ["", "def", "boxes_iou3d_gpu", "(", "boxes_a", ",", "boxes_b", ")", ":", "\n", "    ", "\"\"\"\n    :param boxes_a: (N, 7) [x, y, z, h, w, l, ry]\n    :param boxes_b: (M, 7) [x, y, z, h, w, l, ry]\n    :return:\n        ans_iou: (M, N)\n    \"\"\"", "\n", "boxes_a_bev", "=", "kitti_utils", ".", "boxes3d_to_bev_torch", "(", "boxes_a", ")", ".", "float", "(", ")", "\n", "boxes_b_bev", "=", "kitti_utils", ".", "boxes3d_to_bev_torch", "(", "boxes_b", ")", ".", "float", "(", ")", "\n", "\n", "# bev overlap", "\n", "overlaps_bev", "=", "torch", ".", "cuda", ".", "FloatTensor", "(", "torch", ".", "Size", "(", "(", "boxes_a", ".", "shape", "[", "0", "]", ",", "boxes_b", ".", "shape", "[", "0", "]", ")", ")", ")", ".", "zero_", "(", ")", "# (N, M)", "\n", "iou3d_cuda", ".", "boxes_overlap_bev_gpu", "(", "boxes_a_bev", ".", "contiguous", "(", ")", ",", "boxes_b_bev", ".", "contiguous", "(", ")", ",", "overlaps_bev", ")", "\n", "\n", "# height overlap", "\n", "boxes_a_height_min", "=", "(", "boxes_a", "[", ":", ",", "1", "]", "-", "boxes_a", "[", ":", ",", "3", "]", ")", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "boxes_a_height_max", "=", "boxes_a", "[", ":", ",", "1", "]", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "boxes_b_height_min", "=", "(", "boxes_b", "[", ":", ",", "1", "]", "-", "boxes_b", "[", ":", ",", "3", "]", ")", ".", "view", "(", "1", ",", "-", "1", ")", "\n", "boxes_b_height_max", "=", "boxes_b", "[", ":", ",", "1", "]", ".", "view", "(", "1", ",", "-", "1", ")", "\n", "\n", "max_of_min", "=", "torch", ".", "max", "(", "boxes_a_height_min", ",", "boxes_b_height_min", ")", "\n", "min_of_max", "=", "torch", ".", "min", "(", "boxes_a_height_max", ",", "boxes_b_height_max", ")", "\n", "overlaps_h", "=", "torch", ".", "clamp", "(", "min_of_max", "-", "max_of_min", ",", "min", "=", "0", ")", "\n", "\n", "# 3d iou", "\n", "overlaps_3d", "=", "overlaps_bev", "*", "overlaps_h", "\n", "\n", "vol_a", "=", "(", "boxes_a", "[", ":", ",", "3", "]", "*", "boxes_a", "[", ":", ",", "4", "]", "*", "boxes_a", "[", ":", ",", "5", "]", ")", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "vol_b", "=", "(", "boxes_b", "[", ":", ",", "3", "]", "*", "boxes_b", "[", ":", ",", "4", "]", "*", "boxes_b", "[", ":", ",", "5", "]", ")", ".", "view", "(", "1", ",", "-", "1", ")", "\n", "\n", "iou3d", "=", "overlaps_3d", "/", "torch", ".", "clamp", "(", "vol_a", "+", "vol_b", "-", "overlaps_3d", ",", "min", "=", "1e-7", ")", "\n", "\n", "return", "iou3d", "\n", "\n"]], "home.repos.pwc.inspect_result.kemo-huang_jmodt.iou3d.iou3d_utils.nms_gpu": [[57, 72], ["boxes[].contiguous", "torch.LongTensor", "jmodt.ops.iou3d.iou3d_cuda.nms_gpu", "order[].contiguous", "scores.sort", "boxes[].contiguous.size", "keep[].cuda"], "function", ["home.repos.pwc.inspect_result.kemo-huang_jmodt.iou3d.iou3d_utils.nms_gpu"], ["", "def", "nms_gpu", "(", "boxes", ",", "scores", ",", "thresh", ")", ":", "\n", "    ", "\"\"\"\n    :param boxes: (N, 5) [x1, y1, x2, y2, ry]\n    :param scores: (N)\n    :param thresh:\n    :return:\n    \"\"\"", "\n", "# areas = (x2 - x1) * (y2 - y1)", "\n", "order", "=", "scores", ".", "sort", "(", "0", ",", "descending", "=", "True", ")", "[", "1", "]", "\n", "\n", "boxes", "=", "boxes", "[", "order", "]", ".", "contiguous", "(", ")", "\n", "\n", "keep", "=", "torch", ".", "LongTensor", "(", "boxes", ".", "size", "(", "0", ")", ")", "\n", "num_out", "=", "iou3d_cuda", ".", "nms_gpu", "(", "boxes", ",", "keep", ",", "thresh", ")", "\n", "return", "order", "[", "keep", "[", ":", "num_out", "]", ".", "cuda", "(", ")", "]", ".", "contiguous", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kemo-huang_jmodt.iou3d.iou3d_utils.nms_normal_gpu": [[74, 89], ["boxes[].contiguous", "torch.LongTensor", "jmodt.ops.iou3d.iou3d_cuda.nms_normal_gpu", "order[].contiguous", "scores.sort", "boxes[].contiguous.size", "keep[].cuda"], "function", ["home.repos.pwc.inspect_result.kemo-huang_jmodt.iou3d.iou3d_utils.nms_normal_gpu"], ["", "def", "nms_normal_gpu", "(", "boxes", ",", "scores", ",", "thresh", ")", ":", "\n", "    ", "\"\"\"\n    :param boxes: (N, 5) [x1, y1, x2, y2, ry]\n    :param scores: (N)\n    :param thresh:\n    :return:\n    \"\"\"", "\n", "# areas = (x2 - x1) * (y2 - y1)", "\n", "order", "=", "scores", ".", "sort", "(", "0", ",", "descending", "=", "True", ")", "[", "1", "]", "\n", "\n", "boxes", "=", "boxes", "[", "order", "]", ".", "contiguous", "(", ")", "\n", "\n", "keep", "=", "torch", ".", "LongTensor", "(", "boxes", ".", "size", "(", "0", ")", ")", "\n", "num_out", "=", "iou3d_cuda", ".", "nms_normal_gpu", "(", "boxes", ",", "keep", ",", "thresh", ")", "\n", "return", "order", "[", "keep", "[", ":", "num_out", "]", ".", "cuda", "(", ")", "]", ".", "contiguous", "(", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.kemo-huang_jmodt.pointnet2.pointnet2_modules._PointnetSAModuleBase.__init__": [[13, 19], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.kemo-huang_jmodt.pointnet2.pytorch_utils.FC.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "npoint", "=", "None", "\n", "self", ".", "groupers", "=", "None", "\n", "self", ".", "mlps", "=", "None", "\n", "self", ".", "pool_method", "=", "'max_pool'", "\n", "\n"]], "home.repos.pwc.inspect_result.kemo-huang_jmodt.pointnet2.pointnet2_modules._PointnetSAModuleBase.forward": [[20, 64], ["xyz.transpose().contiguous", "range", "len", "torch.avg_pool2d.squeeze", "new_features_list.append", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "xyz.transpose", "pointnet2_utils.furthest_point_sample", "pointnet2_utils.gather_operation().transpose().contiguous", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "pointnet2_utils.gather_operation().transpose", "torch.avg_pool2d.size", "pointnet2_utils.gather_operation", "torch.avg_pool2d.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "xyz", ":", "torch", ".", "Tensor", ",", "features", ":", "torch", ".", "Tensor", "=", "None", ",", "new_xyz", "=", "None", ")", "->", "(", "torch", ".", "Tensor", ",", "torch", ".", "Tensor", ")", ":", "\n", "        ", "\"\"\"\n        :param xyz: (B, N, 3) tensor of the xyz coordinates of the features\n        :param features: (B, N, C) tensor of the descriptors of the the features\n        :param new_xyz:\n        :return:\n            new_xyz: (B, npoint, 3) tensor of the new features' xyz\n            new_features: (B, npoint, \\sum_k(mlps[k][-1])) tensor of the new_features descriptors\n        \"\"\"", "\n", "new_features_list", "=", "[", "]", "\n", "\n", "xyz_flipped", "=", "xyz", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "\n", "if", "new_xyz", "is", "None", ":", "\n", "            ", "if", "self", ".", "npoint", "is", "not", "None", ":", "\n", "                ", "idx", "=", "pointnet2_utils", ".", "furthest_point_sample", "(", "xyz", ",", "self", ".", "npoint", ")", "\n", "new_xyz", "=", "pointnet2_utils", ".", "gather_operation", "(", "\n", "xyz_flipped", ",", "\n", "idx", "\n", ")", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "", "else", ":", "\n", "                ", "new_xyz", "=", "None", "\n", "idx", "=", "None", "\n", "", "", "else", ":", "\n", "            ", "idx", "=", "None", "\n", "\n", "", "for", "i", "in", "range", "(", "len", "(", "self", ".", "groupers", ")", ")", ":", "\n", "            ", "new_features", "=", "self", ".", "groupers", "[", "i", "]", "(", "xyz", ",", "new_xyz", ",", "features", ")", "# (B, C, npoint, nsample)", "\n", "new_features", "=", "self", ".", "mlps", "[", "i", "]", "(", "new_features", ")", "# (B, mlp[-1], npoint, nsample)", "\n", "if", "self", ".", "pool_method", "==", "'max_pool'", ":", "\n", "                ", "new_features", "=", "F", ".", "max_pool2d", "(", "\n", "new_features", ",", "kernel_size", "=", "[", "1", ",", "new_features", ".", "size", "(", "3", ")", "]", "\n", ")", "# (B, mlp[-1], npoint, 1)", "\n", "", "elif", "self", ".", "pool_method", "==", "'avg_pool'", ":", "\n", "                ", "new_features", "=", "F", ".", "avg_pool2d", "(", "\n", "new_features", ",", "kernel_size", "=", "[", "1", ",", "new_features", ".", "size", "(", "3", ")", "]", "\n", ")", "# (B, mlp[-1], npoint, 1)", "\n", "", "else", ":", "\n", "                ", "raise", "NotImplementedError", "\n", "\n", "", "new_features", "=", "new_features", ".", "squeeze", "(", "-", "1", ")", "# (B, mlp[-1], npoint)", "\n", "new_features_list", ".", "append", "(", "new_features", ")", "\n", "\n", "", "return", "new_xyz", ",", "torch", ".", "cat", "(", "new_features_list", ",", "dim", "=", "1", ")", ",", "idx", "\n", "\n"]], "home.repos.pwc.inspect_result.kemo-huang_jmodt.pointnet2.pointnet2_modules.PointnetSAModuleMSG.__init__": [[69, 101], ["pointnet2_modules._PointnetSAModuleBase.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "len", "len", "len", "len", "pointnet2_modules.PointnetSAModuleMSG.groupers.append", "pointnet2_modules.PointnetSAModuleMSG.mlps.append", "pytorch_utils.SharedMLP", "pointnet2_utils.QueryAndGroup", "pointnet2_utils.GroupAll"], "methods", ["home.repos.pwc.inspect_result.kemo-huang_jmodt.pointnet2.pytorch_utils.FC.__init__"], ["def", "__init__", "(", "self", ",", "*", ",", "npoint", ":", "int", ",", "radii", ":", "List", "[", "float", "]", ",", "nsamples", ":", "List", "[", "int", "]", ",", "mlps", ":", "List", "[", "List", "[", "int", "]", "]", ",", "bn", ":", "bool", "=", "True", ",", "\n", "use_xyz", ":", "bool", "=", "True", ",", "pool_method", "=", "'max_pool'", ",", "instance_norm", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        :param npoint: int\n        :param radii: list of float, list of radii to group with\n        :param nsamples: list of int, number of samples in each ball query\n        :param mlps: list of list of int, spec of the pointnet before the global pooling for each scale\n        :param bn: whether to use batchnorm\n        :param use_xyz:\n        :param pool_method: max_pool / avg_pool\n        :param instance_norm: whether to use instance_norm\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "assert", "len", "(", "radii", ")", "==", "len", "(", "nsamples", ")", "==", "len", "(", "mlps", ")", "\n", "\n", "self", ".", "npoint", "=", "npoint", "\n", "self", ".", "groupers", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "mlps", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "radii", ")", ")", ":", "\n", "            ", "radius", "=", "radii", "[", "i", "]", "\n", "nsample", "=", "nsamples", "[", "i", "]", "\n", "self", ".", "groupers", ".", "append", "(", "\n", "pointnet2_utils", ".", "QueryAndGroup", "(", "radius", ",", "nsample", ",", "use_xyz", "=", "use_xyz", ")", "\n", "if", "npoint", "is", "not", "None", "else", "pointnet2_utils", ".", "GroupAll", "(", "use_xyz", ")", "\n", ")", "\n", "mlp_spec", "=", "mlps", "[", "i", "]", "\n", "if", "use_xyz", ":", "\n", "                ", "mlp_spec", "[", "0", "]", "+=", "3", "\n", "\n", "", "self", ".", "mlps", ".", "append", "(", "pt_utils", ".", "SharedMLP", "(", "mlp_spec", ",", "bn", "=", "bn", ",", "instance_norm", "=", "instance_norm", ")", ")", "\n", "", "self", ".", "pool_method", "=", "pool_method", "\n", "\n"]], "home.repos.pwc.inspect_result.kemo-huang_jmodt.pointnet2.pointnet2_modules.PointnetSAModule.__init__": [[106, 121], ["pointnet2_modules.PointnetSAModuleMSG.__init__"], "methods", ["home.repos.pwc.inspect_result.kemo-huang_jmodt.pointnet2.pytorch_utils.FC.__init__"], ["def", "__init__", "(", "self", ",", "*", ",", "mlp", ":", "List", "[", "int", "]", ",", "npoint", ":", "int", "=", "None", ",", "radius", ":", "float", "=", "None", ",", "nsample", ":", "int", "=", "None", ",", "\n", "bn", ":", "bool", "=", "True", ",", "use_xyz", ":", "bool", "=", "True", ",", "pool_method", "=", "'max_pool'", ",", "instance_norm", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        :param mlp: list of int, spec of the pointnet before the global max_pool\n        :param npoint: int, number of features\n        :param radius: float, radius of ball\n        :param nsample: int, number of samples in the ball query\n        :param bn: whether to use batchnorm\n        :param use_xyz:\n        :param pool_method: max_pool / avg_pool\n        :param instance_norm: whether to use instance_norm\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", "\n", "mlps", "=", "[", "mlp", "]", ",", "npoint", "=", "npoint", ",", "radii", "=", "[", "radius", "]", ",", "nsamples", "=", "[", "nsample", "]", ",", "bn", "=", "bn", ",", "use_xyz", "=", "use_xyz", ",", "\n", "pool_method", "=", "pool_method", ",", "instance_norm", "=", "instance_norm", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.kemo-huang_jmodt.pointnet2.pointnet2_modules.PointnetFPModule.__init__": [[127, 134], ["torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Module.__init__", "pytorch_utils.SharedMLP"], "methods", ["home.repos.pwc.inspect_result.kemo-huang_jmodt.pointnet2.pytorch_utils.FC.__init__"], ["def", "__init__", "(", "self", ",", "*", ",", "mlp", ":", "List", "[", "int", "]", ",", "bn", ":", "bool", "=", "True", ",", "activation", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", ":", "\n", "        ", "\"\"\"\n        :param mlp: list of int\n        :param bn: whether to use batchnorm\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "mlp", "=", "pt_utils", ".", "SharedMLP", "(", "mlp", ",", "bn", "=", "bn", ",", "activation", "=", "activation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kemo-huang_jmodt.pointnet2.pointnet2_modules.PointnetFPModule.forward": [[135, 165], ["torch.cat.unsqueeze", "torch.cat.unsqueeze", "torch.cat.unsqueeze", "pointnet2_modules.PointnetFPModule.mlp", "torch.cat.squeeze", "torch.cat.squeeze", "torch.cat.squeeze", "pointnet2_utils.three_nn", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "pointnet2_utils.three_interpolate", "known_feats.expand", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "unknown.size", "known_feats.size"], "methods", ["None"], ["", "def", "forward", "(", "\n", "self", ",", "unknown", ":", "torch", ".", "Tensor", ",", "known", ":", "torch", ".", "Tensor", ",", "unknow_feats", ":", "torch", ".", "Tensor", ",", "known_feats", ":", "torch", ".", "Tensor", "\n", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "\"\"\"\n        :param unknown: (B, n, 3) tensor of the xyz positions of the unknown features\n        :param known: (B, m, 3) tensor of the xyz positions of the known features\n        :param unknow_feats: (B, C1, n) tensor of the features to be propigated to\n        :param known_feats: (B, C2, m) tensor of features to be propigated\n        :return:\n            new_features: (B, mlp[-1], n) tensor of the features of the unknown features\n        \"\"\"", "\n", "if", "known", "is", "not", "None", ":", "\n", "            ", "dist", ",", "idx", "=", "pointnet2_utils", ".", "three_nn", "(", "unknown", ",", "known", ")", "\n", "dist_recip", "=", "1.0", "/", "(", "dist", "+", "1e-8", ")", "\n", "norm", "=", "torch", ".", "sum", "(", "dist_recip", ",", "dim", "=", "2", ",", "keepdim", "=", "True", ")", "\n", "weight", "=", "dist_recip", "/", "norm", "\n", "\n", "interpolated_feats", "=", "pointnet2_utils", ".", "three_interpolate", "(", "known_feats", ",", "idx", ",", "weight", ")", "\n", "", "else", ":", "\n", "            ", "interpolated_feats", "=", "known_feats", ".", "expand", "(", "*", "known_feats", ".", "size", "(", ")", "[", "0", ":", "2", "]", ",", "unknown", ".", "size", "(", "1", ")", ")", "\n", "\n", "", "if", "unknow_feats", "is", "not", "None", ":", "\n", "            ", "new_features", "=", "torch", ".", "cat", "(", "[", "interpolated_feats", ",", "unknow_feats", "]", ",", "dim", "=", "1", ")", "# (B, C2 + C1, n)", "\n", "", "else", ":", "\n", "            ", "new_features", "=", "interpolated_feats", "\n", "\n", "", "new_features", "=", "new_features", ".", "unsqueeze", "(", "-", "1", ")", "\n", "new_features", "=", "self", ".", "mlp", "(", "new_features", ")", "\n", "\n", "return", "new_features", ".", "squeeze", "(", "-", "1", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.kemo-huang_jmodt.pointnet2.pointnet2_utils.FurthestPointSampling.forward": [[12, 31], ["xyz.is_contiguous", "xyz.size", "torch.cuda.IntTensor", "torch.cuda.IntTensor", "torch.cuda.IntTensor", "torch.cuda.IntTensor", "torch.cuda.FloatTensor().fill_", "torch.cuda.FloatTensor().fill_", "torch.cuda.FloatTensor().fill_", "torch.cuda.FloatTensor().fill_", "jmodt.ops.pointnet2.pointnet2_cuda.furthest_point_sampling_wrapper", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "xyz", ":", "torch", ".", "Tensor", ",", "npoint", ":", "int", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "\"\"\"\n        Uses iterative furthest point sampling to select a set of npoint features that have the largest\n        minimum distance\n        :param ctx:\n        :param xyz: (B, N, 3) where N > npoint\n        :param npoint: int, number of features in the sampled set\n        :return:\n             output: (B, npoint) tensor containing the set\n        \"\"\"", "\n", "assert", "xyz", ".", "is_contiguous", "(", ")", "\n", "\n", "B", ",", "N", ",", "_", "=", "xyz", ".", "size", "(", ")", "\n", "output", "=", "torch", ".", "cuda", ".", "IntTensor", "(", "B", ",", "npoint", ")", "\n", "temp", "=", "torch", ".", "cuda", ".", "FloatTensor", "(", "B", ",", "N", ")", ".", "fill_", "(", "1e10", ")", "\n", "\n", "pointnet2_cuda", ".", "furthest_point_sampling_wrapper", "(", "B", ",", "N", ",", "npoint", ",", "xyz", ",", "temp", ",", "output", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.kemo-huang_jmodt.pointnet2.pointnet2_utils.FurthestPointSampling.backward": [[32, 35], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "xyz", ",", "a", "=", "None", ")", ":", "\n", "        ", "return", "None", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.kemo-huang_jmodt.pointnet2.pointnet2_utils.GatherOperation.forward": [[42, 62], ["features.is_contiguous", "idx.is_contiguous", "idx.size", "features.size", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "jmodt.ops.pointnet2.pointnet2_cuda.gather_points_wrapper"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "features", ":", "torch", ".", "Tensor", ",", "idx", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "\"\"\"\n        :param ctx:\n        :param features: (B, C, N)\n        :param idx: (B, npoint) index tensor of the features to gather\n        :return:\n            output: (B, C, npoint)\n        \"\"\"", "\n", "assert", "features", ".", "is_contiguous", "(", ")", "\n", "assert", "idx", ".", "is_contiguous", "(", ")", "\n", "\n", "B", ",", "npoint", "=", "idx", ".", "size", "(", ")", "\n", "_", ",", "C", ",", "N", "=", "features", ".", "size", "(", ")", "\n", "output", "=", "torch", ".", "cuda", ".", "FloatTensor", "(", "B", ",", "C", ",", "npoint", ")", "\n", "\n", "pointnet2_cuda", ".", "gather_points_wrapper", "(", "B", ",", "C", ",", "N", ",", "npoint", ",", "features", ",", "idx", ",", "output", ")", "\n", "\n", "ctx", ".", "for_backwards", "=", "(", "idx", ",", "C", ",", "N", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.kemo-huang_jmodt.pointnet2.pointnet2_utils.GatherOperation.backward": [[63, 72], ["idx.size", "torch.autograd.Variable", "torch.autograd.Variable", "grad_out.data.contiguous", "jmodt.ops.pointnet2.pointnet2_cuda.gather_points_grad_wrapper", "torch.cuda.FloatTensor().zero_", "torch.cuda.FloatTensor().zero_", "torch.cuda.FloatTensor().zero_", "torch.cuda.FloatTensor().zero_", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "grad_out", ")", ":", "\n", "        ", "idx", ",", "C", ",", "N", "=", "ctx", ".", "for_backwards", "\n", "B", ",", "npoint", "=", "idx", ".", "size", "(", ")", "\n", "\n", "grad_features", "=", "Variable", "(", "torch", ".", "cuda", ".", "FloatTensor", "(", "B", ",", "C", ",", "N", ")", ".", "zero_", "(", ")", ")", "\n", "grad_out_data", "=", "grad_out", ".", "data", ".", "contiguous", "(", ")", "\n", "pointnet2_cuda", ".", "gather_points_grad_wrapper", "(", "B", ",", "C", ",", "N", ",", "npoint", ",", "grad_out_data", ",", "idx", ",", "grad_features", ".", "data", ")", "\n", "return", "grad_features", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.kemo-huang_jmodt.pointnet2.pointnet2_utils.ThreeNN.forward": [[79, 100], ["unknown.is_contiguous", "known.is_contiguous", "unknown.size", "known.size", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.IntTensor", "torch.cuda.IntTensor", "torch.cuda.IntTensor", "torch.cuda.IntTensor", "jmodt.ops.pointnet2.pointnet2_cuda.three_nn_wrapper", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "unknown", ":", "torch", ".", "Tensor", ",", "known", ":", "torch", ".", "Tensor", ")", "->", "Tuple", "[", "torch", ".", "Tensor", ",", "torch", ".", "Tensor", "]", ":", "\n", "        ", "\"\"\"\n        Find the three nearest neighbors of unknown in known\n        :param ctx:\n        :param unknown: (B, N, 3)\n        :param known: (B, M, 3)\n        :return:\n            dist: (B, N, 3) l2 distance to the three nearest neighbors\n            idx: (B, N, 3) index of 3 nearest neighbors\n        \"\"\"", "\n", "assert", "unknown", ".", "is_contiguous", "(", ")", "\n", "assert", "known", ".", "is_contiguous", "(", ")", "\n", "\n", "B", ",", "N", ",", "_", "=", "unknown", ".", "size", "(", ")", "\n", "m", "=", "known", ".", "size", "(", "1", ")", "\n", "dist2", "=", "torch", ".", "cuda", ".", "FloatTensor", "(", "B", ",", "N", ",", "3", ")", "\n", "idx", "=", "torch", ".", "cuda", ".", "IntTensor", "(", "B", ",", "N", ",", "3", ")", "\n", "\n", "pointnet2_cuda", ".", "three_nn_wrapper", "(", "B", ",", "N", ",", "m", ",", "unknown", ",", "known", ",", "dist2", ",", "idx", ")", "\n", "return", "torch", ".", "sqrt", "(", "dist2", ")", ",", "idx", "\n", "\n"]], "home.repos.pwc.inspect_result.kemo-huang_jmodt.pointnet2.pointnet2_utils.ThreeNN.backward": [[101, 104], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "a", "=", "None", ",", "b", "=", "None", ")", ":", "\n", "        ", "return", "None", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.kemo-huang_jmodt.pointnet2.pointnet2_utils.ThreeInterpolate.forward": [[111, 133], ["features.is_contiguous", "idx.is_contiguous", "weight.is_contiguous", "features.size", "idx.size", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "jmodt.ops.pointnet2.pointnet2_cuda.three_interpolate_wrapper", "features.float"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "features", ":", "torch", ".", "Tensor", ",", "idx", ":", "torch", ".", "Tensor", ",", "weight", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "\"\"\"\n        Performs weight linear interpolation on 3 features\n        :param ctx:\n        :param features: (B, C, M) Features descriptors to be interpolated from\n        :param idx: (B, n, 3) three nearest neighbors of the target features in features\n        :param weight: (B, n, 3) weights\n        :return:\n            output: (B, C, N) tensor of the interpolated features\n        \"\"\"", "\n", "assert", "features", ".", "is_contiguous", "(", ")", "\n", "assert", "idx", ".", "is_contiguous", "(", ")", "\n", "assert", "weight", ".", "is_contiguous", "(", ")", "\n", "\n", "B", ",", "c", ",", "m", "=", "features", ".", "size", "(", ")", "\n", "n", "=", "idx", ".", "size", "(", "1", ")", "\n", "ctx", ".", "three_interpolate_for_backward", "=", "(", "idx", ",", "weight", ",", "m", ")", "\n", "output", "=", "torch", ".", "cuda", ".", "FloatTensor", "(", "B", ",", "c", ",", "n", ")", "\n", "\n", "pointnet2_cuda", ".", "three_interpolate_wrapper", "(", "B", ",", "c", ",", "m", ",", "n", ",", "features", ".", "float", "(", ")", ",", "idx", ",", "weight", ",", "output", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.kemo-huang_jmodt.pointnet2.pointnet2_utils.ThreeInterpolate.backward": [[134, 152], ["grad_out.size", "torch.autograd.Variable", "torch.autograd.Variable", "grad_out.data.contiguous", "jmodt.ops.pointnet2.pointnet2_cuda.three_interpolate_grad_wrapper", "torch.cuda.FloatTensor().zero_", "torch.cuda.FloatTensor().zero_", "torch.cuda.FloatTensor().zero_", "torch.cuda.FloatTensor().zero_", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "grad_out", ":", "torch", ".", "Tensor", ")", "->", "Tuple", "[", "torch", ".", "Tensor", ",", "torch", ".", "Tensor", ",", "torch", ".", "Tensor", "]", ":", "\n", "        ", "\"\"\"\n        :param ctx:\n        :param grad_out: (B, C, N) tensor with gradients of outputs\n        :return:\n            grad_features: (B, C, M) tensor with gradients of features\n            None:\n            None:\n        \"\"\"", "\n", "idx", ",", "weight", ",", "m", "=", "ctx", ".", "three_interpolate_for_backward", "\n", "B", ",", "c", ",", "n", "=", "grad_out", ".", "size", "(", ")", "\n", "\n", "grad_features", "=", "Variable", "(", "torch", ".", "cuda", ".", "FloatTensor", "(", "B", ",", "c", ",", "m", ")", ".", "zero_", "(", ")", ")", "\n", "grad_out_data", "=", "grad_out", ".", "data", ".", "contiguous", "(", ")", "\n", "\n", "pointnet2_cuda", ".", "three_interpolate_grad_wrapper", "(", "B", ",", "c", ",", "n", ",", "m", ",", "grad_out_data", ",", "idx", ",", "weight", ",", "grad_features", ".", "data", ")", "\n", "return", "grad_features", ",", "None", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.kemo-huang_jmodt.pointnet2.pointnet2_utils.GroupingOperation.forward": [[159, 179], ["features.is_contiguous", "idx.is_contiguous", "idx.size", "features.size", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "jmodt.ops.pointnet2.pointnet2_cuda.group_points_wrapper", "features.float"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "features", ":", "torch", ".", "Tensor", ",", "idx", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "\"\"\"\n        :param ctx:\n        :param features: (B, C, N) tensor of features to group\n        :param idx: (B, npoint, nsample) tensor containing the indicies of features to group with\n        :return:\n            output: (B, C, npoint, nsample) tensor\n        \"\"\"", "\n", "assert", "features", ".", "is_contiguous", "(", ")", "\n", "assert", "idx", ".", "is_contiguous", "(", ")", "\n", "\n", "B", ",", "nfeatures", ",", "nsample", "=", "idx", ".", "size", "(", ")", "\n", "_", ",", "C", ",", "N", "=", "features", ".", "size", "(", ")", "\n", "output", "=", "torch", ".", "cuda", ".", "FloatTensor", "(", "B", ",", "C", ",", "nfeatures", ",", "nsample", ")", "\n", "\n", "pointnet2_cuda", ".", "group_points_wrapper", "(", "B", ",", "C", ",", "N", ",", "nfeatures", ",", "nsample", ",", "features", ".", "float", "(", ")", ",", "idx", ",", "output", ")", "\n", "\n", "ctx", ".", "for_backwards", "=", "(", "idx", ",", "N", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.kemo-huang_jmodt.pointnet2.pointnet2_utils.GroupingOperation.backward": [[180, 196], ["grad_out.size", "torch.autograd.Variable", "torch.autograd.Variable", "grad_out.data.contiguous", "jmodt.ops.pointnet2.pointnet2_cuda.group_points_grad_wrapper", "torch.cuda.FloatTensor().zero_", "torch.cuda.FloatTensor().zero_", "torch.cuda.FloatTensor().zero_", "torch.cuda.FloatTensor().zero_", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "grad_out", ":", "torch", ".", "Tensor", ")", "->", "Tuple", "[", "torch", ".", "Tensor", ",", "torch", ".", "Tensor", "]", ":", "\n", "        ", "\"\"\"\n        :param ctx:\n        :param grad_out: (B, C, npoint, nsample) tensor of the gradients of the output from forward\n        :return:\n            grad_features: (B, C, N) gradient of the features\n        \"\"\"", "\n", "idx", ",", "N", "=", "ctx", ".", "for_backwards", "\n", "\n", "B", ",", "C", ",", "npoint", ",", "nsample", "=", "grad_out", ".", "size", "(", ")", "\n", "grad_features", "=", "Variable", "(", "torch", ".", "cuda", ".", "FloatTensor", "(", "B", ",", "C", ",", "N", ")", ".", "zero_", "(", ")", ")", "\n", "\n", "grad_out_data", "=", "grad_out", ".", "data", ".", "contiguous", "(", ")", "\n", "pointnet2_cuda", ".", "group_points_grad_wrapper", "(", "B", ",", "C", ",", "N", ",", "npoint", ",", "nsample", ",", "grad_out_data", ",", "idx", ",", "grad_features", ".", "data", ")", "\n", "return", "grad_features", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.kemo-huang_jmodt.pointnet2.pointnet2_utils.BallQuery.forward": [[203, 223], ["new_xyz.is_contiguous", "xyz.is_contiguous", "xyz.size", "new_xyz.size", "torch.cuda.IntTensor().zero_", "torch.cuda.IntTensor().zero_", "torch.cuda.IntTensor().zero_", "torch.cuda.IntTensor().zero_", "jmodt.ops.pointnet2.pointnet2_cuda.ball_query_wrapper", "torch.cuda.IntTensor", "torch.cuda.IntTensor", "torch.cuda.IntTensor", "torch.cuda.IntTensor"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "radius", ":", "float", ",", "nsample", ":", "int", ",", "xyz", ":", "torch", ".", "Tensor", ",", "new_xyz", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "\"\"\"\n        :param ctx:\n        :param radius: float, radius of the balls\n        :param nsample: int, maximum number of features in the balls\n        :param xyz: (B, N, 3) xyz coordinates of the features\n        :param new_xyz: (B, npoint, 3) centers of the ball query\n        :return:\n            idx: (B, npoint, nsample) tensor with the indicies of the features that form the query balls\n        \"\"\"", "\n", "assert", "new_xyz", ".", "is_contiguous", "(", ")", "\n", "assert", "xyz", ".", "is_contiguous", "(", ")", "\n", "\n", "B", ",", "N", ",", "_", "=", "xyz", ".", "size", "(", ")", "\n", "npoint", "=", "new_xyz", ".", "size", "(", "1", ")", "\n", "idx", "=", "torch", ".", "cuda", ".", "IntTensor", "(", "B", ",", "npoint", ",", "nsample", ")", ".", "zero_", "(", ")", "\n", "\n", "pointnet2_cuda", ".", "ball_query_wrapper", "(", "B", ",", "N", ",", "npoint", ",", "radius", ",", "nsample", ",", "new_xyz", ",", "xyz", ",", "idx", ")", "\n", "return", "idx", "\n", "\n"]], "home.repos.pwc.inspect_result.kemo-huang_jmodt.pointnet2.pointnet2_utils.BallQuery.backward": [[224, 227], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "a", "=", "None", ")", ":", "\n", "        ", "return", "None", ",", "None", ",", "None", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.kemo-huang_jmodt.pointnet2.pointnet2_utils.QueryAndGroup.__init__": [[233, 241], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.kemo-huang_jmodt.pointnet2.pytorch_utils.FC.__init__"], ["    ", "def", "__init__", "(", "self", ",", "radius", ":", "float", ",", "nsample", ":", "int", ",", "use_xyz", ":", "bool", "=", "True", ")", ":", "\n", "        ", "\"\"\"\n        :param radius: float, radius of ball\n        :param nsample: int, maximum number of features to gather in the ball\n        :param use_xyz:\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "radius", ",", "self", ".", "nsample", ",", "self", ".", "use_xyz", "=", "radius", ",", "nsample", ",", "use_xyz", "\n", "\n"]], "home.repos.pwc.inspect_result.kemo-huang_jmodt.pointnet2.pointnet2_utils.QueryAndGroup.forward": [[242, 266], ["ball_query", "xyz.transpose().contiguous", "grouping_operation", "new_xyz.transpose().contiguous().unsqueeze", "grouping_operation", "xyz.transpose", "new_xyz.transpose().contiguous", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "new_xyz.transpose"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "xyz", ":", "torch", ".", "Tensor", ",", "new_xyz", ":", "torch", ".", "Tensor", ",", "features", ":", "torch", ".", "Tensor", "=", "None", ")", "->", "Tuple", "[", "torch", ".", "Tensor", "]", ":", "\n", "        ", "\"\"\"\n        :param xyz: (B, N, 3) xyz coordinates of the features\n        :param new_xyz: (B, npoint, 3) centroids\n        :param features: (B, C, N) descriptors of the features\n        :return:\n            new_features: (B, 3 + C, npoint, nsample)\n        \"\"\"", "\n", "idx", "=", "ball_query", "(", "self", ".", "radius", ",", "self", ".", "nsample", ",", "xyz", ",", "new_xyz", ")", "\n", "xyz_trans", "=", "xyz", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "grouped_xyz", "=", "grouping_operation", "(", "xyz_trans", ",", "idx", ")", "# (B, 3, npoint, nsample)", "\n", "grouped_xyz", "-=", "new_xyz", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", ".", "unsqueeze", "(", "-", "1", ")", "\n", "\n", "if", "features", "is", "not", "None", ":", "\n", "            ", "grouped_features", "=", "grouping_operation", "(", "features", ",", "idx", ")", "\n", "if", "self", ".", "use_xyz", ":", "\n", "                ", "new_features", "=", "torch", ".", "cat", "(", "[", "grouped_xyz", ",", "grouped_features", "]", ",", "dim", "=", "1", ")", "# (B, C + 3, npoint, nsample)", "\n", "", "else", ":", "\n", "                ", "new_features", "=", "grouped_features", "\n", "", "", "else", ":", "\n", "            ", "assert", "self", ".", "use_xyz", ",", "\"Cannot have not features and not use xyz as a feature!\"", "\n", "new_features", "=", "grouped_xyz", "\n", "\n", "", "return", "new_features", "\n", "\n"]], "home.repos.pwc.inspect_result.kemo-huang_jmodt.pointnet2.pointnet2_utils.GroupAll.__init__": [[269, 272], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.kemo-huang_jmodt.pointnet2.pytorch_utils.FC.__init__"], ["    ", "def", "__init__", "(", "self", ",", "use_xyz", ":", "bool", "=", "True", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "use_xyz", "=", "use_xyz", "\n", "\n"]], "home.repos.pwc.inspect_result.kemo-huang_jmodt.pointnet2.pointnet2_utils.GroupAll.forward": [[273, 292], ["xyz.transpose().contiguous().unsqueeze", "features.unsqueeze", "xyz.transpose().contiguous", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "xyz.transpose"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "xyz", ":", "torch", ".", "Tensor", ",", "new_xyz", ":", "torch", ".", "Tensor", ",", "features", ":", "torch", ".", "Tensor", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        :param xyz: (B, N, 3) xyz coordinates of the features\n        :param new_xyz: ignored\n        :param features: (B, C, N) descriptors of the features\n        :return:\n            new_features: (B, C + 3, 1, N)\n        \"\"\"", "\n", "grouped_xyz", "=", "xyz", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", ".", "unsqueeze", "(", "2", ")", "\n", "if", "features", "is", "not", "None", ":", "\n", "            ", "grouped_features", "=", "features", ".", "unsqueeze", "(", "2", ")", "\n", "if", "self", ".", "use_xyz", ":", "\n", "                ", "new_features", "=", "torch", ".", "cat", "(", "[", "grouped_xyz", ",", "grouped_features", "]", ",", "dim", "=", "1", ")", "# (B, 3 + C, 1, N)", "\n", "", "else", ":", "\n", "                ", "new_features", "=", "grouped_features", "\n", "", "", "else", ":", "\n", "            ", "new_features", "=", "grouped_xyz", "\n", "\n", "", "return", "new_features", "\n", "", "", ""]], "home.repos.pwc.inspect_result.kemo-huang_jmodt.pointnet2.pytorch_utils.SharedMLP.__init__": [[8, 32], ["torch.ReLU", "torch.Sequential.__init__", "range", "pytorch_utils.SharedMLP.add_module", "len", "pytorch_utils.Conv2d"], "methods", ["home.repos.pwc.inspect_result.kemo-huang_jmodt.pointnet2.pytorch_utils.FC.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "args", ":", "List", "[", "int", "]", ",", "\n", "*", ",", "\n", "bn", ":", "bool", "=", "False", ",", "\n", "activation", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "preact", ":", "bool", "=", "False", ",", "\n", "first", ":", "bool", "=", "False", ",", "\n", "name", ":", "str", "=", "\"\"", ",", "\n", "instance_norm", ":", "bool", "=", "False", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "args", ")", "-", "1", ")", ":", "\n", "            ", "self", ".", "add_module", "(", "\n", "name", "+", "'layer{}'", ".", "format", "(", "i", ")", ",", "\n", "Conv2d", "(", "\n", "args", "[", "i", "]", ",", "\n", "args", "[", "i", "+", "1", "]", ",", "\n", "bn", "=", "(", "not", "first", "or", "not", "preact", "or", "(", "i", "!=", "0", ")", ")", "and", "bn", ",", "\n", "activation", "=", "activation", "\n", "if", "(", "not", "first", "or", "not", "preact", "or", "(", "i", "!=", "0", ")", ")", "else", "None", ",", "\n", "preact", "=", "preact", ",", "\n", "instance_norm", "=", "instance_norm", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.kemo-huang_jmodt.pointnet2.pytorch_utils._ConvBase.__init__": [[38, 103], ["torch.Sequential.__init__", "conv", "init", "pytorch_utils._ConvBase.add_module", "torch.init.constant_", "batch_norm", "batch_norm", "instance_norm_func", "instance_norm_func", "pytorch_utils._ConvBase.add_module", "pytorch_utils._ConvBase.add_module", "pytorch_utils._ConvBase.add_module", "pytorch_utils._ConvBase.add_module", "pytorch_utils._ConvBase.add_module", "pytorch_utils._ConvBase.add_module"], "methods", ["home.repos.pwc.inspect_result.kemo-huang_jmodt.pointnet2.pytorch_utils.FC.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "in_size", ",", "\n", "out_size", ",", "\n", "kernel_size", ",", "\n", "stride", ",", "\n", "padding", ",", "\n", "activation", ",", "\n", "bn", ",", "\n", "init", ",", "\n", "conv", "=", "None", ",", "\n", "batch_norm", "=", "None", ",", "\n", "bias", "=", "True", ",", "\n", "preact", "=", "False", ",", "\n", "name", "=", "\"\"", ",", "\n", "instance_norm", "=", "False", ",", "\n", "instance_norm_func", "=", "None", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "bias", "=", "bias", "and", "(", "not", "bn", ")", "\n", "conv_unit", "=", "conv", "(", "\n", "in_size", ",", "\n", "out_size", ",", "\n", "kernel_size", "=", "kernel_size", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "padding", ",", "\n", "bias", "=", "bias", "\n", ")", "\n", "init", "(", "conv_unit", ".", "weight", ")", "\n", "if", "bias", ":", "\n", "            ", "nn", ".", "init", ".", "constant_", "(", "conv_unit", ".", "bias", ",", "0", ")", "\n", "\n", "", "if", "bn", ":", "\n", "            ", "if", "not", "preact", ":", "\n", "                ", "bn_unit", "=", "batch_norm", "(", "out_size", ")", "\n", "", "else", ":", "\n", "                ", "bn_unit", "=", "batch_norm", "(", "in_size", ")", "\n", "", "", "if", "instance_norm", ":", "\n", "            ", "if", "not", "preact", ":", "\n", "                ", "in_unit", "=", "instance_norm_func", "(", "out_size", ",", "affine", "=", "False", ",", "track_running_stats", "=", "False", ")", "\n", "", "else", ":", "\n", "                ", "in_unit", "=", "instance_norm_func", "(", "in_size", ",", "affine", "=", "False", ",", "track_running_stats", "=", "False", ")", "\n", "\n", "", "", "if", "preact", ":", "\n", "            ", "if", "bn", ":", "\n", "                ", "self", ".", "add_module", "(", "name", "+", "'bn'", ",", "bn_unit", ")", "\n", "\n", "", "if", "activation", "is", "not", "None", ":", "\n", "                ", "self", ".", "add_module", "(", "name", "+", "'activation'", ",", "activation", ")", "\n", "\n", "", "if", "not", "bn", "and", "instance_norm", ":", "\n", "                ", "self", ".", "add_module", "(", "name", "+", "'in'", ",", "in_unit", ")", "\n", "\n", "", "", "self", ".", "add_module", "(", "name", "+", "'conv'", ",", "conv_unit", ")", "\n", "\n", "if", "not", "preact", ":", "\n", "            ", "if", "bn", ":", "\n", "                ", "self", ".", "add_module", "(", "name", "+", "'bn'", ",", "bn_unit", ")", "\n", "\n", "", "if", "activation", "is", "not", "None", ":", "\n", "                ", "self", ".", "add_module", "(", "name", "+", "'activation'", ",", "activation", ")", "\n", "\n", "", "if", "not", "bn", "and", "instance_norm", ":", "\n", "                ", "self", ".", "add_module", "(", "name", "+", "'in'", ",", "in_unit", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kemo-huang_jmodt.pointnet2.pytorch_utils._BNBase.__init__": [[107, 113], ["torch.Sequential.__init__", "pytorch_utils._BNBase.add_module", "torch.init.constant_", "torch.init.constant_", "batch_norm"], "methods", ["home.repos.pwc.inspect_result.kemo-huang_jmodt.pointnet2.pytorch_utils.FC.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_size", ",", "batch_norm", "=", "None", ",", "name", "=", "\"\"", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "add_module", "(", "name", "+", "\"bn\"", ",", "batch_norm", "(", "in_size", ")", ")", "\n", "\n", "nn", ".", "init", ".", "constant_", "(", "self", "[", "0", "]", ".", "weight", ",", "1.0", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "self", "[", "0", "]", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kemo-huang_jmodt.pointnet2.pytorch_utils.BatchNorm1d.__init__": [[117, 119], ["pytorch_utils._BNBase.__init__"], "methods", ["home.repos.pwc.inspect_result.kemo-huang_jmodt.pointnet2.pytorch_utils.FC.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_size", ":", "int", ",", "*", ",", "name", ":", "str", "=", "\"\"", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "in_size", ",", "batch_norm", "=", "nn", ".", "BatchNorm1d", ",", "name", "=", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kemo-huang_jmodt.pointnet2.pytorch_utils.BatchNorm2d.__init__": [[123, 125], ["pytorch_utils._BNBase.__init__"], "methods", ["home.repos.pwc.inspect_result.kemo-huang_jmodt.pointnet2.pytorch_utils.FC.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_size", ":", "int", ",", "name", ":", "str", "=", "\"\"", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "in_size", ",", "batch_norm", "=", "nn", ".", "BatchNorm2d", ",", "name", "=", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kemo-huang_jmodt.pointnet2.pytorch_utils.Conv1d.__init__": [[129, 161], ["torch.ReLU", "pytorch_utils._ConvBase.__init__"], "methods", ["home.repos.pwc.inspect_result.kemo-huang_jmodt.pointnet2.pytorch_utils.FC.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "in_size", ":", "int", ",", "\n", "out_size", ":", "int", ",", "\n", "*", ",", "\n", "kernel_size", ":", "int", "=", "1", ",", "\n", "stride", ":", "int", "=", "1", ",", "\n", "padding", ":", "int", "=", "0", ",", "\n", "activation", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "bn", ":", "bool", "=", "False", ",", "\n", "init", "=", "nn", ".", "init", ".", "kaiming_normal_", ",", "\n", "bias", ":", "bool", "=", "True", ",", "\n", "preact", ":", "bool", "=", "False", ",", "\n", "name", ":", "str", "=", "\"\"", ",", "\n", "instance_norm", "=", "False", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\n", "in_size", ",", "\n", "out_size", ",", "\n", "kernel_size", ",", "\n", "stride", ",", "\n", "padding", ",", "\n", "activation", ",", "\n", "bn", ",", "\n", "init", ",", "\n", "conv", "=", "nn", ".", "Conv1d", ",", "\n", "batch_norm", "=", "BatchNorm1d", ",", "\n", "bias", "=", "bias", ",", "\n", "preact", "=", "preact", ",", "\n", "name", "=", "name", ",", "\n", "instance_norm", "=", "instance_norm", ",", "\n", "instance_norm_func", "=", "nn", ".", "InstanceNorm1d", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.kemo-huang_jmodt.pointnet2.pytorch_utils.Conv2d.__init__": [[166, 198], ["torch.ReLU", "pytorch_utils._ConvBase.__init__"], "methods", ["home.repos.pwc.inspect_result.kemo-huang_jmodt.pointnet2.pytorch_utils.FC.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "in_size", ":", "int", ",", "\n", "out_size", ":", "int", ",", "\n", "*", ",", "\n", "kernel_size", ":", "Tuple", "[", "int", ",", "int", "]", "=", "(", "1", ",", "1", ")", ",", "\n", "stride", ":", "Tuple", "[", "int", ",", "int", "]", "=", "(", "1", ",", "1", ")", ",", "\n", "padding", ":", "Tuple", "[", "int", ",", "int", "]", "=", "(", "0", ",", "0", ")", ",", "\n", "activation", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "bn", ":", "bool", "=", "False", ",", "\n", "init", "=", "nn", ".", "init", ".", "kaiming_normal_", ",", "\n", "bias", ":", "bool", "=", "True", ",", "\n", "preact", ":", "bool", "=", "False", ",", "\n", "name", ":", "str", "=", "\"\"", ",", "\n", "instance_norm", "=", "False", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\n", "in_size", ",", "\n", "out_size", ",", "\n", "kernel_size", ",", "\n", "stride", ",", "\n", "padding", ",", "\n", "activation", ",", "\n", "bn", ",", "\n", "init", ",", "\n", "conv", "=", "nn", ".", "Conv2d", ",", "\n", "batch_norm", "=", "BatchNorm2d", ",", "\n", "bias", "=", "bias", ",", "\n", "preact", "=", "preact", ",", "\n", "name", "=", "name", ",", "\n", "instance_norm", "=", "instance_norm", ",", "\n", "instance_norm_func", "=", "nn", ".", "InstanceNorm2d", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.kemo-huang_jmodt.pointnet2.pytorch_utils.FC.__init__": [[203, 237], ["torch.ReLU", "torch.Sequential.__init__", "torch.Linear", "pytorch_utils.FC.add_module", "init", "torch.init.constant", "pytorch_utils.FC.add_module", "pytorch_utils.FC.add_module", "pytorch_utils.FC.add_module", "pytorch_utils.FC.add_module", "pytorch_utils.BatchNorm1d", "pytorch_utils.BatchNorm1d"], "methods", ["home.repos.pwc.inspect_result.kemo-huang_jmodt.pointnet2.pytorch_utils.FC.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "in_size", ":", "int", ",", "\n", "out_size", ":", "int", ",", "\n", "*", ",", "\n", "activation", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "bn", ":", "bool", "=", "False", ",", "\n", "init", "=", "None", ",", "\n", "preact", ":", "bool", "=", "False", ",", "\n", "name", ":", "str", "=", "\"\"", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "fc", "=", "nn", ".", "Linear", "(", "in_size", ",", "out_size", ",", "bias", "=", "not", "bn", ")", "\n", "if", "init", "is", "not", "None", ":", "\n", "            ", "init", "(", "fc", ".", "weight", ")", "\n", "", "if", "not", "bn", ":", "\n", "            ", "nn", ".", "init", ".", "constant", "(", "fc", ".", "bias", ",", "0", ")", "\n", "\n", "", "if", "preact", ":", "\n", "            ", "if", "bn", ":", "\n", "                ", "self", ".", "add_module", "(", "name", "+", "'bn'", ",", "BatchNorm1d", "(", "in_size", ")", ")", "\n", "\n", "", "if", "activation", "is", "not", "None", ":", "\n", "                ", "self", ".", "add_module", "(", "name", "+", "'activation'", ",", "activation", ")", "\n", "\n", "", "", "self", ".", "add_module", "(", "name", "+", "'fc'", ",", "fc", ")", "\n", "\n", "if", "not", "preact", ":", "\n", "            ", "if", "bn", ":", "\n", "                ", "self", ".", "add_module", "(", "name", "+", "'bn'", ",", "BatchNorm1d", "(", "out_size", ")", ")", "\n", "\n", "", "if", "activation", "is", "not", "None", ":", "\n", "                ", "self", ".", "add_module", "(", "name", "+", "'activation'", ",", "activation", ")", "\n", "", "", "", "", ""]]}