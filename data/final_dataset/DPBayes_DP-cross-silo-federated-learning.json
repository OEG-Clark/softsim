{"home.repos.pwc.inspect_result.DPBayes_DP-cross-silo-federated-learning.None.run_master.run_train_loop": [[187, 302], ["range", "print", "time.time", "optimizer.zero_grad", "master_comm_funs.send_weights", "range", "optimizer.step", "time.sleep", "waiting_dict.keys", "utils.BogusModel", "master_comm_funs.parse_fat_grads", "torch.zeros", "torch.zeros", "torch.get_rng_state", "torch.get_rng_state", "torch.set_rng_state", "torch.set_rng_state", "range", "torch.get_rng_state", "torch.get_rng_state", "torch.set_rng_state", "torch.set_rng_state", "enumerate", "run_times.append", "waiting_dict.pop", "len", "master_comm_funs.kill_clients", "sys.exit", "torch.zeros().expand", "torch.zeros().expand", "master_comm_funs.parse_thin_grads", "utils.generate_proj_matrix_piece", "fc_model.parameters", "os.remove", "found_grads.append", "master_comm_funs.parse_fat_grads_pairwise", "master_comm_funs.kill_clients", "sys.exit", "torch.mm().view", "torch.mm().view", "param_vec[].reshape().detach", "time.time", "open", "open", "pickle.load", "os.remove", "os.remove", "waiting_dict.keys", "torch.zeros", "torch.zeros", "sys.exit", "sys.exit", "str", "torch.mm", "torch.mm", "param_vec[].reshape", "str", "str", "str", "str", "str", "[].grad[].reshape", "p.size", "utils.BogusModel.parameters"], "function", ["home.repos.pwc.inspect_result.DPBayes_DP-cross-silo-federated-learning.None.master_comm_funs.send_weights", "home.repos.pwc.inspect_result.DPBayes_DP-cross-silo-federated-learning.None.master_comm_funs.parse_fat_grads", "home.repos.pwc.inspect_result.DPBayes_DP-cross-silo-federated-learning.None.master_comm_funs.kill_clients", "home.repos.pwc.inspect_result.DPBayes_DP-cross-silo-federated-learning.None.master_comm_funs.parse_thin_grads", "home.repos.pwc.inspect_result.DPBayes_DP-cross-silo-federated-learning.None.utils.generate_proj_matrix_piece", "home.repos.pwc.inspect_result.DPBayes_DP-cross-silo-federated-learning.None.utils.BogusModel.parameters", "home.repos.pwc.inspect_result.DPBayes_DP-cross-silo-federated-learning.None.master_comm_funs.parse_fat_grads_pairwise", "home.repos.pwc.inspect_result.DPBayes_DP-cross-silo-federated-learning.None.master_comm_funs.kill_clients", "home.repos.pwc.inspect_result.DPBayes_DP-cross-silo-federated-learning.None.utils.BogusModel.parameters"], ["def", "run_train_loop", "(", "model1", ",", "fc_model", ",", "optimizer", ",", "all_params", ",", "epoch", "=", "None", ",", "run_times", "=", "None", ",", "dim_red_rng_state", "=", "None", ")", ":", "\n", "\n", "    ", "for", "t", "in", "range", "(", "all_params", "[", "'n_train_iters'", "]", ")", ":", "\n", "        ", "print", "(", "'Master starting training iteration {} on epoch {}'", ".", "format", "(", "t", ",", "epoch", ")", ")", "\n", "start_iter", "=", "time", ".", "time", "(", ")", "\n", "\n", "if", "not", "all_params", "[", "'debug'", "]", ":", "\n", "# clear old grads", "\n", "            ", "for", "k", "in", "all_params", "[", "'client_list'", "]", ":", "\n", "                ", "try", ":", "\n", "                    ", "os", ".", "remove", "(", "all_params", "[", "'sent_grads_file'", "]", "+", "str", "(", "k", ")", ")", "\n", "pass", "\n", "", "except", "FileNotFoundError", "as", "err", ":", "\n", "                    ", "pass", "\n", "\n", "", "", "", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "# send current params to all parties and ping", "\n", "send_weights", "(", "fc_model", ",", "all_params", ")", "\n", "\n", "# wait for gradients", "\n", "waiting_dict", "=", "{", "key", ":", "1", "for", "key", "in", "all_params", "[", "'client_list'", "]", "}", "\n", "#print(waiting_dict, len(waiting_dict))", "\n", "\n", "all_msg", "=", "{", "}", "\n", "#print('Master waiting for grads on epoch {}'.format(epoch))", "\n", "for", "i_wait", "in", "range", "(", "all_params", "[", "'master_max_wait'", "]", ")", ":", "\n", "\n", "            ", "time", ".", "sleep", "(", "all_params", "[", "'loop_wait_time'", "]", ")", "\n", "found_grads", "=", "[", "]", "\n", "for", "k", "in", "waiting_dict", ".", "keys", "(", ")", ":", "\n", "                ", "try", ":", "\n", "                    ", "with", "open", "(", "all_params", "[", "'grads_ping_file'", "]", "+", "str", "(", "k", ")", ",", "'r'", ")", "as", "f", ":", "\n", "                        ", "pass", "\n", "", "with", "open", "(", "all_params", "[", "'sent_grads_file'", "]", "+", "str", "(", "k", ")", ",", "'rb'", ")", "as", "f", ":", "\n", "                        ", "all_msg", "[", "str", "(", "k", ")", "]", "=", "pickle", ".", "load", "(", "f", ")", "\n", "#print('Read grad msg from client {}'.format(k))", "\n", "", "if", "not", "all_params", "[", "'debug'", "]", ":", "\n", "                        ", "os", ".", "remove", "(", "all_params", "[", "'grads_ping_file'", "]", "+", "str", "(", "k", ")", ")", "\n", "os", ".", "remove", "(", "all_params", "[", "'sent_grads_file'", "]", "+", "str", "(", "k", ")", ")", "\n", "\n", "", "found_grads", ".", "append", "(", "k", ")", "\n", "\n", "", "except", "FileNotFoundError", "as", "err", ":", "\n", "                    ", "pass", "\n", "", "", "for", "k", "in", "found_grads", ":", "\n", "                ", "waiting_dict", ".", "pop", "(", "k", ")", "\n", "", "if", "len", "(", "waiting_dict", ")", "==", "0", ":", "\n", "                ", "break", "\n", "\n", "", "if", "i_wait", "==", "all_params", "[", "'master_max_wait'", "]", "-", "1", ":", "\n", "                ", "kill_clients", "(", "all_params", "[", "'client_list'", "]", ",", "all_params", "[", "'kill_ping_file'", "]", ")", "\n", "sys", ".", "exit", "(", "'Master didn\\'t get all grads, waiting for {}! Aborting..'", ".", "format", "(", "waiting_dict", ".", "keys", "(", ")", ")", ")", "\n", "\n", "# use a bogus model for reading projected grad msgs", "\n", "", "", "if", "all_params", "[", "'dim_reduction'", "]", ">", "0", ":", "\n", "            ", "bogus_model", "=", "BogusModel", "(", "fc_model", ".", "batch_size", ",", "fc_model", ".", "batch_proc_size", ",", "torch", ".", "zeros", "(", "all_params", "[", "'dim_reduction'", "]", ",", "1", ")", ".", "expand", "(", "1", ",", "-", "1", ",", "1", ")", ")", "\n", "model_for_parsing", "=", "bogus_model", "\n", "", "else", ":", "\n", "            ", "model_for_parsing", "=", "fc_model", "\n", "\n", "# parse grads from messages", "\n", "", "if", "all_params", "[", "'scheme_type'", "]", "==", "0", ":", "\n", "            ", "parse_fat_grads", "(", "model_for_parsing", ",", "all_msg", ",", "all_params", ")", "\n", "", "elif", "all_params", "[", "'scheme_type'", "]", "==", "1", ":", "\n", "            ", "parse_thin_grads", "(", "model_for_parsing", ",", "all_msg", ",", "all_params", ")", "\n", "", "elif", "all_params", "[", "'scheme_type'", "]", "==", "2", ":", "\n", "            ", "parse_fat_grads_pairwise", "(", "model_for_parsing", ",", "all_msg", ",", "all_params", ")", "\n", "", "else", ":", "\n", "            ", "kill_clients", "(", "all_params", "[", "'client_list'", "]", ",", "all_params", "[", "'kill_ping_file'", "]", ")", "\n", "sys", ".", "exit", "(", "'Unknown scheme type!'", ")", "\n", "\n", "# project gradients back to high dim if necessary", "\n", "", "if", "all_params", "[", "'dim_reduction'", "]", ">", "0", ":", "\n", "\n", "            ", "param_vec", "=", "torch", ".", "zeros", "(", "fc_model", ".", "total_params", ")", "\n", "# use shared randomness for generating proj matrices", "\n", "curr_rng_state", "=", "torch", ".", "get_rng_state", "(", ")", "\n", "torch", ".", "set_rng_state", "(", "dim_red_rng_state", ")", "\n", "\n", "for", "i_proj", "in", "range", "(", "all_params", "[", "'dim_reduction'", "]", "//", "all_params", "[", "'max_proj_size'", "]", ")", ":", "\n", "                ", "proj_matrix", "=", "generate_proj_matrix_piece", "(", "model", "=", "fc_model", ",", "dim_reduction", "=", "all_params", "[", "'dim_reduction'", "]", ",", "max_proj_size", "=", "all_params", "[", "'max_proj_size'", "]", ",", "proj_type", "=", "1", ")", "\n", "\n", "if", "all_params", "[", "'proj_type'", "]", "==", "1", ":", "\n", "                    ", "param_vec", "+=", "torch", ".", "mm", "(", "proj_matrix", ",", "(", "bogus_model", ".", "parameters", "(", ")", "[", "0", "]", ".", "grad", ")", "[", "0", ",", "i_proj", "*", "all_params", "[", "'max_proj_size'", "]", ":", "(", "i_proj", "+", "1", ")", "*", "all_params", "[", "'max_proj_size'", "]", "]", ".", "reshape", "(", "-", "1", ",", "1", ")", ")", ".", "view", "(", "fc_model", ".", "total_params", ")", "\n", "", "elif", "all_params", "[", "'proj_type'", "]", "==", "2", ":", "\n", "                    ", "sys", ".", "exit", "(", "'proj 2 not implemented on master!'", ")", "\n", "", "else", ":", "\n", "                    ", "sys", ".", "exit", "(", "'Unknown proj type: {}!'", ".", "format", "(", "all_params", "[", "'proj_type'", "]", ")", ")", "\n", "", "", "proj_matrix", "=", "None", "\n", "\n", "# return to non-shared randomness", "\n", "dim_red_rng_state", "=", "torch", ".", "get_rng_state", "(", ")", "\n", "torch", ".", "set_rng_state", "(", "curr_rng_state", ")", "\n", "\n", "for", "i", ",", "p", "in", "enumerate", "(", "fc_model", ".", "parameters", "(", ")", ")", ":", "\n", "                ", "if", "p", ".", "requires_grad", ":", "\n", "                    ", "p", ".", "grad", "=", "param_vec", "[", "fc_model", ".", "layer_summed", "[", "i", "]", "-", "fc_model", ".", "layer_params", "[", "i", "]", ":", "fc_model", ".", "layer_summed", "[", "i", "]", "]", ".", "reshape", "(", "p", ".", "size", "(", ")", ")", ".", "detach", "(", ")", "\n", "\n", "", "", "", "'''\n        # check grads\n        for i,p in enumerate(fc_model.parameters()):\n            if p.requires_grad:\n        #        print(p.grad)\n                print(p.grad.norm())\n        #        sys.exit()\n        '''", "\n", "\n", "# take optimizer step", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "if", "run_times", "is", "not", "None", ":", "\n", "            ", "run_times", ".", "append", "(", "time", ".", "time", "(", ")", "-", "start_iter", ")", "\n", "\n", "", "", "return", "dim_red_rng_state", "\n", "\n"]], "home.repos.pwc.inspect_result.DPBayes_DP-cross-silo-federated-learning.None.run_master.test": [[304, 345], ["fc_model.eval", "len", "print", "model1.eval", "range", "correct.numpy", "len", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.autograd.Variable", "torch.autograd.Variable", "torch.nll_loss().item", "pred.eq().cpu().sum", "len", "torch.cat.cuda", "torch.cat.cuda", "data_proc.cuda.cuda", "target_proc.cuda.cuda", "model1", "fc_model", "fc_model", "fc_model.data.max", "torch.nll_loss", "pred.eq().cpu", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "pred.eq", "target_proc.cuda.data.view_as"], "function", ["None"], ["", "def", "test", "(", "model1", ",", "fc_model", ",", "epoch", ",", "all_params", ",", "data_dims", ")", ":", "\n", "# calculate model test accuracy", "\n", "\n", "    ", "if", "model1", "is", "not", "None", ":", "\n", "        ", "model1", ".", "eval", "(", ")", "\n", "", "fc_model", ".", "eval", "(", ")", "\n", "test_loss", "=", "0", "\n", "correct", "=", "0", "\n", "\n", "for", "data", ",", "target", "in", "test_loader", ":", "\n", "        ", "if", "data", ".", "shape", "[", "0", "]", "!=", "fc_model", ".", "batch_size", ":", "\n", "            ", "temp", "=", "fc_model", ".", "batch_size", "-", "data", ".", "shape", "[", "0", "]", "\n", "data", "=", "torch", ".", "cat", "(", "(", "data", ",", "torch", ".", "zeros", "(", "(", "temp", ",", "*", "data_dims", ")", ")", "-", "100", ")", ",", "dim", "=", "0", ")", "\n", "target", "=", "torch", ".", "cat", "(", "(", "target", ",", "torch", ".", "zeros", "(", "temp", ",", "dtype", "=", "torch", ".", "long", ")", "-", "100", ")", ",", "dim", "=", "0", ")", "\n", "\n", "", "data", ",", "target", "=", "Variable", "(", "data", ",", "requires_grad", "=", "False", ")", ",", "Variable", "(", "target", ",", "requires_grad", "=", "False", ")", "\n", "if", "use_cuda", ":", "\n", "            ", "data", ",", "target", "=", "data", ".", "cuda", "(", ")", ",", "target", ".", "cuda", "(", ")", "\n", "\n", "", "for", "i_batch", "in", "range", "(", "fc_model", ".", "batch_size", "//", "fc_model", ".", "batch_proc_size", ")", ":", "\n", "            ", "data_proc", "=", "data", "[", "i_batch", "*", "batch_proc_size", ":", "(", "i_batch", "+", "1", ")", "*", "batch_proc_size", ",", ":", "]", "\n", "target_proc", "=", "target", "[", "i_batch", "*", "batch_proc_size", ":", "(", "i_batch", "+", "1", ")", "*", "batch_proc_size", "]", "\n", "if", "use_cuda", ":", "\n", "                ", "data_proc", "=", "data_proc", ".", "cuda", "(", ")", "\n", "target_proc", "=", "target_proc", ".", "cuda", "(", ")", "\n", "", "if", "model1", "is", "not", "None", ":", "\n", "                ", "output1", "=", "model1", "(", "data_proc", ")", "\n", "output2", "=", "fc_model", "(", "output1", ")", "\n", "", "else", ":", "\n", "                ", "output2", "=", "fc_model", "(", "data_proc", ")", "\n", "\n", "", "test_loss", "+=", "F", ".", "nll_loss", "(", "output2", ",", "target_proc", ",", "size_average", "=", "False", ")", ".", "item", "(", ")", "\n", "pred", "=", "output2", ".", "data", ".", "max", "(", "1", ",", "keepdim", "=", "True", ")", "[", "1", "]", "\n", "correct", "+=", "pred", ".", "eq", "(", "target_proc", ".", "data", ".", "view_as", "(", "pred", ")", ")", ".", "cpu", "(", ")", ".", "sum", "(", ")", "\n", "\n", "", "", "test_loss", "/=", "len", "(", "test_loader", ".", "dataset", ")", "\n", "acc", "=", "correct", ".", "numpy", "(", ")", "/", "len", "(", "test_loader", ".", "dataset", ")", "\n", "print", "(", "'\\nTest set full: Average loss: {:.4f}, Accuracy: {}/{} ({:.0f}%)\\n'", ".", "format", "(", "\n", "test_loss", ",", "correct", ",", "len", "(", "test_loader", ".", "dataset", ")", ",", "100.", "*", "acc", ")", ")", "\n", "\n", "return", "test_loss", ",", "acc", "\n", "\n"]], "home.repos.pwc.inspect_result.DPBayes_DP-cross-silo-federated-learning.None.px_expander.acc_scaled_grads": [[14, 33], ["torch.autograd.Variable", "filter", "torch.sqrt", "zip", "torch.zeros", "g_norm.cuda.cuda", "model.parameters", "filter", "cum_grads.keys", "torch.sum", "model.parameters", "torch.sum", "p.grad.view", "torch.clamp", "g_norm.cuda.contiguous().view", "g_norm.cuda.contiguous"], "function", ["home.repos.pwc.inspect_result.DPBayes_DP-cross-silo-federated-learning.None.utils.BogusModel.parameters", "home.repos.pwc.inspect_result.DPBayes_DP-cross-silo-federated-learning.None.utils.BogusModel.parameters"], ["def", "acc_scaled_grads", "(", "model", ",", "C", ",", "cum_grads", ",", "use_cuda", "=", "False", ")", ":", "\n", "\n", "  ", "batch_size", "=", "model", ".", "batch_proc_size", "\n", "\n", "g_norm", "=", "Variable", "(", "torch", ".", "zeros", "(", "batch_size", ")", ",", "requires_grad", "=", "False", ")", "\n", "\n", "if", "use_cuda", ":", "\n", "    ", "g_norm", "=", "g_norm", ".", "cuda", "(", ")", "\n", "\n", "", "for", "p", "in", "filter", "(", "lambda", "p", ":", "p", ".", "requires_grad", ",", "model", ".", "parameters", "(", ")", ")", ":", "\n", "    ", "if", "p", ".", "grad", "is", "not", "None", ":", "\n", "      ", "g_norm", "+=", "torch", ".", "sum", "(", "p", ".", "grad", ".", "view", "(", "batch_size", ",", "-", "1", ")", "**", "2", ",", "1", ")", "\n", "\n", "", "", "g_norm", "=", "torch", ".", "sqrt", "(", "g_norm", ")", "\n", "\n", "# do clipping and accumulate", "\n", "for", "p", ",", "key", "in", "zip", "(", "filter", "(", "lambda", "p", ":", "p", ".", "requires_grad", ",", "model", ".", "parameters", "(", ")", ")", ",", "cum_grads", ".", "keys", "(", ")", ")", ":", "\n", "    ", "if", "p", "is", "not", "None", ":", "\n", "      ", "cum_grads", "[", "key", "]", "+=", "torch", ".", "sum", "(", "(", "p", ".", "grad", "/", "torch", ".", "clamp", "(", "g_norm", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "1", ",", "1", ")", "/", "C", ",", "min", "=", "1", ")", ")", ",", "dim", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DPBayes_DP-cross-silo-federated-learning.None.px_expander.add_noise_with_cum_grads": [[37, 53], ["zip", "filter", "cum_grads.keys", "model.parameters", "torch.autograd.Variable", "torch.autograd.Variable", "p.grad.cuda", "noise_tensors[].expand", "cum_grads[].expand", "torch.normal().expand", "torch.normal", "torch.zeros_like"], "function", ["home.repos.pwc.inspect_result.DPBayes_DP-cross-silo-federated-learning.None.utils.BogusModel.parameters"], ["", "", "", "def", "add_noise_with_cum_grads", "(", "model", ",", "C", ",", "neighbour_const", ",", "sigma", ",", "cum_grads", ",", "noise_tensors", "=", "None", ",", "use_cuda", "=", "False", ")", ":", "\n", "\n", "    ", "batch_proc_size", "=", "model", ".", "batch_proc_size", "\n", "for", "p", ",", "key", "in", "zip", "(", "filter", "(", "lambda", "p", ":", "p", ".", "requires_grad", ",", "model", ".", "parameters", "(", ")", ")", ",", "cum_grads", ".", "keys", "(", ")", ")", ":", "\n", "        ", "if", "p", ".", "grad", "is", "not", "None", ":", "\n", "\n", "            ", "if", "noise_tensors", "is", "None", ":", "\n", "                ", "noise", "=", "Variable", "(", "(", "sigma", "*", "neighbour_const", "*", "C", ")", "*", "torch", ".", "normal", "(", "mean", "=", "torch", ".", "zeros_like", "(", "p", ".", "grad", "[", "0", "]", ")", ".", "data", ",", "std", "=", "1.0", ")", ".", "expand", "(", "batch_proc_size", ",", "-", "1", ",", "-", "1", ")", ")", "\n", "\n", "", "else", ":", "\n", "                ", "noise", "=", "Variable", "(", "noise_tensors", "[", "key", "]", ".", "expand", "(", "batch_proc_size", ",", "-", "1", ",", "-", "1", ")", ")", "\n", "\n", "", "p", ".", "grad", "=", "(", "(", "cum_grads", "[", "key", "]", ".", "expand", "(", "batch_proc_size", ",", "-", "1", ",", "-", "1", ")", "+", "noise", ")", "/", "model", ".", "batch_size", ")", "\n", "if", "use_cuda", ":", "\n", "                ", "p", ".", "grad", "=", "p", ".", "grad", ".", "cuda", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DPBayes_DP-cross-silo-federated-learning.None.master_comm_funs.kill_clients": [[9, 15], ["print", "open", "str"], "function", ["None"], ["def", "kill_clients", "(", "client_list", ",", "filename", ")", ":", "\n", "# send kill ping to all Clients", "\n", "    ", "print", "(", "'Master sending kill ping'", ")", "\n", "for", "k", "in", "client_list", ":", "\n", "        ", "with", "open", "(", "filename", "+", "str", "(", "k", ")", ",", "'w'", ")", "as", "f", ":", "\n", "            ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.DPBayes_DP-cross-silo-federated-learning.None.master_comm_funs.parse_fat_grads": [[16, 63], ["model.parameters", "enumerate", "enumerate", "enumerate", "print", "master_comm_funs.kill_clients", "sys.exit", "enumerate", "model.parameters", "true_models.append", "model.parameters", "model.parameters", "torch.max", "print", "print", "print", "print", "model.parameters", "torch.zeros_like", "torch.load", "torch.zeros_like", "torch.abs", "torch.remainder", "torch.zeros_like", "str", "[].to().expand_as", "len", "str", "str", "str", "str", "str", "str", "str", "[].to", "str"], "function", ["home.repos.pwc.inspect_result.DPBayes_DP-cross-silo-federated-learning.None.utils.BogusModel.parameters", "home.repos.pwc.inspect_result.DPBayes_DP-cross-silo-federated-learning.None.master_comm_funs.kill_clients", "home.repos.pwc.inspect_result.DPBayes_DP-cross-silo-federated-learning.None.utils.BogusModel.parameters", "home.repos.pwc.inspect_result.DPBayes_DP-cross-silo-federated-learning.None.utils.BogusModel.parameters", "home.repos.pwc.inspect_result.DPBayes_DP-cross-silo-federated-learning.None.utils.BogusModel.parameters", "home.repos.pwc.inspect_result.DPBayes_DP-cross-silo-federated-learning.None.utils.BogusModel.parameters"], ["", "", "", "def", "parse_fat_grads", "(", "model", ",", "partial_sums", ",", "all_params", ")", ":", "\n", "\n", "    ", "if", "all_params", "[", "'use_encryption'", "]", ":", "\n", "# decrypted grads are given by summing over the partial sums from all Clients", "\n", "        ", "init", "=", "True", "\n", "for", "k", "in", "partial_sums", ":", "\n", "            ", "for", "i", ",", "p", "in", "enumerate", "(", "model", ".", "parameters", "(", ")", ")", ":", "\n", "                ", "if", "p", "is", "not", "None", ":", "\n", "                    ", "if", "init", ":", "\n", "                        ", "p", ".", "grad", "=", "torch", ".", "zeros_like", "(", "p", ")", "\n", "", "p", ".", "grad", "=", "torch", ".", "remainder", "(", "p", ".", "grad", "+", "(", "(", "partial_sums", "[", "k", "]", "[", "str", "(", "i", ")", "]", ")", ".", "to", "(", "torch", ".", "float32", ")", ")", ".", "expand_as", "(", "p", ")", ",", "all_params", "[", "'modulo'", "]", ")", "\n", "", "", "init", "=", "False", "\n", "", "for", "p", "in", "model", ".", "parameters", "(", ")", ":", "\n", "            ", "if", "p", "is", "not", "None", ":", "\n", "                ", "p", ".", "grad", "=", "1", "/", "all_params", "[", "'fixed_point_int'", "]", "*", "(", "p", ".", "grad", "-", "len", "(", "all_params", "[", "'client_list'", "]", ")", "*", "all_params", "[", "'offset'", "]", ")", "\n", "\n", "", "", "", "else", ":", "\n", "        ", "for", "i", ",", "p", "in", "enumerate", "(", "model", ".", "parameters", "(", ")", ")", ":", "\n", "            ", "if", "p", "is", "not", "None", ":", "\n", "                ", "p", ".", "grad", "=", "torch", ".", "zeros_like", "(", "p", ")", "\n", "for", "client", "in", "all_params", "[", "'client_list'", "]", ":", "\n", "                    ", "p", ".", "grad", "[", "0", "]", "+=", "all_msg", "[", "str", "(", "client", ")", "]", "[", "str", "(", "i", ")", "]", "\n", "\n", "", "", "", "", "if", "all_params", "[", "'debug'", "]", ":", "\n", "        ", "true_models", "=", "[", "]", "\n", "true_grads", "=", "{", "}", "\n", "for", "k", "in", "all_params", "[", "'client_list'", "]", ":", "\n", "            ", "true_models", ".", "append", "(", "torch", ".", "load", "(", "all_params", "[", "'sent_grads_file'", "]", "+", "str", "(", "k", ")", "+", "'_debug'", ")", ")", "\n", "", "for", "i", ",", "p", "in", "enumerate", "(", "model", ".", "parameters", "(", ")", ")", ":", "\n", "            ", "if", "p", "is", "not", "None", ":", "\n", "                ", "true_grads", "[", "str", "(", "i", ")", "]", "=", "torch", ".", "zeros_like", "(", "p", ")", "\n", "for", "m", "in", "true_models", ":", "\n", "                    ", "true_grads", "[", "str", "(", "i", ")", "]", "+=", "m", "[", "str", "(", "i", ")", "]", "\n", "\n", "", "", "", "max_err", "=", "0", "\n", "for", "i", ",", "p", "in", "enumerate", "(", "model", ".", "parameters", "(", ")", ")", ":", "\n", "            ", "apu", "=", "torch", ".", "max", "(", "torch", ".", "abs", "(", "p", ".", "grad", "-", "true_grads", "[", "str", "(", "i", ")", "]", ")", ")", "\n", "if", "apu", ">", "max_err", ":", "\n", "                ", "max_err", "=", "apu", "\n", "", "print", "(", "p", ".", "grad", ".", "shape", ")", "\n", "print", "(", "p", ".", "grad", "[", "0", ",", ":", "3", ",", ":", "3", "]", ")", "\n", "print", "(", "'should be:'", ")", "\n", "print", "(", "true_grads", "[", "str", "(", "i", ")", "]", "[", "0", ",", ":", "3", ",", ":", "3", "]", ")", "\n", "", "print", "(", "'max err in grads: {}'", ".", "format", "(", "max_err", ")", ")", "\n", "#break", "\n", "kill_clients", "(", "all_params", "[", "'client_list'", "]", ",", "all_params", "[", "'kill_ping_file'", "]", ")", "\n", "sys", ".", "exit", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DPBayes_DP-cross-silo-federated-learning.None.master_comm_funs.parse_fat_grads_pairwise": [[64, 107], ["enumerate", "enumerate", "enumerate", "enumerate", "print", "master_comm_funs.kill_clients", "sys.exit", "model.parameters", "model.parameters", "true_models.append", "model.parameters", "model.parameters", "torch.max", "print", "print", "print", "print", "numpy.zeros_like", "all_msg.keys", "torch.tensor", "torch.zeros_like", "torch.load", "torch.zeros_like", "torch.abs", "p.detach().numpy", "numpy.remainder", "np.remainder.astype", "len", "str", "p.detach", "[].reshape", "str", "str", "str", "str", "str", "str", "str", "p.detach().numpy", "str", "p.detach"], "function", ["home.repos.pwc.inspect_result.DPBayes_DP-cross-silo-federated-learning.None.master_comm_funs.kill_clients", "home.repos.pwc.inspect_result.DPBayes_DP-cross-silo-federated-learning.None.utils.BogusModel.parameters", "home.repos.pwc.inspect_result.DPBayes_DP-cross-silo-federated-learning.None.utils.BogusModel.parameters", "home.repos.pwc.inspect_result.DPBayes_DP-cross-silo-federated-learning.None.utils.BogusModel.parameters", "home.repos.pwc.inspect_result.DPBayes_DP-cross-silo-federated-learning.None.utils.BogusModel.parameters"], ["", "", "def", "parse_fat_grads_pairwise", "(", "model", ",", "all_msg", ",", "all_params", ")", ":", "\n", "\n", "    ", "if", "all_params", "[", "'use_encryption'", "]", ":", "\n", "# decrypted grads are given by summing over all the contributions", "\n", "        ", "for", "i", ",", "p", "in", "enumerate", "(", "model", ".", "parameters", "(", ")", ")", ":", "\n", "            ", "if", "p", "is", "not", "None", ":", "\n", "                ", "grads", "=", "np", ".", "zeros_like", "(", "p", ".", "detach", "(", ")", ".", "numpy", "(", ")", ",", "dtype", "=", "'uint64'", ")", "\n", "for", "k", "in", "all_msg", ".", "keys", "(", ")", ":", "\n", "                    ", "grads", "=", "np", ".", "remainder", "(", "grads", "+", "all_msg", "[", "k", "]", "[", "str", "(", "i", ")", "]", ".", "reshape", "(", "p", ".", "detach", "(", ")", ".", "numpy", "(", ")", ".", "shape", ")", ",", "all_params", "[", "'modulo'", "]", ")", "\n", "", "grads", "=", "1", "/", "all_params", "[", "'fixed_point_int'", "]", "*", "grads", ".", "astype", "(", "'float64'", ")", "-", "all_params", "[", "'offset'", "]", "*", "len", "(", "all_params", "[", "'client_list'", "]", ")", "\n", "p", ".", "grad", "=", "torch", ".", "tensor", "(", "grads", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "", "", "", "else", ":", "\n", "        ", "for", "i", ",", "p", "in", "enumerate", "(", "model", ".", "parameters", "(", ")", ")", ":", "\n", "            ", "if", "p", "is", "not", "None", ":", "\n", "                ", "p", ".", "grad", "=", "torch", ".", "zeros_like", "(", "p", ")", "\n", "for", "client", "in", "all_params", "[", "'client_list'", "]", ":", "\n", "                    ", "p", ".", "grad", "[", "0", "]", "+=", "all_msg", "[", "str", "(", "client", ")", "]", "[", "str", "(", "i", ")", "]", "\n", "\n", "", "", "", "", "if", "all_params", "[", "'debug'", "]", ":", "\n", "        ", "true_models", "=", "[", "]", "\n", "true_grads", "=", "{", "}", "\n", "for", "k", "in", "all_params", "[", "'client_list'", "]", ":", "\n", "            ", "true_models", ".", "append", "(", "torch", ".", "load", "(", "all_params", "[", "'sent_grads_file'", "]", "+", "str", "(", "k", ")", "+", "'_debug'", ")", ")", "\n", "", "for", "i", ",", "p", "in", "enumerate", "(", "model", ".", "parameters", "(", ")", ")", ":", "\n", "            ", "if", "p", "is", "not", "None", ":", "\n", "                ", "true_grads", "[", "str", "(", "i", ")", "]", "=", "torch", ".", "zeros_like", "(", "p", ")", "\n", "for", "m", "in", "true_models", ":", "\n", "                    ", "true_grads", "[", "str", "(", "i", ")", "]", "+=", "m", "[", "str", "(", "i", ")", "]", "\n", "\n", "", "", "", "max_err", "=", "0", "\n", "for", "i", ",", "p", "in", "enumerate", "(", "model", ".", "parameters", "(", ")", ")", ":", "\n", "#for i,p in enumerate(grads):", "\n", "            ", "apu", "=", "torch", ".", "max", "(", "torch", ".", "abs", "(", "p", ".", "grad", "[", "0", "]", "-", "true_grads", "[", "str", "(", "i", ")", "]", ")", ")", "\n", "if", "apu", ">", "max_err", ":", "\n", "                ", "max_err", "=", "apu", "\n", "", "print", "(", "p", ".", "grad", ".", "shape", ")", "\n", "print", "(", "p", ".", "grad", "[", "0", ",", ":", "3", ",", ":", "3", "]", ")", "\n", "print", "(", "'should be:'", ")", "\n", "print", "(", "true_grads", "[", "str", "(", "i", ")", "]", "[", "0", ",", ":", "3", ",", ":", "3", "]", ")", "\n", "", "print", "(", "'max err in grads: {}'", ".", "format", "(", "max_err", ")", ")", "\n", "#break", "\n", "kill_clients", "(", "all_params", "[", "'client_list'", "]", ",", "all_params", "[", "'kill_ping_file'", "]", ")", "\n", "sys", ".", "exit", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DPBayes_DP-cross-silo-federated-learning.None.master_comm_funs.parse_thin_grads": [[108, 167], ["range", "enumerate", "enumerate", "enumerate", "enumerate", "print", "master_comm_funs.kill_clients", "sys.exit", "enumerate", "model.parameters", "model.parameters", "true_models.append", "model.parameters", "model.parameters", "torch.max", "print", "print", "print", "print", "model.parameters", "torch.as_tensor", "torch.zeros_like", "torch.load", "torch.zeros_like", "torch.abs", "str", "numpy.zeros_like", "numpy.remainder", "p.detach().numpy", "numpy.remainder", "numpy.zeros_like", "str", "str", "p.detach().numpy", "len", "str", "str", "str", "str", "str", "str", "p.detach", "str", "str", "str", "str", "p.detach", "str", "str", "str", "str", "str"], "function", ["home.repos.pwc.inspect_result.DPBayes_DP-cross-silo-federated-learning.None.master_comm_funs.kill_clients", "home.repos.pwc.inspect_result.DPBayes_DP-cross-silo-federated-learning.None.utils.BogusModel.parameters", "home.repos.pwc.inspect_result.DPBayes_DP-cross-silo-federated-learning.None.utils.BogusModel.parameters", "home.repos.pwc.inspect_result.DPBayes_DP-cross-silo-federated-learning.None.utils.BogusModel.parameters", "home.repos.pwc.inspect_result.DPBayes_DP-cross-silo-federated-learning.None.utils.BogusModel.parameters", "home.repos.pwc.inspect_result.DPBayes_DP-cross-silo-federated-learning.None.utils.BogusModel.parameters"], ["", "", "def", "parse_thin_grads", "(", "model", ",", "msg", ",", "all_params", ")", ":", "\n", "# simulate separate Compute nodes: first calculate partial sums for each Compute,", "\n", "# then sum over the partial sums broadcasted by each Compute", "\n", "\n", "    ", "partial_sums", "=", "{", "}", "\n", "if", "all_params", "[", "'use_encryption'", "]", ":", "\n", "\n", "        ", "for", "i_c", "in", "range", "(", "all_params", "[", "'n_computes'", "]", ")", ":", "\n", "            ", "partial_sums", "[", "str", "(", "i_c", ")", "]", "=", "{", "}", "\n", "for", "i_param", ",", "p", "in", "enumerate", "(", "model", ".", "parameters", "(", ")", ")", ":", "\n", "                ", "if", "p", "is", "not", "None", ":", "\n", "                    ", "partial_sums", "[", "str", "(", "i_c", ")", "]", "[", "str", "(", "i_param", ")", "]", "=", "np", ".", "zeros_like", "(", "p", ".", "detach", "(", ")", ".", "numpy", "(", ")", ",", "dtype", "=", "'uint64'", ")", "\n", "# add each msg ", "\n", "for", "client", "in", "all_params", "[", "'client_list'", "]", ":", "\n", "                        ", "partial_sums", "[", "str", "(", "i_c", ")", "]", "[", "str", "(", "i_param", ")", "]", "=", "np", ".", "remainder", "(", "partial_sums", "[", "str", "(", "i_c", ")", "]", "[", "str", "(", "i_param", ")", "]", "+", "msg", "[", "str", "(", "client", ")", "]", "[", "str", "(", "i_param", ")", "]", "[", "i_c", "]", ",", "all_params", "[", "'modulo'", "]", ")", "\n", "\n", "# decrypted grads are given by summing over the partial sums from all Computes", "\n", "", "", "", "", "init", "=", "True", "\n", "for", "i", ",", "p", "in", "enumerate", "(", "model", ".", "parameters", "(", ")", ")", ":", "\n", "            ", "if", "p", "is", "not", "None", ":", "\n", "                ", "for", "k", "in", "partial_sums", ":", "\n", "                    ", "if", "init", ":", "\n", "                        ", "apu", "=", "np", ".", "zeros_like", "(", "p", ".", "detach", "(", ")", ".", "numpy", "(", ")", ",", "dtype", "=", "'uint64'", ")", "\n", "init", "=", "False", "\n", "", "apu", "=", "np", ".", "remainder", "(", "apu", "+", "partial_sums", "[", "k", "]", "[", "str", "(", "i", ")", "]", ",", "all_params", "[", "'modulo'", "]", ")", "\n", "", "p", ".", "grad", "=", "torch", ".", "as_tensor", "(", "1", "/", "all_params", "[", "'fixed_point_int'", "]", "*", "apu", "-", "len", "(", "all_params", "[", "'client_list'", "]", ")", "*", "all_params", "[", "'offset'", "]", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "init", "=", "True", "\n", "\n", "", "", "", "else", ":", "\n", "        ", "for", "i", ",", "p", "in", "enumerate", "(", "model", ".", "parameters", "(", ")", ")", ":", "\n", "            ", "if", "p", "is", "not", "None", ":", "\n", "                ", "p", ".", "grad", "=", "torch", ".", "zeros_like", "(", "p", ")", "\n", "for", "client", "in", "all_params", "[", "'client_list'", "]", ":", "\n", "                    ", "p", ".", "grad", "[", "0", "]", "+=", "msg", "[", "str", "(", "client", ")", "]", "[", "str", "(", "i", ")", "]", "\n", "\n", "\n", "", "", "", "", "if", "all_params", "[", "'debug'", "]", ":", "\n", "        ", "true_models", "=", "[", "]", "\n", "true_grads", "=", "{", "}", "\n", "for", "k", "in", "all_params", "[", "'client_list'", "]", ":", "\n", "            ", "true_models", ".", "append", "(", "torch", ".", "load", "(", "all_params", "[", "'sent_grads_file'", "]", "+", "str", "(", "k", ")", "+", "'_debug'", ")", ")", "\n", "", "for", "i", ",", "p", "in", "enumerate", "(", "model", ".", "parameters", "(", ")", ")", ":", "\n", "            ", "if", "p", "is", "not", "None", ":", "\n", "                ", "true_grads", "[", "str", "(", "i", ")", "]", "=", "torch", ".", "zeros_like", "(", "p", ")", "\n", "for", "m", "in", "true_models", ":", "\n", "                    ", "true_grads", "[", "str", "(", "i", ")", "]", "+=", "m", "[", "str", "(", "i", ")", "]", "\n", "\n", "", "", "", "max_err", "=", "0", "\n", "for", "i", ",", "p", "in", "enumerate", "(", "model", ".", "parameters", "(", ")", ")", ":", "\n", "            ", "apu", "=", "torch", ".", "max", "(", "torch", ".", "abs", "(", "p", ".", "grad", "-", "true_grads", "[", "str", "(", "i", ")", "]", ")", ")", "\n", "if", "apu", ">", "max_err", ":", "\n", "                ", "max_err", "=", "apu", "\n", "", "print", "(", "p", ".", "grad", ".", "shape", ")", "\n", "print", "(", "p", ".", "grad", "[", "0", ",", ":", "3", ",", ":", "3", "]", ")", "\n", "print", "(", "'should be:'", ")", "\n", "print", "(", "true_grads", "[", "str", "(", "i", ")", "]", "[", "0", ",", ":", "3", ",", ":", "3", "]", ")", "\n", "", "print", "(", "'max err in grads: {}'", ".", "format", "(", "max_err", ")", ")", "\n", "kill_clients", "(", "all_params", "[", "'client_list'", "]", ",", "all_params", "[", "'kill_ping_file'", "]", ")", "\n", "sys", ".", "exit", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DPBayes_DP-cross-silo-federated-learning.None.master_comm_funs.send_weights": [[168, 174], ["torch.save", "model.state_dict", "open", "str"], "function", ["None"], ["", "", "def", "send_weights", "(", "model", ",", "all_params", ")", ":", "\n", "# send current params to all parties and ping", "\n", "    ", "torch", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "all_params", "[", "'sent_weights_file'", "]", ")", "\n", "for", "k", "in", "all_params", "[", "'client_list'", "]", ":", "\n", "        ", "with", "open", "(", "all_params", "[", "'weights_ping_file'", "]", "+", "str", "(", "k", ")", ",", "'w'", ")", "as", "f", ":", "\n", "            ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.DPBayes_DP-cross-silo-federated-learning.None.functional.linear": [[21, 47], ["input.matmul", "torch.transpose", "input.dim", "torch.addmm", "print", "sys.exit", "torch.addmm", "weight.t", "weight.t"], "function", ["None"], ["def", "linear", "(", "input", ",", "weight", ",", "bias", "=", "None", ",", "batch_size", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Applies a linear transformation to the incoming data: :math:`y = xA^T + b`.\n\n    Shape:\n        - Input: :math:`(N, *, in\\_features)` where `*` means any number of\n          additional dimensions\n        - Weight: :math:`(out\\_features, in\\_features)`\n        - Bias: :math:`(out\\_features)`\n        - Output: :math:`(N, *, out\\_features)`\n    \"\"\"", "\n", "if", "input", ".", "dim", "(", ")", "==", "2", "and", "bias", "is", "not", "None", ":", "\n", "# fused op is marginally faster", "\n", "        ", "if", "batch_size", "is", "None", ":", "\n", "          ", "return", "torch", ".", "addmm", "(", "bias", ",", "input", ",", "weight", ".", "t", "(", ")", ")", "\n", "", "else", ":", "\n", "          ", "print", "(", "'fused op in functional.linear not implemented yet!'", ")", "\n", "sys", ".", "exit", "(", "1", ")", "\n", "return", "torch", ".", "addmm", "(", "bias", ",", "input", ",", "weight", ".", "t", "(", ")", ")", "\n", "\n", "", "", "output", "=", "input", ".", "matmul", "(", "torch", ".", "transpose", "(", "weight", ",", "-", "2", ",", "-", "1", ")", ")", "\n", "\n", "# not using bias at the moment", "\n", "if", "bias", "is", "not", "None", ":", "\n", "        ", "output", "+=", "bias", "\n", "", "return", "output", "\n", "", ""]], "home.repos.pwc.inspect_result.DPBayes_DP-cross-silo-federated-learning.None.linear.Linear.__init__": [[15, 32], ["torch.nn.modules.Module.__init__", "linear.Linear.reset_parameters", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "linear.Linear.register_parameter", "torch.Tensor", "torch.Tensor", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.DPBayes_DP-cross-silo-federated-learning.None.run_client.Joint_sampler.__init__", "home.repos.pwc.inspect_result.DPBayes_DP-cross-silo-federated-learning.None.linear.Linear.reset_parameters"], ["    ", "def", "__init__", "(", "self", ",", "in_features", ",", "out_features", ",", "bias", "=", "True", ",", "batch_size", "=", "None", ")", ":", "\n", "        ", "super", "(", "Linear", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_features", "=", "in_features", "\n", "self", ".", "out_features", "=", "out_features", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "if", "batch_size", "is", "not", "None", ":", "\n", "            ", "self", ".", "weight", "=", "Parameter", "(", "torch", ".", "Tensor", "(", "batch_size", ",", "out_features", ",", "in_features", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "weight", "=", "Parameter", "(", "torch", ".", "Tensor", "(", "out_features", ",", "in_features", ")", ")", "\n", "", "if", "bias", ":", "\n", "            ", "if", "batch_size", "is", "not", "None", ":", "\n", "                ", "self", ".", "bias", "=", "Parameter", "(", "torch", ".", "Tensor", "(", "batch_size", ",", "out_features", ")", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "bias", "=", "Parameter", "(", "torch", ".", "Tensor", "(", "out_features", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "register_parameter", "(", "'bias'", ",", "None", ")", "\n", "", "self", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DPBayes_DP-cross-silo-federated-learning.None.linear.Linear.reset_parameters": [[33, 38], ["linear.Linear.weight.data.uniform_", "math.sqrt", "linear.Linear.bias.data.uniform_", "linear.Linear.weight.size"], "methods", ["None"], ["", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "stdv", "=", "1.", "/", "math", ".", "sqrt", "(", "self", ".", "weight", ".", "size", "(", "1", ")", ")", "\n", "self", ".", "weight", ".", "data", ".", "uniform_", "(", "-", "stdv", ",", "stdv", ")", "\n", "if", "self", ".", "bias", "is", "not", "None", ":", "\n", "            ", "self", ".", "bias", ".", "data", ".", "uniform_", "(", "-", "stdv", ",", "stdv", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DPBayes_DP-cross-silo-federated-learning.None.linear.Linear.forward": [[39, 41], ["functional.linear"], "methods", ["home.repos.pwc.inspect_result.DPBayes_DP-cross-silo-federated-learning.None.functional.linear"], ["", "", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "return", "F", ".", "linear", "(", "input", ",", "self", ".", "weight", ",", "self", ".", "bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DPBayes_DP-cross-silo-federated-learning.None.linear.Linear.__repr__": [[42, 47], ["str", "str", "str"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__class__", ".", "__name__", "+", "'('", "+", "'in_features='", "+", "str", "(", "self", ".", "in_features", ")", "+", "', out_features='", "+", "str", "(", "self", ".", "out_features", ")", "+", "', bias='", "+", "str", "(", "self", ".", "bias", "is", "not", "None", ")", "+", "')'", "\n", "\n"]], "home.repos.pwc.inspect_result.DPBayes_DP-cross-silo-federated-learning.None.utils.Net1.__init__": [[16, 22], ["torch.nn.Module.__init__", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.MaxPool2d", "torch.nn.MaxPool2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.MaxPool2d", "torch.nn.MaxPool2d"], "methods", ["home.repos.pwc.inspect_result.DPBayes_DP-cross-silo-federated-learning.None.run_client.Joint_sampler.__init__"], ["  ", "def", "__init__", "(", "self", ")", ":", "\n", "    ", "super", "(", "Net1", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "self", ".", "pool1", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "64", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "self", ".", "pool2", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DPBayes_DP-cross-silo-federated-learning.None.utils.Net1.forward": [[23, 27], ["utils.Net1.pool1", "utils.Net1.pool2", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "utils.Net1.conv1", "utils.Net1.conv2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "x", "=", "self", ".", "pool1", "(", "F", ".", "relu", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "x", "=", "self", ".", "pool2", "(", "F", ".", "relu", "(", "self", ".", "conv2", "(", "x", ")", ")", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.DPBayes_DP-cross-silo-federated-learning.None.utils.FCNet.__init__": [[31, 46], ["torch.nn.Module.__init__", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ModuleList", "torch.nn.ModuleList", "linear.Linear", "range", "linear.Linear", "utils.FCNet.linears.append", "linear.Linear"], "methods", ["home.repos.pwc.inspect_result.DPBayes_DP-cross-silo-federated-learning.None.run_client.Joint_sampler.__init__"], ["  ", "def", "__init__", "(", "self", ",", "batch_size", ",", "batch_proc_size", ",", "latent_dim", ",", "n_hidden_layers", ",", "output_dim", ",", "randomize_data", ")", ":", "\n", "    ", "super", "(", "FCNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "batch_proc_size", "=", "batch_proc_size", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "latent_dim", "=", "latent_dim", "\n", "self", ".", "n_hidden_layers", "=", "n_hidden_layers", "\n", "self", ".", "output_dim", "=", "output_dim", "\n", "self", ".", "randomize_data", "=", "randomize_data", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "self", ".", "linears", "=", "nn", ".", "ModuleList", "(", "[", "linear", ".", "Linear", "(", "1600", ",", "latent_dim", ",", "bias", "=", "False", ",", "batch_size", "=", "batch_proc_size", ")", "]", ")", "\n", "if", "n_hidden_layers", ">", "0", ":", "\n", "      ", "for", "k", "in", "range", "(", "n_hidden_layers", ")", ":", "\n", "        ", "self", ".", "linears", ".", "append", "(", "linear", ".", "Linear", "(", "latent_dim", ",", "latent_dim", ",", "bias", "=", "False", ",", "batch_size", "=", "batch_proc_size", ")", ")", "\n", "", "", "self", ".", "final_fc", "=", "linear", ".", "Linear", "(", "self", ".", "linears", "[", "-", "1", "]", ".", "out_features", ",", "output_dim", ",", "bias", "=", "False", ",", "batch_size", "=", "batch_proc_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DPBayes_DP-cross-silo-federated-learning.None.utils.FCNet.forward": [[47, 53], ["torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "utils.FCNet.final_fc", "torch.nn.functional.log_softmax", "torch.nn.functional.log_softmax", "utils.FCNet.view", "utils.FCNet.relu", "utils.FCNet.view", "k_linear"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "x", "=", "torch", ".", "unsqueeze", "(", "x", ".", "view", "(", "-", "1", ",", "1600", ")", ",", "1", ")", "\n", "for", "k_linear", "in", "self", ".", "linears", ":", "\n", "      ", "x", "=", "self", ".", "relu", "(", "k_linear", "(", "x", ")", ")", "\n", "", "x", "=", "self", ".", "final_fc", "(", "x", ")", "\n", "return", "nn", ".", "functional", ".", "log_softmax", "(", "x", ".", "view", "(", "-", "1", ",", "self", ".", "output_dim", ")", ",", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DPBayes_DP-cross-silo-federated-learning.None.utils.FCNet_MNIST.__init__": [[58, 73], ["torch.nn.Module.__init__", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ModuleList", "torch.nn.ModuleList", "linear.Linear", "range", "linear.Linear", "utils.FCNet_MNIST.linears.append", "linear.Linear"], "methods", ["home.repos.pwc.inspect_result.DPBayes_DP-cross-silo-federated-learning.None.run_client.Joint_sampler.__init__"], ["  ", "def", "__init__", "(", "self", ",", "batch_size", ",", "batch_proc_size", ",", "latent_dim", ",", "n_hidden_layers", ",", "output_dim", ",", "randomize_data", ")", ":", "\n", "    ", "super", "(", "FCNet_MNIST", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "batch_proc_size", "=", "batch_proc_size", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "latent_dim", "=", "latent_dim", "\n", "self", ".", "n_hidden_layers", "=", "n_hidden_layers", "\n", "self", ".", "output_dim", "=", "output_dim", "\n", "self", ".", "randomize_data", "=", "randomize_data", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "self", ".", "linears", "=", "nn", ".", "ModuleList", "(", "[", "linear", ".", "Linear", "(", "784", ",", "latent_dim", ",", "bias", "=", "False", ",", "batch_size", "=", "batch_proc_size", ")", "]", ")", "\n", "if", "n_hidden_layers", ">", "0", ":", "\n", "      ", "for", "k", "in", "range", "(", "n_hidden_layers", ")", ":", "\n", "        ", "self", ".", "linears", ".", "append", "(", "linear", ".", "Linear", "(", "latent_dim", ",", "latent_dim", ",", "bias", "=", "False", ",", "batch_size", "=", "batch_proc_size", ")", ")", "\n", "", "", "self", ".", "final_fc", "=", "linear", ".", "Linear", "(", "self", ".", "linears", "[", "-", "1", "]", ".", "out_features", ",", "output_dim", ",", "bias", "=", "False", ",", "batch_size", "=", "batch_proc_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DPBayes_DP-cross-silo-federated-learning.None.utils.FCNet_MNIST.forward": [[74, 80], ["torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "utils.FCNet_MNIST.final_fc", "torch.nn.functional.log_softmax", "torch.nn.functional.log_softmax", "utils.FCNet_MNIST.view", "utils.FCNet_MNIST.relu", "utils.FCNet_MNIST.view", "k_linear"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "x", "=", "torch", ".", "unsqueeze", "(", "x", ".", "view", "(", "-", "1", ",", "784", ")", ",", "1", ")", "\n", "for", "k_linear", "in", "self", ".", "linears", ":", "\n", "      ", "x", "=", "self", ".", "relu", "(", "k_linear", "(", "x", ")", ")", "\n", "", "x", "=", "self", ".", "final_fc", "(", "x", ")", "\n", "return", "nn", ".", "functional", ".", "log_softmax", "(", "x", ".", "view", "(", "-", "1", ",", "self", ".", "output_dim", ")", ",", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DPBayes_DP-cross-silo-federated-learning.None.utils.BogusModel.__init__": [[85, 90], ["torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "batch_size", ",", "batch_proc_size", ",", "param_vec", ")", ":", "\n", "        ", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "batch_proc_size", "=", "batch_proc_size", "\n", "self", ".", "params", "=", "param_vec", "\n", "self", ".", "params", ".", "grad", "=", "torch", ".", "zeros_like", "(", "param_vec", ")", "\n", "#self.params.requires_grad = True", "\n"]], "home.repos.pwc.inspect_result.DPBayes_DP-cross-silo-federated-learning.None.utils.BogusModel.parameters": [[92, 94], ["None"], "methods", ["None"], ["", "def", "parameters", "(", "self", ")", ":", "\n", "        ", "return", "[", "self", ".", "params", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.DPBayes_DP-cross-silo-federated-learning.None.utils.do_proj_in_steps": [[96, 125], ["torch.get_rng_state", "torch.get_rng_state", "torch.set_rng_state", "torch.set_rng_state", "torch.zeros", "torch.zeros", "range", "torch.get_rng_state", "torch.get_rng_state", "torch.set_rng_state", "torch.set_rng_state", "utils.generate_proj_matrix_piece", "sys.exit", "torch.mm().view", "torch.mm().view", "torch.mm", "torch.mm", "generate_proj_matrix_piece.t", "vector_for_proj.t"], "function", ["home.repos.pwc.inspect_result.DPBayes_DP-cross-silo-federated-learning.None.utils.generate_proj_matrix_piece"], ["", "", "def", "do_proj_in_steps", "(", "vector_for_proj", ",", "model", ",", "dim_reduction", ",", "max_proj_size", ",", "proj_type", ",", "dim_red_rng_state", ")", ":", "\n", "\n", "# use shared randomness for generating proj matrices", "\n", "    ", "curr_rng_state", "=", "torch", ".", "get_rng_state", "(", ")", "\n", "torch", ".", "set_rng_state", "(", "dim_red_rng_state", ")", "\n", "\n", "proj_grads", "=", "torch", ".", "zeros", "(", "dim_reduction", ")", "\n", "#print('vec dims:{}, single proj dims:{}, full proj dims:{}, proj grads dims:{}'.format(vectorized.size(), (model.total_params,max_proj_size ),(model.total_params, dim_reduction), proj_grads.size() ))", "\n", "\n", "for", "i_proj", "in", "range", "(", "dim_reduction", "//", "max_proj_size", ")", ":", "\n", "        ", "proj_matrix", "=", "generate_proj_matrix_piece", "(", "model", "=", "model", ",", "dim_reduction", "=", "dim_reduction", ",", "max_proj_size", "=", "max_proj_size", ",", "proj_type", "=", "proj_type", ")", "\n", "#init_rng_state = False", "\n", "# do proj here", "\n", "if", "proj_type", "==", "2", ":", "\n", "#vectorized = torch.sparse.mm(proj_matrix.t(),vectorized.t())", "\n", "            ", "sys", ".", "exit", "(", "'Proj type 2 not immplemented yet!'", ")", "\n", "", "elif", "proj_type", "in", "(", "1", ",", "3", ")", ":", "\n", "#print('proj size:{}, vect size:{}'.format(proj_matrix.shape, vectorized.shape))", "\n", "#print(proj_grads[i_proj*max_proj_size:(i_proj+1)*max_proj_size].shape)", "\n", "            ", "proj_grads", "[", "i_proj", "*", "max_proj_size", ":", "(", "i_proj", "+", "1", ")", "*", "max_proj_size", "]", "=", "torch", ".", "mm", "(", "proj_matrix", ".", "t", "(", ")", ",", "vector_for_proj", ".", "t", "(", ")", ")", ".", "view", "(", "max_proj_size", ")", "\n", "\n", "", "", "proj_matrix", "=", "None", "\n", "#print(proj_grads)", "\n", "\n", "# return to non-shared randomness", "\n", "dim_red_rng_state", "=", "torch", ".", "get_rng_state", "(", ")", "\n", "torch", ".", "set_rng_state", "(", "curr_rng_state", ")", "\n", "\n", "return", "proj_grads", ",", "dim_red_rng_state", "\n", "\n"]], "home.repos.pwc.inspect_result.DPBayes_DP-cross-silo-federated-learning.None.utils.generate_proj_matrix_piece": [[128, 135], ["torch.randn", "torch.randn", "numpy.sqrt"], "function", ["None"], ["", "def", "generate_proj_matrix_piece", "(", "model", ",", "dim_reduction", ",", "max_proj_size", ",", "proj_type", "=", "1", ")", ":", "\n", "\n", "    ", "proj_matrix", "=", "None", "\n", "if", "proj_type", "==", "1", ":", "\n", "        ", "proj_matrix", "=", "1", "/", "np", ".", "sqrt", "(", "dim_reduction", ")", "*", "torch", ".", "randn", "(", "model", ".", "total_params", ",", "max_proj_size", ")", "\n", "\n", "", "return", "proj_matrix", "\n", "\n"]], "home.repos.pwc.inspect_result.DPBayes_DP-cross-silo-federated-learning.None.utils.generate_proj_matrix": [[138, 168], ["torch.get_rng_state", "torch.get_rng_state", "torch.set_rng_state", "torch.set_rng_state", "torch.get_rng_state", "torch.get_rng_state", "torch.set_rng_state", "torch.set_rng_state", "torch.randn", "torch.randn", "int", "int", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.cat", "torch.cat", "torch.sparse.FloatTensor", "torch.sparse.FloatTensor", "sys.exit", "numpy.sqrt", "torch.distributions.binomial.Binomial().sample", "torch.distributions.binomial.Binomial().sample", "torch.distributions.binomial.Binomial().sample", "torch.distributions.binomial.Binomial().sample", "torch.cat", "torch.cat", "torch.Size", "torch.Size", "int", "int", "torch.ones", "torch.ones", "torch.distributions.binomial.Binomial", "torch.distributions.binomial.Binomial", "torch.distributions.binomial.Binomial", "torch.distributions.binomial.Binomial", "torch.zeros", "torch.zeros", "int", "int"], "function", ["None"], ["", "def", "generate_proj_matrix", "(", "model", ",", "dim_reduction", ",", "dim_red_rng_state", ",", "proj_const", ",", "proj_type", "=", "1", ")", ":", "\n", "    ", "curr_rng_state", "=", "torch", ".", "get_rng_state", "(", ")", "\n", "torch", ".", "set_rng_state", "(", "dim_red_rng_state", ")", "\n", "#print(torch.get_rng_state())", "\n", "\n", "if", "proj_type", "==", "1", ":", "\n", "## N(0,1) projection", "\n", "        ", "proj_matrix", "=", "(", "1", "/", "np", ".", "sqrt", "(", "dim_reduction", ")", ")", "*", "torch", ".", "randn", "(", "model", ".", "total_params", ",", "dim_reduction", ")", "\n", "\n", "", "elif", "proj_type", "==", "2", ":", "\n", "## sparse projection", "\n", "# draw number of non-zeros", "\n", "        ", "non_zeros", "=", "int", "(", "torch", ".", "distributions", ".", "binomial", ".", "Binomial", "(", "total_count", "=", "(", "model", ".", "total_params", "*", "dim_reduction", ")", ",", "probs", "=", "1", "/", "(", "2", "*", "proj_const", ")", ")", ".", "sample", "(", "[", "1", "]", ")", ")", "\n", "# draw number of positives", "\n", "num_pos", "=", "int", "(", "torch", ".", "distributions", ".", "binomial", ".", "Binomial", "(", "total_count", "=", "non_zeros", ",", "probs", "=", ".5", ")", ".", "sample", "(", "[", "1", "]", ")", ")", "\n", "# draw indices & values for non-zeros", "\n", "i", "=", "torch", ".", "randint", "(", "high", "=", "int", "(", "model", ".", "total_params", ")", ",", "size", "=", "(", "1", ",", "non_zeros", ")", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "ii", "=", "torch", ".", "randint", "(", "high", "=", "int", "(", "dim_reduction", ")", ",", "size", "=", "(", "1", ",", "non_zeros", ")", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "# take first num_pos as ones, rest as -1 (and add scaling)", "\n", "# do scaling later at master", "\n", "vals", "=", "torch", ".", "cat", "(", "(", "torch", ".", "ones", "(", "num_pos", ")", ",", "torch", ".", "zeros", "(", "non_zeros", "-", "num_pos", ")", "-", "1", ")", ")", "\n", "\n", "proj_matrix", "=", "torch", ".", "sparse", ".", "FloatTensor", "(", "torch", ".", "cat", "(", "(", "i", ",", "ii", ")", ",", "dim", "=", "0", ")", ",", "vals", ",", "torch", ".", "Size", "(", "[", "int", "(", "model", ".", "total_params", ")", ",", "int", "(", "dim_reduction", ")", "]", ")", ")", "#.coalesce()", "\n", "\n", "", "else", ":", "\n", "        ", "sys", ".", "exit", "(", "'Unknown projection type!'", ")", "\n", "\n", "", "dim_red_rng_state", "=", "torch", ".", "get_rng_state", "(", ")", "\n", "torch", ".", "set_rng_state", "(", "curr_rng_state", ")", "\n", "return", "proj_matrix", ",", "dim_red_rng_state", "\n", "\n"]], "home.repos.pwc.inspect_result.DPBayes_DP-cross-silo-federated-learning.None.client_comm_funs.get_pairwise_secrets": [[16, 43], ["collections.OrderedDict", "numpy.ceil", "range", "len", "range", "print", "numpy.ceil", "len", "numpy.ceil", "str", "str"], "function", ["None"], ["def", "get_pairwise_secrets", "(", "all_params", ",", "run_id", ")", ":", "\n", "# this can be done with any standard key-exchange; this is a toy implementation", "\n", "# which doesn't actually share any secrets; also uses simple fixing for determining the pairs", "\n", "\n", "#all_params['n_encrypted_scheme2']", "\n", "\n", "    ", "pairwise_secrets", "=", "od", "(", ")", "\n", "pairwise_secrets", "[", "'secrets'", "]", "=", "{", "}", "\n", "# use simple groups of first #group size etc", "\n", "group", "=", "np", ".", "ceil", "(", "run_id", "/", "all_params", "[", "'n_encrypted_scheme2'", "]", ")", "\n", "if", "run_id", ">", "1", ":", "\n", "        ", "for", "k", "in", "range", "(", "run_id", "-", "1", ",", "0", ",", "-", "1", ")", ":", "\n", "            ", "if", "np", ".", "ceil", "(", "k", "/", "all_params", "[", "'n_encrypted_scheme2'", "]", ")", "==", "group", ":", "\n", "                ", "pairwise_secrets", "[", "'secrets'", "]", "[", "str", "(", "k", ")", "]", "=", "'some_pairwise_secret'", ".", "encode", "(", "'utf-8'", ")", "\n", "", "else", ":", "\n", "                ", "break", "\n", "", "", "", "if", "run_id", "<", "len", "(", "all_params", "[", "'client_list'", "]", ")", ":", "\n", "        ", "for", "k", "in", "range", "(", "run_id", "+", "1", ",", "len", "(", "all_params", "[", "'client_list'", "]", ")", "+", "1", ")", ":", "\n", "            ", "if", "np", ".", "ceil", "(", "k", "/", "all_params", "[", "'n_encrypted_scheme2'", "]", ")", "==", "group", ":", "\n", "                ", "pairwise_secrets", "[", "'secrets'", "]", "[", "str", "(", "k", ")", "]", "=", "'some_pairwise_secret'", ".", "encode", "(", "'utf-8'", ")", "\n", "", "else", ":", "\n", "                ", "break", "\n", "\n", "", "", "", "if", "all_params", "[", "'debug'", "]", ":", "\n", "        ", "print", "(", "'all key-pairs for Client {}: {}'", ".", "format", "(", "run_id", ",", "pairwise_secrets", ")", ")", "\n", "", "pairwise_secrets", "[", "'round'", "]", "=", "0", "\n", "return", "pairwise_secrets", "\n", "\n"]], "home.repos.pwc.inspect_result.DPBayes_DP-cross-silo-federated-learning.None.client_comm_funs.read_incoming_messages": [[44, 77], ["waiting_dict.pop", "range", "print", "time.sleep", "waiting_dict.keys", "waiting_dict.pop", "len", "sys.exit", "torch.load", "os.remove", "os.remove", "found_grads.append", "open", "waiting_dict.keys", "str", "str", "str", "str", "str", "str", "str", "str", "str"], "function", ["None"], ["", "def", "read_incoming_messages", "(", "all_params", ",", "run_id", ")", ":", "\n", "# for message exchange using basic secret sharing", "\n", "# wait for messages", "\n", "    ", "waiting_dict", "=", "{", "key", ":", "1", "for", "key", "in", "all_params", "[", "'client_list'", "]", "}", "\n", "waiting_dict", ".", "pop", "(", "run_id", ")", "\n", "\n", "if", "all_params", "[", "'debug'", "]", ":", "\n", "        ", "print", "(", "'Client {} waiting for messages..'", ".", "format", "(", "run_id", ")", ")", "\n", "", "all_msg", "=", "{", "}", "\n", "for", "i_wait", "in", "range", "(", "all_params", "[", "'master_max_wait'", "]", ")", ":", "\n", "\n", "        ", "time", ".", "sleep", "(", "all_params", "[", "'loop_wait_time'", "]", ")", "\n", "found_grads", "=", "[", "]", "\n", "for", "k", "in", "waiting_dict", ".", "keys", "(", ")", ":", "\n", "            ", "try", ":", "\n", "                ", "with", "open", "(", "all_params", "[", "'grads_ping_file'", "]", "+", "str", "(", "k", ")", "+", "'-to-'", "+", "str", "(", "run_id", ")", ",", "'r'", ")", "as", "f", ":", "\n", "                    ", "pass", "\n", "", "all_msg", "[", "str", "(", "k", ")", "]", "=", "torch", ".", "load", "(", "all_params", "[", "'sent_grads_file'", "]", "+", "str", "(", "k", ")", "+", "'-to-'", "+", "str", "(", "run_id", ")", ")", "\n", "#print('Read grad msg from client {}'.format(k))", "\n", "os", ".", "remove", "(", "all_params", "[", "'grads_ping_file'", "]", "+", "str", "(", "k", ")", "+", "'-to-'", "+", "str", "(", "run_id", ")", ")", "\n", "os", ".", "remove", "(", "all_params", "[", "'sent_grads_file'", "]", "+", "str", "(", "k", ")", "+", "'-to-'", "+", "str", "(", "run_id", ")", ")", "\n", "found_grads", ".", "append", "(", "k", ")", "\n", "\n", "", "except", "FileNotFoundError", "as", "err", ":", "\n", "                ", "pass", "\n", "", "", "for", "k", "in", "found_grads", ":", "\n", "            ", "waiting_dict", ".", "pop", "(", "k", ")", "\n", "", "if", "len", "(", "waiting_dict", ")", "==", "0", ":", "\n", "            ", "break", "\n", "\n", "", "if", "i_wait", "==", "all_params", "[", "'master_max_wait'", "]", "-", "1", ":", "\n", "            ", "sys", ".", "exit", "(", "'Client {} didn\\'t get all grads, waiting for {}! Aborting..'", ".", "format", "(", "run_id", ",", "waiting_dict", ".", "keys", "(", ")", ")", ")", "\n", "", "", "return", "all_msg", "\n", "\n"]], "home.repos.pwc.inspect_result.DPBayes_DP-cross-silo-federated-learning.None.client_comm_funs.parse_partial_grads": [[78, 89], ["enumerate", "model.parameters", "torch.zeros_like", "torch.remainder", "str", "str", "[].to", "str", "str", "str"], "function", ["home.repos.pwc.inspect_result.DPBayes_DP-cross-silo-federated-learning.None.utils.BogusModel.parameters"], ["", "def", "parse_partial_grads", "(", "model", ",", "msg", ",", "all_params", ",", "run_id", ")", ":", "\n", "# for parsing messages from other clients in basic secret sharing scheme", "\n", "    ", "partial_sums", "=", "{", "}", "\n", "for", "i_param", ",", "p", "in", "enumerate", "(", "model", ".", "parameters", "(", ")", ")", ":", "\n", "        ", "if", "p", "is", "not", "None", ":", "\n", "            ", "partial_sums", "[", "str", "(", "i_param", ")", "]", "=", "torch", ".", "zeros_like", "(", "p", "[", "0", "]", ",", "dtype", "=", "torch", ".", "int64", ")", "\n", "# add each msg ", "\n", "for", "client", "in", "all_params", "[", "'client_list'", "]", ":", "\n", "                ", "if", "client", "==", "run_id", ":", "continue", "\n", "partial_sums", "[", "str", "(", "i_param", ")", "]", "=", "torch", ".", "remainder", "(", "partial_sums", "[", "str", "(", "i_param", ")", "]", "+", "msg", "[", "str", "(", "client", ")", "]", "[", "str", "(", "i_param", ")", "]", ".", "to", "(", "torch", ".", "int64", ")", ",", "all_params", "[", "'modulo'", "]", ")", "\n", "", "", "", "return", "partial_sums", "\n", "\n"]], "home.repos.pwc.inspect_result.DPBayes_DP-cross-silo-federated-learning.None.client_comm_funs.send_grads_fat_pairwise": [[92, 167], ["enumerate", "enumerate", "torch.save", "print", "open", "print", "print", "sys.exit", "os.remove", "model.parameters", "model.parameters", "open", "pickle.dump", "open", "pickle.dump", "np.remainder.astype", "str", "str", "p.grad[].clone", "torch.zeros_like", "numpy.remainder", "print", "print", "str", "str", "str", "torch.round().detach().numpy", "numpy.zeros_like", "int", "numpy.remainder", "numpy.remainder", "apu.append", "apu2.append", "str", "numpy.remainder", "str", "str", "p[].detach().numpy", "numpy.remainder", "numpy.remainder", "torch.round().detach", "numpy.remainder().reshape", "numpy.remainder().reshape", "p[].detach", "numpy.zeros_like", "numpy.remainder().reshape", "numpy.remainder().reshape", "torch.round", "numpy.remainder", "numpy.remainder", "numpy.remainder", "numpy.remainder", "torch.clamp", "str", "str", "str", "str"], "function", ["home.repos.pwc.inspect_result.DPBayes_DP-cross-silo-federated-learning.None.utils.BogusModel.parameters", "home.repos.pwc.inspect_result.DPBayes_DP-cross-silo-federated-learning.None.utils.BogusModel.parameters"], ["", "def", "send_grads_fat_pairwise", "(", "model", ",", "all_params", ",", "run_id", ",", "include_grads", ",", "all_rand", ",", "pairwise_secrets", ")", ":", "\n", "# fat clients using pairwise keys", "\n", "\n", "    ", "true_grads", "=", "{", "}", "\n", "if", "all_params", "[", "'debug'", "]", "or", "not", "all_params", "[", "'use_encryption'", "]", ":", "\n", "         ", "for", "i", ",", "p", "in", "enumerate", "(", "model", ".", "parameters", "(", ")", ")", ":", "\n", "            ", "if", "p", "is", "not", "None", ":", "\n", "                ", "if", "include_grads", ":", "\n", "                    ", "true_grads", "[", "str", "(", "i", ")", "]", "=", "p", ".", "grad", "[", "0", "]", ".", "clone", "(", ")", "\n", "", "else", ":", "\n", "                    ", "true_grads", "[", "str", "(", "i", ")", "]", "=", "torch", ".", "zeros_like", "(", "p", "[", "0", "]", ")", "\n", "\n", "", "", "", "", "if", "all_params", "[", "'use_encryption'", "]", ":", "\n", "        ", "'''\n        if all_params['debug']:\n            print('Client {} generated {} random ints in {}s'.format(run_id, total_params*(len(all_params['client_list'])-1),rand_time))\n        '''", "\n", "\n", "all_grads", "=", "{", "}", "\n", "rand_counter", "=", "0", "\n", "for", "i", ",", "p", "in", "enumerate", "(", "model", ".", "parameters", "(", ")", ")", ":", "\n", "            ", "if", "p", "is", "not", "None", ":", "\n", "                ", "if", "include_grads", ":", "\n", "                    ", "pp", "=", "np", ".", "remainder", "(", "torch", ".", "round", "(", "all_params", "[", "'fixed_point_int'", "]", "*", "(", "torch", ".", "clamp", "(", "p", ".", "grad", "[", "0", "]", ",", "min", "=", "-", "all_params", "[", "'offset'", "]", ",", "max", "=", "all_params", "[", "'offset'", "]", ")", "+", "all_params", "[", "'offset'", "]", ")", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", ",", "all_params", "[", "'modulo'", "]", ")", "#.astype('uint32')", "\n", "", "else", ":", "\n", "                    ", "pp", "=", "(", "np", ".", "zeros_like", "(", "p", "[", "0", "]", ".", "detach", "(", ")", ".", "numpy", "(", ")", ",", "dtype", "=", "'uint64'", ")", "+", "all_params", "[", "'fixed_point_int'", "]", "*", "all_params", "[", "'offset'", "]", ")", "\n", "\n", "", "if", "all_params", "[", "'debug'", "]", ":", "\n", "                    ", "apu", ",", "apu2", ",", "apu3", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "", "i_rand", "=", "rand_counter", "\n", "for", "k", "in", "pairwise_secrets", "[", "'secrets'", "]", ":", "\n", "                    ", "if", "int", "(", "k", ")", "<", "run_id", ":", "\n", "                        ", "pp", "=", "np", ".", "remainder", "(", "pp", "+", "np", ".", "remainder", "(", "all_rand", "[", "str", "(", "k", ")", "]", "[", "i_rand", ":", "(", "i_rand", "+", "pp", ".", "size", ")", "]", ",", "all_params", "[", "'modulo'", "]", ")", ".", "reshape", "(", "pp", ".", "shape", ")", ",", "all_params", "[", "'modulo'", "]", ")", "\n", "", "else", ":", "\n", "                        ", "pp", "=", "np", ".", "remainder", "(", "pp", "+", "np", ".", "remainder", "(", "all_params", "[", "'modulo'", "]", "-", "all_rand", "[", "str", "(", "k", ")", "]", "[", "i_rand", ":", "(", "i_rand", "+", "pp", ".", "size", ")", "]", ",", "all_params", "[", "'modulo'", "]", ")", ".", "reshape", "(", "pp", ".", "shape", ")", ",", "all_params", "[", "'modulo'", "]", ")", "\n", "# test that noise actually cancels out", "\n", "", "if", "all_params", "[", "'debug'", "]", ":", "\n", "                        ", "apu", ".", "append", "(", "np", ".", "remainder", "(", "np", ".", "zeros_like", "(", "pp", ",", "dtype", "=", "'uint32'", ")", "+", "np", ".", "remainder", "(", "all_rand", "[", "str", "(", "k", ")", "]", "[", "i_rand", ":", "(", "i_rand", "+", "pp", ".", "size", ")", "]", ",", "all_params", "[", "'modulo'", "]", ")", ".", "reshape", "(", "pp", ".", "shape", ")", ",", "all_params", "[", "'modulo'", "]", ",", "dtype", "=", "'uint32'", ")", ")", "\n", "apu2", ".", "append", "(", "np", ".", "remainder", "(", "all_params", "[", "'modulo'", "]", "-", "np", ".", "remainder", "(", "all_rand", "[", "str", "(", "k", ")", "]", "[", "i_rand", ":", "(", "i_rand", "+", "pp", ".", "size", ")", "]", ",", "all_params", "[", "'modulo'", "]", ")", ".", "reshape", "(", "pp", ".", "shape", ")", ",", "all_params", "[", "'modulo'", "]", ",", "dtype", "=", "'uint32'", ")", ")", "\n", "\n", "", "", "rand_counter", "+=", "pp", ".", "size", "\n", "all_grads", "[", "str", "(", "i", ")", "]", "=", "pp", ".", "astype", "(", "'uint32'", ")", "\n", "\n", "\n", "", "if", "all_params", "[", "'debug'", "]", ":", "\n", "                ", "if", "all_params", "[", "'n_encrypted_scheme2'", "]", "==", "3", ":", "\n", "                    ", "print", "(", "'remainders'", ")", "\n", "print", "(", "np", ".", "remainder", "(", "apu", "[", "0", "]", "[", ":", "4", ",", ":", "4", "]", "+", "apu", "[", "1", "]", "[", ":", "4", ",", ":", "4", "]", "+", "apu2", "[", "0", "]", "[", ":", "4", ",", ":", "4", "]", "+", "apu", "[", "1", "]", "[", ":", "4", ",", ":", "4", "]", "+", "apu2", "[", "0", "]", "[", ":", "4", ",", ":", "4", "]", "+", "apu2", "[", "1", "]", "[", ":", "4", ",", ":", "4", "]", ",", "all_params", "[", "'modulo'", "]", ")", ")", "\n", "\n", "", "", "", "with", "open", "(", "all_params", "[", "'sent_grads_file'", "]", "+", "str", "(", "run_id", ")", ",", "'wb'", ")", "as", "f", ":", "\n", "            ", "pickle", ".", "dump", "(", "all_grads", ",", "f", ")", "\n", "\n", "#print(true_grads)", "\n", "", "", "if", "all_params", "[", "'debug'", "]", ":", "\n", "        ", "torch", ".", "save", "(", "true_grads", ",", "all_params", "[", "'sent_grads_file'", "]", "+", "str", "(", "run_id", ")", "+", "'_debug'", ")", "\n", "print", "(", "'Client {} grad msg sent'", ".", "format", "(", "run_id", ")", ")", "\n", "\n", "", "if", "not", "all_params", "[", "'use_encryption'", "]", ":", "\n", "        ", "with", "open", "(", "all_params", "[", "'sent_grads_file'", "]", "+", "str", "(", "run_id", ")", ",", "'wb'", ")", "as", "f", ":", "\n", "            ", "pickle", ".", "dump", "(", "true_grads", ",", "f", ")", "\n", "\n", "# ping master", "\n", "", "", "with", "open", "(", "all_params", "[", "'grads_ping_file'", "]", "+", "str", "(", "run_id", ")", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "pass", "\n", "\n", "", "if", "all_params", "[", "'debug'", "]", ":", "\n", "        ", "print", "(", "'true grads'", ")", "\n", "print", "(", "true_grads", "[", "'1'", "]", "[", ":", "4", ",", ":", "4", "]", ")", "\n", "sys", ".", "exit", "(", ")", "\n", "\n", "# clear weight ping and zero used grads", "\n", "", "try", ":", "\n", "        ", "os", ".", "remove", "(", "all_params", "[", "'weights_ping_file'", "]", "+", "str", "(", "run_id", ")", ")", "\n", "", "except", "FileNotFoundError", "as", "err", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.DPBayes_DP-cross-silo-federated-learning.None.client_comm_funs.send_grads_thin": [[170, 250], ["enumerate", "enumerate", "enumerate", "print", "torch.save", "open", "sys.exit", "os.remove", "model.parameters", "model.parameters", "open", "pickle.dump", "open", "pickle.dump", "model.parameters", "numpy.max", "numpy.zeros_like", "range", "p.grad[].detach().numpy", "torch.zeros_like().detach().numpy", "numpy.abs", "print", "print", "print", "str", "str", "p.grad[].clone", "torch.zeros_like", "all_grads[].append", "all_grads[].append", "p[].detach().numpy", "str", "str", "str", "str", "numpy.remainder", "all_grads[].append", "all_rand[].reshape", "p[].numel", "numpy.remainder", "numpy.remainder", "p.grad[].detach", "torch.zeros_like().detach", "str", "str", "numpy.rint().astype", "numpy.greater_equal().sum", "numpy.less().sum", "numpy.zeros_like", "p[].detach", "numpy.zeros_like", "p[].detach().numpy", "p[].detach().numpy", "p[].detach().numpy", "all_rand[].reshape.copy", "torch.zeros_like", "numpy.remainder().astype", "numpy.remainder().astype", "str", "numpy.rint", "numpy.greater_equal", "numpy.less", "str", "str", "str", "p[].detach", "str", "p[].detach", "p[].detach", "numpy.remainder", "numpy.remainder", "p[].numel", "str", "numpy.stack().sum", "numpy.stack().sum", "torch.clamp().numpy", "str", "str", "numpy.stack", "numpy.stack", "torch.clamp", "str", "str"], "function", ["home.repos.pwc.inspect_result.DPBayes_DP-cross-silo-federated-learning.None.utils.BogusModel.parameters", "home.repos.pwc.inspect_result.DPBayes_DP-cross-silo-federated-learning.None.utils.BogusModel.parameters", "home.repos.pwc.inspect_result.DPBayes_DP-cross-silo-federated-learning.None.utils.BogusModel.parameters"], ["", "", "def", "send_grads_thin", "(", "model", ",", "all_params", ",", "run_id", ",", "include_grads", ",", "all_rand", ")", ":", "\n", "\n", "# send grads to Compute nodes", "\n", "    ", "true_grads", "=", "{", "}", "\n", "if", "all_params", "[", "'debug'", "]", "or", "not", "all_params", "[", "'use_encryption'", "]", ":", "\n", "         ", "for", "i", ",", "p", "in", "enumerate", "(", "model", ".", "parameters", "(", ")", ")", ":", "\n", "            ", "if", "p", "is", "not", "None", ":", "\n", "                ", "if", "include_grads", ":", "\n", "                    ", "true_grads", "[", "str", "(", "i", ")", "]", "=", "p", ".", "grad", "[", "0", "]", ".", "clone", "(", ")", "\n", "", "else", ":", "\n", "                    ", "true_grads", "[", "str", "(", "i", ")", "]", "=", "torch", ".", "zeros_like", "(", "p", "[", "0", "]", ")", "\n", "\n", "", "", "", "", "if", "all_params", "[", "'use_encryption'", "]", ":", "\n", "        ", "all_grads", "=", "{", "}", "\n", "all_noise", "=", "{", "}", "\n", "\n", "i_rand", "=", "0", "\n", "for", "i", ",", "p", "in", "enumerate", "(", "model", ".", "parameters", "(", ")", ")", ":", "\n", "            ", "if", "p", "is", "not", "None", ":", "\n", "# generate all messages", "\n", "# 0 elem = true grads+noise, rest pure noise, final elem = -sum of all noise", "\n", "                ", "all_grads", "[", "str", "(", "i", ")", "]", "=", "[", "]", "\n", "if", "include_grads", ":", "\n", "                    ", "all_grads", "[", "str", "(", "i", ")", "]", ".", "append", "(", "np", ".", "remainder", "(", "(", "np", ".", "rint", "(", "all_params", "[", "'fixed_point_int'", "]", "*", "(", "torch", ".", "clamp", "(", "p", ".", "grad", "[", "0", "]", ",", "min", "=", "-", "all_params", "[", "'offset'", "]", ",", "max", "=", "all_params", "[", "'offset'", "]", ")", ".", "numpy", "(", ")", "+", "all_params", "[", "'offset'", "]", ")", ")", ")", ".", "astype", "(", "'uint32'", ",", "copy", "=", "False", ")", ",", "all_params", "[", "'modulo'", "]", ")", ")", "\n", "if", "all_params", "[", "'debug'", "]", ":", "\n", "                        ", "assert", "np", ".", "greater_equal", "(", "all_grads", "[", "str", "(", "i", ")", "]", "[", "0", "]", ",", "all_params", "[", "'modulo'", "]", ")", ".", "sum", "(", ")", "==", "0", "\n", "assert", "np", ".", "less", "(", "all_grads", "[", "str", "(", "i", ")", "]", "[", "0", "]", ",", "0", ")", ".", "sum", "(", ")", "==", "0", "\n", "", "", "else", ":", "\n", "                    ", "all_grads", "[", "str", "(", "i", ")", "]", ".", "append", "(", "np", ".", "zeros_like", "(", "p", "[", "0", "]", ".", "detach", "(", ")", ".", "numpy", "(", ")", ",", "dtype", "=", "'uint32'", ")", "+", "all_params", "[", "'fixed_point_int'", "]", "*", "all_params", "[", "'offset'", "]", ")", "\n", "", "all_noise", "=", "np", ".", "zeros_like", "(", "p", "[", "0", "]", ".", "detach", "(", ")", ".", "numpy", "(", ")", ",", "dtype", "=", "'uint32'", ")", "\n", "for", "k", "in", "range", "(", "all_params", "[", "'n_computes'", "]", ")", ":", "\n", "                    ", "if", "k", ">", "0", ":", "\n", "                        ", "all_grads", "[", "str", "(", "i", ")", "]", ".", "append", "(", "np", ".", "zeros_like", "(", "p", "[", "0", "]", ".", "detach", "(", ")", ".", "numpy", "(", ")", ",", "dtype", "=", "'uint32'", ")", ")", "\n", "", "if", "k", "<", "all_params", "[", "'n_computes'", "]", "-", "1", ":", "\n", "                        ", "noise", "=", "all_rand", "[", "i_rand", ":", "(", "i_rand", "+", "p", "[", "0", "]", ".", "numel", "(", ")", ")", "]", ".", "reshape", "(", "p", "[", "0", "]", ".", "detach", "(", ")", ".", "numpy", "(", ")", ".", "shape", ")", "\n", "i_rand", "+=", "p", "[", "0", "]", ".", "numel", "(", ")", "\n", "all_grads", "[", "str", "(", "i", ")", "]", "[", "k", "]", "=", "np", ".", "remainder", "(", "all_grads", "[", "str", "(", "i", ")", "]", "[", "k", "]", "+", "noise", ",", "all_params", "[", "'modulo'", "]", ")", "\n", "all_noise", "=", "np", ".", "remainder", "(", "all_noise", "+", "noise", ".", "copy", "(", ")", ",", "all_params", "[", "'modulo'", "]", ")", "\n", "", "else", ":", "\n", "                        ", "all_grads", "[", "str", "(", "i", ")", "]", "[", "k", "]", "=", "all_params", "[", "'modulo'", "]", "-", "all_noise", "\n", "\n", "", "", "", "", "with", "open", "(", "all_params", "[", "'sent_grads_file'", "]", "+", "str", "(", "run_id", ")", ",", "'wb'", ")", "as", "f", ":", "\n", "            ", "pickle", ".", "dump", "(", "all_grads", ",", "f", ")", "\n", "", "", "else", ":", "\n", "        ", "with", "open", "(", "all_params", "[", "'sent_grads_file'", "]", "+", "str", "(", "run_id", ")", ",", "'wb'", ")", "as", "f", ":", "\n", "            ", "pickle", ".", "dump", "(", "true_grads", ",", "f", ")", "\n", "\n", "# check that noise cancels out on summation", "\n", "", "", "if", "all_params", "[", "'debug'", "]", ":", "\n", "        ", "max_err", "=", "0", "\n", "for", "i", ",", "p", "in", "enumerate", "(", "model", ".", "parameters", "(", ")", ")", ":", "\n", "            ", "if", "include_grads", ":", "\n", "                ", "apu2", "=", "p", ".", "grad", "[", "0", "]", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "", "else", ":", "\n", "                ", "apu2", "=", "torch", ".", "zeros_like", "(", "p", "[", "0", "]", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "", "apu", "=", "np", ".", "max", "(", "np", ".", "abs", "(", "apu2", "-", "(", "1", "/", "all_params", "[", "'fixed_point_int'", "]", "*", "(", "np", ".", "remainder", "(", "np", ".", "stack", "(", "all_grads", "[", "str", "(", "i", ")", "]", ",", "axis", "=", "0", ")", ".", "sum", "(", "axis", "=", "0", ")", ",", "all_params", "[", "'modulo'", "]", ")", ".", "astype", "(", "'float'", ")", ")", "-", "all_params", "[", "'offset'", "]", ")", ")", ")", "\n", "if", "apu", ">", "max_err", ":", "\n", "                ", "max_err", "=", "apu", "\n", "", "if", "p", ".", "grad", "is", "not", "None", ":", "\n", "                ", "print", "(", "p", ".", "grad", ".", "shape", ")", "\n", "print", "(", "p", ".", "grad", "[", "0", "]", "[", ":", "3", ",", ":", "3", "]", ")", "\n", "print", "(", "(", "1", "/", "all_params", "[", "'fixed_point_int'", "]", "*", "(", "np", ".", "remainder", "(", "np", ".", "stack", "(", "all_grads", "[", "str", "(", "i", ")", "]", ",", "axis", "=", "0", ")", ".", "sum", "(", "axis", "=", "0", ")", ",", "all_params", "[", "'modulo'", "]", ")", ".", "astype", "(", "'float'", ")", ")", "-", "all_params", "[", "'offset'", "]", ")", "[", ":", "3", ",", ":", "3", "]", ")", "\n", "", "", "print", "(", "'max err in decrypted grads: {}'", ".", "format", "(", "max_err", ")", ")", "\n", "torch", ".", "save", "(", "true_grads", ",", "all_params", "[", "'sent_grads_file'", "]", "+", "str", "(", "run_id", ")", "+", "'_debug'", ")", "\n", "\n", "\n", "# ping master", "\n", "", "with", "open", "(", "all_params", "[", "'grads_ping_file'", "]", "+", "str", "(", "run_id", ")", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "pass", "\n", "", "if", "all_params", "[", "'debug'", "]", ":", "\n", "        ", "sys", ".", "exit", "(", ")", "\n", "\n", "# clear weight ping and zero used grads", "\n", "", "try", ":", "\n", "        ", "os", ".", "remove", "(", "all_params", "[", "'weights_ping_file'", "]", "+", "str", "(", "run_id", ")", ")", "\n", "", "except", "FileNotFoundError", "as", "err", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.DPBayes_DP-cross-silo-federated-learning.None.client_comm_funs.do_noise_generation": [[252, 298], ["time.time", "sys.exit", "all_crypto_times.append", "all_crypto_times.append", "all_crypto_times.append", "numpy.asarray", "print", "numpy.random.randint", "numpy.remainder", "print", "numpy.remainder", "time.time", "numpy.remainder", "numpy.asarray", "numpy.asarray", "numpy.asarray", "time.time", "secrets.randbelow", "str", "range", "int", "int", "int", "hashlib.blake2b().hexdigest", "range", "hashlib.blake2b().hexdigest", "range", "hashlib.blake2b().hexdigest", "range", "hashlib.blake2b", "hashlib.blake2b", "hashlib.blake2b", "str().encode", "str().encode", "str().encode", "secrets.token_bytes", "numpy.random.bytes", "str", "str", "str", "str"], "function", ["None"], ["", "", "def", "do_noise_generation", "(", "all_params", ",", "run_id", ",", "pairwise_secrets", ",", "all_crypto_times", ")", ":", "\n", "\n", "    ", "if", "not", "all_params", "[", "'use_encryption'", "]", ":", "\n", "        ", "all_crypto_times", ".", "append", "(", "0", ")", "\n", "return", "None", "\n", "\n", "", "if", "all_params", "[", "'dim_reduction'", "]", ">", "0", ":", "\n", "        ", "total_params", "=", "all_params", "[", "'dim_reduction'", "]", "\n", "", "else", ":", "\n", "        ", "total_params", "=", "all_params", "[", "'total_params'", "]", "\n", "\n", "", "start", "=", "time", ".", "time", "(", ")", "\n", "\n", "# scheme 1: thin clients", "\n", "if", "all_params", "[", "'scheme_type'", "]", "==", "1", ":", "\n", "# measure time needed for generating randomness for the encryption", "\n", "# use either urandom calls directly or seed blake2 hash with urandom", "\n", "        ", "if", "not", "all_params", "[", "'use_hash_in_scheme1'", "]", ":", "\n", "            ", "if", "all_params", "[", "'use_true_entropy'", "]", ":", "\n", "                ", "all_rand", "=", "np", ".", "asarray", "(", "[", "secrets", ".", "randbelow", "(", "all_params", "[", "'modulo'", "]", ")", "for", "i", "in", "range", "(", "total_params", "*", "(", "all_params", "[", "'n_computes'", "]", "-", "1", ")", ")", "]", ",", "dtype", "=", "'uint32'", ")", "\n", "", "else", ":", "\n", "                ", "print", "(", "'Using PRNG for encrypting, this is for debugging!'", ")", "\n", "all_rand", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "all_params", "[", "'modulo'", "]", "-", "1", ",", "size", "=", "total_params", "*", "(", "all_params", "[", "'n_computes'", "]", "-", "1", ")", ",", "dtype", "=", "'uint32'", ")", "\n", "", "", "else", ":", "\n", "            ", "if", "all_params", "[", "'use_true_entropy'", "]", ":", "\n", "                ", "all_rand", "=", "np", ".", "remainder", "(", "np", ".", "asarray", "(", "[", "int", "(", "hashlib", ".", "blake2b", "(", "str", "(", "i", ")", ".", "encode", "(", "'utf-8'", ")", ",", "digest_size", "=", "4", ",", "key", "=", "secrets", ".", "token_bytes", "(", "8", ")", ")", ".", "hexdigest", "(", ")", ",", "16", ")", "for", "i", "in", "range", "(", "total_params", "*", "(", "all_params", "[", "'n_computes'", "]", "-", "1", ")", ")", "]", ",", "dtype", "=", "'uint32'", ")", ",", "all_params", "[", "'modulo'", "]", ")", "\n", "", "else", ":", "\n", "                ", "print", "(", "'Using PRNG seeding hash, this is for debugging!'", ")", "\n", "all_rand", "=", "np", ".", "remainder", "(", "np", ".", "asarray", "(", "[", "int", "(", "hashlib", ".", "blake2b", "(", "str", "(", "i", ")", ".", "encode", "(", "'utf-8'", ")", ",", "digest_size", "=", "4", ",", "key", "=", "np", ".", "random", ".", "bytes", "(", "8", ")", ")", ".", "hexdigest", "(", ")", ",", "16", ")", "for", "i", "in", "range", "(", "total_params", "*", "(", "all_params", "[", "'n_computes'", "]", "-", "1", ")", ")", "]", ",", "dtype", "=", "'uint32'", ")", ",", "all_params", "[", "'modulo'", "]", ")", "\n", "\n", "", "", "all_crypto_times", ".", "append", "(", "time", ".", "time", "(", ")", "-", "start", ")", "\n", "return", "all_rand", "\n", "\n", "# scheme 2: fat clients with pairwise encryption", "\n", "", "elif", "all_params", "[", "'scheme_type'", "]", "==", "2", ":", "\n", "        ", "all_rand", "=", "{", "}", "\n", "\n", "for", "k", "in", "pairwise_secrets", "[", "'secrets'", "]", ":", "\n", "            ", "all_rand", "[", "str", "(", "k", ")", "]", "=", "np", ".", "remainder", "(", "np", ".", "asarray", "(", "[", "int", "(", "hashlib", ".", "blake2b", "(", "str", "(", "i", "+", "pairwise_secrets", "[", "'round'", "]", ")", ".", "encode", "(", "'utf-8'", ")", ",", "digest_size", "=", "4", ",", "key", "=", "pairwise_secrets", "[", "'secrets'", "]", "[", "str", "(", "k", ")", "]", ")", ".", "hexdigest", "(", ")", ",", "16", ")", "for", "i", "in", "range", "(", "total_params", ")", "]", ",", "dtype", "=", "'uint32'", ")", ",", "all_params", "[", "'modulo'", "]", ")", "\n", "\n", "", "all_crypto_times", ".", "append", "(", "time", ".", "time", "(", ")", "-", "start", ")", "\n", "pairwise_secrets", "[", "'round'", "]", "+=", "total_params", "\n", "\n", "return", "all_rand", "\n", "\n", "", "sys", ".", "exit", "(", "'Invalid scheme for crypto rand generation!'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DPBayes_DP-cross-silo-federated-learning.None.client_comm_funs.check_kill_ping": [[300, 318], ["print", "sys.exit", "open", "open", "pickle.dump", "print", "str", "str", "str"], "function", ["None"], ["", "def", "check_kill_ping", "(", "kill_ping_file", ",", "all_params", ",", "joint_sampler", ",", "all_crypto_times", ",", "run_id", ",", "print_res", "=", "False", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "with", "open", "(", "kill_ping_file", "+", "str", "(", "run_id", ")", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "pass", "\n", "", "print", "(", "'Kill ping received on client {}, exiting..'", ".", "format", "(", "run_id", ")", ")", "\n", "# NOTE: SAVE ESSENTIAL STUFF HERE", "\n", "res", "=", "{", "}", "\n", "res", "[", "'all_crypto_times'", "]", "=", "all_crypto_times", "\n", "res", "[", "'all_batches'", "]", "=", "joint_sampler", ".", "drawn_batch_sizes", "\n", "with", "open", "(", "all_params", "[", "'res_save_file'", "]", "+", "str", "(", "all_params", "[", "'l_rate'", "]", ")", "+", "'_'", "+", "str", "(", "run_id", ")", "+", "'.pickle'", ",", "'wb'", ")", "as", "f", ":", "\n", "            ", "pickle", ".", "dump", "(", "res", ",", "f", ")", "\n", "", "if", "print_res", ":", "\n", "            ", "print", "(", "'res client {}:\\n{}'", ".", "format", "(", "run_id", ",", "res", ")", ")", "\n", "", "sys", ".", "exit", "(", ")", "\n", "#raise RuntimeError('Kill ping received')", "\n", "", "except", "FileNotFoundError", "as", "err", ":", "\n", "#print(sys.exc_info())", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.DPBayes_DP-cross-silo-federated-learning.None.run_client.Joint_sampler.__init__": [[34, 71], ["torch.get_rng_state", "torch.get_rng_state", "torch.get_rng_state", "torch.get_rng_state", "torch.get_rng_state", "torch.get_rng_state", "torch.get_rng_state", "torch.get_rng_state", "torch.set_rng_state", "torch.set_rng_state", "torch.set_rng_state", "torch.set_rng_state", "int", "torch.cuda.get_rng_state", "torch.cuda.get_rng_state", "torch.cuda.get_rng_state", "torch.cuda.get_rng_state", "torch.cuda.get_rng_state", "torch.cuda.get_rng_state", "torch.cuda.get_rng_state", "torch.cuda.get_rng_state", "torch.cuda.set_rng_state", "torch.cuda.set_rng_state", "torch.cuda.set_rng_state", "torch.cuda.set_rng_state", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.distributions.binomial.Binomial", "torch.distributions.binomial.Binomial", "torch.distributions.binomial.Binomial", "torch.distributions.binomial.Binomial", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "len", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "trainset", ",", "shared_seed", ",", "client_data_indices", ",", "full_data_size", ",", "batch_size", ",", "batch_proc_size", ",", "use_cuda", ",", "use_joint_sampling", ",", "priv_seed", ",", "data_dims", ",", "poisson_sampling_fraction", "=", "0", ")", ":", "\n", "\n", "# data_dims for cifar:", "\n", "# data_dims = (3,32,32)", "\n", "\n", "        ", "curr_prng_state", "=", "torch", ".", "get_rng_state", "(", ")", "\n", "if", "use_cuda", ":", "\n", "            ", "curr_cuda_prng_state", "=", "torch", ".", "cuda", ".", "get_rng_state", "(", ")", "\n", "if", "use_joint_sampling", ":", "\n", "                ", "torch", ".", "cuda", ".", "manual_seed", "(", "shared_seed", ")", "\n", "", "else", ":", "\n", "                ", "torch", ".", "cuda", ".", "manual_seed", "(", "priv_seed", ")", "\n", "\n", "", "self", ".", "joint_cuda_sampler_state", "=", "torch", ".", "cuda", ".", "get_rng_state", "(", ")", "\n", "torch", ".", "cuda", ".", "set_rng_state", "(", "curr_cuda_prng_state", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "joint_cuda_sampler_state", "=", "None", "\n", "\n", "", "if", "use_joint_sampling", ":", "\n", "            ", "torch", ".", "manual_seed", "(", "shared_seed", ")", "\n", "", "else", ":", "\n", "            ", "torch", ".", "manual_seed", "(", "priv_seed", ")", "\n", "\n", "", "self", ".", "joint_sampler_state", "=", "torch", ".", "get_rng_state", "(", ")", "\n", "torch", ".", "set_rng_state", "(", "curr_prng_state", ")", "\n", "\n", "self", ".", "data_indices", "=", "client_data_indices", "\n", "self", ".", "full_data_size", "=", "int", "(", "full_data_size", ")", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "batch_proc_size", "=", "batch_proc_size", "\n", "self", ".", "drawn_batch_sizes", "=", "[", "]", "\n", "self", ".", "use_cuda", "=", "use_cuda", "\n", "self", ".", "trainset", "=", "trainset", "\n", "self", ".", "poisson_sampling_fraction", "=", "poisson_sampling_fraction", "\n", "\n", "if", "poisson_sampling_fraction", ">", "0", ":", "\n", "            ", "self", ".", "Bin", "=", "torch", ".", "distributions", ".", "binomial", ".", "Binomial", "(", "total_count", "=", "len", "(", "self", ".", "data_indices", ")", ",", "probs", "=", "torch", ".", "tensor", "(", "[", "poisson_sampling_fraction", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DPBayes_DP-cross-silo-federated-learning.None.run_client.Joint_sampler.draw_batch": [[74, 114], ["torch.get_rng_state", "torch.get_rng_state", "torch.get_rng_state", "torch.get_rng_state", "torch.set_rng_state", "torch.set_rng_state", "torch.set_rng_state", "torch.set_rng_state", "run_client.Joint_sampler.drawn_batch_sizes.append", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "enumerate", "torch.get_rng_state", "torch.get_rng_state", "torch.get_rng_state", "torch.get_rng_state", "torch.set_rng_state", "torch.set_rng_state", "torch.set_rng_state", "torch.set_rng_state", "torch.cuda.get_rng_state", "torch.cuda.get_rng_state", "torch.cuda.get_rng_state", "torch.cuda.get_rng_state", "torch.cuda.set_rng_state", "torch.cuda.set_rng_state", "torch.cuda.set_rng_state", "torch.cuda.set_rng_state", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "len", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "target.long", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "int", "len", "run_client.Joint_sampler.Bin.sample"], "methods", ["None"], ["", "", "def", "draw_batch", "(", "self", ")", ":", "\n", "# Note: need to match between clients all eiter cpu or gpu; cpu & gpu random generators are not synced even when using common seed; currently assume all cpu", "\n", "        ", "if", "self", ".", "use_cuda", ":", "\n", "            ", "curr_cuda_prng_state", "=", "torch", ".", "cuda", ".", "get_rng_state", "(", ")", "\n", "torch", ".", "cuda", ".", "set_rng_state", "(", "self", ".", "joint_cuda_sampler_state", ")", "\n", "", "curr_prng_state", "=", "torch", ".", "get_rng_state", "(", ")", "\n", "torch", ".", "set_rng_state", "(", "self", ".", "joint_sampler_state", ")", "\n", "\n", "if", "self", ".", "poisson_sampling_fraction", "==", "0", ":", "\n", "            ", "full_batch", "=", "torch", ".", "randperm", "(", "n", "=", "self", ".", "full_data_size", ")", "[", ":", "self", ".", "batch_size", "]", "#.tolist()", "\n", "inds1", "=", "torch", ".", "zeros", "(", "self", ".", "full_data_size", ",", "dtype", "=", "torch", ".", "uint8", ")", "\n", "inds1", "[", "self", ".", "data_indices", "]", "=", "1", "\n", "inds2", "=", "torch", ".", "zeros", "(", "self", ".", "full_data_size", ",", "dtype", "=", "torch", ".", "uint8", ")", "\n", "inds2", "[", "full_batch", "]", "=", "1", "\n", "inds", "=", "(", "torch", ".", "arange", "(", "self", ".", "full_data_size", ")", ")", "[", "inds1", "*", "inds2", "]", "\n", "inds", "-=", "self", ".", "data_indices", "[", "0", "]", "# since dataset currently starts from 0 for each client", "\n", "\n", "", "else", ":", "\n", "            ", "inds", "=", "torch", ".", "randperm", "(", "n", "=", "len", "(", "self", ".", "data_indices", ")", ")", "[", ":", "int", "(", "self", ".", "Bin", ".", "sample", "(", ")", ")", "]", "\n", "\n", "\n", "", "self", ".", "drawn_batch_sizes", ".", "append", "(", "len", "(", "inds", ")", ")", "\n", "# pad with zeros so batch_proc_size is ok", "\n", "#print('drawn batch:{}, batch proc:{}, tb % bp:{}'.format(self.drawn_batch_sizes[-1],self.batch_proc_size,self.drawn_batch_sizes[-1]%self.batch_proc_size ))", "\n", "\n", "if", "self", ".", "drawn_batch_sizes", "[", "-", "1", "]", "%", "self", ".", "batch_proc_size", "==", "0", ":", "\n", "            ", "padded_size", "=", "self", ".", "drawn_batch_sizes", "[", "-", "1", "]", "\n", "", "else", ":", "\n", "            ", "padded_size", "=", "self", ".", "drawn_batch_sizes", "[", "-", "1", "]", "+", "self", ".", "batch_proc_size", "-", "self", ".", "drawn_batch_sizes", "[", "-", "1", "]", "%", "self", ".", "batch_proc_size", "\n", "\n", "", "data", "=", "torch", ".", "zeros", "(", "(", "padded_size", ",", "*", "data_dims", ")", ")", "\n", "target", "=", "torch", ".", "zeros", "(", "(", "padded_size", ")", ")", "-", "100", "# set NLLLoss to ignore these values", "\n", "#print('data shape: {}'.format(data.shape))", "\n", "assert", "(", "data", ".", "shape", "[", "0", "]", "%", "self", ".", "batch_proc_size", "==", "0", "and", "target", ".", "shape", "[", "0", "]", "%", "self", ".", "batch_proc_size", "==", "0", ")", "\n", "\n", "for", "i", ",", "ind", "in", "enumerate", "(", "inds", ")", ":", "\n", "            ", "data", "[", "i", ",", ":", ",", ":", ",", ":", "]", ",", "target", "[", "i", "]", "=", "self", ".", "trainset", "[", "ind", "]", "[", "0", "]", ",", "self", ".", "trainset", "[", "ind", "]", "[", "1", "]", "\n", "", "self", ".", "joint_sampler_state", "=", "torch", ".", "get_rng_state", "(", ")", "\n", "torch", ".", "set_rng_state", "(", "curr_prng_state", ")", "\n", "return", "data", ",", "target", ".", "long", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DPBayes_DP-cross-silo-federated-learning.None.run_client.calculate_grads": [[116, 207], ["fc_model.train", "joint_sampler.draw_batch", "collections.OrderedDict", "enumerate", "range", "model1.train", "utils.BogusModel", "print", "torch.autograd.Variable", "torch.autograd.Variable", "fc_model.parameters", "loss_function", "loss_function.backward", "px_expander.acc_scaled_grads", "fc_model.zero_grad", "utils.BogusModel", "torch.zeros", "torch.zeros", "enumerate", "utils.do_proj_in_steps", "apu.view", "px_expander.add_noise_with_cum_grads", "torch.zeros().expand", "torch.zeros().expand", "torch.zeros", "torch.zeros", "utils.do_proj_in_steps", "data.cuda", "target.cuda", "len", "model1", "fc_model", "fc_model", "torch.zeros().expand", "torch.zeros().expand", "cum_grads[].view", "torch.autograd.Variable().cuda", "torch.autograd.Variable", "torch.randn().view", "torch.randn().view", "utils.BogusModel.parameters", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "utils.BogusModel.parameters", "utils.BogusModel.parameters", "torch.randn().view", "torch.randn().view", "str", "torch.autograd.Variable", "str", "torch.randn", "torch.randn", "utils.BogusModel.parameters", "torch.zeros", "torch.zeros", "torch.randn", "torch.randn"], "function", ["home.repos.pwc.inspect_result.DPBayes_DP-cross-silo-federated-learning.None.run_client.Joint_sampler.draw_batch", "home.repos.pwc.inspect_result.DPBayes_DP-cross-silo-federated-learning.None.utils.BogusModel.parameters", "home.repos.pwc.inspect_result.DPBayes_DP-cross-silo-federated-learning.None.px_expander.acc_scaled_grads", "home.repos.pwc.inspect_result.DPBayes_DP-cross-silo-federated-learning.None.utils.do_proj_in_steps", "home.repos.pwc.inspect_result.DPBayes_DP-cross-silo-federated-learning.None.px_expander.add_noise_with_cum_grads", "home.repos.pwc.inspect_result.DPBayes_DP-cross-silo-federated-learning.None.utils.do_proj_in_steps", "home.repos.pwc.inspect_result.DPBayes_DP-cross-silo-federated-learning.None.utils.BogusModel.parameters", "home.repos.pwc.inspect_result.DPBayes_DP-cross-silo-federated-learning.None.utils.BogusModel.parameters", "home.repos.pwc.inspect_result.DPBayes_DP-cross-silo-federated-learning.None.utils.BogusModel.parameters", "home.repos.pwc.inspect_result.DPBayes_DP-cross-silo-federated-learning.None.utils.BogusModel.parameters"], ["", "", "def", "calculate_grads", "(", "model1", ",", "fc_model", ",", "joint_sampler", ",", "loss_function", ",", "all_params", ",", "run_id", ",", "dim_red_rng_state", ",", "use_cuda", ")", ":", "\n", "# calculate new grads", "\n", "    ", "if", "model1", "is", "not", "None", ":", "\n", "        ", "model1", ".", "train", "(", ")", "\n", "", "fc_model", ".", "train", "(", ")", "\n", "loss_tot", "=", "0", "\n", "\n", "# construct bogus model if doing projection", "\n", "if", "all_params", "[", "'dim_reduction'", "]", ">", "0", ":", "\n", "        ", "bogus_model", "=", "BogusModel", "(", "fc_model", ".", "batch_size", ",", "fc_model", ".", "batch_proc_size", ",", "torch", ".", "zeros", "(", "all_params", "[", "'dim_reduction'", "]", ",", "1", ")", ".", "expand", "(", "1", ",", "-", "1", ",", "1", ")", ")", "\n", "", "else", ":", "\n", "        ", "bogus_model", "=", "None", "\n", "\n", "", "data", ",", "target", "=", "joint_sampler", ".", "draw_batch", "(", ")", "\n", "\n", "# in case client draws 0 samples", "\n", "if", "all_params", "[", "'debug'", "]", ":", "\n", "        ", "print", "(", "'Client {} batch size {}'", ".", "format", "(", "run_id", ",", "target", ".", "shape", "[", "0", "]", ")", ")", "\n", "\n", "", "if", "target", ".", "shape", "[", "0", "]", "==", "0", ":", "\n", "# need to keep projection randomness in sync even when sending just zeros", "\n", "        ", "if", "all_params", "[", "'dim_reduction'", "]", ">", "0", ":", "\n", "            ", "vectorized", "=", "torch", ".", "zeros", "(", "(", "1", ",", "fc_model", ".", "total_params", ")", ")", "\n", "_", ",", "dim_red_rng_state", "=", "do_proj_in_steps", "(", "vector_for_proj", "=", "vectorized", ",", "model", "=", "fc_model", ",", "dim_reduction", "=", "all_params", "[", "'dim_reduction'", "]", ",", "max_proj_size", "=", "all_params", "[", "'max_proj_size'", "]", ",", "proj_type", "=", "all_params", "[", "'proj_type'", "]", ",", "dim_red_rng_state", "=", "dim_red_rng_state", ")", "\n", "\n", "", "return", "False", ",", "bogus_model", ",", "dim_red_rng_state", "\n", "\n", "\n", "", "data", ",", "target", "=", "Variable", "(", "data", ",", "requires_grad", "=", "False", ")", ",", "Variable", "(", "target", ",", "requires_grad", "=", "False", ")", "\n", "\n", "if", "use_cuda", ":", "\n", "        ", "data", ",", "target", "=", "data", ".", "cuda", "(", ")", ",", "target", ".", "cuda", "(", ")", "\n", "\n", "", "cum_grads", "=", "od", "(", ")", "\n", "for", "i", ",", "p", "in", "enumerate", "(", "fc_model", ".", "parameters", "(", ")", ")", ":", "\n", "        ", "if", "p", ".", "requires_grad", ":", "\n", "            ", "if", "use_cuda", ":", "\n", "                ", "cum_grads", "[", "str", "(", "i", ")", "]", "=", "Variable", "(", "torch", ".", "zeros", "(", "p", ".", "shape", "[", "1", ":", "]", ")", ",", "requires_grad", "=", "False", ")", ".", "cuda", "(", ")", "\n", "", "else", ":", "\n", "                ", "cum_grads", "[", "str", "(", "i", ")", "]", "=", "Variable", "(", "torch", ".", "zeros", "(", "p", ".", "shape", "[", "1", ":", "]", ")", ",", "requires_grad", "=", "False", ")", "\n", "\n", "\n", "", "", "", "for", "i_batch", "in", "range", "(", "len", "(", "target", ")", "//", "joint_sampler", ".", "batch_proc_size", ")", ":", "\n", "\n", "        ", "data_proc", "=", "data", "[", "i_batch", "*", "joint_sampler", ".", "batch_proc_size", ":", "(", "i_batch", "+", "1", ")", "*", "joint_sampler", ".", "batch_proc_size", ",", ":", "]", "\n", "target_proc", "=", "target", "[", "i_batch", "*", "joint_sampler", ".", "batch_proc_size", ":", "(", "i_batch", "+", "1", ")", "*", "joint_sampler", ".", "batch_proc_size", "]", "\n", "if", "model1", "is", "not", "None", ":", "\n", "            ", "output1", "=", "model1", "(", "data_proc", ")", "\n", "output2", "=", "fc_model", "(", "output1", ")", "\n", "", "else", ":", "\n", "            ", "output2", "=", "fc_model", "(", "data_proc", ")", "\n", "\n", "", "loss", "=", "loss_function", "(", "output2", ",", "target_proc", ")", "\n", "loss_tot", "+=", "loss", ".", "data", "\n", "\n", "loss", ".", "backward", "(", ")", "\n", "\n", "# accumulate (clipped) grads", "\n", "px_expander", ".", "acc_scaled_grads", "(", "model", "=", "fc_model", ",", "C", "=", "all_params", "[", "'grad_norm_max'", "]", ",", "cum_grads", "=", "cum_grads", ",", "use_cuda", "=", "use_cuda", ")", "\n", "\n", "fc_model", ".", "zero_grad", "(", ")", "\n", "\n", "# construct bogus model & project if necessary", "\n", "", "if", "all_params", "[", "'dim_reduction'", "]", ">", "0", ":", "\n", "        ", "bogus_model", "=", "BogusModel", "(", "fc_model", ".", "batch_size", ",", "fc_model", ".", "batch_proc_size", ",", "torch", ".", "zeros", "(", "all_params", "[", "'dim_reduction'", "]", ",", "1", ")", ".", "expand", "(", "1", ",", "-", "1", ",", "1", ")", ")", "\n", "# vectorize grads & do projection", "\n", "vectorized", "=", "torch", ".", "zeros", "(", "1", ",", "fc_model", ".", "total_params", ")", "\n", "for", "i", ",", "key", "in", "enumerate", "(", "cum_grads", ")", ":", "\n", "            ", "vectorized", "[", ":", ",", "fc_model", ".", "layer_summed", "[", "i", "]", "-", "fc_model", ".", "layer_params", "[", "i", "]", ":", "fc_model", ".", "layer_summed", "[", "i", "]", "]", "=", "cum_grads", "[", "key", "]", ".", "view", "(", "-", "1", ",", "fc_model", ".", "layer_params", "[", "i", "]", ")", "\n", "\n", "", "apu", ",", "dim_red_rng_state", "=", "do_proj_in_steps", "(", "vector_for_proj", "=", "vectorized", ",", "model", "=", "fc_model", ",", "dim_reduction", "=", "all_params", "[", "'dim_reduction'", "]", ",", "max_proj_size", "=", "all_params", "[", "'max_proj_size'", "]", ",", "proj_type", "=", "all_params", "[", "'proj_type'", "]", ",", "dim_red_rng_state", "=", "dim_red_rng_state", ")", "\n", "bogus_model", ".", "parameters", "(", ")", "[", "0", "]", ".", "grad", "[", "0", ",", ":", ",", ":", "]", "=", "apu", ".", "view", "(", "(", "all_params", "[", "'dim_reduction'", "]", ",", "1", ")", ")", "\n", "\n", "# add DP noise", "\n", "", "if", "all_params", "[", "'dim_reduction'", "]", ">", "0", ":", "\n", "# add dp noise in low dim", "\n", "        ", "if", "all_params", "[", "'proj_type'", "]", "==", "1", ":", "# no clip after proj, increase delta & noise instead", "\n", "# projection matrix includes constant", "\n", "            ", "bogus_model", ".", "parameters", "(", ")", "[", "0", "]", ".", "grad", "+=", "(", "all_params", "[", "'noise_sigma'", "]", "*", "all_params", "[", "'neighbour_const'", "]", "*", "all_params", "[", "'proj_sens'", "]", ")", "*", "torch", ".", "randn", "(", "all_params", "[", "'dim_reduction'", "]", ",", "1", ")", ".", "view", "(", "1", ",", "-", "1", ",", "1", ")", "\n", "\n", "", "elif", "all_params", "[", "'proj_type'", "]", "==", "2", ":", "\n", "# Note: multiply proj. const. at master", "\n", "            ", "bogus_model", ".", "parameters", "(", ")", "[", "0", "]", ".", "grad", "+=", "(", "all_params", "[", "'noise_sigma'", "]", "*", "all_params", "[", "'neighbour_const'", "]", "*", "all_params", "[", "'proj_norm_max'", "]", ")", "*", "torch", ".", "randn", "(", "all_params", "[", "'dim_reduction'", "]", ",", "1", ")", ".", "view", "(", "1", ",", "-", "1", ",", "1", ")", "\n", "#noise_vec.view(1,-1,1)", "\n", "", "bogus_model", ".", "parameters", "(", ")", "[", "0", "]", ".", "grad", "/=", "bogus_model", ".", "batch_size", "\n", "\n", "", "else", ":", "# no projection", "\n", "        ", "px_expander", ".", "add_noise_with_cum_grads", "(", "model", "=", "fc_model", ",", "C", "=", "all_params", "[", "'grad_norm_max'", "]", ",", "neighbour_const", "=", "all_params", "[", "'neighbour_const'", "]", ",", "sigma", "=", "all_params", "[", "'noise_sigma'", "]", ",", "cum_grads", "=", "cum_grads", ",", "use_cuda", "=", "use_cuda", ")", "\n", "\n", "", "return", "True", ",", "bogus_model", ",", "dim_red_rng_state", "\n", "\n"]], "home.repos.pwc.inspect_result.DPBayes_DP-cross-silo-federated-learning.None.run_client.load_weights": [[386, 392], ["torch.load", "torch.load", "enumerate", "zip", "model.parameters", "p[].data.copy_", "w[].data.clone().repeat", "w[].data.clone"], "function", ["home.repos.pwc.inspect_result.DPBayes_DP-cross-silo-federated-learning.None.utils.BogusModel.parameters"], ["", "def", "load_weights", "(", "model", ",", "filename", ")", ":", "\n", "    ", "w", "=", "torch", ".", "load", "(", "filename", ")", "\n", "for", "i", ",", "p", "in", "enumerate", "(", "zip", "(", "model", ".", "parameters", "(", ")", ",", "w", ")", ")", ":", "\n", "#print(i,p[0].shape, w[p[1]].shape)", "\n", "      ", "if", "p", "[", "0", "]", "is", "not", "None", "and", "w", "[", "p", "[", "1", "]", "]", "is", "not", "None", ":", "\n", "        ", "p", "[", "0", "]", ".", "data", ".", "copy_", "(", "w", "[", "p", "[", "1", "]", "]", ".", "data", ".", "clone", "(", ")", ".", "repeat", "(", "model", ".", "batch_proc_size", ",", "1", ",", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DPBayes_DP-cross-silo-federated-learning.None.run_client.check_for_weights": [[411, 427], ["run_client.load_weights", "open", "os.remove", "str", "str"], "function", ["home.repos.pwc.inspect_result.DPBayes_DP-cross-silo-federated-learning.None.run_client.load_weights"], ["", "def", "check_for_weights", "(", "model", ",", "all_params", ",", "run_id", ")", ":", "\n", "\n", "    ", "try", ":", "\n", "        ", "with", "open", "(", "all_params", "[", "'weights_ping_file'", "]", "+", "str", "(", "run_id", ")", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "pass", "\n", "# remove read ping", "\n", "", "if", "not", "all_params", "[", "'debug'", "]", ":", "\n", "            ", "os", ".", "remove", "(", "all_params", "[", "'weights_ping_file'", "]", "+", "str", "(", "run_id", ")", ")", "\n", "", "load_weights", "(", "model", ",", "all_params", "[", "'sent_weights_file'", "]", ")", "\n", "#print('Client {} weights updated'.format(run_id))", "\n", "return", "True", "\n", "\n", "", "except", "FileNotFoundError", "as", "err", ":", "\n", "#print(sys.exc_info())", "\n", "        ", "pass", "\n", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.DPBayes_DP-cross-silo-federated-learning.None.calculate_privacy.parse_args": [[12, 39], ["all_args.pop", "all_args.pop", "all_args.pop", "all_args.pop", "all_args.pop", "all_args.pop", "all_args.pop", "calculate_privacy.get_general_privacy_bound_var_eps", "calculate_privacy.get_general_privacy_bound_eps", "all_args.pop", "sys.exit", "sys.exit", "calculate_privacy.get_general_privacy_bound_delta"], "function", ["home.repos.pwc.inspect_result.DPBayes_DP-cross-silo-federated-learning.None.calculate_privacy.get_general_privacy_bound_var_eps", "home.repos.pwc.inspect_result.DPBayes_DP-cross-silo-federated-learning.None.calculate_privacy.get_general_privacy_bound_eps", "home.repos.pwc.inspect_result.DPBayes_DP-cross-silo-federated-learning.None.calculate_privacy.get_general_privacy_bound_delta"], ["def", "parse_args", "(", "all_args", ")", ":", "\n", "    ", "method", "=", "all_args", ".", "pop", "(", "'method'", ")", "\n", "if", "all_args", "[", "'use_sigma_t'", "]", ":", "\n", "        ", "var_q", "=", "True", "\n", "all_args", ".", "pop", "(", "'ncomp'", ")", "\n", "all_args", ".", "pop", "(", "'sigma'", ")", "\n", "all_args", ".", "pop", "(", "'q'", ")", "\n", "all_args", ".", "pop", "(", "'use_sigma_t'", ")", "\n", "", "else", ":", "\n", "        ", "var_q", "=", "False", "\n", "all_args", ".", "pop", "(", "'use_sigma_t'", ")", "\n", "all_args", "[", "'q'", "]", "=", "all_args", "[", "'q'", "]", "[", "0", "]", "\n", "\n", "", "if", "all_args", "[", "'target_eps'", "]", "is", "None", "and", "all_args", "[", "'target_delta'", "]", "is", "not", "None", ":", "\n", "        ", "all_args", ".", "pop", "(", "'target_eps'", ")", "\n", "if", "var_q", "is", "True", ":", "\n", "            ", "return", "get_general_privacy_bound_var_eps", "(", "all_args", ",", "method", "=", "method", ")", "\n", "", "else", ":", "\n", "            ", "return", "get_general_privacy_bound_eps", "(", "all_args", ",", "method", "=", "method", ")", "\n", "", "", "elif", "all_args", "[", "'target_eps'", "]", "is", "not", "None", "and", "all_args", "[", "'target_delta'", "]", "is", "None", ":", "\n", "        ", "all_args", ".", "pop", "(", "'target_delta'", ")", "\n", "if", "var_q", "is", "True", ":", "\n", "            ", "sys", ".", "exit", "(", "'Var q for delta not implemented yet!'", ")", "\n", "", "else", ":", "\n", "            ", "return", "get_general_privacy_bound_delta", "(", "all_args", ",", "method", "=", "method", ")", "\n", "", "", "else", ":", "\n", "        ", "sys", ".", "exit", "(", "'Invalid (eps,delta) combination: {},{}'", ".", "format", "(", "all_args", "[", "'target_eps'", "]", ",", "all_args", "[", "'target_delta'", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DPBayes_DP-cross-silo-federated-learning.None.calculate_privacy.get_general_privacy_bound_eps": [[41, 50], ["print", "fourier_accountant.compute_eps.get_epsilon_S", "print", "print", "print", "fourier_accountant.compute_eps.get_epsilon_R"], "function", ["None"], ["", "", "def", "get_general_privacy_bound_eps", "(", "kwargs", ",", "method", "=", "'unbounded'", ")", ":", "\n", "    ", "if", "method", "==", "'bounded'", ":", "\n", "        ", "print", "(", "'Using bounded dp definition'", ")", "\n", "res", "=", "FA", ".", "compute_eps", ".", "get_epsilon_S", "(", "**", "kwargs", ")", "\n", "print", "(", "'eps={}'", ".", "format", "(", "res", ")", ")", "\n", "return", "res", "\n", "", "else", ":", "\n", "        ", "print", "(", "'Using unbounded dp definition'", ")", "\n", "print", "(", "'eps={}'", ".", "format", "(", "FA", ".", "compute_eps", ".", "get_epsilon_R", "(", "**", "kwargs", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DPBayes_DP-cross-silo-federated-learning.None.calculate_privacy.get_general_privacy_bound_delta": [[52, 59], ["print", "print", "print", "print", "fourier_accountant.compute_delta.get_delta_S", "fourier_accountant.compute_delta.get_delta_R"], "function", ["None"], ["", "", "def", "get_general_privacy_bound_delta", "(", "kwargs", ",", "method", "=", "'unbounded'", ")", ":", "\n", "    ", "if", "method", "==", "'bounded'", ":", "\n", "        ", "print", "(", "'Using bounded dp definition'", ")", "\n", "print", "(", "'delta={}'", ".", "format", "(", "FA", ".", "compute_delta", ".", "get_delta_S", "(", "**", "kwargs", ")", ")", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "'Using unbounded dp definition'", ")", "\n", "print", "(", "'delta={}'", ".", "format", "(", "FA", ".", "compute_delta", ".", "get_delta_R", "(", "**", "kwargs", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DPBayes_DP-cross-silo-federated-learning.None.calculate_privacy.get_general_privacy_bound_var_eps": [[60, 66], ["print", "print", "print", "fourier_accountant.compute_eps_var.get_eps_R"], "function", ["None"], ["", "", "def", "get_general_privacy_bound_var_eps", "(", "kwargs", ",", "method", "=", "'unbounded'", ")", ":", "\n", "    ", "if", "method", "==", "'bounded'", ":", "\n", "        ", "print", "(", "'Using bounded dp definition'", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "'Using unbounded dp definition'", ")", "\n", "print", "(", "'eps={}'", ".", "format", "(", "compute_eps_var", ".", "get_eps_R", "(", "**", "kwargs", ")", ")", ")", "\n", "\n"]]}