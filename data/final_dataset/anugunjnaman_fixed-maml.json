{"home.repos.pwc.inspect_result.anugunjnaman_fixed-maml.None.read_data.LingualData.__init__": [[21, 78], ["print", "os.path.join", "read_data.LingualData.loadCSV", "read_data.LingualData.loadCSV", "enumerate", "read_data.LingualData.items", "len", "read_data.LingualData.create_batch", "os.path.join", "os.path.join", "read_data.LingualData.items", "read_data.LingualData.data.append", "librosa.load", "glob.glob.glob"], "methods", ["home.repos.pwc.inspect_result.anugunjnaman_fixed-maml.None.read_data.LingualData.loadCSV", "home.repos.pwc.inspect_result.anugunjnaman_fixed-maml.None.read_data.LingualData.loadCSV", "home.repos.pwc.inspect_result.anugunjnaman_fixed-maml.None.read_data.LingualData.create_batch"], ["    ", "def", "__init__", "(", "self", ",", "root", "=", "'data'", ",", "mode", "=", "'train'", ",", "task_type", "=", "'en'", ",", "batchsz", "=", "32", ",", "n_way", "=", "5", ",", "k_shot", "=", "200", ",", "k_query", "=", "100", ",", "k_unk_shot", "=", "150", ",", "k_unk_query", "=", "50", ",", "\n", "k_silence_shot", "=", "150", ",", "k_silence_query", "=", "50", ",", "resize", "=", "168", ",", "startidx", "=", "0", ",", "unk_sil_spt", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        :param root: root path of dataset\n        :param mode: train, val, test\n        :param batchsz: batch size\n        :param n_way: number of class in support set\n        :param k_shot: number of examples per class in support set\n        :param k_query: number of examples per class in query set\n        :param k_unk_shot: number of examples from unknown class in support set\n        :param k_unk_query: number of examples from unknown class in query set\n        :param k_silence_shot: number of examples from the silence class in the support set\n        :param k_silence_query: number of examples from the silence class in the query set\n        :param resize: resize to\n        :param startidx: start to index label from startidx\n        :param unk_sil_spt: whether to include unknown+silence class or not\n        \"\"\"", "\n", "\n", "self", ".", "sr", "=", "16000", "\n", "self", ".", "batchsz", "=", "batchsz", "\n", "self", ".", "n_way", "=", "n_way", "\n", "\n", "self", ".", "k_shot", "=", "k_shot", "\n", "self", ".", "k_query", "=", "k_query", "\n", "self", ".", "k_unk_shot", "=", "k_unk_shot", "\n", "self", ".", "k_unk_query", "=", "k_unk_query", "\n", "self", ".", "k_silence_shot", "=", "k_silence_shot", "\n", "self", ".", "k_silence_query", "=", "k_silence_query", "\n", "self", ".", "setsz", "=", "self", ".", "n_way", "*", "self", ".", "k_shot", "+", "self", ".", "k_unk_shot", "+", "self", ".", "k_silence_shot", "# num of samples per set", "\n", "self", ".", "querysz", "=", "self", ".", "n_way", "*", "self", ".", "k_query", "+", "self", ".", "k_unk_query", "+", "self", ".", "k_silence_query", "# number of samples per set for evaluation", "\n", "\n", "self", ".", "resize", "=", "resize", "# resize to", "\n", "self", ".", "startidx", "=", "startidx", "# index label not from 0, but from startidx", "\n", "self", ".", "unk_sil_spt", "=", "unk_sil_spt", "\n", "self", ".", "background_noises", "=", "[", "librosa", ".", "load", "(", "x", ",", "sr", "=", "self", ".", "sr", ")", "[", "0", "]", "for", "x", "in", "glob", "(", "\"data/wavfiles/background/*.wav\"", ")", "]", "\n", "\n", "print", "(", "'Shuffle DB :%s, b:%d, %d-way, %d-shot, %d-query, Resize:%d'", "%", "(", "mode", ",", "batchsz", ",", "n_way", ",", "k_shot", ",", "k_query", ",", "resize", ")", ")", "\n", "\n", "self", ".", "path", "=", "os", ".", "path", ".", "join", "(", "root", ",", "'wavfiles'", ")", "\n", "csvdata", "=", "self", ".", "loadCSV", "(", "os", ".", "path", ".", "join", "(", "root", ",", "mode", "+", "'_'", "+", "task_type", "+", "'.csv'", ")", ")", "\n", "csvdata_unk", "=", "self", ".", "loadCSV", "(", "os", ".", "path", ".", "join", "(", "root", ",", "'unknown_ch.csv'", ")", ")", "\n", "\n", "self", ".", "data", "=", "[", "]", "\n", "self", ".", "cmd2label", "=", "{", "}", "\n", "\n", "for", "i", ",", "(", "k", ",", "v", ")", "in", "enumerate", "(", "csvdata", ".", "items", "(", ")", ")", ":", "\n", "            ", "self", ".", "data", ".", "append", "(", "v", ")", "\n", "self", ".", "cmd2label", "[", "k", "]", "=", "i", "+", "self", ".", "startidx", "\n", "\n", "", "self", ".", "cmd2label", "[", "'unknown'", "]", "=", "i", "+", "self", ".", "startidx", "+", "1", "\n", "self", ".", "cmd2label", "[", "'silence'", "]", "=", "i", "+", "self", ".", "startidx", "+", "2", "\n", "\n", "for", "(", "k", ",", "v", ")", "in", "csvdata_unk", ".", "items", "(", ")", ":", "\n", "            ", "self", ".", "data_unk", "=", "v", "\n", "\n", "", "self", ".", "cls_num", "=", "len", "(", "self", ".", "data", ")", "\n", "self", ".", "create_batch", "(", "self", ".", "batchsz", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anugunjnaman_fixed-maml.None.read_data.LingualData.loadCSV": [[79, 98], ["open", "csv.reader", "next", "enumerate", "dictLabels.keys", "dictLabels[].append"], "methods", ["None"], ["", "def", "loadCSV", "(", "self", ",", "csvf", ")", ":", "\n", "        ", "\"\"\"\n        Return a dictionary saving info of csv\n        :param csvf: csv file name\n        :return: {label:[file1, file2, file3 ....]}\n        \"\"\"", "\n", "dictLabels", "=", "{", "}", "\n", "with", "open", "(", "csvf", ")", "as", "csvfile", ":", "\n", "            ", "csvreader", "=", "csv", ".", "reader", "(", "csvfile", ",", "delimiter", "=", "','", ")", "\n", "next", "(", "csvreader", ",", "None", ")", "\n", "for", "_", ",", "row", "in", "enumerate", "(", "csvreader", ")", ":", "\n", "                ", "filename", "=", "row", "[", "0", "]", "\n", "label", "=", "row", "[", "1", "]", "\n", "if", "label", "in", "dictLabels", ".", "keys", "(", ")", ":", "\n", "                    ", "dictLabels", "[", "label", "]", ".", "append", "(", "filename", ")", "\n", "", "else", ":", "\n", "                    ", "dictLabels", "[", "label", "]", "=", "[", "filename", "]", "\n", "\n", "", "", "", "return", "dictLabels", "\n", "\n"]], "home.repos.pwc.inspect_result.anugunjnaman_fixed-maml.None.read_data.LingualData.create_batch": [[99, 134], ["tqdm.tqdm.tqdm", "range", "numpy.random.choice", "numpy.random.shuffle", "numpy.random.choice", "numpy.random.shuffle", "numpy.array", "query_x.append", "query_x.append", "numpy.random.shuffle", "numpy.random.shuffle", "read_data.LingualData.support_x_batch.append", "read_data.LingualData.query_x_batch.append", "numpy.random.choice", "numpy.random.shuffle", "numpy.array", "numpy.array", "support_x.append", "query_x.append", "len", "numpy.array", "support_x.append", "support_x.append", "[].tolist", "len", "[].tolist", "[].tolist", "[].tolist", "numpy.array", "numpy.array", "numpy.array", "numpy.array"], "methods", ["None"], ["", "def", "create_batch", "(", "self", ",", "batchsz", ")", ":", "\n", "        ", "\"\"\"\n        Create batch  for meta-learning.\n        \"\"\"", "\n", "self", ".", "support_x_batch", "=", "[", "]", "\n", "self", ".", "query_x_batch", "=", "[", "]", "\n", "for", "_", "in", "tqdm", "(", "range", "(", "batchsz", ")", ")", ":", "\n", "            ", "selected_cls", "=", "np", ".", "random", ".", "choice", "(", "self", ".", "cls_num", ",", "self", ".", "n_way", ",", "False", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "selected_cls", ")", "\n", "support_x", "=", "[", "]", "\n", "query_x", "=", "[", "]", "\n", "for", "cls", "in", "selected_cls", ":", "\n", "                ", "selected_cmds_idx", "=", "np", ".", "random", ".", "choice", "(", "len", "(", "self", ".", "data", "[", "cls", "]", ")", ",", "self", ".", "k_shot", "+", "self", ".", "k_query", ",", "False", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "selected_cmds_idx", ")", "\n", "indexDtrain", "=", "np", ".", "array", "(", "selected_cmds_idx", "[", ":", "self", ".", "k_shot", "]", ")", "\n", "indexDtest", "=", "np", ".", "array", "(", "selected_cmds_idx", "[", "self", ".", "k_shot", ":", "]", ")", "\n", "support_x", ".", "append", "(", "np", ".", "array", "(", "self", ".", "data", "[", "cls", "]", ")", "[", "indexDtrain", "]", ".", "tolist", "(", ")", ")", "\n", "query_x", ".", "append", "(", "np", ".", "array", "(", "self", ".", "data", "[", "cls", "]", ")", "[", "indexDtest", "]", ".", "tolist", "(", ")", ")", "\n", "\n", "", "selected_cmds_idx_unk", "=", "np", ".", "random", ".", "choice", "(", "len", "(", "self", ".", "data_unk", ")", ",", "self", ".", "k_unk_query", "+", "self", ".", "k_unk_shot", ",", "False", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "selected_cmds_idx_unk", ")", "\n", "selected_cmds_silence", "=", "[", "'silence/silenced.wav'", "]", "*", "(", "self", ".", "k_silence_shot", "+", "self", ".", "k_silence_query", ")", "\n", "if", "self", ".", "unk_sil_spt", ":", "\n", "                ", "indexDtrain", "=", "np", ".", "array", "(", "selected_cmds_idx_unk", "[", ":", "self", ".", "k_unk_shot", "]", ")", "\n", "support_x", ".", "append", "(", "np", ".", "array", "(", "self", ".", "data_unk", ")", "[", "indexDtrain", "]", ".", "tolist", "(", ")", ")", "\n", "support_x", ".", "append", "(", "selected_cmds_silence", "[", ":", "self", ".", "k_silence_shot", "]", ")", "\n", "", "indexDtest", "=", "np", ".", "array", "(", "selected_cmds_idx_unk", "[", "self", ".", "k_unk_shot", ":", "]", ")", "\n", "query_x", ".", "append", "(", "np", ".", "array", "(", "self", ".", "data_unk", ")", "[", "indexDtest", "]", ".", "tolist", "(", ")", ")", "\n", "query_x", ".", "append", "(", "selected_cmds_silence", "[", "self", ".", "k_silence_shot", ":", "]", ")", "\n", "\n", "np", ".", "random", ".", "shuffle", "(", "support_x", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "query_x", ")", "\n", "\n", "self", ".", "support_x_batch", ".", "append", "(", "support_x", ")", "\n", "self", ".", "query_x_batch", ".", "append", "(", "query_x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anugunjnaman_fixed-maml.None.read_data.LingualData.get_one_noise": [[135, 139], ["random.randint", "random.randint", "len", "len"], "methods", ["None"], ["", "", "def", "get_one_noise", "(", "self", ")", ":", "\n", "        ", "selected_noise", "=", "self", ".", "background_noises", "[", "random", ".", "randint", "(", "0", ",", "len", "(", "self", ".", "background_noises", ")", "-", "1", ")", "]", "\n", "start_idx", "=", "random", ".", "randint", "(", "0", ",", "len", "(", "selected_noise", ")", "-", "1", "-", "self", ".", "sr", ")", "\n", "return", "selected_noise", "[", "start_idx", ":", "(", "start_idx", "+", "self", ".", "sr", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.anugunjnaman_fixed-maml.None.read_data.LingualData.get_mix_noises": [[140, 145], ["numpy.zeros", "range", "read_data.LingualData.get_one_noise", "random.random"], "methods", ["home.repos.pwc.inspect_result.anugunjnaman_fixed-maml.None.read_data.LingualData.get_one_noise"], ["", "def", "get_mix_noises", "(", "self", ",", "num_noise", "=", "1", ",", "max_ratio", "=", "0.1", ")", ":", "\n", "        ", "result", "=", "np", ".", "zeros", "(", "self", ".", "sr", ")", "\n", "for", "_", "in", "range", "(", "num_noise", ")", ":", "\n", "            ", "result", "+=", "random", ".", "random", "(", ")", "*", "max_ratio", "*", "self", ".", "get_one_noise", "(", ")", "\n", "", "return", "result", "/", "num_noise", "if", "num_noise", ">", "0", "else", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.anugunjnaman_fixed-maml.None.read_data.LingualData.get_silent_wav": [[146, 148], ["read_data.LingualData.get_mix_noises"], "methods", ["home.repos.pwc.inspect_result.anugunjnaman_fixed-maml.None.read_data.LingualData.get_mix_noises"], ["", "def", "get_silent_wav", "(", "self", ",", "num_noise", "=", "1", ",", "max_ratio", "=", "0.1", ")", ":", "\n", "        ", "return", "self", ".", "get_mix_noises", "(", "num_noise", "=", "num_noise", ",", "max_ratio", "=", "max_ratio", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anugunjnaman_fixed-maml.None.read_data.LingualData.get_one_word_wav": [[149, 156], ["librosa.load", "librosa.effects.time_stretch", "len", "numpy.pad", "len"], "methods", ["None"], ["", "def", "get_one_word_wav", "(", "self", ",", "path", ",", "speed_rate", "=", "None", ")", ":", "\n", "        ", "wav", "=", "librosa", ".", "load", "(", "path", ",", "sr", "=", "self", ".", "sr", ")", "[", "0", "]", "\n", "if", "speed_rate", ":", "\n", "            ", "wav", "=", "librosa", ".", "effects", ".", "time_stretch", "(", "wav", ",", "speed_rate", ")", "\n", "", "if", "len", "(", "wav", ")", "<", "self", ".", "sr", ":", "\n", "            ", "wav", "=", "np", ".", "pad", "(", "wav", ",", "(", "0", ",", "self", ".", "sr", "-", "len", "(", "wav", ")", ")", ",", "'constant'", ")", "\n", "", "return", "wav", "[", ":", "self", ".", "sr", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.anugunjnaman_fixed-maml.None.read_data.LingualData.preprocess_mfcc": [[157, 167], ["librosa.feature.melspectrogram", "numpy.log", "librosa.filters.dct", "numpy.hstack", "mfcc.astype.astype.astype", "numpy.matmul", "tuple", "numpy.split", "tuple"], "methods", ["None"], ["", "def", "preprocess_mfcc", "(", "self", ",", "wave", ")", ":", "\n", "        ", "spectrogram", "=", "librosa", ".", "feature", ".", "melspectrogram", "(", "wave", ",", "sr", "=", "self", ".", "sr", ",", "n_mels", "=", "40", ",", "hop_length", "=", "160", ",", "n_fft", "=", "480", ",", "fmin", "=", "20", ",", "fmax", "=", "4000", ")", "\n", "idx", "=", "[", "spectrogram", ">", "0", "]", "\n", "spectrogram", "[", "tuple", "(", "idx", ")", "]", "=", "np", ".", "log", "(", "spectrogram", "[", "tuple", "(", "idx", ")", "]", ")", "\n", "dct_filters", "=", "librosa", ".", "filters", ".", "dct", "(", "n_filters", "=", "40", ",", "n_input", "=", "40", ")", "\n", "mfcc", "=", "[", "np", ".", "matmul", "(", "dct_filters", ",", "x", ")", "for", "x", "in", "np", ".", "split", "(", "spectrogram", ",", "spectrogram", ".", "shape", "[", "1", "]", ",", "axis", "=", "1", ")", "]", "\n", "mfcc", "=", "np", ".", "hstack", "(", "mfcc", ")", "\n", "mfcc", "=", "mfcc", ".", "astype", "(", "np", ".", "float32", ")", "\n", "#mfcc = librosa.feature.mfcc(S=spectrogram, n_mfcc=40).astype(np.float32)", "\n", "return", "mfcc", "\n", "\n"]], "home.repos.pwc.inspect_result.anugunjnaman_fixed-maml.None.read_data.LingualData.__getitem__": [[168, 221], ["torch.FloatTensor", "numpy.zeros", "torch.FloatTensor", "numpy.zeros", "numpy.array().astype", "numpy.array().astype", "numpy.unique", "list", "numpy.random.shuffle", "unique_list.append", "unique_list.append", "numpy.array", "numpy.zeros", "numpy.zeros", "enumerate", "enumerate", "enumerate", "os.path.join", "os.path.join", "torch.LongTensor", "torch.LongTensor", "numpy.array", "numpy.array", "unique_list.append", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "skimage.transform.resize", "skimage.transform.resize", "skimage.transform.resize", "skimage.transform.resize", "read_data.LingualData.preprocess_mfcc", "read_data.LingualData.preprocess_mfcc", "read_data.LingualData.preprocess_mfcc", "read_data.LingualData.preprocess_mfcc", "item.split", "item.split", "read_data.LingualData.get_silent_wav", "read_data.LingualData.get_one_word_wav", "read_data.LingualData.get_silent_wav", "read_data.LingualData.get_one_word_wav", "random.choice", "random.choice", "random.choice", "random.choice", "range", "range"], "methods", ["home.repos.pwc.inspect_result.anugunjnaman_fixed-maml.None.read_data.LingualData.preprocess_mfcc", "home.repos.pwc.inspect_result.anugunjnaman_fixed-maml.None.read_data.LingualData.preprocess_mfcc", "home.repos.pwc.inspect_result.anugunjnaman_fixed-maml.None.read_data.LingualData.preprocess_mfcc", "home.repos.pwc.inspect_result.anugunjnaman_fixed-maml.None.read_data.LingualData.preprocess_mfcc", "home.repos.pwc.inspect_result.anugunjnaman_fixed-maml.None.read_data.LingualData.get_silent_wav", "home.repos.pwc.inspect_result.anugunjnaman_fixed-maml.None.read_data.LingualData.get_one_word_wav", "home.repos.pwc.inspect_result.anugunjnaman_fixed-maml.None.read_data.LingualData.get_silent_wav", "home.repos.pwc.inspect_result.anugunjnaman_fixed-maml.None.read_data.LingualData.get_one_word_wav"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "# [setsz, 1, resize, resize]", "\n", "        ", "support_x", "=", "torch", ".", "FloatTensor", "(", "self", ".", "setsz", ",", "1", ",", "self", ".", "resize", ",", "self", ".", "resize", ")", "\n", "# [setsz]", "\n", "support_y", "=", "np", ".", "zeros", "(", "(", "self", ".", "setsz", ")", ",", "dtype", "=", "np", ".", "int", ")", "\n", "# [querysz, 1, resize, resize]", "\n", "query_x", "=", "torch", ".", "FloatTensor", "(", "self", ".", "querysz", ",", "1", ",", "self", ".", "resize", ",", "self", ".", "resize", ")", "\n", "# [querysz]", "\n", "query_y", "=", "np", ".", "zeros", "(", "(", "self", ".", "querysz", ")", ",", "dtype", "=", "np", ".", "int", ")", "\n", "\n", "flatten_support_x", "=", "[", "os", ".", "path", ".", "join", "(", "self", ".", "path", ",", "item", ")", "\n", "for", "sublist", "in", "self", ".", "support_x_batch", "[", "index", "]", "for", "item", "in", "sublist", "]", "\n", "support_y", "=", "np", ".", "array", "(", "\n", "[", "self", ".", "cmd2label", "[", "item", ".", "split", "(", "'/'", ")", "[", "0", "]", "]", "# filename:down/0a2b400e_nohash_0.wav; unknown/bed/0a7c2a8d_nohash_0.wav, the command treated as label", "\n", "for", "sublist", "in", "self", ".", "support_x_batch", "[", "index", "]", "for", "item", "in", "sublist", "]", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "\n", "flatten_query_x", "=", "[", "os", ".", "path", ".", "join", "(", "self", ".", "path", ",", "item", ")", "\n", "for", "sublist", "in", "self", ".", "query_x_batch", "[", "index", "]", "for", "item", "in", "sublist", "]", "\n", "query_y", "=", "np", ".", "array", "(", "[", "self", ".", "cmd2label", "[", "item", ".", "split", "(", "'/'", ")", "[", "0", "]", "]", "\n", "for", "sublist", "in", "self", ".", "query_x_batch", "[", "index", "]", "for", "item", "in", "sublist", "]", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "\n", "unique_temp", "=", "np", ".", "unique", "(", "query_y", ")", "\n", "unique_list", "=", "[", "]", "\n", "for", "item", "in", "list", "(", "unique_temp", ")", ":", "\n", "            ", "if", "item", "!=", "self", ".", "cmd2label", "[", "'unknown'", "]", "and", "item", "!=", "self", ".", "cmd2label", "[", "'silence'", "]", ":", "\n", "                ", "unique_list", ".", "append", "(", "item", ")", "\n", "\n", "", "", "np", ".", "random", ".", "shuffle", "(", "unique_list", ")", "\n", "unique_list", ".", "append", "(", "self", ".", "cmd2label", "[", "'unknown'", "]", ")", "\n", "unique_list", ".", "append", "(", "self", ".", "cmd2label", "[", "'silence'", "]", ")", "\n", "unique", "=", "np", ".", "array", "(", "unique_list", ")", "\n", "\n", "support_y_relative", "=", "np", ".", "zeros", "(", "self", ".", "setsz", ")", "\n", "query_y_relative", "=", "np", ".", "zeros", "(", "self", ".", "querysz", ")", "\n", "for", "idx", ",", "l", "in", "enumerate", "(", "unique", ")", ":", "\n", "            ", "support_y_relative", "[", "support_y", "==", "l", "]", "=", "idx", "\n", "query_y_relative", "[", "query_y", "==", "l", "]", "=", "idx", "\n", "\n", "", "for", "i", ",", "path", "in", "enumerate", "(", "flatten_support_x", ")", ":", "\n", "            ", "if", "'silence'", "in", "path", ":", "\n", "                ", "support_x", "[", "i", "]", "=", "torch", ".", "from_numpy", "(", "resize", "(", "self", ".", "preprocess_mfcc", "(", "self", ".", "get_silent_wav", "(", "num_noise", "=", "random", ".", "choice", "(", "[", "0", ",", "1", ",", "2", ",", "3", "]", ")", ",", "\n", "max_ratio", "=", "random", ".", "choice", "(", "[", "x", "/", "10.", "for", "x", "in", "range", "(", "20", ")", "]", ")", ")", ")", ",", "(", "self", ".", "resize", ",", "self", ".", "resize", ")", ",", "preserve_range", "=", "True", ")", ")", ".", "float", "(", ")", "\n", "", "else", ":", "\n", "                ", "support_x", "[", "i", "]", "=", "torch", ".", "from_numpy", "(", "resize", "(", "self", ".", "preprocess_mfcc", "(", "self", ".", "get_one_word_wav", "(", "path", ")", ")", ",", "(", "self", ".", "resize", ",", "self", ".", "resize", ")", ",", "preserve_range", "=", "True", ")", ")", ".", "float", "(", ")", "\n", "\n", "", "", "for", "i", ",", "path", "in", "enumerate", "(", "flatten_query_x", ")", ":", "\n", "            ", "if", "'silence'", "in", "path", ":", "\n", "                ", "query_x", "[", "i", "]", "=", "torch", ".", "from_numpy", "(", "resize", "(", "self", ".", "preprocess_mfcc", "(", "self", ".", "get_silent_wav", "(", "num_noise", "=", "random", ".", "choice", "(", "[", "0", ",", "1", ",", "2", ",", "3", "]", ")", ",", "\n", "max_ratio", "=", "random", ".", "choice", "(", "[", "x", "/", "10.", "for", "x", "in", "range", "(", "20", ")", "]", ")", ")", ")", ",", "(", "self", ".", "resize", ",", "self", ".", "resize", ")", ",", "preserve_range", "=", "True", ")", ")", ".", "float", "(", ")", "\n", "", "else", ":", "\n", "                ", "query_x", "[", "i", "]", "=", "torch", ".", "from_numpy", "(", "resize", "(", "self", ".", "preprocess_mfcc", "(", "self", ".", "get_one_word_wav", "(", "path", ")", ")", ",", "(", "self", ".", "resize", ",", "self", ".", "resize", ")", ",", "preserve_range", "=", "True", ")", ")", ".", "float", "(", ")", "\n", "\n", "", "", "return", "support_x", ",", "torch", ".", "LongTensor", "(", "support_y_relative", ")", ",", "query_x", ",", "torch", ".", "LongTensor", "(", "query_y_relative", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anugunjnaman_fixed-maml.None.read_data.LingualData.__len__": [[222, 224], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "batchsz", "\n", "\n"]], "home.repos.pwc.inspect_result.anugunjnaman_fixed-maml.None.meta.Meta.__init__": [[15, 33], ["torch.nn.Module.__init__", "learner.Learner", "torch.optim.Adam", "meta.Meta.net.parameters"], "methods", ["home.repos.pwc.inspect_result.anugunjnaman_fixed-maml.None.learner.Learner.__init__", "home.repos.pwc.inspect_result.anugunjnaman_fixed-maml.None.learner.Learner.parameters"], ["def", "__init__", "(", "self", ",", "args", ",", "config", ")", ":", "\n", "        ", "\"\"\"\n        :param args\n        :param config\n        \"\"\"", "\n", "super", "(", "Meta", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "update_lr", "=", "args", ".", "update_lr", "\n", "self", ".", "meta_lr", "=", "args", ".", "meta_lr", "\n", "self", ".", "n_way", "=", "args", ".", "n_way", "\n", "self", ".", "k_spt_train", "=", "args", ".", "k_spt_train", "\n", "self", ".", "k_qry_train", "=", "args", ".", "k_qry_train", "\n", "self", ".", "k_spt_test", "=", "args", ".", "k_spt_test", "\n", "self", ".", "k_qry_test", "=", "args", ".", "k_qry_test", "\n", "self", ".", "task_num", "=", "args", ".", "task_num", "\n", "self", ".", "update_step", "=", "args", ".", "update_step", "\n", "self", ".", "update_step_test", "=", "args", ".", "update_step_test", "\n", "self", ".", "net", "=", "Learner", "(", "config", ",", "args", ".", "imgc", ",", "args", ".", "imgsz", ")", "\n", "self", ".", "meta_optim", "=", "optim", ".", "Adam", "(", "self", ".", "net", ".", "parameters", "(", ")", ",", "lr", "=", "self", ".", "meta_lr", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anugunjnaman_fixed-maml.None.meta.Meta.clip_grad_by_norm_": [[34, 53], ["g.data.norm", "g.data.norm.item", "g.data.mul_"], "methods", ["None"], ["", "def", "clip_grad_by_norm_", "(", "self", ",", "grad", ",", "max_norm", ")", ":", "\n", "        ", "\"\"\"\n        in-place gradient clipping.\n        :param grad: list of gradients\n        :param max_norm: maximum norm allowable\n        :return:\n        \"\"\"", "\n", "total_norm", "=", "0", "\n", "counter", "=", "0", "\n", "for", "g", "in", "grad", ":", "\n", "            ", "param_norm", "=", "g", ".", "data", ".", "norm", "(", "2", ")", "\n", "total_norm", "+=", "param_norm", ".", "item", "(", ")", "**", "2", "\n", "counter", "+=", "1", "\n", "", "total_norm", "=", "total_norm", "**", "(", "1.", "/", "2", ")", "\n", "clip_coef", "=", "max_norm", "/", "(", "total_norm", "+", "1e-6", ")", "\n", "if", "clip_coef", "<", "1", ":", "\n", "            ", "for", "g", "in", "grad", ":", "\n", "                ", "g", ".", "data", ".", "mul_", "(", "clip_coef", ")", "\n", "", "", "return", "total_norm", "/", "counter", "\n", "\n"]], "home.repos.pwc.inspect_result.anugunjnaman_fixed-maml.None.meta.Meta.forward": [[54, 124], ["x_spt.size", "x_qry.size", "range", "meta.Meta.meta_optim.zero_grad", "torch.nn.functional.cross_entropy.backward", "meta.Meta.meta_optim.step", "meta.Meta.net", "torch.nn.functional.cross_entropy", "torch.autograd.grad", "list", "range", "numpy.array", "range", "range", "meta.Meta.net.parameters", "map", "torch.no_grad", "meta.Meta.net", "torch.nn.functional.cross_entropy", "torch.nn.functional.softmax().argmax", "torch.eq().sum().item", "torch.no_grad", "meta.Meta.net", "torch.nn.functional.cross_entropy", "torch.nn.functional.softmax().argmax", "torch.eq().sum().item", "meta.Meta.net", "torch.nn.functional.cross_entropy", "torch.autograd.grad", "list", "meta.Meta.net", "torch.nn.functional.cross_entropy", "zip", "meta.Meta.net.parameters", "map", "torch.no_grad", "torch.nn.functional.softmax().argmax", "torch.eq().sum().item", "meta.Meta.net.parameters", "torch.nn.functional.softmax", "torch.eq().sum", "torch.nn.functional.softmax", "torch.eq().sum", "zip", "torch.nn.functional.softmax", "torch.eq().sum", "torch.eq", "torch.eq", "torch.eq"], "methods", ["home.repos.pwc.inspect_result.anugunjnaman_fixed-maml.None.learner.Learner.zero_grad", "home.repos.pwc.inspect_result.anugunjnaman_fixed-maml.None.learner.Learner.parameters", "home.repos.pwc.inspect_result.anugunjnaman_fixed-maml.None.learner.Learner.parameters", "home.repos.pwc.inspect_result.anugunjnaman_fixed-maml.None.learner.Learner.parameters"], ["", "def", "forward", "(", "self", ",", "x_spt", ",", "y_spt", ",", "x_qry", ",", "y_qry", ")", ":", "\n", "        ", "\"\"\"\n        :param x_spt:   [b, setsz, c_, h, w]\n        :param y_spt:   [b, setsz]\n        :param x_qry:   [b, querysz, c_, h, w]\n        :param y_qry:   [b, querysz]\n        :return:\n        \"\"\"", "\n", "task_num", ",", "setsz", ",", "c_", ",", "h", ",", "w", "=", "x_spt", ".", "size", "(", ")", "\n", "querysz", "=", "x_qry", ".", "size", "(", "1", ")", "\n", "\n", "losses_q", "=", "[", "0", "for", "_", "in", "range", "(", "self", ".", "update_step", "+", "1", ")", "]", "# losses_q[i] is the loss on step i", "\n", "corrects", "=", "[", "0", "for", "_", "in", "range", "(", "self", ".", "update_step", "+", "1", ")", "]", "\n", "\n", "for", "i", "in", "range", "(", "task_num", ")", ":", "\n", "# 1. run the i-th task and compute loss for k=0", "\n", "            ", "logits", "=", "self", ".", "net", "(", "x_spt", "[", "i", "]", ",", "vars", "=", "None", ",", "bn_training", "=", "True", ")", "\n", "loss", "=", "F", ".", "cross_entropy", "(", "logits", ",", "y_spt", "[", "i", "]", ")", "\n", "grad", "=", "torch", ".", "autograd", ".", "grad", "(", "loss", ",", "self", ".", "net", ".", "parameters", "(", ")", ")", "\n", "fast_weights", "=", "list", "(", "map", "(", "lambda", "p", ":", "p", "[", "1", "]", "-", "self", ".", "update_lr", "*", "p", "[", "0", "]", ",", "zip", "(", "grad", ",", "self", ".", "net", ".", "parameters", "(", ")", ")", ")", ")", "\n", "\n", "# this is the loss and accuracy before first update", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "# [setsz, nway]", "\n", "                ", "logits_q", "=", "self", ".", "net", "(", "x_qry", "[", "i", "]", ",", "self", ".", "net", ".", "parameters", "(", ")", ",", "bn_training", "=", "True", ")", "\n", "loss_q", "=", "F", ".", "cross_entropy", "(", "logits_q", ",", "y_qry", "[", "i", "]", ")", "\n", "losses_q", "[", "0", "]", "+=", "loss_q", "\n", "# [setsz]", "\n", "pred_q", "=", "F", ".", "softmax", "(", "logits_q", ",", "dim", "=", "1", ")", ".", "argmax", "(", "dim", "=", "1", ")", "\n", "correct", "=", "torch", ".", "eq", "(", "pred_q", ",", "y_qry", "[", "i", "]", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "corrects", "[", "0", "]", "=", "corrects", "[", "0", "]", "+", "correct", "\n", "\n", "# this is the loss and accuracy after the first update", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "# [setsz, nway]", "\n", "                ", "logits_q", "=", "self", ".", "net", "(", "x_qry", "[", "i", "]", ",", "fast_weights", ",", "bn_training", "=", "True", ")", "\n", "loss_q", "=", "F", ".", "cross_entropy", "(", "logits_q", ",", "y_qry", "[", "i", "]", ")", "\n", "losses_q", "[", "1", "]", "+=", "loss_q", "\n", "# [setsz]", "\n", "pred_q", "=", "F", ".", "softmax", "(", "logits_q", ",", "dim", "=", "1", ")", ".", "argmax", "(", "dim", "=", "1", ")", "\n", "correct", "=", "torch", ".", "eq", "(", "pred_q", ",", "y_qry", "[", "i", "]", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "corrects", "[", "1", "]", "=", "corrects", "[", "1", "]", "+", "correct", "\n", "\n", "", "for", "k", "in", "range", "(", "1", ",", "self", ".", "update_step", ")", ":", "\n", "# 1. run the i-th task and compute loss for k=1~K-1", "\n", "                ", "logits", "=", "self", ".", "net", "(", "x_spt", "[", "i", "]", ",", "fast_weights", ",", "bn_training", "=", "True", ")", "\n", "loss", "=", "F", ".", "cross_entropy", "(", "logits", ",", "y_spt", "[", "i", "]", ")", "\n", "# 2. compute grad on theta_pi", "\n", "grad", "=", "torch", ".", "autograd", ".", "grad", "(", "loss", ",", "fast_weights", ")", "\n", "# 3. theta_pi = theta_pi - train_lr * grad", "\n", "fast_weights", "=", "list", "(", "map", "(", "lambda", "p", ":", "p", "[", "1", "]", "-", "self", ".", "update_lr", "*", "p", "[", "0", "]", ",", "zip", "(", "grad", ",", "fast_weights", ")", ")", ")", "\n", "logits_q", "=", "self", ".", "net", "(", "x_qry", "[", "i", "]", ",", "fast_weights", ",", "bn_training", "=", "True", ")", "\n", "\n", "# loss_q will be overwritten and just keep the loss_q on last update step.", "\n", "loss_q", "=", "F", ".", "cross_entropy", "(", "logits_q", ",", "y_qry", "[", "i", "]", ")", "\n", "losses_q", "[", "k", "+", "1", "]", "+=", "loss_q", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                    ", "pred_q", "=", "F", ".", "softmax", "(", "logits_q", ",", "dim", "=", "1", ")", ".", "argmax", "(", "dim", "=", "1", ")", "\n", "correct", "=", "torch", ".", "eq", "(", "pred_q", ",", "y_qry", "[", "i", "]", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "# convert to numpy", "\n", "corrects", "[", "k", "+", "1", "]", "=", "corrects", "[", "k", "+", "1", "]", "+", "correct", "\n", "# end of all tasks", "\n", "# sum over all losses on query set across all tasks", "\n", "", "", "", "loss_q", "=", "losses_q", "[", "-", "1", "]", "/", "task_num", "\n", "\n", "# optimize theta parameters", "\n", "self", ".", "meta_optim", ".", "zero_grad", "(", ")", "\n", "loss_q", ".", "backward", "(", ")", "\n", "self", ".", "meta_optim", ".", "step", "(", ")", "\n", "accs", "=", "np", ".", "array", "(", "corrects", ")", "/", "(", "querysz", "*", "task_num", ")", "\n", "return", "loss_q", ",", "accs", "\n", "\n"]], "home.repos.pwc.inspect_result.anugunjnaman_fixed-maml.None.meta.Meta.finetunning": [[125, 243], ["torch.device", "x_qry.size", "torch.cat().view().cpu().numpy", "torch.from_numpy().to", "not_unk_silence_idx.type.type.type", "copy.deepcopy", "copy.deepcopy.", "torch.nn.functional.cross_entropy", "torch.autograd.grad", "list", "range", "len", "copy.deepcopy.parameters", "map", "torch.no_grad", "copy.deepcopy.", "torch.nn.functional.softmax().argmax", "torch.eq().sum().item", "torch.eq().sum().item", "torch.no_grad", "copy.deepcopy.", "torch.nn.functional.softmax().argmax", "torch.eq().sum().item", "torch.eq().sum().item", "copy.deepcopy.", "torch.nn.functional.cross_entropy", "torch.autograd.grad", "list", "copy.deepcopy.", "torch.nn.functional.cross_entropy", "torch.cat().view().cpu", "torch.from_numpy", "range", "range", "range", "range", "range", "range", "zip", "copy.deepcopy.parameters", "map", "torch.no_grad", "torch.nn.functional.softmax().argmax", "torch.eq().sum().item", "torch.eq().sum().item", "numpy.delete", "copy.deepcopy.parameters", "torch.nn.functional.softmax", "torch.eq().sum", "torch.eq().sum", "torch.nn.functional.softmax", "torch.eq().sum", "torch.eq().sum", "zip", "torch.cat().view", "numpy.arange", "torch.nn.functional.softmax", "torch.eq().sum", "torch.eq().sum", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.cat", "torch.eq", "torch.eq"], "methods", ["home.repos.pwc.inspect_result.anugunjnaman_fixed-maml.None.learner.Learner.parameters", "home.repos.pwc.inspect_result.anugunjnaman_fixed-maml.None.learner.Learner.parameters", "home.repos.pwc.inspect_result.anugunjnaman_fixed-maml.None.learner.Learner.parameters"], ["", "def", "finetunning", "(", "self", ",", "x_spt", ",", "y_spt", ",", "x_qry", ",", "y_qry", ",", "update_step_test", ")", ":", "\n", "        ", "\"\"\"\n        :param x_spt:   [setsz, c_, h, w]\n        :param y_spt:   [setsz]\n        :param x_qry:   [querysz, c_, h, w]\n        :param y_qry:   [querysz]\n        :return:\n        \"\"\"", "\n", "assert", "len", "(", "x_spt", ".", "shape", ")", "==", "4", "\n", "device", "=", "torch", ".", "device", "(", "'cuda'", ")", "\n", "querysz", "=", "x_qry", ".", "size", "(", "0", ")", "\n", "unk_silence_idx", "=", "torch", ".", "cat", "(", "(", "(", "y_qry", "==", "10", ")", ".", "nonzero", "(", ")", ",", "(", "y_qry", "==", "11", ")", ".", "nonzero", "(", ")", ")", ",", "0", ")", ".", "view", "(", "-", "1", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "not_unk_silence_idx", "=", "torch", ".", "from_numpy", "(", "np", ".", "delete", "(", "np", ".", "arange", "(", "querysz", ")", ",", "unk_silence_idx", ")", ")", ".", "to", "(", "device", ")", "\n", "not_unk_silence_idx", "=", "not_unk_silence_idx", ".", "type", "(", "torch", ".", "LongTensor", ")", "\n", "corrects", "=", "[", "0", "for", "_", "in", "range", "(", "update_step_test", "+", "1", ")", "]", "\n", "unk_tps", "=", "[", "0", "for", "_", "in", "range", "(", "update_step_test", "+", "1", ")", "]", "# true positive value of the unknown class", "\n", "unk_fps", "=", "[", "0", "for", "_", "in", "range", "(", "update_step_test", "+", "1", ")", "]", "# false positive value of the unnown class", "\n", "silence_tps", "=", "[", "0", "for", "_", "in", "range", "(", "update_step_test", "+", "1", ")", "]", "# true positive value of the silence class", "\n", "silence_fps", "=", "[", "0", "for", "_", "in", "range", "(", "update_step_test", "+", "1", ")", "]", "# false positive value of the silence class", "\n", "corrects_normal", "=", "[", "0", "for", "_", "in", "range", "(", "update_step_test", "+", "1", ")", "]", "\n", "\n", "# in order to not ruin the state of running_mean/variance and bn_weight/bias", "\n", "# we finetunning on the copied model instead of self.net", "\n", "net", "=", "deepcopy", "(", "self", ".", "net", ")", "\n", "\n", "# 1. run the i-th task and compute loss for k=0", "\n", "logits", "=", "net", "(", "x_spt", ")", "\n", "loss", "=", "F", ".", "cross_entropy", "(", "logits", ",", "y_spt", ")", "\n", "grad", "=", "torch", ".", "autograd", ".", "grad", "(", "loss", ",", "net", ".", "parameters", "(", ")", ")", "\n", "fast_weights", "=", "list", "(", "map", "(", "lambda", "p", ":", "p", "[", "1", "]", "-", "self", ".", "update_lr", "*", "p", "[", "0", "]", ",", "zip", "(", "grad", ",", "net", ".", "parameters", "(", ")", ")", ")", ")", "\n", "\n", "# this is the loss and accuracy before first update", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "# [setsz, nway]", "\n", "            ", "logits_q", "=", "net", "(", "x_qry", ",", "net", ".", "parameters", "(", ")", ",", "dropout_training", "=", "False", ",", "bn_training", "=", "True", ")", "\n", "# [setsz]", "\n", "pred_q", "=", "F", ".", "softmax", "(", "logits_q", ",", "dim", "=", "1", ")", ".", "argmax", "(", "dim", "=", "1", ")", "\n", "# scalar", "\n", "correct", "=", "torch", ".", "eq", "(", "pred_q", ",", "y_qry", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "corrects", "[", "0", "]", "=", "corrects", "[", "0", "]", "+", "correct", "\n", "\n", "unk_idx", "=", "(", "y_qry", "==", "self", ".", "n_way", ")", ".", "nonzero", "(", ")", ".", "view", "(", "-", "1", ")", "# set the unknown class idx to self.n_way after n_way keywords", "\n", "unk_tp", "=", "(", "pred_q", "[", "unk_idx", "]", "==", "self", ".", "n_way", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "unk_tps", "[", "0", "]", "=", "unk_tps", "[", "0", "]", "+", "unk_tp", "\n", "\n", "silence_idx", "=", "(", "y_qry", "==", "(", "self", ".", "n_way", "+", "1", ")", ")", ".", "nonzero", "(", ")", ".", "view", "(", "-", "1", ")", "# set the silence class idx to self.n_way+1 after the unknown class", "\n", "silence_tp", "=", "(", "pred_q", "[", "silence_idx", "]", "==", "(", "self", ".", "n_way", "+", "1", ")", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "silence_tps", "[", "0", "]", "=", "silence_tps", "[", "0", "]", "+", "silence_tp", "\n", "\n", "unk_fp", "=", "(", "pred_q", "[", "not_unk_silence_idx", "]", "==", "self", ".", "n_way", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "unk_fps", "[", "0", "]", "=", "unk_fps", "[", "0", "]", "+", "unk_fp", "\n", "silence_fp", "=", "(", "pred_q", "[", "not_unk_silence_idx", "]", "==", "(", "self", ".", "n_way", "+", "1", ")", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "silence_fps", "[", "0", "]", "=", "silence_fps", "[", "0", "]", "+", "silence_fp", "\n", "correct_normal", "=", "torch", ".", "eq", "(", "pred_q", "[", "not_unk_silence_idx", "]", ",", "y_qry", "[", "not_unk_silence_idx", "]", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "corrects_normal", "[", "0", "]", "=", "corrects_normal", "[", "0", "]", "+", "correct_normal", "\n", "\n", "# this is the loss and accuracy after the first update", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "# [setsz, nway]", "\n", "            ", "logits_q", "=", "net", "(", "x_qry", ",", "fast_weights", ",", "dropout_training", "=", "False", ",", "bn_training", "=", "True", ")", "\n", "# [setsz]", "\n", "pred_q", "=", "F", ".", "softmax", "(", "logits_q", ",", "dim", "=", "1", ")", ".", "argmax", "(", "dim", "=", "1", ")", "\n", "# scalar", "\n", "correct", "=", "torch", ".", "eq", "(", "pred_q", ",", "y_qry", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "corrects", "[", "1", "]", "=", "corrects", "[", "1", "]", "+", "correct", "\n", "\n", "unk_idx", "=", "(", "y_qry", "==", "self", ".", "n_way", ")", ".", "nonzero", "(", ")", ".", "view", "(", "-", "1", ")", "\n", "unk_tp", "=", "(", "pred_q", "[", "unk_idx", "]", "==", "self", ".", "n_way", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "unk_tps", "[", "1", "]", "=", "unk_tps", "[", "1", "]", "+", "unk_tp", "\n", "\n", "silence_idx", "=", "(", "y_qry", "==", "(", "self", ".", "n_way", "+", "1", ")", ")", ".", "nonzero", "(", ")", ".", "view", "(", "-", "1", ")", "\n", "silence_tp", "=", "(", "pred_q", "[", "silence_idx", "]", "==", "(", "self", ".", "n_way", "+", "1", ")", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "silence_tps", "[", "1", "]", "=", "silence_tps", "[", "1", "]", "+", "silence_tp", "\n", "\n", "#not_unk_silence_idx = torch.cat(((y_qry != self.n_way).nonzero(), (y_qry != (self.n_way+1)).nonzero()), 0).view(-1)", "\n", "unk_fp", "=", "(", "pred_q", "[", "not_unk_silence_idx", "]", "==", "self", ".", "n_way", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "unk_fps", "[", "1", "]", "=", "unk_fps", "[", "1", "]", "+", "unk_fp", "\n", "silence_fp", "=", "(", "pred_q", "[", "not_unk_silence_idx", "]", "==", "(", "self", ".", "n_way", "+", "1", ")", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "silence_fps", "[", "1", "]", "=", "silence_fps", "[", "1", "]", "+", "silence_fp", "\n", "correct_normal", "=", "torch", ".", "eq", "(", "pred_q", "[", "not_unk_silence_idx", "]", ",", "y_qry", "[", "not_unk_silence_idx", "]", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "corrects_normal", "[", "1", "]", "=", "corrects_normal", "[", "1", "]", "+", "correct_normal", "\n", "\n", "", "for", "k", "in", "range", "(", "1", ",", "update_step_test", ")", ":", "\n", "# 1. run the i-th task and compute loss for k=1~K-1", "\n", "            ", "logits", "=", "net", "(", "x_spt", ",", "fast_weights", ",", "bn_training", "=", "True", ")", "\n", "loss", "=", "F", ".", "cross_entropy", "(", "logits", ",", "y_spt", ")", "\n", "# 2. compute grad on theta_pi", "\n", "grad", "=", "torch", ".", "autograd", ".", "grad", "(", "loss", ",", "fast_weights", ")", "\n", "# 3. theta_pi = theta_pi - train_lr * grad", "\n", "fast_weights", "=", "list", "(", "map", "(", "lambda", "p", ":", "p", "[", "1", "]", "-", "self", ".", "update_lr", "*", "p", "[", "0", "]", ",", "zip", "(", "grad", ",", "fast_weights", ")", ")", ")", "\n", "\n", "logits_q", "=", "net", "(", "x_qry", ",", "fast_weights", ",", "dropout_training", "=", "False", ",", "bn_training", "=", "True", ")", "\n", "# loss_q will be overwritten and just keep the loss_q on last update step.", "\n", "loss_q", "=", "F", ".", "cross_entropy", "(", "logits_q", ",", "y_qry", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "pred_q", "=", "F", ".", "softmax", "(", "logits_q", ",", "dim", "=", "1", ")", ".", "argmax", "(", "dim", "=", "1", ")", "\n", "correct", "=", "torch", ".", "eq", "(", "pred_q", ",", "y_qry", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "# convert to numpy", "\n", "corrects", "[", "k", "+", "1", "]", "=", "corrects", "[", "k", "+", "1", "]", "+", "correct", "\n", "\n", "unk_idx", "=", "(", "y_qry", "==", "self", ".", "n_way", ")", ".", "nonzero", "(", ")", ".", "view", "(", "-", "1", ")", "\n", "unk_tp", "=", "(", "pred_q", "[", "unk_idx", "]", "==", "self", ".", "n_way", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "unk_tps", "[", "k", "+", "1", "]", "=", "unk_tps", "[", "k", "+", "1", "]", "+", "unk_tp", "\n", "\n", "silence_idx", "=", "(", "y_qry", "==", "(", "self", ".", "n_way", "+", "1", ")", ")", ".", "nonzero", "(", ")", ".", "view", "(", "-", "1", ")", "\n", "silence_tp", "=", "(", "pred_q", "[", "silence_idx", "]", "==", "(", "self", ".", "n_way", "+", "1", ")", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "silence_tps", "[", "k", "+", "1", "]", "=", "silence_tps", "[", "k", "+", "1", "]", "+", "silence_tp", "\n", "\n", "#not_unk_silence_idx = torch.cat(((y_qry != self.n_way).nonzero(), (y_qry != (self.n_way+1)).nonzero()), 0).view(-1)", "\n", "unk_fp", "=", "(", "pred_q", "[", "not_unk_silence_idx", "]", "==", "self", ".", "n_way", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "unk_fps", "[", "k", "+", "1", "]", "=", "unk_fps", "[", "k", "+", "1", "]", "+", "unk_fp", "\n", "silence_fp", "=", "(", "pred_q", "[", "not_unk_silence_idx", "]", "==", "(", "self", ".", "n_way", "+", "1", ")", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "silence_fps", "[", "k", "+", "1", "]", "=", "silence_fps", "[", "k", "+", "1", "]", "+", "silence_fp", "\n", "correct_normal", "=", "torch", ".", "eq", "(", "pred_q", "[", "not_unk_silence_idx", "]", ",", "y_qry", "[", "not_unk_silence_idx", "]", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "corrects_normal", "[", "k", "+", "1", "]", "=", "corrects_normal", "[", "k", "+", "1", "]", "+", "correct_normal", "\n", "\n", "", "", "del", "net", "\n", "return", "corrects", ",", "unk_tps", ",", "unk_fps", ",", "silence_tps", ",", "silence_fps", ",", "corrects_normal", "\n", "\n"]], "home.repos.pwc.inspect_result.anugunjnaman_fixed-maml.None.meta.main": [[244, 246], ["None"], "function", ["None"], ["", "", "def", "main", "(", ")", ":", "\n", "    ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.anugunjnaman_fixed-maml.None.train.mean_confidence_interval": [[13, 18], ["numpy.mean", "scipy.stats.sem", "scipy.stats.t._ppf"], "function", ["None"], ["def", "mean_confidence_interval", "(", "accs", ",", "confidence", "=", "0.95", ")", ":", "\n", "    ", "n", "=", "accs", ".", "shape", "[", "0", "]", "\n", "m", ",", "se", "=", "np", ".", "mean", "(", "accs", ",", "axis", "=", "0", ")", ",", "scipy", ".", "stats", ".", "sem", "(", "accs", ")", "\n", "h", "=", "se", "*", "scipy", ".", "stats", ".", "t", ".", "_ppf", "(", "(", "1", "+", "confidence", ")", "/", "2", ",", "n", "-", "1", ")", "\n", "return", "m", ",", "h", "\n", "\n"]], "home.repos.pwc.inspect_result.anugunjnaman_fixed-maml.None.train.train": [[19, 111], ["torch.utils.data.DataLoader", "print", "print", "enumerate", "writer.close", "torch.load", "torch.load.eval", "len", "print", "torch.load.", "writer.add_scalar", "writer.add_scalar", "x_spt.to", "y_spt.to", "x_qry.to", "y_qry.to", "print", "logging.info", "print", "logging.info", "print", "logging.info", "read_data.LingualData", "torch.utils.data.DataLoader", "numpy.array", "train.mean_confidence_interval", "print", "print", "logging.info", "logging.info", "numpy.array", "train.mean_confidence_interval", "print", "print", "logging.info", "logging.info", "numpy.array", "train.mean_confidence_interval", "print", "print", "logging.info", "logging.info", "numpy.array", "train.mean_confidence_interval", "print", "print", "logging.info", "logging.info", "torch.save", "loss_q.item", "print", "accs_all_test.append", "accs_normal_test.append", "unk_tps_test.append", "silence_tps_test.append", "str", "str", "loss_q.item", "x_spt.squeeze().to", "y_spt.squeeze().to", "x_qry.squeeze().to", "y_qry.squeeze().to", "torch.load.finetunning", "torch.load.finetunning", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "str", "x_spt.squeeze", "y_spt.squeeze", "x_qry.squeeze", "y_qry.squeeze"], "function", ["home.repos.pwc.inspect_result.anugunjnaman_fixed-maml.None.train.mean_confidence_interval", "home.repos.pwc.inspect_result.anugunjnaman_fixed-maml.None.train.mean_confidence_interval", "home.repos.pwc.inspect_result.anugunjnaman_fixed-maml.None.train.mean_confidence_interval", "home.repos.pwc.inspect_result.anugunjnaman_fixed-maml.None.train.mean_confidence_interval", "home.repos.pwc.inspect_result.anugunjnaman_fixed-maml.None.meta.Meta.finetunning", "home.repos.pwc.inspect_result.anugunjnaman_fixed-maml.None.meta.Meta.finetunning"], ["", "def", "train", "(", "model", ",", "mini_train", ",", "model_path", ",", "resume_itr", ",", "device", ",", "writer", ")", ":", "\n", "    ", "if", "resume_itr", ">", "0", ":", "\n", "        ", "model", "=", "torch", ".", "load", "(", "model_path", "+", "'/model-'", "+", "str", "(", "resume_itr", ")", "+", "'.pth'", ")", "\n", "model", ".", "eval", "(", "model_path", "+", "'/model-'", "+", "str", "(", "resume_itr", ")", "+", "'.pth'", ")", "\n", "\n", "", "db", "=", "DataLoader", "(", "mini_train", ",", "1", ",", "shuffle", "=", "True", ")", "\n", "print", "(", "len", "(", "db", ")", ")", "\n", "print", "(", "\"Start Training\"", ")", "\n", "for", "step", ",", "(", "x_spt", ",", "y_spt", ",", "x_qry", ",", "y_qry", ")", "in", "enumerate", "(", "db", ")", ":", "\n", "        ", "print", "(", "'Step: '", ",", "step", "+", "1", ")", "\n", "x_spt", ",", "y_spt", ",", "x_qry", ",", "y_qry", "=", "x_spt", ".", "to", "(", "device", ")", ",", "y_spt", ".", "to", "(", "device", ")", ",", "x_qry", ".", "to", "(", "device", ")", ",", "y_qry", ".", "to", "(", "device", ")", "\n", "loss_q", ",", "accs", "=", "model", "(", "x_spt", ",", "y_spt", ",", "x_qry", ",", "y_qry", ")", "\n", "step", "=", "resume_itr", "+", "step", "\n", "writer", ".", "add_scalar", "(", "'scalar/loss_q'", ",", "loss_q", ",", "step", ")", "\n", "writer", ".", "add_scalar", "(", "'scalar/training_acc'", ",", "accs", "[", "-", "1", "]", ",", "step", ")", "\n", "if", "step", "%", "1", "==", "0", ":", "\n", "            ", "print", "(", "'Iteration:'", ",", "step", ",", "'\\ttraining acc:'", ",", "accs", "[", "-", "1", "]", ")", "\n", "logging", ".", "info", "(", "\"Iteration: {} \\t training acc: {}\"", ".", "format", "(", "step", ",", "accs", "[", "-", "1", "]", ")", ")", "\n", "print", "(", "'Iteration:'", ",", "step", ",", "'\\ttraining loss:'", ",", "loss_q", ".", "item", "(", ")", ")", "\n", "logging", ".", "info", "(", "\"Iteration: {} \\t training loss: {}\"", ".", "format", "(", "step", ",", "loss_q", ".", "item", "(", ")", ")", ")", "\n", "# evaluation", "\n", "", "if", "step", "%", "20", "==", "0", ":", "\n", "            ", "print", "(", "\"[Iteration: {}][keywords: [#-spt-train: {}], [#-qry-train: {}], [#-spt-test: {}], [#-qry-test: {}]]\\\n                [unk & silence: [#-spt-train: {}], [#-qry-train: {}], [#-spt-test: {}], [#-qry-test: {}]]\"", ".", "format", "(", "step", ",", "args", ".", "k_spt_train", ",", "\n", "args", ".", "k_qry_train", ",", "args", ".", "k_spt_test", ",", "args", ".", "k_qry_test", ",", "args", ".", "k_spt_unk_train", ",", "args", ".", "k_qry_unk_train", ",", "args", ".", "k_spt_unk_test", ",", "args", ".", "k_qry_unk_test", ")", ")", "\n", "logging", ".", "info", "(", "\"[Iteration: {}][keywords: [#-spt-train: {}], [#-qry-train: {}], [#-spt-test: {}], [#-qry-test: {}]]\\\n                [unk & silence: [#-spt-train: {}], [#-qry-train: {}], [#-spt-test: {}], [#-qry-test: {}]]\"", ".", "format", "(", "step", ",", "args", ".", "k_spt_train", ",", "\n", "args", ".", "k_qry_train", ",", "args", ".", "k_spt_test", ",", "args", ".", "k_qry_test", ",", "args", ".", "k_spt_unk_train", ",", "args", ".", "k_qry_unk_train", ",", "args", ".", "k_spt_unk_test", ",", "args", ".", "k_qry_unk_test", ")", ")", "\n", "# because of the limited dataset, we don't use a validation set. instead we evaluate the training model every 500 Iterations.", "\n", "mini_test", "=", "LingualData", "(", "'./data'", ",", "mode", "=", "'test'", ",", "task_type", "=", "args", ".", "task_type", ",", "n_way", "=", "args", ".", "n_way", ",", "k_shot", "=", "args", ".", "k_spt_test", ",", "\n", "k_query", "=", "args", ".", "k_qry_test", ",", "k_unk_shot", "=", "args", ".", "k_spt_unk_test", ",", "k_unk_query", "=", "args", ".", "k_qry_unk_test", ",", "\n", "k_silence_shot", "=", "args", ".", "k_spt_silence_test", ",", "k_silence_query", "=", "args", ".", "k_qry_silence_test", ",", "\n", "batchsz", "=", "10", ",", "resize", "=", "args", ".", "imgsz", ",", "unk_sil_spt", "=", "False", ")", "\n", "db_test", "=", "DataLoader", "(", "mini_test", ",", "1", ",", "shuffle", "=", "True", ")", "\n", "accs_all_test", "=", "[", "]", "\n", "accs_normal_test", "=", "[", "]", "\n", "unk_tps_test", "=", "[", "]", "\n", "silence_tps_test", "=", "[", "]", "\n", "ggg", "=", "0", "\n", "for", "x_spt", ",", "y_spt", ",", "x_qry", ",", "y_qry", "in", "db_test", ":", "\n", "                ", "ggg", "+=", "1", "\n", "print", "(", "'Test Iter: '", ",", "ggg", ")", "\n", "x_spt", ",", "y_spt", ",", "x_qry", ",", "y_qry", "=", "x_spt", ".", "squeeze", "(", "0", ")", ".", "to", "(", "device", ")", ",", "y_spt", ".", "squeeze", "(", "0", ")", ".", "to", "(", "device", ")", ",", "x_qry", ".", "squeeze", "(", "0", ")", ".", "to", "(", "device", ")", ",", "y_qry", ".", "squeeze", "(", "0", ")", ".", "to", "(", "device", ")", "\n", "\n", "if", "step", "==", "0", ":", "# to get the results of purely supervised learning", "\n", "                    ", "corrects", ",", "unk_tps", ",", "unk_fps", ",", "silence_tps", ",", "silence_fps", ",", "corrects_normal", "=", "model", ".", "finetunning", "(", "x_spt", ",", "y_spt", ",", "x_qry", ",", "y_qry", ",", "100", ")", "\n", "", "else", ":", "\n", "                    ", "corrects", ",", "unk_tps", ",", "unk_fps", ",", "silence_tps", ",", "silence_fps", ",", "corrects_normal", "=", "model", ".", "finetunning", "(", "x_spt", ",", "y_spt", ",", "x_qry", ",", "y_qry", ",", "args", ".", "update_step_test", ")", "\n", "\n", "", "num_keywords_qry_samples_test", "=", "args", ".", "n_way", "*", "args", ".", "k_qry_test", "*", "1.0", "\n", "num_unknown_qry_samples_test", "=", "args", ".", "k_qry_unk_test", "*", "1.0", "\n", "num_silence_qry_samples_test", "=", "args", ".", "k_qry_silence_test", "*", "1.0", "\n", "num_all_qry_samples_test", "=", "num_keywords_qry_samples_test", "+", "num_unknown_qry_samples_test", "+", "num_silence_qry_samples_test", "\n", "accs_all_test", ".", "append", "(", "np", ".", "array", "(", "corrects", ")", "/", "num_all_qry_samples_test", ")", "\n", "accs_normal_test", ".", "append", "(", "np", ".", "array", "(", "corrects_normal", ")", "/", "num_keywords_qry_samples_test", ")", "\n", "unk_tps_test", ".", "append", "(", "np", ".", "array", "(", "unk_fps", ")", "/", "num_unknown_qry_samples_test", ")", "\n", "silence_tps_test", ".", "append", "(", "np", ".", "array", "(", "silence_fps", ")", "/", "num_silence_qry_samples_test", ")", "\n", "\n", "# [b, update_step+1]", "\n", "#accs = np.array(accs_all_test1).mean(axis=0).astype(np.float16)", "\n", "", "accs", "=", "np", ".", "array", "(", "accs_all_test", ")", "\n", "mean_accs", ",", "h_accs", "=", "mean_confidence_interval", "(", "accs", ")", "\n", "print", "(", "'Test acc all(m):'", ",", "mean_accs", ")", "\n", "print", "(", "'Test acc all(h):'", ",", "h_accs", ")", "\n", "logging", ".", "info", "(", "'Test acc all(m): {}'", ".", "format", "(", "mean_accs", ")", ")", "\n", "logging", ".", "info", "(", "'Test acc all(h): {}'", ".", "format", "(", "h_accs", ")", ")", "\n", "\n", "accs_normal", "=", "np", ".", "array", "(", "accs_normal_test", ")", "\n", "mean_accs_normal", ",", "h_accs_normal", "=", "mean_confidence_interval", "(", "accs_normal", ")", "\n", "print", "(", "'Test acc normal(m):'", ",", "mean_accs_normal", ")", "\n", "print", "(", "'Test acc normal(h):'", ",", "h_accs_normal", ")", "\n", "logging", ".", "info", "(", "'Test acc normal(m): {}'", ".", "format", "(", "mean_accs_normal", ")", ")", "\n", "logging", ".", "info", "(", "'Test acc normal(h): {}'", ".", "format", "(", "h_accs_normal", ")", ")", "\n", "\n", "unk_tps", "=", "np", ".", "array", "(", "unk_tps_test", ")", "\n", "mean_unk_tps", ",", "h_unk_tps", "=", "mean_confidence_interval", "(", "unk_tps", ")", "\n", "print", "(", "'Unknown true positive(m):'", ",", "mean_unk_tps", ")", "\n", "print", "(", "'Unknown true positive(h):'", ",", "h_unk_tps", ")", "\n", "logging", ".", "info", "(", "'Unknown true positive(m): {}'", ".", "format", "(", "mean_unk_tps", ")", ")", "\n", "logging", ".", "info", "(", "'Unknown true positive(h): {}'", ".", "format", "(", "h_unk_tps", ")", ")", "\n", "\n", "silence_tps", "=", "np", ".", "array", "(", "silence_tps_test", ")", "\n", "mean_silence_tps", ",", "h_silence_tps", "=", "mean_confidence_interval", "(", "silence_tps", ")", "\n", "print", "(", "'Silence true positive(m):'", ",", "mean_silence_tps", ")", "\n", "print", "(", "'Silence true positive(h):'", ",", "h_silence_tps", ")", "\n", "logging", ".", "info", "(", "'Silence true positive(m): {}'", ".", "format", "(", "mean_silence_tps", ")", ")", "\n", "logging", ".", "info", "(", "'Silence true positive(h): {}'", ".", "format", "(", "h_silence_tps", ")", ")", "\n", "\n", "", "if", "step", "%", "40", "==", "0", ":", "\n", "            ", "torch", ".", "save", "(", "model", ",", "model_path", "+", "'/'", "+", "'model-'", "+", "str", "(", "step", ")", "+", "'.pth'", ")", "\n", "", "", "writer", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anugunjnaman_fixed-maml.None.train.test": [[113, 177], ["print", "torch.load", "torch.load.eval", "print", "logging.info", "read_data.LingualData", "torch.utils.data.DataLoader", "numpy.array", "train.mean_confidence_interval", "print", "print", "logging.info", "logging.info", "numpy.array", "train.mean_confidence_interval", "print", "print", "logging.info", "logging.info", "numpy.array", "train.mean_confidence_interval", "print", "print", "logging.info", "logging.info", "numpy.array", "train.mean_confidence_interval", "print", "print", "logging.info", "logging.info", "torch.load.finetunning", "accs_all_test.append", "accs_normal_test.append", "unk_tps_test.append", "silence_tps_test.append", "x_spt.squeeze().to", "y_spt.squeeze().to", "x_qry.squeeze().to", "y_qry.squeeze().to", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "x_spt.squeeze", "y_spt.squeeze", "x_qry.squeeze", "y_qry.squeeze"], "function", ["home.repos.pwc.inspect_result.anugunjnaman_fixed-maml.None.train.mean_confidence_interval", "home.repos.pwc.inspect_result.anugunjnaman_fixed-maml.None.train.mean_confidence_interval", "home.repos.pwc.inspect_result.anugunjnaman_fixed-maml.None.train.mean_confidence_interval", "home.repos.pwc.inspect_result.anugunjnaman_fixed-maml.None.train.mean_confidence_interval", "home.repos.pwc.inspect_result.anugunjnaman_fixed-maml.None.meta.Meta.finetunning"], ["", "def", "test", "(", "model", ",", "model_file", ",", "device", ")", ":", "\n", "    ", "print", "(", "model_file", ")", "\n", "model", "=", "torch", ".", "load", "(", "model_file", ")", "\n", "model", ".", "eval", "(", ")", "\n", "\n", "print", "(", "\"=====[keywords: [#-spt-train: {}], [#-qry-train: {}], [#-spt-test: {}], [#-qry-test: {}]]\\\n        [unk & silence: [#-spt-train: {}], [#-qry-train: {}], [#-spt-test: {}], [#-qry-test: {}]]=====\"", ".", "format", "(", "args", ".", "k_spt_train", ",", "\n", "args", ".", "k_qry_train", ",", "args", ".", "k_spt_test", ",", "args", ".", "k_qry_test", ",", "args", ".", "k_spt_unk_train", ",", "args", ".", "k_qry_unk_train", ",", "args", ".", "k_spt_unk_test", ",", "args", ".", "k_qry_unk_test", ")", ")", "\n", "logging", ".", "info", "(", "\"=====[keywords: [#-spt-train: {}], [#-qry-train: {}], [#-spt-test: {}], [#-qry-test: {}]]\\\n        [unk & silence: [#-spt-train: {}], [#-qry-train: {}], [#-spt-test: {}], [#-qry-test: {}]]=====\"", ".", "format", "(", "args", ".", "k_spt_train", ",", "\n", "args", ".", "k_qry_train", ",", "args", ".", "k_spt_test", ",", "args", ".", "k_qry_test", ",", "args", ".", "k_spt_unk_train", ",", "args", ".", "k_qry_unk_train", ",", "args", ".", "k_spt_unk_test", ",", "args", ".", "k_qry_unk_test", ")", ")", "\n", "\n", "mini_test", "=", "LingualData", "(", "'./data'", ",", "mode", "=", "'test'", ",", "task_type", "=", "args", ".", "task_type", ",", "n_way", "=", "args", ".", "n_way", ",", "k_shot", "=", "args", ".", "k_spt_test", ",", "\n", "k_query", "=", "args", ".", "k_qry_test", ",", "k_unk_shot", "=", "args", ".", "k_spt_unk_test", ",", "k_unk_query", "=", "args", ".", "k_qry_unk_test", ",", "\n", "k_silence_shot", "=", "args", ".", "k_spt_silence_test", ",", "k_silence_query", "=", "args", ".", "k_qry_silence_test", ",", "\n", "batchsz", "=", "50", ",", "resize", "=", "args", ".", "imgsz", ",", "unk_sil_spt", "=", "args", ".", "unk_spt", ")", "\n", "\n", "db_test", "=", "DataLoader", "(", "mini_test", ",", "1", ",", "shuffle", "=", "True", ")", "\n", "accs_all_test", "=", "[", "]", "\n", "accs_normal_test", "=", "[", "]", "\n", "unk_tps_test", "=", "[", "]", "\n", "silence_tps_test", "=", "[", "]", "\n", "\n", "for", "x_spt", ",", "y_spt", ",", "x_qry", ",", "y_qry", "in", "db_test", ":", "\n", "        ", "x_spt", ",", "y_spt", ",", "x_qry", ",", "y_qry", "=", "x_spt", ".", "squeeze", "(", "0", ")", ".", "to", "(", "device", ")", ",", "y_spt", ".", "squeeze", "(", "0", ")", ".", "to", "(", "device", ")", ",", "x_qry", ".", "squeeze", "(", "0", ")", ".", "to", "(", "device", ")", ",", "y_qry", ".", "squeeze", "(", "0", ")", ".", "to", "(", "device", ")", "\n", "\n", "accs", ",", "unk_tps", ",", "unk_fps", ",", "silence_tps", ",", "silence_fps", ",", "accs_normal", "=", "model", ".", "finetunning", "(", "x_spt", ",", "y_spt", ",", "x_qry", ",", "y_qry", ",", "args", ".", "update_step_test", ")", "\n", "num_keywords_qry_samples_test", "=", "args", ".", "n_way", "*", "args", ".", "k_qry_test", "*", "1.0", "\n", "num_unknown_qry_samples_test", "=", "args", ".", "k_qry_unk_test", "*", "1.0", "\n", "num_silence_qry_samples_test", "=", "args", ".", "k_qry_silence_test", "*", "1.0", "\n", "num_all_qry_samples_test", "=", "num_keywords_qry_samples_test", "+", "num_unknown_qry_samples_test", "+", "num_silence_qry_samples_test", "\n", "accs_all_test", ".", "append", "(", "np", ".", "array", "(", "accs", ")", "/", "num_all_qry_samples_test", ")", "\n", "accs_normal_test", ".", "append", "(", "np", ".", "array", "(", "accs_normal", ")", "/", "num_keywords_qry_samples_test", ")", "\n", "unk_tps_test", ".", "append", "(", "np", ".", "array", "(", "unk_fps", ")", "/", "num_unknown_qry_samples_test", ")", "\n", "silence_tps_test", ".", "append", "(", "np", ".", "array", "(", "silence_fps", ")", "/", "num_silence_qry_samples_test", ")", "\n", "\n", "", "accs", "=", "np", ".", "array", "(", "accs_all_test", ")", "\n", "mean_accs", ",", "h_accs", "=", "mean_confidence_interval", "(", "accs", ")", "\n", "print", "(", "'Test acc all(m):'", ",", "mean_accs", ")", "\n", "print", "(", "'Test acc all(h):'", ",", "h_accs", ")", "\n", "logging", ".", "info", "(", "'Test acc all(m): {}'", ".", "format", "(", "mean_accs", ")", ")", "\n", "logging", ".", "info", "(", "'Test acc all(h): {}'", ".", "format", "(", "h_accs", ")", ")", "\n", "\n", "accs_normal", "=", "np", ".", "array", "(", "accs_normal_test", ")", "\n", "mean_accs_normal", ",", "h_accs_normal", "=", "mean_confidence_interval", "(", "accs_normal", ")", "\n", "print", "(", "'Test acc normal(m):'", ",", "mean_accs_normal", ")", "\n", "print", "(", "'Test acc normal(h):'", ",", "h_accs_normal", ")", "\n", "logging", ".", "info", "(", "'Test acc normal(m): {}'", ".", "format", "(", "mean_accs_normal", ")", ")", "\n", "logging", ".", "info", "(", "'Test acc normal(h): {}'", ".", "format", "(", "h_accs_normal", ")", ")", "\n", "\n", "unk_tps", "=", "np", ".", "array", "(", "unk_tps_test", ")", "\n", "mean_unk_tps", ",", "h_unk_tps", "=", "mean_confidence_interval", "(", "unk_tps", ")", "\n", "print", "(", "'Unknown true positive(m):'", ",", "mean_unk_tps", ")", "\n", "print", "(", "'Unknown true positive(h):'", ",", "h_unk_tps", ")", "\n", "logging", ".", "info", "(", "'Unknown true positive(m): {}'", ".", "format", "(", "mean_unk_tps", ")", ")", "\n", "logging", ".", "info", "(", "'Unknown true positive(h): {}'", ".", "format", "(", "h_unk_tps", ")", ")", "\n", "\n", "silence_tps", "=", "np", ".", "array", "(", "silence_tps_test", ")", "\n", "mean_silence_tps", ",", "h_silence_tps", "=", "mean_confidence_interval", "(", "silence_tps", ")", "\n", "print", "(", "'Silence true positive(m):'", ",", "mean_silence_tps", ")", "\n", "print", "(", "'Silence true positive(h):'", ",", "h_silence_tps", ")", "\n", "logging", ".", "info", "(", "'Silence true positive(m): {}'", ".", "format", "(", "mean_silence_tps", ")", ")", "\n", "logging", ".", "info", "(", "'Silence true positive(h): {}'", ".", "format", "(", "h_silence_tps", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anugunjnaman_fixed-maml.None.train.main": [[178, 231], ["torch.manual_seed", "torch.cuda.manual_seed_all", "numpy.random.seed", "print", "torch.device", "meta.Meta().to", "filter", "sum", "print", "print", "Meta().to.parameters", "map", "read_data.LingualData", "str", "tensorboardX.SummaryWriter", "utils.set_logger", "train.train", "meta.Meta", "os.path.exists", "os.makedirs", "print", "os.path.join", "train.test", "numpy.prod", "str", "str", "str", "str", "str", "str"], "function", ["home.repos.pwc.inspect_result.anugunjnaman_fixed-maml.None.learner.Learner.parameters", "home.repos.pwc.inspect_result.anugunjnaman_fixed-maml.None.utils.set_logger", "home.repos.pwc.inspect_result.anugunjnaman_fixed-maml.None.train.train", "home.repos.pwc.inspect_result.anugunjnaman_fixed-maml.None.train.test"], ["", "def", "main", "(", ")", ":", "\n", "    ", "torch", ".", "manual_seed", "(", "1", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "1", ")", "\n", "np", ".", "random", ".", "seed", "(", "1", ")", "\n", "print", "(", "args", ")", "\n", "\n", "config", "=", "[", "\n", "(", "'conv2d'", ",", "[", "args", ".", "num_filters", ",", "1", ",", "3", ",", "3", ",", "2", ",", "1", "]", ")", ",", "\n", "(", "'relu'", ",", "[", "True", "]", ")", ",", "\n", "(", "'bn'", ",", "[", "args", ".", "num_filters", "]", ")", ",", "\n", "(", "'conv2d'", ",", "[", "args", ".", "num_filters", ",", "args", ".", "num_filters", ",", "3", ",", "3", ",", "2", ",", "1", "]", ")", ",", "\n", "(", "'relu'", ",", "[", "True", "]", ")", ",", "\n", "(", "'bn'", ",", "[", "args", ".", "num_filters", "]", ")", ",", "\n", "(", "'conv2d'", ",", "[", "args", ".", "num_filters", ",", "args", ".", "num_filters", ",", "3", ",", "3", ",", "2", ",", "1", "]", ")", ",", "\n", "(", "'relu'", ",", "[", "True", "]", ")", ",", "\n", "(", "'bn'", ",", "[", "args", ".", "num_filters", "]", ")", ",", "\n", "(", "'conv2d'", ",", "[", "args", ".", "num_filters", ",", "args", ".", "num_filters", ",", "3", ",", "3", ",", "2", ",", "1", "]", ")", ",", "\n", "(", "'relu'", ",", "[", "True", "]", ")", ",", "\n", "(", "'bn'", ",", "[", "args", ".", "num_filters", "]", ")", ",", "\n", "(", "'flatten'", ",", "[", "]", ")", ",", "\n", "(", "'linear'", ",", "[", "args", ".", "n_way", "+", "2", ",", "args", ".", "num_filters", "*", "9", "]", ")", "\n", "]", "\n", "\n", "device", "=", "torch", ".", "device", "(", "'cuda'", ")", "\n", "maml", "=", "Meta", "(", "args", ",", "config", ")", ".", "to", "(", "device", ")", "\n", "\n", "tmp", "=", "filter", "(", "lambda", "x", ":", "x", ".", "requires_grad", ",", "maml", ".", "parameters", "(", ")", ")", "\n", "num", "=", "sum", "(", "map", "(", "lambda", "x", ":", "np", ".", "prod", "(", "x", ".", "shape", ")", ",", "tmp", ")", ")", "\n", "print", "(", "maml", ")", "\n", "print", "(", "'Total trainable tensors:'", ",", "num", ")", "\n", "\n", "# batchsz here means total sampled meta-task number", "\n", "if", "args", ".", "train", "==", "'True'", ":", "\n", "        ", "mini_train", "=", "LingualData", "(", "'./data'", ",", "mode", "=", "'train'", ",", "task_type", "=", "args", ".", "task_type", ",", "n_way", "=", "args", ".", "n_way", ",", "k_shot", "=", "args", ".", "k_spt_train", ",", "\n", "k_query", "=", "args", ".", "k_qry_train", ",", "k_unk_shot", "=", "args", ".", "k_spt_unk_train", ",", "k_unk_query", "=", "args", ".", "k_qry_unk_train", ",", "\n", "k_silence_shot", "=", "args", ".", "k_spt_silence_train", ",", "k_silence_query", "=", "args", ".", "k_qry_silence_train", ",", "\n", "batchsz", "=", "16000", ",", "resize", "=", "args", ".", "imgsz", ",", "unk_sil_spt", "=", "args", ".", "unk_sil_spt", ")", "\n", "\n", "", "exp_string", "=", "'cls_'", "+", "str", "(", "args", ".", "n_way", ")", "+", "'.tskn_'", "+", "str", "(", "args", ".", "task_num", ")", "+", "'.spttrain_'", "+", "str", "(", "args", ".", "k_spt_train", ")", "+", "'.qrytrain_'", "+", "str", "(", "args", ".", "k_qry_train", ")", "+", "'.numstep'", "+", "str", "(", "args", ".", "update_step", ")", "+", "'.updatelr'", "+", "str", "(", "args", ".", "update_lr", ")", "\n", "model_path", "=", "args", ".", "logdir", "+", "'/'", "+", "exp_string", "\n", "model_file", "=", "None", "\n", "\n", "if", "args", ".", "train", "==", "'True'", ":", "\n", "        ", "if", "not", "os", ".", "path", ".", "exists", "(", "model_path", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "model_path", ")", "\n", "print", "(", "\"logs directory \"", ",", "args", ".", "logdir", ",", "\" created!\"", ")", "\n", "", "writer", "=", "SummaryWriter", "(", "model_path", ")", "\n", "set_logger", "(", "os", ".", "path", ".", "join", "(", "args", ".", "logdir", ",", "'train.log'", ")", ")", "\n", "train", "(", "maml", ",", "mini_train", ",", "model_path", ",", "args", ".", "resume_itr", ",", "device", ",", "writer", ")", "\n", "", "else", ":", "\n", "        ", "if", "args", ".", "test_iter", ">=", "0", ":", "\n", "            ", "model_file", "=", "model_path", "+", "'/'", "+", "'model-'", "+", "str", "(", "args", ".", "test_iter", ")", "+", "'.pth'", "\n", "test", "(", "maml", ",", "model_file", ",", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anugunjnaman_fixed-maml.None.utils.set_logger": [[3, 11], ["logging.getLogger", "logging.getLogger.setLevel", "logging.FileHandler", "logging.FileHandler.setFormatter", "logging.getLogger.addHandler", "logging.Formatter"], "function", ["None"], ["def", "set_logger", "(", "log_path", ")", ":", "\n", "    ", "logger", "=", "logging", ".", "getLogger", "(", ")", "\n", "logger", ".", "setLevel", "(", "logging", ".", "INFO", ")", "\n", "\n", "if", "not", "logger", ".", "handlers", ":", "\n", "        ", "file_handler", "=", "logging", ".", "FileHandler", "(", "log_path", ")", "\n", "file_handler", ".", "setFormatter", "(", "logging", ".", "Formatter", "(", "'%(asctime)s:%(levelname)s:%(message)s'", ")", ")", "\n", "logger", ".", "addHandler", "(", "file_handler", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.anugunjnaman_fixed-maml.None.learner.Learner.__init__": [[7, 64], ["torch.nn.Module.__init__", "torch.nn.ParameterList", "torch.nn.ParameterList", "enumerate", "torch.nn.Parameter", "torch.nn.init.xavier_uniform_", "learner.Learner.vars.append", "learner.Learner.vars.append", "torch.ones", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.init.xavier_uniform_", "learner.Learner.vars.append", "learner.Learner.vars.append", "torch.zeros", "torch.ones", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.init.xavier_uniform_", "learner.Learner.vars.append", "learner.Learner.vars.append", "torch.zeros", "torch.ones", "torch.nn.Parameter", "torch.nn.Parameter", "learner.Learner.vars.append", "learner.Learner.vars.append", "torch.nn.Parameter", "torch.nn.Parameter", "learner.Learner.vars_bn.extend", "torch.zeros", "torch.ones", "torch.nn.Parameter", "torch.zeros", "torch.ones", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.anugunjnaman_fixed-maml.None.learner.Learner.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "imgc", ",", "imgsz", ")", ":", "\n", "        ", "\"\"\"\n        :param config: network config file, type:list of (string, list)\n        :param imgc: 1 or 3\n        :param imgsz:  28 or 84\n        \"\"\"", "\n", "super", "(", "Learner", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "config", "=", "config", "\n", "self", ".", "vars", "=", "nn", ".", "ParameterList", "(", ")", "\n", "self", ".", "vars_bn", "=", "nn", ".", "ParameterList", "(", ")", "\n", "for", "i", ",", "(", "name", ",", "param", ")", "in", "enumerate", "(", "self", ".", "config", ")", ":", "\n", "            ", "if", "name", "is", "'conv2d'", ":", "\n", "# [ch_out, ch_in, kernelsz, kernelsz]", "\n", "                ", "w", "=", "nn", ".", "Parameter", "(", "torch", ".", "ones", "(", "*", "param", "[", ":", "4", "]", ")", ")", "\n", "# gain=1 according to cbfin's implementation", "\n", "#torch.nn.init.kaiming_normal_(w)", "\n", "torch", ".", "nn", ".", "init", ".", "xavier_uniform_", "(", "w", ")", "\n", "self", ".", "vars", ".", "append", "(", "w", ")", "\n", "# [ch_out]", "\n", "self", ".", "vars", ".", "append", "(", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "param", "[", "0", "]", ")", ")", ")", "\n", "\n", "", "elif", "name", "is", "'convt2d'", ":", "\n", "# [ch_in, ch_out, kernelsz, kernelsz, stride, padding]", "\n", "                ", "w", "=", "nn", ".", "Parameter", "(", "torch", ".", "ones", "(", "*", "param", "[", ":", "4", "]", ")", ")", "\n", "# gain=1 according to cbfin's implementation", "\n", "#torch.nn.init.kaiming_normal_(w)", "\n", "torch", ".", "nn", ".", "init", ".", "xavier_uniform_", "(", "w", ")", "\n", "self", ".", "vars", ".", "append", "(", "w", ")", "\n", "# [ch_in, ch_out]", "\n", "self", ".", "vars", ".", "append", "(", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "param", "[", "1", "]", ")", ")", ")", "\n", "\n", "", "elif", "name", "is", "'linear'", ":", "\n", "# [ch_out, ch_in]", "\n", "                ", "w", "=", "nn", ".", "Parameter", "(", "torch", ".", "ones", "(", "*", "param", ")", ")", "\n", "# gain=1 according to cbfinn's implementation", "\n", "#torch.nn.init.kaiming_normal_(w)", "\n", "torch", ".", "nn", ".", "init", ".", "xavier_uniform_", "(", "w", ")", "\n", "self", ".", "vars", ".", "append", "(", "w", ")", "\n", "# [ch_out]", "\n", "self", ".", "vars", ".", "append", "(", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "param", "[", "0", "]", ")", ")", ")", "\n", "\n", "", "elif", "name", "is", "'bn'", ":", "\n", "# [ch_out]", "\n", "                ", "w", "=", "nn", ".", "Parameter", "(", "torch", ".", "ones", "(", "param", "[", "0", "]", ")", ")", "\n", "self", ".", "vars", ".", "append", "(", "w", ")", "\n", "# [ch_out]", "\n", "self", ".", "vars", ".", "append", "(", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "param", "[", "0", "]", ")", ")", ")", "\n", "# must set requires_grad=False", "\n", "running_mean", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "param", "[", "0", "]", ")", ",", "requires_grad", "=", "False", ")", "\n", "running_var", "=", "nn", ".", "Parameter", "(", "torch", ".", "ones", "(", "param", "[", "0", "]", ")", ",", "requires_grad", "=", "False", ")", "\n", "self", ".", "vars_bn", ".", "extend", "(", "[", "running_mean", ",", "running_var", "]", ")", "\n", "\n", "", "elif", "name", "in", "[", "'tanh'", ",", "'relu'", ",", "'upsample'", ",", "'avg_pool2d'", ",", "'max_pool2d'", ",", "\n", "'flatten'", ",", "'reshape'", ",", "'leakyrelu'", ",", "'sigmoid'", ",", "'dropout'", "]", ":", "\n", "                ", "continue", "\n", "", "else", ":", "\n", "                ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.anugunjnaman_fixed-maml.None.learner.Learner.extra_repr": [[65, 106], ["str", "tuple"], "methods", ["None"], ["", "", "", "def", "extra_repr", "(", "self", ")", ":", "\n", "        ", "info", "=", "''", "\n", "for", "name", ",", "param", "in", "self", ".", "config", ":", "\n", "\n", "            ", "if", "name", "==", "'conv2d'", ":", "\n", "                ", "tmp", "=", "'conv2d:(ch_in:%d, ch_out:%d, k:%dx%d, stride:%d, padding:%d)'", "%", "(", "param", "[", "1", "]", ",", "param", "[", "0", "]", ",", "param", "[", "2", "]", ",", "param", "[", "3", "]", ",", "param", "[", "4", "]", ",", "param", "[", "5", "]", ",", ")", "\n", "info", "+=", "tmp", "+", "'\\n'", "\n", "\n", "", "elif", "name", "==", "'convt2d'", ":", "\n", "                ", "tmp", "=", "'convTranspose2d:(ch_in:%d, ch_out:%d, k:%dx%d, stride:%d, padding:%d)'", "%", "(", "param", "[", "0", "]", ",", "param", "[", "1", "]", ",", "param", "[", "2", "]", ",", "param", "[", "3", "]", ",", "param", "[", "4", "]", ",", "param", "[", "5", "]", ",", ")", "\n", "info", "+=", "tmp", "+", "'\\n'", "\n", "\n", "", "elif", "name", "==", "'linear'", ":", "\n", "                ", "tmp", "=", "'linear:(in:%d, out:%d)'", "%", "(", "param", "[", "1", "]", ",", "param", "[", "0", "]", ")", "\n", "info", "+=", "tmp", "+", "'\\n'", "\n", "\n", "", "elif", "name", "==", "'leakyrelu'", ":", "\n", "                ", "tmp", "=", "'leakyrelu:(slope:%f)'", "%", "(", "param", "[", "0", "]", ")", "\n", "info", "+=", "tmp", "+", "'\\n'", "\n", "\n", "", "elif", "name", "==", "'dropout'", ":", "\n", "                ", "tmp", "=", "'dropout:(dropout_rate:%f)'", "%", "(", "param", "[", "0", "]", ")", "\n", "info", "+=", "tmp", "+", "'\\n'", "\n", "\n", "", "elif", "name", "==", "'avg_pool2d'", ":", "\n", "                ", "tmp", "=", "'avg_pool2d:(k:%d, stride:%d, padding:%d)'", "%", "(", "param", "[", "0", "]", ",", "param", "[", "1", "]", ",", "param", "[", "2", "]", ")", "\n", "info", "+=", "tmp", "+", "'\\n'", "\n", "\n", "", "elif", "name", "==", "'max_pool2d'", ":", "\n", "                ", "tmp", "=", "'max_pool2d:(k:%d, stride:%d, padding:%d)'", "%", "(", "param", "[", "0", "]", ",", "param", "[", "1", "]", ",", "param", "[", "2", "]", ")", "\n", "info", "+=", "tmp", "+", "'\\n'", "\n", "\n", "", "elif", "name", "in", "[", "'flatten'", ",", "'tanh'", ",", "'relu'", ",", "'upsample'", ",", "'reshape'", ",", "'sigmoid'", ",", "'use_logits'", ",", "'bn'", "]", ":", "\n", "                ", "tmp", "=", "name", "+", "':'", "+", "str", "(", "tuple", "(", "param", ")", ")", "\n", "info", "+=", "tmp", "+", "'\\n'", "\n", "", "else", ":", "\n", "                ", "raise", "NotImplementedError", "\n", "\n", "", "", "return", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.anugunjnaman_fixed-maml.None.learner.Learner.forward": [[107, 179], ["torch.nn.functional.conv2d", "torch.nn.functional.conv_transpose2d", "torch.nn.functional.linear", "torch.nn.functional.batch_norm", "torch.nn.functional.avg_pool2d.view", "torch.nn.functional.avg_pool2d.size", "torch.nn.functional.avg_pool2d.view", "torch.nn.functional.avg_pool2d.size", "torch.nn.functional.relu", "torch.nn.functional.leaky_relu", "torch.nn.functional.tanh", "torch.sigmoid", "torch.nn.functional.upsample_nearest", "torch.nn.functional.dropout", "torch.nn.functional.max_pool2d", "torch.nn.functional.avg_pool2d"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "vars", "=", "None", ",", "dropout_training", "=", "True", ",", "bn_training", "=", "True", ")", ":", "\n", "        ", "\"\"\"\n        This function can be called by finetunning, however, in finetunning, we dont wish to update\n        running_mean/running_var. Thought weights/bias of bn is updated, it has been separated by fast_weights.\n        Indeed, to not update running_mean/running_var, we need set update_bn_statistics=False\n        but weight/bias will be updated and not dirty initial theta parameters via fast_weiths.\n        :param x: [b, 1, 28, 28]\n        :param vars:\n        :param bn_training: set False to not update\n        :return: x, loss, likelihood, kld\n        \"\"\"", "\n", "\n", "if", "vars", "is", "None", ":", "\n", "            ", "vars", "=", "self", ".", "vars", "\n", "\n", "", "idx", "=", "0", "\n", "bn_idx", "=", "0", "\n", "\n", "for", "name", ",", "param", "in", "self", ".", "config", ":", "\n", "            ", "if", "name", "==", "'conv2d'", ":", "\n", "                ", "w", ",", "b", "=", "vars", "[", "idx", "]", ",", "vars", "[", "idx", "+", "1", "]", "\n", "# remember to keep synchrozied of forward_encoder and forward_decoder!", "\n", "x", "=", "F", ".", "conv2d", "(", "x", ",", "w", ",", "b", ",", "stride", "=", "param", "[", "4", "]", ",", "padding", "=", "param", "[", "5", "]", ")", "\n", "idx", "+=", "2", "\n", "# print(name, param, '\\tout:', x.shape)", "\n", "", "elif", "name", "==", "'convt2d'", ":", "\n", "                ", "w", ",", "b", "=", "vars", "[", "idx", "]", ",", "vars", "[", "idx", "+", "1", "]", "\n", "# remember to keep synchrozied of forward_encoder and forward_decoder!", "\n", "x", "=", "F", ".", "conv_transpose2d", "(", "x", ",", "w", ",", "b", ",", "stride", "=", "param", "[", "4", "]", ",", "padding", "=", "param", "[", "5", "]", ")", "\n", "idx", "+=", "2", "\n", "# print(name, param, '\\tout:', x.shape)", "\n", "", "elif", "name", "==", "'linear'", ":", "\n", "                ", "w", ",", "b", "=", "vars", "[", "idx", "]", ",", "vars", "[", "idx", "+", "1", "]", "\n", "x", "=", "F", ".", "linear", "(", "x", ",", "w", ",", "b", ")", "\n", "idx", "+=", "2", "\n", "# print('forward:', idx, x.norm().item())", "\n", "", "elif", "name", "==", "'bn'", ":", "\n", "                ", "w", ",", "b", "=", "vars", "[", "idx", "]", ",", "vars", "[", "idx", "+", "1", "]", "\n", "running_mean", ",", "running_var", "=", "self", ".", "vars_bn", "[", "bn_idx", "]", ",", "self", ".", "vars_bn", "[", "bn_idx", "+", "1", "]", "\n", "x", "=", "F", ".", "batch_norm", "(", "x", ",", "running_mean", ",", "running_var", ",", "weight", "=", "w", ",", "bias", "=", "b", ",", "training", "=", "bn_training", ")", "\n", "idx", "+=", "2", "\n", "bn_idx", "+=", "2", "\n", "\n", "", "elif", "name", "==", "'flatten'", ":", "\n", "# print(x.shape)", "\n", "                ", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "#x = F.mean(x, [1, 2])", "\n", "", "elif", "name", "==", "'reshape'", ":", "\n", "# [b, 8] => [b, 2, 2, 2]", "\n", "                ", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "*", "param", ")", "\n", "", "elif", "name", "==", "'relu'", ":", "\n", "                ", "x", "=", "F", ".", "relu", "(", "x", ",", "inplace", "=", "param", "[", "0", "]", ")", "\n", "", "elif", "name", "==", "'leakyrelu'", ":", "\n", "                ", "x", "=", "F", ".", "leaky_relu", "(", "x", ",", "negative_slope", "=", "param", "[", "0", "]", ",", "inplace", "=", "param", "[", "1", "]", ")", "\n", "", "elif", "name", "==", "'tanh'", ":", "\n", "                ", "x", "=", "F", ".", "tanh", "(", "x", ")", "\n", "", "elif", "name", "==", "'sigmoid'", ":", "\n", "                ", "x", "=", "torch", ".", "sigmoid", "(", "x", ")", "\n", "", "elif", "name", "==", "'upsample'", ":", "\n", "                ", "x", "=", "F", ".", "upsample_nearest", "(", "x", ",", "scale_factor", "=", "param", "[", "0", "]", ")", "\n", "", "elif", "name", "==", "'dropout'", ":", "\n", "                ", "x", "=", "F", ".", "dropout", "(", "x", ",", "p", "=", "param", "[", "0", "]", ",", "training", "=", "dropout_training", ")", "\n", "", "elif", "name", "==", "'max_pool2d'", ":", "\n", "                ", "x", "=", "F", ".", "max_pool2d", "(", "x", ",", "param", "[", "0", "]", ",", "param", "[", "1", "]", ",", "param", "[", "2", "]", ")", "\n", "", "elif", "name", "==", "'avg_pool2d'", ":", "\n", "                ", "x", "=", "F", ".", "avg_pool2d", "(", "x", ",", "param", "[", "0", "]", ",", "param", "[", "1", "]", ",", "param", "[", "2", "]", ")", "\n", "", "else", ":", "\n", "                ", "raise", "NotImplementedError", "\n", "# make sure variable is used properly", "\n", "#assert idx == len(vars)", "\n", "#assert bn_idx == len(self.vars_bn)", "\n", "", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.anugunjnaman_fixed-maml.None.learner.Learner.zero_grad": [[180, 194], ["torch.no_grad", "p.grad.zero_", "p.grad.zero_"], "methods", ["None"], ["", "def", "zero_grad", "(", "self", ",", "vars", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        :param vars:\n        :return:\n        \"\"\"", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "if", "vars", "is", "None", ":", "\n", "                ", "for", "p", "in", "self", ".", "vars", ":", "\n", "                    ", "if", "p", ".", "grad", "is", "not", "None", ":", "\n", "                        ", "p", ".", "grad", ".", "zero_", "(", ")", "\n", "", "", "", "else", ":", "\n", "                ", "for", "p", "in", "vars", ":", "\n", "                    ", "if", "p", ".", "grad", "is", "not", "None", ":", "\n", "                        ", "p", ".", "grad", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anugunjnaman_fixed-maml.None.learner.Learner.parameters": [[195, 201], ["None"], "methods", ["None"], ["", "", "", "", "", "def", "parameters", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        override this function since initial parameters will return with a generator.\n        :return:\n        \"\"\"", "\n", "return", "self", ".", "vars", "\n", "\n"]]}