{"home.repos.pwc.inspect_result.DreamingRaven_python-reseal.None.setup.get_gitVersion": [[16, 37], ["subprocess.Popen", "subprocess.check_output", "subprocess.Popen.wait", "subprocess.check_output.decode().strip", "subprocess.check_output.decode"], "function", ["None"], ["def", "get_gitVersion", "(", ")", ":", "\n", "    ", "\"\"\"Get the version from git describe in archlinux format.\"\"\"", "\n", "try", ":", "\n", "# getting version from git as this is vcs", "\n", "# below equivelant or achlinux versioning scheme:", "\n", "# git describe --long | sed 's/\\([^-]*-\\)g/r\\1/;s/-/./g", "\n", "        ", "git_describe", "=", "subprocess", ".", "Popen", "(", "\n", "[", "\"git\"", ",", "\"describe\"", ",", "\"--long\"", "]", ",", "\n", "stdout", "=", "subprocess", ".", "PIPE", ")", "\n", "version_num", "=", "subprocess", ".", "check_output", "(", "\n", "[", "\"sed\"", ",", "r\"s/\\([^-]*-\\)g/r\\1/;s/-/./g\"", "]", ",", "\n", "stdin", "=", "git_describe", ".", "stdout", ")", "\n", "git_describe", ".", "wait", "(", ")", "\n", "version_git", "=", "version_num", ".", "decode", "(", "\"ascii\"", ")", ".", "strip", "(", ")", "\n", "\n", "", "except", "subprocess", ".", "CalledProcessError", ":", "\n", "# for those who do not have git or sed availiable (probably non-linux)", "\n", "# this is tricky to handle, lots of suggestions exist but none that", "\n", "# neither require additional library or subprocessess", "\n", "        ", "version_git", "=", "\"0.0.1\"", "# for now we will provide a number for you", "\n", "", "return", "version_git", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.None.setup.get_requirements": [[39, 91], ["list", "enumerate", "open", "f.read().splitlines", "map", "print", "content.group", "dependency_links.append", "f.read", "re.search", "content.group", "content.group"], "function", ["home.repos.pwc.inspect_result.DreamingRaven_python-reseal.graph.dll.DLL.append", "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.graph.dll.DLL.search"], ["", "def", "get_requirements", "(", "path", "=", "None", ")", ":", "\n", "    ", "\"\"\"get a list of requirements and any dependency links associated.\n\n    This function fascilitates git urls being in requirements.txt\n    and installing them as normall just like pip install -r requirements.txt\n    would but setup does not by default.\n\n    :e.g requirements.txt\\::\n\n        ConfigArgParse\n        git+https://github.com/DreamingRaven/python-ezdb.git#branch=master\n\n    should result in\n\n    :requirements\\::\n\n        [\n            ConfigArgParse\n            python-ezdb\n        ]\n\n    : dependenc links\\::\n\n        [\"git+https://github.com/DreamingRaven/python-ezdb.git#egg=python-ezdb\"]\n\n    version can also be appended but that may break compatibility with\n    pip install -r requirements.txt so we will not attempt that here but would\n    look something like this:\n\n    \"git+https://github.com/DreamingRaven/python-ezdb.git#egg=python-ezdb-0.0.1\"\n    \"\"\"", "\n", "dependency_links", "=", "[", "]", "\n", "\n", "#  read in the requirements file", "\n", "path", "=", "path", "if", "path", "is", "not", "None", "else", "\"./requirements.txt\"", "\n", "with", "open", "(", "path", ",", "\"r\"", ")", "as", "f", ":", "\n", "        ", "requirements", "=", "f", ".", "read", "(", ")", ".", "splitlines", "(", ")", "\n", "\n", "# apply regex to find all desired groups like package name and url", "\n", "", "re_git_url", "=", "r\"^\\bgit.+/(.+)\\.git\"", "\n", "re_groups", "=", "list", "(", "map", "(", "lambda", "x", ":", "re", ".", "search", "(", "re_git_url", ",", "x", ")", ",", "requirements", ")", ")", "\n", "\n", "# iterate over regex and select package name group to insert over url", "\n", "for", "i", ",", "content", "in", "enumerate", "(", "re_groups", ")", ":", "\n", "# re.search can return None so only if it returned something", "\n", "        ", "if", "(", "content", ")", ":", "\n", "            ", "print", "(", "i", ",", "content", ",", "requirements", "[", "i", "]", ")", "\n", "requirements", "[", "i", "]", "=", "content", ".", "group", "(", "1", ")", "\n", "dependency_links", ".", "append", "(", "\"{}#egg={}\"", ".", "format", "(", "content", ".", "group", "(", "0", ")", ",", "\n", "content", ".", "group", "(", "1", ")", ")", ")", "\n", "\n", "", "", "return", "requirements", ",", "dependency_links", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.recache.ReCache.__init__": [[19, 25], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "enable", "=", "None", ")", ":", "\n", "        ", "\"\"\"Object caching.\n\n        If enabled will cache all ReSeal objects not already stored,\n        to avoid having to regenrate them.\"\"\"", "\n", "self", ".", "enabled", "=", "enable", "if", "enable", "is", "not", "None", "else", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.recache.ReCache.context": [[32, 35], ["None"], "methods", ["None"], ["", "@", "context", ".", "setter", "\n", "def", "context", "(", "self", ",", "context", ")", ":", "\n", "        ", "self", ".", "_context", "=", "context", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.recache.ReCache.keygen": [[42, 45], ["None"], "methods", ["None"], ["", "@", "keygen", ".", "setter", "\n", "def", "keygen", "(", "self", ",", "keygen", ")", ":", "\n", "        ", "self", ".", "_keygen", "=", "keygen", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.recache.ReCache.encoder": [[52, 55], ["None"], "methods", ["None"], ["", "@", "encoder", ".", "setter", "\n", "def", "encoder", "(", "self", ",", "encoder", ")", ":", "\n", "        ", "self", ".", "_encoder", "=", "encoder", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.recache.ReCache.encryptor": [[62, 65], ["None"], "methods", ["None"], ["", "@", "encryptor", ".", "setter", "\n", "def", "encryptor", "(", "self", ",", "encryptor", ")", ":", "\n", "        ", "self", ".", "_encryptor", "=", "encryptor", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.recache.ReCache.evaluator": [[72, 75], ["None"], "methods", ["None"], ["", "@", "evaluator", ".", "setter", "\n", "def", "evaluator", "(", "self", ",", "evaluator", ")", ":", "\n", "        ", "self", ".", "_evaluator", "=", "evaluator", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.recache.ReCache.decryptor": [[82, 85], ["None"], "methods", ["None"], ["", "@", "decryptor", ".", "setter", "\n", "def", "decryptor", "(", "self", ",", "decryptor", ")", ":", "\n", "        ", "self", ".", "_decryptor", "=", "decryptor", "\n", "", "", ""]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.__init___test.FHEz_Test.setUp": [[13, 16], ["time.time"], "methods", ["None"], ["def", "setUp", "(", "self", ")", ":", "\n", "        ", "\"\"\"Start timer and init variables.\"\"\"", "\n", "self", ".", "startTime", "=", "time", ".", "time", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.__init___test.FHEz_Test.tearDown": [[17, 21], ["print", "time.time", "__init___test.FHEz_Test.id"], "methods", ["None"], ["", "def", "tearDown", "(", "self", ")", ":", "\n", "        ", "\"\"\"Calculate and print time delta.\"\"\"", "\n", "t", "=", "time", ".", "time", "(", ")", "-", "self", ".", "startTime", "\n", "print", "(", "'%s: %.3f'", "%", "(", "self", ".", "id", "(", ")", ",", "t", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.__init___test.FHEz_Test.test_import": [[22, 25], ["None"], "methods", ["None"], ["", "def", "test_import", "(", "self", ")", ":", "\n", "        ", "\"\"\"Test basic import of FHEZ.\"\"\"", "\n", "import", "fhez", "\n", "", "", ""]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.rearray_test.ReArray_tests.setUp": [[16, 24], ["time.time", "pow"], "methods", ["None"], ["def", "setUp", "(", "self", ")", ":", "\n", "        ", "self", ".", "startTime", "=", "time", ".", "time", "(", ")", "\n", "self", ".", "reseal_args", "=", "{", "\n", "\"scheme\"", ":", "seal", ".", "scheme_type", ".", "CKKS", ",", "\n", "\"poly_modulus_degree\"", ":", "8192", ",", "\n", "\"coefficient_modulus\"", ":", "[", "60", ",", "40", ",", "40", ",", "60", "]", ",", "\n", "\"scale\"", ":", "pow", "(", "2.0", ",", "40", ")", ",", "\n", "\"cache\"", ":", "True", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.rearray_test.ReArray_tests.tearDown": [[26, 29], ["print", "time.time", "rearray_test.ReArray_tests.id"], "methods", ["None"], ["", "def", "tearDown", "(", "self", ")", ":", "\n", "        ", "t", "=", "time", ".", "time", "(", ")", "-", "self", ".", "startTime", "\n", "print", "(", "'%s: %.3f'", "%", "(", "self", ".", "id", "(", ")", ",", "t", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.rearray_test.ReArray_tests.arithmetic_evaluator": [[30, 41], ["rearray_test.ReArray_tests.assertIsInstance", "numpy.around().astype", "numpy.around().astype", "rearray_test.ReArray_tests.assertEqual", "print", "print", "print", "print", "numpy.around().astype.tolist", "numpy.around().astype.tolist", "numpy.around", "numpy.around", "numpy.array", "func"], "methods", ["None"], ["", "def", "arithmetic_evaluator", "(", "self", ",", "re", ",", "other", ",", "func", ",", "experiment", "=", "False", ")", ":", "\n", "        ", "self", ".", "assertIsInstance", "(", "re", ",", "ReArray", ")", "\n", "out", "=", "np", ".", "around", "(", "np", ".", "array", "(", "re", ")", ",", "1", ")", ".", "astype", "(", "int", ")", "\n", "comparitor", "=", "np", ".", "around", "(", "func", "(", "self", ".", "data", ",", "other", ")", ")", ".", "astype", "(", "int", ")", "\n", "if", "experiment", ":", "\n", "            ", "print", "(", "\"out:{}, comparitor:{}\"", ".", "format", "(", "out", ".", "shape", ",", "comparitor", ".", "shape", ")", ")", "\n", "print", "(", "\"origin\"", ",", "self", ".", "data", ")", "\n", "print", "(", "\"out:\"", ",", "out", ")", "\n", "print", "(", "\"comparitor:\"", ",", "comparitor", ")", "\n", "", "self", ".", "assertEqual", "(", "out", ".", "tolist", "(", ")", ",", "\n", "comparitor", ".", "tolist", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.rearray_test.ReArray_tests.test_numpy_bug": [[42, 46], ["numpy.around().tolist", "numpy.around().tolist", "rearray_test.ReArray_tests.assertEqual", "numpy.around", "numpy.around", "numpy.add", "numpy.add"], "methods", ["home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.rearray.ReArray.add", "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.rearray.ReArray.add"], ["", "def", "test_numpy_bug", "(", "self", ")", ":", "\n", "        ", "a", "=", "np", ".", "around", "(", "np", ".", "add", "(", "self", ".", "data", ",", "self", ".", "data", ")", ")", ".", "tolist", "(", ")", "\n", "b", "=", "np", ".", "around", "(", "np", ".", "add", "(", "self", ".", "data", ",", "self", ".", "data", ")", ")", ".", "tolist", "(", ")", "\n", "self", ".", "assertEqual", "(", "a", ",", "b", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.rearray_test.ReArray_tests.data": [[47, 52], ["numpy.arange"], "methods", ["None"], ["", "@", "property", "\n", "def", "data", "(", "self", ")", ":", "\n", "        ", "array", "=", "np", ".", "arange", "(", "64", "*", "32", "*", "32", "*", "3", ")", "\n", "array", ".", "shape", "=", "(", "64", ",", "32", ",", "32", ",", "3", ")", "\n", "return", "array", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.rearray_test.ReArray_tests.test_object_creation": [[53, 57], ["fhez.rearray.ReArray", "rearray_test.ReArray_tests.assertIsInstance"], "methods", ["None"], ["", "def", "test_object_creation", "(", "self", ")", ":", "\n", "        ", "\"\"\"Checking that the object creation is completed properly.\"\"\"", "\n", "re", "=", "ReArray", "(", "plaintext", "=", "self", ".", "data", ",", "**", "self", ".", "reseal_args", ")", "\n", "self", ".", "assertIsInstance", "(", "re", ",", "ReArray", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.rearray_test.ReArray_tests.test_error_slot_overflow": [[58, 64], ["numpy.arange", "rearray_test.ReArray_tests.assertRaises", "fhez.rearray.ReArray"], "methods", ["None"], ["", "def", "test_error_slot_overflow", "(", "self", ")", ":", "\n", "        ", "\"\"\"Testing that correctly errors when the data overflows encryption.\"\"\"", "\n", "data", "=", "np", ".", "arange", "(", "64", "*", "320", "*", "320", "*", "3", ")", "\n", "data", ".", "shape", "=", "(", "64", ",", "320", ",", "320", ",", "3", ")", "# making it waay to big", "\n", "with", "self", ".", "assertRaises", "(", "OverflowError", ")", ":", "\n", "            ", "ReArray", "(", "plaintext", "=", "data", ",", "**", "self", ".", "reseal_args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.rearray_test.ReArray_tests.test__error_data_type": [[65, 71], ["numpy.arange", "rearray_test.ReArray_tests.assertRaises", "fhez.rearray.ReArray", "numpy.arange.tolist"], "methods", ["None"], ["", "", "def", "test__error_data_type", "(", "self", ")", ":", "\n", "        ", "\"\"\"Testing that correctly errors when the data overflows encryption.\"\"\"", "\n", "data", "=", "np", ".", "arange", "(", "64", "*", "32", "*", "32", "*", "3", ")", "\n", "data", ".", "shape", "=", "(", "64", ",", "32", ",", "32", ",", "3", ")", "\n", "with", "self", ".", "assertRaises", "(", "TypeError", ")", ":", "\n", "            ", "ReArray", "(", "plaintext", "=", "data", ".", "tolist", "(", ")", ",", "**", "self", ".", "reseal_args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.rearray_test.ReArray_tests.test_str": [[72, 75], ["fhez.rearray.ReArray", "rearray_test.ReArray_tests.assertIsInstance", "fhez.rearray.ReArray.__str__"], "methods", ["home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.rearray.ReArray.__str__"], ["", "", "def", "test_str", "(", "self", ")", ":", "\n", "        ", "re", "=", "ReArray", "(", "plaintext", "=", "self", ".", "data", ",", "**", "self", ".", "reseal_args", ")", "\n", "self", ".", "assertIsInstance", "(", "re", ".", "__str__", "(", ")", ",", "str", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.rearray_test.ReArray_tests.test_repr": [[76, 79], ["fhez.rearray.ReArray", "rearray_test.ReArray_tests.assertIsInstance", "fhez.rearray.ReArray.__repr__"], "methods", ["home.repos.pwc.inspect_result.DreamingRaven_python-reseal.graph.serialise.Serialise.__repr__"], ["", "def", "test_repr", "(", "self", ")", ":", "\n", "        ", "re", "=", "ReArray", "(", "plaintext", "=", "self", ".", "data", ",", "**", "self", ".", "reseal_args", ")", "\n", "self", ".", "assertIsInstance", "(", "re", ".", "__repr__", "(", ")", ",", "str", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.rearray_test.ReArray_tests.test_decrypt": [[80, 86], ["fhez.rearray.ReArray", "fhez.rearray.ReArray.__array__", "rearray_test.ReArray_tests.assertIsInstance", "rearray_test.ReArray_tests.assertEqual"], "methods", ["home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.rearray.ReArray.__array__"], ["", "def", "test_decrypt", "(", "self", ")", ":", "\n", "        ", "\"\"\"Ensure data is intact when decrypted.\"\"\"", "\n", "re", "=", "ReArray", "(", "plaintext", "=", "self", ".", "data", ",", "**", "self", ".", "reseal_args", ")", "\n", "out", "=", "re", ".", "__array__", "(", ")", "\n", "self", ".", "assertIsInstance", "(", "out", ",", "np", ".", "ndarray", ")", "\n", "self", ".", "assertEqual", "(", "out", ".", "shape", ",", "self", ".", "data", ".", "shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.rearray_test.ReArray_tests.test_numpify": [[87, 93], ["fhez.rearray.ReArray", "numpy.array", "rearray_test.ReArray_tests.assertIsInstance", "rearray_test.ReArray_tests.assertEqual"], "methods", ["None"], ["", "def", "test_numpify", "(", "self", ")", ":", "\n", "        ", "\"\"\"Ensure data is intact when decrypted.\"\"\"", "\n", "re", "=", "ReArray", "(", "plaintext", "=", "self", ".", "data", ",", "**", "self", ".", "reseal_args", ")", "\n", "out", "=", "np", ".", "array", "(", "re", ")", "\n", "self", ".", "assertIsInstance", "(", "out", ",", "np", ".", "ndarray", ")", "\n", "self", ".", "assertEqual", "(", "out", ".", "shape", ",", "self", ".", "data", ".", "shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.rearray_test.ReArray_tests.test_pickle": [[94, 104], ["fhez.rearray.ReArray", "pickle.dumps", "pickle.loads", "rearray_test.ReArray_tests.assertIsInstance", "numpy.array", "rearray_test.ReArray_tests.assertIsInstance", "rearray_test.ReArray_tests.assertEqual"], "methods", ["None"], ["", "def", "test_pickle", "(", "self", ")", ":", "\n", "        ", "\"\"\"Ensure that pickling is still possible at this higher dimension.\"\"\"", "\n", "import", "pickle", "\n", "re", "=", "ReArray", "(", "plaintext", "=", "self", ".", "data", ",", "**", "self", ".", "reseal_args", ")", "\n", "dump", "=", "pickle", ".", "dumps", "(", "re", ")", "\n", "re", "=", "pickle", ".", "loads", "(", "dump", ")", "\n", "self", ".", "assertIsInstance", "(", "re", ",", "ReArray", ")", "\n", "out", "=", "np", ".", "array", "(", "re", ")", "\n", "self", ".", "assertIsInstance", "(", "out", ",", "np", ".", "ndarray", ")", "\n", "self", ".", "assertEqual", "(", "out", ".", "shape", ",", "self", ".", "data", ".", "shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.rearray_test.ReArray_tests.test_multiply_re": [[107, 114], ["fhez.rearray.ReArray", "func", "rearray_test.ReArray_tests.arithmetic_evaluator", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.rearray_test.ReArray_tests.arithmetic_evaluator"], ["", "def", "test_multiply_re", "(", "self", ")", ":", "\n", "        ", "\"\"\"Multiply cyphertext by cyphertext.\"\"\"", "\n", "re", "=", "ReArray", "(", "plaintext", "=", "self", ".", "data", ",", "**", "self", ".", "reseal_args", ")", "\n", "other", "=", "re", "\n", "func", "=", "np", ".", "multiply", "\n", "re", "=", "func", "(", "re", ",", "other", ")", "\n", "self", ".", "arithmetic_evaluator", "(", "re", ",", "np", ".", "array", "(", "other", ")", ",", "func", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.rearray_test.ReArray_tests.test_multiply_broadcast": [[115, 122], ["fhez.rearray.ReArray", "func", "rearray_test.ReArray_tests.arithmetic_evaluator"], "methods", ["home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.rearray_test.ReArray_tests.arithmetic_evaluator"], ["", "def", "test_multiply_broadcast", "(", "self", ")", ":", "\n", "        ", "\"\"\"Multiply cyphertext by scalar value broadcast.\"\"\"", "\n", "re", "=", "ReArray", "(", "plaintext", "=", "self", ".", "data", ",", "**", "self", ".", "reseal_args", ")", "\n", "other", "=", "2", "\n", "func", "=", "np", ".", "multiply", "\n", "re", "=", "func", "(", "re", ",", "other", ")", "\n", "self", ".", "arithmetic_evaluator", "(", "re", ",", "other", ",", "func", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.rearray_test.ReArray_tests.test_multiply_array": [[123, 130], ["fhez.rearray.ReArray", "numpy.array", "func", "rearray_test.ReArray_tests.arithmetic_evaluator"], "methods", ["home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.rearray_test.ReArray_tests.arithmetic_evaluator"], ["", "def", "test_multiply_array", "(", "self", ")", ":", "\n", "        ", "\"\"\"Multiply cyphertext by (3) numpy array.\"\"\"", "\n", "re", "=", "ReArray", "(", "plaintext", "=", "self", ".", "data", ",", "**", "self", ".", "reseal_args", ")", "\n", "other", "=", "np", ".", "array", "(", "[", "2", ",", "3", ",", "4", "]", ")", "\n", "func", "=", "np", ".", "multiply", "\n", "re", "=", "func", "(", "re", ",", "other", ")", "\n", "self", ".", "arithmetic_evaluator", "(", "re", ",", "other", ",", "func", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.rearray_test.ReArray_tests.test_multiply_broadcast_reverse": [[131, 138], ["fhez.rearray.ReArray", "func", "rearray_test.ReArray_tests.arithmetic_evaluator"], "methods", ["home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.rearray_test.ReArray_tests.arithmetic_evaluator"], ["", "def", "test_multiply_broadcast_reverse", "(", "self", ")", ":", "\n", "        ", "\"\"\"Multiply cyphertext by scalar value broadcast.\"\"\"", "\n", "re", "=", "ReArray", "(", "plaintext", "=", "self", ".", "data", ",", "**", "self", ".", "reseal_args", ")", "\n", "other", "=", "2", "\n", "func", "=", "np", ".", "multiply", "\n", "re", "=", "func", "(", "other", ",", "re", ")", "\n", "self", ".", "arithmetic_evaluator", "(", "re", ",", "other", ",", "func", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.rearray_test.ReArray_tests.test_multiply_array_reverse": [[139, 146], ["fhez.rearray.ReArray", "numpy.array", "func", "rearray_test.ReArray_tests.arithmetic_evaluator"], "methods", ["home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.rearray_test.ReArray_tests.arithmetic_evaluator"], ["", "def", "test_multiply_array_reverse", "(", "self", ")", ":", "\n", "        ", "\"\"\"Multiply cyphertext by (3) numpy array.\"\"\"", "\n", "re", "=", "ReArray", "(", "plaintext", "=", "self", ".", "data", ",", "**", "self", ".", "reseal_args", ")", "\n", "other", "=", "np", ".", "array", "(", "[", "2", ",", "3", ",", "4", "]", ")", "\n", "func", "=", "np", ".", "multiply", "\n", "re", "=", "func", "(", "other", ",", "re", ")", "\n", "self", ".", "arithmetic_evaluator", "(", "re", ",", "other", ",", "func", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.rearray_test.ReArray_tests.test_multiply_ndarray": [[147, 153], ["fhez.rearray.ReArray", "numpy.arange", "rearray_test.ReArray_tests.assertRaises"], "methods", ["None"], ["", "def", "test_multiply_ndarray", "(", "self", ")", ":", "\n", "        ", "re", "=", "ReArray", "(", "plaintext", "=", "self", ".", "data", ",", "**", "self", ".", "reseal_args", ")", "\n", "filter", "=", "np", ".", "arange", "(", "3", "*", "3", "*", "3", ")", "\n", "filter", ".", "shape", "=", "(", "3", ",", "3", ",", "3", ")", "\n", "with", "self", ".", "assertRaises", "(", "ArithmeticError", ")", ":", "\n", "            ", "re", "=", "re", "*", "filter", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.rearray_test.ReArray_tests.test_add_re": [[156, 163], ["fhez.rearray.ReArray", "func", "rearray_test.ReArray_tests.arithmetic_evaluator", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.rearray_test.ReArray_tests.arithmetic_evaluator"], ["", "", "def", "test_add_re", "(", "self", ")", ":", "\n", "        ", "\"\"\"Add cyphertext to cyphertext.\"\"\"", "\n", "re", "=", "ReArray", "(", "plaintext", "=", "self", ".", "data", ",", "**", "self", ".", "reseal_args", ")", "\n", "other", "=", "re", "\n", "func", "=", "np", ".", "add", "\n", "re", "=", "func", "(", "re", ",", "other", ")", "\n", "self", ".", "arithmetic_evaluator", "(", "re", ",", "np", ".", "array", "(", "other", ")", ",", "func", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.rearray_test.ReArray_tests.test_add_broadcast": [[164, 171], ["fhez.rearray.ReArray", "func", "rearray_test.ReArray_tests.arithmetic_evaluator"], "methods", ["home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.rearray_test.ReArray_tests.arithmetic_evaluator"], ["", "def", "test_add_broadcast", "(", "self", ")", ":", "\n", "        ", "\"\"\"Add cyphertext by scalar value broadcast.\"\"\"", "\n", "re", "=", "ReArray", "(", "plaintext", "=", "self", ".", "data", ",", "**", "self", ".", "reseal_args", ")", "\n", "other", "=", "2", "\n", "func", "=", "np", ".", "add", "\n", "re", "=", "func", "(", "re", ",", "other", ")", "\n", "self", ".", "arithmetic_evaluator", "(", "re", ",", "other", ",", "func", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.rearray_test.ReArray_tests.test_add_array": [[172, 179], ["fhez.rearray.ReArray", "numpy.array", "func", "rearray_test.ReArray_tests.arithmetic_evaluator"], "methods", ["home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.rearray_test.ReArray_tests.arithmetic_evaluator"], ["", "def", "test_add_array", "(", "self", ")", ":", "\n", "        ", "\"\"\"Add cyphertext by (3) numpy array value broadcast.\"\"\"", "\n", "re", "=", "ReArray", "(", "plaintext", "=", "self", ".", "data", ",", "**", "self", ".", "reseal_args", ")", "\n", "other", "=", "np", ".", "array", "(", "[", "2", ",", "3", ",", "4", "]", ")", "\n", "func", "=", "np", ".", "add", "\n", "re", "=", "func", "(", "re", ",", "other", ")", "\n", "self", ".", "arithmetic_evaluator", "(", "re", ",", "other", ",", "func", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.rearray_test.ReArray_tests.test_add_broadcast_reverse": [[180, 187], ["fhez.rearray.ReArray", "func", "rearray_test.ReArray_tests.arithmetic_evaluator"], "methods", ["home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.rearray_test.ReArray_tests.arithmetic_evaluator"], ["", "def", "test_add_broadcast_reverse", "(", "self", ")", ":", "\n", "        ", "\"\"\"Add cyphertext by scalar value broadcast.\"\"\"", "\n", "re", "=", "ReArray", "(", "plaintext", "=", "self", ".", "data", ",", "**", "self", ".", "reseal_args", ")", "\n", "other", "=", "2", "\n", "func", "=", "np", ".", "add", "\n", "re", "=", "func", "(", "other", ",", "re", ")", "\n", "self", ".", "arithmetic_evaluator", "(", "re", ",", "other", ",", "func", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.rearray_test.ReArray_tests.test_add_array_reverse": [[188, 195], ["fhez.rearray.ReArray", "numpy.array", "func", "rearray_test.ReArray_tests.arithmetic_evaluator"], "methods", ["home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.rearray_test.ReArray_tests.arithmetic_evaluator"], ["", "def", "test_add_array_reverse", "(", "self", ")", ":", "\n", "        ", "\"\"\"Add cyphertext by (3) numpy array value broadcast.\"\"\"", "\n", "re", "=", "ReArray", "(", "plaintext", "=", "self", ".", "data", ",", "**", "self", ".", "reseal_args", ")", "\n", "other", "=", "np", ".", "array", "(", "[", "2", ",", "3", ",", "4", "]", ")", "\n", "func", "=", "np", ".", "add", "\n", "re", "=", "func", "(", "other", ",", "re", ")", "\n", "self", ".", "arithmetic_evaluator", "(", "re", ",", "other", ",", "func", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.rearray_test.ReArray_tests.test_add_ndarray": [[196, 202], ["fhez.rearray.ReArray", "numpy.arange", "rearray_test.ReArray_tests.assertRaises"], "methods", ["None"], ["", "def", "test_add_ndarray", "(", "self", ")", ":", "\n", "        ", "re", "=", "ReArray", "(", "plaintext", "=", "self", ".", "data", ",", "**", "self", ".", "reseal_args", ")", "\n", "filter", "=", "np", ".", "arange", "(", "3", "*", "3", "*", "3", ")", "\n", "filter", ".", "shape", "=", "(", "3", ",", "3", ",", "3", ")", "\n", "with", "self", ".", "assertRaises", "(", "ArithmeticError", ")", ":", "\n", "            ", "re", "=", "re", "+", "filter", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.rearray_test.ReArray_tests.test_subtract_re": [[205, 210], ["fhez.rearray.ReArray", "rearray_test.ReArray_tests.assertRaises"], "methods", ["None"], ["", "", "def", "test_subtract_re", "(", "self", ")", ":", "\n", "        ", "\"\"\"Subtract cyphertext by cyphertext.\"\"\"", "\n", "re", "=", "ReArray", "(", "plaintext", "=", "self", ".", "data", ",", "**", "self", ".", "reseal_args", ")", "\n", "with", "self", ".", "assertRaises", "(", "TypeError", ")", ":", "\n", "            ", "re", "=", "re", "-", "re", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.rearray_test.ReArray_tests.test_subtract_broadcast": [[211, 216], ["fhez.rearray.ReArray", "rearray_test.ReArray_tests.assertRaises"], "methods", ["None"], ["", "", "def", "test_subtract_broadcast", "(", "self", ")", ":", "\n", "        ", "\"\"\"Subtract cyphertext by scalar value broadcast.\"\"\"", "\n", "re", "=", "ReArray", "(", "plaintext", "=", "self", ".", "data", ",", "**", "self", ".", "reseal_args", ")", "\n", "with", "self", ".", "assertRaises", "(", "TypeError", ")", ":", "\n", "            ", "re", "=", "re", "-", "2", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.rearray_test.ReArray_tests.test_subtract_array": [[217, 222], ["fhez.rearray.ReArray", "rearray_test.ReArray_tests.assertRaises", "numpy.array"], "methods", ["None"], ["", "", "def", "test_subtract_array", "(", "self", ")", ":", "\n", "        ", "\"\"\"Subtract cyphertext by (3) numpy array value broadcast.\"\"\"", "\n", "re", "=", "ReArray", "(", "plaintext", "=", "self", ".", "data", ",", "**", "self", ".", "reseal_args", ")", "\n", "with", "self", ".", "assertRaises", "(", "TypeError", ")", ":", "\n", "            ", "re", "=", "re", "-", "np", ".", "array", "(", "[", "2", ",", "3", ",", "4", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.rearray_test.ReArray_tests.test_subtract_broadcast_reverse": [[223, 228], ["fhez.rearray.ReArray", "rearray_test.ReArray_tests.assertRaises"], "methods", ["None"], ["", "", "def", "test_subtract_broadcast_reverse", "(", "self", ")", ":", "\n", "        ", "\"\"\"Subtract cyphertext by scalar value broadcast.\"\"\"", "\n", "re", "=", "ReArray", "(", "plaintext", "=", "self", ".", "data", ",", "**", "self", ".", "reseal_args", ")", "\n", "with", "self", ".", "assertRaises", "(", "TypeError", ")", ":", "\n", "            ", "re", "=", "2", "-", "re", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.rearray_test.ReArray_tests.test_subtract_array_reverse": [[229, 234], ["fhez.rearray.ReArray", "rearray_test.ReArray_tests.assertRaises", "numpy.array"], "methods", ["None"], ["", "", "def", "test_subtract_array_reverse", "(", "self", ")", ":", "\n", "        ", "\"\"\"Subtract cyphertext by (3) numpy array value broadcast.\"\"\"", "\n", "re", "=", "ReArray", "(", "plaintext", "=", "self", ".", "data", ",", "**", "self", ".", "reseal_args", ")", "\n", "with", "self", ".", "assertRaises", "(", "TypeError", ")", ":", "\n", "            ", "re", "=", "np", ".", "array", "(", "[", "2", ",", "3", ",", "4", "]", ")", "-", "re", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.rearray_test.ReArray_tests.test_true_divide_re": [[237, 242], ["fhez.rearray.ReArray", "rearray_test.ReArray_tests.assertRaises"], "methods", ["None"], ["", "", "def", "test_true_divide_re", "(", "self", ")", ":", "\n", "        ", "\"\"\"True divide cyphertext by cyphertext.\"\"\"", "\n", "re", "=", "ReArray", "(", "plaintext", "=", "self", ".", "data", ",", "**", "self", ".", "reseal_args", ")", "\n", "with", "self", ".", "assertRaises", "(", "TypeError", ")", ":", "\n", "            ", "re", "=", "re", "/", "re", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.rearray_test.ReArray_tests.test_true_divide_broadcast": [[243, 248], ["fhez.rearray.ReArray", "rearray_test.ReArray_tests.assertRaises"], "methods", ["None"], ["", "", "def", "test_true_divide_broadcast", "(", "self", ")", ":", "\n", "        ", "\"\"\"Divide cyphertext by scalar value broadcast.\"\"\"", "\n", "re", "=", "ReArray", "(", "plaintext", "=", "self", ".", "data", ",", "**", "self", ".", "reseal_args", ")", "\n", "with", "self", ".", "assertRaises", "(", "TypeError", ")", ":", "\n", "            ", "re", "=", "re", "/", "2", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.rearray_test.ReArray_tests.test_true_divide_array": [[249, 254], ["fhez.rearray.ReArray", "rearray_test.ReArray_tests.assertRaises", "numpy.array"], "methods", ["None"], ["", "", "def", "test_true_divide_array", "(", "self", ")", ":", "\n", "        ", "\"\"\"Divide cyphertext by (3) numpy array value broadcast.\"\"\"", "\n", "re", "=", "ReArray", "(", "plaintext", "=", "self", ".", "data", ",", "**", "self", ".", "reseal_args", ")", "\n", "with", "self", ".", "assertRaises", "(", "TypeError", ")", ":", "\n", "            ", "re", "=", "re", "/", "np", ".", "array", "(", "[", "2", ",", "3", ",", "4", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.rearray_test.ReArray_tests.test_true_divide_broadcast_reverse": [[255, 260], ["fhez.rearray.ReArray", "rearray_test.ReArray_tests.assertRaises"], "methods", ["None"], ["", "", "def", "test_true_divide_broadcast_reverse", "(", "self", ")", ":", "\n", "        ", "\"\"\"Divide cyphertext by scalar value broadcast.\"\"\"", "\n", "re", "=", "ReArray", "(", "plaintext", "=", "self", ".", "data", ",", "**", "self", ".", "reseal_args", ")", "\n", "with", "self", ".", "assertRaises", "(", "TypeError", ")", ":", "\n", "            ", "re", "=", "2", "/", "re", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.rearray_test.ReArray_tests.test_true_divide_array_reverse": [[261, 266], ["fhez.rearray.ReArray", "rearray_test.ReArray_tests.assertRaises", "numpy.array"], "methods", ["None"], ["", "", "def", "test_true_divide_array_reverse", "(", "self", ")", ":", "\n", "        ", "\"\"\"Divide cyphertext by (3) numpy array value broadcast.\"\"\"", "\n", "re", "=", "ReArray", "(", "plaintext", "=", "self", ".", "data", ",", "**", "self", ".", "reseal_args", ")", "\n", "with", "self", ".", "assertRaises", "(", "TypeError", ")", ":", "\n", "            ", "re", "=", "np", ".", "array", "(", "[", "2", ",", "3", ",", "4", "]", ")", "/", "re", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.rearray_test.ReArray_tests.test_floor_divide_re": [[269, 274], ["fhez.rearray.ReArray", "rearray_test.ReArray_tests.assertRaises"], "methods", ["None"], ["", "", "def", "test_floor_divide_re", "(", "self", ")", ":", "\n", "        ", "\"\"\"Floor divide cyphertext by cyphertext.\"\"\"", "\n", "re", "=", "ReArray", "(", "plaintext", "=", "self", ".", "data", ",", "**", "self", ".", "reseal_args", ")", "\n", "with", "self", ".", "assertRaises", "(", "TypeError", ")", ":", "\n", "            ", "re", "=", "re", "//", "re", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.rearray_test.ReArray_tests.test_floor_divide_broadcast": [[275, 280], ["fhez.rearray.ReArray", "rearray_test.ReArray_tests.assertRaises"], "methods", ["None"], ["", "", "def", "test_floor_divide_broadcast", "(", "self", ")", ":", "\n", "        ", "\"\"\"Divide cyphertext by scalar value broadcast.\"\"\"", "\n", "re", "=", "ReArray", "(", "plaintext", "=", "self", ".", "data", ",", "**", "self", ".", "reseal_args", ")", "\n", "with", "self", ".", "assertRaises", "(", "TypeError", ")", ":", "\n", "            ", "re", "=", "re", "//", "2", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.rearray_test.ReArray_tests.test_floor_divide_array": [[281, 286], ["fhez.rearray.ReArray", "rearray_test.ReArray_tests.assertRaises", "numpy.array"], "methods", ["None"], ["", "", "def", "test_floor_divide_array", "(", "self", ")", ":", "\n", "        ", "\"\"\"Divide cyphertext by (3) numpy array value broadcast.\"\"\"", "\n", "re", "=", "ReArray", "(", "plaintext", "=", "self", ".", "data", ",", "**", "self", ".", "reseal_args", ")", "\n", "with", "self", ".", "assertRaises", "(", "TypeError", ")", ":", "\n", "            ", "re", "=", "re", "//", "np", ".", "array", "(", "[", "2", ",", "3", ",", "4", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.rearray_test.ReArray_tests.test_floor_divide_broadcast_reverse": [[287, 292], ["fhez.rearray.ReArray", "rearray_test.ReArray_tests.assertRaises"], "methods", ["None"], ["", "", "def", "test_floor_divide_broadcast_reverse", "(", "self", ")", ":", "\n", "        ", "\"\"\"Divide cyphertext by scalar value broadcast.\"\"\"", "\n", "re", "=", "ReArray", "(", "plaintext", "=", "self", ".", "data", ",", "**", "self", ".", "reseal_args", ")", "\n", "with", "self", ".", "assertRaises", "(", "TypeError", ")", ":", "\n", "            ", "re", "=", "2", "//", "re", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.rearray_test.ReArray_tests.test_floor_divide_array_reverse": [[293, 298], ["fhez.rearray.ReArray", "rearray_test.ReArray_tests.assertRaises", "numpy.array"], "methods", ["None"], ["", "", "def", "test_floor_divide_array_reverse", "(", "self", ")", ":", "\n", "        ", "\"\"\"Divide cyphertext by (3) numpy array value broadcast.\"\"\"", "\n", "re", "=", "ReArray", "(", "plaintext", "=", "self", ".", "data", ",", "**", "self", ".", "reseal_args", ")", "\n", "with", "self", ".", "assertRaises", "(", "TypeError", ")", ":", "\n", "            ", "re", "=", "np", ".", "array", "(", "[", "2", ",", "3", ",", "4", "]", ")", "//", "re", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.rearray_test.ReArray_tests.test_sum": [[299, 312], ["numpy.array", "fhez.rearray.ReArray", "numpy.sum", "rearray_test.ReArray_tests.assertIsInstance", "numpy.array", "numpy.sum", "numpy.testing.assert_array_almost_equal"], "methods", ["home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.rearray.ReArray.sum", "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.rearray.ReArray.sum"], ["", "", "def", "test_sum", "(", "self", ")", ":", "\n", "        ", "data", "=", "np", ".", "array", "(", "[", "\n", "[", "1.0", ",", "2.0", ",", "3.0", "]", ",", "\n", "[", "1.0", ",", "2.0", ",", "3.0", "]", "\n", "]", ")", "\n", "re", "=", "ReArray", "(", "plaintext", "=", "data", ",", "**", "self", ".", "reseal_args", ")", "\n", "sum", "=", "np", ".", "sum", "(", "re", ",", "axis", "=", "0", ")", "# can only sum first axis", "\n", "self", ".", "assertIsInstance", "(", "sum", ",", "ReArray", ")", "\n", "plain_sum", "=", "np", ".", "array", "(", "sum", ")", "\n", "truth", "=", "np", ".", "sum", "(", "data", ",", "axis", "=", "0", ")", "\n", "np", ".", "testing", ".", "assert_array_almost_equal", "(", "plain_sum", ",", "truth", ",", "\n", "decimal", "=", "1", ",", "\n", "verbose", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.rearray_test.ReArray_tests.test_equality": [[313, 335], ["fhez.rearray.ReArray", "fhez.rearray.ReArray", "rearray_test.ReArray_tests.assertEqual", "rearray_test.ReArray_tests.assertNotEqual", "pow", "pow", "numpy.array", "numpy.array"], "methods", ["None"], ["", "def", "test_equality", "(", "self", ")", ":", "\n", "        ", "\"\"\"Check that ReArray param equality is being calculated properly.\"\"\"", "\n", "a_arg", "=", "self", ".", "reseal_args", "=", "{", "\n", "\"scheme\"", ":", "seal", ".", "scheme_type", ".", "CKKS", ",", "\n", "\"poly_modulus_degree\"", ":", "8192", ",", "\n", "\"coefficient_modulus\"", ":", "[", "60", ",", "40", ",", "40", ",", "60", "]", ",", "\n", "\"scale\"", ":", "pow", "(", "2.0", ",", "40", ")", ",", "\n", "\"cache\"", ":", "True", ",", "\n", "}", "\n", "b_arg", "=", "self", ".", "reseal_args", "=", "{", "\n", "\"scheme\"", ":", "seal", ".", "scheme_type", ".", "CKKS", ",", "\n", "\"poly_modulus_degree\"", ":", "8192", ",", "\n", "\"coefficient_modulus\"", ":", "[", "60", ",", "40", ",", "60", "]", ",", "# <-- changed this", "\n", "\"scale\"", ":", "pow", "(", "2.0", ",", "40", ")", ",", "\n", "\"cache\"", ":", "True", ",", "\n", "}", "\n", "# TODO check changing every attribute of rearray not just coef_mod", "\n", "a", "=", "ReArray", "(", "np", ".", "array", "(", "[", "1", "]", ")", ",", "**", "a_arg", ")", "\n", "b", "=", "ReArray", "(", "np", ".", "array", "(", "[", "1", "]", ")", ",", "**", "b_arg", ")", "\n", "\n", "self", ".", "assertEqual", "(", "a", ",", "a", ")", "\n", "self", ".", "assertNotEqual", "(", "a", ",", "b", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.rearray_test.ReArray_tests.test_isfinite": [[336, 347], ["fhez.rearray.ReArray", "numpy.isfinite", "numpy.isfinite", "rearray_test.ReArray_tests.assertIsInstance", "numpy.testing.assert_array_almost_equal"], "methods", ["home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.rearray.ReArray.isfinite", "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.rearray.ReArray.isfinite"], ["", "def", "test_isfinite", "(", "self", ")", ":", "\n", "        ", "\"\"\"Check that is finite gives us back results we are expecting.\"\"\"", "\n", "x", "=", "self", ".", "data", "\n", "args", "=", "self", ".", "reseal_args", "\n", "a", "=", "ReArray", "(", "x", ",", "**", "args", ")", "\n", "f_0", "=", "np", ".", "isfinite", "(", "a", ")", "\n", "f_1", "=", "np", ".", "isfinite", "(", "x", ")", "\n", "self", ".", "assertIsInstance", "(", "f_0", ",", "np", ".", "ndarray", ")", "\n", "np", ".", "testing", ".", "assert_array_almost_equal", "(", "f_0", ",", "f_1", ",", "\n", "decimal", "=", "1", ",", "\n", "verbose", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.reseal.ReSeal.__init__": [[152, 193], ["fhez.recache.ReCache"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "scheme", ":", "seal", ".", "scheme_type", "=", "None", ",", "\n", "poly_modulus_degree", ":", "int", "=", "None", ",", "\n", "coefficient_modulus", ":", "list", "=", "None", ",", "\n", "scale", ":", "int", "=", "None", ",", "\n", "parameters", ":", "seal", ".", "EncryptionParameters", "=", "None", ",", "\n", "ciphertext", ":", "seal", ".", "Ciphertext", "=", "None", ",", "\n", "public_key", ":", "seal", ".", "PublicKey", "=", "None", ",", "\n", "private_key", ":", "seal", ".", "SecretKey", "=", "None", ",", "\n", "switch_keys", ":", "seal", ".", "KSwitchKeys", "=", "None", ",", "\n", "relin_keys", ":", "seal", ".", "RelinKeys", "=", "None", ",", "\n", "galois_keys", ":", "seal", ".", "GaloisKeys", "=", "None", ",", "\n", "cache", ":", "bool", "=", "None", ")", ":", "\n", "        ", "if", "scheme", ":", "\n", "            ", "if", "scheme", "==", "1", ":", "\n", "                ", "scheme", "=", "seal", ".", "scheme_type", ".", "BFV", "\n", "", "elif", "scheme", "==", "2", ":", "\n", "                ", "scheme", "=", "seal", ".", "scheme_type", ".", "CKKS", "\n", "", "self", ".", "_scheme", "=", "scheme", "\n", "", "if", "poly_modulus_degree", ":", "\n", "            ", "self", ".", "_poly_modulus_degree", "=", "poly_modulus_degree", "\n", "", "if", "coefficient_modulus", ":", "\n", "            ", "self", ".", "_coefficient_modulus", "=", "coefficient_modulus", "\n", "", "if", "scale", ":", "\n", "            ", "self", ".", "_scale", "=", "scale", "\n", "", "if", "parameters", ":", "\n", "            ", "self", ".", "_parameters", "=", "parameters", "\n", "", "if", "ciphertext", ":", "\n", "            ", "self", ".", "_ciphertext", "=", "ciphertext", "\n", "", "if", "public_key", ":", "\n", "            ", "self", ".", "_public_key", "=", "public_key", "\n", "", "if", "private_key", ":", "\n", "            ", "self", ".", "_private_key", "=", "private_key", "\n", "", "if", "switch_keys", ":", "\n", "            ", "self", ".", "_switch_keys", "=", "switch_keys", "\n", "", "if", "relin_keys", ":", "\n", "            ", "self", ".", "_relin_keys", "=", "relin_keys", "\n", "", "if", "galois_keys", ":", "\n", "            ", "self", ".", "_galois_keys", "=", "galois_keys", "\n", "\n", "", "cache", "=", "cache", "if", "cache", "is", "not", "None", "else", "True", "\n", "self", ".", "_cache", "=", "ReCache", "(", "enable", "=", "cache", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.reseal.ReSeal.__getstate__": [[194, 206], ["reseal.ReSeal.__dict__[].__getstate__"], "methods", ["home.repos.pwc.inspect_result.DreamingRaven_python-reseal.graph.serialise.Serialise.__getstate__"], ["", "def", "__getstate__", "(", "self", ")", ":", "\n", "        ", "\"\"\"Create single unified state to allow serialisation.\"\"\"", "\n", "state", "=", "{", "}", "\n", "for", "key", "in", "self", ".", "__dict__", ":", "\n", "            ", "if", "key", "in", "[", "\"_cache\"", "]", ":", "\n", "                ", "pass", "\n", "", "elif", "key", "in", "[", "\"_poly_modulus_degree\"", ",", "\"_coefficient_modulus\"", ",", "\n", "\"_scale\"", "]", ":", "\n", "                ", "state", "[", "key", "]", "=", "self", ".", "__dict__", "[", "key", "]", "\n", "", "else", ":", "\n", "                ", "state", "[", "key", "]", "=", "self", ".", "__dict__", "[", "key", "]", ".", "__getstate__", "(", ")", "\n", "", "", "return", "state", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.reseal.ReSeal.__setstate__": [[207, 254], ["seal.scheme_type", "state.get", "state.get", "state.get", "state.get", "state.get", "state.get", "state.get", "state.get", "state.get", "state.get", "seal.EncryptionParameters", "seal.EncryptionParameters.__setstate__", "seal.Ciphertext", "state[].update", "seal.Ciphertext.__setstate__", "seal.PublicKey", "state[].update", "seal.PublicKey.__setstate__", "seal.SecretKey", "state[].update", "seal.SecretKey.__setstate__", "seal.KSwitchKeys", "state[].update", "seal.KSwitchKeys.__setstate__", "seal.RelinKeys", "state[].update", "seal.RelinKeys.__setstate__", "seal.GaloisKeys", "state[].update", "seal.GaloisKeys.__setstate__"], "methods", ["home.repos.pwc.inspect_result.DreamingRaven_python-reseal.graph.serialise.Serialise.__setstate__", "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.loss.mse.MSE.update", "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.graph.serialise.Serialise.__setstate__", "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.loss.mse.MSE.update", "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.graph.serialise.Serialise.__setstate__", "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.loss.mse.MSE.update", "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.graph.serialise.Serialise.__setstate__", "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.loss.mse.MSE.update", "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.graph.serialise.Serialise.__setstate__", "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.loss.mse.MSE.update", "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.graph.serialise.Serialise.__setstate__", "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.loss.mse.MSE.update", "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.graph.serialise.Serialise.__setstate__"], ["", "def", "__setstate__", "(", "self", ",", "state", ")", ":", "\n", "        ", "\"\"\"Rebuild all constituent objects from serialised state.\"\"\"", "\n", "# ensuring scheme type is decoded first and must always exist", "\n", "self", ".", "_scheme", "=", "seal", ".", "scheme_type", "(", "state", "[", "\"_scheme\"", "]", ")", "\n", "# the order of the dictionary is very important, we will ensure it is", "\n", "# as expected or else we may end up trying to initialise the ciphertext", "\n", "# before the context which will fail.", "\n", "if", "state", ".", "get", "(", "\"_coefficient_modulus\"", ")", ":", "\n", "            ", "self", ".", "_coefficient_modulus", "=", "state", "[", "\"_coefficient_modulus\"", "]", "\n", "", "if", "state", ".", "get", "(", "\"_poly_modulus_degree\"", ")", ":", "\n", "            ", "self", ".", "_poly_modulus_degree", "=", "state", "[", "\"_poly_modulus_degree\"", "]", "\n", "", "if", "state", ".", "get", "(", "\"_scale\"", ")", ":", "\n", "            ", "self", ".", "_scale", "=", "state", "[", "\"_scale\"", "]", "\n", "", "if", "state", ".", "get", "(", "\"_parameters\"", ")", ":", "\n", "            ", "parameters", "=", "seal", ".", "EncryptionParameters", "(", "self", ".", "_scheme", ")", "\n", "parameters", ".", "__setstate__", "(", "state", "[", "\"_parameters\"", "]", ")", "\n", "self", ".", "_parameters", "=", "parameters", "\n", "", "if", "state", ".", "get", "(", "\"_ciphertext\"", ")", ":", "\n", "            ", "ciphertext", "=", "seal", ".", "Ciphertext", "(", ")", "\n", "state", "[", "\"_ciphertext\"", "]", ".", "update", "(", "{", "\"context\"", ":", "self", ".", "context", "}", ")", "\n", "ciphertext", ".", "__setstate__", "(", "state", "[", "\"_ciphertext\"", "]", ")", "\n", "self", ".", "_ciphertext", "=", "ciphertext", "\n", "", "if", "state", ".", "get", "(", "\"_public_key\"", ")", ":", "\n", "            ", "public_key", "=", "seal", ".", "PublicKey", "(", ")", "\n", "state", "[", "\"_public_key\"", "]", ".", "update", "(", "{", "\"context\"", ":", "self", ".", "context", "}", ")", "\n", "public_key", ".", "__setstate__", "(", "state", "[", "\"_public_key\"", "]", ")", "\n", "self", ".", "_public_key", "=", "public_key", "\n", "", "if", "state", ".", "get", "(", "\"_private_key\"", ")", ":", "\n", "            ", "private_key", "=", "seal", ".", "SecretKey", "(", ")", "\n", "state", "[", "\"_private_key\"", "]", ".", "update", "(", "{", "\"context\"", ":", "self", ".", "context", "}", ")", "\n", "private_key", ".", "__setstate__", "(", "state", "[", "\"_private_key\"", "]", ")", "\n", "self", ".", "_private_key", "=", "private_key", "\n", "", "if", "state", ".", "get", "(", "\"_switch_keys\"", ")", ":", "\n", "            ", "switch_keys", "=", "seal", ".", "KSwitchKeys", "(", ")", "\n", "state", "[", "\"_switch_keys\"", "]", ".", "update", "(", "{", "\"context\"", ":", "self", ".", "context", "}", ")", "\n", "switch_keys", ".", "__setstate__", "(", "state", "[", "\"_switch_keys\"", "]", ")", "\n", "self", ".", "_switch_keys", "=", "switch_keys", "\n", "", "if", "state", ".", "get", "(", "\"_relin_keys\"", ")", ":", "\n", "            ", "relin_keys", "=", "seal", ".", "RelinKeys", "(", ")", "\n", "state", "[", "\"_relin_keys\"", "]", ".", "update", "(", "{", "\"context\"", ":", "self", ".", "context", "}", ")", "\n", "relin_keys", ".", "__setstate__", "(", "state", "[", "\"_relin_keys\"", "]", ")", "\n", "self", ".", "_relin_keys", "=", "relin_keys", "\n", "", "if", "state", ".", "get", "(", "\"_galois_keys\"", ")", ":", "\n", "            ", "galois_keys", "=", "seal", ".", "GaloisKeys", "(", ")", "\n", "state", "[", "\"_galois_keys\"", "]", ".", "update", "(", "{", "\"context\"", ":", "self", ".", "context", "}", ")", "\n", "galois_keys", ".", "__setstate__", "(", "state", "[", "\"_galois_keys\"", "]", ")", "\n", "self", ".", "_galois_keys", "=", "galois_keys", "\n", "# anything that does not match this sequence will of course", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.reseal.ReSeal.__repr__": [[258, 260], ["None"], "methods", ["None"], ["", "", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "\"{}({})\"", ".", "format", "(", "self", ".", "__class__", ".", "__name__", ",", "self", ".", "__dict__", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.reseal.ReSeal.duplicate": [[261, 272], ["reseal.ReSeal", "d.items"], "methods", ["None"], ["", "def", "duplicate", "(", "self", ")", ":", "\n", "        ", "\"\"\"Use state dict to instanciate a new ReSeal without ciphertext.\"\"\"", "\n", "# extract desired keys from out internal dictionary", "\n", "d", "=", "self", ".", "__dict__", "\n", "d", "=", "{", "k", ":", "d", "[", "k", "]", "for", "k", ",", "v", "in", "d", ".", "items", "(", ")", "if", "k", "not", "in", "(", "\"_ciphertext\"", ",", "\n", "\"_cache\"", ")", "}", "\n", "# now override new reseal object dict with the keys it should share", "\n", "new_reseal", "=", "ReSeal", "(", ")", "\n", "for", "key", "in", "d", ":", "\n", "            ", "new_reseal", ".", "__dict__", "[", "key", "]", "=", "d", "[", "key", "]", "\n", "", "return", "new_reseal", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.reseal.ReSeal.__str__": [[273, 278], ["d.items"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "d", "=", "self", ".", "__dict__", "\n", "d", "=", "{", "k", ":", "d", "[", "k", "]", "for", "k", ",", "v", "in", "d", ".", "items", "(", ")", "if", "k", "not", "in", "(", "\"_ciphertext\"", ",", "\n", "\"_cache\"", ")", "}", "\n", "return", "\"{}({})\"", ".", "format", "(", "self", ".", "__class__", ".", "__name__", ",", "d", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.reseal.ReSeal.__add__": [[281, 309], ["isinstance", "reseal.ReSeal.duplicate", "seal.Ciphertext", "isinstance", "reseal.ReSeal._homogenise_parameters", "reseal.ReSeal.evaluator.add", "reseal.ReSeal._to_plaintext", "seal.Ciphertext", "reseal.ReSeal._homogenise_parameters", "reseal.ReSeal.evaluator.add_plain"], "methods", ["home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.reseal.ReSeal.duplicate", "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.reseal.ReSeal._homogenise_parameters", "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.rearray.ReArray.add", "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.reseal.ReSeal._to_plaintext", "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.reseal.ReSeal._homogenise_parameters"], ["", "def", "__add__", "(", "self", ",", "other", ")", ":", "\n", "        ", "if", "isinstance", "(", "other", ",", "(", "ReSeal", ",", "seal", ".", "Ciphertext", ")", ")", ":", "\n", "# if adding ciphertext + ciphertext", "\n", "            ", "encrypted_result", "=", "seal", ".", "Ciphertext", "(", ")", "\n", "if", "isinstance", "(", "other", ",", "ReSeal", ")", ":", "\n", "                ", "other", "=", "other", ".", "ciphertext", "\n", "", "ciphertext", ",", "other", "=", "self", ".", "_homogenise_parameters", "(", "\n", "self", ".", "ciphertext", ",", "other", ")", "\n", "self", ".", "evaluator", ".", "add", "(", "ciphertext", ",", "\n", "other", ",", "encrypted_result", ")", "\n", "# addition of two ciphertexts does not require relinearization", "\n", "# or rescaling (by modulus swapping).", "\n", "", "else", ":", "\n", "# if adding ciphertext + numeric plaintext", "\n", "            ", "plaintext", "=", "self", ".", "_to_plaintext", "(", "other", ")", "\n", "encrypted_result", "=", "seal", ".", "Ciphertext", "(", ")", "\n", "# switching modulus chain of plaintex to ciphertexts level", "\n", "# so computation is possible", "\n", "ciphertext", ",", "plaintext", "=", "self", ".", "_homogenise_parameters", "(", "\n", "a", "=", "self", ".", "ciphertext", ",", "b", "=", "plaintext", ")", "\n", "self", ".", "evaluator", ".", "add_plain", "(", "ciphertext", ",", "plaintext", ",", "\n", "encrypted_result", ")", "\n", "# no need to drop modulus chain addition is fairly small", "\n", "# now we take this encrypted result and return it as a new reseal obj", "\n", "# so that it can be used as input to __add__ and __mult__ again", "\n", "", "new_reseal_object", "=", "self", ".", "duplicate", "(", ")", "\n", "new_reseal_object", ".", "ciphertext", "=", "encrypted_result", "\n", "return", "new_reseal_object", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.reseal.ReSeal.__mul__": [[310, 340], ["isinstance", "reseal.ReSeal.duplicate", "seal.Ciphertext", "isinstance", "reseal.ReSeal._homogenise_parameters", "reseal.ReSeal.evaluator.multiply", "reseal.ReSeal.evaluator.relinearize_inplace", "reseal.ReSeal.evaluator.rescale_to_next_inplace", "reseal.ReSeal._to_plaintext", "seal.Ciphertext", "reseal.ReSeal._homogenise_parameters", "reseal.ReSeal.evaluator.multiply_plain", "reseal.ReSeal.evaluator.rescale_to_next_inplace"], "methods", ["home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.reseal.ReSeal.duplicate", "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.reseal.ReSeal._homogenise_parameters", "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.rearray.ReArray.multiply", "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.reseal.ReSeal._to_plaintext", "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.reseal.ReSeal._homogenise_parameters"], ["", "def", "__mul__", "(", "self", ",", "other", ")", ":", "\n", "        ", "if", "isinstance", "(", "other", ",", "(", "ReSeal", ",", "seal", ".", "Ciphertext", ")", ")", ":", "\n", "# if multiplying ciphertext * ciphertext", "\n", "            ", "encrypted_result", "=", "seal", ".", "Ciphertext", "(", ")", "\n", "if", "isinstance", "(", "other", ",", "ReSeal", ")", ":", "\n", "                ", "other", "=", "other", ".", "ciphertext", "\n", "", "ciphertext", ",", "other", "=", "self", ".", "_homogenise_parameters", "(", "\n", "self", ".", "ciphertext", ",", "other", ")", "\n", "self", ".", "evaluator", ".", "multiply", "(", "ciphertext", ",", "other", ",", "encrypted_result", ")", "\n", "self", ".", "evaluator", ".", "relinearize_inplace", "(", "encrypted_result", ",", "\n", "self", ".", "relin_keys", ")", "\n", "self", ".", "evaluator", ".", "rescale_to_next_inplace", "(", "encrypted_result", ")", "\n", "", "else", ":", "\n", "# if multiplying ciphertext * numeric", "\n", "            ", "plaintext", "=", "self", ".", "_to_plaintext", "(", "other", ")", "\n", "encrypted_result", "=", "seal", ".", "Ciphertext", "(", ")", "\n", "# switching modulus chain of plaintex to ciphertexts level", "\n", "# so computation is possible", "\n", "ciphertext", ",", "plaintext", "=", "self", ".", "_homogenise_parameters", "(", "\n", "a", "=", "self", ".", "ciphertext", ",", "b", "=", "plaintext", ")", "\n", "# the computation", "\n", "self", ".", "evaluator", ".", "multiply_plain", "(", "ciphertext", ",", "\n", "plaintext", ",", "encrypted_result", ")", "\n", "# dropping one level of modulus chain to stabalise ciphertext", "\n", "self", ".", "evaluator", ".", "rescale_to_next_inplace", "(", "encrypted_result", ")", "\n", "# now we take this encrypted result and return it as a new reseal obj", "\n", "# so that it can be used as input to __add__ and __mult__ again", "\n", "", "new_reseal_object", "=", "self", ".", "duplicate", "(", ")", "\n", "new_reseal_object", ".", "ciphertext", "=", "encrypted_result", "\n", "return", "new_reseal_object", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.reseal.ReSeal.__truediv__": [[341, 344], ["ArithmeticError().with_traceback", "ArithmeticError", "sys.exc_info"], "methods", ["None"], ["", "def", "__truediv__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"You cannot divide something fully homomorphically encrypted\"\"\"", "\n", "raise", "ArithmeticError", "(", ")", ".", "with_traceback", "(", "sys", ".", "exc_info", "(", ")", "[", "2", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.reseal.ReSeal.__len__": [[345, 354], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "\"\"\"Deduce the length of the encrypted vector from its poly mod deg.\"\"\"", "\n", "# TODO ensure rigorous type casting if needed to enforce all return int", "\n", "# depending on if BFV or CKKS we can deduce the number of slots", "\n", "if", "self", ".", "scheme", "==", "seal", ".", "scheme_type", ".", "BFV", ":", "\n", "            ", "return", "self", ".", "poly_modulus_degree", "\n", "", "else", ":", "# CKKS has half as many slots as the poly modulus degree", "\n", "# here we use the special syntax // to prevent it returning a float", "\n", "            ", "return", "self", ".", "poly_modulus_degree", "//", "2", "\n", "# TODO if this fails try using the encoder.slot_count()", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.reseal.ReSeal.__radd__": [[358, 360], ["reseal.ReSeal.__add__"], "methods", ["home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.reseal.ReSeal.__add__"], ["", "", "def", "__radd__", "(", "self", ",", "other", ")", ":", "\n", "        ", "return", "self", ".", "__add__", "(", "other", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.reseal.ReSeal.__rmul__": [[361, 363], ["reseal.ReSeal.__mul__"], "methods", ["home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.reseal.ReSeal.__mul__"], ["", "def", "__rmul__", "(", "self", ",", "other", ")", ":", "\n", "        ", "return", "self", ".", "__mul__", "(", "other", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.reseal.ReSeal.new": [[366, 373], ["reseal.ReSeal", "reseal.ReSeal.__dict__.items"], "methods", ["None"], ["", "def", "new", "(", "self", ")", ":", "\n", "        ", "r", "=", "ReSeal", "(", ")", "\n", "# r.__dict__ == self.__dict__", "\n", "d", "=", "{", "\n", "k", ":", "v", "for", "(", "k", ",", "v", ")", "in", "self", ".", "__dict__", ".", "items", "(", ")", "if", "\"_ciphertext\"", "not", "in", "k", "}", "\n", "r", ".", "__dict__", "=", "d", "\n", "return", "r", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.reseal.ReSeal._homogenise_parameters": [[374, 424], ["isinstance", "isinstance", "reseal.ReSeal.context.get_context_data().chain_index", "reseal.ReSeal.context.get_context_data().chain_index", "reseal.ReSeal.evaluator.mod_switch_to", "reseal.ReSeal.evaluator.mod_switch_to", "a_new.scale", "b_new.scale", "a_new.scale", "b_new.scale", "seal.Ciphertext", "seal.Ciphertext", "b.parms_id", "a.parms_id", "isinstance", "isinstance", "reseal.ReSeal.evaluator.mod_switch_to", "reseal.ReSeal.evaluator.mod_switch_to", "ciphertext.scale", "ciphertext.scale", "plaintext.scale", "reseal.ReSeal.context.get_context_data", "reseal.ReSeal.context.get_context_data", "seal.Ciphertext", "seal.Plaintext", "a.parms_id", "a.parms_id", "isinstance", "isinstance", "reseal.ReSeal._homogenise_parameters", "TypeError", "a.parms_id", "b.parms_id"], "methods", ["home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.reseal.ReSeal.scale", "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.reseal.ReSeal.scale", "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.reseal.ReSeal.scale", "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.reseal.ReSeal.scale", "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.reseal.ReSeal.scale", "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.reseal.ReSeal.scale", "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.reseal.ReSeal.scale", "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.reseal.ReSeal._homogenise_parameters"], ["", "def", "_homogenise_parameters", "(", "self", ",", "a", ",", "b", ")", ":", "\n", "        ", "\"\"\"Function to harmonise encryption parameters between objects.\n\n        In particular this prevents:\n            ValueError: encrypted1 and encrypted2 parameter mismatch\n        which is caused by the encryption parameters such as scale, and\n        modulus chain being mismatched.\n        This function varied depending on if two ciphers or cipher and plain\n        is supplied.\n        \"\"\"", "\n", "if", "isinstance", "(", "a", ",", "seal", ".", "Ciphertext", ")", "and", "isinstance", "(", "b", ",", "seal", ".", "Ciphertext", ")", ":", "\n", "# find which one is lowest on modulus chain and swap both to that", "\n", "            ", "a_new", ",", "b_new", "=", "seal", ".", "Ciphertext", "(", ")", ",", "seal", ".", "Ciphertext", "(", ")", "\n", "a_chain_id", "=", "self", ".", "context", ".", "get_context_data", "(", "\n", "a", ".", "parms_id", "(", ")", ")", ".", "chain_index", "(", ")", "\n", "b_chain_id", "=", "self", ".", "context", ".", "get_context_data", "(", "\n", "b", ".", "parms_id", "(", ")", ")", ".", "chain_index", "(", ")", "\n", "if", "b_chain_id", "<", "a_chain_id", ":", "\n", "                ", "lowest_parms_id", "=", "b", ".", "parms_id", "(", ")", "\n", "", "else", ":", "\n", "                ", "lowest_parms_id", "=", "a", ".", "parms_id", "(", ")", "\n", "", "self", ".", "evaluator", ".", "mod_switch_to", "(", "a", ",", "lowest_parms_id", ",", "a_new", ")", "\n", "self", ".", "evaluator", ".", "mod_switch_to", "(", "b", ",", "lowest_parms_id", ",", "b_new", ")", "\n", "# lie to ms seal about scales since they SHOULD BE CLOSE!", "\n", "# TODO should happen before modulus switching where we have", "\n", "# a bigger noise budget", "\n", "a_new", ".", "scale", "(", ")", "\n", "b_new", ".", "scale", "(", ")", "\n", "a_new", ".", "scale", "(", "self", ".", "scale", ")", "\n", "b_new", ".", "scale", "(", "self", ".", "scale", ")", "\n", "return", "(", "a_new", ",", "b_new", ")", "\n", "", "elif", "isinstance", "(", "a", ",", "seal", ".", "Ciphertext", ")", "and", "isinstance", "(", "b", ",", "seal", ".", "Plaintext", ")", ":", "\n", "# swap modulus chain of plaintext to be that of ciphertext", "\n", "            ", "ciphertext", ",", "plaintext", "=", "seal", ".", "Ciphertext", "(", ")", ",", "seal", ".", "Plaintext", "(", ")", "\n", "# doing both so they are both copied exactly as each other", "\n", "# rather than one being a reference, and the other being a new obj", "\n", "self", ".", "evaluator", ".", "mod_switch_to", "(", "a", ",", "a", ".", "parms_id", "(", ")", ",", "ciphertext", ")", "\n", "self", ".", "evaluator", ".", "mod_switch_to", "(", "b", ",", "a", ".", "parms_id", "(", ")", ",", "plaintext", ")", "\n", "ciphertext", ".", "scale", "(", ")", "\n", "ciphertext", ".", "scale", "(", "self", ".", "scale", ")", "\n", "plaintext", ".", "scale", "(", ")", "\n", "return", "(", "ciphertext", ",", "plaintext", ")", "\n", "", "elif", "isinstance", "(", "b", ",", "seal", ".", "Ciphertext", ")", "and", "isinstance", "(", "a", ",", "seal", ".", "Plaintext", ")", ":", "\n", "# same as above by swapping a and b around so code is reused", "\n", "            ", "flipped_tuple", "=", "self", ".", "_homogenise_parameters", "(", "a", "=", "b", ",", "b", "=", "a", ")", "\n", "return", "(", "flipped_tuple", "[", "1", "]", ",", "flipped_tuple", "[", "0", "]", ")", "\n", "", "else", ":", "\n", "# someone has been naughty and not given this function propper", "\n", "# encryption based objects to work with.", "\n", "            ", "raise", "TypeError", "(", "\"Neither parameters are ciphertext or plaintext.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.reseal.ReSeal._to_plaintext": [[425, 441], ["seal.Plaintext", "isinstance", "isinstance", "data.tolist.tolist.tolist", "reseal.ReSeal.encoder.encode", "isinstance", "isinstance", "reseal.ReSeal.encoder.encode", "seal.DoubleVector", "reseal.ReSeal.encoder.encode"], "methods", ["None"], ["", "", "def", "_to_plaintext", "(", "self", ",", "data", ")", ":", "\n", "        ", "plaintext", "=", "seal", ".", "Plaintext", "(", ")", "\n", "if", "isinstance", "(", "data", ",", "np", ".", "ndarray", ")", ":", "\n", "            ", "data", "=", "data", ".", "tolist", "(", ")", "\n", "\n", "", "if", "isinstance", "(", "data", ",", "(", "int", ",", "float", ")", ")", ":", "\n", "            ", "self", ".", "encoder", ".", "encode", "(", "data", ",", "self", ".", "scale", ",", "plaintext", ")", "\n", "", "elif", "isinstance", "(", "data", ",", "seal", ".", "Plaintext", ")", ":", "\n", "            ", "plaintext", "=", "data", "\n", "", "elif", "isinstance", "(", "data", ",", "seal", ".", "DoubleVector", ")", ":", "\n", "            ", "vector", "=", "data", "\n", "self", ".", "encoder", ".", "encode", "(", "vector", ",", "self", ".", "scale", ",", "plaintext", ")", "\n", "", "else", ":", "\n", "            ", "vector", "=", "seal", ".", "DoubleVector", "(", "data", ")", "\n", "self", ".", "encoder", ".", "encode", "(", "vector", ",", "self", ".", "scale", ",", "plaintext", ")", "\n", "", "return", "plaintext", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.reseal.ReSeal.cache": [[442, 450], ["reseal.ReSeal.__dict__.get", "fhez.recache.ReCache"], "methods", ["None"], ["", "@", "property", "\n", "def", "cache", "(", "self", ")", ":", "\n", "        ", "\"\"\"ReCache object to store intermediaries so they arent regenerated.\"\"\"", "\n", "if", "self", ".", "__dict__", ".", "get", "(", "\"_cache\"", ")", ":", "\n", "            ", "return", "self", ".", "_cache", "\n", "", "else", ":", "\n", "            ", "self", ".", "_cache", "=", "ReCache", "(", ")", "\n", "return", "self", ".", "cache", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.reseal.ReSeal.scheme": [[460, 476], ["ValueError"], "methods", ["None"], ["", "", "@", "property", "\n", "def", "scheme", "(", "self", ")", ":", "\n", "        ", "\"\"\"Scheme represents the encryption-scheme to use.\n\n        to specify CKKS (you probably want this one):\n            ReSeal(scheme=2) OR ReSeal(scheme=seal.scheme_type.CKKS)\n        to specify BFV:\n            ReSeal(scheme=1) OR ReSeal(scheme=seal.scheme_type.BFV)\n        \"\"\"", "\n", "try", ":", "\n", "            ", "return", "self", ".", "_scheme", "\n", "", "except", "AttributeError", ":", "\n", "            ", "me", "=", "self", ".", "__class__", ".", "__name__", "\n", "raise", "ValueError", "(", "\n", "\"You fkn idiot you forgot to give {}({}=SOMETHING)\"", ".", "format", "(", "\n", "me", ",", "\"scheme\"", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.reseal.ReSeal.poly_modulus_degree": [[477, 487], ["ValueError"], "methods", ["None"], ["", "", "@", "property", "\n", "def", "poly_modulus_degree", "(", "self", ")", ":", "\n", "        ", "\"\"\"Number dictating the size of cyphertext and compuational depth.\"\"\"", "\n", "try", ":", "\n", "            ", "return", "self", ".", "_poly_modulus_degree", "\n", "", "except", "AttributeError", ":", "\n", "            ", "me", "=", "self", ".", "__class__", ".", "__name__", "\n", "raise", "ValueError", "(", "\n", "\"You fkn idiot you forgot to give {}({}=SOMETHING)\"", ".", "format", "(", "\n", "me", ",", "\"poly_modulus_degree\"", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.reseal.ReSeal.coefficient_modulus": [[488, 503], ["ValueError"], "methods", ["None"], ["", "", "@", "property", "\n", "def", "coefficient_modulus", "(", "self", ")", ":", "\n", "        ", "\"\"\"list of bit precisions of calculations.\n\n        e.g if 8192 is the poly_modulus_degree the maximum number of bits\n        in total in the coefficient modulus chain are 218.\n        if coefficient modulus is = [60, 40, 40, 60] thats 200 bits\n        \"\"\"", "\n", "try", ":", "\n", "            ", "return", "self", ".", "_coefficient_modulus", "\n", "", "except", "AttributeError", ":", "\n", "            ", "me", "=", "self", ".", "__class__", ".", "__name__", "\n", "raise", "ValueError", "(", "\n", "\"You fkn idiot you forgot to give {}({}=SOMETHING)\"", ".", "format", "(", "\n", "me", ",", "\"coefficient_modulus\"", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.reseal.ReSeal.scale": [[504, 518], ["ValueError"], "methods", ["None"], ["", "", "@", "property", "\n", "def", "scale", "(", "self", ")", ":", "\n", "        ", "\"\"\"2^x where x=bytes scale of computations, similar to a bit precision.\n\n        :example:\n            ReSeal(scale=pow(2.0, 40))\n        \"\"\"", "\n", "try", ":", "\n", "            ", "return", "self", ".", "_scale", "\n", "", "except", "AttributeError", ":", "\n", "            ", "me", "=", "self", ".", "__class__", ".", "__name__", "\n", "raise", "ValueError", "(", "\n", "\"You fkn idiot you forgot to give {}({}=SOMETHING)\"", ".", "format", "(", "\n", "me", ",", "\"scale\"", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.reseal.ReSeal.parameters": [[538, 541], ["None"], "methods", ["None"], ["", "", "@", "parameters", ".", "setter", "\n", "def", "parameters", "(", "self", ",", "parameters", ")", ":", "\n", "        ", "self", ".", "_parameters", "=", "parameters", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.reseal.ReSeal.context": [[542, 550], ["seal.SEALContext.Create"], "methods", ["None"], ["", "@", "property", "\n", "def", "context", "(", "self", ")", ":", "\n", "        ", "\"\"\"Specific context object for this particular encryption. (cached)\"\"\"", "\n", "if", "self", ".", "cache", ".", "context", ":", "\n", "            ", "return", "self", ".", "cache", ".", "context", "\n", "", "context", "=", "seal", ".", "SEALContext", ".", "Create", "(", "self", ".", "parameters", ")", "\n", "self", ".", "cache", ".", "context", "=", "context", "\n", "return", "context", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.reseal.ReSeal.key_generator": [[551, 555], ["seal.KeyGenerator"], "methods", ["None"], ["", "@", "property", "\n", "def", "key_generator", "(", "self", ")", ":", "\n", "        ", "\"\"\"Using context create key factory.\"\"\"", "\n", "return", "seal", ".", "KeyGenerator", "(", "self", ".", "context", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.reseal.ReSeal.public_key": [[572, 575], ["None"], "methods", ["None"], ["", "", "@", "public_key", ".", "setter", "\n", "def", "public_key", "(", "self", ",", "key", ")", ":", "\n", "        ", "self", ".", "_public_key", "=", "key", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.reseal.ReSeal.private_key": [[591, 594], ["None"], "methods", ["None"], ["", "", "@", "private_key", ".", "setter", "\n", "def", "private_key", "(", "self", ",", "key", ")", ":", "\n", "        ", "self", ".", "_private_key", "=", "key", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.reseal.ReSeal.relin_keys": [[610, 613], ["None"], "methods", ["None"], ["", "", "@", "relin_keys", ".", "setter", "\n", "def", "relin_keys", "(", "self", ",", "key", ")", ":", "\n", "        ", "self", ".", "_relin_keys", "=", "key", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.reseal.ReSeal.encoder": [[615, 624], ["seal.CKKSEncoder"], "methods", ["None"], ["", "@", "property", "\n", "def", "encoder", "(", "self", ")", ":", "\n", "        ", "\"\"\"Encoder to turn vector of complex to polynomial plntxt. (cached)\"\"\"", "\n", "# BFV does not use an encoder so will always be CKKS variant", "\n", "if", "self", ".", "cache", ".", "encoder", ":", "\n", "            ", "return", "self", ".", "cache", ".", "encoder", "\n", "", "encoder", "=", "seal", ".", "CKKSEncoder", "(", "self", ".", "context", ")", "\n", "self", ".", "cache", ".", "encoder", "=", "encoder", "\n", "return", "encoder", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.reseal.ReSeal.encryptor": [[625, 633], ["seal.Encryptor"], "methods", ["None"], ["", "@", "property", "\n", "def", "encryptor", "(", "self", ")", ":", "\n", "        ", "\"\"\"Encryptor of polynomial plntxt. (cached)\"\"\"", "\n", "if", "self", ".", "cache", ".", "encryptor", ":", "\n", "            ", "return", "self", ".", "cache", ".", "encryptor", "\n", "", "encryptor", "=", "seal", ".", "Encryptor", "(", "self", ".", "context", ",", "self", ".", "public_key", ")", "\n", "self", ".", "cache", ".", "encryptor", "=", "encryptor", "\n", "return", "encryptor", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.reseal.ReSeal.evaluator": [[634, 642], ["seal.Evaluator"], "methods", ["None"], ["", "@", "property", "\n", "def", "evaluator", "(", "self", ")", ":", "\n", "        ", "\"\"\"Computation evaluator of cyphertext. (cached)\"\"\"", "\n", "if", "self", ".", "cache", ".", "evaluator", ":", "\n", "            ", "return", "self", ".", "cache", ".", "evaluator", "\n", "", "evaluator", "=", "seal", ".", "Evaluator", "(", "self", ".", "context", ")", "\n", "self", ".", "cache", ".", "evaluator", "=", "evaluator", "\n", "return", "evaluator", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.reseal.ReSeal.decryptor": [[643, 651], ["seal.Decryptor"], "methods", ["None"], ["", "@", "property", "\n", "def", "decryptor", "(", "self", ")", ":", "\n", "        ", "\"\"\"Decryptor of cyphertext. (cached)\"\"\"", "\n", "if", "self", ".", "cache", ".", "decryptor", ":", "\n", "            ", "return", "self", ".", "cache", ".", "decryptor", "\n", "", "decryptor", "=", "seal", ".", "Decryptor", "(", "self", ".", "context", ",", "self", ".", "private_key", ")", "\n", "self", ".", "cache", ".", "decryptor", "=", "decryptor", "\n", "return", "decryptor", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.reseal.ReSeal.ciphertext": [[658, 670], ["isinstance", "isinstance", "reseal.ReSeal._to_plaintext", "seal.Ciphertext", "reseal.ReSeal.encryptor.encrypt"], "methods", ["home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.reseal.ReSeal._to_plaintext"], ["", "@", "ciphertext", ".", "setter", "\n", "def", "ciphertext", "(", "self", ",", "data", ")", ":", "\n", "        ", "if", "isinstance", "(", "data", ",", "seal", ".", "Ciphertext", ")", ":", "\n", "            ", "self", ".", "_ciphertext", "=", "data", "\n", "", "elif", "isinstance", "(", "data", ",", "ReSeal", ")", ":", "\n", "# compatibility so old setter \"r.ciphertext = r + 2\" still works", "\n", "            ", "self", ".", "ciphertext", "=", "data", ".", "ciphertext", "\n", "", "else", ":", "\n", "            ", "plaintext", "=", "self", ".", "_to_plaintext", "(", "data", ")", "\n", "ciphertext", "=", "seal", ".", "Ciphertext", "(", ")", "\n", "self", ".", "encryptor", ".", "encrypt", "(", "plaintext", ",", "ciphertext", ")", "\n", "self", ".", "_ciphertext", "=", "ciphertext", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.reseal.ReSeal.plaintext": [[672, 680], ["seal.Plaintext", "reseal.ReSeal.decryptor.decrypt", "seal.DoubleVector", "reseal.ReSeal.encoder.decode", "numpy.array"], "methods", ["None"], ["", "", "@", "property", "\n", "def", "plaintext", "(", "self", ")", ":", "\n", "        ", "\"\"\"Polynomial plaintext encoded from complex values.\"\"\"", "\n", "seal_plaintext", "=", "seal", ".", "Plaintext", "(", ")", "\n", "self", ".", "decryptor", ".", "decrypt", "(", "self", ".", "_ciphertext", ",", "seal_plaintext", ")", "\n", "vector_plaintext", "=", "seal", ".", "DoubleVector", "(", ")", "\n", "self", ".", "encoder", ".", "decode", "(", "seal_plaintext", ",", "vector_plaintext", ")", "\n", "return", "np", ".", "array", "(", "vector_plaintext", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.reseal._getstate_normal": [[29, 45], ["tempfile.NamedTemporaryFile", "reseal..save", "os.remove", "file.read.hex", "open", "file.read"], "function", ["home.repos.pwc.inspect_result.DreamingRaven_python-reseal.graph.dll.DLL.remove"], ["def", "_getstate_normal", "(", "self", ")", ":", "\n", "    ", "\"\"\"Create and return serialised object state.\"\"\"", "\n", "tf", "=", "tempfile", ".", "NamedTemporaryFile", "(", "prefix", "=", "\"fhe_tmp_get_\"", ",", "delete", "=", "False", ")", "\n", "self", ".", "save", "(", "tf", ".", "name", ")", "\n", "with", "open", "(", "tf", ".", "name", ",", "\"rb\"", ")", "as", "file", ":", "\n", "        ", "f", "=", "file", ".", "read", "(", ")", "\n", "", "os", ".", "remove", "(", "tf", ".", "name", ")", "\n", "# please note this is an incredibly important step!", "\n", "# SEAL uses hexidecimal encoding on its saved files so we decode the bytes", "\n", "# back into hexidecimal when we read form their files, being both smaller,", "\n", "# and more easily serialised with things like marshmallow and json", "\n", "# please do also see _setstate_normal for the encoding stage,", "\n", "# and also ReScheme class included in this repository or in this file", "\n", "f", "=", "f", ".", "hex", "(", ")", "\n", "# print(f[:32]) # print the first 32 characters of hexadecimal string", "\n", "return", "{", "\"file_contents\"", ":", "f", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.reseal._setstate_normal": [[47, 59], ["tempfile.NamedTemporaryFile", "bytes.fromhex", "d.get", "os.remove", "open", "f.write", "reseal..load", "reseal..load"], "function", ["home.repos.pwc.inspect_result.DreamingRaven_python-reseal.graph.dll.DLL.remove"], ["", "def", "_setstate_normal", "(", "self", ",", "d", ")", ":", "\n", "    ", "\"\"\"Regenerate object state from serialised object.\"\"\"", "\n", "tf", "=", "tempfile", ".", "NamedTemporaryFile", "(", "prefix", "=", "\"fhe_tmp_set_\"", ",", "delete", "=", "False", ")", "\n", "contents", "=", "bytes", ".", "fromhex", "(", "d", "[", "\"file_contents\"", "]", ")", "\n", "with", "open", "(", "tf", ".", "name", ",", "\"wb\"", ")", "as", "f", ":", "\n", "# back to bytes to write to file", "\n", "        ", "f", ".", "write", "(", "contents", ")", "\n", "", "if", "d", ".", "get", "(", "\"context\"", ")", ":", "\n", "        ", "self", ".", "load", "(", "d", "[", "\"context\"", "]", ",", "tf", ".", "name", ")", "\n", "", "else", ":", "\n", "        ", "self", ".", "load", "(", "tf", ".", "name", ")", "\n", "", "os", ".", "remove", "(", "tf", ".", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.reseal_test.ReSeal_tests.setUp": [[21, 23], ["time.time"], "methods", ["None"], ["def", "setUp", "(", "self", ")", ":", "\n", "        ", "self", ".", "startTime", "=", "time", ".", "time", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.reseal_test.ReSeal_tests.tearDown": [[24, 27], ["print", "time.time", "reseal_test.ReSeal_tests.id"], "methods", ["None"], ["", "def", "tearDown", "(", "self", ")", ":", "\n", "        ", "t", "=", "time", ".", "time", "(", ")", "-", "self", ".", "startTime", "\n", "print", "(", "'%s: %.3f'", "%", "(", "self", ".", "id", "(", ")", ",", "t", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.reseal_test.ReSeal_tests.defaults_ckks": [[28, 35], ["pow"], "methods", ["None"], ["", "def", "defaults_ckks", "(", "self", ")", ":", "\n", "        ", "return", "{", "\n", "\"scheme\"", ":", "seal", ".", "scheme_type", ".", "CKKS", ",", "\n", "\"poly_mod_deg\"", ":", "8192", ",", "\n", "\"coeff_mod\"", ":", "[", "60", ",", "40", ",", "40", ",", "60", "]", ",", "\n", "\"scale\"", ":", "pow", "(", "2.0", ",", "40", ")", ",", "\n", "\"cache\"", ":", "True", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.reseal_test.ReSeal_tests.defaults_ckks_nocache": [[37, 41], ["reseal_test.ReSeal_tests.defaults_ckks"], "methods", ["home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.reseal_test.ReSeal_tests.defaults_ckks"], ["", "def", "defaults_ckks_nocache", "(", "self", ")", ":", "\n", "        ", "options", "=", "self", ".", "defaults_ckks", "(", ")", "\n", "options", "[", "\"cache\"", "]", "=", "False", "\n", "return", "options", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.reseal_test.ReSeal_tests.gen_reseal": [[42, 51], ["fhez.reseal.ReSeal", "NotImplementedError"], "methods", ["None"], ["", "def", "gen_reseal", "(", "self", ",", "defaults", ")", ":", "\n", "        ", "if", "defaults", "[", "\"scheme\"", "]", "==", "seal", ".", "scheme_type", ".", "CKKS", ":", "\n", "            ", "r", "=", "ReSeal", "(", "scheme", "=", "defaults", "[", "\"scheme\"", "]", ",", "\n", "poly_modulus_degree", "=", "defaults", "[", "\"poly_mod_deg\"", "]", ",", "\n", "coefficient_modulus", "=", "defaults", "[", "\"coeff_mod\"", "]", ",", "\n", "scale", "=", "defaults", "[", "\"scale\"", "]", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "\"BFV default gen_reseal not implemented\"", ")", "\n", "", "return", "r", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.reseal_test.ReSeal_tests.test_init": [[52, 56], ["reseal_test.ReSeal_tests.defaults_ckks", "reseal_test.ReSeal_tests.gen_reseal", "reseal_test.ReSeal_tests.assertIsInstance"], "methods", ["home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.reseal_test.ReSeal_tests.defaults_ckks", "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.reseal_test.ReSeal_tests.gen_reseal"], ["", "def", "test_init", "(", "self", ")", ":", "\n", "        ", "defaults", "=", "self", ".", "defaults_ckks", "(", ")", "\n", "r", "=", "self", ".", "gen_reseal", "(", "defaults", ")", "\n", "self", ".", "assertIsInstance", "(", "r", ",", "ReSeal", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.reseal_test.ReSeal_tests.test_serialize_deserialize": [[57, 63], ["reseal_test.ReSeal_tests.defaults_ckks", "reseal_test.ReSeal_tests.gen_reseal", "reseal_test.ReSeal_tests.__getstate__", "fhez.reseal.ReSeal", "fhez.reseal.ReSeal.__setstate__"], "methods", ["home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.reseal_test.ReSeal_tests.defaults_ckks", "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.reseal_test.ReSeal_tests.gen_reseal", "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.graph.serialise.Serialise.__getstate__", "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.graph.serialise.Serialise.__setstate__"], ["", "def", "test_serialize_deserialize", "(", "self", ")", ":", "\n", "        ", "defaults", "=", "self", ".", "defaults_ckks", "(", ")", "\n", "r", "=", "self", ".", "gen_reseal", "(", "defaults", ")", "\n", "d", "=", "r", ".", "__getstate__", "(", ")", "\n", "r2", "=", "ReSeal", "(", ")", "\n", "r2", ".", "__setstate__", "(", "d", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.reseal_test.ReSeal_tests.test_param_property": [[64, 68], ["reseal_test.ReSeal_tests.defaults_ckks", "reseal_test.ReSeal_tests.gen_reseal", "reseal_test.ReSeal_tests.assertIsInstance"], "methods", ["home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.reseal_test.ReSeal_tests.defaults_ckks", "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.reseal_test.ReSeal_tests.gen_reseal"], ["", "def", "test_param_property", "(", "self", ")", ":", "\n", "        ", "defaults", "=", "self", ".", "defaults_ckks", "(", ")", "\n", "r", "=", "self", ".", "gen_reseal", "(", "defaults", ")", "\n", "self", ".", "assertIsInstance", "(", "r", ".", "parameters", ",", "seal", ".", "EncryptionParameters", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.reseal_test.ReSeal_tests.test_context_property": [[69, 73], ["reseal_test.ReSeal_tests.defaults_ckks", "reseal_test.ReSeal_tests.gen_reseal", "reseal_test.ReSeal_tests.assertIsInstance"], "methods", ["home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.reseal_test.ReSeal_tests.defaults_ckks", "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.reseal_test.ReSeal_tests.gen_reseal"], ["", "def", "test_context_property", "(", "self", ")", ":", "\n", "        ", "defaults", "=", "self", ".", "defaults_ckks", "(", ")", "\n", "r", "=", "self", ".", "gen_reseal", "(", "defaults", ")", "\n", "self", ".", "assertIsInstance", "(", "r", ".", "context", ",", "seal", ".", "SEALContext", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.reseal_test.ReSeal_tests.test_publickey_property": [[74, 78], ["reseal_test.ReSeal_tests.defaults_ckks", "reseal_test.ReSeal_tests.gen_reseal", "reseal_test.ReSeal_tests.assertIsInstance"], "methods", ["home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.reseal_test.ReSeal_tests.defaults_ckks", "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.reseal_test.ReSeal_tests.gen_reseal"], ["", "def", "test_publickey_property", "(", "self", ")", ":", "\n", "        ", "defaults", "=", "self", ".", "defaults_ckks", "(", ")", "\n", "r", "=", "self", ".", "gen_reseal", "(", "defaults", ")", "\n", "self", ".", "assertIsInstance", "(", "r", ".", "public_key", ",", "seal", ".", "PublicKey", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.reseal_test.ReSeal_tests.test_privatekey_property": [[79, 83], ["reseal_test.ReSeal_tests.defaults_ckks", "reseal_test.ReSeal_tests.gen_reseal", "reseal_test.ReSeal_tests.assertIsInstance"], "methods", ["home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.reseal_test.ReSeal_tests.defaults_ckks", "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.reseal_test.ReSeal_tests.gen_reseal"], ["", "def", "test_privatekey_property", "(", "self", ")", ":", "\n", "        ", "defaults", "=", "self", ".", "defaults_ckks", "(", ")", "\n", "r", "=", "self", ".", "gen_reseal", "(", "defaults", ")", "\n", "self", ".", "assertIsInstance", "(", "r", ".", "private_key", ",", "seal", ".", "SecretKey", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.reseal_test.ReSeal_tests.test_relinkeys_property": [[84, 88], ["reseal_test.ReSeal_tests.defaults_ckks", "reseal_test.ReSeal_tests.gen_reseal", "reseal_test.ReSeal_tests.assertIsInstance"], "methods", ["home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.reseal_test.ReSeal_tests.defaults_ckks", "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.reseal_test.ReSeal_tests.gen_reseal"], ["", "def", "test_relinkeys_property", "(", "self", ")", ":", "\n", "        ", "defaults", "=", "self", ".", "defaults_ckks", "(", ")", "\n", "r", "=", "self", ".", "gen_reseal", "(", "defaults", ")", "\n", "self", ".", "assertIsInstance", "(", "r", ".", "relin_keys", ",", "seal", ".", "RelinKeys", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.reseal_test.ReSeal_tests.test_ciphertext_property": [[89, 98], ["reseal_test.ReSeal_tests.defaults_ckks", "reseal_test.ReSeal_tests.gen_reseal", "reseal_test.ReSeal_tests.assertIsInstance", "reseal_test.ReSeal_tests.assertIsInstance", "numpy.array", "reseal_test.ReSeal_tests.assertIsInstance"], "methods", ["home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.reseal_test.ReSeal_tests.defaults_ckks", "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.reseal_test.ReSeal_tests.gen_reseal"], ["", "def", "test_ciphertext_property", "(", "self", ")", ":", "\n", "        ", "defaults", "=", "self", ".", "defaults_ckks", "(", ")", "\n", "r", "=", "self", ".", "gen_reseal", "(", "defaults", ")", "\n", "r", ".", "ciphertext", "=", "100", "\n", "self", ".", "assertIsInstance", "(", "r", ".", "ciphertext", ",", "seal", ".", "Ciphertext", ")", "\n", "r", ".", "ciphertext", "=", "[", "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "100", "]", "\n", "self", ".", "assertIsInstance", "(", "r", ".", "ciphertext", ",", "seal", ".", "Ciphertext", ")", "\n", "r", ".", "ciphertext", "=", "np", ".", "array", "(", "[", "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "100", "]", ")", "\n", "self", ".", "assertIsInstance", "(", "r", ".", "ciphertext", ",", "seal", ".", "Ciphertext", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.reseal_test.ReSeal_tests.test_ciphertext_add_plaintext": [[99, 110], ["reseal_test.ReSeal_tests.defaults_ckks", "reseal_test.ReSeal_tests.gen_reseal", "numpy.array", "print", "numpy.round", "reseal_test.ReSeal_tests.assertEqual", "numpy.round", "numpy.round.tolist"], "methods", ["home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.reseal_test.ReSeal_tests.defaults_ckks", "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.reseal_test.ReSeal_tests.gen_reseal"], ["", "def", "test_ciphertext_add_plaintext", "(", "self", ")", ":", "\n", "        ", "defaults", "=", "self", ".", "defaults_ckks", "(", ")", "\n", "r", "=", "self", ".", "gen_reseal", "(", "defaults", ")", "\n", "data", "=", "np", ".", "array", "(", "[", "1", ",", "2", ",", "3", "]", ")", "\n", "r", ".", "ciphertext", "=", "data", "\n", "r", ".", "ciphertext", "=", "r", "+", "2", "\n", "r", "=", "r", "+", "4", "# test return object style", "\n", "result", "=", "r", ".", "plaintext", "\n", "print", "(", "\"c+p: 6 +\"", ",", "data", ",", "\"=\"", ",", "np", ".", "round", "(", "result", "[", ":", "data", ".", "shape", "[", "0", "]", "]", ")", ")", "\n", "rounded_reshaped_result", "=", "np", ".", "round", "(", "result", "[", ":", "data", ".", "shape", "[", "0", "]", "]", ")", "\n", "self", ".", "assertEqual", "(", "(", "data", "+", "6", ")", ".", "tolist", "(", ")", ",", "rounded_reshaped_result", ".", "tolist", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.reseal_test.ReSeal_tests.test_ciphertext_add_ciphertext": [[111, 124], ["reseal_test.ReSeal_tests.defaults_ckks", "reseal_test.ReSeal_tests.gen_reseal", "numpy.array", "copy.deepcopy", "print", "numpy.round", "reseal_test.ReSeal_tests.assertEqual", "numpy.round", "numpy.round.tolist"], "methods", ["home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.reseal_test.ReSeal_tests.defaults_ckks", "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.reseal_test.ReSeal_tests.gen_reseal"], ["", "def", "test_ciphertext_add_ciphertext", "(", "self", ")", ":", "\n", "        ", "import", "copy", "\n", "defaults", "=", "self", ".", "defaults_ckks", "(", ")", "\n", "r", "=", "self", ".", "gen_reseal", "(", "defaults", ")", "\n", "data", "=", "np", ".", "array", "(", "[", "1", ",", "2", ",", "3", "]", ")", "\n", "r", ".", "ciphertext", "=", "data", "\n", "r2", "=", "copy", ".", "deepcopy", "(", "r", ")", "\n", "r", ".", "ciphertext", "=", "r", "+", "r2", "\n", "r", "=", "r", "+", "r2", "# test return object style", "\n", "result", "=", "r", ".", "plaintext", "\n", "print", "(", "\"c+c: 3 *\"", ",", "data", ",", "\"=\"", ",", "np", ".", "round", "(", "result", "[", ":", "data", ".", "shape", "[", "0", "]", "]", ")", ")", "\n", "rounded_reshaped_result", "=", "np", ".", "round", "(", "result", "[", ":", "data", ".", "shape", "[", "0", "]", "]", ")", "\n", "self", ".", "assertEqual", "(", "(", "data", "*", "3", ")", ".", "tolist", "(", ")", ",", "rounded_reshaped_result", ".", "tolist", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.reseal_test.ReSeal_tests.test_ciphertext_multiply_plaintext": [[125, 136], ["reseal_test.ReSeal_tests.defaults_ckks", "reseal_test.ReSeal_tests.gen_reseal", "numpy.array", "print", "numpy.round", "reseal_test.ReSeal_tests.assertEqual", "numpy.round", "numpy.round.tolist"], "methods", ["home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.reseal_test.ReSeal_tests.defaults_ckks", "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.reseal_test.ReSeal_tests.gen_reseal"], ["", "def", "test_ciphertext_multiply_plaintext", "(", "self", ")", ":", "\n", "        ", "defaults", "=", "self", ".", "defaults_ckks", "(", ")", "\n", "r", "=", "self", ".", "gen_reseal", "(", "defaults", ")", "\n", "data", "=", "np", ".", "array", "(", "[", "1", ",", "2", ",", "3", "]", ")", "\n", "r", ".", "ciphertext", "=", "data", "\n", "r", ".", "ciphertext", "=", "r", "*", "2", "\n", "r", "=", "r", "*", "4", "# test return object style", "\n", "result", "=", "r", ".", "plaintext", "\n", "print", "(", "\"c*p: 8 *\"", ",", "data", ",", "\"=\"", ",", "np", ".", "round", "(", "result", "[", ":", "data", ".", "shape", "[", "0", "]", "]", ")", ")", "\n", "rounded_reshaped_result", "=", "np", ".", "round", "(", "result", "[", ":", "data", ".", "shape", "[", "0", "]", "]", ")", "\n", "self", ".", "assertEqual", "(", "(", "data", "*", "8", ")", ".", "tolist", "(", ")", ",", "rounded_reshaped_result", ".", "tolist", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.reseal_test.ReSeal_tests.test_ciphertext_multiply_ciphertext": [[137, 155], ["reseal_test.ReSeal_tests.defaults_ckks", "reseal_test.ReSeal_tests.gen_reseal", "numpy.array", "copy.deepcopy", "print", "numpy.round", "numpy.testing.assert_array_almost_equal", "numpy.round"], "methods", ["home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.reseal_test.ReSeal_tests.defaults_ckks", "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.reseal_test.ReSeal_tests.gen_reseal"], ["", "def", "test_ciphertext_multiply_ciphertext", "(", "self", ")", ":", "\n", "        ", "import", "copy", "\n", "defaults", "=", "self", ".", "defaults_ckks", "(", ")", "\n", "r", "=", "self", ".", "gen_reseal", "(", "defaults", ")", "\n", "data", "=", "np", ".", "array", "(", "[", "100", ",", "200", ",", "300", "]", ")", "\n", "r", ".", "ciphertext", "=", "data", "\n", "r2", "=", "copy", ".", "deepcopy", "(", "r", ")", "\n", "r", ".", "ciphertext", "=", "r", "*", "r2", "\n", "r", "=", "r", "*", "r2", "# test return object style", "\n", "result", "=", "r", ".", "plaintext", "\n", "print", "(", "\"c*c:\"", ",", "data", ",", "\" ^ 3 =\"", ",", "np", ".", "round", "(", "result", "[", ":", "data", ".", "shape", "[", "0", "]", "]", ")", ")", "\n", "rounded_reshaped_result", "=", "np", ".", "round", "(", "result", "[", ":", "data", ".", "shape", "[", "0", "]", "]", ")", "\n", "# self.assertEqual((data * data * data).tolist(),", "\n", "#                  rounded_reshaped_result.tolist())", "\n", "np", ".", "testing", ".", "assert_array_almost_equal", "(", "result", "[", ":", "data", ".", "shape", "[", "0", "]", "]", ",", "\n", "(", "data", "*", "data", "*", "data", ")", ",", "\n", "decimal", "=", "0", ",", "\n", "verbose", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.reseal_test.ReSeal_tests.test_encrypt_decrypt": [[156, 164], ["reseal_test.ReSeal_tests.defaults_ckks", "reseal_test.ReSeal_tests.gen_reseal", "numpy.array", "numpy.round", "reseal_test.ReSeal_tests.assertEqual", "numpy.array.tolist", "numpy.round.tolist"], "methods", ["home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.reseal_test.ReSeal_tests.defaults_ckks", "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.reseal_test.ReSeal_tests.gen_reseal"], ["", "def", "test_encrypt_decrypt", "(", "self", ")", ":", "\n", "        ", "defaults", "=", "self", ".", "defaults_ckks", "(", ")", "\n", "r", "=", "self", ".", "gen_reseal", "(", "defaults", ")", "\n", "data", "=", "np", ".", "array", "(", "[", "1", ",", "2", ",", "3", "]", ")", "\n", "r", ".", "ciphertext", "=", "data", "\n", "result", "=", "r", ".", "plaintext", "\n", "rounded_reshaped_result", "=", "np", ".", "round", "(", "result", "[", ":", "data", ".", "shape", "[", "0", "]", "]", ")", "\n", "self", ".", "assertEqual", "(", "(", "data", ")", ".", "tolist", "(", ")", ",", "rounded_reshaped_result", ".", "tolist", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.reseal_test.ReSeal_tests.test_complex_arithmetic": [[165, 184], ["reseal_test.ReSeal_tests.defaults_ckks", "reseal_test.ReSeal_tests.gen_reseal", "numpy.array", "reseal_test.ReSeal_tests.new", "numpy.round", "numpy.testing.assert_array_almost_equal"], "methods", ["home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.reseal_test.ReSeal_tests.defaults_ckks", "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.reseal_test.ReSeal_tests.gen_reseal", "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.reseal.ReSeal.new"], ["", "def", "test_complex_arithmetic", "(", "self", ")", ":", "\n", "        ", "defaults", "=", "self", ".", "defaults_ckks", "(", ")", "\n", "r", "=", "self", ".", "gen_reseal", "(", "defaults", ")", "\n", "data", "=", "np", ".", "array", "(", "[", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "0.5", ",", "8", ",", "9", "]", ")", "\n", "r", ".", "ciphertext", "=", "data", "\n", "r2", "=", "r", ".", "new", "(", ")", "\n", "# print(\"original\", r.plaintext[:data.shape[0]])", "\n", "r2", ".", "ciphertext", "=", "20", "*", "r", "\n", "# print(\"20 * original\", r2.plaintext[:data.shape[0]])", "\n", "r2", ".", "ciphertext", "=", "r", "+", "r2", "\n", "r2", "=", "r2", "*", "r", "# test return object style", "\n", "expected", "=", "(", "(", "data", "*", "20", ")", "+", "data", ")", "*", "data", "\n", "result", "=", "r2", ".", "plaintext", "\n", "rounded_reshaped_result", "=", "np", ".", "round", "(", "result", "[", ":", "data", ".", "shape", "[", "0", "]", "]", ")", "\n", "# self.assertEqual(expected.tolist(),", "\n", "#                  rounded_reshaped_result.tolist())", "\n", "np", ".", "testing", ".", "assert_array_almost_equal", "(", "result", "[", ":", "data", ".", "shape", "[", "0", "]", "]", ",", "expected", ",", "\n", "decimal", "=", "0", ",", "\n", "verbose", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.reseal_test.ReSeal_tests.test_pickle": [[185, 193], ["reseal_test.ReSeal_tests.defaults_ckks", "reseal_test.ReSeal_tests.gen_reseal", "numpy.array", "pickle.dumps", "pickle.loads", "reseal_test.ReSeal_tests.assertIsInstance"], "methods", ["home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.reseal_test.ReSeal_tests.defaults_ckks", "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.reseal_test.ReSeal_tests.gen_reseal"], ["", "def", "test_pickle", "(", "self", ")", ":", "\n", "        ", "import", "pickle", "\n", "defaults", "=", "self", ".", "defaults_ckks", "(", ")", "\n", "r", "=", "self", ".", "gen_reseal", "(", "defaults", ")", "\n", "r", ".", "ciphertext", "=", "np", ".", "array", "(", "[", "1", ",", "2", ",", "3", "]", ")", "\n", "dump", "=", "pickle", ".", "dumps", "(", "r", ")", "\n", "rp", "=", "pickle", ".", "loads", "(", "dump", ")", "\n", "self", ".", "assertIsInstance", "(", "rp", ",", "ReSeal", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.reseal_test.ReSeal_tests.test_deepcopy": [[194, 201], ["reseal_test.ReSeal_tests.defaults_ckks", "reseal_test.ReSeal_tests.gen_reseal", "numpy.array", "copy.deepcopy", "reseal_test.ReSeal_tests.assertIsInstance"], "methods", ["home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.reseal_test.ReSeal_tests.defaults_ckks", "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.reseal_test.ReSeal_tests.gen_reseal"], ["", "def", "test_deepcopy", "(", "self", ")", ":", "\n", "        ", "import", "copy", "\n", "defaults", "=", "self", ".", "defaults_ckks", "(", ")", "\n", "r", "=", "self", ".", "gen_reseal", "(", "defaults", ")", "\n", "r", ".", "ciphertext", "=", "np", ".", "array", "(", "[", "1", ",", "2", ",", "3", "]", ")", "\n", "rp", "=", "copy", ".", "deepcopy", "(", "r", ")", "\n", "self", ".", "assertIsInstance", "(", "rp", ",", "ReSeal", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.reseal_test.ReSeal_tests.test_cache": [[202, 206], ["reseal_test.ReSeal_tests.defaults_ckks", "reseal_test.ReSeal_tests.gen_reseal", "reseal_test.ReSeal_tests.assertIsInstance"], "methods", ["home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.reseal_test.ReSeal_tests.defaults_ckks", "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.reseal_test.ReSeal_tests.gen_reseal"], ["", "def", "test_cache", "(", "self", ")", ":", "\n", "        ", "defaults", "=", "self", ".", "defaults_ckks", "(", ")", "\n", "r", "=", "self", ".", "gen_reseal", "(", "defaults", ")", "\n", "self", ".", "assertIsInstance", "(", "r", ".", "cache", ",", "ReCache", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.reseal_test.ReSeal_tests.test_validity": [[207, 212], ["reseal_test.ReSeal_tests.defaults_ckks", "reseal_test.ReSeal_tests.gen_reseal", "numpy.array", "fhez.rescheme.ReScheme().validate", "reseal_test.ReSeal_tests.__getstate__", "fhez.rescheme.ReScheme"], "methods", ["home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.reseal_test.ReSeal_tests.defaults_ckks", "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.reseal_test.ReSeal_tests.gen_reseal", "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.graph.serialise.Serialise.__getstate__"], ["", "def", "test_validity", "(", "self", ")", ":", "\n", "        ", "defaults", "=", "self", ".", "defaults_ckks", "(", ")", "\n", "r", "=", "self", ".", "gen_reseal", "(", "defaults", ")", "\n", "r", ".", "ciphertext", "=", "np", ".", "array", "(", "[", "1", ",", "2", ",", "3", "]", ")", "\n", "ReScheme", "(", ")", ".", "validate", "(", "r", ".", "__getstate__", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.reseal_test.ReSeal_tests.test_len": [[213, 218], ["reseal_test.ReSeal_tests.defaults_ckks", "reseal_test.ReSeal_tests.gen_reseal", "numpy.array", "reseal_test.ReSeal_tests.assertIsInstance", "len"], "methods", ["home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.reseal_test.ReSeal_tests.defaults_ckks", "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.reseal_test.ReSeal_tests.gen_reseal"], ["", "def", "test_len", "(", "self", ")", ":", "\n", "        ", "defaults", "=", "self", ".", "defaults_ckks", "(", ")", "\n", "r", "=", "self", ".", "gen_reseal", "(", "defaults", ")", "\n", "r", ".", "ciphertext", "=", "np", ".", "array", "(", "[", "1", ",", "2", ",", "3", "]", ")", "\n", "self", ".", "assertIsInstance", "(", "len", "(", "r", ")", ",", "int", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.erray.Erray.implements": [[33, 44], ["remap.get"], "methods", ["None"], ["def", "implements", "(", "remap", ",", "np_func", ",", "method", ")", ":", "\n", "        ", "\"\"\"Python decorator to remap numpy functions to our own funcs.\"\"\"", "\n", "# ensuring subdicts exist", "\n", "if", "remap", ".", "get", "(", "method", ")", "is", "None", ":", "\n", "            ", "remap", "[", "method", "]", "=", "{", "}", "\n", "\n", "", "def", "decorator", "(", "func", ")", ":", "\n", "# adding mapping to class' attribute \"remap\"", "\n", "            ", "remap", "[", "method", "]", "[", "np_func", "]", "=", "func", "\n", "return", "func", "\n", "", "return", "decorator", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.erray.Erray.__array_ufunc__": [[45, 61], ["len", "ValueError", "isinstance", "erray.Erray.__array_ufunc__"], "methods", ["home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.rearray.ReArray.__array_ufunc__"], ["", "def", "__array_ufunc__", "(", "self", ",", "ufunc", ",", "method", ",", "*", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"numpy element wise universal functions.\"\"\"", "\n", "if", "len", "(", "inputs", ")", ">", "2", ":", "\n", "            ", "raise", "ValueError", "(", "\"More inputs than expected 2 in ufunc\"", ")", "\n", "# if inputs are wrong way around flip and call again", "\n", "", "elif", "not", "isinstance", "(", "inputs", "[", "0", "]", ",", "ReArray", ")", ":", "\n", "            ", "return", "self", ".", "__array_ufunc__", "(", "ufunc", ",", "method", ",", "*", "inputs", "[", ":", ":", "-", "1", "]", ",", "**", "kwargs", ")", "\n", "# using ReArray objects remap class attribute to dispatch properly", "\n", "", "try", ":", "\n", "# assuming inputs[0] == self then look up function remap", "\n", "            ", "return", "inputs", "[", "0", "]", ".", "remap", "[", "method", "]", "[", "ufunc", "]", "(", "inputs", "[", "0", "]", ",", "inputs", "[", "1", "]", ")", "\n", "", "except", "KeyError", ":", "\n", "            ", "pass", "\n", "# everything else should bottom out as we do not implement", "\n", "# e.g floor_divide, true_divide, etc", "\n", "", "return", "NotImplemented", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.erray.Erray._broadcast": [[62, 65], ["numpy.broadcast_to"], "methods", ["None"], ["", "def", "_broadcast", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Broadcast others shape to our current shape.\"\"\"", "\n", "return", "np", ".", "broadcast_to", "(", "other", ",", "self", ".", "shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.erray.Erray._pre_process_other": [[66, 74], ["erray.Erray._broadcast", "ArithmeticError"], "methods", ["home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.rearray.ReArray._broadcast"], ["", "def", "_pre_process_other", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Unify compatibility of both members of operation.\"\"\"", "\n", "try", ":", "\n", "            ", "other", "=", "self", ".", "_broadcast", "(", "other", ")", "\n", "", "except", "ValueError", ":", "\n", "            ", "raise", "ArithmeticError", "(", "\"shapes: {}, {} not broadcastable\"", ".", "format", "(", "\n", "self", ".", "shape", ",", "other", ".", "shape", ")", ")", "\n", "", "return", "other", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.erray.Erray.multiply": [[75, 87], ["erray.Erray.implements"], "methods", ["home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.rearray.ReArray.implements"], ["", "@", "implements", "(", "remap", ",", "np", ".", "multiply", ",", "\"__call__\"", ")", "\n", "def", "multiply", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Multiplicative Hadmard Product (element-wise multiplication).\"\"\"", "\n", "other", "=", "self", ".", "_pre_process_other", "(", "other", ")", "\n", "accumulator", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "cyphertext", ")", ")", ":", "\n", "            ", "if", "isinstance", "(", "other", "[", "i", "]", ",", "ReSeal", ")", ":", "\n", "                ", "t", "=", "self", "[", "i", "]", "*", "other", "[", "i", "]", "\n", "", "else", ":", "\n", "                ", "t", "=", "self", "[", "i", "]", "*", "other", "[", "i", "]", ".", "flatten", "(", ")", "\n", "", "accumulator", ".", "append", "(", "t", ")", "\n", "", "return", "ReArray", "(", "clone", "=", "self", ",", "cyphertext", "=", "accumulator", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.erray.Erray.add": [[88, 94], ["erray.Erray.implements"], "methods", ["home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.rearray.ReArray.implements"], ["", "@", "implements", "(", "remap", ",", "np", ".", "add", ",", "\"__call__\"", ")", "\n", "def", "add", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Additive Hadmard Product (element-wise addition)\"\"\"", "\n", "other", "=", "self", ".", "_pre_process_other", "(", "other", ")", "\n", "t", "=", "self", "+", "other", ".", "flatten", "(", ")", "\n", "return", "ReArray", "(", "clone", "=", "self", ",", "cyphertext", "=", "accumulator", ")", "\n", "# for row_s, row_o in zip(self.cyphertext, other):", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.erray.Erray.__repr__": [[99, 101], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "\"{}({})\"", ".", "format", "(", "self", ".", "__class__", ".", "__name__", ",", "self", ".", "__dict__", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.erray.Erray.__str__": [[102, 107], ["d.items"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "d", "=", "self", ".", "__dict__", "\n", "d", "=", "{", "k", ":", "d", "[", "k", "]", "for", "k", ",", "v", "in", "d", ".", "items", "(", ")", "if", "k", "not", "in", "(", "\"_ciphertext\"", ",", "\n", "\"_cache\"", ")", "}", "\n", "return", "\"{}({})\"", ".", "format", "(", "self", ".", "__class__", ".", "__name__", ",", "d", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.erray.Erray.__len__": [[108, 111], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "\"\"\"Matching numpys len function\"\"\"", "\n", "return", "self", ".", "shape", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.erray.Erray.shape": [[112, 116], ["erray.Erray.__dict__.get"], "methods", ["None"], ["", "@", "property", "\n", "def", "shape", "(", "self", ")", ":", "\n", "        ", "\"\"\"Get the multi dimensional shape that this vector represents.\"\"\"", "\n", "return", "self", ".", "__dict__", ".", "get", "(", "\"_shape\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.erray.Erray.size": [[117, 121], ["erray.Erray.__dict__.get"], "methods", ["None"], ["", "@", "property", "\n", "def", "size", "(", "self", ")", ":", "\n", "        ", "\"\"\"Get the total number of elements in this vector.\"\"\"", "\n", "return", "self", ".", "__dict__", ".", "get", "(", "\"_size\"", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.rearray.ReArray.__init__": [[40, 64], ["hasattr", "d.items"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "\n", "plaintext", ":", "np", ".", "ndarray", "=", "None", ",", "\n", "seed", ":", "ReSeal", "=", "None", ",", "\n", "clone", "=", "None", ",", "\n", "cyphertext", "=", "None", ",", "\n", "**", "reseal_args", ")", ":", "\n", "        ", "if", "clone", "is", "None", ":", "\n", "# automatic seed generation for encryption", "\n", "            ", "self", ".", "seed", "=", "reseal_args", "if", "seed", "is", "None", "else", "seed", "\n", "# automatic encryption", "\n", "self", ".", "cyphertext", "=", "plaintext", "\n", "", "else", ":", "\n", "# bootstrap ReArray object based on other ReArray object", "\n", "            ", "d", "=", "clone", ".", "__dict__", "\n", "d", "=", "{", "k", ":", "d", "[", "k", "]", "for", "k", ",", "v", "in", "d", ".", "items", "(", ")", "if", "k", "not", "in", "[", "\"_cyphertext\"", "]", "}", "\n", "self", ".", "__dict__", "=", "d", "\n", "if", "cyphertext", "is", "not", "None", ":", "\n", "# check if cyphertext or cyphertexts iterable", "\n", "                ", "if", "hasattr", "(", "cyphertext", ",", "\"__iter__\"", ")", ":", "\n", "                    ", "self", ".", "_cyphertext", "=", "cyphertext", "\n", "", "else", ":", "\n", "                    ", "self", ".", "_cyphertext", "=", "[", "cyphertext", "]", "\n", "", "", "else", ":", "\n", "                ", "self", ".", "cyphertext", "=", "plaintext", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.rearray.ReArray.__call__": [[65, 68], ["rearray.ReArray"], "methods", ["None"], ["", "", "", "def", "__call__", "(", "self", ",", "plaintext", ")", ":", "\n", "        ", "\"\"\"Generate clone of ReArray object but with different data.\"\"\"", "\n", "return", "ReArray", "(", "clone", "=", "self", ",", "plaintext", "=", "plaintext", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.rearray.ReArray.seedling": [[69, 73], ["rearray.ReArray.seed.duplicate"], "methods", ["home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.reseal.ReSeal.duplicate"], ["", "@", "property", "\n", "def", "seedling", "(", "self", ")", ":", "\n", "        ", "\"\"\"An independent clone/ sibling of the seed\"\"\"", "\n", "return", "self", ".", "seed", ".", "duplicate", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.rearray.ReArray.seed": [[79, 88], ["isinstance", "fhez.reseal.ReSeal"], "methods", ["None"], ["", "@", "seed", ".", "setter", "\n", "def", "seed", "(", "self", ",", "seed", ")", ":", "\n", "        ", "\"\"\"Create a ReSeal object seed to allow sharing of encryption keys.\"\"\"", "\n", "if", "isinstance", "(", "seed", ",", "ReSeal", ")", ":", "\n", "            ", "self", ".", "_seed", "=", "ReSeal", "\n", "", "else", ":", "\n", "            ", "self", ".", "_seed", "=", "ReSeal", "(", "**", "seed", ")", "\n", "# call encryptor to test if it exists or to generate it", "\n", "", "self", ".", "seed", ".", "encryptor", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.rearray.ReArray.cyphertext": [[93, 124], ["isinstance", "data.view", "TypeError", "int", "len", "OverflowError", "rearray.ReArray.cyphertext.append", "type", "len"], "methods", ["home.repos.pwc.inspect_result.DreamingRaven_python-reseal.graph.dll.DLL.append"], ["", "@", "cyphertext", ".", "setter", "\n", "def", "cyphertext", "(", "self", ",", "data", ")", ":", "\n", "        ", "if", "isinstance", "(", "data", ",", "np", ".", "ndarray", ")", ":", "\n", "            ", "self", ".", "_cyphertext", "=", "[", "]", "\n", "view", "=", "data", ".", "view", "(", ")", "\n", "# capture original data form so we can return to it later", "\n", "# and use it to interpret multidimensional operations", "\n", "self", ".", "origin", "=", "{", "\n", "\"shape\"", ":", "data", ".", "shape", ",", "\n", "\"size\"", ":", "data", ".", "size", ",", "\n", "}", "\n", "# reshape data to (batchsize, examplesize)", "\n", "view", ".", "shape", "=", "(", "self", ".", "origin", "[", "\"shape\"", "]", "[", "0", "]", ",", "\n", "int", "(", "self", ".", "origin", "[", "\"size\"", "]", "/", "self", ".", "origin", "[", "\"shape\"", "]", "[", "0", "]", ")", ")", "\n", "# checking if cyphertext is too small to fit data into", "\n", "if", "view", ".", "shape", "[", "1", "]", ">", "len", "(", "self", ".", "seed", ")", ":", "\n", "                ", "raise", "OverflowError", "(", "\n", "\"Data too big or encryption too small to fit:\"", ",", "\n", "\"data {} -> {} > {} reseal.len\"", ".", "format", "(", "\n", "self", ".", "origin", "[", "\"shape\"", "]", "[", "1", ":", "]", ",", "\n", "view", ".", "shape", "[", "1", "]", ",", "\n", "len", "(", "self", ".", "seed", ")", ")", ")", "\n", "# iterate through, encrypt (using same seed), and append to list", "\n", "# for later use", "\n", "", "for", "sample", "in", "view", ":", "\n", "                ", "seedling", "=", "self", ".", "seedling", "\n", "seedling", ".", "ciphertext", "=", "sample", "\n", "self", ".", "cyphertext", ".", "append", "(", "seedling", ")", "\n", "", "", "else", ":", "\n", "            ", "raise", "TypeError", "(", "\"data.setter got an {} instead of {}\"", ".", "format", "(", "\n", "type", "(", "data", ")", ",", "np", ".", "ndarray", "\n", ")", ")", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.rearray.ReArray.origin": [[130, 133], ["None"], "methods", ["None"], ["", "@", "origin", ".", "setter", "\n", "def", "origin", "(", "self", ",", "origin", ":", "dict", ")", ":", "\n", "        ", "self", ".", "_origin", "=", "origin", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.rearray.ReArray.shape": [[134, 137], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "shape", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "origin", "[", "\"shape\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.rearray.ReArray.size": [[142, 145], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "size", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "origin", "[", "\"size\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.rearray.ReArray.__repr__": [[150, 154], ["d.items"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "d", "=", "self", ".", "__dict__", "\n", "d", "=", "{", "k", ":", "d", "[", "k", "]", "for", "k", ",", "v", "in", "d", ".", "items", "(", ")", "if", "k", "not", "in", "[", "\"_cyphertext\"", "]", "}", "\n", "return", "\"{}({})\"", ".", "format", "(", "self", ".", "__class__", ".", "__name__", ",", "d", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.rearray.ReArray.__str__": [[155, 159], ["d.items"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "d", "=", "self", ".", "__dict__", "\n", "d", "=", "{", "k", ":", "d", "[", "k", "]", "for", "k", ",", "v", "in", "d", ".", "items", "(", ")", "if", "k", "not", "in", "[", "\"_cyphertext\"", "]", "}", "\n", "return", "\"{}({})\"", ".", "format", "(", "self", ".", "__class__", ".", "__name__", ",", "d", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.rearray.ReArray.__getitem__": [[160, 168], ["isinstance", "IndexError", "len"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "indices", ")", ":", "\n", "        ", "\"\"\"Get cyphertexts from encrypted internal 1D list.\"\"\"", "\n", "# converting all indices to tuples if not already", "\n", "if", "not", "isinstance", "(", "indices", ",", "tuple", ")", ":", "\n", "            ", "return", "self", ".", "cyphertext", "[", "indices", "]", "\n", "", "else", ":", "\n", "            ", "raise", "IndexError", "(", "\"{}[{}] invalid can only slice 1D not {}D\"", ".", "format", "(", "\n", "self", ".", "__class__", ".", "__name__", ",", "indices", ",", "len", "(", "indices", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.rearray.ReArray.__len__": [[169, 172], ["None"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "\"\"\"Matching numpys len function\"\"\"", "\n", "return", "self", ".", "shape", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.rearray.ReArray.__array__": [[173, 184], ["numpy.array", "accumulator.append", "numpy.array.astype"], "methods", ["home.repos.pwc.inspect_result.DreamingRaven_python-reseal.graph.dll.DLL.append"], ["", "def", "__array__", "(", "self", ",", "dtype", "=", "None", ")", ":", "\n", "        ", "accumulator", "=", "[", "]", "\n", "for", "example", "in", "self", ".", "cyphertext", ":", "\n", "            ", "accumulator", ".", "append", "(", "\n", "# cutting off padding/ excess", "\n", "example", ".", "plaintext", "[", "\n", ":", "self", ".", "origin", "[", "\"size\"", "]", "//", "self", ".", "origin", "[", "\"shape\"", "]", "[", "0", "]", "\n", "]", ")", "\n", "", "data", "=", "np", ".", "array", "(", "accumulator", ")", "\n", "data", ".", "shape", "=", "self", ".", "origin", "[", "\"shape\"", "]", "\n", "return", "data", ".", "astype", "(", "dtype", ")", "if", "dtype", "is", "not", "None", "else", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.rearray.ReArray.__array_ufunc__": [[185, 203], ["len", "ValueError", "isinstance", "rearray.ReArray.__array_ufunc__"], "methods", ["home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.rearray.ReArray.__array_ufunc__"], ["", "def", "__array_ufunc__", "(", "self", ",", "ufunc", ",", "method", ",", "*", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"numpy element wise universal functions.\"\"\"", "\n", "# print(\"ufunc: {}, method: {}\".format(ufunc, method))", "\n", "if", "len", "(", "inputs", ")", ">", "2", ":", "\n", "            ", "raise", "ValueError", "(", "\"More inputs than expected 2 in ufunc\"", ")", "\n", "# if inputs are wrong way around flip and call again", "\n", "", "elif", "not", "isinstance", "(", "inputs", "[", "0", "]", ",", "ReArray", ")", ":", "\n", "            ", "return", "self", ".", "__array_ufunc__", "(", "ufunc", ",", "method", ",", "*", "inputs", "[", ":", ":", "-", "1", "]", ",", "**", "kwargs", ")", "\n", "# using ReArray objects remap class attribute to dispatch properly", "\n", "", "try", ":", "\n", "# assuming inputs[0] == self then look up function remap", "\n", "# return inputs[0].remap[method][ufunc](inputs[0], inputs[1])", "\n", "            ", "return", "inputs", "[", "0", "]", ".", "remap", "[", "method", "]", "[", "ufunc", "]", "(", "*", "inputs", ")", "\n", "", "except", "KeyError", ":", "\n", "            ", "pass", "\n", "# everything else should bottom out as we do not implement", "\n", "# e.g floor_divide, true_divide, etc", "\n", "", "return", "NotImplemented", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.rearray.ReArray._broadcast": [[204, 207], ["numpy.broadcast_to"], "methods", ["None"], ["", "def", "_broadcast", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Broadcast shape to our current shape.\"\"\"", "\n", "return", "np", ".", "broadcast_to", "(", "other", ",", "self", ".", "shape", ")", "\n", "# return np.broadcast_to(other, (1,) + self.shape[1:])", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.rearray.ReArray._pre_process_other": [[209, 216], ["rearray.ReArray._broadcast", "ArithmeticError"], "methods", ["home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.rearray.ReArray._broadcast"], ["", "def", "_pre_process_other", "(", "self", ",", "other", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "other", "=", "self", ".", "_broadcast", "(", "other", ")", "\n", "", "except", "ValueError", ":", "\n", "            ", "raise", "ArithmeticError", "(", "\"shapes: {}, {} not broadcastable\"", ".", "format", "(", "\n", "self", ".", "shape", ",", "other", ".", "shape", ")", ")", "\n", "", "return", "other", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.rearray.ReArray.implements": [[217, 228], ["remap.get"], "methods", ["None"], ["", "def", "implements", "(", "remap", ",", "np_func", ",", "method", ")", ":", "\n", "        ", "\"\"\"Python decorator to remap numpy functions to our own funcs.\"\"\"", "\n", "# ensuring subdicts exist", "\n", "if", "remap", ".", "get", "(", "method", ")", "is", "None", ":", "\n", "            ", "remap", "[", "method", "]", "=", "{", "}", "\n", "\n", "", "def", "decorator", "(", "func", ")", ":", "\n", "# adding mapping to class' attribute \"remap\"", "\n", "            ", "remap", "[", "method", "]", "[", "np_func", "]", "=", "func", "\n", "return", "func", "\n", "", "return", "decorator", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.rearray.ReArray.multiply": [[229, 244], ["rearray.ReArray.implements"], "methods", ["home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.rearray.ReArray.implements"], ["", "@", "implements", "(", "remap", ",", "np", ".", "multiply", ",", "\"__call__\"", ")", "\n", "def", "multiply", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Multiplicative Hadmard Product (element-wise multiplication).\"\"\"", "\n", "other", "=", "self", ".", "_pre_process_other", "(", "other", ")", "\n", "accumulator", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "cyphertext", ")", ")", ":", "\n", "            ", "if", "isinstance", "(", "other", "[", "i", "]", ",", "ReSeal", ")", ":", "\n", "                ", "t", "=", "self", "[", "i", "]", "*", "other", "[", "i", "]", "\n", "", "else", ":", "\n", "# small nonzero systematic random uniform bias e", "\n", "# prevents \"RuntimeError: result ciphertext is transparent\"", "\n", "                ", "e", "=", "np", ".", "random", ".", "uniform", "(", "-", "1", ",", "1", ",", "other", "[", "i", "]", ".", "shape", ")", ".", "flatten", "(", ")", "*", "1e-8", "\n", "t", "=", "self", "[", "i", "]", "*", "(", "other", "[", "i", "]", ".", "flatten", "(", ")", "+", "e", ")", "\n", "", "accumulator", ".", "append", "(", "t", ")", "\n", "", "return", "ReArray", "(", "clone", "=", "self", ",", "cyphertext", "=", "accumulator", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.rearray.ReArray.add": [[245, 257], ["rearray.ReArray.implements"], "methods", ["home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.rearray.ReArray.implements"], ["", "@", "implements", "(", "remap", ",", "np", ".", "add", ",", "\"__call__\"", ")", "\n", "def", "add", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Additive Hadmard Product (element-wise addition)\"\"\"", "\n", "other", "=", "self", ".", "_pre_process_other", "(", "other", ")", "\n", "accumulator", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "cyphertext", ")", ")", ":", "\n", "            ", "if", "isinstance", "(", "other", "[", "i", "]", ",", "ReSeal", ")", ":", "\n", "                ", "t", "=", "self", "[", "i", "]", "+", "other", "[", "i", "]", "\n", "", "else", ":", "\n", "                ", "t", "=", "self", "[", "i", "]", "+", "other", "[", "i", "]", ".", "flatten", "(", ")", "\n", "", "accumulator", ".", "append", "(", "t", ")", "\n", "", "return", "ReArray", "(", "clone", "=", "self", ",", "cyphertext", "=", "accumulator", ")", "\n", "# for row_s, row_o in zip(self.cyphertext, other):", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.rearray.ReArray.sum": [[262, 286], ["rearray.ReArray.implements"], "methods", ["home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.rearray.ReArray.implements"], ["", "@", "implements", "(", "remap", ",", "np", ".", "add", ",", "\"reduce\"", ")", "\n", "def", "sum", "(", "self", ",", "axis", "=", "None", ",", "out", "=", "None", ")", ":", "\n", "        ", "\"\"\"Reduce sum of cyphertext.\"\"\"", "\n", "if", "axis", "==", "0", ":", "\n", "# print(\"origin\", np.array(self), self.shape, self.size)", "\n", "            ", "cyphertext", "=", "functools", ".", "reduce", "(", "lambda", "x", ",", "y", ":", "x", "+", "y", ",", "self", ".", "cyphertext", ")", "\n", "# print(\"summation\", cyphertext,", "\n", "# np.array(cyphertext.plaintext).shape)", "\n", "# print(\"preview\", np.array(cyphertext.plaintext))", "\n", "result", "=", "ReArray", "(", "cyphertext", "=", "cyphertext", ",", "clone", "=", "self", ")", "\n", "# create a copy of shape, and change it to be summed version", "\n", "shape", "=", "list", "(", "self", ".", "shape", ")", "\n", "shape", "[", "0", "]", "=", "1", "\n", "shape", "=", "tuple", "(", "shape", ")", "\n", "# modify origin of this new object as it is different", "\n", "result", ".", "origin", "=", "{", "\"shape\"", ":", "shape", ",", "\n", "\"size\"", ":", "self", ".", "size", "//", "len", "(", "self", ".", "cyphertext", ")", "}", "\n", "# print(\"out shape\", result.shape, result.size)", "\n", "return", "result", "\n", "", "else", ":", "\n", "# we CANNOT fold a single cyphertext, can only sum between", "\n", "# cyphertests which for us is axis 0 since we store cyphertexts", "\n", "# as a list anything else is impossible", "\n", "            ", "return", "NotImplemented", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.rearray.ReArray.equal": [[287, 301], ["rearray.ReArray.implements"], "methods", ["home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.rearray.ReArray.implements"], ["", "", "@", "implements", "(", "remap", ",", "np", ".", "equal", ",", "\"__call__\"", ")", "\n", "def", "equal", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Check if two ReArray objects are equal.\n\n        Quality to us means that they are the same parms, private-key, etc.\n        It does not necessarily check the contents of the cyphertext.\n        We cannot always guarantee we have the private-keys to evaluate\n        the contents.\n        \"\"\"", "\n", "if", "repr", "(", "self", ")", "==", "repr", "(", "other", ")", ":", "\n", "            ", "return", "True", "\n", "", "else", ":", "\n", "            ", "return", "False", "\n", "", "return", "NotImplemented", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.rearray.ReArray.not_equal": [[302, 306], ["rearray.ReArray.implements"], "methods", ["home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.rearray.ReArray.implements"], ["", "@", "implements", "(", "remap", ",", "np", ".", "not_equal", ",", "\"__call__\"", ")", "\n", "def", "not_equal", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Check two ReArray objects are totally equal in params.\"\"\"", "\n", "return", "not", "self", ".", "equal", "(", "other", "=", "other", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.rearray.ReArray.isfinite": [[307, 317], ["rearray.ReArray.implements"], "methods", ["home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.rearray.ReArray.implements"], ["", "@", "implements", "(", "remap", ",", "np", ".", "isfinite", ",", "\"__call__\"", ")", "\n", "def", "isfinite", "(", "self", ")", ":", "\n", "        ", "\"\"\"Get finite status of each value in data.\n\n        Clearly there is no way for us to actually know, but it is assumed\n        to always be finite. This function is up-for-debate as to whether it is\n        worth scrapping and instead removing any requirement on finite in\n        networks.\n        \"\"\"", "\n", "return", "np", ".", "ones", "(", "self", ".", "shape", ",", "dtype", "=", "bool", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.nn.nn.NeuralNetwork.__init__": [[25, 28], ["networkx.MultiDiGraph"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "graph", "=", "None", ")", ":", "\n", "        ", "\"\"\"Instantiate a neural network using an existing graph object.\"\"\"", "\n", "self", ".", "g", "=", "graph", "if", "graph", "is", "not", "None", "else", "nx", ".", "MultiDiGraph", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.nn.nn.NeuralNetwork.g": [[34, 38], ["None"], "methods", ["None"], ["", "@", "g", ".", "setter", "\n", "def", "g", "(", "self", ",", "graph", ")", ":", "\n", "        ", "\"\"\"Set computational graph.\"\"\"", "\n", "self", ".", "_graph", "=", "graph", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.nn.nn.NeuralNetwork.forward": [[39, 53], ["logging.debug", "node[].forward", "nn.NeuralNetwork.g.successors", "nn.NeuralNetwork.forward", "nn.NeuralNetwork.probe_shape"], "methods", ["home.repos.pwc.inspect_result.DreamingRaven_python-reseal.loss.mse.MSE.forward", "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.loss.mse.MSE.forward", "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.operations.cc.CC.probe_shape"], ["", "def", "forward", "(", "self", ",", "x", ",", "current_node", ",", "end_node", ")", ":", "\n", "        ", "\"\"\"Traverse and activate nodes until all nodes processed.\"\"\"", "\n", "node", "=", "self", ".", "g", ".", "nodes", "[", "current_node", "]", "\n", "logger", ".", "debug", "(", "\"processing node: `{}`, input_shape({})\"", ".", "format", "(", "\n", "current_node", ",", "\n", "self", ".", "probe_shape", "(", "x", ")", ")", ")", "\n", "# process current node", "\n", "output", "=", "node", "[", "\"node\"", "]", ".", "forward", "(", "x", ")", "\n", "# process next nodes recursiveley", "\n", "next_nodes", "=", "self", ".", "g", ".", "successors", "(", "current_node", ")", "\n", "for", "i", "in", "next_nodes", ":", "\n", "            ", "self", ".", "forward", "(", "x", "=", "output", ",", "\n", "current_node", "=", "i", ",", "\n", "end_node", "=", "end_node", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.nn.nn.NeuralNetwork.backward": [[54, 68], ["logging.debug", "node[].backward", "nn.NeuralNetwork.g.predecessors", "nn.NeuralNetwork.backward"], "methods", ["home.repos.pwc.inspect_result.DreamingRaven_python-reseal.loss.mse.MSE.backward", "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.loss.mse.MSE.backward"], ["", "", "def", "backward", "(", "self", ",", "gradient", ",", "current_node", ",", "end_node", ")", ":", "\n", "        ", "\"\"\"Traverse backwards until all nodes processed.\"\"\"", "\n", "node", "=", "self", ".", "g", ".", "nodes", "[", "current_node", "]", "\n", "logger", ".", "debug", "(", "\"processing node: `{}`, gradient({})\"", ".", "format", "(", "\n", "current_node", ",", "\n", "gradient", ")", ")", "\n", "# process current nodes gradients", "\n", "local_gradient", "=", "node", "[", "\"node\"", "]", ".", "backward", "(", "gradient", ")", "\n", "# process previous nodes recursiveley", "\n", "previous_nodes", "=", "self", ".", "g", ".", "predecessors", "(", "current_node", ")", "\n", "for", "i", "in", "previous_nodes", ":", "\n", "            ", "self", ".", "backward", "(", "gradient", "=", "local_gradient", ",", "\n", "current_node", "=", "i", ",", "\n", "end_node", "=", "end_node", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.nn.nn.NeuralNetwork.forwards": [[69, 79], ["accumulator.append", "nn.NeuralNetwork.forward"], "methods", ["home.repos.pwc.inspect_result.DreamingRaven_python-reseal.graph.dll.DLL.append", "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.loss.mse.MSE.forward"], ["", "", "def", "forwards", "(", "self", ",", "xs", ",", "current_node", ",", "end_node", ")", ":", "\n", "        ", "\"\"\"Calculate forward pass for multiple examples simultaneously.\"\"\"", "\n", "accumulator", "=", "[", "]", "\n", "for", "i", "in", "xs", ":", "\n", "            ", "accumulator", ".", "append", "(", "\n", "self", ".", "forward", "(", "\n", "x", "=", "i", ",", "\n", "current_node", "=", "current_node", ",", "\n", "end_node", "=", "end_node", ")", ")", "\n", "", "return", "accumulator", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.nn.nn.NeuralNetwork.backwards": [[80, 90], ["accumulator.append", "nn.NeuralNetwork.backward"], "methods", ["home.repos.pwc.inspect_result.DreamingRaven_python-reseal.graph.dll.DLL.append", "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.loss.mse.MSE.backward"], ["", "def", "backwards", "(", "self", ",", "gradients", ",", "current_node", ",", "end_node", ")", ":", "\n", "        ", "\"\"\"Calculate backward pass for multiple examples simultaneously.\"\"\"", "\n", "accumulator", "=", "[", "]", "\n", "for", "i", "in", "gradients", ":", "\n", "            ", "accumulator", ".", "append", "(", "\n", "self", ".", "backward", "(", "\n", "gradient", "=", "i", ",", "\n", "current_node", "=", "current_node", ",", "\n", "end_node", "=", "end_node", ")", ")", "\n", "", "return", "accumulator", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.nn.nn.NeuralNetwork.update": [[91, 102], ["logging.debug", "node[].update", "nn.NeuralNetwork.g.successors", "nn.NeuralNetwork.update"], "methods", ["home.repos.pwc.inspect_result.DreamingRaven_python-reseal.loss.mse.MSE.update", "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.loss.mse.MSE.update"], ["", "def", "update", "(", "self", ",", "current_node", ",", "end_node", ")", ":", "\n", "        ", "\"\"\"Update weights of all nodes using oldest single example gradient.\"\"\"", "\n", "node", "=", "self", ".", "g", ".", "nodes", "[", "current_node", "]", "\n", "logger", ".", "debug", "(", "\"updating node: `{}`\"", ".", "format", "(", "current_node", ")", ")", "\n", "# update current node", "\n", "node", "[", "\"node\"", "]", ".", "update", "(", ")", "\n", "# process next nodes recursiveley", "\n", "next_nodes", "=", "self", ".", "g", ".", "successors", "(", "current_node", ")", "\n", "for", "i", "in", "next_nodes", ":", "\n", "# update successors recursiveley", "\n", "            ", "self", ".", "update", "(", "current_node", "=", "i", ",", "end_node", "=", "end_node", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.nn.nn.NeuralNetwork.updates": [[103, 114], ["logging.debug", "node[].updates", "nn.NeuralNetwork.g.successors", "nn.NeuralNetwork.updates"], "methods", ["home.repos.pwc.inspect_result.DreamingRaven_python-reseal.loss.mse.MSE.updates", "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.loss.mse.MSE.updates"], ["", "", "def", "updates", "(", "self", ",", "current_node", ",", "end_node", ")", ":", "\n", "        ", "\"\"\"Update the weights of all nodes by taking the average gradient.\"\"\"", "\n", "node", "=", "self", ".", "g", ".", "nodes", "[", "current_node", "]", "\n", "logger", ".", "debug", "(", "\"updating node: `{}`\"", ".", "format", "(", "current_node", ")", ")", "\n", "# update current node", "\n", "node", "[", "\"node\"", "]", ".", "updates", "(", ")", "\n", "# process next nodes recursiveley", "\n", "next_nodes", "=", "self", ".", "g", ".", "successors", "(", "current_node", ")", "\n", "for", "i", "in", "next_nodes", ":", "\n", "# update successors recursiveley", "\n", "            ", "self", ".", "updates", "(", "current_node", "=", "i", ",", "end_node", "=", "end_node", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.nn.nn.NeuralNetwork.probe_shape": [[115, 132], ["isinstance", "isinstance", "nn.NeuralNetwork.probe_shape", "len", "len"], "methods", ["home.repos.pwc.inspect_result.DreamingRaven_python-reseal.operations.cc.CC.probe_shape"], ["", "", "def", "probe_shape", "(", "self", ",", "lst", ":", "list", ")", ":", "\n", "        ", "\"\"\"Get the shape of a list, assuming each sublist is the same length.\n\n        This function is recursive, sending the sublists down and terminating\n        once a type error is thrown by the final point being a non-list\n        \"\"\"", "\n", "if", "isinstance", "(", "lst", ",", "list", ")", ":", "\n", "# try appending current length with recurse of sublist", "\n", "            ", "try", ":", "\n", "                ", "return", "(", "len", "(", "lst", ")", ",", ")", "+", "self", ".", "probe_shape", "(", "lst", "[", "0", "]", ")", "\n", "# once we bottom out and get some non-list type abort and pull up", "\n", "", "except", "(", "AttributeError", ",", "IndexError", ")", ":", "\n", "                ", "return", "(", "len", "(", "lst", ")", ",", ")", "\n", "", "", "elif", "isinstance", "(", "lst", ",", "(", "int", ",", "float", ")", ")", ":", "\n", "            ", "return", "(", "1", ",", ")", "\n", "", "else", ":", "\n", "            ", "return", "lst", ".", "shape", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.nn.nn_test.NNTest.setUp": [[20, 36], ["time.time", "networkx.MultiDiGraph", "networkx.MultiDiGraph.add_node", "networkx.MultiDiGraph.add_node", "networkx.MultiDiGraph.add_node", "networkx.MultiDiGraph.add_edge", "networkx.MultiDiGraph.add_edge", "fhez.nn.nn.NN", "fhez.nn.graph.node.IO", "fhez.nn.activation.relu.RELU", "fhez.nn.graph.node.IO"], "methods", ["None"], ["def", "setUp", "(", "self", ")", ":", "\n", "        ", "\"\"\"Set up basic variables and start timer.\"\"\"", "\n", "self", ".", "weights", "=", "(", "1", ",", "3", ",", "3", ",", "3", ")", "# tuple allows cnn to initialise itself", "\n", "self", ".", "stride", "=", "[", "1", ",", "3", ",", "3", ",", "3", "]", "# stride list per-dimension", "\n", "self", ".", "bias", "=", "0", "# assume no bias at first", "\n", "self", ".", "start_time", "=", "time", ".", "time", "(", ")", "\n", "\n", "graph", "=", "nx", ".", "MultiDiGraph", "(", ")", "\n", "graph", ".", "add_node", "(", "\"input\"", ",", "node", "=", "IO", "(", ")", ")", "\n", "graph", ".", "add_node", "(", "\"ReLU\"", ",", "node", "=", "RELU", "(", ")", ")", "\n", "graph", ".", "add_node", "(", "\"output\"", ",", "node", "=", "IO", "(", ")", ")", "\n", "graph", ".", "add_edge", "(", "\"input\"", ",", "\"ReLU\"", ",", "\n", "cost", "=", "4", ")", "# graph.nodes[\"ReLU\"][\"node\"].cost)", "\n", "graph", ".", "add_edge", "(", "\"ReLU\"", ",", "\"output\"", ",", "\n", "cost", "=", "graph", ".", "nodes", "[", "\"output\"", "]", "[", "\"node\"", "]", ".", "cost", ")", "\n", "self", ".", "nn", "=", "NN", "(", "graph", "=", "graph", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.nn.nn_test.NNTest.tearDown": [[37, 41], ["print", "time.time", "nn_test.NNTest.id"], "methods", ["None"], ["", "def", "tearDown", "(", "self", ")", ":", "\n", "        ", "\"\"\"Calculate time difference from start.\"\"\"", "\n", "t", "=", "time", ".", "time", "(", ")", "-", "self", ".", "start_time", "\n", "print", "(", "'%s: %.3f'", "%", "(", "self", ".", "id", "(", ")", ",", "t", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.nn.nn_test.NNTest.data": [[42, 47], ["numpy.random.rand"], "methods", ["None"], ["", "@", "property", "\n", "def", "data", "(", "self", ")", ":", "\n", "        ", "\"\"\"Get random input data example.\"\"\"", "\n", "array", "=", "np", ".", "random", ".", "rand", "(", "32", ",", "32", ",", "3", ")", "\n", "return", "array", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.nn.nn_test.NNTest.datas": [[48, 53], ["numpy.random.rand"], "methods", ["None"], ["", "@", "property", "\n", "def", "datas", "(", "self", ")", ":", "\n", "        ", "\"\"\"Get random input data batch.\"\"\"", "\n", "array", "=", "np", ".", "random", ".", "rand", "(", "2", ",", "32", ",", "32", ",", "3", ")", "\n", "return", "array", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.nn.nn_test.NNTest.test_init": [[54, 57], ["nn_test.NNTest.assertIsInstance"], "methods", ["None"], ["", "def", "test_init", "(", "self", ")", ":", "\n", "        ", "\"\"\"Test that object is initialised properly.\"\"\"", "\n", "self", ".", "assertIsInstance", "(", "self", ".", "nn", ",", "NN", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.nn.nn_test.NNTest.test_cost": [[58, 64], ["nn_test.NNTest.assertEqual", "fhez.nn.activation.relu.RELU"], "methods", ["None"], ["", "def", "test_cost", "(", "self", ")", ":", "\n", "        ", "\"\"\"Test that we can get the cost of an edge properly.\"\"\"", "\n", "from", "fhez", ".", "nn", ".", "activation", ".", "relu", "import", "RELU", "\n", "\n", "self", ".", "assertEqual", "(", "self", ".", "nn", ".", "g", ".", "edges", "[", "\"input\"", ",", "\"ReLU\"", ",", "0", "]", "[", "\"cost\"", "]", ",", "\n", "RELU", "(", ")", ".", "cost", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.nn.nn_test.NNTest.test_forward": [[65, 70], ["nn_test.NNTest.nn.forward", "print"], "methods", ["home.repos.pwc.inspect_result.DreamingRaven_python-reseal.loss.mse.MSE.forward"], ["", "def", "test_forward", "(", "self", ")", ":", "\n", "        ", "\"\"\"Testing single input/ example forward pass.\"\"\"", "\n", "a", "=", "self", ".", "nn", ".", "forward", "(", "x", "=", "self", ".", "data", ",", "current_node", "=", "\"input\"", ",", "\n", "end_node", "=", "\"output\"", ")", "\n", "print", "(", "self", ".", "nn", ".", "g", ".", "edges", "[", "\"input\"", ",", "\"ReLU\"", ",", "0", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.nn.nn_test.NNTest.test_forwards": [[71, 76], ["nn_test.NNTest.nn.forwards"], "methods", ["home.repos.pwc.inspect_result.DreamingRaven_python-reseal.graph.node.Node.forwards"], ["", "def", "test_forwards", "(", "self", ")", ":", "\n", "        ", "\"\"\"Testing multi-input/ examples forward pass.\"\"\"", "\n", "a", "=", "self", ".", "nn", ".", "forwards", "(", "xs", "=", "self", ".", "datas", ",", "\n", "current_node", "=", "\"input\"", ",", "\n", "end_node", "=", "\"output\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.nn.nn_test.NNTest.test_backward": [[77, 83], ["nn_test.NNTest.nn.forward", "nn_test.NNTest.nn.backward"], "methods", ["home.repos.pwc.inspect_result.DreamingRaven_python-reseal.loss.mse.MSE.forward", "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.loss.mse.MSE.backward"], ["", "def", "test_backward", "(", "self", ")", ":", "\n", "        ", "\"\"\"Testing single input/ example backward pass.\"\"\"", "\n", "a", "=", "self", ".", "nn", ".", "forward", "(", "x", "=", "self", ".", "data", ",", "current_node", "=", "\"input\"", ",", "\n", "end_node", "=", "\"output\"", ")", "\n", "self", ".", "nn", ".", "backward", "(", "gradient", "=", "1", ",", "current_node", "=", "\"output\"", ",", "\n", "end_node", "=", "\"input\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.nn.nn_test.NNTest.test_backwards": [[84, 91], ["nn_test.NNTest.nn.forwards", "nn_test.NNTest.nn.backwards"], "methods", ["home.repos.pwc.inspect_result.DreamingRaven_python-reseal.graph.node.Node.forwards", "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.graph.node.Node.backwards"], ["", "def", "test_backwards", "(", "self", ")", ":", "\n", "        ", "\"\"\"Testing multi-input/ examples backward pass.\"\"\"", "\n", "a", "=", "self", ".", "nn", ".", "forwards", "(", "xs", "=", "self", ".", "datas", ",", "\n", "current_node", "=", "\"input\"", ",", "\n", "end_node", "=", "\"output\"", ")", "\n", "self", ".", "nn", ".", "backwards", "(", "gradients", "=", "[", "1", ",", "1", "]", ",", "current_node", "=", "\"output\"", ",", "\n", "end_node", "=", "\"input\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.nn.nn_test.NNTest.test_update": [[92, 99], ["nn_test.NNTest.nn.forward", "nn_test.NNTest.nn.backward", "nn_test.NNTest.nn.update"], "methods", ["home.repos.pwc.inspect_result.DreamingRaven_python-reseal.loss.mse.MSE.forward", "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.loss.mse.MSE.backward", "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.loss.mse.MSE.update"], ["", "def", "test_update", "(", "self", ")", ":", "\n", "        ", "\"\"\"Testing multi-input/ example updating.\"\"\"", "\n", "a", "=", "self", ".", "nn", ".", "forward", "(", "x", "=", "self", ".", "data", ",", "current_node", "=", "\"input\"", ",", "\n", "end_node", "=", "\"output\"", ")", "\n", "self", ".", "nn", ".", "backward", "(", "gradient", "=", "1", ",", "current_node", "=", "\"output\"", ",", "\n", "end_node", "=", "\"input\"", ")", "\n", "self", ".", "nn", ".", "update", "(", "current_node", "=", "\"input\"", ",", "end_node", "=", "\"output\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.nn.nn_test.NNTest.test_updates": [[100, 108], ["nn_test.NNTest.nn.forwards", "nn_test.NNTest.nn.backwards", "nn_test.NNTest.nn.updates"], "methods", ["home.repos.pwc.inspect_result.DreamingRaven_python-reseal.graph.node.Node.forwards", "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.graph.node.Node.backwards", "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.loss.mse.MSE.updates"], ["", "def", "test_updates", "(", "self", ")", ":", "\n", "        ", "\"\"\"Testing multi-input/ examples updating.\"\"\"", "\n", "a", "=", "self", ".", "nn", ".", "forwards", "(", "xs", "=", "self", ".", "datas", ",", "\n", "current_node", "=", "\"input\"", ",", "\n", "end_node", "=", "\"output\"", ")", "\n", "self", ".", "nn", ".", "backwards", "(", "gradients", "=", "[", "1", ",", "1", "]", ",", "current_node", "=", "\"output\"", ",", "\n", "end_node", "=", "\"input\"", ")", "\n", "self", ".", "nn", ".", "updates", "(", "current_node", "=", "\"input\"", ",", "end_node", "=", "\"output\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.nn.nn_test.NNTest.test_mnist": [[109, 111], ["None"], "methods", ["None"], ["", "def", "test_mnist", "(", "self", ")", ":", "\n", "        ", "\"\"\"Testing against MNIST.\"\"\"", "\n", "", "", ""]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.traverse.firing.Firing.__init__": [[17, 20], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "graph", "=", "None", ")", ":", "\n", "        ", "\"\"\"Initialise a neuronal firing object, pre-populated.\"\"\"", "\n", "self", ".", "graph", "=", "graph", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.traverse.firing.Firing.graph": [[26, 29], ["None"], "methods", ["None"], ["", "@", "graph", ".", "setter", "\n", "def", "graph", "(", "self", ",", "graph", ")", ":", "\n", "        ", "self", ".", "_graph", "=", "graph", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.traverse.firing.Firing.forward_name": [[30, 33], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "forward_name", "(", "self", ")", ":", "\n", "        ", "return", "\"forward\"", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.traverse.firing.Firing.backward_name": [[34, 37], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "backward_name", "(", "self", ")", ":", "\n", "        ", "return", "\"backward\"", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.traverse.firing.Firing.stimulate": [[38, 75], ["firing.Firing.graph.edges", "zip", "len", "len", "firing.Firing._carry_signal", "outputs.update"], "methods", ["home.repos.pwc.inspect_result.DreamingRaven_python-reseal.traverse.firing.Firing._carry_signal", "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.loss.mse.MSE.update"], ["", "def", "stimulate", "(", "self", ",", "neurons", ":", "np", ".", "ndarray", ",", "signals", ":", "np", ".", "ndarray", ",", "\n", "receptor", "=", "\"forward\"", ",", "debug", "=", "False", ")", ":", "\n", "        ", "\"\"\"Stimulate a set of receptors with a set of signals for response.\n\n        Breadth first stimulation of neurons/ nodes.\n        Note that this is a single simultaneous stimulation and subsequent\n        response. If a neuron does not fire I.E produces no (None) result\n        then that neuron will not be followed until it does produce a result.\n\n        :arg receptors: list of node names to recieve stimulus\n        :type receptors: list(str)\n        :arg signals: positional list of signals for the equally positioned\n            receptor\n        :type signals: np.ndarray or compatible\n        :arg receptor: Name of function/ sequence of functions to call of nodes\n        :type receptor: str\n        \"\"\"", "\n", "assert", "len", "(", "neurons", ")", "==", "len", "(", "signals", ")", ",", "\"Signals and receptors length (axis=0) should match\"", "\n", "\n", "receptor", "=", "receptor", "if", "receptor", "is", "not", "None", "else", "\"forward\"", "\n", "# CLEAR GRAPH OF SPECIFIC RECEPTOR CACHE SO we dont use the existing", "\n", "# partial calculations this also reduces the need for catching", "\n", "# non existant key", "\n", "edges", "=", "self", ".", "graph", ".", "edges", "(", "data", "=", "True", ")", "\n", "for", "e", "in", "edges", ":", "\n", "            ", "e", "[", "2", "]", "[", "receptor", "]", "=", "None", "\n", "\n", "# could use zip longest but zip will ensure atleast some can be", "\n", "# processed since it stops at the shortest of the two lists", "\n", "", "outputs", "=", "{", "}", "\n", "for", "(", "neuron", ",", "signal", ")", "in", "zip", "(", "neurons", ",", "signals", ")", ":", "\n", "            ", "out", "=", "self", ".", "_carry_signal", "(", "\n", "node_name", "=", "neuron", ",", "receptor", "=", "receptor", ",", "\n", "bootstrap", "=", "signal", ",", "debug", "=", "debug", ")", "\n", "outputs", ".", "update", "(", "out", ")", "\n", "", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.traverse.firing.Firing._carry_signal": [[76, 156], ["firing.Firing._get_signal", "firing.Firing._use_signal", "isinstance", "firing.Firing._propogate_signal", "print", "logging.debug", "type", "print", "logging.debug", "numpy.isfinite().all", "len", "firing.Firing.graph.successors", "firing.Firing.probe_shape", "logging.error", "ValueError", "graph.edges", "outputs.get", "firing.Firing._carry_signal", "outputs.update", "isinstance", "numpy.isfinite", "type"], "methods", ["home.repos.pwc.inspect_result.DreamingRaven_python-reseal.traverse.firing.Firing._get_signal", "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.traverse.firing.Firing._use_signal", "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.traverse.firing.Firing._propogate_signal", "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.operations.cc.CC.probe_shape", "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.traverse.firing.Firing._carry_signal", "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.loss.mse.MSE.update", "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.rearray.ReArray.isfinite"], ["", "def", "_carry_signal", "(", "self", ",", "node_name", ",", "receptor", ":", "str", ",", "\n", "bootstrap", ":", "np", ".", "ndarray", "=", "None", ",", "outputs", "=", "None", ",", "debug", "=", "None", ")", ":", "\n", "        ", "\"\"\"Bootstrap and recursiveley carry signal through successor nodes.\"\"\"", "\n", "graph", "=", "self", ".", "graph", "\n", "outputs", "=", "outputs", "if", "outputs", "is", "not", "None", "else", "{", "}", "\n", "debug", "=", "debug", "if", "debug", "is", "not", "None", "else", "False", "\n", "# get signal from edges behind us", "\n", "signal", "=", "self", ".", "_get_signal", "(", "graph", "=", "graph", ",", "node_name", "=", "node_name", ",", "\n", "signal_name", "=", "receptor", ",", "bootstrap", "=", "bootstrap", ")", "\n", "# if node is not ready I.E not all predecessors are processed skip", "\n", "if", "signal", "is", "None", ":", "\n", "            ", "return", "None", "\n", "\n", "# some contextual logging", "\n", "", "msg", "=", "\"{}:\"", ".", "format", "(", "node_name", ")", "\n", "if", "debug", "is", "True", ":", "\n", "            ", "print", "(", "msg", ")", "\n", "", "else", ":", "\n", "            ", "logger", ".", "debug", "(", "msg", ")", "\n", "\n", "# get activation on application of signal to current node", "\n", "", "activation", "=", "self", ".", "_use_signal", "(", "graph", "=", "graph", ",", "\n", "node_name", "=", "node_name", ",", "signal", "=", "signal", ",", "\n", "receptor_name", "=", "receptor", ")", "\n", "\n", "# some incredibly important logging", "\n", "msg", "=", "\"\\trtype: {}, rshape: {}\"", ".", "format", "(", "\n", "type", "(", "activation", ")", ",", "\n", "self", ".", "probe_shape", "(", "activation", ")", "if", "isinstance", "(", "\n", "activation", ",", "(", "types", ".", "GeneratorType", ",", "type", "(", "None", ")", ")", "\n", ")", "is", "not", "True", "else", "\"?\"", ")", "\n", "\n", "if", "debug", "is", "True", ":", "\n", "            ", "print", "(", "msg", ")", "\n", "", "else", ":", "\n", "            ", "logger", ".", "debug", "(", "msg", ")", "\n", "\n", "# TODO: check generators are finite when propagating to next edges", "\n", "", "if", "isinstance", "(", "activation", ",", "types", ".", "GeneratorType", ")", ":", "\n", "            ", "pass", "\n", "# if all of the values in activation are finite values I.E not NaN/ inf", "\n", "", "elif", "np", ".", "isfinite", "(", "activation", ")", ".", "all", "(", ")", ":", "# TODO: add supporting ufunc spec!", "\n", "            ", "pass", "\n", "# if even one value is not finite throw and log!", "\n", "", "else", ":", "\n", "            ", "msg", "=", "\"\\t inputs {} -> became {} in node {} is not finite\"", ".", "format", "(", "\n", "signal", ",", "\n", "activation", ",", "\n", "node_name", ")", "\n", "logger", ".", "error", "(", "msg", ")", "\n", "raise", "ValueError", "(", "\"{} produced a non finite result\"", ".", "format", "(", "\n", "node_name", ")", ")", "\n", "\n", "# if the node has not activated then there is no need to compute", "\n", "", "if", "activation", "is", "None", ":", "\n", "            ", "return", "None", "\n", "\n", "# distibute activation to edges ahead of us", "\n", "", "self", ".", "_propogate_signal", "(", "graph", "=", "graph", ",", "node_name", "=", "node_name", ",", "\n", "signal_name", "=", "receptor", ",", "signal", "=", "activation", ")", "\n", "\n", "if", "len", "(", "graph", ".", "edges", "(", "node_name", ",", "data", "=", "False", ")", ")", "==", "0", ":", "\n", "# this is a terminating node so record output", "\n", "            ", "msg", "=", "\"output from this node: {} already exists somehow\"", ".", "format", "(", "\n", "node_name", "\n", ")", "\n", "assert", "outputs", ".", "get", "(", "node_name", ")", "is", "None", ",", "msg", "\n", "assert", "activation", "is", "not", "None", ",", "\"activation of node cannot be none\"", "\n", "outputs", "[", "node_name", "]", "=", "activation", "# modify reference dictionary", "\n", "", "else", ":", "\n", "# recurse to all successors", "\n", "            ", "for", "next_node_name", "in", "self", ".", "graph", ".", "successors", "(", "node_name", ")", ":", "\n", "                ", "out", "=", "self", ".", "_carry_signal", "(", "\n", "node_name", "=", "next_node_name", ",", "\n", "receptor", "=", "receptor", ",", "\n", "bootstrap", "=", "None", ",", "\n", "outputs", "=", "None", ",", "\n", "debug", "=", "debug", ")", "\n", "outputs", ".", "update", "(", "out", "if", "out", "is", "not", "None", "else", "{", "}", ")", "\n", "", "", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.traverse.firing.Firing._get_signal": [[157, 172], ["graph.in_edges", "edge[].get", "signal.append", "len"], "methods", ["home.repos.pwc.inspect_result.DreamingRaven_python-reseal.graph.dll.DLL.append"], ["", "def", "_get_signal", "(", "self", ",", "graph", ",", "node_name", ",", "signal_name", ",", "bootstrap", "=", "None", ")", ":", "\n", "# Get current nodes signal or bootstrap signal", "\n", "        ", "if", "bootstrap", "is", "None", ":", "\n", "            ", "signal", "=", "[", "]", "\n", "for", "edge", "in", "graph", ".", "in_edges", "(", "node_name", ",", "data", "=", "True", ")", ":", "\n", "# edge = tuple(\"source_node\", \"dest_node\", {attributes})", "\n", "                ", "edge_signal", "=", "edge", "[", "2", "]", ".", "get", "(", "signal_name", ")", "\n", "if", "edge_signal", "is", "None", ":", "\n", "                    ", "return", "None", "# early exit no.1 if signal is nothing avoid", "\n", "", "signal", ".", "append", "(", "edge_signal", ")", "\n", "", "if", "len", "(", "signal", ")", "==", "1", ":", "\n", "                ", "signal", "=", "signal", "[", "0", "]", "\n", "", "", "else", ":", "\n", "            ", "signal", "=", "bootstrap", "\n", "", "return", "signal", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.traverse.firing.Firing._use_signal": [[173, 181], ["getattr", "getattr.", "graph.nodes"], "methods", ["None"], ["", "def", "_use_signal", "(", "self", ",", "graph", ",", "node_name", ",", "receptor_name", ",", "signal", ")", ":", "\n", "        ", "\"\"\"Apply signal to given node in graph, and receptor.\"\"\"", "\n", "# apply signal to current node", "\n", "method", "=", "getattr", "(", "\n", "graph", ".", "nodes", "(", "data", "=", "True", ")", "[", "node_name", "]", "[", "\"node\"", "]", ",", "\n", "receptor_name", ")", "\n", "activation", "=", "method", "(", "signal", ")", "\n", "return", "activation", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.traverse.firing.Firing._propogate_signal": [[182, 192], ["graph.edges", "isinstance", "next"], "methods", ["None"], ["", "def", "_propogate_signal", "(", "self", ",", "graph", ",", "node_name", ",", "signal_name", ",", "signal", ")", ":", "\n", "# distribute output-signal to outbound edges if any", "\n", "        ", "if", "signal", "is", "None", ":", "\n", "            ", "return", "None", "# early exit no signal to propogate", "\n", "", "for", "(", "_", ",", "_", ",", "edge", ")", "in", "graph", ".", "edges", "(", "node_name", ",", "data", "=", "True", ")", ":", "\n", "# if of type YIELD/ generator use next to iterate", "\n", "            ", "if", "isinstance", "(", "signal", ",", "types", ".", "GeneratorType", ")", ":", "\n", "                ", "edge", "[", "signal_name", "]", "=", "next", "(", "signal", ")", "\n", "", "else", ":", "\n", "                ", "edge", "[", "signal_name", "]", "=", "signal", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.traverse.firing.Firing.harvest": [[193, 211], ["firing.Firing._get_signal", "accumulator.append", "firing.Firing._use_signal", "accumulator.append"], "methods", ["home.repos.pwc.inspect_result.DreamingRaven_python-reseal.traverse.firing.Firing._get_signal", "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.graph.dll.DLL.append", "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.traverse.firing.Firing._use_signal", "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.graph.dll.DLL.append"], ["", "", "", "def", "harvest", "(", "self", ",", "node_names", ":", "list", ")", ":", "\n", "        ", "\"\"\"Harvest forward response from neuronal firing, using probes.\n\n        This will replay the last node to calculate its output.\n        \"\"\"", "\n", "accumulator", "=", "[", "]", "\n", "for", "node_name", "in", "node_names", ":", "\n", "            ", "signal", "=", "self", ".", "_get_signal", "(", "graph", "=", "self", ".", "graph", ",", "node_name", "=", "node_name", ",", "\n", "signal_name", "=", "self", ".", "forward_name", ")", "\n", "if", "signal", "is", "None", ":", "\n", "                ", "accumulator", ".", "append", "(", "(", "node_name", ",", "None", ")", ")", "\n", "", "else", ":", "\n", "                ", "activation", "=", "self", ".", "_use_signal", "(", "graph", "=", "self", ".", "graph", ",", "\n", "node_name", "=", "node_name", ",", "\n", "receptor_name", "=", "self", ".", "forward_name", ",", "\n", "signal", "=", "signal", ")", "\n", "accumulator", ".", "append", "(", "(", "node_name", ",", "activation", ")", ")", "\n", "", "", "return", "accumulator", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.traverse.firing.Firing.correction": [[212, 218], ["None"], "methods", ["None"], ["", "def", "correction", "(", "self", ",", "signals", ",", "receptors", ")", ":", "\n", "        ", "\"\"\"Calculate/ learn correction necessary to become closer to our goal.\n\n        :arg signals: signal to be induced in corresponding receptor\n        :arg receptors: receptor to be signaled\n        \"\"\"", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.traverse.firing.Firing.adaptation": [[219, 221], ["None"], "methods", ["None"], ["", "def", "adaptation", "(", "self", ")", ":", "\n", "        ", "\"\"\"Correct nodes based on learnt gradient.\"\"\"", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.traverse.firing.Firing.probe_shape": [[222, 239], ["isinstance", "isinstance", "firing.Firing.probe_shape", "len", "len"], "methods", ["home.repos.pwc.inspect_result.DreamingRaven_python-reseal.operations.cc.CC.probe_shape"], ["", "def", "probe_shape", "(", "self", ",", "lst", ":", "list", ")", ":", "\n", "        ", "\"\"\"Get the shape of a list, assuming each sublist is the same length.\n\n        This function is recursive, sending the sublists down and terminating\n        once a type error is thrown by the final point being a non-list\n        \"\"\"", "\n", "if", "isinstance", "(", "lst", ",", "list", ")", ":", "\n", "# try appending current length with recurse of sublist", "\n", "            ", "try", ":", "\n", "                ", "return", "(", "len", "(", "lst", ")", ",", ")", "+", "self", ".", "probe_shape", "(", "lst", "[", "0", "]", ")", "\n", "# once we bottom out and get some non-list type abort and pull up", "\n", "", "except", "(", "AttributeError", ",", "IndexError", ")", ":", "\n", "                ", "return", "(", "len", "(", "lst", ")", ",", ")", "\n", "", "", "elif", "isinstance", "(", "lst", ",", "(", "int", ",", "float", ")", ")", ":", "\n", "            ", "return", "(", "1", ",", ")", "\n", "", "else", ":", "\n", "            ", "return", "lst", ".", "shape", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.traverse.firing_test.FiringTest.setUp": [[20, 23], ["time.time"], "methods", ["None"], ["def", "setUp", "(", "self", ")", ":", "\n", "        ", "\"\"\"Start timer and init variables.\"\"\"", "\n", "self", ".", "start_time", "=", "time", ".", "time", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.traverse.firing_test.FiringTest.tearDown": [[24, 28], ["print", "time.time", "firing_test.FiringTest.id"], "methods", ["None"], ["", "def", "tearDown", "(", "self", ")", ":", "\n", "        ", "\"\"\"Calculate and print time delta.\"\"\"", "\n", "t", "=", "time", ".", "time", "(", ")", "-", "self", ".", "start_time", "\n", "print", "(", "'%s: %.3f'", "%", "(", "self", ".", "id", "(", ")", ",", "t", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.traverse.firing_test.FiringTest.data_shape": [[29, 33], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "data_shape", "(", "self", ")", ":", "\n", "        ", "\"\"\"Define desired data shape.\"\"\"", "\n", "return", "(", "28", ",", "28", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.traverse.firing_test.FiringTest.data": [[34, 39], ["numpy.random.rand"], "methods", ["None"], ["", "@", "property", "\n", "def", "data", "(", "self", ")", ":", "\n", "        ", "\"\"\"Get some generated data.\"\"\"", "\n", "array", "=", "np", ".", "random", ".", "rand", "(", "*", "self", ".", "data_shape", ")", "\n", "return", "array", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.traverse.firing_test.FiringTest.reseal_args": [[40, 51], ["pow"], "methods", ["None"], ["", "@", "property", "\n", "def", "reseal_args", "(", "self", ")", ":", "\n", "        ", "\"\"\"Get some reseal arguments for encryption.\"\"\"", "\n", "return", "{", "\n", "\"scheme\"", ":", "2", ",", "# seal.scheme_type.CKK,", "\n", "\"poly_modulus_degree\"", ":", "8192", "*", "2", ",", "# 438", "\n", "# \"coefficient_modulus\": [60, 40, 40, 60],", "\n", "\"coefficient_modulus\"", ":", "\n", "[", "45", ",", "30", ",", "30", ",", "30", ",", "30", ",", "30", ",", "30", ",", "30", ",", "30", ",", "30", ",", "30", ",", "45", "]", ",", "\n", "\"scale\"", ":", "pow", "(", "2.0", ",", "30", ")", ",", "\n", "\"cache\"", ":", "True", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.traverse.firing_test.FiringTest.graph": [[53, 57], ["fhez.nn.graph.prefab.cnn_classifier"], "methods", ["home.repos.pwc.inspect_result.DreamingRaven_python-reseal.graph.prefab.cnn_classifier"], ["", "@", "property", "\n", "def", "graph", "(", "self", ")", ":", "\n", "        ", "\"\"\"Get neuron/ computational graph to test against.\"\"\"", "\n", "return", "cnn_classifier", "(", "10", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.traverse.firing_test.FiringTest.test_stimulate_forward": [[58, 65], ["fhez.nn.traverse.firing.Firing", "fhez.nn.traverse.firing.Firing.stimulate", "firing_test.FiringTest.assertNotEqual"], "methods", ["home.repos.pwc.inspect_result.DreamingRaven_python-reseal.traverse.firing.Firing.stimulate"], ["", "def", "test_stimulate_forward", "(", "self", ")", ":", "\n", "        ", "\"\"\"Check neuronal firing algorithm forward stimulation of graph.\"\"\"", "\n", "graph", "=", "self", ".", "graph", "\n", "data", "=", "self", ".", "data", "\n", "f", "=", "Firing", "(", "graph", "=", "graph", ")", "\n", "output", "=", "f", ".", "stimulate", "(", "neurons", "=", "[", "\"x\"", ",", "\"y\"", "]", ",", "signals", "=", "[", "data", ",", "1", "]", ")", "\n", "self", ".", "assertNotEqual", "(", "output", ",", "{", "}", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.traverse.firing_test.FiringTest.test_stimulate_backward": [[66, 78], ["fhez.nn.traverse.firing.Firing", "fhez.nn.traverse.firing.Firing.stimulate", "firing_test.FiringTest.assertNotEqual", "fhez.nn.traverse.firing.Firing", "fhez.nn.traverse.firing.Firing.stimulate", "firing_test.FiringTest.assertFalse", "graph.reverse", "fhez.nn.traverse.firing.Firing.stimulate.get"], "methods", ["home.repos.pwc.inspect_result.DreamingRaven_python-reseal.traverse.firing.Firing.stimulate", "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.traverse.firing.Firing.stimulate"], ["", "def", "test_stimulate_backward", "(", "self", ")", ":", "\n", "        ", "\"\"\"Check neuronal firing algorithm forward stimulation of graph.\"\"\"", "\n", "graph", "=", "self", ".", "graph", "\n", "data", "=", "self", ".", "data", "\n", "forward", "=", "Firing", "(", "graph", "=", "graph", ")", "\n", "output", "=", "forward", ".", "stimulate", "(", "neurons", "=", "[", "\"x\"", ",", "\"y\"", "]", ",", "signals", "=", "[", "data", ",", "1", "]", ")", "\n", "self", ".", "assertNotEqual", "(", "output", ",", "{", "}", ")", "\n", "backward", "=", "Firing", "(", "graph", "=", "graph", ".", "reverse", "(", "copy", "=", "False", ")", ")", "\n", "grads", "=", "backward", ".", "stimulate", "(", "neurons", "=", "[", "\"Loss-CCE\"", ",", "\"y_hat\"", "]", ",", "\n", "signals", "=", "[", "output", "[", "\"Loss-CCE\"", "]", ",", "0", "]", ",", "\n", "receptor", "=", "\"backward\"", ")", "\n", "self", ".", "assertFalse", "(", "grads", ".", "get", "(", "\"x\"", ")", "is", "None", ",", "\"There is no input grad x!\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.traverse.firing_test.FiringTest.test_single_train": [[79, 93], ["fhez.nn.traverse.firing.Firing", "fhez.nn.traverse.firing.Firing.stimulate", "firing_test.FiringTest.assertNotEqual", "fhez.nn.traverse.firing.Firing", "fhez.nn.traverse.firing.Firing.stimulate", "graph.nodes", "node.updates", "graph.reverse"], "methods", ["home.repos.pwc.inspect_result.DreamingRaven_python-reseal.traverse.firing.Firing.stimulate", "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.traverse.firing.Firing.stimulate", "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.loss.mse.MSE.updates"], ["", "def", "test_single_train", "(", "self", ")", ":", "\n", "        ", "graph", "=", "self", ".", "graph", "\n", "data", "=", "self", ".", "data", "\n", "forward", "=", "Firing", "(", "graph", "=", "graph", ")", "\n", "output", "=", "forward", ".", "stimulate", "(", "neurons", "=", "[", "\"x\"", ",", "\"y\"", "]", ",", "signals", "=", "[", "data", ",", "1", "]", ")", "\n", "self", ".", "assertNotEqual", "(", "output", ",", "{", "}", ")", "\n", "backward", "=", "Firing", "(", "graph", "=", "graph", ".", "reverse", "(", "copy", "=", "False", ")", ")", "\n", "grads", "=", "backward", ".", "stimulate", "(", "neurons", "=", "[", "\"Loss-CCE\"", ",", "\"y_hat\"", "]", ",", "\n", "signals", "=", "[", "output", "[", "\"Loss-CCE\"", "]", ",", "0", "]", ",", "\n", "receptor", "=", "\"backward\"", ")", "\n", "for", "node_meta", "in", "graph", ".", "nodes", "(", "data", "=", "True", ")", ":", "\n", "            ", "node_name", "=", "node_meta", "[", "0", "]", "\n", "node", "=", "node_meta", "[", "1", "]", "[", "\"node\"", "]", "\n", "node", ".", "updates", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.traverse.firing_test.FiringTest.test_get_signal_many": [[94, 116], ["numpy.array", "networkx.MultiDiGraph", "networkx.MultiDiGraph.add_node", "networkx.MultiDiGraph.add_node", "networkx.MultiDiGraph.add_node", "networkx.MultiDiGraph.add_edge", "networkx.MultiDiGraph.add_edge", "networkx.MultiDiGraph.add_edge", "networkx.MultiDiGraph.add_edge", "fhez.nn.traverse.firing.Firing", "fhez.nn.traverse.firing.Firing._get_signal", "numpy.broadcast_to", "numpy.testing.assert_array_almost_equal", "fhez.nn.graph.io.IO", "fhez.nn.graph.io.IO", "fhez.nn.graph.io.IO"], "methods", ["home.repos.pwc.inspect_result.DreamingRaven_python-reseal.traverse.firing.Firing._get_signal"], ["", "", "def", "test_get_signal_many", "(", "self", ")", ":", "\n", "        ", "\"\"\"Check get multi signal is working as expected.\n\n        This includes considering parallel edges, and standard multi edges.\n        \"\"\"", "\n", "# create a graph with 3 parallel edges from one node and one other", "\n", "some_signal", "=", "np", ".", "array", "(", "[", "1", ",", "2", ",", "3", "]", ")", "\n", "graph", "=", "nx", ".", "MultiDiGraph", "(", ")", "\n", "graph", ".", "add_node", "(", "\"x\"", ",", "node", "=", "IO", "(", ")", ")", "\n", "graph", ".", "add_node", "(", "\"a\"", ",", "node", "=", "IO", "(", ")", ")", "\n", "graph", ".", "add_node", "(", "\"y\"", ",", "node", "=", "IO", "(", ")", ")", "# from this node", "\n", "graph", ".", "add_edge", "(", "\"x\"", ",", "\"y\"", ",", "fwd", "=", "some_signal", ")", "\n", "graph", ".", "add_edge", "(", "\"x\"", ",", "\"y\"", ",", "fwd", "=", "some_signal", ")", "\n", "graph", ".", "add_edge", "(", "\"x\"", ",", "\"y\"", ",", "fwd", "=", "some_signal", ")", "\n", "graph", ".", "add_edge", "(", "\"a\"", ",", "\"y\"", ",", "fwd", "=", "some_signal", ")", "\n", "f", "=", "Firing", "(", ")", "\n", "signal", "=", "f", ".", "_get_signal", "(", "graph", "=", "graph", ",", "node_name", "=", "\"y\"", ",", "signal_name", "=", "\"fwd\"", ")", "\n", "truth", "=", "np", ".", "broadcast_to", "(", "some_signal", ",", "shape", "=", "(", "4", ",", "3", ")", ")", "\n", "# should return all inputs in meta container of shape (4,3) here", "\n", "np", ".", "testing", ".", "assert_array_almost_equal", "(", "signal", ",", "truth", ",", "\n", "decimal", "=", "1", ",", "\n", "verbose", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.traverse.firing_test.FiringTest.test_get_signal_one": [[117, 133], ["numpy.array", "networkx.MultiDiGraph", "networkx.MultiDiGraph.add_node", "networkx.MultiDiGraph.add_node", "networkx.MultiDiGraph.add_edge", "fhez.nn.traverse.firing.Firing", "fhez.nn.traverse.firing.Firing._get_signal", "numpy.testing.assert_array_almost_equal", "fhez.nn.graph.io.IO", "fhez.nn.graph.io.IO"], "methods", ["home.repos.pwc.inspect_result.DreamingRaven_python-reseal.traverse.firing.Firing._get_signal"], ["", "def", "test_get_signal_one", "(", "self", ")", ":", "\n", "        ", "\"\"\"Check get single signal is working as expected.\n\n        This includes single edges which should not be in a meta container.\n        \"\"\"", "\n", "some_signal", "=", "np", ".", "array", "(", "[", "1", ",", "2", ",", "3", "]", ")", "\n", "graph", "=", "nx", ".", "MultiDiGraph", "(", ")", "\n", "graph", ".", "add_node", "(", "\"x\"", ",", "node", "=", "IO", "(", ")", ")", "\n", "graph", ".", "add_node", "(", "\"y\"", ",", "node", "=", "IO", "(", ")", ")", "# from this node", "\n", "graph", ".", "add_edge", "(", "\"x\"", ",", "\"y\"", ",", "fwd", "=", "some_signal", ")", "\n", "f", "=", "Firing", "(", ")", "\n", "signal", "=", "f", ".", "_get_signal", "(", "graph", "=", "graph", ",", "node_name", "=", "\"y\"", ",", "signal_name", "=", "\"fwd\"", ")", "\n", "# should return just the input without meta container", "\n", "np", ".", "testing", ".", "assert_array_almost_equal", "(", "signal", ",", "some_signal", ",", "\n", "decimal", "=", "1", ",", "\n", "verbose", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.traverse.firing_test.FiringTest.test_get_signal_none": [[134, 153], ["numpy.array", "networkx.MultiDiGraph", "networkx.MultiDiGraph.add_node", "networkx.MultiDiGraph.add_node", "networkx.MultiDiGraph.add_node", "networkx.MultiDiGraph.add_edge", "networkx.MultiDiGraph.add_edge", "networkx.MultiDiGraph.add_edge", "networkx.MultiDiGraph.add_edge", "fhez.nn.traverse.firing.Firing", "fhez.nn.traverse.firing.Firing._get_signal", "firing_test.FiringTest.assertEqual", "fhez.nn.graph.io.IO", "fhez.nn.graph.io.IO", "fhez.nn.graph.io.IO"], "methods", ["home.repos.pwc.inspect_result.DreamingRaven_python-reseal.traverse.firing.Firing._get_signal"], ["", "def", "test_get_signal_none", "(", "self", ")", ":", "\n", "        ", "\"\"\"Check get non-existant signal is working as expected.\n\n        If the node does not have all of its inputs then it is not ready.\n        So getsignal should return None as the signal is incomplete.\n        \"\"\"", "\n", "# create a graph with 3 parallel edges from one node and one other", "\n", "some_signal", "=", "np", ".", "array", "(", "[", "1", ",", "2", ",", "3", "]", ")", "\n", "graph", "=", "nx", ".", "MultiDiGraph", "(", ")", "\n", "graph", ".", "add_node", "(", "\"x\"", ",", "node", "=", "IO", "(", ")", ")", "\n", "graph", ".", "add_node", "(", "\"a\"", ",", "node", "=", "IO", "(", ")", ")", "\n", "graph", ".", "add_node", "(", "\"y\"", ",", "node", "=", "IO", "(", ")", ")", "# from this node", "\n", "graph", ".", "add_edge", "(", "\"x\"", ",", "\"y\"", ",", "fwd", "=", "some_signal", ")", "\n", "graph", ".", "add_edge", "(", "\"x\"", ",", "\"y\"", ")", "# some missing signal", "\n", "graph", ".", "add_edge", "(", "\"x\"", ",", "\"y\"", ",", "fwd", "=", "some_signal", ")", "\n", "graph", ".", "add_edge", "(", "\"a\"", ",", "\"y\"", ",", "fwd", "=", "some_signal", ")", "\n", "f", "=", "Firing", "(", ")", "\n", "signal", "=", "f", ".", "_get_signal", "(", "graph", "=", "graph", ",", "node_name", "=", "\"y\"", ",", "signal_name", "=", "\"fwd\"", ")", "\n", "self", ".", "assertEqual", "(", "signal", ",", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.traverse.firing_test.FiringTest.test_use_signal": [[154, 169], ["numpy.array", "numpy.broadcast_to", "networkx.MultiDiGraph", "networkx.MultiDiGraph.add_node", "fhez.nn.traverse.firing.Firing", "fhez.nn.traverse.firing.Firing._use_signal", "fhez.nn.activation.relu.RELU().forward", "numpy.testing.assert_array_almost_equal", "firing_test.FiringTest.assertEqual", "len", "fhez.nn.activation.relu.RELU", "fhez.nn.activation.relu.RELU", "networkx.MultiDiGraph.nodes"], "methods", ["home.repos.pwc.inspect_result.DreamingRaven_python-reseal.traverse.firing.Firing._use_signal", "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.loss.mse.MSE.forward"], ["", "def", "test_use_signal", "(", "self", ")", ":", "\n", "        ", "\"\"\"Check that func is modifying the state of the node properly.\"\"\"", "\n", "some_signal", "=", "np", ".", "array", "(", "[", "1", ",", "0.5", ",", "0", "]", ")", "\n", "some_signal", "=", "np", ".", "broadcast_to", "(", "some_signal", ",", "shape", "=", "(", "4", ",", "3", ")", ")", "\n", "graph", "=", "nx", ".", "MultiDiGraph", "(", ")", "\n", "graph", ".", "add_node", "(", "\"y\"", ",", "node", "=", "RELU", "(", ")", ")", "\n", "f", "=", "Firing", "(", ")", "\n", "activation", "=", "f", ".", "_use_signal", "(", "graph", "=", "graph", ",", "node_name", "=", "\"y\"", ",", "\n", "receptor_name", "=", "\"forward\"", ",", "signal", "=", "some_signal", ")", "\n", "activation_truth", "=", "RELU", "(", ")", ".", "forward", "(", "some_signal", ")", "\n", "np", ".", "testing", ".", "assert_array_almost_equal", "(", "activation", ",", "activation_truth", ",", "\n", "decimal", "=", "1", ",", "\n", "verbose", "=", "True", ")", "\n", "# quick check to ensure RELU actually did see the input", "\n", "self", ".", "assertEqual", "(", "len", "(", "graph", ".", "nodes", "(", "data", "=", "True", ")", "[", "\"y\"", "]", "[", "\"node\"", "]", ".", "inputs", ")", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.traverse.firing_test.FiringTest.test_propogate_signal": [[170, 196], ["numpy.array", "networkx.MultiDiGraph", "networkx.MultiDiGraph.add_node", "networkx.MultiDiGraph.add_node", "networkx.MultiDiGraph.add_node", "networkx.MultiDiGraph.add_edge", "networkx.MultiDiGraph.add_edge", "networkx.MultiDiGraph.add_edge", "networkx.MultiDiGraph.add_edge", "fhez.nn.traverse.firing.Firing", "fhez.nn.traverse.firing.Firing._propogate_signal", "networkx.MultiDiGraph.edges", "networkx.MultiDiGraph.edges", "numpy.testing.assert_array_almost_equal", "firing_test.FiringTest.assertEqual", "fhez.nn.graph.io.IO", "fhez.nn.graph.io.IO", "fhez.nn.graph.io.IO", "edge[].get"], "methods", ["home.repos.pwc.inspect_result.DreamingRaven_python-reseal.traverse.firing.Firing._propogate_signal"], ["", "def", "test_propogate_signal", "(", "self", ")", ":", "\n", "        ", "\"\"\"Check that signal propogation occurs properly for all edges.\n\n        This is standard iterable return NOT YIELD, applied to each edge.\n        \"\"\"", "\n", "some_signal", "=", "np", ".", "array", "(", "[", "1", ",", "2", ",", "3", "]", ")", "\n", "graph", "=", "nx", ".", "MultiDiGraph", "(", ")", "\n", "graph", ".", "add_node", "(", "\"x\"", ",", "node", "=", "IO", "(", ")", ")", "# from this node", "\n", "graph", ".", "add_node", "(", "\"a\"", ",", "node", "=", "IO", "(", ")", ")", "\n", "graph", ".", "add_node", "(", "\"y\"", ",", "node", "=", "IO", "(", ")", ")", "\n", "graph", ".", "add_edge", "(", "\"x\"", ",", "\"y\"", ")", "# no signals yet", "\n", "graph", ".", "add_edge", "(", "\"x\"", ",", "\"y\"", ")", "\n", "graph", ".", "add_edge", "(", "\"x\"", ",", "\"y\"", ")", "\n", "graph", ".", "add_edge", "(", "\"a\"", ",", "\"y\"", ")", "# should never recieve a signal", "\n", "f", "=", "Firing", "(", ")", "\n", "f", ".", "_propogate_signal", "(", "graph", "=", "graph", ",", "node_name", "=", "\"x\"", ",", "signal_name", "=", "\"fwd\"", ",", "\n", "signal", "=", "some_signal", ")", "\n", "# check signal has been applied to each individually", "\n", "for", "edge", "in", "graph", ".", "edges", "(", "\"x\"", ",", "data", "=", "True", ")", ":", "\n", "            ", "np", ".", "testing", ".", "assert_array_almost_equal", "(", "edge", "[", "2", "]", "[", "\"fwd\"", "]", ",", "\n", "some_signal", ",", "\n", "decimal", "=", "1", ",", "\n", "verbose", "=", "True", ")", "\n", "# check not applied to seperate node", "\n", "", "for", "edge", "in", "graph", ".", "edges", "(", "\"a\"", ",", "data", "=", "True", ")", ":", "\n", "            ", "self", ".", "assertEqual", "(", "edge", "[", "2", "]", ".", "get", "(", "\"fwd\"", ")", ",", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.traverse.firing_test.FiringTest.test_propogate_signal_yield": [[197, 233], ["firing_test.FiringTest.test_propogate_signal_yield.yielder"], "methods", ["None"], ["", "", "def", "test_propogate_signal_yield", "(", "self", ")", ":", "\n", "        ", "\"\"\"Check that propogate signal works properly with yield.\n\n        If the signal is of type generator/ yield it should map each output\n        in order with the graph edges. Thus the edges can be different to one\n        another.\n        \"\"\"", "\n", "def", "yielder", "(", ")", ":", "\n", "            ", "i", "=", "0", "# np.array([0]) <- would return by reference", "\n", "while", "True", ":", "\n", "                ", "yield", "i", "\n", "i", "+=", "1", "\n", "", "", "some_signal", "=", "yielder", "(", ")", "# as generator", "\n", "graph", "=", "nx", ".", "MultiDiGraph", "(", ")", "\n", "graph", ".", "add_node", "(", "\"x\"", ",", "node", "=", "IO", "(", ")", ")", "# from this node", "\n", "graph", ".", "add_node", "(", "\"a\"", ",", "node", "=", "IO", "(", ")", ")", "\n", "graph", ".", "add_node", "(", "\"y\"", ",", "node", "=", "IO", "(", ")", ")", "\n", "graph", ".", "add_edge", "(", "\"x\"", ",", "\"y\"", ")", "# no signals yet", "\n", "graph", ".", "add_edge", "(", "\"x\"", ",", "\"y\"", ")", "\n", "graph", ".", "add_edge", "(", "\"x\"", ",", "\"y\"", ")", "\n", "graph", ".", "add_edge", "(", "\"x\"", ",", "\"DrWho?\"", ")", "# checking works with non yield too", "\n", "graph", ".", "add_edge", "(", "\"a\"", ",", "\"y\"", ")", "# should never recieve a signal", "\n", "f", "=", "Firing", "(", ")", "\n", "f", ".", "_propogate_signal", "(", "graph", "=", "graph", ",", "node_name", "=", "\"x\"", ",", "signal_name", "=", "\"fwd\"", ",", "\n", "signal", "=", "some_signal", ")", "\n", "# check signal has been applied to each individually", "\n", "truth", "=", "yielder", "(", ")", "\n", "for", "(", "_", ",", "_", ",", "edge", ")", "in", "graph", ".", "edges", "(", "\"x\"", ",", "data", "=", "True", ")", ":", "\n", "            ", "np", ".", "testing", ".", "assert_array_almost_equal", "(", "edge", "[", "\"fwd\"", "]", ",", "\n", "next", "(", "truth", ")", ",", "\n", "decimal", "=", "1", ",", "\n", "verbose", "=", "True", ")", "\n", "\n", "# check not applied to seperate node", "\n", "", "for", "edge", "in", "graph", ".", "edges", "(", "\"a\"", ",", "data", "=", "True", ")", ":", "\n", "            ", "self", ".", "assertEqual", "(", "edge", "[", "2", "]", ".", "get", "(", "\"fwd\"", ")", ",", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.traverse.firing_test.FiringTest.test_propogate_none": [[234, 255], ["networkx.MultiDiGraph", "networkx.MultiDiGraph.add_node", "networkx.MultiDiGraph.add_node", "networkx.MultiDiGraph.add_node", "networkx.MultiDiGraph.add_edge", "networkx.MultiDiGraph.add_edge", "networkx.MultiDiGraph.add_edge", "networkx.MultiDiGraph.add_edge", "fhez.nn.traverse.firing.Firing", "fhez.nn.traverse.firing.Firing._propogate_signal", "networkx.MultiDiGraph.edges", "networkx.MultiDiGraph.edges", "firing_test.FiringTest.assertEqual", "fhez.nn.graph.io.IO", "fhez.nn.graph.io.IO", "fhez.nn.graph.io.IO", "firing_test.FiringTest.assertRaises", "edge[].get"], "methods", ["home.repos.pwc.inspect_result.DreamingRaven_python-reseal.traverse.firing.Firing._propogate_signal"], ["", "", "def", "test_propogate_none", "(", "self", ")", ":", "\n", "        ", "\"\"\"Check that signal propogation does not occur when signal=None.\"\"\"", "\n", "some_signal", "=", "None", "\n", "graph", "=", "nx", ".", "MultiDiGraph", "(", ")", "\n", "graph", ".", "add_node", "(", "\"x\"", ",", "node", "=", "IO", "(", ")", ")", "# from this node", "\n", "graph", ".", "add_node", "(", "\"a\"", ",", "node", "=", "IO", "(", ")", ")", "\n", "graph", ".", "add_node", "(", "\"y\"", ",", "node", "=", "IO", "(", ")", ")", "\n", "graph", ".", "add_edge", "(", "\"x\"", ",", "\"y\"", ")", "# no signals yet", "\n", "graph", ".", "add_edge", "(", "\"x\"", ",", "\"y\"", ")", "\n", "graph", ".", "add_edge", "(", "\"x\"", ",", "\"y\"", ")", "\n", "graph", ".", "add_edge", "(", "\"a\"", ",", "\"y\"", ")", "# should never recieve a signal", "\n", "f", "=", "Firing", "(", ")", "\n", "f", ".", "_propogate_signal", "(", "graph", "=", "graph", ",", "node_name", "=", "\"x\"", ",", "signal_name", "=", "\"fwd\"", ",", "\n", "signal", "=", "some_signal", ")", "\n", "# check signal has not been applied to each edge", "\n", "for", "edge", "in", "graph", ".", "edges", "(", "\"x\"", ",", "data", "=", "True", ")", ":", "\n", "            ", "with", "self", ".", "assertRaises", "(", "KeyError", ")", ":", "\n", "                ", "edge", "[", "2", "]", "[", "\"fwd\"", "]", "\n", "# check not applied to seperate node", "\n", "", "", "for", "edge", "in", "graph", ".", "edges", "(", "\"a\"", ",", "data", "=", "True", ")", ":", "\n", "            ", "self", ".", "assertEqual", "(", "edge", "[", "2", "]", ".", "get", "(", "\"fwd\"", ")", ",", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.traverse.firing_test.FiringTest.test_harvest": [[256, 274], ["numpy.array", "networkx.MultiDiGraph", "networkx.MultiDiGraph.add_node", "networkx.MultiDiGraph.add_node", "networkx.MultiDiGraph.add_node", "networkx.MultiDiGraph.add_edge", "networkx.MultiDiGraph.add_edge", "networkx.MultiDiGraph.add_edge", "networkx.MultiDiGraph.add_edge", "fhez.nn.traverse.firing.Firing", "fhez.nn.traverse.firing.Firing.harvest", "numpy.broadcast_to", "numpy.testing.assert_array_almost_equal", "fhez.nn.graph.io.IO", "fhez.nn.graph.io.IO", "fhez.nn.graph.io.IO"], "methods", ["home.repos.pwc.inspect_result.DreamingRaven_python-reseal.traverse.firing.Firing.harvest"], ["", "", "def", "test_harvest", "(", "self", ")", ":", "\n", "        ", "\"\"\"Check that probes are harvesting signals.\"\"\"", "\n", "some_signal", "=", "np", ".", "array", "(", "[", "1", ",", "2", ",", "3", "]", ")", "\n", "graph", "=", "nx", ".", "MultiDiGraph", "(", ")", "\n", "graph", ".", "add_node", "(", "\"x\"", ",", "node", "=", "IO", "(", ")", ")", "\n", "graph", ".", "add_node", "(", "\"a\"", ",", "node", "=", "IO", "(", ")", ")", "\n", "graph", ".", "add_node", "(", "\"y\"", ",", "node", "=", "IO", "(", ")", ")", "# from this node", "\n", "graph", ".", "add_edge", "(", "\"x\"", ",", "\"y\"", ",", "forward", "=", "some_signal", ")", "\n", "graph", ".", "add_edge", "(", "\"x\"", ",", "\"y\"", ",", "forward", "=", "some_signal", ")", "\n", "graph", ".", "add_edge", "(", "\"x\"", ",", "\"y\"", ",", "forward", "=", "some_signal", ")", "\n", "graph", ".", "add_edge", "(", "\"a\"", ",", "\"y\"", ",", "forward", "=", "some_signal", ")", "\n", "f", "=", "Firing", "(", "graph", "=", "graph", ")", "\n", "crop", "=", "f", ".", "harvest", "(", "[", "\"y\"", ",", "\"y\"", "]", ")", "\n", "truth", "=", "np", ".", "broadcast_to", "(", "some_signal", ",", "shape", "=", "(", "4", ",", "3", ")", ")", "\n", "for", "(", "_", ",", "signal", ")", "in", "crop", ":", "\n", "            ", "np", ".", "testing", ".", "assert_array_almost_equal", "(", "signal", ",", "truth", ",", "\n", "decimal", "=", "1", ",", "\n", "verbose", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.traverse.firing_test.FiringTest.test_todo": [[275, 278], ["NotImplementedError"], "methods", ["None"], ["", "", "def", "test_todo", "(", "self", ")", ":", "\n", "        ", "\"\"\"Todo note to fail tests so it cant be forgotten.\"\"\"", "\n", "raise", "NotImplementedError", "(", "\"traversal+harvest loop not tested!\"", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.graph.prefab.cnn_regressor": [[37, 99], ["networkx.MultiDiGraph", "fhez.nn.operations.cc.CC().windex", "nx.MultiDiGraph.add_node", "nx.MultiDiGraph.add_node", "nx.MultiDiGraph.add_node", "nx.MultiDiGraph.add_edge", "nx.MultiDiGraph.add_node", "nx.MultiDiGraph.add_edge", "nx.MultiDiGraph.add_node", "range", "nx.MultiDiGraph.add_node", "nx.MultiDiGraph.add_edge", "nx.MultiDiGraph.add_node", "nx.MultiDiGraph.add_edge", "nx.MultiDiGraph.add_node", "nx.MultiDiGraph.add_edge", "nx.MultiDiGraph.add_node", "nx.MultiDiGraph.add_edge", "nx.MultiDiGraph.add_node", "nx.MultiDiGraph.add_edge", "nx.MultiDiGraph.add_node", "nx.MultiDiGraph.add_edge", "nx.MultiDiGraph.add_edge", "nx.MultiDiGraph.add_node", "nx.MultiDiGraph.add_edge", "len", "nx.MultiDiGraph.add_node", "nx.MultiDiGraph.add_edge", "nx.MultiDiGraph.add_edge", "fhez.nn.operations.cc.CC", "fhez.nn.operations.rotate.Rotate", "fhez.nn.operations.rotate.Rotate", "fhez.nn.operations.cc.CC", "fhez.nn.operations.dequeue.Dequeue", "fhez.nn.operations.enqueue.Enqueue", "fhez.nn.activation.relu.RELU", "fhez.nn.layer.ann.ANN", "fhez.nn.activation.relu.RELU", "fhez.nn.operations.decrypt.Decrypt", "fhez.nn.operations.selector.Selector", "fhez.nn.loss.mse.MSE", "fhez.nn.graph.io.IO", "fhez.nn.operations.sum.Sum", "fhez.nn.layer.ann.ANN", "fhez.nn.loss.mse.MSE", "fhez.nn.loss.mse.MSE", "fhez.nn.graph.io.IO", "len", "len"], "function", ["home.repos.pwc.inspect_result.DreamingRaven_python-reseal.operations.cc.CC.windex"], ["def", "cnn_regressor", "(", "data_shape", ",", "filter_length", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"\"\"Get simple 1 Layer 1D-CNN for time-series regression.\n\n    :arg data_shape: The shape of the input data in the shape format of\n     (timesteps, features)\n    :type data_shape: tuple\n    :arg filter_length: The length of the 1D CNN filter which to CC over data\n    :type filter_length: int\n    :arg stride: The steps between filters (default = 1)\n    :type stride: int\n    :return: neural network graph\n    :rtype: networkx.MultiDigGraph\n    \"\"\"", "\n", "graph", "=", "nx", ".", "MultiDiGraph", "(", ")", "\n", "data_shape", "=", "data_shape", "\n", "filter_shape", "=", "(", "filter_length", ",", "data_shape", "[", "1", "]", ")", "\n", "stride", "=", "[", "stride", ",", "data_shape", "[", "1", "]", "]", "\n", "# creating window expression so we know how many nodes we need", "\n", "windows", "=", "CC", "(", ")", ".", "windex", "(", "data_shape", ",", "\n", "filter_shape", ",", "\n", "stride", ")", "\n", "\n", "# INPUTS", "\n", "graph", ".", "add_node", "(", "\"x\"", ",", "group", "=", "0", ",", "node", "=", "Rotate", "(", ")", ")", "\n", "graph", ".", "add_node", "(", "\"y\"", ",", "group", "=", "0", ",", "node", "=", "Rotate", "(", ")", ")", "\n", "\n", "# 1D CNN/ CC", "\n", "graph", ".", "add_node", "(", "\"1D-CC\"", ",", "group", "=", "1", ",", "\n", "node", "=", "CC", "(", "weights", "=", "filter_shape", ",", "stride", "=", "stride", ",", "bias", "=", "0", ")", ")", "\n", "graph", ".", "add_edge", "(", "\"x\"", ",", "\"1D-CC\"", ")", "\n", "graph", ".", "add_node", "(", "\"CC-dequeue\"", ",", "group", "=", "6", ",", "node", "=", "Dequeue", "(", ")", ")", "\n", "graph", ".", "add_edge", "(", "\"1D-CC\"", ",", "\"CC-dequeue\"", ")", "\n", "graph", ".", "add_node", "(", "\"CC-enqueue\"", ",", "group", "=", "6", ",", "\n", "node", "=", "Enqueue", "(", "length", "=", "len", "(", "windows", ")", ")", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "windows", ")", ")", ":", "\n", "        ", "graph", ".", "add_node", "(", "\"CC-sop-{}\"", ".", "format", "(", "i", ")", ",", "group", "=", "1", ",", "node", "=", "Sum", "(", ")", ")", "\n", "graph", ".", "add_edge", "(", "\"CC-dequeue\"", ",", "\"CC-sop-{}\"", ".", "format", "(", "i", ")", ")", "\n", "graph", ".", "add_edge", "(", "\"CC-sop-{}\"", ".", "format", "(", "i", ")", ",", "\"CC-enqueue\"", ")", "\n", "", "graph", ".", "add_node", "(", "\"CNN-acti\"", ",", "group", "=", "1", ",", "node", "=", "RELU", "(", ")", ")", "\n", "graph", ".", "add_edge", "(", "\"CC-enqueue\"", ",", "\"CNN-acti\"", ")", "\n", "\n", "# DENSE", "\n", "graph", ".", "add_node", "(", "\"Dense\"", ",", "group", "=", "2", ",", "\n", "node", "=", "ANN", "(", "weights", "=", "(", "len", "(", "windows", ")", ",", ")", ")", ")", "\n", "graph", ".", "add_edge", "(", "\"CNN-acti\"", ",", "\"Dense\"", ",", "weight", "=", "ANN", "(", ")", ".", "cost", ")", "\n", "graph", ".", "add_node", "(", "\"Dense-acti\"", ",", "group", "=", "2", ",", "node", "=", "RELU", "(", ")", ")", "\n", "graph", ".", "add_edge", "(", "\"Dense\"", ",", "\"Dense-acti\"", ")", "\n", "graph", ".", "add_node", "(", "\"Decrypt\"", ",", "group", "=", "5", ",", "node", "=", "Decrypt", "(", ")", ")", "\n", "graph", ".", "add_edge", "(", "\"Dense-acti\"", ",", "\"Decrypt\"", ")", "\n", "graph", ".", "add_node", "(", "\"Selector\"", ",", "group", "=", "6", ",", "node", "=", "Selector", "(", "backward", "=", "[", "1", ",", "0", "]", ")", ")", "\n", "graph", ".", "add_edge", "(", "\"Decrypt\"", ",", "\"Selector\"", ")", "\n", "\n", "# LOSS", "\n", "graph", ".", "add_node", "(", "\"MSE\"", ",", "group", "=", "3", ",", "node", "=", "MSE", "(", ")", ")", "\n", "graph", ".", "add_edge", "(", "\"Selector\"", ",", "\"MSE\"", ",", "weight", "=", "MSE", "(", ")", ".", "cost", ")", "\n", "graph", ".", "add_edge", "(", "\"y\"", ",", "\"MSE\"", ",", "weight", "=", "MSE", "(", ")", ".", "cost", ")", "\n", "\n", "# OUTPUT", "\n", "graph", ".", "add_node", "(", "\"y_hat\"", ",", "group", "=", "4", ",", "node", "=", "IO", "(", ")", ")", "\n", "graph", ".", "add_edge", "(", "\"Selector\"", ",", "\"y_hat\"", ",", "weight", "=", "IO", "(", ")", ".", "cost", ")", "\n", "\n", "return", "graph", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.graph.prefab.cnn_classifier": [[101, 180], ["networkx.MultiDiGraph", "numpy.arange", "nx.MultiDiGraph.add_node", "fhez.nn.operations.cc.CC().windex", "nx.MultiDiGraph.add_node", "nx.MultiDiGraph.add_edge", "nx.MultiDiGraph.add_node", "nx.MultiDiGraph.add_edge", "nx.MultiDiGraph.add_node", "range", "nx.MultiDiGraph.add_node", "nx.MultiDiGraph.add_edge", "nx.MultiDiGraph.add_node", "nx.MultiDiGraph.add_edge", "nx.MultiDiGraph.add_node", "nx.MultiDiGraph.add_node", "nx.MultiDiGraph.add_edge", "nx.MultiDiGraph.add_node", "nx.MultiDiGraph.add_edge", "nx.MultiDiGraph.add_node", "nx.MultiDiGraph.add_edge", "nx.MultiDiGraph.add_node", "nx.MultiDiGraph.add_edge", "nx.MultiDiGraph.add_node", "nx.MultiDiGraph.add_edge", "nx.MultiDiGraph.add_node", "nx.MultiDiGraph.add_edge", "nx.MultiDiGraph.add_node", "nx.MultiDiGraph.add_edge", "nx.MultiDiGraph.add_node", "nx.MultiDiGraph.add_edge", "nx.MultiDiGraph.add_node", "nx.MultiDiGraph.add_edge", "len", "nx.MultiDiGraph.add_node", "nx.MultiDiGraph.add_edge", "nx.MultiDiGraph.add_node", "nx.MultiDiGraph.add_edge", "nx.MultiDiGraph.add_edge", "nx.MultiDiGraph.add_node", "nx.MultiDiGraph.add_edge", "nx.MultiDiGraph.add_node", "nx.MultiDiGraph.add_edge", "nx.MultiDiGraph.add_edge", "fhez.nn.operations.rotate.Rotate", "fhez.nn.operations.cc.CC", "fhez.nn.operations.cc.CC", "fhez.nn.operations.dequeue.Dequeue", "fhez.nn.operations.enqueue.Enqueue", "fhez.nn.activation.relu.RELU", "fhez.nn.operations.distributor.Distributor", "fhez.nn.operations.enqueue.Enqueue", "fhez.nn.operations.decrypt.Decrypt", "fhez.nn.operations.selector.Selector", "fhez.nn.activation.softmax.Softmax", "fhez.nn.loss.cce.CCE", "fhez.nn.operations.one_hot_encode.OneHotEncode", "fhez.nn.graph.io.IO", "fhez.nn.activation.argmax.Argmax", "fhez.nn.operations.one_hot_decode.OneHotDecode", "fhez.nn.graph.io.IO", "fhez.nn.operations.rotate.Rotate", "fhez.nn.operations.sum.Sum", "fhez.nn.layer.ann.ANN", "fhez.nn.activation.relu.RELU", "fhez.nn.operations.one_hot_encode.OneHotEncode", "fhez.nn.operations.one_hot_decode.OneHotDecode", "len", "len", "fhez.nn.operations.sum.Sum", "len", "len"], "function", ["home.repos.pwc.inspect_result.DreamingRaven_python-reseal.operations.cc.CC.windex"], ["", "def", "cnn_classifier", "(", "k", ")", ":", "\n", "    ", "\"\"\"Get simple 1 Layer CNN, with K number of densenets -> softmax -> CCE.\"\"\"", "\n", "graph", "=", "nx", ".", "MultiDiGraph", "(", ")", "\n", "classes", "=", "np", ".", "arange", "(", "k", ")", "\n", "\n", "# add nodes to graph with names (for easy human referencing),", "\n", "# and objects for what those nodes are", "\n", "graph", ".", "add_node", "(", "\"x\"", ",", "group", "=", "0", ",", "node", "=", "Rotate", "(", ")", ")", "\n", "\n", "data_shape", "=", "(", "28", ",", "28", ")", "\n", "cnn_weights_shape", "=", "(", "6", ",", "6", ")", "\n", "stride", "=", "[", "4", ",", "4", "]", "\n", "windows", "=", "CC", "(", ")", ".", "windex", "(", "data_shape", ",", "cnn_weights_shape", ",", "stride", ")", "\n", "\n", "# CONSTRUCT CNN", "\n", "# with intermediary decrypted sum to save on some complexity later", "\n", "graph", ".", "add_node", "(", "\"CC-products\"", ",", "group", "=", "1", ",", "\n", "node", "=", "CC", "(", "weights", "=", "cnn_weights_shape", ",", "stride", "=", "stride", ",", "bias", "=", "0", ")", ")", "\n", "graph", ".", "add_edge", "(", "\"x\"", ",", "\"CC-products\"", ")", "\n", "graph", ".", "add_node", "(", "\"CC-dequeue\"", ",", "group", "=", "6", ",", "node", "=", "Dequeue", "(", "length", "=", "len", "(", "windows", ")", ")", ")", "\n", "graph", ".", "add_edge", "(", "\"CC-products\"", ",", "\"CC-dequeue\"", ")", "\n", "graph", ".", "add_node", "(", "\"CC-enqueue\"", ",", "group", "=", "6", ",", "node", "=", "Enqueue", "(", "length", "=", "len", "(", "windows", ")", ")", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "windows", ")", ")", ":", "\n", "        ", "graph", ".", "add_node", "(", "\"Rotate-{}\"", ".", "format", "(", "i", ")", ",", "group", "=", "5", ",", "\n", "node", "=", "Rotate", "(", "axis", "=", "1", ",", "flatten", "=", "True", ")", ")", "\n", "graph", ".", "add_edge", "(", "\"CC-dequeue\"", ",", "\"Rotate-{}\"", ".", "format", "(", "i", ")", ")", "\n", "graph", ".", "add_node", "(", "\"CC-sop-{}\"", ".", "format", "(", "i", ")", ",", "group", "=", "1", ",", "node", "=", "Sum", "(", ")", ")", "\n", "graph", ".", "add_edge", "(", "\"Rotate-{}\"", ".", "format", "(", "i", ")", ",", "\"CC-sop-{}\"", ".", "format", "(", "i", ")", ",", "\n", "weight", "=", "Sum", "(", ")", ".", "cost", ")", "\n", "graph", ".", "add_edge", "(", "\"CC-sop-{}\"", ".", "format", "(", "i", ")", ",", "\"CC-enqueue\"", ")", "\n", "", "graph", ".", "add_node", "(", "\"CNN-RELU\"", ",", "group", "=", "1", ",", "node", "=", "RELU", "(", "q", "=", "10", ")", ")", "\n", "graph", ".", "add_edge", "(", "\"CC-enqueue\"", ",", "\"CNN-RELU\"", ")", "\n", "graph", ".", "add_node", "(", "\"CNN-distribute\"", ",", "group", "=", "6", ",", "node", "=", "Distributor", "(", ")", ")", "\n", "graph", ".", "add_edge", "(", "\"CNN-RELU\"", ",", "\"CNN-distribute\"", ")", "\n", "# graph.add_edge(\"CNN-enqueue\", \"CNN-activation\", weight=RELU().cost)", "\n", "\n", "# CONSTRUCT DENSE FOR EACH CLASS", "\n", "# we want to get the network to regress some prediction one for each class", "\n", "graph", ".", "add_node", "(", "\"Dense-enqueue\"", ",", "group", "=", "6", ",", "node", "=", "Enqueue", "(", "length", "=", "k", ")", ")", "\n", "for", "i", "in", "classes", ":", "\n", "        ", "graph", ".", "add_node", "(", "\"Dense-{}\"", ".", "format", "(", "i", ")", ",", "group", "=", "2", ",", "\n", "node", "=", "ANN", "(", "weights", "=", "(", "len", "(", "windows", ")", ",", ")", ")", ")", "\n", "graph", ".", "add_edge", "(", "\"CNN-distribute\"", ",", "\"Dense-{}\"", ".", "format", "(", "i", ")", ")", "\n", "graph", ".", "add_node", "(", "\"Dense-RELU-{}\"", ".", "format", "(", "i", ")", ",", "group", "=", "2", ",", "node", "=", "RELU", "(", "q", "=", "10", ")", ")", "\n", "graph", ".", "add_edge", "(", "\"Dense-{}\"", ".", "format", "(", "i", ")", ",", "\"Dense-RELU-{}\"", ".", "format", "(", "i", ")", ")", "\n", "graph", ".", "add_edge", "(", "\"Dense-RELU-{}\"", ".", "format", "(", "i", ")", ",", "\"Dense-enqueue\"", ")", "\n", "", "graph", ".", "add_node", "(", "\"Decrypt\"", ",", "group", "=", "5", ",", "node", "=", "Decrypt", "(", ")", ")", "\n", "graph", ".", "add_edge", "(", "\"Dense-enqueue\"", ",", "\"Decrypt\"", ")", "\n", "\n", "# CONSTRUCT SELECTOR TO SELECT COMPUTATIONAL CIRCUITS", "\n", "# we need to be able to select different computational circuits depending", "\n", "# on the receptor so we can say infer, or train, and so we can also", "\n", "# selectiveley backpropagate through only one circuit and ignore the other", "\n", "graph", ".", "add_node", "(", "\"Selector\"", ",", "group", "=", "6", ",", "node", "=", "Selector", "(", "backward", "=", "[", "1", ",", "0", "]", ")", ")", "\n", "graph", ".", "add_edge", "(", "\"Decrypt\"", ",", "\"Selector\"", ")", "\n", "\n", "# CONSTRUCT CLASSIFIER", "\n", "# we want to turn the dense outputs into classification probabilities", "\n", "# using softmax and how wrong / right we are using Categorical", "\n", "# Cross-Entropy(CCE) as our loss function", "\n", "graph", ".", "add_node", "(", "\"Softmax\"", ",", "group", "=", "3", ",", "node", "=", "Softmax", "(", ")", ")", "\n", "graph", ".", "add_edge", "(", "\"Selector\"", ",", "\"Softmax\"", ")", "\n", "# graph.add_edge(\"Dense-enqueue\", \"Softmax\", weight=Softmax().cost)", "\n", "graph", ".", "add_node", "(", "\"Loss-CCE\"", ",", "group", "=", "3", ",", "node", "=", "CCE", "(", ")", ")", "\n", "graph", ".", "add_edge", "(", "\"Softmax\"", ",", "\"Loss-CCE\"", ",", "weight", "=", "3", ")", "\n", "graph", ".", "add_node", "(", "\"One-hot-encoder\"", ",", "group", "=", "0", ",", "\n", "node", "=", "OneHotEncode", "(", "length", "=", "len", "(", "classes", ")", ")", ")", "\n", "graph", ".", "add_edge", "(", "\"One-hot-encoder\"", ",", "\"Loss-CCE\"", ",", "weight", "=", "0", ")", "\n", "graph", ".", "add_node", "(", "\"y\"", ",", "group", "=", "0", ",", "node", "=", "IO", "(", ")", ")", "\n", "graph", ".", "add_edge", "(", "\"y\"", ",", "\"One-hot-encoder\"", ",", "weight", "=", "OneHotEncode", "(", ")", ".", "cost", ")", "\n", "\n", "graph", ".", "add_node", "(", "\"Argmax\"", ",", "group", "=", "4", ",", "node", "=", "Argmax", "(", ")", ")", "\n", "graph", ".", "add_edge", "(", "\"Selector\"", ",", "\"Argmax\"", ")", "\n", "# graph.add_edge(\"Dense-enqueue\", \"Argmax\", weight=Argmax().cost)", "\n", "graph", ".", "add_node", "(", "\"One-hot-decoder\"", ",", "group", "=", "4", ",", "node", "=", "OneHotDecode", "(", ")", ")", "\n", "graph", ".", "add_edge", "(", "\"Argmax\"", ",", "\"One-hot-decoder\"", ",", "weight", "=", "OneHotDecode", "(", ")", ".", "cost", ")", "\n", "graph", ".", "add_node", "(", "\"y_hat\"", ",", "group", "=", "4", ",", "node", "=", "IO", "(", ")", ")", "\n", "graph", ".", "add_edge", "(", "\"One-hot-decoder\"", ",", "\"y_hat\"", ",", "weight", "=", "0", ")", "\n", "return", "graph", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.graph.prefab.basic": [[182, 219], ["networkx.MultiDiGraph", "nx.MultiDiGraph.add_node", "nx.MultiDiGraph.add_node", "nx.MultiDiGraph.add_node", "nx.MultiDiGraph.add_edge", "nx.MultiDiGraph.add_node", "nx.MultiDiGraph.add_edge", "nx.MultiDiGraph.add_edge", "nx.MultiDiGraph.add_node", "nx.MultiDiGraph.add_edge", "nx.MultiDiGraph.add_node", "nx.MultiDiGraph.add_node", "nx.MultiDiGraph.add_edge", "nx.MultiDiGraph.add_edge", "nx.MultiDiGraph.add_node", "nx.MultiDiGraph.add_edge", "nx.MultiDiGraph.add_node", "nx.MultiDiGraph.add_edge", "nx.MultiDiGraph.add_node", "nx.MultiDiGraph.add_edge", "fhez.nn.operations.rotate.Rotate", "fhez.nn.operations.rotate.Rotate", "fhez.nn.layer.ann.ANN", "fhez.nn.layer.ann.ANN", "fhez.nn.operations.rotate.Rotate", "fhez.nn.operations.rotate.Rotate", "fhez.nn.layer.ann.ANN", "fhez.nn.operations.decrypt.Decrypt", "fhez.nn.layer.ann.ANN", "fhez.nn.operations.decrypt.Decrypt"], "function", ["None"], ["", "def", "basic", "(", ")", ":", "\n", "    ", "\"\"\"Get a super basic graph for purposes of testing components.\n\n    .. note::\n\n        This is not a useful graph outside of unit-tests and validation,\n        as it does not represent any form of useful network for solving any\n        particular problem.\n    \"\"\"", "\n", "graph", "=", "nx", ".", "MultiDiGraph", "(", ")", "\n", "graph", ".", "add_node", "(", "\"x_0\"", ",", "group", "=", "0", ",", "node", "=", "Rotate", "(", ")", ")", "\n", "graph", ".", "add_node", "(", "\"x_1\"", ",", "group", "=", "0", ",", "node", "=", "Rotate", "(", ")", ")", "\n", "\n", "graph", ".", "add_node", "(", "\"c_0\"", ",", "group", "=", "1", ",", "node", "=", "ANN", "(", "weights", "=", "(", "1", ",", ")", ")", ")", "\n", "graph", ".", "add_edge", "(", "\"x_0\"", ",", "\"c_0\"", ")", "\n", "\n", "graph", ".", "add_node", "(", "\"c_1\"", ",", "group", "=", "1", ",", "node", "=", "ANN", "(", "weights", "=", "(", "2", ",", ")", ")", ")", "\n", "graph", ".", "add_edge", "(", "\"c_0\"", ",", "\"c_1\"", ")", "\n", "graph", ".", "add_edge", "(", "\"x_1\"", ",", "\"c_1\"", ")", "\n", "\n", "graph", ".", "add_node", "(", "\"r_0\"", ",", "group", "=", "2", ",", "node", "=", "Rotate", "(", ")", ")", "\n", "graph", ".", "add_edge", "(", "\"c_1\"", ",", "\"r_0\"", ")", "\n", "\n", "graph", ".", "add_node", "(", "\"y_0\"", ",", "group", "=", "0", ",", "node", "=", "Rotate", "(", ")", ")", "\n", "graph", ".", "add_node", "(", "\"c_2\"", ",", "group", "=", "1", ",", "node", "=", "ANN", "(", "weights", "=", "(", "2", ",", ")", ")", ")", "\n", "graph", ".", "add_edge", "(", "\"r_0\"", ",", "\"c_2\"", ")", "\n", "graph", ".", "add_edge", "(", "\"y_0\"", ",", "\"c_2\"", ")", "\n", "\n", "graph", ".", "add_node", "(", "\"d_0\"", ",", "group", "=", "3", ",", "node", "=", "Decrypt", "(", ")", ")", "\n", "graph", ".", "add_edge", "(", "\"c_2\"", ",", "\"d_0\"", ")", "\n", "\n", "graph", ".", "add_node", "(", "\"c_3\"", ",", "group", "=", "1", ",", "node", "=", "ANN", "(", "weights", "=", "(", "2", ",", ")", ")", ")", "\n", "graph", ".", "add_edge", "(", "\"c_2\"", ",", "\"c_3\"", ")", "\n", "\n", "graph", ".", "add_node", "(", "\"d_1\"", ",", "group", "=", "3", ",", "node", "=", "Decrypt", "(", ")", ")", "\n", "graph", ".", "add_edge", "(", "\"c_3\"", ",", "\"d_1\"", ")", "\n", "return", "graph", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.graph.prefab.orbweaver": [[221, 224], ["prefab.cnn_classifier"], "function", ["home.repos.pwc.inspect_result.DreamingRaven_python-reseal.graph.prefab.cnn_classifier"], ["", "def", "orbweaver", "(", ")", ":", "\n", "    ", "\"\"\"Get prefabricated orbweaver graph.\"\"\"", "\n", "return", "cnn_classifier", "(", "10", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.graph.prefab.sphira": [[226, 229], ["prefab.cnn_classifier"], "function", ["home.repos.pwc.inspect_result.DreamingRaven_python-reseal.graph.prefab.cnn_classifier"], ["", "def", "sphira", "(", ")", ":", "\n", "    ", "\"\"\"Get prefabricated sphira graph.\"\"\"", "\n", "return", "cnn_classifier", "(", "10", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.graph.prefab.milky": [[231, 244], ["prefab.cnn_regressor", "cnn_regressor.add_node", "cnn_regressor.add_node", "cnn_regressor.add_edge", "cnn_regressor.remove_edge", "cnn_regressor.add_edge", "cnn_regressor.add_edge", "fhez.nn.operations.rotate.Rotate", "fhez.nn.operations.enqueue.Enqueue"], "function", ["home.repos.pwc.inspect_result.DreamingRaven_python-reseal.graph.prefab.cnn_regressor"], ["", "def", "milky", "(", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Get prefabricated milk graph.\"\"\"", "\n", "g", "=", "cnn_regressor", "(", "**", "kwargs", ")", "\n", "# sideloading our additional contextual nodes", "\n", "g", ".", "add_node", "(", "\"Context\"", ",", "node", "=", "Rotate", "(", ")", ")", "\n", "g", ".", "add_node", "(", "\"Context-enqueue\"", ",", "group", "=", "6", ",", "node", "=", "Enqueue", "(", ")", ")", "\n", "g", ".", "add_edge", "(", "\"Context\"", ",", "\"Context-enqueue\"", ")", "\n", "# removing existing edge which we want to interject", "\n", "g", ".", "remove_edge", "(", "\"CNN-acti\"", ",", "\"Dense\"", ")", "\n", "# sewing back together the graph", "\n", "g", ".", "add_edge", "(", "\"Context-enqueue\"", ",", "\"Dense\"", ")", "\n", "g", ".", "add_edge", "(", "\"CNN-acti\"", ",", "\"Context-enqueue\"", ")", "\n", "return", "g", "\n", "", ""]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.graph.io.IO.schema": [[14, 20], ["marshmallow.Schema.from_dict"], "methods", ["None"], ["@", "property", "\n", "def", "schema", "(", "self", ")", ":", "\n", "        ", "\"\"\"Get Marshmallow schema representation of this class.\"\"\"", "\n", "schema_dict", "=", "{", "\n", "}", "\n", "return", "mar", ".", "Schema", ".", "from_dict", "(", "schema_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.graph.io.IO.forward": [[21, 24], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"Pass input directly to output.\"\"\"", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.graph.io.IO.backward": [[25, 28], ["None"], "methods", ["None"], ["", "def", "backward", "(", "self", ",", "gradient", ")", ":", "\n", "        ", "\"\"\"Pass gradient directly to output.\"\"\"", "\n", "return", "gradient", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.graph.io.IO.update": [[29, 31], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ")", ":", "\n", "        ", "\"\"\"Do nothing.\"\"\"", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.graph.io.IO.updates": [[32, 34], ["None"], "methods", ["None"], ["", "def", "updates", "(", "self", ")", ":", "\n", "        ", "\"\"\"Do nothing.\"\"\"", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.graph.io.IO.cost": [[35, 39], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "cost", "(", "self", ")", ":", "\n", "        ", "\"\"\"Get no-cost of this node.\"\"\"", "\n", "return", "0", "\n", "", "", ""]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.graph.serialise.Serialise.schema": [[13, 17], ["None"], "methods", ["None"], ["@", "property", "\n", "@", "abc", ".", "abstractmethod", "\n", "def", "schema", "(", "self", ")", ":", "\n", "        ", "\"\"\"Get Marshmallow schema for this class for (de)serialisation.\"\"\"", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.graph.serialise.Serialise.__getstate__": [[18, 23], ["schema().dump", "serialise.Serialise.schema"], "methods", ["home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fields.numpyfield.NumpyField.schema"], ["", "def", "__getstate__", "(", "self", ")", ":", "\n", "        ", "\"\"\"Get current state in basic inbuilt-objects for serialisation.\"\"\"", "\n", "schema", "=", "self", ".", "schema", "\n", "serialised", "=", "schema", "(", ")", ".", "dump", "(", "self", ")", "\n", "return", "serialised", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.graph.serialise.Serialise.__setstate__": [[24, 29], ["schema().load", "serialise.Serialise.schema"], "methods", ["home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fields.numpyfield.NumpyField.schema"], ["", "def", "__setstate__", "(", "self", ",", "d", ")", ":", "\n", "        ", "\"\"\"Set the current state of the class using input dict repr.\"\"\"", "\n", "schema", "=", "self", ".", "schema", "\n", "deserialised", "=", "schema", "(", ")", ".", "load", "(", "d", ")", "\n", "self", ".", "__dict__", "=", "deserialised", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.graph.serialise.Serialise.__eq__": [[30, 35], ["None"], "methods", ["None"], ["", "def", "__eq__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Check equality by comparison of internal dictionary.\"\"\"", "\n", "if", "self", ".", "__class__", "!=", "other", ".", "__class__", ":", "\n", "            ", "return", "False", "\n", "", "return", "self", ".", "__dict__", "==", "other", ".", "__dict__", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.graph.serialise.Serialise.__repr__": [[36, 40], ["schema().dumps", "serialise.Serialise.schema"], "methods", ["home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fields.numpyfield.NumpyField.schema"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "\"\"\"Get string unambiguous representation of object.\"\"\"", "\n", "schema", "=", "self", ".", "schema", "\n", "return", "schema", "(", ")", ".", "dumps", "(", "self", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.graph.dll.DLL.__init__": [[17, 20], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "\"\"\"Initialise a new doubly linked list.\"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.graph.dll.DLL.__getitem__": [[21, 34], ["isinstance", "tuple", "accumulator.append", "dll.DLL.traverse"], "methods", ["home.repos.pwc.inspect_result.DreamingRaven_python-reseal.graph.dll.DLL.append", "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.graph.dll.DLL.traverse"], ["", "def", "__getitem__", "(", "self", ",", "indices", ")", ":", "\n", "        ", "\"\"\".\"\"\"", "\n", "# convert a simple index x[y] to a tuple for consistency", "\n", "if", "not", "isinstance", "(", "indices", ",", "tuple", ")", ":", "\n", "            ", "indices", "=", "tuple", "(", "indices", ")", "\n", "\n", "# traverse and collect data points", "\n", "# TODO: can improve search by using sorted tuples and continue traverse", "\n", "# instead of re-doing the traversal multiple times", "\n", "", "accumulator", "=", "[", "]", "\n", "for", "i", "in", "indices", ":", "\n", "            ", "accumulator", ".", "append", "(", "self", ".", "traverse", "(", "i", ")", ".", "data", ")", "\n", "", "return", "accumulator", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.graph.dll.DLL.head": [[40, 43], ["None"], "methods", ["None"], ["", "@", "head", ".", "setter", "\n", "def", "head", "(", "self", ",", "node", ")", ":", "\n", "        ", "self", ".", "_head", "=", "node", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.graph.dll.DLL.tail": [[49, 52], ["None"], "methods", ["None"], ["", "@", "tail", ".", "setter", "\n", "def", "tail", "(", "self", ",", "node", ")", ":", "\n", "        ", "self", ".", "_tail", "=", "node", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.graph.dll.DLL.count": [[63, 66], ["None"], "methods", ["None"], ["", "", "@", "count", ".", "setter", "\n", "def", "count", "(", "self", ",", "count", ":", "int", ")", ":", "\n", "        ", "self", ".", "_count", "=", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.graph.dll.DLL.size": [[67, 71], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "size", "(", "self", ")", ":", "\n", "        ", "\"\"\"Get size of dll.\"\"\"", "\n", "return", "self", ".", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.graph.dll.DLL.append": [[72, 82], ["fhez.nn.graph.node.Node", "fhez.nn.graph.node.Node"], "methods", ["None"], ["", "def", "append", "(", "self", ",", "data", ")", ":", "\n", "        ", "\"\"\"Append given data to end of dll as a new node.\"\"\"", "\n", "if", "self", ".", "head", "is", "None", ":", "\n", "            ", "self", ".", "head", "=", "Node", "(", "data", ")", "\n", "self", ".", "tail", "=", "self", ".", "head", "\n", "", "else", ":", "\n", "            ", "self", ".", "tail", ".", "next", "=", "Node", "(", "data", ")", "\n", "self", ".", "tail", ".", "next", ".", "previous", "=", "self", ".", "tail", "\n", "self", ".", "tail", "=", "self", ".", "tail", ".", "next", "\n", "", "self", ".", "count", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.graph.dll.DLL.prepend": [[83, 92], ["dll.DLL.append", "fhez.nn.graph.node.Node"], "methods", ["home.repos.pwc.inspect_result.DreamingRaven_python-reseal.graph.dll.DLL.append"], ["", "def", "prepend", "(", "self", ",", "data", ")", ":", "\n", "        ", "\"\"\"Prepend given data to start of dll as new node.\"\"\"", "\n", "if", "self", ".", "head", "is", "None", ":", "\n", "            ", "return", "self", ".", "append", "(", "data", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "head", ".", "previous", "=", "Node", "(", "data", ")", "\n", "self", ".", "head", ".", "previous", ".", "next", "=", "self", ".", "head", "\n", "self", ".", "head", "=", "self", ".", "head", ".", "previous", "\n", "", "self", ".", "count", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.graph.dll.DLL._index_check": [[93, 99], ["isinstance", "TypeError", "ValueError", "type"], "methods", ["None"], ["", "def", "_index_check", "(", "self", ",", "index", ")", ":", "\n", "        ", "if", "not", "isinstance", "(", "index", ",", "int", ")", ":", "\n", "            ", "raise", "TypeError", "(", "\"Index type: {}, expected int\"", ".", "format", "(", "type", "(", "index", ")", ")", ")", "\n", "", "if", "(", "self", ".", "count", "<", "index", ")", "|", "(", "index", "<", "0", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\"Index: {} out of range: {}, dll len.\"", ".", "format", "(", "\n", "index", ",", "self", ".", "count", "\n", ")", ")", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.graph.dll.DLL.insert": [[101, 121], ["dll.DLL._index_check", "dll.DLL.append", "dll.DLL.prepend", "range", "fhez.nn.graph.node.Node"], "methods", ["home.repos.pwc.inspect_result.DreamingRaven_python-reseal.graph.dll.DLL._index_check", "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.graph.dll.DLL.append", "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.graph.dll.DLL.prepend"], ["", "", "def", "insert", "(", "self", ",", "data", ",", "index", ":", "int", ")", ":", "\n", "        ", "\"\"\"Insert a new node between index and index-1 nodes.\"\"\"", "\n", "self", ".", "_index_check", "(", "index", ")", "\n", "\n", "if", "index", "==", "self", ".", "count", ":", "\n", "            ", "return", "self", ".", "append", "(", "data", ")", "\n", "", "elif", "index", "==", "0", ":", "\n", "            ", "return", "self", ".", "prepend", "(", "data", ")", "\n", "", "else", ":", "\n", "            ", "node", "=", "self", ".", "head", "\n", "# traverse to indexed node as current \"node\"", "\n", "for", "_", "in", "range", "(", "index", ")", ":", "\n", "                ", "node", "=", "node", ".", "next", "\n", "# link new node to previous node", "\n", "", "node", ".", "previous", ".", "next", "=", "Node", "(", "data", ")", "\n", "node", ".", "previous", ".", "next", ".", "previous", "=", "node", ".", "previous", "\n", "# link new node to indexed node", "\n", "node", ".", "previous", ".", "next", ".", "next", "=", "node", "\n", "node", ".", "previous", "=", "node", ".", "previous", ".", "next", "\n", "", "self", ".", "count", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.graph.dll.DLL.remove": [[122, 141], ["dll.DLL._index_check", "ValueError", "dll.DLL.traverse"], "methods", ["home.repos.pwc.inspect_result.DreamingRaven_python-reseal.graph.dll.DLL._index_check", "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.graph.dll.DLL.traverse"], ["", "def", "remove", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"Remove indexed node and attach index-1 and index+1 nodes.\"\"\"", "\n", "self", ".", "_index_check", "(", "index", ")", "\n", "# handling the special off by one error for removal", "\n", "if", "self", ".", "count", "==", "index", ":", "\n", "            ", "raise", "ValueError", "(", "\"{}: {}, as zero indexed/ range 0-{}\"", ".", "format", "(", "\n", "\"Off by one cannot remove\"", ",", "index", ",", "self", ".", "count", "-", "1", ")", ")", "\n", "\n", "", "if", "index", "==", "0", ":", "\n", "            ", "self", ".", "head", "=", "self", ".", "head", ".", "next", "\n", "self", ".", "head", ".", "previous", "=", "None", "\n", "", "elif", "index", "==", "(", "self", ".", "count", "-", "1", ")", ":", "# 0 indexed last element", "\n", "            ", "self", ".", "tail", "=", "self", ".", "tail", ".", "previous", "\n", "self", ".", "tail", ".", "next", "=", "None", "\n", "", "else", ":", "\n", "            ", "node", "=", "self", ".", "traverse", "(", "index", ")", "\n", "# sew the two nodes either side of us together", "\n", "node", ".", "previous", ".", "next", ",", "node", ".", "next", ".", "previous", "=", "node", ".", "next", ",", "node", ".", "previous", "\n", "", "self", ".", "count", "-=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.graph.dll.DLL.search": [[142, 149], ["range"], "methods", ["None"], ["", "def", "search", "(", "self", ",", "data", ")", ":", "\n", "        ", "\"\"\"Search dll for the index of the first node with matching data.\"\"\"", "\n", "node", "=", "self", ".", "head", "\n", "for", "i", "in", "range", "(", "self", ".", "count", ")", ":", "\n", "            ", "if", "node", ".", "data", "==", "data", ":", "\n", "                ", "return", "i", "\n", "", "node", "=", "node", ".", "next", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.graph.dll.DLL.traverse": [[150, 163], ["dll.DLL._index_check", "range", "ValueError"], "methods", ["home.repos.pwc.inspect_result.DreamingRaven_python-reseal.graph.dll.DLL._index_check"], ["", "", "def", "traverse", "(", "self", ",", "index", ":", "int", ")", ":", "\n", "        ", "\"\"\"Get node corresponding to index.\"\"\"", "\n", "self", ".", "_index_check", "(", "index", ")", "\n", "# handling the special off by one error for removal", "\n", "if", "self", ".", "count", "==", "index", ":", "\n", "            ", "raise", "ValueError", "(", "\"{}: {}, as zero indexed/ range 0-{}\"", ".", "format", "(", "\n", "\"Off by one cannot remove\"", ",", "index", ",", "self", ".", "count", "-", "1", ")", ")", "\n", "\n", "", "node", "=", "self", ".", "head", "\n", "# traverse to indexed node as current \"node\"", "\n", "for", "_", "in", "range", "(", "index", ")", ":", "\n", "            ", "node", "=", "node", ".", "next", "\n", "", "return", "node", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.graph.dll.DLL.__len__": [[164, 167], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "\"\"\"Get length of dll.\"\"\"", "\n", "return", "self", ".", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.graph.dll.DLL_tests.setUp": [[172, 175], ["dll.DLL"], "methods", ["None"], ["def", "setUp", "(", "self", ")", ":", "\n", "        ", "\"\"\"Initialise empty DLL.\"\"\"", "\n", "self", ".", "dll", "=", "DLL", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.graph.dll.DLL_tests.midway_dll": [[176, 182], ["dll.DLL_tests.dll.append", "dll.DLL_tests.dll.append", "dll.DLL_tests.dll.append"], "methods", ["home.repos.pwc.inspect_result.DreamingRaven_python-reseal.graph.dll.DLL.append", "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.graph.dll.DLL.append", "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.graph.dll.DLL.append"], ["", "def", "midway_dll", "(", "self", ")", ":", "\n", "        ", "\"\"\"Create a somewhat formed dll for testing.\"\"\"", "\n", "self", ".", "dll", ".", "append", "(", "\"first\"", ")", "\n", "self", ".", "dll", ".", "append", "(", "\"second\"", ")", "\n", "self", ".", "dll", ".", "append", "(", "\"third\"", ")", "\n", "return", "3", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.graph.dll.DLL_tests.test_append_empty": [[183, 188], ["dll.DLL_tests.dll.append", "dll.DLL_tests.assertEqual", "dll.DLL_tests.assertEqual"], "methods", ["home.repos.pwc.inspect_result.DreamingRaven_python-reseal.graph.dll.DLL.append"], ["", "def", "test_append_empty", "(", "self", ")", ":", "\n", "        ", "\"\"\"Check append on empty dll.\"\"\"", "\n", "self", ".", "dll", ".", "append", "(", "\"appended\"", ")", "\n", "self", ".", "assertEqual", "(", "self", ".", "dll", ".", "size", ",", "1", ")", "\n", "self", ".", "assertEqual", "(", "self", ".", "dll", ".", "tail", ".", "data", ",", "\"appended\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.graph.dll.DLL_tests.test_prepend_empty": [[189, 194], ["dll.DLL_tests.dll.append", "dll.DLL_tests.assertEqual", "dll.DLL_tests.assertEqual"], "methods", ["home.repos.pwc.inspect_result.DreamingRaven_python-reseal.graph.dll.DLL.append"], ["", "def", "test_prepend_empty", "(", "self", ")", ":", "\n", "        ", "\"\"\"Check prepend on empty dll.\"\"\"", "\n", "self", ".", "dll", ".", "append", "(", "\"prepended\"", ")", "\n", "self", ".", "assertEqual", "(", "self", ".", "dll", ".", "size", ",", "1", ")", "\n", "self", ".", "assertEqual", "(", "self", ".", "dll", ".", "head", ".", "data", ",", "\"prepended\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.graph.dll.DLL_tests.test_insert_empty": [[195, 200], ["dll.DLL_tests.dll.insert", "dll.DLL_tests.assertEqual", "dll.DLL_tests.assertEqual"], "methods", ["home.repos.pwc.inspect_result.DreamingRaven_python-reseal.graph.dll.DLL.insert"], ["", "def", "test_insert_empty", "(", "self", ")", ":", "\n", "        ", "\"\"\"Check insert on empty dll.\"\"\"", "\n", "self", ".", "dll", ".", "insert", "(", "\"inserted\"", ",", "0", ")", "\n", "self", ".", "assertEqual", "(", "self", ".", "dll", ".", "size", ",", "1", ")", "\n", "self", ".", "assertEqual", "(", "self", ".", "dll", ".", "head", ".", "data", ",", "\"inserted\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.graph.dll.DLL_tests.test_remove": [[201, 206], ["dll.DLL_tests.midway_dll", "dll.DLL_tests.dll.remove", "dll.DLL_tests.assertEqual"], "methods", ["home.repos.pwc.inspect_result.DreamingRaven_python-reseal.graph.dll.DLL_tests.midway_dll", "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.graph.dll.DLL.remove"], ["", "def", "test_remove", "(", "self", ")", ":", "\n", "        ", "\"\"\"Check deleting from existing dll.\"\"\"", "\n", "leng", "=", "self", ".", "midway_dll", "(", ")", "\n", "self", ".", "dll", ".", "remove", "(", "1", ")", "\n", "self", ".", "assertEqual", "(", "self", ".", "dll", ".", "size", ",", "leng", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.graph.dll.DLL_tests.test_insert": [[207, 213], ["dll.DLL_tests.midway_dll", "dll.DLL_tests.dll.insert", "dll.DLL_tests.assertEqual", "dll.DLL_tests.assertEqual"], "methods", ["home.repos.pwc.inspect_result.DreamingRaven_python-reseal.graph.dll.DLL_tests.midway_dll", "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.graph.dll.DLL.insert"], ["", "def", "test_insert", "(", "self", ")", ":", "\n", "        ", "\"\"\"Check inserting midway of existing dll.\"\"\"", "\n", "leng", "=", "self", ".", "midway_dll", "(", ")", "\n", "self", ".", "dll", ".", "insert", "(", "\"inserted\"", ",", "1", ")", "\n", "self", ".", "assertEqual", "(", "self", ".", "dll", ".", "size", ",", "leng", "+", "1", ")", "\n", "self", ".", "assertEqual", "(", "self", ".", "dll", ".", "head", ".", "next", ".", "data", ",", "\"inserted\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.graph.dll.DLL_tests.test_prepend": [[214, 220], ["dll.DLL_tests.midway_dll", "dll.DLL_tests.dll.prepend", "dll.DLL_tests.assertEqual", "dll.DLL_tests.assertEqual"], "methods", ["home.repos.pwc.inspect_result.DreamingRaven_python-reseal.graph.dll.DLL_tests.midway_dll", "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.graph.dll.DLL.prepend"], ["", "def", "test_prepend", "(", "self", ")", ":", "\n", "        ", "\"\"\"Check prepending midway of existing dll.\"\"\"", "\n", "leng", "=", "self", ".", "midway_dll", "(", ")", "\n", "self", ".", "dll", ".", "prepend", "(", "\"prepended\"", ")", "\n", "self", ".", "assertEqual", "(", "self", ".", "dll", ".", "size", ",", "leng", "+", "1", ")", "\n", "self", ".", "assertEqual", "(", "self", ".", "dll", ".", "head", ".", "data", ",", "\"prepended\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.graph.dll.DLL_tests.test_append": [[221, 227], ["dll.DLL_tests.midway_dll", "dll.DLL_tests.dll.append", "dll.DLL_tests.assertEqual", "dll.DLL_tests.assertEqual"], "methods", ["home.repos.pwc.inspect_result.DreamingRaven_python-reseal.graph.dll.DLL_tests.midway_dll", "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.graph.dll.DLL.append"], ["", "def", "test_append", "(", "self", ")", ":", "\n", "        ", "\"\"\"Check appending midway of existing dll.\"\"\"", "\n", "leng", "=", "self", ".", "midway_dll", "(", ")", "\n", "self", ".", "dll", ".", "append", "(", "\"appended\"", ")", "\n", "self", ".", "assertEqual", "(", "self", ".", "dll", ".", "size", ",", "leng", "+", "1", ")", "\n", "self", ".", "assertEqual", "(", "self", ".", "dll", ".", "tail", ".", "data", ",", "\"appended\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.graph.dll.DLL_tests.test_getitem": [[228, 234], ["dll.DLL_tests.midway_dll", "dll.DLL_tests.assertEqual", "print", "len"], "methods", ["home.repos.pwc.inspect_result.DreamingRaven_python-reseal.graph.dll.DLL_tests.midway_dll"], ["", "def", "test_getitem", "(", "self", ")", ":", "\n", "        ", "\"\"\"Test getting an item mid way using array notation.\"\"\"", "\n", "leng", "=", "self", ".", "midway_dll", "(", ")", "\n", "out", "=", "self", ".", "dll", "[", "0", ",", "1", ",", "2", "]", "\n", "self", ".", "assertEqual", "(", "len", "(", "out", ")", ",", "leng", ")", "\n", "print", "(", "out", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.graph.dll.DLL_tests.tearDown": [[235, 238], ["None"], "methods", ["None"], ["", "def", "tearDown", "(", "self", ")", ":", "\n", "        ", "\"\"\"Destroy our DLL.\"\"\"", "\n", "del", "self", ".", "dll", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.graph.node.Node.is_cache_enabled": [[27, 31], ["None"], "methods", ["None"], ["", "@", "is_cache_enabled", ".", "setter", "\n", "def", "is_cache_enabled", "(", "self", ",", "state", ":", "bool", ")", ":", "\n", "        ", "\"\"\"Set the state of the cache.\"\"\"", "\n", "self", ".", "_is_cache_enabled", "=", "state", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.graph.node.Node.enable_cache": [[32, 35], ["None"], "methods", ["None"], ["", "def", "enable_cache", "(", "self", ")", ":", "\n", "        ", "\"\"\"Enable caching.\"\"\"", "\n", "self", ".", "is_cache_enabled", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.graph.node.Node.disable_cache": [[36, 39], ["None"], "methods", ["None"], ["", "def", "disable_cache", "(", "self", ")", ":", "\n", "        ", "\"\"\"Disable caching.\"\"\"", "\n", "self", ".", "is_cache_enabled", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.graph.node.Node.cache": [[48, 51], ["None"], "methods", ["None"], ["", "@", "cache", ".", "setter", "\n", "def", "cache", "(", "self", ",", "cache", ")", ":", "\n", "        ", "self", ".", "_cache", "=", "cache", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.graph.node.Node.probe_shape": [[56, 73], ["isinstance", "isinstance", "node.Node.probe_shape", "len", "len"], "methods", ["home.repos.pwc.inspect_result.DreamingRaven_python-reseal.operations.cc.CC.probe_shape"], ["", "def", "probe_shape", "(", "self", ",", "lst", ":", "list", ")", ":", "\n", "        ", "\"\"\"Get the shape of a list, assuming each sublist is the same length.\n\n        This function is recursive, sending the sublists down and terminating\n        once a type error is thrown by the final point being a non-list\n        \"\"\"", "\n", "if", "isinstance", "(", "lst", ",", "list", ")", ":", "\n", "# try appending current length with recurse of sublist", "\n", "            ", "try", ":", "\n", "                ", "return", "(", "len", "(", "lst", ")", ",", ")", "+", "self", ".", "probe_shape", "(", "lst", "[", "0", "]", ")", "\n", "# once we bottom out and get some non-list type abort and pull up", "\n", "", "except", "(", "AttributeError", ",", "IndexError", ")", ":", "\n", "                ", "return", "(", "len", "(", "lst", ")", ",", ")", "\n", "", "", "elif", "isinstance", "(", "lst", ",", "(", "int", ",", "float", ")", ")", ":", "\n", "            ", "return", "(", "1", ",", ")", "\n", "", "else", ":", "\n", "            ", "return", "lst", ".", "shape", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.graph.node.Node.inputs": [[74, 90], ["collections.deque", "node.Node.cache.get", "collections.deque"], "methods", ["None"], ["", "", "@", "property", "\n", "def", "inputs", "(", "self", ")", ":", "\n", "        ", "\"\"\"Get cached input stack.\n\n        Neural networks backpropogation requires cached inputs to calculate\n        the gradient with respect to x and the weights. This is a utility\n        method that initialises a stack and allows you to easily append\n        or pop off of it so that the computation can occur in FILO.\n        \"\"\"", "\n", "if", "self", ".", "cache", ".", "get", "(", "\"_inputs\"", ")", "is", "None", ":", "\n", "            ", "self", ".", "cache", "[", "\"_inputs\"", "]", "=", "deque", "(", ")", "\n", "", "if", "self", ".", "is_cache_enabled", ":", "\n", "# if cache enabled return real stack", "\n", "            ", "return", "self", ".", "cache", "[", "\"_inputs\"", "]", "\n", "# if cache disabled return dud que", "\n", "", "return", "deque", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.graph.node.Node.gradients": [[91, 108], ["collections.deque", "node.Node.cache.get", "collections.deque"], "methods", ["None"], ["", "@", "property", "\n", "def", "gradients", "(", "self", ")", ":", "\n", "        ", "\"\"\"Get cached input stack.\n\n        For neural networks to calculate any given weight update, it needs to\n        remember atleast the last gradient in the case of stocastic descent,\n        or multiple gradients if implementing batch normalised gradient\n        descent. This is a helper method that initialises a stack so that\n        implementation can be offloaded and made-uniform between all subclasses\n        \"\"\"", "\n", "if", "self", ".", "cache", ".", "get", "(", "\"_gradients\"", ")", "is", "None", ":", "\n", "            ", "self", ".", "cache", "[", "\"_gradients\"", "]", "=", "deque", "(", ")", "\n", "", "if", "self", ".", "is_cache_enabled", ":", "\n", "# if cache enabled return real stack", "\n", "            ", "return", "self", ".", "cache", "[", "\"_gradients\"", "]", "\n", "# if cache disabled return dud que", "\n", "", "return", "deque", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.graph.node.Node.optimiser": [[116, 119], ["None"], "methods", ["None"], ["", "@", "optimiser", ".", "setter", "\n", "def", "optimiser", "(", "self", ",", "optimiser", ")", ":", "\n", "        ", "self", ".", "_optimiser", "=", "optimiser", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.graph.node.Node.updater": [[120, 168], ["range", "batch_sums.items", "node.Node.optimiser.optimise", "node.Node.items", "len", "node.Node.gradients.pop", "node.Node.items", "getattr", "setattr", "batch_sums.get", "grad_count.get"], "methods", ["home.repos.pwc.inspect_result.DreamingRaven_python-reseal.optimiser.adam.Adam.optimise"], ["", "def", "updater", "(", "self", ",", "parm_names", ":", "list", ",", "it", "=", "None", ")", ":", "\n", "        ", "\"\"\"Private function to universaly update any Node instance.\n\n        To simplify the process of updating so and to reduce code duplication,\n        this function serves to derive all the important information given\n        a parameter dictionary. It will then infer from the dictionary the\n        attributes with which to modify.\n        \"\"\"", "\n", "it", "=", "it", "if", "it", "is", "not", "None", "else", "len", "(", "self", ".", "gradients", ")", "\n", "# we store our gradients with names, this is because we want to be", "\n", "# able to identify, hold, or modify individual gradients easier", "\n", "# than say if they were stored in an array.", "\n", "\n", "# cumulate like gradients into sums", "\n", "batch_sums", "=", "{", "}", "\n", "grad_count", "=", "{", "}", "# in case some gradients have been held", "\n", "# for however many gradients we are told to iterate", "\n", "for", "_", "in", "range", "(", "it", ")", ":", "\n", "# for each examples gradient", "\n", "            ", "gradient_dict", "=", "self", ".", "gradients", ".", "pop", "(", ")", "\n", "for", "key", ",", "value", "in", "gradient_dict", ".", "items", "(", ")", ":", "\n", "# if no sum already start at 0", "\n", "                ", "if", "batch_sums", ".", "get", "(", "key", ")", "is", "None", ":", "\n", "                    ", "batch_sums", "[", "key", "]", "=", "0", "\n", "", "if", "grad_count", ".", "get", "(", "key", ")", "is", "None", ":", "\n", "                    ", "grad_count", "[", "key", "]", "=", "0", "\n", "# add gradient to sum of gradients", "\n", "", "batch_sums", "[", "key", "]", "+=", "value", "\n", "# iterate gradient specific counter by one to keep track", "\n", "grad_count", "[", "key", "]", "+=", "1", "\n", "\n", "# now get the average of what we have counted and summed", "\n", "", "", "avg_gradients", "=", "{", "}", "\n", "for", "key", ",", "value", "in", "batch_sums", ".", "items", "(", ")", ":", "\n", "            ", "avg_gradients", "[", "key", "]", "=", "value", "/", "grad_count", "[", "key", "]", "\n", "# here only for compatibility but still wanted to be explicit they are", "\n", "# averages", "\n", "", "gradients", "=", "avg_gradients", "\n", "\n", "# get data based on name thanks to the magic of getattr", "\n", "parameters", "=", "{", "}", "\n", "for", "i", "in", "parm_names", ":", "\n", "            ", "parameters", "[", "i", "]", "=", "getattr", "(", "self", ",", "i", ")", "\n", "# call optimiser to calculate probably better weights", "\n", "", "update", "=", "self", ".", "optimiser", ".", "optimise", "(", "parms", "=", "parameters", ",", "grads", "=", "gradients", ")", "\n", "# use update dictionary to grab the new weights and set what we want", "\n", "for", "key", ",", "value", "in", "update", ".", "items", "(", ")", ":", "\n", "            ", "setattr", "(", "self", ",", "key", ",", "value", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.graph.node.Node.forward": [[173, 176], ["None"], "methods", ["None"], ["", "", "@", "abc", ".", "abstractmethod", "\n", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"Calculate forward pass for singular example.\"\"\"", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.graph.node.Node.backward": [[177, 180], ["None"], "methods", ["None"], ["", "@", "abc", ".", "abstractmethod", "\n", "def", "backward", "(", "self", ",", "gradient", ")", ":", "\n", "        ", "\"\"\"Calculate backward pass for singular example.\"\"\"", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.graph.node.Node.forwards": [[181, 187], ["accumulator.append", "node.Node.forward"], "methods", ["home.repos.pwc.inspect_result.DreamingRaven_python-reseal.graph.dll.DLL.append", "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.loss.mse.MSE.forward"], ["", "def", "forwards", "(", "self", ",", "xs", ")", ":", "\n", "        ", "\"\"\"Calculate forward pass for multiple examples simultaneously.\"\"\"", "\n", "accumulator", "=", "[", "]", "\n", "for", "i", "in", "xs", ":", "\n", "            ", "accumulator", ".", "append", "(", "self", ".", "forward", "(", "x", "=", "i", ")", ")", "\n", "", "return", "accumulator", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.graph.node.Node.backwards": [[188, 194], ["accumulator.append", "node.Node.backward"], "methods", ["home.repos.pwc.inspect_result.DreamingRaven_python-reseal.graph.dll.DLL.append", "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.loss.mse.MSE.backward"], ["", "def", "backwards", "(", "self", ",", "gradients", ")", ":", "\n", "        ", "\"\"\"Calculate backward pass for multiple examples simultaneously.\"\"\"", "\n", "accumulator", "=", "[", "]", "\n", "for", "i", "in", "gradients", ":", "\n", "            ", "accumulator", ".", "append", "(", "self", ".", "backward", "(", "gradient", "=", "i", ")", ")", "\n", "", "return", "accumulator", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.graph.node.Node.update": [[195, 198], ["None"], "methods", ["None"], ["", "@", "abc", ".", "abstractmethod", "\n", "def", "update", "(", "self", ")", ":", "\n", "        ", "\"\"\"Update node state/ weights for a single example.\"\"\"", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.graph.node.Node.updates": [[199, 202], ["None"], "methods", ["None"], ["", "@", "abc", ".", "abstractmethod", "\n", "def", "updates", "(", "self", ")", ":", "\n", "        ", "\"\"\"Update node state/ weights for multiple examples simultaneously.\"\"\"", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.graph.node.Node.cost": [[203, 207], ["None"], "methods", ["None"], ["", "@", "property", "\n", "@", "abc", ".", "abstractmethod", "\n", "def", "cost", "(", "self", ")", ":", "\n", "        ", "\"\"\"Get the computational cost per forward example of the node.\"\"\"", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.graph.node.IO.forward": [[212, 215], ["None"], "methods", ["None"], ["def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"Pass input directly to output.\"\"\"", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.graph.node.IO.backward": [[216, 219], ["None"], "methods", ["None"], ["", "def", "backward", "(", "self", ",", "gradient", ")", ":", "\n", "        ", "\"\"\"Pass gradient directly to output.\"\"\"", "\n", "return", "gradient", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.graph.node.IO.update": [[220, 222], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ")", ":", "\n", "        ", "\"\"\"Do nothing.\"\"\"", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.graph.node.IO.updates": [[223, 225], ["None"], "methods", ["None"], ["", "def", "updates", "(", "self", ")", ":", "\n", "        ", "\"\"\"Do nothing.\"\"\"", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.graph.node.IO.cost": [[226, 229], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "cost", "(", "self", ")", ":", "\n", "        ", "\"\"\"Get no cost of a this transitional node.\"\"\"", "\n", "", "", ""]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.graph.prefab_test.PrefabTester.setUp": [[16, 19], ["time.time"], "methods", ["None"], ["def", "setUp", "(", "self", ")", ":", "\n", "        ", "\"\"\"Start timer and init variables.\"\"\"", "\n", "self", ".", "start_time", "=", "time", ".", "time", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.graph.prefab_test.PrefabTester.tearDown": [[20, 24], ["print", "time.time", "prefab_test.PrefabTester.id"], "methods", ["None"], ["", "def", "tearDown", "(", "self", ")", ":", "\n", "        ", "\"\"\"Calculate and print time delta.\"\"\"", "\n", "t", "=", "time", ".", "time", "(", ")", "-", "self", ".", "start_time", "\n", "print", "(", "'%s: %.3f'", "%", "(", "self", ".", "id", "(", ")", ",", "t", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.graph.prefab_test.PrefabTester.data_shape": [[25, 29], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "data_shape", "(", "self", ")", ":", "\n", "        ", "\"\"\"Define desired data shape.\"\"\"", "\n", "return", "(", "28", ",", "28", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.graph.prefab_test.PrefabTester.data": [[30, 35], ["numpy.random.rand"], "methods", ["None"], ["", "@", "property", "\n", "def", "data", "(", "self", ")", ":", "\n", "        ", "\"\"\"Get some generated data.\"\"\"", "\n", "array", "=", "np", ".", "random", ".", "rand", "(", "*", "self", ".", "data_shape", ")", "\n", "return", "array", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.graph.prefab_test.PrefabTester.reseal_args": [[36, 47], ["pow"], "methods", ["None"], ["", "@", "property", "\n", "def", "reseal_args", "(", "self", ")", ":", "\n", "        ", "\"\"\"Get some reseal arguments for encryption.\"\"\"", "\n", "return", "{", "\n", "\"scheme\"", ":", "2", ",", "# seal.scheme_type.CKK,", "\n", "\"poly_modulus_degree\"", ":", "8192", "*", "2", ",", "# 438", "\n", "# \"coefficient_modulus\": [60, 40, 40, 60],", "\n", "\"coefficient_modulus\"", ":", "\n", "[", "45", ",", "30", ",", "30", ",", "30", ",", "30", ",", "30", ",", "30", ",", "30", ",", "30", ",", "30", ",", "30", ",", "45", "]", ",", "\n", "\"scale\"", ":", "pow", "(", "2.0", ",", "30", ")", ",", "\n", "\"cache\"", ":", "True", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.graph.prefab_test.PrefabTester.test_todo": [[49, 52], ["NotImplementedError"], "methods", ["None"], ["", "def", "test_todo", "(", "self", ")", ":", "\n", "        ", "\"\"\"Todo note to fail tests so it cant be forgotten.\"\"\"", "\n", "raise", "NotImplementedError", "(", "\"FHE prefab tests not completed.\"", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.graph.io_test.IOTest.data_shape": [[16, 20], ["None"], "methods", ["None"], ["@", "property", "\n", "def", "data_shape", "(", "self", ")", ":", "\n", "        ", "\"\"\"Define desired data shape.\"\"\"", "\n", "return", "(", "3", ",", "32", ",", "32", ",", "3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.graph.io_test.IOTest.data": [[21, 26], ["numpy.random.rand"], "methods", ["None"], ["", "@", "property", "\n", "def", "data", "(", "self", ")", ":", "\n", "        ", "\"\"\"Get some generated data.\"\"\"", "\n", "array", "=", "np", ".", "random", ".", "rand", "(", "*", "self", ".", "data_shape", ")", "\n", "return", "array", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.graph.io_test.IOTest.reseal_args": [[27, 38], ["pow"], "methods", ["None"], ["", "@", "property", "\n", "def", "reseal_args", "(", "self", ")", ":", "\n", "        ", "\"\"\"Get some reseal arguments for encryption.\"\"\"", "\n", "return", "{", "\n", "\"scheme\"", ":", "2", ",", "# seal.scheme_type.CKK,", "\n", "\"poly_modulus_degree\"", ":", "8192", "*", "2", ",", "# 438", "\n", "# \"coefficient_modulus\": [60, 40, 40, 60],", "\n", "\"coefficient_modulus\"", ":", "\n", "[", "45", ",", "30", ",", "30", ",", "30", ",", "30", ",", "30", ",", "30", ",", "30", ",", "30", ",", "30", ",", "30", ",", "45", "]", ",", "\n", "\"scale\"", ":", "pow", "(", "2.0", ",", "30", ")", ",", "\n", "\"cache\"", ":", "True", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.graph.io_test.IOTest.setUp": [[40, 43], ["time.time"], "methods", ["None"], ["", "def", "setUp", "(", "self", ")", ":", "\n", "        ", "\"\"\"Start timer and init variables.\"\"\"", "\n", "self", ".", "startTime", "=", "time", ".", "time", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.graph.io_test.IOTest.tearDown": [[44, 48], ["print", "time.time", "io_test.IOTest.id"], "methods", ["None"], ["", "def", "tearDown", "(", "self", ")", ":", "\n", "        ", "\"\"\"Calculate and print time delta.\"\"\"", "\n", "t", "=", "time", ".", "time", "(", ")", "-", "self", ".", "startTime", "\n", "print", "(", "'%s: %.3f'", "%", "(", "self", ".", "id", "(", ")", ",", "t", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.graph.io_test.IOTest.test_test": [[49, 53], ["io_test.IOTest.assertEqual"], "methods", ["None"], ["", "def", "test_test", "(", "self", ")", ":", "\n", "        ", "\"\"\"Check our testing values meet requirements.\"\"\"", "\n", "# check data is the shape we desire/ gave it to generate", "\n", "self", ".", "assertEqual", "(", "self", ".", "data", ".", "shape", ",", "self", ".", "data_shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.graph.io_test.IOTest.test_init": [[54, 58], ["fhez.nn.graph.io.IO", "io_test.IOTest.assertIsInstance"], "methods", ["None"], ["", "def", "test_init", "(", "self", ")", ":", "\n", "        ", "\"\"\"Check IO initialises properly.\"\"\"", "\n", "i", "=", "IO", "(", ")", "\n", "self", ".", "assertIsInstance", "(", "i", ",", "IO", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.graph.io_test.IOTest.test_forward": [[59, 67], ["fhez.nn.graph.io.IO", "fhez.nn.graph.io.IO.forward", "numpy.testing.assert_array_almost_equal"], "methods", ["home.repos.pwc.inspect_result.DreamingRaven_python-reseal.loss.mse.MSE.forward"], ["", "def", "test_forward", "(", "self", ")", ":", "\n", "        ", "\"\"\"Check IO maps input to output.\"\"\"", "\n", "i", "=", "IO", "(", ")", "\n", "data", "=", "self", ".", "data", "\n", "out", "=", "i", ".", "forward", "(", "data", ")", "\n", "np", ".", "testing", ".", "assert_array_almost_equal", "(", "out", ",", "data", ",", "\n", "decimal", "=", "2", ",", "\n", "verbose", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.graph.io_test.IOTest.test_backward": [[68, 77], ["fhez.nn.graph.io.IO", "fhez.nn.graph.io.IO.forward", "fhez.nn.graph.io.IO.backward", "numpy.testing.assert_array_almost_equal"], "methods", ["home.repos.pwc.inspect_result.DreamingRaven_python-reseal.loss.mse.MSE.forward", "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.loss.mse.MSE.backward"], ["", "def", "test_backward", "(", "self", ")", ":", "\n", "        ", "\"\"\"Check IO maps gradients to input.\"\"\"", "\n", "i", "=", "IO", "(", ")", "\n", "data", "=", "self", ".", "data", "\n", "i", ".", "forward", "(", "data", ")", "\n", "out", "=", "i", ".", "backward", "(", "data", ")", "\n", "np", ".", "testing", ".", "assert_array_almost_equal", "(", "out", ",", "data", ",", "\n", "decimal", "=", "2", ",", "\n", "verbose", "=", "True", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.graph.utils_test.UtilsTester.setUp": [[17, 20], ["time.time"], "methods", ["None"], ["def", "setUp", "(", "self", ")", ":", "\n", "        ", "\"\"\"Start timer and init variables.\"\"\"", "\n", "self", ".", "start_time", "=", "time", ".", "time", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.graph.utils_test.UtilsTester.tearDown": [[21, 25], ["print", "time.time", "utils_test.UtilsTester.id"], "methods", ["None"], ["", "def", "tearDown", "(", "self", ")", ":", "\n", "        ", "\"\"\"Calculate and print time delta.\"\"\"", "\n", "t", "=", "time", ".", "time", "(", ")", "-", "self", ".", "start_time", "\n", "print", "(", "'%s: %.3f'", "%", "(", "self", ".", "id", "(", ")", ",", "t", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.graph.utils_test.UtilsTester.data_shape": [[26, 30], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "data_shape", "(", "self", ")", ":", "\n", "        ", "\"\"\"Define desired data shape.\"\"\"", "\n", "return", "(", "28", ",", "28", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.graph.utils_test.UtilsTester.data": [[31, 36], ["numpy.random.rand"], "methods", ["None"], ["", "@", "property", "\n", "def", "data", "(", "self", ")", ":", "\n", "        ", "\"\"\"Get some generated data.\"\"\"", "\n", "array", "=", "np", ".", "random", ".", "rand", "(", "*", "self", ".", "data_shape", ")", "\n", "return", "array", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.graph.utils_test.UtilsTester.reseal_args": [[37, 48], ["pow"], "methods", ["None"], ["", "@", "property", "\n", "def", "reseal_args", "(", "self", ")", ":", "\n", "        ", "\"\"\"Get some reseal arguments for encryption.\"\"\"", "\n", "return", "{", "\n", "\"scheme\"", ":", "2", ",", "# seal.scheme_type.CKK,", "\n", "\"poly_modulus_degree\"", ":", "8192", "*", "2", ",", "# 438", "\n", "# \"coefficient_modulus\": [60, 40, 40, 60],", "\n", "\"coefficient_modulus\"", ":", "\n", "[", "45", ",", "30", ",", "30", ",", "30", ",", "30", ",", "30", ",", "30", ",", "30", ",", "30", ",", "30", ",", "30", ",", "45", "]", ",", "\n", "\"scale\"", ":", "pow", "(", "2.0", ",", "30", ")", ",", "\n", "\"cache\"", ":", "True", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.graph.utils_test.UtilsTester.test_utils": [[50, 53], ["NotImplementedError"], "methods", ["None"], ["", "def", "test_utils", "(", "self", ")", ":", "\n", "        ", "\"\"\"Note to ourselves that these tests are not complete.\"\"\"", "\n", "raise", "NotImplementedError", "(", "\"Util tests not implemented.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.graph.utils_test.UtilsTester.test_train": [[54, 63], ["fhez.nn.graph.prefab.orbweaver", "fhez.nn.graph.utils.train", "numpy.array", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.DreamingRaven_python-reseal.graph.prefab.orbweaver", "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.graph.utils.train"], ["", "def", "test_train", "(", "self", ")", ":", "\n", "        ", "\"\"\"Check training loop using a known example Fashion-MNIST.\"\"\"", "\n", "graph", "=", "orbweaver", "(", ")", "\n", "data", "=", "self", ".", "data", "\n", "inputs", "=", "{", "\n", "\"x\"", ":", "np", ".", "array", "(", "[", "data", ",", "data", ",", "data", ",", "data", ",", "data", ",", "data", "]", ")", ",", "\n", "\"y\"", ":", "np", ".", "array", "(", "[", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", "]", ")", "\n", "}", "\n", "train", "(", "graph", "=", "graph", ",", "inputs", "=", "inputs", ",", "batch_size", "=", "3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.graph.utils_test.UtilsTester.test_infer": [[64, 68], ["fhez.nn.graph.prefab.orbweaver", "NotImplementedError"], "methods", ["home.repos.pwc.inspect_result.DreamingRaven_python-reseal.graph.prefab.orbweaver"], ["", "def", "test_infer", "(", "self", ")", ":", "\n", "        ", "\"\"\"Check inference working as expected.\"\"\"", "\n", "orbweaver", "(", ")", "\n", "raise", "NotImplementedError", "(", "\"Inference util not implemented.\"", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.graph.utils.assign_edge_costing": [[13, 26], ["graph.nodes", "graph.in_edges", "KeyError"], "function", ["None"], ["def", "assign_edge_costing", "(", "graph", ",", "objk", "=", "None", ")", ":", "\n", "    ", "\"\"\"Modify a graph so edges represent costs of the forward node.\"\"\"", "\n", "objk", "=", "objk", "if", "objk", "is", "not", "None", "else", "\"node\"", "\n", "# for every node", "\n", "for", "node", "in", "graph", ".", "nodes", "(", "data", "=", "True", ")", ":", "\n", "# assign node.cost() to every inbound edge", "\n", "        ", "for", "edge", "in", "graph", ".", "in_edges", "(", "node", "[", "0", "]", ",", "data", "=", "True", ")", ":", "\n", "            ", "try", ":", "\n", "                ", "edge", "[", "2", "]", "[", "\"weight\"", "]", "=", "node", "[", "1", "]", "[", "objk", "]", ".", "cost", "\n", "", "except", "KeyError", ":", "\n", "                ", "raise", "KeyError", "(", "\n", "\"node `{}``, does not have the `{}` key {}\"", ".", "format", "(", "\n", "node", ",", "objk", ",", "\"cannot calculate cost.\"", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.graph.utils.train": [[28, 69], ["list", "fhez.nn.traverse.firing.Firing", "fhez.nn.traverse.firing.Firing", "list", "inputs.keys", "inputs.values", "tqdm.tqdm", "itertools.zip_longest", "graph.reverse", "fhez.nn.traverse.firing.Firing.stimulate", "fhez.nn.traverse.firing.Firing.stimulate", "pbar.update", "len", "graph.nodes", "list", "list", "list", "node.updates", "forward.stimulate.keys", "forward.stimulate.values"], "function", ["home.repos.pwc.inspect_result.DreamingRaven_python-reseal.traverse.firing.Firing.stimulate", "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.traverse.firing.Firing.stimulate", "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.loss.mse.MSE.update", "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.loss.mse.MSE.updates"], ["", "", "", "", "def", "train", "(", "graph", ",", "inputs", ",", "batch_size", ",", "debug", "=", "False", ")", ":", "\n", "    ", "\"\"\"Train neural network graph through backpropagation.\"\"\"", "\n", "neurons", "=", "list", "(", "inputs", ".", "keys", "(", ")", ")", "\n", "\n", "# setting up our graph in both normal and reversed directions for", "\n", "# forward and backward pass", "\n", "forward", "=", "Firing", "(", "graph", "=", "graph", ")", "\n", "backward", "=", "Firing", "(", "graph", "=", "graph", ".", "reverse", "(", "copy", "=", "False", ")", ")", "# we want them linked", "\n", "\n", "train", "=", "list", "(", "inputs", ".", "values", "(", ")", ")", "\n", "# external counter as I want to rework this in future to work", "\n", "# with generators + its more efficient to use itertools than to", "\n", "# iterate over the training set manually using a counter + lookup", "\n", "# on each iteration which would start from head of list", "\n", "i", "=", "0", "\n", "with", "tqdm", "(", "total", "=", "len", "(", "inputs", "[", "neurons", "[", "0", "]", "]", ")", ",", "desc", "=", "\"Learn\"", ")", "as", "pbar", ":", "\n", "        ", "for", "signals", "in", "itertools", ".", "zip_longest", "(", "*", "train", ")", ":", "\n", "# forward pass over all avaliable nodes on graph", "\n", "            ", "out", "=", "forward", ".", "stimulate", "(", "\n", "neurons", "=", "neurons", ",", "\n", "signals", "=", "list", "(", "signals", ")", ",", "\n", "receptor", "=", "\"forward\"", ")", "\n", "# backward pass using output from forward pass to select", "\n", "# the nodes they came from to pass them back in but as", "\n", "# losses (or ignored if not a loss)", "\n", "backward", ".", "stimulate", "(", "\n", "neurons", "=", "list", "(", "out", ".", "keys", "(", ")", ")", ",", "\n", "signals", "=", "list", "(", "out", ".", "values", "(", ")", ")", ",", "\n", "receptor", "=", "\"backward\"", ")", "\n", "# if we happen to be at the end of a batch update using avg of", "\n", "# our calculated gradients in all backward passes", "\n", "# (internal state of the graph nodes so no need to do it", "\n", "# ourselves)", "\n", "if", "i", "%", "batch_size", "==", "0", ":", "\n", "                ", "for", "node_meta", "in", "graph", ".", "nodes", "(", "data", "=", "True", ")", ":", "\n", "                    ", "node", "=", "node_meta", "[", "1", "]", "[", "\"node\"", "]", "\n", "node", ".", "updates", "(", ")", "\n", "# iterate counter to keep track of batch sizes", "\n", "", "", "pbar", ".", "update", "(", "1", ")", "\n", "i", "+=", "1", "\n", "", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.graph.utils.infer": [[71, 101], ["list", "fhez.nn.traverse.firing.Firing", "list", "inputs.keys", "inputs.values", "tqdm.tqdm", "itertools.zip_longest", "fhez.nn.traverse.firing.Firing.stimulate", "pbar.update", "forward.stimulate.items", "len", "activations[].append", "list", "activations.get"], "function", ["home.repos.pwc.inspect_result.DreamingRaven_python-reseal.traverse.firing.Firing.stimulate", "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.loss.mse.MSE.update", "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.graph.dll.DLL.append"], ["", "def", "infer", "(", "graph", ",", "inputs", ")", ":", "\n", "    ", "\"\"\"Use neural network graph to infer some outcomes from inputs.\"\"\"", "\n", "neurons", "=", "list", "(", "inputs", ".", "keys", "(", ")", ")", "\n", "\n", "# setting up our graph in both normal and reversed directions for", "\n", "# forward and backward pass", "\n", "forward", "=", "Firing", "(", "graph", "=", "graph", ")", "\n", "\n", "train", "=", "list", "(", "inputs", ".", "values", "(", ")", ")", "\n", "# external counter as I want to rework this in future to work", "\n", "# with generators + its more efficient to use itertools than to", "\n", "# iterate over the training set manually using a counter + lookup", "\n", "# on each iteration which would start from head of list", "\n", "i", "=", "0", "\n", "activations", "=", "{", "}", "\n", "with", "tqdm", "(", "total", "=", "len", "(", "inputs", "[", "neurons", "[", "0", "]", "]", ")", ",", "desc", "=", "\"Infer\"", ")", "as", "pbar", ":", "\n", "        ", "for", "signals", "in", "itertools", ".", "zip_longest", "(", "*", "train", ")", ":", "\n", "# forward pass over all avaliable nodes on graph", "\n", "            ", "out", "=", "forward", ".", "stimulate", "(", "\n", "neurons", "=", "neurons", ",", "\n", "signals", "=", "list", "(", "signals", ")", ",", "\n", "receptor", "=", "\"forward\"", ")", "\n", "pbar", ".", "update", "(", "1", ")", "\n", "i", "+=", "1", "\n", "# remapping outputs into a single dictionary again just like inputs", "\n", "for", "key", ",", "value", "in", "out", ".", "items", "(", ")", ":", "\n", "                ", "if", "activations", ".", "get", "(", "key", ")", "is", "None", ":", "\n", "                    ", "activations", "[", "key", "]", "=", "[", "]", "\n", "", "activations", "[", "key", "]", ".", "append", "(", "value", ")", "\n", "", "", "", "return", "activations", "\n", "", ""]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.layer.ann_test.Ann_Tests.data_shape": [[18, 21], ["None"], "methods", ["None"], ["    ", "@", "property", "\n", "def", "data_shape", "(", "self", ")", ":", "\n", "        ", "return", "(", "3", ",", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.layer.ann_test.Ann_Tests.data": [[22, 29], ["numpy.random.rand"], "methods", ["None"], ["", "@", "property", "\n", "def", "data", "(", "self", ")", ":", "\n", "        ", "\"\"\"Get some generated data.\"\"\"", "\n", "# array = np.arange(1*32*32*3)", "\n", "# array.shape = (1, 32, 32, 3)", "\n", "array", "=", "np", ".", "random", ".", "rand", "(", "*", "self", ".", "data_shape", ")", "\n", "return", "array", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.layer.ann_test.Ann_Tests.reseal_args": [[30, 41], ["pow"], "methods", ["None"], ["", "@", "property", "\n", "def", "reseal_args", "(", "self", ")", ":", "\n", "        ", "\"\"\"Get some reseal arguments for encryption.\"\"\"", "\n", "return", "{", "\n", "\"scheme\"", ":", "seal", ".", "scheme_type", ".", "CKKS", ",", "\n", "\"poly_modulus_degree\"", ":", "8192", "*", "2", ",", "# 438", "\n", "# \"coefficient_modulus\": [60, 40, 40, 60],", "\n", "\"coefficient_modulus\"", ":", "\n", "[", "45", ",", "30", ",", "30", ",", "30", ",", "30", ",", "30", ",", "30", ",", "30", ",", "30", ",", "30", ",", "30", ",", "45", "]", ",", "\n", "\"scale\"", ":", "pow", "(", "2.0", ",", "30", ")", ",", "\n", "\"cache\"", ":", "True", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.layer.ann_test.Ann_Tests.setUp": [[43, 50], ["time.time"], "methods", ["None"], ["", "def", "setUp", "(", "self", ")", ":", "\n", "        ", "\"\"\"Start timer and init variables.\"\"\"", "\n", "self", ".", "weights", "=", "(", "3", ",", ")", "# if tuple allows cnn to initialise itself", "\n", "self", ".", "stride", "=", "[", "1", ",", "3", ",", "3", ",", "3", "]", "# stride list per-dimension", "\n", "self", ".", "bias", "=", "0", "# assume no bias at first", "\n", "\n", "self", ".", "startTime", "=", "time", ".", "time", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.layer.ann_test.Ann_Tests.tearDown": [[51, 55], ["print", "time.time", "ann_test.Ann_Tests.id"], "methods", ["None"], ["", "def", "tearDown", "(", "self", ")", ":", "\n", "        ", "\"\"\"Calculate and print time delta.\"\"\"", "\n", "t", "=", "time", ".", "time", "(", ")", "-", "self", ".", "startTime", "\n", "print", "(", "'%s: %.3f'", "%", "(", "self", ".", "id", "(", ")", ",", "t", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.layer.ann_test.Ann_Tests.test_test": [[56, 63], ["fhez.nn.layer.ann.ANN", "ann_test.Ann_Tests.assertEqual", "ann_test.Ann_Tests.assertEqual", "len"], "methods", ["None"], ["", "def", "test_test", "(", "self", ")", ":", "\n", "        ", "\"\"\"Check our testing values meet requirements.\"\"\"", "\n", "ann", "=", "ANN", "(", "weights", "=", "self", ".", "weights", ",", "bias", "=", "self", ".", "bias", ")", "\n", "# check data is the shape we desire/ gave it to generate", "\n", "self", ".", "assertEqual", "(", "self", ".", "data", ".", "shape", ",", "self", ".", "data_shape", ")", "\n", "# check weights length matches first dim of data", "\n", "self", ".", "assertEqual", "(", "len", "(", "ann", ".", "weights", ")", ",", "self", ".", "data_shape", "[", "0", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.layer.ann_test.Ann_Tests.test_init": [[64, 67], ["fhez.nn.layer.ann.ANN"], "methods", ["None"], ["", "def", "test_init", "(", "self", ")", ":", "\n", "        ", "\"\"\"Check object initialisation works.\"\"\"", "\n", "ANN", "(", "weights", "=", "self", ".", "weights", ",", "bias", "=", "self", ".", "bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.layer.ann_test.Ann_Tests.test_forward": [[68, 74], ["fhez.nn.layer.ann.ANN", "fhez.nn.layer.ann.ANN.forward"], "methods", ["home.repos.pwc.inspect_result.DreamingRaven_python-reseal.loss.mse.MSE.forward"], ["", "def", "test_forward", "(", "self", ",", "data", "=", "None", ")", ":", "\n", "        ", "\"\"\"Check forward pass works as expected.\"\"\"", "\n", "ann", "=", "ANN", "(", "weights", "=", "self", ".", "weights", ",", "bias", "=", "self", ".", "bias", ")", "\n", "data", "=", "self", ".", "data", "if", "data", "is", "None", "else", "data", "\n", "acti", "=", "ann", ".", "forward", "(", "x", "=", "data", ")", "\n", "return", "acti", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.layer.ann_test.Ann_Tests.test_forward_enc": [[75, 85], ["fhez.rearray.ReArray", "ann_test.Ann_Tests.assertTrue", "ann_test.Ann_Tests.assertIsInstance", "ann_test.Ann_Tests.test_forward", "ann_test.Ann_Tests.assertIsInstance", "numpy.array", "ann_test.Ann_Tests.assertIsInstance", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.DreamingRaven_python-reseal.loss.cce_test.CrossEntropyTest.test_forward"], ["", "def", "test_forward_enc", "(", "self", ")", ":", "\n", "        ", "\"\"\"Check encrypted forward pass works as expected.\"\"\"", "\n", "data", "=", "self", ".", "data", "\n", "edata", "=", "ReArray", "(", "data", ",", "**", "self", ".", "reseal_args", ")", "\n", "self", ".", "assertTrue", "(", "np", ".", "array", "(", "edata", ")", ".", "shape", "==", "data", ".", "shape", ")", "\n", "self", ".", "assertIsInstance", "(", "edata", ",", "ReArray", ")", "\n", "acti", "=", "self", ".", "test_forward", "(", "data", "=", "edata", ")", "\n", "self", ".", "assertIsInstance", "(", "acti", ",", "ReArray", ")", "\n", "plain", "=", "np", ".", "array", "(", "acti", ")", "\n", "self", ".", "assertIsInstance", "(", "plain", ",", "np", ".", "ndarray", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.layer.ann_test.Ann_Tests.test_backward": [[86, 109], ["numpy.array", "numpy.array", "fhez.nn.layer.ann.ANN", "fhez.nn.layer.ann.ANN.forward", "numpy.testing.assert_array_almost_equal", "fhez.nn.layer.ann.ANN.backward", "fhez.nn.layer.ann.ANN.gradients.pop", "numpy.testing.assert_array_almost_equal", "numpy.testing.assert_array_almost_equal", "numpy.testing.assert_array_almost_equal", "numpy.sum", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.DreamingRaven_python-reseal.loss.mse.MSE.forward", "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.loss.mse.MSE.backward", "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.rearray.ReArray.sum"], ["", "def", "test_backward", "(", "self", ")", ":", "\n", "        ", "\"\"\"Check forward pass works as expected.\"\"\"", "\n", "bias", "=", "1", "\n", "weights", "=", "np", ".", "array", "(", "[", "0", ",", "0.5", ",", "1", "]", ")", "\n", "data", "=", "np", ".", "array", "(", "[", "1", ",", "1", ",", "1", "]", ")", "\n", "ann", "=", "ANN", "(", "weights", "=", "weights", ",", "bias", "=", "bias", ")", "\n", "acti", "=", "ann", ".", "forward", "(", "x", "=", "data", ")", "\n", "acti_truth", "=", "np", ".", "sum", "(", "np", ".", "array", "(", "[", "0", ",", "0.5", ",", "1", "]", ")", ")", "+", "1", "\n", "np", ".", "testing", ".", "assert_array_almost_equal", "(", "acti", ",", "acti_truth", ",", "\n", "decimal", "=", "1", ",", "\n", "verbose", "=", "True", ")", "\n", "grad", "=", "0.5", "\n", "ann", ".", "backward", "(", "gradient", "=", "grad", ")", "\n", "grads", "=", "ann", ".", "gradients", ".", "pop", "(", ")", "\n", "np", ".", "testing", ".", "assert_array_almost_equal", "(", "grads", "[", "\"dfdx\"", "]", ",", "weights", "*", "grad", ",", "\n", "decimal", "=", "1", ",", "\n", "verbose", "=", "True", ")", "\n", "np", ".", "testing", ".", "assert_array_almost_equal", "(", "grads", "[", "\"dfdb\"", "]", ",", "1", "*", "grad", ",", "\n", "decimal", "=", "1", ",", "\n", "verbose", "=", "True", ")", "\n", "np", ".", "testing", ".", "assert_array_almost_equal", "(", "grads", "[", "\"dfdw\"", "]", ",", "data", "*", "grad", ",", "\n", "decimal", "=", "1", ",", "\n", "verbose", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.layer.ann_old.Layer_ANN.forward": [[19, 47], ["tqdm.tqdm.tqdm", "ann_old.Layer_ANN.activation_function.forward", "len", "len", "ValueError", "range", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.DreamingRaven_python-reseal.loss.mse.MSE.forward"], ["    ", "@", "Layer", ".", "fwd", "\n", "def", "forward", "(", "self", ",", "x", ":", "(", "np", ".", "array", ",", "ReArray", ")", ")", ":", "\n", "        ", "\"\"\"Take numpy array of objects or ReArray object to calculate y_hat.\"\"\"", "\n", "# check that first dim matches so they can loop together", "\n", "if", "len", "(", "x", ")", "!=", "len", "(", "self", ".", "weights", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\"Mismatched shapes {}, {}\"", ".", "format", "(", "\n", "len", "(", "x", ")", ",", "\n", "self", ".", "weights", "[", "0", "]", ")", ")", "\n", "\n", "", "sum", "=", "None", "\n", "for", "i", "in", "tqdm", "(", "range", "(", "len", "(", "x", ")", ")", ",", "desc", "=", "\"{}.{}\"", ".", "format", "(", "\n", "self", ".", "__class__", ".", "__name__", ",", "\"forward\"", ")", ",", "\n", "ncols", "=", "80", ",", "colour", "=", "\"blue\"", "\n", ")", ":", "\n", "            ", "t", "=", "x", "[", "i", "]", "*", "self", ".", "weights", "[", "i", "]", "\n", "if", "sum", "is", "None", ":", "\n", "                ", "sum", "=", "t", "\n", "", "else", ":", "\n", "                ", "sum", "=", "sum", "+", "t", "\n", "# sum is not a single number, it is a multidimensional array", "\n", "# if you just add to this values will be broadcast and added to each", "\n", "# element individually, which makes the maths wrong I.E", "\n", "# 2 + (1+2+3) == (1+2/3) + (2+2/3) + (3+2/3) == 8 != (1+2)+(2+2)+(3+2)", "\n", "# we must divide by the number of elements in ONE batch", "\n", "# or else sum explodes", "\n", "", "", "elements_in_batch", "=", "sum", ".", "size", "/", "len", "(", "sum", ")", "\n", "sum", "+=", "self", ".", "bias", "/", "elements_in_batch", "\n", "return", "self", ".", "activation_function", ".", "forward", "(", "sum", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.layer.ann_old.Layer_ANN.backward": [[48, 84], ["numpy.array", "tqdm.tqdm.tqdm", "numpy.array", "numpy.array", "range", "range", "per_input_batch_sums.append", "numpy.sum", "numpy.sum", "list", "len", "len", "numpy.sum", "batch_sums.append", "map", "numpy.squeeze"], "methods", ["home.repos.pwc.inspect_result.DreamingRaven_python-reseal.graph.dll.DLL.append", "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.rearray.ReArray.sum", "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.rearray.ReArray.sum", "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.rearray.ReArray.sum", "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.graph.dll.DLL.append"], ["", "@", "Layer", ".", "bwd", "\n", "def", "backward", "(", "self", ",", "gradient", ",", "x", ")", ":", "\n", "        ", "\"\"\"Calculate the local gradient of this CNN.\n\n        Given the gradient that precedes us,\n        what is the local gradient after us.\n        \"\"\"", "\n", "# activation gradient already calculated for us", "\n", "ag", "=", "gradient", "\n", "# iterate over inputs and batches to get per-input-per-batch sums", "\n", "x", "=", "np", ".", "array", "(", "x", ")", "\n", "per_input_batch_sums", "=", "[", "]", "\n", "for", "i", "in", "tqdm", "(", "range", "(", "len", "(", "x", ")", ")", ",", "desc", "=", "\"{}.{}\"", ".", "format", "(", "\n", "self", ".", "__class__", ".", "__name__", ",", "\"backward\"", ")", ",", "\n", "ncols", "=", "80", ",", "colour", "=", "\"blue\"", "\n", ")", ":", "\n", "            ", "batch_sums", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "len", "(", "x", "[", "i", "]", ")", ")", ":", "\n", "                ", "sum", "=", "np", ".", "sum", "(", "x", "[", "i", "]", "[", "j", "]", ")", "\n", "batch_sums", ".", "append", "(", "sum", ")", "\n", "", "per_input_batch_sums", ".", "append", "(", "batch_sums", ")", "\n", "", "x", "=", "np", ".", "array", "(", "per_input_batch_sums", ")", "\n", "\n", "# save gradients of parameters with respect to output", "\n", "self", ".", "bias_gradient", "=", "1", "*", "ag", "\n", "self", ".", "weights_gradients", "=", "x", "*", "ag", "\n", "# calculate the average of these gradient between batches", "\n", "self", ".", "bias_gradient", "=", "np", ".", "sum", "(", "\n", "self", ".", "bias_gradient", ",", "axis", "=", "1", ")", "/", "self", ".", "bias_gradient", ".", "shape", "[", "1", "]", "\n", "self", ".", "weights_gradients", "=", "np", ".", "sum", "(", "\n", "self", ".", "weights_gradients", ",", "axis", "=", "1", ")", "/", "self", ".", "weights_gradients", ".", "shape", "[", "1", "]", "\n", "\n", "# calculate gradient with respect to fully connected ANN", "\n", "df_dx", "=", "np", ".", "array", "(", "list", "(", "map", "(", "lambda", "a", ":", "a", "*", "np", ".", "squeeze", "(", "ag", ",", "axis", "=", "0", ")", ",", "\n", "self", ".", "weights", ")", ")", ")", "\n", "return", "df_dx", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.layer.ann_old.ann_layer_tests.data": [[89, 95], ["numpy.random.rand"], "methods", ["None"], ["@", "property", "\n", "def", "data", "(", "self", ")", ":", "\n", "# array = np.arange(1*32*32*3)", "\n", "# array.shape = (1, 32, 32, 3)", "\n", "        ", "array", "=", "np", ".", "random", ".", "rand", "(", "2", ",", "3", ",", "4", ")", "\n", "return", "array", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.layer.ann_old.ann_layer_tests.reseal_args": [[96, 106], ["pow"], "methods", ["None"], ["", "@", "property", "\n", "def", "reseal_args", "(", "self", ")", ":", "\n", "        ", "return", "{", "\n", "\"scheme\"", ":", "seal", ".", "scheme_type", ".", "CKKS", ",", "\n", "\"poly_modulus_degree\"", ":", "8192", "*", "2", ",", "# 438", "\n", "# \"coefficient_modulus\": [60, 40, 40, 60],", "\n", "\"coefficient_modulus\"", ":", "\n", "[", "45", ",", "30", ",", "30", ",", "30", ",", "30", ",", "30", ",", "30", ",", "30", ",", "30", ",", "30", ",", "30", ",", "45", "]", ",", "\n", "\"scale\"", ":", "pow", "(", "2.0", ",", "30", ")", ",", "\n", "\"cache\"", ":", "True", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.layer.ann_old.ann_layer_tests.setUp": [[108, 116], ["time.time"], "methods", ["None"], ["", "def", "setUp", "(", "self", ")", ":", "\n", "        ", "import", "time", "\n", "\n", "self", ".", "weights", "=", "(", "1", ",", "3", ",", "3", ",", "3", ")", "# if tuple allows cnn to initialise itself", "\n", "self", ".", "stride", "=", "[", "1", ",", "3", ",", "3", ",", "3", "]", "# stride list per-dimension", "\n", "self", ".", "bias", "=", "0", "# assume no bias at first", "\n", "\n", "self", ".", "startTime", "=", "time", ".", "time", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.layer.ann_old.ann_layer_tests.tearDown": [[117, 121], ["print", "time.time", "ann_old.ann_layer_tests.id"], "methods", ["None"], ["", "def", "tearDown", "(", "self", ")", ":", "\n", "        ", "import", "time", "# dont want time to be imported unless testing as unused", "\n", "t", "=", "time", ".", "time", "(", ")", "-", "self", ".", "startTime", "\n", "print", "(", "'%s: %.3f'", "%", "(", "self", ".", "id", "(", ")", ",", "t", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.layer.ann_old.ann_layer_tests.test_ann_shapes": [[122, 198], ["fhez.rearray.ReArray", "range", "ann_old.ann_layer_tests.assertIsInstance", "ann_old.Layer_ANN", "copy.deepcopy", "range", "fhez.rearray.ReArray", "x.append", "print", "ann_old.Layer_ANN.forward", "copy.deepcopy.forward", "ann_old.ann_layer_tests.assertEqual", "ann_old.ann_layer_tests.assertEqual", "numpy.array", "range", "numpy.around", "ann_old.Layer_ANN.backward", "copy.deepcopy.backward", "print", "ann_old.ann_layer_tests.assertEqual", "ann_old.ann_layer_tests.assertEqual", "Layer_ANN.update", "copy.deepcopy.update", "numpy.array", "a.sum.sum.sum", "a.sum.sum.mean", "len"], "methods", ["home.repos.pwc.inspect_result.DreamingRaven_python-reseal.graph.dll.DLL.append", "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.loss.mse.MSE.forward", "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.loss.mse.MSE.forward", "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.loss.mse.MSE.backward", "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.loss.mse.MSE.backward", "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.loss.mse.MSE.update", "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.loss.mse.MSE.update", "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.rearray.ReArray.sum"], ["", "def", "test_ann_shapes", "(", "self", ")", ":", "\n", "        ", "\"\"\"Test both numpy and ReArray input result in desired ann output.\"\"\"", "\n", "import", "copy", "\n", "\n", "x_dummy", "=", "ReArray", "(", "self", ".", "data", ",", "**", "self", ".", "reseal_args", ")", "\n", "x", "=", "[", "]", "\n", "num_inputs", "=", "5", "\n", "for", "i", "in", "range", "(", "num_inputs", ")", ":", "\n", "            ", "r", "=", "ReArray", "(", "clone", "=", "x_dummy", ",", "plaintext", "=", "self", ".", "data", ")", "\n", "x", ".", "append", "(", "r", ")", "\n", "", "self", ".", "assertIsInstance", "(", "x", "[", "i", "]", ",", "ReArray", ")", "\n", "\n", "ann", "=", "Layer_ANN", "(", "weights", "=", "(", "num_inputs", ",", ")", ",", "\n", "bias", "=", "self", ".", "bias", ")", "\n", "np_ann", "=", "copy", ".", "deepcopy", "(", "ann", ")", "\n", "previous_activation", "=", "None", "\n", "\n", "for", "i", "in", "range", "(", "10", ")", ":", "\n", "            ", "debug", "=", "{", "}", "\n", "print", "(", "\"ANN ITERATION:\"", ",", "i", ")", "\n", "debug", "[", "\"iteration\"", "]", "=", "i", "\n", "# FORWARD PASS TEST", "\n", "activations", "=", "ann", ".", "forward", "(", "x", ")", "\n", "np_activations", "=", "np_ann", ".", "forward", "(", "np", ".", "array", "(", "x", ")", ")", "\n", "# check that output is equal in shape to any single input ndarray", "\n", "# also check that ReArray and numpy produce the same results", "\n", "self", ".", "assertEqual", "(", "activations", ".", "shape", ",", "x_dummy", ".", "shape", ")", "\n", "self", ".", "assertEqual", "(", "np_activations", ".", "shape", ",", "x_dummy", ".", "shape", ")", "\n", "# self.assertListEqual(", "\n", "#     np.around(np.array(activations),", "\n", "#               decimals=2).flatten().tolist(),", "\n", "#     np.around(np.array(np_activations),", "\n", "#               decimals=2).flatten().tolist(),", "\n", "# )", "\n", "a", "=", "np", ".", "array", "(", "np_activations", ")", "\n", "# print(a, \"\\n\", a.shape)", "\n", "for", "_", "in", "range", "(", "1", ",", "a", ".", "ndim", ")", ":", "\n", "                ", "a", "=", "a", ".", "sum", "(", "axis", "=", "-", "1", ")", "\n", "# print(a, \"\\n\", a.shape)", "\n", "", "a", "=", "np", ".", "around", "(", "a", ".", "mean", "(", "axis", "=", "0", ")", ",", "decimals", "=", "5", ")", "\n", "debug", "[", "\"activation-np\"", "]", "=", "a", "\n", "\n", "# CHECK IF MORE ACCURATE PREDICTION", "\n", "# print(a)", "\n", "current_loss", "=", "1", "-", "a", "\n", "debug", "[", "\"target\"", "]", "=", "1", "\n", "debug", "[", "\"loss-np\"", "]", "=", "current_loss", "\n", "if", "previous_activation", "is", "not", "None", ":", "\n", "                ", "previous_loss", "=", "1", "-", "previous_activation", "\n", "txt", "=", "\"loss somehow more inacurate activations\"", ".", "format", "(", ")", "\n", "# print(\"current:\", abs(current_loss),", "\n", "#       \"previous:\", abs(previous_loss))", "\n", "# self.assertLess(abs(current_loss), abs(previous_loss), txt)", "\n", "", "previous_activation", "=", "a", "\n", "\n", "# BACKWARD PASS TEST", "\n", "gradient", "=", "ann", ".", "backward", "(", "1", "-", "a", ")", "\n", "# print(\"GRADIENT\", gradient)", "\n", "np_gradient", "=", "np_ann", ".", "backward", "(", "1", "-", "a", ")", "\n", "debug", "[", "\"gradient-np\"", "]", "=", "np_gradient", "\n", "print", "(", "debug", ")", "\n", "# we desire the resultant gradient to be of shape", "\n", "# (num_inputs, num_batches)", "\n", "desired_shape", "=", "(", "num_inputs", ",", ")", "+", "(", "len", "(", "x_dummy", ")", ",", ")", "\n", "self", ".", "assertEqual", "(", "gradient", ".", "shape", ",", "desired_shape", ")", "\n", "self", ".", "assertEqual", "(", "np_gradient", ".", "shape", ",", "desired_shape", ")", "\n", "# self.assertListEqual(", "\n", "#     np.around(np.array(gradient),", "\n", "#               decimals=2).flatten().tolist(),", "\n", "#     np.around(np.array(np_gradient),", "\n", "#               decimals=2).flatten().tolist(),", "\n", "# )", "\n", "\n", "# UPDATE ANN", "\n", "ann", ".", "update", "(", ")", "\n", "np_ann", ".", "update", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.layer.cnn_old.Layer_CNN.forward": [[23, 56], ["tqdm.tqdm.tqdm", "numpy.array", "cnn_old.Layer_CNN.windex", "list", "range", "numpy.zeros", "cnn_old.Layer_CNN.activation_function.forward", "activated.append", "map", "len", "len"], "methods", ["home.repos.pwc.inspect_result.DreamingRaven_python-reseal.operations.cc.CC.windex", "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.loss.mse.MSE.forward", "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.graph.dll.DLL.append"], ["    ", "@", "Layer", ".", "fwd", "\n", "def", "forward", "(", "self", ",", "x", ":", "(", "np", ".", "array", ",", "ReArray", ")", ")", ":", "\n", "        ", "\"\"\"Take lst of batches of x, return activated output lst of layer.\"\"\"", "\n", "\n", "# stride over x using our convolutional filter", "\n", "# lets say x = (64, 32, 32, 3) or x_1D = (3, 100, 1, 8)", "\n", "# also could be x = (64, 32, 32, crypt), x = (3, 100, 1, crypt)", "\n", "# and filter is (32, 3, 3, 3) or x_1D = (1, 100, 1, 8)", "\n", "\n", "# if no cross correlation windows have been specified create them", "\n", "# and cache them for later re-use as uneccessary to re-compute", "\n", "if", "self", ".", "windows", "is", "None", ":", "\n", "            ", "self", ".", "windows", "=", "self", ".", "windex", "(", "data", "=", "x", ".", "shape", "[", "1", ":", "]", ",", "\n", "filter", "=", "self", ".", "weights", ".", "shape", "[", "1", ":", "]", ",", "\n", "stride", "=", "self", ".", "stride", "[", "1", ":", "]", ")", "\n", "self", ".", "windows", "=", "list", "(", "map", "(", "self", ".", "windex_to_slice", ",", "self", ".", "windows", ")", ")", "\n", "\n", "", "activated", "=", "[", "]", "\n", "# apply each window and do it by index so can state progress", "\n", "for", "i", "in", "tqdm", "(", "range", "(", "len", "(", "self", ".", "windows", ")", ")", ",", "desc", "=", "\"{}.{}\"", ".", "format", "(", "\n", "self", ".", "__class__", ".", "__name__", ",", "\"forward\"", ")", ",", "\n", "ncols", "=", "80", ",", "colour", "=", "\"blue\"", "\n", ")", ":", "\n", "# create a primer for application of window without having to", "\n", "# modify x but instead the filter itself", "\n", "            ", "cc_primer", "=", "np", ".", "zeros", "(", "x", ".", "shape", "[", "1", ":", "]", ")", "\n", "# now we have a sparse vectore that can be used to convolve", "\n", "cc_primer", "[", "self", ".", "windows", "[", "i", "]", "]", "=", "self", ".", "weights", "\n", "t", "=", "cc_primer", "*", "x", "\n", "t", "=", "t", "+", "(", "self", ".", "bias", "/", "(", "t", ".", "size", "/", "len", "(", "t", ")", ")", ")", "# commute addition before sum", "\n", "t", "=", "self", ".", "activation_function", ".", "forward", "(", "t", ")", "\n", "activated", ".", "append", "(", "t", ")", "\n", "", "return", "np", ".", "array", "(", "activated", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.layer.cnn_old.Layer_CNN.backward": [[57, 100], ["numpy.array", "numpy.sum", "tqdm.tqdm.tqdm", "numpy.array", "range", "numpy.random.rand", "range", "numpy.array", "per_batch_windows.append", "len", "len", "numpy.expand_dims", "len", "numpy.sum", "len", "list", "map"], "methods", ["home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.rearray.ReArray.sum", "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.graph.dll.DLL.append", "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.rearray.ReArray.sum"], ["", "@", "Layer", ".", "bwd", "\n", "def", "backward", "(", "self", ",", "gradient", ",", "x", ")", ":", "\n", "        ", "\"\"\"Calculate the local gradient of this CNN.\n\n        Given the gradient that precedes us,\n        what is the local gradient after us.\n        \"\"\"", "\n", "ag", "=", "gradient", "\n", "x", "=", "np", ".", "array", "(", "x", ")", "\n", "# calculate gradient with respect to cross correlation", "\n", "# df/dbias is easy as its addition so its same as previous gradient", "\n", "self", ".", "bias_gradient", "=", "gradient", "*", "1", "# uneccessary but here for clarity", "\n", "# gradient from a CNN can be from multiple outputs so need to avg", "\n", "# the batches then sum the gradients that remain", "\n", "self", ".", "bias_gradient", "=", "np", ".", "sum", "(", "np", ".", "sum", "(", "self", ".", "bias_gradient", ",", "axis", "=", "1", ")", "/", "\n", "self", ".", "bias_gradient", ".", "shape", "[", "1", "]", ",", "axis", "=", "0", ")", "\n", "# for each window slice apply window to cached x to find what weights", "\n", "# were multiplied against", "\n", "per_batch_windows", "=", "[", "]", "\n", "for", "i", "in", "tqdm", "(", "range", "(", "len", "(", "self", ".", "windows", ")", ")", ",", "desc", "=", "\"{}.{}\"", ".", "format", "(", "\n", "self", ".", "__class__", ".", "__name__", ",", "\"backward-window\"", ")", ",", "\n", "ncols", "=", "80", ",", "colour", "=", "\"blue\"", "\n", ")", ":", "\n", "            ", "batch_window", "=", "np", ".", "array", "(", "\n", "list", "(", "map", "(", "lambda", "a", ":", "a", "[", "self", ".", "windows", "[", "i", "]", "]", ",", "x", ")", ")", ")", "\n", "per_batch_windows", ".", "append", "(", "batch_window", ")", "\n", "", "windows", "=", "np", ".", "array", "(", "per_batch_windows", ")", "\n", "\n", "# calculate weight gradient by expanding the gradient dims to match", "\n", "# the window dims so they can be broadcast then sum them allong the", "\n", "# number of filters axis", "\n", "t", "=", "gradient", "\n", "len_diff", "=", "len", "(", "windows", ".", "shape", ")", "-", "len", "(", "gradient", ".", "shape", ")", "\n", "# expand the dimensions of the ndarray according to the difference", "\n", "for", "i", "in", "range", "(", "len_diff", ")", ":", "\n", "            ", "t", "=", "np", ".", "expand_dims", "(", "t", ",", "axis", "=", "t", ".", "ndim", ")", "\n", "", "self", ".", "weights_gradients", "=", "(", "windows", "*", "t", ")", ".", "sum", "(", "axis", "=", "0", ")", ".", "mean", "(", "axis", "=", "0", ")", "\n", "\n", "# dont care as end of computational chain for now", "\n", "# TODO finish calculating gradient of inputs with respect to cc outputs", "\n", "# return local gradient", "\n", "df_dx", "=", "np", ".", "random", ".", "rand", "(", "len", "(", "x", ")", ")", "\n", "return", "df_dx", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.layer.cnn_old.Layer_CNN.windows": [[106, 109], ["None"], "methods", ["None"], ["", "", "@", "windows", ".", "setter", "\n", "def", "windows", "(", "self", ",", "windows", ")", ":", "\n", "        ", "self", ".", "cache", "[", "\"windows\"", "]", "=", "windows", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.layer.cnn_old.Layer_CNN.windex": [[110, 200], ["isinstance", "cnn_old.Layer_CNN.probe_shape", "isinstance", "cnn_old.Layer_CNN.probe_shape", "len", "list", "range", "copy.deepcopy", "list", "range", "copy.deepcopy.append", "cnn_old.Layer_CNN.windex", "windows.extend", "windows.append", "len"], "methods", ["home.repos.pwc.inspect_result.DreamingRaven_python-reseal.operations.cc.CC.probe_shape", "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.operations.cc.CC.probe_shape", "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.graph.dll.DLL.append", "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.operations.cc.CC.windex", "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.graph.dll.DLL.append"], ["", "def", "windex", "(", "self", ",", "data", ":", "list", ",", "filter", ":", "list", ",", "stride", ":", "list", ",", "\n", "dimension", ":", "int", "=", "0", ",", "partial", ":", "list", "=", "[", "]", ")", ":", "\n", "        ", "\"\"\"\n        Recursive window index or Windex.\n\n        This function takes 3 lists; data, filter, and stride.\n        Data is a regular multidimensional list, so in the case of a 32x32\n        pixel image you would expect a list of shape (32,32,3) 3 being the RGB\n        channels.\n        Filter is the convolutional filter which we seek to find all windows of\n        inside the data. So for data (32,32,3) a standard filter could be\n        applied of shape (3,3,3).\n        Stride is a 1 dimensional list representing the strides for each\n        dimension, so a stride list such as [1,2,3] on data (32,32,3) and\n        filter (3,3,3), would move the window 1 in the first 32 dimension,\n        2 in the second 32 dim, and 3 in the 3 dimension.\n\n        This function returns a 1D list of all windows, which are themselves\n        lists.\n        These windows are the same length as the number of dimensions, and each\n        dimension consists of indexes with which to slice the original data to\n        create the matrix with which to convolve (cross correlate).\n        An example given: data.shape=(4,4), filter.shape=(2,2), stride=[1,1]\n\n        .. code-block:: python\n\n            list_of_window_indexes = [\n                [[0, 1], [0, 1]], # 0th window\n                [[0, 1], [1, 2]], # 1st window\n                [[0, 1], [2, 3]], # ...\n                [[1, 2], [0, 1]],\n                [[1, 2], [1, 2]],\n                [[1, 2], [2, 3]],\n                [[2, 3], [0, 1]],\n                [[2, 3], [1, 2]],\n                [[2, 3], [2, 3]], # T_x-1 window\n            ]\n\n        We get the indexes rather than the actual data for two reasons:\n\n        - we want to be able to cache this calculation and use it for\n          homogenus data that could be streaming into a convolutional\n          neural networks, cutting the time per epoch down.\n        - we want to use pure list slicing so that we can work with non-\n          standard data, E.G Fully Homomorphically Encrypted lists.\n        \"\"\"", "\n", "# get shapes of structural lists", "\n", "d_shape", "=", "data", "if", "isinstance", "(", "data", ",", "tuple", ")", "else", "self", ".", "probe_shape", "(", "\n", "data", ")", "\n", "f_shape", "=", "filter", "if", "isinstance", "(", "filter", ",", "tuple", ")", "else", "self", ".", "probe_shape", "(", "\n", "filter", ")", "\n", "# if we are not at the end/ last dimension", "\n", "if", "len", "(", "stride", ")", ">", "dimension", ":", "\n", "# creating a list matching dimension len so we can slice", "\n", "            ", "window_heads", "=", "list", "(", "range", "(", "d_shape", "[", "dimension", "]", ")", ")", "\n", "# using dimension list to calculate strides using slicing", "\n", "window_heads", "=", "window_heads", "[", ":", ":", "stride", "[", "dimension", "]", "]", "\n", "# creating window container to hold each respective window", "\n", "windows", "=", "[", "]", "\n", "# iterate through first index/ head of window", "\n", "for", "window_head", "in", "window_heads", ":", "\n", "# copy partial window up till now to branch it to mutliple", "\n", "# windows", "\n", "                ", "current_partial_window", "=", "copy", ".", "deepcopy", "(", "partial", ")", "\n", "# create index range of window in this dimension", "\n", "window", "=", "list", "(", "range", "(", "window_head", ",", "window_head", "+", "\n", "f_shape", "[", "dimension", "]", ")", ")", "\n", "# if window end \"-1\" is within data bounds", "\n", "if", "(", "window", "[", "-", "1", "]", ")", "<", "d_shape", "[", "dimension", "]", ":", "\n", "# add this dimensions window indexes to partial", "\n", "                    ", "current_partial_window", ".", "append", "(", "window", ")", "\n", "# pass partial to recurse and build it up further", "\n", "subwindow", "=", "self", ".", "windex", "(", "data", ",", "filter", ",", "stride", ",", "dimension", "+", "1", ",", "\n", "current_partial_window", ")", "\n", "# logger.debug(\"subwindow {}: {}\".format(dimension,", "\n", "#                                        subwindow))", "\n", "# since we want to create a flat list we want to extend if", "\n", "# the list is still building the partial window or append", "\n", "# if concatenating the partial windows to a single list", "\n", "if", "(", "len", "(", "stride", ")", "-", "1", ")", ">", "dimension", ":", "\n", "                        ", "windows", ".", "extend", "(", "subwindow", ")", "\n", "", "else", ":", "\n", "                        ", "windows", ".", "append", "(", "subwindow", ")", "\n", "", "", "else", ":", "\n", "# discarding illegal windows that are out of bounds", "\n", "                    ", "pass", "\n", "", "", "return", "windows", "\n", "", "else", ":", "\n", "# this is the end of the sequence, can do no more so return", "\n", "            ", "return", "partial", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.layer.cnn_old.Layer_CNN.windex_to_slice": [[201, 208], ["slice"], "methods", ["None"], ["", "", "def", "windex_to_slice", "(", "self", ",", "window", ")", ":", "\n", "        ", "\"\"\"Convert x sides of window expression into slices to slice np.\"\"\"", "\n", "slicedex", "=", "(", ")", "\n", "for", "dimension", "in", "window", ":", "\n", "            ", "t", "=", "(", "slice", "(", "dimension", "[", "0", "]", ",", "dimension", "[", "-", "1", "]", "+", "1", ")", ",", ")", "\n", "slicedex", "+=", "t", "\n", "", "return", "slicedex", "\n", "", "", ""]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.layer.layer.Layer.__init__": [[16, 28], ["numpy.broadcast_to"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "\n", "weights", ",", "\n", "bias", ",", "stride", "=", "None", ",", "\n", "activation", "=", "None", ",", "\n", ")", ":", "\n", "        ", "self", ".", "weights", "=", "weights", "\n", "self", ".", "bias", "=", "bias", "\n", "if", "activation", ":", "\n", "            ", "self", ".", "activation_function", "=", "activation", "\n", "", "if", "stride", "is", "not", "None", ":", "\n", "            ", "stride", "=", "np", ".", "broadcast_to", "(", "stride", ",", "self", ".", "weights", ".", "ndim", ")", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.layer.layer.Layer.is_activation": [[29, 33], ["None"], "methods", ["None"], ["", "", "@", "property", "\n", "def", "is_activation", "(", "self", ")", ":", "\n", "        ", "\"\"\"Are we an Activation function.\"\"\"", "\n", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.layer.layer.Layer.is_layer": [[34, 38], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "is_layer", "(", "self", ")", ":", "\n", "        ", "\"\"\"Are we a Layer.\"\"\"", "\n", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.layer.layer.Layer.weights": [[43, 58], ["isinstance", "numpy.random.rand"], "methods", ["None"], ["", "@", "weights", ".", "setter", "\n", "def", "weights", "(", "self", ",", "weights", ")", ":", "\n", "# initialise weights from tuple dimensions", "\n", "# TODO: properly implement xavier weight initialisation over np.rand", "\n", "        ", "if", "isinstance", "(", "weights", ",", "tuple", ")", ":", "\n", "# https://www.coursera.org/specializations/deep-learning", "\n", "# https://towardsdatascience.com/weight-initialization-techniques-in-neural-networks-26c649eb3b78", "\n", "            ", "self", ".", "_weights", "=", "np", ".", "random", ".", "rand", "(", "*", "weights", ")", "\n", "# ensure initial product of weights * x is in range 0-1", "\n", "# since each product of these wieghts is summed lets ensure they", "\n", "# are smaller than 1 when they are summed by dividing the weights", "\n", "# (not X as its a cyphertext) by the number of elements being sumd", "\n", "self", ".", "_weights", "=", "self", ".", "weights", "/", "self", ".", "weights", ".", "size", "\n", "", "else", ":", "\n", "            ", "self", ".", "_weights", "=", "weights", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.layer.layer.Layer.bias": [[67, 70], ["None"], "methods", ["None"], ["", "", "@", "bias", ".", "setter", "\n", "def", "bias", "(", "self", ",", "bias", ")", ":", "\n", "        ", "self", ".", "_bias", "=", "bias", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.layer.layer.Layer.stride": [[79, 82], ["None"], "methods", ["None"], ["", "", "@", "stride", ".", "setter", "\n", "def", "stride", "(", "self", ",", "stride", ")", ":", "\n", "        ", "self", ".", "_stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.layer.layer.Layer.activation_function": [[91, 94], ["None"], "methods", ["None"], ["", "", "@", "activation_function", ".", "setter", "\n", "def", "activation_function", "(", "self", ",", "activation_function", ")", ":", "\n", "        ", "self", ".", "_activation_function", "=", "activation_function", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.layer.layer.Layer.update": [[95, 118], ["isinstance", "numpy.array", "isinstance", "numpy.array", "numpy.array", "numpy.array", "numpy.array"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "learning_rate", "=", "None", ")", ":", "\n", "        ", "\"\"\"We need to update 2 things, both the biases and the weights\"\"\"", "\n", "lr", "=", "learning_rate", "if", "learning_rate", "is", "not", "None", "else", "0.001", "\n", "lr", "=", "lr", "if", "isinstance", "(", "lr", ",", "np", ".", "ndarray", ")", "else", "np", ".", "array", "(", "[", "lr", "]", ")", "\n", "# new_parameter = old_parameter - learning_rate * gradient_of_parameter", "\n", "bias_shape_origin", "=", "self", ".", "bias", ".", "shape", "if", "isinstance", "(", "\n", "self", ".", "bias", ",", "np", ".", "ndarray", ")", "else", "np", ".", "array", "(", "[", "self", ".", "bias", "]", ")", ".", "shape", "\n", "self", ".", "bias", "=", "self", ".", "bias", "-", "(", "lr", "*", "self", ".", "bias_gradient", ")", "\n", "txt", "=", "\"Shape changed: {} to: {} given LR: {} and gradient: {}\"", ".", "format", "(", "\n", "bias_shape_origin", ",", "\n", "np", ".", "array", "(", "self", ".", "bias", ")", ".", "shape", ",", "\n", "np", ".", "array", "(", "lr", ")", ".", "shape", ",", "\n", "self", ".", "bias_gradient", ".", "shape", ")", "\n", "assert", "(", "self", ".", "bias", ".", "shape", "==", "bias_shape_origin", ")", ",", "txt", "\n", "\n", "weights_shape_origin", "=", "self", ".", "weights", ".", "shape", "\n", "self", ".", "weights", "=", "self", ".", "weights", "-", "(", "lr", "*", "self", ".", "weights_gradients", ")", "\n", "txt", "=", "\"Shape changed: {} to: {} given LR: {} and gradient: {}\"", ".", "format", "(", "\n", "weights_shape_origin", ",", "\n", "self", ".", "weights", ".", "shape", ",", "\n", "np", ".", "array", "(", "lr", ")", ".", "shape", ",", "\n", "self", ".", "weights_gradients", ".", "shape", ")", "\n", "assert", "(", "self", ".", "weights", ".", "shape", "==", "weights_shape_origin", ")", ",", "txt", "\n", "", "", ""]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.layer.ann.ANN.__init__": [[16, 22], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "weights", ":", "np", ".", "array", "=", "None", ",", "bias", ":", "int", "=", "None", ")", ":", "\n", "        ", "\"\"\"Initialise dense net.\"\"\"", "\n", "if", "weights", "is", "not", "None", ":", "\n", "            ", "self", ".", "weights", "=", "weights", "\n", "", "if", "bias", "is", "not", "None", ":", "\n", "            ", "self", ".", "bias", "=", "bias", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.layer.ann.ANN.w": [[28, 31], ["None"], "methods", ["None"], ["", "@", "w", ".", "setter", "\n", "def", "w", "(", "self", ",", "w", ")", ":", "\n", "        ", "self", ".", "weights", "=", "w", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.layer.ann.ANN.weights": [[41, 49], ["isinstance", "numpy.random.rand"], "methods", ["None"], ["", "@", "weights", ".", "setter", "\n", "def", "weights", "(", "self", ",", "weights", ":", "np", ".", "ndarray", ")", ":", "\n", "        ", "\"\"\"Set the NN weights or let it self initialise.\"\"\"", "\n", "if", "isinstance", "(", "weights", ",", "tuple", ")", ":", "\n", "# if given a tuple will self initialise weights", "\n", "# for now this is done at random", "\n", "            ", "weights", "=", "np", ".", "random", ".", "rand", "(", "*", "weights", ")", "\n", "", "self", ".", "_weights", "=", "weights", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.layer.ann.ANN.b": [[55, 58], ["None"], "methods", ["None"], ["", "@", "b", ".", "setter", "\n", "def", "b", "(", "self", ",", "b", ")", ":", "\n", "        ", "self", ".", "bias", "=", "b", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.layer.ann.ANN.bias": [[68, 72], ["None"], "methods", ["None"], ["", "@", "bias", ".", "setter", "\n", "def", "bias", "(", "self", ",", "bias", ")", ":", "\n", "        ", "\"\"\"Set ANN sum of products bias.\"\"\"", "\n", "self", ".", "_bias", "=", "bias", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.layer.ann.ANN.forward": [[73, 93], ["numpy.multiply", "numpy.sum", "ann.ANN.inputs.append", "numpy.add", "len", "len", "ValueError", "len", "len"], "methods", ["home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.rearray.ReArray.multiply", "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.rearray.ReArray.sum", "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.graph.dll.DLL.append", "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.rearray.ReArray.add"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "r\"\"\"Compute forward pass of neural network.\n\n        .. math::\n\n            a^{(i)} = \\sum_{t=0}^{T_x-1}(w^{<t>}x^{(i)<t>})+b\n\n        \"\"\"", "\n", "# check that first dim matches so they can loop together", "\n", "if", "len", "(", "x", ")", "!=", "len", "(", "self", ".", "weights", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\"Mismatched shapes inp:{}, weights:{}\"", ".", "format", "(", "\n", "len", "(", "x", ")", ",", "\n", "len", "(", "self", ".", "weights", ")", ")", ")", "\n", "# map - product of weight", "\n", "", "weighted", "=", "np", ".", "multiply", "(", "x", ",", "self", ".", "weights", ")", "\n", "# reduce - sum of products using dispatcher", "\n", "sum", "=", "np", ".", "sum", "(", "weighted", ",", "axis", "=", "0", ")", "# sum over only first axis", "\n", "# now save the input we originally got since it has been processed", "\n", "self", ".", "inputs", ".", "append", "(", "x", ")", "\n", "return", "np", ".", "add", "(", "sum", ",", "self", ".", "bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.layer.ann.ANN.backward": [[94, 114], ["numpy.array", "numpy.multiply", "numpy.multiply", "numpy.multiply", "ann.ANN.gradients.append", "ann.ANN.inputs.pop"], "methods", ["home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.rearray.ReArray.multiply", "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.rearray.ReArray.multiply", "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.rearray.ReArray.multiply", "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.graph.dll.DLL.append"], ["", "def", "backward", "(", "self", ",", "gradient", ")", ":", "\n", "        ", "r\"\"\"Compute backward pass of neural network.\n\n        .. math::\n\n            \\frac{df}{db} = 1 \\frac{dg}{dx}\n\n            \\frac{df}{dw^{<t>}} = x^{(i)<t>} \\frac{dg}{dx}\n\n            \\frac{df}{dx^{(i)<t>}} = w^{<t>} \\frac{dg}{dx}\n        \"\"\"", "\n", "x", "=", "np", ".", "array", "(", "self", ".", "inputs", ".", "pop", "(", ")", ")", "\n", "# dfdx", "\n", "dfdx", "=", "np", ".", "multiply", "(", "self", ".", "weights", ",", "gradient", ")", "\n", "# dfdw", "\n", "dfdw", "=", "np", ".", "multiply", "(", "x", ",", "gradient", ")", "\n", "# dfdb", "\n", "dfdb", "=", "np", ".", "multiply", "(", "1", ",", "gradient", ")", "\n", "self", ".", "gradients", ".", "append", "(", "{", "\"dfdw\"", ":", "dfdw", ",", "\"dfdb\"", ":", "dfdb", ",", "\"dfdx\"", ":", "dfdx", "}", ")", "\n", "return", "dfdx", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.layer.ann.ANN.update": [[115, 118], ["ann.ANN.updater"], "methods", ["home.repos.pwc.inspect_result.DreamingRaven_python-reseal.graph.node.Node.updater"], ["", "def", "update", "(", "self", ")", ":", "\n", "        ", "\"\"\"Update weights and bias of the network stocastically.\"\"\"", "\n", "self", ".", "updater", "(", "parm_names", "=", "[", "\"w\"", ",", "\"b\"", "]", ",", "it", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.layer.ann.ANN.updates": [[119, 122], ["ann.ANN.updater"], "methods", ["home.repos.pwc.inspect_result.DreamingRaven_python-reseal.graph.node.Node.updater"], ["", "def", "updates", "(", "self", ")", ":", "\n", "        ", "\"\"\"Update weights and bias as one batch all together.\"\"\"", "\n", "self", ".", "updater", "(", "parm_names", "=", "[", "\"w\"", ",", "\"b\"", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.layer.ann.ANN.cost": [[123, 127], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "cost", "(", "self", ")", ":", "\n", "        ", "\"\"\"Get no cost of a this node.\"\"\"", "\n", "return", "2", "\n", "", "", ""]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.parametrisation.autofhe.autoDiscover": [[16, 56], ["tuple", "graph.nodes", "node_data.get", "isinstance", "autofhe.autoDiscover", "graph.successors", "graph.nodes", "node_data[].get", "autofhe.autoDiscover", "node_data[].get", "graph.nodes"], "function", ["home.repos.pwc.inspect_result.DreamingRaven_python-reseal.parametrisation.autofhe.autoDiscover", "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.parametrisation.autofhe.autoDiscover"], ["def", "autoDiscover", "(", "graph", ",", "\n", "source", ":", "str", ",", "\n", "node", ":", "str", ",", "\n", "concern", ":", "list", "=", "None", ",", "\n", "cost", ":", "int", "=", "None", ")", ":", "\n", "    ", "\"\"\"Propagate some source through the network.\n\n    .. note::\n\n        You are porbably not interested in this function, it is here for manual\n        control and as a subpart of autoHE and in future autoFHE.\n    \"\"\"", "\n", "cost", "=", "cost", "if", "cost", "is", "not", "None", "else", "0", "\n", "concern", "=", "tuple", "(", "concern", "if", "concern", "is", "not", "None", "else", "[", "Encrypt", ",", "\n", "Decrypt", ",", "\n", "Rotate", "]", ")", "\n", "# gather facts", "\n", "node_object", "=", "graph", ".", "nodes", "(", "data", "=", "True", ")", "[", "node", "]", "[", "\"node\"", "]", "\n", "node_data", "=", "graph", ".", "nodes", "(", "data", "=", "True", ")", "[", "node", "]", "\n", "\n", "# on all nodes", "\n", "if", "node_data", ".", "get", "(", "\"sources\"", ")", "is", "None", ":", "\n", "        ", "node_data", "[", "\"sources\"", "]", "=", "{", "}", "\n", "", "if", "source", "!=", "node", ":", "\n", "        ", "if", "node_data", "[", "\"sources\"", "]", ".", "get", "(", "source", ")", "is", "None", ":", "\n", "            ", "node_data", "[", "\"sources\"", "]", "[", "source", "]", "=", "cost", "\n", "", "elif", "node_data", "[", "\"sources\"", "]", ".", "get", "(", "source", ")", "<", "cost", ":", "\n", "            ", "node_data", "[", "\"sources\"", "]", "[", "source", "]", "=", "cost", "\n", "\n", "# print(node, node_data[\"sources\"])", "\n", "\n", "# on concerned nodes which is not our initial one", "\n", "", "", "if", "isinstance", "(", "node_object", ",", "concern", ")", "and", "source", "!=", "node", ":", "\n", "        ", "autoDiscover", "(", "graph", ",", "source", "=", "node", ",", "node", "=", "node", ",", "concern", "=", "concern", ",", "cost", "=", "0", ")", "\n", "", "else", ":", "\n", "# on every other node", "\n", "        ", "for", "i", "in", "graph", ".", "successors", "(", "node", ")", ":", "\n", "            ", "next_cost", "=", "graph", ".", "nodes", "(", "data", "=", "True", ")", "[", "i", "]", "[", "\"node\"", "]", ".", "cost", "\n", "autoDiscover", "(", "graph", ",", "source", "=", "source", ",", "node", "=", "i", ",", "concern", "=", "concern", ",", "\n", "cost", "=", "cost", "+", "next_cost", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.parametrisation.autofhe.autoGroup": [[58, 104], ["tuple", "fhez.nn.graph.utils.assign_edge_costing", "autofhe.autoDiscover", "graph.nodes", "groups[].get", "len", "groups[].append", "j[].get", "logging.warning"], "function", ["home.repos.pwc.inspect_result.DreamingRaven_python-reseal.graph.utils.assign_edge_costing", "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.parametrisation.autofhe.autoDiscover", "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.graph.dll.DLL.append"], ["", "", "", "def", "autoGroup", "(", "graph", ",", "nodes", ",", "concern", "=", "None", ",", "cost_edges", "=", "None", ")", ":", "\n", "    ", "\"\"\"Calculate all encryption groups in neural network, and their costs.\"\"\"", "\n", "cost_edges", "=", "cost_edges", "if", "cost_edges", "is", "not", "None", "else", "True", "\n", "concern", "=", "tuple", "(", "concern", "if", "concern", "is", "not", "None", "else", "[", "Encrypt", ",", "\n", "Decrypt", ",", "\n", "Rotate", "]", ")", "\n", "assert", "graph", "is", "not", "None", ",", "\"graph should exist, cannot operate on none!\"", "\n", "\n", "# ensures all edges are labeled with weights that correspond to", "\n", "# computational cost of traversing to the associated node", "\n", "if", "cost_edges", "is", "True", ":", "# should only be run once as unecessary twice", "\n", "        ", "assign_edge_costing", "(", "graph", ")", "\n", "", "for", "i", "in", "nodes", ":", "\n", "        ", "autoDiscover", "(", "graph", "=", "graph", ",", "source", "=", "i", ",", "node", "=", "i", ",", "concern", "=", "concern", ")", "\n", "\n", "# use the now calculated paths to calculate groupings, and who takes", "\n", "# from whom", "\n", "# groups as a tuple:", "\n", "# - dict of (key) node names to group number (value)", "\n", "# - list of (key) group numbers, maximum group cost (value)", "\n", "", "groups", "=", "(", "{", "}", ",", "[", "]", ")", "\n", "# for each input node", "\n", "for", "i", "in", "nodes", ":", "\n", "        ", "if", "groups", "[", "0", "]", ".", "get", "(", "i", ")", "is", "None", ":", "\n", "            ", "groups", "[", "0", "]", "[", "i", "]", "=", "len", "(", "groups", "[", "1", "]", ")", "\n", "groups", "[", "1", "]", ".", "append", "(", "0", ")", "\n", "", "t", "=", "graph", ".", "nodes", "(", "data", "=", "True", ")", "\n", "# for each node in the graph", "\n", "for", "j", "in", "t", ":", "\n", "            ", "src", "=", "j", "[", "1", "]", ".", "get", "(", "\"sources\"", ")", "\n", "\n", "if", "src", "is", "None", ":", "\n", "                ", "logger", ".", "warning", "(", "\"{} does not have {}\"", ".", "format", "(", "j", ",", "\"sources\"", ")", ")", "\n", "", "elif", "i", "in", "src", ":", "\n", "# for each key in this nodes sources", "\n", "                ", "for", "key", "in", "src", ":", "\n", "# drag every keys group to our group number", "\n", "# TODO: This should drag ALL members who are in the group", "\n", "# existing group. Currentley it will only drag this one", "\n", "# member if there are many.", "\n", "                    ", "groups", "[", "0", "]", "[", "key", "]", "=", "groups", "[", "0", "]", "[", "i", "]", "\n", "# increase group cost if greater than ours", "\n", "if", "src", "[", "key", "]", ">", "groups", "[", "1", "]", "[", "groups", "[", "0", "]", "[", "i", "]", "]", ":", "\n", "                        ", "groups", "[", "1", "]", "[", "groups", "[", "0", "]", "[", "i", "]", "]", "=", "src", "[", "key", "]", "\n", "# print(\"GROUPS\", groups)", "\n", "", "", "", "", "", "return", "groups", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.parametrisation.autofhe.ckks_param_heuristic": [[106, 156], ["pow", "numpy.ones", "numpy.sum", "int", "coef_mod.astype().tolist", "pow", "coef_mod.astype"], "function", ["home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.rearray.ReArray.sum"], ["", "def", "ckks_param_heuristic", "(", "cost", ",", "scale_pow", "=", "40", ",", "special_mult", "=", "1.5", ")", ":", "\n", "    ", "\"\"\"Given some cost generate encryption parameters.\n\n    .. note::\n\n        This is highly subject to removal, this is here in the interip untill a\n        full specification for Erray can be finalised.\n\n    +---------------------+------------------------------+\n    | poly_modulus_degree | max coeff_modulus bit-length |\n    +=====================+==============================+\n    | 1024                | 27                           |\n    +---------------------+------------------------------+\n    | 2048                | 54                           |\n    +---------------------+------------------------------+\n    | 4096                | 109                          |\n    +---------------------+------------------------------+\n    | 8192                | 218                          |\n    +---------------------+------------------------------+\n    | 16384               | 438                          |\n    +---------------------+------------------------------+\n    | 32768               | 881                          |\n    +---------------------+------------------------------+\n\n    slots (CKKS) = poly_modulus_degree/2\n    \"\"\"", "\n", "dummy", "=", "{", "\n", "\"scheme\"", ":", "2", ",", "# seal.scheme_type.CKK,", "\n", "\"poly_modulus_degree\"", ":", "8192", "*", "2", ",", "# 438", "\n", "# \"coefficient_modulus\": [60, 40, 40, 60],", "\n", "\"coefficient_modulus\"", ":", "\n", "[", "45", ",", "30", ",", "30", ",", "30", ",", "30", ",", "30", ",", "30", ",", "30", ",", "30", ",", "30", ",", "30", ",", "45", "]", ",", "\n", "\"scale\"", ":", "pow", "(", "2.0", ",", "30", ")", ",", "\n", "\"cache\"", ":", "True", ",", "\n", "}", "\n", "coef_mod", "=", "np", ".", "ones", "(", "(", "cost", "+", "2", ",", ")", ")", "*", "scale_pow", "\n", "coef_mod", "[", "0", "]", "*=", "special_mult", "\n", "coef_mod", "[", "-", "1", "]", "*=", "special_mult", "\n", "max_coef_mod_bits", "=", "27", "\n", "while", "max_coef_mod_bits", "<", "np", ".", "sum", "(", "coef_mod", ")", ":", "\n", "        ", "max_coef_mod_bits", "*=", "2", "\n", "\n", "", "parms", "=", "{", "\n", "\"scheme\"", ":", "2", ",", "\n", "\"poly_modulus_degree\"", ":", "int", "(", "1024", "*", "(", "max_coef_mod_bits", "/", "27", ")", ")", ",", "\n", "\"coefficient_modulus\"", ":", "coef_mod", ".", "astype", "(", "int", ")", ".", "tolist", "(", ")", ",", "\n", "\"scale\"", ":", "pow", "(", "2.0", ",", "scale_pow", ")", ",", "\n", "\"cache\"", ":", "True", ",", "\n", "}", "\n", "return", "parms", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.parametrisation.autofhe.autoHE": [[158, 209], ["tuple", "autofhe.autoGroup", "range", "len", "parm_func", "provider", "groups_encryptors.append", "numpy.array", "groups_nodes.items", "graph.nodes"], "function", ["home.repos.pwc.inspect_result.DreamingRaven_python-reseal.parametrisation.autofhe.autoGroup", "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.operations.encrypt.Encrypt.provider", "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.graph.dll.DLL.append"], ["", "def", "autoHE", "(", "graph", ",", "nodes", ",", "parm_func", "=", "None", ",", "provider", "=", "None", ",", "\n", "concern", "=", "None", ",", "cost_edges", "=", "None", ",", "\n", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Adjust and generate parameters along full forward path of input nodes.\n\n    A graph may have multiple input nodes, and each one will have slightly\n    different paths which may need different parameters. We dont worry about\n    output nodes since the full forward graph needs activating which means we\n    can automatically find the end nodes.\n\n    This will modify the input graph, but only needs to be done once to set\n    the optimal parms!\n\n    :arg graph: A neural network graph to automatically parameterise.\n    :type graph: networkx.MultiDiGraph\n    :arg node: Input node name to parameterise from\n    :type input_nodes: str\n    :arg cost: current cost up till this node from previous key-rotation\n    :arg concern: types list which is used to consume cost\n    :rtype: networkx.MultiDiGraph\n    :return: modified networks graph\n\n    .. warning::\n\n        This function is still a work in progress, and is subject to change!\n    \"\"\"", "\n", "# setting sane defaults to RNS-CKKS scheme", "\n", "parm_func", "=", "parm_func", "if", "parm_func", "is", "not", "None", "else", "ckks_param_heuristic", "\n", "provider", "=", "provider", "if", "provider", "is", "not", "None", "else", "ReArray", "\n", "concern", "=", "tuple", "(", "concern", "if", "concern", "is", "not", "None", "else", "[", "Encrypt", ",", "\n", "Decrypt", ",", "\n", "Rotate", "]", ")", "\n", "# label the graph and get all the groups, costs, etc", "\n", "groups_nodes", ",", "groups_costs", "=", "autoGroup", "(", "graph", ",", "nodes", ",", "concern", ",", "cost_edges", ")", "\n", "groups_encryptors", "=", "[", "]", "\n", "# for each group (no names just intiger keys) in list of costs", "\n", "for", "group", "in", "range", "(", "len", "(", "groups_costs", ")", ")", ":", "\n", "# generate the respective parameters with optional kwargs", "\n", "        ", "parms", "=", "parm_func", "(", "cost", "=", "groups_costs", "[", "group", "]", ",", "**", "kwargs", ")", "\n", "# this is now the cyphertext generator shared between grouped nodes", "\n", "# adding np array in case provider expects default input", "\n", "encryptor", "=", "provider", "(", "np", ".", "array", "(", "[", "1", "]", ")", ",", "**", "parms", ")", "\n", "groups_encryptors", ".", "append", "(", "encryptor", ")", "\n", "# limit the nodes searched to just the ones related to this group", "\n", "group_nodes", "=", "{", "\n", "key", ":", "value", "for", "key", ",", "value", "in", "groups_nodes", ".", "items", "(", ")", "if", "value", "==", "group", "\n", "}", "\n", "for", "key", "in", "group_nodes", ":", "\n", "            ", "graph", ".", "nodes", "(", "data", "=", "True", ")", "[", "key", "]", "[", "\"node\"", "]", ".", "encryptor", "=", "encryptor", "\n", "\n", "", "", "return", "groups_nodes", ",", "groups_costs", ",", "groups_encryptors", "\n", "", ""]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.parametrisation.autofhe_test.AutoHE.setUp": [[19, 22], ["time.time"], "methods", ["None"], ["def", "setUp", "(", "self", ")", ":", "\n", "        ", "\"\"\"Start timer and init variables.\"\"\"", "\n", "self", ".", "start_time", "=", "time", ".", "time", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.parametrisation.autofhe_test.AutoHE.tearDown": [[23, 27], ["print", "time.time", "autofhe_test.AutoHE.id"], "methods", ["None"], ["", "def", "tearDown", "(", "self", ")", ":", "\n", "        ", "\"\"\"Calculate and print time delta.\"\"\"", "\n", "t", "=", "time", ".", "time", "(", ")", "-", "self", ".", "start_time", "\n", "print", "(", "'%s: %.3f'", "%", "(", "self", ".", "id", "(", ")", ",", "t", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.parametrisation.autofhe_test.AutoHE.data_shape": [[28, 32], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "data_shape", "(", "self", ")", ":", "\n", "        ", "\"\"\"Define desired data shape.\"\"\"", "\n", "return", "(", "28", ",", "28", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.parametrisation.autofhe_test.AutoHE.data": [[33, 38], ["numpy.random.rand"], "methods", ["None"], ["", "@", "property", "\n", "def", "data", "(", "self", ")", ":", "\n", "        ", "\"\"\"Get some generated data.\"\"\"", "\n", "array", "=", "np", ".", "random", ".", "rand", "(", "*", "self", ".", "data_shape", ")", "\n", "return", "array", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.parametrisation.autofhe_test.AutoHE.reseal_args": [[39, 50], ["pow"], "methods", ["None"], ["", "@", "property", "\n", "def", "reseal_args", "(", "self", ")", ":", "\n", "        ", "\"\"\"Get some reseal arguments for encryption.\"\"\"", "\n", "return", "{", "\n", "\"scheme\"", ":", "2", ",", "# seal.scheme_type.CKK,", "\n", "\"poly_modulus_degree\"", ":", "8192", "*", "2", ",", "# 438", "\n", "# \"coefficient_modulus\": [60, 40, 40, 60],", "\n", "\"coefficient_modulus\"", ":", "\n", "[", "45", ",", "30", ",", "30", ",", "30", ",", "30", ",", "30", ",", "30", ",", "30", ",", "30", ",", "30", ",", "30", ",", "45", "]", ",", "\n", "\"scale\"", ":", "pow", "(", "2.0", ",", "30", ")", ",", "\n", "\"cache\"", ":", "True", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.parametrisation.autofhe_test.AutoHE.graph": [[52, 56], ["fhez.nn.graph.prefab.basic"], "methods", ["home.repos.pwc.inspect_result.DreamingRaven_python-reseal.graph.prefab.basic"], ["", "@", "property", "\n", "def", "graph", "(", "self", ")", ":", "\n", "        ", "\"\"\"Get neuron/ computational graph to test against.\"\"\"", "\n", "return", "basic", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.parametrisation.autofhe_test.AutoHE.test_parametrisation": [[57, 68], ["fhez.nn.parametrisation.autofhe.autoHE", "numpy.testing.assert_array_almost_equal", "autofhe_test.AutoHE.assertEqual", "graph.nodes"], "methods", ["home.repos.pwc.inspect_result.DreamingRaven_python-reseal.parametrisation.autofhe.autoHE"], ["", "def", "test_parametrisation", "(", "self", ")", ":", "\n", "        ", "\"\"\"Check autohe can auto parametrise as expected.\"\"\"", "\n", "graph", "=", "self", ".", "graph", "\n", "# auto parametrise all encrypted input nodes and their paths", "\n", "groups", "=", "autoHE", "(", "graph", "=", "graph", ",", "nodes", "=", "[", "\"x_0\"", ",", "\"x_1\"", ",", "\"y_0\"", "]", ")", "\n", "np", ".", "testing", ".", "assert_array_almost_equal", "(", "groups", "[", "1", "]", ",", "[", "4", ",", "4", "]", ",", "\n", "decimal", "=", "4", ",", "\n", "verbose", "=", "True", ")", "\n", "# TODO: implement array ufunc equal for this sort of comparison", "\n", "self", ".", "assertEqual", "(", "graph", ".", "nodes", "(", "data", "=", "True", ")", "[", "\"x_0\"", "]", "[", "\"node\"", "]", ".", "encryptor", ",", "\n", "groups", "[", "2", "]", "[", "0", "]", ")", "\n", "# print(graph.nodes(data=True)[\"x_0\"][\"node\"].encryptor)", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.parametrisation.autofhe_test.AutoHE.test_temp_encryptor_generator": [[83, 104], ["fhez.nn.parametrisation.autofhe.ckks_param_heuristic", "numpy.array", "fhez.rearray.ReArray", "tqdm.tqdm.tqdm", "autofhe_test.AutoHE.assertTrue", "numpy.testing.assert_array_almost_equal", "range", "numpy.multiply", "autofhe_test.AutoHE.assertRaises", "numpy.multiply", "str"], "methods", ["home.repos.pwc.inspect_result.DreamingRaven_python-reseal.parametrisation.autofhe.ckks_param_heuristic", "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.rearray.ReArray.multiply", "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.rearray.ReArray.multiply"], ["", "def", "test_temp_encryptor_generator", "(", "self", ")", ":", "\n", "        ", "\"\"\"Check that FHE parameters are suitable for associated cost.\"\"\"", "\n", "cost", "=", "10", "\n", "factor", "=", "1", "\n", "parms", "=", "ckks_param_heuristic", "(", "cost", "=", "cost", ")", "\n", "# print(parms)", "\n", "x", "=", "np", ".", "array", "(", "[", "0.5", ",", "0.3", ",", "0.7", ",", "0.9", ",", "0.1", "]", ")", "\n", "cyphertxt", "=", "ReArray", "(", "x", ",", "**", "parms", ")", "\n", "for", "_", "in", "tqdm", "(", "range", "(", "cost", ")", ")", ":", "\n", "            ", "cyphertxt", "=", "np", ".", "multiply", "(", "cyphertxt", ",", "factor", ")", "\n", "# print(\"RUN\")", "\n", "# cyphertext should be at edge of computational chain", "\n", "# check by trying to tip it over the edge with one more mult", "\n", "", "with", "self", ".", "assertRaises", "(", "ValueError", ")", "as", "context", ":", "\n", "            ", "np", ".", "multiply", "(", "cyphertxt", ",", "factor", ")", "\n", "", "self", ".", "assertTrue", "(", "\"scale out of bounds\"", "in", "str", "(", "context", ".", "exception", ")", ")", "\n", "# print(x)", "\n", "# TODO: generalise next test for all factors", "\n", "np", ".", "testing", ".", "assert_array_almost_equal", "(", "cyphertxt", ",", "x", ",", "\n", "decimal", "=", "4", ",", "\n", "verbose", "=", "True", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.operations.sum.Sum.cost": [[18, 22], ["None"], "methods", ["None"], ["@", "property", "\n", "def", "cost", "(", "self", ")", ":", "\n", "        ", "\"\"\"Get computational cost of this node.\"\"\"", "\n", "return", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.operations.sum.Sum.forward": [[23, 27], ["sum.Sum.inputs.append", "numpy.sum"], "methods", ["home.repos.pwc.inspect_result.DreamingRaven_python-reseal.graph.dll.DLL.append", "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.rearray.ReArray.sum"], ["", "def", "forward", "(", "self", ",", "x", ":", "np", ".", "ndarray", ")", ":", "\n", "        ", "\"\"\"Sum inputs together assuming first dim is inputs.\"\"\"", "\n", "self", ".", "inputs", ".", "append", "(", "x", ".", "shape", ")", "\n", "return", "np", ".", "sum", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.operations.sum.Sum.backward": [[28, 34], ["sum.Sum.inputs.pop", "numpy.array", "numpy.broadcast_to"], "methods", ["None"], ["", "def", "backward", "(", "self", ",", "gradient", ":", "np", ".", "ndarray", ")", ":", "\n", "        ", "\"\"\"Distribute gradient to inputs.\"\"\"", "\n", "shp", "=", "self", ".", "inputs", ".", "pop", "(", ")", "\n", "grad", "=", "np", ".", "array", "(", "gradient", ")", "\n", "distributed", "=", "np", ".", "broadcast_to", "(", "grad", ",", "shp", ")", "\n", "return", "distributed", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.operations.sum.Sum.update": [[35, 38], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ")", ":", "\n", "        ", "\"\"\"Do nothing since sum is not parameterisable.\"\"\"", "\n", "return", "NotImplemented", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.operations.sum.Sum.updates": [[39, 42], ["None"], "methods", ["None"], ["", "def", "updates", "(", "self", ")", ":", "\n", "        ", "\"\"\"Do nothing since sum is not parameterisable.\"\"\"", "\n", "return", "NotImplemented", "\n", "", "", ""]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.operations.enqueue_test.EnqueueTest.data_shape": [[16, 20], ["None"], "methods", ["None"], ["@", "property", "\n", "def", "data_shape", "(", "self", ")", ":", "\n", "        ", "\"\"\"Define desired data shape.\"\"\"", "\n", "return", "(", "3", ",", "32", ",", "32", ",", "3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.operations.enqueue_test.EnqueueTest.data": [[21, 26], ["numpy.random.rand"], "methods", ["None"], ["", "@", "property", "\n", "def", "data", "(", "self", ")", ":", "\n", "        ", "\"\"\"Get some generated data.\"\"\"", "\n", "array", "=", "np", ".", "random", ".", "rand", "(", "*", "self", ".", "data_shape", ")", "\n", "return", "array", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.operations.enqueue_test.EnqueueTest.reseal_args": [[27, 38], ["pow"], "methods", ["None"], ["", "@", "property", "\n", "def", "reseal_args", "(", "self", ")", ":", "\n", "        ", "\"\"\"Get some reseal arguments for encryption.\"\"\"", "\n", "return", "{", "\n", "\"scheme\"", ":", "2", ",", "# seal.scheme_type.CKK,", "\n", "\"poly_modulus_degree\"", ":", "8192", "*", "2", ",", "# 438", "\n", "# \"coefficient_modulus\": [60, 40, 40, 60],", "\n", "\"coefficient_modulus\"", ":", "\n", "[", "45", ",", "30", ",", "30", ",", "30", ",", "30", ",", "30", ",", "30", ",", "30", ",", "30", ",", "30", ",", "30", ",", "45", "]", ",", "\n", "\"scale\"", ":", "pow", "(", "2.0", ",", "30", ")", ",", "\n", "\"cache\"", ":", "True", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.operations.enqueue_test.EnqueueTest.setUp": [[40, 45], ["time.time"], "methods", ["None"], ["", "def", "setUp", "(", "self", ")", ":", "\n", "        ", "\"\"\"Start timer and init variables.\"\"\"", "\n", "self", ".", "weights", "=", "(", "1", ",", ")", "# if tuple allows cnn to initialise itself", "\n", "\n", "self", ".", "startTime", "=", "time", ".", "time", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.operations.enqueue_test.EnqueueTest.tearDown": [[46, 50], ["print", "time.time", "enqueue_test.EnqueueTest.id"], "methods", ["None"], ["", "def", "tearDown", "(", "self", ")", ":", "\n", "        ", "\"\"\"Calculate and print time delta.\"\"\"", "\n", "t", "=", "time", ".", "time", "(", ")", "-", "self", ".", "startTime", "\n", "print", "(", "'%s: %.3f'", "%", "(", "self", ".", "id", "(", ")", ",", "t", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.operations.enqueue_test.EnqueueTest.test_init": [[51, 54], ["fhez.nn.operations.enqueue.Enqueue"], "methods", ["None"], ["", "def", "test_init", "(", "self", ")", ":", "\n", "        ", "\"\"\"Test enque initialisation.\"\"\"", "\n", "Enqueue", "(", "length", "=", "10", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.operations.enqueue_test.EnqueueTest.test_forward": [[55, 68], ["fhez.nn.operations.enqueue.Enqueue", "fhez.nn.operations.enqueue.Enqueue.forward", "numpy.reshape", "numpy.testing.assert_array_almost_equal", "numpy.arange", "numpy.arange"], "methods", ["home.repos.pwc.inspect_result.DreamingRaven_python-reseal.loss.mse.MSE.forward"], ["", "def", "test_forward", "(", "self", ")", ":", "\n", "        ", "\"\"\"Check enqueue, queueing properly.\"\"\"", "\n", "l", "=", "10", "\n", "q", "=", "Enqueue", "(", "length", "=", "l", ")", "\n", "out", "=", "q", ".", "forward", "(", "np", ".", "arange", "(", "l", ")", ")", "\n", "# for i in range(l):", "\n", "#     out = q.forward(np.array([i]))", "\n", "# self.assertNotEqual(out, None)", "\n", "# truth = np.reshape(np.arange(l), (l, 1))", "\n", "truth", "=", "np", ".", "reshape", "(", "np", ".", "arange", "(", "l", ")", ",", "(", "l", ",", ")", ")", "\n", "np", ".", "testing", ".", "assert_array_almost_equal", "(", "out", ",", "truth", ",", "\n", "decimal", "=", "1", ",", "\n", "verbose", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.operations.enqueue_test.EnqueueTest.test_backward": [[69, 81], ["fhez.nn.operations.enqueue.Enqueue", "range", "enqueue_test.EnqueueTest.assertNotEqual", "numpy.reshape", "numpy.array", "numpy.testing.assert_array_almost_equal", "fhez.nn.operations.enqueue.Enqueue.forward", "numpy.arange", "list", "numpy.array", "fhez.nn.operations.enqueue.Enqueue.backward"], "methods", ["home.repos.pwc.inspect_result.DreamingRaven_python-reseal.loss.mse.MSE.forward", "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.loss.mse.MSE.backward"], ["", "def", "test_backward", "(", "self", ")", ":", "\n", "        ", "\"\"\"Check gradients are mapped properly.\"\"\"", "\n", "l", "=", "10", "\n", "q", "=", "Enqueue", "(", "length", "=", "l", ")", "\n", "for", "i", "in", "range", "(", "l", ")", ":", "\n", "            ", "out", "=", "q", ".", "forward", "(", "np", ".", "array", "(", "[", "i", "]", ")", ")", "\n", "", "self", ".", "assertNotEqual", "(", "out", ",", "None", ")", "\n", "gradients", "=", "np", ".", "reshape", "(", "np", ".", "arange", "(", "l", ")", ",", "(", "l", ",", "1", ")", ")", "\n", "local_grad", "=", "np", ".", "array", "(", "list", "(", "q", ".", "backward", "(", "gradient", "=", "gradients", ")", ")", ")", "\n", "np", ".", "testing", ".", "assert_array_almost_equal", "(", "local_grad", ",", "gradients", ",", "\n", "decimal", "=", "1", ",", "\n", "verbose", "=", "True", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.operations.one_hot_decode.OneHotDecode.schema": [[16, 22], ["marshmallow.Schema.from_dict"], "methods", ["None"], ["@", "property", "\n", "def", "schema", "(", "self", ")", ":", "\n", "        ", "\"\"\"Get marshmallow serialisation schema.\"\"\"", "\n", "schema_dict", "=", "{", "\n", "}", "\n", "return", "mar", ".", "Schema", ".", "from_dict", "(", "schema_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.operations.one_hot_decode.OneHotDecode.cost": [[23, 27], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "cost", "(", "self", ")", ":", "\n", "        ", "\"\"\"Get non-cost of this node.\"\"\"", "\n", "return", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.operations.one_hot_decode.OneHotDecode.forward": [[28, 33], ["one_hot_decode.OneHotDecode.inputs.append", "x.argmax"], "methods", ["home.repos.pwc.inspect_result.DreamingRaven_python-reseal.graph.dll.DLL.append"], ["", "def", "forward", "(", "self", ",", "x", ":", "np", ".", "ndarray", ")", ":", "\n", "        ", "\"\"\"Encode input to sparse matrix.\"\"\"", "\n", "self", ".", "inputs", ".", "append", "(", "x", ")", "\n", "clss", "=", "x", ".", "argmax", "(", ")", "\n", "return", "clss", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.operations.one_hot_decode.OneHotDecode.backward": [[34, 38], ["one_hot_decode.OneHotDecode.inputs.pop"], "methods", ["None"], ["", "def", "backward", "(", "self", ",", "gradient", ":", "np", ".", "ndarray", ")", ":", "\n", "        ", "\"\"\"Map only the gradient of the encoded backward.\"\"\"", "\n", "x", "=", "self", ".", "inputs", ".", "pop", "(", ")", "\n", "return", "x", "*", "gradient", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.operations.one_hot_decode.OneHotDecode.update": [[39, 42], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ")", ":", "\n", "        ", "\"\"\"Do nothing as nothing to update.\"\"\"", "\n", "return", "NotImplemented", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.operations.one_hot_decode.OneHotDecode.updates": [[43, 46], ["None"], "methods", ["None"], ["", "def", "updates", "(", "self", ")", ":", "\n", "        ", "\"\"\"Do nothing as nothing to update.\"\"\"", "\n", "return", "NotImplemented", "\n", "", "", ""]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.operations.rotate_test.RotateTest.data_shape": [[16, 20], ["None"], "methods", ["None"], ["@", "property", "\n", "def", "data_shape", "(", "self", ")", ":", "\n", "        ", "\"\"\"Define desired data shape.\"\"\"", "\n", "return", "(", "3", ",", "32", ",", "32", ",", "3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.operations.rotate_test.RotateTest.data": [[21, 26], ["numpy.random.rand"], "methods", ["None"], ["", "@", "property", "\n", "def", "data", "(", "self", ")", ":", "\n", "        ", "\"\"\"Get some generated data.\"\"\"", "\n", "array", "=", "np", ".", "random", ".", "rand", "(", "*", "self", ".", "data_shape", ")", "\n", "return", "array", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.operations.rotate_test.RotateTest.reseal_args": [[27, 38], ["pow"], "methods", ["None"], ["", "@", "property", "\n", "def", "reseal_args", "(", "self", ")", ":", "\n", "        ", "\"\"\"Get some reseal arguments for encryption.\"\"\"", "\n", "return", "{", "\n", "\"scheme\"", ":", "2", ",", "# seal.scheme_type.CKK,", "\n", "\"poly_modulus_degree\"", ":", "8192", "*", "2", ",", "# 438", "\n", "# \"coefficient_modulus\": [60, 40, 40, 60],", "\n", "\"coefficient_modulus\"", ":", "\n", "[", "45", ",", "30", ",", "30", ",", "30", ",", "30", ",", "30", ",", "30", ",", "30", ",", "30", ",", "30", ",", "30", ",", "45", "]", ",", "\n", "\"scale\"", ":", "pow", "(", "2.0", ",", "30", ")", ",", "\n", "\"cache\"", ":", "True", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.operations.rotate_test.RotateTest.setUp": [[40, 45], ["time.time"], "methods", ["None"], ["", "def", "setUp", "(", "self", ")", ":", "\n", "        ", "\"\"\"Start timer and init variables.\"\"\"", "\n", "self", ".", "weights", "=", "(", "1", ",", ")", "# if tuple allows cnn to initialise itself", "\n", "\n", "self", ".", "startTime", "=", "time", ".", "time", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.operations.rotate_test.RotateTest.tearDown": [[46, 50], ["print", "time.time", "rotate_test.RotateTest.id"], "methods", ["None"], ["", "def", "tearDown", "(", "self", ")", ":", "\n", "        ", "\"\"\"Calculate and print time delta.\"\"\"", "\n", "t", "=", "time", ".", "time", "(", ")", "-", "self", ".", "startTime", "\n", "print", "(", "'%s: %.3f'", "%", "(", "self", ".", "id", "(", ")", ",", "t", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.operations.rotate_test.RotateTest.test_forward": [[51, 64], ["fhez.nn.operations.rotate.Rotate", "fhez.nn.operations.rotate.Rotate.forward", "rotate_test.RotateTest.assertIsInstance", "numpy.array", "numpy.testing.assert_array_almost_equal"], "methods", ["home.repos.pwc.inspect_result.DreamingRaven_python-reseal.loss.mse.MSE.forward"], ["", "def", "test_forward", "(", "self", ")", ":", "\n", "        ", "\"\"\"Check encryption is successfull with given params.\"\"\"", "\n", "x", "=", "self", ".", "data", "\n", "node", "=", "Rotate", "(", "provider", "=", "ReArray", ",", "**", "self", ".", "reseal_args", ")", "\n", "cyphertext", "=", "node", ".", "forward", "(", "x", ")", "\n", "# check parameters are exactly as provided", "\n", "# check cyphertext is expected type", "\n", "self", ".", "assertIsInstance", "(", "cyphertext", ",", "ReArray", ")", "\n", "# decyrpt again manually", "\n", "plaintext", "=", "np", ".", "array", "(", "cyphertext", ")", "\n", "np", ".", "testing", ".", "assert_array_almost_equal", "(", "plaintext", ",", "x", ",", "\n", "decimal", "=", "4", ",", "\n", "verbose", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.operations.rotate_test.RotateTest.test_forward_plain": [[65, 74], ["fhez.nn.operations.rotate.Rotate", "fhez.nn.operations.rotate.Rotate.forward", "rotate_test.RotateTest.assertIsInstance", "numpy.testing.assert_array_almost_equal"], "methods", ["home.repos.pwc.inspect_result.DreamingRaven_python-reseal.loss.mse.MSE.forward"], ["", "def", "test_forward_plain", "(", "self", ")", ":", "\n", "        ", "\"\"\"Check lack of encryption without params.\"\"\"", "\n", "x", "=", "self", ".", "data", "\n", "node", "=", "Rotate", "(", ")", "\n", "plaintext", "=", "node", ".", "forward", "(", "x", ")", "\n", "self", ".", "assertIsInstance", "(", "plaintext", ",", "np", ".", "ndarray", ")", "\n", "np", ".", "testing", ".", "assert_array_almost_equal", "(", "plaintext", ",", "x", ",", "\n", "decimal", "=", "4", ",", "\n", "verbose", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.operations.rotate_test.RotateTest.test_forward_plain_sum": [[75, 84], ["fhez.nn.operations.rotate.Rotate", "fhez.nn.operations.rotate.Rotate.forward", "rotate_test.RotateTest.assertIsInstance", "numpy.testing.assert_array_almost_equal"], "methods", ["home.repos.pwc.inspect_result.DreamingRaven_python-reseal.loss.mse.MSE.forward"], ["", "def", "test_forward_plain_sum", "(", "self", ")", ":", "\n", "        ", "\"\"\"Check rotation sums desired axis.\"\"\"", "\n", "x", "=", "self", ".", "data", "\n", "node", "=", "Rotate", "(", "sum_axis", "=", "1", ")", "\n", "plaintext", "=", "node", ".", "forward", "(", "x", ")", "\n", "self", ".", "assertIsInstance", "(", "plaintext", ",", "np", ".", "ndarray", ")", "\n", "np", ".", "testing", ".", "assert_array_almost_equal", "(", "plaintext", ",", "x", ",", "\n", "decimal", "=", "4", ",", "\n", "verbose", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.operations.rotate_test.RotateTest.test_forward_decrypt": [[85, 95], ["fhez.rearray.ReArray", "fhez.nn.operations.rotate.Rotate", "fhez.nn.operations.rotate.Rotate.forward", "rotate_test.RotateTest.assertIsInstance", "numpy.testing.assert_array_almost_equal"], "methods", ["home.repos.pwc.inspect_result.DreamingRaven_python-reseal.loss.mse.MSE.forward"], ["", "def", "test_forward_decrypt", "(", "self", ")", ":", "\n", "        ", "\"\"\"Decrypt forward pass without re-encryption.\"\"\"", "\n", "x", "=", "self", ".", "data", "\n", "cypher", "=", "ReArray", "(", "x", ",", "self", ".", "reseal_args", ")", "\n", "node", "=", "Rotate", "(", ")", "\n", "plaintext", "=", "node", ".", "forward", "(", "cypher", ")", "\n", "self", ".", "assertIsInstance", "(", "plaintext", ",", "np", ".", "ndarray", ")", "\n", "np", ".", "testing", ".", "assert_array_almost_equal", "(", "plaintext", ",", "x", ",", "\n", "decimal", "=", "4", ",", "\n", "verbose", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.operations.rotate_test.RotateTest.test_forward_with_encryptor": [[96, 107], ["fhez.rearray.ReArray", "fhez.nn.operations.rotate.Rotate", "fhez.nn.operations.rotate.Rotate.forward", "rotate_test.RotateTest.assertIsInstance", "numpy.array", "numpy.testing.assert_array_almost_equal", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.DreamingRaven_python-reseal.loss.mse.MSE.forward"], ["", "def", "test_forward_with_encryptor", "(", "self", ")", ":", "\n", "        ", "\"\"\"Check cyphertext is generated from encryptor properly.\"\"\"", "\n", "plaintext", "=", "self", ".", "data", "\n", "encryptor", "=", "ReArray", "(", "np", ".", "array", "(", "[", "1", "]", ")", ",", "**", "self", ".", "reseal_args", ")", "\n", "node", "=", "Rotate", "(", "encryptor", "=", "encryptor", ")", "\n", "cyphertext", "=", "node", ".", "forward", "(", "plaintext", ")", "\n", "self", ".", "assertIsInstance", "(", "cyphertext", ",", "ReArray", ")", "\n", "x", "=", "np", ".", "array", "(", "cyphertext", ")", "\n", "np", ".", "testing", ".", "assert_array_almost_equal", "(", "x", ",", "plaintext", ",", "\n", "decimal", "=", "4", ",", "\n", "verbose", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.operations.rotate_test.RotateTest.test_forward_rotation": [[108, 127], ["fhez.rearray.ReArray", "fhez.nn.operations.rotate.Rotate", "fhez.rearray.ReArray", "fhez.nn.operations.rotate.Rotate.forward", "rotate_test.RotateTest.assertIsInstance", "rotate_test.RotateTest.assertNotEqual", "numpy.array", "pow"], "methods", ["home.repos.pwc.inspect_result.DreamingRaven_python-reseal.loss.mse.MSE.forward"], ["", "def", "test_forward_rotation", "(", "self", ")", ":", "\n", "        ", "\"\"\"Check that encryption parameters have been changed, on axis.\"\"\"", "\n", "x", "=", "self", ".", "data", "\n", "encryptor", "=", "ReArray", "(", "np", ".", "array", "(", "[", "1", "]", ")", ",", "{", "\n", "\"scheme\"", ":", "2", ",", "# seal.scheme_type.CKK,", "\n", "\"poly_modulus_degree\"", ":", "8192", "*", "2", ",", "# 438", "\n", "# \"coefficient_modulus\": [60, 40, 40, 60],", "\n", "\"coefficient_modulus\"", ":", "\n", "[", "45", ",", "30", ",", "30", ",", "30", ",", "30", ",", "45", "]", ",", "# coefficient mod length of 6", "\n", "\"scale\"", ":", "pow", "(", "2.0", ",", "30", ")", ",", "\n", "\"cache\"", ":", "True", ",", "\n", "}", ")", "\n", "node", "=", "Rotate", "(", "encryptor", "=", "encryptor", ")", "\n", "cyphertext_in", "=", "ReArray", "(", "x", ",", "**", "self", ".", "reseal_args", ")", "\n", "cyphertext_out", "=", "node", ".", "forward", "(", "cyphertext_in", ")", "\n", "self", ".", "assertIsInstance", "(", "cyphertext_out", ",", "ReArray", ")", "\n", "out_cm", "=", "cyphertext_out", ".", "cyphertext", "[", "0", "]", ".", "coefficient_modulus", "\n", "in_cm", "=", "cyphertext_in", ".", "cyphertext", "[", "0", "]", ".", "coefficient_modulus", "\n", "self", ".", "assertNotEqual", "(", "in_cm", ",", "out_cm", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.operations.rotate_test.RotateTest.test_forward_encrypt_axis": [[128, 148], ["fhez.rearray.ReArray", "fhez.nn.operations.rotate.Rotate", "fhez.rearray.ReArray", "fhez.nn.operations.rotate.Rotate.forward", "rotate_test.RotateTest.assertIsInstance", "rotate_test.RotateTest.assertIsInstance", "numpy.testing.assert_array_almost_equal", "numpy.array", "pow"], "methods", ["home.repos.pwc.inspect_result.DreamingRaven_python-reseal.loss.mse.MSE.forward"], ["", "def", "test_forward_encrypt_axis", "(", "self", ")", ":", "\n", "        ", "x", "=", "self", ".", "data", "\n", "axis", "=", "1", "\n", "encryptor", "=", "ReArray", "(", "np", ".", "array", "(", "[", "1", "]", ")", ",", "{", "\n", "\"scheme\"", ":", "2", ",", "# seal.scheme_type.CKK,", "\n", "\"poly_modulus_degree\"", ":", "8192", "*", "2", ",", "# 438", "\n", "# \"coefficient_modulus\": [60, 40, 40, 60],", "\n", "\"coefficient_modulus\"", ":", "\n", "[", "45", ",", "30", ",", "30", ",", "30", ",", "30", ",", "45", "]", ",", "# coefficient mod length of 6", "\n", "\"scale\"", ":", "pow", "(", "2.0", ",", "30", ")", ",", "\n", "\"cache\"", ":", "True", ",", "\n", "}", ")", "\n", "node", "=", "Rotate", "(", "encryptor", "=", "encryptor", ",", "axis", "=", "1", ")", "\n", "cyphertext_in", "=", "ReArray", "(", "x", ",", "**", "self", ".", "reseal_args", ")", "\n", "cyphertext_lst_out", "=", "node", ".", "forward", "(", "cyphertext_in", ")", "\n", "self", ".", "assertIsInstance", "(", "cyphertext_lst_out", ",", "list", ")", "\n", "self", ".", "assertIsInstance", "(", "cyphertext_lst_out", "[", "0", "]", ",", "ReArray", ")", "\n", "np", ".", "testing", ".", "assert_array_almost_equal", "(", "cyphertext_lst_out", ",", "cyphertext_in", ",", "\n", "decimal", "=", "4", ",", "\n", "verbose", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.operations.rotate_test.RotateTest.test_backward": [[149, 158], ["fhez.nn.operations.rotate.Rotate", "numpy.array", "fhez.nn.operations.rotate.Rotate.backward", "numpy.testing.assert_array_almost_equal"], "methods", ["home.repos.pwc.inspect_result.DreamingRaven_python-reseal.loss.mse.MSE.backward"], ["", "def", "test_backward", "(", "self", ")", ":", "\n", "        ", "\"\"\"Check gradients are mapped.\"\"\"", "\n", "node", "=", "Rotate", "(", ")", "\n", "grad", "=", "np", ".", "array", "(", "[", "1", ",", "2", ",", "3", "]", ")", "\n", "local_grad", "=", "node", ".", "backward", "(", "grad", ")", "\n", "# gradient input should be the same as gradient output as mapped", "\n", "np", ".", "testing", ".", "assert_array_almost_equal", "(", "local_grad", ",", "grad", ",", "\n", "decimal", "=", "1", ",", "\n", "verbose", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.operations.rotate_test.RotateTest.test_flatten": [[159, 167], ["fhez.nn.operations.rotate.Rotate", "numpy.ones", "fhez.nn.operations.rotate.Rotate.forward", "numpy.testing.assert_array_almost_equal", "numpy.ones.flatten"], "methods", ["home.repos.pwc.inspect_result.DreamingRaven_python-reseal.loss.mse.MSE.forward", "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.operations.rotate.Rotate.flatten"], ["", "def", "test_flatten", "(", "self", ")", ":", "\n", "        ", "\"\"\"Check that flattening occurs as expected.\"\"\"", "\n", "node", "=", "Rotate", "(", "flatten", "=", "True", ")", "\n", "x", "=", "np", ".", "ones", "(", "(", "28", ",", "28", ")", ")", "\n", "flattened", "=", "node", ".", "forward", "(", "x", ")", "\n", "np", ".", "testing", ".", "assert_array_almost_equal", "(", "flattened", ",", "x", ".", "flatten", "(", ")", ",", "\n", "decimal", "=", "4", ",", "\n", "verbose", "=", "True", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.operations.decrypt_test.DecryptTest.data_shape": [[16, 20], ["None"], "methods", ["None"], ["@", "property", "\n", "def", "data_shape", "(", "self", ")", ":", "\n", "        ", "\"\"\"Define desired data shape.\"\"\"", "\n", "return", "(", "3", ",", "32", ",", "32", ",", "3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.operations.decrypt_test.DecryptTest.data": [[21, 26], ["numpy.random.rand"], "methods", ["None"], ["", "@", "property", "\n", "def", "data", "(", "self", ")", ":", "\n", "        ", "\"\"\"Get some generated data.\"\"\"", "\n", "array", "=", "np", ".", "random", ".", "rand", "(", "*", "self", ".", "data_shape", ")", "\n", "return", "array", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.operations.decrypt_test.DecryptTest.reseal_args": [[27, 38], ["pow"], "methods", ["None"], ["", "@", "property", "\n", "def", "reseal_args", "(", "self", ")", ":", "\n", "        ", "\"\"\"Get some reseal arguments for encryption.\"\"\"", "\n", "return", "{", "\n", "\"scheme\"", ":", "2", ",", "# seal.scheme_type.CKK,", "\n", "\"poly_modulus_degree\"", ":", "8192", "*", "2", ",", "# 438", "\n", "# \"coefficient_modulus\": [60, 40, 40, 60],", "\n", "\"coefficient_modulus\"", ":", "\n", "[", "45", ",", "30", ",", "30", ",", "30", ",", "30", ",", "30", ",", "30", ",", "30", ",", "30", ",", "30", ",", "30", ",", "45", "]", ",", "\n", "\"scale\"", ":", "pow", "(", "2.0", ",", "30", ")", ",", "\n", "\"cache\"", ":", "True", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.operations.decrypt_test.DecryptTest.setUp": [[40, 45], ["time.time"], "methods", ["None"], ["", "def", "setUp", "(", "self", ")", ":", "\n", "        ", "\"\"\"Start timer and init variables.\"\"\"", "\n", "self", ".", "weights", "=", "(", "1", ",", ")", "# if tuple allows cnn to initialise itself", "\n", "\n", "self", ".", "startTime", "=", "time", ".", "time", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.operations.decrypt_test.DecryptTest.tearDown": [[46, 50], ["print", "time.time", "decrypt_test.DecryptTest.id"], "methods", ["None"], ["", "def", "tearDown", "(", "self", ")", ":", "\n", "        ", "\"\"\"Calculate and print time delta.\"\"\"", "\n", "t", "=", "time", ".", "time", "(", ")", "-", "self", ".", "startTime", "\n", "print", "(", "'%s: %.3f'", "%", "(", "self", ".", "id", "(", ")", ",", "t", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.operations.decrypt_test.DecryptTest.test_forward": [[51, 59], ["fhez.rearray.ReArray", "fhez.nn.operations.decrypt.Decrypt", "fhez.nn.operations.decrypt.Decrypt.forward", "numpy.testing.assert_array_almost_equal"], "methods", ["home.repos.pwc.inspect_result.DreamingRaven_python-reseal.loss.mse.MSE.forward"], ["", "def", "test_forward", "(", "self", ")", ":", "\n", "        ", "x", "=", "self", ".", "data", "\n", "cyphertext", "=", "ReArray", "(", "x", ",", "**", "self", ".", "reseal_args", ")", "\n", "node", "=", "Decrypt", "(", ")", "\n", "plaintext", "=", "node", ".", "forward", "(", "cyphertext", ")", "\n", "np", ".", "testing", ".", "assert_array_almost_equal", "(", "plaintext", ",", "x", ",", "\n", "decimal", "=", "4", ",", "\n", "verbose", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.operations.decrypt_test.DecryptTest.test_backward": [[60, 69], ["fhez.nn.operations.decrypt.Decrypt", "numpy.array", "fhez.nn.operations.decrypt.Decrypt.backward", "numpy.testing.assert_array_almost_equal"], "methods", ["home.repos.pwc.inspect_result.DreamingRaven_python-reseal.loss.mse.MSE.backward"], ["", "def", "test_backward", "(", "self", ")", ":", "\n", "        ", "\"\"\"Check gradients are mapped.\"\"\"", "\n", "node", "=", "Decrypt", "(", ")", "\n", "grad", "=", "np", ".", "array", "(", "[", "1", ",", "2", ",", "3", "]", ")", "\n", "local_grad", "=", "node", ".", "backward", "(", "grad", ")", "\n", "# gradient input should be the same as gradient output as mapped", "\n", "np", ".", "testing", ".", "assert_array_almost_equal", "(", "local_grad", ",", "grad", ",", "\n", "decimal", "=", "1", ",", "\n", "verbose", "=", "True", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.operations.dequeue_test.DequeueTest.data_shape": [[16, 20], ["None"], "methods", ["None"], ["@", "property", "\n", "def", "data_shape", "(", "self", ")", ":", "\n", "        ", "\"\"\"Define desired data shape.\"\"\"", "\n", "return", "(", "3", ",", "32", ",", "32", ",", "3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.operations.dequeue_test.DequeueTest.data": [[21, 26], ["numpy.random.rand"], "methods", ["None"], ["", "@", "property", "\n", "def", "data", "(", "self", ")", ":", "\n", "        ", "\"\"\"Get some generated data.\"\"\"", "\n", "array", "=", "np", ".", "random", ".", "rand", "(", "*", "self", ".", "data_shape", ")", "\n", "return", "array", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.operations.dequeue_test.DequeueTest.reseal_args": [[27, 38], ["pow"], "methods", ["None"], ["", "@", "property", "\n", "def", "reseal_args", "(", "self", ")", ":", "\n", "        ", "\"\"\"Get some reseal arguments for encryption.\"\"\"", "\n", "return", "{", "\n", "\"scheme\"", ":", "2", ",", "# seal.scheme_type.CKK,", "\n", "\"poly_modulus_degree\"", ":", "8192", "*", "2", ",", "# 438", "\n", "# \"coefficient_modulus\": [60, 40, 40, 60],", "\n", "\"coefficient_modulus\"", ":", "\n", "[", "45", ",", "30", ",", "30", ",", "30", ",", "30", ",", "30", ",", "30", ",", "30", ",", "30", ",", "30", ",", "30", ",", "45", "]", ",", "\n", "\"scale\"", ":", "pow", "(", "2.0", ",", "30", ")", ",", "\n", "\"cache\"", ":", "True", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.operations.dequeue_test.DequeueTest.setUp": [[40, 45], ["time.time"], "methods", ["None"], ["", "def", "setUp", "(", "self", ")", ":", "\n", "        ", "\"\"\"Start timer and init variables.\"\"\"", "\n", "self", ".", "weights", "=", "(", "1", ",", ")", "# if tuple allows cnn to initialise itself", "\n", "\n", "self", ".", "startTime", "=", "time", ".", "time", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.operations.dequeue_test.DequeueTest.tearDown": [[46, 50], ["print", "time.time", "dequeue_test.DequeueTest.id"], "methods", ["None"], ["", "def", "tearDown", "(", "self", ")", ":", "\n", "        ", "\"\"\"Calculate and print time delta.\"\"\"", "\n", "t", "=", "time", ".", "time", "(", ")", "-", "self", ".", "startTime", "\n", "print", "(", "'%s: %.3f'", "%", "(", "self", ".", "id", "(", ")", ",", "t", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.operations.dequeue_test.DequeueTest.test_init": [[51, 54], ["fhez.nn.operations.dequeue.Dequeue"], "methods", ["None"], ["", "def", "test_init", "(", "self", ")", ":", "\n", "        ", "\"\"\"Test enque initialisation.\"\"\"", "\n", "Dequeue", "(", "length", "=", "10", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.operations.dequeue_test.DequeueTest.test_backward": [[55, 66], ["fhez.nn.operations.dequeue.Dequeue", "range", "dequeue_test.DequeueTest.assertNotEqual", "numpy.reshape", "numpy.testing.assert_array_almost_equal", "fhez.nn.operations.dequeue.Dequeue.backward", "numpy.arange", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.DreamingRaven_python-reseal.loss.mse.MSE.backward"], ["", "def", "test_backward", "(", "self", ")", ":", "\n", "        ", "\"\"\"Check dequeue, queueing properly.\"\"\"", "\n", "l", "=", "10", "\n", "q", "=", "Dequeue", "(", "length", "=", "l", ")", "\n", "for", "i", "in", "range", "(", "l", ")", ":", "\n", "            ", "out", "=", "q", ".", "backward", "(", "np", ".", "array", "(", "[", "i", "]", ")", ")", "\n", "", "self", ".", "assertNotEqual", "(", "out", ",", "None", ")", "\n", "truth", "=", "np", ".", "reshape", "(", "np", ".", "arange", "(", "l", ")", ",", "(", "l", ",", "1", ")", ")", "\n", "np", ".", "testing", ".", "assert_array_almost_equal", "(", "out", ",", "truth", ",", "\n", "decimal", "=", "1", ",", "\n", "verbose", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.operations.dequeue_test.DequeueTest.test_forward": [[67, 83], ["fhez.nn.operations.dequeue.Dequeue", "numpy.reshape", "numpy.array", "numpy.testing.assert_array_almost_equal", "fhez.nn.operations.dequeue.Dequeue.forward", "numpy.arange", "list", "numpy.testing.assert_array_almost_equal", "fhez.nn.operations.dequeue.Dequeue.forward"], "methods", ["home.repos.pwc.inspect_result.DreamingRaven_python-reseal.loss.mse.MSE.forward", "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.loss.mse.MSE.forward"], ["", "def", "test_forward", "(", "self", ")", ":", "\n", "        ", "\"\"\"Check gradients are mapped properly.\"\"\"", "\n", "l", "=", "10", "\n", "q", "=", "Dequeue", "(", "length", "=", "l", ")", "\n", "x", "=", "np", ".", "reshape", "(", "np", ".", "arange", "(", "l", ")", ",", "(", "l", ",", "1", ")", ")", "\n", "dequeued", "=", "np", ".", "array", "(", "list", "(", "q", ".", "forward", "(", "x", ")", ")", ")", "\n", "np", ".", "testing", ".", "assert_array_almost_equal", "(", "dequeued", ",", "x", ",", "\n", "decimal", "=", "1", ",", "\n", "verbose", "=", "True", ")", "\n", "# now checking yield of forward as iterator", "\n", "i", "=", "0", "\n", "for", "deq", "in", "q", ".", "forward", "(", "x", ")", ":", "\n", "            ", "np", ".", "testing", ".", "assert_array_almost_equal", "(", "deq", ",", "x", "[", "i", "]", ",", "\n", "decimal", "=", "1", ",", "\n", "verbose", "=", "True", ")", "\n", "i", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.operations.topsum.TopSum.cost": [[18, 22], ["None"], "methods", ["None"], ["@", "property", "\n", "def", "cost", "(", "self", ")", ":", "\n", "        ", "\"\"\"Get computational cost of this node.\"\"\"", "\n", "return", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.operations.topsum.TopSum.forward": [[23, 27], ["topsum.TopSum.inputs.append", "numpy.sum", "len"], "methods", ["home.repos.pwc.inspect_result.DreamingRaven_python-reseal.graph.dll.DLL.append", "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.rearray.ReArray.sum"], ["", "def", "forward", "(", "self", ",", "x", ":", "np", ".", "ndarray", ")", ":", "\n", "        ", "\"\"\"Sum inputs together assuming first dim is inputs.\"\"\"", "\n", "self", ".", "inputs", ".", "append", "(", "len", "(", "x", ")", ")", "\n", "return", "np", ".", "sum", "(", "x", ",", "axis", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.operations.topsum.TopSum.backward": [[28, 34], ["topsum.TopSum.inputs.pop", "numpy.array", "numpy.broadcast_to"], "methods", ["None"], ["", "def", "backward", "(", "self", ",", "gradient", ":", "np", ".", "ndarray", ")", ":", "\n", "        ", "\"\"\"Distribute gradient to inputs.\"\"\"", "\n", "length", "=", "self", ".", "inputs", ".", "pop", "(", ")", "\n", "grad", "=", "np", ".", "array", "(", "gradient", ")", "\n", "distributed", "=", "np", ".", "broadcast_to", "(", "grad", ",", "(", "length", ",", ")", "+", "grad", ".", "shape", ")", "\n", "return", "distributed", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.operations.topsum.TopSum.update": [[35, 38], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ")", ":", "\n", "        ", "\"\"\"Do nothing since sum is not parameterisable.\"\"\"", "\n", "return", "NotImplemented", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.operations.topsum.TopSum.updates": [[39, 42], ["None"], "methods", ["None"], ["", "def", "updates", "(", "self", ")", ":", "\n", "        ", "\"\"\"Do nothing since sum is not parameterisable.\"\"\"", "\n", "return", "NotImplemented", "\n", "", "", ""]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.operations.dequeue.Dequeue.__init__": [[21, 25], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "length", "=", "None", ")", ":", "\n", "        ", "\"\"\"Configure dequeue initialised state.\"\"\"", "\n", "if", "length", "is", "not", "None", ":", "\n", "            ", "self", ".", "length", "=", "length", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.operations.dequeue.Dequeue.length": [[36, 40], ["None"], "methods", ["None"], ["", "", "@", "length", ".", "setter", "\n", "def", "length", "(", "self", ",", "length", ":", "int", ")", ":", "\n", "        ", "\"\"\"Set the desired/ target length of the queue.\"\"\"", "\n", "self", ".", "_desired_length", "=", "length", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.operations.dequeue.Dequeue.queue": [[48, 51], ["None"], "methods", ["None"], ["", "@", "queue", ".", "setter", "\n", "def", "queue", "(", "self", ",", "queue", ")", ":", "\n", "        ", "self", ".", "_queue", "=", "queue", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.operations.dequeue.Dequeue.cost": [[52, 56], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "cost", "(", "self", ")", ":", "\n", "        ", "\"\"\"Get **0** cost for dequeueing arrays.\"\"\"", "\n", "return", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.operations.dequeue.Dequeue.forward": [[57, 76], ["collections.deque", "range", "len", "collections.deque.popleft"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"Distribute input to respective outputs in order via yield.\n\n        Effectiveley backward is a dequeue but for gradients.\n\n        .. warning::\n\n            This **YIELDS** gradients unlike most nodes, requiring special\n            logic by a network traverser, only getting one input but\n            results in many outputs.\n        \"\"\"", "\n", "# assert self.length is not None, \"Missing length of dequeue\"", "\n", "# assert len(x) == self.length", "\n", "queue", "=", "deque", "(", "x", ")", "\n", "# I dont want to traverse queue as iterator so will use slightly faster", "\n", "# length of queue instead so we can rely on queues heavy internal", "\n", "# optimisation.", "\n", "for", "_", "in", "range", "(", "len", "(", "queue", ")", ")", ":", "\n", "            ", "yield", "queue", ".", "popleft", "(", ")", "# yield dequeued gradient FIFO", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.operations.dequeue.Dequeue.backward": [[77, 80], ["numpy.sum"], "methods", ["home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.rearray.ReArray.sum"], ["", "", "def", "backward", "(", "self", ",", "gradient", ":", "np", ".", "ndarray", ")", ":", "\n", "        ", "\"\"\"Accumulate inputs into a single queue, then return when full.\"\"\"", "\n", "return", "np", ".", "sum", "(", "gradient", ",", "axis", "=", "0", ")", "# we know gradients must add", "\n", "# this could theoretically cause problems if there is only one output", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.operations.dequeue.Dequeue.update": [[85, 88], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ")", ":", "\n", "        ", "\"\"\"Update nothing as dequeueing is not parameterisable.\"\"\"", "\n", "return", "NotImplemented", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.operations.dequeue.Dequeue.updates": [[89, 92], ["None"], "methods", ["None"], ["", "def", "updates", "(", "self", ")", ":", "\n", "        ", "\"\"\"Update nothing as dequeueing is not parameterisable.\"\"\"", "\n", "return", "NotImplemented", "\n", "", "", ""]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.operations.one_hot_encode.OneHotEncode.__init__": [[16, 19], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "length", "=", "None", ")", ":", "\n", "        ", "\"\"\"Configure the encoder initially.\"\"\"", "\n", "self", ".", "length", "=", "length", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.operations.one_hot_encode.OneHotEncode.schema": [[20, 27], ["marshmallow.Schema.from_dict", "marshmallow.fields.Int"], "methods", ["None"], ["", "@", "property", "\n", "def", "schema", "(", "self", ")", ":", "\n", "        ", "\"\"\"Get marshmallow serialisation schema.\"\"\"", "\n", "schema_dict", "=", "{", "\n", "\"_length\"", ":", "mar", ".", "fields", ".", "Int", "(", ")", ",", "\n", "}", "\n", "return", "mar", ".", "Schema", ".", "from_dict", "(", "schema_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.operations.one_hot_encode.OneHotEncode.length": [[33, 36], ["None"], "methods", ["None"], ["", "@", "length", ".", "setter", "\n", "def", "length", "(", "self", ",", "length", ")", ":", "\n", "        ", "self", ".", "_length", "=", "length", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.operations.one_hot_encode.OneHotEncode.cost": [[37, 41], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "cost", "(", "self", ")", ":", "\n", "        ", "\"\"\"Get non-cost of this node.\"\"\"", "\n", "return", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.operations.one_hot_encode.OneHotEncode.forward": [[42, 52], ["isinstance", "one_hot_encode.OneHotEncode.inputs.append", "numpy.array.reshape", "numpy.array", "numpy.eye"], "methods", ["home.repos.pwc.inspect_result.DreamingRaven_python-reseal.graph.dll.DLL.append"], ["", "def", "forward", "(", "self", ",", "x", ":", "np", ".", "ndarray", ")", ":", "\n", "        ", "\"\"\"Encode input to sparse matrix.\"\"\"", "\n", "if", "isinstance", "(", "x", ",", "int", ")", ":", "\n", "            ", "x", "=", "np", ".", "array", "(", "x", ")", "\n", "", "self", ".", "inputs", ".", "append", "(", "x", ")", "\n", "targets", "=", "x", ".", "reshape", "(", "-", "1", ")", "\n", "one_hot", "=", "np", ".", "eye", "(", "self", ".", "length", ")", "[", "targets", "]", "\n", "# while this does work for multidims this is the forward func", "\n", "# which should only output for one dim so selecting 0th", "\n", "return", "one_hot", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.operations.one_hot_encode.OneHotEncode.backward": [[53, 57], ["one_hot_encode.OneHotEncode.inputs.pop"], "methods", ["None"], ["", "def", "backward", "(", "self", ",", "gradient", ":", "np", ".", "ndarray", ")", ":", "\n", "        ", "\"\"\"Map only the gradient of the encoded backward.\"\"\"", "\n", "x", "=", "self", ".", "inputs", ".", "pop", "(", ")", "\n", "return", "gradient", "[", "x", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.operations.one_hot_encode.OneHotEncode.update": [[58, 61], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ")", ":", "\n", "        ", "\"\"\"Do nothing as nothing to update.\"\"\"", "\n", "return", "NotImplemented", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.operations.one_hot_encode.OneHotEncode.updates": [[62, 65], ["None"], "methods", ["None"], ["", "def", "updates", "(", "self", ")", ":", "\n", "        ", "\"\"\"Do nothing as nothing to update.\"\"\"", "\n", "return", "NotImplemented", "\n", "", "", ""]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.operations.encrypt_test.EncryptTest.data_shape": [[16, 20], ["None"], "methods", ["None"], ["@", "property", "\n", "def", "data_shape", "(", "self", ")", ":", "\n", "        ", "\"\"\"Define desired data shape.\"\"\"", "\n", "return", "(", "3", ",", "32", ",", "32", ",", "3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.operations.encrypt_test.EncryptTest.data": [[21, 26], ["numpy.random.rand"], "methods", ["None"], ["", "@", "property", "\n", "def", "data", "(", "self", ")", ":", "\n", "        ", "\"\"\"Get some generated data.\"\"\"", "\n", "array", "=", "np", ".", "random", ".", "rand", "(", "*", "self", ".", "data_shape", ")", "\n", "return", "array", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.operations.encrypt_test.EncryptTest.reseal_args": [[27, 38], ["pow"], "methods", ["None"], ["", "@", "property", "\n", "def", "reseal_args", "(", "self", ")", ":", "\n", "        ", "\"\"\"Get some reseal arguments for encryption.\"\"\"", "\n", "return", "{", "\n", "\"scheme\"", ":", "2", ",", "# seal.scheme_type.CKK,", "\n", "\"poly_modulus_degree\"", ":", "8192", "*", "2", ",", "# 438", "\n", "# \"coefficient_modulus\": [60, 40, 40, 60],", "\n", "\"coefficient_modulus\"", ":", "\n", "[", "45", ",", "30", ",", "30", ",", "30", ",", "30", ",", "30", ",", "30", ",", "30", ",", "30", ",", "30", ",", "30", ",", "45", "]", ",", "\n", "\"scale\"", ":", "pow", "(", "2.0", ",", "30", ")", ",", "\n", "\"cache\"", ":", "True", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.operations.encrypt_test.EncryptTest.setUp": [[40, 45], ["time.time"], "methods", ["None"], ["", "def", "setUp", "(", "self", ")", ":", "\n", "        ", "\"\"\"Start timer and init variables.\"\"\"", "\n", "self", ".", "weights", "=", "(", "1", ",", ")", "# if tuple allows cnn to initialise itself", "\n", "\n", "self", ".", "startTime", "=", "time", ".", "time", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.operations.encrypt_test.EncryptTest.tearDown": [[46, 50], ["print", "time.time", "encrypt_test.EncryptTest.id"], "methods", ["None"], ["", "def", "tearDown", "(", "self", ")", ":", "\n", "        ", "\"\"\"Calculate and print time delta.\"\"\"", "\n", "t", "=", "time", ".", "time", "(", ")", "-", "self", ".", "startTime", "\n", "print", "(", "'%s: %.3f'", "%", "(", "self", ".", "id", "(", ")", ",", "t", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.operations.encrypt_test.EncryptTest.test_forward": [[51, 64], ["fhez.nn.operations.encrypt.Encrypt", "fhez.nn.operations.encrypt.Encrypt.forward", "encrypt_test.EncryptTest.assertIsInstance", "numpy.array", "numpy.testing.assert_array_almost_equal"], "methods", ["home.repos.pwc.inspect_result.DreamingRaven_python-reseal.loss.mse.MSE.forward"], ["", "def", "test_forward", "(", "self", ")", ":", "\n", "        ", "\"\"\"Check encryption is successfull with given params.\"\"\"", "\n", "x", "=", "self", ".", "data", "\n", "node", "=", "Encrypt", "(", "provider", "=", "ReArray", ",", "**", "self", ".", "reseal_args", ")", "\n", "cyphertext", "=", "node", ".", "forward", "(", "x", ")", "\n", "# check parameters are exactly as provided", "\n", "# check cyphertext is expected type", "\n", "self", ".", "assertIsInstance", "(", "cyphertext", ",", "ReArray", ")", "\n", "# decyrpt again manually", "\n", "plaintext", "=", "np", ".", "array", "(", "cyphertext", ")", "\n", "np", ".", "testing", ".", "assert_array_almost_equal", "(", "plaintext", ",", "x", ",", "\n", "decimal", "=", "4", ",", "\n", "verbose", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.operations.encrypt_test.EncryptTest.test_forward_plain": [[65, 74], ["fhez.nn.operations.encrypt.Encrypt", "fhez.nn.operations.encrypt.Encrypt.forward", "encrypt_test.EncryptTest.assertIsInstance", "numpy.testing.assert_array_almost_equal"], "methods", ["home.repos.pwc.inspect_result.DreamingRaven_python-reseal.loss.mse.MSE.forward"], ["", "def", "test_forward_plain", "(", "self", ")", ":", "\n", "        ", "\"\"\"Check lack of encryption without params.\"\"\"", "\n", "x", "=", "self", ".", "data", "\n", "node", "=", "Encrypt", "(", ")", "\n", "plaintext", "=", "node", ".", "forward", "(", "x", ")", "\n", "self", ".", "assertIsInstance", "(", "plaintext", ",", "np", ".", "ndarray", ")", "\n", "np", ".", "testing", ".", "assert_array_almost_equal", "(", "plaintext", ",", "x", ",", "\n", "decimal", "=", "4", ",", "\n", "verbose", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.operations.encrypt_test.EncryptTest.test_backward": [[75, 84], ["fhez.nn.operations.encrypt.Encrypt", "numpy.array", "fhez.nn.operations.encrypt.Encrypt.backward", "numpy.testing.assert_array_almost_equal"], "methods", ["home.repos.pwc.inspect_result.DreamingRaven_python-reseal.loss.mse.MSE.backward"], ["", "def", "test_backward", "(", "self", ")", ":", "\n", "        ", "\"\"\"Check gradients are mapped.\"\"\"", "\n", "node", "=", "Encrypt", "(", ")", "\n", "grad", "=", "np", ".", "array", "(", "[", "1", ",", "2", ",", "3", "]", ")", "\n", "local_grad", "=", "node", ".", "backward", "(", "grad", ")", "\n", "# gradient input should be the same as gradient output as mapped", "\n", "np", ".", "testing", ".", "assert_array_almost_equal", "(", "local_grad", ",", "grad", ",", "\n", "decimal", "=", "1", ",", "\n", "verbose", "=", "True", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.operations.rotate.Rotate.__init__": [[15, 42], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "axis", "=", "None", ",", "encryptor", "=", "None", ",", "provider", "=", "None", ",", "sum_axis", "=", "None", ",", "\n", "flatten", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Configure provider and encryption parameters.\n\n        Given a provider like FHEz-ReSeal, and an arbitrary number of keyword\n        arguments. Setup encryptor to be (re-)used for continued encryption.\n        This will simply rotate the keys to new fresh keys, based on an axis\n        given.\n        E.G it will decrypt, then re-encrypt the given axis, and return a\n        structured list of the prior axies.\n        \"\"\"", "\n", "# provider is a source of a callable encryptor object", "\n", "if", "provider", "is", "not", "None", ":", "\n", "            ", "self", ".", "provider", "=", "provider", "\n", "# encryptor is a callable object to encrypt input data", "\n", "", "if", "encryptor", "is", "not", "None", ":", "\n", "            ", "self", ".", "encryptor", "=", "encryptor", "\n", "# sum axis will summarise data while decrypting or re-encrypting", "\n", "", "if", "sum_axis", "is", "not", "None", ":", "\n", "            ", "self", ".", "sum_axis", "=", "sum_axis", "\n", "# flatten intermediary to one dimension for individual encryption", "\n", "", "if", "flatten", "is", "not", "None", ":", "\n", "            ", "self", ".", "flatten", "=", "flatten", "\n", "# parameters are for the privider if any to override defaults", "\n", "", "self", ".", "parameters", "=", "kwargs", "\n", "# axis is which axis will be re-encrypted if any", "\n", "self", ".", "axis", "=", "axis", "if", "axis", "is", "not", "None", "else", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.operations.rotate.Rotate.flatten": [[48, 52], ["None"], "methods", ["None"], ["", "@", "flatten", ".", "setter", "\n", "def", "flatten", "(", "self", ",", "flatten", ")", ":", "\n", "        ", "\"\"\"Set if intermediary should be flattened to 1D.\"\"\"", "\n", "self", ".", "_flatten", "=", "flatten", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.operations.rotate.Rotate.sum_axis": [[58, 62], ["None"], "methods", ["None"], ["", "@", "sum_axis", ".", "setter", "\n", "def", "sum_axis", "(", "self", ",", "axis", ")", ":", "\n", "        ", "\"\"\"Set the axis to be summed between key rotation/ re-encryption.\"\"\"", "\n", "self", ".", "_sum_axis", "=", "axis", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.operations.rotate.Rotate.provider": [[68, 71], ["None"], "methods", ["None"], ["", "@", "provider", ".", "setter", "\n", "def", "provider", "(", "self", ",", "provider", ")", ":", "\n", "        ", "self", ".", "_provider", "=", "provider", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.operations.rotate.Rotate.axis": [[77, 85], ["isinstance", "type"], "methods", ["None"], ["", "@", "axis", ".", "setter", "\n", "def", "axis", "(", "self", ",", "axis", ")", ":", "\n", "        ", "valid", "=", "(", "0", ",", "1", ")", "\n", "assert", "axis", "in", "valid", ",", "\"{} axis expected to be in {}, got {}\"", ".", "format", "(", "\n", "self", ".", "__class__", ".", "__name__", ",", "valid", ",", "axis", ")", "\n", "assert", "isinstance", "(", "axis", ",", "int", ")", ",", "\"axis must be an integer got {}\"", ".", "format", "(", "\n", "type", "(", "axis", ")", ")", "\n", "self", ".", "_axis", "=", "axis", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.operations.rotate.Rotate.encryptor": [[91, 106], ["callable", "type"], "methods", ["None"], ["", "@", "encryptor", ".", "setter", "\n", "def", "encryptor", "(", "self", ",", "encryptor", ")", ":", "\n", "        ", "\"\"\"Set encryptor for key rotation.\n\n        Encryptors must be callable and preferably serialisable objects,\n        that when called with some input numpy array encrypt said array.\n\n        Encryptor is expected to be a callable as we want to be able to share\n        encryptors between multiple objects. We want them to be called, and\n        generate new callable objects that share the same parameters, and\n        keys as themselves.\n        \"\"\"", "\n", "assert", "callable", "(", "encryptor", ")", ",", "\"{}.encryptor got non callable, {}\"", ".", "format", "(", "\n", "self", ".", "__class__", ".", "__name__", ",", "type", "(", "encryptor", ")", ")", "\n", "self", ".", "_encryptor", "=", "encryptor", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.operations.rotate.Rotate.parameters": [[112, 115], ["None"], "methods", ["None"], ["", "@", "parameters", ".", "setter", "\n", "def", "parameters", "(", "self", ",", "parameters", ")", ":", "\n", "        ", "self", ".", "_parameters", "=", "parameters", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.operations.rotate.Rotate.cost": [[116, 120], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "cost", "(", "self", ")", ":", "\n", "        ", "\"\"\"Return no depth/ cost/ **0** of encryption.\"\"\"", "\n", "return", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.operations.rotate.Rotate.forward": [[121, 165], ["numpy.array", "numpy.sum", "t.flatten.flatten.flatten", "rotate.Rotate.encryptor", "range", "ValueError", "rotate.Rotate.provider", "len", "accumulator.append", "rotate.Rotate.provider", "rotate.Rotate.encryptor", "type", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.rearray.ReArray.sum", "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.operations.rotate.Rotate.flatten", "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.operations.rotate.Rotate.encryptor", "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.operations.encrypt.Encrypt.provider", "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.graph.dll.DLL.append", "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.operations.encrypt.Encrypt.provider", "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.operations.rotate.Rotate.encryptor"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"Rotate keys using encryption provider on desired axis.\n\n        This function has 3 modes:\n\n        - Encryptor: given some provider or encryptor will encrypt x and return\n          the cyphertext or list of cyphertexts (if axis is not 0)\n        - Decryptor: given neither provider nor encryptor will just turn x\n          into a numpy array, which for our numpyapi implementation means\n          turning cyphertexts into plaintexts and plaintexts stay plaintexts\n        - Rotator: given a cyphertext-x and a provider or encryptor will\n          decrypt x and re-encrypt using the new provider on the desired axis.\n        \"\"\"", "\n", "t", "=", "np", ".", "array", "(", "x", ")", "# ensure is numpy array, cyphertexts will decrypt here", "\n", "if", "self", ".", "sum_axis", "is", "not", "None", ":", "\n", "            ", "t", "=", "np", ".", "sum", "(", "t", ",", "axis", "=", "self", ".", "sum_axis", ")", "\n", "", "if", "self", ".", "flatten", "is", "not", "None", ":", "\n", "# TODO: record original shape in a queue so it can mutate", "\n", "            ", "self", ".", "original_shape", "=", "t", ".", "shape", "\n", "t", "=", "t", ".", "flatten", "(", ")", "\n", "", "if", "self", ".", "provider", "is", "None", "and", "self", ".", "encryptor", "is", "None", ":", "\n", "# in the case where no encryption provider has been specified", "\n", "# assume we are to just leave it as a plaintext", "\n", "            ", "return", "t", "\n", "", "elif", "self", ".", "provider", "is", "not", "None", "and", "self", ".", "encryptor", "is", "None", ":", "\n", "# if no encryptor provided then use provider to generate one", "\n", "            ", "try", ":", "\n", "                ", "self", ".", "encryptor", "=", "self", ".", "provider", "(", "**", "self", ".", "parameters", ")", "\n", "", "except", "TypeError", ":", "\n", "# sometimes a provider expects a number to encrypt, if so call", "\n", "# again this time with some dummy number", "\n", "                ", "self", ".", "encryptor", "=", "self", ".", "provider", "(", "np", ".", "array", "(", "[", "1", "]", ")", ",", "\n", "**", "self", ".", "parameters", ")", "\n", "\n", "", "", "if", "self", ".", "axis", "==", "0", ":", "\n", "            ", "return", "self", ".", "encryptor", "(", "t", ")", "\n", "", "elif", "self", ".", "axis", "==", "1", ":", "\n", "            ", "accumulator", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "t", ")", ")", ":", "\n", "                ", "accumulator", ".", "append", "(", "self", ".", "encryptor", "(", "t", "[", "i", "]", ")", ")", "\n", "", "return", "accumulator", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"{}.forward() got unsupported axis {}, {}\"", ".", "format", "(", "\n", "self", ".", "__class__", ".", "__name__", ",", "self", ".", "axis", ",", "type", "(", "self", ".", "axis", ")", ")", ")", "\n", "# cyphertext = self.provider(x, **self.parameters)", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.operations.rotate.Rotate.backward": [[168, 173], ["numpy.reshape"], "methods", ["None"], ["", "", "def", "backward", "(", "self", ",", "gradient", ")", ":", "\n", "        ", "\"\"\"Pass gradients back unmodified.\"\"\"", "\n", "if", "self", ".", "flatten", "is", "not", "None", ":", "\n", "            ", "return", "np", ".", "reshape", "(", "gradient", ",", "self", ".", "original_shape", ")", "\n", "", "return", "gradient", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.operations.rotate.Rotate.update": [[174, 177], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ")", ":", "\n", "        ", "\"\"\"Do nothing as encryption has no deep-learning parameterisation.\"\"\"", "\n", "return", "NotImplemented", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.operations.rotate.Rotate.updates": [[178, 181], ["None"], "methods", ["None"], ["", "def", "updates", "(", "self", ")", ":", "\n", "        ", "\"\"\"Do nothing as encryption has no deep-learning parameterisation.\"\"\"", "\n", "return", "NotImplemented", "\n", "", "", ""]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.operations.one_hot_decode_test.OneHotDecodeTest.data_shape": [[17, 21], ["None"], "methods", ["None"], ["@", "property", "\n", "def", "data_shape", "(", "self", ")", ":", "\n", "        ", "\"\"\"Define desired data shape.\"\"\"", "\n", "return", "(", "3", ",", "32", ",", "32", ",", "3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.operations.one_hot_decode_test.OneHotDecodeTest.data": [[22, 27], ["numpy.random.rand"], "methods", ["None"], ["", "@", "property", "\n", "def", "data", "(", "self", ")", ":", "\n", "        ", "\"\"\"Get some generated data.\"\"\"", "\n", "array", "=", "np", ".", "random", ".", "rand", "(", "*", "self", ".", "data_shape", ")", "\n", "return", "array", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.operations.one_hot_decode_test.OneHotDecodeTest.reseal_args": [[28, 39], ["pow"], "methods", ["None"], ["", "@", "property", "\n", "def", "reseal_args", "(", "self", ")", ":", "\n", "        ", "\"\"\"Get some reseal arguments for encryption.\"\"\"", "\n", "return", "{", "\n", "\"scheme\"", ":", "2", ",", "# seal.scheme_type.CKK,", "\n", "\"poly_modulus_degree\"", ":", "8192", "*", "2", ",", "# 438", "\n", "# \"coefficient_modulus\": [60, 40, 40, 60],", "\n", "\"coefficient_modulus\"", ":", "\n", "[", "45", ",", "30", ",", "30", ",", "30", ",", "30", ",", "30", ",", "30", ",", "30", ",", "30", ",", "30", ",", "30", ",", "45", "]", ",", "\n", "\"scale\"", ":", "pow", "(", "2.0", ",", "30", ")", ",", "\n", "\"cache\"", ":", "True", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.operations.one_hot_decode_test.OneHotDecodeTest.setUp": [[41, 44], ["time.time"], "methods", ["None"], ["", "def", "setUp", "(", "self", ")", ":", "\n", "        ", "\"\"\"Start timer and init variables.\"\"\"", "\n", "self", ".", "startTime", "=", "time", ".", "time", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.operations.one_hot_decode_test.OneHotDecodeTest.tearDown": [[45, 49], ["print", "time.time", "one_hot_decode_test.OneHotDecodeTest.id"], "methods", ["None"], ["", "def", "tearDown", "(", "self", ")", ":", "\n", "        ", "\"\"\"Calculate and print time delta.\"\"\"", "\n", "t", "=", "time", ".", "time", "(", ")", "-", "self", ".", "startTime", "\n", "print", "(", "'%s: %.3f'", "%", "(", "self", ".", "id", "(", ")", ",", "t", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.operations.one_hot_decode_test.OneHotDecodeTest.test_init": [[50, 54], ["fhez.nn.operations.one_hot_decode.OneHotDecode", "one_hot_decode_test.OneHotDecodeTest.assertIsInstance"], "methods", ["None"], ["", "def", "test_init", "(", "self", ")", ":", "\n", "        ", "\"\"\"Check object is initialised properly.\"\"\"", "\n", "decoder", "=", "OneHotDecode", "(", ")", "\n", "self", ".", "assertIsInstance", "(", "decoder", ",", "OneHotDecode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.operations.one_hot_decode_test.OneHotDecodeTest.test_forward": [[55, 61], ["fhez.nn.operations.one_hot_decode.OneHotDecode", "fhez.nn.operations.one_hot_decode.OneHotDecode.forward", "one_hot_decode_test.OneHotDecodeTest.assertEqual", "numpy.eye", "numpy.argmax"], "methods", ["home.repos.pwc.inspect_result.DreamingRaven_python-reseal.loss.mse.MSE.forward"], ["", "def", "test_forward", "(", "self", ")", ":", "\n", "        ", "\"\"\"Check decoding forward pass working as expected.\"\"\"", "\n", "decode", "=", "OneHotDecode", "(", ")", "\n", "one_hot", "=", "np", ".", "eye", "(", "5", ")", "[", "3", "]", "\n", "not_hot", "=", "decode", ".", "forward", "(", "one_hot", ")", "\n", "self", ".", "assertEqual", "(", "not_hot", ",", "np", ".", "argmax", "(", "one_hot", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.operations.one_hot_decode_test.OneHotDecodeTest.test_backward": [[62, 72], ["fhez.nn.operations.one_hot_decode.OneHotDecode", "fhez.nn.operations.one_hot_decode.OneHotDecode.forward", "one_hot_decode_test.OneHotDecodeTest.assertEqual", "fhez.nn.operations.one_hot_decode.OneHotDecode.backward", "numpy.testing.assert_array_almost_equal", "numpy.eye", "numpy.argmax"], "methods", ["home.repos.pwc.inspect_result.DreamingRaven_python-reseal.loss.mse.MSE.forward", "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.loss.mse.MSE.backward"], ["", "def", "test_backward", "(", "self", ")", ":", "\n", "        ", "\"\"\"Check only one hot gradient is chained.\"\"\"", "\n", "decode", "=", "OneHotDecode", "(", ")", "\n", "one_hot", "=", "np", ".", "eye", "(", "5", ")", "[", "3", "]", "\n", "not_hot", "=", "decode", ".", "forward", "(", "one_hot", ")", "\n", "self", ".", "assertEqual", "(", "not_hot", ",", "np", ".", "argmax", "(", "one_hot", ")", ")", "\n", "local_grad", "=", "decode", ".", "backward", "(", "2", ")", "\n", "np", ".", "testing", ".", "assert_array_almost_equal", "(", "local_grad", ",", "one_hot", "*", "2", ",", "\n", "decimal", "=", "1", ",", "\n", "verbose", "=", "True", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.operations.sum_test.SumTest.data_shape": [[16, 20], ["None"], "methods", ["None"], ["@", "property", "\n", "def", "data_shape", "(", "self", ")", ":", "\n", "        ", "\"\"\"Define desired data shape.\"\"\"", "\n", "return", "(", "3", ",", "32", ",", "32", ",", "3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.operations.sum_test.SumTest.data": [[21, 26], ["numpy.random.rand"], "methods", ["None"], ["", "@", "property", "\n", "def", "data", "(", "self", ")", ":", "\n", "        ", "\"\"\"Get some generated data.\"\"\"", "\n", "array", "=", "np", ".", "random", ".", "rand", "(", "*", "self", ".", "data_shape", ")", "\n", "return", "array", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.operations.sum_test.SumTest.reseal_args": [[27, 38], ["pow"], "methods", ["None"], ["", "@", "property", "\n", "def", "reseal_args", "(", "self", ")", ":", "\n", "        ", "\"\"\"Get some reseal arguments for encryption.\"\"\"", "\n", "return", "{", "\n", "\"scheme\"", ":", "2", ",", "# seal.scheme_type.CKK,", "\n", "\"poly_modulus_degree\"", ":", "8192", "*", "2", ",", "# 438", "\n", "# \"coefficient_modulus\": [60, 40, 40, 60],", "\n", "\"coefficient_modulus\"", ":", "\n", "[", "45", ",", "30", ",", "30", ",", "30", ",", "30", ",", "30", ",", "30", ",", "30", ",", "30", ",", "30", ",", "30", ",", "45", "]", ",", "\n", "\"scale\"", ":", "pow", "(", "2.0", ",", "30", ")", ",", "\n", "\"cache\"", ":", "True", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.operations.sum_test.SumTest.setUp": [[40, 45], ["time.time"], "methods", ["None"], ["", "def", "setUp", "(", "self", ")", ":", "\n", "        ", "\"\"\"Start timer and init variables.\"\"\"", "\n", "self", ".", "weights", "=", "(", "1", ",", ")", "# if tuple allows cnn to initialise itself", "\n", "\n", "self", ".", "startTime", "=", "time", ".", "time", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.operations.sum_test.SumTest.tearDown": [[46, 50], ["print", "time.time", "sum_test.SumTest.id"], "methods", ["None"], ["", "def", "tearDown", "(", "self", ")", ":", "\n", "        ", "\"\"\"Calculate and print time delta.\"\"\"", "\n", "t", "=", "time", ".", "time", "(", ")", "-", "self", ".", "startTime", "\n", "print", "(", "'%s: %.3f'", "%", "(", "self", ".", "id", "(", ")", ",", "t", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.operations.sum_test.SumTest.test_test": [[51, 55], ["sum_test.SumTest.assertEqual"], "methods", ["None"], ["", "def", "test_test", "(", "self", ")", ":", "\n", "        ", "\"\"\"Check our testing values meet requirements.\"\"\"", "\n", "# check data is the shape we desire/ gave it to generate", "\n", "self", ".", "assertEqual", "(", "self", ".", "data", ".", "shape", ",", "self", ".", "data_shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.operations.sum_test.SumTest.test_init": [[56, 59], ["fhez.nn.operations.sum.Sum"], "methods", ["None"], ["", "def", "test_init", "(", "self", ")", ":", "\n", "        ", "\"\"\"Check object initialisation.\"\"\"", "\n", "Sum", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.operations.sum_test.SumTest.test_forward": [[60, 69], ["fhez.nn.operations.sum.Sum", "fhez.nn.operations.sum.Sum.forward", "numpy.sum", "numpy.testing.assert_array_almost_equal"], "methods", ["home.repos.pwc.inspect_result.DreamingRaven_python-reseal.loss.mse.MSE.forward", "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.rearray.ReArray.sum"], ["", "def", "test_forward", "(", "self", ")", ":", "\n", "        ", "\"\"\"Check sum forward pass activation correct.\"\"\"", "\n", "s", "=", "Sum", "(", ")", "\n", "d", "=", "self", ".", "data", "\n", "a", "=", "s", ".", "forward", "(", "x", "=", "d", ")", "\n", "truth", "=", "np", ".", "sum", "(", "d", ")", "\n", "np", ".", "testing", ".", "assert_array_almost_equal", "(", "a", ",", "truth", ",", "\n", "decimal", "=", "1", ",", "\n", "verbose", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.operations.sum_test.SumTest.test_backward": [[70, 81], ["fhez.nn.operations.sum.Sum", "fhez.nn.operations.sum.Sum.forward", "fhez.nn.operations.sum.Sum.backward", "sum_test.SumTest.assertEqual", "numpy.ones", "numpy.testing.assert_array_almost_equal"], "methods", ["home.repos.pwc.inspect_result.DreamingRaven_python-reseal.loss.mse.MSE.forward", "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.loss.mse.MSE.backward"], ["", "def", "test_backward", "(", "self", ")", ":", "\n", "        ", "\"\"\"Check sum backward pass gradients correct.\"\"\"", "\n", "s", "=", "Sum", "(", ")", "\n", "d", "=", "self", ".", "data", "\n", "s", ".", "forward", "(", "x", "=", "d", ")", "\n", "grads", "=", "s", ".", "backward", "(", "gradient", "=", "1", ")", "\n", "self", ".", "assertEqual", "(", "grads", ".", "shape", ",", "d", ".", "shape", ")", "\n", "truth", "=", "np", ".", "ones", "(", "self", ".", "data_shape", ")", "\n", "np", ".", "testing", ".", "assert_array_almost_equal", "(", "grads", ",", "truth", ",", "\n", "decimal", "=", "1", ",", "\n", "verbose", "=", "True", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.operations.encrypt.Encrypt.__init__": [[14, 23], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "provider", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Configure provider and encryption parameters.\n\n        Given a provider like FHEz-ReSeal, and an arbitrary number of keyword\n        arguments. Setup encryptor to be (re-)used for continued encryption.\n        \"\"\"", "\n", "if", "provider", "is", "not", "None", ":", "\n", "            ", "self", ".", "provider", "=", "provider", "\n", "", "self", ".", "parameters", "=", "kwargs", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.operations.encrypt.Encrypt.provider": [[29, 32], ["None"], "methods", ["None"], ["", "@", "provider", ".", "setter", "\n", "def", "provider", "(", "self", ",", "provider", ")", ":", "\n", "        ", "self", ".", "_provider", "=", "provider", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.operations.encrypt.Encrypt.parameters": [[47, 50], ["None"], "methods", ["None"], ["", "@", "parameters", ".", "setter", "\n", "def", "parameters", "(", "self", ",", "parameters", ")", ":", "\n", "        ", "self", ".", "_parameters", "=", "parameters", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.operations.encrypt.Encrypt.cost": [[51, 55], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "cost", "(", "self", ")", ":", "\n", "        ", "\"\"\"Return no depth/ cost/ **0** of encryption.\"\"\"", "\n", "return", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.operations.encrypt.Encrypt.forward": [[56, 67], ["encrypt.Encrypt.provider", "logging.warning"], "methods", ["home.repos.pwc.inspect_result.DreamingRaven_python-reseal.operations.encrypt.Encrypt.provider"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"Encrypt cyphertext using configured FHE provider.\"\"\"", "\n", "if", "self", ".", "provider", "is", "None", ":", "\n", "# in the case where no encryption provider has been specified", "\n", "# assume we arent to encrypt, but warn!", "\n", "            ", "logging", ".", "warning", "(", "\n", "\"{} no encryption provider, instead using plaintext.\"", ".", "format", "(", "\n", "self", ".", "__class__", ".", "__name__", ")", ")", "\n", "return", "x", "\n", "", "cyphertext", "=", "self", ".", "provider", "(", "x", ",", "**", "self", ".", "parameters", ")", "\n", "return", "cyphertext", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.operations.encrypt.Encrypt.backward": [[68, 71], ["None"], "methods", ["None"], ["", "def", "backward", "(", "self", ",", "gradient", ")", ":", "\n", "        ", "\"\"\"Pass gradients back unmodified.\"\"\"", "\n", "return", "gradient", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.operations.encrypt.Encrypt.update": [[72, 75], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ")", ":", "\n", "        ", "\"\"\"Do nothing as encryption has no deep-learning parameterisation.\"\"\"", "\n", "return", "NotImplemented", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.operations.encrypt.Encrypt.updates": [[76, 79], ["None"], "methods", ["None"], ["", "def", "updates", "(", "self", ")", ":", "\n", "        ", "\"\"\"Do nothing as encryption has no deep-learning parameterisation.\"\"\"", "\n", "return", "NotImplemented", "\n", "", "", ""]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.operations.cc.CC.__init__": [[19, 33], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "\n", "weights", ":", "np", ".", "ndarray", "=", "None", ",", "\n", "stride", ":", "np", ".", "ndarray", "=", "None", ",", "\n", "bias", ":", "np", ".", "ndarray", "=", "None", ",", "\n", "optimiser", "=", "None", ")", ":", "\n", "        ", "\"\"\"Create CNN object with any desired default parameters.\"\"\"", "\n", "if", "weights", "is", "not", "None", ":", "\n", "            ", "self", ".", "weights", "=", "weights", "\n", "", "if", "stride", "is", "not", "None", ":", "\n", "            ", "self", ".", "stride", "=", "stride", "\n", "", "if", "bias", "is", "not", "None", ":", "\n", "            ", "self", ".", "bias", "=", "bias", "\n", "", "if", "optimiser", "is", "not", "None", ":", "\n", "            ", "self", ".", "optimiser", "=", "optimiser", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.operations.cc.CC.schema": [[34, 55], ["marshmallow.Schema.from_dict", "marshmallow.fields.Float", "fhez.fields.numpyfield.NumpyField", "fhez.fields.numpyfield.NumpyField"], "methods", ["None"], ["", "", "@", "property", "\n", "def", "schema", "(", "self", ")", ":", "\n", "        ", "\"\"\"Get Marshmallow schema representation of this class.\n\n        Marshmallow schemas allow for easy and trustworthy serialisation\n        and deserialisation of arbitrary objects either to inbulit types or\n        json formats. This is an inherited member of the abstract class\n        Serialise.\n\n        .. note::\n\n            Anything not listed here will inevitably be lost, ensure anything\n            important is identified and expressley stated its type and\n            structure.\n        \"\"\"", "\n", "schema_dict", "=", "{", "\n", "\"_b\"", ":", "mar", ".", "fields", ".", "Float", "(", ")", ",", "\n", "\"_w\"", ":", "NumpyField", "(", ")", ",", "\n", "\"_stride\"", ":", "NumpyField", "(", ")", ",", "\n", "}", "\n", "return", "mar", ".", "Schema", ".", "from_dict", "(", "schema_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.operations.cc.CC.cost": [[56, 60], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "cost", "(", "self", ")", ":", "\n", "        ", "\"\"\"Get computational cost of this CNN node.\"\"\"", "\n", "return", "6", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.operations.cc.CC.forward": [[61, 90], ["cc.CC.inputs.append", "range", "numpy.array", "cc.CC.windex", "list", "len", "numpy.zeros", "activated.append", "map"], "methods", ["home.repos.pwc.inspect_result.DreamingRaven_python-reseal.graph.dll.DLL.append", "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.operations.cc.CC.windex", "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.graph.dll.DLL.append"], ["", "def", "forward", "(", "self", ",", "x", ":", "np", ".", "ndarray", ")", ":", "\n", "        ", "\"\"\"Compute convolutional filter forward pass and sums.\"\"\"", "\n", "self", ".", "inputs", ".", "append", "(", "x", ")", "\n", "if", "self", ".", "windows", "is", "None", ":", "\n", "# self.windows = self.windex(data=x.shape[1:],", "\n", "#                            filter=self.weights.shape[1:],", "\n", "#                            stride=self.stride[1:])", "\n", "            ", "self", ".", "windows", "=", "self", ".", "windex", "(", "data", "=", "x", ".", "shape", ",", "\n", "filter", "=", "self", ".", "weights", ".", "shape", ",", "\n", "stride", "=", "self", ".", "stride", ")", "\n", "self", ".", "windows", "=", "list", "(", "map", "(", "self", ".", "windex_to_slice", ",", "self", ".", "windows", ")", ")", "\n", "\n", "", "activated", "=", "[", "]", "\n", "# apply each window and do it by index so can state progress", "\n", "# for i in tqdm(range(len(self.windows)), desc=\"{}.{}\".format(", "\n", "#         self.__class__.__name__, \"forward\"),", "\n", "#     ncols=80, colour=\"blue\"", "\n", "# ):", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "windows", ")", ")", ":", "\n", "# create a primer for application of window without having to", "\n", "# modify x but instead the filter itself", "\n", "            ", "cc_primer", "=", "np", ".", "zeros", "(", "x", ".", "shape", ")", "\n", "# now we have a sparse vectore that can be used to convolve", "\n", "cc_primer", "[", "self", ".", "windows", "[", "i", "]", "]", "=", "self", ".", "weights", "\n", "t", "=", "cc_primer", "*", "x", "\n", "t", "+=", "self", ".", "bias", "\n", "# t = t + (self.bias/(t.size/len(t)))  # commuted before sum", "\n", "activated", ".", "append", "(", "t", ")", "\n", "", "return", "np", ".", "array", "(", "activated", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.operations.cc.CC.backward": [[91, 110], ["numpy.array", "numpy.zeros", "numpy.zeros", "range", "numpy.sum", "cc.CC.gradients.append", "cc.CC.inputs.pop", "len", "numpy.zeros", "len"], "methods", ["home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.rearray.ReArray.sum", "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.graph.dll.DLL.append"], ["", "def", "backward", "(", "self", ",", "gradient", ":", "np", ".", "ndarray", ")", ":", "\n", "        ", "\"\"\"Compute computational filter gradient and input gradient.\"\"\"", "\n", "x", "=", "np", ".", "array", "(", "self", ".", "inputs", ".", "pop", "(", ")", ")", "\n", "# gradient_kernel = gradient * self.weights", "\n", "x_grad_product", "=", "x", "*", "gradient", "\n", "# calculate the gradient of inputs by adding the kernel grads together", "\n", "# in the positions those gradients were used.", "\n", "dfdx", "=", "np", ".", "zeros", "(", "x", ".", "shape", ")", "\n", "dfdw", "=", "np", ".", "zeros", "(", "self", ".", "weights", ".", "shape", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "windows", ")", ")", ":", "\n", "            ", "primer", "=", "np", ".", "zeros", "(", "x", ".", "shape", ")", "\n", "primer", "[", "self", ".", "windows", "[", "i", "]", "]", "=", "self", ".", "weights", "\n", "dfdw", "+=", "x_grad_product", "[", "self", ".", "windows", "[", "i", "]", "]", "\n", "dfdx", "+=", "(", "primer", "*", "gradient", ")", "\n", "# b is broadcast to the size of the kernel in forward and is also", "\n", "# broadcast multiple times once for each window.", "\n", "", "dfdb", "=", "np", ".", "sum", "(", "len", "(", "self", ".", "windows", ")", "*", "gradient", ")", "\n", "self", ".", "gradients", ".", "append", "(", "{", "\"dfdw\"", ":", "dfdw", ",", "\"dfdx\"", ":", "dfdx", ",", "\"dfdb\"", ":", "dfdb", "}", ")", "\n", "return", "dfdx", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.operations.cc.CC.update": [[111, 114], ["cc.CC.updater"], "methods", ["home.repos.pwc.inspect_result.DreamingRaven_python-reseal.graph.node.Node.updater"], ["", "def", "update", "(", "self", ")", ":", "\n", "        ", "\"\"\"Update node state/ weights for a single example.\"\"\"", "\n", "self", ".", "updater", "(", "parm_names", "=", "[", "\"w\"", ",", "\"b\"", "]", ",", "it", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.operations.cc.CC.updates": [[115, 118], ["cc.CC.updater"], "methods", ["home.repos.pwc.inspect_result.DreamingRaven_python-reseal.graph.node.Node.updater"], ["", "def", "updates", "(", "self", ")", ":", "\n", "        ", "\"\"\"Update node state/ weights for multiple examples simultaneously.\"\"\"", "\n", "self", ".", "updater", "(", "parm_names", "=", "[", "\"w\"", ",", "\"b\"", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.operations.cc.CC.w": [[124, 127], ["None"], "methods", ["None"], ["", "@", "w", ".", "setter", "\n", "def", "w", "(", "self", ",", "w", ")", ":", "\n", "        ", "self", ".", "weights", "=", "w", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.operations.cc.CC.weights": [[135, 151], ["isinstance", "numpy.random.rand"], "methods", ["None"], ["", "@", "weights", ".", "setter", "\n", "def", "weights", "(", "self", ",", "weights", ")", ":", "\n", "        ", "\"\"\"Set cross convolved filter n-dimensional weights.\"\"\"", "\n", "# initialise weights from tuple dimensions", "\n", "# TODO: properly implement xavier weight initialisation over np.rand", "\n", "if", "isinstance", "(", "weights", ",", "tuple", ")", ":", "\n", "# https://www.coursera.org/specializations/deep-learning", "\n", "# https://towardsdatascience.com/weight-initialization-techniques-in-neural-networks-26c649eb3b78", "\n", "            ", "self", ".", "_w", "=", "np", ".", "random", ".", "rand", "(", "*", "weights", ")", "\n", "# ensure initial product of weights * x is in range 0-1", "\n", "# since each product of these wieghts is summed lets ensure they", "\n", "# are smaller than 1 when they are summed by dividing the weights", "\n", "# (not X as its a cyphertext) by the number of elements being sumd", "\n", "self", ".", "_w", "=", "self", ".", "weights", "/", "self", ".", "weights", ".", "size", "\n", "", "else", ":", "\n", "            ", "self", ".", "_w", "=", "weights", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.operations.cc.CC.b": [[157, 160], ["None"], "methods", ["None"], ["", "@", "b", ".", "setter", "\n", "def", "b", "(", "self", ",", "b", ")", ":", "\n", "        ", "self", ".", "bias", "=", "b", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.operations.cc.CC.bias": [[170, 174], ["None"], "methods", ["None"], ["", "", "@", "bias", ".", "setter", "\n", "def", "bias", "(", "self", ",", "bias", ":", "np", ".", "ndarray", ")", ":", "\n", "        ", "\"\"\"Set sum of products bias coefficient.\"\"\"", "\n", "self", ".", "_b", "=", "bias", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.operations.cc.CC.stride": [[183, 191], ["numpy.array", "numpy.array.astype"], "methods", ["None"], ["", "@", "stride", ".", "setter", "\n", "def", "stride", "(", "self", ",", "stride", ":", "np", ".", "ndarray", ")", ":", "\n", "        ", "\"\"\"Set stride over convolutions.\n\n        Note: Stride **MUST** be integers, we cannot have partial strides.\n        \"\"\"", "\n", "stride", "=", "np", ".", "array", "(", "stride", ")", "# just ensuring is numpy", "\n", "self", ".", "_stride", "=", "stride", ".", "astype", "(", "int", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.operations.cc.CC.windows": [[199, 203], ["None"], "methods", ["None"], ["", "@", "windows", ".", "setter", "\n", "def", "windows", "(", "self", ",", "windows", ")", ":", "\n", "        ", "\"\"\"Set current list of windows into the data.\"\"\"", "\n", "self", ".", "cache", "[", "\"windows\"", "]", "=", "windows", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.operations.cc.CC.windex": [[206, 296], ["isinstance", "cc.CC.probe_shape", "isinstance", "cc.CC.probe_shape", "len", "list", "range", "copy.deepcopy", "list", "range", "copy.deepcopy.append", "cc.CC.windex", "windows.extend", "windows.append", "len"], "methods", ["home.repos.pwc.inspect_result.DreamingRaven_python-reseal.operations.cc.CC.probe_shape", "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.operations.cc.CC.probe_shape", "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.graph.dll.DLL.append", "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.operations.cc.CC.windex", "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.graph.dll.DLL.append"], ["", "def", "windex", "(", "self", ",", "data", ":", "list", ",", "filter", ":", "list", ",", "stride", ":", "list", ",", "\n", "dimension", ":", "int", "=", "0", ",", "partial", ":", "list", "=", "[", "]", ")", ":", "\n", "        ", "\"\"\"\n        Recursive window index or Windex.\n\n        This function takes 3 lists; data, filter, and stride.\n        Data is a regular multidimensional list, so in the case of a 32x32\n        pixel image you would expect a list of shape (32,32,3) 3 being the RGB\n        channels.\n        Filter is the convolutional filter which we seek to find all windows of\n        inside the data. So for data (32,32,3) a standard filter could be\n        applied of shape (3,3,3).\n        Stride is a 1 dimensional list representing the strides for each\n        dimension, so a stride list such as [1,2,3] on data (32,32,3) and\n        filter (3,3,3), would move the window 1 in the first 32 dimension,\n        2 in the second 32 dim, and 3 in the 3 dimension.\n\n        This function returns a 1D list of all windows, which are themselves\n        lists.\n        These windows are the same length as the number of dimensions, and each\n        dimension consists of indexes with which to slice the original data to\n        create the matrix with which to convolve (cross correlate).\n        An example given: data.shape=(4,4), filter.shape=(2,2), stride=[1,1]\n\n        .. code-block:: python\n\n            list_of_window_indexes = [\n                [[0, 1], [0, 1]], # 0th window\n                [[0, 1], [1, 2]], # 1st window\n                [[0, 1], [2, 3]], # ...\n                [[1, 2], [0, 1]],\n                [[1, 2], [1, 2]],\n                [[1, 2], [2, 3]],\n                [[2, 3], [0, 1]],\n                [[2, 3], [1, 2]],\n                [[2, 3], [2, 3]], # T_x-1 window\n            ]\n\n        We get the indexes rather than the actual data for two reasons:\n\n        - we want to be able to cache this calculation and use it for\n          homogenus data that could be streaming into a convolutional\n          neural networks, cutting the time per epoch down.\n        - we want to use pure list slicing so that we can work with non-\n          standard data, E.G Fully Homomorphically Encrypted lists.\n        \"\"\"", "\n", "# get shapes of structural lists", "\n", "d_shape", "=", "data", "if", "isinstance", "(", "data", ",", "tuple", ")", "else", "self", ".", "probe_shape", "(", "\n", "data", ")", "\n", "f_shape", "=", "filter", "if", "isinstance", "(", "filter", ",", "tuple", ")", "else", "self", ".", "probe_shape", "(", "\n", "filter", ")", "\n", "# if we are not at the end/ last dimension", "\n", "if", "len", "(", "stride", ")", ">", "dimension", ":", "\n", "# creating a list matching dimension len so we can slice", "\n", "            ", "window_heads", "=", "list", "(", "range", "(", "d_shape", "[", "dimension", "]", ")", ")", "\n", "# using dimension list to calculate strides using slicing", "\n", "window_heads", "=", "window_heads", "[", ":", ":", "stride", "[", "dimension", "]", "]", "\n", "# creating window container to hold each respective window", "\n", "windows", "=", "[", "]", "\n", "# iterate through first index/ head of window", "\n", "for", "window_head", "in", "window_heads", ":", "\n", "# copy partial window up till now to branch it to mutliple", "\n", "# windows", "\n", "                ", "current_partial_window", "=", "copy", ".", "deepcopy", "(", "partial", ")", "\n", "# create index range of window in this dimension", "\n", "window", "=", "list", "(", "range", "(", "window_head", ",", "window_head", "+", "\n", "f_shape", "[", "dimension", "]", ")", ")", "\n", "# if window end \"-1\" is within data bounds", "\n", "if", "(", "window", "[", "-", "1", "]", ")", "<", "d_shape", "[", "dimension", "]", ":", "\n", "# add this dimensions window indexes to partial", "\n", "                    ", "current_partial_window", ".", "append", "(", "window", ")", "\n", "# pass partial to recurse and build it up further", "\n", "subwindow", "=", "self", ".", "windex", "(", "data", ",", "filter", ",", "stride", ",", "dimension", "+", "1", ",", "\n", "current_partial_window", ")", "\n", "# logger.debug(\"subwindow {}: {}\".format(dimension,", "\n", "#                                        subwindow))", "\n", "# since we want to create a flat list we want to extend if", "\n", "# the list is still building the partial window or append", "\n", "# if concatenating the partial windows to a single list", "\n", "if", "(", "len", "(", "stride", ")", "-", "1", ")", ">", "dimension", ":", "\n", "                        ", "windows", ".", "extend", "(", "subwindow", ")", "\n", "", "else", ":", "\n", "                        ", "windows", ".", "append", "(", "subwindow", ")", "\n", "", "", "else", ":", "\n", "# discarding illegal windows that are out of bounds", "\n", "                    ", "pass", "\n", "", "", "return", "windows", "\n", "", "else", ":", "\n", "# this is the end of the sequence, can do no more so return", "\n", "            ", "return", "partial", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.operations.cc.CC.windex_to_slice": [[297, 304], ["slice"], "methods", ["None"], ["", "", "def", "windex_to_slice", "(", "self", ",", "window", ")", ":", "\n", "        ", "\"\"\"Convert x sides of window expression into slices to slice np.\"\"\"", "\n", "slicedex", "=", "(", ")", "\n", "for", "dimension", "in", "window", ":", "\n", "            ", "t", "=", "(", "slice", "(", "dimension", "[", "0", "]", ",", "dimension", "[", "-", "1", "]", "+", "1", ")", ",", ")", "\n", "slicedex", "+=", "t", "\n", "", "return", "slicedex", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.operations.cc.CC.probe_shape": [[305, 320], ["isinstance", "cc.CC.probe_shape", "len", "len"], "methods", ["home.repos.pwc.inspect_result.DreamingRaven_python-reseal.operations.cc.CC.probe_shape"], ["", "def", "probe_shape", "(", "self", ",", "lst", ":", "list", ")", ":", "\n", "        ", "\"\"\"Get the shape of a list, assuming each sublist is the same length.\n\n        This function is recursive, sending the sublists down and terminating\n        once a type error is thrown by the final point being a non-list\n        \"\"\"", "\n", "if", "isinstance", "(", "lst", ",", "list", ")", ":", "\n", "# try appending current length with recurse of sublist", "\n", "            ", "try", ":", "\n", "                ", "return", "(", "len", "(", "lst", ")", ",", ")", "+", "self", ".", "probe_shape", "(", "lst", "[", "0", "]", ")", "\n", "# once we bottom out and get some non-list type abort and pull up", "\n", "", "except", "(", "AttributeError", ",", "IndexError", ")", ":", "\n", "                ", "return", "(", "len", "(", "lst", ")", ",", ")", "\n", "", "", "else", ":", "\n", "            ", "return", "lst", ".", "shape", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.operations.cc_test.CCTest.data_shape": [[16, 20], ["None"], "methods", ["None"], ["@", "property", "\n", "def", "data_shape", "(", "self", ")", ":", "\n", "        ", "\"\"\"Define desired data shape.\"\"\"", "\n", "return", "(", "4", ",", "4", ",", "3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.operations.cc_test.CCTest.filter_shape": [[21, 25], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "filter_shape", "(", "self", ")", ":", "\n", "        ", "\"\"\"Get a filter shape corresponding to data.\"\"\"", "\n", "return", "(", "3", ",", "3", ",", "3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.operations.cc_test.CCTest.data": [[26, 31], ["numpy.ones"], "methods", ["None"], ["", "@", "property", "\n", "def", "data", "(", "self", ")", ":", "\n", "        ", "\"\"\"Get some generated data.\"\"\"", "\n", "array", "=", "np", ".", "ones", "(", "self", ".", "data_shape", ")", "\n", "return", "array", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.operations.cc_test.CCTest.filt": [[32, 37], ["numpy.ones"], "methods", ["None"], ["", "@", "property", "\n", "def", "filt", "(", "self", ")", ":", "\n", "        ", "\"\"\"Generate some filter for the data.\"\"\"", "\n", "filt", "=", "np", ".", "ones", "(", "self", ".", "filter_shape", ")", "/", "2", "\n", "return", "filt", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.operations.cc_test.CCTest.bias": [[38, 42], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "bias", "(", "self", ")", ":", "\n", "        ", "\"\"\"Get a bias term.\"\"\"", "\n", "return", "0.5", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.operations.cc_test.CCTest.reseal_args": [[43, 54], ["pow"], "methods", ["None"], ["", "@", "property", "\n", "def", "reseal_args", "(", "self", ")", ":", "\n", "        ", "\"\"\"Get some reseal arguments for encryption.\"\"\"", "\n", "return", "{", "\n", "\"scheme\"", ":", "2", ",", "# seal.scheme_type.CKK,", "\n", "\"poly_modulus_degree\"", ":", "8192", "*", "2", ",", "# 438", "\n", "# \"coefficient_modulus\": [60, 40, 40, 60],", "\n", "\"coefficient_modulus\"", ":", "\n", "[", "45", ",", "30", ",", "30", ",", "30", ",", "30", ",", "30", ",", "30", ",", "30", ",", "30", ",", "30", ",", "30", ",", "45", "]", ",", "\n", "\"scale\"", ":", "pow", "(", "2.0", ",", "30", ")", ",", "\n", "\"cache\"", ":", "True", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.operations.cc_test.CCTest.setUp": [[56, 59], ["time.time"], "methods", ["None"], ["", "def", "setUp", "(", "self", ")", ":", "\n", "        ", "\"\"\"Start timer and init variables.\"\"\"", "\n", "self", ".", "startTime", "=", "time", ".", "time", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.operations.cc_test.CCTest.tearDown": [[60, 64], ["print", "time.time", "cc_test.CCTest.id"], "methods", ["None"], ["", "def", "tearDown", "(", "self", ")", ":", "\n", "        ", "\"\"\"Calculate and print time delta.\"\"\"", "\n", "t", "=", "time", ".", "time", "(", ")", "-", "self", ".", "startTime", "\n", "print", "(", "'%s: %.3f'", "%", "(", "self", ".", "id", "(", ")", ",", "t", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.operations.cc_test.CCTest.test_test": [[65, 69], ["cc_test.CCTest.assertEqual"], "methods", ["None"], ["", "def", "test_test", "(", "self", ")", ":", "\n", "        ", "\"\"\"Check our testing values meet requirements.\"\"\"", "\n", "# check data is the shape we desire/ gave it to generate", "\n", "self", ".", "assertEqual", "(", "self", ".", "data", ".", "shape", ",", "self", ".", "data_shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.operations.cc_test.CCTest.test_init": [[70, 74], ["fhez.nn.operations.cc.CC", "cc_test.CCTest.assertIsInstance"], "methods", ["None"], ["", "def", "test_init", "(", "self", ")", ":", "\n", "        ", "\"\"\"Check that initialisation has occured properly.\"\"\"", "\n", "cc", "=", "CC", "(", ")", "\n", "self", ".", "assertIsInstance", "(", "cc", ",", "CC", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.operations.cc_test.CCTest.test_forward": [[75, 107], ["fhez.nn.operations.cc.CC", "fhez.nn.operations.cc.CC.forward", "cc_test.CCTest.assertEqual", "numpy.testing.assert_array_almost_equal", "numpy.testing.assert_array_almost_equal", "numpy.testing.assert_array_almost_equal", "len", "numpy.ones", "numpy.ones", "numpy.ones"], "methods", ["home.repos.pwc.inspect_result.DreamingRaven_python-reseal.loss.mse.MSE.forward"], ["", "def", "test_forward", "(", "self", ")", ":", "\n", "        ", "\"\"\"Test CC filter and sum applied correctly.\"\"\"", "\n", "weights", "=", "self", ".", "filt", "\n", "data", "=", "self", ".", "data", "\n", "bias", "=", "self", ".", "bias", "\n", "\n", "cc", "=", "CC", "(", "weights", "=", "weights", ",", "bias", "=", "bias", ")", "\n", "a", "=", "cc", ".", "forward", "(", "x", "=", "data", ")", "\n", "# check that number of windows matches what we expect", "\n", "self", ".", "assertEqual", "(", "len", "(", "cc", ".", "windows", ")", ",", "4", ")", "\n", "first", "=", "a", "[", "0", "]", "\n", "second", "=", "a", "[", "1", "]", "\n", "last", "=", "a", "[", "-", "1", "]", "\n", "\n", "first_truth", "=", "np", ".", "ones", "(", "self", ".", "data_shape", ")", "/", "2", "\n", "first_truth", "[", "0", ":", "3", ",", "0", ":", "3", ",", "0", ":", "3", "]", "=", "1", "\n", "\n", "second_truth", "=", "np", ".", "ones", "(", "self", ".", "data_shape", ")", "/", "2", "\n", "second_truth", "[", "0", ":", "3", ",", "1", ":", "4", ",", "0", ":", "3", "]", "=", "1", "\n", "\n", "last_truth", "=", "np", ".", "ones", "(", "self", ".", "data_shape", ")", "/", "2", "\n", "last_truth", "[", "1", ":", "4", ",", "1", ":", "4", ",", "0", ":", "3", "]", "=", "1", "\n", "\n", "np", ".", "testing", ".", "assert_array_almost_equal", "(", "first", ",", "first_truth", ",", "\n", "decimal", "=", "1", ",", "\n", "verbose", "=", "True", ")", "\n", "np", ".", "testing", ".", "assert_array_almost_equal", "(", "second", ",", "second_truth", ",", "\n", "decimal", "=", "1", ",", "\n", "verbose", "=", "True", ")", "\n", "np", ".", "testing", ".", "assert_array_almost_equal", "(", "last", ",", "last_truth", ",", "\n", "decimal", "=", "1", ",", "\n", "verbose", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.operations.cc_test.CCTest.test_backward": [[108, 147], ["fhez.nn.operations.cc.CC", "fhez.nn.operations.cc.CC.forward", "fhez.nn.operations.cc.CC.backward", "fhez.nn.operations.cc.CC.gradients.pop", "cc_test.CCTest.assertEqual", "numpy.testing.assert_array_almost_equal", "numpy.array", "numpy.testing.assert_array_almost_equal", "numpy.ones"], "methods", ["home.repos.pwc.inspect_result.DreamingRaven_python-reseal.loss.mse.MSE.forward", "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.loss.mse.MSE.backward"], ["", "def", "test_backward", "(", "self", ")", ":", "\n", "        ", "\"\"\"Test CC gradient calculated correctly.\"\"\"", "\n", "weights", "=", "self", ".", "filt", "\n", "data", "=", "self", ".", "data", "\n", "bias", "=", "self", ".", "bias", "\n", "\n", "cc", "=", "CC", "(", "weights", "=", "weights", ",", "bias", "=", "bias", ")", "\n", "cc", ".", "forward", "(", "x", "=", "data", ")", "\n", "cc", ".", "backward", "(", "gradient", "=", "1", ")", "\n", "grads", "=", "cc", ".", "gradients", ".", "pop", "(", ")", "\n", "# check bias gradient", "\n", "self", ".", "assertEqual", "(", "grads", "[", "\"dfdb\"", "]", ",", "self", ".", "filt", ".", "size", "*", "4", ")", "\n", "# check weights gradient", "\n", "np", ".", "testing", ".", "assert_array_almost_equal", "(", "grads", "[", "\"dfdw\"", "]", ",", "\n", "np", ".", "ones", "(", "self", ".", "filt", ".", "shape", ")", "*", "4", ",", "\n", "decimal", "=", "1", ",", "\n", "verbose", "=", "True", ")", "\n", "# check input (x) gradient", "\n", "dfdx_truth", "=", "[", "[", "[", "0.5", ",", "0.5", ",", "0.5", "]", ",", "\n", "[", "1.0", ",", "1.0", ",", "1.0", "]", ",", "\n", "[", "1.0", ",", "1.0", ",", "1.0", "]", ",", "\n", "[", "0.5", ",", "0.5", ",", "0.5", "]", "]", ",", "\n", "[", "[", "1.0", ",", "1.0", ",", "1.0", "]", ",", "\n", "[", "2.0", ",", "2.0", ",", "2.0", "]", ",", "\n", "[", "2.0", ",", "2.0", ",", "2.0", "]", ",", "\n", "[", "1.0", ",", "1.0", ",", "1.0", "]", "]", ",", "\n", "[", "[", "1.0", ",", "1.0", ",", "1.0", "]", ",", "\n", "[", "2.0", ",", "2.0", ",", "2.0", "]", ",", "\n", "[", "2.0", ",", "2.0", ",", "2.0", "]", ",", "\n", "[", "1.0", ",", "1.0", ",", "1.0", "]", "]", ",", "\n", "[", "[", "0.5", ",", "0.5", ",", "0.5", "]", ",", "\n", "[", "1.0", ",", "1.0", ",", "1.0", "]", ",", "\n", "[", "1.0", ",", "1.0", ",", "1.0", "]", ",", "\n", "[", "0.5", ",", "0.5", ",", "0.5", "]", "]", "]", "\n", "dfdx_truth", "=", "np", ".", "array", "(", "dfdx_truth", ")", "\n", "np", ".", "testing", ".", "assert_array_almost_equal", "(", "grads", "[", "\"dfdx\"", "]", ",", "\n", "dfdx_truth", ",", "\n", "decimal", "=", "1", ",", "\n", "verbose", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.operations.cc_test.CCTest.test_getstate_setstate": [[148, 169], ["fhez.nn.operations.cc.CC", "fhez.nn.operations.cc.CC", "fhez.nn.operations.cc.CC.__getstate__", "fhez.nn.operations.cc.CC.__setstate__", "repr", "fhez.nn.operations.cc.CC.__dict__.items", "isinstance", "numpy.testing.assert_array_almost_equal", "cc_test.CCTest.assertEqual"], "methods", ["home.repos.pwc.inspect_result.DreamingRaven_python-reseal.graph.serialise.Serialise.__getstate__", "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.graph.serialise.Serialise.__setstate__"], ["", "def", "test_getstate_setstate", "(", "self", ")", ":", "\n", "        ", "\"\"\"Check setstate getstate functionality.\"\"\"", "\n", "weights", "=", "self", ".", "filt", "\n", "bias", "=", "self", ".", "bias", "\n", "\n", "obj_dump", "=", "CC", "(", "weights", "=", "weights", ",", "bias", "=", "bias", ",", "stride", "=", "[", "1", ",", "1", ",", "1", "]", ")", "\n", "obj_load", "=", "CC", "(", ")", "\n", "d", "=", "obj_dump", ".", "__getstate__", "(", ")", "\n", "obj_load", ".", "__setstate__", "(", "d", ")", "\n", "repr", "(", "obj_dump", ")", "\n", "# manually comparing each part of our dictionaries as we cant rely on", "\n", "# assertEqual to do the whole dictionary when it comes to multidim", "\n", "# numpy arrays", "\n", "for", "key", ",", "value", "in", "obj_dump", ".", "__dict__", ".", "items", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "value", ",", "np", ".", "ndarray", ")", ":", "\n", "                ", "np", ".", "testing", ".", "assert_array_almost_equal", "(", "obj_dump", ".", "__dict__", "[", "key", "]", ",", "\n", "value", ",", "\n", "decimal", "=", "1", ",", "\n", "verbose", "=", "True", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "assertEqual", "(", "obj_dump", ".", "__dict__", "[", "key", "]", ",", "value", ")", "\n", "# self.assertEqual(obj_load.__dict__, obj_dump.__dict__)", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.operations.distributor_test.DistributorTest.data_shape": [[15, 19], ["None"], "methods", ["None"], ["@", "property", "\n", "def", "data_shape", "(", "self", ")", ":", "\n", "        ", "\"\"\"Define desired data shape.\"\"\"", "\n", "return", "(", "3", ",", "32", ",", "32", ",", "3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.operations.distributor_test.DistributorTest.data": [[20, 25], ["numpy.random.rand"], "methods", ["None"], ["", "@", "property", "\n", "def", "data", "(", "self", ")", ":", "\n", "        ", "\"\"\"Get some generated data.\"\"\"", "\n", "array", "=", "np", ".", "random", ".", "rand", "(", "*", "self", ".", "data_shape", ")", "\n", "return", "array", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.operations.distributor_test.DistributorTest.reseal_args": [[26, 37], ["pow"], "methods", ["None"], ["", "@", "property", "\n", "def", "reseal_args", "(", "self", ")", ":", "\n", "        ", "\"\"\"Get some reseal arguments for encryption.\"\"\"", "\n", "return", "{", "\n", "\"scheme\"", ":", "2", ",", "# seal.scheme_type.CKK,", "\n", "\"poly_modulus_degree\"", ":", "8192", "*", "2", ",", "# 438", "\n", "# \"coefficient_modulus\": [60, 40, 40, 60],", "\n", "\"coefficient_modulus\"", ":", "\n", "[", "45", ",", "30", ",", "30", ",", "30", ",", "30", ",", "30", ",", "30", ",", "30", ",", "30", ",", "30", ",", "30", ",", "45", "]", ",", "\n", "\"scale\"", ":", "pow", "(", "2.0", ",", "30", ")", ",", "\n", "\"cache\"", ":", "True", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.operations.distributor_test.DistributorTest.setUp": [[39, 44], ["time.time"], "methods", ["None"], ["", "def", "setUp", "(", "self", ")", ":", "\n", "        ", "\"\"\"Start timer and init variables.\"\"\"", "\n", "self", ".", "weights", "=", "(", "1", ",", ")", "# if tuple allows cnn to initialise itself", "\n", "\n", "self", ".", "startTime", "=", "time", ".", "time", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.operations.distributor_test.DistributorTest.tearDown": [[45, 49], ["print", "time.time", "distributor_test.DistributorTest.id"], "methods", ["None"], ["", "def", "tearDown", "(", "self", ")", ":", "\n", "        ", "\"\"\"Calculate and print time delta.\"\"\"", "\n", "t", "=", "time", ".", "time", "(", ")", "-", "self", ".", "startTime", "\n", "print", "(", "'%s: %.3f'", "%", "(", "self", ".", "id", "(", ")", ",", "t", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.operations.distributor_test.DistributorTest.test_init": [[50, 53], ["fhez.nn.operations.distributor.Distributor"], "methods", ["None"], ["", "def", "test_init", "(", "self", ")", ":", "\n", "        ", "\"\"\"Test enque initialisation.\"\"\"", "\n", "Distributor", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.operations.distributor_test.DistributorTest.test_forward": [[54, 61], ["fhez.nn.operations.distributor.Distributor", "fhez.nn.operations.distributor.Distributor.forward", "numpy.testing.assert_array_almost_equal"], "methods", ["home.repos.pwc.inspect_result.DreamingRaven_python-reseal.loss.mse.MSE.forward"], ["", "def", "test_forward", "(", "self", ")", ":", "\n", "        ", "\"\"\"Check distributor distributes as expected.\"\"\"", "\n", "node", "=", "Distributor", "(", ")", "\n", "out", "=", "node", ".", "forward", "(", "[", "1", ",", "2", ",", "3", ",", "4", ",", "5", "]", ")", "\n", "np", ".", "testing", ".", "assert_array_almost_equal", "(", "out", ",", "[", "1", ",", "2", ",", "3", ",", "4", ",", "5", "]", ",", "\n", "decimal", "=", "1", ",", "\n", "verbose", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.operations.distributor_test.DistributorTest.test_backward": [[62, 71], ["fhez.nn.operations.distributor.Distributor", "fhez.nn.operations.distributor.Distributor.backward", "distributor_test.DistributorTest.assertEqual", "numpy.testing.assert_array_almost_equal", "numpy.sum"], "methods", ["home.repos.pwc.inspect_result.DreamingRaven_python-reseal.loss.mse.MSE.backward", "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.rearray.ReArray.sum"], ["", "def", "test_backward", "(", "self", ")", ":", "\n", "        ", "\"\"\"Check distributor distributes as expected.\"\"\"", "\n", "node", "=", "Distributor", "(", ")", "\n", "out", "=", "node", ".", "backward", "(", "[", "1", ",", "2", ",", "3", ",", "4", ",", "5", "]", ")", "\n", "self", ".", "assertEqual", "(", "out", ",", "15", ")", "\n", "np", ".", "testing", ".", "assert_array_almost_equal", "(", "out", ",", "np", ".", "sum", "(", "[", "1", ",", "2", ",", "3", ",", "4", ",", "5", "]", ",", "\n", "axis", "=", "0", ")", ",", "\n", "decimal", "=", "1", ",", "\n", "verbose", "=", "True", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.operations.distributor.Distributor.cost": [[13, 17], ["None"], "methods", ["None"], ["@", "property", "\n", "def", "cost", "(", "self", ")", ":", "\n", "        ", "\"\"\".\"\"\"", "\n", "return", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.operations.distributor.Distributor.forward": [[18, 21], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\".\"\"\"", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.operations.distributor.Distributor.backward": [[22, 25], ["numpy.sum"], "methods", ["home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.rearray.ReArray.sum"], ["", "def", "backward", "(", "self", ",", "gradient", ")", ":", "\n", "        ", "\"\"\".\"\"\"", "\n", "return", "np", ".", "sum", "(", "gradient", ",", "axis", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.operations.distributor.Distributor.update": [[26, 29], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ")", ":", "\n", "        ", "\"\"\"Update nothing as accumulation is not parameterisable.\"\"\"", "\n", "return", "NotImplemented", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.operations.distributor.Distributor.updates": [[30, 33], ["None"], "methods", ["None"], ["", "def", "updates", "(", "self", ")", ":", "\n", "        ", "\"\"\"Update nothing as accumulation is not parameterisable.\"\"\"", "\n", "return", "NotImplemented", "\n", "", "", ""]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.operations.topsum_test.TopSumTest.data_shape": [[16, 20], ["None"], "methods", ["None"], ["@", "property", "\n", "def", "data_shape", "(", "self", ")", ":", "\n", "        ", "\"\"\"Define desired data shape.\"\"\"", "\n", "return", "(", "3", ",", "32", ",", "32", ",", "3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.operations.topsum_test.TopSumTest.data": [[21, 26], ["numpy.random.rand"], "methods", ["None"], ["", "@", "property", "\n", "def", "data", "(", "self", ")", ":", "\n", "        ", "\"\"\"Get some generated data.\"\"\"", "\n", "array", "=", "np", ".", "random", ".", "rand", "(", "*", "self", ".", "data_shape", ")", "\n", "return", "array", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.operations.topsum_test.TopSumTest.reseal_args": [[27, 38], ["pow"], "methods", ["None"], ["", "@", "property", "\n", "def", "reseal_args", "(", "self", ")", ":", "\n", "        ", "\"\"\"Get some reseal arguments for encryption.\"\"\"", "\n", "return", "{", "\n", "\"scheme\"", ":", "2", ",", "# seal.scheme_type.CKK,", "\n", "\"poly_modulus_degree\"", ":", "8192", "*", "2", ",", "# 438", "\n", "# \"coefficient_modulus\": [60, 40, 40, 60],", "\n", "\"coefficient_modulus\"", ":", "\n", "[", "45", ",", "30", ",", "30", ",", "30", ",", "30", ",", "30", ",", "30", ",", "30", ",", "30", ",", "30", ",", "30", ",", "45", "]", ",", "\n", "\"scale\"", ":", "pow", "(", "2.0", ",", "30", ")", ",", "\n", "\"cache\"", ":", "True", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.operations.topsum_test.TopSumTest.setUp": [[40, 45], ["time.time"], "methods", ["None"], ["", "def", "setUp", "(", "self", ")", ":", "\n", "        ", "\"\"\"Start timer and init variables.\"\"\"", "\n", "self", ".", "weights", "=", "(", "1", ",", ")", "# if tuple allows cnn to initialise itself", "\n", "\n", "self", ".", "startTime", "=", "time", ".", "time", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.operations.topsum_test.TopSumTest.tearDown": [[46, 50], ["print", "time.time", "topsum_test.TopSumTest.id"], "methods", ["None"], ["", "def", "tearDown", "(", "self", ")", ":", "\n", "        ", "\"\"\"Calculate and print time delta.\"\"\"", "\n", "t", "=", "time", ".", "time", "(", ")", "-", "self", ".", "startTime", "\n", "print", "(", "'%s: %.3f'", "%", "(", "self", ".", "id", "(", ")", ",", "t", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.operations.topsum_test.TopSumTest.test_test": [[51, 55], ["topsum_test.TopSumTest.assertEqual"], "methods", ["None"], ["", "def", "test_test", "(", "self", ")", ":", "\n", "        ", "\"\"\"Check our testing values meet requirements.\"\"\"", "\n", "# check data is the shape we desire/ gave it to generate", "\n", "self", ".", "assertEqual", "(", "self", ".", "data", ".", "shape", ",", "self", ".", "data_shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.operations.topsum_test.TopSumTest.test_init": [[56, 59], ["fhez.nn.operations.topsum.TopSum"], "methods", ["None"], ["", "def", "test_init", "(", "self", ")", ":", "\n", "        ", "\"\"\"Check object initialisation.\"\"\"", "\n", "TopSum", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.operations.topsum_test.TopSumTest.test_forward": [[60, 69], ["fhez.nn.operations.topsum.TopSum", "fhez.nn.operations.topsum.TopSum.forward", "numpy.sum", "numpy.testing.assert_array_almost_equal"], "methods", ["home.repos.pwc.inspect_result.DreamingRaven_python-reseal.loss.mse.MSE.forward", "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.rearray.ReArray.sum"], ["", "def", "test_forward", "(", "self", ")", ":", "\n", "        ", "\"\"\"Check sum forward pass activation correct.\"\"\"", "\n", "s", "=", "TopSum", "(", ")", "\n", "d", "=", "self", ".", "data", "\n", "a", "=", "s", ".", "forward", "(", "x", "=", "d", ")", "\n", "truth", "=", "np", ".", "sum", "(", "d", ",", "axis", "=", "0", ")", "\n", "np", ".", "testing", ".", "assert_array_almost_equal", "(", "a", ",", "truth", ",", "\n", "decimal", "=", "1", ",", "\n", "verbose", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.operations.topsum_test.TopSumTest.test_backward": [[70, 81], ["fhez.nn.operations.topsum.TopSum", "fhez.nn.operations.topsum.TopSum.forward", "fhez.nn.operations.topsum.TopSum.backward", "topsum_test.TopSumTest.assertEqual", "numpy.ones", "numpy.testing.assert_array_almost_equal", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.DreamingRaven_python-reseal.loss.mse.MSE.forward", "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.loss.mse.MSE.backward"], ["", "def", "test_backward", "(", "self", ")", ":", "\n", "        ", "\"\"\"Check sum backward pass gradients correct.\"\"\"", "\n", "s", "=", "TopSum", "(", ")", "\n", "d", "=", "self", ".", "data", "\n", "s", ".", "forward", "(", "x", "=", "d", ")", "\n", "grads", "=", "s", ".", "backward", "(", "gradient", "=", "1", ")", "\n", "self", ".", "assertEqual", "(", "len", "(", "grads", ")", ",", "len", "(", "d", ")", ")", "\n", "truth", "=", "np", ".", "ones", "(", "(", "len", "(", "d", ")", ",", ")", ")", "\n", "np", ".", "testing", ".", "assert_array_almost_equal", "(", "grads", ",", "truth", ",", "\n", "decimal", "=", "1", ",", "\n", "verbose", "=", "True", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.operations.selector_test.SelectorTest.data_shape": [[15, 19], ["None"], "methods", ["None"], ["@", "property", "\n", "def", "data_shape", "(", "self", ")", ":", "\n", "        ", "\"\"\"Define desired data shape.\"\"\"", "\n", "return", "(", "3", ",", "32", ",", "32", ",", "3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.operations.selector_test.SelectorTest.data": [[20, 25], ["numpy.random.rand"], "methods", ["None"], ["", "@", "property", "\n", "def", "data", "(", "self", ")", ":", "\n", "        ", "\"\"\"Get some generated data.\"\"\"", "\n", "array", "=", "np", ".", "random", ".", "rand", "(", "*", "self", ".", "data_shape", ")", "\n", "return", "array", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.operations.selector_test.SelectorTest.reseal_args": [[26, 37], ["pow"], "methods", ["None"], ["", "@", "property", "\n", "def", "reseal_args", "(", "self", ")", ":", "\n", "        ", "\"\"\"Get some reseal arguments for encryption.\"\"\"", "\n", "return", "{", "\n", "\"scheme\"", ":", "2", ",", "# seal.scheme_type.CKK,", "\n", "\"poly_modulus_degree\"", ":", "8192", "*", "2", ",", "# 438", "\n", "# \"coefficient_modulus\": [60, 40, 40, 60],", "\n", "\"coefficient_modulus\"", ":", "\n", "[", "45", ",", "30", ",", "30", ",", "30", ",", "30", ",", "30", ",", "30", ",", "30", ",", "30", ",", "30", ",", "30", ",", "45", "]", ",", "\n", "\"scale\"", ":", "pow", "(", "2.0", ",", "30", ")", ",", "\n", "\"cache\"", ":", "True", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.operations.selector_test.SelectorTest.setUp": [[39, 44], ["time.time"], "methods", ["None"], ["", "def", "setUp", "(", "self", ")", ":", "\n", "        ", "\"\"\"Start timer and init variables.\"\"\"", "\n", "self", ".", "weights", "=", "(", "1", ",", ")", "# if tuple allows cnn to initialise itself", "\n", "\n", "self", ".", "startTime", "=", "time", ".", "time", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.operations.selector_test.SelectorTest.tearDown": [[45, 49], ["print", "time.time", "selector_test.SelectorTest.id"], "methods", ["None"], ["", "def", "tearDown", "(", "self", ")", ":", "\n", "        ", "\"\"\"Calculate and print time delta.\"\"\"", "\n", "t", "=", "time", ".", "time", "(", ")", "-", "self", ".", "startTime", "\n", "print", "(", "'%s: %.3f'", "%", "(", "self", ".", "id", "(", ")", ",", "t", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.operations.selector_test.SelectorTest.test_forward_selection": [[50, 58], ["fhez.nn.operations.selector.Selector", "fhez.nn.operations.selector.Selector.forward", "selector_test.SelectorTest.assertEqual", "numpy.testing.assert_array_almost_equal", "tuple", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.DreamingRaven_python-reseal.loss.mse.MSE.forward"], ["", "def", "test_forward_selection", "(", "self", ")", ":", "\n", "        ", "\"\"\"Check selection of forward only passing desired.\"\"\"", "\n", "node", "=", "Selector", "(", "forward", "=", "[", "False", ",", "True", "]", ")", "\n", "out", "=", "node", ".", "forward", "(", "x", "=", "[", "5", ",", "6", "]", ")", "\n", "self", ".", "assertEqual", "(", "np", ".", "array", "(", "out", ")", ".", "shape", ",", "tuple", "(", ")", ")", "\n", "np", ".", "testing", ".", "assert_array_almost_equal", "(", "out", ",", "6", ",", "\n", "decimal", "=", "1", ",", "\n", "verbose", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.operations.selector_test.SelectorTest.test_forward_selection_multidim": [[59, 67], ["fhez.nn.operations.selector.Selector", "fhez.nn.operations.selector.Selector.forward", "selector_test.SelectorTest.assertEqual", "numpy.testing.assert_array_almost_equal", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.DreamingRaven_python-reseal.loss.mse.MSE.forward"], ["", "def", "test_forward_selection_multidim", "(", "self", ")", ":", "\n", "        ", "\"\"\"Check selection of forward only passing desired.\"\"\"", "\n", "node", "=", "Selector", "(", "forward", "=", "[", "False", ",", "True", "]", ")", "\n", "out", "=", "node", ".", "forward", "(", "x", "=", "[", "[", "4", ",", "5", "]", ",", "[", "6", ",", "7", "]", "]", ")", "\n", "self", ".", "assertEqual", "(", "np", ".", "array", "(", "out", ")", ".", "shape", ",", "(", "2", ",", ")", ")", "\n", "np", ".", "testing", ".", "assert_array_almost_equal", "(", "out", ",", "[", "6", ",", "7", "]", ",", "\n", "decimal", "=", "1", ",", "\n", "verbose", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.operations.selector_test.SelectorTest.test_backward_selection": [[68, 77], ["fhez.nn.operations.selector.Selector", "fhez.nn.operations.selector.Selector.forward", "fhez.nn.operations.selector.Selector.backward", "selector_test.SelectorTest.assertEqual", "numpy.testing.assert_array_almost_equal", "tuple", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.DreamingRaven_python-reseal.loss.mse.MSE.forward", "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.loss.mse.MSE.backward"], ["", "def", "test_backward_selection", "(", "self", ")", ":", "\n", "        ", "\"\"\"Check selection of backward signals only passing desired.\"\"\"", "\n", "node", "=", "Selector", "(", "backward", "=", "[", "False", ",", "True", "]", ")", "\n", "node", ".", "forward", "(", "x", "=", "[", "5.0", ",", "6.0", "]", ")", "\n", "out", "=", "node", ".", "backward", "(", "gradient", "=", "[", "7.0", ",", "8.0", "]", ")", "\n", "self", ".", "assertEqual", "(", "np", ".", "array", "(", "out", ")", ".", "shape", ",", "tuple", "(", ")", ")", "\n", "np", ".", "testing", ".", "assert_array_almost_equal", "(", "out", ",", "8", ",", "\n", "decimal", "=", "1", ",", "\n", "verbose", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.operations.selector_test.SelectorTest.test_forward_selection_none": [[78, 86], ["fhez.nn.operations.selector.Selector", "fhez.nn.operations.selector.Selector.forward", "selector_test.SelectorTest.assertEqual", "numpy.testing.assert_array_almost_equal", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.DreamingRaven_python-reseal.loss.mse.MSE.forward"], ["", "def", "test_forward_selection_none", "(", "self", ")", ":", "\n", "        ", "\"\"\"Check selection of forward only passing desired.\"\"\"", "\n", "node", "=", "Selector", "(", ")", "\n", "out", "=", "node", ".", "forward", "(", "x", "=", "[", "5.0", ",", "6.0", "]", ")", "\n", "self", ".", "assertEqual", "(", "np", ".", "array", "(", "out", ")", ".", "shape", ",", "(", "2", ",", ")", ")", "\n", "np", ".", "testing", ".", "assert_array_almost_equal", "(", "out", ",", "[", "5", ",", "6", "]", ",", "\n", "decimal", "=", "1", ",", "\n", "verbose", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.operations.selector_test.SelectorTest.test_backward_selection_none": [[87, 96], ["fhez.nn.operations.selector.Selector", "fhez.nn.operations.selector.Selector.forward", "fhez.nn.operations.selector.Selector.backward", "selector_test.SelectorTest.assertEqual", "numpy.testing.assert_array_almost_equal", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.DreamingRaven_python-reseal.loss.mse.MSE.forward", "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.loss.mse.MSE.backward"], ["", "def", "test_backward_selection_none", "(", "self", ")", ":", "\n", "        ", "\"\"\"Check selection of backward signals only passing desired.\"\"\"", "\n", "node", "=", "Selector", "(", ")", "\n", "node", ".", "forward", "(", "x", "=", "[", "5", ",", "6", "]", ")", "\n", "out", "=", "node", ".", "backward", "(", "gradient", "=", "[", "7", ",", "8", "]", ")", "\n", "self", ".", "assertEqual", "(", "np", ".", "array", "(", "out", ")", ".", "shape", ",", "(", "2", ",", ")", ")", "\n", "np", ".", "testing", ".", "assert_array_almost_equal", "(", "out", ",", "[", "7", ",", "8", "]", ",", "\n", "decimal", "=", "1", ",", "\n", "verbose", "=", "True", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.operations.selector.Selector.__init__": [[15, 19], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "forward", "=", "None", ",", "backward", "=", "None", ")", ":", "\n", "        ", "\"\"\"Given lists of ones and zeroes select inputs to outputs per func.\"\"\"", "\n", "self", ".", "_forward", "=", "forward", "\n", "self", ".", "_backward", "=", "backward", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.operations.selector.Selector.forward_selection": [[20, 24], ["selector.Selector.__dict__.get"], "methods", ["None"], ["", "@", "property", "\n", "def", "forward_selection", "(", "self", ")", ":", "\n", "        ", "\"\"\"Get a zeroes and ones list of inputs to pass forward.\"\"\"", "\n", "return", "self", ".", "__dict__", ".", "get", "(", "\"_forward\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.operations.selector.Selector.backward_selection": [[25, 29], ["selector.Selector.__dict__.get"], "methods", ["None"], ["", "@", "property", "\n", "def", "backward_selection", "(", "self", ")", ":", "\n", "        ", "\"\"\"Get a zeroes and ones list of gradients to pass backward.\"\"\"", "\n", "return", "self", ".", "__dict__", ".", "get", "(", "\"_backward\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.operations.selector.Selector.forward": [[30, 40], ["list", "itertools.compress", "len"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\".\"\"\"", "\n", "if", "self", ".", "forward_selection", "is", "None", ":", "\n", "            ", "return", "x", "\n", "", "else", ":", "\n", "            ", "t", "=", "list", "(", "itertools", ".", "compress", "(", "x", ",", "self", ".", "forward_selection", ")", ")", "\n", "if", "len", "(", "t", ")", "==", "1", ":", "\n", "                ", "return", "t", "[", "0", "]", "\n", "", "else", ":", "\n", "                ", "return", "t", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.operations.selector.Selector.backward": [[41, 51], ["list", "itertools.compress", "len"], "methods", ["None"], ["", "", "", "def", "backward", "(", "self", ",", "gradient", ")", ":", "\n", "        ", "\"\"\".\"\"\"", "\n", "if", "self", ".", "backward_selection", "is", "None", ":", "\n", "            ", "return", "gradient", "\n", "", "else", ":", "\n", "            ", "t", "=", "list", "(", "itertools", ".", "compress", "(", "gradient", ",", "self", ".", "backward_selection", ")", ")", "\n", "if", "len", "(", "t", ")", "==", "1", ":", "\n", "                ", "return", "t", "[", "0", "]", "\n", "", "else", ":", "\n", "                ", "return", "t", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.operations.selector.Selector.cost": [[52, 56], ["None"], "methods", ["None"], ["", "", "", "@", "property", "\n", "def", "cost", "(", "self", ")", ":", "\n", "        ", "\"\"\"Get computational cost of this node.\"\"\"", "\n", "return", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.operations.selector.Selector.update": [[57, 60], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ")", ":", "\n", "        ", "\"\"\"Do nothing since selector is not parameterisable.\"\"\"", "\n", "return", "NotImplemented", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.operations.selector.Selector.updates": [[61, 64], ["None"], "methods", ["None"], ["", "def", "updates", "(", "self", ")", ":", "\n", "        ", "\"\"\"Do nothing since selector is not parameterisable.\"\"\"", "\n", "return", "NotImplemented", "\n", "", "", ""]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.operations.one_hot_encode_test.OneHotEncodeTest.data_shape": [[17, 21], ["None"], "methods", ["None"], ["@", "property", "\n", "def", "data_shape", "(", "self", ")", ":", "\n", "        ", "\"\"\"Define desired data shape.\"\"\"", "\n", "return", "(", "3", ",", "32", ",", "32", ",", "3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.operations.one_hot_encode_test.OneHotEncodeTest.data": [[22, 27], ["numpy.random.rand"], "methods", ["None"], ["", "@", "property", "\n", "def", "data", "(", "self", ")", ":", "\n", "        ", "\"\"\"Get some generated data.\"\"\"", "\n", "array", "=", "np", ".", "random", ".", "rand", "(", "*", "self", ".", "data_shape", ")", "\n", "return", "array", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.operations.one_hot_encode_test.OneHotEncodeTest.reseal_args": [[28, 39], ["pow"], "methods", ["None"], ["", "@", "property", "\n", "def", "reseal_args", "(", "self", ")", ":", "\n", "        ", "\"\"\"Get some reseal arguments for encryption.\"\"\"", "\n", "return", "{", "\n", "\"scheme\"", ":", "2", ",", "# seal.scheme_type.CKK,", "\n", "\"poly_modulus_degree\"", ":", "8192", "*", "2", ",", "# 438", "\n", "# \"coefficient_modulus\": [60, 40, 40, 60],", "\n", "\"coefficient_modulus\"", ":", "\n", "[", "45", ",", "30", ",", "30", ",", "30", ",", "30", ",", "30", ",", "30", ",", "30", ",", "30", ",", "30", ",", "30", ",", "45", "]", ",", "\n", "\"scale\"", ":", "pow", "(", "2.0", ",", "30", ")", ",", "\n", "\"cache\"", ":", "True", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.operations.one_hot_encode_test.OneHotEncodeTest.setUp": [[41, 44], ["time.time"], "methods", ["None"], ["", "def", "setUp", "(", "self", ")", ":", "\n", "        ", "\"\"\"Start timer and init variables.\"\"\"", "\n", "self", ".", "startTime", "=", "time", ".", "time", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.operations.one_hot_encode_test.OneHotEncodeTest.tearDown": [[45, 49], ["print", "time.time", "one_hot_encode_test.OneHotEncodeTest.id"], "methods", ["None"], ["", "def", "tearDown", "(", "self", ")", ":", "\n", "        ", "\"\"\"Calculate and print time delta.\"\"\"", "\n", "t", "=", "time", ".", "time", "(", ")", "-", "self", ".", "startTime", "\n", "print", "(", "'%s: %.3f'", "%", "(", "self", ".", "id", "(", ")", ",", "t", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.operations.one_hot_encode_test.OneHotEncodeTest.test_init": [[50, 56], ["fhez.nn.operations.one_hot_encode.OneHotEncode", "one_hot_encode_test.OneHotEncodeTest.assertIsInstance", "one_hot_encode_test.OneHotEncodeTest.assertEqual"], "methods", ["None"], ["", "def", "test_init", "(", "self", ")", ":", "\n", "        ", "\"\"\"Check object is initialised properly.\"\"\"", "\n", "classes", "=", "2", "\n", "encoder", "=", "OneHotEncode", "(", "length", "=", "classes", ")", "\n", "self", ".", "assertIsInstance", "(", "encoder", ",", "OneHotEncode", ")", "\n", "self", ".", "assertEqual", "(", "encoder", ".", "length", ",", "classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.operations.one_hot_encode_test.OneHotEncodeTest.test_forward": [[57, 67], ["fhez.nn.operations.one_hot_encode.OneHotEncode", "fhez.nn.operations.one_hot_encode.OneHotEncode.forward", "numpy.zeros", "numpy.testing.assert_array_almost_equal"], "methods", ["home.repos.pwc.inspect_result.DreamingRaven_python-reseal.loss.mse.MSE.forward"], ["", "def", "test_forward", "(", "self", ")", ":", "\n", "        ", "\"\"\"Check encoding forward pass working as expected.\"\"\"", "\n", "encoder", "=", "OneHotEncode", "(", "length", "=", "5", ")", "\n", "clss", "=", "2", "\n", "encoded", "=", "encoder", ".", "forward", "(", "clss", ")", "\n", "truth", "=", "np", ".", "zeros", "(", "5", ")", "\n", "truth", "[", "clss", "]", "=", "1", "\n", "np", ".", "testing", ".", "assert_array_almost_equal", "(", "encoded", ",", "truth", ",", "\n", "decimal", "=", "1", ",", "\n", "verbose", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.operations.one_hot_encode_test.OneHotEncodeTest.test_backward": [[68, 79], ["fhez.nn.operations.one_hot_encode.OneHotEncode", "fhez.nn.operations.one_hot_encode.OneHotEncode.forward", "numpy.zeros", "fhez.nn.operations.one_hot_encode.OneHotEncode.backward", "numpy.testing.assert_array_almost_equal", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.DreamingRaven_python-reseal.loss.mse.MSE.forward", "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.loss.mse.MSE.backward"], ["", "def", "test_backward", "(", "self", ")", ":", "\n", "        ", "\"\"\"Check only one hot gradient is being returned.\"\"\"", "\n", "encoder", "=", "OneHotEncode", "(", "length", "=", "5", ")", "\n", "clss", "=", "2", "\n", "encoder", ".", "forward", "(", "clss", ")", "\n", "gradient", "=", "np", ".", "zeros", "(", "5", ")", "\n", "gradient", "[", "clss", "]", "=", "1", "\n", "out", "=", "encoder", ".", "backward", "(", "gradient", ")", "\n", "np", ".", "testing", ".", "assert_array_almost_equal", "(", "out", ",", "np", ".", "array", "(", "[", "1", "]", ")", ",", "\n", "decimal", "=", "1", ",", "\n", "verbose", "=", "True", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.operations.enqueue.Enqueue.__init__": [[29, 33], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "length", "=", "None", ")", ":", "\n", "        ", "\"\"\"Configure enqueue initialised state.\"\"\"", "\n", "if", "length", "is", "not", "None", ":", "\n", "            ", "self", ".", "length", "=", "length", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.operations.enqueue.Enqueue.length": [[39, 43], ["None"], "methods", ["None"], ["", "@", "length", ".", "setter", "\n", "def", "length", "(", "self", ",", "length", ":", "int", ")", ":", "\n", "        ", "\"\"\"Set the desired/ target length of the queue.\"\"\"", "\n", "self", ".", "_desired_length", "=", "length", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.operations.enqueue.Enqueue.queue": [[51, 54], ["None"], "methods", ["None"], ["", "@", "queue", ".", "setter", "\n", "def", "queue", "(", "self", ",", "queue", ")", ":", "\n", "        ", "self", ".", "_queue", "=", "queue", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.operations.enqueue.Enqueue.cost": [[55, 59], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "cost", "(", "self", ")", ":", "\n", "        ", "\"\"\"Get **0** cost for enqueueing arrays.\"\"\"", "\n", "return", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.operations.enqueue.Enqueue.forward": [[60, 69], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"Accumulate inputs into a single queue, then return when full.\"\"\"", "\n", "# self.queue.append(x)", "\n", "# if len(self.queue) == self.length:", "\n", "#     out = list(self.queue)", "\n", "#     self.queue = None", "\n", "#     return out", "\n", "# return None", "\n", "return", "x", "# graph traversal algorithm automagically enqueues for us", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.operations.enqueue.Enqueue.backward": [[70, 90], ["collections.deque", "range", "len", "len", "len", "collections.deque.popleft"], "methods", ["None"], ["", "def", "backward", "(", "self", ",", "gradient", ")", ":", "\n", "        ", "\"\"\"Distribute gradient to respective inputs in order via yield.\n\n        Effectiveley backward is a dequeue but for gradients.\n\n        .. warning::\n\n            This **YIELDS** gradients unlike most nodes, requiring special\n            logic by a network traverser, only getting one input but\n            results in many outputs.\n        \"\"\"", "\n", "msg", "=", "\"length gradient ({}) != self.length ({})\"", ".", "format", "(", "\n", "len", "(", "gradient", ")", ",", "self", ".", "length", ")", "\n", "assert", "len", "(", "gradient", ")", "==", "self", ".", "length", ",", "msg", "\n", "queue", "=", "deque", "(", "gradient", ")", "\n", "# I dont want to traverse queue as iterator so will use slightly faster", "\n", "# length of queue instead so we can rely on queues heavy internal", "\n", "# optimisation.", "\n", "for", "_", "in", "range", "(", "len", "(", "queue", ")", ")", ":", "\n", "            ", "yield", "queue", ".", "popleft", "(", ")", "# yield dequeued gradient FIFO", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.operations.enqueue.Enqueue.update": [[91, 94], ["None"], "methods", ["None"], ["", "", "def", "update", "(", "self", ")", ":", "\n", "        ", "\"\"\"Update nothing as enqueueing is not parameterisable.\"\"\"", "\n", "return", "NotImplemented", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.operations.enqueue.Enqueue.updates": [[95, 98], ["None"], "methods", ["None"], ["", "def", "updates", "(", "self", ")", ":", "\n", "        ", "\"\"\"Update nothing as enqueueing is not parameterisable.\"\"\"", "\n", "return", "NotImplemented", "\n", "", "", ""]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.operations.decrypt.Decrypt.cost": [[14, 18], ["None"], "methods", ["None"], ["@", "property", "\n", "def", "cost", "(", "self", ")", ":", "\n", "        ", "\"\"\"Return no depth/ cost/ **0** of decryption.\"\"\"", "\n", "return", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.operations.decrypt.Decrypt.forward": [[19, 22], ["numpy.array"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"Decrypt cyphertext using numpy ufunc API.\"\"\"", "\n", "return", "np", ".", "array", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.operations.decrypt.Decrypt.backward": [[23, 26], ["None"], "methods", ["None"], ["", "def", "backward", "(", "self", ",", "gradient", ")", ":", "\n", "        ", "\"\"\"Pass gradients back unmodified.\"\"\"", "\n", "return", "gradient", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.operations.decrypt.Decrypt.update": [[27, 30], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ")", ":", "\n", "        ", "\"\"\"Do nothing as decryption has no deep-learning parameterisation.\"\"\"", "\n", "return", "NotImplemented", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.operations.decrypt.Decrypt.updates": [[31, 34], ["None"], "methods", ["None"], ["", "def", "updates", "(", "self", ")", ":", "\n", "        ", "\"\"\"Do nothing as decryption has no deep-learning parameterisation.\"\"\"", "\n", "return", "NotImplemented", "\n", "", "", ""]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.optimiser.adam_test.AdamTest.setUp": [[19, 22], ["time.time"], "methods", ["None"], ["def", "setUp", "(", "self", ")", ":", "\n", "        ", "\"\"\"Start timer and init variables.\"\"\"", "\n", "self", ".", "start_time", "=", "time", ".", "time", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.optimiser.adam_test.AdamTest.tearDown": [[23, 27], ["print", "time.time", "adam_test.AdamTest.id"], "methods", ["None"], ["", "def", "tearDown", "(", "self", ")", ":", "\n", "        ", "\"\"\"Calculate and print time delta.\"\"\"", "\n", "t", "=", "time", ".", "time", "(", ")", "-", "self", ".", "start_time", "\n", "print", "(", "'%s: %.3f'", "%", "(", "self", ".", "id", "(", ")", ",", "t", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.optimiser.adam_test.AdamTest.linear": [[28, 31], ["None"], "methods", ["None"], ["", "def", "linear", "(", "self", ",", "x", ",", "m", ",", "c", ")", ":", "\n", "        ", "\"\"\"Calculate standard linear function for testing against.\"\"\"", "\n", "return", "(", "m", "*", "x", ")", "+", "c", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.optimiser.adam_test.AdamTest.test_init": [[32, 41], ["fhez.nn.optimiser.adam.Adam", "adam_test.AdamTest.assertIsInstance", "adam_test.AdamTest.assertIsInstance", "adam_test.AdamTest.assertIsInstance", "adam_test.AdamTest.assertIsInstance", "adam_test.AdamTest.assertIsInstance", "adam_test.AdamTest.assertIsInstance"], "methods", ["None"], ["", "def", "test_init", "(", "self", ")", ":", "\n", "        ", "\"\"\"Check Adam can be initialised using defaults.\"\"\"", "\n", "optimiser", "=", "Adam", "(", ")", "\n", "self", ".", "assertIsInstance", "(", "optimiser", ",", "Adam", ")", "\n", "self", ".", "assertIsInstance", "(", "optimiser", ".", "cache", ",", "dict", ")", "\n", "self", ".", "assertIsInstance", "(", "optimiser", ".", "alpha", ",", "float", ")", "\n", "self", ".", "assertIsInstance", "(", "optimiser", ".", "beta_1", ",", "float", ")", "\n", "self", ".", "assertIsInstance", "(", "optimiser", ".", "beta_2", ",", "float", ")", "\n", "self", ".", "assertIsInstance", "(", "optimiser", ".", "epsilon", ",", "float", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.optimiser.adam_test.AdamTest.optimiser": [[42, 45], ["fhez.nn.optimiser.adam.Adam"], "methods", ["None"], ["", "@", "property", "\n", "def", "optimiser", "(", "self", ")", ":", "\n", "        ", "return", "Adam", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.optimiser.adam_test.AdamTest.x": [[46, 49], ["numpy.array"], "methods", ["None"], ["", "@", "property", "\n", "def", "x", "(", "self", ")", ":", "\n", "        ", "return", "np", ".", "array", "(", "[", "2", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.optimiser.adam_test.AdamTest.nn": [[50, 53], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "nn", "(", "self", ")", ":", "\n", "        ", "return", "Linear", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.optimiser.adam_test.AdamTest.lossfunc": [[54, 57], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "lossfunc", "(", "self", ")", ":", "\n", "        ", "return", "MSE", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.optimiser.adam_test.AdamTest.test_optimise": [[58, 86], ["adam_test.AdamTest.lossfunc", "adam_test.AdamTest.nn", "adam_test.AdamTest.nn", "adam_test.AdamTest.forward", "range", "adam_test.AdamTest.assertLess", "adam_test.AdamTest.forward", "adam_test.AdamTest.forward", "adam_test.AdamTest.backward", "adam_test.AdamTest.backward", "adam_test.AdamTest.updates"], "methods", ["home.repos.pwc.inspect_result.DreamingRaven_python-reseal.optimiser.adam_test.AdamTest.lossfunc", "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.optimiser.adam_test.AdamTest.nn", "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.optimiser.adam_test.AdamTest.nn", "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.loss.mse.MSE.forward", "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.loss.mse.MSE.forward", "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.loss.mse.MSE.forward", "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.loss.mse.MSE.backward", "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.loss.mse.MSE.backward", "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.loss.mse.MSE.updates"], ["", "def", "test_optimise", "(", "self", ")", ":", "\n", "        ", "optimiser", "=", "self", ".", "optimiser", "\n", "x", "=", "self", ".", "x", "\n", "lossfunc", "=", "self", ".", "lossfunc", "(", ")", "\n", "parameters", "=", "{", "\n", "\"m\"", ":", "0.4", ",", "\n", "\"c\"", ":", "0.5", "\n", "}", "\n", "truth", "=", "{", "\n", "\"m\"", ":", "0.402", ",", "\n", "\"c\"", ":", "0.5", ",", "\n", "}", "\n", "nn", "=", "self", ".", "nn", "(", "**", "parameters", ",", "optimiser", "=", "optimiser", ")", "\n", "nn_optimal", "=", "self", ".", "nn", "(", "**", "truth", ",", "optimiser", "=", "optimiser", ")", "\n", "y", "=", "nn_optimal", ".", "forward", "(", "x", ")", "\n", "\n", "for", "i", "in", "range", "(", "100", ")", ":", "\n", "# get predicted and optimal output", "\n", "            ", "y_hat", "=", "nn", ".", "forward", "(", "x", ")", "\n", "# calculate the loss and gradient with respect to y_hat", "\n", "loss", "=", "lossfunc", ".", "forward", "(", "y", "=", "y", ",", "y_hat", "=", "y_hat", ")", "\n", "if", "i", "==", "0", ":", "\n", "                ", "original_loss", "=", "loss", "\n", "", "dloss_y_hat", "=", "lossfunc", ".", "backward", "(", "loss", ")", "\n", "nn", ".", "backward", "(", "dloss_y_hat", ")", "\n", "nn", ".", "updates", "(", ")", "# this will now call adam to update its weights", "\n", "# print(\"Adam loss {}, originally {}\".format(loss, original_loss))", "\n", "", "self", ".", "assertLess", "(", "loss", ",", "original_loss", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.optimiser.adam_test.AdamTest.test_momentum": [[87, 124], ["fhez.nn.optimiser.adam.Adam", "adam_test.AdamTest.linear", "adam_test.AdamTest.linear", "fhez.nn.optimiser.adam.Adam.momentum", "adam_test.AdamTest.assertEqual", "adam_test.AdamTest.assertEqual", "adam_test.AdamTest.assertEqual"], "methods", ["home.repos.pwc.inspect_result.DreamingRaven_python-reseal.loss.loss_test.LossTest.linear", "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.loss.loss_test.LossTest.linear", "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.optimiser.adam.Adam.momentum"], ["", "def", "test_momentum", "(", "self", ")", ":", "\n", "        ", "\"\"\"Check Adam 1st moment operating properly, and updating vars.\"\"\"", "\n", "# expresley setting variables so we can KNOW and answer to verify out", "\n", "beta_1", "=", "0.9", "\n", "optimiser", "=", "Adam", "(", "alpha", "=", "0.001", ",", "\n", "beta_1", "=", "beta_1", ",", "\n", "beta_2", "=", "0.999", ",", "\n", "epsilon", "=", "1e-8", ")", "\n", "x", "=", "1", "\n", "parameters", "=", "{", "\n", "\"m\"", ":", "2", ",", "\n", "\"c\"", ":", "3", ",", "\n", "}", "\n", "truth", "=", "{", "\n", "\"m\"", ":", "6", ",", "\n", "\"c\"", ":", "7", ",", "\n", "}", "\n", "# calculate linear result", "\n", "y_hat", "=", "self", ".", "linear", "(", "x", "=", "x", ",", "m", "=", "parameters", "[", "\"m\"", "]", ",", "c", "=", "parameters", "[", "\"c\"", "]", ")", "\n", "# calculate desired result", "\n", "y", "=", "self", ".", "linear", "(", "x", "=", "x", ",", "m", "=", "truth", "[", "\"m\"", "]", ",", "c", "=", "truth", "[", "\"c\"", "]", ")", "\n", "loss", "=", "y", "-", "y_hat", "\n", "gradients", "=", "{", "\n", "\"dfdm\"", ":", "x", "*", "loss", ",", "\n", "\"dfdc\"", ":", "1", "*", "loss", ",", "\n", "}", "\n", "name", "=", "\"m\"", "\n", "m_hat", "=", "optimiser", ".", "momentum", "(", "gradient", "=", "gradients", "[", "\"dfd{}\"", ".", "format", "(", "name", ")", "]", ",", "\n", "param_name", "=", "name", ")", "\n", "\n", "# check that internal state has been modified properly", "\n", "self", ".", "assertEqual", "(", "optimiser", ".", "cache", "[", "name", "]", "[", "\"t_m\"", "]", ",", "2", ")", "\n", "m_true", "=", "(", "beta_1", "*", "0", ")", "+", "(", "1", "-", "beta_1", ")", "*", "gradients", "[", "\"dfd{}\"", ".", "format", "(", "name", ")", "]", "\n", "self", ".", "assertEqual", "(", "optimiser", ".", "cache", "[", "name", "]", "[", "\"m\"", "]", ",", "m_true", ")", "\n", "# check it has returned a correct value", "\n", "m_hat_true", "=", "m_true", "/", "(", "1", "-", "beta_1", "**", "1", ")", "\n", "self", ".", "assertEqual", "(", "m_hat", ",", "m_hat_true", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.optimiser.adam_test.AdamTest.test_rmsprop": [[125, 164], ["fhez.nn.optimiser.adam.Adam", "adam_test.AdamTest.linear", "adam_test.AdamTest.linear", "fhez.nn.optimiser.adam.Adam.rmsprop", "adam_test.AdamTest.assertEqual", "adam_test.AdamTest.assertEqual", "adam_test.AdamTest.assertEqual"], "methods", ["home.repos.pwc.inspect_result.DreamingRaven_python-reseal.loss.loss_test.LossTest.linear", "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.loss.loss_test.LossTest.linear", "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.optimiser.adam.Adam.rmsprop"], ["", "def", "test_rmsprop", "(", "self", ")", ":", "\n", "        ", "\"\"\"Check Adam 2nd moment operating properly, and updating vars.\"\"\"", "\n", "# expresley setting variables so we can KNOW and answer to verify out", "\n", "beta_1", "=", "0.9", "\n", "beta_2", "=", "0.999", "\n", "optimiser", "=", "Adam", "(", "alpha", "=", "0.001", ",", "\n", "beta_1", "=", "beta_1", ",", "\n", "beta_2", "=", "beta_2", ",", "\n", "epsilon", "=", "1e-8", ")", "\n", "x", "=", "1", "\n", "parameters", "=", "{", "\n", "\"m\"", ":", "2", ",", "\n", "\"c\"", ":", "3", ",", "\n", "}", "\n", "truth", "=", "{", "\n", "\"m\"", ":", "6", ",", "\n", "\"c\"", ":", "7", ",", "\n", "}", "\n", "# calculate linear result", "\n", "y_hat", "=", "self", ".", "linear", "(", "x", "=", "x", ",", "m", "=", "parameters", "[", "\"m\"", "]", ",", "c", "=", "parameters", "[", "\"c\"", "]", ")", "\n", "# calculate desired result", "\n", "y", "=", "self", ".", "linear", "(", "x", "=", "x", ",", "m", "=", "truth", "[", "\"m\"", "]", ",", "c", "=", "truth", "[", "\"c\"", "]", ")", "\n", "loss", "=", "y", "-", "y_hat", "\n", "gradients", "=", "{", "\n", "\"dfdm\"", ":", "x", "*", "loss", ",", "\n", "\"dfdc\"", ":", "1", "*", "loss", ",", "\n", "}", "\n", "name", "=", "\"m\"", "\n", "v_hat", "=", "optimiser", ".", "rmsprop", "(", "gradient", "=", "gradients", "[", "\"dfd{}\"", ".", "format", "(", "name", ")", "]", ",", "\n", "param_name", "=", "name", ")", "\n", "\n", "# check that internal state has been modified properly", "\n", "self", ".", "assertEqual", "(", "optimiser", ".", "cache", "[", "name", "]", "[", "\"t_v\"", "]", ",", "2", ")", "\n", "m_true", "=", "(", "beta_1", "*", "0", ")", "+", "(", "1", "-", "beta_2", ")", "*", "gradients", "[", "\"dfd{}\"", ".", "format", "(", "name", ")", "]", "**", "2", "\n", "self", ".", "assertEqual", "(", "optimiser", ".", "cache", "[", "name", "]", "[", "\"v\"", "]", ",", "m_true", ")", "\n", "# check it has returned a correct value", "\n", "m_hat_true", "=", "m_true", "/", "(", "1", "-", "beta_2", "**", "1", ")", "\n", "self", ".", "assertEqual", "(", "v_hat", ",", "m_hat_true", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.optimiser.adam_test.AdamTest.test_getstate_setstate": [[165, 193], ["fhez.nn.optimiser.adam.Adam", "fhez.nn.optimiser.adam.Adam", "fhez.nn.optimiser.adam.Adam.__getstate__", "adam_test.AdamTest.assertIsInstance", "adam_test.AdamTest.assertIsInstance", "fhez.nn.optimiser.adam.Adam.__setstate__", "adam_test.AdamTest.assertTrue", "fhez.nn.optimiser.adam.Adam.__dict__.items", "repr", "isinstance", "numpy.testing.assert_array_almost_equal", "adam_test.AdamTest.assertEqual"], "methods", ["home.repos.pwc.inspect_result.DreamingRaven_python-reseal.graph.serialise.Serialise.__getstate__", "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.graph.serialise.Serialise.__setstate__"], ["", "def", "test_getstate_setstate", "(", "self", ")", ":", "\n", "        ", "\"\"\"Check setstate getstate functionality.\"\"\"", "\n", "obj_dump", "=", "Adam", "(", "alpha", "=", "0.002", ",", "\n", "beta_1", "=", "0.8", ",", "\n", "beta_2", "=", "0.998", ",", "\n", "epsilon", "=", "1e-9", ")", "\n", "obj_load", "=", "Adam", "(", ")", "\n", "# getting simple dictionary representation of class", "\n", "d", "=", "obj_dump", ".", "__getstate__", "(", ")", "\n", "# check is dict properly", "\n", "self", ".", "assertIsInstance", "(", "d", ",", "dict", ")", "\n", "# check repr works properly returning a string", "\n", "self", ".", "assertIsInstance", "(", "repr", "(", "obj_dump", ")", ",", "str", ")", "\n", "# recreate original object in new object", "\n", "obj_load", ".", "__setstate__", "(", "d", ")", "\n", "# check objects are equal", "\n", "self", ".", "assertTrue", "(", "obj_load", ".", "__dict__", "==", "obj_dump", ".", "__dict__", ")", "\n", "# manually comparing each part of our dictionaries as we cant rely on", "\n", "# assertEqual to do the whole dictionary when it comes to multidim", "\n", "# numpy arrays", "\n", "for", "key", ",", "value", "in", "obj_dump", ".", "__dict__", ".", "items", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "value", ",", "np", ".", "ndarray", ")", ":", "\n", "                ", "np", ".", "testing", ".", "assert_array_almost_equal", "(", "obj_dump", ".", "__dict__", "[", "key", "]", ",", "\n", "value", ",", "\n", "decimal", "=", "1", ",", "\n", "verbose", "=", "True", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "assertEqual", "(", "obj_dump", ".", "__dict__", "[", "key", "]", ",", "value", ")", "\n", "", "", "", "", ""]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.optimiser.gd_test.GDTest.setUp": [[17, 20], ["time.time"], "methods", ["None"], ["def", "setUp", "(", "self", ")", ":", "\n", "        ", "\"\"\"Start timer and init variables.\"\"\"", "\n", "self", ".", "start_time", "=", "time", ".", "time", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.optimiser.gd_test.GDTest.tearDown": [[21, 25], ["print", "time.time", "gd_test.GDTest.id"], "methods", ["None"], ["", "def", "tearDown", "(", "self", ")", ":", "\n", "        ", "\"\"\"Calculate and print time delta.\"\"\"", "\n", "t", "=", "time", ".", "time", "(", ")", "-", "self", ".", "start_time", "\n", "print", "(", "'%s: %.3f'", "%", "(", "self", ".", "id", "(", ")", ",", "t", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.optimiser.gd_test.GDTest.test_init": [[26, 30], ["fhez.nn.optimiser.gd.GD", "gd_test.GDTest.assertIsInstance"], "methods", ["None"], ["", "def", "test_init", "(", "self", ")", ":", "\n", "        ", "\"\"\"Check SGD can be initialised using defaults.\"\"\"", "\n", "optimiser", "=", "GD", "(", ")", "\n", "self", ".", "assertIsInstance", "(", "optimiser", ",", "GD", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.optimiser.adam.Adam.__init__": [[30, 40], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "\n", "alpha", ":", "float", "=", "0.001", ",", "\n", "beta_1", ":", "float", "=", "0.9", ",", "\n", "beta_2", ":", "float", "=", "0.999", ",", "\n", "epsilon", ":", "float", "=", "1e-8", ")", ":", "\n", "        ", "\"\"\"Create Adam object with defaults.\"\"\"", "\n", "self", ".", "alpha", "=", "alpha", "\n", "self", ".", "beta_1", "=", "beta_1", "\n", "self", ".", "beta_2", "=", "beta_2", "\n", "self", ".", "epsilon", "=", "epsilon", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.optimiser.adam.Adam.schema": [[41, 64], ["marshmallow.Schema.from_dict", "marshmallow.fields.Float", "marshmallow.fields.Float", "marshmallow.fields.Float", "marshmallow.fields.Float"], "methods", ["None"], ["", "@", "property", "\n", "def", "schema", "(", "self", ")", ":", "\n", "        ", "\"\"\"Get Marshmallow schema representation of this class.\n\n        Marshmallow schemas allow for easy and trustworthy serialisation\n        and deserialisation of arbitrary objects either to inbulit types or\n        json formats. This is an inherited member of the abstract class\n        Serialise.\n\n        .. note::\n\n            Anything not listed here will inevitably be lost, ensure anything\n            important is identified and expressley stated its type and\n            structure.\n        \"\"\"", "\n", "schema_dict", "=", "{", "\n", "\"_alpha\"", ":", "mar", ".", "fields", ".", "Float", "(", ")", ",", "\n", "\"_beta_1\"", ":", "mar", ".", "fields", ".", "Float", "(", ")", ",", "\n", "\"_beta_2\"", ":", "mar", ".", "fields", ".", "Float", "(", ")", ",", "\n", "\"_epsilon\"", ":", "mar", ".", "fields", ".", "Float", "(", ")", ",", "\n", "# \"_cache\": mar.fields.Dict(),", "\n", "}", "\n", "return", "mar", ".", "Schema", ".", "from_dict", "(", "schema_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.optimiser.adam.Adam.alpha": [[78, 82], ["None"], "methods", ["None"], ["", "@", "alpha", ".", "setter", "\n", "def", "alpha", "(", "self", ",", "alpha", ":", "float", ")", ":", "\n", "        ", "\"\"\"Set learning rate hyperparameter.\"\"\"", "\n", "self", ".", "_alpha", "=", "alpha", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.optimiser.adam.Adam.beta_1": [[94, 98], ["None"], "methods", ["None"], ["", "@", "beta_1", ".", "setter", "\n", "def", "beta_1", "(", "self", ",", "beta_1", ":", "float", ")", ":", "\n", "        ", "\"\"\"Set first order moment exponential decay rate.\"\"\"", "\n", "self", ".", "_beta_1", "=", "beta_1", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.optimiser.adam.Adam.beta_2": [[110, 114], ["None"], "methods", ["None"], ["", "@", "beta_2", ".", "setter", "\n", "def", "beta_2", "(", "self", ",", "beta_2", ":", "float", ")", ":", "\n", "        ", "\"\"\"Set second order moment exponential decay rate.\"\"\"", "\n", "self", ".", "_beta_2", "=", "beta_2", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.optimiser.adam.Adam.epsilon": [[130, 137], ["None"], "methods", ["None"], ["", "@", "epsilon", ".", "setter", "\n", "def", "epsilon", "(", "self", ",", "epsilon", ":", "float", ")", ":", "\n", "        ", "r\"\"\"Epsilon :math:`\\epsilon` smoothing term.\n\n        :math:`\\epsilon` is meant to smooth and prevent division by zero.\n        \"\"\"", "\n", "self", ".", "_epsilon", "=", "epsilon", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.optimiser.adam.Adam.cache": [[152, 155], ["None"], "methods", ["None"], ["", "@", "cache", ".", "setter", "\n", "def", "cache", "(", "self", ",", "cache", ")", ":", "\n", "        ", "self", ".", "_cache", "=", "cache", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.optimiser.adam.Adam.momentum": [[158, 226], ["adam.Adam.cache.get", "adam.Adam.cache[].get", "adam.Adam.cache[].get", "adam.Adam.cache[].get", "adam.Adam.cache[].get"], "methods", ["None"], ["", "def", "momentum", "(", "self", ",", "gradient", ":", "float", ",", "param_name", ":", "str", ",", "ord", ":", "int", "=", "1", ")", ":", "\n", "        ", "r\"\"\"Calculate momentum, of a single parameter-category/ name.\n\n        This function can calculate either 1st order momentum or 2nd order\n        momentum (rmsprop) since they are both almost identical.\n\n        where moment is 1 (I.E first order):\n\n        - current moment :math:`m_t = \\beta_1 * m_{t-1} + (1-\\beta_1) * g_t`\n\n        - decayed moment :math:`\\hat{m_t} = \\frac{m_t}{1 \u2013 \\beta_1^t}`\n\n        where moment is 2 (I.E second order/ RMSprop):\n\n        - current moment :math:`v_t = \\beta_2 * v_{t-1} + (1-\\beta_2) * g_t^2`\n\n        - decayed moment :math:`\\hat{v_t} = \\frac{v_t}{1 \u2013 \\beta_2^t}`\n\n        Steps taken:\n\n        - retrieve previous momentum from cache dictionary using key\n          (param_name) and number of iterations\n\n        - calculate current momentum using previous momentum:\n\n        - Save current momentum into cache dictionary using key\n\n        - calculate current momentum correction/ decay:\n\n        - return decayed momentum\n\n        :arg gradient: gradient at current timestep, usually minibatch\n        :arg param_name: key used to look up parameters in m_t dictionary\n        :arg ord: the order of momentum to calculate defaults to 1\n        :type gradient: float\n        :type param_name: str\n        :type ord: int\n        :return: :math:`\\hat{m_t}` corrected/ averaged momentum of order ord\n        :rtype: float\n        :example: Adam().momentum(gradient=100, param_name=\"w\", ord=1)\n        \"\"\"", "\n", "# sanity check to ensure key in dictionary", "\n", "if", "self", ".", "cache", ".", "get", "(", "param_name", ")", "is", "None", ":", "\n", "            ", "self", ".", "cache", "[", "param_name", "]", "=", "{", "}", "\n", "# retrieve number of iterations", "\n", "", "i", "=", "self", ".", "cache", "[", "param_name", "]", ".", "get", "(", "\"t_m\"", ")", "if", "ord", "==", "1", "else", "self", ".", "cache", "[", "param_name", "]", ".", "get", "(", "\"t_v\"", ")", "\n", "i", "=", "i", "if", "i", "is", "not", "None", "else", "1", "# starts from 1", "\n", "# retrieve previous momentum m_{t-1}", "\n", "m_prev", "=", "self", ".", "cache", "[", "param_name", "]", ".", "get", "(", "\"m\"", ")", "if", "ord", "==", "1", "else", "self", ".", "cache", "[", "param_name", "]", ".", "get", "(", "\"v\"", ")", "\n", "m_prev", "=", "m_prev", "if", "m_prev", "is", "not", "None", "else", "0", "\n", "# get beta we are using here", "\n", "beta", "=", "self", ".", "beta_1", "if", "ord", "==", "1", "else", "self", ".", "beta_2", "\n", "# multiply gradient if ord = 2", "\n", "gradient", "=", "gradient", "if", "ord", "==", "1", "else", "(", "gradient", "*", "gradient", ")", "\n", "\n", "# calculate momentum", "\n", "m_t", "=", "(", "beta", "*", "m_prev", ")", "+", "(", "(", "1", "-", "beta", ")", "*", "gradient", ")", "\n", "# calculate momentum-correction", "\n", "m_hat", "=", "m_t", "/", "(", "1", "-", "beta", "**", "i", ")", "\n", "\n", "# save non corrected current momentum back", "\n", "self", ".", "cache", "[", "param_name", "]", "[", "\"m\"", "if", "ord", "==", "1", "else", "\"v\"", "]", "=", "m_t", "\n", "# increment number of specific iterations of this function", "\n", "self", ".", "cache", "[", "param_name", "]", "[", "\"t_m\"", "if", "ord", "==", "1", "else", "\"t_v\"", "]", "=", "i", "+", "1", "\n", "# return \\hat{m_t} corrected/ averaged momentum", "\n", "return", "m_hat", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.optimiser.adam.Adam.rmsprop": [[227, 230], ["adam.Adam.momentum"], "methods", ["home.repos.pwc.inspect_result.DreamingRaven_python-reseal.optimiser.adam.Adam.momentum"], ["", "def", "rmsprop", "(", "self", ",", "gradient", ":", "float", ",", "param_name", ":", "str", ")", ":", "\n", "        ", "\"\"\"Get second order momentum.\"\"\"", "\n", "return", "self", ".", "momentum", "(", "gradient", "=", "gradient", ",", "param_name", "=", "param_name", ",", "ord", "=", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.optimiser.adam.Adam.optimise": [[231, 257], ["parms.items", "adam.Adam.momentum", "adam.Adam.rmsprop", "grads.get", "grads.get", "numpy.sqrt"], "methods", ["home.repos.pwc.inspect_result.DreamingRaven_python-reseal.optimiser.adam.Adam.momentum", "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.optimiser.adam.Adam.rmsprop"], ["", "def", "optimise", "(", "self", ",", "parms", ":", "dict", ",", "grads", ":", "dict", ")", ":", "\n", "        ", "\"\"\"Update given params based on gradients using Adam.\n\n        Params and grads keys are expected to be `x` and `dfdx` respectiveley.\n        They should match although the x in this case should re replaced by\n        any uniquely identifying string sequence.\n\n        :arg parms: Dictionary of keys (param name), values (param value)\n        :type parms: dict[str, float]\n        :arg grads: Dictionary of keys (param name), values (param gradient)\n        :type grads: dict[str, float]\n        :return: Dictionary of keys (param name), values (proposed new value)\n        :rtype: dict[str, float]\n        :example: Adam().optimise({\"b\": 1},{\"dfdb\": 200})\n        \"\"\"", "\n", "out", "=", "{", "}", "\n", "for", "key", ",", "value", "in", "parms", ".", "items", "(", ")", ":", "\n", "            ", "m_hat", "=", "self", ".", "momentum", "(", "\n", "param_name", "=", "key", ",", "\n", "gradient", "=", "grads", ".", "get", "(", "\"dfd{}\"", ".", "format", "(", "key", ")", ")", ")", "\n", "v_hat", "=", "self", ".", "rmsprop", "(", "\n", "param_name", "=", "key", ",", "\n", "gradient", "=", "grads", ".", "get", "(", "\"dfd{}\"", ".", "format", "(", "key", ")", ")", ")", "\n", "out", "[", "key", "]", "=", "value", "-", "(", "(", "self", ".", "alpha", "*", "m_hat", ")", "/", "(", "np", ".", "sqrt", "(", "v_hat", ")", "+", "\n", "self", ".", "epsilon", ")", ")", "\n", "", "return", "out", "\n", "", "", ""]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.activation.linear_test.LinearTest.data_shape": [[18, 22], ["None"], "methods", ["None"], ["@", "property", "\n", "def", "data_shape", "(", "self", ")", ":", "\n", "        ", "\"\"\"Define desired data shape.\"\"\"", "\n", "return", "(", "3", ",", "32", ",", "32", ",", "3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.activation.linear_test.LinearTest.data": [[23, 28], ["numpy.random.rand"], "methods", ["None"], ["", "@", "property", "\n", "def", "data", "(", "self", ")", ":", "\n", "        ", "\"\"\"Get some generated data.\"\"\"", "\n", "array", "=", "np", ".", "random", ".", "rand", "(", "*", "self", ".", "data_shape", ")", "\n", "return", "array", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.activation.linear_test.LinearTest.reseal_args": [[29, 40], ["pow"], "methods", ["None"], ["", "@", "property", "\n", "def", "reseal_args", "(", "self", ")", ":", "\n", "        ", "\"\"\"Get some reseal arguments for encryption.\"\"\"", "\n", "return", "{", "\n", "\"scheme\"", ":", "2", ",", "# seal.scheme_type.CKK,", "\n", "\"poly_modulus_degree\"", ":", "8192", "*", "2", ",", "# 438", "\n", "# \"coefficient_modulus\": [60, 40, 40, 60],", "\n", "\"coefficient_modulus\"", ":", "\n", "[", "45", ",", "30", ",", "30", ",", "30", ",", "30", ",", "30", ",", "30", ",", "30", ",", "30", ",", "30", ",", "30", ",", "45", "]", ",", "\n", "\"scale\"", ":", "pow", "(", "2.0", ",", "30", ")", ",", "\n", "\"cache\"", ":", "True", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.activation.linear_test.LinearTest.setUp": [[42, 47], ["time.time"], "methods", ["None"], ["", "def", "setUp", "(", "self", ")", ":", "\n", "        ", "\"\"\"Start timer and init variables.\"\"\"", "\n", "self", ".", "weights", "=", "(", "1", ",", ")", "# if tuple allows cnn to initialise itself", "\n", "\n", "self", ".", "start_time", "=", "time", ".", "time", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.activation.linear_test.LinearTest.tearDown": [[48, 52], ["print", "time.time", "linear_test.LinearTest.id"], "methods", ["None"], ["", "def", "tearDown", "(", "self", ")", ":", "\n", "        ", "\"\"\"Calculate and print time delta.\"\"\"", "\n", "t", "=", "time", ".", "time", "(", ")", "-", "self", ".", "start_time", "\n", "print", "(", "'%s: %.3f'", "%", "(", "self", ".", "id", "(", ")", ",", "t", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.activation.linear_test.LinearTest.test_forward": [[53, 66], ["fhez.nn.activation.linear.Linear", "fhez.nn.activation.linear.Linear.forward", "fhez.nn.activation.linear.Linear.forward", "numpy.testing.assert_array_almost_equal", "numpy.testing.assert_array_almost_equal", "fhez.rearray.ReArray", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.DreamingRaven_python-reseal.loss.mse.MSE.forward", "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.loss.mse.MSE.forward"], ["", "def", "test_forward", "(", "self", ")", ":", "\n", "        ", "\"\"\"Check linear activation function works with enc and plaintext.\"\"\"", "\n", "node", "=", "Linear", "(", ")", "\n", "data", "=", "self", ".", "data", "\n", "plain_out", "=", "node", ".", "forward", "(", "x", "=", "data", ")", "\n", "enc_out", "=", "node", ".", "forward", "(", "Erray", "(", "data", ",", "**", "self", ".", "reseal_args", ")", ")", "\n", "# check answers match", "\n", "np", ".", "testing", ".", "assert_array_almost_equal", "(", "plain_out", ",", "np", ".", "array", "(", "enc_out", ")", ",", "\n", "decimal", "=", "2", ",", "verbose", "=", "True", ")", "\n", "\n", "# check the answer", "\n", "np", ".", "testing", ".", "assert_array_almost_equal", "(", "plain_out", ",", "data", ",", "\n", "decimal", "=", "2", ",", "verbose", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.activation.linear_test.LinearTest.test_backward": [[67, 77], ["fhez.nn.activation.linear.Linear", "fhez.nn.activation.linear.Linear.forward", "fhez.nn.activation.linear.Linear.backward", "numpy.testing.assert_array_almost_equal", "fhez.rearray.ReArray", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.DreamingRaven_python-reseal.loss.mse.MSE.forward", "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.loss.mse.MSE.backward"], ["", "def", "test_backward", "(", "self", ")", ":", "\n", "        ", "\"\"\"Check backward propogation giving correct gradients.\"\"\"", "\n", "node", "=", "Linear", "(", ")", "\n", "data", "=", "self", ".", "data", "\n", "enc_out", "=", "node", ".", "forward", "(", "Erray", "(", "data", ",", "**", "self", ".", "reseal_args", ")", ")", "\n", "loss", "=", "0.5", "-", "np", ".", "array", "(", "enc_out", ")", "# pretend target is 0.5", "\n", "dfdx", "=", "node", ".", "backward", "(", "loss", ")", "\n", "dfdx_truth", "=", "1", "*", "loss", "# whatever the calculation for dfdx should be", "\n", "np", ".", "testing", ".", "assert_array_almost_equal", "(", "dfdx", ",", "dfdx_truth", ",", "\n", "decimal", "=", "2", ",", "verbose", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.activation.linear_test.LinearTest.test_update": [[78, 86], ["fhez.nn.activation.linear.Linear", "fhez.nn.activation.linear.Linear.forward", "fhez.nn.activation.linear.Linear.backward", "fhez.nn.activation.linear.Linear.update", "fhez.rearray.ReArray", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.DreamingRaven_python-reseal.loss.mse.MSE.forward", "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.loss.mse.MSE.backward", "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.loss.mse.MSE.update"], ["", "def", "test_update", "(", "self", ")", ":", "\n", "        ", "\"\"\"Check updates occured or did not occur properly.\"\"\"", "\n", "node", "=", "Linear", "(", ")", "\n", "data", "=", "self", ".", "data", "\n", "enc_out", "=", "node", ".", "forward", "(", "Erray", "(", "data", ",", "**", "self", ".", "reseal_args", ")", ")", "\n", "loss", "=", "0.5", "-", "np", ".", "array", "(", "enc_out", ")", "# pretend target is 0.5", "\n", "node", ".", "backward", "(", "loss", ")", "\n", "node", ".", "update", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.activation.linear_test.LinearTest.test_updates": [[87, 95], ["fhez.nn.activation.linear.Linear", "fhez.nn.activation.linear.Linear.forward", "fhez.nn.activation.linear.Linear.backward", "fhez.nn.activation.linear.Linear.updates", "fhez.rearray.ReArray", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.DreamingRaven_python-reseal.loss.mse.MSE.forward", "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.loss.mse.MSE.backward", "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.loss.mse.MSE.updates"], ["", "def", "test_updates", "(", "self", ")", ":", "\n", "        ", "\"\"\"Check updates occured or did not occur properly.\"\"\"", "\n", "node", "=", "Linear", "(", ")", "\n", "data", "=", "self", ".", "data", "\n", "enc_out", "=", "node", ".", "forward", "(", "Erray", "(", "data", ",", "**", "self", ".", "reseal_args", ")", ")", "\n", "loss", "=", "0.5", "-", "np", ".", "array", "(", "enc_out", ")", "# pretend target is 0.5", "\n", "node", ".", "backward", "(", "loss", ")", "\n", "node", ".", "updates", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.activation.linear_test.LinearTest.test_getstate_setstate": [[96, 119], ["fhez.nn.activation.linear.Linear", "fhez.nn.activation.linear.Linear", "fhez.nn.activation.linear.Linear.__getstate__", "linear_test.LinearTest.assertIsInstance", "linear_test.LinearTest.assertIsInstance", "fhez.nn.activation.linear.Linear.__setstate__", "fhez.nn.activation.linear.Linear.__dict__.items", "repr", "isinstance", "numpy.array", "numpy.array", "numpy.testing.assert_array_almost_equal", "linear_test.LinearTest.assertEqual"], "methods", ["home.repos.pwc.inspect_result.DreamingRaven_python-reseal.graph.serialise.Serialise.__getstate__", "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.graph.serialise.Serialise.__setstate__"], ["", "def", "test_getstate_setstate", "(", "self", ")", ":", "\n", "        ", "\"\"\"Check setstate getstate functionality.\"\"\"", "\n", "obj_dump", "=", "Linear", "(", "m", "=", "np", ".", "array", "(", "[", "5", "]", ")", ",", "c", "=", "np", ".", "array", "(", "[", "3", "]", ")", ")", "\n", "obj_load", "=", "Linear", "(", ")", "\n", "# getting simple dictionary representation of class", "\n", "d", "=", "obj_dump", ".", "__getstate__", "(", ")", "\n", "# check is dict properly", "\n", "self", ".", "assertIsInstance", "(", "d", ",", "dict", ")", "\n", "# check repr works properly returning a string", "\n", "self", ".", "assertIsInstance", "(", "repr", "(", "obj_dump", ")", ",", "str", ")", "\n", "# recreate original object in new object", "\n", "obj_load", ".", "__setstate__", "(", "d", ")", "\n", "# manually comparing each part of our dictionaries as we cant rely on", "\n", "# assertEqual to do the whole dictionary when it comes to multidim", "\n", "# numpy arrays", "\n", "for", "key", ",", "value", "in", "obj_dump", ".", "__dict__", ".", "items", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "value", ",", "np", ".", "ndarray", ")", ":", "\n", "                ", "np", ".", "testing", ".", "assert_array_almost_equal", "(", "obj_dump", ".", "__dict__", "[", "key", "]", ",", "\n", "value", ",", "\n", "decimal", "=", "1", ",", "\n", "verbose", "=", "True", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "assertEqual", "(", "obj_dump", ".", "__dict__", "[", "key", "]", ",", "value", ")", "\n", "", "", "", "", ""]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.activation.argmax.Argmax.forward": [[14, 21], ["numpy.eye", "len", "numpy.argmax"], "methods", ["None"], ["def", "forward", "(", "self", ",", "x", ":", "np", ".", "ndarray", ")", ":", "\n", "        ", "r\"\"\"Calculate the argmax of some input :math:`x` along its first axis.\n\n        Argmax.\n        \"\"\"", "\n", "sparse", "=", "np", ".", "eye", "(", "len", "(", "x", ")", ")", "[", "np", ".", "argmax", "(", "x", ",", "axis", "=", "0", ")", "]", "\n", "return", "sparse", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.activation.argmax.Argmax.backward": [[22, 30], ["None"], "methods", ["None"], ["", "def", "backward", "(", "self", ",", "gradient", ":", "np", ".", "ndarray", ")", ":", "\n", "        ", "r\"\"\"Calculate the argmax derivative with respect to each input.\n\n        Argmax.\n        \"\"\"", "\n", "# assuming sparse gradient like [0,1,0] will mean this local gradient", "\n", "# is simply just the forward gradient", "\n", "return", "gradient", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.activation.argmax.Argmax.cost": [[31, 35], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "cost", "(", "self", ")", ":", "\n", "        ", "\"\"\"Get computational cost of this activation.\"\"\"", "\n", "return", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.activation.argmax.Argmax.update": [[36, 39], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ")", ":", "\n", "        ", "\"\"\"Update parameters, so nothing for argmax.\"\"\"", "\n", "return", "NotImplemented", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.activation.argmax.Argmax.updates": [[40, 43], ["None"], "methods", ["None"], ["", "def", "updates", "(", "self", ")", ":", "\n", "        ", "\"\"\"Update parameters using average of gradients so none for argmax.\"\"\"", "\n", "return", "NotImplemented", "\n", "", "", ""]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.activation.sigmoid_test.Sigmoid_Test.setUp": [[15, 18], ["time.time"], "methods", ["None"], ["    ", "def", "setUp", "(", "self", ")", ":", "\n", "        ", "\"\"\"Start timer and init variables.\"\"\"", "\n", "self", ".", "start_time", "=", "time", ".", "time", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.activation.sigmoid_test.Sigmoid_Test.tearDown": [[19, 23], ["print", "time.time", "sigmoid_test.Sigmoid_Test.id"], "methods", ["None"], ["", "def", "tearDown", "(", "self", ")", ":", "\n", "        ", "\"\"\"Calculate and print time delta.\"\"\"", "\n", "t", "=", "time", ".", "time", "(", ")", "-", "self", ".", "start_time", "\n", "print", "(", "'%s: %.3f'", "%", "(", "self", ".", "id", "(", ")", ",", "t", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.activation.sigmoid_test.Sigmoid_Test.x": [[24, 28], ["numpy.array"], "methods", ["None"], ["", "@", "property", "\n", "def", "x", "(", "self", ")", ":", "\n", "        ", "x", "=", "[", "1", ",", "-", "1", ",", "0.7", "]", "\n", "return", "np", ".", "array", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.activation.sigmoid_test.Sigmoid_Test.test_forward": [[29, 38], ["print", "fhez.nn.activation.sigmoid.Sigmoid", "fhez.nn.activation.sigmoid.Sigmoid.forward", "numpy.array", "numpy.testing.assert_array_almost_equal"], "methods", ["home.repos.pwc.inspect_result.DreamingRaven_python-reseal.loss.mse.MSE.forward"], ["", "def", "test_forward", "(", "self", ")", ":", "\n", "        ", "\"\"\"Check sigmoid forward pass against known truth, plaintext.\"\"\"", "\n", "print", "(", "self", ".", "x", ".", "shape", ")", "\n", "activation_function", "=", "Sigmoid", "(", ")", "\n", "activation", "=", "activation_function", ".", "forward", "(", "self", ".", "x", ")", "\n", "# activation_truth = activation_function.sigmoid(self.x)", "\n", "activation_truth", "=", "np", ".", "array", "(", "[", "0.693", ",", "0.307", ",", "0.637", "]", ")", "\n", "np", ".", "testing", ".", "assert_array_almost_equal", "(", "activation", ",", "activation_truth", ",", "\n", "decimal", "=", "3", ",", "verbose", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.activation.sigmoid_test.Sigmoid_Test.test_backward": [[39, 47], ["fhez.nn.activation.sigmoid.Sigmoid", "fhez.nn.activation.sigmoid.Sigmoid.forward", "fhez.nn.activation.sigmoid.Sigmoid.backward", "numpy.array", "numpy.testing.assert_array_almost_equal", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.DreamingRaven_python-reseal.loss.mse.MSE.forward", "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.loss.mse.MSE.backward"], ["", "def", "test_backward", "(", "self", ")", ":", "\n", "        ", "\"\"\"Check sigmoid backward pass against known truth, plaintext.\"\"\"", "\n", "activation_function", "=", "Sigmoid", "(", ")", "\n", "activation_function", ".", "forward", "(", "self", ".", "x", ")", "\n", "df_dx", "=", "activation_function", ".", "backward", "(", "np", ".", "array", "(", "[", "1", "]", ")", ")", "\n", "df_dx_truth", "=", "np", ".", "array", "(", "[", "0.185", ",", "0.185", ",", "0.1911", "]", ")", "\n", "np", ".", "testing", ".", "assert_array_almost_equal", "(", "df_dx", ",", "df_dx_truth", ",", "\n", "decimal", "=", "3", ",", "verbose", "=", "True", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.activation.sigmoid.Sigmoid.forward": [[14, 21], ["sigmoid.Sigmoid.inputs.append", "numpy.add", "numpy.add", "numpy.multiply", "numpy.multiply", "numpy.multiply", "numpy.multiply"], "methods", ["home.repos.pwc.inspect_result.DreamingRaven_python-reseal.graph.dll.DLL.append", "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.rearray.ReArray.add", "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.rearray.ReArray.add", "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.rearray.ReArray.multiply", "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.rearray.ReArray.multiply", "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.rearray.ReArray.multiply", "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.rearray.ReArray.multiply"], ["def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"Calculate sigmoid approximation while minimising depth.\"\"\"", "\n", "self", ".", "inputs", ".", "append", "(", "x", ")", "\n", "# return (0.5) + (0.197 * x) + ((-0.004 * x) * (x * x))", "\n", "return", "np", ".", "add", "(", "np", ".", "add", "(", "0.5", ",", "np", ".", "multiply", "(", "0.197", ",", "x", ")", ")", ",", "np", ".", "multiply", "(", "\n", "np", ".", "multiply", "(", "-", "0.004", ",", "x", ")", ",", "\n", "np", ".", "multiply", "(", "x", ",", "x", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.activation.sigmoid.Sigmoid.backward": [[22, 27], ["numpy.array", "sigmoid.Sigmoid.inputs.pop"], "methods", ["None"], ["", "def", "backward", "(", "self", ",", "gradient", ":", "np", ".", "array", ")", ":", "\n", "        ", "\"\"\"Calculate gradient of sigmoid with respect to input x.\"\"\"", "\n", "x", "=", "np", ".", "array", "(", "self", ".", "inputs", ".", "pop", "(", ")", ")", "\n", "df_dx", "=", "0.197", "+", "(", "-", "0.012", "*", "(", "x", "**", "2", ")", ")", "\n", "return", "df_dx", "*", "gradient", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.activation.sigmoid.Sigmoid.update": [[28, 31], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ")", ":", "\n", "        ", "\"\"\"Update nothing, as sigmoid has no parameters.\"\"\"", "\n", "return", "NotImplemented", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.activation.sigmoid.Sigmoid.updates": [[32, 35], ["None"], "methods", ["None"], ["", "def", "updates", "(", "self", ")", ":", "\n", "        ", "\"\"\"Update nothing, as sigmoid has no parameters.\"\"\"", "\n", "return", "NotImplemented", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.activation.sigmoid.Sigmoid.cost": [[36, 40], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "cost", "(", "self", ")", ":", "\n", "        ", "\"\"\"Get computational depth of this node.\"\"\"", "\n", "return", "5", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.activation.sigmoid.Sigmoid.sigmoid": [[41, 44], ["numpy.exp"], "methods", ["None"], ["", "def", "sigmoid", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"Calculate standard sigmoid activation.\"\"\"", "\n", "return", "1", "/", "(", "1", "+", "np", ".", "exp", "(", "-", "x", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.activation.softmax.Softmax.forward": [[14, 27], ["numpy.exp", "softmax.Softmax.inputs.append", "numpy.add", "numpy.sum"], "methods", ["home.repos.pwc.inspect_result.DreamingRaven_python-reseal.graph.dll.DLL.append", "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.rearray.ReArray.add", "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.rearray.ReArray.sum"], ["def", "forward", "(", "self", ",", "x", ":", "np", ".", "ndarray", ")", ":", "\n", "        ", "r\"\"\"Calculate the soft maximum of some input :math:`x`.\n\n        :math:`\\hat{p(y_i)} = \\frac{e^{a_i}}{\\sum_{j=0}^{C-1}e^{a_j}}`\n\n        where: :math:`C` is the number of classes, and :math:`i` is the current\n        class being processed.\n        \"\"\"", "\n", "# adding a small coefficient to avoid division by zero errors", "\n", "expo", "=", "np", ".", "exp", "(", "np", ".", "add", "(", "x", ",", "1e-8", ")", ")", "\n", "out", "=", "expo", "/", "np", ".", "sum", "(", "expo", ")", "\n", "self", ".", "inputs", ".", "append", "(", "out", ")", "# NOTE appending x_softmaxed not x", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.activation.softmax.Softmax.backward": [[28, 51], ["numpy.array", "range", "softmax.Softmax.inputs.pop", "len"], "methods", ["None"], ["", "def", "backward", "(", "self", ",", "gradient", ":", "np", ".", "ndarray", ")", ":", "\n", "        ", "r\"\"\"Calculate the soft maximum derivative with respect to each input.\n\n        .. math::\n\n            \\frac{d\\textit{SMAX(a)}}{da_i} = \\begin{cases} \\hat{p(y_i)}\n            (1 - \\hat{p(y_i)}), & \\text{if}\\ c=i \\\\ -\\hat{p(y_c)} *\n            \\hat{p(y_i)}, & \\text{otherwise} \\end{cases}\n\n        where: :math:`c` is the one hot encoded index of the correct/ true\n        classification, and :math:`i` is the current index for the current\n        classification.\n        \"\"\"", "\n", "# softmax derivative does not need x it needs the x_softmaxed", "\n", "x", "=", "np", ".", "array", "(", "self", ".", "inputs", ".", "pop", "(", ")", ")", "# note this is softmaxed ie py_hat", "\n", "# calculate class specific gradient", "\n", "dfdx", "=", "(", "x", "*", "(", "1", "-", "x", ")", ")", "*", "gradient", "\n", "# calculate inter class gradient", "\n", "for", "i", "in", "range", "(", "len", "(", "x", ")", ")", ":", "\n", "            ", "t", "=", "-", "x", "[", "i", "]", "*", "x", "*", "gradient", "[", "i", "]", "\n", "t", "[", "i", "]", "=", "0", "# already calc class specific grad differently above", "\n", "dfdx", "+=", "t", "\n", "", "return", "dfdx", "# gradient with respect to all inputs", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.activation.softmax.Softmax.cost": [[52, 56], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "cost", "(", "self", ")", ":", "\n", "        ", "\"\"\"Get computational cost of this activation.\"\"\"", "\n", "return", "4", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.activation.softmax.Softmax.update": [[57, 60], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ")", ":", "\n", "        ", "\"\"\"Update parameters, so nothing for softmax.\"\"\"", "\n", "return", "NotImplemented", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.activation.softmax.Softmax.updates": [[61, 64], ["None"], "methods", ["None"], ["", "def", "updates", "(", "self", ")", ":", "\n", "        ", "\"\"\"Update parameters using average of gradients so none for softmax.\"\"\"", "\n", "return", "NotImplemented", "\n", "", "", ""]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.activation.softmax_test.SoftmaxTest.setUp": [[17, 20], ["time.time"], "methods", ["None"], ["def", "setUp", "(", "self", ")", ":", "\n", "        ", "\"\"\"Start timer and init variables.\"\"\"", "\n", "self", ".", "start_time", "=", "time", ".", "time", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.activation.softmax_test.SoftmaxTest.tearDown": [[21, 25], ["print", "time.time", "softmax_test.SoftmaxTest.id"], "methods", ["None"], ["", "def", "tearDown", "(", "self", ")", ":", "\n", "        ", "\"\"\"Calculate and print time delta.\"\"\"", "\n", "t", "=", "time", ".", "time", "(", ")", "-", "self", ".", "start_time", "\n", "print", "(", "'%s: %.3f'", "%", "(", "self", ".", "id", "(", ")", ",", "t", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.activation.softmax_test.SoftmaxTest.test_init": [[26, 30], ["fhez.nn.activation.softmax.Softmax", "softmax_test.SoftmaxTest.assertIsInstance"], "methods", ["None"], ["", "def", "test_init", "(", "self", ")", ":", "\n", "        ", "\"\"\"Check SGD can be initialised using defaults.\"\"\"", "\n", "activation", "=", "Softmax", "(", ")", "\n", "self", ".", "assertIsInstance", "(", "activation", ",", "Softmax", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.activation.softmax_test.SoftmaxTest.test_backward": [[31, 44], ["fhez.nn.activation.softmax.Softmax", "fhez.nn.activation.softmax.Softmax.forward", "numpy.testing.assert_array_almost_equal", "fhez.nn.activation.softmax.Softmax.backward", "numpy.array", "print", "numpy.testing.assert_array_almost_equal", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.DreamingRaven_python-reseal.loss.mse.MSE.forward", "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.loss.mse.MSE.backward"], ["", "def", "test_backward", "(", "self", ")", ":", "\n", "        ", "\"\"\"Test softmax backward pass with known values.\"\"\"", "\n", "a", "=", "[", "1.42", ",", "-", "0.4", ",", "0.23", "]", "\n", "softmax", "=", "Softmax", "(", ")", "\n", "py_hat", "=", "softmax", ".", "forward", "(", "a", ")", "\n", "py_hat_truth", "=", "[", "0.682", ",", "0.111", ",", "0.207", "]", "\n", "np", ".", "testing", ".", "assert_array_almost_equal", "(", "py_hat", ",", "py_hat_truth", ",", "\n", "decimal", "=", "3", ",", "verbose", "=", "True", ")", "\n", "grad", "=", "softmax", ".", "backward", "(", "gradient", "=", "np", ".", "array", "(", "[", "1", ",", "0", ",", "0", "]", ")", ")", "\n", "grad_truth", "=", "np", ".", "array", "(", "[", "0.217", ",", "-", "0.075", ",", "-", "0.142", "]", ")", "\n", "print", "(", "\"SOFTMAX GRADIENT\"", ",", "grad", ")", "\n", "np", ".", "testing", ".", "assert_array_almost_equal", "(", "grad", ",", "grad_truth", ",", "\n", "decimal", "=", "3", ",", "verbose", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.activation.softmax_test.SoftmaxTest.test_forward": [[45, 53], ["fhez.nn.activation.softmax.Softmax", "fhez.nn.activation.softmax.Softmax.forward", "numpy.testing.assert_array_almost_equal"], "methods", ["home.repos.pwc.inspect_result.DreamingRaven_python-reseal.loss.mse.MSE.forward"], ["", "def", "test_forward", "(", "self", ")", ":", "\n", "        ", "\"\"\"Test softmax forward pass with known values.\"\"\"", "\n", "a", "=", "[", "1.42", ",", "-", "0.4", ",", "0.23", "]", "\n", "softmax", "=", "Softmax", "(", ")", "\n", "py_hat", "=", "softmax", ".", "forward", "(", "a", ")", "\n", "py_hat_truth", "=", "[", "0.682", ",", "0.111", ",", "0.207", "]", "\n", "np", ".", "testing", ".", "assert_array_almost_equal", "(", "py_hat", ",", "py_hat_truth", ",", "\n", "decimal", "=", "3", ",", "verbose", "=", "True", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.activation.relu_test.Relu_Test.data_shape": [[16, 20], ["None"], "methods", ["None"], ["@", "property", "\n", "def", "data_shape", "(", "self", ")", ":", "\n", "        ", "\"\"\"Define desired data shape.\"\"\"", "\n", "return", "(", "3", ",", "32", ",", "32", ",", "3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.activation.relu_test.Relu_Test.data": [[21, 26], ["numpy.random.rand"], "methods", ["None"], ["", "@", "property", "\n", "def", "data", "(", "self", ")", ":", "\n", "        ", "\"\"\"Get some generated data.\"\"\"", "\n", "array", "=", "np", ".", "random", ".", "rand", "(", "*", "self", ".", "data_shape", ")", "\n", "return", "array", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.activation.relu_test.Relu_Test.reseal_args": [[27, 38], ["pow"], "methods", ["None"], ["", "@", "property", "\n", "def", "reseal_args", "(", "self", ")", ":", "\n", "        ", "\"\"\"Get some reseal arguments for encryption.\"\"\"", "\n", "return", "{", "\n", "\"scheme\"", ":", "2", ",", "# seal.scheme_type.CKK,", "\n", "\"poly_modulus_degree\"", ":", "8192", "*", "2", ",", "# 438", "\n", "# \"coefficient_modulus\": [60, 40, 40, 60],", "\n", "\"coefficient_modulus\"", ":", "\n", "[", "45", ",", "30", ",", "30", ",", "30", ",", "30", ",", "30", ",", "30", ",", "30", ",", "30", ",", "30", ",", "30", ",", "45", "]", ",", "\n", "\"scale\"", ":", "pow", "(", "2.0", ",", "30", ")", ",", "\n", "\"cache\"", ":", "True", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.activation.relu_test.Relu_Test.setUp": [[40, 45], ["time.time"], "methods", ["None"], ["", "def", "setUp", "(", "self", ")", ":", "\n", "        ", "\"\"\"Start timer and init variables.\"\"\"", "\n", "self", ".", "weights", "=", "(", "1", ",", ")", "# if tuple allows cnn to initialise itself", "\n", "\n", "self", ".", "startTime", "=", "time", ".", "time", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.activation.relu_test.Relu_Test.tearDown": [[46, 50], ["print", "time.time", "relu_test.Relu_Test.id"], "methods", ["None"], ["", "def", "tearDown", "(", "self", ")", ":", "\n", "        ", "\"\"\"Calculate and print time delta.\"\"\"", "\n", "t", "=", "time", ".", "time", "(", ")", "-", "self", ".", "startTime", "\n", "print", "(", "'%s: %.3f'", "%", "(", "self", ".", "id", "(", ")", ",", "t", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.activation.relu_test.Relu_Test.test_test": [[51, 55], ["relu_test.Relu_Test.assertEqual"], "methods", ["None"], ["", "def", "test_test", "(", "self", ")", ":", "\n", "        ", "\"\"\"Check our testing values meet requirements.\"\"\"", "\n", "# check data is the shape we desire/ gave it to generate", "\n", "self", ".", "assertEqual", "(", "self", ".", "data", ".", "shape", ",", "self", ".", "data_shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.activation.relu_test.Relu_Test.test_init": [[56, 60], ["relu_test.Relu_Test.assertIsInstance", "relu_test.Relu_Test.assertEqual", "fhez.nn.activation.relu.RELU", "fhez.nn.activation.relu.RELU"], "methods", ["None"], ["", "def", "test_init", "(", "self", ")", ":", "\n", "        ", "\"\"\"Check initialisation of RELU.\"\"\"", "\n", "self", ".", "assertIsInstance", "(", "RELU", "(", ")", ",", "RELU", ",", "\"RELU() not creating object RELU\"", ")", "\n", "self", ".", "assertEqual", "(", "RELU", "(", "q", "=", "5", ")", ".", "q", ",", "5", ",", "\"dynamic range 'q' not set properly\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.activation.relu_test.Relu_Test.test_forward": [[61, 74], ["fhez.nn.activation.relu.RELU", "fhez.nn.activation.relu.RELU.forward", "relu_test.Relu_Test.assertEqual", "numpy.array", "fhez.nn.activation.relu.RELU.forward.round", "truth.round"], "methods", ["home.repos.pwc.inspect_result.DreamingRaven_python-reseal.loss.mse.MSE.forward"], ["", "def", "test_forward", "(", "self", ",", "x", "=", "None", ",", "q", "=", "None", ")", ":", "\n", "        ", "\"\"\"Check RELU forward pass producing good approximations.\"\"\"", "\n", "# set input", "\n", "x", "=", "x", "if", "x", "is", "not", "None", "else", "np", ".", "array", "(", "[", "1", "]", ")", "\n", "# set range of approximation", "\n", "q", "=", "q", "if", "q", "is", "not", "None", "else", "1", "\n", "r", "=", "RELU", "(", "q", "=", "q", ")", "\n", "acti", "=", "r", ".", "forward", "(", "x", ")", "\n", "truth", "=", "x", "if", "x", ">=", "0", "else", "0", "\n", "self", ".", "assertEqual", "(", "\n", "acti", ".", "round", "(", "decimals", "=", "1", ")", ",", "truth", ".", "round", "(", "decimals", "=", "1", ")", ",", "\n", "\"RELU-apx activation {} is not close to true RELU {}\"", ".", "format", "(", "\n", "acti", ",", "truth", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.activation.relu_test.Relu_Test.test_forward_ndarray": [[75, 92], ["fhez.nn.activation.relu.RELU", "fhez.nn.activation.relu.RELU.forward", "numpy.testing.assert_array_almost_equal"], "methods", ["home.repos.pwc.inspect_result.DreamingRaven_python-reseal.loss.mse.MSE.forward"], ["", "def", "test_forward_ndarray", "(", "self", ",", "x", "=", "None", ",", "q", "=", "None", ")", ":", "\n", "        ", "\"\"\"Check that RELU operates on multidimensional arrays properly.\"\"\"", "\n", "# set input", "\n", "x", "=", "x", "if", "x", "is", "not", "None", "else", "self", ".", "data", "[", "0", "]", "# get only first batch", "\n", "# set range of approximation", "\n", "q", "=", "q", "if", "q", "is", "not", "None", "else", "1", "\n", "r", "=", "RELU", "(", "q", "=", "q", ")", "\n", "acti", "=", "r", ".", "forward", "(", "x", ")", "\n", "# truth = np.maximum(x, 0)", "\n", "truth", "=", "x", "*", "(", "x", ">", "0", ")", "\n", "# TODO: make this not ERROR, but instead FAIL if it does not pass!", "\n", "# like:", "\n", "# self.assertTrue(numpy.allclose(array1, array2,", "\n", "#                                rtol=1e-05, atol=1e-08))", "\n", "np", ".", "testing", ".", "assert_array_almost_equal", "(", "acti", ",", "truth", ",", "\n", "decimal", "=", "1", ",", "\n", "verbose", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.activation.relu_test.Relu_Test.test_forwards_ndarray_encrypted": [[108, 124], ["fhez.nn.activation.relu.RELU", "fhez.nn.activation.relu.RELU.forward", "numpy.testing.assert_array_almost_equal", "fhez.rearray.ReArray", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.DreamingRaven_python-reseal.loss.mse.MSE.forward"], ["", "def", "test_forwards_ndarray_encrypted", "(", "self", ",", "x", "=", "None", ",", "q", "=", "None", ")", ":", "\n", "        ", "\"\"\"Check Encrypted cyphertext passess through RELU forward.\"\"\"", "\n", "# ok so it looks like we have a quirk in rearray since its treating", "\n", "# each cyphertext independentley, while the result is the same,", "\n", "# the compute time is orders of magnitude higher. from 4->42 seconds", "\n", "data", "=", "self", ".", "data", "\n", "x", "=", "x", "if", "x", "is", "not", "None", "else", "Erray", "(", "data", ",", "**", "self", ".", "reseal_args", ")", "\n", "relu", "=", "RELU", "(", "q", "=", "q", ")", "\n", "acti", "=", "relu", ".", "forward", "(", "x", ")", "# forward and decrypt", "\n", "truth", "=", "data", "*", "(", "data", ">", "0", ")", "# manual RELU calculation on original data", "\n", "# print(\"acti\", acti)", "\n", "# print(\"truth\", acti)", "\n", "# confirm if they are about the same", "\n", "np", ".", "testing", ".", "assert_array_almost_equal", "(", "np", ".", "array", "(", "acti", ")", ",", "truth", ",", "\n", "decimal", "=", "1", ",", "\n", "verbose", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.activation.relu_test.Relu_Test.test_backward_encrypted": [[125, 147], ["fhez.nn.activation.relu.RELU", "fhez.nn.activation.relu.RELU.forward", "fhez.nn.activation.relu.RELU.forward", "relu_test.Relu_Test.assertEqual", "numpy.array", "fhez.nn.activation.relu.RELU.backward", "fhez.nn.activation.relu.RELU.backward", "relu_test.Relu_Test.assertEqual", "relu_test.Relu_Test.assertEqual", "relu_test.Relu_Test.assertEqual", "relu_test.Relu_Test.assertEqual", "relu_test.Relu_Test.assertEqual", "relu_test.Relu_Test.assertIsInstance", "fhez.rearray.ReArray", "tuple", "tuple", "len", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.DreamingRaven_python-reseal.loss.mse.MSE.forward", "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.loss.mse.MSE.forward", "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.loss.mse.MSE.backward", "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.loss.mse.MSE.backward"], ["", "def", "test_backward_encrypted", "(", "self", ",", "x", "=", "None", ",", "q", "=", "None", ")", ":", "\n", "        ", "\"\"\"Check backward pass working properly calculating gradients.\"\"\"", "\n", "data", "=", "self", ".", "data", "\n", "# data = np.array([1.0, 1.0, 0.0])", "\n", "x", "=", "x", "if", "x", "is", "not", "None", "else", "Erray", "(", "data", ",", "**", "self", ".", "reseal_args", ")", "\n", "relu", "=", "RELU", "(", "q", "=", "q", ")", "\n", "relu", ".", "forward", "(", "np", ".", "array", "(", "x", ")", ".", "flat", "[", "0", "]", ")", "# second forward for second backward", "\n", "acti", "=", "relu", ".", "forward", "(", "x", ")", "# forward", "\n", "acti_truth", "=", "data", "*", "(", "data", ">", "0", ")", "\n", "self", ".", "assertEqual", "(", "acti_truth", ".", "shape", ",", "acti", ".", "shape", ")", "# check shape unchanged", "\n", "plain_acti", "=", "np", ".", "array", "(", "acti", ")", "\n", "\n", "dfdx", "=", "relu", ".", "backward", "(", "0.5", "-", "plain_acti", ")", "\n", "dfdx_single", "=", "relu", ".", "backward", "(", "0.5", "-", "plain_acti", ".", "flat", "[", "0", "]", ")", "\n", "self", ".", "assertEqual", "(", "dfdx", ".", "shape", ",", "plain_acti", ".", "shape", ")", "# check shape unchanged", "\n", "self", ".", "assertEqual", "(", "dfdx", ".", "flat", "[", "0", "]", ".", "shape", ",", "tuple", "(", ")", ")", "\n", "self", ".", "assertEqual", "(", "dfdx_single", ".", "shape", ",", "tuple", "(", ")", ")", "\n", "self", ".", "assertEqual", "(", "dfdx", ".", "flat", "[", "0", "]", ",", "\n", "dfdx_single", ")", "\n", "\n", "self", ".", "assertEqual", "(", "len", "(", "relu", ".", "gradients", ")", ",", "2", ")", "# check is only set of grads", "\n", "self", ".", "assertIsInstance", "(", "relu", ".", "gradients", "[", "0", "]", ",", "dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.activation.relu_test.Relu_Test.test_gradients": [[148, 161], ["fhez.nn.activation.relu.RELU", "fhez.nn.activation.relu.RELU.local_dfdx", "numpy.testing.assert_array_almost_equal", "fhez.nn.activation.relu.RELU.local_dfdq", "numpy.testing.assert_array_almost_equal"], "methods", ["home.repos.pwc.inspect_result.DreamingRaven_python-reseal.activation.relu.RELU.local_dfdx", "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.activation.relu.RELU.local_dfdq"], ["", "def", "test_gradients", "(", "self", ")", ":", "\n", "        ", "\"\"\"Check gradients are calculated properly to known correct.\"\"\"", "\n", "node", "=", "RELU", "(", ")", "\n", "# dfdx check", "\n", "dfdx", "=", "node", ".", "local_dfdx", "(", "x", "=", "5", ",", "q", "=", "2", ")", "\n", "dfdx_truth", "=", "2.622", "# from manual calculation", "\n", "np", ".", "testing", ".", "assert_array_almost_equal", "(", "dfdx", ",", "dfdx_truth", ",", "decimal", "=", "3", ",", "\n", "verbose", "=", "True", ")", "\n", "# dfxq check", "\n", "dfdq", "=", "node", ".", "local_dfdq", "(", "x", "=", "5", ",", "q", "=", "2", ")", "\n", "dfdq_truth", "=", "-", "2.546", "\n", "np", ".", "testing", ".", "assert_array_almost_equal", "(", "dfdq", ",", "dfdq_truth", ",", "decimal", "=", "3", ",", "\n", "verbose", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.activation.relu_test.Relu_Test.test_updates": [[162, 177], ["fhez.nn.activation.relu.RELU", "fhez.nn.activation.relu.RELU.forward", "fhez.nn.activation.relu.RELU.backward", "fhez.nn.activation.relu.RELU.updates", "relu_test.Relu_Test.assertNotEqual", "fhez.nn.activation.relu.RELU.q.flatten"], "methods", ["home.repos.pwc.inspect_result.DreamingRaven_python-reseal.loss.mse.MSE.forward", "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.loss.mse.MSE.backward", "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.loss.mse.MSE.updates", "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.operations.rotate.Rotate.flatten"], ["", "def", "test_updates", "(", "self", ")", ":", "\n", "        ", "\"\"\"Check that updates are atleast happening.\n\n        Tests for the optimizer are part of the respective optimizer not us.\n        \"\"\"", "\n", "node", "=", "RELU", "(", ")", "\n", "acti", "=", "node", ".", "forward", "(", "self", ".", "data", ")", "\n", "node", ".", "backward", "(", "0.5", "-", "acti", ")", "\n", "q_original", "=", "node", ".", "q", "\n", "node", ".", "updates", "(", ")", "\n", "# checking if weight has been changed we dont care if correct as", "\n", "# that is a test for the optimiser itself", "\n", "# NOTE: since the data is multidimensional Q will also have", "\n", "# become multidimensional unless there is a savetey guard on the setter", "\n", "self", ".", "assertNotEqual", "(", "q_original", ",", "node", ".", "q", ".", "flatten", "(", ")", "[", "0", "]", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.activation.relu.RELU.__init__": [[18, 21], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "q", "=", "None", ")", ":", "\n", "        ", "\"\"\"Create a RELU approximation object.\"\"\"", "\n", "self", ".", "q", "=", "q", "# this is the approximation range of this ReLU approximator", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.activation.relu.RELU.q": [[29, 33], ["None"], "methods", ["None"], ["", "@", "q", ".", "setter", "\n", "def", "q", "(", "self", ",", "q", ")", ":", "\n", "        ", "\"\"\"Set the current ReLU approximation range.\"\"\"", "\n", "self", ".", "_q", "=", "q", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.activation.relu.RELU.cost": [[34, 39], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "cost", "(", "self", ")", ":", "\n", "        ", "\"\"\"Get the computational cost of traversing to this RELU node.\"\"\"", "\n", "# \\frac{4}{3 \\pi q}x^2 + \\frac{1}{2}x + \\frac{q}{3 \\pi}", "\n", "return", "4", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.activation.relu.RELU.forward": [[40, 56], ["relu.RELU.inputs.append", "numpy.add", "numpy.add", "numpy.multiply", "numpy.multiply", "numpy.multiply"], "methods", ["home.repos.pwc.inspect_result.DreamingRaven_python-reseal.graph.dll.DLL.append", "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.rearray.ReArray.add", "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.rearray.ReArray.add", "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.rearray.ReArray.multiply", "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.rearray.ReArray.multiply", "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.rearray.ReArray.multiply"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"Calculate forward pass for singular example.\"\"\"", "\n", "# storing inputs (ignored if caching is disabled)", "\n", "self", ".", "inputs", ".", "append", "(", "x", ")", "\n", "# https://www.researchgate.net/publication/345756894_On_Polynomial_Approximations_for_Privacy-Preserving_and_Verifiable_ReLU_Networks", "\n", "# \\frac{4}{3 \\pi q}x^2 + \\frac{1}{2}x + \\frac{q}{3 \\pi}", "\n", "# define the coefficient at each order", "\n", "zeroth", "=", "self", ".", "q", "/", "(", "3", "*", "np", ".", "pi", ")", "\n", "first", "=", "0.5", "\n", "second", "=", "4", "/", "(", "3", "*", "np", ".", "pi", "*", "self", ".", "q", ")", "\n", "# use coefficients with x in full equation but ordered carefully to", "\n", "# minimise computational depth", "\n", "\n", "activation", "=", "np", ".", "add", "(", "np", ".", "add", "(", "zeroth", ",", "np", ".", "multiply", "(", "first", ",", "x", ")", ")", ",", "\n", "np", ".", "multiply", "(", "second", ",", "np", ".", "multiply", "(", "x", ",", "x", ")", ")", ")", "\n", "return", "activation", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.activation.relu.RELU.backward": [[57, 76], ["numpy.array", "relu.RELU.gradients.append", "relu.RELU.inputs.pop", "relu.RELU.local_dfdx", "relu.RELU.local_dfdq"], "methods", ["home.repos.pwc.inspect_result.DreamingRaven_python-reseal.graph.dll.DLL.append", "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.activation.relu.RELU.local_dfdx", "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.activation.relu.RELU.local_dfdq"], ["", "def", "backward", "(", "self", ",", "gradient", ")", ":", "\n", "        ", "\"\"\"Calculate backward pass for singular example.\"\"\"", "\n", "# make sure x is decrypted into a numpy array (implicitly), and summed", "\n", "# in case it is a commuted sum, but this wont make a difference if not", "\n", "x", "=", "np", ".", "array", "(", "self", ".", "inputs", ".", "pop", "(", ")", ")", "\n", "\n", "# df/dx", "\n", "dfdx", "=", "self", ".", "local_dfdx", "(", "x", ",", "self", ".", "q", ")", "*", "gradient", "\n", "# df/dq", "\n", "dfdq", "=", "self", ".", "local_dfdq", "(", "x", ",", "self", ".", "q", ")", "*", "gradient", "\n", "\n", "# this function was called using a FILO popped queue", "\n", "# so we maintain the order of inputs by flipping again using a FILO que", "\n", "# again", "\n", "# x = [1, 2, 3, 4, 5] # iterate in forward order -> (matters)", "\n", "# df = [1, 2, 3, 4, 5] # working backwards for \"backward\" <- (matters)", "\n", "# update = [5, 4, 3, 2, 1] # update in forward order <- (arbitrary)", "\n", "self", ".", "gradients", ".", "append", "(", "{", "\"dfdq\"", ":", "dfdq", ",", "\"dfdx\"", ":", "dfdx", "}", ")", "\n", "return", "dfdx", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.activation.relu.RELU.local_dfdx": [[77, 82], ["None"], "methods", ["None"], ["", "def", "local_dfdx", "(", "self", ",", "x", ",", "q", ")", ":", "\n", "        ", "\"\"\"Calculate local derivative dfdx.\"\"\"", "\n", "zeroth", "=", "0.5", "\n", "first", "=", "8", "/", "(", "3", "*", "np", ".", "pi", "*", "q", ")", "\n", "return", "zeroth", "+", "first", "*", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.activation.relu.RELU.local_dfdq": [[83, 89], ["None"], "methods", ["None"], ["", "def", "local_dfdq", "(", "self", ",", "x", ",", "q", ")", ":", "\n", "        ", "\"\"\"Calculate local derivative dfdq.\"\"\"", "\n", "# \\frac{1}{3 pi} - \\frac{4x ^ 2}{3 pi q ^ 2}", "\n", "zeroth", "=", "1", "/", "(", "3", "*", "np", ".", "pi", ")", "\n", "second", "=", "(", "4", "*", "(", "x", "**", "2", ")", ")", "/", "(", "3", "*", "np", ".", "pi", "*", "(", "q", "**", "2", ")", ")", "\n", "return", "zeroth", "-", "second", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.activation.relu.RELU.update": [[90, 93], ["relu.RELU.updater"], "methods", ["home.repos.pwc.inspect_result.DreamingRaven_python-reseal.graph.node.Node.updater"], ["", "def", "update", "(", "self", ")", ":", "\n", "        ", "\"\"\"Update node state/ weights for a single example.\"\"\"", "\n", "self", ".", "updater", "(", "parm_names", "=", "[", "\"q\"", "]", ",", "it", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.activation.relu.RELU.updates": [[94, 97], ["relu.RELU.updater"], "methods", ["home.repos.pwc.inspect_result.DreamingRaven_python-reseal.graph.node.Node.updater"], ["", "def", "updates", "(", "self", ")", ":", "\n", "        ", "\"\"\"Update node state/ weights for multiple examples simultaneously.\"\"\"", "\n", "self", ".", "updater", "(", "parm_names", "=", "[", "\"q\"", "]", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.activation.argmax_test.ArgmaxTest.setUp": [[16, 19], ["time.time"], "methods", ["None"], ["def", "setUp", "(", "self", ")", ":", "\n", "        ", "\"\"\"Start timer and init variables.\"\"\"", "\n", "self", ".", "start_time", "=", "time", ".", "time", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.activation.argmax_test.ArgmaxTest.tearDown": [[20, 24], ["print", "time.time", "argmax_test.ArgmaxTest.id"], "methods", ["None"], ["", "def", "tearDown", "(", "self", ")", ":", "\n", "        ", "\"\"\"Calculate and print time delta.\"\"\"", "\n", "t", "=", "time", ".", "time", "(", ")", "-", "self", ".", "start_time", "\n", "print", "(", "'%s: %.3f'", "%", "(", "self", ".", "id", "(", ")", ",", "t", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.activation.argmax_test.ArgmaxTest.test_init": [[25, 29], ["fhez.nn.activation.argmax.Argmax", "argmax_test.ArgmaxTest.assertIsInstance"], "methods", ["None"], ["", "def", "test_init", "(", "self", ")", ":", "\n", "        ", "\"\"\"Check SGD can be initialised using defaults.\"\"\"", "\n", "activation", "=", "Argmax", "(", ")", "\n", "self", ".", "assertIsInstance", "(", "activation", ",", "Argmax", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.activation.argmax_test.ArgmaxTest.test_backward": [[30, 42], ["fhez.nn.activation.argmax.Argmax", "fhez.nn.activation.argmax.Argmax.forward", "numpy.testing.assert_array_almost_equal", "fhez.nn.activation.argmax.Argmax.backward", "numpy.array", "numpy.testing.assert_array_almost_equal", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.DreamingRaven_python-reseal.loss.mse.MSE.forward", "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.loss.mse.MSE.backward"], ["", "def", "test_backward", "(", "self", ")", ":", "\n", "        ", "\"\"\"Test argmax backward pass with known values.\"\"\"", "\n", "a", "=", "[", "1.42", ",", "-", "0.4", ",", "0.23", "]", "\n", "argmax", "=", "Argmax", "(", ")", "\n", "py_hat", "=", "argmax", ".", "forward", "(", "a", ")", "\n", "py_hat_truth", "=", "[", "1", ",", "0", ",", "0", "]", "\n", "np", ".", "testing", ".", "assert_array_almost_equal", "(", "py_hat", ",", "py_hat_truth", ",", "\n", "decimal", "=", "3", ",", "verbose", "=", "True", ")", "\n", "grad", "=", "argmax", ".", "backward", "(", "gradient", "=", "np", ".", "array", "(", "[", "1", ",", "0", ",", "0", "]", ")", ")", "\n", "grad_truth", "=", "np", ".", "array", "(", "[", "1", ",", "0", ",", "0", "]", ")", "\n", "np", ".", "testing", ".", "assert_array_almost_equal", "(", "grad", ",", "grad_truth", ",", "\n", "decimal", "=", "3", ",", "verbose", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.activation.argmax_test.ArgmaxTest.test_forward": [[43, 51], ["fhez.nn.activation.argmax.Argmax", "fhez.nn.activation.argmax.Argmax.forward", "numpy.testing.assert_array_almost_equal"], "methods", ["home.repos.pwc.inspect_result.DreamingRaven_python-reseal.loss.mse.MSE.forward"], ["", "def", "test_forward", "(", "self", ")", ":", "\n", "        ", "\"\"\"Test argmax forward pass with known values.\"\"\"", "\n", "a", "=", "[", "1.42", ",", "-", "0.4", ",", "0.23", "]", "\n", "argmax", "=", "Argmax", "(", ")", "\n", "py_hat", "=", "argmax", ".", "forward", "(", "a", ")", "\n", "py_hat_truth", "=", "[", "1", ",", "0", ",", "0", "]", "\n", "np", ".", "testing", ".", "assert_array_almost_equal", "(", "py_hat", ",", "py_hat_truth", ",", "\n", "decimal", "=", "3", ",", "verbose", "=", "True", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.activation.linear.Linear.__init__": [[17, 22], ["numpy.array", "numpy.array", "fhez.nn.optimiser.adam.Adam"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "m", "=", "np", ".", "array", "(", "[", "1", "]", ")", ",", "c", "=", "np", ".", "array", "(", "[", "0", "]", ")", ",", "optimiser", "=", "Adam", "(", ")", ")", ":", "\n", "        ", "\"\"\"Initialise weighted and biased linear function.\"\"\"", "\n", "self", ".", "m", "=", "m", "\n", "self", ".", "c", "=", "c", "\n", "self", ".", "optimiser", "=", "optimiser", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.activation.linear.Linear.schema": [[23, 43], ["marshmallow.Schema.from_dict", "marshmallow.fields.Float", "fhez.fields.numpyfield.NumpyField"], "methods", ["None"], ["", "@", "property", "\n", "def", "schema", "(", "self", ")", ":", "\n", "        ", "\"\"\"Get Marshmallow schema representation of this class.\n\n        Marshmallow schemas allow for easy and trustworthy serialisation\n        and deserialisation of arbitrary objects either to inbulit types or\n        json formats. This is an inherited member of the abstract class\n        Serialise.\n\n        .. note::\n\n            Anything not listed here will inevitably be lost, ensure anything\n            important is identified and expressley stated its type and\n            structure.\n        \"\"\"", "\n", "schema_dict", "=", "{", "\n", "\"_m\"", ":", "mar", ".", "fields", ".", "Float", "(", ")", ",", "\n", "\"_c\"", ":", "NumpyField", "(", ")", ",", "\n", "}", "\n", "return", "mar", ".", "Schema", ".", "from_dict", "(", "schema_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.activation.linear.Linear.optimiser": [[51, 55], ["None"], "methods", ["None"], ["", "@", "optimiser", ".", "setter", "\n", "def", "optimiser", "(", "self", ",", "optimiser", ")", ":", "\n", "        ", "\"\"\"Set current optimiser object.\"\"\"", "\n", "self", ".", "_optimiser", "=", "optimiser", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.activation.linear.Linear.m": [[64, 67], ["numpy.array"], "methods", ["None"], ["", "@", "m", ".", "setter", "\n", "def", "m", "(", "self", ",", "m", ")", ":", "\n", "        ", "self", ".", "_m", "=", "np", ".", "array", "(", "m", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.activation.linear.Linear.c": [[76, 79], ["numpy.array"], "methods", ["None"], ["", "@", "c", ".", "setter", "\n", "def", "c", "(", "self", ",", "c", ")", ":", "\n", "        ", "self", ".", "_c", "=", "np", ".", "array", "(", "c", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.activation.linear.Linear.forward": [[80, 86], ["linear.Linear.inputs.append"], "methods", ["home.repos.pwc.inspect_result.DreamingRaven_python-reseal.graph.dll.DLL.append"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"Get linear forward propogation.\"\"\"", "\n", "# cache input for later re-use", "\n", "self", ".", "inputs", ".", "append", "(", "x", ")", "\n", "# return computed forward propogation of node", "\n", "return", "self", ".", "m", "*", "x", "+", "self", ".", "c", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.activation.linear.Linear.backward": [[87, 101], ["numpy.array", "linear.Linear.gradients.append", "linear.Linear.inputs.pop"], "methods", ["home.repos.pwc.inspect_result.DreamingRaven_python-reseal.graph.dll.DLL.append"], ["", "def", "backward", "(", "self", ",", "gradient", ")", ":", "\n", "        ", "\"\"\"Get gradients of backward prop.\"\"\"", "\n", "# get any cached values required", "\n", "x", "=", "np", ".", "array", "(", "self", ".", "inputs", ".", "pop", "(", ")", ")", "\n", "# calculate gradients respect to inputs and other parameters", "\n", "dfdx", "=", "self", ".", "m", "*", "gradient", "\n", "dfdm", "=", "x", "*", "gradient", "\n", "dfdc", "=", "1", "*", "gradient", "\n", "# assign gradients to dictionary for later retrieval and use", "\n", "self", ".", "gradients", ".", "append", "(", "{", "\"dfdx\"", ":", "dfdx", ",", "\n", "\"dfdm\"", ":", "dfdm", ",", "\n", "\"dfdc\"", ":", "dfdc", "}", ")", "\n", "# return the gradient with respect to input for immediate use", "\n", "return", "dfdx", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.activation.linear.Linear.update": [[102, 105], ["linear.Linear.updater"], "methods", ["home.repos.pwc.inspect_result.DreamingRaven_python-reseal.graph.node.Node.updater"], ["", "def", "update", "(", "self", ")", ":", "\n", "        ", "\"\"\"Update any weights and biases for a single example.\"\"\"", "\n", "self", ".", "updater", "(", "parm_names", "=", "[", "\"m\"", ",", "\"c\"", "]", ",", "it", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.activation.linear.Linear.updates": [[106, 109], ["linear.Linear.updater"], "methods", ["home.repos.pwc.inspect_result.DreamingRaven_python-reseal.graph.node.Node.updater"], ["", "def", "updates", "(", "self", ")", ":", "\n", "        ", "\"\"\"Update any weights and biases based on an avg of all examples.\"\"\"", "\n", "self", ".", "updater", "(", "parm_names", "=", "[", "\"m\"", ",", "\"c\"", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.activation.linear.Linear.cost": [[110, 114], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "cost", "(", "self", ")", ":", "\n", "        ", "\"\"\"Get the computational cost of this Node.\"\"\"", "\n", "return", "2", "\n", "", "", ""]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.loss.mae_test.MAETest.setUp": [[15, 18], ["time.time"], "methods", ["None"], ["    ", "def", "setUp", "(", "self", ")", ":", "\n", "        ", "\"\"\"Start timer and init variables.\"\"\"", "\n", "self", ".", "start_time", "=", "time", ".", "time", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.loss.mae_test.MAETest.tearDown": [[19, 23], ["print", "time.time", "mae_test.MAETest.id"], "methods", ["None"], ["", "def", "tearDown", "(", "self", ")", ":", "\n", "        ", "\"\"\"Calculate and print time delta.\"\"\"", "\n", "t", "=", "time", ".", "time", "(", ")", "-", "self", ".", "start_time", "\n", "print", "(", "'%s: %.3f'", "%", "(", "self", ".", "id", "(", ")", ",", "t", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.loss.mae_test.MAETest.test_test": [[24, 26], ["None"], "methods", ["None"], ["", "def", "test_test", "(", "self", ")", ":", "\n", "        ", "\"\"\"Check this test is being called.\"\"\"", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.loss.mae_test.MAETest.test_init": [[27, 30], ["fhez.nn.loss.mae.MAE"], "methods", ["None"], ["", "def", "test_init", "(", "self", ")", ":", "\n", "        ", "\"\"\"Test init.\"\"\"", "\n", "mae", "=", "MAE", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.loss.mae_test.MAETest.test_loss_equal": [[31, 41], ["fhez.nn.loss.mae.MAE", "fhez.nn.activation.linear.Linear", "numpy.array", "numpy.sum", "fhez.nn.loss.mae.MAE.forward", "fhez.nn.loss.mae.MAE.backward", "mae_test.MAETest.assertEqual", "fhez.nn.activation.linear.Linear.forward", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.rearray.ReArray.sum", "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.loss.mse.MSE.forward", "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.loss.mse.MSE.backward", "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.loss.mse.MSE.forward"], ["", "def", "test_loss_equal", "(", "self", ")", ":", "\n", "        ", "\"\"\"Check when completeley accurate that gradient is 0.\"\"\"", "\n", "mae", "=", "MAE", "(", ")", "\n", "node", "=", "Linear", "(", ")", "\n", "x", "=", "np", ".", "array", "(", "[", "1", ",", "0.2", ",", "3", "]", ")", "\n", "y_hat", "=", "np", ".", "sum", "(", "node", ".", "forward", "(", "x", ")", ")", "\n", "y", "=", "y_hat", "\n", "loss", "=", "mae", ".", "forward", "(", "y", "=", "y", ",", "y_hat", "=", "y_hat", ")", "\n", "out", "=", "mae", ".", "backward", "(", "gradient", "=", "loss", ")", "\n", "self", ".", "assertEqual", "(", "out", ",", "np", ".", "array", "(", "[", "0", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.loss.mae_test.MAETest.test_loss_different": [[42, 51], ["fhez.nn.loss.mae.MAE", "numpy.array", "numpy.array", "fhez.nn.loss.mae.MAE.forward", "fhez.nn.loss.mae.MAE.backward", "mae_test.MAETest.assertEqual", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.DreamingRaven_python-reseal.loss.mse.MSE.forward", "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.loss.mse.MSE.backward"], ["", "def", "test_loss_different", "(", "self", ")", ":", "\n", "        ", "\"\"\"Check gradient calculation when not 100% accurate.\"\"\"", "\n", "mae", "=", "MAE", "(", ")", "\n", "y_hat", "=", "np", ".", "array", "(", "[", "0.7", ",", "0.5", ",", "0.3", "]", ")", "\n", "y", "=", "np", ".", "array", "(", "[", "0.3", ",", "0.5", ",", "0.7", "]", ")", "\n", "loss", "=", "mae", ".", "forward", "(", "y", "=", "y", ",", "y_hat", "=", "y_hat", ")", "\n", "out", "=", "mae", ".", "backward", "(", "gradient", "=", "loss", ")", "\n", "# since inputs difference are equidistent the average gradient is 0", "\n", "self", ".", "assertEqual", "(", "out", ",", "np", ".", "array", "(", "[", "0", "]", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.loss.mae.MAE.forward": [[12, 23], ["mae.MAE.inputs.append", "numpy.mean", "numpy.absolute"], "methods", ["home.repos.pwc.inspect_result.DreamingRaven_python-reseal.graph.dll.DLL.append"], ["def", "forward", "(", "self", ",", "y", ":", "np", ".", "ndarray", ",", "y_hat", ":", "np", ".", "ndarray", ")", ":", "\n", "        ", "r\"\"\"Calculate the loss of the output given the ground truth.\n\n        This will take multiple values for both :math:`y` and :math:`\\hat{y}`,\n        and return a\n        single value that is the mean of their absolute difference.\n\n        :math:`\\text{MAE}=\\frac{\\sum_{i=0}^{N-1} \\left\\|y-\\hat{y}\\right\\| }{N}`\n        \"\"\"", "\n", "self", ".", "inputs", ".", "append", "(", "{", "\"y\"", ":", "y", ",", "\"y_hat\"", ":", "y_hat", "}", ")", "\n", "return", "np", ".", "mean", "(", "np", ".", "absolute", "(", "y", "-", "y_hat", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.loss.mae.MAE.backward": [[24, 45], ["mae.MAE.inputs.pop", "len", "numpy.mean", "numpy.mean"], "methods", ["None"], ["", "def", "backward", "(", "self", ",", "gradient", ")", ":", "\n", "        ", "r\"\"\"Calculate MAE gradient with respect to :math:`\\hat{y}`.\n\n        This will take a single gradient value, and return the average gradient\n        with respect to :math:`\\hat{y}`\n\n        :math:`\\dfrac{d}{d\\hat{y}}(\\text{MAE}) = \\begin{cases} +1,\\quad \\hat{y}>y\\\\ \\ \\ \\ 0,\\quad \\hat{y}=y\\\\-1,\\quad \\hat{y}<y \\end{cases}`\n        \"\"\"", "\n", "inp", "=", "self", ".", "inputs", ".", "pop", "(", ")", "\n", "y", "=", "inp", "[", "\"y\"", "]", "\n", "y_hat", "=", "inp", "[", "\"y_hat\"", "]", "\n", "# create an array by element wise comparison against the two inputs", "\n", "# if y==y_hat, then grad=0", "\n", "# if y_hat>y, then grad=1", "\n", "# if y_hat<y, then grad=-1", "\n", "local_grads", "=", "(", "1", "*", "(", "y_hat", ">", "y", ")", ")", "+", "(", "-", "1", "*", "(", "y_hat", "<", "y", ")", ")", "\n", "# check if we need to give a multidimensional output if each y item", "\n", "# is itself another dimension", "\n", "if", "len", "(", "y_hat", ".", "shape", ")", ">", "1", ":", "\n", "            ", "return", "np", ".", "mean", "(", "local_grads", ",", "axis", "=", "0", ")", "*", "gradient", "\n", "", "return", "np", ".", "mean", "(", "local_grads", ")", "*", "gradient", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.loss.mae.MAE.update": [[46, 49], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ")", ":", "\n", "        ", "\"\"\"Do nothing as there are no parameters to update.\"\"\"", "\n", "return", "NotImplemented", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.loss.mae.MAE.updates": [[50, 53], ["None"], "methods", ["None"], ["", "def", "updates", "(", "self", ")", ":", "\n", "        ", "\"\"\"Do nothing as there are no parameters to update.\"\"\"", "\n", "return", "NotImplemented", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.loss.mae.MAE.cost": [[54, 57], ["None"], "methods", ["None"], ["", "def", "cost", "(", "self", ")", ":", "\n", "        ", "\"\"\"Get computational cost of the forward function.\"\"\"", "\n", "return", "2", "\n", "", "", ""]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.loss.cce.CCE.forward": [[24, 51], ["numpy.clip", "cce.CCE.inputs.append", "cce.CCE.loss", "numpy.sum", "numpy.sum"], "methods", ["home.repos.pwc.inspect_result.DreamingRaven_python-reseal.graph.dll.DLL.append", "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.loss.cce.CCE.loss", "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.rearray.ReArray.sum", "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.rearray.ReArray.sum"], ["def", "forward", "(", "self", ",", "signal", "=", "None", ",", "\n", "y", ":", "np", ".", "ndarray", "=", "None", ",", "\n", "y_hat", ":", "np", ".", "ndarray", "=", "None", ",", "\n", "check", "=", "False", ")", ":", "\n", "        ", "\"\"\"Calculate cross entropy and save its state for backprop.\n\n        Can either be given a network signal with both y_hat and y stacked, or\n        you can explicitly define y and y_hat.\n        \"\"\"", "\n", "if", "signal", "is", "None", ":", "\n", "            ", "msg", "=", "\"if no signal provided then you must provide y and y_hat\"", "\n", "assert", "y_hat", "is", "not", "None", ",", "msg", "\n", "assert", "y", "is", "not", "None", ",", "msg", "\n", "", "else", ":", "\n", "# THE ORDER IS DEPENDENT ON THE ORDER OF EDGES!", "\n", "            ", "y_hat", "=", "signal", "[", "0", "]", "\n", "y", "=", "signal", "[", "1", "]", "\n", "\n", "", "if", "check", ":", "\n", "            ", "assert", "np", ".", "sum", "(", "y", ")", "==", "1.0", ",", "\"sum of y should equal exactly 1\"", "\n", "assert", "np", ".", "sum", "(", "y_hat", ")", "==", "1.0", ",", "\"sum of y_hat should equal exactly 1\"", "\n", "# CLIP values so we never get log(0) = infinity!", "\n", "# also clipping the maximum to reduce bias!", "\n", "# e.g clip([0, 1, 0]) = [1e-07, 0.9999999, 1e-07]", "\n", "", "y_hat_clipped", "=", "np", ".", "clip", "(", "y_hat", ",", "1e-07", ",", "1", "-", "1e-07", ")", "\n", "self", ".", "inputs", ".", "append", "(", "{", "\"y\"", ":", "y", ",", "\"y_hat\"", ":", "y_hat_clipped", "}", ")", "\n", "return", "self", ".", "loss", "(", "y", "=", "y", ",", "y_hat", "=", "y_hat_clipped", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.loss.cce.CCE.loss": [[52, 68], ["numpy.sum", "numpy.log"], "methods", ["home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.rearray.ReArray.sum"], ["", "def", "loss", "(", "self", ",", "y", ":", "np", ".", "ndarray", ",", "y_hat", ":", "np", ".", "ndarray", ")", ":", "\n", "        ", "r\"\"\"Calculate the categorical cross entryopy statelessley.\n\n        .. math::\n\n            CCE(\\hat{p(y)}) = -\\sum_{i=0}^{C-1} y_i * \\log_e(\\hat{y_i})\n\n        where:\n\n        .. math::\n\n            \\sum_{i=0}^{C-1} \\hat{p(y_i)} = 1\n\n            \\sum_{i=0}^{C-1} p(y_i) = 1\n        \"\"\"", "\n", "return", "-", "np", ".", "sum", "(", "y", "*", "np", ".", "log", "(", "y_hat", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.loss.cce.CCE.backward": [[69, 86], ["cce.CCE.inputs.pop", "cce.CCE.items", "numpy.array"], "methods", ["None"], ["", "def", "backward", "(", "self", ",", "gradient", ":", "np", ".", "ndarray", ")", ":", "\n", "        ", "r\"\"\"Calculate gradient of loss with respect to :math:`\\hat{y}`.\n\n        .. math::\n\n            \\frac{d\\textit{CCE}(\\hat{p(y)})}{d\\hat{p(y_i)}} =\n            \\frac{-1}{\\hat{p(y_i)}}p(y_i)\n        \"\"\"", "\n", "inp", "=", "self", ".", "inputs", ".", "pop", "(", ")", "# get original potentially encrypted values", "\n", "for", "key", ",", "value", "in", "inp", ".", "items", "(", ")", ":", "\n", "# for each value in dictionary ensure it is a numpy array", "\n", "# which also means decrypting if possible", "\n", "            ", "inp", "[", "key", "]", "=", "np", ".", "array", "(", "value", ")", "\n", "\n", "", "dfdpy", "=", "-", "1", "/", "(", "inp", "[", "\"y_hat\"", "]", ")", "# calculate local gradient", "\n", "dfdpy", "=", "dfdpy", "*", "inp", "[", "\"y\"", "]", "# multiply each by actual probability", "\n", "return", "dfdpy", "*", "gradient", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.loss.cce.CCE.cost": [[87, 91], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "cost", "(", "self", ")", ":", "\n", "        ", "\"\"\"Get 0 cost of plaintext loss calculation.\"\"\"", "\n", "return", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.loss.loss.Loss.cache": [[24, 27], ["None"], "methods", ["None"], ["", "@", "cache", ".", "setter", "\n", "def", "cache", "(", "self", ",", "cache", ")", ":", "\n", "        ", "self", ".", "_cache", "=", "cache", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.loss.loss.Loss.is_cache_enabled": [[36, 40], ["None"], "methods", ["None"], ["", "@", "is_cache_enabled", ".", "setter", "\n", "def", "is_cache_enabled", "(", "self", ",", "state", ":", "bool", ")", ":", "\n", "        ", "\"\"\"Set the state of the cache.\"\"\"", "\n", "self", ".", "_is_cache_enabled", "=", "state", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.loss.loss.Loss.enable_cache": [[41, 44], ["None"], "methods", ["None"], ["", "def", "enable_cache", "(", "self", ")", ":", "\n", "        ", "\"\"\"Enable caching.\"\"\"", "\n", "self", ".", "is_cache_enabled", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.loss.loss.Loss.disable_cache": [[45, 48], ["None"], "methods", ["None"], ["", "def", "disable_cache", "(", "self", ")", ":", "\n", "        ", "\"\"\"Disable caching.\"\"\"", "\n", "self", ".", "is_cache_enabled", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.loss.loss.Loss.inputs": [[49, 65], ["collections.deque", "loss.Loss.cache.get", "collections.deque"], "methods", ["None"], ["", "@", "property", "\n", "def", "inputs", "(", "self", ")", ":", "\n", "        ", "\"\"\"Get cached input stack.\n\n        Neural networks backpropogation requires cached inputs to calculate\n        the gradient with respect to x and the weights. This is a utility\n        method that initialises a stack and allows you to easily append\n        or pop off of it so that the computation can occur in FILO.\n        \"\"\"", "\n", "if", "self", ".", "cache", ".", "get", "(", "\"_inputs\"", ")", "is", "None", ":", "\n", "            ", "self", ".", "cache", "[", "\"_inputs\"", "]", "=", "deque", "(", ")", "\n", "", "if", "self", ".", "is_cache_enabled", ":", "\n", "# if cache enabled return real stack", "\n", "            ", "return", "self", ".", "cache", "[", "\"_inputs\"", "]", "\n", "# if cache disabled return dud que", "\n", "", "return", "deque", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.loss.loss.Loss.update": [[66, 69], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ")", ":", "\n", "        ", "\"\"\"Loss funcs have no params so do nothing.\"\"\"", "\n", "return", "NotImplemented", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.loss.loss.Loss.updates": [[70, 73], ["None"], "methods", ["None"], ["", "def", "updates", "(", "self", ")", ":", "\n", "        ", "\"\"\"Loss funcs have no params so do nothing.\"\"\"", "\n", "return", "NotImplemented", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.loss.loss.Loss.forward": [[76, 79], ["None"], "methods", ["None"], ["", "@", "abc", ".", "abstractmethod", "\n", "def", "forward", "(", "self", ",", "signal", ":", "np", ".", "ndarray", ",", "y", ":", "np", ".", "ndarray", ",", "y_hat", ":", "np", ".", "ndarray", ")", ":", "\n", "        ", "\"\"\"Calculate loss(es) given one or more truths.\"\"\"", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.loss.loss.Loss.backward": [[80, 83], ["None"], "methods", ["None"], ["", "@", "abc", ".", "abstractmethod", "\n", "def", "backward", "(", "self", ",", "gradient", ":", "np", ".", "ndarray", ")", ":", "\n", "        ", "r\"\"\"Calculate gradient of loss with respect to :math:`\\hat{y}`.\"\"\"", "\n", "", "", ""]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.loss.mse_test.mseTest.setUp": [[15, 18], ["time.time"], "methods", ["None"], ["    ", "def", "setUp", "(", "self", ")", ":", "\n", "        ", "\"\"\"Start timer and init variables.\"\"\"", "\n", "self", ".", "start_time", "=", "time", ".", "time", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.loss.mse_test.mseTest.tearDown": [[19, 23], ["print", "time.time", "mse_test.mseTest.id"], "methods", ["None"], ["", "def", "tearDown", "(", "self", ")", ":", "\n", "        ", "\"\"\"Calculate and print time delta.\"\"\"", "\n", "t", "=", "time", ".", "time", "(", ")", "-", "self", ".", "start_time", "\n", "print", "(", "'%s: %.3f'", "%", "(", "self", ".", "id", "(", ")", ",", "t", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.loss.mse_test.mseTest.test_test": [[24, 26], ["None"], "methods", ["None"], ["", "def", "test_test", "(", "self", ")", ":", "\n", "        ", "\"\"\"Check this test is being called.\"\"\"", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.loss.mse_test.mseTest.test_init": [[27, 30], ["fhez.nn.loss.mse.MSE"], "methods", ["None"], ["", "def", "test_init", "(", "self", ")", ":", "\n", "        ", "\"\"\"Test init.\"\"\"", "\n", "MSE", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.loss.mse_test.mseTest.test_loss_equal": [[31, 41], ["fhez.nn.loss.mse.MSE", "fhez.nn.activation.linear.Linear", "numpy.array", "numpy.sum", "fhez.nn.loss.mse.MSE.forward", "fhez.nn.loss.mse.MSE.backward", "mse_test.mseTest.assertEqual", "fhez.nn.activation.linear.Linear.forward", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.rearray.ReArray.sum", "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.loss.mse.MSE.forward", "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.loss.mse.MSE.backward", "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.loss.mse.MSE.forward"], ["", "def", "test_loss_equal", "(", "self", ")", ":", "\n", "        ", "\"\"\"Check when completeley accurate that gradient is 0.\"\"\"", "\n", "mse", "=", "MSE", "(", ")", "\n", "node", "=", "Linear", "(", ")", "\n", "x", "=", "np", ".", "array", "(", "[", "1", ",", "0.2", ",", "3", "]", ")", "\n", "y_hat", "=", "np", ".", "sum", "(", "node", ".", "forward", "(", "x", ")", ")", "\n", "y", "=", "y_hat", "\n", "loss", "=", "mse", ".", "forward", "(", "y", "=", "y", ",", "y_hat", "=", "y_hat", ")", "\n", "out", "=", "mse", ".", "backward", "(", "gradient", "=", "loss", ")", "\n", "self", ".", "assertEqual", "(", "out", ",", "np", ".", "array", "(", "[", "0", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.loss.mse_test.mseTest.test_loss_different": [[42, 51], ["fhez.nn.loss.mse.MSE", "numpy.array", "numpy.array", "fhez.nn.loss.mse.MSE.forward", "fhez.nn.loss.mse.MSE.backward", "mse_test.mseTest.assertEqual", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.DreamingRaven_python-reseal.loss.mse.MSE.forward", "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.loss.mse.MSE.backward"], ["", "def", "test_loss_different", "(", "self", ")", ":", "\n", "        ", "\"\"\"Check gradient calculation when not 100% accurate.\"\"\"", "\n", "mse", "=", "MSE", "(", ")", "\n", "y_hat", "=", "np", ".", "array", "(", "[", "0.7", ",", "0.5", ",", "0.3", "]", ")", "\n", "y", "=", "np", ".", "array", "(", "[", "0.3", ",", "0.5", ",", "0.7", "]", ")", "\n", "loss", "=", "mse", ".", "forward", "(", "y", "=", "y", ",", "y_hat", "=", "y_hat", ")", "\n", "out", "=", "mse", ".", "backward", "(", "gradient", "=", "loss", ")", "\n", "# since inputs difference are equidistent the average gradient is 0", "\n", "self", ".", "assertEqual", "(", "out", ",", "np", ".", "array", "(", "[", "0", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.loss.mse_test.mseTest.test_forward": [[52, 59], ["fhez.nn.loss.mse.MSE", "numpy.array", "numpy.array", "fhez.nn.loss.mse.MSE.forward", "mse_test.mseTest.assertEqual", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.DreamingRaven_python-reseal.loss.mse.MSE.forward"], ["", "def", "test_forward", "(", "self", ")", ":", "\n", "        ", "\"\"\"Check forward loss calculation.\"\"\"", "\n", "mse", "=", "MSE", "(", ")", "\n", "y_hat", "=", "np", ".", "array", "(", "[", "1", ",", "3", "]", ")", "\n", "y", "=", "np", ".", "array", "(", "[", "6", ",", "6", "]", ")", "\n", "loss", "=", "mse", ".", "forward", "(", "y", "=", "y", ",", "y_hat", "=", "y_hat", ")", "\n", "self", ".", "assertEqual", "(", "loss", ",", "np", ".", "array", "(", "[", "17", "]", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.loss.loss_test.LossTest.setUp": [[16, 19], ["time.time"], "methods", ["None"], ["def", "setUp", "(", "self", ")", ":", "\n", "        ", "\"\"\"Start timer and init variables.\"\"\"", "\n", "self", ".", "start_time", "=", "time", ".", "time", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.loss.loss_test.LossTest.tearDown": [[20, 24], ["print", "time.time", "loss_test.LossTest.id"], "methods", ["None"], ["", "def", "tearDown", "(", "self", ")", ":", "\n", "        ", "\"\"\"Calculate and print time delta.\"\"\"", "\n", "t", "=", "time", ".", "time", "(", ")", "-", "self", ".", "start_time", "\n", "print", "(", "'%s: %.3f'", "%", "(", "self", ".", "id", "(", ")", ",", "t", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.loss.loss_test.LossTest.linear": [[25, 28], ["None"], "methods", ["None"], ["", "def", "linear", "(", "self", ",", "x", ",", "m", ",", "c", ")", ":", "\n", "        ", "\"\"\"Calculate standard linear function for testing against.\"\"\"", "\n", "return", "(", "m", "*", "x", ")", "+", "c", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.loss.loss_test.LossTest.y": [[29, 36], ["numpy.array"], "methods", ["None"], ["", "@", "property", "\n", "def", "y", "(", "self", ")", ":", "\n", "        ", "\"\"\"Get gaff truth for comparison.\"\"\"", "\n", "return", "np", ".", "array", "(", "[", "\n", "1", ",", "\n", "2", ",", "\n", "3", ",", "\n", "]", ")", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.loss.loss_test.LossTest.y_hat": [[38, 45], ["numpy.array"], "methods", ["None"], ["", "@", "property", "\n", "def", "y_hat", "(", "self", ")", ":", "\n", "        ", "\"\"\"Get gaff truth for comparison.\"\"\"", "\n", "return", "np", ".", "array", "(", "[", "\n", "3", ",", "\n", "-", "2", ",", "\n", "3", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.loss.loss_test.LossTest.test_test": [[48, 51], ["loss_test.LossTest.assertEqual"], "methods", ["None"], ["", "def", "test_test", "(", "self", ")", ":", "\n", "        ", "\"\"\"Check this test is being called.\"\"\"", "\n", "self", ".", "assertEqual", "(", "self", ".", "y", ".", "shape", ",", "self", ".", "y_hat", ".", "shape", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.loss.cce_test.CrossEntropyTest.setUp": [[18, 21], ["time.time"], "methods", ["None"], ["def", "setUp", "(", "self", ")", ":", "\n", "        ", "\"\"\"Start timer and init variables.\"\"\"", "\n", "self", ".", "start_time", "=", "time", ".", "time", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.loss.cce_test.CrossEntropyTest.tearDown": [[22, 26], ["print", "time.time", "cce_test.CrossEntropyTest.id"], "methods", ["None"], ["", "def", "tearDown", "(", "self", ")", ":", "\n", "        ", "\"\"\"Calculate and print time delta.\"\"\"", "\n", "t", "=", "time", ".", "time", "(", ")", "-", "self", ".", "start_time", "\n", "print", "(", "'%s: %.3f'", "%", "(", "self", ".", "id", "(", ")", ",", "t", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.loss.cce_test.CrossEntropyTest.test_init": [[27, 31], ["fhez.nn.loss.cce.CategoricalCrossEntropy", "cce_test.CrossEntropyTest.assertIsInstance"], "methods", ["None"], ["", "def", "test_init", "(", "self", ")", ":", "\n", "        ", "\"\"\"Check CCE can be initialised using defaults.\"\"\"", "\n", "loss", "=", "CategoricalCrossEntropy", "(", ")", "\n", "self", ".", "assertIsInstance", "(", "loss", ",", "CategoricalCrossEntropy", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.loss.cce_test.CrossEntropyTest.y": [[32, 40], ["numpy.array"], "methods", ["None"], ["", "@", "property", "\n", "def", "y", "(", "self", ")", ":", "\n", "        ", "\"\"\"Ground truth classification.\"\"\"", "\n", "return", "np", ".", "array", "(", "[", "\n", "1", ",", "\n", "0", ",", "\n", "0", ",", "\n", "0", "\n", "]", ")", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.loss.cce_test.CrossEntropyTest.y_hat": [[42, 54], ["numpy.array", "cce_test.CrossEntropyTest.assertEqual", "numpy.sum"], "methods", ["home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.rearray.ReArray.sum"], ["", "@", "property", "\n", "def", "y_hat", "(", "self", ")", ":", "\n", "        ", "\"\"\"Classification probability score (must add up to 1).\"\"\"", "\n", "t", "=", "np", ".", "array", "(", "[", "\n", "0.3", ",", "\n", "0.6", ",", "\n", "0.05", ",", "\n", "0.05", "\n", "]", ")", "\n", "# output of a softmax layer will always be normalised to add up to 1", "\n", "self", ".", "assertEqual", "(", "np", ".", "sum", "(", "t", ")", ",", "1", ")", "\n", "return", "t", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.loss.cce_test.CrossEntropyTest.test_forward": [[55, 67], ["fhez.nn.loss.cce.CategoricalCrossEntropy", "numpy.array", "numpy.array", "fhez.nn.loss.cce.CategoricalCrossEntropy.forward", "numpy.testing.assert_array_almost_equal"], "methods", ["home.repos.pwc.inspect_result.DreamingRaven_python-reseal.loss.mse.MSE.forward"], ["", "def", "test_forward", "(", "self", ")", ":", "\n", "        ", "\"\"\"Check generic CCE forward pass and results.\"\"\"", "\n", "loss_func", "=", "CategoricalCrossEntropy", "(", ")", "\n", "y", "=", "np", ".", "array", "(", "[", "0.99", "]", ")", "\n", "y_hat", "=", "np", ".", "array", "(", "[", "0.82", "]", ")", "\n", "loss", "=", "loss_func", ".", "forward", "(", "y", "=", "y", ",", "y_hat", "=", "y_hat", ",", "check", "=", "False", ")", "\n", "loss_true", "=", "0.196", "\n", "# loss_ski = log_loss(y_true=self.y,", "\n", "# y_pred=self.y_hat, normalize=False)", "\n", "np", ".", "testing", ".", "assert_array_almost_equal", "(", "loss", ",", "loss_true", ",", "\n", "decimal", "=", "3", ",", "\n", "verbose", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.loss.cce_test.CrossEntropyTest.test_forward_exact": [[68, 78], ["fhez.nn.loss.cce.CategoricalCrossEntropy", "numpy.array", "fhez.nn.loss.cce.CategoricalCrossEntropy.forward", "numpy.testing.assert_array_almost_equal"], "methods", ["home.repos.pwc.inspect_result.DreamingRaven_python-reseal.loss.mse.MSE.forward"], ["", "def", "test_forward_exact", "(", "self", ")", ":", "\n", "        ", "\"\"\"Check perfect CCE forward pass is 0.\"\"\"", "\n", "loss_func", "=", "CategoricalCrossEntropy", "(", ")", "\n", "y", "=", "np", ".", "array", "(", "[", "1", ",", "0", ",", "0", "]", ")", "\n", "loss", "=", "loss_func", ".", "forward", "(", "y", "=", "y", ",", "y_hat", "=", "y", ")", "\n", "loss_true", "=", "0", "\n", "# loss_ski = log_loss(y_true=y, y_pred=y, normalize=False)", "\n", "np", ".", "testing", ".", "assert_array_almost_equal", "(", "loss", ",", "loss_true", ",", "\n", "decimal", "=", "5", ",", "\n", "verbose", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.loss.cce_test.CrossEntropyTest.test_backward": [[79, 96], ["fhez.nn.loss.cce.CategoricalCrossEntropy", "numpy.array", "numpy.array", "fhez.nn.loss.cce.CategoricalCrossEntropy.forward", "numpy.testing.assert_array_almost_equal", "fhez.nn.loss.cce.CategoricalCrossEntropy.backward", "cce_test.CrossEntropyTest.assertEqual", "numpy.testing.assert_array_almost_equal", "len", "len", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.DreamingRaven_python-reseal.loss.mse.MSE.forward", "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.loss.mse.MSE.backward"], ["", "def", "test_backward", "(", "self", ")", ":", "\n", "        ", "\"\"\"Check backward pass with known value.\"\"\"", "\n", "loss_func", "=", "CategoricalCrossEntropy", "(", ")", "\n", "y", "=", "np", ".", "array", "(", "[", "0.99", "]", ")", "\n", "y_hat", "=", "np", ".", "array", "(", "[", "0.82", "]", ")", "\n", "loss", "=", "loss_func", ".", "forward", "(", "y", "=", "y", ",", "y_hat", "=", "y_hat", ",", "check", "=", "False", ")", "\n", "loss_true", "=", "0.196", "\n", "np", ".", "testing", ".", "assert_array_almost_equal", "(", "loss", ",", "loss_true", ",", "\n", "decimal", "=", "3", ",", "\n", "verbose", "=", "True", ")", "\n", "class_grads", "=", "loss_func", ".", "backward", "(", "loss", ")", "\n", "class_grads_true", "=", "np", ".", "array", "(", "[", "-", "1.22", "]", ")", "*", "y", "*", "loss_true", "\n", "self", ".", "assertEqual", "(", "len", "(", "class_grads", ")", ",", "len", "(", "y_hat", ")", ")", "\n", "# CCE Graph: https://www.desmos.com/calculator/jt6sgcg0to", "\n", "np", ".", "testing", ".", "assert_array_almost_equal", "(", "class_grads", ",", "class_grads_true", ",", "\n", "decimal", "=", "2", ",", "\n", "verbose", "=", "True", ")", "\n", "# self.assertEqual(class_grads, np.array([0.3969]))", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.loss.cce_test.CrossEntropyTest.test_backward_exact": [[98, 109], ["fhez.nn.loss.cce.CategoricalCrossEntropy", "numpy.array", "fhez.nn.loss.cce.CategoricalCrossEntropy.forward", "fhez.nn.loss.cce.CategoricalCrossEntropy.backward", "cce_test.CrossEntropyTest.assertEqual", "numpy.array", "numpy.testing.assert_array_almost_equal", "len", "len"], "methods", ["home.repos.pwc.inspect_result.DreamingRaven_python-reseal.loss.mse.MSE.forward", "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.loss.mse.MSE.backward"], ["", "def", "test_backward_exact", "(", "self", ")", ":", "\n", "        ", "\"\"\"Check backward pass when given perfect prediction.\"\"\"", "\n", "loss_func", "=", "CategoricalCrossEntropy", "(", ")", "\n", "y", "=", "np", ".", "array", "(", "[", "1", ",", "0", ",", "0", "]", ")", "\n", "loss", "=", "loss_func", ".", "forward", "(", "y", "=", "y", ",", "y_hat", "=", "y", ")", "\n", "class_grads", "=", "loss_func", ".", "backward", "(", "loss", ")", "\n", "self", ".", "assertEqual", "(", "len", "(", "class_grads", ")", ",", "len", "(", "y", ")", ")", "\n", "true_grad", "=", "np", ".", "array", "(", "[", "0", ",", "0", ",", "0", "]", ")", "\n", "np", ".", "testing", ".", "assert_array_almost_equal", "(", "class_grads", ",", "true_grad", ",", "\n", "decimal", "=", "5", ",", "\n", "verbose", "=", "True", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.loss.mse.MSE.forward": [[13, 34], ["mse.MSE.inputs.append", "numpy.mean"], "methods", ["home.repos.pwc.inspect_result.DreamingRaven_python-reseal.graph.dll.DLL.append"], ["def", "forward", "(", "self", ",", "signal", "=", "None", ",", "\n", "y", ":", "np", ".", "ndarray", "=", "None", ",", "\n", "y_hat", ":", "np", ".", "ndarray", "=", "None", ")", ":", "\n", "        ", "r\"\"\"Calculate the loss of the output given the ground truth.\n\n        This will take multiple values for both :math:`y` and :math:`\\hat{y}`,\n        and return a\n        single value that is the mean of their absolute difference.\n\n        :math:`\\text{MSE}=\\frac{\\sum_{i=0}^{N-1} (y-\\hat{y})^2 }{N}`\n        \"\"\"", "\n", "if", "signal", "is", "None", ":", "\n", "            ", "msg", "=", "\"if no signal provided then you must provide y and y_hat\"", "\n", "assert", "y_hat", "is", "not", "None", ",", "msg", "\n", "assert", "y", "is", "not", "None", ",", "msg", "\n", "", "else", ":", "\n", "# THE ORDER IS DEPENDENT ON THE ORDER OF EDGES!", "\n", "            ", "y_hat", "=", "signal", "[", "0", "]", "\n", "y", "=", "signal", "[", "1", "]", "\n", "", "self", ".", "inputs", ".", "append", "(", "{", "\"y\"", ":", "y", ",", "\"y_hat\"", ":", "y_hat", "}", ")", "\n", "return", "np", ".", "mean", "(", "(", "y", "-", "y_hat", ")", "**", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.loss.mse.MSE.backward": [[35, 54], ["mse.MSE.inputs.pop", "numpy.sum", "len", "numpy.mean", "numpy.mean"], "methods", ["home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fhez.rearray.ReArray.sum"], ["", "def", "backward", "(", "self", ",", "gradient", ")", ":", "\n", "        ", "r\"\"\"Calculate MSE gradient with respect to :math:`\\hat{y}`.\n\n        This will take a single gradient value, and return the average gradient\n        with respect to :math:`\\hat{y}`. If :math:`\\hat{y}` is more than 1 dim\n        it will return a multidimensional array of values which are the\n        average gradients in those dims.\n\n        :math:`\\frac{d}{d\\hat{y}}(\\text{MSE})=\\sum_{i=0}^{N-1} -2(y-\\hat{y})`\n        \"\"\"", "\n", "inp", "=", "self", ".", "inputs", ".", "pop", "(", ")", "\n", "y", "=", "inp", "[", "\"y\"", "]", "\n", "y_hat", "=", "inp", "[", "\"y_hat\"", "]", "\n", "local_grads", "=", "np", ".", "sum", "(", "(", "-", "2", "*", "(", "y", "-", "y_hat", ")", ")", ",", "axis", "=", "0", ")", "\n", "# check if we need to give a multidimensional output if each y item", "\n", "# is itself another dimension", "\n", "if", "len", "(", "y_hat", ".", "shape", ")", ">", "1", ":", "\n", "            ", "return", "np", ".", "mean", "(", "local_grads", ",", "axis", "=", "0", ")", "*", "gradient", "\n", "", "return", "np", ".", "mean", "(", "local_grads", ")", "*", "gradient", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.loss.mse.MSE.update": [[55, 58], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ")", ":", "\n", "        ", "\"\"\"Do nothing as there are no parameters to update.\"\"\"", "\n", "return", "NotImplemented", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.loss.mse.MSE.updates": [[59, 62], ["None"], "methods", ["None"], ["", "def", "updates", "(", "self", ")", ":", "\n", "        ", "\"\"\"Do nothing as there are no parameters to update.\"\"\"", "\n", "return", "NotImplemented", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.loss.mse.MSE.cost": [[63, 67], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "cost", "(", "self", ")", ":", "\n", "        ", "\"\"\"Get computational cost of the forward function.\"\"\"", "\n", "return", "2", "\n", "", "", ""]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fields.numpyfield_test.NumpyFieldTest.data_shape": [[16, 20], ["None"], "methods", ["None"], ["@", "property", "\n", "def", "data_shape", "(", "self", ")", ":", "\n", "        ", "\"\"\"Define desired data shape.\"\"\"", "\n", "return", "(", "3", ",", "32", ",", "32", ",", "3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fields.numpyfield_test.NumpyFieldTest.data": [[21, 26], ["numpy.random.rand"], "methods", ["None"], ["", "@", "property", "\n", "def", "data", "(", "self", ")", ":", "\n", "        ", "\"\"\"Get some generated data.\"\"\"", "\n", "array", "=", "np", ".", "random", ".", "rand", "(", "*", "self", ".", "data_shape", ")", "\n", "return", "array", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fields.numpyfield_test.NumpyFieldTest.setUp": [[27, 32], ["time.time"], "methods", ["None"], ["", "def", "setUp", "(", "self", ")", ":", "\n", "        ", "\"\"\"Start timer and init variables.\"\"\"", "\n", "self", ".", "weights", "=", "(", "1", ",", ")", "# if tuple allows cnn to initialise itself", "\n", "\n", "self", ".", "startTime", "=", "time", ".", "time", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fields.numpyfield_test.NumpyFieldTest.tearDown": [[33, 37], ["print", "time.time", "numpyfield_test.NumpyFieldTest.id"], "methods", ["None"], ["", "def", "tearDown", "(", "self", ")", ":", "\n", "        ", "\"\"\"Calculate and print time delta.\"\"\"", "\n", "t", "=", "time", ".", "time", "(", ")", "-", "self", ".", "startTime", "\n", "print", "(", "'%s: %.3f'", "%", "(", "self", ".", "id", "(", ")", ",", "t", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fields.numpyfield_test.NumpyFieldTest.test_serialDeserialFloat": [[38, 64], ["marshmallow.Schema.from_dict", "marshmallow.Schema.from_dict.dump", "marshmallow.Schema.from_dict.load", "numpyfield_test.NumpyFieldTest.assertIsInstance", "numpy.testing.assert_array_almost_equal", "numpyfield_test.NumpyFieldTest.assertEqual", "fhez.fields.numpyfield.NumpyField", "marshmallow.Schema.from_dict.", "marshmallow.Schema.from_dict."], "methods", ["None"], ["", "def", "test_serialDeserialFloat", "(", "self", ")", ":", "\n", "        ", "\"\"\"Check serialisation and deserialisation to dict as float.\"\"\"", "\n", "# set up necessary vars", "\n", "data", "=", "self", ".", "data", "\n", "sample", "=", "{", "\"data\"", ":", "data", "}", "\n", "schema", "=", "mar", ".", "Schema", ".", "from_dict", "(", "{", "\"data\"", ":", "NumpyField", "(", ")", "}", ")", "\n", "\n", "# now test serialisation", "\n", "out", "=", "schema", "(", ")", ".", "dump", "(", "sample", ")", "\n", "\n", "# now test deserialisation", "\n", "deserial", "=", "schema", "(", ")", ".", "load", "(", "out", ")", "\n", "\n", "# print(\"DESERIAL OUTPUT TYPE: {}\".format(type(out)))", "\n", "self", ".", "assertIsInstance", "(", "out", ",", "dict", ")", "\n", "\n", "# check equality", "\n", "np", ".", "testing", ".", "assert_array_almost_equal", "(", "\n", "sample", "[", "\"data\"", "]", ",", "\n", "deserial", "[", "\"data\"", "]", ",", "\n", "decimal", "=", "1", ",", "\n", "verbose", "=", "True", ")", "\n", "\n", "# check type is as original/ expected", "\n", "# self.assertTrue(np.issubdtype(sample[\"data\"].dtype, np.floating))", "\n", "self", ".", "assertEqual", "(", "sample", "[", "\"data\"", "]", ".", "dtype", ",", "sample", "[", "\"data\"", "]", ".", "dtype", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fields.numpyfield_test.NumpyFieldTest.test_serialDeserialsFloat": [[65, 91], ["marshmallow.Schema.from_dict", "marshmallow.Schema.from_dict.dumps", "numpyfield_test.NumpyFieldTest.assertIsInstance", "marshmallow.Schema.from_dict.loads", "numpy.testing.assert_array_almost_equal", "numpyfield_test.NumpyFieldTest.assertEqual", "fhez.fields.numpyfield.NumpyField", "marshmallow.Schema.from_dict.", "marshmallow.Schema.from_dict."], "methods", ["None"], ["", "def", "test_serialDeserialsFloat", "(", "self", ")", ":", "\n", "        ", "\"\"\"Check serialisation and deserialisation to json as float.\"\"\"", "\n", "# set up necessary vars", "\n", "data", "=", "self", ".", "data", "\n", "sample", "=", "{", "\"data\"", ":", "data", "}", "\n", "schema", "=", "mar", ".", "Schema", ".", "from_dict", "(", "{", "\"data\"", ":", "NumpyField", "(", ")", "}", ")", "\n", "\n", "# now test serialisation", "\n", "out", "=", "schema", "(", ")", ".", "dumps", "(", "sample", ")", "\n", "\n", "# print(\"DESERIALS OUTPUT TYPE: {}\".format(type(out)))", "\n", "self", ".", "assertIsInstance", "(", "out", ",", "str", ")", "\n", "\n", "# now test deserialisation", "\n", "deserial", "=", "schema", "(", ")", ".", "loads", "(", "out", ")", "\n", "\n", "# check equality", "\n", "np", ".", "testing", ".", "assert_array_almost_equal", "(", "\n", "sample", "[", "\"data\"", "]", ",", "\n", "deserial", "[", "\"data\"", "]", ",", "\n", "decimal", "=", "1", ",", "\n", "verbose", "=", "True", ")", "\n", "\n", "# check type is as original/ expected", "\n", "# self.assertTrue(np.issubdtype(sample[\"data\"].dtype, np.floating))", "\n", "self", ".", "assertEqual", "(", "sample", "[", "\"data\"", "]", ".", "dtype", ",", "sample", "[", "\"data\"", "]", ".", "dtype", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fields.numpyfield_test.NumpyFieldTest.test_serialDeserialInt": [[92, 119], ["numpyfield_test.NumpyFieldTest.data.astype", "marshmallow.Schema.from_dict", "marshmallow.Schema.from_dict.dump", "numpyfield_test.NumpyFieldTest.assertIsInstance", "marshmallow.Schema.from_dict.load", "numpy.testing.assert_array_almost_equal", "numpyfield_test.NumpyFieldTest.assertEqual", "fhez.fields.numpyfield.NumpyField", "marshmallow.Schema.from_dict.", "marshmallow.Schema.from_dict."], "methods", ["None"], ["", "def", "test_serialDeserialInt", "(", "self", ")", ":", "\n", "        ", "\"\"\"Check serialisation and deserialisation to dictionary as int.\"\"\"", "\n", "# set up necessary vars", "\n", "data", "=", "self", ".", "data", ".", "astype", "(", "int", ")", "\n", "# all of the data in the sample will inevitably be 0 since trunication", "\n", "sample", "=", "{", "\"data\"", ":", "data", "}", "\n", "schema", "=", "mar", ".", "Schema", ".", "from_dict", "(", "{", "\"data\"", ":", "NumpyField", "(", ")", "}", ")", "\n", "\n", "# now test serialisation", "\n", "out", "=", "schema", "(", ")", ".", "dump", "(", "sample", ")", "\n", "\n", "# print(\"DESERIAL OUTPUT TYPE: {}\".format(type(out)))", "\n", "self", ".", "assertIsInstance", "(", "out", ",", "dict", ")", "\n", "\n", "# now test deserialisation", "\n", "deserial", "=", "schema", "(", ")", ".", "load", "(", "out", ")", "\n", "\n", "# check equality", "\n", "np", ".", "testing", ".", "assert_array_almost_equal", "(", "\n", "sample", "[", "\"data\"", "]", ",", "\n", "deserial", "[", "\"data\"", "]", ",", "\n", "decimal", "=", "1", ",", "\n", "verbose", "=", "True", ")", "\n", "\n", "# check type is as original/ expected", "\n", "# self.assertTrue(np.issubdtype(sample[\"data\"].dtype, np.integer))", "\n", "self", ".", "assertEqual", "(", "sample", "[", "\"data\"", "]", ".", "dtype", ",", "sample", "[", "\"data\"", "]", ".", "dtype", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fields.numpyfield.NumpyField.schema": [[14, 23], ["marshmallow.Schema.from_dict", "marshmallow.fields.Str", "marshmallow.fields.List", "marshmallow.fields.List", "marshmallow.fields.Int", "marshmallow.fields.Float"], "methods", ["None"], ["@", "property", "\n", "def", "schema", "(", "self", ")", ":", "\n", "        ", "\"\"\"Get numpy field marshamllow schema.\"\"\"", "\n", "schema", "=", "{", "\n", "\"dtype\"", ":", "mar", ".", "fields", ".", "Str", "(", ")", ",", "\n", "\"dshape\"", ":", "mar", ".", "fields", ".", "List", "(", "mar", ".", "fields", ".", "Int", "(", ")", ")", ",", "\n", "\"data\"", ":", "mar", ".", "fields", ".", "List", "(", "mar", ".", "fields", ".", "Float", "(", ")", ")", "\n", "}", "\n", "return", "mar", ".", "Schema", ".", "from_dict", "(", "schema", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fields.numpyfield.NumpyField._serialize": [[24, 38], ["numpyfield.NumpyField.schema().dump", "list", "value.flatten().tolist", "numpyfield.NumpyField.schema", "value.flatten"], "methods", ["home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fields.numpyfield.NumpyField.schema", "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.operations.rotate.Rotate.flatten"], ["", "def", "_serialize", "(", "self", ",", "value", ",", "attr", ",", "obj", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Use marshmallow to serialise numpy as list of numbers.\"\"\"", "\n", "if", "value", "is", "None", ":", "\n", "            ", "return", "None", "\n", "\n", "# define and set the to be stored data", "\n", "", "store", "=", "{", "\n", "\"dtype\"", ":", "value", ".", "dtype", ".", "name", ",", "\n", "\"dshape\"", ":", "list", "(", "value", ".", "shape", ")", ",", "\n", "\"data\"", ":", "value", ".", "flatten", "(", ")", ".", "tolist", "(", ")", "\n", "}", "\n", "# now used marshmallow existing handler desired", "\n", "serialised", "=", "self", ".", "schema", "(", ")", ".", "dump", "(", "store", ")", "\n", "return", "serialised", "\n", "\n"]], "home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fields.numpyfield.NumpyField._deserialize": [[39, 51], ["numpyfield.NumpyField.schema().load", "numpy.array().reshape", "tuple", "numpyfield.NumpyField.schema", "numpy.array", "numpy.dtype"], "methods", ["home.repos.pwc.inspect_result.DreamingRaven_python-reseal.fields.numpyfield.NumpyField.schema"], ["", "def", "_deserialize", "(", "self", ",", "value", ",", "attr", ",", "data", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Use marshmallow to deserialise list of numbers back to numpy.\"\"\"", "\n", "if", "value", "is", "None", ":", "\n", "            ", "return", "None", "\n", "\n", "# schema = mar.Schema.from_dict(NumpyField.schema)", "\n", "", "deserial", "=", "self", ".", "schema", "(", ")", ".", "load", "(", "value", ")", "\n", "# deserial = value", "\n", "\n", "return", "np", ".", "array", "(", "deserial", "[", "\"data\"", "]", ",", "\n", "dtype", "=", "np", ".", "dtype", "(", "deserial", "[", "\"dtype\"", "]", ")", "\n", ")", ".", "reshape", "(", "tuple", "(", "deserial", "[", "\"dshape\"", "]", ")", ")", "\n", "", "", ""]]}