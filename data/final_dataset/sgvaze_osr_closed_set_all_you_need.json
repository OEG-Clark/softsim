{"home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.utils.schedulers.WarmRestartPlateau.__init__": [[67, 73], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.loss.ARPLoss.ARPLoss.__init__"], ["def", "__init__", "(", "self", ",", "T_restart", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n", "self", ".", "T_restart", "=", "T_restart", "\n", "self", ".", "base_lrs", "=", "[", "group", "[", "'lr'", "]", "for", "group", "in", "self", ".", "optimizer", ".", "param_groups", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.utils.schedulers.WarmRestartPlateau.step": [[74, 84], ["super().step", "zip", "schedulers.WarmRestartPlateau._reset"], "methods", ["home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.utils.schedulers.CosineAnnealingWarmupRestarts_New.step"], ["", "def", "step", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "\n", "        ", "super", "(", ")", ".", "step", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n", "if", "self", ".", "last_epoch", ">", "0", "and", "self", ".", "last_epoch", "%", "self", ".", "T_restart", "==", "0", ":", "\n", "\n", "            ", "for", "group", ",", "lr", "in", "zip", "(", "self", ".", "optimizer", ".", "param_groups", ",", "self", ".", "base_lrs", ")", ":", "\n", "                ", "group", "[", "'lr'", "]", "=", "lr", "\n", "\n", "", "self", ".", "_reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.utils.schedulers.CosineAnnealingWarmupRestarts_New.__init__": [[88, 104], ["super().__init__", "range", "math.cos"], "methods", ["home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.loss.ARPLoss.ARPLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "warmup_epochs", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "\n", "        ", "super", "(", "CosineAnnealingWarmupRestarts_New", ",", "self", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n", "# Init optimizer with low learning rate", "\n", "for", "param_group", "in", "self", ".", "optimizer", ".", "param_groups", ":", "\n", "            ", "param_group", "[", "'lr'", "]", "=", "self", ".", "eta_min", "\n", "\n", "", "self", ".", "warmup_epochs", "=", "warmup_epochs", "\n", "\n", "# Get target LR after warmup is complete", "\n", "target_lr", "=", "self", ".", "eta_min", "+", "(", "self", ".", "base_lrs", "[", "0", "]", "-", "self", ".", "eta_min", ")", "*", "(", "1", "+", "math", ".", "cos", "(", "math", ".", "pi", "*", "warmup_epochs", "/", "self", ".", "T_i", ")", ")", "/", "2", "\n", "\n", "# Linearly interpolate between minimum lr and target_lr", "\n", "linear_step", "=", "(", "target_lr", "-", "self", ".", "eta_min", ")", "/", "self", ".", "warmup_epochs", "\n", "self", ".", "warmup_lrs", "=", "[", "self", ".", "eta_min", "+", "linear_step", "*", "(", "n", "+", "1", ")", "for", "n", "in", "range", "(", "warmup_epochs", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.utils.schedulers.CosineAnnealingWarmupRestarts_New.step": [[105, 125], ["super().step", "math.floor", "super().step"], "methods", ["home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.utils.schedulers.CosineAnnealingWarmupRestarts_New.step", "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.utils.schedulers.CosineAnnealingWarmupRestarts_New.step"], ["", "def", "step", "(", "self", ",", "epoch", "=", "None", ")", ":", "\n", "\n", "# Called on super class init", "\n", "        ", "if", "epoch", "is", "None", ":", "\n", "            ", "super", "(", "CosineAnnealingWarmupRestarts_New", ",", "self", ")", ".", "step", "(", "epoch", "=", "epoch", ")", "\n", "\n", "", "else", ":", "\n", "            ", "if", "epoch", "<", "self", ".", "warmup_epochs", ":", "\n", "                ", "lr", "=", "self", ".", "warmup_lrs", "[", "epoch", "]", "\n", "for", "param_group", "in", "self", ".", "optimizer", ".", "param_groups", ":", "\n", "                    ", "param_group", "[", "'lr'", "]", "=", "lr", "\n", "\n", "# Fulfill misc super() funcs", "\n", "", "self", ".", "last_epoch", "=", "math", ".", "floor", "(", "epoch", ")", "\n", "self", ".", "T_cur", "=", "epoch", "\n", "self", ".", "_last_lr", "=", "[", "group", "[", "'lr'", "]", "for", "group", "in", "self", ".", "optimizer", ".", "param_groups", "]", "\n", "\n", "", "else", ":", "\n", "\n", "                ", "super", "(", "CosineAnnealingWarmupRestarts_New", ",", "self", ")", ".", "step", "(", "epoch", "=", "epoch", ")", "", "", "", "", "", ""]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.utils.schedulers.get_scheduler": [[5, 59], ["torch.optim.lr_scheduler.StepLR", "torch.optim.lr_scheduler.ReduceLROnPlateau", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingWarmRestarts", "schedulers.CosineAnnealingWarmupRestarts_New", "print", "int", "schedulers.WarmRestartPlateau", "print", "int", "torch.optim.lr_scheduler.MultiStepLR", "print", "range"], "function", ["None"], ["def", "get_scheduler", "(", "optimizer", ",", "args", ")", ":", "\n", "\n", "    ", "if", "args", ".", "scheduler", "==", "'step'", ":", "\n", "        ", "scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "StepLR", "(", "optimizer", ",", "\n", "gamma", "=", "0.1", ",", "\n", "step_size", "=", "150", ")", "\n", "\n", "", "elif", "args", ".", "scheduler", "==", "'plateau'", ":", "\n", "        ", "scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "ReduceLROnPlateau", "(", "optimizer", ",", "mode", "=", "'min'", ",", "patience", "=", "50", ")", "\n", "\n", "", "elif", "args", ".", "scheduler", "==", "'cosine'", ":", "\n", "        ", "scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "CosineAnnealingLR", "(", "optimizer", ",", "\n", "T_max", "=", "args", ".", "epochs", ",", "eta_min", "=", "args", ".", "lr", "*", "1e-3", ")", "\n", "\n", "", "elif", "args", ".", "scheduler", "==", "'cosine_warm_restarts'", ":", "\n", "\n", "        ", "try", ":", "num_restarts", "=", "args", ".", "num_restarts", "\n", "except", ":", "print", "(", "'Warning: Num restarts not specified...using 2'", ")", ";", "num_restarts", "=", "2", "\n", "\n", "scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "CosineAnnealingWarmRestarts", "(", "optimizer", ",", "\n", "T_0", "=", "int", "(", "args", ".", "epochs", "/", "(", "num_restarts", "+", "1", ")", ")", ",", "\n", "eta_min", "=", "args", ".", "lr", "*", "1e-3", ")", "\n", "\n", "", "elif", "args", ".", "scheduler", "==", "'cosine_warm_restarts_warmup'", ":", "\n", "\n", "        ", "try", ":", "num_restarts", "=", "args", ".", "num_restarts", "\n", "except", ":", "print", "(", "'Warning: Num restarts not specified...using 2'", ")", ";", "num_restarts", "=", "2", "\n", "\n", "scheduler", "=", "CosineAnnealingWarmupRestarts_New", "(", "warmup_epochs", "=", "10", ",", "optimizer", "=", "optimizer", ",", "\n", "T_0", "=", "int", "(", "args", ".", "epochs", "/", "(", "num_restarts", "+", "1", ")", ")", ",", "\n", "eta_min", "=", "args", ".", "lr", "*", "1e-3", ")", "\n", "\n", "", "elif", "args", ".", "scheduler", "==", "'warm_restarts_plateau'", ":", "\n", "        ", "scheduler", "=", "WarmRestartPlateau", "(", "T_restart", "=", "120", ",", "optimizer", "=", "optimizer", ",", "threshold_mode", "=", "'abs'", ",", "threshold", "=", "0.5", ",", "\n", "mode", "=", "'min'", ",", "patience", "=", "100", ")", "\n", "\n", "", "elif", "args", ".", "scheduler", "==", "'multi_step'", ":", "\n", "\n", "        ", "try", ":", "\n", "\n", "            ", "steps", "=", "args", ".", "steps", "\n", "\n", "", "except", ":", "\n", "\n", "            ", "print", "(", "'Warning: No step list for Multi-Step Scheduler, using constant step of 30 epochs'", ")", "\n", "steps", "=", "[", "30", "*", "i", "for", "i", "in", "range", "(", "1", ",", "5", ")", "]", "\n", "\n", "", "scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "MultiStepLR", "(", "optimizer", ",", "milestones", "=", "steps", ")", "\n", "\n", "", "else", ":", "\n", "\n", "        ", "raise", "NotImplementedError", "\n", "\n", "", "return", "scheduler", "\n", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.utils.logfile_parser.get_file": [[27, 35], ["open", "file.append"], "function", ["None"], ["def", "get_file", "(", "path", ")", ":", "\n", "\n", "    ", "file", "=", "[", "]", "\n", "with", "open", "(", "path", ",", "'rt'", ")", "as", "myfile", ":", "\n", "        ", "for", "myline", "in", "myfile", ":", "# For each line, read to a string,", "\n", "            ", "file", ".", "append", "(", "myline", ")", "\n", "\n", "", "", "return", "file", "\n", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.utils.logfile_parser.parse_arpl_out_file": [[37, 87], ["logfile_parser.get_file", "enumerate", "pandas.DataFrame", "print", "os.path.join", "pd.DataFrame.to_pickle", "line.find", "rx_dict[].search().group", "rx_dict[].search().group", "rx_dict[].search().group", "rx_dict[].search().group", "rx_dict[].search().group", "rx_dict[].search().group", "rx_dict[].search().group", "rx_dict[].search().group", "rx_dict[].search().group", "line.find", "rx_dict[].search().group", "models.append", "rx_dict[].search", "rx_dict[].search().group", "rx_dict[].findall", "rx_dict[].search", "rx_dict[].search().group.find", "rx_dict[].search", "rx_dict[].search", "rx_dict[].search", "rx_dict[].search", "rx_dict[].search", "rx_dict[].search", "rx_dict[].search", "rx_dict[].search", "rx_dict[].search", "rx_dict[].search().group.find", "rx_dict[].search"], "function", ["home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.utils.logfile_parser.get_file"], ["", "def", "parse_arpl_out_file", "(", "path", ",", "rx_dict", ",", "root_dir", "=", "save_root_dir", ",", "save_name", "=", "'test.pkl'", ",", "save", "=", "True", ",", "verbose", "=", "True", ")", ":", "\n", "\n", "    ", "file", "=", "get_file", "(", "path", "=", "path", ")", "\n", "\n", "models", "=", "[", "]", "\n", "for", "i", ",", "line", "in", "enumerate", "(", "file", ")", ":", "\n", "\n", "        ", "if", "line", ".", "find", "(", "'Namespace'", ")", "!=", "-", "1", ":", "\n", "\n", "            ", "model", "=", "{", "}", "\n", "s", "=", "rx_dict", "[", "'model_dir'", "]", ".", "search", "(", "line", ")", ".", "group", "(", "1", ")", "\n", "exp_id", "=", "s", "[", "s", ".", "find", "(", "\"(\"", ")", ":", "s", ".", "find", "(", "\")\"", ")", "+", "1", "]", "\n", "model", "[", "'exp_id'", "]", "=", "exp_id", "\n", "\n", "model", "[", "'M'", "]", "=", "rx_dict", "[", "'m'", "]", ".", "search", "(", "line", ")", ".", "group", "(", "1", ")", "\n", "model", "[", "'N'", "]", "=", "rx_dict", "[", "'n'", "]", ".", "search", "(", "line", ")", ".", "group", "(", "1", ")", "\n", "model", "[", "'split_idx'", "]", "=", "rx_dict", "[", "'split_idx'", "]", ".", "search", "(", "line", ")", ".", "group", "(", "1", ")", "\n", "model", "[", "'seed'", "]", "=", "rx_dict", "[", "'seed'", "]", ".", "search", "(", "line", ")", ".", "group", "(", "1", ")", "\n", "model", "[", "'dataset'", "]", "=", "rx_dict", "[", "'dataset'", "]", ".", "search", "(", "line", ")", ".", "group", "(", "1", ")", "\n", "model", "[", "'loss'", "]", "=", "rx_dict", "[", "'loss'", "]", ".", "search", "(", "line", ")", ".", "group", "(", "1", ")", "\n", "model", "[", "'cs'", "]", "=", "rx_dict", "[", "'cs'", "]", ".", "search", "(", "line", ")", ".", "group", "(", "1", ")", "\n", "model", "[", "'lr'", "]", "=", "rx_dict", "[", "'lr'", "]", ".", "search", "(", "line", ")", ".", "group", "(", "1", ")", "\n", "\n", "if", "rx_dict", "[", "'label_smoothing'", "]", ".", "search", "(", "line", ")", "is", "not", "None", ":", "\n", "                ", "model", "[", "'label_smoothing'", "]", "=", "rx_dict", "[", "'label_smoothing'", "]", ".", "search", "(", "line", ")", ".", "group", "(", "1", ")", "\n", "\n", "", "", "if", "line", ".", "find", "(", "'Finished'", ")", "!=", "-", "1", ":", "\n", "            ", "line_", "=", "file", "[", "i", "-", "1", "]", "\n", "\n", "perfs", "=", "rx_dict", "[", "'performance'", "]", ".", "findall", "(", "line_", ")", "[", ":", "4", "]", "\n", "model", "[", "'Acc'", "]", "=", "perfs", "[", "1", "]", "\n", "model", "[", "'AUROC'", "]", "=", "perfs", "[", "2", "]", "\n", "model", "[", "'OSCR'", "]", "=", "perfs", "[", "3", "]", "\n", "model", "[", "'runtime'", "]", "=", "rx_dict", "[", "'runtime'", "]", ".", "search", "(", "line", ")", ".", "group", "(", "1", ")", "\n", "\n", "models", ".", "append", "(", "model", ")", "\n", "\n", "", "", "data", "=", "pd", ".", "DataFrame", "(", "models", ")", "\n", "\n", "if", "verbose", ":", "\n", "        ", "print", "(", "data", ")", "\n", "\n", "", "if", "save", ":", "\n", "\n", "        ", "save_path", "=", "os", ".", "path", ".", "join", "(", "root_dir", ",", "save_name", ")", "\n", "data", ".", "to_pickle", "(", "save_path", ")", "\n", "\n", "", "else", ":", "\n", "\n", "        ", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.utils.logfile_parser.parse_multiple_files": [[89, 108], ["pandas.concat", "os.path.join", "logfile_parser.parse_arpl_out_file", "pd.concat.append", "pd.concat.to_pickle", "print", "path.split"], "function", ["home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.utils.logfile_parser.parse_arpl_out_file"], ["", "", "def", "parse_multiple_files", "(", "all_paths", ",", "rx_dict", ",", "root_dir", "=", "save_root_dir", ",", "save_name", "=", "'test.pkl'", ",", "verbose", "=", "True", ",", "save", "=", "False", ")", ":", "\n", "\n", "    ", "all_data", "=", "[", "]", "\n", "for", "path", "in", "all_paths", ":", "\n", "\n", "        ", "data", "=", "parse_arpl_out_file", "(", "path", ",", "rx_dict", ",", "save", "=", "False", ",", "verbose", "=", "False", ")", "\n", "data", "[", "'fname'", "]", "=", "path", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "\n", "all_data", ".", "append", "(", "data", ")", "\n", "\n", "", "all_data", "=", "pd", ".", "concat", "(", "all_data", ")", "\n", "save_path", "=", "os", ".", "path", ".", "join", "(", "root_dir", ",", "save_name", ")", "\n", "\n", "if", "save", ":", "\n", "        ", "all_data", ".", "to_pickle", "(", "save_path", ")", "\n", "\n", "", "if", "verbose", ":", "\n", "        ", "print", "(", "all_data", ")", "\n", "\n", "", "return", "all_data", "\n", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.utils.utils.AverageMeter.__init__": [[16, 18], ["utils.AverageMeter.reset"], "methods", ["home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.ARPL.arpl_utils.AverageMeter.reset"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.utils.utils.AverageMeter.reset": [[19, 25], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "\n", "        ", "self", ".", "val", "=", "0", "\n", "self", ".", "avg", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.utils.utils.AverageMeter.update": [[26, 32], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "\n", "        ", "self", ".", "val", "=", "val", "\n", "self", ".", "sum", "+=", "val", "*", "n", "\n", "self", ".", "count", "+=", "n", "\n", "self", ".", "avg", "=", "self", ".", "sum", "/", "self", ".", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.utils.utils.seed_torch": [[34, 44], ["random.seed", "str", "numpy.random.seed", "torch.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed_all"], "function", ["None"], ["", "", "def", "seed_torch", "(", "seed", "=", "1029", ")", ":", "\n", "\n", "    ", "random", ".", "seed", "(", "seed", ")", "\n", "os", ".", "environ", "[", "'PYTHONHASHSEED'", "]", "=", "str", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "seed", ")", "# if you are using multi-GPU.", "\n", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "False", "\n", "torch", ".", "backends", ".", "cudnn", ".", "deterministic", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.utils.utils.strip_state_dict": [[46, 59], ["list", "state_dict.keys", "k.startswith", "len"], "function", ["None"], ["", "def", "strip_state_dict", "(", "state_dict", ",", "strip_key", "=", "'module.'", ")", ":", "\n", "\n", "    ", "\"\"\"\n    Strip 'module' from start of state_dict keys\n    Useful if model has been trained as DataParallel model\n    \"\"\"", "\n", "\n", "for", "k", "in", "list", "(", "state_dict", ".", "keys", "(", ")", ")", ":", "\n", "        ", "if", "k", ".", "startswith", "(", "strip_key", ")", ":", "\n", "            ", "state_dict", "[", "k", "[", "len", "(", "strip_key", ")", ":", "]", "]", "=", "state_dict", "[", "k", "]", "\n", "del", "state_dict", "[", "k", "]", "\n", "\n", "", "", "return", "state_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.utils.utils.init_experiment": [[61, 118], ["torch.cuda.is_available", "print", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.exists", "os.path.exists", "os.path.join", "os.path.join", "os.mkdir", "os.mkdir", "print", "torch.utils.tensorboard.SummaryWriter", "vars().items", "args.writer.add_hparams", "print", "print", "torch.device", "torch.device", "os.path.exists", "os.path.exists", "os.makedirs", "os.makedirs", "os.path.join", "os.path.join", "os.path.exists", "os.path.exists", "os.makedirs", "os.makedirs", "isinstance", "os.path.dirname().split", "os.path.dirname().split", "vars", "datetime.datetime.now().strftime", "os.path.dirname", "os.path.dirname", "datetime.datetime.now", "datetime.datetime.now", "datetime.datetime.now", "datetime.datetime.now().strftime", "os.path.abspath", "os.path.abspath", "datetime.datetime.now", "datetime.datetime.now", "datetime.datetime.now", "datetime.datetime.now", "inspect.getfile", "datetime.datetime.now", "inspect.currentframe"], "function", ["None"], ["", "def", "init_experiment", "(", "args", ",", "runner_name", "=", "None", ")", ":", "\n", "\n", "    ", "args", ".", "cuda", "=", "torch", ".", "cuda", ".", "is_available", "(", ")", "\n", "\n", "if", "args", ".", "device", "==", "'None'", ":", "\n", "        ", "args", ".", "device", "=", "torch", ".", "device", "(", "\"cuda:0\"", "if", "args", ".", "cuda", "else", "\"cpu\"", ")", "\n", "", "else", ":", "\n", "        ", "args", ".", "device", "=", "torch", ".", "device", "(", "args", ".", "device", "if", "args", ".", "cuda", "else", "\"cpu\"", ")", "\n", "\n", "", "print", "(", "args", ".", "gpus", ")", "\n", "\n", "# Get filepath of calling script", "\n", "if", "runner_name", "is", "None", ":", "\n", "        ", "runner_name", "=", "os", ".", "path", ".", "dirname", "(", "os", ".", "path", ".", "abspath", "(", "inspect", ".", "getfile", "(", "inspect", ".", "currentframe", "(", ")", ")", ")", ")", ".", "split", "(", "\".\"", ")", "[", "-", "2", ":", "]", "\n", "\n", "", "root_dir", "=", "os", ".", "path", ".", "join", "(", "args", ".", "exp_root", ",", "*", "runner_name", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "root_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "root_dir", ")", "\n", "\n", "# Unique identifier for experiment", "\n", "", "now", "=", "'({:02d}.{:02d}.{}_|_'", ".", "format", "(", "datetime", ".", "now", "(", ")", ".", "day", ",", "datetime", ".", "now", "(", ")", ".", "month", ",", "datetime", ".", "now", "(", ")", ".", "year", ")", "+", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "\"%S.%f\"", ")", "[", ":", "-", "3", "]", "+", "')'", "\n", "\n", "log_dir", "=", "os", ".", "path", ".", "join", "(", "root_dir", ",", "'log'", ",", "now", ")", "\n", "while", "os", ".", "path", ".", "exists", "(", "log_dir", ")", ":", "\n", "        ", "now", "=", "'({:02d}.{:02d}.{}_|_'", ".", "format", "(", "datetime", ".", "now", "(", ")", ".", "day", ",", "datetime", ".", "now", "(", ")", ".", "month", ",", "datetime", ".", "now", "(", ")", ".", "year", ")", "+", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "\"%S.%f\"", ")", "[", ":", "-", "3", "]", "+", "')'", "\n", "\n", "log_dir", "=", "os", ".", "path", ".", "join", "(", "root_dir", ",", "'log'", ",", "now", ")", "\n", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "log_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "log_dir", ")", "\n", "", "args", ".", "log_dir", "=", "log_dir", "\n", "\n", "# Instantiate directory to save models to", "\n", "model_root_dir", "=", "os", ".", "path", ".", "join", "(", "args", ".", "log_dir", ",", "'checkpoints'", ")", "\n", "os", ".", "mkdir", "(", "model_root_dir", ")", "\n", "\n", "args", ".", "model_dir", "=", "model_root_dir", "\n", "\n", "print", "(", "f'Experiment saved to: {args.log_dir}'", ")", "\n", "\n", "args", ".", "writer", "=", "SummaryWriter", "(", "log_dir", "=", "args", ".", "log_dir", ")", "\n", "\n", "hparam_dict", "=", "{", "}", "\n", "\n", "for", "k", ",", "v", "in", "vars", "(", "args", ")", ".", "items", "(", ")", ":", "\n", "        ", "if", "isinstance", "(", "v", ",", "(", "int", ",", "float", ",", "str", ",", "bool", ",", "torch", ".", "Tensor", ")", ")", ":", "\n", "            ", "hparam_dict", "[", "k", "]", "=", "v", "\n", "\n", "", "", "args", ".", "writer", ".", "add_hparams", "(", "hparam_dict", "=", "hparam_dict", ",", "metric_dict", "=", "{", "}", ")", "\n", "\n", "print", "(", "runner_name", ")", "\n", "print", "(", "args", ")", "\n", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.utils.utils.accuracy": [[120, 137], ["torch.no_grad", "max", "target.size", "output.topk", "pred.t.t", "pred.t.eq", "target.view().expand_as", "correct[].view().float().sum", "res.append", "correct[].view().float().sum.mul_", "target.view", "correct[].view().float", "correct[].view"], "function", ["None"], ["", "def", "accuracy", "(", "output", ",", "target", ",", "topk", "=", "(", "1", ",", ")", ")", ":", "\n", "\n", "    ", "\"\"\"Computes the accuracy over the k top predictions for the specified values of k\"\"\"", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "maxk", "=", "max", "(", "topk", ")", "\n", "batch_size", "=", "target", ".", "size", "(", "0", ")", "\n", "\n", "_", ",", "pred", "=", "output", ".", "topk", "(", "maxk", ",", "1", ",", "True", ",", "True", ")", "\n", "pred", "=", "pred", ".", "t", "(", ")", "\n", "correct", "=", "pred", ".", "eq", "(", "target", ".", "view", "(", "1", ",", "-", "1", ")", ".", "expand_as", "(", "pred", ")", ")", "\n", "\n", "res", "=", "[", "]", "\n", "for", "k", "in", "topk", ":", "\n", "            ", "correct_k", "=", "correct", "[", ":", "k", "]", ".", "view", "(", "-", "1", ")", ".", "float", "(", ")", ".", "sum", "(", "0", ",", "keepdim", "=", "True", ")", "\n", "res", ".", "append", "(", "correct_k", ".", "mul_", "(", "100.0", "/", "batch_size", ")", ")", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.utils.utils.str2bool": [[139, 146], ["v.lower", "v.lower", "argparse.ArgumentTypeError"], "function", ["None"], ["", "", "def", "str2bool", "(", "v", ")", ":", "\n", "    ", "if", "v", ".", "lower", "(", ")", "in", "(", "'yes'", ",", "'true'", ",", "'t'", ",", "'y'", ",", "'1'", ")", ":", "\n", "        ", "return", "True", "\n", "", "elif", "v", ".", "lower", "(", ")", "in", "(", "'no'", ",", "'false'", ",", "'f'", ",", "'n'", ",", "'0'", ")", ":", "\n", "        ", "return", "False", "\n", "", "else", ":", "\n", "        ", "raise", "argparse", ".", "ArgumentTypeError", "(", "'Boolean value expected.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.utils.utils.get_default_hyperparameters": [[148, 188], ["os.path.join", "os.path.join", "pandas.read_csv"], "function", ["None"], ["", "", "def", "get_default_hyperparameters", "(", "args", ")", ":", "\n", "\n", "    ", "\"\"\"\n    Adjusts args to match parameters used in paper: https://arxiv.org/abs/2110.06207\n    \"\"\"", "\n", "\n", "hyperparameter_path", "=", "os", ".", "path", ".", "join", "(", "project_root_dir", ",", "'utils/paper_hyperparameters.csv'", ")", "\n", "df", "=", "pd", ".", "read_csv", "(", "hyperparameter_path", ")", "\n", "\n", "df", "=", "df", ".", "loc", "[", "df", "[", "'Loss'", "]", "==", "args", ".", "loss", "]", "\n", "hyperparams", "=", "df", ".", "loc", "[", "df", "[", "'Dataset'", "]", "==", "args", ".", "dataset", "]", ".", "values", "[", "0", "]", "[", "2", ":", "]", "\n", "\n", "# -----------------", "\n", "# DATASET / LOSS specific hyperparams", "\n", "# -----------------", "\n", "args", ".", "image_size", ",", "args", ".", "lr", ",", "args", ".", "rand_aug_n", ",", "args", ".", "rand_aug_m", ",", "args", ".", "label_smoothing", ",", "args", ".", "batch_size", "=", "hyperparams", "\n", "\n", "if", "args", ".", "dataset", "in", "(", "'cub'", ",", "'aircraft'", ",", "'scars'", ",", "'imagenet'", ")", ":", "\n", "\n", "        ", "args", ".", "model", "=", "'timm_resnet50_pretrained'", "\n", "args", ".", "resnet50_pretrain", "=", "'places_moco'", "\n", "args", ".", "feat_dim", "=", "2048", "\n", "\n", "", "else", ":", "\n", "\n", "        ", "args", ".", "model", "=", "'classifier32'", "\n", "args", ".", "feat_dim", "=", "128", "\n", "\n", "# -----------------", "\n", "# Other hyperparameters", "\n", "# -----------------", "\n", "", "args", ".", "seed", "=", "0", "\n", "args", ".", "max_epoch", "=", "600", "\n", "args", ".", "transform", "=", "'rand-augment'", "\n", "\n", "args", ".", "scheduler", "=", "'cosine_warm_restarts_warmup'", "\n", "args", ".", "num_restarts", "=", "2", "\n", "args", ".", "weight_decay", "=", "1e-4", "\n", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.test.utils.EvaluateOpenSet.__init__": [[191, 212], ["torch.device", "os.path.exists", "os.mkdir", "torch.cuda.is_available"], "methods", ["None"], ["\n", "    ", "import", "argparse", "\n", "\n", "parser", "=", "argparse", ".", "ArgumentParser", "(", "\"Training\"", ")", "\n", "\n", "# Dataset", "\n", "parser", ".", "add_argument", "(", "'--dataset'", ",", "type", "=", "str", ",", "default", "=", "'cifar-10-10'", ",", "help", "=", "\"\"", ")", "\n", "parser", ".", "add_argument", "(", "'--loss'", ",", "type", "=", "str", ",", "default", "=", "'ARPLoss'", ",", "help", "=", "'For cifar-10-100'", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "for", "dataset", "in", "(", "'mnist'", ",", "'svhn'", ",", "'cifar-10-10'", ",", "'cifar-10-100'", ",", "'tinyimagenet'", ")", ":", "\n", "        ", "args", ".", "dataset", "=", "dataset", "\n", "args", "=", "get_default_hyperparameters", "(", "args", ")", "\n", "print", "(", "f'{dataset}'", ")", "\n", "print", "(", "args", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.test.utils.EvaluateOpenSet.predict": [[213, 246], ["zip", "torch.no_grad", "enumerate", "os.path.join", "torch.save", "enumerate", "print", "print", "tqdm.tqdm.tqdm", "utils.EvaluateOpenSet.model", "utils.EvaluateOpenSet.closed_set_preds[].extend", "utils.EvaluateOpenSet.open_set_preds[].extend", "utils.EvaluateOpenSet.closed_set_labels[].extend", "utils.EvaluateOpenSet.open_set_labels[].extend", "x.to", "x.cpu().numpy().tolist", "labels.cpu().numpy().tolist", "len", "x.cpu().numpy", "labels.cpu().numpy", "x.cpu", "labels.cpu"], "methods", ["None"], []], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.test.utils.EvaluateOpenSet.evaluate": [[247, 288], ["numpy.array", "numpy.array", "utils.closed_set_acc", "sklearn.metrics.roc_curve", "utils.acc_at_95_tpr", "utils.compute_auroc", "utils.compute_aupr", "numpy.array().argmax", "numpy.array", "utils.compute_oscr", "numpy.array", "numpy.array", "torch.load", "numpy.array.astype", "numpy.array", "os.path.join", "numpy.array.astype"], "methods", ["home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.test.utils.closed_set_acc", "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.test.utils.acc_at_95_tpr", "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.test.utils.compute_auroc", "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.test.utils.compute_aupr", "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.core.evaluation.compute_oscr"], []], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.test.utils.EvaluateOpenSetInline.__init__": [[292, 295], ["utils.EvaluateOpenSet.__init__"], "methods", ["home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.loss.ARPLoss.ARPLoss.__init__"], []], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.test.utils.EvaluateOpenSetInline.predict_and_eval": [[296, 337], ["utils.EvaluateOpenSetInline.model.eval", "print", "numpy.array", "numpy.array", "utils.closed_set_acc", "sklearn.metrics.roc_curve", "utils.acc_at_95_tpr", "utils.compute_auroc", "torch.no_grad", "enumerate", "numpy.array", "numpy.array", "enumerate", "tqdm.tqdm.tqdm", "utils.EvaluateOpenSetInline.model", "utils.EvaluateOpenSetInline.closed_set_preds[].extend", "utils.EvaluateOpenSetInline.open_set_preds[].extend", "utils.EvaluateOpenSetInline.closed_set_labels[].extend", "utils.EvaluateOpenSetInline.open_set_labels[].extend", "x.to", "x.cpu().numpy().tolist", "labels.cpu().numpy().tolist", "len", "x.cpu().numpy", "labels.cpu().numpy", "x.cpu", "labels.cpu"], "methods", ["home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.test.utils.closed_set_acc", "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.test.utils.acc_at_95_tpr", "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.test.utils.compute_auroc"], []], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.test.utils.ModelTemplate.forward": [[340, 346], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.test.utils.normalised_average_precision": [[9, 32], ["_binary_clf_curve", "numpy.array().sum", "tps.searchsorted", "slice", "numpy.sum", "numpy.array", "numpy.isnan", "numpy.array", "numpy.diff", "numpy.array"], "function", ["None"], ["from", "datetime", "import", "datetime", "\n", "import", "os", "\n", "\n", "from", "config", "import", "project_root_dir", "\n", "\n", "class", "AverageMeter", "(", "object", ")", ":", "\n", "    ", "\"\"\"Computes and stores the average and current value\"\"\"", "\n", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "reset", "(", ")", "\n", "\n", "", "def", "reset", "(", "self", ")", ":", "\n", "\n", "        ", "self", ".", "val", "=", "0", "\n", "self", ".", "avg", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "count", "=", "0", "\n", "\n", "", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "\n", "        ", "self", ".", "val", "=", "val", "\n", "self", ".", "sum", "+=", "val", "*", "n", "\n", "self", ".", "count", "+=", "n", "\n", "self", ".", "avg", "=", "self", ".", "sum", "/", "self", ".", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.test.utils.find_nearest": [[33, 45], ["numpy.asarray", "len", "numpy.abs", "np.abs.min", "equal_arr.argmax", "numpy.linspace"], "function", ["None"], ["\n", "", "", "def", "seed_torch", "(", "seed", "=", "1029", ")", ":", "\n", "\n", "    ", "random", ".", "seed", "(", "seed", ")", "\n", "os", ".", "environ", "[", "'PYTHONHASHSEED'", "]", "=", "str", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "seed", ")", "# if you are using multi-GPU.", "\n", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "False", "\n", "torch", ".", "backends", ".", "cudnn", ".", "deterministic", "=", "True", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.test.utils.acc_at_t": [[47, 56], ["numpy.copy", "sklearn.metrics.accuracy_score", "np.copy.astype"], "function", ["None"], ["\n", "    ", "\"\"\"\n    Strip 'module' from start of state_dict keys\n    Useful if model has been trained as DataParallel model\n    \"\"\"", "\n", "\n", "for", "k", "in", "list", "(", "state_dict", ".", "keys", "(", ")", ")", ":", "\n", "        ", "if", "k", ".", "startswith", "(", "strip_key", ")", ":", "\n", "            ", "state_dict", "[", "k", "[", "len", "(", "strip_key", ")", ":", "]", "]", "=", "state_dict", "[", "k", "]", "\n", "del", "state_dict", "[", "k", "]", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.test.utils.closed_set_acc": [[58, 66], ["preds.argmax.argmax", "sklearn.metrics.accuracy_score", "print"], "function", ["None"], ["", "", "return", "state_dict", "\n", "\n", "\n", "", "def", "init_experiment", "(", "args", ",", "runner_name", "=", "None", ")", ":", "\n", "\n", "    ", "args", ".", "cuda", "=", "torch", ".", "cuda", ".", "is_available", "(", ")", "\n", "\n", "if", "args", ".", "device", "==", "'None'", ":", "\n", "        ", "args", ".", "device", "=", "torch", ".", "device", "(", "\"cuda:0\"", "if", "args", ".", "cuda", "else", "\"cpu\"", ")", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.test.utils.tar_at_far_and_reverse": [[68, 93], ["utils.find_nearest", "print", "utils.find_nearest", "print"], "function", ["home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.test.utils.find_nearest", "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.test.utils.find_nearest"], ["        ", "args", ".", "device", "=", "torch", ".", "device", "(", "args", ".", "device", "if", "args", ".", "cuda", "else", "\"cpu\"", ")", "\n", "\n", "", "print", "(", "args", ".", "gpus", ")", "\n", "\n", "# Get filepath of calling script", "\n", "if", "runner_name", "is", "None", ":", "\n", "        ", "runner_name", "=", "os", ".", "path", ".", "dirname", "(", "os", ".", "path", ".", "abspath", "(", "inspect", ".", "getfile", "(", "inspect", ".", "currentframe", "(", ")", ")", ")", ")", ".", "split", "(", "\".\"", ")", "[", "-", "2", ":", "]", "\n", "\n", "", "root_dir", "=", "os", ".", "path", ".", "join", "(", "args", ".", "exp_root", ",", "*", "runner_name", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "root_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "root_dir", ")", "\n", "\n", "# Unique identifier for experiment", "\n", "", "now", "=", "'({:02d}.{:02d}.{}_|_'", ".", "format", "(", "datetime", ".", "now", "(", ")", ".", "day", ",", "datetime", ".", "now", "(", ")", ".", "month", ",", "datetime", ".", "now", "(", ")", ".", "year", ")", "+", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "\"%S.%f\"", ")", "[", ":", "-", "3", "]", "+", "')'", "\n", "\n", "log_dir", "=", "os", ".", "path", ".", "join", "(", "root_dir", ",", "'log'", ",", "now", ")", "\n", "while", "os", ".", "path", ".", "exists", "(", "log_dir", ")", ":", "\n", "        ", "now", "=", "'({:02d}.{:02d}.{}_|_'", ".", "format", "(", "datetime", ".", "now", "(", ")", ".", "day", ",", "datetime", ".", "now", "(", ")", ".", "month", ",", "datetime", ".", "now", "(", ")", ".", "year", ")", "+", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "\"%S.%f\"", ")", "[", ":", "-", "3", "]", "+", "')'", "\n", "\n", "log_dir", "=", "os", ".", "path", ".", "join", "(", "root_dir", ",", "'log'", ",", "now", ")", "\n", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "log_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "log_dir", ")", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.test.utils.acc_at_95_tpr": [[95, 104], ["utils.find_nearest", "utils.acc_at_t", "print"], "function", ["home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.test.utils.find_nearest", "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.test.utils.acc_at_t"], ["\n", "# Instantiate directory to save models to", "\n", "model_root_dir", "=", "os", ".", "path", ".", "join", "(", "args", ".", "log_dir", ",", "'checkpoints'", ")", "\n", "os", ".", "mkdir", "(", "model_root_dir", ")", "\n", "\n", "args", ".", "model_dir", "=", "model_root_dir", "\n", "\n", "print", "(", "f'Experiment saved to: {args.log_dir}'", ")", "\n", "\n", "args", ".", "writer", "=", "SummaryWriter", "(", "log_dir", "=", "args", ".", "log_dir", ")", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.test.utils.compute_auroc": [[106, 112], ["sklearn.metrics.roc_auc_score", "print"], "function", ["None"], ["hparam_dict", "=", "{", "}", "\n", "\n", "for", "k", ",", "v", "in", "vars", "(", "args", ")", ".", "items", "(", ")", ":", "\n", "        ", "if", "isinstance", "(", "v", ",", "(", "int", ",", "float", ",", "str", ",", "bool", ",", "torch", ".", "Tensor", ")", ")", ":", "\n", "            ", "hparam_dict", "[", "k", "]", "=", "v", "\n", "\n", "", "", "args", ".", "writer", ".", "add_hparams", "(", "hparam_dict", "=", "hparam_dict", ",", "metric_dict", "=", "{", "}", ")", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.test.utils.compute_aupr": [[114, 123], ["print", "utils.normalised_average_precision", "sklearn.metrics.average_precision_score"], "function", ["home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.test.utils.normalised_average_precision"], ["print", "(", "runner_name", ")", "\n", "print", "(", "args", ")", "\n", "\n", "return", "args", "\n", "\n", "\n", "", "def", "accuracy", "(", "output", ",", "target", ",", "topk", "=", "(", "1", ",", ")", ")", ":", "\n", "\n", "    ", "\"\"\"Computes the accuracy over the k top predictions for the specified values of k\"\"\"", "\n", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.test.utils.compute_oscr": [[125, 187], ["numpy.zeros", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "len", "np.concatenate.argsort", "range", "sorted", "range", "print", "len", "s_k_target[].sum", "s_u_target[].sum", "zip", "numpy.zeros", "numpy.zeros", "numpy.ones", "range", "range", "float", "float", "float", "float", "len", "len", "len", "len", "len"], "function", ["None"], ["        ", "maxk", "=", "max", "(", "topk", ")", "\n", "batch_size", "=", "target", ".", "size", "(", "0", ")", "\n", "\n", "_", ",", "pred", "=", "output", ".", "topk", "(", "maxk", ",", "1", ",", "True", ",", "True", ")", "\n", "pred", "=", "pred", ".", "t", "(", ")", "\n", "correct", "=", "pred", ".", "eq", "(", "target", ".", "view", "(", "1", ",", "-", "1", ")", ".", "expand_as", "(", "pred", ")", ")", "\n", "\n", "res", "=", "[", "]", "\n", "for", "k", "in", "topk", ":", "\n", "            ", "correct_k", "=", "correct", "[", ":", "k", "]", ".", "view", "(", "-", "1", ")", ".", "float", "(", ")", ".", "sum", "(", "0", ",", "keepdim", "=", "True", ")", "\n", "res", ".", "append", "(", "correct_k", ".", "mul_", "(", "100.0", "/", "batch_size", ")", ")", "\n", "", "return", "res", "\n", "\n", "\n", "", "", "def", "str2bool", "(", "v", ")", ":", "\n", "    ", "if", "v", ".", "lower", "(", ")", "in", "(", "'yes'", ",", "'true'", ",", "'t'", ",", "'y'", ",", "'1'", ")", ":", "\n", "        ", "return", "True", "\n", "", "elif", "v", ".", "lower", "(", ")", "in", "(", "'no'", ",", "'false'", ",", "'f'", ",", "'n'", ",", "'0'", ")", ":", "\n", "        ", "return", "False", "\n", "", "else", ":", "\n", "        ", "raise", "argparse", ".", "ArgumentTypeError", "(", "'Boolean value expected.'", ")", "\n", "\n", "\n", "", "", "def", "get_default_hyperparameters", "(", "args", ")", ":", "\n", "\n", "    ", "\"\"\"\n    Adjusts args to match parameters used in paper: https://arxiv.org/abs/2110.06207\n    \"\"\"", "\n", "\n", "hyperparameter_path", "=", "os", ".", "path", ".", "join", "(", "project_root_dir", ",", "'utils/paper_hyperparameters.csv'", ")", "\n", "df", "=", "pd", ".", "read_csv", "(", "hyperparameter_path", ")", "\n", "\n", "df", "=", "df", ".", "loc", "[", "df", "[", "'Loss'", "]", "==", "args", ".", "loss", "]", "\n", "hyperparams", "=", "df", ".", "loc", "[", "df", "[", "'Dataset'", "]", "==", "args", ".", "dataset", "]", ".", "values", "[", "0", "]", "[", "2", ":", "]", "\n", "\n", "# -----------------", "\n", "# DATASET / LOSS specific hyperparams", "\n", "# -----------------", "\n", "args", ".", "image_size", ",", "args", ".", "lr", ",", "args", ".", "rand_aug_n", ",", "args", ".", "rand_aug_m", ",", "args", ".", "label_smoothing", ",", "args", ".", "batch_size", "=", "hyperparams", "\n", "\n", "if", "args", ".", "dataset", "in", "(", "'cub'", ",", "'aircraft'", ",", "'scars'", ",", "'imagenet'", ")", ":", "\n", "\n", "        ", "args", ".", "model", "=", "'timm_resnet50_pretrained'", "\n", "args", ".", "resnet50_pretrain", "=", "'places_moco'", "\n", "args", ".", "feat_dim", "=", "2048", "\n", "\n", "", "else", ":", "\n", "\n", "        ", "args", ".", "model", "=", "'classifier32'", "\n", "args", ".", "feat_dim", "=", "128", "\n", "\n", "# -----------------", "\n", "# Other hyperparameters", "\n", "# -----------------", "\n", "", "args", ".", "seed", "=", "0", "\n", "args", ".", "max_epoch", "=", "600", "\n", "args", ".", "transform", "=", "'rand-augment'", "\n", "\n", "args", ".", "scheduler", "=", "'cosine_warm_restarts_warmup'", "\n", "args", ".", "num_restarts", "=", "2", "\n", "args", ".", "weight_decay", "=", "1e-4", "\n", "\n", "return", "args", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.models.model_utils.TimmResNetWrapper.__init__": [[17, 21], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.loss.ARPLoss.ARPLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "resnet", ")", ":", "\n", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "resnet", "=", "resnet", "\n", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.models.model_utils.TimmResNetWrapper.forward": [[22, 34], ["model_utils.TimmResNetWrapper.resnet.forward_features", "model_utils.TimmResNetWrapper.resnet.global_pool", "model_utils.TimmResNetWrapper.resnet.fc", "torch.nn.functional.dropout", "float"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "return_features", "=", "True", ",", "dummy_label", "=", "None", ")", ":", "\n", "\n", "        ", "x", "=", "self", ".", "resnet", ".", "forward_features", "(", "x", ")", "\n", "embedding", "=", "self", ".", "resnet", ".", "global_pool", "(", "x", ")", "\n", "if", "self", ".", "resnet", ".", "drop_rate", ":", "\n", "            ", "embedding", "=", "torch", ".", "nn", ".", "functional", ".", "dropout", "(", "embedding", ",", "p", "=", "float", "(", "self", ".", "drop_rate", ")", ",", "training", "=", "self", ".", "training", ")", "\n", "", "preds", "=", "self", ".", "resnet", ".", "fc", "(", "embedding", ")", "\n", "\n", "if", "return_features", ":", "\n", "            ", "return", "embedding", ",", "preds", "\n", "", "else", ":", "\n", "            ", "return", "preds", "\n", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.models.model_utils.Classifier32ARPLWrapper.__init__": [[38, 44], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.loss.ARPLoss.ARPLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "base_model", ",", "loss_layer", ")", ":", "\n", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "base_model", "=", "base_model", "\n", "self", ".", "loss_layer", "=", "loss_layer", "\n", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.models.model_utils.Classifier32ARPLWrapper.forward": [[45, 54], ["model_utils.Classifier32ARPLWrapper.base_model", "model_utils.Classifier32ARPLWrapper.loss_layer"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "imgs", ",", "return_feature", "=", "False", ")", ":", "\n", "\n", "        ", "x", ",", "y", "=", "self", ".", "base_model", "(", "imgs", ",", "True", ")", "\n", "logits", ",", "_", "=", "self", ".", "loss_layer", "(", "x", ",", "y", ")", "\n", "\n", "if", "return_feature", ":", "\n", "            ", "return", "x", ",", "logits", "\n", "", "else", ":", "\n", "            ", "return", "logits", "\n", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.models.model_utils.Classifier32ARPLWrapper.load_state_dict": [[55, 69], ["model_utils.Classifier32ARPLWrapper.base_model.load_state_dict", "model_utils.Classifier32ARPLWrapper.loss_layer.load_state_dict", "model_utils.Classifier32ARPLWrapper.base_model.eval", "model_utils.Classifier32ARPLWrapper.loss_layer.eval", "utils.utils.strip_state_dict"], "methods", ["home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.models.model_utils.Classifier32ARPLWrapper.load_state_dict", "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.models.model_utils.Classifier32ARPLWrapper.load_state_dict", "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.utils.utils.strip_state_dict"], ["", "", "def", "load_state_dict", "(", "self", ",", "state_dict", ")", ":", "\n", "\n", "        ", "\"\"\"\n        Override method to take list of state dicts for loss layer and criterion\n        \"\"\"", "\n", "\n", "base_model_state_dict", ",", "loss_layer_state_dict", "=", "[", "strip_state_dict", "(", "s", ")", "for", "s", "in", "state_dict", "]", "\n", "# base_model_state_dict = strip_state_dict(base_model_state_dict, strip_key='base_model.')", "\n", "\n", "self", ".", "base_model", ".", "load_state_dict", "(", "base_model_state_dict", ")", "\n", "self", ".", "loss_layer", ".", "load_state_dict", "(", "loss_layer_state_dict", ")", "\n", "\n", "self", ".", "base_model", ".", "eval", "(", ")", "\n", "self", ".", "loss_layer", ".", "eval", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.models.model_utils.transform_moco_state_dict_places": [[71, 104], ["torch.randn", "torch.randn", "obj.items", "k.replace.startswith", "k.replace.startswith", "len", "len", "k.replace.replace", "torch.randn", "torch.randn", "torch.randn.size"], "function", ["None"], ["", "", "def", "transform_moco_state_dict_places", "(", "obj", ",", "num_classes", ",", "supervised", "=", "False", ")", ":", "\n", "\n", "    ", "\"\"\"\n    Transforms state dict from Places pretraining here: https://github.com/nanxuanzhao/Good_transfer\n    :param obj: Moco State Dict\n    :param args: argsparse object with training classes\n    :return: State dict compatable with standard resnet architecture\n    \"\"\"", "\n", "\n", "if", "supervised", ":", "\n", "\n", "        ", "new_model", "=", "obj", "\n", "new_model", "[", "'fc.weight'", "]", "=", "torch", ".", "randn", "(", "(", "len", "(", "args", ".", "train_classes", ")", ",", "2048", ")", ")", "\n", "new_model", "[", "'fc.bias'", "]", "=", "torch", ".", "randn", "(", "(", "len", "(", "args", ".", "train_classes", ")", ",", ")", ")", "\n", "\n", "", "else", ":", "\n", "\n", "        ", "newmodel", "=", "{", "}", "\n", "for", "k", ",", "v", "in", "obj", ".", "items", "(", ")", ":", "\n", "\n", "            ", "if", "k", ".", "startswith", "(", "\"fc.2\"", ")", ":", "\n", "                ", "continue", "\n", "\n", "", "if", "k", ".", "startswith", "(", "\"fc.0\"", ")", ":", "\n", "                ", "k", "=", "k", ".", "replace", "(", "\"0.\"", ",", "\"\"", ")", "\n", "if", "\"weight\"", "in", "k", ":", "\n", "                    ", "v", "=", "torch", ".", "randn", "(", "(", "num_classes", ",", "v", ".", "size", "(", "1", ")", ")", ")", "\n", "", "elif", "\"bias\"", "in", "k", ":", "\n", "                    ", "v", "=", "torch", ".", "randn", "(", "(", "num_classes", ",", ")", ")", "\n", "\n", "", "", "newmodel", "[", "k", "]", "=", "v", "\n", "\n", "", "", "return", "newmodel", "\n", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.models.model_utils.transform_moco_state_dict": [[106, 134], ["obj.items", "k.replace.replace", "k.replace.startswith", "k.replace.startswith", "k.replace.startswith", "k.replace.replace", "torch.randn", "torch.randn", "torch.randn.size"], "function", ["None"], ["", "def", "transform_moco_state_dict", "(", "obj", ",", "num_classes", ")", ":", "\n", "\n", "    ", "\"\"\"\n    :param obj: Moco State Dict\n    :param args: argsparse object with training classes\n    :return: State dict compatable with standard resnet architecture\n    \"\"\"", "\n", "\n", "newmodel", "=", "{", "}", "\n", "for", "k", ",", "v", "in", "obj", ".", "items", "(", ")", ":", "\n", "        ", "if", "not", "k", ".", "startswith", "(", "\"module.encoder_q.\"", ")", ":", "\n", "            ", "continue", "\n", "", "old_k", "=", "k", "\n", "k", "=", "k", ".", "replace", "(", "\"module.encoder_q.\"", ",", "\"\"", ")", "\n", "\n", "if", "k", ".", "startswith", "(", "\"fc.2\"", ")", ":", "\n", "            ", "continue", "\n", "\n", "", "if", "k", ".", "startswith", "(", "\"fc.0\"", ")", ":", "\n", "            ", "k", "=", "k", ".", "replace", "(", "\"0.\"", ",", "\"\"", ")", "\n", "if", "\"weight\"", "in", "k", ":", "\n", "                ", "v", "=", "torch", ".", "randn", "(", "(", "num_classes", ",", "v", ".", "size", "(", "1", ")", ")", ")", "\n", "", "elif", "\"bias\"", "in", "k", ":", "\n", "                ", "v", "=", "torch", ".", "randn", "(", "(", "num_classes", ",", ")", ")", "\n", "\n", "", "", "newmodel", "[", "k", "]", "=", "v", "\n", "\n", "", "return", "newmodel", "\n", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.models.model_utils.transform_moco_state_dict_arpl_cs": [[136, 210], ["obj.items", "newmodel.items", "k.replace.replace", "k.replace.startswith", "k.replace.startswith", "k.replace.startswith", "k.replace.replace", "k.replace.split", "k.replace.startswith", "torch.randn", "torch.randn", "k.replace.split", "torch.randn.size", "enumerate", "len"], "function", ["None"], ["", "def", "transform_moco_state_dict_arpl_cs", "(", "obj", ",", "num_classes", ")", ":", "\n", "\n", "    ", "\"\"\"\n    :param obj: Moco State Dict\n    :param args: argsparse object with training classes\n    :return: State dict compatable with standard resnet architecture\n    \"\"\"", "\n", "\n", "newmodel", "=", "{", "}", "\n", "for", "k", ",", "v", "in", "obj", ".", "items", "(", ")", ":", "\n", "        ", "if", "not", "k", ".", "startswith", "(", "\"module.encoder_q.\"", ")", ":", "\n", "            ", "continue", "\n", "", "old_k", "=", "k", "\n", "k", "=", "k", ".", "replace", "(", "\"module.encoder_q.\"", ",", "\"\"", ")", "\n", "\n", "if", "k", ".", "startswith", "(", "\"fc.2\"", ")", ":", "\n", "            ", "continue", "\n", "\n", "", "if", "k", ".", "startswith", "(", "\"fc.0\"", ")", ":", "\n", "            ", "k", "=", "k", ".", "replace", "(", "\"0.\"", ",", "\"\"", ")", "\n", "if", "\"weight\"", "in", "k", ":", "\n", "                ", "v", "=", "torch", ".", "randn", "(", "(", "num_classes", ",", "v", ".", "size", "(", "1", ")", ")", ")", "\n", "", "elif", "\"bias\"", "in", "k", ":", "\n", "                ", "v", "=", "torch", ".", "randn", "(", "(", "num_classes", ",", ")", ")", "\n", "\n", "", "", "newmodel", "[", "k", "]", "=", "v", "\n", "\n", "# For newmodel, change all batch norms from bnX.XXX --> bnX.bns.0.XXX", "\n", "#                                                   add bnX.bns.1.XXX with same params", "\n", "\n", "", "newmodel2", "=", "{", "}", "\n", "for", "k", ",", "v", "in", "newmodel", ".", "items", "(", ")", ":", "\n", "\n", "        ", "if", "'bn'", "in", "k", ":", "\n", "            ", "parts", "=", "k", ".", "split", "(", "'.'", ")", "\n", "if", "k", ".", "startswith", "(", "'bn1'", ")", ":", "\n", "\n", "                ", "newk1", "=", "'.'", ".", "join", "(", "[", "parts", "[", "0", "]", ",", "'bns'", ",", "'0'", ",", "parts", "[", "-", "1", "]", "]", ")", "\n", "newk2", "=", "'.'", ".", "join", "(", "[", "parts", "[", "0", "]", ",", "'bns'", ",", "'1'", ",", "parts", "[", "-", "1", "]", "]", ")", "\n", "\n", "", "else", ":", "\n", "\n", "                ", "idx", "=", "[", "i", "for", "i", ",", "x", "in", "enumerate", "(", "parts", ")", "if", "'bn'", "in", "x", "]", "\n", "idx", "=", "idx", "[", "0", "]", "+", "1", "\n", "newk1", "=", "'.'", ".", "join", "(", "[", "*", "parts", "[", ":", "idx", "]", ",", "'bns'", ",", "'0'", ",", "*", "parts", "[", "idx", ":", "]", "]", ")", "\n", "newk2", "=", "'.'", ".", "join", "(", "[", "*", "parts", "[", ":", "idx", "]", ",", "'bns'", ",", "'1'", ",", "*", "parts", "[", "idx", ":", "]", "]", ")", "\n", "\n", "", "newmodel2", "[", "newk1", "]", "=", "v", "\n", "newmodel2", "[", "newk2", "]", "=", "v", "\n", "\n", "\n", "", "elif", "'downsample'", "in", "k", ":", "\n", "\n", "            ", "if", "'downsample.0'", "in", "k", ":", "\n", "\n", "                ", "newmodel2", "[", "k", "]", "=", "v", "\n", "\n", "", "else", ":", "\n", "\n", "                ", "parts", "=", "k", ".", "split", "(", "'.'", ")", "\n", "idx", "=", "len", "(", "parts", ")", "-", "1", "\n", "\n", "newk1", "=", "'.'", ".", "join", "(", "[", "*", "parts", "[", ":", "idx", "]", ",", "'bns'", ",", "'0'", ",", "*", "parts", "[", "idx", ":", "]", "]", ")", "\n", "newk2", "=", "'.'", ".", "join", "(", "[", "*", "parts", "[", ":", "idx", "]", ",", "'bns'", ",", "'1'", ",", "*", "parts", "[", "idx", ":", "]", "]", ")", "\n", "\n", "newmodel2", "[", "newk1", "]", "=", "v", "\n", "newmodel2", "[", "newk2", "]", "=", "v", "\n", "\n", "", "", "else", ":", "\n", "\n", "            ", "newmodel2", "[", "k", "]", "=", "v", "\n", "\n", "\n", "", "", "return", "newmodel2", "\n", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.models.model_utils.get_model": [[212, 292], ["utils.utils.strip_state_dict", "functools.partial.", "model_utils.Classifier32ARPLWrapper.load_state_dict", "wrapper_class", "methods.ARPL.arpl_models.resnetABN.resnet50ABN", "timm.create_model", "torch.load", "len", "models.classifier32.classifier32", "functools.partial", "torch.load", "model_utils.TimmResNetWrapper", "methods.ARPL.loss.ARPLoss.ARPLoss", "model_utils.Classifier32ARPLWrapper", "timm.create_model", "len", "len", "functools.partial", "len", "functools.partial", "len", "methods.ARPL.arpl_models.arpl_models.classifier32ABN", "methods.ARPL.loss.ARPLoss.ARPLoss", "model_utils.Classifier32ARPLWrapper", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.utils.utils.strip_state_dict", "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.models.model_utils.Classifier32ARPLWrapper.load_state_dict", "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.arpl_models.resnetABN.resnet50ABN"], ["", "def", "get_model", "(", "args", ",", "wrapper_class", "=", "None", ",", "evaluate", "=", "False", ",", "*", "args_", ",", "**", "kwargs", ")", ":", "\n", "\n", "    ", "if", "args", ".", "model", "==", "'timm_resnet50_pretrained'", ":", "\n", "\n", "# Get model", "\n", "        ", "if", "args", ".", "cs", ":", "\n", "            ", "model", "=", "resnet50ABN", "(", "num_classes", "=", "len", "(", "args", ".", "train_classes", ")", ",", "num_bns", "=", "2", ",", "first_layer_conv", "=", "7", ")", "\n", "", "else", ":", "\n", "            ", "model", "=", "timm", ".", "create_model", "(", "'resnet50'", ",", "num_classes", "=", "len", "(", "args", ".", "train_classes", ")", ")", "\n", "\n", "# Get function to transform state_dict and state_dict path", "\n", "", "if", "args", ".", "resnet50_pretrain", "==", "'imagenet_moco'", ":", "\n", "            ", "pretrain_path", "=", "imagenet_moco_path", "\n", "state_dict_transform", "=", "transform_moco_state_dict", "\n", "", "elif", "args", ".", "resnet50_pretrain", "==", "'imagenet'", ":", "\n", "            ", "pretrain_path", "=", "imagenet_supervised_path", "\n", "state_dict_transform", "=", "partial", "(", "transform_moco_state_dict_places", ",", "supervised", "=", "False", ")", "\n", "", "elif", "args", ".", "resnet50_pretrain", "==", "'places_moco'", ":", "\n", "            ", "pretrain_path", "=", "places_moco_path", "\n", "state_dict_transform", "=", "partial", "(", "transform_moco_state_dict_places", ",", "supervised", "=", "False", ")", "\n", "", "elif", "args", ".", "resnet50_pretrain", "==", "'places'", ":", "\n", "            ", "pretrain_path", "=", "places_supervised_path", "\n", "state_dict_transform", "=", "partial", "(", "transform_moco_state_dict_places", ",", "supervised", "=", "True", ")", "\n", "", "elif", "args", ".", "resnet50_pretrain", "==", "'imagenet_moco'", "and", "args", ".", "cs", ":", "\n", "            ", "pretrain_path", "=", "imagenet_moco_path", "\n", "state_dict_transform", "=", "transform_moco_state_dict_arpl_cs", "# Note, not implemented for imagenet pretraining", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "# Load pretrain weights", "\n", "", "state_dict", "=", "torch", ".", "load", "(", "pretrain_path", ")", "if", "args", ".", "resnet50_pretrain", "!=", "'imagenet_moco'", "else", "torch", ".", "load", "(", "pretrain_path", ")", "[", "'state_dict'", "]", "\n", "state_dict", "=", "strip_state_dict", "(", "state_dict", ",", "strip_key", "=", "'module.'", ")", "\n", "state_dict", "=", "state_dict_transform", "(", "state_dict", ",", "len", "(", "args", ".", "train_classes", ")", ")", "\n", "\n", "model", ".", "load_state_dict", "(", "state_dict", ")", "\n", "\n", "# If loss is ARPLoss, bolt on loss layer to model", "\n", "if", "args", ".", "loss", "==", "'ARPLoss'", ":", "\n", "            ", "if", "evaluate", ":", "\n", "                ", "model", "=", "TimmResNetWrapper", "(", "model", ")", "\n", "\n", "loss_layer", "=", "ARPLoss", "(", "use_gpu", "=", "True", ",", "weight_pl", "=", "0.0", ",", "temp", "=", "1", ",", "num_classes", "=", "len", "(", "args", ".", "train_classes", ")", ",", "\n", "feat_dim", "=", "2048", ",", "label_smoothing", "=", "0.9", ")", "\n", "\n", "model", "=", "Classifier32ARPLWrapper", "(", "base_model", "=", "model", ",", "loss_layer", "=", "loss_layer", ")", "\n", "\n", "", "", "", "elif", "args", ".", "model", "==", "'classifier32'", ":", "\n", "\n", "        ", "try", ":", "\n", "            ", "feat_dim", "=", "args", ".", "feat_dim", "\n", "cs", "=", "args", ".", "cs", "\n", "", "except", ":", "\n", "            ", "feat_dim", "=", "None", "\n", "cs", "=", "False", "\n", "\n", "", "model", "=", "classifier32", "(", "num_classes", "=", "len", "(", "args", ".", "train_classes", ")", ",", "feat_dim", "=", "feat_dim", ")", "\n", "\n", "if", "args", ".", "loss", "==", "'ARPLoss'", ":", "\n", "            ", "if", "evaluate", ":", "\n", "                ", "if", "cs", ":", "\n", "                    ", "model", "=", "classifier32ABN", "(", "feat_dim", "=", "feat_dim", ",", "num_classes", "=", "len", "(", "args", ".", "train_classes", ")", ")", "\n", "\n", "loss_layer", "=", "ARPLoss", "(", "use_gpu", "=", "True", ",", "weight_pl", "=", "0.0", ",", "temp", "=", "1", ",", "num_classes", "=", "len", "(", "args", ".", "train_classes", ")", ",", "\n", "feat_dim", "=", "args", ".", "feat_dim", ",", "label_smoothing", "=", "0.9", ")", "\n", "\n", "model", "=", "Classifier32ARPLWrapper", "(", "base_model", "=", "model", ",", "loss_layer", "=", "loss_layer", ")", "\n", "\n", "", "", "", "", "elif", "args", ".", "model", "in", "[", "'wide_resnet50_2'", ",", "'efficientnet_b0'", ",", "'efficientnet_b7'", ",", "'dpn92'", ",", "'resnet50'", "]", ":", "\n", "\n", "        ", "model", "=", "timm", ".", "create_model", "(", "args", ".", "model", ",", "num_classes", "=", "len", "(", "args", ".", "train_classes", ")", ")", "\n", "\n", "", "else", ":", "\n", "\n", "        ", "raise", "NotImplementedError", "\n", "\n", "", "if", "wrapper_class", "is", "not", "None", ":", "\n", "        ", "model", "=", "wrapper_class", "(", "model", ",", "*", "args_", ",", "**", "kwargs", ")", "\n", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.models.miscel_utils.Swish.forward": [[56, 58], ["torch.sigmoid"], "methods", ["None"], ["    ", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "x", "*", "torch", ".", "sigmoid", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.models.miscel_utils.SwishImplementation.forward": [[62, 67], ["ctx.save_for_backward", "torch.sigmoid"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "i", ")", ":", "\n", "        ", "result", "=", "i", "*", "torch", ".", "sigmoid", "(", "i", ")", "\n", "ctx", ".", "save_for_backward", "(", "i", ")", "\n", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.models.miscel_utils.SwishImplementation.backward": [[68, 73], ["torch.sigmoid"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "grad_output", ")", ":", "\n", "        ", "i", "=", "ctx", ".", "saved_tensors", "[", "0", "]", "\n", "sigmoid_i", "=", "torch", ".", "sigmoid", "(", "i", ")", "\n", "return", "grad_output", "*", "(", "sigmoid_i", "*", "(", "1", "+", "i", "*", "(", "1", "-", "sigmoid_i", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.models.miscel_utils.MemoryEfficientSwish.forward": [[75, 77], ["SwishImplementation.apply"], "methods", ["None"], ["    ", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "SwishImplementation", ".", "apply", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.models.miscel_utils.Conv2dDynamicSamePadding.__init__": [[228, 231], ["torch.nn.Conv2d.__init__", "len"], "methods", ["home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.loss.ARPLoss.ARPLoss.__init__"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", "=", "1", ",", "dilation", "=", "1", ",", "groups", "=", "1", ",", "bias", "=", "True", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", ",", "0", ",", "dilation", ",", "groups", ",", "bias", ")", "\n", "self", ".", "stride", "=", "self", ".", "stride", "if", "len", "(", "self", ".", "stride", ")", "==", "2", "else", "[", "self", ".", "stride", "[", "0", "]", "]", "*", "2", "\n", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.models.miscel_utils.Conv2dDynamicSamePadding.forward": [[232, 242], ["max", "max", "torch.nn.functional.conv2d", "torch.nn.functional.pad.size", "miscel_utils.Conv2dDynamicSamePadding.weight.size", "math.ceil", "math.ceil", "torch.nn.functional.pad"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "ih", ",", "iw", "=", "x", ".", "size", "(", ")", "[", "-", "2", ":", "]", "\n", "kh", ",", "kw", "=", "self", ".", "weight", ".", "size", "(", ")", "[", "-", "2", ":", "]", "\n", "sh", ",", "sw", "=", "self", ".", "stride", "\n", "oh", ",", "ow", "=", "math", ".", "ceil", "(", "ih", "/", "sh", ")", ",", "math", ".", "ceil", "(", "iw", "/", "sw", ")", "# change the output size according to stride ! ! !", "\n", "pad_h", "=", "max", "(", "(", "oh", "-", "1", ")", "*", "self", ".", "stride", "[", "0", "]", "+", "(", "kh", "-", "1", ")", "*", "self", ".", "dilation", "[", "0", "]", "+", "1", "-", "ih", ",", "0", ")", "\n", "pad_w", "=", "max", "(", "(", "ow", "-", "1", ")", "*", "self", ".", "stride", "[", "1", "]", "+", "(", "kw", "-", "1", ")", "*", "self", ".", "dilation", "[", "1", "]", "+", "1", "-", "iw", ",", "0", ")", "\n", "if", "pad_h", ">", "0", "or", "pad_w", ">", "0", ":", "\n", "            ", "x", "=", "F", ".", "pad", "(", "x", ",", "[", "pad_w", "//", "2", ",", "pad_w", "-", "pad_w", "//", "2", ",", "pad_h", "//", "2", ",", "pad_h", "-", "pad_h", "//", "2", "]", ")", "\n", "", "return", "F", ".", "conv2d", "(", "x", ",", "self", ".", "weight", ",", "self", ".", "bias", ",", "self", ".", "stride", ",", "self", ".", "padding", ",", "self", ".", "dilation", ",", "self", ".", "groups", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.models.miscel_utils.Conv2dStaticSamePadding.__init__": [[251, 268], ["torch.nn.Conv2d.__init__", "max", "max", "isinstance", "miscel_utils.Conv2dStaticSamePadding.weight.size", "math.ceil", "math.ceil", "torch.nn.ZeroPad2d", "torch.nn.Identity", "len"], "methods", ["home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.loss.ARPLoss.ARPLoss.__init__", "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.augmentations.randaugment.Identity"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", "=", "1", ",", "image_size", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", ",", "**", "kwargs", ")", "\n", "self", ".", "stride", "=", "self", ".", "stride", "if", "len", "(", "self", ".", "stride", ")", "==", "2", "else", "[", "self", ".", "stride", "[", "0", "]", "]", "*", "2", "\n", "\n", "# Calculate padding based on image size and save it", "\n", "assert", "image_size", "is", "not", "None", "\n", "ih", ",", "iw", "=", "(", "image_size", ",", "image_size", ")", "if", "isinstance", "(", "image_size", ",", "int", ")", "else", "image_size", "\n", "kh", ",", "kw", "=", "self", ".", "weight", ".", "size", "(", ")", "[", "-", "2", ":", "]", "\n", "sh", ",", "sw", "=", "self", ".", "stride", "\n", "oh", ",", "ow", "=", "math", ".", "ceil", "(", "ih", "/", "sh", ")", ",", "math", ".", "ceil", "(", "iw", "/", "sw", ")", "\n", "pad_h", "=", "max", "(", "(", "oh", "-", "1", ")", "*", "self", ".", "stride", "[", "0", "]", "+", "(", "kh", "-", "1", ")", "*", "self", ".", "dilation", "[", "0", "]", "+", "1", "-", "ih", ",", "0", ")", "\n", "pad_w", "=", "max", "(", "(", "ow", "-", "1", ")", "*", "self", ".", "stride", "[", "1", "]", "+", "(", "kw", "-", "1", ")", "*", "self", ".", "dilation", "[", "1", "]", "+", "1", "-", "iw", ",", "0", ")", "\n", "if", "pad_h", ">", "0", "or", "pad_w", ">", "0", ":", "\n", "            ", "self", ".", "static_padding", "=", "nn", ".", "ZeroPad2d", "(", "(", "pad_w", "//", "2", ",", "pad_w", "-", "pad_w", "//", "2", ",", "\n", "pad_h", "//", "2", ",", "pad_h", "-", "pad_h", "//", "2", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "static_padding", "=", "nn", ".", "Identity", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.models.miscel_utils.Conv2dStaticSamePadding.forward": [[269, 273], ["miscel_utils.Conv2dStaticSamePadding.static_padding", "torch.nn.functional.conv2d"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "static_padding", "(", "x", ")", "\n", "x", "=", "F", ".", "conv2d", "(", "x", ",", "self", ".", "weight", ",", "self", ".", "bias", ",", "self", ".", "stride", ",", "self", ".", "padding", ",", "self", ".", "dilation", ",", "self", ".", "groups", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.models.miscel_utils.MaxPool2dDynamicSamePadding.__init__": [[296, 301], ["torch.nn.MaxPool2d.__init__", "isinstance", "isinstance", "isinstance"], "methods", ["home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.loss.ARPLoss.ARPLoss.__init__"], ["def", "__init__", "(", "self", ",", "kernel_size", ",", "stride", ",", "padding", "=", "0", ",", "dilation", "=", "1", ",", "return_indices", "=", "False", ",", "ceil_mode", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "kernel_size", ",", "stride", ",", "padding", ",", "dilation", ",", "return_indices", ",", "ceil_mode", ")", "\n", "self", ".", "stride", "=", "[", "self", ".", "stride", "]", "*", "2", "if", "isinstance", "(", "self", ".", "stride", ",", "int", ")", "else", "self", ".", "stride", "\n", "self", ".", "kernel_size", "=", "[", "self", ".", "kernel_size", "]", "*", "2", "if", "isinstance", "(", "self", ".", "kernel_size", ",", "int", ")", "else", "self", ".", "kernel_size", "\n", "self", ".", "dilation", "=", "[", "self", ".", "dilation", "]", "*", "2", "if", "isinstance", "(", "self", ".", "dilation", ",", "int", ")", "else", "self", ".", "dilation", "\n", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.models.miscel_utils.MaxPool2dDynamicSamePadding.forward": [[302, 313], ["max", "max", "torch.nn.functional.max_pool2d", "torch.nn.functional.pad.size", "math.ceil", "math.ceil", "torch.nn.functional.pad"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "ih", ",", "iw", "=", "x", ".", "size", "(", ")", "[", "-", "2", ":", "]", "\n", "kh", ",", "kw", "=", "self", ".", "kernel_size", "\n", "sh", ",", "sw", "=", "self", ".", "stride", "\n", "oh", ",", "ow", "=", "math", ".", "ceil", "(", "ih", "/", "sh", ")", ",", "math", ".", "ceil", "(", "iw", "/", "sw", ")", "\n", "pad_h", "=", "max", "(", "(", "oh", "-", "1", ")", "*", "self", ".", "stride", "[", "0", "]", "+", "(", "kh", "-", "1", ")", "*", "self", ".", "dilation", "[", "0", "]", "+", "1", "-", "ih", ",", "0", ")", "\n", "pad_w", "=", "max", "(", "(", "ow", "-", "1", ")", "*", "self", ".", "stride", "[", "1", "]", "+", "(", "kw", "-", "1", ")", "*", "self", ".", "dilation", "[", "1", "]", "+", "1", "-", "iw", ",", "0", ")", "\n", "if", "pad_h", ">", "0", "or", "pad_w", ">", "0", ":", "\n", "            ", "x", "=", "F", ".", "pad", "(", "x", ",", "[", "pad_w", "//", "2", ",", "pad_w", "-", "pad_w", "//", "2", ",", "pad_h", "//", "2", ",", "pad_h", "-", "pad_h", "//", "2", "]", ")", "\n", "", "return", "F", ".", "max_pool2d", "(", "x", ",", "self", ".", "kernel_size", ",", "self", ".", "stride", ",", "self", ".", "padding", ",", "\n", "self", ".", "dilation", ",", "self", ".", "ceil_mode", ",", "self", ".", "return_indices", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.models.miscel_utils.MaxPool2dStaticSamePadding.__init__": [[319, 337], ["torch.nn.MaxPool2d.__init__", "max", "max", "isinstance", "isinstance", "isinstance", "isinstance", "math.ceil", "math.ceil", "torch.nn.ZeroPad2d", "torch.nn.Identity"], "methods", ["home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.loss.ARPLoss.ARPLoss.__init__", "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.augmentations.randaugment.Identity"], ["def", "__init__", "(", "self", ",", "kernel_size", ",", "stride", ",", "image_size", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "kernel_size", ",", "stride", ",", "**", "kwargs", ")", "\n", "self", ".", "stride", "=", "[", "self", ".", "stride", "]", "*", "2", "if", "isinstance", "(", "self", ".", "stride", ",", "int", ")", "else", "self", ".", "stride", "\n", "self", ".", "kernel_size", "=", "[", "self", ".", "kernel_size", "]", "*", "2", "if", "isinstance", "(", "self", ".", "kernel_size", ",", "int", ")", "else", "self", ".", "kernel_size", "\n", "self", ".", "dilation", "=", "[", "self", ".", "dilation", "]", "*", "2", "if", "isinstance", "(", "self", ".", "dilation", ",", "int", ")", "else", "self", ".", "dilation", "\n", "\n", "# Calculate padding based on image size and save it", "\n", "assert", "image_size", "is", "not", "None", "\n", "ih", ",", "iw", "=", "(", "image_size", ",", "image_size", ")", "if", "isinstance", "(", "image_size", ",", "int", ")", "else", "image_size", "\n", "kh", ",", "kw", "=", "self", ".", "kernel_size", "\n", "sh", ",", "sw", "=", "self", ".", "stride", "\n", "oh", ",", "ow", "=", "math", ".", "ceil", "(", "ih", "/", "sh", ")", ",", "math", ".", "ceil", "(", "iw", "/", "sw", ")", "\n", "pad_h", "=", "max", "(", "(", "oh", "-", "1", ")", "*", "self", ".", "stride", "[", "0", "]", "+", "(", "kh", "-", "1", ")", "*", "self", ".", "dilation", "[", "0", "]", "+", "1", "-", "ih", ",", "0", ")", "\n", "pad_w", "=", "max", "(", "(", "ow", "-", "1", ")", "*", "self", ".", "stride", "[", "1", "]", "+", "(", "kw", "-", "1", ")", "*", "self", ".", "dilation", "[", "1", "]", "+", "1", "-", "iw", ",", "0", ")", "\n", "if", "pad_h", ">", "0", "or", "pad_w", ">", "0", ":", "\n", "            ", "self", ".", "static_padding", "=", "nn", ".", "ZeroPad2d", "(", "(", "pad_w", "//", "2", ",", "pad_w", "-", "pad_w", "//", "2", ",", "pad_h", "//", "2", ",", "pad_h", "-", "pad_h", "//", "2", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "static_padding", "=", "nn", ".", "Identity", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.models.miscel_utils.MaxPool2dStaticSamePadding.forward": [[338, 343], ["miscel_utils.MaxPool2dStaticSamePadding.static_padding", "torch.nn.functional.max_pool2d"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "static_padding", "(", "x", ")", "\n", "x", "=", "F", ".", "max_pool2d", "(", "x", ",", "self", ".", "kernel_size", ",", "self", ".", "stride", ",", "self", ".", "padding", ",", "\n", "self", ".", "dilation", ",", "self", ".", "ceil_mode", ",", "self", ".", "return_indices", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.models.miscel_utils.BlockDecoder._decode_block_string": [[361, 395], ["isinstance", "block_string.split", "BlockArgs", "re.split", "len", "int", "int", "int", "int", "int", "len", "len", "int", "float"], "methods", ["None"], ["@", "staticmethod", "\n", "def", "_decode_block_string", "(", "block_string", ")", ":", "\n", "        ", "\"\"\"Get a block through a string notation of arguments.\n\n        Args:\n            block_string (str): A string notation of arguments.\n                                Examples: 'r1_k3_s11_e1_i32_o16_se0.25_noskip'.\n\n        Returns:\n            BlockArgs: The namedtuple defined at the top of this file.\n        \"\"\"", "\n", "assert", "isinstance", "(", "block_string", ",", "str", ")", "\n", "\n", "ops", "=", "block_string", ".", "split", "(", "'_'", ")", "\n", "options", "=", "{", "}", "\n", "for", "op", "in", "ops", ":", "\n", "            ", "splits", "=", "re", ".", "split", "(", "r'(\\d.*)'", ",", "op", ")", "\n", "if", "len", "(", "splits", ")", ">=", "2", ":", "\n", "                ", "key", ",", "value", "=", "splits", "[", ":", "2", "]", "\n", "options", "[", "key", "]", "=", "value", "\n", "\n", "# Check stride", "\n", "", "", "assert", "(", "(", "'s'", "in", "options", "and", "len", "(", "options", "[", "'s'", "]", ")", "==", "1", ")", "or", "\n", "(", "len", "(", "options", "[", "'s'", "]", ")", "==", "2", "and", "options", "[", "'s'", "]", "[", "0", "]", "==", "options", "[", "'s'", "]", "[", "1", "]", ")", ")", "\n", "\n", "return", "BlockArgs", "(", "\n", "num_repeat", "=", "int", "(", "options", "[", "'r'", "]", ")", ",", "\n", "kernel_size", "=", "int", "(", "options", "[", "'k'", "]", ")", ",", "\n", "stride", "=", "[", "int", "(", "options", "[", "'s'", "]", "[", "0", "]", ")", "]", ",", "\n", "expand_ratio", "=", "int", "(", "options", "[", "'e'", "]", ")", ",", "\n", "input_filters", "=", "int", "(", "options", "[", "'i'", "]", ")", ",", "\n", "output_filters", "=", "int", "(", "options", "[", "'o'", "]", ")", ",", "\n", "se_ratio", "=", "float", "(", "options", "[", "'se'", "]", ")", "if", "'se'", "in", "options", "else", "None", ",", "\n", "id_skip", "=", "(", "'noskip'", "not", "in", "block_string", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.models.miscel_utils.BlockDecoder._encode_block_string": [[396, 419], ["args.append", "args.append"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_encode_block_string", "(", "block", ")", ":", "\n", "        ", "\"\"\"Encode a block to a string.\n\n        Args:\n            block (namedtuple): A BlockArgs type argument.\n\n        Returns:\n            block_string: A String form of BlockArgs.\n        \"\"\"", "\n", "args", "=", "[", "\n", "'r%d'", "%", "block", ".", "num_repeat", ",", "\n", "'k%d'", "%", "block", ".", "kernel_size", ",", "\n", "'s%d%d'", "%", "(", "block", ".", "strides", "[", "0", "]", ",", "block", ".", "strides", "[", "1", "]", ")", ",", "\n", "'e%s'", "%", "block", ".", "expand_ratio", ",", "\n", "'i%d'", "%", "block", ".", "input_filters", ",", "\n", "'o%d'", "%", "block", ".", "output_filters", "\n", "]", "\n", "if", "0", "<", "block", ".", "se_ratio", "<=", "1", ":", "\n", "            ", "args", ".", "append", "(", "'se%s'", "%", "block", ".", "se_ratio", ")", "\n", "", "if", "block", ".", "id_skip", "is", "False", ":", "\n", "            ", "args", ".", "append", "(", "'noskip'", ")", "\n", "", "return", "'_'", ".", "join", "(", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.models.miscel_utils.BlockDecoder.decode": [[420, 435], ["isinstance", "blocks_args.append", "miscel_utils.BlockDecoder._decode_block_string"], "methods", ["home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.models.miscel_utils.BlockDecoder._decode_block_string"], ["", "@", "staticmethod", "\n", "def", "decode", "(", "string_list", ")", ":", "\n", "        ", "\"\"\"Decode a list of string notations to specify blocks inside the network.\n\n        Args:\n            string_list (list[str]): A list of strings, each string is a notation of block.\n\n        Returns:\n            blocks_args: A list of BlockArgs namedtuples of block args.\n        \"\"\"", "\n", "assert", "isinstance", "(", "string_list", ",", "list", ")", "\n", "blocks_args", "=", "[", "]", "\n", "for", "block_string", "in", "string_list", ":", "\n", "            ", "blocks_args", ".", "append", "(", "BlockDecoder", ".", "_decode_block_string", "(", "block_string", ")", ")", "\n", "", "return", "blocks_args", "\n", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.models.miscel_utils.BlockDecoder.encode": [[436, 450], ["block_strings.append", "miscel_utils.BlockDecoder._encode_block_string"], "methods", ["home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.models.miscel_utils.BlockDecoder._encode_block_string"], ["", "@", "staticmethod", "\n", "def", "encode", "(", "blocks_args", ")", ":", "\n", "        ", "\"\"\"Encode a list of BlockArgs to a list of strings.\n\n        Args:\n            blocks_args (list[namedtuples]): A list of BlockArgs namedtuples of block args.\n\n        Returns:\n            block_strings: A list of strings, each string is a notation of block.\n        \"\"\"", "\n", "block_strings", "=", "[", "]", "\n", "for", "block", "in", "blocks_args", ":", "\n", "            ", "block_strings", ".", "append", "(", "BlockDecoder", ".", "_encode_block_string", "(", "block", ")", ")", "\n", "", "return", "block_strings", "\n", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.models.miscel_utils.round_filters": [[79, 105], ["max", "int", "int"], "function", ["None"], ["", "", "def", "round_filters", "(", "filters", ",", "global_params", ")", ":", "\n", "    ", "\"\"\"Calculate and round number of filters based on width multiplier.\n       Use width_coefficient, depth_divisor and min_depth of global_params.\n\n    Args:\n        filters (int): Filters number to be calculated.\n        global_params (namedtuple): Global params of the model.\n\n    Returns:\n        new_filters: New filters number after calculating.\n    \"\"\"", "\n", "multiplier", "=", "global_params", ".", "width_coefficient", "\n", "if", "not", "multiplier", ":", "\n", "        ", "return", "filters", "\n", "# TODO: modify the params names.", "\n", "#       maybe the names (width_divisor,min_width)", "\n", "#       are more suitable than (depth_divisor,min_depth).", "\n", "", "divisor", "=", "global_params", ".", "depth_divisor", "\n", "min_depth", "=", "global_params", ".", "min_depth", "\n", "filters", "*=", "multiplier", "\n", "min_depth", "=", "min_depth", "or", "divisor", "# pay attention to this line when using min_depth", "\n", "# follow the formula transferred from official TensorFlow implementation", "\n", "new_filters", "=", "max", "(", "min_depth", ",", "int", "(", "filters", "+", "divisor", "/", "2", ")", "//", "divisor", "*", "divisor", ")", "\n", "if", "new_filters", "<", "0.9", "*", "filters", ":", "# prevent rounding by more than 10%", "\n", "        ", "new_filters", "+=", "divisor", "\n", "", "return", "int", "(", "new_filters", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.models.miscel_utils.round_repeats": [[107, 123], ["int", "math.ceil"], "function", ["None"], ["", "def", "round_repeats", "(", "repeats", ",", "global_params", ")", ":", "\n", "    ", "\"\"\"Calculate module's repeat number of a block based on depth multiplier.\n       Use depth_coefficient of global_params.\n\n    Args:\n        repeats (int): num_repeat to be calculated.\n        global_params (namedtuple): Global params of the model.\n\n    Returns:\n        new repeat: New repeat number after calculating.\n    \"\"\"", "\n", "multiplier", "=", "global_params", ".", "depth_coefficient", "\n", "if", "not", "multiplier", ":", "\n", "        ", "return", "repeats", "\n", "# follow the formula transferred from official TensorFlow implementation", "\n", "", "return", "int", "(", "math", ".", "ceil", "(", "multiplier", "*", "repeats", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.models.miscel_utils.drop_connect": [[125, 151], ["torch.rand", "torch.floor"], "function", ["None"], ["", "def", "drop_connect", "(", "inputs", ",", "p", ",", "training", ")", ":", "\n", "    ", "\"\"\"Drop connect.\n\n    Args:\n        input (tensor: BCWH): Input of this structure.\n        p (float: 0.0~1.0): Probability of drop connection.\n        training (bool): The running mode.\n\n    Returns:\n        output: Output after drop connection.\n    \"\"\"", "\n", "assert", "0", "<=", "p", "<=", "1", ",", "'p must be in range of [0,1]'", "\n", "\n", "if", "not", "training", ":", "\n", "        ", "return", "inputs", "\n", "\n", "", "batch_size", "=", "inputs", ".", "shape", "[", "0", "]", "\n", "keep_prob", "=", "1", "-", "p", "\n", "\n", "# generate binary_tensor mask according to probability (p for 0, 1-p for 1)", "\n", "random_tensor", "=", "keep_prob", "\n", "random_tensor", "+=", "torch", ".", "rand", "(", "[", "batch_size", ",", "1", ",", "1", ",", "1", "]", ",", "dtype", "=", "inputs", ".", "dtype", ",", "device", "=", "inputs", ".", "device", ")", "\n", "binary_tensor", "=", "torch", ".", "floor", "(", "random_tensor", ")", "\n", "\n", "output", "=", "inputs", "/", "keep_prob", "*", "binary_tensor", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.models.miscel_utils.get_width_and_height_from_size": [[153, 168], ["isinstance", "isinstance", "isinstance", "TypeError"], "function", ["None"], ["", "def", "get_width_and_height_from_size", "(", "x", ")", ":", "\n", "    ", "\"\"\"Obtain height and width from x.\n\n    Args:\n        x (int, tuple or list): Data size.\n\n    Returns:\n        size: A tuple or list (H,W).\n    \"\"\"", "\n", "if", "isinstance", "(", "x", ",", "int", ")", ":", "\n", "        ", "return", "x", ",", "x", "\n", "", "if", "isinstance", "(", "x", ",", "list", ")", "or", "isinstance", "(", "x", ",", "tuple", ")", ":", "\n", "        ", "return", "x", "\n", "", "else", ":", "\n", "        ", "raise", "TypeError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.models.miscel_utils.calculate_output_image_size": [[170, 188], ["miscel_utils.get_width_and_height_from_size", "int", "int", "isinstance", "math.ceil", "math.ceil"], "function", ["home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.models.miscel_utils.get_width_and_height_from_size"], ["", "", "def", "calculate_output_image_size", "(", "input_image_size", ",", "stride", ")", ":", "\n", "    ", "\"\"\"Calculates the output image size when using Conv2dSamePadding with a stride.\n       Necessary for static padding. Thanks to mannatsingh for pointing this out.\n\n    Args:\n        input_image_size (int, tuple or list): Size of input image.\n        stride (int, tuple or list): Conv2d operation's stride.\n\n    Returns:\n        output_image_size: A list [H,W].\n    \"\"\"", "\n", "if", "input_image_size", "is", "None", ":", "\n", "        ", "return", "None", "\n", "", "image_height", ",", "image_width", "=", "get_width_and_height_from_size", "(", "input_image_size", ")", "\n", "stride", "=", "stride", "if", "isinstance", "(", "stride", ",", "int", ")", "else", "stride", "[", "0", "]", "\n", "image_height", "=", "int", "(", "math", ".", "ceil", "(", "image_height", "/", "stride", ")", ")", "\n", "image_width", "=", "int", "(", "math", ".", "ceil", "(", "image_width", "/", "stride", ")", ")", "\n", "return", "[", "image_height", ",", "image_width", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.models.miscel_utils.get_same_padding_conv2d": [[195, 209], ["functools.partial"], "function", ["None"], ["", "def", "get_same_padding_conv2d", "(", "image_size", "=", "None", ")", ":", "\n", "    ", "\"\"\"Chooses static padding if you have specified an image size, and dynamic padding otherwise.\n       Static padding is necessary for ONNX exporting of models.\n\n    Args:\n        image_size (int or tuple): Size of the image.\n\n    Returns:\n        Conv2dDynamicSamePadding or Conv2dStaticSamePadding.\n    \"\"\"", "\n", "if", "image_size", "is", "None", ":", "\n", "        ", "return", "Conv2dDynamicSamePadding", "\n", "", "else", ":", "\n", "        ", "return", "partial", "(", "Conv2dStaticSamePadding", ",", "image_size", "=", "image_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.models.miscel_utils.get_same_padding_maxPool2d": [[275, 289], ["functools.partial"], "function", ["None"], ["", "", "def", "get_same_padding_maxPool2d", "(", "image_size", "=", "None", ")", ":", "\n", "    ", "\"\"\"Chooses static padding if you have specified an image size, and dynamic padding otherwise.\n       Static padding is necessary for ONNX exporting of models.\n\n    Args:\n        image_size (int or tuple): Size of the image.\n\n    Returns:\n        MaxPool2dDynamicSamePadding or MaxPool2dStaticSamePadding.\n    \"\"\"", "\n", "if", "image_size", "is", "None", ":", "\n", "        ", "return", "MaxPool2dDynamicSamePadding", "\n", "", "else", ":", "\n", "        ", "return", "partial", "(", "MaxPool2dStaticSamePadding", ",", "image_size", "=", "image_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.models.miscel_utils.efficientnet_params": [[452, 475], ["None"], "function", ["None"], ["", "", "def", "efficientnet_params", "(", "model_name", ")", ":", "\n", "    ", "\"\"\"Map EfficientNet model name to parameter coefficients.\n\n    Args:\n        model_name (str): Model name to be queried.\n\n    Returns:\n        params_dict[model_name]: A (width,depth,res,dropout) tuple.\n    \"\"\"", "\n", "params_dict", "=", "{", "\n", "# Coefficients:   width,depth,res,dropout", "\n", "'efficientnet-b0'", ":", "(", "1.0", ",", "1.0", ",", "224", ",", "0.2", ")", ",", "\n", "'efficientnet-b1'", ":", "(", "1.0", ",", "1.1", ",", "240", ",", "0.2", ")", ",", "\n", "'efficientnet-b2'", ":", "(", "1.1", ",", "1.2", ",", "260", ",", "0.3", ")", ",", "\n", "'efficientnet-b3'", ":", "(", "1.2", ",", "1.4", ",", "300", ",", "0.3", ")", ",", "\n", "'efficientnet-b4'", ":", "(", "1.4", ",", "1.8", ",", "380", ",", "0.4", ")", ",", "\n", "'efficientnet-b5'", ":", "(", "1.6", ",", "2.2", ",", "456", ",", "0.4", ")", ",", "\n", "'efficientnet-b6'", ":", "(", "1.8", ",", "2.6", ",", "528", ",", "0.5", ")", ",", "\n", "'efficientnet-b7'", ":", "(", "2.0", ",", "3.1", ",", "600", ",", "0.5", ")", ",", "\n", "'efficientnet-b8'", ":", "(", "2.2", ",", "3.6", ",", "672", ",", "0.5", ")", ",", "\n", "'efficientnet-l2'", ":", "(", "4.3", ",", "5.3", ",", "800", ",", "0.5", ")", ",", "\n", "}", "\n", "return", "params_dict", "[", "model_name", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.models.miscel_utils.efficientnet": [[477, 524], ["miscel_utils.BlockDecoder.decode", "GlobalParams"], "function", ["home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.models.miscel_utils.BlockDecoder.decode"], ["", "def", "efficientnet", "(", "width_coefficient", "=", "None", ",", "depth_coefficient", "=", "None", ",", "image_size", "=", "None", ",", "\n", "dropout_rate", "=", "0.2", ",", "drop_connect_rate", "=", "0.2", ",", "num_classes", "=", "1000", ",", "include_top", "=", "True", ")", ":", "\n", "    ", "\"\"\"Create BlockArgs and GlobalParams for efficientnet model.\n\n    Args:\n        width_coefficient (float)\n        depth_coefficient (float)\n        image_size (int)\n        dropout_rate (float)\n        drop_connect_rate (float)\n        num_classes (int)\n\n        Meaning as the name suggests.\n\n    Returns:\n        blocks_args, global_params.\n    \"\"\"", "\n", "\n", "# Blocks args for the whole model(efficientnet-b0 by default)", "\n", "# It will be modified in the construction of EfficientNet Class according to model", "\n", "blocks_args", "=", "[", "\n", "'r1_k3_s11_e1_i32_o16_se0.25'", ",", "\n", "'r2_k3_s22_e6_i16_o24_se0.25'", ",", "\n", "'r2_k5_s22_e6_i24_o40_se0.25'", ",", "\n", "'r3_k3_s22_e6_i40_o80_se0.25'", ",", "\n", "'r3_k5_s11_e6_i80_o112_se0.25'", ",", "\n", "'r4_k5_s22_e6_i112_o192_se0.25'", ",", "\n", "'r1_k3_s11_e6_i192_o320_se0.25'", ",", "\n", "]", "\n", "blocks_args", "=", "BlockDecoder", ".", "decode", "(", "blocks_args", ")", "\n", "\n", "global_params", "=", "GlobalParams", "(", "\n", "width_coefficient", "=", "width_coefficient", ",", "\n", "depth_coefficient", "=", "depth_coefficient", ",", "\n", "image_size", "=", "image_size", ",", "\n", "dropout_rate", "=", "dropout_rate", ",", "\n", "\n", "num_classes", "=", "num_classes", ",", "\n", "batch_norm_momentum", "=", "0.99", ",", "\n", "batch_norm_epsilon", "=", "1e-3", ",", "\n", "drop_connect_rate", "=", "drop_connect_rate", ",", "\n", "depth_divisor", "=", "8", ",", "\n", "min_depth", "=", "None", ",", "\n", "include_top", "=", "include_top", ",", "\n", ")", "\n", "\n", "return", "blocks_args", ",", "global_params", "\n", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.models.miscel_utils.get_model_params": [[526, 547], ["model_name.startswith", "miscel_utils.efficientnet_params", "miscel_utils.efficientnet", "NotImplementedError", "global_params._replace._replace"], "function", ["home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.models.miscel_utils.efficientnet_params", "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.models.miscel_utils.efficientnet"], ["", "def", "get_model_params", "(", "model_name", ",", "override_params", ")", ":", "\n", "    ", "\"\"\"Get the block args and global params for a given model name.\n\n    Args:\n        model_name (str): Model's name.\n        override_params (dict): A dict to modify global_params.\n\n    Returns:\n        blocks_args, global_params\n    \"\"\"", "\n", "if", "model_name", ".", "startswith", "(", "'efficientnet'", ")", ":", "\n", "        ", "w", ",", "d", ",", "s", ",", "p", "=", "efficientnet_params", "(", "model_name", ")", "\n", "# note: all models have drop connect rate = 0.2", "\n", "blocks_args", ",", "global_params", "=", "efficientnet", "(", "\n", "width_coefficient", "=", "w", ",", "depth_coefficient", "=", "d", ",", "dropout_rate", "=", "p", ",", "image_size", "=", "s", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "'model name is not pre-defined: {}'", ".", "format", "(", "model_name", ")", ")", "\n", "", "if", "override_params", ":", "\n", "# ValueError will be raised here if override_params has fields not included in global_params.", "\n", "        ", "global_params", "=", "global_params", ".", "_replace", "(", "**", "override_params", ")", "\n", "", "return", "blocks_args", ",", "global_params", "\n", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.models.miscel_utils.load_pretrained_weights": [[579, 611], ["isinstance", "print", "torch.load", "torch.utils.model_zoo.load_url", "model.load_state_dict", "model_zoo.load_url.pop", "model_zoo.load_url.pop", "model.load_state_dict", "set", "set"], "function", ["home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.models.model_utils.Classifier32ARPLWrapper.load_state_dict", "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.models.model_utils.Classifier32ARPLWrapper.load_state_dict"], ["def", "load_pretrained_weights", "(", "model", ",", "model_name", ",", "weights_path", "=", "None", ",", "load_fc", "=", "True", ",", "advprop", "=", "False", ")", ":", "\n", "    ", "\"\"\"Loads pretrained weights from weights path or download using url.\n\n    Args:\n        model (Module): The whole model of efficientnet.\n        model_name (str): Model name of efficientnet.\n        weights_path (None or str):\n            str: path to pretrained weights file on the local disk.\n            None: use pretrained weights downloaded from the Internet.\n        load_fc (bool): Whether to load pretrained weights for fc layer at the end of the model.\n        advprop (bool): Whether to load pretrained weights\n                        trained with advprop (valid when weights_path is None).\n    \"\"\"", "\n", "if", "isinstance", "(", "weights_path", ",", "str", ")", ":", "\n", "        ", "state_dict", "=", "torch", ".", "load", "(", "weights_path", ")", "\n", "", "else", ":", "\n", "# AutoAugment or Advprop (different preprocessing)", "\n", "        ", "url_map_", "=", "url_map_advprop", "if", "advprop", "else", "url_map", "\n", "state_dict", "=", "model_zoo", ".", "load_url", "(", "url_map_", "[", "model_name", "]", ")", "\n", "\n", "", "if", "load_fc", ":", "\n", "        ", "ret", "=", "model", ".", "load_state_dict", "(", "state_dict", ",", "strict", "=", "False", ")", "\n", "assert", "not", "ret", ".", "missing_keys", ",", "'Missing keys when loading pretrained weights: {}'", ".", "format", "(", "ret", ".", "missing_keys", ")", "\n", "", "else", ":", "\n", "        ", "state_dict", ".", "pop", "(", "'_fc.weight'", ")", "\n", "state_dict", ".", "pop", "(", "'_fc.bias'", ")", "\n", "ret", "=", "model", ".", "load_state_dict", "(", "state_dict", ",", "strict", "=", "False", ")", "\n", "assert", "set", "(", "ret", ".", "missing_keys", ")", "==", "set", "(", "\n", "[", "'_fc.weight'", ",", "'_fc.bias'", "]", ")", ",", "'Missing keys when loading pretrained weights: {}'", ".", "format", "(", "ret", ".", "missing_keys", ")", "\n", "", "assert", "not", "ret", ".", "unexpected_keys", ",", "'Missing keys when loading pretrained weights: {}'", ".", "format", "(", "ret", ".", "unexpected_keys", ")", "\n", "\n", "print", "(", "'Loaded pretrained weights for {}'", ".", "format", "(", "model_name", ")", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.models.classifier32.classifier32.__init__": [[5, 45], ["torch.nn.Module.__init__", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.AdaptiveAvgPool2d", "torch.nn.Linear", "torch.nn.Dropout2d", "torch.nn.Dropout2d", "torch.nn.Dropout2d", "classifier32.classifier32.apply", "classifier32.classifier32.cuda"], "methods", ["home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.loss.ARPLoss.ARPLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_classes", "=", "10", ",", "feat_dim", "=", "128", ")", ":", "\n", "        ", "super", "(", "self", ".", "__class__", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "if", "feat_dim", "is", "None", ":", "\n", "            ", "feat_dim", "=", "128", "\n", "\n", "", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "64", ",", "64", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "64", ",", "128", ",", "3", ",", "2", ",", "1", ",", "bias", "=", "False", ")", "\n", "\n", "self", ".", "conv4", "=", "nn", ".", "Conv2d", "(", "128", ",", "128", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv5", "=", "nn", ".", "Conv2d", "(", "128", ",", "128", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv6", "=", "nn", ".", "Conv2d", "(", "128", ",", "128", ",", "3", ",", "2", ",", "1", ",", "bias", "=", "False", ")", "\n", "\n", "self", ".", "conv7", "=", "nn", ".", "Conv2d", "(", "128", ",", "128", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv8", "=", "nn", ".", "Conv2d", "(", "128", ",", "128", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv9", "=", "nn", ".", "Conv2d", "(", "128", ",", "feat_dim", ",", "3", ",", "2", ",", "1", ",", "bias", "=", "False", ")", "\n", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "128", ")", "\n", "\n", "self", ".", "bn4", "=", "nn", ".", "BatchNorm2d", "(", "128", ")", "\n", "self", ".", "bn5", "=", "nn", ".", "BatchNorm2d", "(", "128", ")", "\n", "self", ".", "bn6", "=", "nn", ".", "BatchNorm2d", "(", "128", ")", "\n", "\n", "self", ".", "bn7", "=", "nn", ".", "BatchNorm2d", "(", "128", ")", "\n", "self", ".", "bn8", "=", "nn", ".", "BatchNorm2d", "(", "128", ")", "\n", "self", ".", "bn9", "=", "nn", ".", "BatchNorm2d", "(", "feat_dim", ")", "\n", "self", ".", "bn10", "=", "nn", ".", "BatchNorm2d", "(", "128", ")", "\n", "\n", "self", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "feat_dim", ",", "num_classes", ",", "bias", "=", "False", ")", "\n", "self", ".", "dr1", "=", "nn", ".", "Dropout2d", "(", "0.2", ")", "\n", "self", ".", "dr2", "=", "nn", ".", "Dropout2d", "(", "0.2", ")", "\n", "self", ".", "dr3", "=", "nn", ".", "Dropout2d", "(", "0.2", ")", "\n", "\n", "self", ".", "apply", "(", "weights_init", ")", "\n", "self", ".", "cuda", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.models.classifier32.classifier32.forward": [[46, 87], ["classifier32.classifier32.dr1", "classifier32.classifier32.conv1", "classifier32.classifier32.bn1", "classifier32.classifier32.conv2", "classifier32.classifier32.bn2", "classifier32.classifier32.conv3", "classifier32.classifier32.bn3", "classifier32.classifier32.dr2", "classifier32.classifier32.conv4", "classifier32.classifier32.bn4", "classifier32.classifier32.conv5", "classifier32.classifier32.bn5", "classifier32.classifier32.conv6", "classifier32.classifier32.bn6", "classifier32.classifier32.dr3", "classifier32.classifier32.conv7", "classifier32.classifier32.bn7", "classifier32.classifier32.conv8", "classifier32.classifier32.bn8", "classifier32.classifier32.conv9", "classifier32.classifier32.bn9", "classifier32.classifier32.avgpool", "torch.flatten", "classifier32.classifier32.fc", "torch.nn.LeakyReLU", "torch.nn.LeakyReLU", "torch.nn.LeakyReLU", "torch.nn.LeakyReLU", "torch.nn.LeakyReLU", "torch.nn.LeakyReLU", "torch.nn.LeakyReLU", "torch.nn.LeakyReLU", "torch.nn.LeakyReLU"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "return_feature", "=", "False", ")", ":", "\n", "        ", "x", "=", "self", ".", "dr1", "(", "x", ")", "\n", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "nn", ".", "LeakyReLU", "(", "0.2", ")", "(", "x", ")", "\n", "x", "=", "self", ".", "conv2", "(", "x", ")", "\n", "x", "=", "self", ".", "bn2", "(", "x", ")", "\n", "x", "=", "nn", ".", "LeakyReLU", "(", "0.2", ")", "(", "x", ")", "\n", "x", "=", "self", ".", "conv3", "(", "x", ")", "\n", "x", "=", "self", ".", "bn3", "(", "x", ")", "\n", "x", "=", "nn", ".", "LeakyReLU", "(", "0.2", ")", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "dr2", "(", "x", ")", "\n", "x", "=", "self", ".", "conv4", "(", "x", ")", "\n", "x", "=", "self", ".", "bn4", "(", "x", ")", "\n", "x", "=", "nn", ".", "LeakyReLU", "(", "0.2", ")", "(", "x", ")", "\n", "x", "=", "self", ".", "conv5", "(", "x", ")", "\n", "x", "=", "self", ".", "bn5", "(", "x", ")", "\n", "x", "=", "nn", ".", "LeakyReLU", "(", "0.2", ")", "(", "x", ")", "\n", "x", "=", "self", ".", "conv6", "(", "x", ")", "\n", "x", "=", "self", ".", "bn6", "(", "x", ")", "\n", "x", "=", "nn", ".", "LeakyReLU", "(", "0.2", ")", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "dr3", "(", "x", ")", "\n", "x", "=", "self", ".", "conv7", "(", "x", ")", "\n", "x", "=", "self", ".", "bn7", "(", "x", ")", "\n", "x", "=", "nn", ".", "LeakyReLU", "(", "0.2", ")", "(", "x", ")", "\n", "x", "=", "self", ".", "conv8", "(", "x", ")", "\n", "x", "=", "self", ".", "bn8", "(", "x", ")", "\n", "x", "=", "nn", ".", "LeakyReLU", "(", "0.2", ")", "(", "x", ")", "\n", "x", "=", "self", ".", "conv9", "(", "x", ")", "\n", "x", "=", "self", ".", "bn9", "(", "x", ")", "\n", "x", "=", "nn", ".", "LeakyReLU", "(", "0.2", ")", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "x", "=", "torch", ".", "flatten", "(", "x", ",", "1", ")", "\n", "y", "=", "self", ".", "fc", "(", "x", ")", "\n", "if", "return_feature", ":", "\n", "            ", "return", "x", ",", "y", "\n", "", "else", ":", "\n", "            ", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.models.classifier32.weights_init": [[88, 96], ["classname.find", "m.weight.data.normal_", "classname.find", "m.weight.data.normal_", "m.bias.data.fill_"], "function", ["None"], ["", "", "", "def", "weights_init", "(", "m", ")", ":", "\n", "    ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "# TODO: what about fully-connected layers?", "\n", "if", "classname", ".", "find", "(", "'Conv'", ")", "!=", "-", "1", ":", "\n", "        ", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0.0", ",", "0.05", ")", "\n", "", "elif", "classname", ".", "find", "(", "'BatchNorm'", ")", "!=", "-", "1", ":", "\n", "        ", "m", ".", "weight", ".", "data", ".", "normal_", "(", "1.0", ",", "0.02", ")", "\n", "m", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.data.cifar.CustomCIFAR10.__init__": [[8, 13], ["torchvision.datasets.CIFAR10.__init__", "numpy.array", "range", "len"], "methods", ["home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.loss.ARPLoss.ARPLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "\n", "        ", "super", "(", "CustomCIFAR10", ",", "self", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n", "self", ".", "uq_idxs", "=", "np", ".", "array", "(", "range", "(", "len", "(", "self", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.data.cifar.CustomCIFAR10.__getitem__": [[14, 20], ["torchvision.datasets.CIFAR10.__getitem__"], "methods", ["home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.arpl_models.resnetABN.TwoInputSequential.__getitem__"], ["", "def", "__getitem__", "(", "self", ",", "item", ")", ":", "\n", "\n", "        ", "img", ",", "label", "=", "super", "(", ")", ".", "__getitem__", "(", "item", ")", "\n", "uq_idx", "=", "self", ".", "uq_idxs", "[", "item", "]", "\n", "\n", "return", "img", ",", "label", ",", "uq_idx", "\n", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.data.cifar.CustomCIFAR100.__init__": [[23, 27], ["torchvision.datasets.CIFAR100.__init__", "numpy.array", "range", "len"], "methods", ["home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.loss.ARPLoss.ARPLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "CustomCIFAR100", ",", "self", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n", "self", ".", "uq_idxs", "=", "np", ".", "array", "(", "range", "(", "len", "(", "self", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.data.cifar.CustomCIFAR100.__getitem__": [[28, 33], ["torchvision.datasets.CIFAR100.__getitem__"], "methods", ["home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.arpl_models.resnetABN.TwoInputSequential.__getitem__"], ["", "def", "__getitem__", "(", "self", ",", "item", ")", ":", "\n", "        ", "img", ",", "label", "=", "super", "(", ")", ".", "__getitem__", "(", "item", ")", "\n", "uq_idx", "=", "self", ".", "uq_idxs", "[", "item", "]", "\n", "\n", "return", "img", ",", "label", ",", "uq_idx", "\n", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.data.cifar.subsample_dataset": [[34, 41], ["[].tolist", "numpy.array"], "function", ["None"], ["", "", "def", "subsample_dataset", "(", "dataset", ",", "idxs", ")", ":", "\n", "\n", "    ", "dataset", ".", "data", "=", "dataset", ".", "data", "[", "idxs", "]", "\n", "dataset", ".", "targets", "=", "np", ".", "array", "(", "dataset", ".", "targets", ")", "[", "idxs", "]", ".", "tolist", "(", ")", "\n", "dataset", ".", "uq_idxs", "=", "dataset", ".", "uq_idxs", "[", "idxs", "]", "\n", "\n", "return", "dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.data.cifar.subsample_classes": [[42, 55], ["enumerate", "cifar.subsample_dataset", "enumerate"], "function", ["home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.data.svhn.subsample_dataset"], ["", "def", "subsample_classes", "(", "dataset", ",", "include_classes", "=", "(", "0", ",", "1", ",", "8", ",", "9", ")", ")", ":", "\n", "\n", "    ", "cls_idxs", "=", "[", "x", "for", "x", ",", "t", "in", "enumerate", "(", "dataset", ".", "targets", ")", "if", "t", "in", "include_classes", "]", "\n", "\n", "target_xform_dict", "=", "{", "}", "\n", "for", "i", ",", "k", "in", "enumerate", "(", "include_classes", ")", ":", "\n", "        ", "target_xform_dict", "[", "k", "]", "=", "i", "\n", "\n", "", "dataset", "=", "subsample_dataset", "(", "dataset", ",", "cls_idxs", ")", "\n", "\n", "dataset", ".", "target_transform", "=", "lambda", "x", ":", "target_xform_dict", "[", "x", "]", "\n", "\n", "return", "dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.data.cifar.get_train_val_split": [[56, 81], ["copy.deepcopy", "copy.deepcopy", "numpy.unique", "cifar.subsample_dataset", "cifar.subsample_dataset", "numpy.random.choice", "train_idxs.extend", "val_idxs.extend", "numpy.where", "int", "len"], "function", ["home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.data.svhn.subsample_dataset", "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.data.svhn.subsample_dataset"], ["", "def", "get_train_val_split", "(", "train_dataset", ",", "val_split", "=", "0.2", ")", ":", "\n", "\n", "    ", "val_dataset", "=", "deepcopy", "(", "train_dataset", ")", "\n", "train_dataset", "=", "deepcopy", "(", "train_dataset", ")", "\n", "\n", "train_classes", "=", "np", ".", "unique", "(", "train_dataset", ".", "targets", ")", "\n", "\n", "# Get train/test indices", "\n", "train_idxs", "=", "[", "]", "\n", "val_idxs", "=", "[", "]", "\n", "for", "cls", "in", "train_classes", ":", "\n", "\n", "        ", "cls_idxs", "=", "np", ".", "where", "(", "train_dataset", ".", "targets", "==", "cls", ")", "[", "0", "]", "\n", "\n", "v_", "=", "np", ".", "random", ".", "choice", "(", "cls_idxs", ",", "replace", "=", "False", ",", "size", "=", "(", "(", "int", "(", "val_split", "*", "len", "(", "cls_idxs", ")", ")", ")", ",", ")", ")", "\n", "t_", "=", "[", "x", "for", "x", "in", "cls_idxs", "if", "x", "not", "in", "v_", "]", "\n", "\n", "train_idxs", ".", "extend", "(", "t_", ")", "\n", "val_idxs", ".", "extend", "(", "v_", ")", "\n", "\n", "# Get training/validation datasets based on selected idxs", "\n", "", "train_dataset", "=", "subsample_dataset", "(", "train_dataset", ",", "train_idxs", ")", "\n", "val_dataset", "=", "subsample_dataset", "(", "val_dataset", ",", "val_idxs", ")", "\n", "\n", "return", "train_dataset", ",", "val_dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.data.cifar.get_equal_len_datasets": [[82, 99], ["len", "len", "numpy.random.choice", "cifar.subsample_dataset", "range", "len", "len", "numpy.random.choice", "cifar.subsample_dataset", "len", "len", "range", "len", "len"], "function", ["home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.data.svhn.subsample_dataset", "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.data.svhn.subsample_dataset"], ["", "def", "get_equal_len_datasets", "(", "dataset1", ",", "dataset2", ")", ":", "\n", "\n", "    ", "\"\"\"\n    Make two datasets the same length\n    \"\"\"", "\n", "\n", "if", "len", "(", "dataset1", ")", ">", "len", "(", "dataset2", ")", ":", "\n", "\n", "        ", "rand_idxs", "=", "np", ".", "random", ".", "choice", "(", "range", "(", "len", "(", "dataset1", ")", ")", ",", "size", "=", "(", "len", "(", "dataset2", ",", ")", ")", ")", "\n", "subsample_dataset", "(", "dataset1", ",", "rand_idxs", ")", "\n", "\n", "", "elif", "len", "(", "dataset2", ")", ">", "len", "(", "dataset1", ")", ":", "\n", "\n", "        ", "rand_idxs", "=", "np", ".", "random", ".", "choice", "(", "range", "(", "len", "(", "dataset2", ")", ")", ",", "size", "=", "(", "len", "(", "dataset1", ",", ")", ")", ")", "\n", "subsample_dataset", "(", "dataset2", ",", "rand_idxs", ")", "\n", "\n", "", "return", "dataset1", ",", "dataset2", "\n", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.data.cifar.get_cifar_10_100_datasets": [[100, 136], ["range", "numpy.random.seed", "cifar.CustomCIFAR10", "cifar.subsample_classes", "cifar.get_train_val_split", "cifar.CustomCIFAR10", "cifar.subsample_classes", "cifar.CustomCIFAR100", "cifar.subsample_classes", "cifar.get_equal_len_datasets"], "function", ["home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.data.svhn.subsample_classes", "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.data.svhn.get_train_val_split", "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.data.svhn.subsample_classes", "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.data.svhn.subsample_classes", "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.data.svhn.get_equal_len_datasets"], ["", "def", "get_cifar_10_100_datasets", "(", "train_transform", ",", "test_transform", ",", "train_classes", "=", "(", "0", ",", "1", ",", "8", ",", "9", ")", ",", "\n", "open_set_classes", "=", "range", "(", "10", ")", ",", "balance_open_set_eval", "=", "False", ",", "split_train_val", "=", "True", ",", "seed", "=", "0", ")", ":", "\n", "\n", "    ", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "\n", "# Init train dataset and subsample training classes", "\n", "train_dataset_whole", "=", "CustomCIFAR10", "(", "root", "=", "cifar_10_root", ",", "transform", "=", "train_transform", ",", "train", "=", "True", ")", "\n", "train_dataset_whole", "=", "subsample_classes", "(", "train_dataset_whole", ",", "include_classes", "=", "train_classes", ")", "\n", "\n", "# Split into training and validation sets", "\n", "train_dataset_split", ",", "val_dataset_split", "=", "get_train_val_split", "(", "train_dataset_whole", ")", "\n", "val_dataset_split", ".", "transform", "=", "test_transform", "\n", "\n", "# Get test set for known classes", "\n", "test_dataset_known", "=", "CustomCIFAR10", "(", "root", "=", "cifar_10_root", ",", "transform", "=", "test_transform", ",", "train", "=", "False", ")", "\n", "test_dataset_known", "=", "subsample_classes", "(", "test_dataset_known", ",", "include_classes", "=", "train_classes", ")", "\n", "\n", "# Get testset for unknown classes", "\n", "test_dataset_unknown", "=", "CustomCIFAR100", "(", "root", "=", "cifar_100_root", ",", "transform", "=", "test_transform", ",", "train", "=", "False", ")", "\n", "test_dataset_unknown", "=", "subsample_classes", "(", "test_dataset_unknown", ",", "include_classes", "=", "open_set_classes", ")", "\n", "\n", "if", "balance_open_set_eval", ":", "\n", "        ", "test_dataset_known", ",", "test_dataset_unknown", "=", "get_equal_len_datasets", "(", "test_dataset_known", ",", "test_dataset_unknown", ")", "\n", "\n", "# Either split train into train and val or use test set as val", "\n", "", "train_dataset", "=", "train_dataset_split", "if", "split_train_val", "else", "train_dataset_whole", "\n", "val_dataset", "=", "val_dataset_split", "if", "split_train_val", "else", "test_dataset_known", "\n", "\n", "all_datasets", "=", "{", "\n", "'train'", ":", "train_dataset", ",", "\n", "'val'", ":", "val_dataset", ",", "\n", "'test_known'", ":", "test_dataset_known", ",", "\n", "'test_unknown'", ":", "test_dataset_unknown", ",", "\n", "}", "\n", "\n", "return", "all_datasets", "\n", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.data.cifar.get_cifar_10_10_datasets": [[137, 173], ["range", "range", "numpy.random.seed", "cifar.CustomCIFAR10", "cifar.subsample_classes", "cifar.get_train_val_split", "cifar.CustomCIFAR10", "cifar.subsample_classes", "cifar.CustomCIFAR10", "cifar.subsample_classes", "cifar.get_equal_len_datasets"], "function", ["home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.data.svhn.subsample_classes", "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.data.svhn.get_train_val_split", "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.data.svhn.subsample_classes", "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.data.svhn.subsample_classes", "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.data.svhn.get_equal_len_datasets"], ["", "def", "get_cifar_10_10_datasets", "(", "train_transform", ",", "test_transform", ",", "train_classes", "=", "range", "(", "4", ")", ",", "\n", "open_set_classes", "=", "range", "(", "4", ",", "10", ")", ",", "balance_open_set_eval", "=", "False", ",", "split_train_val", "=", "True", ",", "seed", "=", "0", ")", ":", "\n", "\n", "    ", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "\n", "# Init train dataset and subsample training classes", "\n", "train_dataset_whole", "=", "CustomCIFAR10", "(", "root", "=", "cifar_10_root", ",", "transform", "=", "train_transform", ",", "train", "=", "True", ")", "\n", "train_dataset_whole", "=", "subsample_classes", "(", "train_dataset_whole", ",", "include_classes", "=", "train_classes", ")", "\n", "\n", "# Split into training and validation sets", "\n", "train_dataset_split", ",", "val_dataset_split", "=", "get_train_val_split", "(", "train_dataset_whole", ")", "\n", "val_dataset_split", ".", "transform", "=", "test_transform", "\n", "\n", "# Get test set for known classes", "\n", "test_dataset_known", "=", "CustomCIFAR10", "(", "root", "=", "cifar_10_root", ",", "transform", "=", "test_transform", ",", "train", "=", "False", ")", "\n", "test_dataset_known", "=", "subsample_classes", "(", "test_dataset_known", ",", "include_classes", "=", "train_classes", ")", "\n", "\n", "# Get testset for unknown classes", "\n", "test_dataset_unknown", "=", "CustomCIFAR10", "(", "root", "=", "cifar_10_root", ",", "transform", "=", "test_transform", ",", "train", "=", "False", ")", "\n", "test_dataset_unknown", "=", "subsample_classes", "(", "test_dataset_unknown", ",", "include_classes", "=", "open_set_classes", ")", "\n", "\n", "if", "balance_open_set_eval", ":", "\n", "        ", "test_dataset_known", ",", "test_dataset_unknown", "=", "get_equal_len_datasets", "(", "test_dataset_known", ",", "test_dataset_unknown", ")", "\n", "\n", "# Either split train into train and val or use test set as val", "\n", "", "train_dataset", "=", "train_dataset_split", "if", "split_train_val", "else", "train_dataset_whole", "\n", "val_dataset", "=", "val_dataset_split", "if", "split_train_val", "else", "test_dataset_known", "\n", "\n", "all_datasets", "=", "{", "\n", "'train'", ":", "train_dataset", ",", "\n", "'val'", ":", "val_dataset", ",", "\n", "'test_known'", ":", "test_dataset_known", ",", "\n", "'test_unknown'", ":", "test_dataset_unknown", ",", "\n", "}", "\n", "\n", "return", "all_datasets", "\n", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.data.mnist.CustomMNIST.__init__": [[11, 16], ["torchvision.datasets.MNIST.__init__", "numpy.array", "range", "len"], "methods", ["home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.loss.ARPLoss.ARPLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "\n", "        ", "super", "(", "CustomMNIST", ",", "self", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n", "self", ".", "uq_idxs", "=", "np", ".", "array", "(", "range", "(", "len", "(", "self", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.data.mnist.CustomMNIST.__getitem__": [[17, 28], ["PIL.Image.fromarray", "mnist.CustomMNIST.convert", "int", "mnist.CustomMNIST.numpy", "mnist.CustomMNIST.transform", "mnist.CustomMNIST.target_transform"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "item", ")", ":", "\n", "        ", "img", ",", "label", "=", "self", ".", "data", "[", "item", "]", ",", "int", "(", "self", ".", "targets", "[", "item", "]", ")", "\n", "uq_idx", "=", "self", ".", "uq_idxs", "[", "item", "]", "\n", "# covert 1 channel to 3 channel", "\n", "img", "=", "Image", ".", "fromarray", "(", "img", ".", "numpy", "(", ")", ",", "mode", "=", "'L'", ")", "\n", "img", "=", "img", ".", "convert", "(", "\"RGB\"", ")", "\n", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "", "if", "self", ".", "target_transform", "is", "not", "None", ":", "\n", "            ", "label", "=", "self", ".", "target_transform", "(", "label", ")", "\n", "", "return", "img", ",", "label", ",", "uq_idx", "\n", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.data.mnist.subsample_dataset": [[30, 37], ["[].tolist", "numpy.array"], "function", ["None"], ["", "", "def", "subsample_dataset", "(", "dataset", ",", "idxs", ")", ":", "\n", "\n", "    ", "dataset", ".", "data", "=", "dataset", ".", "data", "[", "idxs", "]", "\n", "dataset", ".", "targets", "=", "np", ".", "array", "(", "dataset", ".", "targets", ")", "[", "idxs", "]", ".", "tolist", "(", ")", "\n", "dataset", ".", "uq_idxs", "=", "dataset", ".", "uq_idxs", "[", "idxs", "]", "\n", "\n", "return", "dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.data.mnist.subsample_classes": [[39, 52], ["enumerate", "mnist.subsample_dataset", "enumerate"], "function", ["home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.data.svhn.subsample_dataset"], ["", "def", "subsample_classes", "(", "dataset", ",", "include_classes", "=", "(", "0", ",", "1", ",", "8", ",", "9", ")", ")", ":", "\n", "\n", "    ", "cls_idxs", "=", "[", "x", "for", "x", ",", "t", "in", "enumerate", "(", "dataset", ".", "targets", ")", "if", "t", "in", "include_classes", "]", "\n", "\n", "target_xform_dict", "=", "{", "}", "\n", "for", "i", ",", "k", "in", "enumerate", "(", "include_classes", ")", ":", "\n", "        ", "target_xform_dict", "[", "k", "]", "=", "i", "\n", "\n", "", "dataset", "=", "subsample_dataset", "(", "dataset", ",", "cls_idxs", ")", "\n", "\n", "dataset", ".", "target_transform", "=", "lambda", "x", ":", "target_xform_dict", "[", "x", "]", "\n", "\n", "return", "dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.data.mnist.get_train_val_split": [[54, 79], ["copy.deepcopy", "copy.deepcopy", "numpy.unique", "mnist.subsample_dataset", "mnist.subsample_dataset", "numpy.random.choice", "train_idxs.extend", "val_idxs.extend", "numpy.where", "int", "len"], "function", ["home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.data.svhn.subsample_dataset", "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.data.svhn.subsample_dataset"], ["", "def", "get_train_val_split", "(", "train_dataset", ",", "val_split", "=", "0.2", ")", ":", "\n", "\n", "    ", "val_dataset", "=", "deepcopy", "(", "train_dataset", ")", "\n", "train_dataset", "=", "deepcopy", "(", "train_dataset", ")", "\n", "\n", "train_classes", "=", "np", ".", "unique", "(", "train_dataset", ".", "targets", ")", "\n", "\n", "# Get train/test indices", "\n", "train_idxs", "=", "[", "]", "\n", "val_idxs", "=", "[", "]", "\n", "for", "cls", "in", "train_classes", ":", "\n", "\n", "        ", "cls_idxs", "=", "np", ".", "where", "(", "train_dataset", ".", "targets", "==", "cls", ")", "[", "0", "]", "\n", "\n", "v_", "=", "np", ".", "random", ".", "choice", "(", "cls_idxs", ",", "replace", "=", "False", ",", "size", "=", "(", "(", "int", "(", "val_split", "*", "len", "(", "cls_idxs", ")", ")", ")", ",", ")", ")", "\n", "t_", "=", "[", "x", "for", "x", "in", "cls_idxs", "if", "x", "not", "in", "v_", "]", "\n", "\n", "train_idxs", ".", "extend", "(", "t_", ")", "\n", "val_idxs", ".", "extend", "(", "v_", ")", "\n", "\n", "# Get training/validation datasets based on selected idxs", "\n", "", "train_dataset", "=", "subsample_dataset", "(", "train_dataset", ",", "train_idxs", ")", "\n", "val_dataset", "=", "subsample_dataset", "(", "val_dataset", ",", "val_idxs", ")", "\n", "\n", "return", "train_dataset", ",", "val_dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.data.mnist.get_equal_len_datasets": [[81, 98], ["len", "len", "numpy.random.choice", "mnist.subsample_dataset", "range", "len", "len", "numpy.random.choice", "mnist.subsample_dataset", "len", "len", "range", "len", "len"], "function", ["home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.data.svhn.subsample_dataset", "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.data.svhn.subsample_dataset"], ["", "def", "get_equal_len_datasets", "(", "dataset1", ",", "dataset2", ")", ":", "\n", "\n", "    ", "\"\"\"\n    Make two datasets the same length\n    \"\"\"", "\n", "\n", "if", "len", "(", "dataset1", ")", ">", "len", "(", "dataset2", ")", ":", "\n", "\n", "        ", "rand_idxs", "=", "np", ".", "random", ".", "choice", "(", "range", "(", "len", "(", "dataset1", ")", ")", ",", "size", "=", "(", "len", "(", "dataset2", ",", ")", ")", ")", "\n", "subsample_dataset", "(", "dataset1", ",", "rand_idxs", ")", "\n", "\n", "", "elif", "len", "(", "dataset2", ")", ">", "len", "(", "dataset1", ")", ":", "\n", "\n", "        ", "rand_idxs", "=", "np", ".", "random", ".", "choice", "(", "range", "(", "len", "(", "dataset2", ")", ")", ",", "size", "=", "(", "len", "(", "dataset1", ",", ")", ")", ")", "\n", "subsample_dataset", "(", "dataset2", ",", "rand_idxs", ")", "\n", "\n", "", "return", "dataset1", ",", "dataset2", "\n", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.data.mnist.get_mnist_datasets": [[100, 136], ["range", "range", "numpy.random.seed", "mnist.CustomMNIST", "mnist.subsample_classes", "mnist.get_train_val_split", "mnist.CustomMNIST", "mnist.subsample_classes", "mnist.CustomMNIST", "mnist.subsample_classes", "mnist.get_equal_len_datasets"], "function", ["home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.data.svhn.subsample_classes", "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.data.svhn.get_train_val_split", "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.data.svhn.subsample_classes", "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.data.svhn.subsample_classes", "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.data.svhn.get_equal_len_datasets"], ["", "def", "get_mnist_datasets", "(", "train_transform", ",", "test_transform", ",", "train_classes", "=", "range", "(", "6", ")", ",", "\n", "open_set_classes", "=", "range", "(", "6", ",", "10", ")", ",", "balance_open_set_eval", "=", "False", ",", "split_train_val", "=", "True", ",", "seed", "=", "0", ")", ":", "\n", "\n", "    ", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "\n", "# Init train dataset and subsample training classes", "\n", "train_dataset_whole", "=", "CustomMNIST", "(", "root", "=", "mnist_root", ",", "transform", "=", "train_transform", ",", "train", "=", "True", ")", "\n", "train_dataset_whole", "=", "subsample_classes", "(", "train_dataset_whole", ",", "include_classes", "=", "train_classes", ")", "\n", "\n", "# Split into training and validation sets", "\n", "train_dataset_split", ",", "val_dataset_split", "=", "get_train_val_split", "(", "train_dataset_whole", ")", "\n", "val_dataset_split", ".", "transform", "=", "test_transform", "\n", "\n", "# Get test set for known classes", "\n", "test_dataset_known", "=", "CustomMNIST", "(", "root", "=", "mnist_root", ",", "transform", "=", "test_transform", ",", "train", "=", "False", ")", "\n", "test_dataset_known", "=", "subsample_classes", "(", "test_dataset_known", ",", "include_classes", "=", "train_classes", ")", "\n", "\n", "# Get testset for unknown classes", "\n", "test_dataset_unknown", "=", "CustomMNIST", "(", "root", "=", "mnist_root", ",", "transform", "=", "test_transform", ",", "train", "=", "False", ")", "\n", "test_dataset_unknown", "=", "subsample_classes", "(", "test_dataset_unknown", ",", "include_classes", "=", "open_set_classes", ")", "\n", "\n", "if", "balance_open_set_eval", ":", "\n", "        ", "test_dataset_known", ",", "test_dataset_unknown", "=", "get_equal_len_datasets", "(", "test_dataset_known", ",", "test_dataset_unknown", ")", "\n", "\n", "# Either split train into train and val or use test set as val", "\n", "", "train_dataset", "=", "train_dataset_split", "if", "split_train_val", "else", "train_dataset_whole", "\n", "val_dataset", "=", "val_dataset_split", "if", "split_train_val", "else", "test_dataset_known", "\n", "\n", "all_datasets", "=", "{", "\n", "'train'", ":", "train_dataset", ",", "\n", "'val'", ":", "val_dataset", ",", "\n", "'test_known'", ":", "test_dataset_known", ",", "\n", "'test_unknown'", ":", "test_dataset_unknown", ",", "\n", "}", "\n", "\n", "return", "all_datasets", "\n", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.data.tinyimagenet.TinyImageNet.__init__": [[39, 44], ["super().__init__", "numpy.array", "range", "len"], "methods", ["home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.loss.ARPLoss.ARPLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "root", ",", "transform", ")", ":", "\n", "\n", "        ", "super", "(", "TinyImageNet", ",", "self", ")", ".", "__init__", "(", "root", ",", "transform", ")", "\n", "\n", "self", ".", "uq_idxs", "=", "np", ".", "array", "(", "range", "(", "len", "(", "self", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.data.tinyimagenet.TinyImageNet.__getitem__": [[45, 51], ["super().__getitem__"], "methods", ["home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.arpl_models.resnetABN.TwoInputSequential.__getitem__"], ["", "def", "__getitem__", "(", "self", ",", "item", ")", ":", "\n", "\n", "        ", "img", ",", "label", "=", "super", "(", ")", ".", "__getitem__", "(", "item", ")", "\n", "uq_idx", "=", "self", ".", "uq_idxs", "[", "item", "]", "\n", "\n", "return", "img", ",", "label", ",", "uq_idx", "\n", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.data.tinyimagenet.create_val_img_folder": [[9, 35], ["os.path.join", "os.path.join", "os.path.join", "open", "open.readlines", "open.close", "val_img_dict.items", "os.path.join", "line.split", "os.path.join", "os.path.exists", "os.path.exists", "os.makedirs", "os.path.join", "os.rename", "os.path.join", "os.path.join"], "function", ["home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.ARPL.arpl_utils.Logger.close"], ["def", "create_val_img_folder", "(", "root", ")", ":", "\n", "    ", "'''\n    This method is responsible for separating validation images into separate sub folders\n    Run this before running TinyImageNet experiments\n\n    :param root: Root dir for TinyImageNet, e.g /work/sagar/datasets/tinyimagenet/tiny-imagenet-200/\n    '''", "\n", "dataset_dir", "=", "os", ".", "path", ".", "join", "(", "root", ")", "\n", "val_dir", "=", "os", ".", "path", ".", "join", "(", "dataset_dir", ",", "'val'", ")", "\n", "img_dir", "=", "os", ".", "path", ".", "join", "(", "val_dir", ",", "'images'", ")", "\n", "\n", "fp", "=", "open", "(", "os", ".", "path", ".", "join", "(", "val_dir", ",", "'val_annotations.txt'", ")", ",", "'r'", ")", "\n", "data", "=", "fp", ".", "readlines", "(", ")", "\n", "val_img_dict", "=", "{", "}", "\n", "for", "line", "in", "data", ":", "\n", "        ", "words", "=", "line", ".", "split", "(", "'\\t'", ")", "\n", "val_img_dict", "[", "words", "[", "0", "]", "]", "=", "words", "[", "1", "]", "\n", "", "fp", ".", "close", "(", ")", "\n", "\n", "# Create folder if not present and move images into proper folders", "\n", "for", "img", ",", "folder", "in", "val_img_dict", ".", "items", "(", ")", ":", "\n", "        ", "newpath", "=", "(", "os", ".", "path", ".", "join", "(", "img_dir", ",", "folder", ")", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "newpath", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "newpath", ")", "\n", "", "if", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "img_dir", ",", "img", ")", ")", ":", "\n", "            ", "os", ".", "rename", "(", "os", ".", "path", ".", "join", "(", "img_dir", ",", "img", ")", ",", "os", ".", "path", ".", "join", "(", "newpath", ",", "img", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.data.tinyimagenet.subsample_dataset": [[53, 61], ["[].tolist", "enumerate", "enumerate", "numpy.array"], "function", ["None"], ["", "", "def", "subsample_dataset", "(", "dataset", ",", "idxs", ")", ":", "\n", "\n", "    ", "dataset", ".", "imgs", "=", "[", "x", "for", "i", ",", "x", "in", "enumerate", "(", "dataset", ".", "imgs", ")", "if", "i", "in", "idxs", "]", "\n", "dataset", ".", "samples", "=", "[", "x", "for", "i", ",", "x", "in", "enumerate", "(", "dataset", ".", "samples", ")", "if", "i", "in", "idxs", "]", "\n", "dataset", ".", "targets", "=", "np", ".", "array", "(", "dataset", ".", "targets", ")", "[", "idxs", "]", ".", "tolist", "(", ")", "\n", "dataset", ".", "uq_idxs", "=", "dataset", ".", "uq_idxs", "[", "idxs", "]", "\n", "\n", "return", "dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.data.tinyimagenet.subsample_classes": [[63, 75], ["range", "enumerate", "tinyimagenet.subsample_dataset", "enumerate"], "function", ["home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.data.svhn.subsample_dataset"], ["", "def", "subsample_classes", "(", "dataset", ",", "include_classes", "=", "range", "(", "20", ")", ")", ":", "\n", "\n", "    ", "cls_idxs", "=", "[", "x", "for", "x", ",", "t", "in", "enumerate", "(", "dataset", ".", "targets", ")", "if", "t", "in", "include_classes", "]", "\n", "\n", "target_xform_dict", "=", "{", "}", "\n", "for", "i", ",", "k", "in", "enumerate", "(", "include_classes", ")", ":", "\n", "        ", "target_xform_dict", "[", "k", "]", "=", "i", "\n", "\n", "", "dataset", "=", "subsample_dataset", "(", "dataset", ",", "cls_idxs", ")", "\n", "dataset", ".", "target_transform", "=", "lambda", "x", ":", "target_xform_dict", "[", "x", "]", "\n", "\n", "return", "dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.data.tinyimagenet.get_train_val_split": [[77, 101], ["copy.deepcopy", "copy.deepcopy", "numpy.unique", "tinyimagenet.subsample_dataset", "tinyimagenet.subsample_dataset", "numpy.random.choice", "train_idxs.extend", "val_idxs.extend", "numpy.where", "int", "len"], "function", ["home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.data.svhn.subsample_dataset", "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.data.svhn.subsample_dataset"], ["", "def", "get_train_val_split", "(", "train_dataset", ",", "val_split", "=", "0.2", ")", ":", "\n", "\n", "    ", "val_dataset", "=", "deepcopy", "(", "train_dataset", ")", "\n", "train_dataset", "=", "deepcopy", "(", "train_dataset", ")", "\n", "\n", "train_classes", "=", "np", ".", "unique", "(", "train_dataset", ".", "targets", ")", "\n", "\n", "# Get train/test indices", "\n", "train_idxs", "=", "[", "]", "\n", "val_idxs", "=", "[", "]", "\n", "for", "cls", "in", "train_classes", ":", "\n", "        ", "cls_idxs", "=", "np", ".", "where", "(", "train_dataset", ".", "targets", "==", "cls", ")", "[", "0", "]", "\n", "\n", "v_", "=", "np", ".", "random", ".", "choice", "(", "cls_idxs", ",", "replace", "=", "False", ",", "size", "=", "(", "(", "int", "(", "val_split", "*", "len", "(", "cls_idxs", ")", ")", ")", ",", ")", ")", "\n", "t_", "=", "[", "x", "for", "x", "in", "cls_idxs", "if", "x", "not", "in", "v_", "]", "\n", "\n", "train_idxs", ".", "extend", "(", "t_", ")", "\n", "val_idxs", ".", "extend", "(", "v_", ")", "\n", "\n", "# Get training/validation datasets based on selected idxs", "\n", "", "train_dataset", "=", "subsample_dataset", "(", "train_dataset", ",", "train_idxs", ")", "\n", "val_dataset", "=", "subsample_dataset", "(", "val_dataset", ",", "val_idxs", ")", "\n", "\n", "return", "train_dataset", ",", "val_dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.data.tinyimagenet.get_equal_len_datasets": [[103, 119], ["len", "len", "numpy.random.choice", "tinyimagenet.subsample_dataset", "range", "len", "len", "numpy.random.choice", "tinyimagenet.subsample_dataset", "len", "len", "range", "len", "len"], "function", ["home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.data.svhn.subsample_dataset", "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.data.svhn.subsample_dataset"], ["", "def", "get_equal_len_datasets", "(", "dataset1", ",", "dataset2", ")", ":", "\n", "    ", "\"\"\"\n    Make two datasets the same length\n    \"\"\"", "\n", "\n", "if", "len", "(", "dataset1", ")", ">", "len", "(", "dataset2", ")", ":", "\n", "\n", "        ", "rand_idxs", "=", "np", ".", "random", ".", "choice", "(", "range", "(", "len", "(", "dataset1", ")", ")", ",", "size", "=", "(", "len", "(", "dataset2", ",", ")", ")", ")", "\n", "subsample_dataset", "(", "dataset1", ",", "rand_idxs", ")", "\n", "\n", "", "elif", "len", "(", "dataset2", ")", ">", "len", "(", "dataset1", ")", ":", "\n", "\n", "        ", "rand_idxs", "=", "np", ".", "random", ".", "choice", "(", "range", "(", "len", "(", "dataset2", ")", ")", ",", "size", "=", "(", "len", "(", "dataset1", ",", ")", ")", ")", "\n", "subsample_dataset", "(", "dataset2", ",", "rand_idxs", ")", "\n", "\n", "", "return", "dataset1", ",", "dataset2", "\n", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.data.tinyimagenet.get_tiny_image_net_datasets": [[121, 157], ["range", "range", "numpy.random.seed", "tinyimagenet.TinyImageNet", "tinyimagenet.subsample_classes", "tinyimagenet.get_train_val_split", "tinyimagenet.TinyImageNet", "tinyimagenet.subsample_classes", "tinyimagenet.TinyImageNet", "tinyimagenet.subsample_classes", "tinyimagenet.get_equal_len_datasets"], "function", ["home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.data.svhn.subsample_classes", "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.data.svhn.get_train_val_split", "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.data.svhn.subsample_classes", "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.data.svhn.subsample_classes", "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.data.svhn.get_equal_len_datasets"], ["", "def", "get_tiny_image_net_datasets", "(", "train_transform", ",", "test_transform", ",", "train_classes", "=", "range", "(", "20", ")", ",", "\n", "open_set_classes", "=", "range", "(", "20", ",", "200", ")", ",", "balance_open_set_eval", "=", "False", ",", "split_train_val", "=", "True", ",", "seed", "=", "0", ")", ":", "\n", "\n", "    ", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "\n", "# Init train dataset and subsample training classes", "\n", "train_dataset_whole", "=", "TinyImageNet", "(", "root", "=", "tin_train_root_dir", ",", "transform", "=", "train_transform", ")", "\n", "train_dataset_whole", "=", "subsample_classes", "(", "train_dataset_whole", ",", "include_classes", "=", "train_classes", ")", "\n", "\n", "# Split into training and validation sets", "\n", "train_dataset_split", ",", "val_dataset_split", "=", "get_train_val_split", "(", "train_dataset_whole", ")", "\n", "val_dataset_split", ".", "transform", "=", "test_transform", "\n", "\n", "# Get test set for known classes", "\n", "test_dataset_known", "=", "TinyImageNet", "(", "root", "=", "tin_val_root_dir", ",", "transform", "=", "test_transform", ")", "\n", "test_dataset_known", "=", "subsample_classes", "(", "test_dataset_known", ",", "include_classes", "=", "train_classes", ")", "\n", "\n", "# Get testset for unknown classes", "\n", "test_dataset_unknown", "=", "TinyImageNet", "(", "root", "=", "tin_val_root_dir", ",", "transform", "=", "test_transform", ")", "\n", "test_dataset_unknown", "=", "subsample_classes", "(", "test_dataset_unknown", ",", "include_classes", "=", "open_set_classes", ")", "\n", "\n", "if", "balance_open_set_eval", ":", "\n", "        ", "test_dataset_known", ",", "test_dataset_unknown", "=", "get_equal_len_datasets", "(", "test_dataset_known", ",", "test_dataset_unknown", ")", "\n", "\n", "# Either split train into train and val or use test set as val", "\n", "", "train_dataset", "=", "train_dataset_split", "if", "split_train_val", "else", "train_dataset_whole", "\n", "val_dataset", "=", "val_dataset_split", "if", "split_train_val", "else", "test_dataset_known", "\n", "\n", "all_datasets", "=", "{", "\n", "'train'", ":", "train_dataset", ",", "\n", "'val'", ":", "val_dataset", ",", "\n", "'test_known'", ":", "test_dataset_known", ",", "\n", "'test_unknown'", ":", "test_dataset_unknown", ",", "\n", "}", "\n", "\n", "return", "all_datasets", "\n", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.data.imagenet.ImageNetBase.__init__": [[17, 22], ["super().__init__", "numpy.array", "range", "len"], "methods", ["home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.loss.ARPLoss.ARPLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "root", ",", "transform", ")", ":", "\n", "\n", "        ", "super", "(", "ImageNetBase", ",", "self", ")", ".", "__init__", "(", "root", ",", "transform", ")", "\n", "\n", "self", ".", "uq_idxs", "=", "np", ".", "array", "(", "range", "(", "len", "(", "self", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.data.imagenet.ImageNetBase.__getitem__": [[23, 29], ["super().__getitem__"], "methods", ["home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.arpl_models.resnetABN.TwoInputSequential.__getitem__"], ["", "def", "__getitem__", "(", "self", ",", "item", ")", ":", "\n", "\n", "        ", "img", ",", "label", "=", "super", "(", ")", ".", "__getitem__", "(", "item", ")", "\n", "uq_idx", "=", "self", ".", "uq_idxs", "[", "item", "]", "\n", "\n", "return", "img", ",", "label", ",", "uq_idx", "\n", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.data.imagenet.pad_to_longest": [[31, 46], ["len", "len", "len", "len", "len", "len", "len", "len"], "function", ["None"], ["", "", "def", "pad_to_longest", "(", "list1", ",", "list2", ")", ":", "\n", "\n", "    ", "if", "len", "(", "list2", ")", ">", "len", "(", "list1", ")", ":", "\n", "\n", "        ", "list1", "=", "[", "None", "]", "*", "(", "len", "(", "list2", ")", "-", "len", "(", "list1", ")", ")", "+", "list1", "\n", "\n", "", "elif", "len", "(", "list1", ")", ">", "len", "(", "list2", ")", ":", "\n", "\n", "        ", "list2", "=", "[", "None", "]", "*", "(", "len", "(", "list1", ")", "-", "len", "(", "list2", ")", ")", "+", "list2", "\n", "\n", "", "else", ":", "\n", "\n", "        ", "pass", "\n", "\n", "", "return", "list1", ",", "list2", "\n", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.data.imagenet.get_imagenet_osr_class_splits": [[48, 68], ["set", "open", "pickle.load", "enumerate"], "function", ["None"], ["", "def", "get_imagenet_osr_class_splits", "(", "imagenet21k_dataset", ",", "osr_split", ",", "\n", "precomputed_split_dir", "=", "osr_split_save_dir", ")", ":", "\n", "\n", "\n", "    ", "split_to_key", "=", "{", "\n", "'Easy'", ":", "'easy_i21k_classes'", ",", "\n", "'Hard'", ":", "'hard_i21k_classes'", "\n", "}", "\n", "\n", "# Load splits", "\n", "with", "open", "(", "precomputed_split_dir", ",", "'rb'", ")", "as", "handle", ":", "\n", "        ", "precomputed_info", "=", "pickle", ".", "load", "(", "handle", ")", "\n", "\n", "", "osr_wnids", "=", "precomputed_info", "[", "split_to_key", "[", "osr_split", "]", "]", "\n", "\n", "osr_wnids", "=", "set", "(", "osr_wnids", ")", "\n", "selected_osr_classes_class_indices", "=", "[", "i", "for", "i", ",", "x", "in", "enumerate", "(", "imagenet21k_dataset", ".", "classes", ")", "if", "x", "in", "osr_wnids", "]", "\n", "\n", "return", "selected_osr_classes_class_indices", "\n", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.data.imagenet.subsample_dataset": [[70, 78], ["[].tolist", "enumerate", "enumerate", "numpy.array"], "function", ["None"], ["", "def", "subsample_dataset", "(", "dataset", ",", "idxs", ")", ":", "\n", "\n", "    ", "dataset", ".", "imgs", "=", "[", "x", "for", "i", ",", "x", "in", "enumerate", "(", "dataset", ".", "imgs", ")", "if", "i", "in", "idxs", "]", "\n", "dataset", ".", "samples", "=", "[", "x", "for", "i", ",", "x", "in", "enumerate", "(", "dataset", ".", "samples", ")", "if", "i", "in", "idxs", "]", "\n", "dataset", ".", "targets", "=", "np", ".", "array", "(", "dataset", ".", "targets", ")", "[", "idxs", "]", ".", "tolist", "(", ")", "\n", "dataset", ".", "uq_idxs", "=", "dataset", ".", "uq_idxs", "[", "idxs", "]", "\n", "\n", "return", "dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.data.imagenet.subsample_classes": [[80, 92], ["list", "enumerate", "imagenet.subsample_dataset", "range", "enumerate"], "function", ["home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.data.svhn.subsample_dataset"], ["", "def", "subsample_classes", "(", "dataset", ",", "include_classes", "=", "list", "(", "range", "(", "1000", ")", ")", ")", ":", "\n", "\n", "    ", "cls_idxs", "=", "[", "x", "for", "x", ",", "t", "in", "enumerate", "(", "dataset", ".", "targets", ")", "if", "t", "in", "include_classes", "]", "\n", "\n", "target_xform_dict", "=", "{", "}", "\n", "for", "i", ",", "k", "in", "enumerate", "(", "include_classes", ")", ":", "\n", "        ", "target_xform_dict", "[", "k", "]", "=", "i", "\n", "\n", "", "dataset", "=", "subsample_dataset", "(", "dataset", ",", "cls_idxs", ")", "\n", "dataset", ".", "target_transform", "=", "lambda", "x", ":", "target_xform_dict", "[", "x", "]", "\n", "\n", "return", "dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.data.imagenet.get_train_val_split": [[94, 118], ["copy.deepcopy", "copy.deepcopy", "numpy.unique", "imagenet.subsample_dataset", "imagenet.subsample_dataset", "numpy.random.choice", "train_idxs.extend", "val_idxs.extend", "numpy.where", "int", "len"], "function", ["home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.data.svhn.subsample_dataset", "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.data.svhn.subsample_dataset"], ["", "def", "get_train_val_split", "(", "train_dataset", ",", "val_split", "=", "0.2", ")", ":", "\n", "\n", "    ", "val_dataset", "=", "deepcopy", "(", "train_dataset", ")", "\n", "train_dataset", "=", "deepcopy", "(", "train_dataset", ")", "\n", "\n", "train_classes", "=", "np", ".", "unique", "(", "train_dataset", ".", "targets", ")", "\n", "\n", "# Get train/test indices", "\n", "train_idxs", "=", "[", "]", "\n", "val_idxs", "=", "[", "]", "\n", "for", "cls", "in", "train_classes", ":", "\n", "        ", "cls_idxs", "=", "np", ".", "where", "(", "train_dataset", ".", "targets", "==", "cls", ")", "[", "0", "]", "\n", "\n", "v_", "=", "np", ".", "random", ".", "choice", "(", "cls_idxs", ",", "replace", "=", "False", ",", "size", "=", "(", "(", "int", "(", "val_split", "*", "len", "(", "cls_idxs", ")", ")", ")", ",", ")", ")", "\n", "t_", "=", "[", "x", "for", "x", "in", "cls_idxs", "if", "x", "not", "in", "v_", "]", "\n", "\n", "train_idxs", ".", "extend", "(", "t_", ")", "\n", "val_idxs", ".", "extend", "(", "v_", ")", "\n", "\n", "# Get training/validation datasets based on selected idxs", "\n", "", "train_dataset", "=", "subsample_dataset", "(", "train_dataset", ",", "train_idxs", ")", "\n", "val_dataset", "=", "subsample_dataset", "(", "val_dataset", ",", "val_idxs", ")", "\n", "\n", "return", "train_dataset", ",", "val_dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.data.imagenet.get_equal_len_datasets": [[120, 136], ["len", "len", "numpy.random.choice", "imagenet.subsample_dataset", "range", "len", "len", "numpy.random.choice", "imagenet.subsample_dataset", "len", "len", "range", "len", "len"], "function", ["home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.data.svhn.subsample_dataset", "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.data.svhn.subsample_dataset"], ["", "def", "get_equal_len_datasets", "(", "dataset1", ",", "dataset2", ")", ":", "\n", "    ", "\"\"\"\n    Make two datasets the same length\n    \"\"\"", "\n", "\n", "if", "len", "(", "dataset1", ")", ">", "len", "(", "dataset2", ")", ":", "\n", "\n", "        ", "rand_idxs", "=", "np", ".", "random", ".", "choice", "(", "range", "(", "len", "(", "dataset1", ")", ")", ",", "size", "=", "(", "len", "(", "dataset2", ",", ")", ")", ")", "\n", "subsample_dataset", "(", "dataset1", ",", "rand_idxs", ")", "\n", "\n", "", "elif", "len", "(", "dataset2", ")", ">", "len", "(", "dataset1", ")", ":", "\n", "\n", "        ", "rand_idxs", "=", "np", ".", "random", ".", "choice", "(", "range", "(", "len", "(", "dataset2", ")", ")", ",", "size", "=", "(", "len", "(", "dataset1", ",", ")", ")", ")", "\n", "subsample_dataset", "(", "dataset2", ",", "rand_idxs", ")", "\n", "\n", "", "return", "dataset1", ",", "dataset2", "\n", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.data.imagenet.get_image_net_datasets": [[138, 174], ["range", "range", "numpy.random.seed", "print", "print", "print", "imagenet.ImageNetBase", "print", "imagenet.ImageNetBase", "print", "imagenet.ImageNetBase", "imagenet.get_imagenet_osr_class_splits", "imagenet.subsample_classes", "imagenet.get_equal_len_datasets", "os.path.join", "os.path.join", "os.path.join"], "function", ["home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.data.imagenet.get_imagenet_osr_class_splits", "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.data.svhn.subsample_classes", "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.data.svhn.get_equal_len_datasets"], ["", "def", "get_image_net_datasets", "(", "train_transform", ",", "test_transform", ",", "train_classes", "=", "range", "(", "1000", ")", ",", "\n", "open_set_classes", "=", "range", "(", "1000", ")", ",", "num_open_set_classes", "=", "1000", ",", "\n", "balance_open_set_eval", "=", "False", ",", "split_train_val", "=", "True", ",", "seed", "=", "0", ",", "\n", "osr_split", "=", "'random'", ")", ":", "\n", "\n", "    ", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "\n", "print", "(", "'No validation split option for ImageNet dataset...'", ")", "\n", "print", "(", "'ImageNet datasets use hardcoded OSR splits...'", ")", "\n", "print", "(", "'Loading ImageNet Train...'", ")", "\n", "# Init train dataset and subsample training classes", "\n", "train_dataset_whole", "=", "ImageNetBase", "(", "root", "=", "os", ".", "path", ".", "join", "(", "imagenet_root", ",", "'train'", ")", ",", "transform", "=", "train_transform", ")", "\n", "\n", "print", "(", "'Loading ImageNet Val...'", ")", "\n", "# Get test set for known classes", "\n", "test_dataset_known", "=", "ImageNetBase", "(", "root", "=", "os", ".", "path", ".", "join", "(", "imagenet_root", ",", "'val'", ")", ",", "transform", "=", "test_transform", ")", "\n", "\n", "print", "(", "'Loading ImageNet21K Val...'", ")", "\n", "# Get testset for unknown classes", "\n", "test_dataset_unknown", "=", "ImageNetBase", "(", "root", "=", "os", ".", "path", ".", "join", "(", "imagenet21k_root", ",", "'val'", ")", ",", "transform", "=", "test_transform", ")", "\n", "\n", "# Select which classes are open set", "\n", "open_set_classes", "=", "get_imagenet_osr_class_splits", "(", "imagenet21k_dataset", "=", "test_dataset_unknown", ",", "osr_split", "=", "osr_split", ")", "\n", "test_dataset_unknown", "=", "subsample_classes", "(", "test_dataset_unknown", ",", "include_classes", "=", "open_set_classes", ")", "\n", "\n", "if", "balance_open_set_eval", ":", "\n", "        ", "test_dataset_known", ",", "test_dataset_unknown", "=", "get_equal_len_datasets", "(", "test_dataset_known", ",", "test_dataset_unknown", ")", "\n", "\n", "", "all_datasets", "=", "{", "\n", "'train'", ":", "train_dataset_whole", ",", "\n", "'val'", ":", "test_dataset_known", ",", "\n", "'test_known'", ":", "test_dataset_known", ",", "\n", "'test_unknown'", ":", "test_dataset_unknown", ",", "\n", "}", "\n", "\n", "return", "all_datasets", "", "", ""]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.data.cub.CustomCub2011.__init__": [[18, 36], ["os.path.expanduser", "numpy.array", "cub.CustomCub2011._download", "cub.CustomCub2011._check_integrity", "RuntimeError", "range", "len"], "methods", ["home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.data.cub.CustomCub2011._download", "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.data.cub.CustomCub2011._check_integrity"], ["def", "__init__", "(", "self", ",", "root", ",", "train", "=", "True", ",", "transform", "=", "None", ",", "target_transform", "=", "None", ",", "loader", "=", "default_loader", ",", "download", "=", "True", ")", ":", "\n", "\n", "        ", "self", ".", "root", "=", "os", ".", "path", ".", "expanduser", "(", "root", ")", "\n", "self", ".", "transform", "=", "transform", "\n", "self", ".", "target_transform", "=", "target_transform", "\n", "\n", "self", ".", "loader", "=", "loader", "\n", "self", ".", "train", "=", "train", "\n", "\n", "\n", "if", "download", ":", "\n", "            ", "self", ".", "_download", "(", ")", "\n", "\n", "", "if", "not", "self", ".", "_check_integrity", "(", ")", ":", "\n", "            ", "raise", "RuntimeError", "(", "'Dataset not found or corrupted.'", "+", "\n", "' You can use download=True to download it'", ")", "\n", "\n", "", "self", ".", "uq_idxs", "=", "np", ".", "array", "(", "range", "(", "len", "(", "self", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.data.cub.CustomCub2011._load_metadata": [[37, 52], ["pandas.read_csv", "pandas.read_csv", "pandas.read_csv", "pandas.read_csv.merge", "pd.read_csv.merge.merge", "os.path.join", "os.path.join", "os.path.join"], "methods", ["None"], ["", "def", "_load_metadata", "(", "self", ")", ":", "\n", "        ", "images", "=", "pd", ".", "read_csv", "(", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "'CUB_200_2011'", ",", "'images.txt'", ")", ",", "sep", "=", "' '", ",", "\n", "names", "=", "[", "'img_id'", ",", "'filepath'", "]", ")", "\n", "image_class_labels", "=", "pd", ".", "read_csv", "(", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "'CUB_200_2011'", ",", "'image_class_labels.txt'", ")", ",", "\n", "sep", "=", "' '", ",", "names", "=", "[", "'img_id'", ",", "'target'", "]", ")", "\n", "train_test_split", "=", "pd", ".", "read_csv", "(", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "'CUB_200_2011'", ",", "'train_test_split.txt'", ")", ",", "\n", "sep", "=", "' '", ",", "names", "=", "[", "'img_id'", ",", "'is_training_img'", "]", ")", "\n", "\n", "data", "=", "images", ".", "merge", "(", "image_class_labels", ",", "on", "=", "'img_id'", ")", "\n", "self", ".", "data", "=", "data", ".", "merge", "(", "train_test_split", ",", "on", "=", "'img_id'", ")", "\n", "\n", "if", "self", ".", "train", ":", "\n", "            ", "self", ".", "data", "=", "self", ".", "data", "[", "self", ".", "data", ".", "is_training_img", "==", "1", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "data", "=", "self", ".", "data", "[", "self", ".", "data", ".", "is_training_img", "==", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.data.cub.CustomCub2011._check_integrity": [[53, 65], ["cub.CustomCub2011.data.iterrows", "cub.CustomCub2011._load_metadata", "os.path.join", "os.path.isfile", "print"], "methods", ["home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.data.cub.CustomCub2011._load_metadata"], ["", "", "def", "_check_integrity", "(", "self", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "self", ".", "_load_metadata", "(", ")", "\n", "", "except", "Exception", ":", "\n", "            ", "return", "False", "\n", "\n", "", "for", "index", ",", "row", "in", "self", ".", "data", ".", "iterrows", "(", ")", ":", "\n", "            ", "filepath", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "self", ".", "base_folder", ",", "row", ".", "filepath", ")", "\n", "if", "not", "os", ".", "path", ".", "isfile", "(", "filepath", ")", ":", "\n", "                ", "print", "(", "filepath", ")", "\n", "return", "False", "\n", "", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.data.cub.CustomCub2011._download": [[66, 77], ["cub.CustomCub2011._check_integrity", "torchvision.datasets.utils.download_url", "print", "tarfile.open", "tar.extractall", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.data.cub.CustomCub2011._check_integrity"], ["", "def", "_download", "(", "self", ")", ":", "\n", "        ", "import", "tarfile", "\n", "\n", "if", "self", ".", "_check_integrity", "(", ")", ":", "\n", "            ", "print", "(", "'Files already downloaded and verified'", ")", "\n", "return", "\n", "\n", "", "download_url", "(", "self", ".", "url", ",", "self", ".", "root", ",", "self", ".", "filename", ",", "self", ".", "tgz_md5", ")", "\n", "\n", "with", "tarfile", ".", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "self", ".", "filename", ")", ",", "\"r:gz\"", ")", "as", "tar", ":", "\n", "            ", "tar", ".", "extractall", "(", "path", "=", "self", ".", "root", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.data.cub.CustomCub2011.__len__": [[78, 80], ["len"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.data.cub.CustomCub2011.__getitem__": [[81, 94], ["os.path.join", "cub.CustomCub2011.loader", "cub.CustomCub2011.transform", "cub.CustomCub2011.target_transform"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "sample", "=", "self", ".", "data", ".", "iloc", "[", "idx", "]", "\n", "path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "self", ".", "base_folder", ",", "sample", ".", "filepath", ")", "\n", "target", "=", "sample", ".", "target", "-", "1", "# Targets start at 1 by default, so shift to 0", "\n", "img", "=", "self", ".", "loader", "(", "path", ")", "\n", "\n", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "\n", "", "if", "self", ".", "target_transform", "is", "not", "None", ":", "\n", "            ", "target", "=", "self", ".", "target_transform", "(", "target", ")", "\n", "\n", "", "return", "img", ",", "target", ",", "self", ".", "uq_idxs", "[", "idx", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.data.cub.subsample_dataset": [[96, 105], ["numpy.zeros().astype", "numpy.zeros", "len"], "function", ["None"], ["", "", "def", "subsample_dataset", "(", "dataset", ",", "idxs", ")", ":", "\n", "\n", "    ", "mask", "=", "np", ".", "zeros", "(", "len", "(", "dataset", ")", ")", ".", "astype", "(", "'bool'", ")", "\n", "mask", "[", "idxs", "]", "=", "True", "\n", "\n", "dataset", ".", "data", "=", "dataset", ".", "data", "[", "mask", "]", "\n", "dataset", ".", "uq_idxs", "=", "dataset", ".", "uq_idxs", "[", "idxs", "]", "\n", "\n", "return", "dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.data.cub.subsample_classes": [[107, 121], ["range", "enumerate", "cub.subsample_dataset", "numpy.array", "enumerate", "subsample_dataset.data.iterrows", "int"], "function", ["home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.data.svhn.subsample_dataset"], ["", "def", "subsample_classes", "(", "dataset", ",", "include_classes", "=", "range", "(", "160", ")", ")", ":", "\n", "\n", "    ", "include_classes_cub", "=", "np", ".", "array", "(", "include_classes", ")", "+", "1", "# CUB classes are indexed 1 --> 200 instead of 0 --> 199", "\n", "cls_idxs", "=", "[", "x", "for", "x", ",", "(", "_", ",", "r", ")", "in", "enumerate", "(", "dataset", ".", "data", ".", "iterrows", "(", ")", ")", "if", "int", "(", "r", "[", "'target'", "]", ")", "in", "include_classes_cub", "]", "\n", "\n", "target_xform_dict", "=", "{", "}", "\n", "for", "i", ",", "k", "in", "enumerate", "(", "include_classes", ")", ":", "\n", "        ", "target_xform_dict", "[", "k", "]", "=", "i", "\n", "\n", "", "dataset", "=", "subsample_dataset", "(", "dataset", ",", "cls_idxs", ")", "\n", "\n", "dataset", ".", "target_transform", "=", "lambda", "x", ":", "target_xform_dict", "[", "x", "]", "\n", "\n", "return", "dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.data.cub.get_train_val_split": [[123, 148], ["copy.deepcopy", "copy.deepcopy", "numpy.unique", "cub.subsample_dataset", "cub.subsample_dataset", "numpy.random.choice", "train_idxs.extend", "val_idxs.extend", "numpy.where", "int", "len"], "function", ["home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.data.svhn.subsample_dataset", "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.data.svhn.subsample_dataset"], ["", "def", "get_train_val_split", "(", "train_dataset", ",", "val_split", "=", "0.2", ")", ":", "\n", "\n", "    ", "val_dataset", "=", "deepcopy", "(", "train_dataset", ")", "\n", "train_dataset", "=", "deepcopy", "(", "train_dataset", ")", "\n", "\n", "train_classes", "=", "np", ".", "unique", "(", "train_dataset", ".", "data", "[", "'target'", "]", ")", "\n", "\n", "# Get train/test indices", "\n", "train_idxs", "=", "[", "]", "\n", "val_idxs", "=", "[", "]", "\n", "for", "cls", "in", "train_classes", ":", "\n", "\n", "        ", "cls_idxs", "=", "np", ".", "where", "(", "train_dataset", ".", "data", "[", "'target'", "]", "==", "cls", ")", "[", "0", "]", "\n", "\n", "v_", "=", "np", ".", "random", ".", "choice", "(", "cls_idxs", ",", "replace", "=", "False", ",", "size", "=", "(", "(", "int", "(", "val_split", "*", "len", "(", "cls_idxs", ")", ")", ")", ",", ")", ")", "\n", "t_", "=", "[", "x", "for", "x", "in", "cls_idxs", "if", "x", "not", "in", "v_", "]", "\n", "\n", "train_idxs", ".", "extend", "(", "t_", ")", "\n", "val_idxs", ".", "extend", "(", "v_", ")", "\n", "\n", "# Get training/validation datasets based on selected idxs", "\n", "", "train_dataset", "=", "subsample_dataset", "(", "train_dataset", ",", "train_idxs", ")", "\n", "val_dataset", "=", "subsample_dataset", "(", "val_dataset", ",", "val_idxs", ")", "\n", "\n", "return", "train_dataset", ",", "val_dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.data.cub.get_equal_len_datasets": [[150, 167], ["len", "len", "numpy.random.choice", "cub.subsample_dataset", "range", "len", "len", "numpy.random.choice", "cub.subsample_dataset", "len", "len", "range", "len", "len"], "function", ["home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.data.svhn.subsample_dataset", "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.data.svhn.subsample_dataset"], ["", "def", "get_equal_len_datasets", "(", "dataset1", ",", "dataset2", ")", ":", "\n", "\n", "    ", "\"\"\"\n    Make two datasets the same length\n    \"\"\"", "\n", "\n", "if", "len", "(", "dataset1", ")", ">", "len", "(", "dataset2", ")", ":", "\n", "\n", "        ", "rand_idxs", "=", "np", ".", "random", ".", "choice", "(", "range", "(", "len", "(", "dataset1", ")", ")", ",", "size", "=", "(", "len", "(", "dataset2", ",", ")", ")", ",", "replace", "=", "False", ")", "\n", "subsample_dataset", "(", "dataset1", ",", "rand_idxs", ")", "\n", "\n", "", "elif", "len", "(", "dataset2", ")", ">", "len", "(", "dataset1", ")", ":", "\n", "\n", "        ", "rand_idxs", "=", "np", ".", "random", ".", "choice", "(", "range", "(", "len", "(", "dataset2", ")", ")", ",", "size", "=", "(", "len", "(", "dataset1", ",", ")", ")", ",", "replace", "=", "False", ")", "\n", "subsample_dataset", "(", "dataset2", ",", "rand_idxs", ")", "\n", "\n", "", "return", "dataset1", ",", "dataset2", "\n", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.data.cub.get_cub_datasets": [[169, 205], ["range", "range", "numpy.random.seed", "cub.CustomCub2011", "cub.subsample_classes", "cub.get_train_val_split", "cub.CustomCub2011", "cub.subsample_classes", "cub.CustomCub2011", "cub.subsample_classes", "cub.get_equal_len_datasets"], "function", ["home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.data.svhn.subsample_classes", "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.data.svhn.get_train_val_split", "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.data.svhn.subsample_classes", "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.data.svhn.subsample_classes", "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.data.svhn.get_equal_len_datasets"], ["", "def", "get_cub_datasets", "(", "train_transform", ",", "test_transform", ",", "train_classes", "=", "range", "(", "160", ")", ",", "\n", "open_set_classes", "=", "range", "(", "160", ",", "200", ")", ",", "balance_open_set_eval", "=", "False", ",", "split_train_val", "=", "True", ",", "seed", "=", "0", ")", ":", "\n", "\n", "    ", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "\n", "# Init train dataset and subsample training classes", "\n", "train_dataset_whole", "=", "CustomCub2011", "(", "root", "=", "cub_root", ",", "transform", "=", "train_transform", ",", "train", "=", "True", ")", "\n", "train_dataset_whole", "=", "subsample_classes", "(", "train_dataset_whole", ",", "include_classes", "=", "train_classes", ")", "\n", "\n", "# Split into training and validation sets", "\n", "train_dataset_split", ",", "val_dataset_split", "=", "get_train_val_split", "(", "train_dataset_whole", ")", "\n", "val_dataset_split", ".", "transform", "=", "test_transform", "\n", "\n", "# Get test set for known classes", "\n", "test_dataset_known", "=", "CustomCub2011", "(", "root", "=", "cub_root", ",", "transform", "=", "test_transform", ",", "train", "=", "False", ")", "\n", "test_dataset_known", "=", "subsample_classes", "(", "test_dataset_known", ",", "include_classes", "=", "train_classes", ")", "\n", "\n", "# Get testset for unknown classes", "\n", "test_dataset_unknown", "=", "CustomCub2011", "(", "root", "=", "cub_root", ",", "transform", "=", "test_transform", ",", "train", "=", "False", ")", "\n", "test_dataset_unknown", "=", "subsample_classes", "(", "test_dataset_unknown", ",", "include_classes", "=", "open_set_classes", ")", "\n", "\n", "if", "balance_open_set_eval", ":", "\n", "        ", "test_dataset_known", ",", "test_dataset_unknown", "=", "get_equal_len_datasets", "(", "test_dataset_known", ",", "test_dataset_unknown", ")", "\n", "\n", "# Either split train into train and val or use test set as val", "\n", "", "train_dataset", "=", "train_dataset_split", "if", "split_train_val", "else", "train_dataset_whole", "\n", "val_dataset", "=", "val_dataset_split", "if", "split_train_val", "else", "test_dataset_known", "\n", "\n", "all_datasets", "=", "{", "\n", "'train'", ":", "train_dataset", ",", "\n", "'val'", ":", "val_dataset", ",", "\n", "'test_known'", ":", "test_dataset_known", ",", "\n", "'test_unknown'", ":", "test_dataset_unknown", ",", "\n", "}", "\n", "\n", "return", "all_datasets", "\n", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.data.open_set_datasets.get_datasets": [[39, 66], ["range", "print", "isinstance", "data.augmentations.get_transform", "get_dataset_funcs.keys"], "function", ["home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.augmentations.__init__.get_transform"], ["def", "get_datasets", "(", "name", ",", "transform", "=", "'default'", ",", "image_size", "=", "224", ",", "train_classes", "=", "(", "0", ",", "1", ",", "8", ",", "9", ")", ",", "\n", "open_set_classes", "=", "range", "(", "10", ")", ",", "balance_open_set_eval", "=", "False", ",", "split_train_val", "=", "True", ",", "seed", "=", "0", ",", "args", "=", "None", ")", ":", "\n", "\n", "    ", "\"\"\"\n    :param name: Dataset name\n    :param transform: Either tuple of train/test transforms or string of transform type\n    :return:\n    \"\"\"", "\n", "\n", "print", "(", "'Loading datasets...'", ")", "\n", "\n", "if", "isinstance", "(", "transform", ",", "tuple", ")", ":", "\n", "        ", "train_transform", ",", "test_transform", "=", "transform", "\n", "", "else", ":", "\n", "        ", "train_transform", ",", "test_transform", "=", "get_transform", "(", "transform_type", "=", "transform", ",", "image_size", "=", "image_size", ",", "args", "=", "args", ")", "\n", "\n", "", "if", "name", "in", "get_dataset_funcs", ".", "keys", "(", ")", ":", "\n", "        ", "datasets", "=", "get_dataset_funcs", "[", "name", "]", "(", "train_transform", ",", "test_transform", ",", "\n", "train_classes", "=", "train_classes", ",", "\n", "open_set_classes", "=", "open_set_classes", ",", "\n", "balance_open_set_eval", "=", "balance_open_set_eval", ",", "\n", "split_train_val", "=", "split_train_val", ",", "\n", "seed", "=", "seed", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n", "", "return", "datasets", "\n", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.data.open_set_datasets.get_class_splits": [[67, 113], ["range", "os.path.join", "range", "open", "pickle.load", "os.path.join", "open", "pickle.load", "print", "list", "list", "range", "range"], "function", ["None"], ["", "def", "get_class_splits", "(", "dataset", ",", "split_idx", "=", "0", ",", "cifar_plus_n", "=", "10", ")", ":", "\n", "\n", "    ", "if", "dataset", "in", "(", "'cifar-10-10'", ",", "'mnist'", ",", "'svhn'", ")", ":", "\n", "        ", "train_classes", "=", "osr_splits", "[", "dataset", "]", "[", "split_idx", "]", "\n", "open_set_classes", "=", "[", "x", "for", "x", "in", "range", "(", "10", ")", "if", "x", "not", "in", "train_classes", "]", "\n", "\n", "", "elif", "dataset", "==", "'cifar-10-100'", ":", "\n", "        ", "train_classes", "=", "osr_splits", "[", "dataset", "]", "[", "split_idx", "]", "\n", "open_set_classes", "=", "osr_splits", "[", "'cifar-10-100-{}'", ".", "format", "(", "cifar_plus_n", ")", "]", "[", "split_idx", "]", "\n", "\n", "", "elif", "dataset", "==", "'tinyimagenet'", ":", "\n", "        ", "train_classes", "=", "osr_splits", "[", "dataset", "]", "[", "split_idx", "]", "\n", "open_set_classes", "=", "[", "x", "for", "x", "in", "range", "(", "200", ")", "if", "x", "not", "in", "train_classes", "]", "\n", "\n", "", "elif", "dataset", "==", "'cub'", ":", "\n", "\n", "        ", "osr_path", "=", "os", ".", "path", ".", "join", "(", "osr_split_dir", ",", "'cub_osr_splits.pkl'", ")", "\n", "with", "open", "(", "osr_path", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "class_info", "=", "pickle", ".", "load", "(", "f", ")", "\n", "\n", "", "train_classes", "=", "class_info", "[", "'known_classes'", "]", "\n", "\n", "open_set_classes", "=", "class_info", "[", "'unknown_classes'", "]", "\n", "open_set_classes", "=", "open_set_classes", "[", "'Hard'", "]", "+", "open_set_classes", "[", "'Medium'", "]", "+", "open_set_classes", "[", "'Easy'", "]", "\n", "\n", "", "elif", "dataset", "==", "'aircraft'", ":", "\n", "\n", "        ", "osr_path", "=", "os", ".", "path", ".", "join", "(", "osr_split_dir", ",", "'aircraft_osr_splits.pkl'", ")", "\n", "with", "open", "(", "osr_path", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "class_info", "=", "pickle", ".", "load", "(", "f", ")", "\n", "\n", "", "train_classes", "=", "class_info", "[", "'known_classes'", "]", "\n", "\n", "open_set_classes", "=", "class_info", "[", "'unknown_classes'", "]", "\n", "open_set_classes", "=", "open_set_classes", "[", "'Hard'", "]", "+", "open_set_classes", "[", "'Medium'", "]", "+", "open_set_classes", "[", "'Easy'", "]", "\n", "\n", "", "elif", "dataset", "==", "'pku-aircraft'", ":", "\n", "        ", "print", "(", "'Warning: PKU-Aircraft dataset has only one open-set split'", ")", "\n", "train_classes", "=", "list", "(", "range", "(", "180", ")", ")", "\n", "open_set_classes", "=", "list", "(", "range", "(", "120", ")", ")", "\n", "\n", "", "else", ":", "\n", "\n", "        ", "raise", "NotImplementedError", "\n", "\n", "", "return", "train_classes", ",", "open_set_classes", "\n", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.data.open_set_datasets.blockPrint": [[115, 117], ["open"], "function", ["None"], ["", "def", "blockPrint", "(", ")", ":", "\n", "    ", "sys", ".", "stdout", "=", "open", "(", "os", ".", "devnull", ",", "'w'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.data.open_set_datasets.enablePrint": [[119, 121], ["None"], "function", ["None"], ["", "def", "enablePrint", "(", ")", ":", "\n", "    ", "sys", ".", "stdout", "=", "sys", ".", "__stdout__", "", "", ""]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.data.pku_aircraft.PKUAircraft.__init__": [[12, 16], ["torchvision.datasets.ImageFolder.__init__", "numpy.arange", "len"], "methods", ["home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.loss.ARPLoss.ARPLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "\n", "        ", "super", "(", "PKUAircraft", ",", "self", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "self", ".", "uq_idxs", "=", "np", ".", "arange", "(", "len", "(", "self", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.data.pku_aircraft.PKUAircraft.__getitem__": [[17, 23], ["torchvision.datasets.ImageFolder.__getitem__"], "methods", ["home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.arpl_models.resnetABN.TwoInputSequential.__getitem__"], ["", "def", "__getitem__", "(", "self", ",", "item", ")", ":", "\n", "\n", "        ", "img", ",", "label", "=", "super", "(", "PKUAircraft", ",", "self", ")", ".", "__getitem__", "(", "item", ")", "\n", "uq_idx", "=", "self", ".", "uq_idxs", "[", "item", "]", "\n", "\n", "return", "img", ",", "label", ",", "uq_idx", "\n", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.data.pku_aircraft.subsample_dataset": [[25, 33], ["[].tolist", "enumerate", "enumerate", "numpy.array"], "function", ["None"], ["", "", "def", "subsample_dataset", "(", "dataset", ",", "idxs", ")", ":", "\n", "\n", "    ", "dataset", ".", "imgs", "=", "[", "x", "for", "i", ",", "x", "in", "enumerate", "(", "dataset", ".", "imgs", ")", "if", "i", "in", "idxs", "]", "\n", "dataset", ".", "samples", "=", "[", "x", "for", "i", ",", "x", "in", "enumerate", "(", "dataset", ".", "samples", ")", "if", "i", "in", "idxs", "]", "\n", "dataset", ".", "targets", "=", "np", ".", "array", "(", "dataset", ".", "targets", ")", "[", "idxs", "]", ".", "tolist", "(", ")", "\n", "dataset", ".", "uq_idxs", "=", "dataset", ".", "uq_idxs", "[", "idxs", "]", "\n", "\n", "return", "dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.data.pku_aircraft.get_train_val_split": [[35, 59], ["copy.deepcopy", "copy.deepcopy", "numpy.unique", "pku_aircraft.subsample_dataset", "pku_aircraft.subsample_dataset", "numpy.random.choice", "train_idxs.extend", "val_idxs.extend", "numpy.where", "int", "len"], "function", ["home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.data.svhn.subsample_dataset", "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.data.svhn.subsample_dataset"], ["", "def", "get_train_val_split", "(", "train_dataset", ",", "val_split", "=", "0.2", ")", ":", "\n", "\n", "    ", "val_dataset", "=", "deepcopy", "(", "train_dataset", ")", "\n", "train_dataset", "=", "deepcopy", "(", "train_dataset", ")", "\n", "\n", "train_classes", "=", "np", ".", "unique", "(", "train_dataset", ".", "targets", ")", "\n", "\n", "# Get train/test indices", "\n", "train_idxs", "=", "[", "]", "\n", "val_idxs", "=", "[", "]", "\n", "for", "cls", "in", "train_classes", ":", "\n", "        ", "cls_idxs", "=", "np", ".", "where", "(", "train_dataset", ".", "targets", "==", "cls", ")", "[", "0", "]", "\n", "\n", "v_", "=", "np", ".", "random", ".", "choice", "(", "cls_idxs", ",", "replace", "=", "False", ",", "size", "=", "(", "(", "int", "(", "val_split", "*", "len", "(", "cls_idxs", ")", ")", ")", ",", ")", ")", "\n", "t_", "=", "[", "x", "for", "x", "in", "cls_idxs", "if", "x", "not", "in", "v_", "]", "\n", "\n", "train_idxs", ".", "extend", "(", "t_", ")", "\n", "val_idxs", ".", "extend", "(", "v_", ")", "\n", "\n", "# Get training/validation datasets based on selected idxs", "\n", "", "train_dataset", "=", "subsample_dataset", "(", "train_dataset", ",", "train_idxs", ")", "\n", "val_dataset", "=", "subsample_dataset", "(", "val_dataset", ",", "val_idxs", ")", "\n", "\n", "return", "train_dataset", ",", "val_dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.data.pku_aircraft.get_equal_len_datasets": [[61, 77], ["len", "len", "numpy.random.choice", "pku_aircraft.subsample_dataset", "range", "len", "len", "numpy.random.choice", "pku_aircraft.subsample_dataset", "len", "len", "range", "len", "len"], "function", ["home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.data.svhn.subsample_dataset", "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.data.svhn.subsample_dataset"], ["", "def", "get_equal_len_datasets", "(", "dataset1", ",", "dataset2", ")", ":", "\n", "    ", "\"\"\"\n    Make two datasets the same length\n    \"\"\"", "\n", "\n", "if", "len", "(", "dataset1", ")", ">", "len", "(", "dataset2", ")", ":", "\n", "\n", "        ", "rand_idxs", "=", "np", ".", "random", ".", "choice", "(", "range", "(", "len", "(", "dataset1", ")", ")", ",", "size", "=", "(", "len", "(", "dataset2", ",", ")", ")", ")", "\n", "subsample_dataset", "(", "dataset1", ",", "rand_idxs", ")", "\n", "\n", "", "elif", "len", "(", "dataset2", ")", ">", "len", "(", "dataset1", ")", ":", "\n", "\n", "        ", "rand_idxs", "=", "np", ".", "random", ".", "choice", "(", "range", "(", "len", "(", "dataset2", ")", ")", ",", "size", "=", "(", "len", "(", "dataset1", ",", ")", ")", ")", "\n", "subsample_dataset", "(", "dataset2", ",", "rand_idxs", ")", "\n", "\n", "", "return", "dataset1", ",", "dataset2", "\n", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.data.pku_aircraft.get_pku_aircraft_datasets": [[79, 124], ["numpy.random.seed", "os.path.join", "os.path.join", "os.path.join", "pku_aircraft.PKUAircraft", "pku_aircraft.PKUAircraft", "pku_aircraft.PKUAircraft", "pku_aircraft.get_train_val_split", "pku_aircraft.get_equal_len_datasets"], "function", ["home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.data.svhn.get_train_val_split", "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.data.svhn.get_equal_len_datasets"], ["", "def", "get_pku_aircraft_datasets", "(", "train_transform", ",", "test_transform", ",", "train_classes", "=", "None", ",", "\n", "open_set_classes", "=", "None", ",", "balance_open_set_eval", "=", "False", ",", "split_train_val", "=", "True", ",", "seed", "=", "0", ")", ":", "\n", "\n", "# This dataset has only one 'known/unknown class' split", "\n", "\n", "    ", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "\n", "train_path", "=", "os", ".", "path", ".", "join", "(", "pku_air_root", ",", "'train'", ")", "\n", "test_path", "=", "os", ".", "path", ".", "join", "(", "pku_air_root", ",", "'test'", ")", "\n", "out_path", "=", "os", ".", "path", ".", "join", "(", "pku_air_root", ",", "'out'", ")", "\n", "\n", "# Init train dataset and subsample training classes", "\n", "train_dataset_whole", "=", "PKUAircraft", "(", "root", "=", "train_path", ",", "transform", "=", "train_transform", ")", "\n", "\n", "# Split into training and validation sets", "\n", "if", "split_train_val", ":", "\n", "        ", "train_dataset_split", ",", "val_dataset_split", "=", "get_train_val_split", "(", "train_dataset_whole", ")", "\n", "val_dataset_split", ".", "transform", "=", "test_transform", "\n", "", "else", ":", "\n", "        ", "train_dataset_split", "=", "train_dataset_whole", "\n", "val_dataset_split", "=", "None", "\n", "\n", "# Get test set for known classes", "\n", "", "test_dataset_known", "=", "PKUAircraft", "(", "root", "=", "test_path", ",", "transform", "=", "test_transform", ")", "\n", "\n", "# Get testset for unknown classes", "\n", "test_dataset_unknown", "=", "PKUAircraft", "(", "root", "=", "out_path", ",", "transform", "=", "test_transform", ")", "\n", "\n", "if", "balance_open_set_eval", ":", "\n", "        ", "test_dataset_known", ",", "test_dataset_unknown", "=", "get_equal_len_datasets", "(", "test_dataset_known", ",", "test_dataset_unknown", ")", "\n", "\n", "# Either split train into train and val or use test set as val", "\n", "", "train_dataset", "=", "train_dataset_split", "if", "split_train_val", "else", "train_dataset_whole", "\n", "val_dataset", "=", "val_dataset_split", "if", "split_train_val", "else", "test_dataset_known", "\n", "\n", "all_datasets", "=", "{", "\n", "\n", "'train'", ":", "train_dataset", ",", "\n", "'val'", ":", "val_dataset", ",", "\n", "'test_known'", ":", "test_dataset_known", ",", "\n", "'test_unknown'", ":", "test_dataset_unknown", ",", "\n", "\n", "}", "\n", "\n", "return", "all_datasets", "\n", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.data.fgvc_aircraft.FGVCAircraft.__init__": [[62, 94], ["os.path.expanduser", "os.path.join", "fgvc_aircraft.find_classes", "fgvc_aircraft.make_dataset", "numpy.array", "ValueError", "ValueError", "fgvc_aircraft.FGVCAircraft.download", "range", "len"], "methods", ["home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.data.fgvc_aircraft.find_classes", "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.data.fgvc_aircraft.make_dataset", "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.data.fgvc_aircraft.FGVCAircraft.download"], ["def", "__init__", "(", "self", ",", "root", ",", "class_type", "=", "'variant'", ",", "split", "=", "'train'", ",", "transform", "=", "None", ",", "\n", "target_transform", "=", "None", ",", "loader", "=", "default_loader", ",", "download", "=", "False", ")", ":", "\n", "        ", "if", "split", "not", "in", "self", ".", "splits", ":", "\n", "            ", "raise", "ValueError", "(", "'Split \"{}\" not found. Valid splits are: {}'", ".", "format", "(", "\n", "split", ",", "', '", ".", "join", "(", "self", ".", "splits", ")", ",", "\n", ")", ")", "\n", "", "if", "class_type", "not", "in", "self", ".", "class_types", ":", "\n", "            ", "raise", "ValueError", "(", "'Class type \"{}\" not found. Valid class types are: {}'", ".", "format", "(", "\n", "class_type", ",", "', '", ".", "join", "(", "self", ".", "class_types", ")", ",", "\n", ")", ")", "\n", "", "self", ".", "root", "=", "os", ".", "path", ".", "expanduser", "(", "root", ")", "\n", "self", ".", "class_type", "=", "class_type", "\n", "self", ".", "split", "=", "split", "\n", "self", ".", "classes_file", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "'data'", ",", "\n", "'images_%s_%s.txt'", "%", "(", "self", ".", "class_type", ",", "self", ".", "split", ")", ")", "\n", "\n", "if", "download", ":", "\n", "            ", "self", ".", "download", "(", ")", "\n", "\n", "", "(", "image_ids", ",", "targets", ",", "classes", ",", "class_to_idx", ")", "=", "find_classes", "(", "self", ".", "classes_file", ")", "\n", "samples", "=", "make_dataset", "(", "self", ".", "root", ",", "image_ids", ",", "targets", ")", "\n", "\n", "self", ".", "transform", "=", "transform", "\n", "self", ".", "target_transform", "=", "target_transform", "\n", "self", ".", "loader", "=", "loader", "\n", "\n", "self", ".", "samples", "=", "samples", "\n", "self", ".", "classes", "=", "classes", "\n", "self", ".", "class_to_idx", "=", "class_to_idx", "\n", "self", ".", "train", "=", "True", "if", "split", "==", "'train'", "else", "False", "\n", "\n", "self", ".", "uq_idxs", "=", "np", ".", "array", "(", "range", "(", "len", "(", "self", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.data.fgvc_aircraft.FGVCAircraft.__getitem__": [[95, 112], ["fgvc_aircraft.FGVCAircraft.loader", "fgvc_aircraft.FGVCAircraft.transform", "fgvc_aircraft.FGVCAircraft.target_transform"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            index (int): Index\n\n        Returns:\n            tuple: (sample, target) where target is class_index of the target class.\n        \"\"\"", "\n", "\n", "path", ",", "target", "=", "self", ".", "samples", "[", "index", "]", "\n", "sample", "=", "self", ".", "loader", "(", "path", ")", "\n", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "sample", "=", "self", ".", "transform", "(", "sample", ")", "\n", "", "if", "self", ".", "target_transform", "is", "not", "None", ":", "\n", "            ", "target", "=", "self", ".", "target_transform", "(", "target", ")", "\n", "\n", "", "return", "sample", ",", "target", ",", "self", ".", "uq_idxs", "[", "index", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.data.fgvc_aircraft.FGVCAircraft.__len__": [[113, 115], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "samples", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.data.fgvc_aircraft.FGVCAircraft.__repr__": [[116, 125], ["fgvc_aircraft.FGVCAircraft.__len__", "fgvc_aircraft.FGVCAircraft.transform.__repr__().replace", "fgvc_aircraft.FGVCAircraft.target_transform.__repr__().replace", "fgvc_aircraft.FGVCAircraft.transform.__repr__", "fgvc_aircraft.FGVCAircraft.target_transform.__repr__", "len", "len"], "methods", ["home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.arpl_models.resnetABN.TwoInputSequential.__len__", "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.data.fgvc_aircraft.FGVCAircraft.__repr__", "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.data.fgvc_aircraft.FGVCAircraft.__repr__"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "fmt_str", "=", "'Dataset '", "+", "self", ".", "__class__", ".", "__name__", "+", "'\\n'", "\n", "fmt_str", "+=", "'    Number of datapoints: {}\\n'", ".", "format", "(", "self", ".", "__len__", "(", ")", ")", "\n", "fmt_str", "+=", "'    Root Location: {}\\n'", ".", "format", "(", "self", ".", "root", ")", "\n", "tmp", "=", "'    Transforms (if any): '", "\n", "fmt_str", "+=", "'{0}{1}\\n'", ".", "format", "(", "tmp", ",", "self", ".", "transform", ".", "__repr__", "(", ")", ".", "replace", "(", "'\\n'", ",", "'\\n'", "+", "' '", "*", "len", "(", "tmp", ")", ")", ")", "\n", "tmp", "=", "'    Target Transforms (if any): '", "\n", "fmt_str", "+=", "'{0}{1}'", ".", "format", "(", "tmp", ",", "self", ".", "target_transform", ".", "__repr__", "(", ")", ".", "replace", "(", "'\\n'", ",", "'\\n'", "+", "' '", "*", "len", "(", "tmp", ")", ")", ")", "\n", "return", "fmt_str", "\n", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.data.fgvc_aircraft.FGVCAircraft._check_exists": [[126, 129], ["os.path.exists", "os.path.exists", "os.path.join"], "methods", ["None"], ["", "def", "_check_exists", "(", "self", ")", ":", "\n", "        ", "return", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "'data'", ",", "'images'", ")", ")", "and", "os", ".", "path", ".", "exists", "(", "self", ".", "classes_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.data.fgvc_aircraft.FGVCAircraft.download": [[130, 165], ["fgvc_aircraft.FGVCAircraft._check_exists", "print", "os.path.abspath", "os.path.join", "urllib.request.urlopen", "os.path.join.strip", "print", "tarfile.open", "tarfile.open.extractall", "print", "os.remove", "print", "os.path.join", "fgvc_aircraft.FGVCAircraft.url.rpartition", "open", "f.write", "os.path.samefile", "print", "os.rename", "urllib.request.urlopen.read"], "methods", ["home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.data.fgvc_aircraft.FGVCAircraft._check_exists", "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.ARPL.arpl_utils.Logger.write"], ["", "def", "download", "(", "self", ")", ":", "\n", "        ", "\"\"\"Download the FGVC-Aircraft data if it doesn't exist already.\"\"\"", "\n", "from", "six", ".", "moves", "import", "urllib", "\n", "import", "tarfile", "\n", "\n", "if", "self", ".", "_check_exists", "(", ")", ":", "\n", "            ", "return", "\n", "\n", "# prepare to download data to PARENT_DIR/fgvc-aircraft-2013.tar.gz", "\n", "", "print", "(", "'Downloading %s ... (may take a few minutes)'", "%", "self", ".", "url", ")", "\n", "parent_dir", "=", "os", ".", "path", ".", "abspath", "(", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "os", ".", "pardir", ")", ")", "\n", "tar_name", "=", "self", ".", "url", ".", "rpartition", "(", "'/'", ")", "[", "-", "1", "]", "\n", "tar_path", "=", "os", ".", "path", ".", "join", "(", "parent_dir", ",", "tar_name", ")", "\n", "data", "=", "urllib", ".", "request", ".", "urlopen", "(", "self", ".", "url", ")", "\n", "\n", "# download .tar.gz file", "\n", "with", "open", "(", "tar_path", ",", "'wb'", ")", "as", "f", ":", "\n", "            ", "f", ".", "write", "(", "data", ".", "read", "(", ")", ")", "\n", "\n", "# extract .tar.gz to PARENT_DIR/fgvc-aircraft-2013b", "\n", "", "data_folder", "=", "tar_path", ".", "strip", "(", "'.tar.gz'", ")", "\n", "print", "(", "'Extracting %s to %s ... (may take a few minutes)'", "%", "(", "tar_path", ",", "data_folder", ")", ")", "\n", "tar", "=", "tarfile", ".", "open", "(", "tar_path", ")", "\n", "tar", ".", "extractall", "(", "parent_dir", ")", "\n", "\n", "# if necessary, rename data folder to self.root", "\n", "if", "not", "os", ".", "path", ".", "samefile", "(", "data_folder", ",", "self", ".", "root", ")", ":", "\n", "            ", "print", "(", "'Renaming %s to %s ...'", "%", "(", "data_folder", ",", "self", ".", "root", ")", ")", "\n", "os", ".", "rename", "(", "data_folder", ",", "self", ".", "root", ")", "\n", "\n", "# delete .tar.gz file", "\n", "", "print", "(", "'Deleting %s ...'", "%", "tar_path", ")", "\n", "os", ".", "remove", "(", "tar_path", ")", "\n", "\n", "print", "(", "'Done!'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.data.fgvc_aircraft.make_dataset": [[10, 19], ["os.path.expanduser", "range", "len", "len", "len", "images.append", "os.path.join"], "function", ["None"], ["def", "make_dataset", "(", "dir", ",", "image_ids", ",", "targets", ")", ":", "\n", "    ", "assert", "(", "len", "(", "image_ids", ")", "==", "len", "(", "targets", ")", ")", "\n", "images", "=", "[", "]", "\n", "dir", "=", "os", ".", "path", ".", "expanduser", "(", "dir", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "image_ids", ")", ")", ":", "\n", "        ", "item", "=", "(", "os", ".", "path", ".", "join", "(", "dir", ",", "'data'", ",", "'images'", ",", "\n", "'%s.jpg'", "%", "image_ids", "[", "i", "]", ")", ",", "targets", "[", "i", "]", ")", "\n", "images", ".", "append", "(", "item", ")", "\n", "", "return", "images", "\n", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.data.fgvc_aircraft.find_classes": [[21, 39], ["open", "open.close", "numpy.unique", "line.split", "image_ids.append", "targets.append", "range", "len"], "function", ["home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.ARPL.arpl_utils.Logger.close"], ["", "def", "find_classes", "(", "classes_file", ")", ":", "\n", "\n", "# read classes file, separating out image IDs and class names", "\n", "    ", "image_ids", "=", "[", "]", "\n", "targets", "=", "[", "]", "\n", "f", "=", "open", "(", "classes_file", ",", "'r'", ")", "\n", "for", "line", "in", "f", ":", "\n", "        ", "split_line", "=", "line", ".", "split", "(", "' '", ")", "\n", "image_ids", ".", "append", "(", "split_line", "[", "0", "]", ")", "\n", "targets", ".", "append", "(", "' '", ".", "join", "(", "split_line", "[", "1", ":", "]", ")", ")", "\n", "", "f", ".", "close", "(", ")", "\n", "\n", "# index class names", "\n", "classes", "=", "np", ".", "unique", "(", "targets", ")", "\n", "class_to_idx", "=", "{", "classes", "[", "i", "]", ":", "i", "for", "i", "in", "range", "(", "len", "(", "classes", ")", ")", "}", "\n", "targets", "=", "[", "class_to_idx", "[", "c", "]", "for", "c", "in", "targets", "]", "\n", "\n", "return", "(", "image_ids", ",", "targets", ",", "classes", ",", "class_to_idx", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.data.fgvc_aircraft.subsample_dataset": [[167, 173], ["enumerate"], "function", ["None"], ["", "", "def", "subsample_dataset", "(", "dataset", ",", "idxs", ")", ":", "\n", "\n", "    ", "dataset", ".", "samples", "=", "[", "(", "p", ",", "t", ")", "for", "i", ",", "(", "p", ",", "t", ")", "in", "enumerate", "(", "dataset", ".", "samples", ")", "if", "i", "in", "idxs", "]", "\n", "dataset", ".", "uq_idxs", "=", "dataset", ".", "uq_idxs", "[", "idxs", "]", "\n", "\n", "return", "dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.data.fgvc_aircraft.subsample_classes": [[175, 188], ["range", "enumerate", "fgvc_aircraft.subsample_dataset", "enumerate"], "function", ["home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.data.svhn.subsample_dataset"], ["", "def", "subsample_classes", "(", "dataset", ",", "include_classes", "=", "range", "(", "60", ")", ")", ":", "\n", "\n", "    ", "cls_idxs", "=", "[", "i", "for", "i", ",", "(", "p", ",", "t", ")", "in", "enumerate", "(", "dataset", ".", "samples", ")", "if", "t", "in", "include_classes", "]", "\n", "\n", "target_xform_dict", "=", "{", "}", "\n", "for", "i", ",", "k", "in", "enumerate", "(", "include_classes", ")", ":", "\n", "        ", "target_xform_dict", "[", "k", "]", "=", "i", "\n", "\n", "", "dataset", "=", "subsample_dataset", "(", "dataset", ",", "cls_idxs", ")", "\n", "\n", "dataset", ".", "target_transform", "=", "lambda", "x", ":", "target_xform_dict", "[", "x", "]", "\n", "\n", "return", "dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.data.fgvc_aircraft.get_train_val_split": [[190, 216], ["copy.deepcopy", "copy.deepcopy", "numpy.unique", "fgvc_aircraft.subsample_dataset", "fgvc_aircraft.subsample_dataset", "numpy.random.choice", "train_idxs.extend", "val_idxs.extend", "enumerate", "numpy.where", "int", "len"], "function", ["home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.data.svhn.subsample_dataset", "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.data.svhn.subsample_dataset"], ["", "def", "get_train_val_split", "(", "train_dataset", ",", "val_split", "=", "0.2", ")", ":", "\n", "\n", "    ", "val_dataset", "=", "deepcopy", "(", "train_dataset", ")", "\n", "train_dataset", "=", "deepcopy", "(", "train_dataset", ")", "\n", "\n", "all_targets", "=", "[", "t", "for", "i", ",", "(", "p", ",", "t", ")", "in", "enumerate", "(", "train_dataset", ".", "samples", ")", "]", "\n", "train_classes", "=", "np", ".", "unique", "(", "all_targets", ")", "\n", "\n", "# Get train/test indices", "\n", "train_idxs", "=", "[", "]", "\n", "val_idxs", "=", "[", "]", "\n", "for", "cls", "in", "train_classes", ":", "\n", "\n", "        ", "cls_idxs", "=", "np", ".", "where", "(", "all_targets", "==", "cls", ")", "[", "0", "]", "\n", "\n", "v_", "=", "np", ".", "random", ".", "choice", "(", "cls_idxs", ",", "replace", "=", "False", ",", "size", "=", "(", "(", "int", "(", "val_split", "*", "len", "(", "cls_idxs", ")", ")", ")", ",", ")", ")", "\n", "t_", "=", "[", "x", "for", "x", "in", "cls_idxs", "if", "x", "not", "in", "v_", "]", "\n", "\n", "train_idxs", ".", "extend", "(", "t_", ")", "\n", "val_idxs", ".", "extend", "(", "v_", ")", "\n", "\n", "# Get training/validation datasets based on selected idxs", "\n", "", "train_dataset", "=", "subsample_dataset", "(", "train_dataset", ",", "train_idxs", ")", "\n", "val_dataset", "=", "subsample_dataset", "(", "val_dataset", ",", "val_idxs", ")", "\n", "\n", "return", "train_dataset", ",", "val_dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.data.fgvc_aircraft.get_equal_len_datasets": [[218, 235], ["len", "len", "numpy.random.choice", "fgvc_aircraft.subsample_dataset", "range", "len", "len", "numpy.random.choice", "fgvc_aircraft.subsample_dataset", "len", "len", "range", "len", "len"], "function", ["home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.data.svhn.subsample_dataset", "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.data.svhn.subsample_dataset"], ["", "def", "get_equal_len_datasets", "(", "dataset1", ",", "dataset2", ")", ":", "\n", "\n", "    ", "\"\"\"\n    Make two datasets the same length\n    \"\"\"", "\n", "\n", "if", "len", "(", "dataset1", ")", ">", "len", "(", "dataset2", ")", ":", "\n", "\n", "        ", "rand_idxs", "=", "np", ".", "random", ".", "choice", "(", "range", "(", "len", "(", "dataset1", ")", ")", ",", "size", "=", "(", "len", "(", "dataset2", ",", ")", ")", ",", "replace", "=", "False", ")", "\n", "subsample_dataset", "(", "dataset1", ",", "rand_idxs", ")", "\n", "\n", "", "elif", "len", "(", "dataset2", ")", ">", "len", "(", "dataset1", ")", ":", "\n", "\n", "        ", "rand_idxs", "=", "np", ".", "random", ".", "choice", "(", "range", "(", "len", "(", "dataset1", ")", ")", ",", "size", "=", "(", "len", "(", "dataset2", ",", ")", ")", ",", "replace", "=", "False", ")", "\n", "subsample_dataset", "(", "dataset2", ",", "rand_idxs", ")", "\n", "\n", "", "return", "dataset1", ",", "dataset2", "\n", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.data.fgvc_aircraft.get_aircraft_datasets": [[237, 273], ["range", "range", "numpy.random.seed", "fgvc_aircraft.FGVCAircraft", "fgvc_aircraft.subsample_classes", "fgvc_aircraft.get_train_val_split", "fgvc_aircraft.FGVCAircraft", "fgvc_aircraft.subsample_classes", "fgvc_aircraft.FGVCAircraft", "fgvc_aircraft.subsample_classes", "fgvc_aircraft.get_equal_len_datasets"], "function", ["home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.data.svhn.subsample_classes", "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.data.svhn.get_train_val_split", "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.data.svhn.subsample_classes", "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.data.svhn.subsample_classes", "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.data.svhn.get_equal_len_datasets"], ["", "def", "get_aircraft_datasets", "(", "train_transform", ",", "test_transform", ",", "train_classes", "=", "range", "(", "60", ")", ",", "\n", "open_set_classes", "=", "range", "(", "60", ",", "100", ")", ",", "balance_open_set_eval", "=", "False", ",", "split_train_val", "=", "True", ",", "seed", "=", "0", ")", ":", "\n", "\n", "    ", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "\n", "# Init train dataset and subsample training classes", "\n", "train_dataset_whole", "=", "FGVCAircraft", "(", "root", "=", "aircraft_root", ",", "transform", "=", "train_transform", ",", "split", "=", "'trainval'", ")", "\n", "train_dataset_whole", "=", "subsample_classes", "(", "train_dataset_whole", ",", "include_classes", "=", "train_classes", ")", "\n", "\n", "# Split into training and validation sets", "\n", "train_dataset_split", ",", "val_dataset_split", "=", "get_train_val_split", "(", "train_dataset_whole", ")", "\n", "val_dataset_split", ".", "transform", "=", "test_transform", "\n", "\n", "# Get test set for known classes", "\n", "test_dataset_known", "=", "FGVCAircraft", "(", "root", "=", "aircraft_root", ",", "transform", "=", "test_transform", ",", "split", "=", "'test'", ")", "\n", "test_dataset_known", "=", "subsample_classes", "(", "test_dataset_known", ",", "include_classes", "=", "train_classes", ")", "\n", "\n", "# Get testset for unknown classes", "\n", "test_dataset_unknown", "=", "FGVCAircraft", "(", "root", "=", "aircraft_root", ",", "transform", "=", "test_transform", ",", "split", "=", "'test'", ")", "\n", "test_dataset_unknown", "=", "subsample_classes", "(", "test_dataset_unknown", ",", "include_classes", "=", "open_set_classes", ")", "\n", "\n", "if", "balance_open_set_eval", ":", "\n", "        ", "test_dataset_known", ",", "test_dataset_unknown", "=", "get_equal_len_datasets", "(", "test_dataset_known", ",", "test_dataset_unknown", ")", "\n", "\n", "# Either split train into train and val or use test set as val", "\n", "", "train_dataset", "=", "train_dataset_split", "if", "split_train_val", "else", "train_dataset_whole", "\n", "val_dataset", "=", "val_dataset_split", "if", "split_train_val", "else", "test_dataset_known", "\n", "\n", "all_datasets", "=", "{", "\n", "'train'", ":", "train_dataset", ",", "\n", "'val'", ":", "val_dataset", ",", "\n", "'test_known'", ":", "test_dataset_known", ",", "\n", "'test_unknown'", ":", "test_dataset_unknown", ",", "\n", "}", "\n", "\n", "return", "all_datasets", "\n", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.data.stanford_cars.CarsDataset.__init__": [[15, 44], ["scipy.io.loadmat", "enumerate", "numpy.array", "data_dir.format", "data_dir.format", "metas.format", "metas.format", "isinstance", "Exception", "stanford_cars.CarsDataset.data.append", "stanford_cars.CarsDataset.target.append", "range", "len"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "train", "=", "True", ",", "limit", "=", "0", ",", "data_dir", "=", "car_root", ",", "transform", "=", "None", ",", "metas", "=", "meta_default_path", ")", ":", "\n", "\n", "        ", "data_dir", "=", "data_dir", ".", "format", "(", "'train'", ")", "if", "train", "else", "data_dir", ".", "format", "(", "'test'", ")", "\n", "metas", "=", "metas", ".", "format", "(", "'train_annos'", ")", "if", "train", "else", "metas", ".", "format", "(", "'test_annos_withlabels'", ")", "\n", "\n", "self", ".", "loader", "=", "default_loader", "\n", "self", ".", "data_dir", "=", "data_dir", "\n", "self", ".", "data", "=", "[", "]", "\n", "self", ".", "target", "=", "[", "]", "\n", "self", ".", "train", "=", "train", "\n", "\n", "self", ".", "transform", "=", "transform", "\n", "\n", "if", "not", "isinstance", "(", "metas", ",", "str", ")", ":", "\n", "            ", "raise", "Exception", "(", "\"Train metas must be string location !\"", ")", "\n", "", "labels_meta", "=", "mat_io", ".", "loadmat", "(", "metas", ")", "\n", "\n", "for", "idx", ",", "img_", "in", "enumerate", "(", "labels_meta", "[", "'annotations'", "]", "[", "0", "]", ")", ":", "\n", "            ", "if", "limit", ":", "\n", "                ", "if", "idx", ">", "limit", ":", "\n", "                    ", "break", "\n", "\n", "# self.data.append(img_resized)", "\n", "", "", "self", ".", "data", ".", "append", "(", "data_dir", "+", "img_", "[", "5", "]", "[", "0", "]", ")", "\n", "# if self.mode == 'train':", "\n", "self", ".", "target", ".", "append", "(", "img_", "[", "4", "]", "[", "0", "]", "[", "0", "]", ")", "\n", "\n", "", "self", ".", "uq_idxs", "=", "np", ".", "array", "(", "range", "(", "len", "(", "self", ")", ")", ")", "\n", "self", ".", "target_transform", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.data.stanford_cars.CarsDataset.__getitem__": [[45, 59], ["stanford_cars.CarsDataset.loader", "stanford_cars.CarsDataset.transform", "stanford_cars.CarsDataset.target_transform"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "\n", "        ", "image", "=", "self", ".", "loader", "(", "self", ".", "data", "[", "idx", "]", ")", "\n", "target", "=", "self", ".", "target", "[", "idx", "]", "-", "1", "\n", "\n", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "image", "=", "self", ".", "transform", "(", "image", ")", "\n", "\n", "", "if", "self", ".", "target_transform", "is", "not", "None", ":", "\n", "            ", "target", "=", "self", ".", "target_transform", "(", "target", ")", "\n", "\n", "", "idx", "=", "self", ".", "uq_idxs", "[", "idx", "]", "\n", "\n", "return", "image", ",", "target", ",", "idx", "\n", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.data.stanford_cars.CarsDataset.__len__": [[60, 62], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.data.stanford_cars.subsample_dataset": [[64, 71], ["[].tolist", "[].tolist", "numpy.array", "numpy.array"], "function", ["None"], ["", "", "def", "subsample_dataset", "(", "dataset", ",", "idxs", ")", ":", "\n", "\n", "    ", "dataset", ".", "data", "=", "np", ".", "array", "(", "dataset", ".", "data", ")", "[", "idxs", "]", ".", "tolist", "(", ")", "\n", "dataset", ".", "target", "=", "np", ".", "array", "(", "dataset", ".", "target", ")", "[", "idxs", "]", ".", "tolist", "(", ")", "\n", "dataset", ".", "uq_idxs", "=", "dataset", ".", "uq_idxs", "[", "idxs", "]", "\n", "\n", "return", "dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.data.stanford_cars.subsample_classes": [[73, 87], ["range", "enumerate", "stanford_cars.subsample_dataset", "numpy.array", "enumerate"], "function", ["home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.data.svhn.subsample_dataset"], ["", "def", "subsample_classes", "(", "dataset", ",", "include_classes", "=", "range", "(", "160", ")", ")", ":", "\n", "\n", "    ", "include_classes_cars", "=", "np", ".", "array", "(", "include_classes", ")", "+", "1", "# SCars classes are indexed 1 --> 196 instead of 0 --> 195", "\n", "cls_idxs", "=", "[", "x", "for", "x", ",", "t", "in", "enumerate", "(", "dataset", ".", "target", ")", "if", "t", "in", "include_classes_cars", "]", "\n", "\n", "target_xform_dict", "=", "{", "}", "\n", "for", "i", ",", "k", "in", "enumerate", "(", "include_classes", ")", ":", "\n", "        ", "target_xform_dict", "[", "k", "]", "=", "i", "\n", "\n", "", "dataset", "=", "subsample_dataset", "(", "dataset", ",", "cls_idxs", ")", "\n", "\n", "dataset", ".", "target_transform", "=", "lambda", "x", ":", "target_xform_dict", "[", "x", "]", "\n", "\n", "return", "dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.data.stanford_cars.get_train_val_split": [[89, 114], ["copy.deepcopy", "copy.deepcopy", "numpy.unique", "stanford_cars.subsample_dataset", "stanford_cars.subsample_dataset", "numpy.random.choice", "train_idxs.extend", "val_idxs.extend", "numpy.where", "int", "len"], "function", ["home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.data.svhn.subsample_dataset", "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.data.svhn.subsample_dataset"], ["", "def", "get_train_val_split", "(", "train_dataset", ",", "val_split", "=", "0.2", ")", ":", "\n", "\n", "    ", "val_dataset", "=", "deepcopy", "(", "train_dataset", ")", "\n", "train_dataset", "=", "deepcopy", "(", "train_dataset", ")", "\n", "\n", "train_classes", "=", "np", ".", "unique", "(", "train_dataset", ".", "target", ")", "\n", "\n", "# Get train/test indices", "\n", "train_idxs", "=", "[", "]", "\n", "val_idxs", "=", "[", "]", "\n", "for", "cls", "in", "train_classes", ":", "\n", "\n", "        ", "cls_idxs", "=", "np", ".", "where", "(", "train_dataset", ".", "target", "==", "cls", ")", "[", "0", "]", "\n", "\n", "v_", "=", "np", ".", "random", ".", "choice", "(", "cls_idxs", ",", "replace", "=", "False", ",", "size", "=", "(", "(", "int", "(", "val_split", "*", "len", "(", "cls_idxs", ")", ")", ")", ",", ")", ")", "\n", "t_", "=", "[", "x", "for", "x", "in", "cls_idxs", "if", "x", "not", "in", "v_", "]", "\n", "\n", "train_idxs", ".", "extend", "(", "t_", ")", "\n", "val_idxs", ".", "extend", "(", "v_", ")", "\n", "\n", "# Get training/validation datasets based on selected idxs", "\n", "", "train_dataset", "=", "subsample_dataset", "(", "train_dataset", ",", "train_idxs", ")", "\n", "val_dataset", "=", "subsample_dataset", "(", "val_dataset", ",", "val_idxs", ")", "\n", "\n", "return", "train_dataset", ",", "val_dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.data.stanford_cars.get_equal_len_datasets": [[116, 133], ["len", "len", "numpy.random.choice", "stanford_cars.subsample_dataset", "range", "len", "len", "numpy.random.choice", "stanford_cars.subsample_dataset", "len", "len", "range", "len", "len"], "function", ["home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.data.svhn.subsample_dataset", "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.data.svhn.subsample_dataset"], ["", "def", "get_equal_len_datasets", "(", "dataset1", ",", "dataset2", ")", ":", "\n", "\n", "    ", "\"\"\"\n    Make two datasets the same length\n    \"\"\"", "\n", "\n", "if", "len", "(", "dataset1", ")", ">", "len", "(", "dataset2", ")", ":", "\n", "\n", "        ", "rand_idxs", "=", "np", ".", "random", ".", "choice", "(", "range", "(", "len", "(", "dataset1", ")", ")", ",", "size", "=", "(", "len", "(", "dataset2", ",", ")", ")", ")", "\n", "subsample_dataset", "(", "dataset1", ",", "rand_idxs", ")", "\n", "\n", "", "elif", "len", "(", "dataset2", ")", ">", "len", "(", "dataset1", ")", ":", "\n", "\n", "        ", "rand_idxs", "=", "np", ".", "random", ".", "choice", "(", "range", "(", "len", "(", "dataset2", ")", ")", ",", "size", "=", "(", "len", "(", "dataset1", ",", ")", ")", ")", "\n", "subsample_dataset", "(", "dataset2", ",", "rand_idxs", ")", "\n", "\n", "", "return", "dataset1", ",", "dataset2", "\n", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.data.stanford_cars.get_scars_datasets": [[135, 171], ["range", "range", "numpy.random.seed", "stanford_cars.CarsDataset", "stanford_cars.subsample_classes", "stanford_cars.get_train_val_split", "stanford_cars.CarsDataset", "stanford_cars.subsample_classes", "stanford_cars.CarsDataset", "stanford_cars.subsample_classes", "stanford_cars.get_equal_len_datasets"], "function", ["home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.data.svhn.subsample_classes", "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.data.svhn.get_train_val_split", "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.data.svhn.subsample_classes", "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.data.svhn.subsample_classes", "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.data.svhn.get_equal_len_datasets"], ["", "def", "get_scars_datasets", "(", "train_transform", ",", "test_transform", ",", "train_classes", "=", "range", "(", "120", ")", ",", "\n", "open_set_classes", "=", "range", "(", "120", ",", "196", ")", ",", "balance_open_set_eval", "=", "False", ",", "split_train_val", "=", "True", ",", "seed", "=", "0", ")", ":", "\n", "\n", "    ", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "\n", "# Init train dataset and subsample training classes", "\n", "train_dataset_whole", "=", "CarsDataset", "(", "data_dir", "=", "car_root", ",", "transform", "=", "train_transform", ",", "metas", "=", "meta_default_path", ",", "train", "=", "True", ")", "\n", "train_dataset_whole", "=", "subsample_classes", "(", "train_dataset_whole", ",", "include_classes", "=", "train_classes", ")", "\n", "\n", "# Split into training and validation sets", "\n", "train_dataset_split", ",", "val_dataset_split", "=", "get_train_val_split", "(", "train_dataset_whole", ")", "\n", "val_dataset_split", ".", "transform", "=", "test_transform", "\n", "\n", "# Get test set for known classes", "\n", "test_dataset_known", "=", "CarsDataset", "(", "data_dir", "=", "car_root", ",", "transform", "=", "test_transform", ",", "metas", "=", "meta_default_path", ",", "train", "=", "False", ")", "\n", "test_dataset_known", "=", "subsample_classes", "(", "test_dataset_known", ",", "include_classes", "=", "train_classes", ")", "\n", "\n", "# Get testset for unknown classes", "\n", "test_dataset_unknown", "=", "CarsDataset", "(", "data_dir", "=", "car_root", ",", "transform", "=", "test_transform", ",", "metas", "=", "meta_default_path", ",", "train", "=", "False", ")", "\n", "test_dataset_unknown", "=", "subsample_classes", "(", "test_dataset_unknown", ",", "include_classes", "=", "open_set_classes", ")", "\n", "\n", "if", "balance_open_set_eval", ":", "\n", "        ", "test_dataset_known", ",", "test_dataset_unknown", "=", "get_equal_len_datasets", "(", "test_dataset_known", ",", "test_dataset_unknown", ")", "\n", "\n", "# Either split train into train and val or use test set as val", "\n", "", "train_dataset", "=", "train_dataset_split", "if", "split_train_val", "else", "train_dataset_whole", "\n", "val_dataset", "=", "val_dataset_split", "if", "split_train_val", "else", "test_dataset_known", "\n", "\n", "all_datasets", "=", "{", "\n", "'train'", ":", "train_dataset", ",", "\n", "'val'", ":", "val_dataset", ",", "\n", "'test_known'", ":", "test_dataset_known", ",", "\n", "'test_unknown'", ":", "test_dataset_unknown", ",", "\n", "}", "\n", "\n", "return", "all_datasets", "\n", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.data.svhn.CustomSVHN.__init__": [[9, 14], ["torchvision.datasets.SVHN.__init__", "numpy.array", "range", "len"], "methods", ["home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.loss.ARPLoss.ARPLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "\n", "        ", "super", "(", "CustomSVHN", ",", "self", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n", "self", ".", "uq_idxs", "=", "np", ".", "array", "(", "range", "(", "len", "(", "self", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.data.svhn.CustomSVHN.__getitem__": [[15, 21], ["torchvision.datasets.SVHN.__getitem__"], "methods", ["home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.arpl_models.resnetABN.TwoInputSequential.__getitem__"], ["", "def", "__getitem__", "(", "self", ",", "item", ")", ":", "\n", "\n", "        ", "img", ",", "label", "=", "super", "(", ")", ".", "__getitem__", "(", "item", ")", "\n", "uq_idx", "=", "self", ".", "uq_idxs", "[", "item", "]", "\n", "\n", "return", "img", ",", "label", ",", "uq_idx", "\n", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.data.svhn.subsample_dataset": [[23, 30], ["[].tolist", "numpy.array"], "function", ["None"], ["", "", "def", "subsample_dataset", "(", "dataset", ",", "idxs", ")", ":", "\n", "\n", "    ", "dataset", ".", "data", "=", "dataset", ".", "data", "[", "idxs", "]", "\n", "dataset", ".", "labels", "=", "np", ".", "array", "(", "dataset", ".", "labels", ")", "[", "idxs", "]", ".", "tolist", "(", ")", "\n", "dataset", ".", "uq_idxs", "=", "dataset", ".", "uq_idxs", "[", "idxs", "]", "\n", "\n", "return", "dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.data.svhn.subsample_classes": [[32, 45], ["enumerate", "svhn.subsample_dataset", "enumerate"], "function", ["home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.data.svhn.subsample_dataset"], ["", "def", "subsample_classes", "(", "dataset", ",", "include_classes", "=", "(", "0", ",", "1", ",", "8", ",", "9", ")", ")", ":", "\n", "\n", "    ", "cls_idxs", "=", "[", "x", "for", "x", ",", "t", "in", "enumerate", "(", "dataset", ".", "labels", ")", "if", "t", "in", "include_classes", "]", "\n", "\n", "target_xform_dict", "=", "{", "}", "\n", "for", "i", ",", "k", "in", "enumerate", "(", "include_classes", ")", ":", "\n", "        ", "target_xform_dict", "[", "k", "]", "=", "i", "\n", "\n", "", "dataset", "=", "subsample_dataset", "(", "dataset", ",", "cls_idxs", ")", "\n", "\n", "dataset", ".", "target_transform", "=", "lambda", "x", ":", "target_xform_dict", "[", "x", "]", "\n", "\n", "return", "dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.data.svhn.get_train_val_split": [[47, 72], ["copy.deepcopy", "copy.deepcopy", "numpy.unique", "svhn.subsample_dataset", "svhn.subsample_dataset", "numpy.random.choice", "train_idxs.extend", "val_idxs.extend", "numpy.where", "int", "len"], "function", ["home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.data.svhn.subsample_dataset", "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.data.svhn.subsample_dataset"], ["", "def", "get_train_val_split", "(", "train_dataset", ",", "val_split", "=", "0.2", ")", ":", "\n", "\n", "    ", "val_dataset", "=", "deepcopy", "(", "train_dataset", ")", "\n", "train_dataset", "=", "deepcopy", "(", "train_dataset", ")", "\n", "\n", "train_classes", "=", "np", ".", "unique", "(", "train_dataset", ".", "labels", ")", "\n", "\n", "# Get train/test indices", "\n", "train_idxs", "=", "[", "]", "\n", "val_idxs", "=", "[", "]", "\n", "for", "cls", "in", "train_classes", ":", "\n", "\n", "        ", "cls_idxs", "=", "np", ".", "where", "(", "train_dataset", ".", "labels", "==", "cls", ")", "[", "0", "]", "\n", "\n", "v_", "=", "np", ".", "random", ".", "choice", "(", "cls_idxs", ",", "replace", "=", "False", ",", "size", "=", "(", "(", "int", "(", "val_split", "*", "len", "(", "cls_idxs", ")", ")", ")", ",", ")", ")", "\n", "t_", "=", "[", "x", "for", "x", "in", "cls_idxs", "if", "x", "not", "in", "v_", "]", "\n", "\n", "train_idxs", ".", "extend", "(", "t_", ")", "\n", "val_idxs", ".", "extend", "(", "v_", ")", "\n", "\n", "# Get training/validation datasets based on selected idxs", "\n", "", "train_dataset", "=", "subsample_dataset", "(", "train_dataset", ",", "train_idxs", ")", "\n", "val_dataset", "=", "subsample_dataset", "(", "val_dataset", ",", "val_idxs", ")", "\n", "\n", "return", "train_dataset", ",", "val_dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.data.svhn.get_equal_len_datasets": [[74, 91], ["len", "len", "numpy.random.choice", "svhn.subsample_dataset", "range", "len", "len", "numpy.random.choice", "svhn.subsample_dataset", "len", "len", "range", "len", "len"], "function", ["home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.data.svhn.subsample_dataset", "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.data.svhn.subsample_dataset"], ["", "def", "get_equal_len_datasets", "(", "dataset1", ",", "dataset2", ")", ":", "\n", "\n", "    ", "\"\"\"\n    Make two datasets the same length\n    \"\"\"", "\n", "\n", "if", "len", "(", "dataset1", ")", ">", "len", "(", "dataset2", ")", ":", "\n", "\n", "        ", "rand_idxs", "=", "np", ".", "random", ".", "choice", "(", "range", "(", "len", "(", "dataset1", ")", ")", ",", "size", "=", "(", "len", "(", "dataset2", ",", ")", ")", ")", "\n", "subsample_dataset", "(", "dataset1", ",", "rand_idxs", ")", "\n", "\n", "", "elif", "len", "(", "dataset2", ")", ">", "len", "(", "dataset1", ")", ":", "\n", "\n", "        ", "rand_idxs", "=", "np", ".", "random", ".", "choice", "(", "range", "(", "len", "(", "dataset2", ")", ")", ",", "size", "=", "(", "len", "(", "dataset1", ",", ")", ")", ")", "\n", "subsample_dataset", "(", "dataset2", ",", "rand_idxs", ")", "\n", "\n", "", "return", "dataset1", ",", "dataset2", "\n", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.data.svhn.get_svhn_datasets": [[93, 129], ["range", "range", "numpy.random.seed", "svhn.CustomSVHN", "svhn.subsample_classes", "svhn.get_train_val_split", "svhn.CustomSVHN", "svhn.subsample_classes", "svhn.CustomSVHN", "svhn.subsample_classes", "svhn.get_equal_len_datasets"], "function", ["home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.data.svhn.subsample_classes", "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.data.svhn.get_train_val_split", "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.data.svhn.subsample_classes", "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.data.svhn.subsample_classes", "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.data.svhn.get_equal_len_datasets"], ["", "def", "get_svhn_datasets", "(", "train_transform", ",", "test_transform", ",", "train_classes", "=", "range", "(", "6", ")", ",", "\n", "open_set_classes", "=", "range", "(", "6", ",", "10", ")", ",", "balance_open_set_eval", "=", "False", ",", "split_train_val", "=", "True", ",", "seed", "=", "0", ")", ":", "\n", "\n", "    ", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "\n", "# Init train dataset and subsample training classes", "\n", "train_dataset_whole", "=", "CustomSVHN", "(", "root", "=", "svhn_root", ",", "transform", "=", "train_transform", ",", "split", "=", "'train'", ")", "\n", "train_dataset_whole", "=", "subsample_classes", "(", "train_dataset_whole", ",", "include_classes", "=", "train_classes", ")", "\n", "\n", "# Split into training and validation sets", "\n", "train_dataset_split", ",", "val_dataset_split", "=", "get_train_val_split", "(", "train_dataset_whole", ")", "\n", "val_dataset_split", ".", "transform", "=", "test_transform", "\n", "\n", "# Get test set for known classes", "\n", "test_dataset_known", "=", "CustomSVHN", "(", "root", "=", "svhn_root", ",", "transform", "=", "test_transform", ",", "split", "=", "'test'", ")", "\n", "test_dataset_known", "=", "subsample_classes", "(", "test_dataset_known", ",", "include_classes", "=", "train_classes", ")", "\n", "\n", "# Get testset for unknown classes", "\n", "test_dataset_unknown", "=", "CustomSVHN", "(", "root", "=", "svhn_root", ",", "transform", "=", "test_transform", ",", "split", "=", "'test'", ")", "\n", "test_dataset_unknown", "=", "subsample_classes", "(", "test_dataset_unknown", ",", "include_classes", "=", "open_set_classes", ")", "\n", "\n", "if", "balance_open_set_eval", ":", "\n", "        ", "test_dataset_known", ",", "test_dataset_unknown", "=", "get_equal_len_datasets", "(", "test_dataset_known", ",", "test_dataset_unknown", ")", "\n", "\n", "# Either split train into train and val or use test set as val", "\n", "", "train_dataset", "=", "train_dataset_split", "if", "split_train_val", "else", "train_dataset_whole", "\n", "val_dataset", "=", "val_dataset_split", "if", "split_train_val", "else", "test_dataset_known", "\n", "\n", "all_datasets", "=", "{", "\n", "'train'", ":", "train_dataset", ",", "\n", "'val'", ":", "val_dataset", ",", "\n", "'test_known'", ":", "test_dataset_known", ",", "\n", "'test_unknown'", ":", "test_dataset_unknown", ",", "\n", "}", "\n", "\n", "return", "all_datasets", "\n", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.augmentations.cut_out.cutout": [[8, 41], ["numpy.asarray().copy", "numpy.random.randint", "numpy.random.randint", "max", "max", "min", "min", "numpy.random.random", "numpy.asarray"], "function", ["None"], ["def", "cutout", "(", "mask_size", ",", "p", ",", "cutout_inside", ",", "mask_color", "=", "(", "0", ",", "0", ",", "0", ")", ")", ":", "\n", "    ", "mask_size_half", "=", "mask_size", "//", "2", "\n", "offset", "=", "1", "if", "mask_size", "%", "2", "==", "0", "else", "0", "\n", "\n", "def", "_cutout", "(", "image", ")", ":", "\n", "        ", "image", "=", "np", ".", "asarray", "(", "image", ")", ".", "copy", "(", ")", "\n", "\n", "if", "np", ".", "random", ".", "random", "(", ")", ">", "p", ":", "\n", "            ", "return", "image", "\n", "\n", "", "h", ",", "w", "=", "image", ".", "shape", "[", ":", "2", "]", "\n", "\n", "if", "cutout_inside", ":", "\n", "            ", "cxmin", ",", "cxmax", "=", "mask_size_half", ",", "w", "+", "offset", "-", "mask_size_half", "\n", "cymin", ",", "cymax", "=", "mask_size_half", ",", "h", "+", "offset", "-", "mask_size_half", "\n", "", "else", ":", "\n", "            ", "cxmin", ",", "cxmax", "=", "0", ",", "w", "+", "offset", "\n", "cymin", ",", "cymax", "=", "0", ",", "h", "+", "offset", "\n", "\n", "", "cx", "=", "np", ".", "random", ".", "randint", "(", "cxmin", ",", "cxmax", ")", "\n", "cy", "=", "np", ".", "random", ".", "randint", "(", "cymin", ",", "cymax", ")", "\n", "xmin", "=", "cx", "-", "mask_size_half", "\n", "ymin", "=", "cy", "-", "mask_size_half", "\n", "xmax", "=", "xmin", "+", "mask_size", "\n", "ymax", "=", "ymin", "+", "mask_size", "\n", "xmin", "=", "max", "(", "0", ",", "xmin", ")", "\n", "ymin", "=", "max", "(", "0", ",", "ymin", ")", "\n", "xmax", "=", "min", "(", "w", ",", "xmax", ")", "\n", "ymax", "=", "min", "(", "h", ",", "ymax", ")", "\n", "image", "[", "ymin", ":", "ymax", ",", "xmin", ":", "xmax", "]", "=", "mask_color", "\n", "return", "image", "\n", "\n", "", "return", "_cutout", "\n", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.augmentations.cut_out.to_tensor": [[42, 51], ["len", "torch.from_numpy", "torch.from_numpy", "image.transpose().astype", "image[].astype", "image.transpose"], "function", ["None"], ["", "def", "to_tensor", "(", ")", ":", "\n", "    ", "def", "_to_tensor", "(", "image", ")", ":", "\n", "        ", "if", "len", "(", "image", ".", "shape", ")", "==", "3", ":", "\n", "            ", "return", "torch", ".", "from_numpy", "(", "\n", "image", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", ".", "astype", "(", "np", ".", "float32", ")", ")", "\n", "", "else", ":", "\n", "            ", "return", "torch", ".", "from_numpy", "(", "image", "[", "None", ",", ":", ",", ":", "]", ".", "astype", "(", "np", ".", "float32", ")", ")", "\n", "\n", "", "", "return", "_to_tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.augmentations.cut_out.normalize": [[52, 63], ["numpy.array", "numpy.array", "numpy.asarray().astype", "numpy.asarray"], "function", ["None"], ["", "def", "normalize", "(", "mean", ",", "std", ")", ":", "\n", "\n", "    ", "mean", "=", "np", ".", "array", "(", "mean", ")", "\n", "std", "=", "np", ".", "array", "(", "std", ")", "\n", "\n", "def", "_normalize", "(", "image", ")", ":", "\n", "        ", "image", "=", "np", ".", "asarray", "(", "image", ")", ".", "astype", "(", "np", ".", "float32", ")", "/", "255.", "\n", "image", "=", "(", "image", "-", "mean", ")", "/", "std", "\n", "return", "image", "\n", "\n", "", "return", "_normalize", "", "", ""]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.augmentations.randaugment.Lighting.__init__": [[232, 236], ["torch.Tensor", "torch.Tensor"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "alphastd", ",", "eigval", ",", "eigvec", ")", ":", "\n", "        ", "self", ".", "alphastd", "=", "alphastd", "\n", "self", ".", "eigval", "=", "torch", ".", "Tensor", "(", "eigval", ")", "\n", "self", ".", "eigvec", "=", "torch", ".", "Tensor", "(", "eigvec", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.augmentations.randaugment.Lighting.__call__": [[237, 248], ["img.new().resize_().normal_", "randaugment.Lighting.eigvec.type_as().clone().mul().mul().sum().squeeze", "img.add", "randaugment.Lighting.view().expand_as", "img.new().resize_", "randaugment.Lighting.eigvec.type_as().clone().mul().mul().sum", "randaugment.Lighting.view", "img.new", "randaugment.Lighting.eigvec.type_as().clone().mul().mul", "randaugment.Lighting.eigval.view().expand", "randaugment.Lighting.eigvec.type_as().clone().mul", "img.new().resize_().normal_.view().expand", "randaugment.Lighting.eigval.view", "randaugment.Lighting.eigvec.type_as().clone", "img.new().resize_().normal_.view", "randaugment.Lighting.eigvec.type_as"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "if", "self", ".", "alphastd", "==", "0", ":", "\n", "            ", "return", "img", "\n", "\n", "", "alpha", "=", "img", ".", "new", "(", ")", ".", "resize_", "(", "3", ")", ".", "normal_", "(", "0", ",", "self", ".", "alphastd", ")", "\n", "rgb", "=", "self", ".", "eigvec", ".", "type_as", "(", "img", ")", ".", "clone", "(", ")", ".", "mul", "(", "alpha", ".", "view", "(", "1", ",", "3", ")", ".", "expand", "(", "3", ",", "3", ")", ")", ".", "mul", "(", "self", ".", "eigval", ".", "view", "(", "1", ",", "3", ")", ".", "expand", "(", "3", ",", "3", ")", ")", ".", "sum", "(", "1", ")", ".", "squeeze", "(", ")", "\n", "\n", "return", "img", ".", "add", "(", "rgb", ".", "view", "(", "3", ",", "1", ",", "1", ")", ".", "expand_as", "(", "img", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.augmentations.randaugment.CutoutDefault.__init__": [[254, 256], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "length", ")", ":", "\n", "        ", "self", ".", "length", "=", "length", "\n", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.augmentations.randaugment.CutoutDefault.__call__": [[257, 273], ["numpy.ones", "numpy.random.randint", "numpy.random.randint", "numpy.clip", "numpy.clip", "numpy.clip", "numpy.clip", "torch.from_numpy", "mask.expand_as.expand_as.expand_as", "img.size", "img.size"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "h", ",", "w", "=", "img", ".", "size", "(", "1", ")", ",", "img", ".", "size", "(", "2", ")", "\n", "mask", "=", "np", ".", "ones", "(", "(", "h", ",", "w", ")", ",", "np", ".", "float32", ")", "\n", "y", "=", "np", ".", "random", ".", "randint", "(", "h", ")", "\n", "x", "=", "np", ".", "random", ".", "randint", "(", "w", ")", "\n", "\n", "y1", "=", "np", ".", "clip", "(", "y", "-", "self", ".", "length", "//", "2", ",", "0", ",", "h", ")", "\n", "y2", "=", "np", ".", "clip", "(", "y", "+", "self", ".", "length", "//", "2", ",", "0", ",", "h", ")", "\n", "x1", "=", "np", ".", "clip", "(", "x", "-", "self", ".", "length", "//", "2", ",", "0", ",", "w", ")", "\n", "x2", "=", "np", ".", "clip", "(", "x", "+", "self", ".", "length", "//", "2", ",", "0", ",", "w", ")", "\n", "\n", "mask", "[", "y1", ":", "y2", ",", "x1", ":", "x2", "]", "=", "0.", "\n", "mask", "=", "torch", ".", "from_numpy", "(", "mask", ")", "\n", "mask", "=", "mask", ".", "expand_as", "(", "img", ")", "\n", "img", "*=", "mask", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.augmentations.randaugment.RandAugment.__init__": [[276, 288], ["randaugment.augment_list", "randaugment.augment_list_svhn", "randaugment.augment_list"], "methods", ["home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.augmentations.randaugment.augment_list", "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.augmentations.randaugment.augment_list_svhn", "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.augmentations.randaugment.augment_list"], ["    ", "def", "__init__", "(", "self", ",", "n", ",", "m", ",", "args", "=", "None", ")", ":", "\n", "        ", "self", ".", "n", "=", "n", "# [1, 2]", "\n", "self", ".", "m", "=", "m", "# [0...30]", "\n", "\n", "if", "args", "is", "None", ":", "\n", "            ", "self", ".", "augment_list", "=", "augment_list", "(", ")", "\n", "\n", "", "elif", "args", ".", "dataset", "==", "'svhn'", "or", "args", ".", "dataset", "==", "'mnist'", ":", "\n", "            ", "self", ".", "augment_list", "=", "augment_list_svhn", "(", ")", "\n", "\n", "", "else", ":", "\n", "            ", "self", ".", "augment_list", "=", "augment_list", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.augmentations.randaugment.RandAugment.__call__": [[289, 296], ["random.choices", "op", "float", "float"], "methods", ["None"], ["", "", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "ops", "=", "random", ".", "choices", "(", "self", ".", "augment_list", ",", "k", "=", "self", ".", "n", ")", "\n", "for", "op", ",", "minval", ",", "maxval", "in", "ops", ":", "\n", "            ", "val", "=", "(", "float", "(", "self", ".", "m", ")", "/", "30", ")", "*", "float", "(", "maxval", "-", "minval", ")", "+", "minval", "\n", "img", "=", "op", "(", "img", ",", "val", ")", "\n", "\n", "", "return", "img", "", "", "", ""]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.augmentations.randaugment.ShearX": [[13, 18], ["img.transform", "random.random"], "function", ["None"], ["def", "ShearX", "(", "img", ",", "v", ")", ":", "# [-0.3, 0.3]", "\n", "    ", "assert", "-", "0.3", "<=", "v", "<=", "0.3", "\n", "if", "random", ".", "random", "(", ")", ">", "0.5", ":", "\n", "        ", "v", "=", "-", "v", "\n", "", "return", "img", ".", "transform", "(", "img", ".", "size", ",", "PIL", ".", "Image", ".", "AFFINE", ",", "(", "1", ",", "v", ",", "0", ",", "0", ",", "1", ",", "0", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.augmentations.randaugment.ShearY": [[20, 25], ["img.transform", "random.random"], "function", ["None"], ["", "def", "ShearY", "(", "img", ",", "v", ")", ":", "# [-0.3, 0.3]", "\n", "    ", "assert", "-", "0.3", "<=", "v", "<=", "0.3", "\n", "if", "random", ".", "random", "(", ")", ">", "0.5", ":", "\n", "        ", "v", "=", "-", "v", "\n", "", "return", "img", ".", "transform", "(", "img", ".", "size", ",", "PIL", ".", "Image", ".", "AFFINE", ",", "(", "1", ",", "0", ",", "0", ",", "v", ",", "1", ",", "0", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.augmentations.randaugment.TranslateX": [[27, 33], ["img.transform", "random.random"], "function", ["None"], ["", "def", "TranslateX", "(", "img", ",", "v", ")", ":", "# [-150, 150] => percentage: [-0.45, 0.45]", "\n", "    ", "assert", "-", "0.45", "<=", "v", "<=", "0.45", "\n", "if", "random", ".", "random", "(", ")", ">", "0.5", ":", "\n", "        ", "v", "=", "-", "v", "\n", "", "v", "=", "v", "*", "img", ".", "size", "[", "0", "]", "\n", "return", "img", ".", "transform", "(", "img", ".", "size", ",", "PIL", ".", "Image", ".", "AFFINE", ",", "(", "1", ",", "0", ",", "v", ",", "0", ",", "1", ",", "0", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.augmentations.randaugment.TranslateXabs": [[35, 40], ["img.transform", "random.random"], "function", ["None"], ["", "def", "TranslateXabs", "(", "img", ",", "v", ")", ":", "# [-150, 150] => percentage: [-0.45, 0.45]", "\n", "    ", "assert", "0", "<=", "v", "\n", "if", "random", ".", "random", "(", ")", ">", "0.5", ":", "\n", "        ", "v", "=", "-", "v", "\n", "", "return", "img", ".", "transform", "(", "img", ".", "size", ",", "PIL", ".", "Image", ".", "AFFINE", ",", "(", "1", ",", "0", ",", "v", ",", "0", ",", "1", ",", "0", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.augmentations.randaugment.TranslateY": [[42, 48], ["img.transform", "random.random"], "function", ["None"], ["", "def", "TranslateY", "(", "img", ",", "v", ")", ":", "# [-150, 150] => percentage: [-0.45, 0.45]", "\n", "    ", "assert", "-", "0.45", "<=", "v", "<=", "0.45", "\n", "if", "random", ".", "random", "(", ")", ">", "0.5", ":", "\n", "        ", "v", "=", "-", "v", "\n", "", "v", "=", "v", "*", "img", ".", "size", "[", "1", "]", "\n", "return", "img", ".", "transform", "(", "img", ".", "size", ",", "PIL", ".", "Image", ".", "AFFINE", ",", "(", "1", ",", "0", ",", "0", ",", "0", ",", "1", ",", "v", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.augmentations.randaugment.TranslateYabs": [[50, 55], ["img.transform", "random.random"], "function", ["None"], ["", "def", "TranslateYabs", "(", "img", ",", "v", ")", ":", "# [-150, 150] => percentage: [-0.45, 0.45]", "\n", "    ", "assert", "0", "<=", "v", "\n", "if", "random", ".", "random", "(", ")", ">", "0.5", ":", "\n", "        ", "v", "=", "-", "v", "\n", "", "return", "img", ".", "transform", "(", "img", ".", "size", ",", "PIL", ".", "Image", ".", "AFFINE", ",", "(", "1", ",", "0", ",", "0", ",", "0", ",", "1", ",", "v", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.augmentations.randaugment.Rotate": [[57, 62], ["img.rotate", "random.random"], "function", ["None"], ["", "def", "Rotate", "(", "img", ",", "v", ")", ":", "# [-30, 30]", "\n", "    ", "assert", "-", "30", "<=", "v", "<=", "30", "\n", "if", "random", ".", "random", "(", ")", ">", "0.5", ":", "\n", "        ", "v", "=", "-", "v", "\n", "", "return", "img", ".", "rotate", "(", "v", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.augmentations.randaugment.AutoContrast": [[64, 66], ["PIL.ImageOps.autocontrast", "PIL.ImageOps.autocontrast", "PIL.ImageOps.autocontrast", "PIL.ImageOps.autocontrast"], "function", ["None"], ["", "def", "AutoContrast", "(", "img", ",", "_", ")", ":", "\n", "    ", "return", "PIL", ".", "ImageOps", ".", "autocontrast", "(", "img", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.augmentations.randaugment.Invert": [[68, 70], ["PIL.ImageOps.invert", "PIL.ImageOps.invert", "PIL.ImageOps.invert", "PIL.ImageOps.invert"], "function", ["None"], ["", "def", "Invert", "(", "img", ",", "_", ")", ":", "\n", "    ", "return", "PIL", ".", "ImageOps", ".", "invert", "(", "img", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.augmentations.randaugment.Equalize": [[72, 74], ["PIL.ImageOps.equalize", "PIL.ImageOps.equalize", "PIL.ImageOps.equalize", "PIL.ImageOps.equalize"], "function", ["None"], ["", "def", "Equalize", "(", "img", ",", "_", ")", ":", "\n", "    ", "return", "PIL", ".", "ImageOps", ".", "equalize", "(", "img", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.augmentations.randaugment.Flip": [[76, 78], ["PIL.ImageOps.mirror", "PIL.ImageOps.mirror", "PIL.ImageOps.mirror", "PIL.ImageOps.mirror"], "function", ["None"], ["", "def", "Flip", "(", "img", ",", "_", ")", ":", "# not from the paper", "\n", "    ", "return", "PIL", ".", "ImageOps", ".", "mirror", "(", "img", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.augmentations.randaugment.Solarize": [[80, 83], ["PIL.ImageOps.solarize", "PIL.ImageOps.solarize", "PIL.ImageOps.solarize", "PIL.ImageOps.solarize"], "function", ["None"], ["", "def", "Solarize", "(", "img", ",", "v", ")", ":", "# [0, 256]", "\n", "    ", "assert", "0", "<=", "v", "<=", "256", "\n", "return", "PIL", ".", "ImageOps", ".", "solarize", "(", "img", ",", "v", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.augmentations.randaugment.SolarizeAdd": [[85, 92], ["numpy.array().astype", "numpy.clip", "img_np.astype.astype", "PIL.Image.fromarray", "PIL.ImageOps.solarize", "PIL.ImageOps.solarize", "PIL.ImageOps.solarize", "PIL.ImageOps.solarize", "numpy.array"], "function", ["None"], ["", "def", "SolarizeAdd", "(", "img", ",", "addition", "=", "0", ",", "threshold", "=", "128", ")", ":", "\n", "    ", "img_np", "=", "np", ".", "array", "(", "img", ")", ".", "astype", "(", "np", ".", "int", ")", "\n", "img_np", "=", "img_np", "+", "addition", "\n", "img_np", "=", "np", ".", "clip", "(", "img_np", ",", "0", ",", "255", ")", "\n", "img_np", "=", "img_np", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "img", "=", "Image", ".", "fromarray", "(", "img_np", ")", "\n", "return", "PIL", ".", "ImageOps", ".", "solarize", "(", "img", ",", "threshold", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.augmentations.randaugment.Posterize": [[94, 98], ["int", "max", "PIL.ImageOps.posterize", "PIL.ImageOps.posterize", "PIL.ImageOps.posterize", "PIL.ImageOps.posterize"], "function", ["None"], ["", "def", "Posterize", "(", "img", ",", "v", ")", ":", "# [4, 8]", "\n", "    ", "v", "=", "int", "(", "v", ")", "\n", "v", "=", "max", "(", "1", ",", "v", ")", "\n", "return", "PIL", ".", "ImageOps", ".", "posterize", "(", "img", ",", "v", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.augmentations.randaugment.Contrast": [[100, 103], ["PIL.ImageEnhance.Contrast().enhance", "PIL.ImageEnhance.Contrast().enhance", "PIL.ImageEnhance.Contrast().enhance", "PIL.ImageEnhance.Contrast().enhance", "PIL.ImageEnhance.Contrast", "PIL.ImageEnhance.Contrast", "PIL.ImageEnhance.Contrast", "PIL.ImageEnhance.Contrast"], "function", ["home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.augmentations.randaugment.Contrast", "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.augmentations.randaugment.Contrast", "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.augmentations.randaugment.Contrast", "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.augmentations.randaugment.Contrast"], ["", "def", "Contrast", "(", "img", ",", "v", ")", ":", "# [0.1,1.9]", "\n", "    ", "assert", "0.1", "<=", "v", "<=", "1.9", "\n", "return", "PIL", ".", "ImageEnhance", ".", "Contrast", "(", "img", ")", ".", "enhance", "(", "v", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.augmentations.randaugment.Color": [[105, 108], ["PIL.ImageEnhance.Color().enhance", "PIL.ImageEnhance.Color().enhance", "PIL.ImageEnhance.Color().enhance", "PIL.ImageEnhance.Color().enhance", "PIL.ImageEnhance.Color", "PIL.ImageEnhance.Color", "PIL.ImageEnhance.Color", "PIL.ImageEnhance.Color"], "function", ["home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.augmentations.randaugment.Color", "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.augmentations.randaugment.Color", "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.augmentations.randaugment.Color", "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.augmentations.randaugment.Color"], ["", "def", "Color", "(", "img", ",", "v", ")", ":", "# [0.1,1.9]", "\n", "    ", "assert", "0.1", "<=", "v", "<=", "1.9", "\n", "return", "PIL", ".", "ImageEnhance", ".", "Color", "(", "img", ")", ".", "enhance", "(", "v", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.augmentations.randaugment.Brightness": [[110, 113], ["PIL.ImageEnhance.Brightness().enhance", "PIL.ImageEnhance.Brightness().enhance", "PIL.ImageEnhance.Brightness().enhance", "PIL.ImageEnhance.Brightness().enhance", "PIL.ImageEnhance.Brightness", "PIL.ImageEnhance.Brightness", "PIL.ImageEnhance.Brightness", "PIL.ImageEnhance.Brightness"], "function", ["home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.augmentations.randaugment.Brightness", "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.augmentations.randaugment.Brightness", "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.augmentations.randaugment.Brightness", "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.augmentations.randaugment.Brightness"], ["", "def", "Brightness", "(", "img", ",", "v", ")", ":", "# [0.1,1.9]", "\n", "    ", "assert", "0.1", "<=", "v", "<=", "1.9", "\n", "return", "PIL", ".", "ImageEnhance", ".", "Brightness", "(", "img", ")", ".", "enhance", "(", "v", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.augmentations.randaugment.Sharpness": [[115, 118], ["PIL.ImageEnhance.Sharpness().enhance", "PIL.ImageEnhance.Sharpness().enhance", "PIL.ImageEnhance.Sharpness().enhance", "PIL.ImageEnhance.Sharpness().enhance", "PIL.ImageEnhance.Sharpness", "PIL.ImageEnhance.Sharpness", "PIL.ImageEnhance.Sharpness", "PIL.ImageEnhance.Sharpness"], "function", ["home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.augmentations.randaugment.Sharpness", "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.augmentations.randaugment.Sharpness", "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.augmentations.randaugment.Sharpness", "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.augmentations.randaugment.Sharpness"], ["", "def", "Sharpness", "(", "img", ",", "v", ")", ":", "# [0.1,1.9]", "\n", "    ", "assert", "0.1", "<=", "v", "<=", "1.9", "\n", "return", "PIL", ".", "ImageEnhance", ".", "Sharpness", "(", "img", ")", ".", "enhance", "(", "v", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.augmentations.randaugment.Cutout": [[120, 127], ["randaugment.CutoutAbs"], "function", ["home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.augmentations.randaugment.CutoutAbs"], ["", "def", "Cutout", "(", "img", ",", "v", ")", ":", "# [0, 60] => percentage: [0, 0.2]", "\n", "    ", "assert", "0.0", "<=", "v", "<=", "0.2", "\n", "if", "v", "<=", "0.", ":", "\n", "        ", "return", "img", "\n", "\n", "", "v", "=", "v", "*", "img", ".", "size", "[", "0", "]", "\n", "return", "CutoutAbs", "(", "img", ",", "v", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.augmentations.randaugment.CutoutAbs": [[129, 148], ["numpy.random.uniform", "numpy.random.uniform", "int", "int", "min", "min", "img.copy.copy", "PIL.ImageDraw.Draw().rectangle", "PIL.ImageDraw.Draw().rectangle", "PIL.ImageDraw.Draw().rectangle", "PIL.ImageDraw.Draw().rectangle", "max", "max", "PIL.ImageDraw.Draw", "PIL.ImageDraw.Draw", "PIL.ImageDraw.Draw", "PIL.ImageDraw.Draw"], "function", ["None"], ["", "def", "CutoutAbs", "(", "img", ",", "v", ")", ":", "# [0, 60] => percentage: [0, 0.2]", "\n", "# assert 0 <= v <= 20", "\n", "    ", "if", "v", "<", "0", ":", "\n", "        ", "return", "img", "\n", "", "w", ",", "h", "=", "img", ".", "size", "\n", "x0", "=", "np", ".", "random", ".", "uniform", "(", "w", ")", "\n", "y0", "=", "np", ".", "random", ".", "uniform", "(", "h", ")", "\n", "\n", "x0", "=", "int", "(", "max", "(", "0", ",", "x0", "-", "v", "/", "2.", ")", ")", "\n", "y0", "=", "int", "(", "max", "(", "0", ",", "y0", "-", "v", "/", "2.", ")", ")", "\n", "x1", "=", "min", "(", "w", ",", "x0", "+", "v", ")", "\n", "y1", "=", "min", "(", "h", ",", "y0", "+", "v", ")", "\n", "\n", "xy", "=", "(", "x0", ",", "y0", ",", "x1", ",", "y1", ")", "\n", "color", "=", "(", "125", ",", "123", ",", "114", ")", "\n", "# color = (0, 0, 0)", "\n", "img", "=", "img", ".", "copy", "(", ")", "\n", "PIL", ".", "ImageDraw", ".", "Draw", "(", "img", ")", ".", "rectangle", "(", "xy", ",", "color", ")", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.augmentations.randaugment.SamplePairing": [[150, 157], ["numpy.random.choice", "PIL.Image.fromarray", "PIL.Image.fromarray", "PIL.Image.fromarray", "PIL.Image.fromarray", "PIL.Image.blend", "PIL.Image.blend", "PIL.Image.blend", "PIL.Image.blend", "len"], "function", ["None"], ["", "def", "SamplePairing", "(", "imgs", ")", ":", "# [0, 0.4]", "\n", "    ", "def", "f", "(", "img1", ",", "v", ")", ":", "\n", "        ", "i", "=", "np", ".", "random", ".", "choice", "(", "len", "(", "imgs", ")", ")", "\n", "img2", "=", "PIL", ".", "Image", ".", "fromarray", "(", "imgs", "[", "i", "]", ")", "\n", "return", "PIL", ".", "Image", ".", "blend", "(", "img1", ",", "img2", ",", "v", ")", "\n", "\n", "", "return", "f", "\n", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.augmentations.randaugment.Identity": [[159, 161], ["None"], "function", ["None"], ["", "def", "Identity", "(", "img", ",", "v", ")", ":", "\n", "    ", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.augmentations.randaugment.augment_list": [[163, 206], ["None"], "function", ["None"], ["", "def", "augment_list", "(", ")", ":", "# 16 oeprations and their ranges", "\n", "# https://github.com/google-research/uda/blob/master/image/randaugment/policies.py#L57", "\n", "# l = [", "\n", "#     (Identity, 0., 1.0),", "\n", "#     (ShearX, 0., 0.3),  # 0", "\n", "#     (ShearY, 0., 0.3),  # 1", "\n", "#     (TranslateX, 0., 0.33),  # 2", "\n", "#     (TranslateY, 0., 0.33),  # 3", "\n", "#     (Rotate, 0, 30),  # 4", "\n", "#     (AutoContrast, 0, 1),  # 5", "\n", "#     (Invert, 0, 1),  # 6", "\n", "#     (Equalize, 0, 1),  # 7", "\n", "#     (Solarize, 0, 110),  # 8", "\n", "#     (Posterize, 4, 8),  # 9", "\n", "#     # (Contrast, 0.1, 1.9),  # 10", "\n", "#     (Color, 0.1, 1.9),  # 11", "\n", "#     (Brightness, 0.1, 1.9),  # 12", "\n", "#     (Sharpness, 0.1, 1.9),  # 13", "\n", "#     # (Cutout, 0, 0.2),  # 14", "\n", "#     # (SamplePairing(imgs), 0, 0.4),  # 15", "\n", "# ]", "\n", "\n", "# https://github.com/tensorflow/tpu/blob/8462d083dd89489a79e3200bcc8d4063bf362186/models/official/efficientnet/autoaugment.py#L505", "\n", "    ", "l", "=", "[", "\n", "(", "AutoContrast", ",", "0", ",", "1", ")", ",", "\n", "(", "Equalize", ",", "0", ",", "1", ")", ",", "\n", "(", "Invert", ",", "0", ",", "1", ")", ",", "\n", "(", "Rotate", ",", "0", ",", "30", ")", ",", "\n", "(", "Posterize", ",", "0", ",", "4", ")", ",", "\n", "(", "Solarize", ",", "0", ",", "256", ")", ",", "\n", "(", "SolarizeAdd", ",", "0", ",", "110", ")", ",", "\n", "(", "Color", ",", "0.1", ",", "1.9", ")", ",", "\n", "(", "Contrast", ",", "0.1", ",", "1.9", ")", ",", "\n", "(", "Brightness", ",", "0.1", ",", "1.9", ")", ",", "\n", "(", "Sharpness", ",", "0.1", ",", "1.9", ")", ",", "\n", "(", "ShearX", ",", "0.", ",", "0.3", ")", ",", "\n", "(", "ShearY", ",", "0.", ",", "0.3", ")", ",", "\n", "(", "CutoutAbs", ",", "0", ",", "40", ")", ",", "\n", "(", "TranslateXabs", ",", "0.", ",", "100", ")", ",", "\n", "(", "TranslateYabs", ",", "0.", ",", "100", ")", ",", "\n", "]", "\n", "\n", "return", "l", "\n", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.augmentations.randaugment.augment_list_svhn": [[207, 227], ["None"], "function", ["None"], ["", "def", "augment_list_svhn", "(", ")", ":", "# 16 oeprations and their ranges", "\n", "\n", "# https://github.com/tensorflow/tpu/blob/8462d083dd89489a79e3200bcc8d4063bf362186/models/official/efficientnet/autoaugment.py#L505", "\n", "    ", "l", "=", "[", "\n", "(", "AutoContrast", ",", "0", ",", "1", ")", ",", "\n", "(", "Equalize", ",", "0", ",", "1", ")", ",", "\n", "(", "Invert", ",", "0", ",", "1", ")", ",", "\n", "(", "Posterize", ",", "0", ",", "4", ")", ",", "\n", "(", "Solarize", ",", "0", ",", "256", ")", ",", "\n", "(", "SolarizeAdd", ",", "0", ",", "110", ")", ",", "\n", "(", "Color", ",", "0.1", ",", "1.9", ")", ",", "\n", "(", "Contrast", ",", "0.1", ",", "1.9", ")", ",", "\n", "(", "Brightness", ",", "0.1", ",", "1.9", ")", ",", "\n", "(", "Sharpness", ",", "0.1", ",", "1.9", ")", ",", "\n", "(", "ShearX", ",", "0.", ",", "0.3", ")", ",", "\n", "(", "ShearY", ",", "0.", ",", "0.3", ")", ",", "\n", "(", "CutoutAbs", ",", "0", ",", "40", ")", ",", "\n", "]", "\n", "\n", "return", "l", "\n", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.augmentations.__init__.get_transform": [[5, 139], ["torchvision.transforms.Compose", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "torchvision.transforms.Resize", "torchvision.transforms.RandomHorizontalFlip", "torchvision.transforms.RandomGrayscale", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "torchvision.transforms.Resize", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "torchvision.transforms.RandomCrop", "torchvision.transforms.RandomHorizontalFlip", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "torchvision.transforms.Resize", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "int", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "torchvision.transforms.Resize", "torchvision.transforms.RandomCrop", "torchvision.transforms.RandomHorizontalFlip", "torchvision.transforms.ToTensor", "torchvision.transforms.Resize", "torchvision.transforms.ToTensor", "np.array", "np.array", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "torchvision.transforms.RandomResizedCrop", "torchvision.transforms.RandomHorizontalFlip", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "torchvision.transforms.Resize", "torchvision.transforms.CenterCrop", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "torchvision.transforms.Compose", "transforms.Compose.transforms.insert", "torchvision.transforms.Compose", "torchvision.transforms.RandomCrop", "torchvision.transforms.RandomHorizontalFlip", "normalize", "cutout", "to_tensor", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "data.augmentations.randaugment.RandAugment", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "torchvision.transforms.Resize", "torchvision.transforms.RandomCrop", "torchvision.transforms.RandomHorizontalFlip", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "torchvision.transforms.Resize", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "int", "torchvision.transforms.Grayscale", "torchvision.transforms.Resize", "torchvision.transforms.RandomCrop", "torchvision.transforms.RandomHorizontalFlip", "torchvision.transforms.ToTensor", "torchvision.transforms.Resize", "torchvision.transforms.ToTensor"], "function", ["home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.augmentations.cut_out.normalize", "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.augmentations.cut_out.cutout", "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.augmentations.cut_out.to_tensor"], []], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.tests.openset_test_imagenet.MaxSoftmaxModel.__init__": [[20, 26], ["test.utils.ModelTemplate.__init__"], "methods", ["home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.loss.ARPLoss.ARPLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "base_model", ",", "use_softmax", "=", "False", ")", ":", "\n", "\n", "        ", "super", "(", "ModelTemplate", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "base_model", "=", "base_model", "\n", "self", ".", "use_softmax", "=", "use_softmax", "\n", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.tests.openset_test_imagenet.MaxSoftmaxModel.forward": [[27, 38], ["openset_test_imagenet.MaxSoftmaxModel.base_model", "torch.nn.Softmax", "openset_test_imagenet.MaxSoftmaxModel.max"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "imgs", ")", ":", "\n", "\n", "\n", "        ", "closed_set_preds", "=", "self", ".", "base_model", "(", "imgs", ")", "\n", "\n", "if", "self", ".", "use_softmax", ":", "\n", "            ", "closed_set_preds", "=", "torch", ".", "nn", ".", "Softmax", "(", "dim", "=", "-", "1", ")", "(", "closed_set_preds", ")", "\n", "\n", "", "open_set_preds", "=", "-", "closed_set_preds", ".", "max", "(", "dim", "=", "-", "1", ")", "[", "0", "]", "\n", "\n", "return", "closed_set_preds", ",", "open_set_preds", "\n", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.tests.openset_test_fine_grained.EnsembleModelEntropy.__init__": [[20, 28], ["test.utils.ModelTemplate.__init__", "torch.log().item", "torch.log", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.loss.ARPLoss.ARPLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "all_models", ",", "mode", "=", "'entropy'", ",", "num_classes", "=", "4", ",", "use_softmax", "=", "False", ")", ":", "\n", "\n", "        ", "super", "(", "ModelTemplate", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "all_models", "=", "all_models", "\n", "self", ".", "max_ent", "=", "torch", ".", "log", "(", "torch", ".", "Tensor", "(", "[", "num_classes", "]", ")", ")", ".", "item", "(", ")", "\n", "self", ".", "mode", "=", "mode", "\n", "self", ".", "use_softmax", "=", "use_softmax", "\n", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.tests.openset_test_fine_grained.EnsembleModelEntropy.entropy": [[29, 35], ["torch.log", "torch.sum"], "methods", ["None"], ["", "def", "entropy", "(", "self", ",", "preds", ")", ":", "\n", "\n", "        ", "logp", "=", "torch", ".", "log", "(", "preds", "+", "1e-5", ")", "\n", "entropy", "=", "torch", ".", "sum", "(", "-", "preds", "*", "logp", ",", "dim", "=", "-", "1", ")", "\n", "\n", "return", "entropy", "\n", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.tests.openset_test_fine_grained.EnsembleModelEntropy.forward": [[36, 60], ["torch.stack().mean", "m", "all_closed_set_preds.append", "openset_test_fine_grained.EnsembleModelEntropy.entropy", "torch.stack", "torch.nn.Softmax", "m.max"], "methods", ["home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.tests.openset_test.EnsembleModelEntropy.entropy"], ["", "def", "forward", "(", "self", ",", "imgs", ")", ":", "\n", "\n", "        ", "all_closed_set_preds", "=", "[", "]", "\n", "\n", "for", "m", "in", "self", ".", "all_models", ":", "\n", "\n", "            ", "closed_set_preds", "=", "m", "(", "imgs", ",", "return_features", "=", "False", ")", "\n", "\n", "if", "self", ".", "use_softmax", ":", "\n", "                ", "closed_set_preds", "=", "torch", ".", "nn", ".", "Softmax", "(", "dim", "=", "-", "1", ")", "(", "closed_set_preds", ")", "\n", "\n", "", "all_closed_set_preds", ".", "append", "(", "closed_set_preds", ")", "\n", "\n", "", "closed_set_preds", "=", "torch", ".", "stack", "(", "all_closed_set_preds", ")", ".", "mean", "(", "dim", "=", "0", ")", "\n", "\n", "if", "self", ".", "mode", "==", "'entropy'", ":", "\n", "            ", "open_set_preds", "=", "self", ".", "entropy", "(", "closed_set_preds", ")", "\n", "", "elif", "self", ".", "mode", "==", "'max_softmax'", ":", "\n", "            ", "open_set_preds", "=", "-", "closed_set_preds", ".", "max", "(", "dim", "=", "-", "1", ")", "[", "0", "]", "\n", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "", "return", "closed_set_preds", ",", "open_set_preds", "\n", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.tests.openset_test_fine_grained.load_models": [[61, 79], ["models.model_utils.get_model.to", "models.model_utils.get_model.eval", "models.model_utils.get_model", "models.model_utils.get_model.load_state_dict", "models.model_utils.get_model", "utils.utils.strip_state_dict", "models.model_utils.get_model.load_state_dict", "torch.load", "torch.load"], "function", ["home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.models.model_utils.get_model", "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.models.model_utils.Classifier32ARPLWrapper.load_state_dict", "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.models.model_utils.get_model", "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.utils.utils.strip_state_dict", "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.models.model_utils.Classifier32ARPLWrapper.load_state_dict"], ["", "", "def", "load_models", "(", "path", ",", "args", ")", ":", "\n", "\n", "    ", "if", "args", ".", "loss", "==", "'ARPLoss'", ":", "\n", "\n", "        ", "model", "=", "get_model", "(", "args", ",", "wrapper_class", "=", "None", ",", "evaluate", "=", "True", ")", "\n", "state_dict_list", "=", "[", "torch", ".", "load", "(", "p", ")", "for", "p", "in", "path", "]", "\n", "model", ".", "load_state_dict", "(", "state_dict_list", ")", "\n", "\n", "", "else", ":", "\n", "\n", "        ", "model", "=", "get_model", "(", "args", ",", "wrapper_class", "=", "TimmResNetWrapper", ")", "\n", "state_dict", "=", "strip_state_dict", "(", "torch", ".", "load", "(", "path", "[", "0", "]", ")", ")", "\n", "model", ".", "load_state_dict", "(", "state_dict", ")", "\n", "\n", "", "model", "=", "model", ".", "to", "(", "device", ")", "\n", "model", ".", "eval", "(", ")", "\n", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.tests.openset_test_fine_grained.blockPrint": [[81, 83], ["open"], "function", ["None"], ["", "def", "blockPrint", "(", ")", ":", "\n", "    ", "sys", ".", "stdout", "=", "open", "(", "os", ".", "devnull", ",", "'w'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.tests.openset_test_fine_grained.enablePrint": [[85, 87], ["None"], "function", ["None"], ["", "def", "enablePrint", "(", ")", ":", "\n", "    ", "sys", ".", "stdout", "=", "sys", ".", "__stdout__", "\n", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.tests.openset_test.EnsembleModelEntropy.__init__": [[19, 27], ["test.utils.ModelTemplate.__init__", "torch.log().item", "torch.log", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.loss.ARPLoss.ARPLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "all_models", ",", "mode", "=", "'entropy'", ",", "num_classes", "=", "4", ",", "use_softmax", "=", "False", ")", ":", "\n", "\n", "        ", "super", "(", "ModelTemplate", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "all_models", "=", "all_models", "\n", "self", ".", "max_ent", "=", "torch", ".", "log", "(", "torch", ".", "Tensor", "(", "[", "num_classes", "]", ")", ")", ".", "item", "(", ")", "\n", "self", ".", "mode", "=", "mode", "\n", "self", ".", "use_softmax", "=", "use_softmax", "\n", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.tests.openset_test.EnsembleModelEntropy.entropy": [[28, 34], ["torch.log", "torch.sum"], "methods", ["None"], ["", "def", "entropy", "(", "self", ",", "preds", ")", ":", "\n", "\n", "        ", "logp", "=", "torch", ".", "log", "(", "preds", "+", "1e-5", ")", "\n", "entropy", "=", "torch", ".", "sum", "(", "-", "preds", "*", "logp", ",", "dim", "=", "-", "1", ")", "\n", "\n", "return", "entropy", "\n", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.tests.openset_test.EnsembleModelEntropy.forward": [[35, 59], ["torch.stack().mean", "m", "all_closed_set_preds.append", "openset_test.EnsembleModelEntropy.entropy", "torch.stack", "torch.nn.Softmax", "m.max"], "methods", ["home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.tests.openset_test.EnsembleModelEntropy.entropy"], ["", "def", "forward", "(", "self", ",", "imgs", ")", ":", "\n", "\n", "        ", "all_closed_set_preds", "=", "[", "]", "\n", "\n", "for", "m", "in", "self", ".", "all_models", ":", "\n", "\n", "            ", "closed_set_preds", "=", "m", "(", "imgs", ",", "return_feature", "=", "False", ")", "\n", "\n", "if", "self", ".", "use_softmax", ":", "\n", "                ", "closed_set_preds", "=", "torch", ".", "nn", ".", "Softmax", "(", "dim", "=", "-", "1", ")", "(", "closed_set_preds", ")", "\n", "\n", "", "all_closed_set_preds", ".", "append", "(", "closed_set_preds", ")", "\n", "\n", "", "closed_set_preds", "=", "torch", ".", "stack", "(", "all_closed_set_preds", ")", ".", "mean", "(", "dim", "=", "0", ")", "\n", "\n", "if", "self", ".", "mode", "==", "'entropy'", ":", "\n", "            ", "open_set_preds", "=", "self", ".", "entropy", "(", "closed_set_preds", ")", "\n", "", "elif", "self", ".", "mode", "==", "'max_softmax'", ":", "\n", "            ", "open_set_preds", "=", "-", "closed_set_preds", ".", "max", "(", "dim", "=", "-", "1", ")", "[", "0", "]", "\n", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "", "return", "closed_set_preds", ",", "open_set_preds", "\n", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.tests.openset_test.load_models": [[60, 78], ["models.model_utils.get_model", "model.to.to", "model.to.eval", "model.to.load_state_dict", "utils.utils.strip_state_dict", "model.to.load_state_dict", "torch.load", "torch.load"], "function", ["home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.models.model_utils.get_model", "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.models.model_utils.Classifier32ARPLWrapper.load_state_dict", "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.utils.utils.strip_state_dict", "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.models.model_utils.Classifier32ARPLWrapper.load_state_dict"], ["", "", "def", "load_models", "(", "path", ",", "args", ")", ":", "\n", "\n", "    ", "model", "=", "get_model", "(", "args", ",", "evaluate", "=", "True", ")", "\n", "\n", "if", "args", ".", "loss", "==", "'ARPLoss'", ":", "\n", "\n", "        ", "state_dict_list", "=", "[", "torch", ".", "load", "(", "p", ")", "for", "p", "in", "path", "]", "\n", "model", ".", "load_state_dict", "(", "state_dict_list", ")", "\n", "\n", "", "else", ":", "\n", "\n", "        ", "state_dict", "=", "strip_state_dict", "(", "torch", ".", "load", "(", "path", "[", "0", "]", ")", ")", "\n", "model", ".", "load_state_dict", "(", "state_dict", ")", "\n", "\n", "", "model", "=", "model", ".", "to", "(", "device", ")", "\n", "model", ".", "eval", "(", ")", "\n", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.tests.openset_test.blockPrint": [[81, 83], ["open"], "function", ["None"], ["", "def", "blockPrint", "(", ")", ":", "\n", "    ", "sys", ".", "stdout", "=", "open", "(", "os", ".", "devnull", ",", "'w'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.tests.openset_test.enablePrint": [[86, 88], ["None"], "function", ["None"], ["", "def", "enablePrint", "(", ")", ":", "\n", "    ", "sys", ".", "stdout", "=", "sys", ".", "__stdout__", "\n", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.ARPL.osr.get_optimizer": [[88, 110], ["torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam"], "function", ["None"], ["def", "get_optimizer", "(", "args", ",", "params_list", ")", ":", "\n", "\n", "    ", "if", "args", ".", "optim", "is", "None", ":", "\n", "\n", "        ", "if", "options", "[", "'dataset'", "]", "==", "'tinyimagenet'", ":", "\n", "            ", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "params_list", ",", "lr", "=", "args", ".", "lr", ")", "\n", "", "else", ":", "\n", "            ", "optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "params_list", ",", "lr", "=", "args", ".", "lr", ",", "momentum", "=", "0.9", ",", "weight_decay", "=", "args", ".", "weight_decay", ")", "\n", "\n", "", "", "elif", "args", ".", "optim", "==", "'sgd'", ":", "\n", "\n", "        ", "optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "params_list", ",", "lr", "=", "args", ".", "lr", ",", "momentum", "=", "0.9", ",", "weight_decay", "=", "args", ".", "weight_decay", ")", "\n", "\n", "", "elif", "args", ".", "optim", "==", "'adam'", ":", "\n", "\n", "        ", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "params_list", ",", "lr", "=", "args", ".", "lr", ")", "\n", "\n", "", "else", ":", "\n", "\n", "        ", "raise", "NotImplementedError", "\n", "\n", "", "return", "optimizer", "\n", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.ARPL.osr.get_mean_lr": [[112, 114], ["torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean", "torch.mean", "torch.mean", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "function", ["None"], ["", "def", "get_mean_lr", "(", "optimizer", ")", ":", "\n", "    ", "return", "torch", ".", "mean", "(", "torch", ".", "Tensor", "(", "[", "param_group", "[", "'lr'", "]", "for", "param_group", "in", "optimizer", ".", "param_groups", "]", ")", ")", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.ARPL.osr.main_worker": [[117, 267], ["torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "print", "options.update", "importlib.import_module", "os.path.join", "osr.get_optimizer", "utils.schedulers.get_scheduler", "time.time", "range", "round", "str", "print", "print", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "print", "models.model_utils.get_model", "print", "torch.FloatTensor().normal_", "torch.FloatTensor().normal_", "torch.FloatTensor().normal_", "torch.BCELoss", "getattr", "torch.DataParallel().cuda", "criterion.cuda.cuda", "os.path.exists", "os.makedirs", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "print", "methods.ARPL.core.train", "args.writer.add_scalar", "datetime.timedelta", "methods.ARPL.arpl_models.arpl_models.classifier32ABN", "methods.ARPL.arpl_models.gan.Generator", "methods.ARPL.arpl_models.gan.Discriminator", "methods.ARPL.arpl_models.gan.Generator32", "methods.ARPL.arpl_models.gan.Discriminator32", "torch.DataParallel().cuda", "torch.DataParallel().cuda", "torch.FloatTensor().normal_.cuda", "methods.ARPL.arpl_models.arpl_models.classifier32ABN.parameters", "criterion.cuda.parameters", "nn.DataParallel().cuda.parameters", "nn.DataParallel().cuda.parameters", "methods.ARPL.core.train_cs", "print", "methods.ARPL.core.test", "print", "args.writer.add_scalar", "args.writer.add_scalar", "osr.get_mean_lr", "utils.schedulers.get_scheduler.step", "time.time", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.DataParallel", "methods.ARPL.arpl_utils.save_networks", "utils.schedulers.get_scheduler.step", "utils.schedulers.get_scheduler.step", "len", "torch.DataParallel", "torch.DataParallel", "file_name.split", "range", "range", "len", "len", "options[].split", "options[].split"], "function", ["home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.ARPL.arpl_utils.AverageMeter.update", "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.ARPL.osr.get_optimizer", "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.utils.schedulers.get_scheduler", "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.models.model_utils.get_model", "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.core.train.train", "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.arpl_models.gan.Generator", "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.arpl_models.gan.Discriminator", "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.arpl_models.gan.Generator32", "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.arpl_models.gan.Discriminator32", "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.core.train.train_cs", "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.core.test.test", "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.ARPL.osr.get_mean_lr", "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.utils.schedulers.CosineAnnealingWarmupRestarts_New.step", "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.ARPL.arpl_utils.save_networks", "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.utils.schedulers.CosineAnnealingWarmupRestarts_New.step", "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.utils.schedulers.CosineAnnealingWarmupRestarts_New.step"], ["", "def", "main_worker", "(", "options", ",", "args", ")", ":", "\n", "\n", "    ", "torch", ".", "manual_seed", "(", "options", "[", "'seed'", "]", ")", "\n", "os", ".", "environ", "[", "'CUDA_VISIBLE_DEVICES'", "]", "=", "options", "[", "'gpu'", "]", "\n", "use_gpu", "=", "torch", ".", "cuda", ".", "is_available", "(", ")", "\n", "if", "options", "[", "'use_cpu'", "]", ":", "use_gpu", "=", "False", "\n", "\n", "if", "use_gpu", ":", "\n", "        ", "print", "(", "\"Currently using GPU: {}\"", ".", "format", "(", "options", "[", "'gpu'", "]", ")", ")", "\n", "cudnn", ".", "benchmark", "=", "False", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "options", "[", "'seed'", "]", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "\"Currently using CPU\"", ")", "\n", "\n", "# -----------------------------", "\n", "# DATALOADERS", "\n", "# -----------------------------", "\n", "", "trainloader", "=", "dataloaders", "[", "'train'", "]", "\n", "testloader", "=", "dataloaders", "[", "'val'", "]", "\n", "outloader", "=", "dataloaders", "[", "'test_unknown'", "]", "\n", "\n", "# -----------------------------", "\n", "# MODEL", "\n", "# -----------------------------", "\n", "print", "(", "\"Creating model: {}\"", ".", "format", "(", "options", "[", "'model'", "]", ")", ")", "\n", "if", "options", "[", "'cs'", "]", "and", "args", ".", "loss", "==", "'ARPLoss'", ":", "\n", "        ", "if", "args", ".", "model", "==", "'classifier32'", ":", "\n", "            ", "net", "=", "classifier32ABN", "(", "num_classes", "=", "len", "(", "args", ".", "train_classes", ")", ",", "feat_dim", "=", "args", ".", "feat_dim", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "", "", "else", ":", "\n", "        ", "if", "args", ".", "model", "==", "'timm_resnet50_pretrained'", ":", "\n", "            ", "wrapper_class", "=", "TimmResNetWrapper", "\n", "", "else", ":", "\n", "            ", "wrapper_class", "=", "None", "\n", "", "net", "=", "get_model", "(", "args", ",", "wrapper_class", "=", "wrapper_class", ")", "\n", "\n", "", "feat_dim", "=", "args", ".", "feat_dim", "\n", "\n", "# -----------------------------", "\n", "# --CS MODEL AND LOSS", "\n", "# -----------------------------", "\n", "if", "options", "[", "'cs'", "]", "and", "args", ".", "loss", "==", "'ARPLoss'", ":", "\n", "        ", "print", "(", "\"Creating GAN\"", ")", "\n", "nz", ",", "ns", "=", "options", "[", "'nz'", "]", ",", "1", "\n", "if", "args", ".", "image_size", ">=", "64", ":", "\n", "            ", "netG", "=", "gan", ".", "Generator", "(", "1", ",", "nz", ",", "64", ",", "3", ")", "\n", "netD", "=", "gan", ".", "Discriminator", "(", "1", ",", "3", ",", "64", ")", "\n", "", "else", ":", "\n", "            ", "netG", "=", "gan", ".", "Generator32", "(", "1", ",", "nz", ",", "64", ",", "3", ")", "\n", "netD", "=", "gan", ".", "Discriminator32", "(", "1", ",", "3", ",", "64", ")", "\n", "", "fixed_noise", "=", "torch", ".", "FloatTensor", "(", "64", ",", "nz", ",", "1", ",", "1", ")", ".", "normal_", "(", "0", ",", "1", ")", "\n", "criterionD", "=", "nn", ".", "BCELoss", "(", ")", "\n", "\n", "# Loss", "\n", "", "options", ".", "update", "(", "\n", "{", "\n", "'feat_dim'", ":", "feat_dim", ",", "\n", "'use_gpu'", ":", "use_gpu", "\n", "}", "\n", ")", "\n", "\n", "# -----------------------------", "\n", "# GET LOSS", "\n", "# -----------------------------", "\n", "Loss", "=", "importlib", ".", "import_module", "(", "'methods.ARPL.loss.'", "+", "options", "[", "'loss'", "]", ")", "\n", "criterion", "=", "getattr", "(", "Loss", ",", "options", "[", "'loss'", "]", ")", "(", "**", "options", ")", "\n", "\n", "# -----------------------------", "\n", "# PREPARE EXPERIMENT", "\n", "# -----------------------------", "\n", "if", "use_gpu", ":", "\n", "        ", "net", "=", "nn", ".", "DataParallel", "(", "net", ")", ".", "cuda", "(", ")", "\n", "criterion", "=", "criterion", ".", "cuda", "(", ")", "\n", "if", "options", "[", "'cs'", "]", "and", "args", ".", "loss", "==", "'ARPLoss'", ":", "\n", "            ", "netG", "=", "nn", ".", "DataParallel", "(", "netG", ",", "device_ids", "=", "[", "i", "for", "i", "in", "range", "(", "len", "(", "options", "[", "'gpu'", "]", ".", "split", "(", "','", ")", ")", ")", "]", ")", ".", "cuda", "(", ")", "\n", "netD", "=", "nn", ".", "DataParallel", "(", "netD", ",", "device_ids", "=", "[", "i", "for", "i", "in", "range", "(", "len", "(", "options", "[", "'gpu'", "]", ".", "split", "(", "','", ")", ")", ")", "]", ")", ".", "cuda", "(", ")", "\n", "fixed_noise", ".", "cuda", "(", ")", "\n", "\n", "", "", "model_path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "log_dir", ",", "'arpl_models'", ",", "options", "[", "'dataset'", "]", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "model_path", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "model_path", ")", "\n", "\n", "", "params_list", "=", "[", "{", "'params'", ":", "net", ".", "parameters", "(", ")", "}", ",", "\n", "{", "'params'", ":", "criterion", ".", "parameters", "(", ")", "}", "]", "\n", "\n", "# Get base network and criterion", "\n", "optimizer", "=", "get_optimizer", "(", "args", "=", "args", ",", "params_list", "=", "params_list", ")", "\n", "\n", "if", "options", "[", "'cs'", "]", "and", "args", ".", "loss", "==", "'ARPLoss'", ":", "\n", "        ", "optimizerD", "=", "torch", ".", "optim", ".", "Adam", "(", "netD", ".", "parameters", "(", ")", ",", "lr", "=", "options", "[", "'gan_lr'", "]", ",", "betas", "=", "(", "0.5", ",", "0.999", ")", ")", "\n", "optimizerG", "=", "torch", ".", "optim", ".", "Adam", "(", "netG", ".", "parameters", "(", ")", ",", "lr", "=", "options", "[", "'gan_lr'", "]", ",", "betas", "=", "(", "0.5", ",", "0.999", ")", ")", "\n", "\n", "# -----------------------------", "\n", "# GET SCHEDULER", "\n", "# ----------------------------", "\n", "", "scheduler", "=", "get_scheduler", "(", "optimizer", ",", "args", ")", "\n", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "\n", "# -----------------------------", "\n", "# TRAIN", "\n", "# -----------------------------", "\n", "for", "epoch", "in", "range", "(", "options", "[", "'max_epoch'", "]", ")", ":", "\n", "        ", "print", "(", "\"==> Epoch {}/{}\"", ".", "format", "(", "epoch", "+", "1", ",", "options", "[", "'max_epoch'", "]", ")", ")", "\n", "\n", "if", "options", "[", "'cs'", "]", "and", "args", ".", "loss", "==", "'ARPLoss'", ":", "\n", "            ", "train_cs", "(", "net", ",", "netD", ",", "netG", ",", "criterion", ",", "criterionD", ",", "\n", "optimizer", ",", "optimizerD", ",", "optimizerG", ",", "\n", "trainloader", ",", "epoch", "=", "epoch", ",", "**", "options", ")", "\n", "\n", "", "train", "(", "net", ",", "criterion", ",", "optimizer", ",", "trainloader", ",", "epoch", "=", "epoch", ",", "**", "options", ")", "\n", "\n", "if", "options", "[", "'eval_freq'", "]", ">", "0", "and", "(", "epoch", "+", "1", ")", "%", "options", "[", "'eval_freq'", "]", "==", "0", "or", "(", "epoch", "+", "1", ")", "==", "options", "[", "'max_epoch'", "]", ":", "\n", "            ", "print", "(", "\"==> Test\"", ",", "options", "[", "'loss'", "]", ")", "\n", "results", "=", "test", "(", "net", ",", "criterion", ",", "testloader", ",", "outloader", ",", "epoch", "=", "epoch", ",", "**", "options", ")", "\n", "print", "(", "\"Epoch {}: Acc (%): {:.3f}\\t AUROC (%): {:.3f}\\t OSCR (%): {:.3f}\\t\"", ".", "format", "(", "epoch", ",", "\n", "results", "[", "'ACC'", "]", ",", "\n", "results", "[", "'AUROC'", "]", ",", "\n", "results", "[", "'OSCR'", "]", ")", ")", "\n", "if", "epoch", "%", "options", "[", "'checkpt_freq'", "]", "==", "0", "or", "epoch", "==", "options", "[", "'max_epoch'", "]", "-", "1", ":", "\n", "                ", "save_networks", "(", "net", ",", "model_path", ",", "file_name", ".", "split", "(", "'.'", ")", "[", "0", "]", "+", "'_{}'", ".", "format", "(", "epoch", ")", ",", "\n", "options", "[", "'loss'", "]", ",", "\n", "criterion", "=", "criterion", ")", "\n", "\n", "# ----------------", "\n", "# LOG", "\n", "# ----------------", "\n", "", "args", ".", "writer", ".", "add_scalar", "(", "'Test Acc Top 1'", ",", "results", "[", "'ACC'", "]", ",", "epoch", ")", "\n", "args", ".", "writer", ".", "add_scalar", "(", "'AUROC'", ",", "results", "[", "'AUROC'", "]", ",", "epoch", ")", "\n", "\n", "", "args", ".", "writer", ".", "add_scalar", "(", "'LR'", ",", "get_mean_lr", "(", "optimizer", ")", ",", "epoch", ")", "\n", "\n", "# -----------------------------", "\n", "# STEP SCHEDULER", "\n", "# ----------------------------", "\n", "if", "args", ".", "scheduler", "==", "'plateau'", "or", "args", ".", "scheduler", "==", "'warm_restarts_plateau'", ":", "\n", "            ", "scheduler", ".", "step", "(", "results", "[", "'ACC'", "]", ",", "epoch", ")", "\n", "", "elif", "args", ".", "scheduler", "==", "'multi_step'", ":", "\n", "            ", "scheduler", ".", "step", "(", ")", "\n", "", "else", ":", "\n", "            ", "scheduler", ".", "step", "(", "epoch", "=", "epoch", ")", "\n", "\n", "\n", "", "", "elapsed", "=", "round", "(", "time", ".", "time", "(", ")", "-", "start_time", ")", "\n", "elapsed", "=", "str", "(", "datetime", ".", "timedelta", "(", "seconds", "=", "elapsed", ")", ")", "\n", "print", "(", "\"Finished. Total elapsed time (h:m:s): {}\"", ".", "format", "(", "elapsed", ")", ")", "\n", "\n", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.ARPL.arpl_utils.AverageMeter.__init__": [[23, 25], ["arpl_utils.AverageMeter.reset"], "methods", ["home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.ARPL.arpl_utils.AverageMeter.reset"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.ARPL.arpl_utils.AverageMeter.reset": [[26, 31], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "val", "=", "0", "\n", "self", ".", "avg", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.ARPL.arpl_utils.AverageMeter.update": [[32, 37], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "        ", "self", ".", "val", "=", "val", "\n", "self", ".", "sum", "+=", "val", "*", "n", "\n", "self", ".", "count", "+=", "n", "\n", "self", ".", "avg", "=", "self", ".", "sum", "/", "self", ".", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.ARPL.arpl_utils.Logger.__init__": [[44, 50], ["arpl_utils.mkdir_if_missing", "open", "os.path.dirname", "os.path.dirname", "os.path.dirname", "os.path.dirname"], "methods", ["home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.ARPL.arpl_utils.mkdir_if_missing"], ["def", "__init__", "(", "self", ",", "fpath", "=", "None", ")", ":", "\n", "        ", "self", ".", "console", "=", "sys", ".", "stdout", "\n", "self", ".", "file", "=", "None", "\n", "if", "fpath", "is", "not", "None", ":", "\n", "            ", "mkdir_if_missing", "(", "os", ".", "path", ".", "dirname", "(", "fpath", ")", ")", "\n", "self", ".", "file", "=", "open", "(", "fpath", ",", "'w'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.ARPL.arpl_utils.Logger.__del__": [[51, 53], ["arpl_utils.Logger.close"], "methods", ["home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.ARPL.arpl_utils.Logger.close"], ["", "", "def", "__del__", "(", "self", ")", ":", "\n", "        ", "self", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.ARPL.arpl_utils.Logger.__enter__": [[54, 56], ["None"], "methods", ["None"], ["", "def", "__enter__", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.ARPL.arpl_utils.Logger.__exit__": [[57, 59], ["arpl_utils.Logger.close"], "methods", ["home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.ARPL.arpl_utils.Logger.close"], ["", "def", "__exit__", "(", "self", ",", "*", "args", ")", ":", "\n", "        ", "self", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.ARPL.arpl_utils.Logger.write": [[60, 64], ["arpl_utils.Logger.console.write", "arpl_utils.Logger.file.write"], "methods", ["home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.ARPL.arpl_utils.Logger.write", "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.ARPL.arpl_utils.Logger.write"], ["", "def", "write", "(", "self", ",", "msg", ")", ":", "\n", "        ", "self", ".", "console", ".", "write", "(", "msg", ")", "\n", "if", "self", ".", "file", "is", "not", "None", ":", "\n", "            ", "self", ".", "file", ".", "write", "(", "msg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.ARPL.arpl_utils.Logger.flush": [[65, 70], ["arpl_utils.Logger.console.flush", "arpl_utils.Logger.file.flush", "os.fsync", "os.fsync", "os.fsync", "os.fsync", "arpl_utils.Logger.file.fileno"], "methods", ["home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.ARPL.arpl_utils.Logger.flush", "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.ARPL.arpl_utils.Logger.flush"], ["", "", "def", "flush", "(", "self", ")", ":", "\n", "        ", "self", ".", "console", ".", "flush", "(", ")", "\n", "if", "self", ".", "file", "is", "not", "None", ":", "\n", "            ", "self", ".", "file", ".", "flush", "(", ")", "\n", "os", ".", "fsync", "(", "self", ".", "file", ".", "fileno", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.ARPL.arpl_utils.Logger.close": [[71, 75], ["arpl_utils.Logger.console.close", "arpl_utils.Logger.file.close"], "methods", ["home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.ARPL.arpl_utils.Logger.close", "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.ARPL.arpl_utils.Logger.close"], ["", "", "def", "close", "(", "self", ")", ":", "\n", "        ", "self", ".", "console", ".", "close", "(", ")", "\n", "if", "self", ".", "file", "is", "not", "None", ":", "\n", "            ", "self", ".", "file", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.ARPL.arpl_utils.mkdir_if_missing": [[10, 17], ["os.exists", "os.makedirs", "os.makedirs"], "function", ["None"], ["def", "mkdir_if_missing", "(", "directory", ")", ":", "\n", "    ", "if", "not", "osp", ".", "exists", "(", "directory", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "os", ".", "makedirs", "(", "directory", ")", "\n", "", "except", "OSError", "as", "e", ":", "\n", "            ", "if", "e", ".", "errno", "!=", "errno", ".", "EEXIST", ":", "\n", "                ", "raise", "\n", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.ARPL.arpl_utils.save_networks": [[76, 85], ["arpl_utils.mkdir_if_missing", "networks.state_dict", "torch.save", "os.join", "criterion.state_dict", "torch.save"], "function", ["home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.ARPL.arpl_utils.mkdir_if_missing"], ["", "", "", "def", "save_networks", "(", "networks", ",", "result_dir", ",", "name", "=", "''", ",", "loss", "=", "''", ",", "criterion", "=", "None", ")", ":", "\n", "    ", "mkdir_if_missing", "(", "osp", ".", "join", "(", "result_dir", ",", "'checkpoints'", ")", ")", "\n", "weights", "=", "networks", ".", "state_dict", "(", ")", "\n", "filename", "=", "'{}/checkpoints/{}_{}.pth'", ".", "format", "(", "result_dir", ",", "name", ",", "loss", ")", "\n", "torch", ".", "save", "(", "weights", ",", "filename", ")", "\n", "if", "criterion", ":", "\n", "        ", "weights", "=", "criterion", ".", "state_dict", "(", ")", "\n", "filename", "=", "'{}/checkpoints/{}_{}_criterion.pth'", ".", "format", "(", "result_dir", ",", "name", ",", "loss", ")", "\n", "torch", ".", "save", "(", "weights", ",", "filename", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.ARPL.arpl_utils.save_GAN": [[86, 94], ["arpl_utils.mkdir_if_missing", "netG.state_dict", "torch.save", "netD.state_dict", "torch.save", "os.join"], "function", ["home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.ARPL.arpl_utils.mkdir_if_missing"], ["", "", "def", "save_GAN", "(", "netG", ",", "netD", ",", "result_dir", ",", "name", "=", "''", ")", ":", "\n", "    ", "mkdir_if_missing", "(", "osp", ".", "join", "(", "result_dir", ",", "'checkpoints'", ")", ")", "\n", "weights", "=", "netG", ".", "state_dict", "(", ")", "\n", "filename", "=", "'{}/{}_G.pth'", ".", "format", "(", "result_dir", ",", "name", ")", "\n", "torch", ".", "save", "(", "weights", ",", "filename", ")", "\n", "weights", "=", "netD", ".", "state_dict", "(", ")", "\n", "filename", "=", "'{}/{}_D.pth'", ".", "format", "(", "result_dir", ",", "name", ")", "\n", "torch", ".", "save", "(", "weights", ",", "filename", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.ARPL.arpl_utils.load_networks": [[95, 105], ["networks.state_dict", "networks.load_state_dict", "torch.load", "criterion.state_dict", "criterion.load_state_dict", "torch.load"], "function", ["home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.models.model_utils.Classifier32ARPLWrapper.load_state_dict", "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.models.model_utils.Classifier32ARPLWrapper.load_state_dict"], ["", "def", "load_networks", "(", "networks", ",", "result_dir", ",", "name", "=", "''", ",", "loss", "=", "''", ",", "criterion", "=", "None", ")", ":", "\n", "    ", "weights", "=", "networks", ".", "state_dict", "(", ")", "\n", "filename", "=", "'{}/checkpoints/{}_{}.pth'", ".", "format", "(", "result_dir", ",", "name", ",", "loss", ")", "\n", "networks", ".", "load_state_dict", "(", "torch", ".", "load", "(", "filename", ")", ")", "\n", "if", "criterion", ":", "\n", "        ", "weights", "=", "criterion", ".", "state_dict", "(", ")", "\n", "filename", "=", "'{}/checkpoints/{}_{}_criterion.pth'", ".", "format", "(", "result_dir", ",", "name", ",", "loss", ")", "\n", "criterion", ".", "load_state_dict", "(", "torch", ".", "load", "(", "filename", ")", ")", "\n", "\n", "", "return", "networks", ",", "criterion", "", "", ""]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.arpl_models.arpl_models.ConvNet.__init__": [[8, 28], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.PReLU", "torch.PReLU", "torch.Conv2d", "torch.Conv2d", "torch.PReLU", "torch.PReLU", "torch.Conv2d", "torch.Conv2d", "torch.PReLU", "torch.PReLU", "torch.Conv2d", "torch.Conv2d", "torch.PReLU", "torch.PReLU", "torch.Conv2d", "torch.Conv2d", "torch.PReLU", "torch.PReLU", "torch.Conv2d", "torch.Conv2d", "torch.PReLU", "torch.PReLU", "torch.Linear", "torch.Linear", "torch.PReLU", "torch.PReLU", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.loss.ARPLoss.ARPLoss.__init__"], ["def", "__init__", "(", "self", ",", "num_classes", ")", ":", "\n", "        ", "super", "(", "ConvNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1_1", "=", "nn", ".", "Conv2d", "(", "3", ",", "32", ",", "5", ",", "stride", "=", "1", ",", "padding", "=", "2", ")", "\n", "self", ".", "prelu1_1", "=", "nn", ".", "PReLU", "(", ")", "\n", "self", ".", "conv1_2", "=", "nn", ".", "Conv2d", "(", "32", ",", "32", ",", "5", ",", "stride", "=", "1", ",", "padding", "=", "2", ")", "\n", "self", ".", "prelu1_2", "=", "nn", ".", "PReLU", "(", ")", "\n", "\n", "self", ".", "conv2_1", "=", "nn", ".", "Conv2d", "(", "32", ",", "64", ",", "5", ",", "stride", "=", "1", ",", "padding", "=", "2", ")", "\n", "self", ".", "prelu2_1", "=", "nn", ".", "PReLU", "(", ")", "\n", "self", ".", "conv2_2", "=", "nn", ".", "Conv2d", "(", "64", ",", "64", ",", "5", ",", "stride", "=", "1", ",", "padding", "=", "2", ")", "\n", "self", ".", "prelu2_2", "=", "nn", ".", "PReLU", "(", ")", "\n", "\n", "self", ".", "conv3_1", "=", "nn", ".", "Conv2d", "(", "64", ",", "128", ",", "5", ",", "stride", "=", "1", ",", "padding", "=", "2", ")", "\n", "self", ".", "prelu3_1", "=", "nn", ".", "PReLU", "(", ")", "\n", "self", ".", "conv3_2", "=", "nn", ".", "Conv2d", "(", "128", ",", "128", ",", "5", ",", "stride", "=", "1", ",", "padding", "=", "2", ")", "\n", "self", ".", "prelu3_2", "=", "nn", ".", "PReLU", "(", ")", "\n", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "128", "*", "4", "*", "4", ",", "2", ")", "\n", "self", ".", "prelu_fc1", "=", "nn", ".", "PReLU", "(", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "2", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.arpl_models.arpl_models.ConvNet.forward": [[29, 49], ["arpl_models.ConvNet.prelu1_1", "arpl_models.ConvNet.prelu1_2", "torch.nn.functional.max_pool2d", "torch.nn.functional.max_pool2d", "arpl_models.ConvNet.prelu2_1", "arpl_models.ConvNet.prelu2_2", "torch.nn.functional.max_pool2d", "torch.nn.functional.max_pool2d", "arpl_models.ConvNet.prelu3_1", "arpl_models.ConvNet.prelu3_2", "torch.nn.functional.max_pool2d", "torch.nn.functional.max_pool2d", "arpl_models.ConvNet.view", "arpl_models.ConvNet.prelu_fc1", "arpl_models.ConvNet.fc2", "arpl_models.ConvNet.conv1_1", "arpl_models.ConvNet.conv1_2", "arpl_models.ConvNet.conv2_1", "arpl_models.ConvNet.conv2_2", "arpl_models.ConvNet.conv3_1", "arpl_models.ConvNet.conv3_2", "arpl_models.ConvNet.fc1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "rf", "=", "False", ")", ":", "\n", "        ", "x", "=", "self", ".", "prelu1_1", "(", "self", ".", "conv1_1", "(", "x", ")", ")", "\n", "x", "=", "self", ".", "prelu1_2", "(", "self", ".", "conv1_2", "(", "x", ")", ")", "\n", "x", "=", "F", ".", "max_pool2d", "(", "x", ",", "2", ")", "\n", "\n", "x", "=", "self", ".", "prelu2_1", "(", "self", ".", "conv2_1", "(", "x", ")", ")", "\n", "x", "=", "self", ".", "prelu2_2", "(", "self", ".", "conv2_2", "(", "x", ")", ")", "\n", "x", "=", "F", ".", "max_pool2d", "(", "x", ",", "2", ")", "\n", "\n", "x", "=", "self", ".", "prelu3_1", "(", "self", ".", "conv3_1", "(", "x", ")", ")", "\n", "x", "=", "self", ".", "prelu3_2", "(", "self", ".", "conv3_2", "(", "x", ")", ")", "\n", "x", "=", "F", ".", "max_pool2d", "(", "x", ",", "2", ")", "\n", "\n", "x", "=", "x", ".", "view", "(", "-", "1", ",", "128", "*", "4", "*", "4", ")", "\n", "x", "=", "self", ".", "prelu_fc1", "(", "self", ".", "fc1", "(", "x", ")", ")", "\n", "y", "=", "self", ".", "fc2", "(", "x", ")", "\n", "\n", "if", "rf", ":", "\n", "            ", "return", "x", ",", "y", "\n", "", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.arpl_models.arpl_models.classifier32.__init__": [[60, 96], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Linear", "torch.Linear", "torch.Dropout2d", "torch.Dropout2d", "torch.Dropout2d", "torch.Dropout2d", "torch.Dropout2d", "torch.Dropout2d", "arpl_models.classifier32.apply", "arpl_models.classifier32.cuda"], "methods", ["home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.loss.ARPLoss.ARPLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_classes", "=", "10", ",", "feat_dim", "=", "128", ")", ":", "\n", "        ", "super", "(", "self", ".", "__class__", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "64", ",", "64", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "64", ",", "128", ",", "3", ",", "2", ",", "1", ",", "bias", "=", "False", ")", "\n", "\n", "self", ".", "conv4", "=", "nn", ".", "Conv2d", "(", "128", ",", "128", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv5", "=", "nn", ".", "Conv2d", "(", "128", ",", "128", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv6", "=", "nn", ".", "Conv2d", "(", "128", ",", "128", ",", "3", ",", "2", ",", "1", ",", "bias", "=", "False", ")", "\n", "\n", "self", ".", "conv7", "=", "nn", ".", "Conv2d", "(", "128", ",", "128", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv8", "=", "nn", ".", "Conv2d", "(", "128", ",", "128", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv9", "=", "nn", ".", "Conv2d", "(", "128", ",", "feat_dim", ",", "3", ",", "2", ",", "1", ",", "bias", "=", "False", ")", "\n", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "128", ")", "\n", "\n", "self", ".", "bn4", "=", "nn", ".", "BatchNorm2d", "(", "128", ")", "\n", "self", ".", "bn5", "=", "nn", ".", "BatchNorm2d", "(", "128", ")", "\n", "self", ".", "bn6", "=", "nn", ".", "BatchNorm2d", "(", "128", ")", "\n", "\n", "self", ".", "bn7", "=", "nn", ".", "BatchNorm2d", "(", "128", ")", "\n", "self", ".", "bn8", "=", "nn", ".", "BatchNorm2d", "(", "128", ")", "\n", "self", ".", "bn9", "=", "nn", ".", "BatchNorm2d", "(", "feat_dim", ")", "\n", "self", ".", "bn10", "=", "nn", ".", "BatchNorm2d", "(", "128", ")", "\n", "\n", "self", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "feat_dim", ",", "num_classes", ",", "bias", "=", "False", ")", "\n", "self", ".", "dr1", "=", "nn", ".", "Dropout2d", "(", "0.2", ")", "\n", "self", ".", "dr2", "=", "nn", ".", "Dropout2d", "(", "0.2", ")", "\n", "self", ".", "dr3", "=", "nn", ".", "Dropout2d", "(", "0.2", ")", "\n", "\n", "self", ".", "apply", "(", "weights_init", ")", "\n", "self", ".", "cuda", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.arpl_models.arpl_models.classifier32.forward": [[97, 138], ["arpl_models.classifier32.dr1", "arpl_models.classifier32.conv1", "arpl_models.classifier32.bn1", "arpl_models.classifier32.conv2", "arpl_models.classifier32.bn2", "arpl_models.classifier32.conv3", "arpl_models.classifier32.bn3", "arpl_models.classifier32.dr2", "arpl_models.classifier32.conv4", "arpl_models.classifier32.bn4", "arpl_models.classifier32.conv5", "arpl_models.classifier32.bn5", "arpl_models.classifier32.conv6", "arpl_models.classifier32.bn6", "arpl_models.classifier32.dr3", "arpl_models.classifier32.conv7", "arpl_models.classifier32.bn7", "arpl_models.classifier32.conv8", "arpl_models.classifier32.bn8", "arpl_models.classifier32.conv9", "arpl_models.classifier32.bn9", "arpl_models.classifier32.avgpool", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "arpl_models.classifier32.fc", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "return_feature", "=", "False", ")", ":", "\n", "        ", "x", "=", "self", ".", "dr1", "(", "x", ")", "\n", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "nn", ".", "LeakyReLU", "(", "0.2", ")", "(", "x", ")", "\n", "x", "=", "self", ".", "conv2", "(", "x", ")", "\n", "x", "=", "self", ".", "bn2", "(", "x", ")", "\n", "x", "=", "nn", ".", "LeakyReLU", "(", "0.2", ")", "(", "x", ")", "\n", "x", "=", "self", ".", "conv3", "(", "x", ")", "\n", "x", "=", "self", ".", "bn3", "(", "x", ")", "\n", "x", "=", "nn", ".", "LeakyReLU", "(", "0.2", ")", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "dr2", "(", "x", ")", "\n", "x", "=", "self", ".", "conv4", "(", "x", ")", "\n", "x", "=", "self", ".", "bn4", "(", "x", ")", "\n", "x", "=", "nn", ".", "LeakyReLU", "(", "0.2", ")", "(", "x", ")", "\n", "x", "=", "self", ".", "conv5", "(", "x", ")", "\n", "x", "=", "self", ".", "bn5", "(", "x", ")", "\n", "x", "=", "nn", ".", "LeakyReLU", "(", "0.2", ")", "(", "x", ")", "\n", "x", "=", "self", ".", "conv6", "(", "x", ")", "\n", "x", "=", "self", ".", "bn6", "(", "x", ")", "\n", "x", "=", "nn", ".", "LeakyReLU", "(", "0.2", ")", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "dr3", "(", "x", ")", "\n", "x", "=", "self", ".", "conv7", "(", "x", ")", "\n", "x", "=", "self", ".", "bn7", "(", "x", ")", "\n", "x", "=", "nn", ".", "LeakyReLU", "(", "0.2", ")", "(", "x", ")", "\n", "x", "=", "self", ".", "conv8", "(", "x", ")", "\n", "x", "=", "self", ".", "bn8", "(", "x", ")", "\n", "x", "=", "nn", ".", "LeakyReLU", "(", "0.2", ")", "(", "x", ")", "\n", "x", "=", "self", ".", "conv9", "(", "x", ")", "\n", "x", "=", "self", ".", "bn9", "(", "x", ")", "\n", "x", "=", "nn", ".", "LeakyReLU", "(", "0.2", ")", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "x", "=", "torch", ".", "flatten", "(", "x", ",", "1", ")", "\n", "y", "=", "self", ".", "fc", "(", "x", ")", "\n", "if", "return_feature", ":", "\n", "            ", "return", "x", ",", "y", "\n", "", "else", ":", "\n", "            ", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.arpl_models.arpl_models.classifier32ABN.__init__": [[154, 194], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "methods.ARPL.arpl_models.ABN.MultiBatchNorm", "methods.ARPL.arpl_models.ABN.MultiBatchNorm", "methods.ARPL.arpl_models.ABN.MultiBatchNorm", "methods.ARPL.arpl_models.ABN.MultiBatchNorm", "methods.ARPL.arpl_models.ABN.MultiBatchNorm", "methods.ARPL.arpl_models.ABN.MultiBatchNorm", "methods.ARPL.arpl_models.ABN.MultiBatchNorm", "methods.ARPL.arpl_models.ABN.MultiBatchNorm", "methods.ARPL.arpl_models.ABN.MultiBatchNorm", "methods.ARPL.arpl_models.ABN.MultiBatchNorm", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Linear", "torch.Linear", "torch.Dropout2d", "torch.Dropout2d", "torch.Dropout2d", "torch.Dropout2d", "torch.Dropout2d", "torch.Dropout2d", "arpl_models.classifier32ABN.apply", "arpl_models.classifier32ABN.cuda"], "methods", ["home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.loss.ARPLoss.ARPLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_classes", "=", "10", ",", "num_ABN", "=", "2", ",", "feat_dim", "=", "None", ")", ":", "\n", "\n", "        ", "if", "feat_dim", "is", "None", ":", "\n", "            ", "feat_dim", "=", "128", "\n", "\n", "", "super", "(", "self", ".", "__class__", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "64", ",", "64", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "64", ",", "128", ",", "3", ",", "2", ",", "1", ",", "bias", "=", "False", ")", "\n", "\n", "self", ".", "conv4", "=", "nn", ".", "Conv2d", "(", "128", ",", "128", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv5", "=", "nn", ".", "Conv2d", "(", "128", ",", "128", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv6", "=", "nn", ".", "Conv2d", "(", "128", ",", "128", ",", "3", ",", "2", ",", "1", ",", "bias", "=", "False", ")", "\n", "\n", "self", ".", "conv7", "=", "nn", ".", "Conv2d", "(", "128", ",", "128", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv8", "=", "nn", ".", "Conv2d", "(", "128", ",", "128", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv9", "=", "nn", ".", "Conv2d", "(", "128", ",", "feat_dim", ",", "3", ",", "2", ",", "1", ",", "bias", "=", "False", ")", "\n", "\n", "self", ".", "bn1", "=", "MultiBatchNorm", "(", "64", ",", "num_ABN", ")", "\n", "self", ".", "bn2", "=", "MultiBatchNorm", "(", "64", ",", "num_ABN", ")", "\n", "self", ".", "bn3", "=", "MultiBatchNorm", "(", "128", ",", "num_ABN", ")", "\n", "\n", "self", ".", "bn4", "=", "MultiBatchNorm", "(", "128", ",", "num_ABN", ")", "\n", "self", ".", "bn5", "=", "MultiBatchNorm", "(", "128", ",", "num_ABN", ")", "\n", "self", ".", "bn6", "=", "MultiBatchNorm", "(", "128", ",", "num_ABN", ")", "\n", "\n", "self", ".", "bn7", "=", "MultiBatchNorm", "(", "128", ",", "num_ABN", ")", "\n", "self", ".", "bn8", "=", "MultiBatchNorm", "(", "128", ",", "num_ABN", ")", "\n", "self", ".", "bn9", "=", "MultiBatchNorm", "(", "feat_dim", ",", "num_ABN", ")", "\n", "self", ".", "bn10", "=", "MultiBatchNorm", "(", "128", ",", "num_ABN", ")", "\n", "\n", "self", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "feat_dim", ",", "num_classes", ",", "bias", "=", "False", ")", "\n", "self", ".", "dr1", "=", "nn", ".", "Dropout2d", "(", "0.2", ")", "\n", "self", ".", "dr2", "=", "nn", ".", "Dropout2d", "(", "0.2", ")", "\n", "self", ".", "dr3", "=", "nn", ".", "Dropout2d", "(", "0.2", ")", "\n", "\n", "self", ".", "apply", "(", "weights_init_ABN", ")", "\n", "self", ".", "cuda", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.arpl_models.arpl_models.classifier32ABN.forward": [[195, 238], ["arpl_models.classifier32ABN.dr1", "arpl_models.classifier32ABN.conv1", "arpl_models.classifier32ABN.bn1", "arpl_models.classifier32ABN.conv2", "arpl_models.classifier32ABN.bn2", "arpl_models.classifier32ABN.conv3", "arpl_models.classifier32ABN.bn3", "arpl_models.classifier32ABN.dr2", "arpl_models.classifier32ABN.conv4", "arpl_models.classifier32ABN.bn4", "arpl_models.classifier32ABN.conv5", "arpl_models.classifier32ABN.bn5", "arpl_models.classifier32ABN.conv6", "arpl_models.classifier32ABN.bn6", "arpl_models.classifier32ABN.dr3", "arpl_models.classifier32ABN.conv7", "arpl_models.classifier32ABN.bn7", "arpl_models.classifier32ABN.conv8", "arpl_models.classifier32ABN.bn8", "arpl_models.classifier32ABN.conv9", "arpl_models.classifier32ABN.bn9", "arpl_models.classifier32ABN.avgpool", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "arpl_models.classifier32ABN.fc", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "return_feature", "=", "False", ",", "bn_label", "=", "None", ")", ":", "\n", "        ", "if", "bn_label", "is", "None", ":", "\n", "            ", "bn_label", "=", "0", "*", "torch", ".", "ones", "(", "x", ".", "shape", "[", "0", "]", ",", "dtype", "=", "torch", ".", "long", ")", ".", "cuda", "(", ")", "\n", "", "x", "=", "self", ".", "dr1", "(", "x", ")", "\n", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", ",", "_", "=", "self", ".", "bn1", "(", "x", ",", "bn_label", ")", "\n", "x", "=", "nn", ".", "LeakyReLU", "(", "0.2", ")", "(", "x", ")", "\n", "x", "=", "self", ".", "conv2", "(", "x", ")", "\n", "x", ",", "_", "=", "self", ".", "bn2", "(", "x", ",", "bn_label", ")", "\n", "x", "=", "nn", ".", "LeakyReLU", "(", "0.2", ")", "(", "x", ")", "\n", "x", "=", "self", ".", "conv3", "(", "x", ")", "\n", "x", ",", "_", "=", "self", ".", "bn3", "(", "x", ",", "bn_label", ")", "\n", "x", "=", "nn", ".", "LeakyReLU", "(", "0.2", ")", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "dr2", "(", "x", ")", "\n", "x", "=", "self", ".", "conv4", "(", "x", ")", "\n", "x", ",", "_", "=", "self", ".", "bn4", "(", "x", ",", "bn_label", ")", "\n", "x", "=", "nn", ".", "LeakyReLU", "(", "0.2", ")", "(", "x", ")", "\n", "x", "=", "self", ".", "conv5", "(", "x", ")", "\n", "x", ",", "_", "=", "self", ".", "bn5", "(", "x", ",", "bn_label", ")", "\n", "x", "=", "nn", ".", "LeakyReLU", "(", "0.2", ")", "(", "x", ")", "\n", "x", "=", "self", ".", "conv6", "(", "x", ")", "\n", "x", ",", "_", "=", "self", ".", "bn6", "(", "x", ",", "bn_label", ")", "\n", "x", "=", "nn", ".", "LeakyReLU", "(", "0.2", ")", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "dr3", "(", "x", ")", "\n", "x", "=", "self", ".", "conv7", "(", "x", ")", "\n", "x", ",", "_", "=", "self", ".", "bn7", "(", "x", ",", "bn_label", ")", "\n", "x", "=", "nn", ".", "LeakyReLU", "(", "0.2", ")", "(", "x", ")", "\n", "x", "=", "self", ".", "conv8", "(", "x", ")", "\n", "x", ",", "_", "=", "self", ".", "bn8", "(", "x", ",", "bn_label", ")", "\n", "x", "=", "nn", ".", "LeakyReLU", "(", "0.2", ")", "(", "x", ")", "\n", "x", "=", "self", ".", "conv9", "(", "x", ")", "\n", "x", ",", "_", "=", "self", ".", "bn9", "(", "x", ",", "bn_label", ")", "\n", "x", "=", "nn", ".", "LeakyReLU", "(", "0.2", ")", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "x", "=", "torch", ".", "flatten", "(", "x", ",", "1", ")", "\n", "y", "=", "self", ".", "fc", "(", "x", ")", "\n", "if", "return_feature", ":", "\n", "            ", "return", "x", ",", "y", "\n", "", "else", ":", "\n", "            ", "return", "y", "", "", "", "", ""]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.arpl_models.arpl_models.weights_init": [[50, 58], ["classname.find", "m.weight.data.normal_", "classname.find", "m.weight.data.normal_", "m.bias.data.fill_"], "function", ["None"], ["", "", "def", "weights_init", "(", "m", ")", ":", "\n", "    ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "# TODO: what about fully-connected layers?", "\n", "if", "classname", ".", "find", "(", "'Conv'", ")", "!=", "-", "1", ":", "\n", "        ", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0.0", ",", "0.05", ")", "\n", "", "elif", "classname", ".", "find", "(", "'BatchNorm'", ")", "!=", "-", "1", ":", "\n", "        ", "m", ".", "weight", ".", "data", ".", "normal_", "(", "1.0", ",", "0.02", ")", "\n", "m", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.arpl_models.arpl_models.weights_init_ABN": [[139, 152], ["classname.find", "m.weight.data.normal_", "classname.find", "m.bns[].weight.data.normal_", "m.bns[].bias.data.fill_", "m.bns[].weight.data.normal_", "m.bns[].bias.data.fill_", "classname.find", "m.weight.data.normal_", "m.bias.data.fill_"], "function", ["None"], ["", "", "", "def", "weights_init_ABN", "(", "m", ")", ":", "\n", "    ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "# TODO: what about fully-connected layers?", "\n", "if", "classname", ".", "find", "(", "'Conv'", ")", "!=", "-", "1", ":", "\n", "        ", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0.0", ",", "0.05", ")", "\n", "", "elif", "classname", ".", "find", "(", "'MultiBatchNorm'", ")", "!=", "-", "1", ":", "\n", "        ", "m", ".", "bns", "[", "0", "]", ".", "weight", ".", "data", ".", "normal_", "(", "1.0", ",", "0.02", ")", "\n", "m", ".", "bns", "[", "0", "]", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "m", ".", "bns", "[", "1", "]", ".", "weight", ".", "data", ".", "normal_", "(", "1.0", ",", "0.02", ")", "\n", "m", ".", "bns", "[", "1", "]", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "", "elif", "classname", ".", "find", "(", "'BatchNorm'", ")", "!=", "-", "1", ":", "\n", "        ", "m", ".", "weight", ".", "data", ".", "normal_", "(", "1.0", ",", "0.02", ")", "\n", "m", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.arpl_models.gan._netD32.__init__": [[18, 41], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.loss.ARPLoss.ARPLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "ngpu", ",", "nc", ",", "ndf", ")", ":", "\n", "        ", "super", "(", "_netD32", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "ngpu", "=", "ngpu", "\n", "self", ".", "main", "=", "nn", ".", "Sequential", "(", "\n", "# input size. (nc) x 32 x 32", "\n", "nn", ".", "Conv2d", "(", "nc", ",", "ndf", "*", "2", ",", "4", ",", "2", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", ",", "\n", "# state size. (ndf*2) x 16 x 16", "\n", "nn", ".", "Conv2d", "(", "ndf", "*", "2", ",", "ndf", "*", "4", ",", "4", ",", "2", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "ndf", "*", "4", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", ",", "\n", "# state size. (ndf*4) x 8 x 8", "\n", "nn", ".", "Conv2d", "(", "ndf", "*", "4", ",", "ndf", "*", "8", ",", "4", ",", "2", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "ndf", "*", "8", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", ",", "\n", "# state size. (ndf*8) x 4 x 4", "\n", "nn", ".", "Conv2d", "(", "ndf", "*", "8", ",", "ndf", "*", "16", ",", "4", ",", "1", ",", "0", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "Sigmoid", "(", ")", "\n", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "ndf", "*", "16", ",", "1", ")", ",", "\n", "nn", ".", "Sigmoid", "(", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.arpl_models.gan._netD32.forward": [[43, 54], ["gan._netD32.avgpool", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "gan._netD32.classifier().flatten", "isinstance", "torch.parallel.data_parallel", "torch.parallel.data_parallel", "torch.parallel.data_parallel", "gan._netD32.main", "range", "gan._netD32.classifier"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "if", "isinstance", "(", "input", ".", "data", ",", "torch", ".", "cuda", ".", "FloatTensor", ")", "and", "self", ".", "ngpu", ">", "1", ":", "\n", "            ", "output", "=", "nn", ".", "parallel", ".", "data_parallel", "(", "self", ".", "main", ",", "input", ",", "range", "(", "self", ".", "ngpu", ")", ")", "\n", "", "else", ":", "\n", "            ", "output", "=", "self", ".", "main", "(", "input", ")", "\n", "\n", "", "output", "=", "self", ".", "avgpool", "(", "output", ")", "\n", "output", "=", "torch", ".", "flatten", "(", "output", ",", "1", ")", "\n", "output", "=", "self", ".", "classifier", "(", "output", ")", ".", "flatten", "(", ")", "\n", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.arpl_models.gan._netG32.__init__": [[56, 75], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.loss.ARPLoss.ARPLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "ngpu", ",", "nz", ",", "ngf", ",", "nc", ")", ":", "\n", "        ", "super", "(", "_netG32", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "ngpu", "=", "ngpu", "\n", "self", ".", "main", "=", "nn", ".", "Sequential", "(", "\n", "# input is Z, going into a convolution", "\n", "nn", ".", "ConvTranspose2d", "(", "nz", ",", "ngf", "*", "8", ",", "4", ",", "1", ",", "0", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "ngf", "*", "8", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "# state size. (ngf*8) x 4 x 4", "\n", "nn", ".", "ConvTranspose2d", "(", "ngf", "*", "8", ",", "ngf", "*", "4", ",", "4", ",", "2", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "ngf", "*", "4", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "# state size. (ngf*4) x 8 x 8", "\n", "nn", ".", "ConvTranspose2d", "(", "ngf", "*", "4", ",", "ngf", "*", "2", ",", "4", ",", "2", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "ngf", "*", "2", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "# state size. (ngf*2) x 16 x 16", "\n", "nn", ".", "ConvTranspose2d", "(", "ngf", "*", "2", ",", "nc", ",", "4", ",", "2", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "Sigmoid", "(", ")", "\n", "# state size. (nc) x 32 x 32", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.arpl_models.gan._netG32.forward": [[78, 85], ["isinstance", "torch.parallel.data_parallel", "torch.parallel.data_parallel", "torch.parallel.data_parallel", "gan._netG32.main", "range"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "if", "isinstance", "(", "input", ".", "data", ",", "torch", ".", "cuda", ".", "FloatTensor", ")", "and", "self", ".", "ngpu", ">", "1", ":", "\n", "            ", "output", "=", "nn", ".", "parallel", ".", "data_parallel", "(", "self", ".", "main", ",", "input", ",", "range", "(", "self", ".", "ngpu", ")", ")", "\n", "", "else", ":", "\n", "            ", "output", "=", "self", ".", "main", "(", "input", ")", "\n", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.arpl_models.gan._netD.__init__": [[98, 121], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.loss.ARPLoss.ARPLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "ngpu", ",", "nc", ",", "ndf", ")", ":", "\n", "        ", "super", "(", "_netD", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "ngpu", "=", "ngpu", "\n", "self", ".", "main", "=", "nn", ".", "Sequential", "(", "\n", "# input size. (nc) x 32 x 32", "\n", "nn", ".", "Conv2d", "(", "nc", ",", "ndf", "*", "2", ",", "4", ",", "2", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", ",", "\n", "# state size. (ndf*2) x 16 x 16", "\n", "nn", ".", "Conv2d", "(", "ndf", "*", "2", ",", "ndf", "*", "4", ",", "4", ",", "2", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "ndf", "*", "4", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", ",", "\n", "# state size. (ndf*4) x 8 x 8", "\n", "nn", ".", "Conv2d", "(", "ndf", "*", "4", ",", "ndf", "*", "8", ",", "4", ",", "2", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "ndf", "*", "8", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", ",", "\n", "# state size. (ndf*8) x 4 x 4", "\n", "nn", ".", "Conv2d", "(", "ndf", "*", "8", ",", "ndf", "*", "16", ",", "4", ",", "1", ",", "0", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "Sigmoid", "(", ")", "\n", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "ndf", "*", "16", ",", "1", ")", ",", "\n", "nn", ".", "Sigmoid", "(", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.arpl_models.gan._netD.forward": [[123, 134], ["gan._netD.avgpool", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "gan._netD.classifier().flatten", "isinstance", "torch.parallel.data_parallel", "torch.parallel.data_parallel", "torch.parallel.data_parallel", "gan._netD.main", "range", "gan._netD.classifier"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "if", "isinstance", "(", "input", ".", "data", ",", "torch", ".", "cuda", ".", "FloatTensor", ")", "and", "self", ".", "ngpu", ">", "1", ":", "\n", "            ", "output", "=", "nn", ".", "parallel", ".", "data_parallel", "(", "self", ".", "main", ",", "input", ",", "range", "(", "self", ".", "ngpu", ")", ")", "\n", "", "else", ":", "\n", "            ", "output", "=", "self", ".", "main", "(", "input", ")", "\n", "\n", "", "output", "=", "self", ".", "avgpool", "(", "output", ")", "\n", "output", "=", "torch", ".", "flatten", "(", "output", ",", "1", ")", "\n", "output", "=", "self", ".", "classifier", "(", "output", ")", ".", "flatten", "(", ")", "\n", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.arpl_models.gan._netG.__init__": [[136, 159], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.loss.ARPLoss.ARPLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "ngpu", ",", "nz", ",", "ngf", ",", "nc", ")", ":", "\n", "        ", "super", "(", "_netG", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "ngpu", "=", "ngpu", "\n", "self", ".", "main", "=", "nn", ".", "Sequential", "(", "\n", "# input is Z, going into a convolution", "\n", "nn", ".", "ConvTranspose2d", "(", "nz", ",", "ngf", "*", "8", ",", "4", ",", "1", ",", "0", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "ngf", "*", "8", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "# state size. (ngf*8) x 4 x 4", "\n", "nn", ".", "ConvTranspose2d", "(", "ngf", "*", "8", ",", "ngf", "*", "4", ",", "4", ",", "2", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "ngf", "*", "4", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "# state size. (ngf*4) x 8 x 8", "\n", "nn", ".", "ConvTranspose2d", "(", "ngf", "*", "4", ",", "ngf", "*", "2", ",", "4", ",", "2", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "ngf", "*", "2", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "# state size. (ngf*2) x 16 x 16", "\n", "nn", ".", "ConvTranspose2d", "(", "ngf", "*", "2", ",", "ngf", ",", "4", ",", "2", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "ngf", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "# state size. (nc) x 32 x 32", "\n", "nn", ".", "ConvTranspose2d", "(", "ngf", ",", "nc", ",", "4", ",", "2", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "Sigmoid", "(", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.arpl_models.gan._netG.forward": [[161, 168], ["isinstance", "torch.parallel.data_parallel", "torch.parallel.data_parallel", "torch.parallel.data_parallel", "gan._netG.main", "range"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "if", "isinstance", "(", "input", ".", "data", ",", "torch", ".", "cuda", ".", "FloatTensor", ")", "and", "self", ".", "ngpu", ">", "1", ":", "\n", "            ", "output", "=", "nn", ".", "parallel", ".", "data_parallel", "(", "self", ".", "main", ",", "input", ",", "range", "(", "self", ".", "ngpu", ")", ")", "\n", "", "else", ":", "\n", "            ", "output", "=", "self", ".", "main", "(", "input", ")", "\n", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.arpl_models.gan.weights_init": [[9, 16], ["classname.find", "m.weight.data.normal_", "classname.find", "m.weight.data.normal_", "m.bias.data.fill_"], "function", ["None"], ["def", "weights_init", "(", "m", ")", ":", "\n", "    ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "if", "classname", ".", "find", "(", "'Conv'", ")", "!=", "-", "1", ":", "\n", "        ", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0.0", ",", "0.02", ")", "\n", "", "elif", "classname", ".", "find", "(", "'BatchNorm'", ")", "!=", "-", "1", ":", "\n", "        ", "m", ".", "weight", ".", "data", ".", "normal_", "(", "1.0", ",", "0.02", ")", "\n", "m", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.arpl_models.gan.Generator32": [[86, 90], ["gan._netG32", "_netG32.apply"], "function", ["None"], ["", "", "def", "Generator32", "(", "n_gpu", ",", "nz", ",", "ngf", ",", "nc", ")", ":", "\n", "    ", "model", "=", "_netG32", "(", "n_gpu", ",", "nz", ",", "ngf", ",", "nc", ")", "\n", "model", ".", "apply", "(", "weights_init", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.arpl_models.gan.Discriminator32": [[91, 95], ["gan._netD32", "_netD32.apply"], "function", ["None"], ["", "def", "Discriminator32", "(", "n_gpu", ",", "nc", ",", "ndf", ")", ":", "\n", "    ", "model", "=", "_netD32", "(", "n_gpu", ",", "nc", ",", "ndf", ")", "\n", "model", ".", "apply", "(", "weights_init", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.arpl_models.gan.Generator": [[169, 173], ["gan._netG", "_netG.apply"], "function", ["None"], ["", "", "def", "Generator", "(", "n_gpu", ",", "nz", ",", "ngf", ",", "nc", ")", ":", "\n", "    ", "model", "=", "_netG", "(", "n_gpu", ",", "nz", ",", "ngf", ",", "nc", ")", "\n", "model", ".", "apply", "(", "weights_init", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.arpl_models.gan.Discriminator": [[174, 178], ["gan._netD", "_netD.apply"], "function", ["None"], ["", "def", "Discriminator", "(", "n_gpu", ",", "nc", ",", "ndf", ")", ":", "\n", "    ", "model", "=", "_netD", "(", "n_gpu", ",", "nc", ",", "ndf", ")", "\n", "model", ".", "apply", "(", "weights_init", ")", "\n", "return", "model", "", "", ""]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.arpl_models.wrapper_classes.CIFARResNetWrapper.__init__": [[11, 15], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.loss.ARPLoss.ARPLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "resnet", ")", ":", "\n", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "resnet", "=", "resnet", "\n", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.arpl_models.wrapper_classes.CIFARResNetWrapper.forward": [[16, 25], ["wrapper_classes.CIFARResNetWrapper.resnet.net", "wrapper_classes.CIFARResNetWrapper.resnet.fc"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "return_features", "=", "True", ",", "dummy_label", "=", "None", ")", ":", "\n", "\n", "        ", "embedding", "=", "self", ".", "resnet", ".", "net", "(", "x", ")", "\n", "preds", "=", "self", ".", "resnet", ".", "fc", "(", "embedding", ")", "\n", "\n", "if", "return_features", ":", "\n", "            ", "return", "embedding", ",", "preds", "\n", "", "else", ":", "\n", "            ", "return", "preds", "\n", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.arpl_models.wrapper_classes.TimmResNetWrapper.__init__": [[29, 33], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.loss.ARPLoss.ARPLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "resnet", ")", ":", "\n", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "resnet", "=", "resnet", "\n", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.arpl_models.wrapper_classes.TimmResNetWrapper.forward": [[34, 46], ["wrapper_classes.TimmResNetWrapper.resnet.forward_features", "wrapper_classes.TimmResNetWrapper.resnet.global_pool", "wrapper_classes.TimmResNetWrapper.resnet.fc", "torch.nn.functional.dropout", "float"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "return_features", "=", "True", ",", "dummy_label", "=", "None", ")", ":", "\n", "\n", "        ", "x", "=", "self", ".", "resnet", ".", "forward_features", "(", "x", ")", "\n", "embedding", "=", "self", ".", "resnet", ".", "global_pool", "(", "x", ")", "\n", "if", "self", ".", "resnet", ".", "drop_rate", ":", "\n", "            ", "embedding", "=", "torch", ".", "nn", ".", "functional", ".", "dropout", "(", "embedding", ",", "p", "=", "float", "(", "self", ".", "drop_rate", ")", ",", "training", "=", "self", ".", "training", ")", "\n", "", "preds", "=", "self", ".", "resnet", ".", "fc", "(", "embedding", ")", "\n", "\n", "if", "return_features", ":", "\n", "            ", "return", "embedding", ",", "preds", "\n", "", "else", ":", "\n", "            ", "return", "preds", "\n", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.arpl_models.wrapper_classes.get_resnetABN_with_moco_weights": [[48, 64], ["torch.load", "models.model_utils.transform_moco_state_dict", "wrapper_classes.transform_moco_state_dict_to_ABN", "methods.ARPL.arpl_models.resnetABN.resnet50ABN", "methods.ARPL.arpl_models.resnetABN.resnet50ABN.load_state_dict", "len", "len"], "function", ["home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.models.model_utils.transform_moco_state_dict", "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.arpl_models.wrapper_classes.transform_moco_state_dict_to_ABN", "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.arpl_models.resnetABN.resnet50ABN", "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.models.model_utils.Classifier32ARPLWrapper.load_state_dict"], ["", "", "", "def", "get_resnetABN_with_moco_weights", "(", "args", ")", ":", "\n", "\n", "    ", "checkpoint", "=", "torch", ".", "load", "(", "'/work/sagar/pretrained_models/imagenet/moco_v2_800ep_pretrain.pth.tar'", ")", "\n", "state_dict", "=", "checkpoint", "[", "'state_dict'", "]", "\n", "moco_state_dict", "=", "transform_moco_state_dict", "(", "state_dict", ",", "num_classes", "=", "len", "(", "args", ".", "train_classes", ")", ")", "\n", "\n", "new_state_dict", "=", "transform_moco_state_dict_to_ABN", "(", "moco_state_dict", ")", "\n", "\n", "r50_ABN", "=", "resnet50ABN", "(", "num_classes", "=", "len", "(", "args", ".", "train_classes", ")", ",", "first_layer_conv", "=", "7", ")", "\n", "\n", "# <Most> keys in state_dict should match:", "\n", "#       Both ABN layers initialised with BN layers of MoCo network", "\n", "#       BN layers in downsampling blocks randomly initialised", "\n", "r50_ABN", ".", "load_state_dict", "(", "new_state_dict", ",", "strict", "=", "False", ")", "\n", "\n", "return", "r50_ABN", "\n", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.arpl_models.wrapper_classes.transform_moco_state_dict_to_ABN": [[65, 113], ["obj.items", "old_k.split"], "function", ["None"], ["", "def", "transform_moco_state_dict_to_ABN", "(", "obj", ")", ":", "\n", "\n", "    ", "\"\"\"\n    :param obj: Moco State Dict for regular Timm ResNet\n    :param num_classes: num_classes\n    :return: State dict compatable with standard ABN resnet architecture architecture\n    \"\"\"", "\n", "\n", "newmodel", "=", "{", "}", "\n", "for", "k", ",", "v", "in", "obj", ".", "items", "(", ")", ":", "\n", "\n", "        ", "old_k", "=", "k", "\n", "\n", "if", "\"bn\"", "in", "old_k", ":", "\n", "            ", "layer_name", "=", "old_k", ".", "split", "(", "\"bn\"", ")", "\n", "suffix", "=", "layer_name", "[", "-", "1", "]", "[", "1", ":", "]", "\n", "bn_idx", "=", "layer_name", "[", "-", "1", "]", "[", "0", "]", "\n", "prefix", "=", "layer_name", "[", "0", "]", "\n", "\n", "new_k_1", "=", "prefix", "+", "'bn{}.'", ".", "format", "(", "bn_idx", ")", "+", "\"bns.0\"", "+", "suffix", "\n", "new_k_2", "=", "prefix", "+", "'bn{}.'", ".", "format", "(", "bn_idx", ")", "+", "\"bns.1\"", "+", "suffix", "\n", "\n", "newmodel", "[", "new_k_1", "]", "=", "v", "\n", "newmodel", "[", "new_k_2", "]", "=", "v", "\n", "\n", "# if \"downsample\" in old_k:", "\n", "#", "\n", "#     layer_name = old_k.split(\"downsample\")", "\n", "#     suffix = layer_name[-1].split('.')[-1]", "\n", "#     prefix = layer_name[0] + \"downsample\" + layer_name[-1][:3]", "\n", "#", "\n", "#     new_k_1 = prefix + 'bn{}.'.format(bn_idx) + \"bns.0\" + suffix", "\n", "#     new_k_2 = prefix + 'bn{}.'.format(bn_idx) + \"bns.1\" + suffix", "\n", "#", "\n", "#     newmodel[new_k_1] = v", "\n", "#     newmodel[new_k_2] = v", "\n", "\n", "# if k.startswith(\"fc.0\"):", "\n", "#     k = k.replace(\"0.\", \"\")", "\n", "#     if \"weight\" in k:", "\n", "#         v = torch.randn((num_classes, v.size(1)))", "\n", "#     elif \"bias\" in k:", "\n", "#         v = torch.randn((num_classes,))", "\n", "\n", "", "else", ":", "\n", "            ", "newmodel", "[", "k", "]", "=", "v", "\n", "\n", "", "", "return", "newmodel", "\n", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.arpl_models.resnet.BasicBlock.__init__": [[26, 38], ["torch.Module.__init__", "resnet.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "resnet.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.loss.ARPLoss.ARPLoss.__init__", "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.arpl_models.resnetABN.conv3x3", "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.arpl_models.resnetABN.conv3x3"], ["def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "in_planes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "self", ".", "expansion", "*", "planes", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "self", ".", "expansion", "*", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "self", ".", "expansion", "*", "planes", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.arpl_models.resnet.BasicBlock.forward": [[40, 46], ["torch.relu", "torch.relu", "torch.relu", "resnet.BasicBlock.bn2", "resnet.BasicBlock.shortcut", "torch.relu", "torch.relu", "torch.relu", "resnet.BasicBlock.bn1", "resnet.BasicBlock.conv2", "resnet.BasicBlock.conv1"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ")", ")", "\n", "out", "+=", "self", ".", "shortcut", "(", "x", ")", "\n", "out", "=", "F", ".", "relu", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.arpl_models.resnet.PreActBlock.__init__": [[52, 62], ["torch.Module.__init__", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "resnet.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "resnet.conv3x3", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.loss.ARPLoss.ARPLoss.__init__", "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.arpl_models.resnetABN.conv3x3", "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.arpl_models.resnetABN.conv3x3"], ["def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "PreActBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "in_planes", ")", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "in_planes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "self", ".", "expansion", "*", "planes", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "self", ".", "expansion", "*", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.arpl_models.resnet.PreActBlock.forward": [[64, 71], ["torch.relu", "torch.relu", "torch.relu", "resnet.PreActBlock.conv1", "resnet.PreActBlock.conv2", "resnet.PreActBlock.bn1", "hasattr", "resnet.PreActBlock.shortcut", "torch.relu", "torch.relu", "torch.relu", "resnet.PreActBlock.bn2"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "x", ")", ")", "\n", "shortcut", "=", "self", ".", "shortcut", "(", "out", ")", "if", "hasattr", "(", "self", ",", "'shortcut'", ")", "else", "x", "\n", "out", "=", "self", ".", "conv1", "(", "out", ")", "\n", "out", "=", "self", ".", "conv2", "(", "F", ".", "relu", "(", "self", ".", "bn2", "(", "out", ")", ")", ")", "\n", "out", "+=", "shortcut", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.arpl_models.resnet.Bottleneck.__init__": [[76, 90], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.loss.ARPLoss.ARPLoss.__init__"], ["def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", ",", "self", ".", "expansion", "*", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "self", ".", "expansion", "*", "planes", ")", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "self", ".", "expansion", "*", "planes", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "self", ".", "expansion", "*", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "self", ".", "expansion", "*", "planes", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.arpl_models.resnet.Bottleneck.forward": [[92, 99], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "resnet.Bottleneck.bn3", "resnet.Bottleneck.shortcut", "torch.relu", "torch.relu", "torch.relu", "resnet.Bottleneck.bn1", "resnet.Bottleneck.bn2", "resnet.Bottleneck.conv3", "resnet.Bottleneck.conv1", "resnet.Bottleneck.conv2"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "F", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ")", ")", ")", "\n", "out", "=", "self", ".", "bn3", "(", "self", ".", "conv3", "(", "out", ")", ")", "\n", "out", "+=", "self", ".", "shortcut", "(", "x", ")", "\n", "out", "=", "F", ".", "relu", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.arpl_models.resnet.PreActBottleneck.__init__": [[105, 117], ["torch.Module.__init__", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.loss.ARPLoss.ARPLoss.__init__"], ["def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "PreActBottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "in_planes", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", ",", "self", ".", "expansion", "*", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "self", ".", "expansion", "*", "planes", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "self", ".", "expansion", "*", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.arpl_models.resnet.PreActBottleneck.forward": [[119, 127], ["torch.relu", "torch.relu", "torch.relu", "resnet.PreActBottleneck.conv1", "resnet.PreActBottleneck.conv2", "resnet.PreActBottleneck.conv3", "resnet.PreActBottleneck.bn1", "hasattr", "resnet.PreActBottleneck.shortcut", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "resnet.PreActBottleneck.bn2", "resnet.PreActBottleneck.bn3"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "x", ")", ")", "\n", "shortcut", "=", "self", ".", "shortcut", "(", "out", ")", "if", "hasattr", "(", "self", ",", "'shortcut'", ")", "else", "x", "\n", "out", "=", "self", ".", "conv1", "(", "out", ")", "\n", "out", "=", "self", ".", "conv2", "(", "F", ".", "relu", "(", "self", ".", "bn2", "(", "out", ")", ")", ")", "\n", "out", "=", "self", ".", "conv3", "(", "F", ".", "relu", "(", "self", ".", "bn3", "(", "out", ")", ")", ")", "\n", "out", "+=", "shortcut", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.arpl_models.resnet.ResNet.__init__": [[130, 142], ["torch.Module.__init__", "resnet.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.loss.ARPLoss.ARPLoss.__init__", "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.arpl_models.resnetABN.conv3x3", "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.arpl_models.resnetABN.ResNetABN._make_layer", "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.arpl_models.resnetABN.ResNetABN._make_layer", "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.arpl_models.resnetABN.ResNetABN._make_layer", "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.arpl_models.resnetABN.ResNetABN._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "num_blocks", ",", "num_classes", "=", "10", ")", ":", "\n", "        ", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_planes", "=", "64", "\n", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "3", ",", "64", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "num_blocks", "[", "0", "]", ",", "stride", "=", "1", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "num_blocks", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "num_blocks", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "num_blocks", "[", "3", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "512", "*", "block", ".", "expansion", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.arpl_models.resnet.ResNet._make_layer": [[143, 150], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "block"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "num_blocks", ",", "stride", ")", ":", "\n", "        ", "strides", "=", "[", "stride", "]", "+", "[", "1", "]", "*", "(", "num_blocks", "-", "1", ")", "\n", "layers", "=", "[", "]", "\n", "for", "stride", "in", "strides", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "in_planes", ",", "planes", ",", "stride", ")", ")", "\n", "self", ".", "in_planes", "=", "planes", "*", "block", ".", "expansion", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.arpl_models.resnet.ResNet.forward": [[151, 165], ["torch.relu", "torch.relu", "torch.relu", "resnet.ResNet.layer1", "resnet.ResNet.layer2", "resnet.ResNet.layer3", "resnet.ResNet.layer4", "resnet.ResNet.avgpool", "out.view.view.view", "resnet.ResNet.linear", "resnet.ResNet.bn1", "out.view.view.size", "resnet.ResNet.conv1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "return_feature", "=", "False", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "layer1", "(", "out", ")", "\n", "out", "=", "self", ".", "layer2", "(", "out", ")", "\n", "out", "=", "self", ".", "layer3", "(", "out", ")", "\n", "out", "=", "self", ".", "layer4", "(", "out", ")", "\n", "# out = F.avg_pool2d(out, 4)", "\n", "out", "=", "self", ".", "avgpool", "(", "out", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "y", "=", "self", ".", "linear", "(", "out", ")", "\n", "if", "return_feature", ":", "\n", "            ", "return", "out", ",", "y", "\n", "", "else", ":", "\n", "            ", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.arpl_models.resnet.ResNet.feature_list": [[167, 183], ["torch.relu", "torch.relu", "torch.relu", "out_list.append", "resnet.ResNet.layer1", "out_list.append", "resnet.ResNet.layer2", "out_list.append", "resnet.ResNet.layer3", "out_list.append", "resnet.ResNet.layer4", "out_list.append", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "out.view.view.view", "resnet.ResNet.linear", "resnet.ResNet.bn1", "out.view.view.size", "resnet.ResNet.conv1"], "methods", ["None"], ["", "", "def", "feature_list", "(", "self", ",", "x", ")", ":", "\n", "        ", "out_list", "=", "[", "]", "\n", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out_list", ".", "append", "(", "out", ")", "\n", "out", "=", "self", ".", "layer1", "(", "out", ")", "\n", "out_list", ".", "append", "(", "out", ")", "\n", "out", "=", "self", ".", "layer2", "(", "out", ")", "\n", "out_list", ".", "append", "(", "out", ")", "\n", "out", "=", "self", ".", "layer3", "(", "out", ")", "\n", "out_list", ".", "append", "(", "out", ")", "\n", "out", "=", "self", ".", "layer4", "(", "out", ")", "\n", "out_list", ".", "append", "(", "out", ")", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "4", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "y", "=", "self", ".", "linear", "(", "out", ")", "\n", "return", "y", ",", "out_list", "\n", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.arpl_models.resnet.ResNet.intermediate_forward": [[185, 202], ["torch.relu", "torch.relu", "torch.relu", "resnet.ResNet.bn1", "resnet.ResNet.layer1", "resnet.ResNet.conv1", "resnet.ResNet.layer1", "resnet.ResNet.layer2", "resnet.ResNet.layer1", "resnet.ResNet.layer2", "resnet.ResNet.layer3", "resnet.ResNet.layer1", "resnet.ResNet.layer2", "resnet.ResNet.layer3", "resnet.ResNet.layer4"], "methods", ["None"], ["", "def", "intermediate_forward", "(", "self", ",", "x", ",", "layer_index", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "if", "layer_index", "==", "1", ":", "\n", "            ", "out", "=", "self", ".", "layer1", "(", "out", ")", "\n", "", "elif", "layer_index", "==", "2", ":", "\n", "            ", "out", "=", "self", ".", "layer1", "(", "out", ")", "\n", "out", "=", "self", ".", "layer2", "(", "out", ")", "\n", "", "elif", "layer_index", "==", "3", ":", "\n", "            ", "out", "=", "self", ".", "layer1", "(", "out", ")", "\n", "out", "=", "self", ".", "layer2", "(", "out", ")", "\n", "out", "=", "self", ".", "layer3", "(", "out", ")", "\n", "", "elif", "layer_index", "==", "4", ":", "\n", "            ", "out", "=", "self", ".", "layer1", "(", "out", ")", "\n", "out", "=", "self", ".", "layer2", "(", "out", ")", "\n", "out", "=", "self", ".", "layer3", "(", "out", ")", "\n", "out", "=", "self", ".", "layer4", "(", "out", ")", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.arpl_models.resnet.ResNet.penultimate_forward": [[204, 214], ["torch.relu", "torch.relu", "torch.relu", "resnet.ResNet.layer1", "resnet.ResNet.layer2", "resnet.ResNet.layer3", "resnet.ResNet.layer4", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "out.view.view.view", "resnet.ResNet.linear", "resnet.ResNet.bn1", "out.view.view.size", "resnet.ResNet.conv1"], "methods", ["None"], ["", "def", "penultimate_forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "layer1", "(", "out", ")", "\n", "out", "=", "self", ".", "layer2", "(", "out", ")", "\n", "out", "=", "self", ".", "layer3", "(", "out", ")", "\n", "penultimate", "=", "self", ".", "layer4", "(", "out", ")", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "penultimate", ",", "4", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "y", "=", "self", ".", "linear", "(", "out", ")", "\n", "return", "y", ",", "penultimate", "\n", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.arpl_models.resnet.conv3x3": [[19, 21], ["torch.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.arpl_models.resnet.ResNet18": [[215, 217], ["resnet.ResNet"], "function", ["None"], ["", "", "def", "ResNet18", "(", "num_c", ")", ":", "\n", "    ", "return", "ResNet", "(", "PreActBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "num_classes", "=", "num_c", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.arpl_models.resnet.ResNet34": [[218, 220], ["resnet.ResNet"], "function", ["None"], ["", "def", "ResNet34", "(", "num_c", ")", ":", "\n", "    ", "return", "ResNet", "(", "BasicBlock", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "num_classes", "=", "num_c", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.arpl_models.resnet.ResNet50": [[221, 223], ["resnet.ResNet"], "function", ["None"], ["", "def", "ResNet50", "(", "num_c", ")", ":", "\n", "    ", "return", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "num_classes", "=", "num_c", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.arpl_models.resnet.ResNet101": [[224, 226], ["resnet.ResNet"], "function", ["None"], ["", "def", "ResNet101", "(", "num_c", ")", ":", "\n", "    ", "return", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "num_classes", "=", "num_c", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.arpl_models.resnet.ResNet152": [[227, 229], ["resnet.ResNet"], "function", ["None"], ["", "def", "ResNet152", "(", "num_c", ")", ":", "\n", "    ", "return", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "8", ",", "36", ",", "3", "]", ",", "num_classes", "=", "num_c", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.arpl_models.resnet.test": [[231, 235], ["resnet.ResNet18", "ResNet18.", "print", "torch.autograd.Variable", "net.size", "torch.randn", "torch.randn", "torch.randn"], "function", ["home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.arpl_models.resnet.ResNet18"], ["", "def", "test", "(", ")", ":", "\n", "    ", "net", "=", "ResNet18", "(", ")", "\n", "y", "=", "net", "(", "Variable", "(", "torch", ".", "randn", "(", "1", ",", "3", ",", "32", ",", "32", ")", ")", ")", "\n", "print", "(", "y", ".", "size", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.arpl_models.ABN._MultiBatchNorm.__init__": [[7, 13], ["torch.nn.Module.__init__", "torch.nn.ModuleList", "torch.nn.BatchNorm2d", "range"], "methods", ["home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.loss.ARPLoss.ARPLoss.__init__"], ["def", "__init__", "(", "self", ",", "num_features", ",", "num_classes", ",", "eps", "=", "1e-5", ",", "momentum", "=", "0.1", ",", "affine", "=", "True", ",", "\n", "track_running_stats", "=", "True", ")", ":", "\n", "        ", "super", "(", "_MultiBatchNorm", ",", "self", ")", ".", "__init__", "(", ")", "\n", "#         self.bns = nn.ModuleList([nn.modules.batchnorm._BatchNorm(num_features, eps, momentum, affine, track_running_stats) for _ in range(num_classes)])", "\n", "self", ".", "bns", "=", "nn", ".", "ModuleList", "(", "\n", "[", "nn", ".", "BatchNorm2d", "(", "num_features", ",", "eps", ",", "momentum", ",", "affine", ",", "track_running_stats", ")", "for", "_", "in", "range", "(", "num_classes", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.arpl_models.ABN._MultiBatchNorm.reset_running_stats": [[14, 17], ["bn.reset_running_stats"], "methods", ["home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.arpl_models.ABN._MultiBatchNorm.reset_running_stats"], ["", "def", "reset_running_stats", "(", "self", ")", ":", "\n", "        ", "for", "bn", "in", "self", ".", "bns", ":", "\n", "            ", "bn", ".", "reset_running_stats", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.arpl_models.ABN._MultiBatchNorm.reset_parameters": [[18, 21], ["bn.reset_parameters"], "methods", ["home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.arpl_models.ABN._MultiBatchNorm.reset_parameters"], ["", "", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "for", "bn", "in", "self", ".", "bns", ":", "\n", "            ", "bn", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.arpl_models.ABN._MultiBatchNorm._check_input_dim": [[22, 24], ["None"], "methods", ["None"], ["", "", "def", "_check_input_dim", "(", "self", ",", "input", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.arpl_models.ABN._MultiBatchNorm.forward": [[25, 29], ["ABN._MultiBatchNorm._check_input_dim", "bn"], "methods", ["home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.arpl_models.ABN.MultiBatchNorm._check_input_dim"], ["", "def", "forward", "(", "self", ",", "x", ",", "domain_label", ")", ":", "\n", "        ", "self", ".", "_check_input_dim", "(", "x", ")", "\n", "bn", "=", "self", ".", "bns", "[", "domain_label", "[", "0", "]", "]", "\n", "return", "bn", "(", "x", ")", ",", "domain_label", "\n", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.arpl_models.ABN.MultiBatchNorm._check_input_dim": [[32, 36], ["input.dim", "ValueError", "input.dim"], "methods", ["None"], ["    ", "def", "_check_input_dim", "(", "self", ",", "input", ")", ":", "\n", "        ", "if", "input", ".", "dim", "(", ")", "!=", "4", ":", "\n", "            ", "raise", "ValueError", "(", "'expected 4D input (got {}D input)'", "\n", ".", "format", "(", "input", ".", "dim", "(", ")", ")", ")", "", "", "", "", ""]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.arpl_models.resnetABN.Conv2d.__init__": [[42, 51], ["_pair", "_pair", "_pair", "_pair", "torch.nn.modules.conv._ConvNd.__init__", "_pair"], "methods", ["home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.loss.ARPLoss.ARPLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", "=", "1", ",", "\n", "padding", "=", "0", ",", "dilation", "=", "1", ",", "groups", "=", "1", ",", "bias", "=", "True", ")", ":", "\n", "        ", "kernel_size", "=", "_pair", "(", "kernel_size", ")", "\n", "stride", "=", "_pair", "(", "stride", ")", "\n", "padding", "=", "_pair", "(", "padding", ")", "\n", "dilation", "=", "_pair", "(", "dilation", ")", "\n", "super", "(", "Conv2d", ",", "self", ")", ".", "__init__", "(", "\n", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", ",", "padding", ",", "dilation", ",", "\n", "False", ",", "_pair", "(", "0", ")", ",", "groups", ",", "bias", ",", "padding_mode", "=", "'zeros'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.arpl_models.resnetABN.Conv2d.forward": [[52, 55], ["torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ",", "domain_label", ")", ":", "\n", "        ", "return", "F", ".", "conv2d", "(", "input", ",", "self", ".", "weight", ",", "self", ".", "bias", ",", "self", ".", "stride", ",", "\n", "self", ".", "padding", ",", "self", ".", "dilation", ",", "self", ".", "groups", ")", ",", "domain_label", "\n", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.arpl_models.resnetABN.TwoInputSequential.__init__": [[61, 69], ["torch.Module.__init__", "isinstance", "args[].items", "enumerate", "len", "resnetABN.TwoInputSequential.add_module", "resnetABN.TwoInputSequential.add_module", "str"], "methods", ["home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.loss.ARPLoss.ARPLoss.__init__"], ["def", "__init__", "(", "self", ",", "*", "args", ")", ":", "\n", "        ", "super", "(", "TwoInputSequential", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "len", "(", "args", ")", "==", "1", "and", "isinstance", "(", "args", "[", "0", "]", ",", "OrderedDict", ")", ":", "\n", "            ", "for", "key", ",", "module", "in", "args", "[", "0", "]", ".", "items", "(", ")", ":", "\n", "                ", "self", ".", "add_module", "(", "key", ",", "module", ")", "\n", "", "", "else", ":", "\n", "            ", "for", "idx", ",", "module", "in", "enumerate", "(", "args", ")", ":", "\n", "                ", "self", ".", "add_module", "(", "str", "(", "idx", ")", ",", "module", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.arpl_models.resnetABN.TwoInputSequential._get_item_by_idx": [[70, 78], ["len", "operator.index", "next", "IndexError", "itertools.islice"], "methods", ["None"], ["", "", "", "def", "_get_item_by_idx", "(", "self", ",", "iterator", ",", "idx", ")", ":", "\n", "        ", "\"\"\"Get the idx-th item of the iterator\"\"\"", "\n", "size", "=", "len", "(", "self", ")", "\n", "idx", "=", "operator", ".", "index", "(", "idx", ")", "\n", "if", "not", "-", "size", "<=", "idx", "<", "size", ":", "\n", "            ", "raise", "IndexError", "(", "'index {} is out of range'", ".", "format", "(", "idx", ")", ")", "\n", "", "idx", "%=", "size", "\n", "return", "next", "(", "islice", "(", "iterator", ",", "idx", ",", "None", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.arpl_models.resnetABN.TwoInputSequential.__getitem__": [[79, 84], ["isinstance", "resnetABN.TwoInputSequential", "resnetABN.TwoInputSequential._get_item_by_idx", "collections.OrderedDict", "resnetABN.TwoInputSequential._modules.values", "list", "resnetABN.TwoInputSequential._modules.items"], "methods", ["home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.arpl_models.resnetABN.TwoInputSequential._get_item_by_idx"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "if", "isinstance", "(", "idx", ",", "slice", ")", ":", "\n", "            ", "return", "TwoInputSequential", "(", "OrderedDict", "(", "list", "(", "self", ".", "_modules", ".", "items", "(", ")", ")", "[", "idx", "]", ")", ")", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "_get_item_by_idx", "(", "self", ".", "_modules", ".", "values", "(", ")", ",", "idx", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.arpl_models.resnetABN.TwoInputSequential.__setitem__": [[85, 88], ["resnetABN.TwoInputSequential._get_item_by_idx", "setattr", "resnetABN.TwoInputSequential._modules.keys"], "methods", ["home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.arpl_models.resnetABN.TwoInputSequential._get_item_by_idx"], ["", "", "def", "__setitem__", "(", "self", ",", "idx", ",", "module", ")", ":", "\n", "        ", "key", "=", "self", ".", "_get_item_by_idx", "(", "self", ".", "_modules", ".", "keys", "(", ")", ",", "idx", ")", "\n", "return", "setattr", "(", "self", ",", "key", ",", "module", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.arpl_models.resnetABN.TwoInputSequential.__delitem__": [[89, 96], ["isinstance", "resnetABN.TwoInputSequential._get_item_by_idx", "delattr", "list", "delattr", "resnetABN.TwoInputSequential._modules.keys", "resnetABN.TwoInputSequential._modules.keys"], "methods", ["home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.arpl_models.resnetABN.TwoInputSequential._get_item_by_idx"], ["", "def", "__delitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "if", "isinstance", "(", "idx", ",", "slice", ")", ":", "\n", "            ", "for", "key", "in", "list", "(", "self", ".", "_modules", ".", "keys", "(", ")", ")", "[", "idx", "]", ":", "\n", "                ", "delattr", "(", "self", ",", "key", ")", "\n", "", "", "else", ":", "\n", "            ", "key", "=", "self", ".", "_get_item_by_idx", "(", "self", ".", "_modules", ".", "keys", "(", ")", ",", "idx", ")", "\n", "delattr", "(", "self", ",", "key", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.arpl_models.resnetABN.TwoInputSequential.__len__": [[97, 99], ["len"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "_modules", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.arpl_models.resnetABN.TwoInputSequential.__dir__": [[100, 104], ["torch.Module.__dir__", "key.isdigit"], "methods", ["home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.arpl_models.resnetABN.TwoInputSequential.__dir__"], ["", "def", "__dir__", "(", "self", ")", ":", "\n", "        ", "keys", "=", "super", "(", "TwoInputSequential", ",", "self", ")", ".", "__dir__", "(", ")", "\n", "keys", "=", "[", "key", "for", "key", "in", "keys", "if", "not", "key", ".", "isdigit", "(", ")", "]", "\n", "return", "keys", "\n", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.arpl_models.resnetABN.TwoInputSequential.forward": [[105, 109], ["resnetABN.TwoInputSequential._modules.values", "module"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input1", ",", "input2", ")", ":", "\n", "        ", "for", "module", "in", "self", ".", "_modules", ".", "values", "(", ")", ":", "\n", "            ", "input1", ",", "input2", "=", "module", "(", "input1", ",", "input2", ")", "\n", "", "return", "input1", ",", "input2", "\n", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.arpl_models.resnetABN.ResNetABN.__init__": [[174, 187], ["torch.Module.__init__", "resnetABN.conv3x3", "methods.ARPL.arpl_models.ABN.MultiBatchNorm", "resnetABN.ResNetABN._make_layer", "resnetABN.ResNetABN._make_layer", "resnetABN.ResNetABN._make_layer", "resnetABN.ResNetABN._make_layer", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.loss.ARPLoss.ARPLoss.__init__", "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.arpl_models.resnetABN.conv3x3", "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.arpl_models.resnetABN.ResNetABN._make_layer", "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.arpl_models.resnetABN.ResNetABN._make_layer", "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.arpl_models.resnetABN.ResNetABN._make_layer", "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.arpl_models.resnetABN.ResNetABN._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "layers", ",", "num_classes", "=", "10", ",", "num_bns", "=", "2", ",", "first_layer_conv", "=", "3", ")", ":", "\n", "        ", "self", ".", "inplanes", "=", "64", "\n", "self", ".", "num_bns", "=", "num_bns", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "super", "(", "ResNetABN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "3", ",", "64", ",", "kernel_size", "=", "first_layer_conv", ")", "\n", "self", ".", "bn1", "=", "MultiBatchNorm", "(", "64", ",", "self", ".", "num_bns", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ",", "stride", "=", "1", ",", "num_bns", "=", "self", ".", "num_bns", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ",", "num_bns", "=", "self", ".", "num_bns", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ",", "num_bns", "=", "self", ".", "num_bns", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "2", ",", "num_bns", "=", "self", ".", "num_bns", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "512", "*", "block", ".", "expansion", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.arpl_models.resnetABN.ResNetABN._make_layer": [[188, 205], ["layers.append", "range", "resnetABN.TwoInputSequential", "resnetABN.TwoInputSequential", "block", "layers.append", "resnetABN.Conv2d", "methods.ARPL.arpl_models.ABN.MultiBatchNorm", "block"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ",", "num_bns", "=", "2", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "TwoInputSequential", "(", "\n", "Conv2d", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "MultiBatchNorm", "(", "planes", "*", "block", ".", "expansion", ",", "num_bns", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ",", "num_bns", "=", "num_bns", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "\n", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "num_bns", "=", "num_bns", ")", ")", "\n", "\n", "", "return", "TwoInputSequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.arpl_models.resnetABN.ResNetABN.forward": [[206, 225], ["resnetABN.ResNetABN.conv1", "resnetABN.ResNetABN.bn1", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "resnetABN.ResNetABN.layer1", "resnetABN.ResNetABN.layer2", "resnetABN.ResNetABN.layer3", "resnetABN.ResNetABN.layer4", "resnetABN.ResNetABN.avgpool", "resnetABN.ResNetABN.view", "resnetABN.ResNetABN.fc", "resnetABN.ResNetABN.size", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "rf", "=", "False", ",", "domain_label", "=", "None", ")", ":", "\n", "        ", "if", "domain_label", "is", "None", ":", "\n", "            ", "domain_label", "=", "0", "*", "torch", ".", "ones", "(", "x", ".", "shape", "[", "0", "]", ",", "dtype", "=", "torch", ".", "long", ")", ".", "cuda", "(", ")", "\n", "", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", ",", "_", "=", "self", ".", "bn1", "(", "x", ",", "domain_label", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "x", ",", "_", "=", "self", ".", "layer1", "(", "x", ",", "domain_label", ")", "\n", "x", ",", "_", "=", "self", ".", "layer2", "(", "x", ",", "domain_label", ")", "\n", "x", ",", "_", "=", "self", ".", "layer3", "(", "x", ",", "domain_label", ")", "\n", "x", ",", "_", "=", "self", ".", "layer4", "(", "x", ",", "domain_label", ")", "\n", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "feat", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "x", "=", "self", ".", "fc", "(", "feat", ")", "\n", "\n", "if", "rf", ":", "\n", "            ", "return", "feat", ",", "x", "\n", "", "else", ":", "\n", "            ", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.arpl_models.resnetABN.BasicBlock.__init__": [[230, 238], ["torch.Module.__init__", "resnetABN.conv3x3", "methods.ARPL.arpl_models.ABN.MultiBatchNorm", "resnetABN.conv3x3", "methods.ARPL.arpl_models.ABN.MultiBatchNorm"], "methods", ["home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.loss.ARPLoss.ARPLoss.__init__", "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.arpl_models.resnetABN.conv3x3", "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.arpl_models.resnetABN.conv3x3"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ",", "num_bns", "=", "2", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn1", "=", "MultiBatchNorm", "(", "planes", ",", "num_bns", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "MultiBatchNorm", "(", "planes", ",", "num_bns", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.arpl_models.resnetABN.BasicBlock.forward": [[239, 256], ["resnetABN.BasicBlock.conv1", "resnetABN.BasicBlock.bn1", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "resnetABN.BasicBlock.conv2", "resnetABN.BasicBlock.bn2", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "resnetABN.BasicBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "domain_label", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", ",", "_", "=", "self", ".", "bn1", "(", "out", ",", "domain_label", ")", "\n", "out", "=", "F", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", ",", "_", "=", "self", ".", "bn2", "(", "out", ",", "domain_label", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", ",", "_", "=", "self", ".", "downsample", "(", "x", ",", "domain_label", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "F", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", ",", "domain_label", "\n", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.arpl_models.resnetABN.Bottleneck.__init__": [[261, 273], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "methods.ARPL.arpl_models.ABN.MultiBatchNorm", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "methods.ARPL.arpl_models.ABN.MultiBatchNorm", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "methods.ARPL.arpl_models.ABN.MultiBatchNorm", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.loss.ARPLoss.ARPLoss.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ",", "num_bns", "=", "2", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "MultiBatchNorm", "(", "planes", ",", "num_bns", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "MultiBatchNorm", "(", "planes", ",", "num_bns", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", "*", "4", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "MultiBatchNorm", "(", "planes", "*", "4", ",", "num_bns", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.arpl_models.resnetABN.Bottleneck.forward": [[274, 295], ["resnetABN.Bottleneck.conv1", "resnetABN.Bottleneck.bn1", "resnetABN.Bottleneck.relu", "resnetABN.Bottleneck.conv2", "resnetABN.Bottleneck.bn2", "resnetABN.Bottleneck.relu", "resnetABN.Bottleneck.conv3", "resnetABN.Bottleneck.bn3", "resnetABN.Bottleneck.relu", "resnetABN.Bottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "domain_label", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", ",", "_", "=", "self", ".", "bn1", "(", "out", ",", "domain_label", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", ",", "_", "=", "self", ".", "bn2", "(", "out", ",", "domain_label", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", ",", "_", "=", "self", ".", "bn3", "(", "out", ",", "domain_label", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", ",", "_", "=", "self", ".", "downsample", "(", "x", ",", "domain_label", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", ",", "domain_label", "", "", "", ""]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.arpl_models.resnetABN.conv3x3": [[27, 31], ["torch.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ",", "kernel_size", "=", "3", ")", ":", "\n", "    ", "\"\"\"3x3 convolution with padding\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "kernel_size", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.arpl_models.resnetABN.resnet18ABN": [[111, 115], ["resnetABN.ResNetABN"], "function", ["None"], ["", "", "def", "resnet18ABN", "(", "num_classes", "=", "10", ",", "num_bns", "=", "2", ")", ":", "\n", "    ", "model", "=", "ResNetABN", "(", "BasicBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "num_classes", "=", "num_classes", ",", "num_bns", "=", "num_bns", ")", "\n", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.arpl_models.resnetABN.resnet34ABN": [[117, 121], ["resnetABN.ResNetABN"], "function", ["None"], ["", "def", "resnet34ABN", "(", "num_classes", "=", "10", ",", "num_bns", "=", "2", ")", ":", "\n", "    ", "model", "=", "ResNetABN", "(", "BasicBlock", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "num_classes", "=", "num_classes", ",", "num_bns", "=", "num_bns", ")", "\n", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.arpl_models.resnetABN.resnet50ABN": [[122, 127], ["resnetABN.ResNetABN"], "function", ["None"], ["", "def", "resnet50ABN", "(", "num_classes", "=", "10", ",", "num_bns", "=", "2", ",", "first_layer_conv", "=", "3", ")", ":", "\n", "    ", "model", "=", "ResNetABN", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "num_classes", "=", "num_classes", ",", "num_bns", "=", "num_bns", ",", "\n", "first_layer_conv", "=", "first_layer_conv", ")", "\n", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.arpl_models.resnetABN._update_initial_weights_ABN": [[132, 171], ["state_dict.copy", "state_dict.items", "list", "len", "state_dict.copy.keys", "range", "range", "range", "range", "print", "val.data.clone", "range", "val.data.clone", "val.data.clone", "val.data.clone", "val.data.clone", "state_dict.copy.keys", "len"], "function", ["None"], ["", "def", "_update_initial_weights_ABN", "(", "state_dict", ",", "num_classes", "=", "1000", ",", "num_bns", "=", "2", ",", "ABN_type", "=", "'all'", ")", ":", "\n", "    ", "new_state_dict", "=", "state_dict", ".", "copy", "(", ")", "\n", "\n", "for", "key", ",", "val", "in", "state_dict", ".", "items", "(", ")", ":", "\n", "        ", "update_dict", "=", "False", "\n", "if", "(", "(", "(", "'bn'", "in", "key", "or", "'downsample.1'", "in", "key", ")", "and", "ABN_type", "==", "'all'", ")", "or", "\n", "(", "(", "'bn1'", "in", "key", ")", "and", "ABN_type", "==", "'partial-bn1'", ")", ")", ":", "\n", "            ", "update_dict", "=", "True", "\n", "\n", "", "if", "(", "update_dict", ")", ":", "\n", "            ", "if", "'weight'", "in", "key", ":", "\n", "                ", "for", "d", "in", "range", "(", "num_bns", ")", ":", "\n", "                    ", "new_state_dict", "[", "key", "[", "0", ":", "-", "6", "]", "+", "'bns.{}.weight'", ".", "format", "(", "d", ")", "]", "=", "val", ".", "data", ".", "clone", "(", ")", "\n", "\n", "", "", "elif", "'bias'", "in", "key", ":", "\n", "                ", "for", "d", "in", "range", "(", "num_bns", ")", ":", "\n", "                    ", "new_state_dict", "[", "key", "[", "0", ":", "-", "4", "]", "+", "'bns.{}.bias'", ".", "format", "(", "d", ")", "]", "=", "val", ".", "data", ".", "clone", "(", ")", "\n", "\n", "", "", "if", "'running_mean'", "in", "key", ":", "\n", "                ", "for", "d", "in", "range", "(", "num_bns", ")", ":", "\n", "                    ", "new_state_dict", "[", "key", "[", "0", ":", "-", "12", "]", "+", "'bns.{}.running_mean'", ".", "format", "(", "d", ")", "]", "=", "val", ".", "data", ".", "clone", "(", ")", "\n", "\n", "", "", "if", "'running_var'", "in", "key", ":", "\n", "                ", "for", "d", "in", "range", "(", "num_bns", ")", ":", "\n", "                    ", "new_state_dict", "[", "key", "[", "0", ":", "-", "11", "]", "+", "'bns.{}.running_var'", ".", "format", "(", "d", ")", "]", "=", "val", ".", "data", ".", "clone", "(", ")", "\n", "\n", "", "", "if", "'num_batches_tracked'", "in", "key", ":", "\n", "                ", "for", "d", "in", "range", "(", "num_bns", ")", ":", "\n", "                    ", "new_state_dict", "[", "\n", "key", "[", "0", ":", "-", "len", "(", "'num_batches_tracked'", ")", "]", "+", "'bns.{}.num_batches_tracked'", ".", "format", "(", "d", ")", "]", "=", "val", ".", "data", ".", "clone", "(", ")", "\n", "\n", "", "", "", "", "if", "num_classes", "!=", "1000", "or", "len", "(", "[", "key", "for", "key", "in", "new_state_dict", ".", "keys", "(", ")", "if", "'fc'", "in", "key", "]", ")", ">", "1", ":", "\n", "        ", "key_list", "=", "list", "(", "new_state_dict", ".", "keys", "(", ")", ")", "\n", "for", "key", "in", "key_list", ":", "\n", "            ", "if", "'fc'", "in", "key", ":", "\n", "                ", "print", "(", "'pretrained {} are not used as initial params.'", ".", "format", "(", "key", ")", ")", "\n", "del", "new_state_dict", "[", "key", "]", "\n", "\n", "", "", "", "return", "new_state_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.core.train.train": [[9, 36], ["net.train", "methods.ARPL.arpl_utils.AverageMeter", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "enumerate", "print", "tqdm.tqdm", "methods.ARPL.arpl_utils.AverageMeter.update", "torch.set_grad_enabled", "torch.set_grad_enabled", "optimizer.zero_grad", "net", "criterion", "loss.backward", "optimizer.step", "loss.item", "data.size", "len", "data.cuda", "labels.cuda"], "function", ["home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.core.train.train", "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.ARPL.arpl_utils.AverageMeter.update", "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.models.miscel_utils.SwishImplementation.backward", "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.utils.schedulers.CosineAnnealingWarmupRestarts_New.step"], ["def", "train", "(", "net", ",", "criterion", ",", "optimizer", ",", "trainloader", ",", "epoch", "=", "None", ",", "**", "options", ")", ":", "\n", "    ", "net", ".", "train", "(", ")", "\n", "losses", "=", "AverageMeter", "(", ")", "\n", "\n", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "\n", "loss_all", "=", "0", "\n", "for", "batch_idx", ",", "(", "data", ",", "labels", ",", "idx", ")", "in", "enumerate", "(", "tqdm", "(", "trainloader", ")", ")", ":", "\n", "\n", "        ", "if", "options", "[", "'use_gpu'", "]", ":", "\n", "            ", "data", ",", "labels", "=", "data", ".", "cuda", "(", ")", ",", "labels", ".", "cuda", "(", ")", "\n", "\n", "", "with", "torch", ".", "set_grad_enabled", "(", "True", ")", ":", "\n", "            ", "optimizer", ".", "zero_grad", "(", ")", "\n", "x", ",", "y", "=", "net", "(", "data", ",", "True", ")", "\n", "logits", ",", "loss", "=", "criterion", "(", "x", ",", "y", ",", "labels", ")", "\n", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "", "losses", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "data", ".", "size", "(", "0", ")", ")", "\n", "\n", "loss_all", "+=", "losses", ".", "avg", "\n", "\n", "", "print", "(", "\"Batch {}/{}\\t Loss {:.6f} ({:.6f})\"", ".", "format", "(", "batch_idx", "+", "1", ",", "len", "(", "trainloader", ")", ",", "losses", ".", "val", ",", "losses", ".", "avg", ")", ")", "\n", "\n", "return", "loss_all", "\n", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.core.train.train_cs": [[37, 135], ["print", "net.train", "netD.train", "netG.train", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "enumerate", "print", "methods.ARPL.arpl_utils.AverageMeter", "methods.ARPL.arpl_utils.AverageMeter", "methods.ARPL.arpl_utils.AverageMeter", "tqdm.tqdm", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().normal_().cuda", "torch.FloatTensor().normal_().cuda", "torch.autograd.Variable", "netG", "gan_target.cuda.fill_", "torch.autograd.Variable", "optimizerD.zero_grad", "netD", "criterionD", "criterionD.backward", "torch.autograd.Variable", "netD", "criterionD", "criterionD.backward", "optimizerD.step", "optimizerG.zero_grad", "torch.autograd.Variable", "netD", "criterionD", "net", "criterion.fake_loss().mean", "generator_loss.backward", "optimizerG.step", "lossesG.update", "lossesD.update", "optimizer.zero_grad", "net", "criterion", "torch.FloatTensor().normal_().cuda", "torch.FloatTensor().normal_().cuda", "torch.autograd.Variable", "netG", "net", "criterion.fake_loss().mean", "total_loss.backward", "optimizer.step", "losses.update", "data.cuda.cuda", "labels.cuda.cuda", "gan_target.cuda.cuda", "torch.autograd.Variable", "torch.autograd.Variable", "noise.cuda.cuda", "gan_target.cuda.fill_", "netG.detach", "gan_target.cuda.fill_", "generator_loss.item", "labels.cuda.size", "errD.item", "labels.cuda.size", "noise.cuda.cuda", "total_loss.item", "labels.cuda.size", "len", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor().normal_", "torch.FloatTensor().normal_", "torch.ones().cuda", "torch.ones().cuda", "criterion.fake_loss", "torch.ones().cuda", "torch.ones().cuda", "torch.FloatTensor().normal_", "torch.FloatTensor().normal_", "torch.ones().cuda", "torch.ones().cuda", "criterion.fake_loss", "labels.cuda.size", "torch.FloatTensor", "torch.FloatTensor", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.FloatTensor", "torch.FloatTensor", "torch.ones", "torch.ones", "data.cuda.size", "data.cuda.size"], "function", ["home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.core.train.train", "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.core.train.train", "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.core.train.train", "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.models.miscel_utils.SwishImplementation.backward", "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.models.miscel_utils.SwishImplementation.backward", "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.utils.schedulers.CosineAnnealingWarmupRestarts_New.step", "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.models.miscel_utils.SwishImplementation.backward", "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.utils.schedulers.CosineAnnealingWarmupRestarts_New.step", "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.ARPL.arpl_utils.AverageMeter.update", "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.ARPL.arpl_utils.AverageMeter.update", "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.models.miscel_utils.SwishImplementation.backward", "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.utils.schedulers.CosineAnnealingWarmupRestarts_New.step", "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.ARPL.arpl_utils.AverageMeter.update", "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.loss.ARPLoss.ARPLoss.fake_loss", "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.loss.ARPLoss.ARPLoss.fake_loss"], ["", "def", "train_cs", "(", "net", ",", "netD", ",", "netG", ",", "criterion", ",", "criterionD", ",", "optimizer", ",", "optimizerD", ",", "optimizerG", ",", "\n", "trainloader", ",", "epoch", "=", "None", ",", "**", "options", ")", ":", "\n", "    ", "print", "(", "'train with confusing samples'", ")", "\n", "losses", ",", "lossesG", ",", "lossesD", "=", "AverageMeter", "(", ")", ",", "AverageMeter", "(", ")", ",", "AverageMeter", "(", ")", "\n", "\n", "net", ".", "train", "(", ")", "\n", "netD", ".", "train", "(", ")", "\n", "netG", ".", "train", "(", ")", "\n", "\n", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "\n", "loss_all", ",", "real_label", ",", "fake_label", "=", "0", ",", "1", ",", "0", "\n", "for", "batch_idx", ",", "(", "data", ",", "labels", ",", "idx", ")", "in", "enumerate", "(", "tqdm", "(", "trainloader", ")", ")", ":", "\n", "        ", "gan_target", "=", "torch", ".", "FloatTensor", "(", "labels", ".", "size", "(", ")", ")", ".", "fill_", "(", "0", ")", "\n", "if", "options", "[", "'use_gpu'", "]", ":", "\n", "            ", "data", "=", "data", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "labels", "=", "labels", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "gan_target", "=", "gan_target", ".", "cuda", "(", ")", "\n", "\n", "", "data", ",", "labels", "=", "Variable", "(", "data", ")", ",", "Variable", "(", "labels", ")", "\n", "\n", "noise", "=", "torch", ".", "FloatTensor", "(", "data", ".", "size", "(", "0", ")", ",", "options", "[", "'nz'", "]", ",", "options", "[", "'ns'", "]", ",", "options", "[", "'ns'", "]", ")", ".", "normal_", "(", "0", ",", "1", ")", ".", "cuda", "(", ")", "\n", "if", "options", "[", "'use_gpu'", "]", ":", "\n", "            ", "noise", "=", "noise", ".", "cuda", "(", ")", "\n", "", "noise", "=", "Variable", "(", "noise", ")", "\n", "fake", "=", "netG", "(", "noise", ")", "\n", "\n", "###########################", "\n", "# (1) Update D network    #", "\n", "###########################", "\n", "# train with real", "\n", "gan_target", ".", "fill_", "(", "real_label", ")", "\n", "targetv", "=", "Variable", "(", "gan_target", ")", "\n", "optimizerD", ".", "zero_grad", "(", ")", "\n", "output", "=", "netD", "(", "data", ")", "\n", "errD_real", "=", "criterionD", "(", "output", ",", "targetv", ")", "\n", "errD_real", ".", "backward", "(", ")", "\n", "\n", "# train with fake", "\n", "targetv", "=", "Variable", "(", "gan_target", ".", "fill_", "(", "fake_label", ")", ")", "\n", "output", "=", "netD", "(", "fake", ".", "detach", "(", ")", ")", "\n", "errD_fake", "=", "criterionD", "(", "output", ",", "targetv", ")", "\n", "errD_fake", ".", "backward", "(", ")", "\n", "errD", "=", "errD_real", "+", "errD_fake", "\n", "optimizerD", ".", "step", "(", ")", "\n", "\n", "###########################", "\n", "# (2) Update G network    #", "\n", "###########################", "\n", "optimizerG", ".", "zero_grad", "(", ")", "\n", "# Original GAN loss", "\n", "targetv", "=", "Variable", "(", "gan_target", ".", "fill_", "(", "real_label", ")", ")", "\n", "output", "=", "netD", "(", "fake", ")", "\n", "errG", "=", "criterionD", "(", "output", ",", "targetv", ")", "\n", "\n", "# minimize the true distribution", "\n", "x", ",", "y", "=", "net", "(", "fake", ",", "True", ",", "1", "*", "torch", ".", "ones", "(", "data", ".", "shape", "[", "0", "]", ",", "dtype", "=", "torch", ".", "long", ")", ".", "cuda", "(", ")", ")", "\n", "errG_F", "=", "criterion", ".", "fake_loss", "(", "x", ")", ".", "mean", "(", ")", "\n", "generator_loss", "=", "errG", "+", "options", "[", "'beta'", "]", "*", "errG_F", "\n", "generator_loss", ".", "backward", "(", ")", "\n", "optimizerG", ".", "step", "(", ")", "\n", "\n", "lossesG", ".", "update", "(", "generator_loss", ".", "item", "(", ")", ",", "labels", ".", "size", "(", "0", ")", ")", "\n", "lossesD", ".", "update", "(", "errD", ".", "item", "(", ")", ",", "labels", ".", "size", "(", "0", ")", ")", "\n", "\n", "\n", "###########################", "\n", "# (3) Update classifier   #", "\n", "###########################", "\n", "# cross entropy loss", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "x", ",", "y", "=", "net", "(", "data", ",", "True", ",", "0", "*", "torch", ".", "ones", "(", "data", ".", "shape", "[", "0", "]", ",", "dtype", "=", "torch", ".", "long", ")", ".", "cuda", "(", ")", ")", "\n", "_", ",", "loss", "=", "criterion", "(", "x", ",", "y", ",", "labels", ")", "\n", "\n", "# KL divergence", "\n", "noise", "=", "torch", ".", "FloatTensor", "(", "data", ".", "size", "(", "0", ")", ",", "options", "[", "'nz'", "]", ",", "options", "[", "'ns'", "]", ",", "options", "[", "'ns'", "]", ")", ".", "normal_", "(", "0", ",", "1", ")", ".", "cuda", "(", ")", "\n", "if", "options", "[", "'use_gpu'", "]", ":", "\n", "            ", "noise", "=", "noise", ".", "cuda", "(", ")", "\n", "", "noise", "=", "Variable", "(", "noise", ")", "\n", "fake", "=", "netG", "(", "noise", ")", "\n", "x", ",", "y", "=", "net", "(", "fake", ",", "True", ",", "1", "*", "torch", ".", "ones", "(", "data", ".", "shape", "[", "0", "]", ",", "dtype", "=", "torch", ".", "long", ")", ".", "cuda", "(", ")", ")", "\n", "F_loss_fake", "=", "criterion", ".", "fake_loss", "(", "x", ")", ".", "mean", "(", ")", "\n", "total_loss", "=", "loss", "+", "options", "[", "'beta'", "]", "*", "F_loss_fake", "\n", "total_loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "losses", ".", "update", "(", "total_loss", ".", "item", "(", ")", ",", "labels", ".", "size", "(", "0", ")", ")", "\n", "\n", "# if (batch_idx+1) % options['print_freq'] == 0:", "\n", "#     print(\"Batch {}/{}\\t Net {:.3f} ({:.3f}) G {:.3f} ({:.3f}) D {:.3f} ({:.3f})\" \\", "\n", "#     .format(batch_idx+1, len(trainloader), losses.val, losses.avg, lossesG.val, lossesG.avg, lossesD.val, lossesD.avg))", "\n", "\n", "loss_all", "+=", "losses", ".", "avg", "\n", "\n", "", "print", "(", "\"Batch {}/{}\\t Net {:.3f} ({:.3f}) G {:.3f} ({:.3f}) D {:.3f} ({:.3f})\"", ".", "format", "(", "batch_idx", "+", "1", ",", "len", "(", "trainloader", ")", ",", "losses", ".", "val", ",", "losses", ".", "avg", ",", "lossesG", ".", "val", ",", "lossesG", ".", "avg", ",", "lossesD", ".", "val", ",", "lossesD", ".", "avg", ")", ")", "\n", "\n", "return", "loss_all", "\n", "", ""]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.core.test.test": [[14, 80], ["net.eval", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "print", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "methods.ARPL.core.evaluation.compute_oscr", "sklearn.metrics.average_precision_score", "torch.no_grad", "torch.no_grad", "tqdm.tqdm", "enumerate", "float", "numpy.max", "numpy.max", "methods.ARPL.core.evaluation.metric_ood", "tqdm.tqdm", "float", "list", "list", "torch.set_grad_enabled", "torch.set_grad_enabled", "net", "criterion", "labels.size", "np.concatenate.append", "np.concatenate.append", "torch.set_grad_enabled", "torch.set_grad_enabled", "net", "criterion", "np.concatenate.append", "len", "len", "data.cuda", "labels.cuda", "logits.data.max", "logits.data.cpu().numpy", "labels.data.cpu().numpy", "data.cuda", "labels.cuda", "logits.data.cpu().numpy", "numpy.max", "numpy.max", "torch.nn.Softmax", "torch.nn.Softmax", "torch.nn.Softmax", "torch.nn.Softmax", "logits.data.cpu", "labels.data.cpu", "logits.data.cpu"], "function", ["home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.core.evaluation.compute_oscr", "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.core.evaluation.metric_ood"], ["def", "test", "(", "net", ",", "criterion", ",", "testloader", ",", "outloader", ",", "epoch", "=", "None", ",", "**", "options", ")", ":", "\n", "\n", "    ", "net", ".", "eval", "(", ")", "\n", "correct", ",", "total", "=", "0", ",", "0", "\n", "\n", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "\n", "_pred_k", ",", "_pred_u", ",", "_labels", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "data", ",", "labels", ",", "idx", "in", "tqdm", "(", "testloader", ")", ":", "\n", "            ", "if", "options", "[", "'use_gpu'", "]", ":", "\n", "                ", "data", ",", "labels", "=", "data", ".", "cuda", "(", ")", ",", "labels", ".", "cuda", "(", ")", "\n", "\n", "", "with", "torch", ".", "set_grad_enabled", "(", "False", ")", ":", "\n", "                ", "x", ",", "y", "=", "net", "(", "data", ",", "True", ")", "\n", "logits", ",", "_", "=", "criterion", "(", "x", ",", "y", ")", "\n", "predictions", "=", "logits", ".", "data", ".", "max", "(", "1", ")", "[", "1", "]", "\n", "total", "+=", "labels", ".", "size", "(", "0", ")", "\n", "correct", "+=", "(", "predictions", "==", "labels", ".", "data", ")", ".", "sum", "(", ")", "\n", "\n", "if", "options", "[", "'use_softmax_in_eval'", "]", ":", "\n", "                    ", "logits", "=", "torch", ".", "nn", ".", "Softmax", "(", "dim", "=", "-", "1", ")", "(", "logits", ")", "\n", "\n", "", "_pred_k", ".", "append", "(", "logits", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "_labels", ".", "append", "(", "labels", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "\n", "", "", "for", "batch_idx", ",", "(", "data", ",", "labels", ",", "idx", ")", "in", "enumerate", "(", "tqdm", "(", "outloader", ")", ")", ":", "\n", "            ", "if", "options", "[", "'use_gpu'", "]", ":", "\n", "                ", "data", ",", "labels", "=", "data", ".", "cuda", "(", ")", ",", "labels", ".", "cuda", "(", ")", "\n", "\n", "", "with", "torch", ".", "set_grad_enabled", "(", "False", ")", ":", "\n", "\n", "                ", "x", ",", "y", "=", "net", "(", "data", ",", "True", ")", "\n", "\n", "logits", ",", "_", "=", "criterion", "(", "x", ",", "y", ")", "\n", "\n", "if", "options", "[", "'use_softmax_in_eval'", "]", ":", "\n", "                    ", "logits", "=", "torch", ".", "nn", ".", "Softmax", "(", "dim", "=", "-", "1", ")", "(", "logits", ")", "\n", "\n", "", "_pred_u", ".", "append", "(", "logits", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "\n", "# Accuracy", "\n", "", "", "", "acc", "=", "float", "(", "correct", ")", "*", "100.", "/", "float", "(", "total", ")", "\n", "print", "(", "'Acc: {:.5f}'", ".", "format", "(", "acc", ")", ")", "\n", "\n", "_pred_k", "=", "np", ".", "concatenate", "(", "_pred_k", ",", "0", ")", "\n", "_pred_u", "=", "np", ".", "concatenate", "(", "_pred_u", ",", "0", ")", "\n", "_labels", "=", "np", ".", "concatenate", "(", "_labels", ",", "0", ")", "\n", "\n", "# Out-of-Distribution detction evaluation", "\n", "x1", ",", "x2", "=", "np", ".", "max", "(", "_pred_k", ",", "axis", "=", "1", ")", ",", "np", ".", "max", "(", "_pred_u", ",", "axis", "=", "1", ")", "\n", "results", "=", "evaluation", ".", "metric_ood", "(", "x1", ",", "x2", ")", "[", "'Bas'", "]", "\n", "\n", "# OSCR", "\n", "_oscr_socre", "=", "evaluation", ".", "compute_oscr", "(", "_pred_k", ",", "_pred_u", ",", "_labels", ")", "\n", "\n", "# Average precision", "\n", "ap_score", "=", "average_precision_score", "(", "[", "0", "]", "*", "len", "(", "_pred_k", ")", "+", "[", "1", "]", "*", "len", "(", "_pred_u", ")", ",", "\n", "list", "(", "-", "np", ".", "max", "(", "_pred_k", ",", "axis", "=", "-", "1", ")", ")", "+", "list", "(", "-", "np", ".", "max", "(", "_pred_u", ",", "axis", "=", "-", "1", ")", ")", ")", "\n", "\n", "results", "[", "'ACC'", "]", "=", "acc", "\n", "results", "[", "'OSCR'", "]", "=", "_oscr_socre", "*", "100.", "\n", "results", "[", "'AUPR'", "]", "=", "ap_score", "*", "100", "\n", "\n", "return", "results", "", "", ""]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.core.evaluation.get_curve_online": [[5, 40], ["dict", "dict", "dict", "known.sort", "novel.sort", "numpy.max", "numpy.min", "range", "numpy.abs().argmin", "numpy.ones", "numpy.ones", "numpy.max", "numpy.max", "numpy.min", "numpy.min", "numpy.arange", "numpy.abs", "numpy.arange"], "function", ["None"], ["def", "get_curve_online", "(", "known", ",", "novel", ",", "stypes", "=", "[", "'Bas'", "]", ")", ":", "\n", "    ", "tp", ",", "fp", "=", "dict", "(", ")", ",", "dict", "(", ")", "\n", "tnr_at_tpr95", "=", "dict", "(", ")", "\n", "for", "stype", "in", "stypes", ":", "\n", "        ", "known", ".", "sort", "(", ")", "\n", "novel", ".", "sort", "(", ")", "\n", "end", "=", "np", ".", "max", "(", "[", "np", ".", "max", "(", "known", ")", ",", "np", ".", "max", "(", "novel", ")", "]", ")", "\n", "start", "=", "np", ".", "min", "(", "[", "np", ".", "min", "(", "known", ")", ",", "np", ".", "min", "(", "novel", ")", "]", ")", "\n", "num_k", "=", "known", ".", "shape", "[", "0", "]", "\n", "num_n", "=", "novel", ".", "shape", "[", "0", "]", "\n", "tp", "[", "stype", "]", "=", "-", "np", ".", "ones", "(", "[", "num_k", "+", "num_n", "+", "1", "]", ",", "dtype", "=", "int", ")", "\n", "fp", "[", "stype", "]", "=", "-", "np", ".", "ones", "(", "[", "num_k", "+", "num_n", "+", "1", "]", ",", "dtype", "=", "int", ")", "\n", "tp", "[", "stype", "]", "[", "0", "]", ",", "fp", "[", "stype", "]", "[", "0", "]", "=", "num_k", ",", "num_n", "\n", "k", ",", "n", "=", "0", ",", "0", "\n", "for", "l", "in", "range", "(", "num_k", "+", "num_n", ")", ":", "\n", "            ", "if", "k", "==", "num_k", ":", "\n", "                ", "tp", "[", "stype", "]", "[", "l", "+", "1", ":", "]", "=", "tp", "[", "stype", "]", "[", "l", "]", "\n", "fp", "[", "stype", "]", "[", "l", "+", "1", ":", "]", "=", "np", ".", "arange", "(", "fp", "[", "stype", "]", "[", "l", "]", "-", "1", ",", "-", "1", ",", "-", "1", ")", "\n", "break", "\n", "", "elif", "n", "==", "num_n", ":", "\n", "                ", "tp", "[", "stype", "]", "[", "l", "+", "1", ":", "]", "=", "np", ".", "arange", "(", "tp", "[", "stype", "]", "[", "l", "]", "-", "1", ",", "-", "1", ",", "-", "1", ")", "\n", "fp", "[", "stype", "]", "[", "l", "+", "1", ":", "]", "=", "fp", "[", "stype", "]", "[", "l", "]", "\n", "break", "\n", "", "else", ":", "\n", "                ", "if", "novel", "[", "n", "]", "<", "known", "[", "k", "]", ":", "\n", "                    ", "n", "+=", "1", "\n", "tp", "[", "stype", "]", "[", "l", "+", "1", "]", "=", "tp", "[", "stype", "]", "[", "l", "]", "\n", "fp", "[", "stype", "]", "[", "l", "+", "1", "]", "=", "fp", "[", "stype", "]", "[", "l", "]", "-", "1", "\n", "", "else", ":", "\n", "                    ", "k", "+=", "1", "\n", "tp", "[", "stype", "]", "[", "l", "+", "1", "]", "=", "tp", "[", "stype", "]", "[", "l", "]", "-", "1", "\n", "fp", "[", "stype", "]", "[", "l", "+", "1", "]", "=", "fp", "[", "stype", "]", "[", "l", "]", "\n", "", "", "", "tpr95_pos", "=", "np", ".", "abs", "(", "tp", "[", "stype", "]", "/", "num_k", "-", ".95", ")", ".", "argmin", "(", ")", "\n", "tnr_at_tpr95", "[", "stype", "]", "=", "1.", "-", "fp", "[", "stype", "]", "[", "tpr95_pos", "]", "/", "num_n", "\n", "", "return", "tp", ",", "fp", ",", "tnr_at_tpr95", "\n", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.core.evaluation.metric_ood": [[41, 98], ["evaluation.get_curve_online", "dict", "print", "print", "dict", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "print", "print", "print", "print", "print", "print", "numpy.trapz", "print", "print", "numpy.trapz", "numpy.trapz"], "function", ["home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.core.evaluation.get_curve_online"], ["", "def", "metric_ood", "(", "x1", ",", "x2", ",", "stypes", "=", "[", "'Bas'", "]", ",", "verbose", "=", "True", ")", ":", "\n", "    ", "tp", ",", "fp", ",", "tnr_at_tpr95", "=", "get_curve_online", "(", "x1", ",", "x2", ",", "stypes", ")", "\n", "results", "=", "dict", "(", ")", "\n", "mtypes", "=", "[", "'TNR'", ",", "'AUROC'", ",", "'DTACC'", ",", "'AUIN'", ",", "'AUOUT'", "]", "\n", "if", "verbose", ":", "\n", "        ", "print", "(", "'      '", ",", "end", "=", "''", ")", "\n", "for", "mtype", "in", "mtypes", ":", "\n", "            ", "print", "(", "' {mtype:6s}'", ".", "format", "(", "mtype", "=", "mtype", ")", ",", "end", "=", "''", ")", "\n", "", "print", "(", "''", ")", "\n", "\n", "", "for", "stype", "in", "stypes", ":", "\n", "        ", "if", "verbose", ":", "\n", "            ", "print", "(", "'{stype:5s} '", ".", "format", "(", "stype", "=", "stype", ")", ",", "end", "=", "''", ")", "\n", "", "results", "[", "stype", "]", "=", "dict", "(", ")", "\n", "\n", "# TNR", "\n", "mtype", "=", "'TNR'", "\n", "results", "[", "stype", "]", "[", "mtype", "]", "=", "100.", "*", "tnr_at_tpr95", "[", "stype", "]", "\n", "if", "verbose", ":", "\n", "            ", "print", "(", "' {val:6.3f}'", ".", "format", "(", "val", "=", "results", "[", "stype", "]", "[", "mtype", "]", ")", ",", "end", "=", "''", ")", "\n", "\n", "# AUROC", "\n", "", "mtype", "=", "'AUROC'", "\n", "tpr", "=", "np", ".", "concatenate", "(", "[", "[", "1.", "]", ",", "tp", "[", "stype", "]", "/", "tp", "[", "stype", "]", "[", "0", "]", ",", "[", "0.", "]", "]", ")", "\n", "fpr", "=", "np", ".", "concatenate", "(", "[", "[", "1.", "]", ",", "fp", "[", "stype", "]", "/", "fp", "[", "stype", "]", "[", "0", "]", ",", "[", "0.", "]", "]", ")", "\n", "results", "[", "stype", "]", "[", "mtype", "]", "=", "100.", "*", "(", "-", "np", ".", "trapz", "(", "1.", "-", "fpr", ",", "tpr", ")", ")", "\n", "if", "verbose", ":", "\n", "            ", "print", "(", "' {val:6.3f}'", ".", "format", "(", "val", "=", "results", "[", "stype", "]", "[", "mtype", "]", ")", ",", "end", "=", "''", ")", "\n", "\n", "# DTACC", "\n", "", "mtype", "=", "'DTACC'", "\n", "results", "[", "stype", "]", "[", "mtype", "]", "=", "100.", "*", "(", ".5", "*", "(", "tp", "[", "stype", "]", "/", "tp", "[", "stype", "]", "[", "0", "]", "+", "1.", "-", "fp", "[", "stype", "]", "/", "fp", "[", "stype", "]", "[", "0", "]", ")", ".", "max", "(", ")", ")", "\n", "if", "verbose", ":", "\n", "            ", "print", "(", "' {val:6.3f}'", ".", "format", "(", "val", "=", "results", "[", "stype", "]", "[", "mtype", "]", ")", ",", "end", "=", "''", ")", "\n", "\n", "# AUIN", "\n", "", "mtype", "=", "'AUIN'", "\n", "denom", "=", "tp", "[", "stype", "]", "+", "fp", "[", "stype", "]", "\n", "denom", "[", "denom", "==", "0.", "]", "=", "-", "1.", "\n", "pin_ind", "=", "np", ".", "concatenate", "(", "[", "[", "True", "]", ",", "denom", ">", "0.", ",", "[", "True", "]", "]", ")", "\n", "pin", "=", "np", ".", "concatenate", "(", "[", "[", ".5", "]", ",", "tp", "[", "stype", "]", "/", "denom", ",", "[", "0.", "]", "]", ")", "\n", "results", "[", "stype", "]", "[", "mtype", "]", "=", "100.", "*", "(", "-", "np", ".", "trapz", "(", "pin", "[", "pin_ind", "]", ",", "tpr", "[", "pin_ind", "]", ")", ")", "\n", "if", "verbose", ":", "\n", "            ", "print", "(", "' {val:6.3f}'", ".", "format", "(", "val", "=", "results", "[", "stype", "]", "[", "mtype", "]", ")", ",", "end", "=", "''", ")", "\n", "\n", "# AUOUT", "\n", "", "mtype", "=", "'AUOUT'", "\n", "denom", "=", "tp", "[", "stype", "]", "[", "0", "]", "-", "tp", "[", "stype", "]", "+", "fp", "[", "stype", "]", "[", "0", "]", "-", "fp", "[", "stype", "]", "\n", "denom", "[", "denom", "==", "0.", "]", "=", "-", "1.", "\n", "pout_ind", "=", "np", ".", "concatenate", "(", "[", "[", "True", "]", ",", "denom", ">", "0.", ",", "[", "True", "]", "]", ")", "\n", "pout", "=", "np", ".", "concatenate", "(", "[", "[", "0.", "]", ",", "(", "fp", "[", "stype", "]", "[", "0", "]", "-", "fp", "[", "stype", "]", ")", "/", "denom", ",", "[", ".5", "]", "]", ")", "\n", "results", "[", "stype", "]", "[", "mtype", "]", "=", "100.", "*", "(", "np", ".", "trapz", "(", "pout", "[", "pout_ind", "]", ",", "1.", "-", "fpr", "[", "pout_ind", "]", ")", ")", "\n", "if", "verbose", ":", "\n", "            ", "print", "(", "' {val:6.3f}'", ".", "format", "(", "val", "=", "results", "[", "stype", "]", "[", "mtype", "]", ")", ",", "end", "=", "''", ")", "\n", "print", "(", "''", ")", "\n", "\n", "", "", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.core.evaluation.compute_oscr": [[99, 147], ["numpy.argmax", "numpy.zeros", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "len", "np.concatenate.argsort", "range", "sorted", "range", "numpy.max", "numpy.max", "len", "s_k_target[].sum", "s_u_target[].sum", "zip", "numpy.zeros", "numpy.zeros", "numpy.ones", "range", "range", "float", "float", "float", "float", "len", "len", "len", "len", "len"], "function", ["None"], ["", "def", "compute_oscr", "(", "pred_k", ",", "pred_u", ",", "labels", ")", ":", "\n", "    ", "x1", ",", "x2", "=", "np", ".", "max", "(", "pred_k", ",", "axis", "=", "1", ")", ",", "np", ".", "max", "(", "pred_u", ",", "axis", "=", "1", ")", "\n", "pred", "=", "np", ".", "argmax", "(", "pred_k", ",", "axis", "=", "1", ")", "\n", "correct", "=", "(", "pred", "==", "labels", ")", "\n", "m_x1", "=", "np", ".", "zeros", "(", "len", "(", "x1", ")", ")", "\n", "m_x1", "[", "pred", "==", "labels", "]", "=", "1", "\n", "k_target", "=", "np", ".", "concatenate", "(", "(", "m_x1", ",", "np", ".", "zeros", "(", "len", "(", "x2", ")", ")", ")", ",", "axis", "=", "0", ")", "\n", "u_target", "=", "np", ".", "concatenate", "(", "(", "np", ".", "zeros", "(", "len", "(", "x1", ")", ")", ",", "np", ".", "ones", "(", "len", "(", "x2", ")", ")", ")", ",", "axis", "=", "0", ")", "\n", "predict", "=", "np", ".", "concatenate", "(", "(", "x1", ",", "x2", ")", ",", "axis", "=", "0", ")", "\n", "n", "=", "len", "(", "predict", ")", "\n", "\n", "# Cutoffs are of prediction values", "\n", "\n", "CCR", "=", "[", "0", "for", "x", "in", "range", "(", "n", "+", "2", ")", "]", "\n", "FPR", "=", "[", "0", "for", "x", "in", "range", "(", "n", "+", "2", ")", "]", "\n", "\n", "idx", "=", "predict", ".", "argsort", "(", ")", "\n", "\n", "s_k_target", "=", "k_target", "[", "idx", "]", "\n", "s_u_target", "=", "u_target", "[", "idx", "]", "\n", "\n", "for", "k", "in", "range", "(", "n", "-", "1", ")", ":", "\n", "        ", "CC", "=", "s_k_target", "[", "k", "+", "1", ":", "]", ".", "sum", "(", ")", "\n", "FP", "=", "s_u_target", "[", "k", ":", "]", ".", "sum", "(", ")", "\n", "\n", "# True\tPositive Rate", "\n", "CCR", "[", "k", "]", "=", "float", "(", "CC", ")", "/", "float", "(", "len", "(", "x1", ")", ")", "\n", "# False Positive Rate", "\n", "FPR", "[", "k", "]", "=", "float", "(", "FP", ")", "/", "float", "(", "len", "(", "x2", ")", ")", "\n", "\n", "", "CCR", "[", "n", "]", "=", "0.0", "\n", "FPR", "[", "n", "]", "=", "0.0", "\n", "CCR", "[", "n", "+", "1", "]", "=", "1.0", "\n", "FPR", "[", "n", "+", "1", "]", "=", "1.0", "\n", "\n", "# Positions of ROC curve (FPR, TPR)", "\n", "ROC", "=", "sorted", "(", "zip", "(", "FPR", ",", "CCR", ")", ",", "reverse", "=", "True", ")", "\n", "\n", "OSCR", "=", "0", "\n", "\n", "# Compute AUROC Using Trapezoidal Rule", "\n", "for", "j", "in", "range", "(", "n", "+", "1", ")", ":", "\n", "        ", "h", "=", "ROC", "[", "j", "]", "[", "0", "]", "-", "ROC", "[", "j", "+", "1", "]", "[", "0", "]", "\n", "w", "=", "(", "ROC", "[", "j", "]", "[", "1", "]", "+", "ROC", "[", "j", "+", "1", "]", "[", "1", "]", ")", "/", "2.0", "\n", "\n", "OSCR", "=", "OSCR", "+", "h", "*", "w", "\n", "\n", "", "return", "OSCR", "", "", ""]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.loss.LabelSmoothing.smooth_one_hot": [[3, 19], ["torch.Size", "torch.no_grad", "torch.empty", "torch.empty.fill_", "torch.empty.scatter_", "true_labels.size", "true_labels.data.unsqueeze"], "function", ["None"], ["def", "smooth_one_hot", "(", "true_labels", ":", "torch", ".", "Tensor", ",", "classes", ":", "int", ",", "smoothing", "=", "0.0", ")", ":", "\n", "\n", "    ", "\"\"\"\n    if smoothing == 0, it's one-hot method\n    if 0 < smoothing < 1, it's smooth method\n\n    \"\"\"", "\n", "assert", "0", "<=", "smoothing", "<", "1", "\n", "\n", "confidence", "=", "1.0", "-", "smoothing", "\n", "label_shape", "=", "torch", ".", "Size", "(", "(", "true_labels", ".", "size", "(", "0", ")", ",", "classes", ")", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "true_dist", "=", "torch", ".", "empty", "(", "size", "=", "label_shape", ",", "device", "=", "true_labels", ".", "device", ")", "\n", "true_dist", ".", "fill_", "(", "smoothing", "/", "(", "classes", "-", "1", ")", ")", "\n", "true_dist", ".", "scatter_", "(", "1", ",", "true_labels", ".", "data", ".", "unsqueeze", "(", "1", ")", ",", "confidence", ")", "\n", "", "return", "true_dist", "\n", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.loss.LabelSmoothing.smooth_cross_entropy_loss": [[20, 36], ["LabelSmoothing.smooth_one_hot", "logits.log_softmax", "torch.mean", "torch.sum", "logits.size"], "function", ["home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.loss.LabelSmoothing.smooth_one_hot"], ["", "def", "smooth_cross_entropy_loss", "(", "logits", ",", "labels", ",", "smoothing", ",", "dim", "=", "-", "1", ")", ":", "\n", "\n", "    ", "\"\"\"\n    :param logits: Predictions from model (before softmax) (B x C)\n    :param labels: LongTensor of class indices (B,)\n    :param smoothing: Float, how much label smoothing\n    :param dim: Channel dimension\n    :return:\n    \"\"\"", "\n", "\n", "# Convert labels to distributions", "\n", "labels", "=", "smooth_one_hot", "(", "true_labels", "=", "labels", ",", "smoothing", "=", "smoothing", ",", "classes", "=", "logits", ".", "size", "(", "dim", ")", ")", "\n", "\n", "preds", "=", "logits", ".", "log_softmax", "(", "dim", "=", "dim", ")", "\n", "\n", "return", "torch", ".", "mean", "(", "torch", ".", "sum", "(", "-", "labels", "*", "preds", ",", "dim", "=", "dim", ")", ")", "", "", ""]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.loss.Softmax.Softmax.__init__": [[8, 12], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.loss.ARPLoss.ARPLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "**", "options", ")", ":", "\n", "        ", "super", "(", "Softmax", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "temp", "=", "options", "[", "'temp'", "]", "\n", "self", ".", "label_smoothing", "=", "options", "[", "'label_smoothing'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.loss.Softmax.Softmax.forward": [[13, 27], ["torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "methods.ARPL.loss.LabelSmoothing.smooth_cross_entropy_loss"], "methods", ["home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.loss.LabelSmoothing.smooth_cross_entropy_loss"], ["", "def", "forward", "(", "self", ",", "x", ",", "y", ",", "labels", "=", "None", ")", ":", "\n", "\n", "# 'y' is logits of the classifier", "\n", "        ", "logits", "=", "y", "\n", "\n", "if", "labels", "is", "None", ":", "\n", "            ", "return", "logits", ",", "0", "\n", "\n", "", "if", "not", "self", ".", "label_smoothing", ":", "\n", "            ", "loss", "=", "F", ".", "cross_entropy", "(", "logits", "/", "self", ".", "temp", ",", "labels", ")", "\n", "", "else", ":", "\n", "            ", "loss", "=", "smooth_cross_entropy_loss", "(", "logits", "/", "self", ".", "temp", ",", "labels", "=", "labels", ",", "smoothing", "=", "self", ".", "label_smoothing", ",", "dim", "=", "-", "1", ")", "\n", "\n", "", "return", "logits", ",", "loss", "\n", "", "", ""]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.loss.Dist.Dist.__init__": [[7, 18], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "Dist.Dist.centers.data.fill_", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn"], "methods", ["home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.loss.ARPLoss.ARPLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_classes", "=", "10", ",", "num_centers", "=", "1", ",", "feat_dim", "=", "2", ",", "init", "=", "'random'", ")", ":", "\n", "        ", "super", "(", "Dist", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "feat_dim", "=", "feat_dim", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "num_centers", "=", "num_centers", "\n", "\n", "if", "init", "==", "'random'", ":", "\n", "            ", "self", ".", "centers", "=", "nn", ".", "Parameter", "(", "0.1", "*", "torch", ".", "randn", "(", "num_classes", "*", "num_centers", ",", "self", ".", "feat_dim", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "centers", "=", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "num_classes", "*", "num_centers", ",", "self", ".", "feat_dim", ")", ")", "\n", "self", ".", "centers", ".", "data", ".", "fill_", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.loss.Dist.Dist.forward": [[19, 39], ["torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "features.matmul", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "float", "center.t", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "features", ",", "center", "=", "None", ",", "metric", "=", "'l2'", ")", ":", "\n", "        ", "if", "metric", "==", "'l2'", ":", "\n", "            ", "f_2", "=", "torch", ".", "sum", "(", "torch", ".", "pow", "(", "features", ",", "2", ")", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "if", "center", "is", "None", ":", "\n", "                ", "c_2", "=", "torch", ".", "sum", "(", "torch", ".", "pow", "(", "self", ".", "centers", ",", "2", ")", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "dist", "=", "f_2", "-", "2", "*", "torch", ".", "matmul", "(", "features", ",", "torch", ".", "transpose", "(", "self", ".", "centers", ",", "1", ",", "0", ")", ")", "+", "torch", ".", "transpose", "(", "c_2", ",", "1", ",", "0", ")", "\n", "", "else", ":", "\n", "                ", "c_2", "=", "torch", ".", "sum", "(", "torch", ".", "pow", "(", "center", ",", "2", ")", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "dist", "=", "f_2", "-", "2", "*", "torch", ".", "matmul", "(", "features", ",", "torch", ".", "transpose", "(", "center", ",", "1", ",", "0", ")", ")", "+", "torch", ".", "transpose", "(", "c_2", ",", "1", ",", "0", ")", "\n", "", "dist", "=", "dist", "/", "float", "(", "features", ".", "shape", "[", "1", "]", ")", "\n", "", "else", ":", "\n", "            ", "if", "center", "is", "None", ":", "\n", "                ", "center", "=", "self", ".", "centers", "\n", "", "else", ":", "\n", "                ", "center", "=", "center", "\n", "", "dist", "=", "features", ".", "matmul", "(", "center", ".", "t", "(", ")", ")", "\n", "", "dist", "=", "torch", ".", "reshape", "(", "dist", ",", "[", "-", "1", ",", "self", ".", "num_classes", ",", "self", ".", "num_centers", "]", ")", "\n", "dist", "=", "torch", ".", "mean", "(", "dist", ",", "dim", "=", "2", ")", "\n", "\n", "return", "dist", "\n", "", "", ""]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.loss.ARPLoss.ARPLoss.__init__": [[9, 23], ["torch.CrossEntropyLoss.__init__", "float", "methods.ARPL.loss.Dist.Dist", "torch.Parameter", "torch.Parameter", "torch.Parameter", "ARPLoss.ARPLoss.radius.data.fill_", "torch.MarginRankingLoss", "torch.MarginRankingLoss", "torch.MarginRankingLoss", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.loss.ARPLoss.ARPLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "**", "options", ")", ":", "\n", "\n", "        ", "super", "(", "ARPLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "use_gpu", "=", "options", "[", "'use_gpu'", "]", "\n", "self", ".", "weight_pl", "=", "float", "(", "options", "[", "'weight_pl'", "]", ")", "\n", "self", ".", "temp", "=", "options", "[", "'temp'", "]", "\n", "self", ".", "Dist", "=", "Dist", "(", "num_classes", "=", "options", "[", "'num_classes'", "]", ",", "feat_dim", "=", "options", "[", "'feat_dim'", "]", ")", "\n", "self", ".", "points", "=", "self", ".", "Dist", ".", "centers", "\n", "self", ".", "radius", "=", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "1", ")", ")", "\n", "self", ".", "radius", ".", "data", ".", "fill_", "(", "0", ")", "\n", "self", ".", "margin_loss", "=", "nn", ".", "MarginRankingLoss", "(", "margin", "=", "1.0", ")", "\n", "\n", "# Add label smoothing", "\n", "self", ".", "label_smoothing", "=", "options", "[", "'label_smoothing'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.loss.ARPLoss.ARPLoss.forward": [[24, 45], ["ARPLoss.ARPLoss.Dist", "ARPLoss.ARPLoss.Dist", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "ARPLoss.ARPLoss.margin_loss", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "methods.ARPL.loss.LabelSmoothing.smooth_cross_entropy_loss", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "_dis_known.size"], "methods", ["home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.loss.LabelSmoothing.smooth_cross_entropy_loss"], ["", "def", "forward", "(", "self", ",", "x", ",", "y", ",", "labels", "=", "None", ")", ":", "\n", "        ", "dist_dot_p", "=", "self", ".", "Dist", "(", "x", ",", "center", "=", "self", ".", "points", ",", "metric", "=", "'dot'", ")", "\n", "dist_l2_p", "=", "self", ".", "Dist", "(", "x", ",", "center", "=", "self", ".", "points", ")", "\n", "logits", "=", "dist_l2_p", "-", "dist_dot_p", "\n", "\n", "if", "labels", "is", "None", ":", "return", "logits", ",", "0", "\n", "\n", "# Option for label smoothing", "\n", "if", "not", "self", ".", "label_smoothing", ":", "\n", "            ", "loss", "=", "F", ".", "cross_entropy", "(", "logits", "/", "self", ".", "temp", ",", "labels", ")", "\n", "", "else", ":", "\n", "            ", "loss", "=", "smooth_cross_entropy_loss", "(", "logits", "/", "self", ".", "temp", ",", "labels", "=", "labels", ",", "smoothing", "=", "self", ".", "label_smoothing", ",", "dim", "=", "-", "1", ")", "\n", "\n", "", "center_batch", "=", "self", ".", "points", "[", "labels", ",", ":", "]", "\n", "_dis_known", "=", "(", "x", "-", "center_batch", ")", ".", "pow", "(", "2", ")", ".", "mean", "(", "1", ")", "\n", "target", "=", "torch", ".", "ones", "(", "_dis_known", ".", "size", "(", ")", ")", ".", "cuda", "(", ")", "\n", "loss_r", "=", "self", ".", "margin_loss", "(", "self", ".", "radius", ",", "_dis_known", ",", "target", ")", "\n", "\n", "loss", "=", "loss", "+", "self", ".", "weight_pl", "*", "loss_r", "\n", "\n", "return", "logits", ",", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.sgvaze_osr_closed_set_all_you_need.loss.ARPLoss.ARPLoss.fake_loss": [[46, 52], ["ARPLoss.ARPLoss.Dist", "torch.softmax", "torch.softmax", "torch.softmax", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log"], "methods", ["None"], ["", "def", "fake_loss", "(", "self", ",", "x", ")", ":", "\n", "        ", "logits", "=", "self", ".", "Dist", "(", "x", ",", "center", "=", "self", ".", "points", ")", "\n", "prob", "=", "F", ".", "softmax", "(", "logits", ",", "dim", "=", "1", ")", "\n", "loss", "=", "(", "prob", "*", "torch", ".", "log", "(", "prob", ")", ")", ".", "sum", "(", "1", ")", ".", "mean", "(", ")", ".", "exp", "(", ")", "\n", "\n", "return", "loss", "\n", "", "", ""]]}