{"home.repos.pwc.inspect_result.aboulch_tec_prediction.None.convert_raw_to_npy.gunzip_some_file": [[25, 43], ["os.system", "os.system", "os.path.isfile", "os.path.isfile", "RuntimeError", "RuntimeError", "os.remove", "os.remove", "convert_raw_to_npy.gunzip_some_file"], "function", ["home.repos.pwc.inspect_result.aboulch_tec_prediction.None.convert_raw_to_npy.gunzip_some_file"], ["def", "gunzip_some_file", "(", "compressed_file", ",", "\n", "uncompressed_file", ",", "\n", "delete_file", "=", "1", ")", ":", "\n", "    ", "\"\"\"Unzip a file.\"\"\"", "\n", "\n", "if", "not", "os", ".", "path", ".", "isfile", "(", "compressed_file", ")", ":", "\n", "        ", "if", "(", "compressed_file", "[", "-", "1", "]", "==", "'Z'", ")", ":", "\n", "            ", "new_compressed", "=", "compressed_file", "[", ":", "-", "1", "]", "+", "\"gz\"", "\n", "return", "gunzip_some_file", "(", "new_compressed", ",", "uncompressed_file", ",", "\n", "delete_file", ")", "\n", "", "raise", "RuntimeError", "(", "\"No such file '%s' to uncompress\"", "%", "compressed_file", ")", "\n", "", "command", "=", "\"gunzip -dc %s > %s\"", "%", "(", "compressed_file", ",", "uncompressed_file", ")", "\n", "retcode", "=", "os", ".", "system", "(", "command", ")", "\n", "if", "(", "retcode", ")", ":", "\n", "        ", "raise", "RuntimeError", "(", "\"Could not run '%s'\"", "%", "command", ")", "\n", "", "if", "(", "delete_file", ")", ":", "\n", "        ", "os", ".", "remove", "(", "compressed_file", ")", "\n", "", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.aboulch_tec_prediction.None.convert_raw_to_npy.readTEC": [[45, 137], ["enumerate", "numpy.arange", "numpy.arange", "numpy.zeros", "numpy.zeros", "numpy.zeros", "open", "file.readlines", "line.split", "line.split", "pow", "float", "float", "float", "float", "float", "float", "float", "float", "float", "len", "numpy.array", "int", "float", "int", "numpy.argmin", "numpy.absolute", "float", "float", "float", "float", "float", "float", "float", "float"], "function", ["None"], ["", "def", "readTEC", "(", "filename", ")", ":", "\n", "    ", "\"\"\" Read TEC files and return latitudes,\n        longitudes, times and TEC values. \"\"\"", "\n", "# Opening and reading the IONEX file into memory", "\n", "with", "open", "(", "filename", ",", "'rt'", ")", "as", "file", ":", "\n", "        ", "linestring", "=", "file", ".", "readlines", "(", ")", "\n", "\n", "# creating a new array without the header and only", "\n", "# with the TEC maps", "\n", "", "exponent", "=", "0.1", "# Default", "\n", "for", "i", ",", "line", "in", "enumerate", "(", "linestring", ")", ":", "\n", "        ", "splitted", "=", "line", ".", "split", "(", ")", "\n", "\n", "if", "splitted", "[", "-", "1", "]", "==", "'DESCRIPTION'", "or", "splitted", "[", "-", "1", "]", "==", "'COMMENT'", ":", "\n", "            ", "continue", "\n", "", "if", "splitted", "[", "-", "1", "]", "==", "'FILE'", ":", "\n", "            ", "if", "splitted", "[", "-", "2", "]", "==", "'IN'", ":", "\n", "                ", "NumberOfMaps", "=", "int", "(", "splitted", "[", "0", "]", ")", "\n", "continue", "\n", "", "", "if", "splitted", "[", "-", "1", "]", "==", "'DHGT'", ":", "\n", "            ", "continue", "\n", "", "if", "splitted", "[", "-", "1", "]", "==", "'EXPONENT'", ":", "\n", "            ", "exponent", "=", "pow", "(", "10", ",", "float", "(", "splitted", "[", "0", "]", ")", ")", "\n", "continue", "\n", "", "if", "splitted", "[", "-", "1", "]", "==", "'DLAT'", ":", "\n", "            ", "startLat", "=", "float", "(", "splitted", "[", "0", "]", ")", "\n", "endLat", "=", "float", "(", "splitted", "[", "1", "]", ")", "\n", "stepLat", "=", "float", "(", "splitted", "[", "2", "]", ")", "\n", "continue", "\n", "", "if", "splitted", "[", "-", "1", "]", "==", "'DLON'", ":", "\n", "            ", "startLon", "=", "float", "(", "splitted", "[", "0", "]", ")", "\n", "endLon", "=", "float", "(", "splitted", "[", "1", "]", ")", "\n", "stepLon", "=", "float", "(", "splitted", "[", "2", "]", ")", "\n", "continue", "\n", "", "if", "splitted", "[", "-", "1", "]", "==", "'MAP'", "and", "(", "splitted", "[", "-", "4", "]", "+", "splitted", "[", "-", "2", "]", "==", "'EPOCHFIRST'", ")", ":", "\n", "            ", "startYear", "=", "float", "(", "splitted", "[", "0", "]", ")", "\n", "startMonth", "=", "float", "(", "splitted", "[", "1", "]", ")", "\n", "startDay", "=", "float", "(", "splitted", "[", "2", "]", ")", "\n", "date", "=", "startYear", "*", "366.", "+", "startMonth", "*", "31.", "+", "startDay", "\n", "continue", "\n", "", "if", "splitted", "[", "0", "]", "==", "'END'", ":", "\n", "            ", "if", "splitted", "[", "2", "]", "==", "'HEADER'", ":", "\n", "                ", "break", "\n", "\n", "", "", "", "NewLongList", "=", "linestring", "[", "i", "+", "1", ":", "]", "\n", "# Variables that indicate the number of points in Lat. and Lon.", "\n", "# 3D array that will contain TEC/RMS values only", "\n", "lonarray", "=", "np", ".", "arange", "(", "startLon", ",", "endLon", "+", "stepLon", ",", "stepLon", ")", "\n", "latarray", "=", "np", ".", "arange", "(", "startLat", ",", "endLat", "+", "stepLat", ",", "stepLat", ")", "\n", "pointsLon", "=", "lonarray", ".", "shape", "[", "0", "]", "\n", "pointsLat", "=", "latarray", ".", "shape", "[", "0", "]", "\n", "times", "=", "np", ".", "zeros", "(", "NumberOfMaps", ",", "dtype", "=", "'float32'", ")", "\n", "tecdata", "=", "np", ".", "zeros", "(", "(", "NumberOfMaps", ",", "pointsLat", ",", "pointsLon", ")", ")", "\n", "rmsdata", "=", "np", ".", "zeros", "(", "(", "NumberOfMaps", ",", "pointsLat", ",", "pointsLon", ")", ")", "\n", "start_fill", "=", "False", "\n", "for", "line", "in", "NewLongList", ":", "\n", "        ", "splitted", "=", "line", ".", "split", "(", ")", "\n", "\n", "if", "splitted", "[", "0", "]", "==", "'END'", "and", "splitted", "[", "2", "]", "==", "'FILE'", ":", "\n", "            ", "break", "\n", "", "if", "splitted", "[", "-", "1", "]", "==", "'MAP'", "and", "splitted", "[", "-", "4", "]", "==", "'START'", ":", "\n", "            ", "start_fill", "=", "True", "\n", "# found map start filling", "\n", "if", "splitted", "[", "-", "2", "]", "==", "'TEC'", ":", "\n", "                ", "fillarray", "=", "tecdata", "\n", "", "else", ":", "\n", "                ", "if", "splitted", "[", "-", "2", "]", "==", "'RMS'", ":", "\n", "                    ", "fillarray", "=", "rmsdata", "\n", "", "else", ":", "\n", "                    ", "start_fill", "=", "False", "\n", "# something else", "\n", "continue", "\n", "", "", "mapnr", "=", "int", "(", "splitted", "[", "0", "]", ")", "-", "1", "\n", "continue", "\n", "", "if", "start_fill", ":", "\n", "            ", "if", "splitted", "[", "-", "1", "]", "==", "'MAP'", "and", "splitted", "[", "1", "]", "==", "'END'", ":", "\n", "                ", "start_fill", "=", "False", "\n", "continue", "\n", "", "if", "splitted", "[", "-", "1", "]", "==", "'MAP'", "and", "splitted", "[", "-", "4", "]", "==", "'EPOCH'", ":", "\n", "                ", "times", "[", "mapnr", "]", "=", "float", "(", "splitted", "[", "3", "]", ")", "+", "float", "(", "splitted", "[", "4", "]", ")", "/", "60.", "+", "float", "(", "splitted", "[", "5", "]", ")", "/", "3600.", "\n", "if", "(", "float", "(", "splitted", "[", "0", "]", ")", "*", "366", "+", "float", "(", "splitted", "[", "1", "]", ")", "*", "31", "+", "float", "(", "splitted", "[", "2", "]", ")", ")", ">", "date", ":", "#next day", "\n", "                    ", "times", "[", "mapnr", "]", "+=", "24.", "\n", "", "continue", "\n", "", "if", "splitted", "[", "-", "1", "]", "==", "'LAT/LON1/LON2/DLON/H'", ":", "\n", "                ", "latidx", "=", "np", ".", "argmin", "(", "np", ".", "absolute", "(", "latarray", "-", "float", "(", "line", "[", ":", "8", "]", ")", ")", ")", "\n", "lonidx", "=", "0", "\n", "continue", "\n", "", "datalength", "=", "len", "(", "splitted", ")", "\n", "fillarray", "[", "mapnr", ",", "latidx", ",", "lonidx", ":", "lonidx", "+", "datalength", "]", "=", "np", ".", "array", "(", "[", "float", "(", "i", ")", "*", "exponent", "for", "i", "in", "splitted", "]", ")", "\n", "lonidx", "+=", "datalength", "\n", "\n", "", "", "return", "(", "tecdata", ",", "rmsdata", ",", "lonarray", ",", "latarray", ",", "times", ")", ";", "\n", "\n"]], "home.repos.pwc.inspect_result.aboulch_tec_prediction.None.convert_raw_to_npy.make_bin_data": [[139, 167], ["range", "range", "print", "os.path.exists", "os.path.exists", "os.path.exists", "os.path.exists", "os.path.exists", "os.path.exists", "os.system", "os.system", "os.path.exists", "os.path.exists", "os.path.exists", "os.path.exists", "os.path.exists", "os.path.exists", "convert_raw_to_npy.readTEC", "h5py.File", "range", "file.create_dataset", "print", "numpy.roll", "int"], "function", ["home.repos.pwc.inspect_result.aboulch_tec_prediction.None.convert_raw_to_npy.readTEC"], ["", "def", "make_bin_data", "(", "compensate_earth", "=", "True", ")", ":", "\n", "    ", "\"\"\" Convert TEC IGS files to bin files, smaller and quicker to load \"\"\"", "\n", "for", "year", "in", "range", "(", "2003", ",", "2006", ")", ":", "\n", "        ", "for", "day", "in", "range", "(", "1", ",", "367", ")", ":", "\n", "            ", "print", "(", "\"Day {0:01d}, year {1:01d}\"", ".", "format", "(", "day", ",", "year", ")", ")", "\n", "filename", "=", "\"igsg{0:03d}0.{1:02d}i\"", ".", "format", "(", "day", ",", "year", "%", "100", ")", "\n", "filename2", "=", "\"codg{0:03d}0.{1:02d}i\"", ".", "format", "(", "day", ",", "year", "%", "100", ")", "\n", "folder", "=", "\"/home/ncherrie/TEC_shou/igs.ensg.ign.fr/pub/igs/products/ionosphere/{0:04d}/{1:03d}/\"", ".", "format", "(", "year", ",", "day", ")", "\n", "# Look for an existing file", "\n", "if", "not", "(", "os", ".", "path", ".", "exists", "(", "folder", "+", "filename", "+", "\".Z\"", ")", ")", ":", "\n", "                ", "filename", "=", "filename2", "\n", "", "if", "not", "(", "os", ".", "path", ".", "exists", "(", "folder", "+", "filename", "+", "\".Z\"", ")", ")", ":", "\n", "                ", "filename", "=", "\"jplg{0:03d}0.{1:02d}i\"", ".", "format", "(", "day", ",", "year", "%", "100", ")", "\n", "", "if", "not", "(", "os", ".", "path", ".", "exists", "(", "folder", "+", "filename", "+", "\".Z\"", ")", ")", ":", "\n", "                ", "filename", "=", "\"esag{0:03d}0.{1:02d}i\"", ".", "format", "(", "day", ",", "year", "%", "100", ")", "\n", "", "if", "not", "(", "os", ".", "path", ".", "exists", "(", "\"Original_data/\"", "+", "filename", ")", "or", "os", ".", "path", ".", "exists", "(", "\"Original_data/\"", "+", "filename2", ")", ")", ":", "\n", "                ", "os", ".", "system", "(", "'gzip -c -d -k < '", "+", "folder", "+", "filename", "+", "\".Z > Original_data/\"", "+", "filename", ")", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "\"TEC_data/tecdata_{0:04d}_{1:01d}.bin\"", ".", "format", "(", "year", ",", "day", ")", ")", ":", "\n", "                ", "try", ":", "\n", "                    ", "tecdata", ",", "_", ",", "_", ",", "_", ",", "_", "=", "readTEC", "(", "\"Original_data/\"", "+", "filename", ")", "\n", "", "except", ":", "\n", "                    ", "print", "(", "\"Nothing to do....., day {0:01d} year {1:04d}\"", ".", "format", "(", "day", ",", "year", ")", ",", "filename", ")", "\n", "continue", "\n", "", "with", "h5py", ".", "File", "(", "\"TEC_data/tecdata_{0:04d}_{1:01d}.bin\"", ".", "format", "(", "year", ",", "day", ")", ",", "'w'", ")", "as", "file", ":", "\n", "                    ", "for", "i", "in", "range", "(", "12", ")", ":", "\n", "# Compensate rotation before saving", "\n", "                        ", "tecdata", "[", "i", ",", ":", ",", ":", "]", "=", "np", ".", "roll", "(", "tecdata", "[", "i", ",", ":", ",", ":", "]", ",", "(", "int", ")", "(", "73", "*", "i", "/", "12", ")", ",", "axis", "=", "1", ")", "\n", "", "file", ".", "create_dataset", "(", "\"tecdata_{0:04d}_{1:01d}\"", ".", "format", "(", "year", ",", "day", ")", ",", "data", "=", "tecdata", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aboulch_tec_prediction.None.network_unet.UnetConvRecurrent.__init__": [[16, 44], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "convLSTM.CLSTM_cell", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "convLSTM.CLSTM_cell", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "convLSTM.CLSTM_cell", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "convLSTM.CLSTM_cell", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "convLSTM.CLSTM_cell", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d"], "methods", ["home.repos.pwc.inspect_result.aboulch_tec_prediction.None.network_dilation_121.UnetConvRecurrent.__init__"], ["def", "__init__", "(", "self", ",", "input_nbr", ",", "num_features", "=", "8", ")", ":", "\n", "        ", "\"\"\"Init fields.\"\"\"", "\n", "super", "(", "UnetConvRecurrent", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "\n", "input_size", "=", "4", "\n", "kernel_size", "=", "3", "\n", "\n", "\n", "self", ".", "conv11", "=", "nn", ".", "Conv2d", "(", "input_nbr", ",", "num_features", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "stride", "=", "2", ")", "\n", "self", ".", "convRecurrentCell1", "=", "Recurrent_cell", "(", "num_features", ",", "num_features", ",", "kernel_size", ")", "\n", "\n", "self", ".", "conv21", "=", "nn", ".", "Conv2d", "(", "num_features", ",", "num_features", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "stride", "=", "2", ")", "\n", "self", ".", "convRecurrentCell2", "=", "Recurrent_cell", "(", "num_features", ",", "num_features", ",", "kernel_size", ")", "\n", "\n", "self", ".", "conv31", "=", "nn", ".", "Conv2d", "(", "num_features", ",", "num_features", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "stride", "=", "2", ")", "\n", "self", ".", "convRecurrentCell3", "=", "Recurrent_cell", "(", "num_features", ",", "num_features", ",", "kernel_size", ")", "\n", "\n", "self", ".", "convd21", "=", "nn", ".", "ConvTranspose2d", "(", "num_features", ",", "num_features", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "stride", "=", "2", ",", "output_padding", "=", "1", ")", "\n", "self", ".", "convd22", "=", "nn", ".", "ConvTranspose2d", "(", "num_features", "*", "2", ",", "num_features", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "convRecurrentCelld2", "=", "Recurrent_cell", "(", "num_features", ",", "num_features", ",", "kernel_size", ")", "\n", "\n", "self", ".", "convd11", "=", "nn", ".", "ConvTranspose2d", "(", "num_features", ",", "num_features", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "stride", "=", "2", ",", "output_padding", "=", "1", ")", "\n", "self", ".", "convd12", "=", "nn", ".", "ConvTranspose2d", "(", "num_features", "*", "2", ",", "num_features", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "convRecurrentCelld1", "=", "Recurrent_cell", "(", "num_features", ",", "num_features", ",", "kernel_size", ")", "\n", "\n", "self", ".", "convd1", "=", "nn", ".", "ConvTranspose2d", "(", "num_features", ",", "num_features", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "stride", "=", "2", ",", "output_padding", "=", "1", ")", "\n", "self", ".", "convd2", "=", "nn", ".", "ConvTranspose2d", "(", "num_features", "+", "input_nbr", ",", "input_nbr", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aboulch_tec_prediction.None.network_unet.UnetConvRecurrent.forward": [[48, 137], ["z.size", "z.size", "range", "output_inner.append", "range", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.relu", "torch.relu", "torch.relu", "network_unet.UnetConvRecurrent.convRecurrentCell1", "torch.relu", "torch.relu", "torch.relu", "network_unet.UnetConvRecurrent.convRecurrentCell2", "torch.relu", "torch.relu", "torch.relu", "network_unet.UnetConvRecurrent.convRecurrentCell3", "torch.relu", "torch.relu", "torch.relu", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.relu", "torch.relu", "torch.relu", "network_unet.UnetConvRecurrent.convRecurrentCelld2", "torch.relu", "torch.relu", "torch.relu", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.relu", "torch.relu", "torch.relu", "network_unet.UnetConvRecurrent.convRecurrentCelld1", "torch.relu", "torch.relu", "torch.relu", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "network_unet.UnetConvRecurrent.convd2", "torch.relu", "torch.relu", "torch.relu", "network_unet.UnetConvRecurrent.convRecurrentCell1", "torch.relu", "torch.relu", "torch.relu", "network_unet.UnetConvRecurrent.convRecurrentCell2", "torch.relu", "torch.relu", "torch.relu", "network_unet.UnetConvRecurrent.convRecurrentCell3", "torch.relu", "torch.relu", "torch.relu", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.relu", "torch.relu", "torch.relu", "network_unet.UnetConvRecurrent.convRecurrentCelld2", "torch.relu", "torch.relu", "torch.relu", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.relu", "torch.relu", "torch.relu", "network_unet.UnetConvRecurrent.convRecurrentCelld1", "torch.relu", "torch.relu", "torch.relu", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "network_unet.UnetConvRecurrent.convd2", "output_inner.append", "len", "z.size", "z.size", "z.size", "z.size", "network_unet.UnetConvRecurrent.conv11", "network_unet.UnetConvRecurrent.conv21", "network_unet.UnetConvRecurrent.conv31", "network_unet.UnetConvRecurrent.convd21", "network_unet.UnetConvRecurrent.convd22", "network_unet.UnetConvRecurrent.convd11", "network_unet.UnetConvRecurrent.convd12", "network_unet.UnetConvRecurrent.convd1", "network_unet.UnetConvRecurrent.conv11", "network_unet.UnetConvRecurrent.conv21", "network_unet.UnetConvRecurrent.conv31", "network_unet.UnetConvRecurrent.convd21", "network_unet.UnetConvRecurrent.convd22", "network_unet.UnetConvRecurrent.convd11", "network_unet.UnetConvRecurrent.convd12", "network_unet.UnetConvRecurrent.convd1", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "z", ",", "prediction_len", ",", "diff", "=", "False", ",", "predict_diff_data", "=", "None", ")", ":", "\n", "        ", "\"\"\"Forward method.\"\"\"", "\n", "# Stage 1", "\n", "\n", "output_inner", "=", "[", "]", "\n", "size", "=", "z", ".", "size", "(", ")", "\n", "seq_len", "=", "z", ".", "size", "(", "0", ")", "\n", "\n", "hidden_state1", "=", "None", "\n", "hidden_state2", "=", "None", "\n", "hidden_state3", "=", "None", "\n", "hidden_stated2", "=", "None", "\n", "hidden_stated1", "=", "None", "\n", "for", "t", "in", "range", "(", "seq_len", ")", ":", "#loop for every step", "\n", "            ", "x", "=", "z", "[", "t", ",", "...", "]", "\n", "\n", "# coder", "\n", "x1", "=", "F", ".", "relu", "(", "self", ".", "conv11", "(", "x", ")", ")", "\n", "hidden_state1", "=", "self", ".", "convRecurrentCell1", "(", "x1", ",", "hidden_state1", ")", "\n", "x1", "=", "hidden_state1", "[", "0", "]", "\n", "\n", "x2", "=", "F", ".", "relu", "(", "self", ".", "conv21", "(", "x1", ")", ")", "\n", "hidden_state2", "=", "self", ".", "convRecurrentCell2", "(", "x2", ",", "hidden_state2", ")", "\n", "x2", "=", "hidden_state2", "[", "0", "]", "\n", "\n", "x3", "=", "F", ".", "relu", "(", "self", ".", "conv31", "(", "x2", ")", ")", "\n", "hidden_state3", "=", "self", ".", "convRecurrentCell3", "(", "x3", ",", "hidden_state3", ")", "\n", "x3", "=", "hidden_state3", "[", "0", "]", "\n", "\n", "y2", "=", "F", ".", "relu", "(", "self", ".", "convd21", "(", "x3", ")", ")", "\n", "y2", "=", "torch", ".", "cat", "(", "[", "x2", ",", "y2", "]", ",", "1", ")", "\n", "y2", "=", "F", ".", "relu", "(", "self", ".", "convd22", "(", "y2", ")", ")", "\n", "hidden_stated2", "=", "self", ".", "convRecurrentCelld2", "(", "y2", ",", "hidden_stated2", ")", "\n", "y2", "=", "hidden_stated2", "[", "0", "]", "\n", "\n", "y1", "=", "F", ".", "relu", "(", "self", ".", "convd11", "(", "y2", ")", ")", "\n", "y1", "=", "torch", ".", "cat", "(", "[", "x1", ",", "y1", "]", ",", "1", ")", "\n", "y1", "=", "F", ".", "relu", "(", "self", ".", "convd12", "(", "y1", ")", ")", "\n", "hidden_stated1", "=", "self", ".", "convRecurrentCelld1", "(", "y1", ",", "hidden_stated1", ")", "\n", "y1", "=", "hidden_stated1", "[", "0", "]", "\n", "\n", "y", "=", "F", ".", "relu", "(", "self", ".", "convd1", "(", "y1", ")", ")", "\n", "y", "=", "torch", ".", "cat", "(", "[", "y", ",", "x", "]", ",", "1", ")", "\n", "y", "=", "self", ".", "convd2", "(", "y", ")", "\n", "\n", "", "output_inner", ".", "append", "(", "y", ")", "\n", "\n", "for", "t", "in", "range", "(", "prediction_len", "-", "1", ")", ":", "\n", "\n", "            ", "if", "(", "diff", ")", ":", "\n", "                ", "x", "=", "y", "+", "predict_diff_data", "[", "t", ",", "...", "]", "\n", "", "else", ":", "\n", "                ", "x", "=", "y", "\n", "\n", "# coder", "\n", "", "x1", "=", "F", ".", "relu", "(", "self", ".", "conv11", "(", "x", ")", ")", "\n", "hidden_state1", "=", "self", ".", "convRecurrentCell1", "(", "x1", ",", "hidden_state1", ")", "\n", "x1", "=", "hidden_state1", "[", "0", "]", "\n", "\n", "x2", "=", "F", ".", "relu", "(", "self", ".", "conv21", "(", "x1", ")", ")", "\n", "hidden_state2", "=", "self", ".", "convRecurrentCell2", "(", "x2", ",", "hidden_state2", ")", "\n", "x2", "=", "hidden_state2", "[", "0", "]", "\n", "\n", "x3", "=", "F", ".", "relu", "(", "self", ".", "conv31", "(", "x2", ")", ")", "\n", "hidden_state3", "=", "self", ".", "convRecurrentCell3", "(", "x3", ",", "hidden_state3", ")", "\n", "x3", "=", "hidden_state3", "[", "0", "]", "\n", "\n", "y2", "=", "F", ".", "relu", "(", "self", ".", "convd21", "(", "x3", ")", ")", "\n", "y2", "=", "torch", ".", "cat", "(", "[", "x2", ",", "y2", "]", ",", "1", ")", "\n", "y2", "=", "F", ".", "relu", "(", "self", ".", "convd22", "(", "y2", ")", ")", "\n", "hidden_stated2", "=", "self", ".", "convRecurrentCelld2", "(", "y2", ",", "hidden_stated2", ")", "\n", "y2", "=", "hidden_stated2", "[", "0", "]", "\n", "\n", "y1", "=", "F", ".", "relu", "(", "self", ".", "convd11", "(", "y2", ")", ")", "\n", "y1", "=", "torch", ".", "cat", "(", "[", "x1", ",", "y1", "]", ",", "1", ")", "\n", "y1", "=", "F", ".", "relu", "(", "self", ".", "convd12", "(", "y1", ")", ")", "\n", "hidden_stated1", "=", "self", ".", "convRecurrentCelld1", "(", "y1", ",", "hidden_stated1", ")", "\n", "y1", "=", "hidden_stated1", "[", "0", "]", "\n", "\n", "y", "=", "F", ".", "relu", "(", "self", ".", "convd1", "(", "y1", ")", ")", "\n", "y", "=", "torch", ".", "cat", "(", "[", "y", ",", "x", "]", ",", "1", ")", "\n", "y", "=", "self", ".", "convd2", "(", "y", ")", "\n", "\n", "output_inner", ".", "append", "(", "y", ")", "\n", "\n", "", "expected_size", "=", "(", "len", "(", "output_inner", ")", ",", "z", ".", "size", "(", "1", ")", ",", "z", ".", "size", "(", "2", ")", ",", "z", ".", "size", "(", "3", ")", ",", "z", ".", "size", "(", "4", ")", ")", "\n", "current_input", "=", "torch", ".", "cat", "(", "output_inner", ",", "0", ")", ".", "view", "(", "expected_size", ")", "\n", "\n", "return", "current_input", "\n", "\n"]], "home.repos.pwc.inspect_result.aboulch_tec_prediction.None.network_unet.UnetConvRecurrent.load_from_filename": [[139, 143], ["torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "network_unet.UnetConvRecurrent.load_state_dict"], "methods", ["home.repos.pwc.inspect_result.aboulch_tec_prediction.None.data_loader.SequenceLoader.load", "home.repos.pwc.inspect_result.aboulch_tec_prediction.None.data_loader.SequenceLoader.load", "home.repos.pwc.inspect_result.aboulch_tec_prediction.None.data_loader.SequenceLoader.load", "home.repos.pwc.inspect_result.aboulch_tec_prediction.None.data_loader.SequenceLoader.load", "home.repos.pwc.inspect_result.aboulch_tec_prediction.None.data_loader.SequenceLoader.load", "home.repos.pwc.inspect_result.aboulch_tec_prediction.None.data_loader.SequenceLoader.load", "home.repos.pwc.inspect_result.aboulch_tec_prediction.None.data_loader.SequenceLoader.load", "home.repos.pwc.inspect_result.aboulch_tec_prediction.None.data_loader.SequenceLoader.load", "home.repos.pwc.inspect_result.aboulch_tec_prediction.None.data_loader.SequenceLoader.load"], ["", "def", "load_from_filename", "(", "self", ",", "model_path", ")", ":", "\n", "        ", "\"\"\"Load weights method.\"\"\"", "\n", "th", "=", "torch", ".", "load", "(", "model_path", ")", "# load the weigths", "\n", "self", ".", "load_state_dict", "(", "th", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.aboulch_tec_prediction.None.convLSTM.CLSTM_cell.__init__": [[28, 37], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.aboulch_tec_prediction.None.network_dilation_121.UnetConvRecurrent.__init__"], ["def", "__init__", "(", "self", ",", "input_size", ",", "hidden_size", ",", "kernel_size", ",", "dilation", "=", "1", ",", "padding", "=", "None", ")", ":", "\n", "        ", "\"\"\"Init.\"\"\"", "\n", "super", "(", "CLSTM_cell", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "padding", "is", "None", ":", "\n", "            ", "padding", "=", "kernel_size", "//", "2", "\n", "", "self", ".", "input_size", "=", "input_size", "\n", "self", ".", "hidden_size", "=", "hidden_size", "\n", "self", ".", "kernel_size", "=", "kernel_size", "\n", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "self", ".", "input_size", "+", "self", ".", "hidden_size", ",", "4", "*", "self", ".", "hidden_size", ",", "self", ".", "kernel_size", ",", "1", ",", "padding", "=", "padding", ",", "dilation", "=", "dilation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aboulch_tec_prediction.None.convLSTM.CLSTM_cell.forward": [[38, 63], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "convLSTM.CLSTM_cell.conv", "torch.split", "torch.split", "torch.split", "torch.split", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "input.data.size", "input.data.size", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "list", "next", "convLSTM.CLSTM_cell.conv.parameters", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ",", "prev_state", "=", "None", ")", ":", "\n", "        ", "\"\"\"Forward.\"\"\"", "\n", "batch_size", "=", "input", ".", "data", ".", "size", "(", ")", "[", "0", "]", "\n", "spatial_size", "=", "input", ".", "data", ".", "size", "(", ")", "[", "2", ":", "]", "\n", "\n", "if", "prev_state", "is", "None", ":", "\n", "            ", "state_size", "=", "[", "batch_size", ",", "self", ".", "hidden_size", "]", "+", "list", "(", "spatial_size", ")", "\n", "if", "(", "next", "(", "self", ".", "conv", ".", "parameters", "(", ")", ")", ".", "is_cuda", ")", ":", "\n", "                ", "prev_state", "=", "[", "Variable", "(", "torch", ".", "zeros", "(", "state_size", ")", ")", ".", "cuda", "(", ")", ",", "Variable", "(", "torch", ".", "zeros", "(", "state_size", ")", ")", ".", "cuda", "(", ")", "]", "\n", "", "else", ":", "\n", "                ", "prev_state", "=", "[", "Variable", "(", "torch", ".", "zeros", "(", "state_size", ")", ")", ",", "Variable", "(", "torch", ".", "zeros", "(", "state_size", ")", ")", ".", "cuda", "(", ")", "]", "\n", "\n", "", "", "hidden", ",", "c", "=", "prev_state", "# hidden and c are images with several channels", "\n", "combined", "=", "torch", ".", "cat", "(", "(", "input", ",", "hidden", ")", ",", "1", ")", "# oncatenate in the channels", "\n", "# print('combined',combined.size())", "\n", "A", "=", "self", ".", "conv", "(", "combined", ")", "\n", "(", "ai", ",", "af", ",", "ao", ",", "ag", ")", "=", "torch", ".", "split", "(", "A", ",", "self", ".", "hidden_size", ",", "dim", "=", "1", ")", "# it should return 4 tensors", "\n", "i", "=", "torch", ".", "sigmoid", "(", "ai", ")", "\n", "f", "=", "torch", ".", "sigmoid", "(", "af", ")", "\n", "o", "=", "torch", ".", "sigmoid", "(", "ao", ")", "\n", "g", "=", "torch", ".", "tanh", "(", "ag", ")", "\n", "\n", "next_c", "=", "f", "*", "c", "+", "i", "*", "g", "\n", "next_h", "=", "o", "*", "torch", ".", "tanh", "(", "next_c", ")", "\n", "return", "next_h", ",", "next_c", "\n", "", "", ""]], "home.repos.pwc.inspect_result.aboulch_tec_prediction.None.main.bcolors.disable": [[30, 37], ["None"], "methods", ["None"], ["def", "disable", "(", "self", ")", ":", "\n", "        ", "self", ".", "HEADER", "=", "''", "\n", "self", ".", "OKBLUE", "=", "''", "\n", "self", ".", "OKGREEN", "=", "''", "\n", "self", ".", "WARNING", "=", "''", "\n", "self", ".", "FAIL", "=", "''", "\n", "self", ".", "ENDC", "=", "''", "\n", "\n"]], "home.repos.pwc.inspect_result.aboulch_tec_prediction.None.main.printBlue": [[38, 40], ["print"], "function", ["None"], ["", "", "def", "printBlue", "(", "*", "args", ")", ":", "\n", "    ", "print", "(", "bcolors", ".", "OKBLUE", ",", "*", "args", ",", "bcolors", ".", "ENDC", ")", "\n", "", "def", "printGreen", "(", "*", "args", ")", ":", "\n"]], "home.repos.pwc.inspect_result.aboulch_tec_prediction.None.main.printGreen": [[40, 42], ["print"], "function", ["None"], ["", "def", "printGreen", "(", "*", "args", ")", ":", "\n", "    ", "print", "(", "bcolors", ".", "OKGREEN", ",", "*", "args", ",", "bcolors", ".", "ENDC", ")", "\n", "", "def", "printRed", "(", "*", "args", ")", ":", "\n"]], "home.repos.pwc.inspect_result.aboulch_tec_prediction.None.main.printRed": [[42, 44], ["print"], "function", ["None"], ["", "def", "printRed", "(", "*", "args", ")", ":", "\n", "    ", "print", "(", "bcolors", ".", "FAIL", ",", "*", "args", ",", "bcolors", ".", "ENDC", ")", "\n", "#######################", "\n"]], "home.repos.pwc.inspect_result.aboulch_tec_prediction.None.main.preprocess": [[53, 56], ["None"], "function", ["None"], ["def", "preprocess", "(", "x", ")", ":", "\n", "    ", "\"\"\"Normalize TEC data.\"\"\"", "\n", "return", "(", "x", "-", "TEC_MEAN", ")", "/", "(", "TEC_MAX", "-", "TEC_MIN", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aboulch_tec_prediction.None.main.unprocess": [[57, 60], ["None"], "function", ["None"], ["", "def", "unprocess", "(", "x", ")", ":", "\n", "    ", "\"\"\"Unnormalize TEC data.\"\"\"", "\n", "return", "x", "*", "(", "TEC_MAX", "-", "TEC_MIN", ")", "+", "TEC_MEAN", "\n", "\n"]], "home.repos.pwc.inspect_result.aboulch_tec_prediction.None.main.get_input_targets": [[61, 66], ["None"], "function", ["None"], ["", "def", "get_input_targets", "(", "batch_np", ")", ":", "\n", "    ", "\"\"\"Separate input and target from sequence.\"\"\"", "\n", "inputs_np", "=", "batch_np", "[", ":", "args", ".", "seqStart", "]", "\n", "targets_np", "=", "batch_np", "[", "args", ".", "seqStart", ":", "]", "\n", "return", "inputs_np", ",", "targets_np", "\n", "\n"]], "home.repos.pwc.inspect_result.aboulch_tec_prediction.None.main.get_periodic": [[67, 76], ["Exception"], "function", ["None"], ["", "def", "get_periodic", "(", "inputs", ",", "prediction_len", ")", ":", "\n", "    ", "\"\"\"Get the part of the input corresponding to the prediction length.\"\"\"", "\n", "# return inputs[-prediction_len:]", "\n", "if", "prediction_len", ">", "24", ":", "\n", "        ", "raise", "Exception", "(", "\"Error prediction > 48h, TODO\"", ")", "\n", "", "if", "prediction_len", "==", "24", ":", "\n", "        ", "return", "inputs", "[", "-", "prediction_len", ":", "]", "\n", "", "else", ":", "\n", "        ", "return", "inputs", "[", "-", "24", ":", "-", "24", "+", "prediction_len", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.aboulch_tec_prediction.None.main.get_periodic_blur_targets_diff": [[77, 85], ["periodic.copy", "range", "range", "scipy.ndimage.gaussian_filter"], "function", ["None"], ["", "", "def", "get_periodic_blur_targets_diff", "(", "periodic", ",", "targets", ")", ":", "\n", "    ", "\"\"\"Apply blur on sequence and compute difference (for residual learning).\"\"\"", "\n", "periodic_blur", "=", "periodic", ".", "copy", "(", ")", "\n", "for", "i", "in", "range", "(", "periodic_blur", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "periodic_blur", ".", "shape", "[", "1", "]", ")", ":", "\n", "            ", "periodic_blur", "[", "i", ",", "j", ",", "0", "]", "=", "gaussian_filter", "(", "periodic_blur", "[", "i", ",", "j", ",", "0", "]", ",", "sigma", "=", "3", ")", "\n", "", "", "targets_diff", "=", "targets", "-", "periodic_blur", "\n", "return", "periodic_blur", ",", "targets_diff", "\n", "\n"]], "home.repos.pwc.inspect_result.aboulch_tec_prediction.None.main.rms": [[86, 92], ["numpy.sqrt", "numpy.sqrt"], "function", ["None"], ["", "def", "rms", "(", "data", ",", "axis", "=", "None", ")", ":", "\n", "    ", "\"\"\"Compute RMS.\"\"\"", "\n", "if", "(", "axis", "is", "None", ")", ":", "\n", "        ", "return", "np", ".", "sqrt", "(", "(", "data", "**", "2", ")", ".", "mean", "(", ")", ")", "\n", "", "else", ":", "\n", "        ", "return", "np", ".", "sqrt", "(", "(", "data", "**", "2", ")", ".", "mean", "(", "axis", "=", "axis", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aboulch_tec_prediction.None.main.process_data": [[103, 230], ["numpy.zeros", "numpy.array", "print", "range", "net.train", "tqdm.tqdm", "net.eval", "tqdm.tqdm", "main.preprocess", "main.get_input_targets", "main.get_periodic", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "net.forward.cpu().data.numpy", "main.unprocess", "main.unprocess", "float", "main.rms", "main.rms", "main.rms", "rms.sum", "rms_gm.transpose.transpose", "range", "rms.sum", "rms.sum", "range", "range", "tqdm.tqdm.set_postfix", "rms().mean", "range", "range", "batch[].size", "batch[].numpy().transpose", "main.get_periodic_blur_targets_diff", "torch.from_numpy().float", "torch.from_numpy().float", "targets_np.copy", "main.get_periodic_blur_targets_diff", "torch.from_numpy().float", "torch.from_numpy().float", "inputs.cuda.cuda", "targets.cuda.cuda", "optimizer.zero_grad", "net.forward", "criterion", "criterion.backward", "optimizer.step", "net.forward", "criterion", "main.unprocess", "main.unprocess", "criterion.cpu().item", "np.array.append", "rms_tec_images[].sum", "rms_tec_images_periodic[].sum", "rms_per_sequence.append", "rms_per_sequence_periodic.append", "periodic_blur.cuda.cuda", "periodic_blur.cuda.cuda", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "rms_tec_images[].mean", "rms_tec_images_periodic[].mean", "main.rms", "batch[].numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "net.forward.cpu", "criterion.cpu"], "function", ["home.repos.pwc.inspect_result.aboulch_tec_prediction.None.main.preprocess", "home.repos.pwc.inspect_result.aboulch_tec_prediction.None.main.get_input_targets", "home.repos.pwc.inspect_result.aboulch_tec_prediction.None.main.get_periodic", "home.repos.pwc.inspect_result.aboulch_tec_prediction.None.main.unprocess", "home.repos.pwc.inspect_result.aboulch_tec_prediction.None.main.unprocess", "home.repos.pwc.inspect_result.aboulch_tec_prediction.None.main.rms", "home.repos.pwc.inspect_result.aboulch_tec_prediction.None.main.rms", "home.repos.pwc.inspect_result.aboulch_tec_prediction.None.main.rms", "home.repos.pwc.inspect_result.aboulch_tec_prediction.None.main.get_periodic_blur_targets_diff", "home.repos.pwc.inspect_result.aboulch_tec_prediction.None.main.get_periodic_blur_targets_diff", "home.repos.pwc.inspect_result.aboulch_tec_prediction.None.network_dilation_121.UnetConvRecurrent.forward", "home.repos.pwc.inspect_result.aboulch_tec_prediction.None.network_dilation_121.UnetConvRecurrent.forward", "home.repos.pwc.inspect_result.aboulch_tec_prediction.None.main.unprocess", "home.repos.pwc.inspect_result.aboulch_tec_prediction.None.main.unprocess", "home.repos.pwc.inspect_result.aboulch_tec_prediction.None.main.rms"], ["def", "process_data", "(", "training", "=", "False", ")", ":", "\n", "\n", "    ", "if", "training", ":", "\n", "# training mode", "\n", "        ", "net", ".", "train", "(", ")", "\n", "#iterate on the train dataset", "\n", "t", "=", "tqdm", "(", "train_loader", ",", "ncols", "=", "150", ")", "\n", "", "else", ":", "\n", "        ", "net", ".", "eval", "(", ")", "\n", "#iterate on the train dataset", "\n", "t", "=", "tqdm", "(", "test_loader", ",", "ncols", "=", "150", ")", "\n", "\n", "# define prediction length", "\n", "", "prediction_len", "=", "args", ".", "seqLength", "-", "args", ".", "seqStart", "\n", "\n", "loss", "=", "0", "\n", "rms_", "=", "0", "# mean rms oversequence", "\n", "rms_periodic", "=", "0", "# mean rms over sequence", "\n", "rms_per_frame", "=", "[", "0", "for", "i", "in", "range", "(", "prediction_len", ")", "]", "\n", "rms_periodic_per_frame", "=", "[", "0", "for", "i", "in", "range", "(", "prediction_len", ")", "]", "\n", "rms_per_sequence", "=", "[", "]", "\n", "rms_per_sequence_periodic", "=", "[", "]", "\n", "count", "=", "0", "\n", "rms_lattitude", "=", "np", ".", "zeros", "(", "72", ")", "\n", "\n", "rms_global_mean", "=", "[", "]", "\n", "\n", "for", "batch", "in", "t", ":", "\n", "        ", "count", "+=", "batch", "[", "0", "]", ".", "size", "(", "0", ")", "*", "prediction_len", "# count number of prediction images", "\n", "\n", "# preprocess the batch (TODO: go pytorch)", "\n", "batch_np", "=", "preprocess", "(", "batch", "[", "0", "]", ".", "numpy", "(", ")", ".", "transpose", "(", "(", "1", ",", "0", ",", "2", ",", "3", ",", "4", ")", ")", ")", "\n", "\n", "# create inputs and targets for network", "\n", "inputs_np", ",", "targets_np", "=", "get_input_targets", "(", "batch_np", ")", "\n", "periodic_np", "=", "get_periodic", "(", "inputs_np", ",", "prediction_len", ")", "\n", "if", "args", ".", "diff", ":", "# use residual", "\n", "            ", "periodic_blur_np", ",", "targets_network_np", "=", "get_periodic_blur_targets_diff", "(", "periodic_np", ",", "targets_np", ")", "\n", "periodic_blur", "=", "torch", ".", "from_numpy", "(", "periodic_blur_np", ")", ".", "float", "(", ")", "\n", "if", "args", ".", "cuda", ":", "\n", "                ", "periodic_blur", "=", "periodic_blur", ".", "cuda", "(", ")", "\n", "", "", "else", ":", "\n", "            ", "targets_network_np", "=", "targets_np", ".", "copy", "(", ")", "\n", "periodic_blur", "=", "None", "\n", "\n", "periodic_blur_np", ",", "_", "=", "get_periodic_blur_targets_diff", "(", "periodic_np", ",", "targets_np", ")", "\n", "periodic_blur", "=", "torch", ".", "from_numpy", "(", "periodic_blur_np", ")", ".", "float", "(", ")", "\n", "if", "args", ".", "cuda", ":", "\n", "                ", "periodic_blur", "=", "periodic_blur", ".", "cuda", "(", ")", "\n", "\n", "# create pytorch tensors", "\n", "", "", "inputs", "=", "torch", ".", "from_numpy", "(", "inputs_np", ")", ".", "float", "(", ")", "\n", "targets", "=", "torch", ".", "from_numpy", "(", "targets_network_np", ")", ".", "float", "(", ")", "\n", "if", "args", ".", "cuda", ":", "\n", "            ", "inputs", "=", "inputs", ".", "cuda", "(", ")", "\n", "targets", "=", "targets", ".", "cuda", "(", ")", "\n", "\n", "\n", "", "if", "training", ":", "\n", "# set gradients to zero", "\n", "            ", "optimizer", ".", "zero_grad", "(", ")", "\n", "# forward pass in the network", "\n", "outputs", "=", "net", ".", "forward", "(", "inputs", ",", "prediction_len", ",", "diff", "=", "args", ".", "diff", ",", "predict_diff_data", "=", "periodic_blur", ")", "\n", "# compute error and backprocj", "\n", "error", "=", "criterion", "(", "outputs", ",", "targets", ")", "\n", "error", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "", "else", ":", "\n", "            ", "outputs", "=", "net", ".", "forward", "(", "inputs", ",", "prediction_len", ",", "diff", "=", "args", ".", "diff", ",", "predict_diff_data", "=", "periodic_blur", ")", "\n", "error", "=", "criterion", "(", "outputs", ",", "targets", ")", "# compute loss for comparison", "\n", "\n", "\n", "# outputs", "\n", "", "outputs_np", "=", "outputs", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "if", "args", ".", "diff", ":", "\n", "            ", "outputs_complete", "=", "unprocess", "(", "outputs_np", "+", "periodic_blur_np", ")", "\n", "", "else", ":", "\n", "            ", "outputs_complete", "=", "unprocess", "(", "outputs_np", ")", "\n", "", "periodic_complete", "=", "unprocess", "(", "periodic_np", ")", "\n", "targets_complete", "=", "unprocess", "(", "targets_np", ")", "\n", "\n", "# update loss", "\n", "loss", "+=", "float", "(", "error", ".", "cpu", "(", ")", ".", "item", "(", ")", ")", "\n", "\n", "# compute the rms for each image", "\n", "rms_tec_images", "=", "rms", "(", "outputs_complete", "-", "targets_complete", ",", "axis", "=", "(", "2", ",", "3", ",", "4", ")", ")", "\n", "rms_tec_images_periodic", "=", "rms", "(", "periodic_complete", "-", "targets_complete", ",", "axis", "=", "(", "2", ",", "3", ",", "4", ")", ")", "\n", "\n", "rms_tec_images_lattitude", "=", "rms", "(", "outputs_complete", "-", "targets_complete", ",", "axis", "=", "(", "2", ",", "4", ")", ")", "\n", "rms_lattitude", "+=", "rms_tec_images_lattitude", ".", "sum", "(", "axis", "=", "(", "0", ",", "1", ")", ")", "\n", "\n", "#rms_gm = outputs_complete.mean(axis=(2,3,4))-targets_complete.mean(axis=(2,3,4))", "\n", "rms_gm", "=", "(", "outputs_complete", "*", "weights", "[", "None", ",", "None", ",", "None", ",", ":", ",", ":", "]", ")", ".", "sum", "(", "axis", "=", "(", "2", ",", "3", ",", "4", ")", ")", "-", "(", "targets_complete", "*", "weights", "[", "None", ",", "None", ",", "None", ",", ":", ",", ":", "]", ")", ".", "sum", "(", "axis", "=", "(", "2", ",", "3", ",", "4", ")", ")", "\n", "rms_gm", "=", "rms_gm", ".", "transpose", "(", "1", ",", "0", ")", "\n", "for", "i", "in", "range", "(", "rms_gm", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "rms_global_mean", ".", "append", "(", "rms_gm", "[", "i", "]", ")", "\n", "\n", "# update global rms", "\n", "", "rms_", "+=", "rms_tec_images", ".", "sum", "(", ")", "\n", "rms_periodic", "+=", "rms_tec_images_periodic", ".", "sum", "(", ")", "\n", "\n", "# update rms per seq frame", "\n", "for", "frame_id", "in", "range", "(", "prediction_len", ")", ":", "\n", "            ", "rms_per_frame", "[", "frame_id", "]", "+=", "rms_tec_images", "[", "frame_id", "]", ".", "sum", "(", ")", "\n", "rms_periodic_per_frame", "[", "frame_id", "]", "+=", "rms_tec_images_periodic", "[", "frame_id", "]", ".", "sum", "(", ")", "\n", "\n", "", "for", "seq_id", "in", "range", "(", "rms_tec_images", ".", "shape", "[", "1", "]", ")", ":", "\n", "            ", "rms_per_sequence", ".", "append", "(", "rms_tec_images", "[", ":", ",", "seq_id", "]", ".", "mean", "(", ")", ")", "\n", "rms_per_sequence_periodic", ".", "append", "(", "rms_tec_images_periodic", "[", ":", ",", "seq_id", "]", ".", "mean", "(", ")", ")", "\n", "\n", "\n", "# update TQDM", "\n", "", "t", ".", "set_postfix", "(", "Loss", "=", "loss", "/", "count", ",", "RMS", "=", "rms_", "/", "count", ",", "RMS_P", "=", "rms_periodic", "/", "count", ")", "\n", "\n", "", "rms_global_mean", "=", "np", ".", "array", "(", "rms_global_mean", ")", "\n", "\n", "print", "(", "\"RMS GLOBAL MEAN\"", ",", "rms_global_mean", ".", "shape", ",", "rms", "(", "rms_global_mean", ",", "axis", "=", "1", ")", ".", "mean", "(", ")", ")", "\n", "\n", "loss", "=", "loss", "/", "count", "\n", "rms_", "=", "rms_", "/", "count", "\n", "rms_lattitude", "=", "rms_lattitude", "/", "count", "\n", "rms_periodic", "=", "rms_periodic", "/", "count", "\n", "for", "frame_id", "in", "range", "(", "prediction_len", ")", ":", "\n", "        ", "rms_per_frame", "[", "frame_id", "]", "/=", "count", "/", "prediction_len", "\n", "rms_periodic_per_frame", "[", "frame_id", "]", "/=", "count", "/", "prediction_len", "\n", "\n", "", "return", "loss", ",", "rms_", ",", "rms_periodic", ",", "rms_per_frame", ",", "rms_periodic_per_frame", ",", "rms_per_sequence", ",", "rms_per_sequence_periodic", ",", "rms_lattitude", "\n", "\n"]], "home.repos.pwc.inspect_result.aboulch_tec_prediction.None.main.count_parameters": [[285, 287], ["sum", "p.numel", "model.parameters"], "function", ["None"], ["def", "count_parameters", "(", "model", ")", ":", "\n", "    ", "return", "sum", "(", "p", ".", "numel", "(", ")", "for", "p", "in", "model", ".", "parameters", "(", ")", "if", "p", ".", "requires_grad", ")", "\n", "", "print", "(", "count_parameters", "(", "net", ")", ")", "\n"]], "home.repos.pwc.inspect_result.aboulch_tec_prediction.None.data_loader.SequenceLoader.__init__": [[47, 60], ["data_loader.make_dataset_train", "data_loader.make_dataset_val"], "methods", ["home.repos.pwc.inspect_result.aboulch_tec_prediction.None.data_loader.make_dataset_train", "home.repos.pwc.inspect_result.aboulch_tec_prediction.None.data_loader.make_dataset_val"], ["def", "__init__", "(", "self", ",", "root_dir", ",", "seqLength", ",", "training", "=", "True", ")", ":", "\n", "        ", "\"\"\"Init function.\"\"\"", "\n", "#", "\n", "# get the lists of images", "\n", "\n", "self", ".", "TEC_MAP_SHAPE", "=", "(", "72", ",", "72", ")", "\n", "self", ".", "seqLength", "=", "seqLength", "\n", "self", ".", "root_dir", "=", "root_dir", "\n", "if", "training", ":", "\n", "            ", "self", ".", "days", "=", "make_dataset_train", "(", "seqLength", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "days", "=", "make_dataset_val", "(", "seqLength", ")", "\n", "", "self", ".", "training", "=", "training", "\n", "\n"]], "home.repos.pwc.inspect_result.aboulch_tec_prediction.None.data_loader.SequenceLoader.load": [[62, 88], ["numpy.zeros", "range", "numpy.array", "numpy.array", "datetime.timedelta", "day.timetuple", "numpy.load", "PIL.Image.fromarray().resize", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "data_loader.SequenceLoader.load", "print", "PIL.Image.fromarray", "random.randint", "data_loader.SequenceLoader.__len__"], "methods", ["home.repos.pwc.inspect_result.aboulch_tec_prediction.None.data_loader.SequenceLoader.load", "home.repos.pwc.inspect_result.aboulch_tec_prediction.None.data_loader.SequenceLoader.load", "home.repos.pwc.inspect_result.aboulch_tec_prediction.None.data_loader.SequenceLoader.__len__"], ["", "def", "load", "(", "self", ",", "index", ")", ":", "\n", "        ", "day_start", ",", "hour_start", "=", "self", ".", "days", "[", "index", "]", "\n", "\n", "day", "=", "day_start", "\n", "k", "=", "hour_start", "\n", "pos", "=", "0", "\n", "\n", "dat", "=", "np", ".", "zeros", "(", "(", "self", ".", "seqLength", ",", "1", ",", "self", ".", "TEC_MAP_SHAPE", "[", "0", "]", ",", "self", ".", "TEC_MAP_SHAPE", "[", "1", "]", ")", ")", "\n", "\n", "for", "pos", "in", "range", "(", "self", ".", "seqLength", ")", ":", "\n", "            ", "if", "k", ">=", "12", ":", "\n", "                ", "day", "+=", "timedelta", "(", "days", "=", "1", ")", "\n", "k", "=", "0", "\n", "", "year", "=", "day", ".", "year", "\n", "day_of_year", "=", "day", ".", "timetuple", "(", ")", ".", "tm_yday", "\n", "try", ":", "\n", "                ", "tecdata", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "self", ".", "root_dir", ",", "\"tecdata_{0:04d}_{1:03d}.npy\"", ".", "format", "(", "year", ",", "day_of_year", ")", ")", ")", "\n", "", "except", ":", "\n", "                ", "if", "self", ".", "training", ":", "\n", "                    ", "return", "self", ".", "load", "(", "random", ".", "randint", "(", "0", ",", "self", ".", "__len__", "(", ")", "-", "1", ")", ")", "\n", "", "else", ":", "\n", "                    ", "print", "(", "\"Error validation set\"", ")", "\n", "", "", "dat", "[", "pos", ",", "0", ",", ":", ",", ":", "]", "=", "np", ".", "array", "(", "Image", ".", "fromarray", "(", "tecdata", "[", "k", "%", "12", ",", ":", ",", ":", "]", ")", ".", "resize", "(", "(", "self", ".", "TEC_MAP_SHAPE", "[", "1", "]", ",", "self", ".", "TEC_MAP_SHAPE", "[", "0", "]", ")", ")", ")", "\n", "k", "+=", "1", "\n", "\n", "", "return", "dat", ",", "np", ".", "array", "(", "[", "index", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aboulch_tec_prediction.None.data_loader.SequenceLoader.__getitem__": [[89, 92], ["data_loader.SequenceLoader.load"], "methods", ["home.repos.pwc.inspect_result.aboulch_tec_prediction.None.data_loader.SequenceLoader.load"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"Get item.\"\"\"", "\n", "return", "self", ".", "load", "(", "index", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aboulch_tec_prediction.None.data_loader.SequenceLoader.__len__": [[93, 96], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "\"\"\"Length.\"\"\"", "\n", "return", "len", "(", "self", ".", "days", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.aboulch_tec_prediction.None.data_loader.make_dataset_train": [[19, 30], ["datetime.date", "datetime.date", "range", "datetime.timedelta", "datetime.timedelta", "days.append"], "function", ["None"], ["def", "make_dataset_train", "(", "seq_length", ")", ":", "\n", "    ", "start_train", "=", "date", "(", "2014", ",", "1", ",", "1", ")", "\n", "end_train", "=", "date", "(", "2016", ",", "5", ",", "31", ")", "\n", "days", "=", "[", "]", "\n", "day", "=", "start_train", "\n", "# break if no possibility to get the next sequence", "\n", "while", "(", "day", "<", "end_train", "-", "timedelta", "(", "days", "=", "(", "seq_length", ")", "//", "12", ")", ")", ":", "\n", "        ", "for", "k", "in", "range", "(", "12", ")", ":", "# number of images per day", "\n", "            ", "days", ".", "append", "(", "[", "day", ",", "k", "]", ")", "\n", "", "day", "+=", "timedelta", "(", "days", "=", "1", ")", "\n", "", "return", "days", "\n", "\n"]], "home.repos.pwc.inspect_result.aboulch_tec_prediction.None.data_loader.make_dataset_val": [[31, 42], ["datetime.date", "datetime.date", "range", "datetime.timedelta", "datetime.timedelta", "days.append"], "function", ["None"], ["", "def", "make_dataset_val", "(", "seq_length", ")", ":", "\n", "    ", "start_val", "=", "date", "(", "2016", ",", "7", ",", "1", ")", "\n", "end_val", "=", "date", "(", "2016", ",", "12", ",", "31", ")", "\n", "days", "=", "[", "]", "\n", "day", "=", "start_val", "\n", "# break if no possibility to get the next sequence", "\n", "while", "(", "day", "<", "end_val", "-", "timedelta", "(", "days", "=", "(", "seq_length", ")", "//", "12", ")", ")", ":", "\n", "        ", "for", "k", "in", "range", "(", "12", ")", ":", "# number of images per day", "\n", "            ", "days", ".", "append", "(", "[", "day", ",", "k", "]", ")", "\n", "", "day", "+=", "timedelta", "(", "days", "=", "1", ")", "\n", "", "return", "days", "\n", "\n"]], "home.repos.pwc.inspect_result.aboulch_tec_prediction.None.network_simple.SimpleConvRecurrent.__init__": [[16, 33], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "convLSTM.CLSTM_cell", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d"], "methods", ["home.repos.pwc.inspect_result.aboulch_tec_prediction.None.network_dilation_121.UnetConvRecurrent.__init__"], ["def", "__init__", "(", "self", ",", "input_nbr", ",", "num_features", "=", "8", ")", ":", "\n", "        ", "\"\"\"Init fields.\"\"\"", "\n", "super", "(", "SimpleConvRecurrent", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "input_nbr", ",", "num_features", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "stride", "=", "2", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "num_features", ",", "num_features", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "stride", "=", "2", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "num_features", ",", "num_features", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "stride", "=", "2", ")", "\n", "self", ".", "conv4", "=", "nn", ".", "Conv2d", "(", "num_features", ",", "num_features", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ")", "\n", "\n", "kernel_size", "=", "3", "\n", "self", ".", "convRecurrentCell", "=", "Recurrent_cell", "(", "num_features", ",", "num_features", ",", "kernel_size", ")", "\n", "\n", "self", ".", "convd4", "=", "nn", ".", "Conv2d", "(", "num_features", ",", "num_features", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ")", "\n", "self", ".", "convd3", "=", "nn", ".", "ConvTranspose2d", "(", "num_features", ",", "num_features", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "stride", "=", "2", ",", "output_padding", "=", "1", ")", "\n", "self", ".", "convd2", "=", "nn", ".", "ConvTranspose2d", "(", "num_features", ",", "num_features", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "stride", "=", "2", ",", "output_padding", "=", "1", ")", "\n", "self", ".", "convd1", "=", "nn", ".", "ConvTranspose2d", "(", "num_features", ",", "input_nbr", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "stride", "=", "2", ",", "output_padding", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aboulch_tec_prediction.None.network_simple.SimpleConvRecurrent.forward": [[35, 93], ["z.size", "z.size", "range", "output_inner.append", "range", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "network_simple.SimpleConvRecurrent.convRecurrentCell", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "network_simple.SimpleConvRecurrent.convd1", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "network_simple.SimpleConvRecurrent.convRecurrentCell", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "network_simple.SimpleConvRecurrent.convd1", "output_inner.append", "len", "z.size", "z.size", "z.size", "z.size", "network_simple.SimpleConvRecurrent.conv1", "network_simple.SimpleConvRecurrent.conv2", "network_simple.SimpleConvRecurrent.conv3", "network_simple.SimpleConvRecurrent.conv4", "network_simple.SimpleConvRecurrent.convd4", "network_simple.SimpleConvRecurrent.convd3", "network_simple.SimpleConvRecurrent.convd2", "network_simple.SimpleConvRecurrent.conv1", "network_simple.SimpleConvRecurrent.conv2", "network_simple.SimpleConvRecurrent.conv3", "network_simple.SimpleConvRecurrent.conv4", "network_simple.SimpleConvRecurrent.convd4", "network_simple.SimpleConvRecurrent.convd3", "network_simple.SimpleConvRecurrent.convd2", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "z", ",", "prediction_len", ",", "diff", "=", "False", ",", "predict_diff_data", "=", "None", ")", ":", "\n", "        ", "\"\"\"Forward method.\"\"\"", "\n", "\n", "output_inner", "=", "[", "]", "\n", "size", "=", "z", ".", "size", "(", ")", "\n", "seq_len", "=", "z", ".", "size", "(", "0", ")", "\n", "# hidden_state=self.convLSTM1.init_hidden(size[1])", "\n", "hidden_state", "=", "None", "\n", "for", "t", "in", "range", "(", "seq_len", ")", ":", "#loop for every step", "\n", "            ", "x", "=", "z", "[", "t", ",", "...", "]", "\n", "\n", "# coder", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "conv1", "(", "x", ")", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "conv2", "(", "x", ")", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "conv3", "(", "x", ")", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "conv4", "(", "x", ")", ")", "\n", "\n", "# recurrent", "\n", "hidden_state", "=", "self", ".", "convRecurrentCell", "(", "x", ",", "hidden_state", ")", "\n", "\n", "y", "=", "hidden_state", "[", "0", "]", "\n", "\n", "y", "=", "F", ".", "relu", "(", "self", ".", "convd4", "(", "y", ")", ")", "\n", "y", "=", "F", ".", "relu", "(", "self", ".", "convd3", "(", "y", ")", ")", "\n", "y", "=", "F", ".", "relu", "(", "self", ".", "convd2", "(", "y", ")", ")", "\n", "y", "=", "self", ".", "convd1", "(", "y", ")", "\n", "\n", "", "output_inner", ".", "append", "(", "y", ")", "\n", "\n", "for", "t", "in", "range", "(", "prediction_len", "-", "1", ")", ":", "#loop for every step", "\n", "\n", "            ", "if", "(", "diff", ")", ":", "\n", "                ", "x", "=", "y", "+", "predict_diff_data", "[", "t", ",", "...", "]", "\n", "", "else", ":", "\n", "                ", "x", "=", "y", "\n", "\n", "# coder", "\n", "", "x", "=", "F", ".", "relu", "(", "self", ".", "conv1", "(", "x", ")", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "conv2", "(", "x", ")", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "conv3", "(", "x", ")", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "conv4", "(", "x", ")", ")", "\n", "\n", "# recurrent", "\n", "hidden_state", "=", "self", ".", "convRecurrentCell", "(", "x", ",", "hidden_state", ")", "\n", "\n", "y", "=", "hidden_state", "[", "0", "]", "\n", "\n", "y", "=", "F", ".", "relu", "(", "self", ".", "convd4", "(", "y", ")", ")", "\n", "y", "=", "F", ".", "relu", "(", "self", ".", "convd3", "(", "y", ")", ")", "\n", "y", "=", "F", ".", "relu", "(", "self", ".", "convd2", "(", "y", ")", ")", "\n", "y", "=", "self", ".", "convd1", "(", "y", ")", "\n", "\n", "output_inner", ".", "append", "(", "y", ")", "\n", "\n", "", "expected_size", "=", "(", "len", "(", "output_inner", ")", ",", "z", ".", "size", "(", "1", ")", ",", "z", ".", "size", "(", "2", ")", ",", "z", ".", "size", "(", "3", ")", ",", "z", ".", "size", "(", "4", ")", ")", "\n", "current_input", "=", "torch", ".", "cat", "(", "output_inner", ",", "0", ")", ".", "view", "(", "expected_size", ")", "\n", "\n", "return", "current_input", "\n", "\n"]], "home.repos.pwc.inspect_result.aboulch_tec_prediction.None.network_simple.SimpleConvRecurrent.load_from_filename": [[95, 99], ["torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "network_simple.SimpleConvRecurrent.load_state_dict"], "methods", ["home.repos.pwc.inspect_result.aboulch_tec_prediction.None.data_loader.SequenceLoader.load", "home.repos.pwc.inspect_result.aboulch_tec_prediction.None.data_loader.SequenceLoader.load", "home.repos.pwc.inspect_result.aboulch_tec_prediction.None.data_loader.SequenceLoader.load", "home.repos.pwc.inspect_result.aboulch_tec_prediction.None.data_loader.SequenceLoader.load", "home.repos.pwc.inspect_result.aboulch_tec_prediction.None.data_loader.SequenceLoader.load", "home.repos.pwc.inspect_result.aboulch_tec_prediction.None.data_loader.SequenceLoader.load", "home.repos.pwc.inspect_result.aboulch_tec_prediction.None.data_loader.SequenceLoader.load", "home.repos.pwc.inspect_result.aboulch_tec_prediction.None.data_loader.SequenceLoader.load", "home.repos.pwc.inspect_result.aboulch_tec_prediction.None.data_loader.SequenceLoader.load"], ["", "def", "load_from_filename", "(", "self", ",", "model_path", ")", ":", "\n", "        ", "\"\"\"Load weights method.\"\"\"", "\n", "th", "=", "torch", ".", "load", "(", "model_path", ")", "# load the weigths", "\n", "self", ".", "load_state_dict", "(", "th", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.aboulch_tec_prediction.None.network_dilation_121.UnetConvRecurrent.__init__": [[16, 26], ["torch.Module.__init__", "convLSTM.CLSTM_cell", "convLSTM.CLSTM_cell", "convLSTM.CLSTM_cell"], "methods", ["home.repos.pwc.inspect_result.aboulch_tec_prediction.None.network_dilation_121.UnetConvRecurrent.__init__"], ["def", "__init__", "(", "self", ",", "input_nbr", ",", "num_features", "=", "8", ")", ":", "\n", "        ", "\"\"\"Init fields.\"\"\"", "\n", "super", "(", "UnetConvRecurrent", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "input_size", "=", "4", "\n", "kernel_size", "=", "3", "\n", "\n", "self", ".", "convRecurrentCell1", "=", "Recurrent_cell", "(", "input_nbr", ",", "num_features", ",", "kernel_size", ",", "dilation", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "convRecurrentCell2", "=", "Recurrent_cell", "(", "num_features", ",", "num_features", ",", "kernel_size", ",", "dilation", "=", "2", ",", "padding", "=", "2", ")", "\n", "self", ".", "convRecurrentCell3", "=", "Recurrent_cell", "(", "num_features", ",", "input_nbr", ",", "kernel_size", ",", "dilation", "=", "1", ",", "padding", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aboulch_tec_prediction.None.network_dilation_121.UnetConvRecurrent.forward": [[30, 96], ["z.size", "z.size", "range", "output_inner.append", "range", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "network_dilation_121.UnetConvRecurrent.convRecurrentCell1", "torch.relu", "torch.relu", "torch.relu", "network_dilation_121.UnetConvRecurrent.convRecurrentCell2", "torch.relu", "torch.relu", "torch.relu", "network_dilation_121.UnetConvRecurrent.convRecurrentCell3", "network_dilation_121.UnetConvRecurrent.convRecurrentCell1", "torch.relu", "torch.relu", "torch.relu", "network_dilation_121.UnetConvRecurrent.convRecurrentCell2", "torch.relu", "torch.relu", "torch.relu", "network_dilation_121.UnetConvRecurrent.convRecurrentCell3", "output_inner.append", "len", "z.size", "z.size", "z.size", "z.size", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "z", ",", "prediction_len", ",", "diff", "=", "False", ",", "predict_diff_data", "=", "None", ")", ":", "\n", "        ", "\"\"\"Forward method.\"\"\"", "\n", "# Stage 1", "\n", "\n", "output_inner", "=", "[", "]", "\n", "size", "=", "z", ".", "size", "(", ")", "\n", "seq_len", "=", "z", ".", "size", "(", "0", ")", "\n", "\n", "hidden_state1", "=", "None", "\n", "hidden_state2", "=", "None", "\n", "hidden_state3", "=", "None", "\n", "hidden_stated2", "=", "None", "\n", "hidden_stated1", "=", "None", "\n", "for", "t", "in", "range", "(", "seq_len", ")", ":", "#loop for every step", "\n", "            ", "x", "=", "z", "[", "t", ",", "...", "]", "\n", "\n", "# coder", "\n", "x1", "=", "x", "\n", "hidden_state1", "=", "self", ".", "convRecurrentCell1", "(", "x1", ",", "hidden_state1", ")", "\n", "x1", "=", "hidden_state1", "[", "0", "]", "\n", "x1", "=", "F", ".", "relu", "(", "x1", ")", "\n", "\n", "x2", "=", "x1", "\n", "hidden_state2", "=", "self", ".", "convRecurrentCell2", "(", "x2", ",", "hidden_state2", ")", "\n", "x2", "=", "hidden_state2", "[", "0", "]", "\n", "x2", "=", "F", ".", "relu", "(", "x2", ")", "\n", "\n", "x3", "=", "x2", "\n", "hidden_state3", "=", "self", ".", "convRecurrentCell3", "(", "x3", ",", "hidden_state3", ")", "\n", "x3", "=", "hidden_state3", "[", "0", "]", "\n", "\n", "y", "=", "x3", "\n", "\n", "", "output_inner", ".", "append", "(", "y", ")", "\n", "\n", "for", "t", "in", "range", "(", "prediction_len", "-", "1", ")", ":", "\n", "\n", "            ", "if", "(", "diff", ")", ":", "\n", "                ", "x", "=", "y", "+", "predict_diff_data", "[", "t", ",", "...", "]", "\n", "", "else", ":", "\n", "                ", "x", "=", "y", "\n", "\n", "\n", "# coder", "\n", "", "x1", "=", "x", "\n", "hidden_state1", "=", "self", ".", "convRecurrentCell1", "(", "x1", ",", "hidden_state1", ")", "\n", "x1", "=", "hidden_state1", "[", "0", "]", "\n", "x1", "=", "F", ".", "relu", "(", "x1", ")", "\n", "\n", "x2", "=", "x1", "\n", "hidden_state2", "=", "self", ".", "convRecurrentCell2", "(", "x2", ",", "hidden_state2", ")", "\n", "x2", "=", "hidden_state2", "[", "0", "]", "\n", "x2", "=", "F", ".", "relu", "(", "x2", ")", "\n", "\n", "x3", "=", "x2", "\n", "hidden_state3", "=", "self", ".", "convRecurrentCell3", "(", "x3", ",", "hidden_state3", ")", "\n", "x3", "=", "hidden_state3", "[", "0", "]", "\n", "\n", "y", "=", "x3", "\n", "\n", "output_inner", ".", "append", "(", "y", ")", "\n", "\n", "", "expected_size", "=", "(", "len", "(", "output_inner", ")", ",", "z", ".", "size", "(", "1", ")", ",", "z", ".", "size", "(", "2", ")", ",", "z", ".", "size", "(", "3", ")", ",", "z", ".", "size", "(", "4", ")", ")", "\n", "current_input", "=", "torch", ".", "cat", "(", "output_inner", ",", "0", ")", ".", "view", "(", "expected_size", ")", "\n", "\n", "return", "current_input", "\n", "\n"]], "home.repos.pwc.inspect_result.aboulch_tec_prediction.None.network_dilation_121.UnetConvRecurrent.load_from_filename": [[98, 102], ["torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "network_dilation_121.UnetConvRecurrent.load_state_dict"], "methods", ["home.repos.pwc.inspect_result.aboulch_tec_prediction.None.data_loader.SequenceLoader.load", "home.repos.pwc.inspect_result.aboulch_tec_prediction.None.data_loader.SequenceLoader.load", "home.repos.pwc.inspect_result.aboulch_tec_prediction.None.data_loader.SequenceLoader.load", "home.repos.pwc.inspect_result.aboulch_tec_prediction.None.data_loader.SequenceLoader.load", "home.repos.pwc.inspect_result.aboulch_tec_prediction.None.data_loader.SequenceLoader.load", "home.repos.pwc.inspect_result.aboulch_tec_prediction.None.data_loader.SequenceLoader.load", "home.repos.pwc.inspect_result.aboulch_tec_prediction.None.data_loader.SequenceLoader.load", "home.repos.pwc.inspect_result.aboulch_tec_prediction.None.data_loader.SequenceLoader.load", "home.repos.pwc.inspect_result.aboulch_tec_prediction.None.data_loader.SequenceLoader.load"], ["", "def", "load_from_filename", "(", "self", ",", "model_path", ")", ":", "\n", "        ", "\"\"\"Load weights method.\"\"\"", "\n", "th", "=", "torch", ".", "load", "(", "model_path", ")", "# load the weigths", "\n", "self", ".", "load_state_dict", "(", "th", ")", "\n", "", "", ""]]}