{"home.repos.pwc.inspect_result.tzodge_PCR-CMU.src.arguments.rpmnet_arguments": [[5, 66], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument"], "function", ["None"], ["def", "rpmnet_arguments", "(", ")", ":", "\n", "    ", "\"\"\"Arguments used for both training and testing\"\"\"", "\n", "parser", "=", "argparse", ".", "ArgumentParser", "(", "add_help", "=", "False", ")", "\n", "\n", "# Logging", "\n", "parser", ".", "add_argument", "(", "'--logdir'", ",", "default", "=", "'../logs'", ",", "type", "=", "str", ",", "\n", "help", "=", "'Directory to store logs, summaries, checkpoints.'", ")", "\n", "parser", ".", "add_argument", "(", "'--dev'", ",", "action", "=", "'store_true'", ",", "help", "=", "'If true, will ignore logdir and log to ../logdev instead'", ")", "\n", "parser", ".", "add_argument", "(", "'--name'", ",", "type", "=", "str", ",", "help", "=", "'Prefix to add to logging directory'", ")", "\n", "parser", ".", "add_argument", "(", "'--debug'", ",", "action", "=", "'store_true'", ",", "help", "=", "'If set, will enable autograd anomaly detection'", ")", "\n", "# settings for input data_loader", "\n", "parser", ".", "add_argument", "(", "'-i'", ",", "'--dataset_path'", ",", "\n", "default", "=", "'../../datasets/modelnet40_ply_hdf5_2048'", ",", "\n", "type", "=", "str", ",", "metavar", "=", "'PATH'", ",", "\n", "help", "=", "'path to the processed dataset. Default: ../../datasets/modelnet40_ply_hdf5_2048'", ")", "\n", "parser", ".", "add_argument", "(", "'--dataset_type'", ",", "default", "=", "'modelnet_hdf'", ",", "\n", "choices", "=", "[", "'modelnet_hdf'", ",", "'bunny'", ",", "'armadillo'", ",", "'buddha'", ",", "'dragon'", "]", ",", "\n", "metavar", "=", "'DATASET'", ",", "help", "=", "'dataset type (default: modelnet_hdf)'", ")", "\n", "parser", ".", "add_argument", "(", "'--num_points'", ",", "default", "=", "1024", ",", "type", "=", "int", ",", "\n", "metavar", "=", "'N'", ",", "help", "=", "'points in point-cloud (default: 1024)'", ")", "\n", "parser", ".", "add_argument", "(", "'--noise_type'", ",", "default", "=", "'crop'", ",", "choices", "=", "[", "'clean'", ",", "'jitter'", ",", "'crop'", ",", "'partial_identical'", "]", ",", "\n", "help", "=", "'Types of perturbation to consider'", ")", "\n", "parser", ".", "add_argument", "(", "'--rot_mag'", ",", "default", "=", "45.0", ",", "type", "=", "float", ",", "\n", "metavar", "=", "'T'", ",", "help", "=", "'Maximum magnitude of rotation perturbation (in degrees)'", ")", "\n", "parser", ".", "add_argument", "(", "'--trans_mag'", ",", "default", "=", "0.5", ",", "type", "=", "float", ",", "\n", "metavar", "=", "'T'", ",", "help", "=", "'Maximum magnitude of translation perturbation'", ")", "\n", "parser", ".", "add_argument", "(", "'--partial'", ",", "default", "=", "[", "0.7", ",", "0.7", "]", ",", "nargs", "=", "'+'", ",", "type", "=", "float", ",", "\n", "help", "=", "'Approximate proportion of points to keep for partial overlap (Set to 1.0 to disable)'", ")", "\n", "# Model", "\n", "parser", ".", "add_argument", "(", "'--method'", ",", "type", "=", "str", ",", "default", "=", "'rpmnet'", ",", "choices", "=", "[", "'rpmnet'", "]", ",", "\n", "help", "=", "'Model to use. Note: Only rpmnet is supported for training.'", "\n", "'\\'eye\\' denotes identity (no registration), \\'gt\\' denotes groundtruth transforms'", ")", "\n", "# PointNet settings", "\n", "parser", ".", "add_argument", "(", "'--radius'", ",", "type", "=", "float", ",", "default", "=", "0.3", ",", "help", "=", "'Neighborhood radius for computing pointnet features'", ")", "\n", "parser", ".", "add_argument", "(", "'--num_neighbors'", ",", "type", "=", "int", ",", "default", "=", "64", ",", "metavar", "=", "'N'", ",", "help", "=", "'Max num of neighbors to use'", ")", "\n", "# RPMNet settings", "\n", "parser", ".", "add_argument", "(", "'--features'", ",", "type", "=", "str", ",", "choices", "=", "[", "'ppf'", ",", "'dxyz'", ",", "'xyz'", "]", ",", "default", "=", "[", "'ppf'", ",", "'dxyz'", ",", "'xyz'", "]", ",", "\n", "nargs", "=", "'+'", ",", "help", "=", "'Which features to use. Default: all'", ")", "\n", "parser", ".", "add_argument", "(", "'--feat_dim'", ",", "type", "=", "int", ",", "default", "=", "96", ",", "\n", "help", "=", "'Feature dimension (to compute distances on). Other numbers will be scaled accordingly'", ")", "\n", "parser", ".", "add_argument", "(", "'--no_slack'", ",", "action", "=", "'store_true'", ",", "help", "=", "'If set, will not have a slack column.'", ")", "\n", "parser", ".", "add_argument", "(", "'--num_sk_iter'", ",", "type", "=", "int", ",", "default", "=", "5", ",", "\n", "help", "=", "'Number of inner iterations used in sinkhorn normalization'", ")", "\n", "parser", ".", "add_argument", "(", "'--num_reg_iter'", ",", "type", "=", "int", ",", "default", "=", "5", ",", "\n", "help", "=", "'Number of outer iterations used for registration (only during inference)'", ")", "\n", "parser", ".", "add_argument", "(", "'--loss_type'", ",", "type", "=", "str", ",", "choices", "=", "[", "'mse'", ",", "'mae'", "]", ",", "default", "=", "'mae'", ",", "\n", "help", "=", "'Loss aggregation type'", ")", "\n", "parser", ".", "add_argument", "(", "'--wt_inliers'", ",", "type", "=", "float", ",", "default", "=", "1e-2", ",", "help", "=", "'Weight to encourage inliers'", ")", "\n", "# Training parameters", "\n", "parser", ".", "add_argument", "(", "'--train_batch_size'", ",", "default", "=", "4", ",", "type", "=", "int", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'training mini-batch size (default 4)'", ")", "\n", "parser", ".", "add_argument", "(", "'-b'", ",", "'--val_batch_size'", ",", "default", "=", "4", ",", "type", "=", "int", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'mini-batch size during validation or testing (default: 4)'", ")", "\n", "parser", ".", "add_argument", "(", "'--resume'", ",", "default", "=", "None", ",", "type", "=", "str", ",", "metavar", "=", "'PATH'", ",", "\n", "help", "=", "'Pretrained network to load from. Optional for train, required for inference.'", ")", "\n", "parser", ".", "add_argument", "(", "'--gpu'", ",", "default", "=", "0", ",", "type", "=", "int", ",", "metavar", "=", "'DEVICE'", ",", "\n", "help", "=", "'GPU to use, ignored if no GPU is present. Set to negative to use cpu'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--loss_method'", ",", "type", "=", "str", ",", "choices", "=", "[", "'rpmloss'", ",", "'corrloss'", "]", ",", "default", "=", "'corrloss'", ",", "\n", "help", "=", "'Loss method to be optimized'", ")", "\n", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.src.arguments.rpmnet_train_arguments": [[68, 92], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "arguments.rpmnet_arguments"], "function", ["home.repos.pwc.inspect_result.tzodge_PCR-CMU.src.arguments.rpmnet_arguments"], ["", "def", "rpmnet_train_arguments", "(", ")", ":", "\n", "    ", "\"\"\"Used only for training\"\"\"", "\n", "parser", "=", "argparse", ".", "ArgumentParser", "(", "parents", "=", "[", "rpmnet_arguments", "(", ")", "]", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--train_categoryfile'", ",", "type", "=", "str", ",", "metavar", "=", "'PATH'", ",", "default", "=", "'./data_loader/modelnet40_all.txt'", ",", "\n", "help", "=", "'path to the categories to be trained'", ")", "# eg. './dataset/modelnet40_half1.txt'", "\n", "parser", ".", "add_argument", "(", "'--val_categoryfile'", ",", "type", "=", "str", ",", "metavar", "=", "'PATH'", ",", "default", "=", "'./data_loader/modelnet40_all.txt'", ",", "\n", "help", "=", "'path to the categories to be val'", ")", "# eg. './sampledata/modelnet40_half1.txt'", "\n", "# Training parameters", "\n", "parser", ".", "add_argument", "(", "'--lr'", ",", "default", "=", "1e-4", ",", "type", "=", "float", ",", "help", "=", "'Learning rate during training'", ")", "\n", "parser", ".", "add_argument", "(", "'--epochs'", ",", "default", "=", "1000", ",", "type", "=", "int", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'number of total epochs to run'", ")", "\n", "parser", ".", "add_argument", "(", "'--summary_every'", ",", "default", "=", "200", ",", "type", "=", "int", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'Frequency of saving summary (number of steps if positive, number of epochs if negative)'", ")", "\n", "parser", ".", "add_argument", "(", "'--validate_every'", ",", "default", "=", "-", "4", ",", "type", "=", "int", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'Frequency of evaluation (number of steps if positive, number of epochs if negative).'", "\n", "'Also saves checkpoints at the same interval'", ")", "\n", "parser", ".", "add_argument", "(", "'--num_workers'", ",", "default", "=", "32", ",", "type", "=", "int", ",", "\n", "help", "=", "'Number of workers for data_loader loader (default: 32).'", ")", "\n", "parser", ".", "add_argument", "(", "'--num_train_reg_iter'", ",", "type", "=", "int", ",", "default", "=", "2", ",", "\n", "help", "=", "'Number of outer iterations used for registration (only during training)'", ")", "\n", "\n", "parser", ".", "description", "=", "'Train RPMNet'", "\n", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.src.arguments.rpmnet_eval_arguments": [[94, 110], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "arguments.rpmnet_arguments"], "function", ["home.repos.pwc.inspect_result.tzodge_PCR-CMU.src.arguments.rpmnet_arguments"], ["", "def", "rpmnet_eval_arguments", "(", ")", ":", "\n", "    ", "\"\"\"Used during evaluation\"\"\"", "\n", "parser", "=", "argparse", ".", "ArgumentParser", "(", "parents", "=", "[", "rpmnet_arguments", "(", ")", "]", ")", "\n", "\n", "# settings for input data_loader", "\n", "parser", ".", "add_argument", "(", "'--test_category_file'", ",", "type", "=", "str", ",", "metavar", "=", "'PATH'", ",", "default", "=", "'./data_loader/modelnet40_all.txt'", ",", "\n", "help", "=", "'path to the categories to be val'", ")", "\n", "# Provided transforms", "\n", "parser", ".", "add_argument", "(", "'--transform_file'", ",", "type", "=", "str", ",", "\n", "help", "=", "'If provided, will use transforms from this provided pickle file'", ")", "\n", "# Save out evaluation data_loader for further analysis", "\n", "parser", ".", "add_argument", "(", "'--eval_save_path'", ",", "type", "=", "str", ",", "default", "=", "'../eval_results'", ",", "\n", "help", "=", "'Output data_loader to save evaluation results'", ")", "\n", "\n", "parser", ".", "description", "=", "'RPMNet evaluation'", "\n", "return", "parser", "\n", "", ""]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.src.eval.compute_metrics": [[31, 100], ["torch.sum", "torch.no_grad", "common.math.so3.dcm2euler", "common.math.so3.dcm2euler", "numpy.mean", "numpy.mean", "torch.mean", "torch.mean", "common.math.se3.concatenate", "concatenated[].norm", "common.math.se3.transform", "common.math.se3.transform", "gt_transforms[].detach().cpu().numpy", "pred_transforms[].detach().cpu().numpy", "numpy.abs", "torch.abs", "common.math.se3.inverse", "common.math.se3.concatenate", "torch.min", "torch.min", "torch.mean", "torch.mean", "scores_pred.detach().cpu().numpy", "numpy.argmax", "scores_gt.detach().cpu().numpy", "numpy.argmax", "numpy.mean", "common.torch.to_numpy", "common.torch.to_numpy", "common.torch.to_numpy", "common.torch.to_numpy", "common.torch.to_numpy", "torch.acos", "common.math.se3.inverse", "eval.compute_metrics.square_distance"], "function", ["home.repos.pwc.inspect_result.tzodge_PCR-CMU.math.so3.dcm2euler", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.math.so3.dcm2euler", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.math_torch.se3.concatenate", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.math_torch.se3.transform", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.math_torch.se3.transform", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.math_torch.se3.inverse", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.math_torch.se3.concatenate", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.common.torch.to_numpy", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.common.torch.to_numpy", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.common.torch.to_numpy", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.common.torch.to_numpy", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.common.torch.to_numpy", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.math_torch.se3.inverse", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.models.pointnet_util.square_distance"], ["def", "compute_metrics", "(", "data", ":", "Dict", ",", "pred_transforms", ",", "perm_matrices", "=", "None", ")", "->", "Dict", ":", "\n", "    ", "\"\"\"Compute metrics required in the paper\n    \"\"\"", "\n", "\n", "def", "square_distance", "(", "src", ",", "dst", ")", ":", "\n", "        ", "return", "torch", ".", "sum", "(", "(", "src", "[", ":", ",", ":", ",", "None", ",", ":", "]", "-", "dst", "[", ":", ",", "None", ",", ":", ",", ":", "]", ")", "**", "2", ",", "dim", "=", "-", "1", ")", "\n", "\n", "\n", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "pred_transforms", "=", "pred_transforms", "\n", "gt_transforms", "=", "data", "[", "'transform_gt'", "]", "\n", "points_src", "=", "data", "[", "'points_src'", "]", "[", "...", ",", ":", "3", "]", "\n", "points_ref", "=", "data", "[", "'points_ref'", "]", "[", "...", ",", ":", "3", "]", "\n", "points_raw", "=", "data", "[", "'points_raw'", "]", "[", "...", ",", ":", "3", "]", "\n", "\n", "# Euler angles, Individual translation errors (Deep Closest Point convention)", "\n", "# TODO Change rotation to torch operations", "\n", "r_gt_euler_deg", "=", "dcm2euler", "(", "gt_transforms", "[", ":", ",", ":", "3", ",", ":", "3", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "seq", "=", "'xyz'", ")", "\n", "r_pred_euler_deg", "=", "dcm2euler", "(", "pred_transforms", "[", ":", ",", ":", "3", ",", ":", "3", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "seq", "=", "'xyz'", ")", "\n", "t_gt", "=", "gt_transforms", "[", ":", ",", ":", "3", ",", "3", "]", "\n", "t_pred", "=", "pred_transforms", "[", ":", ",", ":", "3", ",", "3", "]", "\n", "r_mse", "=", "np", ".", "mean", "(", "(", "r_gt_euler_deg", "-", "r_pred_euler_deg", ")", "**", "2", ",", "axis", "=", "1", ")", "\n", "r_mae", "=", "np", ".", "mean", "(", "np", ".", "abs", "(", "r_gt_euler_deg", "-", "r_pred_euler_deg", ")", ",", "axis", "=", "1", ")", "\n", "t_mse", "=", "torch", ".", "mean", "(", "(", "t_gt", "-", "t_pred", ")", "**", "2", ",", "dim", "=", "1", ")", "\n", "t_mae", "=", "torch", ".", "mean", "(", "torch", ".", "abs", "(", "t_gt", "-", "t_pred", ")", ",", "dim", "=", "1", ")", "\n", "\n", "# Rotation, translation errors (isotropic, i.e. doesn't depend on error", "\n", "# direction, which is more representative of the actual error)", "\n", "concatenated", "=", "se3", ".", "concatenate", "(", "se3", ".", "inverse", "(", "gt_transforms", ")", ",", "pred_transforms", ")", "\n", "rot_trace", "=", "concatenated", "[", ":", ",", "0", ",", "0", "]", "+", "concatenated", "[", ":", ",", "1", ",", "1", "]", "+", "concatenated", "[", ":", ",", "2", ",", "2", "]", "\n", "residual_rotdeg", "=", "torch", ".", "acos", "(", "torch", ".", "clamp", "(", "0.5", "*", "(", "rot_trace", "-", "1", ")", ",", "min", "=", "-", "1.0", ",", "max", "=", "1.0", ")", ")", "*", "180.0", "/", "np", ".", "pi", "\n", "residual_transmag", "=", "concatenated", "[", ":", ",", ":", ",", "3", "]", ".", "norm", "(", "dim", "=", "-", "1", ")", "\n", "\n", "# Modified Chamfer distance", "\n", "src_transformed", "=", "se3", ".", "transform", "(", "pred_transforms", ",", "points_src", ")", "\n", "ref_clean", "=", "points_raw", "\n", "src_clean", "=", "se3", ".", "transform", "(", "se3", ".", "concatenate", "(", "pred_transforms", ",", "se3", ".", "inverse", "(", "gt_transforms", ")", ")", ",", "points_raw", ")", "\n", "dist_src", "=", "torch", ".", "min", "(", "square_distance", "(", "src_transformed", ",", "ref_clean", ")", ",", "dim", "=", "-", "1", ")", "[", "0", "]", "\n", "dist_ref", "=", "torch", ".", "min", "(", "square_distance", "(", "points_ref", ",", "src_clean", ")", ",", "dim", "=", "-", "1", ")", "[", "0", "]", "\n", "chamfer_dist", "=", "torch", ".", "mean", "(", "dist_src", ",", "dim", "=", "1", ")", "+", "torch", ".", "mean", "(", "dist_ref", ",", "dim", "=", "1", ")", "\n", "\n", "\n", "# computing percentage of correct correspondences        ", "\n", "if", "perm_matrices", "is", "not", "None", ":", "\n", "\n", "            ", "scores_pred", "=", "perm_matrices", "#b,m,n", "\n", "scores_gt", "=", "data", "[", "'corr_mat'", "]", "# b,m,n", "\n", "\n", "corr_mat_pred", "=", "scores_pred", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "# b,m,n    ", "\n", "col_idx_pred", "=", "np", ".", "argmax", "(", "corr_mat_pred", ",", "axis", "=", "-", "1", ")", "\n", "corr_mat_gt", "=", "scores_gt", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "# b,m,n   ", "\n", "col_idx_gt", "=", "np", ".", "argmax", "(", "corr_mat_gt", ",", "axis", "=", "-", "1", ")", "# b,m", "\n", "\n", "correct_mask", "=", "(", "col_idx_gt", "==", "col_idx_pred", ")", "*", "1", "# b,m", "\n", "correct_corr", "=", "np", ".", "mean", "(", "correct_mask", ",", "axis", "=", "1", ")", "# b", "\n", "\n", "", "metrics", "=", "{", "\n", "'r_mse'", ":", "r_mse", ",", "\n", "'r_mae'", ":", "r_mae", ",", "\n", "'t_mse'", ":", "to_numpy", "(", "t_mse", ")", ",", "\n", "'t_mae'", ":", "to_numpy", "(", "t_mae", ")", ",", "\n", "'err_r_deg'", ":", "to_numpy", "(", "residual_rotdeg", ")", ",", "\n", "'err_t'", ":", "to_numpy", "(", "residual_transmag", ")", ",", "\n", "'chamfer_dist'", ":", "to_numpy", "(", "chamfer_dist", ")", ",", "\n", "'correct_corr'", ":", "correct_corr", "\n", "}", "\n", "\n", "", "return", "metrics", "\n", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.src.eval.summarize_metrics": [[102, 115], ["k.endswith", "numpy.sqrt", "k.startswith", "numpy.mean", "numpy.mean", "numpy.sqrt", "numpy.mean", "numpy.mean"], "function", ["None"], ["", "def", "summarize_metrics", "(", "metrics", ")", ":", "\n", "    ", "\"\"\"Summaries computed metrices by taking mean over all data instances\"\"\"", "\n", "summarized", "=", "{", "}", "\n", "for", "k", "in", "metrics", ":", "\n", "        ", "if", "k", ".", "endswith", "(", "'mse'", ")", ":", "\n", "            ", "summarized", "[", "k", "[", ":", "-", "3", "]", "+", "'rmse'", "]", "=", "np", ".", "sqrt", "(", "np", ".", "mean", "(", "metrics", "[", "k", "]", ")", ")", "\n", "", "elif", "k", ".", "startswith", "(", "'err'", ")", ":", "\n", "            ", "summarized", "[", "k", "+", "'_mean'", "]", "=", "np", ".", "mean", "(", "metrics", "[", "k", "]", ")", "\n", "summarized", "[", "k", "+", "'_rmse'", "]", "=", "np", ".", "sqrt", "(", "np", ".", "mean", "(", "metrics", "[", "k", "]", "**", "2", ")", ")", "\n", "", "else", ":", "\n", "            ", "summarized", "[", "k", "]", "=", "np", ".", "mean", "(", "metrics", "[", "k", "]", ")", "\n", "\n", "", "", "return", "summarized", "\n", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.src.eval.print_metrics": [[117, 141], ["logger.info", "logger.info", "logger.info", "logger.info", "logger.info", "logger.info", "logger.info", "summary_metrics.keys", "logger.info", "len"], "function", ["None"], ["", "def", "print_metrics", "(", "logger", ",", "summary_metrics", ":", "Dict", ",", "losses_by_iteration", ":", "List", "=", "None", ",", "\n", "title", ":", "str", "=", "'Metrics'", ")", ":", "\n", "    ", "\"\"\"Prints out formated metrics to logger\"\"\"", "\n", "\n", "logger", ".", "info", "(", "title", "+", "':'", ")", "\n", "logger", ".", "info", "(", "'='", "*", "(", "len", "(", "title", ")", "+", "1", ")", ")", "\n", "\n", "if", "losses_by_iteration", "is", "not", "None", ":", "\n", "        ", "losses_all_str", "=", "' | '", ".", "join", "(", "[", "'{:.5f}'", ".", "format", "(", "c", ")", "for", "c", "in", "losses_by_iteration", "]", ")", "\n", "logger", ".", "info", "(", "'Losses by iteration: {}'", ".", "format", "(", "losses_all_str", ")", ")", "\n", "\n", "", "logger", ".", "info", "(", "'DeepCP metrics:{:.4f}(rot-rmse) | {:.4f}(rot-mae) | {:.4g}(trans-rmse) | {:.4g}(trans-mae)'", ".", "format", "(", "\n", "summary_metrics", "[", "'r_rmse'", "]", ",", "summary_metrics", "[", "'r_mae'", "]", ",", "\n", "summary_metrics", "[", "'t_rmse'", "]", ",", "summary_metrics", "[", "'t_mae'", "]", ",", "\n", ")", ")", "\n", "logger", ".", "info", "(", "'Rotation error {:.4f}(deg, mean) | {:.4f}(deg, rmse)'", ".", "format", "(", "\n", "summary_metrics", "[", "'err_r_deg_mean'", "]", ",", "summary_metrics", "[", "'err_r_deg_rmse'", "]", ")", ")", "\n", "logger", ".", "info", "(", "'Translation error {:.4g}(mean) | {:.4g}(rmse)'", ".", "format", "(", "\n", "summary_metrics", "[", "'err_t_mean'", "]", ",", "summary_metrics", "[", "'err_t_rmse'", "]", ")", ")", "\n", "logger", ".", "info", "(", "'Chamfer error: {:.7f}(mean-sq)'", ".", "format", "(", "\n", "summary_metrics", "[", "'chamfer_dist'", "]", ")", ")", "\n", "if", "'correct_corr'", "in", "summary_metrics", ".", "keys", "(", ")", ":", "\n", "        ", "logger", ".", "info", "(", "'Correct inlier correspondences: {:.7f}(percent)'", ".", "format", "(", "\n", "summary_metrics", "[", "'correct_corr'", "]", "*", "100", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.src.eval.evaluate": [[143, 158], ["_logger.info", "eval.summarize_metrics", "eval.print_metrics", "torch.no_grad", "collections.defaultdict", "common.torch.dict_all_to_device", "model", "eval.compute_metrics", "numpy.concatenate", "all_test_metrics_np[].append"], "function", ["home.repos.pwc.inspect_result.tzodge_PCR-CMU.src.eval.summarize_metrics", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.src.eval.print_metrics", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.common.torch.dict_all_to_device", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.src.eval.compute_metrics", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.math_torch.se3.concatenate"], ["", "", "def", "evaluate", "(", "data_loader", ",", "model", ":", "torch", ".", "nn", ".", "Module", ")", ":", "\n", "    ", "\"\"\" Evaluates the model's prediction against the groundtruth \"\"\"", "\n", "_logger", ".", "info", "(", "'Starting evaluation...'", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "all_test_metrics_np", "=", "defaultdict", "(", "list", ")", "\n", "for", "test_data", "in", "data_loader", ":", "\n", "            ", "dict_all_to_device", "(", "test_data", ",", "_device", ")", "\n", "pred_test_transforms", ",", "endpoints", "=", "model", "(", "test_data", ",", "_args", ".", "num_reg_iter", ")", "\n", "test_metrics", "=", "compute_metrics", "(", "test_data", ",", "pred_test_transforms", "[", "-", "1", "]", ",", "endpoints", "[", "'perm_matrices'", "]", "[", "-", "1", "]", ")", "\n", "for", "k", "in", "test_metrics", ":", "\n", "                ", "all_test_metrics_np", "[", "k", "]", ".", "append", "(", "test_metrics", "[", "k", "]", ")", "\n", "", "", "all_test_metrics_np", "=", "{", "k", ":", "np", ".", "concatenate", "(", "all_test_metrics_np", "[", "k", "]", ")", "for", "k", "in", "all_test_metrics_np", "}", "\n", "\n", "", "summary_metrics", "=", "summarize_metrics", "(", "all_test_metrics_np", ")", "\n", "print_metrics", "(", "_logger", ",", "summary_metrics", ",", "title", "=", "'Evaluation results'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.src.eval.get_model": [[160, 171], ["_logger.info", "models.rpmnet.get_model", "models.rpmnet.get_model.to", "common.torch.CheckPointManager", "common.torch.CheckPointManager.load", "os.path.join"], "function", ["home.repos.pwc.inspect_result.tzodge_PCR-CMU.models.rpmnet.get_model", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.common.torch.CheckPointManager.load"], ["", "def", "get_model", "(", ")", ":", "\n", "    ", "_logger", ".", "info", "(", "'Computing transforms using {}'", ".", "format", "(", "_args", ".", "method", ")", ")", "\n", "if", "_args", ".", "method", "==", "'rpmnet'", ":", "\n", "        ", "assert", "_args", ".", "resume", "is", "not", "None", "\n", "model", "=", "models", ".", "rpmnet", ".", "get_model", "(", "_args", ")", "\n", "model", ".", "to", "(", "_device", ")", "\n", "saver", "=", "CheckPointManager", "(", "os", ".", "path", ".", "join", "(", "_log_path", ",", "'ckpt'", ",", "'models'", ")", ")", "\n", "saver", ".", "load", "(", "_args", ".", "resume", ",", "model", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.src.eval.main": [[173, 183], ["data_loader.datasets.get_test_datasets", "torch.utils.data.DataLoader", "eval.get_model", "get_model.eval", "eval.evaluate", "_logger.info"], "function", ["home.repos.pwc.inspect_result.tzodge_PCR-CMU.data_loader.datasets.get_test_datasets", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.models.rpmnet.get_model", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.src.eval.evaluate"], ["", "def", "main", "(", ")", ":", "\n", "# Load data_loader", "\n", "    ", "test_dataset", "=", "get_test_datasets", "(", "_args", ")", "\n", "test_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "test_dataset", ",", "\n", "batch_size", "=", "_args", ".", "val_batch_size", ",", "shuffle", "=", "False", ")", "\n", "\n", "model", "=", "get_model", "(", ")", "\n", "model", ".", "eval", "(", ")", "\n", "evaluate", "(", "test_loader", ",", "model", ")", "\n", "_logger", ".", "info", "(", "'Finished'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.src.train.main": [[44, 47], ["data_loader.datasets.get_train_datasets", "train.run"], "function", ["home.repos.pwc.inspect_result.tzodge_PCR-CMU.data_loader.datasets.get_train_datasets", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.src.train.run"], ["", "def", "main", "(", ")", ":", "\n", "    ", "train_set", ",", "val_set", "=", "get_train_datasets", "(", "_args", ")", "\n", "run", "(", "train_set", ",", "val_set", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.src.train.compute_losses": [[49, 132], ["len", "torch.sum", "torch.sum", "torch.sum", "range", "common.math_torch.se3.transform", "range", "total_losses.append", "torch.stack", "torch.stack", "torch.stack", "torch.MSELoss", "range", "reduction.lower", "reduction.lower", "common.math_torch.se3.transform", "torch.L1Loss", "range", "reduction.lower", "reduction.lower", "nn.L1Loss.", "common.math_torch.se3.transform", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "reduction.lower", "int", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "reduction.lower", "torch.mean", "torch.mean", "torch.mean", "reduction.lower", "nn.L1Loss.", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "nn.L1Loss.", "reduction.lower", "torch.mean", "torch.mean", "torch.mean", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "nn.L1Loss.", "k.rfind"], "function", ["home.repos.pwc.inspect_result.tzodge_PCR-CMU.math_torch.se3.transform", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.math_torch.se3.transform", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.math_torch.se3.transform"], ["", "def", "compute_losses", "(", "data", ":", "Dict", ",", "pred_transforms", ":", "List", ",", "endpoints", ":", "Dict", ",", "\n", "loss_type", ":", "str", "=", "'mae'", ",", "reduction", ":", "str", "=", "'mean'", ",", "loss_method", ":", "str", "=", "'corrloss'", ")", "->", "Dict", ":", "\n", "    ", "\"\"\"Compute losses\n\n    Args:\n        data: Current mini-batch data\n        pred_transforms: Predicted transform, to compute main registration loss\n        endpoints: Endpoints for training. For computing outlier penalty\n        loss_type: Registration loss type, either 'mae' (Mean absolute error, used in paper) or 'mse'\n        loss_method: The type of loss function to use. 'corrloss' or 'rpmloss'\n        reduction: Either 'mean' or 'none'. Use 'none' to accumulate losses outside\n                   (useful for accumulating losses for entire validation dataset)\n\n    Returns:\n        losses: Dict containing various fields. Total loss to be optimized is in losses['total']\n\n    \"\"\"", "\n", "\n", "losses", "=", "{", "}", "\n", "num_iter", "=", "len", "(", "pred_transforms", ")", "\n", "\n", "####################################################################################################################", "\n", "if", "loss_method", "==", "'corrloss'", ":", "\n", "        ", "\"\"\"\n        Computes Correspondence Loss (Our Approach)\n        computes NLL Loss between the predicted & the groundtruth correspondence matrix\n        \"\"\"", "\n", "for", "i", "in", "range", "(", "num_iter", ")", ":", "\n", "            ", "scores_mat", "=", "endpoints", "[", "'perm_matrices'", "]", "[", "i", "]", "\n", "corr_mat", "=", "data", "[", "'corr_mat'", "]", "\n", "\n", "if", "reduction", ".", "lower", "(", ")", "==", "'mean'", ":", "\n", "                ", "losses", "[", "'corrloss_{}'", ".", "format", "(", "i", ")", "]", "=", "-", "torch", ".", "sum", "(", "corr_mat", "*", "torch", ".", "log", "(", "scores_mat", "+", "1e-8", ")", ")", "/", "(", "torch", ".", "sum", "(", "corr_mat", ")", "+", "1e-8", ")", "\n", "", "if", "reduction", ".", "lower", "(", ")", "==", "'none'", ":", "\n", "                ", "losses", "[", "'corrloss_{}'", ".", "format", "(", "i", ")", "]", "=", "-", "torch", ".", "sum", "(", "corr_mat", "*", "torch", ".", "log", "(", "scores_mat", "+", "1e-8", ")", ",", "dim", "=", "[", "-", "1", ",", "-", "2", "]", ")", "/", "(", "torch", ".", "sum", "(", "corr_mat", ",", "dim", "=", "[", "-", "1", ",", "-", "2", "]", ")", "+", "1e-8", ")", "\n", "\n", "\n", "#####################################################################################################################", "\n", "", "", "", "else", ":", "\n", "# Computes Transformation Loss", "\n", "        ", "gt_src_transformed", "=", "se3", ".", "transform", "(", "data", "[", "'transform_gt'", "]", ",", "data", "[", "'points_src'", "]", "[", "...", ",", ":", "3", "]", ")", "\n", "if", "loss_type", "==", "'mse'", ":", "\n", "# MSE loss to the groundtruth (does not take into account possible symmetries)", "\n", "            ", "criterion", "=", "nn", ".", "MSELoss", "(", "reduction", "=", "reduction", ")", "\n", "for", "i", "in", "range", "(", "num_iter", ")", ":", "\n", "                ", "pred_src_transformed", "=", "se3", ".", "transform", "(", "pred_transforms", "[", "i", "]", ",", "data", "[", "'points_src'", "]", "[", "...", ",", ":", "3", "]", ")", "\n", "if", "reduction", ".", "lower", "(", ")", "==", "'mean'", ":", "\n", "                    ", "losses", "[", "'mse_{}'", ".", "format", "(", "i", ")", "]", "=", "criterion", "(", "pred_src_transformed", ",", "gt_src_transformed", ")", "\n", "", "elif", "reduction", ".", "lower", "(", ")", "==", "'none'", ":", "\n", "                    ", "losses", "[", "'mse_{}'", ".", "format", "(", "i", ")", "]", "=", "torch", ".", "mean", "(", "criterion", "(", "pred_src_transformed", ",", "gt_src_transformed", ")", ",", "\n", "dim", "=", "[", "-", "1", ",", "-", "2", "]", ")", "\n", "", "", "", "elif", "loss_type", "==", "'mae'", ":", "\n", "# MSE loss to the groundtruth (does not take into account possible symmetries)", "\n", "            ", "criterion", "=", "nn", ".", "L1Loss", "(", "reduction", "=", "reduction", ")", "\n", "for", "i", "in", "range", "(", "num_iter", ")", ":", "\n", "                ", "pred_src_transformed", "=", "se3", ".", "transform", "(", "pred_transforms", "[", "i", "]", ",", "data", "[", "'points_src'", "]", "[", "...", ",", ":", "3", "]", ")", "\n", "if", "reduction", ".", "lower", "(", ")", "==", "'mean'", ":", "\n", "                    ", "losses", "[", "'mae_{}'", ".", "format", "(", "i", ")", "]", "=", "criterion", "(", "pred_src_transformed", ",", "gt_src_transformed", ")", "\n", "", "elif", "reduction", ".", "lower", "(", ")", "==", "'none'", ":", "\n", "                    ", "losses", "[", "'mae_{}'", ".", "format", "(", "i", ")", "]", "=", "torch", ".", "mean", "(", "criterion", "(", "pred_src_transformed", ",", "gt_src_transformed", ")", ",", "\n", "dim", "=", "[", "-", "1", ",", "-", "2", "]", ")", "\n", "", "", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "# Penalize outliers", "\n", "", "for", "i", "in", "range", "(", "num_iter", ")", ":", "\n", "            ", "ref_outliers_strength", "=", "(", "1.0", "-", "torch", ".", "sum", "(", "endpoints", "[", "'perm_matrices'", "]", "[", "i", "]", ",", "dim", "=", "1", ")", ")", "*", "_args", ".", "wt_inliers", "\n", "src_outliers_strength", "=", "(", "1.0", "-", "torch", ".", "sum", "(", "endpoints", "[", "'perm_matrices'", "]", "[", "i", "]", ",", "dim", "=", "2", ")", ")", "*", "_args", ".", "wt_inliers", "\n", "if", "reduction", ".", "lower", "(", ")", "==", "'mean'", ":", "\n", "                ", "losses", "[", "'outlier_{}'", ".", "format", "(", "i", ")", "]", "=", "torch", ".", "mean", "(", "ref_outliers_strength", ")", "+", "torch", ".", "mean", "(", "src_outliers_strength", ")", "\n", "", "elif", "reduction", ".", "lower", "(", ")", "==", "'none'", ":", "\n", "                ", "losses", "[", "'outlier_{}'", ".", "format", "(", "i", ")", "]", "=", "torch", ".", "mean", "(", "ref_outliers_strength", ",", "dim", "=", "1", ")", "+", "torch", ".", "mean", "(", "src_outliers_strength", ",", "dim", "=", "1", ")", "\n", "######################################################################################################################", "\n", "\n", "", "", "", "discount_factor", "=", "0.5", "# Early iterations will be discounted", "\n", "total_losses", "=", "[", "]", "\n", "for", "k", "in", "losses", ":", "\n", "        ", "discount", "=", "discount_factor", "**", "(", "num_iter", "-", "int", "(", "k", "[", "k", ".", "rfind", "(", "'_'", ")", "+", "1", ":", "]", ")", "-", "1", ")", "\n", "total_losses", ".", "append", "(", "losses", "[", "k", "]", "*", "discount", ")", "\n", "", "losses", "[", "'total'", "]", "=", "torch", ".", "sum", "(", "torch", ".", "stack", "(", "total_losses", ")", ",", "dim", "=", "0", ")", "\n", "\n", "return", "losses", "\n", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.src.train.save_summaries": [[134, 186], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "writer.flush", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.cat", "torch.cat", "torch.cat", "writer.add_mesh", "numpy.concatenate", "common.math_torch.se3.transform", "torch.cat", "torch.cat", "torch.cat", "writer.add_mesh", "matplotlib.pyplot.cm.ScalarMappable", "range", "writer.add_scalar", "writer.add_scalar", "len", "torch.sum", "torch.sum", "torch.sum", "writer.add_mesh", "len", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "writer.add_histogram", "writer.add_histogram", "numpy.tile", "numpy.tile", "len", "matplotlib.pyplot.cm.get_cmap", "colormap.ScalarMappable.to_rgba", "torch.sum.detach().cpu().numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.sum.detach().cpu", "torch.sum.detach"], "function", ["home.repos.pwc.inspect_result.tzodge_PCR-CMU.math_torch.se3.concatenate", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.math_torch.se3.transform"], ["", "def", "save_summaries", "(", "writer", ":", "SummaryWriter", ",", "data", ":", "Dict", ",", "predicted", ":", "List", ",", "endpoints", ":", "Dict", "=", "None", ",", "\n", "losses", ":", "Dict", "=", "None", ",", "metrics", ":", "Dict", "=", "None", ",", "step", ":", "int", "=", "0", ")", ":", "\n", "    ", "\"\"\"Save tensorboard summaries\"\"\"", "\n", "\n", "subset", "=", "[", "0", ",", "1", "]", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "# Save clouds", "\n", "        ", "if", "'points_src'", "in", "data", ":", "\n", "\n", "            ", "points_src", "=", "data", "[", "'points_src'", "]", "[", "subset", ",", "...", ",", ":", "3", "]", "\n", "points_ref", "=", "data", "[", "'points_ref'", "]", "[", "subset", ",", "...", ",", ":", "3", "]", "\n", "\n", "colors", "=", "torch", ".", "from_numpy", "(", "\n", "np", ".", "concatenate", "(", "[", "np", ".", "tile", "(", "ORANGE", ",", "(", "*", "points_src", ".", "shape", "[", "0", ":", "2", "]", ",", "1", ")", ")", ",", "\n", "np", ".", "tile", "(", "BLUE", ",", "(", "*", "points_ref", ".", "shape", "[", "0", ":", "2", "]", ",", "1", ")", ")", "]", ",", "axis", "=", "1", ")", ")", "\n", "\n", "iters_to_save", "=", "[", "0", ",", "len", "(", "predicted", ")", "-", "1", "]", "if", "len", "(", "predicted", ")", ">", "1", "else", "[", "0", "]", "\n", "\n", "# Save point cloud at iter0, iter1 and after last iter", "\n", "concat_cloud_input", "=", "torch", ".", "cat", "(", "(", "points_src", ",", "points_ref", ")", ",", "dim", "=", "1", ")", "\n", "writer", ".", "add_mesh", "(", "'iter_0'", ",", "vertices", "=", "concat_cloud_input", ",", "colors", "=", "colors", ",", "global_step", "=", "step", ")", "\n", "for", "i_iter", "in", "iters_to_save", ":", "\n", "                ", "src_transformed_first", "=", "se3", ".", "transform", "(", "predicted", "[", "i_iter", "]", "[", "subset", ",", "...", "]", ",", "points_src", ")", "\n", "concat_cloud_first", "=", "torch", ".", "cat", "(", "(", "src_transformed_first", ",", "points_ref", ")", ",", "dim", "=", "1", ")", "\n", "writer", ".", "add_mesh", "(", "'iter_{}'", ".", "format", "(", "i_iter", "+", "1", ")", ",", "vertices", "=", "concat_cloud_first", ",", "colors", "=", "colors", ",", "global_step", "=", "step", ")", "\n", "\n", "", "if", "endpoints", "is", "not", "None", "and", "'perm_matrices'", "in", "endpoints", ":", "\n", "                ", "color_mapper", "=", "colormap", ".", "ScalarMappable", "(", "norm", "=", "None", ",", "cmap", "=", "colormap", ".", "get_cmap", "(", "'coolwarm'", ")", ")", "\n", "for", "i_iter", "in", "iters_to_save", ":", "\n", "                    ", "ref_weights", "=", "torch", ".", "sum", "(", "endpoints", "[", "'perm_matrices'", "]", "[", "i_iter", "]", "[", "subset", ",", "...", "]", ",", "dim", "=", "1", ")", "\n", "ref_colors", "=", "color_mapper", ".", "to_rgba", "(", "ref_weights", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "[", "...", ",", ":", "3", "]", "\n", "writer", ".", "add_mesh", "(", "'ref_weights_{}'", ".", "format", "(", "i_iter", ")", ",", "vertices", "=", "points_ref", ",", "\n", "colors", "=", "torch", ".", "from_numpy", "(", "ref_colors", ")", "*", "255", ",", "global_step", "=", "step", ")", "\n", "\n", "", "", "", "if", "endpoints", "is", "not", "None", ":", "\n", "            ", "if", "'perm_matrices'", "in", "endpoints", ":", "\n", "                ", "for", "i_iter", "in", "range", "(", "len", "(", "endpoints", "[", "'perm_matrices'", "]", ")", ")", ":", "\n", "                    ", "src_weights", "=", "torch", ".", "sum", "(", "endpoints", "[", "'perm_matrices'", "]", "[", "i_iter", "]", ",", "dim", "=", "2", ")", "\n", "ref_weights", "=", "torch", ".", "sum", "(", "endpoints", "[", "'perm_matrices'", "]", "[", "i_iter", "]", ",", "dim", "=", "1", ")", "\n", "writer", ".", "add_histogram", "(", "'src_weights_{}'", ".", "format", "(", "i_iter", ")", ",", "src_weights", ",", "global_step", "=", "step", ")", "\n", "writer", ".", "add_histogram", "(", "'ref_weights_{}'", ".", "format", "(", "i_iter", ")", ",", "ref_weights", ",", "global_step", "=", "step", ")", "\n", "\n", "# Write losses and metrics", "\n", "", "", "", "if", "losses", "is", "not", "None", ":", "\n", "            ", "for", "l", "in", "losses", ":", "\n", "                ", "writer", ".", "add_scalar", "(", "'losses/{}'", ".", "format", "(", "l", ")", ",", "losses", "[", "l", "]", ",", "step", ")", "\n", "", "", "if", "metrics", "is", "not", "None", ":", "\n", "            ", "for", "m", "in", "metrics", ":", "\n", "                ", "writer", ".", "add_scalar", "(", "'metrics/{}'", ".", "format", "(", "m", ")", ",", "metrics", "[", "m", "]", ",", "step", ")", "\n", "\n", "", "", "writer", ".", "flush", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.src.train.validate": [[188, 249], ["_logger.info", "random.randint", "collections.defaultdict", "common.torch.dict_all_to_device", "model", "eval.summarize_metrics", "eval.print_metrics", "train.save_summaries", "torch.no_grad", "torch.no_grad", "torch.no_grad", "collections.defaultdict", "collections.defaultdict", "torch.argmax().cpu().item", "torch.argmax().cpu().item", "torch.argmax().cpu().item", "torch.argmax().cpu().item", "torch.argmax().cpu().item", "torch.argmax().cpu().item", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.stack().cpu().numpy", "torch.stack().cpu().numpy", "torch.stack().cpu().numpy", "torch.stack().cpu().numpy", "torch.stack().cpu().numpy", "torch.stack().cpu().numpy", "common.torch.dict_all_to_device", "model", "train.compute_losses", "eval.compute_metrics", "torch.cat", "torch.cat", "torch.cat", "numpy.concatenate", "torch.mean", "torch.mean", "torch.mean", "data_to_rerun[].append", "numpy.stack", "all_val_losses[].append", "all_val_metrics_np[].append", "torch.argmax().cpu", "torch.argmax().cpu", "torch.argmax().cpu", "torch.argmax().cpu", "torch.argmax().cpu", "torch.argmax().cpu", "torch.stack().cpu", "torch.stack().cpu", "torch.stack().cpu", "torch.stack().cpu", "torch.stack().cpu", "torch.stack().cpu", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "range", "range"], "function", ["home.repos.pwc.inspect_result.tzodge_PCR-CMU.common.torch.dict_all_to_device", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.src.eval.summarize_metrics", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.src.eval.print_metrics", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.src.train.save_summaries", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.common.torch.dict_all_to_device", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.src.train.compute_losses", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.src.eval.compute_metrics", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.math_torch.se3.concatenate"], ["", "", "def", "validate", "(", "data_loader", ",", "model", ":", "torch", ".", "nn", ".", "Module", ",", "summary_writer", ":", "SummaryWriter", ",", "step", ":", "int", ")", ":", "\n", "    ", "\"\"\"Perform a single validation run, and saves results into tensorboard summaries\"\"\"", "\n", "\n", "_logger", ".", "info", "(", "'Starting validation run...'", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "all_val_losses", "=", "defaultdict", "(", "list", ")", "\n", "all_val_metrics_np", "=", "defaultdict", "(", "list", ")", "\n", "\n", "for", "val_data", "in", "data_loader", ":", "\n", "            ", "dict_all_to_device", "(", "val_data", ",", "_device", ")", "\n", "pred_test_transforms", ",", "endpoints", "=", "model", "(", "val_data", ",", "_args", ".", "num_reg_iter", ")", "\n", "val_losses", "=", "compute_losses", "(", "val_data", ",", "pred_test_transforms", ",", "endpoints", ",", "\n", "loss_type", "=", "_args", ".", "loss_type", ",", "reduction", "=", "'none'", ",", "loss_method", "=", "_args", ".", "loss_method", ")", "\n", "val_metrics", "=", "compute_metrics", "(", "val_data", ",", "pred_test_transforms", "[", "-", "1", "]", ",", "endpoints", "[", "'perm_matrices'", "]", "[", "-", "1", "]", ")", "\n", "\n", "for", "k", "in", "val_losses", ":", "\n", "                ", "all_val_losses", "[", "k", "]", ".", "append", "(", "val_losses", "[", "k", "]", ")", "\n", "", "for", "k", "in", "val_metrics", ":", "\n", "                ", "all_val_metrics_np", "[", "k", "]", ".", "append", "(", "val_metrics", "[", "k", "]", ")", "\n", "\n", "", "", "all_val_losses", "=", "{", "k", ":", "torch", ".", "cat", "(", "all_val_losses", "[", "k", "]", ")", "for", "k", "in", "all_val_losses", "}", "\n", "all_val_metrics_np", "=", "{", "k", ":", "np", ".", "concatenate", "(", "all_val_metrics_np", "[", "k", "]", ")", "for", "k", "in", "all_val_metrics_np", "}", "\n", "mean_val_losses", "=", "{", "k", ":", "torch", ".", "mean", "(", "all_val_losses", "[", "k", "]", ")", "for", "k", "in", "all_val_losses", "}", "\n", "\n", "# Rerun on random and worst data instances and save to summary", "\n", "", "rand_idx", "=", "random", ".", "randint", "(", "0", ",", "all_val_losses", "[", "'total'", "]", ".", "shape", "[", "0", "]", "-", "1", ")", "\n", "\n", "if", "_args", ".", "loss_method", "==", "'corrloss'", ":", "\n", "        ", "worst_idx", "=", "torch", ".", "argmax", "(", "all_val_losses", "[", "'corrloss_{}'", ".", "format", "(", "_args", ".", "num_reg_iter", "-", "1", ")", "]", ")", ".", "cpu", "(", ")", ".", "item", "(", ")", "\n", "", "else", ":", "\n", "        ", "worst_idx", "=", "torch", ".", "argmax", "(", "all_val_losses", "[", "'{}_{}'", ".", "format", "(", "_args", ".", "loss_type", ",", "_args", ".", "num_reg_iter", "-", "1", ")", "]", ")", ".", "cpu", "(", ")", ".", "item", "(", ")", "\n", "\n", "", "indices_to_rerun", "=", "[", "rand_idx", ",", "worst_idx", "]", "\n", "\n", "data_to_rerun", "=", "defaultdict", "(", "list", ")", "\n", "for", "i", "in", "indices_to_rerun", ":", "\n", "        ", "cur", "=", "data_loader", ".", "dataset", "[", "i", "]", "\n", "for", "k", "in", "cur", ":", "\n", "            ", "data_to_rerun", "[", "k", "]", ".", "append", "(", "cur", "[", "k", "]", ")", "\n", "", "", "for", "k", "in", "data_to_rerun", ":", "\n", "        ", "data_to_rerun", "[", "k", "]", "=", "torch", ".", "from_numpy", "(", "np", ".", "stack", "(", "data_to_rerun", "[", "k", "]", ",", "axis", "=", "0", ")", ")", "\n", "", "dict_all_to_device", "(", "data_to_rerun", ",", "_device", ")", "\n", "pred_transforms", ",", "endpoints", "=", "model", "(", "data_to_rerun", ",", "_args", ".", "num_reg_iter", ")", "\n", "\n", "summary_metrics", "=", "summarize_metrics", "(", "all_val_metrics_np", ")", "\n", "\n", "if", "_args", ".", "loss_method", "==", "'corrloss'", ":", "\n", "        ", "losses_by_iteration", "=", "torch", ".", "stack", "(", "[", "mean_val_losses", "[", "'corrloss_{}'", ".", "format", "(", "k", ")", "]", "\n", "for", "k", "in", "range", "(", "_args", ".", "num_reg_iter", ")", "]", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "else", ":", "\n", "        ", "losses_by_iteration", "=", "torch", ".", "stack", "(", "[", "mean_val_losses", "[", "'{}_{}'", ".", "format", "(", "_args", ".", "loss_type", ",", "k", ")", "]", "\n", "for", "k", "in", "range", "(", "_args", ".", "num_reg_iter", ")", "]", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "", "print_metrics", "(", "_logger", ",", "summary_metrics", ",", "losses_by_iteration", ",", "'Validation results'", ")", "\n", "\n", "save_summaries", "(", "summary_writer", ",", "data", "=", "data_to_rerun", ",", "predicted", "=", "pred_transforms", ",", "endpoints", "=", "endpoints", ",", "\n", "losses", "=", "mean_val_losses", ",", "metrics", "=", "summary_metrics", ",", "step", "=", "step", ")", "\n", "\n", "score", "=", "-", "summary_metrics", "[", "'chamfer_dist'", "]", "\n", "return", "score", "\n", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.src.train.run": [[251, 329], ["_logger.debug", "models.rpmnet.get_model", "models.rpmnet.get_model.to", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "tensorboardX.SummaryWriter", "tensorboardX.SummaryWriter", "common.torch.CheckPointManager", "torch.autograd.set_detect_anomaly", "torch.autograd.set_detect_anomaly", "torch.autograd.set_detect_anomaly", "models.rpmnet.get_model.train", "len", "range", "_logger.info", "os.getpid", "models.rpmnet.get_model.parameters", "os.path.join", "os.path.join", "os.path.join", "_logger.info", "tqdm.tqdm", "tqdm.tqdm.close", "common.torch.CheckPointManager.load", "_logger.info", "abs", "abs", "torch.optim.Adam.zero_grad", "common.torch.dict_all_to_device", "models.rpmnet.get_model.", "train.compute_losses", "torch.optim.Adam.step", "tqdm.tqdm.set_description", "tqdm.tqdm.update", "_logger.info", "len", "train_losses[].backward", "train.save_summaries", "models.rpmnet.get_model.eval", "train.validate", "common.torch.CheckPointManager.save", "models.rpmnet.get_model.train", "len", "common.torch.TorchDebugger", "train_losses[].backward"], "function", ["home.repos.pwc.inspect_result.tzodge_PCR-CMU.models.rpmnet.get_model", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.main.train", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.main.IOStream.close", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.common.torch.CheckPointManager.load", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.common.torch.dict_all_to_device", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.src.train.compute_losses", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.chamfer_distance.chamfer_distance.ChamferDistanceFunction.backward", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.src.train.save_summaries", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.src.train.validate", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.common.torch.CheckPointManager.save", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.main.train", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.chamfer_distance.chamfer_distance.ChamferDistanceFunction.backward"], ["", "def", "run", "(", "train_set", ",", "val_set", ")", ":", "\n", "    ", "\"\"\"Main train/val loop\"\"\"", "\n", "\n", "_logger", ".", "debug", "(", "'Trainer (PID=%d), %s'", ",", "os", ".", "getpid", "(", ")", ",", "_args", ")", "\n", "\n", "model", "=", "get_model", "(", "_args", ")", "\n", "model", ".", "to", "(", "_device", ")", "\n", "global_step", "=", "0", "\n", "\n", "# dataloaders", "\n", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "train_set", ",", "\n", "batch_size", "=", "_args", ".", "train_batch_size", ",", "shuffle", "=", "True", ",", "num_workers", "=", "_args", ".", "num_workers", ")", "\n", "val_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "val_set", ",", "\n", "batch_size", "=", "_args", ".", "val_batch_size", ",", "shuffle", "=", "False", ",", "num_workers", "=", "_args", ".", "num_workers", ")", "\n", "\n", "# optimizer", "\n", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "_args", ".", "lr", ")", "\n", "\n", "# Summary writer and Checkpoint manager", "\n", "train_writer", "=", "SummaryWriter", "(", "os", ".", "path", ".", "join", "(", "_log_path", ",", "'train'", ")", ",", "flush_secs", "=", "10", ")", "\n", "val_writer", "=", "SummaryWriter", "(", "os", ".", "path", ".", "join", "(", "_log_path", ",", "'val'", ")", ",", "flush_secs", "=", "10", ")", "\n", "saver", "=", "CheckPointManager", "(", "os", ".", "path", ".", "join", "(", "_log_path", ",", "'ckpt'", ",", "'model'", ")", ",", "keep_checkpoint_every_n_hours", "=", "0.5", ")", "\n", "if", "_args", ".", "resume", "is", "not", "None", ":", "\n", "        ", "try", ":", "\n", "            ", "global_step", "=", "saver", ".", "load", "(", "_args", ".", "resume", ",", "model", ",", "optimizer", ")", "\n", "_logger", ".", "info", "(", "'Model loaded from '", "+", "_args", ".", "resume", ")", "\n", "\n", "", "except", ":", "\n", "            ", "_logger", ".", "info", "(", "'No checkpoint found, training from scratch'", ")", "\n", "\n", "# trainings", "\n", "", "", "torch", ".", "autograd", ".", "set_detect_anomaly", "(", "_args", ".", "debug", ")", "\n", "model", ".", "train", "(", ")", "\n", "\n", "steps_per_epoch", "=", "len", "(", "train_loader", ")", "\n", "if", "_args", ".", "summary_every", "<", "0", ":", "\n", "        ", "_args", ".", "summary_every", "=", "abs", "(", "_args", ".", "summary_every", ")", "*", "steps_per_epoch", "\n", "", "if", "_args", ".", "validate_every", "<", "0", ":", "\n", "        ", "_args", ".", "validate_every", "=", "abs", "(", "_args", ".", "validate_every", ")", "*", "steps_per_epoch", "\n", "\n", "", "for", "epoch", "in", "range", "(", "0", ",", "_args", ".", "epochs", ")", ":", "\n", "        ", "_logger", ".", "info", "(", "'Begin epoch {} (steps {} - {})'", ".", "format", "(", "epoch", ",", "global_step", ",", "global_step", "+", "len", "(", "train_loader", ")", ")", ")", "\n", "tbar", "=", "tqdm", "(", "total", "=", "len", "(", "train_loader", ")", ",", "ncols", "=", "100", ")", "\n", "for", "train_data", "in", "train_loader", ":", "\n", "            ", "global_step", "+=", "1", "\n", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "# Forward through neural network", "\n", "dict_all_to_device", "(", "train_data", ",", "_device", ")", "\n", "pred_transforms", ",", "endpoints", "=", "model", "(", "train_data", ",", "_args", ".", "num_train_reg_iter", ")", "# Use less iter during training", "\n", "\n", "# Compute loss, and optimize", "\n", "train_losses", "=", "compute_losses", "(", "train_data", ",", "pred_transforms", ",", "endpoints", ",", "\n", "loss_type", "=", "_args", ".", "loss_type", ",", "reduction", "=", "'mean'", ",", "loss_method", "=", "_args", ".", "loss_method", ")", "\n", "if", "_args", ".", "debug", ":", "\n", "                ", "with", "TorchDebugger", "(", ")", ":", "\n", "                    ", "train_losses", "[", "'total'", "]", ".", "backward", "(", ")", "\n", "", "", "else", ":", "\n", "                ", "train_losses", "[", "'total'", "]", ".", "backward", "(", ")", "\n", "", "optimizer", ".", "step", "(", ")", "\n", "\n", "tbar", ".", "set_description", "(", "'Loss:{:.3g}'", ".", "format", "(", "train_losses", "[", "'total'", "]", ")", ")", "\n", "tbar", ".", "update", "(", "1", ")", "\n", "\n", "if", "global_step", "%", "_args", ".", "summary_every", "==", "0", ":", "# Save tensorboard logs", "\n", "                ", "save_summaries", "(", "train_writer", ",", "data", "=", "train_data", ",", "predicted", "=", "pred_transforms", ",", "endpoints", "=", "endpoints", ",", "\n", "losses", "=", "train_losses", ",", "step", "=", "global_step", ")", "\n", "\n", "", "if", "global_step", "%", "_args", ".", "validate_every", "==", "0", ":", "# Validation loop. Also saves checkpoints", "\n", "                ", "model", ".", "eval", "(", ")", "\n", "val_score", "=", "validate", "(", "val_loader", ",", "model", ",", "val_writer", ",", "global_step", ")", "\n", "saver", ".", "save", "(", "model", ",", "optimizer", ",", "step", "=", "global_step", ",", "score", "=", "val_score", ")", "\n", "model", ".", "train", "(", ")", "\n", "\n", "", "", "tbar", ".", "close", "(", ")", "\n", "\n", "", "_logger", ".", "info", "(", "'Ending training. Number of steps = {}.'", ".", "format", "(", "global_step", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.models.rpmnet.RPMNet.__init__": [[144, 150], ["torch.Module.__init__", "logging.getLogger"], "methods", ["home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.model.DCP.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ":", "argparse", ".", "Namespace", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_logger", "=", "logging", ".", "getLogger", "(", "self", ".", "__class__", ".", "__name__", ")", "\n", "\n", "self", ".", "add_slack", "=", "not", "args", ".", "no_slack", "\n", "self", ".", "num_sk_iter", "=", "args", ".", "num_sk_iter", "\n", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.models.rpmnet.RPMNet.compute_affinity": [[151, 158], ["isinstance"], "methods", ["None"], ["", "def", "compute_affinity", "(", "self", ",", "beta", ",", "feat_distance", ",", "alpha", "=", "0.5", ")", ":", "\n", "        ", "\"\"\"Compute logarithm of Initial match matrix values, i.e. log(m_jk)\"\"\"", "\n", "if", "isinstance", "(", "alpha", ",", "float", ")", ":", "\n", "            ", "hybrid_affinity", "=", "-", "beta", "[", ":", ",", "None", ",", "None", "]", "*", "(", "feat_distance", "-", "alpha", ")", "\n", "", "else", ":", "\n", "            ", "hybrid_affinity", "=", "-", "beta", "[", ":", ",", "None", ",", "None", "]", "*", "(", "feat_distance", "-", "alpha", "[", ":", ",", "None", ",", "None", "]", ")", "\n", "", "return", "hybrid_affinity", "\n", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.models.rpmnet.RPMNet.forward": [[159, 213], ["range", "numpy.stack", "numpy.stack", "rpmnet.RPMNet.weights_net", "rpmnet.RPMNet.feat_extractor", "rpmnet.RPMNet.feat_extractor", "rpmnet.match_features", "rpmnet.RPMNet.compute_affinity", "rpmnet.sinkhorn", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "rpmnet.compute_rigid_transform", "common.math_torch.se3.transform", "transforms.append", "all_gamma.append", "all_perm_matrices.append", "all_weighted_ref.append", "all_beta.append", "all_alpha.append", "compute_rigid_transform.detach", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "common.torch.to_numpy", "common.torch.to_numpy", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum"], "methods", ["home.repos.pwc.inspect_result.tzodge_PCR-CMU.models.rpmnet.match_features", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.models.rpmnet.RPMNet.compute_affinity", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.models.rpmnet.sinkhorn", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.models.rpmnet.compute_rigid_transform", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.math_torch.se3.transform", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.common.torch.to_numpy", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.common.torch.to_numpy"], ["", "def", "forward", "(", "self", ",", "data", ",", "num_iter", ":", "int", "=", "1", ")", ":", "\n", "        ", "\"\"\"Forward pass for RPMNet\n\n        Args:\n            data: Dict containing the following fields:\n                    'points_src': Source points (B, J, 6)\n                    'points_ref': Reference points (B, K, 6)\n            num_iter (int): Number of iterations. Recommended to be 2 for training\n\n        Returns:\n            transform: Transform to apply to source points such that they align to reference\n            src_transformed: Transformed source points\n        \"\"\"", "\n", "endpoints", "=", "{", "}", "\n", "\n", "xyz_ref", ",", "norm_ref", "=", "data", "[", "'points_ref'", "]", "[", ":", ",", ":", ",", ":", "3", "]", ",", "data", "[", "'points_ref'", "]", "[", ":", ",", ":", ",", "3", ":", "6", "]", "\n", "xyz_src", ",", "norm_src", "=", "data", "[", "'points_src'", "]", "[", ":", ",", ":", ",", ":", "3", "]", ",", "data", "[", "'points_src'", "]", "[", ":", ",", ":", ",", "3", ":", "6", "]", "\n", "xyz_src_t", ",", "norm_src_t", "=", "xyz_src", ",", "norm_src", "\n", "\n", "transforms", "=", "[", "]", "\n", "all_gamma", ",", "all_perm_matrices", ",", "all_weighted_ref", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "all_beta", ",", "all_alpha", "=", "[", "]", ",", "[", "]", "\n", "for", "i", "in", "range", "(", "num_iter", ")", ":", "\n", "\n", "            ", "beta", ",", "alpha", "=", "self", ".", "weights_net", "(", "[", "xyz_src_t", ",", "xyz_ref", "]", ")", "\n", "feat_src", "=", "self", ".", "feat_extractor", "(", "xyz_src_t", ",", "norm_src_t", ")", "\n", "feat_ref", "=", "self", ".", "feat_extractor", "(", "xyz_ref", ",", "norm_ref", ")", "\n", "\n", "feat_distance", "=", "match_features", "(", "feat_src", ",", "feat_ref", ")", "\n", "affinity", "=", "self", ".", "compute_affinity", "(", "beta", ",", "feat_distance", ",", "alpha", "=", "alpha", ")", "\n", "\n", "# Compute weighted coordinates", "\n", "log_perm_matrix", "=", "sinkhorn", "(", "affinity", ",", "n_iters", "=", "self", ".", "num_sk_iter", ",", "slack", "=", "self", ".", "add_slack", ")", "\n", "perm_matrix", "=", "torch", ".", "exp", "(", "log_perm_matrix", ")", "\n", "weighted_ref", "=", "perm_matrix", "@", "xyz_ref", "/", "(", "torch", ".", "sum", "(", "perm_matrix", ",", "dim", "=", "2", ",", "keepdim", "=", "True", ")", "+", "_EPS", ")", "\n", "\n", "# Compute transform and transform points", "\n", "transform", "=", "compute_rigid_transform", "(", "xyz_src", ",", "weighted_ref", ",", "weights", "=", "torch", ".", "sum", "(", "perm_matrix", ",", "dim", "=", "2", ")", ")", "\n", "xyz_src_t", ",", "norm_src_t", "=", "se3", ".", "transform", "(", "transform", ".", "detach", "(", ")", ",", "xyz_src", ",", "norm_src", ")", "\n", "\n", "transforms", ".", "append", "(", "transform", ")", "\n", "all_gamma", ".", "append", "(", "torch", ".", "exp", "(", "affinity", ")", ")", "\n", "all_perm_matrices", ".", "append", "(", "perm_matrix", ")", "\n", "all_weighted_ref", ".", "append", "(", "weighted_ref", ")", "\n", "all_beta", ".", "append", "(", "to_numpy", "(", "beta", ")", ")", "\n", "all_alpha", ".", "append", "(", "to_numpy", "(", "alpha", ")", ")", "\n", "\n", "", "endpoints", "[", "'perm_matrices_init'", "]", "=", "all_gamma", "\n", "endpoints", "[", "'perm_matrices'", "]", "=", "all_perm_matrices", "\n", "endpoints", "[", "'weighted_ref'", "]", "=", "all_weighted_ref", "\n", "endpoints", "[", "'beta'", "]", "=", "np", ".", "stack", "(", "all_beta", ",", "axis", "=", "0", ")", "\n", "endpoints", "[", "'alpha'", "]", "=", "np", ".", "stack", "(", "all_alpha", ",", "axis", "=", "0", ")", "\n", "\n", "return", "transforms", ",", "endpoints", "\n", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.models.rpmnet.RPMNetEarlyFusion.__init__": [[217, 224], ["rpmnet.RPMNet.__init__", "models.feature_nets.ParameterPredictionNet", "models.feature_nets.FeatExtractionEarlyFusion"], "methods", ["home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.model.DCP.__init__"], ["def", "__init__", "(", "self", ",", "args", ":", "argparse", ".", "Namespace", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "args", ")", "\n", "\n", "self", ".", "weights_net", "=", "ParameterPredictionNet", "(", "weights_dim", "=", "[", "0", "]", ")", "\n", "self", ".", "feat_extractor", "=", "FeatExtractionEarlyFusion", "(", "\n", "features", "=", "args", ".", "features", ",", "feature_dim", "=", "args", ".", "feat_dim", ",", "\n", "radius", "=", "args", ".", "radius", ",", "num_neighbors", "=", "args", ".", "num_neighbors", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.models.rpmnet.match_features": [[19, 44], ["models.pointnet_util.square_distance", "models.pointnet_util.angle_difference", "torch.norm", "torch.norm", "torch.norm", "torch.norm"], "function", ["home.repos.pwc.inspect_result.tzodge_PCR-CMU.models.pointnet_util.square_distance", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.models.pointnet_util.angle_difference"], ["def", "match_features", "(", "feat_src", ",", "feat_ref", ",", "metric", "=", "'l2'", ")", ":", "\n", "    ", "\"\"\" Compute pairwise distance between features\n\n    Args:\n        feat_src: (B, J, C)\n        feat_ref: (B, K, C)\n        metric: either 'angle' or 'l2' (squared euclidean)\n\n    Returns:\n        Matching matrix (B, J, K). i'th row describes how well the i'th point\n         in the src agrees with every point in the ref.\n    \"\"\"", "\n", "assert", "feat_src", ".", "shape", "[", "-", "1", "]", "==", "feat_ref", ".", "shape", "[", "-", "1", "]", "\n", "\n", "if", "metric", "==", "'l2'", ":", "\n", "        ", "dist_matrix", "=", "square_distance", "(", "feat_src", ",", "feat_ref", ")", "\n", "", "elif", "metric", "==", "'angle'", ":", "\n", "        ", "feat_src_norm", "=", "feat_src", "/", "(", "torch", ".", "norm", "(", "feat_src", ",", "dim", "=", "-", "1", ",", "keepdim", "=", "True", ")", "+", "_EPS", ")", "\n", "feat_ref_norm", "=", "feat_ref", "/", "(", "torch", ".", "norm", "(", "feat_ref", ",", "dim", "=", "-", "1", ",", "keepdim", "=", "True", ")", "+", "_EPS", ")", "\n", "\n", "dist_matrix", "=", "angle_difference", "(", "feat_src_norm", ",", "feat_ref_norm", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n", "", "return", "dist_matrix", "\n", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.models.rpmnet.sinkhorn": [[46, 105], ["torch.ZeroPad2d", "nn.ZeroPad2d.", "torch.squeeze", "torch.squeeze", "range", "range", "torch.cat", "torch.cat", "torch.logsumexp", "torch.logsumexp", "torch.exp().clone", "torch.exp().clone", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.exp().clone", "torch.exp().clone", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.logsumexp", "torch.logsumexp", "torch.max", "torch.max", "torch.exp", "torch.exp", "torch.max", "torch.max", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.sum", "torch.sum", "torch.exp", "torch.exp", "torch.sum", "torch.sum"], "function", ["None"], ["", "def", "sinkhorn", "(", "log_alpha", ",", "n_iters", ":", "int", "=", "5", ",", "slack", ":", "bool", "=", "True", ",", "eps", ":", "float", "=", "-", "1", ")", "->", "torch", ".", "Tensor", ":", "\n", "    ", "\"\"\" Run sinkhorn iterations to generate a near doubly stochastic matrix, where each row or column sum to <=1\n\n    Args:\n        log_alpha: log of positive matrix to apply sinkhorn normalization (B, J, K)\n        n_iters (int): Number of normalization iterations\n        slack (bool): Whether to include slack row and column\n        eps: eps for early termination (Used only for handcrafted RPM). Set to negative to disable.\n\n    Returns:\n        log(perm_matrix): Doubly stochastic matrix (B, J, K)\n\n    Modified from original source taken from:\n        Learning Latent Permutations with Gumbel-Sinkhorn Networks\n        https://github.com/HeddaCohenIndelman/Learning-Gumbel-Sinkhorn-Permutations-w-Pytorch\n    \"\"\"", "\n", "# Sinkhorn iterations", "\n", "prev_alpha", "=", "None", "\n", "if", "slack", ":", "\n", "        ", "zero_pad", "=", "nn", ".", "ZeroPad2d", "(", "(", "0", ",", "0", ",", "0", ",", "1", ")", ")", "# for partial to full registration, we need only a bottom slack", "\n", "log_alpha_padded", "=", "zero_pad", "(", "log_alpha", "[", ":", ",", "None", ",", ":", ",", ":", "]", ")", "# b,m+1,n", "\n", "\n", "log_alpha_padded", "=", "torch", ".", "squeeze", "(", "log_alpha_padded", ",", "dim", "=", "1", ")", "\n", "\n", "for", "i", "in", "range", "(", "n_iters", ")", ":", "\n", "# Column normalization", "\n", "            ", "log_alpha_padded", "=", "log_alpha_padded", "-", "(", "torch", ".", "logsumexp", "(", "log_alpha_padded", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", ")", "\n", "\n", "# Row normalization", "\n", "log_alpha_padded", "=", "torch", ".", "cat", "(", "(", "\n", "log_alpha_padded", "[", ":", ",", ":", "-", "1", ",", ":", "]", "-", "(", "torch", ".", "logsumexp", "(", "log_alpha_padded", "[", ":", ",", ":", "-", "1", ",", ":", "]", ",", "dim", "=", "2", ",", "keepdim", "=", "True", ")", ")", ",", "\n", "log_alpha_padded", "[", ":", ",", "-", "1", ",", "None", ",", ":", "]", ")", ",", "# Don't normalize last row", "\n", "dim", "=", "1", ")", "\n", "\n", "\n", "if", "eps", ">", "0", ":", "\n", "                ", "if", "prev_alpha", "is", "not", "None", ":", "\n", "                    ", "abs_dev", "=", "torch", ".", "abs", "(", "torch", ".", "exp", "(", "log_alpha_padded", "[", ":", ",", ":", "-", "1", ",", ":", "]", ")", "-", "prev_alpha", ")", "\n", "if", "torch", ".", "max", "(", "torch", ".", "sum", "(", "abs_dev", ",", "dim", "=", "[", "1", ",", "2", "]", ")", ")", "<", "eps", ":", "\n", "                        ", "break", "\n", "", "", "prev_alpha", "=", "torch", ".", "exp", "(", "log_alpha_padded", "[", ":", ",", ":", "-", "1", ",", ":", "]", ")", ".", "clone", "(", ")", "\n", "\n", "", "", "log_alpha", "=", "log_alpha_padded", "[", ":", ",", ":", "-", "1", ",", ":", "]", "# b,m,n", "\n", "", "else", ":", "\n", "        ", "for", "i", "in", "range", "(", "n_iters", ")", ":", "\n", "# Row normalization (i.e. each row sum to 1)", "\n", "            ", "log_alpha", "=", "log_alpha", "-", "(", "torch", ".", "logsumexp", "(", "log_alpha", ",", "dim", "=", "2", ",", "keepdim", "=", "True", ")", ")", "\n", "\n", "# Column normalization (i.e. each column sum to 1)", "\n", "log_alpha", "=", "log_alpha", "-", "(", "torch", ".", "logsumexp", "(", "log_alpha", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", ")", "\n", "\n", "if", "eps", ">", "0", ":", "\n", "                ", "if", "prev_alpha", "is", "not", "None", ":", "\n", "                    ", "abs_dev", "=", "torch", ".", "abs", "(", "torch", ".", "exp", "(", "log_alpha", ")", "-", "prev_alpha", ")", "\n", "if", "torch", ".", "max", "(", "torch", ".", "sum", "(", "abs_dev", ",", "dim", "=", "[", "1", ",", "2", "]", ")", ")", "<", "eps", ":", "\n", "                        ", "break", "\n", "", "", "prev_alpha", "=", "torch", ".", "exp", "(", "log_alpha", ")", ".", "clone", "(", ")", "\n", "\n", "", "", "", "return", "log_alpha", "\n", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.models.rpmnet.compute_rigid_transform": [[107, 141], ["torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.svd", "torch.svd", "v.clone", "torch.where", "torch.where", "torch.all", "torch.all", "torch.cat", "torch.cat", "a_centered.transpose", "u.transpose", "u.transpose", "torch.sum", "torch.sum", "torch.det", "torch.det", "torch.det", "torch.det"], "function", ["None"], ["", "def", "compute_rigid_transform", "(", "a", ":", "torch", ".", "Tensor", ",", "b", ":", "torch", ".", "Tensor", ",", "weights", ":", "torch", ".", "Tensor", ")", ":", "\n", "    ", "\"\"\"Compute rigid transforms between two point sets\n\n    Args:\n        a (torch.Tensor): (B, M, 3) points\n        b (torch.Tensor): (B, N, 3) points\n        weights (torch.Tensor): (B, M)\n\n    Returns:\n        Transform T (B, 3, 4) to get from a to b, i.e. T*a = b\n    \"\"\"", "\n", "\n", "weights_normalized", "=", "weights", "[", "...", ",", "None", "]", "/", "(", "torch", ".", "sum", "(", "weights", "[", "...", ",", "None", "]", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "+", "_EPS", ")", "\n", "centroid_a", "=", "torch", ".", "sum", "(", "a", "*", "weights_normalized", ",", "dim", "=", "1", ")", "\n", "centroid_b", "=", "torch", ".", "sum", "(", "b", "*", "weights_normalized", ",", "dim", "=", "1", ")", "\n", "a_centered", "=", "a", "-", "centroid_a", "[", ":", ",", "None", ",", ":", "]", "\n", "b_centered", "=", "b", "-", "centroid_b", "[", ":", ",", "None", ",", ":", "]", "\n", "cov", "=", "a_centered", ".", "transpose", "(", "-", "2", ",", "-", "1", ")", "@", "(", "b_centered", "*", "weights_normalized", ")", "\n", "\n", "# Compute rotation using Kabsch algorithm. Will compute two copies with +/-V[:,:3]", "\n", "# and choose based on determinant to avoid flips", "\n", "u", ",", "s", ",", "v", "=", "torch", ".", "svd", "(", "cov", ",", "some", "=", "False", ",", "compute_uv", "=", "True", ")", "\n", "rot_mat_pos", "=", "v", "@", "u", ".", "transpose", "(", "-", "1", ",", "-", "2", ")", "\n", "v_neg", "=", "v", ".", "clone", "(", ")", "\n", "v_neg", "[", ":", ",", ":", ",", "2", "]", "*=", "-", "1", "\n", "rot_mat_neg", "=", "v_neg", "@", "u", ".", "transpose", "(", "-", "1", ",", "-", "2", ")", "\n", "rot_mat", "=", "torch", ".", "where", "(", "torch", ".", "det", "(", "rot_mat_pos", ")", "[", ":", ",", "None", ",", "None", "]", ">", "0", ",", "rot_mat_pos", ",", "rot_mat_neg", ")", "\n", "assert", "torch", ".", "all", "(", "torch", ".", "det", "(", "rot_mat", ")", ">", "0", ")", "\n", "\n", "# Compute translation (uncenter centroid)", "\n", "translation", "=", "-", "rot_mat", "@", "centroid_a", "[", ":", ",", ":", ",", "None", "]", "+", "centroid_b", "[", ":", ",", ":", ",", "None", "]", "\n", "\n", "transform", "=", "torch", ".", "cat", "(", "(", "rot_mat", ",", "translation", ")", ",", "dim", "=", "2", ")", "\n", "return", "transform", "\n", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.models.rpmnet.get_model": [[226, 228], ["rpmnet.RPMNetEarlyFusion"], "function", ["None"], ["", "", "def", "get_model", "(", "args", ":", "argparse", ".", "Namespace", ")", "->", "RPMNet", ":", "\n", "    ", "return", "RPMNetEarlyFusion", "(", "args", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.models.pointnet_util.angle_difference": [[11, 27], ["torch.matmul", "torch.acos", "dst.permute"], "function", ["None"], ["def", "angle_difference", "(", "src", ",", "dst", ")", ":", "\n", "    ", "\"\"\"Calculate angle between each pair of vectors.\n    Assumes points are l2-normalized to unit length.\n\n    Input:\n        src: source points, [B, N, C]\n        dst: target points, [B, M, C]\n    Output:\n        dist: per-point square distance, [B, N, M]\n    \"\"\"", "\n", "B", ",", "N", ",", "_", "=", "src", ".", "shape", "\n", "_", ",", "M", ",", "_", "=", "dst", ".", "shape", "\n", "dist", "=", "torch", ".", "matmul", "(", "src", ",", "dst", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ")", "\n", "dist", "=", "torch", ".", "acos", "(", "dist", ")", "\n", "\n", "return", "dist", "\n", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.models.pointnet_util.square_distance": [[29, 49], ["torch.matmul", "torch.sum", "torch.sum", "dst.permute"], "function", ["None"], ["", "def", "square_distance", "(", "src", ",", "dst", ")", ":", "\n", "    ", "\"\"\"Calculate Euclid distance between each two points.\n        src^T * dst = xn * xm + yn * ym + zn * zm\uff1b\n        sum(src^2, dim=-1) = xn*xn + yn*yn + zn*zn;\n        sum(dst^2, dim=-1) = xm*xm + ym*ym + zm*zm;\n        dist = (xn - xm)^2 + (yn - ym)^2 + (zn - zm)^2\n             = sum(src**2,dim=-1)+sum(dst**2,dim=-1)-2*src^T*dst\n\n    Args:\n        src: source points, [B, N, C]\n        dst: target points, [B, M, C]\n    Returns:\n        dist: per-point square distance, [B, N, M]\n    \"\"\"", "\n", "B", ",", "N", ",", "_", "=", "src", ".", "shape", "\n", "_", ",", "M", ",", "_", "=", "dst", ".", "shape", "\n", "dist", "=", "-", "2", "*", "torch", ".", "matmul", "(", "src", ",", "dst", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ")", "\n", "dist", "+=", "torch", ".", "sum", "(", "src", "**", "2", ",", "dim", "=", "-", "1", ")", "[", ":", ",", ":", ",", "None", "]", "\n", "dist", "+=", "torch", ".", "sum", "(", "dst", "**", "2", ",", "dim", "=", "-", "1", ")", "[", ":", ",", "None", ",", ":", "]", "\n", "return", "dist", "\n", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.models.pointnet_util.index_points": [[51, 69], ["list", "list", "torch.arange().to().view().repeat", "len", "torch.arange().to().view", "torch.arange().to", "torch.arange"], "function", ["None"], ["", "def", "index_points", "(", "points", ",", "idx", ")", ":", "\n", "    ", "\"\"\"Array indexing, i.e. retrieves relevant points based on indices\n\n    Args:\n        points: input points data_loader, [B, N, C]\n        idx: sample index data_loader, [B, S]. S can be 2 dimensional\n    Returns:\n        new_points:, indexed points data_loader, [B, S, C]\n    \"\"\"", "\n", "device", "=", "points", ".", "device", "\n", "B", "=", "points", ".", "shape", "[", "0", "]", "\n", "view_shape", "=", "list", "(", "idx", ".", "shape", ")", "\n", "view_shape", "[", "1", ":", "]", "=", "[", "1", "]", "*", "(", "len", "(", "view_shape", ")", "-", "1", ")", "\n", "repeat_shape", "=", "list", "(", "idx", ".", "shape", ")", "\n", "repeat_shape", "[", "0", "]", "=", "1", "\n", "batch_indices", "=", "torch", ".", "arange", "(", "B", ",", "dtype", "=", "torch", ".", "long", ")", ".", "to", "(", "device", ")", ".", "view", "(", "view_shape", ")", ".", "repeat", "(", "repeat_shape", ")", "\n", "new_points", "=", "points", "[", "batch_indices", ",", "idx", ",", ":", "]", "\n", "return", "new_points", "\n", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.models.pointnet_util.farthest_point_sample": [[71, 94], ["torch.zeros().to", "torch.randint().to", "torch.arange().to", "range", "torch.ones().to", "xyz[].view", "torch.sum", "torch.zeros", "torch.randint", "torch.arange", "torch.max", "torch.ones"], "function", ["None"], ["", "def", "farthest_point_sample", "(", "xyz", ",", "npoint", ")", ":", "\n", "    ", "\"\"\"Iterative farthest point sampling\n\n    Args:\n        xyz: pointcloud data_loader, [B, N, C]\n        npoint: number of samples\n    Returns:\n        centroids: sampled pointcloud index, [B, npoint]\n    \"\"\"", "\n", "device", "=", "xyz", ".", "device", "\n", "B", ",", "N", ",", "C", "=", "xyz", ".", "shape", "\n", "centroids", "=", "torch", ".", "zeros", "(", "B", ",", "npoint", ",", "dtype", "=", "torch", ".", "long", ")", ".", "to", "(", "device", ")", "\n", "distance", "=", "torch", ".", "ones", "(", "B", ",", "N", ")", ".", "to", "(", "device", ")", "*", "1e10", "\n", "farthest", "=", "torch", ".", "randint", "(", "0", ",", "N", ",", "(", "B", ",", ")", ",", "dtype", "=", "torch", ".", "long", ")", ".", "to", "(", "device", ")", "\n", "batch_indices", "=", "torch", ".", "arange", "(", "B", ",", "dtype", "=", "torch", ".", "long", ")", ".", "to", "(", "device", ")", "\n", "for", "i", "in", "range", "(", "npoint", ")", ":", "\n", "        ", "centroids", "[", ":", ",", "i", "]", "=", "farthest", "\n", "centroid", "=", "xyz", "[", "batch_indices", ",", "farthest", ",", ":", "]", ".", "view", "(", "B", ",", "1", ",", "3", ")", "\n", "dist", "=", "torch", ".", "sum", "(", "(", "xyz", "-", "centroid", ")", "**", "2", ",", "-", "1", ")", "\n", "mask", "=", "dist", "<", "distance", "\n", "distance", "[", "mask", "]", "=", "dist", "[", "mask", "]", "\n", "farthest", "=", "torch", ".", "max", "(", "distance", ",", "-", "1", ")", "[", "1", "]", "\n", "", "return", "centroids", "\n", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.models.pointnet_util.query_ball_point": [[96, 132], ["torch.arange().to().view().repeat", "pointnet_util.square_distance", "[].repeat", "[].repeat", "pointnet_util..repeat", "group_idx[].view().repeat", "torch.arange().to().view", "torch.arange().to().view().repeat.sort", "group_idx[].view", "torch.arange().to", "torch.arange().to", "torch.arange().to", "torch.arange", "torch.arange", "torch.arange"], "function", ["home.repos.pwc.inspect_result.tzodge_PCR-CMU.models.pointnet_util.square_distance"], ["", "def", "query_ball_point", "(", "radius", ",", "nsample", ",", "xyz", ",", "new_xyz", ",", "itself_indices", "=", "None", ")", ":", "\n", "    ", "\"\"\" Grouping layer in PointNet++.\n\n    Inputs:\n        radius: local region radius\n        nsample: max sample number in local region\n        xyz: all points, (B, N, C)\n        new_xyz: query points, (B, S, C)\n        itself_indices (Optional): Indices of new_xyz into xyz (B, S).\n          Used to try and prevent grouping the point itself into the neighborhood.\n          If there is insufficient points in the neighborhood, or if left is none, the resulting cluster will\n          still contain the center point.\n    Returns:\n        group_idx: grouped points index, [B, S, nsample]\n    \"\"\"", "\n", "device", "=", "xyz", ".", "device", "\n", "B", ",", "N", ",", "C", "=", "xyz", ".", "shape", "\n", "_", ",", "S", ",", "_", "=", "new_xyz", ".", "shape", "\n", "group_idx", "=", "torch", ".", "arange", "(", "N", ",", "dtype", "=", "torch", ".", "long", ")", ".", "to", "(", "device", ")", ".", "view", "(", "1", ",", "1", ",", "N", ")", ".", "repeat", "(", "[", "B", ",", "S", ",", "1", "]", ")", "# (B, S, N)", "\n", "sqrdists", "=", "square_distance", "(", "new_xyz", ",", "xyz", ")", "\n", "\n", "if", "itself_indices", "is", "not", "None", ":", "\n", "# Remove indices of the center points so that it will not be chosen", "\n", "        ", "batch_indices", "=", "torch", ".", "arange", "(", "B", ",", "dtype", "=", "torch", ".", "long", ")", ".", "to", "(", "device", ")", "[", ":", ",", "None", "]", ".", "repeat", "(", "1", ",", "S", ")", "# (B, S)", "\n", "row_indices", "=", "torch", ".", "arange", "(", "S", ",", "dtype", "=", "torch", ".", "long", ")", ".", "to", "(", "device", ")", "[", "None", ",", ":", "]", ".", "repeat", "(", "B", ",", "1", ")", "# (B, S)", "\n", "group_idx", "[", "batch_indices", ",", "row_indices", ",", "itself_indices", "]", "=", "N", "\n", "\n", "", "group_idx", "[", "sqrdists", ">", "radius", "**", "2", "]", "=", "N", "\n", "group_idx", "=", "group_idx", ".", "sort", "(", "dim", "=", "-", "1", ")", "[", "0", "]", "[", ":", ",", ":", ",", ":", "nsample", "]", "\n", "if", "itself_indices", "is", "not", "None", ":", "\n", "        ", "group_first", "=", "itself_indices", "[", ":", ",", ":", ",", "None", "]", ".", "repeat", "(", "[", "1", ",", "1", ",", "nsample", "]", ")", "\n", "", "else", ":", "\n", "        ", "group_first", "=", "group_idx", "[", ":", ",", ":", ",", "0", "]", ".", "view", "(", "B", ",", "S", ",", "1", ")", ".", "repeat", "(", "[", "1", ",", "1", ",", "nsample", "]", ")", "\n", "", "mask", "=", "group_idx", "==", "N", "\n", "group_idx", "[", "mask", "]", "=", "group_first", "[", "mask", "]", "\n", "return", "group_idx", "\n", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.models.pointnet_util.sample_and_group": [[134, 171], ["pointnet_util.query_ball_point", "pointnet_util.index_points", "pointnet_util.farthest_point_sample", "pointnet_util.index_points", "[].repeat", "index_points.view", "pointnet_util.index_points", "torch.cat", "torch.arange"], "function", ["home.repos.pwc.inspect_result.tzodge_PCR-CMU.models.pointnet_util.query_ball_point", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.models.pointnet_util.index_points", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.models.pointnet_util.farthest_point_sample", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.models.pointnet_util.index_points", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.models.pointnet_util.index_points"], ["", "def", "sample_and_group", "(", "npoint", ":", "int", ",", "radius", ":", "float", ",", "nsample", ":", "int", ",", "xyz", ":", "torch", ".", "Tensor", ",", "points", ":", "torch", ".", "Tensor", ",", "\n", "returnfps", ":", "bool", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    Args:\n        npoint (int): Set to negative to compute for all points\n        radius:\n        nsample:\n        xyz: input points position data_loader, [B, N, C]\n        points: input points data_loader, [B, N, D]\n        returnfps (bool) Whether to return furthest point indices\n    Returns:\n        new_xyz: sampled points position data_loader, [B, 1, C]\n        new_points: sampled points data_loader, [B, 1, N, C+D]\n    \"\"\"", "\n", "B", ",", "N", ",", "C", "=", "xyz", ".", "shape", "\n", "\n", "if", "npoint", ">", "0", ":", "\n", "        ", "S", "=", "npoint", "\n", "fps_idx", "=", "farthest_point_sample", "(", "xyz", ",", "npoint", ")", "# [B, npoint, C]", "\n", "new_xyz", "=", "index_points", "(", "xyz", ",", "fps_idx", ")", "\n", "", "else", ":", "\n", "        ", "S", "=", "xyz", ".", "shape", "[", "1", "]", "\n", "fps_idx", "=", "torch", ".", "arange", "(", "0", ",", "xyz", ".", "shape", "[", "1", "]", ")", "[", "None", ",", "...", "]", ".", "repeat", "(", "xyz", ".", "shape", "[", "0", "]", ",", "1", ")", "\n", "new_xyz", "=", "xyz", "\n", "\n", "", "idx", "=", "query_ball_point", "(", "radius", ",", "nsample", ",", "xyz", ",", "new_xyz", ")", "# (B, N, nsample)", "\n", "grouped_xyz", "=", "index_points", "(", "xyz", ",", "idx", ")", "# (B, npoint, nsample, C)", "\n", "grouped_xyz_norm", "=", "grouped_xyz", "-", "new_xyz", ".", "view", "(", "B", ",", "S", ",", "1", ",", "C", ")", "\n", "if", "points", "is", "not", "None", ":", "\n", "        ", "grouped_points", "=", "index_points", "(", "points", ",", "idx", ")", "\n", "new_points", "=", "torch", ".", "cat", "(", "[", "grouped_xyz_norm", ",", "grouped_points", "]", ",", "dim", "=", "-", "1", ")", "# [B, npoint, nsample, C+D]", "\n", "", "else", ":", "\n", "        ", "new_points", "=", "grouped_xyz_norm", "\n", "", "if", "returnfps", ":", "\n", "        ", "return", "new_xyz", ",", "new_points", ",", "grouped_xyz", ",", "fps_idx", "\n", "", "else", ":", "\n", "        ", "return", "new_xyz", ",", "new_points", "\n", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.models.pointnet_util.angle": [[173, 195], ["torch.stack", "torch.norm", "torch.sum", "torch.atan2"], "function", ["None"], ["", "", "def", "angle", "(", "v1", ":", "torch", ".", "Tensor", ",", "v2", ":", "torch", ".", "Tensor", ")", ":", "\n", "    ", "\"\"\"Compute angle between 2 vectors\n\n    For robustness, we use the same formulation as in PPFNet, i.e.\n        angle(v1, v2) = atan2(cross(v1, v2), dot(v1, v2)).\n    This handles the case where one of the vectors is 0.0, since torch.atan2(0.0, 0.0)=0.0\n\n    Args:\n        v1: (B, *, 3)\n        v2: (B, *, 3)\n\n    Returns:\n\n    \"\"\"", "\n", "\n", "cross_prod", "=", "torch", ".", "stack", "(", "[", "v1", "[", "...", ",", "1", "]", "*", "v2", "[", "...", ",", "2", "]", "-", "v1", "[", "...", ",", "2", "]", "*", "v2", "[", "...", ",", "1", "]", ",", "\n", "v1", "[", "...", ",", "2", "]", "*", "v2", "[", "...", ",", "0", "]", "-", "v1", "[", "...", ",", "0", "]", "*", "v2", "[", "...", ",", "2", "]", ",", "\n", "v1", "[", "...", ",", "0", "]", "*", "v2", "[", "...", ",", "1", "]", "-", "v1", "[", "...", ",", "1", "]", "*", "v2", "[", "...", ",", "0", "]", "]", ",", "dim", "=", "-", "1", ")", "\n", "cross_prod_norm", "=", "torch", ".", "norm", "(", "cross_prod", ",", "dim", "=", "-", "1", ")", "\n", "dot_prod", "=", "torch", ".", "sum", "(", "v1", "*", "v2", ",", "dim", "=", "-", "1", ")", "\n", "\n", "return", "torch", ".", "atan2", "(", "cross_prod_norm", ",", "dot_prod", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.models.pointnet_util.sample_and_group_multi": [[197, 245], ["pointnet_util.query_ball_point", "pointnet_util.index_points", "pointnet_util.index_points", "pointnet_util.angle", "pointnet_util.angle", "pointnet_util.angle", "torch.norm", "torch.stack", "pointnet_util.farthest_point_sample", "pointnet_util.index_points", "[].repeat().to", "index_points.view", "pointnet_util.index_points", "[].repeat", "torch.arange"], "function", ["home.repos.pwc.inspect_result.tzodge_PCR-CMU.models.pointnet_util.query_ball_point", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.models.pointnet_util.index_points", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.models.pointnet_util.index_points", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.models.pointnet_util.angle", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.models.pointnet_util.angle", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.models.pointnet_util.angle", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.models.pointnet_util.farthest_point_sample", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.models.pointnet_util.index_points", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.models.pointnet_util.index_points"], ["", "def", "sample_and_group_multi", "(", "npoint", ":", "int", ",", "radius", ":", "float", ",", "nsample", ":", "int", ",", "xyz", ":", "torch", ".", "Tensor", ",", "normals", ":", "torch", ".", "Tensor", ",", "\n", "returnfps", ":", "bool", "=", "False", ")", ":", "\n", "    ", "\"\"\"Sample and group for xyz, dxyz and ppf features\n\n    Args:\n        npoint(int): Number of clusters (equivalently, keypoints) to sample.\n                     Set to negative to compute for all points\n        radius(int): Radius of cluster for computing local features\n        nsample: Maximum number of points to consider per cluster\n        xyz: XYZ coordinates of the points\n        normals: Corresponding normals for the points (required for ppf computation)\n        returnfps: Whether to return indices of FPS points and their neighborhood\n\n    Returns:\n        Dictionary containing the following fields ['xyz', 'dxyz', 'ppf'].\n        If returnfps is True, also returns: grouped_xyz, fps_idx\n    \"\"\"", "\n", "\n", "B", ",", "N", ",", "C", "=", "xyz", ".", "shape", "\n", "\n", "if", "npoint", ">", "0", ":", "\n", "        ", "S", "=", "npoint", "\n", "fps_idx", "=", "farthest_point_sample", "(", "xyz", ",", "npoint", ")", "# [B, npoint, C]", "\n", "new_xyz", "=", "index_points", "(", "xyz", ",", "fps_idx", ")", "\n", "nr", "=", "index_points", "(", "normals", ",", "fps_idx", ")", "[", ":", ",", ":", ",", "None", ",", ":", "]", "\n", "", "else", ":", "\n", "        ", "S", "=", "xyz", ".", "shape", "[", "1", "]", "\n", "fps_idx", "=", "torch", ".", "arange", "(", "0", ",", "xyz", ".", "shape", "[", "1", "]", ")", "[", "None", ",", "...", "]", ".", "repeat", "(", "xyz", ".", "shape", "[", "0", "]", ",", "1", ")", ".", "to", "(", "xyz", ".", "device", ")", "\n", "new_xyz", "=", "xyz", "\n", "nr", "=", "normals", "[", ":", ",", ":", ",", "None", ",", ":", "]", "\n", "\n", "", "idx", "=", "query_ball_point", "(", "radius", ",", "nsample", ",", "xyz", ",", "new_xyz", ",", "fps_idx", ")", "# (B, npoint, nsample)", "\n", "grouped_xyz", "=", "index_points", "(", "xyz", ",", "idx", ")", "# (B, npoint, nsample, C)", "\n", "d", "=", "grouped_xyz", "-", "new_xyz", ".", "view", "(", "B", ",", "S", ",", "1", ",", "C", ")", "# d = p_r - p_i  (B, npoint, nsample, 3)", "\n", "ni", "=", "index_points", "(", "normals", ",", "idx", ")", "\n", "\n", "nr_d", "=", "angle", "(", "nr", ",", "d", ")", "\n", "ni_d", "=", "angle", "(", "ni", ",", "d", ")", "\n", "nr_ni", "=", "angle", "(", "nr", ",", "ni", ")", "\n", "d_norm", "=", "torch", ".", "norm", "(", "d", ",", "dim", "=", "-", "1", ")", "\n", "\n", "xyz_feat", "=", "d", "# (B, npoint, n_sample, 3)", "\n", "ppf_feat", "=", "torch", ".", "stack", "(", "[", "nr_d", ",", "ni_d", ",", "nr_ni", ",", "d_norm", "]", ",", "dim", "=", "-", "1", ")", "# (B, npoint, n_sample, 4)", "\n", "\n", "if", "returnfps", ":", "\n", "        ", "return", "{", "'xyz'", ":", "new_xyz", ",", "'dxyz'", ":", "xyz_feat", ",", "'ppf'", ":", "ppf_feat", "}", ",", "grouped_xyz", ",", "fps_idx", "\n", "", "else", ":", "\n", "        ", "return", "{", "'xyz'", ":", "new_xyz", ",", "'dxyz'", ":", "xyz_feat", ",", "'ppf'", ":", "ppf_feat", "}", "\n", "", "", ""]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.models.feature_nets.ParameterPredictionNet.__init__": [[16, 66], ["torch.Module.__init__", "logging.getLogger", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.AdaptiveMaxPool1d", "torch.AdaptiveMaxPool1d", "torch.AdaptiveMaxPool1d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "feature_nets.ParameterPredictionNet._logger.info", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.GroupNorm", "torch.GroupNorm", "torch.GroupNorm", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.GroupNorm", "torch.GroupNorm", "torch.GroupNorm", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.GroupNorm", "torch.GroupNorm", "torch.GroupNorm", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.GroupNorm", "torch.GroupNorm", "torch.GroupNorm", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.GroupNorm", "torch.GroupNorm", "torch.GroupNorm", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.GroupNorm", "torch.GroupNorm", "torch.GroupNorm", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.GroupNorm", "torch.GroupNorm", "torch.GroupNorm", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "numpy.prod"], "methods", ["home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.model.DCP.__init__"], ["    ", "def", "__init__", "(", "self", ",", "weights_dim", ")", ":", "\n", "        ", "\"\"\"PointNet based Parameter prediction network\n\n        Args:\n            weights_dim: Number of weights to predict (excluding beta), should be something like\n                         [3], or [64, 3], for 3 types of features\n        \"\"\"", "\n", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "_logger", "=", "logging", ".", "getLogger", "(", "self", ".", "__class__", ".", "__name__", ")", "\n", "\n", "self", ".", "weights_dim", "=", "weights_dim", "\n", "\n", "# Pointnet", "\n", "self", ".", "prepool", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv1d", "(", "4", ",", "64", ",", "1", ")", ",", "\n", "nn", ".", "GroupNorm", "(", "8", ",", "64", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "\n", "nn", ".", "Conv1d", "(", "64", ",", "64", ",", "1", ")", ",", "\n", "nn", ".", "GroupNorm", "(", "8", ",", "64", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "\n", "nn", ".", "Conv1d", "(", "64", ",", "64", ",", "1", ")", ",", "\n", "nn", ".", "GroupNorm", "(", "8", ",", "64", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "\n", "nn", ".", "Conv1d", "(", "64", ",", "128", ",", "1", ")", ",", "\n", "nn", ".", "GroupNorm", "(", "8", ",", "128", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "\n", "nn", ".", "Conv1d", "(", "128", ",", "1024", ",", "1", ")", ",", "\n", "nn", ".", "GroupNorm", "(", "16", ",", "1024", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", ")", "\n", "self", ".", "pooling", "=", "nn", ".", "AdaptiveMaxPool1d", "(", "1", ")", "\n", "self", ".", "postpool", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "1024", ",", "512", ")", ",", "\n", "nn", ".", "GroupNorm", "(", "16", ",", "512", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "\n", "nn", ".", "Linear", "(", "512", ",", "256", ")", ",", "\n", "nn", ".", "GroupNorm", "(", "16", ",", "256", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "\n", "nn", ".", "Linear", "(", "256", ",", "2", "+", "np", ".", "prod", "(", "weights_dim", ")", ")", ",", "\n", ")", "\n", "\n", "self", ".", "_logger", ".", "info", "(", "'Predicting weights with dim {}.'", ".", "format", "(", "self", ".", "weights_dim", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.models.feature_nets.ParameterPredictionNet.forward": [[67, 89], ["torch.pad", "torch.pad", "torch.pad", "torch.pad", "torch.pad", "torch.pad", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "feature_nets.ParameterPredictionNet.prepool", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "feature_nets.ParameterPredictionNet.postpool", "torch.softplus", "torch.softplus", "torch.softplus", "torch.softplus", "torch.softplus", "torch.softplus", "torch.cat.permute", "torch.cat.permute", "torch.cat.permute", "feature_nets.ParameterPredictionNet.pooling"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\" Returns alpha, beta, and gating_weights (if needed)\n\n        Args:\n            x: List containing two point clouds, x[0] = src (B, J, 3), x[1] = ref (B, K, 3)\n\n        Returns:\n            beta, alpha, weightings\n        \"\"\"", "\n", "\n", "src_padded", "=", "F", ".", "pad", "(", "x", "[", "0", "]", ",", "(", "0", ",", "1", ")", ",", "mode", "=", "'constant'", ",", "value", "=", "0", ")", "\n", "ref_padded", "=", "F", ".", "pad", "(", "x", "[", "1", "]", ",", "(", "0", ",", "1", ")", ",", "mode", "=", "'constant'", ",", "value", "=", "1", ")", "\n", "concatenated", "=", "torch", ".", "cat", "(", "[", "src_padded", ",", "ref_padded", "]", ",", "dim", "=", "1", ")", "\n", "\n", "prepool_feat", "=", "self", ".", "prepool", "(", "concatenated", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ")", "\n", "pooled", "=", "torch", ".", "flatten", "(", "self", ".", "pooling", "(", "prepool_feat", ")", ",", "start_dim", "=", "-", "2", ")", "\n", "raw_weights", "=", "self", ".", "postpool", "(", "pooled", ")", "\n", "\n", "beta", "=", "F", ".", "softplus", "(", "raw_weights", "[", ":", ",", "0", "]", ")", "\n", "alpha", "=", "F", ".", "softplus", "(", "raw_weights", "[", ":", ",", "1", "]", ")", "\n", "\n", "return", "beta", ",", "alpha", "\n", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.models.feature_nets.ParameterPredictionNetConstant.__init__": [[92, 106], ["torch.Module.__init__", "logging.getLogger", "torch.Parameter", "torch.Parameter", "torch.Parameter", "feature_nets.ParameterPredictionNetConstant._logger.info", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "numpy.prod"], "methods", ["home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.model.DCP.__init__"], ["    ", "def", "__init__", "(", "self", ",", "weights_dim", ")", ":", "\n", "        ", "\"\"\"Parameter Prediction Network with single alpha/beta as parameter.\n\n        See: Ablation study (Table 4) in paper\n        \"\"\"", "\n", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "_logger", "=", "logging", ".", "getLogger", "(", "self", ".", "__class__", ".", "__name__", ")", "\n", "\n", "self", ".", "anneal_weights", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "2", "+", "np", ".", "prod", "(", "weights_dim", ")", ")", ")", "\n", "self", ".", "weights_dim", "=", "weights_dim", "\n", "\n", "self", ".", "_logger", ".", "info", "(", "'Predicting weights with dim {}.'", ".", "format", "(", "self", ".", "weights_dim", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.models.feature_nets.ParameterPredictionNetConstant.forward": [[107, 116], ["torch.softplus", "torch.softplus", "torch.softplus", "torch.softplus", "torch.softplus", "torch.softplus", "raw_weights[].expand", "raw_weights[].expand"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"Returns beta, gating_weights\"\"\"", "\n", "\n", "batch_size", "=", "x", "[", "0", "]", ".", "shape", "[", "0", "]", "\n", "raw_weights", "=", "self", ".", "anneal_weights", "\n", "beta", "=", "F", ".", "softplus", "(", "raw_weights", "[", "0", "]", ".", "expand", "(", "batch_size", ")", ")", "\n", "alpha", "=", "F", ".", "softplus", "(", "raw_weights", "[", "1", "]", ".", "expand", "(", "batch_size", ")", ")", "\n", "\n", "return", "beta", ",", "alpha", "\n", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.models.feature_nets.FeatExtractionEarlyFusion.__init__": [[157, 172], ["torch.Module.__init__", "logging.getLogger", "feature_nets.FeatExtractionEarlyFusion._logger.info", "sorted", "feature_nets.FeatExtractionEarlyFusion._logger.info", "numpy.sum", "feature_nets.get_prepool", "feature_nets.get_postpool"], "methods", ["home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.model.DCP.__init__", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.models.feature_nets.get_prepool", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.models.feature_nets.get_postpool"], ["def", "__init__", "(", "self", ",", "features", ",", "feature_dim", ",", "radius", ",", "num_neighbors", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "_logger", "=", "logging", ".", "getLogger", "(", "self", ".", "__class__", ".", "__name__", ")", "\n", "self", ".", "_logger", ".", "info", "(", "'Using early fusion, feature dim = {}'", ".", "format", "(", "feature_dim", ")", ")", "\n", "self", ".", "radius", "=", "radius", "\n", "self", ".", "n_sample", "=", "num_neighbors", "\n", "\n", "self", ".", "features", "=", "sorted", "(", "features", ",", "key", "=", "lambda", "f", ":", "_raw_features_order", "[", "f", "]", ")", "\n", "self", ".", "_logger", ".", "info", "(", "'Feature extraction using features {}'", ".", "format", "(", "', '", ".", "join", "(", "self", ".", "features", ")", ")", ")", "\n", "\n", "# Layers", "\n", "raw_dim", "=", "np", ".", "sum", "(", "[", "_raw_features_sizes", "[", "f", "]", "for", "f", "in", "self", ".", "features", "]", ")", "# number of channels after concat", "\n", "self", ".", "prepool", "=", "get_prepool", "(", "raw_dim", ",", "feature_dim", "*", "2", ")", "\n", "self", ".", "postpool", "=", "get_postpool", "(", "feature_dim", "*", "2", ",", "feature_dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.models.feature_nets.FeatExtractionEarlyFusion.forward": [[173, 206], ["models.pointnet_util.sample_and_group_multi", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat.permute", "torch.cat.permute", "torch.cat.permute", "feature_nets.FeatExtractionEarlyFusion.prepool", "feature_nets.FeatExtractionEarlyFusion.postpool", "feature_nets.FeatExtractionEarlyFusion.permute", "len", "features[].expand", "concat.append", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm"], "methods", ["home.repos.pwc.inspect_result.tzodge_PCR-CMU.models.pointnet_util.sample_and_group_multi"], ["", "def", "forward", "(", "self", ",", "xyz", ",", "normals", ")", ":", "\n", "        ", "\"\"\"Forward pass of the feature extraction network\n\n        Args:\n            xyz: (B, N, 3)\n            normals: (B, N, 3)\n\n        Returns:\n            cluster features (B, N, C)\n\n        \"\"\"", "\n", "features", "=", "sample_and_group_multi", "(", "-", "1", ",", "self", ".", "radius", ",", "self", ".", "n_sample", ",", "xyz", ",", "normals", ")", "\n", "features", "[", "'xyz'", "]", "=", "features", "[", "'xyz'", "]", "[", ":", ",", ":", ",", "None", ",", ":", "]", "\n", "\n", "# Gate and concat", "\n", "concat", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "features", ")", ")", ":", "\n", "            ", "f", "=", "self", ".", "features", "[", "i", "]", "\n", "expanded", "=", "(", "features", "[", "f", "]", ")", ".", "expand", "(", "-", "1", ",", "-", "1", ",", "self", ".", "n_sample", ",", "-", "1", ")", "\n", "concat", ".", "append", "(", "expanded", ")", "\n", "", "fused_input_feat", "=", "torch", ".", "cat", "(", "concat", ",", "-", "1", ")", "\n", "\n", "# Prepool_FC, pool, postpool-FC", "\n", "new_feat", "=", "fused_input_feat", ".", "permute", "(", "0", ",", "3", ",", "2", ",", "1", ")", "# [B, 10, n_sample, N]", "\n", "new_feat", "=", "self", ".", "prepool", "(", "new_feat", ")", "\n", "\n", "pooled_feat", "=", "torch", ".", "max", "(", "new_feat", ",", "2", ")", "[", "0", "]", "# Max pooling (B, C, N)", "\n", "\n", "post_feat", "=", "self", ".", "postpool", "(", "pooled_feat", ")", "# Post pooling dense layers", "\n", "cluster_feat", "=", "post_feat", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "cluster_feat", "=", "cluster_feat", "/", "torch", ".", "norm", "(", "cluster_feat", ",", "dim", "=", "-", "1", ",", "keepdim", "=", "True", ")", "\n", "\n", "return", "cluster_feat", "# (B, N, C)", "\n", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.models.feature_nets.get_prepool": [[118, 132], ["torch.Sequential", "torch.Conv2d", "torch.GroupNorm", "torch.ReLU", "torch.Conv2d", "torch.GroupNorm", "torch.ReLU", "torch.Conv2d", "torch.GroupNorm", "torch.ReLU"], "function", ["None"], ["", "", "def", "get_prepool", "(", "in_dim", ",", "out_dim", ")", ":", "\n", "    ", "\"\"\"Shared FC part in PointNet before max pooling\"\"\"", "\n", "net", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_dim", ",", "out_dim", "//", "2", ",", "1", ")", ",", "\n", "nn", ".", "GroupNorm", "(", "8", ",", "out_dim", "//", "2", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv2d", "(", "out_dim", "//", "2", ",", "out_dim", "//", "2", ",", "1", ")", ",", "\n", "nn", ".", "GroupNorm", "(", "8", ",", "out_dim", "//", "2", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv2d", "(", "out_dim", "//", "2", ",", "out_dim", ",", "1", ")", ",", "\n", "nn", ".", "GroupNorm", "(", "8", ",", "out_dim", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", ")", "\n", "return", "net", "\n", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.models.feature_nets.get_postpool": [[134, 153], ["torch.Sequential", "torch.Conv1d", "torch.GroupNorm", "torch.ReLU", "torch.Conv1d", "torch.GroupNorm", "torch.ReLU", "torch.Conv1d"], "function", ["None"], ["", "def", "get_postpool", "(", "in_dim", ",", "out_dim", ")", ":", "\n", "    ", "\"\"\"Linear layers in PointNet after max pooling\n\n    Args:\n        in_dim: Number of input channels\n        out_dim: Number of output channels. Typically smaller than in_dim\n\n    \"\"\"", "\n", "net", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv1d", "(", "in_dim", ",", "in_dim", ",", "1", ")", ",", "\n", "nn", ".", "GroupNorm", "(", "8", ",", "in_dim", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv1d", "(", "in_dim", ",", "out_dim", ",", "1", ")", ",", "\n", "nn", ".", "GroupNorm", "(", "8", ",", "out_dim", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv1d", "(", "out_dim", ",", "out_dim", ",", "1", ")", ",", "\n", ")", "\n", "\n", "return", "net", "\n", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.data_loader.transforms.SplitSourceRef.__call__": [[20, 30], ["sample.pop", "isinstance", "sample[].detach", "sample[].detach", "sample[].copy", "sample[].copy"], "methods", ["None"], ["def", "__call__", "(", "self", ",", "sample", ":", "Dict", ")", ":", "\n", "        ", "sample", "[", "'points_raw'", "]", "=", "sample", ".", "pop", "(", "'points'", ")", "\n", "if", "isinstance", "(", "sample", "[", "'points_raw'", "]", ",", "torch", ".", "Tensor", ")", ":", "\n", "            ", "sample", "[", "'points_src'", "]", "=", "sample", "[", "'points_raw'", "]", ".", "detach", "(", ")", "\n", "sample", "[", "'points_ref'", "]", "=", "sample", "[", "'points_raw'", "]", ".", "detach", "(", ")", "\n", "", "else", ":", "# is numpy", "\n", "            ", "sample", "[", "'points_src'", "]", "=", "sample", "[", "'points_raw'", "]", ".", "copy", "(", ")", "\n", "sample", "[", "'points_ref'", "]", "=", "sample", "[", "'points_raw'", "]", ".", "copy", "(", ")", "\n", "\n", "", "return", "sample", "\n", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.data_loader.transforms.Resampler.__init__": [[33, 44], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "num", ":", "int", ")", ":", "\n", "        ", "\"\"\"Resamples a point cloud containing N points to one containing M\n\n        Guaranteed to have no repeated points if M <= N.\n        Otherwise, it is guaranteed that all points appear at least once.\n\n        Args:\n            num (int): Number of points to resample to, i.e. M\n\n        \"\"\"", "\n", "self", ".", "num", "=", "num", "\n", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.data_loader.transforms.Resampler.__call__": [[45, 68], ["numpy.random.seed", "transforms.Resampler._resample", "transforms.Resampler._resample", "transforms.Resampler._resample", "len", "math.ceil", "len", "math.ceil", "math.ceil", "ValueError"], "methods", ["home.repos.pwc.inspect_result.tzodge_PCR-CMU.data_loader.transforms.FixedResampler._resample", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.data_loader.transforms.FixedResampler._resample", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.data_loader.transforms.FixedResampler._resample"], ["", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "\n", "        ", "if", "'deterministic'", "in", "sample", "and", "sample", "[", "'deterministic'", "]", ":", "\n", "            ", "np", ".", "random", ".", "seed", "(", "sample", "[", "'idx'", "]", ")", "\n", "\n", "", "if", "'points'", "in", "sample", ":", "\n", "            ", "sample", "[", "'points'", "]", "=", "self", ".", "_resample", "(", "sample", "[", "'points'", "]", ",", "self", ".", "num", ")", "\n", "", "else", ":", "\n", "            ", "if", "'crop_proportion'", "not", "in", "sample", ":", "\n", "                ", "src_size", ",", "ref_size", "=", "self", ".", "num", ",", "self", ".", "num", "\n", "", "elif", "len", "(", "sample", "[", "'crop_proportion'", "]", ")", "==", "1", ":", "\n", "                ", "src_size", "=", "math", ".", "ceil", "(", "sample", "[", "'crop_proportion'", "]", "[", "0", "]", "*", "self", ".", "num", ")", "\n", "ref_size", "=", "self", ".", "num", "\n", "", "elif", "len", "(", "sample", "[", "'crop_proportion'", "]", ")", "==", "2", ":", "\n", "                ", "src_size", "=", "math", ".", "ceil", "(", "sample", "[", "'crop_proportion'", "]", "[", "0", "]", "*", "self", ".", "num", ")", "\n", "ref_size", "=", "math", ".", "ceil", "(", "sample", "[", "'crop_proportion'", "]", "[", "1", "]", "*", "self", ".", "num", ")", "\n", "", "else", ":", "\n", "                ", "raise", "ValueError", "(", "'Crop proportion must have 1 or 2 elements'", ")", "\n", "\n", "", "sample", "[", "'points_src'", "]", "=", "self", ".", "_resample", "(", "sample", "[", "'points_src'", "]", ",", "src_size", ")", "\n", "sample", "[", "'points_ref'", "]", "=", "self", ".", "_resample", "(", "sample", "[", "'points_ref'", "]", ",", "ref_size", ")", "\n", "\n", "", "return", "sample", "\n", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.data_loader.transforms.Resampler._resample": [[69, 88], ["numpy.random.choice", "numpy.concatenate", "numpy.random.choice", "numpy.random.choice"], "methods", ["home.repos.pwc.inspect_result.tzodge_PCR-CMU.math_torch.se3.concatenate"], ["", "@", "staticmethod", "\n", "def", "_resample", "(", "points", ",", "k", ")", ":", "\n", "        ", "\"\"\"Resamples the points such that there is exactly k points.\n\n        If the input point cloud has <= k points, it is guaranteed the\n        resampled point cloud contains every point in the input.\n        If the input point cloud has > k points, it is guaranteed the\n        resampled point cloud does not contain repeated point.\n        \"\"\"", "\n", "\n", "if", "k", "<=", "points", ".", "shape", "[", "0", "]", ":", "\n", "            ", "rand_idxs", "=", "np", ".", "random", ".", "choice", "(", "points", ".", "shape", "[", "0", "]", ",", "k", ",", "replace", "=", "False", ")", "\n", "return", "points", "[", "rand_idxs", ",", ":", "]", "\n", "", "elif", "points", ".", "shape", "[", "0", "]", "==", "k", ":", "\n", "            ", "return", "points", "\n", "", "else", ":", "\n", "            ", "rand_idxs", "=", "np", ".", "concatenate", "(", "[", "np", ".", "random", ".", "choice", "(", "points", ".", "shape", "[", "0", "]", ",", "points", ".", "shape", "[", "0", "]", ",", "replace", "=", "False", ")", ",", "\n", "np", ".", "random", ".", "choice", "(", "points", ".", "shape", "[", "0", "]", ",", "k", "-", "points", ".", "shape", "[", "0", "]", ",", "replace", "=", "True", ")", "]", ")", "\n", "return", "points", "[", "rand_idxs", ",", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.data_loader.transforms.FixedResampler._resample": [[94, 101], ["numpy.concatenate", "numpy.tile"], "methods", ["home.repos.pwc.inspect_result.tzodge_PCR-CMU.math_torch.se3.concatenate"], ["@", "staticmethod", "\n", "def", "_resample", "(", "points", ",", "k", ")", ":", "\n", "        ", "multiple", "=", "k", "//", "points", ".", "shape", "[", "0", "]", "\n", "remainder", "=", "k", "%", "points", ".", "shape", "[", "0", "]", "\n", "\n", "resampled", "=", "np", ".", "concatenate", "(", "(", "np", ".", "tile", "(", "points", ",", "(", "multiple", ",", "1", ")", ")", ",", "points", "[", ":", "remainder", ",", ":", "]", ")", ",", "axis", "=", "0", ")", "\n", "return", "resampled", "\n", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.data_loader.transforms.RandomJitter.__init__": [[105, 108], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "scale", "=", "0.01", ",", "clip", "=", "0.05", ")", ":", "\n", "        ", "self", ".", "scale", "=", "scale", "\n", "self", ".", "clip", "=", "clip", "\n", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.data_loader.transforms.RandomJitter.jitter": [[109, 116], ["numpy.clip", "numpy.random.normal"], "methods", ["None"], ["", "def", "jitter", "(", "self", ",", "pts", ")", ":", "\n", "\n", "        ", "noise", "=", "np", ".", "clip", "(", "np", ".", "random", ".", "normal", "(", "0.0", ",", "scale", "=", "self", ".", "scale", ",", "size", "=", "(", "pts", ".", "shape", "[", "0", "]", ",", "3", ")", ")", ",", "\n", "a_min", "=", "-", "self", ".", "clip", ",", "a_max", "=", "self", ".", "clip", ")", "\n", "pts", "[", ":", ",", ":", "3", "]", "+=", "noise", "# Add noise to xyz", "\n", "\n", "return", "pts", "\n", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.data_loader.transforms.RandomJitter.__call__": [[117, 126], ["transforms.RandomJitter.jitter", "transforms.RandomJitter.jitter", "transforms.RandomJitter.jitter"], "methods", ["home.repos.pwc.inspect_result.tzodge_PCR-CMU.data_loader.transforms.RandomJitter.jitter", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.data_loader.transforms.RandomJitter.jitter", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.data_loader.transforms.RandomJitter.jitter"], ["", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "\n", "        ", "if", "'points'", "in", "sample", ":", "\n", "            ", "sample", "[", "'points'", "]", "=", "self", ".", "jitter", "(", "sample", "[", "'points'", "]", ")", "\n", "", "else", ":", "\n", "            ", "sample", "[", "'points_src'", "]", "=", "self", ".", "jitter", "(", "sample", "[", "'points_src'", "]", ")", "\n", "sample", "[", "'points_ref'", "]", "=", "self", ".", "jitter", "(", "sample", "[", "'points_ref'", "]", ")", "\n", "\n", "", "return", "sample", "\n", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.data_loader.transforms.RandomCrop.__init__": [[135, 139], ["numpy.array"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "p_keep", ":", "List", "=", "None", ")", ":", "\n", "        ", "if", "p_keep", "is", "None", ":", "\n", "            ", "p_keep", "=", "[", "0.7", ",", "0.7", "]", "# Crop both clouds to 70%", "\n", "", "self", ".", "p_keep", "=", "np", ".", "array", "(", "p_keep", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.data_loader.transforms.RandomCrop.crop": [[140, 153], ["common.math.random.uniform_2_sphere", "common.math.random.uniform_2_sphere", "numpy.mean", "numpy.dot", "numpy.percentile"], "methods", ["home.repos.pwc.inspect_result.tzodge_PCR-CMU.PCRNet_Code.data.uniform_2_sphere", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.PCRNet_Code.data.uniform_2_sphere"], ["", "@", "staticmethod", "\n", "def", "crop", "(", "points", ",", "p_keep", ")", ":", "\n", "        ", "rand_xyz", "=", "uniform_2_sphere", "(", ")", "\n", "centroid", "=", "np", ".", "mean", "(", "points", "[", ":", ",", ":", "3", "]", ",", "axis", "=", "0", ")", "\n", "points_centered", "=", "points", "[", ":", ",", ":", "3", "]", "-", "centroid", "\n", "\n", "dist_from_plane", "=", "np", ".", "dot", "(", "points_centered", ",", "rand_xyz", ")", "\n", "if", "p_keep", "==", "0.5", ":", "\n", "            ", "mask", "=", "dist_from_plane", ">", "0", "\n", "", "else", ":", "\n", "            ", "mask", "=", "dist_from_plane", ">", "np", ".", "percentile", "(", "dist_from_plane", ",", "(", "1.0", "-", "p_keep", ")", "*", "100", ")", "\n", "\n", "", "return", "points", "[", "mask", ",", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.data_loader.transforms.RandomCrop.__call__": [[154, 169], ["numpy.all", "numpy.random.seed", "len", "transforms.RandomCrop.crop", "transforms.RandomCrop.crop", "transforms.RandomCrop.crop"], "methods", ["home.repos.pwc.inspect_result.tzodge_PCR-CMU.data_loader.transforms.RandomCrop.crop", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.data_loader.transforms.RandomCrop.crop", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.data_loader.transforms.RandomCrop.crop"], ["", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "\n", "        ", "sample", "[", "'crop_proportion'", "]", "=", "self", ".", "p_keep", "\n", "if", "np", ".", "all", "(", "self", ".", "p_keep", "==", "1.0", ")", ":", "\n", "            ", "return", "sample", "# No need crop", "\n", "\n", "", "if", "'deterministic'", "in", "sample", "and", "sample", "[", "'deterministic'", "]", ":", "\n", "            ", "np", ".", "random", ".", "seed", "(", "sample", "[", "'idx'", "]", ")", "\n", "\n", "", "if", "len", "(", "self", ".", "p_keep", ")", "==", "1", ":", "\n", "            ", "sample", "[", "'points_src'", "]", "=", "self", ".", "crop", "(", "sample", "[", "'points_src'", "]", ",", "self", ".", "p_keep", "[", "0", "]", ")", "\n", "", "else", ":", "\n", "            ", "sample", "[", "'points_src'", "]", "=", "self", ".", "crop", "(", "sample", "[", "'points_src'", "]", ",", "self", ".", "p_keep", "[", "0", "]", ")", "\n", "sample", "[", "'points_ref'", "]", "=", "self", ".", "crop", "(", "sample", "[", "'points_ref'", "]", ",", "self", ".", "p_keep", "[", "1", "]", ")", "\n", "", "return", "sample", "\n", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.data_loader.transforms.RandomTransformSE3.__init__": [[172, 185], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "rot_mag", ":", "float", "=", "180.0", ",", "trans_mag", ":", "float", "=", "1.0", ",", "random_mag", ":", "bool", "=", "False", ")", ":", "\n", "        ", "\"\"\"Applies a random rigid transformation to the source point cloud\n\n        Args:\n            rot_mag (float): Maximum rotation in degrees\n            trans_mag (float): Maximum translation T. Random translation will\n              be in the range [-X,X] in each axis\n            random_mag (bool): If true, will randomize the maximum rotation, i.e. will bias towards small\n                               perturbations\n        \"\"\"", "\n", "self", ".", "_rot_mag", "=", "rot_mag", "\n", "self", ".", "_trans_mag", "=", "trans_mag", "\n", "self", ".", "_random_mag", "=", "random_mag", "\n", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.data_loader.transforms.RandomTransformSE3.generate_transform": [[186, 206], ["scipy.stats.special_ortho_group.rvs", "scipy.spatial.transform.Rotation.as_rotvec", "scipy.spatial.transform.Rotation.from_rotvec().as_dcm", "numpy.random.uniform", "numpy.concatenate().astype", "numpy.random.random", "scipy.spatial.transform.Rotation.from_dcm", "scipy.spatial.transform.Rotation.from_rotvec", "numpy.concatenate"], "methods", ["home.repos.pwc.inspect_result.tzodge_PCR-CMU.math_torch.se3.concatenate"], ["", "def", "generate_transform", "(", "self", ")", ":", "\n", "        ", "\"\"\"Generate a random SE3 transformation (3, 4) \"\"\"", "\n", "\n", "if", "self", ".", "_random_mag", ":", "\n", "            ", "attentuation", "=", "np", ".", "random", ".", "random", "(", ")", "\n", "rot_mag", ",", "trans_mag", "=", "attentuation", "*", "self", ".", "_rot_mag", ",", "attentuation", "*", "self", ".", "_trans_mag", "\n", "", "else", ":", "\n", "            ", "rot_mag", ",", "trans_mag", "=", "self", ".", "_rot_mag", ",", "self", ".", "_trans_mag", "\n", "\n", "# Generate rotation", "\n", "", "rand_rot", "=", "special_ortho_group", ".", "rvs", "(", "3", ")", "\n", "axis_angle", "=", "Rotation", ".", "as_rotvec", "(", "Rotation", ".", "from_dcm", "(", "rand_rot", ")", ")", "\n", "axis_angle", "*=", "rot_mag", "/", "180.0", "\n", "rand_rot", "=", "Rotation", ".", "from_rotvec", "(", "axis_angle", ")", ".", "as_dcm", "(", ")", "\n", "\n", "# Generate translation", "\n", "rand_trans", "=", "np", ".", "random", ".", "uniform", "(", "-", "trans_mag", ",", "trans_mag", ",", "3", ")", "\n", "rand_SE3", "=", "np", ".", "concatenate", "(", "(", "rand_rot", ",", "rand_trans", "[", ":", ",", "None", "]", ")", ",", "axis", "=", "1", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n", "return", "rand_SE3", "\n", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.data_loader.transforms.RandomTransformSE3.apply_transform": [[207, 217], ["common.transform", "common.transform", "common.inverse", "common.inverse", "common.transform", "common.transform", "numpy.concatenate"], "methods", ["home.repos.pwc.inspect_result.tzodge_PCR-CMU.math_torch.se3.transform", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.math_torch.se3.transform", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.math_torch.se3.inverse", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.math_torch.se3.inverse", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.math_torch.se3.transform", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.math_torch.se3.transform", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.math_torch.se3.concatenate"], ["", "def", "apply_transform", "(", "self", ",", "p0", ",", "transform_mat", ")", ":", "\n", "        ", "p1", "=", "se3", ".", "transform", "(", "transform_mat", ",", "p0", "[", ":", ",", ":", "3", "]", ")", "\n", "if", "p0", ".", "shape", "[", "1", "]", "==", "6", ":", "# Need to rotate normals also", "\n", "            ", "n1", "=", "so3", ".", "transform", "(", "transform_mat", "[", ":", "3", ",", ":", "3", "]", ",", "p0", "[", ":", ",", "3", ":", "6", "]", ")", "\n", "p1", "=", "np", ".", "concatenate", "(", "(", "p1", ",", "n1", ")", ",", "axis", "=", "-", "1", ")", "\n", "\n", "", "igt", "=", "transform_mat", "\n", "gt", "=", "se3", ".", "inverse", "(", "igt", ")", "\n", "\n", "return", "p1", ",", "gt", ",", "igt", "\n", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.data_loader.transforms.RandomTransformSE3.transform": [[218, 221], ["transforms.RandomTransformSE3.generate_transform", "transforms.RandomTransformSE3.apply_transform"], "methods", ["home.repos.pwc.inspect_result.tzodge_PCR-CMU.data_loader.transforms.RandomRotatorZ.generate_transform", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.data_loader.transforms.RandomTransformSE3.apply_transform"], ["", "def", "transform", "(", "self", ",", "tensor", ")", ":", "\n", "        ", "transform_mat", "=", "self", ".", "generate_transform", "(", ")", "\n", "return", "self", ".", "apply_transform", "(", "tensor", ",", "transform_mat", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.data_loader.transforms.RandomTransformSE3.__call__": [[222, 235], ["numpy.random.seed", "transforms.RandomTransformSE3.transform", "transforms.RandomTransformSE3.transform"], "methods", ["home.repos.pwc.inspect_result.tzodge_PCR-CMU.math_torch.se3.transform", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.math_torch.se3.transform"], ["", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "\n", "        ", "if", "'deterministic'", "in", "sample", "and", "sample", "[", "'deterministic'", "]", ":", "\n", "            ", "np", ".", "random", ".", "seed", "(", "sample", "[", "'idx'", "]", ")", "\n", "\n", "", "if", "'points'", "in", "sample", ":", "\n", "            ", "sample", "[", "'points'", "]", ",", "_", ",", "_", "=", "self", ".", "transform", "(", "sample", "[", "'points'", "]", ")", "\n", "", "else", ":", "\n", "            ", "src_transformed", ",", "transform_r_s", ",", "transform_s_r", "=", "self", ".", "transform", "(", "sample", "[", "'points_src'", "]", ")", "\n", "sample", "[", "'transform_gt'", "]", "=", "transform_r_s", "# Apply to source to get reference", "\n", "sample", "[", "'points_src'", "]", "=", "src_transformed", "\n", "\n", "", "return", "sample", "\n", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.data_loader.transforms.RandomTransformSE3_euler.generate_transform": [[244, 267], ["scipy.spatial.transform.Rotation.from_rotvec", "scipy.spatial.transform.Rotation.from_rotvec.as_dcm", "scipy.spatial.transform.Rotation.from_rotvec.as_euler", "numpy.random.uniform", "numpy.concatenate().astype", "numpy.random.random", "numpy.random.rand", "numpy.array", "numpy.linalg.norm", "numpy.concatenate", "numpy.random.uniform"], "methods", ["home.repos.pwc.inspect_result.tzodge_PCR-CMU.math_torch.se3.concatenate"], ["def", "generate_transform", "(", "self", ")", ":", "\n", "\n", "        ", "if", "self", ".", "_random_mag", ":", "\n", "            ", "attentuation", "=", "np", ".", "random", ".", "random", "(", ")", "\n", "rot_mag", ",", "trans_mag", "=", "attentuation", "*", "self", ".", "_rot_mag", ",", "attentuation", "*", "self", ".", "_trans_mag", "\n", "", "else", ":", "\n", "            ", "rot_mag", ",", "trans_mag", "=", "self", ".", "_rot_mag", ",", "self", ".", "_trans_mag", "\n", "\n", "\n", "## we use axis angles sampling to avoid gimbal locks", "\n", "", "axis", "=", "np", ".", "random", ".", "rand", "(", "3", ",", ")", "-", "np", ".", "array", "(", "[", "0.5", ",", "0.5", ",", "0.5", "]", ")", "\n", "axis", "=", "axis", "/", "np", ".", "linalg", ".", "norm", "(", "axis", ")", "\n", "angle", "=", "np", ".", "random", ".", "uniform", "(", ")", "*", "np", ".", "pi", "*", "rot_mag", "/", "180.0", "\n", "Rot_instance", "=", "Rotation", ".", "from_rotvec", "(", "axis", "*", "angle", ")", "\n", "R_ab", "=", "Rot_instance", ".", "as_dcm", "(", ")", "\n", "\n", "[", "anglez", ",", "angley", ",", "anglex", "]", "=", "Rot_instance", ".", "as_euler", "(", "'zyx'", ")", "\n", "\n", "#######################################################################", "\n", "t_ab", "=", "np", ".", "random", ".", "uniform", "(", "-", "trans_mag", ",", "trans_mag", ",", "3", ")", "\n", "\n", "rand_SE3", "=", "np", ".", "concatenate", "(", "(", "R_ab", ",", "t_ab", "[", ":", ",", "None", "]", ")", ",", "axis", "=", "1", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "return", "rand_SE3", "\n", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.data_loader.transforms.RandomRotatorZ.__init__": [[272, 274], ["transforms.RandomTransformSE3.__init__"], "methods", ["home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.model.DCP.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "rot_mag", "=", "360", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.data_loader.transforms.RandomRotatorZ.generate_transform": [[275, 283], ["scipy.spatial.transform.Rotation.from_euler().as_dcm", "numpy.pad().astype", "numpy.random.random", "scipy.spatial.transform.Rotation.from_euler", "numpy.pad"], "methods", ["None"], ["", "def", "generate_transform", "(", "self", ")", ":", "\n", "        ", "\"\"\"Generate a random SE3 transformation (3, 4) \"\"\"", "\n", "\n", "rand_rot_deg", "=", "np", ".", "random", ".", "random", "(", ")", "*", "self", ".", "_rot_mag", "\n", "rand_rot", "=", "Rotation", ".", "from_euler", "(", "'z'", ",", "rand_rot_deg", ",", "degrees", "=", "True", ")", ".", "as_dcm", "(", ")", "\n", "rand_SE3", "=", "np", ".", "pad", "(", "rand_rot", ",", "(", "(", "0", ",", "0", ")", ",", "(", "0", ",", "1", ")", ")", ",", "mode", "=", "'constant'", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n", "return", "rand_SE3", "\n", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.data_loader.transforms.ShufflePoints.__call__": [[287, 294], ["numpy.random.permutation", "numpy.random.permutation", "numpy.random.permutation"], "methods", ["None"], ["def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "        ", "if", "'points'", "in", "sample", ":", "\n", "            ", "sample", "[", "'points'", "]", "=", "np", ".", "random", ".", "permutation", "(", "sample", "[", "'points'", "]", ")", "\n", "", "else", ":", "\n", "            ", "sample", "[", "'points_ref'", "]", "=", "np", ".", "random", ".", "permutation", "(", "sample", "[", "'points_ref'", "]", ")", "\n", "sample", "[", "'points_src'", "]", "=", "np", ".", "random", ".", "permutation", "(", "sample", "[", "'points_src'", "]", ")", "\n", "", "return", "sample", "\n", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.data_loader.transforms.SetDeterministic.__call__": [[299, 302], ["None"], "methods", ["None"], ["def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "        ", "sample", "[", "'deterministic'", "]", "=", "True", "\n", "return", "sample", "\n", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.data_loader.transforms.Dict2DcpList.__call__": [[306, 323], ["[].transpose().copy", "[].transpose().copy", "[].transpose().copy", "[].copy", "[].copy", "scipy.spatial.transform.Rotation.from_dcm().as_euler().copy", "scipy.spatial.transform.Rotation.from_dcm().as_euler().copy", "[].copy", "[].transpose", "[].transpose", "[].transpose", "scipy.spatial.transform.Rotation.from_dcm().as_euler", "scipy.spatial.transform.Rotation.from_dcm().as_euler", "scipy.spatial.transform.Rotation.from_dcm", "scipy.spatial.transform.Rotation.from_dcm"], "methods", ["None"], ["def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "\n", "        ", "target", "=", "sample", "[", "'points_src'", "]", "[", ":", ",", ":", "3", "]", ".", "transpose", "(", ")", ".", "copy", "(", ")", "\n", "src", "=", "sample", "[", "'points_ref'", "]", "[", ":", ",", ":", "3", "]", ".", "transpose", "(", ")", ".", "copy", "(", ")", "\n", "\n", "rotation_ab", "=", "sample", "[", "'transform_gt'", "]", "[", ":", "3", ",", ":", "3", "]", ".", "transpose", "(", ")", ".", "copy", "(", ")", "\n", "translation_ab", "=", "-", "rotation_ab", "@", "sample", "[", "'transform_gt'", "]", "[", ":", "3", ",", "3", "]", ".", "copy", "(", ")", "\n", "\n", "rotation_ba", "=", "sample", "[", "'transform_gt'", "]", "[", ":", "3", ",", ":", "3", "]", ".", "copy", "(", ")", "\n", "translation_ba", "=", "sample", "[", "'transform_gt'", "]", "[", ":", "3", ",", "3", "]", ".", "copy", "(", ")", "\n", "\n", "euler_ab", "=", "Rotation", ".", "from_dcm", "(", "rotation_ab", ")", ".", "as_euler", "(", "'zyx'", ")", ".", "copy", "(", ")", "\n", "euler_ba", "=", "Rotation", ".", "from_dcm", "(", "rotation_ba", ")", ".", "as_euler", "(", "'xyz'", ")", ".", "copy", "(", ")", "\n", "\n", "return", "src", ",", "target", ",", "rotation_ab", ",", "translation_ab", ",", "rotation_ba", ",", "translation_ba", ",", "euler_ab", ",", "euler_ba", "\n", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.data_loader.transforms.Dict2PointnetLKList.__call__": [[327, 337], ["numpy.concatenate", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.tzodge_PCR-CMU.math_torch.se3.concatenate"], ["def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "\n", "        ", "if", "'points'", "in", "sample", ":", "\n", "# Train Classifier (pretraining)", "\n", "            ", "return", "sample", "[", "'points'", "]", "[", ":", ",", ":", "3", "]", ",", "sample", "[", "'label'", "]", "\n", "", "else", ":", "\n", "# Train PointNetLK", "\n", "            ", "transform_gt_4x4", "=", "np", ".", "concatenate", "(", "[", "sample", "[", "'transform_gt'", "]", ",", "\n", "np", ".", "array", "(", "[", "[", "0.0", ",", "0.0", ",", "0.0", ",", "1.0", "]", "]", ",", "dtype", "=", "np", ".", "float32", ")", "]", ",", "axis", "=", "0", ")", "\n", "return", "sample", "[", "'points_src'", "]", "[", ":", ",", ":", "3", "]", ",", "sample", "[", "'points_ref'", "]", "[", ":", ",", ":", "3", "]", ",", "transform_gt_4x4", "\n", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.data_loader.transforms.ComputeCorrMat.__call__": [[341, 376], ["sklearn.neighbors.NearestNeighbors", "sklearn.neighbors.NearestNeighbors.fit", "sklearn.neighbors.NearestNeighbors.kneighbors", "sklearn.neighbors.NearestNeighbors", "sklearn.neighbors.NearestNeighbors.fit", "sklearn.neighbors.NearestNeighbors.kneighbors", "numpy.zeros", "numpy.zeros.astype", "numpy.take", "numpy.arange", "numpy.sum().max", "numpy.sum().max", "numpy.arange", "numpy.sum", "numpy.sum"], "methods", ["None"], ["def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "\n", "        ", "src", "=", "sample", "[", "'points_src'", "]", "[", ":", ",", ":", "3", "]", "\n", "ref", "=", "sample", "[", "'points_ref'", "]", "[", ":", ",", ":", "3", "]", "\n", "\n", "inl_threshold", "=", "0.1", "# threshold to decide whether a point is an inlier", "\n", "out_threshold", "=", "inl_threshold", "*", "2", "# threshold to decide whether a point is an outlier", "\n", "\n", "# mutual Nearest-Neighbor search", "\n", "nn_search", "=", "NearestNeighbors", "(", "n_neighbors", "=", "1", ",", "metric", "=", "'minkowski'", ",", "p", "=", "2", ")", "\n", "nn_search", ".", "fit", "(", "ref", ")", "\n", "nndist1", ",", "nnidx1", "=", "nn_search", ".", "kneighbors", "(", "X", "=", "src", ",", "n_neighbors", "=", "1", ",", "return_distance", "=", "True", ")", "\n", "nndist1", "=", "nndist1", "[", ":", ",", "0", "]", "\n", "nnidx1", "=", "nnidx1", "[", ":", ",", "0", "]", "\n", "\n", "nn_search", "=", "NearestNeighbors", "(", "n_neighbors", "=", "1", ",", "metric", "=", "'minkowski'", ",", "p", "=", "2", ")", "\n", "nn_search", ".", "fit", "(", "src", ")", "\n", "nndist2", ",", "nnidx2", "=", "nn_search", ".", "kneighbors", "(", "X", "=", "ref", ",", "n_neighbors", "=", "1", ",", "return_distance", "=", "True", ")", "\n", "nndist2", "=", "nndist2", "[", ":", ",", "0", "]", "\n", "nnidx2", "=", "nnidx2", "[", ":", ",", "0", "]", "\n", "\n", "pc1_mnn_mask", "=", "np", ".", "take", "(", "nnidx2", ",", "nnidx1", ")", "==", "np", ".", "arange", "(", "nnidx1", ".", "shape", "[", "0", "]", ")", "# mutual NN mask", "\n", "corr_mat", "=", "np", ".", "zeros", "(", "(", "nnidx1", ".", "shape", "[", "0", "]", ",", "nnidx2", ".", "shape", "[", "0", "]", ")", ",", "dtype", "=", "np", ".", "int64", ")", "\n", "corr_mat", "[", "np", ".", "arange", "(", "nnidx1", ".", "shape", "[", "0", "]", ")", ",", "nnidx1", "]", "=", "1", "# set ones", "\n", "corr_mat", "[", "~", "pc1_mnn_mask", ",", ":", "]", "=", "0", "# if not mutual, set zero", "\n", "inlier_mask", "=", "nndist1", "<", "inl_threshold", "\n", "corr_mat", "[", "~", "inlier_mask", ",", ":", "]", "=", "0", "# if not inlier, set zero", "\n", "\n", "assert", "(", "np", ".", "sum", "(", "corr_mat", ",", "axis", "=", "1", ")", ".", "max", "(", ")", "<=", "1", ")", "# assert one-to-one relationship", "\n", "assert", "(", "np", ".", "sum", "(", "corr_mat", ",", "axis", "=", "0", ")", ".", "max", "(", ")", "<=", "1", ")", "\n", "###########################################################################################################", "\n", "\n", "sample", "[", "'corr_mat'", "]", "=", "corr_mat", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n", "return", "sample", "\n", "", "", ""]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.data_loader.datasets.ModelNetHdf.__init__": [[175, 217], ["logging.getLogger", "os.path.join", "datasets.ModelNetHdf._logger.info", "datasets.ModelNetHdf._read_h5_files", "datasets.ModelNetHdf._logger.info", "os.path.exists", "datasets.ModelNetHdf._download_dataset", "open", "open", "datasets.ModelNetHdf._logger.info", "datasets.ModelNetHdf._logger.info", "os.path.join", "os.path.join", "l.strip", "os.path.join", "line.strip", "x.replace", "os.path.join", "enumerate"], "methods", ["home.repos.pwc.inspect_result.tzodge_PCR-CMU.data_loader.datasets.ModelNetHdf._read_h5_files", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.data_loader.datasets.ModelNetHdf._download_dataset"], ["    ", "def", "__init__", "(", "self", ",", "dataset_path", ":", "str", ",", "subset", ":", "str", "=", "'train'", ",", "categories", ":", "List", "=", "None", ",", "transform", "=", "None", ")", ":", "\n", "        ", "\"\"\"ModelNet40 dataset from PointNet.\n        Automatically downloads the dataset if not available\n\n        Args:\n            dataset_path (str): Folder containing processed dataset\n            subset (str): Dataset subset, either 'train' or 'test'\n            categories (list): Categories to use\n            transform (callable, optional): Optional transform to be applied\n                on a sample.\n        \"\"\"", "\n", "self", ".", "_logger", "=", "logging", ".", "getLogger", "(", "self", ".", "__class__", ".", "__name__", ")", "\n", "self", ".", "_root", "=", "dataset_path", "\n", "\n", "metadata_fpath", "=", "os", ".", "path", ".", "join", "(", "self", ".", "_root", ",", "'{}_files.txt'", ".", "format", "(", "subset", ")", ")", "\n", "self", ".", "_logger", ".", "info", "(", "'Loading data from {} for {}'", ".", "format", "(", "metadata_fpath", ",", "subset", ")", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "dataset_path", ")", ")", ":", "\n", "            ", "self", ".", "_download_dataset", "(", "dataset_path", ")", "\n", "\n", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "dataset_path", ",", "'shape_names.txt'", ")", ")", "as", "fid", ":", "\n", "            ", "self", ".", "_classes", "=", "[", "l", ".", "strip", "(", ")", "for", "l", "in", "fid", "]", "\n", "self", ".", "_category2idx", "=", "{", "e", "[", "1", "]", ":", "e", "[", "0", "]", "for", "e", "in", "enumerate", "(", "self", ".", "_classes", ")", "}", "\n", "self", ".", "_idx2category", "=", "self", ".", "_classes", "\n", "\n", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "dataset_path", ",", "'{}_files.txt'", ".", "format", "(", "subset", ")", ")", ")", "as", "fid", ":", "\n", "            ", "h5_filelist", "=", "[", "line", ".", "strip", "(", ")", "for", "line", "in", "fid", "]", "\n", "h5_filelist", "=", "[", "x", ".", "replace", "(", "'data/modelnet40_ply_hdf5_2048/'", ",", "''", ")", "for", "x", "in", "h5_filelist", "]", "\n", "h5_filelist", "=", "[", "os", ".", "path", ".", "join", "(", "self", ".", "_root", ",", "f", ")", "for", "f", "in", "h5_filelist", "]", "\n", "\n", "", "if", "categories", "is", "not", "None", ":", "\n", "            ", "categories_idx", "=", "[", "self", ".", "_category2idx", "[", "c", "]", "for", "c", "in", "categories", "]", "\n", "self", ".", "_logger", ".", "info", "(", "'Categories used: {}.'", ".", "format", "(", "categories_idx", ")", ")", "\n", "self", ".", "_classes", "=", "categories", "\n", "", "else", ":", "\n", "            ", "categories_idx", "=", "None", "\n", "self", ".", "_logger", ".", "info", "(", "'Using all categories.'", ")", "\n", "\n", "", "self", ".", "_data", ",", "self", ".", "_labels", "=", "self", ".", "_read_h5_files", "(", "h5_filelist", ",", "categories_idx", ")", "\n", "# self._data, self._labels = self._data[:32], self._labels[:32, ...]", "\n", "self", ".", "_transform", "=", "transform", "\n", "self", ".", "_logger", ".", "info", "(", "'Loaded {} {} instances.'", ".", "format", "(", "self", ".", "_data", ".", "shape", "[", "0", "]", ",", "subset", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.data_loader.datasets.ModelNetHdf.__getitem__": [[218, 225], ["numpy.array", "datasets.ModelNetHdf._transform"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "item", ")", ":", "\n", "        ", "sample", "=", "{", "'points'", ":", "self", ".", "_data", "[", "item", ",", ":", ",", ":", "]", ",", "'label'", ":", "self", ".", "_labels", "[", "item", "]", ",", "'idx'", ":", "np", ".", "array", "(", "item", ",", "dtype", "=", "np", ".", "int32", ")", "}", "\n", "\n", "if", "self", ".", "_transform", ":", "\n", "            ", "sample", "=", "self", ".", "_transform", "(", "sample", ")", "\n", "\n", "", "return", "sample", "\n", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.data_loader.datasets.ModelNetHdf.__len__": [[226, 228], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_data", ".", "shape", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.data_loader.datasets.ModelNetHdf.classes": [[229, 232], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "classes", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_classes", "\n", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.data_loader.datasets.ModelNetHdf._read_h5_files": [[233, 255], ["numpy.concatenate", "numpy.concatenate", "h5py.File", "numpy.concatenate", "[].flatten().astype", "numpy.concatenate.append", "numpy.concatenate.append", "numpy.isin().flatten", "[].flatten", "numpy.isin"], "methods", ["home.repos.pwc.inspect_result.tzodge_PCR-CMU.math_torch.se3.concatenate", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.math_torch.se3.concatenate", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.math_torch.se3.concatenate"], ["", "@", "staticmethod", "\n", "def", "_read_h5_files", "(", "fnames", ",", "categories", ")", ":", "\n", "\n", "        ", "all_data", "=", "[", "]", "\n", "all_labels", "=", "[", "]", "\n", "\n", "for", "fname", "in", "fnames", ":", "\n", "            ", "f", "=", "h5py", ".", "File", "(", "fname", ",", "mode", "=", "'r'", ")", "\n", "data", "=", "np", ".", "concatenate", "(", "[", "f", "[", "'data'", "]", "[", ":", "]", ",", "f", "[", "'normal'", "]", "[", ":", "]", "]", ",", "axis", "=", "-", "1", ")", "\n", "labels", "=", "f", "[", "'label'", "]", "[", ":", "]", ".", "flatten", "(", ")", ".", "astype", "(", "np", ".", "int64", ")", "\n", "\n", "if", "categories", "is", "not", "None", ":", "# Filter out unwanted categories", "\n", "                ", "mask", "=", "np", ".", "isin", "(", "labels", ",", "categories", ")", ".", "flatten", "(", ")", "\n", "data", "=", "data", "[", "mask", ",", "...", "]", "\n", "labels", "=", "labels", "[", "mask", ",", "...", "]", "\n", "\n", "", "all_data", ".", "append", "(", "data", ")", "\n", "all_labels", ".", "append", "(", "labels", ")", "\n", "\n", "", "all_data", "=", "np", ".", "concatenate", "(", "all_data", ",", "axis", "=", "0", ")", "\n", "all_labels", "=", "np", ".", "concatenate", "(", "all_labels", ",", "axis", "=", "0", ")", "\n", "return", "all_data", ",", "all_labels", "\n", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.data_loader.datasets.ModelNetHdf._download_dataset": [[256, 266], ["os.makedirs", "os.path.basename", "os.system", "os.system", "os.system", "os.system", "os.path.dirname"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_download_dataset", "(", "dataset_path", ":", "str", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "dataset_path", ",", "exist_ok", "=", "True", ")", "\n", "\n", "www", "=", "'https://shapenet.cs.stanford.edu/media/modelnet40_ply_hdf5_2048.zip'", "\n", "zipfile", "=", "os", ".", "path", ".", "basename", "(", "www", ")", "\n", "os", ".", "system", "(", "'wget --no-check-certificate {}'", ".", "format", "(", "www", ")", ")", "\n", "os", ".", "system", "(", "'unzip {} -d .'", ".", "format", "(", "zipfile", ")", ")", "\n", "os", ".", "system", "(", "'mv {} {}'", ".", "format", "(", "zipfile", "[", ":", "-", "4", "]", ",", "os", ".", "path", ".", "dirname", "(", "dataset_path", ")", ")", ")", "\n", "os", ".", "system", "(", "'rm {}'", ".", "format", "(", "zipfile", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.data_loader.datasets.ModelNetHdf.to_category": [[267, 269], ["None"], "methods", ["None"], ["", "def", "to_category", "(", "self", ",", "i", ")", ":", "\n", "        ", "return", "self", ".", "_idx2category", "[", "i", "]", "\n", "", "", ""]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.data_loader.datasets.get_train_datasets": [[20, 45], ["datasets.get_transforms", "_logger.info", "_logger.info", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "train_categories.sort", "val_categories.sort", "datasets.ModelNetHdf", "datasets.ModelNetHdf", "line.rstrip", "line.rstrip", "open", "open", "type", "type"], "function", ["home.repos.pwc.inspect_result.tzodge_PCR-CMU.data_loader.datasets.get_transforms"], ["def", "get_train_datasets", "(", "args", ":", "argparse", ".", "Namespace", ")", ":", "\n", "    ", "train_categories", ",", "val_categories", "=", "None", ",", "None", "\n", "if", "args", ".", "train_categoryfile", ":", "\n", "        ", "train_categories", "=", "[", "line", ".", "rstrip", "(", "'\\n'", ")", "for", "line", "in", "open", "(", "args", ".", "train_categoryfile", ")", "]", "\n", "train_categories", ".", "sort", "(", ")", "\n", "", "if", "args", ".", "val_categoryfile", ":", "\n", "        ", "val_categories", "=", "[", "line", ".", "rstrip", "(", "'\\n'", ")", "for", "line", "in", "open", "(", "args", ".", "val_categoryfile", ")", "]", "\n", "val_categories", ".", "sort", "(", ")", "\n", "\n", "", "train_transforms", ",", "val_transforms", "=", "get_transforms", "(", "args", ".", "noise_type", ",", "args", ".", "rot_mag", ",", "args", ".", "trans_mag", ",", "\n", "args", ".", "num_points", ",", "args", ".", "partial", ")", "\n", "_logger", ".", "info", "(", "'Train transforms: {}'", ".", "format", "(", "', '", ".", "join", "(", "[", "type", "(", "t", ")", ".", "__name__", "for", "t", "in", "train_transforms", "]", ")", ")", ")", "\n", "_logger", ".", "info", "(", "'Val transforms: {}'", ".", "format", "(", "', '", ".", "join", "(", "[", "type", "(", "t", ")", ".", "__name__", "for", "t", "in", "val_transforms", "]", ")", ")", ")", "\n", "train_transforms", "=", "torchvision", ".", "transforms", ".", "Compose", "(", "train_transforms", ")", "\n", "val_transforms", "=", "torchvision", ".", "transforms", ".", "Compose", "(", "val_transforms", ")", "\n", "\n", "if", "args", ".", "dataset_type", "==", "'modelnet_hdf'", ":", "\n", "        ", "train_data", "=", "ModelNetHdf", "(", "args", ".", "dataset_path", ",", "subset", "=", "'train'", ",", "categories", "=", "train_categories", ",", "\n", "transform", "=", "train_transforms", ")", "\n", "val_data", "=", "ModelNetHdf", "(", "args", ".", "dataset_path", ",", "subset", "=", "'test'", ",", "categories", "=", "val_categories", ",", "\n", "transform", "=", "val_transforms", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n", "", "return", "train_data", ",", "val_data", "\n", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.data_loader.datasets.get_test_datasets": [[47, 65], ["datasets.get_transforms", "_logger.info", "torchvision.transforms.Compose", "test_categories.sort", "datasets.ModelNetHdf", "line.rstrip", "open", "type"], "function", ["home.repos.pwc.inspect_result.tzodge_PCR-CMU.data_loader.datasets.get_transforms"], ["", "def", "get_test_datasets", "(", "args", ":", "argparse", ".", "Namespace", ")", ":", "\n", "    ", "test_categories", "=", "None", "\n", "if", "args", ".", "test_category_file", ":", "\n", "        ", "test_categories", "=", "[", "line", ".", "rstrip", "(", "'\\n'", ")", "for", "line", "in", "open", "(", "args", ".", "test_category_file", ")", "]", "\n", "test_categories", ".", "sort", "(", ")", "\n", "\n", "", "_", ",", "test_transforms", "=", "get_transforms", "(", "args", ".", "noise_type", ",", "args", ".", "rot_mag", ",", "args", ".", "trans_mag", ",", "\n", "args", ".", "num_points", ",", "args", ".", "partial", ")", "\n", "_logger", ".", "info", "(", "'Test transforms: {}'", ".", "format", "(", "', '", ".", "join", "(", "[", "type", "(", "t", ")", ".", "__name__", "for", "t", "in", "test_transforms", "]", ")", ")", ")", "\n", "test_transforms", "=", "torchvision", ".", "transforms", ".", "Compose", "(", "test_transforms", ")", "\n", "\n", "if", "args", ".", "dataset_type", "==", "'modelnet_hdf'", ":", "\n", "        ", "test_data", "=", "ModelNetHdf", "(", "args", ".", "dataset_path", ",", "subset", "=", "'test'", ",", "categories", "=", "test_categories", ",", "\n", "transform", "=", "test_transforms", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n", "", "return", "test_data", "\n", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.data_loader.datasets.get_transforms": [[67, 172], ["data_loader.Resampler", "data_loader.SplitSourceRef", "data_loader.ShufflePoints", "data_loader.ComputeCorrMat", "data_loader.RandomTransformSE3_euler", "data_loader.SetDeterministic", "data_loader.FixedResampler", "data_loader.SplitSourceRef", "data_loader.ShufflePoints", "data_loader.ComputeCorrMat", "data_loader.RandomTransformSE3_euler", "data_loader.SplitSourceRef", "data_loader.Resampler", "data_loader.RandomJitter", "data_loader.ShufflePoints", "data_loader.ComputeCorrMat", "data_loader.RandomTransformSE3_euler", "data_loader.SetDeterministic", "data_loader.SplitSourceRef", "data_loader.Resampler", "data_loader.RandomJitter", "data_loader.ShufflePoints", "data_loader.ComputeCorrMat", "data_loader.RandomTransformSE3_euler", "data_loader.SplitSourceRef", "data_loader.RandomCrop", "data_loader.Resampler", "data_loader.RandomJitter", "data_loader.ShufflePoints", "data_loader.ComputeCorrMat", "data_loader.RandomTransformSE3_euler", "data_loader.SetDeterministic", "data_loader.SplitSourceRef", "data_loader.RandomCrop", "data_loader.Resampler", "data_loader.RandomJitter", "data_loader.ShufflePoints", "data_loader.ComputeCorrMat", "data_loader.RandomTransformSE3_euler", "data_loader.Resampler", "data_loader.SplitSourceRef", "data_loader.RandomCrop", "data_loader.ShufflePoints", "data_loader.ComputeCorrMat", "data_loader.RandomTransformSE3_euler", "data_loader.SetDeterministic", "data_loader.Resampler", "data_loader.SplitSourceRef", "data_loader.RandomCrop", "data_loader.ShufflePoints", "data_loader.ComputeCorrMat", "data_loader.RandomTransformSE3_euler"], "function", ["None"], ["", "def", "get_transforms", "(", "noise_type", ":", "str", ",", "\n", "rot_mag", ":", "float", "=", "45.0", ",", "trans_mag", ":", "float", "=", "0.5", ",", "\n", "num_points", ":", "int", "=", "1024", ",", "partial_p_keep", ":", "List", "=", "None", ")", ":", "\n", "    ", "\"\"\"Get the list of transformation to be used for training or evaluating RegNet\n\n    Args:\n        noise_type: Either 'clean', 'jitter', 'crop'.\n          Depending on the option, some of the subsequent arguments may be ignored.\n        rot_mag: Magnitude of rotation perturbation to apply to source, in degrees.\n          Default: 45.0 (same as Deep Closest Point)\n        trans_mag: Magnitude of translation perturbation to apply to source.\n          Default: 0.5 (same as Deep Closest Point)\n        num_points: Number of points to uniformly resample to.\n          Note that this is with respect to the full point cloud. The number of\n          points will be proportionally less if cropped\n        partial_p_keep: Proportion to keep during cropping, [src_p, ref_p]\n          Default: [0.7, 0.7], i.e. Crop both source and reference to ~70%\n\n    Returns:\n        train_transforms, test_transforms: Both contain list of transformations to be applied\n    \"\"\"", "\n", "\n", "partial_p_keep", "=", "partial_p_keep", "if", "partial_p_keep", "is", "not", "None", "else", "[", "0.7", ",", "0.7", "]", "\n", "\n", "if", "noise_type", "==", "\"clean\"", ":", "\n", "# 1-1 correspondence for each point (resample first before splitting), no noise", "\n", "        ", "train_transforms", "=", "[", "Transforms", ".", "Resampler", "(", "num_points", ")", ",", "\n", "Transforms", ".", "SplitSourceRef", "(", ")", ",", "\n", "Transforms", ".", "ShufflePoints", "(", ")", ",", "\n", "Transforms", ".", "ComputeCorrMat", "(", ")", ",", "\n", "Transforms", ".", "RandomTransformSE3_euler", "(", "rot_mag", "=", "rot_mag", ",", "trans_mag", "=", "trans_mag", ")", "]", "\n", "\n", "\n", "test_transforms", "=", "[", "Transforms", ".", "SetDeterministic", "(", ")", ",", "\n", "Transforms", ".", "FixedResampler", "(", "num_points", ")", ",", "\n", "Transforms", ".", "SplitSourceRef", "(", ")", ",", "\n", "Transforms", ".", "ShufflePoints", "(", ")", ",", "\n", "Transforms", ".", "ComputeCorrMat", "(", ")", ",", "\n", "Transforms", ".", "RandomTransformSE3_euler", "(", "rot_mag", "=", "rot_mag", ",", "trans_mag", "=", "trans_mag", ")", "]", "\n", "\n", "\n", "", "elif", "noise_type", "==", "\"jitter\"", ":", "\n", "# Points randomly sampled (might not have perfect correspondence), gaussian noise to position", "\n", "        ", "train_transforms", "=", "[", "Transforms", ".", "SplitSourceRef", "(", ")", ",", "\n", "Transforms", ".", "Resampler", "(", "num_points", ")", ",", "\n", "Transforms", ".", "RandomJitter", "(", ")", ",", "\n", "Transforms", ".", "ShufflePoints", "(", ")", ",", "\n", "Transforms", ".", "ComputeCorrMat", "(", ")", ",", "\n", "Transforms", ".", "RandomTransformSE3_euler", "(", "rot_mag", "=", "rot_mag", ",", "trans_mag", "=", "trans_mag", ")", "]", "\n", "\n", "\n", "\n", "test_transforms", "=", "[", "Transforms", ".", "SetDeterministic", "(", ")", ",", "\n", "Transforms", ".", "SplitSourceRef", "(", ")", ",", "\n", "Transforms", ".", "Resampler", "(", "num_points", ")", ",", "\n", "Transforms", ".", "RandomJitter", "(", ")", ",", "\n", "Transforms", ".", "ShufflePoints", "(", ")", ",", "\n", "Transforms", ".", "ComputeCorrMat", "(", ")", ",", "\n", "Transforms", ".", "RandomTransformSE3_euler", "(", "rot_mag", "=", "rot_mag", ",", "trans_mag", "=", "trans_mag", ")", "]", "\n", "\n", "\n", "\n", "", "elif", "noise_type", "==", "\"crop\"", ":", "\n", "# Both source and reference point clouds cropped, plus same noise in \"jitter\"", "\n", "        ", "train_transforms", "=", "[", "Transforms", ".", "SplitSourceRef", "(", ")", ",", "\n", "Transforms", ".", "RandomCrop", "(", "partial_p_keep", ")", ",", "\n", "Transforms", ".", "Resampler", "(", "num_points", ")", ",", "\n", "Transforms", ".", "RandomJitter", "(", ")", ",", "\n", "Transforms", ".", "ShufflePoints", "(", ")", ",", "\n", "Transforms", ".", "ComputeCorrMat", "(", ")", ",", "\n", "Transforms", ".", "RandomTransformSE3_euler", "(", "rot_mag", "=", "rot_mag", ",", "trans_mag", "=", "trans_mag", ")", "]", "\n", "\n", "\n", "test_transforms", "=", "[", "Transforms", ".", "SetDeterministic", "(", ")", ",", "\n", "Transforms", ".", "SplitSourceRef", "(", ")", ",", "\n", "Transforms", ".", "RandomCrop", "(", "partial_p_keep", ")", ",", "\n", "Transforms", ".", "Resampler", "(", "num_points", ")", ",", "\n", "Transforms", ".", "RandomJitter", "(", ")", ",", "\n", "Transforms", ".", "ShufflePoints", "(", ")", ",", "\n", "Transforms", ".", "ComputeCorrMat", "(", ")", ",", "\n", "Transforms", ".", "RandomTransformSE3_euler", "(", "rot_mag", "=", "rot_mag", ",", "trans_mag", "=", "trans_mag", ")", "]", "\n", "\n", "\n", "", "elif", "noise_type", "==", "\"partial_identical\"", ":", "\n", "# partial source and full target pointclouds. Identical sampling: source points are a subset of target points.", "\n", "        ", "train_transforms", "=", "[", "Transforms", ".", "Resampler", "(", "num_points", ")", ",", "\n", "Transforms", ".", "SplitSourceRef", "(", ")", ",", "\n", "Transforms", ".", "RandomCrop", "(", "partial_p_keep", ")", ",", "\n", "Transforms", ".", "ShufflePoints", "(", ")", ",", "\n", "Transforms", ".", "ComputeCorrMat", "(", ")", ",", "\n", "Transforms", ".", "RandomTransformSE3_euler", "(", "rot_mag", "=", "rot_mag", ",", "trans_mag", "=", "trans_mag", ")", "]", "\n", "\n", "\n", "test_transforms", "=", "[", "Transforms", ".", "SetDeterministic", "(", ")", ",", "\n", "Transforms", ".", "Resampler", "(", "num_points", ")", ",", "\n", "Transforms", ".", "SplitSourceRef", "(", ")", ",", "\n", "Transforms", ".", "RandomCrop", "(", "partial_p_keep", ")", ",", "\n", "Transforms", ".", "ShufflePoints", "(", ")", ",", "\n", "Transforms", ".", "ComputeCorrMat", "(", ")", ",", "\n", "Transforms", ".", "RandomTransformSE3_euler", "(", "rot_mag", "=", "rot_mag", ",", "trans_mag", "=", "trans_mag", ")", "]", "\n", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n", "", "return", "train_transforms", ",", "test_transforms", "\n", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.common.torch.CheckPointManager.__init__": [[40, 61], ["os.path.dirname", "logging.getLogger", "os.path.join", "time.time", "os.makedirs", "torch.CheckPointManager._update_checkpoints_file", "ValueError", "float"], "methods", ["home.repos.pwc.inspect_result.tzodge_PCR-CMU.common.torch.CheckPointManager._update_checkpoints_file"], ["def", "__init__", "(", "self", ",", "save_path", ":", "str", "=", "None", ",", "max_to_keep", "=", "5", ",", "keep_checkpoint_every_n_hours", "=", "10000.0", ")", ":", "\n", "\n", "        ", "if", "max_to_keep", "<=", "0", ":", "\n", "            ", "raise", "ValueError", "(", "'max_to_keep must be at least 1'", ")", "\n", "\n", "", "self", ".", "_max_to_keep", "=", "max_to_keep", "\n", "self", ".", "_keep_checkpoint_every_n_hours", "=", "keep_checkpoint_every_n_hours", "\n", "\n", "self", ".", "_ckpt_dir", "=", "os", ".", "path", ".", "dirname", "(", "save_path", ")", "\n", "self", ".", "_save_path", "=", "save_path", "+", "'-{}.pth'", "if", "save_path", "is", "not", "None", "else", "None", "\n", "self", ".", "_logger", "=", "logging", ".", "getLogger", "(", "self", ".", "__class__", ".", "__name__", ")", "\n", "self", ".", "_checkpoints_fname", "=", "os", ".", "path", ".", "join", "(", "self", ".", "_ckpt_dir", ",", "'checkpoints.txt'", ")", "\n", "\n", "self", ".", "_checkpoints_permanent", "=", "[", "]", "# Will not be deleted", "\n", "self", ".", "_checkpoints_buffer", "=", "[", "]", "# Those which might still be deleted", "\n", "self", ".", "_next_save_time", "=", "time", ".", "time", "(", ")", "\n", "self", ".", "_best_score", "=", "-", "float", "(", "'inf'", ")", "\n", "self", ".", "_best_step", "=", "None", "\n", "\n", "os", ".", "makedirs", "(", "self", ".", "_ckpt_dir", ",", "exist_ok", "=", "True", ")", "\n", "self", ".", "_update_checkpoints_file", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.common.torch.CheckPointManager._save_checkpoint": [[62, 78], ["torch.CheckPointManager._save_path.format", "torch.save", "torch.CheckPointManager._logger.info", "torch.CheckPointManager._checkpoints_buffer.append", "model.state_dict", "optimizer.state_dict", "torch.CheckPointManager._save_path.format", "shutil.copyfile", "torch.CheckPointManager._logger.info", "time.time"], "methods", ["home.repos.pwc.inspect_result.tzodge_PCR-CMU.common.torch.CheckPointManager.save"], ["", "def", "_save_checkpoint", "(", "self", ",", "step", ",", "model", ",", "optimizer", ",", "score", ")", ":", "\n", "        ", "save_name", "=", "self", ".", "_save_path", ".", "format", "(", "step", ")", "\n", "state", "=", "{", "'state_dict'", ":", "model", ".", "state_dict", "(", ")", ",", "\n", "'optimizer'", ":", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "'step'", ":", "step", "}", "\n", "torch", ".", "save", "(", "state", ",", "save_name", ")", "\n", "self", ".", "_logger", ".", "info", "(", "'Saved checkpoint: {}'", ".", "format", "(", "save_name", ")", ")", "\n", "\n", "self", ".", "_checkpoints_buffer", ".", "append", "(", "(", "save_name", ",", "time", ".", "time", "(", ")", ")", ")", "\n", "\n", "if", "score", ">", "self", ".", "_best_score", ":", "\n", "            ", "best_save_name", "=", "self", ".", "_save_path", ".", "format", "(", "'best'", ")", "\n", "shutil", ".", "copyfile", "(", "save_name", ",", "best_save_name", ")", "\n", "self", ".", "_best_score", "=", "score", "\n", "self", ".", "_best_step", "=", "step", "\n", "self", ".", "_logger", ".", "info", "(", "'Checkpoint is current best, score={:.3g}'", ".", "format", "(", "self", ".", "_best_score", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.common.torch.CheckPointManager._remove_old_checkpoints": [[79, 88], ["len", "torch.CheckPointManager._checkpoints_buffer.pop", "torch.CheckPointManager._checkpoints_permanent.append", "os.remove"], "methods", ["None"], ["", "", "def", "_remove_old_checkpoints", "(", "self", ")", ":", "\n", "        ", "while", "len", "(", "self", ".", "_checkpoints_buffer", ")", ">", "self", ".", "_max_to_keep", ":", "\n", "            ", "to_remove", "=", "self", ".", "_checkpoints_buffer", ".", "pop", "(", "0", ")", "\n", "\n", "if", "to_remove", "[", "1", "]", ">", "self", ".", "_next_save_time", ":", "\n", "                ", "self", ".", "_checkpoints_permanent", ".", "append", "(", "to_remove", ")", "\n", "self", ".", "_next_save_time", "=", "to_remove", "[", "1", "]", "+", "self", ".", "_keep_checkpoint_every_n_hours", "*", "3600", "\n", "", "else", ":", "\n", "                ", "os", ".", "remove", "(", "to_remove", "[", "0", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.common.torch.CheckPointManager._update_checkpoints_file": [[89, 94], ["os.path.basename", "open", "fid.write", "fid.write"], "methods", ["None"], ["", "", "", "def", "_update_checkpoints_file", "(", "self", ")", ":", "\n", "        ", "checkpoints", "=", "[", "os", ".", "path", ".", "basename", "(", "c", "[", "0", "]", ")", "for", "c", "in", "self", ".", "_checkpoints_permanent", "+", "self", ".", "_checkpoints_buffer", "]", "\n", "with", "open", "(", "self", ".", "_checkpoints_fname", ",", "'w'", ")", "as", "fid", ":", "\n", "            ", "fid", ".", "write", "(", "'\\n'", ".", "join", "(", "checkpoints", ")", ")", "\n", "fid", ".", "write", "(", "'\\nBest step: {}'", ".", "format", "(", "self", ".", "_best_step", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.common.torch.CheckPointManager.save": [[95, 110], ["torch.CheckPointManager._save_checkpoint", "torch.CheckPointManager._remove_old_checkpoints", "torch.CheckPointManager._update_checkpoints_file", "AssertionError"], "methods", ["home.repos.pwc.inspect_result.tzodge_PCR-CMU.common.torch.CheckPointManager._save_checkpoint", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.common.torch.CheckPointManager._remove_old_checkpoints", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.common.torch.CheckPointManager._update_checkpoints_file"], ["", "", "def", "save", "(", "self", ",", "model", ":", "torch", ".", "nn", ".", "Module", ",", "optimizer", ":", "Optimizer", ",", "step", ":", "int", ",", "score", ":", "float", "=", "0.0", ")", ":", "\n", "        ", "\"\"\"Save model checkpoint to file\n\n        Args:\n            model: Torch model\n            optimizer: Torch optimizer\n            step (int): Step, model will be saved as model-[step].pth\n            score (float, optional): To determine which model is the best\n        \"\"\"", "\n", "if", "self", ".", "_save_path", "is", "None", ":", "\n", "            ", "raise", "AssertionError", "(", "'Checkpoint manager must be initialized with save path for save().'", ")", "\n", "\n", "", "self", ".", "_save_checkpoint", "(", "step", ",", "model", ",", "optimizer", ",", "score", ")", "\n", "self", ".", "_remove_old_checkpoints", "(", ")", "\n", "self", ".", "_update_checkpoints_file", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.common.torch.CheckPointManager.load": [[111, 136], ["os.path.isdir", "torch.load", "torch.CheckPointManager._logger.info", "os.path.join", "model.load_state_dict", "optimizer.load_state_dict"], "methods", ["home.repos.pwc.inspect_result.tzodge_PCR-CMU.common.torch.CheckPointManager.load"], ["", "def", "load", "(", "self", ",", "save_path", ",", "model", ":", "torch", ".", "nn", ".", "Module", "=", "None", ",", "optimizer", ":", "Optimizer", "=", "None", ")", ":", "\n", "        ", "\"\"\"Loads saved model from file\n\n        Args:\n            save_path: Path to saved model (.pth). If a directory is provided instead, model-best.pth is used\n            model: Torch model to restore weights to\n            optimizer: Optimizer\n        \"\"\"", "\n", "if", "os", ".", "path", ".", "isdir", "(", "save_path", ")", ":", "\n", "            ", "save_path", "=", "os", ".", "path", ".", "join", "(", "save_path", ",", "'model-best.pth'", ")", "\n", "\n", "", "state", "=", "torch", ".", "load", "(", "save_path", ")", "\n", "\n", "step", "=", "0", "\n", "if", "'step'", "in", "state", ":", "\n", "            ", "step", "=", "state", "[", "'step'", "]", "\n", "\n", "", "if", "'state_dict'", "in", "state", "and", "model", "is", "not", "None", ":", "\n", "            ", "model", ".", "load_state_dict", "(", "state", "[", "'state_dict'", "]", ")", "\n", "\n", "", "if", "'optimizer'", "in", "state", "and", "optimizer", "is", "not", "None", ":", "\n", "            ", "optimizer", ".", "load_state_dict", "(", "state", "[", "'optimizer'", "]", ")", "\n", "\n", "", "self", ".", "_logger", ".", "info", "(", "'Loaded models from {}'", ".", "format", "(", "save_path", ")", ")", "\n", "return", "step", "\n", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.common.torch.TorchDebugger.__enter__": [[140, 142], ["super().__enter__"], "methods", ["home.repos.pwc.inspect_result.tzodge_PCR-CMU.common.torch.TorchDebugger.__enter__"], ["def", "__enter__", "(", "self", ")", "->", "None", ":", "\n", "        ", "super", "(", ")", ".", "__enter__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.common.torch.TorchDebugger.__exit__": [[143, 150], ["super().__exit__", "isinstance", "traceback.print_tb", "print", "sys.gettrace", "pdb.set_trace"], "methods", ["home.repos.pwc.inspect_result.tzodge_PCR-CMU.common.torch.TorchDebugger.__exit__"], ["", "def", "__exit__", "(", "self", ",", "type", ",", "value", ",", "trace", ")", ":", "\n", "        ", "super", "(", ")", ".", "__exit__", "(", ")", "\n", "if", "isinstance", "(", "value", ",", "RuntimeError", ")", ":", "\n", "            ", "traceback", ".", "print_tb", "(", "trace", ")", "\n", "print", "(", "value", ")", "\n", "if", "sys", ".", "gettrace", "(", ")", "is", "None", ":", "\n", "                ", "pdb", ".", "set_trace", "(", ")", "\n", "", "", "", "", ""]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.common.torch.dict_all_to_device": [[17, 22], ["isinstance", "tensor_dict[].to"], "function", ["None"], ["def", "dict_all_to_device", "(", "tensor_dict", ",", "device", ")", ":", "\n", "    ", "\"\"\"Sends everything into a certain device \"\"\"", "\n", "for", "k", "in", "tensor_dict", ":", "\n", "        ", "if", "isinstance", "(", "tensor_dict", "[", "k", "]", ",", "torch", ".", "Tensor", ")", ":", "\n", "            ", "tensor_dict", "[", "k", "]", "=", "tensor_dict", "[", "k", "]", ".", "to", "(", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.common.torch.to_numpy": [[24, 32], ["isinstance", "tensor.detach().cpu().numpy", "isinstance", "tensor.detach().cpu", "tensor.detach"], "function", ["None"], ["", "", "", "def", "to_numpy", "(", "tensor", ")", ":", "\n", "    ", "\"\"\"Wrapper around .detach().cpu().numpy() \"\"\"", "\n", "if", "isinstance", "(", "tensor", ",", "torch", ".", "Tensor", ")", ":", "\n", "        ", "return", "tensor", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "elif", "isinstance", "(", "tensor", ",", "np", ".", "ndarray", ")", ":", "\n", "        ", "return", "tensor", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.common.misc.print_info": [[20, 45], ["_logger.info", "_logger.info", "git.Repo", "datetime.datetime.fromtimestamp().strftime", "_logger.info", "vars().items", "datetime.datetime.fromtimestamp", "git_message.strip", "open", "subprocess.run", "os.path.join", "vars"], "function", ["home.repos.pwc.inspect_result.tzodge_PCR-CMU.src.train.run"], ["def", "print_info", "(", "opt", ",", "log_dir", "=", "None", ")", ":", "\n", "    ", "\"\"\" Logs source code configuration\n    \"\"\"", "\n", "_logger", ".", "info", "(", "'Command: {}'", ".", "format", "(", "' '", ".", "join", "(", "sys", ".", "argv", ")", ")", ")", "\n", "\n", "# Print commit ID", "\n", "try", ":", "\n", "        ", "repo", "=", "git", ".", "Repo", "(", "search_parent_directories", "=", "True", ")", "\n", "git_sha", "=", "repo", ".", "head", ".", "object", ".", "hexsha", "\n", "git_date", "=", "datetime", ".", "fromtimestamp", "(", "repo", ".", "head", ".", "object", ".", "committed_date", ")", ".", "strftime", "(", "'%Y-%m-%d'", ")", "\n", "git_message", "=", "repo", ".", "head", ".", "object", ".", "message", "\n", "_logger", ".", "info", "(", "'Source is from Commit {} ({}): {}'", ".", "format", "(", "git_sha", "[", ":", "8", "]", ",", "git_date", ",", "git_message", ".", "strip", "(", ")", ")", ")", "\n", "\n", "# Also create diff file in the log directory", "\n", "if", "log_dir", "is", "not", "None", ":", "\n", "            ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "log_dir", ",", "'compareHead.diff'", ")", ",", "'w'", ")", "as", "fid", ":", "\n", "                ", "subprocess", ".", "run", "(", "[", "'git'", ",", "'diff'", "]", ",", "stdout", "=", "fid", ")", "\n", "\n", "", "", "", "except", "git", ".", "exc", ".", "InvalidGitRepositoryError", ":", "\n", "        ", "pass", "\n", "\n", "# Arguments", "\n", "", "arg_str", "=", "[", "'{}: {}'", ".", "format", "(", "key", ",", "value", ")", "for", "key", ",", "value", "in", "vars", "(", "opt", ")", ".", "items", "(", ")", "]", "\n", "arg_str", "=", "', '", ".", "join", "(", "arg_str", ")", "\n", "_logger", ".", "info", "(", "'Arguments: {}'", ".", "format", "(", "arg_str", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.common.misc.prepare_logger": [[47, 83], ["os.makedirs", "logging.getLogger", "coloredlogs.install", "logging.FileHandler", "logging.Formatter", "logging.FileHandler.setFormatter", "logging.getLogger.addHandler", "misc.print_info", "logging.getLogger.info", "shutil.rmtree", "datetime.datetime.now().strftime", "os.path.join", "os.path.join", "datetime.datetime.now"], "function", ["home.repos.pwc.inspect_result.tzodge_PCR-CMU.common.misc.print_info"], ["", "def", "prepare_logger", "(", "opt", ":", "argparse", ".", "Namespace", ",", "log_path", ":", "str", "=", "None", ")", ":", "\n", "    ", "\"\"\"Creates logging directory, and installs colorlogs\n\n    Args:\n        opt: Program arguments, should include --dev and --logdir flag.\n             See get_parent_parser()\n        log_path: Logging path (optional). This serves to overwrite the settings in\n                 argparse namespace\n\n    Returns:\n        logger (logging.Logger)\n        log_path (str): Logging directory\n    \"\"\"", "\n", "\n", "if", "log_path", "is", "None", ":", "\n", "        ", "if", "opt", ".", "dev", ":", "\n", "            ", "log_path", "=", "'../logdev'", "\n", "shutil", ".", "rmtree", "(", "log_path", ",", "ignore_errors", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "datetime_str", "=", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "'%y%m%d_%H%M%S'", ")", "\n", "if", "opt", ".", "name", "is", "not", "None", ":", "\n", "                ", "log_path", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "logdir", ",", "opt", ".", "name", ")", "\n", "", "else", ":", "\n", "                ", "log_path", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "logdir", ",", "datetime_str", ")", "\n", "\n", "", "", "", "os", ".", "makedirs", "(", "log_path", ",", "exist_ok", "=", "True", ")", "\n", "logger", "=", "logging", ".", "getLogger", "(", ")", "\n", "coloredlogs", ".", "install", "(", "level", "=", "'INFO'", ",", "logger", "=", "logger", ")", "\n", "file_handler", "=", "logging", ".", "FileHandler", "(", "'{}/log.txt'", ".", "format", "(", "log_path", ")", ")", "\n", "log_formatter", "=", "logging", ".", "Formatter", "(", "'%(asctime)s [%(levelname)s] %(name)s - %(message)s'", ")", "\n", "file_handler", ".", "setFormatter", "(", "log_formatter", ")", "\n", "logger", ".", "addHandler", "(", "file_handler", ")", "\n", "print_info", "(", "opt", ",", "log_path", ")", "\n", "logger", ".", "info", "(", "'Output and logs will be saved to {}'", ".", "format", "(", "log_path", ")", ")", "\n", "\n", "return", "logger", ",", "log_path", "\n", "", ""]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.math.so3.dcm2euler": [[9, 26], ["range", "numpy.stack", "scipy.spatial.transform.Rotation.from_dcm", "eulers.append", "Rotation.from_dcm.as_euler"], "function", ["None"], ["def", "dcm2euler", "(", "mats", ":", "np", ".", "ndarray", ",", "seq", ":", "str", "=", "'zyx'", ",", "degrees", ":", "bool", "=", "True", ")", ":", "\n", "    ", "\"\"\"Converts rotation matrix to euler angles\n\n    Args:\n        mats: (B, 3, 3) containing the B rotation matricecs\n        seq: Sequence of euler rotations (default: 'zyx')\n        degrees (bool): If true (default), will return in degrees instead of radians\n\n    Returns:\n\n    \"\"\"", "\n", "\n", "eulers", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "mats", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "r", "=", "Rotation", ".", "from_dcm", "(", "mats", "[", "i", "]", ")", "\n", "eulers", ".", "append", "(", "r", ".", "as_euler", "(", "seq", ",", "degrees", "=", "degrees", ")", ")", "\n", "", "return", "np", ".", "stack", "(", "eulers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.math.so3.transform": [[28, 42], ["rot.transpose"], "function", ["None"], ["", "def", "transform", "(", "g", ":", "np", ".", "ndarray", ",", "pts", ":", "np", ".", "ndarray", ")", ":", "\n", "    ", "\"\"\" Applies the SO3 transform\n\n    Args:\n        g: SO3 transformation matrix of size (3, 3)\n        pts: Points to be transformed (N, 3)\n\n    Returns:\n        transformed points of size (N, 3)\n\n    \"\"\"", "\n", "rot", "=", "g", "[", ":", "3", ",", ":", "3", "]", "# (3, 3)", "\n", "transformed", "=", "pts", "@", "rot", ".", "transpose", "(", ")", "\n", "return", "transformed", "\n", "", ""]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.math.random.uniform_2_sphere": [[5, 31], ["numpy.arccos", "numpy.cos", "numpy.stack", "numpy.random.uniform", "numpy.random.uniform", "numpy.random.uniform", "numpy.random.uniform", "numpy.sin", "numpy.cos", "numpy.sin", "numpy.sin"], "function", ["None"], ["def", "uniform_2_sphere", "(", "num", ":", "int", "=", "None", ")", ":", "\n", "    ", "\"\"\"Uniform sampling on a 2-sphere\n\n    Source: https://gist.github.com/andrewbolster/10274979\n\n    Args:\n        num: Number of vectors to sample (or None if single)\n\n    Returns:\n        Random Vector (np.ndarray) of size (num, 3) with norm 1.\n        If num is None returned value will have size (3,)\n\n    \"\"\"", "\n", "if", "num", "is", "not", "None", ":", "\n", "        ", "phi", "=", "np", ".", "random", ".", "uniform", "(", "0.0", ",", "2", "*", "np", ".", "pi", ",", "num", ")", "\n", "cos_theta", "=", "np", ".", "random", ".", "uniform", "(", "-", "1.0", ",", "1.0", ",", "num", ")", "\n", "", "else", ":", "\n", "        ", "phi", "=", "np", ".", "random", ".", "uniform", "(", "0.0", ",", "2", "*", "np", ".", "pi", ")", "\n", "cos_theta", "=", "np", ".", "random", ".", "uniform", "(", "-", "1.0", ",", "1.0", ")", "\n", "\n", "", "theta", "=", "np", ".", "arccos", "(", "cos_theta", ")", "\n", "x", "=", "np", ".", "sin", "(", "theta", ")", "*", "np", ".", "cos", "(", "phi", ")", "\n", "y", "=", "np", ".", "sin", "(", "theta", ")", "*", "np", ".", "sin", "(", "phi", ")", "\n", "z", "=", "np", ".", "cos", "(", "theta", ")", "\n", "\n", "return", "np", ".", "stack", "(", "(", "x", ",", "y", ",", "z", ")", ",", "axis", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.math.se3.identity": [[5, 7], ["numpy.eye"], "function", ["None"], ["def", "identity", "(", ")", ":", "\n", "    ", "return", "np", ".", "eye", "(", "3", ",", "4", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.math.se3.transform": [[9, 24], ["numpy.swapaxes"], "function", ["None"], ["", "def", "transform", "(", "g", ":", "np", ".", "ndarray", ",", "pts", ":", "np", ".", "ndarray", ")", ":", "\n", "    ", "\"\"\" Applies the SE3 transform\n\n    Args:\n        g: SE3 transformation matrix of size ([B,] 3/4, 4)\n        pts: Points to be transformed ([B,] N, 3)\n\n    Returns:\n        transformed points of size (N, 3)\n    \"\"\"", "\n", "rot", "=", "g", "[", "...", ",", ":", "3", ",", ":", "3", "]", "# (3, 3)", "\n", "trans", "=", "g", "[", "...", ",", ":", "3", ",", "3", "]", "# (3)", "\n", "\n", "transformed", "=", "pts", "[", "...", ",", ":", "3", "]", "@", "np", ".", "swapaxes", "(", "rot", ",", "-", "1", ",", "-", "2", ")", "+", "trans", "[", "...", ",", "None", ",", ":", "]", "\n", "return", "transformed", "\n", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.math.se3.inverse": [[26, 45], ["numpy.swapaxes", "numpy.concatenate", "numpy.concatenate"], "function", ["home.repos.pwc.inspect_result.tzodge_PCR-CMU.math_torch.se3.concatenate", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.math_torch.se3.concatenate"], ["", "def", "inverse", "(", "g", ":", "np", ".", "ndarray", ")", ":", "\n", "    ", "\"\"\"Returns the inverse of the SE3 transform\n\n    Args:\n        g: ([B,] 3/4, 4) transform\n\n    Returns:\n        ([B,] 3/4, 4) matrix containing the inverse\n\n    \"\"\"", "\n", "rot", "=", "g", "[", "...", ",", ":", "3", ",", ":", "3", "]", "# (3, 3)", "\n", "trans", "=", "g", "[", "...", ",", ":", "3", ",", "3", "]", "# (3)", "\n", "\n", "inv_rot", "=", "np", ".", "swapaxes", "(", "rot", ",", "-", "1", ",", "-", "2", ")", "\n", "inverse_transform", "=", "np", ".", "concatenate", "(", "[", "inv_rot", ",", "inv_rot", "@", "-", "trans", "[", "...", ",", "None", "]", "]", ",", "axis", "=", "-", "1", ")", "\n", "if", "g", ".", "shape", "[", "-", "2", "]", "==", "4", ":", "\n", "        ", "inverse_transform", "=", "np", ".", "concatenate", "(", "[", "inverse_transform", ",", "[", "[", "0.0", ",", "0.0", ",", "0.0", ",", "1.0", "]", "]", "]", ",", "axis", "=", "-", "2", ")", "\n", "\n", "", "return", "inverse_transform", "\n", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.math.se3.concatenate": [[47, 71], ["numpy.concatenate", "numpy.concatenate"], "function", ["home.repos.pwc.inspect_result.tzodge_PCR-CMU.math_torch.se3.concatenate", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.math_torch.se3.concatenate"], ["", "def", "concatenate", "(", "a", ":", "np", ".", "ndarray", ",", "b", ":", "np", ".", "ndarray", ")", ":", "\n", "    ", "\"\"\" Concatenate two SE3 transforms\n\n    Args:\n        a: First transform ([B,] 3/4, 4)\n        b: Second transform ([B,] 3/4, 4)\n\n    Returns:\n        a*b ([B, ] 3/4, 4)\n\n    \"\"\"", "\n", "\n", "r_a", ",", "t_a", "=", "a", "[", "...", ",", ":", "3", ",", ":", "3", "]", ",", "a", "[", "...", ",", ":", "3", ",", "3", "]", "\n", "r_b", ",", "t_b", "=", "b", "[", "...", ",", ":", "3", ",", ":", "3", "]", ",", "b", "[", "...", ",", ":", "3", ",", "3", "]", "\n", "\n", "r_ab", "=", "r_a", "@", "r_b", "\n", "t_ab", "=", "r_a", "@", "t_b", "[", "...", ",", "None", "]", "+", "t_a", "[", "...", ",", "None", "]", "\n", "\n", "concatenated", "=", "np", ".", "concatenate", "(", "[", "r_ab", ",", "t_ab", "]", ",", "axis", "=", "-", "1", ")", "\n", "\n", "if", "a", ".", "shape", "[", "-", "2", "]", "==", "4", ":", "\n", "        ", "concatenated", "=", "np", ".", "concatenate", "(", "[", "concatenated", ",", "[", "[", "0.0", ",", "0.0", ",", "0.0", ",", "1.0", "]", "]", "]", ",", "axis", "=", "-", "2", ")", "\n", "\n", "", "return", "concatenated", "\n", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.math.se3.from_xyzquat": [[73, 88], ["scipy.spatial.transform.Rotation.from_quat", "Rotation.from_quat.apply", "numpy.concatenate", "numpy.concatenate", "Rotation.from_quat.as_dcm"], "function", ["home.repos.pwc.inspect_result.tzodge_PCR-CMU.math_torch.se3.concatenate", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.math_torch.se3.concatenate"], ["", "def", "from_xyzquat", "(", "xyzquat", ")", ":", "\n", "    ", "\"\"\"Constructs SE3 matrix from x, y, z, qx, qy, qz, qw\n\n    Args:\n        xyzquat: np.array (7,) containing translation and quaterion\n\n    Returns:\n        SE3 matrix (4, 4)\n    \"\"\"", "\n", "rot", "=", "Rotation", ".", "from_quat", "(", "xyzquat", "[", "3", ":", "]", ")", "\n", "trans", "=", "rot", ".", "apply", "(", "-", "xyzquat", "[", ":", "3", "]", ")", "\n", "transform", "=", "np", ".", "concatenate", "(", "[", "rot", ".", "as_dcm", "(", ")", ",", "trans", "[", ":", ",", "None", "]", "]", ",", "axis", "=", "1", ")", "\n", "transform", "=", "np", ".", "concatenate", "(", "[", "transform", ",", "[", "[", "0.0", ",", "0.0", ",", "0.0", ",", "1.0", "]", "]", "]", ",", "axis", "=", "0", ")", "\n", "\n", "return", "transform", "", "", ""]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.math_torch.se3.identity": [[6, 8], ["[].repeat", "torch.eye"], "function", ["None"], ["    ", "return", "np", ".", "eye", "(", "3", ",", "4", ")", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.math_torch.se3.inverse": [[10, 26], ["torch.cat", "rot.transpose", "rot.transpose"], "function", ["None"], ["    ", "\"\"\" Applies the SE3 transform\n\n    Args:\n        g: SE3 transformation matrix of size ([B,] 3/4, 4)\n        pts: Points to be transformed ([B,] N, 3)\n\n    Returns:\n        transformed points of size (N, 3)\n    \"\"\"", "\n", "rot", "=", "g", "[", "...", ",", ":", "3", ",", ":", "3", "]", "# (3, 3)", "\n", "trans", "=", "g", "[", "...", ",", ":", "3", ",", "3", "]", "# (3)", "\n", "\n", "transformed", "=", "pts", "[", "...", ",", ":", "3", "]", "@", "np", ".", "swapaxes", "(", "rot", ",", "-", "1", ",", "-", "2", ")", "+", "trans", "[", "...", ",", "None", ",", ":", "]", "\n", "return", "transformed", "\n", "\n", "\n", "", "def", "inverse", "(", "g", ":", "np", ".", "ndarray", ")", ":", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.math_torch.se3.concatenate": [[28, 50], ["torch.cat"], "function", ["None"], ["\n", "rot", "=", "g", "[", "...", ",", ":", "3", ",", ":", "3", "]", "# (3, 3)", "\n", "trans", "=", "g", "[", "...", ",", ":", "3", ",", "3", "]", "# (3)", "\n", "\n", "inv_rot", "=", "np", ".", "swapaxes", "(", "rot", ",", "-", "1", ",", "-", "2", ")", "\n", "inverse_transform", "=", "np", ".", "concatenate", "(", "[", "inv_rot", ",", "inv_rot", "@", "-", "trans", "[", "...", ",", "None", "]", "]", ",", "axis", "=", "-", "1", ")", "\n", "if", "g", ".", "shape", "[", "-", "2", "]", "==", "4", ":", "\n", "        ", "inverse_transform", "=", "np", ".", "concatenate", "(", "[", "inverse_transform", ",", "[", "[", "0.0", ",", "0.0", ",", "0.0", ",", "1.0", "]", "]", "]", ",", "axis", "=", "-", "2", ")", "\n", "\n", "", "return", "inverse_transform", "\n", "\n", "\n", "", "def", "concatenate", "(", "a", ":", "np", ".", "ndarray", ",", "b", ":", "np", ".", "ndarray", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.math_torch.se3.transform": [[52, 79], ["len", "len", "g.size", "a.size", "torch.matmul", "R.matmul().squeeze", "R.transpose", "R.transpose", "R.matmul", "a.unsqueeze"], "function", ["None"], ["\n", "\n", "r_a", ",", "t_a", "=", "a", "[", "...", ",", ":", "3", ",", ":", "3", "]", ",", "a", "[", "...", ",", ":", "3", ",", "3", "]", "\n", "r_b", ",", "t_b", "=", "b", "[", "...", ",", ":", "3", ",", ":", "3", "]", ",", "b", "[", "...", ",", ":", "3", ",", "3", "]", "\n", "\n", "r_ab", "=", "r_a", "@", "r_b", "\n", "t_ab", "=", "r_a", "@", "t_b", "[", "...", ",", "None", "]", "+", "t_a", "[", "...", ",", "None", "]", "\n", "\n", "concatenated", "=", "np", ".", "concatenate", "(", "[", "r_ab", ",", "t_ab", "]", ",", "axis", "=", "-", "1", ")", "\n", "\n", "if", "a", ".", "shape", "[", "-", "2", "]", "==", "4", ":", "\n", "        ", "concatenated", "=", "np", ".", "concatenate", "(", "[", "concatenated", ",", "[", "[", "0.0", ",", "0.0", ",", "0.0", ",", "1.0", "]", "]", "]", ",", "axis", "=", "-", "2", ")", "\n", "\n", "", "return", "concatenated", "\n", "\n", "\n", "", "def", "from_xyzquat", "(", "xyzquat", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.PCRNet_Code.train_pcrnet.IOStream.__init__": [[50, 52], ["open"], "methods", ["None"], ["\t", "def", "__init__", "(", "self", ",", "path", ")", ":", "\n", "\t\t", "self", ".", "f", "=", "open", "(", "path", ",", "'a'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.PCRNet_Code.train_pcrnet.IOStream.cprint": [[53, 57], ["print", "train_pcrnet.IOStream.f.write", "train_pcrnet.IOStream.f.flush"], "methods", ["None"], ["", "def", "cprint", "(", "self", ",", "text", ")", ":", "\n", "\t\t", "print", "(", "text", ")", "\n", "self", ".", "f", ".", "write", "(", "text", "+", "'\\n'", ")", "\n", "self", ".", "f", ".", "flush", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.PCRNet_Code.train_pcrnet.IOStream.close": [[58, 60], ["train_pcrnet.IOStream.f.close"], "methods", ["home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.main.IOStream.close"], ["", "def", "close", "(", "self", ")", ":", "\n", "\t\t", "self", ".", "f", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.PCRNet_Code.train_pcrnet._init_": [[28, 37], ["os.system", "os.system", "os.path.exists", "os.makedirs", "os.path.exists", "os.makedirs", "os.path.exists", "os.makedirs"], "function", ["None"], ["def", "_init_", "(", "args", ")", ":", "\n", "\t", "if", "not", "os", ".", "path", ".", "exists", "(", "'checkpoints'", ")", ":", "\n", "\t\t", "os", ".", "makedirs", "(", "'checkpoints'", ")", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "'checkpoints/'", "+", "args", ".", "exp_name", ")", ":", "\n", "\t\t", "os", ".", "makedirs", "(", "'checkpoints/'", "+", "args", ".", "exp_name", ")", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "'checkpoints/'", "+", "args", ".", "exp_name", "+", "'/'", "+", "'models'", ")", ":", "\n", "\t\t", "os", ".", "makedirs", "(", "'checkpoints/'", "+", "args", ".", "exp_name", "+", "'/'", "+", "'models'", ")", "\n", "", "os", ".", "system", "(", "'cp main.py checkpoints'", "+", "'/'", "+", "args", ".", "exp_name", "+", "'/'", "+", "'main.py.backup'", ")", "\n", "os", ".", "system", "(", "'cp model.py checkpoints'", "+", "'/'", "+", "args", ".", "exp_name", "+", "'/'", "+", "'model.py.backup'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.PCRNet_Code.train_pcrnet.create_transformation": [[38, 48], ["torch.zeros", "torch.zeros", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat.to"], "function", ["None"], ["", "def", "create_transformation", "(", "rotation", ",", "translation", ")", ":", "\n", "# rotation: \t[Bx3x3]", "\n", "# translation:  [Bx3x1]", "\n", "\n", "\t", "B", "=", "rotation", ".", "shape", "[", "0", "]", "\n", "last_row", "=", "torch", ".", "zeros", "(", "B", ",", "1", ",", "4", ")", "\n", "last_row", "[", ":", ",", ":", ",", "3", "]", "=", "1", "\n", "T", "=", "torch", ".", "cat", "(", "[", "rotation", ",", "translation", "]", ",", "axis", "=", "2", ")", "\n", "T", "=", "torch", ".", "cat", "(", "[", "T", ",", "last_row", "]", ",", "axis", "=", "1", ")", "\n", "return", "T", ".", "to", "(", "rotation", ".", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.PCRNet_Code.train_pcrnet.test_one_epoch": [[61, 121], ["model.eval", "enumerate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "tqdm.tqdm", "template.to().float.to().float", "source.to().float.to().float", "rotation_ab.to().float.to().float", "translation_ab.to().float.to().float", "model", "output[].permute", "np.concatenate.append", "np.concatenate.append", "np.concatenate.append", "np.concatenate.append", "np.concatenate.append", "loss_val.item", "float", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.bmm().permute", "torch.bmm().permute", "rotation_ab.to().float.detach().cpu().numpy", "translation_ab.to().float.detach().cpu().numpy", "output[].permute.detach().cpu().numpy", "translation_ab_pred.view().detach().cpu().numpy", "euler_ab.numpy", "template.to().float.to", "source.to().float.to", "rotation_ab.to().float.to", "translation_ab.to().float.to", "losses.ChamferDistanceLoss", "train_pcrnet.create_transformation", "train_pcrnet.create_transformation", "torch.bmm", "torch.bmm", "rotation_ab.to().float.detach().cpu", "translation_ab.to().float.detach().cpu", "output[].permute.detach().cpu", "translation_ab_pred.view().detach().cpu", "losses.FrobeniusNormLoss", "output[].permute", "output[].permute", "rotation_ab.to().float.detach", "translation_ab.to().float.detach", "output[].permute.detach", "translation_ab_pred.view().detach", "translation_ab_pred.view"], "function", ["home.repos.pwc.inspect_result.tzodge_PCR-CMU.math_torch.se3.concatenate", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.math_torch.se3.concatenate", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.math_torch.se3.concatenate", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.math_torch.se3.concatenate", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.math_torch.se3.concatenate", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.PCRNet_Code.train_pcrnet.create_transformation", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.PCRNet_Code.train_pcrnet.create_transformation"], ["", "", "def", "test_one_epoch", "(", "device", ",", "model", ",", "test_loader", ")", ":", "\n", "\t", "model", ".", "eval", "(", ")", "\n", "test_loss", "=", "0.0", "\n", "pred", "=", "0.0", "\n", "count", "=", "0", "\n", "rotations_ab", "=", "[", "]", "\n", "translations_ab", "=", "[", "]", "\n", "rotations_ab_pred", "=", "[", "]", "\n", "translations_ab_pred", "=", "[", "]", "\n", "eulers_ab", "=", "[", "]", "\n", "\n", "for", "i", ",", "data", "in", "enumerate", "(", "tqdm", "(", "test_loader", ")", ")", ":", "\n", "# if i>5: break", "\n", "\t\t", "template", ",", "source", ",", "rotation_ab", ",", "translation_ab", ",", "euler_ab", "=", "data", "\n", "# source = rotation_ab * template + translation_ab", "\n", "\n", "template", "=", "template", ".", "to", "(", "device", ")", ".", "float", "(", ")", "\n", "source", "=", "source", ".", "to", "(", "device", ")", ".", "float", "(", ")", "\n", "rotation_ab", "=", "rotation_ab", ".", "to", "(", "device", ")", ".", "float", "(", ")", "\n", "translation_ab", "=", "translation_ab", ".", "to", "(", "device", ")", ".", "float", "(", ")", "\n", "# eulers_ab = eulers_ab.float()", "\n", "translation_ab", "=", "translation_ab", "-", "torch", ".", "mean", "(", "source", ",", "dim", "=", "1", ")", "\n", "\n", "# mean substraction", "\n", "source", "=", "source", "-", "torch", ".", "mean", "(", "source", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "template", "=", "template", "-", "torch", ".", "mean", "(", "template", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "\n", "output", "=", "model", "(", "template", ",", "source", ")", "\n", "\n", "# source = rotation_ab_pred*template + translation_ab_pred", "\n", "rotation_ba_pred", "=", "output", "[", "'est_R'", "]", "\n", "translation_ba_pred", "=", "output", "[", "'est_t'", "]", "\n", "rotation_ab_pred", "=", "output", "[", "'est_R'", "]", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "translation_ab_pred", "=", "-", "torch", ".", "bmm", "(", "output", "[", "'est_R'", "]", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ",", "output", "[", "'est_t'", "]", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "# -R^T * t", "\n", "\n", "rotations_ab", ".", "append", "(", "rotation_ab", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "translations_ab", ".", "append", "(", "translation_ab", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "rotations_ab_pred", ".", "append", "(", "rotation_ab_pred", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "translations_ab_pred", ".", "append", "(", "translation_ab_pred", ".", "view", "(", "-", "1", ",", "3", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "eulers_ab", ".", "append", "(", "euler_ab", ".", "numpy", "(", ")", ")", "\n", "\n", "try", ":", "\n", "\t\t\t", "loss_val", "=", "ChamferDistanceLoss", "(", ")", "(", "template", ",", "output", "[", "'transformed_source'", "]", ")", "\n", "", "except", ":", "\n", "\t\t\t", "igt", "=", "create_transformation", "(", "rotation_ab", ",", "translation_ab", ")", "\n", "predicted", "=", "create_transformation", "(", "rotation_ba_pred", ",", "translation_ba_pred", ")", "\n", "loss_val", "=", "FrobeniusNormLoss", "(", ")", "(", "predicted", ",", "igt", ")", "\n", "\n", "", "test_loss", "+=", "loss_val", ".", "item", "(", ")", "\n", "count", "+=", "1", "\n", "\n", "", "test_loss", "=", "float", "(", "test_loss", ")", "/", "count", "\n", "\n", "rotations_ab", "=", "np", ".", "concatenate", "(", "rotations_ab", ",", "axis", "=", "0", ")", "\n", "translations_ab", "=", "np", ".", "concatenate", "(", "translations_ab", ",", "axis", "=", "0", ")", "\n", "rotations_ab_pred", "=", "np", ".", "concatenate", "(", "rotations_ab_pred", ",", "axis", "=", "0", ")", "\n", "translations_ab_pred", "=", "np", ".", "concatenate", "(", "translations_ab_pred", ",", "axis", "=", "0", ")", "\n", "eulers_ab", "=", "np", ".", "concatenate", "(", "eulers_ab", ",", "axis", "=", "0", ")", "\n", "\n", "return", "test_loss", ",", "rotations_ab", ",", "translations_ab", ",", "rotations_ab_pred", ",", "translations_ab_pred", ",", "eulers_ab", "\n", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.PCRNet_Code.train_pcrnet.test": [[122, 142], ["train_pcrnet.test_one_epoch", "util.npmat2euler", "numpy.mean", "numpy.sqrt", "numpy.mean", "numpy.mean", "numpy.sqrt", "numpy.mean", "textio.cprint", "textio.cprint", "textio.cprint", "numpy.abs", "numpy.abs", "numpy.degrees", "numpy.degrees"], "function", ["home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.main.test_one_epoch", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.util.npmat2euler", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.main.IOStream.cprint", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.main.IOStream.cprint", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.main.IOStream.cprint"], ["", "def", "test", "(", "args", ",", "net", ",", "test_loader", ",", "textio", ")", ":", "\n", "\t", "test_loss", ",", "test_rotations_ab", ",", "test_translations_ab", ",", "test_rotations_ab_pred", ",", "test_translations_ab_pred", ",", "test_eulers_ab", "=", "test_one_epoch", "(", "args", ",", "net", ",", "test_loader", ")", "\n", "\n", "\n", "test_rotations_ab_pred_euler", "=", "npmat2euler", "(", "test_rotations_ab_pred", ")", "\n", "test_r_mse_ab", "=", "np", ".", "mean", "(", "(", "test_rotations_ab_pred_euler", "-", "np", ".", "degrees", "(", "test_eulers_ab", ")", ")", "**", "2", ")", "\n", "test_r_rmse_ab", "=", "np", ".", "sqrt", "(", "test_r_mse_ab", ")", "\n", "test_r_mae_ab", "=", "np", ".", "mean", "(", "np", ".", "abs", "(", "test_rotations_ab_pred_euler", "-", "np", ".", "degrees", "(", "test_eulers_ab", ")", ")", ")", "\n", "test_t_mse_ab", "=", "np", ".", "mean", "(", "(", "test_translations_ab", "-", "test_translations_ab_pred", ")", "**", "2", ")", "\n", "test_t_rmse_ab", "=", "np", ".", "sqrt", "(", "test_t_mse_ab", ")", "\n", "test_t_mae_ab", "=", "np", ".", "mean", "(", "np", ".", "abs", "(", "test_translations_ab", "-", "test_translations_ab_pred", ")", ")", "\n", "\n", "textio", ".", "cprint", "(", "'==FINAL TEST=='", ")", "\n", "textio", ".", "cprint", "(", "'A--------->B'", ")", "\n", "textio", ".", "cprint", "(", "'EPOCH:: %d, Loss: %f, rot_MSE: %f, rot_RMSE: %f, '", "\n", "'rot_MAE: %f, trans_MSE: %f, trans_RMSE: %f, trans_MAE: %f, Corr_Accuracy: %f'", "\n", "%", "(", "-", "1", ",", "test_loss", ",", "test_r_mse_ab", ",", "test_r_rmse_ab", ",", "\n", "test_r_mae_ab", ",", "test_t_mse_ab", ",", "test_t_rmse_ab", ",", "test_t_mae_ab", ",", "test_corr_accuracy", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.PCRNet_Code.train_pcrnet.train_one_epoch": [[143, 200], ["model.train", "enumerate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "tqdm.tqdm", "template.to().float.to().float", "source.to().float.to().float", "rotation_ab.to().float.to().float", "translation_ab.to().float.to().float", "model", "output[].permute", "np.concatenate.append", "np.concatenate.append", "np.concatenate.append", "np.concatenate.append", "np.concatenate.append", "optimizer.zero_grad", "loss_val.backward", "optimizer.step", "loss_val.item", "float", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.bmm().permute", "torch.bmm().permute", "rotation_ab.to().float.detach().cpu().numpy", "translation_ab.to().float.detach().cpu().numpy", "output[].permute.detach().cpu().numpy", "translation_ab_pred.view().detach().cpu().numpy", "euler_ab.numpy", "losses.ChamferDistanceLoss", "template.to().float.to", "source.to().float.to", "rotation_ab.to().float.to", "translation_ab.to().float.to", "torch.bmm", "torch.bmm", "rotation_ab.to().float.detach().cpu", "translation_ab.to().float.detach().cpu", "output[].permute.detach().cpu", "translation_ab_pred.view().detach().cpu", "output[].permute", "output[].permute", "rotation_ab.to().float.detach", "translation_ab.to().float.detach", "output[].permute.detach", "translation_ab_pred.view().detach", "translation_ab_pred.view"], "function", ["home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.main.train", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.math_torch.se3.concatenate", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.math_torch.se3.concatenate", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.math_torch.se3.concatenate", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.math_torch.se3.concatenate", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.math_torch.se3.concatenate", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.chamfer_distance.chamfer_distance.ChamferDistanceFunction.backward"], ["", "def", "train_one_epoch", "(", "device", ",", "model", ",", "train_loader", ",", "optimizer", ")", ":", "\n", "\t", "model", ".", "train", "(", ")", "\n", "train_loss", "=", "0.0", "\n", "pred", "=", "0.0", "\n", "count", "=", "0", "\n", "rotations_ab", "=", "[", "]", "\n", "translations_ab", "=", "[", "]", "\n", "rotations_ab_pred", "=", "[", "]", "\n", "translations_ab_pred", "=", "[", "]", "\n", "eulers_ab", "=", "[", "]", "\n", "\n", "for", "i", ",", "data", "in", "enumerate", "(", "tqdm", "(", "train_loader", ")", ")", ":", "\n", "# if i > 5: break", "\n", "\t\t", "template", ",", "source", ",", "rotation_ab", ",", "translation_ab", ",", "euler_ab", "=", "data", "\n", "# source = rotation_ab * template + translation_ab", "\n", "\n", "template", "=", "template", ".", "to", "(", "device", ")", ".", "float", "(", ")", "\n", "source", "=", "source", ".", "to", "(", "device", ")", ".", "float", "(", ")", "\n", "rotation_ab", "=", "rotation_ab", ".", "to", "(", "device", ")", ".", "float", "(", ")", "\n", "translation_ab", "=", "translation_ab", ".", "to", "(", "device", ")", ".", "float", "(", ")", "\n", "# eulers_ab = eulers_ab.float()", "\n", "translation_ab", "=", "translation_ab", "-", "torch", ".", "mean", "(", "source", ",", "dim", "=", "1", ")", "\n", "\n", "# mean substraction", "\n", "source", "=", "source", "-", "torch", ".", "mean", "(", "source", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "template", "=", "template", "-", "torch", ".", "mean", "(", "template", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "\n", "output", "=", "model", "(", "template", ",", "source", ")", "\n", "\n", "# source = rotation_ab_pred*template + translation_ab_pred", "\n", "rotation_ab_pred", "=", "output", "[", "'est_R'", "]", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "translation_ab_pred", "=", "-", "torch", ".", "bmm", "(", "output", "[", "'est_R'", "]", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ",", "output", "[", "'est_t'", "]", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "# -R^T * t", "\n", "\n", "rotations_ab", ".", "append", "(", "rotation_ab", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "translations_ab", ".", "append", "(", "translation_ab", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "rotations_ab_pred", ".", "append", "(", "rotation_ab_pred", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "translations_ab_pred", ".", "append", "(", "translation_ab_pred", ".", "view", "(", "-", "1", ",", "3", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "eulers_ab", ".", "append", "(", "euler_ab", ".", "numpy", "(", ")", ")", "\n", "\n", "loss_val", "=", "ChamferDistanceLoss", "(", ")", "(", "template", ",", "output", "[", "'transformed_source'", "]", ")", "\n", "\n", "# forward + backward + optimize", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss_val", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "train_loss", "+=", "loss_val", ".", "item", "(", ")", "\n", "count", "+=", "1", "\n", "\n", "", "train_loss", "=", "float", "(", "train_loss", ")", "/", "count", "\n", "rotations_ab", "=", "np", ".", "concatenate", "(", "rotations_ab", ",", "axis", "=", "0", ")", "\n", "translations_ab", "=", "np", ".", "concatenate", "(", "translations_ab", ",", "axis", "=", "0", ")", "\n", "rotations_ab_pred", "=", "np", ".", "concatenate", "(", "rotations_ab_pred", ",", "axis", "=", "0", ")", "\n", "translations_ab_pred", "=", "np", ".", "concatenate", "(", "translations_ab_pred", ",", "axis", "=", "0", ")", "\n", "eulers_ab", "=", "np", ".", "concatenate", "(", "eulers_ab", ",", "axis", "=", "0", ")", "\n", "\n", "return", "train_loss", ",", "rotations_ab", ",", "translations_ab", ",", "rotations_ab_pred", ",", "translations_ab_pred", ",", "eulers_ab", "\n", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.PCRNet_Code.train_pcrnet.train": [[201, 307], ["filter", "range", "model.parameters", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD.load_state_dict", "train_pcrnet.train_one_epoch", "train_pcrnet.test_one_epoch", "util.npmat2euler", "numpy.mean", "numpy.sqrt", "numpy.mean", "numpy.mean", "numpy.sqrt", "numpy.mean", "util.npmat2euler", "numpy.mean", "numpy.sqrt", "numpy.mean", "numpy.mean", "numpy.sqrt", "numpy.mean", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "boardio.add_scalar", "boardio.add_scalar", "boardio.add_scalar", "boardio.add_scalar", "boardio.add_scalar", "boardio.add_scalar", "boardio.add_scalar", "boardio.add_scalar", "boardio.add_scalar", "boardio.add_scalar", "boardio.add_scalar", "boardio.add_scalar", "boardio.add_scalar", "boardio.add_scalar", "boardio.add_scalar", "boardio.add_scalar", "boardio.add_scalar", "boardio.add_scalar", "boardio.add_scalar", "boardio.add_scalar", "boardio.add_scalar", "textio.cprint", "textio.cprint", "textio.cprint", "textio.cprint", "textio.cprint", "textio.cprint", "textio.cprint", "textio.cprint", "textio.cprint", "numpy.abs", "numpy.abs", "numpy.abs", "numpy.abs", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "model.state_dict", "model.feature_model.state_dict", "model.state_dict", "torch.optim.SGD.state_dict", "model.state_dict", "model.feature_model.state_dict", "numpy.degrees", "numpy.degrees", "numpy.degrees", "numpy.degrees"], "function", ["home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.main.train_one_epoch", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.main.test_one_epoch", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.util.npmat2euler", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.util.npmat2euler", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.common.torch.CheckPointManager.save", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.common.torch.CheckPointManager.save", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.common.torch.CheckPointManager.save", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.common.torch.CheckPointManager.save", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.common.torch.CheckPointManager.save", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.common.torch.CheckPointManager.save", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.main.IOStream.cprint", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.main.IOStream.cprint", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.main.IOStream.cprint", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.main.IOStream.cprint", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.main.IOStream.cprint", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.main.IOStream.cprint", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.main.IOStream.cprint", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.main.IOStream.cprint", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.main.IOStream.cprint", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.common.torch.CheckPointManager.save", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.common.torch.CheckPointManager.save", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.common.torch.CheckPointManager.save", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.common.torch.CheckPointManager.save", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.common.torch.CheckPointManager.save", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.common.torch.CheckPointManager.save"], ["", "def", "train", "(", "args", ",", "model", ",", "train_loader", ",", "test_loader", ",", "boardio", ",", "textio", ",", "checkpoint", ")", ":", "\n", "\t", "learnable_params", "=", "filter", "(", "lambda", "p", ":", "p", ".", "requires_grad", ",", "model", ".", "parameters", "(", ")", ")", "\n", "if", "args", ".", "optimizer", "==", "'Adam'", ":", "\n", "\t\t", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "learnable_params", ")", "\n", "", "else", ":", "\n", "\t\t", "optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "learnable_params", ",", "lr", "=", "0.1", ")", "\n", "\n", "", "if", "checkpoint", "is", "not", "None", ":", "\n", "\t\t", "min_loss", "=", "checkpoint", "[", "'min_loss'", "]", "\n", "optimizer", ".", "load_state_dict", "(", "checkpoint", "[", "'optimizer'", "]", ")", "\n", "\n", "", "best_test_loss", "=", "np", ".", "inf", "\n", "best_test_r_mse_ab", "=", "np", ".", "inf", "\n", "best_test_r_rmse_ab", "=", "np", ".", "inf", "\n", "best_test_r_mae_ab", "=", "np", ".", "inf", "\n", "best_test_t_mse_ab", "=", "np", ".", "inf", "\n", "best_test_t_rmse_ab", "=", "np", ".", "inf", "\n", "best_test_t_mae_ab", "=", "np", ".", "inf", "\n", "\n", "for", "epoch", "in", "range", "(", "args", ".", "start_epoch", ",", "args", ".", "epochs", ")", ":", "\n", "\t\t", "train_loss", ",", "train_rotations_ab", ",", "train_translations_ab", ",", "train_rotations_ab_pred", ",", "train_translations_ab_pred", ",", "train_eulers_ab", "=", "train_one_epoch", "(", "args", ".", "device", ",", "model", ",", "train_loader", ",", "optimizer", ")", "\n", "test_loss", ",", "test_rotations_ab", ",", "test_translations_ab", ",", "test_rotations_ab_pred", ",", "test_translations_ab_pred", ",", "test_eulers_ab", "=", "test_one_epoch", "(", "args", ".", "device", ",", "model", ",", "test_loader", ")", "\n", "\n", "train_rotations_ab_pred_euler", "=", "npmat2euler", "(", "train_rotations_ab_pred", ")", "\n", "train_r_mse_ab", "=", "np", ".", "mean", "(", "(", "train_rotations_ab_pred_euler", "-", "np", ".", "degrees", "(", "train_eulers_ab", ")", ")", "**", "2", ")", "\n", "train_r_rmse_ab", "=", "np", ".", "sqrt", "(", "train_r_mse_ab", ")", "\n", "train_r_mae_ab", "=", "np", ".", "mean", "(", "np", ".", "abs", "(", "train_rotations_ab_pred_euler", "-", "np", ".", "degrees", "(", "train_eulers_ab", ")", ")", ")", "\n", "train_t_mse_ab", "=", "np", ".", "mean", "(", "(", "train_translations_ab", "-", "train_translations_ab_pred", ")", "**", "2", ")", "\n", "train_t_rmse_ab", "=", "np", ".", "sqrt", "(", "train_t_mse_ab", ")", "\n", "train_t_mae_ab", "=", "np", ".", "mean", "(", "np", ".", "abs", "(", "train_translations_ab", "-", "train_translations_ab_pred", ")", ")", "\n", "\n", "test_rotations_ab_pred_euler", "=", "npmat2euler", "(", "test_rotations_ab_pred", ")", "\n", "test_r_mse_ab", "=", "np", ".", "mean", "(", "(", "test_rotations_ab_pred_euler", "-", "np", ".", "degrees", "(", "test_eulers_ab", ")", ")", "**", "2", ")", "\n", "test_r_rmse_ab", "=", "np", ".", "sqrt", "(", "test_r_mse_ab", ")", "\n", "test_r_mae_ab", "=", "np", ".", "mean", "(", "np", ".", "abs", "(", "test_rotations_ab_pred_euler", "-", "np", ".", "degrees", "(", "test_eulers_ab", ")", ")", ")", "\n", "test_t_mse_ab", "=", "np", ".", "mean", "(", "(", "test_translations_ab", "-", "test_translations_ab_pred", ")", "**", "2", ")", "\n", "test_t_rmse_ab", "=", "np", ".", "sqrt", "(", "test_t_mse_ab", ")", "\n", "test_t_mae_ab", "=", "np", ".", "mean", "(", "np", ".", "abs", "(", "test_translations_ab", "-", "test_translations_ab_pred", ")", ")", "\n", "\n", "if", "test_loss", "<", "best_test_loss", ":", "\n", "\t\t\t", "best_test_loss", "=", "test_loss", "\n", "best_test_r_mse_ab", "=", "test_r_mse_ab", "\n", "best_test_r_rmse_ab", "=", "test_r_rmse_ab", "\n", "best_test_r_mae_ab", "=", "test_r_mae_ab", "\n", "\n", "best_test_t_mse_ab", "=", "test_t_mse_ab", "\n", "best_test_t_rmse_ab", "=", "test_t_rmse_ab", "\n", "best_test_t_mae_ab", "=", "test_t_mae_ab", "\n", "\n", "snap", "=", "{", "'epoch'", ":", "epoch", "+", "1", ",", "\n", "'model'", ":", "model", ".", "state_dict", "(", ")", ",", "\n", "'min_loss'", ":", "best_test_loss", ",", "\n", "'optimizer'", ":", "optimizer", ".", "state_dict", "(", ")", ",", "}", "\n", "torch", ".", "save", "(", "snap", ",", "'checkpoints/%s/models/best_model_snap.t7'", "%", "(", "args", ".", "exp_name", ")", ")", "\n", "torch", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "'checkpoints/%s/models/model.best.t7'", "%", "(", "args", ".", "exp_name", ")", ")", "\n", "torch", ".", "save", "(", "model", ".", "feature_model", ".", "state_dict", "(", ")", ",", "'checkpoints/%s/models/best_ptnet_model.t7'", "%", "(", "args", ".", "exp_name", ")", ")", "\n", "\n", "", "torch", ".", "save", "(", "snap", ",", "'checkpoints/%s/models/model_snap.t7'", "%", "(", "args", ".", "exp_name", ")", ")", "\n", "torch", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "'checkpoints/%s/models/model.t7'", "%", "(", "args", ".", "exp_name", ")", ")", "\n", "torch", ".", "save", "(", "model", ".", "feature_model", ".", "state_dict", "(", ")", ",", "'checkpoints/%s/models/ptnet_model.t7'", "%", "(", "args", ".", "exp_name", ")", ")", "\n", "\n", "boardio", ".", "add_scalar", "(", "'Train Loss'", ",", "train_loss", ",", "epoch", ")", "\n", "boardio", ".", "add_scalar", "(", "'Test Loss'", ",", "test_loss", ",", "epoch", ")", "\n", "boardio", ".", "add_scalar", "(", "'Best Test Loss'", ",", "best_test_loss", ",", "epoch", ")", "\n", "\n", "boardio", ".", "add_scalar", "(", "'A->B/train/rotation/MSE'", ",", "train_r_mse_ab", ",", "epoch", ")", "\n", "boardio", ".", "add_scalar", "(", "'A->B/train/rotation/RMSE'", ",", "train_r_rmse_ab", ",", "epoch", ")", "\n", "boardio", ".", "add_scalar", "(", "'A->B/train/rotation/MAE'", ",", "train_r_mae_ab", ",", "epoch", ")", "\n", "boardio", ".", "add_scalar", "(", "'A->B/train/translation/MSE'", ",", "train_t_mse_ab", ",", "epoch", ")", "\n", "boardio", ".", "add_scalar", "(", "'A->B/train/translation/RMSE'", ",", "train_t_rmse_ab", ",", "epoch", ")", "\n", "boardio", ".", "add_scalar", "(", "'A->B/train/translation/MAE'", ",", "train_t_mae_ab", ",", "epoch", ")", "\n", "\n", "boardio", ".", "add_scalar", "(", "'A->B/test/rotation/MSE'", ",", "test_r_mse_ab", ",", "epoch", ")", "\n", "boardio", ".", "add_scalar", "(", "'A->B/test/rotation/RMSE'", ",", "test_r_rmse_ab", ",", "epoch", ")", "\n", "boardio", ".", "add_scalar", "(", "'A->B/test/rotation/MAE'", ",", "test_r_mae_ab", ",", "epoch", ")", "\n", "boardio", ".", "add_scalar", "(", "'A->B/test/translation/MSE'", ",", "test_t_mse_ab", ",", "epoch", ")", "\n", "boardio", ".", "add_scalar", "(", "'A->B/test/translation/RMSE'", ",", "test_t_rmse_ab", ",", "epoch", ")", "\n", "boardio", ".", "add_scalar", "(", "'A->B/test/translation/MAE'", ",", "test_t_mae_ab", ",", "epoch", ")", "\n", "\n", "boardio", ".", "add_scalar", "(", "'A->B/best_test/rotation/MSE'", ",", "best_test_r_mse_ab", ",", "epoch", ")", "\n", "boardio", ".", "add_scalar", "(", "'A->B/best_test/rotation/RMSE'", ",", "best_test_r_rmse_ab", ",", "epoch", ")", "\n", "boardio", ".", "add_scalar", "(", "'A->B/best_test/rotation/MAE'", ",", "best_test_r_mae_ab", ",", "epoch", ")", "\n", "boardio", ".", "add_scalar", "(", "'A->B/best_test/translation/MSE'", ",", "best_test_t_mse_ab", ",", "epoch", ")", "\n", "boardio", ".", "add_scalar", "(", "'A->B/best_test/translation/RMSE'", ",", "best_test_t_rmse_ab", ",", "epoch", ")", "\n", "boardio", ".", "add_scalar", "(", "'A->B/best_test/translation/MAE'", ",", "best_test_t_mae_ab", ",", "epoch", ")", "\n", "\n", "textio", ".", "cprint", "(", "'==TRAIN=='", ")", "\n", "textio", ".", "cprint", "(", "'A--------->B'", ")", "\n", "textio", ".", "cprint", "(", "'EPOCH:: %d, Loss: %f, rot_MSE: %f, rot_RMSE: %f, '", "\n", "'rot_MAE: %f, trans_MSE: %f, trans_RMSE: %f, trans_MAE: %f'", "\n", "%", "(", "epoch", ",", "train_loss", ",", "train_r_mse_ab", ",", "\n", "train_r_rmse_ab", ",", "train_r_mae_ab", ",", "train_t_mse_ab", ",", "train_t_rmse_ab", ",", "train_t_mae_ab", ")", ")", "\n", "\n", "textio", ".", "cprint", "(", "'==TEST=='", ")", "\n", "textio", ".", "cprint", "(", "'A--------->B'", ")", "\n", "textio", ".", "cprint", "(", "'EPOCH:: %d, Loss: %f, rot_MSE: %f, rot_RMSE: %f, '", "\n", "'rot_MAE: %f, trans_MSE: %f, trans_RMSE: %f, trans_MAE: %f'", "\n", "%", "(", "epoch", ",", "test_loss", ",", "test_r_mse_ab", ",", "\n", "test_r_rmse_ab", ",", "test_r_mae_ab", ",", "test_t_mse_ab", ",", "test_t_rmse_ab", ",", "test_t_mae_ab", ")", ")", "\n", "\n", "textio", ".", "cprint", "(", "'==BEST TEST=='", ")", "\n", "textio", ".", "cprint", "(", "'A--------->B'", ")", "\n", "textio", ".", "cprint", "(", "'EPOCH:: %d, Loss: %f, rot_MSE: %f, rot_RMSE: %f, '", "\n", "'rot_MAE: %f, trans_MSE: %f, trans_RMSE: %f, trans_MAE: %f'", "\n", "%", "(", "epoch", ",", "best_test_loss", ",", "best_test_r_mse_ab", ",", "best_test_r_rmse_ab", ",", "\n", "best_test_r_mae_ab", ",", "best_test_t_mse_ab", ",", "best_test_t_rmse_ab", ",", "best_test_t_mae_ab", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.PCRNet_Code.train_pcrnet.options": [[309, 353], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["None"], ["", "", "def", "options", "(", ")", ":", "\n", "\t", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Point Cloud Registration'", ")", "\n", "parser", ".", "add_argument", "(", "'--exp_name'", ",", "type", "=", "str", ",", "default", "=", "'exp_ipcrnet_pts100_factor1'", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'Name of the experiment'", ")", "\n", "parser", ".", "add_argument", "(", "'--eval'", ",", "type", "=", "bool", ",", "default", "=", "False", ",", "help", "=", "'Train or Evaluate the network.'", ")", "\n", "\n", "# settings for input data", "\n", "parser", ".", "add_argument", "(", "'--dataset_type'", ",", "default", "=", "'modelnet'", ",", "choices", "=", "[", "'modelnet'", ",", "'shapenet2'", "]", ",", "\n", "metavar", "=", "'DATASET'", ",", "help", "=", "'dataset type (default: modelnet)'", ")", "\n", "parser", ".", "add_argument", "(", "'--num_points'", ",", "default", "=", "100", ",", "type", "=", "int", ",", "\n", "metavar", "=", "'N'", ",", "help", "=", "'points in point-cloud (default: 1024)'", ")", "\n", "parser", ".", "add_argument", "(", "'--gaussian_noise'", ",", "default", "=", "False", ",", "type", "=", "bool", ")", "\n", "parser", ".", "add_argument", "(", "'--unseen'", ",", "default", "=", "False", ",", "type", "=", "bool", ")", "\n", "parser", ".", "add_argument", "(", "'--factor'", ",", "default", "=", "4", ",", "type", "=", "int", ")", "\n", "\n", "# settings for PointNet", "\n", "parser", ".", "add_argument", "(", "'--pointnet'", ",", "default", "=", "'tune'", ",", "type", "=", "str", ",", "choices", "=", "[", "'fixed'", ",", "'tune'", "]", ",", "\n", "help", "=", "'train pointnet (default: tune)'", ")", "\n", "parser", ".", "add_argument", "(", "'--emb_dims'", ",", "default", "=", "1024", ",", "type", "=", "int", ",", "\n", "metavar", "=", "'K'", ",", "help", "=", "'dim. of the feature vector (default: 1024)'", ")", "\n", "parser", ".", "add_argument", "(", "'--symfn'", ",", "default", "=", "'max'", ",", "choices", "=", "[", "'max'", ",", "'avg'", "]", ",", "\n", "help", "=", "'symmetric function (default: max)'", ")", "\n", "\n", "# settings for on training", "\n", "parser", ".", "add_argument", "(", "'--seed'", ",", "type", "=", "int", ",", "default", "=", "1234", ")", "\n", "parser", ".", "add_argument", "(", "'-j'", ",", "'--workers'", ",", "default", "=", "4", ",", "type", "=", "int", ",", "\n", "metavar", "=", "'N'", ",", "help", "=", "'number of data loading workers (default: 4)'", ")", "\n", "parser", ".", "add_argument", "(", "'-b'", ",", "'--batch_size'", ",", "default", "=", "32", ",", "type", "=", "int", ",", "\n", "metavar", "=", "'N'", ",", "help", "=", "'mini-batch size (default: 32)'", ")", "\n", "parser", ".", "add_argument", "(", "'--epochs'", ",", "default", "=", "200", ",", "type", "=", "int", ",", "\n", "metavar", "=", "'N'", ",", "help", "=", "'number of total epochs to run'", ")", "\n", "parser", ".", "add_argument", "(", "'--start_epoch'", ",", "default", "=", "0", ",", "type", "=", "int", ",", "\n", "metavar", "=", "'N'", ",", "help", "=", "'manual epoch number (useful on restarts)'", ")", "\n", "parser", ".", "add_argument", "(", "'--optimizer'", ",", "default", "=", "'Adam'", ",", "choices", "=", "[", "'Adam'", ",", "'SGD'", "]", ",", "\n", "metavar", "=", "'METHOD'", ",", "help", "=", "'name of an optimizer (default: Adam)'", ")", "\n", "parser", ".", "add_argument", "(", "'--resume'", ",", "default", "=", "''", ",", "type", "=", "str", ",", "\n", "metavar", "=", "'PATH'", ",", "help", "=", "'path to latest checkpoint (default: null (no-use))'", ")", "\n", "parser", ".", "add_argument", "(", "'--pretrained'", ",", "default", "=", "''", ",", "type", "=", "str", ",", "\n", "metavar", "=", "'PATH'", ",", "help", "=", "'path to pretrained model file (default: null (no-use))'", ")", "\n", "parser", ".", "add_argument", "(", "'--device'", ",", "default", "=", "'cuda:0'", ",", "type", "=", "str", ",", "\n", "metavar", "=", "'DEVICE'", ",", "help", "=", "'use CUDA if available'", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.PCRNet_Code.train_pcrnet.main": [[354, 403], ["train_pcrnet.options", "torch.manual_seed", "torch.manual_seed", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "numpy.random.seed", "tensorboardX.SummaryWriter", "train_pcrnet._init_", "train_pcrnet.IOStream", "train_pcrnet.IOStream.cprint", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.device", "torch.device", "model.PointNet", "model.iPCRNet", "model.to.to", "model.to.to", "str", "data.ModelNet40", "data.ModelNet40", "torch.cuda.is_available", "torch.cuda.is_available", "os.path.isfile", "torch.load", "torch.load", "model.to.load_state_dict", "os.path.isfile", "model.to.load_state_dict", "train_pcrnet.test", "train_pcrnet.train", "torch.load", "torch.load"], "function", ["home.repos.pwc.inspect_result.tzodge_PCR-CMU.PCRNet_Code.train_pcrnet.options", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.main._init_", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.main.IOStream.cprint", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.common.torch.CheckPointManager.load", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.common.torch.CheckPointManager.load", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.main.test", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.main.train", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.common.torch.CheckPointManager.load", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.common.torch.CheckPointManager.load"], ["", "def", "main", "(", ")", ":", "\n", "\t", "args", "=", "options", "(", ")", "\n", "\n", "torch", ".", "backends", ".", "cudnn", ".", "deterministic", "=", "True", "\n", "torch", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "args", ".", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "args", ".", "seed", ")", "\n", "\n", "boardio", "=", "SummaryWriter", "(", "log_dir", "=", "'checkpoints/'", "+", "args", ".", "exp_name", ")", "\n", "_init_", "(", "args", ")", "\n", "\n", "textio", "=", "IOStream", "(", "'checkpoints/'", "+", "args", ".", "exp_name", "+", "'/run.log'", ")", "\n", "textio", ".", "cprint", "(", "str", "(", "args", ")", ")", "\n", "\n", "\n", "train_loader", "=", "DataLoader", "(", "\n", "ModelNet40", "(", "num_points", "=", "args", ".", "num_points", ",", "partition", "=", "'train'", ",", "gaussian_noise", "=", "args", ".", "gaussian_noise", ",", "\n", "unseen", "=", "args", ".", "unseen", ",", "factor", "=", "args", ".", "factor", ",", "method", "=", "'pcrnet'", ")", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "True", ",", "drop_last", "=", "True", ",", "num_workers", "=", "6", ")", "\n", "test_loader", "=", "DataLoader", "(", "\n", "ModelNet40", "(", "num_points", "=", "args", ".", "num_points", ",", "partition", "=", "'test'", ",", "gaussian_noise", "=", "args", ".", "gaussian_noise", ",", "\n", "unseen", "=", "args", ".", "unseen", ",", "factor", "=", "args", ".", "factor", ",", "method", "=", "'pcrnet'", ")", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "False", ",", "drop_last", "=", "False", ",", "num_workers", "=", "6", ")", "\n", "\n", "if", "not", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "\t\t", "args", ".", "device", "=", "'cpu'", "\n", "", "args", ".", "device", "=", "torch", ".", "device", "(", "args", ".", "device", ")", "\n", "\n", "# Create PointNet Model.", "\n", "ptnet", "=", "PointNet", "(", "emb_dims", "=", "args", ".", "emb_dims", ")", "\n", "model", "=", "iPCRNet", "(", "feature_model", "=", "ptnet", ")", "\n", "model", "=", "model", ".", "to", "(", "args", ".", "device", ")", "\n", "\n", "checkpoint", "=", "None", "\n", "if", "args", ".", "resume", ":", "\n", "\t\t", "assert", "os", ".", "path", ".", "isfile", "(", "args", ".", "resume", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "args", ".", "resume", ")", "\n", "args", ".", "start_epoch", "=", "checkpoint", "[", "'epoch'", "]", "\n", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'model'", "]", ")", "\n", "\n", "", "if", "args", ".", "pretrained", ":", "\n", "\t\t", "assert", "os", ".", "path", ".", "isfile", "(", "args", ".", "pretrained", ")", "\n", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "args", ".", "pretrained", ",", "map_location", "=", "'cpu'", ")", ")", "\n", "", "model", ".", "to", "(", "args", ".", "device", ")", "\n", "\n", "if", "args", ".", "eval", ":", "\n", "\t\t", "test", "(", "args", ",", "model", ",", "test_loader", ",", "textio", ")", "\n", "", "else", ":", "\n", "\t\t", "train", "(", "args", ",", "model", ",", "train_loader", ",", "test_loader", ",", "boardio", ",", "textio", ",", "checkpoint", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.PCRNet_Code.train_pcrnet_corr.IOStream.__init__": [[26, 28], ["open"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "path", ")", ":", "\n", "        ", "self", ".", "f", "=", "open", "(", "path", ",", "'a'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.PCRNet_Code.train_pcrnet_corr.IOStream.cprint": [[29, 33], ["print", "train_pcrnet_corr.IOStream.f.write", "train_pcrnet_corr.IOStream.f.flush"], "methods", ["None"], ["", "def", "cprint", "(", "self", ",", "text", ")", ":", "\n", "        ", "print", "(", "text", ")", "\n", "self", ".", "f", ".", "write", "(", "text", "+", "'\\n'", ")", "\n", "self", ".", "f", ".", "flush", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.PCRNet_Code.train_pcrnet_corr.IOStream.close": [[34, 36], ["train_pcrnet_corr.IOStream.f.close"], "methods", ["home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.main.IOStream.close"], ["", "def", "close", "(", "self", ")", ":", "\n", "        ", "self", ".", "f", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.PCRNet_Code.train_pcrnet_corr.CorrLoss.forward": [[51, 56], ["torch.nn.functional.cross_entropy", "torch.nn.functional.cross_entropy", "torch.nn.functional.cross_entropy", "torch.nn.functional.cross_entropy", "torch.nn.functional.cross_entropy", "torch.nn.functional.cross_entropy", "torch.nn.functional.cross_entropy", "torch.nn.functional.cross_entropy", "torch.nn.functional.cross_entropy", "torch.nn.functional.cross_entropy", "torch.nn.functional.cross_entropy", "torch.nn.functional.cross_entropy", "torch.nn.functional.cross_entropy", "torch.nn.functional.cross_entropy", "torch.nn.functional.cross_entropy", "torch.nn.functional.cross_entropy", "corr_mat_pred.view", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "corr_mat.transpose().reshape", "corr_mat.transpose"], "methods", ["None"], ["    ", "def", "forward", "(", "self", ",", "target", ",", "src", ",", "corr_mat_pred", ",", "corr_mat", ")", ":", "\n", "        ", "batch_size", ",", "_", ",", "num_points_target", "=", "target", ".", "shape", "\n", "_", ",", "_", ",", "num_points", "=", "src", ".", "shape", "\n", "return", "torch", ".", "nn", ".", "functional", ".", "cross_entropy", "(", "corr_mat_pred", ".", "view", "(", "batch_size", "*", "num_points", ",", "num_points_target", ")", ",", "\n", "torch", ".", "argmax", "(", "corr_mat", ".", "transpose", "(", "1", ",", "2", ")", ".", "reshape", "(", "-", "1", ",", "num_points_target", ")", ",", "axis", "=", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.PCRNet_Code.train_pcrnet_corr._init_": [[38, 48], ["os.system", "os.system", "os.system", "os.path.exists", "os.makedirs", "os.path.exists", "os.makedirs", "os.path.exists", "os.makedirs"], "function", ["None"], ["", "", "def", "_init_", "(", "args", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "exists", "(", "'checkpoints'", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "'checkpoints'", ")", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "'checkpoints/'", "+", "args", ".", "exp_name", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "'checkpoints/'", "+", "args", ".", "exp_name", ")", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "'checkpoints/'", "+", "args", ".", "exp_name", "+", "'/'", "+", "'models'", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "'checkpoints/'", "+", "args", ".", "exp_name", "+", "'/'", "+", "'models'", ")", "\n", "", "os", ".", "system", "(", "'cp main.py checkpoints'", "+", "'/'", "+", "args", ".", "exp_name", "+", "'/'", "+", "'main.py.backup'", ")", "\n", "os", ".", "system", "(", "'cp model.py checkpoints'", "+", "'/'", "+", "args", ".", "exp_name", "+", "'/'", "+", "'model.py.backup'", ")", "\n", "os", ".", "system", "(", "'cp data.py checkpoints'", "+", "'/'", "+", "args", ".", "exp_name", "+", "'/'", "+", "'data.py.backup'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.PCRNet_Code.train_pcrnet_corr.test_one_epoch": [[58, 168], ["net.eval", "tqdm.tqdm", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "src.cuda.cuda", "target.cuda.cuda", "rotation_ab.cuda.cuda", "translation_ab.cuda.cuda", "rotation_ba.cuda.cuda", "translation_ba.cuda.cuda", "gt_corr_mat.cuda.cuda", "src.cuda.size", "net", "raw_scores.detach().cpu().numpy", "numpy.argmax", "gt_corr_mat.cuda.detach().cpu().numpy", "numpy.argmax", "correct_mask.sum", "numpy.prod", "np.concatenate.append", "np.concatenate.append", "np.concatenate.append", "np.concatenate.append", "np.concatenate.append", "np.concatenate.append", "np.concatenate.append", "np.concatenate.append", "np.concatenate.append", "np.concatenate.append", "util.transform_point_cloud", "util.transform_point_cloud", "torch.eye().cuda().unsqueeze().repeat", "torch.eye().cuda().unsqueeze().repeat", "torch.eye().cuda().unsqueeze().repeat", "torch.eye().cuda().unsqueeze().repeat", "rotation_ab.cuda.detach().cpu().numpy", "translation_ab.cuda.detach().cpu().numpy", "rotation_ab_pred.detach().cpu().numpy", "translation_ab_pred.detach().cpu().numpy", "euler_ab.numpy", "rotation_ba.cuda.detach().cpu().numpy", "translation_ba.cuda.detach().cpu().numpy", "rotation_ba_pred.detach().cpu().numpy", "translation_ba_pred.detach().cpu().numpy", "euler_ba.numpy", "train_pcrnet_corr.CorrLoss", "torch.mse_loss", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "loss.item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "raw_scores.detach().cpu", "gt_corr_mat.cuda.detach().cpu", "torch.eye().cuda().unsqueeze", "torch.eye().cuda().unsqueeze", "torch.eye().cuda().unsqueeze", "torch.eye().cuda().unsqueeze", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.eye().cuda().unsqueeze().repeat.clone", "rotation_ab.cuda.detach().cpu", "translation_ab.cuda.detach().cpu", "rotation_ab_pred.detach().cpu", "translation_ab_pred.detach().cpu", "rotation_ba.cuda.detach().cpu", "translation_ba.cuda.detach().cpu", "rotation_ba_pred.detach().cpu", "translation_ba_pred.detach().cpu", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "raw_scores.detach", "gt_corr_mat.cuda.detach", "torch.eye().cuda", "torch.eye().cuda", "torch.eye().cuda", "torch.eye().cuda", "torch.matmul().view", "torch.matmul().view", "torch.matmul().view", "torch.matmul().view", "cycle_loss.item", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "rotation_ab.cuda.detach", "translation_ab.cuda.detach", "rotation_ab_pred.detach", "translation_ab_pred.detach", "rotation_ba.cuda.detach", "translation_ba.cuda.detach", "rotation_ba_pred.detach", "translation_ba_pred.detach", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "rotation_ba_pred.transpose", "translation_ab_pred.view"], "function", ["home.repos.pwc.inspect_result.tzodge_PCR-CMU.math_torch.se3.concatenate", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.math_torch.se3.concatenate", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.math_torch.se3.concatenate", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.math_torch.se3.concatenate", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.math_torch.se3.concatenate", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.math_torch.se3.concatenate", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.math_torch.se3.concatenate", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.math_torch.se3.concatenate", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.math_torch.se3.concatenate", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.math_torch.se3.concatenate", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.util.transform_point_cloud", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.util.transform_point_cloud"], ["", "", "def", "test_one_epoch", "(", "args", ",", "net", ",", "test_loader", ")", ":", "\n", "    ", "net", ".", "eval", "(", ")", "\n", "mse_ab", "=", "0", "\n", "mae_ab", "=", "0", "\n", "mse_ba", "=", "0", "\n", "mae_ba", "=", "0", "\n", "\n", "total_loss", "=", "0", "\n", "total_cycle_loss", "=", "0", "\n", "num_examples", "=", "0", "\n", "num_correct_corr", "=", "0", "\n", "num_total_corr", "=", "0", "\n", "\n", "rotations_ab", "=", "[", "]", "\n", "translations_ab", "=", "[", "]", "\n", "rotations_ab_pred", "=", "[", "]", "\n", "translations_ab_pred", "=", "[", "]", "\n", "\n", "rotations_ba", "=", "[", "]", "\n", "translations_ba", "=", "[", "]", "\n", "rotations_ba_pred", "=", "[", "]", "\n", "translations_ba_pred", "=", "[", "]", "\n", "\n", "eulers_ab", "=", "[", "]", "\n", "eulers_ba", "=", "[", "]", "\n", "\n", "for", "src", ",", "target", ",", "rotation_ab", ",", "translation_ab", ",", "rotation_ba", ",", "translation_ba", ",", "euler_ab", ",", "euler_ba", ",", "gt_corr_mat", "in", "tqdm", "(", "test_loader", ")", ":", "\n", "        ", "src", "=", "src", ".", "cuda", "(", ")", "\n", "target", "=", "target", ".", "cuda", "(", ")", "\n", "rotation_ab", "=", "rotation_ab", ".", "cuda", "(", ")", "\n", "translation_ab", "=", "translation_ab", ".", "cuda", "(", ")", "\n", "rotation_ba", "=", "rotation_ba", ".", "cuda", "(", ")", "\n", "translation_ba", "=", "translation_ba", ".", "cuda", "(", ")", "\n", "gt_corr_mat", "=", "gt_corr_mat", ".", "cuda", "(", ")", "\n", "\n", "batch_size", "=", "src", ".", "size", "(", "0", ")", "\n", "num_examples", "+=", "batch_size", "\n", "rotation_ab_pred", ",", "translation_ab_pred", ",", "rotation_ba_pred", ",", "translation_ba_pred", ",", "raw_scores", "=", "net", "(", "src", ",", "target", ")", "\n", "\n", "# accuracy in correspondences", "\n", "corr_mat_pred", "=", "raw_scores", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "# b,m,n    ", "\n", "col_idx_pred", "=", "np", ".", "argmax", "(", "corr_mat_pred", ",", "axis", "=", "-", "1", ")", "\n", "corr_mat_gt", "=", "gt_corr_mat", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "# b, m (scr), n (tgt)  ", "\n", "col_idx_gt", "=", "np", ".", "argmax", "(", "corr_mat_gt", ",", "axis", "=", "-", "1", ")", "\n", "correct_mask", "=", "col_idx_gt", "==", "col_idx_pred", "\n", "num_correct_corr", "+=", "correct_mask", ".", "sum", "(", ")", "\n", "num_total_corr", "+=", "np", ".", "prod", "(", "correct_mask", ".", "shape", ")", "\n", "\n", "## save rotation and translation", "\n", "rotations_ab", ".", "append", "(", "rotation_ab", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "translations_ab", ".", "append", "(", "translation_ab", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "rotations_ab_pred", ".", "append", "(", "rotation_ab_pred", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "translations_ab_pred", ".", "append", "(", "translation_ab_pred", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "eulers_ab", ".", "append", "(", "euler_ab", ".", "numpy", "(", ")", ")", "\n", "##", "\n", "rotations_ba", ".", "append", "(", "rotation_ba", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "translations_ba", ".", "append", "(", "translation_ba", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "rotations_ba_pred", ".", "append", "(", "rotation_ba_pred", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "translations_ba_pred", ".", "append", "(", "translation_ba_pred", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "eulers_ba", ".", "append", "(", "euler_ba", ".", "numpy", "(", ")", ")", "\n", "\n", "transformed_src", "=", "transform_point_cloud", "(", "src", ",", "rotation_ab_pred", ",", "translation_ab_pred", ")", "\n", "\n", "transformed_target", "=", "transform_point_cloud", "(", "target", ",", "rotation_ba_pred", ",", "translation_ba_pred", ")", "\n", "\n", "###########################", "\n", "identity", "=", "torch", ".", "eye", "(", "3", ")", ".", "cuda", "(", ")", ".", "unsqueeze", "(", "0", ")", ".", "repeat", "(", "batch_size", ",", "1", ",", "1", ")", "\n", "# loss = F.mse_loss(torch.matmul(rotation_ab_pred.transpose(2, 1), rotation_ab), identity) \\", "\n", "#        + F.mse_loss(translation_ab_pred, translation_ab)", "\n", "loss", "=", "CorrLoss", "(", ")", "(", "target", ",", "src", ",", "raw_scores", ",", "gt_corr_mat", ")", "\n", "if", "args", ".", "cycle", ":", "\n", "            ", "rotation_loss", "=", "F", ".", "mse_loss", "(", "torch", ".", "matmul", "(", "rotation_ba_pred", ",", "rotation_ab_pred", ")", ",", "identity", ".", "clone", "(", ")", ")", "\n", "translation_loss", "=", "torch", ".", "mean", "(", "(", "torch", ".", "matmul", "(", "rotation_ba_pred", ".", "transpose", "(", "2", ",", "1", ")", ",", "\n", "translation_ab_pred", ".", "view", "(", "batch_size", ",", "3", ",", "1", ")", ")", ".", "view", "(", "batch_size", ",", "3", ")", "\n", "+", "translation_ba_pred", ")", "**", "2", ",", "dim", "=", "[", "0", ",", "1", "]", ")", "\n", "cycle_loss", "=", "rotation_loss", "+", "translation_loss", "\n", "\n", "# loss = loss + cycle_loss * 0.1", "\n", "\n", "", "total_loss", "+=", "loss", ".", "item", "(", ")", "*", "batch_size", "\n", "\n", "if", "args", ".", "cycle", ":", "\n", "            ", "total_cycle_loss", "=", "total_cycle_loss", "+", "cycle_loss", ".", "item", "(", ")", "*", "0.1", "*", "batch_size", "\n", "\n", "", "mse_ab", "+=", "torch", ".", "mean", "(", "(", "transformed_src", "-", "target", ")", "**", "2", ",", "dim", "=", "[", "0", ",", "1", ",", "2", "]", ")", ".", "item", "(", ")", "*", "batch_size", "\n", "mae_ab", "+=", "torch", ".", "mean", "(", "torch", ".", "abs", "(", "transformed_src", "-", "target", ")", ",", "dim", "=", "[", "0", ",", "1", ",", "2", "]", ")", ".", "item", "(", ")", "*", "batch_size", "\n", "\n", "mse_ba", "+=", "torch", ".", "mean", "(", "(", "transformed_target", "-", "src", ")", "**", "2", ",", "dim", "=", "[", "0", ",", "1", ",", "2", "]", ")", ".", "item", "(", ")", "*", "batch_size", "\n", "mae_ba", "+=", "torch", ".", "mean", "(", "torch", ".", "abs", "(", "transformed_target", "-", "src", ")", ",", "dim", "=", "[", "0", ",", "1", ",", "2", "]", ")", ".", "item", "(", ")", "*", "batch_size", "\n", "\n", "", "rotations_ab", "=", "np", ".", "concatenate", "(", "rotations_ab", ",", "axis", "=", "0", ")", "\n", "translations_ab", "=", "np", ".", "concatenate", "(", "translations_ab", ",", "axis", "=", "0", ")", "\n", "rotations_ab_pred", "=", "np", ".", "concatenate", "(", "rotations_ab_pred", ",", "axis", "=", "0", ")", "\n", "translations_ab_pred", "=", "np", ".", "concatenate", "(", "translations_ab_pred", ",", "axis", "=", "0", ")", "\n", "\n", "rotations_ba", "=", "np", ".", "concatenate", "(", "rotations_ba", ",", "axis", "=", "0", ")", "\n", "translations_ba", "=", "np", ".", "concatenate", "(", "translations_ba", ",", "axis", "=", "0", ")", "\n", "rotations_ba_pred", "=", "np", ".", "concatenate", "(", "rotations_ba_pred", ",", "axis", "=", "0", ")", "\n", "translations_ba_pred", "=", "np", ".", "concatenate", "(", "translations_ba_pred", ",", "axis", "=", "0", ")", "\n", "\n", "eulers_ab", "=", "np", ".", "concatenate", "(", "eulers_ab", ",", "axis", "=", "0", ")", "\n", "eulers_ba", "=", "np", ".", "concatenate", "(", "eulers_ba", ",", "axis", "=", "0", ")", "\n", "\n", "corr_accuracy", "=", "(", "num_correct_corr", "/", "num_total_corr", ")", "*", "100", "\n", "\n", "return", "total_loss", "*", "1.0", "/", "num_examples", ",", "total_cycle_loss", "/", "num_examples", ",", "mse_ab", "*", "1.0", "/", "num_examples", ",", "mae_ab", "*", "1.0", "/", "num_examples", ",", "mse_ba", "*", "1.0", "/", "num_examples", ",", "mae_ba", "*", "1.0", "/", "num_examples", ",", "rotations_ab", ",", "translations_ab", ",", "rotations_ab_pred", ",", "translations_ab_pred", ",", "rotations_ba", ",", "translations_ba", ",", "rotations_ba_pred", ",", "translations_ba_pred", ",", "eulers_ab", ",", "eulers_ba", ",", "corr_accuracy", "\n", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.PCRNet_Code.train_pcrnet_corr.train_one_epoch": [[170, 283], ["net.train", "tqdm.tqdm", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "src.cuda.cuda", "target.cuda.cuda", "rotation_ab.cuda.cuda", "translation_ab.cuda.cuda", "rotation_ba.cuda.cuda", "translation_ba.cuda.cuda", "gt_corr_mat.cuda.cuda", "src.cuda.size", "opt.zero_grad", "net", "raw_scores.detach().cpu().numpy", "numpy.argmax", "gt_corr_mat.cuda.detach().cpu().numpy", "numpy.argmax", "correct_mask.sum", "numpy.prod", "np.concatenate.append", "np.concatenate.append", "np.concatenate.append", "np.concatenate.append", "np.concatenate.append", "np.concatenate.append", "np.concatenate.append", "np.concatenate.append", "np.concatenate.append", "np.concatenate.append", "util.transform_point_cloud", "util.transform_point_cloud", "torch.eye().cuda().unsqueeze().repeat", "torch.eye().cuda().unsqueeze().repeat", "torch.eye().cuda().unsqueeze().repeat", "torch.eye().cuda().unsqueeze().repeat", "loss.backward", "opt.step", "rotation_ab.cuda.detach().cpu().numpy", "translation_ab.cuda.detach().cpu().numpy", "rotation_ab_pred.detach().cpu().numpy", "translation_ab_pred.detach().cpu().numpy", "euler_ab.numpy", "rotation_ba.cuda.detach().cpu().numpy", "translation_ba.cuda.detach().cpu().numpy", "rotation_ba_pred.detach().cpu().numpy", "translation_ba_pred.detach().cpu().numpy", "euler_ba.numpy", "train_pcrnet_corr.CorrLoss", "torch.mse_loss", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "loss.item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "raw_scores.detach().cpu", "gt_corr_mat.cuda.detach().cpu", "torch.eye().cuda().unsqueeze", "torch.eye().cuda().unsqueeze", "torch.eye().cuda().unsqueeze", "torch.eye().cuda().unsqueeze", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.eye().cuda().unsqueeze().repeat.clone", "rotation_ab.cuda.detach().cpu", "translation_ab.cuda.detach().cpu", "rotation_ab_pred.detach().cpu", "translation_ab_pred.detach().cpu", "rotation_ba.cuda.detach().cpu", "translation_ba.cuda.detach().cpu", "rotation_ba_pred.detach().cpu", "translation_ba_pred.detach().cpu", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "raw_scores.detach", "gt_corr_mat.cuda.detach", "torch.eye().cuda", "torch.eye().cuda", "torch.eye().cuda", "torch.eye().cuda", "torch.matmul().view", "torch.matmul().view", "torch.matmul().view", "torch.matmul().view", "cycle_loss.item", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "rotation_ab.cuda.detach", "translation_ab.cuda.detach", "rotation_ab_pred.detach", "translation_ab_pred.detach", "rotation_ba.cuda.detach", "translation_ba.cuda.detach", "rotation_ba_pred.detach", "translation_ba_pred.detach", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "rotation_ba_pred.transpose", "translation_ab_pred.view"], "function", ["home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.main.train", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.math_torch.se3.concatenate", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.math_torch.se3.concatenate", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.math_torch.se3.concatenate", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.math_torch.se3.concatenate", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.math_torch.se3.concatenate", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.math_torch.se3.concatenate", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.math_torch.se3.concatenate", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.math_torch.se3.concatenate", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.math_torch.se3.concatenate", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.math_torch.se3.concatenate", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.util.transform_point_cloud", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.util.transform_point_cloud", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.chamfer_distance.chamfer_distance.ChamferDistanceFunction.backward"], ["", "def", "train_one_epoch", "(", "args", ",", "net", ",", "train_loader", ",", "opt", ")", ":", "\n", "    ", "net", ".", "train", "(", ")", "\n", "\n", "mse_ab", "=", "0", "\n", "mae_ab", "=", "0", "\n", "mse_ba", "=", "0", "\n", "mae_ba", "=", "0", "\n", "\n", "total_loss", "=", "0", "\n", "total_cycle_loss", "=", "0", "\n", "num_examples", "=", "0", "\n", "num_correct_corr", "=", "0", "\n", "num_total_corr", "=", "0", "\n", "\n", "rotations_ab", "=", "[", "]", "\n", "translations_ab", "=", "[", "]", "\n", "rotations_ab_pred", "=", "[", "]", "\n", "translations_ab_pred", "=", "[", "]", "\n", "\n", "rotations_ba", "=", "[", "]", "\n", "translations_ba", "=", "[", "]", "\n", "rotations_ba_pred", "=", "[", "]", "\n", "translations_ba_pred", "=", "[", "]", "\n", "\n", "eulers_ab", "=", "[", "]", "\n", "eulers_ba", "=", "[", "]", "\n", "\n", "for", "src", ",", "target", ",", "rotation_ab", ",", "translation_ab", ",", "rotation_ba", ",", "translation_ba", ",", "euler_ab", ",", "euler_ba", ",", "gt_corr_mat", "in", "tqdm", "(", "train_loader", ")", ":", "\n", "        ", "src", "=", "src", ".", "cuda", "(", ")", "\n", "target", "=", "target", ".", "cuda", "(", ")", "\n", "rotation_ab", "=", "rotation_ab", ".", "cuda", "(", ")", "\n", "translation_ab", "=", "translation_ab", ".", "cuda", "(", ")", "\n", "rotation_ba", "=", "rotation_ba", ".", "cuda", "(", ")", "\n", "translation_ba", "=", "translation_ba", ".", "cuda", "(", ")", "\n", "gt_corr_mat", "=", "gt_corr_mat", ".", "cuda", "(", ")", "\n", "\n", "batch_size", "=", "src", ".", "size", "(", "0", ")", "\n", "opt", ".", "zero_grad", "(", ")", "\n", "num_examples", "+=", "batch_size", "\n", "rotation_ab_pred", ",", "translation_ab_pred", ",", "rotation_ba_pred", ",", "translation_ba_pred", ",", "raw_scores", "=", "net", "(", "src", ",", "target", ")", "\n", "\n", "# accuracy in correspondences", "\n", "corr_mat_pred", "=", "raw_scores", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "# [B, Ns, Nt]    ", "\n", "col_idx_pred", "=", "np", ".", "argmax", "(", "corr_mat_pred", ",", "axis", "=", "-", "1", ")", "\n", "corr_mat_gt", "=", "gt_corr_mat", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "# [B, Ns, Nt]", "\n", "col_idx_gt", "=", "np", ".", "argmax", "(", "corr_mat_gt", ",", "axis", "=", "-", "1", ")", "\n", "correct_mask", "=", "col_idx_gt", "==", "col_idx_pred", "\n", "num_correct_corr", "+=", "correct_mask", ".", "sum", "(", ")", "\n", "num_total_corr", "+=", "np", ".", "prod", "(", "correct_mask", ".", "shape", ")", "\n", "\n", "## save rotation and translation", "\n", "rotations_ab", ".", "append", "(", "rotation_ab", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "translations_ab", ".", "append", "(", "translation_ab", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "rotations_ab_pred", ".", "append", "(", "rotation_ab_pred", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "translations_ab_pred", ".", "append", "(", "translation_ab_pred", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "eulers_ab", ".", "append", "(", "euler_ab", ".", "numpy", "(", ")", ")", "\n", "##", "\n", "rotations_ba", ".", "append", "(", "rotation_ba", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "translations_ba", ".", "append", "(", "translation_ba", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "rotations_ba_pred", ".", "append", "(", "rotation_ba_pred", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "translations_ba_pred", ".", "append", "(", "translation_ba_pred", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "eulers_ba", ".", "append", "(", "euler_ba", ".", "numpy", "(", ")", ")", "\n", "\n", "transformed_src", "=", "transform_point_cloud", "(", "src", ",", "rotation_ab_pred", ",", "translation_ab_pred", ")", "\n", "\n", "transformed_target", "=", "transform_point_cloud", "(", "target", ",", "rotation_ba_pred", ",", "translation_ba_pred", ")", "\n", "###########################", "\n", "identity", "=", "torch", ".", "eye", "(", "3", ")", ".", "cuda", "(", ")", ".", "unsqueeze", "(", "0", ")", ".", "repeat", "(", "batch_size", ",", "1", ",", "1", ")", "\n", "# loss = F.mse_loss(torch.matmul(rotation_ab_pred.transpose(2, 1), rotation_ab), identity) \\", "\n", "# + F.mse_loss(translation_ab_pred, translation_ab)", "\n", "loss", "=", "CorrLoss", "(", ")", "(", "target", ",", "src", ",", "raw_scores", ",", "gt_corr_mat", ")", "\n", "if", "args", ".", "cycle", ":", "\n", "            ", "rotation_loss", "=", "F", ".", "mse_loss", "(", "torch", ".", "matmul", "(", "rotation_ba_pred", ",", "rotation_ab_pred", ")", ",", "identity", ".", "clone", "(", ")", ")", "\n", "translation_loss", "=", "torch", ".", "mean", "(", "(", "torch", ".", "matmul", "(", "rotation_ba_pred", ".", "transpose", "(", "2", ",", "1", ")", ",", "\n", "translation_ab_pred", ".", "view", "(", "batch_size", ",", "3", ",", "1", ")", ")", ".", "view", "(", "batch_size", ",", "3", ")", "\n", "+", "translation_ba_pred", ")", "**", "2", ",", "dim", "=", "[", "0", ",", "1", "]", ")", "\n", "cycle_loss", "=", "rotation_loss", "+", "translation_loss", "\n", "\n", "# loss = loss + cycle_loss * 0.1", "\n", "\n", "", "loss", ".", "backward", "(", ")", "\n", "opt", ".", "step", "(", ")", "\n", "total_loss", "+=", "loss", ".", "item", "(", ")", "*", "batch_size", "\n", "\n", "if", "args", ".", "cycle", ":", "\n", "            ", "total_cycle_loss", "=", "total_cycle_loss", "+", "cycle_loss", ".", "item", "(", ")", "*", "0.1", "*", "batch_size", "\n", "\n", "", "mse_ab", "+=", "torch", ".", "mean", "(", "(", "transformed_src", "-", "target", ")", "**", "2", ",", "dim", "=", "[", "0", ",", "1", ",", "2", "]", ")", ".", "item", "(", ")", "*", "batch_size", "\n", "mae_ab", "+=", "torch", ".", "mean", "(", "torch", ".", "abs", "(", "transformed_src", "-", "target", ")", ",", "dim", "=", "[", "0", ",", "1", ",", "2", "]", ")", ".", "item", "(", ")", "*", "batch_size", "\n", "\n", "mse_ba", "+=", "torch", ".", "mean", "(", "(", "transformed_target", "-", "src", ")", "**", "2", ",", "dim", "=", "[", "0", ",", "1", ",", "2", "]", ")", ".", "item", "(", ")", "*", "batch_size", "\n", "mae_ba", "+=", "torch", ".", "mean", "(", "torch", ".", "abs", "(", "transformed_target", "-", "src", ")", ",", "dim", "=", "[", "0", ",", "1", ",", "2", "]", ")", ".", "item", "(", ")", "*", "batch_size", "\n", "\n", "", "rotations_ab", "=", "np", ".", "concatenate", "(", "rotations_ab", ",", "axis", "=", "0", ")", "\n", "translations_ab", "=", "np", ".", "concatenate", "(", "translations_ab", ",", "axis", "=", "0", ")", "\n", "rotations_ab_pred", "=", "np", ".", "concatenate", "(", "rotations_ab_pred", ",", "axis", "=", "0", ")", "\n", "translations_ab_pred", "=", "np", ".", "concatenate", "(", "translations_ab_pred", ",", "axis", "=", "0", ")", "\n", "\n", "rotations_ba", "=", "np", ".", "concatenate", "(", "rotations_ba", ",", "axis", "=", "0", ")", "\n", "translations_ba", "=", "np", ".", "concatenate", "(", "translations_ba", ",", "axis", "=", "0", ")", "\n", "rotations_ba_pred", "=", "np", ".", "concatenate", "(", "rotations_ba_pred", ",", "axis", "=", "0", ")", "\n", "translations_ba_pred", "=", "np", ".", "concatenate", "(", "translations_ba_pred", ",", "axis", "=", "0", ")", "\n", "\n", "eulers_ab", "=", "np", ".", "concatenate", "(", "eulers_ab", ",", "axis", "=", "0", ")", "\n", "eulers_ba", "=", "np", ".", "concatenate", "(", "eulers_ba", ",", "axis", "=", "0", ")", "\n", "\n", "corr_accuracy", "=", "(", "num_correct_corr", "/", "num_total_corr", ")", "*", "100", "\n", "\n", "return", "total_loss", "*", "1.0", "/", "num_examples", ",", "total_cycle_loss", "/", "num_examples", ",", "mse_ab", "*", "1.0", "/", "num_examples", ",", "mae_ab", "*", "1.0", "/", "num_examples", ",", "mse_ba", "*", "1.0", "/", "num_examples", ",", "mae_ba", "*", "1.0", "/", "num_examples", ",", "rotations_ab", ",", "translations_ab", ",", "rotations_ab_pred", ",", "translations_ab_pred", ",", "rotations_ba", ",", "translations_ba", ",", "rotations_ba_pred", ",", "translations_ba_pred", ",", "eulers_ab", ",", "eulers_ba", ",", "corr_accuracy", "\n", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.PCRNet_Code.train_pcrnet_corr.test": [[285, 323], ["train_pcrnet_corr.test_one_epoch", "numpy.sqrt", "numpy.sqrt", "util.npmat2euler", "numpy.mean", "numpy.sqrt", "numpy.mean", "numpy.mean", "numpy.sqrt", "numpy.mean", "util.npmat2euler", "numpy.mean", "numpy.sqrt", "numpy.mean", "numpy.mean", "numpy.sqrt", "numpy.mean", "textio.cprint", "textio.cprint", "textio.cprint", "textio.cprint", "textio.cprint", "numpy.abs", "numpy.abs", "numpy.abs", "numpy.abs", "numpy.degrees", "numpy.degrees", "numpy.degrees", "numpy.degrees"], "function", ["home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.main.test_one_epoch", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.util.npmat2euler", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.util.npmat2euler", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.main.IOStream.cprint", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.main.IOStream.cprint", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.main.IOStream.cprint", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.main.IOStream.cprint", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.main.IOStream.cprint"], ["", "def", "test", "(", "args", ",", "net", ",", "test_loader", ",", "boardio", ",", "textio", ")", ":", "\n", "\n", "    ", "test_loss", ",", "test_cycle_loss", ",", "test_mse_ab", ",", "test_mae_ab", ",", "test_mse_ba", ",", "test_mae_ba", ",", "test_rotations_ab", ",", "test_translations_ab", ",", "test_rotations_ab_pred", ",", "test_translations_ab_pred", ",", "test_rotations_ba", ",", "test_translations_ba", ",", "test_rotations_ba_pred", ",", "test_translations_ba_pred", ",", "test_eulers_ab", ",", "test_eulers_ba", ",", "test_corr_accuracy", "=", "test_one_epoch", "(", "args", ",", "net", ",", "test_loader", ")", "\n", "test_rmse_ab", "=", "np", ".", "sqrt", "(", "test_mse_ab", ")", "\n", "test_rmse_ba", "=", "np", ".", "sqrt", "(", "test_mse_ba", ")", "\n", "\n", "test_rotations_ab_pred_euler", "=", "npmat2euler", "(", "test_rotations_ab_pred", ")", "\n", "test_r_mse_ab", "=", "np", ".", "mean", "(", "(", "test_rotations_ab_pred_euler", "-", "np", ".", "degrees", "(", "test_eulers_ab", ")", ")", "**", "2", ")", "\n", "test_r_rmse_ab", "=", "np", ".", "sqrt", "(", "test_r_mse_ab", ")", "\n", "test_r_mae_ab", "=", "np", ".", "mean", "(", "np", ".", "abs", "(", "test_rotations_ab_pred_euler", "-", "np", ".", "degrees", "(", "test_eulers_ab", ")", ")", ")", "\n", "test_t_mse_ab", "=", "np", ".", "mean", "(", "(", "test_translations_ab", "-", "test_translations_ab_pred", ")", "**", "2", ")", "\n", "test_t_rmse_ab", "=", "np", ".", "sqrt", "(", "test_t_mse_ab", ")", "\n", "test_t_mae_ab", "=", "np", ".", "mean", "(", "np", ".", "abs", "(", "test_translations_ab", "-", "test_translations_ab_pred", ")", ")", "\n", "\n", "test_rotations_ba_pred_euler", "=", "npmat2euler", "(", "test_rotations_ba_pred", ",", "'xyz'", ")", "\n", "test_r_mse_ba", "=", "np", ".", "mean", "(", "(", "test_rotations_ba_pred_euler", "-", "np", ".", "degrees", "(", "test_eulers_ba", ")", ")", "**", "2", ")", "\n", "test_r_rmse_ba", "=", "np", ".", "sqrt", "(", "test_r_mse_ba", ")", "\n", "test_r_mae_ba", "=", "np", ".", "mean", "(", "np", ".", "abs", "(", "test_rotations_ba_pred_euler", "-", "np", ".", "degrees", "(", "test_eulers_ba", ")", ")", ")", "\n", "test_t_mse_ba", "=", "np", ".", "mean", "(", "(", "test_translations_ba", "-", "test_translations_ba_pred", ")", "**", "2", ")", "\n", "test_t_rmse_ba", "=", "np", ".", "sqrt", "(", "test_t_mse_ba", ")", "\n", "test_t_mae_ba", "=", "np", ".", "mean", "(", "np", ".", "abs", "(", "test_translations_ba", "-", "test_translations_ba_pred", ")", ")", "\n", "\n", "textio", ".", "cprint", "(", "'==FINAL TEST=='", ")", "\n", "textio", ".", "cprint", "(", "'A--------->B'", ")", "\n", "textio", ".", "cprint", "(", "'EPOCH:: %d, Loss: %f, Cycle Loss: %f, MSE: %f, RMSE: %f, MAE: %f, rot_MSE: %f, rot_RMSE: %f, '", "\n", "'rot_MAE: %f, trans_MSE: %f, trans_RMSE: %f, trans_MAE: %f, Corr_Accuracy: %f'", "\n", "%", "(", "-", "1", ",", "test_loss", ",", "test_cycle_loss", ",", "test_mse_ab", ",", "test_rmse_ab", ",", "test_mae_ab", ",", "\n", "test_r_mse_ab", ",", "test_r_rmse_ab", ",", "\n", "test_r_mae_ab", ",", "test_t_mse_ab", ",", "test_t_rmse_ab", ",", "test_t_mae_ab", ",", "test_corr_accuracy", ")", ")", "\n", "textio", ".", "cprint", "(", "'B--------->A'", ")", "\n", "textio", ".", "cprint", "(", "'EPOCH:: %d, Loss: %f, MSE: %f, RMSE: %f, MAE: %f, rot_MSE: %f, rot_RMSE: %f, '", "\n", "'rot_MAE: %f, trans_MSE: %f, trans_RMSE: %f, trans_MAE: %f'", "\n", "%", "(", "-", "1", ",", "test_loss", ",", "test_mse_ba", ",", "test_rmse_ba", ",", "test_mae_ba", ",", "test_r_mse_ba", ",", "test_r_rmse_ba", ",", "\n", "test_r_mae_ba", ",", "test_t_mse_ba", ",", "test_t_rmse_ba", ",", "test_t_mae_ba", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.PCRNet_Code.train_pcrnet_corr.train": [[325, 565], ["torch.optim.lr_scheduler.MultiStepLR", "range", "print", "torch.SGD", "print", "torch.Adam", "torch.optim.lr_scheduler.MultiStepLR.step", "train_pcrnet_corr.train_one_epoch", "train_pcrnet_corr.test_one_epoch", "numpy.sqrt", "numpy.sqrt", "numpy.sqrt", "numpy.sqrt", "util.npmat2euler", "numpy.mean", "numpy.sqrt", "numpy.mean", "numpy.mean", "numpy.sqrt", "numpy.mean", "util.npmat2euler", "numpy.mean", "numpy.sqrt", "numpy.mean", "numpy.mean", "numpy.sqrt", "numpy.mean", "util.npmat2euler", "numpy.mean", "numpy.sqrt", "numpy.mean", "numpy.mean", "numpy.sqrt", "numpy.mean", "util.npmat2euler", "numpy.mean", "numpy.sqrt", "numpy.mean", "numpy.mean", "numpy.sqrt", "numpy.mean", "textio.cprint", "textio.cprint", "textio.cprint", "textio.cprint", "textio.cprint", "textio.cprint", "textio.cprint", "textio.cprint", "textio.cprint", "textio.cprint", "textio.cprint", "textio.cprint", "textio.cprint", "textio.cprint", "textio.cprint", "boardio.add_scalar", "boardio.add_scalar", "boardio.add_scalar", "boardio.add_scalar", "boardio.add_scalar", "boardio.add_scalar", "boardio.add_scalar", "boardio.add_scalar", "boardio.add_scalar", "boardio.add_scalar", "boardio.add_scalar", "boardio.add_scalar", "boardio.add_scalar", "boardio.add_scalar", "boardio.add_scalar", "boardio.add_scalar", "boardio.add_scalar", "boardio.add_scalar", "boardio.add_scalar", "boardio.add_scalar", "boardio.add_scalar", "boardio.add_scalar", "boardio.add_scalar", "boardio.add_scalar", "boardio.add_scalar", "boardio.add_scalar", "boardio.add_scalar", "boardio.add_scalar", "boardio.add_scalar", "boardio.add_scalar", "boardio.add_scalar", "boardio.add_scalar", "boardio.add_scalar", "boardio.add_scalar", "boardio.add_scalar", "boardio.add_scalar", "boardio.add_scalar", "boardio.add_scalar", "boardio.add_scalar", "boardio.add_scalar", "boardio.add_scalar", "boardio.add_scalar", "boardio.add_scalar", "boardio.add_scalar", "boardio.add_scalar", "boardio.add_scalar", "boardio.add_scalar", "boardio.add_scalar", "boardio.add_scalar", "boardio.add_scalar", "boardio.add_scalar", "boardio.add_scalar", "boardio.add_scalar", "boardio.add_scalar", "boardio.add_scalar", "boardio.add_scalar", "boardio.add_scalar", "boardio.add_scalar", "boardio.add_scalar", "boardio.add_scalar", "boardio.add_scalar", "boardio.add_scalar", "boardio.add_scalar", "gc.collect", "net.parameters", "net.parameters", "numpy.abs", "numpy.abs", "numpy.abs", "numpy.abs", "numpy.abs", "numpy.abs", "numpy.abs", "numpy.abs", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "net.module.state_dict", "net.state_dict", "numpy.degrees", "numpy.degrees", "numpy.degrees", "numpy.degrees", "numpy.degrees", "numpy.degrees", "numpy.degrees", "numpy.degrees", "net.module.state_dict", "net.state_dict", "net.module.state_dict", "net.state_dict"], "function", ["home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.main.train_one_epoch", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.main.test_one_epoch", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.util.npmat2euler", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.util.npmat2euler", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.util.npmat2euler", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.util.npmat2euler", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.main.IOStream.cprint", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.main.IOStream.cprint", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.main.IOStream.cprint", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.main.IOStream.cprint", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.main.IOStream.cprint", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.main.IOStream.cprint", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.main.IOStream.cprint", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.main.IOStream.cprint", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.main.IOStream.cprint", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.main.IOStream.cprint", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.main.IOStream.cprint", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.main.IOStream.cprint", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.main.IOStream.cprint", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.main.IOStream.cprint", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.main.IOStream.cprint", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.common.torch.CheckPointManager.save", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.common.torch.CheckPointManager.save", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.common.torch.CheckPointManager.save", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.common.torch.CheckPointManager.save", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.common.torch.CheckPointManager.save", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.common.torch.CheckPointManager.save", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.common.torch.CheckPointManager.save", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.common.torch.CheckPointManager.save", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.common.torch.CheckPointManager.save", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.common.torch.CheckPointManager.save", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.common.torch.CheckPointManager.save", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.common.torch.CheckPointManager.save", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.common.torch.CheckPointManager.save", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.common.torch.CheckPointManager.save", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.common.torch.CheckPointManager.save", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.common.torch.CheckPointManager.save", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.common.torch.CheckPointManager.save", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.common.torch.CheckPointManager.save", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.common.torch.CheckPointManager.save", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.common.torch.CheckPointManager.save", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.common.torch.CheckPointManager.save", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.common.torch.CheckPointManager.save", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.common.torch.CheckPointManager.save", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.common.torch.CheckPointManager.save"], ["", "def", "train", "(", "args", ",", "net", ",", "train_loader", ",", "test_loader", ",", "boardio", ",", "textio", ")", ":", "\n", "    ", "if", "args", ".", "use_sgd", ":", "\n", "        ", "print", "(", "\"Use SGD\"", ")", "\n", "opt", "=", "optim", ".", "SGD", "(", "net", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "lr", "*", "100", ",", "momentum", "=", "args", ".", "momentum", ",", "weight_decay", "=", "1e-4", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "\"Use Adam\"", ")", "\n", "opt", "=", "optim", ".", "Adam", "(", "net", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "lr", ",", "weight_decay", "=", "1e-4", ")", "\n", "", "scheduler", "=", "MultiStepLR", "(", "opt", ",", "milestones", "=", "[", "75", ",", "150", ",", "200", "]", ",", "gamma", "=", "0.1", ")", "\n", "\n", "\n", "best_test_loss", "=", "np", ".", "inf", "\n", "best_test_cycle_loss", "=", "np", ".", "inf", "\n", "best_test_mse_ab", "=", "np", ".", "inf", "\n", "best_test_rmse_ab", "=", "np", ".", "inf", "\n", "best_test_mae_ab", "=", "np", ".", "inf", "\n", "\n", "best_test_r_mse_ab", "=", "np", ".", "inf", "\n", "best_test_r_rmse_ab", "=", "np", ".", "inf", "\n", "best_test_r_mae_ab", "=", "np", ".", "inf", "\n", "best_test_t_mse_ab", "=", "np", ".", "inf", "\n", "best_test_t_rmse_ab", "=", "np", ".", "inf", "\n", "best_test_t_mae_ab", "=", "np", ".", "inf", "\n", "\n", "best_test_mse_ba", "=", "np", ".", "inf", "\n", "best_test_rmse_ba", "=", "np", ".", "inf", "\n", "best_test_mae_ba", "=", "np", ".", "inf", "\n", "\n", "best_test_r_mse_ba", "=", "np", ".", "inf", "\n", "best_test_r_rmse_ba", "=", "np", ".", "inf", "\n", "best_test_r_mae_ba", "=", "np", ".", "inf", "\n", "best_test_t_mse_ba", "=", "np", ".", "inf", "\n", "best_test_t_rmse_ba", "=", "np", ".", "inf", "\n", "best_test_t_mae_ba", "=", "np", ".", "inf", "\n", "\n", "best_test_corr_accuracy", "=", "0", "\n", "\n", "for", "epoch", "in", "range", "(", "args", ".", "epochs", ")", ":", "\n", "        ", "scheduler", ".", "step", "(", ")", "\n", "train_loss", ",", "train_cycle_loss", ",", "train_mse_ab", ",", "train_mae_ab", ",", "train_mse_ba", ",", "train_mae_ba", ",", "train_rotations_ab", ",", "train_translations_ab", ",", "train_rotations_ab_pred", ",", "train_translations_ab_pred", ",", "train_rotations_ba", ",", "train_translations_ba", ",", "train_rotations_ba_pred", ",", "train_translations_ba_pred", ",", "train_eulers_ab", ",", "train_eulers_ba", ",", "train_corr_accuracy", "=", "train_one_epoch", "(", "args", ",", "net", ",", "train_loader", ",", "opt", ")", "\n", "test_loss", ",", "test_cycle_loss", ",", "test_mse_ab", ",", "test_mae_ab", ",", "test_mse_ba", ",", "test_mae_ba", ",", "test_rotations_ab", ",", "test_translations_ab", ",", "test_rotations_ab_pred", ",", "test_translations_ab_pred", ",", "test_rotations_ba", ",", "test_translations_ba", ",", "test_rotations_ba_pred", ",", "test_translations_ba_pred", ",", "test_eulers_ab", ",", "test_eulers_ba", ",", "test_corr_accuracy", "=", "test_one_epoch", "(", "args", ",", "net", ",", "test_loader", ")", "\n", "train_rmse_ab", "=", "np", ".", "sqrt", "(", "train_mse_ab", ")", "\n", "test_rmse_ab", "=", "np", ".", "sqrt", "(", "test_mse_ab", ")", "\n", "\n", "train_rmse_ba", "=", "np", ".", "sqrt", "(", "train_mse_ba", ")", "\n", "test_rmse_ba", "=", "np", ".", "sqrt", "(", "test_mse_ba", ")", "\n", "\n", "train_rotations_ab_pred_euler", "=", "npmat2euler", "(", "train_rotations_ab_pred", ")", "\n", "train_r_mse_ab", "=", "np", ".", "mean", "(", "(", "train_rotations_ab_pred_euler", "-", "np", ".", "degrees", "(", "train_eulers_ab", ")", ")", "**", "2", ")", "\n", "train_r_rmse_ab", "=", "np", ".", "sqrt", "(", "train_r_mse_ab", ")", "\n", "train_r_mae_ab", "=", "np", ".", "mean", "(", "np", ".", "abs", "(", "train_rotations_ab_pred_euler", "-", "np", ".", "degrees", "(", "train_eulers_ab", ")", ")", ")", "\n", "train_t_mse_ab", "=", "np", ".", "mean", "(", "(", "train_translations_ab", "-", "train_translations_ab_pred", ")", "**", "2", ")", "\n", "train_t_rmse_ab", "=", "np", ".", "sqrt", "(", "train_t_mse_ab", ")", "\n", "train_t_mae_ab", "=", "np", ".", "mean", "(", "np", ".", "abs", "(", "train_translations_ab", "-", "train_translations_ab_pred", ")", ")", "\n", "\n", "train_rotations_ba_pred_euler", "=", "npmat2euler", "(", "train_rotations_ba_pred", ",", "'xyz'", ")", "\n", "train_r_mse_ba", "=", "np", ".", "mean", "(", "(", "train_rotations_ba_pred_euler", "-", "np", ".", "degrees", "(", "train_eulers_ba", ")", ")", "**", "2", ")", "\n", "train_r_rmse_ba", "=", "np", ".", "sqrt", "(", "train_r_mse_ba", ")", "\n", "train_r_mae_ba", "=", "np", ".", "mean", "(", "np", ".", "abs", "(", "train_rotations_ba_pred_euler", "-", "np", ".", "degrees", "(", "train_eulers_ba", ")", ")", ")", "\n", "train_t_mse_ba", "=", "np", ".", "mean", "(", "(", "train_translations_ba", "-", "train_translations_ba_pred", ")", "**", "2", ")", "\n", "train_t_rmse_ba", "=", "np", ".", "sqrt", "(", "train_t_mse_ba", ")", "\n", "train_t_mae_ba", "=", "np", ".", "mean", "(", "np", ".", "abs", "(", "train_translations_ba", "-", "train_translations_ba_pred", ")", ")", "\n", "\n", "test_rotations_ab_pred_euler", "=", "npmat2euler", "(", "test_rotations_ab_pred", ")", "\n", "test_r_mse_ab", "=", "np", ".", "mean", "(", "(", "test_rotations_ab_pred_euler", "-", "np", ".", "degrees", "(", "test_eulers_ab", ")", ")", "**", "2", ")", "\n", "test_r_rmse_ab", "=", "np", ".", "sqrt", "(", "test_r_mse_ab", ")", "\n", "test_r_mae_ab", "=", "np", ".", "mean", "(", "np", ".", "abs", "(", "test_rotations_ab_pred_euler", "-", "np", ".", "degrees", "(", "test_eulers_ab", ")", ")", ")", "\n", "test_t_mse_ab", "=", "np", ".", "mean", "(", "(", "test_translations_ab", "-", "test_translations_ab_pred", ")", "**", "2", ")", "\n", "test_t_rmse_ab", "=", "np", ".", "sqrt", "(", "test_t_mse_ab", ")", "\n", "test_t_mae_ab", "=", "np", ".", "mean", "(", "np", ".", "abs", "(", "test_translations_ab", "-", "test_translations_ab_pred", ")", ")", "\n", "\n", "test_rotations_ba_pred_euler", "=", "npmat2euler", "(", "test_rotations_ba_pred", ",", "'xyz'", ")", "\n", "test_r_mse_ba", "=", "np", ".", "mean", "(", "(", "test_rotations_ba_pred_euler", "-", "np", ".", "degrees", "(", "test_eulers_ba", ")", ")", "**", "2", ")", "\n", "test_r_rmse_ba", "=", "np", ".", "sqrt", "(", "test_r_mse_ba", ")", "\n", "test_r_mae_ba", "=", "np", ".", "mean", "(", "np", ".", "abs", "(", "test_rotations_ba_pred_euler", "-", "np", ".", "degrees", "(", "test_eulers_ba", ")", ")", ")", "\n", "test_t_mse_ba", "=", "np", ".", "mean", "(", "(", "test_translations_ba", "-", "test_translations_ba_pred", ")", "**", "2", ")", "\n", "test_t_rmse_ba", "=", "np", ".", "sqrt", "(", "test_t_mse_ba", ")", "\n", "test_t_mae_ba", "=", "np", ".", "mean", "(", "np", ".", "abs", "(", "test_translations_ba", "-", "test_translations_ba_pred", ")", ")", "\n", "\n", "if", "best_test_corr_accuracy", "<", "test_corr_accuracy", ":", "\n", "            ", "best_test_corr_accuracy", "=", "test_corr_accuracy", "\n", "if", "torch", ".", "cuda", ".", "device_count", "(", ")", ">", "1", ":", "\n", "                ", "torch", ".", "save", "(", "net", ".", "module", ".", "state_dict", "(", ")", ",", "'checkpoints/%s/models/model.best.accuracy.t7'", "%", "args", ".", "exp_name", ")", "\n", "", "else", ":", "\n", "                ", "torch", ".", "save", "(", "net", ".", "state_dict", "(", ")", ",", "'checkpoints/%s/models/model.best.accuracy.t7'", "%", "args", ".", "exp_name", ")", "\n", "\n", "", "", "if", "best_test_loss", ">=", "test_loss", ":", "\n", "            ", "best_test_loss", "=", "test_loss", "\n", "best_test_cycle_loss", "=", "test_cycle_loss", "\n", "\n", "best_test_mse_ab", "=", "test_mse_ab", "\n", "best_test_rmse_ab", "=", "test_rmse_ab", "\n", "best_test_mae_ab", "=", "test_mae_ab", "\n", "\n", "best_test_r_mse_ab", "=", "test_r_mse_ab", "\n", "best_test_r_rmse_ab", "=", "test_r_rmse_ab", "\n", "best_test_r_mae_ab", "=", "test_r_mae_ab", "\n", "\n", "best_test_t_mse_ab", "=", "test_t_mse_ab", "\n", "best_test_t_rmse_ab", "=", "test_t_rmse_ab", "\n", "best_test_t_mae_ab", "=", "test_t_mae_ab", "\n", "\n", "best_test_mse_ba", "=", "test_mse_ba", "\n", "best_test_rmse_ba", "=", "test_rmse_ba", "\n", "best_test_mae_ba", "=", "test_mae_ba", "\n", "\n", "best_test_r_mse_ba", "=", "test_r_mse_ba", "\n", "best_test_r_rmse_ba", "=", "test_r_rmse_ba", "\n", "best_test_r_mae_ba", "=", "test_r_mae_ba", "\n", "\n", "best_test_t_mse_ba", "=", "test_t_mse_ba", "\n", "best_test_t_rmse_ba", "=", "test_t_rmse_ba", "\n", "best_test_t_mae_ba", "=", "test_t_mae_ba", "\n", "\n", "if", "torch", ".", "cuda", ".", "device_count", "(", ")", ">", "1", ":", "\n", "                ", "torch", ".", "save", "(", "net", ".", "module", ".", "state_dict", "(", ")", ",", "'checkpoints/%s/models/model.best.t7'", "%", "args", ".", "exp_name", ")", "\n", "", "else", ":", "\n", "                ", "torch", ".", "save", "(", "net", ".", "state_dict", "(", ")", ",", "'checkpoints/%s/models/model.best.t7'", "%", "args", ".", "exp_name", ")", "\n", "\n", "", "", "textio", ".", "cprint", "(", "'==TRAIN=='", ")", "\n", "textio", ".", "cprint", "(", "'A--------->B'", ")", "\n", "textio", ".", "cprint", "(", "'EPOCH:: %d, Loss: %f, Cycle Loss:, %f, MSE: %f, RMSE: %f, MAE: %f, rot_MSE: %f, rot_RMSE: %f, '", "\n", "'rot_MAE: %f, trans_MSE: %f, trans_RMSE: %f, trans_MAE: %f, Corr_Accuracy: %f'", "\n", "%", "(", "epoch", ",", "train_loss", ",", "train_cycle_loss", ",", "train_mse_ab", ",", "train_rmse_ab", ",", "train_mae_ab", ",", "train_r_mse_ab", ",", "\n", "train_r_rmse_ab", ",", "train_r_mae_ab", ",", "train_t_mse_ab", ",", "train_t_rmse_ab", ",", "train_t_mae_ab", ",", "train_corr_accuracy", ")", ")", "\n", "textio", ".", "cprint", "(", "'B--------->A'", ")", "\n", "textio", ".", "cprint", "(", "'EPOCH:: %d, Loss: %f, MSE: %f, RMSE: %f, MAE: %f, rot_MSE: %f, rot_RMSE: %f, '", "\n", "'rot_MAE: %f, trans_MSE: %f, trans_RMSE: %f, trans_MAE: %f'", "\n", "%", "(", "epoch", ",", "train_loss", ",", "train_mse_ba", ",", "train_rmse_ba", ",", "train_mae_ba", ",", "train_r_mse_ba", ",", "train_r_rmse_ba", ",", "\n", "train_r_mae_ba", ",", "train_t_mse_ba", ",", "train_t_rmse_ba", ",", "train_t_mae_ba", ")", ")", "\n", "\n", "textio", ".", "cprint", "(", "'==TEST=='", ")", "\n", "textio", ".", "cprint", "(", "'A--------->B'", ")", "\n", "textio", ".", "cprint", "(", "'EPOCH:: %d, Loss: %f, Cycle Loss: %f, MSE: %f, RMSE: %f, MAE: %f, rot_MSE: %f, rot_RMSE: %f, '", "\n", "'rot_MAE: %f, trans_MSE: %f, trans_RMSE: %f, trans_MAE: %f, Corr_Accuracy: %f'", "\n", "%", "(", "epoch", ",", "test_loss", ",", "test_cycle_loss", ",", "test_mse_ab", ",", "test_rmse_ab", ",", "test_mae_ab", ",", "test_r_mse_ab", ",", "\n", "test_r_rmse_ab", ",", "test_r_mae_ab", ",", "test_t_mse_ab", ",", "test_t_rmse_ab", ",", "test_t_mae_ab", ",", "test_corr_accuracy", ")", ")", "\n", "textio", ".", "cprint", "(", "'B--------->A'", ")", "\n", "textio", ".", "cprint", "(", "'EPOCH:: %d, Loss: %f, MSE: %f, RMSE: %f, MAE: %f, rot_MSE: %f, rot_RMSE: %f, '", "\n", "'rot_MAE: %f, trans_MSE: %f, trans_RMSE: %f, trans_MAE: %f'", "\n", "%", "(", "epoch", ",", "test_loss", ",", "test_mse_ba", ",", "test_rmse_ba", ",", "test_mae_ba", ",", "test_r_mse_ba", ",", "test_r_rmse_ba", ",", "\n", "test_r_mae_ba", ",", "test_t_mse_ba", ",", "test_t_rmse_ba", ",", "test_t_mae_ba", ")", ")", "\n", "\n", "textio", ".", "cprint", "(", "'==BEST TEST=='", ")", "\n", "textio", ".", "cprint", "(", "'A--------->B'", ")", "\n", "textio", ".", "cprint", "(", "'EPOCH:: %d, Loss: %f, Cycle Loss: %f, MSE: %f, RMSE: %f, MAE: %f, rot_MSE: %f, rot_RMSE: %f, '", "\n", "'rot_MAE: %f, trans_MSE: %f, trans_RMSE: %f, trans_MAE: %f'", "\n", "%", "(", "epoch", ",", "best_test_loss", ",", "best_test_cycle_loss", ",", "best_test_mse_ab", ",", "best_test_rmse_ab", ",", "\n", "best_test_mae_ab", ",", "best_test_r_mse_ab", ",", "best_test_r_rmse_ab", ",", "\n", "best_test_r_mae_ab", ",", "best_test_t_mse_ab", ",", "best_test_t_rmse_ab", ",", "best_test_t_mae_ab", ")", ")", "\n", "textio", ".", "cprint", "(", "'B--------->A'", ")", "\n", "textio", ".", "cprint", "(", "'EPOCH:: %d, Loss: %f, MSE: %f, RMSE: %f, MAE: %f, rot_MSE: %f, rot_RMSE: %f, '", "\n", "'rot_MAE: %f, trans_MSE: %f, trans_RMSE: %f, trans_MAE: %f'", "\n", "%", "(", "epoch", ",", "best_test_loss", ",", "best_test_mse_ba", ",", "best_test_rmse_ba", ",", "best_test_mae_ba", ",", "\n", "best_test_r_mse_ba", ",", "best_test_r_rmse_ba", ",", "\n", "best_test_r_mae_ba", ",", "best_test_t_mse_ba", ",", "best_test_t_rmse_ba", ",", "best_test_t_mae_ba", ")", ")", "\n", "\n", "boardio", ".", "add_scalar", "(", "'A->B/train/loss'", ",", "train_loss", ",", "epoch", ")", "\n", "boardio", ".", "add_scalar", "(", "'A->B/train/MSE'", ",", "train_mse_ab", ",", "epoch", ")", "\n", "boardio", ".", "add_scalar", "(", "'A->B/train/RMSE'", ",", "train_rmse_ab", ",", "epoch", ")", "\n", "boardio", ".", "add_scalar", "(", "'A->B/train/MAE'", ",", "train_mae_ab", ",", "epoch", ")", "\n", "boardio", ".", "add_scalar", "(", "'A->B/train/rotation/MSE'", ",", "train_r_mse_ab", ",", "epoch", ")", "\n", "boardio", ".", "add_scalar", "(", "'A->B/train/rotation/RMSE'", ",", "train_r_rmse_ab", ",", "epoch", ")", "\n", "boardio", ".", "add_scalar", "(", "'A->B/train/rotation/MAE'", ",", "train_r_mae_ab", ",", "epoch", ")", "\n", "boardio", ".", "add_scalar", "(", "'A->B/train/translation/MSE'", ",", "train_t_mse_ab", ",", "epoch", ")", "\n", "boardio", ".", "add_scalar", "(", "'A->B/train/translation/RMSE'", ",", "train_t_rmse_ab", ",", "epoch", ")", "\n", "boardio", ".", "add_scalar", "(", "'A->B/train/translation/MAE'", ",", "train_t_mae_ab", ",", "epoch", ")", "\n", "boardio", ".", "add_scalar", "(", "'A->B/train/Corr_Accuracy'", ",", "train_corr_accuracy", ",", "epoch", ")", "\n", "\n", "boardio", ".", "add_scalar", "(", "'B->A/train/loss'", ",", "train_loss", ",", "epoch", ")", "\n", "boardio", ".", "add_scalar", "(", "'B->A/train/MSE'", ",", "train_mse_ba", ",", "epoch", ")", "\n", "boardio", ".", "add_scalar", "(", "'B->A/train/RMSE'", ",", "train_rmse_ba", ",", "epoch", ")", "\n", "boardio", ".", "add_scalar", "(", "'B->A/train/MAE'", ",", "train_mae_ba", ",", "epoch", ")", "\n", "boardio", ".", "add_scalar", "(", "'B->A/train/rotation/MSE'", ",", "train_r_mse_ba", ",", "epoch", ")", "\n", "boardio", ".", "add_scalar", "(", "'B->A/train/rotation/RMSE'", ",", "train_r_rmse_ba", ",", "epoch", ")", "\n", "boardio", ".", "add_scalar", "(", "'B->A/train/rotation/MAE'", ",", "train_r_mae_ba", ",", "epoch", ")", "\n", "boardio", ".", "add_scalar", "(", "'B->A/train/translation/MSE'", ",", "train_t_mse_ba", ",", "epoch", ")", "\n", "boardio", ".", "add_scalar", "(", "'B->A/train/translation/RMSE'", ",", "train_t_rmse_ba", ",", "epoch", ")", "\n", "boardio", ".", "add_scalar", "(", "'B->A/train/translation/MAE'", ",", "train_t_mae_ba", ",", "epoch", ")", "\n", "\n", "############TEST", "\n", "boardio", ".", "add_scalar", "(", "'A->B/test/loss'", ",", "test_loss", ",", "epoch", ")", "\n", "boardio", ".", "add_scalar", "(", "'A->B/test/MSE'", ",", "test_mse_ab", ",", "epoch", ")", "\n", "boardio", ".", "add_scalar", "(", "'A->B/test/RMSE'", ",", "test_rmse_ab", ",", "epoch", ")", "\n", "boardio", ".", "add_scalar", "(", "'A->B/test/MAE'", ",", "test_mae_ab", ",", "epoch", ")", "\n", "boardio", ".", "add_scalar", "(", "'A->B/test/rotation/MSE'", ",", "test_r_mse_ab", ",", "epoch", ")", "\n", "boardio", ".", "add_scalar", "(", "'A->B/test/rotation/RMSE'", ",", "test_r_rmse_ab", ",", "epoch", ")", "\n", "boardio", ".", "add_scalar", "(", "'A->B/test/rotation/MAE'", ",", "test_r_mae_ab", ",", "epoch", ")", "\n", "boardio", ".", "add_scalar", "(", "'A->B/test/translation/MSE'", ",", "test_t_mse_ab", ",", "epoch", ")", "\n", "boardio", ".", "add_scalar", "(", "'A->B/test/translation/RMSE'", ",", "test_t_rmse_ab", ",", "epoch", ")", "\n", "boardio", ".", "add_scalar", "(", "'A->B/test/translation/MAE'", ",", "test_t_mae_ab", ",", "epoch", ")", "\n", "boardio", ".", "add_scalar", "(", "'A->B/tets/Corr_Accuracy'", ",", "test_corr_accuracy", ",", "epoch", ")", "\n", "\n", "boardio", ".", "add_scalar", "(", "'B->A/test/loss'", ",", "test_loss", ",", "epoch", ")", "\n", "boardio", ".", "add_scalar", "(", "'B->A/test/MSE'", ",", "test_mse_ba", ",", "epoch", ")", "\n", "boardio", ".", "add_scalar", "(", "'B->A/test/RMSE'", ",", "test_rmse_ba", ",", "epoch", ")", "\n", "boardio", ".", "add_scalar", "(", "'B->A/test/MAE'", ",", "test_mae_ba", ",", "epoch", ")", "\n", "boardio", ".", "add_scalar", "(", "'B->A/test/rotation/MSE'", ",", "test_r_mse_ba", ",", "epoch", ")", "\n", "boardio", ".", "add_scalar", "(", "'B->A/test/rotation/RMSE'", ",", "test_r_rmse_ba", ",", "epoch", ")", "\n", "boardio", ".", "add_scalar", "(", "'B->A/test/rotation/MAE'", ",", "test_r_mae_ba", ",", "epoch", ")", "\n", "boardio", ".", "add_scalar", "(", "'B->A/test/translation/MSE'", ",", "test_t_mse_ba", ",", "epoch", ")", "\n", "boardio", ".", "add_scalar", "(", "'B->A/test/translation/RMSE'", ",", "test_t_rmse_ba", ",", "epoch", ")", "\n", "boardio", ".", "add_scalar", "(", "'B->A/test/translation/MAE'", ",", "test_t_mae_ba", ",", "epoch", ")", "\n", "\n", "############BEST TEST", "\n", "boardio", ".", "add_scalar", "(", "'A->B/best_test/loss'", ",", "best_test_loss", ",", "epoch", ")", "\n", "boardio", ".", "add_scalar", "(", "'A->B/best_test/MSE'", ",", "best_test_mse_ab", ",", "epoch", ")", "\n", "boardio", ".", "add_scalar", "(", "'A->B/best_test/RMSE'", ",", "best_test_rmse_ab", ",", "epoch", ")", "\n", "boardio", ".", "add_scalar", "(", "'A->B/best_test/MAE'", ",", "best_test_mae_ab", ",", "epoch", ")", "\n", "boardio", ".", "add_scalar", "(", "'A->B/best_test/rotation/MSE'", ",", "best_test_r_mse_ab", ",", "epoch", ")", "\n", "boardio", ".", "add_scalar", "(", "'A->B/best_test/rotation/RMSE'", ",", "best_test_r_rmse_ab", ",", "epoch", ")", "\n", "boardio", ".", "add_scalar", "(", "'A->B/best_test/rotation/MAE'", ",", "best_test_r_mae_ab", ",", "epoch", ")", "\n", "boardio", ".", "add_scalar", "(", "'A->B/best_test/translation/MSE'", ",", "best_test_t_mse_ab", ",", "epoch", ")", "\n", "boardio", ".", "add_scalar", "(", "'A->B/best_test/translation/RMSE'", ",", "best_test_t_rmse_ab", ",", "epoch", ")", "\n", "boardio", ".", "add_scalar", "(", "'A->B/best_test/translation/MAE'", ",", "best_test_t_mae_ab", ",", "epoch", ")", "\n", "boardio", ".", "add_scalar", "(", "'A->B/best_test/Corr_Accuracy'", ",", "best_test_corr_accuracy", ",", "epoch", ")", "\n", "\n", "boardio", ".", "add_scalar", "(", "'B->A/best_test/loss'", ",", "best_test_loss", ",", "epoch", ")", "\n", "boardio", ".", "add_scalar", "(", "'B->A/best_test/MSE'", ",", "best_test_mse_ba", ",", "epoch", ")", "\n", "boardio", ".", "add_scalar", "(", "'B->A/best_test/RMSE'", ",", "best_test_rmse_ba", ",", "epoch", ")", "\n", "boardio", ".", "add_scalar", "(", "'B->A/best_test/MAE'", ",", "best_test_mae_ba", ",", "epoch", ")", "\n", "boardio", ".", "add_scalar", "(", "'B->A/best_test/rotation/MSE'", ",", "best_test_r_mse_ba", ",", "epoch", ")", "\n", "boardio", ".", "add_scalar", "(", "'B->A/best_test/rotation/RMSE'", ",", "best_test_r_rmse_ba", ",", "epoch", ")", "\n", "boardio", ".", "add_scalar", "(", "'B->A/best_test/rotation/MAE'", ",", "best_test_r_mae_ba", ",", "epoch", ")", "\n", "boardio", ".", "add_scalar", "(", "'B->A/best_test/translation/MSE'", ",", "best_test_t_mse_ba", ",", "epoch", ")", "\n", "boardio", ".", "add_scalar", "(", "'B->A/best_test/translation/RMSE'", ",", "best_test_t_rmse_ba", ",", "epoch", ")", "\n", "boardio", ".", "add_scalar", "(", "'B->A/best_test/translation/MAE'", ",", "best_test_t_mae_ba", ",", "epoch", ")", "\n", "\n", "if", "torch", ".", "cuda", ".", "device_count", "(", ")", ">", "1", ":", "\n", "            ", "torch", ".", "save", "(", "net", ".", "module", ".", "state_dict", "(", ")", ",", "'checkpoints/%s/models/model.%d.t7'", "%", "(", "args", ".", "exp_name", ",", "epoch", ")", ")", "\n", "", "else", ":", "\n", "            ", "torch", ".", "save", "(", "net", ".", "state_dict", "(", ")", ",", "'checkpoints/%s/models/model.%d.t7'", "%", "(", "args", ".", "exp_name", ",", "epoch", ")", ")", "\n", "", "gc", ".", "collect", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.PCRNet_Code.train_pcrnet_corr.main": [[567, 663], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "numpy.random.seed", "tensorboardX.SummaryWriter", "train_pcrnet_corr._init_", "train_pcrnet_corr.IOStream", "train_pcrnet_corr.IOStream.cprint", "print", "tensorboardX.SummaryWriter.close", "str", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "Exception", "model.PCRNet_corr().cuda", "Exception", "train_pcrnet_corr.test", "train_pcrnet_corr.train", "data.ModelNet40", "data.ModelNet40", "nn.DataParallel.load_state_dict", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.DataParallel", "print", "model.PCRNet_corr", "print", "os.path.exists", "print", "torch.load", "torch.load", "torch.load", "torch.load", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count"], "function", ["home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.main._init_", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.main.IOStream.cprint", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.main.IOStream.close", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.main.test", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.main.train", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.common.torch.CheckPointManager.load", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.common.torch.CheckPointManager.load", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.common.torch.CheckPointManager.load", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.common.torch.CheckPointManager.load"], ["", "", "def", "main", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Point Cloud Registration'", ")", "\n", "parser", ".", "add_argument", "(", "'--exp_name'", ",", "type", "=", "str", ",", "default", "=", "'exp'", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'Name of the experiment'", ")", "\n", "parser", ".", "add_argument", "(", "'--model'", ",", "type", "=", "str", ",", "default", "=", "'pcrnet_corr'", ",", "metavar", "=", "'N'", ",", "\n", "choices", "=", "[", "'pcrnet_corr'", ",", "'pcrnet'", "]", ",", "\n", "help", "=", "'Model to use, [dcp]'", ")", "\n", "parser", ".", "add_argument", "(", "'--head'", ",", "type", "=", "str", ",", "default", "=", "'svd'", ",", "metavar", "=", "'N'", ",", "\n", "choices", "=", "[", "'mlp'", ",", "'svd'", ",", "]", ",", "\n", "help", "=", "'Head to use, [mlp, svd]'", ")", "\n", "parser", ".", "add_argument", "(", "'--emb_dims'", ",", "type", "=", "int", ",", "default", "=", "512", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'Dimension of embeddings'", ")", "\n", "\n", "\n", "parser", ".", "add_argument", "(", "'--batch_size'", ",", "type", "=", "int", ",", "default", "=", "32", ",", "metavar", "=", "'batch_size'", ",", "\n", "help", "=", "'Size of batch)'", ")", "\n", "parser", ".", "add_argument", "(", "'--test_batch_size'", ",", "type", "=", "int", ",", "default", "=", "10", ",", "metavar", "=", "'batch_size'", ",", "\n", "help", "=", "'Size of batch)'", ")", "\n", "parser", ".", "add_argument", "(", "'--epochs'", ",", "type", "=", "int", ",", "default", "=", "250", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'number of episode to train '", ")", "\n", "parser", ".", "add_argument", "(", "'--use_sgd'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ",", "\n", "help", "=", "'Use SGD'", ")", "\n", "parser", ".", "add_argument", "(", "'--lr'", ",", "type", "=", "float", ",", "default", "=", "0.001", ",", "metavar", "=", "'LR'", ",", "\n", "help", "=", "'learning rate (default: 0.001, 0.1 if using sgd)'", ")", "\n", "parser", ".", "add_argument", "(", "'--momentum'", ",", "type", "=", "float", ",", "default", "=", "0.9", ",", "metavar", "=", "'M'", ",", "\n", "help", "=", "'SGD momentum (default: 0.9)'", ")", "\n", "parser", ".", "add_argument", "(", "'--no_cuda'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ",", "\n", "help", "=", "'enables CUDA training'", ")", "\n", "parser", ".", "add_argument", "(", "'--seed'", ",", "type", "=", "int", ",", "default", "=", "1234", ",", "metavar", "=", "'S'", ",", "\n", "help", "=", "'random seed (default: 1)'", ")", "\n", "parser", ".", "add_argument", "(", "'--eval'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ",", "\n", "help", "=", "'evaluate the model'", ")", "\n", "parser", ".", "add_argument", "(", "'--cycle'", ",", "type", "=", "bool", ",", "default", "=", "False", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'Whether to use cycle consistency'", ")", "\n", "parser", ".", "add_argument", "(", "'--gaussian_noise'", ",", "type", "=", "bool", ",", "default", "=", "False", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'Wheter to add gaussian noise'", ")", "\n", "parser", ".", "add_argument", "(", "'--unseen'", ",", "type", "=", "bool", ",", "default", "=", "False", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'Wheter to test on unseen category'", ")", "\n", "parser", ".", "add_argument", "(", "'--num_points'", ",", "type", "=", "int", ",", "default", "=", "1024", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'Num of points to use'", ")", "\n", "parser", ".", "add_argument", "(", "'--dataset'", ",", "type", "=", "str", ",", "default", "=", "'modelnet40'", ",", "choices", "=", "[", "'modelnet40'", "]", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'dataset to use'", ")", "\n", "parser", ".", "add_argument", "(", "'--factor'", ",", "type", "=", "float", ",", "default", "=", "4", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'Divided factor for rotations'", ")", "\n", "parser", ".", "add_argument", "(", "'--pretrained'", ",", "type", "=", "str", ",", "default", "=", "''", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'Pretrained model path'", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "torch", ".", "backends", ".", "cudnn", ".", "deterministic", "=", "True", "\n", "torch", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "args", ".", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "args", ".", "seed", ")", "\n", "\n", "boardio", "=", "SummaryWriter", "(", "log_dir", "=", "'checkpoints/'", "+", "args", ".", "exp_name", ")", "\n", "_init_", "(", "args", ")", "\n", "\n", "textio", "=", "IOStream", "(", "'checkpoints/'", "+", "args", ".", "exp_name", "+", "'/run.log'", ")", "\n", "textio", ".", "cprint", "(", "str", "(", "args", ")", ")", "\n", "\n", "if", "args", ".", "dataset", "==", "'modelnet40'", ":", "\n", "        ", "train_loader", "=", "DataLoader", "(", "\n", "ModelNet40", "(", "num_points", "=", "args", ".", "num_points", ",", "partition", "=", "'train'", ",", "gaussian_noise", "=", "args", ".", "gaussian_noise", ",", "\n", "unseen", "=", "args", ".", "unseen", ",", "factor", "=", "args", ".", "factor", ")", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "True", ",", "drop_last", "=", "True", ")", "\n", "test_loader", "=", "DataLoader", "(", "\n", "ModelNet40", "(", "num_points", "=", "args", ".", "num_points", ",", "partition", "=", "'test'", ",", "gaussian_noise", "=", "args", ".", "gaussian_noise", ",", "\n", "unseen", "=", "args", ".", "unseen", ",", "factor", "=", "args", ".", "factor", ")", ",", "\n", "batch_size", "=", "args", ".", "test_batch_size", ",", "shuffle", "=", "False", ",", "drop_last", "=", "False", ")", "\n", "", "else", ":", "\n", "        ", "raise", "Exception", "(", "\"not implemented\"", ")", "\n", "\n", "", "if", "args", ".", "model", "==", "'pcrnet_corr'", ":", "\n", "        ", "net", "=", "PCRNet_corr", "(", "args", ")", ".", "cuda", "(", ")", "\n", "if", "args", ".", "eval", ":", "\n", "            ", "if", "args", ".", "pretrained", "is", "''", ":", "\n", "                ", "pretrained", "=", "'checkpoints'", "+", "'/'", "+", "args", ".", "exp_name", "+", "'/models/model.best.t7'", "\n", "", "else", ":", "\n", "                ", "pretrained", "=", "args", ".", "pretrained", "\n", "print", "(", "pretrained", ")", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "pretrained", ")", ":", "\n", "                ", "print", "(", "\"can't find pretrained model\"", ")", "\n", "return", "\n", "", "net", ".", "load_state_dict", "(", "torch", ".", "load", "(", "pretrained", ")", ",", "strict", "=", "False", ")", "\n", "", "if", "torch", ".", "cuda", ".", "device_count", "(", ")", ">", "1", ":", "\n", "            ", "net", "=", "nn", ".", "DataParallel", "(", "net", ")", "\n", "print", "(", "\"Let's use\"", ",", "torch", ".", "cuda", ".", "device_count", "(", ")", ",", "\"GPUs!\"", ")", "\n", "", "", "else", ":", "\n", "        ", "raise", "Exception", "(", "'Not implemented'", ")", "\n", "", "if", "args", ".", "eval", ":", "\n", "        ", "test", "(", "args", ",", "net", ",", "test_loader", ",", "boardio", ",", "textio", ")", "\n", "", "else", ":", "\n", "        ", "train", "(", "args", ",", "net", ",", "train_loader", ",", "test_loader", ",", "boardio", ",", "textio", ")", "\n", "\n", "\n", "", "print", "(", "'FINISH'", ")", "\n", "boardio", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.PCRNet_Code.data.ModelNet40.__init__": [[105, 157], ["data.load_data", "print", "data.ModelNet40.label.squeeze", "len", "len", "print"], "methods", ["home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.data.load_data"], ["\t", "def", "__init__", "(", "self", ",", "\n", "num_points", "=", "1024", ",", "# points to sample", "\n", "gaussian_noise", "=", "False", ",", "# N(0,0.01) clip=0.05               ", "\n", "partial", "=", "1.0", ",", "# %points to keep in pointcloud1", "\n", "identical", "=", "True", ",", "# identical=same points sampled for both src and tgt", "\n", "factor", "=", "1", ",", "# rotation sampled from (-pi/factor, pi/factor)", "\n", "trans_mag", "=", "0.5", ",", "# translation sampled from uniform(-trans_mag,trans_mag) ", "\n", "method", "=", "'dcp_modified'", ",", "# choices:[dcp_modified, dcp, prnet, pointnetlk, pcrnet, pcrnet_corr, rpmnet]", "\n", "partition", "=", "'train'", ",", "\n", "unseen", "=", "False", ",", "\n", "single_category", "=", "False", ")", ":", "\n", "\n", "\n", "\t\t", "self", ".", "data", ",", "self", ".", "label", "=", "load_data", "(", "partition", ")", "\n", "print", "(", "len", "(", "self", ".", "data", ")", ",", "\"len(self.data)\"", ")", "\n", "self", ".", "num_points", "=", "num_points", "\n", "self", ".", "partition", "=", "partition", "\n", "self", ".", "gaussian_noise", "=", "gaussian_noise", "\n", "self", ".", "identical", "=", "identical", "\n", "self", ".", "unseen", "=", "unseen", "\n", "self", ".", "label", "=", "self", ".", "label", ".", "squeeze", "(", ")", "\n", "self", ".", "factor", "=", "factor", "\n", "self", ".", "trans_mag", "=", "trans_mag", "\n", "self", ".", "partial", "=", "partial", "\n", "self", ".", "num_points_CAD", "=", "len", "(", "self", ".", "data", "[", "0", "]", ")", "\n", "self", ".", "single_category", "=", "single_category", "\n", "self", ".", "outl_thresh", "=", "1", "\n", "self", ".", "method", "=", "method", "\n", "\n", "### Only one asymmetric category", "\n", "if", "self", ".", "single_category", ":", "\n", "\t\t\t", "category_id", "=", "7", "# car", "\n", "\n", "\n", "if", "self", ".", "partition", "==", "'test'", ":", "\n", "\t\t\t\t", "self", ".", "data", "=", "self", ".", "data", "[", "self", ".", "label", "==", "category_id", "]", "\n", "self", ".", "label", "=", "self", ".", "label", "[", "self", ".", "label", "==", "category_id", "]", "\n", "", "elif", "self", ".", "partition", "==", "'train'", ":", "\n", "\t\t\t\t", "self", ".", "data", "=", "self", ".", "data", "[", "self", ".", "label", "==", "category_id", "]", "\n", "self", ".", "label", "=", "self", ".", "label", "[", "self", ".", "label", "==", "category_id", "]", "\n", "\n", "\n", "\n", "", "", "if", "self", ".", "unseen", ":", "\n", "\t\t\t", "print", "(", "\"for unseen data\"", ")", "\n", "####### simulate testing on first 20 categories while training on last 20 categories", "\n", "if", "self", ".", "partition", "==", "'test'", ":", "\n", "\t\t\t\t", "self", ".", "data", "=", "self", ".", "data", "[", "self", ".", "label", ">=", "20", "]", "\n", "self", ".", "label", "=", "self", ".", "label", "[", "self", ".", "label", ">=", "20", "]", "\n", "", "elif", "self", ".", "partition", "==", "'train'", ":", "\n", "\t\t\t\t", "self", ".", "data", "=", "self", ".", "data", "[", "self", ".", "label", "<", "20", "]", "\n", "self", ".", "label", "=", "self", ".", "label", "[", "self", ".", "label", "<", "20", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.PCRNet_Code.data.ModelNet40.__getitem__": [[159, 250], ["uniform_2_sphere().flatten", "scipy.spatial.transform.Rotation.from_rotvec", "scipy.spatial.transform.Rotation.from_rotvec.as_dcm", "scipy.spatial.transform.Rotation.from_rotvec.as_euler", "scipy.spatial.transform.Rotation.from_euler", "numpy.random.uniform", "numpy.asarray", "numpy.random.permutation", "numpy.random.seed", "R_ba.dot", "numpy.random.choice", "numpy.random.choice", "numpy.random.choice", "data.uniform_2_sphere", "numpy.dot", "data.jitter_pointcloud", "data.jitter_pointcloud", "data.ModelNet40.compute_corr_mat", "scipy.spatial.transform.Rotation.from_euler.apply", "numpy.expand_dims", "data.ModelNet40.to_pointnetlk", "data.uniform_2_sphere", "range", "range", "range", "numpy.mean", "numpy.argsort", "data.ModelNet40.to_pcrnet", "int", "data.ModelNet40.to_pcrnet_corr", "numpy.random.uniform", "data.ModelNet40.to_rpmnet", "jitter_pointcloud.astype", "jitter_pointcloud.astype", "Rotation.from_rotvec.as_dcm.astype", "numpy.random.uniform.astype", "R_ba.astype", "translation_ba.astype", "numpy.asarray.astype", "euler_ba.astype", "jitter_pointcloud.astype", "jitter_pointcloud.astype", "Rotation.from_rotvec.as_dcm.astype", "numpy.random.uniform.astype", "R_ba.astype", "translation_ba.astype", "numpy.asarray.astype", "euler_ba.astype", "data.ModelNet40.astype"], "methods", ["home.repos.pwc.inspect_result.tzodge_PCR-CMU.PCRNet_Code.data.uniform_2_sphere", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.data.jitter_pointcloud", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.data.jitter_pointcloud", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.PCRNet_Code.data.ModelNet40.compute_corr_mat", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.PCRNet_Code.data.ModelNet40.to_pointnetlk", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.PCRNet_Code.data.uniform_2_sphere", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.PCRNet_Code.data.ModelNet40.to_pcrnet", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.PCRNet_Code.data.ModelNet40.to_pcrnet_corr", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.PCRNet_Code.data.ModelNet40.to_rpmnet"], ["", "", "", "def", "__getitem__", "(", "self", ",", "item", ")", ":", "\n", "\t\t", "if", "self", ".", "partition", "!=", "'train'", ":", "\n", "\t\t\t", "np", ".", "random", ".", "seed", "(", "item", ")", "\n", "\n", "############################## GT Transformation Generation ##########################", "\n", "", "axis", "=", "uniform_2_sphere", "(", ")", ".", "flatten", "(", ")", "# uniform sampling from a sphere", "\n", "\n", "### angle from [-pi/factor to +pi/factor]", "\n", "angle", "=", "2", "*", "(", "np", ".", "random", ".", "uniform", "(", ")", "-", "0.5", ")", "*", "np", ".", "pi", "/", "self", ".", "factor", "\n", "Rot_instance", "=", "Rotation", ".", "from_rotvec", "(", "axis", "*", "angle", ")", "\n", "R_ab", "=", "Rot_instance", ".", "as_dcm", "(", ")", "\n", "\n", "[", "anglez", ",", "angley", ",", "anglex", "]", "=", "Rot_instance", ".", "as_euler", "(", "'zyx'", ")", "\n", "\n", "R_ba", "=", "R_ab", ".", "T", "\n", "rotation_ab", "=", "Rotation", ".", "from_euler", "(", "'zyx'", ",", "[", "anglez", ",", "angley", ",", "anglex", "]", ")", "\n", "\n", "translation_ab", "=", "np", ".", "random", ".", "uniform", "(", "-", "self", ".", "trans_mag", ",", "self", ".", "trans_mag", ",", "3", ")", "\n", "translation_ba", "=", "-", "R_ba", ".", "dot", "(", "translation_ab", ")", "\n", "\n", "euler_ab", "=", "np", ".", "asarray", "(", "[", "anglez", ",", "angley", ",", "anglex", "]", ")", "\n", "euler_ba", "=", "-", "euler_ab", "[", ":", ":", "-", "1", "]", "\n", "\n", "########################################################################################", "\n", "#                     Pointcloud Processing    ", "\n", "########################################################################################", "\n", "\n", "\n", "if", "self", ".", "identical", ":", "\n", "\t\t\t", "choose_idx", "=", "np", ".", "random", ".", "choice", "(", "range", "(", "self", ".", "num_points_CAD", ")", ",", "self", ".", "num_points", ",", "replace", "=", "False", ")", "\n", "pointcloud1", "=", "self", ".", "data", "[", "item", "]", "[", "choose_idx", ",", ":", "]", "\n", "pointcloud2", "=", "self", ".", "data", "[", "item", "]", "[", "choose_idx", ",", ":", "]", "\n", "", "else", ":", "\n", "\t\t\t", "choose_idx1", "=", "np", ".", "random", ".", "choice", "(", "range", "(", "self", ".", "num_points_CAD", ")", ",", "self", ".", "num_points", ",", "replace", "=", "False", ")", "\n", "pointcloud1", "=", "self", ".", "data", "[", "item", "]", "[", "choose_idx1", ",", ":", "]", "\n", "choose_idx2", "=", "np", ".", "random", ".", "choice", "(", "range", "(", "self", ".", "num_points_CAD", ")", ",", "self", ".", "num_points", ",", "replace", "=", "False", ")", "\n", "pointcloud2", "=", "self", ".", "data", "[", "item", "]", "[", "choose_idx2", ",", ":", "]", "\n", "\n", "\n", "\n", "", "if", "self", ".", "partial", "<", "1", ":", "\n", "\t\t\t", "rand_xyz", "=", "uniform_2_sphere", "(", ")", "\n", "pc1_centered", "=", "pointcloud1", "-", "np", ".", "mean", "(", "pointcloud1", ",", "axis", "=", "0", ")", "\n", "dist_from_plane", "=", "np", ".", "dot", "(", "pc1_centered", ",", "rand_xyz", ")", "\n", "\n", "partial_idx", "=", "np", ".", "argsort", "(", "dist_from_plane", ")", "[", "0", ":", "int", "(", "self", ".", "num_points", "*", "self", ".", "partial", ")", "]", "\n", "pointcloud1", "=", "pointcloud1", "[", "partial_idx", ",", ":", "]", "\n", "\n", "\n", "\n", "", "if", "self", ".", "gaussian_noise", ":", "\n", "\t\t\t", "pointcloud1", "=", "jitter_pointcloud", "(", "pointcloud1", ")", "\n", "pointcloud2", "=", "jitter_pointcloud", "(", "pointcloud2", ")", "\n", "\n", "# permutation", "\n", "", "pointcloud2", "=", "np", ".", "random", ".", "permutation", "(", "pointcloud2", ")", "\n", "\n", "corr_mat_ab", "=", "None", "\n", "if", "(", "self", ".", "method", "==", "'dcp_modified'", ")", "or", "(", "self", ".", "method", "==", "'pcrnet_corr'", ")", ":", "# compute corr_mat if dcp_modified or pcrnet_corr", "\n", "\t\t\t", "corr_mat_ab", "=", "self", ".", "compute_corr_mat", "(", "pointcloud1", ",", "pointcloud2", ")", "\n", "\n", "", "pointcloud2", "=", "rotation_ab", ".", "apply", "(", "pointcloud2", ")", "+", "np", ".", "expand_dims", "(", "translation_ab", ",", "axis", "=", "0", ")", "\n", "\n", "\n", "\n", "# return method-wise data:", "\n", "inputs", "=", "[", "item", ",", "pointcloud1", ",", "pointcloud2", ",", "R_ab", ",", "translation_ab", ",", "R_ba", ",", "translation_ba", "]", "# pc shape: (N,3)        ", "\n", "\n", "if", "self", ".", "method", "==", "'pointnetlk'", ":", "\n", "\t\t\t", "return", "self", ".", "to_pointnetlk", "(", "*", "inputs", ")", "\n", "", "elif", "self", ".", "method", "==", "'pcrnet'", ":", "\n", "\t\t\t", "return", "self", ".", "to_pcrnet", "(", "*", "inputs", ")", "\n", "", "elif", "self", ".", "method", "==", "'pcrnet_corr'", ":", "\n", "\t\t\t", "return", "self", ".", "to_pcrnet_corr", "(", "*", "inputs", ",", "corr_mat_ab", ",", "euler_ab", ")", "\n", "", "elif", "self", ".", "method", "==", "'rpmnet'", ":", "\n", "\t\t\t", "return", "self", ".", "to_rpmnet", "(", "*", "inputs", ")", "\n", "", "elif", "(", "self", ".", "method", "==", "'dcp'", ")", "or", "(", "self", ".", "method", "==", "'prnet'", ")", ":", "\n", "\t\t\t", "pointcloud1", "=", "pointcloud1", ".", "T", "# changed to (3,N)", "\n", "pointcloud2", "=", "pointcloud2", ".", "T", "# changed to (3,N)", "\n", "\n", "return", "pointcloud1", ".", "astype", "(", "'float32'", ")", ",", "pointcloud2", ".", "astype", "(", "'float32'", ")", ",", "R_ab", ".", "astype", "(", "'float32'", ")", ",", "translation_ab", ".", "astype", "(", "'float32'", ")", ",", "R_ba", ".", "astype", "(", "'float32'", ")", ",", "translation_ba", ".", "astype", "(", "'float32'", ")", ",", "euler_ab", ".", "astype", "(", "'float32'", ")", ",", "euler_ba", ".", "astype", "(", "'float32'", ")", "\n", "\n", "", "else", ":", "# dcp_modified", "\n", "\t\t\t", "pointcloud1", "=", "pointcloud1", ".", "T", "# changed to (3,N)", "\n", "pointcloud2", "=", "pointcloud2", ".", "T", "# changed to (3,N)", "\n", "\n", "return", "pointcloud1", ".", "astype", "(", "'float32'", ")", ",", "pointcloud2", ".", "astype", "(", "'float32'", ")", ",", "R_ab", ".", "astype", "(", "'float32'", ")", ",", "translation_ab", ".", "astype", "(", "'float32'", ")", ",", "R_ba", ".", "astype", "(", "'float32'", ")", ",", "translation_ba", ".", "astype", "(", "'float32'", ")", ",", "euler_ab", ".", "astype", "(", "'float32'", ")", ",", "euler_ba", ".", "astype", "(", "'float32'", ")", ",", "corr_mat_ab", ".", "astype", "(", "'int64'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.PCRNet_Code.data.ModelNet40.__len__": [[252, 254], ["None"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "\t\t", "return", "self", ".", "data", ".", "shape", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.PCRNet_Code.data.ModelNet40.compute_corr_mat": [[255, 275], ["int", "scipy.spatial.KDTree", "scipy.spatial.KDTree.query", "numpy.zeros", "numpy.arange"], "methods", ["None"], ["", "def", "compute_corr_mat", "(", "self", ",", "pointcloud1", ",", "pointcloud2", ")", ":", "\n", "\n", "\t\t", "self", ".", "num_src", "=", "int", "(", "self", ".", "num_points", "*", "self", ".", "partial", ")", "\n", "self", ".", "num_tgt", "=", "self", ".", "num_points", "\n", "\n", "tree2", "=", "KDTree", "(", "pointcloud2", ")", "\n", "distance", ",", "col_idx_KDTree", "=", "tree2", ".", "query", "(", "pointcloud1", ")", "\n", "#         outlier_idx_KDTree = np.sort(np.where(distance > self.outl_thresh)[0] )", "\n", "\n", "corr_mat_ab_KDTree", "=", "np", ".", "zeros", "(", "(", "self", ".", "num_tgt", ",", "self", ".", "num_src", ")", ",", "dtype", "=", "np", ".", "int64", ")", "\n", "corr_mat_ab_KDTree", "[", "col_idx_KDTree", ",", "np", ".", "arange", "(", "self", ".", "num_src", ")", "]", "=", "1", "\n", "\n", "\n", "#         helper.display_two_clouds_corr_mat(pointcloud1+1,pointcloud2,corr_mat_ab_KDTree,disp_time=60)", "\n", "\n", "\n", "#         corr_mat_ab_KDTree[:,outlier_idx_KDTree] = 0", "\n", "#         corr_mat_ab_KDTree[-1,outlier_idx_KDTree] = 1", "\n", "\n", "return", "corr_mat_ab_KDTree", "\n", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.PCRNet_Code.data.ModelNet40.to_rpmnet": [[278, 301], ["numpy.concatenate().astype", "numpy.array", "numpy.concatenate"], "methods", ["home.repos.pwc.inspect_result.tzodge_PCR-CMU.math_torch.se3.concatenate"], ["", "def", "to_rpmnet", "(", "self", ",", "*", "inputs", ")", ":", "\n", "\t\t", "'''\n\t\titem           :- input to __getitem__() function\n\t\tpointcloud1    :- src    shape: (M,3)    M = N*partial\n\t\tpointcloud2    :- tgt    shape: (N,3)\n\t\tR_ab           :- R_ab * pointcloud1 + translation_ab = pointcloud2\n\t\ttranslation_ab :- same\n\t\tR_ba           :-  R_ab.T\n\t\ttranslation_ba :- -R_ba.dot(translation_ab)\n\t\t'''", "\n", "\n", "item", ",", "pointcloud1", ",", "pointcloud2", ",", "R_ab", ",", "translation_ab", ",", "R_ba", ",", "translation_ba", "=", "inputs", "\n", "\n", "sample", "=", "{", "'points_raw'", ":", "self", ".", "data", "[", "item", ",", ":", ",", ":", "]", ",", "'label'", ":", "self", ".", "label", "[", "item", "]", ",", "'idx'", ":", "np", ".", "array", "(", "item", ",", "dtype", "=", "np", ".", "int32", ")", "}", "\n", "\n", "sample", "[", "'points_src'", "]", "=", "pointcloud1", "\n", "sample", "[", "'points_ref'", "]", "=", "pointcloud2", "\n", "\n", "transform", "=", "np", ".", "concatenate", "(", "(", "R_ab", ",", "translation_ab", "[", ":", ",", "None", "]", ")", ",", "axis", "=", "1", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n", "sample", "[", "'transform_gt'", "]", "=", "transform", "\n", "\n", "return", "sample", "\n", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.PCRNet_Code.data.ModelNet40.to_pointnetlk": [[302, 324], ["numpy.concatenate", "numpy.concatenate", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.tzodge_PCR-CMU.math_torch.se3.concatenate", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.math_torch.se3.concatenate"], ["", "def", "to_pointnetlk", "(", "self", ",", "*", "inputs", ")", ":", "\n", "\t\t", "'''\n\t\titem           :- input to __getitem__() function\n\t\tpointcloud1    :- src    shape: (M,3)    M = N*partial\n\t\tpointcloud2    :- tgt    shape: (N,3)\n\t\tR_ab           :- R_ab * pointcloud1 + translation_ab = pointcloud2\n\t\ttranslation_ab :- same\n\t\tR_ba           :-  R_ab.T\n\t\ttranslation_ba :- -R_ba.dot(translation_ab)\n\t\t'''", "\n", "\n", "item", ",", "pointcloud1", ",", "pointcloud2", ",", "R_ab", ",", "translation_ab", ",", "R_ba", ",", "translation_ba", "=", "inputs", "\n", "\n", "train_classifier", "=", "False", "\n", "if", "train_classifier", ":", "\n", "\t\t\t", "return", "pointcloud1", ",", "self", ".", "label", "[", "item", "]", "\n", "", "else", ":", "\n", "# Train PointNetLK", "\n", "\n", "\t\t\t", "transform_gt_4x4", "=", "np", ".", "concatenate", "(", "[", "np", ".", "concatenate", "(", "(", "R_ab", ",", "translation_ab", "[", ":", ",", "None", "]", ")", ",", "axis", "=", "1", ")", ",", "\n", "np", ".", "array", "(", "[", "[", "0.0", ",", "0.0", ",", "0.0", ",", "1.0", "]", "]", ",", "dtype", "=", "np", ".", "float32", ")", "]", ",", "axis", "=", "0", ")", "\n", "return", "pointcloud1", ",", "pointcloud2", ",", "transform_gt_4x4", "\n", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.PCRNet_Code.data.ModelNet40.to_pcrnet": [[325, 341], ["numpy.concatenate().astype", "numpy.concatenate"], "methods", ["home.repos.pwc.inspect_result.tzodge_PCR-CMU.math_torch.se3.concatenate"], ["", "", "def", "to_pcrnet", "(", "self", ",", "*", "inputs", ")", ":", "\n", "\t\t", "'''\n\t\titem           :- input to __getitem__() function\n\t\tpointcloud1    :- src    shape: (M,3)    M = N*partial\n\t\tpointcloud2    :- tgt    shape: (N,3)\n\t\tR_ab           :- R_ab * pointcloud1 + translation_ab = pointcloud2\n\t\ttranslation_ab :- same\n\t\tR_ba           :-  R_ab.T\n\t\ttranslation_ba :- -R_ba.dot(translation_ab)\n\t\t'''", "\n", "\n", "item", ",", "pointcloud1", ",", "pointcloud2", ",", "R_ab", ",", "translation_ab", ",", "R_ba", ",", "translation_ba", "=", "inputs", "\n", "\n", "transform", "=", "np", ".", "concatenate", "(", "(", "R_ab", ",", "translation_ab", "[", ":", ",", "None", "]", ")", ",", "axis", "=", "1", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n", "return", "pointcloud1", ",", "pointcloud2", "\n", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.PCRNet_Code.data.ModelNet40.to_pcrnet_corr": [[342, 359], ["numpy.concatenate().astype", "R_ab.astype", "translation_ab.astype", "euler_ab.astype", "numpy.concatenate"], "methods", ["home.repos.pwc.inspect_result.tzodge_PCR-CMU.math_torch.se3.concatenate"], ["", "def", "to_pcrnet_corr", "(", "self", ",", "*", "inputs", ")", ":", "\n", "\t\t", "'''\n\t\titem           :- input to __getitem__() function\n\t\tpointcloud1    :- src    shape: (M,3)    M = N*partial\n\t\tpointcloud2    :- tgt    shape: (N,3)\n\t\tR_ab           :- R_ab * pointcloud1 + translation_ab = pointcloud2\n\t\ttranslation_ab :- same\n\t\tR_ba           :-  R_ab.T\n\t\ttranslation_ba :- -R_ba.dot(translation_ab)\n\t\tcorr_mat       :- shape=(num_tgt,num_src)\n\t\t'''", "\n", "\n", "item", ",", "pointcloud1", ",", "pointcloud2", ",", "R_ab", ",", "translation_ab", ",", "R_ba", ",", "translation_ba", ",", "corr_mat", ",", "euler_ab", "=", "inputs", "\n", "\n", "transform", "=", "np", ".", "concatenate", "(", "(", "R_ab", ",", "translation_ab", "[", ":", ",", "None", "]", ")", ",", "axis", "=", "1", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n", "return", "pointcloud1", ",", "pointcloud2", ",", "corr_mat", ",", "R_ab", ".", "astype", "(", "'float32'", ")", ",", "translation_ab", ".", "astype", "(", "'float32'", ")", ",", "euler_ab", ".", "astype", "(", "'float32'", ")", "# corr_mat shape: (num_tgt,num_src)", "\n", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.PCRNet_Code.data.uniform_2_sphere": [[24, 46], ["numpy.arccos", "numpy.cos", "numpy.stack", "numpy.random.uniform", "numpy.random.uniform", "numpy.random.uniform", "numpy.random.uniform", "numpy.sin", "numpy.cos", "numpy.sin", "numpy.sin"], "function", ["None"], ["def", "uniform_2_sphere", "(", "num", ":", "int", "=", "None", ")", ":", "\n", "\t", "\"\"\"Uniform sampling on a 2-sphere\n\tSource: https://gist.github.com/andrewbolster/10274979\n\tArgs:\n\t\tnum: Number of vectors to sample (or None if single)\n\tReturns:\n\t\tRandom Vector (np.ndarray) of size (num, 3) with norm 1.\n\t\tIf num is None returned value will have size (3,)\n\t\"\"\"", "\n", "if", "num", "is", "not", "None", ":", "\n", "\t\t", "phi", "=", "np", ".", "random", ".", "uniform", "(", "0.0", ",", "2", "*", "np", ".", "pi", ",", "num", ")", "\n", "cos_theta", "=", "np", ".", "random", ".", "uniform", "(", "-", "1.0", ",", "1.0", ",", "num", ")", "\n", "", "else", ":", "\n", "\t\t", "phi", "=", "np", ".", "random", ".", "uniform", "(", "0.0", ",", "2", "*", "np", ".", "pi", ")", "\n", "cos_theta", "=", "np", ".", "random", ".", "uniform", "(", "-", "1.0", ",", "1.0", ")", "\n", "\n", "", "theta", "=", "np", ".", "arccos", "(", "cos_theta", ")", "\n", "x", "=", "np", ".", "sin", "(", "theta", ")", "*", "np", ".", "cos", "(", "phi", ")", "\n", "y", "=", "np", ".", "sin", "(", "theta", ")", "*", "np", ".", "sin", "(", "phi", ")", "\n", "z", "=", "np", ".", "cos", "(", "theta", ")", "\n", "\n", "return", "np", ".", "stack", "(", "(", "x", ",", "y", ",", "z", ")", ",", "axis", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.PCRNet_Code.data.make_open3d_point_cloud": [[47, 53], ["o3d.geometry.PointCloud", "o3d.utility.Vector3dVector", "o3d.utility.Vector3dVector"], "function", ["None"], ["", "def", "make_open3d_point_cloud", "(", "xyz", ",", "color", "=", "None", ")", ":", "\n", "\t", "pcd", "=", "o3d", ".", "geometry", ".", "PointCloud", "(", ")", "\n", "pcd", ".", "points", "=", "o3d", ".", "utility", ".", "Vector3dVector", "(", "xyz", ")", "\n", "if", "color", "is", "not", "None", ":", "\n", "\t\t", "pcd", ".", "colors", "=", "o3d", ".", "utility", ".", "Vector3dVector", "(", "color", ")", "\n", "", "return", "pcd", "\n", "# The code is referred from: https://github.com/WangYueFt/dcp ", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.PCRNet_Code.data.download": [[55, 67], ["os.path.dirname", "os.path.join", "os.path.abspath", "os.path.exists", "os.mkdir", "os.path.exists", "os.path.basename", "os.system", "os.system", "os.system", "os.path.join"], "function", ["None"], ["", "def", "download", "(", ")", ":", "\n", "\t", "BASE_DIR", "=", "os", ".", "path", ".", "dirname", "(", "os", ".", "path", ".", "abspath", "(", "__file__", ")", ")", "\n", "DATA_DIR", "=", "os", ".", "path", ".", "join", "(", "BASE_DIR", ",", "'../datasets'", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "DATA_DIR", ")", ":", "\n", "\t\t", "os", ".", "mkdir", "(", "DATA_DIR", ")", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "DATA_DIR", ",", "'modelnet40_ply_hdf5_2048'", ")", ")", ":", "\n", "\t\t", "www", "=", "'https://shapenet.cs.stanford.edu/media/modelnet40_ply_hdf5_2048.zip'", "\n", "zipfile", "=", "os", ".", "path", ".", "basename", "(", "www", ")", "\n", "www", "+=", "' --no-check-certificate'", "\n", "os", ".", "system", "(", "'wget %s; unzip %s'", "%", "(", "www", ",", "zipfile", ")", ")", "\n", "os", ".", "system", "(", "'mv %s %s'", "%", "(", "zipfile", "[", ":", "-", "4", "]", ",", "DATA_DIR", ")", ")", "\n", "os", ".", "system", "(", "'rm %s'", "%", "(", "zipfile", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.PCRNet_Code.data.load_data": [[69, 85], ["os.path.dirname", "os.path.join", "glob.glob", "numpy.concatenate", "numpy.concatenate", "os.path.abspath", "os.path.join", "h5py.File", "[].astype", "[].astype", "h5py.File.close", "np.concatenate.append", "np.concatenate.append"], "function", ["home.repos.pwc.inspect_result.tzodge_PCR-CMU.math_torch.se3.concatenate", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.math_torch.se3.concatenate", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.main.IOStream.close"], ["", "", "def", "load_data", "(", "partition", ")", ":", "\n", "#     download()", "\n", "\t", "BASE_DIR", "=", "os", ".", "path", ".", "dirname", "(", "os", ".", "path", ".", "abspath", "(", "__file__", ")", ")", "\n", "DATA_DIR", "=", "os", ".", "path", ".", "join", "(", "BASE_DIR", ",", "'../datasets'", ")", "# change accordingly", "\n", "all_data", "=", "[", "]", "\n", "all_label", "=", "[", "]", "\n", "for", "h5_name", "in", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "DATA_DIR", ",", "'modelnet40_ply_hdf5_2048'", ",", "'ply_data_%s*.h5'", "%", "partition", ")", ")", ":", "\n", "\t\t", "f", "=", "h5py", ".", "File", "(", "h5_name", ")", "\n", "data", "=", "f", "[", "'data'", "]", "[", ":", "]", ".", "astype", "(", "'float32'", ")", "\n", "label", "=", "f", "[", "'label'", "]", "[", ":", "]", ".", "astype", "(", "'int64'", ")", "\n", "f", ".", "close", "(", ")", "\n", "all_data", ".", "append", "(", "data", ")", "\n", "all_label", ".", "append", "(", "label", ")", "\n", "", "all_data", "=", "np", ".", "concatenate", "(", "all_data", ",", "axis", "=", "0", ")", "\n", "all_label", "=", "np", ".", "concatenate", "(", "all_label", ",", "axis", "=", "0", ")", "\n", "return", "all_data", ",", "all_label", "\n", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.PCRNet_Code.data.jitter_pointcloud": [[95, 99], ["numpy.clip", "numpy.random.randn"], "function", ["None"], ["", "def", "jitter_pointcloud", "(", "pointcloud", ",", "sigma", "=", "0.01", ",", "clip", "=", "0.05", ")", ":", "\n", "\t", "N", ",", "C", "=", "pointcloud", ".", "shape", "\n", "pointcloud", "+=", "np", ".", "clip", "(", "sigma", "*", "np", ".", "random", ".", "randn", "(", "N", ",", "C", ")", ",", "-", "1", "*", "clip", ",", "clip", ")", "\n", "return", "pointcloud", "\n", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.PCRNet_Code.model.PointNet.__init__": [[21, 33], ["torch.Module.__init__", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d"], "methods", ["home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.model.DCP.__init__"], ["    ", "def", "__init__", "(", "self", ",", "emb_dims", "=", "512", ")", ":", "\n", "        ", "super", "(", "PointNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv1d", "(", "3", ",", "64", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv1d", "(", "64", ",", "64", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv1d", "(", "64", ",", "64", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv4", "=", "nn", ".", "Conv1d", "(", "64", ",", "128", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv5", "=", "nn", ".", "Conv1d", "(", "128", ",", "emb_dims", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm1d", "(", "64", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm1d", "(", "64", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm1d", "(", "64", ")", "\n", "self", ".", "bn4", "=", "nn", ".", "BatchNorm1d", "(", "128", ")", "\n", "self", ".", "bn5", "=", "nn", ".", "BatchNorm1d", "(", "emb_dims", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.PCRNet_Code.model.PointNet.forward": [[34, 41], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "model.PointNet.bn1", "model.PointNet.bn2", "model.PointNet.bn3", "model.PointNet.bn4", "model.PointNet.bn5", "model.PointNet.conv1", "model.PointNet.conv2", "model.PointNet.conv3", "model.PointNet.conv4", "model.PointNet.conv5"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "x", ")", ")", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "bn3", "(", "self", ".", "conv3", "(", "x", ")", ")", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "bn4", "(", "self", ".", "conv4", "(", "x", ")", ")", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "bn5", "(", "self", ".", "conv5", "(", "x", ")", ")", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.PCRNet_Code.model.Pooling.__init__": [[44, 47], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.model.DCP.__init__"], ["    ", "def", "__init__", "(", "self", ",", "pool_type", "=", "'max'", ")", ":", "\n", "        ", "self", ".", "pool_type", "=", "pool_type", "\n", "super", "(", "Pooling", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.PCRNet_Code.model.Pooling.forward": [[48, 53], ["[].contiguous", "torch.mean().contiguous", "torch.mean().contiguous", "torch.mean().contiguous", "torch.mean().contiguous", "torch.mean().contiguous", "torch.mean().contiguous", "torch.mean().contiguous", "torch.mean().contiguous", "torch.mean().contiguous", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "if", "self", ".", "pool_type", "==", "'max'", ":", "\n", "            ", "return", "torch", ".", "max", "(", "input", ",", "2", ")", "[", "0", "]", ".", "contiguous", "(", ")", "\n", "", "elif", "self", ".", "pool_type", "==", "'avg'", "or", "self", ".", "pool_type", "==", "'average'", ":", "\n", "            ", "return", "torch", ".", "mean", "(", "input", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.PCRNet_Code.model.iPCRNet.__init__": [[56, 72], ["model.PointNet", "torch.Module.__init__", "model.Pooling", "model.iPCRNet.linear.append", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "model.iPCRNet.linear.append", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.model.DCP.__init__"], ["    ", "def", "__init__", "(", "self", ",", "feature_model", "=", "PointNet", "(", "emb_dims", "=", "1024", ")", ",", "droput", "=", "0.0", ",", "pooling", "=", "'max'", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "feature_model", "=", "feature_model", "\n", "self", ".", "pooling", "=", "Pooling", "(", "pooling", ")", "\n", "\n", "self", ".", "linear", "=", "[", "nn", ".", "Linear", "(", "self", ".", "feature_model", ".", "emb_dims", "*", "2", ",", "1024", ")", ",", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "1024", ",", "1024", ")", ",", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "1024", ",", "512", ")", ",", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "512", ",", "512", ")", ",", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "512", ",", "256", ")", ",", "nn", ".", "ReLU", "(", ")", "]", "\n", "\n", "if", "droput", ">", "0.0", ":", "\n", "            ", "self", ".", "linear", ".", "append", "(", "nn", ".", "Dropout", "(", "droput", ")", ")", "\n", "", "self", ".", "linear", ".", "append", "(", "nn", ".", "Linear", "(", "256", ",", "7", ")", ")", "\n", "\n", "self", ".", "linear", "=", "nn", ".", "Sequential", "(", "*", "self", ".", "linear", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.PCRNet_Code.model.iPCRNet.spam": [[74, 94], ["ops.transform_functions.PCRNetTransform.quaternion_transform.size", "model.iPCRNet.pooling", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "model.iPCRNet.linear", "ops.transform_functions.PCRNetTransform.create_pose_7d", "torch.eye().to().view().expand().contiguous", "torch.eye().to().view().expand().contiguous", "torch.eye().to().view().expand().contiguous", "torch.eye().to().view().expand().contiguous", "torch.eye().to().view().expand().contiguous", "torch.eye().to().view().expand().contiguous", "torch.eye().to().view().expand().contiguous", "torch.eye().to().view().expand().contiguous", "torch.eye().to().view().expand().contiguous", "ops.transform_functions.PCRNetTransform.quaternion_rotate().permute", "ops.transform_functions.PCRNetTransform.get_translation().view", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "ops.transform_functions.PCRNetTransform.quaternion_transform", "model.iPCRNet.feature_model", "torch.bmm().permute", "torch.bmm().permute", "torch.bmm().permute", "torch.bmm().permute", "torch.bmm().permute", "torch.bmm().permute", "torch.bmm().permute", "torch.bmm().permute", "torch.bmm().permute", "torch.eye().to().view().expand", "torch.eye().to().view().expand", "torch.eye().to().view().expand", "torch.eye().to().view().expand", "torch.eye().to().view().expand", "torch.eye().to().view().expand", "torch.eye().to().view().expand", "torch.eye().to().view().expand", "torch.eye().to().view().expand", "ops.transform_functions.PCRNetTransform.quaternion_rotate", "ops.transform_functions.PCRNetTransform.get_translation", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.eye().to().view", "torch.eye().to().view", "torch.eye().to().view", "torch.eye().to().view", "torch.eye().to().view", "torch.eye().to().view", "torch.eye().to().view", "torch.eye().to().view", "torch.eye().to().view", "est_t.permute", "torch.eye().to", "torch.eye().to", "torch.eye().to", "torch.eye().to", "torch.eye().to", "torch.eye().to", "torch.eye().to", "torch.eye().to", "torch.eye().to", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye"], "methods", ["home.repos.pwc.inspect_result.tzodge_PCR-CMU.ops.transform_functions.PCRNetTransform.create_pose_7d", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.ops.transform_functions.PCRNetTransform.quaternion_transform", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.ops.transform_functions.PCRNetTransform.quaternion_rotate", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.ops.transform_functions.PCRNetTransform.get_translation"], ["", "def", "spam", "(", "self", ",", "template_features", ",", "source", ",", "est_R", ",", "est_t", ")", ":", "\n", "        ", "batch_size", "=", "source", ".", "size", "(", "0", ")", "\n", "\n", "self", ".", "source_features", "=", "self", ".", "pooling", "(", "self", ".", "feature_model", "(", "source", ")", ")", "\n", "y", "=", "torch", ".", "cat", "(", "[", "template_features", ",", "self", ".", "source_features", "]", ",", "dim", "=", "1", ")", "\n", "pose_7d", "=", "self", ".", "linear", "(", "y", ")", "\n", "pose_7d", "=", "transform", ".", "create_pose_7d", "(", "pose_7d", ")", "\n", "\n", "# Find current rotation and translation.", "\n", "identity", "=", "torch", ".", "eye", "(", "3", ")", ".", "to", "(", "source", ")", ".", "view", "(", "1", ",", "3", ",", "3", ")", ".", "expand", "(", "batch_size", ",", "3", ",", "3", ")", ".", "contiguous", "(", ")", "\n", "est_R_temp", "=", "transform", ".", "quaternion_rotate", "(", "identity", ",", "pose_7d", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "est_t_temp", "=", "transform", ".", "get_translation", "(", "pose_7d", ")", ".", "view", "(", "-", "1", ",", "1", ",", "3", ")", "\n", "\n", "# update translation matrix.", "\n", "est_t", "=", "torch", ".", "bmm", "(", "est_R_temp", ",", "est_t", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "+", "est_t_temp", "\n", "# update rotation matrix.", "\n", "est_R", "=", "torch", ".", "bmm", "(", "est_R_temp", ",", "est_R", ")", "\n", "\n", "source", "=", "transform", ".", "quaternion_transform", "(", "source", ",", "pose_7d", ")", "# Ps' = est_R*Ps + est_t", "\n", "return", "est_R", ",", "est_t", ",", "source", "\n", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.PCRNet_Code.model.iPCRNet.forward": [[95, 112], ["torch.eye().to().view().expand().contiguous", "torch.eye().to().view().expand().contiguous", "torch.eye().to().view().expand().contiguous", "torch.eye().to().view().expand().contiguous", "torch.eye().to().view().expand().contiguous", "torch.eye().to().view().expand().contiguous", "torch.eye().to().view().expand().contiguous", "torch.eye().to().view().expand().contiguous", "torch.eye().to().view().expand().contiguous", "torch.zeros().to().view().expand().contiguous", "torch.zeros().to().view().expand().contiguous", "torch.zeros().to().view().expand().contiguous", "torch.zeros().to().view().expand().contiguous", "torch.zeros().to().view().expand().contiguous", "torch.zeros().to().view().expand().contiguous", "torch.zeros().to().view().expand().contiguous", "torch.zeros().to().view().expand().contiguous", "torch.zeros().to().view().expand().contiguous", "model.iPCRNet.pooling", "model.iPCRNet.feature_model", "model.iPCRNet.spam", "range", "ops.transform_functions.PCRNetTransform.convert2transformation", "torch.eye().to().view().expand", "torch.eye().to().view().expand", "torch.eye().to().view().expand", "torch.eye().to().view().expand", "torch.eye().to().view().expand", "torch.eye().to().view().expand", "torch.eye().to().view().expand", "torch.eye().to().view().expand", "torch.eye().to().view().expand", "torch.zeros().to().view().expand", "torch.zeros().to().view().expand", "torch.zeros().to().view().expand", "torch.zeros().to().view().expand", "torch.zeros().to().view().expand", "torch.zeros().to().view().expand", "torch.zeros().to().view().expand", "torch.zeros().to().view().expand", "torch.zeros().to().view().expand", "model.iPCRNet.spam", "template.size", "template.size", "torch.eye().to().view", "torch.eye().to().view", "torch.eye().to().view", "torch.eye().to().view", "torch.eye().to().view", "torch.eye().to().view", "torch.eye().to().view", "torch.eye().to().view", "torch.eye().to().view", "torch.zeros().to().view", "torch.zeros().to().view", "torch.zeros().to().view", "torch.zeros().to().view", "torch.zeros().to().view", "torch.zeros().to().view", "torch.zeros().to().view", "torch.zeros().to().view", "torch.zeros().to().view", "torch.eye().to", "torch.eye().to", "torch.eye().to", "torch.eye().to", "torch.eye().to", "torch.eye().to", "torch.eye().to", "torch.eye().to", "torch.eye().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.tzodge_PCR-CMU.PCRNet_Code.model.iPCRNet.spam", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.ops.transform_functions.convert2transformation", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.PCRNet_Code.model.iPCRNet.spam"], ["", "def", "forward", "(", "self", ",", "template", ",", "source", ",", "max_iteration", "=", "8", ")", ":", "\n", "        ", "est_R", "=", "torch", ".", "eye", "(", "3", ")", ".", "to", "(", "template", ")", ".", "view", "(", "1", ",", "3", ",", "3", ")", ".", "expand", "(", "template", ".", "size", "(", "0", ")", ",", "3", ",", "3", ")", ".", "contiguous", "(", ")", "# (Bx3x3)", "\n", "est_t", "=", "torch", ".", "zeros", "(", "1", ",", "3", ")", ".", "to", "(", "template", ")", ".", "view", "(", "1", ",", "1", ",", "3", ")", ".", "expand", "(", "template", ".", "size", "(", "0", ")", ",", "1", ",", "3", ")", ".", "contiguous", "(", ")", "# (Bx1x3)", "\n", "template_features", "=", "self", ".", "pooling", "(", "self", ".", "feature_model", "(", "template", ")", ")", "\n", "\n", "if", "max_iteration", "==", "1", ":", "\n", "            ", "est_R", ",", "est_t", ",", "source", "=", "self", ".", "spam", "(", "template_features", ",", "source", ",", "est_R", ",", "est_t", ")", "\n", "", "else", ":", "\n", "            ", "for", "i", "in", "range", "(", "max_iteration", ")", ":", "\n", "                ", "est_R", ",", "est_t", ",", "source", "=", "self", ".", "spam", "(", "template_features", ",", "source", ",", "est_R", ",", "est_t", ")", "\n", "\n", "", "", "result", "=", "{", "'est_R'", ":", "est_R", ",", "# source -> template", "\n", "'est_t'", ":", "est_t", ",", "# source -> template", "\n", "'est_T'", ":", "transform", ".", "convert2transformation", "(", "est_R", ",", "est_t", ")", ",", "# source -> template", "\n", "'r'", ":", "template_features", "-", "self", ".", "source_features", ",", "\n", "'transformed_source'", ":", "source", "}", "\n", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.PCRNet_Code.model.MLPHead.__init__": [[115, 130], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.model.DCP.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "super", "(", "MLPHead", ",", "self", ")", ".", "__init__", "(", ")", "\n", "emb_dims", "=", "args", ".", "emb_dims", "\n", "self", ".", "emb_dims", "=", "emb_dims", "\n", "self", ".", "nn", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "emb_dims", "*", "2", ",", "emb_dims", "//", "2", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "emb_dims", "//", "2", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "emb_dims", "//", "2", ",", "emb_dims", "//", "4", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "emb_dims", "//", "4", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "emb_dims", "//", "4", ",", "emb_dims", "//", "8", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "emb_dims", "//", "8", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ")", "\n", "self", ".", "proj_rot", "=", "nn", ".", "Linear", "(", "emb_dims", "//", "8", ",", "4", ")", "\n", "self", ".", "proj_trans", "=", "nn", ".", "Linear", "(", "emb_dims", "//", "8", ",", "3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.PCRNet_Code.model.MLPHead.forward": [[131, 140], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "model.MLPHead.nn", "model.MLPHead.proj_rot", "model.MLPHead.proj_trans", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "util.quat2mat", "model.MLPHead.max"], "methods", ["home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.util.quat2mat"], ["", "def", "forward", "(", "self", ",", "*", "input", ")", ":", "\n", "        ", "src_embedding", "=", "input", "[", "0", "]", "\n", "tgt_embedding", "=", "input", "[", "1", "]", "\n", "embedding", "=", "torch", ".", "cat", "(", "(", "src_embedding", ",", "tgt_embedding", ")", ",", "dim", "=", "1", ")", "\n", "embedding", "=", "self", ".", "nn", "(", "embedding", ".", "max", "(", "dim", "=", "-", "1", ")", "[", "0", "]", ")", "\n", "rotation", "=", "self", ".", "proj_rot", "(", "embedding", ")", "\n", "rotation", "=", "rotation", "/", "torch", ".", "norm", "(", "rotation", ",", "p", "=", "2", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "translation", "=", "self", ".", "proj_trans", "(", "embedding", ")", "\n", "return", "quat2mat", "(", "rotation", ")", ",", "translation", "\n", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.PCRNet_Code.model.SVDHead.__init__": [[143, 148], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye"], "methods", ["home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.model.DCP.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "super", "(", "SVDHead", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "emb_dims", "=", "args", ".", "emb_dims", "\n", "self", ".", "reflect", "=", "nn", ".", "Parameter", "(", "torch", ".", "eye", "(", "3", ")", ",", "requires_grad", "=", "False", ")", "\n", "self", ".", "reflect", "[", "2", ",", "2", "]", "=", "-", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.PCRNet_Code.model.SVDHead.forward": [[149, 194], ["src.size", "src_embedding.size", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "range", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "math.sqrt", "torch.softmax.transpose().contiguous", "torch.softmax.transpose().contiguous", "torch.softmax.transpose().contiguous", "src.mean", "torch.matmul.mean", "torch.matmul.mean", "torch.matmul.mean", "src_corr_centered.transpose().contiguous", "src.size", "torch.svd", "torch.svd", "torch.svd", "torch.svd", "torch.svd", "torch.svd", "torch.svd", "torch.svd", "torch.svd", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.det", "torch.det", "torch.det", "torch.det", "torch.det", "torch.det", "torch.det", "torch.det", "torch.det", "torch.stack.append", "torch.stack.append", "torch.stack.append", "torch.stack.append", "torch.stack.append", "torch.stack.append", "torch.stack.append", "torch.stack.append", "torch.stack.append", "torch.stack.append", "torch.stack.append", "torch.stack.append", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul.mean", "torch.matmul.mean", "torch.matmul.mean", "t.view", "src_embedding.transpose().contiguous", "u.transpose().contiguous", "torch.svd", "torch.svd", "torch.svd", "torch.svd", "torch.svd", "torch.svd", "torch.svd", "torch.svd", "torch.svd", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "src.mean", "torch.softmax.transpose", "torch.softmax.transpose", "torch.softmax.transpose", "src_corr_centered.transpose", "u.transpose().contiguous", "src_embedding.transpose", "u.transpose", "u.transpose"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "*", "input", ")", ":", "\n", "        ", "src_embedding", "=", "input", "[", "0", "]", "\n", "tgt_embedding", "=", "input", "[", "1", "]", "\n", "src", "=", "input", "[", "2", "]", "\n", "tgt", "=", "input", "[", "3", "]", "\n", "batch_size", "=", "src", ".", "size", "(", "0", ")", "\n", "\n", "d_k", "=", "src_embedding", ".", "size", "(", "1", ")", "\n", "scores", "=", "torch", ".", "matmul", "(", "src_embedding", ".", "transpose", "(", "2", ",", "1", ")", ".", "contiguous", "(", ")", ",", "tgt_embedding", ")", "/", "math", ".", "sqrt", "(", "d_k", ")", "\n", "raw_scores", "=", "scores", "\n", "scores", "=", "torch", ".", "softmax", "(", "scores", ",", "dim", "=", "2", ")", "\n", "\n", "src_corr", "=", "torch", ".", "matmul", "(", "tgt", ",", "scores", ".", "transpose", "(", "2", ",", "1", ")", ".", "contiguous", "(", ")", ")", "\n", "\n", "src_centered", "=", "src", "-", "src", ".", "mean", "(", "dim", "=", "2", ",", "keepdim", "=", "True", ")", "\n", "\n", "src_corr_centered", "=", "src_corr", "-", "src_corr", ".", "mean", "(", "dim", "=", "2", ",", "keepdim", "=", "True", ")", "\n", "\n", "H", "=", "torch", ".", "matmul", "(", "src_centered", ",", "src_corr_centered", ".", "transpose", "(", "2", ",", "1", ")", ".", "contiguous", "(", ")", ")", "\n", "\n", "U", ",", "S", ",", "V", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "R", "=", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "src", ".", "size", "(", "0", ")", ")", ":", "\n", "            ", "u", ",", "s", ",", "v", "=", "torch", ".", "svd", "(", "H", "[", "i", "]", ")", "\n", "r", "=", "torch", ".", "matmul", "(", "v", ",", "u", ".", "transpose", "(", "1", ",", "0", ")", ".", "contiguous", "(", ")", ")", "\n", "r_det", "=", "torch", ".", "det", "(", "r", ")", "\n", "if", "r_det", "<", "0", ":", "\n", "                ", "u", ",", "s", ",", "v", "=", "torch", ".", "svd", "(", "H", "[", "i", "]", ")", "\n", "v", "=", "torch", ".", "matmul", "(", "v", ",", "self", ".", "reflect", ")", "\n", "r", "=", "torch", ".", "matmul", "(", "v", ",", "u", ".", "transpose", "(", "1", ",", "0", ")", ".", "contiguous", "(", ")", ")", "\n", "# r = r * self.reflect", "\n", "", "R", ".", "append", "(", "r", ")", "\n", "\n", "U", ".", "append", "(", "u", ")", "\n", "S", ".", "append", "(", "s", ")", "\n", "V", ".", "append", "(", "v", ")", "\n", "\n", "", "U", "=", "torch", ".", "stack", "(", "U", ",", "dim", "=", "0", ")", "\n", "V", "=", "torch", ".", "stack", "(", "V", ",", "dim", "=", "0", ")", "\n", "S", "=", "torch", ".", "stack", "(", "S", ",", "dim", "=", "0", ")", "\n", "R", "=", "torch", ".", "stack", "(", "R", ",", "dim", "=", "0", ")", "\n", "\n", "t", "=", "torch", ".", "matmul", "(", "-", "R", ",", "src", ".", "mean", "(", "dim", "=", "2", ",", "keepdim", "=", "True", ")", ")", "+", "src_corr", ".", "mean", "(", "dim", "=", "2", ",", "keepdim", "=", "True", ")", "\n", "return", "R", ",", "t", ".", "view", "(", "batch_size", ",", "3", ")", ",", "raw_scores", "\n", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.PCRNet_Code.model.PCRNet_corr.__init__": [[197, 209], ["torch.Module.__init__", "model.PointNet", "model.MLPHead", "model.SVDHead", "Exception"], "methods", ["home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.model.DCP.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "super", "(", "PCRNet_corr", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "emb_dims", "=", "args", ".", "emb_dims", "\n", "self", ".", "cycle", "=", "args", ".", "cycle", "\n", "self", ".", "emb_nn", "=", "PointNet", "(", "emb_dims", "=", "self", ".", "emb_dims", ")", "\n", "\n", "if", "args", ".", "head", "==", "'mlp'", ":", "\n", "            ", "self", ".", "head", "=", "MLPHead", "(", "args", "=", "args", ")", "\n", "", "elif", "args", ".", "head", "==", "'svd'", ":", "\n", "            ", "self", ".", "head", "=", "SVDHead", "(", "args", "=", "args", ")", "\n", "", "else", ":", "\n", "            ", "raise", "Exception", "(", "'Not implemented'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.PCRNet_Code.model.PCRNet_corr.forward": [[210, 224], ["model.PCRNet_corr.emb_nn", "model.PCRNet_corr.emb_nn", "model.PCRNet_corr.head", "model.PCRNet_corr.head", "rotation_ab.transpose().contiguous", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "rotation_ab.transpose", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "translation_ab.unsqueeze"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "*", "input", ")", ":", "\n", "        ", "src", "=", "input", "[", "0", "]", "\n", "tgt", "=", "input", "[", "1", "]", "\n", "src_embedding", "=", "self", ".", "emb_nn", "(", "src", ")", "\n", "tgt_embedding", "=", "self", ".", "emb_nn", "(", "tgt", ")", "\n", "\n", "rotation_ab", ",", "translation_ab", ",", "raw_scores", "=", "self", ".", "head", "(", "src_embedding", ",", "tgt_embedding", ",", "src", ",", "tgt", ")", "\n", "\n", "if", "self", ".", "cycle", ":", "\n", "            ", "rotation_ba", ",", "translation_ba", ",", "_", "=", "self", ".", "head", "(", "tgt_embedding", ",", "src_embedding", ",", "tgt", ",", "src", ")", "\n", "", "else", ":", "\n", "            ", "rotation_ba", "=", "rotation_ab", ".", "transpose", "(", "2", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "translation_ba", "=", "-", "torch", ".", "matmul", "(", "rotation_ba", ",", "translation_ab", ".", "unsqueeze", "(", "2", ")", ")", ".", "squeeze", "(", "2", ")", "\n", "", "return", "rotation_ab", ",", "translation_ab", ",", "rotation_ba", ",", "translation_ba", ",", "raw_scores", "\n", "", "", ""]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.PCRNet_Code.util.quat2mat": [[18, 31], ["quat.size", "torch.stack().reshape", "torch.stack().reshape", "torch.stack().reshape", "torch.stack().reshape", "w.pow", "x.pow", "y.pow", "z.pow", "torch.stack", "torch.stack", "torch.stack", "torch.stack"], "function", ["None"], ["def", "quat2mat", "(", "quat", ")", ":", "\n", "    ", "x", ",", "y", ",", "z", ",", "w", "=", "quat", "[", ":", ",", "0", "]", ",", "quat", "[", ":", ",", "1", "]", ",", "quat", "[", ":", ",", "2", "]", ",", "quat", "[", ":", ",", "3", "]", "\n", "\n", "B", "=", "quat", ".", "size", "(", "0", ")", "\n", "\n", "w2", ",", "x2", ",", "y2", ",", "z2", "=", "w", ".", "pow", "(", "2", ")", ",", "x", ".", "pow", "(", "2", ")", ",", "y", ".", "pow", "(", "2", ")", ",", "z", ".", "pow", "(", "2", ")", "\n", "wx", ",", "wy", ",", "wz", "=", "w", "*", "x", ",", "w", "*", "y", ",", "w", "*", "z", "\n", "xy", ",", "xz", ",", "yz", "=", "x", "*", "y", ",", "x", "*", "z", ",", "y", "*", "z", "\n", "\n", "rotMat", "=", "torch", ".", "stack", "(", "[", "w2", "+", "x2", "-", "y2", "-", "z2", ",", "2", "*", "xy", "-", "2", "*", "wz", ",", "2", "*", "wy", "+", "2", "*", "xz", ",", "\n", "2", "*", "wz", "+", "2", "*", "xy", ",", "w2", "-", "x2", "+", "y2", "-", "z2", ",", "2", "*", "yz", "-", "2", "*", "wx", ",", "\n", "2", "*", "xz", "-", "2", "*", "wy", ",", "2", "*", "wx", "+", "2", "*", "yz", ",", "w2", "-", "x2", "-", "y2", "+", "z2", "]", ",", "dim", "=", "1", ")", ".", "reshape", "(", "B", ",", "3", ",", "3", ")", "\n", "return", "rotMat", "\n", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.PCRNet_Code.util.transform_point_cloud": [[33, 39], ["len", "util.quat2mat", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "translation.unsqueeze", "rotation.size"], "function", ["home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.util.quat2mat"], ["", "def", "transform_point_cloud", "(", "point_cloud", ",", "rotation", ",", "translation", ")", ":", "\n", "    ", "if", "len", "(", "rotation", ".", "size", "(", ")", ")", "==", "2", ":", "\n", "        ", "rot_mat", "=", "quat2mat", "(", "rotation", ")", "\n", "", "else", ":", "\n", "        ", "rot_mat", "=", "rotation", "\n", "", "return", "torch", ".", "matmul", "(", "rot_mat", ",", "point_cloud", ")", "+", "translation", ".", "unsqueeze", "(", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.PCRNet_Code.util.npmat2euler": [[41, 47], ["range", "numpy.asarray", "scipy.spatial.transform.Rotation.from_dcm", "eulers.append", "Rotation.from_dcm.as_euler"], "function", ["None"], ["", "def", "npmat2euler", "(", "mats", ",", "seq", "=", "'zyx'", ")", ":", "\n", "    ", "eulers", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "mats", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "r", "=", "Rotation", ".", "from_dcm", "(", "mats", "[", "i", "]", ")", "\n", "eulers", ".", "append", "(", "r", ".", "as_euler", "(", "seq", ",", "degrees", "=", "True", ")", ")", "\n", "", "return", "np", ".", "asarray", "(", "eulers", ",", "dtype", "=", "'float32'", ")", "", "", ""]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.ops.transform_functions.PCRNetTransform.__init__": [[108, 114], ["transform_functions.PCRNetTransform.create_random_transform", "range"], "methods", ["home.repos.pwc.inspect_result.tzodge_PCR-CMU.ops.transform_functions.PCRNetTransform.create_random_transform"], ["    ", "def", "__init__", "(", "self", ",", "data_size", ",", "angle_range", "=", "45", ",", "translation_range", "=", "1", ")", ":", "\n", "        ", "self", ".", "angle_range", "=", "angle_range", "\n", "self", ".", "translation_range", "=", "translation_range", "\n", "self", ".", "dtype", "=", "torch", ".", "float32", "\n", "self", ".", "transformations", "=", "[", "self", ".", "create_random_transform", "(", "torch", ".", "float32", ",", "self", ".", "angle_range", ",", "self", ".", "translation_range", ")", "for", "_", "in", "range", "(", "data_size", ")", "]", "\n", "self", ".", "index", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.ops.transform_functions.PCRNetTransform.deg_to_rad": [[115, 118], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "deg_to_rad", "(", "deg", ")", ":", "\n", "        ", "return", "np", ".", "pi", "/", "180", "*", "deg", "\n", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.ops.transform_functions.PCRNetTransform.create_random_transform": [[119, 128], ["transform_functions.PCRNetTransform.deg_to_rad", "numpy.random.uniform", "numpy.random.uniform", "transform_functions.euler_to_quaternion", "numpy.concatenate", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.tzodge_PCR-CMU.ops.transform_functions.PCRNetTransform.deg_to_rad", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.ops.quaternion.euler_to_quaternion", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.math_torch.se3.concatenate"], ["", "def", "create_random_transform", "(", "self", ",", "dtype", ",", "max_rotation_deg", ",", "max_translation", ")", ":", "\n", "        ", "max_rotation", "=", "self", ".", "deg_to_rad", "(", "max_rotation_deg", ")", "\n", "rot", "=", "np", ".", "random", ".", "uniform", "(", "-", "max_rotation", ",", "max_rotation", ",", "[", "1", ",", "3", "]", ")", "\n", "trans", "=", "np", ".", "random", ".", "uniform", "(", "-", "max_translation", ",", "max_translation", ",", "[", "1", ",", "3", "]", ")", "\n", "quat", "=", "euler_to_quaternion", "(", "rot", ",", "\"xyz\"", ")", "\n", "\n", "vec", "=", "np", ".", "concatenate", "(", "[", "quat", ",", "trans", "]", ",", "axis", "=", "1", ")", "\n", "vec", "=", "torch", ".", "tensor", "(", "vec", ",", "dtype", "=", "dtype", ")", "\n", "return", "vec", "\n", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.ops.transform_functions.PCRNetTransform.create_pose_7d": [[129, 139], ["torch.normalize", "torch.normalize", "torch.normalize", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat.view", "torch.cat.view", "torch.cat.view"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "create_pose_7d", "(", "vector", ":", "torch", ".", "Tensor", ")", ":", "\n", "# Normalize the quaternion.", "\n", "        ", "pre_normalized_quaternion", "=", "vector", "[", ":", ",", "0", ":", "4", "]", "\n", "normalized_quaternion", "=", "F", ".", "normalize", "(", "pre_normalized_quaternion", ",", "dim", "=", "1", ")", "\n", "\n", "# B x 7 vector of 4 quaternions and 3 translation parameters", "\n", "translation", "=", "vector", "[", ":", ",", "4", ":", "]", "\n", "vector", "=", "torch", ".", "cat", "(", "[", "normalized_quaternion", ",", "translation", "]", ",", "dim", "=", "1", ")", "\n", "return", "vector", ".", "view", "(", "[", "-", "1", ",", "7", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.ops.transform_functions.PCRNetTransform.get_quaternion": [[140, 143], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "get_quaternion", "(", "pose_7d", ":", "torch", ".", "Tensor", ")", ":", "\n", "        ", "return", "pose_7d", "[", ":", ",", "0", ":", "4", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.ops.transform_functions.PCRNetTransform.get_translation": [[144, 147], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "get_translation", "(", "pose_7d", ":", "torch", ".", "Tensor", ")", ":", "\n", "        ", "return", "pose_7d", "[", ":", ",", "4", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.ops.transform_functions.PCRNetTransform.quaternion_rotate": [[148, 164], ["point_cloud.dim", "PCRNetTransform.get_quaternion().expand", "quaternion.qrot", "PCRNetTransform.get_quaternion().unsqueeze().expand().contiguous", "quaternion.qrot", "transform_functions.PCRNetTransform.get_quaternion", "PCRNetTransform.get_quaternion().unsqueeze().expand", "PCRNetTransform.get_quaternion().unsqueeze", "transform_functions.PCRNetTransform.get_quaternion"], "methods", ["home.repos.pwc.inspect_result.tzodge_PCR-CMU.ops.quaternion.qrot", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.ops.quaternion.qrot", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.ops.transform_functions.PCRNetTransform.get_quaternion", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.ops.transform_functions.PCRNetTransform.get_quaternion"], ["", "@", "staticmethod", "\n", "def", "quaternion_rotate", "(", "point_cloud", ":", "torch", ".", "Tensor", ",", "pose_7d", ":", "torch", ".", "Tensor", ")", ":", "\n", "        ", "ndim", "=", "point_cloud", ".", "dim", "(", ")", "\n", "if", "ndim", "==", "2", ":", "\n", "            ", "N", ",", "_", "=", "point_cloud", ".", "shape", "\n", "assert", "pose_7d", ".", "shape", "[", "0", "]", "==", "1", "\n", "# repeat transformation vector for each point in shape", "\n", "quat", "=", "PCRNetTransform", ".", "get_quaternion", "(", "pose_7d", ")", ".", "expand", "(", "[", "N", ",", "-", "1", "]", ")", "\n", "rotated_point_cloud", "=", "quaternion", ".", "qrot", "(", "quat", ",", "point_cloud", ")", "\n", "\n", "", "elif", "ndim", "==", "3", ":", "\n", "            ", "B", ",", "N", ",", "_", "=", "point_cloud", ".", "shape", "\n", "quat", "=", "PCRNetTransform", ".", "get_quaternion", "(", "pose_7d", ")", ".", "unsqueeze", "(", "1", ")", ".", "expand", "(", "[", "-", "1", ",", "N", ",", "-", "1", "]", ")", ".", "contiguous", "(", ")", "\n", "rotated_point_cloud", "=", "quaternion", ".", "qrot", "(", "quat", ",", "point_cloud", ")", "\n", "\n", "", "return", "rotated_point_cloud", "\n", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.ops.transform_functions.PCRNetTransform.quaternion_transform": [[165, 169], ["transform_functions.PCRNetTransform.quaternion_rotate", "PCRNetTransform.get_translation().view().repeat", "PCRNetTransform.get_translation().view", "transform_functions.PCRNetTransform.get_translation"], "methods", ["home.repos.pwc.inspect_result.tzodge_PCR-CMU.ops.transform_functions.PCRNetTransform.quaternion_rotate", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.ops.transform_functions.PCRNetTransform.get_translation"], ["", "@", "staticmethod", "\n", "def", "quaternion_transform", "(", "point_cloud", ":", "torch", ".", "Tensor", ",", "pose_7d", ":", "torch", ".", "Tensor", ")", ":", "\n", "        ", "transformed_point_cloud", "=", "PCRNetTransform", ".", "quaternion_rotate", "(", "point_cloud", ",", "pose_7d", ")", "+", "PCRNetTransform", ".", "get_translation", "(", "pose_7d", ")", ".", "view", "(", "-", "1", ",", "1", ",", "3", ")", ".", "repeat", "(", "1", ",", "point_cloud", ".", "shape", "[", "1", "]", ",", "1", ")", "# Ps' = R*Ps + t", "\n", "return", "transformed_point_cloud", "\n", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.ops.transform_functions.PCRNetTransform.convert2transformation": [[170, 176], ["torch.tensor().repeat().to", "torch.tensor().repeat().to", "torch.tensor().repeat().to", "torch.tensor().repeat().to", "torch.tensor().repeat().to", "torch.tensor().repeat().to", "torch.tensor().repeat().to", "torch.tensor().repeat().to", "torch.tensor().repeat().to", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.tensor().repeat", "torch.tensor().repeat", "torch.tensor().repeat", "torch.tensor().repeat", "torch.tensor().repeat", "torch.tensor().repeat", "torch.tensor().repeat", "torch.tensor().repeat", "torch.tensor().repeat", "translation_vector[].unsqueeze", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "convert2transformation", "(", "rotation_matrix", ":", "torch", ".", "Tensor", ",", "translation_vector", ":", "torch", ".", "Tensor", ")", ":", "\n", "        ", "one_", "=", "torch", ".", "tensor", "(", "[", "[", "[", "0.0", ",", "0.0", ",", "0.0", ",", "1.0", "]", "]", "]", ")", ".", "repeat", "(", "rotation_matrix", ".", "shape", "[", "0", "]", ",", "1", ",", "1", ")", ".", "to", "(", "rotation_matrix", ")", "# (Bx1x4)", "\n", "transformation_matrix", "=", "torch", ".", "cat", "(", "[", "rotation_matrix", ",", "translation_vector", "[", ":", ",", "0", ",", ":", "]", ".", "unsqueeze", "(", "-", "1", ")", "]", ",", "dim", "=", "2", ")", "# (Bx3x4)", "\n", "transformation_matrix", "=", "torch", ".", "cat", "(", "[", "transformation_matrix", ",", "one_", "]", ",", "dim", "=", "1", ")", "# (Bx4x4)", "\n", "return", "transformation_matrix", "\n", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.ops.transform_functions.PCRNetTransform.__call__": [[177, 182], ["transform_functions.PCRNetTransform.create_pose_7d", "transform_functions.PCRNetTransform.quaternion_rotate", "transform_functions.PCRNetTransform.get_translation"], "methods", ["home.repos.pwc.inspect_result.tzodge_PCR-CMU.ops.transform_functions.PCRNetTransform.create_pose_7d", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.ops.transform_functions.PCRNetTransform.quaternion_rotate", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.ops.transform_functions.PCRNetTransform.get_translation"], ["", "def", "__call__", "(", "self", ",", "template", ")", ":", "\n", "        ", "self", ".", "igt", "=", "self", ".", "transformations", "[", "self", ".", "index", "]", "\n", "gt", "=", "self", ".", "create_pose_7d", "(", "self", ".", "igt", ")", "\n", "source", "=", "self", ".", "quaternion_rotate", "(", "template", ",", "gt", ")", "+", "self", ".", "get_translation", "(", "gt", ")", "\n", "return", "source", "", "", "", ""]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.ops.transform_functions.quat2mat": [[8, 21], ["quat.size", "torch.stack().reshape", "torch.stack().reshape", "torch.stack().reshape", "w.pow", "x.pow", "y.pow", "z.pow", "torch.stack", "torch.stack", "torch.stack"], "function", ["None"], ["def", "quat2mat", "(", "quat", ")", ":", "\n", "    ", "x", ",", "y", ",", "z", ",", "w", "=", "quat", "[", ":", ",", "0", "]", ",", "quat", "[", ":", ",", "1", "]", ",", "quat", "[", ":", ",", "2", "]", ",", "quat", "[", ":", ",", "3", "]", "\n", "\n", "B", "=", "quat", ".", "size", "(", "0", ")", "\n", "\n", "w2", ",", "x2", ",", "y2", ",", "z2", "=", "w", ".", "pow", "(", "2", ")", ",", "x", ".", "pow", "(", "2", ")", ",", "y", ".", "pow", "(", "2", ")", ",", "z", ".", "pow", "(", "2", ")", "\n", "wx", ",", "wy", ",", "wz", "=", "w", "*", "x", ",", "w", "*", "y", ",", "w", "*", "z", "\n", "xy", ",", "xz", ",", "yz", "=", "x", "*", "y", ",", "x", "*", "z", ",", "y", "*", "z", "\n", "\n", "rotMat", "=", "torch", ".", "stack", "(", "[", "w2", "+", "x2", "-", "y2", "-", "z2", ",", "2", "*", "xy", "-", "2", "*", "wz", ",", "2", "*", "wy", "+", "2", "*", "xz", ",", "\n", "2", "*", "wz", "+", "2", "*", "xy", ",", "w2", "-", "x2", "+", "y2", "-", "z2", ",", "2", "*", "yz", "-", "2", "*", "wx", ",", "\n", "2", "*", "xz", "-", "2", "*", "wy", ",", "2", "*", "wx", "+", "2", "*", "yz", ",", "w2", "-", "x2", "-", "y2", "+", "z2", "]", ",", "dim", "=", "1", ")", ".", "reshape", "(", "B", ",", "3", ",", "3", ")", "\n", "return", "rotMat", "\n", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.ops.transform_functions.transform_point_cloud": [[22, 28], ["len", "transform_functions.quat2mat", "rotation.size", "torch.matmul", "torch.matmul", "torch.matmul", "translation.unsqueeze", "point_cloud.permute"], "function", ["home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.util.quat2mat"], ["", "def", "transform_point_cloud", "(", "point_cloud", ":", "torch", ".", "Tensor", ",", "rotation", ":", "torch", ".", "Tensor", ",", "translation", ":", "torch", ".", "Tensor", ")", ":", "\n", "    ", "if", "len", "(", "rotation", ".", "size", "(", ")", ")", "==", "2", ":", "\n", "        ", "rot_mat", "=", "quat2mat", "(", "rotation", ")", "\n", "", "else", ":", "\n", "        ", "rot_mat", "=", "rotation", "\n", "", "return", "(", "torch", ".", "matmul", "(", "rot_mat", ",", "point_cloud", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ")", "+", "translation", ".", "unsqueeze", "(", "2", ")", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.ops.transform_functions.convert2transformation": [[29, 34], ["torch.tensor().repeat().to", "torch.tensor().repeat().to", "torch.tensor().repeat().to", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.tensor().repeat", "torch.tensor().repeat", "torch.tensor().repeat", "translation_vector.unsqueeze", "torch.tensor", "torch.tensor", "torch.tensor"], "function", ["None"], ["", "def", "convert2transformation", "(", "rotation_matrix", ":", "torch", ".", "Tensor", ",", "translation_vector", ":", "torch", ".", "Tensor", ")", ":", "\n", "    ", "one_", "=", "torch", ".", "tensor", "(", "[", "[", "[", "0.0", ",", "0.0", ",", "0.0", ",", "1.0", "]", "]", "]", ")", ".", "repeat", "(", "rotation_matrix", ".", "shape", "[", "0", "]", ",", "1", ",", "1", ")", ".", "to", "(", "rotation_matrix", ")", "# (Bx1x4)", "\n", "transformation_matrix", "=", "torch", ".", "cat", "(", "[", "rotation_matrix", ",", "translation_vector", ".", "unsqueeze", "(", "-", "1", ")", "]", ",", "dim", "=", "2", ")", "# (Bx3x4)", "\n", "transformation_matrix", "=", "torch", ".", "cat", "(", "[", "transformation_matrix", ",", "one_", "]", ",", "dim", "=", "1", ")", "# (Bx4x4)", "\n", "return", "transformation_matrix", "\n", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.ops.transform_functions.qmul": [[35, 54], ["torch.bmm", "torch.bmm", "torch.bmm", "torch.stack().view", "torch.stack().view", "torch.stack().view", "r.view", "q.view", "torch.stack", "torch.stack", "torch.stack"], "function", ["None"], ["", "def", "qmul", "(", "q", ",", "r", ")", ":", "\n", "    ", "\"\"\"\n    Multiply quaternion(s) q with quaternion(s) r.\n    Expects two equally-sized tensors of shape (*, 4), where * denotes any number of dimensions.\n    Returns q*r as a tensor of shape (*, 4).\n    \"\"\"", "\n", "assert", "q", ".", "shape", "[", "-", "1", "]", "==", "4", "\n", "assert", "r", ".", "shape", "[", "-", "1", "]", "==", "4", "\n", "\n", "original_shape", "=", "q", ".", "shape", "\n", "\n", "# Compute outer product", "\n", "terms", "=", "torch", ".", "bmm", "(", "r", ".", "view", "(", "-", "1", ",", "4", ",", "1", ")", ",", "q", ".", "view", "(", "-", "1", ",", "1", ",", "4", ")", ")", "\n", "\n", "w", "=", "terms", "[", ":", ",", "0", ",", "0", "]", "-", "terms", "[", ":", ",", "1", ",", "1", "]", "-", "terms", "[", ":", ",", "2", ",", "2", "]", "-", "terms", "[", ":", ",", "3", ",", "3", "]", "\n", "x", "=", "terms", "[", ":", ",", "0", ",", "1", "]", "+", "terms", "[", ":", ",", "1", ",", "0", "]", "-", "terms", "[", ":", ",", "2", ",", "3", "]", "+", "terms", "[", ":", ",", "3", ",", "2", "]", "\n", "y", "=", "terms", "[", ":", ",", "0", ",", "2", "]", "+", "terms", "[", ":", ",", "1", ",", "3", "]", "+", "terms", "[", ":", ",", "2", ",", "0", "]", "-", "terms", "[", ":", ",", "3", ",", "1", "]", "\n", "z", "=", "terms", "[", ":", ",", "0", ",", "3", "]", "-", "terms", "[", ":", ",", "1", ",", "2", "]", "+", "terms", "[", ":", ",", "2", ",", "1", "]", "+", "terms", "[", ":", ",", "3", ",", "0", "]", "\n", "return", "torch", ".", "stack", "(", "(", "w", ",", "x", ",", "y", ",", "z", ")", ",", "dim", "=", "1", ")", ".", "view", "(", "original_shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.ops.transform_functions.qmul_np": [[55, 59], ["torch.from_numpy().contiguous", "torch.from_numpy().contiguous", "torch.from_numpy().contiguous", "torch.from_numpy().contiguous", "torch.from_numpy().contiguous", "torch.from_numpy().contiguous", "qmul().numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "transform_functions.qmul"], "function", ["home.repos.pwc.inspect_result.tzodge_PCR-CMU.ops.quaternion.qmul"], ["", "def", "qmul_np", "(", "q", ",", "r", ")", ":", "\n", "    ", "q", "=", "torch", ".", "from_numpy", "(", "q", ")", ".", "contiguous", "(", ")", "\n", "r", "=", "torch", ".", "from_numpy", "(", "r", ")", ".", "contiguous", "(", ")", "\n", "return", "qmul", "(", "q", ",", "r", ")", ".", "numpy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.ops.transform_functions.euler_to_quaternion": [[60, 105], ["list", "e.reshape.reshape", "numpy.stack", "numpy.stack", "numpy.stack", "qmul_np.reshape", "numpy.cos", "numpy.sin", "numpy.zeros_like", "numpy.zeros_like", "numpy.cos", "numpy.zeros_like", "numpy.sin", "numpy.zeros_like", "numpy.cos", "numpy.zeros_like", "numpy.zeros_like", "numpy.sin", "transform_functions.qmul_np"], "function", ["home.repos.pwc.inspect_result.tzodge_PCR-CMU.ops.quaternion.qmul_np"], ["", "def", "euler_to_quaternion", "(", "e", ",", "order", ")", ":", "\n", "    ", "\"\"\"\n    Convert Euler angles to quaternions.\n    \"\"\"", "\n", "assert", "e", ".", "shape", "[", "-", "1", "]", "==", "3", "\n", "\n", "original_shape", "=", "list", "(", "e", ".", "shape", ")", "\n", "original_shape", "[", "-", "1", "]", "=", "4", "\n", "\n", "e", "=", "e", ".", "reshape", "(", "-", "1", ",", "3", ")", "\n", "\n", "x", "=", "e", "[", ":", ",", "0", "]", "\n", "y", "=", "e", "[", ":", ",", "1", "]", "\n", "z", "=", "e", "[", ":", ",", "2", "]", "\n", "\n", "rx", "=", "np", ".", "stack", "(", "\n", "(", "np", ".", "cos", "(", "x", "/", "2", ")", ",", "np", ".", "sin", "(", "x", "/", "2", ")", ",", "np", ".", "zeros_like", "(", "x", ")", ",", "np", ".", "zeros_like", "(", "x", ")", ")", ",", "axis", "=", "1", "\n", ")", "\n", "ry", "=", "np", ".", "stack", "(", "\n", "(", "np", ".", "cos", "(", "y", "/", "2", ")", ",", "np", ".", "zeros_like", "(", "y", ")", ",", "np", ".", "sin", "(", "y", "/", "2", ")", ",", "np", ".", "zeros_like", "(", "y", ")", ")", ",", "axis", "=", "1", "\n", ")", "\n", "rz", "=", "np", ".", "stack", "(", "\n", "(", "np", ".", "cos", "(", "z", "/", "2", ")", ",", "np", ".", "zeros_like", "(", "z", ")", ",", "np", ".", "zeros_like", "(", "z", ")", ",", "np", ".", "sin", "(", "z", "/", "2", ")", ")", ",", "axis", "=", "1", "\n", ")", "\n", "\n", "result", "=", "None", "\n", "for", "coord", "in", "order", ":", "\n", "        ", "if", "coord", "==", "\"x\"", ":", "\n", "            ", "r", "=", "rx", "\n", "", "elif", "coord", "==", "\"y\"", ":", "\n", "            ", "r", "=", "ry", "\n", "", "elif", "coord", "==", "\"z\"", ":", "\n", "            ", "r", "=", "rz", "\n", "", "else", ":", "\n", "            ", "raise", "\n", "", "if", "result", "is", "None", ":", "\n", "            ", "result", "=", "r", "\n", "", "else", ":", "\n", "            ", "result", "=", "qmul_np", "(", "result", ",", "r", ")", "\n", "\n", "# Reverse antipodal representation to have a non-negative \"w\"", "\n", "", "", "if", "order", "in", "[", "\"xyz\"", ",", "\"yzx\"", ",", "\"zxy\"", "]", ":", "\n", "        ", "result", "*=", "-", "1", "\n", "\n", "", "return", "result", ".", "reshape", "(", "original_shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.ops.data_utils.mean_shift": [[3, 26], ["torch.eye().view().expand().to", "torch.eye().view().expand().to", "template.mean", "torch.cat", "torch.tensor().repeat().to", "torch.cat", "source.mean", "torch.cat", "torch.tensor().repeat().to", "torch.cat", "torch.eye().view().expand", "torch.eye().view().expand", "template.mean.unsqueeze", "source.mean.unsqueeze", "template.size", "source.size", "template.mean.unsqueeze", "torch.tensor().repeat", "torch.tensor().repeat", "torch.eye().view", "torch.eye().view", "template.mean.unsqueeze", "torch.tensor", "torch.tensor", "torch.eye", "torch.eye"], "function", ["None"], ["def", "mean_shift", "(", "template", ",", "source", ",", "p0_zero_mean", ",", "p1_zero_mean", ")", ":", "\n", "\t", "template_mean", "=", "torch", ".", "eye", "(", "3", ")", ".", "view", "(", "1", ",", "3", ",", "3", ")", ".", "expand", "(", "template", ".", "size", "(", "0", ")", ",", "3", ",", "3", ")", ".", "to", "(", "template", ")", "# [B, 3, 3]", "\n", "source_mean", "=", "torch", ".", "eye", "(", "3", ")", ".", "view", "(", "1", ",", "3", ",", "3", ")", ".", "expand", "(", "source", ".", "size", "(", "0", ")", ",", "3", ",", "3", ")", ".", "to", "(", "source", ")", "# [B, 3, 3]", "\n", "\n", "if", "p0_zero_mean", ":", "\n", "\t\t", "p0_m", "=", "template", ".", "mean", "(", "dim", "=", "1", ")", "# [B, N, 3] -> [B, 3]", "\n", "template_mean", "=", "torch", ".", "cat", "(", "[", "template_mean", ",", "p0_m", ".", "unsqueeze", "(", "-", "1", ")", "]", ",", "dim", "=", "2", ")", "\n", "one_", "=", "torch", ".", "tensor", "(", "[", "[", "[", "0.0", ",", "0.0", ",", "0.0", ",", "1.0", "]", "]", "]", ")", ".", "repeat", "(", "template_mean", ".", "shape", "[", "0", "]", ",", "1", ",", "1", ")", ".", "to", "(", "template_mean", ")", "# (Bx1x4)", "\n", "template_mean", "=", "torch", ".", "cat", "(", "[", "template_mean", ",", "one_", "]", ",", "dim", "=", "1", ")", "\n", "template", "=", "template", "-", "p0_m", ".", "unsqueeze", "(", "1", ")", "\n", "# else:", "\n", "# q0 = template", "\n", "\n", "", "if", "p1_zero_mean", ":", "\n", "#print(numpy.any(numpy.isnan(p1.numpy())))", "\n", "\t\t", "p1_m", "=", "source", ".", "mean", "(", "dim", "=", "1", ")", "# [B, N, 3] -> [B, 3]", "\n", "source_mean", "=", "torch", ".", "cat", "(", "[", "source_mean", ",", "-", "p0_m", ".", "unsqueeze", "(", "-", "1", ")", "]", ",", "dim", "=", "2", ")", "\n", "one_", "=", "torch", ".", "tensor", "(", "[", "[", "[", "0.0", ",", "0.0", ",", "0.0", ",", "1.0", "]", "]", "]", ")", ".", "repeat", "(", "source_mean", ".", "shape", "[", "0", "]", ",", "1", ",", "1", ")", ".", "to", "(", "source_mean", ")", "# (Bx1x4)", "\n", "source_mean", "=", "torch", ".", "cat", "(", "[", "source_mean", ",", "one_", "]", ",", "dim", "=", "1", ")", "\n", "source", "=", "source", "-", "p1_m", ".", "unsqueeze", "(", "1", ")", "\n", "# else:", "\n", "# q1 = source", "\n", "", "return", "template", ",", "source", ",", "template_mean", ",", "source_mean", "\n", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.ops.data_utils.postprocess_data": [[27, 46], ["a0.to().bmm", "est_g.bmm.bmm", "a0.unsqueeze().contiguous().to().matmul", "est_gs.matmul.matmul", "a1.to", "a1.unsqueeze().contiguous().to", "a0.to", "a0.unsqueeze().contiguous().to", "a1.unsqueeze().contiguous", "a0.unsqueeze().contiguous", "a1.unsqueeze", "a0.unsqueeze"], "function", ["None"], ["", "def", "postprocess_data", "(", "result", ",", "p0", ",", "p1", ",", "a0", ",", "a1", ",", "p0_zero_mean", ",", "p1_zero_mean", ")", ":", "\n", "#output' = trans(p0_m) * output * trans(-p1_m)", "\n", "#        = [I, p0_m;] * [R, t;] * [I, -p1_m;]", "\n", "#          [0, 1    ]   [0, 1 ]   [0,  1    ]", "\n", "\t", "est_g", "=", "result", "[", "'est_T'", "]", "\n", "if", "p0_zero_mean", ":", "\n", "\t\t", "est_g", "=", "a0", ".", "to", "(", "est_g", ")", ".", "bmm", "(", "est_g", ")", "\n", "", "if", "p1_zero_mean", ":", "\n", "\t\t", "est_g", "=", "est_g", ".", "bmm", "(", "a1", ".", "to", "(", "est_g", ")", ")", "\n", "", "result", "[", "'est_T'", "]", "=", "est_g", "\n", "\n", "est_gs", "=", "result", "[", "'est_T_series'", "]", "# [M, B, 4, 4]", "\n", "if", "p0_zero_mean", ":", "\n", "\t\t", "est_gs", "=", "a0", ".", "unsqueeze", "(", "0", ")", ".", "contiguous", "(", ")", ".", "to", "(", "est_gs", ")", ".", "matmul", "(", "est_gs", ")", "\n", "", "if", "p1_zero_mean", ":", "\n", "\t\t", "est_gs", "=", "est_gs", ".", "matmul", "(", "a1", ".", "unsqueeze", "(", "0", ")", ".", "contiguous", "(", ")", ".", "to", "(", "est_gs", ")", ")", "\n", "", "result", "[", "'est_T_series'", "]", "=", "est_gs", "\n", "\n", "return", "result", "\n", "", ""]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.ops.quaternion.qmul": [[14, 33], ["torch.bmm", "torch.stack().view", "r.view", "q.view", "torch.stack"], "function", ["None"], ["def", "qmul", "(", "q", ",", "r", ")", ":", "\n", "    ", "\"\"\"\n    Multiply quaternion(s) q with quaternion(s) r.\n    Expects two equally-sized tensors of shape (*, 4), where * denotes any number of dimensions.\n    Returns q*r as a tensor of shape (*, 4).\n    \"\"\"", "\n", "assert", "q", ".", "shape", "[", "-", "1", "]", "==", "4", "\n", "assert", "r", ".", "shape", "[", "-", "1", "]", "==", "4", "\n", "\n", "original_shape", "=", "q", ".", "shape", "\n", "\n", "# Compute outer product", "\n", "terms", "=", "torch", ".", "bmm", "(", "r", ".", "view", "(", "-", "1", ",", "4", ",", "1", ")", ",", "q", ".", "view", "(", "-", "1", ",", "1", ",", "4", ")", ")", "\n", "\n", "w", "=", "terms", "[", ":", ",", "0", ",", "0", "]", "-", "terms", "[", ":", ",", "1", ",", "1", "]", "-", "terms", "[", ":", ",", "2", ",", "2", "]", "-", "terms", "[", ":", ",", "3", ",", "3", "]", "\n", "x", "=", "terms", "[", ":", ",", "0", ",", "1", "]", "+", "terms", "[", ":", ",", "1", ",", "0", "]", "-", "terms", "[", ":", ",", "2", ",", "3", "]", "+", "terms", "[", ":", ",", "3", ",", "2", "]", "\n", "y", "=", "terms", "[", ":", ",", "0", ",", "2", "]", "+", "terms", "[", ":", ",", "1", ",", "3", "]", "+", "terms", "[", ":", ",", "2", ",", "0", "]", "-", "terms", "[", ":", ",", "3", ",", "1", "]", "\n", "z", "=", "terms", "[", ":", ",", "0", ",", "3", "]", "-", "terms", "[", ":", ",", "1", ",", "2", "]", "+", "terms", "[", ":", ",", "2", ",", "1", "]", "+", "terms", "[", ":", ",", "3", ",", "0", "]", "\n", "return", "torch", ".", "stack", "(", "(", "w", ",", "x", ",", "y", ",", "z", ")", ",", "dim", "=", "1", ")", ".", "view", "(", "original_shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.ops.quaternion.qrot": [[35, 54], ["list", "q.view.view", "v.view.view", "torch.cross", "torch.cross"], "function", ["None"], ["", "def", "qrot", "(", "q", ",", "v", ")", ":", "\n", "    ", "\"\"\"\n    Rotate vector(s) v about the rotation described by quaternion(s) q.\n    Expects a tensor of shape (*, 4) for q and a tensor of shape (*, 3) for v,\n    where * denotes any number of dimensions.\n    Returns a tensor of shape (*, 3).\n    \"\"\"", "\n", "assert", "q", ".", "shape", "[", "-", "1", "]", "==", "4", "\n", "assert", "v", ".", "shape", "[", "-", "1", "]", "==", "3", "\n", "assert", "q", ".", "shape", "[", ":", "-", "1", "]", "==", "v", ".", "shape", "[", ":", "-", "1", "]", "\n", "\n", "original_shape", "=", "list", "(", "v", ".", "shape", ")", "\n", "q", "=", "q", ".", "view", "(", "-", "1", ",", "4", ")", "\n", "v", "=", "v", ".", "view", "(", "-", "1", ",", "3", ")", "\n", "\n", "qvec", "=", "q", "[", ":", ",", "1", ":", "]", "\n", "uv", "=", "torch", ".", "cross", "(", "qvec", ",", "v", ",", "dim", "=", "1", ")", "\n", "uuv", "=", "torch", ".", "cross", "(", "qvec", ",", "uv", ",", "dim", "=", "1", ")", "\n", "return", "(", "v", "+", "2", "*", "(", "q", "[", ":", ",", ":", "1", "]", "*", "uv", "+", "uuv", ")", ")", ".", "view", "(", "original_shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.ops.quaternion.qeuler": [[56, 101], ["list", "q.view.view", "torch.stack().view", "torch.atan2", "torch.asin", "torch.atan2", "torch.clamp", "torch.atan2", "torch.atan2", "torch.asin", "torch.stack", "torch.clamp", "torch.asin", "torch.atan2", "torch.atan2", "torch.clamp", "torch.atan2", "torch.atan2", "torch.asin", "torch.clamp", "torch.asin", "torch.atan2", "torch.atan2", "torch.clamp", "torch.atan2", "torch.asin", "torch.atan2", "torch.clamp"], "function", ["None"], ["", "def", "qeuler", "(", "q", ",", "order", ",", "epsilon", "=", "0", ")", ":", "\n", "    ", "\"\"\"\n    Convert quaternion(s) q to Euler angles.\n    Expects a tensor of shape (*, 4), where * denotes any number of dimensions.\n    Returns a tensor of shape (*, 3).\n    \"\"\"", "\n", "assert", "q", ".", "shape", "[", "-", "1", "]", "==", "4", "\n", "\n", "original_shape", "=", "list", "(", "q", ".", "shape", ")", "\n", "original_shape", "[", "-", "1", "]", "=", "3", "\n", "q", "=", "q", ".", "view", "(", "-", "1", ",", "4", ")", "\n", "\n", "q0", "=", "q", "[", ":", ",", "0", "]", "\n", "q1", "=", "q", "[", ":", ",", "1", "]", "\n", "q2", "=", "q", "[", ":", ",", "2", "]", "\n", "q3", "=", "q", "[", ":", ",", "3", "]", "\n", "\n", "if", "order", "==", "\"xyz\"", ":", "\n", "        ", "x", "=", "torch", ".", "atan2", "(", "2", "*", "(", "q0", "*", "q1", "-", "q2", "*", "q3", ")", ",", "1", "-", "2", "*", "(", "q1", "*", "q1", "+", "q2", "*", "q2", ")", ")", "\n", "y", "=", "torch", ".", "asin", "(", "torch", ".", "clamp", "(", "2", "*", "(", "q1", "*", "q3", "+", "q0", "*", "q2", ")", ",", "-", "1", "+", "epsilon", ",", "1", "-", "epsilon", ")", ")", "\n", "z", "=", "torch", ".", "atan2", "(", "2", "*", "(", "q0", "*", "q3", "-", "q1", "*", "q2", ")", ",", "1", "-", "2", "*", "(", "q2", "*", "q2", "+", "q3", "*", "q3", ")", ")", "\n", "", "elif", "order", "==", "\"yzx\"", ":", "\n", "        ", "x", "=", "torch", ".", "atan2", "(", "2", "*", "(", "q0", "*", "q1", "-", "q2", "*", "q3", ")", ",", "1", "-", "2", "*", "(", "q1", "*", "q1", "+", "q3", "*", "q3", ")", ")", "\n", "y", "=", "torch", ".", "atan2", "(", "2", "*", "(", "q0", "*", "q2", "-", "q1", "*", "q3", ")", ",", "1", "-", "2", "*", "(", "q2", "*", "q2", "+", "q3", "*", "q3", ")", ")", "\n", "z", "=", "torch", ".", "asin", "(", "torch", ".", "clamp", "(", "2", "*", "(", "q1", "*", "q2", "+", "q0", "*", "q3", ")", ",", "-", "1", "+", "epsilon", ",", "1", "-", "epsilon", ")", ")", "\n", "", "elif", "order", "==", "\"zxy\"", ":", "\n", "        ", "x", "=", "torch", ".", "asin", "(", "torch", ".", "clamp", "(", "2", "*", "(", "q0", "*", "q1", "+", "q2", "*", "q3", ")", ",", "-", "1", "+", "epsilon", ",", "1", "-", "epsilon", ")", ")", "\n", "y", "=", "torch", ".", "atan2", "(", "2", "*", "(", "q0", "*", "q2", "-", "q1", "*", "q3", ")", ",", "1", "-", "2", "*", "(", "q1", "*", "q1", "+", "q2", "*", "q2", ")", ")", "\n", "z", "=", "torch", ".", "atan2", "(", "2", "*", "(", "q0", "*", "q3", "-", "q1", "*", "q2", ")", ",", "1", "-", "2", "*", "(", "q1", "*", "q1", "+", "q3", "*", "q3", ")", ")", "\n", "", "elif", "order", "==", "\"xzy\"", ":", "\n", "        ", "x", "=", "torch", ".", "atan2", "(", "2", "*", "(", "q0", "*", "q1", "+", "q2", "*", "q3", ")", ",", "1", "-", "2", "*", "(", "q1", "*", "q1", "+", "q3", "*", "q3", ")", ")", "\n", "y", "=", "torch", ".", "atan2", "(", "2", "*", "(", "q0", "*", "q2", "+", "q1", "*", "q3", ")", ",", "1", "-", "2", "*", "(", "q2", "*", "q2", "+", "q3", "*", "q3", ")", ")", "\n", "z", "=", "torch", ".", "asin", "(", "torch", ".", "clamp", "(", "2", "*", "(", "q0", "*", "q3", "-", "q1", "*", "q2", ")", ",", "-", "1", "+", "epsilon", ",", "1", "-", "epsilon", ")", ")", "\n", "", "elif", "order", "==", "\"yxz\"", ":", "\n", "        ", "x", "=", "torch", ".", "asin", "(", "torch", ".", "clamp", "(", "2", "*", "(", "q0", "*", "q1", "-", "q2", "*", "q3", ")", ",", "-", "1", "+", "epsilon", ",", "1", "-", "epsilon", ")", ")", "\n", "y", "=", "torch", ".", "atan2", "(", "2", "*", "(", "q1", "*", "q3", "+", "q0", "*", "q2", ")", ",", "1", "-", "2", "*", "(", "q1", "*", "q1", "+", "q2", "*", "q2", ")", ")", "\n", "z", "=", "torch", ".", "atan2", "(", "2", "*", "(", "q1", "*", "q2", "+", "q0", "*", "q3", ")", ",", "1", "-", "2", "*", "(", "q1", "*", "q1", "+", "q3", "*", "q3", ")", ")", "\n", "", "elif", "order", "==", "\"zyx\"", ":", "\n", "        ", "x", "=", "torch", ".", "atan2", "(", "2", "*", "(", "q0", "*", "q1", "+", "q2", "*", "q3", ")", ",", "1", "-", "2", "*", "(", "q1", "*", "q1", "+", "q2", "*", "q2", ")", ")", "\n", "y", "=", "torch", ".", "asin", "(", "torch", ".", "clamp", "(", "2", "*", "(", "q0", "*", "q2", "-", "q1", "*", "q3", ")", ",", "-", "1", "+", "epsilon", ",", "1", "-", "epsilon", ")", ")", "\n", "z", "=", "torch", ".", "atan2", "(", "2", "*", "(", "q0", "*", "q3", "+", "q1", "*", "q2", ")", ",", "1", "-", "2", "*", "(", "q2", "*", "q2", "+", "q3", "*", "q3", ")", ")", "\n", "", "else", ":", "\n", "        ", "raise", "\n", "\n", "", "return", "torch", ".", "stack", "(", "(", "x", ",", "y", ",", "z", ")", ",", "dim", "=", "1", ")", ".", "view", "(", "original_shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.ops.quaternion.qmul_np": [[106, 110], ["torch.from_numpy().contiguous", "torch.from_numpy().contiguous", "qmul().numpy", "torch.from_numpy", "torch.from_numpy", "quaternion.qmul"], "function", ["home.repos.pwc.inspect_result.tzodge_PCR-CMU.ops.quaternion.qmul"], ["", "def", "qmul_np", "(", "q", ",", "r", ")", ":", "\n", "    ", "q", "=", "torch", ".", "from_numpy", "(", "q", ")", ".", "contiguous", "(", ")", "\n", "r", "=", "torch", ".", "from_numpy", "(", "r", ")", ".", "contiguous", "(", ")", "\n", "return", "qmul", "(", "q", ",", "r", ")", ".", "numpy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.ops.quaternion.qrot_np": [[112, 116], ["torch.from_numpy().contiguous", "torch.from_numpy().contiguous", "qrot().numpy", "torch.from_numpy", "torch.from_numpy", "quaternion.qrot"], "function", ["home.repos.pwc.inspect_result.tzodge_PCR-CMU.ops.quaternion.qrot"], ["", "def", "qrot_np", "(", "q", ",", "v", ")", ":", "\n", "    ", "q", "=", "torch", ".", "from_numpy", "(", "q", ")", ".", "contiguous", "(", ")", "\n", "v", "=", "torch", ".", "from_numpy", "(", "v", ")", ".", "contiguous", "(", ")", "\n", "return", "qrot", "(", "q", ",", "v", ")", ".", "numpy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.ops.quaternion.qeuler_np": [[118, 125], ["torch.from_numpy().cuda", "qeuler().cpu().numpy", "torch.from_numpy().contiguous", "qeuler().numpy", "torch.from_numpy", "qeuler().cpu", "torch.from_numpy", "quaternion.qeuler", "quaternion.qeuler"], "function", ["home.repos.pwc.inspect_result.tzodge_PCR-CMU.ops.quaternion.qeuler", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.ops.quaternion.qeuler"], ["", "def", "qeuler_np", "(", "q", ",", "order", ",", "epsilon", "=", "0", ",", "use_gpu", "=", "False", ")", ":", "\n", "    ", "if", "use_gpu", ":", "\n", "        ", "q", "=", "torch", ".", "from_numpy", "(", "q", ")", ".", "cuda", "(", ")", "\n", "return", "qeuler", "(", "q", ",", "order", ",", "epsilon", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "else", ":", "\n", "        ", "q", "=", "torch", ".", "from_numpy", "(", "q", ")", ".", "contiguous", "(", ")", "\n", "return", "qeuler", "(", "q", ",", "order", ",", "epsilon", ")", ".", "numpy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.ops.quaternion.qfix": [[127, 145], ["q.copy", "numpy.sum", "len", "numpy.cumsum"], "function", ["None"], ["", "", "def", "qfix", "(", "q", ")", ":", "\n", "    ", "\"\"\"\n    Enforce quaternion continuity across the time dimension by selecting\n    the representation (q or -q) with minimal distance (or, equivalently, maximal dot product)\n    between two consecutive frames.\n\n    Expects a tensor of shape (L, J, 4), where L is the sequence length and J is the number of joints.\n    Returns a tensor of the same shape.\n    \"\"\"", "\n", "assert", "len", "(", "q", ".", "shape", ")", "==", "3", "\n", "assert", "q", ".", "shape", "[", "-", "1", "]", "==", "4", "\n", "\n", "result", "=", "q", ".", "copy", "(", ")", "\n", "dot_products", "=", "np", ".", "sum", "(", "q", "[", "1", ":", "]", "*", "q", "[", ":", "-", "1", "]", ",", "axis", "=", "2", ")", "\n", "mask", "=", "dot_products", "<", "0", "\n", "mask", "=", "(", "np", ".", "cumsum", "(", "mask", ",", "axis", "=", "0", ")", "%", "2", ")", ".", "astype", "(", "bool", ")", "\n", "result", "[", "1", ":", "]", "[", "mask", "]", "*=", "-", "1", "\n", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.ops.quaternion.expmap_to_quaternion": [[147, 164], ["list", "e.reshape.reshape", "numpy.linalg.norm().reshape", "numpy.cos().reshape", "numpy.concatenate().reshape", "numpy.linalg.norm", "numpy.cos", "numpy.sinc", "numpy.concatenate"], "function", ["home.repos.pwc.inspect_result.tzodge_PCR-CMU.math_torch.se3.concatenate"], ["", "def", "expmap_to_quaternion", "(", "e", ")", ":", "\n", "    ", "\"\"\"\n    Convert axis-angle rotations (aka exponential maps) to quaternions.\n    Stable formula from \"Practical Parameterization of Rotations Using the Exponential Map\".\n    Expects a tensor of shape (*, 3), where * denotes any number of dimensions.\n    Returns a tensor of shape (*, 4).\n    \"\"\"", "\n", "assert", "e", ".", "shape", "[", "-", "1", "]", "==", "3", "\n", "\n", "original_shape", "=", "list", "(", "e", ".", "shape", ")", "\n", "original_shape", "[", "-", "1", "]", "=", "4", "\n", "e", "=", "e", ".", "reshape", "(", "-", "1", ",", "3", ")", "\n", "\n", "theta", "=", "np", ".", "linalg", ".", "norm", "(", "e", ",", "axis", "=", "1", ")", ".", "reshape", "(", "-", "1", ",", "1", ")", "\n", "w", "=", "np", ".", "cos", "(", "0.5", "*", "theta", ")", ".", "reshape", "(", "-", "1", ",", "1", ")", "\n", "xyz", "=", "0.5", "*", "np", ".", "sinc", "(", "0.5", "*", "theta", "/", "np", ".", "pi", ")", "*", "e", "\n", "return", "np", ".", "concatenate", "(", "(", "w", ",", "xyz", ")", ",", "axis", "=", "1", ")", ".", "reshape", "(", "original_shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.ops.quaternion.euler_to_quaternion": [[166, 211], ["list", "e.reshape.reshape", "numpy.stack", "numpy.stack", "numpy.stack", "qmul_np.reshape", "numpy.cos", "numpy.sin", "numpy.zeros_like", "numpy.zeros_like", "numpy.cos", "numpy.zeros_like", "numpy.sin", "numpy.zeros_like", "numpy.cos", "numpy.zeros_like", "numpy.zeros_like", "numpy.sin", "quaternion.qmul_np"], "function", ["home.repos.pwc.inspect_result.tzodge_PCR-CMU.ops.quaternion.qmul_np"], ["", "def", "euler_to_quaternion", "(", "e", ",", "order", ")", ":", "\n", "    ", "\"\"\"\n    Convert Euler angles to quaternions.\n    \"\"\"", "\n", "assert", "e", ".", "shape", "[", "-", "1", "]", "==", "3", "\n", "\n", "original_shape", "=", "list", "(", "e", ".", "shape", ")", "\n", "original_shape", "[", "-", "1", "]", "=", "4", "\n", "\n", "e", "=", "e", ".", "reshape", "(", "-", "1", ",", "3", ")", "\n", "\n", "x", "=", "e", "[", ":", ",", "0", "]", "\n", "y", "=", "e", "[", ":", ",", "1", "]", "\n", "z", "=", "e", "[", ":", ",", "2", "]", "\n", "\n", "rx", "=", "np", ".", "stack", "(", "\n", "(", "np", ".", "cos", "(", "x", "/", "2", ")", ",", "np", ".", "sin", "(", "x", "/", "2", ")", ",", "np", ".", "zeros_like", "(", "x", ")", ",", "np", ".", "zeros_like", "(", "x", ")", ")", ",", "axis", "=", "1", "\n", ")", "\n", "ry", "=", "np", ".", "stack", "(", "\n", "(", "np", ".", "cos", "(", "y", "/", "2", ")", ",", "np", ".", "zeros_like", "(", "y", ")", ",", "np", ".", "sin", "(", "y", "/", "2", ")", ",", "np", ".", "zeros_like", "(", "y", ")", ")", ",", "axis", "=", "1", "\n", ")", "\n", "rz", "=", "np", ".", "stack", "(", "\n", "(", "np", ".", "cos", "(", "z", "/", "2", ")", ",", "np", ".", "zeros_like", "(", "z", ")", ",", "np", ".", "zeros_like", "(", "z", ")", ",", "np", ".", "sin", "(", "z", "/", "2", ")", ")", ",", "axis", "=", "1", "\n", ")", "\n", "\n", "result", "=", "None", "\n", "for", "coord", "in", "order", ":", "\n", "        ", "if", "coord", "==", "\"x\"", ":", "\n", "            ", "r", "=", "rx", "\n", "", "elif", "coord", "==", "\"y\"", ":", "\n", "            ", "r", "=", "ry", "\n", "", "elif", "coord", "==", "\"z\"", ":", "\n", "            ", "r", "=", "rz", "\n", "", "else", ":", "\n", "            ", "raise", "\n", "", "if", "result", "is", "None", ":", "\n", "            ", "result", "=", "r", "\n", "", "else", ":", "\n", "            ", "result", "=", "qmul_np", "(", "result", ",", "r", ")", "\n", "\n", "# Reverse antipodal representation to have a non-negative \"w\"", "\n", "", "", "if", "order", "in", "[", "\"xyz\"", ",", "\"yzx\"", ",", "\"zxy\"", "]", ":", "\n", "        ", "result", "*=", "-", "1", "\n", "\n", "", "return", "result", ".", "reshape", "(", "original_shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.ops.quaternion.qinv": [[213, 219], ["torch.cat"], "function", ["None"], ["", "def", "qinv", "(", "q", ")", ":", "\n", "# expectes q in (w,x,y,z) format", "\n", "    ", "w", "=", "q", "[", ":", ",", "0", ":", "1", "]", "\n", "v", "=", "q", "[", ":", ",", "1", ":", "]", "\n", "inv", "=", "torch", ".", "cat", "(", "[", "w", ",", "-", "v", "]", ",", "dim", "=", "1", ")", "\n", "return", "inv", "\n", "", ""]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.losses.chamfer_distance.ChamferDistanceLoss.__init__": [[15, 17], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.model.DCP.__init__"], ["\t", "def", "__init__", "(", "self", ")", ":", "\n", "\t\t", "super", "(", "ChamferDistanceLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.losses.chamfer_distance.ChamferDistanceLoss.forward": [[18, 20], ["chamfer_distance.chamfer_distance"], "methods", ["home.repos.pwc.inspect_result.tzodge_PCR-CMU.losses.chamfer_distance.chamfer_distance"], ["", "def", "forward", "(", "self", ",", "template", ",", "source", ")", ":", "\n", "\t\t", "return", "chamfer_distance", "(", "template", ",", "source", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.losses.chamfer_distance.chamfer_distance": [[5, 12], ["torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "ChamferDistance", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt"], "function", ["None"], ["def", "chamfer_distance", "(", "template", ":", "torch", ".", "Tensor", ",", "source", ":", "torch", ".", "Tensor", ")", ":", "\n", "\t", "from", ".", "cuda", ".", "chamfer_distance", "import", "ChamferDistance", "\n", "cost_p0_p1", ",", "cost_p1_p0", "=", "ChamferDistance", "(", ")", "(", "template", ",", "source", ")", "\n", "cost_p0_p1", "=", "torch", ".", "mean", "(", "torch", ".", "sqrt", "(", "cost_p0_p1", ")", ")", "\n", "cost_p1_p0", "=", "torch", ".", "mean", "(", "torch", ".", "sqrt", "(", "cost_p1_p0", ")", ")", "\n", "chamfer_loss", "=", "(", "cost_p0_p1", "+", "cost_p1_p0", ")", "/", "2.0", "\n", "return", "chamfer_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.losses.emd.EMDLoss.__init__": [[12, 14], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.model.DCP.__init__"], ["\t", "def", "__init__", "(", "self", ")", ":", "\n", "\t\t", "super", "(", "EMDLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.losses.emd.EMDLoss.forward": [[15, 17], ["emd.emd"], "methods", ["home.repos.pwc.inspect_result.tzodge_PCR-CMU.losses.emd.emd"], ["", "def", "forward", "(", "self", ",", "template", ",", "source", ")", ":", "\n", "\t\t", "return", "emd", "(", "template", ",", "source", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.losses.emd.emd": [[5, 9], ["torch.mean", "torch.mean", "torch.mean", "emd..emd", "template.size"], "function", ["home.repos.pwc.inspect_result.tzodge_PCR-CMU.losses.emd.emd"], ["def", "emd", "(", "template", ":", "torch", ".", "Tensor", ",", "source", ":", "torch", ".", "Tensor", ")", ":", "\n", "\t", "from", "emd", "import", "EMDLoss", "\n", "emd_loss", "=", "torch", ".", "mean", "(", "self", ".", "emd", "(", "template", ",", "source", ")", ")", "/", "(", "template", ".", "size", "(", ")", "[", "1", "]", ")", "\n", "return", "emd_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.losses.frobenius_norm.FrobeniusNormLoss.__init__": [[17, 19], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.model.DCP.__init__"], ["\t", "def", "__init__", "(", "self", ")", ":", "\n", "\t\t", "super", "(", "FrobeniusNormLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.losses.frobenius_norm.FrobeniusNormLoss.forward": [[20, 22], ["frobenius_norm.frobeniusNormLoss"], "methods", ["home.repos.pwc.inspect_result.tzodge_PCR-CMU.losses.frobenius_norm.frobeniusNormLoss"], ["", "def", "forward", "(", "self", ",", "predicted", ",", "igt", ")", ":", "\n", "\t\t", "return", "frobeniusNormLoss", "(", "predicted", ",", "igt", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.losses.frobenius_norm.frobeniusNormLoss": [[5, 14], ["predicted.matmul", "torch.eye().to().view().expand", "torch.eye().to().view().expand", "torch.eye().to().view().expand", "predicted.size", "igt.size", "predicted.matmul.size", "torch.nn.functional.mse_loss", "torch.nn.functional.mse_loss", "torch.nn.functional.mse_loss", "predicted.size", "igt.size", "predicted.size", "predicted.size", "igt.size", "predicted.size", "torch.eye().to().view", "torch.eye().to().view", "torch.eye().to().view", "torch.eye().to", "torch.eye().to", "torch.eye().to", "torch.eye", "torch.eye", "torch.eye"], "function", ["None"], ["def", "frobeniusNormLoss", "(", "predicted", ",", "igt", ")", ":", "\n", "\t", "\"\"\" |predicted*igt - I| (should be 0) \"\"\"", "\n", "assert", "predicted", ".", "size", "(", "0", ")", "==", "igt", ".", "size", "(", "0", ")", "\n", "assert", "predicted", ".", "size", "(", "1", ")", "==", "igt", ".", "size", "(", "1", ")", "and", "predicted", ".", "size", "(", "1", ")", "==", "4", "\n", "assert", "predicted", ".", "size", "(", "2", ")", "==", "igt", ".", "size", "(", "2", ")", "and", "predicted", ".", "size", "(", "2", ")", "==", "4", "\n", "\n", "error", "=", "predicted", ".", "matmul", "(", "igt", ")", "\n", "I", "=", "torch", ".", "eye", "(", "4", ")", ".", "to", "(", "error", ")", ".", "view", "(", "1", ",", "4", ",", "4", ")", ".", "expand", "(", "error", ".", "size", "(", "0", ")", ",", "4", ",", "4", ")", "\n", "return", "torch", ".", "nn", ".", "functional", ".", "mse_loss", "(", "error", ",", "I", ",", "size_average", "=", "True", ")", "*", "16", "\n", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.pkg.emd_loss_layer.EMDFunction.forward": [[8, 13], ["_emd_ext.emd_forward", "emd_loss_layer.EMDFunction.save_for_backward"], "methods", ["None"], ["\t", "@", "staticmethod", "\n", "def", "forward", "(", "self", ",", "xyz1", ",", "xyz2", ")", ":", "\n", "\t\t", "cost", ",", "match", "=", "emd", ".", "emd_forward", "(", "xyz1", ",", "xyz2", ")", "\n", "self", ".", "save_for_backward", "(", "xyz1", ",", "xyz2", ",", "match", ")", "\n", "return", "cost", "\n", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.pkg.emd_loss_layer.EMDFunction.backward": [[15, 20], ["_emd_ext.emd_backward"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "self", ",", "grad_output", ")", ":", "\n", "\t\t", "xyz1", ",", "xyz2", ",", "match", "=", "self", ".", "saved_tensors", "\n", "grad_xyz1", ",", "grad_xyz2", "=", "emd", ".", "emd_backward", "(", "xyz1", ",", "xyz2", ",", "match", ")", "\n", "return", "grad_xyz1", ",", "grad_xyz2", "\n", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.pkg.emd_loss_layer.EMDLoss.__init__": [[34, 36], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.model.DCP.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "\t\t", "super", "(", "EMDLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.pkg.emd_loss_layer.EMDLoss.forward": [[37, 42], ["EMDFunction.apply"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "xyz1", ",", "xyz2", ")", ":", "\n", "\n", "\t\t", "assert", "xyz1", ".", "shape", "[", "-", "1", "]", "==", "xyz2", ".", "shape", "[", "-", "1", "]", ",", "'Both point sets must have the same dimensions!'", "\n", "assert", "xyz1", ".", "shape", "[", "1", "]", "==", "xyz2", ".", "shape", "[", "1", "]", ",", "'Both Point Clouds must have same number of points in it.'", "\n", "return", "EMDFunction", ".", "apply", "(", "xyz1", ",", "xyz2", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.layer.emd_loss_layer.EMDFunction.forward": [[8, 13], ["_emd_ext.emd_forward", "emd_loss_layer.EMDFunction.save_for_backward"], "methods", ["None"], ["\t", "@", "staticmethod", "\n", "def", "forward", "(", "self", ",", "xyz1", ",", "xyz2", ")", ":", "\n", "\t\t", "cost", ",", "match", "=", "emd", ".", "emd_forward", "(", "xyz1", ",", "xyz2", ")", "\n", "self", ".", "save_for_backward", "(", "xyz1", ",", "xyz2", ",", "match", ")", "\n", "return", "cost", "\n", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.layer.emd_loss_layer.EMDFunction.backward": [[15, 20], ["_emd_ext.emd_backward"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "self", ",", "grad_output", ")", ":", "\n", "\t\t", "xyz1", ",", "xyz2", ",", "match", "=", "self", ".", "saved_tensors", "\n", "grad_xyz1", ",", "grad_xyz2", "=", "emd", ".", "emd_backward", "(", "xyz1", ",", "xyz2", ",", "match", ")", "\n", "return", "grad_xyz1", ",", "grad_xyz2", "\n", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.layer.emd_loss_layer.EMDLoss.__init__": [[34, 36], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.model.DCP.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "\t\t", "super", "(", "EMDLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.layer.emd_loss_layer.EMDLoss.forward": [[37, 41], ["EMDFunction.apply"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "xyz1", ",", "xyz2", ")", ":", "\n", "\n", "\t\t", "assert", "xyz1", ".", "shape", "[", "-", "1", "]", "==", "xyz2", ".", "shape", "[", "-", "1", "]", ",", "'Both point sets must have the same dimensions!'", "\n", "assert", "xyz1", ".", "shape", "[", "1", "]", "==", "xyz2", ".", "shape", "[", "1", "]", ",", "'Both Point Clouds must have same number of points in it.'", "\n", "return", "EMDFunction", ".", "apply", "(", "xyz1", ",", "xyz2", ")", ""]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.chamfer_distance.chamfer_distance.ChamferDistanceFunction.forward": [[15, 39], ["xyz1.contiguous.contiguous.size", "xyz2.contiguous.contiguous.size", "xyz1.contiguous.contiguous.contiguous", "xyz2.contiguous.contiguous.contiguous", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "ctx.save_for_backward", "cd.forward", "dist1.cuda.cuda.cuda", "dist2.cuda.cuda.cuda", "idx1.cuda.cuda.cuda", "idx2.cuda.cuda.cuda", "cd.forward_cuda"], "methods", ["home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.model.DCP.forward"], ["\t", "def", "__init__", "(", "self", ")", ":", "\n", "\t\t", "super", "(", "ChamferDistanceLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "template", ",", "source", ")", ":", "\n", "\t\t", "return", "chamfer_distance", "(", "template", ",", "source", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.chamfer_distance.chamfer_distance.ChamferDistanceFunction.backward": [[40, 62], ["graddist1.contiguous.contiguous.contiguous", "graddist2.contiguous.contiguous.contiguous", "torch.zeros", "torch.zeros", "xyz1.size", "xyz2.size", "cd.backward", "gradxyz1.cuda.cuda.cuda", "gradxyz2.cuda.cuda.cuda", "cd.backward_cuda"], "methods", ["home.repos.pwc.inspect_result.tzodge_PCR-CMU.chamfer_distance.chamfer_distance.ChamferDistanceFunction.backward"], []], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.chamfer_distance.chamfer_distance.ChamferDistance.forward": [[65, 67], ["ChamferDistanceFunction.apply"], "methods", ["None"], []], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.main.IOStream.__init__": [[41, 43], ["open"], "methods", ["None"], ["\t", "def", "__init__", "(", "self", ",", "path", ")", ":", "\n", "\t\t", "self", ".", "f", "=", "open", "(", "path", ",", "'a'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.main.IOStream.cprint": [[44, 48], ["print", "main.IOStream.f.write", "main.IOStream.f.flush"], "methods", ["None"], ["", "def", "cprint", "(", "self", ",", "text", ")", ":", "\n", "\t\t", "print", "(", "text", ")", "\n", "self", ".", "f", ".", "write", "(", "text", "+", "'\\n'", ")", "\n", "self", ".", "f", ".", "flush", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.main.IOStream.close": [[49, 51], ["main.IOStream.f.close"], "methods", ["home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.main.IOStream.close"], ["", "def", "close", "(", "self", ")", ":", "\n", "\t\t", "self", ".", "f", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.main._init_": [[53, 63], ["os.system", "os.system", "os.system", "os.path.exists", "os.makedirs", "os.path.exists", "os.makedirs", "os.path.exists", "os.makedirs"], "function", ["None"], ["", "", "def", "_init_", "(", "args", ")", ":", "\n", "\t", "if", "not", "os", ".", "path", ".", "exists", "(", "'checkpoints'", ")", ":", "\n", "\t\t", "os", ".", "makedirs", "(", "'checkpoints'", ")", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "'checkpoints/'", "+", "args", ".", "exp_name", ")", ":", "\n", "\t\t", "os", ".", "makedirs", "(", "'checkpoints/'", "+", "args", ".", "exp_name", ")", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "'checkpoints/'", "+", "args", ".", "exp_name", "+", "'/'", "+", "'models'", ")", ":", "\n", "\t\t", "os", ".", "makedirs", "(", "'checkpoints/'", "+", "args", ".", "exp_name", "+", "'/'", "+", "'models'", ")", "\n", "", "os", ".", "system", "(", "'cp main.py checkpoints'", "+", "'/'", "+", "args", ".", "exp_name", "+", "'/'", "+", "'main.py.backup'", ")", "\n", "os", ".", "system", "(", "'cp model.py checkpoints'", "+", "'/'", "+", "args", ".", "exp_name", "+", "'/'", "+", "'model.py.backup'", ")", "\n", "os", ".", "system", "(", "'cp data.py checkpoints'", "+", "'/'", "+", "args", ".", "exp_name", "+", "'/'", "+", "'data.py.backup'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.main.test_one_epoch": [[66, 244], ["net.eval", "tqdm.tqdm", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "src.cuda.size", "src.cuda.size", "target.cuda.size", "src.cuda.cuda", "target.cuda.cuda", "rotation_ab.cuda.cuda", "translation_ab.cuda.cuda", "rotation_ba.cuda.cuda", "translation_ba.cuda.cuda", "col_idx.cuda.cuda", "corr_mat_ab.cuda.cuda", "net", "np.concatenate.append", "np.concatenate.append", "np.concatenate.append", "np.concatenate.append", "np.concatenate.append", "np.concatenate.append", "np.concatenate.append", "np.concatenate.append", "np.concatenate.append", "np.concatenate.append", "util.transform_point_cloud", "util.transform_point_cloud", "torch.eye().cuda().unsqueeze().repeat", "torch.eye().cuda().unsqueeze().repeat", "torch.eye().cuda().unsqueeze().repeat", "torch.eye().cuda().unsqueeze().repeat", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.where", "torch.where", "torch.where", "torch.where", "len", "range", "rotation_ab.cuda.detach().cpu().numpy", "translation_ab.cuda.detach().cpu().numpy", "rotation_ab_pred.detach().cpu().numpy", "translation_ab_pred.detach().cpu().numpy", "euler_ab.numpy", "rotation_ba.cuda.detach().cpu().numpy", "translation_ba.cuda.detach().cpu().numpy", "rotation_ba_pred.detach().cpu().numpy", "translation_ba_pred.detach().cpu().numpy", "euler_ba.numpy", "torch.cross_entropy", "Exception", "torch.mse_loss", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "loss.item", "corr_mat_ab.cuda.transpose().reshape", "corr_mat_ab_pred.view", "torch.clone().detach().cpu().numpy", "torch.clone().detach().cpu().numpy", "torch.clone().detach().cpu().numpy", "torch.clone().detach().cpu().numpy", "torch.clone().detach().cpu().numpy", "torch.clone().detach().cpu().numpy", "torch.clone().detach().cpu().numpy", "torch.clone().detach().cpu().numpy", "torch.clone().detach().cpu().numpy", "torch.clone().detach().cpu().numpy", "torch.clone().detach().cpu().numpy", "torch.clone().detach().cpu().numpy", "torch.clone().detach().cpu().numpy", "torch.clone().detach().cpu().numpy", "torch.clone().detach().cpu().numpy", "torch.clone().detach().cpu().numpy", "numpy.argmax", "range", "numpy.savetxt", "numpy.savetxt", "numpy.savetxt", "numpy.savetxt", "numpy.savetxt", "numpy.savetxt", "torch.eye().cuda().unsqueeze", "torch.eye().cuda().unsqueeze", "torch.eye().cuda().unsqueeze", "torch.eye().cuda().unsqueeze", "corr_mat_ab_pred.view", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.mse_loss", "torch.mse_loss", "Exception", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.eye().cuda().unsqueeze().repeat.clone", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "numpy.savetxt", "numpy.savetxt", "numpy.savetxt", "numpy.savetxt", "rotation_ab.cuda.detach().cpu", "translation_ab.cuda.detach().cpu", "rotation_ab_pred.detach().cpu", "translation_ab_pred.detach().cpu", "rotation_ba.cuda.detach().cpu", "translation_ba.cuda.detach().cpu", "rotation_ba_pred.detach().cpu", "translation_ba_pred.detach().cpu", "corr_mat_ab.cuda.transpose().reshape", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.mse_loss", "torch.mse_loss", "corr_mat_ab.cuda.transpose", "torch.clone().detach().cpu", "torch.clone().detach().cpu", "torch.clone().detach().cpu", "torch.clone().detach().cpu", "torch.clone().detach().cpu", "torch.clone().detach().cpu", "torch.clone().detach().cpu", "torch.clone().detach().cpu", "torch.clone().detach().cpu", "torch.clone().detach().cpu", "torch.clone().detach().cpu", "torch.clone().detach().cpu", "torch.clone().detach().cpu", "torch.clone().detach().cpu", "torch.clone().detach().cpu", "torch.clone().detach().cpu", "torch.eye().cuda", "torch.eye().cuda", "torch.eye().cuda", "torch.eye().cuda", "rotation_ab_pred.transpose", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul().view", "torch.matmul().view", "torch.matmul().view", "torch.matmul().view", "cycle_loss.item", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "rotation_ab.cuda.detach", "translation_ab.cuda.detach", "rotation_ab_pred.detach", "translation_ab_pred.detach", "rotation_ba.cuda.detach", "translation_ba.cuda.detach", "rotation_ba_pred.detach", "translation_ba_pred.detach", "corr_mat_ab.cuda.transpose", "rotation_ab_pred.transpose", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.clone().detach", "torch.clone().detach", "torch.clone().detach", "torch.clone().detach", "torch.clone().detach", "torch.clone().detach", "torch.clone().detach", "torch.clone().detach", "torch.clone().detach", "torch.clone().detach", "torch.clone().detach", "torch.clone().detach", "torch.clone().detach", "torch.clone().detach", "torch.clone().detach", "torch.clone().detach", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "rotation_ba_pred.transpose", "translation_ab_pred.view", "torch.clone", "torch.clone", "torch.clone", "torch.clone", "torch.clone", "torch.clone", "torch.clone", "torch.clone", "torch.clone", "torch.clone", "torch.clone", "torch.clone", "torch.clone", "torch.clone", "torch.clone", "torch.clone"], "function", ["home.repos.pwc.inspect_result.tzodge_PCR-CMU.math_torch.se3.concatenate", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.math_torch.se3.concatenate", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.math_torch.se3.concatenate", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.math_torch.se3.concatenate", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.math_torch.se3.concatenate", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.math_torch.se3.concatenate", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.math_torch.se3.concatenate", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.math_torch.se3.concatenate", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.math_torch.se3.concatenate", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.math_torch.se3.concatenate", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.util.transform_point_cloud", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.util.transform_point_cloud"], ["", "def", "test_one_epoch", "(", "args", ",", "net", ",", "test_loader", ")", ":", "\n", "\t", "net", ".", "eval", "(", ")", "\n", "\n", "# initialization", "\n", "mse_ab", "=", "0", "\n", "mae_ab", "=", "0", "\n", "mse_ba", "=", "0", "\n", "mae_ba", "=", "0", "\n", "\n", "total_loss", "=", "0", "\n", "total_cycle_loss", "=", "0", "\n", "num_examples", "=", "0", "\n", "rotations_ab", "=", "[", "]", "\n", "translations_ab", "=", "[", "]", "\n", "rotations_ab_pred", "=", "[", "]", "\n", "translations_ab_pred", "=", "[", "]", "\n", "\n", "\n", "rotations_ba", "=", "[", "]", "\n", "translations_ba", "=", "[", "]", "\n", "rotations_ba_pred", "=", "[", "]", "\n", "translations_ba_pred", "=", "[", "]", "\n", "\n", "eulers_ab", "=", "[", "]", "\n", "eulers_ba", "=", "[", "]", "\n", "\n", "batch_idx", "=", "0", "\n", "total_correct_pred", "=", "0", "\n", "itr", "=", "0", "\n", "if", "args", ".", "debug", ":", "\n", "\t\t", "ang_error_list", "=", "[", "]", "\n", "", "for", "src", ",", "target", ",", "rotation_ab", ",", "translation_ab", ",", "rotation_ba", ",", "translation_ba", ",", "euler_ab", ",", "euler_ba", ",", "col_idx", ",", "corr_mat_ab", "in", "tqdm", "(", "test_loader", ")", ":", "\n", "\t\t", "batch_size", "=", "src", ".", "size", "(", "0", ")", "\n", "num_points", "=", "src", ".", "size", "(", "-", "1", ")", "\n", "num_points_target", "=", "target", ".", "size", "(", "-", "1", ")", "\n", "\n", "if", "args", ".", "debug", ":", "# if degubbing", "\n", "\t\t\t", "for", "i", "in", "range", "(", "batch_size", ")", ":", "\n", "\t\t\t\t", "np", ".", "savetxt", "(", "\"variables_storage/src_batch_{}_sample_{}\"", ".", "format", "(", "batch_idx", ",", "i", ")", ",", "src", "[", "i", ",", ":", ",", ":", "]", ")", "\n", "np", ".", "savetxt", "(", "\"variables_storage/target_batch_{}_sample_{}\"", ".", "format", "(", "batch_idx", ",", "i", ")", ",", "target", "[", "i", ",", ":", ",", ":", "]", ")", "\n", "np", ".", "savetxt", "(", "\"variables_storage/rotation_ab_batch_{}_sample_{}\"", ".", "format", "(", "batch_idx", ",", "i", ")", ",", "rotation_ab", "[", "i", ",", ":", ",", ":", "]", ")", "\n", "np", ".", "savetxt", "(", "\"variables_storage/translation_ab_batch_{}_sample_{}\"", ".", "format", "(", "batch_idx", ",", "i", ")", ",", "translation_ab", "[", "i", ",", ":", "]", ")", "\n", "np", ".", "savetxt", "(", "\"variables_storage/euler_ab_batch_{}_sample_{}\"", ".", "format", "(", "batch_idx", ",", "i", ")", ",", "euler_ab", "[", "i", ",", ":", "]", ")", "\n", "np", ".", "savetxt", "(", "\"variables_storage/col_idx_batch_{}_sample_{}\"", ".", "format", "(", "batch_idx", ",", "i", ")", ",", "col_idx", "[", "i", ",", ":", "]", ")", "\n", "", "if", "batch_idx", ">=", "100", ":", "\n", "\t\t\t\t", "break", "\n", "\n", "", "", "src", "=", "src", ".", "cuda", "(", ")", "\n", "target", "=", "target", ".", "cuda", "(", ")", "\n", "rotation_ab", "=", "rotation_ab", ".", "cuda", "(", ")", "\n", "translation_ab", "=", "translation_ab", ".", "cuda", "(", ")", "\n", "rotation_ba", "=", "rotation_ba", ".", "cuda", "(", ")", "\n", "translation_ba", "=", "translation_ba", ".", "cuda", "(", ")", "\n", "col_idx", "=", "col_idx", ".", "cuda", "(", ")", "\n", "corr_mat_ab", "=", "corr_mat_ab", ".", "cuda", "(", ")", "\n", "\n", "num_examples", "+=", "batch_size", "\n", "\n", "# model output", "\n", "rotation_ab_pred", ",", "translation_ab_pred", ",", "rotation_ba_pred", ",", "translation_ba_pred", ",", "corr_mat_ab_pred", "=", "net", "(", "src", ",", "target", ")", "\n", "\n", "## save rotation and translation", "\n", "rotations_ab", ".", "append", "(", "rotation_ab", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "translations_ab", ".", "append", "(", "translation_ab", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "rotations_ab_pred", ".", "append", "(", "rotation_ab_pred", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "translations_ab_pred", ".", "append", "(", "translation_ab_pred", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "eulers_ab", ".", "append", "(", "euler_ab", ".", "numpy", "(", ")", ")", "\n", "\n", "rotations_ba", ".", "append", "(", "rotation_ba", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "translations_ba", ".", "append", "(", "translation_ba", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "rotations_ba_pred", ".", "append", "(", "rotation_ba_pred", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "translations_ba_pred", ".", "append", "(", "translation_ba_pred", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "eulers_ba", ".", "append", "(", "euler_ba", ".", "numpy", "(", ")", ")", "\n", "\n", "# transforming the point cloud according to given rotation and translation", "\n", "transformed_src", "=", "transform_point_cloud", "(", "src", ",", "rotation_ab_pred", ",", "translation_ab_pred", ")", "\n", "\n", "transformed_target", "=", "transform_point_cloud", "(", "target", ",", "rotation_ba_pred", ",", "translation_ba_pred", ")", "\n", "\n", "identity", "=", "torch", ".", "eye", "(", "3", ")", ".", "cuda", "(", ")", ".", "unsqueeze", "(", "0", ")", ".", "repeat", "(", "batch_size", ",", "1", ",", "1", ")", "\n", "\n", "\n", "#  correspondence loss, as proposed in our paper", "\n", "if", "args", ".", "loss", "==", "'cross_entropy_corr'", ":", "\n", "# corr_mat_ab: ground truth correspondence matrix", "\n", "# corr_mat_ab_pred: predicted correspondence matrix", "\n", "\t\t\t", "loss_corr", "=", "F", ".", "cross_entropy", "(", "corr_mat_ab_pred", ".", "view", "(", "batch_size", "*", "num_points", ",", "num_points_target", ")", ",", "\n", "torch", ".", "argmax", "(", "corr_mat_ab", ".", "transpose", "(", "1", ",", "2", ")", ".", "reshape", "(", "-", "1", ",", "num_points_target", ")", ",", "axis", "=", "1", ")", ")", "\n", "\n", "loss_transf", "=", "F", ".", "mse_loss", "(", "torch", ".", "matmul", "(", "rotation_ab_pred", ".", "transpose", "(", "2", ",", "1", ")", ",", "rotation_ab", ")", ",", "identity", ")", "+", "F", ".", "mse_loss", "(", "translation_ab_pred", ",", "translation_ab", ")", "\n", "\n", "loss", "=", "loss_corr", "\n", "\n", "\n", "# translation loss, as proposed in DCP", "\n", "", "elif", "args", ".", "loss", "==", "'mse_transf'", ":", "\n", "\t\t\t", "loss", "=", "(", "F", ".", "mse_loss", "(", "torch", ".", "matmul", "(", "rotation_ab_pred", ".", "transpose", "(", "2", ",", "1", ")", ",", "rotation_ab", ")", ",", "identity", ")", "+", "F", ".", "mse_loss", "(", "translation_ab_pred", ",", "translation_ab", ")", ")", "\n", "", "else", ":", "\n", "\t\t\t", "raise", "Exception", "(", "\"please verify the input loss function\"", ")", "\n", "\n", "\n", "", "if", "args", ".", "cycle", ":", "\n", "\t\t\t", "raise", "Exception", "(", "\"cycle for corr_mat_ab not implemented yet\"", ")", "\n", "rotation_loss", "=", "F", ".", "mse_loss", "(", "torch", ".", "matmul", "(", "rotation_ba_pred", ",", "rotation_ab_pred", ")", ",", "identity", ".", "clone", "(", ")", ")", "\n", "translation_loss", "=", "torch", ".", "mean", "(", "(", "torch", ".", "matmul", "(", "rotation_ba_pred", ".", "transpose", "(", "2", ",", "1", ")", ",", "\n", "translation_ab_pred", ".", "view", "(", "batch_size", ",", "3", ",", "1", ")", ")", ".", "view", "(", "batch_size", ",", "3", ")", "\n", "+", "translation_ba_pred", ")", "**", "2", ",", "dim", "=", "[", "0", ",", "1", "]", ")", "\n", "cycle_loss", "=", "rotation_loss", "+", "translation_loss", "\n", "\n", "loss", "=", "loss", "+", "cycle_loss", "*", "0.1", "\n", "\n", "", "total_loss", "+=", "loss", ".", "item", "(", ")", "*", "batch_size", "\n", "\n", "if", "args", ".", "cycle", ":", "\n", "\t\t\t", "total_cycle_loss", "=", "total_cycle_loss", "+", "cycle_loss", ".", "item", "(", ")", "*", "0.1", "*", "batch_size", "\n", "\n", "\n", "\n", "", "gt_idx", "=", "torch", ".", "argmax", "(", "corr_mat_ab", ".", "transpose", "(", "1", ",", "2", ")", ".", "reshape", "(", "-", "1", ",", "num_points_target", ")", ",", "axis", "=", "1", ")", "# ground-truth index of the corresponding target point ", "\n", "pred_idx", "=", "torch", ".", "argmax", "(", "corr_mat_ab_pred", ".", "view", "(", "-", "1", ",", "num_points_target", ")", ",", "axis", "=", "1", ")", "# predicted index of the corresponding target point ", "\n", "\n", "# if the indices match, then the predicted corresponding target point is correct", "\n", "correct_pred_idx", "=", "torch", ".", "where", "(", "gt_idx", "-", "pred_idx", "==", "0", ")", "\n", "total_correct_pred", "+=", "len", "(", "correct_pred_idx", "[", "0", "]", ")", "\n", "\n", "try", ":", "\n", "\t\t\t", "mse_ab", "+=", "torch", ".", "mean", "(", "(", "transformed_src", "-", "target", ")", "**", "2", ",", "dim", "=", "[", "0", ",", "1", ",", "2", "]", ")", ".", "item", "(", ")", "*", "batch_size", "\n", "mae_ab", "+=", "torch", ".", "mean", "(", "torch", ".", "abs", "(", "transformed_src", "-", "target", ")", ",", "dim", "=", "[", "0", ",", "1", ",", "2", "]", ")", ".", "item", "(", ")", "*", "batch_size", "\n", "\n", "mse_ba", "+=", "torch", ".", "mean", "(", "(", "transformed_target", "-", "src", ")", "**", "2", ",", "dim", "=", "[", "0", ",", "1", ",", "2", "]", ")", ".", "item", "(", ")", "*", "batch_size", "\n", "mae_ba", "+=", "torch", ".", "mean", "(", "torch", ".", "abs", "(", "transformed_target", "-", "src", ")", ",", "dim", "=", "[", "0", ",", "1", ",", "2", "]", ")", ".", "item", "(", ")", "*", "batch_size", "\n", "", "except", ":", "# in partial point cloud case", "\n", "\t\t\t", "mse_ab", "+=", "0", "\n", "mae_ab", "+=", "0", "\n", "mse_ba", "+=", "0", "\n", "mae_ba", "+=", "0", "\n", "\n", "", "if", "args", ".", "debug", ":", "\n", "\t\t\t", "corr_mat_ab_pred_np", "=", "torch", ".", "clone", "(", "corr_mat_ab_pred", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "corr_mat_ab_gt_np", "=", "torch", ".", "clone", "(", "corr_mat_ab", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "rotation_ab_pred_np", "=", "torch", ".", "clone", "(", "rotation_ab_pred", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "translation_ab_pred_np", "=", "torch", ".", "clone", "(", "translation_ab_pred", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "col_idx_pred", "=", "np", ".", "argmax", "(", "corr_mat_ab_pred_np", ",", "axis", "=", "1", ")", "\n", "\n", "for", "i", "in", "range", "(", "batch_size", ")", ":", "\n", "\t\t\t\t", "np", ".", "savetxt", "(", "\"variables_storage/corr_mat_ab_pred_batch_{}_sample_{}\"", ".", "format", "(", "batch_idx", ",", "i", ")", ",", "corr_mat_ab_pred_np", "[", "i", ",", ":", ",", ":", "]", ")", "\n", "np", ".", "savetxt", "(", "\"variables_storage/col_idx_pred_batch_{}_sample_{}\"", ".", "format", "(", "batch_idx", ",", "i", ")", ",", "col_idx_pred", "[", "i", ",", ":", "]", ")", "\n", "np", ".", "savetxt", "(", "\"variables_storage/rotation_ab_pred_batch_{}_sample_{}\"", ".", "format", "(", "batch_idx", ",", "i", ")", ",", "rotation_ab_pred_np", "[", "i", ",", ":", "]", ")", "\n", "np", ".", "savetxt", "(", "\"variables_storage/corr_mat_ab_gt_{}_sample_{}\"", ".", "format", "(", "batch_idx", ",", "i", ")", ",", "corr_mat_ab_gt_np", "[", "i", ",", ":", ",", ":", "]", ")", "\n", "\n", "\n", "", "", "itr", "+=", "1", "\n", "batch_idx", "+=", "1", "\n", "\n", "# computing percentage of incorrect point correspondences", "\n", "", "incorrect_correspondences", "=", "(", "1", "-", "total_correct_pred", "/", "(", "num_examples", "*", "num_points", ")", ")", "*", "100", "\n", "\n", "rotations_ab", "=", "np", ".", "concatenate", "(", "rotations_ab", ",", "axis", "=", "0", ")", "\n", "translations_ab", "=", "np", ".", "concatenate", "(", "translations_ab", ",", "axis", "=", "0", ")", "\n", "rotations_ab_pred", "=", "np", ".", "concatenate", "(", "rotations_ab_pred", ",", "axis", "=", "0", ")", "\n", "translations_ab_pred", "=", "np", ".", "concatenate", "(", "translations_ab_pred", ",", "axis", "=", "0", ")", "\n", "\n", "rotations_ba", "=", "np", ".", "concatenate", "(", "rotations_ba", ",", "axis", "=", "0", ")", "\n", "translations_ba", "=", "np", ".", "concatenate", "(", "translations_ba", ",", "axis", "=", "0", ")", "\n", "rotations_ba_pred", "=", "np", ".", "concatenate", "(", "rotations_ba_pred", ",", "axis", "=", "0", ")", "\n", "translations_ba_pred", "=", "np", ".", "concatenate", "(", "translations_ba_pred", ",", "axis", "=", "0", ")", "\n", "\n", "eulers_ab", "=", "np", ".", "concatenate", "(", "eulers_ab", ",", "axis", "=", "0", ")", "\n", "eulers_ba", "=", "np", ".", "concatenate", "(", "eulers_ba", ",", "axis", "=", "0", ")", "\n", "\n", "return", "total_loss", "*", "1.0", "/", "num_examples", ",", "total_cycle_loss", "/", "num_examples", ",", "mse_ab", "*", "1.0", "/", "num_examples", ",", "mae_ab", "*", "1.0", "/", "num_examples", ",", "mse_ba", "*", "1.0", "/", "num_examples", ",", "mae_ba", "*", "1.0", "/", "num_examples", ",", "rotations_ab", ",", "translations_ab", ",", "rotations_ab_pred", ",", "translations_ab_pred", ",", "rotations_ba", ",", "translations_ba", ",", "rotations_ba_pred", ",", "translations_ba_pred", ",", "eulers_ab", ",", "eulers_ba", ",", "incorrect_correspondences", "\n", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.main.train_one_epoch": [[246, 402], ["net.train", "tqdm.tqdm", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "src.cuda.cuda", "target.cuda.cuda", "rotation_ab.cuda.cuda", "translation_ab.cuda.cuda", "rotation_ba.cuda.cuda", "translation_ba.cuda.cuda", "col_idx.cuda.cuda", "corr_mat_ab.cuda.cuda", "src.cuda.size", "src.cuda.size", "target.cuda.size", "opt.zero_grad", "net", "np.concatenate.append", "np.concatenate.append", "np.concatenate.append", "np.concatenate.append", "np.concatenate.append", "np.concatenate.append", "np.concatenate.append", "np.concatenate.append", "np.concatenate.append", "np.concatenate.append", "util.transform_point_cloud", "util.transform_point_cloud", "torch.eye().cuda().unsqueeze().repeat", "torch.eye().cuda().unsqueeze().repeat", "torch.eye().cuda().unsqueeze().repeat", "torch.eye().cuda().unsqueeze().repeat", "torch.mse_loss", "torch.mse_loss", "loss.backward", "opt.step", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.where", "torch.where", "torch.where", "torch.where", "len", "rotation_ab.cuda.detach().cpu().numpy", "translation_ab.cuda.detach().cpu().numpy", "rotation_ab_pred.detach().cpu().numpy", "translation_ab_pred.detach().cpu().numpy", "euler_ab.numpy", "rotation_ba.cuda.detach().cpu().numpy", "translation_ba.cuda.detach().cpu().numpy", "rotation_ba_pred.detach().cpu().numpy", "translation_ba_pred.detach().cpu().numpy", "euler_ba.numpy", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.cross_entropy", "Exception", "torch.mse_loss", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "loss.item", "F.mse_loss.item", "F.mse_loss.item", "corr_mat_ab.cuda.transpose().reshape", "corr_mat_ab_pred.view", "torch.eye().cuda().unsqueeze", "torch.eye().cuda().unsqueeze", "torch.eye().cuda().unsqueeze", "torch.eye().cuda().unsqueeze", "rotation_ab_pred.transpose", "corr_mat_ab_pred.view", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.mse_loss", "torch.mse_loss", "Exception", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.eye().cuda().unsqueeze().repeat.clone", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "rotation_ab.cuda.detach().cpu", "translation_ab.cuda.detach().cpu", "rotation_ab_pred.detach().cpu", "translation_ab_pred.detach().cpu", "rotation_ba.cuda.detach().cpu", "translation_ba.cuda.detach().cpu", "rotation_ba_pred.detach().cpu", "translation_ba_pred.detach().cpu", "corr_mat_ab.cuda.transpose().reshape", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.mse_loss", "torch.mse_loss", "corr_mat_ab.cuda.transpose", "torch.eye().cuda", "torch.eye().cuda", "torch.eye().cuda", "torch.eye().cuda", "rotation_ab_pred.transpose", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul().view", "torch.matmul().view", "torch.matmul().view", "torch.matmul().view", "cycle_loss.item", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "rotation_ab.cuda.detach", "translation_ab.cuda.detach", "rotation_ab_pred.detach", "translation_ab_pred.detach", "rotation_ba.cuda.detach", "translation_ba.cuda.detach", "rotation_ba_pred.detach", "translation_ba_pred.detach", "corr_mat_ab.cuda.transpose", "rotation_ab_pred.transpose", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "rotation_ba_pred.transpose", "translation_ab_pred.view"], "function", ["home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.main.train", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.math_torch.se3.concatenate", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.math_torch.se3.concatenate", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.math_torch.se3.concatenate", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.math_torch.se3.concatenate", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.math_torch.se3.concatenate", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.math_torch.se3.concatenate", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.math_torch.se3.concatenate", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.math_torch.se3.concatenate", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.math_torch.se3.concatenate", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.math_torch.se3.concatenate", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.util.transform_point_cloud", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.util.transform_point_cloud", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.chamfer_distance.chamfer_distance.ChamferDistanceFunction.backward"], ["", "def", "train_one_epoch", "(", "args", ",", "net", ",", "train_loader", ",", "opt", ")", ":", "\n", "\t", "net", ".", "train", "(", ")", "\n", "global", "epoch_COUNT", "\n", "mse_ab", "=", "0", "\n", "mae_ab", "=", "0", "\n", "mse_ba", "=", "0", "\n", "mae_ba", "=", "0", "\n", "\n", "total_loss", "=", "0", "\n", "total_loss_dcp_rot", "=", "0", "\n", "total_loss_dcp_t", "=", "0", "\n", "total_cycle_loss", "=", "0", "\n", "num_examples", "=", "0", "\n", "rotations_ab", "=", "[", "]", "\n", "translations_ab", "=", "[", "]", "\n", "rotations_ab_pred", "=", "[", "]", "\n", "translations_ab_pred", "=", "[", "]", "\n", "\n", "rotations_ba", "=", "[", "]", "\n", "translations_ba", "=", "[", "]", "\n", "rotations_ba_pred", "=", "[", "]", "\n", "translations_ba_pred", "=", "[", "]", "\n", "\n", "eulers_ab", "=", "[", "]", "\n", "eulers_ba", "=", "[", "]", "\n", "\n", "total_correct_pred", "=", "0", "\n", "itr", "=", "0", "\n", "for", "src", ",", "target", ",", "rotation_ab", ",", "translation_ab", ",", "rotation_ba", ",", "translation_ba", ",", "euler_ab", ",", "euler_ba", ",", "col_idx", ",", "corr_mat_ab", "in", "tqdm", "(", "train_loader", ")", ":", "\n", "\t\t", "src", "=", "src", ".", "cuda", "(", ")", "\n", "target", "=", "target", ".", "cuda", "(", ")", "\n", "rotation_ab", "=", "rotation_ab", ".", "cuda", "(", ")", "\n", "translation_ab", "=", "translation_ab", ".", "cuda", "(", ")", "\n", "rotation_ba", "=", "rotation_ba", ".", "cuda", "(", ")", "\n", "translation_ba", "=", "translation_ba", ".", "cuda", "(", ")", "\n", "col_idx", "=", "col_idx", ".", "cuda", "(", ")", "\n", "corr_mat_ab", "=", "corr_mat_ab", ".", "cuda", "(", ")", "\n", "\n", "batch_size", "=", "src", ".", "size", "(", "0", ")", "\n", "num_points", "=", "src", ".", "size", "(", "-", "1", ")", "\n", "num_points_target", "=", "target", ".", "size", "(", "-", "1", ")", "\n", "\n", "opt", ".", "zero_grad", "(", ")", "\n", "num_examples", "+=", "batch_size", "\n", "\n", "# model output", "\n", "rotation_ab_pred", ",", "translation_ab_pred", ",", "rotation_ba_pred", ",", "translation_ba_pred", ",", "corr_mat_ab_pred", "=", "net", "(", "src", ",", "target", ")", "\n", "\n", "## save rotation and translation", "\n", "rotations_ab", ".", "append", "(", "rotation_ab", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "translations_ab", ".", "append", "(", "translation_ab", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "rotations_ab_pred", ".", "append", "(", "rotation_ab_pred", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "translations_ab_pred", ".", "append", "(", "translation_ab_pred", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "eulers_ab", ".", "append", "(", "euler_ab", ".", "numpy", "(", ")", ")", "\n", "\n", "rotations_ba", ".", "append", "(", "rotation_ba", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "translations_ba", ".", "append", "(", "translation_ba", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "rotations_ba_pred", ".", "append", "(", "rotation_ba_pred", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "translations_ba_pred", ".", "append", "(", "translation_ba_pred", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "eulers_ba", ".", "append", "(", "euler_ba", ".", "numpy", "(", ")", ")", "\n", "\n", "# transforming the point cloud according to given rotation and translation", "\n", "transformed_src", "=", "transform_point_cloud", "(", "src", ",", "rotation_ab_pred", ",", "translation_ab_pred", ")", "\n", "\n", "transformed_target", "=", "transform_point_cloud", "(", "target", ",", "rotation_ba_pred", ",", "translation_ba_pred", ")", "\n", "\n", "identity", "=", "torch", ".", "eye", "(", "3", ")", ".", "cuda", "(", ")", ".", "unsqueeze", "(", "0", ")", ".", "repeat", "(", "batch_size", ",", "1", ",", "1", ")", "\n", "\n", "\n", "loss_dcp_rot", "=", "F", ".", "mse_loss", "(", "torch", ".", "matmul", "(", "rotation_ab_pred", ".", "transpose", "(", "2", ",", "1", ")", ",", "rotation_ab", ")", ",", "identity", ")", "\n", "loss_dcp_t", "=", "F", ".", "mse_loss", "(", "translation_ab_pred", ",", "translation_ab", ")", "\n", "\n", "\n", "#  correspondence loss, as proposed in our paper", "\n", "if", "args", ".", "loss", "==", "'cross_entropy_corr'", ":", "\n", "\t\t\t", "loss_corr", "=", "F", ".", "cross_entropy", "(", "corr_mat_ab_pred", ".", "view", "(", "batch_size", "*", "num_points", ",", "num_points_target", ")", ",", "\n", "torch", ".", "argmax", "(", "corr_mat_ab", ".", "transpose", "(", "1", ",", "2", ")", ".", "reshape", "(", "-", "1", ",", "num_points_target", ")", ",", "axis", "=", "1", ")", ")", "\n", "\n", "loss_transf", "=", "F", ".", "mse_loss", "(", "torch", ".", "matmul", "(", "rotation_ab_pred", ".", "transpose", "(", "2", ",", "1", ")", ",", "rotation_ab", ")", ",", "identity", ")", "+", "F", ".", "mse_loss", "(", "translation_ab_pred", ",", "translation_ab", ")", "\n", "\n", "loss", "=", "loss_corr", "\n", "\n", "# translation loss, as proposed in DCP", "\n", "", "elif", "args", ".", "loss", "==", "'mse_transf'", ":", "\n", "\t\t\t", "loss", "=", "(", "F", ".", "mse_loss", "(", "torch", ".", "matmul", "(", "rotation_ab_pred", ".", "transpose", "(", "2", ",", "1", ")", ",", "rotation_ab", ")", ",", "identity", ")", "+", "F", ".", "mse_loss", "(", "translation_ab_pred", ",", "translation_ab", ")", ")", "\n", "", "else", ":", "\n", "\t\t\t", "raise", "Exception", "(", "\"please verify the input loss function\"", ")", "\n", "\n", "\n", "\n", "", "if", "args", ".", "cycle", ":", "\n", "\t\t\t", "raise", "Exception", "(", "\"cycle for corr_mat_ab not implemented yet\"", ")", "\n", "rotation_loss", "=", "F", ".", "mse_loss", "(", "torch", ".", "matmul", "(", "rotation_ba_pred", ",", "rotation_ab_pred", ")", ",", "identity", ".", "clone", "(", ")", ")", "\n", "translation_loss", "=", "torch", ".", "mean", "(", "(", "torch", ".", "matmul", "(", "rotation_ba_pred", ".", "transpose", "(", "2", ",", "1", ")", ",", "\n", "translation_ab_pred", ".", "view", "(", "batch_size", ",", "3", ",", "1", ")", ")", ".", "view", "(", "batch_size", ",", "3", ")", "\n", "+", "translation_ba_pred", ")", "**", "2", ",", "dim", "=", "[", "0", ",", "1", "]", ")", "\n", "cycle_loss", "=", "rotation_loss", "+", "translation_loss", "\n", "\n", "loss", "=", "loss", "+", "cycle_loss", "*", "0.1", "\n", "\n", "", "loss", ".", "backward", "(", ")", "\n", "opt", ".", "step", "(", ")", "\n", "total_loss", "+=", "loss", ".", "item", "(", ")", "*", "batch_size", "\n", "total_loss_dcp_rot", "+=", "loss_dcp_rot", ".", "item", "(", ")", "*", "batch_size", "\n", "total_loss_dcp_t", "+=", "loss_dcp_t", ".", "item", "(", ")", "*", "batch_size", "\n", "\n", "\n", "gt_idx", "=", "torch", ".", "argmax", "(", "corr_mat_ab", ".", "transpose", "(", "1", ",", "2", ")", ".", "reshape", "(", "-", "1", ",", "num_points_target", ")", ",", "axis", "=", "1", ")", "# ground-truth index of the corresponding target point ", "\n", "pred_idx", "=", "torch", ".", "argmax", "(", "corr_mat_ab_pred", ".", "view", "(", "-", "1", ",", "num_points_target", ")", ",", "axis", "=", "1", ")", "# predicted index of the corresponding target point ", "\n", "\n", "# if the indices match, then the predicted corresponding target point is correct", "\n", "correct_pred_idx", "=", "torch", ".", "where", "(", "gt_idx", "-", "pred_idx", "==", "0", ")", "\n", "total_correct_pred", "+=", "len", "(", "correct_pred_idx", "[", "0", "]", ")", "\n", "\n", "if", "args", ".", "cycle", ":", "\n", "\t\t\t", "total_cycle_loss", "=", "total_cycle_loss", "+", "cycle_loss", ".", "item", "(", ")", "*", "0.1", "*", "batch_size", "\n", "\n", "", "try", ":", "\n", "\t\t\t", "mse_ab", "+=", "torch", ".", "mean", "(", "(", "transformed_src", "-", "target", ")", "**", "2", ",", "dim", "=", "[", "0", ",", "1", ",", "2", "]", ")", ".", "item", "(", ")", "*", "batch_size", "\n", "mae_ab", "+=", "torch", ".", "mean", "(", "torch", ".", "abs", "(", "transformed_src", "-", "target", ")", ",", "dim", "=", "[", "0", ",", "1", ",", "2", "]", ")", ".", "item", "(", ")", "*", "batch_size", "\n", "\n", "mse_ba", "+=", "torch", ".", "mean", "(", "(", "transformed_target", "-", "src", ")", "**", "2", ",", "dim", "=", "[", "0", ",", "1", ",", "2", "]", ")", ".", "item", "(", ")", "*", "batch_size", "\n", "mae_ba", "+=", "torch", ".", "mean", "(", "torch", ".", "abs", "(", "transformed_target", "-", "src", ")", ",", "dim", "=", "[", "0", ",", "1", ",", "2", "]", ")", ".", "item", "(", ")", "*", "batch_size", "\n", "", "except", ":", "# in partial point cloud case", "\n", "\t\t\t", "mse_ab", "+=", "0", "\n", "mae_ab", "+=", "0", "\n", "mse_ba", "+=", "0", "\n", "mae_ba", "+=", "0", "\n", "\n", "", "itr", "+=", "1", "\n", "\n", "# computing percentage of incorrect point correspondences", "\n", "", "incorrect_correspondences", "=", "(", "1", "-", "total_correct_pred", "/", "(", "num_examples", "*", "num_points", ")", ")", "*", "100", "\n", "\n", "\n", "rotations_ab", "=", "np", ".", "concatenate", "(", "rotations_ab", ",", "axis", "=", "0", ")", "\n", "translations_ab", "=", "np", ".", "concatenate", "(", "translations_ab", ",", "axis", "=", "0", ")", "\n", "rotations_ab_pred", "=", "np", ".", "concatenate", "(", "rotations_ab_pred", ",", "axis", "=", "0", ")", "\n", "translations_ab_pred", "=", "np", ".", "concatenate", "(", "translations_ab_pred", ",", "axis", "=", "0", ")", "\n", "\n", "rotations_ba", "=", "np", ".", "concatenate", "(", "rotations_ba", ",", "axis", "=", "0", ")", "\n", "translations_ba", "=", "np", ".", "concatenate", "(", "translations_ba", ",", "axis", "=", "0", ")", "\n", "rotations_ba_pred", "=", "np", ".", "concatenate", "(", "rotations_ba_pred", ",", "axis", "=", "0", ")", "\n", "translations_ba_pred", "=", "np", ".", "concatenate", "(", "translations_ba_pred", ",", "axis", "=", "0", ")", "\n", "\n", "eulers_ab", "=", "np", ".", "concatenate", "(", "eulers_ab", ",", "axis", "=", "0", ")", "\n", "eulers_ba", "=", "np", ".", "concatenate", "(", "eulers_ba", ",", "axis", "=", "0", ")", "\n", "\n", "return", "total_loss", "*", "1.0", "/", "num_examples", ",", "total_cycle_loss", "/", "num_examples", ",", "mse_ab", "*", "1.0", "/", "num_examples", ",", "mae_ab", "*", "1.0", "/", "num_examples", ",", "mse_ba", "*", "1.0", "/", "num_examples", ",", "mae_ba", "*", "1.0", "/", "num_examples", ",", "rotations_ab", ",", "translations_ab", ",", "rotations_ab_pred", ",", "translations_ab_pred", ",", "rotations_ba", ",", "translations_ba", ",", "rotations_ba_pred", ",", "translations_ba_pred", ",", "eulers_ab", ",", "eulers_ba", ",", "incorrect_correspondences", "\n", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.main.test": [[404, 429], ["main.test_one_epoch", "numpy.sqrt", "numpy.sqrt", "util.error_euler_angles", "numpy.mean", "numpy.sqrt", "numpy.mean", "numpy.mean", "numpy.sqrt", "numpy.mean", "textio.cprint", "textio.cprint", "textio.cprint", "numpy.degrees", "numpy.abs", "numpy.abs"], "function", ["home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.main.test_one_epoch", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.util.error_euler_angles", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.main.IOStream.cprint", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.main.IOStream.cprint", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.main.IOStream.cprint"], ["", "def", "test", "(", "args", ",", "net", ",", "test_loader", ",", "boardio", ",", "textio", ")", ":", "\n", "\n", "\t", "test_loss", ",", "test_cycle_loss", ",", "test_mse_ab", ",", "test_mae_ab", ",", "test_mse_ba", ",", "test_mae_ba", ",", "test_rotations_ab", ",", "test_translations_ab", ",", "test_rotations_ab_pred", ",", "test_translations_ab_pred", ",", "test_rotations_ba", ",", "test_translations_ba", ",", "test_rotations_ba_pred", ",", "test_translations_ba_pred", ",", "test_eulers_ab", ",", "test_eulers_ba", ",", "test_incorrect_correspondeces", "=", "test_one_epoch", "(", "args", ",", "net", ",", "test_loader", ")", "\n", "test_rmse_ab", "=", "np", ".", "sqrt", "(", "test_mse_ab", ")", "\n", "test_rmse_ba", "=", "np", ".", "sqrt", "(", "test_mse_ba", ")", "\n", "\n", "test_error_euler_angles_ab", "=", "error_euler_angles", "(", "test_rotations_ab_pred", ",", "np", ".", "degrees", "(", "test_eulers_ab", ")", ")", "# computing euler angle error", "\n", "test_r_mse_ab", "=", "np", ".", "mean", "(", "test_error_euler_angles_ab", "**", "2", ")", "\n", "test_r_rmse_ab", "=", "np", ".", "sqrt", "(", "test_r_mse_ab", ")", "\n", "test_r_mae_ab", "=", "np", ".", "mean", "(", "np", ".", "abs", "(", "test_error_euler_angles_ab", ")", ")", "\n", "test_t_mse_ab", "=", "np", ".", "mean", "(", "(", "test_translations_ab", "-", "test_translations_ab_pred", ")", "**", "2", ")", "\n", "test_t_rmse_ab", "=", "np", ".", "sqrt", "(", "test_t_mse_ab", ")", "\n", "test_t_mae_ab", "=", "np", ".", "mean", "(", "np", ".", "abs", "(", "test_translations_ab", "-", "test_translations_ab_pred", ")", ")", "\n", "\n", "textio", ".", "cprint", "(", "'==FINAL TEST=='", ")", "\n", "textio", ".", "cprint", "(", "'A--------->B'", ")", "\n", "textio", ".", "cprint", "(", "'EPOCH:: %d, Loss: %f, Cycle Loss: %f, MSE: %f, RMSE: %f, MAE: %f, rot_MSE: %f, rot_RMSE: %f, '", "\n", "'rot_MAE: %f, trans_MSE: %f, trans_RMSE: %f, trans_MAE: %f'", "\n", "%", "(", "-", "1", ",", "test_loss", ",", "test_cycle_loss", ",", "test_mse_ab", ",", "test_rmse_ab", ",", "test_mae_ab", ",", "\n", "test_r_mse_ab", ",", "test_r_rmse_ab", ",", "\n", "test_r_mae_ab", ",", "test_t_mse_ab", ",", "test_t_rmse_ab", ",", "test_t_mae_ab", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.main.train": [[431, 588], ["torch.optim.lr_scheduler.MultiStepLR", "print", "range", "print", "torch.SGD", "print", "torch.Adam", "len", "torch.optim.lr_scheduler.MultiStepLR.step", "main.train_one_epoch", "main.test_one_epoch", "numpy.sqrt", "numpy.sqrt", "numpy.sqrt", "numpy.sqrt", "util.error_euler_angles", "numpy.mean", "numpy.sqrt", "numpy.mean", "numpy.mean", "numpy.sqrt", "numpy.mean", "util.error_euler_angles", "numpy.mean", "numpy.sqrt", "numpy.mean", "numpy.mean", "numpy.sqrt", "numpy.mean", "textio.cprint", "textio.cprint", "textio.cprint", "textio.cprint", "textio.cprint", "textio.cprint", "textio.cprint", "textio.cprint", "textio.cprint", "boardio.add_scalar", "boardio.add_scalar", "boardio.add_scalar", "boardio.add_scalar", "boardio.add_scalar", "boardio.add_scalar", "boardio.add_scalar", "boardio.add_scalar", "boardio.add_scalar", "boardio.add_scalar", "boardio.add_scalar", "boardio.add_scalar", "boardio.add_scalar", "boardio.add_scalar", "boardio.add_scalar", "boardio.add_scalar", "boardio.add_scalar", "boardio.add_scalar", "boardio.add_scalar", "boardio.add_scalar", "boardio.add_scalar", "boardio.add_scalar", "boardio.add_scalar", "boardio.add_scalar", "boardio.add_scalar", "boardio.add_scalar", "boardio.add_scalar", "boardio.add_scalar", "boardio.add_scalar", "boardio.add_scalar", "boardio.add_scalar", "boardio.add_scalar", "gc.collect", "net.parameters", "net.parameters", "numpy.degrees", "numpy.abs", "numpy.abs", "numpy.degrees", "numpy.abs", "numpy.abs", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "net.module.state_dict", "net.state_dict", "net.module.state_dict", "net.state_dict"], "function", ["home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.main.train_one_epoch", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.main.test_one_epoch", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.util.error_euler_angles", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.util.error_euler_angles", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.main.IOStream.cprint", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.main.IOStream.cprint", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.main.IOStream.cprint", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.main.IOStream.cprint", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.main.IOStream.cprint", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.main.IOStream.cprint", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.main.IOStream.cprint", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.main.IOStream.cprint", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.main.IOStream.cprint", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.common.torch.CheckPointManager.save", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.common.torch.CheckPointManager.save", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.common.torch.CheckPointManager.save", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.common.torch.CheckPointManager.save", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.common.torch.CheckPointManager.save", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.common.torch.CheckPointManager.save", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.common.torch.CheckPointManager.save", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.common.torch.CheckPointManager.save", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.common.torch.CheckPointManager.save", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.common.torch.CheckPointManager.save", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.common.torch.CheckPointManager.save", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.common.torch.CheckPointManager.save", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.common.torch.CheckPointManager.save", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.common.torch.CheckPointManager.save", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.common.torch.CheckPointManager.save", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.common.torch.CheckPointManager.save"], ["", "def", "train", "(", "args", ",", "net", ",", "train_loader", ",", "test_loader", ",", "boardio", ",", "textio", ")", ":", "\n", "\t", "if", "args", ".", "use_sgd", ":", "\n", "\t\t", "print", "(", "\"Use SGD\"", ")", "\n", "opt", "=", "optim", ".", "SGD", "(", "net", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "lr", "*", "100", ",", "momentum", "=", "args", ".", "momentum", ",", "weight_decay", "=", "1e-4", ")", "\n", "", "else", ":", "\n", "\t\t", "print", "(", "\"Use Adam\"", ")", "\n", "opt", "=", "optim", ".", "Adam", "(", "net", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "lr", ",", "weight_decay", "=", "1e-4", ",", "betas", "=", "args", ".", "betas", ")", "\n", "", "scheduler", "=", "MultiStepLR", "(", "opt", ",", "milestones", "=", "[", "25", ",", "50", ",", "100", ",", "150", ",", "200", "]", ",", "gamma", "=", "0.25", ")", "\n", "\n", "print", "(", "len", "(", "train_loader", ")", ",", "\"len(train_loader)\"", ")", "\n", "best_test_loss", "=", "np", ".", "inf", "\n", "best_test_cycle_loss", "=", "np", ".", "inf", "\n", "best_test_mse_ab", "=", "np", ".", "inf", "\n", "best_test_rmse_ab", "=", "np", ".", "inf", "\n", "best_test_mae_ab", "=", "np", ".", "inf", "\n", "\n", "best_test_r_mse_ab", "=", "np", ".", "inf", "\n", "best_test_r_rmse_ab", "=", "np", ".", "inf", "\n", "best_test_r_mae_ab", "=", "np", ".", "inf", "\n", "best_test_t_mse_ab", "=", "np", ".", "inf", "\n", "best_test_t_rmse_ab", "=", "np", ".", "inf", "\n", "best_test_t_mae_ab", "=", "np", ".", "inf", "\n", "\n", "best_test_mse_ba", "=", "np", ".", "inf", "\n", "best_test_rmse_ba", "=", "np", ".", "inf", "\n", "best_test_mae_ba", "=", "np", ".", "inf", "\n", "\n", "best_test_r_mse_ba", "=", "np", ".", "inf", "\n", "best_test_r_rmse_ba", "=", "np", ".", "inf", "\n", "best_test_r_mae_ba", "=", "np", ".", "inf", "\n", "best_test_t_mse_ba", "=", "np", ".", "inf", "\n", "best_test_t_rmse_ba", "=", "np", ".", "inf", "\n", "best_test_t_mae_ba", "=", "np", ".", "inf", "\n", "\n", "for", "epoch", "in", "range", "(", "args", ".", "epochs", ")", ":", "\n", "\t\t", "scheduler", ".", "step", "(", ")", "\n", "train_loss", ",", "train_cycle_loss", ",", "train_mse_ab", ",", "train_mae_ab", ",", "train_mse_ba", ",", "train_mae_ba", ",", "train_rotations_ab", ",", "train_translations_ab", ",", "train_rotations_ab_pred", ",", "train_translations_ab_pred", ",", "train_rotations_ba", ",", "train_translations_ba", ",", "train_rotations_ba_pred", ",", "train_translations_ba_pred", ",", "train_eulers_ab", ",", "train_eulers_ba", ",", "train_incorrect_correspondeces", "=", "train_one_epoch", "(", "args", ",", "net", ",", "train_loader", ",", "opt", ")", "\n", "\n", "test_loss", ",", "test_cycle_loss", ",", "test_mse_ab", ",", "test_mae_ab", ",", "test_mse_ba", ",", "test_mae_ba", ",", "test_rotations_ab", ",", "test_translations_ab", ",", "test_rotations_ab_pred", ",", "test_translations_ab_pred", ",", "test_rotations_ba", ",", "test_translations_ba", ",", "test_rotations_ba_pred", ",", "test_translations_ba_pred", ",", "test_eulers_ab", ",", "test_eulers_ba", ",", "test_incorrect_correspondeces", "=", "test_one_epoch", "(", "args", ",", "net", ",", "test_loader", ")", "\n", "train_rmse_ab", "=", "np", ".", "sqrt", "(", "train_mse_ab", ")", "\n", "test_rmse_ab", "=", "np", ".", "sqrt", "(", "test_mse_ab", ")", "\n", "\n", "train_rmse_ba", "=", "np", ".", "sqrt", "(", "train_mse_ba", ")", "\n", "test_rmse_ba", "=", "np", ".", "sqrt", "(", "test_mse_ba", ")", "\n", "\n", "train_error_euler_angles_ab", "=", "error_euler_angles", "(", "train_rotations_ab_pred", ",", "np", ".", "degrees", "(", "train_eulers_ab", ")", ")", "# computing euler angle error", "\n", "train_r_mse_ab", "=", "np", ".", "mean", "(", "train_error_euler_angles_ab", "**", "2", ")", "\n", "train_r_rmse_ab", "=", "np", ".", "sqrt", "(", "train_r_mse_ab", ")", "\n", "train_r_mae_ab", "=", "np", ".", "mean", "(", "np", ".", "abs", "(", "train_error_euler_angles_ab", ")", ")", "\n", "train_t_mse_ab", "=", "np", ".", "mean", "(", "(", "train_translations_ab", "-", "train_translations_ab_pred", ")", "**", "2", ")", "\n", "train_t_rmse_ab", "=", "np", ".", "sqrt", "(", "train_t_mse_ab", ")", "\n", "train_t_mae_ab", "=", "np", ".", "mean", "(", "np", ".", "abs", "(", "train_translations_ab", "-", "train_translations_ab_pred", ")", ")", "\n", "\n", "\n", "test_error_euler_angles_ab", "=", "error_euler_angles", "(", "test_rotations_ab_pred", ",", "np", ".", "degrees", "(", "test_eulers_ab", ")", ")", "# computing euler angle error", "\n", "test_r_mse_ab", "=", "np", ".", "mean", "(", "test_error_euler_angles_ab", "**", "2", ")", "\n", "test_r_rmse_ab", "=", "np", ".", "sqrt", "(", "test_r_mse_ab", ")", "\n", "test_r_mae_ab", "=", "np", ".", "mean", "(", "np", ".", "abs", "(", "test_error_euler_angles_ab", ")", ")", "\n", "test_t_mse_ab", "=", "np", ".", "mean", "(", "(", "test_translations_ab", "-", "test_translations_ab_pred", ")", "**", "2", ")", "\n", "test_t_rmse_ab", "=", "np", ".", "sqrt", "(", "test_t_mse_ab", ")", "\n", "test_t_mae_ab", "=", "np", ".", "mean", "(", "np", ".", "abs", "(", "test_translations_ab", "-", "test_translations_ab_pred", ")", ")", "\n", "\n", "if", "best_test_loss", ">=", "test_loss", ":", "\n", "\t\t\t", "best_test_loss", "=", "test_loss", "\n", "best_test_cycle_loss", "=", "test_cycle_loss", "\n", "\n", "best_test_mse_ab", "=", "test_mse_ab", "\n", "best_test_rmse_ab", "=", "test_rmse_ab", "\n", "best_test_mae_ab", "=", "test_mae_ab", "\n", "\n", "best_test_r_mse_ab", "=", "test_r_mse_ab", "\n", "best_test_r_rmse_ab", "=", "test_r_rmse_ab", "\n", "best_test_r_mae_ab", "=", "test_r_mae_ab", "\n", "\n", "best_test_t_mse_ab", "=", "test_t_mse_ab", "\n", "best_test_t_rmse_ab", "=", "test_t_rmse_ab", "\n", "best_test_t_mae_ab", "=", "test_t_mae_ab", "\n", "\n", "if", "torch", ".", "cuda", ".", "device_count", "(", ")", ">", "1", ":", "\n", "\t\t\t\t", "torch", ".", "save", "(", "net", ".", "module", ".", "state_dict", "(", ")", ",", "'checkpoints/%s/models/model.best.t7'", "%", "args", ".", "exp_name", ")", "\n", "", "else", ":", "\n", "\t\t\t\t", "torch", ".", "save", "(", "net", ".", "state_dict", "(", ")", ",", "'checkpoints/%s/models/model.best.t7'", "%", "args", ".", "exp_name", ")", "\n", "\n", "", "", "textio", ".", "cprint", "(", "'==TRAIN=='", ")", "\n", "textio", ".", "cprint", "(", "'A--------->B'", ")", "\n", "textio", ".", "cprint", "(", "'EPOCH:: %d, Loss: %f, Cycle Loss:, %f, MSE: %f, RMSE: %f, MAE: %f, rot_MSE: %f, rot_RMSE: %f, '", "\n", "'rot_MAE: %f, trans_MSE: %f, trans_RMSE: %f, trans_MAE: %f, percent_incorrect_corr: %f'", "\n", "%", "(", "epoch", ",", "train_loss", ",", "train_cycle_loss", ",", "train_mse_ab", ",", "train_rmse_ab", ",", "train_mae_ab", ",", "train_r_mse_ab", ",", "\n", "train_r_rmse_ab", ",", "train_r_mae_ab", ",", "train_t_mse_ab", ",", "train_t_rmse_ab", ",", "train_t_mae_ab", ",", "train_incorrect_correspondeces", ")", ")", "\n", "\n", "textio", ".", "cprint", "(", "'==TEST=='", ")", "\n", "textio", ".", "cprint", "(", "'A--------->B'", ")", "\n", "textio", ".", "cprint", "(", "'EPOCH:: %d, Loss: %f, Cycle Loss: %f, MSE: %f, RMSE: %f, MAE: %f, rot_MSE: %f, rot_RMSE: %f, '", "\n", "'rot_MAE: %f, trans_MSE: %f, trans_RMSE: %f, trans_MAE: %f, percent_incorrect_corr: %f'", "\n", "%", "(", "epoch", ",", "test_loss", ",", "test_cycle_loss", ",", "test_mse_ab", ",", "test_rmse_ab", ",", "test_mae_ab", ",", "test_r_mse_ab", ",", "\n", "test_r_rmse_ab", ",", "test_r_mae_ab", ",", "test_t_mse_ab", ",", "test_t_rmse_ab", ",", "test_t_mae_ab", ",", "test_incorrect_correspondeces", ")", ")", "\n", "\n", "textio", ".", "cprint", "(", "'==BEST TEST=='", ")", "\n", "textio", ".", "cprint", "(", "'A--------->B'", ")", "\n", "textio", ".", "cprint", "(", "'EPOCH:: %d, Loss: %f, Cycle Loss: %f, MSE: %f, RMSE: %f, MAE: %f, rot_MSE: %f, rot_RMSE: %f, '", "\n", "'rot_MAE: %f, trans_MSE: %f, trans_RMSE: %f, trans_MAE: %f'", "\n", "%", "(", "epoch", ",", "best_test_loss", ",", "best_test_cycle_loss", ",", "best_test_mse_ab", ",", "best_test_rmse_ab", ",", "\n", "best_test_mae_ab", ",", "best_test_r_mse_ab", ",", "best_test_r_rmse_ab", ",", "\n", "best_test_r_mae_ab", ",", "best_test_t_mse_ab", ",", "best_test_t_rmse_ab", ",", "best_test_t_mae_ab", ")", ")", "\n", "\n", "# Train", "\n", "boardio", ".", "add_scalar", "(", "'A->B/train/loss'", ",", "train_loss", ",", "epoch", ")", "\n", "boardio", ".", "add_scalar", "(", "'A->B/train/MSE'", ",", "train_mse_ab", ",", "epoch", ")", "\n", "boardio", ".", "add_scalar", "(", "'A->B/train/RMSE'", ",", "train_rmse_ab", ",", "epoch", ")", "\n", "boardio", ".", "add_scalar", "(", "'A->B/train/MAE'", ",", "train_mae_ab", ",", "epoch", ")", "\n", "boardio", ".", "add_scalar", "(", "'A->B/train/rotation/MSE'", ",", "train_r_mse_ab", ",", "epoch", ")", "\n", "boardio", ".", "add_scalar", "(", "'A->B/train/rotation/RMSE'", ",", "train_r_rmse_ab", ",", "epoch", ")", "\n", "boardio", ".", "add_scalar", "(", "'A->B/train/rotation/MAE'", ",", "train_r_mae_ab", ",", "epoch", ")", "\n", "boardio", ".", "add_scalar", "(", "'A->B/train/translation/MSE'", ",", "train_t_mse_ab", ",", "epoch", ")", "\n", "boardio", ".", "add_scalar", "(", "'A->B/train/translation/RMSE'", ",", "train_t_rmse_ab", ",", "epoch", ")", "\n", "boardio", ".", "add_scalar", "(", "'A->B/train/translation/MAE'", ",", "train_t_mae_ab", ",", "epoch", ")", "\n", "boardio", ".", "add_scalar", "(", "'A->B/train/incorrect_correspondences'", ",", "train_incorrect_correspondeces", ",", "epoch", ")", "\n", "\n", "\n", "# Test", "\n", "boardio", ".", "add_scalar", "(", "'A->B/test/loss'", ",", "test_loss", ",", "epoch", ")", "\n", "boardio", ".", "add_scalar", "(", "'A->B/test/MSE'", ",", "test_mse_ab", ",", "epoch", ")", "\n", "boardio", ".", "add_scalar", "(", "'A->B/test/RMSE'", ",", "test_rmse_ab", ",", "epoch", ")", "\n", "boardio", ".", "add_scalar", "(", "'A->B/test/MAE'", ",", "test_mae_ab", ",", "epoch", ")", "\n", "boardio", ".", "add_scalar", "(", "'A->B/test/rotation/MSE'", ",", "test_r_mse_ab", ",", "epoch", ")", "\n", "boardio", ".", "add_scalar", "(", "'A->B/test/rotation/RMSE'", ",", "test_r_rmse_ab", ",", "epoch", ")", "\n", "boardio", ".", "add_scalar", "(", "'A->B/test/rotation/MAE'", ",", "test_r_mae_ab", ",", "epoch", ")", "\n", "boardio", ".", "add_scalar", "(", "'A->B/test/translation/MSE'", ",", "test_t_mse_ab", ",", "epoch", ")", "\n", "boardio", ".", "add_scalar", "(", "'A->B/test/translation/RMSE'", ",", "test_t_rmse_ab", ",", "epoch", ")", "\n", "boardio", ".", "add_scalar", "(", "'A->B/test/translation/MAE'", ",", "test_t_mae_ab", ",", "epoch", ")", "\n", "boardio", ".", "add_scalar", "(", "'A->B/test/incorrect_correspondences'", ",", "test_incorrect_correspondeces", ",", "epoch", ")", "\n", "\n", "# Best Test", "\n", "boardio", ".", "add_scalar", "(", "'A->B/best_test/loss'", ",", "best_test_loss", ",", "epoch", ")", "\n", "boardio", ".", "add_scalar", "(", "'A->B/best_test/MSE'", ",", "best_test_mse_ab", ",", "epoch", ")", "\n", "boardio", ".", "add_scalar", "(", "'A->B/best_test/RMSE'", ",", "best_test_rmse_ab", ",", "epoch", ")", "\n", "boardio", ".", "add_scalar", "(", "'A->B/best_test/MAE'", ",", "best_test_mae_ab", ",", "epoch", ")", "\n", "boardio", ".", "add_scalar", "(", "'A->B/best_test/rotation/MSE'", ",", "best_test_r_mse_ab", ",", "epoch", ")", "\n", "boardio", ".", "add_scalar", "(", "'A->B/best_test/rotation/RMSE'", ",", "best_test_r_rmse_ab", ",", "epoch", ")", "\n", "boardio", ".", "add_scalar", "(", "'A->B/best_test/rotation/MAE'", ",", "best_test_r_mae_ab", ",", "epoch", ")", "\n", "boardio", ".", "add_scalar", "(", "'A->B/best_test/translation/MSE'", ",", "best_test_t_mse_ab", ",", "epoch", ")", "\n", "boardio", ".", "add_scalar", "(", "'A->B/best_test/translation/RMSE'", ",", "best_test_t_rmse_ab", ",", "epoch", ")", "\n", "boardio", ".", "add_scalar", "(", "'A->B/best_test/translation/MAE'", ",", "best_test_t_mae_ab", ",", "epoch", ")", "\n", "\n", "if", "torch", ".", "cuda", ".", "device_count", "(", ")", ">", "1", ":", "\n", "\t\t\t", "torch", ".", "save", "(", "net", ".", "module", ".", "state_dict", "(", ")", ",", "'checkpoints/%s/models/model.%s.t7'", "%", "(", "args", ".", "exp_name", ",", "\"last\"", ")", ")", "\n", "", "else", ":", "\n", "\t\t\t", "torch", ".", "save", "(", "net", ".", "state_dict", "(", ")", ",", "'checkpoints/%s/models/model.%s.t7'", "%", "(", "args", ".", "exp_name", ",", "\"last\"", ")", ")", "\n", "", "gc", ".", "collect", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.main.extract_vertices": [[593, 597], ["mesh.sample_points_uniformly", "numpy.asanyarray"], "function", ["None"], ["", "", "def", "extract_vertices", "(", "mesh", ",", "num_vert", "=", "512", ")", ":", "\n", "\t", "pcd_downsampled", "=", "mesh", ".", "sample_points_uniformly", "(", "number_of_points", "=", "num_vert", ")", "\n", "points", "=", "np", ".", "asanyarray", "(", "pcd_downsampled", ".", "points", ")", "\n", "return", "points", "\n", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.main.rotate_cloud": [[599, 622], ["scipy.spatial.transform.Rotation.from_rotvec", "Rotation.from_rotvec.as_dcm", "numpy.random.permutation", "numpy.random.rand", "numpy.array", "numpy.linalg.norm", "Rot_instance.as_dcm.dot", "numpy.arange", "len", "numpy.random.rand", "numpy.random.uniform", "len"], "function", ["None"], ["", "def", "rotate_cloud", "(", "points", ",", "add_noise", "=", "False", ")", ":", "\n", "\t", "'''\n\tinput:\n\t\tpoints = Nx3\n\toutput:\n\t\tpoints = Nx3\n\t'''", "\n", "axis", "=", "np", ".", "random", ".", "rand", "(", "3", ",", ")", "-", "np", ".", "array", "(", "[", "0.5", ",", "0.5", ",", "0.5", "]", ")", "\n", "axis", "=", "axis", "/", "np", ".", "linalg", ".", "norm", "(", "axis", ")", "\n", "# angle from [-pi/factor to +pi/factor]", "\n", "angle", "=", "2", "*", "(", "np", ".", "random", ".", "uniform", "(", ")", "-", "0.5", ")", "*", "np", ".", "pi", "/", "1", "\n", "\n", "Rot_instance", "=", "Rotation", ".", "from_rotvec", "(", "axis", "*", "angle", ")", "\n", "R_ab", "=", "Rot_instance", ".", "as_dcm", "(", ")", "\n", "\n", "points_rot", "=", "R_ab", ".", "dot", "(", "points", ".", "T", ")", ".", "T", "\n", "\n", "\n", "if", "add_noise", ":", "\n", "\t\t", "points_rot", "=", "points_rot", "+", "np", ".", "random", ".", "rand", "(", "len", "(", "points_rot", ")", ",", "3", ")", "*", "0.05", "\n", "", "shuffle_idx", "=", "np", ".", "random", ".", "permutation", "(", "np", ".", "arange", "(", "len", "(", "points_rot", ")", ")", ")", "\n", "points_rot", "=", "points_rot", "[", "shuffle_idx", ",", ":", "]", "\n", "return", "points_rot", ",", "R_ab", "\n", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.main.Network_input_format": [[625, 630], ["points.reshape().astype", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "points_cuda.permute().cuda.permute().cuda", "points.reshape", "points_cuda.permute().cuda.permute"], "function", ["None"], ["", "def", "Network_input_format", "(", "points", ")", ":", "\n", "\t", "points_cuda", "=", "points", ".", "reshape", "(", "512", ",", "3", ",", "1", ")", ".", "astype", "(", "'float32'", ")", "\n", "points_cuda", "=", "torch", ".", "from_numpy", "(", "points_cuda", ")", "\n", "points_cuda", "=", "points_cuda", ".", "permute", "(", "2", ",", "1", ",", "0", ")", ".", "cuda", "(", ")", "# input shape shpuld be [1,3,512]", "\n", "return", "points_cuda", "\n", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.main.create_pcd_obj": [[631, 642], ["open3d.geometry.PointCloud", "open3d.utility.Vector3dVector", "o3d.geometry.PointCloud.paint_uniform_color"], "function", ["None"], ["", "def", "create_pcd_obj", "(", "np_array", ",", "col", "=", "[", "1", ",", "0", ",", "0", "]", ")", ":", "\n", "\t", "'''\n\tinput: nx3 array\n\toutput: pcd object \n\t\t\tcan be displayed using o3d.visualization.draw_geometries([pcd1,pcd2])\n\t'''", "\n", "\n", "pcd", "=", "o3d", ".", "geometry", ".", "PointCloud", "(", ")", "\n", "pcd", ".", "points", "=", "o3d", ".", "utility", ".", "Vector3dVector", "(", "np_array", "[", ":", ",", "0", ":", "3", "]", ")", "\n", "pcd", ".", "paint_uniform_color", "(", "col", ")", "\n", "return", "pcd", "\n", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.main.test_bunny": [[644, 672], ["open3d.io.read_point_cloud", "numpy.asarray", "helper.fit_in_m1_to_1", "open3d.io.read_point_cloud", "numpy.asarray", "helper.fit_in_m1_to_1", "main.rotate_cloud", "main.Network_input_format", "main.Network_input_format", "net", "print", "print", "helper.display_three_clouds", "rotation_ab_pred.detach().cpu().numpy().dot", "rotation_ab_pred.detach().cpu().numpy", "rotation_ab_pred.detach().cpu", "rotation_ab_pred.detach"], "function", ["home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.helper.fit_in_m1_to_1", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.helper.fit_in_m1_to_1", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.main.rotate_cloud", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.main.Network_input_format", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.main.Network_input_format", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.helper.display_three_clouds"], ["", "def", "test_bunny", "(", "args", ",", "net", ")", ":", "\n", "\n", "\t", "pcd_src", "=", "o3d", ".", "io", ".", "read_point_cloud", "(", "\"CAD_models/office_1_chair_extracted1.pcd\"", ")", "\n", "points_src", "=", "np", ".", "asarray", "(", "pcd_src", ".", "points", ")", "\n", "points_src", "=", "helper", ".", "fit_in_m1_to_1", "(", "points_src", ")", "\n", "\n", "pcd_target", "=", "o3d", ".", "io", ".", "read_point_cloud", "(", "\"CAD_models/office_1_chair_extracted1.pcd\"", ")", "\n", "points_target", "=", "np", ".", "asarray", "(", "pcd_target", ".", "points", ")", "\n", "points_target", "=", "helper", ".", "fit_in_m1_to_1", "(", "points_target", ")", "\n", "\n", "points_rot", ",", "R_ab_gt", "=", "rotate_cloud", "(", "points_target", ")", "\n", "\n", "points_cuda", "=", "Network_input_format", "(", "points_src", ")", "\n", "points_rot_cuda", "=", "Network_input_format", "(", "points_rot", ")", "\n", "\n", "src", "=", "points_cuda", "#", "\n", "target", "=", "points_rot_cuda", "#", "\n", "\n", "\n", "rotation_ab_pred", ",", "translation_ab_pred", ",", "rotation_ba_pred", ",", "translation_ba_pred", ",", "corr_mat_ab_pred", "=", "net", "(", "src", ",", "target", ")", "\n", "print", "(", "rotation_ab_pred", ",", "\"rotation_ab_pred\"", ")", "\n", "print", "(", "R_ab_gt", ",", "\"R_ab_gt\"", ")", "\n", "\n", "\n", "points_pred", "=", "rotation_ab_pred", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "dot", "(", "points_src", ".", "T", ")", ".", "T", "\n", "\n", "helper", ".", "display_three_clouds", "(", "points_src", ",", "points_rot", ",", "points_pred", ",", "title", "=", "\"real world data\"", ",", "legend_list", "=", "[", "\" source\"", ",", "\"target\"", ",", "\"prediction\"", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.main.main": [[675, 826], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "numpy.random.seed", "tensorboardX.SummaryWriter", "main._init_", "main.IOStream", "main.IOStream.cprint", "print", "tensorboardX.SummaryWriter.close", "str", "data.ModelNet40", "torch.utils.data.DataLoader", "data.ModelNet40", "torch.utils.data.DataLoader", "Exception", "model.DCP().cuda", "Exception", "main.train", "nn.DataParallel.load_state_dict", "print", "nn.DataParallel.load_state_dict", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.DataParallel", "print", "print", "main.test_bunny", "main.test", "model.DCP", "print", "os.path.exists", "print", "torch.load", "torch.load", "torch.load", "torch.load", "print", "torch.load", "torch.load", "torch.load", "torch.load", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count"], "function", ["home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.main._init_", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.main.IOStream.cprint", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.main.IOStream.close", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.main.train", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.main.test_bunny", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.main.test", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.common.torch.CheckPointManager.load", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.common.torch.CheckPointManager.load", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.common.torch.CheckPointManager.load", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.common.torch.CheckPointManager.load", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.common.torch.CheckPointManager.load", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.common.torch.CheckPointManager.load", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.common.torch.CheckPointManager.load", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.common.torch.CheckPointManager.load"], ["", "def", "main", "(", ")", ":", "\n", "\t", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Point Cloud Registration'", ")", "\n", "parser", ".", "add_argument", "(", "'--exp_name'", ",", "type", "=", "str", ",", "default", "=", "'exp'", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'Name of the experiment'", ")", "\n", "parser", ".", "add_argument", "(", "'--model'", ",", "type", "=", "str", ",", "default", "=", "'dcp'", ",", "metavar", "=", "'N'", ",", "\n", "choices", "=", "[", "'dcp'", "]", ",", "\n", "help", "=", "'Model to use, [dcp]'", ")", "\n", "parser", ".", "add_argument", "(", "'--emb_nn'", ",", "type", "=", "str", ",", "default", "=", "'dgcnn'", ",", "metavar", "=", "'N'", ",", "\n", "choices", "=", "[", "'pointnet'", ",", "'dgcnn'", "]", ",", "\n", "help", "=", "'Embedding nn to use, [pointnet, dgcnn]'", ")", "\n", "parser", ".", "add_argument", "(", "'--pointer'", ",", "type", "=", "str", ",", "default", "=", "'transformer'", ",", "metavar", "=", "'N'", ",", "\n", "choices", "=", "[", "'identity'", ",", "'transformer'", "]", ",", "\n", "help", "=", "'Attention-based pointer generator to use, [identity, transformer]'", ")", "\n", "parser", ".", "add_argument", "(", "'--head'", ",", "type", "=", "str", ",", "default", "=", "'svd'", ",", "metavar", "=", "'N'", ",", "\n", "choices", "=", "[", "'mlp'", ",", "'svd'", ",", "]", ",", "\n", "help", "=", "'Head to use, [mlp, svd]'", ")", "\n", "parser", ".", "add_argument", "(", "'--emb_dims'", ",", "type", "=", "int", ",", "default", "=", "512", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'Dimension of embeddings'", ")", "\n", "parser", ".", "add_argument", "(", "'--n_blocks'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'Num of blocks of encoder&decoder'", ")", "\n", "parser", ".", "add_argument", "(", "'--n_heads'", ",", "type", "=", "int", ",", "default", "=", "16", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'Num of heads in multiheadedattention'", ")", "\n", "parser", ".", "add_argument", "(", "'--ff_dims'", ",", "type", "=", "int", ",", "default", "=", "1024", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'Num of dimensions of fc in transformer'", ")", "\n", "parser", ".", "add_argument", "(", "'--dropout'", ",", "type", "=", "float", ",", "default", "=", "0.0", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'Dropout ratio in transformer'", ")", "\n", "parser", ".", "add_argument", "(", "'--batch_size'", ",", "type", "=", "int", ",", "default", "=", "16", ",", "metavar", "=", "'batch_size'", ",", "\n", "help", "=", "'Size of batch)'", ")", "\n", "parser", ".", "add_argument", "(", "'--test_batch_size'", ",", "type", "=", "int", ",", "default", "=", "10", ",", "metavar", "=", "'batch_size'", ",", "\n", "help", "=", "'Size of batch)'", ")", "\n", "parser", ".", "add_argument", "(", "'--epochs'", ",", "type", "=", "int", ",", "default", "=", "250", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'number of episode to train '", ")", "\n", "parser", ".", "add_argument", "(", "'--use_sgd'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ",", "\n", "help", "=", "'Use SGD'", ")", "\n", "parser", ".", "add_argument", "(", "'--lr'", ",", "type", "=", "float", ",", "default", "=", "0.001", ",", "metavar", "=", "'LR'", ",", "\n", "help", "=", "'learning rate (default: 0.001, 0.1 if using sgd)'", ")", "\n", "parser", ".", "add_argument", "(", "'--momentum'", ",", "type", "=", "float", ",", "default", "=", "0.9", ",", "metavar", "=", "'M'", ",", "\n", "help", "=", "'SGD momentum (default: 0.9)'", ")", "\n", "parser", ".", "add_argument", "(", "'--no_cuda'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ",", "\n", "help", "=", "'enables CUDA training'", ")", "\n", "parser", ".", "add_argument", "(", "'--seed'", ",", "type", "=", "int", ",", "default", "=", "1234", ",", "metavar", "=", "'S'", ",", "\n", "help", "=", "'random seed (default: 1)'", ")", "\n", "parser", ".", "add_argument", "(", "'--eval'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ",", "\n", "help", "=", "'evaluate the model'", ")", "\n", "parser", ".", "add_argument", "(", "'--cycle'", ",", "type", "=", "bool", ",", "default", "=", "False", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'Whether to use cycle consistency'", ")", "\n", "parser", ".", "add_argument", "(", "'--gaussian_noise'", ",", "type", "=", "bool", ",", "default", "=", "False", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'Wheter to add gaussian noise'", ")", "\n", "parser", ".", "add_argument", "(", "'--unseen'", ",", "type", "=", "bool", ",", "default", "=", "False", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'Wheter to test on unseen category'", ")", "\n", "parser", ".", "add_argument", "(", "'--num_points'", ",", "type", "=", "int", ",", "default", "=", "1024", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'Num of points to use'", ")", "\n", "parser", ".", "add_argument", "(", "'--dataset'", ",", "type", "=", "str", ",", "default", "=", "'modelnet40'", ",", "choices", "=", "[", "'modelnet40'", ",", "'threedmatch'", "]", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'dataset to use'", ")", "\n", "parser", ".", "add_argument", "(", "'--factor'", ",", "type", "=", "float", ",", "default", "=", "4", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'Divided factor for rotations'", ")", "\n", "parser", ".", "add_argument", "(", "'--model_path'", ",", "type", "=", "str", ",", "default", "=", "''", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'Pretrained model path'", ")", "\n", "parser", ".", "add_argument", "(", "'--betas'", ",", "type", "=", "float", ",", "default", "=", "(", "0.9", ",", "0.999", ")", ",", "metavar", "=", "'N'", ",", "nargs", "=", "'+'", ",", "\n", "help", "=", "'Betas for adam'", ")", "\n", "parser", ".", "add_argument", "(", "'--same_pointclouds'", ",", "type", "=", "bool", ",", "default", "=", "True", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'R*src + t should be exactly same as target'", ")", "\n", "parser", ".", "add_argument", "(", "'--debug'", ",", "type", "=", "bool", ",", "default", "=", "False", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'saves variables in folder variables_storage'", ")", "\n", "parser", ".", "add_argument", "(", "'--num_itr_test'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'Num of net() during testing'", ")", "\n", "parser", ".", "add_argument", "(", "'--loss'", ",", "type", "=", "str", ",", "default", "=", "'cross_entropy_corr'", ",", "metavar", "=", "'N'", ",", "\n", "choices", "=", "[", "'cross_entropy_corr'", ",", "'mse_transf'", "]", ",", "\n", "help", "=", "'loss function: choose one of [mse_transf or cross_entropy_corr]'", ")", "\n", "parser", ".", "add_argument", "(", "'--cut_plane'", ",", "type", "=", "bool", ",", "default", "=", "False", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'generates partial data'", ")", "\n", "parser", ".", "add_argument", "(", "'--one_cloud'", ",", "type", "=", "bool", ",", "default", "=", "False", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'test for one unseen cloud'", ")", "\n", "parser", ".", "add_argument", "(", "'--partial'", ",", "type", "=", "float", ",", "default", "=", "0.0", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'partial = 0.1 ==> (num_points*partial) will be removed'", ")", "\n", "parser", ".", "add_argument", "(", "'--pretrained'", ",", "type", "=", "bool", ",", "default", "=", "False", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'load pretrained model'", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "# for deterministic training", "\n", "torch", ".", "backends", ".", "cudnn", ".", "deterministic", "=", "True", "\n", "torch", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "args", ".", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "args", ".", "seed", ")", "\n", "\n", "boardio", "=", "SummaryWriter", "(", "log_dir", "=", "'checkpoints/'", "+", "args", ".", "exp_name", ")", "\n", "_init_", "(", "args", ")", "\n", "\n", "textio", "=", "IOStream", "(", "'checkpoints/'", "+", "args", ".", "exp_name", "+", "'/run.log'", ")", "\n", "textio", ".", "cprint", "(", "str", "(", "args", ")", ")", "\n", "\n", "# dataloading", "\n", "num_workers", "=", "32", "\n", "if", "args", ".", "dataset", "==", "'modelnet40'", ":", "\n", "\t\t", "train_dataset", "=", "ModelNet40", "(", "num_points", "=", "args", ".", "num_points", ",", "partition", "=", "'train'", ",", "gaussian_noise", "=", "args", ".", "gaussian_noise", ",", "\n", "unseen", "=", "args", ".", "unseen", ",", "factor", "=", "args", ".", "factor", ",", "same_pointclouds", "=", "args", ".", "same_pointclouds", ",", "\n", "partial", "=", "args", ".", "partial", ",", "cut_plane", "=", "args", ".", "cut_plane", ")", "\n", "train_loader", "=", "DataLoader", "(", "train_dataset", ",", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "True", ",", "drop_last", "=", "True", ",", "num_workers", "=", "num_workers", ")", "\n", "\n", "test_dataset", "=", "ModelNet40", "(", "num_points", "=", "args", ".", "num_points", ",", "partition", "=", "'test'", ",", "gaussian_noise", "=", "args", ".", "gaussian_noise", ",", "\n", "unseen", "=", "args", ".", "unseen", ",", "factor", "=", "args", ".", "factor", ",", "same_pointclouds", "=", "args", ".", "same_pointclouds", ",", "\n", "partial", "=", "args", ".", "partial", ",", "cut_plane", "=", "args", ".", "cut_plane", ")", "\n", "test_loader", "=", "DataLoader", "(", "test_dataset", ",", "batch_size", "=", "args", ".", "test_batch_size", ",", "shuffle", "=", "False", ",", "drop_last", "=", "False", ",", "num_workers", "=", "num_workers", ")", "\n", "\n", "", "else", ":", "\n", "\t\t", "raise", "Exception", "(", "\"not implemented\"", ")", "\n", "\n", "# model loading", "\n", "", "if", "args", ".", "model", "==", "'dcp'", ":", "\n", "\t\t", "net", "=", "DCP", "(", "args", ")", ".", "cuda", "(", ")", "\n", "if", "args", ".", "eval", ":", "\n", "\t\t\t", "if", "args", ".", "model_path", "is", "''", ":", "\n", "\t\t\t\t", "model_path", "=", "'checkpoints'", "+", "'/'", "+", "args", ".", "exp_name", "+", "'/models/model.best.t7'", "\n", "", "else", ":", "\n", "\t\t\t\t", "model_path", "=", "args", ".", "model_path", "\n", "print", "(", "\"Model loaded from \"", ",", "model_path", ")", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "model_path", ")", ":", "\n", "\t\t\t\t", "print", "(", "\"can't find pretrained model\"", ")", "\n", "return", "\n", "", "net", ".", "load_state_dict", "(", "torch", ".", "load", "(", "model_path", ")", ",", "strict", "=", "False", ")", "\n", "", "if", "args", ".", "pretrained", ":", "\n", "\t\t\t", "if", "args", ".", "model_path", "==", "''", ":", "\n", "\t\t\t\t", "print", "(", "'Please specify path to pretrained weights \\n For Ex: checkpoints/partial_global_512_identical/models/model.best.t7'", ")", "\n", "", "else", ":", "\n", "\t\t\t\t", "model_path", "=", "args", ".", "model_path", "\n", "", "print", "(", "\"Using pretrained weights stored at:\\n{}\"", ".", "format", "(", "model_path", ")", ")", "\n", "net", ".", "load_state_dict", "(", "torch", ".", "load", "(", "model_path", ")", ",", "strict", "=", "False", ")", "\n", "\n", "\n", "", "if", "torch", ".", "cuda", ".", "device_count", "(", ")", ">", "1", ":", "\n", "\t\t\t", "net", "=", "nn", ".", "DataParallel", "(", "net", ")", "\n", "print", "(", "\"Let's use\"", ",", "torch", ".", "cuda", ".", "device_count", "(", ")", ",", "\"GPUs!\"", ")", "\n", "", "", "else", ":", "\n", "\t\t", "raise", "Exception", "(", "'Not implemented'", ")", "\n", "\n", "# training and evaluation", "\n", "", "if", "args", ".", "eval", ":", "\n", "\t\t", "if", "args", ".", "one_cloud", ":", "# testing on a single point cloud", "\n", "\t\t\t", "print", "(", "\"one_cloud\"", ")", "\n", "test_bunny", "(", "args", ",", "net", ")", "\n", "\n", "", "else", ":", "\n", "\t\t\t", "test", "(", "args", ",", "net", ",", "test_loader", ",", "boardio", ",", "textio", ")", "\n", "\n", "", "", "else", ":", "\n", "\t\t", "train", "(", "args", ",", "net", ",", "train_loader", ",", "test_loader", ",", "boardio", ",", "textio", ")", "\n", "\n", "\n", "", "print", "(", "'FINISH'", ")", "\n", "boardio", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.data.ModelNet40.__init__": [[105, 157], ["data.load_data", "print", "data.ModelNet40.label.squeeze", "int", "len", "len", "print"], "methods", ["home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.data.load_data"], ["\t", "def", "__init__", "(", "self", ",", "\n", "num_points", "=", "1024", ",", "# points to sample", "\n", "gaussian_noise", "=", "False", ",", "# N(0,0.01) clip=0.05               ", "\n", "partial", "=", "1.0", ",", "# %points to keep in pointcloud1", "\n", "identical", "=", "True", ",", "# identical=same points sampled for both src and tgt", "\n", "factor", "=", "1", ",", "# rotation sampled from (-pi/factor, pi/factor)", "\n", "trans_mag", "=", "0.5", ",", "# translation sampled from uniform(-trans_mag,trans_mag) ", "\n", "method", "=", "'dcp_modified'", ",", "# choices:[dcp_modified, dcp, prnet, pointnetlk, pcrnet, pcrnet_corr, rpmnet]", "\n", "partition", "=", "'train'", ",", "\n", "unseen", "=", "False", ",", "\n", "single_category", "=", "False", ")", ":", "\n", "\n", "\n", "\t\t", "self", ".", "data", ",", "self", ".", "label", "=", "load_data", "(", "partition", ")", "\n", "print", "(", "len", "(", "self", ".", "data", ")", ",", "\"len(self.data)\"", ")", "\n", "self", ".", "num_points", "=", "num_points", "\n", "self", ".", "partition", "=", "partition", "\n", "self", ".", "gaussian_noise", "=", "gaussian_noise", "\n", "self", ".", "identical", "=", "identical", "\n", "self", ".", "unseen", "=", "unseen", "\n", "self", ".", "label", "=", "self", ".", "label", ".", "squeeze", "(", ")", "\n", "self", ".", "factor", "=", "factor", "\n", "self", ".", "trans_mag", "=", "trans_mag", "\n", "self", ".", "partial", "=", "partial", "\n", "self", ".", "num_points_CAD", "=", "len", "(", "self", ".", "data", "[", "0", "]", ")", "\n", "self", ".", "single_category", "=", "single_category", "\n", "self", ".", "outl_thresh", "=", "1", "\n", "self", ".", "method", "=", "method", "\n", "\n", "### Only one asymmetric category", "\n", "if", "self", ".", "single_category", ":", "\n", "\t\t\t", "category_id", "=", "7", "# car", "\n", "\n", "\n", "if", "self", ".", "partition", "==", "'test'", ":", "\n", "\t\t\t\t", "self", ".", "data", "=", "self", ".", "data", "[", "self", ".", "label", "==", "category_id", "]", "\n", "self", ".", "label", "=", "self", ".", "label", "[", "self", ".", "label", "==", "category_id", "]", "\n", "", "elif", "self", ".", "partition", "==", "'train'", ":", "\n", "\t\t\t\t", "self", ".", "data", "=", "self", ".", "data", "[", "self", ".", "label", "==", "category_id", "]", "\n", "self", ".", "label", "=", "self", ".", "label", "[", "self", ".", "label", "==", "category_id", "]", "\n", "\n", "\n", "\n", "", "", "if", "self", ".", "unseen", ":", "\n", "\t\t\t", "print", "(", "\"for unseen data\"", ")", "\n", "####### simulate testing on first 20 categories while training on last 20 categories", "\n", "if", "self", ".", "partition", "==", "'test'", ":", "\n", "\t\t\t\t", "self", ".", "data", "=", "self", ".", "data", "[", "self", ".", "label", ">=", "20", "]", "\n", "self", ".", "label", "=", "self", ".", "label", "[", "self", ".", "label", ">=", "20", "]", "\n", "", "elif", "self", ".", "partition", "==", "'train'", ":", "\n", "\t\t\t\t", "self", ".", "data", "=", "self", ".", "data", "[", "self", ".", "label", "<", "20", "]", "\n", "self", ".", "label", "=", "self", ".", "label", "[", "self", ".", "label", "<", "20", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.data.ModelNet40.__getitem__": [[159, 257], ["numpy.random.seed", "numpy.random.choice", "numpy.random.choice", "scipy.spatial.transform.Rotation.from_rotvec", "scipy.spatial.transform.Rotation.from_rotvec.as_dcm", "scipy.spatial.transform.Rotation.from_rotvec.as_euler", "numpy.array", "scipy.spatial.transform.Rotation.from_euler", "numpy.asarray", "numpy.arange", "numpy.random.permutation", "scipy.spatial.KDTree", "scipy.spatial.KDTree.query", "numpy.sort", "numpy.zeros", "data.register_clouds", "t_svd.flatten", "int", "range", "range", "data.jitter_pointcloud", "data.jitter_pointcloud", "numpy.random.seed", "numpy.random.rand", "numpy.array", "numpy.linalg.norm", "R_ba.dot", "numpy.copy", "numpy.delete", "numpy.expand_dims", "helper.display_two_clouds_corr_mat", "numpy.delete.astype", "pointcloud2_shuff.astype", "Rotation.from_rotvec.as_dcm.astype", "t_svd.flatten.astype", "R_ba.astype", "translation_ba.astype", "numpy.asarray.astype", "euler_ba.astype", "numpy.random.permutation.astype", "corr_mat_ab.astype", "torch.rand", "numpy.random.uniform", "numpy.random.uniform", "numpy.random.uniform", "data.jitter_pointcloud", "helper.points_above_plane", "numpy.random.choice", "numpy.where", "scipy.spatial.transform.Rotation.from_euler.apply", "R_ba.dot", "translation_ba.reshape", "Rotation.from_rotvec.as_dcm.dot", "t_svd.flatten.reshape", "numpy.random.rand", "range", "numpy.arange", "numpy.random.uniform"], "methods", ["home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.data.register_clouds", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.data.jitter_pointcloud", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.data.jitter_pointcloud", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.helper.display_two_clouds_corr_mat", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.data.jitter_pointcloud", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.helper.points_above_plane"], ["", "", "", "def", "__getitem__", "(", "self", ",", "item", ")", ":", "\n", "\t\t", "if", "self", ".", "partition", "!=", "'train'", ":", "\n", "\t\t\t", "np", ".", "random", ".", "seed", "(", "item", ")", "\n", "\n", "############################## GT Transformation Generation ##########################", "\n", "", "axis", "=", "uniform_2_sphere", "(", ")", ".", "flatten", "(", ")", "# uniform sampling from a sphere", "\n", "\n", "### angle from [-pi/factor to +pi/factor]", "\n", "angle", "=", "2", "*", "(", "np", ".", "random", ".", "uniform", "(", ")", "-", "0.5", ")", "*", "np", ".", "pi", "/", "self", ".", "factor", "\n", "Rot_instance", "=", "Rotation", ".", "from_rotvec", "(", "axis", "*", "angle", ")", "\n", "R_ab", "=", "Rot_instance", ".", "as_dcm", "(", ")", "\n", "\n", "[", "anglez", ",", "angley", ",", "anglex", "]", "=", "Rot_instance", ".", "as_euler", "(", "'zyx'", ")", "\n", "\n", "R_ba", "=", "R_ab", ".", "T", "\n", "rotation_ab", "=", "Rotation", ".", "from_euler", "(", "'zyx'", ",", "[", "anglez", ",", "angley", ",", "anglex", "]", ")", "\n", "\n", "translation_ab", "=", "np", ".", "random", ".", "uniform", "(", "-", "self", ".", "trans_mag", ",", "self", ".", "trans_mag", ",", "3", ")", "\n", "translation_ba", "=", "-", "R_ba", ".", "dot", "(", "translation_ab", ")", "\n", "\n", "euler_ab", "=", "np", ".", "asarray", "(", "[", "anglez", ",", "angley", ",", "anglex", "]", ")", "\n", "euler_ba", "=", "-", "euler_ab", "[", ":", ":", "-", "1", "]", "\n", "\n", "########################################################################################", "\n", "#                     Pointcloud Processing    ", "\n", "########################################################################################", "\n", "\n", "\n", "if", "self", ".", "identical", ":", "\n", "\t\t\t", "choose_idx", "=", "np", ".", "random", ".", "choice", "(", "range", "(", "self", ".", "num_points_CAD", ")", ",", "self", ".", "num_points", ",", "replace", "=", "False", ")", "\n", "pointcloud1", "=", "self", ".", "data", "[", "item", "]", "[", "choose_idx", ",", ":", "]", "\n", "pointcloud2", "=", "self", ".", "data", "[", "item", "]", "[", "choose_idx", ",", ":", "]", "\n", "", "else", ":", "\n", "\t\t\t", "choose_idx1", "=", "np", ".", "random", ".", "choice", "(", "range", "(", "self", ".", "num_points_CAD", ")", ",", "self", ".", "num_points", ",", "replace", "=", "False", ")", "\n", "pointcloud1", "=", "self", ".", "data", "[", "item", "]", "[", "choose_idx1", ",", ":", "]", "\n", "choose_idx2", "=", "np", ".", "random", ".", "choice", "(", "range", "(", "self", ".", "num_points_CAD", ")", ",", "self", ".", "num_points", ",", "replace", "=", "False", ")", "\n", "pointcloud2", "=", "self", ".", "data", "[", "item", "]", "[", "choose_idx2", ",", ":", "]", "\n", "\n", "\n", "\n", "", "if", "self", ".", "partial", "<", "1", ":", "\n", "\t\t\t", "rand_xyz", "=", "uniform_2_sphere", "(", ")", "\n", "pc1_centered", "=", "pointcloud1", "-", "np", ".", "mean", "(", "pointcloud1", ",", "axis", "=", "0", ")", "\n", "dist_from_plane", "=", "np", ".", "dot", "(", "pc1_centered", ",", "rand_xyz", ")", "\n", "\n", "partial_idx", "=", "np", ".", "argsort", "(", "dist_from_plane", ")", "[", "0", ":", "int", "(", "self", ".", "num_points", "*", "self", ".", "partial", ")", "]", "\n", "pointcloud1", "=", "pointcloud1", "[", "partial_idx", ",", ":", "]", "\n", "\n", "\n", "\n", "", "if", "self", ".", "gaussian_noise", ":", "\n", "\t\t\t", "pointcloud1", "=", "jitter_pointcloud", "(", "pointcloud1", ")", "\n", "pointcloud2", "=", "jitter_pointcloud", "(", "pointcloud2", ")", "\n", "\n", "# permutation", "\n", "", "pointcloud2", "=", "np", ".", "random", ".", "permutation", "(", "pointcloud2", ")", "\n", "\n", "corr_mat_ab", "=", "None", "\n", "if", "(", "self", ".", "method", "==", "'dcp_modified'", ")", "or", "(", "self", ".", "method", "==", "'pcrnet_corr'", ")", ":", "# compute corr_mat if dcp_modified or pcrnet_corr", "\n", "\t\t\t", "corr_mat_ab", "=", "self", ".", "compute_corr_mat", "(", "pointcloud1", ",", "pointcloud2", ")", "\n", "\n", "", "pointcloud2", "=", "rotation_ab", ".", "apply", "(", "pointcloud2", ")", "+", "np", ".", "expand_dims", "(", "translation_ab", ",", "axis", "=", "0", ")", "\n", "\n", "\n", "\n", "# return method-wise data:", "\n", "inputs", "=", "[", "item", ",", "pointcloud1", ",", "pointcloud2", ",", "R_ab", ",", "translation_ab", ",", "R_ba", ",", "translation_ba", "]", "# pc shape: (N,3)        ", "\n", "\n", "if", "self", ".", "method", "==", "'pointnetlk'", ":", "\n", "\t\t\t", "return", "self", ".", "to_pointnetlk", "(", "*", "inputs", ")", "\n", "", "elif", "self", ".", "method", "==", "'pcrnet'", ":", "\n", "\t\t\t", "return", "self", ".", "to_pcrnet", "(", "*", "inputs", ")", "\n", "", "elif", "self", ".", "method", "==", "'pcrnet_corr'", ":", "\n", "\t\t\t", "return", "self", ".", "to_pcrnet_corr", "(", "*", "inputs", ",", "corr_mat_ab", ",", "euler_ab", ")", "\n", "", "elif", "self", ".", "method", "==", "'rpmnet'", ":", "\n", "\t\t\t", "return", "self", ".", "to_rpmnet", "(", "*", "inputs", ")", "\n", "", "elif", "(", "self", ".", "method", "==", "'dcp'", ")", "or", "(", "self", ".", "method", "==", "'prnet'", ")", ":", "\n", "\t\t\t", "pointcloud1", "=", "pointcloud1", ".", "T", "# changed to (3,N)", "\n", "pointcloud2", "=", "pointcloud2", ".", "T", "# changed to (3,N)", "\n", "\n", "return", "pointcloud1", ".", "astype", "(", "'float32'", ")", ",", "pointcloud2", ".", "astype", "(", "'float32'", ")", ",", "R_ab", ".", "astype", "(", "'float32'", ")", ",", "translation_ab", ".", "astype", "(", "'float32'", ")", ",", "R_ba", ".", "astype", "(", "'float32'", ")", ",", "translation_ba", ".", "astype", "(", "'float32'", ")", ",", "euler_ab", ".", "astype", "(", "'float32'", ")", ",", "euler_ba", ".", "astype", "(", "'float32'", ")", "\n", "\n", "", "else", ":", "# dcp_modified", "\n", "\t\t\t", "pointcloud1", "=", "pointcloud1", ".", "T", "# changed to (3,N)", "\n", "pointcloud2", "=", "pointcloud2", ".", "T", "# changed to (3,N)", "\n", "\n", "return", "pointcloud1", ".", "astype", "(", "'float32'", ")", ",", "pointcloud2", ".", "astype", "(", "'float32'", ")", ",", "R_ab", ".", "astype", "(", "'float32'", ")", ",", "translation_ab", ".", "astype", "(", "'float32'", ")", ",", "R_ba", ".", "astype", "(", "'float32'", ")", ",", "translation_ba", ".", "astype", "(", "'float32'", ")", ",", "euler_ab", ".", "astype", "(", "'float32'", ")", ",", "euler_ba", ".", "astype", "(", "'float32'", ")", ",", "corr_mat_ab", ".", "astype", "(", "'int64'", ")", "\n", "\n", "\n", "", "", "def", "__len__", "(", "self", ")", ":", "\n", "\t\t", "return", "self", ".", "data", ".", "shape", "[", "0", "]", "\n", "\n", "", "def", "compute_corr_mat", "(", "self", ",", "pointcloud1", ",", "pointcloud2", ")", ":", "\n", "\n", "\t\t", "self", ".", "num_src", "=", "int", "(", "self", ".", "num_points", "*", "self", ".", "partial", ")", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.data.ModelNet40.__len__": [[258, 260], ["None"], "methods", ["None"], ["self", ".", "num_tgt", "=", "self", ".", "num_points", "\n", "\n", "tree2", "=", "KDTree", "(", "pointcloud2", ")", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.data.make_open3d_point_cloud": [[21, 27], ["open3d.geometry.PointCloud", "open3d.utility.Vector3dVector", "open3d.utility.Vector3dVector"], "function", ["None"], ["", "import", "matplotlib", ".", "pyplot", "as", "plt", "\n", "import", "transforms3d", ".", "axangles", "as", "t3d_axang", "\n", "\n", "def", "uniform_2_sphere", "(", "num", ":", "int", "=", "None", ")", ":", "\n", "\t"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.data.download": [[29, 40], ["os.path.dirname", "os.path.join", "os.path.abspath", "os.path.exists", "os.mkdir", "os.path.exists", "os.path.basename", "os.system", "os.system", "os.system", "os.path.join"], "function", ["None"], ["\n", "if", "num", "is", "not", "None", ":", "\n", "\t\t", "phi", "=", "np", ".", "random", ".", "uniform", "(", "0.0", ",", "2", "*", "np", ".", "pi", ",", "num", ")", "\n", "cos_theta", "=", "np", ".", "random", ".", "uniform", "(", "-", "1.0", ",", "1.0", ",", "num", ")", "\n", "", "else", ":", "\n", "\t\t", "phi", "=", "np", ".", "random", ".", "uniform", "(", "0.0", ",", "2", "*", "np", ".", "pi", ")", "\n", "cos_theta", "=", "np", ".", "random", ".", "uniform", "(", "-", "1.0", ",", "1.0", ")", "\n", "\n", "", "theta", "=", "np", ".", "arccos", "(", "cos_theta", ")", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.data.load_data": [[42, 58], ["data.download", "os.path.dirname", "os.path.join", "glob.glob", "numpy.concatenate", "numpy.concatenate", "os.path.abspath", "os.path.join", "h5py.File", "[].astype", "[].astype", "h5py.File.close", "np.concatenate.append", "np.concatenate.append"], "function", ["home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.data.download", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.math_torch.se3.concatenate", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.math_torch.se3.concatenate", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.main.IOStream.close"], ["y", "=", "np", ".", "sin", "(", "theta", ")", "*", "np", ".", "sin", "(", "phi", ")", "\n", "z", "=", "np", ".", "cos", "(", "theta", ")", "\n", "\n", "return", "np", ".", "stack", "(", "(", "x", ",", "y", ",", "z", ")", ",", "axis", "=", "-", "1", ")", "\n", "\n", "", "def", "make_open3d_point_cloud", "(", "xyz", ",", "color", "=", "None", ")", ":", "\n", "\t", "pcd", "=", "o3d", ".", "geometry", ".", "PointCloud", "(", ")", "\n", "pcd", ".", "points", "=", "o3d", ".", "utility", ".", "Vector3dVector", "(", "xyz", ")", "\n", "if", "color", "is", "not", "None", ":", "\n", "\t\t", "pcd", ".", "colors", "=", "o3d", ".", "utility", ".", "Vector3dVector", "(", "color", ")", "\n", "", "return", "pcd", "\n", "# The code is referred from: https://github.com/WangYueFt/dcp ", "\n", "\n", "", "def", "download", "(", ")", ":", "\n", "\t", "BASE_DIR", "=", "os", ".", "path", ".", "dirname", "(", "os", ".", "path", ".", "abspath", "(", "__file__", ")", ")", "\n", "DATA_DIR", "=", "os", ".", "path", ".", "join", "(", "BASE_DIR", ",", "'../datasets'", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "DATA_DIR", ")", ":", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.data.translate_pointcloud": [[60, 66], ["numpy.random.uniform", "numpy.random.uniform", "numpy.add().astype", "numpy.add", "numpy.multiply"], "function", ["None"], ["", "if", "not", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "DATA_DIR", ",", "'modelnet40_ply_hdf5_2048'", ")", ")", ":", "\n", "\t\t", "www", "=", "'https://shapenet.cs.stanford.edu/media/modelnet40_ply_hdf5_2048.zip'", "\n", "zipfile", "=", "os", ".", "path", ".", "basename", "(", "www", ")", "\n", "www", "+=", "' --no-check-certificate'", "\n", "os", ".", "system", "(", "'wget %s; unzip %s'", "%", "(", "www", ",", "zipfile", ")", ")", "\n", "os", ".", "system", "(", "'mv %s %s'", "%", "(", "zipfile", "[", ":", "-", "4", "]", ",", "DATA_DIR", ")", ")", "\n", "os", ".", "system", "(", "'rm %s'", "%", "(", "zipfile", ")", ")", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.data.jitter_pointcloud": [[68, 72], ["numpy.clip", "numpy.random.randn"], "function", ["None"], ["\n", "", "", "def", "load_data", "(", "partition", ")", ":", "\n", "#     download()", "\n", "\t", "BASE_DIR", "=", "os", ".", "path", ".", "dirname", "(", "os", ".", "path", ".", "abspath", "(", "__file__", ")", ")", "\n", "DATA_DIR", "=", "os", ".", "path", ".", "join", "(", "BASE_DIR", ",", "'../datasets'", ")", "# change accordingly", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.data.register_clouds": [[73, 100], ["pointcloud_a_cent.T.dot", "numpy.linalg.svd", "Vt.T.dot", "pointcloud_b.T.dot", "pointcloud_a_corr.mean", "pointcloud_a.mean", "numpy.linalg.det", "numpy.dot", "pointcloud_a_corr.mean().reshape", "np.dot.dot", "pointcloud_a.mean().reshape", "pointcloud_a_corr.mean", "pointcloud_a.mean"], "function", ["None"], ["all_data", "=", "[", "]", "\n", "all_label", "=", "[", "]", "\n", "for", "h5_name", "in", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "DATA_DIR", ",", "'modelnet40_ply_hdf5_2048'", ",", "'ply_data_%s*.h5'", "%", "partition", ")", ")", ":", "\n", "\t\t", "f", "=", "h5py", ".", "File", "(", "h5_name", ")", "\n", "data", "=", "f", "[", "'data'", "]", "[", ":", "]", ".", "astype", "(", "'float32'", ")", "\n", "label", "=", "f", "[", "'label'", "]", "[", ":", "]", ".", "astype", "(", "'int64'", ")", "\n", "f", ".", "close", "(", ")", "\n", "all_data", ".", "append", "(", "data", ")", "\n", "all_label", ".", "append", "(", "label", ")", "\n", "", "all_data", "=", "np", ".", "concatenate", "(", "all_data", ",", "axis", "=", "0", ")", "\n", "all_label", "=", "np", ".", "concatenate", "(", "all_label", ",", "axis", "=", "0", ")", "\n", "return", "all_data", ",", "all_label", "\n", "\n", "\n", "# def translate_pointcloud(pointcloud):", "\n", "#     xyz1 = np.random.uniform(low=2. / 3., high=3. / 2., size=[3])", "\n", "#     xyz2 = np.random.uniform(low=-0.2, high=0.2, size=[3])", "\n", "\n", "#     translated_pointcloud = np.add(np.multiply(pointcloud, xyz1), xyz2).astype('float32')", "\n", "#     return translated_pointcloud", "\n", "\n", "\n", "", "def", "jitter_pointcloud", "(", "pointcloud", ",", "sigma", "=", "0.01", ",", "clip", "=", "0.05", ")", ":", "\n", "\t", "N", ",", "C", "=", "pointcloud", ".", "shape", "\n", "pointcloud", "+=", "np", ".", "clip", "(", "sigma", "*", "np", ".", "random", ".", "randn", "(", "N", ",", "C", ")", ",", "-", "1", "*", "clip", ",", "clip", ")", "\n", "return", "pointcloud", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.helper.print_": [[17, 24], ["print", "print", "str", "str", "str", "str", "str"], "function", ["None"], ["def", "print_", "(", "text", "=", "\"Test\"", ",", "color", "=", "'w'", ",", "style", "=", "'no'", ",", "bg_color", "=", "''", ")", ":", "\n", "    ", "color_dict", "=", "{", "'b'", ":", "30", ",", "'r'", ":", "31", ",", "'g'", ":", "32", ",", "'y'", ":", "33", ",", "'bl'", ":", "34", ",", "'p'", ":", "35", ",", "'c'", ":", "36", ",", "'w'", ":", "37", "}", "\n", "style_dict", "=", "{", "'no'", ":", "0", ",", "'bold'", ":", "1", ",", "'underline'", ":", "2", ",", "'neg1'", ":", "3", ",", "'neg2'", ":", "5", "}", "\n", "bg_color_dict", "=", "{", "'b'", ":", "40", ",", "'r'", ":", "41", ",", "'g'", ":", "42", ",", "'y'", ":", "43", ",", "'bl'", ":", "44", ",", "'p'", ":", "45", ",", "'c'", ":", "46", ",", "'w'", ":", "47", "}", "\n", "if", "bg_color", "is", "not", "''", ":", "\n", "        ", "print", "(", "\"\\033[\"", "+", "str", "(", "style_dict", "[", "style", "]", ")", "+", "\";\"", "+", "str", "(", "color_dict", "[", "color", "]", ")", "+", "\";\"", "+", "str", "(", "bg_color_dict", "[", "bg_color", "]", ")", "+", "\"m\"", "+", "text", "+", "\"\\033[00m\"", ")", "\n", "", "else", ":", "print", "(", "\"\\033[\"", "+", "str", "(", "style_dict", "[", "style", "]", ")", "+", "\";\"", "+", "str", "(", "color_dict", "[", "color", "]", ")", "+", "\"m\"", "+", "text", "+", "\"\\033[00m\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.helper.download_data": [[27, 42], ["os.path.exists", "gdd.download_file_from_google_drive", "os.remove", "os.path.join", "os.path.join", "os.getcwd", "os.path.join", "os.getcwd", "os.getcwd"], "function", ["None"], ["", "def", "download_data", "(", "file", ")", ":", "\n", "    ", "from", "google_drive_downloader", "import", "GoogleDriveDownloader", "as", "gdd", "\n", "\n", "if", "file", "==", "'train_data'", ":", "\n", "        ", "file_id", "=", "'16YU-tdayVNBwM3XlPDgFrrzlPjhQN3PB'", "\n", "", "elif", "file", "==", "'car_data'", ":", "\n", "        ", "file_id", "=", "'1k9W75uhUFTfA_iK7YePGn5t9f4JhtgSe'", "\n", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "os", ".", "getcwd", "(", ")", ",", "'data'", ",", "file", ")", ")", ":", "\n", "        ", "gdd", ".", "download_file_from_google_drive", "(", "file_id", "=", "file_id", ",", "\n", "dest_path", "=", "os", ".", "path", ".", "join", "(", "os", ".", "getcwd", "(", ")", ",", "'data'", ",", "file", "+", "'.zip'", ")", ",", "\n", "showsize", "=", "True", ",", "\n", "unzip", "=", "True", ")", "\n", "\n", "os", ".", "remove", "(", "os", ".", "path", ".", "join", "(", "os", ".", "getcwd", "(", ")", ",", "'data'", ",", "file", "+", "'.zip'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.helper.read_templates": [[47, 55], ["open", "csv.reader", "os.path.join", "data.append", "float"], "function", ["None"], ["", "", "def", "read_templates", "(", "file_name", ",", "templates_dict", ")", ":", "\n", "    ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "'data'", ",", "templates_dict", ",", "file_name", ")", ",", "'r'", ")", "as", "csvfile", ":", "\n", "        ", "csvreader", "=", "csv", ".", "reader", "(", "csvfile", ")", "\n", "data", "=", "[", "]", "\n", "for", "row", "in", "csvreader", ":", "\n", "            ", "row", "=", "[", "float", "(", "i", ")", "for", "i", "in", "row", "]", "\n", "data", ".", "append", "(", "row", ")", "\n", "", "", "return", "data", "# n2 x 2048 x 3", "\n", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.helper.template_files": [[57, 63], ["print", "open", "file.readlines", "x.strip", "os.path.join"], "function", ["None"], ["", "def", "template_files", "(", "templates_dict", ")", ":", "\n", "    ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "'data'", ",", "templates_dict", ",", "'template_filenames.txt'", ")", ",", "'r'", ")", "as", "file", ":", "\n", "        ", "files", "=", "file", ".", "readlines", "(", ")", "\n", "", "files", "=", "[", "x", ".", "strip", "(", ")", "for", "x", "in", "files", "]", "\n", "print", "(", "files", ")", "\n", "return", "files", "# 1 x n1", "\n", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.helper.templates_data": [[65, 73], ["helper.template_files", "range", "numpy.asarray", "len", "helper.read_templates", "data.append"], "function", ["home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.helper.template_files", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.helper.read_templates"], ["", "def", "templates_data", "(", "templates_dict", ")", ":", "\n", "    ", "files", "=", "template_files", "(", "templates_dict", ")", "# Read the available file names.", "\n", "data", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "files", ")", ")", ":", "\n", "        ", "temp", "=", "read_templates", "(", "files", "[", "i", "]", ",", "templates_dict", ")", "\n", "for", "i", "in", "temp", ":", "\n", "            ", "data", ".", "append", "(", "i", ")", "\n", "", "", "return", "np", ".", "asarray", "(", "data", ")", "# (n1 x n2 x 2048 x 3) & n = n1 x n2", "\n", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.helper.process_templates": [[75, 84], ["helper.templates_data", "print", "range", "numpy.asarray", "templates.append"], "function", ["home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.helper.templates_data"], ["", "def", "process_templates", "(", "templates_dict", ")", ":", "\n", "    ", "data", "=", "templates_data", "(", "templates_dict", ")", "# Read all the templates.", "\n", "print", "(", "data", ".", "shape", "[", "0", "]", "/", "2048", ")", "\n", "templates", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "data", ".", "shape", "[", "0", "]", "/", "2048", ")", ":", "\n", "        ", "start_idx", "=", "i", "*", "2048", "\n", "end_idx", "=", "(", "i", "+", "1", ")", "*", "2048", "\n", "templates", ".", "append", "(", "data", "[", "start_idx", ":", "end_idx", ",", ":", "]", ")", "\n", "", "return", "np", ".", "asarray", "(", "templates", ")", "# Return all the templates (n x 2048 x 3)", "\n", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.helper.read_poses": [[86, 99], ["numpy.asarray", "open", "csv.reader", "os.path.join", "poses.append", "float"], "function", ["None"], ["", "def", "read_poses", "(", "templates_dict", ",", "filename", ")", ":", "\n", "# Arguments:", "\n", "# filename:         Read data from a given file (string)", "\n", "# Output:", "\n", "# poses:            Return array of all the poses in the file (n x 6)", "\n", "\n", "    ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "'data'", ",", "templates_dict", ",", "filename", ")", ",", "'r'", ")", "as", "csvfile", ":", "\n", "        ", "csvreader", "=", "csv", ".", "reader", "(", "csvfile", ")", "\n", "poses", "=", "[", "]", "\n", "for", "row", "in", "csvreader", ":", "\n", "            ", "row", "=", "[", "float", "(", "i", ")", "for", "i", "in", "row", "]", "\n", "poses", ".", "append", "(", "row", ")", "\n", "", "", "return", "np", ".", "asarray", "(", "poses", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.helper.read_files": [[101, 106], ["open", "file.readlines", "os.path.join", "x.split"], "function", ["None"], ["", "def", "read_files", "(", "data_dict", ")", ":", "\n", "    ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "'data'", ",", "data_dict", ",", "'files.txt'", ")", ")", "as", "file", ":", "\n", "        ", "files", "=", "file", ".", "readlines", "(", ")", "\n", "files", "=", "[", "x", ".", "split", "(", ")", "[", "0", "]", "for", "x", "in", "files", "]", "\n", "", "return", "files", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.helper.read_h5": [[108, 114], ["h5py.File", "numpy.array", "h5py.File.close", "h5py.File.get"], "function", ["home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.main.IOStream.close"], ["", "def", "read_h5", "(", "file_name", ")", ":", "\n", "    ", "import", "h5py", "\n", "f", "=", "h5py", ".", "File", "(", "file_name", ",", "'r'", ")", "\n", "templates", "=", "np", ".", "array", "(", "f", ".", "get", "(", "'templates'", ")", ")", "\n", "f", ".", "close", "(", ")", "\n", "return", "templates", "\n", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.helper.read_noise_data": [[115, 122], ["h5py.File", "numpy.array", "numpy.array", "h5py.File.close", "os.path.join", "h5py.File.get", "h5py.File.get"], "function", ["home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.main.IOStream.close"], ["", "def", "read_noise_data", "(", "data_dict", ")", ":", "\n", "    ", "import", "h5py", "\n", "f", "=", "h5py", ".", "File", "(", "os", ".", "path", ".", "join", "(", "'data'", ",", "data_dict", ",", "'noise_data.h5'", ")", ",", "'r'", ")", "\n", "templates", "=", "np", ".", "array", "(", "f", ".", "get", "(", "'templates'", ")", ")", "\n", "sources", "=", "np", ".", "array", "(", "f", ".", "get", "(", "'sources'", ")", ")", "\n", "f", ".", "close", "(", ")", "\n", "return", "templates", ",", "sources", "\n", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.helper.read_pairs": [[123, 131], ["numpy.asarray", "open", "csv.reader", "os.path.join", "pairs.append", "int"], "function", ["None"], ["", "def", "read_pairs", "(", "data_dict", ",", "file_name", ")", ":", "\n", "    ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "'data'", ",", "data_dict", ",", "file_name", ")", ",", "'r'", ")", "as", "csvfile", ":", "\n", "        ", "csvreader", "=", "csv", ".", "reader", "(", "csvfile", ")", "\n", "pairs", "=", "[", "]", "\n", "for", "row", "in", "csvreader", ":", "\n", "            ", "row", "=", "[", "int", "(", "x", ")", "for", "x", "in", "row", "]", "\n", "pairs", ".", "append", "(", "row", ")", "\n", "", "", "return", "np", ".", "asarray", "(", "pairs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.helper.loadData": [[133, 138], ["helper.read_files", "print", "helper.read_h5"], "function", ["home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.helper.read_files", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.helper.read_h5"], ["", "def", "loadData", "(", "data_dict", ")", ":", "\n", "    ", "files", "=", "read_files", "(", "data_dict", ")", "# Read file names.", "\n", "print", "(", "files", ")", "\n", "templates", "=", "read_h5", "(", "files", ")", "# Read templates from h5 file using given file_name.", "\n", "return", "templates", "\n", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.helper.read_modelnet40": [[139, 144], ["h5py.File", "h5py.File.get", "os.path.join"], "function", ["None"], ["", "def", "read_modelnet40", "(", "data_dict", ")", ":", "\n", "    ", "import", "h5py", "\n", "file", "=", "h5py", ".", "File", "(", "os", ".", "path", ".", "join", "(", "'data'", ",", "data_dict", ",", "'modelnet40_train.h5'", ")", ")", "\n", "templates", "=", "file", ".", "get", "(", "'data'", ")", "\n", "return", "templates", "\n", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.helper.read_partial_data": [[145, 153], ["h5py.File", "numpy.array", "numpy.array", "numpy.array", "h5py.File.close", "os.path.join", "h5py.File.get", "h5py.File.get", "h5py.File.get"], "function", ["home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.main.IOStream.close"], ["", "def", "read_partial_data", "(", "data_dict", ",", "file", ")", ":", "\n", "    ", "import", "h5py", "\n", "f", "=", "h5py", ".", "File", "(", "os", ".", "path", ".", "join", "(", "'data'", ",", "data_dict", ",", "file", ")", ",", "'r'", ")", "\n", "templates", "=", "np", ".", "array", "(", "f", ".", "get", "(", "'templates'", ")", ")", "\n", "sources", "=", "np", ".", "array", "(", "f", ".", "get", "(", "'sources'", ")", ")", "\n", "poses", "=", "np", ".", "array", "(", "f", ".", "get", "(", "'poses'", ")", ")", "\n", "f", ".", "close", "(", ")", "\n", "return", "templates", ",", "sources", ",", "poses", "\n", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.helper.read_sparse_data": [[154, 164], ["h5py.File", "numpy.array", "numpy.array", "range", "os.path.join", "h5py.File.get", "h5py.File.get", "numpy.mean", "numpy.max", "numpy.min"], "function", ["None"], ["", "def", "read_sparse_data", "(", "data_dict", ",", "file", ")", ":", "\n", "    ", "import", "h5py", "\n", "f", "=", "h5py", ".", "File", "(", "os", ".", "path", ".", "join", "(", "'data'", ",", "data_dict", ",", "file", ")", ",", "'r'", ")", "\n", "templates", "=", "np", ".", "array", "(", "f", ".", "get", "(", "'uniform_data'", ")", ")", "\n", "sources", "=", "np", ".", "array", "(", "f", ".", "get", "(", "'data'", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "templates", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "templates", "[", "i", "]", "=", "templates", "[", "i", "]", "/", "(", "np", ".", "max", "(", "templates", "[", "i", "]", ")", "-", "np", ".", "min", "(", "templates", "[", "i", "]", ")", ")", "\n", "templates", "[", "i", "]", "=", "templates", "[", "i", "]", "-", "np", ".", "mean", "(", "templates", "[", "i", "]", ",", "axis", "=", "0", ",", "keepdims", "=", "True", ")", "\n", "", "return", "templates", ",", "sources", "\n", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.helper.rotate_point_cloud_by_angle_y": [[167, 186], ["numpy.zeros", "range", "numpy.cos", "numpy.sin", "numpy.array", "numpy.dot", "shape_pc.reshape"], "function", ["None"], ["", "def", "rotate_point_cloud_by_angle_y", "(", "batch_data", ",", "rotation_angle", ")", ":", "\n", "    ", "\"\"\" Rotate the point cloud along up direction with certain angle.\n        Input:\n          BxNx3 array, original batch of point clouds\n        Return:\n          BxNx3 array, rotated batch of point clouds\n    \"\"\"", "\n", "rotated_data", "=", "np", ".", "zeros", "(", "batch_data", ".", "shape", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "for", "k", "in", "range", "(", "batch_data", ".", "shape", "[", "0", "]", ")", ":", "\n", "#rotation_angle = np.random.uniform() * 2 * np.pi", "\n", "        ", "cosval", "=", "np", ".", "cos", "(", "rotation_angle", ")", "\n", "sinval", "=", "np", ".", "sin", "(", "rotation_angle", ")", "\n", "rotation_matrix", "=", "np", ".", "array", "(", "[", "[", "cosval", ",", "0", ",", "sinval", "]", ",", "\n", "[", "0", ",", "1", ",", "0", "]", ",", "\n", "[", "-", "sinval", ",", "0", ",", "cosval", "]", "]", ")", "\n", "shape_pc", "=", "batch_data", "[", "k", ",", "...", "]", "\n", "# rotated_data[k, ...] = np.dot(shape_pc.reshape((-1, 3)), rotation_matrix)", "\n", "rotated_data", "[", "k", ",", "...", "]", "=", "np", ".", "dot", "(", "rotation_matrix", ",", "shape_pc", ".", "reshape", "(", "(", "-", "1", ",", "3", ")", ")", ".", "T", ")", ".", "T", "# Pre-Multiplication (changes done)", "\n", "", "return", "rotated_data", "\n", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.helper.rotate_point_cloud_by_angle_x": [[187, 206], ["numpy.zeros", "range", "numpy.cos", "numpy.sin", "numpy.array", "numpy.dot", "shape_pc.reshape"], "function", ["None"], ["", "def", "rotate_point_cloud_by_angle_x", "(", "batch_data", ",", "rotation_angle", ")", ":", "\n", "    ", "\"\"\" Rotate the point cloud along up direction with certain angle.\n        Input:\n          BxNx3 array, original batch of point clouds\n        Return:\n          BxNx3 array, rotated batch of point clouds\n    \"\"\"", "\n", "rotated_data", "=", "np", ".", "zeros", "(", "batch_data", ".", "shape", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "for", "k", "in", "range", "(", "batch_data", ".", "shape", "[", "0", "]", ")", ":", "\n", "#rotation_angle = np.random.uniform() * 2 * np.pi", "\n", "        ", "cosval", "=", "np", ".", "cos", "(", "rotation_angle", ")", "\n", "sinval", "=", "np", ".", "sin", "(", "rotation_angle", ")", "\n", "rotation_matrix", "=", "np", ".", "array", "(", "[", "[", "1", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "cosval", ",", "-", "sinval", "]", ",", "\n", "[", "0", ",", "sinval", ",", "cosval", "]", "]", ")", "\n", "shape_pc", "=", "batch_data", "[", "k", ",", "...", "]", "\n", "# rotated_data[k, ...] = np.dot(shape_pc.reshape((-1, 3)), rotation_matrix)", "\n", "rotated_data", "[", "k", ",", "...", "]", "=", "np", ".", "dot", "(", "rotation_matrix", ",", "shape_pc", ".", "reshape", "(", "(", "-", "1", ",", "3", ")", ")", ".", "T", ")", ".", "T", "# Pre-Multiplication (changes done)", "\n", "", "return", "rotated_data", "\n", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.helper.rotate_point_cloud_by_angle_z": [[207, 226], ["numpy.zeros", "range", "numpy.cos", "numpy.sin", "numpy.array", "numpy.dot", "shape_pc.reshape"], "function", ["None"], ["", "def", "rotate_point_cloud_by_angle_z", "(", "batch_data", ",", "rotation_angle", ")", ":", "\n", "    ", "\"\"\" Rotate the point cloud along up direction with certain angle.\n        Input:\n          BxNx3 array, original batch of point clouds\n        Return:\n          BxNx3 array, rotated batch of point clouds\n    \"\"\"", "\n", "rotated_data", "=", "np", ".", "zeros", "(", "batch_data", ".", "shape", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "for", "k", "in", "range", "(", "batch_data", ".", "shape", "[", "0", "]", ")", ":", "\n", "#rotation_angle = np.random.uniform() * 2 * np.pi", "\n", "        ", "cosval", "=", "np", ".", "cos", "(", "rotation_angle", ")", "\n", "sinval", "=", "np", ".", "sin", "(", "rotation_angle", ")", "\n", "rotation_matrix", "=", "np", ".", "array", "(", "[", "[", "cosval", ",", "-", "sinval", ",", "0", "]", ",", "\n", "[", "sinval", ",", "cosval", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "1", "]", "]", ")", "\n", "shape_pc", "=", "batch_data", "[", "k", ",", "...", "]", "\n", "# rotated_data[k, ...] = np.dot(shape_pc.reshape((-1, 3)), rotation_matrix)", "\n", "rotated_data", "[", "k", ",", "...", "]", "=", "np", ".", "dot", "(", "rotation_matrix", ",", "shape_pc", ".", "reshape", "(", "(", "-", "1", ",", "3", ")", ")", ".", "T", ")", ".", "T", "# Pre-Multiplication (changes done)", "\n", "", "return", "rotated_data", "\n", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.helper.translate": [[228, 238], ["numpy.asarray"], "function", ["None"], ["", "def", "translate", "(", "data", ",", "shift", ")", ":", "\n", "# Arguments:", "\n", "# data:                 Point Cloud data (1 x num_points x 3)", "\n", "# shift:                Translation vector (1 x 3)", "\n", "\n", "    ", "try", ":", "\n", "        ", "data", "=", "np", ".", "asarray", "(", "data", ")", "\n", "", "except", ":", "\n", "        ", "pass", "\n", "", "return", "data", "+", "shift", "\n", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.helper.apply_transformation": [[240, 253], ["numpy.copy", "range", "helper.rotate_point_cloud_by_angle_z", "helper.rotate_point_cloud_by_angle_y", "helper.rotate_point_cloud_by_angle_x", "helper.translate"], "function", ["home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.helper.rotate_point_cloud_by_angle_z", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.helper.rotate_point_cloud_by_angle_y", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.helper.rotate_point_cloud_by_angle_x", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.helper.translate"], ["", "def", "apply_transformation", "(", "datas", ",", "poses", ")", ":", "# Transformation function for (2 & 4c, loss 8b)", "\n", "# Arguments:", "\n", "# datas:            Point Clouds (batch_size x num_points x 3)", "\n", "# poses:            translation+euler (Batch_size x 6)", "\n", "# Output:", "\n", "# transformed_data: Transformed Point Clouds by given poses (batch_size x num_points x 3)", "\n", "    ", "transformed_data", "=", "np", ".", "copy", "(", "datas", ")", "\n", "for", "i", "in", "range", "(", "datas", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "transformed_data", "[", "i", ",", ":", ",", ":", "]", "=", "rotate_point_cloud_by_angle_z", "(", "transformed_data", "[", "i", ",", ":", ",", ":", "]", ",", "poses", "[", "i", ",", "5", "]", ")", "\n", "transformed_data", "[", "i", ",", ":", ",", ":", "]", "=", "rotate_point_cloud_by_angle_y", "(", "transformed_data", "[", "i", ",", ":", ",", ":", "]", ",", "poses", "[", "i", ",", "4", "]", ")", "\n", "transformed_data", "[", "i", ",", ":", ",", ":", "]", "=", "rotate_point_cloud_by_angle_x", "(", "transformed_data", "[", "i", ",", ":", ",", ":", "]", ",", "poses", "[", "i", ",", "3", "]", ")", "\n", "transformed_data", "[", "i", ",", ":", ",", ":", "]", "=", "translate", "(", "transformed_data", "[", "i", ",", ":", ",", ":", "]", ",", "[", "poses", "[", "i", ",", "0", "]", ",", "poses", "[", "i", ",", "1", "]", ",", "poses", "[", "i", ",", "2", "]", "]", ")", "\n", "", "return", "transformed_data", "\n", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.helper.poses_euler2quat": [[255, 267], ["range", "numpy.asarray", "transforms3d.euler2quat", "new_poses.append"], "function", ["None"], ["", "def", "poses_euler2quat", "(", "poses", ")", ":", "\n", "# Arguments:", "\n", "# poses:            6D pose (translation + euler) (batch_size x 6)", "\n", "# Output: ", "\n", "# new_poses:        7D pose (translation + quaternions) (batch_size x 7)", "\n", "\n", "    ", "new_poses", "=", "[", "]", "# Store 7D poses", "\n", "for", "i", "in", "range", "(", "poses", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "temp", "=", "t3d", ".", "euler2quat", "(", "poses", "[", "i", ",", "3", "]", ",", "poses", "[", "i", ",", "4", "]", ",", "poses", "[", "i", ",", "5", "]", ")", "# Convert from euler to quaternion. (1x4)", "\n", "temp1", "=", "[", "poses", "[", "i", ",", "0", "]", ",", "poses", "[", "i", ",", "1", "]", ",", "poses", "[", "i", ",", "2", "]", ",", "temp", "[", "0", "]", ",", "temp", "[", "1", "]", ",", "temp", "[", "2", "]", ",", "temp", "[", "3", "]", "]", "# Add translation & Quaternion (1x7)", "\n", "new_poses", ".", "append", "(", "temp1", ")", "\n", "", "return", "np", ".", "asarray", "(", "new_poses", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.helper.generate_poses": [[269, 287], ["range", "numpy.array().reshape", "numpy.round", "numpy.round", "numpy.round", "numpy.round", "numpy.round", "numpy.round", "poses.append", "numpy.array", "numpy.random.random_sample", "numpy.random.random_sample", "numpy.random.random_sample", "numpy.random.random_sample", "numpy.random.random_sample", "numpy.random.random_sample"], "function", ["None"], ["", "def", "generate_poses", "(", "batch_size", ")", ":", "\n", "# Arguments:", "\n", "# batch_size:       No of 6D poses required.", "\n", "# Output:", "\n", "# poses:            Array of poses with translation and rotation (euler angles in radians) (batch_size x 6)", "\n", "\n", "    ", "poses", "=", "[", "]", "# List to store the 6D poses.", "\n", "for", "i", "in", "range", "(", "batch_size", ")", ":", "\n", "# Generate random translations.", "\n", "        ", "x", "=", "np", ".", "round", "(", "2", "*", "np", ".", "random", ".", "random_sample", "(", ")", "-", "1", ",", "2", ")", "\n", "y", "=", "np", ".", "round", "(", "2", "*", "np", ".", "random", ".", "random_sample", "(", ")", "-", "1", ",", "2", ")", "\n", "z", "=", "np", ".", "round", "(", "2", "*", "np", ".", "random", ".", "random_sample", "(", ")", "-", "1", ",", "2", ")", "\n", "# Generate random rotations.", "\n", "x_rot", "=", "np", ".", "round", "(", "np", ".", "pi", "*", "np", ".", "random", ".", "random_sample", "(", ")", "-", "(", "np", ".", "pi", "/", "2", ")", ",", "3", ")", "\n", "y_rot", "=", "np", ".", "round", "(", "np", ".", "pi", "*", "np", ".", "random", ".", "random_sample", "(", ")", "-", "(", "np", ".", "pi", "/", "2", ")", ",", "3", ")", "\n", "z_rot", "=", "np", ".", "round", "(", "np", ".", "pi", "*", "np", ".", "random", ".", "random_sample", "(", ")", "-", "(", "np", ".", "pi", "/", "2", ")", ",", "3", ")", "\n", "poses", ".", "append", "(", "[", "x", ",", "y", ",", "z", ",", "x_rot", ",", "y_rot", ",", "z_rot", "]", ")", "\n", "", "return", "np", ".", "array", "(", "poses", ")", ".", "reshape", "(", "(", "batch_size", ",", "6", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.helper.transformation": [[289, 302], ["numpy.zeros", "range", "transforms3d.euler2mat"], "function", ["None"], ["", "def", "transformation", "(", "poses", ")", ":", "\n", "# Arguments:", "\n", "# poses:                    6D (x,y,z,euler_x,euler_y,euler_z) (in radians)", "\n", "# Output", "\n", "# transformation_matrix:    batch_size x 4 x 4", "\n", "\n", "    ", "transformation_matrix", "=", "np", ".", "zeros", "(", "(", "poses", ".", "shape", "[", "0", "]", ",", "4", ",", "4", ")", ")", "\n", "transformation_matrix", "[", ":", ",", "3", ",", "3", "]", "=", "1", "\n", "for", "i", "in", "range", "(", "poses", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "rot", "=", "t3d", ".", "euler2mat", "(", "poses", "[", "i", ",", "5", "]", ",", "poses", "[", "i", ",", "4", "]", ",", "poses", "[", "i", ",", "3", "]", ",", "'szyx'", ")", "# Calculate rotation matrix using transforms3d", "\n", "transformation_matrix", "[", "i", ",", "0", ":", "3", ",", "0", ":", "3", "]", "=", "rot", "# Store rotation matrix in transformation matrix.", "\n", "transformation_matrix", "[", "i", ",", "0", ":", "3", ",", "3", "]", "=", "poses", "[", "i", ",", "0", ":", "3", "]", "# Store translations in transformation matrix.", "\n", "", "return", "transformation_matrix", "\n", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.helper.transformation_quat2mat": [[304, 325], ["numpy.array", "poses.reshape.reshape", "range", "numpy.zeros", "transforms3d.quat2mat", "numpy.dot", "numpy.dot"], "function", ["home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.util.quat2mat"], ["", "def", "transformation_quat2mat", "(", "poses", ",", "TRANSFORMATIONS", ",", "templates_data", ")", ":", "# (for 4b)", "\n", "# Arguments:", "\n", "# poses:                    7D (x,y,z,quat_q0,quat_q1,quat_q2,quat_q3) (in radians) (batch_size x 7)", "\n", "# TRANSFORMATIONS:          Overall tranformation matrix.", "\n", "# template_data:            Point Cloud (batch_size x num_points x 3)", "\n", "# Output", "\n", "# TRANSFORMATIONS:          Batch_size x 4 x 4", "\n", "# templates_data:           Transformed template data (batch_size x num_points x 3)", "\n", "\n", "    ", "poses", "=", "np", ".", "array", "(", "poses", ")", "# Convert poses to array.", "\n", "poses", "=", "poses", ".", "reshape", "(", "poses", ".", "shape", "[", "-", "2", "]", ",", "poses", ".", "shape", "[", "-", "1", "]", ")", "\n", "for", "i", "in", "range", "(", "poses", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "transformation_matrix", "=", "np", ".", "zeros", "(", "(", "4", ",", "4", ")", ")", "\n", "transformation_matrix", "[", "3", ",", "3", "]", "=", "1", "\n", "rot", "=", "t3d", ".", "quat2mat", "(", "[", "poses", "[", "i", ",", "3", "]", ",", "poses", "[", "i", ",", "4", "]", ",", "poses", "[", "i", ",", "5", "]", ",", "poses", "[", "i", ",", "6", "]", "]", ")", "# Calculate rotation matrix using transforms3d", "\n", "transformation_matrix", "[", "0", ":", "3", ",", "0", ":", "3", "]", "=", "rot", "# Store rotation matrix in transformation matrix.", "\n", "transformation_matrix", "[", "0", ":", "3", ",", "3", "]", "=", "poses", "[", "i", ",", "0", ":", "3", "]", "# Store translations in transformation matrix.", "\n", "TRANSFORMATIONS", "[", "i", ",", ":", ",", ":", "]", "=", "np", ".", "dot", "(", "transformation_matrix", ",", "TRANSFORMATIONS", "[", "i", ",", ":", ",", ":", "]", ")", "# 4b (Multiply tranfromation matrix to Initial Transfromation Matrix)", "\n", "templates_data", "[", "i", ",", ":", ",", ":", "]", "=", "np", ".", "dot", "(", "rot", ",", "templates_data", "[", "i", ",", ":", ",", ":", "]", ".", "T", ")", ".", "T", "# Apply Rotation to Template Data", "\n", "templates_data", "[", "i", ",", ":", ",", ":", "]", "=", "templates_data", "[", "i", ",", ":", ",", ":", "]", "+", "poses", "[", "i", ",", "0", ":", "3", "]", "# Apply translation to template data", "\n", "", "return", "TRANSFORMATIONS", ",", "templates_data", "\n", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.helper.find_final_pose": [[327, 340], ["numpy.zeros", "range", "transforms3d.mat2euler"], "function", ["None"], ["", "def", "find_final_pose", "(", "TRANSFORMATIONS", ")", ":", "\n", "# Arguments:", "\n", "# TRANSFORMATIONS:          transformation matrix (batch_size x 4 x 4)", "\n", "# Output:", "\n", "# final_pose:               final pose predicted by network (batch_size x 6)", "\n", "\n", "    ", "final_pose", "=", "np", ".", "zeros", "(", "(", "TRANSFORMATIONS", ".", "shape", "[", "0", "]", ",", "6", ")", ")", "# Array to store the poses.", "\n", "for", "i", "in", "range", "(", "TRANSFORMATIONS", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "rot", "=", "TRANSFORMATIONS", "[", "i", ",", "0", ":", "3", ",", "0", ":", "3", "]", "# Extract rotation matrix.", "\n", "euler", "=", "t3d", ".", "mat2euler", "(", "rot", ",", "'szyx'", ")", "# Convert rotation matrix to euler angles. (Pre-multiplication)", "\n", "final_pose", "[", "i", ",", "3", ":", "6", "]", "=", "[", "euler", "[", "2", "]", ",", "euler", "[", "1", "]", ",", "euler", "[", "0", "]", "]", "# Store the translation", "\n", "final_pose", "[", "i", ",", "0", ":", "3", "]", "=", "TRANSFORMATIONS", "[", "i", ",", "0", ":", "3", ",", "3", "]", ".", "T", "# Store the euler angles.", "\n", "", "return", "final_pose", "\n", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.helper.find_final_pose_inv": [[342, 357], ["numpy.copy", "numpy.zeros", "range", "numpy.linalg.inv", "transforms3d.mat2euler"], "function", ["None"], ["", "def", "find_final_pose_inv", "(", "TRANSFORMATIONS_ip", ")", ":", "\n", "# Arguments:", "\n", "# TRANSFORMATIONS:          transformation matrix (batch_size x 4 x 4)", "\n", "# Output:", "\n", "# final_pose:               final pose predicted by network (batch_size x 6)", "\n", "\n", "    ", "TRANSFORMATIONS", "=", "np", ".", "copy", "(", "TRANSFORMATIONS_ip", ")", "\n", "final_pose", "=", "np", ".", "zeros", "(", "(", "TRANSFORMATIONS", ".", "shape", "[", "0", "]", ",", "6", ")", ")", "# Array to store the poses.", "\n", "for", "i", "in", "range", "(", "TRANSFORMATIONS", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "TRANSFORMATIONS", "[", "i", "]", "=", "np", ".", "linalg", ".", "inv", "(", "TRANSFORMATIONS", "[", "i", "]", ")", "\n", "rot", "=", "TRANSFORMATIONS", "[", "i", ",", "0", ":", "3", ",", "0", ":", "3", "]", "# Extract rotation matrix.", "\n", "euler", "=", "t3d", ".", "mat2euler", "(", "rot", ",", "'szyx'", ")", "# Convert rotation matrix to euler angles. (Pre-multiplication)", "\n", "final_pose", "[", "i", ",", "3", ":", "6", "]", "=", "[", "euler", "[", "2", "]", ",", "euler", "[", "1", "]", ",", "euler", "[", "0", "]", "]", "# Store the translation", "\n", "final_pose", "[", "i", ",", "0", ":", "3", "]", "=", "TRANSFORMATIONS", "[", "i", ",", "0", ":", "3", ",", "3", "]", ".", "T", "# Store the euler angles.", "\n", "", "return", "final_pose", "\n", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.helper.centroid_subtraction": [[359, 377], ["numpy.zeros", "range", "numpy.mean", "numpy.mean", "numpy.array"], "function", ["None"], ["", "def", "centroid_subtraction", "(", "source_data", ",", "template_data", ")", ":", "\n", "# Arguments:", "\n", "# source_data:          Source Point Clouds (batch_size x num_points x 3)", "\n", "# template_data:        Template Point Clouds (batch_size x num_points x 3)", "\n", "# Output:", "\n", "# source_data:                  Centroid subtracted from source point cloud (batch_size x num_points x 3)", "\n", "# template_data:                Centroid subtracted from template point cloud (batch_size x num_points x 3)", "\n", "# centroid_translation_pose:    Apply this pose after final iteration. (batch_size x 7)", "\n", "\n", "    ", "centroid_translation_pose", "=", "np", ".", "zeros", "(", "(", "source_data", ".", "shape", "[", "0", "]", ",", "7", ")", ")", "\n", "for", "i", "in", "range", "(", "source_data", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "source_centroid", "=", "np", ".", "mean", "(", "source_data", "[", "i", "]", ",", "axis", "=", "0", ")", "\n", "template_centroid", "=", "np", ".", "mean", "(", "template_data", "[", "i", "]", ",", "axis", "=", "0", ")", "\n", "source_data", "[", "i", "]", "=", "source_data", "[", "i", "]", "-", "source_centroid", "\n", "template_data", "[", "i", "]", "=", "template_data", "[", "i", "]", "-", "template_centroid", "\n", "centroid_translation", "=", "source_centroid", "-", "template_centroid", "\n", "centroid_translation_pose", "[", "i", "]", "=", "np", ".", "array", "(", "[", "centroid_translation", "[", "0", "]", ",", "centroid_translation", "[", "1", "]", ",", "centroid_translation", "[", "2", "]", ",", "1", ",", "0", ",", "0", ",", "0", "]", ")", "\n", "", "return", "source_data", ",", "template_data", ",", "centroid_translation_pose", "\n", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.helper.inverse_pose": [[378, 395], ["numpy.zeros", "transforms3d.euler2mat", "numpy.linalg.inv", "transforms3d.mat2euler", "numpy.zeros"], "function", ["None"], ["", "def", "inverse_pose", "(", "pose", ")", ":", "\n", "    ", "transformation_pose", "=", "np", ".", "zeros", "(", "(", "4", ",", "4", ")", ")", "\n", "transformation_pose", "[", "3", ",", "3", "]", "=", "1", "\n", "transformation_pose", "[", "0", ":", "3", ",", "0", ":", "3", "]", "=", "t3d", ".", "euler2mat", "(", "pose", "[", "5", "]", ",", "pose", "[", "4", "]", ",", "pose", "[", "3", "]", ",", "'szyx'", ")", "\n", "transformation_pose", "[", "0", ",", "3", "]", "=", "pose", "[", "0", "]", "\n", "transformation_pose", "[", "1", ",", "3", "]", "=", "pose", "[", "1", "]", "\n", "transformation_pose", "[", "2", ",", "3", "]", "=", "pose", "[", "2", "]", "\n", "transformation_pose", "=", "np", ".", "linalg", ".", "inv", "(", "transformation_pose", ")", "\n", "pose_inv", "=", "np", ".", "zeros", "(", "(", "1", ",", "6", ")", ")", "[", "0", "]", "\n", "pose_inv", "[", "0", "]", "=", "transformation_pose", "[", "0", ",", "3", "]", "\n", "pose_inv", "[", "1", "]", "=", "transformation_pose", "[", "1", ",", "3", "]", "\n", "pose_inv", "[", "2", "]", "=", "transformation_pose", "[", "2", ",", "3", "]", "\n", "orient_inv", "=", "t3d", ".", "mat2euler", "(", "transformation_pose", "[", "0", ":", "3", ",", "0", ":", "3", "]", ",", "'szyx'", ")", "\n", "pose_inv", "[", "3", "]", "=", "orient_inv", "[", "2", "]", "\n", "pose_inv", "[", "4", "]", "=", "orient_inv", "[", "1", "]", "\n", "pose_inv", "[", "5", "]", "=", "orient_inv", "[", "0", "]", "\n", "return", "pose_inv", "\n", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.helper.pose2mat": [[396, 402], ["numpy.zeros", "enumerate", "transforms3d.euler2mat"], "function", ["None"], ["", "def", "pose2mat", "(", "poses", ")", ":", "\n", "    ", "mat", "=", "np", ".", "zeros", "(", "[", "poses", ".", "shape", "[", "0", "]", ",", "4", ",", "4", "]", ")", "\n", "for", "idx", ",", "pose", "in", "enumerate", "(", "poses", ")", ":", "\n", "        ", "mat", "[", "idx", ",", "0", ":", "3", ",", "0", ":", "3", "]", "=", "t3d", ".", "euler2mat", "(", "pose", "[", "5", "]", ",", "pose", "[", "4", "]", ",", "pose", "[", "3", "]", ",", "'szyx'", ")", "\n", "mat", "[", "idx", ",", "0", ":", "3", ",", "3", "]", "=", "pose", "[", "0", ":", "3", "]", "\n", "", "return", "mat", "\n", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.helper.shuffle_templates": [[407, 419], ["numpy.zeros", "numpy.arange", "numpy.random.shuffle", "range"], "function", ["None"], ["", "def", "shuffle_templates", "(", "templates", ")", ":", "\n", "# Arguments:", "\n", "# templates:            Input array of templates to get randomly shuffled (batch_size x num_points x 3)", "\n", "# Output:", "\n", "# shuffled_templates:   Randomly ordered poses (batch_size x num_points x 3)", "\n", "\n", "    ", "shuffled_templates", "=", "np", ".", "zeros", "(", "templates", ".", "shape", ")", "# Array to store shuffled templates.", "\n", "templates_idxs", "=", "np", ".", "arange", "(", "0", ",", "templates", ".", "shape", "[", "0", "]", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "templates_idxs", ")", "# Randomly shuffle template indices.", "\n", "for", "i", "in", "range", "(", "templates", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "shuffled_templates", "[", "i", ",", ":", ",", ":", "]", "=", "templates", "[", "templates_idxs", "[", "i", "]", ",", ":", ",", ":", "]", "# Rearrange them as per shuffled indices.", "\n", "", "return", "shuffled_templates", "\n", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.helper.shuffle_poses": [[421, 433], ["numpy.zeros", "numpy.arange", "numpy.random.shuffle", "range"], "function", ["None"], ["", "def", "shuffle_poses", "(", "poses", ")", ":", "\n", "# Arguments:", "\n", "# poses:            Input array of poses to get randomly shuffled (batch_size x n)", "\n", "# Output:", "\n", "# shuffled_poses:   Randomly ordered poses (batch_size x n)", "\n", "\n", "    ", "shuffled_poses", "=", "np", ".", "zeros", "(", "poses", ".", "shape", ")", "# Array to store shuffled poses.", "\n", "poses_idxs", "=", "np", ".", "arange", "(", "0", ",", "poses", ".", "shape", "[", "0", "]", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "poses_idxs", ")", "# Shuffle the indexes of poses.", "\n", "for", "i", "in", "range", "(", "poses", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "shuffled_poses", "[", "i", ",", ":", "]", "=", "poses", "[", "poses_idxs", "[", "i", "]", ",", ":", "]", "# Rearrange them as per shuffled indexes.", "\n", "", "return", "shuffled_poses", "\n", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.helper.random_trans": [[435, 444], ["numpy.random.uniform", "numpy.random.uniform", "numpy.random.uniform", "numpy.random.uniform", "numpy.random.uniform", "numpy.random.uniform"], "function", ["None"], ["", "def", "random_trans", "(", ")", ":", "\n", "# Output:", "\n", "# 6D pose with first 3 translation values and last 3 euler angles in radian about x,y,z-axes. (1x6)", "\n", "\n", "# Generate random translations.", "\n", "    ", "x_trans", ",", "y_trans", ",", "z_trans", "=", "0.4", "*", "np", ".", "random", ".", "uniform", "(", ")", "-", "0.2", ",", "0.4", "*", "np", ".", "random", ".", "uniform", "(", ")", "-", "0.2", ",", "0.4", "*", "np", ".", "random", ".", "uniform", "(", ")", "-", "0.2", "\n", "# Generate random rotation angles.", "\n", "x_rot", ",", "y_rot", ",", "z_rot", "=", "(", "np", ".", "pi", "/", "9", ")", "*", "np", ".", "random", ".", "uniform", "(", ")", "-", "(", "np", ".", "pi", "/", "18", ")", ",", "(", "np", ".", "pi", "/", "9", ")", "*", "np", ".", "random", ".", "uniform", "(", ")", "-", "(", "np", ".", "pi", "/", "18", ")", ",", "(", "np", ".", "pi", "/", "9", ")", "*", "np", ".", "random", ".", "uniform", "(", ")", "-", "(", "np", ".", "pi", "/", "18", ")", "\n", "return", "[", "x_trans", ",", "y_trans", ",", "z_trans", ",", "x_rot", ",", "y_rot", ",", "z_rot", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.helper.generate_random_poses": [[446, 458], ["range", "numpy.array", "poses.append", "numpy.round", "numpy.round", "numpy.round", "numpy.round", "numpy.round", "numpy.round", "numpy.random.uniform", "numpy.random.uniform", "numpy.random.uniform", "numpy.random.uniform", "numpy.random.uniform", "numpy.random.uniform"], "function", ["None"], ["", "def", "generate_random_poses", "(", "batch_size", ")", ":", "\n", "# Arguments:", "\n", "# Batch_size:       No of poses in the output", "\n", "# Output:", "\n", "# poses:            Randomly generated poses (batch_size x 6)", "\n", "\n", "    ", "poses", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "batch_size", ")", ":", "\n", "        ", "x_trans", ",", "y_trans", ",", "z_trans", "=", "2", "*", "np", ".", "random", ".", "uniform", "(", ")", "-", "1", ",", "2", "*", "np", ".", "random", ".", "uniform", "(", ")", "-", "1", ",", "2", "*", "np", ".", "random", ".", "uniform", "(", ")", "-", "1", "# Generate random translation", "\n", "x_rot", ",", "y_rot", ",", "z_rot", "=", "(", "np", ".", "pi", ")", "*", "np", ".", "random", ".", "uniform", "(", ")", "-", "(", "np", ".", "pi", "/", "2", ")", ",", "(", "np", ".", "pi", ")", "*", "np", ".", "random", ".", "uniform", "(", ")", "-", "(", "np", ".", "pi", "/", "2", ")", ",", "(", "np", ".", "pi", ")", "*", "np", ".", "random", ".", "uniform", "(", ")", "-", "(", "np", ".", "pi", "/", "2", ")", "# Generate random orientation", "\n", "poses", ".", "append", "(", "[", "np", ".", "round", "(", "x_trans", ",", "4", ")", ",", "np", ".", "round", "(", "y_trans", ",", "4", ")", ",", "np", ".", "round", "(", "z_trans", ",", "4", ")", ",", "np", ".", "round", "(", "x_rot", ",", "4", ")", ",", "np", ".", "round", "(", "y_rot", ",", "4", ")", ",", "np", ".", "round", "(", "z_rot", ",", "4", ")", "]", ")", "# round upto 4 decimal digits", "\n", "", "return", "np", ".", "array", "(", "poses", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.helper.select_random_points": [[459, 465], ["numpy.copy", "numpy.arange", "numpy.random.shuffle"], "function", ["None"], ["", "def", "select_random_points", "(", "source_data", ",", "num_point", ")", ":", "\n", "    ", "random_source_data", "=", "np", ".", "copy", "(", "source_data", ")", "\n", "idx", "=", "np", ".", "arange", "(", "random_source_data", ".", "shape", "[", "1", "]", ")", "# Find indexes of source data.", "\n", "np", ".", "random", ".", "shuffle", "(", "idx", ")", "# Shuffle indexes.", "\n", "random_source_data", "=", "random_source_data", "[", ":", ",", "idx", ",", ":", "]", "# Shuffle data as per shuffled indexes.", "\n", "return", "random_source_data", "[", ":", ",", "0", ":", "num_point", ",", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.helper.add_noise": [[466, 473], ["range", "range", "numpy.random.random_sample", "numpy.random.normal"], "function", ["None"], ["", "def", "add_noise", "(", "source_data", ")", ":", "\n", "    ", "for", "i", "in", "range", "(", "source_data", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "mean", "=", "0", "\n", "for", "j", "in", "range", "(", "source_data", ".", "shape", "[", "1", "]", ")", ":", "\n", "            ", "sigma", "=", "0.04", "*", "np", ".", "random", ".", "random_sample", "(", ")", "# Generate random variance value b/w 0 to 0.1", "\n", "source_data", "[", "i", ",", "j", ",", ":", "]", "=", "source_data", "[", "i", ",", "j", ",", ":", "]", "+", "np", ".", "random", ".", "normal", "(", "mean", ",", "sigma", ",", "source_data", "[", "i", ",", "j", "]", ".", "shape", ")", "# Add gaussian noise.", "\n", "", "", "return", "source_data", "\n", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.helper.fit_in_m1_to_1": [[474, 484], ["numpy.linalg.norm", "numpy.mean", "numpy.max"], "function", ["None"], ["", "def", "fit_in_m1_to_1", "(", "points", ")", ":", "\n", "    ", "'''\n    Input: Nx3 \n    Output: Nx3 \n    fits the point cloud in [(-1,-1,-1) to (1,1,1)]\n    '''", "\n", "points", "=", "points", "-", "np", ".", "mean", "(", "points", ",", "axis", "=", "0", ")", "\n", "dist_from_orig", "=", "np", ".", "linalg", ".", "norm", "(", "points", ",", "axis", "=", "1", ")", "\n", "points", "=", "points", "/", "np", ".", "max", "(", "dist_from_orig", ")", "\n", "return", "points", "\n", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.helper.rotate_point_cloud_by_angle_y_tensor": [[487, 500], ["tf.cos", "tf.sin", "tf.reshape", "tf.reshape", "tf.transpose", "tf.tensordot", "tf.transpose"], "function", ["None"], ["", "def", "rotate_point_cloud_by_angle_y_tensor", "(", "data", ",", "rotation_angle", ")", ":", "\n", "    ", "\"\"\" Rotate the point cloud along up direction with certain angle.\n        Input:\n          Nx3 array, original batch of point clouds\n        Return:\n          Nx3 array, rotated batch of point clouds\n    \"\"\"", "\n", "cosval", "=", "tf", ".", "cos", "(", "rotation_angle", ")", "\n", "sinval", "=", "tf", ".", "sin", "(", "rotation_angle", ")", "\n", "rotation_matrix", "=", "tf", ".", "reshape", "(", "[", "[", "cosval", ",", "0", ",", "sinval", "]", ",", "[", "0", ",", "1", ",", "0", "]", ",", "[", "-", "sinval", ",", "0", ",", "cosval", "]", "]", ",", "[", "3", ",", "3", "]", ")", "\n", "data", "=", "tf", ".", "reshape", "(", "data", ",", "[", "-", "1", ",", "3", "]", ")", "\n", "rotated_data", "=", "tf", ".", "transpose", "(", "tf", ".", "tensordot", "(", "rotation_matrix", ",", "tf", ".", "transpose", "(", "data", ")", ",", "[", "1", ",", "0", "]", ")", ")", "\n", "return", "rotated_data", "\n", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.helper.rotate_point_cloud_by_angle_x_tensor": [[501, 514], ["tf.cos", "tf.sin", "tf.reshape", "tf.reshape", "tf.transpose", "tf.tensordot", "tf.transpose"], "function", ["None"], ["", "def", "rotate_point_cloud_by_angle_x_tensor", "(", "data", ",", "rotation_angle", ")", ":", "\n", "    ", "\"\"\" Rotate the point cloud along up direction with certain angle.\n        Input:\n          Nx3 array, original batch of point clouds\n        Return:\n          Nx3 array, rotated batch of point clouds\n    \"\"\"", "\n", "cosval", "=", "tf", ".", "cos", "(", "rotation_angle", ")", "\n", "sinval", "=", "tf", ".", "sin", "(", "rotation_angle", ")", "\n", "rotation_matrix", "=", "tf", ".", "reshape", "(", "[", "[", "1", ",", "0", ",", "0", "]", ",", "[", "0", ",", "cosval", ",", "-", "sinval", "]", ",", "[", "0", ",", "sinval", ",", "cosval", "]", "]", ",", "[", "3", ",", "3", "]", ")", "\n", "data", "=", "tf", ".", "reshape", "(", "data", ",", "[", "-", "1", ",", "3", "]", ")", "\n", "rotated_data", "=", "tf", ".", "transpose", "(", "tf", ".", "tensordot", "(", "rotation_matrix", ",", "tf", ".", "transpose", "(", "data", ")", ",", "[", "1", ",", "0", "]", ")", ")", "\n", "return", "rotated_data", "\n", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.helper.rotate_point_cloud_by_angle_z_tensor": [[515, 528], ["tf.cos", "tf.sin", "tf.reshape", "tf.reshape", "tf.transpose", "tf.tensordot", "tf.transpose"], "function", ["None"], ["", "def", "rotate_point_cloud_by_angle_z_tensor", "(", "data", ",", "rotation_angle", ")", ":", "\n", "    ", "\"\"\" Rotate the point cloud along up direction with certain angle.\n        Input:\n          Nx3 array, original batch of point clouds\n        Return:\n          Nx3 array, rotated batch of point clouds\n    \"\"\"", "\n", "cosval", "=", "tf", ".", "cos", "(", "rotation_angle", ")", "\n", "sinval", "=", "tf", ".", "sin", "(", "rotation_angle", ")", "\n", "rotation_matrix", "=", "tf", ".", "reshape", "(", "[", "[", "cosval", ",", "-", "sinval", ",", "0", "]", ",", "[", "sinval", ",", "cosval", ",", "0", "]", ",", "[", "0", ",", "0", ",", "1", "]", "]", ",", "[", "3", ",", "3", "]", ")", "\n", "data", "=", "tf", ".", "reshape", "(", "data", ",", "[", "-", "1", ",", "3", "]", ")", "\n", "rotated_data", "=", "tf", ".", "transpose", "(", "tf", ".", "tensordot", "(", "rotation_matrix", ",", "tf", ".", "transpose", "(", "data", ")", ",", "[", "1", ",", "0", "]", ")", ")", "\n", "return", "rotated_data", "\n", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.helper.translate_tensor": [[529, 532], ["tf.add"], "function", ["None"], ["", "def", "translate_tensor", "(", "data", ",", "shift", ")", ":", "\n", "# Add the translation vector to given tensor. (num_point x 3)", "\n", "    ", "return", "tf", ".", "add", "(", "data", ",", "shift", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.helper.transformation_tensor": [[534, 550], ["tf.zeros", "range", "helper.rotate_point_cloud_by_angle_x_tensor", "helper.rotate_point_cloud_by_angle_y_tensor", "helper.rotate_point_cloud_by_angle_z_tensor", "helper.translate_tensor", "tf.concat", "tf.reshape"], "function", ["home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.helper.rotate_point_cloud_by_angle_x_tensor", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.helper.rotate_point_cloud_by_angle_y_tensor", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.helper.rotate_point_cloud_by_angle_z_tensor", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.helper.translate_tensor"], ["", "def", "transformation_tensor", "(", "datas", ",", "poses", ")", ":", "\n", "# Arguments:", "\n", "# datas:                Tensor of Point Cloud (batch_size x num_points x 3)", "\n", "# poses:                Tensor of Poses (translation + euler angles in degrees) (batch_size x num_points x 3)", "\n", "# Ouput:", "\n", "# transformed_data:     Tensor of transformed point cloud (batch_size x num_points x 3)", "\n", "\n", "    ", "transformed_data", "=", "tf", ".", "zeros", "(", "[", "datas", ".", "shape", "[", "1", "]", ",", "datas", ".", "shape", "[", "2", "]", "]", ")", "# Tensor to store the transformed point clouds as tensor.", "\n", "for", "i", "in", "range", "(", "datas", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "transformed_data_t", "=", "rotate_point_cloud_by_angle_x_tensor", "(", "datas", "[", "i", ",", "...", "]", ",", "poses", "[", "i", ",", "3", "]", ")", "# Rotate about x-axis", "\n", "transformed_data_t", "=", "rotate_point_cloud_by_angle_y_tensor", "(", "transformed_data_t", ",", "poses", "[", "i", ",", "4", "]", ")", "# Rotate about y-axis", "\n", "transformed_data_t", "=", "rotate_point_cloud_by_angle_z_tensor", "(", "transformed_data_t", ",", "poses", "[", "i", ",", "5", "]", ")", "# Rotate about z-axis", "\n", "transformed_data_t", "=", "translate_tensor", "(", "transformed_data_t", ",", "[", "poses", "[", "i", ",", "0", "]", ",", "poses", "[", "i", ",", "1", "]", ",", "poses", "[", "i", ",", "2", "]", "]", ")", "# Translate by given vector.", "\n", "transformed_data", "=", "tf", ".", "concat", "(", "[", "transformed_data", ",", "transformed_data_t", "]", ",", "0", ")", "# Append the transformed tensor point cloud.", "\n", "", "transformed_data", "=", "tf", ".", "reshape", "(", "transformed_data", ",", "[", "-", "1", ",", "datas", ".", "shape", "[", "1", "]", ",", "datas", ".", "shape", "[", "2", "]", "]", ")", "[", "1", ":", "]", "# Reshape the transformed tensor and remove first one. (batch_size x num_point x 3)", "\n", "return", "transformed_data", "\n", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.helper.transformation_quat_tensor": [[552, 584], ["tf.zeros", "range", "tf.slice", "tf.slice", "tf.slice", "tf.slice", "tf.reshape", "tf.transpose", "tf.add", "tf.concat", "tf.reshape", "tf.tensordot", "tf.transpose"], "function", ["None"], ["", "def", "transformation_quat_tensor", "(", "data", ",", "quat", ",", "translation", ")", ":", "\n", "# Arguments:", "\n", "# data:                 Tensor of Point Cloud. (batch_size x num_point x 3)", "\n", "# quat:                 Quaternion tensor to generate rotation matrix.  (batch_size x 4)", "\n", "# translation:          Translation tensor to translate the point cloud. (batch_size x 3)", "\n", "# Outputs:", "\n", "# transformed_data:     Tensor of Rotated and Translated Point Cloud Data. (batch_size x num_points x 3)", "\n", "\n", "    ", "transformed_data", "=", "tf", ".", "zeros", "(", "[", "data", ".", "shape", "[", "1", "]", ",", "3", "]", ")", "# Tensor to store transformed data.", "\n", "for", "i", "in", "range", "(", "quat", ".", "shape", "[", "0", "]", ")", ":", "\n", "# Seperate each quaternion value.", "\n", "        ", "q0", "=", "tf", ".", "slice", "(", "quat", ",", "[", "i", ",", "0", "]", ",", "[", "1", ",", "1", "]", ")", "\n", "q1", "=", "tf", ".", "slice", "(", "quat", ",", "[", "i", ",", "1", "]", ",", "[", "1", ",", "1", "]", ")", "\n", "q2", "=", "tf", ".", "slice", "(", "quat", ",", "[", "i", ",", "2", "]", ",", "[", "1", ",", "1", "]", ")", "\n", "q3", "=", "tf", ".", "slice", "(", "quat", ",", "[", "i", ",", "3", "]", ",", "[", "1", ",", "1", "]", ")", "\n", "# Convert quaternion to rotation matrix.", "\n", "# Ref:  http://www-evasion.inrialpes.fr/people/Franck.Hetroy/Teaching/ProjetsImage/2007/Bib/besl_mckay-pami1992.pdf", "\n", "# A method for Registration of 3D shapes paper by Paul J. Besl and Neil D McKay.", "\n", "R", "=", "[", "[", "q0", "*", "q0", "+", "q1", "*", "q1", "-", "q2", "*", "q2", "-", "q3", "*", "q3", ",", "2", "*", "(", "q1", "*", "q2", "-", "q0", "*", "q3", ")", ",", "2", "*", "(", "q1", "*", "q3", "+", "q0", "*", "q2", ")", "]", ",", "\n", "[", "2", "*", "(", "q1", "*", "q2", "+", "q0", "*", "q3", ")", ",", "q0", "*", "q0", "+", "q2", "*", "q2", "-", "q1", "*", "q1", "-", "q3", "*", "q3", ",", "2", "*", "(", "q2", "*", "q3", "-", "q0", "*", "q1", ")", "]", ",", "\n", "[", "2", "*", "(", "q1", "*", "q3", "-", "q0", "*", "q2", ")", ",", "2", "*", "(", "q2", "*", "q3", "+", "q0", "*", "q1", ")", ",", "q0", "*", "q0", "+", "q3", "*", "q3", "-", "q1", "*", "q1", "-", "q2", "*", "q2", "]", "]", "\n", "\n", "R", "=", "tf", ".", "reshape", "(", "R", ",", "[", "3", ",", "3", "]", ")", "# Convert R into a single tensor of shape 3x3.", "\n", "# tf.tensordot: Arg: tensor1, tensor2, axes", "\n", "# axes defined for tensor1 & tensor2 should be of same size.", "\n", "# axis 1 of R is of size 3 and axis 0 of data (3xnum_points) is of size 3.", "\n", "\n", "temp_rotated_data", "=", "tf", ".", "transpose", "(", "tf", ".", "tensordot", "(", "R", ",", "tf", ".", "transpose", "(", "data", "[", "i", ",", "...", "]", ")", ",", "[", "1", ",", "0", "]", ")", ")", "# Rotate the data. (num_points x 3)", "\n", "temp_rotated_data", "=", "tf", ".", "add", "(", "temp_rotated_data", ",", "translation", "[", "i", ",", "...", "]", ")", "# Add the translation (num_points x 3)", "\n", "transformed_data", "=", "tf", ".", "concat", "(", "[", "transformed_data", ",", "temp_rotated_data", "]", ",", "0", ")", "# Append data (batch_size x num_points x 3)", "\n", "", "transformed_data", "=", "tf", ".", "reshape", "(", "transformed_data", ",", "[", "-", "1", ",", "data", ".", "shape", "[", "1", "]", ",", "3", "]", ")", "[", "1", ":", "]", "# Reshape data and remove first point cloud. (batch_size x num_point x 3)", "\n", "return", "transformed_data", "\n", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.helper.display_clouds": [[589, 616], ["matplotlib.figure", "plt.figure.add_subplot", "numpy.asarray", "fig.add_subplot.scatter", "matplotlib.show", "open", "csv.reader", "X.append", "Y.append", "Z.append", "os.path.join", "np.asarray.append", "float"], "function", ["None"], ["", "def", "display_clouds", "(", "filename", ",", "model_no", ")", ":", "\n", "# Arguments:", "\n", "# filename:         Name of file to read the data from. (string)", "\n", "# model_no:         Number to choose the model inside that file. (int)", "\n", "\n", "    ", "data", "=", "[", "]", "\n", "# Read the entire data from that file.", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "'data'", ",", "'templates'", ",", "filename", ")", ",", "'r'", ")", "as", "csvfile", ":", "\n", "        ", "csvreader", "=", "csv", ".", "reader", "(", "csvfile", ")", "\n", "for", "row", "in", "csvreader", ":", "\n", "            ", "row", "=", "[", "float", "(", "x", ")", "for", "x", "in", "row", "]", "\n", "data", ".", "append", "(", "row", ")", "\n", "", "", "fig", "=", "plt", ".", "figure", "(", ")", "\n", "ax", "=", "fig", ".", "add_subplot", "(", "111", ",", "projection", "=", "'3d'", ")", "\n", "data", "=", "np", ".", "asarray", "(", "data", ")", "\n", "\n", "start_idx", "=", "model_no", "*", "2048", "\n", "end_idx", "=", "(", "model_no", "+", "1", ")", "*", "2048", "\n", "data", "=", "data", "[", "start_idx", ":", "end_idx", ",", ":", "]", "# Choose specific data related to the given model number.", "\n", "\n", "X", ",", "Y", ",", "Z", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "row", "in", "data", ":", "\n", "        ", "X", ".", "append", "(", "row", "[", "0", "]", ")", "\n", "Y", ".", "append", "(", "row", "[", "1", "]", ")", "\n", "Z", ".", "append", "(", "row", "[", "2", "]", ")", "\n", "", "ax", ".", "scatter", "(", "X", ",", "Y", ",", "Z", ")", "\n", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.helper.display_clouds_data": [[618, 636], ["matplotlib.figure", "plt.figure.add_subplot", "fig.add_subplot.scatter", "fig.add_subplot.set_aspect", "matplotlib.show", "data.tolist.tolist", "X.append", "Y.append", "Z.append"], "function", ["None"], ["", "def", "display_clouds_data", "(", "data", ")", ":", "\n", "# Arguments:", "\n", "# data:         array of point clouds (num_points x 3)", "\n", "\n", "    ", "fig", "=", "plt", ".", "figure", "(", ")", "\n", "ax", "=", "fig", ".", "add_subplot", "(", "111", ",", "projection", "=", "'3d'", ")", "\n", "try", ":", "\n", "        ", "data", "=", "data", ".", "tolist", "(", ")", "\n", "", "except", ":", "\n", "        ", "pass", "\n", "", "X", ",", "Y", ",", "Z", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "row", "in", "data", ":", "\n", "        ", "X", ".", "append", "(", "row", "[", "0", "]", ")", "\n", "Y", ".", "append", "(", "row", "[", "1", "]", ")", "\n", "Z", ".", "append", "(", "row", "[", "2", "]", ")", "\n", "", "ax", ".", "scatter", "(", "X", ",", "Y", ",", "Z", ")", "\n", "ax", ".", "set_aspect", "(", "'equal'", ")", "\n", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.helper.display_two_clouds": [[639, 692], ["matplotlib.figure", "plt.figure.add_subplot", "fig.add_subplot.scatter", "fig.add_subplot.scatter", "matplotlib.legend", "fig.add_subplot.tick_params", "fig.add_subplot.set_xlabel", "fig.add_subplot.set_ylabel", "fig.add_subplot.set_zlabel", "matplotlib.title", "fig.add_subplot.xaxis.set_tick_params", "fig.add_subplot.yaxis.set_tick_params", "fig.add_subplot.zaxis.set_tick_params", "fig.add_subplot.set_aspect", "matplotlib.show", "data1.tolist.tolist", "data2.tolist.tolist", "data3.tolist.tolist", "X.append", "Y.append", "Z.append", "X.append", "Y.append", "Z.append", "range", "len", "fig.add_subplot.plot3D"], "function", ["None"], ["", "def", "display_two_clouds", "(", "data1", ",", "data2", ",", "title", "=", "\"title\"", ",", "disp_corr", "=", "False", ")", ":", "\n", "# Arguments:", "\n", "# data1         Template Data (num_points x 3) (Red)", "\n", "# data2         Source Data (num_points x 3) (Green)", "\n", "\n", "\n", "    ", "fig", "=", "plt", ".", "figure", "(", ")", "\n", "ax", "=", "fig", ".", "add_subplot", "(", "111", ",", "projection", "=", "'3d'", ")", "\n", "try", ":", "\n", "        ", "data1", "=", "data1", ".", "tolist", "(", ")", "\n", "data2", "=", "data2", ".", "tolist", "(", ")", "\n", "data3", "=", "data3", ".", "tolist", "(", ")", "\n", "", "except", ":", "\n", "        ", "pass", "\n", "# Add Template Data in Plot", "\n", "", "X", ",", "Y", ",", "Z", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "row", "in", "data1", ":", "\n", "        ", "X", ".", "append", "(", "row", "[", "0", "]", ")", "\n", "Y", ".", "append", "(", "row", "[", "1", "]", ")", "\n", "Z", ".", "append", "(", "row", "[", "2", "]", ")", "\n", "", "l1", "=", "ax", ".", "scatter", "(", "X", ",", "Y", ",", "Z", ",", "c", "=", "[", "1", ",", "0", ",", "0", ",", "1", "]", ")", "\n", "# Add Source Data in Plot", "\n", "X", ",", "Y", ",", "Z", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "row", "in", "data2", ":", "\n", "        ", "X", ".", "append", "(", "row", "[", "0", "]", ")", "\n", "Y", ".", "append", "(", "row", "[", "1", "]", ")", "\n", "Z", ".", "append", "(", "row", "[", "2", "]", ")", "\n", "", "l2", "=", "ax", ".", "scatter", "(", "X", ",", "Y", ",", "Z", ",", "c", "=", "[", "0", ",", "1", ",", "0", ",", "0.5", "]", ")", "\n", "\n", "if", "disp_corr", ":", "\n", "        ", "for", "i", "in", "range", "(", "len", "(", "data1", ")", ")", ":", "\n", "            ", "ax", ".", "plot3D", "(", "[", "data1", "[", "i", "]", "[", "0", "]", ",", "data2", "[", "i", "]", "[", "0", "]", "]", ",", "[", "data1", "[", "i", "]", "[", "1", "]", ",", "data2", "[", "i", "]", "[", "1", "]", "]", ",", "[", "data1", "[", "i", "]", "[", "2", "]", ",", "data2", "[", "i", "]", "[", "2", "]", "]", ",", "c", "=", "[", "0", ",", "0", ",", "1", ",", "0.1", "]", ")", "\n", "\n", "\n", "# Add details to Plot.", "\n", "", "", "plt", ".", "legend", "(", "(", "l1", ",", "l2", ")", ",", "(", "'training data'", ",", "'Source Data'", ")", ",", "prop", "=", "{", "'size'", ":", "15", "}", ",", "markerscale", "=", "4", ")", "\n", "ax", ".", "tick_params", "(", "labelsize", "=", "10", ")", "\n", "ax", ".", "set_xlabel", "(", "'X-axis'", ",", "fontsize", "=", "15", ")", "\n", "ax", ".", "set_ylabel", "(", "'Y-axis'", ",", "fontsize", "=", "15", ")", "\n", "ax", ".", "set_zlabel", "(", "'Z-axis'", ",", "fontsize", "=", "15", ")", "\n", "# ax.set_xlim(-1,1.25)", "\n", "# ax.set_ylim(-1,1)", "\n", "# ax.set_zlim(-0.5,1.25)", "\n", "plt", ".", "title", "(", "title", ",", "fontdict", "=", "{", "'fontsize'", ":", "25", "}", ")", "\n", "ax", ".", "xaxis", ".", "set_tick_params", "(", "labelsize", "=", "15", ")", "\n", "ax", ".", "yaxis", ".", "set_tick_params", "(", "labelsize", "=", "15", ")", "\n", "ax", ".", "zaxis", ".", "set_tick_params", "(", "labelsize", "=", "15", ")", "\n", "ax", ".", "set_aspect", "(", "'equal'", ")", "\n", "\n", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.helper.display_two_clouds_corr_mat": [[693, 765], ["matplotlib.figure", "plt.figure.add_subplot", "fig.add_subplot.scatter", "fig.add_subplot.scatter", "range", "matplotlib.legend", "fig.add_subplot.tick_params", "fig.add_subplot.set_xlabel", "fig.add_subplot.set_ylabel", "fig.add_subplot.set_zlabel", "matplotlib.title", "fig.add_subplot.xaxis.set_tick_params", "fig.add_subplot.yaxis.set_tick_params", "fig.add_subplot.zaxis.set_tick_params", "matplotlib.show", "data2.tolist.T.dot", "data1.tolist.tolist", "data2.tolist.tolist", "X.append", "Y.append", "Z.append", "X.append", "Y.append", "Z.append", "len", "matplotlib.pause", "matplotlib.close", "numpy.array", "numpy.array", "numpy.random.rand", "fig.add_subplot.plot3D", "numpy.array"], "function", ["home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.main.IOStream.close"], ["", "def", "display_two_clouds_corr_mat", "(", "data1", ",", "data2", ",", "corr_mat", ",", "text", "=", "[", "\"title\"", ",", "\"pointcloud1\"", ",", "\"pointcloud2\"", "]", ",", "disp_time", "=", "3", ")", ":", "\n", "    ", "'''\n    Arguments:\n        data1         source (num_points x 3) (Red)\n        data2         target (num_points x 3) (Green)\n\n    '''", "\n", "fig", "=", "plt", ".", "figure", "(", ")", "\n", "ax", "=", "fig", ".", "add_subplot", "(", "111", ",", "projection", "=", "'3d'", ")", "\n", "data3", "=", "(", "data2", ".", "T", ".", "dot", "(", "corr_mat", ")", ")", ".", "T", "\n", "# print (data3,\"data3\")", "\n", "\n", "try", ":", "\n", "        ", "data1", "=", "data1", ".", "tolist", "(", ")", "\n", "data2", "=", "data2", ".", "tolist", "(", ")", "\n", "", "except", ":", "\n", "        ", "pass", "\n", "# Add Template Data in Plot", "\n", "", "X", ",", "Y", ",", "Z", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "row", "in", "data1", ":", "\n", "        ", "X", ".", "append", "(", "row", "[", "0", "]", ")", "\n", "Y", ".", "append", "(", "row", "[", "1", "]", ")", "\n", "Z", ".", "append", "(", "row", "[", "2", "]", ")", "\n", "", "l1", "=", "ax", ".", "scatter", "(", "X", ",", "Y", ",", "Z", ",", "c", "=", "np", ".", "array", "(", "[", "1", ",", "0", ",", "0", ",", "1", "]", ")", ")", "\n", "# Add Source Data in Plot", "\n", "X", ",", "Y", ",", "Z", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "row", "in", "data2", ":", "\n", "        ", "X", ".", "append", "(", "row", "[", "0", "]", ")", "\n", "Y", ".", "append", "(", "row", "[", "1", "]", ")", "\n", "Z", ".", "append", "(", "row", "[", "2", "]", ")", "\n", "", "l2", "=", "ax", ".", "scatter", "(", "X", ",", "Y", ",", "Z", ",", "c", "=", "np", ".", "array", "(", "[", "0", ",", "1", ",", "0", ",", "1", "]", ")", ")", "\n", "\n", "# X,Y,Z = [],[],[]", "\n", "# for row in data3:", "\n", "#   X.append(row[0])", "\n", "#   Y.append(row[1])", "\n", "#   Z.append(row[2])", "\n", "# l3 = ax.scatter(X,Y,Z,c=np.array([1,1,0,1]))", "\n", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "data1", ")", ")", ":", "\n", "        ", "if", "np", ".", "random", ".", "rand", "(", ")", ">", "0.6", ":", "\n", "            ", "ax", ".", "plot3D", "(", "[", "data1", "[", "i", "]", "[", "0", "]", ",", "data3", "[", "i", "]", "[", "0", "]", "]", ",", "[", "data1", "[", "i", "]", "[", "1", "]", ",", "data3", "[", "i", "]", "[", "1", "]", "]", ",", "[", "data1", "[", "i", "]", "[", "2", "]", ",", "data3", "[", "i", "]", "[", "2", "]", "]", ",", "'--'", ",", "c", "=", "np", ".", "array", "(", "[", "0", ",", "0", ",", "1", ",", "1", "]", ")", ")", "\n", "# ax.plot3D([data1[i][0],data2[corr_idx_gt[i]][0] ], \\", "\n", "#         [data1[i][1],data2[corr_idx_gt[i]][1] ], \\", "\n", "#         [data1[i][2],data2[corr_idx_gt[i]][2] ], \\", "\n", "#          c=np.array([0,0,0,0.5]))", "\n", "\n", "# Add details to Plot.", "\n", "", "", "plt", ".", "legend", "(", "(", "l1", ",", "l2", ")", ",", "(", "text", "[", "1", "]", ",", "text", "[", "2", "]", ")", ",", "prop", "=", "{", "'size'", ":", "15", "}", ",", "markerscale", "=", "4", ")", "\n", "ax", ".", "tick_params", "(", "labelsize", "=", "10", ")", "\n", "ax", ".", "set_xlabel", "(", "'X-axis'", ",", "fontsize", "=", "5", ")", "\n", "ax", ".", "set_ylabel", "(", "'Y-axis'", ",", "fontsize", "=", "5", ")", "\n", "ax", ".", "set_zlabel", "(", "'Z-axis'", ",", "fontsize", "=", "5", ")", "\n", "# ax.set_xlim(-1,1.25)", "\n", "# ax.set_ylim(-1,1)", "\n", "# ax.set_zlim(-0.5,1.25)", "\n", "plt", ".", "title", "(", "text", "[", "0", "]", ",", "fontdict", "=", "{", "'fontsize'", ":", "25", "}", ")", "\n", "ax", ".", "xaxis", ".", "set_tick_params", "(", "labelsize", "=", "15", ")", "\n", "ax", ".", "yaxis", ".", "set_tick_params", "(", "labelsize", "=", "15", ")", "\n", "ax", ".", "zaxis", ".", "set_tick_params", "(", "labelsize", "=", "15", ")", "\n", "# ax.set_aspect('equal')", "\n", "\n", "plt", ".", "show", "(", "block", "=", "False", ")", "\n", "try", ":", "\n", "        ", "plt", ".", "pause", "(", "disp_time", ")", "\n", "plt", ".", "close", "(", ")", "\n", "", "except", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.helper.display_two_clouds_correspondence": [[767, 840], ["matplotlib.figure", "plt.figure.add_subplot", "fig.add_subplot.scatter", "fig.add_subplot.scatter", "range", "matplotlib.legend", "fig.add_subplot.tick_params", "fig.add_subplot.set_xlabel", "fig.add_subplot.set_ylabel", "fig.add_subplot.set_zlabel", "matplotlib.title", "fig.add_subplot.xaxis.set_tick_params", "fig.add_subplot.yaxis.set_tick_params", "fig.add_subplot.zaxis.set_tick_params", "fig.add_subplot.set_aspect", "matplotlib.show", "data1.tolist.tolist", "data2.tolist.tolist", "data3.tolist.tolist", "X.append", "Y.append", "Z.append", "X.append", "Y.append", "Z.append", "len", "fig.add_subplot.plot3D", "matplotlib.pause", "matplotlib.close", "numpy.array", "numpy.array", "numpy.array"], "function", ["home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.main.IOStream.close"], ["", "", "def", "display_two_clouds_correspondence", "(", "data1", ",", "data2", ",", "corr_idx", ",", "corr_idx_gt", ",", "title", "=", "\"title\"", ",", "disp_time", "=", "3", ")", ":", "\n", "    ", "'''\n    Issue with this function:\n    shuffles source data. \n    We generally want to shuffle target data and transform source data.\n    '''", "\n", "# Arguments:", "\n", "# data1         Template Data (num_points x 3) (Red)", "\n", "# data2         Source Data (num_points x 3) (Green)", "\n", "\n", "\n", "fig", "=", "plt", ".", "figure", "(", ")", "\n", "ax", "=", "fig", ".", "add_subplot", "(", "111", ",", "projection", "=", "'3d'", ")", "\n", "try", ":", "\n", "        ", "data1", "=", "data1", ".", "tolist", "(", ")", "\n", "data2", "=", "data2", ".", "tolist", "(", ")", "\n", "data3", "=", "data3", ".", "tolist", "(", ")", "\n", "", "except", ":", "\n", "        ", "pass", "\n", "# Add Template Data in Plot", "\n", "", "X", ",", "Y", ",", "Z", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "row", "in", "data1", ":", "\n", "        ", "X", ".", "append", "(", "row", "[", "0", "]", ")", "\n", "Y", ".", "append", "(", "row", "[", "1", "]", ")", "\n", "Z", ".", "append", "(", "row", "[", "2", "]", ")", "\n", "", "l1", "=", "ax", ".", "scatter", "(", "X", ",", "Y", ",", "Z", ",", "c", "=", "np", ".", "array", "(", "[", "1", ",", "0", ",", "0", ",", "1", "]", ")", ")", "\n", "# Add Source Data in Plot", "\n", "X", ",", "Y", ",", "Z", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "row", "in", "data2", ":", "\n", "        ", "X", ".", "append", "(", "row", "[", "0", "]", ")", "\n", "Y", ".", "append", "(", "row", "[", "1", "]", ")", "\n", "Z", ".", "append", "(", "row", "[", "2", "]", ")", "\n", "", "l2", "=", "ax", ".", "scatter", "(", "X", ",", "Y", ",", "Z", ",", "c", "=", "np", ".", "array", "(", "[", "0", ",", "1", ",", "0", ",", "1", "]", ")", ")", "\n", "\n", "# X,Y,Z = [],[],[]", "\n", "# for row in data3:", "\n", "#   X.append(row[0])", "\n", "#   Y.append(row[1])", "\n", "#   Z.append(row[2])", "\n", "# l3 = ax.scatter(X,Y,Z,c=np.array([1,1,0,1]))", "\n", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "corr_idx", ")", ")", ":", "\n", "        ", "ax", ".", "plot3D", "(", "[", "data1", "[", "i", "]", "[", "0", "]", ",", "data2", "[", "corr_idx", "[", "i", "]", "]", "[", "0", "]", "]", ",", "[", "data1", "[", "i", "]", "[", "1", "]", ",", "data2", "[", "corr_idx", "[", "i", "]", "]", "[", "1", "]", "]", ",", "[", "data1", "[", "i", "]", "[", "2", "]", ",", "data2", "[", "corr_idx", "[", "i", "]", "]", "[", "2", "]", "]", ",", "'--'", ",", "c", "=", "np", ".", "array", "(", "[", "0", ",", "0", ",", "1", ",", "1", "]", ")", ")", "\n", "# ax.plot3D([data1[i][0],data2[corr_idx_gt[i]][0] ], \\", "\n", "#         [data1[i][1],data2[corr_idx_gt[i]][1] ], \\", "\n", "#         [data1[i][2],data2[corr_idx_gt[i]][2] ], \\", "\n", "#          c=np.array([0,0,0,0.5]))", "\n", "\n", "# Add details to Plot.", "\n", "", "plt", ".", "legend", "(", "(", "l1", ",", "l2", ")", ",", "(", "'transformed source'", ",", "'source'", ")", ",", "prop", "=", "{", "'size'", ":", "15", "}", ",", "markerscale", "=", "4", ")", "\n", "ax", ".", "tick_params", "(", "labelsize", "=", "10", ")", "\n", "ax", ".", "set_xlabel", "(", "'X-axis'", ",", "fontsize", "=", "15", ")", "\n", "ax", ".", "set_ylabel", "(", "'Y-axis'", ",", "fontsize", "=", "15", ")", "\n", "ax", ".", "set_zlabel", "(", "'Z-axis'", ",", "fontsize", "=", "15", ")", "\n", "# ax.set_xlim(-1,1.25)", "\n", "# ax.set_ylim(-1,1)", "\n", "# ax.set_zlim(-0.5,1.25)", "\n", "plt", ".", "title", "(", "title", ",", "fontdict", "=", "{", "'fontsize'", ":", "25", "}", ")", "\n", "ax", ".", "xaxis", ".", "set_tick_params", "(", "labelsize", "=", "15", ")", "\n", "ax", ".", "yaxis", ".", "set_tick_params", "(", "labelsize", "=", "15", ")", "\n", "ax", ".", "zaxis", ".", "set_tick_params", "(", "labelsize", "=", "15", ")", "\n", "ax", ".", "set_aspect", "(", "'equal'", ")", "\n", "\n", "plt", ".", "show", "(", "block", "=", "False", ")", "\n", "try", ":", "\n", "        ", "plt", ".", "pause", "(", "disp_time", ")", "\n", "plt", ".", "close", "(", ")", "\n", "", "except", ":", "\n", "        ", "pass", "\n", "# Display given template, source and predicted point cloud data.", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.helper.display_three_clouds": [[841, 893], ["matplotlib.figure", "plt.figure.add_subplot", "fig.add_subplot.scatter", "fig.add_subplot.scatter", "fig.add_subplot.scatter", "matplotlib.legend", "fig.add_subplot.tick_params", "fig.add_subplot.set_xlabel", "fig.add_subplot.set_ylabel", "fig.add_subplot.set_zlabel", "matplotlib.title", "fig.add_subplot.xaxis.set_tick_params", "fig.add_subplot.yaxis.set_tick_params", "fig.add_subplot.zaxis.set_tick_params", "matplotlib.show", "data1.tolist.tolist", "data2.tolist.tolist", "data3.tolist.tolist", "X.append", "Y.append", "Z.append", "X.append", "Y.append", "Z.append", "X.append", "Y.append", "Z.append"], "function", ["None"], ["", "", "def", "display_three_clouds", "(", "data1", ",", "data2", ",", "data3", ",", "title", ",", "legend_list", ")", ":", "\n", "# Arguments:", "\n", "# data1         Template Data (num_points x 3) (Red)", "\n", "# data2         Source Data (num_points x 3) (Green)", "\n", "# data3         Predicted Data (num_points x 3) (Blue)", "\n", "\n", "    ", "fig", "=", "plt", ".", "figure", "(", ")", "\n", "ax", "=", "fig", ".", "add_subplot", "(", "111", ",", "projection", "=", "'3d'", ")", "\n", "try", ":", "\n", "        ", "data1", "=", "data1", ".", "tolist", "(", ")", "\n", "data2", "=", "data2", ".", "tolist", "(", ")", "\n", "data3", "=", "data3", ".", "tolist", "(", ")", "\n", "", "except", ":", "\n", "        ", "pass", "\n", "# Add Template Data in Plot", "\n", "", "X", ",", "Y", ",", "Z", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "row", "in", "data1", ":", "\n", "        ", "X", ".", "append", "(", "row", "[", "0", "]", ")", "\n", "Y", ".", "append", "(", "row", "[", "1", "]", ")", "\n", "Z", ".", "append", "(", "row", "[", "2", "]", ")", "\n", "", "l1", "=", "ax", ".", "scatter", "(", "X", ",", "Y", ",", "Z", ",", "c", "=", "[", "0", ",", "0", ",", "1", ",", "1", "]", ",", "s", "=", "10", ")", "\n", "# Add Source Data in Plot", "\n", "X", ",", "Y", ",", "Z", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "row", "in", "data2", ":", "\n", "        ", "X", ".", "append", "(", "row", "[", "0", "]", ")", "\n", "Y", ".", "append", "(", "row", "[", "1", "]", ")", "\n", "Z", ".", "append", "(", "row", "[", "2", "]", ")", "\n", "", "l2", "=", "ax", ".", "scatter", "(", "X", ",", "Y", ",", "Z", ",", "c", "=", "[", "1", ",", "0", ",", "0", ",", "1", "]", ",", "s", "=", "10", ")", "\n", "# Add Predicted Data in Plot", "\n", "X", ",", "Y", ",", "Z", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "row", "in", "data3", ":", "\n", "        ", "X", ".", "append", "(", "row", "[", "0", "]", ")", "\n", "Y", ".", "append", "(", "row", "[", "1", "]", ")", "\n", "Z", ".", "append", "(", "row", "[", "2", "]", ")", "\n", "", "l3", "=", "ax", ".", "scatter", "(", "X", ",", "Y", ",", "Z", ",", "c", "=", "[", "0", ",", "1", ",", "0", ",", "0.5", "]", ",", "s", "=", "30", ")", "\n", "\n", "# Add details to Plot.", "\n", "plt", ".", "legend", "(", "(", "l1", ",", "l2", ",", "l3", ")", ",", "(", "legend_list", "[", "0", "]", ",", "legend_list", "[", "1", "]", ",", "legend_list", "[", "2", "]", ")", ",", "prop", "=", "{", "'size'", ":", "15", "}", ",", "markerscale", "=", "4", ")", "\n", "ax", ".", "tick_params", "(", "labelsize", "=", "10", ")", "\n", "ax", ".", "set_xlabel", "(", "'X-axis'", ",", "fontsize", "=", "15", ")", "\n", "ax", ".", "set_ylabel", "(", "'Y-axis'", ",", "fontsize", "=", "15", ")", "\n", "ax", ".", "set_zlabel", "(", "'Z-axis'", ",", "fontsize", "=", "15", ")", "\n", "# ax.set_xlim(-1,1.25)", "\n", "# ax.set_ylim(-1,1)", "\n", "# ax.set_zlim(-0.5,1.25)", "\n", "plt", ".", "title", "(", "title", ",", "fontdict", "=", "{", "'fontsize'", ":", "25", "}", ")", "\n", "ax", ".", "xaxis", ".", "set_tick_params", "(", "labelsize", "=", "15", ")", "\n", "ax", ".", "yaxis", ".", "set_tick_params", "(", "labelsize", "=", "15", ")", "\n", "ax", ".", "zaxis", ".", "set_tick_params", "(", "labelsize", "=", "15", ")", "\n", "# ax.set_aspect('equal')", "\n", "\n", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.helper.display_n_clouds": [[895, 917], ["matplotlib.figure", "plt.figure.add_subplot", "range", "matplotlib.title", "fig.add_subplot.legend", "matplotlib.show", "len", "fig.add_subplot.scatter"], "function", ["None"], ["", "def", "display_n_clouds", "(", "data_list", ",", "\n", "legend_list", ",", "\n", "color_list", "=", "[", "'y'", ",", "'r'", ",", "'g'", ",", "'k'", ",", "'b'", ",", "'m'", ",", "'c'", "]", ",", "\n", "title", "=", "\"n_clouds\"", ")", ":", "\n", "    ", "\"\"\"\n    max 7 colors\n    \"\"\"", "\n", "fig", "=", "plt", ".", "figure", "(", ")", "\n", "ax", "=", "fig", ".", "add_subplot", "(", "111", ",", "projection", "=", "'3d'", ")", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "legend_list", ")", ")", ":", "\n", "        ", "data", "=", "data_list", "[", "i", "]", "\n", "ax", ".", "scatter", "(", "data", "[", ":", ",", "0", "]", ",", "data", "[", ":", ",", "1", "]", ",", "data", "[", ":", ",", "2", "]", ",", "\n", "c", "=", "color_list", "[", "i", "]", ",", "\n", "s", "=", "30", "-", "6", "*", "i", ",", "\n", "alpha", "=", "0.3", "+", "i", "/", "7.", ",", "\n", "label", "=", "legend_list", "[", "i", "]", ")", "\n", "\n", "\n", "", "plt", ".", "title", "(", "title", ",", "fontdict", "=", "{", "'fontsize'", ":", "25", "}", ")", "\n", "ax", ".", "legend", "(", "fontsize", "=", "20", ",", "loc", "=", "1", ")", "\n", "plt", ".", "show", "(", "block", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.helper.display_itr_clouds": [[922, 979], ["matplotlib.figure", "plt.figure.add_subplot", "print", "fig.add_subplot.scatter", "fig.add_subplot.scatter", "fig.add_subplot.scatter", "matplotlib.legend", "fig.add_subplot.tick_params", "fig.add_subplot.set_xlabel", "fig.add_subplot.set_ylabel", "fig.add_subplot.set_zlabel", "matplotlib.title", "fig.add_subplot.xaxis.set_tick_params", "fig.add_subplot.yaxis.set_tick_params", "fig.add_subplot.zaxis.set_tick_params", "matplotlib.show", "data1.tolist.tolist", "data2.tolist.tolist", "data3.tolist.tolist", "X.append", "Y.append", "Z.append", "X.append", "Y.append", "Z.append", "X.append", "Y.append", "Z.append", "fig.add_subplot.scatter", "X.append", "Y.append", "Z.append"], "function", ["None"], ["", "def", "display_itr_clouds", "(", "data1", ",", "data2", ",", "data3", ",", "ITR", ",", "title", ")", ":", "\n", "# Arguments:", "\n", "# data1         Template Data (num_points x 3) (Red)", "\n", "# data2         Source Data (num_points x 3) (Green)", "\n", "# data3         Predicted Data (num_points x 3) (Blue)", "\n", "# ITR           Point Clouds obtained after each iteration (iterations x batch_size x num of points x 3) (Yellow)", "\n", "\n", "    ", "fig", "=", "plt", ".", "figure", "(", ")", "\n", "ax", "=", "fig", ".", "add_subplot", "(", "111", ",", "projection", "=", "'3d'", ")", "\n", "print", "(", "ITR", ".", "shape", ")", "# Display Number of Point Clouds in ITR.", "\n", "try", ":", "\n", "        ", "data1", "=", "data1", ".", "tolist", "(", ")", "\n", "data2", "=", "data2", ".", "tolist", "(", ")", "\n", "data3", "=", "data3", ".", "tolist", "(", ")", "\n", "", "except", ":", "\n", "        ", "pass", "\n", "# Add Template Data in Plot", "\n", "", "X", ",", "Y", ",", "Z", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "row", "in", "data1", ":", "\n", "        ", "X", ".", "append", "(", "row", "[", "0", "]", ")", "\n", "Y", ".", "append", "(", "row", "[", "1", "]", ")", "\n", "Z", ".", "append", "(", "row", "[", "2", "]", ")", "\n", "", "l1", "=", "ax", ".", "scatter", "(", "X", ",", "Y", ",", "Z", ",", "c", "=", "[", "1", ",", "0", ",", "0", ",", "1", "]", ")", "\n", "# Add Source Data in Plot", "\n", "X", ",", "Y", ",", "Z", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "row", "in", "data2", ":", "\n", "        ", "X", ".", "append", "(", "row", "[", "0", "]", ")", "\n", "Y", ".", "append", "(", "row", "[", "1", "]", ")", "\n", "Z", ".", "append", "(", "row", "[", "2", "]", ")", "\n", "", "l2", "=", "ax", ".", "scatter", "(", "X", ",", "Y", ",", "Z", ",", "c", "=", "[", "0", ",", "1", ",", "0", ",", "1", "]", ")", "\n", "# Add Predicted Data in Plot", "\n", "X", ",", "Y", ",", "Z", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "row", "in", "data3", ":", "\n", "        ", "X", ".", "append", "(", "row", "[", "0", "]", ")", "\n", "Y", ".", "append", "(", "row", "[", "1", "]", ")", "\n", "Z", ".", "append", "(", "row", "[", "2", "]", ")", "\n", "", "l3", "=", "ax", ".", "scatter", "(", "X", ",", "Y", ",", "Z", ",", "c", "=", "[", "0", ",", "0", ",", "1", ",", "1", "]", ")", "\n", "# Add point clouds after each iteration in Plot.", "\n", "for", "itr_data", "in", "ITR", ":", "\n", "        ", "X", ",", "Y", ",", "Z", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "row", "in", "itr_data", "[", "0", "]", ":", "\n", "            ", "X", ".", "append", "(", "row", "[", "0", "]", ")", "\n", "Y", ".", "append", "(", "row", "[", "1", "]", ")", "\n", "Z", ".", "append", "(", "row", "[", "2", "]", ")", "\n", "", "ax", ".", "scatter", "(", "X", ",", "Y", ",", "Z", ",", "c", "=", "[", "1", ",", "1", ",", "0", ",", "0.5", "]", ")", "\n", "\n", "# Add details to Plot.", "\n", "", "plt", ".", "legend", "(", "(", "l1", ",", "l2", ",", "l3", ")", ",", "(", "'Template Data'", ",", "'Source Data'", ",", "'Predicted Data'", ")", ",", "prop", "=", "{", "'size'", ":", "15", "}", ",", "markerscale", "=", "4", ")", "\n", "ax", ".", "tick_params", "(", "labelsize", "=", "10", ")", "\n", "ax", ".", "set_xlabel", "(", "'X-axis'", ",", "fontsize", "=", "15", ")", "\n", "ax", ".", "set_ylabel", "(", "'Y-axis'", ",", "fontsize", "=", "15", ")", "\n", "ax", ".", "set_zlabel", "(", "'Z-axis'", ",", "fontsize", "=", "15", ")", "\n", "plt", ".", "title", "(", "title", ",", "fontdict", "=", "{", "'fontsize'", ":", "25", "}", ")", "\n", "ax", ".", "xaxis", ".", "set_tick_params", "(", "labelsize", "=", "15", ")", "\n", "ax", ".", "yaxis", ".", "set_tick_params", "(", "labelsize", "=", "15", ")", "\n", "ax", ".", "zaxis", ".", "set_tick_params", "(", "labelsize", "=", "15", ")", "\n", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.helper.display_rotation_vects_SO3": [[980, 996], ["matplotlib.figure", "plt.figure.add_subplot", "numpy.multiply", "numpy.multiply", "numpy.multiply", "fig.add_subplot.scatter", "fig.add_subplot.set_xlabel", "fig.add_subplot.set_ylabel", "fig.add_subplot.set_zlabel", "matplotlib.show"], "function", ["None"], ["", "def", "display_rotation_vects_SO3", "(", "rot_vects", ")", ":", "\n", "# print (rot_vects)", "\n", "# print (rot_vects.shape)", "\n", "\n", "    ", "fig", "=", "plt", ".", "figure", "(", ")", "\n", "ax", "=", "fig", ".", "add_subplot", "(", "111", ",", "projection", "=", "'3d'", ")", "\n", "\n", "xs", "=", "np", ".", "multiply", "(", "rot_vects", "[", ":", ",", "0", "]", ",", "rot_vects", "[", ":", ",", "3", "]", ")", "\n", "ys", "=", "np", ".", "multiply", "(", "rot_vects", "[", ":", ",", "1", "]", ",", "rot_vects", "[", ":", ",", "3", "]", ")", "\n", "zs", "=", "np", ".", "multiply", "(", "rot_vects", "[", ":", ",", "2", "]", ",", "rot_vects", "[", ":", ",", "3", "]", ")", "\n", "\n", "ax", ".", "scatter", "(", "xs", ",", "ys", ",", "zs", ")", "\n", "ax", ".", "set_xlabel", "(", "'X Label'", ")", "\n", "ax", ".", "set_ylabel", "(", "'Y Label'", ")", "\n", "ax", ".", "set_zlabel", "(", "'Z Label'", ")", "\n", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.helper.rotate_point_cloud_by_axis_angle": [[998, 1012], ["numpy.zeros", "range", "transforms3d.axangle2mat", "numpy.dot", "shape_pc.reshape"], "function", ["None"], ["", "def", "rotate_point_cloud_by_axis_angle", "(", "batch_data", ",", "axis", ",", "rotation_angle", ")", ":", "\n", "    ", "'''\n    input : BxNx3 , 1x3 vect,angle\n    output: BxNx3\n    '''", "\n", "rotated_data", "=", "np", ".", "zeros", "(", "batch_data", ".", "shape", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "for", "k", "in", "range", "(", "batch_data", ".", "shape", "[", "0", "]", ")", ":", "\n", "#rotation_angle = np.random.uniform() * 2 * np.pi ", "\n", "        ", "rotation_matrix", "=", "t3d_axang", ".", "axangle2mat", "(", "axis", ",", "rotation_angle", ")", "\n", "\n", "shape_pc", "=", "batch_data", "[", "k", ",", "...", "]", "\n", "# rotated_data[k, ...] = np.dot(shape_pc.reshape((-1, 3)), rotation_matrix)", "\n", "rotated_data", "[", "k", ",", "...", "]", "=", "np", ".", "dot", "(", "rotation_matrix", ",", "shape_pc", ".", "reshape", "(", "(", "-", "1", ",", "3", ")", ")", ".", "T", ")", ".", "T", "# Pre-Multiplication (changes done)", "\n", "", "return", "rotated_data", "\n", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.helper.invert_axang": [[1015, 1019], ["transforms3d.axangle2mat", "transforms3d.mat2axangle"], "function", ["None"], ["", "def", "invert_axang", "(", "axis", ",", "rotation_angle", ")", ":", "\n", "    ", "rot_m", "=", "t3d_axang", ".", "axangle2mat", "(", "axis", ",", "rotation_angle", ")", "\n", "axis_inv", ",", "angle_inv", "=", "t3d_axang", ".", "mat2axangle", "(", "rot_m", ".", "T", ")", "\n", "return", "axis_inv", ",", "angle_inv", "\n", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.helper.combine_ax_angs": [[1020, 1027], ["numpy.eye", "range", "transforms3d.mat2axangle", "len", "R.dot.dot", "transforms3d.axangle2mat"], "function", ["None"], ["", "def", "combine_ax_angs", "(", "rot_vect_seq", ")", ":", "\n", "    ", "R", "=", "np", ".", "eye", "(", "3", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "rot_vect_seq", ")", ")", ":", "\n", "        ", "R", "=", "R", ".", "dot", "(", "t3d_axang", ".", "axangle2mat", "(", "rot_vect_seq", "[", "i", ",", "0", ":", "3", "]", ",", "rot_vect_seq", "[", "i", ",", "3", "]", ")", ")", "\n", "# print R", "\n", "", "comb_axis_inv", ",", "comb_angle_inv", "=", "t3d_axang", ".", "mat2axangle", "(", "R", ")", "\n", "return", "comb_axis_inv", ",", "comb_angle_inv", "\n", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.helper.distance_between_ax_angs": [[1030, 1041], ["transforms3d.axangle2mat", "transforms3d.axangle2mat", "transforms3d.mat2axangle", "abs", "t3d_axang.axangle2mat.dot"], "function", ["None"], ["", "def", "distance_between_ax_angs", "(", "v1", ",", "v2", ")", ":", "\n", "    ", "\"\"\"\n    v1 = [ax_x,ax_y,ax_z,ang]\n    v2 = [ax_x,ax_y,ax_z,ang]\n    \"\"\"", "\n", "\n", "R1", "=", "t3d_axang", ".", "axangle2mat", "(", "v1", "[", "0", ":", "3", "]", ",", "v1", "[", "3", "]", ",", "is_normalized", "=", "True", ")", "\n", "R2", "=", "t3d_axang", ".", "axangle2mat", "(", "v2", "[", "0", ":", "3", "]", ",", "v2", "[", "3", "]", ",", "is_normalized", "=", "True", ")", "\n", "\n", "ax", ",", "ang", "=", "t3d_axang", ".", "mat2axangle", "(", "R1", ".", "dot", "(", "R2", ".", "T", ")", ")", "\n", "return", "abs", "(", "ang", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.helper.find_nn_SO3": [[1042, 1053], ["len", "range", "helper.distance_between_ax_angs"], "function", ["home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.helper.distance_between_ax_angs"], ["", "def", "find_nn_SO3", "(", "rot_vects", ",", "query_vect", ")", ":", "\n", "    ", "n", "=", "len", "(", "rot_vects", ")", "\n", "closest_sample_id_SO3", "=", "0", "\n", "min_ang", "=", "np", ".", "pi", "\n", "for", "i", "in", "range", "(", "n", ")", ":", "\n", "        ", "cur_dist", "=", "distance_between_ax_angs", "(", "rot_vects", "[", "i", ",", ":", "]", ",", "query_vect", ")", "\n", "if", "cur_dist", "<", "min_ang", ":", "\n", "            ", "min_ang", "=", "cur_dist", "\n", "closest_sample_id_SO3", "=", "i", "\n", "\n", "", "", "return", "closest_sample_id_SO3", "\n", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.helper.display_SO3": [[1054, 1069], ["matplotlib.figure", "plt.figure.add_subplot", "numpy.multiply", "numpy.multiply", "numpy.multiply", "fig.add_subplot.scatter", "fig.add_subplot.set_xlabel", "fig.add_subplot.set_ylabel", "fig.add_subplot.set_zlabel", "fig.add_subplot.legend", "matplotlib.show"], "function", ["None"], ["", "def", "display_SO3", "(", "rot_vects", ",", "label", "=", "'training set SO3 points'", ")", ":", "\n", "    ", "fig", "=", "plt", ".", "figure", "(", ")", "\n", "ax", "=", "fig", ".", "add_subplot", "(", "111", ",", "projection", "=", "'3d'", ")", "\n", "\n", "xs", "=", "np", ".", "multiply", "(", "rot_vects", "[", ":", ",", "0", "]", ",", "rot_vects", "[", ":", ",", "3", "]", ")", "\n", "ys", "=", "np", ".", "multiply", "(", "rot_vects", "[", ":", ",", "1", "]", ",", "rot_vects", "[", ":", ",", "3", "]", ")", "\n", "zs", "=", "np", ".", "multiply", "(", "rot_vects", "[", ":", ",", "2", "]", ",", "rot_vects", "[", ":", ",", "3", "]", ")", "\n", "\n", "ax", ".", "scatter", "(", "xs", ",", "ys", ",", "zs", ",", "s", "=", "5", ",", "label", "=", "label", ")", "\n", "\n", "ax", ".", "set_xlabel", "(", "'X Label'", ")", "\n", "ax", ".", "set_ylabel", "(", "'Y Label'", ")", "\n", "ax", ".", "set_zlabel", "(", "'Z Label'", ")", "\n", "ax", ".", "legend", "(", "fontsize", "=", "20", ",", "loc", "=", "1", ")", "\n", "plt", ".", "show", "(", "block", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.helper.sample_from_SO3": [[1071, 1133], ["numpy.arange", "numpy.arange", "len", "len", "len", "numpy.zeros", "numpy.hstack", "theta_rep.reshape.reshape", "numpy.hstack", "numpy.vstack", "r_rep.reshape.reshape", "numpy.hstack", "phi_rep.T.reshape.T.reshape", "numpy.hstack", "numpy.multiply", "numpy.multiply", "numpy.cos", "numpy.unique", "numpy.linalg.norm().reshape", "numpy.divide", "numpy.unique", "numpy.sin", "numpy.cos", "numpy.sin", "numpy.sin", "len", "numpy.arange", "numpy.linalg.norm", "r.reshape", "np.arange.reshape", "np.arange.T.reshape"], "function", ["None"], ["", "def", "sample_from_SO3", "(", "dtheta", "=", "np", ".", "pi", "/", "6", ",", "dr", "=", "0.2", ",", "dphi", "=", "np", ".", "pi", "/", "6", ")", ":", "\n", "    ", "'''\n    output: rot_vects = nx4 matrix of rotation vectors \n            rot_vects[i,0:3] = normalized axis \n            rot_vects[i,3] = angle of rotation \n    '''", "\n", "\n", "theta", "=", "np", ".", "arange", "(", "0", ",", "np", ".", "pi", ",", "dtheta", ")", "\n", "r", "=", "np", ".", "arange", "(", "dr", ",", "np", ".", "pi", "+", "dr", ",", "dr", ")", "**", "3", "/", "(", "(", "np", ".", "pi", ")", "**", "2", ")", "\n", "phi", "=", "np", ".", "arange", "(", "0", ",", "2", "*", "np", ".", "pi", ",", "dphi", ")", "\n", "\n", "n_theta", "=", "len", "(", "theta", ")", "\n", "n_r", "=", "len", "(", "r", ")", "\n", "n_phi", "=", "len", "(", "phi", ")", "\n", "\n", "# print theta,\"theta\"", "\n", "# print phi,\"phi\"", "\n", "# print r,\"r\"", "\n", "\n", "rot_vects", "=", "np", ".", "zeros", "(", "(", "(", "n_theta", "*", "n_r", "*", "n_phi", ")", ",", "4", ")", ")", "\n", "\n", "theta_rep", "=", "np", ".", "hstack", "(", "(", "theta", ".", "reshape", "(", "n_theta", ",", "1", ")", ",", ")", "*", "n_r", "*", "n_phi", ")", "\n", "theta_rep", "=", "theta_rep", ".", "reshape", "(", "n_phi", "*", "n_r", "*", "n_theta", ",", "1", ")", "\n", "\n", "r_rep", "=", "np", ".", "hstack", "(", "(", "r", ".", "reshape", "(", "n_r", ",", "1", ")", ",", ")", "*", "n_phi", ")", "\n", "r_rep", "=", "np", ".", "vstack", "(", "(", "r_rep", ",", ")", "*", "n_theta", ")", "\n", "r_rep", "=", "r_rep", ".", "reshape", "(", "n_phi", "*", "n_r", "*", "n_theta", ",", "1", ")", "\n", "\n", "phi_rep", "=", "np", ".", "hstack", "(", "(", "phi", ".", "T", ".", "reshape", "(", "n_phi", ",", "1", ")", ",", ")", "*", "n_r", "*", "n_theta", ")", "\n", "phi_rep", "=", "phi_rep", ".", "T", ".", "reshape", "(", "n_phi", "*", "n_r", "*", "n_theta", ",", "1", ")", "\n", "rot_params", "=", "np", ".", "hstack", "(", "(", "theta_rep", ",", "r_rep", ",", "phi_rep", ")", ")", "\n", "\n", "rot_vects", "[", ":", ",", "0", "]", "=", "np", ".", "multiply", "(", "np", ".", "sin", "(", "rot_params", "[", ":", ",", "0", "]", ")", ",", "np", ".", "cos", "(", "rot_params", "[", ":", ",", "2", "]", ")", ")", "\n", "rot_vects", "[", ":", ",", "1", "]", "=", "np", ".", "multiply", "(", "np", ".", "sin", "(", "rot_params", "[", ":", ",", "0", "]", ")", ",", "np", ".", "sin", "(", "rot_params", "[", ":", ",", "2", "]", ")", ")", "\n", "rot_vects", "[", ":", ",", "2", "]", "=", "np", ".", "cos", "(", "rot_params", "[", ":", ",", "0", "]", ")", "\n", "rot_vects", "[", ":", ",", "3", "]", "=", "rot_params", "[", ":", ",", "1", "]", "\n", "rot_vects", "=", "np", ".", "unique", "(", "rot_vects", ",", "axis", "=", "0", ")", "\n", "\n", "norm_vect", "=", "np", ".", "linalg", ".", "norm", "(", "rot_vects", "[", ":", ",", "0", ":", "3", "]", ",", "axis", "=", "1", ")", ".", "reshape", "(", "len", "(", "rot_vects", ")", ",", "1", ")", "\n", "rot_vects", "[", ":", ",", "0", ":", "3", "]", "=", "np", ".", "divide", "(", "rot_vects", "[", ":", ",", "0", ":", "3", "]", ",", "norm_vect", ")", "\n", "rot_vects", "=", "np", ".", "unique", "(", "rot_vects", ",", "axis", "=", "0", ")", "\n", "\n", "\n", "\n", "### debugging helper ", "\n", "# print (rot_vects)", "\n", "# print (rot_vects.shape)", "\n", "\n", "# fig = plt.figure()", "\n", "# ax = fig.add_subplot(111, projection='3d')", "\n", "\n", "# xs = np.multiply(rot_vects[:,0],rot_vects[:,3])", "\n", "# ys = np.multiply(rot_vects[:,1],rot_vects[:,3])", "\n", "# zs = np.multiply(rot_vects[:,2],rot_vects[:,3])", "\n", "\n", "#  ax.scatter(xs, ys, zs)", "\n", "# ax.set_xlabel('X Label')", "\n", "# ax.set_ylabel('Y Label')", "\n", "# ax.set_zlabel('Z Label')", "\n", "# plt.show()", "\n", "# helper.display_rotation_vects_SO3(rot_vects)", "\n", "return", "rot_vects", "\n", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.helper.log_test_results": [[1137, 1258], ["matplotlib.hist", "matplotlib.xlim", "matplotlib.savefig", "matplotlib.figure", "matplotlib.hist", "matplotlib.xlim", "matplotlib.savefig", "os.path.exists", "os.mkdir", "sum", "len", "open", "csv.writer", "range", "len", "numpy.var", "numpy.var", "numpy.var", "numpy.var", "len", "numpy.var", "numpy.var", "numpy.var", "numpy.var", "len", "numpy.var", "numpy.var", "numpy.var", "numpy.var", "open", "file.write", "file.write", "file.write", "file.write", "file.write", "file.write", "file.write", "file.write", "file.write", "file.write", "file.write", "file.write", "file.write", "file.write", "file.write", "file.write", "file.write", "file.write", "file.write", "file.write", "file.write", "file.write", "file.write", "file.write", "file.write", "file.write", "file.write", "file.write", "file.write", "file.write", "file.write", "file.write", "file.write", "file.write", "numpy.arange", "os.path.join", "numpy.arange", "os.path.join", "os.path.join", "len", "csv.writer.writerow", "len", "numpy.sum", "len", "numpy.sum", "len", "numpy.sum", "len", "numpy.sum", "len", "len", "numpy.sum", "len", "numpy.sum", "len", "numpy.sum", "len", "numpy.sum", "len", "len", "numpy.sum", "len", "numpy.sum", "len", "numpy.sum", "len", "numpy.sum", "len", "os.path.join", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array"], "function", ["None"], ["", "def", "log_test_results", "(", "LOG_DIR", ",", "filename", ",", "log", ")", ":", "\n", "\n", "# It will log the data in following sequence in csv format:", "\n", "# Sr. No., time taken, number of iterations, translation error, rotation error.", "\n", "\n", "# If log dir doesn't exists create one.", "\n", "    ", "if", "not", "os", ".", "path", ".", "exists", "(", "LOG_DIR", ")", ":", "os", ".", "mkdir", "(", "LOG_DIR", ")", "\n", "\n", "# Find params from the dictionary.", "\n", "ITR", ",", "TIME", "=", "log", "[", "'ITR'", "]", ",", "log", "[", "'TIME'", "]", "\n", "Trans_Err", ",", "Rot_Err", "=", "log", "[", "'Trans_Err'", "]", ",", "log", "[", "'Rot_Err'", "]", "\n", "idxs_5_5", ",", "idxs_10_1", ",", "idxs_20_2", "=", "log", "[", "'idxs_5_5'", "]", ",", "log", "[", "'idxs_10_1'", "]", ",", "log", "[", "'idxs_20_2'", "]", "\n", "num_batches", "=", "log", "[", "'num_batches'", "]", "\n", "\n", "# Find mean and variance.", "\n", "TIME_mean", "=", "sum", "(", "TIME", ")", "/", "len", "(", "TIME", ")", "\n", "\n", "# Log all the data in a csv file.", "\n", "import", "csv", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "LOG_DIR", ",", "filename", "+", "'.csv'", ")", ",", "'w'", ")", "as", "csvfile", ":", "\n", "        ", "csvwriter", "=", "csv", ".", "writer", "(", "csvfile", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "TIME", ")", ")", ":", "\n", "            ", "csvwriter", ".", "writerow", "(", "[", "i", ",", "TIME", "[", "i", "]", ",", "ITR", "[", "i", "]", ",", "Trans_Err", "[", "i", "]", ",", "Rot_Err", "[", "i", "]", "]", ")", "\n", "\n", "", "", "if", "len", "(", "idxs_5_5", ")", "!=", "0", ":", "\n", "        ", "accuray_5_5", "=", "len", "(", "idxs_5_5", ")", "/", "(", "num_batches", "*", "1.0", ")", "\n", "mean_5_5_rot_err", "=", "np", ".", "sum", "(", "np", ".", "array", "(", "Rot_Err", ")", "[", "idxs_5_5", "]", ")", "/", "len", "(", "idxs_5_5", ")", "\n", "var_5_5_rot_err", "=", "np", ".", "var", "(", "np", ".", "array", "(", "Rot_Err", ")", "[", "idxs_5_5", "]", ")", "\n", "mean_5_5_trans_err", "=", "np", ".", "sum", "(", "np", ".", "array", "(", "Trans_Err", ")", "[", "idxs_5_5", "]", ")", "/", "len", "(", "idxs_5_5", ")", "\n", "var_5_5_trans_err", "=", "np", ".", "var", "(", "np", ".", "array", "(", "Trans_Err", ")", "[", "idxs_5_5", "]", ")", "\n", "mean_5_5_itr", "=", "np", ".", "sum", "(", "np", ".", "array", "(", "ITR", ")", "[", "idxs_5_5", "]", ")", "/", "len", "(", "idxs_5_5", ")", "\n", "var_5_5_itr", "=", "np", ".", "var", "(", "np", ".", "array", "(", "ITR", ")", "[", "idxs_5_5", "]", ")", "\n", "mean_5_5_time", "=", "np", ".", "sum", "(", "np", ".", "array", "(", "TIME", ")", "[", "idxs_5_5", "]", ")", "/", "len", "(", "idxs_5_5", ")", "\n", "var_5_5_time", "=", "np", ".", "var", "(", "np", ".", "array", "(", "TIME", ")", "[", "idxs_5_5", "]", ")", "\n", "", "else", ":", "\n", "        ", "accuray_5_5", ",", "mean_5_5_rot_err", ",", "var_5_5_rot_err", ",", "mean_5_5_trans_err", ",", "var_5_5_trans_err", ",", "mean_5_5_itr", ",", "var_5_5_itr", ",", "mean_5_5_time", ",", "var_5_5_time", "=", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "\n", "\n", "", "if", "len", "(", "idxs_10_1", ")", "!=", "0", ":", "\n", "        ", "accuray_10_1", "=", "len", "(", "idxs_10_1", ")", "/", "(", "num_batches", "*", "1.0", ")", "\n", "mean_10_1_rot_err", "=", "np", ".", "sum", "(", "np", ".", "array", "(", "Rot_Err", ")", "[", "idxs_10_1", "]", ")", "/", "len", "(", "idxs_10_1", ")", "\n", "var_10_1_rot_err", "=", "np", ".", "var", "(", "np", ".", "array", "(", "Rot_Err", ")", "[", "idxs_10_1", "]", ")", "\n", "mean_10_1_trans_err", "=", "np", ".", "sum", "(", "np", ".", "array", "(", "Trans_Err", ")", "[", "idxs_10_1", "]", ")", "/", "len", "(", "idxs_10_1", ")", "\n", "var_10_1_trans_err", "=", "np", ".", "var", "(", "np", ".", "array", "(", "Trans_Err", ")", "[", "idxs_10_1", "]", ")", "\n", "mean_10_1_itr", "=", "np", ".", "sum", "(", "np", ".", "array", "(", "ITR", ")", "[", "idxs_10_1", "]", ")", "/", "len", "(", "idxs_10_1", ")", "\n", "var_10_1_itr", "=", "np", ".", "var", "(", "np", ".", "array", "(", "ITR", ")", "[", "idxs_10_1", "]", ")", "\n", "mean_10_1_time", "=", "np", ".", "sum", "(", "np", ".", "array", "(", "TIME", ")", "[", "idxs_10_1", "]", ")", "/", "len", "(", "idxs_10_1", ")", "\n", "var_10_1_time", "=", "np", ".", "var", "(", "np", ".", "array", "(", "TIME", ")", "[", "idxs_10_1", "]", ")", "\n", "", "else", ":", "\n", "        ", "accuray_10_1", ",", "mean_10_1_rot_err", ",", "var_10_1_rot_err", ",", "mean_10_1_trans_err", ",", "var_10_1_trans_err", ",", "mean_10_1_itr", ",", "var_10_1_itr", ",", "mean_10_1_time", ",", "var_10_1_time", "=", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "\n", "\n", "", "if", "len", "(", "idxs_20_2", ")", "!=", "0", ":", "\n", "# Find accuracies:", "\n", "        ", "accuray_20_2", "=", "len", "(", "idxs_20_2", ")", "/", "(", "num_batches", "*", "1.0", ")", "\n", "# Find mean rotation error.", "\n", "mean_20_2_rot_err", "=", "np", ".", "sum", "(", "np", ".", "array", "(", "Rot_Err", ")", "[", "idxs_20_2", "]", ")", "/", "len", "(", "idxs_20_2", ")", "\n", "# Find variance of rotation error.", "\n", "var_20_2_rot_err", "=", "np", ".", "var", "(", "np", ".", "array", "(", "Rot_Err", ")", "[", "idxs_20_2", "]", ")", "\n", "# Find mean translation error.", "\n", "mean_20_2_trans_err", "=", "np", ".", "sum", "(", "np", ".", "array", "(", "Trans_Err", ")", "[", "idxs_20_2", "]", ")", "/", "len", "(", "idxs_20_2", ")", "\n", "# Find variance of translation error.", "\n", "var_20_2_trans_err", "=", "np", ".", "var", "(", "np", ".", "array", "(", "Trans_Err", ")", "[", "idxs_20_2", "]", ")", "\n", "# Find mean iterations.", "\n", "mean_20_2_itr", "=", "np", ".", "sum", "(", "np", ".", "array", "(", "ITR", ")", "[", "idxs_20_2", "]", ")", "/", "len", "(", "idxs_20_2", ")", "\n", "# Find variance of iterations.", "\n", "var_20_2_itr", "=", "np", ".", "var", "(", "np", ".", "array", "(", "ITR", ")", "[", "idxs_20_2", "]", ")", "\n", "# Find mean time required.", "\n", "mean_20_2_time", "=", "np", ".", "sum", "(", "np", ".", "array", "(", "TIME", ")", "[", "idxs_20_2", "]", ")", "/", "len", "(", "idxs_20_2", ")", "\n", "# Find variance of time.", "\n", "var_20_2_time", "=", "np", ".", "var", "(", "np", ".", "array", "(", "TIME", ")", "[", "idxs_20_2", "]", ")", "\n", "", "else", ":", "\n", "        ", "accuray_20_2", ",", "mean_20_2_rot_err", ",", "var_20_2_rot_err", ",", "mean_20_2_trans_err", ",", "var_20_2_trans_err", ",", "mean_20_2_itr", ",", "var_20_2_itr", ",", "mean_20_2_time", ",", "var_20_2_time", "=", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "\n", "\n", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "LOG_DIR", ",", "filename", "+", "'.txt'", ")", ",", "'w'", ")", "as", "file", ":", "\n", "        ", "file", ".", "write", "(", "\"Mean of Time: {}\\n\"", ".", "format", "(", "TIME_mean", ")", ")", "\n", "\n", "file", ".", "write", "(", "\"\\n\"", ")", "\n", "\n", "file", ".", "write", "(", "\"###### 5 Degree & 0.05 Units ######\\n\"", ")", "\n", "file", ".", "write", "(", "\"Accuray: {}%\\n\"", ".", "format", "(", "accuray_5_5", "*", "100", ")", ")", "\n", "file", ".", "write", "(", "\"Mean rotational error: {}\\n\"", ".", "format", "(", "mean_5_5_rot_err", ")", ")", "\n", "file", ".", "write", "(", "\"Mean translation error: {}\\n\"", ".", "format", "(", "mean_5_5_trans_err", ")", ")", "\n", "file", ".", "write", "(", "\"Mean time: {}\\n\"", ".", "format", "(", "mean_5_5_time", ")", ")", "\n", "file", ".", "write", "(", "\"Var time: {}\\n\"", ".", "format", "(", "var_5_5_time", ")", ")", "\n", "file", ".", "write", "(", "\"Var translation error: {}\\n\"", ".", "format", "(", "var_5_5_trans_err", ")", ")", "\n", "file", ".", "write", "(", "\"Var rotational error: {}\\n\"", ".", "format", "(", "var_5_5_rot_err", ")", ")", "\n", "file", ".", "write", "(", "\"Mean Iterations: {}\\n\"", ".", "format", "(", "mean_5_5_itr", ")", ")", "\n", "file", ".", "write", "(", "\"Var Iterations: {}\\n\"", ".", "format", "(", "var_5_5_itr", ")", ")", "\n", "\n", "file", ".", "write", "(", "\"\\n\"", ")", "\n", "\n", "file", ".", "write", "(", "\"###### 10 Degree & 0.1 Units ######\\n\"", ")", "\n", "file", ".", "write", "(", "\"Accuray: {}%\\n\"", ".", "format", "(", "accuray_10_1", "*", "100", ")", ")", "\n", "file", ".", "write", "(", "\"Mean rotational error: {}\\n\"", ".", "format", "(", "mean_10_1_rot_err", ")", ")", "\n", "file", ".", "write", "(", "\"Mean translation error: {}\\n\"", ".", "format", "(", "mean_10_1_trans_err", ")", ")", "\n", "file", ".", "write", "(", "\"Mean time: {}\\n\"", ".", "format", "(", "mean_10_1_time", ")", ")", "\n", "file", ".", "write", "(", "\"Var time: {}\\n\"", ".", "format", "(", "var_10_1_time", ")", ")", "\n", "file", ".", "write", "(", "\"Var translation error: {}\\n\"", ".", "format", "(", "var_10_1_trans_err", ")", ")", "\n", "file", ".", "write", "(", "\"Var rotational error: {}\\n\"", ".", "format", "(", "var_10_1_rot_err", ")", ")", "\n", "file", ".", "write", "(", "\"Mean Iterations: {}\\n\"", ".", "format", "(", "mean_10_1_itr", ")", ")", "\n", "file", ".", "write", "(", "\"Var Iterations: {}\\n\"", ".", "format", "(", "var_10_1_itr", ")", ")", "\n", "\n", "file", ".", "write", "(", "\"\\n\"", ")", "\n", "\n", "file", ".", "write", "(", "\"###### 20 Degree & 0.2 Units ######\\n\"", ")", "\n", "file", ".", "write", "(", "\"Accuray: {}%\\n\"", ".", "format", "(", "accuray_20_2", "*", "100", ")", ")", "\n", "file", ".", "write", "(", "\"Mean rotational error: {}\\n\"", ".", "format", "(", "mean_20_2_rot_err", ")", ")", "\n", "file", ".", "write", "(", "\"Mean translation error: {}\\n\"", ".", "format", "(", "mean_20_2_trans_err", ")", ")", "\n", "file", ".", "write", "(", "\"Mean time: {}\\n\"", ".", "format", "(", "mean_20_2_time", ")", ")", "\n", "file", ".", "write", "(", "\"Var time: {}\\n\"", ".", "format", "(", "var_20_2_time", ")", ")", "\n", "file", ".", "write", "(", "\"Var translation error: {}\\n\"", ".", "format", "(", "var_20_2_trans_err", ")", ")", "\n", "file", ".", "write", "(", "\"Var rotational error: {}\\n\"", ".", "format", "(", "var_20_2_rot_err", ")", ")", "\n", "file", ".", "write", "(", "\"Mean Iterations: {}\\n\"", ".", "format", "(", "mean_20_2_itr", ")", ")", "\n", "file", ".", "write", "(", "\"Var Iterations: {}\\n\"", ".", "format", "(", "var_20_2_itr", ")", ")", "\n", "\n", "", "plt", ".", "hist", "(", "Rot_Err", ",", "np", ".", "arange", "(", "0", ",", "185", ",", "5", ")", ")", "\n", "plt", ".", "xlim", "(", "0", ",", "180", ")", "\n", "plt", ".", "savefig", "(", "os", ".", "path", ".", "join", "(", "LOG_DIR", ",", "'rot_err_hist.jpeg'", ")", ",", "dpi", "=", "500", ",", "quality", "=", "100", ")", "\n", "plt", ".", "figure", "(", ")", "\n", "plt", ".", "hist", "(", "Trans_Err", ",", "np", ".", "arange", "(", "0", ",", "1.01", ",", "0.01", ")", ")", "\n", "plt", ".", "xlim", "(", "0", ",", "1", ")", "\n", "plt", ".", "savefig", "(", "os", ".", "path", ".", "join", "(", "LOG_DIR", ",", "'trans_err_hist.jpeg'", ")", ",", "dpi", "=", "500", ",", "quality", "=", "100", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.helper.points_above_plane": [[1261, 1284], ["numpy.flip", "len", "numpy.argsort"], "function", ["None"], ["", "def", "points_above_plane", "(", "points", ",", "plane_coeff", ")", ":", "\n", "    ", "'''\n        points: nx3\n        plane_coeff: [a,b,c,d] of ax+by+cz+d=0\n    '''", "\n", "if", "len", "(", "plane_coeff", ")", "==", "3", ":", "\n", "        ", "a", "=", "plane_coeff", "[", "0", "]", "\n", "b", "=", "plane_coeff", "[", "1", "]", "\n", "c", "=", "plane_coeff", "[", "2", "]", "\n", "d", "=", "0", "\n", "", "else", ":", "\n", "        ", "a", "=", "plane_coeff", "[", "0", "]", "\n", "b", "=", "plane_coeff", "[", "1", "]", "\n", "c", "=", "plane_coeff", "[", "2", "]", "\n", "d", "=", "plane_coeff", "[", "3", "]", "\n", "\n", "\n", "", "distances", "=", "a", "*", "points", "[", ":", ",", "0", "]", "+", "b", "*", "points", "[", ":", ",", "1", "]", "+", "c", "*", "points", "[", ":", ",", "2", "]", "+", "d", "\n", "above_idx", "=", "np", ".", "flip", "(", "np", ".", "argsort", "(", "distances", ")", ")", "\n", "# print  (above_idx,\"above_idx\")", "\n", "above_points", "=", "points", "[", "above_idx", ",", ":", "]", "\n", "\n", "return", "above_points", ",", "above_idx", "\n", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.helper.display_partial_with_plane": [[1285, 1317], ["numpy.array", "matplotlib.figure", "plt.figure.add_subplot", "fig.add_subplot.scatter", "fig.add_subplot.scatter", "fig.add_subplot.plot", "fig.add_subplot.plot", "fig.add_subplot.set_xlabel", "fig.add_subplot.set_ylabel", "fig.add_subplot.set_zlabel", "fig.add_subplot.set_aspect", "matplotlib.show", "len"], "function", ["None"], ["", "def", "display_partial_with_plane", "(", "points", ",", "above_points", ",", "plane_coeff", ")", ":", "\n", "\n", "    ", "if", "len", "(", "plane_coeff", ")", "==", "3", ":", "\n", "        ", "a", "=", "plane_coeff", "[", "0", "]", "\n", "b", "=", "plane_coeff", "[", "1", "]", "\n", "c", "=", "plane_coeff", "[", "2", "]", "\n", "d", "=", "0", "\n", "", "else", ":", "\n", "        ", "a", "=", "plane_coeff", "[", "0", "]", "\n", "b", "=", "plane_coeff", "[", "1", "]", "\n", "c", "=", "plane_coeff", "[", "2", "]", "\n", "d", "=", "plane_coeff", "[", "3", "]", "\n", "\n", "", "p1", "=", "[", "1", ",", "1", ",", "-", "(", "a", "+", "b", "+", "d", ")", "/", "c", "]", "\n", "p2", "=", "[", "1", ",", "-", "1", ",", "-", "(", "a", "-", "b", "+", "d", ")", "/", "c", "]", "\n", "p3", "=", "[", "-", "1", ",", "-", "1", ",", "-", "(", "-", "a", "-", "b", "+", "d", ")", "/", "c", "]", "\n", "p4", "=", "[", "-", "1", ",", "1", ",", "-", "(", "-", "a", "+", "b", "+", "d", ")", "/", "c", "]", "\n", "corners", "=", "np", ".", "array", "(", "[", "p1", ",", "p2", ",", "p3", ",", "p4", ",", "p1", "]", ")", "\n", "\n", "fig", "=", "plt", ".", "figure", "(", ")", "\n", "ax", "=", "fig", ".", "add_subplot", "(", "111", ",", "projection", "=", "'3d'", ")", "\n", "\n", "ax", ".", "scatter", "(", "points", "[", ":", ",", "0", "]", ",", "points", "[", ":", ",", "1", "]", ",", "points", "[", ":", ",", "2", "]", ",", "c", "=", "'r'", ",", "s", "=", "20", ")", "\n", "ax", ".", "scatter", "(", "above_points", "[", ":", ",", "0", "]", ",", "above_points", "[", ":", ",", "1", "]", ",", "above_points", "[", ":", ",", "2", "]", ",", "c", "=", "'b'", ",", "s", "=", "10", ")", "\n", "ax", ".", "plot", "(", "corners", "[", ":", ",", "0", "]", ",", "corners", "[", ":", ",", "1", "]", ",", "corners", "[", ":", ",", "2", "]", ")", "\n", "ax", ".", "plot", "(", "[", "0", ",", "a", "*", "2", "]", ",", "[", "0", ",", "b", "*", "2", "]", ",", "[", "0", ",", "c", "*", "2", "]", ",", "c", "=", "'g'", ",", "linewidth", "=", "1", ")", "\n", "ax", ".", "set_xlabel", "(", "'X Label'", ")", "\n", "ax", ".", "set_ylabel", "(", "'Y Label'", ")", "\n", "ax", ".", "set_zlabel", "(", "'Z Label'", ")", "\n", "# ax.axis('equal')", "\n", "ax", ".", "set_aspect", "(", "'equal'", ")", "\n", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.helper.print_rounded": [[1318, 1320], ["print", "numpy.around"], "function", ["None"], ["", "def", "print_rounded", "(", "a", ",", "name", "=", "'name'", ",", "decimals", "=", "2", ")", ":", "\n", "    ", "print", "(", "np", ".", "around", "(", "a", ",", "decimals", "=", "decimals", ")", ",", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.model.EncoderDecoder.__init__": [[85, 92], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.model.DCP.__init__"], ["est_t_temp", "=", "transform", ".", "get_translation", "(", "pose_7d", ")", ".", "view", "(", "-", "1", ",", "1", ",", "3", ")", "\n", "\n", "# update translation matrix.", "\n", "est_t", "=", "torch", ".", "bmm", "(", "est_R_temp", ",", "est_t", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "+", "est_t_temp", "\n", "# update rotation matrix.", "\n", "est_R", "=", "torch", ".", "bmm", "(", "est_R_temp", ",", "est_R", ")", "\n", "\n", "source", "=", "transform", ".", "quaternion_transform", "(", "source", ",", "pose_7d", ")", "# Ps' = est_R*Ps + est_t", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.model.EncoderDecoder.forward": [[93, 97], ["model.EncoderDecoder.decode", "model.EncoderDecoder.encode"], "methods", ["home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.model.EncoderDecoder.decode", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.model.EncoderDecoder.encode"], ["return", "est_R", ",", "est_t", ",", "source", "\n", "\n", "", "def", "forward", "(", "self", ",", "template", ",", "source", ",", "max_iteration", "=", "8", ")", ":", "\n", "        ", "est_R", "=", "torch", ".", "eye", "(", "3", ")", ".", "to", "(", "template", ")", ".", "view", "(", "1", ",", "3", ",", "3", ")", ".", "expand", "(", "template", ".", "size", "(", "0", ")", ",", "3", ",", "3", ")", ".", "contiguous", "(", ")", "# (Bx3x3)", "\n", "est_t", "=", "torch", ".", "zeros", "(", "1", ",", "3", ")", ".", "to", "(", "template", ")", ".", "view", "(", "1", ",", "1", ",", "3", ")", ".", "expand", "(", "template", ".", "size", "(", "0", ")", ",", "1", ",", "3", ")", ".", "contiguous", "(", ")", "# (Bx1x3)", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.model.EncoderDecoder.encode": [[98, 100], ["model.EncoderDecoder.encoder", "model.EncoderDecoder.src_embed"], "methods", ["None"], ["template_features", "=", "self", ".", "pooling", "(", "self", ".", "feature_model", "(", "template", ")", ")", "\n", "\n", "if", "max_iteration", "==", "1", ":", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.model.EncoderDecoder.decode": [[101, 103], ["model.EncoderDecoder.generator", "model.EncoderDecoder.decoder", "model.EncoderDecoder.tgt_embed"], "methods", ["None"], ["            ", "est_R", ",", "est_t", ",", "source", "=", "self", ".", "spam", "(", "template_features", ",", "source", ",", "est_R", ",", "est_t", ")", "\n", "", "else", ":", "\n", "            ", "for", "i", "in", "range", "(", "max_iteration", ")", ":", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.model.Generator.__init__": [[106, 119], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.model.DCP.__init__"], ["", "", "result", "=", "{", "'est_R'", ":", "est_R", ",", "# source -> template", "\n", "'est_t'", ":", "est_t", ",", "# source -> template", "\n", "'est_T'", ":", "transform", ".", "convert2transformation", "(", "est_R", ",", "est_t", ")", ",", "# source -> template", "\n", "'r'", ":", "template_features", "-", "self", ".", "source_features", ",", "\n", "'transformed_source'", ":", "source", "}", "\n", "return", "result", "\n", "\n", "\n", "", "", "class", "MLPHead", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "super", "(", "MLPHead", ",", "self", ")", ".", "__init__", "(", ")", "\n", "emb_dims", "=", "args", ".", "emb_dims", "\n", "self", ".", "emb_dims", "=", "emb_dims", "\n", "self", ".", "nn", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "emb_dims", "*", "2", ",", "emb_dims", "//", "2", ")", ",", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.model.Generator.forward": [[120, 126], ["model.Generator.nn", "model.Generator.proj_rot", "model.Generator.proj_trans", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "model.Generator.max"], "methods", ["None"], ["nn", ".", "BatchNorm1d", "(", "emb_dims", "//", "2", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "emb_dims", "//", "2", ",", "emb_dims", "//", "4", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "emb_dims", "//", "4", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "emb_dims", "//", "4", ",", "emb_dims", "//", "8", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "emb_dims", "//", "8", ")", ",", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.model.Encoder.__init__": [[129, 133], ["torch.Module.__init__", "model.clones", "model.LayerNorm"], "methods", ["home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.model.DCP.__init__", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.model.clones"], ["self", ".", "proj_trans", "=", "nn", ".", "Linear", "(", "emb_dims", "//", "8", ",", "3", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "*", "input", ")", ":", "\n", "        ", "src_embedding", "=", "input", "[", "0", "]", "\n", "tgt_embedding", "=", "input", "[", "1", "]", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.model.Encoder.forward": [[134, 138], ["model.Encoder.norm", "layer"], "methods", ["None"], ["embedding", "=", "torch", ".", "cat", "(", "(", "src_embedding", ",", "tgt_embedding", ")", ",", "dim", "=", "1", ")", "\n", "embedding", "=", "self", ".", "nn", "(", "embedding", ".", "max", "(", "dim", "=", "-", "1", ")", "[", "0", "]", ")", "\n", "rotation", "=", "self", ".", "proj_rot", "(", "embedding", ")", "\n", "rotation", "=", "rotation", "/", "torch", ".", "norm", "(", "rotation", ",", "p", "=", "2", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "translation", "=", "self", ".", "proj_trans", "(", "embedding", ")", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.model.Decoder.__init__": [[143, 147], ["torch.Module.__init__", "model.clones", "model.LayerNorm"], "methods", ["home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.model.DCP.__init__", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.model.clones"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "super", "(", "SVDHead", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "emb_dims", "=", "args", ".", "emb_dims", "\n", "self", ".", "reflect", "=", "nn", ".", "Parameter", "(", "torch", ".", "eye", "(", "3", ")", ",", "requires_grad", "=", "False", ")", "\n", "self", ".", "reflect", "[", "2", ",", "2", "]", "=", "-", "1", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.model.Decoder.forward": [[148, 152], ["model.Decoder.norm", "layer"], "methods", ["None"], ["\n", "", "def", "forward", "(", "self", ",", "*", "input", ")", ":", "\n", "        ", "src_embedding", "=", "input", "[", "0", "]", "\n", "tgt_embedding", "=", "input", "[", "1", "]", "\n", "src", "=", "input", "[", "2", "]", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.model.LayerNorm.__init__": [[155, 160], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.model.DCP.__init__"], ["\n", "d_k", "=", "src_embedding", ".", "size", "(", "1", ")", "\n", "scores", "=", "torch", ".", "matmul", "(", "src_embedding", ".", "transpose", "(", "2", ",", "1", ")", ".", "contiguous", "(", ")", ",", "tgt_embedding", ")", "/", "math", ".", "sqrt", "(", "d_k", ")", "\n", "raw_scores", "=", "scores", "\n", "scores", "=", "torch", ".", "softmax", "(", "scores", ",", "dim", "=", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.model.LayerNorm.forward": [[161, 169], ["x.mean", "x.std"], "methods", ["None"], ["src_corr", "=", "torch", ".", "matmul", "(", "tgt", ",", "scores", ".", "transpose", "(", "2", ",", "1", ")", ".", "contiguous", "(", ")", ")", "\n", "\n", "src_centered", "=", "src", "-", "src", ".", "mean", "(", "dim", "=", "2", ",", "keepdim", "=", "True", ")", "\n", "\n", "src_corr_centered", "=", "src_corr", "-", "src_corr", ".", "mean", "(", "dim", "=", "2", ",", "keepdim", "=", "True", ")", "\n", "\n", "H", "=", "torch", ".", "matmul", "(", "src_centered", ",", "src_corr_centered", ".", "transpose", "(", "2", ",", "1", ")", ".", "contiguous", "(", ")", ")", "\n", "\n", "U", ",", "S", ",", "V", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.model.SublayerConnection.__init__": [[172, 175], ["torch.Module.__init__", "model.LayerNorm"], "methods", ["home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.model.DCP.__init__"], ["for", "i", "in", "range", "(", "src", ".", "size", "(", "0", ")", ")", ":", "\n", "            ", "u", ",", "s", ",", "v", "=", "torch", ".", "svd", "(", "H", "[", "i", "]", ")", "\n", "r", "=", "torch", ".", "matmul", "(", "v", ",", "u", ".", "transpose", "(", "1", ",", "0", ")", ".", "contiguous", "(", ")", ")", "\n", "r_det", "=", "torch", ".", "det", "(", "r", ")", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.model.SublayerConnection.forward": [[176, 178], ["sublayer", "model.SublayerConnection.norm"], "methods", ["None"], ["if", "r_det", "<", "0", ":", "\n", "                ", "u", ",", "s", ",", "v", "=", "torch", ".", "svd", "(", "H", "[", "i", "]", ")", "\n", "v", "=", "torch", ".", "matmul", "(", "v", ",", "self", ".", "reflect", ")", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.model.EncoderLayer.__init__": [[181, 187], ["torch.Module.__init__", "model.clones", "model.SublayerConnection"], "methods", ["home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.model.DCP.__init__", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.model.clones"], ["", "R", ".", "append", "(", "r", ")", "\n", "\n", "U", ".", "append", "(", "u", ")", "\n", "S", ".", "append", "(", "s", ")", "\n", "V", ".", "append", "(", "v", ")", "\n", "\n", "", "U", "=", "torch", ".", "stack", "(", "U", ",", "dim", "=", "0", ")", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.model.EncoderLayer.forward": [[188, 191], ["model.EncoderLayer.self_attn"], "methods", ["None"], ["V", "=", "torch", ".", "stack", "(", "V", ",", "dim", "=", "0", ")", "\n", "S", "=", "torch", ".", "stack", "(", "S", ",", "dim", "=", "0", ")", "\n", "R", "=", "torch", ".", "stack", "(", "R", ",", "dim", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.model.DecoderLayer.__init__": [[196, 203], ["torch.Module.__init__", "model.clones", "model.SublayerConnection"], "methods", ["home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.model.DCP.__init__", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.model.clones"], ["", "", "class", "PCRNet_corr", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "super", "(", "PCRNet_corr", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "emb_dims", "=", "args", ".", "emb_dims", "\n", "self", ".", "cycle", "=", "args", ".", "cycle", "\n", "self", ".", "emb_nn", "=", "PointNet", "(", "emb_dims", "=", "self", ".", "emb_dims", ")", "\n", "\n", "if", "args", ".", "head", "==", "'mlp'", ":", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.model.DecoderLayer.forward": [[204, 210], ["model.DecoderLayer.self_attn", "model.DecoderLayer.src_attn"], "methods", ["None"], ["            ", "self", ".", "head", "=", "MLPHead", "(", "args", "=", "args", ")", "\n", "", "elif", "args", ".", "head", "==", "'svd'", ":", "\n", "            ", "self", ".", "head", "=", "SVDHead", "(", "args", "=", "args", ")", "\n", "", "else", ":", "\n", "            ", "raise", "Exception", "(", "'Not implemented'", ")", "\n", "\n", "", "", "def", "forward", "(", "self", ",", "*", "input", ")", ":", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.model.MultiHeadedAttention.__init__": [[213, 223], ["torch.Module.__init__", "model.clones", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.model.DCP.__init__", "home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.model.clones"], ["src_embedding", "=", "self", ".", "emb_nn", "(", "src", ")", "\n", "tgt_embedding", "=", "self", ".", "emb_nn", "(", "tgt", ")", "\n", "\n", "rotation_ab", ",", "translation_ab", ",", "raw_scores", "=", "self", ".", "head", "(", "src_embedding", ",", "tgt_embedding", ",", "src", ",", "tgt", ")", "\n", "\n", "if", "self", ".", "cycle", ":", "\n", "            ", "rotation_ba", ",", "translation_ba", ",", "_", "=", "self", ".", "head", "(", "tgt_embedding", ",", "src_embedding", ",", "tgt", ",", "src", ")", "\n", "", "else", ":", "\n", "            ", "rotation_ba", "=", "rotation_ab", ".", "transpose", "(", "2", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "translation_ba", "=", "-", "torch", ".", "matmul", "(", "rotation_ba", ",", "translation_ab", ".", "unsqueeze", "(", "2", ")", ")", ".", "squeeze", "(", "2", ")", "\n", "", "return", "rotation_ab", ",", "translation_ab", ",", "rotation_ba", ",", "translation_ba", ",", "raw_scores", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.model.MultiHeadedAttention.forward": [[224, 244], ["query.size", "model.attention", "x.transpose().contiguous().view.transpose().contiguous().view.transpose().contiguous().view", "mask.unsqueeze.unsqueeze.unsqueeze", "l().view().transpose().contiguous", "zip", "x.transpose().contiguous().view.transpose().contiguous().view.transpose().contiguous", "l().view().transpose", "x.transpose().contiguous().view.transpose().contiguous().view.transpose", "l().view", "l"], "methods", ["home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.model.attention"], ["", "", ""]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.model.PositionwiseFeedForward.__init__": [[249, 255], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.model.DCP.__init__"], []], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.model.PositionwiseFeedForward.forward": [[256, 258], ["model.PositionwiseFeedForward.w_2", "model.PositionwiseFeedForward.norm().transpose().contiguous", "model.PositionwiseFeedForward.norm().transpose", "model.PositionwiseFeedForward.norm", "torch.relu().transpose().contiguous", "torch.relu().transpose().contiguous", "torch.relu().transpose().contiguous", "torch.relu().transpose", "torch.relu().transpose", "torch.relu().transpose", "torch.relu", "torch.relu", "torch.relu", "model.PositionwiseFeedForward.w_1"], "methods", ["None"], []], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.model.PointNet.__init__": [[261, 273], ["torch.Module.__init__", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d"], "methods", ["home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.model.DCP.__init__"], []], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.model.PointNet.forward": [[274, 281], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "model.PointNet.bn1", "model.PointNet.bn2", "model.PointNet.bn3", "model.PointNet.bn4", "model.PointNet.bn5", "model.PointNet.conv1", "model.PointNet.conv2", "model.PointNet.conv3", "model.PointNet.conv4", "model.PointNet.conv5"], "methods", ["None"], []], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.model.DGCNN.__init__": [[284, 296], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.model.DCP.__init__"], []], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.model.DGCNN.forward": [[297, 316], ["torch.relu().view.size", "model.get_graph_feature", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.relu().view", "torch.relu().view", "torch.relu().view", "model.DGCNN.bn1", "torch.relu().view.max", "model.DGCNN.bn2", "torch.relu().view.max", "model.DGCNN.bn3", "torch.relu().view.max", "model.DGCNN.bn4", "torch.relu().view.max", "model.DGCNN.conv1", "model.DGCNN.conv2", "model.DGCNN.conv3", "model.DGCNN.conv4", "torch.relu", "torch.relu", "torch.relu", "model.DGCNN.bn5", "model.DGCNN.conv5"], "methods", ["home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.model.get_graph_feature"], []], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.model.MLPHead.__init__": [[319, 334], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.model.DCP.__init__"], []], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.model.MLPHead.forward": [[335, 344], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "model.MLPHead.nn", "model.MLPHead.proj_rot", "model.MLPHead.proj_trans", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "util.quat2mat", "model.MLPHead.max"], "methods", ["home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.util.quat2mat"], []], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.model.Identity.__init__": [[347, 349], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.model.DCP.__init__"], []], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.model.Identity.forward": [[350, 352], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.model.Transformer.__init__": [[355, 370], ["torch.Module.__init__", "model.MultiHeadedAttention", "model.PositionwiseFeedForward", "model.EncoderDecoder", "model.Encoder", "model.Decoder", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "model.EncoderLayer", "model.DecoderLayer", "c", "c", "c", "c", "c"], "methods", ["home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.model.DCP.__init__"], []], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.model.Transformer.forward": [[371, 379], ["src.transpose().contiguous.transpose().contiguous.transpose().contiguous", "tgt.transpose().contiguous.transpose().contiguous.transpose().contiguous", "model.Transformer.model().transpose().contiguous", "model.Transformer.model().transpose().contiguous", "src.transpose().contiguous.transpose().contiguous.transpose", "tgt.transpose().contiguous.transpose().contiguous.transpose", "model.Transformer.model().transpose", "model.Transformer.model().transpose", "model.Transformer.model", "model.Transformer.model"], "methods", ["None"], []], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.model.SVDHead.__init__": [[382, 387], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye"], "methods", ["home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.model.DCP.__init__"], []], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.model.SVDHead.forward": [[389, 442], ["src.size", "src.size", "src_embedding.size", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "range", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "math.sqrt", "torch.softmax.transpose().contiguous", "torch.softmax.transpose().contiguous", "torch.softmax.transpose().contiguous", "src.mean", "torch.matmul.mean", "torch.matmul.mean", "torch.matmul.mean", "src_corr_centered.transpose().contiguous", "src.size", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.det", "torch.det", "torch.det", "torch.det", "torch.det", "torch.det", "torch.det", "torch.det", "torch.det", "torch.stack.append", "torch.stack.append", "torch.stack.append", "torch.stack.append", "torch.stack.append", "torch.stack.append", "torch.stack.append", "torch.stack.append", "torch.stack.append", "torch.stack.append", "torch.stack.append", "torch.stack.append", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul.mean", "torch.matmul.mean", "torch.matmul.mean", "t.view", "src_embedding.transpose().contiguous", "torch.svd", "torch.svd", "torch.svd", "torch.svd", "torch.svd", "torch.svd", "torch.svd", "torch.svd", "torch.svd", "u.transpose().contiguous", "torch.svd", "torch.svd", "torch.svd", "torch.svd", "torch.svd", "torch.svd", "torch.svd", "torch.svd", "torch.svd", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "src.mean", "torch.softmax.transpose", "torch.softmax.transpose", "torch.softmax.transpose", "src_corr_centered.transpose", "print", "torch.svd", "torch.svd", "torch.svd", "torch.svd", "torch.svd", "torch.svd", "torch.svd", "torch.svd", "torch.svd", "u.transpose().contiguous", "src_embedding.transpose", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "u.transpose", "u.transpose"], "methods", ["None"], []], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.model.DCP.__init__": [[445, 469], ["torch.Module.__init__", "model.PointNet", "model.Identity", "model.MLPHead", "model.DGCNN", "Exception", "model.Transformer", "Exception", "model.SVDHead", "Exception"], "methods", ["home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.model.DCP.__init__"], []], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.model.DCP.forward": [[470, 489], ["model.DCP.emb_nn", "model.DCP.emb_nn", "model.DCP.pointer", "model.DCP.head", "Exception", "model.DCP.head", "rotation_ab.transpose().contiguous", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "rotation_ab.transpose", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "translation_ab.unsqueeze"], "methods", ["None"], []], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.model.soft_binary": [[19, 22], ["torch.sin", "torch.sin", "torch.sin"], "function", ["None"], ["\n", "class", "PointNet", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "emb_dims", "=", "512", ")", ":", "\n", "        ", "super", "(", "PointNet", ",", "self", ")", ".", "__init__", "(", ")", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.model.clones": [[24, 26], ["torch.ModuleList", "copy.deepcopy", "range"], "function", ["None"], ["self", ".", "conv2", "=", "nn", ".", "Conv1d", "(", "64", ",", "64", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv1d", "(", "64", ",", "64", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv4", "=", "nn", ".", "Conv1d", "(", "64", ",", "128", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.model.attention": [[28, 35], ["query.size", "torch.softmax", "torch.matmul", "torch.matmul", "torch.matmul", "math.sqrt", "scores.masked_fill.masked_fill", "torch.matmul", "torch.matmul", "torch.matmul", "key.transpose().contiguous", "key.transpose"], "function", ["None"], ["self", ".", "bn1", "=", "nn", ".", "BatchNorm1d", "(", "64", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm1d", "(", "64", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm1d", "(", "64", ")", "\n", "self", ".", "bn4", "=", "nn", ".", "BatchNorm1d", "(", "128", ")", "\n", "self", ".", "bn5", "=", "nn", ".", "BatchNorm1d", "(", "emb_dims", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.model.nearest_neighbor": [[37, 44], ["distances.topk", "torch.matmul", "torch.matmul", "torch.matmul", "torch.sum", "torch.sum", "torch.sum", "src.transpose().contiguous", "torch.sum().transpose().contiguous", "torch.sum().transpose().contiguous", "torch.sum().transpose().contiguous", "src.transpose", "torch.sum().transpose", "torch.sum().transpose", "torch.sum().transpose", "torch.sum", "torch.sum", "torch.sum"], "function", ["None"], ["x", "=", "F", ".", "relu", "(", "self", ".", "bn3", "(", "self", ".", "conv3", "(", "x", ")", ")", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "bn4", "(", "self", ".", "conv4", "(", "x", ")", ")", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "bn5", "(", "self", ".", "conv5", "(", "x", ")", ")", ")", "\n", "return", "x", "\n", "\n", "\n", "", "", "class", "Pooling", "(", "torch", ".", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "pool_type", "=", "'max'", ")", ":", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.model.knn": [[46, 53], ["torch.sum", "torch.sum", "torch.sum", "torch.matmul", "torch.matmul", "torch.matmul", "torch.sum.transpose().contiguous", "pairwise_distance.topk", "x.transpose().contiguous", "torch.sum.transpose", "x.transpose"], "function", ["None"], ["super", "(", "Pooling", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "if", "self", ".", "pool_type", "==", "'max'", ":", "\n", "            ", "return", "torch", ".", "max", "(", "input", ",", "2", ")", "[", "0", "]", ".", "contiguous", "(", ")", "\n", "", "elif", "self", ".", "pool_type", "==", "'avg'", "or", "self", ".", "pool_type", "==", "'average'", ":", "\n", "            ", "return", "torch", ".", "mean", "(", "input", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.model.get_graph_feature": [[55, 77], ["model.knn", "idx.view.size", "torch.device", "torch.device", "torch.device", "idx.view.view", "x.view().repeat.size", "x.view().repeat.transpose().contiguous", "torch.cat().permute.view", "x.view().repeat.view().repeat", "torch.cat().permute", "torch.cat().permute", "torch.cat().permute", "torch.arange().view", "torch.arange().view", "torch.arange().view", "x.view().repeat.view", "x.view().repeat.transpose", "x.view().repeat.view", "torch.cat", "torch.cat", "torch.cat", "torch.arange", "torch.arange", "torch.arange"], "function", ["home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.model.knn"], ["", "", "", "class", "iPCRNet", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "feature_model", "=", "PointNet", "(", "emb_dims", "=", "1024", ")", ",", "droput", "=", "0.0", ",", "pooling", "=", "'max'", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "feature_model", "=", "feature_model", "\n", "self", ".", "pooling", "=", "Pooling", "(", "pooling", ")", "\n", "\n", "self", ".", "linear", "=", "[", "nn", ".", "Linear", "(", "self", ".", "feature_model", ".", "emb_dims", "*", "2", ",", "1024", ")", ",", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "1024", ",", "1024", ")", ",", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "1024", ",", "512", ")", ",", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "512", ",", "512", ")", ",", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "512", ",", "256", ")", ",", "nn", ".", "ReLU", "(", ")", "]", "\n", "\n", "if", "droput", ">", "0.0", ":", "\n", "            ", "self", ".", "linear", ".", "append", "(", "nn", ".", "Dropout", "(", "droput", ")", ")", "\n", "", "self", ".", "linear", ".", "append", "(", "nn", ".", "Linear", "(", "256", ",", "7", ")", ")", "\n", "\n", "self", ".", "linear", "=", "nn", ".", "Sequential", "(", "*", "self", ".", "linear", ")", "\n", "\n", "# Single Pass Alignment Module (SPAM)", "\n", "", "def", "spam", "(", "self", ",", "template_features", ",", "source", ",", "est_R", ",", "est_t", ")", ":", "\n", "        ", "batch_size", "=", "source", ".", "size", "(", "0", ")", "\n", "\n", "self", ".", "source_features", "=", "self", ".", "pooling", "(", "self", ".", "feature_model", "(", "source", ")", ")", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.util.quat2mat": [[18, 31], ["quat.size", "torch.stack().reshape", "torch.stack().reshape", "torch.stack().reshape", "torch.stack().reshape", "w.pow", "x.pow", "y.pow", "z.pow", "torch.stack", "torch.stack", "torch.stack", "torch.stack"], "function", ["None"], ["def", "quat2mat", "(", "quat", ")", ":", "\n", "    ", "x", ",", "y", ",", "z", ",", "w", "=", "quat", "[", ":", ",", "0", "]", ",", "quat", "[", ":", ",", "1", "]", ",", "quat", "[", ":", ",", "2", "]", ",", "quat", "[", ":", ",", "3", "]", "\n", "\n", "B", "=", "quat", ".", "size", "(", "0", ")", "\n", "\n", "w2", ",", "x2", ",", "y2", ",", "z2", "=", "w", ".", "pow", "(", "2", ")", ",", "x", ".", "pow", "(", "2", ")", ",", "y", ".", "pow", "(", "2", ")", ",", "z", ".", "pow", "(", "2", ")", "\n", "wx", ",", "wy", ",", "wz", "=", "w", "*", "x", ",", "w", "*", "y", ",", "w", "*", "z", "\n", "xy", ",", "xz", ",", "yz", "=", "x", "*", "y", ",", "x", "*", "z", ",", "y", "*", "z", "\n", "\n", "rotMat", "=", "torch", ".", "stack", "(", "[", "w2", "+", "x2", "-", "y2", "-", "z2", ",", "2", "*", "xy", "-", "2", "*", "wz", ",", "2", "*", "wy", "+", "2", "*", "xz", ",", "\n", "2", "*", "wz", "+", "2", "*", "xy", ",", "w2", "-", "x2", "+", "y2", "-", "z2", ",", "2", "*", "yz", "-", "2", "*", "wx", ",", "\n", "2", "*", "xz", "-", "2", "*", "wy", ",", "2", "*", "wx", "+", "2", "*", "yz", ",", "w2", "-", "x2", "-", "y2", "+", "z2", "]", ",", "dim", "=", "1", ")", ".", "reshape", "(", "B", ",", "3", ",", "3", ")", "\n", "return", "rotMat", "\n", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.util.transform_point_cloud": [[33, 39], ["len", "util.quat2mat", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "translation.unsqueeze", "rotation.size"], "function", ["home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.util.quat2mat"], ["", "def", "transform_point_cloud", "(", "point_cloud", ",", "rotation", ",", "translation", ")", ":", "\n", "    ", "if", "len", "(", "rotation", ".", "size", "(", ")", ")", "==", "2", ":", "\n", "        ", "rot_mat", "=", "quat2mat", "(", "rotation", ")", "\n", "", "else", ":", "\n", "        ", "rot_mat", "=", "rotation", "\n", "", "return", "torch", ".", "matmul", "(", "rot_mat", ",", "point_cloud", ")", "+", "translation", ".", "unsqueeze", "(", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.util.npmat2euler": [[41, 48], ["range", "numpy.asarray", "len", "scipy.spatial.transform.Rotation.from_dcm", "eulers.append", "Rotation.from_dcm.as_euler"], "function", ["None"], ["", "def", "npmat2euler", "(", "mats", ",", "seq", "=", "'zyx'", ")", ":", "\n", "    ", "eulers", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "mats", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "r", "=", "Rotation", ".", "from_dcm", "(", "mats", "[", "i", "]", ")", "\n", "eulers", ".", "append", "(", "r", ".", "as_euler", "(", "seq", ",", "degrees", "=", "True", ")", ")", "\n", "", "return", "np", ".", "asarray", "(", "eulers", ",", "dtype", "=", "'float32'", ")", "", "", ""]], "home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.util.error_euler_angles": [[49, 57], ["range", "util.npmat2euler", "scipy.spatial.transform.Rotation.from_euler().as_dcm", "mat_diff.append", "r_pred.dot", "scipy.spatial.transform.Rotation.from_euler"], "function", ["home.repos.pwc.inspect_result.tzodge_PCR-CMU.DCP_Code.util.npmat2euler"], []]}