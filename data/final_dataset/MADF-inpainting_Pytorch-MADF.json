{"home.repos.pwc.inspect_result.MADF-inpainting_Pytorch-MADF.None.normalization.PN.__init__": [[6, 20], ["torch.Module.__init__", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.MADF-inpainting_Pytorch-MADF.None.loss.InpaintingLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "norm_nc", ",", "label_nc", ",", "upsampling", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "upsampling", "=", "upsampling", "\n", "self", ".", "batch_norm", "=", "nn", ".", "BatchNorm2d", "(", "norm_nc", ",", "affine", "=", "False", ")", "\n", "\n", "nhidden", "=", "128", "\n", "\n", "self", ".", "mlp_shared", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "label_nc", ",", "nhidden", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", "\n", ")", "\n", "self", ".", "mlp_scale", "=", "nn", ".", "Conv2d", "(", "nhidden", ",", "norm_nc", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "mlp_bias", "=", "nn", ".", "Conv2d", "(", "nhidden", ",", "norm_nc", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MADF-inpainting_Pytorch-MADF.None.normalization.PN.forward": [[21, 33], ["normalization.PN.batch_norm", "torch.interpolate", "torch.interpolate", "torch.interpolate", "normalization.PN.mlp_shared", "normalization.PN.mlp_scale", "normalization.PN.mlp_bias", "x.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "pre_feat", ")", ":", "\n", "\n", "        ", "normalized", "=", "self", ".", "batch_norm", "(", "x", ")", "\n", "\n", "pre_feat", "=", "F", ".", "interpolate", "(", "pre_feat", ",", "size", "=", "x", ".", "size", "(", ")", "[", "2", ":", "]", ",", "mode", "=", "self", ".", "upsampling", ")", "\n", "actv", "=", "self", ".", "mlp_shared", "(", "pre_feat", ")", "\n", "scale", "=", "self", ".", "mlp_scale", "(", "actv", ")", "\n", "bias", "=", "self", ".", "mlp_bias", "(", "actv", ")", "\n", "\n", "out", "=", "normalized", "*", "(", "1", "+", "scale", ")", "+", "bias", "\n", "\n", "return", "out", "\n", "", "", ""]], "home.repos.pwc.inspect_result.MADF-inpainting_Pytorch-MADF.None.net.VGG16FeatureExtractor.__init__": [[12, 23], ["torch.Module.__init__", "torchvision.models.vgg16", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "range", "getattr().parameters", "getattr"], "methods", ["home.repos.pwc.inspect_result.MADF-inpainting_Pytorch-MADF.None.loss.InpaintingLoss.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "vgg16", "=", "models", ".", "vgg16", "(", "pretrained", "=", "True", ")", "\n", "self", ".", "enc_1", "=", "nn", ".", "Sequential", "(", "*", "vgg16", ".", "features", "[", ":", "5", "]", ")", "\n", "self", ".", "enc_2", "=", "nn", ".", "Sequential", "(", "*", "vgg16", ".", "features", "[", "5", ":", "10", "]", ")", "\n", "self", ".", "enc_3", "=", "nn", ".", "Sequential", "(", "*", "vgg16", ".", "features", "[", "10", ":", "17", "]", ")", "\n", "\n", "# fix the encoder", "\n", "for", "i", "in", "range", "(", "3", ")", ":", "\n", "            ", "for", "param", "in", "getattr", "(", "self", ",", "'enc_{:d}'", ".", "format", "(", "i", "+", "1", ")", ")", ".", "parameters", "(", ")", ":", "\n", "                ", "param", ".", "requires_grad", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.MADF-inpainting_Pytorch-MADF.None.net.VGG16FeatureExtractor.forward": [[24, 30], ["range", "getattr", "results.append", "getattr."], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "image", ")", ":", "\n", "        ", "results", "=", "[", "image", "]", "\n", "for", "i", "in", "range", "(", "3", ")", ":", "\n", "            ", "func", "=", "getattr", "(", "self", ",", "'enc_{:d}'", ".", "format", "(", "i", "+", "1", ")", ")", "\n", "results", ".", "append", "(", "func", "(", "results", "[", "-", "1", "]", ")", ")", "\n", "", "return", "results", "[", "1", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.MADF-inpainting_Pytorch-MADF.None.net.FilterGen.__init__": [[33, 45], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.MADF-inpainting_Pytorch-MADF.None.loss.InpaintingLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_ch", ",", "conv_in_ch", ",", "conv_out_ch", ",", "kernel_size", ",", "stride", ",", "padding", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "kernel_size", "=", "kernel_size", "\n", "self", ".", "conv_in_ch", "=", "conv_in_ch", "\n", "self", ".", "conv_out_ch", "=", "conv_out_ch", "\n", "nhidden", "=", "16", "\n", "self", ".", "conv", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_ch", ",", "nhidden", ",", "kernel_size", "=", "kernel_size", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", "\n", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "nhidden", ",", "conv_in_ch", "*", "kernel_size", "*", "kernel_size", "*", "conv_out_ch", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.MADF-inpainting_Pytorch-MADF.None.net.FilterGen.forward": [[46, 55], ["net.FilterGen.conv", "net.FilterGen.conv1", "filters.view.view.view", "filters.view.view.transpose", "filters.view.view.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "mask", "=", "self", ".", "conv", "(", "input", ")", "\n", "filters", "=", "self", ".", "conv1", "(", "mask", ")", "\n", "N", ",", "C", ",", "H", ",", "W", "=", "filters", ".", "shape", "\n", "filters", "=", "filters", ".", "view", "(", "(", "N", ",", "C", ",", "H", "*", "W", ")", ")", "\n", "#filters = torch.nn.functional.unfold(filters, (1, 1), dilation=1, padding=0, stride=1)", "\n", "filters", "=", "filters", ".", "transpose", "(", "1", ",", "2", ")", "\n", "filters", "=", "filters", ".", "view", "(", "(", "N", ",", "H", "*", "W", ",", "self", ".", "conv_in_ch", "*", "self", ".", "kernel_size", "*", "self", ".", "kernel_size", ",", "self", ".", "conv_out_ch", ")", ")", "\n", "return", "filters", ",", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.MADF-inpainting_Pytorch-MADF.None.net.ConvWithFilter.__init__": [[57, 74], ["torch.Module.__init__", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "normalization.PN", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU"], "methods", ["home.repos.pwc.inspect_result.MADF-inpainting_Pytorch-MADF.None.loss.InpaintingLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "out_ch", ",", "kernel_size", ",", "stride", "=", "0", ",", "padding", "=", "0", ",", "dilation", "=", "1", ",", "label_ch", "=", "0", ",", "bn", "=", "'batchnorm'", ",", "activ", "=", "'relu'", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "kernel_size", "=", "kernel_size", "\n", "self", ".", "padding", "=", "padding", "\n", "self", ".", "dilation", "=", "dilation", "\n", "self", ".", "stride", "=", "stride", "\n", "self", ".", "bn", "=", "bn", "\n", "self", ".", "activ", "=", "activ", "\n", "if", "bn", "==", "\"batchnorm\"", ":", "\n", "            ", "self", ".", "bn", "=", "nn", ".", "BatchNorm2d", "(", "out_ch", ")", "\n", "", "elif", "bn", "==", "\"PN\"", ":", "\n", "            ", "self", ".", "bn", "=", "PN", "(", "out_ch", ",", "label_ch", ",", "upsampling", ")", "\n", "\n", "", "if", "activ", "==", "'relu'", ":", "\n", "            ", "self", ".", "activation", "=", "nn", ".", "ReLU", "(", ")", "\n", "", "elif", "activ", "==", "'leaky'", ":", "\n", "            ", "self", ".", "activation", "=", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "0.2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MADF-inpainting_Pytorch-MADF.None.net.ConvWithFilter.forward": [[76, 97], ["int", "int", "torch.nn.functional.unfold", "torch.nn.functional.unfold", "torch.nn.functional.unfold", "torch.nn.functional.unfold", "torch.nn.functional.unfold", "torch.nn.functional.unfold", "torch.nn.functional.unfold", "torch.nn.functional.unfold", "torch.nn.functional.unfold", "torch.nn.functional.unfold.transpose().unsqueeze", "torch.nn.functional.unfold.transpose().unsqueeze", "torch.nn.functional.unfold.transpose().unsqueeze", "torch.nn.functional.unfold.transpose().unsqueeze.matmul", "result.view.view.squeeze", "result.view.view.transpose", "result.view.view.view", "hasattr", "hasattr", "net.ConvWithFilter.bn", "net.ConvWithFilter.activation", "torch.nn.functional.unfold.transpose", "torch.nn.functional.unfold.transpose", "torch.nn.functional.unfold.transpose", "hasattr", "net.ConvWithFilter.bn"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "features", ",", "filters", ")", ":", "\n", "        ", "N", ",", "C", ",", "in_H", ",", "in_W", "=", "features", ".", "shape", "\n", "out_H", "=", "(", "in_H", "-", "self", ".", "kernel_size", "+", "2", "*", "self", ".", "padding", ")", "/", "self", ".", "stride", "+", "1", "\n", "out_W", "=", "(", "in_W", "-", "self", ".", "kernel_size", "+", "2", "*", "self", ".", "padding", ")", "/", "self", ".", "stride", "+", "1", "\n", "out_H", "=", "int", "(", "out_H", ")", "\n", "out_W", "=", "int", "(", "out_W", ")", "\n", "features_unf", "=", "torch", ".", "nn", ".", "functional", ".", "unfold", "(", "features", ",", "(", "self", ".", "kernel_size", ",", "self", ".", "kernel_size", ")", ",", "dilation", "=", "self", ".", "dilation", ",", "padding", "=", "self", ".", "padding", ",", "stride", "=", "self", ".", "stride", ")", "\n", "features_", "=", "features_unf", ".", "transpose", "(", "1", ",", "2", ")", ".", "unsqueeze", "(", "2", ")", "\n", "result", "=", "features_", ".", "matmul", "(", "filters", ")", "\n", "result", "=", "result", ".", "squeeze", "(", "2", ")", "\n", "result", "=", "result", ".", "transpose", "(", "1", ",", "2", ")", "\n", "N", ",", "C", ",", "_", "=", "result", ".", "shape", "\n", "result", "=", "result", ".", "view", "(", "N", ",", "C", ",", "out_H", ",", "out_W", ")", "\n", "#result = torch.nn.functional.fold(result, (out_H, out_W), (1, 1))", "\n", "if", "hasattr", "(", "self", ",", "'bn'", ")", "and", "self", ".", "bn", "==", "\"batchnorm\"", ":", "\n", "            ", "out", "=", "self", ".", "bn", "(", "result", ")", "\n", "", "elif", "hasattr", "(", "self", ",", "'bn'", ")", "and", "self", ".", "bn", "==", "\"PN\"", ":", "\n", "            ", "out", "=", "self", ".", "bn", "(", "result", ",", "edge_map", ")", "\n", "", "if", "hasattr", "(", "self", ",", "'activation'", ")", ":", "\n", "            ", "out", "=", "self", ".", "activation", "(", "result", ")", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.MADF-inpainting_Pytorch-MADF.None.net.AttConv.__init__": [[100, 110], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.MADF-inpainting_Pytorch-MADF.None.loss.InpaintingLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "query_dim", ",", "key_dim", ",", "value_dim", ",", "activation", "=", "'relu'", ")", ":", "\n", "        ", "super", "(", "AttConv", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "activation", "is", "False", ":", "\n", "            ", "self", ".", "conv", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "query_dim", "+", "key_dim", ",", "query_dim", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "conv", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "query_dim", "+", "key_dim", ",", "query_dim", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.MADF-inpainting_Pytorch-MADF.None.net.AttConv.forward": [[112, 115], ["net.AttConv.conv", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "query", ",", "key", ")", ":", "\n", "        ", "out", "=", "key", "\n", "return", "self", ".", "conv", "(", "torch", ".", "cat", "(", "[", "out", ",", "query", "]", ",", "dim", "=", "1", ")", ")", "\n", "#return out", "\n"]], "home.repos.pwc.inspect_result.MADF-inpainting_Pytorch-MADF.None.net.DecActiv.__init__": [[119, 131], ["torch.Module.__init__", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "normalization.PN", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU"], "methods", ["home.repos.pwc.inspect_result.MADF-inpainting_Pytorch-MADF.None.loss.InpaintingLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_ch", ",", "out_ch", ",", "label_ch", "=", "0", ",", "bn", "=", "False", ",", "activ", "=", "'relu'", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "deconv", "=", "nn", ".", "ConvTranspose2d", "(", "in_ch", ",", "out_ch", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "\n", "self", ".", "bn_type", "=", "bn", "\n", "if", "bn", "==", "\"PN\"", ":", "\n", "            ", "self", ".", "bn", "=", "PN", "(", "out_ch", ",", "label_ch", ",", "upsampling", ")", "\n", "\n", "", "if", "activ", "==", "'relu'", ":", "\n", "            ", "self", ".", "activation", "=", "nn", ".", "ReLU", "(", ")", "\n", "", "elif", "activ", "==", "'leaky'", ":", "\n", "            ", "self", ".", "activation", "=", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "0.2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MADF-inpainting_Pytorch-MADF.None.net.DecActiv.forward": [[132, 139], ["net.DecActiv.deconv", "hasattr", "hasattr", "net.DecActiv.bn", "net.DecActiv.activation"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "input", ",", "edge_map", "=", "None", ")", ":", "\n", "        ", "h", "=", "self", ".", "deconv", "(", "input", ")", "\n", "if", "hasattr", "(", "self", ",", "'bn'", ")", "and", "self", ".", "bn_type", "==", "\"PN\"", ":", "\n", "            ", "h", "=", "self", ".", "bn", "(", "h", ",", "edge_map", ")", "\n", "", "if", "hasattr", "(", "self", ",", "'activation'", ")", ":", "\n", "            ", "h", "=", "self", ".", "activation", "(", "h", ")", "\n", "", "return", "h", "\n", "\n"]], "home.repos.pwc.inspect_result.MADF-inpainting_Pytorch-MADF.None.net.MADFNet.__init__": [[141, 218], ["torch.Module.__init__", "net.FilterGen", "net.FilterGen", "net.FilterGen", "net.FilterGen", "range", "net.ConvWithFilter", "net.ConvWithFilter", "net.ConvWithFilter", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "range", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "range", "net.AttConv", "net.AttConv", "net.AttConv", "net.AttConv", "setattr", "setattr", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Sequential", "torch.Sequential", "torch.Sequential", "setattr", "dconv.append", "dconv.append", "dconv.append", "setattr", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "setattr", "range", "net.DecActiv", "net.DecActiv", "net.DecActiv", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "range", "net.DecActiv", "net.DecActiv", "net.DecActiv", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "net.FilterGen", "net.ConvWithFilter", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Sequential", "torch.Sequential", "torch.Sequential", "net.AttConv", "setattr", "setattr", "net.DecActiv", "net.DecActiv"], "methods", ["home.repos.pwc.inspect_result.MADF-inpainting_Pytorch-MADF.None.loss.InpaintingLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "layer_size", "=", "7", ",", "input_channels", "=", "3", ",", "upsampling_mode", "=", "upsampling", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "upsampling_mode", "=", "upsampling_mode", "\n", "self", ".", "layer_size", "=", "layer_size", "\n", "self", ".", "n_refinement_D", "=", "args", ".", "n_refinement_D", "\n", "###Encoder", "\n", "self", ".", "filter_gen_1", "=", "FilterGen", "(", "in_ch", "=", "3", ",", "conv_in_ch", "=", "input_channels", "*", "2", ",", "conv_out_ch", "=", "16", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ")", "\n", "self", ".", "filter_gen_2", "=", "FilterGen", "(", "16", ",", "16", ",", "32", ",", "5", ",", "2", ",", "2", ")", "\n", "self", ".", "filter_gen_3", "=", "FilterGen", "(", "16", ",", "32", ",", "64", ",", "3", ",", "2", ",", "1", ")", "\n", "self", ".", "filter_gen_4", "=", "FilterGen", "(", "16", ",", "64", ",", "128", ",", "3", ",", "2", ",", "1", ")", "\n", "for", "i", "in", "range", "(", "5", ",", "layer_size", "+", "1", ")", ":", "\n", "            ", "setattr", "(", "self", ",", "\"filter_gen_{:d}\"", ".", "format", "(", "i", ")", ",", "FilterGen", "(", "16", ",", "128", ",", "128", ",", "3", ",", "2", ",", "1", ")", ")", "\n", "#self.filter_gen_5 = FilterGen(16, 128, 128, 3, 2, 1)", "\n", "#self.filter_gen_6 = FilterGen(16, 128, 128, 3, 2, 1)", "\n", "#self.filter_gen_7 = FilterGen(16, 128, 128, 3, 2, 1)", "\n", "", "self", ".", "enc_conv_1", "=", "ConvWithFilter", "(", "out_ch", "=", "16", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ")", "\n", "self", ".", "enc_conv_2", "=", "ConvWithFilter", "(", "32", ",", "5", ",", "2", ",", "2", ")", "\n", "self", ".", "enc_conv_3", "=", "ConvWithFilter", "(", "64", ",", "3", ",", "2", ",", "1", ")", "\n", "for", "i", "in", "range", "(", "4", ",", "layer_size", "+", "1", ")", ":", "\n", "            ", "setattr", "(", "self", ",", "\"enc_conv_{:d}\"", ".", "format", "(", "i", ")", ",", "ConvWithFilter", "(", "128", ",", "3", ",", "2", ",", "1", ")", ")", "\n", "\n", "#self.enc_conv_4 = ConvWithFilter(128, 3, 2, 1) ", "\n", "#self.enc_conv_5 = ConvWithFilter(128, 3, 2, 1) ", "\n", "#self.enc_conv_6 = ConvWithFilter(128, 3, 2, 1) ", "\n", "#self.enc_conv_7 = ConvWithFilter(128, 3, 2, 1)", "\n", "", "self", ".", "enc_up_1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "16", ",", "64", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ")", "\n", "self", ".", "enc_up_2", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "32", ",", "128", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ")", "\n", "self", ".", "enc_up_3", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "64", ",", "256", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ")", "\n", "for", "i", "in", "range", "(", "4", ",", "layer_size", "+", "1", ")", ":", "\n", "            ", "enc_up", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "128", ",", "512", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ")", "\n", "setattr", "(", "self", ",", "\"enc_up_{:d}\"", ".", "format", "(", "i", ")", ",", "enc_up", ")", "\n", "#######Encoder end", "\n", "#######Recovery Decoder", "\n", "", "for", "i", "in", "range", "(", "self", ".", "layer_size", ",", "4", ",", "-", "1", ")", ":", "\n", "            ", "name", "=", "'deconv_{:d}'", ".", "format", "(", "i", ")", "\n", "dconv", "=", "[", "]", "\n", "dconv", ".", "append", "(", "nn", ".", "ConvTranspose2d", "(", "512", ",", "512", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ")", "\n", "dconv", ".", "append", "(", "nn", ".", "BatchNorm2d", "(", "512", ")", ")", "\n", "dconv", ".", "append", "(", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "0.2", ")", ")", "\n", "setattr", "(", "self", ",", "name", ",", "nn", ".", "Sequential", "(", "*", "dconv", ")", ")", "\n", "", "self", ".", "deconv_4", "=", "nn", ".", "Sequential", "(", "nn", ".", "ConvTranspose2d", "(", "512", ",", "256", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "256", ")", ",", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "0.2", ")", ")", "\n", "self", ".", "deconv_3", "=", "nn", ".", "Sequential", "(", "nn", ".", "ConvTranspose2d", "(", "256", ",", "128", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "128", ")", ",", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "0.2", ")", ")", "\n", "self", ".", "deconv_2", "=", "nn", ".", "Sequential", "(", "nn", ".", "ConvTranspose2d", "(", "128", ",", "64", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "64", ")", ",", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "0.2", ")", ")", "\n", "self", ".", "deconv_1", "=", "nn", ".", "Sequential", "(", "nn", ".", "ConvTranspose2d", "(", "64", ",", "input_channels", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "layer_size", ",", "4", ",", "-", "1", ")", ":", "\n", "             ", "setattr", "(", "self", ",", "'att_conv_{:d}'", ".", "format", "(", "i", ")", ",", "AttConv", "(", "query_dim", "=", "512", ",", "key_dim", "=", "512", ",", "value_dim", "=", "512", ")", ")", "\n", "", "self", ".", "att_conv_4", "=", "AttConv", "(", "query_dim", "=", "256", ",", "key_dim", "=", "256", ",", "value_dim", "=", "256", ")", "\n", "self", ".", "att_conv_3", "=", "AttConv", "(", "query_dim", "=", "128", ",", "key_dim", "=", "128", ",", "value_dim", "=", "128", ")", "\n", "self", ".", "att_conv_2", "=", "AttConv", "(", "query_dim", "=", "64", ",", "key_dim", "=", "64", ",", "value_dim", "=", "64", ")", "\n", "self", ".", "att_conv_1", "=", "AttConv", "(", "query_dim", "=", "3", ",", "key_dim", "=", "6", ",", "value_dim", "=", "6", ",", "activation", "=", "False", ")", "\n", "if", "self", ".", "n_refinement_D", ">", "0", ":", "\n", "            ", "for", "i", "in", "range", "(", "self", ".", "layer_size", ",", "4", ",", "-", "1", ")", ":", "\n", "                ", "name", "=", "'dec_ref0_{:d}'", ".", "format", "(", "i", ")", "\n", "setattr", "(", "self", ",", "name", ",", "DecActiv", "(", "512", ",", "512", ",", "label_ch", "=", "512", ",", "bn", "=", "\"PN\"", ",", "activ", "=", "'leaky'", ")", ")", "\n", "", "self", ".", "dec_ref0_4", "=", "DecActiv", "(", "512", ",", "256", ",", "label_ch", "=", "256", ",", "bn", "=", "\"PN\"", ",", "activ", "=", "'leaky'", ")", "\n", "self", ".", "dec_ref0_3", "=", "DecActiv", "(", "256", ",", "128", ",", "label_ch", "=", "128", ",", "bn", "=", "\"PN\"", ",", "activ", "=", "'leaky'", ")", "\n", "self", ".", "dec_ref0_2", "=", "DecActiv", "(", "128", ",", "64", ",", "label_ch", "=", "64", ",", "bn", "=", "\"PN\"", ",", "activ", "=", "'leaky'", ")", "\n", "self", ".", "dec_ref0_1", "=", "nn", ".", "Conv2d", "(", "64", "+", "input_channels", "*", "3", ",", "input_channels", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "\n", "", "if", "self", ".", "n_refinement_D", ">", "1", ":", "\n", "            ", "for", "i", "in", "range", "(", "self", ".", "layer_size", ",", "4", ",", "-", "1", ")", ":", "\n", "                ", "name", "=", "'dec_ref1_{:d}'", ".", "format", "(", "i", ")", "\n", "setattr", "(", "self", ",", "name", ",", "DecActiv", "(", "512", ",", "512", ",", "label_ch", "=", "512", ",", "bn", "=", "\"PN\"", ",", "activ", "=", "'leaky'", ")", ")", "\n", "", "self", ".", "dec_ref1_4", "=", "DecActiv", "(", "512", ",", "256", ",", "label_ch", "=", "256", ",", "bn", "=", "\"PN\"", ",", "activ", "=", "'leaky'", ")", "\n", "self", ".", "dec_ref1_3", "=", "DecActiv", "(", "256", ",", "128", ",", "label_ch", "=", "128", ",", "bn", "=", "\"PN\"", ",", "activ", "=", "'leaky'", ")", "\n", "self", ".", "dec_ref1_2", "=", "DecActiv", "(", "128", ",", "64", ",", "label_ch", "=", "64", ",", "bn", "=", "\"PN\"", ",", "activ", "=", "'leaky'", ")", "\n", "self", ".", "dec_ref1_1", "=", "nn", ".", "Conv2d", "(", "64", "+", "input_channels", "*", "4", ",", "input_channels", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MADF-inpainting_Pytorch-MADF.None.net.MADFNet.forward": [[220, 264], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "range", "range", "getattr", "getattr", "getattr", "getattr", "getattr", "outputs.append", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "outputs.append", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "outputs.append", "getattr", "getattr", "getattr", "getattr"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "input", ",", "input_mask", ")", ":", "\n", "        ", "h_dict", "=", "{", "}", "# for the output of enc_N", "\n", "h_dict", "[", "'h_0'", "]", "=", "torch", ".", "cat", "(", "[", "input", ",", "input_mask", "]", ",", "dim", "=", "1", ")", "\n", "mask_pre", "=", "input_mask", "\n", "pre_conv", "=", "h_dict", "[", "'h_0'", "]", "\n", "h_key_prev", "=", "'h_0'", "\n", "for", "i", "in", "range", "(", "1", ",", "self", ".", "layer_size", "+", "1", ")", ":", "\n", "            ", "h_key", "=", "'h_{:d}'", ".", "format", "(", "i", ")", "\n", "filters", ",", "mask_res", "=", "getattr", "(", "self", ",", "'filter_gen_{:d}'", ".", "format", "(", "i", ")", ")", "(", "mask_pre", ")", "\n", "mask_pre", "=", "mask_res", "\n", "conv_res", "=", "getattr", "(", "self", ",", "\"enc_conv_{:d}\"", ".", "format", "(", "i", ")", ")", "(", "pre_conv", ",", "filters", ")", "\n", "h_dict", "[", "h_key", "]", "=", "getattr", "(", "self", ",", "\"enc_up_{:d}\"", ".", "format", "(", "i", ")", ")", "(", "conv_res", ")", "\n", "pre_conv", "=", "conv_res", "\n", "h_key_prev", "=", "h_key", "\n", "\n", "", "h_key", "=", "'h_{:d}'", ".", "format", "(", "self", ".", "layer_size", ")", "\n", "h", "=", "h_dict", "[", "h_key", "]", "\n", "\n", "h_att", "=", "h", "\n", "h_second", "=", "h", "\n", "outputs", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "layer_size", ",", "0", ",", "-", "1", ")", ":", "\n", "            ", "enc_h_key", "=", "'h_{:d}'", ".", "format", "(", "i", "-", "1", ")", "\n", "\n", "dconv", "=", "getattr", "(", "self", ",", "'deconv_{:d}'", ".", "format", "(", "i", ")", ")", "(", "h_att", ")", "\n", "h_att", "=", "getattr", "(", "self", ",", "'att_conv_{:d}'", ".", "format", "(", "i", ")", ")", "(", "dconv", ",", "h_dict", "[", "enc_h_key", "]", ")", "\n", "if", "i", "!=", "1", ":", "\n", "                ", "if", "self", ".", "n_refinement_D", ">", "0", ":", "\n", "                    ", "h_second", "=", "getattr", "(", "self", ",", "'dec_ref0_{:d}'", ".", "format", "(", "i", ")", ")", "(", "h_second", ",", "h_att", ")", "\n", "", "if", "self", ".", "n_refinement_D", ">", "1", ":", "\n", "                    ", "h", "=", "getattr", "(", "self", ",", "'dec_ref1_{:d}'", ".", "format", "(", "i", ")", ")", "(", "h", ",", "edge_map", "=", "h_second", ")", "\n", "", "", "else", ":", "\n", "                ", "outputs", ".", "append", "(", "h_att", ")", "\n", "if", "self", ".", "n_refinement_D", ">", "0", ":", "\n", "                    ", "h_second", "=", "F", ".", "interpolate", "(", "h_second", ",", "scale_factor", "=", "2", ",", "mode", "=", "upsampling", ")", "\n", "h_second", "=", "torch", ".", "cat", "(", "[", "h_second", ",", "h_att", ",", "h_dict", "[", "enc_h_key", "]", "]", ",", "dim", "=", "1", ")", "\n", "h_second", "=", "getattr", "(", "self", ",", "'dec_ref0_{:d}'", ".", "format", "(", "i", ")", ")", "(", "h_second", ")", "\n", "outputs", ".", "append", "(", "h_second", ")", "\n", "", "if", "self", ".", "n_refinement_D", ">", "1", ":", "\n", "                    ", "h", "=", "F", ".", "interpolate", "(", "h", ",", "scale_factor", "=", "2", ",", "mode", "=", "upsampling", ")", "\n", "h", "=", "torch", ".", "cat", "(", "[", "h", ",", "h_att", ",", "h_second", ",", "h_dict", "[", "enc_h_key", "]", "]", ",", "dim", "=", "1", ")", "\n", "h", "=", "getattr", "(", "self", ",", "'dec_ref1_{:d}'", ".", "format", "(", "i", ")", ")", "(", "h", ")", "\n", "outputs", ".", "append", "(", "h", ")", "\n", "", "", "", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.MADF-inpainting_Pytorch-MADF.None.net.MADFNet.train": [[265, 270], ["super().train"], "methods", ["home.repos.pwc.inspect_result.MADF-inpainting_Pytorch-MADF.None.net.MADFNet.train"], ["", "def", "train", "(", "self", ",", "mode", "=", "True", ")", ":", "\n", "        ", "\"\"\"\n        Override the default train() to freeze the BN parameters\n        \"\"\"", "\n", "super", "(", ")", ".", "train", "(", "mode", ")", "\n", "#if self.freeze_enc_bn:", "\n"]], "home.repos.pwc.inspect_result.MADF-inpainting_Pytorch-MADF.None.data_parallel.FullModel.__init__": [[5, 10], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.MADF-inpainting_Pytorch-MADF.None.loss.InpaintingLoss.__init__"], ["  ", "def", "__init__", "(", "self", ",", "model", ",", "extractor", ",", "args", ")", ":", "\n", "    ", "super", "(", "FullModel", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "model", "=", "model", "\n", "self", ".", "extractor", "=", "extractor", "\n", "self", ".", "args", "=", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.MADF-inpainting_Pytorch-MADF.None.data_parallel.FullModel.forward": [[11, 45], ["data_parallel.FullModel.model", "range", "data_parallel.FullModel.extractor", "len", "feats.append", "comp_feats.append", "len", "len", "data_parallel.FullModel.extractor", "data_parallel.FullModel.extractor"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "image", ",", "mask", ",", "gt", ")", ":", "\n", "#outputs = self.model(*inputs)", "\n", "    ", "input", "=", "image", "\n", "#output, dconv_h, dconv_h_second = self.model(image, mask)", "\n", "outputs", "=", "self", ".", "model", "(", "image", ",", "mask", ")", "\n", "\n", "feats", "=", "[", "]", "\n", "comp_feats", "=", "[", "]", "\n", "if", "self", ".", "args", ".", "use_incremental_supervision", ":", "\n", "        ", "if", "len", "(", "outputs", ")", "==", "1", ":", "\n", "            ", "start", "=", "0", "\n", "", "else", ":", "\n", "            ", "start", "=", "1", "\n", "", "", "else", ":", "\n", "        ", "start", "=", "len", "(", "outputs", ")", "-", "1", "\n", "\n", "", "for", "i", "in", "range", "(", "start", ",", "len", "(", "outputs", ")", ")", ":", "\n", "        ", "output", "=", "outputs", "[", "i", "]", "\n", "output_comp", "=", "mask", "*", "input", "+", "(", "1", "-", "mask", ")", "*", "output", "\n", "feats", ".", "append", "(", "self", ".", "extractor", "(", "output", ")", ")", "\n", "comp_feats", ".", "append", "(", "self", ".", "extractor", "(", "output_comp", ")", ")", "\n", "\n", "#output_comp = mask * input + (1 - mask) * output", "\n", "#output_comp_2 = mask * input + (1 - mask) * dconv_h_second", "\n", "#", "\n", "#feat_output_comp = self.extractor(output_comp)", "\n", "#feat_output_comp_2 = self.extractor(output_comp_2)", "\n", "#feat_output = self.extractor(output)", "\n", "#feat_output_2 = self.extractor(dconv_h_second)", "\n", "", "feat_gt", "=", "self", ".", "extractor", "(", "gt", ")", "\n", "\n", "\n", "#return output, dconv_h, dconv_h_second, feat_output_comp, feat_output_comp_2, feat_output, feat_output_2, feat_gt ", "\n", "return", "outputs", ",", "feats", ",", "comp_feats", ",", "feat_gt", "\n", "\n"]], "home.repos.pwc.inspect_result.MADF-inpainting_Pytorch-MADF.None.data_parallel.DataParallel_withLoss": [[47, 63], ["data_parallel.FullModel", "kwargs.keys", "kwargs.keys", "kwargs.keys", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel"], "function", ["None"], ["", "", "def", "DataParallel_withLoss", "(", "model", ",", "extractor", ",", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "model", "=", "FullModel", "(", "model", ",", "extractor", ",", "args", ")", "\n", "if", "'device_ids'", "in", "kwargs", ".", "keys", "(", ")", ":", "\n", "        ", "device_ids", "=", "kwargs", "[", "'device_ids'", "]", "\n", "", "else", ":", "\n", "        ", "device_ids", "=", "None", "\n", "", "if", "'output_device'", "in", "kwargs", ".", "keys", "(", ")", ":", "\n", "        ", "output_device", "=", "kwargs", "[", "'output_device'", "]", "\n", "", "else", ":", "\n", "        ", "output_device", "=", "None", "\n", "", "if", "'cuda'", "in", "kwargs", ".", "keys", "(", ")", ":", "\n", "        ", "cudaID", "=", "kwargs", "[", "'cuda'", "]", "\n", "model", "=", "torch", ".", "nn", ".", "DataParallel", "(", "model", ",", "device_ids", "=", "device_ids", ",", "output_device", "=", "output_device", ")", ".", "cuda", "(", "cudaID", ")", "\n", "", "else", ":", "\n", "        ", "model", "=", "torch", ".", "nn", ".", "DataParallel", "(", "model", ",", "device_ids", "=", "device_ids", ",", "output_device", "=", "output_device", ")", ".", "cuda", "(", ")", "\n", "", "return", "model", "\n", "", ""]], "home.repos.pwc.inspect_result.MADF-inpainting_Pytorch-MADF.None.train.InfiniteSampler.__init__": [[21, 23], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "num_samples", ")", ":", "\n", "        ", "self", ".", "num_samples", "=", "num_samples", "\n", "\n"]], "home.repos.pwc.inspect_result.MADF-inpainting_Pytorch-MADF.None.train.InfiniteSampler.__iter__": [[24, 26], ["iter", "train.InfiniteSampler.loop"], "methods", ["home.repos.pwc.inspect_result.MADF-inpainting_Pytorch-MADF.None.train.InfiniteSampler.loop"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "return", "iter", "(", "self", ".", "loop", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MADF-inpainting_Pytorch-MADF.None.train.InfiniteSampler.__len__": [[27, 29], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "2", "**", "31", "\n", "\n"]], "home.repos.pwc.inspect_result.MADF-inpainting_Pytorch-MADF.None.train.InfiniteSampler.loop": [[30, 40], ["numpy.random.permutation", "numpy.random.seed", "numpy.random.permutation"], "methods", ["None"], ["", "def", "loop", "(", "self", ")", ":", "\n", "        ", "i", "=", "0", "\n", "order", "=", "np", ".", "random", ".", "permutation", "(", "self", ".", "num_samples", ")", "\n", "while", "True", ":", "\n", "            ", "yield", "order", "[", "i", "]", "\n", "i", "+=", "1", "\n", "if", "i", ">=", "self", ".", "num_samples", ":", "\n", "                ", "np", ".", "random", ".", "seed", "(", ")", "\n", "order", "=", "np", ".", "random", ".", "permutation", "(", "self", ".", "num_samples", ")", "\n", "i", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.MADF-inpainting_Pytorch-MADF.None.dataset.trainset.__init__": [[25, 44], ["super().__init__", "os.walk", "os.walk", "len", "dataset.is_image_file", "dataset.is_mask_file", "os.path.dirname", "os.path.join", "dataset.trainset.paths.append", "os.path.dirname", "os.path.join", "dataset.trainset.mask_paths.append", "os.path.abspath", "os.path.abspath"], "methods", ["home.repos.pwc.inspect_result.MADF-inpainting_Pytorch-MADF.None.loss.InpaintingLoss.__init__", "home.repos.pwc.inspect_result.MADF-inpainting_Pytorch-MADF.None.dataset.is_image_file", "home.repos.pwc.inspect_result.MADF-inpainting_Pytorch-MADF.None.dataset.is_mask_file"], ["    ", "def", "__init__", "(", "self", ",", "img_root", ",", "mask_root", ",", "img_transform", ",", "mask_transform", ")", ":", "\n", "        ", "super", "(", "trainset", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "img_transform", "=", "img_transform", "\n", "self", ".", "mask_transform", "=", "mask_transform", "\n", "\n", "self", ".", "paths", "=", "[", "]", "\n", "for", "root", ",", "_", ",", "fnames", "in", "os", ".", "walk", "(", "os", ".", "path", ".", "dirname", "(", "os", ".", "path", ".", "abspath", "(", "__file__", ")", ")", "+", "'/'", "+", "img_root", ")", ":", "\n", "            ", "for", "fname", "in", "fnames", ":", "\n", "                ", "if", "is_image_file", "(", "fname", ")", ":", "\n", "                    ", "path", "=", "os", ".", "path", ".", "join", "(", "root", ",", "fname", ")", "\n", "self", ".", "paths", ".", "append", "(", "path", ")", "\n", "\n", "", "", "", "self", ".", "mask_paths", "=", "[", "]", "\n", "for", "root", ",", "_", ",", "fnames", "in", "os", ".", "walk", "(", "os", ".", "path", ".", "dirname", "(", "os", ".", "path", ".", "abspath", "(", "__file__", ")", ")", "+", "'/'", "+", "mask_root", ")", ":", "\n", "            ", "for", "fname", "in", "fnames", ":", "\n", "                ", "if", "is_mask_file", "(", "fname", ")", ":", "\n", "                    ", "path", "=", "os", ".", "path", ".", "join", "(", "root", ",", "fname", ")", "\n", "self", ".", "mask_paths", ".", "append", "(", "path", ")", "\n", "", "", "", "self", ".", "N_mask", "=", "len", "(", "self", ".", "mask_paths", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MADF-inpainting_Pytorch-MADF.None.dataset.trainset.__getitem__": [[45, 52], ["PIL.Image.open", "dataset.trainset.img_transform", "PIL.Image.open", "dataset.trainset.mask_transform", "dataset.trainset.convert", "dataset.trainset.convert", "random.randint"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "gt_img", "=", "Image", ".", "open", "(", "self", ".", "paths", "[", "index", "]", ")", "\n", "gt_img", "=", "self", ".", "img_transform", "(", "gt_img", ".", "convert", "(", "'RGB'", ")", ")", "\n", "\n", "mask", "=", "Image", ".", "open", "(", "self", ".", "mask_paths", "[", "random", ".", "randint", "(", "0", ",", "self", ".", "N_mask", "-", "1", ")", "]", ")", "\n", "mask", "=", "self", ".", "mask_transform", "(", "mask", ".", "convert", "(", "'RGB'", ")", ")", "\n", "return", "gt_img", "*", "mask", ",", "mask", ",", "gt_img", "\n", "\n"]], "home.repos.pwc.inspect_result.MADF-inpainting_Pytorch-MADF.None.dataset.trainset.__len__": [[53, 55], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "paths", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MADF-inpainting_Pytorch-MADF.None.dataset.testset.__init__": [[58, 69], ["super().__init__", "open", "dataset.testset.datas.append", "line.strip"], "methods", ["home.repos.pwc.inspect_result.MADF-inpainting_Pytorch-MADF.None.loss.InpaintingLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "list_file", ",", "img_transform", ",", "mask_transform", ",", "\n", "return_name", "=", "False", ")", ":", "\n", "        ", "super", "(", "testset", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "img_transform", "=", "img_transform", "\n", "self", ".", "mask_transform", "=", "mask_transform", "\n", "self", ".", "return_name", "=", "return_name", "\n", "\n", "self", ".", "datas", "=", "[", "]", "\n", "with", "open", "(", "list_file", ")", "as", "f", ":", "\n", "            ", "for", "line", "in", "f", ":", "\n", "                ", "self", ".", "datas", ".", "append", "(", "line", ".", "strip", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MADF-inpainting_Pytorch-MADF.None.dataset.testset.__getitem__": [[70, 83], ["PIL.Image.open", "dataset.testset.img_transform", "PIL.Image.open", "dataset.testset.mask_transform", "data.split", "data.split", "dataset.testset.convert", "dataset.testset.convert"], "methods", ["None"], ["", "", "", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "data", "=", "self", ".", "datas", "[", "index", "]", "\n", "gt_name", "=", "data", ".", "split", "(", "'\\t'", ")", "[", "0", "]", "\n", "mask_name", "=", "data", ".", "split", "(", "'\\t'", ")", "[", "1", "]", "\n", "gt_img", "=", "Image", ".", "open", "(", "gt_name", ")", "\n", "gt_img", "=", "self", ".", "img_transform", "(", "gt_img", ".", "convert", "(", "'RGB'", ")", ")", "\n", "\n", "mask", "=", "Image", ".", "open", "(", "mask_name", ")", "\n", "mask", "=", "self", ".", "mask_transform", "(", "mask", ".", "convert", "(", "'RGB'", ")", ")", "\n", "if", "self", ".", "return_name", ":", "\n", "            ", "return", "gt_img", "*", "mask", ",", "mask", ",", "gt_img", ",", "gt_name", "\n", "", "else", ":", "\n", "            ", "return", "gt_img", "*", "mask", ",", "mask", ",", "gt_img", "\n", "\n"]], "home.repos.pwc.inspect_result.MADF-inpainting_Pytorch-MADF.None.dataset.testset.__len__": [[84, 86], ["len"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "datas", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.MADF-inpainting_Pytorch-MADF.None.dataset.is_image_file": [[17, 19], ["any", "filename.endswith"], "function", ["None"], ["def", "is_image_file", "(", "filename", ")", ":", "\n", "    ", "return", "any", "(", "filename", ".", "endswith", "(", "extension", ")", "for", "extension", "in", "IMG_EXTENSIONS", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MADF-inpainting_Pytorch-MADF.None.dataset.is_mask_file": [[20, 22], ["any", "filename.endswith"], "function", ["None"], ["", "def", "is_mask_file", "(", "filename", ")", ":", "\n", "    ", "return", "any", "(", "filename", ".", "endswith", "(", "extension", ")", "for", "extension", "in", "MASK_EXTENSIONS", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MADF-inpainting_Pytorch-MADF.None.loss.InpaintingLoss.__init__": [[21, 26], ["torch.Module.__init__", "torch.L1Loss", "torch.L1Loss", "torch.L1Loss"], "methods", ["home.repos.pwc.inspect_result.MADF-inpainting_Pytorch-MADF.None.loss.InpaintingLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "extractor", ",", "args", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "l1", "=", "nn", ".", "L1Loss", "(", ")", "\n", "self", ".", "extractor", "=", "extractor", "\n", "self", ".", "args", "=", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.MADF-inpainting_Pytorch-MADF.None.loss.InpaintingLoss.forward": [[27, 85], ["range", "range", "range", "len", "print", "loss.InpaintingLoss.l1", "loss.InpaintingLoss.l1", "len", "print", "range", "len", "print", "range", "loss.total_variation_loss", "len", "len", "len", "loss.InpaintingLoss.l1", "loss.InpaintingLoss.l1", "len", "len", "loss.InpaintingLoss.l1", "loss.InpaintingLoss.l1", "len", "loss.gram_matrix", "loss.gram_matrix", "loss.gram_matrix", "loss.gram_matrix"], "methods", ["home.repos.pwc.inspect_result.MADF-inpainting_Pytorch-MADF.None.loss.total_variation_loss", "home.repos.pwc.inspect_result.MADF-inpainting_Pytorch-MADF.None.loss.gram_matrix", "home.repos.pwc.inspect_result.MADF-inpainting_Pytorch-MADF.None.loss.gram_matrix", "home.repos.pwc.inspect_result.MADF-inpainting_Pytorch-MADF.None.loss.gram_matrix", "home.repos.pwc.inspect_result.MADF-inpainting_Pytorch-MADF.None.loss.gram_matrix"], ["", "def", "forward", "(", "self", ",", "input", ",", "mask", ",", "outputs", ",", "gt", ",", "comp_feats", ",", "feats", ",", "feat_gt", ")", ":", "\n", "\n", "        ", "loss_dict", "=", "{", "}", "\n", "loss_dict", "[", "'hole'", "]", "=", "0.0", "\n", "loss_dict", "[", "'valid'", "]", "=", "0.0", "\n", "loss_dict", "[", "'prc'", "]", "=", "0.0", "\n", "loss_dict", "[", "'style'", "]", "=", "0.0", "\n", "loss_dict", "[", "'tv'", "]", "=", "0.0", "\n", "if", "self", ".", "args", ".", "use_incremental_supervision", ":", "\n", "            ", "start", "=", "0", "\n", "", "else", ":", "\n", "            ", "start", "=", "len", "(", "outputs", ")", "-", "1", "\n", "", "for", "i", "in", "range", "(", "start", ",", "len", "(", "outputs", ")", ")", ":", "\n", "            ", "print", "(", "'l1 loss:'", ",", "i", ")", "\n", "output", "=", "outputs", "[", "i", "]", "\n", "loss_dict", "[", "'hole'", "]", "+=", "self", ".", "l1", "(", "(", "1", "-", "mask", ")", "*", "output", ",", "(", "1", "-", "mask", ")", "*", "gt", ")", "\n", "loss_dict", "[", "'valid'", "]", "+=", "self", ".", "l1", "(", "mask", "*", "output", ",", "mask", "*", "gt", ")", "\n", "\n", "", "if", "self", ".", "args", ".", "use_incremental_supervision", ":", "\n", "            ", "if", "len", "(", "outputs", ")", "==", "1", ":", "\n", "                ", "start", "=", "0", "\n", "", "else", ":", "\n", "                ", "start", "=", "1", "\n", "", "", "else", ":", "\n", "            ", "start", "=", "len", "(", "outputs", ")", "-", "1", "\n", "\n", "", "for", "i", "in", "range", "(", "start", ",", "len", "(", "outputs", ")", ")", ":", "\n", "            ", "feat_output", "=", "feats", "[", "i", "-", "start", "]", "\n", "feat_output_comp", "=", "comp_feats", "[", "i", "-", "start", "]", "\n", "print", "(", "\"prc loss:\"", ",", "i", ")", "\n", "for", "j", "in", "range", "(", "3", ")", ":", "\n", "                ", "loss_dict", "[", "'prc'", "]", "+=", "self", ".", "l1", "(", "feat_output", "[", "j", "]", ",", "feat_gt", "[", "j", "]", ")", "\n", "loss_dict", "[", "'prc'", "]", "+=", "self", ".", "l1", "(", "feat_output_comp", "[", "j", "]", ",", "feat_gt", "[", "j", "]", ")", "\n", "\n", "", "", "if", "self", ".", "args", ".", "use_incremental_supervision", ":", "\n", "            ", "if", "len", "(", "outputs", ")", "==", "1", ":", "\n", "                ", "start", "=", "0", "\n", "", "elif", "len", "(", "outputs", ")", "==", "2", ":", "\n", "                ", "start", "=", "1", "\n", "", "else", ":", "\n", "                ", "start", "=", "2", "\n", "", "", "else", ":", "\n", "            ", "start", "=", "len", "(", "outputs", ")", "-", "1", "\n", "\n", "", "for", "i", "in", "range", "(", "start", ",", "len", "(", "outputs", ")", ")", ":", "\n", "            ", "print", "(", "\"style loss:\"", ",", "i", ")", "\n", "output_comp", "=", "mask", "*", "input", "+", "(", "1", "-", "mask", ")", "*", "outputs", "[", "i", "]", "\n", "feat_output", "=", "feats", "[", "i", "-", "start", "]", "\n", "feat_output_comp", "=", "comp_feats", "[", "i", "-", "start", "]", "\n", "for", "j", "in", "range", "(", "3", ")", ":", "\n", "                ", "loss_dict", "[", "'style'", "]", "+=", "self", ".", "l1", "(", "gram_matrix", "(", "feat_output", "[", "j", "]", ")", ",", "\n", "gram_matrix", "(", "feat_gt", "[", "j", "]", ")", ")", "\n", "loss_dict", "[", "'style'", "]", "+=", "self", ".", "l1", "(", "gram_matrix", "(", "feat_output_comp", "[", "j", "]", ")", ",", "\n", "gram_matrix", "(", "feat_gt", "[", "j", "]", ")", ")", "\n", "\n", "", "loss_dict", "[", "'tv'", "]", "+=", "total_variation_loss", "(", "output_comp", ")", "\n", "\n", "", "return", "loss_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.MADF-inpainting_Pytorch-MADF.None.loss.gram_matrix": [[6, 12], ["feat.view.size", "feat.view.view", "feat.view.transpose", "torch.bmm", "torch.bmm", "torch.bmm"], "function", ["None"], ["def", "gram_matrix", "(", "feat", ")", ":", "\n", "    ", "(", "b", ",", "ch", ",", "h", ",", "w", ")", "=", "feat", ".", "size", "(", ")", "\n", "feat", "=", "feat", ".", "view", "(", "b", ",", "ch", ",", "h", "*", "w", ")", "\n", "feat_t", "=", "feat", ".", "transpose", "(", "1", ",", "2", ")", "\n", "gram", "=", "torch", ".", "bmm", "(", "feat", ",", "feat_t", ")", "/", "(", "ch", "*", "h", "*", "w", ")", "\n", "return", "gram", "\n", "\n"]], "home.repos.pwc.inspect_result.MADF-inpainting_Pytorch-MADF.None.loss.total_variation_loss": [[14, 18], ["torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs"], "function", ["None"], ["", "def", "total_variation_loss", "(", "image", ")", ":", "\n", "    ", "loss", "=", "torch", ".", "mean", "(", "torch", ".", "abs", "(", "image", "[", ":", ",", ":", ",", ":", ",", ":", "-", "1", "]", "-", "image", "[", ":", ",", ":", ",", ":", ",", "1", ":", "]", ")", ")", "+", "torch", ".", "mean", "(", "torch", ".", "abs", "(", "image", "[", ":", ",", ":", ",", ":", "-", "1", ",", ":", "]", "-", "image", "[", ":", ",", ":", ",", "1", ":", ",", ":", "]", ")", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.MADF-inpainting_Pytorch-MADF.None.test.evaluate": [[24, 40], ["len", "range", "zip", "torch.stack", "torch.stack", "torch.stack", "outputs[].to", "[].replace", "torchvision.utils.save_image", "torchvision.utils.save_image", "torch.no_grad", "model", "torch.device", "util.image.unnormalize", "util.image.unnormalize", "torch.stack.to", "torch.stack.to", "[].replace.split"], "function", ["home.repos.pwc.inspect_result.MADF-inpainting_Pytorch-MADF.util.image.unnormalize", "home.repos.pwc.inspect_result.MADF-inpainting_Pytorch-MADF.util.image.unnormalize"], ["def", "evaluate", "(", "model", ",", "dataset", ",", "device", ",", "path", ")", ":", "\n", "    ", "num", "=", "len", "(", "dataset", ")", "\n", "for", "i", "in", "range", "(", "num", ")", ":", "\n", "        ", "image", ",", "mask", ",", "gt", ",", "name", "=", "zip", "(", "*", "[", "dataset", "[", "i", "]", "]", ")", "\n", "image", "=", "torch", ".", "stack", "(", "image", ")", "\n", "mask", "=", "torch", ".", "stack", "(", "mask", ")", "\n", "gt", "=", "torch", ".", "stack", "(", "gt", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "outputs", "=", "model", "(", "image", ".", "to", "(", "device", ")", ",", "mask", ".", "to", "(", "device", ")", ")", "\n", "", "output", "=", "outputs", "[", "-", "1", "]", ".", "to", "(", "torch", ".", "device", "(", "'cpu'", ")", ")", "\n", "output_comp", "=", "mask", "*", "image", "+", "(", "1", "-", "mask", ")", "*", "output", "\n", "\n", "name", "=", "name", "[", "0", "]", "\n", "name", "=", "name", ".", "split", "(", "\"/\"", ")", "[", "-", "1", "]", ".", "replace", "(", "'.jpg'", ",", "'.png'", ")", "\n", "save_image", "(", "unnormalize", "(", "output_comp", ")", ",", "path", "+", "'/'", "+", "name", ")", "\n", "save_image", "(", "unnormalize", "(", "gt", ")", ",", "\"gt_\"", "+", "path", "+", "'/'", "+", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MADF-inpainting_Pytorch-MADF.None.evaluation.evaluate": [[8, 27], ["zip", "torch.stack", "torch.stack", "torch.stack", "output.to.to", "torchvision.utils.make_grid", "torchvision.utils.save_image", "torch.no_grad", "model", "torch.device", "torch.cat", "torch.stack.to", "torch.stack.to", "torch.stack.to", "util.image.unnormalize", "util.image.unnormalize", "util.image.unnormalize", "util.image.unnormalize", "range"], "function", ["home.repos.pwc.inspect_result.MADF-inpainting_Pytorch-MADF.util.image.unnormalize", "home.repos.pwc.inspect_result.MADF-inpainting_Pytorch-MADF.util.image.unnormalize", "home.repos.pwc.inspect_result.MADF-inpainting_Pytorch-MADF.util.image.unnormalize", "home.repos.pwc.inspect_result.MADF-inpainting_Pytorch-MADF.util.image.unnormalize"], ["def", "evaluate", "(", "model", ",", "dataset", ",", "device", ",", "filename", ")", ":", "\n", "    ", "image", ",", "mask", ",", "gt", "=", "zip", "(", "*", "[", "dataset", "[", "i", "]", "for", "i", "in", "range", "(", "8", ")", "]", ")", "\n", "image", "=", "torch", ".", "stack", "(", "image", ")", "\n", "mask", "=", "torch", ".", "stack", "(", "mask", ")", "\n", "gt", "=", "torch", ".", "stack", "(", "gt", ")", "\n", "vgg_imgs", "=", "[", "]", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "outputs", "=", "model", "(", "image", ".", "to", "(", "device", ")", ",", "mask", ".", "to", "(", "device", ")", ",", "gt", ".", "to", "(", "device", ")", ")", "\n", "\n", "", "output", "=", "outputs", "[", "0", "]", "[", "-", "1", "]", "\n", "output", "=", "output", ".", "to", "(", "torch", ".", "device", "(", "'cpu'", ")", ")", "\n", "output_comp", "=", "mask", "*", "image", "+", "(", "1", "-", "mask", ")", "*", "output", "\n", "\n", "grid", "=", "make_grid", "(", "\n", "torch", ".", "cat", "(", "(", "unnormalize", "(", "image", ")", ",", "mask", ",", "unnormalize", "(", "output", ")", ",", "\n", "unnormalize", "(", "output_comp", ")", ",", "unnormalize", "(", "gt", ")", ")", ",", "dim", "=", "0", ")", ")", "\n", "\n", "\n", "save_image", "(", "grid", ",", "filename", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MADF-inpainting_Pytorch-MADF.util.io.get_state_dict_on_cpu": [[5, 11], ["torch.device", "torch.device", "obj.state_dict", "obj.state_dict.keys", "state_dict[].to"], "function", ["None"], ["def", "get_state_dict_on_cpu", "(", "obj", ")", ":", "\n", "    ", "cpu_device", "=", "torch", ".", "device", "(", "'cpu'", ")", "\n", "state_dict", "=", "obj", ".", "state_dict", "(", ")", "\n", "for", "key", "in", "state_dict", ".", "keys", "(", ")", ":", "\n", "        ", "state_dict", "[", "key", "]", "=", "state_dict", "[", "key", "]", ".", "to", "(", "cpu_device", ")", "\n", "", "return", "state_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.MADF-inpainting_Pytorch-MADF.util.io.save_ckpt": [[13, 21], ["torch.save", "torch.save", "io.get_state_dict_on_cpu", "optimizer.state_dict"], "function", ["home.repos.pwc.inspect_result.MADF-inpainting_Pytorch-MADF.util.io.get_state_dict_on_cpu"], ["", "def", "save_ckpt", "(", "ckpt_name", ",", "models", ",", "optimizers", ",", "n_iter", ")", ":", "\n", "    ", "ckpt_dict", "=", "{", "'n_iter'", ":", "n_iter", "}", "\n", "for", "prefix", ",", "model", "in", "models", ":", "\n", "        ", "ckpt_dict", "[", "prefix", "]", "=", "get_state_dict_on_cpu", "(", "model", ")", "\n", "\n", "", "for", "prefix", ",", "optimizer", "in", "optimizers", ":", "\n", "        ", "ckpt_dict", "[", "prefix", "]", "=", "optimizer", ".", "state_dict", "(", ")", "\n", "", "torch", ".", "save", "(", "ckpt_dict", ",", "ckpt_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MADF-inpainting_Pytorch-MADF.util.io.load_ckpt": [[23, 36], ["torch.load", "torch.load", "isinstance", "model.load_state_dict", "optimizer.load_state_dict", "key.replace"], "function", ["None"], ["", "def", "load_ckpt", "(", "ckpt_name", ",", "models", ",", "optimizers", "=", "None", ")", ":", "\n", "    ", "ckpt_dict", "=", "torch", ".", "load", "(", "ckpt_name", ")", "\n", "pretrained_dict", "=", "{", "}", "\n", "for", "key", "in", "ckpt_dict", "[", "'model'", "]", ":", "\n", "        ", "pretrained_dict", "[", "key", ".", "replace", "(", "'module.model.'", ",", "''", ")", "]", "=", "ckpt_dict", "[", "'model'", "]", "[", "key", "]", "\n", "", "for", "prefix", ",", "model", "in", "models", ":", "\n", "        ", "assert", "isinstance", "(", "model", ",", "nn", ".", "Module", ")", "\n", "#model.load_state_dict(ckpt_dict[prefix], strict=False)", "\n", "model", ".", "load_state_dict", "(", "pretrained_dict", ",", "strict", "=", "False", ")", "\n", "", "if", "optimizers", "is", "not", "None", ":", "\n", "        ", "for", "prefix", ",", "optimizer", "in", "optimizers", ":", "\n", "            ", "optimizer", ".", "load_state_dict", "(", "ckpt_dict", "[", "prefix", "]", ")", "\n", "", "", "return", "ckpt_dict", "[", "'n_iter'", "]", "\n", "", ""]], "home.repos.pwc.inspect_result.MADF-inpainting_Pytorch-MADF.util.image.unnormalize": [[5, 10], ["x.transpose.transpose", "x.transpose.transpose", "torch.Tensor", "torch.Tensor"], "function", ["None"], ["def", "unnormalize", "(", "x", ")", ":", "\n", "    ", "x", "=", "x", ".", "transpose", "(", "1", ",", "3", ")", "\n", "x", "=", "x", "*", "torch", ".", "Tensor", "(", "opt", ".", "STD", ")", "+", "torch", ".", "Tensor", "(", "opt", ".", "MEAN", ")", "\n", "x", "=", "x", ".", "transpose", "(", "1", ",", "3", ")", "\n", "return", "x", "\n", "", ""]]}