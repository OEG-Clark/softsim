{"home.repos.pwc.inspect_result.project-monai_research-contributions.lamp-automated-model-parallelism.test_unet_pipe.TestUNETPipe.test_shape": [[38, 48], ["parameterized.parameterized.parameterized.expand", "unet_pipe.UNetPipe", "torch.cuda.is_available", "net.to.to.eval", "net.to.to.to", "input_data.to.to.to", "torch.no_grad", "net.to.to.forward", "test_unet_pipe.TestUNETPipe.assertEqual", "torch.device", "torch.device", "input_data.to.to.float"], "methods", ["home.repos.pwc.inspect_result.project-monai_research-contributions.networks.unetr.UNETR.forward"], ["    ", "@", "parameterized", ".", "expand", "(", "TEST_CASES", ")", "\n", "def", "test_shape", "(", "self", ",", "input_param", ",", "input_data", ",", "expected_shape", ")", ":", "\n", "        ", "net", "=", "UNetPipe", "(", "**", "input_param", ")", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "            ", "net", "=", "net", ".", "to", "(", "torch", ".", "device", "(", "\"cuda\"", ")", ")", "\n", "input_data", "=", "input_data", ".", "to", "(", "torch", ".", "device", "(", "\"cuda\"", ")", ")", "\n", "", "net", ".", "eval", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "result", "=", "net", ".", "forward", "(", "input_data", ".", "float", "(", ")", ")", "\n", "self", ".", "assertEqual", "(", "result", ".", "shape", ",", "expected_shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.project-monai_research-contributions.lamp-automated-model-parallelism.unet_pipe.Stash.forward": [[25, 28], ["torchgpipe.skip.stash"], "methods", ["None"], ["    ", "def", "forward", "(", "self", ",", "input", ":", "torch", ".", "Tensor", ")", ":", "\n", "        ", "yield", "stash", "(", "\"skip\"", ",", "input", ")", "\n", "return", "input", "# using yield together with return", "\n", "\n"]], "home.repos.pwc.inspect_result.project-monai_research-contributions.lamp-automated-model-parallelism.unet_pipe.PopCat.forward": [[32, 37], ["torchgpipe.skip.pop", "torch.cat"], "methods", ["None"], ["    ", "def", "forward", "(", "self", ",", "input", ":", "torch", ".", "Tensor", ")", ":", "\n", "        ", "skip", "=", "yield", "pop", "(", "\"skip\"", ")", "\n", "if", "skip", "is", "not", "None", ":", "\n", "            ", "input", "=", "torch", ".", "cat", "(", "[", "input", ",", "skip", "]", ",", "dim", "=", "1", ")", "\n", "", "return", "input", "\n", "\n"]], "home.repos.pwc.inspect_result.project-monai_research-contributions.lamp-automated-model-parallelism.unet_pipe.DoubleConv.__init__": [[61, 95], ["torch.nn.Module.__init__", "torch.nn.Sequential", "monai.networks.blocks.Convolution", "monai.networks.blocks.Convolution"], "methods", ["home.repos.pwc.inspect_result.project-monai_research-contributions.networks.unetr.UNETR.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "spatial_dims", ",", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "stride", "=", "2", ",", "\n", "act_1", "=", "Act", ".", "LEAKYRELU", ",", "\n", "norm_1", "=", "Norm", ".", "BATCH", ",", "\n", "act_2", "=", "Act", ".", "LEAKYRELU", ",", "\n", "norm_2", "=", "Norm", ".", "BATCH", ",", "\n", "conv_only", "=", "True", ",", "\n", ")", ":", "\n", "        ", "\"\"\"\n        A sequence of Conv_1 + Norm_1 + Act_1 + Conv_2 (+ Norm_2 + Act_2).\n\n        `norm_2` and `act_2` are ignored when `conv_only` is True.\n        `stride` is for `Conv_1`, typically stride=2 for 2x spatial downsampling.\n\n        Args:\n            spatial_dims: number of the input spatial dimension.\n            in_channels: number of input channels.\n            out_channels: number of output channels.\n            stride: stride of the first conv., mainly used for 2x downsampling when stride=2.\n            act_1: activation type of the first convolution.\n            norm_1: normalization type of the first convolution.\n            act_2: activation type of the second convolution.\n            norm_2: normalization type of the second convolution.\n            conv_only: whether the second conv is convolution layer only. Default to True,\n                indicates that `act_2` and `norm_2` are not in use.\n        \"\"\"", "\n", "super", "(", "DoubleConv", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv", "=", "nn", ".", "Sequential", "(", "\n", "Convolution", "(", "spatial_dims", ",", "in_channels", ",", "out_channels", ",", "strides", "=", "stride", ",", "act", "=", "act_1", ",", "norm", "=", "norm_1", ",", "bias", "=", "False", ")", ",", "\n", "Convolution", "(", "spatial_dims", ",", "out_channels", ",", "out_channels", ",", "act", "=", "act_2", ",", "norm", "=", "norm_2", ",", "conv_only", "=", "conv_only", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.project-monai_research-contributions.lamp-automated-model-parallelism.unet_pipe.DoubleConv.forward": [[97, 99], ["unet_pipe.DoubleConv.conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "conv", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.project-monai_research-contributions.lamp-automated-model-parallelism.unet_pipe.UNetPipe.__init__": [[102, 173], ["torch.nn.Sequential.__init__", "range", "monai.networks.blocks.Convolution", "encoder_layers.append", "range", "torch.nn.Sequential", "reversed", "min", "collections.OrderedDict", "decoder_layers.append", "torch.nn.Sequential", "unet_pipe.UNetPipe.add_module", "unet_pipe.UNetPipe.add_module", "unet_pipe.UNetPipe.modules", "n_enc_filter.append", "torchgpipe.skip.Namespace", "torch.nn.Sequential", "unet_pipe.DoubleConv", "encoder_layers.append", "range", "collections.OrderedDict", "decoder_layers.append", "torch.nn.Sequential", "isinstance", "min", "range", "collections.OrderedDict", "collections.OrderedDict", "collections.OrderedDict", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.init.kaiming_normal_", "isinstance", "monai.networks.blocks.UpSample", "torch.nn.init.constant_", "torch.nn.init.constant_", "isinstance", "monai.networks.blocks.UpSample", "PopCat().isolate", "unet_pipe.DoubleConv", "torch.nn.init.kaiming_normal_", "Stash().isolate", "Stash().isolate", "unet_pipe.PopCat", "unet_pipe.Stash", "unet_pipe.Stash"], "methods", ["home.repos.pwc.inspect_result.project-monai_research-contributions.networks.unetr.UNETR.__init__"], ["    ", "def", "__init__", "(", "self", ",", "spatial_dims", ":", "int", ",", "in_channels", ":", "int", ",", "out_channels", ":", "int", ",", "n_feat", ":", "int", "=", "32", ",", "depth", ":", "int", "=", "4", ")", ":", "\n", "        ", "\"\"\"\n        A UNet-like architecture for model parallelism.\n\n        Args:\n            spatial_dims: number of input spatial dimensions,\n                2 for (B, in_channels, H, W), 3 for (B, in_channels, H, W, D).\n            in_channels: number of input channels.\n            out_channels: number of output channels.\n            n_feat: number of features in the first convolution.\n            depth: number of downsampling stages.\n        \"\"\"", "\n", "super", "(", "UNetPipe", ",", "self", ")", ".", "__init__", "(", ")", "\n", "n_enc_filter", ":", "List", "[", "int", "]", "=", "[", "n_feat", "]", "\n", "for", "_", "in", "range", "(", "depth", ")", ":", "\n", "            ", "n_enc_filter", ".", "append", "(", "min", "(", "n_enc_filter", "[", "-", "1", "]", "*", "2", ",", "1024", ")", ")", "\n", "", "namespaces", "=", "[", "Namespace", "(", ")", "for", "_", "in", "range", "(", "depth", ")", "]", "\n", "\n", "# construct the encoder", "\n", "encoder_layers", ":", "List", "[", "nn", ".", "Module", "]", "=", "[", "]", "\n", "init_conv", "=", "Convolution", "(", "\n", "spatial_dims", ",", "in_channels", ",", "n_enc_filter", "[", "0", "]", ",", "strides", "=", "2", ",", "act", "=", "Act", ".", "LEAKYRELU", ",", "norm", "=", "Norm", ".", "BATCH", ",", "bias", "=", "False", "\n", ")", "\n", "encoder_layers", ".", "append", "(", "\n", "nn", ".", "Sequential", "(", "OrderedDict", "(", "[", "(", "\"Conv\"", ",", "init_conv", ")", ",", "(", "\"skip\"", ",", "Stash", "(", ")", ".", "isolate", "(", "namespaces", "[", "0", "]", ")", ")", "]", ")", ")", "\n", ")", "\n", "for", "i", "in", "range", "(", "1", ",", "depth", "+", "1", ")", ":", "\n", "            ", "down_conv", "=", "DoubleConv", "(", "spatial_dims", ",", "n_enc_filter", "[", "i", "-", "1", "]", ",", "n_enc_filter", "[", "i", "]", ")", "\n", "if", "i", "==", "depth", ":", "\n", "                ", "layer_dict", "=", "OrderedDict", "(", "[", "(", "\"Down\"", ",", "down_conv", ")", "]", ")", "\n", "", "else", ":", "\n", "                ", "layer_dict", "=", "OrderedDict", "(", "[", "(", "\"Down\"", ",", "down_conv", ")", ",", "(", "\"skip\"", ",", "Stash", "(", ")", ".", "isolate", "(", "namespaces", "[", "i", "]", ")", ")", "]", ")", "\n", "", "encoder_layers", ".", "append", "(", "nn", ".", "Sequential", "(", "layer_dict", ")", ")", "\n", "", "encoder", "=", "nn", ".", "Sequential", "(", "*", "encoder_layers", ")", "\n", "\n", "# construct the decoder", "\n", "decoder_layers", ":", "List", "[", "nn", ".", "Module", "]", "=", "[", "]", "\n", "for", "i", "in", "reversed", "(", "range", "(", "1", ",", "depth", "+", "1", ")", ")", ":", "\n", "            ", "in_ch", ",", "out_ch", "=", "n_enc_filter", "[", "i", "]", ",", "n_enc_filter", "[", "i", "-", "1", "]", "\n", "layer_dict", "=", "OrderedDict", "(", "\n", "[", "\n", "(", "\"Up\"", ",", "UpSample", "(", "spatial_dims", ",", "in_ch", ",", "out_ch", ",", "2", ",", "True", ")", ")", ",", "\n", "(", "\"skip\"", ",", "PopCat", "(", ")", ".", "isolate", "(", "namespaces", "[", "i", "-", "1", "]", ")", ")", ",", "\n", "(", "\"Conv1x1x1\"", ",", "Conv", "[", "Conv", ".", "CONV", ",", "spatial_dims", "]", "(", "out_ch", "*", "2", ",", "in_ch", ",", "kernel_size", "=", "1", ")", ")", ",", "\n", "(", "\"Conv\"", ",", "DoubleConv", "(", "spatial_dims", ",", "in_ch", ",", "out_ch", ",", "stride", "=", "1", ",", "conv_only", "=", "True", ")", ")", ",", "\n", "]", "\n", ")", "\n", "decoder_layers", ".", "append", "(", "nn", ".", "Sequential", "(", "layer_dict", ")", ")", "\n", "", "in_ch", "=", "min", "(", "n_enc_filter", "[", "0", "]", "//", "2", ",", "32", ")", "\n", "layer_dict", "=", "OrderedDict", "(", "\n", "[", "\n", "(", "\"Up\"", ",", "UpSample", "(", "spatial_dims", ",", "n_feat", ",", "in_ch", ",", "2", ",", "True", ")", ")", ",", "\n", "(", "\"RELU\"", ",", "Act", "[", "Act", ".", "LEAKYRELU", "]", "(", "inplace", "=", "False", ")", ")", ",", "\n", "(", "\"out\"", ",", "Conv", "[", "Conv", ".", "CONV", ",", "spatial_dims", "]", "(", "in_ch", ",", "out_channels", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ")", ",", "\n", "]", "\n", ")", "\n", "decoder_layers", ".", "append", "(", "nn", ".", "Sequential", "(", "layer_dict", ")", ")", "\n", "decoder", "=", "nn", ".", "Sequential", "(", "*", "decoder_layers", ")", "\n", "\n", "# making a sequential model", "\n", "self", ".", "add_module", "(", "\"encoder\"", ",", "encoder", ")", "\n", "self", ".", "add_module", "(", "\"decoder\"", ",", "decoder", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "Conv", "[", "Conv", ".", "CONV", ",", "spatial_dims", "]", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "Norm", "[", "Norm", ".", "BATCH", ",", "spatial_dims", "]", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "Conv", "[", "Conv", ".", "CONVTRANS", ",", "spatial_dims", "]", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ")", "\n", "", "", "", "", ""]], "home.repos.pwc.inspect_result.project-monai_research-contributions.lamp-automated-model-parallelism.unet_pipe.flatten_sequential": [[39, 58], ["torch.nn.Sequential", "isinstance", "TypeError", "module.named_children", "collections.OrderedDict", "isinstance", "unet_pipe.flatten_sequential._flatten"], "function", ["None"], ["", "", "def", "flatten_sequential", "(", "module", ":", "nn", ".", "Sequential", ")", ":", "\n", "    ", "\"\"\"\n    Recursively make all the submodules sequential.\n\n    Args:\n        module: a torch sequential model.\n    \"\"\"", "\n", "if", "not", "isinstance", "(", "module", ",", "nn", ".", "Sequential", ")", ":", "\n", "        ", "raise", "TypeError", "(", "\"module must be a nn.Sequential instance.\"", ")", "\n", "\n", "", "def", "_flatten", "(", "module", ")", ":", "\n", "        ", "for", "name", ",", "child", "in", "module", ".", "named_children", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "child", ",", "nn", ".", "Sequential", ")", ":", "\n", "                ", "for", "sub_name", ",", "sub_child", "in", "_flatten", "(", "child", ")", ":", "\n", "                    ", "yield", "f\"{name}_{sub_name}\"", ",", "sub_child", "\n", "", "", "else", ":", "\n", "                ", "yield", "name", ",", "child", "\n", "\n", "", "", "", "return", "nn", ".", "Sequential", "(", "OrderedDict", "(", "_flatten", "(", "module", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.project-monai_research-contributions.lamp-automated-model-parallelism.data_utils.get_filenames": [[31, 47], ["os.path.exists", "os.path.join", "os.path.join", "maskfiles.append", "maskfiles.append", "os.path.join"], "function", ["None"], ["def", "get_filenames", "(", "path", ",", "maskname", "=", "STRUCTURES", ")", ":", "\n", "    ", "\"\"\"\n    create file names according to the predefined folder structure.\n\n    Args:\n        path: data folder name\n        maskname: target structure names\n    \"\"\"", "\n", "maskfiles", "=", "[", "]", "\n", "for", "seg", "in", "maskname", ":", "\n", "        ", "if", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "path", ",", "\"./structures/\"", "+", "seg", "+", "\"_crp_v2.npy\"", ")", ")", ":", "\n", "            ", "maskfiles", ".", "append", "(", "os", ".", "path", ".", "join", "(", "path", ",", "\"./structures/\"", "+", "seg", "+", "\"_crp_v2.npy\"", ")", ")", "\n", "", "else", ":", "\n", "# the corresponding mask is missing seg, path.split(\"/\")[-1]", "\n", "            ", "maskfiles", ".", "append", "(", "None", ")", "\n", "", "", "return", "os", ".", "path", ".", "join", "(", "path", ",", "\"img_crp_v2.npy\"", ")", ",", "maskfiles", "\n", "\n"]], "home.repos.pwc.inspect_result.project-monai_research-contributions.lamp-automated-model-parallelism.data_utils.load_data_and_mask": [[49, 69], ["monai.transforms.DivisiblePad", "numpy.load", "dict", "str", "monai.transforms.DivisiblePad.", "item[].append", "len", "numpy.zeros", "numpy.load().astype", "monai.transforms.DivisiblePad.", "numpy.load", "np.load().astype.min", "np.load().astype.max"], "function", ["None"], ["", "def", "load_data_and_mask", "(", "data", ",", "mask_data", ")", ":", "\n", "    ", "\"\"\"\n    Load data filename and mask_data (list of file names)\n    into a dictionary of {'image': array, \"label\": list of arrays, \"name\": str}.\n    \"\"\"", "\n", "pad_xform", "=", "DivisiblePad", "(", "k", "=", "32", ")", "\n", "img", "=", "np", ".", "load", "(", "data", ")", "# z y x", "\n", "img", "=", "pad_xform", "(", "img", "[", "None", "]", ")", "[", "0", "]", "\n", "item", "=", "dict", "(", "image", "=", "img", ",", "label", "=", "[", "]", ")", "\n", "for", "maskfnm", "in", "mask_data", ":", "\n", "        ", "if", "maskfnm", "is", "None", ":", "\n", "            ", "ms", "=", "np", ".", "zeros", "(", "img", ".", "shape", ",", "np", ".", "uint8", ")", "\n", "", "else", ":", "\n", "            ", "ms", "=", "np", ".", "load", "(", "maskfnm", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "assert", "ms", ".", "min", "(", ")", "==", "0", "and", "ms", ".", "max", "(", ")", "==", "1", "\n", "", "mask", "=", "pad_xform", "(", "ms", "[", "None", "]", ")", "[", "0", "]", "\n", "item", "[", "\"label\"", "]", ".", "append", "(", "mask", ")", "\n", "", "assert", "len", "(", "item", "[", "\"label\"", "]", ")", "==", "9", "\n", "item", "[", "\"name\"", "]", "=", "str", "(", "data", ")", "\n", "return", "item", "\n", "", ""]], "home.repos.pwc.inspect_result.project-monai_research-contributions.lamp-automated-model-parallelism.train.ImageLabelDataset.__init__": [[41, 45], ["sorted", "os.listdir"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "path", ",", "n_class", "=", "10", ")", ":", "\n", "        ", "self", ".", "path", "=", "path", "\n", "self", ".", "data", "=", "sorted", "(", "os", ".", "listdir", "(", "path", ")", ")", "\n", "self", ".", "n_class", "=", "n_class", "\n", "\n"]], "home.repos.pwc.inspect_result.project-monai_research-contributions.lamp-automated-model-parallelism.train.ImageLabelDataset.__getitem__": [[46, 70], ["os.path.join", "data_utils.get_filenames", "data_utils.load_data_and_mask", "data[].astype", "numpy.zeros", "numpy.ones", "enumerate", "numpy.concatenate().astype", "numpy.logical_or", "mask_list.append", "numpy.zeros", "numpy.zeros.reshape", "numpy.concatenate"], "methods", ["home.repos.pwc.inspect_result.project-monai_research-contributions.lamp-automated-model-parallelism.data_utils.get_filenames", "home.repos.pwc.inspect_result.project-monai_research-contributions.lamp-automated-model-parallelism.data_utils.load_data_and_mask"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "data", "=", "os", ".", "path", ".", "join", "(", "self", ".", "path", ",", "self", ".", "data", "[", "index", "]", ")", "\n", "train_data", ",", "train_masks_data", "=", "get_filenames", "(", "data", ")", "\n", "data", "=", "load_data_and_mask", "(", "train_data", ",", "train_masks_data", ")", "# read into a data dict", "\n", "# loading image", "\n", "data", "[", "\"image\"", "]", "=", "data", "[", "\"image\"", "]", ".", "astype", "(", "np", ".", "float32", ")", "# shape (H W D)", "\n", "# loading labels", "\n", "class_shape", "=", "(", "1", ",", ")", "+", "data", "[", "\"image\"", "]", ".", "shape", "\n", "mask0", "=", "np", ".", "zeros", "(", "class_shape", ")", "\n", "mask_list", "=", "[", "]", "\n", "flagvect", "=", "np", ".", "ones", "(", "(", "self", ".", "n_class", ",", ")", ",", "np", ".", "float32", ")", "\n", "for", "i", ",", "mask", "in", "enumerate", "(", "data", "[", "\"label\"", "]", ")", ":", "\n", "            ", "if", "mask", "is", "None", ":", "\n", "                ", "mask", "=", "np", ".", "zeros", "(", "class_shape", ")", "\n", "flagvect", "[", "0", "]", "=", "0", "\n", "flagvect", "[", "i", "+", "1", "]", "=", "0", "\n", "", "mask0", "=", "np", ".", "logical_or", "(", "mask0", ",", "mask", ")", "\n", "mask_list", ".", "append", "(", "mask", ".", "reshape", "(", "class_shape", ")", ")", "\n", "", "mask0", "=", "1", "-", "mask0", "\n", "data", "[", "\"label\"", "]", "=", "np", ".", "concatenate", "(", "[", "mask0", "]", "+", "mask_list", ",", "axis", "=", "0", ")", ".", "astype", "(", "np", ".", "uint8", ")", "# shape (C H W D)", "\n", "# setting flags", "\n", "# flagvec is a boolean indicator for complete annotation", "\n", "data", "[", "\"with_complete_groundtruth\"", "]", "=", "flagvect", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.project-monai_research-contributions.lamp-automated-model-parallelism.train.ImageLabelDataset.__len__": [[71, 73], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.project-monai_research-contributions.lamp-automated-model-parallelism.train.train": [[75, 231], ["print", "print", "train.ImageLabelDataset", "numpy.any", "monai.utils.first", "print", "monai.transforms.Compose", "monai.data.Dataset", "torch.utils.data.DataLoader", "print", "print", "unet_pipe.UNetPipe", "unet_pipe.flatten_sequential", "torch.from_numpy", "first_sample[].float", "torch.autograd.Variable", "torch.cuda.device_count", "print", "torchgpipe.balance.balance_by_size", "torchgpipe.GPipe", "monai.losses.DiceLoss", "monai.losses.FocalLoss", "time.time", "range", "print", "int", "monai.transforms.Compose", "monai.data.Dataset", "torch.utils.data.DataLoader", "monai.transforms.Compose", "monai.data.Dataset", "torch.utils.data.DataLoader", "train.ImageLabelDataset", "numpy.array", "torch.optim.SGD.lower", "torch.optim.RMSprop", "torch.autograd.Variable.cuda", "print", "torchgpipe.GPipe.state_dict", "model.state_dict.update", "torchgpipe.GPipe.load_state_dict", "torchgpipe.GPipe.train", "enumerate", "print", "crop_size.split", "monai.transforms.AddChannelDict", "torchgpipe.GPipe.parameters", "torch.optim.SGD.lower", "torch.optim.SGD", "ValueError", "torch.load", "torch.autograd.Variable", "torch.autograd.Variable", "torch.optim.SGD.zero_grad", "torchgpipe.GPipe.to().float", "monai.metrics.compute_meandice.backward", "torch.optim.SGD.step", "monai.metrics.compute_meandice.item", "torchgpipe.GPipe.eval", "print", "range", "print", "time.time", "monai.transforms.AddChannelDict", "monai.transforms.Rand3DElasticd", "monai.transforms.AddChannelDict", "monai.transforms.SpatialPadd", "monai.transforms.RandCropByPosNegLabeld", "monai.transforms.Rand3DElasticd", "len", "len", "torchgpipe.GPipe.parameters", "torch.autograd.Variable.size", "pretrained_dict.items", "torch.autograd.Variable.cuda", "torch.autograd.Variable.cuda().float", "print", "torchgpipe.GPipe.to", "monai.metrics.compute_meandice", "torchgpipe.GPipe.to", "torch.no_grad", "torch.autograd.Variable", "y_val.to", "zip", "tuple", "torch.save", "tuple", "tuple", "tuple", "torch.autograd.Variable.cuda", "torch.from_numpy.to", "len", "torch.autograd.Variable.cuda", "torchgpipe.GPipe.", "zip", "zip", "torchgpipe.GPipe.state_dict", "torchgpipe.GPipe.", "monai.losses.DiceLoss.", "flagvec.to", "torch.from_numpy.to", "len", "monai.metrics.compute_meandice.item", "l.item", "str", "str", "torch.autograd.Variable.to", "monai.losses.FocalLoss.", "flagvec.to", "torch.autograd.Variable.to"], "function", ["home.repos.pwc.inspect_result.project-monai_research-contributions.lamp-automated-model-parallelism.unet_pipe.flatten_sequential", "home.repos.pwc.inspect_result.project-monai_research-contributions.utils.utils.AverageMeter.update", "home.repos.pwc.inspect_result.project-monai_research-contributions.lamp-automated-model-parallelism.train.train"], ["", "", "def", "train", "(", "n_feat", ",", "crop_size", ",", "bs", ",", "ep", ",", "optimizer", "=", "\"rmsprop\"", ",", "lr", "=", "5e-4", ",", "pretrain", "=", "None", ")", ":", "\n", "    ", "model_name", "=", "f\"./HaN_{n_feat}_{bs}_{ep}_{crop_size}_{lr}_\"", "\n", "print", "(", "f\"save the best model as '{model_name}' during training.\"", ")", "\n", "\n", "crop_size", "=", "[", "int", "(", "cz", ")", "for", "cz", "in", "crop_size", ".", "split", "(", "\",\"", ")", "]", "\n", "print", "(", "f\"input image crop_size: {crop_size}\"", ")", "\n", "\n", "# starting training set loader", "\n", "train_images", "=", "ImageLabelDataset", "(", "path", "=", "TRAIN_PATH", ",", "n_class", "=", "N_CLASSES", ")", "\n", "if", "np", ".", "any", "(", "[", "cz", "==", "-", "1", "for", "cz", "in", "crop_size", "]", ")", ":", "# using full image", "\n", "        ", "train_transform", "=", "Compose", "(", "\n", "[", "\n", "AddChannelDict", "(", "keys", "=", "\"image\"", ")", ",", "\n", "Rand3DElasticd", "(", "\n", "keys", "=", "(", "\"image\"", ",", "\"label\"", ")", ",", "\n", "spatial_size", "=", "crop_size", ",", "\n", "sigma_range", "=", "(", "10", ",", "50", ")", ",", "# 30", "\n", "magnitude_range", "=", "(", "600", ",", "1200", ")", ",", "# 1000", "\n", "prob", "=", "0.8", ",", "\n", "rotate_range", "=", "(", "np", ".", "pi", "/", "12", ",", "np", ".", "pi", "/", "12", ",", "np", ".", "pi", "/", "12", ")", ",", "\n", "shear_range", "=", "(", "np", ".", "pi", "/", "18", ",", "np", ".", "pi", "/", "18", ",", "np", ".", "pi", "/", "18", ")", ",", "\n", "translate_range", "=", "tuple", "(", "sz", "*", "0.05", "for", "sz", "in", "crop_size", ")", ",", "\n", "scale_range", "=", "(", "0.2", ",", "0.2", ",", "0.2", ")", ",", "\n", "mode", "=", "(", "\"bilinear\"", ",", "\"nearest\"", ")", ",", "\n", "padding_mode", "=", "(", "\"border\"", ",", "\"zeros\"", ")", ",", "\n", ")", ",", "\n", "]", "\n", ")", "\n", "train_dataset", "=", "Dataset", "(", "train_images", ",", "transform", "=", "train_transform", ")", "\n", "# when bs > 1, the loader assumes that the full image sizes are the", "\n", "# same across the dataset", "\n", "train_dataloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "train_dataset", ",", "num_workers", "=", "4", ",", "batch_size", "=", "bs", ",", "shuffle", "=", "True", ")", "\n", "", "else", ":", "\n", "# draw balanced foreground/background window samples according to the", "\n", "# ground truth label", "\n", "        ", "train_transform", "=", "Compose", "(", "\n", "[", "\n", "AddChannelDict", "(", "keys", "=", "\"image\"", ")", ",", "\n", "SpatialPadd", "(", "keys", "=", "(", "\"image\"", ",", "\"label\"", ")", ",", "spatial_size", "=", "crop_size", ")", ",", "\n", "# ensure image size >= crop_size", "\n", "RandCropByPosNegLabeld", "(", "\n", "keys", "=", "(", "\"image\"", ",", "\"label\"", ")", ",", "label_key", "=", "\"label\"", ",", "spatial_size", "=", "crop_size", ",", "num_samples", "=", "bs", "\n", ")", ",", "\n", "Rand3DElasticd", "(", "\n", "keys", "=", "(", "\"image\"", ",", "\"label\"", ")", ",", "\n", "spatial_size", "=", "crop_size", ",", "\n", "sigma_range", "=", "(", "10", ",", "50", ")", ",", "# 30", "\n", "magnitude_range", "=", "(", "600", ",", "1200", ")", ",", "# 1000", "\n", "prob", "=", "0.8", ",", "\n", "rotate_range", "=", "(", "np", ".", "pi", "/", "12", ",", "np", ".", "pi", "/", "12", ",", "np", ".", "pi", "/", "12", ")", ",", "\n", "shear_range", "=", "(", "np", ".", "pi", "/", "18", ",", "np", ".", "pi", "/", "18", ",", "np", ".", "pi", "/", "18", ")", ",", "\n", "translate_range", "=", "tuple", "(", "sz", "*", "0.05", "for", "sz", "in", "crop_size", ")", ",", "\n", "scale_range", "=", "(", "0.2", ",", "0.2", ",", "0.2", ")", ",", "\n", "mode", "=", "(", "\"bilinear\"", ",", "\"nearest\"", ")", ",", "\n", "padding_mode", "=", "(", "\"border\"", ",", "\"zeros\"", ")", ",", "\n", ")", ",", "\n", "]", "\n", ")", "\n", "# each dataset item is a list of windows", "\n", "train_dataset", "=", "Dataset", "(", "train_images", ",", "transform", "=", "train_transform", ")", "\n", "train_dataloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "# stack each dataset item into a single tensor", "\n", "train_dataset", ",", "num_workers", "=", "4", ",", "batch_size", "=", "1", ",", "shuffle", "=", "True", ",", "collate_fn", "=", "list_data_collate", "\n", ")", "\n", "", "first_sample", "=", "first", "(", "train_dataloader", ")", "\n", "print", "(", "first_sample", "[", "\"image\"", "]", ".", "shape", ")", "\n", "\n", "# starting validation set loader", "\n", "val_transform", "=", "Compose", "(", "[", "AddChannelDict", "(", "keys", "=", "\"image\"", ")", "]", ")", "\n", "val_dataset", "=", "Dataset", "(", "ImageLabelDataset", "(", "VAL_PATH", ",", "n_class", "=", "N_CLASSES", ")", ",", "transform", "=", "val_transform", ")", "\n", "val_dataloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "val_dataset", ",", "num_workers", "=", "1", ",", "batch_size", "=", "1", ")", "\n", "print", "(", "val_dataset", "[", "0", "]", "[", "\"image\"", "]", ".", "shape", ")", "\n", "print", "(", "f\"training images: {len(train_dataloader)}, validation images: {len(val_dataloader)}\"", ")", "\n", "\n", "model", "=", "UNetPipe", "(", "spatial_dims", "=", "3", ",", "in_channels", "=", "1", ",", "out_channels", "=", "N_CLASSES", ",", "n_feat", "=", "n_feat", ")", "\n", "model", "=", "flatten_sequential", "(", "model", ")", "\n", "lossweight", "=", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "[", "2.22", ",", "1.31", ",", "1.99", ",", "1.13", ",", "1.93", ",", "1.93", ",", "1.0", ",", "1.0", ",", "1.90", ",", "1.98", "]", ",", "np", ".", "float32", ")", ")", "\n", "\n", "if", "optimizer", ".", "lower", "(", ")", "==", "\"rmsprop\"", ":", "\n", "        ", "optimizer", "=", "torch", ".", "optim", ".", "RMSprop", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "lr", ")", "# lr = 5e-4", "\n", "", "elif", "optimizer", ".", "lower", "(", ")", "==", "\"momentum\"", ":", "\n", "        ", "optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "lr", ",", "momentum", "=", "0.9", ")", "# lr = 1e-4 for finetuning", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "f\"Unknown optimizer type {optimizer}. (options are 'rmsprop' and 'momentum').\"", ")", "\n", "\n", "# config GPipe", "\n", "", "x", "=", "first_sample", "[", "\"image\"", "]", ".", "float", "(", ")", "\n", "x", "=", "torch", ".", "autograd", ".", "Variable", "(", "x", ".", "cuda", "(", ")", ")", "\n", "partitions", "=", "torch", ".", "cuda", ".", "device_count", "(", ")", "\n", "print", "(", "f\"partition: {partitions}, input: {x.size()}\"", ")", "\n", "balance", "=", "balance_by_size", "(", "partitions", ",", "model", ",", "x", ")", "\n", "model", "=", "GPipe", "(", "model", ",", "balance", ",", "chunks", "=", "4", ",", "checkpoint", "=", "\"always\"", ")", "\n", "\n", "# config loss functions", "\n", "dice_loss_func", "=", "DiceLoss", "(", "softmax", "=", "True", ",", "reduction", "=", "\"none\"", ")", "\n", "# use the same pipeline and loss in", "\n", "# AnatomyNet: Deep learning for fast and fully automated whole\u2010volume segmentation of head and neck anatomy,", "\n", "# Medical Physics, 2018.", "\n", "focal_loss_func", "=", "FocalLoss", "(", "reduction", "=", "\"none\"", ")", "\n", "\n", "if", "pretrain", ":", "\n", "        ", "print", "(", "f\"loading from {pretrain}.\"", ")", "\n", "pretrained_dict", "=", "torch", ".", "load", "(", "pretrain", ")", "[", "\"weight\"", "]", "\n", "model_dict", "=", "model", ".", "state_dict", "(", ")", "\n", "pretrained_dict", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "pretrained_dict", ".", "items", "(", ")", "if", "k", "in", "model_dict", "}", "\n", "model_dict", ".", "update", "(", "pretrained_dict", ")", "\n", "model", ".", "load_state_dict", "(", "pretrained_dict", ")", "\n", "\n", "", "b_time", "=", "time", ".", "time", "(", ")", "\n", "best_val_loss", "=", "[", "0", "]", "*", "(", "N_CLASSES", "-", "1", ")", "# foreground", "\n", "for", "epoch", "in", "range", "(", "ep", ")", ":", "\n", "        ", "model", ".", "train", "(", ")", "\n", "trainloss", "=", "0", "\n", "for", "b_idx", ",", "data_dict", "in", "enumerate", "(", "train_dataloader", ")", ":", "\n", "            ", "x_train", "=", "data_dict", "[", "\"image\"", "]", "\n", "y_train", "=", "data_dict", "[", "\"label\"", "]", "\n", "flagvec", "=", "data_dict", "[", "\"with_complete_groundtruth\"", "]", "\n", "\n", "x_train", "=", "torch", ".", "autograd", ".", "Variable", "(", "x_train", ".", "cuda", "(", ")", ")", "\n", "y_train", "=", "torch", ".", "autograd", ".", "Variable", "(", "y_train", ".", "cuda", "(", ")", ".", "float", "(", ")", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "o", "=", "model", "(", "x_train", ")", ".", "to", "(", "0", ",", "non_blocking", "=", "True", ")", ".", "float", "(", ")", "\n", "\n", "loss", "=", "(", "dice_loss_func", "(", "o", ",", "y_train", ".", "to", "(", "o", ")", ")", "*", "flagvec", ".", "to", "(", "o", ")", "*", "lossweight", ".", "to", "(", "o", ")", ")", ".", "mean", "(", ")", "\n", "loss", "+=", "0.5", "*", "(", "focal_loss_func", "(", "o", ",", "y_train", ".", "to", "(", "o", ")", ")", "*", "flagvec", ".", "to", "(", "o", ")", "*", "lossweight", ".", "to", "(", "o", ")", ")", ".", "mean", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "trainloss", "+=", "loss", ".", "item", "(", ")", "\n", "\n", "if", "b_idx", "%", "20", "==", "0", ":", "\n", "                ", "print", "(", "f\"Train Epoch: {epoch} [{b_idx}/{len(train_dataloader)}] \\tLoss: {loss.item()}\"", ")", "\n", "", "", "print", "(", "f\"epoch {epoch} TRAIN loss {trainloss / len(train_dataloader)}\"", ")", "\n", "\n", "if", "epoch", "%", "10", "==", "0", ":", "\n", "            ", "model", ".", "eval", "(", ")", "\n", "# check validation dice", "\n", "val_loss", "=", "[", "0", "]", "*", "(", "N_CLASSES", "-", "1", ")", "\n", "n_val", "=", "[", "0", "]", "*", "(", "N_CLASSES", "-", "1", ")", "\n", "for", "data_dict", "in", "val_dataloader", ":", "\n", "                ", "x_val", "=", "data_dict", "[", "\"image\"", "]", "\n", "y_val", "=", "data_dict", "[", "\"label\"", "]", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                    ", "x_val", "=", "torch", ".", "autograd", ".", "Variable", "(", "x_val", ".", "cuda", "(", ")", ")", "\n", "", "o", "=", "model", "(", "x_val", ")", ".", "to", "(", "0", ",", "non_blocking", "=", "True", ")", "\n", "loss", "=", "compute_meandice", "(", "o", ",", "y_val", ".", "to", "(", "o", ")", ",", "mutually_exclusive", "=", "True", ",", "include_background", "=", "False", ")", "\n", "val_loss", "=", "[", "l", ".", "item", "(", ")", "+", "tl", "if", "l", "==", "l", "else", "tl", "for", "l", ",", "tl", "in", "zip", "(", "loss", "[", "0", "]", ",", "val_loss", ")", "]", "\n", "n_val", "=", "[", "n", "+", "1", "if", "l", "==", "l", "else", "n", "for", "l", ",", "n", "in", "zip", "(", "loss", "[", "0", "]", ",", "n_val", ")", "]", "\n", "", "val_loss", "=", "[", "l", "/", "n", "for", "l", ",", "n", "in", "zip", "(", "val_loss", ",", "n_val", ")", "]", "\n", "print", "(", "\"validation scores %.4f, %.4f, %.4f, %.4f, %.4f, %.4f, %.4f, %.4f, %.4f\"", "%", "tuple", "(", "val_loss", ")", ")", "\n", "for", "c", "in", "range", "(", "1", ",", "10", ")", ":", "\n", "                ", "if", "best_val_loss", "[", "c", "-", "1", "]", "<", "val_loss", "[", "c", "-", "1", "]", ":", "\n", "                    ", "best_val_loss", "[", "c", "-", "1", "]", "=", "val_loss", "[", "c", "-", "1", "]", "\n", "state", "=", "{", "\"epoch\"", ":", "epoch", ",", "\"weight\"", ":", "model", ".", "state_dict", "(", ")", ",", "\"score_\"", "+", "str", "(", "c", ")", ":", "best_val_loss", "[", "c", "-", "1", "]", "}", "\n", "torch", ".", "save", "(", "state", ",", "f\"{model_name}\"", "+", "str", "(", "c", ")", ")", "\n", "", "", "print", "(", "\"best validation scores %.4f, %.4f, %.4f, %.4f, %.4f, %.4f, %.4f, %.4f, %.4f\"", "%", "tuple", "(", "best_val_loss", ")", ")", "\n", "\n", "", "", "print", "(", "\"total time\"", ",", "time", ".", "time", "(", ")", "-", "b_time", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.project-monai_research-contributions.DiNTS.download_msd_datasets.main": [[18, 28], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "os.path.join", "os.path.exists", "monai.apps.download_and_extract"], "function", ["None"], ["def", "main", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "\"training\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--msd_task\"", ",", "action", "=", "\"store\"", ",", "default", "=", "\"Task07_Pancreas\"", ",", "help", "=", "\"msd task\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--root\"", ",", "action", "=", "\"store\"", ",", "default", "=", "\"./data_msd\"", ",", "help", "=", "\"data root\"", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "resource", "=", "\"https://msd-for-monai.s3-us-west-2.amazonaws.com/\"", "+", "args", ".", "msd_task", "+", "\".tar\"", "\n", "compressed_file", "=", "os", ".", "path", ".", "join", "(", "args", ".", "root", ",", "args", ".", "msd_task", "+", "\".tar\"", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "args", ".", "root", ")", ":", "\n", "        ", "download_and_extract", "(", "resource", ",", "compressed_file", ",", "args", ".", "root", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.project-monai_research-contributions.DiNTS.transforms.CorrectLabelAffined.__init__": [[50, 52], ["monai.transforms.transform.MapTransform.__init__"], "methods", ["home.repos.pwc.inspect_result.project-monai_research-contributions.networks.unetr.UNETR.__init__"], ["    ", "def", "__init__", "(", "self", ",", "keys", ")", "->", "None", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "keys", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.project-monai_research-contributions.DiNTS.transforms.CorrectLabelAffined.__call__": [[53, 57], ["dict"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "data", ")", ":", "\n", "        ", "d", "=", "dict", "(", "data", ")", "\n", "d", "[", "\"label_meta_dict\"", "]", "[", "\"affine\"", "]", "=", "d", "[", "\"image_meta_dict\"", "]", "[", "\"affine\"", "]", "\n", "return", "d", "\n", "\n"]], "home.repos.pwc.inspect_result.project-monai_research-contributions.DiNTS.transforms.creating_transforms_training": [[59, 115], ["monai.transforms.Compose", "monai.transforms.CastToTyped", "monai.transforms.ToTensord", "monai.transforms.CastToTyped", "monai.transforms.CopyItemsd", "monai.transforms.Lambdad", "monai.transforms.EnsureTyped", "monai.transforms.RandShiftIntensityd", "monai.transforms.CastToTyped", "monai.transforms.SpatialPadd", "monai.transforms.RandCropByLabelClassesd", "monai.transforms.Lambdad", "monai.transforms.CastToTyped", "monai.transforms.LoadImaged", "transforms.CorrectLabelAffined", "monai.transforms.EnsureChannelFirstd", "monai.transforms.Orientationd", "numpy.concatenate", "tuple", "scipy.ndimage.binary_dilation().astype", "range", "scipy.ndimage.binary_dilation"], "function", ["None"], ["", "", "def", "creating_transforms_training", "(", "\n", "foreground_crop_margin", ",", "\n", "label_interpolation_transform", ",", "\n", "num_patches_per_image", ",", "\n", "patch_size", ",", "\n", "intensity_norm_transforms", ",", "\n", "augmenations", ",", "\n", "device", ",", "\n", "output_classes", ",", "\n", ")", ":", "\n", "    ", "train_transforms", "=", "Compose", "(", "\n", "[", "\n", "LoadImaged", "(", "keys", "=", "[", "\"image\"", ",", "\"label\"", "]", ")", ",", "\n", "CorrectLabelAffined", "(", "keys", "=", "[", "\"image\"", ",", "\"label\"", "]", ")", ",", "\n", "EnsureChannelFirstd", "(", "keys", "=", "[", "\"image\"", ",", "\"label\"", "]", ")", ",", "\n", "Orientationd", "(", "keys", "=", "[", "\"image\"", ",", "\"label\"", "]", ",", "axcodes", "=", "\"RAS\"", ")", ",", "\n", "]", "\n", "+", "label_interpolation_transform", "\n", "+", "[", "CastToTyped", "(", "keys", "=", "[", "\"image\"", "]", ",", "dtype", "=", "(", "torch", ".", "float32", ")", ")", "]", "\n", "+", "intensity_norm_transforms", "\n", "+", "[", "\n", "CastToTyped", "(", "keys", "=", "[", "\"image\"", ",", "\"label\"", "]", ",", "dtype", "=", "(", "np", ".", "float16", ",", "np", ".", "uint8", ")", ")", ",", "\n", "CopyItemsd", "(", "keys", "=", "[", "\"label\"", "]", ",", "times", "=", "1", ",", "names", "=", "[", "\"label4crop\"", "]", ")", ",", "\n", "Lambdad", "(", "\n", "keys", "=", "[", "\"label4crop\"", "]", ",", "\n", "func", "=", "lambda", "x", ":", "np", ".", "concatenate", "(", "\n", "tuple", "(", "\n", "[", "\n", "ndimage", ".", "binary_dilation", "(", "(", "x", "==", "_k", ")", ".", "astype", "(", "x", ".", "dtype", ")", ",", "iterations", "=", "48", ")", ".", "astype", "(", "x", ".", "dtype", ")", "\n", "for", "_k", "in", "range", "(", "output_classes", ")", "\n", "]", "\n", ")", ",", "\n", "axis", "=", "0", ",", "\n", ")", ",", "\n", "overwrite", "=", "True", ",", "\n", ")", ",", "\n", "EnsureTyped", "(", "keys", "=", "[", "\"image\"", ",", "\"label\"", "]", ")", ",", "\n", "RandShiftIntensityd", "(", "keys", "=", "[", "\"image\"", "]", ",", "offsets", "=", "0.0", ",", "prob", "=", "0.001", ")", ",", "\n", "CastToTyped", "(", "keys", "=", "[", "\"image\"", "]", ",", "dtype", "=", "(", "torch", ".", "float32", ")", ")", ",", "\n", "SpatialPadd", "(", "\n", "keys", "=", "[", "\"image\"", ",", "\"label\"", ",", "\"label4crop\"", "]", ",", "spatial_size", "=", "patch_size", ",", "mode", "=", "[", "\"reflect\"", ",", "\"constant\"", ",", "\"constant\"", "]", "\n", ")", ",", "\n", "RandCropByLabelClassesd", "(", "\n", "keys", "=", "[", "\"image\"", ",", "\"label\"", "]", ",", "\n", "label_key", "=", "\"label4crop\"", ",", "\n", "num_classes", "=", "output_classes", ",", "\n", "ratios", "=", "[", "1", "]", "*", "output_classes", ",", "\n", "spatial_size", "=", "patch_size", ",", "\n", "num_samples", "=", "num_patches_per_image", ",", "\n", ")", ",", "\n", "Lambdad", "(", "keys", "=", "[", "\"label4crop\"", "]", ",", "func", "=", "lambda", "x", ":", "0", ")", ",", "\n", "]", "\n", "+", "augmenations", "\n", "+", "[", "CastToTyped", "(", "keys", "=", "[", "\"image\"", ",", "\"label\"", "]", ",", "dtype", "=", "(", "torch", ".", "float32", ",", "torch", ".", "uint8", ")", ")", ",", "ToTensord", "(", "keys", "=", "[", "\"image\"", ",", "\"label\"", "]", ")", "]", "\n", ")", "\n", "return", "train_transforms", "\n", "\n"]], "home.repos.pwc.inspect_result.project-monai_research-contributions.DiNTS.transforms.creating_transforms_validation": [[117, 139], ["monai.transforms.Compose", "monai.transforms.CastToTyped", "monai.transforms.EnsureTyped", "monai.transforms.RandShiftIntensityd", "monai.transforms.CastToTyped", "monai.transforms.ToTensord", "monai.transforms.CastToTyped", "monai.transforms.LoadImaged", "transforms.CorrectLabelAffined", "monai.transforms.EnsureChannelFirstd", "monai.transforms.Orientationd"], "function", ["None"], ["", "def", "creating_transforms_validation", "(", "\n", "foreground_crop_margin", ",", "label_interpolation_transform", ",", "patch_size", ",", "intensity_norm_transforms", ",", "device", "\n", ")", ":", "\n", "    ", "val_transforms", "=", "Compose", "(", "\n", "[", "\n", "LoadImaged", "(", "keys", "=", "[", "\"image\"", ",", "\"label\"", "]", ")", ",", "\n", "CorrectLabelAffined", "(", "keys", "=", "[", "\"image\"", ",", "\"label\"", "]", ")", ",", "\n", "EnsureChannelFirstd", "(", "keys", "=", "[", "\"image\"", ",", "\"label\"", "]", ")", ",", "\n", "Orientationd", "(", "keys", "=", "[", "\"image\"", ",", "\"label\"", "]", ",", "axcodes", "=", "\"RAS\"", ")", ",", "\n", "]", "\n", "+", "label_interpolation_transform", "\n", "+", "[", "CastToTyped", "(", "keys", "=", "[", "\"image\"", "]", ",", "dtype", "=", "(", "torch", ".", "float32", ")", ")", "]", "\n", "+", "intensity_norm_transforms", "\n", "+", "[", "\n", "CastToTyped", "(", "keys", "=", "[", "\"image\"", ",", "\"label\"", "]", ",", "dtype", "=", "(", "np", ".", "float16", ",", "np", ".", "uint8", ")", ")", ",", "\n", "EnsureTyped", "(", "keys", "=", "[", "\"image\"", ",", "\"label\"", "]", ")", ",", "\n", "RandShiftIntensityd", "(", "keys", "=", "[", "\"image\"", "]", ",", "offsets", "=", "0.0", ",", "prob", "=", "0.001", ")", ",", "\n", "CastToTyped", "(", "keys", "=", "[", "\"image\"", ",", "\"label\"", "]", ",", "dtype", "=", "(", "torch", ".", "float32", ",", "torch", ".", "uint8", ")", ")", ",", "\n", "ToTensord", "(", "keys", "=", "[", "\"image\"", ",", "\"label\"", "]", ")", ",", "\n", "]", "\n", ")", "\n", "return", "val_transforms", "\n", "\n"]], "home.repos.pwc.inspect_result.project-monai_research-contributions.DiNTS.transforms.creating_transforms_testing": [[141, 154], ["monai.transforms.Compose", "monai.transforms.ToTensord", "monai.transforms.LoadImaged", "monai.transforms.EnsureChannelFirstd", "monai.transforms.Orientationd", "monai.transforms.CastToTyped", "monai.transforms.Spacingd"], "function", ["None"], ["", "def", "creating_transforms_testing", "(", "foreground_crop_margin", ",", "intensity_norm_transforms", ",", "spacing", ")", ":", "\n", "    ", "test_transforms", "=", "Compose", "(", "\n", "[", "\n", "LoadImaged", "(", "keys", "=", "[", "\"image\"", "]", ")", ",", "\n", "EnsureChannelFirstd", "(", "keys", "=", "[", "\"image\"", "]", ")", ",", "\n", "Orientationd", "(", "keys", "=", "[", "\"image\"", "]", ",", "axcodes", "=", "\"RAS\"", ")", ",", "\n", "CastToTyped", "(", "keys", "=", "[", "\"image\"", "]", ",", "dtype", "=", "(", "np", ".", "float32", ")", ")", ",", "\n", "Spacingd", "(", "keys", "=", "[", "\"image\"", "]", ",", "pixdim", "=", "spacing", ",", "mode", "=", "[", "\"bilinear\"", "]", ",", "align_corners", "=", "[", "True", "]", ")", ",", "\n", "]", "\n", "+", "intensity_norm_transforms", "\n", "+", "[", "ToTensord", "(", "keys", "=", "[", "\"image\"", "]", ")", "]", "\n", ")", "\n", "return", "test_transforms", "\n", "", ""]], "home.repos.pwc.inspect_result.project-monai_research-contributions.DiNTS.train_multi-gpu.main": [[56, 481], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "logging.basicConfig", "print", "int", "int", "numpy.array", "int", "tuple", "tuple", "torch.init_process_group", "torch.barrier", "torch.get_world_size", "len", "range", "intensity_norm.split.split", "range", "interpolation.split.split", "range", "range", "print", "range", "print", "torch.device", "torch.device", "torch.device", "torch.device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "transforms.creating_transforms_training", "transforms.creating_transforms_validation", "monai.data.CacheDataset", "monai.data.CacheDataset", "monai.data.ThreadDataLoader", "monai.data.ThreadDataLoader", "torch.load", "torch.load", "torch.load", "torch.load", "monai.networks.nets.TopologyInstance", "monai.networks.nets.DiNTS", "torch.nn.parallel.DistributedDataParallel.to", "torch.nn.SyncBatchNorm.convert_sync_batchnorm", "torch.nn.SyncBatchNorm.convert_sync_batchnorm", "torch.nn.SyncBatchNorm.convert_sync_batchnorm", "torch.nn.SyncBatchNorm.convert_sync_batchnorm", "monai.transforms.Compose", "monai.transforms.Compose", "monai.losses.DiceCELoss", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "print", "list", "list", "time.time", "range", "print", "torch.destroy_process_group", "os.path.exists", "os.makedirs", "open", "yaml.full_load", "pandas.DataFrame", "list", "map", "map", "monai.utils.set_determinism", "config_aug.keys", "utils.parse_monai_specs", "getattr", "getattr.", "augmenations.append", "len", "utils.parse_monai_specs", "getattr", "getattr.", "intensity_norm_transforms.append", "len", "utils.parse_monai_specs", "getattr", "getattr.", "interpolation_transforms.append", "open", "json.load", "len", "len", "os.path.join", "os.path.join", "files.append", "monai.data.partition_dataset", "len", "len", "os.path.join", "os.path.join", "files.append", "monai.data.partition_dataset", "len", "torch.nn.parallel.DistributedDataParallel.parameters", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.nn.parallel.DistributedDataParallel", "os.path.isfile", "print", "torch.nn.parallel.DistributedDataParallel.load_state_dict", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "print", "GradScaler", "torch.get_rank", "torch.utils.tensorboard.SummaryWriter", "torch.nn.parallel.DistributedDataParallel.train", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.barrier", "torch.all_reduce", "loss_torch.tolist.tolist", "torch.get_rank", "torch.utils.tensorboard.SummaryWriter.close", "map", "config_core[].split", "config_core[].split", "torch.get_rank", "print", "transform_dict.keys", "torch.get_rank", "print", "transform_dict.keys", "torch.get_rank", "print", "transform_dict.keys", "torch.get_rank", "torch.get_rank", "monai.transforms.EnsureType", "monai.transforms.AsDiscrete", "monai.transforms.EnsureType", "monai.transforms.AsDiscrete", "torch.get_rank", "print", "torch.load", "torch.load", "torch.load", "torch.load", "torch.get_rank", "print", "open", "f.write", "numpy.sum", "torch.get_rank", "print", "print", "print", "torch.nn.parallel.DistributedDataParallel.parameters", "loss_func.item", "loss_func.item", "len", "torch.get_rank", "print", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.nn.parallel.DistributedDataParallel.eval", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "config_core[].split", "print", "print", "print", "os.path.exists", "os.path.exists", "torch.get_world_size", "os.path.exists", "os.path.exists", "torch.get_world_size", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "os.path.join", "os.path.join", "batch_data[].to", "batch_data[].to", "GradScaler.scale().backward", "GradScaler.step", "GradScaler.update", "torch.nn.parallel.DistributedDataParallel.", "loss_func.backward", "torch.optim.SGD.step", "torch.get_rank", "print", "torch.utils.tensorboard.SummaryWriter.add_scalar", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.barrier", "torch.all_reduce", "metric.tolist.tolist", "torch.barrier", "autocast", "torch.nn.parallel.DistributedDataParallel.", "monai.losses.DiceCELoss.", "monai.losses.DiceCELoss.", "loss_func.item", "val_data[].to", "val_data[].to", "monai.transforms.Compose.", "monai.transforms.Compose.", "monai.metrics.compute_meandice", "print", "len", "monai.metrics.compute_meandice.sum().item", "monai.metrics.compute_meandice.cpu().numpy", "range", "torch.get_rank", "range", "range", "print", "print", "time.time", "monai.losses.DiceCELoss.", "monai.losses.DiceCELoss.", "GradScaler.scale", "torch.flip", "torch.flip", "torch.flip", "torch.flip", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "monai.inferers.sliding_window_inference", "len", "len", "numpy.concatenate", "torch.nan_to_num", "torch.nan_to_num", "torch.nan_to_num", "torch.nan_to_num", "print", "float", "torch.save", "torch.save", "torch.save", "torch.save", "print", "float", "int", "int", "open", "f.write", "torch.flip", "torch.flip", "torch.flip", "torch.flip", "monai.metrics.compute_meandice.sum", "monai.metrics.compute_meandice.cpu", "torch.isnan().float", "torch.isnan().float", "torch.isnan().float", "torch.isnan().float", "torch.nn.parallel.DistributedDataParallel.state_dict", "os.path.join", "open", "yaml.dump", "os.path.join", "str", "loss_func.item", "torch.nn.parallel.DistributedDataParallel.", "os.path.join", "datetime.datetime.now", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan"], "function", ["home.repos.pwc.inspect_result.project-monai_research-contributions.DiNTS.transforms.creating_transforms_training", "home.repos.pwc.inspect_result.project-monai_research-contributions.DiNTS.transforms.creating_transforms_validation", "home.repos.pwc.inspect_result.project-monai_research-contributions.DiNTS.utils.parse_monai_specs", "home.repos.pwc.inspect_result.project-monai_research-contributions.DiNTS.utils.parse_monai_specs", "home.repos.pwc.inspect_result.project-monai_research-contributions.DiNTS.utils.parse_monai_specs", "home.repos.pwc.inspect_result.project-monai_research-contributions.lamp-automated-model-parallelism.train.train", "home.repos.pwc.inspect_result.project-monai_research-contributions.utils.utils.AverageMeter.update"], ["def", "main", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "\"training\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--arch_ckpt\"", ",", "action", "=", "\"store\"", ",", "required", "=", "True", ",", "help", "=", "\"data root\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--checkpoint\"", ",", "type", "=", "str", ",", "default", "=", "None", ",", "help", "=", "\"checkpoint full path\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--config\"", ",", "action", "=", "\"store\"", ",", "required", "=", "True", ",", "help", "=", "\"configuration\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--fold\"", ",", "action", "=", "\"store\"", ",", "required", "=", "True", ",", "help", "=", "\"fold index in N-fold cross-validation\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--json\"", ",", "action", "=", "\"store\"", ",", "required", "=", "True", ",", "help", "=", "\"full path of .json file\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--json_key\"", ",", "action", "=", "\"store\"", ",", "required", "=", "True", ",", "help", "=", "\"selected key in .json data list\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--local_rank\"", ",", "required", "=", "int", ",", "help", "=", "\"local process rank\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--num_folds\"", ",", "action", "=", "\"store\"", ",", "required", "=", "True", ",", "help", "=", "\"number of folds in cross-validation\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--output_root\"", ",", "action", "=", "\"store\"", ",", "required", "=", "True", ",", "help", "=", "\"output root\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--root\"", ",", "action", "=", "\"store\"", ",", "required", "=", "True", ",", "help", "=", "\"data root\"", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "logging", ".", "basicConfig", "(", "stream", "=", "sys", ".", "stdout", ",", "level", "=", "logging", ".", "INFO", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "args", ".", "output_root", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "args", ".", "output_root", ")", "\n", "\n", "# configuration", "\n", "", "with", "open", "(", "args", ".", "config", ")", "as", "in_file", ":", "\n", "        ", "config", "=", "yaml", ".", "full_load", "(", "in_file", ")", "\n", "", "print", "(", "\"\\n\"", ",", "pd", ".", "DataFrame", "(", "config", ")", ",", "\"\\n\"", ")", "\n", "\n", "# core", "\n", "config_core", "=", "config", "[", "\"core\"", "]", "\n", "amp", "=", "config_core", "[", "\"amp\"", "]", "\n", "determ", "=", "config_core", "[", "\"deterministic\"", "]", "\n", "fold", "=", "int", "(", "args", ".", "fold", ")", "\n", "foreground_crop_margin", "=", "int", "(", "config_core", "[", "\"foreground_crop_margin\"", "]", ")", "\n", "input_channels", "=", "config_core", "[", "\"input_channels\"", "]", "\n", "intensity_norm", "=", "config_core", "[", "\"intensity_norm\"", "]", "\n", "interpolation", "=", "config_core", "[", "\"interpolation\"", "]", "\n", "learning_rate", "=", "config_core", "[", "\"learning_rate\"", "]", "\n", "learning_rate_milestones", "=", "np", ".", "array", "(", "list", "(", "map", "(", "float", ",", "config_core", "[", "\"learning_rate_milestones\"", "]", ".", "split", "(", "\",\"", ")", ")", ")", ")", "\n", "num_images_per_batch", "=", "config_core", "[", "\"num_images_per_batch\"", "]", "\n", "num_epochs", "=", "config_core", "[", "\"num_epochs\"", "]", "\n", "num_epochs_per_validation", "=", "config_core", "[", "\"num_epochs_per_validation\"", "]", "\n", "num_folds", "=", "int", "(", "args", ".", "num_folds", ")", "\n", "num_patches_per_image", "=", "config_core", "[", "\"num_patches_per_image\"", "]", "\n", "num_sw_batch_size", "=", "config_core", "[", "\"num_sw_batch_size\"", "]", "\n", "output_classes", "=", "config_core", "[", "\"output_classes\"", "]", "\n", "overlap_ratio", "=", "config_core", "[", "\"overlap_ratio\"", "]", "\n", "patch_size", "=", "tuple", "(", "map", "(", "int", ",", "config_core", "[", "\"patch_size\"", "]", ".", "split", "(", "\",\"", ")", ")", ")", "\n", "patch_size_valid", "=", "tuple", "(", "map", "(", "int", ",", "config_core", "[", "\"infer_patch_size\"", "]", ".", "split", "(", "\",\"", ")", ")", ")", "\n", "\n", "# deterministic training", "\n", "if", "determ", ":", "\n", "        ", "set_determinism", "(", "seed", "=", "config_core", "[", "\"random_seed\"", "]", ")", "\n", "\n", "# initialize the distributed training process, every GPU runs in a process", "\n", "", "dist", ".", "init_process_group", "(", "backend", "=", "\"nccl\"", ",", "init_method", "=", "\"env://\"", ")", "\n", "dist", ".", "barrier", "(", ")", "\n", "world_size", "=", "dist", ".", "get_world_size", "(", ")", "\n", "\n", "# augmentation", "\n", "config_aug", "=", "config", "[", "\"augmentation_monai\"", "]", "\n", "num_augmentations", "=", "len", "(", "config_aug", ".", "keys", "(", ")", ")", "\n", "augmenations", "=", "[", "]", "\n", "for", "_k", "in", "range", "(", "num_augmentations", ")", ":", "\n", "        ", "transform_string", "=", "config_aug", "[", "\"aug_{0:d}\"", ".", "format", "(", "_k", ")", "]", "\n", "transform_name", ",", "transform_dict", "=", "parse_monai_specs", "(", "transform_string", ")", "\n", "if", "dist", ".", "get_rank", "(", ")", "==", "0", ":", "\n", "            ", "print", "(", "\"\\naugmenation {0:d}:\\t{1:s}\"", ".", "format", "(", "_k", "+", "1", ",", "transform_name", ")", ")", "\n", "for", "_key", "in", "transform_dict", ".", "keys", "(", ")", ":", "\n", "                ", "print", "(", "\"  {0}:\\t{1}\"", ".", "format", "(", "_key", ",", "transform_dict", "[", "_key", "]", ")", ")", "\n", "", "", "transform_class", "=", "getattr", "(", "monai", ".", "transforms", ",", "transform_name", ")", "\n", "transform_func", "=", "transform_class", "(", "**", "transform_dict", ")", "\n", "augmenations", ".", "append", "(", "transform_func", ")", "\n", "\n", "# intensity normalization", "\n", "", "intensity_norm", "=", "intensity_norm", ".", "split", "(", "\"||\"", ")", "\n", "intensity_norm_transforms", "=", "[", "]", "\n", "for", "_k", "in", "range", "(", "len", "(", "intensity_norm", ")", ")", ":", "\n", "        ", "transform_string", "=", "intensity_norm", "[", "_k", "]", "\n", "transform_name", ",", "transform_dict", "=", "parse_monai_specs", "(", "transform_string", ")", "\n", "if", "dist", ".", "get_rank", "(", ")", "==", "0", ":", "\n", "            ", "print", "(", "\"\\nintensity normalization {0:d}:\\t{1:s}\"", ".", "format", "(", "_k", "+", "1", ",", "transform_name", ")", ")", "\n", "for", "_key", "in", "transform_dict", ".", "keys", "(", ")", ":", "\n", "                ", "print", "(", "\"  {0}:\\t{1}\"", ".", "format", "(", "_key", ",", "transform_dict", "[", "_key", "]", ")", ")", "\n", "", "", "transform_class", "=", "getattr", "(", "monai", ".", "transforms", ",", "transform_name", ")", "\n", "transform_func", "=", "transform_class", "(", "**", "transform_dict", ")", "\n", "intensity_norm_transforms", ".", "append", "(", "transform_func", ")", "\n", "\n", "# interpolation (re-sampling)", "\n", "", "interpolation", "=", "interpolation", ".", "split", "(", "\"||\"", ")", "\n", "interpolation_transforms", "=", "[", "]", "\n", "for", "_k", "in", "range", "(", "len", "(", "interpolation", ")", ")", ":", "\n", "        ", "transform_string", "=", "interpolation", "[", "_k", "]", "\n", "transform_name", ",", "transform_dict", "=", "parse_monai_specs", "(", "transform_string", ")", "\n", "if", "dist", ".", "get_rank", "(", ")", "==", "0", ":", "\n", "            ", "print", "(", "\"\\ninterpolation {0:d}:\\t{1:s}\"", ".", "format", "(", "_k", "+", "1", ",", "transform_name", ")", ")", "\n", "for", "_key", "in", "transform_dict", ".", "keys", "(", ")", ":", "\n", "                ", "print", "(", "\"  {0}:\\t{1}\"", ".", "format", "(", "_key", ",", "transform_dict", "[", "_key", "]", ")", ")", "\n", "", "", "transform_class", "=", "getattr", "(", "monai", ".", "transforms", ",", "transform_name", ")", "\n", "transform_func", "=", "transform_class", "(", "**", "transform_dict", ")", "\n", "interpolation_transforms", ".", "append", "(", "transform_func", ")", "\n", "\n", "# data", "\n", "", "with", "open", "(", "args", ".", "json", ",", "\"r\"", ")", "as", "f", ":", "\n", "        ", "json_data", "=", "json", ".", "load", "(", "f", ")", "\n", "\n", "", "split", "=", "len", "(", "json_data", "[", "args", ".", "json_key", "]", ")", "//", "num_folds", "\n", "list_train", "=", "json_data", "[", "args", ".", "json_key", "]", "[", ":", "(", "split", "*", "fold", ")", "]", "+", "json_data", "[", "args", ".", "json_key", "]", "[", "(", "split", "*", "(", "fold", "+", "1", ")", ")", ":", "]", "\n", "list_valid", "=", "json_data", "[", "args", ".", "json_key", "]", "[", "(", "split", "*", "fold", ")", ":", "(", "split", "*", "(", "fold", "+", "1", ")", ")", "]", "\n", "\n", "# training data", "\n", "files", "=", "[", "]", "\n", "for", "_i", "in", "range", "(", "len", "(", "list_train", ")", ")", ":", "\n", "        ", "str_img", "=", "os", ".", "path", ".", "join", "(", "args", ".", "root", ",", "list_train", "[", "_i", "]", "[", "\"image\"", "]", ")", "\n", "str_seg", "=", "os", ".", "path", ".", "join", "(", "args", ".", "root", ",", "list_train", "[", "_i", "]", "[", "\"label\"", "]", ")", "\n", "\n", "if", "(", "not", "os", ".", "path", ".", "exists", "(", "str_img", ")", ")", "or", "(", "not", "os", ".", "path", ".", "exists", "(", "str_seg", ")", ")", ":", "\n", "            ", "continue", "\n", "\n", "", "files", ".", "append", "(", "{", "\"image\"", ":", "str_img", ",", "\"label\"", ":", "str_seg", "}", ")", "\n", "\n", "", "train_files", "=", "files", "\n", "train_files", "=", "partition_dataset", "(", "\n", "data", "=", "train_files", ",", "shuffle", "=", "True", ",", "num_partitions", "=", "dist", ".", "get_world_size", "(", ")", ",", "even_divisible", "=", "True", "\n", ")", "[", "dist", ".", "get_rank", "(", ")", "]", "\n", "print", "(", "\"train_files:\"", ",", "len", "(", "train_files", ")", ")", "\n", "\n", "# validation data", "\n", "files", "=", "[", "]", "\n", "for", "_i", "in", "range", "(", "len", "(", "list_valid", ")", ")", ":", "\n", "        ", "str_img", "=", "os", ".", "path", ".", "join", "(", "args", ".", "root", ",", "list_valid", "[", "_i", "]", "[", "\"image\"", "]", ")", "\n", "str_seg", "=", "os", ".", "path", ".", "join", "(", "args", ".", "root", ",", "list_valid", "[", "_i", "]", "[", "\"label\"", "]", ")", "\n", "\n", "if", "(", "not", "os", ".", "path", ".", "exists", "(", "str_img", ")", ")", "or", "(", "not", "os", ".", "path", ".", "exists", "(", "str_seg", ")", ")", ":", "\n", "            ", "continue", "\n", "\n", "", "files", ".", "append", "(", "{", "\"image\"", ":", "str_img", ",", "\"label\"", ":", "str_seg", "}", ")", "\n", "\n", "", "val_files", "=", "files", "\n", "val_files", "=", "partition_dataset", "(", "\n", "data", "=", "val_files", ",", "shuffle", "=", "False", ",", "num_partitions", "=", "dist", ".", "get_world_size", "(", ")", ",", "even_divisible", "=", "False", "\n", ")", "[", "dist", ".", "get_rank", "(", ")", "]", "\n", "print", "(", "\"val_files:\"", ",", "len", "(", "val_files", ")", ")", "\n", "\n", "device", "=", "torch", ".", "device", "(", "f\"cuda:{args.local_rank}\"", ")", "\n", "torch", ".", "cuda", ".", "set_device", "(", "device", ")", "\n", "\n", "train_transforms", "=", "creating_transforms_training", "(", "\n", "foreground_crop_margin", ",", "\n", "interpolation_transforms", ",", "\n", "num_patches_per_image", ",", "\n", "patch_size", ",", "\n", "intensity_norm_transforms", ",", "\n", "augmenations", ",", "\n", "device", ",", "\n", "output_classes", ",", "\n", ")", "\n", "val_transforms", "=", "creating_transforms_validation", "(", "\n", "foreground_crop_margin", ",", "interpolation_transforms", ",", "patch_size", ",", "intensity_norm_transforms", ",", "device", "\n", ")", "\n", "\n", "# alternative Dataset", "\n", "# train_ds = monai.data.Dataset(data=train_files, transform=train_transforms)", "\n", "# val_ds = monai.data.Dataset(data=val_files, transform=val_transforms)", "\n", "\n", "train_ds", "=", "monai", ".", "data", ".", "CacheDataset", "(", "data", "=", "train_files", ",", "transform", "=", "train_transforms", ",", "cache_rate", "=", "1.0", ",", "num_workers", "=", "8", ")", "\n", "val_ds", "=", "monai", ".", "data", ".", "CacheDataset", "(", "data", "=", "val_files", ",", "transform", "=", "val_transforms", ",", "cache_rate", "=", "1.0", ",", "num_workers", "=", "2", ")", "\n", "\n", "# alternative DataLoader", "\n", "# train_loader = DataLoader(train_ds, batch_size=num_images_per_batch, shuffle=True, num_workers=8, pin_memory=torch.cuda.is_available())", "\n", "# val_loader = DataLoader(val_ds, batch_size=1, shuffle=False, num_workers=2, pin_memory=torch.cuda.is_available())", "\n", "\n", "train_loader", "=", "ThreadDataLoader", "(", "train_ds", ",", "num_workers", "=", "0", ",", "batch_size", "=", "num_images_per_batch", ",", "shuffle", "=", "True", ")", "\n", "val_loader", "=", "ThreadDataLoader", "(", "val_ds", ",", "num_workers", "=", "0", ",", "batch_size", "=", "1", ",", "shuffle", "=", "False", ")", "\n", "\n", "ckpt", "=", "torch", ".", "load", "(", "args", ".", "arch_ckpt", ")", "\n", "node_a", "=", "ckpt", "[", "\"node_a\"", "]", "\n", "arch_code_a", "=", "ckpt", "[", "\"arch_code_a\"", "]", "\n", "arch_code_c", "=", "ckpt", "[", "\"arch_code_c\"", "]", "\n", "\n", "dints_space", "=", "monai", ".", "networks", ".", "nets", ".", "TopologyInstance", "(", "\n", "channel_mul", "=", "1.0", ",", "\n", "num_blocks", "=", "12", ",", "\n", "num_depths", "=", "4", ",", "\n", "use_downsample", "=", "True", ",", "\n", "arch_code", "=", "[", "arch_code_a", ",", "arch_code_c", "]", ",", "\n", "device", "=", "device", ",", "\n", ")", "\n", "\n", "model", "=", "monai", ".", "networks", ".", "nets", ".", "DiNTS", "(", "\n", "dints_space", "=", "dints_space", ",", "\n", "in_channels", "=", "input_channels", ",", "\n", "num_classes", "=", "output_classes", ",", "\n", "use_downsample", "=", "True", ",", "\n", "node_a", "=", "node_a", ",", "\n", ")", "\n", "\n", "model", "=", "model", ".", "to", "(", "device", ")", "\n", "model", "=", "torch", ".", "nn", ".", "SyncBatchNorm", ".", "convert_sync_batchnorm", "(", "model", ")", "\n", "\n", "post_pred", "=", "Compose", "(", "[", "EnsureType", "(", ")", ",", "AsDiscrete", "(", "argmax", "=", "True", ",", "to_onehot", "=", "output_classes", ")", "]", ")", "\n", "post_label", "=", "Compose", "(", "[", "EnsureType", "(", ")", ",", "AsDiscrete", "(", "to_onehot", "=", "output_classes", ")", "]", ")", "\n", "\n", "# loss function", "\n", "loss_func", "=", "monai", ".", "losses", ".", "DiceCELoss", "(", "\n", "include_background", "=", "False", ",", "\n", "to_onehot_y", "=", "True", ",", "\n", "softmax", "=", "True", ",", "\n", "squared_pred", "=", "True", ",", "\n", "batch", "=", "True", ",", "\n", "smooth_nr", "=", "0.00001", ",", "\n", "smooth_dr", "=", "0.00001", ",", "\n", ")", "\n", "\n", "# optimizer", "\n", "optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "learning_rate", "*", "world_size", ",", "momentum", "=", "0.9", ",", "weight_decay", "=", "0.00004", ")", "\n", "\n", "print", "(", ")", "\n", "\n", "if", "torch", ".", "cuda", ".", "device_count", "(", ")", ">", "1", ":", "\n", "        ", "if", "dist", ".", "get_rank", "(", ")", "==", "0", ":", "\n", "            ", "print", "(", "\"Let's use\"", ",", "torch", ".", "cuda", ".", "device_count", "(", ")", ",", "\"GPUs!\"", ")", "\n", "\n", "", "model", "=", "DistributedDataParallel", "(", "model", ",", "device_ids", "=", "[", "device", "]", ",", "find_unused_parameters", "=", "True", ")", "\n", "\n", "", "if", "args", ".", "checkpoint", "is", "not", "None", "and", "os", ".", "path", ".", "isfile", "(", "args", ".", "checkpoint", ")", ":", "\n", "        ", "print", "(", "\"[info] fine-tuning pre-trained checkpoint {0:s}\"", ".", "format", "(", "args", ".", "checkpoint", ")", ")", "\n", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "args", ".", "checkpoint", ",", "map_location", "=", "device", ")", ")", "\n", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "\"[info] training from scratch\"", ")", "\n", "\n", "# amp", "\n", "", "if", "amp", ":", "\n", "        ", "from", "torch", ".", "cuda", ".", "amp", "import", "GradScaler", ",", "autocast", "\n", "\n", "scaler", "=", "GradScaler", "(", ")", "\n", "if", "dist", ".", "get_rank", "(", ")", "==", "0", ":", "\n", "            ", "print", "(", "\"[info] amp enabled\"", ")", "\n", "\n", "# start a typical PyTorch training", "\n", "", "", "val_interval", "=", "num_epochs_per_validation", "\n", "best_metric", "=", "-", "1", "\n", "best_metric_epoch", "=", "-", "1", "\n", "epoch_loss_values", "=", "list", "(", ")", "\n", "idx_iter", "=", "0", "\n", "metric_values", "=", "list", "(", ")", "\n", "\n", "if", "dist", ".", "get_rank", "(", ")", "==", "0", ":", "\n", "        ", "writer", "=", "SummaryWriter", "(", "log_dir", "=", "os", ".", "path", ".", "join", "(", "args", ".", "output_root", ",", "\"Events\"", ")", ")", "\n", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "args", ".", "output_root", ",", "\"accuracy_history.csv\"", ")", ",", "\"a\"", ")", "as", "f", ":", "\n", "            ", "f", ".", "write", "(", "\"epoch\\tmetric\\tloss\\tlr\\ttime\\titer\\n\"", ")", "\n", "\n", "", "", "start_time", "=", "time", ".", "time", "(", ")", "\n", "for", "epoch", "in", "range", "(", "num_epochs", ")", ":", "\n", "        ", "decay", "=", "0.5", "**", "np", ".", "sum", "(", "[", "epoch", "/", "num_epochs", ">", "learning_rate_milestones", "]", ")", "\n", "lr", "=", "learning_rate", "*", "decay", "\n", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "            ", "param_group", "[", "\"lr\"", "]", "=", "lr", "\n", "\n", "", "if", "dist", ".", "get_rank", "(", ")", "==", "0", ":", "\n", "            ", "print", "(", "\"-\"", "*", "10", ")", "\n", "print", "(", "f\"epoch {epoch + 1}/{num_epochs}\"", ")", "\n", "print", "(", "\"learning rate is set to {}\"", ".", "format", "(", "lr", ")", ")", "\n", "\n", "", "model", ".", "train", "(", ")", "\n", "epoch_loss", "=", "0", "\n", "loss_torch", "=", "torch", ".", "zeros", "(", "2", ",", "dtype", "=", "torch", ".", "float", ",", "device", "=", "device", ")", "\n", "step", "=", "0", "\n", "\n", "for", "batch_data", "in", "train_loader", ":", "\n", "            ", "step", "+=", "1", "\n", "inputs", ",", "labels", "=", "batch_data", "[", "\"image\"", "]", ".", "to", "(", "device", ")", ",", "batch_data", "[", "\"label\"", "]", ".", "to", "(", "device", ")", "\n", "\n", "for", "param", "in", "model", ".", "parameters", "(", ")", ":", "\n", "                ", "param", ".", "grad", "=", "None", "\n", "\n", "", "if", "amp", ":", "\n", "                ", "with", "autocast", "(", ")", ":", "\n", "                    ", "outputs", "=", "model", "(", "inputs", ")", "\n", "if", "output_classes", "==", "2", ":", "\n", "                        ", "loss", "=", "loss_func", "(", "torch", ".", "flip", "(", "outputs", ",", "dims", "=", "[", "1", "]", ")", ",", "1", "-", "labels", ")", "\n", "", "else", ":", "\n", "                        ", "loss", "=", "loss_func", "(", "outputs", ",", "labels", ")", "\n", "\n", "", "", "scaler", ".", "scale", "(", "loss", ")", ".", "backward", "(", ")", "\n", "scaler", ".", "step", "(", "optimizer", ")", "\n", "scaler", ".", "update", "(", ")", "\n", "", "else", ":", "\n", "                ", "outputs", "=", "model", "(", "inputs", ")", "\n", "if", "output_classes", "==", "2", ":", "\n", "                    ", "loss", "=", "loss_func", "(", "torch", ".", "flip", "(", "outputs", ",", "dims", "=", "[", "1", "]", ")", ",", "1", "-", "labels", ")", "\n", "", "else", ":", "\n", "                    ", "loss", "=", "loss_func", "(", "outputs", ",", "labels", ")", "\n", "", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "", "epoch_loss", "+=", "loss", ".", "item", "(", ")", "\n", "loss_torch", "[", "0", "]", "+=", "loss", ".", "item", "(", ")", "\n", "loss_torch", "[", "1", "]", "+=", "1.0", "\n", "epoch_len", "=", "len", "(", "train_loader", ")", "\n", "idx_iter", "+=", "1", "\n", "\n", "if", "dist", ".", "get_rank", "(", ")", "==", "0", ":", "\n", "                ", "print", "(", "\"[{0}] \"", ".", "format", "(", "str", "(", "datetime", ".", "now", "(", ")", ")", "[", ":", "19", "]", ")", "+", "f\"{step}/{epoch_len}, train_loss: {loss.item():.4f}\"", ")", "\n", "writer", ".", "add_scalar", "(", "\"train_loss\"", ",", "loss", ".", "item", "(", ")", ",", "epoch_len", "*", "epoch", "+", "step", ")", "\n", "\n", "# synchronizes all processes and reduce results", "\n", "", "", "dist", ".", "barrier", "(", ")", "\n", "dist", ".", "all_reduce", "(", "loss_torch", ",", "op", "=", "torch", ".", "distributed", ".", "ReduceOp", ".", "SUM", ")", "\n", "loss_torch", "=", "loss_torch", ".", "tolist", "(", ")", "\n", "if", "dist", ".", "get_rank", "(", ")", "==", "0", ":", "\n", "            ", "loss_torch_epoch", "=", "loss_torch", "[", "0", "]", "/", "loss_torch", "[", "1", "]", "\n", "print", "(", "\n", "f\"epoch {epoch + 1} average loss: {loss_torch_epoch:.4f}, best mean dice: {best_metric:.4f} at epoch {best_metric_epoch}\"", "\n", ")", "\n", "\n", "", "if", "(", "epoch", "+", "1", ")", "%", "val_interval", "==", "0", "or", "(", "epoch", "+", "1", ")", "==", "num_epochs", ":", "\n", "            ", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "model", ".", "eval", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "metric", "=", "torch", ".", "zeros", "(", "(", "output_classes", "-", "1", ")", "*", "2", ",", "dtype", "=", "torch", ".", "float", ",", "device", "=", "device", ")", "\n", "metric_sum", "=", "0.0", "\n", "metric_count", "=", "0", "\n", "metric_mat", "=", "[", "]", "\n", "val_images", "=", "None", "\n", "val_labels", "=", "None", "\n", "val_outputs", "=", "None", "\n", "\n", "_index", "=", "0", "\n", "for", "val_data", "in", "val_loader", ":", "\n", "                    ", "val_images", "=", "val_data", "[", "\"image\"", "]", ".", "to", "(", "device", ")", "\n", "val_labels", "=", "val_data", "[", "\"label\"", "]", ".", "to", "(", "device", ")", "\n", "\n", "roi_size", "=", "patch_size_valid", "\n", "sw_batch_size", "=", "num_sw_batch_size", "\n", "\n", "ct", "=", "1.0", "\n", "with", "torch", ".", "cuda", ".", "amp", ".", "autocast", "(", ")", ":", "\n", "                        ", "pred", "=", "sliding_window_inference", "(", "\n", "val_images", ",", "\n", "roi_size", ",", "\n", "sw_batch_size", ",", "\n", "lambda", "x", ":", "model", "(", "x", ")", ",", "\n", "mode", "=", "\"gaussian\"", ",", "\n", "overlap", "=", "overlap_ratio", ",", "\n", ")", "\n", "\n", "", "val_outputs", "=", "pred", "/", "ct", "\n", "\n", "val_outputs", "=", "post_pred", "(", "val_outputs", "[", "0", ",", "...", "]", ")", "\n", "val_outputs", "=", "val_outputs", "[", "None", ",", "...", "]", "\n", "val_labels", "=", "post_label", "(", "val_labels", "[", "0", ",", "...", "]", ")", "\n", "val_labels", "=", "val_labels", "[", "None", ",", "...", "]", "\n", "\n", "value", "=", "compute_meandice", "(", "y_pred", "=", "val_outputs", ",", "y", "=", "val_labels", ",", "include_background", "=", "False", ")", "\n", "\n", "print", "(", "_index", "+", "1", ",", "\"/\"", ",", "len", "(", "val_loader", ")", ",", "value", ")", "\n", "\n", "metric_count", "+=", "len", "(", "value", ")", "\n", "metric_sum", "+=", "value", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "metric_vals", "=", "value", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "if", "len", "(", "metric_mat", ")", "==", "0", ":", "\n", "                        ", "metric_mat", "=", "metric_vals", "\n", "", "else", ":", "\n", "                        ", "metric_mat", "=", "np", ".", "concatenate", "(", "(", "metric_mat", ",", "metric_vals", ")", ",", "axis", "=", "0", ")", "\n", "\n", "", "for", "_c", "in", "range", "(", "output_classes", "-", "1", ")", ":", "\n", "                        ", "val0", "=", "torch", ".", "nan_to_num", "(", "value", "[", "0", ",", "_c", "]", ",", "nan", "=", "0.0", ")", "\n", "val1", "=", "1.0", "-", "torch", ".", "isnan", "(", "value", "[", "0", ",", "0", "]", ")", ".", "float", "(", ")", "\n", "metric", "[", "2", "*", "_c", "]", "+=", "val0", "*", "val1", "\n", "metric", "[", "2", "*", "_c", "+", "1", "]", "+=", "val1", "\n", "\n", "", "_index", "+=", "1", "\n", "\n", "# synchronizes all processes and reduce results", "\n", "", "dist", ".", "barrier", "(", ")", "\n", "dist", ".", "all_reduce", "(", "metric", ",", "op", "=", "torch", ".", "distributed", ".", "ReduceOp", ".", "SUM", ")", "\n", "metric", "=", "metric", ".", "tolist", "(", ")", "\n", "if", "dist", ".", "get_rank", "(", ")", "==", "0", ":", "\n", "                    ", "for", "_c", "in", "range", "(", "output_classes", "-", "1", ")", ":", "\n", "                        ", "print", "(", "\"evaluation metric - class {0:d}:\"", ".", "format", "(", "_c", "+", "1", ")", ",", "metric", "[", "2", "*", "_c", "]", "/", "metric", "[", "2", "*", "_c", "+", "1", "]", ")", "\n", "", "avg_metric", "=", "0", "\n", "for", "_c", "in", "range", "(", "output_classes", "-", "1", ")", ":", "\n", "                        ", "avg_metric", "+=", "metric", "[", "2", "*", "_c", "]", "/", "metric", "[", "2", "*", "_c", "+", "1", "]", "\n", "", "avg_metric", "=", "avg_metric", "/", "float", "(", "output_classes", "-", "1", ")", "\n", "print", "(", "\"avg_metric\"", ",", "avg_metric", ")", "\n", "\n", "if", "avg_metric", ">", "best_metric", ":", "\n", "                        ", "best_metric", "=", "avg_metric", "\n", "best_metric_epoch", "=", "epoch", "+", "1", "\n", "torch", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "os", ".", "path", ".", "join", "(", "args", ".", "output_root", ",", "\"best_metric_model.pth\"", ")", ")", "\n", "print", "(", "\"saved new best metric model\"", ")", "\n", "\n", "dict_file", "=", "{", "}", "\n", "dict_file", "[", "\"best_avg_dice_score\"", "]", "=", "float", "(", "best_metric", ")", "\n", "dict_file", "[", "\"best_avg_dice_score_epoch\"", "]", "=", "int", "(", "best_metric_epoch", ")", "\n", "dict_file", "[", "\"best_avg_dice_score_iteration\"", "]", "=", "int", "(", "idx_iter", ")", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "args", ".", "output_root", ",", "\"progress.yaml\"", ")", ",", "\"w\"", ")", "as", "out_file", ":", "\n", "                            ", "documents", "=", "yaml", ".", "dump", "(", "dict_file", ",", "stream", "=", "out_file", ")", "\n", "\n", "", "", "print", "(", "\n", "\"current epoch: {} current mean dice: {:.4f} best mean dice: {:.4f} at epoch {}\"", ".", "format", "(", "\n", "epoch", "+", "1", ",", "avg_metric", ",", "best_metric", ",", "best_metric_epoch", "\n", ")", "\n", ")", "\n", "\n", "current_time", "=", "time", ".", "time", "(", ")", "\n", "elapsed_time", "=", "(", "current_time", "-", "start_time", ")", "/", "60.0", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "args", ".", "output_root", ",", "\"accuracy_history.csv\"", ")", ",", "\"a\"", ")", "as", "f", ":", "\n", "                        ", "f", ".", "write", "(", "\n", "\"{0:d}\\t{1:.5f}\\t{2:.5f}\\t{3:.5f}\\t{4:.1f}\\t{5:d}\\n\"", ".", "format", "(", "\n", "epoch", "+", "1", ",", "avg_metric", ",", "loss_torch_epoch", ",", "lr", ",", "elapsed_time", ",", "idx_iter", "\n", ")", "\n", ")", "\n", "\n", "", "", "dist", ".", "barrier", "(", ")", "\n", "\n", "", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "\n", "", "", "print", "(", "f\"train completed, best_metric: {best_metric:.4f} at epoch: {best_metric_epoch}\"", ")", "\n", "\n", "if", "dist", ".", "get_rank", "(", ")", "==", "0", ":", "\n", "        ", "writer", ".", "close", "(", ")", "\n", "\n", "", "dist", ".", "destroy_process_group", "(", ")", "\n", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.project-monai_research-contributions.DiNTS.ensemble.main": [[57, 233], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "monai.config.print_config", "logging.basicConfig", "print", "dist.init_process_group", "len", "range", "range", "print", "transforms.creating_transforms_ensemble", "monai.data.Dataset", "monai.data.DataLoader", "time.time", "dist.destroy_process_group", "os.path.exists", "os.makedirs", "open", "yaml.full_load", "pandas.DataFrame", "os.walk", "list_filenames.sort", "all_filenames.append", "len", "range", "files.append", "monai.data.partition_dataset", "len", "range", "nibabel.load", "[].numpy().squeeze", "numpy.matmul", "numpy.argmax", "scipy.ndimage.affine_transform", "nda_out.astype.astype", "nibabel.Nifti1Image", "os.path.join", "out_filename.replace.replace", "print", "nibabel.save", "os.path.join", "range", "dist.get_rank", "str", "range", "print", "ensemble_outputs.numpy", "numpy.concatenate", "print", "[].split", "list", "numpy.linalg.inv", "print", "copy.deepcopy", "print", "utils.keep_largest_cc", "nda_mask.astype.astype", "print", "os.path.join", "volume_list.append", "dist.get_world_size", "np.concatenate.squeeze().astype", "numpy.sum", "parser.parse_args.algorithm.lower", "numpy.amax", "numpy.amin", "numpy.mean", "pathlib.Path().glob", "[].numpy", "nda_mask.astype.sum", "nda_mask.astype.sum", "[].split", "os.path.join", "filename.replace.replace", "list_filenames.append", "os.path.join", "float", "parser.parse_args.algorithm.lower", "[].replace", "str", "str", "np.concatenate.squeeze", "parser.parse_args.algorithm.lower", "pathlib.Path", "float", "str", "str"], "function", ["home.repos.pwc.inspect_result.project-monai_research-contributions.DiNTS.utils.keep_largest_cc"], ["def", "main", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "\"inference\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--algorithm\"", ",", "type", "=", "str", ",", "default", "=", "None", ",", "help", "=", "\"ensemble algorithm\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--checkpoint\"", ",", "type", "=", "str", ",", "default", "=", "None", ",", "help", "=", "\"checkpoint\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--config\"", ",", "action", "=", "\"store\"", ",", "required", "=", "True", ",", "help", "=", "\"configuration\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--local_rank\"", ",", "required", "=", "int", ",", "help", "=", "\"local process rank\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--input_root\"", ",", "action", "=", "\"store\"", ",", "required", "=", "True", ",", "help", "=", "\"input root\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--original_root\"", ",", "action", "=", "\"store\"", ",", "required", "=", "True", ",", "help", "=", "\"orignal dataset root\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--output_root\"", ",", "action", "=", "\"store\"", ",", "required", "=", "True", ",", "help", "=", "\"output root\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--post\"", ",", "default", "=", "False", ",", "action", "=", "\"store_true\"", ",", "help", "=", "\"post-processing\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--dir_list\"", ",", "nargs", "=", "\"*\"", ",", "type", "=", "str", ",", "default", "=", "[", "]", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "# # disable logging for processes except 0 on every node", "\n", "# if args.local_rank != 0:", "\n", "#     f = open(os.devnull, \"w\")", "\n", "#     sys.stdout = sys.stderr = f", "\n", "\n", "monai", ".", "config", ".", "print_config", "(", ")", "\n", "logging", ".", "basicConfig", "(", "stream", "=", "sys", ".", "stdout", ",", "level", "=", "logging", ".", "INFO", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "args", ".", "output_root", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "args", ".", "output_root", ")", "\n", "\n", "# configuration", "\n", "", "with", "open", "(", "args", ".", "config", ")", "as", "in_file", ":", "\n", "        ", "config", "=", "yaml", ".", "full_load", "(", "in_file", ")", "\n", "", "print", "(", "\"\\n\"", ",", "pd", ".", "DataFrame", "(", "config", ")", ",", "\"\\n\"", ")", "\n", "\n", "# core", "\n", "config_core", "=", "config", "[", "\"core\"", "]", "\n", "# amp = config_core[\"amp\"]", "\n", "# cache_replace_rate = config_core[\"cache_replace_rate\"]", "\n", "# determ = config_core[\"deterministic\"]", "\n", "# foreground_crop_margin = int(config_core[\"foreground_crop_margin\"])", "\n", "input_channels", "=", "config_core", "[", "\"input_channels\"", "]", "\n", "# label_interpolation = config_core[\"label_interpolation\"]", "\n", "# learning_rate = config_core[\"learning_rate\"]", "\n", "# learning_rate_gamma = config_core[\"learning_rate_gamma\"]", "\n", "# learning_rate_step_size = config_core[\"learning_rate_step_size\"]", "\n", "# loss_string = config_core[\"loss\"]", "\n", "# num_cache_images = config_core[\"num_cache_images\"]", "\n", "# num_images_per_batch = config_core[\"num_images_per_batch\"]", "\n", "# num_epochs = config_core[\"num_epochs\"]", "\n", "# num_epochs_per_validation = config_core[\"num_epochs_per_validation\"]", "\n", "# num_patches_per_image = config_core[\"num_patches_per_image\"]", "\n", "# num_sw_batch_size = config_core[\"num_sw_batch_size\"]", "\n", "# num_tta = config_core[\"num_tta\"]", "\n", "# optim_string = config_core[\"optimizer\"]", "\n", "output_classes", "=", "config_core", "[", "\"output_classes\"", "]", "\n", "# overlap_ratio = config_core[\"overlap_ratio\"]", "\n", "# patch_size = tuple(map(int, config_core[\"patch_size\"].split(',')))", "\n", "# patch_size_valid = patch_size", "\n", "# scale_intensity_range = list(map(float, config_core[\"scale_intensity_range\"].split(',')))", "\n", "# spacing = list(map(float, config_core[\"spacing\"].split(',')))", "\n", "\n", "# if args.debug:", "\n", "#     num_epochs_per_validation = 1", "\n", "\n", "# initialize the distributed training process, every GPU runs in a process", "\n", "dist", ".", "init_process_group", "(", "backend", "=", "\"nccl\"", ",", "init_method", "=", "\"env://\"", ")", "\n", "\n", "# # data", "\n", "# with open(args.json, \"r\") as f:", "\n", "#     json_data = json.load(f)", "\n", "\n", "# ensemble data", "\n", "num_folds", "=", "len", "(", "args", ".", "dir_list", ")", "\n", "all_filenames", "=", "[", "]", "\n", "\n", "for", "_i", "in", "range", "(", "num_folds", ")", ":", "\n", "        ", "list_filenames", "=", "[", "]", "\n", "for", "root", ",", "dirs", ",", "files", "in", "os", ".", "walk", "(", "os", ".", "path", ".", "join", "(", "args", ".", "input_root", ",", "args", ".", "dir_list", "[", "_i", "]", ")", ")", ":", "\n", "            ", "for", "basename", "in", "files", ":", "\n", "                ", "if", "\"_prob1.nii\"", "in", "basename", ":", "\n", "                    ", "filename", "=", "os", ".", "path", ".", "join", "(", "root", ",", "basename", ")", "\n", "filename", "=", "filename", ".", "replace", "(", "args", ".", "input_root", ",", "\"\"", ")", "\n", "filename", "=", "filename", "[", "1", ":", "]", "\n", "list_filenames", ".", "append", "(", "filename", ")", "\n", "", "", "", "list_filenames", ".", "sort", "(", ")", "\n", "all_filenames", ".", "append", "(", "list_filenames", ")", "\n", "num_cases", "=", "len", "(", "list_filenames", ")", "\n", "\n", "", "files", "=", "[", "]", "\n", "for", "_i", "in", "range", "(", "num_cases", ")", ":", "\n", "        ", "case_dict", "=", "{", "}", "\n", "for", "_j", "in", "range", "(", "num_folds", ")", ":", "\n", "            ", "volume_list", "=", "[", "]", "\n", "for", "_k", "in", "range", "(", "1", ",", "output_classes", ")", ":", "\n", "                ", "volume_list", ".", "append", "(", "\n", "os", ".", "path", ".", "join", "(", "args", ".", "input_root", ",", "all_filenames", "[", "_j", "]", "[", "_i", "]", ".", "replace", "(", "\"_prob1\"", ",", "\"_prob\"", "+", "str", "(", "_k", ")", ")", ")", "\n", ")", "\n", "", "case_dict", "[", "\"fold\"", "+", "str", "(", "_j", ")", "]", "=", "volume_list", "\n", "# print(case_dict)", "\n", "", "files", ".", "append", "(", "case_dict", ")", "\n", "\n", "", "ensemble_files", "=", "files", "\n", "ensemble_files", "=", "partition_dataset", "(", "\n", "data", "=", "ensemble_files", ",", "shuffle", "=", "False", ",", "num_partitions", "=", "dist", ".", "get_world_size", "(", ")", ",", "even_divisible", "=", "False", "\n", ")", "[", "dist", ".", "get_rank", "(", ")", "]", "\n", "print", "(", "\"ensemble_files\"", ",", "len", "(", "ensemble_files", ")", ")", "\n", "\n", "key_list", "=", "[", "\"fold\"", "+", "str", "(", "_item", ")", "for", "_item", "in", "range", "(", "num_folds", ")", "]", "\n", "ensemble_transforms", "=", "creating_transforms_ensemble", "(", "keys", "=", "key_list", ")", "\n", "\n", "ensemble_ds", "=", "monai", ".", "data", ".", "Dataset", "(", "data", "=", "ensemble_files", ",", "transform", "=", "ensemble_transforms", ")", "\n", "ensemble_loader", "=", "DataLoader", "(", "ensemble_ds", ",", "batch_size", "=", "1", ",", "shuffle", "=", "False", ",", "num_workers", "=", "2", ",", "pin_memory", "=", "False", ")", "\n", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "for", "ensemble_data", "in", "ensemble_loader", ":", "\n", "        ", "for", "_k", "in", "range", "(", "num_folds", ")", ":", "\n", "            ", "print", "(", "ensemble_data", "[", "\"fold\"", "+", "str", "(", "_k", ")", "+", "\"_meta_dict\"", "]", "[", "\"filename_or_obj\"", "]", "[", "0", "]", ")", "\n", "\n", "ensemble_outputs", "=", "None", "\n", "ensemble_outputs", "=", "ensemble_data", "[", "\"fold\"", "+", "str", "(", "_k", ")", "]", "\n", "\n", "nda_all", "=", "ensemble_outputs", ".", "numpy", "(", ")", "\n", "nda_all", "=", "nda_all", ".", "squeeze", "(", ")", ".", "astype", "(", "np", ".", "float32", ")", "/", "255.0", "\n", "# print(nda_all.shape, np.amax(nda_all), np.amin(nda_all))", "\n", "\n", "nda_cls0", "=", "1.0", "-", "np", ".", "sum", "(", "nda_all", ",", "axis", "=", "0", ",", "keepdims", "=", "True", ")", "\n", "nda_all", "=", "np", ".", "concatenate", "(", "(", "nda_cls0", ",", "nda_all", ")", ",", "axis", "=", "0", ")", "\n", "# print(nda_all.shape)", "\n", "\n", "if", "args", ".", "algorithm", ".", "lower", "(", ")", "==", "\"am\"", ":", "\n", "                ", "nda_all", "=", "nda_all", "/", "float", "(", "num_folds", ")", "\n", "nda_out", "=", "nda_all", "if", "_k", "==", "0", "else", "nda_out", "+", "nda_all", "\n", "", "elif", "args", ".", "algorithm", ".", "lower", "(", ")", "==", "\"gm\"", ":", "\n", "                ", "nda_all", "=", "nda_all", "**", "(", "1.0", "/", "float", "(", "num_folds", ")", ")", "\n", "nda_out", "=", "nda_all", "if", "_k", "==", "0", "else", "nda_out", "*", "nda_all", "\n", "", "elif", "args", ".", "algorithm", ".", "lower", "(", ")", "==", "\"wam\"", ":", "\n", "                ", "nda_all", "=", "nda_all", "**", "2", "\n", "nda_out", "=", "nda_all", "if", "_k", "==", "0", "else", "nda_out", "+", "nda_all", "\n", "", "else", ":", "\n", "                ", "\"[error] wrong algorithm!\"", "\n", "return", "\n", "\n", "", "print", "(", "np", ".", "amax", "(", "nda_out", ")", ",", "np", ".", "amin", "(", "nda_out", ")", ",", "np", ".", "mean", "(", "nda_out", ")", ")", "\n", "# resize to orignal data size", "\n", "# find orignal data", "\n", "", "file_basename", "=", "ensemble_data", "[", "\"fold0_meta_dict\"", "]", "[", "\"filename_or_obj\"", "]", "[", "0", "]", ".", "split", "(", "os", ".", "sep", ")", "[", "-", "1", "]", "\n", "original_data_path", "=", "list", "(", "Path", "(", "args", ".", "original_root", ")", ".", "glob", "(", "file_basename", ")", ")", "[", "0", "]", "\n", "original_data", "=", "nib", ".", "load", "(", "original_data_path", ")", "\n", "# get affine matrix", "\n", "seg_affine", "=", "ensemble_data", "[", "\"fold0_meta_dict\"", "]", "[", "\"original_affine\"", "]", ".", "numpy", "(", ")", ".", "squeeze", "(", ")", "\n", "img_affine", "=", "original_data", ".", "affine", "\n", "img_shape", "=", "original_data", ".", "shape", "\n", "T", "=", "np", ".", "matmul", "(", "np", ".", "linalg", ".", "inv", "(", "seg_affine", ")", ",", "img_affine", ")", "\n", "# output segmentation affine matches original image", "\n", "out_affine", "=", "img_affine", "\n", "nda_out", "=", "np", ".", "argmax", "(", "nda_out", ",", "axis", "=", "0", ")", "\n", "nda_out", "=", "ndi", ".", "affine_transform", "(", "nda_out", ",", "T", ",", "output_shape", "=", "img_shape", ")", "\n", "nda_out", "=", "nda_out", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "\n", "# post-processing", "\n", "if", "args", ".", "post", ":", "\n", "            ", "print", "(", "\"[info] keep largest connected component\"", ")", "\n", "nda_mask", "=", "copy", ".", "deepcopy", "(", "nda_out", ")", "\n", "nda_mask", "=", "(", "nda_mask", ">", "0", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "print", "(", "nda_mask", ".", "sum", "(", ")", ")", "\n", "nda_mask", "=", "keep_largest_cc", "(", "nda_mask", ")", "\n", "nda_mask", "=", "nda_mask", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "print", "(", "nda_mask", ".", "sum", "(", ")", ")", "\n", "nda_out", "[", "nda_mask", "==", "0", "]", "=", "0", "\n", "\n", "", "out_img", "=", "nib", ".", "Nifti1Image", "(", "nda_out", ",", "out_affine", ")", "\n", "out_filename", "=", "os", ".", "path", ".", "join", "(", "\n", "args", ".", "output_root", ",", "ensemble_data", "[", "\"fold0_meta_dict\"", "]", "[", "\"filename_or_obj\"", "]", "[", "0", "]", ".", "split", "(", "os", ".", "sep", ")", "[", "-", "1", "]", "\n", ")", "\n", "out_filename", "=", "out_filename", ".", "replace", "(", "\"_prob1\"", ",", "\"\"", ")", "\n", "print", "(", "\"out_filename\"", ",", "out_filename", ")", "\n", "nib", ".", "save", "(", "out_img", ",", "os", ".", "path", ".", "join", "(", "args", ".", "output_root", ",", "out_filename", ")", ")", "\n", "\n", "", "dist", ".", "destroy_process_group", "(", ")", "\n", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.project-monai_research-contributions.DiNTS.utils.check_number": [[22, 41], ["float", "int", "float", "str", "numpy.abs", "float.lower", "numpy.finfo", "int", "float.lower", "float.lower"], "function", ["None"], ["def", "check_number", "(", "a", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "a", "=", "float", "(", "a", ")", "\n", "if", "np", ".", "abs", "(", "a", ")", "<", "np", ".", "finfo", "(", "np", ".", "float32", ")", ".", "eps", "or", "int", "(", "a", ")", "/", "a", "==", "1", ":", "\n", "# print(\"This is Integer\")", "\n", "            ", "return", "int", "(", "a", ")", "\n", "", "else", ":", "\n", "# print(\"This is Float\")", "\n", "            ", "return", "float", "(", "a", ")", "\n", "", "", "except", "ValueError", ":", "\n", "# print(\"This value is String\")", "\n", "        ", "if", "a", ".", "lower", "(", ")", "==", "\"true\"", ":", "\n", "            ", "return", "True", "\n", "", "elif", "a", ".", "lower", "(", ")", "==", "\"false\"", ":", "\n", "            ", "return", "False", "\n", "", "elif", "a", ".", "lower", "(", ")", "==", "\"none\"", ":", "\n", "            ", "return", "None", "\n", "\n", "", "return", "str", "(", "a", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.project-monai_research-contributions.DiNTS.utils.check_list_tuple": [[43, 63], ["a.replace.replace", "isinstance", "a[].split", "range", "tuple", "len", "tuple.append", "a[].split", "range", "utils.check_number", "len", "tuple.append", "utils.check_number"], "function", ["home.repos.pwc.inspect_result.project-monai_research-contributions.DiNTS.utils.check_number", "home.repos.pwc.inspect_result.project-monai_research-contributions.DiNTS.utils.check_number"], ["", "", "def", "check_list_tuple", "(", "a", ")", ":", "\n", "    ", "if", "not", "isinstance", "(", "a", ",", "str", ")", ":", "\n", "        ", "return", "a", "\n", "\n", "", "a", "=", "a", ".", "replace", "(", "\" \"", ",", "\"\"", ")", "\n", "if", "a", "[", "0", "]", "==", "\"(\"", "and", "a", "[", "-", "1", "]", "==", "\")\"", ":", "\n", "        ", "part_split", "=", "a", "[", "1", ":", "-", "1", "]", ".", "split", "(", "\",\"", ")", "\n", "out", "=", "[", "]", "\n", "for", "_s", "in", "range", "(", "len", "(", "part_split", ")", ")", ":", "\n", "            ", "out", ".", "append", "(", "check_number", "(", "part_split", "[", "_s", "]", ")", ")", "\n", "", "out", "=", "tuple", "(", "_i", "for", "_i", "in", "out", ")", "\n", "return", "out", "\n", "", "elif", "a", "[", "0", "]", "==", "\"[\"", "and", "a", "[", "-", "1", "]", "==", "\"]\"", ":", "\n", "        ", "part_split", "=", "a", "[", "1", ":", "-", "1", "]", ".", "split", "(", "\",\"", ")", "\n", "out", "=", "[", "]", "\n", "for", "_s", "in", "range", "(", "len", "(", "part_split", ")", ")", ":", "\n", "            ", "out", ".", "append", "(", "check_number", "(", "part_split", "[", "_s", "]", ")", ")", "\n", "", "return", "out", "\n", "\n", "", "return", "a", "\n", "\n"]], "home.repos.pwc.inspect_result.project-monai_research-contributions.DiNTS.utils.parse_monai_specs": [[65, 83], ["component_string.split", "range", "len", "part.split", "_val.split", "len", "utils.check_number", "utils.check_number"], "function", ["home.repos.pwc.inspect_result.project-monai_research-contributions.DiNTS.utils.check_number", "home.repos.pwc.inspect_result.project-monai_research-contributions.DiNTS.utils.check_number"], ["", "def", "parse_monai_specs", "(", "component_string", ")", ":", "\n", "    ", "string_parts", "=", "component_string", ".", "split", "(", "\"|\"", ")", "\n", "component_name", "=", "string_parts", "[", "0", "]", "\n", "\n", "component_dict", "=", "{", "}", "\n", "for", "_k", "in", "range", "(", "1", ",", "len", "(", "string_parts", ")", ")", ":", "\n", "        ", "part", "=", "string_parts", "[", "_k", "]", "\n", "part_split", "=", "part", ".", "split", "(", "\"~\"", ")", "\n", "_key", "=", "part_split", "[", "0", "]", "\n", "_val", "=", "part_split", "[", "1", "]", "\n", "\n", "_val_parts", "=", "_val", ".", "split", "(", "\",\"", ")", "\n", "if", "len", "(", "_val_parts", ")", "==", "1", ":", "\n", "            ", "component_dict", "[", "_key", "]", "=", "check_number", "(", "_val", ")", "\n", "", "else", ":", "\n", "            ", "component_dict", "[", "_key", "]", "=", "[", "check_number", "(", "_item", ")", "for", "_item", "in", "_val_parts", "]", "\n", "\n", "", "", "return", "component_name", ",", "component_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.project-monai_research-contributions.DiNTS.utils.keep_largest_cc": [[85, 94], ["skimage.measure.label", "measure.label.max", "largestCC.astype.astype", "numpy.argmax", "numpy.bincount"], "function", ["None"], ["", "def", "keep_largest_cc", "(", "nda", ")", ":", "\n", "\n", "    ", "labels", "=", "measure", ".", "label", "(", "nda", ">", "0", ")", "\n", "if", "labels", ".", "max", "(", ")", "!=", "0", ":", "\n", "        ", "largestCC", "=", "labels", "==", "np", ".", "argmax", "(", "np", ".", "bincount", "(", "labels", ".", "flat", ")", "[", "1", ":", "]", ")", "+", "1", "\n", "largestCC", "=", "largestCC", ".", "astype", "(", "nda", ".", "dtype", ")", "\n", "return", "largestCC", "\n", "\n", "", "return", "nda", "\n", "\n"]], "home.repos.pwc.inspect_result.project-monai_research-contributions.DiNTS.utils.resize_volume": [[96, 98], ["skimage.transform.resize"], "function", ["None"], ["", "def", "resize_volume", "(", "nda", ",", "output_shape", ",", "order", "=", "1", ",", "preserve_range", "=", "True", ",", "anti_aliasing", "=", "False", ")", ":", "\n", "    ", "return", "resize", "(", "nda", ",", "output_shape", ",", "order", "=", "order", ",", "preserve_range", "=", "preserve_range", ",", "anti_aliasing", "=", "anti_aliasing", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.project-monai_research-contributions.DiNTS.infer_multi-gpu.main": [[61, 473], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "monai.config.print_config", "logging.basicConfig", "print", "int", "tuple", "list", "torch.init_process_group", "intensity_norm.split.split", "range", "range", "print", "transforms.creating_transforms_testing", "monai.transforms.AsDiscrete", "monai.transforms.AsDiscrete", "monai.data.Dataset", "monai.data.DataLoader", "torch.device", "torch.device", "torch.device", "torch.device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.load", "torch.load", "torch.load", "torch.load", "auto_unet.AutoUnet", "torch.from_numpy().to().cuda", "torch.from_numpy().to().cuda", "torch.from_numpy().to().cuda", "torch.from_numpy().to().cuda", "torch.one_hot().to().cuda", "torch.nn.parallel.DistributedDataParallel.to", "monai.data.NiftiSaver", "time.time", "torch.nn.parallel.DistributedDataParallel.eval", "torch.destroy_process_group", "os.path.exists", "os.makedirs", "open", "yaml.full_load", "pandas.DataFrame", "map", "map", "len", "utils.parse_monai_specs", "getattr", "getattr.", "intensity_norm_transforms.append", "open", "json.load", "len", "os.path.join", "files.append", "monai.data.partition_dataset", "len", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.nn.parallel.DistributedDataParallel", "os.path.isfile", "print", "torch.nn.parallel.DistributedDataParallel.load_state_dict", "print", "input", "torch.get_rank", "print", "print", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "config_core[].split", "config_core[].split", "torch.get_rank", "print", "transform_dict.keys", "os.path.exists", "torch.get_rank", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.one_hot().to", "torch.get_rank", "print", "torch.load", "torch.load", "torch.load", "torch.load", "infer_data[].to", "monai.inferers.sliding_window_inference", "np.squeeze.cpu().detach().numpy", "numpy.squeeze", "numpy.argmax", "out_nda.astype.astype", "print", "os.path.join", "[].numpy().squeeze", "nibabel.Nifti1Image", "nibabel.save", "print", "print", "torch.get_world_size", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.flip", "torch.flip", "torch.flip", "torch.flip", "torch.Softmax", "numpy.unique", "out_nda.astype.astype", "range", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.one_hot", "monai.inferers.sliding_window_inference", "np.squeeze.cpu().detach", "[].split", "[].numpy", "os.path.join", "out_filename.replace.replace", "[].numpy().squeeze", "infer_outputs[].squeeze", "nibabel.Nifti1Image", "nibabel.save", "print", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.nn.parallel.DistributedDataParallel.", "torch.flip", "torch.flip", "torch.flip", "torch.flip", "np.squeeze.cpu", "[].split", "[].numpy", "torch.nn.parallel.DistributedDataParallel."], "function", ["home.repos.pwc.inspect_result.project-monai_research-contributions.DiNTS.transforms.creating_transforms_testing", "home.repos.pwc.inspect_result.project-monai_research-contributions.DiNTS.utils.parse_monai_specs"], ["def", "main", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "\"inference\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--arch_ckpt\"", ",", "action", "=", "\"store\"", ",", "required", "=", "True", ",", "help", "=", "\"data root\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--checkpoint\"", ",", "type", "=", "str", ",", "default", "=", "None", ",", "help", "=", "\"checkpoint\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--config\"", ",", "action", "=", "\"store\"", ",", "required", "=", "True", ",", "help", "=", "\"configuration\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--json\"", ",", "action", "=", "\"store\"", ",", "required", "=", "True", ",", "help", "=", "\"full path of .json file\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--json_key\"", ",", "action", "=", "\"store\"", ",", "required", "=", "True", ",", "help", "=", "\".json data list key\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--local_rank\"", ",", "required", "=", "int", ",", "help", "=", "\"local process rank\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--output_root\"", ",", "action", "=", "\"store\"", ",", "required", "=", "True", ",", "help", "=", "\"output root\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--prob\"", ",", "default", "=", "False", ",", "action", "=", "\"store_true\"", ",", "help", "=", "\"probility map\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--root\"", ",", "action", "=", "\"store\"", ",", "required", "=", "True", ",", "help", "=", "\"data root\"", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "# # disable logging for processes except 0 on every node", "\n", "# if args.local_rank != 0:", "\n", "#     f = open(os.devnull, \"w\")", "\n", "#     sys.stdout = sys.stderr = f", "\n", "\n", "monai", ".", "config", ".", "print_config", "(", ")", "\n", "logging", ".", "basicConfig", "(", "stream", "=", "sys", ".", "stdout", ",", "level", "=", "logging", ".", "INFO", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "args", ".", "output_root", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "args", ".", "output_root", ")", "\n", "\n", "# configuration", "\n", "", "with", "open", "(", "args", ".", "config", ")", "as", "in_file", ":", "\n", "        ", "config", "=", "yaml", ".", "full_load", "(", "in_file", ")", "\n", "", "print", "(", "\"\\n\"", ",", "pd", ".", "DataFrame", "(", "config", ")", ",", "\"\\n\"", ")", "\n", "\n", "# core", "\n", "config_core", "=", "config", "[", "\"core\"", "]", "\n", "# amp = config_core[\"amp\"]", "\n", "# cache_replace_rate = config_core[\"cache_replace_rate\"]", "\n", "# determ = config_core[\"deterministic\"]", "\n", "foreground_crop_margin", "=", "int", "(", "config_core", "[", "\"foreground_crop_margin\"", "]", ")", "\n", "input_channels", "=", "config_core", "[", "\"input_channels\"", "]", "\n", "intensity_norm", "=", "config_core", "[", "\"intensity_norm\"", "]", "\n", "# intensity_range = list(map(float, config_core[\"intensity_range\"].split(',')))", "\n", "# label_interpolation = config_core[\"label_interpolation\"]", "\n", "# learning_rate = config_core[\"learning_rate\"]", "\n", "# learning_rate_gamma = config_core[\"learning_rate_gamma\"]", "\n", "# learning_rate_step_size = config_core[\"learning_rate_step_size\"]", "\n", "# loss_string = config_core[\"loss\"]", "\n", "# num_cache_images = config_core[\"num_cache_images\"]", "\n", "# num_images_per_batch = config_core[\"num_images_per_batch\"]", "\n", "# num_epochs = config_core[\"num_epochs\"]", "\n", "# num_epochs_per_validation = config_core[\"num_epochs_per_validation\"]", "\n", "# num_patches_per_image = config_core[\"num_patches_per_image\"]", "\n", "num_sw_batch_size", "=", "config_core", "[", "\"infer_num_sw_batch_size\"", "]", "\n", "num_tta", "=", "config_core", "[", "\"infer_num_tta\"", "]", "\n", "# optim_string = config_core[\"optimizer\"]", "\n", "output_classes", "=", "config_core", "[", "\"output_classes\"", "]", "\n", "overlap_ratio", "=", "config_core", "[", "\"infer_overlap_ratio\"", "]", "\n", "patch_size", "=", "tuple", "(", "map", "(", "int", ",", "config_core", "[", "\"infer_patch_size\"", "]", ".", "split", "(", "\",\"", ")", ")", ")", "\n", "patch_size_valid", "=", "patch_size", "\n", "# scale_intensity_range = list(map(float, config_core[\"scale_intensity_range\"].split(',')))", "\n", "spacing", "=", "list", "(", "map", "(", "float", ",", "config_core", "[", "\"spacing\"", "]", ".", "split", "(", "\",\"", ")", ")", ")", "\n", "\n", "# if args.debug:", "\n", "#     num_epochs_per_validation = 1", "\n", "\n", "# initialize the distributed training process, every GPU runs in a process", "\n", "dist", ".", "init_process_group", "(", "backend", "=", "\"nccl\"", ",", "init_method", "=", "\"env://\"", ")", "\n", "\n", "# intensity normalization", "\n", "intensity_norm", "=", "intensity_norm", ".", "split", "(", "\"||\"", ")", "\n", "intensity_norm_transforms", "=", "[", "]", "\n", "for", "_k", "in", "range", "(", "len", "(", "intensity_norm", ")", ")", ":", "\n", "        ", "transform_string", "=", "intensity_norm", "[", "_k", "]", "\n", "transform_name", ",", "transform_dict", "=", "parse_monai_specs", "(", "transform_string", ")", "\n", "if", "dist", ".", "get_rank", "(", ")", "==", "0", ":", "\n", "            ", "print", "(", "\"\\nintensity normalization {0:d}:\\t{1:s}\"", ".", "format", "(", "_k", "+", "1", ",", "transform_name", ")", ")", "\n", "for", "_key", "in", "transform_dict", ".", "keys", "(", ")", ":", "\n", "                ", "print", "(", "\"  {0}:\\t{1}\"", ".", "format", "(", "_key", ",", "transform_dict", "[", "_key", "]", ")", ")", "\n", "", "", "transform_class", "=", "getattr", "(", "monai", ".", "transforms", ",", "transform_name", ")", "\n", "transform_func", "=", "transform_class", "(", "**", "transform_dict", ")", "\n", "intensity_norm_transforms", ".", "append", "(", "transform_func", ")", "\n", "\n", "# data", "\n", "", "with", "open", "(", "args", ".", "json", ",", "\"r\"", ")", "as", "f", ":", "\n", "        ", "json_data", "=", "json", ".", "load", "(", "f", ")", "\n", "\n", "# inference data", "\n", "", "dataset_key", "=", "args", ".", "json_key", "\n", "files", "=", "[", "]", "\n", "for", "_i", "in", "range", "(", "len", "(", "json_data", "[", "dataset_key", "]", ")", ")", ":", "\n", "        ", "str_img", "=", "os", ".", "path", ".", "join", "(", "args", ".", "root", ",", "json_data", "[", "dataset_key", "]", "[", "_i", "]", ")", "\n", "# str_seg = os.path.join(args.root, json_data[dataset_key][_i][\"label\"])", "\n", "\n", "# if (not os.path.exists(str_img)) or (not os.path.exists(str_seg)):", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "str_img", ")", ":", "\n", "            ", "continue", "\n", "\n", "# files.append({\"image\": str_img, \"label\": str_seg})", "\n", "", "files", ".", "append", "(", "{", "\"image\"", ":", "str_img", "}", ")", "\n", "\n", "", "infer_files", "=", "files", "\n", "infer_files", "=", "partition_dataset", "(", "\n", "data", "=", "infer_files", ",", "shuffle", "=", "False", ",", "num_partitions", "=", "dist", ".", "get_world_size", "(", ")", ",", "even_divisible", "=", "False", "\n", ")", "[", "dist", ".", "get_rank", "(", ")", "]", "\n", "print", "(", "\"infer_files\"", ",", "len", "(", "infer_files", ")", ")", "\n", "\n", "# label_interpolation_transform = creating_label_interpolation_transform(label_interpolation, spacing, output_classes)", "\n", "# train_transforms = creating_transforms_training(foreground_crop_margin, label_interpolation_transform, num_patches_per_image, patch_size, scale_intensity_range, augmenations)", "\n", "infer_transforms", "=", "creating_transforms_testing", "(", "foreground_crop_margin", ",", "intensity_norm_transforms", ",", "spacing", ")", "\n", "\n", "argmax", "=", "AsDiscrete", "(", "argmax", "=", "True", ",", "to_onehot", "=", "False", ",", "n_classes", "=", "output_classes", ")", "\n", "onehot", "=", "AsDiscrete", "(", "argmax", "=", "False", ",", "to_onehot", "=", "True", ",", "n_classes", "=", "output_classes", ")", "\n", "\n", "# train_ds = monai.data.CacheDataset(data=train_files, transform=train_transforms, cache_rate=1.0, num_workers=4)", "\n", "# infer_ds = monai.data.CacheDataset(data=infer_files, transform=infer_transforms, cache_rate=1.0, num_workers=4)", "\n", "# train_ds = monai.data.Dataset(data=train_files, transform=train_transforms)", "\n", "# infer_ds = monai.data.Dataset(data=infer_files, transform=infer_transforms)", "\n", "infer_ds", "=", "monai", ".", "data", ".", "Dataset", "(", "data", "=", "infer_files", ",", "transform", "=", "infer_transforms", ")", "\n", "\n", "# train_loader = DataLoader(train_ds, batch_size=num_images_per_batch, shuffle=True, num_workers=4, pin_memory=torch.cuda.is_available())", "\n", "# infer_loader = DataLoader(infer_ds, batch_size=1, shuffle=False, num_workers=4, pin_memory=torch.cuda.is_available())", "\n", "infer_loader", "=", "DataLoader", "(", "\n", "infer_ds", ",", "batch_size", "=", "1", ",", "shuffle", "=", "False", ",", "num_workers", "=", "4", ",", "pin_memory", "=", "torch", ".", "cuda", ".", "is_available", "(", ")", "\n", ")", "\n", "\n", "# inverter = Invertd(", "\n", "#     # `image` was not copied, invert the original value directly", "\n", "#     keys=[\"image\"],", "\n", "#     transform=infer_transforms,", "\n", "#     loader=infer_loader,", "\n", "#     orig_keys=\"image\",", "\n", "#     meta_keys=[\"image_meta_dict\"],", "\n", "#     orig_meta_keys=\"image_meta_dict\",", "\n", "#     nearest_interp=False,", "\n", "#     to_tensor=[True],", "\n", "#     device=\"cpu\",", "\n", "#     num_workers=0 if sys.platform == \"darwin\" or torch.cuda.is_available() else 2,", "\n", "# )", "\n", "\n", "# def no_collation(x):", "\n", "#     return x", "\n", "\n", "# batch_inverter = BatchInverseTransform(infer_transforms, infer_loader, collate_fn=no_collation)", "\n", "\n", "# network architecture", "\n", "device", "=", "torch", ".", "device", "(", "f\"cuda:{args.local_rank}\"", ")", "\n", "torch", ".", "cuda", ".", "set_device", "(", "device", ")", "\n", "\n", "# monai network", "\n", "# config_network = config[\"network_monai\"]", "\n", "# network_string = config_network[\"network\"]", "\n", "# network_name, network_dict = parse_monai_specs(network_string)", "\n", "# network_dict[\"in_channels\"] = input_channels", "\n", "# network_dict[\"out_channels\"] = output_classes", "\n", "# if dist.get_rank() == 0:", "\n", "#     print(\"\\nnetwork:\")", "\n", "#     for _key in network_dict.keys():", "\n", "#         print(\"  {0}:\\t{1}\".format(_key, network_dict[_key]))", "\n", "# network_class = getattr(monai.networks.nets, network_name)", "\n", "# model = network_class(**network_dict)", "\n", "# model = model.to(device)", "\n", "\n", "ckpt", "=", "torch", ".", "load", "(", "args", ".", "arch_ckpt", ")", "\n", "node_a", "=", "ckpt", "[", "\"node_a\"", "]", "\n", "code_a", "=", "ckpt", "[", "\"code_a\"", "]", "\n", "code_c", "=", "ckpt", "[", "\"code_c\"", "]", "\n", "\n", "model", "=", "AutoUnet", "(", "\n", "in_channels", "=", "input_channels", ",", "\n", "num_classes", "=", "output_classes", ",", "\n", "cell_ops", "=", "5", ",", "\n", "k", "=", "1", ",", "\n", "num_blocks", "=", "12", ",", "\n", "num_depths", "=", "4", ",", "\n", "channel_mul", "=", "1.0", ",", "\n", "affine", "=", "False", ",", "\n", "use_unet", "=", "False", ",", "\n", "probs", "=", "0.9", ",", "\n", "ef", "=", "0.3", ",", "\n", "use_stem", "=", "True", ",", "\n", "code", "=", "[", "node_a", ",", "code_a", ",", "code_c", "]", ",", "\n", ")", "\n", "\n", "code_a", "=", "torch", ".", "from_numpy", "(", "code_a", ")", ".", "to", "(", "torch", ".", "float32", ")", ".", "cuda", "(", ")", "\n", "code_c", "=", "F", ".", "one_hot", "(", "torch", ".", "from_numpy", "(", "code_c", ")", ",", "model", ".", "cell_ops", ")", ".", "to", "(", "torch", ".", "float32", ")", ".", "cuda", "(", ")", "\n", "model", "=", "model", ".", "to", "(", "device", ")", "\n", "\n", "if", "torch", ".", "cuda", ".", "device_count", "(", ")", ">", "1", ":", "\n", "        ", "if", "dist", ".", "get_rank", "(", ")", "==", "0", ":", "\n", "            ", "print", "(", "\"Let's use\"", ",", "torch", ".", "cuda", ".", "device_count", "(", ")", ",", "\"GPUs!\"", ")", "\n", "\n", "", "model", "=", "DistributedDataParallel", "(", "model", ",", "device_ids", "=", "[", "device", "]", ")", "\n", "\n", "", "if", "args", ".", "checkpoint", "is", "not", "None", "and", "os", ".", "path", ".", "isfile", "(", "args", ".", "checkpoint", ")", ":", "\n", "        ", "print", "(", "\"[info] loading pre-trained checkpoint {0:s}\"", ".", "format", "(", "args", ".", "checkpoint", ")", ")", "\n", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "args", ".", "checkpoint", ")", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "\"[info] cannot find pre-trained checkpoint!\"", ")", "\n", "input", "(", ")", "\n", "\n", "", "saver", "=", "monai", ".", "data", ".", "NiftiSaver", "(", "\n", "output_dir", "=", "args", ".", "output_root", ",", "output_postfix", "=", "\"seg\"", ",", "resample", "=", "False", ",", "output_dtype", "=", "np", ".", "uint8", "\n", ")", "\n", "\n", "# # amp", "\n", "# if amp:", "\n", "#     from torch.cuda.amp import autocast, GradScaler", "\n", "#     scaler = GradScaler()", "\n", "#     if dist.get_rank() == 0:", "\n", "#         print(\"[info] amp enabled\")", "\n", "\n", "# # start a typical PyTorch training", "\n", "# infer_interval = num_epochs_per_validation", "\n", "# best_metric = -1", "\n", "# best_metric_epoch = -1", "\n", "# epoch_loss_values = list()", "\n", "# idx_iter = 0", "\n", "# metric_values = list()", "\n", "\n", "if", "num_tta", "==", "0", "or", "num_tta", "==", "1", ":", "\n", "        ", "flip_tta", "=", "[", "]", "\n", "", "elif", "num_tta", "==", "4", ":", "\n", "        ", "flip_tta", "=", "[", "[", "2", "]", ",", "[", "3", "]", ",", "[", "4", "]", "]", "\n", "", "elif", "num_tta", "==", "8", ":", "\n", "        ", "flip_tta", "=", "[", "[", "2", "]", ",", "[", "3", "]", ",", "[", "4", "]", ",", "(", "2", ",", "3", ")", ",", "(", "2", ",", "4", ")", ",", "(", "3", ",", "4", ")", ",", "(", "2", ",", "3", ",", "4", ")", "]", "\n", "\n", "", "if", "dist", ".", "get_rank", "(", ")", "==", "0", ":", "\n", "        ", "print", "(", "\"num_tta\"", ",", "num_tta", ")", "\n", "print", "(", "\"flip_tta\"", ",", "flip_tta", ")", "\n", "\n", "# if dist.get_rank() == 0:", "\n", "#     writer = SummaryWriter(log_dir=os.path.join(args.output_root, \"Events\"))", "\n", "\n", "# with open(os.path.join(args.output_root, \"accuracy_history.csv\"), \"a\") as f:", "\n", "#     f.write(\"epoch\\tmetric\\tloss\\tlr\\ttime\\titer\\n\")", "\n", "\n", "", "start_time", "=", "time", ".", "time", "(", ")", "\n", "# # for epoch in range(num_epochs):", "\n", "#     # if learning_rate_final > -0.000001 and learning_rate_final < learning_rate:", "\n", "#     #     # lr = learning_rate - epoch / (num_epochs - 1) * (learning_rate - learning_rate_final)", "\n", "#     #     lr = (learning_rate - learning_rate_final) * (1 - epoch / (num_epochs - 1)) ** 0.9 + learning_rate_final", "\n", "#     #     for param_group in optimizer.param_groups:", "\n", "#     #         param_group[\"lr\"] = lr", "\n", "#     # else:", "\n", "#     #     lr = learning_rate", "\n", "#     # lr = learning_rate * (learning_rate_gamma ** (epoch // learning_rate_step_size))", "\n", "#     # for param_group in optimizer.param_groups:", "\n", "#     #     param_group[\"lr\"] = lr", "\n", "\n", "#     # if dist.get_rank() == 0:", "\n", "#     #     print(\"-\" * 10)", "\n", "#     #     print(f\"epoch {epoch + 1}/{num_epochs}\")", "\n", "#     #     print('learning rate is set to {}'.format(lr))", "\n", "\n", "#     model.train()", "\n", "#     epoch_loss = 0", "\n", "#     loss_torch = torch.zeros(2, dtype=torch.float, device=device)", "\n", "#     step = 0", "\n", "#     # train_sampler.set_epoch(epoch)", "\n", "#     for batch_data in train_loader:", "\n", "#         step += 1", "\n", "#         inputs, labels = batch_data[\"image\"].to(device), batch_data[\"label\"].to(device)", "\n", "#         optimizer.zero_grad()", "\n", "\n", "#         if amp:", "\n", "#             with autocast():", "\n", "#                 outputs = model(inputs)", "\n", "#                 loss = loss_func(outputs, labels)", "\n", "\n", "#             scaler.scale(loss).backward()", "\n", "#             scaler.step(optimizer)", "\n", "#             scaler.update()", "\n", "#         else:", "\n", "#             outputs = model(inputs)", "\n", "#             loss = loss_func(outputs, labels)", "\n", "#             loss.backward()", "\n", "#             optimizer.step()", "\n", "\n", "#         epoch_loss += loss.item()", "\n", "#         loss_torch[0] += loss.item()", "\n", "#         loss_torch[1] += 1.0", "\n", "#         epoch_len = len(train_loader)", "\n", "#         idx_iter += 1", "\n", "\n", "#         if dist.get_rank() == 0:", "\n", "#             print(\"[{0}] \".format(str(datetime.now())[:19]) + f\"{step}/{epoch_len}, train_loss: {loss.item():.4f}\")", "\n", "#             writer.add_scalar(\"train_loss\", loss.item(), epoch_len * epoch + step)", "\n", "\n", "#     # synchronizes all processes and reduce results", "\n", "#     dist.barrier()", "\n", "#     dist.all_reduce(loss_torch, op=torch.distributed.ReduceOp.SUM)", "\n", "#     loss_torch = loss_torch.tolist()", "\n", "#     if dist.get_rank() == 0:", "\n", "#         loss_torch_epoch = loss_torch[0] / loss_torch[1]", "\n", "#         print(f\"epoch {epoch + 1} average loss: {loss_torch_epoch:.4f}, best mean dice: {best_metric:.4f} at epoch {best_metric_epoch}\")", "\n", "\n", "#     # epoch_loss /= step", "\n", "#     # epoch_loss_values.append(epoch_loss)", "\n", "#     # print(f\"epoch {epoch + 1} average loss: {epoch_loss:.4f}, best mean dice: {best_metric:.4f} at epoch {best_metric_epoch}\")", "\n", "\n", "model", ".", "eval", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "# metric = torch.zeros((output_classes - 1) * 2, dtype=torch.float, device=device)", "\n", "# metric_sum = 0.0", "\n", "# metric_count = 0", "\n", "# metric_mat = []", "\n", "        ", "infer_images", "=", "None", "\n", "# infer_labels = None", "\n", "infer_outputs", "=", "None", "\n", "\n", "_index", "=", "0", "\n", "for", "infer_data", "in", "infer_loader", ":", "\n", "            ", "infer_images", "=", "infer_data", "[", "\"image\"", "]", ".", "to", "(", "device", ")", "\n", "\n", "roi_size", "=", "patch_size_valid", "\n", "sw_batch_size", "=", "num_sw_batch_size", "\n", "\n", "# test time augmentation", "\n", "ct", "=", "1.0", "\n", "# pred = sliding_window_inference(infer_images, roi_size, sw_batch_size, nn.Sequential(model, nn.Softmax(1)), mode=\"gaussian\", overlap=overlap_ratio)", "\n", "pred", "=", "sliding_window_inference", "(", "\n", "infer_images", ",", "\n", "roi_size", ",", "\n", "sw_batch_size", ",", "\n", "lambda", "x", ":", "model", "(", "x", ",", "[", "node_a", ",", "code_a", ",", "code_c", "]", ",", "ds", "=", "False", ")", "[", "-", "1", "]", ",", "\n", "mode", "=", "\"gaussian\"", ",", "\n", "overlap", "=", "overlap_ratio", ",", "\n", ")", "\n", "\n", "for", "dims", "in", "flip_tta", ":", "\n", "# flip_pred = torch.flip(sliding_window_inference(torch.flip(infer_images, dims=dims), roi_size, sw_batch_size, nn.Sequential(model, nn.Softmax(1)), mode=\"gaussian\", overlap=overlap_ratio), dims=dims)", "\n", "                ", "flip_pred", "=", "torch", ".", "flip", "(", "\n", "sliding_window_inference", "(", "\n", "torch", ".", "flip", "(", "infer_images", ",", "dims", "=", "dims", ")", ",", "\n", "roi_size", ",", "\n", "sw_batch_size", ",", "\n", "lambda", "x", ":", "model", "(", "x", ",", "[", "node_a", ",", "code_a", ",", "code_c", "]", ",", "ds", "=", "False", ")", "[", "-", "1", "]", ",", "\n", "mode", "=", "\"gaussian\"", ",", "\n", "overlap", "=", "overlap_ratio", ",", "\n", ")", ",", "\n", "dims", "=", "dims", ",", "\n", ")", "\n", "pred", "+=", "flip_pred", "\n", "ct", "+=", "1.0", "\n", "\n", "", "infer_outputs", "=", "pred", "/", "ct", "\n", "\n", "# infer_outputs = sliding_window_inference(infer_images, roi_size, sw_batch_size, nn.Sequential(model, nn.Softmax(1)), mode=\"gaussian\", overlap=overlap_ratio)", "\n", "# infer_outputs = sliding_window_inference(infer_images, roi_size, sw_batch_size, nn.Sequential(model, nn.Softmax(1)), mode=\"gaussian\", overlap=overlap_ratio, device=torch.device(\"cpu\"))", "\n", "\n", "infer_outputs", "=", "nn", ".", "Softmax", "(", "dim", "=", "1", ")", "(", "infer_outputs", ")", "\n", "# print(infer_outputs.size())", "\n", "\n", "# label_transform_key = \"image\" + InverseKeys.KEY_SUFFIX", "\n", "# segs_dict = {", "\n", "#     \"image\": infer_outputs,", "\n", "#     \"image_meta_dict\": infer_data[\"image_meta_dict\"],", "\n", "#     label_transform_key: infer_data[label_transform_key]", "\n", "# }", "\n", "# inv_batch = batch_inverter(segs_dict)", "\n", "# # print(\"inv_batch\", type(inv_batch), len(inv_batch))", "\n", "\n", "# # infer_output_data = copy.deepcopy(infer_data)", "\n", "# # infer_output_data[\"image\"] = infer_outputs", "\n", "# # infer_output_data = inverter(infer_output_data)", "\n", "# # infer_outputs = infer_output_data[\"image\"][0][None]", "\n", "# print(\"inv_batch[0]\", type(inv_batch[0][\"image\"]))", "\n", "# infer_outputs = inv_batch[0][\"image\"]", "\n", "# # infer_outputs = infer_outputs[None]", "\n", "# infer_outputs = torch.from_numpy(infer_outputs)", "\n", "\n", "infer_outputs", "=", "infer_outputs", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "infer_outputs", "=", "np", ".", "squeeze", "(", "infer_outputs", ")", "\n", "out_nda", "=", "np", ".", "argmax", "(", "infer_outputs", ",", "axis", "=", "0", ")", "\n", "out_nda", "=", "out_nda", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "print", "(", "out_nda", ".", "shape", ",", "np", ".", "unique", "(", "out_nda", ")", ")", "\n", "\n", "# if args.post:", "\n", "#     out_nda = torch.as_tensor(out_nda[None][None], device=\"cpu\")", "\n", "#     out_nda = post_processing(out_nda)", "\n", "#     out_nda = out_nda.detach().numpy().squeeze()", "\n", "#     out_nda = out_nda.astype(np.uint8)", "\n", "#     print(\"post-processing\")", "\n", "\n", "out_filename", "=", "os", ".", "path", ".", "join", "(", "\n", "args", ".", "output_root", ",", "infer_data", "[", "\"image_meta_dict\"", "]", "[", "\"filename_or_obj\"", "]", "[", "0", "]", ".", "split", "(", "os", ".", "sep", ")", "[", "-", "1", "]", "\n", ")", "\n", "# out_filename = out_filename.replace(\"case_\", \"prediction_\") + \".nii.gz\"", "\n", "out_affine", "=", "infer_data", "[", "\"image_meta_dict\"", "]", "[", "\"affine\"", "]", ".", "numpy", "(", ")", ".", "squeeze", "(", ")", "\n", "out_img", "=", "nib", ".", "Nifti1Image", "(", "out_nda", ".", "astype", "(", "np", ".", "uint8", ")", ",", "out_affine", ")", "\n", "nib", ".", "save", "(", "out_img", ",", "out_filename", ")", "\n", "print", "(", "out_filename", ")", "\n", "\n", "if", "args", ".", "prob", ":", "\n", "                ", "for", "_k", "in", "range", "(", "1", ",", "output_classes", ")", ":", "\n", "                    ", "out_filename", "=", "os", ".", "path", ".", "join", "(", "\n", "args", ".", "output_root", ",", "infer_data", "[", "\"image_meta_dict\"", "]", "[", "\"filename_or_obj\"", "]", "[", "0", "]", ".", "split", "(", "os", ".", "sep", ")", "[", "-", "1", "]", "\n", ")", "\n", "# out_filename = out_filename.replace(\"case_\", \"prediction_\") + \".nii.gz\"", "\n", "out_filename", "=", "out_filename", ".", "replace", "(", "\".nii\"", ",", "\"_prob{0:d}.nii\"", ".", "format", "(", "_k", ")", ")", "\n", "out_affine", "=", "infer_data", "[", "\"image_meta_dict\"", "]", "[", "\"affine\"", "]", ".", "numpy", "(", ")", ".", "squeeze", "(", ")", "\n", "\n", "# out_img = nib.Nifti1Image(infer_outputs[_k:_k+1, ...].squeeze().astype(np.float32), out_affine)", "\n", "infer_outputs_indiv", "=", "infer_outputs", "[", "_k", ":", "_k", "+", "1", ",", "...", "]", ".", "squeeze", "(", ")", "\n", "# infer_outputs_indiv[infer_outputs_indiv < 0.0] = 0.0", "\n", "# infer_outputs_indiv[infer_outputs_indiv > 1.0] = 1.0", "\n", "# infer_outputs_indiv = infer_outputs_indiv * 255.0", "\n", "# infer_outputs_indiv = np.round(infer_outputs_indiv).astype(np.float32)", "\n", "out_img", "=", "nib", ".", "Nifti1Image", "(", "infer_outputs_indiv", ",", "out_affine", ")", "\n", "\n", "nib", ".", "save", "(", "out_img", ",", "out_filename", ")", "\n", "print", "(", "out_filename", ")", "\n", "\n", "", "", "", "", "dist", ".", "destroy_process_group", "(", ")", "\n", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.project-monai_research-contributions.coplenet-pneumonia-lesion-segmentation.run_inference.main": [[30, 71], ["sorted", "monai.transforms.Compose", "monai.data.Dataset", "torch.utils.data.DataLoader", "torch.device", "coplenet.CopleNet().to", "CopleNet().to.load_state_dict", "CopleNet().to.eval", "glob.glob", "torch.no_grad", "monai.data.NiftiSaver", "enumerate", "os.path.join", "monai.transforms.LoadNiftid", "monai.transforms.AddChanneld", "monai.transforms.Orientationd", "monai.transforms.ToTensord", "torch.cuda.is_available", "torch.cuda.is_available", "coplenet.CopleNet", "torch.load", "print", "val_data[].to", "monai.inferers.sliding_window_inference", "val_outputs.argmax.argmax", "monai.data.NiftiSaver.save_batch", "numpy.ceil", "int", "int", "len", "numpy.asarray"], "function", ["None"], ["def", "main", "(", ")", ":", "\n", "    ", "images", "=", "sorted", "(", "glob", "(", "os", ".", "path", ".", "join", "(", "IMAGE_FOLDER", ",", "\"case*.nii.gz\"", ")", ")", ")", "\n", "val_files", "=", "[", "{", "\"img\"", ":", "img", "}", "for", "img", "in", "images", "]", "\n", "\n", "# define transforms for image and segmentation", "\n", "infer_transforms", "=", "Compose", "(", "\n", "[", "\n", "LoadNiftid", "(", "\"img\"", ")", ",", "\n", "AddChanneld", "(", "\"img\"", ")", ",", "\n", "# coplenet works on the plane defined by the last two axes", "\n", "Orientationd", "(", "\"img\"", ",", "\"SPL\"", ")", ",", "\n", "ToTensord", "(", "\"img\"", ")", ",", "\n", "]", "\n", ")", "\n", "test_ds", "=", "monai", ".", "data", ".", "Dataset", "(", "data", "=", "val_files", ",", "transform", "=", "infer_transforms", ")", "\n", "# sliding window inference need to input 1 image in every iteration", "\n", "data_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "test_ds", ",", "batch_size", "=", "1", ",", "num_workers", "=", "0", ",", "pin_memory", "=", "torch", ".", "cuda", ".", "is_available", "(", ")", "\n", ")", "\n", "\n", "device", "=", "torch", ".", "device", "(", "\"cuda\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", ")", "\n", "model", "=", "CopleNet", "(", ")", ".", "to", "(", "device", ")", "\n", "\n", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "MODEL_FILE", ")", "[", "\"model_state_dict\"", "]", ")", "\n", "model", ".", "eval", "(", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "saver", "=", "NiftiSaver", "(", "output_dir", "=", "OUTPUT_FOLDER", ")", "\n", "for", "idx", ",", "val_data", "in", "enumerate", "(", "data_loader", ")", ":", "\n", "            ", "print", "(", "f\"Inference on {idx+1} of {len(data_loader)}\"", ")", "\n", "val_images", "=", "val_data", "[", "\"img\"", "]", ".", "to", "(", "device", ")", "\n", "# define sliding window size and batch size for windows inference", "\n", "slice_shape", "=", "np", ".", "ceil", "(", "np", ".", "asarray", "(", "val_images", ".", "shape", "[", "3", ":", "]", ")", "/", "32", ")", "*", "32", "\n", "roi_size", "=", "(", "20", ",", "int", "(", "slice_shape", "[", "0", "]", ")", ",", "int", "(", "slice_shape", "[", "1", "]", ")", ")", "\n", "sw_batch_size", "=", "2", "\n", "val_outputs", "=", "sliding_window_inference", "(", "\n", "val_images", ",", "roi_size", ",", "sw_batch_size", ",", "model", ",", "0.0", ",", "padding_mode", "=", "\"circular\"", "\n", ")", "\n", "# val_outputs = (val_outputs.sigmoid() >= 0.5).float()", "\n", "val_outputs", "=", "val_outputs", ".", "argmax", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "saver", ".", "save_batch", "(", "val_outputs", ",", "val_data", "[", "\"img_meta_dict\"", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.project-monai_research-contributions.coplenet-pneumonia-lesion-segmentation.coplenet.ConvBNActBlock.__init__": [[32, 39], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "monai.networks.blocks.Convolution", "torch.Dropout", "torch.Dropout", "monai.networks.blocks.Convolution", "monai.networks.blocks.ResidualSELayer"], "methods", ["home.repos.pwc.inspect_result.project-monai_research-contributions.networks.unetr.UNETR.__init__"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "dropout_p", ",", "spatial_dims", ":", "int", "=", "2", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv_conv_se", "=", "nn", ".", "Sequential", "(", "\n", "Convolution", "(", "spatial_dims", ",", "in_channels", ",", "out_channels", ",", "kernel_size", "=", "3", ",", "norm", "=", "Norm", ".", "BATCH", ",", "act", "=", "Act", ".", "LEAKYRELU", ")", ",", "\n", "nn", ".", "Dropout", "(", "dropout_p", ")", ",", "\n", "Convolution", "(", "spatial_dims", ",", "out_channels", ",", "out_channels", ",", "kernel_size", "=", "3", ",", "norm", "=", "Norm", ".", "BATCH", ",", "act", "=", "Act", ".", "LEAKYRELU", ")", ",", "\n", "ResidualSELayer", "(", "spatial_dims", "=", "spatial_dims", ",", "in_channels", "=", "out_channels", ",", "r", "=", "2", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.project-monai_research-contributions.coplenet-pneumonia-lesion-segmentation.coplenet.ConvBNActBlock.forward": [[41, 43], ["coplenet.ConvBNActBlock.conv_conv_se"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "conv_conv_se", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.project-monai_research-contributions.coplenet-pneumonia-lesion-segmentation.coplenet.DownBlock.__init__": [[50, 54], ["torch.Module.__init__", "monai.networks.blocks.MaxAvgPool", "coplenet.ConvBNActBlock"], "methods", ["home.repos.pwc.inspect_result.project-monai_research-contributions.networks.unetr.UNETR.__init__"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "dropout_p", ",", "spatial_dims", ":", "int", "=", "2", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "max_avg_pool", "=", "MaxAvgPool", "(", "spatial_dims", "=", "spatial_dims", ",", "kernel_size", "=", "2", ")", "\n", "self", ".", "conv", "=", "ConvBNActBlock", "(", "2", "*", "in_channels", ",", "out_channels", ",", "dropout_p", ",", "spatial_dims", "=", "spatial_dims", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.project-monai_research-contributions.coplenet-pneumonia-lesion-segmentation.coplenet.DownBlock.forward": [[55, 58], ["coplenet.DownBlock.max_avg_pool", "coplenet.DownBlock.conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x_pool", "=", "self", ".", "max_avg_pool", "(", "x", ")", "\n", "return", "self", ".", "conv", "(", "x_pool", ")", "+", "x_pool", "\n", "\n"]], "home.repos.pwc.inspect_result.project-monai_research-contributions.coplenet-pneumonia-lesion-segmentation.coplenet.UpBlock.__init__": [[63, 67], ["torch.Module.__init__", "monai.networks.blocks.UpSample", "coplenet.ConvBNActBlock"], "methods", ["home.repos.pwc.inspect_result.project-monai_research-contributions.networks.unetr.UNETR.__init__"], ["def", "__init__", "(", "self", ",", "in_channels1", ",", "in_channels2", ",", "out_channels", ",", "bilinear", "=", "True", ",", "dropout_p", "=", "0.5", ",", "spatial_dims", ":", "int", "=", "2", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "up", "=", "UpSample", "(", "spatial_dims", ",", "in_channels1", ",", "in_channels2", ",", "scale_factor", "=", "2", ",", "with_conv", "=", "not", "bilinear", ")", "\n", "self", ".", "conv", "=", "ConvBNActBlock", "(", "in_channels2", "*", "2", ",", "out_channels", ",", "dropout_p", ",", "spatial_dims", "=", "spatial_dims", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.project-monai_research-contributions.coplenet-pneumonia-lesion-segmentation.coplenet.UpBlock.forward": [[68, 71], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "coplenet.UpBlock.conv", "coplenet.UpBlock.up"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x1", ",", "x2", ")", ":", "\n", "        ", "x_cat", "=", "torch", ".", "cat", "(", "[", "x2", ",", "self", ".", "up", "(", "x1", ")", "]", ",", "dim", "=", "1", ")", "\n", "return", "self", ".", "conv", "(", "x_cat", ")", "+", "x_cat", "\n", "\n"]], "home.repos.pwc.inspect_result.project-monai_research-contributions.coplenet-pneumonia-lesion-segmentation.coplenet.CopleNet.__init__": [[74, 126], ["torch.Module.__init__", "monai.utils.ensure_tuple_rep", "int", "int", "int", "int", "coplenet.ConvBNActBlock", "coplenet.DownBlock", "coplenet.DownBlock", "coplenet.DownBlock", "coplenet.DownBlock", "monai.networks.blocks.Convolution", "monai.networks.blocks.Convolution", "monai.networks.blocks.Convolution", "monai.networks.blocks.Convolution", "coplenet.UpBlock", "coplenet.UpBlock", "coplenet.UpBlock", "coplenet.UpBlock", "monai.networks.blocks.SimpleASPP", "monai.networks.blocks.Convolution", "int"], "methods", ["home.repos.pwc.inspect_result.project-monai_research-contributions.networks.unetr.UNETR.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "spatial_dims", ":", "int", "=", "2", ",", "\n", "in_channels", ":", "int", "=", "1", ",", "\n", "out_channels", ":", "int", "=", "2", ",", "\n", "feature_channels", "=", "(", "32", ",", "64", ",", "128", ",", "256", ",", "512", ")", ",", "\n", "dropout", "=", "(", "0.0", ",", "0.0", ",", "0.3", ",", "0.4", ",", "0.5", ")", ",", "\n", "bilinear", ":", "bool", "=", "True", ",", "\n", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            spatial_dims: dimension of the operators. Defaults to 2, i.e., using 2D operators\n                for all operators, for example, using Conv2D for all the convolutions.\n                It should be 2 for 3D images\n            in_channels: number of channels of the input image. Defaults to 1.\n            out_channels: number of segmentation classes (2 for foreground/background segmentation).\n                Defaults to 2.\n            feature_channels: number of intermediate feature channels\n                (must have 5 elements corresponding to five conv. stages).\n                Defaults to (32, 64, 128, 256, 512).\n            dropout: a sequence of 5 dropout ratios. Defaults to (0.0, 0.0, 0.3, 0.4, 0.5).\n            bilinear: whether to use bilinear upsampling. Defaults to True.\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "ft_chns", "=", "ensure_tuple_rep", "(", "feature_channels", ",", "5", ")", "\n", "\n", "f0_half", "=", "int", "(", "ft_chns", "[", "0", "]", "/", "2", ")", "\n", "f1_half", "=", "int", "(", "ft_chns", "[", "1", "]", "/", "2", ")", "\n", "f2_half", "=", "int", "(", "ft_chns", "[", "2", "]", "/", "2", ")", "\n", "f3_half", "=", "int", "(", "ft_chns", "[", "3", "]", "/", "2", ")", "\n", "\n", "self", ".", "in_conv", "=", "ConvBNActBlock", "(", "in_channels", ",", "ft_chns", "[", "0", "]", ",", "dropout", "[", "0", "]", ",", "spatial_dims", ")", "\n", "self", ".", "down1", "=", "DownBlock", "(", "ft_chns", "[", "0", "]", ",", "ft_chns", "[", "1", "]", ",", "dropout", "[", "1", "]", ",", "spatial_dims", ")", "\n", "self", ".", "down2", "=", "DownBlock", "(", "ft_chns", "[", "1", "]", ",", "ft_chns", "[", "2", "]", ",", "dropout", "[", "2", "]", ",", "spatial_dims", ")", "\n", "self", ".", "down3", "=", "DownBlock", "(", "ft_chns", "[", "2", "]", ",", "ft_chns", "[", "3", "]", ",", "dropout", "[", "3", "]", ",", "spatial_dims", ")", "\n", "self", ".", "down4", "=", "DownBlock", "(", "ft_chns", "[", "3", "]", ",", "ft_chns", "[", "4", "]", ",", "dropout", "[", "4", "]", ",", "spatial_dims", ")", "\n", "\n", "self", ".", "bridge0", "=", "Convolution", "(", "spatial_dims", ",", "ft_chns", "[", "0", "]", ",", "f0_half", ",", "kernel_size", "=", "1", ",", "norm", "=", "Norm", ".", "BATCH", ",", "act", "=", "Act", ".", "LEAKYRELU", ")", "\n", "self", ".", "bridge1", "=", "Convolution", "(", "spatial_dims", ",", "ft_chns", "[", "1", "]", ",", "f1_half", ",", "kernel_size", "=", "1", ",", "norm", "=", "Norm", ".", "BATCH", ",", "act", "=", "Act", ".", "LEAKYRELU", ")", "\n", "self", ".", "bridge2", "=", "Convolution", "(", "spatial_dims", ",", "ft_chns", "[", "2", "]", ",", "f2_half", ",", "kernel_size", "=", "1", ",", "norm", "=", "Norm", ".", "BATCH", ",", "act", "=", "Act", ".", "LEAKYRELU", ")", "\n", "self", ".", "bridge3", "=", "Convolution", "(", "spatial_dims", ",", "ft_chns", "[", "3", "]", ",", "f3_half", ",", "kernel_size", "=", "1", ",", "norm", "=", "Norm", ".", "BATCH", ",", "act", "=", "Act", ".", "LEAKYRELU", ")", "\n", "\n", "self", ".", "up1", "=", "UpBlock", "(", "ft_chns", "[", "4", "]", ",", "f3_half", ",", "ft_chns", "[", "3", "]", ",", "bilinear", ",", "dropout", "[", "3", "]", ",", "spatial_dims", ")", "\n", "self", ".", "up2", "=", "UpBlock", "(", "ft_chns", "[", "3", "]", ",", "f2_half", ",", "ft_chns", "[", "2", "]", ",", "bilinear", ",", "dropout", "[", "2", "]", ",", "spatial_dims", ")", "\n", "self", ".", "up3", "=", "UpBlock", "(", "ft_chns", "[", "2", "]", ",", "f1_half", ",", "ft_chns", "[", "1", "]", ",", "bilinear", ",", "dropout", "[", "1", "]", ",", "spatial_dims", ")", "\n", "self", ".", "up4", "=", "UpBlock", "(", "ft_chns", "[", "1", "]", ",", "f0_half", ",", "ft_chns", "[", "0", "]", ",", "bilinear", ",", "dropout", "[", "0", "]", ",", "spatial_dims", ")", "\n", "\n", "self", ".", "aspp", "=", "SimpleASPP", "(", "\n", "spatial_dims", ",", "ft_chns", "[", "4", "]", ",", "int", "(", "ft_chns", "[", "4", "]", "/", "4", ")", ",", "kernel_sizes", "=", "[", "1", ",", "3", ",", "3", ",", "3", "]", ",", "dilations", "=", "[", "1", ",", "2", ",", "4", ",", "6", "]", "\n", ")", "\n", "\n", "self", ".", "out_conv", "=", "Convolution", "(", "spatial_dims", ",", "ft_chns", "[", "0", "]", ",", "out_channels", ",", "conv_only", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.project-monai_research-contributions.coplenet-pneumonia-lesion-segmentation.coplenet.CopleNet.forward": [[127, 160], ["list", "coplenet.CopleNet.in_conv", "coplenet.CopleNet.bridge0", "coplenet.CopleNet.down1", "coplenet.CopleNet.bridge1", "coplenet.CopleNet.down2", "coplenet.CopleNet.bridge2", "coplenet.CopleNet.down3", "coplenet.CopleNet.bridge3", "coplenet.CopleNet.down4", "coplenet.CopleNet.aspp", "coplenet.CopleNet.up1", "coplenet.CopleNet.up2", "coplenet.CopleNet.up3", "coplenet.CopleNet.up4", "coplenet.CopleNet.out_conv", "len", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "len", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "len", "NotImplementedError", "list"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x_shape", "=", "list", "(", "x", ".", "shape", ")", "\n", "if", "len", "(", "x_shape", ")", "==", "5", ":", "\n", "            ", "[", "batch", ",", "chns", ",", "dim1", ",", "dim2", ",", "dim3", "]", "=", "x_shape", "\n", "new_shape", "=", "[", "batch", "*", "dim1", ",", "chns", ",", "dim2", ",", "dim3", "]", "\n", "x", "=", "torch", ".", "transpose", "(", "x", ",", "1", ",", "2", ")", "\n", "x", "=", "torch", ".", "reshape", "(", "x", ",", "new_shape", ")", "\n", "", "elif", "len", "(", "x_shape", ")", "==", "3", ":", "\n", "            ", "raise", "NotImplementedError", "(", "\"spatial dimension = 1 not supported.\"", ")", "\n", "\n", "", "x0", "=", "self", ".", "in_conv", "(", "x", ")", "\n", "x0b", "=", "self", ".", "bridge0", "(", "x0", ")", "\n", "x1", "=", "self", ".", "down1", "(", "x0", ")", "\n", "x1b", "=", "self", ".", "bridge1", "(", "x1", ")", "\n", "x2", "=", "self", ".", "down2", "(", "x1", ")", "\n", "x2b", "=", "self", ".", "bridge2", "(", "x2", ")", "\n", "x3", "=", "self", ".", "down3", "(", "x2", ")", "\n", "x3b", "=", "self", ".", "bridge3", "(", "x3", ")", "\n", "x4", "=", "self", ".", "down4", "(", "x3", ")", "\n", "\n", "x4", "=", "self", ".", "aspp", "(", "x4", ")", "\n", "\n", "x", "=", "self", ".", "up1", "(", "x4", ",", "x3b", ")", "\n", "x", "=", "self", ".", "up2", "(", "x", ",", "x2b", ")", "\n", "x", "=", "self", ".", "up3", "(", "x", ",", "x1b", ")", "\n", "x", "=", "self", ".", "up4", "(", "x", ",", "x0b", ")", "\n", "output", "=", "self", ".", "out_conv", "(", "x", ")", "\n", "\n", "if", "len", "(", "x_shape", ")", "==", "5", ":", "\n", "            ", "new_shape", "=", "[", "batch", ",", "dim1", "]", "+", "list", "(", "output", ".", "shape", ")", "[", "1", ":", "]", "\n", "output", "=", "torch", ".", "reshape", "(", "output", ",", "new_shape", ")", "\n", "output", "=", "torch", ".", "transpose", "(", "output", ",", "1", ",", "2", ")", "\n", "", "return", "output", "\n", "", "", ""]], "home.repos.pwc.inspect_result.project-monai_research-contributions.coplenet-pneumonia-lesion-segmentation.test_coplenet.TestCopleNET.test_shape": [[42, 52], ["parameterized.parameterized.parameterized.expand", "coplenet.CopleNet", "torch.cuda.is_available", "net.to.to.eval", "net.to.to.to", "input_data.to.to.to", "torch.no_grad", "net.to.to.forward", "test_coplenet.TestCopleNET.assertEqual", "torch.device", "torch.device", "input_data.to.to.float"], "methods", ["home.repos.pwc.inspect_result.project-monai_research-contributions.networks.unetr.UNETR.forward"], ["    ", "@", "parameterized", ".", "expand", "(", "TEST_CASES", ")", "\n", "def", "test_shape", "(", "self", ",", "input_param", ",", "input_data", ",", "expected_shape", ")", ":", "\n", "        ", "net", "=", "CopleNet", "(", "**", "input_param", ")", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "            ", "net", "=", "net", ".", "to", "(", "torch", ".", "device", "(", "\"cuda\"", ")", ")", "\n", "input_data", "=", "input_data", ".", "to", "(", "torch", ".", "device", "(", "\"cuda\"", ")", ")", "\n", "", "net", ".", "eval", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "result", "=", "net", ".", "forward", "(", "input_data", ".", "float", "(", ")", ")", "\n", "self", ".", "assertEqual", "(", "result", ".", "shape", ",", "expected_shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.project-monai_research-contributions.BTCV.main.main": [[96, 107], ["parser.parse_args", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "print", "torch.spawn", "main.main_worker"], "function", ["home.repos.pwc.inspect_result.project-monai_research-contributions.BRATS21.main.main_worker"], ["args", "=", "(", "args", ",", ")", ")", "\n", "", "else", ":", "\n", "        ", "main_worker", "(", "gpu", "=", "0", ",", "args", "=", "args", ")", "\n", "\n", "", "", "def", "main_worker", "(", "gpu", ",", "args", ")", ":", "\n", "\n", "    ", "if", "args", ".", "distributed", ":", "\n", "        ", "torch", ".", "multiprocessing", ".", "set_start_method", "(", "'fork'", ",", "force", "=", "True", ")", "\n", "", "np", ".", "set_printoptions", "(", "formatter", "=", "{", "'float'", ":", "'{: 0.3f}'", ".", "format", "}", ",", "suppress", "=", "True", ")", "\n", "args", ".", "gpu", "=", "gpu", "\n", "if", "args", ".", "distributed", ":", "\n", "        ", "args", ".", "rank", "=", "args", ".", "rank", "*", "args", ".", "ngpus_per_node", "+", "gpu", "\n"]], "home.repos.pwc.inspect_result.project-monai_research-contributions.BTCV.main.main_worker": [[109, 238], ["numpy.set_printoptions", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "utils.data_utils.get_loader", "print", "monai.losses.DiceCELoss", "monai.transforms.AsDiscrete", "monai.transforms.AsDiscrete", "monai.metrics.DiceMetric", "functools.partial", "sum", "print", "torch.nn.SyncBatchNorm.convert_sync_batchnorm.cuda", "trainer.run_training", "torch.multiprocessing.set_start_method", "torch.multiprocessing.set_start_method", "torch.multiprocessing.set_start_method", "torch.multiprocessing.set_start_method", "torch.multiprocessing.set_start_method", "torch.init_process_group", "print", "networks.unetr.UNETR", "ValueError", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "OrderedDict", "checkpoint[].items", "torch.nn.SyncBatchNorm.convert_sync_batchnorm.load_state_dict", "print", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.nn.SyncBatchNorm.convert_sync_batchnorm.cuda", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "optimizers.lr_scheduler.LinearWarmupCosineAnnealingLR", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.nn.SyncBatchNorm.convert_sync_batchnorm.load_state_dict", "print", "torch.jit.load", "torch.jit.load", "torch.jit.load", "torch.jit.load", "torch.jit.load", "p.numel", "torch.nn.SyncBatchNorm.convert_sync_batchnorm", "torch.nn.SyncBatchNorm.convert_sync_batchnorm", "torch.nn.SyncBatchNorm.convert_sync_batchnorm", "torch.nn.SyncBatchNorm.convert_sync_batchnorm", "torch.nn.SyncBatchNorm.convert_sync_batchnorm", "torch.nn.SyncBatchNorm.convert_sync_batchnorm.parameters", "torch.optim.AdamW", "torch.optim.AdamW", "torch.optim.AdamW", "torch.optim.AdamW", "torch.optim.AdamW", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "os.path.join", "print", "os.path.join", "str", "torch.nn.SyncBatchNorm.convert_sync_batchnorm.parameters", "torch.nn.SyncBatchNorm.convert_sync_batchnorm.parameters", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "ValueError", "torch.optim.lr_scheduler.CosineAnnealingLR.step", "k.replace", "torch.nn.SyncBatchNorm.convert_sync_batchnorm.parameters", "str"], "function", ["home.repos.pwc.inspect_result.project-monai_research-contributions.utils.data_utils.get_loader", "home.repos.pwc.inspect_result.project-monai_research-contributions.BRATS21.trainer.run_training"], ["init_method", "=", "args", ".", "dist_url", ",", "\n", "world_size", "=", "args", ".", "world_size", ",", "\n", "rank", "=", "args", ".", "rank", ")", "\n", "", "torch", ".", "cuda", ".", "set_device", "(", "args", ".", "gpu", ")", "\n", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "True", "\n", "args", ".", "test_mode", "=", "False", "\n", "loader", "=", "get_loader", "(", "args", ")", "\n", "print", "(", "args", ".", "rank", ",", "' gpu'", ",", "args", ".", "gpu", ")", "\n", "if", "args", ".", "rank", "==", "0", ":", "\n", "        ", "print", "(", "'Batch size is:'", ",", "args", ".", "batch_size", ",", "'epochs'", ",", "args", ".", "max_epochs", ")", "\n", "", "inf_size", "=", "[", "args", ".", "roi_x", ",", "args", ".", "roi_y", ",", "args", ".", "roi_z", "]", "\n", "\n", "pretrained_dir", "=", "args", ".", "pretrained_dir", "\n", "model", "=", "SwinUNETR", "(", "img_size", "=", "(", "args", ".", "roi_x", ",", "args", ".", "roi_y", ",", "args", ".", "roi_z", ")", ",", "\n", "in_channels", "=", "args", ".", "in_channels", ",", "\n", "out_channels", "=", "args", ".", "out_channels", ",", "\n", "feature_size", "=", "args", ".", "feature_size", ",", "\n", "drop_rate", "=", "0.0", ",", "\n", "attn_drop_rate", "=", "0.0", ",", "\n", "dropout_path_rate", "=", "args", ".", "dropout_path_rate", ",", "\n", "use_checkpoint", "=", "args", ".", "use_checkpoint", ",", "\n", ")", "\n", "\n", "if", "args", ".", "resume_ckpt", ":", "\n", "        ", "model_dict", "=", "torch", ".", "load", "(", "os", ".", "path", ".", "join", "(", "pretrained_dir", ",", "args", ".", "pretrained_model_name", ")", ")", "[", "\"state_dict\"", "]", "\n", "model", ".", "load_state_dict", "(", "model_dict", ")", "\n", "print", "(", "'Use pretrained weights'", ")", "\n", "\n", "", "if", "args", ".", "use_ssl_pretrained", ":", "\n", "        ", "try", ":", "\n", "            ", "weight", "=", "torch", ".", "load", "(", "'./pretrained_models/model_swinvit.pt'", ")", "\n", "model", ".", "load_from", "(", "weights", "=", "weight", ")", "\n", "print", "(", "'Using pretrained self-supervied Swin UNETR backbone weights !'", ")", "\n", "", "except", "ValueError", ":", "\n", "            ", "raise", "ValueError", "(", "'Self-supervised pre-trained weights not available for'", "+", "str", "(", "args", ".", "model_name", ")", ")", "\n", "\n", "\n", "", "", "if", "args", ".", "squared_dice", ":", "\n", "        ", "dice_loss", "=", "DiceCELoss", "(", "to_onehot_y", "=", "True", ",", "\n", "softmax", "=", "True", ",", "\n", "squared_pred", "=", "True", ",", "\n", "smooth_nr", "=", "args", ".", "smooth_nr", ",", "\n", "smooth_dr", "=", "args", ".", "smooth_dr", ")", "\n", "", "else", ":", "\n", "        ", "dice_loss", "=", "DiceCELoss", "(", "to_onehot_y", "=", "True", ",", "\n", "softmax", "=", "True", "\n", ")", "\n", "", "post_label", "=", "AsDiscrete", "(", "to_onehot", "=", "True", ",", "\n", "n_classes", "=", "args", ".", "out_channels", ")", "\n", "post_pred", "=", "AsDiscrete", "(", "argmax", "=", "True", ",", "\n", "to_onehot", "=", "True", ",", "\n", "n_classes", "=", "args", ".", "out_channels", ")", "\n", "dice_acc", "=", "DiceMetric", "(", "include_background", "=", "True", ",", "\n", "reduction", "=", "MetricReduction", ".", "MEAN", ",", "\n", "get_not_nans", "=", "True", ")", "\n", "model_inferer", "=", "partial", "(", "sliding_window_inference", ",", "\n", "roi_size", "=", "inf_size", ",", "\n", "sw_batch_size", "=", "args", ".", "sw_batch_size", ",", "\n", "predictor", "=", "model", ",", "\n", "overlap", "=", "args", ".", "infer_overlap", ")", "\n", "\n", "pytorch_total_params", "=", "sum", "(", "p", ".", "numel", "(", ")", "for", "p", "in", "model", ".", "parameters", "(", ")", "if", "p", ".", "requires_grad", ")", "\n", "print", "(", "'Total parameters count'", ",", "pytorch_total_params", ")", "\n", "\n", "best_acc", "=", "0", "\n", "start_epoch", "=", "0", "\n", "\n", "if", "args", ".", "checkpoint", "is", "not", "None", ":", "\n", "        ", "checkpoint", "=", "torch", ".", "load", "(", "args", ".", "checkpoint", ",", "map_location", "=", "'cpu'", ")", "\n", "from", "collections", "import", "OrderedDict", "\n", "new_state_dict", "=", "OrderedDict", "(", ")", "\n", "for", "k", ",", "v", "in", "checkpoint", "[", "'state_dict'", "]", ".", "items", "(", ")", ":", "\n", "            ", "new_state_dict", "[", "k", ".", "replace", "(", "'backbone.'", ",", "''", ")", "]", "=", "v", "\n", "", "model", ".", "load_state_dict", "(", "new_state_dict", ",", "strict", "=", "False", ")", "\n", "if", "'epoch'", "in", "checkpoint", ":", "\n", "            ", "start_epoch", "=", "checkpoint", "[", "'epoch'", "]", "\n", "", "if", "'best_acc'", "in", "checkpoint", ":", "\n", "            ", "best_acc", "=", "checkpoint", "[", "'best_acc'", "]", "\n", "", "print", "(", "\"=> loaded checkpoint '{}' (epoch {}) (bestacc {})\"", ".", "format", "(", "args", ".", "checkpoint", ",", "start_epoch", ",", "best_acc", ")", ")", "\n", "\n", "", "model", ".", "cuda", "(", "args", ".", "gpu", ")", "\n", "\n", "if", "args", ".", "distributed", ":", "\n", "        ", "torch", ".", "cuda", ".", "set_device", "(", "args", ".", "gpu", ")", "\n", "if", "args", ".", "norm_name", "==", "'batch'", ":", "\n", "            ", "model", "=", "torch", ".", "nn", ".", "SyncBatchNorm", ".", "convert_sync_batchnorm", "(", "model", ")", "\n", "", "model", ".", "cuda", "(", "args", ".", "gpu", ")", "\n", "model", "=", "torch", ".", "nn", ".", "parallel", ".", "DistributedDataParallel", "(", "model", ",", "\n", "device_ids", "=", "[", "args", ".", "gpu", "]", ",", "\n", "output_device", "=", "args", ".", "gpu", ",", "\n", ")", "\n", "", "if", "args", ".", "optim_name", "==", "'adam'", ":", "\n", "        ", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "model", ".", "parameters", "(", ")", ",", "\n", "lr", "=", "args", ".", "optim_lr", ",", "\n", "weight_decay", "=", "args", ".", "reg_weight", ")", "\n", "", "elif", "args", ".", "optim_name", "==", "'adamw'", ":", "\n", "        ", "optimizer", "=", "torch", ".", "optim", ".", "AdamW", "(", "model", ".", "parameters", "(", ")", ",", "\n", "lr", "=", "args", ".", "optim_lr", ",", "\n", "weight_decay", "=", "args", ".", "reg_weight", ")", "\n", "", "elif", "args", ".", "optim_name", "==", "'sgd'", ":", "\n", "        ", "optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "model", ".", "parameters", "(", ")", ",", "\n", "lr", "=", "args", ".", "optim_lr", ",", "\n", "momentum", "=", "args", ".", "momentum", ",", "\n", "nesterov", "=", "True", ",", "\n", "weight_decay", "=", "args", ".", "reg_weight", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'Unsupported Optimization Procedure: '", "+", "str", "(", "args", ".", "optim_name", ")", ")", "\n", "\n", "", "if", "args", ".", "lrschedule", "==", "'warmup_cosine'", ":", "\n", "        ", "scheduler", "=", "LinearWarmupCosineAnnealingLR", "(", "optimizer", ",", "\n", "warmup_epochs", "=", "args", ".", "warmup_epochs", ",", "\n", "max_epochs", "=", "args", ".", "max_epochs", ")", "\n", "", "elif", "args", ".", "lrschedule", "==", "'cosine_anneal'", ":", "\n", "        ", "scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "CosineAnnealingLR", "(", "optimizer", ",", "\n", "T_max", "=", "args", ".", "max_epochs", ")", "\n", "if", "args", ".", "checkpoint", "is", "not", "None", ":", "\n", "            ", "scheduler", ".", "step", "(", "epoch", "=", "start_epoch", ")", "\n", "", "", "else", ":", "\n", "        ", "scheduler", "=", "None", "\n", "", "accuracy", "=", "run_training", "(", "model", "=", "model", ",", "\n", "train_loader", "=", "loader", "[", "0", "]", ",", "\n", "val_loader", "=", "loader", "[", "1", "]", ",", "\n", "optimizer", "=", "optimizer", ",", "\n", "loss_func", "=", "dice_loss", ",", "\n", "acc_func", "=", "dice_acc", ",", "\n", "args", "=", "args", ",", "\n", "model_inferer", "=", "model_inferer", ",", "\n", "scheduler", "=", "scheduler", ",", "\n", "start_epoch", "=", "start_epoch", ",", "\n", "post_label", "=", "post_label", ",", "\n"]], "home.repos.pwc.inspect_result.project-monai_research-contributions.BTCV.trainer.train_epoch": [[53, 92], ["model.train", "time.time", "trainer.AverageMeter", "enumerate", "model.parameters", "isinstance", "model.parameters", "time.time", "data.cuda", "target.cuda", "torch.cuda.amp.autocast", "model", "loss_func", "scaler.scale().backward", "scaler.step", "scaler.update", "loss_func.backward", "optimizer.step", "utils.utils.distributed_all_gather", "trainer.AverageMeter.update", "trainer.AverageMeter.update", "print", "numpy.mean", "loss_func.item", "scaler.scale", "numpy.mean", "len", "numpy.stack", "time.time"], "function", ["home.repos.pwc.inspect_result.project-monai_research-contributions.lamp-automated-model-parallelism.train.train", "home.repos.pwc.inspect_result.project-monai_research-contributions.utils.utils.AverageMeter.update", "home.repos.pwc.inspect_result.project-monai_research-contributions.utils.utils.distributed_all_gather", "home.repos.pwc.inspect_result.project-monai_research-contributions.utils.utils.AverageMeter.update", "home.repos.pwc.inspect_result.project-monai_research-contributions.utils.utils.AverageMeter.update"], ["", "if", "args", ".", "distributed", ":", "\n", "            ", "loss_list", "=", "distributed_all_gather", "(", "[", "loss", "]", ",", "\n", "out_numpy", "=", "True", ",", "\n", "is_valid", "=", "idx", "<", "loader", ".", "sampler", ".", "valid_length", ")", "\n", "run_loss", ".", "update", "(", "np", ".", "mean", "(", "np", ".", "mean", "(", "np", ".", "stack", "(", "loss_list", ",", "axis", "=", "0", ")", ",", "axis", "=", "0", ")", ",", "axis", "=", "0", ")", ",", "\n", "n", "=", "args", ".", "batch_size", "*", "args", ".", "world_size", ")", "\n", "", "else", ":", "\n", "            ", "run_loss", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "n", "=", "args", ".", "batch_size", ")", "\n", "", "if", "args", ".", "rank", "==", "0", ":", "\n", "            ", "print", "(", "'Epoch {}/{} {}/{}'", ".", "format", "(", "epoch", ",", "args", ".", "max_epochs", ",", "idx", ",", "len", "(", "loader", ")", ")", ",", "\n", "'loss: {:.4f}'", ".", "format", "(", "run_loss", ".", "avg", ")", ",", "\n", "'time {:.2f}s'", ".", "format", "(", "time", ".", "time", "(", ")", "-", "start_time", ")", ")", "\n", "", "start_time", "=", "time", ".", "time", "(", ")", "\n", "", "for", "param", "in", "model", ".", "parameters", "(", ")", ":", "param", ".", "grad", "=", "None", "\n", "return", "run_loss", ".", "avg", "\n", "\n", "", "def", "val_epoch", "(", "model", ",", "\n", "loader", ",", "\n", "epoch", ",", "\n", "acc_func", ",", "\n", "args", ",", "\n", "model_inferer", "=", "None", ",", "\n", "post_label", "=", "None", ",", "\n", "post_pred", "=", "None", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "run_acc", "=", "AverageMeter", "(", ")", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "idx", ",", "batch_data", "in", "enumerate", "(", "loader", ")", ":", "\n", "            ", "if", "isinstance", "(", "batch_data", ",", "list", ")", ":", "\n", "                ", "data", ",", "target", "=", "batch_data", "\n", "", "else", ":", "\n", "                ", "data", ",", "target", "=", "batch_data", "[", "'image'", "]", ",", "batch_data", "[", "'label'", "]", "\n", "", "data", ",", "target", "=", "data", ".", "cuda", "(", "args", ".", "rank", ")", ",", "target", ".", "cuda", "(", "args", ".", "rank", ")", "\n", "with", "autocast", "(", "enabled", "=", "args", ".", "amp", ")", ":", "\n", "                ", "if", "model_inferer", "is", "not", "None", ":", "\n", "                    ", "logits", "=", "model_inferer", "(", "data", ")", "\n", "", "else", ":", "\n", "                    ", "logits", "=", "model", "(", "data", ")", "\n", "", "", "if", "not", "logits", ".", "is_cuda", ":", "\n"]], "home.repos.pwc.inspect_result.project-monai_research-contributions.BTCV.trainer.val_epoch": [[94, 135], ["model.eval", "time.time", "torch.no_grad", "torch.no_grad", "torch.no_grad", "enumerate", "isinstance", "monai.data.decollate_batch", "monai.data.decollate_batch", "acc_func", "acc.cuda.cuda", "time.time", "data.cuda", "target.cpu.cuda", "torch.cuda.amp.autocast", "target.cpu.cpu", "post_label", "post_pred", "utils.utils.distributed_all_gather", "numpy.mean", "acc.cuda.detach().cpu().numpy", "numpy.mean", "print", "model_inferer", "model", "numpy.nanmean", "acc.cuda.detach().cpu", "numpy.nanmean", "len", "time.time", "acc.cuda.detach"], "function", ["home.repos.pwc.inspect_result.project-monai_research-contributions.utils.utils.distributed_all_gather"], ["", "val_labels_list", "=", "decollate_batch", "(", "target", ")", "\n", "val_labels_convert", "=", "[", "post_label", "(", "val_label_tensor", ")", "for", "val_label_tensor", "in", "val_labels_list", "]", "\n", "val_outputs_list", "=", "decollate_batch", "(", "logits", ")", "\n", "val_output_convert", "=", "[", "post_pred", "(", "val_pred_tensor", ")", "for", "val_pred_tensor", "in", "val_outputs_list", "]", "\n", "acc_func", ".", "reset", "(", ")", "\n", "acc_func", "(", "y_pred", "=", "val_output_convert", ",", "y", "=", "val_labels_convert", ")", "\n", "acc", ",", "not_nans", "=", "acc_func", ".", "aggregate", "(", ")", "\n", "acc", "=", "acc", ".", "cuda", "(", "args", ".", "rank", ")", "\n", "\n", "if", "args", ".", "distributed", ":", "\n", "                ", "acc_list", ",", "not_nans_list", "=", "distributed_all_gather", "(", "[", "acc", ",", "not_nans", "]", ",", "\n", "out_numpy", "=", "True", ",", "\n", "is_valid", "=", "idx", "<", "loader", ".", "sampler", ".", "valid_length", ")", "\n", "for", "al", ",", "nl", "in", "zip", "(", "acc_list", ",", "not_nans_list", ")", ":", "\n", "                    ", "run_acc", ".", "update", "(", "al", ",", "n", "=", "nl", ")", "\n", "\n", "", "", "else", ":", "\n", "                ", "run_acc", ".", "update", "(", "acc", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "n", "=", "not_nans", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "\n", "", "if", "args", ".", "rank", "==", "0", ":", "\n", "                ", "avg_acc", "=", "np", ".", "mean", "(", "run_acc", ".", "avg", ")", "\n", "print", "(", "'Val {}/{} {}/{}'", ".", "format", "(", "epoch", ",", "args", ".", "max_epochs", ",", "idx", ",", "len", "(", "loader", ")", ")", ",", "\n", "'acc'", ",", "avg_acc", ",", "\n", "'time {:.2f}s'", ".", "format", "(", "time", ".", "time", "(", ")", "-", "start_time", ")", ")", "\n", "", "start_time", "=", "time", ".", "time", "(", ")", "\n", "", "", "return", "run_acc", ".", "avg", "\n", "\n", "", "def", "save_checkpoint", "(", "model", ",", "\n", "epoch", ",", "\n", "args", ",", "\n", "filename", "=", "'model.pt'", ",", "\n", "best_acc", "=", "0", ",", "\n", "optimizer", "=", "None", ",", "\n", "scheduler", "=", "None", ")", ":", "\n", "    ", "state_dict", "=", "model", ".", "state_dict", "(", ")", "if", "not", "args", ".", "distributed", "else", "model", ".", "module", ".", "state_dict", "(", ")", "\n", "save_dict", "=", "{", "\n", "'epoch'", ":", "epoch", ",", "\n", "'best_acc'", ":", "best_acc", ",", "\n", "'state_dict'", ":", "state_dict", "\n", "}", "\n", "if", "optimizer", "is", "not", "None", ":", "\n", "        ", "save_dict", "[", "'optimizer'", "]", "=", "optimizer", ".", "state_dict", "(", ")", "\n"]], "home.repos.pwc.inspect_result.project-monai_research-contributions.BTCV.trainer.save_checkpoint": [[137, 147], ["os.path.join", "torch.save", "torch.save", "torch.save", "print", "model.state_dict", "model.module.state_dict", "optimizer.state_dict", "scheduler.state_dict"], "function", ["None"], ["        ", "save_dict", "[", "'scheduler'", "]", "=", "scheduler", ".", "state_dict", "(", ")", "\n", "", "filename", "=", "os", ".", "path", ".", "join", "(", "args", ".", "logdir", ",", "filename", ")", "\n", "torch", ".", "save", "(", "save_dict", ",", "filename", ")", "\n", "print", "(", "'Saving checkpoint'", ",", "filename", ")", "\n", "\n", "", "def", "run_training", "(", "model", ",", "\n", "train_loader", ",", "\n", "val_loader", ",", "\n", "optimizer", ",", "\n", "loss_func", ",", "\n", "acc_func", ",", "\n"]], "home.repos.pwc.inspect_result.project-monai_research-contributions.BTCV.trainer.run_training": [[149, 233], ["range", "print", "tensorboardX.SummaryWriter", "torch.cuda.amp.GradScaler", "print", "time.time", "trainer.train_epoch", "print", "train_loader.sampler.set_epoch", "torch.distributed.barrier", "torch.distributed.barrier", "torch.distributed.barrier", "time.ctime", "print", "tensorboardX.SummaryWriter.add_scalar", "time.time", "trainer.val_epoch", "scheduler.step", "torch.distributed.barrier", "torch.distributed.barrier", "torch.distributed.barrier", "print", "trainer.save_checkpoint", "tensorboardX.SummaryWriter.add_scalar", "print", "print", "shutil.copyfile", "time.time", "trainer.save_checkpoint", "os.path.join", "os.path.join", "time.time"], "function", ["home.repos.pwc.inspect_result.project-monai_research-contributions.BRATS21.trainer.train_epoch", "home.repos.pwc.inspect_result.project-monai_research-contributions.utils.data_utils.Sampler.set_epoch", "home.repos.pwc.inspect_result.project-monai_research-contributions.BRATS21.trainer.val_epoch", "home.repos.pwc.inspect_result.project-monai_research-contributions.BRATS21.trainer.save_checkpoint", "home.repos.pwc.inspect_result.project-monai_research-contributions.BRATS21.trainer.save_checkpoint"], ["model_inferer", "=", "None", ",", "\n", "scheduler", "=", "None", ",", "\n", "start_epoch", "=", "0", ",", "\n", "post_label", "=", "None", ",", "\n", "post_pred", "=", "None", "\n", ")", ":", "\n", "    ", "writer", "=", "None", "\n", "if", "args", ".", "logdir", "is", "not", "None", "and", "args", ".", "rank", "==", "0", ":", "\n", "        ", "writer", "=", "SummaryWriter", "(", "log_dir", "=", "args", ".", "logdir", ")", "\n", "if", "args", ".", "rank", "==", "0", ":", "print", "(", "'Writing Tensorboard logs to '", ",", "args", ".", "logdir", ")", "\n", "", "scaler", "=", "None", "\n", "if", "args", ".", "amp", ":", "\n", "        ", "scaler", "=", "GradScaler", "(", ")", "\n", "", "val_acc_max", "=", "0.", "\n", "for", "epoch", "in", "range", "(", "start_epoch", ",", "args", ".", "max_epochs", ")", ":", "\n", "        ", "if", "args", ".", "distributed", ":", "\n", "            ", "train_loader", ".", "sampler", ".", "set_epoch", "(", "epoch", ")", "\n", "torch", ".", "distributed", ".", "barrier", "(", ")", "\n", "", "print", "(", "args", ".", "rank", ",", "time", ".", "ctime", "(", ")", ",", "'Epoch:'", ",", "epoch", ")", "\n", "epoch_time", "=", "time", ".", "time", "(", ")", "\n", "train_loss", "=", "train_epoch", "(", "model", ",", "\n", "train_loader", ",", "\n", "optimizer", ",", "\n", "scaler", "=", "scaler", ",", "\n", "epoch", "=", "epoch", ",", "\n", "loss_func", "=", "loss_func", ",", "\n", "args", "=", "args", ")", "\n", "if", "args", ".", "rank", "==", "0", ":", "\n", "            ", "print", "(", "'Final training  {}/{}'", ".", "format", "(", "epoch", ",", "args", ".", "max_epochs", "-", "1", ")", ",", "'loss: {:.4f}'", ".", "format", "(", "train_loss", ")", ",", "\n", "'time {:.2f}s'", ".", "format", "(", "time", ".", "time", "(", ")", "-", "epoch_time", ")", ")", "\n", "", "if", "args", ".", "rank", "==", "0", "and", "writer", "is", "not", "None", ":", "\n", "            ", "writer", ".", "add_scalar", "(", "'train_loss'", ",", "train_loss", ",", "epoch", ")", "\n", "", "b_new_best", "=", "False", "\n", "if", "(", "epoch", "+", "1", ")", "%", "args", ".", "val_every", "==", "0", ":", "\n", "            ", "if", "args", ".", "distributed", ":", "\n", "                ", "torch", ".", "distributed", ".", "barrier", "(", ")", "\n", "", "epoch_time", "=", "time", ".", "time", "(", ")", "\n", "val_avg_acc", "=", "val_epoch", "(", "model", ",", "\n", "val_loader", ",", "\n", "epoch", "=", "epoch", ",", "\n", "acc_func", "=", "acc_func", ",", "\n", "model_inferer", "=", "model_inferer", ",", "\n", "args", "=", "args", ",", "\n", "post_label", "=", "post_label", ",", "\n", "post_pred", "=", "post_pred", ")", "\n", "\n", "val_avg_acc", "=", "np", ".", "mean", "(", "val_avg_acc", ")", "\n", "\n", "if", "args", ".", "rank", "==", "0", ":", "\n", "                ", "print", "(", "'Final validation  {}/{}'", ".", "format", "(", "epoch", ",", "args", ".", "max_epochs", "-", "1", ")", ",", "\n", "'acc'", ",", "val_avg_acc", ",", "'time {:.2f}s'", ".", "format", "(", "time", ".", "time", "(", ")", "-", "epoch_time", ")", ")", "\n", "if", "writer", "is", "not", "None", ":", "\n", "                    ", "writer", ".", "add_scalar", "(", "'val_acc'", ",", "val_avg_acc", ",", "epoch", ")", "\n", "", "if", "val_avg_acc", ">", "val_acc_max", ":", "\n", "                    ", "print", "(", "'new best ({:.6f} --> {:.6f}). '", ".", "format", "(", "val_acc_max", ",", "val_avg_acc", ")", ")", "\n", "val_acc_max", "=", "val_avg_acc", "\n", "b_new_best", "=", "True", "\n", "if", "args", ".", "rank", "==", "0", "and", "args", ".", "logdir", "is", "not", "None", "and", "args", ".", "save_checkpoint", ":", "\n", "                        ", "save_checkpoint", "(", "model", ",", "epoch", ",", "args", ",", "\n", "best_acc", "=", "val_acc_max", ",", "\n", "optimizer", "=", "optimizer", ",", "\n", "scheduler", "=", "scheduler", ")", "\n", "", "", "", "if", "args", ".", "rank", "==", "0", "and", "args", ".", "logdir", "is", "not", "None", "and", "args", ".", "save_checkpoint", ":", "\n", "                ", "save_checkpoint", "(", "model", ",", "\n", "epoch", ",", "\n", "args", ",", "\n", "best_acc", "=", "val_acc_max", ",", "\n", "filename", "=", "'model_final.pt'", ")", "\n", "if", "b_new_best", ":", "\n", "                    ", "print", "(", "'Copying to model.pt new best model!!!!'", ")", "\n", "shutil", ".", "copyfile", "(", "os", ".", "path", ".", "join", "(", "args", ".", "logdir", ",", "'model_final.pt'", ")", ",", "os", ".", "path", ".", "join", "(", "args", ".", "logdir", ",", "'model.pt'", ")", ")", "\n", "\n", "", "", "", "if", "scheduler", "is", "not", "None", ":", "\n", "            ", "scheduler", ".", "step", "(", ")", "\n", "\n", "", "", "print", "(", "'Training Finished !, Best Accuracy: '", ",", "val_acc_max", ")", "\n", "\n", "return", "val_acc_max", "\n", "", ""]], "home.repos.pwc.inspect_result.project-monai_research-contributions.BTCV.test.main": [[65, 113], ["parser.parse_args", "utils.data_utils.get_loader", "torch.device", "os.path.join", "networks.unetr.UNETR.eval", "networks.unetr.UNETR.to", "torch.jit.load", "torch.no_grad", "enumerate", "print", "torch.cuda.is_available", "networks.unetr.UNETR", "torch.load", "networks.unetr.UNETR.load_state_dict", "print", "monai.inferers.sliding_window_inference", "torch.softmax().cpu().numpy", "numpy.argmax().astype", "range", "numpy.mean", "print", "dice_list_case.append", "batch[].cuda", "batch[].cuda", "[].split", "val_labels.cpu().numpy", "trainer.dice", "dice_list_sub.append", "numpy.mean", "torch.softmax().cpu", "numpy.argmax", "val_labels.cpu", "torch.softmax"], "function", ["home.repos.pwc.inspect_result.project-monai_research-contributions.utils.data_utils.get_loader", "home.repos.pwc.inspect_result.project-monai_research-contributions.utils.utils.dice"], ["in_channels", "=", "args", ".", "in_channels", ",", "\n", "out_channels", "=", "args", ".", "out_channels", ",", "\n", "feature_size", "=", "args", ".", "feature_size", ",", "\n", "drop_rate", "=", "0.0", ",", "\n", "attn_drop_rate", "=", "0.0", ",", "\n", "dropout_path_rate", "=", "0.0", ",", "\n", "use_checkpoint", "=", "args", ".", "use_checkpoint", ",", "\n", ")", "\n", "model_dict", "=", "torch", ".", "load", "(", "pretrained_pth", ")", "[", "\"state_dict\"", "]", "\n", "model", ".", "load_state_dict", "(", "model_dict", ")", "\n", "model", ".", "eval", "(", ")", "\n", "model", ".", "to", "(", "device", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "dice_list_case", "=", "[", "]", "\n", "for", "i", ",", "batch", "in", "enumerate", "(", "val_loader", ")", ":", "\n", "            ", "val_inputs", ",", "val_labels", "=", "(", "batch", "[", "\"image\"", "]", ".", "cuda", "(", ")", ",", "batch", "[", "\"label\"", "]", ".", "cuda", "(", ")", ")", "\n", "original_affine", "=", "batch", "[", "'label_meta_dict'", "]", "[", "'affine'", "]", "[", "0", "]", ".", "numpy", "(", ")", "\n", "_", ",", "_", ",", "h", ",", "w", ",", "d", "=", "val_labels", ".", "shape", "\n", "target_shape", "=", "(", "h", ",", "w", ",", "d", ")", "\n", "img_name", "=", "batch", "[", "'image_meta_dict'", "]", "[", "'filename_or_obj'", "]", "[", "0", "]", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "\n", "print", "(", "\"Inference on case {}\"", ".", "format", "(", "img_name", ")", ")", "\n", "val_outputs", "=", "sliding_window_inference", "(", "val_inputs", ",", "\n", "(", "args", ".", "roi_x", ",", "\n", "args", ".", "roi_y", ",", "\n", "args", ".", "roi_z", ")", ",", "\n", "4", ",", "\n", "model", ",", "\n", "overlap", "=", "args", ".", "infer_overlap", ",", "\n", "mode", "=", "\"gaussian\"", ")", "\n", "val_outputs", "=", "torch", ".", "softmax", "(", "val_outputs", ",", "1", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "val_outputs", "=", "np", ".", "argmax", "(", "val_outputs", ",", "axis", "=", "1", ")", ".", "astype", "(", "np", ".", "uint8", ")", "[", "0", "]", "\n", "val_labels", "=", "val_labels", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", "0", ",", "0", ",", ":", ",", ":", ",", ":", "]", "\n", "val_outputs", "=", "resample_3d", "(", "val_outputs", ",", "target_shape", ")", "\n", "dice_list_sub", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "1", ",", "14", ")", ":", "\n", "                ", "organ_Dice", "=", "dice", "(", "val_outputs", "==", "i", ",", "val_labels", "==", "i", ")", "\n", "dice_list_sub", ".", "append", "(", "organ_Dice", ")", "\n", "", "mean_dice", "=", "np", ".", "mean", "(", "dice_list_sub", ")", "\n", "print", "(", "\"Mean Organ Dice: {}\"", ".", "format", "(", "mean_dice", ")", ")", "\n", "dice_list_case", ".", "append", "(", "mean_dice", ")", "\n", "nib", ".", "save", "(", "nib", ".", "Nifti1Image", "(", "val_outputs", ".", "astype", "(", "np", ".", "uint8", ")", ",", "original_affine", ")", ",", "\n", "os", ".", "path", ".", "join", "(", "output_directory", ",", "img_name", ")", ")", "\n", "\n", "", "print", "(", "\"Overall Mean Dice: {}\"", ".", "format", "(", "np", ".", "mean", "(", "dice_list_case", ")", ")", ")", "\n", "\n", "", "", "if", "__name__", "==", "'__main__'", ":", "\n", "    ", "main", "(", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.project-monai_research-contributions.BTCV.trainer.AverageMeter.__init__": [[37, 39], ["trainer.AverageMeter.reset"], "methods", ["home.repos.pwc.inspect_result.project-monai_research-contributions.utils.utils.AverageMeter.reset"], ["            ", "data", ",", "target", "=", "batch_data", "\n", "", "else", ":", "\n", "            ", "data", ",", "target", "=", "batch_data", "[", "'image'", "]", ",", "batch_data", "[", "'label'", "]", "\n"]], "home.repos.pwc.inspect_result.project-monai_research-contributions.BTCV.trainer.AverageMeter.reset": [[40, 45], ["None"], "methods", ["None"], ["", "data", ",", "target", "=", "data", ".", "cuda", "(", "args", ".", "rank", ")", ",", "target", ".", "cuda", "(", "args", ".", "rank", ")", "\n", "for", "param", "in", "model", ".", "parameters", "(", ")", ":", "param", ".", "grad", "=", "None", "\n", "with", "autocast", "(", "enabled", "=", "args", ".", "amp", ")", ":", "\n", "            ", "logits", "=", "model", "(", "data", ")", "\n", "loss", "=", "loss_func", "(", "logits", ",", "target", ")", "\n", "#", "\n"]], "home.repos.pwc.inspect_result.project-monai_research-contributions.BTCV.trainer.AverageMeter.update": [[46, 51], ["numpy.where"], "methods", ["None"], ["", "if", "args", ".", "amp", ":", "\n", "            ", "scaler", ".", "scale", "(", "loss", ")", ".", "backward", "(", ")", "\n", "scaler", ".", "step", "(", "optimizer", ")", "\n", "scaler", ".", "update", "(", ")", "\n", "", "else", ":", "\n", "            ", "loss", ".", "backward", "(", ")", "\n"]], "home.repos.pwc.inspect_result.project-monai_research-contributions.BTCV.trainer.dice": [[27, 34], ["numpy.sum", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.sum"], "function", ["None"], ["optimizer", ",", "\n", "scaler", ",", "\n", "epoch", ",", "\n", "loss_func", ",", "\n", "args", ")", ":", "\n", "    ", "model", ".", "train", "(", ")", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "run_loss", "=", "AverageMeter", "(", ")", "\n"]], "home.repos.pwc.inspect_result.project-monai_research-contributions.utils.data_utils.Sampler.__init__": [[23, 42], ["int", "list", "len", "torch.distributed.get_world_size", "torch.distributed.get_rank", "math.ceil", "range", "torch.distributed.is_available", "RuntimeError", "torch.distributed.is_available", "RuntimeError", "len", "len"], "methods", ["None"], ["\"OpticNerve_R\"", ",", "\n", "\"Parotid_L\"", ",", "\n", "\"Parotid_R\"", ",", "\n", "\"Submandibular_L\"", ",", "\n", "\"Submandibular_R\"", ",", "\n", ")", "\n", "\n", "\n", "def", "get_filenames", "(", "path", ",", "maskname", "=", "STRUCTURES", ")", ":", "\n", "    ", "\"\"\"\n    create file names according to the predefined folder structure.\n\n    Args:\n        path: data folder name\n        maskname: target structure names\n    \"\"\"", "\n", "maskfiles", "=", "[", "]", "\n", "for", "seg", "in", "maskname", ":", "\n", "        ", "if", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "path", ",", "\"./structures/\"", "+", "seg", "+", "\"_crp_v2.npy\"", ")", ")", ":", "\n", "            ", "maskfiles", ".", "append", "(", "os", ".", "path", ".", "join", "(", "path", ",", "\"./structures/\"", "+", "seg", "+", "\"_crp_v2.npy\"", ")", ")", "\n"]], "home.repos.pwc.inspect_result.project-monai_research-contributions.utils.data_utils.Sampler.__iter__": [[43, 61], ["len", "iter", "torch.Generator", "torch.Generator.manual_seed", "torch.randperm().tolist", "list", "range", "len", "len", "torch.randperm", "len", "len", "numpy.random.randint", "len", "len", "len", "len", "len"], "methods", ["None"], ["", "else", ":", "\n", "# the corresponding mask is missing seg, path.split(\"/\")[-1]", "\n", "            ", "maskfiles", ".", "append", "(", "None", ")", "\n", "", "", "return", "os", ".", "path", ".", "join", "(", "path", ",", "\"img_crp_v2.npy\"", ")", ",", "maskfiles", "\n", "\n", "\n", "", "def", "load_data_and_mask", "(", "data", ",", "mask_data", ")", ":", "\n", "    ", "\"\"\"\n    Load data filename and mask_data (list of file names)\n    into a dictionary of {'image': array, \"label\": list of arrays, \"name\": str}.\n    \"\"\"", "\n", "pad_xform", "=", "DivisiblePad", "(", "k", "=", "32", ")", "\n", "img", "=", "np", ".", "load", "(", "data", ")", "# z y x", "\n", "img", "=", "pad_xform", "(", "img", "[", "None", "]", ")", "[", "0", "]", "\n", "item", "=", "dict", "(", "image", "=", "img", ",", "label", "=", "[", "]", ")", "\n", "for", "maskfnm", "in", "mask_data", ":", "\n", "        ", "if", "maskfnm", "is", "None", ":", "\n", "            ", "ms", "=", "np", ".", "zeros", "(", "img", ".", "shape", ",", "np", ".", "uint8", ")", "\n", "", "else", ":", "\n"]], "home.repos.pwc.inspect_result.project-monai_research-contributions.utils.data_utils.Sampler.__len__": [[62, 64], ["None"], "methods", ["None"], ["            ", "ms", "=", "np", ".", "load", "(", "maskfnm", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "assert", "ms", ".", "min", "(", ")", "==", "0", "and", "ms", ".", "max", "(", ")", "==", "1", "\n", "", "mask", "=", "pad_xform", "(", "ms", "[", "None", "]", ")", "[", "0", "]", "\n"]], "home.repos.pwc.inspect_result.project-monai_research-contributions.utils.data_utils.Sampler.set_epoch": [[65, 67], ["None"], "methods", ["None"], ["item", "[", "\"label\"", "]", ".", "append", "(", "mask", ")", "\n", "", "assert", "len", "(", "item", "[", "\"label\"", "]", ")", "==", "9", "\n", "item", "[", "\"name\"", "]", "=", "str", "(", "data", ")", "\n"]], "home.repos.pwc.inspect_result.project-monai_research-contributions.utils.data_utils.get_loader": [[69, 166], ["os.path.join", "monai.transforms.Compose", "monai.transforms.Compose", "monai.data.load_decathlon_datalist", "monai.data.Dataset", "monai.data.DataLoader", "monai.data.load_decathlon_datalist", "monai.data.DataLoader", "monai.data.load_decathlon_datalist", "monai.data.Dataset", "monai.data.DataLoader", "monai.transforms.LoadImaged", "monai.transforms.AddChanneld", "monai.transforms.Orientationd", "monai.transforms.Spacingd", "monai.transforms.ScaleIntensityRanged", "monai.transforms.CropForegroundd", "monai.transforms.RandCropByPosNegLabeld", "monai.transforms.RandFlipd", "monai.transforms.RandFlipd", "monai.transforms.RandFlipd", "monai.transforms.RandRotate90d", "monai.transforms.RandScaleIntensityd", "monai.transforms.RandShiftIntensityd", "monai.transforms.ToTensord", "monai.transforms.LoadImaged", "monai.transforms.AddChanneld", "monai.transforms.Orientationd", "monai.transforms.Spacingd", "monai.transforms.ScaleIntensityRanged", "monai.transforms.CropForegroundd", "monai.transforms.ToTensord", "data_utils.Sampler", "monai.data.Dataset", "monai.data.CacheDataset", "data_utils.Sampler", "data_utils.Sampler"], "function", ["None"], ["", ""]], "home.repos.pwc.inspect_result.project-monai_research-contributions.utils.utils.AverageMeter.__init__": [[26, 28], ["utils.AverageMeter.reset"], "methods", ["home.repos.pwc.inspect_result.project-monai_research-contributions.utils.utils.AverageMeter.reset"], ["# print(\"This is Integer\")", "\n", "            ", "return", "int", "(", "a", ")", "\n", "", "else", ":", "\n"]], "home.repos.pwc.inspect_result.project-monai_research-contributions.utils.utils.AverageMeter.reset": [[29, 34], ["None"], "methods", ["None"], ["# print(\"This is Float\")", "\n", "            ", "return", "float", "(", "a", ")", "\n", "", "", "except", "ValueError", ":", "\n", "# print(\"This value is String\")", "\n", "        ", "if", "a", ".", "lower", "(", ")", "==", "\"true\"", ":", "\n", "            ", "return", "True", "\n"]], "home.repos.pwc.inspect_result.project-monai_research-contributions.utils.utils.AverageMeter.update": [[35, 40], ["numpy.where"], "methods", ["None"], ["", "elif", "a", ".", "lower", "(", ")", "==", "\"false\"", ":", "\n", "            ", "return", "False", "\n", "", "elif", "a", ".", "lower", "(", ")", "==", "\"none\"", ":", "\n", "            ", "return", "None", "\n", "\n", "", "return", "str", "(", "a", ")", "\n"]], "home.repos.pwc.inspect_result.project-monai_research-contributions.utils.utils.resample_3d": [[17, 23], ["scipy.zoom", "float", "float", "float", "float", "float", "float"], "function", ["None"], ["from", "skimage", ".", "transform", "import", "resize", "\n", "\n", "from", "monai", ".", "metrics", ".", "utils", "import", "do_metric_reduction", ",", "ignore_background", "\n", "\n", "\n", "def", "check_number", "(", "a", ")", ":", "\n", "    ", "try", ":", "\n"]], "home.repos.pwc.inspect_result.project-monai_research-contributions.utils.utils.dice": [[16, 23], ["numpy.sum", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.sum"], "function", ["None"], ["from", "skimage", "import", "measure", "\n", "from", "skimage", ".", "transform", "import", "resize", "\n", "\n", "from", "monai", ".", "metrics", ".", "utils", "import", "do_metric_reduction", ",", "ignore_background", "\n", "\n", "\n", "def", "check_number", "(", "a", ")", ":", "\n", "    ", "try", ":", "\n"]], "home.repos.pwc.inspect_result.project-monai_research-contributions.utils.utils.distributed_all_gather": [[42, 71], ["torch.distributed.get_world_size", "min", "torch.distributed.barrier", "torch.no_grad", "torch.tensor", "torch.distributed.all_gather", "torch.distributed.all_gather", "tensor_list_out.append", "bool", "torch.zeros_like", "x.item", "torch.zeros_like", "range", "range", "t.cpu().numpy", "zip", "t.cpu"], "function", ["None"], ["\n", "", "", "def", "check_list_tuple", "(", "a", ")", ":", "\n", "    ", "if", "not", "isinstance", "(", "a", ",", "str", ")", ":", "\n", "        ", "return", "a", "\n", "\n", "", "a", "=", "a", ".", "replace", "(", "\" \"", ",", "\"\"", ")", "\n", "if", "a", "[", "0", "]", "==", "\"(\"", "and", "a", "[", "-", "1", "]", "==", "\")\"", ":", "\n", "        ", "part_split", "=", "a", "[", "1", ":", "-", "1", "]", ".", "split", "(", "\",\"", ")", "\n", "out", "=", "[", "]", "\n", "for", "_s", "in", "range", "(", "len", "(", "part_split", ")", ")", ":", "\n", "            ", "out", ".", "append", "(", "check_number", "(", "part_split", "[", "_s", "]", ")", ")", "\n", "", "out", "=", "tuple", "(", "_i", "for", "_i", "in", "out", ")", "\n", "return", "out", "\n", "", "elif", "a", "[", "0", "]", "==", "\"[\"", "and", "a", "[", "-", "1", "]", "==", "\"]\"", ":", "\n", "        ", "part_split", "=", "a", "[", "1", ":", "-", "1", "]", ".", "split", "(", "\",\"", ")", "\n", "out", "=", "[", "]", "\n", "for", "_s", "in", "range", "(", "len", "(", "part_split", ")", ")", ":", "\n", "            ", "out", ".", "append", "(", "check_number", "(", "part_split", "[", "_s", "]", ")", ")", "\n", "", "return", "out", "\n", "\n", "", "return", "a", "\n", "\n", "\n", "", "def", "parse_monai_specs", "(", "component_string", ")", ":", "\n", "    ", "string_parts", "=", "component_string", ".", "split", "(", "\"|\"", ")", "\n", "component_name", "=", "string_parts", "[", "0", "]", "\n", "\n", "component_dict", "=", "{", "}", "\n", "for", "_k", "in", "range", "(", "1", ",", "len", "(", "string_parts", ")", ")", ":", "\n", "        ", "part", "=", "string_parts", "[", "_k", "]", "\n"]], "home.repos.pwc.inspect_result.project-monai_research-contributions.utils.ops.patch_rand_drop": [[17, 50], ["x.size", "int", "int", "int", "int", "int", "int", "numpy.random.randint", "numpy.random.randint", "numpy.random.randint", "min", "min", "min", "torch.empty().normal_", "numpy.random.uniform", "numpy.random.randint", "numpy.random.randint", "numpy.random.randint", "torch.empty", "torch.min", "torch.max", "torch.min"], "function", ["None"], ["def", "patch_rand_drop", "(", "args", ",", "\n", "x", ",", "\n", "x_rep", "=", "None", ",", "\n", "max_drop", "=", "0.3", ",", "\n", "max_block_sz", "=", "0.25", ",", "\n", "tolr", "=", "0.05", ")", ":", "\n", "    ", "c", ",", "h", ",", "w", ",", "z", "=", "x", ".", "size", "(", ")", "\n", "n_drop_pix", "=", "np", ".", "random", ".", "uniform", "(", "0", ",", "max_drop", ")", "*", "h", "*", "w", "*", "z", "\n", "mx_blk_height", "=", "int", "(", "h", "*", "max_block_sz", ")", "\n", "mx_blk_width", "=", "int", "(", "w", "*", "max_block_sz", ")", "\n", "mx_blk_slices", "=", "int", "(", "z", "*", "max_block_sz", ")", "\n", "tolr", "=", "(", "int", "(", "tolr", "*", "h", ")", ",", "int", "(", "tolr", "*", "w", ")", ",", "int", "(", "tolr", "*", "z", ")", ")", "\n", "total_pix", "=", "0", "\n", "while", "total_pix", "<", "n_drop_pix", ":", "\n", "        ", "rnd_r", "=", "randint", "(", "0", ",", "h", "-", "tolr", "[", "0", "]", ")", "\n", "rnd_c", "=", "randint", "(", "0", ",", "w", "-", "tolr", "[", "1", "]", ")", "\n", "rnd_s", "=", "randint", "(", "0", ",", "z", "-", "tolr", "[", "2", "]", ")", "\n", "rnd_h", "=", "min", "(", "randint", "(", "tolr", "[", "0", "]", ",", "mx_blk_height", ")", "+", "rnd_r", ",", "h", ")", "\n", "rnd_w", "=", "min", "(", "randint", "(", "tolr", "[", "1", "]", ",", "mx_blk_width", ")", "+", "rnd_c", ",", "w", ")", "\n", "rnd_z", "=", "min", "(", "randint", "(", "tolr", "[", "2", "]", ",", "mx_blk_slices", ")", "+", "rnd_s", ",", "z", ")", "\n", "if", "x_rep", "is", "None", ":", "\n", "            ", "x_uninitialized", "=", "torch", ".", "empty", "(", "(", "c", ",", "rnd_h", "-", "rnd_r", ",", "\n", "rnd_w", "-", "rnd_c", ",", "\n", "rnd_z", "-", "rnd_s", ")", ",", "\n", "dtype", "=", "x", ".", "dtype", ",", "\n", "device", "=", "args", ".", "local_rank", ")", ".", "normal_", "(", ")", "\n", "x_uninitialized", "=", "(", "x_uninitialized", "-", "torch", ".", "min", "(", "x_uninitialized", ")", ")", "/", "(", "torch", ".", "max", "(", "x_uninitialized", ")", "-", "torch", ".", "min", "(", "x_uninitialized", ")", ")", "\n", "x", "[", ":", ",", "rnd_r", ":", "rnd_h", ",", "rnd_c", ":", "rnd_w", ",", "rnd_s", ":", "rnd_z", "]", "=", "x_uninitialized", "\n", "", "else", ":", "\n", "            ", "x", "[", ":", ",", "rnd_r", ":", "rnd_h", ",", "rnd_c", ":", "rnd_w", ",", "rnd_s", ":", "rnd_z", "]", "=", "x_rep", "[", ":", ",", "rnd_r", ":", "rnd_h", ",", "rnd_c", ":", "rnd_w", ",", "rnd_s", ":", "rnd_z", "]", "\n", "", "total_pix", "=", "total_pix", "+", "(", "rnd_h", "-", "rnd_r", ")", "*", "(", "rnd_w", "-", "rnd_c", ")", "*", "(", "rnd_z", "-", "rnd_s", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.project-monai_research-contributions.utils.ops.rot_rand": [[52, 71], ["x_s.detach().clone", "torch.device", "torch.zeros().long().to", "range", "x_s.size", "numpy.random.randint", "x_s.detach", "torch.zeros().long", "x.rot90.rot90", "torch.zeros", "x.rot90.rot90", "x.rot90.rot90"], "function", ["None"], ["", "def", "rot_rand", "(", "args", ",", "x_s", ")", ":", "\n", "    ", "img_n", "=", "x_s", ".", "size", "(", ")", "[", "0", "]", "\n", "x_aug", "=", "x_s", ".", "detach", "(", ")", ".", "clone", "(", ")", "\n", "device", "=", "torch", ".", "device", "(", "f\"cuda:{args.local_rank}\"", ")", "\n", "x_rot", "=", "torch", ".", "zeros", "(", "img_n", ")", ".", "long", "(", ")", ".", "to", "(", "device", ")", "\n", "for", "i", "in", "range", "(", "img_n", ")", ":", "\n", "        ", "x", "=", "x_s", "[", "i", "]", "\n", "orientation", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "4", ")", "\n", "if", "orientation", "==", "0", ":", "\n", "            ", "pass", "\n", "", "elif", "orientation", "==", "1", ":", "\n", "            ", "x", "=", "x", ".", "rot90", "(", "1", ",", "(", "2", ",", "3", ")", ")", "\n", "", "elif", "orientation", "==", "2", ":", "\n", "            ", "x", "=", "x", ".", "rot90", "(", "2", ",", "(", "2", ",", "3", ")", ")", "\n", "", "elif", "orientation", "==", "3", ":", "\n", "            ", "x", "=", "x", ".", "rot90", "(", "3", ",", "(", "2", ",", "3", ")", ")", "\n", "", "x_aug", "[", "i", "]", "=", "x", "\n", "x_rot", "[", "i", "]", "=", "orientation", "\n", "", "return", "x_aug", ",", "x_rot", "\n", "\n"]], "home.repos.pwc.inspect_result.project-monai_research-contributions.utils.ops.aug_rand": [[73, 84], ["samples.detach().clone", "range", "samples.size", "ops.patch_rand_drop", "numpy.random.randint", "samples.detach", "ops.patch_rand_drop"], "function", ["home.repos.pwc.inspect_result.project-monai_research-contributions.utils.ops.patch_rand_drop", "home.repos.pwc.inspect_result.project-monai_research-contributions.utils.ops.patch_rand_drop"], ["", "def", "aug_rand", "(", "args", ",", "samples", ")", ":", "\n", "    ", "img_n", "=", "samples", ".", "size", "(", ")", "[", "0", "]", "\n", "x_aug", "=", "samples", ".", "detach", "(", ")", ".", "clone", "(", ")", "\n", "for", "i", "in", "range", "(", "img_n", ")", ":", "\n", "        ", "x_aug", "[", "i", "]", "=", "patch_rand_drop", "(", "args", ",", "x_aug", "[", "i", "]", ")", "\n", "idx_rnd", "=", "randint", "(", "0", ",", "img_n", ")", "\n", "if", "idx_rnd", "!=", "i", ":", "\n", "            ", "x_aug", "[", "i", "]", "=", "patch_rand_drop", "(", "args", ",", "\n", "x_aug", "[", "i", "]", ",", "\n", "x_aug", "[", "idx_rnd", "]", ")", "\n", "", "", "return", "x_aug", "\n", "", ""]], "home.repos.pwc.inspect_result.project-monai_research-contributions.utils.data_utils.datafold_read": [[68, 94], ["open", "json.load", "d.items", "isinstance", "val.append", "tr.append", "isinstance", "os.path.join", "os.path.join", "len"], "function", ["None"], ["return", "item", "\n", "", ""]], "home.repos.pwc.inspect_result.project-monai_research-contributions.optimizers.lr_scheduler._LRSchedulerMONAI.__init__": [[27, 40], ["torch.optim.lr_scheduler._LRScheduler.__init__"], "methods", ["home.repos.pwc.inspect_result.project-monai_research-contributions.networks.unetr.UNETR.__init__"], ["\n", "\n", "def", "__init__", "(", "self", ",", "optimizer", ":", "Optimizer", ",", "end_lr", ":", "float", ",", "num_iter", ":", "int", ",", "last_epoch", ":", "int", "=", "-", "1", ")", "->", "None", ":", "\n", "        ", "\"\"\"\n        Args:\n            optimizer: wrapped optimizer.\n            end_lr: the final learning rate.\n            num_iter: the number of iterations over which the test occurs.\n            last_epoch: the index of last epoch.\n        Returns:\n            None\n        \"\"\"", "\n", "self", ".", "end_lr", "=", "end_lr", "\n", "self", ".", "num_iter", "=", "num_iter", "\n"]], "home.repos.pwc.inspect_result.project-monai_research-contributions.optimizers.lr_scheduler.LinearLR.get_lr": [[47, 50], ["None"], "methods", ["None"], ["\n", "\n", "def", "get_lr", "(", "self", ")", ":", "\n", "        ", "r", "=", "self", ".", "last_epoch", "/", "(", "self", ".", "num_iter", "-", "1", ")", "\n"]], "home.repos.pwc.inspect_result.project-monai_research-contributions.optimizers.lr_scheduler.ExponentialLR.get_lr": [[57, 60], ["None"], "methods", ["None"], ["\n", "\n", "def", "get_lr", "(", "self", ")", ":", "\n", "        ", "r", "=", "self", ".", "last_epoch", "/", "(", "self", ".", "num_iter", "-", "1", ")", "\n"]], "home.repos.pwc.inspect_result.project-monai_research-contributions.optimizers.lr_scheduler.WarmupCosineSchedule.__init__": [[67, 84], ["torch.optim.lr_scheduler.LambdaLR.__init__"], "methods", ["home.repos.pwc.inspect_result.project-monai_research-contributions.networks.unetr.UNETR.__init__"], ["\n", "\n", "def", "__init__", "(", "\n", "self", ",", "optimizer", ":", "Optimizer", ",", "warmup_steps", ":", "int", ",", "t_total", ":", "int", ",", "cycles", ":", "float", "=", "0.5", ",", "last_epoch", ":", "int", "=", "-", "1", "\n", ")", "->", "None", ":", "\n", "        ", "\"\"\"\n        Args:\n            optimizer: wrapped optimizer.\n            warmup_steps: number of warmup iterations.\n            t_total: total number of training iterations.\n            cycles: cosine cycles parameter.\n            last_epoch: the index of last epoch.\n        Returns:\n            None\n        \"\"\"", "\n", "self", ".", "warmup_steps", "=", "warmup_steps", "\n", "self", ".", "t_total", "=", "t_total", "\n", "self", ".", "cycles", "=", "cycles", "\n"]], "home.repos.pwc.inspect_result.project-monai_research-contributions.optimizers.lr_scheduler.WarmupCosineSchedule.lr_lambda": [[85, 90], ["max", "float", "float", "float", "float", "max", "max", "math.cos", "float"], "methods", ["None"], ["super", "(", "WarmupCosineSchedule", ",", "self", ")", ".", "__init__", "(", "optimizer", ",", "self", ".", "lr_lambda", ",", "last_epoch", ")", "\n", "\n", "", "def", "lr_lambda", "(", "self", ",", "step", ")", ":", "\n", "        ", "if", "step", "<", "self", ".", "warmup_steps", ":", "\n", "            ", "return", "float", "(", "step", ")", "/", "float", "(", "max", "(", "1.0", ",", "self", ".", "warmup_steps", ")", ")", "\n", "", "progress", "=", "float", "(", "step", "-", "self", ".", "warmup_steps", ")", "/", "float", "(", "max", "(", "1", ",", "self", ".", "t_total", "-", "self", ".", "warmup_steps", ")", ")", "\n"]], "home.repos.pwc.inspect_result.project-monai_research-contributions.optimizers.lr_scheduler.LinearWarmupCosineAnnealingLR.__init__": [[93, 117], ["torch.optim.lr_scheduler._LRScheduler.__init__"], "methods", ["home.repos.pwc.inspect_result.project-monai_research-contributions.networks.unetr.UNETR.__init__"], ["", "", "class", "LinearWarmupCosineAnnealingLR", "(", "_LRScheduler", ")", ":", "\n", "\n", "    ", "def", "__init__", "(", "\n", "self", ",", "\n", "optimizer", ":", "Optimizer", ",", "\n", "warmup_epochs", ":", "int", ",", "\n", "max_epochs", ":", "int", ",", "\n", "warmup_start_lr", ":", "float", "=", "0.0", ",", "\n", "eta_min", ":", "float", "=", "0.0", ",", "\n", "last_epoch", ":", "int", "=", "-", "1", ",", "\n", ")", "->", "None", ":", "\n", "        ", "\"\"\"\n        Args:\n            optimizer (Optimizer): Wrapped optimizer.\n            warmup_epochs (int): Maximum number of iterations for linear warmup\n            max_epochs (int): Maximum number of iterations\n            warmup_start_lr (float): Learning rate to start the linear warmup. Default: 0.\n            eta_min (float): Minimum learning rate. Default: 0.\n            last_epoch (int): The index of last epoch. Default: -1.\n        \"\"\"", "\n", "self", ".", "warmup_epochs", "=", "warmup_epochs", "\n", "self", ".", "max_epochs", "=", "max_epochs", "\n", "self", ".", "warmup_start_lr", "=", "warmup_start_lr", "\n", "self", ".", "eta_min", "=", "eta_min", "\n", "\n"]], "home.repos.pwc.inspect_result.project-monai_research-contributions.optimizers.lr_scheduler.LinearWarmupCosineAnnealingLR.get_lr": [[118, 154], ["warnings.warn", "len", "zip", "math.cos", "math.cos", "zip", "math.cos"], "methods", ["None"], ["super", "(", "LinearWarmupCosineAnnealingLR", ",", "self", ")", ".", "__init__", "(", "optimizer", ",", "last_epoch", ")", "\n", "\n", "", "def", "get_lr", "(", "self", ")", "->", "List", "[", "float", "]", ":", "\n", "        ", "\"\"\"\n        Compute learning rate using chainable form of the scheduler\n        \"\"\"", "\n", "if", "not", "self", ".", "_get_lr_called_within_step", ":", "\n", "            ", "warnings", ".", "warn", "(", "\n", "\"To get the last learning rate computed by the scheduler, \"", "\n", "\"please use `get_last_lr()`.\"", ",", "\n", "UserWarning", ",", "\n", ")", "\n", "\n", "", "if", "self", ".", "last_epoch", "==", "0", ":", "\n", "            ", "return", "[", "self", ".", "warmup_start_lr", "]", "*", "len", "(", "self", ".", "base_lrs", ")", "\n", "", "elif", "self", ".", "last_epoch", "<", "self", ".", "warmup_epochs", ":", "\n", "            ", "return", "[", "\n", "group", "[", "\"lr\"", "]", "+", "(", "base_lr", "-", "self", ".", "warmup_start_lr", ")", "/", "(", "self", ".", "warmup_epochs", "-", "1", ")", "\n", "for", "base_lr", ",", "group", "in", "zip", "(", "self", ".", "base_lrs", ",", "self", ".", "optimizer", ".", "param_groups", ")", "\n", "]", "\n", "", "elif", "self", ".", "last_epoch", "==", "self", ".", "warmup_epochs", ":", "\n", "            ", "return", "self", ".", "base_lrs", "\n", "", "elif", "(", "self", ".", "last_epoch", "-", "1", "-", "self", ".", "max_epochs", ")", "%", "(", "2", "*", "(", "self", ".", "max_epochs", "-", "self", ".", "warmup_epochs", ")", ")", "==", "0", ":", "\n", "            ", "return", "[", "\n", "group", "[", "\"lr\"", "]", "+", "(", "base_lr", "-", "self", ".", "eta_min", ")", "*", "\n", "(", "1", "-", "math", ".", "cos", "(", "math", ".", "pi", "/", "(", "self", ".", "max_epochs", "-", "self", ".", "warmup_epochs", ")", ")", ")", "/", "2", "\n", "for", "base_lr", ",", "group", "in", "zip", "(", "self", ".", "base_lrs", ",", "self", ".", "optimizer", ".", "param_groups", ")", "\n", "]", "\n", "\n", "", "return", "[", "\n", "(", "1", "+", "math", ".", "cos", "(", "math", ".", "pi", "*", "(", "self", ".", "last_epoch", "-", "self", ".", "warmup_epochs", ")", "/", "(", "self", ".", "max_epochs", "-", "self", ".", "warmup_epochs", ")", ")", ")", "/", "\n", "(", "\n", "1", "+", "\n", "math", ".", "cos", "(", "math", ".", "pi", "*", "(", "self", ".", "last_epoch", "-", "self", ".", "warmup_epochs", "-", "1", ")", "/", "(", "self", ".", "max_epochs", "-", "self", ".", "warmup_epochs", ")", ")", "\n", ")", "*", "(", "group", "[", "\"lr\"", "]", "-", "self", ".", "eta_min", ")", "+", "self", ".", "eta_min", "for", "group", "in", "self", ".", "optimizer", ".", "param_groups", "\n", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.project-monai_research-contributions.optimizers.lr_scheduler.LinearWarmupCosineAnnealingLR._get_closed_form_lr": [[156, 172], ["math.cos"], "methods", ["None"], ["        ", "\"\"\"\n        Called when epoch is passed as a param to the `step` function of the scheduler.\n        \"\"\"", "\n", "if", "self", ".", "last_epoch", "<", "self", ".", "warmup_epochs", ":", "\n", "            ", "return", "[", "\n", "self", ".", "warmup_start_lr", "+", "self", ".", "last_epoch", "*", "(", "base_lr", "-", "self", ".", "warmup_start_lr", ")", "/", "(", "self", ".", "warmup_epochs", "-", "1", ")", "\n", "for", "base_lr", "in", "self", ".", "base_lrs", "\n", "]", "\n", "\n", "", "return", "[", "\n", "self", ".", "eta_min", "+", "0.5", "*", "(", "base_lr", "-", "self", ".", "eta_min", ")", "*", "\n", "(", "1", "+", "math", ".", "cos", "(", "math", ".", "pi", "*", "(", "self", ".", "last_epoch", "-", "self", ".", "warmup_epochs", ")", "/", "(", "self", ".", "max_epochs", "-", "self", ".", "warmup_epochs", ")", ")", ")", "\n", "for", "base_lr", "in", "self", ".", "base_lrs", "\n", "]", "\n", "", "", ""]], "home.repos.pwc.inspect_result.project-monai_research-contributions.Pretrain.main.main": [[30, 301], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "torch.autograd.set_detect_anomaly", "torch.autograd.set_detect_anomaly", "torch.autograd.set_detect_anomaly", "models.ssl_head.SSLHead", "torch.nn.parallel.DistributedDataParallel.cuda", "losses.loss.Loss", "utils.data_utils.get_loader", "main.main.save_ckp"], "function", ["home.repos.pwc.inspect_result.project-monai_research-contributions.utils.data_utils.get_loader"], ["\n", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Swin UNETR segmentation pipeline'", ")", "\n", "parser", ".", "add_argument", "(", "'--checkpoint'", ",", "default", "=", "None", ",", "help", "=", "'start training from saved checkpoint'", ")", "\n", "parser", ".", "add_argument", "(", "'--logdir'", ",", "default", "=", "'test'", ",", "type", "=", "str", ",", "help", "=", "'directory to save the tensorboard logs'", ")", "\n", "parser", ".", "add_argument", "(", "'--pretrained_dir'", ",", "default", "=", "'./pretrained_models/'", ",", "type", "=", "str", ",", "help", "=", "'pretrained checkpoint directory'", ")", "\n", "parser", ".", "add_argument", "(", "'--data_dir'", ",", "default", "=", "'/dataset/dataset0/'", ",", "type", "=", "str", ",", "help", "=", "'dataset directory'", ")", "\n", "parser", ".", "add_argument", "(", "'--json_list'", ",", "default", "=", "'dataset_0.json'", ",", "type", "=", "str", ",", "help", "=", "'dataset json file'", ")", "\n", "parser", ".", "add_argument", "(", "'--pretrained_model_name'", ",", "default", "=", "'swin_unetr.epoch.b4_5000ep_f48_lr2e-4_pretrained.pt'", ",", "type", "=", "str", ",", "help", "=", "'pretrained model name'", ")", "\n", "parser", ".", "add_argument", "(", "'--save_checkpoint'", ",", "action", "=", "'store_true'", ",", "help", "=", "'save checkpoint during training'", ")", "\n", "parser", ".", "add_argument", "(", "'--max_epochs'", ",", "default", "=", "5000", ",", "type", "=", "int", ",", "help", "=", "'max number of training epochs'", ")", "\n", "parser", ".", "add_argument", "(", "'--batch_size'", ",", "default", "=", "1", ",", "type", "=", "int", ",", "help", "=", "'number of batch size'", ")", "\n", "parser", ".", "add_argument", "(", "'--sw_batch_size'", ",", "default", "=", "4", ",", "type", "=", "int", ",", "help", "=", "'number of sliding window batch size'", ")", "\n", "parser", ".", "add_argument", "(", "'--optim_lr'", ",", "default", "=", "1e-4", ",", "type", "=", "float", ",", "help", "=", "'optimization learning rate'", ")", "\n", "parser", ".", "add_argument", "(", "'--optim_name'", ",", "default", "=", "'adamw'", ",", "type", "=", "str", ",", "help", "=", "'optimization algorithm'", ")", "\n", "parser", ".", "add_argument", "(", "'--reg_weight'", ",", "default", "=", "1e-5", ",", "type", "=", "float", ",", "help", "=", "'regularization weight'", ")", "\n", "parser", ".", "add_argument", "(", "'--momentum'", ",", "default", "=", "0.99", ",", "type", "=", "float", ",", "help", "=", "'momentum'", ")", "\n", "parser", ".", "add_argument", "(", "'--noamp'", ",", "action", "=", "'store_true'", ",", "help", "=", "'do NOT use amp for training'", ")", "\n", "parser", ".", "add_argument", "(", "'--val_every'", ",", "default", "=", "100", ",", "type", "=", "int", ",", "help", "=", "'validation frequency'", ")", "\n", "parser", ".", "add_argument", "(", "'--distributed'", ",", "action", "=", "'store_true'", ",", "help", "=", "'start distributed training'", ")", "\n", "parser", ".", "add_argument", "(", "'--world_size'", ",", "default", "=", "1", ",", "type", "=", "int", ",", "help", "=", "'number of nodes for distributed training'", ")", "\n", "parser", ".", "add_argument", "(", "'--rank'", ",", "default", "=", "0", ",", "type", "=", "int", ",", "help", "=", "'node rank for distributed training'", ")", "\n", "parser", ".", "add_argument", "(", "'--dist-url'", ",", "default", "=", "'tcp://127.0.0.1:23456'", ",", "type", "=", "str", ",", "help", "=", "'distributed url'", ")", "\n", "parser", ".", "add_argument", "(", "'--dist-backend'", ",", "default", "=", "'nccl'", ",", "type", "=", "str", ",", "help", "=", "'distributed backend'", ")", "\n", "parser", ".", "add_argument", "(", "'--workers'", ",", "default", "=", "8", ",", "type", "=", "int", ",", "help", "=", "'number of workers'", ")", "\n", "parser", ".", "add_argument", "(", "'--feature_size'", ",", "default", "=", "48", ",", "type", "=", "int", ",", "help", "=", "'feature size'", ")", "\n", "parser", ".", "add_argument", "(", "'--in_channels'", ",", "default", "=", "1", ",", "type", "=", "int", ",", "help", "=", "'number of input channels'", ")", "\n", "parser", ".", "add_argument", "(", "'--out_channels'", ",", "default", "=", "14", ",", "type", "=", "int", ",", "help", "=", "'number of output channels'", ")", "\n", "parser", ".", "add_argument", "(", "'--use_normal_dataset'", ",", "action", "=", "'store_true'", ",", "help", "=", "'use monai Dataset class'", ")", "\n", "parser", ".", "add_argument", "(", "'--a_min'", ",", "default", "=", "-", "175.0", ",", "type", "=", "float", ",", "help", "=", "'a_min in ScaleIntensityRanged'", ")", "\n", "parser", ".", "add_argument", "(", "'--a_max'", ",", "default", "=", "250.0", ",", "type", "=", "float", ",", "help", "=", "'a_max in ScaleIntensityRanged'", ")", "\n", "parser", ".", "add_argument", "(", "'--b_min'", ",", "default", "=", "0.0", ",", "type", "=", "float", ",", "help", "=", "'b_min in ScaleIntensityRanged'", ")", "\n", "parser", ".", "add_argument", "(", "'--b_max'", ",", "default", "=", "1.0", ",", "type", "=", "float", ",", "help", "=", "'b_max in ScaleIntensityRanged'", ")", "\n", "parser", ".", "add_argument", "(", "'--space_x'", ",", "default", "=", "1.5", ",", "type", "=", "float", ",", "help", "=", "'spacing in x direction'", ")", "\n", "parser", ".", "add_argument", "(", "'--space_y'", ",", "default", "=", "1.5", ",", "type", "=", "float", ",", "help", "=", "'spacing in y direction'", ")", "\n", "parser", ".", "add_argument", "(", "'--space_z'", ",", "default", "=", "2.0", ",", "type", "=", "float", ",", "help", "=", "'spacing in z direction'", ")", "\n", "parser", ".", "add_argument", "(", "'--roi_x'", ",", "default", "=", "96", ",", "type", "=", "int", ",", "help", "=", "'roi size in x direction'", ")", "\n", "parser", ".", "add_argument", "(", "'--roi_y'", ",", "default", "=", "96", ",", "type", "=", "int", ",", "help", "=", "'roi size in y direction'", ")", "\n", "parser", ".", "add_argument", "(", "'--roi_z'", ",", "default", "=", "96", ",", "type", "=", "int", ",", "help", "=", "'roi size in z direction'", ")", "\n", "parser", ".", "add_argument", "(", "'--dropout_rate'", ",", "default", "=", "0.0", ",", "type", "=", "float", ",", "help", "=", "'dropout rate'", ")", "\n", "parser", ".", "add_argument", "(", "'--dropout_path_rate'", ",", "default", "=", "0.0", ",", "type", "=", "float", ",", "help", "=", "'drop path rate'", ")", "\n", "parser", ".", "add_argument", "(", "'--RandFlipd_prob'", ",", "default", "=", "0.2", ",", "type", "=", "float", ",", "help", "=", "'RandFlipd aug probability'", ")", "\n", "parser", ".", "add_argument", "(", "'--RandRotate90d_prob'", ",", "default", "=", "0.2", ",", "type", "=", "float", ",", "help", "=", "'RandRotate90d aug probability'", ")", "\n", "parser", ".", "add_argument", "(", "'--RandScaleIntensityd_prob'", ",", "default", "=", "0.1", ",", "type", "=", "float", ",", "help", "=", "'RandScaleIntensityd aug probability'", ")", "\n", "parser", ".", "add_argument", "(", "'--RandShiftIntensityd_prob'", ",", "default", "=", "0.1", ",", "type", "=", "float", ",", "help", "=", "'RandShiftIntensityd aug probability'", ")", "\n", "parser", ".", "add_argument", "(", "'--infer_overlap'", ",", "default", "=", "0.5", ",", "type", "=", "float", ",", "help", "=", "'sliding window inference overlap'", ")", "\n", "parser", ".", "add_argument", "(", "'--lrschedule'", ",", "default", "=", "'warmup_cosine'", ",", "type", "=", "str", ",", "help", "=", "'type of learning rate scheduler'", ")", "\n", "parser", ".", "add_argument", "(", "'--warmup_epochs'", ",", "default", "=", "50", ",", "type", "=", "int", ",", "help", "=", "'number of warmup epochs'", ")", "\n", "parser", ".", "add_argument", "(", "'--resume_ckpt'", ",", "action", "=", "'store_true'", ",", "help", "=", "'resume training from pretrained checkpoint'", ")", "\n", "parser", ".", "add_argument", "(", "'--smooth_dr'", ",", "default", "=", "1e-6", ",", "type", "=", "float", ",", "help", "=", "'constant added to dice denominator to avoid nan'", ")", "\n", "parser", ".", "add_argument", "(", "'--smooth_nr'", ",", "default", "=", "0.0", ",", "type", "=", "float", ",", "help", "=", "'constant added to dice numerator to avoid zero'", ")", "\n", "parser", ".", "add_argument", "(", "'--use_checkpoint'", ",", "action", "=", "'store_true'", ",", "help", "=", "'use gradient checkpointing to save memory'", ")", "\n", "parser", ".", "add_argument", "(", "'--use_ssl_pretrained'", ",", "action", "=", "'store_true'", ",", "help", "=", "'use self-supervised pretrained weights'", ")", "\n", "parser", ".", "add_argument", "(", "'--spatial_dims'", ",", "default", "=", "3", ",", "type", "=", "int", ",", "help", "=", "'spatial dimension of input data'", ")", "\n", "parser", ".", "add_argument", "(", "'--squared_dice'", ",", "action", "=", "'store_true'", ",", "help", "=", "'use squared Dice'", ")", "\n", "\n", "\n", "def", "main", "(", ")", ":", "\n", "    ", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "args", ".", "amp", "=", "not", "args", ".", "noamp", "\n", "args", ".", "logdir", "=", "'./runs/'", "+", "args", ".", "logdir", "\n", "if", "args", ".", "distributed", ":", "\n", "        ", "args", ".", "ngpus_per_node", "=", "torch", ".", "cuda", ".", "device_count", "(", ")", "\n", "print", "(", "'Found total gpus'", ",", "args", ".", "ngpus_per_node", ")", "\n", "args", ".", "world_size", "=", "args", ".", "ngpus_per_node", "*", "args", ".", "world_size", "\n", "mp", ".", "spawn", "(", "main_worker", ",", "\n", "nprocs", "=", "args", ".", "ngpus_per_node", ",", "\n", "args", "=", "(", "args", ",", ")", ")", "\n", "", "else", ":", "\n", "        ", "main_worker", "(", "gpu", "=", "0", ",", "args", "=", "args", ")", "\n", "\n", "", "", "def", "main_worker", "(", "gpu", ",", "args", ")", ":", "\n", "\n", "    ", "if", "args", ".", "distributed", ":", "\n", "        ", "torch", ".", "multiprocessing", ".", "set_start_method", "(", "'fork'", ",", "force", "=", "True", ")", "\n", "", "np", ".", "set_printoptions", "(", "formatter", "=", "{", "'float'", ":", "'{: 0.3f}'", ".", "format", "}", ",", "suppress", "=", "True", ")", "\n", "args", ".", "gpu", "=", "gpu", "\n", "if", "args", ".", "distributed", ":", "\n", "        ", "args", ".", "rank", "=", "args", ".", "rank", "*", "args", ".", "ngpus_per_node", "+", "gpu", "\n", "dist", ".", "init_process_group", "(", "backend", "=", "args", ".", "dist_backend", ",", "\n", "init_method", "=", "args", ".", "dist_url", ",", "\n", "world_size", "=", "args", ".", "world_size", ",", "\n", "rank", "=", "args", ".", "rank", ")", "\n", "", "torch", ".", "cuda", ".", "set_device", "(", "args", ".", "gpu", ")", "\n", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "True", "\n", "args", ".", "test_mode", "=", "False", "\n", "loader", "=", "get_loader", "(", "args", ")", "\n", "print", "(", "args", ".", "rank", ",", "' gpu'", ",", "args", ".", "gpu", ")", "\n", "if", "args", ".", "rank", "==", "0", ":", "\n", "        ", "print", "(", "'Batch size is:'", ",", "args", ".", "batch_size", ",", "'epochs'", ",", "args", ".", "max_epochs", ")", "\n", "", "inf_size", "=", "[", "args", ".", "roi_x", ",", "args", ".", "roi_y", ",", "args", ".", "roi_z", "]", "\n", "\n", "pretrained_dir", "=", "args", ".", "pretrained_dir", "\n", "model", "=", "SwinUNETR", "(", "img_size", "=", "(", "args", ".", "roi_x", ",", "args", ".", "roi_y", ",", "args", ".", "roi_z", ")", ",", "\n", "in_channels", "=", "args", ".", "in_channels", ",", "\n", "out_channels", "=", "args", ".", "out_channels", ",", "\n", "feature_size", "=", "args", ".", "feature_size", ",", "\n", "drop_rate", "=", "0.0", ",", "\n", "attn_drop_rate", "=", "0.0", ",", "\n", "dropout_path_rate", "=", "args", ".", "dropout_path_rate", ",", "\n", "use_checkpoint", "=", "args", ".", "use_checkpoint", ",", "\n", ")", "\n", "\n", "if", "args", ".", "resume_ckpt", ":", "\n", "        ", "model_dict", "=", "torch", ".", "load", "(", "os", ".", "path", ".", "join", "(", "pretrained_dir", ",", "args", ".", "pretrained_model_name", ")", ")", "[", "\"state_dict\"", "]", "\n", "model", ".", "load_state_dict", "(", "model_dict", ")", "\n", "print", "(", "'Use pretrained weights'", ")", "\n", "\n", "", "if", "args", ".", "use_ssl_pretrained", ":", "\n", "        ", "try", ":", "\n", "            ", "weight", "=", "torch", ".", "load", "(", "'./pretrained_models/model_swinvit.pt'", ")", "\n", "model", ".", "load_from", "(", "weights", "=", "weight", ")", "\n", "print", "(", "'Using pretrained self-supervied Swin UNETR backbone weights !'", ")", "\n", "", "except", "ValueError", ":", "\n", "            ", "raise", "ValueError", "(", "'Self-supervised pre-trained weights not available for'", "+", "str", "(", "args", ".", "model_name", ")", ")", "\n", "\n", "\n", "", "", "if", "args", ".", "squared_dice", ":", "\n", "        ", "dice_loss", "=", "DiceCELoss", "(", "to_onehot_y", "=", "True", ",", "\n", "softmax", "=", "True", ",", "\n", "squared_pred", "=", "True", ",", "\n", "smooth_nr", "=", "args", ".", "smooth_nr", ",", "\n", "smooth_dr", "=", "args", ".", "smooth_dr", ")", "\n", "", "else", ":", "\n", "        ", "dice_loss", "=", "DiceCELoss", "(", "to_onehot_y", "=", "True", ",", "\n", "softmax", "=", "True", "\n", ")", "\n", "", "post_label", "=", "AsDiscrete", "(", "to_onehot", "=", "True", ",", "\n", "n_classes", "=", "args", ".", "out_channels", ")", "\n", "post_pred", "=", "AsDiscrete", "(", "argmax", "=", "True", ",", "\n", "to_onehot", "=", "True", ",", "\n", "n_classes", "=", "args", ".", "out_channels", ")", "\n", "dice_acc", "=", "DiceMetric", "(", "include_background", "=", "True", ",", "\n", "reduction", "=", "MetricReduction", ".", "MEAN", ",", "\n", "get_not_nans", "=", "True", ")", "\n", "model_inferer", "=", "partial", "(", "sliding_window_inference", ",", "\n", "roi_size", "=", "inf_size", ",", "\n", "sw_batch_size", "=", "args", ".", "sw_batch_size", ",", "\n", "predictor", "=", "model", ",", "\n", "overlap", "=", "args", ".", "infer_overlap", ")", "\n", "\n", "pytorch_total_params", "=", "sum", "(", "p", ".", "numel", "(", ")", "for", "p", "in", "model", ".", "parameters", "(", ")", "if", "p", ".", "requires_grad", ")", "\n", "print", "(", "'Total parameters count'", ",", "pytorch_total_params", ")", "\n", "\n", "best_acc", "=", "0", "\n", "start_epoch", "=", "0", "\n", "\n", "if", "args", ".", "checkpoint", "is", "not", "None", ":", "\n", "        ", "checkpoint", "=", "torch", ".", "load", "(", "args", ".", "checkpoint", ",", "map_location", "=", "'cpu'", ")", "\n", "from", "collections", "import", "OrderedDict", "\n", "new_state_dict", "=", "OrderedDict", "(", ")", "\n", "for", "k", ",", "v", "in", "checkpoint", "[", "'state_dict'", "]", ".", "items", "(", ")", ":", "\n", "            ", "new_state_dict", "[", "k", ".", "replace", "(", "'backbone.'", ",", "''", ")", "]", "=", "v", "\n", "", "model", ".", "load_state_dict", "(", "new_state_dict", ",", "strict", "=", "False", ")", "\n", "if", "'epoch'", "in", "checkpoint", ":", "\n", "            ", "start_epoch", "=", "checkpoint", "[", "'epoch'", "]", "\n", "", "if", "'best_acc'", "in", "checkpoint", ":", "\n", "            ", "best_acc", "=", "checkpoint", "[", "'best_acc'", "]", "\n", "", "print", "(", "\"=> loaded checkpoint '{}' (epoch {}) (bestacc {})\"", ".", "format", "(", "args", ".", "checkpoint", ",", "start_epoch", ",", "best_acc", ")", ")", "\n", "\n", "", "model", ".", "cuda", "(", "args", ".", "gpu", ")", "\n", "\n", "if", "args", ".", "distributed", ":", "\n", "        ", "torch", ".", "cuda", ".", "set_device", "(", "args", ".", "gpu", ")", "\n", "if", "args", ".", "norm_name", "==", "'batch'", ":", "\n", "            ", "model", "=", "torch", ".", "nn", ".", "SyncBatchNorm", ".", "convert_sync_batchnorm", "(", "model", ")", "\n", "", "model", ".", "cuda", "(", "args", ".", "gpu", ")", "\n", "model", "=", "torch", ".", "nn", ".", "parallel", ".", "DistributedDataParallel", "(", "model", ",", "\n", "device_ids", "=", "[", "args", ".", "gpu", "]", ",", "\n", "output_device", "=", "args", ".", "gpu", ",", "\n", ")", "\n", "", "if", "args", ".", "optim_name", "==", "'adam'", ":", "\n", "        ", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "model", ".", "parameters", "(", ")", ",", "\n", "lr", "=", "args", ".", "optim_lr", ",", "\n", "weight_decay", "=", "args", ".", "reg_weight", ")", "\n", "", "elif", "args", ".", "optim_name", "==", "'adamw'", ":", "\n", "        ", "optimizer", "=", "torch", ".", "optim", ".", "AdamW", "(", "model", ".", "parameters", "(", ")", ",", "\n", "lr", "=", "args", ".", "optim_lr", ",", "\n", "weight_decay", "=", "args", ".", "reg_weight", ")", "\n", "", "elif", "args", ".", "optim_name", "==", "'sgd'", ":", "\n", "        ", "optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "model", ".", "parameters", "(", ")", ",", "\n", "lr", "=", "args", ".", "optim_lr", ",", "\n", "momentum", "=", "args", ".", "momentum", ",", "\n", "nesterov", "=", "True", ",", "\n", "weight_decay", "=", "args", ".", "reg_weight", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'Unsupported Optimization Procedure: '", "+", "str", "(", "args", ".", "optim_name", ")", ")", "\n", "\n", "", "if", "args", ".", "lrschedule", "==", "'warmup_cosine'", ":", "\n", "        ", "scheduler", "=", "LinearWarmupCosineAnnealingLR", "(", "optimizer", ",", "\n", "warmup_epochs", "=", "args", ".", "warmup_epochs", ",", "\n", "max_epochs", "=", "args", ".", "max_epochs", ")", "\n", "", "elif", "args", ".", "lrschedule", "==", "'cosine_anneal'", ":", "\n", "        ", "scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "CosineAnnealingLR", "(", "optimizer", ",", "\n", "T_max", "=", "args", ".", "max_epochs", ")", "\n", "if", "args", ".", "checkpoint", "is", "not", "None", ":", "\n", "            ", "scheduler", ".", "step", "(", "epoch", "=", "start_epoch", ")", "\n", "", "", "else", ":", "\n", "        ", "scheduler", "=", "None", "\n", "", "accuracy", "=", "run_training", "(", "model", "=", "model", ",", "\n", "train_loader", "=", "loader", "[", "0", "]", ",", "\n", "val_loader", "=", "loader", "[", "1", "]", ",", "\n", "optimizer", "=", "optimizer", ",", "\n", "loss_func", "=", "dice_loss", ",", "\n", "acc_func", "=", "dice_acc", ",", "\n", "args", "=", "args", ",", "\n", "model_inferer", "=", "model_inferer", ",", "\n", "scheduler", "=", "scheduler", ",", "\n", "start_epoch", "=", "start_epoch", ",", "\n", "post_label", "=", "post_label", ",", "\n", "post_pred", "=", "post_pred", ")", "\n", "return", "accuracy", "\n", "\n", "", "if", "__name__", "==", "'__main__'", ":", "\n", "    ", "main", "(", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.project-monai_research-contributions.models.ssl_head.SSLHead.__init__": [[19, 85], ["torch.Module.__init__", "monai.utils.ensure_tuple_rep", "monai.utils.ensure_tuple_rep", "monai.networks.nets.swin_unetr.SwinTransformer", "torch.Identity", "torch.Identity", "torch.Linear", "torch.Linear", "torch.Identity", "torch.Identity", "torch.Linear", "torch.Linear", "torch.ConvTranspose3d", "torch.ConvTranspose3d", "torch.Sequential", "torch.Sequential", "torch.ConvTranspose3d", "torch.ConvTranspose3d", "torch.ConvTranspose3d", "torch.ConvTranspose3d", "torch.ConvTranspose3d", "torch.ConvTranspose3d", "torch.ConvTranspose3d", "torch.ConvTranspose3d", "torch.ConvTranspose3d", "torch.ConvTranspose3d", "torch.Sequential", "torch.Sequential", "torch.Conv3d", "torch.Conv3d", "torch.InstanceNorm3d", "torch.InstanceNorm3d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Upsample", "torch.Upsample", "torch.Conv3d", "torch.Conv3d", "torch.InstanceNorm3d", "torch.InstanceNorm3d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Upsample", "torch.Upsample", "torch.Conv3d", "torch.Conv3d", "torch.InstanceNorm3d", "torch.InstanceNorm3d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Upsample", "torch.Upsample", "torch.Conv3d", "torch.Conv3d", "torch.InstanceNorm3d", "torch.InstanceNorm3d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Upsample", "torch.Upsample", "torch.Conv3d", "torch.Conv3d", "torch.InstanceNorm3d", "torch.InstanceNorm3d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Upsample", "torch.Upsample", "torch.Conv3d", "torch.Conv3d"], "methods", ["home.repos.pwc.inspect_result.project-monai_research-contributions.networks.unetr.UNETR.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "upsample", "=", "'vae'", ",", "dim", "=", "768", ")", ":", "\n", "        ", "super", "(", "SSLHead", ",", "self", ")", ".", "__init__", "(", ")", "\n", "patch_size", "=", "ensure_tuple_rep", "(", "2", ",", "args", ".", "spatial_dims", ")", "\n", "window_size", "=", "ensure_tuple_rep", "(", "7", ",", "args", ".", "spatial_dims", ")", "\n", "self", ".", "swin_vit", "=", "SwinViT", "(", "\n", "in_chans", "=", "args", ".", "in_channels", ",", "\n", "embed_dim", "=", "args", ".", "feature_size", ",", "\n", "window_size", "=", "window_size", ",", "\n", "patch_size", "=", "patch_size", ",", "\n", "depths", "=", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "\n", "num_heads", "=", "[", "3", ",", "6", ",", "12", ",", "24", "]", ",", "\n", "mlp_ratio", "=", "4.0", ",", "\n", "qkv_bias", "=", "True", ",", "\n", "drop_rate", "=", "0.", ",", "\n", "attn_drop_rate", "=", "0.", ",", "\n", "drop_path_rate", "=", "args", ".", "dropout_path_rate", ",", "\n", "norm_layer", "=", "torch", ".", "nn", ".", "LayerNorm", ",", "\n", "use_checkpoint", "=", "args", ".", "use_checkpoint", ",", "\n", "spatial_dims", "=", "args", ".", "spatial_dims", ",", "\n", ")", "\n", "self", ".", "rotation_pre", "=", "nn", ".", "Identity", "(", ")", "\n", "self", ".", "rotation_head", "=", "nn", ".", "Linear", "(", "dim", ",", "4", ")", "\n", "self", ".", "contrastive_pre", "=", "nn", ".", "Identity", "(", ")", "\n", "self", ".", "contrastive_head", "=", "nn", ".", "Linear", "(", "dim", ",", "512", ")", "\n", "if", "upsample", "==", "'large_kernel_deconv'", ":", "\n", "            ", "self", ".", "conv", "=", "nn", ".", "ConvTranspose3d", "(", "dim", ",", "1", ",", "\n", "kernel_size", "=", "(", "32", ",", "32", ",", "32", ")", ",", "\n", "stride", "=", "(", "32", ",", "32", ",", "32", ")", ")", "\n", "", "elif", "upsample", "==", "'deconv'", ":", "\n", "            ", "self", ".", "conv", "=", "nn", ".", "Sequential", "(", "nn", ".", "ConvTranspose3d", "(", "dim", ",", "dim", "//", "2", ",", "\n", "kernel_size", "=", "(", "2", ",", "2", ",", "2", ")", ",", "\n", "stride", "=", "(", "2", ",", "2", ",", "2", ")", ")", ",", "\n", "nn", ".", "ConvTranspose3d", "(", "dim", "//", "2", ",", "dim", "//", "4", ",", "\n", "kernel_size", "=", "(", "2", ",", "2", ",", "2", ")", ",", "\n", "stride", "=", "(", "2", ",", "2", ",", "2", ")", ")", ",", "\n", "nn", ".", "ConvTranspose3d", "(", "dim", "//", "4", ",", "dim", "//", "8", ",", "\n", "kernel_size", "=", "(", "2", ",", "2", ",", "2", ")", ",", "\n", "stride", "=", "(", "2", ",", "2", ",", "2", ")", ")", ",", "\n", "nn", ".", "ConvTranspose3d", "(", "dim", "//", "8", ",", "dim", "//", "16", ",", "\n", "kernel_size", "=", "(", "2", ",", "2", ",", "2", ")", ",", "\n", "stride", "=", "(", "2", ",", "2", ",", "2", ")", ")", ",", "\n", "nn", ".", "ConvTranspose3d", "(", "dim", "//", "16", ",", "1", ",", "\n", "kernel_size", "=", "(", "2", ",", "2", ",", "2", ")", ",", "\n", "stride", "=", "(", "2", ",", "2", ",", "2", ")", ")", ")", "\n", "", "elif", "upsample", "==", "'vae'", ":", "\n", "            ", "self", ".", "conv", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv3d", "(", "dim", ",", "dim", "//", "2", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "InstanceNorm3d", "(", "dim", "//", "2", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", ",", "\n", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ",", "mode", "=", "'trilinear'", ",", "align_corners", "=", "False", ")", ",", "\n", "nn", ".", "Conv3d", "(", "dim", "//", "2", ",", "dim", "//", "4", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "InstanceNorm3d", "(", "dim", "//", "4", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", ",", "\n", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ",", "mode", "=", "'trilinear'", ",", "align_corners", "=", "False", ")", ",", "\n", "nn", ".", "Conv3d", "(", "dim", "//", "4", ",", "dim", "//", "8", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "InstanceNorm3d", "(", "dim", "//", "8", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", ",", "\n", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ",", "mode", "=", "'trilinear'", ",", "align_corners", "=", "False", ")", ",", "\n", "nn", ".", "Conv3d", "(", "dim", "//", "8", ",", "dim", "//", "16", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "InstanceNorm3d", "(", "dim", "//", "16", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", ",", "\n", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ",", "mode", "=", "'trilinear'", ",", "align_corners", "=", "False", ")", ",", "\n", "nn", ".", "Conv3d", "(", "dim", "//", "16", ",", "dim", "//", "16", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "InstanceNorm3d", "(", "dim", "//", "16", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", ",", "\n", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ",", "mode", "=", "'trilinear'", ",", "align_corners", "=", "False", ")", ",", "\n", "nn", ".", "Conv3d", "(", "dim", "//", "16", ",", "1", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.project-monai_research-contributions.models.ssl_head.SSLHead.forward": [[87, 100], ["x_out.flatten", "x4_reshape.transpose.transpose.transpose", "ssl_head.SSLHead.rotation_pre", "ssl_head.SSLHead.rotation_head", "ssl_head.SSLHead.contrastive_pre", "ssl_head.SSLHead.contrastive_head", "x_out.flatten", "ssl_head.SSLHead.view", "ssl_head.SSLHead.conv", "ssl_head.SSLHead.swin_vit", "x.contiguous"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x_out", "=", "self", ".", "swin_vit", "(", "x", ".", "contiguous", "(", ")", ")", "[", "4", "]", "\n", "_", ",", "c", ",", "h", ",", "w", ",", "d", "=", "x_out", ".", "shape", "\n", "x4_reshape", "=", "x_out", ".", "flatten", "(", "start_dim", "=", "2", ",", "end_dim", "=", "4", ")", "\n", "x4_reshape", "=", "x4_reshape", ".", "transpose", "(", "1", ",", "2", ")", "\n", "x_rot", "=", "self", ".", "rotation_pre", "(", "x4_reshape", "[", ":", ",", "0", "]", ")", "\n", "x_rot", "=", "self", ".", "rotation_head", "(", "x_rot", ")", "\n", "x_contrastive", "=", "self", ".", "contrastive_pre", "(", "x4_reshape", "[", ":", ",", "1", "]", ")", "\n", "x_contrastive", "=", "self", ".", "contrastive_head", "(", "x_contrastive", ")", "\n", "x_rec", "=", "x_out", ".", "flatten", "(", "start_dim", "=", "2", ",", "end_dim", "=", "4", ")", "\n", "x_rec", "=", "x_rec", ".", "view", "(", "-", "1", ",", "c", ",", "h", ",", "w", ",", "d", ")", "\n", "x_rec", "=", "self", ".", "conv", "(", "x_rec", ")", "\n", "return", "x_rot", ",", "x_contrastive", ",", "x_rec", "\n", "", "", ""]], "home.repos.pwc.inspect_result.project-monai_research-contributions.losses.loss.Contrast.__init__": [[17, 29], ["super().__init__", "torch.device", "loss.Contrast.register_buffer", "loss.Contrast.register_buffer", "torch.tensor().to", "torch.device", "torch.tensor", "torch.eye().to", "torch.eye"], "methods", ["home.repos.pwc.inspect_result.project-monai_research-contributions.networks.unetr.UNETR.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "\n", "batch_size", ",", "\n", "temperature", "=", "0.5", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "device", "=", "torch", ".", "device", "(", "f\"cuda:{args.local_rank}\"", ")", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "register_buffer", "(", "\"temp\"", ",", "\n", "torch", ".", "tensor", "(", "temperature", ")", ".", "to", "(", "torch", ".", "device", "(", "f\"cuda:{args.local_rank}\"", ")", ")", ")", "\n", "self", ".", "register_buffer", "(", "\"neg_mask\"", ",", "\n", "(", "~", "torch", ".", "eye", "(", "batch_size", "*", "2", ",", "\n", "batch_size", "*", "2", ",", "\n", "dtype", "=", "bool", ")", ".", "to", "(", "device", ")", ")", ".", "float", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.project-monai_research-contributions.losses.loss.Contrast.forward": [[30, 43], ["torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.cat", "torch.nn.functional.cosine_similarity", "torch.diag", "torch.diag", "torch.cat", "torch.exp", "torch.cat.unsqueeze", "torch.cat.unsqueeze", "torch.exp", "torch.sum", "torch.log", "torch.sum"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x_i", ",", "x_j", ")", ":", "\n", "        ", "z_i", "=", "F", ".", "normalize", "(", "x_i", ",", "dim", "=", "1", ")", "\n", "z_j", "=", "F", ".", "normalize", "(", "x_j", ",", "dim", "=", "1", ")", "\n", "z", "=", "torch", ".", "cat", "(", "[", "z_i", ",", "z_j", "]", ",", "dim", "=", "0", ")", "\n", "sim", "=", "F", ".", "cosine_similarity", "(", "z", ".", "unsqueeze", "(", "1", ")", ",", "\n", "z", ".", "unsqueeze", "(", "0", ")", ",", "\n", "dim", "=", "2", ")", "\n", "sim_ij", "=", "torch", ".", "diag", "(", "sim", ",", "self", ".", "batch_size", ")", "\n", "sim_ji", "=", "torch", ".", "diag", "(", "sim", ",", "-", "self", ".", "batch_size", ")", "\n", "pos", "=", "torch", ".", "cat", "(", "[", "sim_ij", ",", "sim_ji", "]", ",", "dim", "=", "0", ")", "\n", "nom", "=", "torch", ".", "exp", "(", "pos", "/", "self", ".", "temp", ")", "\n", "denom", "=", "self", ".", "neg_mask", "*", "torch", ".", "exp", "(", "sim", "/", "self", ".", "temp", ")", "\n", "return", "torch", ".", "sum", "(", "-", "torch", ".", "log", "(", "nom", "/", "torch", ".", "sum", "(", "denom", ",", "dim", "=", "1", ")", ")", ")", "/", "(", "2", "*", "self", ".", "batch_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.project-monai_research-contributions.losses.loss.Loss.__init__": [[46, 54], ["super().__init__", "torch.nn.CrossEntropyLoss().cuda", "torch.nn.L1Loss().cuda", "Contrast().cuda", "torch.nn.CrossEntropyLoss", "torch.nn.L1Loss", "loss.Contrast"], "methods", ["home.repos.pwc.inspect_result.project-monai_research-contributions.networks.unetr.UNETR.__init__"], ["    ", "def", "__init__", "(", "self", ",", "batch_size", ",", "args", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "rot_loss", "=", "torch", ".", "nn", ".", "CrossEntropyLoss", "(", ")", ".", "cuda", "(", ")", "\n", "self", ".", "recon_loss", "=", "torch", ".", "nn", ".", "L1Loss", "(", ")", ".", "cuda", "(", ")", "\n", "self", ".", "contrast_loss", "=", "Contrast", "(", "args", ",", "batch_size", ")", ".", "cuda", "(", ")", "\n", "self", ".", "alpha1", "=", "1.0", "\n", "self", ".", "alpha2", "=", "1.0", "\n", "self", ".", "alpha3", "=", "1.0", "\n", "\n"]], "home.repos.pwc.inspect_result.project-monai_research-contributions.losses.loss.Loss.__call__": [[55, 68], ["loss.Loss.rot_loss", "loss.Loss.contrast_loss", "loss.Loss.recon_loss"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "\n", "output_rot", ",", "\n", "target_rot", ",", "\n", "output_contrastive", ",", "\n", "target_contrastive", ",", "\n", "output_recons", ",", "\n", "target_recons", ")", ":", "\n", "        ", "rot_loss", "=", "self", ".", "alpha1", "*", "self", ".", "rot_loss", "(", "output_rot", ",", "target_rot", ")", "\n", "contrast_loss", "=", "self", ".", "alpha2", "*", "self", ".", "contrast_loss", "(", "output_contrastive", ",", "target_contrastive", ")", "\n", "recon_loss", "=", "self", ".", "alpha3", "*", "self", ".", "recon_loss", "(", "output_recons", ",", "target_recons", ")", "\n", "total_loss", "=", "rot_loss", "+", "contrast_loss", "+", "recon_loss", "\n", "\n", "return", "total_loss", ",", "(", "rot_loss", ",", "contrast_loss", ",", "recon_loss", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.project-monai_research-contributions.BRATS21.main.main": [[87, 100], ["parser.parse_args", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "print", "torch.spawn", "main.main_worker"], "function", ["home.repos.pwc.inspect_result.project-monai_research-contributions.BRATS21.main.main_worker"], ["    ", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "args", ".", "amp", "=", "not", "args", ".", "noamp", "\n", "args", ".", "logdir", "=", "'./runs/'", "+", "args", ".", "logdir", "\n", "if", "args", ".", "distributed", ":", "\n", "        ", "args", ".", "ngpus_per_node", "=", "torch", ".", "cuda", ".", "device_count", "(", ")", "\n", "print", "(", "'Found total gpus'", ",", "args", ".", "ngpus_per_node", ")", "\n", "args", ".", "world_size", "=", "args", ".", "ngpus_per_node", "*", "args", ".", "world_size", "\n", "mp", ".", "spawn", "(", "main_worker", ",", "\n", "nprocs", "=", "args", ".", "ngpus_per_node", ",", "\n", "args", "=", "(", "args", ",", ")", ")", "\n", "", "else", ":", "\n", "        ", "main_worker", "(", "gpu", "=", "0", ",", "args", "=", "args", ")", "\n", "\n", "", "", "def", "main_worker", "(", "gpu", ",", "args", ")", ":", "\n"]], "home.repos.pwc.inspect_result.project-monai_research-contributions.BRATS21.main.main_worker": [[101, 231], ["numpy.set_printoptions", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "utils.data_utils.get_loader", "print", "os.path.join", "monai.networks.nets.SwinUNETR", "monai.transforms.Activations", "monai.transforms.AsDiscrete", "monai.metrics.DiceMetric", "functools.partial", "sum", "print", "torch.nn.SyncBatchNorm.convert_sync_batchnorm.cuda", "trainer.run_training", "torch.multiprocessing.set_start_method", "torch.multiprocessing.set_start_method", "torch.multiprocessing.set_start_method", "torch.multiprocessing.set_start_method", "torch.multiprocessing.set_start_method", "torch.init_process_group", "print", "torch.nn.SyncBatchNorm.convert_sync_batchnorm.load_state_dict", "print", "monai.losses.DiceLoss", "monai.losses.DiceLoss", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "OrderedDict", "checkpoint[].items", "torch.nn.SyncBatchNorm.convert_sync_batchnorm.load_state_dict", "print", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.nn.SyncBatchNorm.convert_sync_batchnorm.cuda", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "optimizers.lr_scheduler.LinearWarmupCosineAnnealingLR", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "p.numel", "torch.nn.SyncBatchNorm.convert_sync_batchnorm", "torch.nn.SyncBatchNorm.convert_sync_batchnorm", "torch.nn.SyncBatchNorm.convert_sync_batchnorm", "torch.nn.SyncBatchNorm.convert_sync_batchnorm", "torch.nn.SyncBatchNorm.convert_sync_batchnorm", "torch.nn.SyncBatchNorm.convert_sync_batchnorm.parameters", "torch.optim.AdamW", "torch.optim.AdamW", "torch.optim.AdamW", "torch.optim.AdamW", "torch.optim.AdamW", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.nn.SyncBatchNorm.convert_sync_batchnorm.parameters", "torch.nn.SyncBatchNorm.convert_sync_batchnorm.parameters", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "ValueError", "torch.optim.lr_scheduler.CosineAnnealingLR.step", "k.replace", "torch.nn.SyncBatchNorm.convert_sync_batchnorm.parameters", "str"], "function", ["home.repos.pwc.inspect_result.project-monai_research-contributions.utils.data_utils.get_loader", "home.repos.pwc.inspect_result.project-monai_research-contributions.BRATS21.trainer.run_training"], ["\n", "    ", "if", "args", ".", "distributed", ":", "\n", "        ", "torch", ".", "multiprocessing", ".", "set_start_method", "(", "'fork'", ",", "force", "=", "True", ")", "\n", "", "np", ".", "set_printoptions", "(", "formatter", "=", "{", "'float'", ":", "'{: 0.3f}'", ".", "format", "}", ",", "suppress", "=", "True", ")", "\n", "args", ".", "gpu", "=", "gpu", "\n", "if", "args", ".", "distributed", ":", "\n", "        ", "args", ".", "rank", "=", "args", ".", "rank", "*", "args", ".", "ngpus_per_node", "+", "gpu", "\n", "dist", ".", "init_process_group", "(", "backend", "=", "args", ".", "dist_backend", ",", "\n", "init_method", "=", "args", ".", "dist_url", ",", "\n", "world_size", "=", "args", ".", "world_size", ",", "\n", "rank", "=", "args", ".", "rank", ")", "\n", "", "torch", ".", "cuda", ".", "set_device", "(", "args", ".", "gpu", ")", "\n", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "True", "\n", "args", ".", "test_mode", "=", "False", "\n", "loader", "=", "get_loader", "(", "args", ")", "\n", "print", "(", "args", ".", "rank", ",", "' gpu'", ",", "args", ".", "gpu", ")", "\n", "if", "args", ".", "rank", "==", "0", ":", "\n", "        ", "print", "(", "'Batch size is:'", ",", "args", ".", "batch_size", ",", "'epochs'", ",", "args", ".", "max_epochs", ")", "\n", "", "inf_size", "=", "[", "args", ".", "roi_x", ",", "args", ".", "roi_y", ",", "args", ".", "roi_z", "]", "\n", "\n", "pretrained_dir", "=", "args", ".", "pretrained_dir", "\n", "model", "=", "SwinUNETR", "(", "img_size", "=", "(", "args", ".", "roi_x", ",", "args", ".", "roi_y", ",", "args", ".", "roi_z", ")", ",", "\n", "in_channels", "=", "args", ".", "in_channels", ",", "\n", "out_channels", "=", "args", ".", "out_channels", ",", "\n", "feature_size", "=", "args", ".", "feature_size", ",", "\n", "drop_rate", "=", "0.0", ",", "\n", "attn_drop_rate", "=", "0.0", ",", "\n", "dropout_path_rate", "=", "args", ".", "dropout_path_rate", ",", "\n", "use_checkpoint", "=", "args", ".", "use_checkpoint", ",", "\n", ")", "\n", "\n", "if", "args", ".", "resume_ckpt", ":", "\n", "        ", "model_dict", "=", "torch", ".", "load", "(", "os", ".", "path", ".", "join", "(", "pretrained_dir", ",", "args", ".", "pretrained_model_name", ")", ")", "[", "\"state_dict\"", "]", "\n", "model", ".", "load_state_dict", "(", "model_dict", ")", "\n", "print", "(", "'Use pretrained weights'", ")", "\n", "\n", "", "if", "args", ".", "use_ssl_pretrained", ":", "\n", "        ", "try", ":", "\n", "            ", "weight", "=", "torch", ".", "load", "(", "'./pretrained_models/model_swinvit.pt'", ")", "\n", "model", ".", "load_from", "(", "weights", "=", "weight", ")", "\n", "print", "(", "'Using pretrained self-supervied Swin UNETR backbone weights !'", ")", "\n", "", "except", "ValueError", ":", "\n", "            ", "raise", "ValueError", "(", "'Self-supervised pre-trained weights not available for'", "+", "str", "(", "args", ".", "model_name", ")", ")", "\n", "\n", "\n", "", "", "if", "args", ".", "squared_dice", ":", "\n", "        ", "dice_loss", "=", "DiceCELoss", "(", "to_onehot_y", "=", "True", ",", "\n", "softmax", "=", "True", ",", "\n", "squared_pred", "=", "True", ",", "\n", "smooth_nr", "=", "args", ".", "smooth_nr", ",", "\n", "smooth_dr", "=", "args", ".", "smooth_dr", ")", "\n", "", "else", ":", "\n", "        ", "dice_loss", "=", "DiceCELoss", "(", "to_onehot_y", "=", "True", ",", "\n", "softmax", "=", "True", "\n", ")", "\n", "", "post_label", "=", "AsDiscrete", "(", "to_onehot", "=", "True", ",", "\n", "n_classes", "=", "args", ".", "out_channels", ")", "\n", "post_pred", "=", "AsDiscrete", "(", "argmax", "=", "True", ",", "\n", "to_onehot", "=", "True", ",", "\n", "n_classes", "=", "args", ".", "out_channels", ")", "\n", "dice_acc", "=", "DiceMetric", "(", "include_background", "=", "True", ",", "\n", "reduction", "=", "MetricReduction", ".", "MEAN", ",", "\n", "get_not_nans", "=", "True", ")", "\n", "model_inferer", "=", "partial", "(", "sliding_window_inference", ",", "\n", "roi_size", "=", "inf_size", ",", "\n", "sw_batch_size", "=", "args", ".", "sw_batch_size", ",", "\n", "predictor", "=", "model", ",", "\n", "overlap", "=", "args", ".", "infer_overlap", ")", "\n", "\n", "pytorch_total_params", "=", "sum", "(", "p", ".", "numel", "(", ")", "for", "p", "in", "model", ".", "parameters", "(", ")", "if", "p", ".", "requires_grad", ")", "\n", "print", "(", "'Total parameters count'", ",", "pytorch_total_params", ")", "\n", "\n", "best_acc", "=", "0", "\n", "start_epoch", "=", "0", "\n", "\n", "if", "args", ".", "checkpoint", "is", "not", "None", ":", "\n", "        ", "checkpoint", "=", "torch", ".", "load", "(", "args", ".", "checkpoint", ",", "map_location", "=", "'cpu'", ")", "\n", "from", "collections", "import", "OrderedDict", "\n", "new_state_dict", "=", "OrderedDict", "(", ")", "\n", "for", "k", ",", "v", "in", "checkpoint", "[", "'state_dict'", "]", ".", "items", "(", ")", ":", "\n", "            ", "new_state_dict", "[", "k", ".", "replace", "(", "'backbone.'", ",", "''", ")", "]", "=", "v", "\n", "", "model", ".", "load_state_dict", "(", "new_state_dict", ",", "strict", "=", "False", ")", "\n", "if", "'epoch'", "in", "checkpoint", ":", "\n", "            ", "start_epoch", "=", "checkpoint", "[", "'epoch'", "]", "\n", "", "if", "'best_acc'", "in", "checkpoint", ":", "\n", "            ", "best_acc", "=", "checkpoint", "[", "'best_acc'", "]", "\n", "", "print", "(", "\"=> loaded checkpoint '{}' (epoch {}) (bestacc {})\"", ".", "format", "(", "args", ".", "checkpoint", ",", "start_epoch", ",", "best_acc", ")", ")", "\n", "\n", "", "model", ".", "cuda", "(", "args", ".", "gpu", ")", "\n", "\n", "if", "args", ".", "distributed", ":", "\n", "        ", "torch", ".", "cuda", ".", "set_device", "(", "args", ".", "gpu", ")", "\n", "if", "args", ".", "norm_name", "==", "'batch'", ":", "\n", "            ", "model", "=", "torch", ".", "nn", ".", "SyncBatchNorm", ".", "convert_sync_batchnorm", "(", "model", ")", "\n", "", "model", ".", "cuda", "(", "args", ".", "gpu", ")", "\n", "model", "=", "torch", ".", "nn", ".", "parallel", ".", "DistributedDataParallel", "(", "model", ",", "\n", "device_ids", "=", "[", "args", ".", "gpu", "]", ",", "\n", "output_device", "=", "args", ".", "gpu", ",", "\n", ")", "\n", "", "if", "args", ".", "optim_name", "==", "'adam'", ":", "\n", "        ", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "model", ".", "parameters", "(", ")", ",", "\n", "lr", "=", "args", ".", "optim_lr", ",", "\n", "weight_decay", "=", "args", ".", "reg_weight", ")", "\n", "", "elif", "args", ".", "optim_name", "==", "'adamw'", ":", "\n", "        ", "optimizer", "=", "torch", ".", "optim", ".", "AdamW", "(", "model", ".", "parameters", "(", ")", ",", "\n", "lr", "=", "args", ".", "optim_lr", ",", "\n", "weight_decay", "=", "args", ".", "reg_weight", ")", "\n", "", "elif", "args", ".", "optim_name", "==", "'sgd'", ":", "\n", "        ", "optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "model", ".", "parameters", "(", ")", ",", "\n", "lr", "=", "args", ".", "optim_lr", ",", "\n", "momentum", "=", "args", ".", "momentum", ",", "\n", "nesterov", "=", "True", ",", "\n", "weight_decay", "=", "args", ".", "reg_weight", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'Unsupported Optimization Procedure: '", "+", "str", "(", "args", ".", "optim_name", ")", ")", "\n", "\n", "", "if", "args", ".", "lrschedule", "==", "'warmup_cosine'", ":", "\n", "        ", "scheduler", "=", "LinearWarmupCosineAnnealingLR", "(", "optimizer", ",", "\n", "warmup_epochs", "=", "args", ".", "warmup_epochs", ",", "\n", "max_epochs", "=", "args", ".", "max_epochs", ")", "\n", "", "elif", "args", ".", "lrschedule", "==", "'cosine_anneal'", ":", "\n", "        ", "scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "CosineAnnealingLR", "(", "optimizer", ",", "\n", "T_max", "=", "args", ".", "max_epochs", ")", "\n", "if", "args", ".", "checkpoint", "is", "not", "None", ":", "\n", "            ", "scheduler", ".", "step", "(", "epoch", "=", "start_epoch", ")", "\n", "", "", "else", ":", "\n", "        ", "scheduler", "=", "None", "\n", "", "accuracy", "=", "run_training", "(", "model", "=", "model", ",", "\n", "train_loader", "=", "loader", "[", "0", "]", ",", "\n", "val_loader", "=", "loader", "[", "1", "]", ",", "\n", "optimizer", "=", "optimizer", ",", "\n"]], "home.repos.pwc.inspect_result.project-monai_research-contributions.BRATS21.trainer.train_epoch": [[26, 68], ["model.train", "time.time", "utils.utils.AverageMeter", "enumerate", "model.parameters", "isinstance", "model.parameters", "time.time", "data.cuda", "target.cuda", "torch.cuda.amp.autocast", "model", "loss_func", "scaler.scale().backward", "scaler.step", "scaler.update", "loss_func.backward", "optimizer.step", "utils.utils.distributed_all_gather", "utils.utils.AverageMeter.update", "utils.utils.AverageMeter.update", "print", "numpy.mean", "loss_func.item", "scaler.scale", "numpy.mean", "len", "numpy.stack", "time.time"], "function", ["home.repos.pwc.inspect_result.project-monai_research-contributions.lamp-automated-model-parallelism.train.train", "home.repos.pwc.inspect_result.project-monai_research-contributions.utils.utils.AverageMeter.update", "home.repos.pwc.inspect_result.project-monai_research-contributions.utils.utils.distributed_all_gather", "home.repos.pwc.inspect_result.project-monai_research-contributions.utils.utils.AverageMeter.update", "home.repos.pwc.inspect_result.project-monai_research-contributions.utils.utils.AverageMeter.update"], ["loader", ",", "\n", "optimizer", ",", "\n", "scaler", ",", "\n", "epoch", ",", "\n", "loss_func", ",", "\n", "args", ")", ":", "\n", "    ", "model", ".", "train", "(", ")", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "run_loss", "=", "AverageMeter", "(", ")", "\n", "for", "idx", ",", "batch_data", "in", "enumerate", "(", "loader", ")", ":", "\n", "        ", "if", "isinstance", "(", "batch_data", ",", "list", ")", ":", "\n", "            ", "data", ",", "target", "=", "batch_data", "\n", "", "else", ":", "\n", "            ", "data", ",", "target", "=", "batch_data", "[", "'image'", "]", ",", "batch_data", "[", "'label'", "]", "\n", "", "data", ",", "target", "=", "data", ".", "cuda", "(", "args", ".", "rank", ")", ",", "target", ".", "cuda", "(", "args", ".", "rank", ")", "\n", "for", "param", "in", "model", ".", "parameters", "(", ")", ":", "param", ".", "grad", "=", "None", "\n", "with", "autocast", "(", "enabled", "=", "args", ".", "amp", ")", ":", "\n", "            ", "logits", "=", "model", "(", "data", ")", "\n", "loss", "=", "loss_func", "(", "logits", ",", "target", ")", "\n", "#", "\n", "", "if", "args", ".", "amp", ":", "\n", "            ", "scaler", ".", "scale", "(", "loss", ")", ".", "backward", "(", ")", "\n", "scaler", ".", "step", "(", "optimizer", ")", "\n", "scaler", ".", "update", "(", ")", "\n", "", "else", ":", "\n", "            ", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "", "if", "args", ".", "distributed", ":", "\n", "            ", "loss_list", "=", "distributed_all_gather", "(", "[", "loss", "]", ",", "\n", "out_numpy", "=", "True", ",", "\n", "is_valid", "=", "idx", "<", "loader", ".", "sampler", ".", "valid_length", ")", "\n", "run_loss", ".", "update", "(", "np", ".", "mean", "(", "np", ".", "mean", "(", "np", ".", "stack", "(", "loss_list", ",", "axis", "=", "0", ")", ",", "axis", "=", "0", ")", ",", "axis", "=", "0", ")", ",", "\n", "n", "=", "args", ".", "batch_size", "*", "args", ".", "world_size", ")", "\n", "", "else", ":", "\n", "            ", "run_loss", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "n", "=", "args", ".", "batch_size", ")", "\n", "", "if", "args", ".", "rank", "==", "0", ":", "\n", "            ", "print", "(", "'Epoch {}/{} {}/{}'", ".", "format", "(", "epoch", ",", "args", ".", "max_epochs", ",", "idx", ",", "len", "(", "loader", ")", ")", ",", "\n", "'loss: {:.4f}'", ".", "format", "(", "run_loss", ".", "avg", ")", ",", "\n", "'time {:.2f}s'", ".", "format", "(", "time", ".", "time", "(", ")", "-", "start_time", ")", ")", "\n", "", "start_time", "=", "time", ".", "time", "(", ")", "\n", "", "for", "param", "in", "model", ".", "parameters", "(", ")", ":", "param", ".", "grad", "=", "None", "\n", "return", "run_loss", ".", "avg", "\n", "\n"]], "home.repos.pwc.inspect_result.project-monai_research-contributions.BRATS21.trainer.val_epoch": [[70, 117], ["model.eval", "time.time", "utils.utils.AverageMeter", "torch.no_grad", "torch.no_grad", "torch.no_grad", "enumerate", "monai.data.decollate_batch", "monai.data.decollate_batch", "acc_func.reset", "acc_func", "acc_func.aggregate", "acc.cuda.cuda", "time.time", "data.cuda", "target.cuda", "torch.cuda.amp.autocast", "model_inferer", "post_pred", "utils.utils.distributed_all_gather", "zip", "utils.utils.AverageMeter.update", "print", "post_sigmoid", "utils.utils.AverageMeter.update", "acc.cuda.cpu().numpy", "not_nans.cpu().numpy", "len", "acc.cuda.cpu", "time.time", "not_nans.cpu"], "function", ["home.repos.pwc.inspect_result.project-monai_research-contributions.utils.utils.AverageMeter.reset", "home.repos.pwc.inspect_result.project-monai_research-contributions.utils.utils.distributed_all_gather", "home.repos.pwc.inspect_result.project-monai_research-contributions.utils.utils.AverageMeter.update", "home.repos.pwc.inspect_result.project-monai_research-contributions.utils.utils.AverageMeter.update"], ["loader", ",", "\n", "epoch", ",", "\n", "acc_func", ",", "\n", "args", ",", "\n", "model_inferer", "=", "None", ",", "\n", "post_label", "=", "None", ",", "\n", "post_pred", "=", "None", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "run_acc", "=", "AverageMeter", "(", ")", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "idx", ",", "batch_data", "in", "enumerate", "(", "loader", ")", ":", "\n", "            ", "if", "isinstance", "(", "batch_data", ",", "list", ")", ":", "\n", "                ", "data", ",", "target", "=", "batch_data", "\n", "", "else", ":", "\n", "                ", "data", ",", "target", "=", "batch_data", "[", "'image'", "]", ",", "batch_data", "[", "'label'", "]", "\n", "", "data", ",", "target", "=", "data", ".", "cuda", "(", "args", ".", "rank", ")", ",", "target", ".", "cuda", "(", "args", ".", "rank", ")", "\n", "with", "autocast", "(", "enabled", "=", "args", ".", "amp", ")", ":", "\n", "                ", "if", "model_inferer", "is", "not", "None", ":", "\n", "                    ", "logits", "=", "model_inferer", "(", "data", ")", "\n", "", "else", ":", "\n", "                    ", "logits", "=", "model", "(", "data", ")", "\n", "", "", "if", "not", "logits", ".", "is_cuda", ":", "\n", "                ", "target", "=", "target", ".", "cpu", "(", ")", "\n", "", "val_labels_list", "=", "decollate_batch", "(", "target", ")", "\n", "val_labels_convert", "=", "[", "post_label", "(", "val_label_tensor", ")", "for", "val_label_tensor", "in", "val_labels_list", "]", "\n", "val_outputs_list", "=", "decollate_batch", "(", "logits", ")", "\n", "val_output_convert", "=", "[", "post_pred", "(", "val_pred_tensor", ")", "for", "val_pred_tensor", "in", "val_outputs_list", "]", "\n", "acc_func", ".", "reset", "(", ")", "\n", "acc_func", "(", "y_pred", "=", "val_output_convert", ",", "y", "=", "val_labels_convert", ")", "\n", "acc", ",", "not_nans", "=", "acc_func", ".", "aggregate", "(", ")", "\n", "acc", "=", "acc", ".", "cuda", "(", "args", ".", "rank", ")", "\n", "\n", "if", "args", ".", "distributed", ":", "\n", "                ", "acc_list", ",", "not_nans_list", "=", "distributed_all_gather", "(", "[", "acc", ",", "not_nans", "]", ",", "\n", "out_numpy", "=", "True", ",", "\n", "is_valid", "=", "idx", "<", "loader", ".", "sampler", ".", "valid_length", ")", "\n", "for", "al", ",", "nl", "in", "zip", "(", "acc_list", ",", "not_nans_list", ")", ":", "\n", "                    ", "run_acc", ".", "update", "(", "al", ",", "n", "=", "nl", ")", "\n", "\n", "", "", "else", ":", "\n", "                ", "run_acc", ".", "update", "(", "acc", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "n", "=", "not_nans", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "\n", "", "if", "args", ".", "rank", "==", "0", ":", "\n", "                ", "avg_acc", "=", "np", ".", "mean", "(", "run_acc", ".", "avg", ")", "\n", "print", "(", "'Val {}/{} {}/{}'", ".", "format", "(", "epoch", ",", "args", ".", "max_epochs", ",", "idx", ",", "len", "(", "loader", ")", ")", ",", "\n", "'acc'", ",", "avg_acc", ",", "\n", "'time {:.2f}s'", ".", "format", "(", "time", ".", "time", "(", ")", "-", "start_time", ")", ")", "\n"]], "home.repos.pwc.inspect_result.project-monai_research-contributions.BRATS21.trainer.save_checkpoint": [[119, 139], ["os.path.join", "torch.save", "torch.save", "torch.save", "print", "model.state_dict", "model.module.state_dict", "optimizer.state_dict", "scheduler.state_dict"], "function", ["None"], ["", "", "return", "run_acc", ".", "avg", "\n", "\n", "", "def", "save_checkpoint", "(", "model", ",", "\n", "epoch", ",", "\n", "args", ",", "\n", "filename", "=", "'model.pt'", ",", "\n", "best_acc", "=", "0", ",", "\n", "optimizer", "=", "None", ",", "\n", "scheduler", "=", "None", ")", ":", "\n", "    ", "state_dict", "=", "model", ".", "state_dict", "(", ")", "if", "not", "args", ".", "distributed", "else", "model", ".", "module", ".", "state_dict", "(", ")", "\n", "save_dict", "=", "{", "\n", "'epoch'", ":", "epoch", ",", "\n", "'best_acc'", ":", "best_acc", ",", "\n", "'state_dict'", ":", "state_dict", "\n", "}", "\n", "if", "optimizer", "is", "not", "None", ":", "\n", "        ", "save_dict", "[", "'optimizer'", "]", "=", "optimizer", ".", "state_dict", "(", ")", "\n", "", "if", "scheduler", "is", "not", "None", ":", "\n", "        ", "save_dict", "[", "'scheduler'", "]", "=", "scheduler", ".", "state_dict", "(", ")", "\n", "", "filename", "=", "os", ".", "path", ".", "join", "(", "args", ".", "logdir", ",", "filename", ")", "\n", "torch", ".", "save", "(", "save_dict", ",", "filename", ")", "\n"]], "home.repos.pwc.inspect_result.project-monai_research-contributions.BRATS21.trainer.run_training": [[141, 238], ["range", "print", "tensorboardX.SummaryWriter", "torch.cuda.amp.GradScaler", "print", "time.time", "trainer.train_epoch", "print", "train_loader.sampler.set_epoch", "torch.distributed.barrier", "torch.distributed.barrier", "torch.distributed.barrier", "time.ctime", "print", "tensorboardX.SummaryWriter.add_scalar", "time.time", "trainer.val_epoch", "scheduler.step", "torch.distributed.barrier", "torch.distributed.barrier", "torch.distributed.barrier", "print", "numpy.mean", "trainer.save_checkpoint", "tensorboardX.SummaryWriter.add_scalar", "print", "print", "shutil.copyfile", "time.time", "numpy.mean", "range", "trainer.save_checkpoint", "os.path.join", "os.path.join", "time.time", "len", "tensorboardX.SummaryWriter.add_scalar"], "function", ["home.repos.pwc.inspect_result.project-monai_research-contributions.BRATS21.trainer.train_epoch", "home.repos.pwc.inspect_result.project-monai_research-contributions.utils.data_utils.Sampler.set_epoch", "home.repos.pwc.inspect_result.project-monai_research-contributions.BRATS21.trainer.val_epoch", "home.repos.pwc.inspect_result.project-monai_research-contributions.BRATS21.trainer.save_checkpoint", "home.repos.pwc.inspect_result.project-monai_research-contributions.BRATS21.trainer.save_checkpoint"], ["\n", "", "def", "run_training", "(", "model", ",", "\n", "train_loader", ",", "\n", "val_loader", ",", "\n", "optimizer", ",", "\n", "loss_func", ",", "\n", "acc_func", ",", "\n", "args", ",", "\n", "model_inferer", "=", "None", ",", "\n", "scheduler", "=", "None", ",", "\n", "start_epoch", "=", "0", ",", "\n", "post_label", "=", "None", ",", "\n", "post_pred", "=", "None", "\n", ")", ":", "\n", "    ", "writer", "=", "None", "\n", "if", "args", ".", "logdir", "is", "not", "None", "and", "args", ".", "rank", "==", "0", ":", "\n", "        ", "writer", "=", "SummaryWriter", "(", "log_dir", "=", "args", ".", "logdir", ")", "\n", "if", "args", ".", "rank", "==", "0", ":", "print", "(", "'Writing Tensorboard logs to '", ",", "args", ".", "logdir", ")", "\n", "", "scaler", "=", "None", "\n", "if", "args", ".", "amp", ":", "\n", "        ", "scaler", "=", "GradScaler", "(", ")", "\n", "", "val_acc_max", "=", "0.", "\n", "for", "epoch", "in", "range", "(", "start_epoch", ",", "args", ".", "max_epochs", ")", ":", "\n", "        ", "if", "args", ".", "distributed", ":", "\n", "            ", "train_loader", ".", "sampler", ".", "set_epoch", "(", "epoch", ")", "\n", "torch", ".", "distributed", ".", "barrier", "(", ")", "\n", "", "print", "(", "args", ".", "rank", ",", "time", ".", "ctime", "(", ")", ",", "'Epoch:'", ",", "epoch", ")", "\n", "epoch_time", "=", "time", ".", "time", "(", ")", "\n", "train_loss", "=", "train_epoch", "(", "model", ",", "\n", "train_loader", ",", "\n", "optimizer", ",", "\n", "scaler", "=", "scaler", ",", "\n", "epoch", "=", "epoch", ",", "\n", "loss_func", "=", "loss_func", ",", "\n", "args", "=", "args", ")", "\n", "if", "args", ".", "rank", "==", "0", ":", "\n", "            ", "print", "(", "'Final training  {}/{}'", ".", "format", "(", "epoch", ",", "args", ".", "max_epochs", "-", "1", ")", ",", "'loss: {:.4f}'", ".", "format", "(", "train_loss", ")", ",", "\n", "'time {:.2f}s'", ".", "format", "(", "time", ".", "time", "(", ")", "-", "epoch_time", ")", ")", "\n", "", "if", "args", ".", "rank", "==", "0", "and", "writer", "is", "not", "None", ":", "\n", "            ", "writer", ".", "add_scalar", "(", "'train_loss'", ",", "train_loss", ",", "epoch", ")", "\n", "", "b_new_best", "=", "False", "\n", "if", "(", "epoch", "+", "1", ")", "%", "args", ".", "val_every", "==", "0", ":", "\n", "            ", "if", "args", ".", "distributed", ":", "\n", "                ", "torch", ".", "distributed", ".", "barrier", "(", ")", "\n", "", "epoch_time", "=", "time", ".", "time", "(", ")", "\n", "val_avg_acc", "=", "val_epoch", "(", "model", ",", "\n", "val_loader", ",", "\n", "epoch", "=", "epoch", ",", "\n", "acc_func", "=", "acc_func", ",", "\n", "model_inferer", "=", "model_inferer", ",", "\n", "args", "=", "args", ",", "\n", "post_label", "=", "post_label", ",", "\n", "post_pred", "=", "post_pred", ")", "\n", "\n", "val_avg_acc", "=", "np", ".", "mean", "(", "val_avg_acc", ")", "\n", "\n", "if", "args", ".", "rank", "==", "0", ":", "\n", "                ", "print", "(", "'Final validation  {}/{}'", ".", "format", "(", "epoch", ",", "args", ".", "max_epochs", "-", "1", ")", ",", "\n", "'acc'", ",", "val_avg_acc", ",", "'time {:.2f}s'", ".", "format", "(", "time", ".", "time", "(", ")", "-", "epoch_time", ")", ")", "\n", "if", "writer", "is", "not", "None", ":", "\n", "                    ", "writer", ".", "add_scalar", "(", "'val_acc'", ",", "val_avg_acc", ",", "epoch", ")", "\n", "", "if", "val_avg_acc", ">", "val_acc_max", ":", "\n", "                    ", "print", "(", "'new best ({:.6f} --> {:.6f}). '", ".", "format", "(", "val_acc_max", ",", "val_avg_acc", ")", ")", "\n", "val_acc_max", "=", "val_avg_acc", "\n", "b_new_best", "=", "True", "\n", "if", "args", ".", "rank", "==", "0", "and", "args", ".", "logdir", "is", "not", "None", "and", "args", ".", "save_checkpoint", ":", "\n", "                        ", "save_checkpoint", "(", "model", ",", "epoch", ",", "args", ",", "\n", "best_acc", "=", "val_acc_max", ",", "\n", "optimizer", "=", "optimizer", ",", "\n", "scheduler", "=", "scheduler", ")", "\n", "", "", "", "if", "args", ".", "rank", "==", "0", "and", "args", ".", "logdir", "is", "not", "None", "and", "args", ".", "save_checkpoint", ":", "\n", "                ", "save_checkpoint", "(", "model", ",", "\n", "epoch", ",", "\n", "args", ",", "\n", "best_acc", "=", "val_acc_max", ",", "\n", "filename", "=", "'model_final.pt'", ")", "\n", "if", "b_new_best", ":", "\n", "                    ", "print", "(", "'Copying to model.pt new best model!!!!'", ")", "\n", "shutil", ".", "copyfile", "(", "os", ".", "path", ".", "join", "(", "args", ".", "logdir", ",", "'model_final.pt'", ")", ",", "os", ".", "path", ".", "join", "(", "args", ".", "logdir", ",", "'model.pt'", ")", ")", "\n", "\n", "", "", "", "if", "scheduler", "is", "not", "None", ":", "\n", "            ", "scheduler", ".", "step", "(", ")", "\n", "\n", "", "", "print", "(", "'Training Finished !, Best Accuracy: '", ",", "val_acc_max", ")", "\n", "\n", "return", "val_acc_max", "\n", "", ""]], "home.repos.pwc.inspect_result.project-monai_research-contributions.BRATS21.test.main": [[54, 104], ["parser.parse_args", "utils.data_utils.get_loader", "torch.device", "os.path.join", "monai.networks.nets.SwinUNETR", "monai.networks.nets.SwinUNETR.load_state_dict", "monai.networks.nets.SwinUNETR.eval", "monai.networks.nets.SwinUNETR.to", "functools.partial", "os.path.exists", "os.makedirs", "torch.load", "torch.no_grad", "enumerate", "print", "torch.cuda.is_available", "batch[].cuda", "[].numpy", "print", "torch.sigmoid", "prob[].detach().cpu().numpy", "numpy.zeros", "nibabel.save", "[].split", "functools.partial.", "nibabel.Nifti1Image", "os.path.join", "prob[].detach().cpu", "np.zeros.astype", "[].split", "prob[].detach"], "function", ["home.repos.pwc.inspect_result.project-monai_research-contributions.utils.data_utils.get_loader"], ["    ", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "args", ".", "test_mode", "=", "True", "\n", "output_directory", "=", "'./outputs/'", "+", "args", ".", "exp_name", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "output_directory", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "output_directory", ")", "\n", "", "val_loader", "=", "get_loader", "(", "args", ")", "\n", "pretrained_dir", "=", "args", ".", "pretrained_dir", "\n", "model_name", "=", "args", ".", "pretrained_model_name", "\n", "device", "=", "torch", ".", "device", "(", "\"cuda\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", ")", "\n", "pretrained_pth", "=", "os", ".", "path", ".", "join", "(", "pretrained_dir", ",", "model_name", ")", "\n", "model", "=", "SwinUNETR", "(", "img_size", "=", "96", ",", "\n", "in_channels", "=", "args", ".", "in_channels", ",", "\n", "out_channels", "=", "args", ".", "out_channels", ",", "\n", "feature_size", "=", "args", ".", "feature_size", ",", "\n", "drop_rate", "=", "0.0", ",", "\n", "attn_drop_rate", "=", "0.0", ",", "\n", "dropout_path_rate", "=", "0.0", ",", "\n", "use_checkpoint", "=", "args", ".", "use_checkpoint", ",", "\n", ")", "\n", "model_dict", "=", "torch", ".", "load", "(", "pretrained_pth", ")", "[", "\"state_dict\"", "]", "\n", "model", ".", "load_state_dict", "(", "model_dict", ")", "\n", "model", ".", "eval", "(", ")", "\n", "model", ".", "to", "(", "device", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "dice_list_case", "=", "[", "]", "\n", "for", "i", ",", "batch", "in", "enumerate", "(", "val_loader", ")", ":", "\n", "            ", "val_inputs", ",", "val_labels", "=", "(", "batch", "[", "\"image\"", "]", ".", "cuda", "(", ")", ",", "batch", "[", "\"label\"", "]", ".", "cuda", "(", ")", ")", "\n", "original_affine", "=", "batch", "[", "'label_meta_dict'", "]", "[", "'affine'", "]", "[", "0", "]", ".", "numpy", "(", ")", "\n", "_", ",", "_", ",", "h", ",", "w", ",", "d", "=", "val_labels", ".", "shape", "\n", "target_shape", "=", "(", "h", ",", "w", ",", "d", ")", "\n", "img_name", "=", "batch", "[", "'image_meta_dict'", "]", "[", "'filename_or_obj'", "]", "[", "0", "]", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "\n", "print", "(", "\"Inference on case {}\"", ".", "format", "(", "img_name", ")", ")", "\n", "val_outputs", "=", "sliding_window_inference", "(", "val_inputs", ",", "\n", "(", "args", ".", "roi_x", ",", "\n", "args", ".", "roi_y", ",", "\n", "args", ".", "roi_z", ")", ",", "\n", "4", ",", "\n", "model", ",", "\n", "overlap", "=", "args", ".", "infer_overlap", ",", "\n", "mode", "=", "\"gaussian\"", ")", "\n", "val_outputs", "=", "torch", ".", "softmax", "(", "val_outputs", ",", "1", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "val_outputs", "=", "np", ".", "argmax", "(", "val_outputs", ",", "axis", "=", "1", ")", ".", "astype", "(", "np", ".", "uint8", ")", "[", "0", "]", "\n", "val_labels", "=", "val_labels", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", "0", ",", "0", ",", ":", ",", ":", ",", ":", "]", "\n", "val_outputs", "=", "resample_3d", "(", "val_outputs", ",", "target_shape", ")", "\n", "dice_list_sub", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "1", ",", "14", ")", ":", "\n", "                ", "organ_Dice", "=", "dice", "(", "val_outputs", "==", "i", ",", "val_labels", "==", "i", ")", "\n", "dice_list_sub", ".", "append", "(", "organ_Dice", ")", "\n", "", "mean_dice", "=", "np", ".", "mean", "(", "dice_list_sub", ")", "\n", "print", "(", "\"Mean Organ Dice: {}\"", ".", "format", "(", "mean_dice", ")", ")", "\n"]], "home.repos.pwc.inspect_result.project-monai_research-contributions.SkullRec.facialDefects.bbox_cal": [[9, 28], ["numpy.round", "numpy.sum", "numpy.sum", "numpy.sum", "next", "next", "next", "next", "numpy.sum", "numpy.sum", "next", "next", "enumerate", "enumerate", "enumerate", "enumerate", "enumerate", "enumerate", "list", "list", "list", "list", "list", "list"], "function", ["None"], ["def", "bbox_cal", "(", "data", ")", ":", "\n", "    ", "a", "=", "np", ".", "round", "(", "data", ")", "\n", "x0", "=", "np", ".", "sum", "(", "a", ",", "axis", "=", "2", ")", "\n", "xx", "=", "np", ".", "sum", "(", "x0", ",", "axis", "=", "1", ")", "\n", "yy", "=", "np", ".", "sum", "(", "x0", ",", "axis", "=", "0", ")", "\n", "resx", "=", "next", "(", "x", "for", "x", ",", "val", "in", "enumerate", "(", "list", "(", "xx", ")", ")", "if", "val", ">", "0", ")", "\n", "\n", "resxx", "=", "next", "(", "x", "for", "x", ",", "val", "in", "enumerate", "(", "list", "(", "xx", ")", "[", ":", ":", "-", "1", "]", ")", "if", "val", ">", "0", ")", "\n", "\n", "resy", "=", "next", "(", "x", "for", "x", ",", "val", "in", "enumerate", "(", "list", "(", "yy", ")", ")", "if", "val", ">", "0", ")", "\n", "\n", "resyy", "=", "next", "(", "x", "for", "x", ",", "val", "in", "enumerate", "(", "list", "(", "yy", ")", "[", ":", ":", "-", "1", "]", ")", "if", "val", ">", "0", ")", "\n", "z0", "=", "np", ".", "sum", "(", "a", ",", "axis", "=", "1", ")", "\n", "zz", "=", "np", ".", "sum", "(", "z0", ",", "axis", "=", "0", ")", "\n", "resz", "=", "next", "(", "x", "for", "x", ",", "val", "in", "enumerate", "(", "list", "(", "zz", ")", ")", "if", "val", ">", "0", ")", "\n", "\n", "reszz", "=", "next", "(", "x", "for", "x", ",", "val", "in", "enumerate", "(", "list", "(", "zz", ")", "[", ":", ":", "-", "1", "]", ")", "if", "val", ">", "0", ")", "\n", "\n", "return", "resx", ",", "resxx", ",", "resy", ",", "resyy", ",", "resz", ",", "reszz", "\n", "\n"]], "home.repos.pwc.inspect_result.project-monai_research-contributions.SkullRec.cranialDefects.generate_hole_implants": [[9, 23], ["numpy.ones", "random.randint", "random.randint", "int", "numpy.zeros", "print", "int", "int", "int", "int", "int", "int", "int", "int"], "function", ["None"], ["def", "generate_hole_implants", "(", "data", ",", "cube_dim", ")", ":", "\n", "    ", "x_", "=", "data", ".", "shape", "[", "0", "]", "\n", "y_", "=", "data", ".", "shape", "[", "1", "]", "\n", "z_", "=", "data", ".", "shape", "[", "2", "]", "\n", "full_masking", "=", "np", ".", "ones", "(", "shape", "=", "(", "x_", ",", "y_", ",", "z_", ")", ")", "\n", "x", "=", "random", ".", "randint", "(", "int", "(", "cube_dim", "/", "2", ")", ",", "x_", "-", "int", "(", "cube_dim", "/", "2", ")", ")", "\n", "y", "=", "random", ".", "randint", "(", "int", "(", "cube_dim", "/", "2", ")", ",", "y_", "-", "int", "(", "cube_dim", "/", "2", ")", ")", "\n", "z", "=", "int", "(", "z_", "*", "(", "3", "/", "4", ")", ")", "\n", "cube_masking", "=", "np", ".", "zeros", "(", "shape", "=", "(", "cube_dim", ",", "cube_dim", ",", "z_", "-", "z", ")", ")", "\n", "print", "(", "cube_masking", ".", "shape", ")", "\n", "full_masking", "[", "\n", "x", "-", "int", "(", "cube_dim", "/", "2", ")", ":", "x", "+", "int", "(", "cube_dim", "/", "2", ")", ",", "y", "-", "int", "(", "cube_dim", "/", "2", ")", ":", "y", "+", "int", "(", "cube_dim", "/", "2", ")", ",", "z", ":", "z_", ",", "\n", "]", "=", "cube_masking", "\n", "return", "full_masking", "\n", "\n"]], "home.repos.pwc.inspect_result.project-monai_research-contributions.SkullRec.cranialDefects.generate_cude": [[25, 42], ["range", "len", "print", "nrrd.read", "cranialDefects.generate_hole_implants", "nrrd.write"], "function", ["home.repos.pwc.inspect_result.project-monai_research-contributions.SkullRec.cranialDefects.generate_hole_implants"], ["", "def", "generate_cude", "(", "size", ")", ":", "\n", "    ", "for", "i", "in", "range", "(", "len", "(", "pair_list", ")", ")", ":", "\n", "        ", "print", "(", "\"generating data:\"", ",", "pair_list", "[", "i", "]", ")", "\n", "temp", ",", "header", "=", "nrrd", ".", "read", "(", "pair_list", "[", "i", "]", ")", "\n", "\n", "full_masking", "=", "generate_hole_implants", "(", "temp", ",", "size", ")", "\n", "\n", "c_masking_1", "=", "full_masking", "==", "1", "\n", "c_masking_1", "=", "c_masking_1", "+", "1", "-", "1", "\n", "\n", "defected_image", "=", "c_masking_1", "*", "temp", "\n", "\n", "c_masking", "=", "full_masking", "==", "0", "\n", "c_masking", "=", "c_masking", "+", "1", "-", "1", "\n", "f1", "=", "defected_dir", "+", "pair_list", "[", "i", "]", "[", "-", "10", ":", "-", "5", "]", "+", "\".nrrd\"", "\n", "f2", "=", "implant_dir", "+", "pair_list", "[", "i", "]", "[", "-", "10", ":", "-", "5", "]", "+", "\".nrrd\"", "\n", "nrrd", ".", "write", "(", "f1", ",", "defected_image", ",", "header", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.project-monai_research-contributions.networks.unetr.UNETR.__init__": [[28, 182], ["torch.Module.__init__", "monai.networks.nets.ViT", "monai.networks.blocks.UnetrBasicBlock", "monai.networks.blocks.UnetrPrUpBlock", "monai.networks.blocks.UnetrPrUpBlock", "monai.networks.blocks.UnetrPrUpBlock", "monai.networks.blocks.UnetrUpBlock", "monai.networks.blocks.UnetrUpBlock", "monai.networks.blocks.UnetrUpBlock", "monai.networks.blocks.UnetrUpBlock", "monai.networks.blocks.dynunet_block.UnetOutBlock", "AssertionError", "AssertionError", "KeyError"], "methods", ["home.repos.pwc.inspect_result.project-monai_research-contributions.networks.unetr.UNETR.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "in_channels", ":", "int", ",", "\n", "out_channels", ":", "int", ",", "\n", "img_size", ":", "Tuple", "[", "int", ",", "int", ",", "int", "]", ",", "\n", "feature_size", ":", "int", "=", "16", ",", "\n", "hidden_size", ":", "int", "=", "768", ",", "\n", "mlp_dim", ":", "int", "=", "3072", ",", "\n", "num_heads", ":", "int", "=", "12", ",", "\n", "pos_embed", ":", "str", "=", "\"perceptron\"", ",", "\n", "norm_name", ":", "Union", "[", "Tuple", ",", "str", "]", "=", "\"instance\"", ",", "\n", "conv_block", ":", "bool", "=", "False", ",", "\n", "res_block", ":", "bool", "=", "True", ",", "\n", "dropout_rate", ":", "float", "=", "0.0", ",", "\n", ")", "->", "None", ":", "\n", "        ", "\"\"\"\n        Args:\n            in_channels: dimension of input channels.\n            out_channels: dimension of output channels.\n            img_size: dimension of input image.\n            feature_size: dimension of network feature size.\n            hidden_size: dimension of hidden layer.\n            mlp_dim: dimension of feedforward layer.\n            num_heads: number of attention heads.\n            pos_embed: position embedding layer type.\n            norm_name: feature normalization type and arguments.\n            conv_block: bool argument to determine if convolutional block is used.\n            res_block: bool argument to determine if residual block is used.\n            dropout_rate: faction of the input units to drop.\n\n        Examples::\n\n            # for single channel input 4-channel output with patch size of (96,96,96), feature size of 32 and batch norm\n            >>> net = UNETR(in_channels=1, out_channels=4, img_size=(96,96,96), feature_size=32, norm_name='batch')\n\n            # for 4-channel input 3-channel output with patch size of (128,128,128), conv position embedding and instance norm\n            >>> net = UNETR(in_channels=4, out_channels=3, img_size=(128,128,128), pos_embed='conv', norm_name='instance')\n\n        \"\"\"", "\n", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "if", "not", "(", "0", "<=", "dropout_rate", "<=", "1", ")", ":", "\n", "            ", "raise", "AssertionError", "(", "\"dropout_rate should be between 0 and 1.\"", ")", "\n", "\n", "", "if", "hidden_size", "%", "num_heads", "!=", "0", ":", "\n", "            ", "raise", "AssertionError", "(", "\"hidden size should be divisible by num_heads.\"", ")", "\n", "\n", "", "if", "pos_embed", "not", "in", "[", "\"conv\"", ",", "\"perceptron\"", "]", ":", "\n", "            ", "raise", "KeyError", "(", "f\"Position embedding layer of type {pos_embed} is not supported.\"", ")", "\n", "\n", "", "self", ".", "num_layers", "=", "12", "\n", "self", ".", "patch_size", "=", "(", "16", ",", "16", ",", "16", ")", "\n", "self", ".", "feat_size", "=", "(", "\n", "img_size", "[", "0", "]", "//", "self", ".", "patch_size", "[", "0", "]", ",", "\n", "img_size", "[", "1", "]", "//", "self", ".", "patch_size", "[", "1", "]", ",", "\n", "img_size", "[", "2", "]", "//", "self", ".", "patch_size", "[", "2", "]", ",", "\n", ")", "\n", "self", ".", "hidden_size", "=", "hidden_size", "\n", "self", ".", "classification", "=", "False", "\n", "self", ".", "vit", "=", "ViT", "(", "\n", "in_channels", "=", "in_channels", ",", "\n", "img_size", "=", "img_size", ",", "\n", "patch_size", "=", "self", ".", "patch_size", ",", "\n", "hidden_size", "=", "hidden_size", ",", "\n", "mlp_dim", "=", "mlp_dim", ",", "\n", "num_layers", "=", "self", ".", "num_layers", ",", "\n", "num_heads", "=", "num_heads", ",", "\n", "pos_embed", "=", "pos_embed", ",", "\n", "classification", "=", "self", ".", "classification", ",", "\n", "dropout_rate", "=", "dropout_rate", ",", "\n", ")", "\n", "self", ".", "encoder1", "=", "UnetrBasicBlock", "(", "\n", "spatial_dims", "=", "3", ",", "\n", "in_channels", "=", "in_channels", ",", "\n", "out_channels", "=", "feature_size", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "1", ",", "\n", "norm_name", "=", "norm_name", ",", "\n", "res_block", "=", "res_block", ",", "\n", ")", "\n", "self", ".", "encoder2", "=", "UnetrPrUpBlock", "(", "\n", "spatial_dims", "=", "3", ",", "\n", "in_channels", "=", "hidden_size", ",", "\n", "out_channels", "=", "feature_size", "*", "2", ",", "\n", "num_layer", "=", "2", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "1", ",", "\n", "upsample_kernel_size", "=", "2", ",", "\n", "norm_name", "=", "norm_name", ",", "\n", "conv_block", "=", "conv_block", ",", "\n", "res_block", "=", "res_block", ",", "\n", ")", "\n", "self", ".", "encoder3", "=", "UnetrPrUpBlock", "(", "\n", "spatial_dims", "=", "3", ",", "\n", "in_channels", "=", "hidden_size", ",", "\n", "out_channels", "=", "feature_size", "*", "4", ",", "\n", "num_layer", "=", "1", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "1", ",", "\n", "upsample_kernel_size", "=", "2", ",", "\n", "norm_name", "=", "norm_name", ",", "\n", "conv_block", "=", "conv_block", ",", "\n", "res_block", "=", "res_block", ",", "\n", ")", "\n", "self", ".", "encoder4", "=", "UnetrPrUpBlock", "(", "\n", "spatial_dims", "=", "3", ",", "\n", "in_channels", "=", "hidden_size", ",", "\n", "out_channels", "=", "feature_size", "*", "8", ",", "\n", "num_layer", "=", "0", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "1", ",", "\n", "upsample_kernel_size", "=", "2", ",", "\n", "norm_name", "=", "norm_name", ",", "\n", "conv_block", "=", "conv_block", ",", "\n", "res_block", "=", "res_block", ",", "\n", ")", "\n", "self", ".", "decoder5", "=", "UnetrUpBlock", "(", "\n", "spatial_dims", "=", "3", ",", "\n", "in_channels", "=", "hidden_size", ",", "\n", "out_channels", "=", "feature_size", "*", "8", ",", "\n", "kernel_size", "=", "3", ",", "\n", "upsample_kernel_size", "=", "2", ",", "\n", "norm_name", "=", "norm_name", ",", "\n", "res_block", "=", "res_block", ",", "\n", ")", "\n", "self", ".", "decoder4", "=", "UnetrUpBlock", "(", "\n", "spatial_dims", "=", "3", ",", "\n", "in_channels", "=", "feature_size", "*", "8", ",", "\n", "out_channels", "=", "feature_size", "*", "4", ",", "\n", "kernel_size", "=", "3", ",", "\n", "upsample_kernel_size", "=", "2", ",", "\n", "norm_name", "=", "norm_name", ",", "\n", "res_block", "=", "res_block", ",", "\n", ")", "\n", "self", ".", "decoder3", "=", "UnetrUpBlock", "(", "\n", "spatial_dims", "=", "3", ",", "\n", "in_channels", "=", "feature_size", "*", "4", ",", "\n", "out_channels", "=", "feature_size", "*", "2", ",", "\n", "kernel_size", "=", "3", ",", "\n", "upsample_kernel_size", "=", "2", ",", "\n", "norm_name", "=", "norm_name", ",", "\n", "res_block", "=", "res_block", ",", "\n", ")", "\n", "self", ".", "decoder2", "=", "UnetrUpBlock", "(", "\n", "spatial_dims", "=", "3", ",", "\n", "in_channels", "=", "feature_size", "*", "2", ",", "\n", "out_channels", "=", "feature_size", ",", "\n", "kernel_size", "=", "3", ",", "\n", "upsample_kernel_size", "=", "2", ",", "\n", "norm_name", "=", "norm_name", ",", "\n", "res_block", "=", "res_block", ",", "\n", ")", "\n", "self", ".", "out", "=", "UnetOutBlock", "(", "spatial_dims", "=", "3", ",", "in_channels", "=", "feature_size", ",", "out_channels", "=", "out_channels", ")", "# type: ignore", "\n", "\n"]], "home.repos.pwc.inspect_result.project-monai_research-contributions.networks.unetr.UNETR.proj_feat": [[183, 187], ["x.permute().contiguous.permute().contiguous.view", "x.permute().contiguous.permute().contiguous.permute().contiguous", "x.permute().contiguous.permute().contiguous.size", "x.permute().contiguous.permute().contiguous.permute"], "methods", ["None"], ["", "def", "proj_feat", "(", "self", ",", "x", ",", "hidden_size", ",", "feat_size", ")", ":", "\n", "        ", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "feat_size", "[", "0", "]", ",", "feat_size", "[", "1", "]", ",", "feat_size", "[", "2", "]", ",", "hidden_size", ")", "\n", "x", "=", "x", ".", "permute", "(", "0", ",", "4", ",", "1", ",", "2", ",", "3", ")", ".", "contiguous", "(", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.project-monai_research-contributions.networks.unetr.UNETR.load_from": [[188, 214], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "unetr.UNETR.vit.patch_embedding.position_embeddings.copy_", "unetr.UNETR.vit.patch_embedding.cls_token.copy_", "unetr.UNETR.vit.patch_embedding.patch_embeddings[].weight.copy_", "unetr.UNETR.vit.patch_embedding.patch_embeddings[].bias.copy_", "unetr.UNETR.vit.blocks.named_children", "unetr.UNETR.vit.norm.weight.copy_", "unetr.UNETR.vit.norm.bias.copy_", "print", "print", "block.loadFrom"], "methods", ["None"], ["", "def", "load_from", "(", "self", ",", "weights", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "res_weight", "=", "weights", "\n", "# copy weights from patch embedding", "\n", "for", "i", "in", "weights", "[", "\"state_dict\"", "]", ":", "\n", "                ", "print", "(", "i", ")", "\n", "", "self", ".", "vit", ".", "patch_embedding", ".", "position_embeddings", ".", "copy_", "(", "\n", "weights", "[", "\"state_dict\"", "]", "[", "\"module.transformer.patch_embedding.position_embeddings_3d\"", "]", "\n", ")", "\n", "self", ".", "vit", ".", "patch_embedding", ".", "cls_token", ".", "copy_", "(", "\n", "weights", "[", "\"state_dict\"", "]", "[", "\"module.transformer.patch_embedding.cls_token\"", "]", "\n", ")", "\n", "self", ".", "vit", ".", "patch_embedding", ".", "patch_embeddings", "[", "1", "]", ".", "weight", ".", "copy_", "(", "\n", "weights", "[", "\"state_dict\"", "]", "[", "\"module.transformer.patch_embedding.patch_embeddings.1.weight\"", "]", "\n", ")", "\n", "self", ".", "vit", ".", "patch_embedding", ".", "patch_embeddings", "[", "1", "]", ".", "bias", ".", "copy_", "(", "\n", "weights", "[", "\"state_dict\"", "]", "[", "\"module.transformer.patch_embedding.patch_embeddings.1.bias\"", "]", "\n", ")", "\n", "\n", "# copy weights from  encoding blocks (default: num of blocks: 12)", "\n", "for", "bname", ",", "block", "in", "self", ".", "vit", ".", "blocks", ".", "named_children", "(", ")", ":", "\n", "                ", "print", "(", "block", ")", "\n", "block", ".", "loadFrom", "(", "weights", ",", "n_block", "=", "bname", ")", "\n", "# last norm layer of transformer", "\n", "", "self", ".", "vit", ".", "norm", ".", "weight", ".", "copy_", "(", "weights", "[", "\"state_dict\"", "]", "[", "\"module.transformer.norm.weight\"", "]", ")", "\n", "self", ".", "vit", ".", "norm", ".", "bias", ".", "copy_", "(", "weights", "[", "\"state_dict\"", "]", "[", "\"module.transformer.norm.bias\"", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.project-monai_research-contributions.networks.unetr.UNETR.forward": [[215, 231], ["unetr.UNETR.vit", "unetr.UNETR.encoder1", "unetr.UNETR.encoder2", "unetr.UNETR.encoder3", "unetr.UNETR.encoder4", "unetr.UNETR.proj_feat", "unetr.UNETR.decoder5", "unetr.UNETR.decoder4", "unetr.UNETR.decoder3", "unetr.UNETR.decoder2", "unetr.UNETR.out", "unetr.UNETR.proj_feat", "unetr.UNETR.proj_feat", "unetr.UNETR.proj_feat"], "methods", ["home.repos.pwc.inspect_result.project-monai_research-contributions.networks.unetr.UNETR.proj_feat", "home.repos.pwc.inspect_result.project-monai_research-contributions.networks.unetr.UNETR.proj_feat", "home.repos.pwc.inspect_result.project-monai_research-contributions.networks.unetr.UNETR.proj_feat", "home.repos.pwc.inspect_result.project-monai_research-contributions.networks.unetr.UNETR.proj_feat"], ["", "", "def", "forward", "(", "self", ",", "x_in", ")", ":", "\n", "        ", "x", ",", "hidden_states_out", "=", "self", ".", "vit", "(", "x_in", ")", "\n", "enc1", "=", "self", ".", "encoder1", "(", "x_in", ")", "\n", "x2", "=", "hidden_states_out", "[", "3", "]", "\n", "enc2", "=", "self", ".", "encoder2", "(", "self", ".", "proj_feat", "(", "x2", ",", "self", ".", "hidden_size", ",", "self", ".", "feat_size", ")", ")", "\n", "x3", "=", "hidden_states_out", "[", "6", "]", "\n", "enc3", "=", "self", ".", "encoder3", "(", "self", ".", "proj_feat", "(", "x3", ",", "self", ".", "hidden_size", ",", "self", ".", "feat_size", ")", ")", "\n", "x4", "=", "hidden_states_out", "[", "9", "]", "\n", "enc4", "=", "self", ".", "encoder4", "(", "self", ".", "proj_feat", "(", "x4", ",", "self", ".", "hidden_size", ",", "self", ".", "feat_size", ")", ")", "\n", "dec4", "=", "self", ".", "proj_feat", "(", "x", ",", "self", ".", "hidden_size", ",", "self", ".", "feat_size", ")", "\n", "dec3", "=", "self", ".", "decoder5", "(", "dec4", ",", "enc4", ")", "\n", "dec2", "=", "self", ".", "decoder4", "(", "dec3", ",", "enc3", ")", "\n", "dec1", "=", "self", ".", "decoder3", "(", "dec2", ",", "enc2", ")", "\n", "out", "=", "self", ".", "decoder2", "(", "dec1", ",", "enc1", ")", "\n", "logits", "=", "self", ".", "out", "(", "out", ")", "\n", "return", "logits", "\n", "", "", ""]]}