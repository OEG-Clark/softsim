{"home.repos.pwc.inspect_result.iduta_pyconv.None.main.AverageMeter.__init__": [[372, 376], ["main.AverageMeter.reset"], "methods", ["home.repos.pwc.inspect_result.iduta_pyconv.None.main.AverageMeter.reset"], ["def", "__init__", "(", "self", ",", "name", ",", "fmt", "=", "':f'", ")", ":", "\n", "        ", "self", ".", "name", "=", "name", "\n", "self", ".", "fmt", "=", "fmt", "\n", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iduta_pyconv.None.main.AverageMeter.reset": [[377, 382], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "val", "=", "0", "\n", "self", ".", "avg", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.iduta_pyconv.None.main.AverageMeter.update": [[383, 388], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "        ", "self", ".", "val", "=", "val", "\n", "self", ".", "sum", "+=", "val", "*", "n", "\n", "self", ".", "count", "+=", "n", "\n", "self", ".", "avg", "=", "self", ".", "sum", "/", "self", ".", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.iduta_pyconv.None.main.AverageMeter.__str__": [[389, 392], ["fmtstr.format"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "fmtstr", "=", "'{name} {val'", "+", "self", ".", "fmt", "+", "'} ({avg'", "+", "self", ".", "fmt", "+", "'})'", "\n", "return", "fmtstr", ".", "format", "(", "**", "self", ".", "__dict__", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iduta_pyconv.None.main.ProgressMeter.__init__": [[395, 399], ["main.ProgressMeter._get_batch_fmtstr"], "methods", ["home.repos.pwc.inspect_result.iduta_pyconv.None.main.ProgressMeter._get_batch_fmtstr"], ["    ", "def", "__init__", "(", "self", ",", "num_batches", ",", "*", "meters", ",", "prefix", "=", "\"\"", ")", ":", "\n", "        ", "self", ".", "batch_fmtstr", "=", "self", ".", "_get_batch_fmtstr", "(", "num_batches", ")", "\n", "self", ".", "meters", "=", "meters", "\n", "self", ".", "prefix", "=", "prefix", "\n", "\n"]], "home.repos.pwc.inspect_result.iduta_pyconv.None.main.ProgressMeter.print": [[400, 404], ["main.ProgressMeter.print"], "methods", ["home.repos.pwc.inspect_result.iduta_pyconv.None.main.ProgressMeter.print"], ["", "def", "print", "(", "self", ",", "batch", ")", ":", "\n", "        ", "entries", "=", "[", "self", ".", "prefix", "+", "self", ".", "batch_fmtstr", ".", "format", "(", "batch", ")", "]", "\n", "entries", "+=", "[", "str", "(", "meter", ")", "for", "meter", "in", "self", ".", "meters", "]", "\n", "print", "(", "'\\t'", ".", "join", "(", "entries", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iduta_pyconv.None.main.ProgressMeter._get_batch_fmtstr": [[405, 409], ["len", "str", "str", "fmt.format"], "methods", ["None"], ["", "def", "_get_batch_fmtstr", "(", "self", ",", "num_batches", ")", ":", "\n", "        ", "num_digits", "=", "len", "(", "str", "(", "num_batches", "//", "1", ")", ")", "\n", "fmt", "=", "'{:'", "+", "str", "(", "num_digits", ")", "+", "'d}'", "\n", "return", "'['", "+", "fmt", "+", "'/'", "+", "fmt", ".", "format", "(", "num_batches", ")", "+", "']'", "\n", "\n"]], "home.repos.pwc.inspect_result.iduta_pyconv.None.main.main": [[35, 68], ["args_file.parser.parse_args", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "random.seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "warnings.warn", "warnings.warn", "int", "torch.spawn", "main.main_worker"], "function", ["home.repos.pwc.inspect_result.iduta_pyconv.None.main.main_worker"], ["def", "main", "(", ")", ":", "\n", "    ", "args", "=", "args_file", ".", "parser", ".", "parse_args", "(", ")", "\n", "\n", "if", "args", ".", "seed", "is", "not", "None", ":", "\n", "        ", "random", ".", "seed", "(", "args", ".", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "cudnn", ".", "deterministic", "=", "True", "\n", "warnings", ".", "warn", "(", "'You have chosen to seed training. '", "\n", "'This will turn on the CUDNN deterministic setting, '", "\n", "'which can slow down your training considerably! '", "\n", "'You may see unexpected behavior when restarting '", "\n", "'from checkpoints.'", ")", "\n", "\n", "", "if", "args", ".", "gpu", "is", "not", "None", ":", "\n", "        ", "warnings", ".", "warn", "(", "'You have chosen a specific GPU. This will completely '", "\n", "'disable data parallelism.'", ")", "\n", "\n", "", "if", "args", ".", "dist_url", "==", "\"env://\"", "and", "args", ".", "world_size", "==", "-", "1", ":", "\n", "        ", "args", ".", "world_size", "=", "int", "(", "os", ".", "environ", "[", "\"WORLD_SIZE\"", "]", ")", "\n", "\n", "", "args", ".", "distributed", "=", "args", ".", "world_size", ">", "1", "or", "args", ".", "multiprocessing_distributed", "\n", "\n", "ngpus_per_node", "=", "torch", ".", "cuda", ".", "device_count", "(", ")", "\n", "if", "args", ".", "multiprocessing_distributed", ":", "\n", "# Since we have ngpus_per_node processes per node, the total world_size", "\n", "# needs to be adjusted accordingly", "\n", "        ", "args", ".", "world_size", "=", "ngpus_per_node", "*", "args", ".", "world_size", "\n", "# Use torch.multiprocessing.spawn to launch distributed processes: the", "\n", "# main_worker process function", "\n", "mp", ".", "spawn", "(", "main_worker", ",", "nprocs", "=", "ngpus_per_node", ",", "args", "=", "(", "ngpus_per_node", ",", "args", ")", ")", "\n", "", "else", ":", "\n", "# Simply call main_worker function", "\n", "        ", "main_worker", "(", "args", ".", "gpu", ",", "ngpus_per_node", ",", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iduta_pyconv.None.main.main_worker": [[70, 274], ["models.build_model.build_model", "print", "print", "torch.CrossEntropyLoss().cuda", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "os.path.join", "os.path.join", "torchvision.Normalize", "torchvision.ImageFolder", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "utils.Logger", "utils.Logger", "range", "os.path.exists", "os.makedirs", "print", "torch.init_process_group", "torch.nn.DataParallel().cuda.parameters", "print", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "os.path.isfile", "torchvision.RandomResizedCrop", "torchvision.RandomHorizontalFlip", "torchvision.ToTensor", "torchvision.Compose", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torchvision.ImageFolder", "main.validate", "os.path.join", "os.path.join", "main.train", "utils.Logger.log", "main.validate", "utils.Logger.log", "max", "int", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.nn.DataParallel().cuda.cuda", "int", "int", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.DataParallel().cuda.cuda", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.nn.DataParallel().cuda.cuda", "torch.CrossEntropyLoss", "print", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.nn.DataParallel().cuda.load_state_dict", "torch.optim.SGD.load_state_dict", "print", "print", "torchvision.Compose", "torch.utils.data.distributed.DistributedSampler.set_epoch", "torch.optim.lr_scheduler.MultiStepLR.step", "main.adjust_learning_rate", "main.save_checkpoint", "open", "json.dump", "open", "json.dump", "args.arch.startswith", "args.arch.startswith", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel().cuda.cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "best_acc1.to.to", "print", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "print", "os.path.join", "vars", "os.path.join", "vars", "torchvision.Resize", "torchvision.CenterCrop", "torchvision.ToTensor", "train_acc1.item", "train_acc5.item", "val_acc1.item", "val_acc5.item", "torch.nn.DataParallel().cuda.state_dict", "torch.optim.SGD.state_dict", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel"], "function", ["home.repos.pwc.inspect_result.iduta_pyconv.models.build_model.build_model", "home.repos.pwc.inspect_result.iduta_pyconv.None.main.ProgressMeter.print", "home.repos.pwc.inspect_result.iduta_pyconv.None.main.ProgressMeter.print", "home.repos.pwc.inspect_result.iduta_pyconv.None.main.ProgressMeter.print", "home.repos.pwc.inspect_result.iduta_pyconv.None.main.ProgressMeter.print", "home.repos.pwc.inspect_result.iduta_pyconv.None.main.validate", "home.repos.pwc.inspect_result.iduta_pyconv.None.main.train", "home.repos.pwc.inspect_result.iduta_pyconv.None.utils.Logger.log", "home.repos.pwc.inspect_result.iduta_pyconv.None.main.validate", "home.repos.pwc.inspect_result.iduta_pyconv.None.utils.Logger.log", "home.repos.pwc.inspect_result.iduta_pyconv.None.main.ProgressMeter.print", "home.repos.pwc.inspect_result.iduta_pyconv.None.main.ProgressMeter.print", "home.repos.pwc.inspect_result.iduta_pyconv.None.main.ProgressMeter.print", "home.repos.pwc.inspect_result.iduta_pyconv.None.main.adjust_learning_rate", "home.repos.pwc.inspect_result.iduta_pyconv.None.main.save_checkpoint", "home.repos.pwc.inspect_result.iduta_pyconv.None.main.ProgressMeter.print", "home.repos.pwc.inspect_result.iduta_pyconv.None.main.ProgressMeter.print"], ["", "", "def", "main_worker", "(", "gpu", ",", "ngpus_per_node", ",", "args", ")", ":", "\n", "    ", "global", "best_acc1", "\n", "args", ".", "gpu", "=", "gpu", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "args", ".", "result_path", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "args", ".", "result_path", ")", "\n", "\n", "", "if", "not", "args", ".", "evaluate", ":", "\n", "        ", "if", "args", ".", "resume", ":", "\n", "            ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "args", ".", "result_path", ",", "'resume_args.json'", ")", ",", "'a'", ")", "as", "f", ":", "\n", "                ", "json", ".", "dump", "(", "vars", "(", "args", ")", ",", "f", ")", "\n", "", "", "else", ":", "\n", "            ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "args", ".", "result_path", ",", "'args.json'", ")", ",", "'w'", ")", "as", "f", ":", "\n", "                ", "json", ".", "dump", "(", "vars", "(", "args", ")", ",", "f", ")", "\n", "\n", "", "", "", "if", "args", ".", "gpu", "is", "not", "None", ":", "\n", "        ", "print", "(", "\"Use GPU: {} for training\"", ".", "format", "(", "args", ".", "gpu", ")", ")", "\n", "\n", "", "if", "args", ".", "distributed", ":", "\n", "        ", "if", "args", ".", "dist_url", "==", "\"env://\"", "and", "args", ".", "rank", "==", "-", "1", ":", "\n", "            ", "args", ".", "rank", "=", "int", "(", "os", ".", "environ", "[", "\"RANK\"", "]", ")", "\n", "", "if", "args", ".", "multiprocessing_distributed", ":", "\n", "# For multiprocessing distributed training, rank needs to be the", "\n", "# global rank among all the processes", "\n", "            ", "args", ".", "rank", "=", "args", ".", "rank", "*", "ngpus_per_node", "+", "gpu", "\n", "", "dist", ".", "init_process_group", "(", "backend", "=", "args", ".", "dist_backend", ",", "init_method", "=", "args", ".", "dist_url", ",", "\n", "world_size", "=", "args", ".", "world_size", ",", "rank", "=", "args", ".", "rank", ")", "\n", "# create model", "\n", "", "'''\n    if args.pretrained:\n        print(\"=> using pre-trained model '{}'\".format(args.arch))\n        model = models.__dict__[args.arch](pretrained=True)\n    else:\n        print(\"=> creating model '{}'\".format(args.arch))\n        model = models.__dict__[args.arch]()\n    '''", "\n", "model", "=", "build_model", "(", "args", ")", "\n", "print", "(", "model", ")", "\n", "print", "(", "args", ")", "\n", "\n", "if", "args", ".", "distributed", ":", "\n", "# For multiprocessing distributed, DistributedDataParallel constructor", "\n", "# should always set the single device scope, otherwise,", "\n", "# DistributedDataParallel will use all available devices.", "\n", "        ", "if", "args", ".", "gpu", "is", "not", "None", ":", "\n", "            ", "torch", ".", "cuda", ".", "set_device", "(", "args", ".", "gpu", ")", "\n", "model", ".", "cuda", "(", "args", ".", "gpu", ")", "\n", "# When using a single GPU per process and per", "\n", "# DistributedDataParallel, we need to divide the batch size", "\n", "# ourselves based on the total number of GPUs we have", "\n", "args", ".", "batch_size", "=", "int", "(", "args", ".", "batch_size", "/", "ngpus_per_node", ")", "\n", "args", ".", "workers", "=", "int", "(", "args", ".", "workers", "/", "ngpus_per_node", ")", "\n", "model", "=", "torch", ".", "nn", ".", "parallel", ".", "DistributedDataParallel", "(", "model", ",", "device_ids", "=", "[", "args", ".", "gpu", "]", ")", "\n", "", "else", ":", "\n", "            ", "model", ".", "cuda", "(", ")", "\n", "# DistributedDataParallel will divide and allocate batch_size to all", "\n", "# available GPUs if device_ids are not set", "\n", "model", "=", "torch", ".", "nn", ".", "parallel", ".", "DistributedDataParallel", "(", "model", ")", "\n", "", "", "elif", "args", ".", "gpu", "is", "not", "None", ":", "\n", "        ", "torch", ".", "cuda", ".", "set_device", "(", "args", ".", "gpu", ")", "\n", "model", "=", "model", ".", "cuda", "(", "args", ".", "gpu", ")", "\n", "", "else", ":", "\n", "# DataParallel will divide and allocate batch_size to all available GPUs", "\n", "        ", "if", "args", ".", "arch", ".", "startswith", "(", "'alexnet'", ")", "or", "args", ".", "arch", ".", "startswith", "(", "'vgg'", ")", ":", "\n", "            ", "model", ".", "features", "=", "torch", ".", "nn", ".", "DataParallel", "(", "model", ".", "features", ")", "\n", "model", ".", "cuda", "(", ")", "\n", "", "else", ":", "\n", "            ", "model", "=", "torch", ".", "nn", ".", "DataParallel", "(", "model", ")", ".", "cuda", "(", ")", "\n", "\n", "# define loss function (criterion) and optimizer", "\n", "", "", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", ")", ".", "cuda", "(", "args", ".", "gpu", ")", "\n", "\n", "optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "model", ".", "parameters", "(", ")", ",", "args", ".", "lr", ",", "\n", "momentum", "=", "args", ".", "momentum", ",", "\n", "weight_decay", "=", "args", ".", "weight_decay", ",", "\n", "nesterov", "=", "args", ".", "nesterov", ")", "\n", "\n", "if", "args", ".", "lr_scheduler", "==", "'MultiStepLR'", ":", "\n", "        ", "print", "(", "\"using MultiStepLR with steps: \"", ",", "args", ".", "lr_steps", ")", "\n", "scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "MultiStepLR", "(", "optimizer", ",", "args", ".", "lr_steps", ",", "gamma", "=", "args", ".", "lr_reduce_factor", ")", "\n", "\n", "# optionally resume from a checkpoint", "\n", "", "if", "args", ".", "resume", ":", "\n", "        ", "if", "os", ".", "path", ".", "isfile", "(", "args", ".", "resume", ")", ":", "\n", "            ", "print", "(", "\"=> loading checkpoint '{}'\"", ".", "format", "(", "args", ".", "resume", ")", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "args", ".", "resume", ")", "\n", "args", ".", "start_epoch", "=", "checkpoint", "[", "'epoch'", "]", "\n", "best_acc1", "=", "checkpoint", "[", "'best_acc1'", "]", "\n", "if", "args", ".", "gpu", "is", "not", "None", ":", "\n", "# best_acc1 may be from a checkpoint from a different GPU", "\n", "                ", "best_acc1", "=", "best_acc1", ".", "to", "(", "args", ".", "gpu", ")", "\n", "", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'state_dict'", "]", ")", "\n", "optimizer", ".", "load_state_dict", "(", "checkpoint", "[", "'optimizer'", "]", ")", "\n", "print", "(", "\"=> loaded checkpoint '{}' (epoch {})\"", "\n", ".", "format", "(", "args", ".", "resume", ",", "checkpoint", "[", "'epoch'", "]", ")", ")", "\n", "if", "args", ".", "lr_scheduler", "==", "'MultiStepLR'", ":", "\n", "                ", "print", "(", "\"usingMultiStepLR with steps: \"", ",", "args", ".", "lr_steps", ")", "\n", "scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "MultiStepLR", "(", "optimizer", ",", "args", ".", "lr_steps", ",", "\n", "gamma", "=", "args", ".", "lr_reduce_factor", ",", "\n", "last_epoch", "=", "(", "checkpoint", "[", "'epoch'", "]", "-", "1", ")", ")", "\n", "print", "(", "\"last_epoch: \"", ",", "scheduler", ".", "last_epoch", ")", "\n", "\n", "", "if", "args", ".", "start_epoch", "==", "0", ":", "\n", "                ", "args", ".", "start_epoch", "=", "checkpoint", "[", "'epoch'", "]", "\n", "", "", "else", ":", "\n", "            ", "print", "(", "\"=> no checkpoint found at '{}'\"", ".", "format", "(", "args", ".", "resume", ")", ")", "\n", "\n", "", "", "cudnn", ".", "benchmark", "=", "True", "\n", "\n", "# Data loading code", "\n", "traindir", "=", "os", ".", "path", ".", "join", "(", "args", ".", "data", ",", "'train'", ")", "\n", "valdir", "=", "os", ".", "path", ".", "join", "(", "args", ".", "data", ",", "'val'", ")", "\n", "normalize", "=", "transforms", ".", "Normalize", "(", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "\n", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", "\n", "\n", "train_trans", "=", "[", "\n", "transforms", ".", "RandomResizedCrop", "(", "args", ".", "train_crop_size", ")", ",", "# transforms.RandomResizedCrop(224)", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", ",", "\n", "]", "\n", "\n", "train_dataset", "=", "datasets", ".", "ImageFolder", "(", "\n", "traindir", ",", "\n", "transforms", ".", "Compose", "(", "train_trans", ")", ")", "\n", "\n", "if", "args", ".", "distributed", ":", "\n", "        ", "train_sampler", "=", "torch", ".", "utils", ".", "data", ".", "distributed", ".", "DistributedSampler", "(", "train_dataset", ")", "\n", "", "else", ":", "\n", "        ", "train_sampler", "=", "None", "\n", "\n", "", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "train_dataset", ",", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "(", "train_sampler", "is", "None", ")", ",", "\n", "num_workers", "=", "args", ".", "workers", ",", "pin_memory", "=", "True", ",", "sampler", "=", "train_sampler", ")", "\n", "\n", "val_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "datasets", ".", "ImageFolder", "(", "valdir", ",", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "Resize", "(", "args", ".", "val_resize", ")", ",", "#transforms.Resize(256)", "\n", "transforms", ".", "CenterCrop", "(", "args", ".", "val_crop_size", ")", ",", "#transforms.CenterCrop(224)", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", ",", "\n", "]", ")", ")", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "args", ".", "workers", ",", "pin_memory", "=", "True", ")", "\n", "\n", "if", "args", ".", "evaluate", ":", "\n", "        ", "validate", "(", "val_loader", ",", "model", ",", "criterion", ",", "args", ")", "\n", "return", "\n", "\n", "", "if", "args", ".", "resume", ":", "\n", "        ", "mode", "=", "'a'", "\n", "", "else", ":", "\n", "        ", "mode", "=", "'w'", "\n", "\n", "", "train_logger", "=", "Logger", "(", "os", ".", "path", ".", "join", "(", "args", ".", "result_path", ",", "'train.log'", ")", ",", "\n", "[", "'epoch'", ",", "'loss'", ",", "'acc1'", ",", "'acc5'", ",", "'lr'", "]", ",", "mode", "=", "mode", ")", "\n", "\n", "val_logger", "=", "Logger", "(", "os", ".", "path", ".", "join", "(", "args", ".", "result_path", ",", "'val.log'", ")", ",", "[", "'epoch'", ",", "'loss'", ",", "'acc1'", ",", "'acc5'", "]", ",", "mode", "=", "mode", ")", "\n", "\n", "for", "epoch", "in", "range", "(", "args", ".", "start_epoch", ",", "args", ".", "epochs", ")", ":", "\n", "        ", "if", "args", ".", "distributed", ":", "\n", "            ", "train_sampler", ".", "set_epoch", "(", "epoch", ")", "\n", "\n", "", "if", "args", ".", "lr_scheduler", "==", "'MultiStepLR'", ":", "\n", "            ", "scheduler", ".", "step", "(", ")", "\n", "", "else", ":", "\n", "            ", "adjust_learning_rate", "(", "optimizer", ",", "epoch", ",", "args", ")", "\n", "\n", "# train for one epoch", "\n", "", "train_acc1", ",", "train_acc5", ",", "train_loss", "=", "train", "(", "train_loader", ",", "model", ",", "criterion", ",", "optimizer", ",", "epoch", ",", "args", ")", "\n", "\n", "train_logger", ".", "log", "(", "{", "\n", "'epoch'", ":", "epoch", "+", "1", ",", "\n", "'loss'", ":", "'{:.4f}'", ".", "format", "(", "train_loss", ")", ",", "\n", "'acc1'", ":", "'{:.2f}'", ".", "format", "(", "train_acc1", ".", "item", "(", ")", ")", ",", "\n", "'acc5'", ":", "'{:.2f}'", ".", "format", "(", "train_acc5", ".", "item", "(", ")", ")", ",", "\n", "'lr'", ":", "'{:.6f}'", ".", "format", "(", "optimizer", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", ")", "\n", "}", ")", "\n", "\n", "# evaluate on validation set", "\n", "val_acc1", ",", "val_acc5", ",", "val_loss", "=", "validate", "(", "val_loader", ",", "model", ",", "criterion", ",", "args", ")", "\n", "\n", "val_logger", ".", "log", "(", "{", "\n", "'epoch'", ":", "epoch", "+", "1", ",", "\n", "'loss'", ":", "'{:.4f}'", ".", "format", "(", "val_loss", ")", ",", "\n", "'acc1'", ":", "'{:.2f}'", ".", "format", "(", "val_acc1", ".", "item", "(", ")", ")", ",", "\n", "'acc5'", ":", "'{:.2f}'", ".", "format", "(", "val_acc5", ".", "item", "(", ")", ")", "\n", "}", ")", "\n", "\n", "# remember best acc@1 and save checkpoint", "\n", "is_best", "=", "val_acc1", ">", "best_acc1", "\n", "best_acc1", "=", "max", "(", "val_acc1", ",", "best_acc1", ")", "\n", "\n", "if", "not", "args", ".", "multiprocessing_distributed", "or", "(", "args", ".", "multiprocessing_distributed", "\n", "and", "args", ".", "rank", "%", "ngpus_per_node", "==", "0", ")", ":", "\n", "            ", "save_checkpoint", "(", "{", "\n", "'epoch'", ":", "epoch", "+", "1", ",", "\n", "'arch'", ":", "args", ".", "arch", ",", "\n", "'state_dict'", ":", "model", ".", "state_dict", "(", ")", ",", "\n", "'best_acc1'", ":", "best_acc1", ",", "\n", "'val_acc1'", ":", "val_acc1", ",", "\n", "'optimizer'", ":", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "}", ",", "is_best", ",", "args", ".", "result_path", "+", "'/'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iduta_pyconv.None.main.train": [[276, 320], ["main.AverageMeter", "main.AverageMeter", "main.AverageMeter", "main.AverageMeter", "main.AverageMeter", "main.ProgressMeter", "model.train", "time.time", "enumerate", "len", "main.AverageMeter.update", "target.cuda.cuda", "model", "criterion", "main.accuracy", "main.AverageMeter.update", "main.AverageMeter.update", "main.AverageMeter.update", "optimizer.zero_grad", "criterion.backward", "optimizer.step", "main.AverageMeter.update", "time.time", "input.cuda.cuda", "criterion.item", "input.cuda.size", "input.cuda.size", "input.cuda.size", "main.ProgressMeter.print", "time.time", "time.time"], "function", ["home.repos.pwc.inspect_result.iduta_pyconv.None.main.train", "home.repos.pwc.inspect_result.iduta_pyconv.None.main.AverageMeter.update", "home.repos.pwc.inspect_result.iduta_pyconv.None.main.accuracy", "home.repos.pwc.inspect_result.iduta_pyconv.None.main.AverageMeter.update", "home.repos.pwc.inspect_result.iduta_pyconv.None.main.AverageMeter.update", "home.repos.pwc.inspect_result.iduta_pyconv.None.main.AverageMeter.update", "home.repos.pwc.inspect_result.iduta_pyconv.None.main.AverageMeter.update", "home.repos.pwc.inspect_result.iduta_pyconv.None.main.ProgressMeter.print"], ["", "", "", "def", "train", "(", "train_loader", ",", "model", ",", "criterion", ",", "optimizer", ",", "epoch", ",", "args", ")", ":", "\n", "    ", "batch_time", "=", "AverageMeter", "(", "'Time'", ",", "':6.3f'", ")", "\n", "data_time", "=", "AverageMeter", "(", "'Data'", ",", "':6.3f'", ")", "\n", "losses", "=", "AverageMeter", "(", "'Loss'", ",", "':.4e'", ")", "\n", "top1", "=", "AverageMeter", "(", "'Acc@1'", ",", "':6.2f'", ")", "\n", "top5", "=", "AverageMeter", "(", "'Acc@5'", ",", "':6.2f'", ")", "\n", "progress", "=", "ProgressMeter", "(", "len", "(", "train_loader", ")", ",", "batch_time", ",", "data_time", ",", "losses", ",", "top1", ",", "\n", "top5", ",", "prefix", "=", "\"Epoch: [{}]\"", ".", "format", "(", "epoch", "+", "1", ")", ")", "\n", "\n", "# switch to train mode", "\n", "model", ".", "train", "(", ")", "\n", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "for", "i", ",", "(", "input", ",", "target", ")", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "# measure data loading time", "\n", "        ", "data_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "\n", "if", "args", ".", "gpu", "is", "not", "None", ":", "\n", "            ", "input", "=", "input", ".", "cuda", "(", "args", ".", "gpu", ",", "non_blocking", "=", "True", ")", "\n", "", "target", "=", "target", ".", "cuda", "(", "args", ".", "gpu", ",", "non_blocking", "=", "True", ")", "\n", "\n", "# compute output", "\n", "output", "=", "model", "(", "input", ")", "\n", "loss", "=", "criterion", "(", "output", ",", "target", ")", "\n", "\n", "# measure accuracy and record loss", "\n", "acc1", ",", "acc5", "=", "accuracy", "(", "output", ",", "target", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "losses", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "input", ".", "size", "(", "0", ")", ")", "\n", "top1", ".", "update", "(", "acc1", "[", "0", "]", ",", "input", ".", "size", "(", "0", ")", ")", "\n", "top5", ".", "update", "(", "acc5", "[", "0", "]", ",", "input", ".", "size", "(", "0", ")", ")", "\n", "\n", "# compute gradient and do SGD step", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "# measure elapsed time", "\n", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "if", "i", "%", "args", ".", "print_freq", "==", "0", ":", "\n", "            ", "progress", ".", "print", "(", "i", ")", "\n", "\n", "", "", "return", "top1", ".", "avg", ",", "top5", ".", "avg", ",", "losses", ".", "avg", "\n", "\n"]], "home.repos.pwc.inspect_result.iduta_pyconv.None.main.validate": [[322, 361], ["main.AverageMeter", "main.AverageMeter", "main.AverageMeter", "main.AverageMeter", "main.ProgressMeter", "model.eval", "len", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "time.time", "enumerate", "print", "target.cuda.cuda", "model", "criterion", "main.accuracy", "main.AverageMeter.update", "main.AverageMeter.update", "main.AverageMeter.update", "main.AverageMeter.update", "time.time", "input.cuda.cuda", "criterion.item", "input.cuda.size", "input.cuda.size", "input.cuda.size", "main.ProgressMeter.print", "time.time"], "function", ["home.repos.pwc.inspect_result.iduta_pyconv.None.main.ProgressMeter.print", "home.repos.pwc.inspect_result.iduta_pyconv.None.main.accuracy", "home.repos.pwc.inspect_result.iduta_pyconv.None.main.AverageMeter.update", "home.repos.pwc.inspect_result.iduta_pyconv.None.main.AverageMeter.update", "home.repos.pwc.inspect_result.iduta_pyconv.None.main.AverageMeter.update", "home.repos.pwc.inspect_result.iduta_pyconv.None.main.AverageMeter.update", "home.repos.pwc.inspect_result.iduta_pyconv.None.main.ProgressMeter.print"], ["", "def", "validate", "(", "val_loader", ",", "model", ",", "criterion", ",", "args", ")", ":", "\n", "    ", "batch_time", "=", "AverageMeter", "(", "'Time'", ",", "':6.3f'", ")", "\n", "losses", "=", "AverageMeter", "(", "'Loss'", ",", "':.4e'", ")", "\n", "top1", "=", "AverageMeter", "(", "'Acc@1'", ",", "':6.2f'", ")", "\n", "top5", "=", "AverageMeter", "(", "'Acc@5'", ",", "':6.2f'", ")", "\n", "progress", "=", "ProgressMeter", "(", "len", "(", "val_loader", ")", ",", "batch_time", ",", "losses", ",", "top1", ",", "top5", ",", "\n", "prefix", "=", "'Test: '", ")", "\n", "\n", "# switch to evaluate mode", "\n", "model", ".", "eval", "(", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "end", "=", "time", ".", "time", "(", ")", "\n", "for", "i", ",", "(", "input", ",", "target", ")", "in", "enumerate", "(", "val_loader", ")", ":", "\n", "            ", "if", "args", ".", "gpu", "is", "not", "None", ":", "\n", "                ", "input", "=", "input", ".", "cuda", "(", "args", ".", "gpu", ",", "non_blocking", "=", "True", ")", "\n", "", "target", "=", "target", ".", "cuda", "(", "args", ".", "gpu", ",", "non_blocking", "=", "True", ")", "\n", "\n", "# compute output", "\n", "output", "=", "model", "(", "input", ")", "\n", "loss", "=", "criterion", "(", "output", ",", "target", ")", "\n", "\n", "# measure accuracy and record loss", "\n", "acc1", ",", "acc5", "=", "accuracy", "(", "output", ",", "target", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "losses", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "input", ".", "size", "(", "0", ")", ")", "\n", "top1", ".", "update", "(", "acc1", "[", "0", "]", ",", "input", ".", "size", "(", "0", ")", ")", "\n", "top5", ".", "update", "(", "acc5", "[", "0", "]", ",", "input", ".", "size", "(", "0", ")", ")", "\n", "\n", "# measure elapsed time", "\n", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "if", "i", "%", "args", ".", "print_freq", "==", "0", ":", "\n", "                ", "progress", ".", "print", "(", "i", ")", "\n", "\n", "", "", "print", "(", "' * Acc@1 {top1.avg:.3f} Acc@5 {top5.avg:.3f}'", "\n", ".", "format", "(", "top1", "=", "top1", ",", "top5", "=", "top5", ")", ")", "\n", "\n", "", "return", "top1", ".", "avg", ",", "top5", ".", "avg", ",", "losses", ".", "avg", "\n", "\n"]], "home.repos.pwc.inspect_result.iduta_pyconv.None.main.save_checkpoint": [[363, 368], ["torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "shutil.copyfile"], "function", ["None"], ["", "def", "save_checkpoint", "(", "state", ",", "is_best", ",", "filename", "=", "'checkpoint.pth.tar'", ")", ":", "\n", "\n", "    ", "torch", ".", "save", "(", "state", ",", "filename", "+", "'checkpoint.pth.tar'", ")", "\n", "if", "is_best", ":", "\n", "        ", "shutil", ".", "copyfile", "(", "filename", "+", "'checkpoint.pth.tar'", ",", "filename", "+", "'model_best.pth.tar'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iduta_pyconv.None.main.adjust_learning_rate": [[411, 416], ["None"], "function", ["None"], ["", "", "def", "adjust_learning_rate", "(", "optimizer", ",", "epoch", ",", "args", ")", ":", "\n", "    ", "\"\"\"Sets the learning rate to the initial LR decayed by 10 every 30 epochs\"\"\"", "\n", "lr", "=", "args", ".", "lr", "*", "(", "0.1", "**", "(", "epoch", "//", "30", ")", ")", "\n", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "        ", "param_group", "[", "'lr'", "]", "=", "lr", "\n", "\n"]], "home.repos.pwc.inspect_result.iduta_pyconv.None.main.accuracy": [[418, 433], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "max", "target.size", "output.topk", "pred.t.t", "pred.t.eq", "target.view().expand_as", "correct[].view().float().sum", "res.append", "correct[].view().float().sum.mul_", "target.view", "correct[].view().float", "correct[].view"], "function", ["None"], ["", "", "def", "accuracy", "(", "output", ",", "target", ",", "topk", "=", "(", "1", ",", ")", ")", ":", "\n", "    ", "\"\"\"Computes the accuracy over the k top predictions for the specified values of k\"\"\"", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "maxk", "=", "max", "(", "topk", ")", "\n", "batch_size", "=", "target", ".", "size", "(", "0", ")", "\n", "\n", "_", ",", "pred", "=", "output", ".", "topk", "(", "maxk", ",", "1", ",", "True", ",", "True", ")", "\n", "pred", "=", "pred", ".", "t", "(", ")", "\n", "correct", "=", "pred", ".", "eq", "(", "target", ".", "view", "(", "1", ",", "-", "1", ")", ".", "expand_as", "(", "pred", ")", ")", "\n", "\n", "res", "=", "[", "]", "\n", "for", "k", "in", "topk", ":", "\n", "            ", "correct_k", "=", "correct", "[", ":", "k", "]", ".", "view", "(", "-", "1", ")", ".", "float", "(", ")", ".", "sum", "(", "0", ",", "keepdim", "=", "True", ")", "\n", "res", ".", "append", "(", "correct_k", ".", "mul_", "(", "100.0", "/", "batch_size", ")", ")", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.iduta_pyconv.None.utils.Logger.__init__": [[6, 14], ["open", "csv.writer", "utils.Logger.logger.writerow"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "path", ",", "header", ",", "mode", "=", "'w'", ")", ":", "\n", "        ", "self", ".", "log_file", "=", "open", "(", "path", ",", "mode", "=", "mode", ")", "\n", "self", ".", "logger", "=", "csv", ".", "writer", "(", "self", ".", "log_file", ",", "delimiter", "=", "'\\t'", ")", "\n", "\n", "if", "mode", "!=", "'a'", ":", "\n", "            ", "self", ".", "logger", ".", "writerow", "(", "header", ")", "\n", "\n", "", "self", ".", "header", "=", "header", "\n", "\n"]], "home.repos.pwc.inspect_result.iduta_pyconv.None.utils.Logger.__del": [[15, 17], ["utils.Logger.log_file.close"], "methods", ["None"], ["", "def", "__del", "(", "self", ")", ":", "\n", "        ", "self", ".", "log_file", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iduta_pyconv.None.utils.Logger.log": [[18, 26], ["utils.Logger.logger.writerow", "utils.Logger.log_file.flush", "write_values.append"], "methods", ["None"], ["", "def", "log", "(", "self", ",", "values", ")", ":", "\n", "        ", "write_values", "=", "[", "]", "\n", "for", "col", "in", "self", ".", "header", ":", "\n", "            ", "assert", "col", "in", "values", "\n", "write_values", ".", "append", "(", "values", "[", "col", "]", ")", "\n", "\n", "", "self", ".", "logger", ".", "writerow", "(", "write_values", ")", "\n", "self", ".", "log_file", ".", "flush", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.iduta_pyconv.div.download_from_url.download_from_url": [[7, 64], ["print", "requests.Session", "requests.Session.get", "session.get.cookies.items", "download_from_url.download_from_url._process_response"], "function", ["home.repos.pwc.inspect_result.iduta_pyconv.None.main.ProgressMeter.print"], ["def", "download_from_url", "(", "url", ",", "path", "=", "None", ",", "root", "=", "'.data'", ",", "overwrite", "=", "False", ")", ":", "\n", "\n", "\n", "    ", "def", "_process_response", "(", "r", ",", "root", ",", "filename", ")", ":", "\n", "        ", "chunk_size", "=", "16", "*", "1024", "\n", "total_size", "=", "int", "(", "r", ".", "headers", ".", "get", "(", "'Content-length'", ",", "0", ")", ")", "\n", "if", "filename", "is", "None", ":", "\n", "            ", "d", "=", "r", ".", "headers", "[", "'content-disposition'", "]", "\n", "filename", "=", "re", ".", "findall", "(", "\"filename=\\\"(.+)\\\"\"", ",", "d", ")", "\n", "if", "filename", "is", "None", ":", "\n", "                ", "raise", "RuntimeError", "(", "\"Filename could not be autodetected\"", ")", "\n", "", "filename", "=", "filename", "[", "0", "]", "\n", "", "path", "=", "os", ".", "path", ".", "join", "(", "root", ",", "filename", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "path", ")", ":", "\n", "            ", "print", "(", "'File %s already exists.'", "%", "path", ")", "\n", "if", "not", "overwrite", ":", "\n", "                ", "return", "path", "\n", "", "print", "(", "'Overwriting file %s.'", "%", "path", ")", "\n", "", "print", "(", "'Downloading file {} to {} ...'", ".", "format", "(", "filename", ",", "path", ")", ")", "\n", "\n", "with", "open", "(", "path", ",", "\"wb\"", ")", "as", "file", ":", "\n", "            ", "for", "chunk", "in", "r", ".", "iter_content", "(", "chunk_size", ")", ":", "\n", "                ", "if", "chunk", ":", "\n", "                    ", "file", ".", "write", "(", "chunk", ")", "\n", "", "", "", "print", "(", "'File {} downloaded.'", ".", "format", "(", "path", ")", ")", "\n", "return", "path", "\n", "\n", "", "if", "path", "is", "None", ":", "\n", "        ", "_", ",", "filename", "=", "os", ".", "path", ".", "split", "(", "url", ")", "\n", "", "else", ":", "\n", "        ", "root", ",", "filename", "=", "os", ".", "path", ".", "split", "(", "path", ")", "\n", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "root", ")", ":", "\n", "        ", "raise", "RuntimeError", "(", "\n", "\"Download directory {} does not exist. \"", "\n", "\"Did you create it?\"", ".", "format", "(", "root", ")", ")", "\n", "\n", "", "if", "'drive.google.com'", "not", "in", "url", ":", "\n", "        ", "response", "=", "requests", ".", "get", "(", "url", ",", "headers", "=", "{", "'User-Agent'", ":", "'Mozilla/5.0'", "}", ",", "stream", "=", "True", ")", "\n", "return", "_process_response", "(", "response", ",", "root", ",", "filename", ")", "\n", "", "else", ":", "\n", "# google drive links get filename from google drive", "\n", "        ", "filename", "=", "None", "\n", "\n", "", "print", "(", "'Downloading from Google Drive; may take a few minutes'", ")", "\n", "confirm_token", "=", "None", "\n", "session", "=", "requests", ".", "Session", "(", ")", "\n", "response", "=", "session", ".", "get", "(", "url", ",", "stream", "=", "True", ")", "\n", "for", "k", ",", "v", "in", "response", ".", "cookies", ".", "items", "(", ")", ":", "\n", "        ", "if", "k", ".", "startswith", "(", "\"download_warning\"", ")", ":", "\n", "            ", "confirm_token", "=", "v", "\n", "\n", "", "", "if", "confirm_token", ":", "\n", "        ", "url", "=", "url", "+", "\"&confirm=\"", "+", "confirm_token", "\n", "response", "=", "session", ".", "get", "(", "url", ",", "stream", "=", "True", ")", "\n", "\n", "", "return", "_process_response", "(", "response", ",", "root", ",", "filename", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.iduta_pyconv.models.pyconvresnet.PyConv2d.__init__": [[53, 64], ["torch.Module.__init__", "range", "torch.ModuleList", "torch.ModuleList", "len", "len", "len", "len", "len", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.iduta_pyconv.models.pyconvhgresnet.PyConvHGResNet.__init__"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "pyconv_kernels", ",", "pyconv_groups", ",", "stride", "=", "1", ",", "dilation", "=", "1", ",", "bias", "=", "False", ")", ":", "\n", "        ", "super", "(", "PyConv2d", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "assert", "len", "(", "out_channels", ")", "==", "len", "(", "pyconv_kernels", ")", "==", "len", "(", "pyconv_groups", ")", "\n", "\n", "self", ".", "pyconv_levels", "=", "[", "None", "]", "*", "len", "(", "pyconv_kernels", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "pyconv_kernels", ")", ")", ":", "\n", "            ", "self", ".", "pyconv_levels", "[", "i", "]", "=", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", "[", "i", "]", ",", "kernel_size", "=", "pyconv_kernels", "[", "i", "]", ",", "\n", "stride", "=", "stride", ",", "padding", "=", "pyconv_kernels", "[", "i", "]", "//", "2", ",", "groups", "=", "pyconv_groups", "[", "i", "]", ",", "\n", "dilation", "=", "dilation", ",", "bias", "=", "bias", ")", "\n", "", "self", ".", "pyconv_levels", "=", "nn", ".", "ModuleList", "(", "self", ".", "pyconv_levels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iduta_pyconv.models.pyconvresnet.PyConv2d.forward": [[65, 71], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "out.append", "level"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "[", "]", "\n", "for", "level", "in", "self", ".", "pyconv_levels", ":", "\n", "            ", "out", ".", "append", "(", "level", "(", "x", ")", ")", "\n", "\n", "", "return", "torch", ".", "cat", "(", "out", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iduta_pyconv.models.pyconvresnet.PyConv4.__init__": [[86, 96], ["torch.Module.__init__", "pyconvresnet.conv", "pyconvresnet.conv", "pyconvresnet.conv", "pyconvresnet.conv"], "methods", ["home.repos.pwc.inspect_result.iduta_pyconv.models.pyconvhgresnet.PyConvHGResNet.__init__", "home.repos.pwc.inspect_result.iduta_pyconv.models.pyconvhgresnet.conv", "home.repos.pwc.inspect_result.iduta_pyconv.models.pyconvhgresnet.conv", "home.repos.pwc.inspect_result.iduta_pyconv.models.pyconvhgresnet.conv", "home.repos.pwc.inspect_result.iduta_pyconv.models.pyconvhgresnet.conv"], ["    ", "def", "__init__", "(", "self", ",", "inplans", ",", "planes", ",", "pyconv_kernels", "=", "[", "3", ",", "5", ",", "7", ",", "9", "]", ",", "stride", "=", "1", ",", "pyconv_groups", "=", "[", "1", ",", "4", ",", "8", ",", "16", "]", ")", ":", "\n", "        ", "super", "(", "PyConv4", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv2_1", "=", "conv", "(", "inplans", ",", "planes", "//", "4", ",", "kernel_size", "=", "pyconv_kernels", "[", "0", "]", ",", "padding", "=", "pyconv_kernels", "[", "0", "]", "//", "2", ",", "\n", "stride", "=", "stride", ",", "groups", "=", "pyconv_groups", "[", "0", "]", ")", "\n", "self", ".", "conv2_2", "=", "conv", "(", "inplans", ",", "planes", "//", "4", ",", "kernel_size", "=", "pyconv_kernels", "[", "1", "]", ",", "padding", "=", "pyconv_kernels", "[", "1", "]", "//", "2", ",", "\n", "stride", "=", "stride", ",", "groups", "=", "pyconv_groups", "[", "1", "]", ")", "\n", "self", ".", "conv2_3", "=", "conv", "(", "inplans", ",", "planes", "//", "4", ",", "kernel_size", "=", "pyconv_kernels", "[", "2", "]", ",", "padding", "=", "pyconv_kernels", "[", "2", "]", "//", "2", ",", "\n", "stride", "=", "stride", ",", "groups", "=", "pyconv_groups", "[", "2", "]", ")", "\n", "self", ".", "conv2_4", "=", "conv", "(", "inplans", ",", "planes", "//", "4", ",", "kernel_size", "=", "pyconv_kernels", "[", "3", "]", ",", "padding", "=", "pyconv_kernels", "[", "3", "]", "//", "2", ",", "\n", "stride", "=", "stride", ",", "groups", "=", "pyconv_groups", "[", "3", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iduta_pyconv.models.pyconvresnet.PyConv4.forward": [[97, 99], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "pyconvresnet.PyConv4.conv2_1", "pyconvresnet.PyConv4.conv2_2", "pyconvresnet.PyConv4.conv2_3", "pyconvresnet.PyConv4.conv2_4"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "torch", ".", "cat", "(", "(", "self", ".", "conv2_1", "(", "x", ")", ",", "self", ".", "conv2_2", "(", "x", ")", ",", "self", ".", "conv2_3", "(", "x", ")", ",", "self", ".", "conv2_4", "(", "x", ")", ")", ",", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iduta_pyconv.models.pyconvresnet.PyConv3.__init__": [[103, 111], ["torch.Module.__init__", "pyconvresnet.conv", "pyconvresnet.conv", "pyconvresnet.conv"], "methods", ["home.repos.pwc.inspect_result.iduta_pyconv.models.pyconvhgresnet.PyConvHGResNet.__init__", "home.repos.pwc.inspect_result.iduta_pyconv.models.pyconvhgresnet.conv", "home.repos.pwc.inspect_result.iduta_pyconv.models.pyconvhgresnet.conv", "home.repos.pwc.inspect_result.iduta_pyconv.models.pyconvhgresnet.conv"], ["    ", "def", "__init__", "(", "self", ",", "inplans", ",", "planes", ",", "pyconv_kernels", "=", "[", "3", ",", "5", ",", "7", "]", ",", "stride", "=", "1", ",", "pyconv_groups", "=", "[", "1", ",", "4", ",", "8", "]", ")", ":", "\n", "        ", "super", "(", "PyConv3", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv2_1", "=", "conv", "(", "inplans", ",", "planes", "//", "4", ",", "kernel_size", "=", "pyconv_kernels", "[", "0", "]", ",", "padding", "=", "pyconv_kernels", "[", "0", "]", "//", "2", ",", "\n", "stride", "=", "stride", ",", "groups", "=", "pyconv_groups", "[", "0", "]", ")", "\n", "self", ".", "conv2_2", "=", "conv", "(", "inplans", ",", "planes", "//", "4", ",", "kernel_size", "=", "pyconv_kernels", "[", "1", "]", ",", "padding", "=", "pyconv_kernels", "[", "1", "]", "//", "2", ",", "\n", "stride", "=", "stride", ",", "groups", "=", "pyconv_groups", "[", "1", "]", ")", "\n", "self", ".", "conv2_3", "=", "conv", "(", "inplans", ",", "planes", "//", "2", ",", "kernel_size", "=", "pyconv_kernels", "[", "2", "]", ",", "padding", "=", "pyconv_kernels", "[", "2", "]", "//", "2", ",", "\n", "stride", "=", "stride", ",", "groups", "=", "pyconv_groups", "[", "2", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iduta_pyconv.models.pyconvresnet.PyConv3.forward": [[112, 114], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "pyconvresnet.PyConv3.conv2_1", "pyconvresnet.PyConv3.conv2_2", "pyconvresnet.PyConv3.conv2_3"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "torch", ".", "cat", "(", "(", "self", ".", "conv2_1", "(", "x", ")", ",", "self", ".", "conv2_2", "(", "x", ")", ",", "self", ".", "conv2_3", "(", "x", ")", ")", ",", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iduta_pyconv.models.pyconvresnet.PyConv2.__init__": [[118, 124], ["torch.Module.__init__", "pyconvresnet.conv", "pyconvresnet.conv"], "methods", ["home.repos.pwc.inspect_result.iduta_pyconv.models.pyconvhgresnet.PyConvHGResNet.__init__", "home.repos.pwc.inspect_result.iduta_pyconv.models.pyconvhgresnet.conv", "home.repos.pwc.inspect_result.iduta_pyconv.models.pyconvhgresnet.conv"], ["    ", "def", "__init__", "(", "self", ",", "inplans", ",", "planes", ",", "pyconv_kernels", "=", "[", "3", ",", "5", "]", ",", "stride", "=", "1", ",", "pyconv_groups", "=", "[", "1", ",", "4", "]", ")", ":", "\n", "        ", "super", "(", "PyConv2", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv2_1", "=", "conv", "(", "inplans", ",", "planes", "//", "2", ",", "kernel_size", "=", "pyconv_kernels", "[", "0", "]", ",", "padding", "=", "pyconv_kernels", "[", "0", "]", "//", "2", ",", "\n", "stride", "=", "stride", ",", "groups", "=", "pyconv_groups", "[", "0", "]", ")", "\n", "self", ".", "conv2_2", "=", "conv", "(", "inplans", ",", "planes", "//", "2", ",", "kernel_size", "=", "pyconv_kernels", "[", "1", "]", ",", "padding", "=", "pyconv_kernels", "[", "1", "]", "//", "2", ",", "\n", "stride", "=", "stride", ",", "groups", "=", "pyconv_groups", "[", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iduta_pyconv.models.pyconvresnet.PyConv2.forward": [[125, 127], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "pyconvresnet.PyConv2.conv2_1", "pyconvresnet.PyConv2.conv2_2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "torch", ".", "cat", "(", "(", "self", ".", "conv2_1", "(", "x", ")", ",", "self", ".", "conv2_2", "(", "x", ")", ")", ",", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iduta_pyconv.models.pyconvresnet.PyConvBlock.__init__": [[143, 158], ["torch.Module.__init__", "pyconvresnet.conv1x1", "norm_layer", "pyconvresnet.get_pyconv", "norm_layer", "pyconvresnet.conv1x1", "norm_layer", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.iduta_pyconv.models.pyconvhgresnet.PyConvHGResNet.__init__", "home.repos.pwc.inspect_result.iduta_pyconv.models.pyconvhgresnet.conv1x1", "home.repos.pwc.inspect_result.iduta_pyconv.models.pyconvhgresnet.get_pyconv", "home.repos.pwc.inspect_result.iduta_pyconv.models.pyconvhgresnet.conv1x1"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ",", "norm_layer", "=", "None", ",", "pyconv_groups", "=", "1", ",", "pyconv_kernels", "=", "1", ")", ":", "\n", "        ", "super", "(", "PyConvBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "norm_layer", "is", "None", ":", "\n", "            ", "norm_layer", "=", "nn", ".", "BatchNorm2d", "\n", "# Both self.conv2 and self.downsample layers downsample the input when stride != 1", "\n", "", "self", ".", "conv1", "=", "conv1x1", "(", "inplanes", ",", "planes", ")", "\n", "self", ".", "bn1", "=", "norm_layer", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "get_pyconv", "(", "planes", ",", "planes", ",", "pyconv_kernels", "=", "pyconv_kernels", ",", "stride", "=", "stride", ",", "\n", "pyconv_groups", "=", "pyconv_groups", ")", "\n", "self", ".", "bn2", "=", "norm_layer", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "conv1x1", "(", "planes", ",", "planes", "*", "self", ".", "expansion", ")", "\n", "self", ".", "bn3", "=", "norm_layer", "(", "planes", "*", "self", ".", "expansion", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.iduta_pyconv.models.pyconvresnet.PyConvBlock.forward": [[159, 180], ["pyconvresnet.PyConvBlock.conv1", "pyconvresnet.PyConvBlock.bn1", "pyconvresnet.PyConvBlock.relu", "pyconvresnet.PyConvBlock.conv2", "pyconvresnet.PyConvBlock.bn2", "pyconvresnet.PyConvBlock.relu", "pyconvresnet.PyConvBlock.conv3", "pyconvresnet.PyConvBlock.bn3", "pyconvresnet.PyConvBlock.relu", "pyconvresnet.PyConvBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "identity", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "identity", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "identity", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.iduta_pyconv.models.pyconvresnet.PyConvBasicBlock1.__init__": [[185, 199], ["torch.Module.__init__", "pyconvresnet.get_pyconv", "norm_layer", "torch.ReLU", "torch.ReLU", "pyconvresnet.get_pyconv", "norm_layer"], "methods", ["home.repos.pwc.inspect_result.iduta_pyconv.models.pyconvhgresnet.PyConvHGResNet.__init__", "home.repos.pwc.inspect_result.iduta_pyconv.models.pyconvhgresnet.get_pyconv", "home.repos.pwc.inspect_result.iduta_pyconv.models.pyconvhgresnet.get_pyconv"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ",", "norm_layer", "=", "None", ",", "pyconv_groups", "=", "1", ",", "pyconv_kernels", "=", "1", ")", ":", "\n", "        ", "super", "(", "PyConvBasicBlock1", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "norm_layer", "is", "None", ":", "\n", "            ", "norm_layer", "=", "nn", ".", "BatchNorm2d", "\n", "# Both self.conv1 and self.downsample layers downsample the input when stride != 1", "\n", "", "self", ".", "conv1", "=", "get_pyconv", "(", "inplanes", ",", "planes", ",", "pyconv_kernels", "=", "pyconv_kernels", ",", "stride", "=", "stride", ",", "\n", "pyconv_groups", "=", "pyconv_groups", ")", "\n", "self", ".", "bn1", "=", "norm_layer", "(", "planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "get_pyconv", "(", "planes", ",", "planes", ",", "pyconv_kernels", "=", "pyconv_kernels", ",", "stride", "=", "1", ",", "\n", "pyconv_groups", "=", "pyconv_groups", ")", "\n", "self", ".", "bn2", "=", "norm_layer", "(", "planes", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.iduta_pyconv.models.pyconvresnet.PyConvBasicBlock1.forward": [[200, 217], ["pyconvresnet.PyConvBasicBlock1.conv1", "pyconvresnet.PyConvBasicBlock1.bn1", "pyconvresnet.PyConvBasicBlock1.relu", "pyconvresnet.PyConvBasicBlock1.conv2", "pyconvresnet.PyConvBasicBlock1.bn2", "pyconvresnet.PyConvBasicBlock1.relu", "pyconvresnet.PyConvBasicBlock1.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "identity", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "identity", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "identity", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.iduta_pyconv.models.pyconvresnet.PyConvBasicBlock2.__init__": [[222, 235], ["torch.Module.__init__", "pyconvresnet.get_pyconv", "norm_layer", "torch.ReLU", "torch.ReLU", "pyconvresnet.conv1x1", "norm_layer"], "methods", ["home.repos.pwc.inspect_result.iduta_pyconv.models.pyconvhgresnet.PyConvHGResNet.__init__", "home.repos.pwc.inspect_result.iduta_pyconv.models.pyconvhgresnet.get_pyconv", "home.repos.pwc.inspect_result.iduta_pyconv.models.pyconvhgresnet.conv1x1"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ",", "norm_layer", "=", "None", ",", "pyconv_groups", "=", "1", ",", "pyconv_kernels", "=", "1", ")", ":", "\n", "        ", "super", "(", "PyConvBasicBlock2", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "norm_layer", "is", "None", ":", "\n", "            ", "norm_layer", "=", "nn", ".", "BatchNorm2d", "\n", "# Both self.conv1 and self.downsample layers downsample the input when stride != 1", "\n", "", "self", ".", "conv1", "=", "get_pyconv", "(", "inplanes", ",", "planes", ",", "pyconv_kernels", "=", "pyconv_kernels", ",", "stride", "=", "stride", ",", "\n", "pyconv_groups", "=", "pyconv_groups", ")", "\n", "self", ".", "bn1", "=", "norm_layer", "(", "planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "conv1x1", "(", "planes", ",", "planes", "*", "self", ".", "expansion", ")", "\n", "self", ".", "bn2", "=", "norm_layer", "(", "planes", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.iduta_pyconv.models.pyconvresnet.PyConvBasicBlock2.forward": [[236, 253], ["pyconvresnet.PyConvBasicBlock2.conv1", "pyconvresnet.PyConvBasicBlock2.bn1", "pyconvresnet.PyConvBasicBlock2.relu", "pyconvresnet.PyConvBasicBlock2.conv2", "pyconvresnet.PyConvBasicBlock2.bn2", "pyconvresnet.PyConvBasicBlock2.relu", "pyconvresnet.PyConvBasicBlock2.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "identity", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "identity", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "identity", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.iduta_pyconv.models.pyconvresnet.PyConvResNet.__init__": [[257, 299], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReLU", "torch.ReLU", "pyconvresnet.PyConvResNet._make_layer", "pyconvresnet.PyConvResNet._make_layer", "pyconvresnet.PyConvResNet._make_layer", "pyconvresnet.PyConvResNet._make_layer", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Linear", "torch.Linear", "pyconvresnet.PyConvResNet.modules", "torch.Dropout", "torch.Dropout", "print", "isinstance", "pyconvresnet.PyConvResNet.modules", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "isinstance", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.iduta_pyconv.models.pyconvhgresnet.PyConvHGResNet.__init__", "home.repos.pwc.inspect_result.iduta_pyconv.models.pyconvhgresnet.PyConvHGResNet._make_layer", "home.repos.pwc.inspect_result.iduta_pyconv.models.pyconvhgresnet.PyConvHGResNet._make_layer", "home.repos.pwc.inspect_result.iduta_pyconv.models.pyconvhgresnet.PyConvHGResNet._make_layer", "home.repos.pwc.inspect_result.iduta_pyconv.models.pyconvhgresnet.PyConvHGResNet._make_layer", "home.repos.pwc.inspect_result.iduta_pyconv.None.main.ProgressMeter.print"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "layers", ",", "num_classes", "=", "1000", ",", "zero_init_residual", "=", "False", ",", "norm_layer", "=", "None", ",", "dropout_prob0", "=", "0.0", ")", ":", "\n", "        ", "super", "(", "PyConvResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "norm_layer", "is", "None", ":", "\n", "            ", "norm_layer", "=", "nn", ".", "BatchNorm2d", "\n", "\n", "", "self", ".", "inplanes", "=", "64", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "norm_layer", "(", "64", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ",", "stride", "=", "2", ",", "norm_layer", "=", "norm_layer", ",", "\n", "pyconv_kernels", "=", "[", "3", ",", "5", ",", "7", ",", "9", "]", ",", "pyconv_groups", "=", "[", "1", ",", "4", ",", "8", ",", "16", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ",", "norm_layer", "=", "norm_layer", ",", "\n", "pyconv_kernels", "=", "[", "3", ",", "5", ",", "7", "]", ",", "pyconv_groups", "=", "[", "1", ",", "4", ",", "8", "]", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ",", "norm_layer", "=", "norm_layer", ",", "\n", "pyconv_kernels", "=", "[", "3", ",", "5", "]", ",", "pyconv_groups", "=", "[", "1", ",", "4", "]", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "2", ",", "norm_layer", "=", "norm_layer", ",", "\n", "pyconv_kernels", "=", "[", "3", "]", ",", "pyconv_groups", "=", "[", "1", "]", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "1", ",", "1", ")", ")", "\n", "\n", "if", "dropout_prob0", ">", "0.0", ":", "\n", "            ", "self", ".", "dp", "=", "nn", ".", "Dropout", "(", "dropout_prob0", ",", "inplace", "=", "True", ")", "\n", "print", "(", "\"Using Dropout with the prob to set to 0 of: \"", ",", "dropout_prob0", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "dp", "=", "None", "\n", "\n", "", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "512", "*", "block", ".", "expansion", ",", "num_classes", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ",", "nonlinearity", "=", "'relu'", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "(", "nn", ".", "BatchNorm2d", ",", "nn", ".", "GroupNorm", ")", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n", "# Zero-initialize the last BN in each residual branch,", "\n", "# so that the residual branch starts with zeros, and each residual block behaves like an identity.", "\n", "# This improves the model by 0.2~0.3% according to https://arxiv.org/abs/1706.02677", "\n", "", "", "if", "zero_init_residual", ":", "\n", "            ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "m", ",", "PyConvBlock", ")", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bn3", ".", "weight", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iduta_pyconv.models.pyconvresnet.PyConvResNet._make_layer": [[300, 328], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "torch.MaxPool2d", "torch.MaxPool2d", "pyconvresnet.conv1x1", "norm_layer", "torch.Sequential", "torch.Sequential", "block", "pyconvresnet.conv1x1", "norm_layer", "torch.MaxPool2d", "torch.MaxPool2d"], "methods", ["home.repos.pwc.inspect_result.iduta_pyconv.models.pyconvhgresnet.conv1x1", "home.repos.pwc.inspect_result.iduta_pyconv.models.pyconvhgresnet.conv1x1"], ["", "", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ",", "norm_layer", "=", "None", ",", "pyconv_kernels", "=", "[", "3", "]", ",", "pyconv_groups", "=", "[", "1", "]", ")", ":", "\n", "        ", "if", "norm_layer", "is", "None", ":", "\n", "            ", "norm_layer", "=", "nn", ".", "BatchNorm2d", "\n", "", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "and", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ")", ",", "\n", "conv1x1", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ")", ",", "\n", "norm_layer", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "", "elif", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "conv1x1", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ")", ",", "\n", "norm_layer", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "", "elif", "stride", "!=", "1", ":", "\n", "            ", "downsample", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", "=", "stride", ",", "downsample", "=", "downsample", ",", "norm_layer", "=", "norm_layer", ",", "\n", "pyconv_kernels", "=", "pyconv_kernels", ",", "pyconv_groups", "=", "pyconv_groups", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "\n", "for", "_", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "norm_layer", "=", "norm_layer", ",", "\n", "pyconv_kernels", "=", "pyconv_kernels", ",", "pyconv_groups", "=", "pyconv_groups", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iduta_pyconv.models.pyconvresnet.PyConvResNet.forward": [[329, 348], ["pyconvresnet.PyConvResNet.conv1", "pyconvresnet.PyConvResNet.bn1", "pyconvresnet.PyConvResNet.relu", "pyconvresnet.PyConvResNet.layer1", "pyconvresnet.PyConvResNet.layer2", "pyconvresnet.PyConvResNet.layer3", "pyconvresnet.PyConvResNet.layer4", "pyconvresnet.PyConvResNet.avgpool", "pyconvresnet.PyConvResNet.view", "pyconvresnet.PyConvResNet.fc", "pyconvresnet.PyConvResNet.size", "pyconvresnet.PyConvResNet.dp"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "\n", "if", "self", ".", "dp", "is", "not", "None", ":", "\n", "            ", "x", "=", "self", ".", "dp", "(", "x", ")", "\n", "\n", "", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.iduta_pyconv.models.pyconvresnet.conv": [[73, 77], ["torch.Conv2d"], "function", ["None"], ["", "", "def", "conv", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "dilation", "=", "1", ",", "groups", "=", "1", ")", ":", "\n", "    ", "\"\"\"standard convolution with padding\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "kernel_size", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "padding", ",", "dilation", "=", "dilation", ",", "groups", "=", "groups", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iduta_pyconv.models.pyconvresnet.conv1x1": [[79, 82], ["torch.Conv2d"], "function", ["None"], ["", "def", "conv1x1", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"\"\"1x1 convolution\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iduta_pyconv.models.pyconvresnet.get_pyconv": [[129, 138], ["len", "pyconvresnet.conv", "len", "pyconvresnet.PyConv2", "len", "pyconvresnet.PyConv3", "len", "pyconvresnet.PyConv4"], "function", ["home.repos.pwc.inspect_result.iduta_pyconv.models.pyconvhgresnet.conv"], ["", "", "def", "get_pyconv", "(", "inplans", ",", "planes", ",", "pyconv_kernels", ",", "stride", "=", "1", ",", "pyconv_groups", "=", "[", "1", "]", ")", ":", "\n", "    ", "if", "len", "(", "pyconv_kernels", ")", "==", "1", ":", "\n", "        ", "return", "conv", "(", "inplans", ",", "planes", ",", "kernel_size", "=", "pyconv_kernels", "[", "0", "]", ",", "stride", "=", "stride", ",", "groups", "=", "pyconv_groups", "[", "0", "]", ")", "\n", "", "elif", "len", "(", "pyconv_kernels", ")", "==", "2", ":", "\n", "        ", "return", "PyConv2", "(", "inplans", ",", "planes", ",", "pyconv_kernels", "=", "pyconv_kernels", ",", "stride", "=", "stride", ",", "pyconv_groups", "=", "pyconv_groups", ")", "\n", "", "elif", "len", "(", "pyconv_kernels", ")", "==", "3", ":", "\n", "        ", "return", "PyConv3", "(", "inplans", ",", "planes", ",", "pyconv_kernels", "=", "pyconv_kernels", ",", "stride", "=", "stride", ",", "pyconv_groups", "=", "pyconv_groups", ")", "\n", "", "elif", "len", "(", "pyconv_kernels", ")", "==", "4", ":", "\n", "        ", "return", "PyConv4", "(", "inplans", ",", "planes", ",", "pyconv_kernels", "=", "pyconv_kernels", ",", "stride", "=", "stride", ",", "pyconv_groups", "=", "pyconv_groups", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iduta_pyconv.models.pyconvresnet.pyconvresnet18": [[350, 362], ["pyconvresnet.PyConvResNet", "NotImplementedError"], "function", ["None"], ["", "", "def", "pyconvresnet18", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a PyConvResNet-18 model.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "#model = PyConvResNet(PyConvBasicBlock1, [2, 2, 2, 2], **kwargs) #params=11.21M GFLOPs 1.55", "\n", "model", "=", "PyConvResNet", "(", "PyConvBasicBlock2", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "**", "kwargs", ")", "#params=5.91M GFLOPs 0.88", "\n", "if", "pretrained", ":", "\n", "        ", "raise", "NotImplementedError", "(", "\"Not available the pretrained model yet!\"", ")", "\n", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.iduta_pyconv.models.pyconvresnet.pyconvresnet34": [[364, 376], ["pyconvresnet.PyConvResNet", "NotImplementedError"], "function", ["None"], ["", "def", "pyconvresnet34", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a PyConvResNet-34 model.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "#model = PyConvResNet(PyConvBasicBlock1, [3, 4, 6, 3], **kwargs) #params=20.44M GFLOPs 3.09", "\n", "model", "=", "PyConvResNet", "(", "PyConvBasicBlock2", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "**", "kwargs", ")", "#params=11.09M GFLOPs 1.75", "\n", "if", "pretrained", ":", "\n", "        ", "raise", "NotImplementedError", "(", "\"Not available the pretrained model yet!\"", ")", "\n", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.iduta_pyconv.models.pyconvresnet.pyconvresnet50": [[378, 390], ["pyconvresnet.PyConvResNet", "os.makedirs", "PyConvResNet.load_state_dict", "torch.load", "torch.load", "div.download_from_url.download_from_url"], "function", ["home.repos.pwc.inspect_result.iduta_pyconv.div.download_from_url.download_from_url"], ["", "def", "pyconvresnet50", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a PyConvResNet-50 model.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "PyConvResNet", "(", "PyConvBlock", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "os", ".", "makedirs", "(", "default_cache_path", ",", "exist_ok", "=", "True", ")", "\n", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "download_from_url", "(", "model_urls", "[", "'pyconvresnet50'", "]", ",", "\n", "root", "=", "default_cache_path", ")", ")", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.iduta_pyconv.models.pyconvresnet.pyconvresnet101": [[392, 404], ["pyconvresnet.PyConvResNet", "os.makedirs", "PyConvResNet.load_state_dict", "torch.load", "torch.load", "div.download_from_url.download_from_url"], "function", ["home.repos.pwc.inspect_result.iduta_pyconv.div.download_from_url.download_from_url"], ["", "def", "pyconvresnet101", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a PyConvResNet-101 model.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "PyConvResNet", "(", "PyConvBlock", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "os", ".", "makedirs", "(", "default_cache_path", ",", "exist_ok", "=", "True", ")", "\n", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "download_from_url", "(", "model_urls", "[", "'pyconvresnet101'", "]", ",", "\n", "root", "=", "default_cache_path", ")", ")", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.iduta_pyconv.models.pyconvresnet.pyconvresnet152": [[406, 418], ["pyconvresnet.PyConvResNet", "os.makedirs", "PyConvResNet.load_state_dict", "torch.load", "torch.load", "div.download_from_url.download_from_url"], "function", ["home.repos.pwc.inspect_result.iduta_pyconv.div.download_from_url.download_from_url"], ["", "def", "pyconvresnet152", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a PyConvResNet-152 model.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "PyConvResNet", "(", "PyConvBlock", ",", "[", "3", ",", "8", ",", "36", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "os", ".", "makedirs", "(", "default_cache_path", ",", "exist_ok", "=", "True", ")", "\n", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "download_from_url", "(", "model_urls", "[", "'pyconvresnet152'", "]", ",", "\n", "root", "=", "default_cache_path", ")", ")", ")", "\n", "", "return", "model", "\n", "", ""]], "home.repos.pwc.inspect_result.iduta_pyconv.models.resnet.BasicBlock.__init__": [[41, 53], ["torch.Module.__init__", "resnet.conv3x3", "norm_layer", "torch.ReLU", "torch.ReLU", "resnet.conv3x3", "norm_layer"], "methods", ["home.repos.pwc.inspect_result.iduta_pyconv.models.pyconvhgresnet.PyConvHGResNet.__init__", "home.repos.pwc.inspect_result.iduta_pyconv.models.resnet.conv3x3", "home.repos.pwc.inspect_result.iduta_pyconv.models.resnet.conv3x3"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ",", "norm_layer", "=", "None", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "norm_layer", "is", "None", ":", "\n", "            ", "norm_layer", "=", "nn", ".", "BatchNorm2d", "\n", "# Both self.conv1 and self.downsample layers downsample the input when stride != 1", "\n", "", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn1", "=", "norm_layer", "(", "planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "norm_layer", "(", "planes", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.iduta_pyconv.models.resnet.BasicBlock.forward": [[54, 71], ["resnet.BasicBlock.conv1", "resnet.BasicBlock.bn1", "resnet.BasicBlock.relu", "resnet.BasicBlock.conv2", "resnet.BasicBlock.bn2", "resnet.BasicBlock.relu", "resnet.BasicBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "identity", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "identity", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "identity", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.iduta_pyconv.models.resnet.Bottleneck.__init__": [[76, 90], ["torch.Module.__init__", "resnet.conv1x1", "norm_layer", "resnet.conv3x3", "norm_layer", "resnet.conv1x1", "norm_layer", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.iduta_pyconv.models.pyconvhgresnet.PyConvHGResNet.__init__", "home.repos.pwc.inspect_result.iduta_pyconv.models.pyconvhgresnet.conv1x1", "home.repos.pwc.inspect_result.iduta_pyconv.models.resnet.conv3x3", "home.repos.pwc.inspect_result.iduta_pyconv.models.pyconvhgresnet.conv1x1"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ",", "norm_layer", "=", "None", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "norm_layer", "is", "None", ":", "\n", "            ", "norm_layer", "=", "nn", ".", "BatchNorm2d", "\n", "# Both self.conv2 and self.downsample layers downsample the input when stride != 1", "\n", "", "self", ".", "conv1", "=", "conv1x1", "(", "inplanes", ",", "planes", ")", "\n", "self", ".", "bn1", "=", "norm_layer", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn2", "=", "norm_layer", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "conv1x1", "(", "planes", ",", "planes", "*", "self", ".", "expansion", ")", "\n", "self", ".", "bn3", "=", "norm_layer", "(", "planes", "*", "self", ".", "expansion", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.iduta_pyconv.models.resnet.Bottleneck.forward": [[91, 112], ["resnet.Bottleneck.conv1", "resnet.Bottleneck.bn1", "resnet.Bottleneck.relu", "resnet.Bottleneck.conv2", "resnet.Bottleneck.bn2", "resnet.Bottleneck.relu", "resnet.Bottleneck.conv3", "resnet.Bottleneck.bn3", "resnet.Bottleneck.relu", "resnet.Bottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "identity", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "identity", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "identity", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.iduta_pyconv.models.resnet.ResNet.__init__": [[116, 157], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Linear", "torch.Linear", "resnet.ResNet.modules", "torch.Dropout", "torch.Dropout", "print", "isinstance", "resnet.ResNet.modules", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "isinstance", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "isinstance", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.iduta_pyconv.models.pyconvhgresnet.PyConvHGResNet.__init__", "home.repos.pwc.inspect_result.iduta_pyconv.models.pyconvhgresnet.PyConvHGResNet._make_layer", "home.repos.pwc.inspect_result.iduta_pyconv.models.pyconvhgresnet.PyConvHGResNet._make_layer", "home.repos.pwc.inspect_result.iduta_pyconv.models.pyconvhgresnet.PyConvHGResNet._make_layer", "home.repos.pwc.inspect_result.iduta_pyconv.models.pyconvhgresnet.PyConvHGResNet._make_layer", "home.repos.pwc.inspect_result.iduta_pyconv.None.main.ProgressMeter.print"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "layers", ",", "num_classes", "=", "1000", ",", "zero_init_residual", "=", "False", ",", "norm_layer", "=", "None", ",", "dropout_prob0", "=", "0.0", ")", ":", "\n", "        ", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "norm_layer", "is", "None", ":", "\n", "            ", "norm_layer", "=", "nn", ".", "BatchNorm2d", "\n", "\n", "", "self", ".", "inplanes", "=", "64", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "norm_layer", "(", "64", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ",", "norm_layer", "=", "norm_layer", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ",", "norm_layer", "=", "norm_layer", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ",", "norm_layer", "=", "norm_layer", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "2", ",", "norm_layer", "=", "norm_layer", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "1", ",", "1", ")", ")", "\n", "\n", "if", "dropout_prob0", ">", "0.0", ":", "\n", "            ", "self", ".", "dp", "=", "nn", ".", "Dropout", "(", "dropout_prob0", ",", "inplace", "=", "True", ")", "\n", "print", "(", "\"Using Dropout with the prob to set to 0 of: \"", ",", "dropout_prob0", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "dp", "=", "None", "\n", "\n", "", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "512", "*", "block", ".", "expansion", ",", "num_classes", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ",", "nonlinearity", "=", "'relu'", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "(", "nn", ".", "BatchNorm2d", ",", "nn", ".", "GroupNorm", ")", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n", "# Zero-initialize the last BN in each residual branch,", "\n", "# so that the residual branch starts with zeros, and each residual block behaves like an identity.", "\n", "# This improves the model by 0.2~0.3% according to https://arxiv.org/abs/1706.02677", "\n", "", "", "if", "zero_init_residual", ":", "\n", "            ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "m", ",", "Bottleneck", ")", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bn3", ".", "weight", ",", "0", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "BasicBlock", ")", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bn2", ".", "weight", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iduta_pyconv.models.resnet.ResNet._make_layer": [[158, 175], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "resnet.conv1x1", "norm_layer", "block"], "methods", ["home.repos.pwc.inspect_result.iduta_pyconv.models.pyconvhgresnet.conv1x1"], ["", "", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ",", "norm_layer", "=", "None", ")", ":", "\n", "        ", "if", "norm_layer", "is", "None", ":", "\n", "            ", "norm_layer", "=", "nn", ".", "BatchNorm2d", "\n", "", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "conv1x1", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "stride", ")", ",", "\n", "norm_layer", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ",", "norm_layer", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "_", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "norm_layer", "=", "norm_layer", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iduta_pyconv.models.resnet.ResNet.forward": [[176, 196], ["resnet.ResNet.conv1", "resnet.ResNet.bn1", "resnet.ResNet.relu", "resnet.ResNet.maxpool", "resnet.ResNet.layer1", "resnet.ResNet.layer2", "resnet.ResNet.layer3", "resnet.ResNet.layer4", "resnet.ResNet.avgpool", "resnet.ResNet.view", "resnet.ResNet.fc", "resnet.ResNet.size", "resnet.ResNet.dp"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "\n", "if", "self", ".", "dp", "is", "not", "None", ":", "\n", "            ", "x", "=", "self", ".", "dp", "(", "x", ")", "\n", "\n", "", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.iduta_pyconv.models.resnet.conv3x3": [[27, 31], ["torch.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"\"\"3x3 convolution with padding\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iduta_pyconv.models.resnet.conv1x1": [[33, 36], ["torch.Conv2d"], "function", ["None"], ["", "def", "conv1x1", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"\"\"1x1 convolution\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iduta_pyconv.models.resnet.resnet18": [[198, 210], ["resnet.ResNet", "os.makedirs", "ResNet.load_state_dict", "torch.load", "torch.load", "div.download_from_url.download_from_url"], "function", ["home.repos.pwc.inspect_result.iduta_pyconv.div.download_from_url.download_from_url"], ["", "", "def", "resnet18", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-18 model.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "BasicBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "os", ".", "makedirs", "(", "default_cache_path", ",", "exist_ok", "=", "True", ")", "\n", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "download_from_url", "(", "model_urls", "[", "'resnet18'", "]", ",", "\n", "root", "=", "default_cache_path", ")", ")", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.iduta_pyconv.models.resnet.resnet34": [[212, 224], ["resnet.ResNet", "os.makedirs", "ResNet.load_state_dict", "torch.load", "torch.load", "div.download_from_url.download_from_url"], "function", ["home.repos.pwc.inspect_result.iduta_pyconv.div.download_from_url.download_from_url"], ["", "def", "resnet34", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-34 model.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "BasicBlock", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "os", ".", "makedirs", "(", "default_cache_path", ",", "exist_ok", "=", "True", ")", "\n", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "download_from_url", "(", "model_urls", "[", "'resnet34'", "]", ",", "\n", "root", "=", "default_cache_path", ")", ")", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.iduta_pyconv.models.resnet.resnet50": [[226, 238], ["resnet.ResNet", "os.makedirs", "ResNet.load_state_dict", "torch.load", "torch.load", "div.download_from_url.download_from_url"], "function", ["home.repos.pwc.inspect_result.iduta_pyconv.div.download_from_url.download_from_url"], ["", "def", "resnet50", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-50 model.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "os", ".", "makedirs", "(", "default_cache_path", ",", "exist_ok", "=", "True", ")", "\n", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "download_from_url", "(", "model_urls", "[", "'resnet50'", "]", ",", "\n", "root", "=", "default_cache_path", ")", ")", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.iduta_pyconv.models.resnet.resnet101": [[240, 252], ["resnet.ResNet", "os.makedirs", "ResNet.load_state_dict", "torch.load", "torch.load", "div.download_from_url.download_from_url"], "function", ["home.repos.pwc.inspect_result.iduta_pyconv.div.download_from_url.download_from_url"], ["", "def", "resnet101", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-101 model.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "os", ".", "makedirs", "(", "default_cache_path", ",", "exist_ok", "=", "True", ")", "\n", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "download_from_url", "(", "model_urls", "[", "'resnet101'", "]", ",", "\n", "root", "=", "default_cache_path", ")", ")", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.iduta_pyconv.models.resnet.resnet152": [[254, 266], ["resnet.ResNet", "os.makedirs", "ResNet.load_state_dict", "torch.load", "torch.load", "div.download_from_url.download_from_url"], "function", ["home.repos.pwc.inspect_result.iduta_pyconv.div.download_from_url.download_from_url"], ["", "def", "resnet152", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-152 model.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "8", ",", "36", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "os", ".", "makedirs", "(", "default_cache_path", ",", "exist_ok", "=", "True", ")", "\n", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "download_from_url", "(", "model_urls", "[", "'resnet152'", "]", ",", "\n", "root", "=", "default_cache_path", ")", ")", ")", "\n", "", "return", "model", "\n", "", ""]], "home.repos.pwc.inspect_result.iduta_pyconv.models.build_model.build_model": [[4, 74], ["models.pyconvhgresnet.pyconvhgresnet50", "models.pyconvresnet.pyconvresnet50", "models.resnet.resnet18", "models.pyconvhgresnet.pyconvhgresnet101", "models.pyconvresnet.pyconvresnet101", "models.resnet.resnet34", "models.pyconvhgresnet.pyconvhgresnet152", "models.pyconvresnet.pyconvresnet152", "models.resnet.resnet50", "models.resnet.resnet101", "models.resnet.resnet152"], "function", ["home.repos.pwc.inspect_result.iduta_pyconv.models.pyconvhgresnet.pyconvhgresnet50", "home.repos.pwc.inspect_result.iduta_pyconv.models.pyconvresnet.pyconvresnet50", "home.repos.pwc.inspect_result.iduta_pyconv.models.resnet.resnet18", "home.repos.pwc.inspect_result.iduta_pyconv.models.pyconvhgresnet.pyconvhgresnet101", "home.repos.pwc.inspect_result.iduta_pyconv.models.pyconvresnet.pyconvresnet101", "home.repos.pwc.inspect_result.iduta_pyconv.models.resnet.resnet34", "home.repos.pwc.inspect_result.iduta_pyconv.models.pyconvhgresnet.pyconvhgresnet152", "home.repos.pwc.inspect_result.iduta_pyconv.models.pyconvresnet.pyconvresnet152", "home.repos.pwc.inspect_result.iduta_pyconv.models.resnet.resnet50", "home.repos.pwc.inspect_result.iduta_pyconv.models.resnet.resnet101", "home.repos.pwc.inspect_result.iduta_pyconv.models.resnet.resnet152"], ["def", "build_model", "(", "args", ")", ":", "\n", "\n", "    ", "if", "args", ".", "arch", "==", "'pyconvhgresnet'", ":", "\n", "        ", "assert", "args", ".", "model_depth", "in", "[", "50", ",", "101", ",", "152", "]", "\n", "\n", "if", "args", ".", "model_depth", "==", "50", ":", "\n", "            ", "model", "=", "pyconvhgresnet", ".", "pyconvhgresnet50", "(", "\n", "pretrained", "=", "args", ".", "pretrained", ",", "\n", "num_classes", "=", "args", ".", "n_classes", ",", "\n", "zero_init_residual", "=", "args", ".", "zero_init_residual", ")", "\n", "", "elif", "args", ".", "model_depth", "==", "101", ":", "\n", "            ", "model", "=", "pyconvhgresnet", ".", "pyconvhgresnet101", "(", "\n", "pretrained", "=", "args", ".", "pretrained", ",", "\n", "num_classes", "=", "args", ".", "n_classes", ",", "\n", "zero_init_residual", "=", "args", ".", "zero_init_residual", ")", "\n", "", "elif", "args", ".", "model_depth", "==", "152", ":", "\n", "            ", "model", "=", "pyconvhgresnet", ".", "pyconvhgresnet152", "(", "\n", "pretrained", "=", "args", ".", "pretrained", ",", "\n", "num_classes", "=", "args", ".", "n_classes", ",", "\n", "zero_init_residual", "=", "args", ".", "zero_init_residual", ")", "\n", "\n", "", "", "if", "args", ".", "arch", "==", "'pyconvresnet'", ":", "\n", "        ", "assert", "args", ".", "model_depth", "in", "[", "50", ",", "101", ",", "152", "]", "\n", "\n", "if", "args", ".", "model_depth", "==", "50", ":", "\n", "            ", "model", "=", "pyconvresnet", ".", "pyconvresnet50", "(", "\n", "pretrained", "=", "args", ".", "pretrained", ",", "\n", "num_classes", "=", "args", ".", "n_classes", ",", "\n", "zero_init_residual", "=", "args", ".", "zero_init_residual", ")", "\n", "", "elif", "args", ".", "model_depth", "==", "101", ":", "\n", "            ", "model", "=", "pyconvresnet", ".", "pyconvresnet101", "(", "\n", "pretrained", "=", "args", ".", "pretrained", ",", "\n", "num_classes", "=", "args", ".", "n_classes", ",", "\n", "zero_init_residual", "=", "args", ".", "zero_init_residual", ")", "\n", "", "elif", "args", ".", "model_depth", "==", "152", ":", "\n", "            ", "model", "=", "pyconvresnet", ".", "pyconvresnet152", "(", "\n", "pretrained", "=", "args", ".", "pretrained", ",", "\n", "num_classes", "=", "args", ".", "n_classes", ",", "\n", "zero_init_residual", "=", "args", ".", "zero_init_residual", ")", "\n", "\n", "", "", "if", "args", ".", "arch", "==", "'resnet'", ":", "\n", "        ", "assert", "args", ".", "model_depth", "in", "[", "18", ",", "34", ",", "50", ",", "101", ",", "152", "]", "\n", "\n", "if", "args", ".", "model_depth", "==", "18", ":", "\n", "            ", "model", "=", "resnet", ".", "resnet18", "(", "\n", "pretrained", "=", "args", ".", "pretrained", ",", "\n", "num_classes", "=", "args", ".", "n_classes", ",", "\n", "zero_init_residual", "=", "args", ".", "zero_init_residual", ")", "\n", "", "elif", "args", ".", "model_depth", "==", "34", ":", "\n", "            ", "model", "=", "resnet", ".", "resnet34", "(", "\n", "pretrained", "=", "args", ".", "pretrained", ",", "\n", "num_classes", "=", "args", ".", "n_classes", ",", "\n", "zero_init_residual", "=", "args", ".", "zero_init_residual", ")", "\n", "", "elif", "args", ".", "model_depth", "==", "50", ":", "\n", "            ", "model", "=", "resnet", ".", "resnet50", "(", "\n", "pretrained", "=", "args", ".", "pretrained", ",", "\n", "num_classes", "=", "args", ".", "n_classes", ",", "\n", "zero_init_residual", "=", "args", ".", "zero_init_residual", ")", "\n", "", "elif", "args", ".", "model_depth", "==", "101", ":", "\n", "            ", "model", "=", "resnet", ".", "resnet101", "(", "\n", "pretrained", "=", "args", ".", "pretrained", ",", "\n", "num_classes", "=", "args", ".", "n_classes", ",", "\n", "zero_init_residual", "=", "args", ".", "zero_init_residual", ")", "\n", "", "elif", "args", ".", "model_depth", "==", "152", ":", "\n", "            ", "model", "=", "resnet", ".", "resnet152", "(", "\n", "pretrained", "=", "args", ".", "pretrained", ",", "\n", "num_classes", "=", "args", ".", "n_classes", ",", "\n", "zero_init_residual", "=", "args", ".", "zero_init_residual", ")", "\n", "\n", "", "", "return", "model", "\n", "", ""]], "home.repos.pwc.inspect_result.iduta_pyconv.models.pyconvhgresnet.PyConv2d.__init__": [[53, 64], ["torch.Module.__init__", "range", "torch.ModuleList", "torch.ModuleList", "len", "len", "len", "len", "len", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.iduta_pyconv.models.pyconvhgresnet.PyConvHGResNet.__init__"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "pyconv_kernels", ",", "pyconv_groups", ",", "stride", "=", "1", ",", "dilation", "=", "1", ",", "bias", "=", "False", ")", ":", "\n", "        ", "super", "(", "PyConv2d", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "assert", "len", "(", "out_channels", ")", "==", "len", "(", "pyconv_kernels", ")", "==", "len", "(", "pyconv_groups", ")", "\n", "\n", "self", ".", "pyconv_levels", "=", "[", "None", "]", "*", "len", "(", "pyconv_kernels", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "pyconv_kernels", ")", ")", ":", "\n", "            ", "self", ".", "pyconv_levels", "[", "i", "]", "=", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", "[", "i", "]", ",", "kernel_size", "=", "pyconv_kernels", "[", "i", "]", ",", "\n", "stride", "=", "stride", ",", "padding", "=", "pyconv_kernels", "[", "i", "]", "//", "2", ",", "groups", "=", "pyconv_groups", "[", "i", "]", ",", "\n", "dilation", "=", "dilation", ",", "bias", "=", "bias", ")", "\n", "", "self", ".", "pyconv_levels", "=", "nn", ".", "ModuleList", "(", "self", ".", "pyconv_levels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iduta_pyconv.models.pyconvhgresnet.PyConv2d.forward": [[65, 71], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "out.append", "level"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "[", "]", "\n", "for", "level", "in", "self", ".", "pyconv_levels", ":", "\n", "            ", "out", ".", "append", "(", "level", "(", "x", ")", ")", "\n", "\n", "", "return", "torch", ".", "cat", "(", "out", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iduta_pyconv.models.pyconvhgresnet.PyConv4.__init__": [[86, 96], ["torch.Module.__init__", "pyconvhgresnet.conv", "pyconvhgresnet.conv", "pyconvhgresnet.conv", "pyconvhgresnet.conv"], "methods", ["home.repos.pwc.inspect_result.iduta_pyconv.models.pyconvhgresnet.PyConvHGResNet.__init__", "home.repos.pwc.inspect_result.iduta_pyconv.models.pyconvhgresnet.conv", "home.repos.pwc.inspect_result.iduta_pyconv.models.pyconvhgresnet.conv", "home.repos.pwc.inspect_result.iduta_pyconv.models.pyconvhgresnet.conv", "home.repos.pwc.inspect_result.iduta_pyconv.models.pyconvhgresnet.conv"], ["    ", "def", "__init__", "(", "self", ",", "inplans", ",", "planes", ",", "pyconv_kernels", "=", "[", "3", ",", "5", ",", "7", ",", "9", "]", ",", "stride", "=", "1", ",", "pyconv_groups", "=", "[", "1", ",", "4", ",", "8", ",", "16", "]", ")", ":", "\n", "        ", "super", "(", "PyConv4", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv2_1", "=", "conv", "(", "inplans", ",", "planes", "//", "4", ",", "kernel_size", "=", "pyconv_kernels", "[", "0", "]", ",", "padding", "=", "pyconv_kernels", "[", "0", "]", "//", "2", ",", "\n", "stride", "=", "stride", ",", "groups", "=", "pyconv_groups", "[", "0", "]", ")", "\n", "self", ".", "conv2_2", "=", "conv", "(", "inplans", ",", "planes", "//", "4", ",", "kernel_size", "=", "pyconv_kernels", "[", "1", "]", ",", "padding", "=", "pyconv_kernels", "[", "1", "]", "//", "2", ",", "\n", "stride", "=", "stride", ",", "groups", "=", "pyconv_groups", "[", "1", "]", ")", "\n", "self", ".", "conv2_3", "=", "conv", "(", "inplans", ",", "planes", "//", "4", ",", "kernel_size", "=", "pyconv_kernels", "[", "2", "]", ",", "padding", "=", "pyconv_kernels", "[", "2", "]", "//", "2", ",", "\n", "stride", "=", "stride", ",", "groups", "=", "pyconv_groups", "[", "2", "]", ")", "\n", "self", ".", "conv2_4", "=", "conv", "(", "inplans", ",", "planes", "//", "4", ",", "kernel_size", "=", "pyconv_kernels", "[", "3", "]", ",", "padding", "=", "pyconv_kernels", "[", "3", "]", "//", "2", ",", "\n", "stride", "=", "stride", ",", "groups", "=", "pyconv_groups", "[", "3", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iduta_pyconv.models.pyconvhgresnet.PyConv4.forward": [[97, 99], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "pyconvhgresnet.PyConv4.conv2_1", "pyconvhgresnet.PyConv4.conv2_2", "pyconvhgresnet.PyConv4.conv2_3", "pyconvhgresnet.PyConv4.conv2_4"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "torch", ".", "cat", "(", "(", "self", ".", "conv2_1", "(", "x", ")", ",", "self", ".", "conv2_2", "(", "x", ")", ",", "self", ".", "conv2_3", "(", "x", ")", ",", "self", ".", "conv2_4", "(", "x", ")", ")", ",", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iduta_pyconv.models.pyconvhgresnet.PyConv3.__init__": [[103, 111], ["torch.Module.__init__", "pyconvhgresnet.conv", "pyconvhgresnet.conv", "pyconvhgresnet.conv"], "methods", ["home.repos.pwc.inspect_result.iduta_pyconv.models.pyconvhgresnet.PyConvHGResNet.__init__", "home.repos.pwc.inspect_result.iduta_pyconv.models.pyconvhgresnet.conv", "home.repos.pwc.inspect_result.iduta_pyconv.models.pyconvhgresnet.conv", "home.repos.pwc.inspect_result.iduta_pyconv.models.pyconvhgresnet.conv"], ["    ", "def", "__init__", "(", "self", ",", "inplans", ",", "planes", ",", "pyconv_kernels", "=", "[", "3", ",", "5", ",", "7", "]", ",", "stride", "=", "1", ",", "pyconv_groups", "=", "[", "1", ",", "4", ",", "8", "]", ")", ":", "\n", "        ", "super", "(", "PyConv3", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv2_1", "=", "conv", "(", "inplans", ",", "planes", "//", "4", ",", "kernel_size", "=", "pyconv_kernels", "[", "0", "]", ",", "padding", "=", "pyconv_kernels", "[", "0", "]", "//", "2", ",", "\n", "stride", "=", "stride", ",", "groups", "=", "pyconv_groups", "[", "0", "]", ")", "\n", "self", ".", "conv2_2", "=", "conv", "(", "inplans", ",", "planes", "//", "4", ",", "kernel_size", "=", "pyconv_kernels", "[", "1", "]", ",", "padding", "=", "pyconv_kernels", "[", "1", "]", "//", "2", ",", "\n", "stride", "=", "stride", ",", "groups", "=", "pyconv_groups", "[", "1", "]", ")", "\n", "self", ".", "conv2_3", "=", "conv", "(", "inplans", ",", "planes", "//", "2", ",", "kernel_size", "=", "pyconv_kernels", "[", "2", "]", ",", "padding", "=", "pyconv_kernels", "[", "2", "]", "//", "2", ",", "\n", "stride", "=", "stride", ",", "groups", "=", "pyconv_groups", "[", "2", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iduta_pyconv.models.pyconvhgresnet.PyConv3.forward": [[112, 114], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "pyconvhgresnet.PyConv3.conv2_1", "pyconvhgresnet.PyConv3.conv2_2", "pyconvhgresnet.PyConv3.conv2_3"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "torch", ".", "cat", "(", "(", "self", ".", "conv2_1", "(", "x", ")", ",", "self", ".", "conv2_2", "(", "x", ")", ",", "self", ".", "conv2_3", "(", "x", ")", ")", ",", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iduta_pyconv.models.pyconvhgresnet.PyConv2.__init__": [[118, 124], ["torch.Module.__init__", "pyconvhgresnet.conv", "pyconvhgresnet.conv"], "methods", ["home.repos.pwc.inspect_result.iduta_pyconv.models.pyconvhgresnet.PyConvHGResNet.__init__", "home.repos.pwc.inspect_result.iduta_pyconv.models.pyconvhgresnet.conv", "home.repos.pwc.inspect_result.iduta_pyconv.models.pyconvhgresnet.conv"], ["    ", "def", "__init__", "(", "self", ",", "inplans", ",", "planes", ",", "pyconv_kernels", "=", "[", "3", ",", "5", "]", ",", "stride", "=", "1", ",", "pyconv_groups", "=", "[", "1", ",", "4", "]", ")", ":", "\n", "        ", "super", "(", "PyConv2", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv2_1", "=", "conv", "(", "inplans", ",", "planes", "//", "2", ",", "kernel_size", "=", "pyconv_kernels", "[", "0", "]", ",", "padding", "=", "pyconv_kernels", "[", "0", "]", "//", "2", ",", "\n", "stride", "=", "stride", ",", "groups", "=", "pyconv_groups", "[", "0", "]", ")", "\n", "self", ".", "conv2_2", "=", "conv", "(", "inplans", ",", "planes", "//", "2", ",", "kernel_size", "=", "pyconv_kernels", "[", "1", "]", ",", "padding", "=", "pyconv_kernels", "[", "1", "]", "//", "2", ",", "\n", "stride", "=", "stride", ",", "groups", "=", "pyconv_groups", "[", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iduta_pyconv.models.pyconvhgresnet.PyConv2.forward": [[125, 127], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "pyconvhgresnet.PyConv2.conv2_1", "pyconvhgresnet.PyConv2.conv2_2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "torch", ".", "cat", "(", "(", "self", ".", "conv2_1", "(", "x", ")", ",", "self", ".", "conv2_2", "(", "x", ")", ")", ",", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iduta_pyconv.models.pyconvhgresnet.PyConvBlock.__init__": [[143, 158], ["torch.Module.__init__", "pyconvhgresnet.conv1x1", "norm_layer", "pyconvhgresnet.get_pyconv", "norm_layer", "pyconvhgresnet.conv1x1", "norm_layer", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.iduta_pyconv.models.pyconvhgresnet.PyConvHGResNet.__init__", "home.repos.pwc.inspect_result.iduta_pyconv.models.pyconvhgresnet.conv1x1", "home.repos.pwc.inspect_result.iduta_pyconv.models.pyconvhgresnet.get_pyconv", "home.repos.pwc.inspect_result.iduta_pyconv.models.pyconvhgresnet.conv1x1"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ",", "norm_layer", "=", "None", ",", "pyconv_groups", "=", "1", ",", "pyconv_kernels", "=", "1", ")", ":", "\n", "        ", "super", "(", "PyConvBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "norm_layer", "is", "None", ":", "\n", "            ", "norm_layer", "=", "nn", ".", "BatchNorm2d", "\n", "# Both self.conv2 and self.downsample layers downsample the input when stride != 1", "\n", "", "self", ".", "conv1", "=", "conv1x1", "(", "inplanes", ",", "planes", ")", "\n", "self", ".", "bn1", "=", "norm_layer", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "get_pyconv", "(", "planes", ",", "planes", ",", "pyconv_kernels", "=", "pyconv_kernels", ",", "stride", "=", "stride", ",", "\n", "pyconv_groups", "=", "pyconv_groups", ")", "\n", "self", ".", "bn2", "=", "norm_layer", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "conv1x1", "(", "planes", ",", "planes", "*", "self", ".", "expansion", ")", "\n", "self", ".", "bn3", "=", "norm_layer", "(", "planes", "*", "self", ".", "expansion", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.iduta_pyconv.models.pyconvhgresnet.PyConvBlock.forward": [[159, 180], ["pyconvhgresnet.PyConvBlock.conv1", "pyconvhgresnet.PyConvBlock.bn1", "pyconvhgresnet.PyConvBlock.relu", "pyconvhgresnet.PyConvBlock.conv2", "pyconvhgresnet.PyConvBlock.bn2", "pyconvhgresnet.PyConvBlock.relu", "pyconvhgresnet.PyConvBlock.conv3", "pyconvhgresnet.PyConvBlock.bn3", "pyconvhgresnet.PyConvBlock.relu", "pyconvhgresnet.PyConvBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "identity", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "identity", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "identity", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.iduta_pyconv.models.pyconvhgresnet.PyConvHGResNet.__init__": [[184, 226], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReLU", "torch.ReLU", "pyconvhgresnet.PyConvHGResNet._make_layer", "pyconvhgresnet.PyConvHGResNet._make_layer", "pyconvhgresnet.PyConvHGResNet._make_layer", "pyconvhgresnet.PyConvHGResNet._make_layer", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Linear", "torch.Linear", "pyconvhgresnet.PyConvHGResNet.modules", "torch.Dropout", "torch.Dropout", "print", "isinstance", "pyconvhgresnet.PyConvHGResNet.modules", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "isinstance", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.iduta_pyconv.models.pyconvhgresnet.PyConvHGResNet.__init__", "home.repos.pwc.inspect_result.iduta_pyconv.models.pyconvhgresnet.PyConvHGResNet._make_layer", "home.repos.pwc.inspect_result.iduta_pyconv.models.pyconvhgresnet.PyConvHGResNet._make_layer", "home.repos.pwc.inspect_result.iduta_pyconv.models.pyconvhgresnet.PyConvHGResNet._make_layer", "home.repos.pwc.inspect_result.iduta_pyconv.models.pyconvhgresnet.PyConvHGResNet._make_layer", "home.repos.pwc.inspect_result.iduta_pyconv.None.main.ProgressMeter.print"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "layers", ",", "num_classes", "=", "1000", ",", "zero_init_residual", "=", "False", ",", "norm_layer", "=", "None", ",", "dropout_prob0", "=", "0.0", ")", ":", "\n", "        ", "super", "(", "PyConvHGResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "norm_layer", "is", "None", ":", "\n", "            ", "norm_layer", "=", "nn", ".", "BatchNorm2d", "\n", "\n", "", "self", ".", "inplanes", "=", "64", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "norm_layer", "(", "64", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", "*", "2", ",", "layers", "[", "0", "]", ",", "stride", "=", "2", ",", "norm_layer", "=", "norm_layer", ",", "\n", "pyconv_kernels", "=", "[", "3", ",", "5", ",", "7", ",", "9", "]", ",", "pyconv_groups", "=", "[", "32", ",", "32", ",", "32", ",", "32", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", "*", "2", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ",", "norm_layer", "=", "norm_layer", ",", "\n", "pyconv_kernels", "=", "[", "3", ",", "5", ",", "7", "]", ",", "pyconv_groups", "=", "[", "32", ",", "64", ",", "64", "]", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", "*", "2", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ",", "norm_layer", "=", "norm_layer", ",", "\n", "pyconv_kernels", "=", "[", "3", ",", "5", "]", ",", "pyconv_groups", "=", "[", "32", ",", "64", "]", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", "*", "2", ",", "layers", "[", "3", "]", ",", "stride", "=", "2", ",", "norm_layer", "=", "norm_layer", ",", "\n", "pyconv_kernels", "=", "[", "3", "]", ",", "pyconv_groups", "=", "[", "32", "]", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "1", ",", "1", ")", ")", "\n", "\n", "if", "dropout_prob0", ">", "0.0", ":", "\n", "            ", "self", ".", "dp", "=", "nn", ".", "Dropout", "(", "dropout_prob0", ",", "inplace", "=", "True", ")", "\n", "print", "(", "\"Using Dropout with the prob to set to 0 of: \"", ",", "dropout_prob0", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "dp", "=", "None", "\n", "\n", "", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "512", "*", "2", "*", "block", ".", "expansion", ",", "num_classes", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ",", "nonlinearity", "=", "'relu'", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "(", "nn", ".", "BatchNorm2d", ",", "nn", ".", "GroupNorm", ")", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n", "# Zero-initialize the last BN in each residual branch,", "\n", "# so that the residual branch starts with zeros, and each residual block behaves like an identity.", "\n", "# This improves the model by 0.2~0.3% according to https://arxiv.org/abs/1706.02677", "\n", "", "", "if", "zero_init_residual", ":", "\n", "            ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "m", ",", "PyConvBlock", ")", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bn3", ".", "weight", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iduta_pyconv.models.pyconvhgresnet.PyConvHGResNet._make_layer": [[227, 255], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "torch.MaxPool2d", "torch.MaxPool2d", "pyconvhgresnet.conv1x1", "norm_layer", "torch.Sequential", "torch.Sequential", "block", "pyconvhgresnet.conv1x1", "norm_layer", "torch.MaxPool2d", "torch.MaxPool2d"], "methods", ["home.repos.pwc.inspect_result.iduta_pyconv.models.pyconvhgresnet.conv1x1", "home.repos.pwc.inspect_result.iduta_pyconv.models.pyconvhgresnet.conv1x1"], ["", "", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ",", "norm_layer", "=", "None", ",", "pyconv_kernels", "=", "[", "3", "]", ",", "pyconv_groups", "=", "[", "1", "]", ")", ":", "\n", "        ", "if", "norm_layer", "is", "None", ":", "\n", "            ", "norm_layer", "=", "nn", ".", "BatchNorm2d", "\n", "", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "and", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ")", ",", "\n", "conv1x1", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ")", ",", "\n", "norm_layer", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "", "elif", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "conv1x1", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ")", ",", "\n", "norm_layer", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "", "elif", "stride", "!=", "1", ":", "\n", "            ", "downsample", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", "=", "stride", ",", "downsample", "=", "downsample", ",", "norm_layer", "=", "norm_layer", ",", "\n", "pyconv_kernels", "=", "pyconv_kernels", ",", "pyconv_groups", "=", "pyconv_groups", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "\n", "for", "_", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "norm_layer", "=", "norm_layer", ",", "\n", "pyconv_kernels", "=", "pyconv_kernels", ",", "pyconv_groups", "=", "pyconv_groups", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iduta_pyconv.models.pyconvhgresnet.PyConvHGResNet.forward": [[256, 275], ["pyconvhgresnet.PyConvHGResNet.conv1", "pyconvhgresnet.PyConvHGResNet.bn1", "pyconvhgresnet.PyConvHGResNet.relu", "pyconvhgresnet.PyConvHGResNet.layer1", "pyconvhgresnet.PyConvHGResNet.layer2", "pyconvhgresnet.PyConvHGResNet.layer3", "pyconvhgresnet.PyConvHGResNet.layer4", "pyconvhgresnet.PyConvHGResNet.avgpool", "pyconvhgresnet.PyConvHGResNet.view", "pyconvhgresnet.PyConvHGResNet.fc", "pyconvhgresnet.PyConvHGResNet.size", "pyconvhgresnet.PyConvHGResNet.dp"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "\n", "if", "self", ".", "dp", "is", "not", "None", ":", "\n", "            ", "x", "=", "self", ".", "dp", "(", "x", ")", "\n", "\n", "", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.iduta_pyconv.models.pyconvhgresnet.conv": [[73, 77], ["torch.Conv2d"], "function", ["None"], ["", "", "def", "conv", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "dilation", "=", "1", ",", "groups", "=", "1", ")", ":", "\n", "    ", "\"\"\"standard convolution with padding\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "kernel_size", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "padding", ",", "dilation", "=", "dilation", ",", "groups", "=", "groups", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iduta_pyconv.models.pyconvhgresnet.conv1x1": [[79, 82], ["torch.Conv2d"], "function", ["None"], ["", "def", "conv1x1", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"\"\"1x1 convolution\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iduta_pyconv.models.pyconvhgresnet.get_pyconv": [[129, 138], ["len", "pyconvhgresnet.conv", "len", "pyconvhgresnet.PyConv2", "len", "pyconvhgresnet.PyConv3", "len", "pyconvhgresnet.PyConv4"], "function", ["home.repos.pwc.inspect_result.iduta_pyconv.models.pyconvhgresnet.conv"], ["", "", "def", "get_pyconv", "(", "inplans", ",", "planes", ",", "pyconv_kernels", ",", "stride", "=", "1", ",", "pyconv_groups", "=", "[", "1", "]", ")", ":", "\n", "    ", "if", "len", "(", "pyconv_kernels", ")", "==", "1", ":", "\n", "        ", "return", "conv", "(", "inplans", ",", "planes", ",", "kernel_size", "=", "pyconv_kernels", "[", "0", "]", ",", "stride", "=", "stride", ",", "groups", "=", "pyconv_groups", "[", "0", "]", ")", "\n", "", "elif", "len", "(", "pyconv_kernels", ")", "==", "2", ":", "\n", "        ", "return", "PyConv2", "(", "inplans", ",", "planes", ",", "pyconv_kernels", "=", "pyconv_kernels", ",", "stride", "=", "stride", ",", "pyconv_groups", "=", "pyconv_groups", ")", "\n", "", "elif", "len", "(", "pyconv_kernels", ")", "==", "3", ":", "\n", "        ", "return", "PyConv3", "(", "inplans", ",", "planes", ",", "pyconv_kernels", "=", "pyconv_kernels", ",", "stride", "=", "stride", ",", "pyconv_groups", "=", "pyconv_groups", ")", "\n", "", "elif", "len", "(", "pyconv_kernels", ")", "==", "4", ":", "\n", "        ", "return", "PyConv4", "(", "inplans", ",", "planes", ",", "pyconv_kernels", "=", "pyconv_kernels", ",", "stride", "=", "stride", ",", "pyconv_groups", "=", "pyconv_groups", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iduta_pyconv.models.pyconvhgresnet.pyconvhgresnet50": [[277, 289], ["pyconvhgresnet.PyConvHGResNet", "os.makedirs", "PyConvHGResNet.load_state_dict", "torch.load", "torch.load", "div.download_from_url.download_from_url"], "function", ["home.repos.pwc.inspect_result.iduta_pyconv.div.download_from_url.download_from_url"], ["", "", "def", "pyconvhgresnet50", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a PyConvHGResNet-50 model.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "PyConvHGResNet", "(", "PyConvBlock", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "os", ".", "makedirs", "(", "default_cache_path", ",", "exist_ok", "=", "True", ")", "\n", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "download_from_url", "(", "model_urls", "[", "'pyconvhgresnet50'", "]", ",", "\n", "root", "=", "default_cache_path", ")", ")", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.iduta_pyconv.models.pyconvhgresnet.pyconvhgresnet101": [[291, 303], ["pyconvhgresnet.PyConvHGResNet", "os.makedirs", "PyConvHGResNet.load_state_dict", "torch.load", "torch.load", "div.download_from_url.download_from_url"], "function", ["home.repos.pwc.inspect_result.iduta_pyconv.div.download_from_url.download_from_url"], ["", "def", "pyconvhgresnet101", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a PyConvHGResNet-101 model.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "PyConvHGResNet", "(", "PyConvBlock", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "os", ".", "makedirs", "(", "default_cache_path", ",", "exist_ok", "=", "True", ")", "\n", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "download_from_url", "(", "model_urls", "[", "'pyconvhgresnet101'", "]", ",", "\n", "root", "=", "default_cache_path", ")", ")", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.iduta_pyconv.models.pyconvhgresnet.pyconvhgresnet152": [[305, 317], ["pyconvhgresnet.PyConvHGResNet", "os.makedirs", "PyConvHGResNet.load_state_dict", "torch.load", "torch.load", "div.download_from_url.download_from_url"], "function", ["home.repos.pwc.inspect_result.iduta_pyconv.div.download_from_url.download_from_url"], ["", "def", "pyconvhgresnet152", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a PyConvHGResNet-152 model.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "PyConvHGResNet", "(", "PyConvBlock", ",", "[", "3", ",", "8", ",", "36", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "os", ".", "makedirs", "(", "default_cache_path", ",", "exist_ok", "=", "True", ")", "\n", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "download_from_url", "(", "model_urls", "[", "'pyconvhgresnet152'", "]", ",", "\n", "root", "=", "default_cache_path", ")", ")", ")", "\n", "", "return", "model", "\n", "", ""]]}