{"home.repos.pwc.inspect_result.pairlab_CBS.None.models.CNNNormal.__init__": [[48, 64], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.pairlab_CBS.None.resnet.ResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "nc", ",", "num_classes", ",", "std", "=", "1", ")", ":", "\n", "        ", "super", "(", "CNNNormal", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "nc", ",", "32", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "max1", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "32", ",", "64", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "max2", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "64", ",", "128", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "max3", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "self", ".", "conv4", "=", "nn", ".", "Conv2d", "(", "128", ",", "256", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "max4", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "256", "*", "2", "*", "2", ",", "256", "*", "2", "*", "2", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "256", "*", "2", "*", "2", ",", "num_classes", ")", "\n", "\n", "self", ".", "std", "=", "std", "\n", "\n"]], "home.repos.pwc.inspect_result.pairlab_CBS.None.models.CNNNormal.get_new_kernels": [[66, 74], ["models.get_gaussian_filter", "models.get_gaussian_filter", "models.get_gaussian_filter", "models.get_gaussian_filter", "models.get_gaussian_filter"], "methods", ["home.repos.pwc.inspect_result.pairlab_CBS.None.utils.get_gaussian_filter", "home.repos.pwc.inspect_result.pairlab_CBS.None.utils.get_gaussian_filter", "home.repos.pwc.inspect_result.pairlab_CBS.None.utils.get_gaussian_filter", "home.repos.pwc.inspect_result.pairlab_CBS.None.utils.get_gaussian_filter", "home.repos.pwc.inspect_result.pairlab_CBS.None.utils.get_gaussian_filter"], ["", "def", "get_new_kernels", "(", "self", ",", "epoch_count", ",", "total_epochs", ")", ":", "\n", "        ", "if", "epoch_count", "%", "10", "==", "0", ":", "\n", "            ", "self", ".", "std", "*=", "0.925", "\n", "", "self", ".", "kernel0", "=", "get_gaussian_filter", "(", "kernel_size", "=", "3", ",", "sigma", "=", "self", ".", "std", "/", "1", ",", "channels", "=", "3", ")", "\n", "self", ".", "kernel1", "=", "get_gaussian_filter", "(", "kernel_size", "=", "3", ",", "sigma", "=", "self", ".", "std", "/", "1", ",", "channels", "=", "32", ")", "\n", "self", ".", "kernel2", "=", "get_gaussian_filter", "(", "kernel_size", "=", "3", ",", "sigma", "=", "self", ".", "std", "/", "1", ",", "channels", "=", "64", ")", "\n", "self", ".", "kernel3", "=", "get_gaussian_filter", "(", "kernel_size", "=", "3", ",", "sigma", "=", "self", ".", "std", "/", "1", ",", "channels", "=", "128", ")", "\n", "self", ".", "kernel4", "=", "get_gaussian_filter", "(", "kernel_size", "=", "3", ",", "sigma", "=", "self", ".", "std", "/", "1", ",", "channels", "=", "256", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pairlab_CBS.None.models.CNNNormal.forward": [[76, 101], ["models.CNNNormal.conv1", "models.CNNNormal.kernel1", "torch.relu", "torch.relu", "torch.relu", "models.CNNNormal.conv2", "models.CNNNormal.kernel2", "torch.relu", "torch.relu", "torch.relu", "models.CNNNormal.conv3", "models.CNNNormal.kernel3", "torch.relu", "torch.relu", "torch.relu", "models.CNNNormal.conv4", "models.CNNNormal.kernel4", "torch.relu", "torch.relu", "torch.relu", "models.CNNNormal.view", "torch.relu", "torch.relu", "torch.relu", "models.CNNNormal.classifier", "models.CNNNormal.max1", "models.CNNNormal.max2", "models.CNNNormal.max3", "models.CNNNormal.max4", "models.CNNNormal.size", "models.CNNNormal.fc"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "kernel1", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "max1", "(", "x", ")", ")", "\n", "\n", "x", "=", "self", ".", "conv2", "(", "x", ")", "\n", "x", "=", "self", ".", "kernel2", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "max2", "(", "x", ")", ")", "\n", "\n", "x", "=", "self", ".", "conv3", "(", "x", ")", "\n", "x", "=", "self", ".", "kernel3", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "max3", "(", "x", ")", ")", "\n", "\n", "x", "=", "self", ".", "conv4", "(", "x", ")", "\n", "x", "=", "self", ".", "kernel4", "(", "x", ")", "\n", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "max4", "(", "x", ")", ")", "\n", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "fc", "(", "x", ")", ")", "\n", "\n", "x", "=", "self", ".", "classifier", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.pairlab_CBS.None.models.SimpleMLP.__init__": [[104, 110], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.pairlab_CBS.None.resnet.ResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_classes", ",", "input_dim", ")", ":", "\n", "        ", "super", "(", "SimpleMLP", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "input_dim", ",", "500", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "500", ",", "500", ")", "\n", "self", ".", "fc3", "=", "nn", ".", "Linear", "(", "500", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pairlab_CBS.None.models.SimpleMLP.forward": [[111, 116], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "models.SimpleMLP.fc3", "models.SimpleMLP.fc1", "models.SimpleMLP.fc2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "F", ".", "relu", "(", "self", ".", "fc1", "(", "x", ")", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "fc2", "(", "x", ")", ")", "\n", "x", "=", "self", ".", "fc3", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.pairlab_CBS.None.models.OneLayerMLP.__init__": [[118, 121], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.pairlab_CBS.None.resnet.ResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_classes", ",", "input_dim", ")", ":", "\n", "        ", "super", "(", "OneLayerMLP", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "input_dim", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pairlab_CBS.None.models.OneLayerMLP.forward": [[122, 125], ["models.OneLayerMLP.fc1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "fc1", "(", "x", ")", "\n", "return", "x", "\n", "", "", ""]], "home.repos.pwc.inspect_result.pairlab_CBS.None.models.get_gaussian_filter": [[7, 45], ["torch.arange", "torch.arange", "torch.arange", "torch.arange.repeat().view", "x_coord.repeat().view.t", "torch.stack().float", "torch.stack().float", "torch.stack().float", "gaussian_kernel.repeat.view", "gaussian_kernel.repeat.repeat", "torch.Conv2d", "torch.exp", "torch.exp", "torch.exp", "torch.sum", "torch.sum", "torch.sum", "torch.arange.repeat", "torch.stack", "torch.stack", "torch.stack", "torch.sum", "torch.sum", "torch.sum"], "function", ["None"], ["def", "get_gaussian_filter", "(", "kernel_size", "=", "3", ",", "sigma", "=", "2", ",", "channels", "=", "3", ")", ":", "\n", "# Create a x, y coordinate grid of shape (kernel_size, kernel_size, 2)", "\n", "    ", "x_coord", "=", "torch", ".", "arange", "(", "kernel_size", ")", "\n", "x_grid", "=", "x_coord", ".", "repeat", "(", "kernel_size", ")", ".", "view", "(", "kernel_size", ",", "kernel_size", ")", "\n", "y_grid", "=", "x_grid", ".", "t", "(", ")", "\n", "xy_grid", "=", "torch", ".", "stack", "(", "[", "x_grid", ",", "y_grid", "]", ",", "dim", "=", "-", "1", ")", ".", "float", "(", ")", "\n", "\n", "mean", "=", "(", "kernel_size", "-", "1", ")", "/", "2.", "\n", "variance", "=", "sigma", "**", "2.", "\n", "\n", "# Calculate the 2-dimensional gaussian kernel which is", "\n", "# the product of two gaussian distributions for two different", "\n", "# variables (in this case called x and y)", "\n", "gaussian_kernel", "=", "(", "1.", "/", "(", "2.", "*", "math", ".", "pi", "*", "variance", ")", ")", "*", "torch", ".", "exp", "(", "\n", "-", "torch", ".", "sum", "(", "(", "xy_grid", "-", "mean", ")", "**", "2.", ",", "dim", "=", "-", "1", ")", "/", "(", "2", "*", "variance", ")", "\n", ")", "\n", "\n", "# Make sure sum of values in gaussian kernel equals 1.", "\n", "gaussian_kernel", "=", "gaussian_kernel", "/", "torch", ".", "sum", "(", "gaussian_kernel", ")", "\n", "\n", "# Reshape to 2d depthwise convolutional weight", "\n", "gaussian_kernel", "=", "gaussian_kernel", ".", "view", "(", "1", ",", "1", ",", "kernel_size", ",", "kernel_size", ")", "\n", "gaussian_kernel", "=", "gaussian_kernel", ".", "repeat", "(", "channels", ",", "1", ",", "1", ",", "1", ")", "\n", "\n", "if", "kernel_size", "==", "3", ":", "\n", "        ", "padding", "=", "1", "\n", "", "else", ":", "\n", "        ", "padding", "=", "0", "\n", "", "gaussian_filter", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "channels", ",", "out_channels", "=", "channels", ",", "\n", "kernel_size", "=", "kernel_size", ",", "groups", "=", "channels", ",", "\n", "bias", "=", "False", ",", "padding", "=", "padding", ")", "\n", "\n", "gaussian_filter", ".", "weight", ".", "data", "=", "gaussian_kernel", "\n", "gaussian_filter", ".", "weight", ".", "requires_grad", "=", "False", "\n", "\n", "return", "gaussian_filter", "\n", "\n"]], "home.repos.pwc.inspect_result.pairlab_CBS.None.vgg.VGG16_conv.__init__": [[12, 76], ["super().__init__", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "vgg.VGG16_conv._initialize_weights", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.MaxPool2d", "torch.nn.MaxPool2d", "torch.nn.MaxPool2d", "torch.nn.MaxPool2d", "torch.nn.MaxPool2d", "torch.nn.MaxPool2d", "torch.nn.MaxPool2d", "torch.nn.MaxPool2d", "torch.nn.MaxPool2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.MaxPool2d", "torch.nn.MaxPool2d", "torch.nn.MaxPool2d", "torch.nn.MaxPool2d", "torch.nn.MaxPool2d", "torch.nn.MaxPool2d", "torch.nn.MaxPool2d", "torch.nn.MaxPool2d", "torch.nn.MaxPool2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.MaxPool2d", "torch.nn.MaxPool2d", "torch.nn.MaxPool2d", "torch.nn.MaxPool2d", "torch.nn.MaxPool2d", "torch.nn.MaxPool2d", "torch.nn.MaxPool2d", "torch.nn.MaxPool2d", "torch.nn.MaxPool2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.MaxPool2d", "torch.nn.MaxPool2d", "torch.nn.MaxPool2d", "torch.nn.MaxPool2d", "torch.nn.MaxPool2d", "torch.nn.MaxPool2d", "torch.nn.MaxPool2d", "torch.nn.MaxPool2d", "torch.nn.MaxPool2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.MaxPool2d", "torch.nn.MaxPool2d", "torch.nn.MaxPool2d", "torch.nn.MaxPool2d", "torch.nn.MaxPool2d", "torch.nn.MaxPool2d", "torch.nn.MaxPool2d", "torch.nn.MaxPool2d", "torch.nn.MaxPool2d", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.pairlab_CBS.None.resnet.ResNet.__init__", "home.repos.pwc.inspect_result.pairlab_CBS.None.resnet.ResNet._initialize_weights"], ["    ", "def", "__init__", "(", "self", ",", "n_classes", ",", "args", ")", ":", "\n", "        ", "super", "(", "VGG16_conv", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "std", "=", "args", ".", "std", "\n", "self", ".", "factor", "=", "args", ".", "std_factor", "\n", "self", ".", "epoch", "=", "args", ".", "epoch", "\n", "self", ".", "kernel_size", "=", "args", ".", "kernel_size", "\n", "\n", "self", ".", "conv1", "=", "torch", ".", "nn", ".", "Sequential", "(", "\n", "torch", ".", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "3", ",", "padding", "=", "1", ")", ",", "\n", "torch", ".", "nn", ".", "ReLU", "(", ")", ",", "\n", "torch", ".", "nn", ".", "Conv2d", "(", "64", ",", "64", ",", "3", ",", "padding", "=", "1", ")", ",", "\n", ")", "\n", "self", ".", "post1", "=", "torch", ".", "nn", ".", "Sequential", "(", "\n", "torch", ".", "nn", ".", "ReLU", "(", ")", ",", "\n", "torch", ".", "nn", ".", "MaxPool2d", "(", "2", ",", "stride", "=", "2", ")", "\n", ")", "\n", "self", ".", "conv2", "=", "torch", ".", "nn", ".", "Sequential", "(", "\n", "torch", ".", "nn", ".", "Conv2d", "(", "64", ",", "128", ",", "3", ",", "padding", "=", "1", ")", ",", "\n", "torch", ".", "nn", ".", "ReLU", "(", ")", ",", "\n", "torch", ".", "nn", ".", "Conv2d", "(", "128", ",", "128", ",", "3", ",", "padding", "=", "1", ")", ",", "\n", ")", "\n", "self", ".", "post2", "=", "torch", ".", "nn", ".", "Sequential", "(", "\n", "torch", ".", "nn", ".", "ReLU", "(", ")", ",", "\n", "torch", ".", "nn", ".", "MaxPool2d", "(", "2", ",", "stride", "=", "2", ")", "\n", ")", "\n", "self", ".", "conv3", "=", "torch", ".", "nn", ".", "Sequential", "(", "\n", "torch", ".", "nn", ".", "Conv2d", "(", "128", ",", "256", ",", "3", ",", "padding", "=", "1", ")", ",", "\n", "torch", ".", "nn", ".", "ReLU", "(", ")", ",", "\n", "torch", ".", "nn", ".", "Conv2d", "(", "256", ",", "256", ",", "3", ",", "padding", "=", "1", ")", ",", "\n", ")", "\n", "self", ".", "post3", "=", "torch", ".", "nn", ".", "Sequential", "(", "\n", "torch", ".", "nn", ".", "ReLU", "(", ")", ",", "\n", "torch", ".", "nn", ".", "MaxPool2d", "(", "2", ",", "stride", "=", "2", ")", "\n", ")", "\n", "self", ".", "conv4", "=", "torch", ".", "nn", ".", "Sequential", "(", "\n", "torch", ".", "nn", ".", "Conv2d", "(", "256", ",", "512", ",", "3", ",", "padding", "=", "1", ")", ",", "\n", "torch", ".", "nn", ".", "ReLU", "(", ")", ",", "\n", "torch", ".", "nn", ".", "Conv2d", "(", "512", ",", "512", ",", "3", ",", "padding", "=", "1", ")", ",", "\n", ")", "\n", "self", ".", "post4", "=", "torch", ".", "nn", ".", "Sequential", "(", "\n", "torch", ".", "nn", ".", "ReLU", "(", ")", ",", "\n", "torch", ".", "nn", ".", "MaxPool2d", "(", "2", ",", "stride", "=", "2", ")", "\n", ")", "\n", "self", ".", "conv5", "=", "torch", ".", "nn", ".", "Sequential", "(", "\n", "torch", ".", "nn", ".", "Conv2d", "(", "512", ",", "512", ",", "3", ",", "padding", "=", "1", ")", ",", "\n", "torch", ".", "nn", ".", "ReLU", "(", ")", ",", "\n", "torch", ".", "nn", ".", "Conv2d", "(", "512", ",", "512", ",", "3", ",", "padding", "=", "1", ")", ",", "\n", ")", "\n", "self", ".", "post5", "=", "torch", ".", "nn", ".", "Sequential", "(", "\n", "torch", ".", "nn", ".", "ReLU", "(", ")", ",", "\n", "torch", ".", "nn", ".", "MaxPool2d", "(", "2", ",", "stride", "=", "2", ")", "\n", ")", "\n", "\n", "self", ".", "classifier", "=", "torch", ".", "nn", ".", "Sequential", "(", "\n", "torch", ".", "nn", ".", "Linear", "(", "512", ",", "4096", ")", ",", "\n", "torch", ".", "nn", ".", "ReLU", "(", ")", ",", "\n", "torch", ".", "nn", ".", "Dropout", "(", ")", ",", "\n", "torch", ".", "nn", ".", "Linear", "(", "4096", ",", "4096", ")", ",", "\n", "torch", ".", "nn", ".", "ReLU", "(", ")", ",", "\n", "torch", ".", "nn", ".", "Dropout", "(", ")", ",", "\n", "torch", ".", "nn", ".", "Linear", "(", "4096", ",", "n_classes", ")", "\n", ")", "\n", "\n", "self", ".", "_initialize_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pairlab_CBS.None.vgg.VGG16_conv._initialize_weights": [[77, 89], ["vgg.VGG16_conv.modules", "isinstance", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "isinstance", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["None"], ["", "def", "_initialize_weights", "(", "self", ")", ":", "\n", "        ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "mode", "=", "'fan_in'", ",", "nonlinearity", "=", "'relu'", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "                ", "nn", ".", "init", ".", "normal_", "(", "m", ".", "weight", ",", "0", ",", "0.01", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pairlab_CBS.None.vgg.VGG16_conv.get_new_kernels": [[91, 123], ["utils.get_gaussian_filter", "utils.get_gaussian_filter", "utils.get_gaussian_filter", "utils.get_gaussian_filter", "utils.get_gaussian_filter"], "methods", ["home.repos.pwc.inspect_result.pairlab_CBS.None.utils.get_gaussian_filter", "home.repos.pwc.inspect_result.pairlab_CBS.None.utils.get_gaussian_filter", "home.repos.pwc.inspect_result.pairlab_CBS.None.utils.get_gaussian_filter", "home.repos.pwc.inspect_result.pairlab_CBS.None.utils.get_gaussian_filter", "home.repos.pwc.inspect_result.pairlab_CBS.None.utils.get_gaussian_filter"], ["", "", "", "def", "get_new_kernels", "(", "self", ",", "epoch_count", ")", ":", "\n", "        ", "if", "epoch_count", "%", "self", ".", "epoch", "==", "0", "and", "epoch_count", "is", "not", "0", ":", "\n", "            ", "self", ".", "std", "*=", "0.9", "\n", "\n", "", "self", ".", "kernel1", "=", "get_gaussian_filter", "(", "\n", "kernel_size", "=", "self", ".", "kernel_size", ",", "\n", "sigma", "=", "self", ".", "std", ",", "\n", "channels", "=", "64", "\n", ")", "\n", "\n", "self", ".", "kernel2", "=", "get_gaussian_filter", "(", "\n", "kernel_size", "=", "self", ".", "kernel_size", ",", "\n", "sigma", "=", "self", ".", "std", ",", "\n", "channels", "=", "128", "\n", ")", "\n", "\n", "self", ".", "kernel3", "=", "get_gaussian_filter", "(", "\n", "kernel_size", "=", "self", ".", "kernel_size", ",", "\n", "sigma", "=", "self", ".", "std", ",", "\n", "channels", "=", "256", "\n", ")", "\n", "\n", "self", ".", "kernel4", "=", "get_gaussian_filter", "(", "\n", "kernel_size", "=", "self", ".", "kernel_size", ",", "\n", "sigma", "=", "self", ".", "std", ",", "\n", "channels", "=", "512", "\n", ")", "\n", "\n", "self", ".", "kernel5", "=", "get_gaussian_filter", "(", "\n", "kernel_size", "=", "self", ".", "kernel_size", ",", "\n", "sigma", "=", "self", ".", "std", ",", "\n", "channels", "=", "512", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.pairlab_CBS.None.vgg.VGG16_conv.forward": [[126, 156], ["vgg.VGG16_conv.conv1", "vgg.VGG16_conv.kernel1", "vgg.VGG16_conv.post1", "vgg.VGG16_conv.conv2", "vgg.VGG16_conv.kernel2", "vgg.VGG16_conv.post2", "vgg.VGG16_conv.conv3", "vgg.VGG16_conv.kernel3", "vgg.VGG16_conv.post3", "vgg.VGG16_conv.conv4", "vgg.VGG16_conv.kernel4", "vgg.VGG16_conv.post4", "vgg.VGG16_conv.conv5", "vgg.VGG16_conv.kernel5", "vgg.VGG16_conv.post5", "output.view.view.view", "vgg.VGG16_conv.classifier", "output.view.view.view", "output.view.view.size", "output.view.view.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "return_intermediate", "=", "False", ")", ":", "\n", "        ", "output", "=", "self", ".", "conv1", "(", "x", ")", "\n", "output", "=", "self", ".", "kernel1", "(", "output", ")", "\n", "output", "=", "self", ".", "post1", "(", "output", ")", "\n", "\n", "output", "=", "self", ".", "conv2", "(", "output", ")", "\n", "output", "=", "self", ".", "kernel2", "(", "output", ")", "\n", "output", "=", "self", ".", "post2", "(", "output", ")", "\n", "\n", "output", "=", "self", ".", "conv3", "(", "output", ")", "\n", "output", "=", "self", ".", "kernel3", "(", "output", ")", "\n", "output", "=", "self", ".", "post3", "(", "output", ")", "\n", "\n", "output", "=", "self", ".", "conv4", "(", "output", ")", "\n", "output", "=", "self", ".", "kernel4", "(", "output", ")", "\n", "output", "=", "self", ".", "post4", "(", "output", ")", "\n", "\n", "output", "=", "self", ".", "conv5", "(", "output", ")", "\n", "output", "=", "self", ".", "kernel5", "(", "output", ")", "\n", "\n", "if", "return_intermediate", ":", "\n", "            ", "output", "=", "output", ".", "view", "(", "output", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "return", "output", "\n", "\n", "", "output", "=", "self", ".", "post5", "(", "output", ")", "\n", "\n", "output", "=", "output", ".", "view", "(", "output", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "output", "=", "self", ".", "classifier", "(", "output", ")", "\n", "\n", "return", "output", "\n", "", "", ""]], "home.repos.pwc.inspect_result.pairlab_CBS.None.main.main": [[4, 15], ["arguments.get_args", "solver_cbs.CBSSolver", "print", "solver_cbs.CBSSolver.solve", "print", "solver_cbs.CBSSolver.save_model"], "function", ["home.repos.pwc.inspect_result.pairlab_CBS.None.arguments.get_args", "home.repos.pwc.inspect_result.pairlab_CBS.None.solver_base.BaseSolver.solve", "home.repos.pwc.inspect_result.pairlab_CBS.None.solver_base.BaseSolver.save_model"], ["def", "main", "(", ")", ":", "\n", "    ", "args", "=", "get_args", "(", ")", "\n", "\n", "solver", "=", "CBSSolver", "(", "args", ")", "\n", "\n", "print", "(", "'training!'", ")", "\n", "solver", ".", "solve", "(", ")", "\n", "print", "(", "'done'", ")", "\n", "\n", "if", "args", ".", "save_model", ":", "\n", "        ", "solver", ".", "save_model", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pairlab_CBS.None.arguments.get_args": [[4, 30], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "torch.cuda.is_available"], "function", ["None"], ["def", "get_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "'--data'", ",", "type", "=", "str", ",", "default", "=", "'../data'", ")", "\n", "parser", ".", "add_argument", "(", "'--dataset'", ",", "type", "=", "str", ",", "default", "=", "'cifar10'", ")", "\n", "parser", ".", "add_argument", "(", "'--log_name'", ",", "type", "=", "str", ",", "default", "=", "'cbs'", ")", "\n", "parser", ".", "add_argument", "(", "'--alg'", ",", "type", "=", "str", ",", "default", "=", "'res'", ",", "choices", "=", "[", "'normal'", ",", "'vgg'", ",", "'res'", ",", "'wrn'", "]", ")", "\n", "parser", ".", "add_argument", "(", "'--log_path'", ",", "type", "=", "str", ",", "default", "=", "'logs'", ")", "\n", "parser", ".", "add_argument", "(", "'--no-cuda'", ",", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "'--batch_size'", ",", "type", "=", "int", ",", "default", "=", "64", ")", "\n", "parser", ".", "add_argument", "(", "'--num_epochs'", ",", "type", "=", "int", ",", "default", "=", "200", ")", "\n", "parser", ".", "add_argument", "(", "'--ssl'", ",", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "'--percentage'", ",", "type", "=", "int", ",", "default", "=", "10", ")", "\n", "parser", ".", "add_argument", "(", "'--save_model'", ",", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "'--lr'", ",", "type", "=", "float", ",", "default", "=", "1e-1", ")", "\n", "\n", "# CBS ARGS", "\n", "parser", ".", "add_argument", "(", "'--std'", ",", "default", "=", "1", ",", "type", "=", "float", ")", "\n", "parser", ".", "add_argument", "(", "'--std_factor'", ",", "default", "=", "0.9", ",", "type", "=", "float", ")", "\n", "parser", ".", "add_argument", "(", "'--epoch'", ",", "default", "=", "5", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--kernel_size'", ",", "default", "=", "3", ",", "type", "=", "int", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "args", ".", "cuda", "=", "True", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "and", "not", "args", ".", "no_cuda", "else", "False", "\n", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.pairlab_CBS.None.solver_cbs.CBSSolver.__init__": [[15, 20], ["solver_base.BaseSolver.__init__"], "methods", ["home.repos.pwc.inspect_result.pairlab_CBS.None.resnet.ResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "args", ")", "\n", "\n", "self", ".", "decay_epoch", "=", "50", "if", "self", ".", "args", ".", "alg", "==", "'vgg'", "else", "30", "\n", "self", ".", "stop_decay_epoch", "=", "self", ".", "decay_epoch", "*", "3", "+", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.pairlab_CBS.None.solver_cbs.CBSSolver.solve": [[21, 64], ["range", "solver_cbs.CBSSolver.model.get_new_kernels", "solver_cbs.CBSSolver.model.cuda", "solver_cbs.CBSSolver.model", "solver_cbs.CBSSolver.ce_loss", "solver_cbs.CBSSolver.optim.zero_grad", "solver_cbs.CBSSolver.backward", "solver_cbs.CBSSolver.optim.step", "solver_cbs.CBSSolver.test", "print", "print", "images.cuda.cuda.cuda", "labels.cuda.cuda.cuda", "print", "copy.deepcopy", "solver_cbs.CBSSolver.item"], "methods", ["home.repos.pwc.inspect_result.pairlab_CBS.None.resnet.ResNet.get_new_kernels", "home.repos.pwc.inspect_result.pairlab_CBS.None.resnet.test"], ["", "def", "solve", "(", "self", ")", ":", "\n", "        ", "best_epoch", ",", "best_acc", "=", "0", ",", "0", "\n", "num_iter", "=", "0", "\n", "for", "epoch_count", "in", "range", "(", "self", ".", "args", ".", "num_epochs", ")", ":", "\n", "            ", "self", ".", "model", ".", "get_new_kernels", "(", "epoch_count", ")", "\n", "\n", "if", "self", ".", "cuda", ":", "\n", "                ", "self", ".", "model", "=", "self", ".", "model", ".", "cuda", "(", ")", "\n", "\n", "", "if", "epoch_count", "is", "not", "0", "and", "epoch_count", "%", "self", ".", "decay_epoch", "==", "0", "and", "epoch_count", "<", "self", ".", "stop_decay_epoch", ":", "\n", "                ", "for", "param", "in", "self", ".", "optim", ".", "param_groups", ":", "\n", "                    ", "param", "[", "'lr'", "]", "=", "param", "[", "'lr'", "]", "/", "10", "\n", "\n", "", "", "for", "images", ",", "labels", "in", "self", ".", "train_data", ":", "\n", "                ", "if", "self", ".", "cuda", ":", "\n", "                    ", "images", "=", "images", ".", "cuda", "(", ")", "\n", "labels", "=", "labels", ".", "cuda", "(", ")", "\n", "\n", "", "preds", "=", "self", ".", "model", "(", "images", ")", "\n", "loss", "=", "self", ".", "ce_loss", "(", "preds", ",", "labels", ")", "\n", "\n", "self", ".", "optim", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "self", ".", "optim", ".", "step", "(", ")", "\n", "\n", "num_iter", "+=", "1", "\n", "\n", "if", "num_iter", "%", "200", "==", "0", ":", "\n", "                    ", "print", "(", "'iter num: {} \\t loss: {:.2f}'", ".", "format", "(", "\n", "num_iter", ",", "loss", ".", "item", "(", ")", ")", ")", "\n", "\n", "", "", "if", "epoch_count", "%", "1", "==", "0", ":", "\n", "                ", "accuracy", "=", "self", ".", "test", "(", ")", "\n", "if", "accuracy", ">", "best_acc", ":", "\n", "                    ", "best_acc", "=", "accuracy", "\n", "best_epoch", "=", "epoch_count", "\n", "self", ".", "best_model", "=", "copy", ".", "deepcopy", "(", "self", ".", "model", ")", "\n", "\n", "", "print", "(", "'epoch count: {} \\t accuracy: {:.2f}'", ".", "format", "(", "\n", "epoch_count", ",", "accuracy", ")", ")", "\n", "print", "(", "'best acc: {} \\t best acc: {:.2f}'", ".", "format", "(", "\n", "best_epoch", ",", "best_acc", ")", ")", "\n", "", "", "", "", ""]], "home.repos.pwc.inspect_result.pairlab_CBS.None.solver_base.BaseSolver.__init__": [[18, 48], ["data.get_data", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.SGD", "torch.SGD", "torch.SGD", "models.CNNNormal", "solver_base.BaseSolver.model.parameters", "solver_base.BaseSolver.model.cuda", "vgg.VGG16_conv", "resnet.ResNet18", "wide_resnet.Wide_ResNet"], "methods", ["home.repos.pwc.inspect_result.pairlab_CBS.None.data.get_data", "home.repos.pwc.inspect_result.pairlab_CBS.None.resnet.ResNet18"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "self", ".", "train_data", ",", "self", ".", "test_data", ",", "self", ".", "args", "=", "get_data", "(", "args", ")", "\n", "self", ".", "cuda", "=", "torch", ".", "cuda", ".", "is_available", "(", ")", "\n", "\n", "if", "self", ".", "args", ".", "alg", "==", "'normal'", ":", "\n", "            ", "self", ".", "model", "=", "CNNNormal", "(", "\n", "nc", "=", "self", ".", "args", ".", "in_dim", ",", "\n", "num_classes", "=", "self", ".", "args", ".", "num_classes", ",", "\n", ")", "\n", "", "elif", "self", ".", "args", ".", "alg", "==", "'vgg'", ":", "\n", "            ", "self", ".", "model", "=", "VGG16_conv", "(", "\n", "self", ".", "args", ".", "num_classes", ",", "\n", "args", "=", "args", ",", "\n", ")", "\n", "", "elif", "self", ".", "args", ".", "alg", "==", "'res'", ":", "\n", "            ", "self", ".", "model", "=", "ResNet18", "(", "self", ".", "args", ")", "\n", "", "elif", "self", ".", "args", ".", "alg", "==", "'wrn'", ":", "\n", "            ", "self", ".", "model", "=", "wide_resnet", ".", "Wide_ResNet", "(", "52", ",", "2", ",", "0.3", ",", "self", ".", "args", ".", "num_classes", ",", "args", ")", "\n", "\n", "", "self", ".", "optim", "=", "optim", ".", "SGD", "(", "\n", "self", ".", "model", ".", "parameters", "(", ")", ",", "\n", "lr", "=", "args", ".", "lr", ",", "\n", "weight_decay", "=", "5e-4", ",", "\n", "momentum", "=", "0.9", ",", "\n", ")", "\n", "\n", "if", "self", ".", "cuda", ":", "\n", "            ", "self", ".", "model", ".", "cuda", "(", ")", "\n", "\n", "", "self", ".", "ce_loss", "=", "F", ".", "cross_entropy", "\n", "\n"]], "home.repos.pwc.inspect_result.pairlab_CBS.None.solver_base.BaseSolver.test": [[50, 66], ["solver_base.BaseSolver.model.eval", "solver_base.BaseSolver.model.train", "images.cuda.cuda.cuda", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "solver_base.BaseSolver.model", "torch.argmax().cpu().numpy", "torch.argmax().cpu().numpy", "torch.argmax().cpu().numpy", "torch.argmax().cpu().numpy", "torch.argmax().cpu().numpy", "torch.argmax().cpu().numpy", "torch.argmax().cpu().numpy", "torch.argmax().cpu().numpy", "torch.argmax().cpu().numpy", "sklearn.metrics.accuracy_score", "images.cuda.cuda.size", "torch.argmax().cpu", "torch.argmax().cpu", "torch.argmax().cpu", "torch.argmax().cpu", "torch.argmax().cpu", "torch.argmax().cpu", "torch.argmax().cpu", "torch.argmax().cpu", "torch.argmax().cpu", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax"], "methods", ["None"], ["", "def", "test", "(", "self", ")", ":", "\n", "        ", "self", ".", "model", ".", "eval", "(", ")", "\n", "total", ",", "correct", "=", "0", ",", "0", "\n", "for", "images", ",", "labels", "in", "self", ".", "test_data", ":", "\n", "            ", "if", "self", ".", "cuda", ":", "\n", "                ", "images", "=", "images", ".", "cuda", "(", ")", "\n", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "preds", "=", "self", ".", "model", "(", "images", ")", "\n", "preds", "=", "torch", ".", "argmax", "(", "preds", ",", "dim", "=", "1", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "correct", "+=", "accuracy_score", "(", "labels", ",", "preds", ",", "normalize", "=", "False", ")", "\n", "total", "+=", "images", ".", "size", "(", "0", ")", "\n", "\n", "", "", "self", ".", "model", ".", "train", "(", ")", "\n", "return", "correct", "/", "total", "*", "100", "\n", "\n"]], "home.repos.pwc.inspect_result.pairlab_CBS.None.solver_base.BaseSolver.save_model": [[68, 74], ["os.path.join", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "os.path.exists", "os.mkdir", "solver_base.BaseSolver.best_model.state_dict"], "methods", ["None"], ["", "def", "save_model", "(", "self", ")", ":", "\n", "        ", "if", "not", "os", ".", "path", ".", "exists", "(", "'./weights'", ")", ":", "\n", "            ", "os", ".", "mkdir", "(", "'weights/'", ")", "\n", "\n", "", "filename", "=", "os", ".", "path", ".", "join", "(", "'weights'", ",", "self", ".", "args", ".", "log_name", "+", "'_model.tar'", ")", "\n", "torch", ".", "save", "(", "self", ".", "best_model", ".", "state_dict", "(", ")", ",", "filename", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pairlab_CBS.None.solver_base.BaseSolver.solve": [[76, 79], ["None"], "methods", ["None"], ["", "@", "abc", ".", "abstractmethod", "\n", "def", "solve", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "", "", ""]], "home.repos.pwc.inspect_result.pairlab_CBS.None.data.get_data": [[10, 175], ["torch.DataLoader", "torchvision.transforms.Compose", "torchvision.datasets.MNIST", "torchvision.datasets.MNIST", "random.sample", "torch.sampler.SubsetRandomSampler", "torch.DataLoader", "torch.DataLoader", "torchvision.transforms.Compose", "torchvision.datasets.CIFAR10", "torchvision.datasets.CIFAR10", "int", "int", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "torchvision.transforms.Compose", "torchvision.datasets.CIFAR100", "torchvision.datasets.CIFAR100", "range", "int", "int", "torchvision.transforms.Scale", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "torchvision.transforms.Compose", "torchvision.datasets.ImageFolder", "torchvision.datasets.ImageFolder", "len", "torchvision.transforms.Scale", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "os.path.join", "os.path.join", "torchvision.transforms.Compose", "torchvision.datasets.SVHN", "torchvision.datasets.SVHN", "len", "torchvision.transforms.Scale", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "torchvision.datasets.Caltech101", "torchvision.datasets.Caltech101", "torchvision.transforms.Scale", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "torchvision.transforms.CenterCrop", "torchvision.transforms.Scale", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "torchvision.transforms.CenterCrop", "torchvision.transforms.Scale", "torchvision.transforms.ToTensor", "torchvision.transforms.Lambda", "x.repeat"], "function", ["None"], ["def", "get_data", "(", "args", ")", ":", "\n", "    ", "if", "args", ".", "dataset", "==", "'mnist'", ":", "\n", "        ", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "(", "0.5", ",", ")", ",", "(", "0.5", ",", ")", ")", "]", "\n", ")", "\n", "\n", "train_data", "=", "datasets", ".", "MNIST", "(", "\n", "root", "=", "args", ".", "data", ",", "\n", "download", "=", "True", ",", "\n", "train", "=", "True", ",", "\n", "transform", "=", "transform", "\n", ")", "\n", "test_data", "=", "datasets", ".", "MNIST", "(", "\n", "root", "=", "args", ".", "data", ",", "\n", "download", "=", "True", ",", "\n", "train", "=", "False", ",", "\n", "transform", "=", "transform", "\n", ")", "\n", "args", ".", "num_classes", "=", "10", "\n", "args", ".", "in_dim", "=", "28", "*", "28", "\n", "", "elif", "args", ".", "dataset", "==", "'cifar10'", ":", "\n", "        ", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "Scale", "(", "32", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "(", "0.5", ",", "0.5", ",", "0.5", ",", ")", ",", "(", "0.5", ",", "0.5", ",", "0.5", ",", ")", ")", "]", "\n", ")", "\n", "\n", "train_data", "=", "datasets", ".", "CIFAR10", "(", "\n", "root", "=", "args", ".", "data", ",", "\n", "download", "=", "True", ",", "\n", "train", "=", "True", ",", "\n", "transform", "=", "transform", "\n", ")", "\n", "test_data", "=", "datasets", ".", "CIFAR10", "(", "\n", "root", "=", "args", ".", "data", ",", "\n", "download", "=", "True", ",", "\n", "train", "=", "False", ",", "\n", "transform", "=", "transform", "\n", ")", "\n", "args", ".", "num_classes", "=", "10", "\n", "args", ".", "in_dim", "=", "3", "\n", "", "elif", "args", ".", "dataset", "==", "'cifar100'", ":", "\n", "        ", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "Scale", "(", "32", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "(", "0.5", ",", "0.5", ",", "0.5", ",", ")", ",", "(", "0.5", ",", "0.5", ",", "0.5", ",", ")", ")", "]", "\n", ")", "\n", "\n", "train_data", "=", "datasets", ".", "CIFAR100", "(", "\n", "root", "=", "args", ".", "data", ",", "\n", "download", "=", "True", ",", "\n", "train", "=", "True", ",", "\n", "transform", "=", "transform", "\n", ")", "\n", "test_data", "=", "datasets", ".", "CIFAR100", "(", "\n", "root", "=", "args", ".", "data", ",", "\n", "download", "=", "True", ",", "\n", "train", "=", "False", ",", "\n", "transform", "=", "transform", "\n", ")", "\n", "args", ".", "num_classes", "=", "100", "\n", "args", ".", "in_dim", "=", "3", "\n", "", "elif", "args", ".", "dataset", "==", "'imagenet'", ":", "\n", "        ", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "Scale", "(", "64", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "(", "0.5", ",", "0.5", ",", "0.5", ",", ")", ",", "(", "0.5", ",", "0.5", ",", "0.5", ",", ")", ")", "]", "\n", ")", "\n", "train_data", "=", "datasets", ".", "ImageFolder", "(", "\n", "os", ".", "path", ".", "join", "(", "args", ".", "data", ",", "'tiny-imagenet-200'", ",", "'train'", ")", ",", "\n", "transform", "=", "transform", ",", "\n", ")", "\n", "test_data", "=", "datasets", ".", "ImageFolder", "(", "\n", "os", ".", "path", ".", "join", "(", "args", ".", "data", ",", "'tiny-imagenet-200'", ",", "'val'", ")", ",", "\n", "transform", "=", "transform", ",", "\n", ")", "\n", "args", ".", "num_classes", "=", "200", "\n", "args", ".", "in_dim", "=", "3", "\n", "", "elif", "args", ".", "dataset", "==", "'svhn'", ":", "\n", "        ", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "Scale", "(", "32", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "(", "0.5", ",", "0.5", ",", "0.5", ",", ")", ",", "(", "0.5", ",", "0.5", ",", "0.5", ",", ")", ")", "]", "\n", ")", "\n", "\n", "train_data", "=", "datasets", ".", "SVHN", "(", "\n", "root", "=", "args", ".", "data", ",", "\n", "download", "=", "True", ",", "\n", "split", "=", "'train'", ",", "\n", "transform", "=", "transform", "\n", ")", "\n", "test_data", "=", "datasets", ".", "SVHN", "(", "\n", "root", "=", "args", ".", "data", ",", "\n", "download", "=", "True", ",", "\n", "split", "=", "'test'", ",", "\n", "transform", "=", "transform", "\n", ")", "\n", "args", ".", "num_classes", "=", "10", "\n", "args", ".", "in_dim", "=", "3", "\n", "", "elif", "args", ".", "dataset", "==", "'caltech'", ":", "\n", "        ", "args", ".", "num_classes", "=", "101", "\n", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "CenterCrop", "(", "128", ")", ",", "\n", "transforms", ".", "Scale", "(", "64", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "(", "0.5", ",", "0.5", ",", "0.5", ",", ")", ",", "(", "0.5", ",", "0.5", ",", "0.5", ",", ")", ")", "]", "\n", ")", "\n", "test_transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "CenterCrop", "(", "128", ")", ",", "\n", "transforms", ".", "Scale", "(", "64", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Lambda", "(", "lambda", "x", ":", "x", ".", "repeat", "(", "3", ",", "1", ",", "1", ")", ")", ",", "\n", "]", "\n", ")", "\n", "train_data", "=", "datasets", ".", "Caltech101", "(", "\n", "root", "=", "args", ".", "data", ",", "\n", "download", "=", "False", ",", "\n", "transform", "=", "transform", ",", "\n", ")", "\n", "test_data", "=", "datasets", ".", "Caltech101", "(", "\n", "root", "=", "args", ".", "data", ",", "\n", "download", "=", "False", ",", "\n", "transform", "=", "test_transform", ",", "\n", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n", "\n", "", "if", "args", ".", "ssl", ":", "\n", "        ", "all_indices", "=", "[", "i", "for", "i", "in", "range", "(", "len", "(", "train_data", ")", ")", "]", "\n", "indices", "=", "random", ".", "sample", "(", "all_indices", ",", "int", "(", "args", ".", "percentage", "*", "len", "(", "train_data", ")", "/", "100", ")", ")", "\n", "\n", "sampler", "=", "data", ".", "sampler", ".", "SubsetRandomSampler", "(", "indices", ")", "\n", "train_loader", "=", "data", ".", "DataLoader", "(", "\n", "train_data", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "pin_memory", "=", "True", ",", "\n", "num_workers", "=", "int", "(", "4", ")", ",", "\n", "shuffle", "=", "False", ",", "\n", "drop_last", "=", "True", ",", "\n", "sampler", "=", "sampler", "\n", ")", "\n", "\n", "", "else", ":", "\n", "        ", "train_loader", "=", "data", ".", "DataLoader", "(", "\n", "train_data", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "pin_memory", "=", "True", ",", "\n", "num_workers", "=", "int", "(", "4", ")", ",", "\n", "shuffle", "=", "True", ",", "\n", "drop_last", "=", "True", ",", "\n", ")", "\n", "\n", "\n", "", "test_loader", "=", "data", ".", "DataLoader", "(", "\n", "test_data", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "pin_memory", "=", "True", ",", "\n", "num_workers", "=", "int", "(", "4", ")", ",", "\n", "shuffle", "=", "True", ",", "\n", "drop_last", "=", "False", ",", "\n", ")", "\n", "\n", "return", "train_loader", ",", "test_loader", ",", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.pairlab_CBS.None.wide_resnet.wide_basic.__init__": [[24, 39], ["torch.Module.__init__", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.pairlab_CBS.None.resnet.ResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "dropout_rate", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "wide_basic", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "in_planes", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "bias", "=", "True", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "p", "=", "dropout_rate", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "True", ")", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "planes", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "True", ")", ",", "\n", ")", "\n", "\n", "", "self", ".", "planes", "=", "planes", "\n", "\n"]], "home.repos.pwc.inspect_result.pairlab_CBS.None.wide_resnet.wide_basic.get_new_kernels": [[40, 50], ["utils.get_gaussian_filter", "utils.get_gaussian_filter"], "methods", ["home.repos.pwc.inspect_result.pairlab_CBS.None.utils.get_gaussian_filter", "home.repos.pwc.inspect_result.pairlab_CBS.None.utils.get_gaussian_filter"], ["", "def", "get_new_kernels", "(", "self", ",", "kernel_size", ",", "std", ")", ":", "\n", "        ", "self", ".", "kernel1", "=", "get_gaussian_filter", "(", "\n", "kernel_size", "=", "kernel_size", ",", "\n", "sigma", "=", "std", ",", "\n", "channels", "=", "self", ".", "planes", ",", "\n", ")", "\n", "self", ".", "kernel2", "=", "get_gaussian_filter", "(", "\n", "kernel_size", "=", "kernel_size", ",", "\n", "sigma", "=", "std", ",", "\n", "channels", "=", "self", ".", "planes", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.pairlab_CBS.None.wide_resnet.wide_basic.forward": [[52, 58], ["wide_resnet.wide_basic.dropout", "wide_resnet.wide_basic.kernel2", "wide_resnet.wide_basic.shortcut", "wide_resnet.wide_basic.kernel1", "wide_resnet.wide_basic.conv2", "wide_resnet.wide_basic.conv1", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "wide_resnet.wide_basic.bn2", "wide_resnet.wide_basic.bn1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "dropout", "(", "self", ".", "kernel1", "(", "self", ".", "conv1", "(", "F", ".", "relu", "(", "self", ".", "bn1", "(", "x", ")", ")", ")", ")", ")", "\n", "out", "=", "self", ".", "kernel2", "(", "self", ".", "conv2", "(", "F", ".", "relu", "(", "self", ".", "bn2", "(", "out", ")", ")", ")", ")", "\n", "out", "+=", "self", ".", "shortcut", "(", "x", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.pairlab_CBS.None.wide_resnet.Wide_ResNet.__init__": [[60, 81], ["torch.Module.__init__", "wide_resnet.conv3x3", "wide_resnet.Wide_ResNet._wide_layer", "wide_resnet.Wide_ResNet._wide_layer", "wide_resnet.Wide_ResNet._wide_layer", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.pairlab_CBS.None.resnet.ResNet.__init__", "home.repos.pwc.inspect_result.pairlab_CBS.None.wide_resnet.conv3x3", "home.repos.pwc.inspect_result.pairlab_CBS.None.wide_resnet.Wide_ResNet._wide_layer", "home.repos.pwc.inspect_result.pairlab_CBS.None.wide_resnet.Wide_ResNet._wide_layer", "home.repos.pwc.inspect_result.pairlab_CBS.None.wide_resnet.Wide_ResNet._wide_layer"], ["    ", "def", "__init__", "(", "self", ",", "depth", ",", "widen_factor", ",", "dropout_rate", ",", "num_classes", ",", "args", ")", ":", "\n", "        ", "super", "(", "Wide_ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_planes", "=", "16", "\n", "\n", "assert", "(", "(", "depth", "-", "4", ")", "%", "6", "==", "0", ")", ",", "'Wide-resnet depth should be 6n+4'", "\n", "n", "=", "(", "depth", "-", "4", ")", "/", "6", "\n", "k", "=", "widen_factor", "\n", "\n", "nStages", "=", "[", "16", ",", "16", "*", "k", ",", "32", "*", "k", ",", "64", "*", "k", "]", "\n", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "3", ",", "nStages", "[", "0", "]", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_wide_layer", "(", "wide_basic", ",", "nStages", "[", "1", "]", ",", "n", ",", "dropout_rate", ",", "stride", "=", "1", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_wide_layer", "(", "wide_basic", ",", "nStages", "[", "2", "]", ",", "n", ",", "dropout_rate", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_wide_layer", "(", "wide_basic", ",", "nStages", "[", "3", "]", ",", "n", ",", "dropout_rate", ",", "stride", "=", "2", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "nStages", "[", "3", "]", ",", "momentum", "=", "0.9", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "nStages", "[", "3", "]", ",", "num_classes", ")", "\n", "\n", "self", ".", "std", "=", "args", ".", "std", "\n", "self", ".", "factor", "=", "args", ".", "std_factor", "\n", "self", ".", "epoch", "=", "args", ".", "epoch", "\n", "self", ".", "kernel_size", "=", "args", ".", "kernel_size", "\n", "\n"]], "home.repos.pwc.inspect_result.pairlab_CBS.None.wide_resnet.Wide_ResNet._wide_layer": [[82, 91], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "block", "int"], "methods", ["None"], ["", "def", "_wide_layer", "(", "self", ",", "block", ",", "planes", ",", "num_blocks", ",", "dropout_rate", ",", "stride", ")", ":", "\n", "        ", "strides", "=", "[", "stride", "]", "+", "[", "1", "]", "*", "(", "int", "(", "num_blocks", ")", "-", "1", ")", "\n", "layers", "=", "[", "]", "\n", "\n", "for", "stride", "in", "strides", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "in_planes", ",", "planes", ",", "dropout_rate", ",", "stride", ")", ")", "\n", "self", ".", "in_planes", "=", "planes", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pairlab_CBS.None.wide_resnet.Wide_ResNet.get_new_kernels": [[92, 110], ["utils.get_gaussian_filter", "wide_resnet.Wide_ResNet.layer1.children", "wide_resnet.Wide_ResNet.layer2.children", "wide_resnet.Wide_ResNet.layer3.children", "child.get_new_kernels", "child.get_new_kernels", "child.get_new_kernels"], "methods", ["home.repos.pwc.inspect_result.pairlab_CBS.None.utils.get_gaussian_filter", "home.repos.pwc.inspect_result.pairlab_CBS.None.resnet.ResNet.get_new_kernels", "home.repos.pwc.inspect_result.pairlab_CBS.None.resnet.ResNet.get_new_kernels", "home.repos.pwc.inspect_result.pairlab_CBS.None.resnet.ResNet.get_new_kernels"], ["", "def", "get_new_kernels", "(", "self", ",", "epoch_count", ")", ":", "\n", "        ", "if", "epoch_count", "%", "self", ".", "epoch", "==", "0", "and", "epoch_count", "is", "not", "0", ":", "\n", "            ", "self", ".", "std", "*=", "self", ".", "factor", "\n", "\n", "", "self", ".", "kernel1", "=", "get_gaussian_filter", "(", "\n", "kernel_size", "=", "self", ".", "kernel_size", ",", "\n", "sigma", "=", "self", ".", "std", ",", "\n", "channels", "=", "16", ",", "\n", ")", "\n", "\n", "for", "child", "in", "self", ".", "layer1", ".", "children", "(", ")", ":", "\n", "            ", "child", ".", "get_new_kernels", "(", "self", ".", "kernel_size", ",", "self", ".", "std", ")", "\n", "\n", "", "for", "child", "in", "self", ".", "layer2", ".", "children", "(", ")", ":", "\n", "            ", "child", ".", "get_new_kernels", "(", "self", ".", "kernel_size", ",", "self", ".", "std", ")", "\n", "\n", "", "for", "child", "in", "self", ".", "layer3", ".", "children", "(", ")", ":", "\n", "            ", "child", ".", "get_new_kernels", "(", "self", ".", "kernel_size", ",", "self", ".", "std", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pairlab_CBS.None.wide_resnet.Wide_ResNet.forward": [[112, 123], ["wide_resnet.Wide_ResNet.kernel1", "wide_resnet.Wide_ResNet.layer1", "wide_resnet.Wide_ResNet.layer2", "wide_resnet.Wide_ResNet.layer3", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "wide_resnet.Wide_ResNet.view", "wide_resnet.Wide_ResNet.linear", "wide_resnet.Wide_ResNet.conv1", "wide_resnet.Wide_ResNet.bn1", "wide_resnet.Wide_ResNet.size"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "kernel1", "(", "self", ".", "conv1", "(", "x", ")", ")", "\n", "out", "=", "self", ".", "layer1", "(", "out", ")", "\n", "out", "=", "self", ".", "layer2", "(", "out", ")", "\n", "out", "=", "self", ".", "layer3", "(", "out", ")", "\n", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "out", ")", ")", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "8", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "linear", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.pairlab_CBS.None.wide_resnet.conv3x3": [[11, 13], ["torch.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pairlab_CBS.None.wide_resnet.conv_init": [[14, 22], ["classname.find", "torch.xavier_uniform_", "torch.constant_", "classname.find", "torch.constant_", "torch.constant_", "numpy.sqrt"], "function", ["None"], ["", "def", "conv_init", "(", "m", ")", ":", "\n", "    ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "if", "classname", ".", "find", "(", "'Conv'", ")", "!=", "-", "1", ":", "\n", "        ", "init", ".", "xavier_uniform_", "(", "m", ".", "weight", ",", "gain", "=", "np", ".", "sqrt", "(", "2", ")", ")", "\n", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "elif", "classname", ".", "find", "(", "'BatchNorm'", ")", "!=", "-", "1", ":", "\n", "        ", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pairlab_CBS.None.resnet.BasicBlock.__init__": [[17, 38], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.pairlab_CBS.None.resnet.ResNet.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "in_planes", ",", "\n", "planes", ",", "\n", "stride", "=", "1", ",", "\n", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "planes", "=", "planes", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "self", ".", "expansion", "*", "planes", ":", "\n", "            ", "self", ".", "shortcut_kernel", "=", "True", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "self", ".", "expansion", "*", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "self", ".", "expansion", "*", "planes", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.pairlab_CBS.None.resnet.BasicBlock.get_new_kernels": [[40, 50], ["utils.get_gaussian_filter", "utils.get_gaussian_filter"], "methods", ["home.repos.pwc.inspect_result.pairlab_CBS.None.utils.get_gaussian_filter", "home.repos.pwc.inspect_result.pairlab_CBS.None.utils.get_gaussian_filter"], ["", "", "def", "get_new_kernels", "(", "self", ",", "kernel_size", ",", "std", ")", ":", "\n", "        ", "self", ".", "kernel1", "=", "get_gaussian_filter", "(", "\n", "kernel_size", "=", "kernel_size", ",", "\n", "sigma", "=", "std", ",", "\n", "channels", "=", "self", ".", "planes", ",", "\n", ")", "\n", "self", ".", "kernel2", "=", "get_gaussian_filter", "(", "\n", "kernel_size", "=", "kernel_size", ",", "\n", "sigma", "=", "std", ",", "\n", "channels", "=", "self", ".", "planes", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.pairlab_CBS.None.resnet.BasicBlock.forward": [[52, 62], ["resnet.BasicBlock.conv1", "torch.relu", "torch.relu", "torch.relu", "resnet.BasicBlock.conv2", "resnet.BasicBlock.bn2", "resnet.BasicBlock.shortcut", "torch.relu", "torch.relu", "torch.relu", "resnet.BasicBlock.bn1", "resnet.BasicBlock.kernel2", "resnet.BasicBlock.kernel1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "kernel1", "(", "out", ")", ")", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "self", ".", "kernel2", "(", "out", ")", ")", "\n", "\n", "out", "+=", "self", ".", "shortcut", "(", "x", ")", "\n", "out", "=", "F", ".", "relu", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.pairlab_CBS.None.resnet.ResNet.__init__": [[65, 82], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "torch.Linear", "torch.Linear", "torch.Linear", "resnet.ResNet._initialize_weights"], "methods", ["home.repos.pwc.inspect_result.pairlab_CBS.None.resnet.ResNet.__init__", "home.repos.pwc.inspect_result.pairlab_CBS.None.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.pairlab_CBS.None.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.pairlab_CBS.None.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.pairlab_CBS.None.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.pairlab_CBS.None.resnet.ResNet._initialize_weights"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "num_blocks", ",", "args", ")", ":", "\n", "        ", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_planes", "=", "64", "\n", "self", ".", "std", "=", "args", ".", "std", "\n", "self", ".", "factor", "=", "args", ".", "std_factor", "\n", "self", ".", "epoch", "=", "args", ".", "epoch", "\n", "self", ".", "kernel_size", "=", "args", ".", "kernel_size", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "num_blocks", "[", "0", "]", ",", "stride", "=", "1", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "num_blocks", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "num_blocks", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "num_blocks", "[", "3", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "512", "*", "block", ".", "expansion", ",", "args", ".", "num_classes", ")", "\n", "\n", "self", ".", "_initialize_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pairlab_CBS.None.resnet.ResNet._initialize_weights": [[83, 95], ["resnet.ResNet.modules", "isinstance", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "isinstance", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["None"], ["", "def", "_initialize_weights", "(", "self", ")", ":", "\n", "        ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "mode", "=", "'fan_in'", ",", "nonlinearity", "=", "'relu'", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "                ", "nn", ".", "init", ".", "normal_", "(", "m", ".", "weight", ",", "0", ",", "0.01", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pairlab_CBS.None.resnet.ResNet._make_layer": [[96, 103], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "block"], "methods", ["None"], ["", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "num_blocks", ",", "stride", ")", ":", "\n", "        ", "strides", "=", "[", "stride", "]", "+", "[", "1", "]", "*", "(", "num_blocks", "-", "1", ")", "\n", "layers", "=", "[", "]", "\n", "for", "stride", "in", "strides", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "in_planes", ",", "planes", ",", "stride", ")", ")", "\n", "self", ".", "in_planes", "=", "planes", "*", "block", ".", "expansion", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pairlab_CBS.None.resnet.ResNet.forward": [[104, 116], ["resnet.ResNet.conv1", "torch.relu", "torch.relu", "torch.relu", "resnet.ResNet.layer1", "resnet.ResNet.layer2", "resnet.ResNet.layer3", "resnet.ResNet.layer4", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "resnet.ResNet.view", "resnet.ResNet.linear", "resnet.ResNet.bn1", "resnet.ResNet.size", "resnet.ResNet.kernel1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "kernel1", "(", "out", ")", ")", ")", "\n", "\n", "out", "=", "self", ".", "layer1", "(", "out", ")", "\n", "out", "=", "self", ".", "layer2", "(", "out", ")", "\n", "out", "=", "self", ".", "layer3", "(", "out", ")", "\n", "out", "=", "self", ".", "layer4", "(", "out", ")", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "4", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "linear", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.pairlab_CBS.None.resnet.ResNet.get_new_kernels": [[118, 138], ["utils.get_gaussian_filter", "resnet.ResNet.layer1.children", "resnet.ResNet.layer2.children", "resnet.ResNet.layer3.children", "resnet.ResNet.layer4.children", "child.get_new_kernels", "child.get_new_kernels", "child.get_new_kernels", "child.get_new_kernels"], "methods", ["home.repos.pwc.inspect_result.pairlab_CBS.None.utils.get_gaussian_filter", "home.repos.pwc.inspect_result.pairlab_CBS.None.resnet.ResNet.get_new_kernels", "home.repos.pwc.inspect_result.pairlab_CBS.None.resnet.ResNet.get_new_kernels", "home.repos.pwc.inspect_result.pairlab_CBS.None.resnet.ResNet.get_new_kernels", "home.repos.pwc.inspect_result.pairlab_CBS.None.resnet.ResNet.get_new_kernels"], ["", "def", "get_new_kernels", "(", "self", ",", "epoch_count", ")", ":", "\n", "        ", "if", "epoch_count", "%", "self", ".", "epoch", "==", "0", "and", "epoch_count", "is", "not", "0", ":", "\n", "            ", "self", ".", "std", "*=", "self", ".", "factor", "\n", "", "self", ".", "kernel1", "=", "get_gaussian_filter", "(", "\n", "kernel_size", "=", "self", ".", "kernel_size", ",", "\n", "sigma", "=", "self", ".", "std", ",", "\n", "channels", "=", "64", ",", "\n", ")", "\n", "\n", "for", "child", "in", "self", ".", "layer1", ".", "children", "(", ")", ":", "\n", "            ", "child", ".", "get_new_kernels", "(", "self", ".", "kernel_size", ",", "self", ".", "std", ")", "\n", "\n", "", "for", "child", "in", "self", ".", "layer2", ".", "children", "(", ")", ":", "\n", "            ", "child", ".", "get_new_kernels", "(", "self", ".", "kernel_size", ",", "self", ".", "std", ")", "\n", "\n", "", "for", "child", "in", "self", ".", "layer3", ".", "children", "(", ")", ":", "\n", "            ", "child", ".", "get_new_kernels", "(", "self", ".", "kernel_size", ",", "self", ".", "std", ")", "\n", "\n", "", "for", "child", "in", "self", ".", "layer4", ".", "children", "(", ")", ":", "\n", "            ", "child", ".", "get_new_kernels", "(", "self", ".", "kernel_size", ",", "self", ".", "std", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pairlab_CBS.None.resnet.ResNet18": [[141, 143], ["resnet.ResNet"], "function", ["None"], ["", "", "", "def", "ResNet18", "(", "args", ")", ":", "\n", "    ", "return", "ResNet", "(", "BasicBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pairlab_CBS.None.resnet.ResNet34": [[144, 146], ["resnet.ResNet"], "function", ["None"], ["", "def", "ResNet34", "(", "args", ")", ":", "\n", "    ", "return", "ResNet", "(", "BasicBlock", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pairlab_CBS.None.resnet.ResNet50": [[147, 149], ["resnet.ResNet"], "function", ["None"], ["", "def", "ResNet50", "(", ")", ":", "\n", "    ", "return", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pairlab_CBS.None.resnet.ResNet101": [[150, 152], ["resnet.ResNet"], "function", ["None"], ["", "def", "ResNet101", "(", ")", ":", "\n", "    ", "return", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pairlab_CBS.None.resnet.test": [[155, 159], ["resnet.ResNet18", "ResNet18.", "print", "torch.randn", "torch.randn", "torch.randn", "net.size"], "function", ["home.repos.pwc.inspect_result.pairlab_CBS.None.resnet.ResNet18"], ["", "def", "test", "(", ")", ":", "\n", "    ", "net", "=", "ResNet18", "(", ")", "\n", "y", "=", "net", "(", "torch", ".", "randn", "(", "1", ",", "3", ",", "32", ",", "32", ")", ")", "\n", "print", "(", "y", ".", "size", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pairlab_CBS.None.utils.get_gaussian_filter": [[7, 48], ["torch.arange", "torch.arange", "torch.arange.repeat().view", "x_coord.repeat().view.t", "torch.stack().float", "torch.stack().float", "gaussian_kernel.repeat.view", "gaussian_kernel.repeat.repeat", "torch.Conv2d", "torch.exp", "torch.exp", "torch.sum", "torch.sum", "torch.arange.repeat", "torch.stack", "torch.stack", "torch.sum", "torch.sum"], "function", ["None"], ["def", "get_gaussian_filter", "(", "kernel_size", "=", "3", ",", "sigma", "=", "2", ",", "channels", "=", "3", ")", ":", "\n", "# Create a x, y coordinate grid of shape (kernel_size, kernel_size, 2)", "\n", "    ", "x_coord", "=", "torch", ".", "arange", "(", "kernel_size", ")", "\n", "x_grid", "=", "x_coord", ".", "repeat", "(", "kernel_size", ")", ".", "view", "(", "kernel_size", ",", "kernel_size", ")", "\n", "y_grid", "=", "x_grid", ".", "t", "(", ")", "\n", "xy_grid", "=", "torch", ".", "stack", "(", "[", "x_grid", ",", "y_grid", "]", ",", "dim", "=", "-", "1", ")", ".", "float", "(", ")", "\n", "\n", "mean", "=", "(", "kernel_size", "-", "1", ")", "/", "2.", "\n", "variance", "=", "sigma", "**", "2.", "\n", "\n", "# Calculate the 2-dimensional gaussian kernel which is", "\n", "# the product of two gaussian distributions for two different", "\n", "# variables (in this case called x and y)", "\n", "gaussian_kernel", "=", "(", "1.", "/", "(", "2.", "*", "math", ".", "pi", "*", "variance", ")", ")", "*", "torch", ".", "exp", "(", "\n", "-", "torch", ".", "sum", "(", "(", "xy_grid", "-", "mean", ")", "**", "2.", ",", "dim", "=", "-", "1", ")", "/", "(", "2", "*", "variance", ")", "\n", ")", "\n", "\n", "# Make sure sum of values in gaussian kernel equals 1.", "\n", "gaussian_kernel", "=", "gaussian_kernel", "/", "torch", ".", "sum", "(", "gaussian_kernel", ")", "\n", "\n", "# Reshape to 2d depthwise convolutional weight", "\n", "gaussian_kernel", "=", "gaussian_kernel", ".", "view", "(", "1", ",", "1", ",", "kernel_size", ",", "kernel_size", ")", "\n", "gaussian_kernel", "=", "gaussian_kernel", ".", "repeat", "(", "channels", ",", "1", ",", "1", ",", "1", ")", "\n", "\n", "if", "kernel_size", "==", "3", ":", "\n", "        ", "padding", "=", "1", "\n", "", "elif", "kernel_size", "==", "5", ":", "\n", "        ", "padding", "=", "2", "\n", "", "else", ":", "\n", "        ", "padding", "=", "0", "\n", "\n", "", "gaussian_filter", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "channels", ",", "out_channels", "=", "channels", ",", "\n", "kernel_size", "=", "kernel_size", ",", "groups", "=", "channels", ",", "\n", "bias", "=", "False", ",", "padding", "=", "padding", ")", "\n", "\n", "gaussian_filter", ".", "weight", ".", "data", "=", "gaussian_kernel", "\n", "gaussian_filter", ".", "weight", ".", "requires_grad", "=", "False", "\n", "\n", "return", "gaussian_filter", "\n", "", ""]]}