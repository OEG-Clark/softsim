{"home.repos.pwc.inspect_result.allenai_savn.None.main.main": [[26, 149], ["setproctitle.setproctitle", "utils.flag_parser.parse_arguments", "utils.class_finder.model_class", "utils.class_finder.agent_class", "utils.class_finder.optimizer_class", "time.time", "time.strftime", "numpy.random.seed", "torch.manual_seed", "torch.manual_seed", "random.seed", "utils.class_finder.model_class.", "torch.Value", "torch.Queue", "range", "print", "utils.net_util.ScalarMeanTracker", "main_eval.main_eval", "time.localtime", "tensorboardX.SummaryWriter", "tensorboardX.SummaryWriter", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.set_start_method", "create_shared_model.share_memory", "utils.class_finder.optimizer_class.", "optimizer_type.share_memory", "print", "torch.Process", "mp.Process.start", "processes.append", "time.sleep", "tensorboardX.SummaryWriter.close", "filter", "mp.Queue.get", "utils.net_util.ScalarMeanTracker.add_scalars", "time.sleep", "mp.Process.join", "create_shared_model.parameters", "tensorboardX.SummaryWriter.add_scalar", "utils.net_util.ScalarMeanTracker.pop_and_reset", "print", "create_shared_model.state_dict", "os.path.join", "torch.save", "torch.save", "tensorboardX.SummaryWriter.add_scalar", "os.path.exists", "os.makedirs"], "function", ["home.repos.pwc.inspect_result.allenai_savn.utils.flag_parser.parse_arguments", "home.repos.pwc.inspect_result.allenai_savn.utils.class_finder.model_class", "home.repos.pwc.inspect_result.allenai_savn.utils.class_finder.agent_class", "home.repos.pwc.inspect_result.allenai_savn.utils.class_finder.optimizer_class", "home.repos.pwc.inspect_result.allenai_savn.None.main_eval.main_eval", "home.repos.pwc.inspect_result.allenai_savn.optimizers.shared_adam.SharedAdam.share_memory", "home.repos.pwc.inspect_result.allenai_savn.optimizers.shared_adam.SharedAdam.share_memory", "home.repos.pwc.inspect_result.allenai_savn.datasets.environment.Environment.start", "home.repos.pwc.inspect_result.allenai_savn.utils.net_util.ScalarMeanTracker.add_scalars", "home.repos.pwc.inspect_result.allenai_savn.utils.net_util.ScalarMeanTracker.pop_and_reset"], ["def", "main", "(", ")", ":", "\n", "    ", "setproctitle", ".", "setproctitle", "(", "\"Train/Test Manager\"", ")", "\n", "args", "=", "flag_parser", ".", "parse_arguments", "(", ")", "\n", "\n", "if", "args", ".", "model", "==", "\"BaseModel\"", "or", "args", ".", "model", "==", "\"GCN\"", ":", "\n", "        ", "args", ".", "learned_loss", "=", "False", "\n", "args", ".", "num_steps", "=", "50", "\n", "target", "=", "nonadaptivea3c_val", "if", "args", ".", "eval", "else", "nonadaptivea3c_train", "\n", "", "else", ":", "\n", "        ", "args", ".", "learned_loss", "=", "True", "\n", "args", ".", "num_steps", "=", "6", "\n", "target", "=", "savn_val", "if", "args", ".", "eval", "else", "savn_train", "\n", "\n", "", "create_shared_model", "=", "model_class", "(", "args", ".", "model", ")", "\n", "init_agent", "=", "agent_class", "(", "args", ".", "agent_type", ")", "\n", "optimizer_type", "=", "optimizer_class", "(", "args", ".", "optimizer", ")", "\n", "\n", "if", "args", ".", "eval", ":", "\n", "        ", "main_eval", "(", "args", ",", "create_shared_model", ",", "init_agent", ")", "\n", "return", "\n", "\n", "", "start_time", "=", "time", ".", "time", "(", ")", "\n", "local_start_time_str", "=", "time", ".", "strftime", "(", "\n", "\"%Y-%m-%d_%H:%M:%S\"", ",", "time", ".", "localtime", "(", "start_time", ")", "\n", ")", "\n", "np", ".", "random", ".", "seed", "(", "args", ".", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "random", ".", "seed", "(", "args", ".", "seed", ")", "\n", "\n", "if", "args", ".", "log_dir", "is", "not", "None", ":", "\n", "        ", "tb_log_dir", "=", "args", ".", "log_dir", "+", "\"/\"", "+", "args", ".", "title", "+", "\"-\"", "+", "local_start_time_str", "\n", "log_writer", "=", "SummaryWriter", "(", "log_dir", "=", "tb_log_dir", ")", "\n", "", "else", ":", "\n", "        ", "log_writer", "=", "SummaryWriter", "(", "comment", "=", "args", ".", "title", ")", "\n", "\n", "", "if", "args", ".", "gpu_ids", "==", "-", "1", ":", "\n", "        ", "args", ".", "gpu_ids", "=", "[", "-", "1", "]", "\n", "", "else", ":", "\n", "        ", "torch", ".", "cuda", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "mp", ".", "set_start_method", "(", "\"spawn\"", ")", "\n", "\n", "", "shared_model", "=", "create_shared_model", "(", "args", ")", "\n", "\n", "train_total_ep", "=", "0", "\n", "n_frames", "=", "0", "\n", "\n", "if", "shared_model", "is", "not", "None", ":", "\n", "        ", "shared_model", ".", "share_memory", "(", ")", "\n", "optimizer", "=", "optimizer_type", "(", "\n", "filter", "(", "lambda", "p", ":", "p", ".", "requires_grad", ",", "shared_model", ".", "parameters", "(", ")", ")", ",", "args", "\n", ")", "\n", "optimizer", ".", "share_memory", "(", ")", "\n", "print", "(", "shared_model", ")", "\n", "", "else", ":", "\n", "        ", "assert", "(", "\n", "args", ".", "agent_type", "==", "\"RandomNavigationAgent\"", "\n", ")", ",", "\"The model is None but agent is not random agent\"", "\n", "optimizer", "=", "None", "\n", "\n", "", "processes", "=", "[", "]", "\n", "\n", "end_flag", "=", "mp", ".", "Value", "(", "ctypes", ".", "c_bool", ",", "False", ")", "\n", "\n", "train_res_queue", "=", "mp", ".", "Queue", "(", ")", "\n", "\n", "for", "rank", "in", "range", "(", "0", ",", "args", ".", "workers", ")", ":", "\n", "        ", "p", "=", "mp", ".", "Process", "(", "\n", "target", "=", "target", ",", "\n", "args", "=", "(", "\n", "rank", ",", "\n", "args", ",", "\n", "create_shared_model", ",", "\n", "shared_model", ",", "\n", "init_agent", ",", "\n", "optimizer", ",", "\n", "train_res_queue", ",", "\n", "end_flag", ",", "\n", ")", ",", "\n", ")", "\n", "p", ".", "start", "(", ")", "\n", "processes", ".", "append", "(", "p", ")", "\n", "time", ".", "sleep", "(", "0.1", ")", "\n", "\n", "", "print", "(", "\"Train agents created.\"", ")", "\n", "\n", "train_thin", "=", "args", ".", "train_thin", "\n", "train_scalars", "=", "ScalarMeanTracker", "(", ")", "\n", "\n", "try", ":", "\n", "        ", "while", "train_total_ep", "<", "args", ".", "max_ep", ":", "\n", "\n", "            ", "train_result", "=", "train_res_queue", ".", "get", "(", ")", "\n", "train_scalars", ".", "add_scalars", "(", "train_result", ")", "\n", "train_total_ep", "+=", "1", "\n", "n_frames", "+=", "train_result", "[", "\"ep_length\"", "]", "\n", "if", "(", "train_total_ep", "%", "train_thin", ")", "==", "0", ":", "\n", "                ", "log_writer", ".", "add_scalar", "(", "\"n_frames\"", ",", "n_frames", ",", "train_total_ep", ")", "\n", "tracked_means", "=", "train_scalars", ".", "pop_and_reset", "(", ")", "\n", "for", "k", "in", "tracked_means", ":", "\n", "                    ", "log_writer", ".", "add_scalar", "(", "\n", "k", "+", "\"/train\"", ",", "tracked_means", "[", "k", "]", ",", "train_total_ep", "\n", ")", "\n", "\n", "", "", "if", "(", "train_total_ep", "%", "args", ".", "ep_save_freq", ")", "==", "0", ":", "\n", "\n", "                ", "print", "(", "n_frames", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "args", ".", "save_model_dir", ")", ":", "\n", "                    ", "os", ".", "makedirs", "(", "args", ".", "save_model_dir", ")", "\n", "", "state_to_save", "=", "shared_model", ".", "state_dict", "(", ")", "\n", "save_path", "=", "os", ".", "path", ".", "join", "(", "\n", "args", ".", "save_model_dir", ",", "\n", "\"{0}_{1}_{2}_{3}.dat\"", ".", "format", "(", "\n", "args", ".", "title", ",", "n_frames", ",", "train_total_ep", ",", "local_start_time_str", "\n", ")", ",", "\n", ")", "\n", "torch", ".", "save", "(", "state_to_save", ",", "save_path", ")", "\n", "\n", "", "", "", "finally", ":", "\n", "        ", "log_writer", ".", "close", "(", ")", "\n", "end_flag", ".", "value", "=", "True", "\n", "for", "p", "in", "processes", ":", "\n", "            ", "time", ".", "sleep", "(", "0.1", ")", "\n", "p", ".", "join", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.allenai_savn.None.full_eval.main": [[16, 89], ["utils.flag_parser.parse_arguments", "utils.class_finder.model_class", "utils.class_finder.agent_class", "checkpoints.sort", "tqdm.tqdm", "main_eval.main_eval", "print", "print", "os.path.join", "main_eval.main_eval", "open", "json.load", "tabulate.tabulate", "f.split", "os.listdir", "int", "open", "json.load", "f.startswith", "len"], "function", ["home.repos.pwc.inspect_result.allenai_savn.utils.flag_parser.parse_arguments", "home.repos.pwc.inspect_result.allenai_savn.utils.class_finder.model_class", "home.repos.pwc.inspect_result.allenai_savn.utils.class_finder.agent_class", "home.repos.pwc.inspect_result.allenai_savn.None.main_eval.main_eval", "home.repos.pwc.inspect_result.allenai_savn.None.main_eval.main_eval"], ["def", "main", "(", ")", ":", "\n", "    ", "args", "=", "flag_parser", ".", "parse_arguments", "(", ")", "\n", "\n", "create_shared_model", "=", "model_class", "(", "args", ".", "model", ")", "\n", "init_agent", "=", "agent_class", "(", "args", ".", "agent_type", ")", "\n", "\n", "args", ".", "episode_type", "=", "\"TestValEpisode\"", "\n", "args", ".", "test_or_val", "=", "\"val\"", "\n", "\n", "# tb_log_dir = args.log_dir + \"/\" + args.title", "\n", "# log_writer = SummaryWriter(log_dir=tb_log_dir)", "\n", "\n", "# Get all valid saved_models for the given title and sort by train_ep.", "\n", "checkpoints", "=", "[", "(", "f", ",", "f", ".", "split", "(", "\"_\"", ")", ")", "for", "f", "in", "os", ".", "listdir", "(", "args", ".", "save_model_dir", ")", "]", "\n", "checkpoints", "=", "[", "\n", "(", "f", ",", "int", "(", "s", "[", "-", "3", "]", ")", ")", "\n", "for", "(", "f", ",", "s", ")", "in", "checkpoints", "\n", "if", "len", "(", "s", ")", ">=", "4", "and", "f", ".", "startswith", "(", "args", ".", "title", ")", "\n", "]", "\n", "checkpoints", ".", "sort", "(", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ")", "\n", "\n", "best_model_on_val", "=", "None", "\n", "best_performance_on_val", "=", "0.0", "\n", "for", "(", "f", ",", "train_ep", ")", "in", "tqdm", "(", "checkpoints", ",", "desc", "=", "\"Checkpoints.\"", ")", ":", "\n", "\n", "        ", "model", "=", "os", ".", "path", ".", "join", "(", "args", ".", "save_model_dir", ",", "f", ")", "\n", "args", ".", "load_model", "=", "model", "\n", "\n", "# run eval on model", "\n", "args", ".", "test_or_val", "=", "\"val\"", "\n", "main_eval", "(", "args", ",", "create_shared_model", ",", "init_agent", ")", "\n", "\n", "# check if best on val.", "\n", "with", "open", "(", "args", ".", "results_json", ",", "\"r\"", ")", "as", "f", ":", "\n", "            ", "results", "=", "json", ".", "load", "(", "f", ")", "\n", "\n", "", "if", "results", "[", "\"success\"", "]", ">", "best_performance_on_val", ":", "\n", "            ", "best_model_on_val", "=", "model", "\n", "best_performance_on_val", "=", "results", "[", "\"success\"", "]", "\n", "\n", "# log_writer.add_scalar(\"val/success\", results[\"success\"], train_ep)", "\n", "# log_writer.add_scalar(\"val/spl\", results[\"spl\"], train_ep)", "\n", "#", "\n", "# # run on test.", "\n", "# args.test_or_val = \"test\"", "\n", "# main_eval(args, create_shared_model, init_agent)", "\n", "# with open(args.results_json, \"r\") as f:", "\n", "#     results = json.load(f)", "\n", "#", "\n", "# log_writer.add_scalar(\"test/success\", results[\"success\"], train_ep)", "\n", "# log_writer.add_scalar(\"test/spl\", results[\"spl\"], train_ep)", "\n", "\n", "", "", "args", ".", "test_or_val", "=", "\"test\"", "\n", "args", ".", "load_model", "=", "best_model_on_val", "\n", "main_eval", "(", "args", ",", "create_shared_model", ",", "init_agent", ")", "\n", "\n", "with", "open", "(", "args", ".", "results_json", ",", "\"r\"", ")", "as", "f", ":", "\n", "        ", "results", "=", "json", ".", "load", "(", "f", ")", "\n", "\n", "", "print", "(", "\n", "tabulate", "(", "\n", "[", "\n", "[", "\"SPL >= 1:\"", ",", "results", "[", "\"GreaterThan/1/spl\"", "]", "]", ",", "\n", "[", "\"Success >= 1:\"", ",", "results", "[", "\"GreaterThan/1/success\"", "]", "]", ",", "\n", "[", "\"SPL >= 5:\"", ",", "results", "[", "\"GreaterThan/5/spl\"", "]", "]", ",", "\n", "[", "\"Success >= 5:\"", ",", "results", "[", "\"GreaterThan/5/success\"", "]", "]", ",", "\n", "]", ",", "\n", "headers", "=", "[", "\"Metric\"", ",", "\"Result\"", "]", ",", "\n", "tablefmt", "=", "\"orgtbl\"", ",", "\n", ")", "\n", ")", "\n", "\n", "print", "(", "\"Best model:\"", ",", "args", ".", "load_model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.allenai_savn.None.main_eval.main_eval": [[19, 93], ["numpy.random.seed", "torch.manual_seed", "torch.manual_seed", "random.seed", "torch.Queue", "utils.net_util.ScalarMeanTracker", "len", "tqdm.tqdm", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.Process", "mp.Process.start", "processes.append", "time.sleep", "utils.net_util.ScalarMeanTracker.pop_and_reset", "open", "json.dump", "torch.set_start_method", "mp.Queue.get", "tqdm.tqdm.update", "utils.net_util.ScalarMeanTracker.add_scalars", "time.sleep", "mp.Process.join"], "function", ["home.repos.pwc.inspect_result.allenai_savn.datasets.environment.Environment.start", "home.repos.pwc.inspect_result.allenai_savn.utils.net_util.ScalarMeanTracker.pop_and_reset", "home.repos.pwc.inspect_result.allenai_savn.utils.net_util.ScalarMeanTracker.add_scalars"], ["def", "main_eval", "(", "args", ",", "create_shared_model", ",", "init_agent", ")", ":", "\n", "    ", "np", ".", "random", ".", "seed", "(", "args", ".", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "random", ".", "seed", "(", "args", ".", "seed", ")", "\n", "\n", "if", "args", ".", "gpu_ids", "==", "-", "1", ":", "\n", "        ", "args", ".", "gpu_ids", "=", "[", "-", "1", "]", "\n", "", "else", ":", "\n", "        ", "torch", ".", "cuda", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "try", ":", "\n", "            ", "mp", ".", "set_start_method", "(", "\"spawn\"", ")", "\n", "", "except", "RuntimeError", ":", "\n", "            ", "pass", "\n", "\n", "", "", "model_to_open", "=", "args", ".", "load_model", "\n", "\n", "processes", "=", "[", "]", "\n", "\n", "res_queue", "=", "mp", ".", "Queue", "(", ")", "\n", "if", "args", ".", "model", "==", "\"BaseModel\"", "or", "args", ".", "model", "==", "\"GCN\"", ":", "\n", "        ", "args", ".", "learned_loss", "=", "False", "\n", "args", ".", "num_steps", "=", "50", "\n", "target", "=", "nonadaptivea3c_val", "\n", "", "else", ":", "\n", "        ", "args", ".", "learned_loss", "=", "True", "\n", "args", ".", "num_steps", "=", "6", "\n", "target", "=", "savn_val", "\n", "\n", "", "rank", "=", "0", "\n", "for", "scene_type", "in", "args", ".", "scene_types", ":", "\n", "        ", "p", "=", "mp", ".", "Process", "(", "\n", "target", "=", "target", ",", "\n", "args", "=", "(", "\n", "rank", ",", "\n", "args", ",", "\n", "model_to_open", ",", "\n", "create_shared_model", ",", "\n", "init_agent", ",", "\n", "res_queue", ",", "\n", "250", ",", "\n", "scene_type", ",", "\n", ")", ",", "\n", ")", "\n", "p", ".", "start", "(", ")", "\n", "processes", ".", "append", "(", "p", ")", "\n", "time", ".", "sleep", "(", "0.1", ")", "\n", "rank", "+=", "1", "\n", "\n", "", "count", "=", "0", "\n", "end_count", "=", "0", "\n", "train_scalars", "=", "ScalarMeanTracker", "(", ")", "\n", "\n", "proc", "=", "len", "(", "args", ".", "scene_types", ")", "\n", "pbar", "=", "tqdm", "(", "total", "=", "250", "*", "proc", ")", "\n", "\n", "try", ":", "\n", "        ", "while", "end_count", "<", "proc", ":", "\n", "            ", "train_result", "=", "res_queue", ".", "get", "(", ")", "\n", "pbar", ".", "update", "(", "1", ")", "\n", "count", "+=", "1", "\n", "if", "\"END\"", "in", "train_result", ":", "\n", "                ", "end_count", "+=", "1", "\n", "continue", "\n", "", "train_scalars", ".", "add_scalars", "(", "train_result", ")", "\n", "\n", "", "tracked_means", "=", "train_scalars", ".", "pop_and_reset", "(", ")", "\n", "\n", "", "finally", ":", "\n", "        ", "for", "p", "in", "processes", ":", "\n", "            ", "time", ".", "sleep", "(", "0.1", ")", "\n", "p", ".", "join", "(", ")", "\n", "\n", "", "", "with", "open", "(", "args", ".", "results_json", ",", "\"w\"", ")", "as", "fp", ":", "\n", "        ", "json", ".", "dump", "(", "tracked_means", ",", "fp", ",", "sort_keys", "=", "True", ",", "indent", "=", "4", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.allenai_savn.utils.action_util.get_actions": [[11, 14], ["None"], "function", ["None"], ["def", "get_actions", "(", "args", ")", ":", "\n", "    ", "assert", "args", ".", "action_space", "==", "6", ",", "\"Expected 6 possible actions.\"", "\n", "return", "[", "MOVE_AHEAD", ",", "ROTATE_LEFT", ",", "ROTATE_RIGHT", ",", "LOOK_UP", ",", "LOOK_DOWN", ",", "DONE", "]", "\n", "", ""]], "home.repos.pwc.inspect_result.allenai_savn.utils.misc_util.ForkedPdb.interaction": [[64, 71], ["open", "pdb.Pdb.interaction"], "methods", ["home.repos.pwc.inspect_result.allenai_savn.utils.misc_util.ForkedPdb.interaction"], ["def", "interaction", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "_stdin", "=", "sys", ".", "stdin", "\n", "try", ":", "\n", "            ", "sys", ".", "stdin", "=", "open", "(", "'/dev/stdin'", ")", "\n", "pdb", ".", "Pdb", ".", "interaction", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "", "finally", ":", "\n", "            ", "sys", ".", "stdin", "=", "_stdin", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.allenai_savn.utils.misc_util.setup_logger": [[13, 27], ["logging.getLogger", "logging.Formatter", "logging.FileHandler", "logging.FileHandler.setFormatter", "logging.StreamHandler", "logging.StreamHandler.setFormatter", "logging.getLogger.setLevel", "logging.getLogger.addHandler", "logging.getLogger.addHandler", "os.path.exists", "os.makedirs", "log_file.split"], "function", ["None"], ["def", "setup_logger", "(", "logger_name", ",", "log_file", ",", "level", "=", "logging", ".", "INFO", ")", ":", "\n", "    ", "l", "=", "logging", ".", "getLogger", "(", "logger_name", ")", "\n", "formatter", "=", "logging", ".", "Formatter", "(", "'%(asctime)s : %(message)s'", ")", "\n", "dir", "=", "\"/\"", ".", "join", "(", "log_file", ".", "split", "(", "\"/\"", ")", "[", ":", "-", "1", "]", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "dir", ")", "\n", "", "fileHandler", "=", "logging", ".", "FileHandler", "(", "log_file", ",", "mode", "=", "'w'", ")", "\n", "fileHandler", ".", "setFormatter", "(", "formatter", ")", "\n", "streamHandler", "=", "logging", ".", "StreamHandler", "(", ")", "\n", "streamHandler", ".", "setFormatter", "(", "formatter", ")", "\n", "\n", "l", ".", "setLevel", "(", "level", ")", "\n", "l", ".", "addHandler", "(", "fileHandler", ")", "\n", "l", ".", "addHandler", "(", "streamHandler", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.allenai_savn.utils.misc_util.read_config": [[29, 33], ["json.load", "open"], "function", ["None"], ["", "def", "read_config", "(", "file_path", ")", ":", "\n", "    ", "\"\"\"Read JSON config.\"\"\"", "\n", "json_object", "=", "json", ".", "load", "(", "open", "(", "file_path", ",", "'r'", ")", ")", "\n", "return", "json_object", "\n", "\n"]], "home.repos.pwc.inspect_result.allenai_savn.utils.misc_util.norm_col_init": [[35, 39], ["torch.randn", "weights.size", "torch.sqrt"], "function", ["None"], ["", "def", "norm_col_init", "(", "weights", ",", "std", "=", "1.0", ")", ":", "\n", "    ", "x", "=", "torch", ".", "randn", "(", "weights", ".", "size", "(", ")", ")", "\n", "x", "*=", "std", "/", "torch", ".", "sqrt", "(", "(", "x", "**", "2", ")", ".", "sum", "(", "1", ",", "keepdim", "=", "True", ")", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.allenai_savn.utils.misc_util.weights_init": [[41, 57], ["classname.find", "list", "numpy.prod", "numpy.sqrt", "m.weight.data.uniform_", "m.bias.data.fill_", "m.weight.data.size", "numpy.prod", "classname.find", "list", "numpy.sqrt", "m.weight.data.uniform_", "m.bias.data.fill_", "m.weight.data.size"], "function", ["None"], ["", "def", "weights_init", "(", "m", ")", ":", "\n", "    ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "if", "classname", ".", "find", "(", "'Conv'", ")", "!=", "-", "1", ":", "\n", "        ", "weight_shape", "=", "list", "(", "m", ".", "weight", ".", "data", ".", "size", "(", ")", ")", "\n", "fan_in", "=", "np", ".", "prod", "(", "weight_shape", "[", "1", ":", "4", "]", ")", "\n", "fan_out", "=", "np", ".", "prod", "(", "weight_shape", "[", "2", ":", "4", "]", ")", "*", "weight_shape", "[", "0", "]", "\n", "w_bound", "=", "np", ".", "sqrt", "(", "6.", "/", "(", "fan_in", "+", "fan_out", ")", ")", "\n", "m", ".", "weight", ".", "data", ".", "uniform_", "(", "-", "w_bound", ",", "w_bound", ")", "\n", "m", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "", "elif", "classname", ".", "find", "(", "'Linear'", ")", "!=", "-", "1", ":", "\n", "        ", "weight_shape", "=", "list", "(", "m", ".", "weight", ".", "data", ".", "size", "(", ")", ")", "\n", "fan_in", "=", "weight_shape", "[", "1", "]", "\n", "fan_out", "=", "weight_shape", "[", "0", "]", "\n", "w_bound", "=", "np", ".", "sqrt", "(", "6.", "/", "(", "fan_in", "+", "fan_out", ")", ")", "\n", "m", ".", "weight", ".", "data", ".", "uniform_", "(", "-", "w_bound", ",", "w_bound", ")", "\n", "m", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.allenai_savn.utils.flag_parser.parse_arguments": [[4, 276], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.set_defaults", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["None"], ["def", "parse_arguments", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "\"SAVN.\"", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--lr\"", ",", "\n", "type", "=", "float", ",", "\n", "default", "=", "0.0001", ",", "\n", "metavar", "=", "\"LR\"", ",", "\n", "help", "=", "\"learning rate (default: 0.0001)\"", ",", "\n", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\n", "\"--inner_lr\"", ",", "\n", "type", "=", "float", ",", "\n", "default", "=", "0.0001", ",", "\n", "metavar", "=", "\"ILR\"", ",", "\n", "help", "=", "\"learning rate (default: 0.01)\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--gamma\"", ",", "\n", "type", "=", "float", ",", "\n", "default", "=", "0.99", ",", "\n", "metavar", "=", "\"G\"", ",", "\n", "help", "=", "\"discount factor for rewards (default: 0.99)\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--tau\"", ",", "\n", "type", "=", "float", ",", "\n", "default", "=", "1.00", ",", "\n", "metavar", "=", "\"T\"", ",", "\n", "help", "=", "\"parameter for GAE (default: 1.00)\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--beta\"", ",", "type", "=", "float", ",", "default", "=", "1e-2", ",", "help", "=", "\"entropy regularization term\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--seed\"", ",", "type", "=", "int", ",", "default", "=", "1", ",", "metavar", "=", "\"S\"", ",", "help", "=", "\"random seed (default: 1)\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--workers\"", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "4", ",", "\n", "metavar", "=", "\"W\"", ",", "\n", "help", "=", "\"how many training processes to use (default: 4)\"", ",", "\n", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\n", "\"--max-episode-length\"", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "30", ",", "\n", "metavar", "=", "\"M\"", ",", "\n", "help", "=", "\"maximum length of an episode (default: 100)\"", ",", "\n", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\n", "\"--meta_train_episodes\"", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "1", ",", "\n", "help", "=", "\"how many meta-train episodes.\"", ",", "\n", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\n", "\"--meta_test_episodes\"", ",", "type", "=", "int", ",", "default", "=", "1", ",", "help", "=", "\"how many meta-test episodes\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--shared-optimizer\"", ",", "\n", "default", "=", "True", ",", "\n", "metavar", "=", "\"SO\"", ",", "\n", "help", "=", "\"use an optimizer with shared statistics.\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--load_model\"", ",", "type", "=", "str", ",", "default", "=", "\"\"", ",", "help", "=", "\"Path to load a saved model.\"", "\n", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\n", "\"--ep_save_freq\"", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "1e5", ",", "\n", "help", "=", "\"save model after this # of training episodes (default: 1e+4)\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--optimizer\"", ",", "\n", "default", "=", "\"SharedAdam\"", ",", "\n", "metavar", "=", "\"OPT\"", ",", "\n", "help", "=", "\"shared optimizer choice of SharedAdam or SharedRMSprop\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--save-model-dir\"", ",", "\n", "default", "=", "\"trained_models/\"", ",", "\n", "metavar", "=", "\"SMD\"", ",", "\n", "help", "=", "\"folder to save trained navigation\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--log-dir\"", ",", "default", "=", "\"runs/\"", ",", "metavar", "=", "\"LG\"", ",", "help", "=", "\"folder to save logs\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--gpu-ids\"", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "-", "1", ",", "\n", "nargs", "=", "\"+\"", ",", "\n", "help", "=", "\"GPUs to use [-1 CPU only] (default: -1)\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--amsgrad\"", ",", "default", "=", "True", ",", "metavar", "=", "\"AM\"", ",", "help", "=", "\"Adam optimizer amsgrad parameter\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--grid_size\"", ",", "\n", "type", "=", "float", ",", "\n", "default", "=", "0.25", ",", "\n", "metavar", "=", "\"GS\"", ",", "\n", "help", "=", "\"The grid size used to discretize AI2-THOR maps.\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--docker_enabled\"", ",", "action", "=", "\"store_true\"", ",", "help", "=", "\"Whether or not to use docker.\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--x_display\"", ",", "type", "=", "str", ",", "default", "=", "None", ",", "help", "=", "\"The X display to target, if any.\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--test_timeout\"", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "10", ",", "\n", "help", "=", "\"The length of time to wait in between test runs.\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--verbose\"", ",", "\n", "type", "=", "bool", ",", "\n", "default", "=", "False", ",", "\n", "help", "=", "\"If true, output will contain more information.\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--max_ep\"", ",", "type", "=", "float", ",", "default", "=", "6000000", ",", "help", "=", "\"maximum # of episodes\"", "\n", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\"--model\"", ",", "type", "=", "str", ",", "default", "=", "\"BaseModel\"", ",", "help", "=", "\"Model to use.\"", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\n", "\"--train_thin\"", ",", "type", "=", "int", ",", "default", "=", "1000", ",", "help", "=", "\"How often to print\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--local_executable_path\"", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "None", ",", "\n", "help", "=", "\"a path to the local thor build.\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--hindsight_replay\"", ",", "\n", "type", "=", "bool", ",", "\n", "default", "=", "False", ",", "\n", "help", "=", "\"whether or not to use hindsight replay.\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--enable_test_agent\"", ",", "\n", "action", "=", "\"store_true\"", ",", "\n", "help", "=", "\"Whether or not to have a test agent.\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--title\"", ",", "type", "=", "str", ",", "default", "=", "\"default_title\"", ",", "help", "=", "\"Info for logging.\"", "\n", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\n", "\"--train_scenes\"", ",", "type", "=", "str", ",", "default", "=", "\"[1-20]\"", ",", "help", "=", "\"scenes for training.\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--val_scenes\"", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "\"[21-30]\"", ",", "\n", "help", "=", "\"old validation scenes before formal split.\"", ",", "\n", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\n", "\"--possible_targets\"", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "\"FULL_OBJECT_CLASS_LIST\"", ",", "\n", "help", "=", "\"all possible objects.\"", ",", "\n", ")", "\n", "# if none use all dest objects", "\n", "parser", ".", "add_argument", "(", "\n", "\"--train_targets\"", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "None", ",", "\n", "help", "=", "\"specific objects for this experiment from the object list.\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--glove_dim\"", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "300", ",", "\n", "help", "=", "\"which dimension of the glove vector to use\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--action_space\"", ",", "type", "=", "int", ",", "default", "=", "6", ",", "help", "=", "\"space of possible actions.\"", "\n", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\n", "\"--hidden_state_sz\"", ",", "type", "=", "int", ",", "default", "=", "512", ",", "help", "=", "\"size of hidden state of LSTM.\"", "\n", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\"--compute_spl\"", ",", "action", "=", "\"store_true\"", ",", "help", "=", "\"compute the spl.\"", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\"--eval\"", ",", "action", "=", "\"store_true\"", ",", "help", "=", "\"run the test code\"", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\n", "\"--offline_data_dir\"", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "\"./data/thor_offline_data\"", ",", "\n", "help", "=", "\"where dataset is stored.\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--glove_dir\"", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "\"./data/thor_glove\"", ",", "\n", "help", "=", "\"where the glove files are stored.\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--images_file_name\"", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "\"resnet18_featuremap.hdf5\"", ",", "\n", "help", "=", "\"Where the controller looks for images. Can be switched out to real images or Resnet features.\"", ",", "\n", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\n", "\"--disable-strict_done\"", ",", "dest", "=", "\"strict_done\"", ",", "action", "=", "\"store_false\"", "\n", ")", "\n", "parser", ".", "set_defaults", "(", "strict_done", "=", "True", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\n", "\"--results_json\"", ",", "type", "=", "str", ",", "default", "=", "\"metrics.json\"", ",", "help", "=", "\"Write the results.\"", "\n", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\n", "\"--agent_type\"", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "\"NavigationAgent\"", ",", "\n", "help", "=", "\"Which type of agent. Choices are NavigationAgent or RandomAgent.\"", ",", "\n", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\n", "\"--episode_type\"", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "\"BasicEpisode\"", ",", "\n", "help", "=", "\"Which type of agent. Choices are NavigationAgent or RandomAgent.\"", ",", "\n", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\n", "\"--fov\"", ",", "type", "=", "float", ",", "default", "=", "100.0", ",", "help", "=", "\"The field of view to use.\"", "\n", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\n", "\"--dropout_rate\"", ",", "\n", "type", "=", "float", ",", "\n", "default", "=", "0.25", ",", "\n", "help", "=", "\"The dropout ratio to use (default is no dropout).\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--scene_types\"", ",", "\n", "nargs", "=", "\"+\"", ",", "\n", "default", "=", "[", "\"kitchen\"", ",", "\"living_room\"", ",", "\"bedroom\"", ",", "\"bathroom\"", "]", ",", "\n", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\n", "\"--gradient_limit\"", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "4", ",", "\n", "help", "=", "\"How many gradient steps allowed for MAML.\"", ",", "\n", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\"--test_or_val\"", ",", "default", "=", "\"val\"", ",", "help", "=", "\"test or val\"", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "args", ".", "glove_file", "=", "\"{}/glove_map{}d.hdf5\"", ".", "format", "(", "args", ".", "glove_dir", ",", "args", ".", "glove_dim", ")", "\n", "\n", "return", "args", "\n", "", ""]], "home.repos.pwc.inspect_result.allenai_savn.utils.class_finder.model_class": [[7, 12], ["getattr", "argparse.ArgumentTypeError"], "function", ["None"], ["def", "model_class", "(", "class_name", ")", ":", "\n", "    ", "if", "class_name", "not", "in", "models", ".", "__all__", ":", "\n", "       ", "raise", "argparse", ".", "ArgumentTypeError", "(", "\"Invalid model {}; choices: {}\"", ".", "format", "(", "\n", "class_name", ",", "models", ".", "__all__", ")", ")", "\n", "", "return", "getattr", "(", "models", ",", "class_name", ")", "\n", "", "def", "agent_class", "(", "class_name", ")", ":", "\n"]], "home.repos.pwc.inspect_result.allenai_savn.utils.class_finder.agent_class": [[12, 17], ["getattr", "argparse.ArgumentTypeError"], "function", ["None"], ["", "def", "agent_class", "(", "class_name", ")", ":", "\n", "    ", "if", "class_name", "not", "in", "agents", ".", "__all__", ":", "\n", "       ", "raise", "argparse", ".", "ArgumentTypeError", "(", "\"Invalid agent {}; choices: {}\"", ".", "format", "(", "\n", "class_name", ",", "agents", ".", "__all__", ")", ")", "\n", "", "return", "getattr", "(", "agents", ",", "class_name", ")", "\n", "", "def", "episode_class", "(", "class_name", ")", ":", "\n"]], "home.repos.pwc.inspect_result.allenai_savn.utils.class_finder.episode_class": [[17, 22], ["getattr", "argparse.ArgumentTypeError"], "function", ["None"], ["", "def", "episode_class", "(", "class_name", ")", ":", "\n", "    ", "if", "class_name", "not", "in", "episodes", ".", "__all__", ":", "\n", "       ", "raise", "argparse", ".", "ArgumentTypeError", "(", "\"Invalid episodes {}; choices: {}\"", ".", "format", "(", "\n", "class_name", ",", "episodes", ".", "__all__", ")", ")", "\n", "", "return", "getattr", "(", "episodes", ",", "class_name", ")", "\n", "", "def", "optimizer_class", "(", "class_name", ")", ":", "\n"]], "home.repos.pwc.inspect_result.allenai_savn.utils.class_finder.optimizer_class": [[22, 27], ["getattr", "argparse.ArgumentTypeError"], "function", ["None"], ["", "def", "optimizer_class", "(", "class_name", ")", ":", "\n", "    ", "if", "class_name", "not", "in", "optimizers", ".", "__all__", ":", "\n", "       ", "raise", "argparse", ".", "ArgumentTypeError", "(", "\"Invalid optimizer {}; choices: {}\"", ".", "format", "(", "\n", "class_name", ",", "optimizers", ".", "__all__", ")", ")", "\n", "", "return", "getattr", "(", "optimizers", ",", "class_name", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.allenai_savn.utils.net_util.ScaleBothSides.__init__": [[67, 70], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "size", ",", "interpolation", "=", "Image", ".", "BILINEAR", ")", ":", "\n", "        ", "self", ".", "size", "=", "size", "\n", "self", ".", "interpolation", "=", "interpolation", "\n", "\n"]], "home.repos.pwc.inspect_result.allenai_savn.utils.net_util.ScaleBothSides.__call__": [[71, 73], ["img.resize"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "return", "img", ".", "resize", "(", "(", "self", ".", "size", ",", "self", ".", "size", ")", ",", "self", ".", "interpolation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.allenai_savn.utils.net_util.ScalarMeanTracker.__init__": [[76, 79], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", "->", "None", ":", "\n", "        ", "self", ".", "_sums", "=", "{", "}", "\n", "self", ".", "_counts", "=", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.allenai_savn.utils.net_util.ScalarMeanTracker.add_scalars": [[80, 88], ["None"], "methods", ["None"], ["", "def", "add_scalars", "(", "self", ",", "scalars", ")", ":", "\n", "        ", "for", "k", "in", "scalars", ":", "\n", "            ", "if", "k", "not", "in", "self", ".", "_sums", ":", "\n", "                ", "self", ".", "_sums", "[", "k", "]", "=", "scalars", "[", "k", "]", "\n", "self", ".", "_counts", "[", "k", "]", "=", "1", "\n", "", "else", ":", "\n", "                ", "self", ".", "_sums", "[", "k", "]", "+=", "scalars", "[", "k", "]", "\n", "self", ".", "_counts", "[", "k", "]", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.allenai_savn.utils.net_util.ScalarMeanTracker.pop_and_reset": [[89, 94], ["None"], "methods", ["None"], ["", "", "", "def", "pop_and_reset", "(", "self", ")", ":", "\n", "        ", "means", "=", "{", "k", ":", "self", ".", "_sums", "[", "k", "]", "/", "self", ".", "_counts", "[", "k", "]", "for", "k", "in", "self", ".", "_sums", "}", "\n", "self", ".", "_sums", "=", "{", "}", "\n", "self", ".", "_counts", "=", "{", "}", "\n", "return", "means", "\n", "", "", ""]], "home.repos.pwc.inspect_result.allenai_savn.utils.net_util.gpuify": [[9, 14], ["torch.cuda.device", "tensor.cuda.cuda"], "function", ["None"], ["def", "gpuify", "(", "tensor", ",", "gpu_id", ")", ":", "\n", "    ", "if", "gpu_id", ">=", "0", ":", "\n", "        ", "with", "torch", ".", "cuda", ".", "device", "(", "gpu_id", ")", ":", "\n", "            ", "tensor", "=", "tensor", ".", "cuda", "(", ")", "\n", "", "", "return", "tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.allenai_savn.utils.net_util.toFloatTensor": [[15, 18], ["net_util.gpuify", "torch.FloatTensor"], "function", ["home.repos.pwc.inspect_result.allenai_savn.utils.net_util.gpuify"], ["", "def", "toFloatTensor", "(", "x", ",", "gpu_id", ")", ":", "\n", "    ", "\"\"\" Convers x to a FloatTensor and puts on GPU. \"\"\"", "\n", "return", "gpuify", "(", "torch", ".", "FloatTensor", "(", "x", ")", ",", "gpu_id", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.allenai_savn.utils.net_util.resnet_input_transform": [[19, 34], ["torchvision.transforms.Normalize", "torchvision.transforms.Compose", "transforms.Compose.", "torchvision.transforms.ToPILImage", "net_util.ScaleBothSides", "torchvision.transforms.ToTensor"], "function", ["None"], ["", "def", "resnet_input_transform", "(", "input_image", ",", "im_size", ")", ":", "\n", "    ", "\"\"\"Takes in numpy ndarray of size (H, W, 3) and transforms into tensor for\n       resnet input.\n    \"\"\"", "\n", "normalize", "=", "transforms", ".", "Normalize", "(", "\n", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", "\n", "# mean=[0, 0, 0], std=[1, 1, 1])", "\n", "all_transforms", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToPILImage", "(", ")", ",", "\n", "ScaleBothSides", "(", "im_size", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", ",", "\n", "]", ")", "\n", "transformed_image", "=", "all_transforms", "(", "input_image", ")", "\n", "return", "transformed_image", "\n", "\n"]], "home.repos.pwc.inspect_result.allenai_savn.utils.net_util.norm_col_init": [[36, 40], ["torch.randn", "weights.size", "torch.sqrt"], "function", ["None"], ["", "def", "norm_col_init", "(", "weights", ",", "std", "=", "1.0", ")", ":", "\n", "    ", "x", "=", "torch", ".", "randn", "(", "weights", ".", "size", "(", ")", ")", "\n", "x", "*=", "std", "/", "torch", ".", "sqrt", "(", "(", "x", "**", "2", ")", ".", "sum", "(", "1", ",", "keepdim", "=", "True", ")", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.allenai_savn.utils.net_util.weights_init": [[42, 58], ["classname.find", "list", "numpy.prod", "numpy.sqrt", "m.weight.data.uniform_", "m.bias.data.fill_", "m.weight.data.size", "numpy.prod", "classname.find", "list", "numpy.sqrt", "m.weight.data.uniform_", "m.bias.data.fill_", "m.weight.data.size"], "function", ["None"], ["", "def", "weights_init", "(", "m", ")", ":", "\n", "    ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "if", "classname", ".", "find", "(", "'Conv'", ")", "!=", "-", "1", ":", "\n", "        ", "weight_shape", "=", "list", "(", "m", ".", "weight", ".", "data", ".", "size", "(", ")", ")", "\n", "fan_in", "=", "np", ".", "prod", "(", "weight_shape", "[", "1", ":", "4", "]", ")", "\n", "fan_out", "=", "np", ".", "prod", "(", "weight_shape", "[", "2", ":", "4", "]", ")", "*", "weight_shape", "[", "0", "]", "\n", "w_bound", "=", "np", ".", "sqrt", "(", "6.", "/", "(", "fan_in", "+", "fan_out", ")", ")", "\n", "m", ".", "weight", ".", "data", ".", "uniform_", "(", "-", "w_bound", ",", "w_bound", ")", "\n", "m", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "", "elif", "classname", ".", "find", "(", "'Linear'", ")", "!=", "-", "1", ":", "\n", "        ", "weight_shape", "=", "list", "(", "m", ".", "weight", ".", "data", ".", "size", "(", ")", ")", "\n", "fan_in", "=", "weight_shape", "[", "1", "]", "\n", "fan_out", "=", "weight_shape", "[", "0", "]", "\n", "w_bound", "=", "np", ".", "sqrt", "(", "6.", "/", "(", "fan_in", "+", "fan_out", ")", ")", "\n", "m", ".", "weight", ".", "data", ".", "uniform_", "(", "-", "w_bound", ",", "w_bound", ")", "\n", "m", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.allenai_savn.datasets.offline_controller_with_small_rotation.ThorAgentState.__init__": [[24, 30], ["round", "round", "round", "round"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "x", ",", "y", ",", "z", ",", "rotation", ",", "horizon", ")", ":", "\n", "        ", "self", ".", "x", "=", "round", "(", "x", ",", "2", ")", "\n", "self", ".", "y", "=", "y", "\n", "self", ".", "z", "=", "round", "(", "z", ",", "2", ")", "\n", "self", ".", "rotation", "=", "round", "(", "rotation", ")", "\n", "self", ".", "horizon", "=", "round", "(", "horizon", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.allenai_savn.datasets.offline_controller_with_small_rotation.ThorAgentState.get_state_from_evenet": [[31, 44], ["cls"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "get_state_from_evenet", "(", "cls", ",", "event", ",", "forced_y", "=", "None", ")", ":", "\n", "        ", "\"\"\" Extracts a state from an event. \"\"\"", "\n", "state", "=", "cls", "(", "\n", "x", "=", "event", ".", "metadata", "[", "\"agent\"", "]", "[", "\"position\"", "]", "[", "\"x\"", "]", ",", "\n", "y", "=", "event", ".", "metadata", "[", "\"agent\"", "]", "[", "\"position\"", "]", "[", "\"y\"", "]", ",", "\n", "z", "=", "event", ".", "metadata", "[", "\"agent\"", "]", "[", "\"position\"", "]", "[", "\"z\"", "]", ",", "\n", "rotation", "=", "event", ".", "metadata", "[", "\"agent\"", "]", "[", "\"rotation\"", "]", "[", "\"y\"", "]", ",", "\n", "horizon", "=", "event", ".", "metadata", "[", "\"agent\"", "]", "[", "\"cameraHorizon\"", "]", ",", "\n", ")", "\n", "if", "forced_y", "!=", "None", ":", "\n", "            ", "state", ".", "y", "=", "forced_y", "\n", "", "return", "state", "\n", "\n"]], "home.repos.pwc.inspect_result.allenai_savn.datasets.offline_controller_with_small_rotation.ThorAgentState.__eq__": [[45, 58], ["isinstance"], "methods", ["None"], ["", "def", "__eq__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\" If we check for exact equality then we get issues.\n            For now we consider this 'close enough'. \"\"\"", "\n", "if", "isinstance", "(", "other", ",", "ThorAgentState", ")", ":", "\n", "            ", "return", "(", "\n", "self", ".", "x", "==", "other", ".", "x", "\n", "and", "\n", "# self.y == other.y and", "\n", "self", ".", "z", "==", "other", ".", "z", "\n", "and", "self", ".", "rotation", "==", "other", ".", "rotation", "\n", "and", "self", ".", "horizon", "==", "other", ".", "horizon", "\n", ")", "\n", "", "return", "NotImplemented", "\n", "\n"]], "home.repos.pwc.inspect_result.allenai_savn.datasets.offline_controller_with_small_rotation.ThorAgentState.__str__": [[59, 72], ["round", "round"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "\"\"\" Get the string representation of a state. \"\"\"", "\n", "\"\"\"\n        return '{:0.2f}|{:0.2f}|{:0.2f}|{:d}|{:d}'.format(\n            self.x,\n            self.y,\n            self.z,\n            round(self.rotation),\n            round(self.horizon)\n        )\n        \"\"\"", "\n", "return", "\"{:0.2f}|{:0.2f}|{:d}|{:d}\"", ".", "format", "(", "\n", "self", ".", "x", ",", "self", ".", "z", ",", "round", "(", "self", ".", "rotation", ")", ",", "round", "(", "self", ".", "horizon", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.allenai_savn.datasets.offline_controller_with_small_rotation.ThorAgentState.position": [[74, 77], ["dict"], "methods", ["None"], ["", "def", "position", "(", "self", ")", ":", "\n", "        ", "\"\"\" Returns just the position. \"\"\"", "\n", "return", "dict", "(", "x", "=", "self", ".", "x", ",", "y", "=", "self", ".", "y", ",", "z", "=", "self", ".", "z", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.allenai_savn.datasets.offline_controller_with_small_rotation.ExhaustiveBFSController.__init__": [[90, 184], ["ai2thor.controller.Controller.__init__", "collections.deque", "nx.DiGraph", "h5py.File", "h5py.File", "h5py.File"], "methods", ["home.repos.pwc.inspect_result.allenai_savn.episodes.test_val_episode.TestValEpisode.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "grid_size", "=", "0.25", ",", "\n", "fov", "=", "90.0", ",", "\n", "grid_file", "=", "None", ",", "\n", "graph_file", "=", "None", ",", "\n", "metadata_file", "=", "None", ",", "\n", "images_file", "=", "None", ",", "\n", "seg_file", "=", "None", ",", "\n", "class_file", "=", "None", ",", "\n", "depth_file", "=", "None", ",", "\n", "debug_mode", "=", "True", ",", "\n", "grid_assumption", "=", "False", ",", "\n", "local_executable_path", "=", "None", ",", "\n", "actions", "=", "[", "\"MoveAhead\"", ",", "\"RotateLeft\"", ",", "\"RotateRight\"", ",", "\"LookUp\"", ",", "\"LookDown\"", "]", ",", "\n", ")", ":", "\n", "\n", "        ", "super", "(", "ExhaustiveBFSController", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# Allowed rotations.", "\n", "self", ".", "rotations", "=", "[", "0", ",", "45", ",", "90", ",", "135", ",", "180", ",", "225", ",", "270", ",", "315", "]", "\n", "# Allowed horizons.", "\n", "self", ".", "horizons", "=", "[", "0", ",", "30", "]", "\n", "\n", "self", ".", "allow_enqueue", "=", "True", "\n", "self", ".", "queue", "=", "deque", "(", ")", "\n", "self", ".", "seen_points", "=", "[", "]", "\n", "self", ".", "grid_points", "=", "[", "]", "\n", "self", ".", "seen_states", "=", "[", "]", "\n", "self", ".", "bad_seen_states", "=", "[", "]", "\n", "self", ".", "visited_seen_states", "=", "[", "]", "\n", "self", ".", "grid_states", "=", "[", "]", "\n", "self", ".", "grid_size", "=", "grid_size", "\n", "self", ".", "_check_visited", "=", "False", "\n", "self", ".", "scene_name", "=", "None", "\n", "self", ".", "fov", "=", "fov", "\n", "self", ".", "y", "=", "None", "\n", "\n", "self", ".", "local_executable_path", "=", "local_executable_path", "\n", "\n", "# distance_threshold to be consistent with BFSController in generating grid.", "\n", "self", ".", "distance_threshold", "=", "self", ".", "grid_size", "/", "5.0", "\n", "self", ".", "debug_mode", "=", "debug_mode", "\n", "self", ".", "actions", "=", "actions", "\n", "self", ".", "grid_assumption", "=", "grid_assumption", "\n", "\n", "self", ".", "grid_file", "=", "grid_file", "\n", "self", ".", "metadata_file", "=", "metadata_file", "\n", "self", ".", "graph_file", "=", "graph_file", "\n", "self", ".", "images_file", "=", "images_file", "\n", "self", ".", "seg_file", "=", "seg_file", "\n", "self", ".", "class_file", "=", "class_file", "\n", "self", ".", "depth_file", "=", "depth_file", "\n", "\n", "# Optionally make a gird (including x,y,z points that are reachable)", "\n", "self", ".", "make_grid", "=", "grid_file", "is", "not", "None", "\n", "\n", "# Optionally store the metadata of each state.", "\n", "self", ".", "make_metadata", "=", "metadata_file", "is", "not", "None", "\n", "\n", "# Optionally make a directed of (s,t) where exists a in self.actions", "\n", "# such that t is reachable via s via a.", "\n", "self", ".", "make_graph", "=", "graph_file", "is", "not", "None", "\n", "\n", "# Optionally store an hdf5 file which contains the frame for each state.", "\n", "self", ".", "make_images", "=", "images_file", "is", "not", "None", "\n", "\n", "self", ".", "make_seg", "=", "seg_file", "is", "not", "None", "\n", "self", ".", "make_class", "=", "class_file", "is", "not", "None", "\n", "\n", "self", ".", "make_depth", "=", "self", ".", "depth_file", "is", "not", "None", "\n", "\n", "self", ".", "metadata", "=", "{", "}", "\n", "self", ".", "classdata", "=", "{", "}", "\n", "\n", "self", ".", "graph", "=", "None", "\n", "if", "self", ".", "make_graph", ":", "\n", "            ", "import", "networkx", "as", "nx", "\n", "\n", "self", ".", "graph", "=", "nx", ".", "DiGraph", "(", ")", "\n", "\n", "", "if", "self", ".", "make_images", ":", "\n", "            ", "import", "h5py", "\n", "\n", "self", ".", "images", "=", "h5py", ".", "File", "(", "self", ".", "images_file", ",", "\"w\"", ")", "\n", "\n", "", "if", "self", ".", "make_seg", ":", "\n", "            ", "import", "h5py", "\n", "\n", "self", ".", "seg", "=", "h5py", ".", "File", "(", "self", ".", "seg_file", ",", "\"w\"", ")", "\n", "\n", "", "if", "self", ".", "make_depth", ":", "\n", "            ", "import", "h5py", "\n", "\n", "self", ".", "depth", "=", "h5py", ".", "File", "(", "self", ".", "depth_file", ",", "\"w\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.allenai_savn.datasets.offline_controller_with_small_rotation.ExhaustiveBFSController.safe_teleport": [[185, 235], ["offline_controller_with_small_rotation.ExhaustiveBFSController.step", "offline_controller_with_small_rotation.ExhaustiveBFSController.step", "offline_controller_with_small_rotation.ExhaustiveBFSController.step", "offline_controller_with_small_rotation.ExhaustiveBFSController.step", "offline_controller_with_small_rotation.ExhaustiveBFSController.step", "offline_controller_with_small_rotation.ExhaustiveBFSController.step", "print", "print", "Exception", "dict", "dict", "dict", "offline_controller_with_small_rotation.ExhaustiveBFSController.step", "offline_controller_with_small_rotation.ExhaustiveBFSController.step", "dict", "offline_controller_with_small_rotation.ExhaustiveBFSController.step", "offline_controller_with_small_rotation.ExhaustiveBFSController.step", "dict", "offline_controller_with_small_rotation.ExhaustiveBFSController.step", "offline_controller_with_small_rotation.ExhaustiveBFSController.step", "dict", "offline_controller_with_small_rotation.ExhaustiveBFSController.step", "offline_controller_with_small_rotation.ExhaustiveBFSController.step", "str", "dict", "dict", "dict", "dict", "dict", "dict", "dict", "dict"], "methods", ["home.repos.pwc.inspect_result.allenai_savn.episodes.basic_episode.BasicEpisode.step", "home.repos.pwc.inspect_result.allenai_savn.episodes.basic_episode.BasicEpisode.step", "home.repos.pwc.inspect_result.allenai_savn.episodes.basic_episode.BasicEpisode.step", "home.repos.pwc.inspect_result.allenai_savn.episodes.basic_episode.BasicEpisode.step", "home.repos.pwc.inspect_result.allenai_savn.episodes.basic_episode.BasicEpisode.step", "home.repos.pwc.inspect_result.allenai_savn.episodes.basic_episode.BasicEpisode.step", "home.repos.pwc.inspect_result.allenai_savn.episodes.basic_episode.BasicEpisode.step", "home.repos.pwc.inspect_result.allenai_savn.episodes.basic_episode.BasicEpisode.step", "home.repos.pwc.inspect_result.allenai_savn.episodes.basic_episode.BasicEpisode.step", "home.repos.pwc.inspect_result.allenai_savn.episodes.basic_episode.BasicEpisode.step", "home.repos.pwc.inspect_result.allenai_savn.episodes.basic_episode.BasicEpisode.step", "home.repos.pwc.inspect_result.allenai_savn.episodes.basic_episode.BasicEpisode.step", "home.repos.pwc.inspect_result.allenai_savn.episodes.basic_episode.BasicEpisode.step", "home.repos.pwc.inspect_result.allenai_savn.episodes.basic_episode.BasicEpisode.step"], ["", "", "def", "safe_teleport", "(", "self", ",", "state", ")", ":", "\n", "        ", "\"\"\" Approach a state from all possible directions if the usual teleport fails. \"\"\"", "\n", "self", ".", "step", "(", "dict", "(", "action", "=", "\"Rotate\"", ",", "rotation", "=", "0", ")", ")", "\n", "event", "=", "self", ".", "step", "(", "dict", "(", "action", "=", "\"Teleport\"", ",", "x", "=", "state", ".", "x", ",", "y", "=", "state", ".", "y", ",", "z", "=", "state", ".", "z", ")", ")", "\n", "if", "event", ".", "metadata", "[", "\"lastActionSuccess\"", "]", ":", "\n", "            ", "return", "event", "\n", "\n", "# Approach from the left.", "\n", "", "event", "=", "self", ".", "step", "(", "\n", "dict", "(", "action", "=", "\"Teleport\"", ",", "x", "=", "(", "state", ".", "x", "-", "self", ".", "grid_size", ")", ",", "y", "=", "state", ".", "y", ",", "z", "=", "state", ".", "z", ")", "\n", ")", "\n", "if", "event", ".", "metadata", "[", "\"lastActionSuccess\"", "]", ":", "\n", "            ", "self", ".", "step", "(", "dict", "(", "action", "=", "\"Rotate\"", ",", "rotation", "=", "90", ")", ")", "\n", "event", "=", "self", ".", "step", "(", "dict", "(", "action", "=", "\"MoveAhead\"", ")", ")", "\n", "if", "event", ".", "metadata", "[", "\"lastActionSuccess\"", "]", ":", "\n", "                ", "return", "event", "\n", "\n", "# Approach from the right.", "\n", "", "", "event", "=", "self", ".", "step", "(", "\n", "dict", "(", "action", "=", "\"Teleport\"", ",", "x", "=", "(", "state", ".", "x", "+", "self", ".", "grid_size", ")", ",", "y", "=", "state", ".", "y", ",", "z", "=", "state", ".", "z", ")", "\n", ")", "\n", "if", "event", ".", "metadata", "[", "\"lastActionSuccess\"", "]", ":", "\n", "            ", "self", ".", "step", "(", "dict", "(", "action", "=", "\"Rotate\"", ",", "rotation", "=", "270", ")", ")", "\n", "event", "=", "self", ".", "step", "(", "dict", "(", "action", "=", "\"MoveAhead\"", ")", ")", "\n", "if", "event", ".", "metadata", "[", "\"lastActionSuccess\"", "]", ":", "\n", "                ", "return", "event", "\n", "\n", "# Approach from the back.", "\n", "", "", "event", "=", "self", ".", "step", "(", "\n", "dict", "(", "action", "=", "\"Teleport\"", ",", "x", "=", "state", ".", "x", ",", "y", "=", "state", ".", "y", ",", "z", "=", "state", ".", "z", "-", "self", ".", "grid_size", ")", "\n", ")", "\n", "if", "event", ".", "metadata", "[", "\"lastActionSuccess\"", "]", ":", "\n", "            ", "self", ".", "step", "(", "dict", "(", "action", "=", "\"Rotate\"", ",", "rotation", "=", "0", ")", ")", "\n", "event", "=", "self", ".", "step", "(", "dict", "(", "action", "=", "\"MoveAhead\"", ")", ")", "\n", "if", "event", ".", "metadata", "[", "\"lastActionSuccess\"", "]", ":", "\n", "                ", "return", "event", "\n", "\n", "# Approach from the front.", "\n", "", "", "event", "=", "self", ".", "step", "(", "\n", "dict", "(", "action", "=", "\"Teleport\"", ",", "x", "=", "state", ".", "x", ",", "y", "=", "state", ".", "y", ",", "z", "=", "state", ".", "z", "+", "self", ".", "grid_size", ")", "\n", ")", "\n", "if", "event", ".", "metadata", "[", "\"lastActionSuccess\"", "]", ":", "\n", "            ", "self", ".", "step", "(", "dict", "(", "action", "=", "\"Rotate\"", ",", "rotation", "=", "180", ")", ")", "\n", "event", "=", "self", ".", "step", "(", "dict", "(", "action", "=", "\"MoveAhead\"", ")", ")", "\n", "if", "event", ".", "metadata", "[", "\"lastActionSuccess\"", "]", ":", "\n", "                ", "return", "event", "\n", "\n", "", "", "print", "(", "self", ".", "scene_name", ")", "\n", "print", "(", "str", "(", "state", ")", ")", "\n", "raise", "Exception", "(", "\"Safe Teleport Failed\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.allenai_savn.datasets.offline_controller_with_small_rotation.ExhaustiveBFSController.teleport_to_state": [[236, 253], ["offline_controller_with_small_rotation.ExhaustiveBFSController.safe_teleport", "offline_controller_with_small_rotation.ExhaustiveBFSController.step", "offline_controller_with_small_rotation.ExhaustiveBFSController.step", "dict", "dict", "offline_controller_with_small_rotation.ExhaustiveBFSController.get_state_from_event", "print", "print"], "methods", ["home.repos.pwc.inspect_result.allenai_savn.datasets.offline_controller_with_small_rotation.ExhaustiveBFSController.safe_teleport", "home.repos.pwc.inspect_result.allenai_savn.episodes.basic_episode.BasicEpisode.step", "home.repos.pwc.inspect_result.allenai_savn.episodes.basic_episode.BasicEpisode.step", "home.repos.pwc.inspect_result.allenai_savn.datasets.offline_controller_with_small_rotation.ExhaustiveBFSController.get_state_from_event"], ["", "def", "teleport_to_state", "(", "self", ",", "state", ")", ":", "\n", "        ", "\"\"\" Only use this method when we know the state is valid. \"\"\"", "\n", "event", "=", "self", ".", "safe_teleport", "(", "state", ")", "\n", "assert", "event", ".", "metadata", "[", "\"lastActionSuccess\"", "]", "\n", "event", "=", "self", ".", "step", "(", "dict", "(", "action", "=", "\"Rotate\"", ",", "rotation", "=", "state", ".", "rotation", ")", ")", "\n", "assert", "event", ".", "metadata", "[", "\"lastActionSuccess\"", "]", "\n", "event", "=", "self", ".", "step", "(", "dict", "(", "action", "=", "\"Look\"", ",", "horizon", "=", "state", ".", "horizon", ")", ")", "\n", "assert", "event", ".", "metadata", "[", "\"lastActionSuccess\"", "]", "\n", "\n", "if", "self", ".", "debug_mode", ":", "\n", "# Sanity check that we have teleported to the correct state.", "\n", "            ", "new_state", "=", "self", ".", "get_state_from_event", "(", "event", ")", "\n", "if", "state", "!=", "new_state", ":", "\n", "                ", "print", "(", "state", ")", "\n", "print", "(", "new_state", ")", "\n", "", "assert", "state", "==", "new_state", "\n", "", "return", "event", "\n", "\n"]], "home.repos.pwc.inspect_result.allenai_savn.datasets.offline_controller_with_small_rotation.ExhaustiveBFSController.get_state_from_event": [[254, 256], ["offline_controller_with_small_rotation.ThorAgentState.get_state_from_evenet"], "methods", ["home.repos.pwc.inspect_result.allenai_savn.datasets.offline_controller_with_small_rotation.ThorAgentState.get_state_from_evenet"], ["", "def", "get_state_from_event", "(", "self", ",", "event", ")", ":", "\n", "        ", "return", "ThorAgentState", ".", "get_state_from_evenet", "(", "event", ",", "forced_y", "=", "self", ".", "y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.allenai_savn.datasets.offline_controller_with_small_rotation.ExhaustiveBFSController.get_point_from_event": [[257, 259], ["None"], "methods", ["None"], ["", "def", "get_point_from_event", "(", "self", ",", "event", ")", ":", "\n", "        ", "return", "event", ".", "metadata", "[", "\"agent\"", "]", "[", "\"position\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.allenai_savn.datasets.offline_controller_with_small_rotation.ExhaustiveBFSController.get_next_state": [[260, 303], ["copy.deepcopy", "abs", "abs", "abs", "Exception"], "methods", ["None"], ["", "def", "get_next_state", "(", "self", ",", "state", ",", "action", ",", "copy_state", "=", "False", ")", ":", "\n", "        ", "\"\"\" Guess the next state when action is taken. Note that\n            this will not predict the correct y value. \"\"\"", "\n", "if", "copy_state", ":", "\n", "            ", "next_state", "=", "copy", ".", "deepcopy", "(", "state", ")", "\n", "", "else", ":", "\n", "            ", "next_state", "=", "state", "\n", "", "if", "action", "==", "\"MoveAhead\"", ":", "\n", "            ", "if", "next_state", ".", "rotation", "==", "0", ":", "\n", "                ", "next_state", ".", "z", "+=", "self", ".", "grid_size", "\n", "", "elif", "next_state", ".", "rotation", "==", "90", ":", "\n", "                ", "next_state", ".", "x", "+=", "self", ".", "grid_size", "\n", "", "elif", "next_state", ".", "rotation", "==", "180", ":", "\n", "                ", "next_state", ".", "z", "-=", "self", ".", "grid_size", "\n", "", "elif", "next_state", ".", "rotation", "==", "270", ":", "\n", "                ", "next_state", ".", "x", "-=", "self", ".", "grid_size", "\n", "", "elif", "next_state", ".", "rotation", "==", "45", ":", "\n", "                ", "next_state", ".", "z", "+=", "self", ".", "grid_size", "\n", "next_state", ".", "x", "+=", "self", ".", "grid_size", "\n", "", "elif", "next_state", ".", "rotation", "==", "135", ":", "\n", "                ", "next_state", ".", "z", "-=", "self", ".", "grid_size", "\n", "next_state", ".", "x", "+=", "self", ".", "grid_size", "\n", "", "elif", "next_state", ".", "rotation", "==", "225", ":", "\n", "                ", "next_state", ".", "z", "-=", "self", ".", "grid_size", "\n", "next_state", ".", "x", "-=", "self", ".", "grid_size", "\n", "", "elif", "next_state", ".", "rotation", "==", "315", ":", "\n", "                ", "next_state", ".", "z", "+=", "self", ".", "grid_size", "\n", "next_state", ".", "x", "-=", "self", ".", "grid_size", "\n", "", "else", ":", "\n", "                ", "raise", "Exception", "(", "\"Unknown Rotation\"", ")", "\n", "", "", "elif", "action", "==", "\"RotateRight\"", ":", "\n", "            ", "next_state", ".", "rotation", "=", "(", "next_state", ".", "rotation", "+", "45", ")", "%", "360", "\n", "", "elif", "action", "==", "\"RotateLeft\"", ":", "\n", "            ", "next_state", ".", "rotation", "=", "(", "next_state", ".", "rotation", "-", "45", ")", "%", "360", "\n", "", "elif", "action", "==", "\"LookUp\"", ":", "\n", "            ", "if", "abs", "(", "next_state", ".", "horizon", ")", "<=", "1", ":", "\n", "                ", "return", "None", "\n", "", "next_state", ".", "horizon", "=", "next_state", ".", "horizon", "-", "30", "\n", "", "elif", "action", "==", "\"LookDown\"", ":", "\n", "            ", "if", "abs", "(", "next_state", ".", "horizon", "-", "60", ")", "<=", "1", "or", "abs", "(", "next_state", ".", "horizon", "-", "30", ")", "<=", "1", ":", "\n", "                ", "return", "None", "\n", "", "next_state", ".", "horizon", "=", "next_state", ".", "horizon", "+", "30", "\n", "", "return", "next_state", "\n", "\n"]], "home.repos.pwc.inspect_result.allenai_savn.datasets.offline_controller_with_small_rotation.ExhaustiveBFSController.add_edge": [[304, 306], ["offline_controller_with_small_rotation.ExhaustiveBFSController.graph.add_edge", "str", "str"], "methods", ["home.repos.pwc.inspect_result.allenai_savn.datasets.offline_controller_with_small_rotation.ExhaustiveBFSController.add_edge"], ["", "def", "add_edge", "(", "self", ",", "curr_state", ",", "next_state", ")", ":", "\n", "        ", "self", ".", "graph", ".", "add_edge", "(", "str", "(", "curr_state", ")", ",", "str", "(", "next_state", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.allenai_savn.datasets.offline_controller_with_small_rotation.ExhaustiveBFSController.enqueue_state": [[307, 327], ["offline_controller_with_small_rotation.ExhaustiveBFSController.seen_states.append", "offline_controller_with_small_rotation.ExhaustiveBFSController.queue.append", "offline_controller_with_small_rotation.ExhaustiveBFSController.bad_seen_states.append", "round", "round"], "methods", ["None"], ["", "def", "enqueue_state", "(", "self", ",", "state", ")", ":", "\n", "        ", "\"\"\" Returns true if state is valid. \"\"\"", "\n", "# ensure there are no dup states.", "\n", "if", "state", "in", "self", ".", "seen_states", ":", "\n", "            ", "return", "True", "\n", "\n", "", "if", "state", "in", "self", ".", "bad_seen_states", ":", "\n", "            ", "return", "False", "\n", "\n", "# ensure state is a legal rotation and horizon.", "\n", "", "if", "(", "\n", "round", "(", "state", ".", "horizon", ")", "not", "in", "self", ".", "horizons", "\n", "or", "round", "(", "state", ".", "rotation", ")", "not", "in", "self", ".", "rotations", "\n", ")", ":", "\n", "            ", "self", ".", "bad_seen_states", ".", "append", "(", "state", ")", "\n", "return", "False", "\n", "\n", "", "self", ".", "seen_states", ".", "append", "(", "state", ")", "\n", "self", ".", "queue", ".", "append", "(", "state", ")", "\n", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.allenai_savn.datasets.offline_controller_with_small_rotation.ExhaustiveBFSController.enqueue_states": [[328, 391], ["offline_controller_with_small_rotation.ExhaustiveBFSController.get_next_state", "offline_controller_with_small_rotation.ExhaustiveBFSController.step", "offline_controller_with_small_rotation.ExhaustiveBFSController.step", "offline_controller_with_small_rotation.ExhaustiveBFSController.step", "offline_controller_with_small_rotation.ExhaustiveBFSController.get_state_from_event", "offline_controller_with_small_rotation.ExhaustiveBFSController.teleport_to_state", "dict", "offline_controller_with_small_rotation.ExhaustiveBFSController.teleport_to_state", "dict", "offline_controller_with_small_rotation.ExhaustiveBFSController.teleport_to_state", "dict", "offline_controller_with_small_rotation.ExhaustiveBFSController.teleport_to_state", "print", "print", "offline_controller_with_small_rotation.ExhaustiveBFSController.enqueue_state", "offline_controller_with_small_rotation.ExhaustiveBFSController.add_edge", "offline_controller_with_small_rotation.ExhaustiveBFSController.add_edge"], "methods", ["home.repos.pwc.inspect_result.allenai_savn.datasets.offline_controller_with_small_rotation.ExhaustiveBFSController.get_next_state", "home.repos.pwc.inspect_result.allenai_savn.episodes.basic_episode.BasicEpisode.step", "home.repos.pwc.inspect_result.allenai_savn.episodes.basic_episode.BasicEpisode.step", "home.repos.pwc.inspect_result.allenai_savn.episodes.basic_episode.BasicEpisode.step", "home.repos.pwc.inspect_result.allenai_savn.datasets.offline_controller_with_small_rotation.ExhaustiveBFSController.get_state_from_event", "home.repos.pwc.inspect_result.allenai_savn.datasets.offline_controller_with_small_rotation.ExhaustiveBFSController.teleport_to_state", "home.repos.pwc.inspect_result.allenai_savn.datasets.offline_controller_with_small_rotation.ExhaustiveBFSController.teleport_to_state", "home.repos.pwc.inspect_result.allenai_savn.datasets.offline_controller_with_small_rotation.ExhaustiveBFSController.teleport_to_state", "home.repos.pwc.inspect_result.allenai_savn.datasets.offline_controller_with_small_rotation.ExhaustiveBFSController.teleport_to_state", "home.repos.pwc.inspect_result.allenai_savn.datasets.offline_controller_with_small_rotation.ExhaustiveBFSController.enqueue_state", "home.repos.pwc.inspect_result.allenai_savn.datasets.offline_controller_with_small_rotation.ExhaustiveBFSController.add_edge", "home.repos.pwc.inspect_result.allenai_savn.datasets.offline_controller_with_small_rotation.ExhaustiveBFSController.add_edge"], ["", "def", "enqueue_states", "(", "self", ",", "agent_state", ")", ":", "\n", "\n", "        ", "if", "not", "self", ".", "allow_enqueue", ":", "\n", "            ", "return", "\n", "\n", "# Take all action in self.action and enqueue if they are valid.", "\n", "", "for", "action", "in", "self", ".", "actions", ":", "\n", "\n", "            ", "next_state_guess", "=", "self", ".", "get_next_state", "(", "agent_state", ",", "action", ",", "True", ")", "\n", "\n", "if", "next_state_guess", "is", "None", ":", "\n", "                ", "continue", "\n", "\n", "# # Bug.", "\n", "# if (", "\n", "#     self.scene_name == \"FloorPlan208_physics\"", "\n", "#     and next_state_guess.x == 0", "\n", "#     and next_state_guess.z == 1.75", "\n", "# ):", "\n", "#     self.teleport_to_state(agent_state)", "\n", "#     continue", "\n", "\n", "# Grid assumption is meant to make things faster and should not", "\n", "# be used in practice. In general it does not work when the y", "\n", "# values fluctuate in a scene. It circumvents using the actual controller.", "\n", "", "if", "self", ".", "grid_assumption", ":", "\n", "                ", "if", "next_state_guess", "in", "self", ".", "seen_states", ":", "\n", "                    ", "if", "self", ".", "make_graph", ":", "\n", "                        ", "self", ".", "add_edge", "(", "agent_state", ",", "next_state_guess", ")", "\n", "", "continue", "\n", "\n", "", "", "event", "=", "self", ".", "step", "(", "\n", "dict", "(", "\n", "action", "=", "\"Teleport\"", ",", "\n", "x", "=", "next_state_guess", ".", "x", ",", "\n", "y", "=", "next_state_guess", ".", "y", ",", "\n", "z", "=", "next_state_guess", ".", "z", ",", "\n", ")", "\n", ")", "\n", "if", "not", "event", ".", "metadata", "[", "\"lastActionSuccess\"", "]", ":", "\n", "                ", "self", ".", "teleport_to_state", "(", "agent_state", ")", "\n", "continue", "\n", "", "event", "=", "self", ".", "step", "(", "dict", "(", "action", "=", "\"Rotate\"", ",", "rotation", "=", "next_state_guess", ".", "rotation", ")", ")", "\n", "if", "not", "event", ".", "metadata", "[", "\"lastActionSuccess\"", "]", ":", "\n", "                ", "self", ".", "teleport_to_state", "(", "agent_state", ")", "\n", "continue", "\n", "", "event", "=", "self", ".", "step", "(", "dict", "(", "action", "=", "\"Look\"", ",", "horizon", "=", "next_state_guess", ".", "horizon", ")", ")", "\n", "if", "not", "event", ".", "metadata", "[", "\"lastActionSuccess\"", "]", ":", "\n", "                ", "self", ".", "teleport_to_state", "(", "agent_state", ")", "\n", "continue", "\n", "\n", "", "next_state", "=", "self", ".", "get_state_from_event", "(", "event", ")", "\n", "\n", "if", "next_state", "!=", "next_state_guess", ":", "\n", "                ", "print", "(", "next_state", ")", "\n", "print", "(", "next_state_guess", ")", "\n", "", "assert", "next_state", "==", "next_state_guess", "\n", "\n", "if", "self", ".", "enqueue_state", "(", "next_state", ")", "and", "self", ".", "make_graph", ":", "\n", "                ", "self", ".", "add_edge", "(", "agent_state", ",", "next_state", ")", "\n", "\n", "# Return back to agents initial location.", "\n", "", "self", ".", "teleport_to_state", "(", "agent_state", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.allenai_savn.datasets.offline_controller_with_small_rotation.ExhaustiveBFSController.search_all_closed": [[392, 455], ["collections.deque", "offline_controller_with_small_rotation.ExhaustiveBFSController.reset", "offline_controller_with_small_rotation.ExhaustiveBFSController.enqueue_state", "print", "offline_controller_with_small_rotation.ExhaustiveBFSController.step", "offline_controller_with_small_rotation.ExhaustiveBFSController.step", "offline_controller_with_small_rotation.ExhaustiveBFSController.get_state_from_event", "offline_controller_with_small_rotation.ExhaustiveBFSController.queue_step", "offline_controller_with_small_rotation.ExhaustiveBFSController.images.close", "offline_controller_with_small_rotation.ExhaustiveBFSController.seg.close", "offline_controller_with_small_rotation.ExhaustiveBFSController.depth.close", "dict", "dict", "open", "json.dump", "open", "json_graph.node_link_data", "json.dump", "open", "json.dump", "open", "json.dump"], "methods", ["home.repos.pwc.inspect_result.allenai_savn.episodes.basic_episode.BasicEpisode.reset", "home.repos.pwc.inspect_result.allenai_savn.datasets.offline_controller_with_small_rotation.ExhaustiveBFSController.enqueue_state", "home.repos.pwc.inspect_result.allenai_savn.episodes.basic_episode.BasicEpisode.step", "home.repos.pwc.inspect_result.allenai_savn.episodes.basic_episode.BasicEpisode.step", "home.repos.pwc.inspect_result.allenai_savn.datasets.offline_controller_with_small_rotation.ExhaustiveBFSController.get_state_from_event", "home.repos.pwc.inspect_result.allenai_savn.datasets.offline_controller_with_small_rotation.ExhaustiveBFSController.queue_step"], ["", "", "def", "search_all_closed", "(", "self", ",", "scene_name", ")", ":", "\n", "        ", "\"\"\" Runs the ExhaustiveBFSController on scene_name. \"\"\"", "\n", "self", ".", "allow_enqueue", "=", "True", "\n", "self", ".", "queue", "=", "deque", "(", ")", "\n", "self", ".", "seen_points", "=", "[", "]", "\n", "self", ".", "visited_seen_points", "=", "[", "]", "\n", "self", ".", "grid_points", "=", "[", "]", "\n", "self", ".", "seen_states", "=", "[", "]", "\n", "self", ".", "visited_seen_states", "=", "[", "]", "\n", "self", ".", "scene_name", "=", "scene_name", "\n", "event", "=", "self", ".", "reset", "(", "scene_name", ")", "\n", "\n", "if", "self", ".", "make_seg", "or", "self", ".", "make_class", ":", "\n", "            ", "event", "=", "self", ".", "step", "(", "\n", "dict", "(", "\n", "action", "=", "\"Initialize\"", ",", "\n", "gridSize", "=", "self", ".", "grid_size", ",", "\n", "fieldOfView", "=", "self", ".", "fov", ",", "\n", "renderClassImage", "=", "True", ",", "\n", "renderObjectImage", "=", "True", ",", "\n", "renderDepthImage", "=", "True", ",", "\n", ")", "\n", ")", "\n", "", "else", ":", "\n", "            ", "event", "=", "self", ".", "step", "(", "\n", "dict", "(", "\n", "action", "=", "\"Initialize\"", ",", "\n", "renderDepthImage", "=", "True", ",", "\n", "gridSize", "=", "self", ".", "grid_size", ",", "\n", "fieldOfView", "=", "self", ".", "fov", ",", "\n", ")", "\n", ")", "\n", "", "self", ".", "y", "=", "event", ".", "metadata", "[", "\"agent\"", "]", "[", "\"position\"", "]", "[", "\"y\"", "]", "\n", "\n", "self", ".", "enqueue_state", "(", "self", ".", "get_state_from_event", "(", "event", ")", ")", "\n", "\n", "while", "self", ".", "queue", ":", "\n", "            ", "self", ".", "queue_step", "(", ")", "\n", "\n", "", "if", "self", ".", "make_grid", ":", "\n", "            ", "with", "open", "(", "self", ".", "grid_file", ",", "\"w\"", ")", "as", "outfile", ":", "\n", "                ", "json", ".", "dump", "(", "self", ".", "grid_points", ",", "outfile", ")", "\n", "", "", "if", "self", ".", "make_graph", ":", "\n", "            ", "from", "networkx", ".", "readwrite", "import", "json_graph", "\n", "\n", "with", "open", "(", "self", ".", "graph_file", ",", "\"w\"", ")", "as", "outfile", ":", "\n", "                ", "data", "=", "json_graph", ".", "node_link_data", "(", "self", ".", "graph", ")", "\n", "json", ".", "dump", "(", "data", ",", "outfile", ")", "\n", "", "", "if", "self", ".", "make_metadata", ":", "\n", "            ", "with", "open", "(", "self", ".", "metadata_file", ",", "\"w\"", ")", "as", "outfile", ":", "\n", "                ", "json", ".", "dump", "(", "self", ".", "metadata", ",", "outfile", ")", "\n", "", "", "if", "self", ".", "make_images", ":", "\n", "            ", "self", ".", "images", ".", "close", "(", ")", "\n", "", "if", "self", ".", "make_seg", ":", "\n", "            ", "self", ".", "seg", ".", "close", "(", ")", "\n", "", "if", "self", ".", "make_depth", ":", "\n", "            ", "self", ".", "depth", ".", "close", "(", ")", "\n", "\n", "", "if", "self", ".", "make_class", ":", "\n", "            ", "with", "open", "(", "self", ".", "class_file", ",", "\"w\"", ")", "as", "outfile", ":", "\n", "                ", "json", ".", "dump", "(", "self", ".", "classdata", ",", "outfile", ")", "\n", "\n", "", "", "print", "(", "\"Finished :\"", ",", "self", ".", "scene_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.allenai_savn.datasets.offline_controller_with_small_rotation.ExhaustiveBFSController.queue_step": [[456, 497], ["offline_controller_with_small_rotation.ExhaustiveBFSController.queue.popleft", "offline_controller_with_small_rotation.ExhaustiveBFSController.teleport_to_state", "offline_controller_with_small_rotation.ExhaustiveBFSController.enqueue_states", "offline_controller_with_small_rotation.ExhaustiveBFSController.visited_seen_states.append", "offline_controller_with_small_rotation.ExhaustiveBFSController.grid_points.append", "class_detections.items", "offline_controller_with_small_rotation.ExhaustiveBFSController.images.create_dataset", "offline_controller_with_small_rotation.ExhaustiveBFSController.seg.create_dataset", "offline_controller_with_small_rotation.ExhaustiveBFSController.depth.create_dataset", "any", "offline_controller_with_small_rotation.ExhaustiveBFSController.position", "str", "str", "str", "str", "str", "str", "str", "str", "print", "map", "str", "str", "str", "ai2thor.controller.distance", "offline_controller_with_small_rotation.ExhaustiveBFSController.position"], "methods", ["home.repos.pwc.inspect_result.allenai_savn.datasets.offline_controller_with_small_rotation.ExhaustiveBFSController.teleport_to_state", "home.repos.pwc.inspect_result.allenai_savn.datasets.offline_controller_with_small_rotation.ExhaustiveBFSController.enqueue_states", "home.repos.pwc.inspect_result.allenai_savn.datasets.offline_controller_with_small_rotation.ThorAgentState.position", "home.repos.pwc.inspect_result.allenai_savn.datasets.offline_controller_with_small_rotation.ThorAgentState.position"], ["", "def", "queue_step", "(", "self", ")", ":", "\n", "        ", "search_state", "=", "self", ".", "queue", ".", "popleft", "(", ")", "\n", "event", "=", "self", ".", "teleport_to_state", "(", "search_state", ")", "\n", "\n", "# if search_state.y > 1.3:", "\n", "#    raise Exception(\"**** got big point \")", "\n", "\n", "self", ".", "enqueue_states", "(", "search_state", ")", "\n", "self", ".", "visited_seen_states", ".", "append", "(", "search_state", ")", "\n", "\n", "if", "self", ".", "make_grid", "and", "not", "any", "(", "\n", "map", "(", "\n", "lambda", "p", ":", "distance", "(", "p", ",", "search_state", ".", "position", "(", ")", ")", "\n", "<", "self", ".", "distance_threshold", ",", "\n", "self", ".", "grid_points", ",", "\n", ")", "\n", ")", ":", "\n", "            ", "self", ".", "grid_points", ".", "append", "(", "search_state", ".", "position", "(", ")", ")", "\n", "\n", "", "if", "self", ".", "make_metadata", ":", "\n", "            ", "self", ".", "metadata", "[", "str", "(", "search_state", ")", "]", "=", "event", ".", "metadata", "\n", "\n", "", "if", "self", ".", "make_class", ":", "\n", "            ", "class_detections", "=", "event", ".", "class_detections2D", "\n", "for", "k", ",", "v", "in", "class_detections", ".", "items", "(", ")", ":", "\n", "                ", "class_detections", "[", "k", "]", "=", "str", "(", "v", ")", "\n", "", "self", ".", "classdata", "[", "str", "(", "search_state", ")", "]", "=", "class_detections", "\n", "\n", "", "if", "self", ".", "make_images", "and", "str", "(", "search_state", ")", "not", "in", "self", ".", "images", ":", "\n", "            ", "self", ".", "images", ".", "create_dataset", "(", "str", "(", "search_state", ")", ",", "data", "=", "event", ".", "frame", ")", "\n", "\n", "", "if", "self", ".", "make_seg", "and", "str", "(", "search_state", ")", "not", "in", "self", ".", "seg", ":", "\n", "            ", "self", ".", "seg", ".", "create_dataset", "(", "\n", "str", "(", "search_state", ")", ",", "data", "=", "event", ".", "class_segmentation_frame", "\n", ")", "\n", "\n", "", "if", "self", ".", "make_depth", "and", "str", "(", "search_state", ")", "not", "in", "self", ".", "depth", ":", "\n", "            ", "self", ".", "depth", ".", "create_dataset", "(", "str", "(", "search_state", ")", ",", "data", "=", "event", ".", "depth_frame", ")", "\n", "\n", "", "elif", "str", "(", "search_state", ")", "in", "self", ".", "images", ":", "\n", "            ", "print", "(", "self", ".", "scene_name", ",", "str", "(", "search_state", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.allenai_savn.datasets.offline_controller_with_small_rotation.OfflineControllerWithSmallRotationEvent.__init__": [[503, 518], ["state.position"], "methods", ["home.repos.pwc.inspect_result.allenai_savn.datasets.offline_controller_with_small_rotation.ThorAgentState.position"], ["def", "__init__", "(", "self", ",", "last_action_success", ",", "scene_name", ",", "state", "=", "None", ",", "frame", "=", "None", ")", ":", "\n", "        ", "self", ".", "metadata", "=", "{", "\n", "\"lastActionSuccess\"", ":", "last_action_success", ",", "\n", "\"sceneName\"", ":", "scene_name", ",", "\n", "}", "\n", "if", "state", "is", "not", "None", ":", "\n", "            ", "self", ".", "metadata", "[", "\"agent\"", "]", "=", "{", "}", "\n", "self", ".", "metadata", "[", "\"agent\"", "]", "[", "\"position\"", "]", "=", "state", ".", "position", "(", ")", "\n", "self", ".", "metadata", "[", "\"agent\"", "]", "[", "\"rotation\"", "]", "=", "{", "\n", "\"x\"", ":", "0.0", ",", "\n", "\"y\"", ":", "state", ".", "rotation", ",", "\n", "\"z\"", ":", "0.0", ",", "\n", "}", "\n", "self", ".", "metadata", "[", "\"agent\"", "]", "[", "\"cameraHorizon\"", "]", "=", "state", ".", "horizon", "\n", "", "self", ".", "frame", "=", "frame", "\n", "\n"]], "home.repos.pwc.inspect_result.allenai_savn.datasets.offline_controller_with_small_rotation.OfflineControllerWithSmallRotation.__init__": [[533, 589], ["base_controller.BaseController.__init__", "offline_controller_with_small_rotation.ExhaustiveBFSController", "importlib.import_module", "importlib.import_module", "importlib.import_module"], "methods", ["home.repos.pwc.inspect_result.allenai_savn.episodes.test_val_episode.TestValEpisode.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "grid_size", "=", "0.25", ",", "\n", "fov", "=", "100", ",", "\n", "offline_data_dir", "=", "\"/mnt/6tb/mitchellw/data/living_room_offline_data\"", ",", "\n", "grid_file_name", "=", "\"grid.json\"", ",", "\n", "graph_file_name", "=", "\"graph.json\"", ",", "\n", "metadata_file_name", "=", "\"visible_object_map.json\"", ",", "\n", "# metadata_file_name='metadata.json',", "\n", "images_file_name", "=", "\"images.hdf5\"", ",", "\n", "debug_mode", "=", "True", ",", "\n", "actions", "=", "[", "\"MoveAhead\"", ",", "\"RotateLeft\"", ",", "\"RotateRight\"", ",", "\"LookUp\"", ",", "\"LookDown\"", "]", ",", "\n", "visualize", "=", "True", ",", "\n", "local_executable_path", "=", "None", ",", "\n", ")", ":", "\n", "\n", "        ", "super", "(", "OfflineControllerWithSmallRotation", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "grid_size", "=", "grid_size", "\n", "self", ".", "offline_data_dir", "=", "offline_data_dir", "\n", "self", ".", "grid_file_name", "=", "grid_file_name", "\n", "self", ".", "graph_file_name", "=", "graph_file_name", "\n", "self", ".", "metadata_file_name", "=", "metadata_file_name", "\n", "self", ".", "images_file_name", "=", "images_file_name", "\n", "self", ".", "grid", "=", "None", "\n", "self", ".", "graph", "=", "None", "\n", "self", ".", "metadata", "=", "None", "\n", "self", ".", "images", "=", "None", "\n", "self", ".", "controller", "=", "None", "\n", "self", ".", "using_raw_metadata", "=", "True", "\n", "self", ".", "actions", "=", "actions", "\n", "# Allowed rotations.", "\n", "self", ".", "rotations", "=", "[", "0", ",", "45", ",", "90", ",", "135", ",", "180", ",", "225", ",", "270", ",", "315", "]", "\n", "# Allowed horizons.", "\n", "self", ".", "horizons", "=", "[", "0", ",", "30", "]", "\n", "self", ".", "debug_mode", "=", "debug_mode", "\n", "self", ".", "fov", "=", "fov", "\n", "\n", "self", ".", "local_executable_path", "=", "local_executable_path", "\n", "\n", "self", ".", "y", "=", "None", "\n", "\n", "self", ".", "last_event", "=", "None", "\n", "\n", "self", ".", "controller", "=", "ExhaustiveBFSController", "(", ")", "\n", "if", "self", ".", "local_executable_path", "is", "not", "None", ":", "\n", "            ", "self", ".", "controller", ".", "local_executable_path", "=", "self", ".", "local_executable_path", "\n", "\n", "", "self", ".", "visualize", "=", "visualize", "\n", "\n", "self", ".", "scene_name", "=", "None", "\n", "self", ".", "state", "=", "None", "\n", "self", ".", "last_action_success", "=", "True", "\n", "\n", "self", ".", "h5py", "=", "importlib", ".", "import_module", "(", "\"h5py\"", ")", "\n", "self", ".", "nx", "=", "importlib", ".", "import_module", "(", "\"networkx\"", ")", "\n", "self", ".", "json_graph_loader", "=", "importlib", ".", "import_module", "(", "\"networkx.readwrite\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.allenai_savn.datasets.offline_controller_with_small_rotation.OfflineControllerWithSmallRotation.start": [[590, 595], ["offline_controller_with_small_rotation.OfflineControllerWithSmallRotation.controller.start", "offline_controller_with_small_rotation.OfflineControllerWithSmallRotation.controller.step", "dict"], "methods", ["home.repos.pwc.inspect_result.allenai_savn.datasets.environment.Environment.start", "home.repos.pwc.inspect_result.allenai_savn.episodes.basic_episode.BasicEpisode.step"], ["", "def", "start", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "visualize", ":", "\n", "            ", "self", ".", "controller", ".", "start", "(", ")", "\n", "self", ".", "controller", ".", "step", "(", "\n", "dict", "(", "action", "=", "\"Initialize\"", ",", "gridSize", "=", "self", ".", "grid_size", ",", "fieldOfView", "=", "self", ".", "fov", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.allenai_savn.datasets.offline_controller_with_small_rotation.OfflineControllerWithSmallRotation.get_full_state": [[597, 599], ["offline_controller_with_small_rotation.ThorAgentState"], "methods", ["None"], ["", "", "def", "get_full_state", "(", "self", ",", "x", ",", "y", ",", "z", ",", "rotation", "=", "0.0", ",", "horizon", "=", "0.0", ")", ":", "\n", "        ", "return", "ThorAgentState", "(", "x", ",", "y", ",", "z", ",", "rotation", ",", "horizon", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.allenai_savn.datasets.offline_controller_with_small_rotation.OfflineControllerWithSmallRotation.get_state_from_str": [[600, 602], ["offline_controller_with_small_rotation.ThorAgentState"], "methods", ["None"], ["", "def", "get_state_from_str", "(", "self", ",", "x", ",", "z", ",", "rotation", "=", "0.0", ",", "horizon", "=", "0.0", ")", ":", "\n", "        ", "return", "ThorAgentState", "(", "x", ",", "self", ".", "y", ",", "z", ",", "rotation", ",", "horizon", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.allenai_savn.datasets.offline_controller_with_small_rotation.OfflineControllerWithSmallRotation.reset": [[603, 662], ["offline_controller_with_small_rotation.OfflineControllerWithSmallRotation.get_full_state", "offline_controller_with_small_rotation.OfflineControllerWithSmallRotation._successful_event", "offline_controller_with_small_rotation.OfflineControllerWithSmallRotation.json_graph_loader.node_link_graph().to_directed", "offline_controller_with_small_rotation.OfflineControllerWithSmallRotation.h5py.File", "offline_controller_with_small_rotation.OfflineControllerWithSmallRotation.controller.reset", "offline_controller_with_small_rotation.OfflineControllerWithSmallRotation.controller.teleport_to_state", "open", "json.load", "open", "json.load", "open", "json.load", "next", "offline_controller_with_small_rotation.OfflineControllerWithSmallRotation.images.close", "os.path.join", "random.choice", "os.path.join", "os.path.join", "offline_controller_with_small_rotation.OfflineControllerWithSmallRotation.json_graph_loader.node_link_graph", "os.path.join", "iter", "float", "offline_controller_with_small_rotation.OfflineControllerWithSmallRotation.metadata.keys", "next.split"], "methods", ["home.repos.pwc.inspect_result.allenai_savn.datasets.offline_controller_with_small_rotation.OfflineControllerWithSmallRotation.get_full_state", "home.repos.pwc.inspect_result.allenai_savn.datasets.offline_controller_with_small_rotation.OfflineControllerWithSmallRotation._successful_event", "home.repos.pwc.inspect_result.allenai_savn.episodes.basic_episode.BasicEpisode.reset", "home.repos.pwc.inspect_result.allenai_savn.datasets.offline_controller_with_small_rotation.ExhaustiveBFSController.teleport_to_state"], ["", "def", "reset", "(", "self", ",", "scene_name", "=", "None", ")", ":", "\n", "\n", "        ", "if", "scene_name", "is", "None", ":", "\n", "            ", "scene_name", "=", "\"FloorPlan28\"", "\n", "\n", "", "if", "scene_name", "!=", "self", ".", "scene_name", ":", "\n", "            ", "self", ".", "scene_name", "=", "scene_name", "\n", "with", "open", "(", "\n", "os", ".", "path", ".", "join", "(", "\n", "self", ".", "offline_data_dir", ",", "self", ".", "scene_name", ",", "self", ".", "grid_file_name", "\n", ")", ",", "\n", "\"r\"", ",", "\n", ")", "as", "f", ":", "\n", "                ", "self", ".", "grid", "=", "json", ".", "load", "(", "f", ")", "\n", "", "with", "open", "(", "\n", "os", ".", "path", ".", "join", "(", "\n", "self", ".", "offline_data_dir", ",", "self", ".", "scene_name", ",", "self", ".", "graph_file_name", "\n", ")", ",", "\n", "\"r\"", ",", "\n", ")", "as", "f", ":", "\n", "                ", "graph_json", "=", "json", ".", "load", "(", "f", ")", "\n", "", "self", ".", "graph", "=", "self", ".", "json_graph_loader", ".", "node_link_graph", "(", "\n", "graph_json", "\n", ")", ".", "to_directed", "(", ")", "\n", "with", "open", "(", "\n", "os", ".", "path", ".", "join", "(", "\n", "self", ".", "offline_data_dir", ",", "self", ".", "scene_name", ",", "self", ".", "metadata_file_name", "\n", ")", ",", "\n", "\"r\"", ",", "\n", ")", "as", "f", ":", "\n", "                ", "self", ".", "metadata", "=", "json", ".", "load", "(", "f", ")", "\n", "# Determine if using the raw metadata, which is structured as a dictionary of", "\n", "# state -> metatdata. The alternative is a map of obj -> states where object is visible.", "\n", "key", "=", "next", "(", "iter", "(", "self", ".", "metadata", ".", "keys", "(", ")", ")", ")", "\n", "try", ":", "\n", "                    ", "float", "(", "key", ".", "split", "(", "\"|\"", ")", "[", "0", "]", ")", "\n", "self", ".", "using_raw_metadata", "=", "True", "\n", "", "except", "ValueError", ":", "\n", "                    ", "self", ".", "using_raw_metadata", "=", "False", "\n", "\n", "", "", "if", "self", ".", "images", "is", "not", "None", ":", "\n", "                ", "self", ".", "images", ".", "close", "(", ")", "\n", "", "self", ".", "images", "=", "self", ".", "h5py", ".", "File", "(", "\n", "os", ".", "path", ".", "join", "(", "\n", "self", ".", "offline_data_dir", ",", "self", ".", "scene_name", ",", "self", ".", "images_file_name", "\n", ")", ",", "\n", "\"r\"", ",", "\n", ")", "\n", "\n", "", "self", ".", "state", "=", "self", ".", "get_full_state", "(", "\n", "**", "self", ".", "grid", "[", "0", "]", ",", "rotation", "=", "random", ".", "choice", "(", "self", ".", "rotations", ")", "\n", ")", "\n", "self", ".", "y", "=", "self", ".", "state", ".", "y", "\n", "self", ".", "last_action_success", "=", "True", "\n", "self", ".", "last_event", "=", "self", ".", "_successful_event", "(", ")", "\n", "\n", "if", "self", ".", "visualize", ":", "\n", "            ", "self", ".", "controller", ".", "reset", "(", "scene_name", ")", "\n", "self", ".", "controller", ".", "teleport_to_state", "(", "self", ".", "state", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.allenai_savn.datasets.offline_controller_with_small_rotation.OfflineControllerWithSmallRotation.randomize_state": [[663, 673], ["offline_controller_with_small_rotation.OfflineControllerWithSmallRotation.get_state_from_str", "offline_controller_with_small_rotation.OfflineControllerWithSmallRotation._successful_event", "offline_controller_with_small_rotation.OfflineControllerWithSmallRotation.controller.teleport_to_state", "float", "random.choice().split", "random.choice", "list", "offline_controller_with_small_rotation.OfflineControllerWithSmallRotation.images.keys"], "methods", ["home.repos.pwc.inspect_result.allenai_savn.datasets.offline_controller_with_small_rotation.OfflineControllerWithSmallRotation.get_state_from_str", "home.repos.pwc.inspect_result.allenai_savn.datasets.offline_controller_with_small_rotation.OfflineControllerWithSmallRotation._successful_event", "home.repos.pwc.inspect_result.allenai_savn.datasets.offline_controller_with_small_rotation.ExhaustiveBFSController.teleport_to_state"], ["", "", "def", "randomize_state", "(", "self", ")", ":", "\n", "        ", "self", ".", "state", "=", "self", ".", "get_state_from_str", "(", "\n", "*", "[", "float", "(", "x", ")", "for", "x", "in", "random", ".", "choice", "(", "list", "(", "self", ".", "images", ".", "keys", "(", ")", ")", ")", ".", "split", "(", "\"|\"", ")", "]", "\n", ")", "\n", "self", ".", "state", ".", "horizon", "=", "0", "\n", "self", ".", "last_action_success", "=", "True", "\n", "self", ".", "last_event", "=", "self", ".", "_successful_event", "(", ")", "\n", "\n", "if", "self", ".", "visualize", ":", "\n", "            ", "self", ".", "controller", ".", "teleport_to_state", "(", "self", ".", "state", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.allenai_savn.datasets.offline_controller_with_small_rotation.OfflineControllerWithSmallRotation.back_to_start": [[674, 678], ["offline_controller_with_small_rotation.OfflineControllerWithSmallRotation.controller.teleport_to_state"], "methods", ["home.repos.pwc.inspect_result.allenai_savn.datasets.offline_controller_with_small_rotation.ExhaustiveBFSController.teleport_to_state"], ["", "", "def", "back_to_start", "(", "self", ",", "start", ")", ":", "\n", "        ", "self", ".", "state", "=", "start", "\n", "if", "self", ".", "visualize", ":", "\n", "            ", "self", ".", "controller", ".", "teleport_to_state", "(", "self", ".", "state", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.allenai_savn.datasets.offline_controller_with_small_rotation.OfflineControllerWithSmallRotation.step": [[679, 749], ["offline_controller_with_small_rotation.OfflineControllerWithSmallRotation.controller.get_next_state", "Exception", "offline_controller_with_small_rotation.OfflineControllerWithSmallRotation.controller.step", "offline_controller_with_small_rotation.OfflineControllerWithSmallRotation.controller.step", "offline_controller_with_small_rotation.OfflineControllerWithSmallRotation.controller.step", "offline_controller_with_small_rotation.OfflineControllerWithSmallRotation.controller.get_state_from_event", "str", "offline_controller_with_small_rotation.OfflineControllerWithSmallRotation.graph.neighbors", "dict", "dict", "dict", "offline_controller_with_small_rotation.OfflineControllerWithSmallRotation.controller.teleport_to_state", "str", "offline_controller_with_small_rotation.OfflineControllerWithSmallRotation.get_state_from_str", "offline_controller_with_small_rotation.OfflineControllerWithSmallRotation._successful_event", "offline_controller_with_small_rotation.OfflineControllerWithSmallRotation.controller.step", "round", "round", "offline_controller_with_small_rotation.OfflineControllerWithSmallRotation.controller.get_state_from_event", "offline_controller_with_small_rotation.OfflineControllerWithSmallRotation.controller.get_state_from_event", "print", "print", "print", "offline_controller_with_small_rotation.OfflineControllerWithSmallRotation.controller.get_state_from_event", "offline_controller_with_small_rotation.OfflineControllerWithSmallRotation.controller.get_state_from_event", "float", "str", "str", "str.split", "offline_controller_with_small_rotation.OfflineControllerWithSmallRotation.controller.get_state_from_event", "offline_controller_with_small_rotation.OfflineControllerWithSmallRotation.controller.get_state_from_event"], "methods", ["home.repos.pwc.inspect_result.allenai_savn.datasets.offline_controller_with_small_rotation.ExhaustiveBFSController.get_next_state", "home.repos.pwc.inspect_result.allenai_savn.episodes.basic_episode.BasicEpisode.step", "home.repos.pwc.inspect_result.allenai_savn.episodes.basic_episode.BasicEpisode.step", "home.repos.pwc.inspect_result.allenai_savn.episodes.basic_episode.BasicEpisode.step", "home.repos.pwc.inspect_result.allenai_savn.datasets.offline_controller_with_small_rotation.ExhaustiveBFSController.get_state_from_event", "home.repos.pwc.inspect_result.allenai_savn.datasets.offline_controller_with_small_rotation.ExhaustiveBFSController.teleport_to_state", "home.repos.pwc.inspect_result.allenai_savn.datasets.offline_controller_with_small_rotation.OfflineControllerWithSmallRotation.get_state_from_str", "home.repos.pwc.inspect_result.allenai_savn.datasets.offline_controller_with_small_rotation.OfflineControllerWithSmallRotation._successful_event", "home.repos.pwc.inspect_result.allenai_savn.episodes.basic_episode.BasicEpisode.step", "home.repos.pwc.inspect_result.allenai_savn.datasets.offline_controller_with_small_rotation.ExhaustiveBFSController.get_state_from_event", "home.repos.pwc.inspect_result.allenai_savn.datasets.offline_controller_with_small_rotation.ExhaustiveBFSController.get_state_from_event", "home.repos.pwc.inspect_result.allenai_savn.datasets.offline_controller_with_small_rotation.ExhaustiveBFSController.get_state_from_event", "home.repos.pwc.inspect_result.allenai_savn.datasets.offline_controller_with_small_rotation.ExhaustiveBFSController.get_state_from_event", "home.repos.pwc.inspect_result.allenai_savn.datasets.offline_controller_with_small_rotation.ExhaustiveBFSController.get_state_from_event", "home.repos.pwc.inspect_result.allenai_savn.datasets.offline_controller_with_small_rotation.ExhaustiveBFSController.get_state_from_event"], ["", "", "def", "step", "(", "self", ",", "action", ",", "raise_for_failure", "=", "False", ")", ":", "\n", "\n", "        ", "if", "\"action\"", "not", "in", "action", "or", "action", "[", "\"action\"", "]", "not", "in", "self", ".", "actions", ":", "\n", "            ", "if", "action", "[", "\"action\"", "]", "==", "\"Initialize\"", ":", "\n", "                ", "if", "self", ".", "visualize", ":", "\n", "                    ", "self", ".", "controller", ".", "step", "(", "action", ",", "raise_for_failure", ")", "\n", "", "return", "\n", "", "raise", "Exception", "(", "\"Unsupported action.\"", ")", "\n", "\n", "", "action", "=", "action", "[", "\"action\"", "]", "\n", "\n", "next_state", "=", "self", ".", "controller", ".", "get_next_state", "(", "self", ".", "state", ",", "action", ",", "True", ")", "\n", "\n", "if", "self", ".", "visualize", "and", "next_state", "is", "not", "None", ":", "\n", "            ", "viz_event", "=", "self", ".", "controller", ".", "step", "(", "\n", "dict", "(", "action", "=", "\"Teleport\"", ",", "x", "=", "next_state", ".", "x", ",", "y", "=", "next_state", ".", "y", ",", "z", "=", "next_state", ".", "z", ")", "\n", ")", "\n", "viz_event", "=", "self", ".", "controller", ".", "step", "(", "\n", "dict", "(", "action", "=", "\"Rotate\"", ",", "rotation", "=", "next_state", ".", "rotation", ")", "\n", ")", "\n", "viz_event", "=", "self", ".", "controller", ".", "step", "(", "\n", "dict", "(", "action", "=", "\"Look\"", ",", "horizon", "=", "next_state", ".", "horizon", ")", "\n", ")", "\n", "viz_next_state", "=", "self", ".", "controller", ".", "get_state_from_event", "(", "viz_event", ")", "\n", "if", "(", "\n", "round", "(", "viz_next_state", ".", "horizon", ")", "not", "in", "self", ".", "horizons", "\n", "or", "round", "(", "viz_next_state", ".", "rotation", ")", "not", "in", "self", ".", "rotations", "\n", ")", ":", "\n", "# return back to original state.", "\n", "                ", "self", ".", "controller", ".", "teleport_to_state", "(", "self", ".", "state", ")", "\n", "\n", "", "", "if", "next_state", "is", "not", "None", ":", "\n", "            ", "next_state_key", "=", "str", "(", "next_state", ")", "\n", "neighbors", "=", "self", ".", "graph", ".", "neighbors", "(", "str", "(", "self", ".", "state", ")", ")", "\n", "\n", "if", "next_state_key", "in", "neighbors", ":", "\n", "                ", "self", ".", "state", "=", "self", ".", "get_state_from_str", "(", "\n", "*", "[", "float", "(", "x", ")", "for", "x", "in", "next_state_key", ".", "split", "(", "\"|\"", ")", "]", "\n", ")", "\n", "self", ".", "last_action_success", "=", "True", "\n", "event", "=", "self", ".", "_successful_event", "(", ")", "\n", "if", "self", ".", "debug_mode", "and", "self", ".", "visualize", ":", "\n", "                    ", "if", "self", ".", "controller", ".", "get_state_from_event", "(", "\n", "viz_event", "\n", ")", "!=", "self", ".", "controller", ".", "get_state_from_event", "(", "event", ")", ":", "\n", "                        ", "print", "(", "action", ")", "\n", "print", "(", "str", "(", "self", ".", "controller", ".", "get_state_from_event", "(", "viz_event", ")", ")", ")", "\n", "print", "(", "str", "(", "self", ".", "controller", ".", "get_state_from_event", "(", "event", ")", ")", ")", "\n", "\n", "", "assert", "self", ".", "controller", ".", "get_state_from_event", "(", "\n", "viz_event", "\n", ")", "==", "self", ".", "controller", ".", "get_state_from_event", "(", "event", ")", "\n", "assert", "viz_event", ".", "metadata", "[", "\"lastActionSuccess\"", "]", "\n", "\n", "# Uncomment if you want to view the frames side by side to", "\n", "# ensure that they are duplicated.", "\n", "# from matplotlib import pyplot as plt", "\n", "# fig = plt.figure()", "\n", "# fig.add_subplot(2,1,1)", "\n", "# plt.imshow(self.get_image())", "\n", "# fig.add_subplot(2,1,2)", "\n", "# plt.imshow(viz_event.frame)", "\n", "# plt.show()", "\n", "\n", "", "self", ".", "last_event", "=", "event", "\n", "return", "event", "\n", "\n", "", "", "self", ".", "last_action_success", "=", "False", "\n", "self", ".", "last_event", ".", "metadata", "[", "\"lastActionSuccess\"", "]", "=", "False", "\n", "return", "self", ".", "last_event", "\n", "\n"]], "home.repos.pwc.inspect_result.allenai_savn.datasets.offline_controller_with_small_rotation.OfflineControllerWithSmallRotation.shortest_path": [[750, 752], ["offline_controller_with_small_rotation.OfflineControllerWithSmallRotation.nx.shortest_path", "str", "str"], "methods", ["home.repos.pwc.inspect_result.allenai_savn.datasets.offline_controller_with_small_rotation.OfflineControllerWithSmallRotation.shortest_path"], ["", "def", "shortest_path", "(", "self", ",", "source_state", ",", "target_state", ")", ":", "\n", "        ", "return", "self", ".", "nx", ".", "shortest_path", "(", "self", ".", "graph", ",", "str", "(", "source_state", ")", ",", "str", "(", "target_state", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.allenai_savn.datasets.offline_controller_with_small_rotation.OfflineControllerWithSmallRotation.optimal_plan": [[753, 768], ["len", "offline_controller_with_small_rotation.OfflineControllerWithSmallRotation.controller.get_next_state", "str", "actions.append"], "methods", ["home.repos.pwc.inspect_result.allenai_savn.datasets.offline_controller_with_small_rotation.ExhaustiveBFSController.get_next_state"], ["", "def", "optimal_plan", "(", "self", ",", "source_state", ",", "path", ")", ":", "\n", "        ", "\"\"\" This is for debugging. It modifies the state. \"\"\"", "\n", "self", ".", "state", "=", "source_state", "\n", "actions", "=", "[", "]", "\n", "i", "=", "1", "\n", "while", "i", "<", "len", "(", "path", ")", ":", "\n", "            ", "for", "a", "in", "self", ".", "actions", ":", "\n", "                ", "next_state", "=", "self", ".", "controller", ".", "get_next_state", "(", "self", ".", "state", ",", "a", ",", "True", ")", "\n", "if", "str", "(", "next_state", ")", "==", "path", "[", "i", "]", ":", "\n", "                    ", "actions", ".", "append", "(", "a", ")", "\n", "i", "+=", "1", "\n", "self", ".", "state", "=", "next_state", "\n", "break", "\n", "\n", "", "", "", "return", "actions", "\n", "\n"]], "home.repos.pwc.inspect_result.allenai_savn.datasets.offline_controller_with_small_rotation.OfflineControllerWithSmallRotation.shortest_path_to_target": [[769, 800], ["offline_controller_with_small_rotation.OfflineControllerWithSmallRotation.get_state_from_str", "offline_controller_with_small_rotation.OfflineControllerWithSmallRotation.shortest_path", "offline_controller_with_small_rotation.OfflineControllerWithSmallRotation.optimal_plan", "len", "states_where_visible.append", "len", "float", "str_.split"], "methods", ["home.repos.pwc.inspect_result.allenai_savn.datasets.offline_controller_with_small_rotation.OfflineControllerWithSmallRotation.get_state_from_str", "home.repos.pwc.inspect_result.allenai_savn.datasets.offline_controller_with_small_rotation.OfflineControllerWithSmallRotation.shortest_path", "home.repos.pwc.inspect_result.allenai_savn.datasets.offline_controller_with_small_rotation.OfflineControllerWithSmallRotation.optimal_plan"], ["", "def", "shortest_path_to_target", "(", "self", ",", "source_state", ",", "objId", ",", "get_plan", "=", "False", ")", ":", "\n", "        ", "\"\"\" Many ways to reach objId, which one is best? \"\"\"", "\n", "states_where_visible", "=", "[", "]", "\n", "if", "self", ".", "using_raw_metadata", ":", "\n", "            ", "for", "s", "in", "self", ".", "metadata", ":", "\n", "                ", "objects", "=", "self", ".", "metadata", "[", "s", "]", "[", "\"objects\"", "]", "\n", "visible_objects", "=", "[", "o", "[", "\"objectId\"", "]", "for", "o", "in", "objects", "if", "o", "[", "\"visible\"", "]", "]", "\n", "if", "objId", "in", "visible_objects", ":", "\n", "                    ", "states_where_visible", ".", "append", "(", "s", ")", "\n", "", "", "", "else", ":", "\n", "            ", "states_where_visible", "=", "self", ".", "metadata", "[", "objId", "]", "\n", "\n", "# transform from strings into states", "\n", "", "states_where_visible", "=", "[", "\n", "self", ".", "get_state_from_str", "(", "*", "[", "float", "(", "x", ")", "for", "x", "in", "str_", ".", "split", "(", "\"|\"", ")", "]", ")", "\n", "for", "str_", "in", "states_where_visible", "\n", "]", "\n", "\n", "best_path", "=", "None", "\n", "best_path_len", "=", "0", "\n", "for", "t", "in", "states_where_visible", ":", "\n", "            ", "path", "=", "self", ".", "shortest_path", "(", "source_state", ",", "t", ")", "\n", "if", "len", "(", "path", ")", "<", "best_path_len", "or", "best_path", "is", "None", ":", "\n", "                ", "best_path", "=", "path", "\n", "best_path_len", "=", "len", "(", "path", ")", "\n", "", "", "best_plan", "=", "[", "]", "\n", "\n", "if", "get_plan", ":", "\n", "            ", "best_plan", "=", "self", ".", "optimal_plan", "(", "source_state", ",", "best_path", ")", "\n", "\n", "", "return", "best_path", ",", "best_path_len", ",", "best_plan", "\n", "\n"]], "home.repos.pwc.inspect_result.allenai_savn.datasets.offline_controller_with_small_rotation.OfflineControllerWithSmallRotation.visualize_plan": [[801, 810], ["offline_controller_with_small_rotation.OfflineControllerWithSmallRotation.controller.teleport_to_state", "time.sleep", "print", "offline_controller_with_small_rotation.OfflineControllerWithSmallRotation.controller.step", "time.sleep", "dict"], "methods", ["home.repos.pwc.inspect_result.allenai_savn.datasets.offline_controller_with_small_rotation.ExhaustiveBFSController.teleport_to_state", "home.repos.pwc.inspect_result.allenai_savn.episodes.basic_episode.BasicEpisode.step"], ["", "def", "visualize_plan", "(", "self", ",", "source", ",", "plan", ")", ":", "\n", "        ", "\"\"\" Visualize the best path from source to plan. \"\"\"", "\n", "assert", "self", ".", "visualize", "\n", "self", ".", "controller", ".", "teleport_to_state", "(", "source", ")", "\n", "time", ".", "sleep", "(", "0.5", ")", "\n", "for", "a", "in", "plan", ":", "\n", "            ", "print", "(", "a", ")", "\n", "self", ".", "controller", ".", "step", "(", "dict", "(", "action", "=", "a", ")", ")", "\n", "time", ".", "sleep", "(", "0.5", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.allenai_savn.datasets.offline_controller_with_small_rotation.OfflineControllerWithSmallRotation.object_is_visible": [[811, 818], ["str", "str"], "methods", ["None"], ["", "", "def", "object_is_visible", "(", "self", ",", "objId", ")", ":", "\n", "        ", "if", "self", ".", "using_raw_metadata", ":", "\n", "            ", "objects", "=", "self", ".", "metadata", "[", "str", "(", "self", ".", "state", ")", "]", "[", "\"objects\"", "]", "\n", "visible_objects", "=", "[", "o", "[", "\"objectId\"", "]", "for", "o", "in", "objects", "if", "o", "[", "\"visible\"", "]", "]", "\n", "return", "objId", "in", "visible_objects", "\n", "", "else", ":", "\n", "            ", "return", "str", "(", "self", ".", "state", ")", "in", "self", ".", "metadata", "[", "objId", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.allenai_savn.datasets.offline_controller_with_small_rotation.OfflineControllerWithSmallRotation._successful_event": [[819, 822], ["offline_controller_with_small_rotation.OfflineControllerWithSmallRotationEvent", "offline_controller_with_small_rotation.OfflineControllerWithSmallRotation.get_image"], "methods", ["home.repos.pwc.inspect_result.allenai_savn.datasets.offline_controller_with_small_rotation.OfflineControllerWithSmallRotation.get_image"], ["", "", "def", "_successful_event", "(", "self", ")", ":", "\n", "        ", "return", "OfflineControllerWithSmallRotationEvent", "(", "\n", "self", ".", "last_action_success", ",", "self", ".", "scene_name", ",", "self", ".", "state", ",", "self", ".", "get_image", "(", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.allenai_savn.datasets.offline_controller_with_small_rotation.OfflineControllerWithSmallRotation.get_image": [[824, 826], ["str"], "methods", ["None"], ["", "def", "get_image", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "images", "[", "str", "(", "self", ".", "state", ")", "]", "[", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.allenai_savn.datasets.offline_controller_with_small_rotation.OfflineControllerWithSmallRotation.all_objects": [[827, 832], ["offline_controller_with_small_rotation.OfflineControllerWithSmallRotation.metadata.keys", "str"], "methods", ["None"], ["", "def", "all_objects", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "using_raw_metadata", ":", "\n", "            ", "return", "[", "o", "[", "\"objectId\"", "]", "for", "o", "in", "self", ".", "metadata", "[", "str", "(", "self", ".", "state", ")", "]", "[", "\"objects\"", "]", "]", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "metadata", ".", "keys", "(", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.allenai_savn.datasets.base_controller.BaseController.__init__": [[5, 7], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.allenai_savn.episodes.test_val_episode.TestValEpisode.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "BaseController", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.allenai_savn.datasets.base_controller.BaseController.start": [[8, 10], ["NotImplementedError"], "methods", ["None"], ["", "def", "start", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.allenai_savn.datasets.base_controller.BaseController.reset": [[11, 13], ["NotImplementedError"], "methods", ["None"], ["", "def", "reset", "(", "self", ",", "scene_name", "=", "None", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.allenai_savn.datasets.base_controller.BaseController.step": [[14, 16], ["NotImplementedError"], "methods", ["None"], ["", "def", "step", "(", "self", ",", "action", ",", "raise_for_failure", "=", "False", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.allenai_savn.datasets.scene_util.make_scene_name": [[1, 8], ["str", "str", "str"], "function", ["None"], ["def", "make_scene_name", "(", "type", ",", "num", ")", ":", "\n", "    ", "if", "type", "==", "\"\"", ":", "\n", "        ", "return", "\"FloorPlan\"", "+", "str", "(", "num", ")", "\n", "", "elif", "num", "<", "10", ":", "\n", "        ", "return", "\"FloorPlan\"", "+", "type", "+", "\"0\"", "+", "str", "(", "num", ")", "\n", "", "else", ":", "\n", "        ", "return", "\"FloorPlan\"", "+", "type", "+", "str", "(", "num", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.allenai_savn.datasets.scene_util.get_scenes": [[10, 34], ["scene_str.split", "len", "[].split", "[].split", "range", "[].split", "len", "scene_util.make_scene_name", "new_out.append", "new_out.append", "range", "len", "int", "int"], "function", ["home.repos.pwc.inspect_result.allenai_savn.datasets.scene_util.make_scene_name"], ["", "", "def", "get_scenes", "(", "scene_str", ")", ":", "\n", "    ", "scene_str_split", "=", "scene_str", ".", "split", "(", "\"+\"", ")", "\n", "if", "len", "(", "scene_str_split", ")", "==", "1", ":", "\n", "        ", "return", "scene_str_split", "[", "0", "]", "[", "1", ":", "-", "1", "]", ".", "split", "(", "\",\"", ")", "\n", "", "else", ":", "\n", "        ", "pre", "=", "scene_str_split", "[", "0", "]", "[", "1", ":", "-", "1", "]", ".", "split", "(", "\",\"", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "pre", ")", ")", ":", "\n", "            ", "if", "pre", "[", "i", "]", "==", "\"0\"", ":", "\n", "                ", "pre", "[", "i", "]", "=", "\"\"", "\n", "\n", "", "", "post", "=", "scene_str_split", "[", "1", "]", "[", "1", ":", "-", "1", "]", ".", "split", "(", "\"-\"", ")", "\n", "scene_names", "=", "[", "\n", "[", "make_scene_name", "(", "j", ",", "i", ")", "for", "i", "in", "range", "(", "int", "(", "post", "[", "0", "]", ")", ",", "int", "(", "post", "[", "1", "]", ")", "+", "1", ")", "]", "\n", "for", "j", "in", "pre", "\n", "]", "\n", "# flatten list of lists to list", "\n", "out", "=", "[", "i", "+", "\"_physics\"", "for", "s", "in", "scene_names", "for", "i", "in", "s", "]", "\n", "new_out", "=", "[", "]", "\n", "for", "k", "in", "out", ":", "\n", "            ", "if", "(", "\"n3\"", "in", "k", "or", "\"n4\"", "in", "k", ")", "and", "len", "(", "k", ")", "==", "20", ":", "\n", "                ", "new_out", ".", "append", "(", "k", "[", ":", "12", "]", ")", "\n", "", "else", ":", "\n", "                ", "new_out", ".", "append", "(", "k", ")", "\n", "", "", "return", "new_out", "\n", "", "", ""]], "home.repos.pwc.inspect_result.allenai_savn.datasets.data.name_to_num": [[12, 14], ["None"], "function", ["None"], ["def", "name_to_num", "(", "name", ")", ":", "\n", "    ", "return", "[", "\"kitchen\"", ",", "\"living_room\"", ",", "\"bedroom\"", ",", "\"bathroom\"", "]", ".", "index", "(", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.allenai_savn.datasets.data.num_to_name": [[16, 18], ["int"], "function", ["None"], ["", "def", "num_to_name", "(", "num", ")", ":", "\n", "    ", "return", "[", "\"kitchen\"", ",", "\"\"", ",", "\"living_room\"", ",", "\"bedroom\"", ",", "\"bathroom\"", "]", "[", "int", "(", "num", "/", "100", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.allenai_savn.datasets.data.get_data": [[20, 41], ["range", "len", "idx.append", "scene_util.get_scenes", "mapping.index", "int"], "function", ["home.repos.pwc.inspect_result.allenai_savn.datasets.scene_util.get_scenes"], ["", "def", "get_data", "(", "scene_types", ",", "scenes", ")", ":", "\n", "\n", "    ", "mapping", "=", "[", "\"kitchen\"", ",", "\"living_room\"", ",", "\"bedroom\"", ",", "\"bathroom\"", "]", "\n", "idx", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "len", "(", "scene_types", ")", ")", ":", "\n", "        ", "idx", ".", "append", "(", "mapping", ".", "index", "(", "scene_types", "[", "j", "]", ")", ")", "\n", "\n", "", "scenes", "=", "[", "\n", "get_scenes", "(", "\"[{}]+{}\"", ".", "format", "(", "num", "+", "int", "(", "num", ">", "0", ")", ",", "scenes", ")", ")", "for", "num", "in", "[", "0", ",", "1", ",", "2", ",", "3", "]", "\n", "]", "\n", "\n", "possible_targets", "=", "FULL_OBJECT_CLASS_LIST", "\n", "\n", "targets", "=", "[", "\n", "KITCHEN_OBJECT_CLASS_LIST", ",", "\n", "LIVING_ROOM_OBJECT_CLASS_LIST", ",", "\n", "BEDROOM_OBJECT_CLASS_LIST", ",", "\n", "BATHROOM_OBJECT_CLASS_LIST", ",", "\n", "]", "\n", "\n", "return", "[", "scenes", "[", "i", "]", "for", "i", "in", "idx", "]", ",", "possible_targets", ",", "[", "targets", "[", "i", "]", "for", "i", "in", "idx", "]", "\n", "", ""]], "home.repos.pwc.inspect_result.allenai_savn.datasets.target_util.get_object_list": [[4, 6], ["None"], "function", ["None"], ["def", "get_object_list", "(", "object_list_str", ")", ":", "\n", "    ", "return", "FULL_OBJECT_CLASS_LIST", "\n", "\n"]], "home.repos.pwc.inspect_result.allenai_savn.datasets.target_util.get_object_index": [[8, 13], ["idxs.append", "all_objects.index"], "function", ["None"], ["", "def", "get_object_index", "(", "target_objects", ",", "all_objects", ")", ":", "\n", "    ", "idxs", "=", "[", "]", "\n", "for", "o", "in", "target_objects", ":", "\n", "        ", "idxs", ".", "append", "(", "all_objects", ".", "index", "(", "o", ")", ")", "\n", "", "return", "idxs", "\n", "", ""]], "home.repos.pwc.inspect_result.allenai_savn.datasets.glove.Glove.__init__": [[5, 7], ["h5py.File"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "glove_file", ")", ":", "\n", "        ", "self", ".", "glove_embeddings", "=", "h5py", ".", "File", "(", "glove_file", ",", "\"r\"", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.allenai_savn.datasets.environment.Environment.__init__": [[13, 39], ["offline_controller_with_small_rotation.OfflineControllerWithSmallRotation"], "methods", ["None"], ["def", "__init__", "(", "\n", "self", ",", "\n", "use_offline_controller", ",", "\n", "grid_size", "=", "0.25", ",", "\n", "fov", "=", "100.0", ",", "\n", "offline_data_dir", "=", "\"~/data/offline_data/\"", ",", "\n", "images_file_name", "=", "\"images.hdf5\"", ",", "\n", "local_executable_path", "=", "None", ",", "\n", ")", ":", "\n", "\n", "        ", "self", ".", "offline_data_dir", "=", "offline_data_dir", "\n", "self", ".", "use_offline_controller", "=", "use_offline_controller", "\n", "self", ".", "images_file_name", "=", "images_file_name", "\n", "self", ".", "controller", "=", "OfflineControllerWithSmallRotation", "(", "\n", "grid_size", "=", "grid_size", ",", "\n", "fov", "=", "fov", ",", "\n", "offline_data_dir", "=", "offline_data_dir", ",", "\n", "images_file_name", "=", "images_file_name", ",", "\n", "visualize", "=", "False", ",", "\n", "local_executable_path", "=", "local_executable_path", ",", "\n", ")", "\n", "self", ".", "grid_size", "=", "grid_size", "\n", "self", ".", "_reachable_points", "=", "None", "\n", "self", ".", "start_state", "=", "None", "\n", "self", ".", "last_action", "=", "None", "\n", "self", ".", "fov", "=", "fov", "\n", "\n"]], "home.repos.pwc.inspect_result.allenai_savn.datasets.environment.Environment.scene_name": [[40, 43], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "scene_name", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "controller", ".", "last_event", ".", "metadata", "[", "\"sceneName\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.allenai_savn.datasets.environment.Environment.current_frame": [[44, 47], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "current_frame", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "controller", ".", "last_event", ".", "frame", "\n", "\n"]], "home.repos.pwc.inspect_result.allenai_savn.datasets.environment.Environment.last_event": [[48, 51], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "last_event", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "controller", ".", "last_event", "\n", "\n"]], "home.repos.pwc.inspect_result.allenai_savn.datasets.environment.Environment.last_action_success": [[52, 57], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "last_action_success", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "use_offline_controller", ":", "\n", "            ", "return", "self", ".", "controller", ".", "last_action_success", "\n", "", "return", "self", ".", "controller", ".", "last_event", ".", "metadata", "[", "\"lastActionSuccess\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.allenai_savn.datasets.environment.Environment.object_is_visible": [[58, 65], ["environment.Environment.controller.object_is_visible"], "methods", ["home.repos.pwc.inspect_result.allenai_savn.datasets.environment.Environment.object_is_visible"], ["", "def", "object_is_visible", "(", "self", ",", "objId", ")", ":", "\n", "        ", "if", "not", "self", ".", "use_offline_controller", ":", "\n", "            ", "objects", "=", "self", ".", "last_event", ".", "metadata", "[", "\"objects\"", "]", "\n", "visible_objects", "=", "[", "o", "[", "\"objectId\"", "]", "for", "o", "in", "objects", "if", "o", "[", "\"visible\"", "]", "]", "\n", "return", "objId", "in", "visible_objects", "\n", "\n", "", "return", "self", ".", "controller", ".", "object_is_visible", "(", "objId", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.allenai_savn.datasets.environment.Environment.start": [[66, 70], ["environment.Environment.controller.start", "environment.Environment.reset"], "methods", ["home.repos.pwc.inspect_result.allenai_savn.datasets.environment.Environment.start", "home.repos.pwc.inspect_result.allenai_savn.episodes.basic_episode.BasicEpisode.reset"], ["", "def", "start", "(", "self", ",", "scene_name", ")", ":", "\n", "        ", "\"\"\" Begin the scene. \"\"\"", "\n", "self", ".", "controller", ".", "start", "(", ")", "\n", "self", ".", "reset", "(", "scene_name", "=", "scene_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.allenai_savn.datasets.environment.Environment.reset": [[71, 76], ["environment.Environment.controller.reset", "environment.Environment.controller.step", "dict"], "methods", ["home.repos.pwc.inspect_result.allenai_savn.episodes.basic_episode.BasicEpisode.reset", "home.repos.pwc.inspect_result.allenai_savn.episodes.basic_episode.BasicEpisode.step"], ["", "def", "reset", "(", "self", ",", "scene_name", ")", ":", "\n", "        ", "\"\"\" Reset the scene. \"\"\"", "\n", "self", ".", "controller", ".", "reset", "(", "scene_name", ")", "\n", "self", ".", "controller", ".", "step", "(", "\n", "dict", "(", "action", "=", "\"Initialize\"", ",", "gridSize", "=", "self", ".", "grid_size", ",", "fieldOfView", "=", "self", ".", "fov", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.allenai_savn.datasets.environment.Environment.all_objects": [[78, 83], ["environment.Environment.controller.all_objects"], "methods", ["home.repos.pwc.inspect_result.allenai_savn.datasets.environment.Environment.all_objects"], ["", "def", "all_objects", "(", "self", ")", ":", "\n", "        ", "if", "not", "self", ".", "use_offline_controller", ":", "\n", "            ", "objects", "=", "self", ".", "controller", ".", "last_event", ".", "metadata", "[", "\"objects\"", "]", "\n", "return", "[", "o", "[", "\"objectId\"", "]", "for", "o", "in", "objects", "]", "\n", "", "return", "self", ".", "controller", ".", "all_objects", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.allenai_savn.datasets.environment.Environment.step": [[84, 86], ["environment.Environment.controller.step"], "methods", ["home.repos.pwc.inspect_result.allenai_savn.episodes.basic_episode.BasicEpisode.step"], ["", "def", "step", "(", "self", ",", "action_dict", ")", ":", "\n", "        ", "return", "self", ".", "controller", ".", "step", "(", "action_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.allenai_savn.datasets.environment.Environment.teleport_agent_to": [[87, 92], ["environment.Environment.controller.step", "environment.Environment.controller.step", "environment.Environment.controller.step", "dict", "dict", "dict"], "methods", ["home.repos.pwc.inspect_result.allenai_savn.episodes.basic_episode.BasicEpisode.step", "home.repos.pwc.inspect_result.allenai_savn.episodes.basic_episode.BasicEpisode.step", "home.repos.pwc.inspect_result.allenai_savn.episodes.basic_episode.BasicEpisode.step"], ["", "def", "teleport_agent_to", "(", "self", ",", "x", ",", "y", ",", "z", ",", "rotation", ",", "horizon", ")", ":", "\n", "        ", "\"\"\" Teleport the agent to (x,y,z) with given rotation and horizon. \"\"\"", "\n", "self", ".", "controller", ".", "step", "(", "dict", "(", "action", "=", "\"Teleport\"", ",", "x", "=", "x", ",", "y", "=", "y", ",", "z", "=", "z", ")", ")", "\n", "self", ".", "controller", ".", "step", "(", "dict", "(", "action", "=", "\"Rotate\"", ",", "rotation", "=", "rotation", ")", ")", "\n", "self", ".", "controller", ".", "step", "(", "dict", "(", "action", "=", "\"Look\"", ",", "horizon", "=", "horizon", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.allenai_savn.datasets.environment.Environment.random_reachable_state": [[93, 104], ["random.choice", "random.choice", "random.choice", "copy.copy", "random.seed"], "methods", ["None"], ["", "def", "random_reachable_state", "(", "self", ",", "seed", "=", "None", ")", ":", "\n", "        ", "\"\"\" Get a random reachable state. \"\"\"", "\n", "if", "seed", "is", "not", "None", ":", "\n", "            ", "random", ".", "seed", "(", "seed", ")", "\n", "", "xyz", "=", "random", ".", "choice", "(", "self", ".", "reachable_points", ")", "\n", "rotation", "=", "random", ".", "choice", "(", "[", "0", ",", "90", ",", "180", ",", "270", "]", ")", "\n", "horizon", "=", "random", ".", "choice", "(", "[", "0", ",", "30", ",", "330", "]", ")", "\n", "state", "=", "copy", ".", "copy", "(", "xyz", ")", "\n", "state", "[", "\"rotation\"", "]", "=", "rotation", "\n", "state", "[", "\"horizon\"", "]", "=", "horizon", "\n", "return", "state", "\n", "\n"]], "home.repos.pwc.inspect_result.allenai_savn.datasets.environment.Environment.randomize_agent_location": [[105, 115], ["environment.Environment.controller.randomize_state", "copy.deepcopy", "environment.Environment.random_reachable_state", "environment.Environment.teleport_agent_to", "copy.deepcopy"], "methods", ["home.repos.pwc.inspect_result.allenai_savn.datasets.offline_controller_with_small_rotation.OfflineControllerWithSmallRotation.randomize_state", "home.repos.pwc.inspect_result.allenai_savn.datasets.environment.Environment.random_reachable_state", "home.repos.pwc.inspect_result.allenai_savn.datasets.environment.Environment.teleport_agent_to"], ["", "def", "randomize_agent_location", "(", "self", ",", "seed", "=", "None", ")", ":", "\n", "        ", "\"\"\" Put agent in a random reachable state. \"\"\"", "\n", "if", "not", "self", ".", "use_offline_controller", ":", "\n", "            ", "state", "=", "self", ".", "random_reachable_state", "(", "seed", "=", "seed", ")", "\n", "self", ".", "teleport_agent_to", "(", "**", "state", ")", "\n", "self", ".", "start_state", "=", "copy", ".", "deepcopy", "(", "state", ")", "\n", "return", "\n", "\n", "", "self", ".", "controller", ".", "randomize_state", "(", ")", "\n", "self", ".", "start_state", "=", "copy", ".", "deepcopy", "(", "self", ".", "controller", ".", "state", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.allenai_savn.datasets.environment.Environment.back_to_start": [[116, 126], ["environment.Environment.reset", "environment.Environment.teleport_agent_to", "environment.Environment.controller.back_to_start"], "methods", ["home.repos.pwc.inspect_result.allenai_savn.episodes.basic_episode.BasicEpisode.reset", "home.repos.pwc.inspect_result.allenai_savn.datasets.environment.Environment.teleport_agent_to", "home.repos.pwc.inspect_result.allenai_savn.datasets.environment.Environment.back_to_start"], ["", "def", "back_to_start", "(", "self", ")", ":", "\n", "\n", "        ", "if", "self", ".", "start_state", "is", "None", ":", "\n", "            ", "self", ".", "reset", "(", "self", ".", "scene_name", ")", "\n", "return", "\n", "\n", "", "if", "not", "self", ".", "use_offline_controller", ":", "\n", "            ", "self", ".", "teleport_agent_to", "(", "**", "self", ".", "start_state", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "controller", ".", "back_to_start", "(", "self", ".", "start_state", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.allenai_savn.datasets.environment.Environment.reachable_points": [[127, 138], ["os.path.join", "json.load", "os.path.exists", "IOError", "open"], "methods", ["None"], ["", "", "@", "property", "\n", "def", "reachable_points", "(", "self", ")", ":", "\n", "        ", "\"\"\" Use the JSON file to get the reachable points. \"\"\"", "\n", "if", "self", ".", "_reachable_points", "is", "not", "None", ":", "\n", "            ", "return", "self", ".", "_reachable_points", "\n", "\n", "", "points_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "offline_data_dir", ",", "self", ".", "scene_name", ",", "\"grid.json\"", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "points_path", ")", ":", "\n", "            ", "raise", "IOError", "(", "\"Path {0} does not exist\"", ".", "format", "(", "points_path", ")", ")", "\n", "", "self", ".", "_reachable_points", "=", "json", ".", "load", "(", "open", "(", "points_path", ")", ")", "\n", "return", "self", ".", "_reachable_points", "\n", "", "", ""]], "home.repos.pwc.inspect_result.allenai_savn.agents.random_agent.RandomNavigationAgent.__init__": [[11, 18], ["episodes.basic_episode.BasicEpisode", "agent.ThorAgent.__init__", "create_model"], "methods", ["home.repos.pwc.inspect_result.allenai_savn.episodes.test_val_episode.TestValEpisode.__init__"], ["    ", "def", "__init__", "(", "self", ",", "create_model", ",", "args", ",", "rank", ",", "gpu_id", ")", ":", "\n", "        ", "max_episode_length", "=", "args", ".", "max_episode_length", "\n", "episode", "=", "BasicEpisode", "(", "args", ",", "gpu_id", ",", "args", ".", "strict_done", ")", "\n", "super", "(", "RandomNavigationAgent", ",", "self", ")", ".", "__init__", "(", "\n", "create_model", "(", "args", ")", ",", "args", ",", "rank", ",", "episode", ",", "max_episode_length", ",", "gpu_id", "\n", ")", "\n", "self", ".", "action_space", "=", "args", ".", "action_space", "\n", "\n"]], "home.repos.pwc.inspect_result.allenai_savn.agents.random_agent.RandomNavigationAgent.eval_at_state": [[21, 27], ["torch.ones", "torch.ones", "utils.net_util.gpuify", "utils.net_util.gpuify", "models.model_io.ModelInput", "models.model_io.ModelOutput"], "methods", ["home.repos.pwc.inspect_result.allenai_savn.utils.net_util.gpuify", "home.repos.pwc.inspect_result.allenai_savn.utils.net_util.gpuify"], ["def", "eval_at_state", "(", "self", ",", "params", "=", "None", ")", ":", "\n", "        ", "critic", "=", "torch", ".", "ones", "(", "1", ",", "1", ")", "\n", "actor", "=", "torch", ".", "ones", "(", "1", ",", "self", ".", "action_space", ")", "\n", "critic", "=", "gpuify", "(", "critic", ",", "self", ".", "gpu_id", ")", "\n", "actor", "=", "gpuify", "(", "actor", ",", "self", ".", "gpu_id", ")", "\n", "return", "ModelInput", "(", ")", ",", "ModelOutput", "(", "value", "=", "critic", ",", "logit", "=", "actor", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.allenai_savn.agents.random_agent.RandomNavigationAgent.reset_hidden": [[28, 30], ["None"], "methods", ["None"], ["", "def", "reset_hidden", "(", "self", ",", "volatile", "=", "False", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.allenai_savn.agents.random_agent.RandomNavigationAgent.repackage_hidden": [[31, 33], ["None"], "methods", ["None"], ["", "def", "repackage_hidden", "(", "self", ",", "volatile", "=", "False", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.allenai_savn.agents.random_agent.RandomNavigationAgent.preprocess_frame": [[34, 36], ["None"], "methods", ["None"], ["", "def", "preprocess_frame", "(", "self", ",", "frame", ")", ":", "\n", "        ", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.allenai_savn.agents.random_agent.RandomNavigationAgent.state": [[37, 39], ["None"], "methods", ["None"], ["", "def", "state", "(", "self", ")", ":", "\n", "        ", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.allenai_savn.agents.random_agent.RandomNavigationAgent.sync_with_shared": [[40, 42], ["None"], "methods", ["None"], ["", "def", "sync_with_shared", "(", "self", ",", "shared_model", ")", ":", "\n", "        ", "return", "\n", "", "", ""]], "home.repos.pwc.inspect_result.allenai_savn.agents.navigation_agent.NavigationAgent.__init__": [[11, 24], ["episode_class", "episode_class.", "agent.ThorAgent.__init__", "create_model"], "methods", ["home.repos.pwc.inspect_result.allenai_savn.utils.class_finder.episode_class", "home.repos.pwc.inspect_result.allenai_savn.episodes.test_val_episode.TestValEpisode.__init__"], ["def", "__init__", "(", "self", ",", "create_model", ",", "args", ",", "rank", ",", "gpu_id", ")", ":", "\n", "        ", "max_episode_length", "=", "args", ".", "max_episode_length", "\n", "hidden_state_sz", "=", "args", ".", "hidden_state_sz", "\n", "self", ".", "action_space", "=", "args", ".", "action_space", "\n", "from", "utils", ".", "class_finder", "import", "episode_class", "\n", "\n", "episode_constructor", "=", "episode_class", "(", "args", ".", "episode_type", ")", "\n", "episode", "=", "episode_constructor", "(", "args", ",", "gpu_id", ",", "args", ".", "strict_done", ")", "\n", "\n", "super", "(", "NavigationAgent", ",", "self", ")", ".", "__init__", "(", "\n", "create_model", "(", "args", ")", ",", "args", ",", "rank", ",", "episode", ",", "max_episode_length", ",", "gpu_id", "\n", ")", "\n", "self", ".", "hidden_state_sz", "=", "hidden_state_sz", "\n", "\n"]], "home.repos.pwc.inspect_result.allenai_savn.agents.navigation_agent.NavigationAgent.eval_at_state": [[25, 36], ["models.model_io.ModelInput", "navigation_agent.NavigationAgent.state", "navigation_agent.NavigationAgent.model.forward"], "methods", ["home.repos.pwc.inspect_result.allenai_savn.agents.agent.ThorAgent.state", "home.repos.pwc.inspect_result.allenai_savn.models.tcn.TemporalConvNet.forward"], ["", "def", "eval_at_state", "(", "self", ",", "model_options", ")", ":", "\n", "        ", "model_input", "=", "ModelInput", "(", ")", "\n", "if", "self", ".", "episode", ".", "current_frame", "is", "None", ":", "\n", "            ", "model_input", ".", "state", "=", "self", ".", "state", "(", ")", "\n", "", "else", ":", "\n", "            ", "model_input", ".", "state", "=", "self", ".", "episode", ".", "current_frame", "\n", "", "model_input", ".", "hidden", "=", "self", ".", "hidden", "\n", "model_input", ".", "target_class_embedding", "=", "self", ".", "episode", ".", "glove_embedding", "\n", "model_input", ".", "action_probs", "=", "self", ".", "last_action_probs", "\n", "\n", "return", "model_input", ",", "self", ".", "model", ".", "forward", "(", "model_input", ",", "model_options", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.allenai_savn.agents.navigation_agent.NavigationAgent.preprocess_frame": [[37, 41], ["torch.Tensor", "utils.net_util.gpuify"], "methods", ["home.repos.pwc.inspect_result.allenai_savn.utils.net_util.gpuify"], ["", "def", "preprocess_frame", "(", "self", ",", "frame", ")", ":", "\n", "        ", "\"\"\" Preprocess the current frame for input into the model. \"\"\"", "\n", "state", "=", "torch", ".", "Tensor", "(", "frame", ")", "\n", "return", "gpuify", "(", "state", ",", "self", ".", "gpu_id", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.allenai_savn.agents.navigation_agent.NavigationAgent.reset_hidden": [[42, 56], ["utils.net_util.gpuify", "torch.zeros", "torch.cuda.device", "torch.zeros", "torch.zeros", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.allenai_savn.utils.net_util.gpuify"], ["", "def", "reset_hidden", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "gpu_id", ">=", "0", ":", "\n", "            ", "with", "torch", ".", "cuda", ".", "device", "(", "self", ".", "gpu_id", ")", ":", "\n", "                ", "self", ".", "hidden", "=", "(", "\n", "torch", ".", "zeros", "(", "1", ",", "self", ".", "hidden_state_sz", ")", ".", "cuda", "(", ")", ",", "\n", "torch", ".", "zeros", "(", "1", ",", "self", ".", "hidden_state_sz", ")", ".", "cuda", "(", ")", ",", "\n", ")", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "hidden", "=", "(", "\n", "torch", ".", "zeros", "(", "1", ",", "self", ".", "hidden_state_sz", ")", ",", "\n", "torch", ".", "zeros", "(", "1", ",", "self", ".", "hidden_state_sz", ")", ",", "\n", ")", "\n", "", "self", ".", "last_action_probs", "=", "gpuify", "(", "\n", "torch", ".", "zeros", "(", "(", "1", ",", "self", ".", "action_space", ")", ")", ",", "self", ".", "gpu_id", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.allenai_savn.agents.navigation_agent.NavigationAgent.repackage_hidden": [[58, 61], ["navigation_agent.NavigationAgent.last_action_probs.detach", "navigation_agent.NavigationAgent.hidden[].detach", "navigation_agent.NavigationAgent.hidden[].detach"], "methods", ["None"], ["", "def", "repackage_hidden", "(", "self", ")", ":", "\n", "        ", "self", ".", "hidden", "=", "(", "self", ".", "hidden", "[", "0", "]", ".", "detach", "(", ")", ",", "self", ".", "hidden", "[", "1", "]", ".", "detach", "(", ")", ")", "\n", "self", ".", "last_action_probs", "=", "self", ".", "last_action_probs", ".", "detach", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.allenai_savn.agents.navigation_agent.NavigationAgent.state": [[62, 64], ["navigation_agent.NavigationAgent.preprocess_frame", "navigation_agent.NavigationAgent.episode.state_for_agent"], "methods", ["home.repos.pwc.inspect_result.allenai_savn.agents.agent.ThorAgent.preprocess_frame", "home.repos.pwc.inspect_result.allenai_savn.episodes.basic_episode.BasicEpisode.state_for_agent"], ["", "def", "state", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "preprocess_frame", "(", "self", ".", "episode", ".", "state_for_agent", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.allenai_savn.agents.navigation_agent.NavigationAgent.exit": [[65, 67], ["None"], "methods", ["None"], ["", "def", "exit", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "", "", ""]], "home.repos.pwc.inspect_result.allenai_savn.agents.agent.ThorAgent.__init__": [[13, 50], ["torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed"], "methods", ["None"], ["def", "__init__", "(", "\n", "self", ",", "model", ",", "args", ",", "rank", ",", "episode", "=", "None", ",", "max_episode_length", "=", "1e3", ",", "gpu_id", "=", "-", "1", "\n", ")", ":", "\n", "        ", "self", ".", "gpu_id", "=", "gpu_id", "\n", "\n", "self", ".", "_model", "=", "None", "\n", "self", ".", "model", "=", "model", "\n", "self", ".", "_episode", "=", "episode", "\n", "self", ".", "eps_len", "=", "0", "\n", "self", ".", "values", "=", "[", "]", "\n", "self", ".", "log_probs", "=", "[", "]", "\n", "self", ".", "rewards", "=", "[", "]", "\n", "self", ".", "entropies", "=", "[", "]", "\n", "self", ".", "done", "=", "True", "\n", "self", ".", "info", "=", "None", "\n", "self", ".", "reward", "=", "0", "\n", "self", ".", "max_length", "=", "False", "\n", "self", ".", "hidden", "=", "None", "\n", "self", ".", "actions", "=", "[", "]", "\n", "self", ".", "probs", "=", "[", "]", "\n", "self", ".", "memory", "=", "[", "]", "\n", "self", ".", "done_action_probs", "=", "[", "]", "\n", "self", ".", "done_action_targets", "=", "[", "]", "\n", "self", ".", "max_episode_length", "=", "max_episode_length", "\n", "self", ".", "success", "=", "False", "\n", "self", ".", "backprop_t", "=", "0", "\n", "torch", ".", "manual_seed", "(", "args", ".", "seed", "+", "rank", ")", "\n", "if", "gpu_id", ">=", "0", ":", "\n", "            ", "torch", ".", "cuda", ".", "manual_seed", "(", "args", ".", "seed", "+", "rank", ")", "\n", "\n", "", "self", ".", "verbose", "=", "args", ".", "verbose", "\n", "self", ".", "learned_loss", "=", "args", ".", "learned_loss", "\n", "self", ".", "learned_input", "=", "None", "\n", "self", ".", "learned_t", "=", "0", "\n", "self", ".", "num_steps", "=", "args", ".", "num_steps", "\n", "self", ".", "hidden_state_sz", "=", "args", ".", "hidden_state_sz", "\n", "self", ".", "action_space", "=", "args", ".", "action_space", "\n", "\n"]], "home.repos.pwc.inspect_result.allenai_savn.agents.agent.ThorAgent.sync_with_shared": [[51, 58], ["agent.ThorAgent.model.load_state_dict", "torch.cuda.device", "torch.cuda.device", "torch.cuda.device", "torch.cuda.device", "agent.ThorAgent.model.load_state_dict", "shared_model.state_dict", "shared_model.state_dict"], "methods", ["None"], ["", "def", "sync_with_shared", "(", "self", ",", "shared_model", ")", ":", "\n", "        ", "\"\"\" Sync with the shared model. \"\"\"", "\n", "if", "self", ".", "gpu_id", ">=", "0", ":", "\n", "            ", "with", "torch", ".", "cuda", ".", "device", "(", "self", ".", "gpu_id", ")", ":", "\n", "                ", "self", ".", "model", ".", "load_state_dict", "(", "shared_model", ".", "state_dict", "(", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "model", ".", "load_state_dict", "(", "shared_model", ".", "state_dict", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.allenai_savn.agents.agent.ThorAgent.eval_at_state": [[59, 62], ["NotImplementedError"], "methods", ["None"], ["", "", "def", "eval_at_state", "(", "self", ",", "model_options", ")", ":", "\n", "        ", "\"\"\" Eval at state. \"\"\"", "\n", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.allenai_savn.agents.agent.ThorAgent.episode": [[63, 67], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "episode", "(", "self", ")", ":", "\n", "        ", "\"\"\" Return the current episode. \"\"\"", "\n", "return", "self", ".", "_episode", "\n", "\n"]], "home.repos.pwc.inspect_result.allenai_savn.agents.agent.ThorAgent.environment": [[68, 72], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "environment", "(", "self", ")", ":", "\n", "        ", "\"\"\" Return the current environmnet. \"\"\"", "\n", "return", "self", ".", "episode", ".", "environment", "\n", "\n"]], "home.repos.pwc.inspect_result.allenai_savn.agents.agent.ThorAgent.state": [[78, 81], ["NotImplementedError"], "methods", ["None"], ["", "@", "state", ".", "setter", "\n", "def", "state", "(", "self", ",", "value", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.allenai_savn.agents.agent.ThorAgent.model": [[92, 98], ["torch.cuda.device", "torch.cuda.device", "torch.cuda.device", "torch.cuda.device", "agent.ThorAgent.model.cuda"], "methods", ["None"], ["", "", "@", "model", ".", "setter", "\n", "def", "model", "(", "self", ",", "model_to_set", ")", ":", "\n", "        ", "self", ".", "_model", "=", "model_to_set", "\n", "if", "self", ".", "gpu_id", ">=", "0", "and", "self", ".", "_model", "is", "not", "None", ":", "\n", "            ", "with", "torch", ".", "cuda", ".", "device", "(", "self", ".", "gpu_id", ")", ":", "\n", "                ", "self", ".", "_model", "=", "self", ".", "model", ".", "cuda", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.allenai_savn.agents.agent.ThorAgent.print_info": [[87, 91], ["print"], "methods", ["None"], ["", "def", "print_info", "(", "self", ")", ":", "\n", "        ", "\"\"\" Print the actions. \"\"\"", "\n", "for", "action", "in", "self", ".", "actions", ":", "\n", "            ", "print", "(", "action", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.allenai_savn.agents.agent.ThorAgent._increment_episode_length": [[99, 109], ["None"], "methods", ["None"], ["", "", "", "def", "_increment_episode_length", "(", "self", ")", ":", "\n", "        ", "self", ".", "eps_len", "+=", "1", "\n", "if", "self", ".", "eps_len", ">=", "self", ".", "max_episode_length", ":", "\n", "            ", "if", "not", "self", ".", "done", ":", "\n", "                ", "self", ".", "max_length", "=", "True", "\n", "self", ".", "done", "=", "True", "\n", "", "else", ":", "\n", "                ", "self", ".", "max_length", "=", "False", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "max_length", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.allenai_savn.agents.agent.ThorAgent.action": [[110, 153], ["agent.ThorAgent.eval_at_state", "torch.softmax", "torch.softmax", "torch.log_softmax", "torch.log_softmax", "log_prob.gather.gather.gather", "agent.ThorAgent.episode.step", "agent.ThorAgent.probs.append", "agent.ThorAgent.entropies.append", "agent.ThorAgent.values.append", "agent.ThorAgent.log_probs.append", "agent.ThorAgent.rewards.append", "agent.ThorAgent.actions.append", "agent.ThorAgent.state", "agent.ThorAgent._increment_episode_length", "agent.ThorAgent.model.train", "agent.ThorAgent.model.eval", "torch.softmax.multinomial", "torch.autograd.Variable", "torch.autograd.Variable", "print", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["home.repos.pwc.inspect_result.allenai_savn.agents.agent.ThorAgent.eval_at_state", "home.repos.pwc.inspect_result.allenai_savn.episodes.basic_episode.BasicEpisode.step", "home.repos.pwc.inspect_result.allenai_savn.agents.agent.ThorAgent.state", "home.repos.pwc.inspect_result.allenai_savn.agents.agent.ThorAgent._increment_episode_length"], ["", "", "def", "action", "(", "self", ",", "model_options", ",", "training", ",", "demo", "=", "False", ")", ":", "\n", "        ", "\"\"\" Train the agent. \"\"\"", "\n", "if", "training", ":", "\n", "            ", "self", ".", "model", ".", "train", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "model", ".", "eval", "(", ")", "\n", "\n", "", "model_input", ",", "out", "=", "self", ".", "eval_at_state", "(", "model_options", ")", "\n", "self", ".", "hidden", "=", "out", ".", "hidden", "\n", "prob", "=", "F", ".", "softmax", "(", "out", ".", "logit", ",", "dim", "=", "1", ")", "\n", "action", "=", "prob", ".", "multinomial", "(", "1", ")", ".", "data", "\n", "log_prob", "=", "F", ".", "log_softmax", "(", "out", ".", "logit", ",", "dim", "=", "1", ")", "\n", "self", ".", "last_action_probs", "=", "prob", "\n", "entropy", "=", "-", "(", "log_prob", "*", "prob", ")", ".", "sum", "(", "1", ")", "\n", "log_prob", "=", "log_prob", ".", "gather", "(", "1", ",", "Variable", "(", "action", ")", ")", "\n", "self", ".", "reward", ",", "self", ".", "done", ",", "self", ".", "info", "=", "self", ".", "episode", ".", "step", "(", "action", "[", "0", ",", "0", "]", ")", "\n", "\n", "if", "self", ".", "verbose", ":", "\n", "            ", "print", "(", "self", ".", "episode", ".", "actions_list", "[", "action", "]", ")", "\n", "", "self", ".", "probs", ".", "append", "(", "prob", ")", "\n", "self", ".", "entropies", ".", "append", "(", "entropy", ")", "\n", "self", ".", "values", ".", "append", "(", "out", ".", "value", ")", "\n", "self", ".", "log_probs", ".", "append", "(", "log_prob", ")", "\n", "self", ".", "rewards", ".", "append", "(", "self", ".", "reward", ")", "\n", "self", ".", "actions", ".", "append", "(", "action", ")", "\n", "self", ".", "episode", ".", "prev_frame", "=", "model_input", ".", "state", "\n", "self", ".", "episode", ".", "current_frame", "=", "self", ".", "state", "(", ")", "\n", "\n", "if", "self", ".", "learned_loss", ":", "\n", "            ", "res", "=", "torch", ".", "cat", "(", "(", "self", ".", "hidden", "[", "0", "]", ",", "self", ".", "last_action_probs", ")", ",", "dim", "=", "1", ")", "\n", "if", "self", ".", "learned_input", "is", "None", ":", "\n", "                ", "self", ".", "learned_input", "=", "res", "\n", "", "else", ":", "\n", "                ", "self", ".", "learned_input", "=", "torch", ".", "cat", "(", "(", "self", ".", "learned_input", ",", "res", ")", ",", "dim", "=", "0", ")", "\n", "\n", "", "", "self", ".", "_increment_episode_length", "(", ")", "\n", "\n", "if", "self", ".", "episode", ".", "strict_done", "and", "action", "==", "DONE_ACTION_INT", ":", "\n", "            ", "self", ".", "success", "=", "self", ".", "info", "\n", "self", ".", "done", "=", "True", "\n", "", "elif", "self", ".", "done", ":", "\n", "            ", "self", ".", "success", "=", "not", "self", ".", "max_length", "\n", "", "return", "out", ".", "value", ",", "prob", ",", "action", "\n", "\n"]], "home.repos.pwc.inspect_result.allenai_savn.agents.agent.ThorAgent.reset_hidden": [[154, 157], ["NotImplementedError"], "methods", ["None"], ["", "def", "reset_hidden", "(", "self", ",", "volatile", "=", "False", ")", ":", "\n", "        ", "\"\"\" Reset the hidden state of the LSTM. \"\"\"", "\n", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.allenai_savn.agents.agent.ThorAgent.repackage_hidden": [[158, 161], ["NotImplementedError"], "methods", ["None"], ["", "def", "repackage_hidden", "(", "self", ",", "volatile", "=", "False", ")", ":", "\n", "        ", "\"\"\" Repackage the hidden state of the LSTM. \"\"\"", "\n", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.allenai_savn.agents.agent.ThorAgent.clear_actions": [[162, 178], ["None"], "methods", ["None"], ["", "def", "clear_actions", "(", "self", ")", ":", "\n", "        ", "\"\"\" Clear the information stored by the agent. \"\"\"", "\n", "self", ".", "values", "=", "[", "]", "\n", "self", ".", "log_probs", "=", "[", "]", "\n", "self", ".", "rewards", "=", "[", "]", "\n", "self", ".", "entropies", "=", "[", "]", "\n", "self", ".", "actions", "=", "[", "]", "\n", "self", ".", "probs", "=", "[", "]", "\n", "self", ".", "reward", "=", "0", "\n", "self", ".", "backprop_t", "=", "0", "\n", "self", ".", "memory", "=", "[", "]", "\n", "self", ".", "done_action_probs", "=", "[", "]", "\n", "self", ".", "done_action_targets", "=", "[", "]", "\n", "self", ".", "learned_input", "=", "None", "\n", "self", ".", "learned_t", "=", "0", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.allenai_savn.agents.agent.ThorAgent.preprocess_frame": [[179, 182], ["NotImplementedError"], "methods", ["None"], ["", "def", "preprocess_frame", "(", "self", ",", "frame", ")", ":", "\n", "        ", "\"\"\" Preprocess the current frame for input into the model. \"\"\"", "\n", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.allenai_savn.agents.agent.ThorAgent.exit": [[183, 186], ["None"], "methods", ["None"], ["", "def", "exit", "(", "self", ")", ":", "\n", "        ", "\"\"\" Called on exit. \"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.allenai_savn.agents.agent.ThorAgent.reset_episode": [[187, 190], ["agent.ThorAgent._episode.reset"], "methods", ["home.repos.pwc.inspect_result.allenai_savn.episodes.basic_episode.BasicEpisode.reset"], ["", "def", "reset_episode", "(", "self", ")", ":", "\n", "        ", "\"\"\" Reset the episode so that it is identical. \"\"\"", "\n", "return", "self", ".", "_episode", ".", "reset", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.allenai_savn.optimizers.shared_RMS_prop.SharedRMSprop.__init__": [[15, 41], ["collections.defaultdict", "torch.Optimizer.__init__", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "p.data.new().resize_as_().zero_", "p.data.new().resize_as_().zero_", "p.data.new().resize_as_().zero_", "p.data.new().resize_as_", "p.data.new().resize_as_", "p.data.new().resize_as_", "p.data.new", "p.data.new", "p.data.new"], "methods", ["home.repos.pwc.inspect_result.allenai_savn.episodes.test_val_episode.TestValEpisode.__init__"], ["def", "__init__", "(", "self", ",", "params", ",", "args", ")", ":", "\n", "# TODO remove constants", "\n", "        ", "lr", "=", "args", ".", "lr", "\n", "alpha", "=", "0.99", "\n", "eps", "=", "0.1", "\n", "weight_decay", "=", "0", "\n", "momentum", "=", "0", "\n", "centered", "=", "False", "\n", "defaults", "=", "defaultdict", "(", "\n", "lr", "=", "lr", ",", "\n", "alpha", "=", "alpha", ",", "\n", "eps", "=", "eps", ",", "\n", "weight_decay", "=", "weight_decay", ",", "\n", "momentum", "=", "momentum", ",", "\n", "centered", "=", "centered", ",", "\n", ")", "\n", "super", "(", "SharedRMSprop", ",", "self", ")", ".", "__init__", "(", "params", ",", "defaults", ")", "\n", "\n", "for", "group", "in", "self", ".", "param_groups", ":", "\n", "            ", "for", "p", "in", "group", "[", "\"params\"", "]", ":", "\n", "                ", "if", "p", ".", "requires_grad", ":", "\n", "                    ", "state", "=", "self", ".", "state", "[", "p", "]", "\n", "state", "[", "\"step\"", "]", "=", "torch", ".", "zeros", "(", "1", ")", "\n", "state", "[", "\"grad_avg\"", "]", "=", "p", ".", "data", ".", "new", "(", ")", ".", "resize_as_", "(", "p", ".", "data", ")", ".", "zero_", "(", ")", "\n", "state", "[", "\"square_avg\"", "]", "=", "p", ".", "data", ".", "new", "(", ")", ".", "resize_as_", "(", "p", ".", "data", ")", ".", "zero_", "(", ")", "\n", "state", "[", "\"momentum_buffer\"", "]", "=", "p", ".", "data", ".", "new", "(", ")", ".", "resize_as_", "(", "p", ".", "data", ")", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.allenai_savn.optimizers.shared_RMS_prop.SharedRMSprop.share_memory": [[42, 50], ["state[].share_memory_", "state[].share_memory_", "state[].share_memory_", "state[].share_memory_"], "methods", ["None"], ["", "", "", "", "def", "share_memory", "(", "self", ")", ":", "\n", "        ", "for", "group", "in", "self", ".", "param_groups", ":", "\n", "            ", "for", "p", "in", "group", "[", "\"params\"", "]", ":", "\n", "                ", "state", "=", "self", ".", "state", "[", "p", "]", "\n", "state", "[", "\"square_avg\"", "]", ".", "share_memory_", "(", ")", "\n", "state", "[", "\"step\"", "]", ".", "share_memory_", "(", ")", "\n", "state", "[", "\"grad_avg\"", "]", ".", "share_memory_", "(", ")", "\n", "state", "[", "\"momentum_buffer\"", "]", ".", "share_memory_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.allenai_savn.optimizers.shared_RMS_prop.SharedRMSprop.step": [[51, 99], ["closure", "square_avg.mul_().addcmul_", "RuntimeError", "grad.add.add.add", "grad_avg.mul_().add_", "square_avg.addcmul().sqrt().add_", "square_avg.sqrt().add_", "buf.mul_().addcdiv_", "p.data.add_", "p.data.addcdiv_", "square_avg.mul_", "grad_avg.mul_", "square_avg.addcmul().sqrt", "square_avg.sqrt", "buf.mul_", "square_avg.addcmul"], "methods", ["None"], ["", "", "", "def", "step", "(", "self", ",", "closure", "=", "None", ")", ":", "\n", "        ", "\"\"\"Performs a single optimization step.\n        Arguments:\n            closure (callable, optional): A closure that reevaluates the model\n                and returns the loss.\n        \"\"\"", "\n", "loss", "=", "None", "\n", "if", "closure", "is", "not", "None", ":", "\n", "            ", "loss", "=", "closure", "(", ")", "\n", "\n", "", "for", "group", "in", "self", ".", "param_groups", ":", "\n", "            ", "for", "p", "in", "group", "[", "\"params\"", "]", ":", "\n", "                ", "if", "p", ".", "grad", "is", "None", ":", "\n", "                    ", "continue", "\n", "", "grad", "=", "p", ".", "grad", ".", "data", "\n", "if", "grad", ".", "is_sparse", ":", "\n", "                    ", "raise", "RuntimeError", "(", "\"RMSprop does not support sparse gradients\"", ")", "\n", "", "state", "=", "self", ".", "state", "[", "p", "]", "\n", "\n", "square_avg", "=", "state", "[", "\"square_avg\"", "]", "\n", "alpha", "=", "group", "[", "\"alpha\"", "]", "\n", "\n", "state", "[", "\"step\"", "]", "+=", "1", "\n", "\n", "if", "group", "[", "\"weight_decay\"", "]", "!=", "0", ":", "\n", "                    ", "grad", "=", "grad", ".", "add", "(", "group", "[", "\"weight_decay\"", "]", ",", "p", ".", "data", ")", "\n", "\n", "", "square_avg", ".", "mul_", "(", "alpha", ")", ".", "addcmul_", "(", "1", "-", "alpha", ",", "grad", ",", "grad", ")", "\n", "\n", "if", "group", "[", "\"centered\"", "]", ":", "\n", "                    ", "grad_avg", "=", "state", "[", "\"grad_avg\"", "]", "\n", "grad_avg", ".", "mul_", "(", "alpha", ")", ".", "add_", "(", "1", "-", "alpha", ",", "grad", ")", "\n", "avg", "=", "(", "\n", "square_avg", ".", "addcmul", "(", "-", "1", ",", "grad_avg", ",", "grad_avg", ")", "\n", ".", "sqrt", "(", ")", "\n", ".", "add_", "(", "group", "[", "\"eps\"", "]", ")", "\n", ")", "\n", "", "else", ":", "\n", "                    ", "avg", "=", "square_avg", ".", "sqrt", "(", ")", ".", "add_", "(", "group", "[", "\"eps\"", "]", ")", "\n", "\n", "", "if", "group", "[", "\"momentum\"", "]", ">", "0", ":", "\n", "                    ", "buf", "=", "state", "[", "\"momentum_buffer\"", "]", "\n", "buf", ".", "mul_", "(", "group", "[", "\"momentum\"", "]", ")", ".", "addcdiv_", "(", "grad", ",", "avg", ")", "\n", "p", ".", "data", ".", "add_", "(", "-", "group", "[", "\"lr\"", "]", ",", "buf", ")", "\n", "", "else", ":", "\n", "                    ", "p", ".", "data", ".", "addcdiv_", "(", "-", "group", "[", "\"lr\"", "]", ",", "grad", ",", "avg", ")", "\n", "\n", "", "", "", "return", "loss", "\n", "", "", ""]], "home.repos.pwc.inspect_result.allenai_savn.optimizers.shared_adam.SharedAdam.__init__": [[16, 38], ["collections.defaultdict", "torch.Optimizer.__init__", "print", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "p.data.new().resize_as_().zero_", "p.data.new().resize_as_().zero_", "p.data.new().resize_as_().zero_", "p.data.new().resize_as_", "p.data.new().resize_as_", "p.data.new().resize_as_", "p.data.new", "p.data.new", "p.data.new"], "methods", ["home.repos.pwc.inspect_result.allenai_savn.episodes.test_val_episode.TestValEpisode.__init__"], ["def", "__init__", "(", "self", ",", "params", ",", "args", ")", ":", "\n", "# TODO: remove constants", "\n", "        ", "lr", "=", "args", ".", "lr", "\n", "betas", "=", "(", "0.9", ",", "0.999", ")", "\n", "eps", "=", "1e-3", "\n", "weight_decay", "=", "0", "\n", "amsgrad", "=", "args", ".", "amsgrad", "\n", "defaults", "=", "defaultdict", "(", "\n", "lr", "=", "lr", ",", "betas", "=", "betas", ",", "eps", "=", "eps", ",", "weight_decay", "=", "weight_decay", ",", "amsgrad", "=", "amsgrad", "\n", ")", "\n", "super", "(", "SharedAdam", ",", "self", ")", ".", "__init__", "(", "params", ",", "defaults", ")", "\n", "\n", "for", "group", "in", "self", ".", "param_groups", ":", "\n", "            ", "for", "p", "in", "group", "[", "\"params\"", "]", ":", "\n", "                ", "if", "p", ".", "requires_grad", ":", "\n", "                    ", "state", "=", "self", ".", "state", "[", "p", "]", "\n", "state", "[", "\"step\"", "]", "=", "torch", ".", "zeros", "(", "1", ")", "\n", "state", "[", "\"exp_avg\"", "]", "=", "p", ".", "data", ".", "new", "(", ")", ".", "resize_as_", "(", "p", ".", "data", ")", ".", "zero_", "(", ")", "\n", "state", "[", "\"exp_avg_sq\"", "]", "=", "p", ".", "data", ".", "new", "(", ")", ".", "resize_as_", "(", "p", ".", "data", ")", ".", "zero_", "(", ")", "\n", "state", "[", "\"max_exp_avg_sq\"", "]", "=", "p", ".", "data", ".", "new", "(", ")", ".", "resize_as_", "(", "p", ".", "data", ")", ".", "zero_", "(", ")", "\n", "\n", "", "", "", "print", "(", "\"initialized optimizer.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.allenai_savn.optimizers.shared_adam.SharedAdam.share_memory": [[39, 52], ["print", "print", "print", "state[].share_memory_", "state[].share_memory_", "state[].share_memory_", "state[].share_memory_"], "methods", ["None"], ["", "def", "share_memory", "(", "self", ")", ":", "\n", "        ", "print", "(", "\"attempting to share memory.\"", ")", "\n", "try", ":", "\n", "            ", "for", "group", "in", "self", ".", "param_groups", ":", "\n", "                ", "for", "p", "in", "group", "[", "\"params\"", "]", ":", "\n", "                    ", "state", "=", "self", ".", "state", "[", "p", "]", "\n", "state", "[", "\"step\"", "]", ".", "share_memory_", "(", ")", "\n", "state", "[", "\"exp_avg\"", "]", ".", "share_memory_", "(", ")", "\n", "state", "[", "\"exp_avg_sq\"", "]", ".", "share_memory_", "(", ")", "\n", "state", "[", "\"max_exp_avg_sq\"", "]", ".", "share_memory_", "(", ")", "\n", "", "", "", "except", "Exception", "as", "e", ":", "\n", "            ", "print", "(", "e", ")", "\n", "", "print", "(", "\"sharing memory.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.allenai_savn.optimizers.shared_adam.SharedAdam.step": [[53, 106], ["closure", "exp_avg.mul_().add_", "exp_avg_sq.mul_().addcmul_", "p.data.addcdiv_", "RuntimeError", "grad.add.add.add", "torch.max", "torch.max", "torch.max", "torch.max", "max_exp_avg_sq.sqrt().add_", "exp_avg_sq.sqrt().add_", "exp_avg.mul_", "exp_avg_sq.mul_", "state[].item", "state[].item", "math.sqrt", "max_exp_avg_sq.sqrt", "exp_avg_sq.sqrt"], "methods", ["None"], ["", "def", "step", "(", "self", ",", "closure", "=", "None", ")", ":", "\n", "        ", "\"\"\"Performs a single optimization step.\n        Arguments:\n            closure (callable, optional): A closure that reevaluates the model\n                and returns the loss.\n        \"\"\"", "\n", "loss", "=", "None", "\n", "if", "closure", "is", "not", "None", ":", "\n", "            ", "loss", "=", "closure", "(", ")", "\n", "\n", "", "for", "group", "in", "self", ".", "param_groups", ":", "\n", "            ", "for", "p", "in", "group", "[", "\"params\"", "]", ":", "\n", "                ", "if", "p", ".", "grad", "is", "None", ":", "\n", "                    ", "continue", "\n", "", "grad", "=", "p", ".", "grad", ".", "data", "\n", "if", "grad", ".", "is_sparse", ":", "\n", "                    ", "raise", "RuntimeError", "(", "\n", "\"Adam does not support sparse gradients, please consider SparseAdam instead\"", "\n", ")", "\n", "", "amsgrad", "=", "group", "[", "\"amsgrad\"", "]", "\n", "\n", "state", "=", "self", ".", "state", "[", "p", "]", "\n", "\n", "exp_avg", ",", "exp_avg_sq", "=", "state", "[", "\"exp_avg\"", "]", ",", "state", "[", "\"exp_avg_sq\"", "]", "\n", "if", "amsgrad", ":", "\n", "                    ", "max_exp_avg_sq", "=", "state", "[", "\"max_exp_avg_sq\"", "]", "\n", "", "beta1", ",", "beta2", "=", "group", "[", "\"betas\"", "]", "\n", "\n", "state", "[", "\"step\"", "]", "+=", "1", "\n", "\n", "if", "group", "[", "\"weight_decay\"", "]", "!=", "0", ":", "\n", "                    ", "grad", "=", "grad", ".", "add", "(", "group", "[", "\"weight_decay\"", "]", ",", "p", ".", "data", ")", "\n", "\n", "# Decay the first and second moment running average coefficient", "\n", "", "exp_avg", ".", "mul_", "(", "beta1", ")", ".", "add_", "(", "1", "-", "beta1", ",", "grad", ")", "\n", "exp_avg_sq", ".", "mul_", "(", "beta2", ")", ".", "addcmul_", "(", "1", "-", "beta2", ",", "grad", ",", "grad", ")", "\n", "\n", "if", "amsgrad", ":", "\n", "# Maintains the maximum of all 2nd moment running avg. till", "\n", "# now", "\n", "                    ", "torch", ".", "max", "(", "max_exp_avg_sq", ",", "exp_avg_sq", ",", "out", "=", "max_exp_avg_sq", ")", "\n", "# Use the max. for normalizing running avg. of gradient", "\n", "denom", "=", "max_exp_avg_sq", ".", "sqrt", "(", ")", ".", "add_", "(", "group", "[", "\"eps\"", "]", ")", "\n", "", "else", ":", "\n", "                    ", "denom", "=", "exp_avg_sq", ".", "sqrt", "(", ")", ".", "add_", "(", "group", "[", "\"eps\"", "]", ")", "\n", "\n", "", "bias_correction1", "=", "1", "-", "beta1", "**", "state", "[", "\"step\"", "]", ".", "item", "(", ")", "\n", "bias_correction2", "=", "1", "-", "beta2", "**", "state", "[", "\"step\"", "]", ".", "item", "(", ")", "\n", "step_size", "=", "group", "[", "\"lr\"", "]", "*", "math", ".", "sqrt", "(", "bias_correction2", ")", "/", "bias_correction1", "\n", "\n", "p", ".", "data", ".", "addcdiv_", "(", "-", "step_size", ",", "exp_avg", ",", "denom", ")", "\n", "\n", "", "", "return", "loss", "\n", "", "", ""]], "home.repos.pwc.inspect_result.allenai_savn.models.basemodel.BaseModel.__init__": [[12, 54], ["super().__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LSTMCell", "torch.LSTMCell", "torch.LSTMCell", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "basemodel.BaseModel.apply", "torch.init.calculate_gain", "torch.init.calculate_gain", "torch.init.calculate_gain", "basemodel.BaseModel.conv1.weight.data.mul_", "utils.net_util.norm_col_init", "basemodel.BaseModel.actor_linear.bias.data.fill_", "utils.net_util.norm_col_init", "basemodel.BaseModel.critic_linear.bias.data.fill_", "basemodel.BaseModel.lstm.bias_ih.data.fill_", "basemodel.BaseModel.lstm.bias_hh.data.fill_", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.allenai_savn.episodes.test_val_episode.TestValEpisode.__init__", "home.repos.pwc.inspect_result.allenai_savn.utils.net_util.norm_col_init", "home.repos.pwc.inspect_result.allenai_savn.utils.net_util.norm_col_init"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "action_space", "=", "args", ".", "action_space", "\n", "target_embedding_sz", "=", "args", ".", "glove_dim", "\n", "resnet_embedding_sz", "=", "args", ".", "hidden_state_sz", "\n", "hidden_state_sz", "=", "args", ".", "hidden_state_sz", "\n", "super", "(", "BaseModel", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "resnet_embedding_sz", ",", "64", ",", "1", ")", "\n", "self", ".", "maxp1", "=", "nn", ".", "MaxPool2d", "(", "2", ",", "2", ")", "\n", "self", ".", "embed_glove", "=", "nn", ".", "Linear", "(", "target_embedding_sz", ",", "64", ")", "\n", "self", ".", "embed_action", "=", "nn", ".", "Linear", "(", "action_space", ",", "10", ")", "\n", "\n", "pointwise_in_channels", "=", "138", "\n", "\n", "self", ".", "pointwise", "=", "nn", ".", "Conv2d", "(", "pointwise_in_channels", ",", "64", ",", "1", ",", "1", ")", "\n", "\n", "lstm_input_sz", "=", "7", "*", "7", "*", "64", "\n", "\n", "self", ".", "hidden_state_sz", "=", "hidden_state_sz", "\n", "self", ".", "lstm", "=", "nn", ".", "LSTMCell", "(", "lstm_input_sz", ",", "hidden_state_sz", ")", "\n", "num_outputs", "=", "action_space", "\n", "self", ".", "critic_linear", "=", "nn", ".", "Linear", "(", "hidden_state_sz", ",", "1", ")", "\n", "self", ".", "actor_linear", "=", "nn", ".", "Linear", "(", "hidden_state_sz", ",", "num_outputs", ")", "\n", "\n", "self", ".", "apply", "(", "weights_init", ")", "\n", "relu_gain", "=", "nn", ".", "init", ".", "calculate_gain", "(", "\"relu\"", ")", "\n", "self", ".", "conv1", ".", "weight", ".", "data", ".", "mul_", "(", "relu_gain", ")", "\n", "self", ".", "actor_linear", ".", "weight", ".", "data", "=", "norm_col_init", "(", "\n", "self", ".", "actor_linear", ".", "weight", ".", "data", ",", "0.01", "\n", ")", "\n", "self", ".", "actor_linear", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "self", ".", "critic_linear", ".", "weight", ".", "data", "=", "norm_col_init", "(", "\n", "self", ".", "critic_linear", ".", "weight", ".", "data", ",", "1.0", "\n", ")", "\n", "self", ".", "critic_linear", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "\n", "self", ".", "lstm", ".", "bias_ih", ".", "data", ".", "fill_", "(", "0", ")", "\n", "self", ".", "lstm", ".", "bias_hh", ".", "data", ".", "fill_", "(", "0", ")", "\n", "\n", "self", ".", "action_predict_linear", "=", "nn", ".", "Linear", "(", "2", "*", "lstm_input_sz", ",", "action_space", ")", "\n", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "p", "=", "args", ".", "dropout_rate", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.allenai_savn.models.basemodel.BaseModel.embedding": [[55, 110], ["torch.relu", "torch.relu", "torch.relu", "torch.relu.view().repeat", "torch.relu", "torch.relu", "torch.relu", "torch.relu.view().repeat", "torch.relu", "torch.relu", "torch.relu", "basemodel.BaseModel.dropout", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.relu", "torch.relu", "torch.relu", "basemodel.BaseModel.dropout", "basemodel.BaseModel.view", "torch.relu", "torch.relu", "torch.relu", "torch.relu.view().repeat", "torch.relu", "torch.relu", "torch.relu", "torch.relu.view().repeat", "torch.relu", "torch.relu", "torch.relu", "basemodel.BaseModel.dropout", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.relu", "torch.relu", "torch.relu", "basemodel.BaseModel.dropout", "basemodel.BaseModel.view", "basemodel.BaseModel.embed_glove", "basemodel.BaseModel.embed_action", "basemodel.BaseModel.conv1", "basemodel.BaseModel.pointwise", "basemodel.BaseModel.size", "torch.linear", "torch.linear", "torch.linear", "torch.linear", "torch.linear", "torch.linear", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d", "basemodel.BaseModel.size", "torch.relu.view", "torch.relu.view", "torch.relu.view", "torch.relu.view"], "methods", ["None"], ["", "def", "embedding", "(", "self", ",", "state", ",", "target", ",", "action_probs", ",", "params", ")", ":", "\n", "\n", "        ", "action_embedding_input", "=", "action_probs", "\n", "\n", "if", "params", "is", "None", ":", "\n", "            ", "glove_embedding", "=", "F", ".", "relu", "(", "self", ".", "embed_glove", "(", "target", ")", ")", "\n", "glove_reshaped", "=", "glove_embedding", ".", "view", "(", "1", ",", "64", ",", "1", ",", "1", ")", ".", "repeat", "(", "1", ",", "1", ",", "7", ",", "7", ")", "\n", "\n", "action_embedding", "=", "F", ".", "relu", "(", "self", ".", "embed_action", "(", "action_embedding_input", ")", ")", "\n", "action_reshaped", "=", "action_embedding", ".", "view", "(", "1", ",", "10", ",", "1", ",", "1", ")", ".", "repeat", "(", "1", ",", "1", ",", "7", ",", "7", ")", "\n", "\n", "image_embedding", "=", "F", ".", "relu", "(", "self", ".", "conv1", "(", "state", ")", ")", "\n", "x", "=", "self", ".", "dropout", "(", "image_embedding", ")", "\n", "x", "=", "torch", ".", "cat", "(", "(", "x", ",", "glove_reshaped", ",", "action_reshaped", ")", ",", "dim", "=", "1", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "pointwise", "(", "x", ")", ")", "\n", "x", "=", "self", ".", "dropout", "(", "x", ")", "\n", "out", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "\n", "", "else", ":", "\n", "            ", "glove_embedding", "=", "F", ".", "relu", "(", "\n", "F", ".", "linear", "(", "\n", "target", ",", "\n", "weight", "=", "params", "[", "\"embed_glove.weight\"", "]", ",", "\n", "bias", "=", "params", "[", "\"embed_glove.bias\"", "]", ",", "\n", ")", "\n", ")", "\n", "\n", "glove_reshaped", "=", "glove_embedding", ".", "view", "(", "1", ",", "64", ",", "1", ",", "1", ")", ".", "repeat", "(", "1", ",", "1", ",", "7", ",", "7", ")", "\n", "\n", "action_embedding", "=", "F", ".", "relu", "(", "\n", "F", ".", "linear", "(", "\n", "action_embedding_input", ",", "\n", "weight", "=", "params", "[", "\"embed_action.weight\"", "]", ",", "\n", "bias", "=", "params", "[", "\"embed_action.bias\"", "]", ",", "\n", ")", "\n", ")", "\n", "action_reshaped", "=", "action_embedding", ".", "view", "(", "1", ",", "10", ",", "1", ",", "1", ")", ".", "repeat", "(", "1", ",", "1", ",", "7", ",", "7", ")", "\n", "\n", "image_embedding", "=", "F", ".", "relu", "(", "\n", "F", ".", "conv2d", "(", "\n", "state", ",", "weight", "=", "params", "[", "\"conv1.weight\"", "]", ",", "bias", "=", "params", "[", "\"conv1.bias\"", "]", "\n", ")", "\n", ")", "\n", "x", "=", "self", ".", "dropout", "(", "image_embedding", ")", "\n", "x", "=", "torch", ".", "cat", "(", "(", "x", ",", "glove_reshaped", ",", "action_reshaped", ")", ",", "dim", "=", "1", ")", "\n", "\n", "x", "=", "F", ".", "relu", "(", "\n", "F", ".", "conv2d", "(", "\n", "x", ",", "weight", "=", "params", "[", "\"pointwise.weight\"", "]", ",", "bias", "=", "params", "[", "\"pointwise.bias\"", "]", "\n", ")", "\n", ")", "\n", "x", "=", "self", ".", "dropout", "(", "x", ")", "\n", "out", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "\n", "", "return", "out", ",", "image_embedding", "\n", "\n"]], "home.repos.pwc.inspect_result.allenai_savn.models.basemodel.BaseModel.a3clstm": [[111, 152], ["basemodel.BaseModel.lstm", "basemodel.BaseModel.actor_linear", "basemodel.BaseModel.critic_linear", "basemodel.BaseModel._backend.LSTMCell", "torch.linear", "torch.linear", "torch.linear", "torch.linear", "torch.linear", "torch.linear"], "methods", ["None"], ["", "def", "a3clstm", "(", "self", ",", "embedding", ",", "prev_hidden", ",", "params", ")", ":", "\n", "        ", "if", "params", "is", "None", ":", "\n", "            ", "hx", ",", "cx", "=", "self", ".", "lstm", "(", "embedding", ",", "prev_hidden", ")", "\n", "x", "=", "hx", "\n", "actor_out", "=", "self", ".", "actor_linear", "(", "x", ")", "\n", "critic_out", "=", "self", ".", "critic_linear", "(", "x", ")", "\n", "\n", "", "else", ":", "\n", "            ", "hx", ",", "cx", "=", "self", ".", "_backend", ".", "LSTMCell", "(", "\n", "embedding", ",", "\n", "prev_hidden", ",", "\n", "params", "[", "\"lstm.weight_ih\"", "]", ",", "\n", "params", "[", "\"lstm.weight_hh\"", "]", ",", "\n", "params", "[", "\"lstm.bias_ih\"", "]", ",", "\n", "params", "[", "\"lstm.bias_hh\"", "]", ",", "\n", ")", "\n", "\n", "# Change for pytorch 1.01", "\n", "# hx, cx = nn._VF.lstm_cell(", "\n", "#     embedding,", "\n", "#     prev_hidden,", "\n", "#     params[\"lstm.weight_ih\"],", "\n", "#     params[\"lstm.weight_hh\"],", "\n", "#     params[\"lstm.bias_ih\"],", "\n", "#     params[\"lstm.bias_hh\"],", "\n", "# )", "\n", "\n", "x", "=", "hx", "\n", "\n", "critic_out", "=", "F", ".", "linear", "(", "\n", "x", ",", "\n", "weight", "=", "params", "[", "\"critic_linear.weight\"", "]", ",", "\n", "bias", "=", "params", "[", "\"critic_linear.bias\"", "]", ",", "\n", ")", "\n", "actor_out", "=", "F", ".", "linear", "(", "\n", "x", ",", "\n", "weight", "=", "params", "[", "\"actor_linear.weight\"", "]", ",", "\n", "bias", "=", "params", "[", "\"actor_linear.bias\"", "]", ",", "\n", ")", "\n", "\n", "", "return", "actor_out", ",", "critic_out", ",", "(", "hx", ",", "cx", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.allenai_savn.models.basemodel.BaseModel.forward": [[153, 170], ["basemodel.BaseModel.embedding", "basemodel.BaseModel.a3clstm", "model_io.ModelOutput"], "methods", ["home.repos.pwc.inspect_result.allenai_savn.models.gcn.GCN.embedding", "home.repos.pwc.inspect_result.allenai_savn.models.gcn.GCN.a3clstm"], ["", "def", "forward", "(", "self", ",", "model_input", ",", "model_options", ")", ":", "\n", "\n", "        ", "state", "=", "model_input", ".", "state", "\n", "(", "hx", ",", "cx", ")", "=", "model_input", ".", "hidden", "\n", "\n", "target", "=", "model_input", ".", "target_class_embedding", "\n", "action_probs", "=", "model_input", ".", "action_probs", "\n", "params", "=", "model_options", ".", "params", "\n", "\n", "x", ",", "image_embedding", "=", "self", ".", "embedding", "(", "state", ",", "target", ",", "action_probs", ",", "params", ")", "\n", "actor_out", ",", "critic_out", ",", "(", "hx", ",", "cx", ")", "=", "self", ".", "a3clstm", "(", "x", ",", "(", "hx", ",", "cx", ")", ",", "params", ")", "\n", "\n", "return", "ModelOutput", "(", "\n", "value", "=", "critic_out", ",", "\n", "logit", "=", "actor_out", ",", "\n", "hidden", "=", "(", "hx", ",", "cx", ")", ",", "\n", "embedding", "=", "image_embedding", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.allenai_savn.models.model_io.ModelOptions.__init__": [[2, 4], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "params", "=", "None", ")", ":", "\n", "        ", "self", ".", "params", "=", "params", "\n", "\n"]], "home.repos.pwc.inspect_result.allenai_savn.models.model_io.ModelInput.__init__": [[9, 16], ["None"], "methods", ["None"], ["def", "__init__", "(", "\n", "self", ",", "state", "=", "None", ",", "hidden", "=", "None", ",", "target_class_embedding", "=", "None", ",", "action_probs", "=", "None", "\n", ")", ":", "\n", "        ", "self", ".", "state", "=", "state", "\n", "self", ".", "hidden", "=", "hidden", "\n", "self", ".", "target_class_embedding", "=", "target_class_embedding", "\n", "self", ".", "action_probs", "=", "action_probs", "\n", "\n"]], "home.repos.pwc.inspect_result.allenai_savn.models.model_io.ModelOutput.__init__": [[21, 27], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "value", "=", "None", ",", "logit", "=", "None", ",", "hidden", "=", "None", ",", "embedding", "=", "None", ")", ":", "\n", "\n", "        ", "self", ".", "value", "=", "value", "\n", "self", ".", "logit", "=", "logit", "\n", "self", ".", "hidden", "=", "hidden", "\n", "self", ".", "embedding", "=", "embedding", "\n", "", "", ""]], "home.repos.pwc.inspect_result.allenai_savn.models.gcn.GCN.__init__": [[28, 105], ["super().__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LSTMCell", "torch.LSTMCell", "torch.LSTMCell", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "gcn.GCN.apply", "torch.init.calculate_gain", "torch.init.calculate_gain", "torch.init.calculate_gain", "gcn.GCN.conv1.weight.data.mul_", "utils.net_util.norm_col_init", "gcn.GCN.actor_linear.bias.data.fill_", "utils.net_util.norm_col_init", "gcn.GCN.critic_linear.bias.data.fill_", "gcn.GCN.lstm.bias_ih.data.fill_", "gcn.GCN.lstm.bias_hh.data.fill_", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "normalize_adj().tocsr().toarray", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torchvision.resnet18", "torch.Sequential", "torch.Sequential", "torch.Sequential", "gcn.GCN.resnet18.parameters", "open().readlines", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "datasets.glove.Glove", "range", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "list", "o.strip", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "normalize_adj().tocsr", "torchvision.resnet18.children", "open", "gcn.normalize_adj"], "methods", ["home.repos.pwc.inspect_result.allenai_savn.episodes.test_val_episode.TestValEpisode.__init__", "home.repos.pwc.inspect_result.allenai_savn.utils.net_util.norm_col_init", "home.repos.pwc.inspect_result.allenai_savn.utils.net_util.norm_col_init", "home.repos.pwc.inspect_result.allenai_savn.models.gcn.normalize_adj"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "action_space", "=", "args", ".", "action_space", "\n", "target_embedding_sz", "=", "args", ".", "glove_dim", "\n", "resnet_embedding_sz", "=", "512", "\n", "hidden_state_sz", "=", "args", ".", "hidden_state_sz", "\n", "super", "(", "GCN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "resnet_embedding_sz", ",", "64", ",", "1", ")", "\n", "self", ".", "maxp1", "=", "nn", ".", "MaxPool2d", "(", "2", ",", "2", ")", "\n", "self", ".", "embed_glove", "=", "nn", ".", "Linear", "(", "target_embedding_sz", ",", "64", ")", "\n", "self", ".", "embed_action", "=", "nn", ".", "Linear", "(", "action_space", ",", "10", ")", "\n", "\n", "pointwise_in_channels", "=", "138", "\n", "\n", "self", ".", "pointwise", "=", "nn", ".", "Conv2d", "(", "pointwise_in_channels", ",", "64", ",", "1", ",", "1", ")", "\n", "\n", "lstm_input_sz", "=", "7", "*", "7", "*", "64", "+", "512", "\n", "\n", "self", ".", "hidden_state_sz", "=", "hidden_state_sz", "\n", "self", ".", "lstm", "=", "nn", ".", "LSTMCell", "(", "lstm_input_sz", ",", "hidden_state_sz", ")", "\n", "num_outputs", "=", "action_space", "\n", "self", ".", "critic_linear", "=", "nn", ".", "Linear", "(", "hidden_state_sz", ",", "1", ")", "\n", "self", ".", "actor_linear", "=", "nn", ".", "Linear", "(", "hidden_state_sz", ",", "num_outputs", ")", "\n", "\n", "self", ".", "apply", "(", "weights_init", ")", "\n", "relu_gain", "=", "nn", ".", "init", ".", "calculate_gain", "(", "\"relu\"", ")", "\n", "self", ".", "conv1", ".", "weight", ".", "data", ".", "mul_", "(", "relu_gain", ")", "\n", "self", ".", "actor_linear", ".", "weight", ".", "data", "=", "norm_col_init", "(", "\n", "self", ".", "actor_linear", ".", "weight", ".", "data", ",", "0.01", "\n", ")", "\n", "self", ".", "actor_linear", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "self", ".", "critic_linear", ".", "weight", ".", "data", "=", "norm_col_init", "(", "\n", "self", ".", "critic_linear", ".", "weight", ".", "data", ",", "1.0", "\n", ")", "\n", "self", ".", "critic_linear", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "\n", "self", ".", "lstm", ".", "bias_ih", ".", "data", ".", "fill_", "(", "0", ")", "\n", "self", ".", "lstm", ".", "bias_hh", ".", "data", ".", "fill_", "(", "0", ")", "\n", "\n", "self", ".", "action_predict_linear", "=", "nn", ".", "Linear", "(", "2", "*", "lstm_input_sz", ",", "action_space", ")", "\n", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "p", "=", "args", ".", "dropout_rate", ")", "\n", "\n", "n", "=", "83", "\n", "self", ".", "n", "=", "n", "\n", "\n", "# get and normalize adjacency matrix.", "\n", "A_raw", "=", "torch", ".", "load", "(", "\"./data/gcn/adjmat.dat\"", ")", "\n", "A", "=", "normalize_adj", "(", "A_raw", ")", ".", "tocsr", "(", ")", ".", "toarray", "(", ")", "\n", "self", ".", "A", "=", "torch", ".", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "A", ")", ")", "\n", "\n", "# last layer of resnet18.", "\n", "resnet18", "=", "models", ".", "resnet18", "(", "pretrained", "=", "True", ")", "\n", "modules", "=", "list", "(", "resnet18", ".", "children", "(", ")", ")", "[", "-", "2", ":", "]", "\n", "self", ".", "resnet18", "=", "nn", ".", "Sequential", "(", "*", "modules", ")", "\n", "for", "p", "in", "self", ".", "resnet18", ".", "parameters", "(", ")", ":", "\n", "            ", "p", ".", "requires_grad", "=", "False", "\n", "\n", "# glove embeddings for all the objs.", "\n", "", "objects", "=", "open", "(", "\"./data/gcn/objects.txt\"", ")", ".", "readlines", "(", ")", "\n", "objects", "=", "[", "o", ".", "strip", "(", ")", "for", "o", "in", "objects", "]", "\n", "all_glove", "=", "torch", ".", "zeros", "(", "n", ",", "300", ")", "\n", "glove", "=", "Glove", "(", "args", ".", "glove_file", ")", "\n", "for", "i", "in", "range", "(", "n", ")", ":", "\n", "            ", "all_glove", "[", "i", ",", ":", "]", "=", "torch", ".", "Tensor", "(", "glove", ".", "glove_embeddings", "[", "objects", "[", "i", "]", "]", "[", ":", "]", ")", "\n", "\n", "", "self", ".", "all_glove", "=", "nn", ".", "Parameter", "(", "all_glove", ")", "\n", "self", ".", "all_glove", ".", "requires_grad", "=", "False", "\n", "\n", "self", ".", "get_word_embed", "=", "nn", ".", "Linear", "(", "300", ",", "512", ")", "\n", "self", ".", "get_class_embed", "=", "nn", ".", "Linear", "(", "1000", ",", "512", ")", "\n", "\n", "self", ".", "W0", "=", "nn", ".", "Linear", "(", "1024", ",", "1024", ",", "bias", "=", "False", ")", "\n", "self", ".", "W1", "=", "nn", ".", "Linear", "(", "1024", ",", "1024", ",", "bias", "=", "False", ")", "\n", "self", ".", "W2", "=", "nn", ".", "Linear", "(", "1024", ",", "1", ",", "bias", "=", "False", ")", "\n", "\n", "self", ".", "final_mapping", "=", "nn", ".", "Linear", "(", "n", ",", "512", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.allenai_savn.models.gcn.GCN.gcn_embed": [[106, 122], ["gcn.GCN.view", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "gcn.GCN.get_class_embed", "gcn.GCN.get_word_embed", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.relu", "torch.relu", "torch.relu", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.relu", "torch.relu", "torch.relu", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.relu", "torch.relu", "torch.relu", "gcn.GCN.view", "gcn.GCN.final_mapping", "gcn.GCN.size", "gcn.GCN.all_glove.detach", "gcn.GCN.W0", "gcn.GCN.W1", "gcn.GCN.W2", "gcn.GCN.repeat"], "methods", ["None"], ["", "def", "gcn_embed", "(", "self", ",", "state", ")", ":", "\n", "        ", "x", "=", "self", ".", "resnet18", "[", "0", "]", "(", "state", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "x", "=", "torch", ".", "sigmoid", "(", "self", ".", "resnet18", "[", "1", "]", "(", "x", ")", ")", "\n", "class_embed", "=", "self", ".", "get_class_embed", "(", "x", ")", "\n", "word_embed", "=", "self", ".", "get_word_embed", "(", "self", ".", "all_glove", ".", "detach", "(", ")", ")", "\n", "x", "=", "torch", ".", "cat", "(", "(", "class_embed", ".", "repeat", "(", "self", ".", "n", ",", "1", ")", ",", "word_embed", ")", ",", "dim", "=", "1", ")", "\n", "x", "=", "torch", ".", "mm", "(", "self", ".", "A", ",", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "W0", "(", "x", ")", ")", "\n", "x", "=", "torch", ".", "mm", "(", "self", ".", "A", ",", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "W1", "(", "x", ")", ")", "\n", "x", "=", "torch", ".", "mm", "(", "self", ".", "A", ",", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "W2", "(", "x", ")", ")", "\n", "x", "=", "x", ".", "view", "(", "1", ",", "self", ".", "n", ")", "\n", "x", "=", "self", ".", "final_mapping", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.allenai_savn.models.gcn.GCN.embedding": [[123, 142], ["torch.relu", "torch.relu", "torch.relu", "torch.relu.view().repeat", "torch.relu", "torch.relu", "torch.relu", "torch.relu.view().repeat", "torch.relu", "torch.relu", "torch.relu", "gcn.GCN.dropout", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.relu", "torch.relu", "torch.relu", "gcn.GCN.dropout", "gcn.GCN.view", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "gcn.GCN.embed_glove", "gcn.GCN.embed_action", "gcn.GCN.conv1", "gcn.GCN.pointwise", "gcn.GCN.size", "torch.relu.view", "torch.relu.view", "gcn.GCN.gcn_embed"], "methods", ["home.repos.pwc.inspect_result.allenai_savn.models.gcn.GCN.gcn_embed"], ["", "def", "embedding", "(", "self", ",", "state", ",", "target", ",", "action_probs", ")", ":", "\n", "        ", "action_embedding_input", "=", "action_probs", "\n", "\n", "glove_embedding", "=", "F", ".", "relu", "(", "self", ".", "embed_glove", "(", "target", ")", ")", "\n", "glove_reshaped", "=", "glove_embedding", ".", "view", "(", "1", ",", "64", ",", "1", ",", "1", ")", ".", "repeat", "(", "1", ",", "1", ",", "7", ",", "7", ")", "\n", "\n", "action_embedding", "=", "F", ".", "relu", "(", "self", ".", "embed_action", "(", "action_embedding_input", ")", ")", "\n", "action_reshaped", "=", "action_embedding", ".", "view", "(", "1", ",", "10", ",", "1", ",", "1", ")", ".", "repeat", "(", "1", ",", "1", ",", "7", ",", "7", ")", "\n", "\n", "image_embedding", "=", "F", ".", "relu", "(", "self", ".", "conv1", "(", "state", ")", ")", "\n", "x", "=", "self", ".", "dropout", "(", "image_embedding", ")", "\n", "x", "=", "torch", ".", "cat", "(", "(", "x", ",", "glove_reshaped", ",", "action_reshaped", ")", ",", "dim", "=", "1", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "pointwise", "(", "x", ")", ")", "\n", "x", "=", "self", ".", "dropout", "(", "x", ")", "\n", "out", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "\n", "out", "=", "torch", ".", "cat", "(", "(", "out", ",", "self", ".", "gcn_embed", "(", "state", ")", ")", ",", "dim", "=", "1", ")", "\n", "\n", "return", "out", ",", "image_embedding", "\n", "\n"]], "home.repos.pwc.inspect_result.allenai_savn.models.gcn.GCN.a3clstm": [[143, 149], ["gcn.GCN.lstm", "gcn.GCN.actor_linear", "gcn.GCN.critic_linear"], "methods", ["None"], ["", "def", "a3clstm", "(", "self", ",", "embedding", ",", "prev_hidden", ")", ":", "\n", "        ", "hx", ",", "cx", "=", "self", ".", "lstm", "(", "embedding", ",", "prev_hidden", ")", "\n", "x", "=", "hx", "\n", "actor_out", "=", "self", ".", "actor_linear", "(", "x", ")", "\n", "critic_out", "=", "self", ".", "critic_linear", "(", "x", ")", "\n", "return", "actor_out", ",", "critic_out", ",", "(", "hx", ",", "cx", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.allenai_savn.models.gcn.GCN.forward": [[150, 164], ["gcn.GCN.embedding", "gcn.GCN.a3clstm", "model_io.ModelOutput"], "methods", ["home.repos.pwc.inspect_result.allenai_savn.models.gcn.GCN.embedding", "home.repos.pwc.inspect_result.allenai_savn.models.gcn.GCN.a3clstm"], ["", "def", "forward", "(", "self", ",", "model_input", ",", "model_options", ")", ":", "\n", "        ", "state", "=", "model_input", ".", "state", "\n", "(", "hx", ",", "cx", ")", "=", "model_input", ".", "hidden", "\n", "\n", "target", "=", "model_input", ".", "target_class_embedding", "\n", "action_probs", "=", "model_input", ".", "action_probs", "\n", "x", ",", "image_embedding", "=", "self", ".", "embedding", "(", "state", ",", "target", ",", "action_probs", ")", "\n", "actor_out", ",", "critic_out", ",", "(", "hx", ",", "cx", ")", "=", "self", ".", "a3clstm", "(", "x", ",", "(", "hx", ",", "cx", ")", ")", "\n", "\n", "return", "ModelOutput", "(", "\n", "value", "=", "critic_out", ",", "\n", "logit", "=", "actor_out", ",", "\n", "hidden", "=", "(", "hx", ",", "cx", ")", ",", "\n", "embedding", "=", "image_embedding", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.allenai_savn.models.gcn.normalize_adj": [[18, 25], ["scipy.coo_matrix", "numpy.array", "numpy.power().flatten", "scipy.diags", "sp.coo_matrix.dot().transpose().dot().tocoo", "sp.coo_matrix.sum", "numpy.power", "numpy.isinf", "sp.coo_matrix.dot().transpose().dot", "sp.coo_matrix.dot().transpose", "sp.coo_matrix.dot"], "function", ["None"], ["def", "normalize_adj", "(", "adj", ")", ":", "\n", "    ", "adj", "=", "sp", ".", "coo_matrix", "(", "adj", ")", "\n", "rowsum", "=", "np", ".", "array", "(", "adj", ".", "sum", "(", "1", ")", ")", "\n", "d_inv_sqrt", "=", "np", ".", "power", "(", "rowsum", ",", "-", "0.5", ")", ".", "flatten", "(", ")", "\n", "d_inv_sqrt", "[", "np", ".", "isinf", "(", "d_inv_sqrt", ")", "]", "=", "0.0", "\n", "d_mat_inv_sqrt", "=", "sp", ".", "diags", "(", "d_inv_sqrt", ")", "\n", "return", "adj", ".", "dot", "(", "d_mat_inv_sqrt", ")", ".", "transpose", "(", ")", ".", "dot", "(", "d_mat_inv_sqrt", ")", ".", "tocoo", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.allenai_savn.models.savn.SAVN.__init__": [[9, 21], ["basemodel.BaseModel.__init__", "torch.Linear", "torch.Linear", "tcn.TemporalConvNet"], "methods", ["home.repos.pwc.inspect_result.allenai_savn.episodes.test_val_episode.TestValEpisode.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "super", "(", "SAVN", ",", "self", ")", ".", "__init__", "(", "args", ")", "\n", "self", ".", "args", "=", "args", "\n", "\n", "self", ".", "feature_size", "=", "args", ".", "hidden_state_sz", "+", "args", ".", "action_space", "\n", "self", ".", "learned_input_sz", "=", "args", ".", "hidden_state_sz", "+", "args", ".", "action_space", "\n", "\n", "self", ".", "num_steps", "=", "args", ".", "num_steps", "\n", "self", ".", "ll_key", "=", "nn", ".", "Linear", "(", "self", ".", "feature_size", ",", "self", ".", "feature_size", ")", "\n", "self", ".", "ll_linear", "=", "nn", ".", "Linear", "(", "self", ".", "feature_size", ",", "self", ".", "feature_size", ")", "\n", "self", ".", "ll_tc", "=", "TemporalConvNet", "(", "\n", "self", ".", "num_steps", ",", "[", "10", ",", "1", "]", ",", "kernel_size", "=", "2", ",", "dropout", "=", "0.0", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.allenai_savn.models.savn.SAVN.learned_loss": [[23, 27], ["H.unsqueeze", "savn.SAVN.ll_tc().squeeze", "savn.SAVN.pow().sum().pow", "savn.SAVN.ll_tc", "savn.SAVN.pow().sum", "savn.SAVN.pow"], "methods", ["None"], ["", "def", "learned_loss", "(", "self", ",", "hx", ",", "H", ",", "params", "=", "None", ")", ":", "\n", "        ", "H_input", "=", "H", ".", "unsqueeze", "(", "0", ")", "\n", "x", "=", "self", ".", "ll_tc", "(", "H_input", ",", "params", ")", ".", "squeeze", "(", "0", ")", "\n", "return", "x", ".", "pow", "(", "2", ")", ".", "sum", "(", "1", ")", ".", "pow", "(", "0.5", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.allenai_savn.models.tcn.Chomp1d.__init__": [[7, 10], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.allenai_savn.episodes.test_val_episode.TestValEpisode.__init__"], ["    ", "def", "__init__", "(", "self", ",", "chomp_size", ")", ":", "\n", "        ", "super", "(", "Chomp1d", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "chomp_size", "=", "chomp_size", "\n", "\n"]], "home.repos.pwc.inspect_result.allenai_savn.models.tcn.Chomp1d.forward": [[11, 13], ["x[].contiguous"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "x", "[", ":", ",", ":", ",", ":", "-", "self", ".", "chomp_size", "]", ".", "contiguous", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.allenai_savn.models.tcn.TemporalBlock.__init__": [[16, 47], ["torch.Module.__init__", "torch.Conv1d", "torch.Conv1d", "tcn.Chomp1d", "torch.Conv1d", "torch.Conv1d", "tcn.Chomp1d", "torch.Sigmoid", "torch.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.allenai_savn.episodes.test_val_episode.TestValEpisode.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "n_inputs", ",", "n_outputs", ",", "kernel_size", ",", "stride", ",", "dilation", ",", "padding", ",", "dropout", "\n", ")", ":", "\n", "        ", "super", "(", "TemporalBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "n_inputs", "=", "n_inputs", "\n", "self", ".", "n_outputs", "=", "n_outputs", "\n", "self", ".", "kernel_size", "=", "kernel_size", "\n", "self", ".", "stride", "=", "stride", "\n", "self", ".", "dilation", "=", "dilation", "\n", "self", ".", "padding", "=", "padding", "\n", "self", ".", "dropout", "=", "dropout", "\n", "self", ".", "ll_conv1", "=", "nn", ".", "Conv1d", "(", "\n", "n_inputs", ",", "\n", "n_outputs", ",", "\n", "kernel_size", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "padding", ",", "\n", "dilation", "=", "dilation", ",", "\n", ")", "\n", "self", ".", "chomp1", "=", "Chomp1d", "(", "padding", ")", "\n", "\n", "self", ".", "ll_conv2", "=", "nn", ".", "Conv1d", "(", "\n", "n_outputs", ",", "\n", "n_outputs", ",", "\n", "kernel_size", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "padding", ",", "\n", "dilation", "=", "dilation", ",", "\n", ")", "\n", "self", ".", "chomp2", "=", "Chomp1d", "(", "padding", ")", "\n", "self", ".", "sigmoid", "=", "nn", ".", "Sigmoid", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.allenai_savn.models.tcn.TemporalBlock.net": [[48, 66], ["tcn.TemporalBlock.chomp1", "torch.leaky_relu", "torch.leaky_relu", "str", "tcn.TemporalBlock.ll_conv1", "torch.conv1d", "torch.conv1d"], "methods", ["None"], ["", "def", "net", "(", "self", ",", "x", ",", "block_num", ",", "params", "=", "None", ")", ":", "\n", "        ", "layer_name", "=", "\"ll_tc.ll_temporal_block\"", "+", "str", "(", "block_num", ")", "\n", "if", "params", "is", "None", ":", "\n", "            ", "x", "=", "self", ".", "ll_conv1", "(", "x", ")", "\n", "", "else", ":", "\n", "            ", "x", "=", "F", ".", "conv1d", "(", "\n", "x", ",", "\n", "weight", "=", "params", "[", "layer_name", "+", "\".ll_conv1.weight\"", "]", ",", "\n", "bias", "=", "params", "[", "layer_name", "+", "\".ll_conv1.bias\"", "]", ",", "\n", "stride", "=", "self", ".", "stride", ",", "\n", "padding", "=", "self", ".", "padding", ",", "\n", "dilation", "=", "self", ".", "dilation", ",", "\n", ")", "\n", "\n", "", "x", "=", "self", ".", "chomp1", "(", "x", ")", "\n", "x", "=", "F", ".", "leaky_relu", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.allenai_savn.models.tcn.TemporalBlock.init_weights": [[67, 70], ["tcn.TemporalBlock.ll_conv1.weight.data.normal_", "tcn.TemporalBlock.ll_conv2.weight.data.normal_"], "methods", ["None"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "self", ".", "ll_conv1", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "0.01", ")", "\n", "self", ".", "ll_conv2", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "0.01", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.allenai_savn.models.tcn.TemporalBlock.forward": [[71, 74], ["tcn.TemporalBlock.net"], "methods", ["home.repos.pwc.inspect_result.allenai_savn.models.tcn.TemporalBlock.net"], ["", "def", "forward", "(", "self", ",", "x", ",", "block_num", ",", "params", "=", "None", ")", ":", "\n", "        ", "out", "=", "self", ".", "net", "(", "x", ",", "block_num", ",", "params", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.allenai_savn.models.tcn.TemporalConvNet.__init__": [[77, 97], ["torch.Module.__init__", "len", "range", "setattr", "tcn.TemporalBlock"], "methods", ["home.repos.pwc.inspect_result.allenai_savn.episodes.test_val_episode.TestValEpisode.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_inputs", ",", "num_channels", ",", "kernel_size", "=", "2", ",", "dropout", "=", "0.0", ")", ":", "\n", "        ", "super", "(", "TemporalConvNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "layers", "=", "[", "]", "\n", "self", ".", "num_levels", "=", "len", "(", "num_channels", ")", "\n", "\n", "for", "i", "in", "range", "(", "self", ".", "num_levels", ")", ":", "\n", "            ", "dilation_size", "=", "2", "**", "i", "\n", "in_channels", "=", "num_inputs", "if", "i", "==", "0", "else", "num_channels", "[", "i", "-", "1", "]", "\n", "out_channels", "=", "num_channels", "[", "i", "]", "\n", "setattr", "(", "\n", "self", ",", "\n", "\"ll_temporal_block{}\"", ".", "format", "(", "i", ")", ",", "\n", "TemporalBlock", "(", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "kernel_size", ",", "\n", "stride", "=", "1", ",", "\n", "dilation", "=", "dilation_size", ",", "\n", "padding", "=", "(", "kernel_size", "-", "1", ")", "*", "dilation_size", ",", "\n", "dropout", "=", "dropout", ",", "\n", ")", ",", "\n"]], "home.repos.pwc.inspect_result.allenai_savn.models.tcn.TemporalConvNet.forward": [[100, 106], ["range", "getattr", "getattr."], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ",", "params", "=", "None", ")", ":", "\n", "\n", "        ", "for", "i", "in", "range", "(", "self", ".", "num_levels", ")", ":", "\n", "            ", "temporal_block", "=", "getattr", "(", "self", ",", "\"ll_temporal_block{}\"", ".", "format", "(", "i", ")", ")", "\n", "x", "=", "temporal_block", "(", "x", ",", "i", ",", "params", "=", "params", ")", "\n", "", "return", "x", "\n", "", "", ""]], "home.repos.pwc.inspect_result.allenai_savn.episodes.episode.Episode.__init__": [[6, 8], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.allenai_savn.episodes.episode.Episode.environment": [[9, 12], ["NotImplementedError"], "methods", ["None"], ["", "@", "property", "\n", "def", "environment", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.allenai_savn.episodes.episode.Episode.state_for_agent": [[13, 15], ["NotImplementedError"], "methods", ["None"], ["", "def", "state_for_agent", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.allenai_savn.episodes.episode.Episode.step": [[16, 18], ["NotImplementedError"], "methods", ["None"], ["", "def", "step", "(", "self", ",", "action_as_int", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.allenai_savn.episodes.episode.Episode.reset": [[19, 21], ["NotImplementedError"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.allenai_savn.episodes.episode.Episode.actions_list": [[22, 25], ["NotImplementedError"], "methods", ["None"], ["", "@", "property", "\n", "def", "actions_list", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.allenai_savn.episodes.episode.Episode.total_actions": [[26, 29], ["len"], "methods", ["None"], ["", "@", "property", "\n", "def", "total_actions", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "actions_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.allenai_savn.episodes.episode.Episode.index_to_action": [[30, 35], ["None"], "methods", ["None"], ["", "def", "index_to_action", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"Given an action index, referring to possible_actions of ActionUtil(),\n        converts to an usable action. \"\"\"", "\n", "assert", "0", "<=", "index", "<", "self", ".", "total_actions", "\n", "return", "self", ".", "actions_list", "[", "index", "]", "\n", "", "", ""]], "home.repos.pwc.inspect_result.allenai_savn.episodes.basic_episode.BasicEpisode.__init__": [[19, 40], ["episode.Episode.__init__", "utils.action_util.get_actions", "random.seed"], "methods", ["home.repos.pwc.inspect_result.allenai_savn.episodes.test_val_episode.TestValEpisode.__init__", "home.repos.pwc.inspect_result.allenai_savn.utils.action_util.get_actions"], ["def", "__init__", "(", "self", ",", "args", ",", "gpu_id", ",", "strict_done", "=", "False", ")", ":", "\n", "        ", "super", "(", "BasicEpisode", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "_env", "=", "None", "\n", "\n", "self", ".", "gpu_id", "=", "gpu_id", "\n", "self", ".", "strict_done", "=", "strict_done", "\n", "self", ".", "task_data", "=", "None", "\n", "self", ".", "glove_embedding", "=", "None", "\n", "self", ".", "actions", "=", "get_actions", "(", "args", ")", "\n", "self", ".", "done_count", "=", "0", "\n", "self", ".", "duplicate_count", "=", "0", "\n", "self", ".", "failed_action_count", "=", "0", "\n", "self", ".", "_last_action_embedding_idx", "=", "0", "\n", "self", ".", "target_object", "=", "None", "\n", "self", ".", "prev_frame", "=", "None", "\n", "self", ".", "current_frame", "=", "None", "\n", "\n", "self", ".", "scene_states", "=", "[", "]", "\n", "if", "args", ".", "eval", ":", "\n", "            ", "random", ".", "seed", "(", "args", ".", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.allenai_savn.episodes.basic_episode.BasicEpisode.environment": [[41, 44], ["None"], "methods", ["None"], ["", "", "@", "property", "\n", "def", "environment", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_env", "\n", "\n"]], "home.repos.pwc.inspect_result.allenai_savn.episodes.basic_episode.BasicEpisode.actions_list": [[45, 48], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "actions_list", "(", "self", ")", ":", "\n", "        ", "return", "[", "{", "\"action\"", ":", "a", "}", "for", "a", "in", "self", ".", "actions", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.allenai_savn.episodes.basic_episode.BasicEpisode.reset": [[49, 53], ["basic_episode.BasicEpisode._env.back_to_start"], "methods", ["home.repos.pwc.inspect_result.allenai_savn.datasets.environment.Environment.back_to_start"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "done_count", "=", "0", "\n", "self", ".", "duplicate_count", "=", "0", "\n", "self", ".", "_env", ".", "back_to_start", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.allenai_savn.episodes.basic_episode.BasicEpisode.state_for_agent": [[54, 56], ["None"], "methods", ["None"], ["", "def", "state_for_agent", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "environment", ".", "current_frame", "\n", "\n"]], "home.repos.pwc.inspect_result.allenai_savn.episodes.basic_episode.BasicEpisode.current_agent_position": [[57, 60], ["None"], "methods", ["None"], ["", "def", "current_agent_position", "(", "self", ")", ":", "\n", "        ", "\"\"\" Get the current position of the agent in the scene. \"\"\"", "\n", "return", "self", ".", "environment", ".", "current_agent_position", "\n", "\n"]], "home.repos.pwc.inspect_result.allenai_savn.episodes.basic_episode.BasicEpisode.step": [[61, 72], ["basic_episode.BasicEpisode.judge", "basic_episode.BasicEpisode.environment.step"], "methods", ["home.repos.pwc.inspect_result.allenai_savn.episodes.basic_episode.BasicEpisode.judge", "home.repos.pwc.inspect_result.allenai_savn.episodes.basic_episode.BasicEpisode.step"], ["", "def", "step", "(", "self", ",", "action_as_int", ")", ":", "\n", "\n", "        ", "action", "=", "self", ".", "actions_list", "[", "action_as_int", "]", "\n", "\n", "if", "action", "[", "\"action\"", "]", "!=", "DONE", ":", "\n", "            ", "self", ".", "environment", ".", "step", "(", "action", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "done_count", "+=", "1", "\n", "\n", "", "reward", ",", "terminal", ",", "action_was_successful", "=", "self", ".", "judge", "(", "action", ")", "\n", "return", "reward", ",", "terminal", ",", "action_was_successful", "\n", "\n"]], "home.repos.pwc.inspect_result.allenai_savn.episodes.basic_episode.BasicEpisode.judge": [[73, 101], ["basic_episode.BasicEpisode.scene_states.append", "basic_episode.BasicEpisode.environment.object_is_visible"], "methods", ["home.repos.pwc.inspect_result.allenai_savn.datasets.environment.Environment.object_is_visible"], ["", "def", "judge", "(", "self", ",", "action", ")", ":", "\n", "        ", "\"\"\" Judge the last event. \"\"\"", "\n", "reward", "=", "STEP_PENALTY", "\n", "\n", "# Thresholding replaced with simple look up for efficiency.", "\n", "if", "self", ".", "environment", ".", "controller", ".", "state", "in", "self", ".", "scene_states", ":", "\n", "            ", "if", "action", "[", "\"action\"", "]", "!=", "DONE", ":", "\n", "                ", "if", "self", ".", "environment", ".", "last_action_success", ":", "\n", "                    ", "self", ".", "duplicate_count", "+=", "1", "\n", "", "else", ":", "\n", "                    ", "self", ".", "failed_action_count", "+=", "1", "\n", "", "", "", "else", ":", "\n", "            ", "self", ".", "scene_states", ".", "append", "(", "self", ".", "environment", ".", "controller", ".", "state", ")", "\n", "\n", "", "done", "=", "False", "\n", "\n", "if", "action", "[", "\"action\"", "]", "==", "DONE", ":", "\n", "            ", "action_was_successful", "=", "False", "\n", "for", "id_", "in", "self", ".", "task_data", ":", "\n", "                ", "if", "self", ".", "environment", ".", "object_is_visible", "(", "id_", ")", ":", "\n", "                    ", "reward", "=", "GOAL_SUCCESS_REWARD", "\n", "done", "=", "True", "\n", "action_was_successful", "=", "True", "\n", "break", "\n", "", "", "", "else", ":", "\n", "            ", "action_was_successful", "=", "self", ".", "environment", ".", "last_action_success", "\n", "\n", "", "return", "reward", ",", "done", ",", "action_was_successful", "\n", "\n"]], "home.repos.pwc.inspect_result.allenai_savn.episodes.basic_episode.BasicEpisode.target_object_index": [[108, 113], ["utils.net_util.gpuify", "torch.LongTensor"], "methods", ["home.repos.pwc.inspect_result.allenai_savn.utils.net_util.gpuify"], ["", "@", "target_object_index", ".", "setter", "\n", "def", "target_object_index", "(", "self", ",", "target_object_index", ")", ":", "\n", "        ", "\"\"\" Set the target object by specifying the index. \"\"\"", "\n", "self", ".", "_target_object_index", "=", "gpuify", "(", "\n", "torch", ".", "LongTensor", "(", "[", "target_object_index", "]", ")", ",", "self", ".", "gpu_id", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.allenai_savn.episodes.basic_episode.BasicEpisode._new_episode": [[115, 157], ["random.choice", "basic_episode.BasicEpisode._env.randomize_agent_location", "basic_episode.BasicEpisode._env.all_objects", "random.randint", "utils.net_util.toFloatTensor", "datasets.environment.Environment", "basic_episode.BasicEpisode._env.start", "basic_episode.BasicEpisode._env.reset", "print", "obj.split", "len", "id_.split", "basic_episode.BasicEpisode.task_data.append"], "methods", ["home.repos.pwc.inspect_result.allenai_savn.datasets.environment.Environment.randomize_agent_location", "home.repos.pwc.inspect_result.allenai_savn.datasets.environment.Environment.all_objects", "home.repos.pwc.inspect_result.allenai_savn.utils.net_util.toFloatTensor", "home.repos.pwc.inspect_result.allenai_savn.datasets.environment.Environment.start", "home.repos.pwc.inspect_result.allenai_savn.episodes.basic_episode.BasicEpisode.reset"], ["", "def", "_new_episode", "(", "\n", "self", ",", "args", ",", "scenes", ",", "possible_targets", ",", "targets", "=", "None", ",", "keep_obj", "=", "False", ",", "glove", "=", "None", "\n", ")", ":", "\n", "        ", "\"\"\" New navigation episode. \"\"\"", "\n", "scene", "=", "random", ".", "choice", "(", "scenes", ")", "\n", "\n", "if", "self", ".", "_env", "is", "None", ":", "\n", "            ", "self", ".", "_env", "=", "Environment", "(", "\n", "offline_data_dir", "=", "args", ".", "offline_data_dir", ",", "\n", "use_offline_controller", "=", "True", ",", "\n", "grid_size", "=", "0.25", ",", "\n", "images_file_name", "=", "args", ".", "images_file_name", ",", "\n", "local_executable_path", "=", "args", ".", "local_executable_path", ",", "\n", ")", "\n", "self", ".", "_env", ".", "start", "(", "scene", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "_env", ".", "reset", "(", "scene", ")", "\n", "\n", "# Randomize the start location.", "\n", "", "self", ".", "_env", ".", "randomize_agent_location", "(", ")", "\n", "objects", "=", "self", ".", "_env", ".", "all_objects", "(", ")", "\n", "\n", "visible_objects", "=", "[", "obj", ".", "split", "(", "\"|\"", ")", "[", "0", "]", "for", "obj", "in", "objects", "]", "\n", "intersection", "=", "[", "obj", "for", "obj", "in", "visible_objects", "if", "obj", "in", "targets", "]", "\n", "\n", "self", ".", "task_data", "=", "[", "]", "\n", "\n", "idx", "=", "random", ".", "randint", "(", "0", ",", "len", "(", "intersection", ")", "-", "1", ")", "\n", "goal_object_type", "=", "intersection", "[", "idx", "]", "\n", "self", ".", "target_object", "=", "goal_object_type", "\n", "\n", "for", "id_", "in", "objects", ":", "\n", "            ", "type_", "=", "id_", ".", "split", "(", "\"|\"", ")", "[", "0", "]", "\n", "if", "goal_object_type", "==", "type_", ":", "\n", "                ", "self", ".", "task_data", ".", "append", "(", "id_", ")", "\n", "\n", "", "", "if", "args", ".", "verbose", ":", "\n", "            ", "print", "(", "\"Scene\"", ",", "scene", ",", "\"Navigating towards:\"", ",", "goal_object_type", ")", "\n", "\n", "", "self", ".", "glove_embedding", "=", "None", "\n", "self", ".", "glove_embedding", "=", "toFloatTensor", "(", "\n", "glove", ".", "glove_embeddings", "[", "goal_object_type", "]", "[", ":", "]", ",", "self", ".", "gpu_id", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.allenai_savn.episodes.basic_episode.BasicEpisode.new_episode": [[159, 174], ["basic_episode.BasicEpisode._new_episode"], "methods", ["home.repos.pwc.inspect_result.allenai_savn.episodes.test_val_episode.TestValEpisode._new_episode"], ["", "def", "new_episode", "(", "\n", "self", ",", "\n", "args", ",", "\n", "scenes", ",", "\n", "possible_targets", "=", "None", ",", "\n", "targets", "=", "None", ",", "\n", "keep_obj", "=", "False", ",", "\n", "glove", "=", "None", ",", "\n", ")", ":", "\n", "        ", "self", ".", "done_count", "=", "0", "\n", "self", ".", "duplicate_count", "=", "0", "\n", "self", ".", "failed_action_count", "=", "0", "\n", "self", ".", "prev_frame", "=", "None", "\n", "self", ".", "current_frame", "=", "None", "\n", "self", ".", "_new_episode", "(", "args", ",", "scenes", ",", "possible_targets", ",", "targets", ",", "keep_obj", ",", "glove", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.allenai_savn.episodes.test_val_episode.TestValEpisode.__init__": [[12, 17], ["basic_episode.BasicEpisode.__init__"], "methods", ["home.repos.pwc.inspect_result.allenai_savn.episodes.test_val_episode.TestValEpisode.__init__"], ["def", "__init__", "(", "self", ",", "args", ",", "gpu_id", ",", "strict_done", "=", "False", ")", ":", "\n", "        ", "super", "(", "TestValEpisode", ",", "self", ")", ".", "__init__", "(", "args", ",", "gpu_id", ",", "strict_done", ")", "\n", "self", ".", "file", "=", "None", "\n", "self", ".", "all_data", "=", "None", "\n", "self", ".", "all_data_enumerator", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.allenai_savn.episodes.test_val_episode.TestValEpisode._new_episode": [[18, 45], ["utils.net_util.gpuify", "datasets.environment.Environment", "test_val_episode.TestValEpisode._env.start", "test_val_episode.TestValEpisode._env.reset", "print"], "methods", ["home.repos.pwc.inspect_result.allenai_savn.utils.net_util.gpuify", "home.repos.pwc.inspect_result.allenai_savn.datasets.environment.Environment.start", "home.repos.pwc.inspect_result.allenai_savn.episodes.basic_episode.BasicEpisode.reset"], ["", "def", "_new_episode", "(", "self", ",", "args", ",", "episode", ")", ":", "\n", "        ", "\"\"\" New navigation episode. \"\"\"", "\n", "scene", "=", "episode", "[", "\"scene\"", "]", "\n", "\n", "if", "self", ".", "_env", "is", "None", ":", "\n", "            ", "self", ".", "_env", "=", "Environment", "(", "\n", "offline_data_dir", "=", "args", ".", "offline_data_dir", ",", "\n", "use_offline_controller", "=", "True", ",", "\n", "grid_size", "=", "0.25", ",", "\n", "images_file_name", "=", "args", ".", "images_file_name", ",", "\n", "local_executable_path", "=", "args", ".", "local_executable_path", ",", "\n", ")", "\n", "self", ".", "_env", ".", "start", "(", "scene", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "_env", ".", "reset", "(", "scene", ")", "\n", "\n", "", "self", ".", "environment", ".", "controller", ".", "state", "=", "episode", "[", "\"state\"", "]", "\n", "\n", "self", ".", "task_data", "=", "episode", "[", "\"task_data\"", "]", "\n", "self", ".", "target_object", "=", "episode", "[", "\"goal_object_type\"", "]", "\n", "\n", "if", "args", ".", "verbose", ":", "\n", "            ", "print", "(", "\"Scene\"", ",", "scene", ",", "\"Navigating towards:\"", ",", "self", ".", "target_object", ")", "\n", "\n", "", "self", ".", "glove_embedding", "=", "gpuify", "(", "episode", "[", "\"glove_embedding\"", "]", ",", "self", ".", "gpu_id", ")", "\n", "\n", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.allenai_savn.episodes.test_val_episode.TestValEpisode.new_episode": [[46, 80], ["test_val_episode.TestValEpisode._new_episode", "int", "datasets.data.num_to_name", "open", "pickle.load", "test_val_episode.TestValEpisode.file.close", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.allenai_savn.episodes.test_val_episode.TestValEpisode._new_episode", "home.repos.pwc.inspect_result.allenai_savn.datasets.data.num_to_name"], ["", "def", "new_episode", "(", "\n", "self", ",", "\n", "args", ",", "\n", "scenes", ",", "\n", "possible_targets", "=", "None", ",", "\n", "targets", "=", "None", ",", "\n", "keep_obj", "=", "False", ",", "\n", "glove", "=", "None", ",", "\n", ")", ":", "\n", "        ", "self", ".", "done_count", "=", "0", "\n", "self", ".", "duplicate_count", "=", "0", "\n", "self", ".", "failed_action_count", "=", "0", "\n", "self", ".", "prev_frame", "=", "None", "\n", "self", ".", "current_frame", "=", "None", "\n", "\n", "if", "self", ".", "file", "is", "None", ":", "\n", "            ", "sample_scene", "=", "scenes", "[", "0", "]", "\n", "if", "\"physics\"", "in", "sample_scene", ":", "\n", "                ", "scene_num", "=", "sample_scene", "[", "len", "(", "\"FloorPlan\"", ")", ":", "-", "len", "(", "\"_physics\"", ")", "]", "\n", "", "else", ":", "\n", "                ", "scene_num", "=", "sample_scene", "[", "len", "(", "\"FloorPlan\"", ")", ":", "]", "\n", "", "scene_num", "=", "int", "(", "scene_num", ")", "\n", "scene_type", "=", "num_to_name", "(", "scene_num", ")", "\n", "task_type", "=", "args", ".", "test_or_val", "\n", "self", ".", "file", "=", "open", "(", "\n", "\"test_val_split/\"", "+", "scene_type", "+", "\"_\"", "+", "task_type", "+", "\".pkl\"", ",", "\"rb\"", "\n", ")", "\n", "self", ".", "all_data", "=", "pickle", ".", "load", "(", "self", ".", "file", ")", "\n", "self", ".", "file", ".", "close", "(", ")", "\n", "self", ".", "all_data_enumerator", "=", "0", "\n", "\n", "", "episode", "=", "self", ".", "all_data", "[", "self", ".", "all_data_enumerator", "]", "\n", "self", ".", "all_data_enumerator", "+=", "1", "\n", "self", ".", "_new_episode", "(", "args", ",", "episode", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.allenai_savn.runners.train_util.run_episode": [[7, 16], ["range", "player.action"], "function", ["home.repos.pwc.inspect_result.allenai_savn.agents.agent.ThorAgent.action"], ["def", "run_episode", "(", "player", ",", "args", ",", "total_reward", ",", "model_options", ",", "training", ")", ":", "\n", "    ", "num_steps", "=", "args", ".", "num_steps", "\n", "\n", "for", "_", "in", "range", "(", "num_steps", ")", ":", "\n", "        ", "player", ".", "action", "(", "model_options", ",", "training", ")", "\n", "total_reward", "=", "total_reward", "+", "player", ".", "reward", "\n", "if", "player", ".", "done", ":", "\n", "            ", "break", "\n", "", "", "return", "total_reward", "\n", "\n"]], "home.repos.pwc.inspect_result.allenai_savn.runners.train_util.new_episode": [[18, 30], ["player.episode.new_episode", "player.reset_hidden"], "function", ["home.repos.pwc.inspect_result.allenai_savn.runners.train_util.new_episode", "home.repos.pwc.inspect_result.allenai_savn.agents.agent.ThorAgent.reset_hidden"], ["", "def", "new_episode", "(", "\n", "args", ",", "\n", "player", ",", "\n", "scenes", ",", "\n", "possible_targets", "=", "None", ",", "\n", "targets", "=", "None", ",", "\n", "keep_obj", "=", "False", ",", "\n", "glove", "=", "None", ",", "\n", ")", ":", "\n", "    ", "player", ".", "episode", ".", "new_episode", "(", "args", ",", "scenes", ",", "possible_targets", ",", "targets", ",", "keep_obj", ",", "glove", ")", "\n", "player", ".", "reset_hidden", "(", ")", "\n", "player", ".", "done", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.allenai_savn.runners.train_util.a3c_loss": [[32, 71], ["torch.zeros", "player.values.append", "torch.zeros", "torch.autograd.Variable", "reversed", "player.eval_at_state", "torch.autograd.Variable", "range", "torch.cuda.device", "R.cuda.cuda", "torch.cuda.device", "gae.cuda.cuda", "len", "advantage.pow", "torch.autograd.Variable"], "function", ["home.repos.pwc.inspect_result.allenai_savn.agents.agent.ThorAgent.eval_at_state"], ["", "def", "a3c_loss", "(", "args", ",", "player", ",", "gpu_id", ",", "model_options", ")", ":", "\n", "    ", "\"\"\" Borrowed from https://github.com/dgriff777/rl_a3c_pytorch. \"\"\"", "\n", "R", "=", "torch", ".", "zeros", "(", "1", ",", "1", ")", "\n", "if", "not", "player", ".", "done", ":", "\n", "        ", "_", ",", "output", "=", "player", ".", "eval_at_state", "(", "model_options", ")", "\n", "R", "=", "output", ".", "value", ".", "data", "\n", "\n", "", "if", "gpu_id", ">=", "0", ":", "\n", "        ", "with", "torch", ".", "cuda", ".", "device", "(", "gpu_id", ")", ":", "\n", "            ", "R", "=", "R", ".", "cuda", "(", ")", "\n", "\n", "", "", "player", ".", "values", ".", "append", "(", "Variable", "(", "R", ")", ")", "\n", "policy_loss", "=", "0", "\n", "value_loss", "=", "0", "\n", "gae", "=", "torch", ".", "zeros", "(", "1", ",", "1", ")", "\n", "if", "gpu_id", ">=", "0", ":", "\n", "        ", "with", "torch", ".", "cuda", ".", "device", "(", "gpu_id", ")", ":", "\n", "            ", "gae", "=", "gae", ".", "cuda", "(", ")", "\n", "", "", "R", "=", "Variable", "(", "R", ")", "\n", "for", "i", "in", "reversed", "(", "range", "(", "len", "(", "player", ".", "rewards", ")", ")", ")", ":", "\n", "        ", "R", "=", "args", ".", "gamma", "*", "R", "+", "player", ".", "rewards", "[", "i", "]", "\n", "advantage", "=", "R", "-", "player", ".", "values", "[", "i", "]", "\n", "value_loss", "=", "value_loss", "+", "0.5", "*", "advantage", ".", "pow", "(", "2", ")", "\n", "\n", "delta_t", "=", "(", "\n", "player", ".", "rewards", "[", "i", "]", "\n", "+", "args", ".", "gamma", "*", "player", ".", "values", "[", "i", "+", "1", "]", ".", "data", "\n", "-", "player", ".", "values", "[", "i", "]", ".", "data", "\n", ")", "\n", "\n", "gae", "=", "gae", "*", "args", ".", "gamma", "*", "args", ".", "tau", "+", "delta_t", "\n", "\n", "policy_loss", "=", "(", "\n", "policy_loss", "\n", "-", "player", ".", "log_probs", "[", "i", "]", "*", "Variable", "(", "gae", ")", "\n", "-", "args", ".", "beta", "*", "player", ".", "entropies", "[", "i", "]", "\n", ")", "\n", "\n", "", "return", "policy_loss", ",", "value_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.allenai_savn.runners.train_util.compute_learned_loss": [[73, 82], ["torch.cat", "player.model.learned_loss"], "function", ["home.repos.pwc.inspect_result.allenai_savn.models.savn.SAVN.learned_loss"], ["", "def", "compute_learned_loss", "(", "args", ",", "player", ",", "gpu_id", ",", "model_options", ")", ":", "\n", "    ", "loss_hx", "=", "torch", ".", "cat", "(", "(", "player", ".", "hidden", "[", "0", "]", ",", "player", ".", "last_action_probs", ")", ",", "dim", "=", "1", ")", "\n", "learned_loss", "=", "{", "\n", "\"learned_loss\"", ":", "player", ".", "model", ".", "learned_loss", "(", "\n", "loss_hx", ",", "player", ".", "learned_input", ",", "model_options", ".", "params", "\n", ")", "\n", "}", "\n", "player", ".", "learned_input", "=", "None", "\n", "return", "learned_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.allenai_savn.runners.train_util.transfer_gradient_from_player_to_shared": [[84, 97], ["zip", "player.model.parameters", "shared_model.parameters", "torch.zeros", "param.grad.cpu"], "function", ["None"], ["", "def", "transfer_gradient_from_player_to_shared", "(", "player", ",", "shared_model", ",", "gpu_id", ")", ":", "\n", "    ", "\"\"\" Transfer the gradient from the player's model to the shared model\n        and step \"\"\"", "\n", "for", "param", ",", "shared_param", "in", "zip", "(", "\n", "player", ".", "model", ".", "parameters", "(", ")", ",", "shared_model", ".", "parameters", "(", ")", "\n", ")", ":", "\n", "        ", "if", "shared_param", ".", "requires_grad", ":", "\n", "            ", "if", "param", ".", "grad", "is", "None", ":", "\n", "                ", "shared_param", ".", "_grad", "=", "torch", ".", "zeros", "(", "shared_param", ".", "shape", ")", "\n", "", "elif", "gpu_id", "<", "0", ":", "\n", "                ", "shared_param", ".", "_grad", "=", "param", ".", "grad", "\n", "", "else", ":", "\n", "                ", "shared_param", ".", "_grad", "=", "param", ".", "grad", ".", "cpu", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.allenai_savn.runners.train_util.transfer_gradient_to_shared": [[99, 113], ["shared_model.named_parameters", "torch.zeros", "gradient[].cpu"], "function", ["None"], ["", "", "", "", "def", "transfer_gradient_to_shared", "(", "gradient", ",", "shared_model", ",", "gpu_id", ")", ":", "\n", "    ", "\"\"\" Transfer the gradient from the player's model to the shared model\n        and step \"\"\"", "\n", "i", "=", "0", "\n", "for", "name", ",", "param", "in", "shared_model", ".", "named_parameters", "(", ")", ":", "\n", "        ", "if", "param", ".", "requires_grad", ":", "\n", "            ", "if", "gradient", "[", "i", "]", "is", "None", ":", "\n", "                ", "param", ".", "_grad", "=", "torch", ".", "zeros", "(", "param", ".", "shape", ")", "\n", "", "elif", "gpu_id", "<", "0", ":", "\n", "                ", "param", ".", "_grad", "=", "gradient", "[", "i", "]", "\n", "", "else", ":", "\n", "                ", "param", ".", "_grad", "=", "gradient", "[", "i", "]", ".", "cpu", "(", ")", "\n", "\n", "", "", "i", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.allenai_savn.runners.train_util.get_params": [[115, 132], ["shared_model.named_parameters", "param.clone().detach().requires_grad_", "param.clone().detach().requires_grad_.to", "param.clone().detach", "torch.device", "param.clone"], "function", ["None"], ["", "", "def", "get_params", "(", "shared_model", ",", "gpu_id", ")", ":", "\n", "    ", "\"\"\" Copies the parameters from shared_model into theta. \"\"\"", "\n", "theta", "=", "{", "}", "\n", "for", "name", ",", "param", "in", "shared_model", ".", "named_parameters", "(", ")", ":", "\n", "# Clone and detach.", "\n", "        ", "param_copied", "=", "param", ".", "clone", "(", ")", ".", "detach", "(", ")", ".", "requires_grad_", "(", "True", ")", "\n", "if", "gpu_id", ">=", "0", ":", "\n", "# theta[name] = torch.tensor(", "\n", "#     param_copied,", "\n", "#     requires_grad=True,", "\n", "#     device=torch.device(\"cuda:{}\".format(gpu_id)),", "\n", "# )", "\n", "# Changed for pythorch 0.4.1.", "\n", "            ", "theta", "[", "name", "]", "=", "param_copied", ".", "to", "(", "torch", ".", "device", "(", "\"cuda:{}\"", ".", "format", "(", "gpu_id", ")", ")", ")", "\n", "", "else", ":", "\n", "            ", "theta", "[", "name", "]", "=", "param_copied", "\n", "", "", "return", "theta", "\n", "\n"]], "home.repos.pwc.inspect_result.allenai_savn.runners.train_util.update_loss": [[134, 139], ["None"], "function", ["None"], ["", "def", "update_loss", "(", "sum_total_loss", ",", "total_loss", ")", ":", "\n", "    ", "if", "sum_total_loss", "is", "None", ":", "\n", "        ", "return", "total_loss", "\n", "", "else", ":", "\n", "        ", "return", "sum_total_loss", "+", "total_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.allenai_savn.runners.train_util.reset_player": [[141, 144], ["player.clear_actions", "player.repackage_hidden"], "function", ["home.repos.pwc.inspect_result.allenai_savn.agents.agent.ThorAgent.clear_actions", "home.repos.pwc.inspect_result.allenai_savn.agents.agent.ThorAgent.repackage_hidden"], ["", "", "def", "reset_player", "(", "player", ")", ":", "\n", "    ", "player", ".", "clear_actions", "(", ")", "\n", "player", ".", "repackage_hidden", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.allenai_savn.runners.train_util.SGD_step": [[146, 157], ["theta.items"], "function", ["None"], ["", "def", "SGD_step", "(", "theta", ",", "grad", ",", "lr", ")", ":", "\n", "    ", "theta_i", "=", "{", "}", "\n", "j", "=", "0", "\n", "for", "name", ",", "param", "in", "theta", ".", "items", "(", ")", ":", "\n", "        ", "if", "grad", "[", "j", "]", "is", "not", "None", "and", "\"exclude\"", "not", "in", "name", "and", "\"ll\"", "not", "in", "name", ":", "\n", "            ", "theta_i", "[", "name", "]", "=", "param", "-", "lr", "*", "grad", "[", "j", "]", "\n", "", "else", ":", "\n", "            ", "theta_i", "[", "name", "]", "=", "param", "\n", "", "j", "+=", "1", "\n", "\n", "", "return", "theta_i", "\n", "\n"]], "home.repos.pwc.inspect_result.allenai_savn.runners.train_util.get_scenes_to_use": [[159, 163], ["None"], "function", ["None"], ["", "def", "get_scenes_to_use", "(", "player", ",", "scenes", ",", "args", ")", ":", "\n", "    ", "if", "args", ".", "new_scene", ":", "\n", "        ", "return", "scenes", "\n", "", "return", "[", "player", ".", "episode", ".", "environment", ".", "scene_name", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.allenai_savn.runners.train_util.compute_loss": [[165, 169], ["train_util.a3c_loss", "dict"], "function", ["home.repos.pwc.inspect_result.allenai_savn.runners.train_util.a3c_loss"], ["", "def", "compute_loss", "(", "args", ",", "player", ",", "gpu_id", ",", "model_options", ")", ":", "\n", "    ", "policy_loss", ",", "value_loss", "=", "a3c_loss", "(", "args", ",", "player", ",", "gpu_id", ",", "model_options", ")", "\n", "total_loss", "=", "policy_loss", "+", "0.5", "*", "value_loss", "\n", "return", "dict", "(", "total_loss", "=", "total_loss", ",", "policy_loss", "=", "policy_loss", ",", "value_loss", "=", "value_loss", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.allenai_savn.runners.train_util.end_episode": [[171, 183], ["results.update", "res_queue.put", "int"], "function", ["None"], ["", "def", "end_episode", "(", "\n", "player", ",", "res_queue", ",", "title", "=", "None", ",", "episode_num", "=", "0", ",", "include_obj_success", "=", "False", ",", "**", "kwargs", "\n", ")", ":", "\n", "\n", "    ", "results", "=", "{", "\n", "\"done_count\"", ":", "player", ".", "episode", ".", "done_count", ",", "\n", "\"ep_length\"", ":", "player", ".", "eps_len", ",", "\n", "\"success\"", ":", "int", "(", "player", ".", "success", ")", ",", "\n", "}", "\n", "\n", "results", ".", "update", "(", "**", "kwargs", ")", "\n", "res_queue", ".", "put", "(", "results", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.allenai_savn.runners.train_util.get_bucketed_metrics": [[185, 192], ["None"], "function", ["None"], ["", "def", "get_bucketed_metrics", "(", "spl", ",", "best_path_length", ",", "success", ")", ":", "\n", "    ", "out", "=", "{", "}", "\n", "for", "i", "in", "[", "1", ",", "5", "]", ":", "\n", "        ", "if", "best_path_length", ">=", "i", ":", "\n", "            ", "out", "[", "\"GreaterThan/{}/success\"", ".", "format", "(", "i", ")", "]", "=", "success", "\n", "out", "[", "\"GreaterThan/{}/spl\"", ".", "format", "(", "i", ")", "]", "=", "spl", "\n", "", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.allenai_savn.runners.train_util.compute_spl": [[194, 216], ["float", "float", "player.environment.controller.shortest_path_to_target", "float"], "function", ["home.repos.pwc.inspect_result.allenai_savn.datasets.offline_controller_with_small_rotation.OfflineControllerWithSmallRotation.shortest_path_to_target"], ["", "def", "compute_spl", "(", "player", ",", "start_state", ")", ":", "\n", "\n", "    ", "best", "=", "float", "(", "\"inf\"", ")", "\n", "for", "obj_id", "in", "player", ".", "episode", ".", "task_data", ":", "\n", "        ", "try", ":", "\n", "            ", "_", ",", "best_path_len", ",", "_", "=", "player", ".", "environment", ".", "controller", ".", "shortest_path_to_target", "(", "\n", "start_state", ",", "obj_id", ",", "False", "\n", ")", "\n", "if", "best_path_len", "<", "best", ":", "\n", "                ", "best", "=", "best_path_len", "\n", "", "", "except", ":", "\n", "# This is due to a rare known bug.", "\n", "            ", "continue", "\n", "\n", "", "", "if", "not", "player", ".", "success", ":", "\n", "        ", "return", "0", ",", "best", "\n", "\n", "", "if", "best", "<", "float", "(", "\"inf\"", ")", ":", "\n", "        ", "return", "best", "/", "float", "(", "player", ".", "eps_len", ")", ",", "best", "\n", "\n", "# This is due to a rare known bug.", "\n", "", "return", "0", ",", "best", "\n", "", ""]], "home.repos.pwc.inspect_result.allenai_savn.runners.savn_train.savn_train": [[24, 148], ["datasets.glove.Glove", "datasets.data.get_data", "random.seed", "random.shuffle", "setproctitle.setproctitle", "torch.cuda.set_device", "torch.manual_seed", "initialize_agent", "models.model_io.ModelOptions", "initialize_agent.exit", "torch.cuda.manual_seed", "time.time", "train_util.new_episode", "train_util.compute_loss", "train_util.compute_loss.items", "torch.autograd.grad", "train_util.end_episode", "train_util.transfer_gradient_to_shared", "optimizer.step", "train_util.reset_player", "range", "train_util.get_params", "train_util.run_episode", "v.item", "print", "len", "len", "len", "print", "train_util.compute_learned_loss", "torch.autograd.grad", "params_list.append", "train_util.compute_learned_loss.items", "print", "train_util.SGD_step", "v.item", "params_list[].items", "time.time", "params_list[].items"], "function", ["home.repos.pwc.inspect_result.allenai_savn.datasets.data.get_data", "home.repos.pwc.inspect_result.allenai_savn.agents.agent.ThorAgent.exit", "home.repos.pwc.inspect_result.allenai_savn.runners.train_util.new_episode", "home.repos.pwc.inspect_result.allenai_savn.runners.train_util.compute_loss", "home.repos.pwc.inspect_result.allenai_savn.runners.train_util.end_episode", "home.repos.pwc.inspect_result.allenai_savn.runners.train_util.transfer_gradient_to_shared", "home.repos.pwc.inspect_result.allenai_savn.episodes.basic_episode.BasicEpisode.step", "home.repos.pwc.inspect_result.allenai_savn.runners.train_util.reset_player", "home.repos.pwc.inspect_result.allenai_savn.runners.train_util.get_params", "home.repos.pwc.inspect_result.allenai_savn.runners.train_util.run_episode", "home.repos.pwc.inspect_result.allenai_savn.runners.train_util.compute_learned_loss", "home.repos.pwc.inspect_result.allenai_savn.runners.train_util.SGD_step"], ["def", "savn_train", "(", "\n", "rank", ",", "\n", "args", ",", "\n", "create_shared_model", ",", "\n", "shared_model", ",", "\n", "initialize_agent", ",", "\n", "optimizer", ",", "\n", "res_queue", ",", "\n", "end_flag", ",", "\n", ")", ":", "\n", "\n", "    ", "glove", "=", "Glove", "(", "args", ".", "glove_file", ")", "\n", "scenes", ",", "possible_targets", ",", "targets", "=", "get_data", "(", "args", ".", "scene_types", ",", "args", ".", "train_scenes", ")", "\n", "\n", "random", ".", "seed", "(", "args", ".", "seed", "+", "rank", ")", "\n", "idx", "=", "[", "j", "for", "j", "in", "range", "(", "len", "(", "args", ".", "scene_types", ")", ")", "]", "\n", "random", ".", "shuffle", "(", "idx", ")", "\n", "\n", "setproctitle", ".", "setproctitle", "(", "\"Training Agent: {}\"", ".", "format", "(", "rank", ")", ")", "\n", "\n", "gpu_id", "=", "args", ".", "gpu_ids", "[", "rank", "%", "len", "(", "args", ".", "gpu_ids", ")", "]", "\n", "\n", "import", "torch", "\n", "\n", "torch", ".", "cuda", ".", "set_device", "(", "gpu_id", ")", "\n", "torch", ".", "manual_seed", "(", "args", ".", "seed", "+", "rank", ")", "\n", "if", "gpu_id", ">=", "0", ":", "\n", "        ", "torch", ".", "cuda", ".", "manual_seed", "(", "args", ".", "seed", "+", "rank", ")", "\n", "\n", "", "player", "=", "initialize_agent", "(", "create_shared_model", ",", "args", ",", "rank", ",", "gpu_id", "=", "gpu_id", ")", "\n", "\n", "model_options", "=", "ModelOptions", "(", ")", "\n", "\n", "j", "=", "0", "\n", "\n", "while", "not", "end_flag", ".", "value", ":", "\n", "\n", "        ", "start_time", "=", "time", ".", "time", "(", ")", "\n", "new_episode", "(", "\n", "args", ",", "player", ",", "scenes", "[", "idx", "[", "j", "]", "]", ",", "possible_targets", ",", "targets", "[", "idx", "[", "j", "]", "]", ",", "glove", "=", "glove", "\n", ")", "\n", "player", ".", "episode", ".", "exploring", "=", "True", "\n", "total_reward", "=", "0", "\n", "player", ".", "eps_len", "=", "0", "\n", "\n", "# theta <- shared_initialization", "\n", "params_list", "=", "[", "get_params", "(", "shared_model", ",", "gpu_id", ")", "]", "\n", "model_options", ".", "params", "=", "params_list", "[", "-", "1", "]", "\n", "loss_dict", "=", "{", "}", "\n", "reward_dict", "=", "{", "}", "\n", "episode_num", "=", "0", "\n", "num_gradients", "=", "0", "\n", "\n", "# Accumulate loss over all meta_train episodes.", "\n", "while", "True", ":", "\n", "# Run episode for k steps or until it is done or has made a mistake (if dynamic adapt is true).", "\n", "            ", "if", "args", ".", "verbose", ":", "\n", "                ", "print", "(", "\"New inner step\"", ")", "\n", "", "total_reward", "=", "run_episode", "(", "player", ",", "args", ",", "total_reward", ",", "model_options", ",", "True", ")", "\n", "\n", "if", "player", ".", "done", ":", "\n", "                ", "break", "\n", "\n", "", "if", "args", ".", "gradient_limit", "<", "0", "or", "episode_num", "<", "args", ".", "gradient_limit", ":", "\n", "\n", "                ", "num_gradients", "+=", "1", "\n", "\n", "# Compute the loss.", "\n", "learned_loss", "=", "compute_learned_loss", "(", "args", ",", "player", ",", "gpu_id", ",", "model_options", ")", "\n", "\n", "if", "args", ".", "verbose", ":", "\n", "                    ", "print", "(", "\"inner gradient\"", ")", "\n", "", "inner_gradient", "=", "torch", ".", "autograd", ".", "grad", "(", "\n", "learned_loss", "[", "\"learned_loss\"", "]", ",", "\n", "[", "v", "for", "_", ",", "v", "in", "params_list", "[", "episode_num", "]", ".", "items", "(", ")", "]", ",", "\n", "create_graph", "=", "True", ",", "\n", "retain_graph", "=", "True", ",", "\n", "allow_unused", "=", "True", ",", "\n", ")", "\n", "\n", "params_list", ".", "append", "(", "\n", "SGD_step", "(", "params_list", "[", "episode_num", "]", ",", "inner_gradient", ",", "args", ".", "inner_lr", ")", "\n", ")", "\n", "model_options", ".", "params", "=", "params_list", "[", "-", "1", "]", "\n", "\n", "# reset_player(player)", "\n", "episode_num", "+=", "1", "\n", "\n", "for", "k", ",", "v", "in", "learned_loss", ".", "items", "(", ")", ":", "\n", "                    ", "loss_dict", "[", "\"{}/{:d}\"", ".", "format", "(", "k", ",", "episode_num", ")", "]", "=", "v", ".", "item", "(", ")", "\n", "\n", "", "", "", "loss", "=", "compute_loss", "(", "args", ",", "player", ",", "gpu_id", ",", "model_options", ")", "\n", "\n", "for", "k", ",", "v", "in", "loss", ".", "items", "(", ")", ":", "\n", "            ", "loss_dict", "[", "k", "]", "=", "v", ".", "item", "(", ")", "\n", "", "reward_dict", "[", "\"total_reward\"", "]", "=", "total_reward", "\n", "\n", "if", "args", ".", "verbose", ":", "\n", "            ", "print", "(", "\"meta gradient\"", ")", "\n", "\n", "# Compute the meta_gradient, i.e. differentiate w.r.t. theta.", "\n", "", "meta_gradient", "=", "torch", ".", "autograd", ".", "grad", "(", "\n", "loss", "[", "\"total_loss\"", "]", ",", "\n", "[", "v", "for", "_", ",", "v", "in", "params_list", "[", "0", "]", ".", "items", "(", ")", "]", ",", "\n", "allow_unused", "=", "True", ",", "\n", ")", "\n", "\n", "end_episode", "(", "\n", "player", ",", "\n", "res_queue", ",", "\n", "title", "=", "args", ".", "scene_types", "[", "idx", "[", "j", "]", "]", ",", "\n", "episode_num", "=", "0", ",", "\n", "total_time", "=", "time", ".", "time", "(", ")", "-", "start_time", ",", "\n", "total_reward", "=", "total_reward", ",", "\n", ")", "\n", "\n", "# Copy the meta_gradient to shared_model and step.", "\n", "transfer_gradient_to_shared", "(", "meta_gradient", ",", "shared_model", ",", "gpu_id", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "reset_player", "(", "player", ")", "\n", "\n", "j", "=", "(", "j", "+", "1", ")", "%", "len", "(", "args", ".", "scene_types", ")", "\n", "\n", "", "player", ".", "exit", "(", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.allenai_savn.runners.nonadaptivea3c_train.nonadaptivea3c_train": [[26, 108], ["datasets.glove.Glove", "datasets.data.get_data", "random.seed", "random.shuffle", "setproctitle.setproctitle", "torch.cuda.set_device", "torch.manual_seed", "initialize_agent", "models.model_io.ModelOptions", "initialize_agent.exit", "torch.cuda.manual_seed", "isinstance", "train_util.new_episode", "time.time", "train_util.end_episode", "train_util.reset_player", "range", "initialize_agent.sync_with_shared", "train_util.run_episode", "train_util.compute_loss", "loss[].item", "len", "len", "len", "initialize_agent.model.zero_grad", "loss[].backward", "torch.nn.utils.clip_grad_norm_", "train_util.transfer_gradient_from_player_to_shared", "optimizer.step", "train_util.reset_player", "initialize_agent.model.parameters", "time.time"], "function", ["home.repos.pwc.inspect_result.allenai_savn.datasets.data.get_data", "home.repos.pwc.inspect_result.allenai_savn.agents.agent.ThorAgent.exit", "home.repos.pwc.inspect_result.allenai_savn.runners.train_util.new_episode", "home.repos.pwc.inspect_result.allenai_savn.runners.train_util.end_episode", "home.repos.pwc.inspect_result.allenai_savn.runners.train_util.reset_player", "home.repos.pwc.inspect_result.allenai_savn.agents.agent.ThorAgent.sync_with_shared", "home.repos.pwc.inspect_result.allenai_savn.runners.train_util.run_episode", "home.repos.pwc.inspect_result.allenai_savn.runners.train_util.compute_loss", "home.repos.pwc.inspect_result.allenai_savn.runners.train_util.transfer_gradient_from_player_to_shared", "home.repos.pwc.inspect_result.allenai_savn.episodes.basic_episode.BasicEpisode.step", "home.repos.pwc.inspect_result.allenai_savn.runners.train_util.reset_player"], ["def", "nonadaptivea3c_train", "(", "\n", "rank", ",", "\n", "args", ",", "\n", "create_shared_model", ",", "\n", "shared_model", ",", "\n", "initialize_agent", ",", "\n", "optimizer", ",", "\n", "res_queue", ",", "\n", "end_flag", ",", "\n", ")", ":", "\n", "\n", "    ", "glove", "=", "Glove", "(", "args", ".", "glove_file", ")", "\n", "scenes", ",", "possible_targets", ",", "targets", "=", "get_data", "(", "args", ".", "scene_types", ",", "args", ".", "train_scenes", ")", "\n", "\n", "random", ".", "seed", "(", "args", ".", "seed", "+", "rank", ")", "\n", "idx", "=", "[", "j", "for", "j", "in", "range", "(", "len", "(", "args", ".", "scene_types", ")", ")", "]", "\n", "random", ".", "shuffle", "(", "idx", ")", "\n", "\n", "setproctitle", ".", "setproctitle", "(", "\"Training Agent: {}\"", ".", "format", "(", "rank", ")", ")", "\n", "\n", "gpu_id", "=", "args", ".", "gpu_ids", "[", "rank", "%", "len", "(", "args", ".", "gpu_ids", ")", "]", "\n", "\n", "import", "torch", "\n", "\n", "torch", ".", "cuda", ".", "set_device", "(", "gpu_id", ")", "\n", "\n", "torch", ".", "manual_seed", "(", "args", ".", "seed", "+", "rank", ")", "\n", "if", "gpu_id", ">=", "0", ":", "\n", "        ", "torch", ".", "cuda", ".", "manual_seed", "(", "args", ".", "seed", "+", "rank", ")", "\n", "\n", "", "player", "=", "initialize_agent", "(", "create_shared_model", ",", "args", ",", "rank", ",", "gpu_id", "=", "gpu_id", ")", "\n", "compute_grad", "=", "not", "isinstance", "(", "player", ",", "RandomNavigationAgent", ")", "\n", "\n", "model_options", "=", "ModelOptions", "(", ")", "\n", "\n", "j", "=", "0", "\n", "\n", "while", "not", "end_flag", ".", "value", ":", "\n", "\n", "# Get a new episode.", "\n", "        ", "total_reward", "=", "0", "\n", "player", ".", "eps_len", "=", "0", "\n", "new_episode", "(", "\n", "args", ",", "player", ",", "scenes", "[", "idx", "[", "j", "]", "]", ",", "possible_targets", ",", "targets", "[", "idx", "[", "j", "]", "]", ",", "glove", "=", "glove", "\n", ")", "\n", "player_start_time", "=", "time", ".", "time", "(", ")", "\n", "\n", "# Train on the new episode.", "\n", "while", "not", "player", ".", "done", ":", "\n", "# Make sure model is up to date.", "\n", "            ", "player", ".", "sync_with_shared", "(", "shared_model", ")", "\n", "# Run episode for num_steps or until player is done.", "\n", "total_reward", "=", "run_episode", "(", "player", ",", "args", ",", "total_reward", ",", "model_options", ",", "True", ")", "\n", "# Compute the loss.", "\n", "loss", "=", "compute_loss", "(", "args", ",", "player", ",", "gpu_id", ",", "model_options", ")", "\n", "if", "compute_grad", ":", "\n", "# Compute gradient.", "\n", "                ", "player", ".", "model", ".", "zero_grad", "(", ")", "\n", "loss", "[", "\"total_loss\"", "]", ".", "backward", "(", ")", "\n", "torch", ".", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "player", ".", "model", ".", "parameters", "(", ")", ",", "100.0", ")", "\n", "# Transfer gradient to shared model and step optimizer.", "\n", "transfer_gradient_from_player_to_shared", "(", "player", ",", "shared_model", ",", "gpu_id", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "# Clear actions and repackage hidden.", "\n", "", "if", "not", "player", ".", "done", ":", "\n", "                ", "reset_player", "(", "player", ")", "\n", "\n", "", "", "for", "k", "in", "loss", ":", "\n", "            ", "loss", "[", "k", "]", "=", "loss", "[", "k", "]", ".", "item", "(", ")", "\n", "\n", "", "end_episode", "(", "\n", "player", ",", "\n", "res_queue", ",", "\n", "title", "=", "args", ".", "scene_types", "[", "idx", "[", "j", "]", "]", ",", "\n", "total_time", "=", "time", ".", "time", "(", ")", "-", "player_start_time", ",", "\n", "total_reward", "=", "total_reward", ",", "\n", ")", "\n", "reset_player", "(", "player", ")", "\n", "\n", "j", "=", "(", "j", "+", "1", ")", "%", "len", "(", "args", ".", "scene_types", ")", "\n", "\n", "", "player", ".", "exit", "(", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.allenai_savn.runners.nonadaptivea3c_val.nonadaptivea3c_val": [[23, 110], ["datasets.glove.Glove", "datasets.data.get_data", "datasets.data.name_to_num", "setproctitle.setproctitle", "torch.manual_seed", "model_create_fn", "initialize_agent", "initialize_agent.sync_with_shared", "models.model_io.ModelOptions", "initialize_agent.exit", "res_queue.put", "torch.cuda.manual_seed", "torch.load", "model_create_fn.load_state_dict", "train_util.new_episode", "copy.deepcopy", "time.time", "train_util.compute_spl", "train_util.get_bucketed_metrics", "train_util.end_episode", "train_util.reset_player", "initialize_agent.sync_with_shared", "train_util.run_episode", "train_util.compute_loss", "loss[].item", "len", "len", "train_util.reset_player", "time.time"], "function", ["home.repos.pwc.inspect_result.allenai_savn.datasets.data.get_data", "home.repos.pwc.inspect_result.allenai_savn.datasets.data.name_to_num", "home.repos.pwc.inspect_result.allenai_savn.agents.agent.ThorAgent.sync_with_shared", "home.repos.pwc.inspect_result.allenai_savn.agents.agent.ThorAgent.exit", "home.repos.pwc.inspect_result.allenai_savn.runners.train_util.new_episode", "home.repos.pwc.inspect_result.allenai_savn.runners.train_util.compute_spl", "home.repos.pwc.inspect_result.allenai_savn.runners.train_util.get_bucketed_metrics", "home.repos.pwc.inspect_result.allenai_savn.runners.train_util.end_episode", "home.repos.pwc.inspect_result.allenai_savn.runners.train_util.reset_player", "home.repos.pwc.inspect_result.allenai_savn.agents.agent.ThorAgent.sync_with_shared", "home.repos.pwc.inspect_result.allenai_savn.runners.train_util.run_episode", "home.repos.pwc.inspect_result.allenai_savn.runners.train_util.compute_loss", "home.repos.pwc.inspect_result.allenai_savn.runners.train_util.reset_player"], ["def", "nonadaptivea3c_val", "(", "\n", "rank", ",", "\n", "args", ",", "\n", "model_to_open", ",", "\n", "model_create_fn", ",", "\n", "initialize_agent", ",", "\n", "res_queue", ",", "\n", "max_count", ",", "\n", "scene_type", ",", "\n", ")", ":", "\n", "\n", "    ", "glove", "=", "Glove", "(", "args", ".", "glove_file", ")", "\n", "scenes", ",", "possible_targets", ",", "targets", "=", "get_data", "(", "args", ".", "scene_types", ",", "args", ".", "val_scenes", ")", "\n", "num", "=", "name_to_num", "(", "scene_type", ")", "\n", "scenes", "=", "scenes", "[", "num", "]", "\n", "targets", "=", "targets", "[", "num", "]", "\n", "\n", "if", "scene_type", "==", "\"living_room\"", ":", "\n", "        ", "args", ".", "max_episode_length", "=", "200", "\n", "", "else", ":", "\n", "        ", "args", ".", "max_episode_length", "=", "100", "\n", "\n", "", "setproctitle", ".", "setproctitle", "(", "\"Agent: {}\"", ".", "format", "(", "rank", ")", ")", "\n", "\n", "gpu_id", "=", "args", ".", "gpu_ids", "[", "rank", "%", "len", "(", "args", ".", "gpu_ids", ")", "]", "\n", "torch", ".", "manual_seed", "(", "args", ".", "seed", "+", "rank", ")", "\n", "if", "gpu_id", ">=", "0", ":", "\n", "        ", "torch", ".", "cuda", ".", "manual_seed", "(", "args", ".", "seed", "+", "rank", ")", "\n", "\n", "", "shared_model", "=", "model_create_fn", "(", "args", ")", "\n", "\n", "if", "model_to_open", "!=", "\"\"", ":", "\n", "        ", "saved_state", "=", "torch", ".", "load", "(", "\n", "model_to_open", ",", "map_location", "=", "lambda", "storage", ",", "loc", ":", "storage", "\n", ")", "\n", "shared_model", ".", "load_state_dict", "(", "saved_state", ")", "\n", "\n", "", "player", "=", "initialize_agent", "(", "model_create_fn", ",", "args", ",", "rank", ",", "gpu_id", "=", "gpu_id", ")", "\n", "player", ".", "sync_with_shared", "(", "shared_model", ")", "\n", "count", "=", "0", "\n", "\n", "model_options", "=", "ModelOptions", "(", ")", "\n", "\n", "j", "=", "0", "\n", "\n", "while", "count", "<", "max_count", ":", "\n", "\n", "# Get a new episode.", "\n", "        ", "total_reward", "=", "0", "\n", "player", ".", "eps_len", "=", "0", "\n", "new_episode", "(", "args", ",", "player", ",", "scenes", ",", "possible_targets", ",", "targets", ",", "glove", "=", "glove", ")", "\n", "player_start_state", "=", "copy", ".", "deepcopy", "(", "player", ".", "environment", ".", "controller", ".", "state", ")", "\n", "player_start_time", "=", "time", ".", "time", "(", ")", "\n", "\n", "# Train on the new episode.", "\n", "while", "not", "player", ".", "done", ":", "\n", "# Make sure model is up to date.", "\n", "            ", "player", ".", "sync_with_shared", "(", "shared_model", ")", "\n", "# Run episode for num_steps or until player is done.", "\n", "total_reward", "=", "run_episode", "(", "player", ",", "args", ",", "total_reward", ",", "model_options", ",", "False", ")", "\n", "# Compute the loss.", "\n", "loss", "=", "compute_loss", "(", "args", ",", "player", ",", "gpu_id", ",", "model_options", ")", "\n", "if", "not", "player", ".", "done", ":", "\n", "                ", "reset_player", "(", "player", ")", "\n", "\n", "", "", "for", "k", "in", "loss", ":", "\n", "            ", "loss", "[", "k", "]", "=", "loss", "[", "k", "]", ".", "item", "(", ")", "\n", "", "spl", ",", "best_path_length", "=", "compute_spl", "(", "player", ",", "player_start_state", ")", "\n", "\n", "bucketed_spl", "=", "get_bucketed_metrics", "(", "spl", ",", "best_path_length", ",", "player", ".", "success", ")", "\n", "\n", "end_episode", "(", "\n", "player", ",", "\n", "res_queue", ",", "\n", "total_time", "=", "time", ".", "time", "(", ")", "-", "player_start_time", ",", "\n", "total_reward", "=", "total_reward", ",", "\n", "spl", "=", "spl", ",", "\n", "**", "bucketed_spl", ",", "\n", ")", "\n", "\n", "count", "+=", "1", "\n", "reset_player", "(", "player", ")", "\n", "\n", "j", "=", "(", "j", "+", "1", ")", "%", "len", "(", "args", ".", "scene_types", ")", "\n", "\n", "", "player", ".", "exit", "(", ")", "\n", "res_queue", ".", "put", "(", "{", "\"END\"", ":", "True", "}", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.allenai_savn.runners.savn_val.savn_val": [[25, 150], ["datasets.glove.Glove", "datasets.data.get_data", "datasets.data.name_to_num", "setproctitle.setproctitle", "torch.cuda.set_device", "torch.manual_seed", "model_create_fn", "initialize_agent", "initialize_agent.sync_with_shared", "initialize_agent", "models.model_io.ModelOptions", "initialize_agent.exit", "res_queue.put", "torch.cuda.manual_seed", "torch.load", "model_create_fn.load_state_dict", "time.time", "train_util.new_episode", "copy.deepcopy", "train_util.compute_loss", "train_util.compute_loss.items", "train_util.compute_spl", "train_util.get_bucketed_metrics", "train_util.end_episode", "train_util.reset_player", "train_util.get_params", "train_util.run_episode", "v.item", "len", "train_util.compute_learned_loss", "torch.autograd.grad", "params_list.append", "train_util.compute_learned_loss.items", "print", "train_util.SGD_step", "v.item", "time.time", "params_list[].items"], "function", ["home.repos.pwc.inspect_result.allenai_savn.datasets.data.get_data", "home.repos.pwc.inspect_result.allenai_savn.datasets.data.name_to_num", "home.repos.pwc.inspect_result.allenai_savn.agents.agent.ThorAgent.sync_with_shared", "home.repos.pwc.inspect_result.allenai_savn.agents.agent.ThorAgent.exit", "home.repos.pwc.inspect_result.allenai_savn.runners.train_util.new_episode", "home.repos.pwc.inspect_result.allenai_savn.runners.train_util.compute_loss", "home.repos.pwc.inspect_result.allenai_savn.runners.train_util.compute_spl", "home.repos.pwc.inspect_result.allenai_savn.runners.train_util.get_bucketed_metrics", "home.repos.pwc.inspect_result.allenai_savn.runners.train_util.end_episode", "home.repos.pwc.inspect_result.allenai_savn.runners.train_util.reset_player", "home.repos.pwc.inspect_result.allenai_savn.runners.train_util.get_params", "home.repos.pwc.inspect_result.allenai_savn.runners.train_util.run_episode", "home.repos.pwc.inspect_result.allenai_savn.runners.train_util.compute_learned_loss", "home.repos.pwc.inspect_result.allenai_savn.runners.train_util.SGD_step"], ["def", "savn_val", "(", "\n", "rank", ",", "\n", "args", ",", "\n", "model_to_open", ",", "\n", "model_create_fn", ",", "\n", "initialize_agent", ",", "\n", "res_queue", ",", "\n", "max_count", ",", "\n", "scene_type", ",", "\n", ")", ":", "\n", "\n", "    ", "glove", "=", "Glove", "(", "args", ".", "glove_file", ")", "\n", "scenes", ",", "possible_targets", ",", "targets", "=", "get_data", "(", "args", ".", "scene_types", ",", "args", ".", "val_scenes", ")", "\n", "num", "=", "name_to_num", "(", "scene_type", ")", "\n", "scenes", "=", "scenes", "[", "num", "]", "\n", "targets", "=", "targets", "[", "num", "]", "\n", "\n", "if", "scene_type", "==", "\"living_room\"", ":", "\n", "        ", "args", ".", "max_episode_length", "=", "200", "\n", "", "else", ":", "\n", "        ", "args", ".", "max_episode_length", "=", "100", "\n", "\n", "", "setproctitle", ".", "setproctitle", "(", "\"Training Agent: {}\"", ".", "format", "(", "rank", ")", ")", "\n", "\n", "gpu_id", "=", "args", ".", "gpu_ids", "[", "rank", "%", "len", "(", "args", ".", "gpu_ids", ")", "]", "\n", "\n", "import", "torch", "\n", "\n", "torch", ".", "cuda", ".", "set_device", "(", "gpu_id", ")", "\n", "\n", "torch", ".", "manual_seed", "(", "args", ".", "seed", "+", "rank", ")", "\n", "if", "gpu_id", ">=", "0", ":", "\n", "        ", "torch", ".", "cuda", ".", "manual_seed", "(", "args", ".", "seed", "+", "rank", ")", "\n", "\n", "", "shared_model", "=", "model_create_fn", "(", "args", ")", "\n", "\n", "if", "model_to_open", "is", "not", "None", ":", "\n", "        ", "saved_state", "=", "torch", ".", "load", "(", "\n", "model_to_open", ",", "map_location", "=", "lambda", "storage", ",", "loc", ":", "storage", "\n", ")", "\n", "shared_model", ".", "load_state_dict", "(", "saved_state", ")", "\n", "\n", "", "player", "=", "initialize_agent", "(", "model_create_fn", ",", "args", ",", "rank", ",", "gpu_id", "=", "gpu_id", ")", "\n", "player", ".", "sync_with_shared", "(", "shared_model", ")", "\n", "count", "=", "0", "\n", "\n", "player", "=", "initialize_agent", "(", "model_create_fn", ",", "args", ",", "rank", ",", "gpu_id", "=", "gpu_id", ")", "\n", "\n", "model_options", "=", "ModelOptions", "(", ")", "\n", "\n", "while", "count", "<", "max_count", ":", "\n", "\n", "        ", "count", "+=", "1", "\n", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "new_episode", "(", "args", ",", "player", ",", "scenes", ",", "possible_targets", ",", "targets", ",", "glove", "=", "glove", ")", "\n", "player_start_state", "=", "copy", ".", "deepcopy", "(", "player", ".", "environment", ".", "controller", ".", "state", ")", "\n", "player", ".", "episode", ".", "exploring", "=", "True", "\n", "total_reward", "=", "0", "\n", "player", ".", "eps_len", "=", "0", "\n", "\n", "# theta <- shared_initialization", "\n", "params_list", "=", "[", "get_params", "(", "shared_model", ",", "gpu_id", ")", "]", "\n", "model_options", ".", "params", "=", "params_list", "[", "-", "1", "]", "\n", "loss_dict", "=", "{", "}", "\n", "reward_dict", "=", "{", "}", "\n", "episode_num", "=", "0", "\n", "num_gradients", "=", "0", "\n", "\n", "while", "True", ":", "\n", "            ", "total_reward", "=", "run_episode", "(", "player", ",", "args", ",", "total_reward", ",", "model_options", ",", "False", ")", "\n", "\n", "if", "player", ".", "done", ":", "\n", "                ", "break", "\n", "\n", "", "if", "args", ".", "gradient_limit", "<", "0", "or", "episode_num", "<", "args", ".", "gradient_limit", ":", "\n", "\n", "                ", "num_gradients", "+=", "1", "\n", "\n", "# Compute the loss.", "\n", "learned_loss", "=", "compute_learned_loss", "(", "args", ",", "player", ",", "gpu_id", ",", "model_options", ")", "\n", "\n", "if", "args", ".", "verbose", ":", "\n", "                    ", "print", "(", "\"inner gradient\"", ")", "\n", "", "inner_gradient", "=", "torch", ".", "autograd", ".", "grad", "(", "\n", "learned_loss", "[", "\"learned_loss\"", "]", ",", "\n", "[", "v", "for", "_", ",", "v", "in", "params_list", "[", "episode_num", "]", ".", "items", "(", ")", "]", ",", "\n", "create_graph", "=", "True", ",", "\n", "retain_graph", "=", "True", ",", "\n", "allow_unused", "=", "True", ",", "\n", ")", "\n", "\n", "params_list", ".", "append", "(", "\n", "SGD_step", "(", "params_list", "[", "episode_num", "]", ",", "inner_gradient", ",", "args", ".", "inner_lr", ")", "\n", ")", "\n", "model_options", ".", "params", "=", "params_list", "[", "-", "1", "]", "\n", "\n", "# reset_player(player)", "\n", "episode_num", "+=", "1", "\n", "\n", "for", "k", ",", "v", "in", "learned_loss", ".", "items", "(", ")", ":", "\n", "                    ", "loss_dict", "[", "\"{}/{:d}\"", ".", "format", "(", "k", ",", "episode_num", ")", "]", "=", "v", ".", "item", "(", ")", "\n", "\n", "", "", "", "loss", "=", "compute_loss", "(", "args", ",", "player", ",", "gpu_id", ",", "model_options", ")", "\n", "\n", "for", "k", ",", "v", "in", "loss", ".", "items", "(", ")", ":", "\n", "            ", "loss_dict", "[", "k", "]", "=", "v", ".", "item", "(", ")", "\n", "", "reward_dict", "[", "\"total_reward\"", "]", "=", "total_reward", "\n", "\n", "spl", ",", "best_path_length", "=", "compute_spl", "(", "player", ",", "player_start_state", ")", "\n", "bucketed_spl", "=", "get_bucketed_metrics", "(", "spl", ",", "best_path_length", ",", "player", ".", "success", ")", "\n", "\n", "end_episode", "(", "\n", "player", ",", "\n", "res_queue", ",", "\n", "total_time", "=", "time", ".", "time", "(", ")", "-", "start_time", ",", "\n", "spl", "=", "spl", ",", "\n", "**", "reward_dict", ",", "\n", "**", "bucketed_spl", ",", "\n", ")", "\n", "\n", "reset_player", "(", "player", ")", "\n", "\n", "", "player", ".", "exit", "(", ")", "\n", "res_queue", ".", "put", "(", "{", "\"END\"", ":", "True", "}", ")", "\n", "", ""]]}