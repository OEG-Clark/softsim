{"home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.separate_loss.ConvSeparateLoss.__init__": [[9, 14], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.graph_distance.GraphDistance.__init__"], ["def", "__init__", "(", "self", ",", "weight", "=", "0.1", ",", "size_average", "=", "None", ",", "ignore_index", "=", "-", "100", ",", "\n", "reduce", "=", "None", ",", "reduction", "=", "'mean'", ")", ":", "\n", "        ", "super", "(", "ConvSeparateLoss", ",", "self", ")", ".", "__init__", "(", "size_average", ",", "reduce", ",", "reduction", ")", "\n", "self", ".", "ignore_index", "=", "ignore_index", "\n", "self", ".", "weight", "=", "weight", "\n", "\n"]], "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.separate_loss.ConvSeparateLoss.forward": [[15, 19], ["torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "torch.mse_loss", "torch.mse_loss", "torch.mse_loss", "torch.cross_entropy.detach().item", "loss2.detach().item", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.cross_entropy.detach", "loss2.detach", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input1", ",", "target1", ",", "input2", ",", "cell_mc", ",", "mean_mc", ")", ":", "\n", "        ", "loss1", "=", "F", ".", "cross_entropy", "(", "input1", ",", "target1", ")", "\n", "loss2", "=", "-", "F", ".", "mse_loss", "(", "input2", ",", "torch", ".", "tensor", "(", "0.5", ",", "requires_grad", "=", "False", ")", ".", "cuda", "(", ")", ")", "\n", "return", "loss1", "+", "self", ".", "weight", "*", "loss2", ",", "loss1", ".", "detach", "(", ")", ".", "item", "(", ")", ",", "loss2", ".", "detach", "(", ")", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.separate_loss.TriSeparateLoss.__init__": [[23, 28], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.graph_distance.GraphDistance.__init__"], ["def", "__init__", "(", "self", ",", "weight", "=", "0.1", ",", "size_average", "=", "None", ",", "ignore_index", "=", "-", "100", ",", "\n", "reduce", "=", "None", ",", "reduction", "=", "'mean'", ")", ":", "\n", "        ", "super", "(", "TriSeparateLoss", ",", "self", ")", ".", "__init__", "(", "size_average", ",", "reduce", ",", "reduction", ")", "\n", "self", ".", "ignore_index", "=", "ignore_index", "\n", "self", ".", "weight", "=", "weight", "\n", "\n"]], "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.separate_loss.TriSeparateLoss.forward": [[29, 33], ["torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "torch.l1_loss", "torch.l1_loss", "torch.l1_loss", "torch.cross_entropy.detach().item", "loss2.detach().item", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.cross_entropy.detach", "loss2.detach", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input1", ",", "target1", ",", "input2", ",", "cell_mc", ",", "mean_mc", ")", ":", "\n", "        ", "loss1", "=", "F", ".", "cross_entropy", "(", "input1", ",", "target1", ")", "\n", "loss2", "=", "-", "F", ".", "l1_loss", "(", "input2", ",", "torch", ".", "tensor", "(", "0.5", ",", "requires_grad", "=", "False", ")", ".", "cuda", "(", ")", ")", "\n", "return", "loss1", "+", "self", ".", "weight", "*", "loss2", ",", "loss1", ".", "detach", "(", ")", ".", "item", "(", ")", ",", "loss2", ".", "detach", "(", ")", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.separate_loss.ConvAblationLoss.__init__": [[36, 42], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.graph_distance.GraphDistance.__init__"], ["def", "__init__", "(", "self", ",", "weight", "=", "0.1", ",", "abl_weight", "=", "0.9", ",", "size_average", "=", "None", ",", "ignore_index", "=", "-", "100", ",", "\n", "reduce", "=", "None", ",", "reduction", "=", "'mean'", ")", ":", "\n", "        ", "super", "(", "ConvAblationLoss", ",", "self", ")", ".", "__init__", "(", "size_average", ",", "reduce", ",", "reduction", ")", "\n", "self", ".", "ignore_index", "=", "ignore_index", "\n", "self", ".", "weight", "=", "weight", "\n", "self", ".", "abl_weight", "=", "abl_weight", "\n", "\n"]], "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.separate_loss.ConvAblationLoss.compute_ablation_loss": [[43, 49], ["torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["None"], ["", "def", "compute_ablation_loss", "(", "self", ",", "cell_mc", ",", "mean_mc", ")", ":", "\n", "        ", "\"\"\"\n        Compute the ablation loss for a given cell from the marginal contributions.\n        \"\"\"", "\n", "indice", "=", "(", "cell_mc", "-", "mean_mc", ")", "/", "mean_mc", "if", "mean_mc", "!=", "0", "else", "0", "#prevent division by zero", "\n", "return", "torch", ".", "tensor", "(", "indice", ")", ".", "cuda", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.separate_loss.ConvAblationLoss.forward": [[51, 56], ["torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "torch.mse_loss", "torch.mse_loss", "torch.mse_loss", "separate_loss.ConvAblationLoss.compute_ablation_loss", "torch.cross_entropy.detach().item", "loss2.detach().item", "loss3.detach().item", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.cross_entropy.detach", "loss2.detach", "loss3.detach", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.separate_loss.ConvAblationLoss.compute_ablation_loss"], ["", "def", "forward", "(", "self", ",", "logits", ",", "target1", ",", "input2", ",", "cell_mc", ",", "mean_mc", ")", ":", "\n", "        ", "loss1", "=", "F", ".", "cross_entropy", "(", "logits", ",", "target1", ")", "\n", "loss2", "=", "-", "F", ".", "mse_loss", "(", "input2", ",", "torch", ".", "tensor", "(", "0.5", ",", "requires_grad", "=", "False", ")", ".", "cuda", "(", ")", ")", "\n", "loss3", "=", "-", "self", ".", "compute_ablation_loss", "(", "cell_mc", ",", "mean_mc", ")", "\n", "return", "loss1", "+", "self", ".", "weight", "*", "loss2", "+", "self", ".", "abl_weight", "*", "loss3", ",", "loss1", ".", "detach", "(", ")", ".", "item", "(", ")", ",", "loss2", ".", "detach", "(", ")", ".", "item", "(", ")", ",", "loss3", ".", "detach", "(", ")", ".", "item", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.operations.ReLUConvBN.__init__": [[31, 37], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.graph_distance.GraphDistance.__init__"], ["def", "__init__", "(", "self", ",", "C_in", ",", "C_out", ",", "kernel_size", ",", "stride", ",", "padding", ",", "affine", "=", "True", ")", ":", "\n", "    ", "super", "(", "ReLUConvBN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "op", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", ",", "\n", "nn", ".", "Conv2d", "(", "C_in", ",", "C_out", ",", "kernel_size", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "C_out", ",", "affine", "=", "affine", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.operations.ReLUConvBN.forward": [[39, 41], ["operations.ReLUConvBN.op"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "return", "self", ".", "op", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.operations.DilConv.__init__": [[46, 53], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.graph_distance.GraphDistance.__init__"], ["def", "__init__", "(", "self", ",", "C_in", ",", "C_out", ",", "kernel_size", ",", "stride", ",", "padding", ",", "dilation", ",", "affine", "=", "True", ")", ":", "\n", "    ", "super", "(", "DilConv", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "op", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", ",", "\n", "nn", ".", "Conv2d", "(", "C_in", ",", "C_in", ",", "kernel_size", "=", "kernel_size", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "dilation", "=", "dilation", ",", "groups", "=", "C_in", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "Conv2d", "(", "C_in", ",", "C_out", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "C_out", ",", "affine", "=", "affine", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.operations.DilConv.forward": [[55, 57], ["operations.DilConv.op"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "return", "self", ".", "op", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.operations.SepConv.__init__": [[61, 72], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.graph_distance.GraphDistance.__init__"], ["  ", "def", "__init__", "(", "self", ",", "C_in", ",", "C_out", ",", "kernel_size", ",", "stride", ",", "padding", ",", "affine", "=", "True", ")", ":", "\n", "    ", "super", "(", "SepConv", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "op", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", ",", "\n", "nn", ".", "Conv2d", "(", "C_in", ",", "C_in", ",", "kernel_size", "=", "kernel_size", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "groups", "=", "C_in", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "Conv2d", "(", "C_in", ",", "C_in", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "C_in", ",", "affine", "=", "affine", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", ",", "\n", "nn", ".", "Conv2d", "(", "C_in", ",", "C_in", ",", "kernel_size", "=", "kernel_size", ",", "stride", "=", "1", ",", "padding", "=", "padding", ",", "groups", "=", "C_in", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "Conv2d", "(", "C_in", ",", "C_out", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "C_out", ",", "affine", "=", "affine", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.operations.SepConv.forward": [[74, 76], ["operations.SepConv.op"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "return", "self", ".", "op", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.operations.ResConv.__init__": [[79, 92], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.graph_distance.GraphDistance.__init__"], ["  ", "def", "__init__", "(", "self", ",", "C_in", ",", "C_out", ",", "stride", ",", "kernel_size", ",", "padding", "=", "1", ",", "affine", "=", "True", ")", ":", "\n", "    ", "super", "(", "ResConv", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "op", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", ",", "\n", "nn", ".", "Conv2d", "(", "C_in", ",", "C_in", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "C_in", ",", "affine", "=", "affine", ")", ",", "\n", "nn", ".", "Conv2d", "(", "C_in", ",", "C_in", ",", "kernel_size", "=", "kernel_size", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "C_in", ",", "affine", "=", "affine", ")", ",", "\n", "nn", ".", "Conv2d", "(", "C_in", ",", "C_out", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "C_out", ",", "affine", "=", "affine", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", ",", "\n", "nn", ".", "Conv2d", "(", "C_out", ",", "C_in", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "C_in", ",", "affine", "=", "affine", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.operations.ResConv.forward": [[93, 95], ["operations.ResConv.op"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "return", "self", ".", "op", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.operations.RectConv.__init__": [[99, 107], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.graph_distance.GraphDistance.__init__"], ["  ", "def", "__init__", "(", "self", ",", "C_in", ",", "C_out", ",", "kernel_size", ",", "stride", ",", "padding", ",", "affine", "=", "True", ")", ":", "\n", "    ", "super", "(", "RectConv", ",", "self", ")", ".", "__init__", "(", ")", "\n", "k1", ",", "k2", "=", "kernel_size", "\n", "self", ".", "op", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", ",", "\n", "nn", ".", "Conv2d", "(", "C_in", ",", "C_in", ",", "kernel_size", "=", "(", "k1", ",", "k2", ")", ",", "stride", "=", "(", "1", ",", "stride", ")", ",", "padding", "=", "(", "0", ",", "padding", ")", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "Conv2d", "(", "C_in", ",", "C_in", ",", "kernel_size", "=", "(", "k2", ",", "k1", ")", ",", "stride", "=", "(", "stride", ",", "1", ")", ",", "padding", "=", "(", "padding", ",", "0", ")", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "C_out", ",", "affine", "=", "affine", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.operations.RectConv.forward": [[109, 111], ["operations.RectConv.op"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "return", "self", ".", "op", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.operations.Identity.__init__": [[115, 117], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.graph_distance.GraphDistance.__init__"], ["  ", "def", "__init__", "(", "self", ")", ":", "\n", "    ", "super", "(", "Identity", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.operations.Identity.forward": [[118, 120], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.operations.Zero.__init__": [[124, 127], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.graph_distance.GraphDistance.__init__"], ["  ", "def", "__init__", "(", "self", ",", "stride", ")", ":", "\n", "    ", "super", "(", "Zero", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.operations.Zero.forward": [[128, 132], ["x[].mul", "x.mul"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "if", "self", ".", "stride", "==", "1", ":", "\n", "      ", "return", "x", ".", "mul", "(", "0.", ")", "\n", "", "return", "x", "[", ":", ",", ":", ",", ":", ":", "self", ".", "stride", ",", ":", ":", "self", ".", "stride", "]", ".", "mul", "(", "0.", ")", "# N * C * W * H", "\n", "\n"]], "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.operations.FactorizedReduce.__init__": [[136, 143], ["torch.Module.__init__", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.graph_distance.GraphDistance.__init__"], ["  ", "def", "__init__", "(", "self", ",", "C_in", ",", "C_out", ",", "affine", "=", "True", ")", ":", "\n", "    ", "super", "(", "FactorizedReduce", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "C_out", "%", "2", "==", "0", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", "\n", "self", ".", "conv_1", "=", "nn", ".", "Conv2d", "(", "C_in", ",", "C_out", "//", "2", ",", "1", ",", "stride", "=", "2", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv_2", "=", "nn", ".", "Conv2d", "(", "C_in", ",", "C_out", "//", "2", ",", "1", ",", "stride", "=", "2", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn", "=", "nn", ".", "BatchNorm2d", "(", "C_out", ",", "affine", "=", "affine", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.operations.FactorizedReduce.forward": [[144, 149], ["operations.FactorizedReduce.relu", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "operations.FactorizedReduce.bn", "operations.FactorizedReduce.conv_1", "operations.FactorizedReduce.conv_2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "out", "=", "torch", ".", "cat", "(", "[", "self", ".", "conv_1", "(", "x", ")", ",", "self", ".", "conv_2", "(", "x", "[", ":", ",", ":", ",", "1", ":", ",", "1", ":", "]", ")", "]", ",", "dim", "=", "1", ")", "\n", "out", "=", "self", ".", "bn", "(", "out", ")", "\n", "return", "out", "\n", "", "", ""]], "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.auto_augment.ImageNetPolicy.__init__": [[28, 59], ["auto_augment.SubPolicy", "auto_augment.SubPolicy", "auto_augment.SubPolicy", "auto_augment.SubPolicy", "auto_augment.SubPolicy", "auto_augment.SubPolicy", "auto_augment.SubPolicy", "auto_augment.SubPolicy", "auto_augment.SubPolicy", "auto_augment.SubPolicy", "auto_augment.SubPolicy", "auto_augment.SubPolicy", "auto_augment.SubPolicy", "auto_augment.SubPolicy", "auto_augment.SubPolicy", "auto_augment.SubPolicy", "auto_augment.SubPolicy", "auto_augment.SubPolicy", "auto_augment.SubPolicy", "auto_augment.SubPolicy", "auto_augment.SubPolicy", "auto_augment.SubPolicy", "auto_augment.SubPolicy", "auto_augment.SubPolicy", "auto_augment.SubPolicy"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "fillcolor", "=", "(", "128", ",", "128", ",", "128", ")", ")", ":", "\n", "        ", "self", ".", "policies", "=", "[", "\n", "SubPolicy", "(", "0.4", ",", "\"posterize\"", ",", "8", ",", "0.6", ",", "\"rotate\"", ",", "9", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.6", ",", "\"solarize\"", ",", "5", ",", "0.6", ",", "\"autocontrast\"", ",", "5", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.8", ",", "\"equalize\"", ",", "8", ",", "0.6", ",", "\"equalize\"", ",", "3", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.6", ",", "\"posterize\"", ",", "7", ",", "0.6", ",", "\"posterize\"", ",", "6", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.4", ",", "\"equalize\"", ",", "7", ",", "0.2", ",", "\"solarize\"", ",", "4", ",", "fillcolor", ")", ",", "\n", "\n", "SubPolicy", "(", "0.4", ",", "\"equalize\"", ",", "4", ",", "0.8", ",", "\"rotate\"", ",", "8", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.6", ",", "\"solarize\"", ",", "3", ",", "0.6", ",", "\"equalize\"", ",", "7", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.8", ",", "\"posterize\"", ",", "5", ",", "1.0", ",", "\"equalize\"", ",", "2", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.2", ",", "\"rotate\"", ",", "3", ",", "0.6", ",", "\"solarize\"", ",", "8", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.6", ",", "\"equalize\"", ",", "8", ",", "0.4", ",", "\"posterize\"", ",", "6", ",", "fillcolor", ")", ",", "\n", "\n", "SubPolicy", "(", "0.8", ",", "\"rotate\"", ",", "8", ",", "0.4", ",", "\"color\"", ",", "0", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.4", ",", "\"rotate\"", ",", "9", ",", "0.6", ",", "\"equalize\"", ",", "2", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.0", ",", "\"equalize\"", ",", "7", ",", "0.8", ",", "\"equalize\"", ",", "8", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.6", ",", "\"invert\"", ",", "4", ",", "1.0", ",", "\"equalize\"", ",", "8", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.6", ",", "\"color\"", ",", "4", ",", "1.0", ",", "\"contrast\"", ",", "8", ",", "fillcolor", ")", ",", "\n", "\n", "SubPolicy", "(", "0.8", ",", "\"rotate\"", ",", "8", ",", "1.0", ",", "\"color\"", ",", "2", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.8", ",", "\"color\"", ",", "8", ",", "0.8", ",", "\"solarize\"", ",", "7", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.4", ",", "\"sharpness\"", ",", "7", ",", "0.6", ",", "\"invert\"", ",", "8", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.6", ",", "\"shearX\"", ",", "5", ",", "1.0", ",", "\"equalize\"", ",", "9", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.4", ",", "\"color\"", ",", "0", ",", "0.6", ",", "\"equalize\"", ",", "3", ",", "fillcolor", ")", ",", "\n", "\n", "SubPolicy", "(", "0.4", ",", "\"equalize\"", ",", "7", ",", "0.2", ",", "\"solarize\"", ",", "4", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.6", ",", "\"solarize\"", ",", "5", ",", "0.6", ",", "\"autocontrast\"", ",", "5", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.6", ",", "\"invert\"", ",", "4", ",", "1.0", ",", "\"equalize\"", ",", "8", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.6", ",", "\"color\"", ",", "4", ",", "1.0", ",", "\"contrast\"", ",", "8", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.8", ",", "\"equalize\"", ",", "8", ",", "0.6", ",", "\"equalize\"", ",", "3", ",", "fillcolor", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.auto_augment.ImageNetPolicy.__call__": [[60, 63], ["random.randint", "len"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "policy_idx", "=", "random", ".", "randint", "(", "0", ",", "len", "(", "self", ".", "policies", ")", "-", "1", ")", "\n", "return", "self", ".", "policies", "[", "policy_idx", "]", "(", "img", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.auto_augment.ImageNetPolicy.__repr__": [[64, 66], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "\"AutoAugment ImageNet Policy\"", "\n", "\n"]], "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.auto_augment.CIFAR10Policy.__init__": [[82, 113], ["auto_augment.SubPolicy", "auto_augment.SubPolicy", "auto_augment.SubPolicy", "auto_augment.SubPolicy", "auto_augment.SubPolicy", "auto_augment.SubPolicy", "auto_augment.SubPolicy", "auto_augment.SubPolicy", "auto_augment.SubPolicy", "auto_augment.SubPolicy", "auto_augment.SubPolicy", "auto_augment.SubPolicy", "auto_augment.SubPolicy", "auto_augment.SubPolicy", "auto_augment.SubPolicy", "auto_augment.SubPolicy", "auto_augment.SubPolicy", "auto_augment.SubPolicy", "auto_augment.SubPolicy", "auto_augment.SubPolicy", "auto_augment.SubPolicy", "auto_augment.SubPolicy", "auto_augment.SubPolicy", "auto_augment.SubPolicy", "auto_augment.SubPolicy"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "fillcolor", "=", "(", "128", ",", "128", ",", "128", ")", ")", ":", "\n", "        ", "self", ".", "policies", "=", "[", "\n", "SubPolicy", "(", "0.1", ",", "\"invert\"", ",", "7", ",", "0.2", ",", "\"contrast\"", ",", "6", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.7", ",", "\"rotate\"", ",", "2", ",", "0.3", ",", "\"translateX\"", ",", "9", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.8", ",", "\"sharpness\"", ",", "1", ",", "0.9", ",", "\"sharpness\"", ",", "3", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.5", ",", "\"shearY\"", ",", "8", ",", "0.7", ",", "\"translateY\"", ",", "9", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.5", ",", "\"autocontrast\"", ",", "8", ",", "0.9", ",", "\"equalize\"", ",", "2", ",", "fillcolor", ")", ",", "\n", "\n", "SubPolicy", "(", "0.2", ",", "\"shearY\"", ",", "7", ",", "0.3", ",", "\"posterize\"", ",", "7", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.4", ",", "\"color\"", ",", "3", ",", "0.6", ",", "\"brightness\"", ",", "7", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.3", ",", "\"sharpness\"", ",", "9", ",", "0.7", ",", "\"brightness\"", ",", "9", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.6", ",", "\"equalize\"", ",", "5", ",", "0.5", ",", "\"equalize\"", ",", "1", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.6", ",", "\"contrast\"", ",", "7", ",", "0.6", ",", "\"sharpness\"", ",", "5", ",", "fillcolor", ")", ",", "\n", "\n", "SubPolicy", "(", "0.7", ",", "\"color\"", ",", "7", ",", "0.5", ",", "\"translateX\"", ",", "8", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.3", ",", "\"equalize\"", ",", "7", ",", "0.4", ",", "\"autocontrast\"", ",", "8", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.4", ",", "\"translateY\"", ",", "3", ",", "0.2", ",", "\"sharpness\"", ",", "6", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.9", ",", "\"brightness\"", ",", "6", ",", "0.2", ",", "\"color\"", ",", "8", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.5", ",", "\"solarize\"", ",", "2", ",", "0.0", ",", "\"invert\"", ",", "3", ",", "fillcolor", ")", ",", "\n", "\n", "SubPolicy", "(", "0.2", ",", "\"equalize\"", ",", "0", ",", "0.6", ",", "\"autocontrast\"", ",", "0", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.2", ",", "\"equalize\"", ",", "8", ",", "0.8", ",", "\"equalize\"", ",", "4", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.9", ",", "\"color\"", ",", "9", ",", "0.6", ",", "\"equalize\"", ",", "6", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.8", ",", "\"autocontrast\"", ",", "4", ",", "0.2", ",", "\"solarize\"", ",", "8", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.1", ",", "\"brightness\"", ",", "3", ",", "0.7", ",", "\"color\"", ",", "0", ",", "fillcolor", ")", ",", "\n", "\n", "SubPolicy", "(", "0.4", ",", "\"solarize\"", ",", "5", ",", "0.9", ",", "\"autocontrast\"", ",", "3", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.9", ",", "\"translateY\"", ",", "9", ",", "0.7", ",", "\"translateY\"", ",", "9", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.9", ",", "\"autocontrast\"", ",", "2", ",", "0.8", ",", "\"solarize\"", ",", "3", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.8", ",", "\"equalize\"", ",", "8", ",", "0.1", ",", "\"invert\"", ",", "3", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.7", ",", "\"translateY\"", ",", "9", ",", "0.9", ",", "\"autocontrast\"", ",", "1", ",", "fillcolor", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.auto_augment.CIFAR10Policy.__call__": [[114, 117], ["random.randint", "len"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "policy_idx", "=", "random", ".", "randint", "(", "0", ",", "len", "(", "self", ".", "policies", ")", "-", "1", ")", "\n", "return", "self", ".", "policies", "[", "policy_idx", "]", "(", "img", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.auto_augment.CIFAR10Policy.__repr__": [[118, 120], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "\"AutoAugment CIFAR10 Policy\"", "\n", "\n"]], "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.auto_augment.SVHNPolicy.__init__": [[136, 167], ["auto_augment.SubPolicy", "auto_augment.SubPolicy", "auto_augment.SubPolicy", "auto_augment.SubPolicy", "auto_augment.SubPolicy", "auto_augment.SubPolicy", "auto_augment.SubPolicy", "auto_augment.SubPolicy", "auto_augment.SubPolicy", "auto_augment.SubPolicy", "auto_augment.SubPolicy", "auto_augment.SubPolicy", "auto_augment.SubPolicy", "auto_augment.SubPolicy", "auto_augment.SubPolicy", "auto_augment.SubPolicy", "auto_augment.SubPolicy", "auto_augment.SubPolicy", "auto_augment.SubPolicy", "auto_augment.SubPolicy", "auto_augment.SubPolicy", "auto_augment.SubPolicy", "auto_augment.SubPolicy", "auto_augment.SubPolicy", "auto_augment.SubPolicy"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "fillcolor", "=", "(", "128", ",", "128", ",", "128", ")", ")", ":", "\n", "        ", "self", ".", "policies", "=", "[", "\n", "SubPolicy", "(", "0.9", ",", "\"shearX\"", ",", "4", ",", "0.2", ",", "\"invert\"", ",", "3", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.9", ",", "\"shearY\"", ",", "8", ",", "0.7", ",", "\"invert\"", ",", "5", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.6", ",", "\"equalize\"", ",", "5", ",", "0.6", ",", "\"solarize\"", ",", "6", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.9", ",", "\"invert\"", ",", "3", ",", "0.6", ",", "\"equalize\"", ",", "3", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.6", ",", "\"equalize\"", ",", "1", ",", "0.9", ",", "\"rotate\"", ",", "3", ",", "fillcolor", ")", ",", "\n", "\n", "SubPolicy", "(", "0.9", ",", "\"shearX\"", ",", "4", ",", "0.8", ",", "\"autocontrast\"", ",", "3", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.9", ",", "\"shearY\"", ",", "8", ",", "0.4", ",", "\"invert\"", ",", "5", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.9", ",", "\"shearY\"", ",", "5", ",", "0.2", ",", "\"solarize\"", ",", "6", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.9", ",", "\"invert\"", ",", "6", ",", "0.8", ",", "\"autocontrast\"", ",", "1", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.6", ",", "\"equalize\"", ",", "3", ",", "0.9", ",", "\"rotate\"", ",", "3", ",", "fillcolor", ")", ",", "\n", "\n", "SubPolicy", "(", "0.9", ",", "\"shearX\"", ",", "4", ",", "0.3", ",", "\"solarize\"", ",", "3", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.8", ",", "\"shearY\"", ",", "8", ",", "0.7", ",", "\"invert\"", ",", "4", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.9", ",", "\"equalize\"", ",", "5", ",", "0.6", ",", "\"translateY\"", ",", "6", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.9", ",", "\"invert\"", ",", "4", ",", "0.6", ",", "\"equalize\"", ",", "7", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.3", ",", "\"contrast\"", ",", "3", ",", "0.8", ",", "\"rotate\"", ",", "4", ",", "fillcolor", ")", ",", "\n", "\n", "SubPolicy", "(", "0.8", ",", "\"invert\"", ",", "5", ",", "0.0", ",", "\"translateY\"", ",", "2", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.7", ",", "\"shearY\"", ",", "6", ",", "0.4", ",", "\"solarize\"", ",", "8", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.6", ",", "\"invert\"", ",", "4", ",", "0.8", ",", "\"rotate\"", ",", "4", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.3", ",", "\"shearY\"", ",", "7", ",", "0.9", ",", "\"translateX\"", ",", "3", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.1", ",", "\"shearX\"", ",", "6", ",", "0.6", ",", "\"invert\"", ",", "5", ",", "fillcolor", ")", ",", "\n", "\n", "SubPolicy", "(", "0.7", ",", "\"solarize\"", ",", "2", ",", "0.6", ",", "\"translateY\"", ",", "7", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.8", ",", "\"shearY\"", ",", "4", ",", "0.8", ",", "\"invert\"", ",", "8", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.7", ",", "\"shearX\"", ",", "9", ",", "0.8", ",", "\"translateY\"", ",", "3", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.8", ",", "\"shearY\"", ",", "5", ",", "0.7", ",", "\"autocontrast\"", ",", "3", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.7", ",", "\"shearX\"", ",", "2", ",", "0.1", ",", "\"invert\"", ",", "5", ",", "fillcolor", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.auto_augment.SVHNPolicy.__call__": [[168, 171], ["random.randint", "len"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "policy_idx", "=", "random", ".", "randint", "(", "0", ",", "len", "(", "self", ".", "policies", ")", "-", "1", ")", "\n", "return", "self", ".", "policies", "[", "policy_idx", "]", "(", "img", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.auto_augment.SVHNPolicy.__repr__": [[172, 174], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "\"AutoAugment SVHN Policy\"", "\n", "\n"]], "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.auto_augment.SubPolicy.__init__": [[178, 268], ["numpy.linspace", "numpy.linspace", "numpy.linspace", "numpy.linspace", "numpy.linspace", "numpy.linspace", "numpy.round().astype", "numpy.linspace", "numpy.linspace", "numpy.linspace", "numpy.linspace", "img.convert().rotate", "PIL.Image.composite().convert", "img.transform", "img.transform", "img.transform", "img.transform", "auto_augment.SubPolicy.__init__.rotate_with_fill"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "\n", "p1", ",", "\n", "operation1", ",", "\n", "magnitude_idx1", ",", "\n", "p2", ",", "\n", "operation2", ",", "\n", "magnitude_idx2", ",", "\n", "fillcolor", "=", "(", "128", ",", "128", ",", "128", ")", ")", ":", "\n", "        ", "ranges", "=", "{", "\n", "\"shearX\"", ":", "np", ".", "linspace", "(", "0", ",", "0.3", ",", "10", ")", ",", "\n", "\"shearY\"", ":", "np", ".", "linspace", "(", "0", ",", "0.3", ",", "10", ")", ",", "\n", "\"translateX\"", ":", "np", ".", "linspace", "(", "0", ",", "150", "/", "331", ",", "10", ")", ",", "\n", "\"translateY\"", ":", "np", ".", "linspace", "(", "0", ",", "150", "/", "331", ",", "10", ")", ",", "\n", "\"rotate\"", ":", "np", ".", "linspace", "(", "0", ",", "30", ",", "10", ")", ",", "\n", "\"color\"", ":", "np", ".", "linspace", "(", "0.0", ",", "0.9", ",", "10", ")", ",", "\n", "\"posterize\"", ":", "np", ".", "round", "(", "np", ".", "linspace", "(", "8", ",", "4", ",", "10", ")", ",", "0", ")", ".", "astype", "(", "np", ".", "int", ")", ",", "\n", "\"solarize\"", ":", "np", ".", "linspace", "(", "256", ",", "0", ",", "10", ")", ",", "\n", "\"contrast\"", ":", "np", ".", "linspace", "(", "0.0", ",", "0.9", ",", "10", ")", ",", "\n", "\"sharpness\"", ":", "np", ".", "linspace", "(", "0.0", ",", "0.9", ",", "10", ")", ",", "\n", "\"brightness\"", ":", "np", ".", "linspace", "(", "0.0", ",", "0.9", ",", "10", ")", ",", "\n", "\"autocontrast\"", ":", "[", "0", "]", "*", "10", ",", "\n", "\"equalize\"", ":", "[", "0", "]", "*", "10", ",", "\n", "\"invert\"", ":", "[", "0", "]", "*", "10", "}", "\n", "\n", "# from https://stackoverflow.com/questions/5252170/specify-image", "\n", "# -filling-color-when-rotating-in-python-with-pil-and-setting-expand", "\n", "def", "rotate_with_fill", "(", "img", ",", "magnitude", ")", ":", "\n", "            ", "rot", "=", "img", ".", "convert", "(", "\"RGBA\"", ")", ".", "rotate", "(", "magnitude", ")", "\n", "return", "Image", ".", "composite", "(", "\n", "rot", ",", "Image", ".", "new", "(", "\"RGBA\"", ",", "rot", ".", "size", ",", "(", "128", ",", ")", "*", "4", ")", ",", "rot", ")", ".", "convert", "(", "img", ".", "mode", ")", "\n", "\n", "", "func", "=", "{", "\n", "\"shearX\"", ":", "lambda", "img", ",", "magnitude", ":", "img", ".", "transform", "(", "\n", "img", ".", "size", ",", "\n", "Image", ".", "AFFINE", ",", "\n", "(", "1", ",", "magnitude", "*", "random", ".", "choice", "(", "[", "-", "1", ",", "1", "]", ")", ",", "0", ",", "0", ",", "1", ",", "0", ")", ",", "\n", "Image", ".", "BICUBIC", ",", "\n", "fillcolor", "=", "fillcolor", ")", ",", "\n", "\"shearY\"", ":", "lambda", "img", ",", "magnitude", ":", "img", ".", "transform", "(", "\n", "img", ".", "size", ",", "\n", "Image", ".", "AFFINE", ",", "\n", "(", "1", ",", "0", ",", "0", ",", "magnitude", "*", "random", ".", "choice", "(", "[", "-", "1", ",", "1", "]", ")", ",", "1", ",", "0", ")", ",", "\n", "Image", ".", "BICUBIC", ",", "\n", "fillcolor", "=", "fillcolor", ")", ",", "\n", "\"translateX\"", ":", "lambda", "img", ",", "magnitude", ":", "img", ".", "transform", "(", "\n", "img", ".", "size", ",", "\n", "Image", ".", "AFFINE", ",", "\n", "(", "1", ",", "0", ",", "magnitude", "*", "img", ".", "size", "[", "0", "]", "*", "random", ".", "choice", "(", "[", "-", "1", ",", "1", "]", ")", ",", "0", ",", "1", ",", "0", ")", ",", "\n", "fillcolor", "=", "fillcolor", ")", ",", "\n", "\"translateY\"", ":", "lambda", "img", ",", "magnitude", ":", "img", ".", "transform", "(", "\n", "img", ".", "size", ",", "\n", "Image", ".", "AFFINE", ",", "\n", "(", "1", ",", "0", ",", "0", ",", "0", ",", "1", ",", "magnitude", "*", "img", ".", "size", "[", "1", "]", "*", "random", ".", "choice", "(", "[", "-", "1", ",", "1", "]", ")", ")", ",", "\n", "fillcolor", "=", "fillcolor", ")", ",", "\n", "\"rotate\"", ":", "lambda", "img", ",", "magnitude", ":", "rotate_with_fill", "(", "img", ",", "magnitude", ")", ",", "\n", "# \"rotate\": lambda img, magnitude: \\", "\n", "#     img.rotate(magnitude * random.choice([-1, 1])),", "\n", "\"color\"", ":", "lambda", "img", ",", "magnitude", ":", "ImageEnhance", ".", "Color", "(", "img", ")", ".", "enhance", "(", "\n", "1", "+", "magnitude", "*", "random", ".", "choice", "(", "[", "-", "1", ",", "1", "]", ")", ")", ",", "\n", "\"posterize\"", ":", "lambda", "img", ",", "magnitude", ":", "ImageOps", ".", "posterize", "(", "img", ",", "magnitude", ")", ",", "\n", "\"solarize\"", ":", "lambda", "img", ",", "magnitude", ":", "ImageOps", ".", "solarize", "(", "img", ",", "magnitude", ")", ",", "\n", "\"contrast\"", ":", "lambda", "img", ",", "magnitude", ":", "ImageEnhance", ".", "Contrast", "(", "img", ")", ".", "enhance", "(", "\n", "1", "+", "magnitude", "*", "random", ".", "choice", "(", "[", "-", "1", ",", "1", "]", ")", ")", ",", "\n", "\"sharpness\"", ":", "lambda", "img", ",", "magnitude", ":", "ImageEnhance", ".", "Sharpness", "(", "img", ")", ".", "enhance", "(", "\n", "1", "+", "magnitude", "*", "random", ".", "choice", "(", "[", "-", "1", ",", "1", "]", ")", ")", ",", "\n", "\"brightness\"", ":", "lambda", "img", ",", "magnitude", ":", "ImageEnhance", ".", "Brightness", "(", "img", ")", ".", "enhance", "(", "\n", "1", "+", "magnitude", "*", "random", ".", "choice", "(", "[", "-", "1", ",", "1", "]", ")", ")", ",", "\n", "\"autocontrast\"", ":", "lambda", "img", ",", "magnitude", ":", "ImageOps", ".", "autocontrast", "(", "img", ")", ",", "\n", "\"equalize\"", ":", "lambda", "img", ",", "magnitude", ":", "ImageOps", ".", "equalize", "(", "img", ")", ",", "\n", "\"invert\"", ":", "lambda", "img", ",", "magnitude", ":", "ImageOps", ".", "invert", "(", "img", ")", "\n", "}", "\n", "\n", "# self.name = \"{}_{:.2f}_and_{}_{:.2f}\".format(", "\n", "#     operation1, ranges[operation1][magnitude_idx1],", "\n", "#     operation2, ranges[operation2][magnitude_idx2])", "\n", "self", ".", "p1", "=", "p1", "\n", "self", ".", "operation1", "=", "func", "[", "operation1", "]", "\n", "self", ".", "magnitude1", "=", "ranges", "[", "operation1", "]", "[", "magnitude_idx1", "]", "\n", "self", ".", "p2", "=", "p2", "\n", "self", ".", "operation2", "=", "func", "[", "operation2", "]", "\n", "self", ".", "magnitude2", "=", "ranges", "[", "operation2", "]", "[", "magnitude_idx2", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.auto_augment.SubPolicy.__call__": [[269, 275], ["random.random", "auto_augment.SubPolicy.operation1", "random.random", "auto_augment.SubPolicy.operation2"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "if", "random", ".", "random", "(", ")", "<", "self", ".", "p1", ":", "\n", "            ", "img", "=", "self", ".", "operation1", "(", "img", ",", "self", ".", "magnitude1", ")", "\n", "", "if", "random", ".", "random", "(", ")", "<", "self", ".", "p2", ":", "\n", "            ", "img", "=", "self", ".", "operation2", "(", "img", ",", "self", ".", "magnitude2", ")", "\n", "", "return", "img", "\n", "", "", ""]], "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.model_search.MixedOp.__init__": [[12, 21], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "model_search.MixedOp._ops.append", "torch.Sequential", "torch.Sequential", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.graph_distance.GraphDistance.__init__"], ["  ", "def", "__init__", "(", "self", ",", "C", ",", "stride", ",", "prims", ")", ":", "\n", "    ", "super", "(", "MixedOp", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_ops", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "stride", "=", "stride", "\n", "for", "primitive", "in", "prims", ":", "\n", "      ", "op", "=", "OPS", "[", "primitive", "]", "(", "C", ",", "stride", ",", "False", ")", "\n", "if", "'pool'", "in", "primitive", ":", "\n", "        ", "op", "=", "nn", ".", "Sequential", "(", "op", ",", "nn", ".", "BatchNorm2d", "(", "C", ",", "affine", "=", "False", ")", ")", "\n", "", "self", ".", "_ops", ".", "append", "(", "op", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.model_search.MixedOp.forward": [[22, 27], ["sum", "sum", "op", "zip", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "op", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "random.random.random"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ",", "weights", ",", "cell_active", ")", ":", "\n", "    ", "if", "cell_active", ":", "\n", "      ", "return", "sum", "(", "w", "*", "op", "(", "x", ")", "for", "w", ",", "op", "in", "zip", "(", "weights", ",", "self", ".", "_ops", ")", ")", "\n", "", "else", ":", "\n", "      ", "return", "sum", "(", "torch", ".", "tensor", "(", "random", "(", ")", ")", ".", "cuda", "(", ")", "*", "op", "(", "x", ")", "for", "op", "in", "self", ".", "_ops", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.model_search.Cell.__init__": [[31, 65], ["torch.Module.__init__", "operations.ReLUConvBN", "torch.ModuleList", "torch.ModuleList", "range", "operations.FactorizedReduce", "operations.ReLUConvBN", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "range", "sum", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "float", "model_search.MixedOp", "model_search.Cell._ops.append", "len", "range", "range"], "methods", ["home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.graph_distance.GraphDistance.__init__"], ["  ", "def", "__init__", "(", "self", ",", "steps", ",", "multiplier", ",", "C_prev_prev", ",", "C_prev", ",", "C", ",", "reduction", ",", "reduction_prev", ",", "lr", ",", "criterion", ",", "weight_decay", ",", "epochs", ",", "weights", ",", "dartopti", ")", ":", "\n", "    ", "super", "(", "Cell", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "reduction", "=", "reduction", "\n", "self", ".", "activated", "=", "True", "\n", "\n", "if", "reduction_prev", ":", "\n", "      ", "self", ".", "preprocess0", "=", "FactorizedReduce", "(", "C_prev_prev", ",", "C", ",", "affine", "=", "False", ")", "\n", "", "else", ":", "\n", "      ", "self", ".", "preprocess0", "=", "ReLUConvBN", "(", "C_prev_prev", ",", "C", ",", "1", ",", "1", ",", "0", ",", "affine", "=", "False", ")", "\n", "", "self", ".", "preprocess1", "=", "ReLUConvBN", "(", "C_prev", ",", "C", ",", "1", ",", "1", ",", "0", ",", "affine", "=", "False", ")", "\n", "self", ".", "_steps", "=", "steps", "\n", "self", ".", "_multiplier", "=", "multiplier", "\n", "\n", "self", ".", "_ops", "=", "nn", ".", "ModuleList", "(", ")", "\n", "\n", "prims", "=", "PRIMITIVES", "if", "dartopti", "else", "PRIMITIVES_DARTS", "\n", "\n", "if", "weights", "is", "not", "None", ":", "\n", "      ", "self", ".", "alphas", "=", "torch", ".", "tensor", "(", "weights", ",", "requires_grad", "=", "True", ",", "dtype", "=", "torch", ".", "float32", ",", "device", "=", "\"cuda\"", ")", "\n", "", "elif", "criterion", "is", "not", "None", ":", "\n", "      ", "k", "=", "sum", "(", "1", "for", "i", "in", "range", "(", "self", ".", "_steps", ")", "for", "n", "in", "range", "(", "2", "+", "i", ")", ")", "\n", "self", ".", "alphas", "=", "torch", ".", "zeros", "(", "k", ",", "len", "(", "prims", ")", ",", "requires_grad", "=", "True", ",", "device", "=", "\"cuda\"", ")", "\n", "\n", "", "self", ".", "criterion", "=", "criterion", "\n", "if", "criterion", ":", "\n", "      ", "self", ".", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "[", "self", ".", "alphas", "]", ",", "\n", "lr", "=", "lr", ",", "betas", "=", "(", "0.9", ",", "0.999", ")", ",", "weight_decay", "=", "weight_decay", ")", "\n", "self", ".", "scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "CosineAnnealingLR", "(", "self", ".", "optimizer", ",", "float", "(", "epochs", ")", ",", "eta_min", "=", "0.001", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "self", ".", "_steps", ")", ":", "\n", "      ", "for", "j", "in", "range", "(", "2", "+", "i", ")", ":", "\n", "        ", "stride", "=", "2", "if", "reduction", "and", "j", "<", "2", "else", "1", "\n", "op", "=", "MixedOp", "(", "C", ",", "stride", ",", "prims", ")", "\n", "self", ".", "_ops", ".", "append", "(", "op", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.model_search.Cell.loss": [[67, 69], ["model_search.Cell.criterion"], "methods", ["None"], ["", "", "", "def", "loss", "(", "self", ",", "target1", ",", "input2", ",", "logits", ",", "cell", ",", "marginal_contributions", ")", ":", "\n", "    ", "return", "self", ".", "criterion", "(", "logits", ",", "target1", ",", "input2", ",", "cell", ",", "marginal_contributions", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.model_search.Cell.forward": [[70, 86], ["model_search.Cell.preprocess0", "model_search.Cell.preprocess1", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "sum", "len", "states.append", "enumerate"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "s0", ",", "s1", ",", "weights", "=", "None", ")", ":", "\n", "    ", "s0", "=", "self", ".", "preprocess0", "(", "s0", ")", "\n", "s1", "=", "self", ".", "preprocess1", "(", "s1", ")", "\n", "\n", "states", "=", "[", "s0", ",", "s1", "]", "\n", "offset", "=", "0", "\n", "if", "weights", "is", "None", ":", "\n", "      ", "weights", "=", "self", ".", "alphas", "\n", "", "weights", "=", "torch", ".", "sigmoid", "(", "weights", ")", "\n", "\n", "for", "i", "in", "range", "(", "self", ".", "_steps", ")", ":", "\n", "      ", "s", "=", "sum", "(", "self", ".", "_ops", "[", "offset", "+", "j", "]", "(", "h", ",", "weights", "[", "offset", "+", "j", "]", ",", "self", ".", "activated", ")", "for", "j", ",", "h", "in", "enumerate", "(", "states", ")", ")", "\n", "offset", "+=", "len", "(", "states", ")", "\n", "states", ".", "append", "(", "s", ")", "\n", "\n", "", "return", "torch", ".", "cat", "(", "states", "[", "-", "self", ".", "_multiplier", ":", "]", ",", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.model_search.NetworkCIFAR.__init__": [[89, 124], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.ModuleList", "torch.ModuleList", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Linear", "torch.Linear", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "eval", "len", "architecture_processing.deserialize_architecture_to_alphas", "model_search.NetworkCIFAR.init_cells_baseline", "model_search.NetworkCIFAR.init_cells"], "methods", ["home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.graph_distance.GraphDistance.__init__", "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.architecture_processing.deserialize_architecture_to_alphas", "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.model_search.NetworkImageNet.init_cells_baseline", "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.model_search.NetworkImageNet.init_cells"], ["  ", "def", "__init__", "(", "self", ",", "C", ",", "num_classes", ",", "layers", ",", "criterion", ",", "criterion_cell", ",", "cell_optim_lr", ",", "cell_optim_weight_decay", ",", "steps", "=", "4", ",", "multiplier", "=", "4", ",", "stem_multiplier", "=", "3", ",", "\n", "arch_baseline", "=", "None", ",", "op_threshold", "=", "None", ",", "epochs", "=", "50", ")", ":", "\n", "    ", "super", "(", "NetworkCIFAR", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_C", "=", "C", "\n", "self", ".", "_num_classes", "=", "num_classes", "\n", "self", ".", "_layers", "=", "layers", "\n", "self", ".", "_criterion", "=", "criterion", "\n", "self", ".", "_steps", "=", "steps", "\n", "self", ".", "_multiplier", "=", "multiplier", "\n", "self", ".", "op_threshold", "=", "op_threshold", "\n", "self", ".", "arch_baseline", "=", "arch_baseline", "\n", "\n", "self", ".", "reduction_indexes", "=", "[", "self", ".", "_layers", "//", "3", ",", "2", "*", "self", ".", "_layers", "//", "3", "]", "\n", "\n", "C_curr", "=", "stem_multiplier", "*", "C", "\n", "self", ".", "stem", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "3", ",", "C_curr", ",", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "C_curr", ")", "\n", ")", "\n", "self", ".", "cells", "=", "nn", ".", "ModuleList", "(", ")", "\n", "\n", "baseline_alphas", "=", "None", "\n", "if", "arch_baseline", ":", "\n", "      ", "self", ".", "arch_baseline", "=", "eval", "(", "f\"genotypes.{arch_baseline}\"", ")", "\n", "self", ".", "_steps", "=", "self", ".", "arch_baseline", ".", "concat", "[", "-", "1", "]", "-", "1", "\n", "self", ".", "_layers", "=", "len", "(", "self", ".", "arch_baseline", ".", "seq", ")", "\n", "self", ".", "reduction_indexes", "=", "self", ".", "arch_baseline", ".", "reductions", "\n", "baseline_alphas", "=", "deserialize_architecture_to_alphas", "(", "self", ".", "arch_baseline", ")", "\n", "C_prev", "=", "self", ".", "init_cells_baseline", "(", "C_curr", ",", "baseline_alphas", ",", "epochs", ",", "cell_optim_lr", ",", "criterion_cell", ",", "cell_optim_weight_decay", ")", "\n", "", "else", ":", "\n", "      ", "C_prev", "=", "self", ".", "init_cells", "(", "C_curr", ",", "epochs", ",", "cell_optim_lr", ",", "criterion_cell", ",", "cell_optim_weight_decay", ")", "\n", "\n", "\n", "", "self", ".", "global_pooling", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "C_prev", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.model_search.NetworkCIFAR.init_cells": [[126, 141], ["range", "model_search.Cell"], "methods", ["None"], ["", "def", "init_cells", "(", "self", ",", "C_curr", ",", "epochs", ",", "cell_optim_lr", ",", "criterion_cell", ",", "cell_optim_weight_decay", ")", ":", "\n", "    ", "C_prev_prev", ",", "C_prev", ",", "C_curr", "=", "C_curr", ",", "C_curr", ",", "self", ".", "_C", "\n", "reduction_prev", "=", "False", "\n", "for", "i", "in", "range", "(", "self", ".", "_layers", ")", ":", "\n", "      ", "if", "i", "in", "self", ".", "reduction_indexes", ":", "\n", "        ", "C_curr", "*=", "2", "\n", "reduction", "=", "True", "\n", "", "else", ":", "\n", "        ", "reduction", "=", "False", "\n", "", "cell", "=", "Cell", "(", "self", ".", "_steps", ",", "self", ".", "_multiplier", ",", "C_prev_prev", ",", "C_prev", ",", "C_curr", ",", "reduction", ",", "reduction_prev", ",", "cell_optim_lr", ",", "criterion_cell", ",", "cell_optim_weight_decay", ",", "epochs", ",", "None", ",", "dartopti", "=", "False", ")", "\n", "reduction_prev", "=", "reduction", "\n", "self", ".", "cells", "+=", "[", "cell", "]", "\n", "\n", "C_prev_prev", ",", "C_prev", "=", "C_prev", ",", "self", ".", "_multiplier", "*", "C_curr", "\n", "", "return", "C_prev", "\n", "\n"]], "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.model_search.NetworkCIFAR.init_cells_baseline": [[142, 168], ["range", "model_search.Cell", "range", "seen.append", "max"], "methods", ["None"], ["", "def", "init_cells_baseline", "(", "self", ",", "C_curr", ",", "baseline_alphas", ",", "epochs", ",", "cell_optim_lr", ",", "criterion_cell", ",", "cell_optim_weight_decay", ")", ":", "\n", "    ", "C_prev_prev", ",", "C_prev", ",", "C_curr", "=", "C_curr", ",", "C_curr", ",", "self", ".", "_C", "\n", "reduction_prev", "=", "False", "\n", "seen", "=", "[", "]", "\n", "self", ".", "cell_dict", "=", "{", "c", ":", "None", "for", "c", "in", "range", "(", "max", "(", "self", ".", "arch_baseline", ".", "seq", ")", ")", "}", "\n", "for", "i", "in", "range", "(", "self", ".", "_layers", ")", ":", "\n", "      ", "if", "i", "in", "self", ".", "reduction_indexes", ":", "\n", "        ", "C_curr", "*=", "2", "\n", "reduction", "=", "True", "\n", "", "else", ":", "\n", "        ", "reduction", "=", "False", "\n", "", "index", "=", "self", ".", "arch_baseline", ".", "seq", "[", "i", "]", "\n", "if", "index", "not", "in", "seen", ":", "\n", "        ", "crit", "=", "criterion_cell", "\n", "weights", "=", "baseline_alphas", "[", "index", "]", "\n", "self", ".", "cell_dict", "[", "index", "]", "=", "i", "\n", "seen", ".", "append", "(", "index", ")", "\n", "", "else", ":", "\n", "        ", "crit", "=", "None", "\n", "weights", "=", "None", "\n", "", "cell", "=", "Cell", "(", "self", ".", "_steps", ",", "self", ".", "_multiplier", ",", "C_prev_prev", ",", "C_prev", ",", "C_curr", ",", "reduction", ",", "reduction_prev", ",", "cell_optim_lr", ",", "crit", ",", "cell_optim_weight_decay", ",", "epochs", ",", "weights", ",", "dartopti", "=", "True", ")", "\n", "reduction_prev", "=", "reduction", "\n", "self", ".", "cells", "+=", "[", "cell", "]", "\n", "\n", "C_prev_prev", ",", "C_prev", "=", "C_prev", ",", "self", ".", "_multiplier", "*", "C_curr", "\n", "", "return", "C_prev", "\n", "\n"]], "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.model_search.NetworkCIFAR.forward": [[169, 177], ["model_search.NetworkCIFAR.stem", "enumerate", "model_search.NetworkCIFAR.global_pooling", "model_search.NetworkCIFAR.classifier", "model_search.NetworkCIFAR.view", "cell", "model_search.NetworkCIFAR.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "    ", "s0", "=", "s1", "=", "self", ".", "stem", "(", "input", ")", "\n", "for", "i", ",", "cell", "in", "enumerate", "(", "self", ".", "cells", ")", ":", "\n", "      ", "weights", "=", "self", ".", "cells", "[", "self", ".", "cell_dict", "[", "self", ".", "arch_baseline", ".", "seq", "[", "i", "]", "]", "]", ".", "alphas", "if", "cell", ".", "criterion", "is", "None", "else", "None", "\n", "s0", ",", "s1", "=", "s1", ",", "cell", "(", "s0", ",", "s1", ",", "weights", ")", "\n", "", "out", "=", "self", ".", "global_pooling", "(", "s1", ")", "\n", "logits", "=", "self", ".", "classifier", "(", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", ")", "\n", "return", "logits", "\n", "\n"]], "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.model_search.NetworkCIFAR.arch_parameters": [[178, 193], ["sum", "len", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "enumerate", "len", "len", "range", "range"], "methods", ["None"], ["", "def", "arch_parameters", "(", "self", ",", "to_parse", "=", "False", ")", ":", "\n", "    ", "k", "=", "sum", "(", "1", "for", "i", "in", "range", "(", "self", ".", "_steps", ")", "for", "n", "in", "range", "(", "2", "+", "i", ")", ")", "\n", "prims", "=", "PRIMITIVES", "if", "self", ".", "arch_baseline", "else", "PRIMITIVES_DARTS", "\n", "num_ops", "=", "len", "(", "prims", ")", "\n", "length", "=", "len", "(", "self", ".", "cells", ")", "if", "to_parse", "or", "not", "(", "self", ".", "arch_baseline", ")", "else", "len", "(", "self", ".", "arch_baseline", ".", "genes", ")", "\n", "alphas", "=", "torch", ".", "zeros", "(", "length", ",", "k", ",", "num_ops", ",", "device", "=", "'cuda'", ")", "\n", "index", "=", "0", "\n", "for", "i", ",", "c", "in", "enumerate", "(", "self", ".", "cells", ")", ":", "\n", "      ", "if", "c", ".", "criterion", ":", "\n", "        ", "alphas", "[", "index", "]", "=", "c", ".", "alphas", "\n", "index", "+=", "1", "\n", "", "elif", "to_parse", ":", "# Output alphas so that we can parse the genotype like a standard one (Genotype_nested)", "\n", "        ", "alphas", "[", "index", "]", "=", "self", ".", "cells", "[", "self", ".", "cell_dict", "[", "self", ".", "arch_baseline", ".", "seq", "[", "i", "]", "]", "]", ".", "alphas", "\n", "index", "+=", "1", "\n", "", "", "return", "alphas", "\n", "\n"]], "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.model_search.NetworkCIFAR.arch_state_dicts": [[194, 199], ["enumerate", "state_dicts.append", "c.state_dict"], "methods", ["None"], ["", "def", "arch_state_dicts", "(", "self", ")", ":", "\n", "    ", "state_dicts", "=", "[", "]", "\n", "for", "i", ",", "c", "in", "enumerate", "(", "self", ".", "cells", ")", ":", "\n", "      ", "state_dicts", ".", "append", "(", "c", ".", "state_dict", "(", ")", ")", "\n", "", "return", "state_dicts", "\n", "\n"]], "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.model_search.NetworkCIFAR.arch_criterions": [[200, 205], ["enumerate", "criterions.append"], "methods", ["None"], ["", "def", "arch_criterions", "(", "self", ")", ":", "\n", "    ", "criterions", "=", "[", "]", "\n", "for", "i", ",", "c", "in", "enumerate", "(", "self", ".", "cells", ")", ":", "\n", "      ", "criterions", ".", "append", "(", "c", ".", "criterion", ")", "\n", "", "return", "criterions", "\n", "\n"]], "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.model_search.NetworkCIFAR.states": [[206, 213], ["model_search.NetworkCIFAR.arch_parameters", "model_search.NetworkCIFAR.arch_state_dicts", "model_search.NetworkCIFAR.arch_criterions", "model_search.NetworkCIFAR.state_dict"], "methods", ["home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.model_search.NetworkImageNet.arch_parameters", "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.model_search.NetworkImageNet.arch_state_dicts", "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.model_search.NetworkImageNet.arch_criterions"], ["", "def", "states", "(", "self", ")", ":", "\n", "    ", "return", "{", "\n", "'alphas'", ":", "self", ".", "arch_parameters", "(", ")", ",", "\n", "'arch_state_dicts'", ":", "self", ".", "arch_state_dicts", "(", ")", ",", "\n", "'arch_criterions'", ":", "self", ".", "arch_criterions", "(", ")", ",", "\n", "'criterion'", ":", "self", ".", "_criterion", ",", "\n", "'network_state_dict'", ":", "self", ".", "state_dict", "(", ")", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.model_search.NetworkCIFAR.restore": [[215, 223], ["model_search.NetworkCIFAR.load_state_dict", "enumerate", "c.load_state_dict", "c.alphas.requires_grad_"], "methods", ["None"], ["", "def", "restore", "(", "self", ",", "states", ")", ":", "\n", "    ", "self", ".", "load_state_dict", "(", "states", "[", "'network_state_dict'", "]", ")", "\n", "self", ".", "_criterion", "=", "states", "[", "'criterion'", "]", "\n", "for", "i", ",", "c", "in", "enumerate", "(", "self", ".", "cells", ")", ":", "\n", "      ", "c", ".", "load_state_dict", "(", "states", "[", "'arch_state_dicts'", "]", "[", "i", "]", ")", "\n", "c", ".", "alphas", "=", "states", "[", "'alphas'", "]", "[", "i", "]", "\n", "c", ".", "alphas", ".", "requires_grad_", "(", ")", "\n", "c", ".", "criterion", "=", "states", "[", "'arch_criterions'", "]", "[", "i", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.model_search.NetworkImageNet.__init__": [[227, 262], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.ModuleList", "torch.ModuleList", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Linear", "torch.Linear", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "eval", "len", "architecture_processing.deserialize_architecture_to_alphas", "model_search.NetworkImageNet.init_cells_baseline", "model_search.NetworkImageNet.init_cells"], "methods", ["home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.graph_distance.GraphDistance.__init__", "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.architecture_processing.deserialize_architecture_to_alphas", "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.model_search.NetworkImageNet.init_cells_baseline", "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.model_search.NetworkImageNet.init_cells"], ["  ", "def", "__init__", "(", "self", ",", "C", ",", "num_classes", ",", "layers", ",", "criterion", ",", "criterion_cell", ",", "cell_optim_lr", ",", "cell_optim_weight_decay", ",", "steps", "=", "4", ",", "multiplier", "=", "4", ",", "stem_multiplier", "=", "3", ",", "\n", "arch_baseline", "=", "None", ",", "op_threshold", "=", "None", ",", "epochs", "=", "50", ")", ":", "\n", "    ", "super", "(", "NetworkImageNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_C", "=", "C", "\n", "self", ".", "_num_classes", "=", "num_classes", "\n", "self", ".", "_layers", "=", "layers", "\n", "self", ".", "_criterion", "=", "criterion", "\n", "self", ".", "_steps", "=", "steps", "\n", "self", ".", "_multiplier", "=", "multiplier", "\n", "self", ".", "op_threshold", "=", "op_threshold", "\n", "self", ".", "arch_baseline", "=", "arch_baseline", "\n", "\n", "self", ".", "reduction_indexes", "=", "[", "self", ".", "_layers", "//", "3", ",", "2", "*", "self", ".", "_layers", "//", "3", "]", "\n", "\n", "C_curr", "=", "stem_multiplier", "*", "C", "\n", "self", ".", "stem", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "3", ",", "C_curr", ",", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "C_curr", ")", "\n", ")", "\n", "self", ".", "cells", "=", "nn", ".", "ModuleList", "(", ")", "\n", "\n", "baseline_alphas", "=", "None", "\n", "if", "arch_baseline", ":", "\n", "      ", "self", ".", "arch_baseline", "=", "eval", "(", "f\"genotypes.{arch_baseline}\"", ")", "\n", "self", ".", "_steps", "=", "self", ".", "arch_baseline", ".", "concat", "[", "-", "1", "]", "-", "1", "\n", "self", ".", "_layers", "=", "len", "(", "self", ".", "arch_baseline", ".", "seq", ")", "\n", "self", ".", "reduction_indexes", "=", "self", ".", "arch_baseline", ".", "reductions", "\n", "baseline_alphas", "=", "deserialize_architecture_to_alphas", "(", "self", ".", "arch_baseline", ")", "\n", "C_prev", "=", "self", ".", "init_cells_baseline", "(", "C_curr", ",", "baseline_alphas", ",", "epochs", ",", "cell_optim_lr", ",", "criterion_cell", ",", "cell_optim_weight_decay", ")", "\n", "", "else", ":", "\n", "      ", "C_prev", "=", "self", ".", "init_cells", "(", "C_curr", ",", "epochs", ",", "cell_optim_lr", ",", "cell_optim_weight_decay", ")", "\n", "\n", "\n", "", "self", ".", "global_pooling", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "C_prev", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.model_search.NetworkImageNet.init_cells": [[264, 279], ["range", "model_search.Cell"], "methods", ["None"], ["", "def", "init_cells", "(", "self", ",", "C_curr", ",", "epochs", ",", "cell_optim_lr", ",", "criterion_cell", ",", "cell_optim_weight_decay", ")", ":", "\n", "    ", "C_prev_prev", ",", "C_prev", ",", "C_curr", "=", "C_curr", ",", "C_curr", ",", "self", ".", "_C", "\n", "reduction_prev", "=", "True", "\n", "for", "i", "in", "range", "(", "self", ".", "_layers", ")", ":", "\n", "      ", "if", "i", "in", "self", ".", "reduction_indexes", ":", "\n", "        ", "C_curr", "*=", "2", "\n", "reduction", "=", "True", "\n", "", "else", ":", "\n", "        ", "reduction", "=", "False", "\n", "", "cell", "=", "Cell", "(", "self", ".", "_steps", ",", "self", ".", "_multiplier", ",", "C_prev_prev", ",", "C_prev", ",", "C_curr", ",", "reduction", ",", "reduction_prev", ",", "cell_optim_lr", ",", "criterion_cell", ",", "cell_optim_weight_decay", ",", "epochs", ",", "None", ")", "\n", "reduction_prev", "=", "reduction", "\n", "self", ".", "cells", "+=", "[", "cell", "]", "\n", "\n", "C_prev_prev", ",", "C_prev", "=", "C_prev", ",", "self", ".", "_multiplier", "*", "C_curr", "\n", "", "return", "C_prev", "\n", "\n"]], "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.model_search.NetworkImageNet.init_cells_baseline": [[280, 306], ["range", "model_search.Cell", "range", "seen.append", "max"], "methods", ["None"], ["", "def", "init_cells_baseline", "(", "self", ",", "C_curr", ",", "baseline_alphas", ",", "epochs", ",", "cell_optim_lr", ",", "criterion_cell", ",", "cell_optim_weight_decay", ")", ":", "\n", "    ", "C_prev_prev", ",", "C_prev", ",", "C_curr", "=", "C_curr", ",", "C_curr", ",", "self", ".", "_C", "\n", "reduction_prev", "=", "True", "\n", "seen", "=", "[", "]", "\n", "self", ".", "cell_dict", "=", "{", "c", ":", "None", "for", "c", "in", "range", "(", "max", "(", "self", ".", "arch_baseline", ".", "seq", ")", ")", "}", "\n", "for", "i", "in", "range", "(", "self", ".", "_layers", ")", ":", "\n", "      ", "if", "i", "in", "self", ".", "reduction_indexes", ":", "\n", "        ", "C_curr", "*=", "2", "\n", "reduction", "=", "True", "\n", "", "else", ":", "\n", "        ", "reduction", "=", "False", "\n", "", "index", "=", "self", ".", "arch_baseline", ".", "seq", "[", "i", "]", "\n", "if", "index", "not", "in", "seen", ":", "\n", "        ", "crit", "=", "criterion_cell", "\n", "weights", "=", "baseline_alphas", "[", "index", "]", "\n", "self", ".", "cell_dict", "[", "index", "]", "=", "i", "\n", "seen", ".", "append", "(", "index", ")", "\n", "", "else", ":", "\n", "        ", "crit", "=", "None", "\n", "weights", "=", "None", "\n", "", "cell", "=", "Cell", "(", "self", ".", "_steps", ",", "self", ".", "_multiplier", ",", "C_prev_prev", ",", "C_prev", ",", "C_curr", ",", "reduction", ",", "reduction_prev", ",", "cell_optim_lr", ",", "crit", ",", "cell_optim_weight_decay", ",", "epochs", ",", "weights", ")", "\n", "reduction_prev", "=", "reduction", "\n", "self", ".", "cells", "+=", "[", "cell", "]", "\n", "\n", "C_prev_prev", ",", "C_prev", "=", "C_prev", ",", "self", ".", "_multiplier", "*", "C_curr", "\n", "", "return", "C_prev", "\n", "\n"]], "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.model_search.NetworkImageNet.forward": [[307, 315], ["model_search.NetworkImageNet.stem", "enumerate", "model_search.NetworkImageNet.global_pooling", "model_search.NetworkImageNet.classifier", "model_search.NetworkImageNet.view", "cell", "model_search.NetworkImageNet.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "    ", "s0", "=", "s1", "=", "self", ".", "stem", "(", "input", ")", "\n", "for", "i", ",", "cell", "in", "enumerate", "(", "self", ".", "cells", ")", ":", "\n", "      ", "weights", "=", "self", ".", "cells", "[", "self", ".", "cell_dict", "[", "self", ".", "arch_baseline", ".", "seq", "[", "i", "]", "]", "]", ".", "alphas", "if", "cell", ".", "criterion", "is", "None", "else", "None", "\n", "s0", ",", "s1", "=", "s1", ",", "cell", "(", "s0", ",", "s1", ",", "weights", ")", "\n", "", "out", "=", "self", ".", "global_pooling", "(", "s1", ")", "\n", "logits", "=", "self", ".", "classifier", "(", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", ")", "\n", "return", "logits", "\n", "\n"]], "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.model_search.NetworkImageNet.arch_parameters": [[316, 331], ["sum", "len", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "enumerate", "len", "len", "range", "range"], "methods", ["None"], ["", "def", "arch_parameters", "(", "self", ",", "to_parse", "=", "False", ")", ":", "\n", "    ", "k", "=", "sum", "(", "1", "for", "i", "in", "range", "(", "self", ".", "_steps", ")", "for", "n", "in", "range", "(", "2", "+", "i", ")", ")", "\n", "prims", "=", "PRIMITIVES", "if", "self", ".", "arch_baseline", "else", "PRIMITIVES_DARTS", "\n", "num_ops", "=", "len", "(", "prims", ")", "\n", "length", "=", "len", "(", "self", ".", "cells", ")", "if", "to_parse", "else", "len", "(", "self", ".", "arch_baseline", ".", "genes", ")", "\n", "alphas", "=", "torch", ".", "zeros", "(", "length", ",", "k", ",", "num_ops", ",", "device", "=", "'cuda'", ")", "\n", "index", "=", "0", "\n", "for", "i", ",", "c", "in", "enumerate", "(", "self", ".", "cells", ")", ":", "\n", "      ", "if", "c", ".", "criterion", ":", "\n", "        ", "alphas", "[", "index", "]", "=", "c", ".", "alphas", "\n", "index", "+=", "1", "\n", "", "elif", "to_parse", ":", "# Output alphas so that we can parse the genotype like a standard one (Genotype_nested)", "\n", "        ", "alphas", "[", "index", "]", "=", "self", ".", "cells", "[", "self", ".", "cell_dict", "[", "self", ".", "arch_baseline", ".", "seq", "[", "i", "]", "]", "]", ".", "alphas", "\n", "index", "+=", "1", "\n", "", "", "return", "alphas", "\n", "\n"]], "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.model_search.NetworkImageNet.arch_state_dicts": [[332, 337], ["enumerate", "state_dicts.append", "c.state_dict"], "methods", ["None"], ["", "def", "arch_state_dicts", "(", "self", ")", ":", "\n", "    ", "state_dicts", "=", "[", "]", "\n", "for", "i", ",", "c", "in", "enumerate", "(", "self", ".", "cells", ")", ":", "\n", "      ", "state_dicts", ".", "append", "(", "c", ".", "state_dict", "(", ")", ")", "\n", "", "return", "state_dicts", "\n", "\n"]], "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.model_search.NetworkImageNet.arch_criterions": [[338, 343], ["enumerate", "criterions.append"], "methods", ["None"], ["", "def", "arch_criterions", "(", "self", ")", ":", "\n", "    ", "criterions", "=", "[", "]", "\n", "for", "i", ",", "c", "in", "enumerate", "(", "self", ".", "cells", ")", ":", "\n", "      ", "criterions", ".", "append", "(", "c", ".", "criterion", ")", "\n", "", "return", "criterions", "\n", "\n"]], "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.model_search.NetworkImageNet.states": [[344, 351], ["model_search.NetworkImageNet.arch_parameters", "model_search.NetworkImageNet.arch_state_dicts", "model_search.NetworkImageNet.arch_criterions", "model_search.NetworkImageNet.state_dict"], "methods", ["home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.model_search.NetworkImageNet.arch_parameters", "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.model_search.NetworkImageNet.arch_state_dicts", "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.model_search.NetworkImageNet.arch_criterions"], ["", "def", "states", "(", "self", ")", ":", "\n", "    ", "return", "{", "\n", "'alphas'", ":", "self", ".", "arch_parameters", "(", ")", ",", "\n", "'arch_state_dicts'", ":", "self", ".", "arch_state_dicts", "(", ")", ",", "\n", "'arch_criterions'", ":", "self", ".", "arch_criterions", "(", ")", ",", "\n", "'criterion'", ":", "self", ".", "_criterion", ",", "\n", "'network_state_dict'", ":", "self", ".", "state_dict", "(", ")", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.model_search.NetworkImageNet.restore": [[353, 361], ["model_search.NetworkImageNet.load_state_dict", "enumerate", "c.load_state_dict", "c.alphas.requires_grad_"], "methods", ["None"], ["", "def", "restore", "(", "self", ",", "states", ")", ":", "\n", "    ", "self", ".", "load_state_dict", "(", "states", "[", "'network_state_dict'", "]", ")", "\n", "self", ".", "_criterion", "=", "states", "[", "'criterion'", "]", "\n", "for", "i", ",", "c", "in", "enumerate", "(", "self", ".", "cells", ")", ":", "\n", "      ", "c", ".", "load_state_dict", "(", "states", "[", "'arch_state_dicts'", "]", "[", "i", "]", ")", "\n", "c", ".", "alphas", "=", "states", "[", "'alphas'", "]", "[", "i", "]", "\n", "c", ".", "alphas", ".", "requires_grad_", "(", ")", "\n", "c", ".", "criterion", "=", "states", "[", "'arch_criterions'", "]", "[", "i", "]", "", "", "", "", ""]], "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.train.CrossEntropyLabelSmooth.__init__": [[55, 60], ["torch.Module.__init__", "torch.LogSoftmax", "torch.LogSoftmax", "torch.LogSoftmax", "torch.LogSoftmax"], "methods", ["home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.graph_distance.GraphDistance.__init__"], ["def", "__init__", "(", "self", ",", "num_classes", ",", "epsilon", ")", ":", "\n", "        ", "super", "(", "CrossEntropyLabelSmooth", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "epsilon", "=", "epsilon", "\n", "self", ".", "logsoftmax", "=", "nn", ".", "LogSoftmax", "(", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.train.CrossEntropyLabelSmooth.forward": [[61, 67], ["train.CrossEntropyLabelSmooth.logsoftmax", "torch.zeros_like().scatter_", "torch.zeros_like().scatter_", "torch.zeros_like().scatter_", "torch.zeros_like().scatter_", "torch.zeros_like().scatter_", "torch.zeros_like().scatter_", "torch.zeros_like().scatter_", "torch.zeros_like().scatter_", "torch.zeros_like().scatter_", "torch.zeros_like().scatter_", "torch.zeros_like().scatter_", "torch.zeros_like().scatter_", "torch.zeros_like().scatter_", "torch.zeros_like().scatter_", "torch.zeros_like().scatter_", "torch.zeros_like().scatter_", "torch.zeros_like().scatter_.unsqueeze", "torch.zeros_like().scatter_.unsqueeze", "torch.zeros_like().scatter_.unsqueeze", "torch.zeros_like().scatter_.unsqueeze", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "targets", ")", ":", "\n", "        ", "log_probs", "=", "self", ".", "logsoftmax", "(", "inputs", ")", "\n", "targets", "=", "torch", ".", "zeros_like", "(", "log_probs", ")", ".", "scatter_", "(", "1", ",", "targets", ".", "unsqueeze", "(", "1", ")", ",", "1", ")", "\n", "targets", "=", "(", "1", "-", "self", ".", "epsilon", ")", "*", "targets", "+", "self", ".", "epsilon", "/", "self", ".", "num_classes", "\n", "loss", "=", "(", "-", "targets", "*", "log_probs", ")", ".", "mean", "(", "0", ")", ".", "sum", "(", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.train.TrainArgs.__init__": [[70, 100], ["os.path.join", "os.path.expanduser"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "arch", ",", "epochs", ",", "dataset", ",", "init_channels", ",", "layers", ",", "gpu", ",", "no_log", "=", "True", ")", "->", "None", ":", "\n", "        ", "self", ".", "arch", "=", "arch", "\n", "self", ".", "dataset", "=", "dataset", "\n", "self", ".", "epochs", "=", "epochs", "\n", "self", ".", "init_channels", "=", "init_channels", "\n", "self", ".", "layers", "=", "layers", "\n", "self", ".", "no_log", "=", "no_log", "\n", "self", ".", "data", "=", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "expanduser", "(", "'~'", ")", ",", "'work/dataset/cifar/'", ")", "\n", "self", ".", "batch_size", "=", "256", "\n", "self", ".", "learning_rate", "=", "0.025", "\n", "self", ".", "start_epoch", "=", "0", "\n", "self", ".", "momentum", "=", "0.9", "\n", "self", ".", "weight_decay", "=", "3e-4", "\n", "self", ".", "report_freq", "=", "100", "\n", "self", ".", "gpu", "=", "gpu", "\n", "self", ".", "multi_gpus", "=", "False", "\n", "self", ".", "parse_method", "=", "\"threshold_sparse\"", "\n", "self", ".", "model_path", "=", "\"saved_models\"", "\n", "self", ".", "auxiliary", "=", "False", "\n", "self", ".", "auxiliary_weight", "=", "0.4", "\n", "self", ".", "cutout", "=", "False", "\n", "self", ".", "cutout_length", "=", "16", "\n", "self", ".", "label_smooth", "=", "0.1", "\n", "self", ".", "auto_aug", "=", "False", "\n", "self", ".", "drop_path_prob", "=", "0.2", "\n", "self", ".", "save", "=", "'EXP'", "\n", "self", ".", "seed", "=", "0", "\n", "self", ".", "grad_clip", "=", "5", "\n", "self", ".", "resume", "=", "''", "\n", "self", ".", "amp", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.train.TrainNetwork.__init__": [[105, 113], ["object.__init__", "train.TrainNetwork._init_log", "train.TrainNetwork._init_device", "train.TrainNetwork._init_data_queue", "train.TrainNetwork._init_model"], "methods", ["home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.graph_distance.GraphDistance.__init__", "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.train.TrainNetwork._init_log", "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.train.TrainNetwork._init_device", "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.train.TrainNetwork._init_data_queue", "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.train.TrainNetwork._init_model"], ["def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "super", "(", "TrainNetwork", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "args", "=", "args", "\n", "self", ".", "dur_time", "=", "0", "\n", "self", ".", "_init_log", "(", ")", "\n", "self", ".", "_init_device", "(", ")", "\n", "self", ".", "_init_data_queue", "(", ")", "\n", "self", ".", "_init_model", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.train.TrainNetwork._init_log": [[114, 129], ["logging.basicConfig", "logging.getLogger", "utils.create_exp_dir", "logging.FileHandler", "logging.FileHandler.setFormatter", "train.TrainNetwork.logger.addHandler", "torch.utils.tensorboard.SummaryWriter", "torch.utils.tensorboard.SummaryWriter", "torch.utils.tensorboard.SummaryWriter", "torch.utils.tensorboard.SummaryWriter", "os.path.join", "logging.Formatter", "time.strftime", "time.strftime"], "methods", ["home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.utils.create_exp_dir"], ["", "def", "_init_log", "(", "self", ")", ":", "\n", "        ", "if", "not", "self", ".", "args", ".", "no_log", ":", "\n", "            ", "self", ".", "args", ".", "save", "=", "'./logs/eval/'", "+", "self", ".", "args", ".", "arch", "+", "'/'", "+", "'cifar10'", "+", "'/eval-{}-{}'", ".", "format", "(", "self", ".", "args", ".", "save", ",", "time", ".", "strftime", "(", "'%Y%m%d-%H%M'", ")", ")", "\n", "dutils", ".", "create_exp_dir", "(", "self", ".", "args", ".", "save", ",", "scripts_to_save", "=", "None", ")", "\n", "\n", "", "log_format", "=", "'%(asctime)s %(message)s'", "\n", "logging", ".", "basicConfig", "(", "stream", "=", "sys", ".", "stdout", ",", "level", "=", "logging", ".", "INFO", ",", "\n", "format", "=", "log_format", ",", "datefmt", "=", "'%m/%d %I:%M:%S %p'", ")", "\n", "self", ".", "logger", "=", "logging", ".", "getLogger", "(", "'Architecture Training'", ")", "\n", "if", "not", "self", ".", "args", ".", "no_log", ":", "\n", "            ", "fh", "=", "logging", ".", "FileHandler", "(", "os", ".", "path", ".", "join", "(", "self", ".", "args", ".", "save", ",", "'log.txt'", ")", ")", "\n", "fh", ".", "setFormatter", "(", "logging", ".", "Formatter", "(", "log_format", ")", ")", "\n", "\n", "self", ".", "logger", ".", "addHandler", "(", "fh", ")", "\n", "self", ".", "writer", "=", "SummaryWriter", "(", "f'./runs/eval/eval-{args.dataset}-{args.layers}layers-{time.strftime(\"%Y%m%d-%H%M\")}'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.train.TrainNetwork._init_device": [[130, 143], ["numpy.random.seed", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "logging.info", "logging.info", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "train.TrainNetwork.logger.info", "sys.exit"], "methods", ["None"], ["", "", "def", "_init_device", "(", "self", ")", ":", "\n", "        ", "if", "not", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "            ", "self", ".", "logger", ".", "info", "(", "'no gpu device available'", ")", "\n", "sys", ".", "exit", "(", "1", ")", "\n", "", "np", ".", "random", ".", "seed", "(", "self", ".", "args", ".", "seed", ")", "\n", "self", ".", "device_id", "=", "self", ".", "args", ".", "gpu", "\n", "self", ".", "device", "=", "torch", ".", "device", "(", "'cuda:{}'", ".", "format", "(", "0", "if", "self", ".", "args", ".", "multi_gpus", "else", "self", ".", "device_id", ")", ")", "\n", "cudnn", ".", "benchmark", "=", "True", "\n", "torch", ".", "manual_seed", "(", "self", ".", "args", ".", "seed", ")", "\n", "cudnn", ".", "enabled", "=", "True", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "self", ".", "args", ".", "seed", ")", "\n", "logging", ".", "info", "(", "'gpu device = %d'", "%", "self", ".", "args", ".", "gpu", ")", "\n", "logging", ".", "info", "(", "\"args = %s\"", ",", "self", ".", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.train.TrainNetwork._init_data_queue": [[144, 165], ["torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "utils._data_transforms_cifar", "torchvision.CIFAR10", "torchvision.CIFAR10", "utils._data_transforms_cifar", "torchvision.CIFAR100", "torchvision.CIFAR100", "utils._data_transforms_imagenet", "torchvision.ImageNet", "torchvision.ImageNet"], "methods", ["home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.utils._data_transforms_cifar", "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.utils._data_transforms_cifar", "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.utils._data_transforms_imagenet"], ["", "def", "_init_data_queue", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "args", ".", "dataset", "==", "'cifar10'", ":", "\n", "            ", "train_transform", ",", "valid_transform", "=", "dutils", ".", "_data_transforms_cifar", "(", "self", ".", "args", ")", "\n", "train_data", "=", "dset", ".", "CIFAR10", "(", "root", "=", "self", ".", "args", ".", "data", ",", "train", "=", "True", ",", "download", "=", "True", ",", "transform", "=", "train_transform", ")", "\n", "valid_data", "=", "dset", ".", "CIFAR10", "(", "root", "=", "self", ".", "args", ".", "data", ",", "train", "=", "False", ",", "download", "=", "True", ",", "transform", "=", "valid_transform", ")", "\n", "self", ".", "num_classes", "=", "10", "\n", "", "elif", "self", ".", "args", ".", "dataset", "==", "'cifar100'", ":", "\n", "            ", "train_transform", ",", "valid_transform", "=", "dutils", ".", "_data_transforms_cifar", "(", "self", ".", "args", ")", "\n", "train_data", "=", "dset", ".", "CIFAR100", "(", "root", "=", "self", ".", "args", ".", "data", ",", "train", "=", "True", ",", "download", "=", "True", ",", "transform", "=", "train_transform", ")", "\n", "valid_data", "=", "dset", ".", "CIFAR100", "(", "root", "=", "self", ".", "args", ".", "data", ",", "train", "=", "False", ",", "download", "=", "True", ",", "transform", "=", "valid_transform", ")", "\n", "self", ".", "num_classes", "=", "100", "\n", "", "elif", "self", ".", "args", ".", "dataset", "==", "'imagenet'", ":", "\n", "            ", "train_transform", ",", "valid_transform", "=", "dutils", ".", "_data_transforms_imagenet", "(", "self", ".", "args", ")", "\n", "train_data", "=", "dset", ".", "ImageNet", "(", "root", "=", "self", ".", "args", ".", "data", ",", "split", "=", "'train'", ",", "transform", "=", "train_transform", ")", "\n", "valid_data", "=", "dset", ".", "ImageNet", "(", "root", "=", "self", ".", "args", ".", "data", ",", "split", "=", "'val'", ",", "transform", "=", "valid_transform", ")", "\n", "self", ".", "num_classes", "=", "1000", "\n", "", "self", ".", "train_queue", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "train_data", ",", "batch_size", "=", "self", ".", "args", ".", "batch_size", ",", "shuffle", "=", "True", ",", "pin_memory", "=", "True", ",", "num_workers", "=", "4", ")", "\n", "\n", "self", ".", "valid_queue", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "valid_data", ",", "batch_size", "=", "self", ".", "args", ".", "batch_size", ",", "shuffle", "=", "False", ",", "pin_memory", "=", "True", ",", "num_workers", "=", "4", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.train.TrainNetwork._init_model": [[166, 229], ["thop.profile", "train.TrainNetwork.logger.info", "train.TrainNetwork.logger.info", "torch.DataParallel.to", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "train.CrossEntropyLabelSmooth", "torch.CrossEntropyLoss.to", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.cuda.amp.GradScaler", "torch.cuda.amp.GradScaler", "torch.cuda.amp.GradScaler", "torch.cuda.amp.GradScaler", "torch.cuda.amp.GradScaler", "torch.cuda.amp.GradScaler", "torch.cuda.amp.GradScaler", "torch.cuda.amp.GradScaler", "torch.cuda.amp.GradScaler", "torch.cuda.amp.GradScaler", "torch.cuda.amp.GradScaler", "torch.cuda.amp.GradScaler", "torch.cuda.amp.GradScaler", "torch.cuda.amp.GradScaler", "torch.cuda.amp.GradScaler", "torch.cuda.amp.GradScaler", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "eval", "isinstance", "nn.DataParallel.NetworkImageNet", "nn.DataParallel.NetworkCIFAR", "train.TrainNetwork.logger.info", "torch.DataParallel", "torch.DataParallel", "torch.DataParallel", "torch.DataParallel", "train.TrainNetwork.logger.info", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "CrossEntropyLabelSmooth.to", "torch.DataParallel.parameters", "os.path.isfile", "float", "os.path.isfile", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "train.TrainNetwork.scheduler.load_state_dict", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "print", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "train.TrainNetwork.model.load_state_dict", "train.TrainNetwork.optimizer.load_state_dict", "train.TrainNetwork.scaler.load_state_dict", "print", "print", "open", "eval", "g.read", "train.TrainNetwork.args.arch.split"], "methods", ["home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.utils.load", "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.utils.load", "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.utils.load", "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.utils.load", "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.utils.load", "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.utils.load", "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.utils.load", "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.utils.load", "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.utils.load", "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.utils.load", "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.utils.load", "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.utils.load", "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.utils.load", "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.utils.load", "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.utils.load", "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.utils.load", "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.utils.load", "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.utils.load", "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.utils.load", "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.utils.load", "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.utils.load", "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.utils.load", "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.utils.load", "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.utils.load", "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.utils.load", "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.utils.load", "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.utils.load", "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.utils.load", "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.utils.load", "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.utils.load", "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.utils.load", "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.utils.load"], ["", "def", "_init_model", "(", "self", ")", ":", "\n", "        ", "if", "\"baseline\"", "in", "self", ".", "args", ".", "arch", ":", "\n", "            ", "self", ".", "genotype", "=", "eval", "(", "f\"genotypes.{self.args.arch.split('_')[1]}\"", ")", "\n", "", "elif", "isinstance", "(", "self", ".", "args", ".", "arch", ",", "Genotype_nested", ")", ":", "\n", "            ", "self", ".", "genotype", "=", "self", ".", "args", ".", "arch", "\n", "", "else", ":", "\n", "            ", "with", "open", "(", "f'genotypes/{self.args.arch}.txt'", ",", "'r'", ")", "as", "g", ":", "\n", "                ", "self", ".", "genotype", "=", "eval", "(", "g", ".", "read", "(", ")", ")", "\n", "", "", "if", "self", ".", "args", ".", "dataset", "==", "\"imagenet\"", ":", "\n", "            ", "model", "=", "NetworkImageNet", "(", "self", ".", "args", ".", "init_channels", ",", "self", ".", "num_classes", ",", "self", ".", "args", ".", "layers", ",", "self", ".", "args", ".", "auxiliary", ",", "self", ".", "genotype", ",", "self", ".", "args", ".", "parse_method", ")", "\n", "inputs_r", "=", "(", "torch", ".", "randn", "(", "1", ",", "3", ",", "224", ",", "224", ")", ",", ")", "\n", "", "else", ":", "\n", "            ", "model", "=", "NetworkCIFAR", "(", "self", ".", "args", ".", "init_channels", ",", "self", ".", "num_classes", ",", "self", ".", "args", ".", "layers", ",", "self", ".", "args", ".", "auxiliary", ",", "self", ".", "genotype", ",", "self", ".", "args", ".", "parse_method", ")", "\n", "inputs_r", "=", "(", "torch", ".", "randn", "(", "1", ",", "3", ",", "224", ",", "224", ")", ",", ")", "\n", "", "flops", ",", "params", "=", "profile", "(", "model", ",", "inputs", "=", "inputs_r", ",", "verbose", "=", "False", ")", "\n", "self", ".", "logger", ".", "info", "(", "'flops = %fM'", ",", "flops", "/", "1e6", ")", "\n", "self", ".", "logger", ".", "info", "(", "'param size = %fM'", ",", "params", "/", "1e6", ")", "\n", "\n", "# Try move model to multi gpus", "\n", "if", "torch", ".", "cuda", ".", "device_count", "(", ")", ">", "1", "and", "self", ".", "args", ".", "multi_gpus", ":", "\n", "            ", "self", ".", "logger", ".", "info", "(", "'use: %d gpus'", ",", "torch", ".", "cuda", ".", "device_count", "(", ")", ")", "\n", "model", "=", "nn", ".", "DataParallel", "(", "model", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "logger", ".", "info", "(", "'gpu device = %d'", "%", "self", ".", "device_id", ")", "\n", "torch", ".", "cuda", ".", "set_device", "(", "self", ".", "device_id", ")", "\n", "", "self", ".", "model", "=", "model", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "criterion_smooth", "=", "CrossEntropyLabelSmooth", "(", "self", ".", "num_classes", ",", "self", ".", "args", ".", "label_smooth", ")", "\n", "self", ".", "criterion", "=", "criterion", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "criterion_train", "=", "criterion_smooth", ".", "to", "(", "self", ".", "device", ")", "if", "self", ".", "args", ".", "dataset", "==", "\"imagenet\"", "else", "self", ".", "criterion", "\n", "self", ".", "optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "\n", "model", ".", "parameters", "(", ")", ",", "\n", "self", ".", "args", ".", "learning_rate", ",", "\n", "momentum", "=", "self", ".", "args", ".", "momentum", ",", "\n", "weight_decay", "=", "self", ".", "args", ".", "weight_decay", "\n", ")", "\n", "\n", "self", ".", "scaler", "=", "torch", ".", "cuda", ".", "amp", ".", "GradScaler", "(", "enabled", "=", "self", ".", "args", ".", "amp", ")", "\n", "\n", "self", ".", "best_acc_top1", "=", "0", "\n", "# optionally resume from a checkpoint", "\n", "if", "self", ".", "args", ".", "resume", ":", "\n", "            ", "if", "os", ".", "path", ".", "isfile", "(", "self", ".", "args", ".", "resume", ")", ":", "\n", "                ", "print", "(", "\"=> loading checkpoint {}\"", ".", "format", "(", "self", ".", "args", ".", "resume", ")", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "self", ".", "args", ".", "resume", ",", "map_location", "=", "self", ".", "device", ")", "\n", "self", ".", "dur_time", "=", "checkpoint", "[", "'dur_time'", "]", "\n", "self", ".", "args", ".", "start_epoch", "=", "checkpoint", "[", "'epoch'", "]", "\n", "self", ".", "best_acc_top1", "=", "checkpoint", "[", "'best_acc_top1'", "]", "\n", "self", ".", "args", ".", "drop_path_prob", "=", "checkpoint", "[", "'drop_path_prob'", "]", "\n", "self", ".", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'state_dict'", "]", ")", "\n", "self", ".", "optimizer", ".", "load_state_dict", "(", "checkpoint", "[", "'optimizer'", "]", ")", "\n", "self", ".", "scaler", ".", "load_state_dict", "(", "checkpoint", "[", "'scaler'", "]", ")", "\n", "print", "(", "\"=> loaded checkpoint '{}' (epoch {})\"", ".", "format", "(", "self", ".", "args", ".", "resume", ",", "checkpoint", "[", "'epoch'", "]", ")", ")", "\n", "", "else", ":", "\n", "                ", "print", "(", "\"=> no checkpoint found at '{}'\"", ".", "format", "(", "self", ".", "args", ".", "resume", ")", ")", "\n", "\n", "", "", "last_epoch", "=", "-", "1", "if", "self", ".", "args", ".", "start_epoch", "==", "0", "else", "self", ".", "args", ".", "start_epoch", "\n", "self", ".", "scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "CosineAnnealingLR", "(", "self", ".", "optimizer", ",", "float", "(", "self", ".", "args", ".", "epochs", ")", ",", "eta_min", "=", "0", ",", "last_epoch", "=", "last_epoch", ")", "\n", "# reload the scheduler if possible", "\n", "if", "self", ".", "args", ".", "resume", "and", "os", ".", "path", ".", "isfile", "(", "self", ".", "args", ".", "resume", ")", ":", "\n", "            ", "checkpoint", "=", "torch", ".", "load", "(", "self", ".", "args", ".", "resume", ")", "\n", "self", ".", "scheduler", ".", "load_state_dict", "(", "checkpoint", "[", "'scheduler'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.train.TrainNetwork.run": [[230, 279], ["train.TrainNetwork.logger.info", "time.time", "range", "utils.calc_time", "train.TrainNetwork.logger.info", "train.TrainNetwork.logger.info", "train.TrainNetwork.train", "train.TrainNetwork.logger.info", "train.TrainNetwork.infer", "train.TrainNetwork.logger.info", "train.TrainNetwork.logger.info", "train.TrainNetwork.scheduler.step", "train.TrainNetwork.writer.close", "train.TrainNetwork.scheduler.get_lr", "train.TrainNetwork.writer.add_scalar", "train.TrainNetwork.writer.add_scalar", "train.TrainNetwork.writer.add_scalar", "train.TrainNetwork.writer.add_scalar", "utils.save_checkpoint", "time.time", "train.TrainNetwork.model.state_dict", "train.TrainNetwork.optimizer.state_dict", "train.TrainNetwork.scaler.state_dict", "train.TrainNetwork.scheduler.state_dict", "time.time"], "methods", ["home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.utils.calc_time", "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.train_search.train", "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.train_search.infer", "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.architect.Architect.step", "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.utils.save_checkpoint"], ["", "", "def", "run", "(", "self", ")", ":", "\n", "        ", "self", ".", "logger", ".", "info", "(", "'args = %s'", ",", "self", ".", "args", ")", "\n", "run_start", "=", "time", ".", "time", "(", ")", "\n", "for", "epoch", "in", "range", "(", "self", ".", "args", ".", "start_epoch", ",", "self", ".", "args", ".", "epochs", ")", ":", "\n", "            ", "lr", "=", "self", ".", "scheduler", ".", "get_lr", "(", ")", "[", "0", "]", "\n", "self", ".", "logger", ".", "info", "(", "'epoch % d / %d  lr %e'", ",", "epoch", ",", "self", ".", "args", ".", "epochs", ",", "lr", ")", "\n", "\n", "self", ".", "model", ".", "drop_path_prob", "=", "self", ".", "args", ".", "drop_path_prob", "*", "epoch", "/", "self", ".", "args", ".", "epochs", "\n", "\n", "train_acc", ",", "train_obj", "=", "self", ".", "train", "(", ")", "\n", "self", ".", "logger", ".", "info", "(", "'train loss %e, train acc %f'", ",", "train_obj", ",", "train_acc", ")", "\n", "\n", "valid_acc_top1", ",", "valid_acc_top5", ",", "valid_obj", "=", "self", ".", "infer", "(", ")", "\n", "self", ".", "logger", ".", "info", "(", "'valid loss %e, top1 valid acc %f top5 valid acc %f'", ",", "\n", "valid_obj", ",", "valid_acc_top1", ",", "valid_acc_top5", ")", "\n", "self", ".", "logger", ".", "info", "(", "'best valid acc %f'", ",", "self", ".", "best_acc_top1", ")", "\n", "\n", "self", ".", "scheduler", ".", "step", "(", ")", "\n", "\n", "is_best", "=", "False", "\n", "if", "valid_acc_top1", ">", "self", ".", "best_acc_top1", ":", "\n", "                ", "self", ".", "best_acc_top1", "=", "valid_acc_top1", "\n", "is_best", "=", "True", "\n", "\n", "", "if", "not", "self", ".", "args", ".", "no_log", ":", "\n", "                ", "self", ".", "writer", ".", "add_scalar", "(", "'lr'", ",", "lr", ",", "global_step", "=", "epoch", ")", "\n", "self", ".", "writer", ".", "add_scalar", "(", "'valid acc top1'", ",", "valid_acc_top1", ",", "global_step", "=", "epoch", ")", "\n", "self", ".", "writer", ".", "add_scalar", "(", "'valid acc top5'", ",", "valid_acc_top5", ",", "global_step", "=", "epoch", ")", "\n", "self", ".", "writer", ".", "add_scalar", "(", "'train acc top1'", ",", "train_acc", ",", "global_step", "=", "epoch", ")", "\n", "\n", "dutils", ".", "save_checkpoint", "(", "{", "\n", "'epoch'", ":", "epoch", "+", "1", ",", "\n", "'dur_time'", ":", "self", ".", "dur_time", "+", "time", ".", "time", "(", ")", "-", "run_start", ",", "\n", "'state_dict'", ":", "self", ".", "model", ".", "state_dict", "(", ")", ",", "\n", "'drop_path_prob'", ":", "self", ".", "args", ".", "drop_path_prob", ",", "\n", "'best_acc_top1'", ":", "self", ".", "best_acc_top1", ",", "\n", "'optimizer'", ":", "self", ".", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "'scaler'", ":", "self", ".", "scaler", ".", "state_dict", "(", ")", ",", "\n", "'scheduler'", ":", "self", ".", "scheduler", ".", "state_dict", "(", ")", "\n", "}", ",", "is_best", ",", "self", ".", "args", ".", "save", ")", "\n", "\n", "", "", "duration_time", "=", "dutils", ".", "calc_time", "(", "self", ".", "dur_time", "+", "time", ".", "time", "(", ")", "-", "run_start", ")", "\n", "self", ".", "logger", ".", "info", "(", "'train epoches %d, best_acc_top1 %f, dur_time %s'", ",", "\n", "self", ".", "args", ".", "epochs", ",", "self", ".", "best_acc_top1", ",", "duration_time", ")", "\n", "\n", "if", "not", "self", ".", "args", ".", "no_log", ":", "\n", "            ", "self", ".", "writer", ".", "close", "(", ")", "\n", "\n", "", "return", "{", "'type'", ":", "\"Eval\"", ",", "'val_acc'", ":", "self", ".", "best_acc_top1", ",", "\"model\"", ":", "self", ".", "args", ".", "genotype", ",", "\"dataset\"", ":", "self", ".", "args", ".", "dataset", ",", "\"duration_time\"", ":", "duration_time", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.train.TrainNetwork.train": [[280, 316], ["utils.AvgrageMeter", "utils.AvgrageMeter", "utils.AvgrageMeter", "train.TrainNetwork.model.train", "enumerate", "input.cuda.cuda.cuda", "target.cuda.cuda.cuda", "train.TrainNetwork.optimizer.zero_grad", "train.TrainNetwork.scaler.scale().backward", "train.TrainNetwork.scaler.unscale_", "torch.utils.clip_grad_norm_", "torch.utils.clip_grad_norm_", "torch.utils.clip_grad_norm_", "torch.utils.clip_grad_norm_", "train.TrainNetwork.scaler.step", "train.TrainNetwork.scaler.update", "utils.accuracy", "input.cuda.cuda.size", "utils.AvgrageMeter.update", "utils.AvgrageMeter.update", "utils.AvgrageMeter.update", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "train.TrainNetwork.model", "train.TrainNetwork.criterion_train", "train.TrainNetwork.model.parameters", "train.TrainNetwork.item", "prec1.item", "prec5.item", "train.TrainNetwork.logger.info", "train.TrainNetwork.criterion_train", "train.TrainNetwork.scaler.scale"], "methods", ["home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.train_search.train", "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.architect.Architect.step", "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.utils.AvgrageMeter.update", "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.utils.accuracy", "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.utils.AvgrageMeter.update", "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.utils.AvgrageMeter.update", "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.utils.AvgrageMeter.update"], ["", "def", "train", "(", "self", ")", ":", "\n", "        ", "objs", "=", "dutils", ".", "AvgrageMeter", "(", ")", "\n", "top1", "=", "dutils", ".", "AvgrageMeter", "(", ")", "\n", "top5", "=", "dutils", ".", "AvgrageMeter", "(", ")", "\n", "\n", "self", ".", "model", ".", "train", "(", ")", "\n", "\n", "for", "step", ",", "(", "input", ",", "target", ")", "in", "enumerate", "(", "self", ".", "train_queue", ")", ":", "\n", "            ", "input", "=", "input", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "target", "=", "target", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "\n", "self", ".", "optimizer", ".", "zero_grad", "(", "set_to_none", "=", "True", ")", "\n", "\n", "with", "torch", ".", "cuda", ".", "amp", ".", "autocast", "(", "enabled", "=", "self", ".", "args", ".", "amp", ")", ":", "\n", "                ", "logits", ",", "logits_aux", "=", "self", ".", "model", "(", "input", ")", "\n", "loss", "=", "self", ".", "criterion_train", "(", "logits", ",", "target", ")", "\n", "if", "self", ".", "args", ".", "auxiliary", ":", "\n", "                    ", "loss_aux", "=", "self", ".", "criterion_train", "(", "logits_aux", ",", "target", ")", "\n", "loss", "+=", "self", ".", "args", ".", "auxiliary_weight", "*", "loss_aux", "\n", "\n", "", "", "self", ".", "scaler", ".", "scale", "(", "loss", ")", ".", "backward", "(", ")", "\n", "self", ".", "scaler", ".", "unscale_", "(", "self", ".", "optimizer", ")", "\n", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "self", ".", "model", ".", "parameters", "(", ")", ",", "self", ".", "args", ".", "grad_clip", ")", "\n", "self", ".", "scaler", ".", "step", "(", "self", ".", "optimizer", ")", "\n", "self", ".", "scaler", ".", "update", "(", ")", "\n", "\n", "prec1", ",", "prec5", "=", "dutils", ".", "accuracy", "(", "logits", ",", "target", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "n", "=", "input", ".", "size", "(", "0", ")", "\n", "objs", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "n", ")", "\n", "top1", ".", "update", "(", "prec1", ".", "item", "(", ")", ",", "n", ")", "\n", "top5", ".", "update", "(", "prec5", ".", "item", "(", ")", ",", "n", ")", "\n", "\n", "if", "step", "%", "self", ".", "args", ".", "report_freq", "==", "0", ":", "\n", "                ", "self", ".", "logger", ".", "info", "(", "'train %03d %e %f %f'", ",", "step", ",", "objs", ".", "avg", ",", "top1", ".", "avg", ",", "top5", ".", "avg", ")", "\n", "\n", "", "", "return", "top1", ".", "avg", ",", "objs", ".", "avg", "\n", "\n"]], "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.train.TrainNetwork.infer": [[317, 340], ["utils.AvgrageMeter", "utils.AvgrageMeter", "utils.AvgrageMeter", "train.TrainNetwork.model.eval", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "enumerate", "input.cuda.cuda.cuda", "target.cuda.cuda.cuda", "utils.accuracy", "input.cuda.cuda.size", "utils.AvgrageMeter.update", "utils.AvgrageMeter.update", "utils.AvgrageMeter.update", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "train.TrainNetwork.model", "train.TrainNetwork.criterion", "train.TrainNetwork.item", "prec1.item", "prec5.item", "train.TrainNetwork.logger.info"], "methods", ["home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.utils.accuracy", "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.utils.AvgrageMeter.update", "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.utils.AvgrageMeter.update", "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.utils.AvgrageMeter.update"], ["", "def", "infer", "(", "self", ")", ":", "\n", "        ", "objs", "=", "dutils", ".", "AvgrageMeter", "(", ")", "\n", "top1", "=", "dutils", ".", "AvgrageMeter", "(", ")", "\n", "top5", "=", "dutils", ".", "AvgrageMeter", "(", ")", "\n", "self", ".", "model", ".", "eval", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "step", ",", "(", "input", ",", "target", ")", "in", "enumerate", "(", "self", ".", "valid_queue", ")", ":", "\n", "                ", "input", "=", "input", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "target", "=", "target", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "\n", "with", "torch", ".", "cuda", ".", "amp", ".", "autocast", "(", "enabled", "=", "self", ".", "args", ".", "amp", ")", ":", "\n", "                    ", "logits", ",", "_", "=", "self", ".", "model", "(", "input", ")", "\n", "loss", "=", "self", ".", "criterion", "(", "logits", ",", "target", ")", "\n", "\n", "", "prec1", ",", "prec5", "=", "dutils", ".", "accuracy", "(", "logits", ",", "target", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "n", "=", "input", ".", "size", "(", "0", ")", "\n", "objs", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "n", ")", "\n", "top1", ".", "update", "(", "prec1", ".", "item", "(", ")", ",", "n", ")", "\n", "top5", ".", "update", "(", "prec5", ".", "item", "(", ")", ",", "n", ")", "\n", "\n", "if", "step", "%", "self", ".", "args", ".", "report_freq", "==", "0", ":", "\n", "                    ", "self", ".", "logger", ".", "info", "(", "'valid %03d %e %f %f'", ",", "step", ",", "objs", ".", "avg", ",", "top1", ".", "avg", ",", "top5", ".", "avg", ")", "\n", "", "", "return", "top1", ".", "avg", ",", "top5", ".", "avg", ",", "objs", ".", "avg", "\n", "\n"]], "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.train_search.main": [[70, 248], ["utils.create_exp_dir", "logging.basicConfig", "logging.FileHandler", "logging.FileHandler.setFormatter", "logging.getLogger().addHandler", "torch.utils.tensorboard.SummaryWriter", "numpy.random.seed", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "logging.info", "logging.info", "time.time", "torch.cuda.amp.GradScaler", "torch.cuda.amp.GradScaler", "torch.cuda.amp.GradScaler", "torch.cuda.amp.GradScaler", "torch.cuda.amp.GradScaler", "torch.CrossEntropyLoss", "model_search.NetworkImageNet.cuda", "logging.info", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "utils._data_transforms_cifar", "len", "list", "int", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "architect.Architect", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "range", "torch.sigmoid().data.cpu().numpy", "torch.sigmoid().data.cpu().numpy", "torch.sigmoid().data.cpu().numpy", "torch.sigmoid().data.cpu().numpy", "torch.sigmoid().data.cpu().numpy", "numpy.save", "logging.info", "utils.parse_genotype", "utils.parse_genotype", "logging.info", "torch.utils.tensorboard.SummaryWriter.close", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "logging.info", "sys.exit", "os.path.join", "logging.Formatter", "logging.info", "separate_loss.ConvSeparateLoss", "separate_loss.TriSeparateLoss", "separate_loss.ConvAblationLoss", "model_search.NetworkCIFAR", "model_search.NetworkImageNet", "utils.count_parameters_in_MB", "model_search.NetworkImageNet.parameters", "torchvision.CIFAR10", "range", "numpy.floor", "os.path.isfile", "logging.info", "float", "os.path.isfile", "torch.optim.lr_scheduler.CosineAnnealingLR.load_state_dict", "logging.info", "train_search.train", "logging.info", "train_search.infer", "logging.info", "torch.optim.lr_scheduler.CosineAnnealingLR.step", "architect.Architect.update_cell_schedulers", "utils.save_checkpoint", "torch.utils.tensorboard.SummaryWriter.add_scalar", "torch.utils.tensorboard.SummaryWriter.add_scalar", "torch.utils.tensorboard.SummaryWriter.add_scalar", "torch.utils.tensorboard.SummaryWriter.add_scalar", "utils.calc_time", "logging.info", "os.path.join", "logging.getLogger", "torchvision.CIFAR100", "torch.utils.data.sampler.SubsetRandomSampler", "torch.utils.data.sampler.SubsetRandomSampler", "torch.utils.data.sampler.SubsetRandomSampler", "torch.utils.data.sampler.SubsetRandomSampler", "torch.utils.data.sampler.SubsetRandomSampler", "torch.utils.data.sampler.SubsetRandomSampler", "torch.utils.data.sampler.SubsetRandomSampler", "torch.utils.data.sampler.SubsetRandomSampler", "torch.utils.data.sampler.SubsetRandomSampler", "torch.utils.data.sampler.SubsetRandomSampler", "logging.info", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.optim.SGD.load_state_dict", "torch.cuda.amp.GradScaler.load_state_dict", "architect.Architect.set_optimizers_states", "model_search.NetworkImageNet.restore", "logging.info", "logging.info", "logging.info", "torch.optim.lr_scheduler.CosineAnnealingLR.get_last_lr", "utils.parse_genotype", "architecture_processing.hausdorff_metric", "torch.utils.tensorboard.SummaryWriter.add_scalar", "logging.info", "metrics.append", "torch.sigmoid().data.cpu", "torch.sigmoid().data.cpu", "torch.sigmoid().data.cpu", "torch.sigmoid().data.cpu", "torch.sigmoid().data.cpu", "os.path.join", "bool", "bool", "time.strftime", "utils._data_transforms_imagenet", "torchvision.ImageNet", "torch.optim.lr_scheduler.CosineAnnealingLR.state_dict", "torch.optim.SGD.state_dict", "torch.cuda.amp.GradScaler.state_dict", "architect.Architect.get_optimizers_states", "model_search.NetworkImageNet.states", "torch.sigmoid().data.cpu().numpy", "torch.sigmoid().data.cpu().numpy", "torch.sigmoid().data.cpu().numpy", "torch.sigmoid().data.cpu().numpy", "torch.sigmoid().data.cpu().numpy", "len", "logging.info", "time.time", "time.time", "torch.sigmoid().data.cpu", "torch.sigmoid().data.cpu", "torch.sigmoid().data.cpu", "torch.sigmoid().data.cpu", "torch.sigmoid().data.cpu", "abs", "abs", "abs", "abs", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "model_search.NetworkImageNet.arch_parameters", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "model_search.NetworkImageNet.arch_parameters"], "function", ["home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.utils.create_exp_dir", "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.utils._data_transforms_cifar", "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.utils.save", "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.utils.parse_genotype", "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.utils.parse_genotype", "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.utils.count_parameters_in_MB", "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.train_search.train", "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.train_search.infer", "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.architect.Architect.step", "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.architect.Architect.update_cell_schedulers", "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.utils.save_checkpoint", "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.utils.calc_time", "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.utils.load", "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.utils.load", "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.utils.load", "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.utils.load", "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.utils.load", "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.architect.Architect.set_optimizers_states", "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.model_search.NetworkImageNet.restore", "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.utils.parse_genotype", "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.architecture_processing.hausdorff_metric", "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.utils._data_transforms_imagenet", "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.architect.Architect.get_optimizers_states", "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.model_search.NetworkImageNet.states", "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.model_search.NetworkImageNet.arch_parameters", "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.model_search.NetworkImageNet.arch_parameters"], ["", "def", "main", "(", ")", ":", "\n", "  ", "if", "not", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "    ", "logging", ".", "info", "(", "'no gpu device available'", ")", "\n", "sys", ".", "exit", "(", "1", ")", "\n", "\n", "", "utils", ".", "create_exp_dir", "(", "args", ".", "save", ",", "scripts_to_save", "=", "None", ")", "\n", "\n", "log_format", "=", "'%(asctime)s %(message)s'", "\n", "logging", ".", "basicConfig", "(", "stream", "=", "sys", ".", "stdout", ",", "level", "=", "logging", ".", "INFO", ",", "\n", "format", "=", "log_format", ",", "datefmt", "=", "'%m/%d %I:%M:%S %p'", ")", "\n", "fh", "=", "logging", ".", "FileHandler", "(", "os", ".", "path", ".", "join", "(", "args", ".", "save", ",", "'log.txt'", ")", ")", "\n", "fh", ".", "setFormatter", "(", "logging", ".", "Formatter", "(", "log_format", ")", ")", "\n", "logging", ".", "getLogger", "(", ")", ".", "addHandler", "(", "fh", ")", "\n", "writer", "=", "SummaryWriter", "(", "f'./runs/search/search-{args.dataset}-{args.cell_loss}-abl{args.abl_loss_weight}-{time.strftime(\"%Y%m%d-%H%M%S\")}'", ")", "\n", "\n", "np", ".", "random", ".", "seed", "(", "args", ".", "seed", ")", "\n", "torch", ".", "cuda", ".", "set_device", "(", "args", ".", "gpus", "[", "0", "]", ")", "\n", "cudnn", ".", "benchmark", "=", "True", "\n", "torch", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "cudnn", ".", "enabled", "=", "True", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "logging", ".", "info", "(", "'gpu device = %d'", "%", "args", ".", "gpus", "[", "0", "]", ")", "\n", "logging", ".", "info", "(", "\"args = %s\"", ",", "args", ")", "\n", "run_start", "=", "time", ".", "time", "(", ")", "\n", "start_epoch", "=", "0", "\n", "dur_time", "=", "0", "\n", "\n", "if", "args", ".", "arch_baseline", ":", "\n", "    ", "logging", ".", "info", "(", "f\"Starting search from baseline {args.arch_baseline}\"", ")", "\n", "\n", "", "scaler", "=", "torch", ".", "cuda", ".", "amp", ".", "GradScaler", "(", "enabled", "=", "args", ".", "amp", ")", "\n", "\n", "if", "args", ".", "sep_loss", "==", "'l2'", ":", "\n", "    ", "criterion_train", "=", "ConvSeparateLoss", "(", "weight", "=", "args", ".", "aux_loss_weight", ")", "\n", "", "else", ":", "\n", "    ", "criterion_train", "=", "TriSeparateLoss", "(", "weight", "=", "args", ".", "aux_loss_weight", ")", "\n", "", "criterion_val", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "\n", "if", "args", ".", "cell_loss", "==", "\"ablation_loss\"", ":", "\n", "    ", "criterion_block", "=", "ConvAblationLoss", "(", "weight", "=", "args", ".", "aux_loss_weight", ",", "abl_weight", "=", "args", ".", "abl_loss_weight", ")", "\n", "", "else", ":", "\n", "    ", "criterion_block", "=", "criterion_train", "\n", "\n", "", "if", "'cifar'", "in", "args", ".", "dataset", ":", "\n", "    ", "model", "=", "NetworkCIFAR", "(", "args", ".", "init_channels", ",", "CLASSES", ",", "args", ".", "layers", ",", "criterion_train", ",", "criterion_block", ",", "args", ".", "arch_learning_rate", ",", "args", ".", "arch_weight_decay", ",", "\n", "steps", "=", "args", ".", "steps", ",", "multiplier", "=", "4", ",", "stem_multiplier", "=", "3", ",", "\n", "arch_baseline", "=", "args", ".", "arch_baseline", ",", "op_threshold", "=", "args", ".", "op_threshold", ",", "epochs", "=", "args", ".", "epochs", ")", "\n", "", "else", ":", "\n", "    ", "model", "=", "NetworkImageNet", "(", "args", ".", "init_channels", ",", "CLASSES", ",", "args", ".", "layers", ",", "criterion_train", ",", "criterion_block", ",", "args", ".", "arch_learning_rate", ",", "args", ".", "arch_weight_decay", ",", "\n", "steps", "=", "args", ".", "steps", ",", "multiplier", "=", "4", ",", "stem_multiplier", "=", "3", ",", "\n", "arch_baseline", "=", "args", ".", "arch_baseline", ",", "op_threshold", "=", "args", ".", "op_threshold", ",", "epochs", "=", "args", ".", "epochs", ")", "\n", "", "model", "=", "model", ".", "cuda", "(", ")", "\n", "logging", ".", "info", "(", "\"param size = %fMB\"", ",", "utils", ".", "count_parameters_in_MB", "(", "model", ")", ")", "\n", "\n", "model_optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "\n", "model", ".", "parameters", "(", ")", ",", "\n", "args", ".", "learning_rate", ",", "\n", "momentum", "=", "args", ".", "momentum", ",", "\n", "weight_decay", "=", "args", ".", "weight_decay", ")", "\n", "\n", "arch_optimizer", "=", "None", "\n", "\n", "train_transform", ",", "valid_transform", "=", "utils", ".", "_data_transforms_cifar", "(", "args", ")", "\n", "if", "args", ".", "dataset", "==", "\"cifar10\"", ":", "\n", "    ", "train_data", "=", "dset", ".", "CIFAR10", "(", "root", "=", "args", ".", "data", ",", "train", "=", "True", ",", "download", "=", "True", ",", "transform", "=", "train_transform", ")", "\n", "", "elif", "args", ".", "dataset", "==", "\"cifar100\"", ":", "\n", "    ", "train_data", "=", "dset", ".", "CIFAR100", "(", "root", "=", "args", ".", "data", ",", "train", "=", "True", ",", "download", "=", "True", ",", "transform", "=", "train_transform", ")", "\n", "", "elif", "args", ".", "dataset", "==", "\"imagenet\"", ":", "\n", "    ", "train_transform", ",", "valid_transform", "=", "utils", ".", "_data_transforms_imagenet", "(", "args", ")", "\n", "train_data", "=", "dset", ".", "ImageNet", "(", "root", "=", "args", ".", "data", ",", "train", "=", "True", ",", "download", "=", "True", ",", "transform", "=", "train_transform", ")", "\n", "", "else", ":", "\n", "    ", "raise", "(", "\"Unsupported dataset\"", ")", "\n", "\n", "", "num_train", "=", "len", "(", "train_data", ")", "\n", "indices", "=", "list", "(", "range", "(", "num_train", ")", ")", "\n", "split", "=", "int", "(", "np", ".", "floor", "(", "args", ".", "train_portion", "*", "num_train", ")", ")", "\n", "\n", "train_queue", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "train_data", ",", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "sampler", "=", "torch", ".", "utils", ".", "data", ".", "sampler", ".", "SubsetRandomSampler", "(", "indices", "[", ":", "split", "]", ")", ",", "\n", "pin_memory", "=", "True", ",", "num_workers", "=", "4", ")", "\n", "\n", "valid_queue", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "train_data", ",", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "sampler", "=", "torch", ".", "utils", ".", "data", ".", "sampler", ".", "SubsetRandomSampler", "(", "indices", "[", "split", ":", "num_train", "]", ")", ",", "\n", "pin_memory", "=", "True", ",", "num_workers", "=", "4", ")", "\n", "\n", "architect", "=", "Architect", "(", "model", ",", "args", ")", "\n", "\n", "metrics", "=", "[", "]", "\n", "\n", "# resume from checkpoint", "\n", "if", "args", ".", "resume", ":", "\n", "    ", "if", "os", ".", "path", ".", "isfile", "(", "args", ".", "resume", ")", ":", "\n", "      ", "logging", ".", "info", "(", "\"=> loading checkpoint '{}'\"", ".", "format", "(", "args", ".", "resume", ")", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "args", ".", "resume", ")", "\n", "start_epoch", "=", "checkpoint", "[", "'epoch'", "]", "\n", "dur_time", "=", "checkpoint", "[", "'dur_time'", "]", "\n", "model_optimizer", ".", "load_state_dict", "(", "checkpoint", "[", "'model_optimizer'", "]", ")", "\n", "scaler", ".", "load_state_dict", "(", "checkpoint", "[", "'model_scaler'", "]", ")", "\n", "architect", ".", "set_optimizers_states", "(", "checkpoint", "[", "'arch_optimizers'", "]", ")", "\n", "model", ".", "restore", "(", "checkpoint", "[", "'network_states'", "]", ")", "\n", "logging", ".", "info", "(", "'=> loaded checkpoint \\'{}\\'(epoch {})'", ".", "format", "(", "args", ".", "resume", ",", "start_epoch", ")", ")", "\n", "", "else", ":", "\n", "      ", "logging", ".", "info", "(", "'=> no checkpoint found at \\'{}\\''", ".", "format", "(", "args", ".", "resume", ")", ")", "\n", "\n", "", "", "search", "=", "True", "\n", "if", "args", ".", "arch_baseline", ":", "\n", "    ", "args", ".", "epochs", "+=", "args", ".", "pretrain_epochs", "\n", "logging", ".", "info", "(", "f\"Pretraining baseline architecture for {args.pretrain_epochs} epochs...\"", ")", "\n", "search", "=", "False", "\n", "\n", "", "scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "CosineAnnealingLR", "(", "\n", "model_optimizer", ",", "float", "(", "args", ".", "epochs", ")", ",", "eta_min", "=", "args", ".", "learning_rate_min", ",", "last_epoch", "=", "-", "1", "if", "start_epoch", "==", "0", "else", "start_epoch", ")", "\n", "if", "args", ".", "resume", "and", "os", ".", "path", ".", "isfile", "(", "args", ".", "resume", ")", ":", "\n", "    ", "scheduler", ".", "load_state_dict", "(", "checkpoint", "[", "'scheduler'", "]", ")", "\n", "\n", "", "for", "epoch", "in", "range", "(", "start_epoch", ",", "args", ".", "epochs", ")", ":", "\n", "    ", "if", "epoch", "==", "args", ".", "pretrain_epochs", "and", "args", ".", "arch_baseline", ":", "\n", "      ", "logging", ".", "info", "(", "f\"Pretraining done.\"", ")", "\n", "search", "=", "True", "\n", "\n", "", "lr", "=", "scheduler", ".", "get_last_lr", "(", ")", "[", "0", "]", "\n", "logging", ".", "info", "(", "'epoch %d lr %e'", ",", "epoch", ",", "lr", ")", "\n", "\n", "# training and search the model", "\n", "train_acc", ",", "train_obj", "=", "train", "(", "train_queue", ",", "valid_queue", ",", "model", ",", "architect", ",", "criterion_train", ",", "model_optimizer", ",", "arch_optimizer", ",", "scaler", ",", "args", ".", "amp", ",", "search", "=", "search", ")", "\n", "logging", ".", "info", "(", "'train_acc %f'", ",", "train_acc", ")", "\n", "\n", "# validation the model", "\n", "valid_acc", ",", "valid_obj", "=", "infer", "(", "valid_queue", ",", "model", ",", "criterion_val", ")", "\n", "logging", ".", "info", "(", "'valid_acc %f'", ",", "valid_acc", ")", "\n", "\n", "scheduler", ".", "step", "(", ")", "\n", "architect", ".", "update_cell_schedulers", "(", ")", "\n", "\n", "# save checkpoint", "\n", "utils", ".", "save_checkpoint", "(", "{", "\n", "'epoch'", ":", "epoch", "+", "1", ",", "\n", "'dur_time'", ":", "dur_time", "+", "time", ".", "time", "(", ")", "-", "run_start", ",", "\n", "'scheduler'", ":", "scheduler", ".", "state_dict", "(", ")", ",", "\n", "'model_optimizer'", ":", "model_optimizer", ".", "state_dict", "(", ")", ",", "\n", "'model_scaler'", ":", "scaler", ".", "state_dict", "(", ")", ",", "\n", "'arch_optimizers'", ":", "architect", ".", "get_optimizers_states", "(", ")", ",", "\n", "'network_states'", ":", "model", ".", "states", "(", ")", ",", "\n", "}", ",", "is_best", "=", "False", ",", "save", "=", "args", ".", "save", ")", "\n", "\n", "if", "model", ".", "arch_baseline", "and", "not", "args", ".", "no_arch_metric", "and", "epoch", ">=", "args", ".", "pretrain_epochs", "+", "5", ":", "\n", "      ", "current_arch", "=", "utils", ".", "parse_genotype", "(", "torch", ".", "sigmoid", "(", "model", ".", "arch_parameters", "(", ")", ")", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "model", ".", "_steps", ",", "model", ".", "_multiplier", ",", "parse_method", "=", "\"threshold_edge\"", ",", "dartopti", "=", "True", ")", "\n", "metric", "=", "hausdorff_metric", "(", "model", ".", "arch_baseline", ",", "current_arch", ")", "\n", "writer", ".", "add_scalar", "(", "'distance_metric'", ",", "metric", ",", "global_step", "=", "epoch", ")", "\n", "logging", ".", "info", "(", "f'architectural distance metric with baseline: {metric}'", ")", "\n", "if", "len", "(", "metrics", ")", ">=", "4", ":", "\n", "        ", "if", "abs", "(", "metric", "-", "metrics", "[", "-", "1", "]", ")", "<=", "0.001", "and", "abs", "(", "metric", "-", "metrics", "[", "-", "2", "]", ")", "<=", "0.001", "and", "abs", "(", "metric", "-", "metrics", "[", "-", "3", "]", ")", "<=", "0.001", "and", "abs", "(", "metric", "-", "metrics", "[", "-", "4", "]", ")", "<=", "0.001", ":", "\n", "          ", "logging", ".", "info", "(", "'Architectural metric has not changed for the last 4 epochs. Stopping search process now.'", ")", "\n", "break", "\n", "", "", "metrics", ".", "append", "(", "metric", ")", "\n", "\n", "\n", "", "writer", ".", "add_scalar", "(", "'train_acc'", ",", "train_acc", ",", "global_step", "=", "epoch", ")", "\n", "writer", ".", "add_scalar", "(", "'valid_acc'", ",", "valid_acc", ",", "global_step", "=", "epoch", ")", "\n", "writer", ".", "add_scalar", "(", "'lr'", ",", "lr", ",", "global_step", "=", "epoch", ")", "\n", "writer", ".", "add_scalar", "(", "'global loss'", ",", "train_obj", ",", "global_step", "=", "epoch", ")", "\n", "\n", "duration_time", "=", "utils", ".", "calc_time", "(", "dur_time", "+", "time", ".", "time", "(", ")", "-", "run_start", ")", "\n", "\n", "logging", ".", "info", "(", "'save checkpoint (epoch %d) in %s  dur_time: %s'", ",", "epoch", ",", "args", ".", "save", ",", "duration_time", ")", "\n", "\n", "# save last operations", "\n", "", "prob_dist", "=", "torch", ".", "sigmoid", "(", "model", ".", "arch_parameters", "(", "to_parse", "=", "True", ")", ")", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "np", ".", "save", "(", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "join", "(", "args", ".", "save", ",", "'arch_weight.npy'", ")", ")", ",", "prob_dist", ")", "\n", "logging", ".", "info", "(", "'save last weights done'", ")", "\n", "model_name", "=", "f\"{args.arch_baseline}_{args.dataset}\"", "if", "args", ".", "arch_baseline", "else", "f\"{args.dataset}\"", "\n", "utils", ".", "parse_genotype", "(", "prob_dist", ",", "model", ".", "_steps", ",", "model", ".", "_multiplier", ",", "path", "=", "'genotypes/'", ",", "parse_method", "=", "'threshold_sparse'", ",", "reductions", "=", "model", ".", "reduction_indexes", ",", "model_name", "=", "model_name", ",", "dartopti", "=", "bool", "(", "model", ".", "arch_baseline", ")", ")", "\n", "utils", ".", "parse_genotype", "(", "prob_dist", ",", "model", ".", "_steps", ",", "model", ".", "_multiplier", ",", "path", "=", "'genotypes/'", ",", "parse_method", "=", "'threshold_edge'", ",", "reductions", "=", "model", ".", "reduction_indexes", ",", "model_name", "=", "model_name", ",", "dartopti", "=", "bool", "(", "model", ".", "arch_baseline", ")", ")", "\n", "logging", ".", "info", "(", "'save genotypes done'", ")", "\n", "writer", ".", "close", "(", ")", "\n", "return", "{", "'type'", ":", "\"Search\"", ",", "'val_acc'", ":", "valid_acc", ",", "\"arch_baseline\"", ":", "args", ".", "arch_baseline", ",", "\"dataset\"", ":", "args", ".", "dataset", ",", "\"duration_time\"", ":", "duration_time", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.train_search.train": [[250, 317], ["utils.AvgrageMeter", "utils.AvgrageMeter", "utils.AvgrageMeter", "utils.AvgrageMeter", "utils.AvgrageMeter", "model.train", "enumerate", "input.cuda.size", "input.cuda.cuda", "target.cuda.cuda", "scaler.scale().backward", "scaler.unscale_", "torch.utils.clip_grad_norm_", "scaler.step", "scaler.update", "model_optimizer.zero_grad", "utils.accuracy", "utils.AvgrageMeter.update", "utils.AvgrageMeter.update", "utils.AvgrageMeter.update", "next", "input_search.cuda.cuda", "target_search.cuda.cuda", "architect.step", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "model", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "model.parameters", "arch_optimizer.step", "arch_optimizer.zero_grad", "loss.detach().item", "utils.AvgrageMeter.update", "utils.AvgrageMeter.update", "prec1.item", "prec5.item", "logging.info", "iter", "model.arch_parameters", "criterion", "criterion", "scaler.scale", "logging.info", "logging.info", "loss.detach"], "function", ["home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.train_search.train", "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.architect.Architect.step", "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.utils.AvgrageMeter.update", "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.utils.accuracy", "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.utils.AvgrageMeter.update", "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.utils.AvgrageMeter.update", "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.utils.AvgrageMeter.update", "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.architect.Architect.step", "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.architect.Architect.step", "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.utils.AvgrageMeter.update", "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.utils.AvgrageMeter.update", "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.model_search.NetworkImageNet.arch_parameters"], ["", "def", "train", "(", "train_queue", ",", "valid_queue", ",", "model", ",", "architect", ",", "criterion", ",", "model_optimizer", ",", "arch_optimizer", ",", "scaler", ",", "use_amp", "=", "True", ",", "search", "=", "True", ")", ":", "\n", "  ", "objs", "=", "utils", ".", "AvgrageMeter", "(", ")", "\n", "objs1", "=", "utils", ".", "AvgrageMeter", "(", ")", "\n", "objs2", "=", "utils", ".", "AvgrageMeter", "(", ")", "\n", "#objs3 = utils.AvgrageMeter()", "\n", "top1", "=", "utils", ".", "AvgrageMeter", "(", ")", "\n", "top5", "=", "utils", ".", "AvgrageMeter", "(", ")", "\n", "\n", "model", ".", "train", "(", ")", "\n", "\n", "for", "step", ",", "(", "input", ",", "target", ")", "in", "enumerate", "(", "train_queue", ")", ":", "\n", "    ", "n", "=", "input", ".", "size", "(", "0", ")", "\n", "input", "=", "input", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "target", "=", "target", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "\n", "list_loss3", "=", "[", "]", "\n", "# Get a random minibatch from the search queue(validation set) with replacement", "\n", "# TODO: next is too slow", "\n", "if", "not", "args", ".", "single_level", "and", "search", ":", "\n", "      ", "input_search", ",", "target_search", "=", "next", "(", "iter", "(", "valid_queue", ")", ")", "\n", "input_search", "=", "input_search", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "target_search", "=", "target_search", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "# Bi-level default", "\n", "loss1", ",", "loss2", ",", "list_loss3", "=", "architect", ".", "step", "(", "input_search", ",", "target_search", ",", "scaler", ")", "\n", "\n", "", "with", "torch", ".", "cuda", ".", "amp", ".", "autocast", "(", "enabled", "=", "use_amp", ")", ":", "\n", "      ", "logits", "=", "model", "(", "input", ")", "\n", "aux_input", "=", "torch", ".", "sigmoid", "(", "model", ".", "arch_parameters", "(", ")", ")", "\n", "if", "not", "args", ".", "single_level", ":", "\n", "        ", "loss", ",", "_", ",", "_", "=", "criterion", "(", "logits", ",", "target", ",", "aux_input", ",", "cell_mc", "=", "None", ",", "mean_mc", "=", "None", ")", "\n", "", "else", ":", "\n", "        ", "loss", ",", "loss1", ",", "loss2", "=", "criterion", "(", "logits", ",", "target", ",", "aux_input", ",", "cell_mc", "=", "None", ",", "mean_mc", "=", "None", ")", "\n", "\n", "", "", "scaler", ".", "scale", "(", "loss", ")", ".", "backward", "(", ")", "\n", "scaler", ".", "unscale_", "(", "model_optimizer", ")", "\n", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "model", ".", "parameters", "(", ")", ",", "args", ".", "grad_clip", ")", "\n", "\n", "# Update the network parameters", "\n", "scaler", ".", "step", "(", "model_optimizer", ")", "\n", "\n", "## if single level", "\n", "if", "args", ".", "single_level", ":", "\n", "      ", "arch_optimizer", ".", "step", "(", ")", "\n", "\n", "", "scaler", ".", "update", "(", ")", "\n", "\n", "model_optimizer", ".", "zero_grad", "(", "set_to_none", "=", "True", ")", "\n", "\n", "## if single-level", "\n", "if", "args", ".", "single_level", ":", "\n", "      ", "arch_optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "", "prec1", ",", "prec5", "=", "utils", ".", "accuracy", "(", "logits", ",", "target", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "objs", ".", "update", "(", "loss", ".", "detach", "(", ")", ".", "item", "(", ")", ",", "n", ")", "\n", "if", "search", ":", "\n", "      ", "objs1", ".", "update", "(", "loss1", ",", "n", ")", "\n", "objs2", ".", "update", "(", "loss2", ",", "n", ")", "\n", "", "top1", ".", "update", "(", "prec1", ".", "item", "(", ")", ",", "n", ")", "\n", "top5", ".", "update", "(", "prec5", ".", "item", "(", ")", ",", "n", ")", "\n", "\n", "if", "step", "%", "args", ".", "report_freq", "==", "0", ":", "\n", "      ", "logging", ".", "info", "(", "'train %03d loss: %e top1: %f top5: %f'", ",", "step", ",", "objs", ".", "avg", ",", "top1", ".", "avg", ",", "top5", ".", "avg", ")", "\n", "if", "search", ":", "\n", "        ", "logging", ".", "info", "(", "'val cls_loss %e; spe_loss %e'", ",", "objs1", ".", "avg", ",", "objs2", ".", "avg", ")", "\n", "logging", ".", "info", "(", "f'ablation_loss_list: {list_loss3}'", ")", "\n", "\n", "", "", "", "return", "top1", ".", "avg", ",", "objs", ".", "avg", "\n", "\n"]], "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.train_search.infer": [[319, 345], ["utils.AvgrageMeter", "utils.AvgrageMeter", "utils.AvgrageMeter", "model.eval", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "enumerate", "input.cuda.cuda", "target.cuda.cuda", "utils.accuracy", "input.cuda.size", "utils.AvgrageMeter.update", "utils.AvgrageMeter.update", "utils.AvgrageMeter.update", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "model", "criterion", "criterion.item", "prec1.item", "prec5.item", "logging.info"], "function", ["home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.utils.accuracy", "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.utils.AvgrageMeter.update", "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.utils.AvgrageMeter.update", "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.utils.AvgrageMeter.update"], ["", "def", "infer", "(", "valid_queue", ",", "model", ",", "criterion", ",", "use_amp", "=", "True", ")", ":", "\n", "  ", "objs", "=", "utils", ".", "AvgrageMeter", "(", ")", "\n", "top1", "=", "utils", ".", "AvgrageMeter", "(", ")", "\n", "top5", "=", "utils", ".", "AvgrageMeter", "(", ")", "\n", "\n", "model", ".", "eval", "(", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "    ", "for", "step", ",", "(", "input", ",", "target", ")", "in", "enumerate", "(", "valid_queue", ")", ":", "\n", "      ", "input", "=", "input", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "target", "=", "target", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "\n", "with", "torch", ".", "cuda", ".", "amp", ".", "autocast", "(", "enabled", "=", "use_amp", ")", ":", "\n", "        ", "logits", "=", "model", "(", "input", ")", "\n", "loss", "=", "criterion", "(", "logits", ",", "target", ")", "\n", "\n", "", "prec1", ",", "prec5", "=", "utils", ".", "accuracy", "(", "logits", ",", "target", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "n", "=", "input", ".", "size", "(", "0", ")", "\n", "objs", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "n", ")", "\n", "top1", ".", "update", "(", "prec1", ".", "item", "(", ")", ",", "n", ")", "\n", "top5", ".", "update", "(", "prec5", ".", "item", "(", ")", ",", "n", ")", "\n", "\n", "if", "step", "%", "args", ".", "report_freq", "==", "0", ":", "\n", "        ", "logging", ".", "info", "(", "'valid %03d %e %f %f'", ",", "step", ",", "objs", ".", "avg", ",", "top1", ".", "avg", ",", "top5", ".", "avg", ")", "\n", "\n", "", "", "return", "top1", ".", "avg", ",", "objs", ".", "avg", "\n", "\n"]], "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.architect.Architect.__init__": [[12, 23], ["None"], "methods", ["None"], ["  ", "def", "__init__", "(", "self", ",", "model", ",", "args", ")", ":", "\n", "\n", "    ", "self", ".", "network_momentum", "=", "args", ".", "momentum", "\n", "self", ".", "network_weight_decay", "=", "args", ".", "weight_decay", "\n", "self", ".", "model", "=", "model", "\n", "self", ".", "hessian", "=", "None", "\n", "self", ".", "grads", "=", "None", "\n", "self", ".", "use_amp", "=", "args", ".", "amp", "\n", "self", ".", "use_mc", "=", "(", "args", ".", "cell_loss", "==", "\"ablation_loss\"", ")", "\n", "self", ".", "report_freq", "=", "args", ".", "report_freq", "\n", "self", ".", "step_cnt", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.architect.Architect.step": [[25, 53], ["enumerate", "architect.Architect.compute_marginal_contributions", "numpy.mean", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "architect.Architect.model", "numpy.mean", "scaler.scale().backward", "scaler.step", "c.optimizer.zero_grad", "list_loss2.append", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "isinstance", "c.loss", "list_loss3.append", "c.loss", "len", "scaler.scale", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid"], "methods", ["home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.architect.Architect.compute_marginal_contributions", "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.architect.Architect.step", "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.model_search.Cell.loss", "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.model_search.Cell.loss"], ["", "def", "step", "(", "self", ",", "input_valid", ",", "target_valid", ",", "scaler", ")", ":", "\n", "    ", "list_loss2", "=", "[", "]", "\n", "list_loss3", "=", "[", "]", "\n", "if", "self", ".", "use_mc", ":", "\n", "      ", "mc", "=", "self", ".", "compute_marginal_contributions", "(", "input_valid", ",", "target_valid", ")", "\n", "mean_mc", "=", "np", ".", "mean", "(", "mc", ")", "\n", "", "else", ":", "\n", "      ", "mean_mc", "=", "0", "\n", "", "with", "torch", ".", "cuda", ".", "amp", ".", "autocast", "(", "enabled", "=", "self", ".", "use_amp", ")", ":", "\n", "      ", "logits", "=", "self", ".", "model", "(", "input_valid", ")", "\n", "", "count", "=", "0", "\n", "for", "i", ",", "c", "in", "enumerate", "(", "self", ".", "model", ".", "cells", ")", ":", "\n", "      ", "if", "c", ".", "criterion", ":", "\n", "        ", "with", "torch", ".", "cuda", ".", "amp", ".", "autocast", "(", "enabled", "=", "self", ".", "use_amp", ")", ":", "\n", "          ", "if", "isinstance", "(", "c", ".", "criterion", ",", "ConvAblationLoss", ")", ":", "\n", "            ", "cell_mc", "=", "mc", "[", "count", "]", "\n", "loss", ",", "loss1", ",", "loss2", ",", "loss3", "=", "c", ".", "loss", "(", "target_valid", ",", "torch", ".", "sigmoid", "(", "c", ".", "alphas", ")", ",", "logits", ",", "cell_mc", ",", "mean_mc", ")", "\n", "list_loss3", ".", "append", "(", "loss3", ")", "\n", "", "else", ":", "\n", "            ", "loss", ",", "loss1", ",", "loss2", "=", "c", ".", "loss", "(", "target_valid", ",", "torch", ".", "sigmoid", "(", "c", ".", "alphas", ")", ",", "logits", ",", "c", ",", "mean_mc", ")", "\n", "", "", "retain_graph", "=", "True", "if", "count", "<", "len", "(", "mc", ")", "else", "False", "\n", "scaler", ".", "scale", "(", "loss", ")", ".", "backward", "(", "retain_graph", "=", "retain_graph", ")", "\n", "scaler", ".", "step", "(", "c", ".", "optimizer", ")", "\n", "c", ".", "optimizer", ".", "zero_grad", "(", "set_to_none", "=", "True", ")", "\n", "list_loss2", ".", "append", "(", "loss2", ")", "\n", "count", "+=", "1", "\n", "", "", "self", ".", "step_cnt", "+=", "1", "\n", "return", "loss1", ",", "np", ".", "mean", "(", "list_loss2", ")", ",", "list_loss3", "\n", "\n"]], "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.architect.Architect.get_optimizers_states": [[54, 60], ["state_dicts.append", "c.optimizer.state_dict"], "methods", ["None"], ["", "def", "get_optimizers_states", "(", "self", ")", ":", "\n", "    ", "state_dicts", "=", "[", "]", "\n", "for", "c", "in", "self", ".", "model", ".", "cells", ":", "\n", "      ", "if", "c", ".", "criterion", ":", "\n", "        ", "state_dicts", ".", "append", "(", "c", ".", "optimizer", ".", "state_dict", "(", ")", ")", "\n", "", "", "return", "state_dicts", "\n", "\n"]], "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.architect.Architect.set_optimizers_states": [[61, 65], ["enumerate", "c.optimizer.load_state_dict"], "methods", ["None"], ["", "def", "set_optimizers_states", "(", "self", ",", "state_dicts", ")", ":", "\n", "    ", "for", "i", ",", "c", "in", "enumerate", "(", "self", ".", "model", ".", "cells", ")", ":", "\n", "      ", "if", "c", ".", "criterion", ":", "\n", "        ", "c", ".", "optimizer", ".", "load_state_dict", "(", "state_dicts", "[", "i", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.architect.Architect.update_cell_schedulers": [[66, 70], ["c.scheduler.step"], "methods", ["home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.architect.Architect.step"], ["", "", "", "def", "update_cell_schedulers", "(", "self", ")", ":", "\n", "    ", "for", "c", "in", "self", ".", "model", ".", "cells", ":", "\n", "      ", "if", "c", ".", "criterion", ":", "\n", "        ", "c", ".", "scheduler", ".", "step", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.architect.Architect.zero_grads": [[71, 76], ["p.grad.detach_", "p.grad.zero_"], "methods", ["None"], ["", "", "", "def", "zero_grads", "(", "self", ",", "parameters", ")", ":", "\n", "    ", "for", "p", "in", "parameters", ":", "\n", "        ", "if", "p", ".", "grad", "is", "not", "None", ":", "\n", "            ", "p", ".", "grad", ".", "detach_", "(", ")", "\n", "p", ".", "grad", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.architect.Architect.compute_marginal_contributions": [[77, 93], ["torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "architect.Architect.model", "torch.cross_entropy().cpu().detach().item", "torch.cross_entropy().cpu().detach().item", "torch.cross_entropy().cpu().detach", "torch.cross_entropy().cpu().detach", "architect.Architect.model", "torch.cross_entropy().cpu().detach().item", "torch.cross_entropy().cpu().detach().item", "mc.append", "torch.cross_entropy().cpu", "torch.cross_entropy().cpu", "torch.cross_entropy().cpu().detach", "torch.cross_entropy().cpu().detach", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy().cpu", "torch.cross_entropy().cpu", "torch.cross_entropy", "torch.cross_entropy"], "methods", ["None"], ["", "", "", "def", "compute_marginal_contributions", "(", "self", ",", "input", ",", "target", ")", ":", "\n", "      ", "\"\"\"\n      Compute the marginal contribution of each cell in regard to all the other cells.\n      \"\"\"", "\n", "with", "torch", ".", "cuda", ".", "amp", ".", "autocast", "(", "enabled", "=", "self", ".", "use_amp", ")", ":", "\n", "        ", "mc", "=", "[", "]", "\n", "logits", "=", "self", ".", "model", "(", "input", ")", "\n", "v_cell", "=", "F", ".", "cross_entropy", "(", "logits", ",", "target", ")", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "item", "(", ")", "\n", "for", "cell", "in", "self", ".", "model", ".", "cells", ":", "\n", "          ", "if", "cell", ".", "criterion", ":", "\n", "            ", "cell", ".", "activated", "=", "False", "\n", "logits", "=", "self", ".", "model", "(", "input", ")", "\n", "v_no_cell", "=", "F", ".", "cross_entropy", "(", "logits", ",", "target", ")", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "item", "(", ")", "\n", "cell", ".", "activated", "=", "True", "\n", "mc", ".", "append", "(", "v_cell", "-", "v_no_cell", ")", "\n", "", "", "return", "mc", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.architect._concat": [[8, 10], ["torch.cat", "torch.cat", "x.view"], "function", ["None"], ["def", "_concat", "(", "xs", ")", ":", "\n", "  ", "return", "torch", ".", "cat", "(", "[", "x", ".", "view", "(", "-", "1", ")", "for", "x", "in", "xs", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.model.Cell.__init__": [[7, 23], ["torch.Module.__init__", "operations.ReLUConvBN", "model.Cell._compile", "operations.FactorizedReduce", "operations.ReLUConvBN", "zip", "zip"], "methods", ["home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.graph_distance.GraphDistance.__init__", "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.model.DCOCell._compile"], ["  ", "def", "__init__", "(", "self", ",", "genotype", ",", "gene_index", ",", "C_prev_prev", ",", "C_prev", ",", "C", ",", "reduction", ",", "reduction_prev", ")", ":", "\n", "    ", "super", "(", "Cell", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "if", "reduction_prev", ":", "\n", "      ", "self", ".", "preprocess0", "=", "FactorizedReduce", "(", "C_prev_prev", ",", "C", ")", "\n", "", "else", ":", "\n", "      ", "self", ".", "preprocess0", "=", "ReLUConvBN", "(", "C_prev_prev", ",", "C", ",", "1", ",", "1", ",", "0", ")", "\n", "", "self", ".", "preprocess1", "=", "ReLUConvBN", "(", "C_prev", ",", "C", ",", "1", ",", "1", ",", "0", ")", "\n", "\n", "if", "reduction", ":", "\n", "      ", "op_names", ",", "indices", "=", "zip", "(", "*", "genotype", ".", "genes", "[", "gene_index", "]", ")", "\n", "concat", "=", "genotype", ".", "concat", "\n", "", "else", ":", "\n", "      ", "op_names", ",", "indices", "=", "zip", "(", "*", "genotype", ".", "genes", "[", "gene_index", "]", ")", "\n", "concat", "=", "genotype", ".", "concat", "\n", "", "self", ".", "_compile", "(", "C", ",", "op_names", ",", "indices", ",", "concat", ",", "reduction", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.model.Cell._compile": [[24, 36], ["len", "torch.ModuleList", "torch.ModuleList", "zip", "len", "len", "len"], "methods", ["None"], ["", "def", "_compile", "(", "self", ",", "C", ",", "op_names", ",", "indices", ",", "concat", ",", "reduction", ")", ":", "\n", "    ", "assert", "len", "(", "op_names", ")", "==", "len", "(", "indices", ")", "\n", "self", ".", "_steps", "=", "len", "(", "op_names", ")", "//", "2", "\n", "self", ".", "_concat", "=", "concat", "\n", "self", ".", "multiplier", "=", "len", "(", "concat", ")", "\n", "\n", "self", ".", "_ops", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "name", ",", "index", "in", "zip", "(", "op_names", ",", "indices", ")", ":", "\n", "      ", "stride", "=", "2", "if", "reduction", "and", "index", "<", "2", "else", "1", "\n", "op", "=", "OPS", "[", "name", "]", "(", "C", ",", "stride", ",", "True", ")", "\n", "self", ".", "_ops", "+=", "[", "op", "]", "\n", "", "self", ".", "_indices", "=", "indices", "\n", "\n"]], "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.model.Cell.forward": [[37, 57], ["model.Cell.preprocess0", "model.Cell.preprocess1", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "op1", "op2", "isinstance", "utils.drop_path", "isinstance", "utils.drop_path"], "methods", ["home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.utils.drop_path", "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.utils.drop_path"], ["", "def", "forward", "(", "self", ",", "s0", ",", "s1", ",", "drop_prob", ")", ":", "\n", "    ", "s0", "=", "self", ".", "preprocess0", "(", "s0", ")", "\n", "s1", "=", "self", ".", "preprocess1", "(", "s1", ")", "\n", "\n", "states", "=", "[", "s0", ",", "s1", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "_steps", ")", ":", "\n", "      ", "h1", "=", "states", "[", "self", ".", "_indices", "[", "2", "*", "i", "]", "]", "\n", "h2", "=", "states", "[", "self", ".", "_indices", "[", "2", "*", "i", "+", "1", "]", "]", "\n", "op1", "=", "self", ".", "_ops", "[", "2", "*", "i", "]", "\n", "op2", "=", "self", ".", "_ops", "[", "2", "*", "i", "+", "1", "]", "\n", "h1", "=", "op1", "(", "h1", ")", "\n", "h2", "=", "op2", "(", "h2", ")", "\n", "if", "self", ".", "training", "and", "drop_prob", ">", "0.", ":", "\n", "        ", "if", "not", "isinstance", "(", "op1", ",", "Identity", ")", ":", "\n", "          ", "h1", "=", "drop_path", "(", "h1", ",", "drop_prob", ")", "\n", "", "if", "not", "isinstance", "(", "op2", ",", "Identity", ")", ":", "\n", "          ", "h2", "=", "drop_path", "(", "h2", ",", "drop_prob", ")", "\n", "", "", "s", "=", "h1", "+", "h2", "\n", "states", "+=", "[", "s", "]", "\n", "", "return", "torch", ".", "cat", "(", "[", "states", "[", "i", "]", "for", "i", "in", "self", ".", "_concat", "]", ",", "dim", "=", "1", ")", "# N\uff0cC\uff0cH, W", "\n", "\n"]], "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.model.DCOCell.__init__": [[60, 72], ["torch.Module.__init__", "operations.ReLUConvBN", "zip", "model.DCOCell._compile", "operations.FactorizedReduce", "operations.ReLUConvBN"], "methods", ["home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.graph_distance.GraphDistance.__init__", "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.model.DCOCell._compile"], ["  ", "def", "__init__", "(", "self", ",", "gene", ",", "C_prev_prev", ",", "C_prev", ",", "C", ",", "reduction", ",", "reduction_prev", ")", ":", "\n", "    ", "super", "(", "DCOCell", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "if", "reduction_prev", ":", "\n", "      ", "self", ".", "preprocess0", "=", "FactorizedReduce", "(", "C_prev_prev", ",", "C", ")", "\n", "", "else", ":", "\n", "      ", "self", ".", "preprocess0", "=", "ReLUConvBN", "(", "C_prev_prev", ",", "C", ",", "1", ",", "1", ",", "0", ")", "\n", "", "self", ".", "preprocess1", "=", "ReLUConvBN", "(", "C_prev", ",", "C", ",", "1", ",", "1", ",", "0", ")", "\n", "\n", "op_names", ",", "tos", ",", "froms", "=", "zip", "(", "*", "gene", ")", "\n", "self", ".", "inplanes", "=", "C_prev", "\n", "self", ".", "_compile", "(", "C", ",", "op_names", ",", "tos", ",", "froms", ",", "reduction", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.model.DCOCell._compile": [[73, 90], ["torch.ModuleDict", "torch.ModuleDict", "zip", "len", "str", "model.DCOCell._ops.keys", "torch.ModuleDict", "torch.ModuleDict", "torch.ModuleList", "torch.ModuleList", "str", "torch.ModuleList", "torch.ModuleList", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str"], "methods", ["None"], ["", "def", "_compile", "(", "self", ",", "C", ",", "op_names", ",", "tos", ",", "froms", ",", "reduction", ")", ":", "\n", "    ", "self", ".", "_ops", "=", "nn", ".", "ModuleDict", "(", ")", "\n", "for", "name_i", ",", "to_i", ",", "from_i", "in", "zip", "(", "op_names", ",", "tos", ",", "froms", ")", ":", "\n", "      ", "stride", "=", "2", "if", "reduction", "and", "from_i", "<", "2", "else", "1", "\n", "op", "=", "OPS", "[", "name_i", "]", "(", "C", ",", "stride", ",", "True", ")", "\n", "if", "str", "(", "to_i", ")", "in", "self", ".", "_ops", ".", "keys", "(", ")", ":", "\n", "        ", "if", "str", "(", "from_i", ")", "in", "self", ".", "_ops", "[", "str", "(", "to_i", ")", "]", ":", "\n", "          ", "self", ".", "_ops", "[", "str", "(", "to_i", ")", "]", "[", "str", "(", "from_i", ")", "]", "+=", "[", "op", "]", "\n", "", "else", ":", "\n", "          ", "self", ".", "_ops", "[", "str", "(", "to_i", ")", "]", "[", "str", "(", "from_i", ")", "]", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "_ops", "[", "str", "(", "to_i", ")", "]", "[", "str", "(", "from_i", ")", "]", "+=", "[", "op", "]", "\n", "", "", "else", ":", "\n", "        ", "self", ".", "_ops", "[", "str", "(", "to_i", ")", "]", "=", "nn", ".", "ModuleDict", "(", ")", "\n", "self", ".", "_ops", "[", "str", "(", "to_i", ")", "]", "[", "str", "(", "from_i", ")", "]", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "_ops", "[", "str", "(", "to_i", ")", "]", "[", "str", "(", "from_i", ")", "]", "+=", "[", "op", "]", "\n", "\n", "", "", "self", ".", "multiplier", "=", "len", "(", "self", ".", "_ops", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.model.DCOCell.forward": [[91, 111], ["model.DCOCell.preprocess0", "model.DCOCell.preprocess1", "model.DCOCell._ops.items", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "ops.items", "sum", "utils.drop_path", "sum", "states.values", "op"], "methods", ["home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.utils.drop_path"], ["", "def", "forward", "(", "self", ",", "s0", ",", "s1", ",", "drop_prob", "=", "0", ")", ":", "\n", "    ", "s0", "=", "self", ".", "preprocess0", "(", "s0", ")", "\n", "s1", "=", "self", ".", "preprocess1", "(", "s1", ")", "\n", "\n", "states", "=", "{", "}", "\n", "states", "[", "'0'", "]", "=", "s0", "\n", "states", "[", "'1'", "]", "=", "s1", "\n", "\n", "for", "to_i", ",", "ops", "in", "self", ".", "_ops", ".", "items", "(", ")", ":", "\n", "      ", "h", "=", "[", "]", "\n", "for", "from_i", ",", "op_i", "in", "ops", ".", "items", "(", ")", ":", "\n", "        ", "if", "from_i", "not", "in", "states", ":", "\n", "          ", "continue", "\n", "", "h", "+=", "[", "sum", "(", "[", "op", "(", "states", "[", "from_i", "]", ")", "for", "op", "in", "op_i", "if", "from_i", "in", "states", "]", ")", "]", "\n", "", "out", "=", "sum", "(", "h", ")", "\n", "if", "self", ".", "training", "and", "drop_prob", ">", "0", ":", "\n", "        ", "out", "=", "drop_path", "(", "out", ",", "drop_prob", ")", "\n", "", "states", "[", "to_i", "]", "=", "out", "\n", "\n", "", "return", "torch", ".", "cat", "(", "[", "v", "for", "v", "in", "states", ".", "values", "(", ")", "]", "[", "2", ":", "]", ",", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.model.AuxiliaryHeadCIFAR.__init__": [[113, 127], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.AvgPool2d", "torch.AvgPool2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.graph_distance.GraphDistance.__init__"], ["  ", "def", "__init__", "(", "self", ",", "C", ",", "num_classes", ")", ":", "\n", "    ", "\"\"\"assuming input size 8x8\"\"\"", "\n", "super", "(", "AuxiliaryHeadCIFAR", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "features", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "AvgPool2d", "(", "5", ",", "stride", "=", "3", ",", "padding", "=", "0", ",", "count_include_pad", "=", "False", ")", ",", "# image size = 2 x 2", "\n", "nn", ".", "Conv2d", "(", "C", ",", "128", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "128", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "128", ",", "768", ",", "2", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "768", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "768", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.model.AuxiliaryHeadCIFAR.forward": [[128, 132], ["model.AuxiliaryHeadCIFAR.features", "model.AuxiliaryHeadCIFAR.classifier", "model.AuxiliaryHeadCIFAR.view", "model.AuxiliaryHeadCIFAR.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "x", "=", "self", ".", "features", "(", "x", ")", "\n", "x", "=", "self", ".", "classifier", "(", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.model.AuxiliaryHeadImageNet.__init__": [[136, 150], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.AvgPool2d", "torch.AvgPool2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.graph_distance.GraphDistance.__init__"], ["  ", "def", "__init__", "(", "self", ",", "C", ",", "num_classes", ")", ":", "\n", "    ", "\"\"\"assuming input size 14x14\"\"\"", "\n", "super", "(", "AuxiliaryHeadImageNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "features", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "AvgPool2d", "(", "5", ",", "stride", "=", "2", ",", "padding", "=", "0", ",", "count_include_pad", "=", "False", ")", ",", "\n", "nn", ".", "Conv2d", "(", "C", ",", "128", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "128", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "128", ",", "768", ",", "2", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "768", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "768", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.model.AuxiliaryHeadImageNet.forward": [[151, 155], ["model.AuxiliaryHeadImageNet.features", "model.AuxiliaryHeadImageNet.classifier", "model.AuxiliaryHeadImageNet.view", "model.AuxiliaryHeadImageNet.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "x", "=", "self", ".", "features", "(", "x", ")", "\n", "x", "=", "self", ".", "classifier", "(", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.model.NetworkCIFAR.__init__": [[158, 215], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "utils.convert_genotype", "torch.ModuleList", "torch.ModuleList", "list", "range", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Linear", "torch.Linear", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "model.AuxiliaryHeadCIFAR", "model.Cell", "model.DCOCell", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.graph_distance.GraphDistance.__init__", "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.utils.convert_genotype"], ["  ", "def", "__init__", "(", "self", ",", "C", ",", "num_classes", ",", "layers", ",", "auxiliary", ",", "genotype", ",", "parse_method", "=", "'darts'", ")", ":", "\n", "    ", "super", "(", "NetworkCIFAR", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_layers", "=", "layers", "\n", "self", ".", "_auxiliary", "=", "auxiliary", "\n", "self", ".", "drop_path_prob", "=", "0.2", "\n", "\n", "stem_multiplier", "=", "3", "\n", "C_curr", "=", "stem_multiplier", "*", "C", "\n", "self", ".", "stem", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "3", ",", "C_curr", ",", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "C_curr", ")", "\n", ")", "\n", "\n", "C_prev_prev", ",", "C_prev", ",", "C_curr", "=", "C_curr", ",", "C_curr", ",", "C", "\n", "\n", "genotype", "=", "convert_genotype", "(", "genotype", ")", "\n", "\n", "self", ".", "cells", "=", "nn", ".", "ModuleList", "(", ")", "\n", "reduction_prev", "=", "False", "\n", "self", ".", "reduction_indexes", "=", "list", "(", "genotype", ".", "reductions", ")", "\n", "for", "i", "in", "range", "(", "layers", ")", ":", "\n", "      ", "if", "i", "in", "self", ".", "reduction_indexes", ":", "\n", "        ", "C_curr", "*=", "2", "\n", "reduction", "=", "True", "\n", "", "else", ":", "\n", "        ", "reduction", "=", "False", "\n", "\n", "", "if", "parse_method", "==", "'darts'", ":", "\n", "        ", "cell", "=", "Cell", "(", "genotype", ",", "i", ",", "C_prev_prev", ",", "C_prev", ",", "C_curr", ",", "reduction", ",", "reduction_prev", ")", "\n", "", "else", ":", "\n", "        ", "if", "layers", ">", "len", "(", "genotype", ".", "genes", ")", ":", "\n", "          ", "if", "len", "(", "self", ".", "reduction_indexes", ")", ">", "2", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "", "if", "i", "<", "layers", "//", "3", ":", "\n", "            ", "n", "=", "i", "%", "len", "(", "genotype", ".", "genes", ")", "//", "3", "\n", "", "elif", "i", "==", "layers", "//", "3", ":", "\n", "            ", "n", "=", "len", "(", "genotype", ".", "genes", ")", "//", "3", "\n", "", "elif", "i", ">", "layers", "//", "3", "and", "i", "<", "2", "*", "layers", "//", "3", ":", "\n", "            ", "n", "=", "i", "%", "(", "2", "*", "len", "(", "genotype", ".", "genes", ")", "//", "3", "-", "1", "-", "len", "(", "genotype", ".", "genes", ")", "//", "3", ")", "+", "len", "(", "genotype", ".", "genes", ")", "//", "3", "+", "1", "\n", "", "elif", "i", "==", "2", "*", "layers", "//", "3", ":", "\n", "            ", "n", "=", "2", "*", "len", "(", "genotype", ".", "genes", ")", "//", "3", "\n", "", "else", ":", "\n", "            ", "n", "=", "i", "%", "(", "len", "(", "genotype", ".", "genes", ")", "-", "1", "-", "2", "*", "len", "(", "genotype", ".", "genes", ")", "//", "3", ")", "+", "2", "*", "len", "(", "genotype", ".", "genes", ")", "//", "3", "+", "1", "\n", "", "", "else", ":", "\n", "          ", "n", "=", "i", "\n", "", "assert", "(", "n", "<", "len", "(", "genotype", ".", "genes", ")", ")", "\n", "cell", "=", "DCOCell", "(", "genotype", ".", "genes", "[", "n", "]", ",", "C_prev_prev", ",", "C_prev", ",", "C_curr", ",", "reduction", ",", "reduction_prev", ")", "\n", "", "reduction_prev", "=", "reduction", "\n", "self", ".", "cells", "+=", "[", "cell", "]", "\n", "C_prev_prev", ",", "C_prev", "=", "C_prev", ",", "cell", ".", "multiplier", "*", "C_curr", "\n", "if", "i", "==", "self", ".", "reduction_indexes", "[", "-", "1", "]", ":", "\n", "        ", "C_to_auxiliary", "=", "C_prev", "\n", "\n", "", "", "if", "auxiliary", ":", "\n", "      ", "self", ".", "auxiliary_head", "=", "AuxiliaryHeadCIFAR", "(", "C_to_auxiliary", ",", "num_classes", ")", "\n", "", "self", ".", "global_pooling", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "C_prev", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.model.NetworkCIFAR.forward": [[216, 227], ["model.NetworkCIFAR.stem", "enumerate", "model.NetworkCIFAR.global_pooling", "model.NetworkCIFAR.classifier", "model.NetworkCIFAR.view", "cell", "model.NetworkCIFAR.size", "model.NetworkCIFAR.auxiliary_head"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "    ", "logits_aux", "=", "None", "\n", "s0", "=", "s1", "=", "self", ".", "stem", "(", "input", ")", "\n", "for", "i", ",", "cell", "in", "enumerate", "(", "self", ".", "cells", ")", ":", "\n", "      ", "s0", ",", "s1", "=", "s1", ",", "cell", "(", "s0", ",", "s1", ",", "self", ".", "drop_path_prob", ")", "\n", "if", "i", "==", "self", ".", "reduction_indexes", "[", "-", "1", "]", ":", "\n", "        ", "if", "self", ".", "_auxiliary", "and", "self", ".", "training", ":", "\n", "          ", "logits_aux", "=", "self", ".", "auxiliary_head", "(", "s1", ")", "\n", "", "", "", "out", "=", "self", ".", "global_pooling", "(", "s1", ")", "\n", "logits", "=", "self", ".", "classifier", "(", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", ")", "\n", "return", "logits", ",", "logits_aux", "\n", "\n"]], "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.model.NetworkImageNet.__init__": [[231, 297], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "utils.convert_genotype", "torch.ModuleList", "torch.ModuleList", "list", "range", "torch.AvgPool2d", "torch.AvgPool2d", "torch.Linear", "torch.Linear", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "model.AuxiliaryHeadImageNet", "model.Cell", "model.DCOCell", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.graph_distance.GraphDistance.__init__", "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.utils.convert_genotype"], ["  ", "def", "__init__", "(", "self", ",", "C", ",", "num_classes", ",", "layers", ",", "auxiliary", ",", "genotype", ",", "parse_method", "=", "'threshold'", ",", "include_classifier", "=", "True", ")", ":", "\n", "    ", "super", "(", "NetworkImageNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_layers", "=", "layers", "\n", "self", ".", "_auxiliary", "=", "auxiliary", "\n", "self", ".", "drop_path_prob", "=", "0.2", "\n", "self", ".", "include_classifier", "=", "include_classifier", "\n", "\n", "self", ".", "stem0", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "3", ",", "C", "//", "2", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "C", "//", "2", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "C", "//", "2", ",", "C", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "C", ")", ",", "\n", ")", "\n", "\n", "self", ".", "stem1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "C", ",", "C", ",", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "C", ")", ",", "\n", ")", "\n", "\n", "C_prev_prev", ",", "C_prev", ",", "C_curr", "=", "C", ",", "C", ",", "C", "\n", "\n", "genotype", "=", "convert_genotype", "(", "genotype", ")", "\n", "\n", "self", ".", "cells", "=", "nn", ".", "ModuleList", "(", ")", "\n", "reduction_prev", "=", "True", "\n", "self", ".", "reduction_indexes", "=", "list", "(", "genotype", ".", "reductions", ")", "\n", "for", "i", "in", "range", "(", "layers", ")", ":", "\n", "      ", "if", "i", "in", "self", ".", "reduction_indexes", ":", "\n", "        ", "C_curr", "*=", "2", "\n", "reduction", "=", "True", "\n", "", "else", ":", "\n", "        ", "reduction", "=", "False", "\n", "\n", "", "if", "parse_method", "==", "'darts'", ":", "\n", "        ", "cell", "=", "Cell", "(", "genotype", ",", "i", ",", "C_prev_prev", ",", "C_prev", ",", "C_curr", ",", "reduction", ",", "reduction_prev", ")", "\n", "", "else", ":", "\n", "        ", "if", "layers", ">", "len", "(", "genotype", ".", "genes", ")", ":", "\n", "          ", "if", "len", "(", "self", ".", "reduction_indexes", ")", ">", "2", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "", "if", "i", "<", "layers", "//", "3", ":", "\n", "            ", "n", "=", "i", "%", "len", "(", "genotype", ".", "genes", ")", "//", "3", "\n", "", "elif", "i", "==", "layers", "//", "3", ":", "\n", "            ", "n", "=", "len", "(", "genotype", ".", "genes", ")", "//", "3", "\n", "", "elif", "i", ">", "layers", "//", "3", "and", "i", "<", "2", "*", "layers", "//", "3", ":", "\n", "            ", "n", "=", "i", "%", "(", "2", "*", "len", "(", "genotype", ".", "genes", ")", "//", "3", "-", "1", "-", "len", "(", "genotype", ".", "genes", ")", "//", "3", ")", "+", "len", "(", "genotype", ".", "genes", ")", "//", "3", "+", "1", "\n", "", "elif", "i", "==", "2", "*", "layers", "//", "3", ":", "\n", "            ", "n", "=", "2", "*", "len", "(", "genotype", ".", "genes", ")", "//", "3", "\n", "", "else", ":", "\n", "            ", "n", "=", "i", "%", "(", "len", "(", "genotype", ".", "genes", ")", "-", "1", "-", "2", "*", "len", "(", "genotype", ".", "genes", ")", "//", "3", ")", "+", "2", "*", "len", "(", "genotype", ".", "genes", ")", "//", "3", "+", "1", "\n", "", "", "else", ":", "\n", "          ", "n", "=", "i", "\n", "", "assert", "(", "n", "<", "len", "(", "genotype", ".", "genes", ")", ")", "\n", "cell", "=", "DCOCell", "(", "genotype", ".", "genes", "[", "n", "]", ",", "C_prev_prev", ",", "C_prev", ",", "C_curr", ",", "reduction", ",", "reduction_prev", ")", "\n", "\n", "", "reduction_prev", "=", "reduction", "\n", "self", ".", "cells", "+=", "[", "cell", "]", "\n", "C_prev_prev", ",", "C_prev", "=", "C_prev", ",", "cell", ".", "multiplier", "*", "C_curr", "\n", "if", "i", "==", "self", ".", "reduction_indexes", "[", "-", "1", "]", ":", "\n", "        ", "C_to_auxiliary", "=", "C_prev", "\n", "\n", "", "", "if", "auxiliary", ":", "\n", "      ", "self", ".", "auxiliary_head", "=", "AuxiliaryHeadImageNet", "(", "C_to_auxiliary", ",", "num_classes", ")", "\n", "", "self", ".", "global_pooling", "=", "nn", ".", "AvgPool2d", "(", "7", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "C_prev", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.model.NetworkImageNet.get_in_channels_list": [[298, 304], ["model.NetworkImageNet.named_modules", "in_channels.append"], "methods", ["None"], ["", "def", "get_in_channels_list", "(", "self", ",", "layers", ")", ":", "\n", "    ", "in_channels", "=", "[", "]", "\n", "for", "name", ",", "c", "in", "self", ".", "named_modules", "(", ")", ":", "\n", "      ", "if", "name", "in", "layers", ":", "\n", "        ", "in_channels", ".", "append", "(", "c", ".", "inplanes", ")", "\n", "", "", "return", "in_channels", "\n", "\n"]], "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.model.NetworkImageNet.forward": [[305, 320], ["model.NetworkImageNet.stem0", "model.NetworkImageNet.stem1", "enumerate", "model.NetworkImageNet.global_pooling", "model.NetworkImageNet.classifier", "cell", "model.NetworkImageNet.view", "model.NetworkImageNet.auxiliary_head", "model.NetworkImageNet.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "    ", "logits_aux", "=", "None", "\n", "s0", "=", "self", ".", "stem0", "(", "input", ")", "\n", "s1", "=", "self", ".", "stem1", "(", "s0", ")", "\n", "for", "i", ",", "cell", "in", "enumerate", "(", "self", ".", "cells", ")", ":", "\n", "      ", "s0", ",", "s1", "=", "s1", ",", "cell", "(", "s0", ",", "s1", ",", "self", ".", "drop_path_prob", ")", "\n", "if", "i", "==", "self", ".", "reduction_indexes", "[", "-", "1", "]", ":", "\n", "        ", "if", "self", ".", "_auxiliary", "and", "self", ".", "training", ":", "\n", "          ", "logits_aux", "=", "self", ".", "auxiliary_head", "(", "s1", ")", "\n", "", "", "", "out", "=", "self", ".", "global_pooling", "(", "s1", ")", "\n", "if", "self", ".", "include_classifier", ":", "\n", "      ", "logits", "=", "self", ".", "classifier", "(", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", ")", "\n", "return", "logits", ",", "logits_aux", "\n", "", "else", ":", "\n", "      ", "return", "out", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.visualize.plot1": [[6, 39], ["graphviz.Digraph", "graphviz.Digraph.body.extend", "graphviz.Digraph.node", "graphviz.Digraph.node", "range", "range", "graphviz.Digraph.node", "range", "graphviz.Digraph.render", "len", "graphviz.Digraph.node", "graphviz.Digraph.edge", "dict", "dict", "len", "str", "str", "graphviz.Digraph.edge", "str", "str"], "function", ["None"], ["def", "plot1", "(", "genotype", ",", "filename", ")", ":", "\n", "  ", "g", "=", "Digraph", "(", "\n", "format", "=", "'pdf'", ",", "\n", "edge_attr", "=", "dict", "(", "fontsize", "=", "'20'", ",", "fontname", "=", "\"times\"", ")", ",", "\n", "node_attr", "=", "dict", "(", "style", "=", "'filled'", ",", "shape", "=", "'rect'", ",", "align", "=", "'center'", ",", "fontsize", "=", "'20'", ",", "height", "=", "'0.5'", ",", "width", "=", "'0.5'", ",", "penwidth", "=", "'2'", ",", "fontname", "=", "\"times\"", ")", ",", "\n", "engine", "=", "'dot'", ")", "\n", "g", ".", "body", ".", "extend", "(", "[", "'rankdir=LR'", "]", ")", "\n", "\n", "g", ".", "node", "(", "\"c_{k-2}\"", ",", "fillcolor", "=", "'darkseagreen2'", ")", "\n", "g", ".", "node", "(", "\"c_{k-1}\"", ",", "fillcolor", "=", "'darkseagreen2'", ")", "\n", "assert", "len", "(", "genotype", ")", "%", "2", "==", "0", "\n", "steps", "=", "len", "(", "genotype", ")", "//", "2", "\n", "\n", "for", "i", "in", "range", "(", "steps", ")", ":", "\n", "    ", "g", ".", "node", "(", "str", "(", "i", ")", ",", "fillcolor", "=", "'lightblue'", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "steps", ")", ":", "\n", "    ", "for", "k", "in", "[", "2", "*", "i", ",", "2", "*", "i", "+", "1", "]", ":", "\n", "      ", "op", ",", "j", "=", "genotype", "[", "k", "]", "\n", "if", "j", "==", "0", ":", "\n", "        ", "u", "=", "\"c_{k-2}\"", "\n", "", "elif", "j", "==", "1", ":", "\n", "        ", "u", "=", "\"c_{k-1}\"", "\n", "", "else", ":", "\n", "        ", "u", "=", "str", "(", "j", "-", "2", ")", "\n", "", "v", "=", "str", "(", "i", ")", "\n", "g", ".", "edge", "(", "u", ",", "v", ",", "label", "=", "op", ",", "fillcolor", "=", "\"gray\"", ")", "\n", "\n", "", "", "g", ".", "node", "(", "\"c_{k}\"", ",", "fillcolor", "=", "'palegoldenrod'", ")", "\n", "for", "i", "in", "range", "(", "steps", ")", ":", "\n", "    ", "g", ".", "edge", "(", "str", "(", "i", ")", ",", "\"c_{k}\"", ",", "fillcolor", "=", "\"gray\"", ")", "\n", "\n", "", "g", ".", "render", "(", "filename", ",", "view", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.visualize.parse": [[40, 55], ["zip", "zip", "str", "ops.keys", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str"], "function", ["None"], ["", "def", "parse", "(", "genotype", ")", ":", "\n", "  ", "op_names", ",", "tos", ",", "froms", "=", "zip", "(", "*", "genotype", ")", "\n", "ops", "=", "{", "}", "\n", "for", "name_i", ",", "to_i", ",", "from_i", "in", "zip", "(", "op_names", ",", "tos", ",", "froms", ")", ":", "\n", "    ", "if", "str", "(", "to_i", ")", "in", "ops", ".", "keys", "(", ")", ":", "\n", "      ", "if", "str", "(", "from_i", ")", "in", "ops", "[", "str", "(", "to_i", ")", "]", ":", "\n", "        ", "ops", "[", "str", "(", "to_i", ")", "]", "[", "str", "(", "from_i", ")", "]", "+=", "[", "name_i", "]", "\n", "", "else", ":", "\n", "        ", "ops", "[", "str", "(", "to_i", ")", "]", "[", "str", "(", "from_i", ")", "]", "=", "[", "]", "\n", "ops", "[", "str", "(", "to_i", ")", "]", "[", "str", "(", "from_i", ")", "]", "+=", "[", "name_i", "]", "\n", "", "", "else", ":", "\n", "      ", "ops", "[", "str", "(", "to_i", ")", "]", "=", "{", "}", "\n", "ops", "[", "str", "(", "to_i", ")", "]", "[", "str", "(", "from_i", ")", "]", "=", "[", "]", "\n", "ops", "[", "str", "(", "to_i", ")", "]", "[", "str", "(", "from_i", ")", "]", "+=", "[", "name_i", "]", "\n", "", "", "return", "ops", "\n", "\n"]], "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.visualize.plot2": [[56, 88], ["graphviz.Digraph", "graphviz.Digraph.body.extend", "graphviz.Digraph.node", "graphviz.Digraph.node", "visualize.parse", "parse.items", "parse.items", "graphviz.Digraph.node", "parse.items", "graphviz.Digraph.render", "graphviz.Digraph.node", "v.items", "graphviz.Digraph.edge", "dict", "dict", "str", "str", "graphviz.Digraph.edge", "int", "str", "str", "int", "int", "int"], "function", ["home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.utils.parse"], ["", "def", "plot2", "(", "genotype", ",", "filename", ")", ":", "\n", "  ", "g", "=", "Digraph", "(", "\n", "format", "=", "'png'", ",", "\n", "edge_attr", "=", "dict", "(", "fontsize", "=", "'20'", ",", "fontname", "=", "\"times\"", ")", ",", "\n", "node_attr", "=", "dict", "(", "style", "=", "'filled'", ",", "shape", "=", "'rect'", ",", "align", "=", "'center'", ",", "fontsize", "=", "'20'", ",", "height", "=", "'0.5'", ",", "width", "=", "'0.5'", ",", "penwidth", "=", "'2'", ",", "fontname", "=", "\"times\"", ")", ",", "\n", "engine", "=", "'dot'", ")", "\n", "g", ".", "body", ".", "extend", "(", "[", "'rankdir=LR'", "]", ")", "\n", "\n", "g", ".", "node", "(", "\"c_{k-2}\"", ",", "fillcolor", "=", "'darkseagreen2'", ")", "\n", "g", ".", "node", "(", "\"c_{k-1}\"", ",", "fillcolor", "=", "'darkseagreen2'", ")", "\n", "\n", "ops", "=", "parse", "(", "genotype", ")", "\n", "\n", "for", "k", ",", "v", "in", "ops", ".", "items", "(", ")", ":", "\n", "    ", "g", ".", "node", "(", "str", "(", "int", "(", "k", ")", "-", "2", ")", ",", "fillcolor", "=", "'lightblue'", ")", "\n", "\n", "", "for", "to_i", ",", "v", "in", "ops", ".", "items", "(", ")", ":", "\n", "    ", "for", "from_i", ",", "op_i", "in", "v", ".", "items", "(", ")", ":", "\n", "      ", "if", "from_i", "==", "'0'", ":", "\n", "        ", "u", "=", "\"c_{k-2}\"", "\n", "", "elif", "from_i", "==", "'1'", ":", "\n", "        ", "u", "=", "\"c_{k-1}\"", "\n", "", "else", ":", "\n", "        ", "u", "=", "str", "(", "int", "(", "from_i", ")", "-", "2", ")", "\n", "", "for", "op", "in", "op_i", ":", "\n", "        ", "g", ".", "edge", "(", "u", ",", "str", "(", "int", "(", "to_i", ")", "-", "2", ")", ",", "label", "=", "op", ",", "fillcolor", "=", "\"gray\"", ")", "\n", "\n", "", "", "", "g", ".", "node", "(", "\"c_{k}\"", ",", "fillcolor", "=", "'palegoldenrod'", ")", "\n", "for", "to_i", ",", "v", "in", "ops", ".", "items", "(", ")", ":", "\n", "    ", "g", ".", "edge", "(", "str", "(", "int", "(", "to_i", ")", "-", "2", ")", ",", "\"c_{k}\"", ",", "fillcolor", "=", "\"gray\"", ")", "\n", "\n", "", "g", ".", "render", "(", "filename", ",", "view", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.visualize.plot_network": [[89, 126], ["graphviz.Digraph", "graphviz.Digraph.body.extend", "enumerate", "graphviz.Digraph.render", "graphviz.Digraph.node", "graphviz.Digraph.node", "visualize.parse", "parse.items", "parse.items", "graphviz.Digraph.node", "parse.items", "dict", "dict", "graphviz.Digraph.edge", "graphviz.Digraph.edge", "graphviz.Digraph.node", "v.items", "graphviz.Digraph.edge", "graphviz.Digraph.edge", "int", "int", "int", "int"], "function", ["home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.utils.parse"], ["", "def", "plot_network", "(", "genotype", ",", "filename", ")", ":", "\n", "  ", "g", "=", "Digraph", "(", "\n", "format", "=", "'png'", ",", "\n", "edge_attr", "=", "dict", "(", "fontsize", "=", "'10'", ",", "fontname", "=", "\"times\"", ")", ",", "\n", "node_attr", "=", "dict", "(", "style", "=", "'filled'", ",", "shape", "=", "'rect'", ",", "align", "=", "'center'", ",", "fontsize", "=", "'10'", ",", "height", "=", "'0.5'", ",", "width", "=", "'0.5'", ",", "penwidth", "=", "'2'", ",", "fontname", "=", "\"times\"", ")", ",", "\n", "engine", "=", "'dot'", ")", "\n", "g", ".", "body", ".", "extend", "(", "[", "'rankdir=LR'", "]", ")", "\n", "\n", "for", "i", ",", "gen", "in", "enumerate", "(", "genotype", ".", "genes", ")", ":", "\n", "    ", "g", ".", "node", "(", "f\"c_{i}\"", "+", "\"_{k-2}\"", ",", "fillcolor", "=", "'darkseagreen2'", ")", "\n", "g", ".", "node", "(", "f\"c_{i}\"", "+", "\"_{k-1}\"", ",", "fillcolor", "=", "'darkseagreen2'", ")", "\n", "\n", "if", "i", ">", "0", ":", "\n", "      ", "g", ".", "edge", "(", "f\"c_{i-1}\"", "+", "\"_{k}\"", ",", "f\"c_{i}\"", "+", "\"_{k-2}\"", ",", "fillcolor", "=", "\"red\"", ")", "\n", "g", ".", "edge", "(", "f\"c_{i-1}\"", "+", "\"_{k}\"", ",", "f\"c_{i}\"", "+", "\"_{k-1}\"", ",", "fillcolor", "=", "\"red\"", ")", "\n", "\n", "", "ops", "=", "parse", "(", "gen", ")", "\n", "\n", "for", "k", ",", "v", "in", "ops", ".", "items", "(", ")", ":", "\n", "      ", "g", ".", "node", "(", "f\"c_{i}_{int(k)-2}\"", ",", "fillcolor", "=", "'lightblue'", ")", "\n", "\n", "", "for", "to_i", ",", "v", "in", "ops", ".", "items", "(", ")", ":", "\n", "      ", "for", "from_i", ",", "op_i", "in", "v", ".", "items", "(", ")", ":", "\n", "        ", "if", "from_i", "==", "'0'", ":", "\n", "          ", "u", "=", "f\"c_{i}\"", "+", "\"_{k-2}\"", "\n", "", "elif", "from_i", "==", "'1'", ":", "\n", "          ", "u", "=", "f\"c_{i}\"", "+", "\"_{k-1}\"", "\n", "", "else", ":", "\n", "          ", "u", "=", "f\"c_{i}_{int(from_i)-2}\"", "\n", "", "for", "op", "in", "op_i", ":", "\n", "          ", "g", ".", "edge", "(", "u", ",", "f\"c_{i}_{int(to_i)-2}\"", ",", "label", "=", "op", ",", "fillcolor", "=", "\"gray\"", ")", "\n", "\n", "", "", "", "g", ".", "node", "(", "f\"c_{i}\"", "+", "\"_{k}\"", ",", "fillcolor", "=", "'palegoldenrod'", ")", "\n", "for", "to_i", ",", "v", "in", "ops", ".", "items", "(", ")", ":", "\n", "      ", "g", ".", "edge", "(", "f\"c_{i}_{int(to_i)-2}\"", ",", "f\"c_{i}\"", "+", "\"_{k}\"", ",", "fillcolor", "=", "\"gray\"", ")", "\n", "\n", "", "", "g", ".", "render", "(", "filename", ",", "view", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.architecture_processing.hausdorff_metric": [[11, 16], ["max", "architecture_processing.global_hausdorff_distance", "architecture_processing.global_hausdorff_distance"], "function", ["home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.architecture_processing.global_hausdorff_distance", "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.architecture_processing.global_hausdorff_distance"], ["def", "hausdorff_metric", "(", "u", ",", "v", ",", "seed", "=", "0", ")", ":", "\n", "    ", "'''\n    Turns Hausdorff distance into a metric by enforcing symmetry.\n    '''", "\n", "return", "max", "(", "global_hausdorff_distance", "(", "u", ",", "v", ",", "seed", ")", ",", "global_hausdorff_distance", "(", "v", ",", "u", ",", "seed", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.architecture_processing.cell_hausdorff_distance": [[17, 61], ["numpy.random.RandomState", "numpy.arange", "numpy.arange", "np.random.RandomState.shuffle", "np.random.RandomState.shuffle", "range", "open", "numpy.array", "numpy.asarray", "numpy.asarray", "range", "list", "scipy.spatial.distance.hamming", "json.load().values", "json.load"], "function", ["home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.utils.load"], ["", "def", "cell_hausdorff_distance", "(", "c1", ",", "c2", ",", "seed", "=", "0", ",", "stats_file_path", "=", "\"op_stats.json\"", ")", ":", "\n", "    ", "'''\n    Computes Hausdorff distance between two cells based on operation performance stats as weights of Hamming distance rather than standard Euclidian distance.\n    '''", "\n", "with", "open", "(", "stats_file_path", ")", "as", "f", ":", "\n", "        ", "op_stats", "=", "np", ".", "array", "(", "list", "(", "json", ".", "load", "(", "f", ")", ".", "values", "(", ")", ")", ")", "\n", "\n", "", "cmax", "=", "cmin", "=", "d", "=", "0", "\n", "N1", "=", "c1", ".", "shape", "[", "0", "]", "\n", "N2", "=", "c2", ".", "shape", "[", "0", "]", "\n", "i_store", "=", "j_store", "=", "i_ret", "=", "j_ret", "=", "0", "\n", "\n", "# shuffling the points in each array generally increases the likelihood of", "\n", "# an advantageous break in the inner search loop and never decreases the", "\n", "# performance of the algorithm", "\n", "rng", "=", "np", ".", "random", ".", "RandomState", "(", "seed", ")", "\n", "resort1", "=", "np", ".", "arange", "(", "N1", ",", "dtype", "=", "np", ".", "int64", ")", "\n", "resort2", "=", "np", ".", "arange", "(", "N2", ",", "dtype", "=", "np", ".", "int64", ")", "\n", "rng", ".", "shuffle", "(", "resort1", ")", "\n", "rng", ".", "shuffle", "(", "resort2", ")", "\n", "ar1", "=", "np", ".", "asarray", "(", "c1", ")", "[", "resort1", "]", "\n", "ar2", "=", "np", ".", "asarray", "(", "c2", ")", "[", "resort2", "]", "\n", "\n", "cmax", "=", "0", "\n", "for", "i", "in", "range", "(", "N1", ")", ":", "\n", "        ", "cmin", "=", "np", ".", "inf", "\n", "for", "j", "in", "range", "(", "N2", ")", ":", "\n", "            ", "d", "=", "hamming", "(", "ar1", "[", "i", "]", ",", "ar2", "[", "j", "]", ",", "w", "=", "op_stats", ")", "\n", "if", "d", "<", "cmax", ":", "# break out of `for j` loop", "\n", "                ", "break", "\n", "\n", "", "if", "d", "<", "cmin", ":", "# always true on first iteration of for-j loop", "\n", "                ", "cmin", "=", "d", "\n", "i_store", "=", "i", "\n", "j_store", "=", "j", "\n", "\n", "# always true on first iteration of for-j loop, after that only", "\n", "# if d >= cmax", "\n", "", "", "if", "cmin", ">=", "cmax", "and", "d", ">=", "cmax", ":", "\n", "            ", "cmax", "=", "cmin", "\n", "i_ret", "=", "i_store", "\n", "j_ret", "=", "j_store", "\n", "\n", "", "", "return", "cmax", "\n", "\n"]], "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.architecture_processing.deserialize_architecture_to_alphas": [[64, 80], ["sum", "numpy.zeros", "enumerate", "isinstance", "len", "len", "sum", "range", "range", "prims.index", "range", "range"], "function", ["None"], ["", "def", "deserialize_architecture_to_alphas", "(", "genotype", ",", "parsing_method", "=", "\"threshold\"", ")", ":", "\n", "    ", "'''\n    Deserialize an architecture from a genotype to alphas weights.\n    '''", "\n", "prims", "=", "PRIMITIVES", "if", "isinstance", "(", "genotype", ",", "Genotype_opt", ")", "else", "PRIMITIVES_DARTS", "\n", "if", "parsing_method", "!=", "\"threshold\"", ":", "\n", "        ", "raise", "\"Only threshold parsing method is supported for now.\"", "\n", "", "steps", "=", "genotype", ".", "concat", "[", "-", "1", "]", "-", "1", "\n", "k", "=", "sum", "(", "1", "for", "i", "in", "range", "(", "steps", ")", "for", "n", "in", "range", "(", "i", "+", "2", ")", ")", "\n", "alphas", "=", "np", ".", "zeros", "(", "(", "len", "(", "genotype", ".", "genes", ")", ",", "k", ",", "len", "(", "prims", ")", ")", ")", "\n", "for", "i", ",", "cell", "in", "enumerate", "(", "genotype", ".", "genes", ")", ":", "\n", "        ", "for", "op", ",", "to", ",", "f", "in", "cell", ":", "\n", "            ", "offset", "=", "to", "-", "2", "\n", "pos", "=", "sum", "(", "1", "for", "i", "in", "range", "(", "offset", ")", "for", "n", "in", "range", "(", "i", "+", "2", ")", ")", "\n", "alphas", "[", "i", "]", "[", "pos", "+", "f", "]", "[", "prims", ".", "index", "(", "op", ")", "]", "=", "10.0", "\n", "", "", "return", "alphas", "\n", "\n"]], "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.architecture_processing.show_genotype_stats": [[81, 94], ["enumerate", "isinstance", "cell_stats.append"], "function", ["None"], ["", "def", "show_genotype_stats", "(", "g", ",", "save_path", ")", ":", "\n", "    ", "'''\n    Show the statistical dispersion of operations in a genotype and save a pie chart to the disk.\n    '''", "\n", "prims", "=", "PRIMITIVES", "if", "isinstance", "(", "g", ",", "Genotype_opt", ")", "else", "PRIMITIVES_DARTS", "\n", "glob_stats", "=", "{", "p", ":", "0", "for", "p", "in", "prims", "}", "\n", "cell_stats", "=", "[", "]", "\n", "for", "i", ",", "c", "in", "enumerate", "(", "g", ".", "genes", ")", ":", "\n", "        ", "stats", "=", "{", "p", ":", "0", "for", "p", "in", "prims", "}", "\n", "for", "op", "in", "c", ":", "\n", "            ", "stats", "[", "op", "[", "0", "]", "]", "+=", "1", "\n", "glob_stats", "[", "op", "[", "0", "]", "]", "+=", "1", "\n", "", "cell_stats", ".", "append", "(", "stats", ")", "\n", "#fig = go.Figure(data=[go.Pie(labels=list(glob_stats.keys()), values=list(glob_stats.values()))])", "\n"]], "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.architecture_processing.architectural_distance_metric": [[97, 114], ["architecture_processing.deserialize_architecture_to_alphas", "architecture_processing.deserialize_architecture_to_alphas", "numpy.sort", "zip", "range", "cell_dists.append", "cell_dists.append", "plotly.Figure", "px.Figure.update_xaxes", "px.Figure.update_yaxes", "px.Figure.write_image", "architecture_processing.hausdorff_metric", "len", "numpy.argmax", "plotly.Bar", "range", "len"], "function", ["home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.architecture_processing.deserialize_architecture_to_alphas", "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.architecture_processing.deserialize_architecture_to_alphas", "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.architecture_processing.hausdorff_metric"], ["", "", "def", "architectural_distance_metric", "(", "g1", ":", "Genotype_nested", ",", "g2", ":", "Genotype_nested", ",", "save_path", ":", "str", "=", "None", ")", ":", "\n", "    ", "a1", "=", "deserialize_architecture_to_alphas", "(", "g1", ")", "\n", "a2", "=", "deserialize_architecture_to_alphas", "(", "g2", ")", "\n", "min_shape", ",", "max_shape", "=", "np", ".", "sort", "(", "[", "a1", ".", "shape", "[", "0", "]", ",", "a2", ".", "shape", "[", "0", "]", "]", ")", "\n", "cell_dists", "=", "[", "]", "\n", "for", "c1", ",", "c2", "in", "zip", "(", "a1", "[", ":", "min_shape", "]", ",", "a2", "[", ":", "min_shape", "]", ")", ":", "\n", "        ", "cell_dists", ".", "append", "(", "hausdorff_metric", "(", "c1", ",", "c2", ")", ")", "\n", "", "for", "_", "in", "range", "(", "max_shape", "-", "min_shape", ")", ":", "\n", "        ", "cell_dists", ".", "append", "(", "1.0", ")", "\n", "", "if", "save_path", ":", "\n", "        ", "colors", "=", "[", "'lightgray'", "]", "*", "(", "len", "(", "cell_dists", ")", ")", "\n", "colors", "[", "np", ".", "argmax", "(", "cell_dists", ")", "]", "=", "'crimson'", "\n", "fig", "=", "px", ".", "Figure", "(", "data", "=", "[", "px", ".", "Bar", "(", "x", "=", "[", "f\"Cell {i}\"", "for", "i", "in", "range", "(", "len", "(", "cell_dists", ")", ")", "]", ",", "y", "=", "cell_dists", ",", "marker_color", "=", "colors", ")", "]", ")", "\n", "fig", ".", "update_xaxes", "(", "title_text", "=", "\"Cell\"", ")", "\n", "fig", ".", "update_yaxes", "(", "title_text", "=", "\"Hausdorff Distance\"", ",", "automargin", "=", "True", ")", "\n", "fig", ".", "write_image", "(", "save_path", ")", "\n", "", "return", "cell_dists", "\n", "\n"]], "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.architecture_processing.global_hausdorff_distance": [[115, 124], ["architecture_processing.deserialize_architecture_to_alphas", "architecture_processing.deserialize_architecture_to_alphas", "zip", "numpy.mean", "distances.append", "max", "architecture_processing.cell_hausdorff_distance", "architecture_processing.cell_hausdorff_distance"], "function", ["home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.architecture_processing.deserialize_architecture_to_alphas", "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.architecture_processing.deserialize_architecture_to_alphas", "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.architecture_processing.cell_hausdorff_distance", "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.architecture_processing.cell_hausdorff_distance"], ["", "def", "global_hausdorff_distance", "(", "g1", ":", "Genotype_nested", ",", "g2", ":", "Genotype_nested", ",", "seed", ":", "int", "=", "0", ")", ":", "\n", "    ", "g1", "=", "deserialize_architecture_to_alphas", "(", "g1", ")", "\n", "g2", "=", "deserialize_architecture_to_alphas", "(", "g2", ")", "\n", "\n", "distances", "=", "[", "]", "\n", "for", "c1", ",", "c2", "in", "zip", "(", "g1", ",", "g2", ")", ":", "\n", "        ", "distances", ".", "append", "(", "max", "(", "cell_hausdorff_distance", "(", "c1", ",", "c2", ",", "seed", ")", ",", "cell_hausdorff_distance", "(", "c2", ",", "c1", ",", "seed", ")", ")", ")", "\n", "\n", "", "return", "np", ".", "mean", "(", "distances", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.architecture_processing.benchmark_operations": [[126, 155], ["genotypes.Genotype_nested", "range", "print", "print", "range", "open", "json.dump", "range", "range", "len", "enumerate", "scipy.stats.describe", "print", "train.TrainArgs", "range", "max", "list", "print", "train.TrainNetwork", "results.append", "[].values", "train.TrainNetwork.run", "len"], "function", ["home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.train.TrainNetwork.run"], ["", "def", "benchmark_operations", "(", "num_epochs", ":", "int", ",", "num_runs", ":", "int", ",", "dataset", ":", "str", "=", "\"cifar10\"", ",", "num_layers", ":", "int", "=", "2", ",", "gpu", ":", "int", "=", "0", ",", "dartopti", ":", "bool", "=", "True", ")", ":", "\n", "    ", "prims", "=", "PRIMITIVES", "if", "dartopti", "else", "PRIMITIVES_DARTS", "\n", "test_arch", "=", "Genotype_nested", "(", "genes", "=", "[", "residual_layer_simple", "]", "*", "num_layers", ",", "concat", "=", "range", "(", "2", ",", "6", ")", ",", "reductions", "=", "range", "(", "1", ",", "num_layers", ")", ")", "\n", "perfs", "=", "{", "}", "\n", "stats", "=", "{", "}", "\n", "for", "l", "in", "range", "(", "num_layers", ")", ":", "\n", "        ", "perfs", "[", "f\"cell_{l}\"", "]", "=", "{", "}", "\n", "stats", "[", "f\"cell_{l}\"", "]", "=", "{", "}", "\n", "for", "p", "in", "range", "(", "len", "(", "residual_layer_simple", ")", ")", ":", "\n", "            ", "perfs", "[", "f\"cell_{l}\"", "]", "[", "f\"position_{p}\"", "]", "=", "{", "}", "\n", "stats", "[", "f\"cell_{l}\"", "]", "[", "f\"position_{p}\"", "]", "=", "{", "}", "\n", "arch", "=", "test_arch", "\n", "for", "i", ",", "op", "in", "enumerate", "(", "prims", ")", ":", "\n", "                ", "print", "(", "f\"Benchmarking operation {op} ({i+1}/{len(prims)})\"", ")", "\n", "_", ",", "to", ",", "fr", "=", "arch", ".", "genes", "[", "l", "]", "[", "p", "]", "\n", "arch", ".", "genes", "[", "l", "]", "[", "p", "]", "=", "(", "op", ",", "to", ",", "fr", ")", "\n", "results", "=", "[", "]", "\n", "args", "=", "TrainArgs", "(", "test_arch", ",", "num_epochs", ",", "dataset", ",", "64", ",", "num_layers", ",", "gpu", ")", "\n", "for", "r", "in", "range", "(", "num_runs", ")", ":", "\n", "                    ", "print", "(", "f\"Run {r}/{num_runs}\"", ")", "\n", "trainer", "=", "TrainNetwork", "(", "args", ")", "\n", "results", ".", "append", "(", "trainer", ".", "run", "(", ")", ")", "\n", "", "perfs", "[", "f\"cell_{l}\"", "]", "[", "f\"position_{p}\"", "]", "[", "op", "]", "=", "max", "(", "results", ")", "\n", "", "stats", "[", "f\"cell_{l}\"", "]", "[", "f\"position_{p}\"", "]", "=", "describe", "(", "list", "(", "perfs", "[", "f\"cell_{l}\"", "]", "[", "f\"position_{p}\"", "]", ".", "values", "(", ")", ")", ")", "\n", "", "", "print", "(", "perfs", ")", "\n", "print", "(", "stats", ")", "\n", "perfs", "[", "\"stats\"", "]", "=", "stats", "\n", "with", "open", "(", "'op_perfs.json'", ",", "'w'", ")", "as", "fp", ":", "\n", "        ", "json", ".", "dump", "(", "perfs", ",", "fp", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.architecture_processing.compute_op_stats_from_perfs": [[156, 171], ["json.load.pop", "list", "print", "open", "json.load", "[].keys", "numpy.std", "numpy.median", "open", "json.dump", "op_stats[].append"], "function", ["home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.utils.load"], ["", "", "def", "compute_op_stats_from_perfs", "(", "perf_file_path", ":", "str", ")", ":", "\n", "    ", "with", "open", "(", "perf_file_path", ")", "as", "f", ":", "\n", "        ", "perfs", "=", "json", ".", "load", "(", "f", ")", "\n", "", "perfs", ".", "pop", "(", "\"stats\"", ")", "\n", "op_list", "=", "list", "(", "perfs", "[", "'cell_0'", "]", "[", "'position_0'", "]", ".", "keys", "(", ")", ")", "\n", "op_stats", "=", "{", "op", ":", "[", "]", "for", "op", "in", "op_list", "}", "\n", "for", "c", "in", "perfs", ":", "\n", "        ", "for", "p", "in", "perfs", "[", "c", "]", ":", "\n", "            ", "for", "op", "in", "op_list", ":", "\n", "                ", "op_stats", "[", "op", "]", ".", "append", "(", "perfs", "[", "c", "]", "[", "p", "]", "[", "op", "]", ")", "\n", "", "", "", "stds", "=", "{", "op", ":", "np", ".", "std", "(", "op_stats", "[", "op", "]", ")", "for", "op", "in", "op_list", "}", "\n", "print", "(", "stds", ")", "\n", "op_stats", "=", "{", "op", ":", "np", ".", "median", "(", "op_stats", "[", "op", "]", ")", "for", "op", "in", "op_list", "}", "\n", "with", "open", "(", "'op_stats_2.json'", ",", "'w'", ")", "as", "fp", ":", "\n", "        ", "json", ".", "dump", "(", "op_stats", ",", "fp", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.architecture_processing.plot_distance_heatmap": [[172, 176], ["pandas.read_csv", "plotly.density_heatmap", "px.density_heatmap.write_image"], "function", ["None"], ["", "", "def", "plot_distance_heatmap", "(", ")", ":", "\n", "    ", "distances", "=", "pd", ".", "read_csv", "(", "\"distances.csv\"", ")", "\n", "fig", "=", "px", ".", "density_heatmap", "(", "distances", ",", "x", "=", "\"arch1\"", ",", "y", "=", "\"arch2\"", ",", "z", "=", "\"distance\"", ")", "\n", "fig", ".", "write_image", "(", "\"distance_heatmap.pdf\"", ",", "engine", "=", "\"orca\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.utils.OpenImages.__init__": [[17, 23], ["torchvision.datasets.VisionDataset.__init__", "utils.OpenImages.load_meta"], "methods", ["home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.graph_distance.GraphDistance.__init__", "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.utils.OpenImages.load_meta"], ["  ", "def", "__init__", "(", "self", ",", "root", ":", "str", ",", "split", ":", "str", ",", "transforms", ":", "Optional", "[", "Callable", "]", ",", "transform", ":", "Optional", "[", "Callable", "]", ",", "target_transform", ":", "Optional", "[", "Callable", "]", ")", "->", "None", ":", "\n", "      ", "super", "(", ")", ".", "__init__", "(", "root", ",", "transforms", "=", "transforms", ",", "transform", "=", "transform", ",", "target_transform", "=", "target_transform", ")", "\n", "assert", "(", "split", "in", "[", "'train'", ",", "'validation'", "]", ")", "\n", "self", ".", "root", "=", "root", "\n", "self", ".", "split", "=", "split", "\n", "self", ".", "load_meta", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.utils.OpenImages.load_meta": [[24, 43], ["pandas.read_csv", "df[].unique", "df.groupby().agg.groupby().agg.groupby().agg", "df.groupby().agg.groupby().agg.to_dict", "list", "print", "tqdm.tqdm.tqdm", "print", "utils.OpenImages.targets.values", "enumerate", "df.groupby().agg.groupby().agg.groupby", "a.append"], "methods", ["None"], ["", "def", "load_meta", "(", "self", ")", ":", "\n", "    ", "df", "=", "pd", ".", "read_csv", "(", "self", ".", "split", "+", "\"-annotations-bbox.csv\"", ")", "\n", "self", ".", "classes", "=", "df", "[", "\"LabelName\"", "]", ".", "unique", "(", ")", "\n", "self", ".", "class_to_idx", "=", "{", "class_", ":", "i", "for", "i", ",", "class_", "in", "enumerate", "(", "self", ".", "classes", ")", "}", "\n", "\n", "def", "process_classes", "(", "x", ")", ":", "\n", "      ", "a", "=", "[", "]", "\n", "print", "(", "\"Parsing OpenImages annotations...\"", ")", "\n", "for", "s", "in", "tqdm", "(", "x", ")", ":", "\n", "        ", "i", "=", "self", ".", "class_to_idx", "[", "s", "]", "\n", "if", "i", "not", "in", "a", ":", "\n", "          ", "a", ".", "append", "(", "i", ")", "\n", "", "", "print", "(", "\"done\"", ")", "\n", "return", "a", "\n", "\n", "", "df", "=", "df", "[", "[", "\"ImageID\"", ",", "\"LabelName\"", "]", "]", "\n", "df", "=", "df", ".", "groupby", "(", "\"ImageID\"", ")", ".", "agg", "(", "process_classes", ")", "\n", "self", ".", "targets", "=", "df", ".", "to_dict", "(", ")", "\n", "self", ".", "images", "=", "list", "(", "self", ".", "targets", ".", "values", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.utils.AvgrageMeter.__init__": [[49, 51], ["utils.AvgrageMeter.reset"], "methods", ["home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.utils.AvgrageMeter.reset"], ["def", "__init__", "(", "self", ")", ":", "\n", "    ", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.utils.AvgrageMeter.reset": [[52, 56], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "    ", "self", ".", "avg", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "cnt", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.utils.AvgrageMeter.update": [[57, 61], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "    ", "self", ".", "sum", "+=", "val", "*", "n", "\n", "self", ".", "cnt", "+=", "n", "\n", "self", ".", "avg", "=", "self", ".", "sum", "/", "self", ".", "cnt", "\n", "\n"]], "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.utils.Cutout.__init__": [[84, 86], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "length", ")", ":", "\n", "        ", "self", ".", "length", "=", "length", "\n", "\n"]], "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.utils.Cutout.__call__": [[87, 103], ["numpy.ones", "numpy.random.randint", "numpy.random.randint", "numpy.clip", "numpy.clip", "numpy.clip", "numpy.clip", "torch.from_numpy", "mask.expand_as.expand_as.expand_as", "img.size", "img.size"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "h", ",", "w", "=", "img", ".", "size", "(", "1", ")", ",", "img", ".", "size", "(", "2", ")", "\n", "mask", "=", "np", ".", "ones", "(", "(", "h", ",", "w", ")", ",", "np", ".", "float32", ")", "\n", "y", "=", "np", ".", "random", ".", "randint", "(", "h", ")", "\n", "x", "=", "np", ".", "random", ".", "randint", "(", "w", ")", "\n", "\n", "y1", "=", "np", ".", "clip", "(", "y", "-", "self", ".", "length", "//", "2", ",", "0", ",", "h", ")", "\n", "y2", "=", "np", ".", "clip", "(", "y", "+", "self", ".", "length", "//", "2", ",", "0", ",", "h", ")", "\n", "x1", "=", "np", ".", "clip", "(", "x", "-", "self", ".", "length", "//", "2", ",", "0", ",", "w", ")", "\n", "x2", "=", "np", ".", "clip", "(", "x", "+", "self", ".", "length", "//", "2", ",", "0", ",", "w", ")", "\n", "\n", "mask", "[", "y1", ":", "y2", ",", "x1", ":", "x2", "]", "=", "0.", "\n", "mask", "=", "torch", ".", "from_numpy", "(", "mask", ")", "\n", "mask", "=", "mask", ".", "expand_as", "(", "img", ")", "\n", "img", "*=", "mask", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.utils.accuracy": [[63, 81], ["max", "target.size", "output.topk", "pred.t.t", "pred.t.eq", "target.view().expand_as", "correct[].reshape().float().sum", "res.append", "correct[].reshape().float().sum.mul_", "target.view", "correct[].reshape().float", "correct[].reshape"], "function", ["None"], ["", "", "def", "accuracy", "(", "output", ",", "target", ",", "topk", "=", "(", "1", ",", ")", ")", ":", "\n", "  ", "\"\"\"Compute the top1 and top5 accuracy\n\n  \"\"\"", "\n", "maxk", "=", "max", "(", "topk", ")", "\n", "batch_size", "=", "target", ".", "size", "(", "0", ")", "\n", "\n", "# Return the k largest elements of the given input tensor", "\n", "# along a given dimension -> N * k", "\n", "_", ",", "pred", "=", "output", ".", "topk", "(", "maxk", ",", "1", ",", "True", ",", "True", ")", "\n", "pred", "=", "pred", ".", "t", "(", ")", "\n", "correct", "=", "pred", ".", "eq", "(", "target", ".", "view", "(", "1", ",", "-", "1", ")", ".", "expand_as", "(", "pred", ")", ")", "\n", "\n", "res", "=", "[", "]", "\n", "for", "k", "in", "topk", ":", "\n", "    ", "correct_k", "=", "correct", "[", ":", "k", "]", ".", "reshape", "(", "-", "1", ")", ".", "float", "(", ")", ".", "sum", "(", "0", ")", "\n", "res", ".", "append", "(", "correct_k", ".", "mul_", "(", "100.0", "/", "batch_size", ")", ")", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.utils._data_transforms_cifar": [[104, 133], ["torchvision.Compose", "torchvision.Compose", "torchvision.ToTensor", "torchvision.Normalize", "torchvision.RandomCrop", "torchvision.RandomHorizontalFlip", "auto_augment.CIFAR10Policy", "utils.Cutout", "torchvision.ToTensor", "torchvision.Normalize"], "function", ["None"], ["", "", "def", "_data_transforms_cifar", "(", "args", ")", ":", "\n", "  ", "CIFAR_MEAN", "=", "[", "0.49139968", ",", "0.48215827", ",", "0.44653124", "]", "if", "args", ".", "dataset", "==", "'cifar10'", "else", "[", "0.50707519", ",", "0.48654887", ",", "0.44091785", "]", "\n", "CIFAR_STD", "=", "[", "0.24703233", ",", "0.24348505", ",", "0.26158768", "]", "if", "args", ".", "dataset", "==", "'cifar10'", "else", "[", "0.26733428", ",", "0.25643846", ",", "0.27615049", "]", "\n", "\n", "normalize_transform", "=", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "CIFAR_MEAN", ",", "CIFAR_STD", ")", "]", "\n", "\n", "random_transform", "=", "[", "\n", "transforms", ".", "RandomCrop", "(", "32", ",", "padding", "=", "4", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", "]", "\n", "\n", "if", "args", ".", "auto_aug", ":", "\n", "    ", "random_transform", "+=", "[", "CIFAR10Policy", "(", ")", "]", "\n", "\n", "", "if", "args", ".", "cutout", ":", "\n", "    ", "cutout_transform", "=", "[", "Cutout", "(", "args", ".", "cutout_length", ")", "]", "\n", "", "else", ":", "\n", "    ", "cutout_transform", "=", "[", "]", "\n", "\n", "", "train_transform", "=", "transforms", ".", "Compose", "(", "\n", "random_transform", "+", "normalize_transform", "+", "cutout_transform", "\n", ")", "\n", "\n", "valid_transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "CIFAR_MEAN", ",", "CIFAR_STD", ")", ",", "\n", "]", ")", "\n", "return", "train_transform", ",", "valid_transform", "\n", "\n"]], "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.utils._data_transforms_imagenet": [[134, 166], ["torchvision.Compose", "torchvision.Compose", "torchvision.ToTensor", "torchvision.Normalize", "torchvision.RandomResizedCrop", "torchvision.RandomHorizontalFlip", "torchvision.ColorJitter", "auto_augment.ImageNetPolicy", "torchvision.Resize", "torchvision.CenterCrop", "torchvision.ToTensor", "torchvision.Normalize"], "function", ["None"], ["", "def", "_data_transforms_imagenet", "(", "args", ")", ":", "\n", "  ", "IMAGENET_MEAN", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", "\n", "IMAGENET_STD", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", "\n", "\n", "normalize_transform", "=", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "IMAGENET_MEAN", ",", "IMAGENET_STD", ")", "]", "\n", "\n", "random_transform", "=", "[", "\n", "transforms", ".", "RandomResizedCrop", "(", "224", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ColorJitter", "(", "\n", "brightness", "=", "0.4", ",", "\n", "contrast", "=", "0.4", ",", "\n", "saturation", "=", "0.4", ",", "\n", "hue", "=", "0.2", ")", ",", "]", "\n", "\n", "if", "args", ".", "auto_aug", ":", "\n", "    ", "random_transform", "+=", "[", "ImageNetPolicy", "(", ")", "]", "\n", "\n", "", "train_transform", "=", "transforms", ".", "Compose", "(", "\n", "random_transform", "+", "normalize_transform", "\n", ")", "\n", "\n", "valid_transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "Resize", "(", "256", ")", ",", "\n", "transforms", ".", "CenterCrop", "(", "224", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "IMAGENET_MEAN", ",", "IMAGENET_STD", ")", ",", "\n", "]", ")", "\n", "\n", "return", "train_transform", ",", "valid_transform", "\n", "\n"]], "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.utils.count_parameters_in_MB": [[168, 170], ["numpy.sum", "numpy.prod", "v.size", "model.parameters"], "function", ["None"], ["", "def", "count_parameters_in_MB", "(", "model", ")", ":", "\n", "  ", "return", "np", ".", "sum", "(", "np", ".", "prod", "(", "v", ".", "size", "(", ")", ")", "for", "v", "in", "model", ".", "parameters", "(", ")", ")", "/", "1e6", "\n", "\n"]], "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.utils.save_checkpoint": [[172, 178], ["os.path.join", "torch.save", "os.path.join", "shutil.copyfile"], "function", ["home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.utils.save"], ["", "def", "save_checkpoint", "(", "state", ",", "is_best", ",", "save", ")", ":", "\n", "  ", "filename", "=", "os", ".", "path", ".", "join", "(", "save", ",", "'checkpoint.pth.tar'", ")", "\n", "torch", ".", "save", "(", "state", ",", "filename", ")", "\n", "if", "is_best", ":", "\n", "    ", "best_filename", "=", "os", ".", "path", ".", "join", "(", "save", ",", "'model_best.pth.tar'", ")", "\n", "shutil", ".", "copyfile", "(", "filename", ",", "best_filename", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.utils.save": [[180, 182], ["torch.save", "model.state_dict"], "function", ["home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.utils.save"], ["", "", "def", "save", "(", "model", ",", "model_path", ")", ":", "\n", "  ", "torch", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "model_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.utils.load": [[184, 186], ["model.load_state_dict", "torch.load"], "function", ["home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.utils.load"], ["", "def", "load", "(", "model", ",", "model_path", ")", ":", "\n", "  ", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "model_path", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.utils.drop_path": [[188, 195], ["torch.autograd.Variable", "x.div_", "x.mul_", "torch.cuda.FloatTensor().bernoulli_", "torch.cuda.FloatTensor", "x.size"], "function", ["None"], ["", "def", "drop_path", "(", "x", ",", "drop_prob", ")", ":", "\n", "  ", "if", "drop_prob", ">", "0.", ":", "\n", "    ", "keep_prob", "=", "1.", "-", "drop_prob", "\n", "mask", "=", "Variable", "(", "torch", ".", "cuda", ".", "FloatTensor", "(", "x", ".", "size", "(", "0", ")", ",", "1", ",", "1", ",", "1", ")", ".", "bernoulli_", "(", "keep_prob", ")", ")", "\n", "x", ".", "div_", "(", "keep_prob", ")", "\n", "x", ".", "mul_", "(", "mask", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.utils.create_exp_dir": [[197, 207], ["print", "os.path.exists", "os.makedirs", "os.makedirs", "os.path.join", "os.path.join", "shutil.copyfile", "os.path.basename"], "function", ["None"], ["", "def", "create_exp_dir", "(", "path", ",", "scripts_to_save", "=", "None", ")", ":", "\n", "  ", "if", "not", "os", ".", "path", ".", "exists", "(", "path", ")", ":", "\n", "    ", "os", ".", "makedirs", "(", "path", ")", "\n", "", "print", "(", "'Experiment dir : {}'", ".", "format", "(", "path", ")", ")", "\n", "\n", "if", "scripts_to_save", "is", "not", "None", ":", "\n", "    ", "os", ".", "makedirs", "(", "os", ".", "path", ".", "join", "(", "path", ",", "'scripts'", ")", ")", "\n", "for", "script", "in", "scripts_to_save", ":", "\n", "      ", "dst_file", "=", "os", ".", "path", ".", "join", "(", "path", ",", "'scripts'", ",", "os", ".", "path", ".", "basename", "(", "script", ")", ")", "\n", "shutil", ".", "copyfile", "(", "script", ",", "dst_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.utils.calc_time": [[208, 213], ["divmod", "divmod", "divmod", "int"], "function", ["None"], ["", "", "", "def", "calc_time", "(", "seconds", ")", ":", "\n", "    ", "m", ",", "s", "=", "divmod", "(", "seconds", ",", "60", ")", "\n", "h", ",", "m", "=", "divmod", "(", "m", ",", "60", ")", "\n", "t", ",", "h", "=", "divmod", "(", "h", ",", "24", ")", "\n", "return", "{", "'day'", ":", "t", ",", "'hour'", ":", "h", ",", "'minute'", ":", "m", ",", "'second'", ":", "int", "(", "s", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.utils.parse": [[214, 265], ["range", "weights[].copy", "range", "sorted", "range", "gene.append", "weights[].copy", "range", "len", "list", "range", "sorted", "range", "sorted", "enumerate", "max", "enumerate", "gene.append", "range", "NotImplementedError", "gene.append", "len", "gene.append", "max", "range", "len", "range", "len"], "function", ["None"], ["", "def", "parse", "(", "weights", ",", "operation_set", ",", "\n", "op_threshold", ",", "parse_method", ",", "steps", ")", ":", "\n", "  ", "gene", "=", "[", "]", "\n", "if", "parse_method", "==", "'darts'", ":", "\n", "    ", "n", "=", "2", "\n", "start", "=", "0", "\n", "for", "i", "in", "range", "(", "steps", ")", ":", "# step = 4", "\n", "      ", "end", "=", "start", "+", "n", "\n", "W", "=", "weights", "[", "start", ":", "end", "]", ".", "copy", "(", ")", "\n", "edges", "=", "sorted", "(", "range", "(", "i", "+", "2", ")", ",", "key", "=", "lambda", "x", ":", "-", "max", "(", "W", "[", "x", "]", "[", "k", "]", "for", "k", "in", "range", "(", "len", "(", "W", "[", "x", "]", ")", ")", ")", ")", "[", ":", "2", "]", "\n", "for", "j", "in", "edges", ":", "\n", "        ", "k_best", "=", "None", "\n", "for", "k", "in", "range", "(", "len", "(", "W", "[", "j", "]", ")", ")", ":", "\n", "            ", "if", "k_best", "is", "None", "or", "W", "[", "j", "]", "[", "k", "]", ">", "W", "[", "j", "]", "[", "k_best", "]", ":", "\n", "              ", "k_best", "=", "k", "\n", "", "", "gene", ".", "append", "(", "(", "operation_set", "[", "k_best", "]", ",", "j", ")", ")", "# geno item : (operation, node idx)", "\n", "", "start", "=", "end", "\n", "n", "+=", "1", "\n", "", "", "elif", "'threshold'", "in", "parse_method", ":", "\n", "    ", "n", "=", "2", "\n", "start", "=", "0", "\n", "for", "i", "in", "range", "(", "steps", ")", ":", "# step = 4", "\n", "      ", "end", "=", "start", "+", "n", "\n", "W", "=", "weights", "[", "start", ":", "end", "]", ".", "copy", "(", ")", "\n", "if", "'edge'", "in", "parse_method", "or", "'complete'", "in", "parse_method", ":", "\n", "        ", "edges", "=", "list", "(", "range", "(", "i", "+", "2", ")", ")", "\n", "", "else", ":", "# select edges using darts methods", "\n", "        ", "edges", "=", "sorted", "(", "range", "(", "i", "+", "2", ")", ",", "key", "=", "lambda", "x", ":", "-", "max", "(", "W", "[", "x", "]", "[", "k", "]", "for", "k", "in", "range", "(", "len", "(", "W", "[", "x", "]", ")", ")", ")", ")", "[", ":", "2", "]", "\n", "\n", "", "for", "j", "in", "edges", ":", "\n", "        ", "if", "'edge'", "in", "parse_method", ":", "# OP_{prob > T} AND |Edge| <= 2", "\n", "          ", "topM", "=", "sorted", "(", "enumerate", "(", "W", "[", "j", "]", ")", ",", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ")", "[", "-", "2", ":", "]", "\n", "for", "k", ",", "v", "in", "topM", ":", "# Get top M = 2 operations for one edge", "\n", "            ", "if", "W", "[", "j", "]", "[", "k", "]", ">=", "op_threshold", ":", "\n", "              ", "gene", ".", "append", "(", "(", "operation_set", "[", "k", "]", ",", "i", "+", "2", ",", "j", ")", ")", "\n", "", "", "", "elif", "'complete'", "in", "parse_method", ":", "# OP_{prob > T}", "\n", "          ", "for", "k", ",", "_", "in", "enumerate", "(", "W", "[", "j", "]", ")", ":", "\n", "            ", "if", "W", "[", "j", "]", "[", "k", "]", ">=", "op_threshold", ":", "\n", "              ", "gene", ".", "append", "(", "(", "operation_set", "[", "k", "]", ",", "i", "+", "2", ",", "j", ")", ")", "\n", "", "", "", "elif", "'sparse'", "in", "parse_method", ":", "# max( OP_{prob > T} ) and |Edge| <= 2", "\n", "          ", "k_best", "=", "None", "\n", "for", "k", "in", "range", "(", "len", "(", "W", "[", "j", "]", ")", ")", ":", "\n", "            ", "if", "k_best", "is", "None", "or", "W", "[", "j", "]", "[", "k", "]", ">", "W", "[", "j", "]", "[", "k_best", "]", ":", "\n", "              ", "k_best", "=", "k", "\n", "", "", "if", "W", "[", "j", "]", "[", "k_best", "]", ">=", "op_threshold", ":", "\n", "            ", "gene", ".", "append", "(", "(", "operation_set", "[", "k_best", "]", ",", "i", "+", "2", ",", "j", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "\"Not support parse method: {}\"", ".", "format", "(", "parse_method", ")", ")", "\n", "", "", "start", "=", "end", "\n", "n", "+=", "1", "\n", "", "", "return", "gene", "\n", "\n"]], "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.utils.parse_genotype": [[268, 286], ["range", "range", "genotypes.Genotype_nested", "genes.append", "print", "os.path.join", "utils.parse", "os.path.exists", "os.makedirs", "open", "f.write", "print", "str", "str"], "function", ["home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.utils.parse"], ["def", "parse_genotype", "(", "alphas", ",", "steps", ",", "multiplier", ",", "path", "=", "None", ",", "\n", "parse_method", "=", "'threshold_sparse'", ",", "op_threshold", "=", "0.85", ",", "reductions", "=", "[", "]", ",", "model_name", "=", "''", ",", "dartopti", "=", "False", ")", ":", "\n", "  ", "genes", "=", "[", "]", "\n", "prims", "=", "PRIMITIVES", "if", "dartopti", "else", "PRIMITIVES_DARTS", "\n", "for", "i", "in", "range", "(", "alphas", ".", "shape", "[", "0", "]", ")", ":", "\n", "    ", "genes", ".", "append", "(", "parse", "(", "alphas", "[", "i", "]", ",", "prims", ",", "op_threshold", ",", "parse_method", ",", "steps", ")", ")", "\n", "", "concat", "=", "range", "(", "2", "+", "steps", "-", "multiplier", ",", "steps", "+", "2", ")", "\n", "genotype", "=", "Genotype_nested", "(", "genes", "=", "genes", ",", "concat", "=", "concat", ",", "reductions", "=", "reductions", ")", "\n", "\n", "if", "path", "is", "not", "None", ":", "\n", "      ", "if", "not", "os", ".", "path", ".", "exists", "(", "path", ")", ":", "\n", "          ", "os", ".", "makedirs", "(", "path", ")", "\n", "", "print", "(", "'Architecture parsing....\\n'", ",", "genotype", ")", "\n", "save_path", "=", "os", ".", "path", ".", "join", "(", "path", ",", "model_name", "+", "'_'", "+", "parse_method", "+", "'_'", "+", "str", "(", "op_threshold", ")", "+", "'.txt'", ")", "\n", "with", "open", "(", "save_path", ",", "\"w+\"", ")", "as", "f", ":", "\n", "          ", "f", ".", "write", "(", "str", "(", "genotype", ")", ")", "\n", "print", "(", "'Save in :'", ",", "save_path", ")", "\n", "", "", "return", "genotype", "\n", "\n"]], "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.utils.save_file": [[289, 310], ["matplotlib.subplots", "recoder.items", "fig.savefig", "matplotlib.tight_layout", "print", "axs[].set_title", "axs[].plot", "os.path.exists", "os.makedirs", "os.path.join", "open", "json.dump", "print", "os.path.join", "os.path.join", "os.path.join"], "function", ["None"], ["def", "save_file", "(", "recoder", ",", "size", "=", "(", "14", ",", "7", ")", ",", "path", "=", "'./'", ")", ":", "\n", "    ", "fig", ",", "axs", "=", "plt", ".", "subplots", "(", "*", "size", ",", "figsize", "=", "(", "36", ",", "98", ")", ")", "\n", "num_ops", "=", "size", "[", "1", "]", "\n", "row", "=", "0", "\n", "col", "=", "0", "\n", "for", "(", "k", ",", "v", ")", "in", "recoder", ".", "items", "(", ")", ":", "\n", "        ", "axs", "[", "row", ",", "col", "]", ".", "set_title", "(", "k", ")", "\n", "axs", "[", "row", ",", "col", "]", ".", "plot", "(", "v", ",", "'r+'", ")", "\n", "if", "col", "==", "num_ops", "-", "1", ":", "\n", "            ", "col", "=", "0", "\n", "row", "+=", "1", "\n", "", "else", ":", "\n", "            ", "col", "+=", "1", "\n", "", "", "if", "not", "os", ".", "path", ".", "exists", "(", "path", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "path", ")", "\n", "", "fig", ".", "savefig", "(", "os", ".", "path", ".", "join", "(", "path", ",", "'output.png'", ")", ",", "bbox_inches", "=", "'tight'", ")", "\n", "plt", ".", "tight_layout", "(", ")", "\n", "print", "(", "'save history weight in {}'", ".", "format", "(", "os", ".", "path", ".", "join", "(", "path", ",", "'output.png'", ")", ")", ")", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "path", ",", "'history_weight.json'", ")", ",", "'w'", ")", "as", "outf", ":", "\n", "        ", "json", ".", "dump", "(", "recoder", ",", "outf", ")", "\n", "print", "(", "'save history weight in {}'", ".", "format", "(", "os", ".", "path", ".", "join", "(", "path", ",", "'history_weight.json'", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.utils.convert_genotype": [[311, 316], ["isinstance", "genotypes.Genotype_nested"], "function", ["None"], ["", "", "def", "convert_genotype", "(", "genotype", ")", ":", "\n", "  ", "if", "isinstance", "(", "genotype", ",", "Genotype_opt", ")", ":", "\n", "    ", "genes", "=", "[", "genotype", ".", "genes", "[", "i", "]", "for", "i", "in", "genotype", ".", "seq", "]", "\n", "genotype", "=", "Genotype_nested", "(", "genes", ",", "genotype", ".", "concat", ",", "genotype", ".", "reductions", ")", "\n", "", "return", "genotype", "\n", "\n"]], "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.graph_distance.Vertex.__init__": [[21, 35], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "nb", ",", "label", ",", "weight", ")", ":", "\n", "        ", "\"\"\"\n        constructor\n        @param      nb      (int) index of the vertex\n        @param      label   (str) label\n        @para       weight  (float)\n        \"\"\"", "\n", "self", ".", "nb", "=", "nb", "# kind of id", "\n", "self", ".", "label", "=", "label", "# label", "\n", "self", ".", "pair", "=", "(", "None", ",", "None", ")", "\n", "self", ".", "edges", "=", "{", "}", "\n", "self", ".", "predE", "=", "{", "}", "\n", "self", ".", "succE", "=", "{", "}", "\n", "self", ".", "weight", "=", "weight", "\n", "\n"]], "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.graph_distance.Vertex.__str__": [[36, 41], ["None"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        usual\n        \"\"\"", "\n", "return", "'{}'", ".", "format", "(", "self", ".", "Label", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.graph_distance.Vertex.__repr__": [[42, 47], ["repr", "repr"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        usual\n        \"\"\"", "\n", "return", "\"Vertex({}, {}, {})\"", ".", "format", "(", "repr", "(", "self", ".", "nb", ")", ",", "repr", "(", "self", ".", "Label", ")", ",", "self", ".", "weight", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.graph_distance.Vertex.is_vertex": [[48, 53], ["None"], "methods", ["None"], ["", "def", "is_vertex", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        returns True\n        \"\"\"", "\n", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.graph_distance.Vertex.is_edge": [[54, 59], ["None"], "methods", ["None"], ["", "def", "is_edge", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        returns False\n        \"\"\"", "\n", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.graph_distance.Vertex.Label": [[60, 66], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "Label", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        returns the label\n        \"\"\"", "\n", "return", "self", ".", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.graph_distance.Edge.__init__": [[73, 92], ["AssertionError", "AssertionError"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "from_", ",", "to", ",", "label", ",", "weight", ")", ":", "\n", "        ", "\"\"\"\n        constructor\n        @param  from_       (int)\n        @param  to          (int)\n        @param  label       (str)\n        @param  weight      (float)\n\n        ``'00'`` means the beginning of a graph, ``'11'`` the end.\n        \"\"\"", "\n", "self", ".", "from_", ",", "self", ".", "to", "=", "from_", ",", "to", "\n", "self", ".", "nb", "=", "from_", ",", "to", "\n", "self", ".", "label", "=", "label", "\n", "self", ".", "pair", "=", "(", "None", ",", "None", ")", "\n", "self", ".", "weight", "=", "weight", "\n", "if", "self", ".", "from_", "==", "\"00\"", "and", "self", ".", "to", "==", "\"00\"", ":", "\n", "            ", "raise", "AssertionError", "(", "\"should not happen\"", ")", "# pragma: no cover", "\n", "", "if", "self", ".", "from_", "==", "\"11\"", "and", "self", ".", "to", "==", "\"11\"", ":", "\n", "            ", "raise", "AssertionError", "(", "\"should not happen\"", ")", "# pragma: no cover", "\n", "\n"]], "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.graph_distance.Edge.__str__": [[93, 98], ["None"], "methods", ["None"], ["", "", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        usual\n        \"\"\"", "\n", "return", "\"{} -> {} [{}] w: {}\"", ".", "format", "(", "self", ".", "nb", "[", "0", "]", ",", "self", ".", "nb", "[", "1", "]", ",", "self", ".", "Label", ",", "self", ".", "weight", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.graph_distance.Edge.__repr__": [[99, 104], ["repr", "repr", "repr"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        usual\n        \"\"\"", "\n", "return", "\"Edge({}, {}, {}, {})\"", ".", "format", "(", "repr", "(", "self", ".", "nb", "[", "0", "]", ")", ",", "repr", "(", "self", ".", "nb", "[", "1", "]", ")", ",", "repr", "(", "self", ".", "Label", ")", ",", "self", ".", "weight", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.graph_distance.Edge.is_vertex": [[105, 110], ["None"], "methods", ["None"], ["", "def", "is_vertex", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        returns False\n        \"\"\"", "\n", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.graph_distance.Edge.is_edge": [[111, 116], ["None"], "methods", ["None"], ["", "def", "is_edge", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        returns True\n        \"\"\"", "\n", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.graph_distance.Edge.Label": [[117, 123], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "Label", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        returns the label\n        \"\"\"", "\n", "return", "self", ".", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.graph_distance.GraphDistance.get_list_of_vertices": [[157, 166], ["list", "list.sort", "unique.keys"], "methods", ["None"], ["@", "staticmethod", "\n", "def", "get_list_of_vertices", "(", "graph", ")", ":", "\n", "        ", "edges", "=", "[", "edge", "[", ":", "2", "]", "for", "edge", "in", "graph", "]", "\n", "unique", "=", "{", "}", "\n", "for", "i", ",", "j", "in", "edges", ":", "\n", "            ", "unique", "[", "i", "]", "=", "unique", "[", "j", "]", "=", "1", "\n", "", "vertices", "=", "list", "(", "unique", ".", "keys", "(", ")", ")", "\n", "vertices", ".", "sort", "(", ")", "\n", "return", "vertices", "\n", "\n"]], "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.graph_distance.GraphDistance.__init__": [[167, 196], ["isinstance", "dict", "graph_distance.GraphDistance.load_from_file", "graph_distance.GraphDistance.get_list_of_vertices", "graph_distance.GraphDistance._private__init__", "graph_distance.Vertex", "graph_distance.Edge", "dict.get", "str", "str", "len", "len"], "methods", ["home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.graph_distance.GraphDistance.load_from_file", "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.graph_distance.GraphDistance.get_list_of_vertices", "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.graph_distance.GraphDistance._private__init__"], ["", "def", "__init__", "(", "self", ",", "edge_list", ",", "vertex_label", "=", "None", ",", "add_loop", "=", "False", ",", "\n", "weight_vertex", "=", "1.", ",", "weight_edge", "=", "1.", ")", ":", "\n", "        ", "\"\"\"\n        constructor\n\n        @param      edge_list        list of edges\n        @param      add_loop         automatically add a loop on each vertex (an edge from a vertex to itself)\n        @param      weight_vertex    weight for every vertex\n        @param      weight_edge      weight for every edge\n        \"\"\"", "\n", "if", "vertex_label", "is", "None", ":", "\n", "            ", "vertex_label", "=", "dict", "(", ")", "\n", "", "if", "isinstance", "(", "edge_list", ",", "str", ")", ":", "\n", "            ", "self", ".", "load_from_file", "(", "edge_list", ",", "add_loop", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "vertices", "=", "{", "}", "\n", "self", ".", "edges", "=", "{", "}", "\n", "self", ".", "labelBegin", "=", "\"00\"", "\n", "self", ".", "labelEnd", "=", "\"11\"", "\n", "vid", "=", "GraphDistance", ".", "get_list_of_vertices", "(", "edge_list", ")", "\n", "for", "u", "in", "vid", ":", "\n", "                ", "self", ".", "vertices", "[", "u", "]", "=", "Vertex", "(", "\n", "u", ",", "vertex_label", ".", "get", "(", "u", ",", "str", "(", "u", ")", ")", ",", "weight_vertex", ")", "\n", "", "for", "e", "in", "edge_list", ":", "\n", "                ", "i", ",", "j", "=", "e", "[", ":", "2", "]", "\n", "ls", "=", "\"\"", "if", "len", "(", "e", ")", "<", "3", "else", "e", "[", "2", "]", "\n", "w", "=", "weight_edge", "if", "len", "(", "e", ")", "<", "4", "else", "e", "[", "3", "]", "#if custom weight edge is used, custom label is mandatory too ", "\n", "self", ".", "edges", "[", "i", ",", "j", "]", "=", "Edge", "(", "i", ",", "j", ",", "str", "(", "ls", ")", ",", "w", ")", "\n", "", "self", ".", "_private__init__", "(", "add_loop", ",", "weight_vertex", ",", "weight_edge", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.graph_distance.GraphDistance.__getitem__": [[197, 209], ["isinstance", "isinstance", "KeyError", "str"], "methods", ["None"], ["", "", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"\n        returns a vertex or an edge if no vertex with the given index was found\n        @param      index   id (index) to look for\n        @return             Vertex or Edge\n        \"\"\"", "\n", "if", "isinstance", "(", "index", ",", "str", ")", ":", "\n", "            ", "return", "self", ".", "vertices", "[", "index", "]", "\n", "", "if", "isinstance", "(", "index", ",", "tuple", ")", ":", "\n", "            ", "return", "self", ".", "edges", "[", "index", "]", "\n", "", "raise", "KeyError", "(", "# pragma: no cover", "\n", "\"unable to get element \"", "+", "str", "(", "index", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.graph_distance.GraphDistance.load_from_file": [[210, 237], ["open().readlines", "re.compile", "re.compile", "graph_distance.GraphDistance", "line.strip.strip.strip", "re.compile.search", "re.compile.search", "OSError", "open", "re.compile.search.groups", "edge_list.append", "len", "len", "re.compile.search.groups"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "load_from_file", "(", "filename", ",", "add_loop", ")", ":", "\n", "        ", "\"\"\"\n        loads a graph from a file\n        @param      filename        file name\n        @param      add_loop         @see me __init__\n        \"\"\"", "\n", "lines", "=", "open", "(", "filename", ",", "\"r\"", ")", ".", "readlines", "(", ")", "\n", "regV", "=", "re", ".", "compile", "(", "\"\\\\\\\"?([a-z0-9_]+)\\\\\\\"? *[[]label=\\\\\\\"(.*)\\\\\\\"[]]\"", ")", "\n", "regE", "=", "re", ".", "compile", "(", "\"\\\\\\\"?([a-z0-9_]+)\\\\\\\"? *-> *\\\\\\\"?\"", "+", "\n", "\"([a-z0-9_]+)\\\\\\\"? *[[]label=\\\\\\\"(.*)\\\\\\\"[]]\"", ")", "\n", "edge_list", "=", "[", "]", "\n", "vertex_label", "=", "{", "}", "\n", "for", "line", "in", "lines", ":", "\n", "            ", "line", "=", "line", ".", "strip", "(", "\"\\r\\n ;\"", ")", "\n", "ed", "=", "regE", ".", "search", "(", "line", ")", "\n", "ve", "=", "regV", ".", "search", "(", "line", ")", "\n", "if", "ed", ":", "\n", "                ", "g", "=", "ed", ".", "groups", "(", ")", "\n", "edge_list", ".", "append", "(", "(", "g", "[", "0", "]", ",", "g", "[", "1", "]", ",", "g", "[", "2", "]", ")", ")", "\n", "", "elif", "ve", ":", "\n", "                ", "g", "=", "ve", ".", "groups", "(", ")", "\n", "vertex_label", "[", "g", "[", "0", "]", "]", "=", "g", "[", "1", "]", "\n", "", "", "if", "len", "(", "vertex_label", ")", "==", "0", "or", "len", "(", "edge_list", ")", "==", "0", ":", "\n", "            ", "raise", "OSError", "(", "# pragma: no cover", "\n", "\"Unable to parse file %r.\"", "%", "filename", ")", "\n", "", "return", "GraphDistance", "(", "edge_list", ",", "vertex_label", ",", "add_loop", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.graph_distance.GraphDistance.load_from_darts_genotype": [[238, 269], ["enumerate", "edge_list.append", "graph_distance.GraphDistance", "open", "json.load", "enumerate", "edge_list.append", "edge_list.append", "edge_list.append", "cell_edge_list.append", "len"], "methods", ["home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.utils.load"], ["", "@", "staticmethod", "\n", "def", "load_from_darts_genotype", "(", "genotype", ",", "op_stats_filepath", "=", "\"op_stats.json\"", ")", ":", "\n", "        ", "with", "open", "(", "op_stats_filepath", ")", "as", "f", ":", "\n", "            ", "op_stats", "=", "json", ".", "load", "(", "f", ")", "\n", "\n", "", "edge_list", "=", "[", "(", "'00'", ",", "'c0_0'", ",", "\"\"", ",", "1", ")", ",", "(", "'00'", ",", "'c0_1'", ",", "\"\"", ",", "1", ")", "]", "\n", "last_to", "=", "None", "\n", "prev_last_to", "=", "None", "\n", "for", "i", ",", "cell_genotype", "in", "enumerate", "(", "genotype", ".", "genes", ")", ":", "\n", "            ", "if", "last_to", ":", "\n", "                ", "edge_list", ".", "append", "(", "(", "f\"c{i-1}_{last_to}\"", ",", "f\"c{i}_1\"", ",", "\"\"", ",", "1", ")", ")", "\n", "c_prev_prev", "=", "(", "\"00\"", ",", "f\"c{i}_0\"", ",", "\"\"", ",", "1", ")", "if", "i", "==", "1", "else", "(", "f\"c{i-2}_{prev_last_to}\"", ",", "f\"c{i}_0\"", ",", "\"\"", ",", "1", ")", "\n", "edge_list", ".", "append", "(", "c_prev_prev", ")", "\n", "", "cell_edge_list", "=", "[", "]", "\n", "for", "_", ",", "to", ",", "from_", "in", "cell_genotype", ":", "\n", "                ", "if", "(", "from_", ",", "to", ")", "not", "in", "cell_edge_list", ":", "\n", "                    ", "cell_edge_list", ".", "append", "(", "(", "from_", ",", "to", ")", ")", "\n", "\n", "", "", "for", "j", ",", "(", "from_", ",", "to", ")", "in", "enumerate", "(", "cell_edge_list", ")", ":", "\n", "                ", "edge_label", "=", "\"\"", "\n", "edge_weight", "=", "0", "\n", "for", "op", ",", "t", ",", "f", "in", "cell_genotype", ":", "\n", "                    ", "if", "t", "==", "to", "and", "f", "==", "from_", ":", "\n", "                        ", "edge_label", "+=", "f\";{op}\"", "if", "edge_label", "!=", "\"\"", "else", "f\"{op}\"", "\n", "edge_weight", "+=", "op_stats", "[", "op", "]", "\n", "", "", "edge_list", ".", "append", "(", "(", "f\"c{i}_{from_}\"", ",", "f\"c{i}_{to}\"", ",", "edge_label", ",", "edge_weight", ")", ")", "\n", "\n", "", "prev_last_to", "=", "last_to", "\n", "_", ",", "last_to", "=", "cell_edge_list", "[", "-", "1", "]", "\n", "", "edge_list", ".", "append", "(", "(", "f\"c{len(genotype.genes)-1}_{last_to}\"", ",", "'11'", ",", "\"\"", ",", "1", ")", ")", "\n", "return", "GraphDistance", "(", "edge_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.graph_distance.GraphDistance.load_from_darts_cell": [[270, 290], ["enumerate", "graph_distance.GraphDistance", "open", "json.load", "edge_list.append", "cell_edge_list.append", "str", "str"], "methods", ["home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.utils.load"], ["", "@", "staticmethod", "\n", "def", "load_from_darts_cell", "(", "cell_genotype", ",", "op_stats_filepath", "=", "\"op_stats.json\"", ")", ":", "\n", "        ", "with", "open", "(", "op_stats_filepath", ")", "as", "f", ":", "\n", "            ", "op_stats", "=", "json", ".", "load", "(", "f", ")", "\n", "\n", "", "edge_list", "=", "[", "]", "\n", "cell_edge_list", "=", "[", "]", "\n", "for", "_", ",", "to", ",", "from_", "in", "cell_genotype", ":", "\n", "            ", "if", "(", "from_", ",", "to", ")", "not", "in", "cell_edge_list", ":", "\n", "                ", "cell_edge_list", ".", "append", "(", "(", "from_", ",", "to", ")", ")", "\n", "\n", "", "", "for", "j", ",", "(", "from_", ",", "to", ")", "in", "enumerate", "(", "cell_edge_list", ")", ":", "\n", "            ", "edge_label", "=", "\"\"", "\n", "edge_weight", "=", "0", "\n", "for", "op", ",", "t", ",", "f", "in", "cell_genotype", ":", "\n", "                ", "if", "t", "==", "to", "and", "f", "==", "from_", ":", "\n", "                    ", "edge_label", "+=", "f\";{op}\"", "if", "edge_label", "!=", "\"\"", "else", "f\"{op}\"", "\n", "edge_weight", "+=", "op_stats", "[", "op", "]", "\n", "", "", "edge_list", ".", "append", "(", "(", "str", "(", "from_", ")", ",", "str", "(", "to", ")", ",", "edge_label", ",", "edge_weight", ")", ")", "\n", "", "return", "GraphDistance", "(", "edge_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.graph_distance.GraphDistance._private__init__": [[293, 301], ["graph_distance.GraphDistance.connect_root_and_leave", "graph_distance.GraphDistance.compute_predecessor", "graph_distance.GraphDistance.compute_successor", "graph_distance.Edge"], "methods", ["home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.graph_distance.GraphDistance.connect_root_and_leave", "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.graph_distance.GraphDistance.compute_predecessor", "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.graph_distance.GraphDistance.compute_successor"], ["", "def", "_private__init__", "(", "self", ",", "add_loop", ",", "weight_vertex", ",", "weight_edge", ")", ":", "\n", "        ", "if", "add_loop", ":", "\n", "            ", "for", "k", "in", "self", ".", "vertices", ":", "\n", "                ", "if", "k", "not", "in", "(", "self", ".", "labelBegin", ",", "self", ".", "labelEnd", ")", ":", "\n", "                    ", "self", ".", "edges", "[", "k", ",", "k", "]", "=", "Edge", "(", "k", ",", "k", ",", "\"\"", ",", "weight_edge", ")", "\n", "", "", "", "self", ".", "connect_root_and_leave", "(", "weight_vertex", ",", "weight_edge", ")", "\n", "self", ".", "compute_predecessor", "(", ")", "\n", "self", ".", "compute_successor", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.graph_distance.GraphDistance.connect_root_and_leave": [[302, 327], ["graph_distance.GraphDistance.get_order_vertices", "graph_distance.GraphDistance.items", "graph_distance.Vertex", "graph_distance.Edge", "vert.items", "graph_distance.Vertex", "graph_distance.Edge"], "methods", ["home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.graph_distance.GraphDistance.get_order_vertices"], ["", "def", "connect_root_and_leave", "(", "self", ",", "weight_vertex", ",", "weight_edge", ")", ":", "\n", "        ", "order", "=", "self", ".", "get_order_vertices", "(", ")", "\n", "roots", "=", "[", "v", "for", "v", ",", "k", "in", "order", ".", "items", "(", ")", "if", "k", "==", "0", "]", "\n", "vert", "=", "{", "}", "\n", "for", "o", "in", "order", ":", "\n", "            ", "vert", "[", "o", "]", "=", "0", "\n", "", "for", "k", "in", "self", ".", "edges", ":", "\n", "            ", "if", "k", "[", "0", "]", "!=", "k", "[", "1", "]", ":", "\n", "                ", "vert", "[", "k", "[", "0", "]", "]", "+=", "1", "\n", "", "", "for", "r", "in", "roots", ":", "\n", "            ", "if", "self", ".", "labelBegin", "not", "in", "self", ".", "vertices", ":", "\n", "                ", "self", ".", "vertices", "[", "self", ".", "labelBegin", "]", "=", "Vertex", "(", "\n", "self", ".", "labelBegin", ",", "self", ".", "labelBegin", ",", "weight_vertex", ")", "\n", "", "if", "r", "!=", "self", ".", "labelBegin", ":", "\n", "                ", "self", ".", "edges", "[", "self", ".", "labelBegin", ",", "r", "]", "=", "Edge", "(", "\n", "self", ".", "labelBegin", ",", "r", ",", "\"\"", ",", "weight_edge", ")", "\n", "\n", "", "", "leaves", "=", "[", "k", "for", "k", ",", "v", "in", "vert", ".", "items", "(", ")", "if", "v", "==", "0", "]", "\n", "for", "r", "in", "leaves", ":", "\n", "            ", "if", "self", ".", "labelEnd", "not", "in", "self", ".", "vertices", ":", "\n", "                ", "self", ".", "vertices", "[", "self", ".", "labelEnd", "]", "=", "Vertex", "(", "\n", "self", ".", "labelEnd", ",", "self", ".", "labelEnd", ",", "weight_vertex", ")", "\n", "", "if", "r", "!=", "self", ".", "labelEnd", ":", "\n", "                ", "self", ".", "edges", "[", "r", ",", "self", ".", "labelEnd", "]", "=", "Edge", "(", "\n", "r", ",", "self", ".", "labelEnd", ",", "\"\"", ",", "weight_edge", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.graph_distance.GraphDistance.get_order_vertices": [[328, 345], ["None"], "methods", ["None"], ["", "", "", "def", "get_order_vertices", "(", "self", ")", ":", "\n", "        ", "edges", "=", "self", ".", "edges", "\n", "order", "=", "{", "}", "\n", "for", "k", "in", "edges", ":", "\n", "            ", "order", "[", "k", "[", "0", "]", "]", "=", "0", "\n", "order", "[", "k", "[", "1", "]", "]", "=", "0", "\n", "\n", "", "modif", "=", "1", "\n", "while", "modif", ">", "0", ":", "\n", "            ", "modif", "=", "0", "\n", "for", "k", "in", "edges", ":", "\n", "                ", "i", ",", "j", "=", "k", "\n", "if", "i", "!=", "j", "and", "order", "[", "j", "]", "<=", "order", "[", "i", "]", ":", "\n", "                    ", "order", "[", "j", "]", "=", "order", "[", "i", "]", "+", "1", "\n", "modif", "+=", "1", "\n", "\n", "", "", "", "return", "order", "\n", "\n"]], "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.graph_distance.GraphDistance.__str__": [[346, 356], ["graph_distance.GraphDistance.vertices.values", "graph_distance.GraphDistance.edges.items", "li.append", "li.append", "str", "str"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        usual\n        \"\"\"", "\n", "li", "=", "[", "]", "\n", "for", "v", "in", "self", ".", "vertices", ".", "values", "(", ")", ":", "\n", "            ", "li", ".", "append", "(", "str", "(", "v", ")", ")", "\n", "", "for", "k", ",", "e", "in", "self", ".", "edges", ".", "items", "(", ")", ":", "\n", "            ", "li", ".", "append", "(", "str", "(", "e", ")", ")", "\n", "", "return", "\"\\n\"", ".", "join", "(", "li", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.graph_distance.GraphDistance.__repr__": [[357, 365], ["repr", "sorted", "repr", "sorted", "graph_distance.GraphDistance.edges.items", "graph_distance.GraphDistance.vertices.items"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        usual\n        \"\"\"", "\n", "edges", "=", "\", \"", ".", "join", "(", "repr", "(", "v", ")", "for", "_", ",", "v", "in", "sorted", "(", "self", ".", "edges", ".", "items", "(", ")", ")", ")", "\n", "vertices", "=", "\", \"", ".", "join", "(", "\"'{}': {}\"", ".", "format", "(", "k", ",", "repr", "(", "v", ")", ")", "\n", "for", "k", ",", "v", "in", "sorted", "(", "self", ".", "vertices", ".", "items", "(", ")", ")", ")", "\n", "return", "\"GraphDistance(\\n    [{0}],\\n    {{{1}}})\"", ".", "format", "(", "edges", ",", "vertices", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.graph_distance.GraphDistance.compute_predecessor": [[366, 378], ["pred.items"], "methods", ["None"], ["", "def", "compute_predecessor", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        usual\n        \"\"\"", "\n", "pred", "=", "{", "}", "\n", "for", "i", ",", "j", "in", "self", ".", "edges", ":", "\n", "            ", "if", "j", "not", "in", "pred", ":", "\n", "                ", "pred", "[", "j", "]", "=", "{", "}", "\n", "", "pred", "[", "j", "]", "[", "i", ",", "j", "]", "=", "0", "\n", "", "for", "k", ",", "v", "in", "pred", ".", "items", "(", ")", ":", "\n", "            ", "for", "n", "in", "v", ":", "\n", "                ", "self", ".", "vertices", "[", "k", "]", ".", "predE", "[", "n", "]", "=", "self", ".", "edges", "[", "n", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.graph_distance.GraphDistance.compute_successor": [[379, 388], ["succ.items"], "methods", ["None"], ["", "", "", "def", "compute_successor", "(", "self", ")", ":", "\n", "        ", "succ", "=", "{", "}", "\n", "for", "i", ",", "j", "in", "self", ".", "edges", ":", "\n", "            ", "if", "i", "not", "in", "succ", ":", "\n", "                ", "succ", "[", "i", "]", "=", "{", "}", "\n", "", "succ", "[", "i", "]", "[", "i", ",", "j", "]", "=", "i", ",", "j", "\n", "", "for", "k", ",", "v", "in", "succ", ".", "items", "(", ")", ":", "\n", "            ", "for", "n", "in", "v", ":", "\n", "                ", "self", ".", "vertices", "[", "k", "]", ".", "succE", "[", "n", "]", "=", "self", ".", "edges", "[", "n", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.graph_distance.GraphDistance.get_matching_functions": [[389, 499], ["TypeError", "TypeError", "TypeError", "TypeError", "v1.is_vertex", "v2.is_vertex", "e1.is_edge", "e2.is_edge"], "methods", ["home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.graph_distance.Edge.is_vertex", "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.graph_distance.Edge.is_vertex", "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.graph_distance.Edge.is_edge", "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.graph_distance.Edge.is_edge"], ["", "", "", "def", "get_matching_functions", "(", "self", ",", "function_mach_vertices", ",", "function_match_edges", ",", "\n", "cost", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        returns default matching functions between two vertices and two edges\n        @param      function_mach_vertices   if not None, this function is returned, othewise, it returns a new fonction.\n                                             See below.\n        @param      function_match_edges     if not None, this function is returned, othewise, it returns a new fonction.\n                                             See below.\n        @param      cost                     if True, the returned function should return a float, otherwise a boolean\n        @return                              a pair of functions\n\n        Example for * if cost is False:\n\n        ::\n\n            lambda v1,v2,g1,g2,w1,w2 : v1.label == v2.label\n\n        Example for *function_mach_vertices* if cost is True:\n\n        ::\n\n            def tempF1 (v1,v2,g1,g2,w1,w2) :\n                if v1 is not None and not v1.is_vertex() : raise TypeError(\"should be a vertex\")\n                if v2 is not None and not v2.is_vertex() : raise TypeError(\"should be a vertex\")\n                if v1 is None and v2 is None : return 0\n                elif v1 is None or v2 is None :\n                    return v2.weight*w2 if v1 is None else v1.weight*w1\n                else :\n                    return 0 if v1.label == v2.label else 0.5*(v1.weight*w1 + v2.weight*w2)\n\n        Example for *function_match_edges* if cost is False:\n\n        ::\n\n            lambda e1,e2,g1,g2,w1,w2 : e1.label == e2.label and\n                        (e1.from_ != e1.to or e2.from_ != e2.to) and\n                        (e1.from_ != self.labelBegin or e1.to != self.labelBegin) and\n                        (e1.from_ != self.labelEnd or e1.to != self.labelEnd)\n\n        Example if cost is True:\n\n        ::\n\n            def tempF2 (e1,e2,g1,g2,w1,w2) :\n                if e1 is not None and not e1.is_edge() : raise TypeError(\"should be an edge\")\n                if e2 is not None and not e2.is_edge() : raise TypeError(\"should be an edge\")\n                if e1 is None and e2 is None : return 0\n                elif e1 is None or e2 is None :\n                    return e2.weight*w2 if e1 is None else e1.weight*w1\n                elif e1.label != e2.label : return 0.5*(e1.weight*w1 + e2.weight*w2)\n                else :\n                    lab1 = g1.vertices [e1.from_].label == g2.vertices [e2.from_].label\n                    lab2 = g1.vertices [e1.to].label == g2.vertices [e2.to].label\n                    if lab1 and lab2 : return 0\n                    else :  return e1.weight*w1 + e2.weight*w2\n\n        \"\"\"", "\n", "if", "cost", ":", "\n", "\n", "            ", "if", "function_mach_vertices", "is", "None", ":", "\n", "                ", "def", "tempF1", "(", "v1", ",", "v2", ",", "g1", ",", "g2", ",", "w1", ",", "w2", ")", ":", "\n", "                    ", "if", "v1", "is", "not", "None", "and", "not", "v1", ".", "is_vertex", "(", ")", ":", "\n", "                        ", "raise", "TypeError", "(", "\n", "\"should be a vertex\"", ")", "# pragma: no cover", "\n", "", "if", "v2", "is", "not", "None", "and", "not", "v2", ".", "is_vertex", "(", ")", ":", "\n", "                        ", "raise", "TypeError", "(", "\n", "\"should be a vertex\"", ")", "# pragma: no cover", "\n", "", "if", "v1", "is", "None", "and", "v2", "is", "None", ":", "\n", "                        ", "return", "0", "\n", "", "if", "v1", "is", "None", "or", "v2", "is", "None", ":", "\n", "                        ", "return", "v2", ".", "weight", "*", "w2", "if", "v1", "is", "None", "else", "v1", ".", "weight", "*", "w1", "\n", "", "return", "0", "if", "v1", ".", "label", "==", "v2", ".", "label", "else", "0.5", "*", "(", "v1", ".", "weight", "*", "w1", "+", "v2", ".", "weight", "*", "w2", ")", "\n", "", "function_mach_vertices", "=", "tempF1", "\n", "\n", "", "if", "function_match_edges", "is", "None", ":", "\n", "                ", "def", "tempF2", "(", "e1", ",", "e2", ",", "g1", ",", "g2", ",", "w1", ",", "w2", ")", ":", "\n", "                    ", "if", "e1", "is", "not", "None", "and", "not", "e1", ".", "is_edge", "(", ")", ":", "\n", "                        ", "raise", "TypeError", "(", "\"should be an edge\"", ")", "\n", "", "if", "e2", "is", "not", "None", "and", "not", "e2", ".", "is_edge", "(", ")", ":", "\n", "                        ", "raise", "TypeError", "(", "\"should be an edge\"", ")", "\n", "", "if", "e1", "is", "None", "and", "e2", "is", "None", ":", "\n", "                        ", "return", "0", "\n", "", "elif", "e1", "is", "None", "or", "e2", "is", "None", ":", "\n", "                        ", "return", "e2", ".", "weight", "*", "w2", "if", "e1", "is", "None", "else", "e1", ".", "weight", "*", "w1", "\n", "", "elif", "e1", ".", "label", "!=", "e2", ".", "label", ":", "\n", "                        ", "return", "0.5", "*", "(", "e1", ".", "weight", "*", "w1", "+", "e2", ".", "weight", "*", "w2", ")", "\n", "", "else", ":", "\n", "                        ", "lab1", "=", "g1", ".", "vertices", "[", "\n", "e1", ".", "from_", "]", ".", "label", "==", "g2", ".", "vertices", "[", "e2", ".", "from_", "]", ".", "label", "\n", "lab2", "=", "g1", ".", "vertices", "[", "\n", "e1", ".", "to", "]", ".", "label", "==", "g2", ".", "vertices", "[", "e2", ".", "to", "]", ".", "label", "\n", "if", "lab1", "and", "lab2", ":", "\n", "                            ", "return", "0", "\n", "", "else", ":", "\n", "                            ", "return", "e1", ".", "weight", "*", "w1", "+", "e2", ".", "weight", "*", "w2", "\n", "\n", "", "", "", "function_match_edges", "=", "tempF2", "\n", "", "", "else", ":", "\n", "            ", "if", "function_mach_vertices", "is", "None", ":", "\n", "                ", "function_mach_vertices", "=", "lambda", "v1", ",", "v2", ",", "g1", ",", "g2", ",", "w1", ",", "w2", ":", "v1", ".", "label", "==", "v2", ".", "label", "\n", "", "if", "function_match_edges", "is", "None", ":", "\n", "                ", "function_match_edges", "=", "lambda", "e1", ",", "e2", ",", "g1", ",", "g2", ",", "w1", ",", "w2", ":", "e1", ".", "label", "==", "e2", ".", "label", "and", "(", "e1", ".", "from_", "!=", "e1", ".", "to", "or", "e2", ".", "from_", "!=", "e2", ".", "to", ")", "and", "(", "e1", ".", "from_", "!=", "self", ".", "labelBegin", "or", "e1", ".", "to", "!=", "self", ".", "labelBegin", ")", "and", "(", "e1", ".", "from_", "!=", "self", ".", "labelEnd", "or", "e1", ".", "to", "!=", "self", ".", "labelEnd", ")", "\n", "", "", "return", "function_mach_vertices", ",", "function_match_edges", "\n", "\n"]], "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.graph_distance.GraphDistance.common_paths": [[500, 557], ["graph_distance.GraphDistance.get_matching_functions", "graph_distance.GraphDistance", "graph_distance.Vertex", "GraphDistance.vertices.items", "add.items", "graph_distance.GraphDistance.compute_predecessor", "graph_distance.GraphDistance.clean_dead_ends", "len", "function_match_edges", "function_mach_vertices", "graph_distance.Vertex", "graph_distance.Edge"], "methods", ["home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.graph_distance.GraphDistance.get_matching_functions", "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.graph_distance.GraphDistance.compute_predecessor", "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.graph_distance.GraphDistance.clean_dead_ends"], ["", "def", "common_paths", "(", "self", ",", "graph2", ",", "\n", "function_mach_vertices", "=", "None", ",", "\n", "function_match_edges", "=", "None", ",", "\n", "noClean", "=", "False", ")", ":", "\n", "        ", "function_mach_vertices", ",", "function_match_edges", "=", "self", ".", "get_matching_functions", "(", "\n", "function_mach_vertices", ",", "function_match_edges", ")", "\n", "g", "=", "GraphDistance", "(", "[", "]", ")", "\n", "vfirst", "=", "Vertex", "(", "self", ".", "labelBegin", ",", "\"%s-%s\"", "%", "(", "self", ".", "labelBegin", ",", "self", ".", "labelBegin", ")", ",", "\n", "(", "self", ".", "vertices", "[", "self", ".", "labelBegin", "]", ".", "weight", "+", "\n", "graph2", ".", "vertices", "[", "self", ".", "labelBegin", "]", ".", "weight", ")", "/", "2", ")", "\n", "g", ".", "vertices", "[", "self", ".", "labelBegin", "]", "=", "vfirst", "\n", "vfirst", ".", "pair", "=", "self", ".", "vertices", "[", "\n", "self", ".", "labelBegin", "]", ",", "graph2", ".", "vertices", "[", "self", ".", "labelBegin", "]", "\n", "\n", "modif", "=", "1", "\n", "while", "modif", ">", "0", ":", "\n", "            ", "modif", "=", "0", "\n", "add", "=", "{", "}", "\n", "for", "k", ",", "v", "in", "g", ".", "vertices", ".", "items", "(", ")", ":", "\n", "\n", "                ", "v1", ",", "v2", "=", "v", ".", "pair", "\n", "if", "len", "(", "v", ".", "succE", ")", "==", "0", ":", "\n", "                    ", "for", "e1", "in", "v1", ".", "succE", ":", "\n", "                        ", "for", "e2", "in", "v2", ".", "succE", ":", "\n", "                            ", "oe1", "=", "self", ".", "edges", "[", "e1", "]", "\n", "oe2", "=", "graph2", ".", "edges", "[", "e2", "]", "\n", "if", "function_match_edges", "(", "oe1", ",", "oe2", ",", "self", ",", "graph2", ",", "1.", ",", "1.", ")", ":", "\n", "                                ", "tv1", "=", "self", ".", "vertices", "[", "oe1", ".", "to", "]", "\n", "tv2", "=", "graph2", ".", "vertices", "[", "oe2", ".", "to", "]", "\n", "if", "function_mach_vertices", "(", "tv1", ",", "tv2", ",", "self", ",", "graph2", ",", "1.", ",", "1.", ")", ":", "\n", "# we have a match", "\n", "                                    ", "ii", "=", "\"%s-%s\"", "%", "(", "tv1", ".", "nb", ",", "tv2", ".", "nb", ")", "\n", "if", "tv1", ".", "nb", "==", "self", ".", "labelEnd", "and", "tv2", ".", "nb", "==", "self", ".", "labelEnd", ":", "\n", "                                        ", "ii", "=", "self", ".", "labelEnd", "\n", "", "lab", "=", "\"%s-%s\"", "%", "(", "tv1", ".", "label", ",", "tv2", ".", "label", ")", "if", "tv1", ".", "label", "!=", "tv2", ".", "label", "else", "tv1", ".", "label", "\n", "tv", "=", "Vertex", "(", "\n", "ii", ",", "lab", ",", "(", "tv1", ".", "weight", "+", "tv2", ".", "weight", ")", "/", "2", ")", "\n", "lab", "=", "\"%s-%s\"", "%", "(", "oe1", ".", "label", ",", "oe2", ".", "label", ")", "if", "oe1", ".", "label", "!=", "oe2", ".", "label", "else", "oe1", ".", "label", "\n", "ne", "=", "Edge", "(", "v", ".", "nb", ",", "tv", ".", "nb", ",", "lab", ",", "\n", "(", "oe1", ".", "weight", "+", "oe2", ".", "weight", ")", "/", "2", ")", "\n", "add", "[", "tv", ".", "nb", "]", "=", "tv", "\n", "g", ".", "edges", "[", "ne", ".", "from_", ",", "ne", ".", "to", "]", "=", "ne", "\n", "ne", ".", "pair", "=", "oe1", ",", "oe2", "\n", "tv", ".", "pair", "=", "tv1", ",", "tv2", "\n", "v", ".", "succE", "[", "ne", ".", "from_", ",", "ne", ".", "to", "]", "=", "ne", "\n", "modif", "+=", "1", "\n", "", "", "", "", "", "", "for", "k", ",", "v", "in", "add", ".", "items", "(", ")", ":", "\n", "                ", "g", ".", "vertices", "[", "k", "]", "=", "v", "\n", "\n", "", "", "if", "not", "noClean", ":", "\n", "# g.connect_root_and_leave()", "\n", "            ", "g", ".", "compute_predecessor", "(", ")", "\n", "g", ".", "clean_dead_ends", "(", ")", "\n", "", "return", "g", "\n", "\n"]], "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.graph_distance.GraphDistance.clean_dead_ends": [[558, 596], ["verticesToKeep.items", "add.items", "graph_distance.GraphDistance.vertices[].predE.items", "verticesToKeep.get"], "methods", ["None"], ["", "def", "clean_dead_ends", "(", "self", ")", ":", "\n", "        ", "edgesToKeep", "=", "{", "}", "\n", "verticesToKeep", "=", "{", "}", "\n", "if", "self", ".", "labelEnd", "in", "self", ".", "vertices", ":", "\n", "            ", "v", "=", "self", ".", "vertices", "[", "self", ".", "labelEnd", "]", "\n", "verticesToKeep", "[", "v", ".", "nb", "]", "=", "False", "\n", "\n", "modif", "=", "1", "\n", "while", "modif", ">", "0", ":", "\n", "                ", "modif", "=", "0", "\n", "add", "=", "{", "}", "\n", "for", "k", ",", "v", "in", "verticesToKeep", ".", "items", "(", ")", ":", "\n", "                    ", "if", "v", ":", "\n", "                        ", "continue", "\n", "", "modif", "+=", "1", "\n", "verticesToKeep", "[", "k", "]", "=", "True", "\n", "for", "pred", ",", "vv", "in", "self", ".", "vertices", "[", "k", "]", ".", "predE", ".", "items", "(", ")", ":", "\n", "                        ", "edgesToKeep", "[", "pred", "]", "=", "True", "\n", "add", "[", "vv", ".", "from_", "]", "=", "verticesToKeep", ".", "get", "(", "vv", ".", "from_", ",", "False", ")", "\n", "", "", "for", "k", ",", "v", "in", "add", ".", "items", "(", ")", ":", "\n", "                    ", "verticesToKeep", "[", "k", "]", "=", "v", "\n", "\n", "", "", "remove", "=", "{", "}", "\n", "for", "k", "in", "self", ".", "vertices", ":", "\n", "                ", "if", "k", "not", "in", "verticesToKeep", ":", "\n", "                    ", "remove", "[", "k", "]", "=", "True", "\n", "", "", "for", "k", "in", "remove", ":", "\n", "                ", "del", "self", ".", "vertices", "[", "k", "]", "\n", "\n", "", "remove", "=", "{", "}", "\n", "for", "k", "in", "self", ".", "edges", ":", "\n", "                ", "if", "k", "not", "in", "edgesToKeep", ":", "\n", "                    ", "remove", "[", "k", "]", "=", "True", "\n", "", "", "for", "k", "in", "remove", ":", "\n", "                ", "del", "self", ".", "edges", "[", "k", "]", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "vertices", "=", "{", "}", "\n", "self", ".", "edges", "=", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.graph_distance.GraphDistance.enumerate_all_paths": [[597, 626], ["len", "len", "copy.copy", "copy.copy.append", "len", "copy.copy.append", "graph_distance.GraphDistance.enumerate_all_paths", "len", "len"], "methods", ["home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.graph_distance.GraphDistance.enumerate_all_paths"], ["", "", "def", "enumerate_all_paths", "(", "self", ",", "edges_and_vertices", ",", "begin", "=", "None", ")", ":", "\n", "        ", "if", "begin", "is", "None", ":", "\n", "            ", "begin", "=", "[", "]", "\n", "", "if", "len", "(", "self", ".", "vertices", ")", ">", "0", "and", "len", "(", "self", ".", "edges", ")", ">", "0", ":", "\n", "            ", "if", "edges_and_vertices", ":", "\n", "                ", "last", "=", "begin", "[", "-", "1", "]", "if", "len", "(", "begin", ")", ">", "0", "else", "self", ".", "vertices", "[", "self", ".", "labelBegin", "]", "\n", "", "else", ":", "\n", "                ", "last", "=", "self", ".", "vertices", "[", "begin", "[", "-", "1", "]", ".", "to", "]", "if", "len", "(", "begin", ")", ">", "0", "else", "self", ".", "vertices", "[", "self", ".", "labelBegin", "]", "\n", "\n", "", "if", "edges_and_vertices", "and", "len", "(", "begin", ")", "==", "0", ":", "\n", "                ", "begin", "=", "[", "last", "]", "\n", "\n", "", "for", "ef", "in", "last", ".", "succE", ":", "\n", "                ", "e", "=", "self", ".", "edges", "[", "ef", "]", "\n", "path", "=", "copy", ".", "copy", "(", "begin", ")", "\n", "v", "=", "self", ".", "vertices", "[", "e", ".", "to", "]", "\n", "if", "e", ".", "to", "==", "e", ".", "from_", ":", "\n", "# cycle", "\n", "                    ", "continue", "\n", "", "path", ".", "append", "(", "e", ")", "\n", "if", "edges_and_vertices", ":", "\n", "                    ", "path", ".", "append", "(", "v", ")", "\n", "", "if", "v", ".", "label", "==", "self", ".", "labelEnd", ":", "\n", "                    ", "yield", "path", "\n", "", "else", ":", "\n", "                    ", "for", "p", "in", "self", ".", "enumerate_all_paths", "(", "edges_and_vertices", ",", "path", ")", ":", "\n", "                        ", "yield", "p", "\n", "\n"]], "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.graph_distance.GraphDistance.edit_distance_path": [[627, 701], ["graph_distance.GraphDistance.get_matching_functions", "enumerate", "path.reverse", "enumerate", "path.append", "min", "len", "len", "len", "len", "eorv1.is_edge", "eorv2.is_edge", "eorv1.is_vertex", "eorv2.is_vertex", "graph_distance.GraphDistance.edit_distance_path.func"], "methods", ["home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.graph_distance.GraphDistance.get_matching_functions", "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.graph_distance.Edge.is_edge", "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.graph_distance.Edge.is_edge", "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.graph_distance.Edge.is_vertex", "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.graph_distance.Edge.is_vertex"], ["", "", "", "", "", "def", "edit_distance_path", "(", "self", ",", "p1", ",", "p2", ",", "g1", ",", "g2", ",", "\n", "function_mach_vertices", "=", "None", ",", "\n", "function_match_edges", "=", "None", ",", "\n", "use_min", "=", "False", ",", "\n", "debug", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        Tries to align two paths from two graphs.\n\n        @param      p1                      path 1 (from g1)\n        @param      p2                      path 2 (from g2)\n        @param      g1                      graph 1\n        @param      g2                      graph 2\n        @param      function_mach_vertices  function which gives a distance bewteen two vertices,\n                                            if None, it take the output of @see me get_matching_functions\n        @param      function_match_edges    function which gives a distance bewteen two edges,\n                                            if None, it take the output of @see me get_matching_functions\n        @param      use_min                 the returned is based on a edit distance, if this parameter is True, the returned value will be:\n\n                                            ::\n\n                                                if use_min :\n                                                    n = min (len(p1), len(p2))\n                                                    d = d*1.0 / n if n > 0 else 0\n\n        @param      debug                   unused\n        @return                             2-uple: distance, aligned path\n        \"\"\"", "\n", "function_mach_vertices", ",", "function_match_edges", "=", "self", ".", "get_matching_functions", "(", "\n", "function_mach_vertices", ",", "function_match_edges", ",", "True", ")", "\n", "dist", "=", "{", "(", "-", "1", ",", "-", "1", ")", ":", "(", "0", ",", "None", ",", "None", ")", "}", "\n", "\n", "w1", "=", "1.0", "/", "len", "(", "p1", ")", "if", "use_min", "else", "1.", "\n", "w2", "=", "1.0", "/", "len", "(", "p2", ")", "if", "use_min", "else", "1.", "\n", "\n", "for", "i1", ",", "eorv1", "in", "enumerate", "(", "p1", ")", ":", "\n", "            ", "for", "i2", ",", "eorv2", "in", "enumerate", "(", "p2", ")", ":", "\n", "                ", "np", "=", "i1", ",", "i2", "\n", "posit", "=", "[", "(", "(", "i1", "-", "1", ",", "i2", ")", ",", "(", "eorv1", ",", "None", ")", ")", ",", "\n", "(", "(", "i1", ",", "i2", "-", "1", ")", ",", "(", "None", ",", "eorv2", ")", ")", ",", "\n", "(", "(", "i1", "-", "1", ",", "i2", "-", "1", ")", ",", "(", "eorv1", ",", "eorv2", ")", ")", ",", "]", "\n", "\n", "if", "eorv1", ".", "is_edge", "(", ")", "and", "eorv2", ".", "is_edge", "(", ")", ":", "\n", "                    ", "func", "=", "function_match_edges", "\n", "", "elif", "eorv1", ".", "is_vertex", "(", ")", "and", "eorv2", ".", "is_vertex", "(", ")", ":", "\n", "                    ", "func", "=", "function_mach_vertices", "\n", "", "else", ":", "\n", "                    ", "def", "func", "(", "x", ",", "y", ",", "g1", ",", "g2", ",", "w1", ",", "w2", ")", ":", "\n", "                        ", "return", "0.5", "*", "(", "x", ".", "weight", "*", "w1", "+", "y", ".", "weight", "*", "w2", ")", "if", "x", "is", "not", "None", "and", "y", "is", "not", "None", "else", "(", "x", ".", "weight", "*", "w1", "if", "y", "is", "None", "else", "y", ".", "weight", "*", "w2", ")", "\n", "\n", "", "", "for", "p", ",", "co", "in", "posit", ":", "\n", "                    ", "if", "p", "in", "dist", ":", "\n", "                        ", "c0", "=", "dist", "[", "p", "]", "[", "0", "]", "\n", "c1", "=", "func", "(", "co", "[", "0", "]", ",", "co", "[", "1", "]", ",", "g1", ",", "g2", ",", "w1", ",", "w2", ")", "\n", "c", "=", "c0", "+", "c1", "\n", "if", "np", "not", "in", "dist", ":", "\n", "                            ", "dist", "[", "np", "]", "=", "(", "c", ",", "p", ",", "co", ",", "(", "c0", ",", "c1", ")", ")", "\n", "", "elif", "c", "<", "dist", "[", "np", "]", "[", "0", "]", ":", "\n", "                            ", "dist", "[", "np", "]", "=", "(", "c", ",", "p", ",", "co", ",", "(", "c0", ",", "c1", ")", ")", "\n", "\n", "", "", "", "", "", "last", "=", "dist", "[", "len", "(", "p1", ")", "-", "1", ",", "len", "(", "p2", ")", "-", "1", "]", "\n", "path", "=", "[", "]", "\n", "while", "last", "[", "1", "]", "is", "not", "None", ":", "\n", "            ", "path", ".", "append", "(", "last", ")", "\n", "last", "=", "dist", "[", "last", "[", "1", "]", "]", "\n", "\n", "", "path", ".", "reverse", "(", ")", "\n", "\n", "d", "=", "dist", "[", "len", "(", "p1", ")", "-", "1", ",", "len", "(", "p2", ")", "-", "1", "]", "[", "0", "]", "\n", "if", "use_min", ":", "\n", "            ", "n", "=", "min", "(", "len", "(", "p1", ")", ",", "len", "(", "p2", ")", ")", "\n", "d", "=", "d", "*", "1.0", "/", "n", "if", "n", ">", "0", "else", "0", "\n", "", "return", "d", ",", "path", "\n", "\n"]], "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.graph_distance.GraphDistance.private_count_left_right": [[702, 714], ["countRight[].get", "countLeft[].get"], "methods", ["None"], ["", "def", "private_count_left_right", "(", "self", ",", "valuesInList", ")", ":", "\n", "        ", "countLeft", "=", "{", "}", "\n", "countRight", "=", "{", "}", "\n", "for", "k", ",", "v", "in", "valuesInList", ":", "\n", "            ", "i", ",", "j", "=", "v", "\n", "if", "i", "not", "in", "countRight", ":", "\n", "                ", "countRight", "[", "i", "]", "=", "{", "}", "\n", "", "countRight", "[", "i", "]", "[", "j", "]", "=", "countRight", "[", "i", "]", ".", "get", "(", "j", ",", "0", ")", "+", "1", "\n", "if", "j", "not", "in", "countLeft", ":", "\n", "                ", "countLeft", "[", "j", "]", "=", "{", "}", "\n", "", "countLeft", "[", "j", "]", "[", "i", "]", "=", "countLeft", "[", "j", "]", ".", "get", "(", "i", ",", "0", ")", "+", "1", "\n", "", "return", "countLeft", ",", "countRight", "\n", "\n"]], "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.graph_distance.GraphDistance.private_kruskal_matrix": [[715, 733], ["graph_distance.GraphDistance.private_count_left_right", "matrix.sort", "max", "min", "len", "len", "max", "max", "matrix.pop", "max", "len", "Exception", "max", "max", "sum", "sum", "_.values", "countRight.values", "_.values", "countLeft.values", "max", "max", "_.values", "countRight.values", "_.values", "countLeft.values"], "methods", ["home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.graph_distance.GraphDistance.private_count_left_right"], ["", "def", "private_kruskal_matrix", "(", "self", ",", "matrix", ",", "reverse", ")", ":", "\n", "        ", "countLeft", ",", "countRight", "=", "self", ".", "private_count_left_right", "(", "matrix", ")", "\n", "cleft", ",", "cright", "=", "len", "(", "countLeft", ")", ",", "len", "(", "countRight", ")", "\n", "matrix", ".", "sort", "(", "reverse", "=", "reverse", ")", "\n", "count", "=", "max", "(", "max", "(", "[", "sum", "(", "_", ".", "values", "(", ")", ")", "for", "_", "in", "countRight", ".", "values", "(", ")", "]", ")", ",", "\n", "max", "(", "[", "sum", "(", "_", ".", "values", "(", ")", ")", "for", "_", "in", "countLeft", ".", "values", "(", ")", "]", ")", ")", "\n", "while", "count", ">", "1", ":", "\n", "            ", "k", ",", "v", "=", "matrix", ".", "pop", "(", ")", "\n", "i", ",", "j", "=", "v", "\n", "countRight", "[", "i", "]", "[", "j", "]", "-=", "1", "\n", "countLeft", "[", "j", "]", "[", "i", "]", "-=", "1", "\n", "count", "=", "max", "(", "max", "(", "[", "max", "(", "_", ".", "values", "(", ")", ")", "for", "_", "in", "countRight", ".", "values", "(", ")", "]", ")", ",", "\n", "max", "(", "[", "max", "(", "_", ".", "values", "(", ")", ")", "for", "_", "in", "countLeft", ".", "values", "(", ")", "]", ")", ")", "\n", "\n", "", "mini", "=", "min", "(", "cleft", ",", "cright", ")", "\n", "if", "len", "(", "matrix", ")", "<", "mini", ":", "\n", "            ", "raise", "Exception", "(", "\"impossible: the smallest set should get all\"", "+", "\n", "\"its element associated to at least one coming from the other set\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.graph_distance.GraphDistance._private_string_path_matching": [[734, 746], ["temp.append", "str", "str", "u.is_edge", "v.is_edge"], "methods", ["home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.graph_distance.Edge.is_edge", "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.graph_distance.Edge.is_edge"], ["", "", "def", "_private_string_path_matching", "(", "self", ",", "path", ",", "skipEdge", "=", "False", ")", ":", "\n", "        ", "temp", "=", "[", "]", "\n", "for", "p", "in", "path", ":", "\n", "            ", "u", ",", "v", "=", "p", "[", "2", "]", "\n", "if", "skipEdge", "and", "(", "(", "u", "is", "not", "None", "and", "u", ".", "is_edge", "(", ")", ")", "or", "\n", "(", "v", "is", "not", "None", "and", "v", ".", "is_edge", "(", ")", ")", ")", ":", "\n", "                ", "continue", "\n", "", "su", "=", "\"-\"", "if", "u", "is", "None", "else", "str", "(", "u", ".", "nb", ")", "\n", "sv", "=", "\"-\"", "if", "v", "is", "None", "else", "str", "(", "v", ".", "nb", ")", "\n", "s", "=", "\"(%s,%s)\"", "%", "(", "su", ",", "sv", ")", "\n", "temp", ".", "append", "(", "s", ")", "\n", "", "return", "\" \"", ".", "join", "(", "temp", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.graph_distance.GraphDistance.distance_matching_graphs_paths": [[747, 899], ["graph_distance.GraphDistance.get_matching_functions", "list", "list", "enumerate", "graph_distance.GraphDistance.private_kruskal_matrix", "graph_distance.GraphDistance.private_kruskal_matrix", "graph_distance.GraphDistance.private_kruskal_matrix", "graph_distance.GraphDistance.private_count_left_right", "graph_distance.GraphDistance.private_count_left_right", "graph_distance.GraphDistance", "graph_distance.GraphDistance.vertices.items", "graph2.vertices.items", "graph_distance.GraphDistance.edges.items", "graph2.edges.items", "graph_distance.GraphDistance.compute_predecessor", "graph_distance.GraphDistance.compute_successor", "list", "graph_distance.GraphDistance.enumerate_all_paths", "graph2.enumerate_all_paths", "len", "len", "enumerate", "copy.deepcopy", "copy.deepcopy", "copy.copy", "copy.copy", "copy.copy", "copy.copy", "graph_distance.Vertex", "graph_distance.Vertex", "graph_distance.Edge", "graph_distance.Edge", "graph_distance.GraphDistance.enumerate_all_paths", "graph_distance.GraphDistance.edit_distance_path", "matrix_distance.items", "pair_count_edge.items", "pair_count_vertex.items", "RuntimeError", "RuntimeError", "len", "len", "list", "list", "list", "list", "sum", "sum", "n1.is_edge", "n2.is_edge", "count_vertex_right[].keys", "count_edge_right[].keys", "count_vertex_left[].keys", "count_vertex_left[].keys", "pair_count_edge.get", "n1.is_vertex", "n2.is_vertex", "pair_count_vertex.get"], "methods", ["home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.graph_distance.GraphDistance.get_matching_functions", "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.graph_distance.GraphDistance.private_kruskal_matrix", "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.graph_distance.GraphDistance.private_kruskal_matrix", "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.graph_distance.GraphDistance.private_kruskal_matrix", "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.graph_distance.GraphDistance.private_count_left_right", "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.graph_distance.GraphDistance.private_count_left_right", "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.graph_distance.GraphDistance.compute_predecessor", "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.graph_distance.GraphDistance.compute_successor", "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.graph_distance.GraphDistance.enumerate_all_paths", "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.graph_distance.GraphDistance.enumerate_all_paths", "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.graph_distance.GraphDistance.enumerate_all_paths", "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.graph_distance.GraphDistance.edit_distance_path", "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.graph_distance.Edge.is_edge", "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.graph_distance.Edge.is_edge", "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.graph_distance.Edge.is_vertex", "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.graph_distance.Edge.is_vertex"], ["", "def", "distance_matching_graphs_paths", "(", "self", ",", "graph2", ",", "\n", "function_mach_vertices", "=", "None", ",", "\n", "function_match_edges", "=", "None", ",", "\n", "noClean", "=", "False", ",", "\n", "store", "=", "None", ",", "\n", "use_min", "=", "True", ",", "\n", "weight_vertex", "=", "1.", ",", "\n", "weight_edge", "=", "1.", ")", ":", "\n", "        ", "\"\"\"\n        Computes an alignment between two graphs.\n\n        @param      graph2                  the other graph\n        @param      function_mach_vertices   function which gives a distance bewteen two vertices,\n                                            if None, it take the output of @see me get_matching_functions\n        @param      function_match_edges      function which gives a distance bewteen two edges,\n                                            if None, it take the output of @see me get_matching_functions\n        @param      noClean                 if True, clean unmatched vertices and edges\n        @param      store                   if None, does nothing, if it is a dictionary, the function will store here various\n                                            information about how th matching was operated\n        @param      use_min                  @see me edit_distance_path\n        @param      weight_vertex            a weight for every vertex\n        @param      weight_edge              a weight for every edge\n        @return                             2 tuple (a distance, a graph containing the aligned paths between the two graphs)\n\n        See :ref:`l-graph_distance`.\n        \"\"\"", "\n", "\n", "function_mach_vertices", ",", "function_match_edges", "=", "self", ".", "get_matching_functions", "(", "\n", "function_mach_vertices", ",", "function_match_edges", ",", "True", ")", "\n", "\n", "paths1", "=", "list", "(", "self", ".", "enumerate_all_paths", "(", "True", ")", ")", "\n", "paths2", "=", "list", "(", "graph2", ".", "enumerate_all_paths", "(", "True", ")", ")", "\n", "\n", "if", "store", "is", "not", "None", ":", "\n", "            ", "store", "[", "\"nbpath1\"", "]", "=", "len", "(", "paths1", ")", "\n", "store", "[", "\"nbpath2\"", "]", "=", "len", "(", "paths2", ")", "\n", "\n", "", "matrix_distance", "=", "{", "}", "\n", "for", "i1", ",", "p1", "in", "enumerate", "(", "paths1", ")", ":", "\n", "            ", "for", "i2", ",", "p2", "in", "enumerate", "(", "paths2", ")", ":", "\n", "                ", "matrix_distance", "[", "i1", ",", "i2", "]", "=", "self", ".", "edit_distance_path", "(", "p1", ",", "p2", ",", "self", ",", "graph2", ",", "\n", "function_mach_vertices", ",", "function_match_edges", ",", "use_min", "=", "use_min", ")", "\n", "\n", "", "", "if", "store", "is", "not", "None", ":", "\n", "            ", "store", "[", "\"matrix_distance\"", "]", "=", "matrix_distance", "\n", "", "reduction", "=", "[", "(", "v", "[", "0", "]", ",", "k", ")", "for", "k", ",", "v", "in", "matrix_distance", ".", "items", "(", ")", "]", "\n", "if", "store", "is", "not", "None", ":", "\n", "            ", "store", "[", "\"path_mat1\"", "]", "=", "copy", ".", "deepcopy", "(", "reduction", ")", "\n", "", "self", ".", "private_kruskal_matrix", "(", "reduction", ",", "False", ")", "\n", "if", "store", "is", "not", "None", ":", "\n", "            ", "store", "[", "\"path_mat2\"", "]", "=", "copy", ".", "deepcopy", "(", "reduction", ")", "\n", "\n", "", "pair_count_edge", "=", "{", "}", "\n", "pair_count_vertex", "=", "{", "}", "\n", "for", "k", ",", "v", "in", "reduction", ":", "\n", "            ", "path", "=", "matrix_distance", "[", "v", "]", "[", "1", "]", "\n", "for", "el", "in", "path", ":", "\n", "                ", "n1", ",", "n2", "=", "el", "[", "2", "]", "\n", "if", "n1", "is", "not", "None", "and", "n2", "is", "not", "None", ":", "\n", "                    ", "if", "n1", ".", "is_edge", "(", ")", "and", "n2", ".", "is_edge", "(", ")", ":", "\n", "                        ", "add", "=", "n1", ".", "nb", ",", "n2", ".", "nb", "\n", "pair_count_edge", "[", "add", "]", "=", "pair_count_edge", ".", "get", "(", "add", ",", "0", ")", "+", "1", "\n", "", "elif", "n1", ".", "is_vertex", "(", ")", "and", "n2", ".", "is_vertex", "(", ")", ":", "\n", "                        ", "add", "=", "n1", ".", "nb", ",", "n2", ".", "nb", "\n", "pair_count_vertex", "[", "\n", "add", "]", "=", "pair_count_vertex", ".", "get", "(", "add", ",", "0", ")", "+", "1", "\n", "\n", "", "", "", "", "if", "store", "is", "not", "None", ":", "\n", "            ", "store", "[", "\"pair_count_vertex\"", "]", "=", "pair_count_vertex", "\n", "store", "[", "\"pair_count_edge\"", "]", "=", "pair_count_edge", "\n", "\n", "", "reduction_edge", "=", "[", "(", "v", ",", "k", ")", "for", "k", ",", "v", "in", "pair_count_edge", ".", "items", "(", ")", "]", "\n", "if", "store", "is", "not", "None", ":", "\n", "            ", "store", "[", "\"edge_mat1\"", "]", "=", "copy", ".", "copy", "(", "reduction_edge", ")", "\n", "", "self", ".", "private_kruskal_matrix", "(", "reduction_edge", ",", "True", ")", "\n", "if", "store", "is", "not", "None", ":", "\n", "            ", "store", "[", "\"edge_mat2\"", "]", "=", "copy", ".", "copy", "(", "reduction_edge", ")", "\n", "\n", "", "reduction_vertex", "=", "[", "(", "v", ",", "k", ")", "for", "k", ",", "v", "in", "pair_count_vertex", ".", "items", "(", ")", "]", "\n", "if", "store", "is", "not", "None", ":", "\n", "            ", "store", "[", "\"vertex_mat1\"", "]", "=", "copy", ".", "copy", "(", "reduction_vertex", ")", "\n", "", "self", ".", "private_kruskal_matrix", "(", "reduction_vertex", ",", "True", ")", "\n", "if", "store", "is", "not", "None", ":", "\n", "            ", "store", "[", "\"vertex_mat2\"", "]", "=", "copy", ".", "copy", "(", "reduction_vertex", ")", "\n", "\n", "", "count_edge_left", ",", "count_edge_right", "=", "self", ".", "private_count_left_right", "(", "\n", "reduction_edge", ")", "\n", "count_vertex_left", ",", "count_vertex_right", "=", "self", ".", "private_count_left_right", "(", "\n", "reduction_vertex", ")", "\n", "\n", "res_graph", "=", "GraphDistance", "(", "[", "]", ")", "\n", "doneVertex", "=", "{", "}", "\n", "done_edge", "=", "{", "}", "\n", "\n", "for", "k", ",", "v", "in", "self", ".", "vertices", ".", "items", "(", ")", ":", "\n", "            ", "newv", "=", "Vertex", "(", "v", ".", "nb", ",", "v", ".", "label", ",", "weight_vertex", ")", "\n", "res_graph", ".", "vertices", "[", "k", "]", "=", "newv", "\n", "if", "v", ".", "nb", "in", "count_vertex_right", ":", "\n", "                ", "ind", "=", "list", "(", "count_vertex_right", "[", "v", ".", "nb", "]", ".", "keys", "(", ")", ")", "[", "0", "]", "\n", "newv", ".", "pair", "=", "(", "v", ",", "graph2", ".", "vertices", "[", "ind", "]", ")", "\n", "doneVertex", "[", "ind", "]", "=", "newv", "\n", "if", "newv", ".", "pair", "[", "0", "]", ".", "label", "!=", "newv", ".", "pair", "[", "1", "]", ".", "label", ":", "\n", "                    ", "newv", ".", "label", "=", "\"%s|%s\"", "%", "(", "\n", "newv", ".", "pair", "[", "0", "]", ".", "label", ",", "newv", ".", "pair", "[", "1", "]", ".", "label", ")", "\n", "", "", "else", ":", "\n", "                ", "newv", ".", "pair", "=", "(", "v", ",", "None", ")", "\n", "\n", "", "", "for", "k", ",", "v", "in", "graph2", ".", "vertices", ".", "items", "(", ")", ":", "\n", "            ", "if", "k", "in", "doneVertex", ":", "\n", "                ", "continue", "\n", "", "newv", "=", "Vertex", "(", "\"2a.%s\"", "%", "v", ".", "nb", ",", "v", ".", "label", ",", "weight_vertex", ")", "\n", "res_graph", ".", "vertices", "[", "newv", ".", "nb", "]", "=", "newv", "\n", "newv", ".", "pair", "=", "(", "None", ",", "v", ")", "\n", "\n", "", "for", "k", ",", "e", "in", "self", ".", "edges", ".", "items", "(", ")", ":", "\n", "            ", "newe", "=", "Edge", "(", "e", ".", "from_", ",", "e", ".", "to", ",", "e", ".", "label", ",", "weight_edge", ")", "\n", "res_graph", ".", "edges", "[", "k", "]", "=", "newe", "\n", "if", "e", ".", "nb", "in", "count_edge_right", ":", "\n", "                ", "ind", "=", "list", "(", "count_edge_right", "[", "e", ".", "nb", "]", ".", "keys", "(", ")", ")", "[", "0", "]", "\n", "newe", ".", "pair", "=", "(", "e", ",", "graph2", ".", "edges", "[", "ind", "]", ")", "\n", "done_edge", "[", "ind", "]", "=", "newe", "\n", "", "else", ":", "\n", "                ", "newe", ".", "pair", "=", "(", "e", ",", "None", ")", "\n", "\n", "", "", "for", "k", ",", "e", "in", "graph2", ".", "edges", ".", "items", "(", ")", ":", "\n", "            ", "if", "k", "in", "done_edge", ":", "\n", "                ", "continue", "\n", "", "from_", "=", "list", "(", "count_vertex_left", "[", "e", ".", "from_", "]", ".", "keys", "(", ")", ")", "[", "0", "]", "if", "e", ".", "from_", "in", "count_vertex_left", "else", "\"2a.%s\"", "%", "e", ".", "from_", "\n", "to", "=", "list", "(", "count_vertex_left", "[", "e", ".", "to", "]", ".", "keys", "(", ")", ")", "[", "0", "]", "if", "e", ".", "to", "in", "count_vertex_left", "else", "\"2a.%s\"", "%", "e", ".", "to", "\n", "if", "from_", "not", "in", "res_graph", ".", "vertices", ":", "\n", "                ", "raise", "RuntimeError", "(", "\"should not happen \"", "+", "\n", "from_", ")", "# pragma: no cover", "\n", "", "if", "to", "not", "in", "res_graph", ".", "vertices", ":", "\n", "                ", "raise", "RuntimeError", "(", "\"should not happen \"", "+", "\n", "to", ")", "# pragma: no cover", "\n", "", "newe", "=", "Edge", "(", "from_", ",", "to", ",", "e", ".", "label", ",", "weight_edge", ")", "\n", "res_graph", ".", "edges", "[", "newe", ".", "nb", "]", "=", "newe", "\n", "newe", ".", "pair", "=", "(", "None", ",", "e", ")", "\n", "\n", "", "res_graph", ".", "compute_predecessor", "(", ")", "\n", "res_graph", ".", "compute_successor", "(", ")", "\n", "\n", "allPaths", "=", "list", "(", "res_graph", ".", "enumerate_all_paths", "(", "True", ")", ")", "\n", "\n", "temp", "=", "[", "sum", "(", "[", "0", "if", "None", "in", "_", ".", "pair", "else", "1", "for", "_", "in", "p", "]", ")", "*", "1.0", "/", "len", "(", "p", ")", "\n", "for", "p", "in", "allPaths", "]", "\n", "distance", "=", "1.0", "-", "1.0", "*", "sum", "(", "temp", ")", "/", "len", "(", "allPaths", ")", "\n", "\n", "return", "distance", ",", "res_graph", "\n", "\n"]], "home.repos.pwc.inspect_result.aheuillet_D-DARTS.None.graph_distance.GraphDistance.draw_vertices_edges": [[900, 924], ["graph_distance.GraphDistance.vertices.items", "graph_distance.GraphDistance.edges.items", "vertices.append", "edges.append", "vertices.append", "edges.append", "vertices.append", "RuntimeError", "edges.append", "RuntimeError"], "methods", ["None"], ["", "def", "draw_vertices_edges", "(", "self", ")", ":", "\n", "        ", "vertices", "=", "[", "]", "\n", "edges", "=", "[", "]", "\n", "for", "k", ",", "v", "in", "self", ".", "vertices", ".", "items", "(", ")", ":", "\n", "            ", "if", "v", ".", "pair", "==", "(", "None", ",", "None", ")", "or", "(", "v", ".", "pair", "[", "0", "]", "is", "not", "None", "and", "v", ".", "pair", "[", "1", "]", "is", "not", "None", ")", ":", "\n", "                ", "vertices", ".", "append", "(", "(", "k", ",", "v", ".", "label", ")", ")", "\n", "", "elif", "v", ".", "pair", "[", "1", "]", "is", "None", ":", "\n", "                ", "vertices", ".", "append", "(", "(", "k", ",", "\"-\"", "+", "v", ".", "label", ",", "\"red\"", ")", ")", "\n", "", "elif", "v", ".", "pair", "[", "0", "]", "is", "None", ":", "\n", "                ", "vertices", ".", "append", "(", "(", "k", ",", "\"+\"", "+", "v", ".", "label", ",", "\"green\"", ")", ")", "\n", "", "else", ":", "\n", "                ", "raise", "RuntimeError", "(", "\"?\"", ")", "# pragma: no cover", "\n", "\n", "", "", "for", "k", ",", "v", "in", "self", ".", "edges", ".", "items", "(", ")", ":", "\n", "            ", "if", "v", ".", "pair", "==", "(", "None", ",", "None", ")", "or", "(", "v", ".", "pair", "[", "0", "]", "is", "not", "None", "and", "v", ".", "pair", "[", "1", "]", "is", "not", "None", ")", ":", "\n", "                ", "edges", ".", "append", "(", "(", "v", ".", "from_", ",", "v", ".", "to", ",", "v", ".", "label", ")", ")", "\n", "", "elif", "v", ".", "pair", "[", "1", "]", "is", "None", ":", "\n", "                ", "edges", ".", "append", "(", "(", "v", ".", "from_", ",", "v", ".", "to", ",", "\"-\"", "+", "v", ".", "label", ",", "\"red\"", ")", ")", "\n", "", "elif", "v", ".", "pair", "[", "0", "]", "is", "None", ":", "\n", "                ", "edges", ".", "append", "(", "(", "v", ".", "from_", ",", "v", ".", "to", ",", "\"+\"", "+", "v", ".", "label", ",", "\"green\"", ")", ")", "\n", "", "else", ":", "\n", "                ", "raise", "RuntimeError", "(", "\"?\"", ")", "# pragma: no cover", "\n", "\n", "", "", "return", "vertices", ",", "edges", "", "", "", ""]]}