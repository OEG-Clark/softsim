{"home.repos.pwc.inspect_result.dddzg_up-detr.None.engine.train_one_epoch": [[23, 72], ["model.train", "criterion.train", "util.MetricLogger", "utils.MetricLogger.add_meter", "utils.MetricLogger.add_meter", "utils.MetricLogger.log_every", "utils.MetricLogger.synchronize_between_processes", "print", "util.SmoothedValue", "util.SmoothedValue", "model", "criterion", "sum", "util.reduce_dict", "sum", "sum.item", "optimizer.zero_grad", "sum.backward", "optimizer.step", "utils.MetricLogger.update", "utils.MetricLogger.update", "utils.MetricLogger.update", "item.to", "loss_dict_reduced_scaled.values", "math.isfinite", "print", "print", "sys.exit", "torch.nn.utils.clip_grad_norm_", "utils.MetricLogger.meters.items", "v.to", "utils.reduce_dict.items", "utils.reduce_dict.items", "model.parameters", "t.items", "criterion.keys"], "function", ["home.repos.pwc.inspect_result.dddzg_up-detr.util.misc.MetricLogger.add_meter", "home.repos.pwc.inspect_result.dddzg_up-detr.util.misc.MetricLogger.add_meter", "home.repos.pwc.inspect_result.dddzg_up-detr.util.misc.MetricLogger.log_every", "home.repos.pwc.inspect_result.dddzg_up-detr.util.misc.MetricLogger.synchronize_between_processes", "home.repos.pwc.inspect_result.dddzg_up-detr.util.misc.reduce_dict", "home.repos.pwc.inspect_result.dddzg_up-detr.util.misc.MetricLogger.update", "home.repos.pwc.inspect_result.dddzg_up-detr.util.misc.MetricLogger.update", "home.repos.pwc.inspect_result.dddzg_up-detr.util.misc.MetricLogger.update", "home.repos.pwc.inspect_result.dddzg_up-detr.util.misc.NestedTensor.to", "home.repos.pwc.inspect_result.dddzg_up-detr.util.misc.NestedTensor.to"], ["def", "train_one_epoch", "(", "model", ":", "torch", ".", "nn", ".", "Module", ",", "criterion", ":", "torch", ".", "nn", ".", "Module", ",", "\n", "data_loader", ":", "Iterable", ",", "optimizer", ":", "torch", ".", "optim", ".", "Optimizer", ",", "\n", "device", ":", "torch", ".", "device", ",", "epoch", ":", "int", ",", "max_norm", ":", "float", "=", "0", ")", ":", "\n", "    ", "model", ".", "train", "(", ")", "\n", "criterion", ".", "train", "(", ")", "\n", "metric_logger", "=", "utils", ".", "MetricLogger", "(", "delimiter", "=", "\"  \"", ")", "\n", "metric_logger", ".", "add_meter", "(", "'lr'", ",", "utils", ".", "SmoothedValue", "(", "window_size", "=", "1", ",", "fmt", "=", "'{value:.6f}'", ")", ")", "\n", "metric_logger", ".", "add_meter", "(", "'class_error'", ",", "utils", ".", "SmoothedValue", "(", "window_size", "=", "1", ",", "fmt", "=", "'{value:.2f}'", ")", ")", "\n", "header", "=", "'Epoch: [{}]'", ".", "format", "(", "epoch", ")", "\n", "print_freq", "=", "10", "\n", "# for up-detr samples consist of images and patches", "\n", "# it also supports detr training, when samples are only images", "\n", "for", "*", "samples", ",", "targets", "in", "metric_logger", ".", "log_every", "(", "data_loader", ",", "print_freq", ",", "header", ")", ":", "\n", "        ", "samples", "=", "[", "item", ".", "to", "(", "device", ")", "for", "item", "in", "samples", "]", "\n", "targets", "=", "[", "{", "k", ":", "v", ".", "to", "(", "device", ")", "for", "k", ",", "v", "in", "t", ".", "items", "(", ")", "}", "for", "t", "in", "targets", "]", "\n", "\n", "outputs", "=", "model", "(", "*", "samples", ")", "\n", "loss_dict", "=", "criterion", "(", "outputs", ",", "targets", ")", "\n", "weight_dict", "=", "criterion", ".", "weight_dict", "\n", "losses", "=", "sum", "(", "loss_dict", "[", "k", "]", "*", "weight_dict", "[", "k", "]", "for", "k", "in", "loss_dict", ".", "keys", "(", ")", "if", "k", "in", "weight_dict", ")", "\n", "\n", "# reduce losses over all GPUs for logging purposes", "\n", "loss_dict_reduced", "=", "utils", ".", "reduce_dict", "(", "loss_dict", ")", "\n", "loss_dict_reduced_unscaled", "=", "{", "f'{k}_unscaled'", ":", "v", "\n", "for", "k", ",", "v", "in", "loss_dict_reduced", ".", "items", "(", ")", "}", "\n", "loss_dict_reduced_scaled", "=", "{", "k", ":", "v", "*", "weight_dict", "[", "k", "]", "\n", "for", "k", ",", "v", "in", "loss_dict_reduced", ".", "items", "(", ")", "if", "k", "in", "weight_dict", "}", "\n", "losses_reduced_scaled", "=", "sum", "(", "loss_dict_reduced_scaled", ".", "values", "(", ")", ")", "\n", "\n", "loss_value", "=", "losses_reduced_scaled", ".", "item", "(", ")", "\n", "\n", "if", "not", "math", ".", "isfinite", "(", "loss_value", ")", ":", "\n", "            ", "print", "(", "\"Loss is {}, stopping training\"", ".", "format", "(", "loss_value", ")", ")", "\n", "print", "(", "loss_dict_reduced", ")", "\n", "sys", ".", "exit", "(", "1", ")", "\n", "\n", "", "optimizer", ".", "zero_grad", "(", ")", "\n", "losses", ".", "backward", "(", ")", "\n", "if", "max_norm", ">", "0", ":", "\n", "            ", "torch", ".", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "model", ".", "parameters", "(", ")", ",", "max_norm", ")", "\n", "", "optimizer", ".", "step", "(", ")", "\n", "\n", "metric_logger", ".", "update", "(", "loss", "=", "loss_value", ",", "**", "loss_dict_reduced_scaled", ",", "**", "loss_dict_reduced_unscaled", ")", "\n", "metric_logger", ".", "update", "(", "class_error", "=", "loss_dict_reduced", "[", "'class_error'", "]", ")", "\n", "metric_logger", ".", "update", "(", "lr", "=", "optimizer", ".", "param_groups", "[", "0", "]", "[", "\"lr\"", "]", ")", "\n", "# gather the stats from all processes", "\n", "", "metric_logger", ".", "synchronize_between_processes", "(", ")", "\n", "print", "(", "\"Averaged stats:\"", ",", "metric_logger", ")", "\n", "return", "{", "k", ":", "meter", ".", "global_avg", "for", "k", ",", "meter", "in", "metric_logger", ".", "meters", ".", "items", "(", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.dddzg_up-detr.None.engine.evaluate": [[74, 159], ["torch.no_grad", "model.eval", "criterion.eval", "util.MetricLogger", "utils.MetricLogger.add_meter", "tuple", "datasets.coco_eval.CocoEvaluator", "utils.MetricLogger.log_every", "utils.MetricLogger.synchronize_between_processes", "print", "util.SmoothedValue", "postprocessors.keys", "datasets.panoptic_eval.PanopticEvaluator", "samples.to.to", "model", "criterion", "util.reduce_dict", "utils.MetricLogger.update", "utils.MetricLogger.update", "torch.stack", "datasets.coco_eval.CocoEvaluator.synchronize_between_processes", "datasets.panoptic_eval.PanopticEvaluator.synchronize_between_processes", "datasets.coco_eval.CocoEvaluator.accumulate", "datasets.coco_eval.CocoEvaluator.summarize", "datasets.panoptic_eval.PanopticEvaluator.summarize", "postprocessors.keys", "torch.stack", "target[].item", "datasets.coco_eval.CocoEvaluator.update", "enumerate", "datasets.panoptic_eval.PanopticEvaluator.update", "utils.MetricLogger.meters.items", "postprocessors.keys", "datasets.coco_eval.CocoEvaluator.coco_eval[].stats.tolist", "postprocessors.keys", "datasets.coco_eval.CocoEvaluator.coco_eval[].stats.tolist", "os.path.join", "v.to", "utils.reduce_dict.items", "utils.reduce_dict.items", "sum", "zip", "target[].item", "postprocessors.keys", "t.items", "loss_dict_reduced_scaled.values"], "function", ["home.repos.pwc.inspect_result.dddzg_up-detr.util.misc.MetricLogger.add_meter", "home.repos.pwc.inspect_result.dddzg_up-detr.util.misc.MetricLogger.log_every", "home.repos.pwc.inspect_result.dddzg_up-detr.util.misc.MetricLogger.synchronize_between_processes", "home.repos.pwc.inspect_result.dddzg_up-detr.util.misc.NestedTensor.to", "home.repos.pwc.inspect_result.dddzg_up-detr.util.misc.reduce_dict", "home.repos.pwc.inspect_result.dddzg_up-detr.util.misc.MetricLogger.update", "home.repos.pwc.inspect_result.dddzg_up-detr.util.misc.MetricLogger.update", "home.repos.pwc.inspect_result.dddzg_up-detr.util.misc.MetricLogger.synchronize_between_processes", "home.repos.pwc.inspect_result.dddzg_up-detr.util.misc.MetricLogger.synchronize_between_processes", "home.repos.pwc.inspect_result.dddzg_up-detr.datasets.coco_eval.CocoEvaluator.accumulate", "home.repos.pwc.inspect_result.dddzg_up-detr.datasets.panoptic_eval.PanopticEvaluator.summarize", "home.repos.pwc.inspect_result.dddzg_up-detr.datasets.panoptic_eval.PanopticEvaluator.summarize", "home.repos.pwc.inspect_result.dddzg_up-detr.util.misc.MetricLogger.update", "home.repos.pwc.inspect_result.dddzg_up-detr.util.misc.MetricLogger.update", "home.repos.pwc.inspect_result.dddzg_up-detr.util.misc.NestedTensor.to"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "evaluate", "(", "model", ",", "criterion", ",", "postprocessors", ",", "data_loader", ",", "base_ds", ",", "device", ",", "output_dir", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "criterion", ".", "eval", "(", ")", "\n", "\n", "metric_logger", "=", "utils", ".", "MetricLogger", "(", "delimiter", "=", "\"  \"", ")", "\n", "metric_logger", ".", "add_meter", "(", "'class_error'", ",", "utils", ".", "SmoothedValue", "(", "window_size", "=", "1", ",", "fmt", "=", "'{value:.2f}'", ")", ")", "\n", "header", "=", "'Test:'", "\n", "\n", "iou_types", "=", "tuple", "(", "k", "for", "k", "in", "(", "'segm'", ",", "'bbox'", ")", "if", "k", "in", "postprocessors", ".", "keys", "(", ")", ")", "\n", "coco_evaluator", "=", "CocoEvaluator", "(", "base_ds", ",", "iou_types", ")", "\n", "# coco_evaluator.coco_eval[iou_types[0]].params.iouThrs = [0, 0.1, 0.5, 0.75]", "\n", "\n", "panoptic_evaluator", "=", "None", "\n", "if", "'panoptic'", "in", "postprocessors", ".", "keys", "(", ")", ":", "\n", "        ", "panoptic_evaluator", "=", "PanopticEvaluator", "(", "\n", "data_loader", ".", "dataset", ".", "ann_file", ",", "\n", "data_loader", ".", "dataset", ".", "ann_folder", ",", "\n", "output_dir", "=", "os", ".", "path", ".", "join", "(", "output_dir", ",", "\"panoptic_eval\"", ")", ",", "\n", ")", "\n", "\n", "", "for", "samples", ",", "targets", "in", "metric_logger", ".", "log_every", "(", "data_loader", ",", "10", ",", "header", ")", ":", "\n", "        ", "samples", "=", "samples", ".", "to", "(", "device", ")", "\n", "targets", "=", "[", "{", "k", ":", "v", ".", "to", "(", "device", ")", "for", "k", ",", "v", "in", "t", ".", "items", "(", ")", "}", "for", "t", "in", "targets", "]", "\n", "\n", "outputs", "=", "model", "(", "samples", ")", "\n", "loss_dict", "=", "criterion", "(", "outputs", ",", "targets", ")", "\n", "weight_dict", "=", "criterion", ".", "weight_dict", "\n", "\n", "# reduce losses over all GPUs for logging purposes", "\n", "loss_dict_reduced", "=", "utils", ".", "reduce_dict", "(", "loss_dict", ")", "\n", "loss_dict_reduced_scaled", "=", "{", "k", ":", "v", "*", "weight_dict", "[", "k", "]", "\n", "for", "k", ",", "v", "in", "loss_dict_reduced", ".", "items", "(", ")", "if", "k", "in", "weight_dict", "}", "\n", "loss_dict_reduced_unscaled", "=", "{", "f'{k}_unscaled'", ":", "v", "\n", "for", "k", ",", "v", "in", "loss_dict_reduced", ".", "items", "(", ")", "}", "\n", "metric_logger", ".", "update", "(", "loss", "=", "sum", "(", "loss_dict_reduced_scaled", ".", "values", "(", ")", ")", ",", "\n", "**", "loss_dict_reduced_scaled", ",", "\n", "**", "loss_dict_reduced_unscaled", ")", "\n", "metric_logger", ".", "update", "(", "class_error", "=", "loss_dict_reduced", "[", "'class_error'", "]", ")", "\n", "\n", "orig_target_sizes", "=", "torch", ".", "stack", "(", "[", "t", "[", "\"orig_size\"", "]", "for", "t", "in", "targets", "]", ",", "dim", "=", "0", ")", "\n", "results", "=", "postprocessors", "[", "'bbox'", "]", "(", "outputs", ",", "orig_target_sizes", ")", "\n", "if", "'segm'", "in", "postprocessors", ".", "keys", "(", ")", ":", "\n", "            ", "target_sizes", "=", "torch", ".", "stack", "(", "[", "t", "[", "\"size\"", "]", "for", "t", "in", "targets", "]", ",", "dim", "=", "0", ")", "\n", "results", "=", "postprocessors", "[", "'segm'", "]", "(", "results", ",", "outputs", ",", "orig_target_sizes", ",", "target_sizes", ")", "\n", "", "res", "=", "{", "target", "[", "'image_id'", "]", ".", "item", "(", ")", ":", "output", "for", "target", ",", "output", "in", "zip", "(", "targets", ",", "results", ")", "}", "\n", "if", "coco_evaluator", "is", "not", "None", ":", "\n", "            ", "coco_evaluator", ".", "update", "(", "res", ")", "\n", "\n", "", "if", "panoptic_evaluator", "is", "not", "None", ":", "\n", "            ", "res_pano", "=", "postprocessors", "[", "\"panoptic\"", "]", "(", "outputs", ",", "target_sizes", ",", "orig_target_sizes", ")", "\n", "for", "i", ",", "target", "in", "enumerate", "(", "targets", ")", ":", "\n", "                ", "image_id", "=", "target", "[", "\"image_id\"", "]", ".", "item", "(", ")", "\n", "file_name", "=", "f\"{image_id:012d}.png\"", "\n", "res_pano", "[", "i", "]", "[", "\"image_id\"", "]", "=", "image_id", "\n", "res_pano", "[", "i", "]", "[", "\"file_name\"", "]", "=", "file_name", "\n", "\n", "", "panoptic_evaluator", ".", "update", "(", "res_pano", ")", "\n", "\n", "# gather the stats from all processes", "\n", "", "", "metric_logger", ".", "synchronize_between_processes", "(", ")", "\n", "print", "(", "\"Averaged stats:\"", ",", "metric_logger", ")", "\n", "if", "coco_evaluator", "is", "not", "None", ":", "\n", "        ", "coco_evaluator", ".", "synchronize_between_processes", "(", ")", "\n", "", "if", "panoptic_evaluator", "is", "not", "None", ":", "\n", "        ", "panoptic_evaluator", ".", "synchronize_between_processes", "(", ")", "\n", "\n", "# accumulate predictions from all images", "\n", "", "if", "coco_evaluator", "is", "not", "None", ":", "\n", "        ", "coco_evaluator", ".", "accumulate", "(", ")", "\n", "coco_evaluator", ".", "summarize", "(", ")", "\n", "", "panoptic_res", "=", "None", "\n", "if", "panoptic_evaluator", "is", "not", "None", ":", "\n", "        ", "panoptic_res", "=", "panoptic_evaluator", ".", "summarize", "(", ")", "\n", "", "stats", "=", "{", "k", ":", "meter", ".", "global_avg", "for", "k", ",", "meter", "in", "metric_logger", ".", "meters", ".", "items", "(", ")", "}", "\n", "if", "coco_evaluator", "is", "not", "None", ":", "\n", "        ", "if", "'bbox'", "in", "postprocessors", ".", "keys", "(", ")", ":", "\n", "            ", "stats", "[", "'coco_eval_bbox'", "]", "=", "coco_evaluator", ".", "coco_eval", "[", "'bbox'", "]", ".", "stats", ".", "tolist", "(", ")", "\n", "", "if", "'segm'", "in", "postprocessors", ".", "keys", "(", ")", ":", "\n", "            ", "stats", "[", "'coco_eval_masks'", "]", "=", "coco_evaluator", ".", "coco_eval", "[", "'segm'", "]", ".", "stats", ".", "tolist", "(", ")", "\n", "", "", "if", "panoptic_res", "is", "not", "None", ":", "\n", "        ", "stats", "[", "'PQ_all'", "]", "=", "panoptic_res", "[", "\"All\"", "]", "\n", "stats", "[", "'PQ_th'", "]", "=", "panoptic_res", "[", "\"Things\"", "]", "\n", "stats", "[", "'PQ_st'", "]", "=", "panoptic_res", "[", "\"Stuff\"", "]", "\n", "", "return", "stats", ",", "coco_evaluator", "\n", "", ""]], "home.repos.pwc.inspect_result.dddzg_up-detr.None.main.get_args_parser": [[25, 102], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument"], "function", ["None"], ["def", "get_args_parser", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "'Set transformer detector'", ",", "add_help", "=", "False", ")", "\n", "parser", ".", "add_argument", "(", "'--lr'", ",", "default", "=", "1e-4", ",", "type", "=", "float", ")", "\n", "parser", ".", "add_argument", "(", "'--batch_size'", ",", "default", "=", "2", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--weight_decay'", ",", "default", "=", "1e-4", ",", "type", "=", "float", ")", "\n", "parser", ".", "add_argument", "(", "'--epochs'", ",", "default", "=", "60", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--lr_drop'", ",", "default", "=", "40", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--clip_max_norm'", ",", "default", "=", "0.1", ",", "type", "=", "float", ",", "\n", "help", "=", "'gradient clipping max norm'", ")", "\n", "\n", "# * Backbone", "\n", "parser", ".", "add_argument", "(", "'--backbone'", ",", "default", "=", "'resnet50'", ",", "type", "=", "str", ",", "\n", "help", "=", "\"Name of the convolutional backbone to use\"", ")", "\n", "parser", ".", "add_argument", "(", "'--dilation'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "\"If true, we replace stride with dilation in the last convolutional block (DC5)\"", ")", "\n", "parser", ".", "add_argument", "(", "'--position_embedding'", ",", "default", "=", "'sine'", ",", "type", "=", "str", ",", "choices", "=", "(", "'sine'", ",", "'learned'", ")", ",", "\n", "help", "=", "\"Type of positional embedding to use on top of the image features\"", ")", "\n", "\n", "# * Transformer", "\n", "parser", ".", "add_argument", "(", "'--enc_layers'", ",", "default", "=", "6", ",", "type", "=", "int", ",", "\n", "help", "=", "\"Number of encoding layers in the transformer\"", ")", "\n", "parser", ".", "add_argument", "(", "'--dec_layers'", ",", "default", "=", "6", ",", "type", "=", "int", ",", "\n", "help", "=", "\"Number of decoding layers in the transformer\"", ")", "\n", "parser", ".", "add_argument", "(", "'--dim_feedforward'", ",", "default", "=", "2048", ",", "type", "=", "int", ",", "\n", "help", "=", "\"Intermediate size of the feedforward layers in the transformer blocks\"", ")", "\n", "parser", ".", "add_argument", "(", "'--hidden_dim'", ",", "default", "=", "256", ",", "type", "=", "int", ",", "\n", "help", "=", "\"Size of the embeddings (dimension of the transformer)\"", ")", "\n", "parser", ".", "add_argument", "(", "'--dropout'", ",", "default", "=", "0.1", ",", "type", "=", "float", ",", "\n", "help", "=", "\"Dropout applied in the transformer\"", ")", "\n", "parser", ".", "add_argument", "(", "'--nheads'", ",", "default", "=", "8", ",", "type", "=", "int", ",", "\n", "help", "=", "\"Number of attention heads inside the transformer's attentions\"", ")", "\n", "parser", ".", "add_argument", "(", "'--num_queries'", ",", "default", "=", "100", ",", "type", "=", "int", ",", "\n", "help", "=", "\"Number of query slots\"", ")", "\n", "parser", ".", "add_argument", "(", "'--num_patches'", ",", "default", "=", "10", ",", "type", "=", "int", ",", "help", "=", "'number of query patches'", ")", "\n", "parser", ".", "add_argument", "(", "'--pre_norm'", ",", "action", "=", "'store_true'", ")", "\n", "\n", "# Loss", "\n", "parser", ".", "add_argument", "(", "'--no_aux_loss'", ",", "dest", "=", "'aux_loss'", ",", "action", "=", "'store_false'", ",", "\n", "help", "=", "\"Disables auxiliary decoding losses (loss at each layer)\"", ")", "\n", "# * Matcher", "\n", "parser", ".", "add_argument", "(", "'--set_cost_class'", ",", "default", "=", "1", ",", "type", "=", "float", ",", "\n", "help", "=", "\"Class coefficient in the matching cost\"", ")", "\n", "parser", ".", "add_argument", "(", "'--set_cost_bbox'", ",", "default", "=", "5", ",", "type", "=", "float", ",", "\n", "help", "=", "\"L1 box coefficient in the matching cost\"", ")", "\n", "parser", ".", "add_argument", "(", "'--set_cost_giou'", ",", "default", "=", "2", ",", "type", "=", "float", ",", "\n", "help", "=", "\"giou box coefficient in the matching cost\"", ")", "\n", "# * Loss coefficients", "\n", "parser", ".", "add_argument", "(", "'--mask_loss_coef'", ",", "default", "=", "1", ",", "type", "=", "float", ")", "\n", "parser", ".", "add_argument", "(", "'--dice_loss_coef'", ",", "default", "=", "1", ",", "type", "=", "float", ")", "\n", "parser", ".", "add_argument", "(", "'--bbox_loss_coef'", ",", "default", "=", "5", ",", "type", "=", "float", ")", "\n", "parser", ".", "add_argument", "(", "'--giou_loss_coef'", ",", "default", "=", "2", ",", "type", "=", "float", ")", "\n", "parser", ".", "add_argument", "(", "'--eos_coef'", ",", "default", "=", "0.1", ",", "type", "=", "float", ",", "\n", "help", "=", "\"Relative classification weight of the no-object class\"", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--output_dir'", ",", "default", "=", "''", ",", "\n", "help", "=", "'path where to save, empty for no saving'", ")", "\n", "parser", ".", "add_argument", "(", "'--device'", ",", "default", "=", "'cuda'", ",", "\n", "help", "=", "'device to use for training / testing'", ")", "\n", "parser", ".", "add_argument", "(", "'--seed'", ",", "default", "=", "42", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--resume'", ",", "default", "=", "''", ",", "help", "=", "'resume from checkpoint'", ")", "\n", "parser", ".", "add_argument", "(", "'--start_epoch'", ",", "default", "=", "0", ",", "type", "=", "int", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'start epoch'", ")", "\n", "parser", ".", "add_argument", "(", "'--eval'", ",", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "'--num_workers'", ",", "default", "=", "16", ",", "type", "=", "int", ")", "\n", "\n", "# distributed training parameters", "\n", "parser", ".", "add_argument", "(", "'--world_size'", ",", "default", "=", "1", ",", "type", "=", "int", ",", "\n", "help", "=", "'number of distributed processes'", ")", "\n", "parser", ".", "add_argument", "(", "'--dist_url'", ",", "default", "=", "'env://'", ",", "help", "=", "'url used to set up distributed training'", ")", "\n", "\n", "# custom parameters", "\n", "parser", ".", "add_argument", "(", "'--imagenet_path'", ",", "type", "=", "str", ",", "default", "=", "\"\"", ",", "help", "=", "\"path to the ImageNet dataset, like ImageNet\"", ")", "\n", "parser", ".", "add_argument", "(", "'--feature_recon'", ",", "action", "=", "'store_true'", ",", "help", "=", "'if set, add feature reconstruction branch'", ")", "\n", "parser", ".", "add_argument", "(", "'--query_shuffle'", ",", "action", "=", "'store_true'", ",", "help", "=", "'if set, shuffle object queries'", ")", "\n", "parser", ".", "add_argument", "(", "'--fre_cnn'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "\"if set, freeze cnn parameters during the pre-training\"", ")", "\n", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.dddzg_up-detr.None.main.main": [[104, 205], ["util.init_distributed_mode", "print", "print", "torch.device", "torch.manual_seed", "numpy.random.seed", "random.seed", "models.build_model", "torch.nn.parallel.DistributedDataParallel.to", "sum", "print", "torch.optim.AdamW", "torch.optim.lr_scheduler.StepLR", "datasets.build_dataset", "torch.utils.data.BatchSampler", "torch.utils.data.DataLoader", "print", "pathlib.Path", "print", "time.time", "range", "str", "print", "util.get_rank", "torch.nn.parallel.DistributedDataParallel", "torch.utils.data.DistributedSampler", "torch.utils.data.RandomSampler", "torch.load", "model_without_ddp.load_state_dict", "engine.train_one_epoch", "torch.optim.lr_scheduler.StepLR.step", "time.time", "datetime.timedelta", "util.get_sha", "p.numel", "len", "torch.optim.AdamW.load_state_dict", "torch.optim.lr_scheduler.StepLR.load_state_dict", "torch.utils.data.RandomSampler.set_epoch", "util.is_main_process", "torch.nn.parallel.DistributedDataParallel.parameters", "checkpoint_paths.append", "util.save_on_master", "f.write", "int", "model_without_ddp.named_parameters", "model_without_ddp.named_parameters", "engine.train_one_epoch.items", "model_without_ddp.state_dict", "torch.optim.AdamW.state_dict", "torch.optim.lr_scheduler.StepLR.state_dict", "json.dumps"], "function", ["home.repos.pwc.inspect_result.dddzg_up-detr.util.misc.init_distributed_mode", "home.repos.pwc.inspect_result.dddzg_up-detr.models.__init__.build_model", "home.repos.pwc.inspect_result.dddzg_up-detr.util.misc.NestedTensor.to", "home.repos.pwc.inspect_result.dddzg_up-detr.datasets.__init__.build_dataset", "home.repos.pwc.inspect_result.dddzg_up-detr.util.misc.get_rank", "home.repos.pwc.inspect_result.dddzg_up-detr.None.engine.train_one_epoch", "home.repos.pwc.inspect_result.dddzg_up-detr.util.misc.get_sha", "home.repos.pwc.inspect_result.dddzg_up-detr.util.misc.is_main_process", "home.repos.pwc.inspect_result.dddzg_up-detr.util.misc.save_on_master"], ["", "def", "main", "(", "args", ")", ":", "\n", "    ", "utils", ".", "init_distributed_mode", "(", "args", ")", "\n", "print", "(", "\"git:\\n  {}\\n\"", ".", "format", "(", "utils", ".", "get_sha", "(", ")", ")", ")", "\n", "\n", "# align with DETR format", "\n", "args", ".", "dataset_file", "=", "'ImageNet'", "\n", "args", ".", "masks", "=", "None", "\n", "# freeze cnn weights", "\n", "args", ".", "lr_backbone", "=", "0", "if", "args", ".", "fre_cnn", "else", "args", ".", "lr", "\n", "print", "(", "args", ")", "\n", "\n", "device", "=", "torch", ".", "device", "(", "args", ".", "device", ")", "\n", "\n", "# fix the seed for reproducibility", "\n", "seed", "=", "args", ".", "seed", "+", "utils", ".", "get_rank", "(", ")", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "random", ".", "seed", "(", "seed", ")", "\n", "\n", "model", ",", "criterion", ",", "postprocessors", "=", "build_model", "(", "args", ")", "\n", "model", ".", "to", "(", "device", ")", "\n", "\n", "model_without_ddp", "=", "model", "\n", "if", "args", ".", "distributed", ":", "\n", "        ", "model", "=", "torch", ".", "nn", ".", "parallel", ".", "DistributedDataParallel", "(", "model", ",", "device_ids", "=", "[", "args", ".", "gpu", "]", ")", "\n", "model_without_ddp", "=", "model", ".", "module", "\n", "", "n_parameters", "=", "sum", "(", "p", ".", "numel", "(", ")", "for", "p", "in", "model", ".", "parameters", "(", ")", "if", "p", ".", "requires_grad", ")", "\n", "print", "(", "'number of params:'", ",", "n_parameters", ")", "\n", "\n", "param_dicts", "=", "[", "\n", "{", "\"params\"", ":", "[", "p", "for", "n", ",", "p", "in", "model_without_ddp", ".", "named_parameters", "(", ")", "if", "\"backbone\"", "not", "in", "n", "and", "p", ".", "requires_grad", "]", "}", ",", "\n", "{", "\n", "\"params\"", ":", "[", "p", "for", "n", ",", "p", "in", "model_without_ddp", ".", "named_parameters", "(", ")", "if", "\"backbone\"", "in", "n", "and", "p", ".", "requires_grad", "]", ",", "\n", "\"lr\"", ":", "args", ".", "lr_backbone", ",", "\n", "}", ",", "\n", "]", "\n", "optimizer", "=", "torch", ".", "optim", ".", "AdamW", "(", "param_dicts", ",", "lr", "=", "args", ".", "lr", ",", "\n", "weight_decay", "=", "args", ".", "weight_decay", ")", "\n", "lr_scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "StepLR", "(", "optimizer", ",", "args", ".", "lr_drop", ")", "\n", "\n", "dataset_train", "=", "build_dataset", "(", "image_set", "=", "'train'", ",", "args", "=", "args", ")", "\n", "\n", "if", "args", ".", "distributed", ":", "\n", "        ", "sampler_train", "=", "DistributedSampler", "(", "dataset_train", ")", "\n", "", "else", ":", "\n", "        ", "sampler_train", "=", "torch", ".", "utils", ".", "data", ".", "RandomSampler", "(", "dataset_train", ")", "\n", "\n", "", "batch_sampler_train", "=", "torch", ".", "utils", ".", "data", ".", "BatchSampler", "(", "\n", "sampler_train", ",", "args", ".", "batch_size", ",", "drop_last", "=", "True", ")", "\n", "\n", "data_loader_train", "=", "DataLoader", "(", "dataset_train", ",", "batch_sampler", "=", "batch_sampler_train", ",", "\n", "collate_fn", "=", "utils", ".", "updetr_collate_fn", ",", "num_workers", "=", "args", ".", "num_workers", ")", "\n", "\n", "print", "(", "len", "(", "data_loader_train", ")", "*", "args", ".", "epochs", ")", "\n", "\n", "output_dir", "=", "Path", "(", "args", ".", "output_dir", ")", "\n", "\n", "if", "args", ".", "resume", ":", "\n", "        ", "checkpoint", "=", "torch", ".", "load", "(", "args", ".", "resume", ",", "map_location", "=", "'cpu'", ")", "\n", "model_without_ddp", ".", "load_state_dict", "(", "checkpoint", "[", "'model'", "]", ")", "\n", "if", "not", "args", ".", "eval", "and", "'optimizer'", "in", "checkpoint", "and", "'lr_scheduler'", "in", "checkpoint", "and", "'epoch'", "in", "checkpoint", ":", "\n", "            ", "optimizer", ".", "load_state_dict", "(", "checkpoint", "[", "'optimizer'", "]", ")", "\n", "lr_scheduler", ".", "load_state_dict", "(", "checkpoint", "[", "'lr_scheduler'", "]", ")", "\n", "if", "lr_scheduler", ".", "step_size", "!=", "args", ".", "lr_drop", ":", "\n", "                ", "lr_scheduler", ".", "step_size", "=", "args", ".", "lr_drop", "\n", "", "args", ".", "start_epoch", "=", "checkpoint", "[", "'epoch'", "]", "+", "1", "\n", "\n", "", "", "print", "(", "\"Start training\"", ")", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "for", "epoch", "in", "range", "(", "args", ".", "start_epoch", ",", "args", ".", "epochs", ")", ":", "\n", "        ", "if", "args", ".", "distributed", ":", "\n", "            ", "sampler_train", ".", "set_epoch", "(", "epoch", ")", "\n", "", "train_stats", "=", "train_one_epoch", "(", "\n", "model", ",", "criterion", ",", "data_loader_train", ",", "optimizer", ",", "device", ",", "epoch", ",", "\n", "args", ".", "clip_max_norm", ")", "\n", "lr_scheduler", ".", "step", "(", ")", "\n", "if", "args", ".", "output_dir", ":", "\n", "            ", "checkpoint_paths", "=", "[", "output_dir", "/", "'checkpoint.pth'", "]", "\n", "# extra checkpoint before LR drop and every 20 epochs", "\n", "if", "(", "epoch", "+", "1", ")", "%", "args", ".", "lr_drop", "==", "0", "or", "(", "epoch", "+", "1", ")", "%", "20", "==", "0", ":", "\n", "                ", "checkpoint_paths", ".", "append", "(", "output_dir", "/", "f'checkpoint{epoch:04}.pth'", ")", "\n", "", "for", "checkpoint_path", "in", "checkpoint_paths", ":", "\n", "                ", "utils", ".", "save_on_master", "(", "{", "\n", "'model'", ":", "model_without_ddp", ".", "state_dict", "(", ")", ",", "\n", "'optimizer'", ":", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "'lr_scheduler'", ":", "lr_scheduler", ".", "state_dict", "(", ")", ",", "\n", "'epoch'", ":", "epoch", ",", "\n", "'args'", ":", "args", ",", "\n", "}", ",", "checkpoint_path", ")", "\n", "\n", "", "", "log_stats", "=", "{", "**", "{", "f'train_{k}'", ":", "v", "for", "k", ",", "v", "in", "train_stats", ".", "items", "(", ")", "}", ",", "\n", "'epoch'", ":", "epoch", ",", "\n", "'n_parameters'", ":", "n_parameters", "}", "\n", "\n", "if", "args", ".", "output_dir", "and", "utils", ".", "is_main_process", "(", ")", ":", "\n", "            ", "with", "(", "output_dir", "/", "\"log.txt\"", ")", ".", "open", "(", "\"a\"", ")", "as", "f", ":", "\n", "                ", "f", ".", "write", "(", "json", ".", "dumps", "(", "log_stats", ")", "+", "\"\\n\"", ")", "\n", "\n", "", "", "", "total_time", "=", "time", ".", "time", "(", ")", "-", "start_time", "\n", "total_time_str", "=", "str", "(", "datetime", ".", "timedelta", "(", "seconds", "=", "int", "(", "total_time", ")", ")", ")", "\n", "print", "(", "'Training time {}'", ".", "format", "(", "total_time_str", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dddzg_up-detr.None.detr_main.get_args_parser": [[26, 110], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument"], "function", ["None"], ["def", "get_args_parser", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "'Set transformer detector'", ",", "add_help", "=", "False", ")", "\n", "parser", ".", "add_argument", "(", "'--lr'", ",", "default", "=", "1e-4", ",", "type", "=", "float", ")", "\n", "parser", ".", "add_argument", "(", "'--lr_backbone'", ",", "default", "=", "1e-5", ",", "type", "=", "float", ")", "\n", "parser", ".", "add_argument", "(", "'--batch_size'", ",", "default", "=", "2", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--weight_decay'", ",", "default", "=", "1e-4", ",", "type", "=", "float", ")", "\n", "parser", ".", "add_argument", "(", "'--epochs'", ",", "default", "=", "300", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--lr_drop'", ",", "default", "=", "200", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--clip_max_norm'", ",", "default", "=", "0.1", ",", "type", "=", "float", ",", "\n", "help", "=", "'gradient clipping max norm'", ")", "\n", "\n", "# Model parameters", "\n", "parser", ".", "add_argument", "(", "'--frozen_weights'", ",", "type", "=", "str", ",", "default", "=", "None", ",", "\n", "help", "=", "\"Path to the pretrained model. If set, only the mask head will be trained\"", ")", "\n", "# * Backbone", "\n", "parser", ".", "add_argument", "(", "'--backbone'", ",", "default", "=", "'resnet50'", ",", "type", "=", "str", ",", "\n", "help", "=", "\"Name of the convolutional backbone to use\"", ")", "\n", "parser", ".", "add_argument", "(", "'--dilation'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "\"If true, we replace stride with dilation in the last convolutional block (DC5)\"", ")", "\n", "parser", ".", "add_argument", "(", "'--position_embedding'", ",", "default", "=", "'sine'", ",", "type", "=", "str", ",", "choices", "=", "(", "'sine'", ",", "'learned'", ")", ",", "\n", "help", "=", "\"Type of positional embedding to use on top of the image features\"", ")", "\n", "\n", "# * Transformer", "\n", "parser", ".", "add_argument", "(", "'--enc_layers'", ",", "default", "=", "6", ",", "type", "=", "int", ",", "\n", "help", "=", "\"Number of encoding layers in the transformer\"", ")", "\n", "parser", ".", "add_argument", "(", "'--dec_layers'", ",", "default", "=", "6", ",", "type", "=", "int", ",", "\n", "help", "=", "\"Number of decoding layers in the transformer\"", ")", "\n", "parser", ".", "add_argument", "(", "'--dim_feedforward'", ",", "default", "=", "2048", ",", "type", "=", "int", ",", "\n", "help", "=", "\"Intermediate size of the feedforward layers in the transformer blocks\"", ")", "\n", "parser", ".", "add_argument", "(", "'--hidden_dim'", ",", "default", "=", "256", ",", "type", "=", "int", ",", "\n", "help", "=", "\"Size of the embeddings (dimension of the transformer)\"", ")", "\n", "parser", ".", "add_argument", "(", "'--dropout'", ",", "default", "=", "0.1", ",", "type", "=", "float", ",", "\n", "help", "=", "\"Dropout applied in the transformer\"", ")", "\n", "parser", ".", "add_argument", "(", "'--nheads'", ",", "default", "=", "8", ",", "type", "=", "int", ",", "\n", "help", "=", "\"Number of attention heads inside the transformer's attentions\"", ")", "\n", "parser", ".", "add_argument", "(", "'--num_queries'", ",", "default", "=", "100", ",", "type", "=", "int", ",", "\n", "help", "=", "\"Number of query slots\"", ")", "\n", "parser", ".", "add_argument", "(", "'--pre_norm'", ",", "action", "=", "'store_true'", ")", "\n", "\n", "# * Segmentation", "\n", "parser", ".", "add_argument", "(", "'--masks'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "\"Train segmentation head if the flag is provided\"", ")", "\n", "\n", "# Loss", "\n", "parser", ".", "add_argument", "(", "'--no_aux_loss'", ",", "dest", "=", "'aux_loss'", ",", "action", "=", "'store_false'", ",", "\n", "help", "=", "\"Disables auxiliary decoding losses (loss at each layer)\"", ")", "\n", "# * Matcher", "\n", "parser", ".", "add_argument", "(", "'--set_cost_class'", ",", "default", "=", "1", ",", "type", "=", "float", ",", "\n", "help", "=", "\"Class coefficient in the matching cost\"", ")", "\n", "parser", ".", "add_argument", "(", "'--set_cost_bbox'", ",", "default", "=", "5", ",", "type", "=", "float", ",", "\n", "help", "=", "\"L1 box coefficient in the matching cost\"", ")", "\n", "parser", ".", "add_argument", "(", "'--set_cost_giou'", ",", "default", "=", "2", ",", "type", "=", "float", ",", "\n", "help", "=", "\"giou box coefficient in the matching cost\"", ")", "\n", "# * Loss coefficients", "\n", "parser", ".", "add_argument", "(", "'--mask_loss_coef'", ",", "default", "=", "1", ",", "type", "=", "float", ")", "\n", "parser", ".", "add_argument", "(", "'--dice_loss_coef'", ",", "default", "=", "1", ",", "type", "=", "float", ")", "\n", "parser", ".", "add_argument", "(", "'--bbox_loss_coef'", ",", "default", "=", "5", ",", "type", "=", "float", ")", "\n", "parser", ".", "add_argument", "(", "'--giou_loss_coef'", ",", "default", "=", "2", ",", "type", "=", "float", ")", "\n", "parser", ".", "add_argument", "(", "'--eos_coef'", ",", "default", "=", "0.1", ",", "type", "=", "float", ",", "\n", "help", "=", "\"Relative classification weight of the no-object class\"", ")", "\n", "\n", "# dataset parameters", "\n", "parser", ".", "add_argument", "(", "'--dataset_file'", ",", "default", "=", "'coco'", ")", "\n", "parser", ".", "add_argument", "(", "'--coco_path'", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--coco_panoptic_path'", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--remove_difficult'", ",", "action", "=", "'store_true'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--output_dir'", ",", "default", "=", "''", ",", "\n", "help", "=", "'path where to save, empty for no saving'", ")", "\n", "parser", ".", "add_argument", "(", "'--device'", ",", "default", "=", "'cuda'", ",", "\n", "help", "=", "'device to use for training / testing'", ")", "\n", "parser", ".", "add_argument", "(", "'--seed'", ",", "default", "=", "42", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--resume'", ",", "default", "=", "''", ",", "help", "=", "'resume from checkpoint'", ")", "\n", "parser", ".", "add_argument", "(", "'--start_epoch'", ",", "default", "=", "0", ",", "type", "=", "int", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'start epoch'", ")", "\n", "parser", ".", "add_argument", "(", "'--eval'", ",", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "'--num_workers'", ",", "default", "=", "2", ",", "type", "=", "int", ")", "\n", "\n", "# distributed training parameters", "\n", "parser", ".", "add_argument", "(", "'--world_size'", ",", "default", "=", "1", ",", "type", "=", "int", ",", "\n", "help", "=", "'number of distributed processes'", ")", "\n", "parser", ".", "add_argument", "(", "'--dist_url'", ",", "default", "=", "'env://'", ",", "help", "=", "'url used to set up distributed training'", ")", "\n", "parser", ".", "add_argument", "(", "'--pretrain'", ",", "default", "=", "''", ",", "help", "=", "'initialized from the pre-training model'", ")", "\n", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.dddzg_up-detr.None.detr_main.main": [[112, 260], ["util.init_distributed_mode", "print", "print", "torch.device", "torch.manual_seed", "numpy.random.seed", "random.seed", "models.build_model", "torch.nn.parallel.DistributedDataParallel.to", "sum", "print", "torch.optim.AdamW", "torch.optim.lr_scheduler.StepLR", "datasets.build_dataset", "datasets.build_dataset", "torch.utils.data.BatchSampler", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "pathlib.Path", "print", "time.time", "range", "str", "print", "util.get_rank", "torch.nn.parallel.DistributedDataParallel", "torch.utils.data.DistributedSampler", "torch.utils.data.DistributedSampler", "torch.utils.data.RandomSampler", "torch.utils.data.SequentialSampler", "datasets.coco.build", "datasets.get_coco_api_from_dataset", "datasets.get_coco_api_from_dataset", "torch.load", "model_without_ddp.detr.load_state_dict", "print", "torch.load", "list", "model_without_ddp.load_state_dict", "print", "args.resume.startswith", "model_without_ddp.load_state_dict", "engine.evaluate", "engine.train_one_epoch", "torch.optim.lr_scheduler.StepLR.step", "engine.evaluate", "time.time", "datetime.timedelta", "util.get_sha", "p.numel", "state_dict.keys", "torch.hub.load_state_dict_from_url", "torch.load", "torch.optim.AdamW.load_state_dict", "torch.optim.lr_scheduler.StepLR.load_state_dict", "util.save_on_master", "torch.utils.data.RandomSampler.set_epoch", "util.is_main_process", "torch.nn.parallel.DistributedDataParallel.parameters", "checkpoint_paths.append", "util.save_on_master", "f.write", "int", "model_without_ddp.named_parameters", "model_without_ddp.named_parameters", "engine.train_one_epoch.items", "test_stats.items", "model_without_ddp.state_dict", "torch.optim.AdamW.state_dict", "torch.optim.lr_scheduler.StepLR.state_dict", "json.dumps", "filenames.append", "torch.save"], "function", ["home.repos.pwc.inspect_result.dddzg_up-detr.util.misc.init_distributed_mode", "home.repos.pwc.inspect_result.dddzg_up-detr.models.__init__.build_model", "home.repos.pwc.inspect_result.dddzg_up-detr.util.misc.NestedTensor.to", "home.repos.pwc.inspect_result.dddzg_up-detr.datasets.__init__.build_dataset", "home.repos.pwc.inspect_result.dddzg_up-detr.datasets.__init__.build_dataset", "home.repos.pwc.inspect_result.dddzg_up-detr.util.misc.get_rank", "home.repos.pwc.inspect_result.dddzg_up-detr.datasets.coco_panoptic.build", "home.repos.pwc.inspect_result.dddzg_up-detr.datasets.__init__.get_coco_api_from_dataset", "home.repos.pwc.inspect_result.dddzg_up-detr.datasets.__init__.get_coco_api_from_dataset", "home.repos.pwc.inspect_result.dddzg_up-detr.datasets.coco_eval.evaluate", "home.repos.pwc.inspect_result.dddzg_up-detr.None.engine.train_one_epoch", "home.repos.pwc.inspect_result.dddzg_up-detr.datasets.coco_eval.evaluate", "home.repos.pwc.inspect_result.dddzg_up-detr.util.misc.get_sha", "home.repos.pwc.inspect_result.dddzg_up-detr.util.misc.save_on_master", "home.repos.pwc.inspect_result.dddzg_up-detr.util.misc.is_main_process", "home.repos.pwc.inspect_result.dddzg_up-detr.util.misc.save_on_master"], ["", "def", "main", "(", "args", ")", ":", "\n", "    ", "utils", ".", "init_distributed_mode", "(", "args", ")", "\n", "print", "(", "\"git:\\n  {}\\n\"", ".", "format", "(", "utils", ".", "get_sha", "(", ")", ")", ")", "\n", "\n", "if", "args", ".", "frozen_weights", "is", "not", "None", ":", "\n", "        ", "assert", "args", ".", "masks", ",", "\"Frozen training is meant for segmentation only\"", "\n", "", "print", "(", "args", ")", "\n", "\n", "device", "=", "torch", ".", "device", "(", "args", ".", "device", ")", "\n", "\n", "# fix the seed for reproducibility", "\n", "seed", "=", "args", ".", "seed", "+", "utils", ".", "get_rank", "(", ")", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "random", ".", "seed", "(", "seed", ")", "\n", "\n", "model", ",", "criterion", ",", "postprocessors", "=", "build_model", "(", "args", ")", "\n", "model", ".", "to", "(", "device", ")", "\n", "\n", "model_without_ddp", "=", "model", "\n", "if", "args", ".", "distributed", ":", "\n", "        ", "model", "=", "torch", ".", "nn", ".", "parallel", ".", "DistributedDataParallel", "(", "model", ",", "device_ids", "=", "[", "args", ".", "gpu", "]", ")", "\n", "model_without_ddp", "=", "model", ".", "module", "\n", "", "n_parameters", "=", "sum", "(", "p", ".", "numel", "(", ")", "for", "p", "in", "model", ".", "parameters", "(", ")", "if", "p", ".", "requires_grad", ")", "\n", "print", "(", "'number of params:'", ",", "n_parameters", ")", "\n", "\n", "param_dicts", "=", "[", "\n", "{", "\"params\"", ":", "[", "p", "for", "n", ",", "p", "in", "model_without_ddp", ".", "named_parameters", "(", ")", "if", "\"backbone\"", "not", "in", "n", "and", "p", ".", "requires_grad", "]", "}", ",", "\n", "{", "\n", "\"params\"", ":", "[", "p", "for", "n", ",", "p", "in", "model_without_ddp", ".", "named_parameters", "(", ")", "if", "\"backbone\"", "in", "n", "and", "p", ".", "requires_grad", "]", ",", "\n", "\"lr\"", ":", "args", ".", "lr_backbone", ",", "\n", "}", ",", "\n", "]", "\n", "optimizer", "=", "torch", ".", "optim", ".", "AdamW", "(", "param_dicts", ",", "lr", "=", "args", ".", "lr", ",", "\n", "weight_decay", "=", "args", ".", "weight_decay", ")", "\n", "lr_scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "StepLR", "(", "optimizer", ",", "args", ".", "lr_drop", ")", "\n", "\n", "dataset_train", "=", "build_dataset", "(", "image_set", "=", "'train'", ",", "args", "=", "args", ")", "\n", "dataset_val", "=", "build_dataset", "(", "image_set", "=", "'val'", ",", "args", "=", "args", ")", "\n", "\n", "if", "args", ".", "distributed", ":", "\n", "        ", "sampler_train", "=", "DistributedSampler", "(", "dataset_train", ")", "\n", "sampler_val", "=", "DistributedSampler", "(", "dataset_val", ",", "shuffle", "=", "False", ")", "\n", "", "else", ":", "\n", "        ", "sampler_train", "=", "torch", ".", "utils", ".", "data", ".", "RandomSampler", "(", "dataset_train", ")", "\n", "sampler_val", "=", "torch", ".", "utils", ".", "data", ".", "SequentialSampler", "(", "dataset_val", ")", "\n", "\n", "", "batch_sampler_train", "=", "torch", ".", "utils", ".", "data", ".", "BatchSampler", "(", "\n", "sampler_train", ",", "args", ".", "batch_size", ",", "drop_last", "=", "True", ")", "\n", "\n", "data_loader_train", "=", "DataLoader", "(", "dataset_train", ",", "batch_sampler", "=", "batch_sampler_train", ",", "\n", "collate_fn", "=", "utils", ".", "collate_fn", ",", "num_workers", "=", "args", ".", "num_workers", ")", "\n", "data_loader_val", "=", "DataLoader", "(", "dataset_val", ",", "args", ".", "batch_size", ",", "sampler", "=", "sampler_val", ",", "\n", "drop_last", "=", "False", ",", "collate_fn", "=", "utils", ".", "collate_fn", ",", "num_workers", "=", "args", ".", "num_workers", ")", "\n", "\n", "if", "args", ".", "dataset_file", "==", "\"coco_panoptic\"", ":", "\n", "# We also evaluate AP during panoptic training, on original coco DS", "\n", "        ", "coco_val", "=", "datasets", ".", "coco", ".", "build", "(", "\"val\"", ",", "args", ")", "\n", "base_ds", "=", "get_coco_api_from_dataset", "(", "coco_val", ")", "\n", "", "else", ":", "\n", "        ", "base_ds", "=", "get_coco_api_from_dataset", "(", "dataset_val", ")", "\n", "\n", "", "if", "args", ".", "frozen_weights", "is", "not", "None", ":", "\n", "        ", "checkpoint", "=", "torch", ".", "load", "(", "args", ".", "frozen_weights", ",", "map_location", "=", "'cpu'", ")", "\n", "model_without_ddp", ".", "detr", ".", "load_state_dict", "(", "checkpoint", "[", "'model'", "]", ")", "\n", "\n", "", "output_dir", "=", "Path", "(", "args", ".", "output_dir", ")", "\n", "\n", "if", "args", ".", "pretrain", ":", "\n", "        ", "print", "(", "'Initialized from the pre-training model'", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "args", ".", "pretrain", ",", "map_location", "=", "'cpu'", ")", "\n", "state_dict", "=", "checkpoint", "[", "'model'", "]", "\n", "for", "k", "in", "list", "(", "state_dict", ".", "keys", "(", ")", ")", ":", "\n", "# remove useless class embed", "\n", "            ", "if", "'class_embed'", "in", "k", ":", "\n", "                ", "del", "state_dict", "[", "k", "]", "\n", "", "", "msg", "=", "model_without_ddp", ".", "load_state_dict", "(", "state_dict", ",", "strict", "=", "False", ")", "\n", "print", "(", "msg", ")", "\n", "\n", "", "if", "args", ".", "resume", ":", "\n", "        ", "if", "args", ".", "resume", ".", "startswith", "(", "'https'", ")", ":", "\n", "            ", "checkpoint", "=", "torch", ".", "hub", ".", "load_state_dict_from_url", "(", "\n", "args", ".", "resume", ",", "map_location", "=", "'cpu'", ",", "check_hash", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "checkpoint", "=", "torch", ".", "load", "(", "args", ".", "resume", ",", "map_location", "=", "'cpu'", ")", "\n", "", "model_without_ddp", ".", "load_state_dict", "(", "checkpoint", "[", "'model'", "]", ")", "\n", "if", "not", "args", ".", "eval", "and", "'optimizer'", "in", "checkpoint", "and", "'lr_scheduler'", "in", "checkpoint", "and", "'epoch'", "in", "checkpoint", ":", "\n", "            ", "optimizer", ".", "load_state_dict", "(", "checkpoint", "[", "'optimizer'", "]", ")", "\n", "lr_scheduler", ".", "load_state_dict", "(", "checkpoint", "[", "'lr_scheduler'", "]", ")", "\n", "args", ".", "start_epoch", "=", "checkpoint", "[", "'epoch'", "]", "+", "1", "\n", "\n", "", "", "if", "args", ".", "eval", ":", "\n", "        ", "test_stats", ",", "coco_evaluator", "=", "evaluate", "(", "model", ",", "criterion", ",", "postprocessors", ",", "\n", "data_loader_val", ",", "base_ds", ",", "device", ",", "args", ".", "output_dir", ")", "\n", "if", "args", ".", "output_dir", ":", "\n", "            ", "utils", ".", "save_on_master", "(", "coco_evaluator", ".", "coco_eval", "[", "\"bbox\"", "]", ".", "eval", ",", "output_dir", "/", "\"eval.pth\"", ")", "\n", "", "return", "\n", "\n", "", "print", "(", "\"Start training\"", ")", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "for", "epoch", "in", "range", "(", "args", ".", "start_epoch", ",", "args", ".", "epochs", ")", ":", "\n", "        ", "if", "args", ".", "distributed", ":", "\n", "            ", "sampler_train", ".", "set_epoch", "(", "epoch", ")", "\n", "", "train_stats", "=", "train_one_epoch", "(", "\n", "model", ",", "criterion", ",", "data_loader_train", ",", "optimizer", ",", "device", ",", "epoch", ",", "\n", "args", ".", "clip_max_norm", ")", "\n", "lr_scheduler", ".", "step", "(", ")", "\n", "if", "args", ".", "output_dir", ":", "\n", "            ", "checkpoint_paths", "=", "[", "output_dir", "/", "'checkpoint.pth'", "]", "\n", "# extra checkpoint before LR drop and every 100 epochs", "\n", "if", "(", "epoch", "+", "1", ")", "%", "args", ".", "lr_drop", "==", "0", "or", "(", "epoch", "+", "1", ")", "%", "100", "==", "0", ":", "\n", "                ", "checkpoint_paths", ".", "append", "(", "output_dir", "/", "f'checkpoint{epoch:04}.pth'", ")", "\n", "", "for", "checkpoint_path", "in", "checkpoint_paths", ":", "\n", "                ", "utils", ".", "save_on_master", "(", "{", "\n", "'model'", ":", "model_without_ddp", ".", "state_dict", "(", ")", ",", "\n", "'optimizer'", ":", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "'lr_scheduler'", ":", "lr_scheduler", ".", "state_dict", "(", ")", ",", "\n", "'epoch'", ":", "epoch", ",", "\n", "'args'", ":", "args", ",", "\n", "}", ",", "checkpoint_path", ")", "\n", "\n", "", "", "test_stats", ",", "coco_evaluator", "=", "evaluate", "(", "\n", "model", ",", "criterion", ",", "postprocessors", ",", "data_loader_val", ",", "base_ds", ",", "device", ",", "args", ".", "output_dir", "\n", ")", "\n", "\n", "log_stats", "=", "{", "**", "{", "f'train_{k}'", ":", "v", "for", "k", ",", "v", "in", "train_stats", ".", "items", "(", ")", "}", ",", "\n", "**", "{", "f'test_{k}'", ":", "v", "for", "k", ",", "v", "in", "test_stats", ".", "items", "(", ")", "}", ",", "\n", "'epoch'", ":", "epoch", ",", "\n", "'n_parameters'", ":", "n_parameters", "}", "\n", "\n", "if", "args", ".", "output_dir", "and", "utils", ".", "is_main_process", "(", ")", ":", "\n", "            ", "with", "(", "output_dir", "/", "\"log.txt\"", ")", ".", "open", "(", "\"a\"", ")", "as", "f", ":", "\n", "                ", "f", ".", "write", "(", "json", ".", "dumps", "(", "log_stats", ")", "+", "\"\\n\"", ")", "\n", "\n", "# for evaluation logs", "\n", "", "if", "coco_evaluator", "is", "not", "None", ":", "\n", "                ", "(", "output_dir", "/", "'eval'", ")", ".", "mkdir", "(", "exist_ok", "=", "True", ")", "\n", "if", "\"bbox\"", "in", "coco_evaluator", ".", "coco_eval", ":", "\n", "                    ", "filenames", "=", "[", "'latest.pth'", "]", "\n", "if", "epoch", "%", "50", "==", "0", ":", "\n", "                        ", "filenames", ".", "append", "(", "f'{epoch:03}.pth'", ")", "\n", "", "for", "name", "in", "filenames", ":", "\n", "                        ", "torch", ".", "save", "(", "coco_evaluator", ".", "coco_eval", "[", "\"bbox\"", "]", ".", "eval", ",", "\n", "output_dir", "/", "\"eval\"", "/", "name", ")", "\n", "\n", "", "", "", "", "", "total_time", "=", "time", ".", "time", "(", ")", "-", "start_time", "\n", "total_time_str", "=", "str", "(", "datetime", ".", "timedelta", "(", "seconds", "=", "int", "(", "total_time", ")", ")", ")", "\n", "print", "(", "'Training time {}'", ".", "format", "(", "total_time_str", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dddzg_up-detr.datasets.coco_eval.CocoEvaluator.__init__": [[29, 41], ["isinstance", "copy.deepcopy", "pycocotools.cocoeval.COCOeval"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "coco_gt", ",", "iou_types", ")", ":", "\n", "        ", "assert", "isinstance", "(", "iou_types", ",", "(", "list", ",", "tuple", ")", ")", "\n", "coco_gt", "=", "copy", ".", "deepcopy", "(", "coco_gt", ")", "\n", "self", ".", "coco_gt", "=", "coco_gt", "\n", "\n", "self", ".", "iou_types", "=", "iou_types", "\n", "self", ".", "coco_eval", "=", "{", "}", "\n", "for", "iou_type", "in", "iou_types", ":", "\n", "            ", "self", ".", "coco_eval", "[", "iou_type", "]", "=", "COCOeval", "(", "coco_gt", ",", "iouType", "=", "iou_type", ")", "\n", "\n", "", "self", ".", "img_ids", "=", "[", "]", "\n", "self", ".", "eval_imgs", "=", "{", "k", ":", "[", "]", "for", "k", "in", "iou_types", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.dddzg_up-detr.datasets.coco_eval.CocoEvaluator.update": [[42, 60], ["list", "coco_eval.CocoEvaluator.img_ids.extend", "numpy.unique", "coco_eval.CocoEvaluator.prepare", "list", "coco_eval.evaluate", "coco_eval.CocoEvaluator.eval_imgs[].append", "list", "open", "predictions.keys", "contextlib.redirect_stdout", "pycocotools.coco.COCO.loadRes", "pycocotools.coco.COCO"], "methods", ["home.repos.pwc.inspect_result.dddzg_up-detr.datasets.coco_eval.CocoEvaluator.prepare", "home.repos.pwc.inspect_result.dddzg_up-detr.datasets.coco_eval.evaluate"], ["", "def", "update", "(", "self", ",", "predictions", ")", ":", "\n", "        ", "img_ids", "=", "list", "(", "np", ".", "unique", "(", "list", "(", "predictions", ".", "keys", "(", ")", ")", ")", ")", "\n", "self", ".", "img_ids", ".", "extend", "(", "img_ids", ")", "\n", "\n", "for", "iou_type", "in", "self", ".", "iou_types", ":", "\n", "            ", "results", "=", "self", ".", "prepare", "(", "predictions", ",", "iou_type", ")", "\n", "\n", "# suppress pycocotools prints", "\n", "with", "open", "(", "os", ".", "devnull", ",", "'w'", ")", "as", "devnull", ":", "\n", "                ", "with", "contextlib", ".", "redirect_stdout", "(", "devnull", ")", ":", "\n", "                    ", "coco_dt", "=", "COCO", ".", "loadRes", "(", "self", ".", "coco_gt", ",", "results", ")", "if", "results", "else", "COCO", "(", ")", "\n", "", "", "coco_eval", "=", "self", ".", "coco_eval", "[", "iou_type", "]", "\n", "\n", "coco_eval", ".", "cocoDt", "=", "coco_dt", "\n", "coco_eval", ".", "params", ".", "imgIds", "=", "list", "(", "img_ids", ")", "\n", "img_ids", ",", "eval_imgs", "=", "evaluate", "(", "coco_eval", ")", "\n", "\n", "self", ".", "eval_imgs", "[", "iou_type", "]", ".", "append", "(", "eval_imgs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dddzg_up-detr.datasets.coco_eval.CocoEvaluator.synchronize_between_processes": [[61, 65], ["numpy.concatenate", "coco_eval.create_common_coco_eval"], "methods", ["home.repos.pwc.inspect_result.dddzg_up-detr.datasets.coco_eval.create_common_coco_eval"], ["", "", "def", "synchronize_between_processes", "(", "self", ")", ":", "\n", "        ", "for", "iou_type", "in", "self", ".", "iou_types", ":", "\n", "            ", "self", ".", "eval_imgs", "[", "iou_type", "]", "=", "np", ".", "concatenate", "(", "self", ".", "eval_imgs", "[", "iou_type", "]", ",", "2", ")", "\n", "create_common_coco_eval", "(", "self", ".", "coco_eval", "[", "iou_type", "]", ",", "self", ".", "img_ids", ",", "self", ".", "eval_imgs", "[", "iou_type", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dddzg_up-detr.datasets.coco_eval.CocoEvaluator.accumulate": [[66, 69], ["coco_eval.CocoEvaluator.coco_eval.values", "coco_eval.accumulate"], "methods", ["home.repos.pwc.inspect_result.dddzg_up-detr.datasets.coco_eval.CocoEvaluator.accumulate"], ["", "", "def", "accumulate", "(", "self", ")", ":", "\n", "        ", "for", "coco_eval", "in", "self", ".", "coco_eval", ".", "values", "(", ")", ":", "\n", "            ", "coco_eval", ".", "accumulate", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dddzg_up-detr.datasets.coco_eval.CocoEvaluator.summarize": [[70, 74], ["coco_eval.CocoEvaluator.coco_eval.items", "print", "coco_eval.summarize"], "methods", ["home.repos.pwc.inspect_result.dddzg_up-detr.datasets.panoptic_eval.PanopticEvaluator.summarize"], ["", "", "def", "summarize", "(", "self", ")", ":", "\n", "        ", "for", "iou_type", ",", "coco_eval", "in", "self", ".", "coco_eval", ".", "items", "(", ")", ":", "\n", "            ", "print", "(", "\"IoU metric: {}\"", ".", "format", "(", "iou_type", ")", ")", "\n", "coco_eval", ".", "summarize", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dddzg_up-detr.datasets.coco_eval.CocoEvaluator.prepare": [[75, 84], ["coco_eval.CocoEvaluator.prepare_for_coco_detection", "coco_eval.CocoEvaluator.prepare_for_coco_segmentation", "coco_eval.CocoEvaluator.prepare_for_coco_keypoint", "ValueError"], "methods", ["home.repos.pwc.inspect_result.dddzg_up-detr.datasets.coco_eval.CocoEvaluator.prepare_for_coco_detection", "home.repos.pwc.inspect_result.dddzg_up-detr.datasets.coco_eval.CocoEvaluator.prepare_for_coco_segmentation", "home.repos.pwc.inspect_result.dddzg_up-detr.datasets.coco_eval.CocoEvaluator.prepare_for_coco_keypoint"], ["", "", "def", "prepare", "(", "self", ",", "predictions", ",", "iou_type", ")", ":", "\n", "        ", "if", "iou_type", "==", "\"bbox\"", ":", "\n", "            ", "return", "self", ".", "prepare_for_coco_detection", "(", "predictions", ")", "\n", "", "elif", "iou_type", "==", "\"segm\"", ":", "\n", "            ", "return", "self", ".", "prepare_for_coco_segmentation", "(", "predictions", ")", "\n", "", "elif", "iou_type", "==", "\"keypoints\"", ":", "\n", "            ", "return", "self", ".", "prepare_for_coco_keypoint", "(", "predictions", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"Unknown iou type {}\"", ".", "format", "(", "iou_type", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dddzg_up-detr.datasets.coco_eval.CocoEvaluator.prepare_for_coco_detection": [[85, 108], ["predictions.items", "convert_to_xywh().tolist", "prediction[].tolist", "prediction[].tolist", "coco_results.extend", "len", "coco_eval.convert_to_xywh", "enumerate"], "methods", ["home.repos.pwc.inspect_result.dddzg_up-detr.datasets.coco_eval.convert_to_xywh"], ["", "", "def", "prepare_for_coco_detection", "(", "self", ",", "predictions", ")", ":", "\n", "        ", "coco_results", "=", "[", "]", "\n", "for", "original_id", ",", "prediction", "in", "predictions", ".", "items", "(", ")", ":", "\n", "            ", "if", "len", "(", "prediction", ")", "==", "0", ":", "\n", "                ", "continue", "\n", "\n", "", "boxes", "=", "prediction", "[", "\"boxes\"", "]", "\n", "boxes", "=", "convert_to_xywh", "(", "boxes", ")", ".", "tolist", "(", ")", "\n", "scores", "=", "prediction", "[", "\"scores\"", "]", ".", "tolist", "(", ")", "\n", "labels", "=", "prediction", "[", "\"labels\"", "]", ".", "tolist", "(", ")", "\n", "\n", "coco_results", ".", "extend", "(", "\n", "[", "\n", "{", "\n", "\"image_id\"", ":", "original_id", ",", "\n", "\"category_id\"", ":", "labels", "[", "k", "]", ",", "\n", "\"bbox\"", ":", "box", ",", "\n", "\"score\"", ":", "scores", "[", "k", "]", ",", "\n", "}", "\n", "for", "k", ",", "box", "in", "enumerate", "(", "boxes", ")", "\n", "]", "\n", ")", "\n", "", "return", "coco_results", "\n", "\n"]], "home.repos.pwc.inspect_result.dddzg_up-detr.datasets.coco_eval.CocoEvaluator.prepare_for_coco_segmentation": [[109, 143], ["predictions.items", "prediction[].tolist", "prediction[].tolist", "coco_results.extend", "len", "rle[].decode", "pycocotools.encode", "numpy.array", "enumerate"], "methods", ["None"], ["", "def", "prepare_for_coco_segmentation", "(", "self", ",", "predictions", ")", ":", "\n", "        ", "coco_results", "=", "[", "]", "\n", "for", "original_id", ",", "prediction", "in", "predictions", ".", "items", "(", ")", ":", "\n", "            ", "if", "len", "(", "prediction", ")", "==", "0", ":", "\n", "                ", "continue", "\n", "\n", "", "scores", "=", "prediction", "[", "\"scores\"", "]", "\n", "labels", "=", "prediction", "[", "\"labels\"", "]", "\n", "masks", "=", "prediction", "[", "\"masks\"", "]", "\n", "\n", "masks", "=", "masks", ">", "0.5", "\n", "\n", "scores", "=", "prediction", "[", "\"scores\"", "]", ".", "tolist", "(", ")", "\n", "labels", "=", "prediction", "[", "\"labels\"", "]", ".", "tolist", "(", ")", "\n", "\n", "rles", "=", "[", "\n", "mask_util", ".", "encode", "(", "np", ".", "array", "(", "mask", "[", "0", ",", ":", ",", ":", ",", "np", ".", "newaxis", "]", ",", "dtype", "=", "np", ".", "uint8", ",", "order", "=", "\"F\"", ")", ")", "[", "0", "]", "\n", "for", "mask", "in", "masks", "\n", "]", "\n", "for", "rle", "in", "rles", ":", "\n", "                ", "rle", "[", "\"counts\"", "]", "=", "rle", "[", "\"counts\"", "]", ".", "decode", "(", "\"utf-8\"", ")", "\n", "\n", "", "coco_results", ".", "extend", "(", "\n", "[", "\n", "{", "\n", "\"image_id\"", ":", "original_id", ",", "\n", "\"category_id\"", ":", "labels", "[", "k", "]", ",", "\n", "\"segmentation\"", ":", "rle", ",", "\n", "\"score\"", ":", "scores", "[", "k", "]", ",", "\n", "}", "\n", "for", "k", ",", "rle", "in", "enumerate", "(", "rles", ")", "\n", "]", "\n", ")", "\n", "", "return", "coco_results", "\n", "\n"]], "home.repos.pwc.inspect_result.dddzg_up-detr.datasets.coco_eval.CocoEvaluator.prepare_for_coco_keypoint": [[144, 169], ["predictions.items", "convert_to_xywh().tolist", "prediction[].tolist", "prediction[].tolist", "keypoints.flatten().tolist.flatten().tolist.flatten().tolist", "coco_results.extend", "len", "coco_eval.convert_to_xywh", "keypoints.flatten().tolist.flatten().tolist.flatten", "enumerate"], "methods", ["home.repos.pwc.inspect_result.dddzg_up-detr.datasets.coco_eval.convert_to_xywh"], ["", "def", "prepare_for_coco_keypoint", "(", "self", ",", "predictions", ")", ":", "\n", "        ", "coco_results", "=", "[", "]", "\n", "for", "original_id", ",", "prediction", "in", "predictions", ".", "items", "(", ")", ":", "\n", "            ", "if", "len", "(", "prediction", ")", "==", "0", ":", "\n", "                ", "continue", "\n", "\n", "", "boxes", "=", "prediction", "[", "\"boxes\"", "]", "\n", "boxes", "=", "convert_to_xywh", "(", "boxes", ")", ".", "tolist", "(", ")", "\n", "scores", "=", "prediction", "[", "\"scores\"", "]", ".", "tolist", "(", ")", "\n", "labels", "=", "prediction", "[", "\"labels\"", "]", ".", "tolist", "(", ")", "\n", "keypoints", "=", "prediction", "[", "\"keypoints\"", "]", "\n", "keypoints", "=", "keypoints", ".", "flatten", "(", "start_dim", "=", "1", ")", ".", "tolist", "(", ")", "\n", "\n", "coco_results", ".", "extend", "(", "\n", "[", "\n", "{", "\n", "\"image_id\"", ":", "original_id", ",", "\n", "\"category_id\"", ":", "labels", "[", "k", "]", ",", "\n", "'keypoints'", ":", "keypoint", ",", "\n", "\"score\"", ":", "scores", "[", "k", "]", ",", "\n", "}", "\n", "for", "k", ",", "keypoint", "in", "enumerate", "(", "keypoints", ")", "\n", "]", "\n", ")", "\n", "", "return", "coco_results", "\n", "\n"]], "home.repos.pwc.inspect_result.dddzg_up-detr.datasets.coco_eval.convert_to_xywh": [[171, 174], ["boxes.unbind", "torch.stack"], "function", ["None"], ["", "", "def", "convert_to_xywh", "(", "boxes", ")", ":", "\n", "    ", "xmin", ",", "ymin", ",", "xmax", ",", "ymax", "=", "boxes", ".", "unbind", "(", "1", ")", "\n", "return", "torch", ".", "stack", "(", "(", "xmin", ",", "ymin", ",", "xmax", "-", "xmin", ",", "ymax", "-", "ymin", ")", ",", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dddzg_up-detr.datasets.coco_eval.merge": [[176, 196], ["util.misc.all_gather", "util.misc.all_gather", "numpy.array", "numpy.concatenate", "numpy.unique", "np.array.extend", "np.concatenate.append"], "function", ["home.repos.pwc.inspect_result.dddzg_up-detr.util.misc.all_gather", "home.repos.pwc.inspect_result.dddzg_up-detr.util.misc.all_gather"], ["", "def", "merge", "(", "img_ids", ",", "eval_imgs", ")", ":", "\n", "    ", "all_img_ids", "=", "all_gather", "(", "img_ids", ")", "\n", "all_eval_imgs", "=", "all_gather", "(", "eval_imgs", ")", "\n", "\n", "merged_img_ids", "=", "[", "]", "\n", "for", "p", "in", "all_img_ids", ":", "\n", "        ", "merged_img_ids", ".", "extend", "(", "p", ")", "\n", "\n", "", "merged_eval_imgs", "=", "[", "]", "\n", "for", "p", "in", "all_eval_imgs", ":", "\n", "        ", "merged_eval_imgs", ".", "append", "(", "p", ")", "\n", "\n", "", "merged_img_ids", "=", "np", ".", "array", "(", "merged_img_ids", ")", "\n", "merged_eval_imgs", "=", "np", ".", "concatenate", "(", "merged_eval_imgs", ",", "2", ")", "\n", "\n", "# keep only unique (and in sorted order) images", "\n", "merged_img_ids", ",", "idx", "=", "np", ".", "unique", "(", "merged_img_ids", ",", "return_index", "=", "True", ")", "\n", "merged_eval_imgs", "=", "merged_eval_imgs", "[", "...", ",", "idx", "]", "\n", "\n", "return", "merged_img_ids", ",", "merged_eval_imgs", "\n", "\n"]], "home.repos.pwc.inspect_result.dddzg_up-detr.datasets.coco_eval.create_common_coco_eval": [[198, 206], ["coco_eval.merge", "list", "list", "copy.deepcopy", "list.flatten"], "function", ["home.repos.pwc.inspect_result.dddzg_up-detr.datasets.coco_eval.merge"], ["", "def", "create_common_coco_eval", "(", "coco_eval", ",", "img_ids", ",", "eval_imgs", ")", ":", "\n", "    ", "img_ids", ",", "eval_imgs", "=", "merge", "(", "img_ids", ",", "eval_imgs", ")", "\n", "img_ids", "=", "list", "(", "img_ids", ")", "\n", "eval_imgs", "=", "list", "(", "eval_imgs", ".", "flatten", "(", ")", ")", "\n", "\n", "coco_eval", ".", "evalImgs", "=", "eval_imgs", "\n", "coco_eval", ".", "params", ".", "imgIds", "=", "img_ids", "\n", "coco_eval", ".", "_paramsEval", "=", "copy", ".", "deepcopy", "(", "coco_eval", ".", "params", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dddzg_up-detr.datasets.coco_eval.evaluate": [[214, 260], ["list", "sorted", "coco_eval.._prepare", "numpy.asarray().reshape", "copy.deepcopy", "print", "numpy.unique", "list", "computeIoU", "evaluateImg", "len", "len", "len", "numpy.unique", "numpy.asarray"], "function", ["None"], ["", "def", "evaluate", "(", "self", ")", ":", "\n", "    ", "'''\n    Run per image evaluation on given images and store results (a list of dict) in self.evalImgs\n    :return: None\n    '''", "\n", "# tic = time.time()", "\n", "# print('Running per image evaluation...')", "\n", "p", "=", "self", ".", "params", "\n", "# add backward compatibility if useSegm is specified in params", "\n", "if", "p", ".", "useSegm", "is", "not", "None", ":", "\n", "        ", "p", ".", "iouType", "=", "'segm'", "if", "p", ".", "useSegm", "==", "1", "else", "'bbox'", "\n", "print", "(", "'useSegm (deprecated) is not None. Running {} evaluation'", ".", "format", "(", "p", ".", "iouType", ")", ")", "\n", "# print('Evaluate annotation type *{}*'.format(p.iouType))", "\n", "", "p", ".", "imgIds", "=", "list", "(", "np", ".", "unique", "(", "p", ".", "imgIds", ")", ")", "\n", "if", "p", ".", "useCats", ":", "\n", "        ", "p", ".", "catIds", "=", "list", "(", "np", ".", "unique", "(", "p", ".", "catIds", ")", ")", "\n", "", "p", ".", "maxDets", "=", "sorted", "(", "p", ".", "maxDets", ")", "\n", "self", ".", "params", "=", "p", "\n", "\n", "self", ".", "_prepare", "(", ")", "\n", "# loop through images, area range, max detection number", "\n", "catIds", "=", "p", ".", "catIds", "if", "p", ".", "useCats", "else", "[", "-", "1", "]", "\n", "\n", "if", "p", ".", "iouType", "==", "'segm'", "or", "p", ".", "iouType", "==", "'bbox'", ":", "\n", "        ", "computeIoU", "=", "self", ".", "computeIoU", "\n", "", "elif", "p", ".", "iouType", "==", "'keypoints'", ":", "\n", "        ", "computeIoU", "=", "self", ".", "computeOks", "\n", "", "self", ".", "ious", "=", "{", "\n", "(", "imgId", ",", "catId", ")", ":", "computeIoU", "(", "imgId", ",", "catId", ")", "\n", "for", "imgId", "in", "p", ".", "imgIds", "\n", "for", "catId", "in", "catIds", "}", "\n", "\n", "evaluateImg", "=", "self", ".", "evaluateImg", "\n", "maxDet", "=", "p", ".", "maxDets", "[", "-", "1", "]", "\n", "evalImgs", "=", "[", "\n", "evaluateImg", "(", "imgId", ",", "catId", ",", "areaRng", ",", "maxDet", ")", "\n", "for", "catId", "in", "catIds", "\n", "for", "areaRng", "in", "p", ".", "areaRng", "\n", "for", "imgId", "in", "p", ".", "imgIds", "\n", "]", "\n", "# this is NOT in the pycocotools code, but could be done outside", "\n", "evalImgs", "=", "np", ".", "asarray", "(", "evalImgs", ")", ".", "reshape", "(", "len", "(", "catIds", ")", ",", "len", "(", "p", ".", "areaRng", ")", ",", "len", "(", "p", ".", "imgIds", ")", ")", "\n", "self", ".", "_paramsEval", "=", "copy", ".", "deepcopy", "(", "self", ".", "params", ")", "\n", "# toc = time.time()", "\n", "# print('DONE (t={:0.2f}s).'.format(toc-tic))", "\n", "return", "p", ".", "imgIds", ",", "evalImgs", "\n", "\n"]], "home.repos.pwc.inspect_result.dddzg_up-detr.datasets.transforms.RandomCrop.__init__": [[155, 157], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "size", ")", ":", "\n", "        ", "self", ".", "size", "=", "size", "\n", "\n"]], "home.repos.pwc.inspect_result.dddzg_up-detr.datasets.transforms.RandomCrop.__call__": [[158, 161], ["torchvision.RandomCrop.get_params", "torchvision.RandomCrop.get_params", "transforms.crop"], "methods", ["home.repos.pwc.inspect_result.dddzg_up-detr.datasets.transforms.crop"], ["", "def", "__call__", "(", "self", ",", "img", ",", "target", ")", ":", "\n", "        ", "region", "=", "T", ".", "RandomCrop", ".", "get_params", "(", "img", ",", "self", ".", "size", ")", "\n", "return", "crop", "(", "img", ",", "target", ",", "region", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dddzg_up-detr.datasets.transforms.RandomSizeCrop.__init__": [[164, 167], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "min_size", ":", "int", ",", "max_size", ":", "int", ")", ":", "\n", "        ", "self", ".", "min_size", "=", "min_size", "\n", "self", ".", "max_size", "=", "max_size", "\n", "\n"]], "home.repos.pwc.inspect_result.dddzg_up-detr.datasets.transforms.RandomSizeCrop.__call__": [[168, 173], ["random.randint", "random.randint", "torchvision.RandomCrop.get_params", "torchvision.RandomCrop.get_params", "transforms.crop", "min", "min"], "methods", ["home.repos.pwc.inspect_result.dddzg_up-detr.datasets.transforms.crop"], ["", "def", "__call__", "(", "self", ",", "img", ":", "PIL", ".", "Image", ".", "Image", ",", "target", ":", "dict", ")", ":", "\n", "        ", "w", "=", "random", ".", "randint", "(", "self", ".", "min_size", ",", "min", "(", "img", ".", "width", ",", "self", ".", "max_size", ")", ")", "\n", "h", "=", "random", ".", "randint", "(", "self", ".", "min_size", ",", "min", "(", "img", ".", "height", ",", "self", ".", "max_size", ")", ")", "\n", "region", "=", "T", ".", "RandomCrop", ".", "get_params", "(", "img", ",", "[", "h", ",", "w", "]", ")", "\n", "return", "crop", "(", "img", ",", "target", ",", "region", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dddzg_up-detr.datasets.transforms.CenterCrop.__init__": [[176, 178], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "size", ")", ":", "\n", "        ", "self", ".", "size", "=", "size", "\n", "\n"]], "home.repos.pwc.inspect_result.dddzg_up-detr.datasets.transforms.CenterCrop.__call__": [[179, 185], ["int", "int", "transforms.crop", "round", "round"], "methods", ["home.repos.pwc.inspect_result.dddzg_up-detr.datasets.transforms.crop"], ["", "def", "__call__", "(", "self", ",", "img", ",", "target", ")", ":", "\n", "        ", "image_width", ",", "image_height", "=", "img", ".", "size", "\n", "crop_height", ",", "crop_width", "=", "self", ".", "size", "\n", "crop_top", "=", "int", "(", "round", "(", "(", "image_height", "-", "crop_height", ")", "/", "2.", ")", ")", "\n", "crop_left", "=", "int", "(", "round", "(", "(", "image_width", "-", "crop_width", ")", "/", "2.", ")", ")", "\n", "return", "crop", "(", "img", ",", "target", ",", "(", "crop_top", ",", "crop_left", ",", "crop_height", ",", "crop_width", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dddzg_up-detr.datasets.transforms.RandomHorizontalFlip.__init__": [[188, 190], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "p", "=", "0.5", ")", ":", "\n", "        ", "self", ".", "p", "=", "p", "\n", "\n"]], "home.repos.pwc.inspect_result.dddzg_up-detr.datasets.transforms.RandomHorizontalFlip.__call__": [[191, 195], ["random.random", "transforms.hflip"], "methods", ["home.repos.pwc.inspect_result.dddzg_up-detr.datasets.transforms.hflip"], ["", "def", "__call__", "(", "self", ",", "img", ",", "target", ")", ":", "\n", "        ", "if", "random", ".", "random", "(", ")", "<", "self", ".", "p", ":", "\n", "            ", "return", "hflip", "(", "img", ",", "target", ")", "\n", "", "return", "img", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.dddzg_up-detr.datasets.transforms.RandomResize.__init__": [[198, 202], ["isinstance"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "sizes", ",", "max_size", "=", "None", ")", ":", "\n", "        ", "assert", "isinstance", "(", "sizes", ",", "(", "list", ",", "tuple", ")", ")", "\n", "self", ".", "sizes", "=", "sizes", "\n", "self", ".", "max_size", "=", "max_size", "\n", "\n"]], "home.repos.pwc.inspect_result.dddzg_up-detr.datasets.transforms.RandomResize.__call__": [[203, 206], ["random.choice", "transforms.resize"], "methods", ["home.repos.pwc.inspect_result.dddzg_up-detr.datasets.transforms.resize"], ["", "def", "__call__", "(", "self", ",", "img", ",", "target", "=", "None", ")", ":", "\n", "        ", "size", "=", "random", ".", "choice", "(", "self", ".", "sizes", ")", "\n", "return", "resize", "(", "img", ",", "target", ",", "size", ",", "self", ".", "max_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dddzg_up-detr.datasets.transforms.RandomPad.__init__": [[209, 211], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "max_pad", ")", ":", "\n", "        ", "self", ".", "max_pad", "=", "max_pad", "\n", "\n"]], "home.repos.pwc.inspect_result.dddzg_up-detr.datasets.transforms.RandomPad.__call__": [[212, 216], ["random.randint", "random.randint", "transforms.pad"], "methods", ["home.repos.pwc.inspect_result.dddzg_up-detr.datasets.transforms.pad"], ["", "def", "__call__", "(", "self", ",", "img", ",", "target", ")", ":", "\n", "        ", "pad_x", "=", "random", ".", "randint", "(", "0", ",", "self", ".", "max_pad", ")", "\n", "pad_y", "=", "random", ".", "randint", "(", "0", ",", "self", ".", "max_pad", ")", "\n", "return", "pad", "(", "img", ",", "target", ",", "(", "pad_x", ",", "pad_y", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dddzg_up-detr.datasets.transforms.RandomSelect.__init__": [[223, 227], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "transforms1", ",", "transforms2", ",", "p", "=", "0.5", ")", ":", "\n", "        ", "self", ".", "transforms1", "=", "transforms1", "\n", "self", ".", "transforms2", "=", "transforms2", "\n", "self", ".", "p", "=", "p", "\n", "\n"]], "home.repos.pwc.inspect_result.dddzg_up-detr.datasets.transforms.RandomSelect.__call__": [[228, 232], ["transforms.RandomSelect.transforms2", "random.random", "transforms.RandomSelect.transforms1"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ",", "target", ")", ":", "\n", "        ", "if", "random", ".", "random", "(", ")", "<", "self", ".", "p", ":", "\n", "            ", "return", "self", ".", "transforms1", "(", "img", ",", "target", ")", "\n", "", "return", "self", ".", "transforms2", "(", "img", ",", "target", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dddzg_up-detr.datasets.transforms.ToTensor.__call__": [[235, 237], ["torchvision.to_tensor", "torchvision.to_tensor"], "methods", ["None"], ["    ", "def", "__call__", "(", "self", ",", "img", ",", "target", ")", ":", "\n", "        ", "return", "F", ".", "to_tensor", "(", "img", ")", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.dddzg_up-detr.datasets.transforms.RandomErasing.__init__": [[241, 243], ["torchvision.RandomErasing", "torchvision.RandomErasing"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "eraser", "=", "T", ".", "RandomErasing", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dddzg_up-detr.datasets.transforms.RandomErasing.__call__": [[244, 246], ["transforms.RandomErasing.eraser"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ",", "target", ")", ":", "\n", "        ", "return", "self", ".", "eraser", "(", "img", ")", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.dddzg_up-detr.datasets.transforms.Normalize.__init__": [[249, 252], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "mean", ",", "std", ")", ":", "\n", "        ", "self", ".", "mean", "=", "mean", "\n", "self", ".", "std", "=", "std", "\n", "\n"]], "home.repos.pwc.inspect_result.dddzg_up-detr.datasets.transforms.Normalize.__call__": [[253, 265], ["torchvision.normalize", "torchvision.normalize", "target.copy.copy.copy", "util.box_ops.box_xyxy_to_cxcywh", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.dddzg_up-detr.util.box_ops.box_xyxy_to_cxcywh"], ["", "def", "__call__", "(", "self", ",", "image", ",", "target", "=", "None", ")", ":", "\n", "        ", "image", "=", "F", ".", "normalize", "(", "image", ",", "mean", "=", "self", ".", "mean", ",", "std", "=", "self", ".", "std", ")", "\n", "if", "target", "is", "None", ":", "\n", "            ", "return", "image", ",", "None", "\n", "", "target", "=", "target", ".", "copy", "(", ")", "\n", "h", ",", "w", "=", "image", ".", "shape", "[", "-", "2", ":", "]", "\n", "if", "\"boxes\"", "in", "target", ":", "\n", "            ", "boxes", "=", "target", "[", "\"boxes\"", "]", "\n", "boxes", "=", "box_xyxy_to_cxcywh", "(", "boxes", ")", "\n", "boxes", "=", "boxes", "/", "torch", ".", "tensor", "(", "[", "w", ",", "h", ",", "w", ",", "h", "]", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "target", "[", "\"boxes\"", "]", "=", "boxes", "\n", "", "return", "image", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.dddzg_up-detr.datasets.transforms.Compose.__init__": [[268, 270], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "transforms", ")", ":", "\n", "        ", "self", ".", "transforms", "=", "transforms", "\n", "\n"]], "home.repos.pwc.inspect_result.dddzg_up-detr.datasets.transforms.Compose.__call__": [[271, 275], ["t"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "image", ",", "target", ")", ":", "\n", "        ", "for", "t", "in", "self", ".", "transforms", ":", "\n", "            ", "image", ",", "target", "=", "t", "(", "image", ",", "target", ")", "\n", "", "return", "image", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.dddzg_up-detr.datasets.transforms.Compose.__repr__": [[276, 283], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "format_string", "=", "self", ".", "__class__", ".", "__name__", "+", "\"(\"", "\n", "for", "t", "in", "self", ".", "transforms", ":", "\n", "            ", "format_string", "+=", "\"\\n\"", "\n", "format_string", "+=", "\"    {0}\"", ".", "format", "(", "t", ")", "\n", "", "format_string", "+=", "\"\\n)\"", "\n", "return", "format_string", "\n", "", "", ""]], "home.repos.pwc.inspect_result.dddzg_up-detr.datasets.transforms.crop": [[22, 63], ["torchvision.crop", "target.copy.copy", "torch.tensor", "torch.as_tensor", "torch.min", "target[].reshape.clamp", "target[].reshape.reshape", "fields.append", "fields.append", "torch.as_tensor", "target[].reshape.reshape", "target[].reshape", "torch.all", "target[].flatten().any", "target[].flatten"], "function", ["home.repos.pwc.inspect_result.dddzg_up-detr.datasets.transforms.crop"], ["def", "crop", "(", "image", ",", "target", ",", "region", ")", ":", "\n", "    ", "cropped_image", "=", "F", ".", "crop", "(", "image", ",", "*", "region", ")", "\n", "\n", "target", "=", "target", ".", "copy", "(", ")", "\n", "i", ",", "j", ",", "h", ",", "w", "=", "region", "\n", "\n", "# should we do something wrt the original size?", "\n", "target", "[", "\"size\"", "]", "=", "torch", ".", "tensor", "(", "[", "h", ",", "w", "]", ")", "\n", "\n", "fields", "=", "[", "\"labels\"", ",", "\"area\"", ",", "\"iscrowd\"", "]", "\n", "\n", "if", "\"boxes\"", "in", "target", ":", "\n", "        ", "boxes", "=", "target", "[", "\"boxes\"", "]", "\n", "max_size", "=", "torch", ".", "as_tensor", "(", "[", "w", ",", "h", "]", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "cropped_boxes", "=", "boxes", "-", "torch", ".", "as_tensor", "(", "[", "j", ",", "i", ",", "j", ",", "i", "]", ")", "\n", "cropped_boxes", "=", "torch", ".", "min", "(", "cropped_boxes", ".", "reshape", "(", "-", "1", ",", "2", ",", "2", ")", ",", "max_size", ")", "\n", "cropped_boxes", "=", "cropped_boxes", ".", "clamp", "(", "min", "=", "0", ")", "\n", "area", "=", "(", "cropped_boxes", "[", ":", ",", "1", ",", ":", "]", "-", "cropped_boxes", "[", ":", ",", "0", ",", ":", "]", ")", ".", "prod", "(", "dim", "=", "1", ")", "\n", "target", "[", "\"boxes\"", "]", "=", "cropped_boxes", ".", "reshape", "(", "-", "1", ",", "4", ")", "\n", "target", "[", "\"area\"", "]", "=", "area", "\n", "fields", ".", "append", "(", "\"boxes\"", ")", "\n", "\n", "", "if", "\"masks\"", "in", "target", ":", "\n", "# FIXME should we update the area here if there are no boxes?", "\n", "        ", "target", "[", "'masks'", "]", "=", "target", "[", "'masks'", "]", "[", ":", ",", "i", ":", "i", "+", "h", ",", "j", ":", "j", "+", "w", "]", "\n", "fields", ".", "append", "(", "\"masks\"", ")", "\n", "\n", "# remove elements for which the boxes or masks that have zero area", "\n", "", "if", "\"boxes\"", "in", "target", "or", "\"masks\"", "in", "target", ":", "\n", "# favor boxes selection when defining which elements to keep", "\n", "# this is compatible with previous implementation", "\n", "        ", "if", "\"boxes\"", "in", "target", ":", "\n", "            ", "cropped_boxes", "=", "target", "[", "'boxes'", "]", ".", "reshape", "(", "-", "1", ",", "2", ",", "2", ")", "\n", "keep", "=", "torch", ".", "all", "(", "cropped_boxes", "[", ":", ",", "1", ",", ":", "]", ">", "cropped_boxes", "[", ":", ",", "0", ",", ":", "]", ",", "dim", "=", "1", ")", "\n", "", "else", ":", "\n", "            ", "keep", "=", "target", "[", "'masks'", "]", ".", "flatten", "(", "1", ")", ".", "any", "(", "1", ")", "\n", "\n", "", "for", "field", "in", "fields", ":", "\n", "            ", "target", "[", "field", "]", "=", "target", "[", "field", "]", "[", "keep", "]", "\n", "\n", "", "", "return", "cropped_image", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.dddzg_up-detr.datasets.transforms.hflip": [[65, 80], ["torchvision.hflip", "target.copy.copy", "target[].flip", "torch.as_tensor", "torch.as_tensor"], "function", ["home.repos.pwc.inspect_result.dddzg_up-detr.datasets.transforms.hflip"], ["", "def", "hflip", "(", "image", ",", "target", ")", ":", "\n", "    ", "flipped_image", "=", "F", ".", "hflip", "(", "image", ")", "\n", "\n", "w", ",", "h", "=", "image", ".", "size", "\n", "\n", "target", "=", "target", ".", "copy", "(", ")", "\n", "if", "\"boxes\"", "in", "target", ":", "\n", "        ", "boxes", "=", "target", "[", "\"boxes\"", "]", "\n", "boxes", "=", "boxes", "[", ":", ",", "[", "2", ",", "1", ",", "0", ",", "3", "]", "]", "*", "torch", ".", "as_tensor", "(", "[", "-", "1", ",", "1", ",", "-", "1", ",", "1", "]", ")", "+", "torch", ".", "as_tensor", "(", "[", "w", ",", "0", ",", "w", ",", "0", "]", ")", "\n", "target", "[", "\"boxes\"", "]", "=", "boxes", "\n", "\n", "", "if", "\"masks\"", "in", "target", ":", "\n", "        ", "target", "[", "'masks'", "]", "=", "target", "[", "'masks'", "]", ".", "flip", "(", "-", "1", ")", "\n", "\n", "", "return", "flipped_image", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.dddzg_up-detr.datasets.transforms.resize": [[82, 139], ["transforms.resize.get_size"], "function", ["None"], ["", "def", "resize", "(", "image", ",", "target", ",", "size", ",", "max_size", "=", "None", ")", ":", "\n", "# size can be min_size (scalar) or (w, h) tuple", "\n", "\n", "    ", "def", "get_size_with_aspect_ratio", "(", "image_size", ",", "size", ",", "max_size", "=", "None", ")", ":", "\n", "        ", "w", ",", "h", "=", "image_size", "\n", "if", "max_size", "is", "not", "None", ":", "\n", "            ", "min_original_size", "=", "float", "(", "min", "(", "(", "w", ",", "h", ")", ")", ")", "\n", "max_original_size", "=", "float", "(", "max", "(", "(", "w", ",", "h", ")", ")", ")", "\n", "if", "max_original_size", "/", "min_original_size", "*", "size", ">", "max_size", ":", "\n", "                ", "size", "=", "int", "(", "round", "(", "max_size", "*", "min_original_size", "/", "max_original_size", ")", ")", "\n", "\n", "", "", "if", "(", "w", "<=", "h", "and", "w", "==", "size", ")", "or", "(", "h", "<=", "w", "and", "h", "==", "size", ")", ":", "\n", "            ", "return", "(", "h", ",", "w", ")", "\n", "\n", "", "if", "w", "<", "h", ":", "\n", "            ", "ow", "=", "size", "\n", "oh", "=", "int", "(", "size", "*", "h", "/", "w", ")", "\n", "", "else", ":", "\n", "            ", "oh", "=", "size", "\n", "ow", "=", "int", "(", "size", "*", "w", "/", "h", ")", "\n", "\n", "", "return", "(", "oh", ",", "ow", ")", "\n", "\n", "", "def", "get_size", "(", "image_size", ",", "size", ",", "max_size", "=", "None", ")", ":", "\n", "        ", "if", "isinstance", "(", "size", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "            ", "return", "size", "[", ":", ":", "-", "1", "]", "\n", "", "else", ":", "\n", "            ", "return", "get_size_with_aspect_ratio", "(", "image_size", ",", "size", ",", "max_size", ")", "\n", "\n", "", "", "size", "=", "get_size", "(", "image", ".", "size", ",", "size", ",", "max_size", ")", "\n", "rescaled_image", "=", "F", ".", "resize", "(", "image", ",", "size", ")", "\n", "\n", "if", "target", "is", "None", ":", "\n", "        ", "return", "rescaled_image", ",", "None", "\n", "\n", "", "ratios", "=", "tuple", "(", "float", "(", "s", ")", "/", "float", "(", "s_orig", ")", "for", "s", ",", "s_orig", "in", "zip", "(", "rescaled_image", ".", "size", ",", "image", ".", "size", ")", ")", "\n", "ratio_width", ",", "ratio_height", "=", "ratios", "\n", "\n", "target", "=", "target", ".", "copy", "(", ")", "\n", "if", "\"boxes\"", "in", "target", ":", "\n", "        ", "boxes", "=", "target", "[", "\"boxes\"", "]", "\n", "scaled_boxes", "=", "boxes", "*", "torch", ".", "as_tensor", "(", "[", "ratio_width", ",", "ratio_height", ",", "ratio_width", ",", "ratio_height", "]", ")", "\n", "target", "[", "\"boxes\"", "]", "=", "scaled_boxes", "\n", "\n", "", "if", "\"area\"", "in", "target", ":", "\n", "        ", "area", "=", "target", "[", "\"area\"", "]", "\n", "scaled_area", "=", "area", "*", "(", "ratio_width", "*", "ratio_height", ")", "\n", "target", "[", "\"area\"", "]", "=", "scaled_area", "\n", "\n", "", "h", ",", "w", "=", "size", "\n", "target", "[", "\"size\"", "]", "=", "torch", ".", "tensor", "(", "[", "h", ",", "w", "]", ")", "\n", "\n", "if", "\"masks\"", "in", "target", ":", "\n", "        ", "target", "[", "'masks'", "]", "=", "interpolate", "(", "\n", "target", "[", "'masks'", "]", "[", ":", ",", "None", "]", ".", "float", "(", ")", ",", "size", ",", "mode", "=", "\"nearest\"", ")", "[", ":", ",", "0", "]", ">", "0.5", "\n", "\n", "", "return", "rescaled_image", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.dddzg_up-detr.datasets.transforms.pad": [[141, 152], ["torchvision.pad", "target.copy.copy", "torch.tensor", "torch.nn.functional.pad"], "function", ["home.repos.pwc.inspect_result.dddzg_up-detr.datasets.transforms.pad", "home.repos.pwc.inspect_result.dddzg_up-detr.datasets.transforms.pad"], ["", "def", "pad", "(", "image", ",", "target", ",", "padding", ")", ":", "\n", "# assumes that we only pad on the bottom right corners", "\n", "    ", "padded_image", "=", "F", ".", "pad", "(", "image", ",", "(", "0", ",", "0", ",", "padding", "[", "0", "]", ",", "padding", "[", "1", "]", ")", ")", "\n", "if", "target", "is", "None", ":", "\n", "        ", "return", "padded_image", ",", "None", "\n", "", "target", "=", "target", ".", "copy", "(", ")", "\n", "# should we do something wrt the original size?", "\n", "target", "[", "\"size\"", "]", "=", "torch", ".", "tensor", "(", "padded_image", ".", "size", "[", ":", ":", "-", "1", "]", ")", "\n", "if", "\"masks\"", "in", "target", ":", "\n", "        ", "target", "[", "'masks'", "]", "=", "torch", ".", "nn", ".", "functional", ".", "pad", "(", "target", "[", "'masks'", "]", ",", "(", "0", ",", "padding", "[", "0", "]", ",", "0", ",", "padding", "[", "1", "]", ")", ")", "\n", "", "return", "padded_image", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.dddzg_up-detr.datasets.coco.CocoDetection.__init__": [[24, 28], ["super().__init__", "coco.ConvertCocoPolysToMask"], "methods", ["home.repos.pwc.inspect_result.dddzg_up-detr.models.backbone.Joiner.__init__"], ["    ", "def", "__init__", "(", "self", ",", "img_folder", ",", "ann_file", ",", "transforms", ",", "return_masks", ")", ":", "\n", "        ", "super", "(", "CocoDetection", ",", "self", ")", ".", "__init__", "(", "img_folder", ",", "ann_file", ")", "\n", "self", ".", "_transforms", "=", "transforms", "\n", "self", ".", "prepare", "=", "ConvertCocoPolysToMask", "(", "return_masks", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dddzg_up-detr.datasets.coco.CocoDetection.__getitem__": [[29, 37], ["super().__getitem__", "coco.CocoDetection.prepare", "coco.CocoDetection._transforms"], "methods", ["home.repos.pwc.inspect_result.dddzg_up-detr.datasets.selfdet.SelfDet.__getitem__", "home.repos.pwc.inspect_result.dddzg_up-detr.datasets.coco_eval.CocoEvaluator.prepare"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "img", ",", "target", "=", "super", "(", "CocoDetection", ",", "self", ")", ".", "__getitem__", "(", "idx", ")", "\n", "image_id", "=", "self", ".", "ids", "[", "idx", "]", "\n", "target", "=", "{", "'image_id'", ":", "image_id", ",", "'annotations'", ":", "target", "}", "\n", "img", ",", "target", "=", "self", ".", "prepare", "(", "img", ",", "target", ")", "\n", "if", "self", ".", "_transforms", "is", "not", "None", ":", "\n", "            ", "img", ",", "target", "=", "self", ".", "_transforms", "(", "img", ",", "target", ")", "\n", "", "return", "img", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.dddzg_up-detr.datasets.coco.ConvertCocoPolysToMask.__init__": [[57, 59], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "return_masks", "=", "False", ")", ":", "\n", "        ", "self", ".", "return_masks", "=", "return_masks", "\n", "\n"]], "home.repos.pwc.inspect_result.dddzg_up-detr.datasets.coco.ConvertCocoPolysToMask.__call__": [[60, 119], ["torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.as_tensor().reshape", "torch.as_tensor().reshape", "torch.as_tensor().reshape", "torch.as_tensor().reshape", "boxes[].clamp_", "boxes[].clamp_", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "coco.convert_coco_poly_to_mask", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "keypoints.view.view.view", "int", "int", "int", "int"], "methods", ["home.repos.pwc.inspect_result.dddzg_up-detr.datasets.coco.convert_coco_poly_to_mask"], ["", "def", "__call__", "(", "self", ",", "image", ",", "target", ")", ":", "\n", "        ", "w", ",", "h", "=", "image", ".", "size", "\n", "\n", "image_id", "=", "target", "[", "\"image_id\"", "]", "\n", "image_id", "=", "torch", ".", "tensor", "(", "[", "image_id", "]", ")", "\n", "\n", "anno", "=", "target", "[", "\"annotations\"", "]", "\n", "\n", "anno", "=", "[", "obj", "for", "obj", "in", "anno", "if", "'iscrowd'", "not", "in", "obj", "or", "obj", "[", "'iscrowd'", "]", "==", "0", "]", "\n", "\n", "boxes", "=", "[", "obj", "[", "\"bbox\"", "]", "for", "obj", "in", "anno", "]", "\n", "# guard against no boxes via resizing", "\n", "boxes", "=", "torch", ".", "as_tensor", "(", "boxes", ",", "dtype", "=", "torch", ".", "float32", ")", ".", "reshape", "(", "-", "1", ",", "4", ")", "\n", "boxes", "[", ":", ",", "2", ":", "]", "+=", "boxes", "[", ":", ",", ":", "2", "]", "\n", "boxes", "[", ":", ",", "0", ":", ":", "2", "]", ".", "clamp_", "(", "min", "=", "0", ",", "max", "=", "w", ")", "\n", "boxes", "[", ":", ",", "1", ":", ":", "2", "]", ".", "clamp_", "(", "min", "=", "0", ",", "max", "=", "h", ")", "\n", "\n", "classes", "=", "[", "obj", "[", "\"category_id\"", "]", "for", "obj", "in", "anno", "]", "\n", "classes", "=", "torch", ".", "tensor", "(", "classes", ",", "dtype", "=", "torch", ".", "int64", ")", "\n", "\n", "if", "self", ".", "return_masks", ":", "\n", "            ", "segmentations", "=", "[", "obj", "[", "\"segmentation\"", "]", "for", "obj", "in", "anno", "]", "\n", "masks", "=", "convert_coco_poly_to_mask", "(", "segmentations", ",", "h", ",", "w", ")", "\n", "\n", "", "keypoints", "=", "None", "\n", "if", "anno", "and", "\"keypoints\"", "in", "anno", "[", "0", "]", ":", "\n", "            ", "keypoints", "=", "[", "obj", "[", "\"keypoints\"", "]", "for", "obj", "in", "anno", "]", "\n", "keypoints", "=", "torch", ".", "as_tensor", "(", "keypoints", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "num_keypoints", "=", "keypoints", ".", "shape", "[", "0", "]", "\n", "if", "num_keypoints", ":", "\n", "                ", "keypoints", "=", "keypoints", ".", "view", "(", "num_keypoints", ",", "-", "1", ",", "3", ")", "\n", "\n", "", "", "keep", "=", "(", "boxes", "[", ":", ",", "3", "]", ">", "boxes", "[", ":", ",", "1", "]", ")", "&", "(", "boxes", "[", ":", ",", "2", "]", ">", "boxes", "[", ":", ",", "0", "]", ")", "\n", "boxes", "=", "boxes", "[", "keep", "]", "\n", "classes", "=", "classes", "[", "keep", "]", "\n", "if", "self", ".", "return_masks", ":", "\n", "            ", "masks", "=", "masks", "[", "keep", "]", "\n", "", "if", "keypoints", "is", "not", "None", ":", "\n", "            ", "keypoints", "=", "keypoints", "[", "keep", "]", "\n", "\n", "", "target", "=", "{", "}", "\n", "target", "[", "\"boxes\"", "]", "=", "boxes", "\n", "target", "[", "\"labels\"", "]", "=", "classes", "\n", "if", "self", ".", "return_masks", ":", "\n", "            ", "target", "[", "\"masks\"", "]", "=", "masks", "\n", "", "target", "[", "\"image_id\"", "]", "=", "image_id", "\n", "if", "keypoints", "is", "not", "None", ":", "\n", "            ", "target", "[", "\"keypoints\"", "]", "=", "keypoints", "\n", "\n", "# for conversion to coco api", "\n", "", "area", "=", "torch", ".", "tensor", "(", "[", "obj", "[", "\"area\"", "]", "for", "obj", "in", "anno", "]", ")", "\n", "iscrowd", "=", "torch", ".", "tensor", "(", "[", "obj", "[", "\"iscrowd\"", "]", "if", "\"iscrowd\"", "in", "obj", "else", "0", "for", "obj", "in", "anno", "]", ")", "\n", "target", "[", "\"area\"", "]", "=", "area", "[", "keep", "]", "\n", "target", "[", "\"iscrowd\"", "]", "=", "iscrowd", "[", "keep", "]", "\n", "\n", "target", "[", "\"orig_size\"", "]", "=", "torch", ".", "as_tensor", "(", "[", "int", "(", "h", ")", ",", "int", "(", "w", ")", "]", ")", "\n", "target", "[", "\"size\"", "]", "=", "torch", ".", "as_tensor", "(", "[", "int", "(", "h", ")", ",", "int", "(", "w", ")", "]", ")", "\n", "\n", "return", "image", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.dddzg_up-detr.datasets.coco.convert_coco_poly_to_mask": [[39, 54], ["pycocotools.mask.frPyObjects", "pycocotools.mask.decode", "torch.as_tensor", "torch.as_tensor", "mask.any.any", "torch.zeros.append", "torch.stack", "torch.stack", "torch.zeros", "torch.zeros", "len"], "function", ["None"], ["", "", "def", "convert_coco_poly_to_mask", "(", "segmentations", ",", "height", ",", "width", ")", ":", "\n", "    ", "masks", "=", "[", "]", "\n", "for", "polygons", "in", "segmentations", ":", "\n", "        ", "rles", "=", "coco_mask", ".", "frPyObjects", "(", "polygons", ",", "height", ",", "width", ")", "\n", "mask", "=", "coco_mask", ".", "decode", "(", "rles", ")", "\n", "if", "len", "(", "mask", ".", "shape", ")", "<", "3", ":", "\n", "            ", "mask", "=", "mask", "[", "...", ",", "None", "]", "\n", "", "mask", "=", "torch", ".", "as_tensor", "(", "mask", ",", "dtype", "=", "torch", ".", "uint8", ")", "\n", "mask", "=", "mask", ".", "any", "(", "dim", "=", "2", ")", "\n", "masks", ".", "append", "(", "mask", ")", "\n", "", "if", "masks", ":", "\n", "        ", "masks", "=", "torch", ".", "stack", "(", "masks", ",", "dim", "=", "0", ")", "\n", "", "else", ":", "\n", "        ", "masks", "=", "torch", ".", "zeros", "(", "(", "0", ",", "height", ",", "width", ")", ",", "dtype", "=", "torch", ".", "uint8", ")", "\n", "", "return", "masks", "\n", "\n"]], "home.repos.pwc.inspect_result.dddzg_up-detr.datasets.coco.make_coco_transforms": [[121, 151], ["datasets.Compose", "ValueError", "datasets.Compose", "datasets.Compose", "datasets.ToTensor", "datasets.Normalize", "datasets.RandomHorizontalFlip", "datasets.RandomSelect", "datasets.RandomResize", "datasets.RandomResize", "datasets.Compose", "datasets.RandomResize", "datasets.RandomSizeCrop", "datasets.RandomResize"], "function", ["None"], ["", "", "def", "make_coco_transforms", "(", "image_set", ")", ":", "\n", "\n", "    ", "normalize", "=", "T", ".", "Compose", "(", "[", "\n", "T", ".", "ToTensor", "(", ")", ",", "\n", "T", ".", "Normalize", "(", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", "\n", "]", ")", "\n", "\n", "scales", "=", "[", "480", ",", "512", ",", "544", ",", "576", ",", "608", ",", "640", ",", "672", ",", "704", ",", "736", ",", "768", ",", "800", "]", "\n", "\n", "if", "image_set", "==", "'train'", ":", "\n", "        ", "return", "T", ".", "Compose", "(", "[", "\n", "T", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "T", ".", "RandomSelect", "(", "\n", "T", ".", "RandomResize", "(", "scales", ",", "max_size", "=", "1333", ")", ",", "\n", "T", ".", "Compose", "(", "[", "\n", "T", ".", "RandomResize", "(", "[", "400", ",", "500", ",", "600", "]", ")", ",", "\n", "T", ".", "RandomSizeCrop", "(", "384", ",", "600", ")", ",", "\n", "T", ".", "RandomResize", "(", "scales", ",", "max_size", "=", "1333", ")", ",", "\n", "]", ")", "\n", ")", ",", "\n", "normalize", ",", "\n", "]", ")", "\n", "\n", "", "if", "image_set", "==", "'val'", ":", "\n", "        ", "return", "T", ".", "Compose", "(", "[", "\n", "T", ".", "RandomResize", "(", "[", "800", "]", ",", "max_size", "=", "1333", ")", ",", "\n", "normalize", ",", "\n", "]", ")", "\n", "\n", "", "raise", "ValueError", "(", "f'unknown {image_set}'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dddzg_up-detr.datasets.coco.build": [[153, 165], ["pathlib.Path", "pathlib.Path.exists", "coco.CocoDetection", "coco.make_coco_transforms"], "function", ["home.repos.pwc.inspect_result.dddzg_up-detr.datasets.coco.make_coco_transforms"], ["", "def", "build", "(", "image_set", ",", "args", ")", ":", "\n", "    ", "root", "=", "Path", "(", "args", ".", "coco_path", ")", "\n", "assert", "root", ".", "exists", "(", ")", ",", "f'provided COCO path {root} does not exist'", "\n", "mode", "=", "'instances'", "\n", "PATHS", "=", "{", "\n", "\"train\"", ":", "(", "root", "/", "\"train2017\"", ",", "root", "/", "\"annotations\"", "/", "f'{mode}_train2017.json'", ")", ",", "\n", "\"val\"", ":", "(", "root", "/", "\"val2017\"", ",", "root", "/", "\"annotations\"", "/", "f'{mode}_val2017.json'", ")", ",", "\n", "}", "\n", "\n", "img_folder", ",", "ann_file", "=", "PATHS", "[", "image_set", "]", "\n", "dataset", "=", "CocoDetection", "(", "img_folder", ",", "ann_file", ",", "transforms", "=", "make_coco_transforms", "(", "image_set", ")", ",", "return_masks", "=", "args", ".", "masks", ")", "\n", "return", "dataset", "\n", "", ""]], "home.repos.pwc.inspect_result.dddzg_up-detr.datasets.panoptic_eval.PanopticEvaluator.__init__": [[20, 28], ["util.is_main_process", "os.path.exists", "os.mkdir"], "methods", ["home.repos.pwc.inspect_result.dddzg_up-detr.util.misc.is_main_process"], ["    ", "def", "__init__", "(", "self", ",", "ann_file", ",", "ann_folder", ",", "output_dir", "=", "\"panoptic_eval\"", ")", ":", "\n", "        ", "self", ".", "gt_json", "=", "ann_file", "\n", "self", ".", "gt_folder", "=", "ann_folder", "\n", "if", "utils", ".", "is_main_process", "(", ")", ":", "\n", "            ", "if", "not", "os", ".", "path", ".", "exists", "(", "output_dir", ")", ":", "\n", "                ", "os", ".", "mkdir", "(", "output_dir", ")", "\n", "", "", "self", ".", "output_dir", "=", "output_dir", "\n", "self", ".", "predictions", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.dddzg_up-detr.datasets.panoptic_eval.PanopticEvaluator.update": [[29, 35], ["open", "f.write", "os.path.join", "p.pop"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "predictions", ")", ":", "\n", "        ", "for", "p", "in", "predictions", ":", "\n", "            ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "output_dir", ",", "p", "[", "\"file_name\"", "]", ")", ",", "\"wb\"", ")", "as", "f", ":", "\n", "                ", "f", ".", "write", "(", "p", ".", "pop", "(", "\"png_string\"", ")", ")", "\n", "\n", "", "", "self", ".", "predictions", "+=", "predictions", "\n", "\n"]], "home.repos.pwc.inspect_result.dddzg_up-detr.datasets.panoptic_eval.PanopticEvaluator.synchronize_between_processes": [[36, 42], ["util.all_gather"], "methods", ["home.repos.pwc.inspect_result.dddzg_up-detr.util.misc.all_gather"], ["", "def", "synchronize_between_processes", "(", "self", ")", ":", "\n", "        ", "all_predictions", "=", "utils", ".", "all_gather", "(", "self", ".", "predictions", ")", "\n", "merged_predictions", "=", "[", "]", "\n", "for", "p", "in", "all_predictions", ":", "\n", "            ", "merged_predictions", "+=", "p", "\n", "", "self", ".", "predictions", "=", "merged_predictions", "\n", "\n"]], "home.repos.pwc.inspect_result.dddzg_up-detr.datasets.panoptic_eval.PanopticEvaluator.summarize": [[43, 51], ["util.is_main_process", "os.path.join", "pq_compute", "open", "f.write", "json.dumps"], "methods", ["home.repos.pwc.inspect_result.dddzg_up-detr.util.misc.is_main_process"], ["", "def", "summarize", "(", "self", ")", ":", "\n", "        ", "if", "utils", ".", "is_main_process", "(", ")", ":", "\n", "            ", "json_data", "=", "{", "\"annotations\"", ":", "self", ".", "predictions", "}", "\n", "predictions_json", "=", "os", ".", "path", ".", "join", "(", "self", ".", "output_dir", ",", "\"predictions.json\"", ")", "\n", "with", "open", "(", "predictions_json", ",", "\"w\"", ")", "as", "f", ":", "\n", "                ", "f", ".", "write", "(", "json", ".", "dumps", "(", "json_data", ")", ")", "\n", "", "return", "pq_compute", "(", "self", ".", "gt_json", ",", "predictions_json", ",", "gt_folder", "=", "self", ".", "gt_folder", ",", "pred_folder", "=", "self", ".", "output_dir", ")", "\n", "", "return", "None", "\n", "", "", ""]], "home.repos.pwc.inspect_result.dddzg_up-detr.datasets.coco_panoptic.CocoPanoptic.__init__": [[22, 39], ["sorted", "open", "json.load", "zip"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "img_folder", ",", "ann_folder", ",", "ann_file", ",", "transforms", "=", "None", ",", "return_masks", "=", "True", ")", ":", "\n", "        ", "with", "open", "(", "ann_file", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "self", ".", "coco", "=", "json", ".", "load", "(", "f", ")", "\n", "\n", "# sort 'images' field so that they are aligned with 'annotations'", "\n", "# i.e., in alphabetical order", "\n", "", "self", ".", "coco", "[", "'images'", "]", "=", "sorted", "(", "self", ".", "coco", "[", "'images'", "]", ",", "key", "=", "lambda", "x", ":", "x", "[", "'id'", "]", ")", "\n", "# sanity check", "\n", "if", "\"annotations\"", "in", "self", ".", "coco", ":", "\n", "            ", "for", "img", ",", "ann", "in", "zip", "(", "self", ".", "coco", "[", "'images'", "]", ",", "self", ".", "coco", "[", "'annotations'", "]", ")", ":", "\n", "                ", "assert", "img", "[", "'file_name'", "]", "[", ":", "-", "4", "]", "==", "ann", "[", "'file_name'", "]", "[", ":", "-", "4", "]", "\n", "\n", "", "", "self", ".", "img_folder", "=", "img_folder", "\n", "self", ".", "ann_folder", "=", "ann_folder", "\n", "self", ".", "ann_file", "=", "ann_file", "\n", "self", ".", "transforms", "=", "transforms", "\n", "self", ".", "return_masks", "=", "return_masks", "\n", "\n"]], "home.repos.pwc.inspect_result.dddzg_up-detr.datasets.coco_panoptic.CocoPanoptic.__getitem__": [[40, 75], ["PIL.Image.open().convert", "torch.tensor", "util.box_ops.masks_to_boxes", "torch.as_tensor", "torch.as_tensor", "pathlib.Path", "ann_info[].replace", "pathlib.Path", "numpy.asarray", "panopticapi.utils.rgb2id", "numpy.array", "torch.as_tensor", "torch.tensor", "coco_panoptic.CocoPanoptic.transforms", "PIL.Image.open", "PIL.Image.open", "int", "int", "int", "int", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.dddzg_up-detr.util.box_ops.masks_to_boxes"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "ann_info", "=", "self", ".", "coco", "[", "'annotations'", "]", "[", "idx", "]", "if", "\"annotations\"", "in", "self", ".", "coco", "else", "self", ".", "coco", "[", "'images'", "]", "[", "idx", "]", "\n", "img_path", "=", "Path", "(", "self", ".", "img_folder", ")", "/", "ann_info", "[", "'file_name'", "]", ".", "replace", "(", "'.png'", ",", "'.jpg'", ")", "\n", "ann_path", "=", "Path", "(", "self", ".", "ann_folder", ")", "/", "ann_info", "[", "'file_name'", "]", "\n", "\n", "img", "=", "Image", ".", "open", "(", "img_path", ")", ".", "convert", "(", "'RGB'", ")", "\n", "w", ",", "h", "=", "img", ".", "size", "\n", "if", "\"segments_info\"", "in", "ann_info", ":", "\n", "            ", "masks", "=", "np", ".", "asarray", "(", "Image", ".", "open", "(", "ann_path", ")", ",", "dtype", "=", "np", ".", "uint32", ")", "\n", "masks", "=", "rgb2id", "(", "masks", ")", "\n", "\n", "ids", "=", "np", ".", "array", "(", "[", "ann", "[", "'id'", "]", "for", "ann", "in", "ann_info", "[", "'segments_info'", "]", "]", ")", "\n", "masks", "=", "masks", "==", "ids", "[", ":", ",", "None", ",", "None", "]", "\n", "\n", "masks", "=", "torch", ".", "as_tensor", "(", "masks", ",", "dtype", "=", "torch", ".", "uint8", ")", "\n", "labels", "=", "torch", ".", "tensor", "(", "[", "ann", "[", "'category_id'", "]", "for", "ann", "in", "ann_info", "[", "'segments_info'", "]", "]", ",", "dtype", "=", "torch", ".", "int64", ")", "\n", "\n", "", "target", "=", "{", "}", "\n", "target", "[", "'image_id'", "]", "=", "torch", ".", "tensor", "(", "[", "ann_info", "[", "'image_id'", "]", "if", "\"image_id\"", "in", "ann_info", "else", "ann_info", "[", "\"id\"", "]", "]", ")", "\n", "if", "self", ".", "return_masks", ":", "\n", "            ", "target", "[", "'masks'", "]", "=", "masks", "\n", "", "target", "[", "'labels'", "]", "=", "labels", "\n", "\n", "target", "[", "\"boxes\"", "]", "=", "masks_to_boxes", "(", "masks", ")", "\n", "\n", "target", "[", "'size'", "]", "=", "torch", ".", "as_tensor", "(", "[", "int", "(", "h", ")", ",", "int", "(", "w", ")", "]", ")", "\n", "target", "[", "'orig_size'", "]", "=", "torch", ".", "as_tensor", "(", "[", "int", "(", "h", ")", ",", "int", "(", "w", ")", "]", ")", "\n", "if", "\"segments_info\"", "in", "ann_info", ":", "\n", "            ", "for", "name", "in", "[", "'iscrowd'", ",", "'area'", "]", ":", "\n", "                ", "target", "[", "name", "]", "=", "torch", ".", "tensor", "(", "[", "ann", "[", "name", "]", "for", "ann", "in", "ann_info", "[", "'segments_info'", "]", "]", ")", "\n", "\n", "", "", "if", "self", ".", "transforms", "is", "not", "None", ":", "\n", "            ", "img", ",", "target", "=", "self", ".", "transforms", "(", "img", ",", "target", ")", "\n", "\n", "", "return", "img", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.dddzg_up-detr.datasets.coco_panoptic.CocoPanoptic.__len__": [[76, 78], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "coco", "[", "'images'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dddzg_up-detr.datasets.coco_panoptic.CocoPanoptic.get_height_and_width": [[79, 84], ["None"], "methods", ["None"], ["", "def", "get_height_and_width", "(", "self", ",", "idx", ")", ":", "\n", "        ", "img_info", "=", "self", ".", "coco", "[", "'images'", "]", "[", "idx", "]", "\n", "height", "=", "img_info", "[", "'height'", "]", "\n", "width", "=", "img_info", "[", "'width'", "]", "\n", "return", "height", ",", "width", "\n", "\n"]], "home.repos.pwc.inspect_result.dddzg_up-detr.datasets.coco_panoptic.build": [[86, 106], ["pathlib.Path", "pathlib.Path", "pathlib.Path.exists", "pathlib.Path.exists", "coco_panoptic.CocoPanoptic", "coco.make_coco_transforms", "pathlib.Path", "pathlib.Path"], "function", ["home.repos.pwc.inspect_result.dddzg_up-detr.datasets.coco.make_coco_transforms"], ["", "", "def", "build", "(", "image_set", ",", "args", ")", ":", "\n", "    ", "img_folder_root", "=", "Path", "(", "args", ".", "coco_path", ")", "\n", "ann_folder_root", "=", "Path", "(", "args", ".", "coco_panoptic_path", ")", "\n", "assert", "img_folder_root", ".", "exists", "(", ")", ",", "f'provided COCO path {img_folder_root} does not exist'", "\n", "assert", "ann_folder_root", ".", "exists", "(", ")", ",", "f'provided COCO path {ann_folder_root} does not exist'", "\n", "mode", "=", "'panoptic'", "\n", "PATHS", "=", "{", "\n", "\"train\"", ":", "(", "\"train2017\"", ",", "Path", "(", "\"annotations\"", ")", "/", "f'{mode}_train2017.json'", ")", ",", "\n", "\"val\"", ":", "(", "\"val2017\"", ",", "Path", "(", "\"annotations\"", ")", "/", "f'{mode}_val2017.json'", ")", ",", "\n", "}", "\n", "\n", "img_folder", ",", "ann_file", "=", "PATHS", "[", "image_set", "]", "\n", "img_folder_path", "=", "img_folder_root", "/", "img_folder", "\n", "ann_folder", "=", "ann_folder_root", "/", "f'{mode}_{img_folder}'", "\n", "ann_file", "=", "ann_folder_root", "/", "ann_file", "\n", "\n", "dataset", "=", "CocoPanoptic", "(", "img_folder_path", ",", "ann_folder", ",", "ann_file", ",", "\n", "transforms", "=", "make_coco_transforms", "(", "image_set", ")", ",", "return_masks", "=", "args", ".", "masks", ")", "\n", "\n", "return", "dataset", "\n", "", ""]], "home.repos.pwc.inspect_result.dddzg_up-detr.datasets.__init__.get_coco_api_from_dataset": [[15, 23], ["range", "isinstance", "isinstance"], "function", ["None"], ["def", "get_coco_api_from_dataset", "(", "dataset", ")", ":", "\n", "    ", "for", "_", "in", "range", "(", "10", ")", ":", "\n", "# if isinstance(dataset, torchvision.datasets.CocoDetection):", "\n", "#     break", "\n", "        ", "if", "isinstance", "(", "dataset", ",", "torch", ".", "utils", ".", "data", ".", "Subset", ")", ":", "\n", "            ", "dataset", "=", "dataset", ".", "dataset", "\n", "", "", "if", "isinstance", "(", "dataset", ",", "torchvision", ".", "datasets", ".", "CocoDetection", ")", ":", "\n", "        ", "return", "dataset", ".", "coco", "\n", "\n"]], "home.repos.pwc.inspect_result.dddzg_up-detr.datasets.__init__.build_dataset": [[25, 35], ["ValueError", "__init__..", "coco.build", "build_coco_panoptic"], "function", ["home.repos.pwc.inspect_result.dddzg_up-detr.datasets.coco_panoptic.build"], ["", "", "def", "build_dataset", "(", "image_set", ",", "args", ")", ":", "\n", "    ", "if", "args", ".", "dataset_file", "==", "'ImageNet'", ":", "\n", "        ", "return", "build_selfdet", "(", "image_set", ",", "args", ")", "\n", "", "if", "args", ".", "dataset_file", "==", "'coco'", ":", "\n", "        ", "return", "build_coco", "(", "image_set", ",", "args", ")", "\n", "", "if", "args", ".", "dataset_file", "==", "'coco_panoptic'", ":", "\n", "# to avoid making panopticapi required for coco", "\n", "        ", "from", ".", "coco_panoptic", "import", "build", "as", "build_coco_panoptic", "\n", "return", "build_coco_panoptic", "(", "image_set", ",", "args", ")", "\n", "", "raise", "ValueError", "(", "f'dataset {args.dataset_file} not supported'", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.dddzg_up-detr.datasets.selfdet.SelfDet.__init__": [[39, 51], ["torch.utils.data.Dataset.__init__", "os.walk", "print", "os.path.join", "selfdet.SelfDet.SelfDet.files.append", "len"], "methods", ["home.repos.pwc.inspect_result.dddzg_up-detr.models.backbone.Joiner.__init__"], ["def", "__init__", "(", "self", ",", "root", ",", "detection_transform", ",", "query_transform", ",", "num_patches", "=", "10", ")", ":", "\n", "        ", "super", "(", "SelfDet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "root", "=", "root", "\n", "self", ".", "detection_transform", "=", "detection_transform", "\n", "self", ".", "query_transform", "=", "query_transform", "\n", "self", ".", "files", "=", "[", "]", "\n", "self", ".", "num_patches", "=", "num_patches", "\n", "for", "(", "troot", ",", "_", ",", "files", ")", "in", "os", ".", "walk", "(", "root", ",", "followlinks", "=", "True", ")", ":", "\n", "            ", "for", "f", "in", "files", ":", "\n", "                ", "path", "=", "os", ".", "path", ".", "join", "(", "troot", ",", "f", ")", "\n", "self", ".", "files", ".", "append", "(", "path", ")", "\n", "", "", "print", "(", "f'num of files:{len(self.files)}'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dddzg_up-detr.datasets.selfdet.SelfDet.__len__": [[52, 54], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "files", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dddzg_up-detr.datasets.selfdet.SelfDet.__getitem__": [[55, 81], ["PIL.Image.open().convert", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "selfdet.SelfDet.SelfDet.detection_transform", "torch.as_tensor", "torch.as_tensor", "len", "selfdet.get_random_patch_from_img", "boxes.append", "area.append", "iscrowd.append", "labels.append", "patches.append", "torch.stack", "PIL.Image.open", "selfdet.SelfDet.SelfDet.query_transform", "int", "int", "int", "int", "len"], "methods", ["home.repos.pwc.inspect_result.dddzg_up-detr.datasets.selfdet.get_random_patch_from_img"], ["", "def", "__getitem__", "(", "self", ",", "item", ")", ":", "\n", "        ", "img_path", "=", "self", ".", "files", "[", "item", "]", "\n", "img", "=", "Image", ".", "open", "(", "img_path", ")", ".", "convert", "(", "\"RGB\"", ")", "\n", "w", ",", "h", "=", "img", ".", "size", "\n", "if", "w", "<=", "16", "or", "h", "<=", "16", ":", "\n", "            ", "return", "self", "[", "(", "item", "+", "1", ")", "%", "len", "(", "self", ")", "]", "\n", "# the format of the dataset is same with COCO.", "\n", "", "target", "=", "{", "'orig_size'", ":", "torch", ".", "as_tensor", "(", "[", "int", "(", "h", ")", ",", "int", "(", "w", ")", "]", ")", ",", "'size'", ":", "torch", ".", "as_tensor", "(", "[", "int", "(", "h", ")", ",", "int", "(", "w", ")", "]", ")", "}", "\n", "iscrowd", "=", "[", "]", "\n", "labels", "=", "[", "]", "\n", "boxes", "=", "[", "]", "\n", "area", "=", "[", "]", "\n", "patches", "=", "[", "]", "\n", "while", "len", "(", "area", ")", "<", "self", ".", "num_patches", ":", "\n", "            ", "patch", ",", "x", ",", "y", ",", "sw", ",", "sh", "=", "get_random_patch_from_img", "(", "img", ")", "\n", "boxes", ".", "append", "(", "[", "x", ",", "y", ",", "x", "+", "sw", ",", "y", "+", "sh", "]", ")", "\n", "area", ".", "append", "(", "sw", "*", "sh", ")", "\n", "iscrowd", ".", "append", "(", "0", ")", "\n", "labels", ".", "append", "(", "1", ")", "\n", "patches", ".", "append", "(", "self", ".", "query_transform", "(", "patch", ")", ")", "\n", "", "target", "[", "'iscrowd'", "]", "=", "torch", ".", "tensor", "(", "iscrowd", ")", "\n", "target", "[", "'labels'", "]", "=", "torch", ".", "tensor", "(", "labels", ")", "\n", "target", "[", "'boxes'", "]", "=", "torch", ".", "tensor", "(", "boxes", ")", "\n", "target", "[", "'area'", "]", "=", "torch", ".", "tensor", "(", "area", ")", "\n", "img", ",", "target", "=", "self", ".", "detection_transform", "(", "img", ",", "target", ")", "\n", "return", "img", ",", "torch", ".", "stack", "(", "patches", ",", "dim", "=", "0", ")", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.dddzg_up-detr.datasets.selfdet.GaussianBlur.__init__": [[113, 115], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "sigma", "=", "[", ".1", ",", "2.", "]", ")", ":", "\n", "        ", "self", ".", "sigma", "=", "sigma", "\n", "\n"]], "home.repos.pwc.inspect_result.dddzg_up-detr.datasets.selfdet.GaussianBlur.__call__": [[116, 120], ["random.uniform", "x.filter.filter.filter", "PIL.ImageFilter.GaussianBlur"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "x", ")", ":", "\n", "        ", "sigma", "=", "random", ".", "uniform", "(", "self", ".", "sigma", "[", "0", "]", ",", "self", ".", "sigma", "[", "1", "]", ")", "\n", "x", "=", "x", ".", "filter", "(", "ImageFilter", ".", "GaussianBlur", "(", "radius", "=", "sigma", ")", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.dddzg_up-detr.datasets.selfdet.get_random_patch_from_img": [[18, 31], ["img.crop", "numpy.random.randint", "numpy.random.randint", "numpy.random.randint", "numpy.random.randint"], "function", ["home.repos.pwc.inspect_result.dddzg_up-detr.datasets.transforms.crop"], ["def", "get_random_patch_from_img", "(", "img", ",", "min_pixel", "=", "8", ")", ":", "\n", "    ", "\"\"\"\n    :param img: original image\n    :param min_pixel: min pixels of the query patch\n    :return: query_patch,x,y,w,h\n    \"\"\"", "\n", "w", ",", "h", "=", "img", ".", "size", "\n", "min_w", ",", "max_w", "=", "min_pixel", ",", "w", "-", "min_pixel", "\n", "min_h", ",", "max_h", "=", "min_pixel", ",", "h", "-", "min_pixel", "\n", "sw", ",", "sh", "=", "np", ".", "random", ".", "randint", "(", "min_w", ",", "max_w", "+", "1", ")", ",", "np", ".", "random", ".", "randint", "(", "min_h", ",", "max_h", "+", "1", ")", "\n", "x", ",", "y", "=", "np", ".", "random", ".", "randint", "(", "w", "-", "sw", ")", "if", "sw", "!=", "w", "else", "0", ",", "np", ".", "random", ".", "randint", "(", "h", "-", "sh", ")", "if", "sh", "!=", "h", "else", "0", "\n", "patch", "=", "img", ".", "crop", "(", "(", "x", ",", "y", ",", "x", "+", "sw", ",", "y", "+", "sh", ")", ")", "\n", "return", "patch", ",", "x", ",", "y", ",", "sw", ",", "sh", "\n", "\n"]], "home.repos.pwc.inspect_result.dddzg_up-detr.datasets.selfdet.make_self_det_transforms": [[83, 106], ["datasets.Compose", "ValueError", "datasets.Compose", "datasets.Compose", "datasets.ToTensor", "datasets.Normalize", "datasets.RandomResize", "datasets.RandomResize"], "function", ["None"], ["", "", "def", "make_self_det_transforms", "(", "image_set", ")", ":", "\n", "    ", "normalize", "=", "T", ".", "Compose", "(", "[", "\n", "T", ".", "ToTensor", "(", ")", ",", "\n", "T", ".", "Normalize", "(", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", "\n", "]", ")", "\n", "\n", "# The image of ImageNet is relatively small.", "\n", "scales", "=", "[", "320", ",", "336", ",", "352", ",", "368", ",", "400", ",", "416", ",", "432", ",", "448", ",", "464", ",", "480", "]", "\n", "\n", "if", "image_set", "==", "'train'", ":", "\n", "        ", "return", "T", ".", "Compose", "(", "[", "\n", "# T.RandomHorizontalFlip(), HorizontalFlip may cause the pretext too difficult, so we remove it", "\n", "T", ".", "RandomResize", "(", "scales", ",", "max_size", "=", "600", ")", ",", "\n", "normalize", ",", "\n", "]", ")", "\n", "\n", "", "if", "image_set", "==", "'val'", ":", "\n", "        ", "return", "T", ".", "Compose", "(", "[", "\n", "T", ".", "RandomResize", "(", "[", "480", "]", ",", "max_size", "=", "600", ")", ",", "\n", "normalize", ",", "\n", "]", ")", "\n", "\n", "", "raise", "ValueError", "(", "f'unknown {image_set}'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dddzg_up-detr.datasets.selfdet.get_query_transforms": [[122, 146], ["ValueError", "torchvision.transforms.transforms.Compose", "torchvision.transforms.transforms.Compose", "torchvision.transforms.transforms.Resize", "torchvision.transforms.transforms.RandomApply", "torchvision.transforms.transforms.RandomGrayscale", "torchvision.transforms.transforms.RandomApply", "torchvision.transforms.transforms.ToTensor", "torchvision.transforms.transforms.Normalize", "torchvision.transforms.transforms.Resize", "torchvision.transforms.transforms.ToTensor", "torchvision.transforms.transforms.Normalize", "torchvision.transforms.transforms.ColorJitter", "selfdet.GaussianBlur"], "function", ["None"], ["", "", "def", "get_query_transforms", "(", "image_set", ")", ":", "\n", "    ", "if", "image_set", "==", "'train'", ":", "\n", "# SimCLR style augmentation", "\n", "        ", "return", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "Resize", "(", "(", "128", ",", "128", ")", ")", ",", "\n", "transforms", ".", "RandomApply", "(", "[", "\n", "transforms", ".", "ColorJitter", "(", "0.4", ",", "0.4", ",", "0.4", ",", "0.1", ")", "# not strengthened", "\n", "]", ",", "p", "=", "0.8", ")", ",", "\n", "transforms", ".", "RandomGrayscale", "(", "p", "=", "0.2", ")", ",", "\n", "transforms", ".", "RandomApply", "(", "[", "GaussianBlur", "(", "[", ".1", ",", "2.", "]", ")", "]", ",", "p", "=", "0.5", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "# transforms.RandomHorizontalFlip(),  HorizontalFlip may cause the pretext too difficult, so we remove it", "\n", "transforms", ".", "Normalize", "(", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "\n", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", "\n", "]", ")", "\n", "", "if", "image_set", "==", "'val'", ":", "\n", "        ", "return", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "Resize", "(", "(", "128", ",", "128", ")", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "\n", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", "\n", "]", ")", "\n", "\n", "", "raise", "ValueError", "(", "f'unknown {image_set}'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dddzg_up-detr.datasets.selfdet.build_selfdet": [[148, 151], ["selfdet.SelfDet", "selfdet..", "selfdet.get_query_transforms"], "function", ["home.repos.pwc.inspect_result.dddzg_up-detr.datasets.selfdet.get_query_transforms"], ["", "def", "build_selfdet", "(", "image_set", ",", "args", ")", ":", "\n", "    ", "return", "SelfDet", "(", "args", ".", "imagenet_path", ",", "detection_transform", "=", "make_self_det_transforms", "(", "image_set", ")", ",", "\n", "query_transform", "=", "get_query_transforms", "(", "image_set", ")", ",", "num_patches", "=", "args", ".", "num_patches", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.dddzg_up-detr.util.plot_utils.plot_logs": [[20, 81], ["enumerate", "matplotlib.subplots", "zip", "zip", "isinstance", "isinstance", "pathlib.Path", "pandas.read_json", "seaborn.color_palette", "enumerate", "ax.legend", "ax.set_title", "print", "ValueError", "isinstance", "ValueError", "dir.exists", "ValueError", "pathlib.Path.exists", "print", "print", "len", "pathlib.Path", "len", "pandas.DataFrame().ewm().mean", "axs[].plot", "df.interpolate().ewm().mean().plot", "pathlib.Path", "type", "type", "pandas.DataFrame().ewm", "df.interpolate().ewm().mean", "pandas.DataFrame", "df.interpolate().ewm", "numpy.stack", "df.interpolate", "df.test_coco_eval_bbox.dropna"], "function", ["home.repos.pwc.inspect_result.dddzg_up-detr.util.misc.interpolate"], ["def", "plot_logs", "(", "logs", ",", "fields", "=", "(", "'class_error'", ",", "'loss_bbox_unscaled'", ",", "'mAP'", ")", ",", "ewm_col", "=", "0", ",", "log_name", "=", "'log.txt'", ")", ":", "\n", "    ", "'''\n    Function to plot specific fields from training log(s). Plots both training and test results.\n\n    :: Inputs - logs = list containing Path objects, each pointing to individual dir with a log file\n              - fields = which results to plot from each log file - plots both training and test for each field.\n              - ewm_col = optional, which column to use as the exponential weighted smoothing of the plots\n              - log_name = optional, name of log file if different than default 'log.txt'.\n\n    :: Outputs - matplotlib plots of results in fields, color coded for each log file.\n               - solid lines are training results, dashed lines are test results.\n\n    '''", "\n", "func_name", "=", "\"plot_utils.py::plot_logs\"", "\n", "\n", "# verify logs is a list of Paths (list[Paths]) or single Pathlib object Path,", "\n", "# convert single Path to list to avoid 'not iterable' error", "\n", "\n", "if", "not", "isinstance", "(", "logs", ",", "list", ")", ":", "\n", "        ", "if", "isinstance", "(", "logs", ",", "PurePath", ")", ":", "\n", "            ", "logs", "=", "[", "logs", "]", "\n", "print", "(", "f\"{func_name} info: logs param expects a list argument, converted to list[Path].\"", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "f\"{func_name} - invalid argument for logs parameter.\\n \\\n            Expect list[Path] or single Path obj, received {type(logs)}\"", ")", "\n", "\n", "# Quality checks - verify valid dir(s), that every item in list is Path object, and that log_name exists in each dir", "\n", "", "", "for", "i", ",", "dir", "in", "enumerate", "(", "logs", ")", ":", "\n", "        ", "if", "not", "isinstance", "(", "dir", ",", "PurePath", ")", ":", "\n", "            ", "raise", "ValueError", "(", "f\"{func_name} - non-Path object in logs argument of {type(dir)}: \\n{dir}\"", ")", "\n", "", "if", "not", "dir", ".", "exists", "(", ")", ":", "\n", "            ", "raise", "ValueError", "(", "f\"{func_name} - invalid directory in logs argument:\\n{dir}\"", ")", "\n", "# verify log_name exists", "\n", "", "fn", "=", "Path", "(", "dir", "/", "log_name", ")", "\n", "if", "not", "fn", ".", "exists", "(", ")", ":", "\n", "            ", "print", "(", "f\"-> missing {log_name}.  Have you gotten to Epoch 1 in training?\"", ")", "\n", "print", "(", "f\"--> full path of missing log file: {fn}\"", ")", "\n", "return", "\n", "\n", "# load log file(s) and plot", "\n", "", "", "dfs", "=", "[", "pd", ".", "read_json", "(", "Path", "(", "p", ")", "/", "log_name", ",", "lines", "=", "True", ")", "for", "p", "in", "logs", "]", "\n", "\n", "fig", ",", "axs", "=", "plt", ".", "subplots", "(", "ncols", "=", "len", "(", "fields", ")", ",", "figsize", "=", "(", "16", ",", "5", ")", ")", "\n", "\n", "for", "df", ",", "color", "in", "zip", "(", "dfs", ",", "sns", ".", "color_palette", "(", "n_colors", "=", "len", "(", "logs", ")", ")", ")", ":", "\n", "        ", "for", "j", ",", "field", "in", "enumerate", "(", "fields", ")", ":", "\n", "            ", "if", "field", "==", "'mAP'", ":", "\n", "                ", "coco_eval", "=", "pd", ".", "DataFrame", "(", "\n", "np", ".", "stack", "(", "df", ".", "test_coco_eval_bbox", ".", "dropna", "(", ")", ".", "values", ")", "[", ":", ",", "1", "]", "\n", ")", ".", "ewm", "(", "com", "=", "ewm_col", ")", ".", "mean", "(", ")", "\n", "axs", "[", "j", "]", ".", "plot", "(", "coco_eval", ",", "c", "=", "color", ")", "\n", "", "else", ":", "\n", "                ", "df", ".", "interpolate", "(", ")", ".", "ewm", "(", "com", "=", "ewm_col", ")", ".", "mean", "(", ")", ".", "plot", "(", "\n", "y", "=", "[", "f'train_{field}'", ",", "f'test_{field}'", "]", ",", "\n", "ax", "=", "axs", "[", "j", "]", ",", "\n", "color", "=", "[", "color", "]", "*", "2", ",", "\n", "style", "=", "[", "'-'", ",", "'--'", "]", "\n", ")", "\n", "", "", "", "for", "ax", ",", "field", "in", "zip", "(", "axs", ",", "fields", ")", ":", "\n", "        ", "ax", ".", "legend", "(", "[", "Path", "(", "p", ")", ".", "name", "for", "p", "in", "logs", "]", ")", "\n", "ax", ".", "set_title", "(", "field", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dddzg_up-detr.util.plot_utils.plot_precision_recall": [[83, 115], ["matplotlib.subplots", "zip", "axs[].set_title", "axs[].legend", "axs[].set_title", "axs[].legend", "seaborn.color_palette", "torch.load", "precision[].mean", "scores[].mean", "precision[].mean.mean", "[].mean", "print", "axs[].plot", "axs[].plot", "ValueError", "len", "scores[].mean.mean"], "function", ["None"], ["", "", "def", "plot_precision_recall", "(", "files", ",", "naming_scheme", "=", "'iter'", ")", ":", "\n", "    ", "if", "naming_scheme", "==", "'exp_id'", ":", "\n", "# name becomes exp_id", "\n", "        ", "names", "=", "[", "f", ".", "parts", "[", "-", "3", "]", "for", "f", "in", "files", "]", "\n", "", "elif", "naming_scheme", "==", "'iter'", ":", "\n", "        ", "names", "=", "[", "f", ".", "stem", "for", "f", "in", "files", "]", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "f'not supported {naming_scheme}'", ")", "\n", "", "fig", ",", "axs", "=", "plt", ".", "subplots", "(", "ncols", "=", "2", ",", "figsize", "=", "(", "16", ",", "5", ")", ")", "\n", "for", "f", ",", "color", ",", "name", "in", "zip", "(", "files", ",", "sns", ".", "color_palette", "(", "\"Blues\"", ",", "n_colors", "=", "len", "(", "files", ")", ")", ",", "names", ")", ":", "\n", "        ", "data", "=", "torch", ".", "load", "(", "f", ")", "\n", "# precision is n_iou, n_points, n_cat, n_area, max_det", "\n", "precision", "=", "data", "[", "'precision'", "]", "\n", "recall", "=", "data", "[", "'params'", "]", ".", "recThrs", "\n", "scores", "=", "data", "[", "'scores'", "]", "\n", "# take precision for all classes, all areas and 100 detections", "\n", "precision", "=", "precision", "[", "0", ",", ":", ",", ":", ",", "0", ",", "-", "1", "]", ".", "mean", "(", "1", ")", "\n", "scores", "=", "scores", "[", "0", ",", ":", ",", ":", ",", "0", ",", "-", "1", "]", ".", "mean", "(", "1", ")", "\n", "prec", "=", "precision", ".", "mean", "(", ")", "\n", "rec", "=", "data", "[", "'recall'", "]", "[", "0", ",", ":", ",", "0", ",", "-", "1", "]", ".", "mean", "(", ")", "\n", "print", "(", "f'{naming_scheme} {name}: mAP@50={prec * 100: 05.1f}, '", "+", "\n", "f'score={scores.mean():0.3f}, '", "+", "\n", "f'f1={2 * prec * rec / (prec + rec + 1e-8):0.3f}'", "\n", ")", "\n", "axs", "[", "0", "]", ".", "plot", "(", "recall", ",", "precision", ",", "c", "=", "color", ")", "\n", "axs", "[", "1", "]", ".", "plot", "(", "recall", ",", "scores", ",", "c", "=", "color", ")", "\n", "\n", "", "axs", "[", "0", "]", ".", "set_title", "(", "'Precision / Recall'", ")", "\n", "axs", "[", "0", "]", ".", "legend", "(", "names", ")", "\n", "axs", "[", "1", "]", ".", "set_title", "(", "'Scores / Recall'", ")", "\n", "axs", "[", "1", "]", ".", "legend", "(", "names", ")", "\n", "return", "fig", ",", "axs", "\n", "", ""]], "home.repos.pwc.inspect_result.dddzg_up-detr.util.box_ops.box_cxcywh_to_xyxy": [[15, 20], ["x.unbind", "torch.stack"], "function", ["None"], ["def", "box_cxcywh_to_xyxy", "(", "x", ")", ":", "\n", "    ", "x_c", ",", "y_c", ",", "w", ",", "h", "=", "x", ".", "unbind", "(", "-", "1", ")", "\n", "b", "=", "[", "(", "x_c", "-", "0.5", "*", "w", ")", ",", "(", "y_c", "-", "0.5", "*", "h", ")", ",", "\n", "(", "x_c", "+", "0.5", "*", "w", ")", ",", "(", "y_c", "+", "0.5", "*", "h", ")", "]", "\n", "return", "torch", ".", "stack", "(", "b", ",", "dim", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dddzg_up-detr.util.box_ops.box_xyxy_to_cxcywh": [[22, 27], ["x.unbind", "torch.stack"], "function", ["None"], ["", "def", "box_xyxy_to_cxcywh", "(", "x", ")", ":", "\n", "    ", "x0", ",", "y0", ",", "x1", ",", "y1", "=", "x", ".", "unbind", "(", "-", "1", ")", "\n", "b", "=", "[", "(", "x0", "+", "x1", ")", "/", "2", ",", "(", "y0", "+", "y1", ")", "/", "2", ",", "\n", "(", "x1", "-", "x0", ")", ",", "(", "y1", "-", "y0", ")", "]", "\n", "return", "torch", ".", "stack", "(", "b", ",", "dim", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dddzg_up-detr.util.box_ops.box_iou": [[30, 44], ["torchvision.ops.boxes.box_area", "torchvision.ops.boxes.box_area", "torch.max", "torch.min"], "function", ["home.repos.pwc.inspect_result.dddzg_up-detr.util.misc.SmoothedValue.max"], ["", "def", "box_iou", "(", "boxes1", ",", "boxes2", ")", ":", "\n", "    ", "area1", "=", "box_area", "(", "boxes1", ")", "\n", "area2", "=", "box_area", "(", "boxes2", ")", "\n", "\n", "lt", "=", "torch", ".", "max", "(", "boxes1", "[", ":", ",", "None", ",", ":", "2", "]", ",", "boxes2", "[", ":", ",", ":", "2", "]", ")", "# [N,M,2]", "\n", "rb", "=", "torch", ".", "min", "(", "boxes1", "[", ":", ",", "None", ",", "2", ":", "]", ",", "boxes2", "[", ":", ",", "2", ":", "]", ")", "# [N,M,2]", "\n", "\n", "wh", "=", "(", "rb", "-", "lt", ")", ".", "clamp", "(", "min", "=", "0", ")", "# [N,M,2]", "\n", "inter", "=", "wh", "[", ":", ",", ":", ",", "0", "]", "*", "wh", "[", ":", ",", ":", ",", "1", "]", "# [N,M]", "\n", "\n", "union", "=", "area1", "[", ":", ",", "None", "]", "+", "area2", "-", "inter", "\n", "\n", "iou", "=", "inter", "/", "union", "\n", "return", "iou", ",", "union", "\n", "\n"]], "home.repos.pwc.inspect_result.dddzg_up-detr.util.box_ops.generalized_box_iou": [[46, 68], ["box_ops.box_iou", "torch.min", "torch.max"], "function", ["home.repos.pwc.inspect_result.dddzg_up-detr.util.box_ops.box_iou", "home.repos.pwc.inspect_result.dddzg_up-detr.util.misc.SmoothedValue.max"], ["", "def", "generalized_box_iou", "(", "boxes1", ",", "boxes2", ")", ":", "\n", "    ", "\"\"\"\n    Generalized IoU from https://giou.stanford.edu/\n\n    The boxes should be in [x0, y0, x1, y1] format\n\n    Returns a [N, M] pairwise matrix, where N = len(boxes1)\n    and M = len(boxes2)\n    \"\"\"", "\n", "# degenerate boxes gives inf / nan results", "\n", "# so do an early check", "\n", "assert", "(", "boxes1", "[", ":", ",", "2", ":", "]", ">=", "boxes1", "[", ":", ",", ":", "2", "]", ")", ".", "all", "(", ")", "\n", "assert", "(", "boxes2", "[", ":", ",", "2", ":", "]", ">=", "boxes2", "[", ":", ",", ":", "2", "]", ")", ".", "all", "(", ")", "\n", "iou", ",", "union", "=", "box_iou", "(", "boxes1", ",", "boxes2", ")", "\n", "\n", "lt", "=", "torch", ".", "min", "(", "boxes1", "[", ":", ",", "None", ",", ":", "2", "]", ",", "boxes2", "[", ":", ",", ":", "2", "]", ")", "\n", "rb", "=", "torch", ".", "max", "(", "boxes1", "[", ":", ",", "None", ",", "2", ":", "]", ",", "boxes2", "[", ":", ",", "2", ":", "]", ")", "\n", "\n", "wh", "=", "(", "rb", "-", "lt", ")", ".", "clamp", "(", "min", "=", "0", ")", "# [N,M,2]", "\n", "area", "=", "wh", "[", ":", ",", ":", ",", "0", "]", "*", "wh", "[", ":", ",", ":", ",", "1", "]", "\n", "\n", "return", "iou", "-", "(", "area", "-", "union", ")", "/", "area", "\n", "\n"]], "home.repos.pwc.inspect_result.dddzg_up-detr.util.box_ops.masks_to_boxes": [[70, 95], ["torch.arange", "torch.arange", "torch.meshgrid", "torch.stack", "masks.numel", "torch.zeros", "torch.arange.unsqueeze", "x_mask.flatten().max", "x_mask.masked_fill().flatten().min", "torch.arange.unsqueeze", "y_mask.flatten().max", "y_mask.masked_fill().flatten().min", "x_mask.flatten", "x_mask.masked_fill().flatten", "y_mask.flatten", "y_mask.masked_fill().flatten", "x_mask.masked_fill", "y_mask.masked_fill", "masks.bool", "masks.bool"], "function", ["home.repos.pwc.inspect_result.dddzg_up-detr.util.misc.SmoothedValue.max", "home.repos.pwc.inspect_result.dddzg_up-detr.util.misc.SmoothedValue.max"], ["", "def", "masks_to_boxes", "(", "masks", ")", ":", "\n", "    ", "\"\"\"Compute the bounding boxes around the provided masks\n\n    The masks should be in format [N, H, W] where N is the number of masks, (H, W) are the spatial dimensions.\n\n    Returns a [N, 4] tensors, with the boxes in xyxy format\n    \"\"\"", "\n", "if", "masks", ".", "numel", "(", ")", "==", "0", ":", "\n", "        ", "return", "torch", ".", "zeros", "(", "(", "0", ",", "4", ")", ",", "device", "=", "masks", ".", "device", ")", "\n", "\n", "", "h", ",", "w", "=", "masks", ".", "shape", "[", "-", "2", ":", "]", "\n", "\n", "y", "=", "torch", ".", "arange", "(", "0", ",", "h", ",", "dtype", "=", "torch", ".", "float", ")", "\n", "x", "=", "torch", ".", "arange", "(", "0", ",", "w", ",", "dtype", "=", "torch", ".", "float", ")", "\n", "y", ",", "x", "=", "torch", ".", "meshgrid", "(", "y", ",", "x", ")", "\n", "\n", "x_mask", "=", "(", "masks", "*", "x", ".", "unsqueeze", "(", "0", ")", ")", "\n", "x_max", "=", "x_mask", ".", "flatten", "(", "1", ")", ".", "max", "(", "-", "1", ")", "[", "0", "]", "\n", "x_min", "=", "x_mask", ".", "masked_fill", "(", "~", "(", "masks", ".", "bool", "(", ")", ")", ",", "1e8", ")", ".", "flatten", "(", "1", ")", ".", "min", "(", "-", "1", ")", "[", "0", "]", "\n", "\n", "y_mask", "=", "(", "masks", "*", "y", ".", "unsqueeze", "(", "0", ")", ")", "\n", "y_max", "=", "y_mask", ".", "flatten", "(", "1", ")", ".", "max", "(", "-", "1", ")", "[", "0", "]", "\n", "y_min", "=", "y_mask", ".", "masked_fill", "(", "~", "(", "masks", ".", "bool", "(", ")", ")", ",", "1e8", ")", ".", "flatten", "(", "1", ")", ".", "min", "(", "-", "1", ")", "[", "0", "]", "\n", "\n", "return", "torch", ".", "stack", "(", "[", "x_min", ",", "y_min", ",", "x_max", ",", "y_max", "]", ",", "1", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.dddzg_up-detr.util.misc.SmoothedValue.__init__": [[37, 44], ["collections.deque"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "window_size", "=", "20", ",", "fmt", "=", "None", ")", ":", "\n", "        ", "if", "fmt", "is", "None", ":", "\n", "            ", "fmt", "=", "\"{median:.4f} ({global_avg:.4f})\"", "\n", "", "self", ".", "deque", "=", "deque", "(", "maxlen", "=", "window_size", ")", "\n", "self", ".", "total", "=", "0.0", "\n", "self", ".", "count", "=", "0", "\n", "self", ".", "fmt", "=", "fmt", "\n", "\n"]], "home.repos.pwc.inspect_result.dddzg_up-detr.util.misc.SmoothedValue.update": [[45, 49], ["misc.SmoothedValue.deque.append"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "value", ",", "n", "=", "1", ")", ":", "\n", "        ", "self", ".", "deque", ".", "append", "(", "value", ")", "\n", "self", ".", "count", "+=", "n", "\n", "self", ".", "total", "+=", "value", "*", "n", "\n", "\n"]], "home.repos.pwc.inspect_result.dddzg_up-detr.util.misc.SmoothedValue.synchronize_between_processes": [[50, 62], ["torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.barrier", "torch.barrier", "torch.all_reduce", "torch.all_reduce", "t.tolist.tolist.tolist", "int", "misc.is_dist_avail_and_initialized"], "methods", ["home.repos.pwc.inspect_result.dddzg_up-detr.util.misc.is_dist_avail_and_initialized"], ["", "def", "synchronize_between_processes", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Warning: does not synchronize the deque!\n        \"\"\"", "\n", "if", "not", "is_dist_avail_and_initialized", "(", ")", ":", "\n", "            ", "return", "\n", "", "t", "=", "torch", ".", "tensor", "(", "[", "self", ".", "count", ",", "self", ".", "total", "]", ",", "dtype", "=", "torch", ".", "float64", ",", "device", "=", "'cuda'", ")", "\n", "dist", ".", "barrier", "(", ")", "\n", "dist", ".", "all_reduce", "(", "t", ")", "\n", "t", "=", "t", ".", "tolist", "(", ")", "\n", "self", ".", "count", "=", "int", "(", "t", "[", "0", "]", ")", "\n", "self", ".", "total", "=", "t", "[", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.dddzg_up-detr.util.misc.SmoothedValue.median": [[63, 67], ["torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor.median().item", "torch.tensor.median().item", "list", "torch.tensor.median", "torch.tensor.median"], "methods", ["home.repos.pwc.inspect_result.dddzg_up-detr.util.misc.SmoothedValue.median", "home.repos.pwc.inspect_result.dddzg_up-detr.util.misc.SmoothedValue.median"], ["", "@", "property", "\n", "def", "median", "(", "self", ")", ":", "\n", "        ", "d", "=", "torch", ".", "tensor", "(", "list", "(", "self", ".", "deque", ")", ")", "\n", "return", "d", ".", "median", "(", ")", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dddzg_up-detr.util.misc.SmoothedValue.avg": [[68, 72], ["torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor.mean().item", "torch.tensor.mean().item", "list", "torch.tensor.mean", "torch.tensor.mean"], "methods", ["None"], ["", "@", "property", "\n", "def", "avg", "(", "self", ")", ":", "\n", "        ", "d", "=", "torch", ".", "tensor", "(", "list", "(", "self", ".", "deque", ")", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "return", "d", ".", "mean", "(", ")", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dddzg_up-detr.util.misc.SmoothedValue.global_avg": [[73, 76], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "global_avg", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "total", "/", "self", ".", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.dddzg_up-detr.util.misc.SmoothedValue.max": [[77, 80], ["misc.SmoothedValue.max"], "methods", ["home.repos.pwc.inspect_result.dddzg_up-detr.util.misc.SmoothedValue.max"], ["", "@", "property", "\n", "def", "max", "(", "self", ")", ":", "\n", "        ", "return", "max", "(", "self", ".", "deque", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dddzg_up-detr.util.misc.SmoothedValue.value": [[81, 84], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "value", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "deque", "[", "-", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.dddzg_up-detr.util.misc.SmoothedValue.__str__": [[85, 92], ["misc.SmoothedValue.fmt.format"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "fmt", ".", "format", "(", "\n", "median", "=", "self", ".", "median", ",", "\n", "avg", "=", "self", ".", "avg", ",", "\n", "global_avg", "=", "self", ".", "global_avg", ",", "\n", "max", "=", "self", ".", "max", ",", "\n", "value", "=", "self", ".", "value", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dddzg_up-detr.util.misc.MetricLogger.__init__": [[165, 168], ["collections.defaultdict"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "delimiter", "=", "\"\\t\"", ")", ":", "\n", "        ", "self", ".", "meters", "=", "defaultdict", "(", "SmoothedValue", ")", "\n", "self", ".", "delimiter", "=", "delimiter", "\n", "\n"]], "home.repos.pwc.inspect_result.dddzg_up-detr.util.misc.MetricLogger.update": [[169, 175], ["kwargs.items", "isinstance", "isinstance", "misc.MetricLogger.meters[].update", "v.item.item.item"], "methods", ["home.repos.pwc.inspect_result.dddzg_up-detr.util.misc.MetricLogger.update"], ["", "def", "update", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "for", "k", ",", "v", "in", "kwargs", ".", "items", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "v", ",", "torch", ".", "Tensor", ")", ":", "\n", "                ", "v", "=", "v", ".", "item", "(", ")", "\n", "", "assert", "isinstance", "(", "v", ",", "(", "float", ",", "int", ")", ")", "\n", "self", ".", "meters", "[", "k", "]", ".", "update", "(", "v", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dddzg_up-detr.util.misc.MetricLogger.__getattr__": [[176, 183], ["AttributeError", "type"], "methods", ["None"], ["", "", "def", "__getattr__", "(", "self", ",", "attr", ")", ":", "\n", "        ", "if", "attr", "in", "self", ".", "meters", ":", "\n", "            ", "return", "self", ".", "meters", "[", "attr", "]", "\n", "", "if", "attr", "in", "self", ".", "__dict__", ":", "\n", "            ", "return", "self", ".", "__dict__", "[", "attr", "]", "\n", "", "raise", "AttributeError", "(", "\"'{}' object has no attribute '{}'\"", ".", "format", "(", "\n", "type", "(", "self", ")", ".", "__name__", ",", "attr", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dddzg_up-detr.util.misc.MetricLogger.__str__": [[184, 191], ["misc.MetricLogger.meters.items", "misc.MetricLogger.delimiter.join", "loss_str.append", "str"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "loss_str", "=", "[", "]", "\n", "for", "name", ",", "meter", "in", "self", ".", "meters", ".", "items", "(", ")", ":", "\n", "            ", "loss_str", ".", "append", "(", "\n", "\"{}: {}\"", ".", "format", "(", "name", ",", "str", "(", "meter", ")", ")", "\n", ")", "\n", "", "return", "self", ".", "delimiter", ".", "join", "(", "loss_str", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dddzg_up-detr.util.misc.MetricLogger.synchronize_between_processes": [[192, 195], ["misc.MetricLogger.meters.values", "meter.synchronize_between_processes"], "methods", ["home.repos.pwc.inspect_result.dddzg_up-detr.util.misc.MetricLogger.synchronize_between_processes"], ["", "def", "synchronize_between_processes", "(", "self", ")", ":", "\n", "        ", "for", "meter", "in", "self", ".", "meters", ".", "values", "(", ")", ":", "\n", "            ", "meter", ".", "synchronize_between_processes", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dddzg_up-detr.util.misc.MetricLogger.add_meter": [[196, 198], ["None"], "methods", ["None"], ["", "", "def", "add_meter", "(", "self", ",", "name", ",", "meter", ")", ":", "\n", "        ", "self", ".", "meters", "[", "name", "]", "=", "meter", "\n", "\n"]], "home.repos.pwc.inspect_result.dddzg_up-detr.util.misc.MetricLogger.log_every": [[199, 252], ["time.time", "time.time", "misc.SmoothedValue", "misc.SmoothedValue", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "str", "print", "misc.MetricLogger.delimiter.join", "misc.MetricLogger.delimiter.join", "misc.SmoothedValue.update", "misc.SmoothedValue.update", "time.time", "time.time", "datetime.timedelta", "str", "str", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "len", "time.time", "time.time", "datetime.timedelta", "print", "print", "int", "len", "str", "len", "len", "misc.MetricLogger.format", "misc.MetricLogger.format", "len", "int", "len", "len", "str", "str", "str", "str", "str", "str", "torch.cuda.max_memory_allocated", "torch.cuda.max_memory_allocated", "torch.cuda.max_memory_allocated", "torch.cuda.max_memory_allocated"], "methods", ["home.repos.pwc.inspect_result.dddzg_up-detr.util.misc.MetricLogger.update", "home.repos.pwc.inspect_result.dddzg_up-detr.util.misc.MetricLogger.update"], ["", "def", "log_every", "(", "self", ",", "iterable", ",", "print_freq", ",", "header", "=", "None", ")", ":", "\n", "        ", "i", "=", "0", "\n", "if", "not", "header", ":", "\n", "            ", "header", "=", "''", "\n", "", "start_time", "=", "time", ".", "time", "(", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "iter_time", "=", "SmoothedValue", "(", "fmt", "=", "'{avg:.4f}'", ")", "\n", "data_time", "=", "SmoothedValue", "(", "fmt", "=", "'{avg:.4f}'", ")", "\n", "space_fmt", "=", "':'", "+", "str", "(", "len", "(", "str", "(", "len", "(", "iterable", ")", ")", ")", ")", "+", "'d'", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "            ", "log_msg", "=", "self", ".", "delimiter", ".", "join", "(", "[", "\n", "header", ",", "\n", "'[{0'", "+", "space_fmt", "+", "'}/{1}]'", ",", "\n", "'eta: {eta}'", ",", "\n", "'{meters}'", ",", "\n", "'time: {time}'", ",", "\n", "'data: {data}'", ",", "\n", "'max mem: {memory:.0f}'", "\n", "]", ")", "\n", "", "else", ":", "\n", "            ", "log_msg", "=", "self", ".", "delimiter", ".", "join", "(", "[", "\n", "header", ",", "\n", "'[{0'", "+", "space_fmt", "+", "'}/{1}]'", ",", "\n", "'eta: {eta}'", ",", "\n", "'{meters}'", ",", "\n", "'time: {time}'", ",", "\n", "'data: {data}'", "\n", "]", ")", "\n", "", "MB", "=", "1024.0", "*", "1024.0", "\n", "for", "obj", "in", "iterable", ":", "\n", "            ", "data_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "yield", "obj", "\n", "iter_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "if", "i", "%", "print_freq", "==", "0", "or", "i", "==", "len", "(", "iterable", ")", "-", "1", ":", "\n", "                ", "eta_seconds", "=", "iter_time", ".", "global_avg", "*", "(", "len", "(", "iterable", ")", "-", "i", ")", "\n", "eta_string", "=", "str", "(", "datetime", ".", "timedelta", "(", "seconds", "=", "int", "(", "eta_seconds", ")", ")", ")", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "                    ", "print", "(", "log_msg", ".", "format", "(", "\n", "i", ",", "len", "(", "iterable", ")", ",", "eta", "=", "eta_string", ",", "\n", "meters", "=", "str", "(", "self", ")", ",", "\n", "time", "=", "str", "(", "iter_time", ")", ",", "data", "=", "str", "(", "data_time", ")", ",", "\n", "memory", "=", "torch", ".", "cuda", ".", "max_memory_allocated", "(", ")", "/", "MB", ")", ")", "\n", "", "else", ":", "\n", "                    ", "print", "(", "log_msg", ".", "format", "(", "\n", "i", ",", "len", "(", "iterable", ")", ",", "eta", "=", "eta_string", ",", "\n", "meters", "=", "str", "(", "self", ")", ",", "\n", "time", "=", "str", "(", "iter_time", ")", ",", "data", "=", "str", "(", "data_time", ")", ")", ")", "\n", "", "", "i", "+=", "1", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "", "total_time", "=", "time", ".", "time", "(", ")", "-", "start_time", "\n", "total_time_str", "=", "str", "(", "datetime", ".", "timedelta", "(", "seconds", "=", "int", "(", "total_time", ")", ")", ")", "\n", "print", "(", "'{} Total time: {} ({:.4f} s / it)'", ".", "format", "(", "\n", "header", ",", "total_time_str", ",", "total_time", "/", "len", "(", "iterable", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dddzg_up-detr.util.misc.NestedTensor.__init__": [[296, 299], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "tensors", ",", "mask", ":", "Optional", "[", "Tensor", "]", ")", ":", "\n", "        ", "self", ".", "tensors", "=", "tensors", "\n", "self", ".", "mask", "=", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.dddzg_up-detr.util.misc.NestedTensor.to": [[300, 310], ["misc.NestedTensor.tensors.to", "misc.NestedTensor", "mask.to"], "methods", ["home.repos.pwc.inspect_result.dddzg_up-detr.util.misc.NestedTensor.to", "home.repos.pwc.inspect_result.dddzg_up-detr.util.misc.NestedTensor.to"], ["", "def", "to", "(", "self", ",", "device", ")", ":", "\n", "# type: (Device) -> NestedTensor # noqa", "\n", "        ", "cast_tensor", "=", "self", ".", "tensors", ".", "to", "(", "device", ")", "\n", "mask", "=", "self", ".", "mask", "\n", "if", "mask", "is", "not", "None", ":", "\n", "            ", "assert", "mask", "is", "not", "None", "\n", "cast_mask", "=", "mask", ".", "to", "(", "device", ")", "\n", "", "else", ":", "\n", "            ", "cast_mask", "=", "None", "\n", "", "return", "NestedTensor", "(", "cast_tensor", ",", "cast_mask", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dddzg_up-detr.util.misc.NestedTensor.decompose": [[311, 313], ["None"], "methods", ["None"], ["", "def", "decompose", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "tensors", ",", "self", ".", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.dddzg_up-detr.util.misc.NestedTensor.__repr__": [[314, 316], ["str"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "str", "(", "self", ".", "tensors", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dddzg_up-detr.util.misc.all_gather": [[94, 135], ["misc.get_world_size", "pickle.dumps", "torch.ByteStorage.from_buffer", "torch.ByteStorage.from_buffer", "torch.ByteTensor().to", "torch.ByteTensor().to", "torch.tensor", "torch.tensor", "torch.all_gather", "max", "torch.all_gather", "zip", "torch.tensor", "torch.tensor", "int", "tensor_list.append", "torch.empty", "torch.empty", "torch.cat", "torch.cat", "data_list.append", "torch.ByteTensor", "torch.ByteTensor", "torch.cat.numel", "range", "size.item", "torch.empty", "torch.empty", "torch.cat.cpu().numpy().tobytes", "pickle.loads", "torch.cat.cpu().numpy", "torch.cat.cpu"], "function", ["home.repos.pwc.inspect_result.dddzg_up-detr.util.misc.get_world_size", "home.repos.pwc.inspect_result.dddzg_up-detr.util.misc.NestedTensor.to", "home.repos.pwc.inspect_result.dddzg_up-detr.util.misc.NestedTensor.to", "home.repos.pwc.inspect_result.dddzg_up-detr.util.misc.all_gather", "home.repos.pwc.inspect_result.dddzg_up-detr.util.misc.SmoothedValue.max", "home.repos.pwc.inspect_result.dddzg_up-detr.util.misc.all_gather"], ["", "", "def", "all_gather", "(", "data", ")", ":", "\n", "    ", "\"\"\"\n    Run all_gather on arbitrary picklable data (not necessarily tensors)\n    Args:\n        data: any picklable object\n    Returns:\n        list[data]: list of data gathered from each rank\n    \"\"\"", "\n", "world_size", "=", "get_world_size", "(", ")", "\n", "if", "world_size", "==", "1", ":", "\n", "        ", "return", "[", "data", "]", "\n", "\n", "# serialized to a Tensor", "\n", "", "buffer", "=", "pickle", ".", "dumps", "(", "data", ")", "\n", "storage", "=", "torch", ".", "ByteStorage", ".", "from_buffer", "(", "buffer", ")", "\n", "tensor", "=", "torch", ".", "ByteTensor", "(", "storage", ")", ".", "to", "(", "\"cuda\"", ")", "\n", "\n", "# obtain Tensor size of each rank", "\n", "local_size", "=", "torch", ".", "tensor", "(", "[", "tensor", ".", "numel", "(", ")", "]", ",", "device", "=", "\"cuda\"", ")", "\n", "size_list", "=", "[", "torch", ".", "tensor", "(", "[", "0", "]", ",", "device", "=", "\"cuda\"", ")", "for", "_", "in", "range", "(", "world_size", ")", "]", "\n", "dist", ".", "all_gather", "(", "size_list", ",", "local_size", ")", "\n", "size_list", "=", "[", "int", "(", "size", ".", "item", "(", ")", ")", "for", "size", "in", "size_list", "]", "\n", "max_size", "=", "max", "(", "size_list", ")", "\n", "\n", "# receiving Tensor from all ranks", "\n", "# we pad the tensor because torch all_gather does not support", "\n", "# gathering tensors of different shapes", "\n", "tensor_list", "=", "[", "]", "\n", "for", "_", "in", "size_list", ":", "\n", "        ", "tensor_list", ".", "append", "(", "torch", ".", "empty", "(", "(", "max_size", ",", ")", ",", "dtype", "=", "torch", ".", "uint8", ",", "device", "=", "\"cuda\"", ")", ")", "\n", "", "if", "local_size", "!=", "max_size", ":", "\n", "        ", "padding", "=", "torch", ".", "empty", "(", "size", "=", "(", "max_size", "-", "local_size", ",", ")", ",", "dtype", "=", "torch", ".", "uint8", ",", "device", "=", "\"cuda\"", ")", "\n", "tensor", "=", "torch", ".", "cat", "(", "(", "tensor", ",", "padding", ")", ",", "dim", "=", "0", ")", "\n", "", "dist", ".", "all_gather", "(", "tensor_list", ",", "tensor", ")", "\n", "\n", "data_list", "=", "[", "]", "\n", "for", "size", ",", "tensor", "in", "zip", "(", "size_list", ",", "tensor_list", ")", ":", "\n", "        ", "buffer", "=", "tensor", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "tobytes", "(", ")", "[", ":", "size", "]", "\n", "data_list", ".", "append", "(", "pickle", ".", "loads", "(", "buffer", ")", ")", "\n", "\n", "", "return", "data_list", "\n", "\n"]], "home.repos.pwc.inspect_result.dddzg_up-detr.util.misc.reduce_dict": [[137, 162], ["misc.get_world_size", "torch.no_grad", "torch.no_grad", "sorted", "torch.stack", "torch.stack", "torch.all_reduce", "input_dict.keys", "names.append", "torch.stack.append", "zip"], "function", ["home.repos.pwc.inspect_result.dddzg_up-detr.util.misc.get_world_size"], ["", "def", "reduce_dict", "(", "input_dict", ",", "average", "=", "True", ")", ":", "\n", "    ", "\"\"\"\n    Args:\n        input_dict (dict): all the values will be reduced\n        average (bool): whether to do average or sum\n    Reduce the values in the dictionary from all processes so that all processes\n    have the averaged results. Returns a dict with the same fields as\n    input_dict, after reduction.\n    \"\"\"", "\n", "world_size", "=", "get_world_size", "(", ")", "\n", "if", "world_size", "<", "2", ":", "\n", "        ", "return", "input_dict", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "names", "=", "[", "]", "\n", "values", "=", "[", "]", "\n", "# sort the keys so that they are consistent across processes", "\n", "for", "k", "in", "sorted", "(", "input_dict", ".", "keys", "(", ")", ")", ":", "\n", "            ", "names", ".", "append", "(", "k", ")", "\n", "values", ".", "append", "(", "input_dict", "[", "k", "]", ")", "\n", "", "values", "=", "torch", ".", "stack", "(", "values", ",", "dim", "=", "0", ")", "\n", "dist", ".", "all_reduce", "(", "values", ")", "\n", "if", "average", ":", "\n", "            ", "values", "/=", "world_size", "\n", "", "reduced_dict", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "zip", "(", "names", ",", "values", ")", "}", "\n", "", "return", "reduced_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.dddzg_up-detr.util.misc.get_sha": [[254, 272], ["os.path.dirname", "os.path.abspath", "subprocess.check_output().decode().strip", "misc.get_sha._run"], "function", ["None"], ["", "", "def", "get_sha", "(", ")", ":", "\n", "    ", "cwd", "=", "os", ".", "path", ".", "dirname", "(", "os", ".", "path", ".", "abspath", "(", "__file__", ")", ")", "\n", "\n", "def", "_run", "(", "command", ")", ":", "\n", "        ", "return", "subprocess", ".", "check_output", "(", "command", ",", "cwd", "=", "cwd", ")", ".", "decode", "(", "'ascii'", ")", ".", "strip", "(", ")", "\n", "", "sha", "=", "'N/A'", "\n", "diff", "=", "\"clean\"", "\n", "branch", "=", "'N/A'", "\n", "try", ":", "\n", "        ", "sha", "=", "_run", "(", "[", "'git'", ",", "'rev-parse'", ",", "'HEAD'", "]", ")", "\n", "subprocess", ".", "check_output", "(", "[", "'git'", ",", "'diff'", "]", ",", "cwd", "=", "cwd", ")", "\n", "diff", "=", "_run", "(", "[", "'git'", ",", "'diff-index'", ",", "'HEAD'", "]", ")", "\n", "diff", "=", "\"has uncommited changes\"", "if", "diff", "else", "\"clean\"", "\n", "branch", "=", "_run", "(", "[", "'git'", ",", "'rev-parse'", ",", "'--abbrev-ref'", ",", "'HEAD'", "]", ")", "\n", "", "except", "Exception", ":", "\n", "        ", "pass", "\n", "", "message", "=", "f\"sha: {sha}, status: {diff}, branch: {branch}\"", "\n", "return", "message", "\n", "\n"]], "home.repos.pwc.inspect_result.dddzg_up-detr.util.misc.collate_fn": [[274, 278], ["list", "misc.nested_tensor_from_tensor_list", "tuple", "zip"], "function", ["home.repos.pwc.inspect_result.dddzg_up-detr.util.misc.nested_tensor_from_tensor_list"], ["", "def", "collate_fn", "(", "batch", ")", ":", "\n", "    ", "batch", "=", "list", "(", "zip", "(", "*", "batch", ")", ")", "\n", "batch", "[", "0", "]", "=", "nested_tensor_from_tensor_list", "(", "batch", "[", "0", "]", ")", "\n", "return", "tuple", "(", "batch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dddzg_up-detr.util.misc.updetr_collate_fn": [[279, 284], ["list", "misc.nested_tensor_from_tensor_list", "torch.stack", "torch.stack", "tuple", "zip"], "function", ["home.repos.pwc.inspect_result.dddzg_up-detr.util.misc.nested_tensor_from_tensor_list"], ["", "def", "updetr_collate_fn", "(", "batch", ")", ":", "\n", "    ", "batch", "=", "list", "(", "zip", "(", "*", "batch", ")", ")", "\n", "batch", "[", "0", "]", "=", "nested_tensor_from_tensor_list", "(", "batch", "[", "0", "]", ")", "\n", "batch", "[", "1", "]", "=", "torch", ".", "stack", "(", "batch", "[", "1", "]", ",", "dim", "=", "0", ")", "\n", "return", "tuple", "(", "batch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dddzg_up-detr.util.misc._max_by_axis": [[286, 293], ["enumerate", "max"], "function", ["home.repos.pwc.inspect_result.dddzg_up-detr.util.misc.SmoothedValue.max"], ["", "def", "_max_by_axis", "(", "the_list", ")", ":", "\n", "# type: (List[List[int]]) -> List[int]", "\n", "    ", "maxes", "=", "the_list", "[", "0", "]", "\n", "for", "sublist", "in", "the_list", "[", "1", ":", "]", ":", "\n", "        ", "for", "index", ",", "item", "in", "enumerate", "(", "sublist", ")", ":", "\n", "            ", "maxes", "[", "index", "]", "=", "max", "(", "maxes", "[", "index", "]", ",", "item", ")", "\n", "", "", "return", "maxes", "\n", "\n"]], "home.repos.pwc.inspect_result.dddzg_up-detr.util.misc.nested_tensor_from_tensor_list": [[318, 341], ["misc.NestedTensor", "torchvision._is_tracing", "misc._max_by_axis", "torch.zeros", "torch.zeros", "torch.ones", "torch.ones", "zip", "ValueError", "misc._onnx_nested_tensor_from_tensor_list", "pad_img[].copy_", "list", "len"], "function", ["home.repos.pwc.inspect_result.dddzg_up-detr.util.misc._max_by_axis", "home.repos.pwc.inspect_result.dddzg_up-detr.util.misc._onnx_nested_tensor_from_tensor_list"], ["", "", "def", "nested_tensor_from_tensor_list", "(", "tensor_list", ":", "List", "[", "Tensor", "]", ")", ":", "\n", "# TODO make this more general", "\n", "    ", "if", "tensor_list", "[", "0", "]", ".", "ndim", "==", "3", ":", "\n", "        ", "if", "torchvision", ".", "_is_tracing", "(", ")", ":", "\n", "# nested_tensor_from_tensor_list() does not export well to ONNX", "\n", "# call _onnx_nested_tensor_from_tensor_list() instead", "\n", "            ", "return", "_onnx_nested_tensor_from_tensor_list", "(", "tensor_list", ")", "\n", "\n", "# TODO make it support different-sized images", "\n", "", "max_size", "=", "_max_by_axis", "(", "[", "list", "(", "img", ".", "shape", ")", "for", "img", "in", "tensor_list", "]", ")", "\n", "# min_size = tuple(min(s) for s in zip(*[img.shape for img in tensor_list]))", "\n", "batch_shape", "=", "[", "len", "(", "tensor_list", ")", "]", "+", "max_size", "\n", "b", ",", "c", ",", "h", ",", "w", "=", "batch_shape", "\n", "dtype", "=", "tensor_list", "[", "0", "]", ".", "dtype", "\n", "device", "=", "tensor_list", "[", "0", "]", ".", "device", "\n", "tensor", "=", "torch", ".", "zeros", "(", "batch_shape", ",", "dtype", "=", "dtype", ",", "device", "=", "device", ")", "\n", "mask", "=", "torch", ".", "ones", "(", "(", "b", ",", "h", ",", "w", ")", ",", "dtype", "=", "torch", ".", "bool", ",", "device", "=", "device", ")", "\n", "for", "img", ",", "pad_img", ",", "m", "in", "zip", "(", "tensor_list", ",", "tensor", ",", "mask", ")", ":", "\n", "            ", "pad_img", "[", ":", "img", ".", "shape", "[", "0", "]", ",", ":", "img", ".", "shape", "[", "1", "]", ",", ":", "img", ".", "shape", "[", "2", "]", "]", ".", "copy_", "(", "img", ")", "\n", "m", "[", ":", "img", ".", "shape", "[", "1", "]", ",", ":", "img", ".", "shape", "[", "2", "]", "]", "=", "False", "\n", "", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'not supported'", ")", "\n", "", "return", "NestedTensor", "(", "tensor", ",", "mask", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dddzg_up-detr.util.misc._onnx_nested_tensor_from_tensor_list": [[345, 372], ["range", "tuple", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "misc.NestedTensor", "tensor_list[].dim", "torch.max().to", "torch.max().to", "tuple.append", "torch.nn.functional.pad", "torch.nn.functional.pad", "padded_imgs.append", "torch.zeros_like", "torch.zeros_like", "torch.nn.functional.pad", "torch.nn.functional.pad", "padded_masks.append", "torch.nn.functional.pad.to", "torch.max", "torch.max", "zip", "torch.stack().to", "torch.stack().to", "tuple", "torch.stack", "torch.stack"], "function", ["home.repos.pwc.inspect_result.dddzg_up-detr.util.misc.NestedTensor.to", "home.repos.pwc.inspect_result.dddzg_up-detr.util.misc.NestedTensor.to", "home.repos.pwc.inspect_result.dddzg_up-detr.datasets.transforms.pad", "home.repos.pwc.inspect_result.dddzg_up-detr.datasets.transforms.pad", "home.repos.pwc.inspect_result.dddzg_up-detr.datasets.transforms.pad", "home.repos.pwc.inspect_result.dddzg_up-detr.datasets.transforms.pad", "home.repos.pwc.inspect_result.dddzg_up-detr.util.misc.NestedTensor.to", "home.repos.pwc.inspect_result.dddzg_up-detr.util.misc.SmoothedValue.max", "home.repos.pwc.inspect_result.dddzg_up-detr.util.misc.SmoothedValue.max", "home.repos.pwc.inspect_result.dddzg_up-detr.util.misc.NestedTensor.to", "home.repos.pwc.inspect_result.dddzg_up-detr.util.misc.NestedTensor.to"], ["", "@", "torch", ".", "jit", ".", "unused", "\n", "def", "_onnx_nested_tensor_from_tensor_list", "(", "tensor_list", ":", "List", "[", "Tensor", "]", ")", "->", "NestedTensor", ":", "\n", "    ", "max_size", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "tensor_list", "[", "0", "]", ".", "dim", "(", ")", ")", ":", "\n", "        ", "max_size_i", "=", "torch", ".", "max", "(", "torch", ".", "stack", "(", "[", "img", ".", "shape", "[", "i", "]", "for", "img", "in", "tensor_list", "]", ")", ".", "to", "(", "torch", ".", "float32", ")", ")", ".", "to", "(", "torch", ".", "int64", ")", "\n", "max_size", ".", "append", "(", "max_size_i", ")", "\n", "", "max_size", "=", "tuple", "(", "max_size", ")", "\n", "\n", "# work around for", "\n", "# pad_img[: img.shape[0], : img.shape[1], : img.shape[2]].copy_(img)", "\n", "# m[: img.shape[1], :img.shape[2]] = False", "\n", "# which is not yet supported in onnx", "\n", "padded_imgs", "=", "[", "]", "\n", "padded_masks", "=", "[", "]", "\n", "for", "img", "in", "tensor_list", ":", "\n", "        ", "padding", "=", "[", "(", "s1", "-", "s2", ")", "for", "s1", ",", "s2", "in", "zip", "(", "max_size", ",", "tuple", "(", "img", ".", "shape", ")", ")", "]", "\n", "padded_img", "=", "torch", ".", "nn", ".", "functional", ".", "pad", "(", "img", ",", "(", "0", ",", "padding", "[", "2", "]", ",", "0", ",", "padding", "[", "1", "]", ",", "0", ",", "padding", "[", "0", "]", ")", ")", "\n", "padded_imgs", ".", "append", "(", "padded_img", ")", "\n", "\n", "m", "=", "torch", ".", "zeros_like", "(", "img", "[", "0", "]", ",", "dtype", "=", "torch", ".", "int", ",", "device", "=", "img", ".", "device", ")", "\n", "padded_mask", "=", "torch", ".", "nn", ".", "functional", ".", "pad", "(", "m", ",", "(", "0", ",", "padding", "[", "2", "]", ",", "0", ",", "padding", "[", "1", "]", ")", ",", "\"constant\"", ",", "1", ")", "\n", "padded_masks", ".", "append", "(", "padded_mask", ".", "to", "(", "torch", ".", "bool", ")", ")", "\n", "\n", "", "tensor", "=", "torch", ".", "stack", "(", "padded_imgs", ")", "\n", "mask", "=", "torch", ".", "stack", "(", "padded_masks", ")", "\n", "\n", "return", "NestedTensor", "(", "tensor", ",", "mask", "=", "mask", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dddzg_up-detr.util.misc.setup_for_distributed": [[374, 387], ["kwargs.pop", "builtin_print"], "function", ["None"], ["", "def", "setup_for_distributed", "(", "is_master", ")", ":", "\n", "    ", "\"\"\"\n    This function disables printing when not in master process\n    \"\"\"", "\n", "import", "builtins", "as", "__builtin__", "\n", "builtin_print", "=", "__builtin__", ".", "print", "\n", "\n", "def", "print", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "force", "=", "kwargs", ".", "pop", "(", "'force'", ",", "False", ")", "\n", "if", "is_master", "or", "force", ":", "\n", "            ", "builtin_print", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n", "", "", "__builtin__", ".", "print", "=", "print", "\n", "\n"]], "home.repos.pwc.inspect_result.dddzg_up-detr.util.misc.is_dist_avail_and_initialized": [[389, 395], ["torch.is_available", "torch.is_initialized"], "function", ["None"], ["", "def", "is_dist_avail_and_initialized", "(", ")", ":", "\n", "    ", "if", "not", "dist", ".", "is_available", "(", ")", ":", "\n", "        ", "return", "False", "\n", "", "if", "not", "dist", ".", "is_initialized", "(", ")", ":", "\n", "        ", "return", "False", "\n", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.dddzg_up-detr.util.misc.get_world_size": [[397, 401], ["torch.get_world_size", "misc.is_dist_avail_and_initialized"], "function", ["home.repos.pwc.inspect_result.dddzg_up-detr.util.misc.get_world_size", "home.repos.pwc.inspect_result.dddzg_up-detr.util.misc.is_dist_avail_and_initialized"], ["", "def", "get_world_size", "(", ")", ":", "\n", "    ", "if", "not", "is_dist_avail_and_initialized", "(", ")", ":", "\n", "        ", "return", "1", "\n", "", "return", "dist", ".", "get_world_size", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dddzg_up-detr.util.misc.get_rank": [[403, 407], ["torch.get_rank", "misc.is_dist_avail_and_initialized"], "function", ["home.repos.pwc.inspect_result.dddzg_up-detr.util.misc.get_rank", "home.repos.pwc.inspect_result.dddzg_up-detr.util.misc.is_dist_avail_and_initialized"], ["", "def", "get_rank", "(", ")", ":", "\n", "    ", "if", "not", "is_dist_avail_and_initialized", "(", ")", ":", "\n", "        ", "return", "0", "\n", "", "return", "dist", ".", "get_rank", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dddzg_up-detr.util.misc.is_main_process": [[409, 411], ["misc.get_rank"], "function", ["home.repos.pwc.inspect_result.dddzg_up-detr.util.misc.get_rank"], ["", "def", "is_main_process", "(", ")", ":", "\n", "    ", "return", "get_rank", "(", ")", "==", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.dddzg_up-detr.util.misc.save_on_master": [[413, 416], ["misc.is_main_process", "torch.save", "torch.save"], "function", ["home.repos.pwc.inspect_result.dddzg_up-detr.util.misc.is_main_process"], ["", "def", "save_on_master", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "if", "is_main_process", "(", ")", ":", "\n", "        ", "torch", ".", "save", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dddzg_up-detr.util.misc.init_distributed_mode": [[418, 441], ["torch.cuda.set_device", "torch.cuda.set_device", "misc.setup_for_distributed.print", "torch.distributed.init_process_group", "torch.distributed.init_process_group", "torch.distributed.barrier", "torch.distributed.barrier", "misc.setup_for_distributed", "int", "int", "int", "int", "misc.setup_for_distributed.print", "torch.cuda.device_count", "torch.cuda.device_count"], "function", ["home.repos.pwc.inspect_result.dddzg_up-detr.util.misc.setup_for_distributed"], ["", "", "def", "init_distributed_mode", "(", "args", ")", ":", "\n", "    ", "if", "'RANK'", "in", "os", ".", "environ", "and", "'WORLD_SIZE'", "in", "os", ".", "environ", ":", "\n", "        ", "args", ".", "rank", "=", "int", "(", "os", ".", "environ", "[", "\"RANK\"", "]", ")", "\n", "args", ".", "world_size", "=", "int", "(", "os", ".", "environ", "[", "'WORLD_SIZE'", "]", ")", "\n", "args", ".", "gpu", "=", "int", "(", "os", ".", "environ", "[", "'LOCAL_RANK'", "]", ")", "\n", "", "elif", "'SLURM_PROCID'", "in", "os", ".", "environ", ":", "\n", "        ", "args", ".", "rank", "=", "int", "(", "os", ".", "environ", "[", "'SLURM_PROCID'", "]", ")", "\n", "args", ".", "gpu", "=", "args", ".", "rank", "%", "torch", ".", "cuda", ".", "device_count", "(", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "'Not using distributed mode'", ")", "\n", "args", ".", "distributed", "=", "False", "\n", "return", "\n", "\n", "", "args", ".", "distributed", "=", "True", "\n", "\n", "torch", ".", "cuda", ".", "set_device", "(", "args", ".", "gpu", ")", "\n", "args", ".", "dist_backend", "=", "'nccl'", "\n", "print", "(", "'| distributed init (rank {}): {}'", ".", "format", "(", "\n", "args", ".", "rank", ",", "args", ".", "dist_url", ")", ",", "flush", "=", "True", ")", "\n", "torch", ".", "distributed", ".", "init_process_group", "(", "backend", "=", "args", ".", "dist_backend", ",", "init_method", "=", "args", ".", "dist_url", ",", "\n", "world_size", "=", "args", ".", "world_size", ",", "rank", "=", "args", ".", "rank", ")", "\n", "torch", ".", "distributed", ".", "barrier", "(", ")", "\n", "setup_for_distributed", "(", "args", ".", "rank", "==", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dddzg_up-detr.util.misc.accuracy": [[443, 460], ["torch.no_grad", "torch.no_grad", "max", "target.size", "output.topk", "pred.t.t", "pred.t.eq", "target.numel", "target.view().expand_as", "correct[].view().float().sum", "res.append", "torch.zeros", "torch.zeros", "correct[].view().float().sum.mul_", "target.view", "correct[].view().float", "correct[].view"], "function", ["home.repos.pwc.inspect_result.dddzg_up-detr.util.misc.SmoothedValue.max"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "accuracy", "(", "output", ",", "target", ",", "topk", "=", "(", "1", ",", ")", ")", ":", "\n", "    ", "\"\"\"Computes the precision@k for the specified values of k\"\"\"", "\n", "if", "target", ".", "numel", "(", ")", "==", "0", ":", "\n", "        ", "return", "[", "torch", ".", "zeros", "(", "[", "]", ",", "device", "=", "output", ".", "device", ")", "]", "\n", "", "maxk", "=", "max", "(", "topk", ")", "\n", "batch_size", "=", "target", ".", "size", "(", "0", ")", "\n", "\n", "_", ",", "pred", "=", "output", ".", "topk", "(", "maxk", ",", "1", ",", "True", ",", "True", ")", "\n", "pred", "=", "pred", ".", "t", "(", ")", "\n", "correct", "=", "pred", ".", "eq", "(", "target", ".", "view", "(", "1", ",", "-", "1", ")", ".", "expand_as", "(", "pred", ")", ")", "\n", "\n", "res", "=", "[", "]", "\n", "for", "k", "in", "topk", ":", "\n", "        ", "correct_k", "=", "correct", "[", ":", "k", "]", ".", "view", "(", "-", "1", ")", ".", "float", "(", ")", ".", "sum", "(", "0", ")", "\n", "res", ".", "append", "(", "correct_k", ".", "mul_", "(", "100.0", "/", "batch_size", ")", ")", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.dddzg_up-detr.util.misc.interpolate": [[462, 480], ["float", "_output_size", "_new_empty_tensor", "torchvision.ops.misc.interpolate", "input.numel", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "list", "list"], "function", ["home.repos.pwc.inspect_result.dddzg_up-detr.util.misc.interpolate", "home.repos.pwc.inspect_result.dddzg_up-detr.util.misc.interpolate", "home.repos.pwc.inspect_result.dddzg_up-detr.util.misc.interpolate"], ["", "def", "interpolate", "(", "input", ",", "size", "=", "None", ",", "scale_factor", "=", "None", ",", "mode", "=", "\"nearest\"", ",", "align_corners", "=", "None", ")", ":", "\n", "# type: (Tensor, Optional[List[int]], Optional[float], str, Optional[bool]) -> Tensor", "\n", "    ", "\"\"\"\n    Equivalent to nn.functional.interpolate, but with support for empty batch sizes.\n    This will eventually be supported natively by PyTorch, and this\n    class can go away.\n    \"\"\"", "\n", "if", "float", "(", "torchvision", ".", "__version__", "[", ":", "3", "]", ")", "<", "0.7", ":", "\n", "        ", "if", "input", ".", "numel", "(", ")", ">", "0", ":", "\n", "            ", "return", "torch", ".", "nn", ".", "functional", ".", "interpolate", "(", "\n", "input", ",", "size", ",", "scale_factor", ",", "mode", ",", "align_corners", "\n", ")", "\n", "\n", "", "output_shape", "=", "_output_size", "(", "2", ",", "input", ",", "size", ",", "scale_factor", ")", "\n", "output_shape", "=", "list", "(", "input", ".", "shape", "[", ":", "-", "2", "]", ")", "+", "list", "(", "output_shape", ")", "\n", "return", "_new_empty_tensor", "(", "input", ",", "output_shape", ")", "\n", "", "else", ":", "\n", "        ", "return", "torchvision", ".", "ops", ".", "misc", ".", "interpolate", "(", "input", ",", "size", ",", "scale_factor", ",", "mode", ",", "align_corners", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.dddzg_up-detr.models.segmentation.DETRsegm.__init__": [[31, 42], ["torch.Module.__init__", "segmentation.MHAttentionMap", "segmentation.MaskHeadSmallConv", "segmentation.DETRsegm.parameters", "p.requires_grad_"], "methods", ["home.repos.pwc.inspect_result.dddzg_up-detr.models.backbone.Joiner.__init__"], ["    ", "def", "__init__", "(", "self", ",", "detr", ",", "freeze_detr", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "detr", "=", "detr", "\n", "\n", "if", "freeze_detr", ":", "\n", "            ", "for", "p", "in", "self", ".", "parameters", "(", ")", ":", "\n", "                ", "p", ".", "requires_grad_", "(", "False", ")", "\n", "\n", "", "", "hidden_dim", ",", "nheads", "=", "detr", ".", "transformer", ".", "d_model", ",", "detr", ".", "transformer", ".", "nhead", "\n", "self", ".", "bbox_attention", "=", "MHAttentionMap", "(", "hidden_dim", ",", "hidden_dim", ",", "nheads", ",", "dropout", "=", "0.0", ")", "\n", "self", ".", "mask_head", "=", "MaskHeadSmallConv", "(", "hidden_dim", "+", "nheads", ",", "[", "1024", ",", "512", ",", "256", "]", ",", "hidden_dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dddzg_up-detr.models.segmentation.DETRsegm.forward": [[43, 70], ["isinstance", "segmentation.DETRsegm.detr.backbone", "features[].decompose", "segmentation.DETRsegm.detr.input_proj", "segmentation.DETRsegm.detr.transformer", "segmentation.DETRsegm.detr.class_embed", "segmentation.DETRsegm.detr.bbox_embed().sigmoid", "segmentation.DETRsegm.bbox_attention", "segmentation.DETRsegm.mask_head", "segmentation.DETRsegm.view", "util.misc.nested_tensor_from_tensor_list", "segmentation.DETRsegm.detr.query_embed.weight.unsqueeze().repeat", "segmentation.DETRsegm.detr._set_aux_loss", "segmentation.DETRsegm.detr.bbox_embed", "segmentation.DETRsegm.detr.query_embed.weight.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.dddzg_up-detr.util.misc.NestedTensor.decompose", "home.repos.pwc.inspect_result.dddzg_up-detr.util.misc.nested_tensor_from_tensor_list", "home.repos.pwc.inspect_result.dddzg_up-detr.models.detr.DETR._set_aux_loss"], ["", "def", "forward", "(", "self", ",", "samples", ":", "NestedTensor", ")", ":", "\n", "        ", "if", "isinstance", "(", "samples", ",", "(", "list", ",", "torch", ".", "Tensor", ")", ")", ":", "\n", "            ", "samples", "=", "nested_tensor_from_tensor_list", "(", "samples", ")", "\n", "", "features", ",", "pos", "=", "self", ".", "detr", ".", "backbone", "(", "samples", ")", "\n", "\n", "bs", "=", "features", "[", "-", "1", "]", ".", "tensors", ".", "shape", "[", "0", "]", "\n", "\n", "src", ",", "mask", "=", "features", "[", "-", "1", "]", ".", "decompose", "(", ")", "\n", "assert", "mask", "is", "not", "None", "\n", "src_proj", "=", "self", ".", "detr", ".", "input_proj", "(", "src", ")", "\n", "# to align with UP-DETR, we add self.detr.query_embed.weight.unsqueeze(1).repeat(1, bs, 1) here.", "\n", "hs", ",", "memory", "=", "self", ".", "detr", ".", "transformer", "(", "src_proj", ",", "mask", ",", "self", ".", "detr", ".", "query_embed", ".", "weight", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "1", ",", "bs", ",", "1", ")", ",", "pos", "[", "-", "1", "]", ")", "\n", "\n", "outputs_class", "=", "self", ".", "detr", ".", "class_embed", "(", "hs", ")", "\n", "outputs_coord", "=", "self", ".", "detr", ".", "bbox_embed", "(", "hs", ")", ".", "sigmoid", "(", ")", "\n", "out", "=", "{", "\"pred_logits\"", ":", "outputs_class", "[", "-", "1", "]", ",", "\"pred_boxes\"", ":", "outputs_coord", "[", "-", "1", "]", "}", "\n", "if", "self", ".", "detr", ".", "aux_loss", ":", "\n", "            ", "out", "[", "'aux_outputs'", "]", "=", "self", ".", "detr", ".", "_set_aux_loss", "(", "outputs_class", ",", "outputs_coord", ")", "\n", "\n", "# FIXME h_boxes takes the last one computed, keep this in mind", "\n", "", "bbox_mask", "=", "self", ".", "bbox_attention", "(", "hs", "[", "-", "1", "]", ",", "memory", ",", "mask", "=", "mask", ")", "\n", "\n", "seg_masks", "=", "self", ".", "mask_head", "(", "src_proj", ",", "bbox_mask", ",", "[", "features", "[", "2", "]", ".", "tensors", ",", "features", "[", "1", "]", ".", "tensors", ",", "features", "[", "0", "]", ".", "tensors", "]", ")", "\n", "outputs_seg_masks", "=", "seg_masks", ".", "view", "(", "bs", ",", "self", ".", "detr", ".", "num_queries", ",", "seg_masks", ".", "shape", "[", "-", "2", "]", ",", "seg_masks", ".", "shape", "[", "-", "1", "]", ")", "\n", "\n", "out", "[", "\"pred_masks\"", "]", "=", "outputs_seg_masks", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.dddzg_up-detr.models.segmentation.MaskHeadSmallConv.__init__": [[82, 108], ["torch.Module.__init__", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.GroupNorm", "torch.nn.GroupNorm", "torch.nn.GroupNorm", "torch.nn.GroupNorm", "torch.nn.GroupNorm", "torch.nn.GroupNorm", "torch.nn.GroupNorm", "torch.nn.GroupNorm", "torch.nn.GroupNorm", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.GroupNorm", "torch.nn.GroupNorm", "torch.nn.GroupNorm", "torch.nn.GroupNorm", "torch.nn.GroupNorm", "torch.nn.GroupNorm", "torch.nn.GroupNorm", "torch.nn.GroupNorm", "torch.nn.GroupNorm", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.GroupNorm", "torch.nn.GroupNorm", "torch.nn.GroupNorm", "torch.nn.GroupNorm", "torch.nn.GroupNorm", "torch.nn.GroupNorm", "torch.nn.GroupNorm", "torch.nn.GroupNorm", "torch.nn.GroupNorm", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.GroupNorm", "torch.nn.GroupNorm", "torch.nn.GroupNorm", "torch.nn.GroupNorm", "torch.nn.GroupNorm", "torch.nn.GroupNorm", "torch.nn.GroupNorm", "torch.nn.GroupNorm", "torch.nn.GroupNorm", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.GroupNorm", "torch.nn.GroupNorm", "torch.nn.GroupNorm", "torch.nn.GroupNorm", "torch.nn.GroupNorm", "torch.nn.GroupNorm", "torch.nn.GroupNorm", "torch.nn.GroupNorm", "torch.nn.GroupNorm", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "segmentation.MaskHeadSmallConv.modules", "isinstance", "torch.init.kaiming_uniform_", "torch.init.kaiming_uniform_", "torch.init.kaiming_uniform_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.dddzg_up-detr.models.backbone.Joiner.__init__"], ["def", "__init__", "(", "self", ",", "dim", ",", "fpn_dims", ",", "context_dim", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "inter_dims", "=", "[", "dim", ",", "context_dim", "//", "2", ",", "context_dim", "//", "4", ",", "context_dim", "//", "8", ",", "context_dim", "//", "16", ",", "context_dim", "//", "64", "]", "\n", "self", ".", "lay1", "=", "torch", ".", "nn", ".", "Conv2d", "(", "dim", ",", "dim", ",", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "gn1", "=", "torch", ".", "nn", ".", "GroupNorm", "(", "8", ",", "dim", ")", "\n", "self", ".", "lay2", "=", "torch", ".", "nn", ".", "Conv2d", "(", "dim", ",", "inter_dims", "[", "1", "]", ",", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "gn2", "=", "torch", ".", "nn", ".", "GroupNorm", "(", "8", ",", "inter_dims", "[", "1", "]", ")", "\n", "self", ".", "lay3", "=", "torch", ".", "nn", ".", "Conv2d", "(", "inter_dims", "[", "1", "]", ",", "inter_dims", "[", "2", "]", ",", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "gn3", "=", "torch", ".", "nn", ".", "GroupNorm", "(", "8", ",", "inter_dims", "[", "2", "]", ")", "\n", "self", ".", "lay4", "=", "torch", ".", "nn", ".", "Conv2d", "(", "inter_dims", "[", "2", "]", ",", "inter_dims", "[", "3", "]", ",", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "gn4", "=", "torch", ".", "nn", ".", "GroupNorm", "(", "8", ",", "inter_dims", "[", "3", "]", ")", "\n", "self", ".", "lay5", "=", "torch", ".", "nn", ".", "Conv2d", "(", "inter_dims", "[", "3", "]", ",", "inter_dims", "[", "4", "]", ",", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "gn5", "=", "torch", ".", "nn", ".", "GroupNorm", "(", "8", ",", "inter_dims", "[", "4", "]", ")", "\n", "self", ".", "out_lay", "=", "torch", ".", "nn", ".", "Conv2d", "(", "inter_dims", "[", "4", "]", ",", "1", ",", "3", ",", "padding", "=", "1", ")", "\n", "\n", "self", ".", "dim", "=", "dim", "\n", "\n", "self", ".", "adapter1", "=", "torch", ".", "nn", ".", "Conv2d", "(", "fpn_dims", "[", "0", "]", ",", "inter_dims", "[", "1", "]", ",", "1", ")", "\n", "self", ".", "adapter2", "=", "torch", ".", "nn", ".", "Conv2d", "(", "fpn_dims", "[", "1", "]", ",", "inter_dims", "[", "2", "]", ",", "1", ")", "\n", "self", ".", "adapter3", "=", "torch", ".", "nn", ".", "Conv2d", "(", "fpn_dims", "[", "2", "]", ",", "inter_dims", "[", "3", "]", ",", "1", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_uniform_", "(", "m", ".", "weight", ",", "a", "=", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dddzg_up-detr.models.segmentation.MaskHeadSmallConv.forward": [[109, 145], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "segmentation.MaskHeadSmallConv.lay1", "segmentation.MaskHeadSmallConv.gn1", "torch.relu", "torch.relu", "torch.relu", "segmentation.MaskHeadSmallConv.lay2", "segmentation.MaskHeadSmallConv.gn2", "torch.relu", "torch.relu", "torch.relu", "segmentation.MaskHeadSmallConv.adapter1", "segmentation.MaskHeadSmallConv.lay3", "segmentation.MaskHeadSmallConv.gn3", "torch.relu", "torch.relu", "torch.relu", "segmentation.MaskHeadSmallConv.adapter2", "segmentation.MaskHeadSmallConv.lay4", "segmentation.MaskHeadSmallConv.gn4", "torch.relu", "torch.relu", "torch.relu", "segmentation.MaskHeadSmallConv.adapter3", "segmentation.MaskHeadSmallConv.lay5", "segmentation.MaskHeadSmallConv.gn5", "torch.relu", "torch.relu", "torch.relu", "segmentation.MaskHeadSmallConv.out_lay", "_expand.size", "segmentation.MaskHeadSmallConv.size", "segmentation._expand", "torch.interpolate", "torch.interpolate", "torch.interpolate", "_expand.size", "segmentation.MaskHeadSmallConv.size", "segmentation._expand", "torch.interpolate", "torch.interpolate", "torch.interpolate", "_expand.size", "segmentation.MaskHeadSmallConv.size", "segmentation._expand", "torch.interpolate", "torch.interpolate", "torch.interpolate", "segmentation._expand", "bbox_mask.flatten", "segmentation.MaskHeadSmallConv.size", "_expand.size", "segmentation.MaskHeadSmallConv.size", "_expand.size", "segmentation.MaskHeadSmallConv.size", "_expand.size"], "methods", ["home.repos.pwc.inspect_result.dddzg_up-detr.models.segmentation._expand", "home.repos.pwc.inspect_result.dddzg_up-detr.util.misc.interpolate", "home.repos.pwc.inspect_result.dddzg_up-detr.util.misc.interpolate", "home.repos.pwc.inspect_result.dddzg_up-detr.util.misc.interpolate", "home.repos.pwc.inspect_result.dddzg_up-detr.models.segmentation._expand", "home.repos.pwc.inspect_result.dddzg_up-detr.util.misc.interpolate", "home.repos.pwc.inspect_result.dddzg_up-detr.util.misc.interpolate", "home.repos.pwc.inspect_result.dddzg_up-detr.util.misc.interpolate", "home.repos.pwc.inspect_result.dddzg_up-detr.models.segmentation._expand", "home.repos.pwc.inspect_result.dddzg_up-detr.util.misc.interpolate", "home.repos.pwc.inspect_result.dddzg_up-detr.util.misc.interpolate", "home.repos.pwc.inspect_result.dddzg_up-detr.util.misc.interpolate", "home.repos.pwc.inspect_result.dddzg_up-detr.models.segmentation._expand"], ["", "", "", "def", "forward", "(", "self", ",", "x", ":", "Tensor", ",", "bbox_mask", ":", "Tensor", ",", "fpns", ":", "List", "[", "Tensor", "]", ")", ":", "\n", "        ", "x", "=", "torch", ".", "cat", "(", "[", "_expand", "(", "x", ",", "bbox_mask", ".", "shape", "[", "1", "]", ")", ",", "bbox_mask", ".", "flatten", "(", "0", ",", "1", ")", "]", ",", "1", ")", "\n", "\n", "x", "=", "self", ".", "lay1", "(", "x", ")", "\n", "x", "=", "self", ".", "gn1", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "lay2", "(", "x", ")", "\n", "x", "=", "self", ".", "gn2", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "\n", "cur_fpn", "=", "self", ".", "adapter1", "(", "fpns", "[", "0", "]", ")", "\n", "if", "cur_fpn", ".", "size", "(", "0", ")", "!=", "x", ".", "size", "(", "0", ")", ":", "\n", "            ", "cur_fpn", "=", "_expand", "(", "cur_fpn", ",", "x", ".", "size", "(", "0", ")", "//", "cur_fpn", ".", "size", "(", "0", ")", ")", "\n", "", "x", "=", "cur_fpn", "+", "F", ".", "interpolate", "(", "x", ",", "size", "=", "cur_fpn", ".", "shape", "[", "-", "2", ":", "]", ",", "mode", "=", "\"nearest\"", ")", "\n", "x", "=", "self", ".", "lay3", "(", "x", ")", "\n", "x", "=", "self", ".", "gn3", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "\n", "cur_fpn", "=", "self", ".", "adapter2", "(", "fpns", "[", "1", "]", ")", "\n", "if", "cur_fpn", ".", "size", "(", "0", ")", "!=", "x", ".", "size", "(", "0", ")", ":", "\n", "            ", "cur_fpn", "=", "_expand", "(", "cur_fpn", ",", "x", ".", "size", "(", "0", ")", "//", "cur_fpn", ".", "size", "(", "0", ")", ")", "\n", "", "x", "=", "cur_fpn", "+", "F", ".", "interpolate", "(", "x", ",", "size", "=", "cur_fpn", ".", "shape", "[", "-", "2", ":", "]", ",", "mode", "=", "\"nearest\"", ")", "\n", "x", "=", "self", ".", "lay4", "(", "x", ")", "\n", "x", "=", "self", ".", "gn4", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "\n", "cur_fpn", "=", "self", ".", "adapter3", "(", "fpns", "[", "2", "]", ")", "\n", "if", "cur_fpn", ".", "size", "(", "0", ")", "!=", "x", ".", "size", "(", "0", ")", ":", "\n", "            ", "cur_fpn", "=", "_expand", "(", "cur_fpn", ",", "x", ".", "size", "(", "0", ")", "//", "cur_fpn", ".", "size", "(", "0", ")", ")", "\n", "", "x", "=", "cur_fpn", "+", "F", ".", "interpolate", "(", "x", ",", "size", "=", "cur_fpn", ".", "shape", "[", "-", "2", ":", "]", ",", "mode", "=", "\"nearest\"", ")", "\n", "x", "=", "self", ".", "lay5", "(", "x", ")", "\n", "x", "=", "self", ".", "gn5", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "out_lay", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.dddzg_up-detr.models.segmentation.MHAttentionMap.__init__": [[150, 164], ["torch.Module.__init__", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.init.zeros_", "torch.init.zeros_", "torch.init.zeros_", "torch.init.zeros_", "torch.init.zeros_", "torch.init.zeros_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "float"], "methods", ["home.repos.pwc.inspect_result.dddzg_up-detr.models.backbone.Joiner.__init__"], ["def", "__init__", "(", "self", ",", "query_dim", ",", "hidden_dim", ",", "num_heads", ",", "dropout", "=", "0.0", ",", "bias", "=", "True", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_heads", "=", "num_heads", "\n", "self", ".", "hidden_dim", "=", "hidden_dim", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "\n", "self", ".", "q_linear", "=", "nn", ".", "Linear", "(", "query_dim", ",", "hidden_dim", ",", "bias", "=", "bias", ")", "\n", "self", ".", "k_linear", "=", "nn", ".", "Linear", "(", "query_dim", ",", "hidden_dim", ",", "bias", "=", "bias", ")", "\n", "\n", "nn", ".", "init", ".", "zeros_", "(", "self", ".", "k_linear", ".", "bias", ")", "\n", "nn", ".", "init", ".", "zeros_", "(", "self", ".", "q_linear", ".", "bias", ")", "\n", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "k_linear", ".", "weight", ")", "\n", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "q_linear", ".", "weight", ")", "\n", "self", ".", "normalize_fact", "=", "float", "(", "hidden_dim", "/", "self", ".", "num_heads", ")", "**", "-", "0.5", "\n", "\n"]], "home.repos.pwc.inspect_result.dddzg_up-detr.models.segmentation.MHAttentionMap.forward": [[165, 178], ["segmentation.MHAttentionMap.q_linear", "torch.conv2d", "torch.conv2d", "torch.conv2d", "segmentation.MHAttentionMap.view", "torch.conv2d.view", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.softmax().view", "torch.softmax().view", "torch.softmax().view", "segmentation.MHAttentionMap.dropout", "segmentation.MHAttentionMap.k_linear.weight.unsqueeze().unsqueeze", "segmentation.MHAttentionMap.masked_fill_", "segmentation.MHAttentionMap.size", "mask.unsqueeze().unsqueeze", "float", "torch.softmax", "torch.softmax", "torch.softmax", "segmentation.MHAttentionMap.k_linear.weight.unsqueeze", "segmentation.MHAttentionMap.flatten", "mask.unsqueeze"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "q", ",", "k", ",", "mask", ":", "Optional", "[", "Tensor", "]", "=", "None", ")", ":", "\n", "        ", "q", "=", "self", ".", "q_linear", "(", "q", ")", "\n", "k", "=", "F", ".", "conv2d", "(", "k", ",", "self", ".", "k_linear", ".", "weight", ".", "unsqueeze", "(", "-", "1", ")", ".", "unsqueeze", "(", "-", "1", ")", ",", "self", ".", "k_linear", ".", "bias", ")", "\n", "qh", "=", "q", ".", "view", "(", "q", ".", "shape", "[", "0", "]", ",", "q", ".", "shape", "[", "1", "]", ",", "self", ".", "num_heads", ",", "self", ".", "hidden_dim", "//", "self", ".", "num_heads", ")", "\n", "kh", "=", "k", ".", "view", "(", "k", ".", "shape", "[", "0", "]", ",", "self", ".", "num_heads", ",", "self", ".", "hidden_dim", "//", "self", ".", "num_heads", ",", "k", ".", "shape", "[", "-", "2", "]", ",", "k", ".", "shape", "[", "-", "1", "]", ")", "\n", "weights", "=", "torch", ".", "einsum", "(", "\"bqnc,bnchw->bqnhw\"", ",", "qh", "*", "self", ".", "normalize_fact", ",", "kh", ")", "\n", "\n", "if", "mask", "is", "not", "None", ":", "\n", "            ", "weights", ".", "masked_fill_", "(", "mask", ".", "unsqueeze", "(", "1", ")", ".", "unsqueeze", "(", "1", ")", ",", "float", "(", "\"-inf\"", ")", ")", "\n", "# fix a potenial bug: https://github.com/facebookresearch/detr/issues/247", "\n", "", "weights", "=", "F", ".", "softmax", "(", "weights", ".", "flatten", "(", "3", ")", ",", "dim", "=", "-", "1", ")", ".", "view", "(", "weights", ".", "size", "(", ")", ")", "\n", "weights", "=", "self", ".", "dropout", "(", "weights", ")", "\n", "return", "weights", "\n", "\n"]], "home.repos.pwc.inspect_result.dddzg_up-detr.models.segmentation.PostProcessSegm.__init__": [[227, 230], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.dddzg_up-detr.models.backbone.Joiner.__init__"], ["    ", "def", "__init__", "(", "self", ",", "threshold", "=", "0.5", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "threshold", "=", "threshold", "\n", "\n"]], "home.repos.pwc.inspect_result.dddzg_up-detr.models.segmentation.PostProcessSegm.forward": [[231, 247], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "[].tolist", "outputs[].squeeze", "torch.interpolate", "torch.interpolate", "torch.interpolate", "enumerate", "len", "len", "zip", "cur_mask[].unsqueeze", "torch.interpolate().byte", "torch.interpolate().byte", "torch.interpolate().byte", "max_target_sizes.max", "torch.interpolate.sigmoid", "torch.interpolate", "torch.interpolate", "torch.interpolate", "[].float", "tuple", "tt.tolist"], "methods", ["home.repos.pwc.inspect_result.dddzg_up-detr.util.misc.interpolate", "home.repos.pwc.inspect_result.dddzg_up-detr.util.misc.interpolate", "home.repos.pwc.inspect_result.dddzg_up-detr.util.misc.interpolate", "home.repos.pwc.inspect_result.dddzg_up-detr.util.misc.SmoothedValue.max", "home.repos.pwc.inspect_result.dddzg_up-detr.util.misc.interpolate", "home.repos.pwc.inspect_result.dddzg_up-detr.util.misc.interpolate", "home.repos.pwc.inspect_result.dddzg_up-detr.util.misc.interpolate"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "forward", "(", "self", ",", "results", ",", "outputs", ",", "orig_target_sizes", ",", "max_target_sizes", ")", ":", "\n", "        ", "assert", "len", "(", "orig_target_sizes", ")", "==", "len", "(", "max_target_sizes", ")", "\n", "max_h", ",", "max_w", "=", "max_target_sizes", ".", "max", "(", "0", ")", "[", "0", "]", ".", "tolist", "(", ")", "\n", "outputs_masks", "=", "outputs", "[", "\"pred_masks\"", "]", ".", "squeeze", "(", "2", ")", "\n", "outputs_masks", "=", "F", ".", "interpolate", "(", "outputs_masks", ",", "size", "=", "(", "max_h", ",", "max_w", ")", ",", "mode", "=", "\"bilinear\"", ",", "align_corners", "=", "False", ")", "\n", "outputs_masks", "=", "(", "outputs_masks", ".", "sigmoid", "(", ")", ">", "self", ".", "threshold", ")", ".", "cpu", "(", ")", "\n", "\n", "for", "i", ",", "(", "cur_mask", ",", "t", ",", "tt", ")", "in", "enumerate", "(", "zip", "(", "outputs_masks", ",", "max_target_sizes", ",", "orig_target_sizes", ")", ")", ":", "\n", "            ", "img_h", ",", "img_w", "=", "t", "[", "0", "]", ",", "t", "[", "1", "]", "\n", "results", "[", "i", "]", "[", "\"masks\"", "]", "=", "cur_mask", "[", ":", ",", ":", "img_h", ",", ":", "img_w", "]", ".", "unsqueeze", "(", "1", ")", "\n", "results", "[", "i", "]", "[", "\"masks\"", "]", "=", "F", ".", "interpolate", "(", "\n", "results", "[", "i", "]", "[", "\"masks\"", "]", ".", "float", "(", ")", ",", "size", "=", "tuple", "(", "tt", ".", "tolist", "(", ")", ")", ",", "mode", "=", "\"nearest\"", "\n", ")", ".", "byte", "(", ")", "\n", "\n", "", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.dddzg_up-detr.models.segmentation.PostProcessPanoptic.__init__": [[253, 263], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.dddzg_up-detr.models.backbone.Joiner.__init__"], ["def", "__init__", "(", "self", ",", "is_thing_map", ",", "threshold", "=", "0.85", ")", ":", "\n", "        ", "\"\"\"\n        Parameters:\n           is_thing_map: This is a whose keys are the class ids, and the values a boolean indicating whether\n                          the class is  a thing (True) or a stuff (False) class\n           threshold: confidence threshold: segments with confidence lower than this will be deleted\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "threshold", "=", "threshold", "\n", "self", ".", "is_thing_map", "=", "is_thing_map", "\n", "\n"]], "home.repos.pwc.inspect_result.dddzg_up-detr.models.segmentation.PostProcessPanoptic.forward": [[264, 372], ["zip", "len", "len", "len", "len", "len", "isinstance", "tuple", "cur_logits.softmax().max", "cur_logits.softmax().max", "util.misc.interpolate().squeeze", "util.box_cxcywh_to_xyxy", "cur_masks.flatten.flatten.flatten", "collections.defaultdict", "enumerate", "segmentation.PostProcessPanoptic.forward.get_ids_area"], "methods", ["home.repos.pwc.inspect_result.dddzg_up-detr.util.misc.SmoothedValue.max", "home.repos.pwc.inspect_result.dddzg_up-detr.util.misc.SmoothedValue.max", "home.repos.pwc.inspect_result.dddzg_up-detr.util.box_ops.box_cxcywh_to_xyxy"], ["", "def", "forward", "(", "self", ",", "outputs", ",", "processed_sizes", ",", "target_sizes", "=", "None", ")", ":", "\n", "        ", "\"\"\" This function computes the panoptic prediction from the model's predictions.\n        Parameters:\n            outputs: This is a dict coming directly from the model. See the model doc for the content.\n            processed_sizes: This is a list of tuples (or torch tensors) of sizes of the images that were passed to the\n                             model, ie the size after data augmentation but before batching.\n            target_sizes: This is a list of tuples (or torch tensors) corresponding to the requested final size\n                          of each prediction. If left to None, it will default to the processed_sizes\n            \"\"\"", "\n", "if", "target_sizes", "is", "None", ":", "\n", "            ", "target_sizes", "=", "processed_sizes", "\n", "", "assert", "len", "(", "processed_sizes", ")", "==", "len", "(", "target_sizes", ")", "\n", "out_logits", ",", "raw_masks", ",", "raw_boxes", "=", "outputs", "[", "\"pred_logits\"", "]", ",", "outputs", "[", "\"pred_masks\"", "]", ",", "outputs", "[", "\"pred_boxes\"", "]", "\n", "assert", "len", "(", "out_logits", ")", "==", "len", "(", "raw_masks", ")", "==", "len", "(", "target_sizes", ")", "\n", "preds", "=", "[", "]", "\n", "\n", "def", "to_tuple", "(", "tup", ")", ":", "\n", "            ", "if", "isinstance", "(", "tup", ",", "tuple", ")", ":", "\n", "                ", "return", "tup", "\n", "", "return", "tuple", "(", "tup", ".", "cpu", "(", ")", ".", "tolist", "(", ")", ")", "\n", "\n", "", "for", "cur_logits", ",", "cur_masks", ",", "cur_boxes", ",", "size", ",", "target_size", "in", "zip", "(", "\n", "out_logits", ",", "raw_masks", ",", "raw_boxes", ",", "processed_sizes", ",", "target_sizes", "\n", ")", ":", "\n", "# we filter empty queries and detection below threshold", "\n", "            ", "scores", ",", "labels", "=", "cur_logits", ".", "softmax", "(", "-", "1", ")", ".", "max", "(", "-", "1", ")", "\n", "keep", "=", "labels", ".", "ne", "(", "outputs", "[", "\"pred_logits\"", "]", ".", "shape", "[", "-", "1", "]", "-", "1", ")", "&", "(", "scores", ">", "self", ".", "threshold", ")", "\n", "cur_scores", ",", "cur_classes", "=", "cur_logits", ".", "softmax", "(", "-", "1", ")", ".", "max", "(", "-", "1", ")", "\n", "cur_scores", "=", "cur_scores", "[", "keep", "]", "\n", "cur_classes", "=", "cur_classes", "[", "keep", "]", "\n", "cur_masks", "=", "cur_masks", "[", "keep", "]", "\n", "cur_masks", "=", "interpolate", "(", "cur_masks", "[", ":", ",", "None", "]", ",", "to_tuple", "(", "size", ")", ",", "mode", "=", "\"bilinear\"", ")", ".", "squeeze", "(", "1", ")", "\n", "cur_boxes", "=", "box_ops", ".", "box_cxcywh_to_xyxy", "(", "cur_boxes", "[", "keep", "]", ")", "\n", "\n", "h", ",", "w", "=", "cur_masks", ".", "shape", "[", "-", "2", ":", "]", "\n", "assert", "len", "(", "cur_boxes", ")", "==", "len", "(", "cur_classes", ")", "\n", "\n", "# It may be that we have several predicted masks for the same stuff class.", "\n", "# In the following, we track the list of masks ids for each stuff class (they are merged later on)", "\n", "cur_masks", "=", "cur_masks", ".", "flatten", "(", "1", ")", "\n", "stuff_equiv_classes", "=", "defaultdict", "(", "lambda", ":", "[", "]", ")", "\n", "for", "k", ",", "label", "in", "enumerate", "(", "cur_classes", ")", ":", "\n", "                ", "if", "not", "self", ".", "is_thing_map", "[", "label", ".", "item", "(", ")", "]", ":", "\n", "                    ", "stuff_equiv_classes", "[", "label", ".", "item", "(", ")", "]", ".", "append", "(", "k", ")", "\n", "\n", "", "", "def", "get_ids_area", "(", "masks", ",", "scores", ",", "dedup", "=", "False", ")", ":", "\n", "# This helper function creates the final panoptic segmentation image", "\n", "# It also returns the area of the masks that appears on the image", "\n", "\n", "                ", "m_id", "=", "masks", ".", "transpose", "(", "0", ",", "1", ")", ".", "softmax", "(", "-", "1", ")", "\n", "\n", "if", "m_id", ".", "shape", "[", "-", "1", "]", "==", "0", ":", "\n", "# We didn't detect any mask :(", "\n", "                    ", "m_id", "=", "torch", ".", "zeros", "(", "(", "h", ",", "w", ")", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "m_id", ".", "device", ")", "\n", "", "else", ":", "\n", "                    ", "m_id", "=", "m_id", ".", "argmax", "(", "-", "1", ")", ".", "view", "(", "h", ",", "w", ")", "\n", "\n", "", "if", "dedup", ":", "\n", "# Merge the masks corresponding to the same stuff class", "\n", "                    ", "for", "equiv", "in", "stuff_equiv_classes", ".", "values", "(", ")", ":", "\n", "                        ", "if", "len", "(", "equiv", ")", ">", "1", ":", "\n", "                            ", "for", "eq_id", "in", "equiv", ":", "\n", "                                ", "m_id", ".", "masked_fill_", "(", "m_id", ".", "eq", "(", "eq_id", ")", ",", "equiv", "[", "0", "]", ")", "\n", "\n", "", "", "", "", "final_h", ",", "final_w", "=", "to_tuple", "(", "target_size", ")", "\n", "\n", "seg_img", "=", "Image", ".", "fromarray", "(", "id2rgb", "(", "m_id", ".", "view", "(", "h", ",", "w", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", ")", "\n", "seg_img", "=", "seg_img", ".", "resize", "(", "size", "=", "(", "final_w", ",", "final_h", ")", ",", "resample", "=", "Image", ".", "NEAREST", ")", "\n", "\n", "np_seg_img", "=", "(", "\n", "torch", ".", "ByteTensor", "(", "torch", ".", "ByteStorage", ".", "from_buffer", "(", "seg_img", ".", "tobytes", "(", ")", ")", ")", ".", "view", "(", "final_h", ",", "final_w", ",", "3", ")", ".", "numpy", "(", ")", "\n", ")", "\n", "m_id", "=", "torch", ".", "from_numpy", "(", "rgb2id", "(", "np_seg_img", ")", ")", "\n", "\n", "area", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "scores", ")", ")", ":", "\n", "                    ", "area", ".", "append", "(", "m_id", ".", "eq", "(", "i", ")", ".", "sum", "(", ")", ".", "item", "(", ")", ")", "\n", "", "return", "area", ",", "seg_img", "\n", "\n", "", "area", ",", "seg_img", "=", "get_ids_area", "(", "cur_masks", ",", "cur_scores", ",", "dedup", "=", "True", ")", "\n", "if", "cur_classes", ".", "numel", "(", ")", ">", "0", ":", "\n", "# We know filter empty masks as long as we find some", "\n", "                ", "while", "True", ":", "\n", "                    ", "filtered_small", "=", "torch", ".", "as_tensor", "(", "\n", "[", "area", "[", "i", "]", "<=", "4", "for", "i", ",", "c", "in", "enumerate", "(", "cur_classes", ")", "]", ",", "dtype", "=", "torch", ".", "bool", ",", "device", "=", "keep", ".", "device", "\n", ")", "\n", "if", "filtered_small", ".", "any", "(", ")", ".", "item", "(", ")", ":", "\n", "                        ", "cur_scores", "=", "cur_scores", "[", "~", "filtered_small", "]", "\n", "cur_classes", "=", "cur_classes", "[", "~", "filtered_small", "]", "\n", "cur_masks", "=", "cur_masks", "[", "~", "filtered_small", "]", "\n", "area", ",", "seg_img", "=", "get_ids_area", "(", "cur_masks", ",", "cur_scores", ")", "\n", "", "else", ":", "\n", "                        ", "break", "\n", "\n", "", "", "", "else", ":", "\n", "                ", "cur_classes", "=", "torch", ".", "ones", "(", "1", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "cur_classes", ".", "device", ")", "\n", "\n", "", "segments_info", "=", "[", "]", "\n", "for", "i", ",", "a", "in", "enumerate", "(", "area", ")", ":", "\n", "                ", "cat", "=", "cur_classes", "[", "i", "]", ".", "item", "(", ")", "\n", "segments_info", ".", "append", "(", "{", "\"id\"", ":", "i", ",", "\"isthing\"", ":", "self", ".", "is_thing_map", "[", "cat", "]", ",", "\"category_id\"", ":", "cat", ",", "\"area\"", ":", "a", "}", ")", "\n", "", "del", "cur_classes", "\n", "\n", "with", "io", ".", "BytesIO", "(", ")", "as", "out", ":", "\n", "                ", "seg_img", ".", "save", "(", "out", ",", "format", "=", "\"PNG\"", ")", "\n", "predictions", "=", "{", "\"png_string\"", ":", "out", ".", "getvalue", "(", ")", ",", "\"segments_info\"", ":", "segments_info", "}", "\n", "", "preds", ".", "append", "(", "predictions", ")", "\n", "", "return", "preds", "\n", "", "", ""]], "home.repos.pwc.inspect_result.dddzg_up-detr.models.segmentation._expand": [[72, 74], ["tensor.unsqueeze().repeat().flatten", "tensor.unsqueeze().repeat", "int", "tensor.unsqueeze"], "function", ["None"], ["", "", "def", "_expand", "(", "tensor", ",", "length", ":", "int", ")", ":", "\n", "    ", "return", "tensor", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "1", ",", "int", "(", "length", ")", ",", "1", ",", "1", ",", "1", ")", ".", "flatten", "(", "0", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dddzg_up-detr.models.segmentation.dice_loss": [[180, 196], ["inputs.flatten.sigmoid", "inputs.flatten.flatten", "inputs.flatten.sum", "targets.sum", "loss.sum"], "function", ["None"], ["", "", "def", "dice_loss", "(", "inputs", ",", "targets", ",", "num_boxes", ")", ":", "\n", "    ", "\"\"\"\n    Compute the DICE loss, similar to generalized IOU for masks\n    Args:\n        inputs: A float tensor of arbitrary shape.\n                The predictions for each example.\n        targets: A float tensor with the same shape as inputs. Stores the binary\n                 classification label for each element in inputs\n                (0 for the negative class and 1 for the positive class).\n    \"\"\"", "\n", "inputs", "=", "inputs", ".", "sigmoid", "(", ")", "\n", "inputs", "=", "inputs", ".", "flatten", "(", "1", ")", "\n", "numerator", "=", "2", "*", "(", "inputs", "*", "targets", ")", ".", "sum", "(", "1", ")", "\n", "denominator", "=", "inputs", ".", "sum", "(", "-", "1", ")", "+", "targets", ".", "sum", "(", "-", "1", ")", "\n", "loss", "=", "1", "-", "(", "numerator", "+", "1", ")", "/", "(", "denominator", "+", "1", ")", "\n", "return", "loss", ".", "sum", "(", ")", "/", "num_boxes", "\n", "\n"]], "home.repos.pwc.inspect_result.dddzg_up-detr.models.segmentation.sigmoid_focal_loss": [[198, 224], ["inputs.sigmoid", "torch.binary_cross_entropy_with_logits", "loss.mean().sum", "loss.mean"], "function", ["None"], ["", "def", "sigmoid_focal_loss", "(", "inputs", ",", "targets", ",", "num_boxes", ",", "alpha", ":", "float", "=", "0.25", ",", "gamma", ":", "float", "=", "2", ")", ":", "\n", "    ", "\"\"\"\n    Loss used in RetinaNet for dense detection: https://arxiv.org/abs/1708.02002.\n    Args:\n        inputs: A float tensor of arbitrary shape.\n                The predictions for each example.\n        targets: A float tensor with the same shape as inputs. Stores the binary\n                 classification label for each element in inputs\n                (0 for the negative class and 1 for the positive class).\n        alpha: (optional) Weighting factor in range (0,1) to balance\n                positive vs negative examples. Default = -1 (no weighting).\n        gamma: Exponent of the modulating factor (1 - p_t) to\n               balance easy vs hard examples.\n    Returns:\n        Loss tensor\n    \"\"\"", "\n", "prob", "=", "inputs", ".", "sigmoid", "(", ")", "\n", "ce_loss", "=", "F", ".", "binary_cross_entropy_with_logits", "(", "inputs", ",", "targets", ",", "reduction", "=", "\"none\"", ")", "\n", "p_t", "=", "prob", "*", "targets", "+", "(", "1", "-", "prob", ")", "*", "(", "1", "-", "targets", ")", "\n", "loss", "=", "ce_loss", "*", "(", "(", "1", "-", "p_t", ")", "**", "gamma", ")", "\n", "\n", "if", "alpha", ">=", "0", ":", "\n", "        ", "alpha_t", "=", "alpha", "*", "targets", "+", "(", "1", "-", "alpha", ")", "*", "(", "1", "-", "targets", ")", "\n", "loss", "=", "alpha_t", "*", "loss", "\n", "\n", "", "return", "loss", ".", "mean", "(", "1", ")", ".", "sum", "(", ")", "/", "num_boxes", "\n", "\n"]], "home.repos.pwc.inspect_result.dddzg_up-detr.models.matcher.HungarianMatcher.__init__": [[26, 39], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.dddzg_up-detr.models.backbone.Joiner.__init__"], ["def", "__init__", "(", "self", ",", "cost_class", ":", "float", "=", "1", ",", "cost_bbox", ":", "float", "=", "1", ",", "cost_giou", ":", "float", "=", "1", ")", ":", "\n", "        ", "\"\"\"Creates the matcher\n\n        Params:\n            cost_class: This is the relative weight of the classification error in the matching cost\n            cost_bbox: This is the relative weight of the L1 error of the bounding box coordinates in the matching cost\n            cost_giou: This is the relative weight of the giou loss of the bounding box in the matching cost\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "cost_class", "=", "cost_class", "\n", "self", ".", "cost_bbox", "=", "cost_bbox", "\n", "self", ".", "cost_giou", "=", "cost_giou", "\n", "assert", "cost_class", "!=", "0", "or", "cost_bbox", "!=", "0", "or", "cost_giou", "!=", "0", ",", "\"all costs cant be 0\"", "\n", "\n"]], "home.repos.pwc.inspect_result.dddzg_up-detr.models.matcher.HungarianMatcher.forward": [[40, 89], ["torch.no_grad", "outputs[].flatten().softmax", "outputs[].flatten", "torch.cat", "torch.cat", "torch.cdist", "C.view().cpu.view().cpu.view().cpu", "util.box_ops.generalized_box_iou", "len", "scipy.optimize.linear_sum_assignment", "outputs[].flatten", "util.box_ops.box_cxcywh_to_xyxy", "util.box_ops.box_cxcywh_to_xyxy", "C.view().cpu.view().cpu.view", "enumerate", "torch.as_tensor", "torch.as_tensor", "C.view().cpu.view().cpu.split"], "methods", ["home.repos.pwc.inspect_result.dddzg_up-detr.util.box_ops.generalized_box_iou", "home.repos.pwc.inspect_result.dddzg_up-detr.util.box_ops.box_cxcywh_to_xyxy", "home.repos.pwc.inspect_result.dddzg_up-detr.util.box_ops.box_cxcywh_to_xyxy"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "forward", "(", "self", ",", "outputs", ",", "targets", ")", ":", "\n", "        ", "\"\"\" Performs the matching\n\n        Params:\n            outputs: This is a dict that contains at least these entries:\n                 \"pred_logits\": Tensor of dim [batch_size, num_queries, num_classes] with the classification logits\n                 \"pred_boxes\": Tensor of dim [batch_size, num_queries, 4] with the predicted box coordinates\n\n            targets: This is a list of targets (len(targets) = batch_size), where each target is a dict containing:\n                 \"labels\": Tensor of dim [num_target_boxes] (where num_target_boxes is the number of ground-truth\n                           objects in the target) containing the class labels\n                 \"boxes\": Tensor of dim [num_target_boxes, 4] containing the target box coordinates\n\n        Returns:\n            A list of size batch_size, containing tuples of (index_i, index_j) where:\n                - index_i is the indices of the selected predictions (in order)\n                - index_j is the indices of the corresponding selected targets (in order)\n            For each batch element, it holds:\n                len(index_i) = len(index_j) = min(num_queries, num_target_boxes)\n        \"\"\"", "\n", "bs", ",", "num_queries", "=", "outputs", "[", "\"pred_logits\"", "]", ".", "shape", "[", ":", "2", "]", "\n", "\n", "# We flatten to compute the cost matrices in a batch", "\n", "out_prob", "=", "outputs", "[", "\"pred_logits\"", "]", ".", "flatten", "(", "0", ",", "1", ")", ".", "softmax", "(", "-", "1", ")", "# [batch_size * num_queries, num_classes]", "\n", "out_bbox", "=", "outputs", "[", "\"pred_boxes\"", "]", ".", "flatten", "(", "0", ",", "1", ")", "# [batch_size * num_queries, 4]", "\n", "\n", "# Also concat the target labels and boxes", "\n", "tgt_ids", "=", "torch", ".", "cat", "(", "[", "v", "[", "\"labels\"", "]", "for", "v", "in", "targets", "]", ")", "\n", "tgt_bbox", "=", "torch", ".", "cat", "(", "[", "v", "[", "\"boxes\"", "]", "for", "v", "in", "targets", "]", ")", "\n", "\n", "# Compute the classification cost. Contrary to the loss, we don't use the NLL,", "\n", "# but approximate it in 1 - proba[target class].", "\n", "# The 1 is a constant that doesn't change the matching, it can be ommitted.", "\n", "cost_class", "=", "-", "out_prob", "[", ":", ",", "tgt_ids", "]", "\n", "\n", "# Compute the L1 cost between boxes", "\n", "cost_bbox", "=", "torch", ".", "cdist", "(", "out_bbox", ",", "tgt_bbox", ",", "p", "=", "1", ")", "\n", "\n", "# Compute the giou cost betwen boxes", "\n", "cost_giou", "=", "-", "generalized_box_iou", "(", "box_cxcywh_to_xyxy", "(", "out_bbox", ")", ",", "box_cxcywh_to_xyxy", "(", "tgt_bbox", ")", ")", "\n", "\n", "# Final cost matrix", "\n", "C", "=", "self", ".", "cost_bbox", "*", "cost_bbox", "+", "self", ".", "cost_class", "*", "cost_class", "+", "self", ".", "cost_giou", "*", "cost_giou", "\n", "C", "=", "C", ".", "view", "(", "bs", ",", "num_queries", ",", "-", "1", ")", ".", "cpu", "(", ")", "\n", "\n", "sizes", "=", "[", "len", "(", "v", "[", "\"boxes\"", "]", ")", "for", "v", "in", "targets", "]", "\n", "indices", "=", "[", "linear_sum_assignment", "(", "c", "[", "i", "]", ")", "for", "i", ",", "c", "in", "enumerate", "(", "C", ".", "split", "(", "sizes", ",", "-", "1", ")", ")", "]", "\n", "return", "[", "(", "torch", ".", "as_tensor", "(", "i", ",", "dtype", "=", "torch", ".", "int64", ")", ",", "torch", ".", "as_tensor", "(", "j", ",", "dtype", "=", "torch", ".", "int64", ")", ")", "for", "i", ",", "j", "in", "indices", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.dddzg_up-detr.models.matcher.build_matcher": [[91, 93], ["matcher.HungarianMatcher"], "function", ["None"], ["", "", "def", "build_matcher", "(", "args", ")", ":", "\n", "    ", "return", "HungarianMatcher", "(", "cost_class", "=", "args", ".", "set_cost_class", ",", "cost_bbox", "=", "args", ".", "set_cost_bbox", ",", "cost_giou", "=", "args", ".", "set_cost_giou", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.dddzg_up-detr.models.updetr.UPDETR.__init__": [[19, 54], ["detr.DETR.__init__", "torch.nn.AdaptiveAvgPool2d", "torch.nn.Linear", "range", "models.detr.MLP", "torch.ones", "float"], "methods", ["home.repos.pwc.inspect_result.dddzg_up-detr.models.backbone.Joiner.__init__"], ["def", "__init__", "(", "self", ",", "backbone", ",", "transformer", ",", "num_classes", ",", "num_queries", ",", "aux_loss", "=", "False", ",", "\n", "feature_recon", "=", "True", ",", "query_shuffle", "=", "False", ",", "mask_ratio", "=", "0.1", ",", "num_patches", "=", "10", ")", ":", "\n", "        ", "\"\"\" Initializes the model.\n        Parameters:\n            backbone: torch module of the backbone to be used. See backbone.py\n            transformer: torch module of the transformer architecture. See transformer.py\n            num_classes: number of object classes\n            num_queries: number of object queries, ie detection slot. This is the maximal number of objects\n                         DETR can detect in a single image. For COCO, we recommend 100 queries.\n            aux_loss: True if auxiliary decoding losses (loss at each decoder layer) are to be used.\n            feature_recon: if set, feature reconstruction branch is to be used.\n            query_shuffle: if set, shuffle object query during the pre-training.\n            mask_ratio: mask ratio of query patches.\n            It masks some query patches during the pre-training, which is similar to Dropout.\n            num_patches: number of query patches, which is added to the decoder.\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", "backbone", ",", "transformer", ",", "num_classes", ",", "num_queries", ",", "aux_loss", ")", "\n", "hidden_dim", "=", "transformer", ".", "d_model", "\n", "self", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "1", ",", "1", ")", ")", "# pooling used for the query patch feature", "\n", "# align the patch feature dim to query patch dim.", "\n", "self", ".", "patch2query", "=", "nn", ".", "Linear", "(", "backbone", ".", "num_channels", ",", "hidden_dim", ")", "\n", "self", ".", "num_patches", "=", "num_patches", "\n", "self", ".", "mask_ratio", "=", "mask_ratio", "\n", "self", ".", "feature_recon", "=", "feature_recon", "\n", "if", "self", ".", "feature_recon", ":", "\n", "# align the transformer feature to the CNN feature, which is used for the feature reconstruction", "\n", "            ", "self", ".", "feature_align", "=", "MLP", "(", "hidden_dim", ",", "hidden_dim", ",", "backbone", ".", "num_channels", ",", "2", ")", "\n", "", "self", ".", "query_shuffle", "=", "query_shuffle", "\n", "assert", "num_queries", "%", "num_patches", "==", "0", "# for simplicity", "\n", "query_per_patch", "=", "num_queries", "//", "num_patches", "\n", "# the attention mask is fixed during the pre-training", "\n", "self", ".", "attention_mask", "=", "torch", ".", "ones", "(", "self", ".", "num_queries", ",", "self", ".", "num_queries", ")", "*", "float", "(", "'-inf'", ")", "\n", "for", "i", "in", "range", "(", "query_per_patch", ")", ":", "\n", "            ", "self", ".", "attention_mask", "[", "i", "*", "query_per_patch", ":", "(", "i", "+", "1", ")", "*", "query_per_patch", ",", "\n", "i", "*", "query_per_patch", ":", "(", "i", "+", "1", ")", "*", "query_per_patch", "]", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.dddzg_up-detr.models.updetr.UPDETR.forward": [[55, 129], ["isinstance", "updetr.UPDETR.backbone", "features[].decompose", "patches.flatten.flatten.size", "patches.flatten.flatten.flatten", "updetr.UPDETR.backbone", "updetr.UPDETR.avgpool().flatten", "updetr.UPDETR.patch2query().view().repeat_interleave().permute().contiguous", "updetr.UPDETR.class_embed", "updetr.UPDETR.bbox_embed().sigmoid", "util.misc.nested_tensor_from_tensor_list", "torch.randperm", "torch.arange", "updetr.UPDETR.feature_align", "updetr.UPDETR.avgpool", "updetr.UPDETR.patch2query().view().repeat_interleave().permute", "updetr.UPDETR.query_embed.weight[].unsqueeze().repeat", "updetr.UPDETR.transformer", "updetr.UPDETR.query_embed.weight[].unsqueeze().repeat", "updetr.UPDETR.transformer", "updetr.UPDETR.bbox_embed", "updetr.UPDETR._set_aux_loss", "super()._set_aux_loss", "updetr.UPDETR.input_proj", "updetr.UPDETR.attention_mask.to", "updetr.UPDETR.input_proj", "updetr.UPDETR.patch2query().view().repeat_interleave", "torch.rand", "updetr.UPDETR.query_embed.weight[].unsqueeze", "updetr.UPDETR.query_embed.weight[].unsqueeze", "updetr.UPDETR.attention_mask.to", "updetr.UPDETR.patch2query().view", "updetr.UPDETR.patch2query"], "methods", ["home.repos.pwc.inspect_result.dddzg_up-detr.util.misc.NestedTensor.decompose", "home.repos.pwc.inspect_result.dddzg_up-detr.util.misc.nested_tensor_from_tensor_list", "home.repos.pwc.inspect_result.dddzg_up-detr.models.detr.DETR._set_aux_loss", "home.repos.pwc.inspect_result.dddzg_up-detr.models.detr.DETR._set_aux_loss", "home.repos.pwc.inspect_result.dddzg_up-detr.util.misc.NestedTensor.to", "home.repos.pwc.inspect_result.dddzg_up-detr.util.misc.NestedTensor.to"], ["", "", "def", "forward", "(", "self", ",", "samples", ":", "NestedTensor", ",", "patches", ":", "torch", ".", "Tensor", ")", ":", "\n", "        ", "\"\"\"\u00a0The forward expects a NestedTensor samples and patches Tensor.\n            samples consists of:\n               - samples.tensor: batched images, of shape [batch_size x 3 x H x W]\n               - samples.mask: a binary mask of shape [batch_size x H x W], containing 1 on padded pixels\n            patches is a torch Tensor, of shape [batch_size x num_patches x 3 x SH x SW]\n            The size of patches are small than samples\n\n            It returns a dict with the following elements:\n               - \"pred_logits\": the classification logits (including no-object) for all queries.\n                                Shape= [batch_size x num_queries x (num_classes + 1)]\n               - \"pred_boxes\": The normalized boxes coordinates for all queries, represented as\n                               (center_x, center_y, height, width). These values are normalized in [0, 1],\n                               relative to the size of each individual image (disregarding possible padding).\n                               See PostProcess for information on how to retrieve the unnormalized bounding box.\n               - \"aux_outputs\": Optional, only returned when auxilary losses are activated. It is a list of\n                                dictionnaries containing the two above keys for each decoder layer.\n        \"\"\"", "\n", "batch_num_patches", "=", "patches", ".", "shape", "[", "1", "]", "\n", "if", "isinstance", "(", "samples", ",", "(", "list", ",", "torch", ".", "Tensor", ")", ")", ":", "\n", "            ", "samples", "=", "nested_tensor_from_tensor_list", "(", "samples", ")", "\n", "", "features", ",", "pos", "=", "self", ".", "backbone", "(", "samples", ")", "\n", "\n", "src", ",", "mask", "=", "features", "[", "-", "1", "]", ".", "decompose", "(", ")", "\n", "assert", "mask", "is", "not", "None", "\n", "\n", "bs", "=", "patches", ".", "size", "(", "0", ")", "\n", "patches", "=", "patches", ".", "flatten", "(", "0", ",", "1", ")", "\n", "patch_feature", "=", "self", ".", "backbone", "(", "patches", ")", "\n", "patch_feature_gt", "=", "self", ".", "avgpool", "(", "patch_feature", "[", "-", "1", "]", ")", ".", "flatten", "(", "1", ")", "\n", "\n", "# align the dim of patch feature with object query with a linear layer", "\n", "# pay attention to the difference between \"torch.repeat\" and \"torch.repeat_interleave\"", "\n", "# it converts the input from \"1,2,3,4\" to \"1,2,3,4,1,2,3,4,1,2,3,4\" by torch.repeat", "\n", "# \"1,2,3,4\" to \"1,1,1,2,2,2,3,3,3,4,4,4\" by torch.repeat_interleave, which is our target.", "\n", "patch_feature", "=", "self", ".", "patch2query", "(", "patch_feature_gt", ")", ".", "view", "(", "bs", ",", "batch_num_patches", ",", "-", "1", ")", ".", "repeat_interleave", "(", "self", ".", "num_queries", "//", "self", ".", "num_patches", ",", "dim", "=", "1", ")", ".", "permute", "(", "1", ",", "0", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "\n", "# if object query shuffle, we shuffle the index of object query embedding,", "\n", "# which simulate to adding patch feature to object query randomly.", "\n", "idx", "=", "torch", ".", "randperm", "(", "self", ".", "num_queries", ")", "if", "self", ".", "query_shuffle", "else", "torch", ".", "arange", "(", "self", ".", "num_queries", ")", "\n", "\n", "if", "self", ".", "training", ":", "\n", "# for training, it uses fixed number of query patches.", "\n", "            ", "mask_query_patch", "=", "(", "torch", ".", "rand", "(", "self", ".", "num_queries", ",", "bs", ",", "1", ",", "device", "=", "patches", ".", "device", ")", ">", "self", ".", "mask_ratio", ")", ".", "float", "(", ")", "\n", "# mask some query patch and add query embedding", "\n", "patch_feature", "=", "patch_feature", "*", "mask_query_patch", "+", "self", ".", "query_embed", ".", "weight", "[", "idx", ",", ":", "]", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "1", ",", "bs", ",", "1", ")", "\n", "hs", "=", "self", ".", "transformer", "(", "\n", "self", ".", "input_proj", "(", "src", ")", ",", "mask", ",", "patch_feature", ",", "pos", "[", "-", "1", "]", ",", "self", ".", "attention_mask", ".", "to", "(", "patch_feature", ".", "device", ")", ")", "[", "0", "]", "\n", "", "else", ":", "\n", "            ", "num_queries", "=", "batch_num_patches", "*", "self", ".", "num_queries", "//", "self", ".", "num_patches", "\n", "# for test, it supports x query patches, where x<=self.num_queries.", "\n", "patch_feature", "=", "patch_feature", "+", "self", ".", "query_embed", ".", "weight", "[", ":", "num_queries", ",", ":", "]", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "1", ",", "bs", ",", "1", ")", "\n", "hs", "=", "self", ".", "transformer", "(", "\n", "self", ".", "input_proj", "(", "src", ")", ",", "mask", ",", "patch_feature", ",", "pos", "[", "-", "1", "]", ",", "self", ".", "attention_mask", ".", "to", "(", "patch_feature", ".", "device", ")", "[", ":", "num_queries", ",", ":", "num_queries", "]", ")", "[", "0", "]", "\n", "\n", "", "outputs_class", "=", "self", ".", "class_embed", "(", "hs", ")", "\n", "outputs_coord", "=", "self", ".", "bbox_embed", "(", "hs", ")", ".", "sigmoid", "(", ")", "\n", "if", "self", ".", "feature_recon", ":", "\n", "            ", "outputs_feature", "=", "self", ".", "feature_align", "(", "hs", ")", "\n", "out", "=", "{", "'pred_logits'", ":", "outputs_class", "[", "-", "1", "]", ",", "'pred_feature'", ":", "outputs_feature", "[", "-", "1", "]", ",", "\n", "'gt_feature'", ":", "patch_feature_gt", ",", "\n", "'pred_boxes'", ":", "outputs_coord", "[", "-", "1", "]", "}", "\n", "if", "self", ".", "aux_loss", ":", "\n", "                ", "out", "[", "'aux_outputs'", "]", "=", "self", ".", "_set_aux_loss", "(", "outputs_class", ",", "outputs_coord", ",", "outputs_feature", ",", "patch_feature_gt", ")", "\n", "", "", "else", ":", "\n", "            ", "out", "=", "{", "'pred_logits'", ":", "outputs_class", "[", "-", "1", "]", ",", "'pred_boxes'", ":", "outputs_coord", "[", "-", "1", "]", "}", "\n", "if", "self", ".", "aux_loss", ":", "\n", "                ", "out", "[", "'aux_outputs'", "]", "=", "super", "(", ")", ".", "_set_aux_loss", "(", "outputs_class", ",", "outputs_coord", ")", "# use detr func", "\n", "", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.dddzg_up-detr.models.updetr.UPDETR._set_aux_loss": [[130, 137], ["zip"], "methods", ["None"], ["", "@", "torch", ".", "jit", ".", "unused", "\n", "def", "_set_aux_loss", "(", "self", ",", "outputs_class", ",", "outputs_coord", ",", "outputs_feature", ",", "backbone_output", ")", ":", "\n", "# different from _set_aux_loss_base, it has extra feature reconstruction branch", "\n", "# The \"ground truth\" of the feature reconstruction is constructed during the model forward", "\n", "# So, we name them as 'gt_feature', which is put with 'pred_feature' together.", "\n", "        ", "return", "[", "{", "'pred_logits'", ":", "a", ",", "'pred_boxes'", ":", "b", ",", "'pred_feature'", ":", "c", ",", "'gt_feature'", ":", "backbone_output", "}", "\n", "for", "a", ",", "b", ",", "c", "in", "zip", "(", "outputs_class", "[", ":", "-", "1", "]", ",", "outputs_coord", "[", ":", "-", "1", "]", ",", "outputs_feature", "[", ":", "-", "1", "]", ")", "]", "\n", "", "", ""]], "home.repos.pwc.inspect_result.dddzg_up-detr.models.detr.DETR.__init__": [[26, 46], ["torch.nn.Module.__init__", "torch.nn.Linear", "torch.nn.Linear", "detr.MLP", "torch.nn.Embedding", "torch.nn.Embedding", "torch.nn.Conv2d", "torch.nn.Conv2d"], "methods", ["home.repos.pwc.inspect_result.dddzg_up-detr.models.backbone.Joiner.__init__"], ["def", "__init__", "(", "self", ",", "backbone", ",", "transformer", ",", "num_classes", ",", "num_queries", ",", "aux_loss", "=", "False", ")", ":", "\n", "        ", "\"\"\" Initializes the model.\n        Parameters:\n            backbone: torch module of the backbone to be used. See backbone.py\n            transformer: torch module of the transformer architecture. See transformer.py\n            num_classes: number of object classes\n            num_queries: number of object queries, ie detection slot. This is the maximal number of objects\n                         DETR can detect in a single image. For COCO, we recommend 100 queries.\n            aux_loss: True if auxiliary decoding losses (loss at each decoder layer) are to be used.\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_queries", "=", "num_queries", "\n", "self", ".", "transformer", "=", "transformer", "\n", "hidden_dim", "=", "transformer", ".", "d_model", "\n", "self", ".", "class_embed", "=", "nn", ".", "Linear", "(", "hidden_dim", ",", "num_classes", "+", "1", ")", "\n", "self", ".", "bbox_embed", "=", "MLP", "(", "hidden_dim", ",", "hidden_dim", ",", "4", ",", "3", ")", "\n", "self", ".", "query_embed", "=", "nn", ".", "Embedding", "(", "num_queries", ",", "hidden_dim", ")", "\n", "self", ".", "input_proj", "=", "nn", ".", "Conv2d", "(", "backbone", ".", "num_channels", ",", "hidden_dim", ",", "kernel_size", "=", "1", ")", "\n", "self", ".", "backbone", "=", "backbone", "\n", "self", ".", "aux_loss", "=", "aux_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.dddzg_up-detr.models.detr.DETR.forward": [[47, 79], ["isinstance", "detr.DETR.backbone", "features[].decompose", "detr.DETR.class_embed", "detr.DETR.bbox_embed().sigmoid", "util.misc.nested_tensor_from_tensor_list", "detr.DETR.transformer", "detr.DETR._set_aux_loss", "detr.DETR.input_proj", "detr.DETR.query_embed.weight.unsqueeze().repeat", "detr.DETR.bbox_embed", "detr.DETR.query_embed.weight.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.dddzg_up-detr.util.misc.NestedTensor.decompose", "home.repos.pwc.inspect_result.dddzg_up-detr.util.misc.nested_tensor_from_tensor_list", "home.repos.pwc.inspect_result.dddzg_up-detr.models.detr.DETR._set_aux_loss"], ["", "def", "forward", "(", "self", ",", "samples", ":", "NestedTensor", ")", ":", "\n", "        ", "\"\"\"\u00a0The forward expects a NestedTensor, which consists of:\n               - samples.tensor: batched images, of shape [batch_size x 3 x H x W]\n               - samples.mask: a binary mask of shape [batch_size x H x W], containing 1 on padded pixels\n\n            It returns a dict with the following elements:\n               - \"pred_logits\": the classification logits (including no-object) for all queries.\n                                Shape= [batch_size x num_queries x (num_classes + 1)]\n               - \"pred_boxes\": The normalized boxes coordinates for all queries, represented as\n                               (center_x, center_y, height, width). These values are normalized in [0, 1],\n                               relative to the size of each individual image (disregarding possible padding).\n                               See PostProcess for information on how to retrieve the unnormalized bounding box.\n               - \"aux_outputs\": Optional, only returned when auxilary losses are activated. It is a list of\n                                dictionnaries containing the two above keys for each decoder layer.\n        \"\"\"", "\n", "\n", "if", "isinstance", "(", "samples", ",", "(", "list", ",", "torch", ".", "Tensor", ")", ")", ":", "\n", "            ", "samples", "=", "nested_tensor_from_tensor_list", "(", "samples", ")", "\n", "", "features", ",", "pos", "=", "self", ".", "backbone", "(", "samples", ")", "\n", "\n", "src", ",", "mask", "=", "features", "[", "-", "1", "]", ".", "decompose", "(", ")", "\n", "assert", "mask", "is", "not", "None", "\n", "bs", "=", "src", ".", "shape", "[", "0", "]", "\n", "# to align with UP-DETR, we add self.query_embed.weight.unsqueeze(1).repeat(1, bs, 1) here.", "\n", "hs", "=", "self", ".", "transformer", "(", "self", ".", "input_proj", "(", "src", ")", ",", "mask", ",", "self", ".", "query_embed", ".", "weight", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "1", ",", "bs", ",", "1", ")", ",", "pos", "[", "-", "1", "]", ")", "[", "0", "]", "\n", "\n", "outputs_class", "=", "self", ".", "class_embed", "(", "hs", ")", "\n", "outputs_coord", "=", "self", ".", "bbox_embed", "(", "hs", ")", ".", "sigmoid", "(", ")", "\n", "out", "=", "{", "'pred_logits'", ":", "outputs_class", "[", "-", "1", "]", ",", "'pred_boxes'", ":", "outputs_coord", "[", "-", "1", "]", "}", "\n", "if", "self", ".", "aux_loss", ":", "\n", "            ", "out", "[", "'aux_outputs'", "]", "=", "self", ".", "_set_aux_loss", "(", "outputs_class", ",", "outputs_coord", ")", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.dddzg_up-detr.models.detr.DETR._set_aux_loss": [[80, 87], ["zip"], "methods", ["None"], ["", "@", "torch", ".", "jit", ".", "unused", "\n", "def", "_set_aux_loss", "(", "self", ",", "outputs_class", ",", "outputs_coord", ")", ":", "\n", "# this is a workaround to make torchscript happy, as torchscript", "\n", "# doesn't support dictionary with non-homogeneous values, such", "\n", "# as a dict having both a Tensor and a list.", "\n", "        ", "return", "[", "{", "'pred_logits'", ":", "a", ",", "'pred_boxes'", ":", "b", "}", "\n", "for", "a", ",", "b", "in", "zip", "(", "outputs_class", "[", ":", "-", "1", "]", ",", "outputs_coord", "[", ":", "-", "1", "]", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.dddzg_up-detr.models.detr.SetCriterion.__init__": [[96, 114], ["torch.nn.Module.__init__", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "detr.SetCriterion.register_buffer"], "methods", ["home.repos.pwc.inspect_result.dddzg_up-detr.models.backbone.Joiner.__init__"], ["def", "__init__", "(", "self", ",", "num_classes", ",", "matcher", ",", "weight_dict", ",", "eos_coef", ",", "losses", ")", ":", "\n", "        ", "\"\"\" Create the criterion.\n        Parameters:\n            num_classes: number of object categories, omitting the special no-object category\n            matcher: module able to compute a matching between targets and proposals\n            weight_dict: dict containing as key the names of the losses and as values their relative weight.\n            eos_coef: relative classification weight applied to the no-object category\n            losses: list of all the losses to be applied. See get_loss for list of available losses.\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "matcher", "=", "matcher", "\n", "self", ".", "weight_dict", "=", "weight_dict", "\n", "self", ".", "eos_coef", "=", "eos_coef", "\n", "self", ".", "losses", "=", "losses", "\n", "empty_weight", "=", "torch", ".", "ones", "(", "self", ".", "num_classes", "+", "1", ")", "\n", "empty_weight", "[", "-", "1", "]", "=", "self", ".", "eos_coef", "\n", "self", ".", "register_buffer", "(", "'empty_weight'", ",", "empty_weight", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dddzg_up-detr.models.detr.SetCriterion.loss_labels": [[115, 135], ["detr.SetCriterion._get_src_permutation_idx", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.full", "torch.full", "torch.full", "torch.full", "torch.cross_entropy", "torch.cross_entropy", "src_logits.transpose", "zip", "util.misc.accuracy"], "methods", ["home.repos.pwc.inspect_result.dddzg_up-detr.models.detr.SetCriterion._get_src_permutation_idx", "home.repos.pwc.inspect_result.dddzg_up-detr.util.misc.accuracy"], ["", "def", "loss_labels", "(", "self", ",", "outputs", ",", "targets", ",", "indices", ",", "num_boxes", ",", "log", "=", "True", ")", ":", "\n", "        ", "\"\"\"Classification loss (NLL)\n        targets dicts must contain the key \"labels\" containing a tensor of dim [nb_target_boxes]\n        \"\"\"", "\n", "assert", "'pred_logits'", "in", "outputs", "\n", "src_logits", "=", "outputs", "[", "'pred_logits'", "]", "\n", "\n", "idx", "=", "self", ".", "_get_src_permutation_idx", "(", "indices", ")", "\n", "target_classes_o", "=", "torch", ".", "cat", "(", "[", "t", "[", "\"labels\"", "]", "[", "J", "]", "for", "t", ",", "(", "_", ",", "J", ")", "in", "zip", "(", "targets", ",", "indices", ")", "]", ")", "\n", "target_classes", "=", "torch", ".", "full", "(", "src_logits", ".", "shape", "[", ":", "2", "]", ",", "self", ".", "num_classes", ",", "\n", "dtype", "=", "torch", ".", "int64", ",", "device", "=", "src_logits", ".", "device", ")", "\n", "target_classes", "[", "idx", "]", "=", "target_classes_o", "\n", "\n", "loss_ce", "=", "F", ".", "cross_entropy", "(", "src_logits", ".", "transpose", "(", "1", ",", "2", ")", ",", "target_classes", ",", "self", ".", "empty_weight", ")", "\n", "losses", "=", "{", "'loss_ce'", ":", "loss_ce", "}", "\n", "\n", "if", "log", ":", "\n", "# TODO this should probably be a separate loss, not hacked in this one here", "\n", "            ", "losses", "[", "'class_error'", "]", "=", "100", "-", "accuracy", "(", "src_logits", "[", "idx", "]", ",", "target_classes_o", ")", "[", "0", "]", "\n", "", "return", "losses", "\n", "\n"]], "home.repos.pwc.inspect_result.dddzg_up-detr.models.detr.SetCriterion.loss_feature": [[136, 155], ["detr.SetCriterion._get_src_permutation_idx", "len", "torch.nn.functional.normalize.view", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.mse_loss", "torch.mse_loss", "torch.mse_loss.sum", "zip"], "methods", ["home.repos.pwc.inspect_result.dddzg_up-detr.models.detr.SetCriterion._get_src_permutation_idx"], ["", "def", "loss_feature", "(", "self", ",", "outputs", ",", "targets", ",", "indices", ",", "num_boxes", ")", ":", "\n", "        ", "\"\"\"Compute the mse loss between normalized features.\n        \"\"\"", "\n", "target_feature", "=", "outputs", "[", "'gt_feature'", "]", "\n", "idx", "=", "self", ".", "_get_src_permutation_idx", "(", "indices", ")", "\n", "batch_size", "=", "len", "(", "indices", ")", "\n", "target_feature", "=", "target_feature", ".", "view", "(", "batch_size", ",", "target_feature", ".", "shape", "[", "0", "]", "//", "batch_size", ",", "-", "1", ")", "\n", "\n", "src_feature", "=", "outputs", "[", "'pred_feature'", "]", "[", "idx", "]", "\n", "target_feature", "=", "torch", ".", "cat", "(", "[", "t", "[", "i", "]", "for", "t", ",", "(", "_", ",", "i", ")", "in", "zip", "(", "target_feature", ",", "indices", ")", "]", ",", "dim", "=", "0", ")", "\n", "\n", "# l2 normalize the feature", "\n", "src_feature", "=", "nn", ".", "functional", ".", "normalize", "(", "src_feature", ",", "dim", "=", "1", ")", "\n", "target_feature", "=", "nn", ".", "functional", ".", "normalize", "(", "target_feature", ",", "dim", "=", "1", ")", "\n", "\n", "loss_feature", "=", "F", ".", "mse_loss", "(", "src_feature", ",", "target_feature", ",", "reduction", "=", "'none'", ")", "\n", "losses", "=", "{", "'loss_feature'", ":", "loss_feature", ".", "sum", "(", ")", "/", "num_boxes", "}", "\n", "\n", "return", "losses", "\n", "\n"]], "home.repos.pwc.inspect_result.dddzg_up-detr.models.detr.SetCriterion.loss_cardinality": [[156, 169], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.l1_loss", "torch.l1_loss", "card_pred.float", "torch.as_tensor.float", "torch.as_tensor.float", "len", "pred_logits.argmax"], "methods", ["None"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "loss_cardinality", "(", "self", ",", "outputs", ",", "targets", ",", "indices", ",", "num_boxes", ")", ":", "\n", "        ", "\"\"\" Compute the cardinality error, ie the absolute error in the number of predicted non-empty boxes\n        This is not really a loss, it is intended for logging purposes only. It doesn't propagate gradients\n        \"\"\"", "\n", "pred_logits", "=", "outputs", "[", "'pred_logits'", "]", "\n", "device", "=", "pred_logits", ".", "device", "\n", "tgt_lengths", "=", "torch", ".", "as_tensor", "(", "[", "len", "(", "v", "[", "\"labels\"", "]", ")", "for", "v", "in", "targets", "]", ",", "device", "=", "device", ")", "\n", "# Count the number of predictions that are NOT \"no-object\" (which is the last class)", "\n", "card_pred", "=", "(", "pred_logits", ".", "argmax", "(", "-", "1", ")", "!=", "pred_logits", ".", "shape", "[", "-", "1", "]", "-", "1", ")", ".", "sum", "(", "1", ")", "\n", "card_err", "=", "F", ".", "l1_loss", "(", "card_pred", ".", "float", "(", ")", ",", "tgt_lengths", ".", "float", "(", ")", ")", "\n", "losses", "=", "{", "'cardinality_error'", ":", "card_err", "}", "\n", "return", "losses", "\n", "\n"]], "home.repos.pwc.inspect_result.dddzg_up-detr.models.detr.SetCriterion.loss_boxes": [[170, 190], ["detr.SetCriterion._get_src_permutation_idx", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.l1_loss", "torch.l1_loss", "torch.l1_loss.sum", "torch.diag", "torch.diag", "torch.diag", "torch.diag", "loss_giou.sum", "util.box_ops.generalized_box_iou", "zip", "util.box_ops.box_cxcywh_to_xyxy", "util.box_ops.box_cxcywh_to_xyxy"], "methods", ["home.repos.pwc.inspect_result.dddzg_up-detr.models.detr.SetCriterion._get_src_permutation_idx", "home.repos.pwc.inspect_result.dddzg_up-detr.util.box_ops.generalized_box_iou", "home.repos.pwc.inspect_result.dddzg_up-detr.util.box_ops.box_cxcywh_to_xyxy", "home.repos.pwc.inspect_result.dddzg_up-detr.util.box_ops.box_cxcywh_to_xyxy"], ["", "def", "loss_boxes", "(", "self", ",", "outputs", ",", "targets", ",", "indices", ",", "num_boxes", ")", ":", "\n", "        ", "\"\"\"Compute the losses related to the bounding boxes, the L1 regression loss and the GIoU loss\n           targets dicts must contain the key \"boxes\" containing a tensor of dim [nb_target_boxes, 4]\n           The target boxes are expected in format (center_x, center_y, w, h), normalized by the image size.\n        \"\"\"", "\n", "assert", "'pred_boxes'", "in", "outputs", "\n", "idx", "=", "self", ".", "_get_src_permutation_idx", "(", "indices", ")", "\n", "src_boxes", "=", "outputs", "[", "'pred_boxes'", "]", "[", "idx", "]", "\n", "target_boxes", "=", "torch", ".", "cat", "(", "[", "t", "[", "'boxes'", "]", "[", "i", "]", "for", "t", ",", "(", "_", ",", "i", ")", "in", "zip", "(", "targets", ",", "indices", ")", "]", ",", "dim", "=", "0", ")", "\n", "\n", "loss_bbox", "=", "F", ".", "l1_loss", "(", "src_boxes", ",", "target_boxes", ",", "reduction", "=", "'none'", ")", "\n", "\n", "losses", "=", "{", "}", "\n", "losses", "[", "'loss_bbox'", "]", "=", "loss_bbox", ".", "sum", "(", ")", "/", "num_boxes", "\n", "\n", "loss_giou", "=", "1", "-", "torch", ".", "diag", "(", "box_ops", ".", "generalized_box_iou", "(", "\n", "box_ops", ".", "box_cxcywh_to_xyxy", "(", "src_boxes", ")", ",", "\n", "box_ops", ".", "box_cxcywh_to_xyxy", "(", "target_boxes", ")", ")", ")", "\n", "losses", "[", "'loss_giou'", "]", "=", "loss_giou", ".", "sum", "(", ")", "/", "num_boxes", "\n", "return", "losses", "\n", "\n"]], "home.repos.pwc.inspect_result.dddzg_up-detr.models.detr.SetCriterion.loss_masks": [[191, 219], ["detr.SetCriterion._get_src_permutation_idx", "detr.SetCriterion._get_tgt_permutation_idx", "util.misc.nested_tensor_from_tensor_list().decompose", "target_masks.view.view.to", "util.misc.interpolate", "src_masks[].flatten", "target_masks.view.view.flatten", "target_masks.view.view.view", "segmentation.sigmoid_focal_loss", "segmentation.dice_loss", "util.misc.nested_tensor_from_tensor_list"], "methods", ["home.repos.pwc.inspect_result.dddzg_up-detr.models.detr.SetCriterion._get_src_permutation_idx", "home.repos.pwc.inspect_result.dddzg_up-detr.models.detr.SetCriterion._get_tgt_permutation_idx", "home.repos.pwc.inspect_result.dddzg_up-detr.util.misc.NestedTensor.decompose", "home.repos.pwc.inspect_result.dddzg_up-detr.util.misc.NestedTensor.to", "home.repos.pwc.inspect_result.dddzg_up-detr.util.misc.interpolate", "home.repos.pwc.inspect_result.dddzg_up-detr.models.segmentation.sigmoid_focal_loss", "home.repos.pwc.inspect_result.dddzg_up-detr.models.segmentation.dice_loss", "home.repos.pwc.inspect_result.dddzg_up-detr.util.misc.nested_tensor_from_tensor_list"], ["", "def", "loss_masks", "(", "self", ",", "outputs", ",", "targets", ",", "indices", ",", "num_boxes", ")", ":", "\n", "        ", "\"\"\"Compute the losses related to the masks: the focal loss and the dice loss.\n           targets dicts must contain the key \"masks\" containing a tensor of dim [nb_target_boxes, h, w]\n        \"\"\"", "\n", "assert", "\"pred_masks\"", "in", "outputs", "\n", "\n", "src_idx", "=", "self", ".", "_get_src_permutation_idx", "(", "indices", ")", "\n", "tgt_idx", "=", "self", ".", "_get_tgt_permutation_idx", "(", "indices", ")", "\n", "src_masks", "=", "outputs", "[", "\"pred_masks\"", "]", "\n", "src_masks", "=", "src_masks", "[", "src_idx", "]", "\n", "masks", "=", "[", "t", "[", "\"masks\"", "]", "for", "t", "in", "targets", "]", "\n", "# TODO use valid to mask invalid areas due to padding in loss", "\n", "target_masks", ",", "valid", "=", "nested_tensor_from_tensor_list", "(", "masks", ")", ".", "decompose", "(", ")", "\n", "target_masks", "=", "target_masks", ".", "to", "(", "src_masks", ")", "\n", "target_masks", "=", "target_masks", "[", "tgt_idx", "]", "\n", "\n", "# upsample predictions to the target size", "\n", "src_masks", "=", "interpolate", "(", "src_masks", "[", ":", ",", "None", "]", ",", "size", "=", "target_masks", ".", "shape", "[", "-", "2", ":", "]", ",", "\n", "mode", "=", "\"bilinear\"", ",", "align_corners", "=", "False", ")", "\n", "src_masks", "=", "src_masks", "[", ":", ",", "0", "]", ".", "flatten", "(", "1", ")", "\n", "\n", "target_masks", "=", "target_masks", ".", "flatten", "(", "1", ")", "\n", "target_masks", "=", "target_masks", ".", "view", "(", "src_masks", ".", "shape", ")", "\n", "losses", "=", "{", "\n", "\"loss_mask\"", ":", "sigmoid_focal_loss", "(", "src_masks", ",", "target_masks", ",", "num_boxes", ")", ",", "\n", "\"loss_dice\"", ":", "dice_loss", "(", "src_masks", ",", "target_masks", ",", "num_boxes", ")", ",", "\n", "}", "\n", "return", "losses", "\n", "\n"]], "home.repos.pwc.inspect_result.dddzg_up-detr.models.detr.SetCriterion._get_src_permutation_idx": [[220, 225], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like", "enumerate"], "methods", ["None"], ["", "def", "_get_src_permutation_idx", "(", "self", ",", "indices", ")", ":", "\n", "# permute predictions following indices", "\n", "        ", "batch_idx", "=", "torch", ".", "cat", "(", "[", "torch", ".", "full_like", "(", "src", ",", "i", ")", "for", "i", ",", "(", "src", ",", "_", ")", "in", "enumerate", "(", "indices", ")", "]", ")", "\n", "src_idx", "=", "torch", ".", "cat", "(", "[", "src", "for", "(", "src", ",", "_", ")", "in", "indices", "]", ")", "\n", "return", "batch_idx", ",", "src_idx", "\n", "\n"]], "home.repos.pwc.inspect_result.dddzg_up-detr.models.detr.SetCriterion._get_tgt_permutation_idx": [[226, 231], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like", "enumerate"], "methods", ["None"], ["", "def", "_get_tgt_permutation_idx", "(", "self", ",", "indices", ")", ":", "\n", "# permute targets following indices", "\n", "        ", "batch_idx", "=", "torch", ".", "cat", "(", "[", "torch", ".", "full_like", "(", "tgt", ",", "i", ")", "for", "i", ",", "(", "_", ",", "tgt", ")", "in", "enumerate", "(", "indices", ")", "]", ")", "\n", "tgt_idx", "=", "torch", ".", "cat", "(", "[", "tgt", "for", "(", "_", ",", "tgt", ")", "in", "indices", "]", ")", "\n", "return", "batch_idx", ",", "tgt_idx", "\n", "\n"]], "home.repos.pwc.inspect_result.dddzg_up-detr.models.detr.SetCriterion.get_loss": [[232, 242], ["None"], "methods", ["None"], ["", "def", "get_loss", "(", "self", ",", "loss", ",", "outputs", ",", "targets", ",", "indices", ",", "num_boxes", ",", "**", "kwargs", ")", ":", "\n", "        ", "loss_map", "=", "{", "\n", "'labels'", ":", "self", ".", "loss_labels", ",", "\n", "'cardinality'", ":", "self", ".", "loss_cardinality", ",", "\n", "'boxes'", ":", "self", ".", "loss_boxes", ",", "\n", "'masks'", ":", "self", ".", "loss_masks", ",", "\n", "'feature'", ":", "self", ".", "loss_feature", "# loss for feature reconstruction", "\n", "}", "\n", "assert", "loss", "in", "loss_map", ",", "f'do you really want to compute {loss} loss?'", "\n", "return", "loss_map", "[", "loss", "]", "(", "outputs", ",", "targets", ",", "indices", ",", "num_boxes", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dddzg_up-detr.models.detr.SetCriterion.forward": [[243, 284], ["detr.SetCriterion.matcher", "sum", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "util.misc.is_dist_avail_and_initialized", "torch.clamp().item", "torch.clamp().item", "torch.clamp().item", "torch.clamp().item", "torch.distributed.all_reduce", "torch.distributed.all_reduce", "torch.distributed.all_reduce", "torch.distributed.all_reduce", "losses.update", "enumerate", "outputs.items", "len", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "detr.SetCriterion.get_loss", "detr.SetCriterion.matcher", "next", "detr.SetCriterion.get_loss", "losses.update", "iter", "util.misc.get_world_size", "outputs.values", "detr.SetCriterion.items"], "methods", ["home.repos.pwc.inspect_result.dddzg_up-detr.util.misc.is_dist_avail_and_initialized", "home.repos.pwc.inspect_result.dddzg_up-detr.util.misc.MetricLogger.update", "home.repos.pwc.inspect_result.dddzg_up-detr.models.detr.SetCriterion.get_loss", "home.repos.pwc.inspect_result.dddzg_up-detr.models.detr.SetCriterion.get_loss", "home.repos.pwc.inspect_result.dddzg_up-detr.util.misc.MetricLogger.update", "home.repos.pwc.inspect_result.dddzg_up-detr.util.misc.get_world_size"], ["", "def", "forward", "(", "self", ",", "outputs", ",", "targets", ")", ":", "\n", "        ", "\"\"\" This performs the loss computation.\n        Parameters:\n             outputs: dict of tensors, see the output specification of the model for the format\n             targets: list of dicts, such that len(targets) == batch_size.\n                      The expected keys in each dict depends on the losses applied, see each loss' doc\n        \"\"\"", "\n", "outputs_without_aux", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "outputs", ".", "items", "(", ")", "if", "k", "!=", "'aux_outputs'", "}", "\n", "\n", "# Retrieve the matching between the outputs of the last layer and the targets", "\n", "indices", "=", "self", ".", "matcher", "(", "outputs_without_aux", ",", "targets", ")", "\n", "\n", "# Compute the average number of target boxes accross all nodes, for normalization purposes", "\n", "num_boxes", "=", "sum", "(", "len", "(", "t", "[", "\"labels\"", "]", ")", "for", "t", "in", "targets", ")", "\n", "num_boxes", "=", "torch", ".", "as_tensor", "(", "[", "num_boxes", "]", ",", "dtype", "=", "torch", ".", "float", ",", "device", "=", "next", "(", "iter", "(", "outputs", ".", "values", "(", ")", ")", ")", ".", "device", ")", "\n", "if", "is_dist_avail_and_initialized", "(", ")", ":", "\n", "            ", "torch", ".", "distributed", ".", "all_reduce", "(", "num_boxes", ")", "\n", "", "num_boxes", "=", "torch", ".", "clamp", "(", "num_boxes", "/", "get_world_size", "(", ")", ",", "min", "=", "1", ")", ".", "item", "(", ")", "\n", "\n", "# Compute all the requested losses", "\n", "losses", "=", "{", "}", "\n", "for", "loss", "in", "self", ".", "losses", ":", "\n", "            ", "losses", ".", "update", "(", "self", ".", "get_loss", "(", "loss", ",", "outputs", ",", "targets", ",", "indices", ",", "num_boxes", ")", ")", "\n", "\n", "# In case of auxiliary losses, we repeat this process with the output of each intermediate layer.", "\n", "", "if", "'aux_outputs'", "in", "outputs", ":", "\n", "            ", "for", "i", ",", "aux_outputs", "in", "enumerate", "(", "outputs", "[", "'aux_outputs'", "]", ")", ":", "\n", "                ", "indices", "=", "self", ".", "matcher", "(", "aux_outputs", ",", "targets", ")", "\n", "for", "loss", "in", "self", ".", "losses", ":", "\n", "                    ", "if", "loss", "==", "'masks'", ":", "\n", "# Intermediate masks losses are too costly to compute, we ignore them.", "\n", "                        ", "continue", "\n", "", "kwargs", "=", "{", "}", "\n", "if", "loss", "==", "'labels'", ":", "\n", "# Logging is enabled only for the last layer", "\n", "                        ", "kwargs", "=", "{", "'log'", ":", "False", "}", "\n", "", "l_dict", "=", "self", ".", "get_loss", "(", "loss", ",", "aux_outputs", ",", "targets", ",", "indices", ",", "num_boxes", ",", "**", "kwargs", ")", "\n", "l_dict", "=", "{", "k", "+", "f'_{i}'", ":", "v", "for", "k", ",", "v", "in", "l_dict", ".", "items", "(", ")", "}", "\n", "losses", ".", "update", "(", "l_dict", ")", "\n", "\n", "", "", "", "return", "losses", "\n", "\n"]], "home.repos.pwc.inspect_result.dddzg_up-detr.models.detr.PostProcess.forward": [[289, 316], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.softmax", "torch.softmax", "prob[].max", "util.box_ops.box_cxcywh_to_xyxy", "target_sizes.unbind", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "len", "len", "zip"], "methods", ["home.repos.pwc.inspect_result.dddzg_up-detr.util.misc.SmoothedValue.max", "home.repos.pwc.inspect_result.dddzg_up-detr.util.box_ops.box_cxcywh_to_xyxy"], ["@", "torch", ".", "no_grad", "(", ")", "\n", "def", "forward", "(", "self", ",", "outputs", ",", "target_sizes", ")", ":", "\n", "        ", "\"\"\" Perform the computation\n        Parameters:\n            outputs: raw outputs of the model\n            target_sizes: tensor of dimension [batch_size x 2] containing the size of each images of the batch\n                          For evaluation, this must be the original image size (before any data augmentation)\n                          For visualization, this should be the image size after data augment, but before padding\n        \"\"\"", "\n", "out_logits", ",", "out_bbox", "=", "outputs", "[", "'pred_logits'", "]", ",", "outputs", "[", "'pred_boxes'", "]", "\n", "\n", "assert", "len", "(", "out_logits", ")", "==", "len", "(", "target_sizes", ")", "\n", "assert", "target_sizes", ".", "shape", "[", "1", "]", "==", "2", "\n", "\n", "prob", "=", "F", ".", "softmax", "(", "out_logits", ",", "-", "1", ")", "\n", "scores", ",", "labels", "=", "prob", "[", "...", ",", ":", "-", "1", "]", ".", "max", "(", "-", "1", ")", "\n", "\n", "# convert to [x0, y0, x1, y1] format", "\n", "boxes", "=", "box_ops", ".", "box_cxcywh_to_xyxy", "(", "out_bbox", ")", "\n", "# and from relative [0, 1] to absolute [0, height] coordinates", "\n", "img_h", ",", "img_w", "=", "target_sizes", ".", "unbind", "(", "1", ")", "\n", "scale_fct", "=", "torch", ".", "stack", "(", "[", "img_w", ",", "img_h", ",", "img_w", ",", "img_h", "]", ",", "dim", "=", "1", ")", "\n", "boxes", "=", "boxes", "*", "scale_fct", "[", ":", ",", "None", ",", ":", "]", "\n", "\n", "results", "=", "[", "{", "'scores'", ":", "s", ",", "'labels'", ":", "l", ",", "'boxes'", ":", "b", "}", "for", "s", ",", "l", ",", "b", "in", "zip", "(", "scores", ",", "labels", ",", "boxes", ")", "]", "\n", "\n", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.dddzg_up-detr.models.detr.MLP.__init__": [[321, 326], ["torch.nn.Module.__init__", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.Linear", "torch.nn.Linear", "zip"], "methods", ["home.repos.pwc.inspect_result.dddzg_up-detr.models.backbone.Joiner.__init__"], ["def", "__init__", "(", "self", ",", "input_dim", ",", "hidden_dim", ",", "output_dim", ",", "num_layers", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_layers", "=", "num_layers", "\n", "h", "=", "[", "hidden_dim", "]", "*", "(", "num_layers", "-", "1", ")", "\n", "self", ".", "layers", "=", "nn", ".", "ModuleList", "(", "nn", ".", "Linear", "(", "n", ",", "k", ")", "for", "n", ",", "k", "in", "zip", "(", "[", "input_dim", "]", "+", "h", ",", "h", "+", "[", "output_dim", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dddzg_up-detr.models.detr.MLP.forward": [[327, 331], ["enumerate", "torch.relu", "torch.relu", "layer", "layer"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "for", "i", ",", "layer", "in", "enumerate", "(", "self", ".", "layers", ")", ":", "\n", "            ", "x", "=", "F", ".", "relu", "(", "layer", "(", "x", ")", ")", "if", "i", "<", "self", ".", "num_layers", "-", "1", "else", "layer", "(", "x", ")", "\n", "", "return", "x", "\n", "", "", ""]], "home.repos.pwc.inspect_result.dddzg_up-detr.models.__init__.build_model": [[18, 80], ["torch.device", "models.backbone.build_backbone", "models.transformer.build_transformer", "models.matcher.build_matcher", "models.detr.SetCriterion", "models.detr.SetCriterion.to", "models.updetr.UPDETR", "models.detr.DETR", "range", "weight_dict.update", "models.detr.PostProcess", "models.segmentation.PostProcessSegm", "models.segmentation.DETRsegm", "aux_weight_dict.update", "models.segmentation.PostProcessPanoptic", "range", "weight_dict.items"], "function", ["home.repos.pwc.inspect_result.dddzg_up-detr.models.backbone.build_backbone", "home.repos.pwc.inspect_result.dddzg_up-detr.models.transformer.build_transformer", "home.repos.pwc.inspect_result.dddzg_up-detr.models.matcher.build_matcher", "home.repos.pwc.inspect_result.dddzg_up-detr.util.misc.NestedTensor.to", "home.repos.pwc.inspect_result.dddzg_up-detr.util.misc.MetricLogger.update", "home.repos.pwc.inspect_result.dddzg_up-detr.util.misc.MetricLogger.update"], ["#     break", "\n", "        ", "if", "isinstance", "(", "dataset", ",", "torch", ".", "utils", ".", "data", ".", "Subset", ")", ":", "\n", "            ", "dataset", "=", "dataset", ".", "dataset", "\n", "", "", "if", "isinstance", "(", "dataset", ",", "torchvision", ".", "datasets", ".", "CocoDetection", ")", ":", "\n", "        ", "return", "dataset", ".", "coco", "\n", "\n", "\n", "", "", "def", "build_dataset", "(", "image_set", ",", "args", ")", ":", "\n", "    ", "if", "args", ".", "dataset_file", "==", "'ImageNet'", ":", "\n", "        ", "return", "build_selfdet", "(", "image_set", ",", "args", ")", "\n", "", "if", "args", ".", "dataset_file", "==", "'coco'", ":", "\n", "        ", "return", "build_coco", "(", "image_set", ",", "args", ")", "\n", "", "if", "args", ".", "dataset_file", "==", "'coco_panoptic'", ":", "\n", "# to avoid making panopticapi required for coco", "\n", "        ", "from", ".", "coco_panoptic", "import", "build", "as", "build_coco_panoptic", "\n", "return", "build_coco_panoptic", "(", "image_set", ",", "args", ")", "\n", "", "raise", "ValueError", "(", "f'dataset {args.dataset_file} not supported'", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.dddzg_up-detr.models.transformer.Transformer.__init__": [[26, 47], ["torch.nn.Module.__init__", "transformer.TransformerEncoderLayer", "transformer.TransformerEncoder", "transformer.TransformerDecoderLayer", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "transformer.TransformerDecoder", "transformer.Transformer._reset_parameters", "torch.nn.LayerNorm", "torch.nn.LayerNorm"], "methods", ["home.repos.pwc.inspect_result.dddzg_up-detr.models.backbone.Joiner.__init__", "home.repos.pwc.inspect_result.dddzg_up-detr.models.transformer.Transformer._reset_parameters"], ["    ", "def", "__init__", "(", "self", ",", "d_model", "=", "512", ",", "nhead", "=", "8", ",", "num_encoder_layers", "=", "6", ",", "\n", "num_decoder_layers", "=", "6", ",", "dim_feedforward", "=", "2048", ",", "dropout", "=", "0.1", ",", "\n", "activation", "=", "\"relu\"", ",", "normalize_before", "=", "False", ",", "\n", "return_intermediate_dec", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "encoder_layer", "=", "TransformerEncoderLayer", "(", "d_model", ",", "nhead", ",", "dim_feedforward", ",", "\n", "dropout", ",", "activation", ",", "normalize_before", ")", "\n", "encoder_norm", "=", "nn", ".", "LayerNorm", "(", "d_model", ")", "if", "normalize_before", "else", "None", "\n", "self", ".", "encoder", "=", "TransformerEncoder", "(", "encoder_layer", ",", "num_encoder_layers", ",", "encoder_norm", ")", "\n", "\n", "decoder_layer", "=", "TransformerDecoderLayer", "(", "d_model", ",", "nhead", ",", "dim_feedforward", ",", "\n", "dropout", ",", "activation", ",", "normalize_before", ")", "\n", "decoder_norm", "=", "nn", ".", "LayerNorm", "(", "d_model", ")", "\n", "self", ".", "decoder", "=", "TransformerDecoder", "(", "decoder_layer", ",", "num_decoder_layers", ",", "decoder_norm", ",", "\n", "return_intermediate", "=", "return_intermediate_dec", ")", "\n", "\n", "self", ".", "_reset_parameters", "(", ")", "\n", "\n", "self", ".", "d_model", "=", "d_model", "\n", "self", ".", "nhead", "=", "nhead", "\n", "\n"]], "home.repos.pwc.inspect_result.dddzg_up-detr.models.transformer.Transformer._reset_parameters": [[48, 52], ["transformer.Transformer.parameters", "p.dim", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_"], "methods", ["None"], ["", "def", "_reset_parameters", "(", "self", ")", ":", "\n", "        ", "for", "p", "in", "self", ".", "parameters", "(", ")", ":", "\n", "            ", "if", "p", ".", "dim", "(", ")", ">", "1", ":", "\n", "                ", "nn", ".", "init", ".", "xavier_uniform_", "(", "p", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dddzg_up-detr.models.transformer.Transformer.forward": [[53, 67], ["src.flatten().permute.flatten().permute.flatten().permute", "pos_embed.flatten().permute.flatten().permute.flatten().permute", "mask.flatten.flatten.flatten", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "transformer.Transformer.encoder", "transformer.Transformer.decoder", "transformer.Transformer.transpose", "transformer.Transformer.permute().view", "src.flatten().permute.flatten().permute.flatten", "pos_embed.flatten().permute.flatten().permute.flatten", "transformer.Transformer.permute"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "src", ",", "mask", ",", "query_embed", ",", "pos_embed", ",", "decoder_mask", "=", "None", ")", ":", "\n", "# flatten NxCxHxW to HWxNxC", "\n", "        ", "bs", ",", "c", ",", "h", ",", "w", "=", "src", ".", "shape", "\n", "src", "=", "src", ".", "flatten", "(", "2", ")", ".", "permute", "(", "2", ",", "0", ",", "1", ")", "\n", "pos_embed", "=", "pos_embed", ".", "flatten", "(", "2", ")", ".", "permute", "(", "2", ",", "0", ",", "1", ")", "\n", "# to align with UP-DETR, we move this line into detr.py", "\n", "# query_embed = query_embed.unsqueeze(1).repeat(1, bs, 1)", "\n", "mask", "=", "mask", ".", "flatten", "(", "1", ")", "\n", "\n", "tgt", "=", "torch", ".", "zeros_like", "(", "query_embed", ")", "\n", "memory", "=", "self", ".", "encoder", "(", "src", ",", "src_key_padding_mask", "=", "mask", ",", "pos", "=", "pos_embed", ")", "\n", "hs", "=", "self", ".", "decoder", "(", "tgt", ",", "memory", ",", "memory_key_padding_mask", "=", "mask", ",", "\n", "pos", "=", "pos_embed", ",", "query_pos", "=", "query_embed", ",", "tgt_mask", "=", "decoder_mask", ")", "\n", "return", "hs", ".", "transpose", "(", "1", ",", "2", ")", ",", "memory", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ".", "view", "(", "bs", ",", "c", ",", "h", ",", "w", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dddzg_up-detr.models.transformer.TransformerEncoder.__init__": [[71, 76], ["torch.nn.Module.__init__", "transformer._get_clones"], "methods", ["home.repos.pwc.inspect_result.dddzg_up-detr.models.backbone.Joiner.__init__", "home.repos.pwc.inspect_result.dddzg_up-detr.models.transformer._get_clones"], ["    ", "def", "__init__", "(", "self", ",", "encoder_layer", ",", "num_layers", ",", "norm", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "layers", "=", "_get_clones", "(", "encoder_layer", ",", "num_layers", ")", "\n", "self", ".", "num_layers", "=", "num_layers", "\n", "self", ".", "norm", "=", "norm", "\n", "\n"]], "home.repos.pwc.inspect_result.dddzg_up-detr.models.transformer.TransformerEncoder.forward": [[77, 91], ["layer", "transformer.TransformerEncoder.norm"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "src", ",", "\n", "mask", ":", "Optional", "[", "Tensor", "]", "=", "None", ",", "\n", "src_key_padding_mask", ":", "Optional", "[", "Tensor", "]", "=", "None", ",", "\n", "pos", ":", "Optional", "[", "Tensor", "]", "=", "None", ")", ":", "\n", "        ", "output", "=", "src", "\n", "\n", "for", "layer", "in", "self", ".", "layers", ":", "\n", "            ", "output", "=", "layer", "(", "output", ",", "src_mask", "=", "mask", ",", "\n", "src_key_padding_mask", "=", "src_key_padding_mask", ",", "pos", "=", "pos", ")", "\n", "\n", "", "if", "self", ".", "norm", "is", "not", "None", ":", "\n", "            ", "output", "=", "self", ".", "norm", "(", "output", ")", "\n", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.dddzg_up-detr.models.transformer.TransformerDecoder.__init__": [[95, 101], ["torch.nn.Module.__init__", "transformer._get_clones"], "methods", ["home.repos.pwc.inspect_result.dddzg_up-detr.models.backbone.Joiner.__init__", "home.repos.pwc.inspect_result.dddzg_up-detr.models.transformer._get_clones"], ["    ", "def", "__init__", "(", "self", ",", "decoder_layer", ",", "num_layers", ",", "norm", "=", "None", ",", "return_intermediate", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "layers", "=", "_get_clones", "(", "decoder_layer", ",", "num_layers", ")", "\n", "self", ".", "num_layers", "=", "num_layers", "\n", "self", ".", "norm", "=", "norm", "\n", "self", ".", "return_intermediate", "=", "return_intermediate", "\n", "\n"]], "home.repos.pwc.inspect_result.dddzg_up-detr.models.transformer.TransformerDecoder.forward": [[102, 132], ["transformer.TransformerDecoder.unsqueeze", "layer", "transformer.TransformerDecoder.norm", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "intermediate.append", "intermediate.pop", "intermediate.append", "transformer.TransformerDecoder.norm"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "tgt", ",", "memory", ",", "\n", "tgt_mask", ":", "Optional", "[", "Tensor", "]", "=", "None", ",", "\n", "memory_mask", ":", "Optional", "[", "Tensor", "]", "=", "None", ",", "\n", "tgt_key_padding_mask", ":", "Optional", "[", "Tensor", "]", "=", "None", ",", "\n", "memory_key_padding_mask", ":", "Optional", "[", "Tensor", "]", "=", "None", ",", "\n", "pos", ":", "Optional", "[", "Tensor", "]", "=", "None", ",", "\n", "query_pos", ":", "Optional", "[", "Tensor", "]", "=", "None", ")", ":", "\n", "        ", "output", "=", "tgt", "\n", "\n", "intermediate", "=", "[", "]", "\n", "\n", "for", "layer", "in", "self", ".", "layers", ":", "\n", "            ", "output", "=", "layer", "(", "output", ",", "memory", ",", "tgt_mask", "=", "tgt_mask", ",", "\n", "memory_mask", "=", "memory_mask", ",", "\n", "tgt_key_padding_mask", "=", "tgt_key_padding_mask", ",", "\n", "memory_key_padding_mask", "=", "memory_key_padding_mask", ",", "\n", "pos", "=", "pos", ",", "query_pos", "=", "query_pos", ")", "\n", "if", "self", ".", "return_intermediate", ":", "\n", "                ", "intermediate", ".", "append", "(", "self", ".", "norm", "(", "output", ")", ")", "\n", "\n", "", "", "if", "self", ".", "norm", "is", "not", "None", ":", "\n", "            ", "output", "=", "self", ".", "norm", "(", "output", ")", "\n", "if", "self", ".", "return_intermediate", ":", "\n", "                ", "intermediate", ".", "pop", "(", ")", "\n", "intermediate", ".", "append", "(", "output", ")", "\n", "\n", "", "", "if", "self", ".", "return_intermediate", ":", "\n", "            ", "return", "torch", ".", "stack", "(", "intermediate", ")", "\n", "\n", "", "return", "output", ".", "unsqueeze", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dddzg_up-detr.models.transformer.TransformerEncoderLayer.__init__": [[136, 152], ["torch.nn.Module.__init__", "torch.nn.MultiheadAttention", "torch.nn.MultiheadAttention", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "transformer._get_activation_fn"], "methods", ["home.repos.pwc.inspect_result.dddzg_up-detr.models.backbone.Joiner.__init__", "home.repos.pwc.inspect_result.dddzg_up-detr.models.transformer._get_activation_fn"], ["    ", "def", "__init__", "(", "self", ",", "d_model", ",", "nhead", ",", "dim_feedforward", "=", "2048", ",", "dropout", "=", "0.1", ",", "\n", "activation", "=", "\"relu\"", ",", "normalize_before", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "self_attn", "=", "nn", ".", "MultiheadAttention", "(", "d_model", ",", "nhead", ",", "dropout", "=", "dropout", ")", "\n", "# Implementation of Feedforward model", "\n", "self", ".", "linear1", "=", "nn", ".", "Linear", "(", "d_model", ",", "dim_feedforward", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "self", ".", "linear2", "=", "nn", ".", "Linear", "(", "dim_feedforward", ",", "d_model", ")", "\n", "\n", "self", ".", "norm1", "=", "nn", ".", "LayerNorm", "(", "d_model", ")", "\n", "self", ".", "norm2", "=", "nn", ".", "LayerNorm", "(", "d_model", ")", "\n", "self", ".", "dropout1", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "self", ".", "dropout2", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "\n", "self", ".", "activation", "=", "_get_activation_fn", "(", "activation", ")", "\n", "self", ".", "normalize_before", "=", "normalize_before", "\n", "\n"]], "home.repos.pwc.inspect_result.dddzg_up-detr.models.transformer.TransformerEncoderLayer.with_pos_embed": [[153, 155], ["None"], "methods", ["None"], ["", "def", "with_pos_embed", "(", "self", ",", "tensor", ",", "pos", ":", "Optional", "[", "Tensor", "]", ")", ":", "\n", "        ", "return", "tensor", "if", "pos", "is", "None", "else", "tensor", "+", "pos", "\n", "\n"]], "home.repos.pwc.inspect_result.dddzg_up-detr.models.transformer.TransformerEncoderLayer.forward_post": [[156, 170], ["transformer.TransformerEncoderLayer.with_pos_embed", "transformer.TransformerEncoderLayer.norm1", "transformer.TransformerEncoderLayer.linear2", "transformer.TransformerEncoderLayer.norm2", "transformer.TransformerEncoderLayer.self_attn", "transformer.TransformerEncoderLayer.dropout1", "transformer.TransformerEncoderLayer.dropout", "transformer.TransformerEncoderLayer.dropout2", "transformer.TransformerEncoderLayer.activation", "transformer.TransformerEncoderLayer.linear1"], "methods", ["home.repos.pwc.inspect_result.dddzg_up-detr.models.transformer.TransformerDecoderLayer.with_pos_embed"], ["", "def", "forward_post", "(", "self", ",", "\n", "src", ",", "\n", "src_mask", ":", "Optional", "[", "Tensor", "]", "=", "None", ",", "\n", "src_key_padding_mask", ":", "Optional", "[", "Tensor", "]", "=", "None", ",", "\n", "pos", ":", "Optional", "[", "Tensor", "]", "=", "None", ")", ":", "\n", "        ", "q", "=", "k", "=", "self", ".", "with_pos_embed", "(", "src", ",", "pos", ")", "\n", "src2", "=", "self", ".", "self_attn", "(", "q", ",", "k", ",", "value", "=", "src", ",", "attn_mask", "=", "src_mask", ",", "\n", "key_padding_mask", "=", "src_key_padding_mask", ")", "[", "0", "]", "\n", "src", "=", "src", "+", "self", ".", "dropout1", "(", "src2", ")", "\n", "src", "=", "self", ".", "norm1", "(", "src", ")", "\n", "src2", "=", "self", ".", "linear2", "(", "self", ".", "dropout", "(", "self", ".", "activation", "(", "self", ".", "linear1", "(", "src", ")", ")", ")", ")", "\n", "src", "=", "src", "+", "self", ".", "dropout2", "(", "src2", ")", "\n", "src", "=", "self", ".", "norm2", "(", "src", ")", "\n", "return", "src", "\n", "\n"]], "home.repos.pwc.inspect_result.dddzg_up-detr.models.transformer.TransformerEncoderLayer.forward_pre": [[171, 184], ["transformer.TransformerEncoderLayer.norm1", "transformer.TransformerEncoderLayer.with_pos_embed", "transformer.TransformerEncoderLayer.norm2", "transformer.TransformerEncoderLayer.linear2", "transformer.TransformerEncoderLayer.self_attn", "transformer.TransformerEncoderLayer.dropout1", "transformer.TransformerEncoderLayer.dropout", "transformer.TransformerEncoderLayer.dropout2", "transformer.TransformerEncoderLayer.activation", "transformer.TransformerEncoderLayer.linear1"], "methods", ["home.repos.pwc.inspect_result.dddzg_up-detr.models.transformer.TransformerDecoderLayer.with_pos_embed"], ["", "def", "forward_pre", "(", "self", ",", "src", ",", "\n", "src_mask", ":", "Optional", "[", "Tensor", "]", "=", "None", ",", "\n", "src_key_padding_mask", ":", "Optional", "[", "Tensor", "]", "=", "None", ",", "\n", "pos", ":", "Optional", "[", "Tensor", "]", "=", "None", ")", ":", "\n", "        ", "src2", "=", "self", ".", "norm1", "(", "src", ")", "\n", "q", "=", "k", "=", "self", ".", "with_pos_embed", "(", "src2", ",", "pos", ")", "\n", "src2", "=", "self", ".", "self_attn", "(", "q", ",", "k", ",", "value", "=", "src2", ",", "attn_mask", "=", "src_mask", ",", "\n", "key_padding_mask", "=", "src_key_padding_mask", ")", "[", "0", "]", "\n", "src", "=", "src", "+", "self", ".", "dropout1", "(", "src2", ")", "\n", "src2", "=", "self", ".", "norm2", "(", "src", ")", "\n", "src2", "=", "self", ".", "linear2", "(", "self", ".", "dropout", "(", "self", ".", "activation", "(", "self", ".", "linear1", "(", "src2", ")", ")", ")", ")", "\n", "src", "=", "src", "+", "self", ".", "dropout2", "(", "src2", ")", "\n", "return", "src", "\n", "\n"]], "home.repos.pwc.inspect_result.dddzg_up-detr.models.transformer.TransformerEncoderLayer.forward": [[185, 192], ["transformer.TransformerEncoderLayer.forward_post", "transformer.TransformerEncoderLayer.forward_pre"], "methods", ["home.repos.pwc.inspect_result.dddzg_up-detr.models.transformer.TransformerDecoderLayer.forward_post", "home.repos.pwc.inspect_result.dddzg_up-detr.models.transformer.TransformerDecoderLayer.forward_pre"], ["", "def", "forward", "(", "self", ",", "src", ",", "\n", "src_mask", ":", "Optional", "[", "Tensor", "]", "=", "None", ",", "\n", "src_key_padding_mask", ":", "Optional", "[", "Tensor", "]", "=", "None", ",", "\n", "pos", ":", "Optional", "[", "Tensor", "]", "=", "None", ")", ":", "\n", "        ", "if", "self", ".", "normalize_before", ":", "\n", "            ", "return", "self", ".", "forward_pre", "(", "src", ",", "src_mask", ",", "src_key_padding_mask", ",", "pos", ")", "\n", "", "return", "self", ".", "forward_post", "(", "src", ",", "src_mask", ",", "src_key_padding_mask", ",", "pos", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dddzg_up-detr.models.transformer.TransformerDecoderLayer.__init__": [[196, 215], ["torch.nn.Module.__init__", "torch.nn.MultiheadAttention", "torch.nn.MultiheadAttention", "torch.nn.MultiheadAttention", "torch.nn.MultiheadAttention", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "transformer._get_activation_fn"], "methods", ["home.repos.pwc.inspect_result.dddzg_up-detr.models.backbone.Joiner.__init__", "home.repos.pwc.inspect_result.dddzg_up-detr.models.transformer._get_activation_fn"], ["    ", "def", "__init__", "(", "self", ",", "d_model", ",", "nhead", ",", "dim_feedforward", "=", "2048", ",", "dropout", "=", "0.1", ",", "\n", "activation", "=", "\"relu\"", ",", "normalize_before", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "self_attn", "=", "nn", ".", "MultiheadAttention", "(", "d_model", ",", "nhead", ",", "dropout", "=", "dropout", ")", "\n", "self", ".", "multihead_attn", "=", "nn", ".", "MultiheadAttention", "(", "d_model", ",", "nhead", ",", "dropout", "=", "dropout", ")", "\n", "# Implementation of Feedforward model", "\n", "self", ".", "linear1", "=", "nn", ".", "Linear", "(", "d_model", ",", "dim_feedforward", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "self", ".", "linear2", "=", "nn", ".", "Linear", "(", "dim_feedforward", ",", "d_model", ")", "\n", "\n", "self", ".", "norm1", "=", "nn", ".", "LayerNorm", "(", "d_model", ")", "\n", "self", ".", "norm2", "=", "nn", ".", "LayerNorm", "(", "d_model", ")", "\n", "self", ".", "norm3", "=", "nn", ".", "LayerNorm", "(", "d_model", ")", "\n", "self", ".", "dropout1", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "self", ".", "dropout2", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "self", ".", "dropout3", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "\n", "self", ".", "activation", "=", "_get_activation_fn", "(", "activation", ")", "\n", "self", ".", "normalize_before", "=", "normalize_before", "\n", "\n"]], "home.repos.pwc.inspect_result.dddzg_up-detr.models.transformer.TransformerDecoderLayer.with_pos_embed": [[216, 218], ["None"], "methods", ["None"], ["", "def", "with_pos_embed", "(", "self", ",", "tensor", ",", "pos", ":", "Optional", "[", "Tensor", "]", ")", ":", "\n", "        ", "return", "tensor", "if", "pos", "is", "None", "else", "tensor", "+", "pos", "\n", "\n"]], "home.repos.pwc.inspect_result.dddzg_up-detr.models.transformer.TransformerDecoderLayer.forward_post": [[219, 241], ["transformer.TransformerDecoderLayer.with_pos_embed", "transformer.TransformerDecoderLayer.norm1", "transformer.TransformerDecoderLayer.norm2", "transformer.TransformerDecoderLayer.linear2", "transformer.TransformerDecoderLayer.norm3", "transformer.TransformerDecoderLayer.self_attn", "transformer.TransformerDecoderLayer.dropout1", "transformer.TransformerDecoderLayer.multihead_attn", "transformer.TransformerDecoderLayer.dropout2", "transformer.TransformerDecoderLayer.dropout", "transformer.TransformerDecoderLayer.dropout3", "transformer.TransformerDecoderLayer.activation", "transformer.TransformerDecoderLayer.with_pos_embed", "transformer.TransformerDecoderLayer.with_pos_embed", "transformer.TransformerDecoderLayer.linear1"], "methods", ["home.repos.pwc.inspect_result.dddzg_up-detr.models.transformer.TransformerDecoderLayer.with_pos_embed", "home.repos.pwc.inspect_result.dddzg_up-detr.models.transformer.TransformerDecoderLayer.with_pos_embed", "home.repos.pwc.inspect_result.dddzg_up-detr.models.transformer.TransformerDecoderLayer.with_pos_embed"], ["", "def", "forward_post", "(", "self", ",", "tgt", ",", "memory", ",", "\n", "tgt_mask", ":", "Optional", "[", "Tensor", "]", "=", "None", ",", "\n", "memory_mask", ":", "Optional", "[", "Tensor", "]", "=", "None", ",", "\n", "tgt_key_padding_mask", ":", "Optional", "[", "Tensor", "]", "=", "None", ",", "\n", "memory_key_padding_mask", ":", "Optional", "[", "Tensor", "]", "=", "None", ",", "\n", "pos", ":", "Optional", "[", "Tensor", "]", "=", "None", ",", "\n", "query_pos", ":", "Optional", "[", "Tensor", "]", "=", "None", ")", ":", "\n", "        ", "q", "=", "k", "=", "self", ".", "with_pos_embed", "(", "tgt", ",", "query_pos", ")", "\n", "tgt2", "=", "self", ".", "self_attn", "(", "q", ",", "k", ",", "value", "=", "tgt", ",", "attn_mask", "=", "tgt_mask", ",", "\n", "key_padding_mask", "=", "tgt_key_padding_mask", ")", "[", "0", "]", "\n", "tgt", "=", "tgt", "+", "self", ".", "dropout1", "(", "tgt2", ")", "\n", "tgt", "=", "self", ".", "norm1", "(", "tgt", ")", "\n", "tgt2", "=", "self", ".", "multihead_attn", "(", "query", "=", "self", ".", "with_pos_embed", "(", "tgt", ",", "query_pos", ")", ",", "\n", "key", "=", "self", ".", "with_pos_embed", "(", "memory", ",", "pos", ")", ",", "\n", "value", "=", "memory", ",", "attn_mask", "=", "memory_mask", ",", "\n", "key_padding_mask", "=", "memory_key_padding_mask", ")", "[", "0", "]", "\n", "tgt", "=", "tgt", "+", "self", ".", "dropout2", "(", "tgt2", ")", "\n", "tgt", "=", "self", ".", "norm2", "(", "tgt", ")", "\n", "tgt2", "=", "self", ".", "linear2", "(", "self", ".", "dropout", "(", "self", ".", "activation", "(", "self", ".", "linear1", "(", "tgt", ")", ")", ")", ")", "\n", "tgt", "=", "tgt", "+", "self", ".", "dropout3", "(", "tgt2", ")", "\n", "tgt", "=", "self", ".", "norm3", "(", "tgt", ")", "\n", "return", "tgt", "\n", "\n"]], "home.repos.pwc.inspect_result.dddzg_up-detr.models.transformer.TransformerDecoderLayer.forward_pre": [[242, 264], ["transformer.TransformerDecoderLayer.norm1", "transformer.TransformerDecoderLayer.with_pos_embed", "transformer.TransformerDecoderLayer.norm2", "transformer.TransformerDecoderLayer.norm3", "transformer.TransformerDecoderLayer.linear2", "transformer.TransformerDecoderLayer.self_attn", "transformer.TransformerDecoderLayer.dropout1", "transformer.TransformerDecoderLayer.multihead_attn", "transformer.TransformerDecoderLayer.dropout2", "transformer.TransformerDecoderLayer.dropout", "transformer.TransformerDecoderLayer.dropout3", "transformer.TransformerDecoderLayer.activation", "transformer.TransformerDecoderLayer.with_pos_embed", "transformer.TransformerDecoderLayer.with_pos_embed", "transformer.TransformerDecoderLayer.linear1"], "methods", ["home.repos.pwc.inspect_result.dddzg_up-detr.models.transformer.TransformerDecoderLayer.with_pos_embed", "home.repos.pwc.inspect_result.dddzg_up-detr.models.transformer.TransformerDecoderLayer.with_pos_embed", "home.repos.pwc.inspect_result.dddzg_up-detr.models.transformer.TransformerDecoderLayer.with_pos_embed"], ["", "def", "forward_pre", "(", "self", ",", "tgt", ",", "memory", ",", "\n", "tgt_mask", ":", "Optional", "[", "Tensor", "]", "=", "None", ",", "\n", "memory_mask", ":", "Optional", "[", "Tensor", "]", "=", "None", ",", "\n", "tgt_key_padding_mask", ":", "Optional", "[", "Tensor", "]", "=", "None", ",", "\n", "memory_key_padding_mask", ":", "Optional", "[", "Tensor", "]", "=", "None", ",", "\n", "pos", ":", "Optional", "[", "Tensor", "]", "=", "None", ",", "\n", "query_pos", ":", "Optional", "[", "Tensor", "]", "=", "None", ")", ":", "\n", "        ", "tgt2", "=", "self", ".", "norm1", "(", "tgt", ")", "\n", "q", "=", "k", "=", "self", ".", "with_pos_embed", "(", "tgt2", ",", "query_pos", ")", "\n", "tgt2", "=", "self", ".", "self_attn", "(", "q", ",", "k", ",", "value", "=", "tgt2", ",", "attn_mask", "=", "tgt_mask", ",", "\n", "key_padding_mask", "=", "tgt_key_padding_mask", ")", "[", "0", "]", "\n", "tgt", "=", "tgt", "+", "self", ".", "dropout1", "(", "tgt2", ")", "\n", "tgt2", "=", "self", ".", "norm2", "(", "tgt", ")", "\n", "tgt2", "=", "self", ".", "multihead_attn", "(", "query", "=", "self", ".", "with_pos_embed", "(", "tgt2", ",", "query_pos", ")", ",", "\n", "key", "=", "self", ".", "with_pos_embed", "(", "memory", ",", "pos", ")", ",", "\n", "value", "=", "memory", ",", "attn_mask", "=", "memory_mask", ",", "\n", "key_padding_mask", "=", "memory_key_padding_mask", ")", "[", "0", "]", "\n", "tgt", "=", "tgt", "+", "self", ".", "dropout2", "(", "tgt2", ")", "\n", "tgt2", "=", "self", ".", "norm3", "(", "tgt", ")", "\n", "tgt2", "=", "self", ".", "linear2", "(", "self", ".", "dropout", "(", "self", ".", "activation", "(", "self", ".", "linear1", "(", "tgt2", ")", ")", ")", ")", "\n", "tgt", "=", "tgt", "+", "self", ".", "dropout3", "(", "tgt2", ")", "\n", "return", "tgt", "\n", "\n"]], "home.repos.pwc.inspect_result.dddzg_up-detr.models.transformer.TransformerDecoderLayer.forward": [[265, 277], ["transformer.TransformerDecoderLayer.forward_post", "transformer.TransformerDecoderLayer.forward_pre"], "methods", ["home.repos.pwc.inspect_result.dddzg_up-detr.models.transformer.TransformerDecoderLayer.forward_post", "home.repos.pwc.inspect_result.dddzg_up-detr.models.transformer.TransformerDecoderLayer.forward_pre"], ["", "def", "forward", "(", "self", ",", "tgt", ",", "memory", ",", "\n", "tgt_mask", ":", "Optional", "[", "Tensor", "]", "=", "None", ",", "\n", "memory_mask", ":", "Optional", "[", "Tensor", "]", "=", "None", ",", "\n", "tgt_key_padding_mask", ":", "Optional", "[", "Tensor", "]", "=", "None", ",", "\n", "memory_key_padding_mask", ":", "Optional", "[", "Tensor", "]", "=", "None", ",", "\n", "pos", ":", "Optional", "[", "Tensor", "]", "=", "None", ",", "\n", "query_pos", ":", "Optional", "[", "Tensor", "]", "=", "None", ")", ":", "\n", "        ", "if", "self", ".", "normalize_before", ":", "\n", "            ", "return", "self", ".", "forward_pre", "(", "tgt", ",", "memory", ",", "tgt_mask", ",", "memory_mask", ",", "\n", "tgt_key_padding_mask", ",", "memory_key_padding_mask", ",", "pos", ",", "query_pos", ")", "\n", "", "return", "self", ".", "forward_post", "(", "tgt", ",", "memory", ",", "tgt_mask", ",", "memory_mask", ",", "\n", "tgt_key_padding_mask", ",", "memory_key_padding_mask", ",", "pos", ",", "query_pos", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dddzg_up-detr.models.transformer._get_clones": [[279, 281], ["torch.nn.ModuleList", "copy.deepcopy", "range"], "function", ["None"], ["", "", "def", "_get_clones", "(", "module", ",", "N", ")", ":", "\n", "    ", "return", "nn", ".", "ModuleList", "(", "[", "copy", ".", "deepcopy", "(", "module", ")", "for", "i", "in", "range", "(", "N", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dddzg_up-detr.models.transformer.build_transformer": [[283, 293], ["transformer.Transformer"], "function", ["None"], ["", "def", "build_transformer", "(", "args", ")", ":", "\n", "    ", "return", "Transformer", "(", "\n", "d_model", "=", "args", ".", "hidden_dim", ",", "\n", "dropout", "=", "args", ".", "dropout", ",", "\n", "nhead", "=", "args", ".", "nheads", ",", "\n", "dim_feedforward", "=", "args", ".", "dim_feedforward", ",", "\n", "num_encoder_layers", "=", "args", ".", "enc_layers", ",", "\n", "num_decoder_layers", "=", "args", ".", "dec_layers", ",", "\n", "normalize_before", "=", "args", ".", "pre_norm", ",", "\n", "return_intermediate_dec", "=", "True", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.dddzg_up-detr.models.transformer._get_activation_fn": [[296, 305], ["RuntimeError"], "function", ["None"], ["", "def", "_get_activation_fn", "(", "activation", ")", ":", "\n", "    ", "\"\"\"Return an activation function given a string\"\"\"", "\n", "if", "activation", "==", "\"relu\"", ":", "\n", "        ", "return", "F", ".", "relu", "\n", "", "if", "activation", "==", "\"gelu\"", ":", "\n", "        ", "return", "F", ".", "gelu", "\n", "", "if", "activation", "==", "\"glu\"", ":", "\n", "        ", "return", "F", ".", "glu", "\n", "", "raise", "RuntimeError", "(", "F\"activation should be relu/gelu, not {activation}.\"", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.dddzg_up-detr.models.position_encoding.PositionEmbeddingSine.__init__": [[23, 33], ["torch.nn.Module.__init__", "ValueError"], "methods", ["home.repos.pwc.inspect_result.dddzg_up-detr.models.backbone.Joiner.__init__"], ["def", "__init__", "(", "self", ",", "num_pos_feats", "=", "64", ",", "temperature", "=", "10000", ",", "normalize", "=", "False", ",", "scale", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_pos_feats", "=", "num_pos_feats", "\n", "self", ".", "temperature", "=", "temperature", "\n", "self", ".", "normalize", "=", "normalize", "\n", "if", "scale", "is", "not", "None", "and", "normalize", "is", "False", ":", "\n", "            ", "raise", "ValueError", "(", "\"normalize should be True if scale is passed\"", ")", "\n", "", "if", "scale", "is", "None", ":", "\n", "            ", "scale", "=", "2", "*", "math", ".", "pi", "\n", "", "self", ".", "scale", "=", "scale", "\n", "\n"]], "home.repos.pwc.inspect_result.dddzg_up-detr.models.position_encoding.PositionEmbeddingSine.forward": [[34, 55], ["not_mask.cumsum", "not_mask.cumsum", "torch.arange", "torch.stack().flatten", "torch.stack().flatten", "torch.cat().permute", "torch.stack", "torch.stack", "torch.cat", "pos_x[].sin", "pos_x[].cos", "pos_y[].sin", "pos_y[].cos"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "tensor_list", ":", "NestedTensor", ")", ":", "\n", "        ", "x", "=", "tensor_list", ".", "tensors", "\n", "mask", "=", "tensor_list", ".", "mask", "\n", "assert", "mask", "is", "not", "None", "\n", "not_mask", "=", "~", "mask", "\n", "y_embed", "=", "not_mask", ".", "cumsum", "(", "1", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "x_embed", "=", "not_mask", ".", "cumsum", "(", "2", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "if", "self", ".", "normalize", ":", "\n", "            ", "eps", "=", "1e-6", "\n", "y_embed", "=", "y_embed", "/", "(", "y_embed", "[", ":", ",", "-", "1", ":", ",", ":", "]", "+", "eps", ")", "*", "self", ".", "scale", "\n", "x_embed", "=", "x_embed", "/", "(", "x_embed", "[", ":", ",", ":", ",", "-", "1", ":", "]", "+", "eps", ")", "*", "self", ".", "scale", "\n", "\n", "", "dim_t", "=", "torch", ".", "arange", "(", "self", ".", "num_pos_feats", ",", "dtype", "=", "torch", ".", "float32", ",", "device", "=", "x", ".", "device", ")", "\n", "dim_t", "=", "self", ".", "temperature", "**", "(", "2", "*", "(", "dim_t", "//", "2", ")", "/", "self", ".", "num_pos_feats", ")", "\n", "\n", "pos_x", "=", "x_embed", "[", ":", ",", ":", ",", ":", ",", "None", "]", "/", "dim_t", "\n", "pos_y", "=", "y_embed", "[", ":", ",", ":", ",", ":", ",", "None", "]", "/", "dim_t", "\n", "pos_x", "=", "torch", ".", "stack", "(", "(", "pos_x", "[", ":", ",", ":", ",", ":", ",", "0", ":", ":", "2", "]", ".", "sin", "(", ")", ",", "pos_x", "[", ":", ",", ":", ",", ":", ",", "1", ":", ":", "2", "]", ".", "cos", "(", ")", ")", ",", "dim", "=", "4", ")", ".", "flatten", "(", "3", ")", "\n", "pos_y", "=", "torch", ".", "stack", "(", "(", "pos_y", "[", ":", ",", ":", ",", ":", ",", "0", ":", ":", "2", "]", ".", "sin", "(", ")", ",", "pos_y", "[", ":", ",", ":", ",", ":", ",", "1", ":", ":", "2", "]", ".", "cos", "(", ")", ")", ",", "dim", "=", "4", ")", ".", "flatten", "(", "3", ")", "\n", "pos", "=", "torch", ".", "cat", "(", "(", "pos_y", ",", "pos_x", ")", ",", "dim", "=", "3", ")", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", "\n", "return", "pos", "\n", "\n"]], "home.repos.pwc.inspect_result.dddzg_up-detr.models.position_encoding.PositionEmbeddingLearned.__init__": [[61, 66], ["torch.nn.Module.__init__", "torch.nn.Embedding", "torch.nn.Embedding", "position_encoding.PositionEmbeddingLearned.reset_parameters"], "methods", ["home.repos.pwc.inspect_result.dddzg_up-detr.models.backbone.Joiner.__init__", "home.repos.pwc.inspect_result.dddzg_up-detr.models.position_encoding.PositionEmbeddingLearned.reset_parameters"], ["def", "__init__", "(", "self", ",", "num_pos_feats", "=", "256", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "row_embed", "=", "nn", ".", "Embedding", "(", "50", ",", "num_pos_feats", ")", "\n", "self", ".", "col_embed", "=", "nn", ".", "Embedding", "(", "50", ",", "num_pos_feats", ")", "\n", "self", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dddzg_up-detr.models.position_encoding.PositionEmbeddingLearned.reset_parameters": [[67, 70], ["torch.nn.init.uniform_", "torch.nn.init.uniform_"], "methods", ["None"], ["", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "nn", ".", "init", ".", "uniform_", "(", "self", ".", "row_embed", ".", "weight", ")", "\n", "nn", ".", "init", ".", "uniform_", "(", "self", ".", "col_embed", ".", "weight", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dddzg_up-detr.models.position_encoding.PositionEmbeddingLearned.forward": [[71, 83], ["torch.arange", "torch.arange", "position_encoding.PositionEmbeddingLearned.col_embed", "position_encoding.PositionEmbeddingLearned.row_embed", "torch.cat().permute().unsqueeze().repeat", "torch.cat().permute().unsqueeze", "torch.cat().permute", "torch.cat", "position_encoding.PositionEmbeddingLearned.unsqueeze().repeat", "position_encoding.PositionEmbeddingLearned.unsqueeze().repeat", "position_encoding.PositionEmbeddingLearned.unsqueeze", "position_encoding.PositionEmbeddingLearned.unsqueeze"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "tensor_list", ":", "NestedTensor", ")", ":", "\n", "        ", "x", "=", "tensor_list", ".", "tensors", "\n", "h", ",", "w", "=", "x", ".", "shape", "[", "-", "2", ":", "]", "\n", "i", "=", "torch", ".", "arange", "(", "w", ",", "device", "=", "x", ".", "device", ")", "\n", "j", "=", "torch", ".", "arange", "(", "h", ",", "device", "=", "x", ".", "device", ")", "\n", "x_emb", "=", "self", ".", "col_embed", "(", "i", ")", "\n", "y_emb", "=", "self", ".", "row_embed", "(", "j", ")", "\n", "pos", "=", "torch", ".", "cat", "(", "[", "\n", "x_emb", ".", "unsqueeze", "(", "0", ")", ".", "repeat", "(", "h", ",", "1", ",", "1", ")", ",", "\n", "y_emb", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "1", ",", "w", ",", "1", ")", ",", "\n", "]", ",", "dim", "=", "-", "1", ")", ".", "permute", "(", "2", ",", "0", ",", "1", ")", ".", "unsqueeze", "(", "0", ")", ".", "repeat", "(", "x", ".", "shape", "[", "0", "]", ",", "1", ",", "1", ",", "1", ")", "\n", "return", "pos", "\n", "\n"]], "home.repos.pwc.inspect_result.dddzg_up-detr.models.position_encoding.build_position_encoding": [[85, 96], ["position_encoding.PositionEmbeddingSine", "position_encoding.PositionEmbeddingLearned", "ValueError"], "function", ["None"], ["", "", "def", "build_position_encoding", "(", "args", ")", ":", "\n", "    ", "N_steps", "=", "args", ".", "hidden_dim", "//", "2", "\n", "if", "args", ".", "position_embedding", "in", "(", "'v2'", ",", "'sine'", ")", ":", "\n", "# TODO find a better way of exposing other arguments", "\n", "        ", "position_embedding", "=", "PositionEmbeddingSine", "(", "N_steps", ",", "normalize", "=", "True", ")", "\n", "", "elif", "args", ".", "position_embedding", "in", "(", "'v3'", ",", "'learned'", ")", ":", "\n", "        ", "position_embedding", "=", "PositionEmbeddingLearned", "(", "N_steps", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "f\"not supported {args.position_embedding}\"", ")", "\n", "\n", "", "return", "position_embedding", "\n", "", ""]], "home.repos.pwc.inspect_result.dddzg_up-detr.models.backbone.FrozenBatchNorm2d.__init__": [[34, 40], ["super().__init__", "backbone.FrozenBatchNorm2d.register_buffer", "backbone.FrozenBatchNorm2d.register_buffer", "backbone.FrozenBatchNorm2d.register_buffer", "backbone.FrozenBatchNorm2d.register_buffer", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["home.repos.pwc.inspect_result.dddzg_up-detr.models.backbone.Joiner.__init__"], ["def", "__init__", "(", "self", ",", "n", ")", ":", "\n", "        ", "super", "(", "FrozenBatchNorm2d", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "register_buffer", "(", "\"weight\"", ",", "torch", ".", "ones", "(", "n", ")", ")", "\n", "self", ".", "register_buffer", "(", "\"bias\"", ",", "torch", ".", "zeros", "(", "n", ")", ")", "\n", "self", ".", "register_buffer", "(", "\"running_mean\"", ",", "torch", ".", "zeros", "(", "n", ")", ")", "\n", "self", ".", "register_buffer", "(", "\"running_var\"", ",", "torch", ".", "ones", "(", "n", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dddzg_up-detr.models.backbone.FrozenBatchNorm2d._load_from_state_dict": [[41, 50], ["super()._load_from_state_dict"], "methods", ["home.repos.pwc.inspect_result.dddzg_up-detr.models.backbone.FrozenBatchNorm2d._load_from_state_dict"], ["", "def", "_load_from_state_dict", "(", "self", ",", "state_dict", ",", "prefix", ",", "local_metadata", ",", "strict", ",", "\n", "missing_keys", ",", "unexpected_keys", ",", "error_msgs", ")", ":", "\n", "        ", "num_batches_tracked_key", "=", "prefix", "+", "'num_batches_tracked'", "\n", "if", "num_batches_tracked_key", "in", "state_dict", ":", "\n", "            ", "del", "state_dict", "[", "num_batches_tracked_key", "]", "\n", "\n", "", "super", "(", "FrozenBatchNorm2d", ",", "self", ")", ".", "_load_from_state_dict", "(", "\n", "state_dict", ",", "prefix", ",", "local_metadata", ",", "strict", ",", "\n", "missing_keys", ",", "unexpected_keys", ",", "error_msgs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dddzg_up-detr.models.backbone.FrozenBatchNorm2d.forward": [[51, 62], ["backbone.FrozenBatchNorm2d.weight.reshape", "backbone.FrozenBatchNorm2d.bias.reshape", "backbone.FrozenBatchNorm2d.running_var.reshape", "backbone.FrozenBatchNorm2d.running_mean.reshape"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# move reshapes to the beginning", "\n", "# to make it fuser-friendly", "\n", "        ", "w", "=", "self", ".", "weight", ".", "reshape", "(", "1", ",", "-", "1", ",", "1", ",", "1", ")", "\n", "b", "=", "self", ".", "bias", ".", "reshape", "(", "1", ",", "-", "1", ",", "1", ",", "1", ")", "\n", "rv", "=", "self", ".", "running_var", ".", "reshape", "(", "1", ",", "-", "1", ",", "1", ",", "1", ")", "\n", "rm", "=", "self", ".", "running_mean", ".", "reshape", "(", "1", ",", "-", "1", ",", "1", ",", "1", ")", "\n", "eps", "=", "1e-5", "\n", "scale", "=", "w", "*", "(", "rv", "+", "eps", ")", ".", "rsqrt", "(", ")", "\n", "bias", "=", "b", "-", "rm", "*", "scale", "\n", "return", "x", "*", "scale", "+", "bias", "\n", "\n"]], "home.repos.pwc.inspect_result.dddzg_up-detr.models.backbone.BackboneBase.__init__": [[66, 77], ["torch.nn.Module.__init__", "backbone.named_parameters", "torchvision.models._utils.IntermediateLayerGetter", "parameter.requires_grad_"], "methods", ["home.repos.pwc.inspect_result.dddzg_up-detr.models.backbone.Joiner.__init__"], ["    ", "def", "__init__", "(", "self", ",", "backbone", ":", "nn", ".", "Module", ",", "train_backbone", ":", "bool", ",", "num_channels", ":", "int", ",", "return_interm_layers", ":", "bool", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "for", "name", ",", "parameter", "in", "backbone", ".", "named_parameters", "(", ")", ":", "\n", "            ", "if", "not", "train_backbone", "or", "'layer2'", "not", "in", "name", "and", "'layer3'", "not", "in", "name", "and", "'layer4'", "not", "in", "name", ":", "\n", "                ", "parameter", ".", "requires_grad_", "(", "False", ")", "\n", "", "", "if", "return_interm_layers", ":", "\n", "            ", "return_layers", "=", "{", "\"layer1\"", ":", "\"0\"", ",", "\"layer2\"", ":", "\"1\"", ",", "\"layer3\"", ":", "\"2\"", ",", "\"layer4\"", ":", "\"3\"", "}", "\n", "", "else", ":", "\n", "            ", "return_layers", "=", "{", "'layer4'", ":", "\"0\"", "}", "\n", "", "self", ".", "body", "=", "IntermediateLayerGetter", "(", "backbone", ",", "return_layers", "=", "return_layers", ")", "\n", "self", ".", "num_channels", "=", "num_channels", "\n", "\n"]], "home.repos.pwc.inspect_result.dddzg_up-detr.models.backbone.BackboneBase.forward": [[78, 92], ["isinstance", "backbone.BackboneBase.body", "backbone.BackboneBase.items", "backbone.BackboneBase.body", "util.misc.NestedTensor", "torch.interpolate().to", "torch.interpolate().to", "torch.interpolate", "torch.interpolate", "m[].float"], "methods", ["home.repos.pwc.inspect_result.dddzg_up-detr.util.misc.NestedTensor.to", "home.repos.pwc.inspect_result.dddzg_up-detr.util.misc.NestedTensor.to", "home.repos.pwc.inspect_result.dddzg_up-detr.util.misc.interpolate", "home.repos.pwc.inspect_result.dddzg_up-detr.util.misc.interpolate"], ["", "def", "forward", "(", "self", ",", "tensor_list", ")", ":", "\n", "        ", "\"\"\"supports both NestedTensor and torch.Tensor\n        \"\"\"", "\n", "if", "isinstance", "(", "tensor_list", ",", "NestedTensor", ")", ":", "\n", "            ", "xs", "=", "self", ".", "body", "(", "tensor_list", ".", "tensors", ")", "\n", "out", ":", "Dict", "[", "str", ",", "NestedTensor", "]", "=", "{", "}", "\n", "for", "name", ",", "x", "in", "xs", ".", "items", "(", ")", ":", "\n", "                ", "m", "=", "tensor_list", ".", "mask", "\n", "assert", "m", "is", "not", "None", "\n", "mask", "=", "F", ".", "interpolate", "(", "m", "[", "None", "]", ".", "float", "(", ")", ",", "size", "=", "x", ".", "shape", "[", "-", "2", ":", "]", ")", ".", "to", "(", "torch", ".", "bool", ")", "[", "0", "]", "\n", "out", "[", "name", "]", "=", "NestedTensor", "(", "x", ",", "mask", ")", "\n", "", "", "else", ":", "\n", "            ", "out", "=", "self", ".", "body", "(", "tensor_list", ")", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.dddzg_up-detr.models.backbone.Backbone.__init__": [[97, 111], ["backbone.BackboneBase.__init__", "getattr", "torch.hub.load_state_dict_from_url", "torch.hub.load_state_dict_from_url", "torch.hub.load_state_dict_from_url", "torch.hub.load_state_dict_from_url", "backbone.load_state_dict", "k.replace", "torch.hub.load_state_dict_from_url.items", "torch.hub.load_state_dict_from_url.items"], "methods", ["home.repos.pwc.inspect_result.dddzg_up-detr.models.backbone.Joiner.__init__"], ["def", "__init__", "(", "self", ",", "name", ":", "str", ",", "\n", "train_backbone", ":", "bool", ",", "\n", "return_interm_layers", ":", "bool", ",", "\n", "dilation", ":", "bool", ")", ":", "\n", "        ", "backbone", "=", "getattr", "(", "torchvision", ".", "models", ",", "name", ")", "(", "\n", "replace_stride_with_dilation", "=", "[", "False", ",", "False", ",", "dilation", "]", ",", "\n", "pretrained", "=", "False", ",", "norm_layer", "=", "FrozenBatchNorm2d", ")", "\n", "# load the SwAV pre-training model from the url instead of supervised pre-training model", "\n", "if", "name", "==", "'resnet50'", ":", "\n", "            ", "checkpoint", "=", "torch", ".", "hub", ".", "load_state_dict_from_url", "(", "'https://dl.fbaipublicfiles.com/deepcluster/swav_800ep_pretrain.pth.tar'", ",", "map_location", "=", "\"cpu\"", ")", "\n", "state_dict", "=", "{", "k", ".", "replace", "(", "\"module.\"", ",", "\"\"", ")", ":", "v", "for", "k", ",", "v", "in", "checkpoint", ".", "items", "(", ")", "}", "\n", "backbone", ".", "load_state_dict", "(", "state_dict", ",", "strict", "=", "False", ")", "\n", "", "num_channels", "=", "512", "if", "name", "in", "(", "'resnet18'", ",", "'resnet34'", ")", "else", "2048", "\n", "super", "(", ")", ".", "__init__", "(", "backbone", ",", "train_backbone", ",", "num_channels", ",", "return_interm_layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dddzg_up-detr.models.backbone.Joiner.__init__": [[114, 116], ["torch.nn.Sequential.__init__"], "methods", ["home.repos.pwc.inspect_result.dddzg_up-detr.models.backbone.Joiner.__init__"], ["    ", "def", "__init__", "(", "self", ",", "backbone", ",", "position_embedding", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "backbone", ",", "position_embedding", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dddzg_up-detr.models.backbone.Joiner.forward": [[117, 131], ["isinstance", "xs.items", "list", "out.append", "pos.append"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "tensor_list", ")", ":", "\n", "        ", "\"\"\"supports both NestedTensor and torch.Tensor\n        \"\"\"", "\n", "if", "isinstance", "(", "tensor_list", ",", "NestedTensor", ")", ":", "\n", "            ", "xs", "=", "self", "[", "0", "]", "(", "tensor_list", ")", "\n", "out", ":", "List", "[", "NestedTensor", "]", "=", "[", "]", "\n", "pos", "=", "[", "]", "\n", "for", "name", ",", "x", "in", "xs", ".", "items", "(", ")", ":", "\n", "                ", "out", ".", "append", "(", "x", ")", "\n", "# position encoding", "\n", "pos", ".", "append", "(", "self", "[", "1", "]", "(", "x", ")", ".", "to", "(", "x", ".", "tensors", ".", "dtype", ")", ")", "\n", "", "return", "out", ",", "pos", "\n", "", "else", ":", "\n", "            ", "return", "list", "(", "self", "[", "0", "]", "(", "tensor_list", ")", ".", "values", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dddzg_up-detr.models.backbone.build_backbone": [[134, 142], ["position_encoding.build_position_encoding", "backbone.Backbone", "backbone.Joiner"], "function", ["home.repos.pwc.inspect_result.dddzg_up-detr.models.position_encoding.build_position_encoding"], ["", "", "", "def", "build_backbone", "(", "args", ")", ":", "\n", "    ", "position_embedding", "=", "build_position_encoding", "(", "args", ")", "\n", "train_backbone", "=", "args", ".", "lr_backbone", ">", "0", "\n", "return_interm_layers", "=", "args", ".", "masks", "\n", "backbone", "=", "Backbone", "(", "args", ".", "backbone", ",", "train_backbone", ",", "return_interm_layers", ",", "args", ".", "dilation", ")", "\n", "model", "=", "Joiner", "(", "backbone", ",", "position_embedding", ")", "\n", "model", ".", "num_channels", "=", "backbone", ".", "num_channels", "\n", "return", "model", "\n", "", ""]]}