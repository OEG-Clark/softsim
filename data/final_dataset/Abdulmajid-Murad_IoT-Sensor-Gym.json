{"home.repos.pwc.inspect_result.Abdulmajid-Murad_IoT-Sensor-Gym.None.evaluate.build_env": [[7, 34], ["multiprocessing.cpu_count", "random.seed", "set_global_seeds", "MPI.COMM_WORLD.Get_rank", "SubprocVecEnv", "DummyVecEnv", "env_single.seed", "Monitor", "evaluate.build_env.make_env"], "function", ["home.repos.pwc.inspect_result.Abdulmajid-Murad_IoT-Sensor-Gym.None.SensorGym.SensorGymEnv.seed", "home.repos.pwc.inspect_result.Abdulmajid-Murad_IoT-Sensor-Gym.None.SensorGym.SensorGymEnv.seed"], ["def", "build_env", "(", "env_single", ",", "nenv", "=", "None", ")", ":", "\n", "    ", "import", "multiprocessing", "\n", "from", "baselines", ".", "common", ".", "vec_env", ".", "subproc_vec_env", "import", "SubprocVecEnv", "\n", "from", "baselines", ".", "common", ".", "vec_env", ".", "dummy_vec_env", "import", "DummyVecEnv", "\n", "from", "baselines", ".", "bench", "import", "Monitor", "\n", "from", "baselines", "import", "logger", "\n", "from", "baselines", ".", "common", "import", "set_global_seeds", "\n", "try", ":", "\n", "        ", "from", "mpi4py", "import", "MPI", "\n", "", "except", "ImportError", ":", "\n", "        ", "MPI", "=", "None", "\n", "", "ncpu", "=", "multiprocessing", ".", "cpu_count", "(", ")", "\n", "if", "sys", ".", "platform", "==", "'darwin'", ":", "ncpu", "//=", "2", "\n", "nenv", "=", "nenv", "or", "ncpu", "\n", "mpi_rank", "=", "MPI", ".", "COMM_WORLD", ".", "Get_rank", "(", ")", "if", "MPI", "else", "0", "\n", "seed", "=", "random", ".", "seed", "(", "0", ")", "\n", "def", "make_env", "(", "rank", ")", ":", "# pylint: disable=C0111", "\n", "        ", "def", "_thunk", "(", ")", ":", "\n", "            ", "env_single", ".", "seed", "(", "seed", "+", "10000", "*", "mpi_rank", "+", "rank", "if", "seed", "is", "not", "None", "else", "None", ")", "\n", "env", "=", "Monitor", "(", "env_single", ",", "\n", "logger", ".", "get_dir", "(", ")", "and", "os", ".", "path", ".", "join", "(", "logger", ".", "get_dir", "(", ")", ",", "str", "(", "mpi_rank", ")", "+", "'.'", "+", "str", "(", "rank", ")", ")", ",", "\n", "allow_early_resets", "=", "True", ")", "\n", "return", "env", "\n", "", "return", "_thunk", "\n", "", "set_global_seeds", "(", "seed", ")", "\n", "if", "nenv", ">", "1", ":", "return", "SubprocVecEnv", "(", "[", "make_env", "(", "i", "+", "0", ")", "for", "i", "in", "range", "(", "nenv", ")", "]", ")", "\n", "else", ":", "return", "DummyVecEnv", "(", "[", "make_env", "(", "0", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Abdulmajid-Murad_IoT-Sensor-Gym.None.evaluate.train": [[35, 52], ["logger.set_level", "evaluate.build_env", "alg_module.learn"], "function", ["home.repos.pwc.inspect_result.Abdulmajid-Murad_IoT-Sensor-Gym.None.run.build_env"], ["", "def", "train", "(", "num_timesteps", ",", "lr", ",", "num_layers", ",", "num_hidden", ",", "env_single", ",", "nenv", ",", "nsteps", ",", "lam", ",", "gamma", ")", ":", "\n", "    ", "import", "baselines", ".", "ppo2", ".", "ppo2", "as", "alg_module", "\n", "from", "baselines", "import", "logger", "\n", "logger", ".", "set_level", "(", "logger", ".", "DISABLED", ")", "\n", "env", "=", "build_env", "(", "env_single", ",", "nenv", ")", "\n", "alg_kwargs", "=", "{", "'network'", ":", "'mlp'", ",", "'num_layers'", ":", "num_layers", ",", "'num_hidden'", ":", "num_hidden", "}", "\n", "model", "=", "alg_module", ".", "learn", "(", "env", "=", "env", ",", "\n", "total_timesteps", "=", "num_timesteps", ",", "\n", "nsteps", "=", "nsteps", ",", "\n", "nminibatches", "=", "4", ",", "\n", "lam", "=", "lam", ",", "gamma", "=", "gamma", ",", "noptepochs", "=", "4", ",", "log_interval", "=", "1", ",", "\n", "ent_coef", "=", ".01", ",", "\n", "lr", "=", "lambda", "f", ":", "f", "*", "lr", ",", "\n", "cliprange", "=", "lambda", "f", ":", "f", "*", "0.1", ",", "\n", "**", "alg_kwargs", "\n", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.Abdulmajid-Murad_IoT-Sensor-Gym.None.evaluate.evaluate": [[53, 94], ["tf.reset_default_graph", "get_session", "get_session.close", "sensor.SensorEnv", "evaluate.train", "train.load", "sensor.SensorEnv.reset", "range", "pandas.DataFrame", "history[].rolling().std", "history[].fillna", "history[].mean", "abs", "history[].sum", "train.step", "sensor.SensorEnv.step", "pd.DataFrame.append", "history[].rolling", "history[].sum", "history[].sum"], "function", ["home.repos.pwc.inspect_result.Abdulmajid-Murad_IoT-Sensor-Gym.None.SensorGym.SensorGymEnv.close", "home.repos.pwc.inspect_result.Abdulmajid-Murad_IoT-Sensor-Gym.None.run.train", "home.repos.pwc.inspect_result.Abdulmajid-Murad_IoT-Sensor-Gym.None.SensorGym.SensorGymEnv.reset", "home.repos.pwc.inspect_result.Abdulmajid-Murad_IoT-Sensor-Gym.None.SensorGym.SensorGymEnv.step", "home.repos.pwc.inspect_result.Abdulmajid-Murad_IoT-Sensor-Gym.None.SensorGym.SensorGymEnv.step"], ["", "def", "evaluate", "(", "params", ",", "model_path", ")", ":", "\n", "    ", "import", "tensorflow", "as", "tf", "\n", "from", "baselines", ".", "common", ".", "tf_util", "import", "get_session", "\n", "tf", ".", "reset_default_graph", "(", ")", "\n", "sess", "=", "get_session", "(", ")", "\n", "sess", ".", "close", "(", ")", "\n", "history", "=", "[", "]", "\n", "env", "=", "SensorEnv", "(", "cont_actions", "=", "params", "[", "'cont_actions'", "]", ",", "\n", "forecast_days", "=", "params", "[", "'forecast_days'", "]", ",", "\n", "sparse", "=", "params", "[", "'sparse'", "]", ",", "\n", "episode_len", "=", "params", "[", "'episode_len'", "]", ",", "\n", "damping_factor", "=", "params", "[", "'damping_factor'", "]", ",", "\n", "init_buffer_state", "=", "params", "[", "'init_buffer_state'", "]", ",", "\n", "failure_penalty", "=", "params", "[", "'failure_penalty'", "]", ",", "\n", "solar_file", "=", "'data/Tokyo_2011-eng.txt'", "\n", ")", "\n", "model", "=", "train", "(", "num_timesteps", "=", "0", ",", "\n", "lr", "=", "params", "[", "'lr'", "]", ",", "\n", "num_layers", "=", "params", "[", "'num_layers'", "]", ",", "\n", "num_hidden", "=", "params", "[", "'num_hidden'", "]", ",", "\n", "env_single", "=", "env", ",", "\n", "nenv", "=", "1", ",", "\n", "nsteps", "=", "params", "[", "'nsteps'", "]", ",", "\n", "lam", "=", "params", "[", "'lam'", "]", ",", "\n", "gamma", "=", "params", "[", "'gamma'", "]", ")", "\n", "model", ".", "load", "(", "model_path", ")", "\n", "ob", "=", "env", ".", "reset", "(", "episode_start", "=", "env", ".", "daterange", "[", "0", "]", ",", "buffer_state", "=", "10", ")", "\n", "for", "_", "in", "range", "(", "364", "*", "24", ")", ":", "\n", "        ", "action", ",", "_", ",", "_", ",", "_", "=", "model", ".", "step", "(", "ob", ")", "\n", "next_ob", ",", "r", ",", "done", ",", "info", "=", "env", ".", "step", "(", "action", ")", "\n", "history", ".", "append", "(", "info", ")", "\n", "ob", "=", "next_ob", "\n", "", "history", "=", "pd", ".", "DataFrame", "(", "history", ")", "\n", "history", ".", "index", "=", "history", "[", "'timestamp'", "]", "\n", "history", "[", "'std'", "]", "=", "history", "[", "'duty_cycle'", "]", ".", "rolling", "(", "window", "=", "24", ",", "min_periods", "=", "1", ")", ".", "std", "(", ")", "\n", "history", "[", "'std'", "]", ".", "fillna", "(", "0", ",", "inplace", "=", "True", ")", "\n", "variance", "=", "history", "[", "'std'", "]", ".", "mean", "(", ")", "\n", "wasted_energy", "=", "abs", "(", "history", "[", "'energy_wasted'", "]", ".", "sum", "(", ")", "/", "env", ".", "B_max", ")", "\n", "failures", "=", "history", "[", "'failure'", "]", ".", "sum", "(", ")", "\n", "utilized_energy", "=", "(", "history", "[", "'duty_cycle'", "]", ".", "sum", "(", ")", "*", "5", ")", "/", "env", ".", "B_max", "\n", "return", "[", "history", ",", "variance", ",", "wasted_energy", ",", "failures", ",", "utilized_energy", "]", "", "", ""]], "home.repos.pwc.inspect_result.Abdulmajid-Murad_IoT-Sensor-Gym.None.SensorGym.SensorGymEnv.__init__": [[42, 85], ["pandas.Timedelta", "SensorGym.SensorGymEnv._create_solar_context", "[].max", "SensorGym.SensorGymEnv.solar_context[].max", "[].max", "numpy.array", "numpy.array", "gym.spaces.Box", "SensorGym.SensorGymEnv.seed", "SensorGym.SensorGymEnv.reset", "gym.spaces.Box", "gym.spaces.Discrete", "str"], "methods", ["home.repos.pwc.inspect_result.Abdulmajid-Murad_IoT-Sensor-Gym.None.SensorGym.SensorGymEnv._create_solar_context", "home.repos.pwc.inspect_result.Abdulmajid-Murad_IoT-Sensor-Gym.None.SensorGym.SensorGymEnv.seed", "home.repos.pwc.inspect_result.Abdulmajid-Murad_IoT-Sensor-Gym.None.SensorGym.SensorGymEnv.reset"], ["def", "__init__", "(", "self", ",", "solar_file", "=", "'solar_data/Tokyo_2010.csv'", ",", "\n", "city", "=", "'Tokyo'", ",", "forecast_days", "=", "3", ",", "w_forcast_err", "=", "0.2", ",", "\n", "episode_len", "=", "365", ",", "time_unit", "=", "'h'", ",", "delta", "=", "1", ",", "\n", "B_max", "=", "40000", ",", "B_fail", "=", "0", ",", "init_buffer_state", "=", "60", ",", "min_duty_cycle", "=", "20.0", ",", "\n", "damping_factor", "=", "0.01", ",", "sparsity", "=", "24", ",", "failure_penalty", "=", "-", "100", ",", "cont_actions", "=", "True", ")", ":", "\n", "\n", "        ", "self", ".", "damping_factor", "=", "damping_factor", "\n", "self", ".", "sparse", "=", "sparsity", "\n", "self", ".", "sparse_counter", "=", "1", "\n", "self", ".", "B_max", "=", "B_max", "\n", "self", ".", "delt", "=", "delta", "\n", "self", ".", "time_unit", "=", "time_unit", "\n", "self", ".", "time_delta", "=", "pd", ".", "Timedelta", "(", "str", "(", "delta", ")", "+", "time_unit", ")", "\n", "self", ".", "episode_len", "=", "episode_len", "*", "24", "\n", "self", ".", "init_buffer_state", "=", "init_buffer_state", "\n", "self", ".", "last_duty_cycles", "=", "[", "]", "\n", "self", ".", "cont_actions", "=", "cont_actions", "\n", "self", ".", "failure_penalty", "=", "failure_penalty", "*", "sparsity", "\n", "self", ".", "B_fail", "=", "B_fail", "\n", "self", ".", "min_duty_cycle", "=", "min_duty_cycle", "\n", "self", ".", "max_duty_cycle", "=", "100.0", "\n", "\n", "#creating env's external context(solar and weather data, time)", "\n", "self", ".", "solar_context", "=", "self", ".", "_create_solar_context", "(", "forecast_days", ",", "solar_file", ",", "w_forcast_err", ",", "city", ")", "\n", "self", ".", "daterange", "=", "self", ".", "solar_context", "[", "'w_forecast'", "]", ".", "index", "\n", "\n", "# Setting action_space", "\n", "if", "self", ".", "cont_actions", ":", "\n", "            ", "self", ".", "action_space", "=", "spaces", ".", "Box", "(", "low", "=", "self", ".", "min_duty_cycle", ",", "high", "=", "self", ".", "max_duty_cycle", ",", "shape", "=", "(", "1", ",", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "action_space", "=", "spaces", ".", "Discrete", "(", "11", ")", "\n", "\n", "# Setting observation_space", "\n", "", "max_e_buffer", "=", "100.0", "\n", "max_e_harvest", "=", "self", ".", "solar_context", "[", "'dataframe'", "]", "[", "'e_harvest'", "]", ".", "max", "(", ")", "\n", "max_w_forecast", "=", "self", ".", "solar_context", "[", "'w_forecast'", "]", ".", "max", "(", ")", "\n", "max_zenith", "=", "self", ".", "solar_context", "[", "'dataframe'", "]", "[", "'zenith'", "]", ".", "max", "(", ")", "\n", "self", ".", "high_state", "=", "np", ".", "array", "(", "[", "max_e_buffer", ",", "max_e_harvest", ",", "max_w_forecast", ",", "max_zenith", "]", ")", "\n", "self", ".", "low_state", "=", "np", ".", "array", "(", "[", "0.0", ",", "0.0", ",", "0.0", ",", "-", "max_zenith", "]", ")", "\n", "self", ".", "observation_space", "=", "spaces", ".", "Box", "(", "low", "=", "self", ".", "low_state", ",", "high", "=", "self", ".", "high_state", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "self", ".", "seed", "(", ")", "\n", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Abdulmajid-Murad_IoT-Sensor-Gym.None.SensorGym.SensorGymEnv.step": [[88, 159], ["numpy.squeeze", "SensorGym.SensorGymEnv._solar_intake", "SensorGym.SensorGymEnv._energy_buffer", "SensorGym.SensorGymEnv.last_duty_cycles.append", "numpy.array", "numpy.isnan", "numpy.clip", "SensorGym.SensorGymEnv.action_space.contains", "int", "int", "type", "gym.logger.warn", "sum", "sum", "sum", "zip", "zip"], "methods", ["home.repos.pwc.inspect_result.Abdulmajid-Murad_IoT-Sensor-Gym.None.SensorGym.SensorGymEnv._solar_intake", "home.repos.pwc.inspect_result.Abdulmajid-Murad_IoT-Sensor-Gym.None.SensorGym.SensorGymEnv._energy_buffer"], ["", "def", "step", "(", "self", ",", "action", ")", ":", "\n", "        ", "\"\"\"Run one timestep of the environment's dynamics. \n        Args:\n            action (object): duty cycle provided by the agent\n        Returns:\n            observation (object): agent's observation of the current environment\n            reward (float) : amount of reward returned after previous action\n            done (bool): whether the episode has ended or the energy buffer reached B_fail \n            info (dict): contains auxiliary diagnostic information \n        \"\"\"", "\n", "#make sure the action is legal(within the action space)", "\n", "assert", "not", "np", ".", "isnan", "(", "action", ")", "\n", "action", "=", "np", ".", "squeeze", "(", "action", ")", "\n", "if", "self", ".", "cont_actions", ":", "\n", "            ", "duty_cycle", "=", "np", ".", "clip", "(", "action", ",", "self", ".", "min_duty_cycle", ",", "self", ".", "max_duty_cycle", ")", "\n", "", "else", ":", "\n", "            ", "assert", "self", ".", "action_space", ".", "contains", "(", "action", ")", ",", "\"%r (%s) invalied\"", "%", "(", "action", ",", "type", "(", "action", ")", ")", "\n", "duty_cycle", "=", "(", "action", ")", "\n", "\n", "#get external environment's context at the current timestep (self.t)", "\n", "", "e_harvest", ",", "w_forecast", ",", "zenith", "=", "self", ".", "_solar_intake", "(", "self", ".", "t", ",", "self", ".", "solar_context", ")", "\n", "\n", "# calculate the consumed energy", "\n", "e_consumed", "=", "duty_cycle", "*", "5", "# based on TMote Sky node spec (mWh)", "\n", "buffer_state_next", ",", "energy_wasted", ",", "failure", "=", "self", ".", "_energy_buffer", "(", "self", ".", "t", ",", "e_harvest", ",", "e_consumed", ",", "self", ".", "buffer_state", ")", "\n", "self", ".", "buffer_state", "=", "buffer_state_next", "\n", "\n", "# calculate the reward based ont the reward function", "\n", "self", ".", "last_duty_cycles", ".", "append", "(", "duty_cycle", ")", "\n", "if", "self", ".", "sparse", "==", "1", ":", "\n", "            ", "reward", "=", "int", "(", "self", ".", "last_duty_cycles", "[", "-", "1", "]", "-", "self", ".", "damping_factor", "*", "sum", "(", "[", "(", "t", "-", "s", ")", "**", "2", "for", "s", ",", "t", "in", "zip", "(", "self", ".", "last_duty_cycles", ",", "self", ".", "last_duty_cycles", "[", "1", ":", "]", ")", "]", ")", ")", "\n", "del", "self", ".", "last_duty_cycles", "[", ":", "-", "1", "]", "\n", "", "elif", "(", "self", ".", "sparse_counter", "%", "self", ".", "sparse", ")", "==", "0", ":", "\n", "            ", "reward", "=", "int", "(", "sum", "(", "self", ".", "last_duty_cycles", ")", "-", "self", ".", "damping_factor", "*", "sum", "(", "[", "(", "t", "-", "s", ")", "**", "2", "for", "s", ",", "t", "in", "zip", "(", "self", ".", "last_duty_cycles", ",", "self", ".", "last_duty_cycles", "[", "1", ":", "]", ")", "]", ")", ")", "\n", "self", ".", "sparse_counter", "=", "1", "\n", "self", ".", "last_duty_cycles", "=", "[", "]", "\n", "", "else", ":", "\n", "            ", "reward", "=", "0", "\n", "self", ".", "sparse_counter", "+=", "1", "\n", "\n", "#if the energy buffer reached B_fail, give penalty and end the episode.    ", "\n", "", "if", "failure", ":", "\n", "            ", "duty_cycle", "=", "0", "\n", "reward", "=", "self", ".", "failure_penalty", "\n", "done", "=", "True", "\n", "\n", "#Increment the timestep of the environment's dynamics", "\n", "", "if", "(", "self", ".", "t", ".", "is_year_end", ")", ":", "\n", "            ", "self", ".", "t", "=", "self", ".", "daterange", "[", "0", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "t", "+=", "self", ".", "time_delta", "\n", "\n", "# check whether the episode has ended, warns the agent", "\n", "", "self", ".", "remaining_epochs", "-=", "1", "\n", "done", "=", "self", ".", "remaining_epochs", "<=", "0", "\n", "if", "done", ":", "\n", "            ", "if", "self", ".", "steps_beyond_done", "is", "None", ":", "\n", "                ", "self", ".", "steps_beyond_done", "=", "0", "\n", "", "else", ":", "\n", "                ", "if", "self", ".", "steps_beyond_done", "==", "0", ":", "\n", "                    ", "logger", ".", "warn", "(", "\"You are calling 'step()' even though this environment \\\n                             has already returned done = True. \"", ")", "\n", "", "self", ".", "steps_beyond_done", "+=", "1", "\n", "\n", "# ", "\n", "", "", "self", ".", "ob", "=", "np", ".", "array", "(", "[", "self", ".", "buffer_state", ",", "e_harvest", ",", "w_forecast", ",", "zenith", "]", ")", "\n", "info", "=", "{", "'timestamp'", ":", "self", ".", "t", "-", "self", ".", "time_delta", ",", "'buffer'", ":", "self", ".", "buffer_state", ",", "'e_harvest'", ":", "e_harvest", ",", "\n", "'w_forecast'", ":", "w_forecast", ",", "'reward'", ":", "reward", ",", "'consumption'", ":", "e_consumed", ",", "'duty_cycle'", ":", "duty_cycle", ",", "'action'", ":", "action", ",", "\n", "'energy_wasted'", ":", "energy_wasted", ",", "'failure'", ":", "failure", ",", "'zenith'", ":", "zenith", "\n", "}", "\n", "return", "(", "self", ".", "ob", ",", "reward", ",", "done", ",", "info", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Abdulmajid-Murad_IoT-Sensor-Gym.None.SensorGym.SensorGymEnv.reset": [[161, 185], ["SensorGym.SensorGymEnv._solar_intake", "numpy.array", "numpy.random.randint", "len"], "methods", ["home.repos.pwc.inspect_result.Abdulmajid-Murad_IoT-Sensor-Gym.None.SensorGym.SensorGymEnv._solar_intake"], ["", "def", "reset", "(", "self", ",", "episode_start", "=", "None", ",", "buffer_state", "=", "None", ")", ":", "\n", "        ", "\"\"\"Resets the state of the environment and returns an initial observation.\n        Returns: \n            observation (object): the initial observation.\n        \"\"\"", "\n", "#check where to in the year to start the episode, otherwise make it random.", "\n", "if", "episode_start", "is", "None", ":", "\n", "            ", "index", "=", "np", ".", "random", ".", "randint", "(", "len", "(", "self", ".", "daterange", ")", ")", "\n", "self", ".", "t", "=", "self", ".", "daterange", "[", "index", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "t", "=", "episode_start", "\n", "\n", "", "if", "buffer_state", "is", "None", ":", "\n", "            ", "self", ".", "buffer_state", "=", "self", ".", "init_buffer_state", "# np.random.randint(5,100)", "\n", "", "else", ":", "\n", "            ", "self", ".", "buffer_state", "=", "buffer_state", "\n", "\n", "", "e_harvest", ",", "w_forecast", ",", "zenith", "=", "self", ".", "_solar_intake", "(", "self", ".", "t", ",", "self", ".", "solar_context", ")", "\n", "self", ".", "ob", "=", "np", ".", "array", "(", "[", "self", ".", "buffer_state", ",", "e_harvest", ",", "w_forecast", ",", "zenith", "]", ")", "\n", "\n", "self", ".", "remaining_epochs", "=", "self", ".", "episode_len", "\n", "self", ".", "steps_beyond_done", "=", "None", "\n", "\n", "return", "self", ".", "ob", "\n", "\n"]], "home.repos.pwc.inspect_result.Abdulmajid-Murad_IoT-Sensor-Gym.None.SensorGym.SensorGymEnv._create_solar_context": [[186, 211], ["pandas.read_csv", "astral.Astral", "pandas.read_csv.index.to_series().apply", "pandas.read_csv.index.to_series().apply", "numpy.random.uniform", "pandas.read_csv.drop", "dfx[].resample().sum", "range", "dfx[].std", "dfx[].std", "pandas.read_csv.sort_index", "dfx[].resample().sum.rolling().sum().shift", "pandas.read_csv.index.to_series", "astral.Astral.solar_zenith", "dfx[].mean", "pandas.read_csv.index.to_series", "astral.Astral.solar_azimuth", "dfx[].mean", "dfx[].resample", "pandas.to_timedelta", "dfx[].resample().sum.rolling().sum", "dfx[].resample().sum.rolling", "str"], "methods", ["None"], ["", "def", "_create_solar_context", "(", "self", ",", "forecast_days", ",", "solar_file", ",", "w_forcast_err", ",", "city", ")", ":", "\n", "        ", "solar_panel_config", "=", "{", "'voltage_t'", ":", "7.32", ",", "'area_j'", ":", "0.0165", ",", "'efficiency_j'", ":", "0.15", "}", "\n", "dfx", "=", "pd", ".", "read_csv", "(", "solar_file", ",", "index_col", "=", "0", ",", "parse_dates", "=", "True", ")", "\n", "a", "=", "astral", ".", "Astral", "(", ")", "\n", "location", "=", "a", "[", "city", "]", "\n", "lat", "=", "location", ".", "latitude", "\n", "lon", "=", "location", ".", "longitude", "\n", "dfx", "[", "'zenith'", "]", "=", "dfx", ".", "index", ".", "to_series", "(", ")", ".", "apply", "(", "lambda", "timestamp", ":", "a", ".", "solar_zenith", "(", "timestamp", ",", "lat", ",", "lon", ")", ")", "\n", "dfx", "[", "'zenith'", "]", "=", "(", "dfx", "[", "'zenith'", "]", "-", "dfx", "[", "'zenith'", "]", ".", "mean", "(", ")", ")", "/", "dfx", "[", "'zenith'", "]", ".", "std", "(", ")", "\n", "dfx", "[", "'azimuth'", "]", "=", "dfx", ".", "index", ".", "to_series", "(", ")", ".", "apply", "(", "lambda", "timestamp", ":", "a", ".", "solar_azimuth", "(", "timestamp", ",", "lat", ",", "lon", ")", ")", "\n", "dfx", "[", "'azimuth'", "]", "=", "(", "dfx", "[", "'azimuth'", "]", "-", "dfx", "[", "'azimuth'", "]", ".", "mean", "(", ")", ")", "/", "dfx", "[", "'azimuth'", "]", ".", "std", "(", ")", "\n", "dfx", ".", "loc", "[", "dfx", ".", "index", "[", "0", "]", "-", "pd", ".", "to_timedelta", "(", "1", ",", "unit", "=", "'h'", ")", "]", "=", "dfx", ".", "loc", "[", "dfx", ".", "index", "[", "-", "1", "]", "]", "\n", "dfx", "=", "dfx", ".", "sort_index", "(", ")", "[", ":", "-", "1", "]", "\n", "area", "=", "solar_panel_config", "[", "'area_j'", "]", "\n", "efficiency", "=", "solar_panel_config", "[", "'efficiency_j'", "]", "\n", "dfx", "[", "'e_harvest'", "]", "=", "dfx", "[", "'a'", "]", "*", "area", "*", "1E9", "*", "efficiency", "/", "(", "60", "*", "60", ")", "\n", "dfx", "[", "'w_forecast'", "]", "=", "np", ".", "random", ".", "uniform", "(", "low", "=", "(", "dfx", "[", "'a'", "]", "-", "(", "dfx", "[", "'a'", "]", "*", "w_forcast_err", ")", ")", ",", "high", "=", "(", "dfx", "[", "'a'", "]", "+", "(", "dfx", "[", "'a'", "]", "*", "w_forcast_err", ")", ")", ")", "\n", "dfx", "[", "'w_forecast'", "]", "=", "dfx", "[", "'w_forecast'", "]", "*", "area", "*", "1E9", "*", "efficiency", "/", "(", "60", "*", "60", ")", "\n", "dfx", ".", "drop", "(", "'a'", ",", "axis", "=", "1", ",", "inplace", "=", "True", ")", "\n", "forecast_day", "=", "dfx", "[", "'w_forecast'", "]", ".", "resample", "(", "'D'", ")", ".", "sum", "(", ")", "\n", "daterange", "=", "forecast_day", ".", "index", "\n", "for", "i", "in", "range", "(", "forecast_days", ")", ":", "\n", "            ", "forecast_day", ".", "loc", "[", "forecast_day", ".", "index", "[", "-", "1", "]", "+", "1", "*", "daterange", ".", "freq", "]", "=", "forecast_day", ".", "loc", "[", "forecast_day", ".", "index", "[", "i", "]", "]", "\n", "", "forecast", "=", "forecast_day", ".", "rolling", "(", "str", "(", "forecast_days", ")", "+", "'D'", ")", ".", "sum", "(", ")", ".", "shift", "(", "-", "(", "forecast_days", "-", "1", ")", ")", "[", ":", "-", "forecast_days", "]", "\n", "return", "{", "'dataframe'", ":", "dfx", ",", "'w_forecast'", ":", "forecast", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.Abdulmajid-Murad_IoT-Sensor-Gym.None.SensorGym.SensorGymEnv._solar_intake": [[214, 222], ["dfx.index.get_loc", "t.date"], "methods", ["None"], ["", "def", "_solar_intake", "(", "self", ",", "t", ",", "solar_context", ")", ":", "\n", "        ", "dfx", "=", "solar_context", "[", "'dataframe'", "]", "\n", "index", "=", "dfx", ".", "index", ".", "get_loc", "(", "t", ",", "method", "=", "'nearest'", ")", "\n", "zenith", "=", "dfx", "[", "'zenith'", "]", ".", "iloc", "[", "index", "]", "\n", "e_harvest", "=", "dfx", "[", "'e_harvest'", "]", ".", "iloc", "[", "index", "]", "\n", "w_forecast", "=", "solar_context", "[", "'w_forecast'", "]", "\n", "w_forecast", "=", "w_forecast", "[", "t", ".", "date", "(", ")", "]", "\n", "return", "e_harvest", ",", "w_forecast", ",", "zenith", "\n", "\n"]], "home.repos.pwc.inspect_result.Abdulmajid-Murad_IoT-Sensor-Gym.None.SensorGym.SensorGymEnv._energy_buffer": [[223, 235], ["None"], "methods", ["None"], ["", "def", "_energy_buffer", "(", "self", ",", "t", ",", "e_harvest", ",", "e_consumed", ",", "buffer_state", ")", ":", "\n", "        ", "f", "=", "100", "/", "self", ".", "B_max", "\n", "buffer_state_next", "=", "buffer_state", "+", "f", "*", "(", "e_harvest", "-", "e_consumed", ")", "\n", "energy_wasted", "=", "0", "\n", "failure", "=", "False", "\n", "if", "buffer_state_next", ">", "100", ":", "\n", "            ", "energy_wasted", "=", "-", "(", "buffer_state_next", "-", "100", ")", "/", "f", "\n", "buffer_state_next", "=", "100", "\n", "", "elif", "buffer_state_next", "<", "self", ".", "B_fail", "*", "f", ":", "\n", "            ", "failure", "=", "True", "\n", "buffer_state_next", "=", "buffer_state", "\n", "", "return", "buffer_state_next", ",", "energy_wasted", ",", "failure", "\n", "\n"]], "home.repos.pwc.inspect_result.Abdulmajid-Murad_IoT-Sensor-Gym.None.SensorGym.SensorGymEnv.render": [[236, 246], ["print", "print", "super().render"], "methods", ["home.repos.pwc.inspect_result.Abdulmajid-Murad_IoT-Sensor-Gym.None.SensorGym.SensorGymEnv.render"], ["", "def", "render", "(", "self", ",", "mode", "=", "'human'", ")", ":", "\n", "        ", "\"\"\"Renders the environment.\n        Not implemented\n        \"\"\"", "\n", "if", "mode", "==", "'rgb_array'", ":", "\n", "            ", "print", "(", "'return np.array(...), RGB fram suitable for video'", ")", "\n", "", "elif", "mode", "==", "'human'", ":", "\n", "            ", "print", "(", "'pop up window and render'", ")", "\n", "", "else", ":", "\n", "            ", "super", "(", "SensorEnv", ",", "self", ")", ".", "render", "(", "mode", "=", "mode", ")", "#just raise an exception", "\n", "\n"]], "home.repos.pwc.inspect_result.Abdulmajid-Murad_IoT-Sensor-Gym.None.SensorGym.SensorGymEnv.seed": [[247, 252], ["gym.utils.seeding.np_random"], "methods", ["None"], ["", "", "def", "seed", "(", "self", ",", "seed", "=", "None", ")", ":", "\n", "        ", "\"\"\"Sets the seed for this env's random number generator(s).\n        \"\"\"", "\n", "self", ".", "np_random", ",", "seed", "=", "seeding", ".", "np_random", "(", "seed", ")", "\n", "return", "[", "seed", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Abdulmajid-Murad_IoT-Sensor-Gym.None.SensorGym.SensorGymEnv.close": [[253, 259], ["print"], "methods", ["None"], ["", "def", "close", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Environments will automatically close() themselves when\n        garbage collected or when the program exits.\n        \"\"\"", "\n", "print", "(", "'Perform any necessary cleanup'", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Abdulmajid-Murad_IoT-Sensor-Gym.None.run.build_env": [[10, 35], ["multiprocessing.cpu_count", "random.seed", "set_global_seeds", "MPI.COMM_WORLD.Get_rank", "SubprocVecEnv", "DummyVecEnv", "env_single.seed", "Monitor", "run.build_env.make_env"], "function", ["home.repos.pwc.inspect_result.Abdulmajid-Murad_IoT-Sensor-Gym.None.SensorGym.SensorGymEnv.seed", "home.repos.pwc.inspect_result.Abdulmajid-Murad_IoT-Sensor-Gym.None.SensorGym.SensorGymEnv.seed"], ["def", "build_env", "(", "env_single", ",", "nenv", "=", "None", ")", ":", "\n", "    ", "import", "multiprocessing", "\n", "from", "baselines", ".", "common", ".", "vec_env", ".", "subproc_vec_env", "import", "SubprocVecEnv", "\n", "from", "baselines", ".", "common", ".", "vec_env", ".", "dummy_vec_env", "import", "DummyVecEnv", "\n", "from", "baselines", ".", "bench", "import", "Monitor", "\n", "from", "baselines", "import", "logger", "\n", "from", "baselines", ".", "common", "import", "set_global_seeds", "\n", "\n", "MPI", "=", "None", "\n", "ncpu", "=", "multiprocessing", ".", "cpu_count", "(", ")", "\n", "if", "sys", ".", "platform", "==", "'darwin'", ":", "ncpu", "//=", "2", "\n", "nenv", "=", "nenv", "or", "ncpu", "\n", "mpi_rank", "=", "MPI", ".", "COMM_WORLD", ".", "Get_rank", "(", ")", "if", "MPI", "else", "0", "\n", "seed", "=", "random", ".", "seed", "(", "0", ")", "\n", "def", "make_env", "(", "rank", ")", ":", "# pylint: disable=C0111", "\n", "        ", "def", "_thunk", "(", ")", ":", "\n", "            ", "env_single", ".", "seed", "(", "seed", "+", "10000", "*", "mpi_rank", "+", "rank", "if", "seed", "is", "not", "None", "else", "None", ")", "\n", "env", "=", "Monitor", "(", "env_single", ",", "\n", "filename", "=", "None", ",", "#logger.get_dir() and os.path.join(logger.get_dir(), str(mpi_rank) + '.' + str(rank)),", "\n", "allow_early_resets", "=", "True", ")", "\n", "return", "env", "\n", "", "return", "_thunk", "\n", "", "set_global_seeds", "(", "seed", ")", "\n", "if", "nenv", ">", "1", ":", "return", "SubprocVecEnv", "(", "[", "make_env", "(", "i", "+", "0", ")", "for", "i", "in", "range", "(", "nenv", ")", "]", ")", "\n", "else", ":", "return", "DummyVecEnv", "(", "[", "make_env", "(", "0", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Abdulmajid-Murad_IoT-Sensor-Gym.None.run.train": [[36, 53], ["logger.set_level", "run.build_env", "alg_module.learn"], "function", ["home.repos.pwc.inspect_result.Abdulmajid-Murad_IoT-Sensor-Gym.None.run.build_env"], ["", "def", "train", "(", "num_timesteps", ",", "lr", ",", "num_layers", ",", "num_hidden", ",", "env_single", ",", "nenv", ",", "nsteps", ",", "lam", ",", "gamma", ")", ":", "\n", "    ", "import", "baselines", ".", "ppo2", ".", "ppo2", "as", "alg_module", "\n", "from", "baselines", "import", "logger", "\n", "logger", ".", "set_level", "(", "logger", ".", "DISABLED", ")", "\n", "env", "=", "build_env", "(", "env_single", ",", "nenv", ")", "\n", "alg_kwargs", "=", "{", "'network'", ":", "'mlp'", ",", "'num_layers'", ":", "num_layers", ",", "'num_hidden'", ":", "num_hidden", "}", "\n", "model", "=", "alg_module", ".", "learn", "(", "env", "=", "env", ",", "\n", "total_timesteps", "=", "num_timesteps", ",", "\n", "nsteps", "=", "nsteps", ",", "\n", "nminibatches", "=", "4", ",", "\n", "lam", "=", "lam", ",", "gamma", "=", "gamma", ",", "noptepochs", "=", "4", ",", "log_interval", "=", "1000", ",", "\n", "ent_coef", "=", ".01", ",", "\n", "lr", "=", "lambda", "f", ":", "f", "*", "lr", ",", "\n", "cliprange", "=", "lambda", "f", ":", "f", "*", "0.1", ",", "\n", "**", "alg_kwargs", "\n", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.Abdulmajid-Murad_IoT-Sensor-Gym.None.run.evaluate": [[54, 72], ["env.reset", "range", "pandas.DataFrame", "history[].rolling().std", "history[].fillna", "history[].mean", "abs", "history[].sum", "history[].sum", "model.step", "env.step", "pd.DataFrame.append", "history[].rolling", "history[].sum", "history[].sum"], "function", ["home.repos.pwc.inspect_result.Abdulmajid-Murad_IoT-Sensor-Gym.None.SensorGym.SensorGymEnv.reset", "home.repos.pwc.inspect_result.Abdulmajid-Murad_IoT-Sensor-Gym.None.SensorGym.SensorGymEnv.step", "home.repos.pwc.inspect_result.Abdulmajid-Murad_IoT-Sensor-Gym.None.SensorGym.SensorGymEnv.step"], ["", "def", "evaluate", "(", "model", ",", "env", ")", ":", "\n", "    ", "history", "=", "[", "]", "\n", "ob", "=", "env", ".", "reset", "(", "episode_start", "=", "env", ".", "daterange", "[", "0", "]", ",", "buffer_state", "=", "60", ")", "\n", "for", "_", "in", "range", "(", "env", ".", "episode_len", "-", "24", ")", ":", "\n", "        ", "action", ",", "_", ",", "_", ",", "_", "=", "model", ".", "step", "(", "ob", ")", "\n", "next_ob", ",", "r", ",", "done", ",", "info", "=", "env", ".", "step", "(", "action", ")", "\n", "history", ".", "append", "(", "info", ")", "\n", "ob", "=", "next_ob", "\n", "\n", "", "history", "=", "pd", ".", "DataFrame", "(", "history", ")", "\n", "history", "[", "'std'", "]", "=", "history", "[", "'duty_cycle'", "]", ".", "rolling", "(", "window", "=", "24", ",", "min_periods", "=", "1", ")", ".", "std", "(", ")", "\n", "history", "[", "'std'", "]", ".", "fillna", "(", "0", ",", "inplace", "=", "True", ")", "\n", "variance", "=", "history", "[", "'std'", "]", ".", "mean", "(", ")", "\n", "wasted_energy", "=", "abs", "(", "history", "[", "'energy_wasted'", "]", ".", "sum", "(", ")", "/", "env", ".", "B_max", ")", "\n", "failures", "=", "history", "[", "'failure'", "]", ".", "sum", "(", ")", "\n", "total_reward", "=", "history", "[", "'reward'", "]", ".", "sum", "(", ")", "\n", "utilized_energy", "=", "(", "history", "[", "'duty_cycle'", "]", ".", "sum", "(", ")", "*", "5", ")", "/", "env", ".", "B_max", "\n", "return", "[", "variance", ",", "wasted_energy", ",", "failures", ",", "total_reward", ",", "utilized_energy", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Abdulmajid-Murad_IoT-Sensor-Gym.None.run.random_objective": [[73, 126], ["timeit.default_timer", "SensorGym.SensorGymEnv", "run.train", "os.path.join", "train.save", "tf.reset_default_graph", "get_session", "get_session.close", "run.train", "train.load", "SensorGym.SensorGymEnv", "run.evaluate", "tf.reset_default_graph", "get_session", "get_session.close", "timeit.default_timer"], "function", ["home.repos.pwc.inspect_result.Abdulmajid-Murad_IoT-Sensor-Gym.None.run.train", "home.repos.pwc.inspect_result.Abdulmajid-Murad_IoT-Sensor-Gym.None.SensorGym.SensorGymEnv.close", "home.repos.pwc.inspect_result.Abdulmajid-Murad_IoT-Sensor-Gym.None.run.train", "home.repos.pwc.inspect_result.Abdulmajid-Murad_IoT-Sensor-Gym.None.run.evaluate", "home.repos.pwc.inspect_result.Abdulmajid-Murad_IoT-Sensor-Gym.None.SensorGym.SensorGymEnv.close"], ["", "def", "random_objective", "(", "params", ",", "iteration", ")", ":", "\n", "    ", "import", "tensorflow", "as", "tf", "\n", "from", "baselines", ".", "common", ".", "tf_util", "import", "get_session", "\n", "start", "=", "timer", "(", ")", "\n", "env", "=", "SensorGymEnv", "(", "cont_actions", "=", "params", "[", "'cont_actions'", "]", ",", "\n", "forecast_days", "=", "params", "[", "'forecast_days'", "]", ",", "\n", "sparsity", "=", "params", "[", "'sparse'", "]", ",", "\n", "episode_len", "=", "params", "[", "'episode_len'", "]", ",", "\n", "damping_factor", "=", "params", "[", "'damping_factor'", "]", ",", "\n", "init_buffer_state", "=", "params", "[", "'init_buffer_state'", "]", ",", "\n", "failure_penalty", "=", "params", "[", "'failure_penalty'", "]", "\n", ")", "\n", "model", "=", "train", "(", "num_timesteps", "=", "params", "[", "'num_timesteps'", "]", ",", "\n", "lr", "=", "params", "[", "'lr'", "]", ",", "\n", "num_layers", "=", "params", "[", "'num_layers'", "]", ",", "\n", "num_hidden", "=", "params", "[", "'num_hidden'", "]", ",", "\n", "env_single", "=", "env", ",", "\n", "nenv", "=", "params", "[", "'nenv'", "]", ",", "\n", "nsteps", "=", "params", "[", "'nsteps'", "]", ",", "\n", "lam", "=", "params", "[", "'lam'", "]", ",", "\n", "gamma", "=", "params", "[", "'gamma'", "]", ")", "\n", "\n", "save_path", "=", "os", ".", "path", ".", "join", "(", "'saved_models2'", ",", "\"{}\"", ".", "format", "(", "iteration", ")", ")", "\n", "model", ".", "save", "(", "save_path", ")", "\n", "tf", ".", "reset_default_graph", "(", ")", "\n", "sess", "=", "get_session", "(", ")", "\n", "sess", ".", "close", "(", ")", "\n", "\n", "eval_model", "=", "train", "(", "num_timesteps", "=", "0", ",", "\n", "lr", "=", "params", "[", "'lr'", "]", ",", "\n", "num_layers", "=", "params", "[", "'num_layers'", "]", ",", "\n", "num_hidden", "=", "params", "[", "'num_hidden'", "]", ",", "\n", "env_single", "=", "env", ",", "\n", "nenv", "=", "1", ",", "\n", "nsteps", "=", "params", "[", "'nsteps'", "]", ",", "\n", "lam", "=", "params", "[", "'lam'", "]", ",", "\n", "gamma", "=", "params", "[", "'gamma'", "]", ")", "\n", "eval_model", ".", "load", "(", "save_path", ")", "\n", "eval_env", "=", "SensorGymEnv", "(", "cont_actions", "=", "params", "[", "'cont_actions'", "]", ",", "\n", "forecast_days", "=", "params", "[", "'forecast_days'", "]", ",", "\n", "sparsity", "=", "params", "[", "'sparse'", "]", ",", "\n", "episode_len", "=", "365", ",", "\n", "damping_factor", "=", "params", "[", "'damping_factor'", "]", ",", "\n", "init_buffer_state", "=", "60", ",", "\n", "failure_penalty", "=", "params", "[", "'failure_penalty'", "]", ",", "\n", "solar_file", "=", "'solar_data/Tokyo_2011.csv'", "\n", ")", "\n", "variance", ",", "wasted_energy", ",", "failures", ",", "total_reward", ",", "utilized_energy", "=", "evaluate", "(", "eval_model", ",", "eval_env", ")", "\n", "tf", ".", "reset_default_graph", "(", ")", "\n", "sess", "=", "get_session", "(", ")", "\n", "sess", ".", "close", "(", ")", "\n", "end", "=", "timer", "(", ")", "\n", "return", "[", "variance", ",", "wasted_energy", ",", "failures", ",", "total_reward", ",", "utilized_energy", ",", "params", ",", "iteration", ",", "end", "-", "start", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Abdulmajid-Murad_IoT-Sensor-Gym.None.run.main": [[127, 156], ["pandas.DataFrame", "tqdm.tqdm", "list", "list", "range", "run.random_objective", "pd.DataFrame.to_csv", "numpy.logspace", "numpy.logspace", "int", "list", "range", "random.sample", "param_grid.items"], "function", ["home.repos.pwc.inspect_result.Abdulmajid-Murad_IoT-Sensor-Gym.None.run.random_objective"], ["", "def", "main", "(", ")", ":", "\n", "    ", "MAX_EVALS", "=", "100", "\n", "param_grid", "=", "{", "\n", "'cont_actions'", ":", "[", "True", ",", "False", "]", ",", "\n", "'forecast_days'", ":", "[", "1", ",", "2", ",", "3", "]", ",", "\n", "'sparse'", ":", "[", "1", ",", "24", "]", ",", "\n", "'episode_len'", ":", "[", "364", "]", ",", "\n", "'damping_factor'", ":", "list", "(", "np", ".", "logspace", "(", "-", "1", ",", "-", "3", ",", "num", "=", "100", ")", ")", ",", "#[0.01],", "\n", "'init_buffer_state'", ":", "[", "60", "]", ",", "\n", "'failure_penalty'", ":", "[", "-", "500", "]", ",", "\n", "'lr'", ":", "list", "(", "np", ".", "logspace", "(", "-", "1", ",", "-", "3", ",", "num", "=", "100", ")", ")", ",", "\n", "'num_layers'", ":", "[", "2", "]", ",", "\n", "'num_hidden'", ":", "[", "32", "]", ",", "\n", "'nsteps'", ":", "[", "256", "]", ",", "\n", "'gamma'", ":", "[", "0.99", "]", ",", "\n", "'lam'", ":", "[", "0.95", "]", ",", "\n", "'nenv'", ":", "[", "40", "]", ",", "\n", "'num_timesteps'", ":", "[", "int", "(", "1e7", ")", "]", "\n", "}", "\n", "\n", "random_results", "=", "pd", ".", "DataFrame", "(", "columns", "=", "[", "'variance'", ",", "'wasted_energy'", ",", "'failures'", ",", "\n", "'total_reward'", ",", "'utilized_energy'", ",", "\n", "'params'", ",", "'iteration'", ",", "'time'", "]", ",", "\n", "index", "=", "list", "(", "range", "(", "MAX_EVALS", ")", ")", ")", "\n", "for", "i", "in", "tqdm", "(", "range", "(", "MAX_EVALS", ")", ")", ":", "\n", "        ", "params", "=", "{", "key", ":", "random", ".", "sample", "(", "value", ",", "1", ")", "[", "0", "]", "for", "key", ",", "value", "in", "param_grid", ".", "items", "(", ")", "}", "\n", "results_list", "=", "random_objective", "(", "params", ",", "i", ")", "\n", "random_results", ".", "loc", "[", "i", ",", ":", "]", "=", "results_list", "\n", "random_results", ".", "to_csv", "(", "'results.csv'", ")", "\n", "\n"]]}