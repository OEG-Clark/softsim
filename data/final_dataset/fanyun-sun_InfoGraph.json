{"home.repos.pwc.inspect_result.fanyun-sun_InfoGraph.unsupervised.evaluate_embedding.LogReg.__init__": [[38, 44], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "evaluate_embedding.LogReg.modules", "evaluate_embedding.LogReg.weights_init"], "methods", ["home.repos.pwc.inspect_result.fanyun-sun_InfoGraph.semi-supervised.model.Net.__init__", "home.repos.pwc.inspect_result.fanyun-sun_InfoGraph.unsupervised.evaluate_embedding.LogReg.weights_init"], ["    ", "def", "__init__", "(", "self", ",", "ft_in", ",", "nb_classes", ")", ":", "\n", "        ", "super", "(", "LogReg", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "ft_in", ",", "nb_classes", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "self", ".", "weights_init", "(", "m", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fanyun-sun_InfoGraph.unsupervised.evaluate_embedding.LogReg.weights_init": [[45, 50], ["isinstance", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "m.bias.data.fill_"], "methods", ["None"], ["", "", "def", "weights_init", "(", "self", ",", "m", ")", ":", "\n", "        ", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "            ", "torch", ".", "nn", ".", "init", ".", "xavier_uniform_", "(", "m", ".", "weight", ".", "data", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                ", "m", ".", "bias", ".", "data", ".", "fill_", "(", "0.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fanyun-sun_InfoGraph.unsupervised.evaluate_embedding.LogReg.forward": [[51, 54], ["evaluate_embedding.LogReg.fc"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "seq", ")", ":", "\n", "        ", "ret", "=", "self", ".", "fc", "(", "seq", ")", "\n", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.fanyun-sun_InfoGraph.unsupervised.evaluate_embedding.draw_plot": [[18, 36], ["read_graphfile", "sklearn.preprocessing.LabelEncoder().fit_transform", "print", "sklearn.manifold.TSNE().fit_transform", "matplotlib.close", "pandas.DataFrame", "sns.pairplot", "matplotlib.legend", "matplotlib.savefig", "numpy.array", "numpy.array", "sklearn.preprocessing.LabelEncoder", "sklearn.manifold.TSNE"], "function", ["None"], ["def", "draw_plot", "(", "datadir", ",", "DS", ",", "embeddings", ",", "fname", ",", "max_nodes", "=", "None", ")", ":", "\n", "    ", "return", "\n", "import", "seaborn", "as", "sns", "\n", "graphs", "=", "read_graphfile", "(", "datadir", ",", "DS", ",", "max_nodes", "=", "max_nodes", ")", "\n", "labels", "=", "[", "graph", ".", "graph", "[", "'label'", "]", "for", "graph", "in", "graphs", "]", "\n", "\n", "labels", "=", "preprocessing", ".", "LabelEncoder", "(", ")", ".", "fit_transform", "(", "labels", ")", "\n", "x", ",", "y", "=", "np", ".", "array", "(", "embeddings", ")", ",", "np", ".", "array", "(", "labels", ")", "\n", "print", "(", "'fitting TSNE ...'", ")", "\n", "x", "=", "TSNE", "(", "n_components", "=", "2", ")", ".", "fit_transform", "(", "x", ")", "\n", "\n", "plt", ".", "close", "(", ")", "\n", "df", "=", "pd", ".", "DataFrame", "(", "columns", "=", "[", "'x0'", ",", "'x1'", ",", "'Y'", "]", ")", "\n", "\n", "df", "[", "'x0'", "]", ",", "df", "[", "'x1'", "]", ",", "df", "[", "'Y'", "]", "=", "x", "[", ":", ",", "0", "]", ",", "x", "[", ":", ",", "1", "]", ",", "y", "\n", "sns", ".", "pairplot", "(", "x_vars", "=", "[", "'x0'", "]", ",", "y_vars", "=", "[", "'x1'", "]", ",", "data", "=", "df", ",", "hue", "=", "\"Y\"", ",", "size", "=", "5", ")", "\n", "plt", ".", "legend", "(", ")", "\n", "plt", ".", "savefig", "(", "fname", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fanyun-sun_InfoGraph.unsupervised.evaluate_embedding.logistic_classify": [[55, 91], ["torch.CrossEntropyLoss", "sklearn.model_selection.StratifiedKFold", "sklearn.model_selection.StratifiedKFold.split", "numpy.mean", "evaluate_embedding.LogReg", "LogReg.cuda", "torch.optim.Adam", "torch.optim.Adam", "range", "LogReg.", "torch.argmax", "torch.argmax", "accs.append", "numpy.unique", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "LogReg.parameters", "LogReg.train", "torch.optim.Adam.zero_grad", "LogReg.", "nn.CrossEntropyLoss.", "xent.backward", "torch.optim.Adam.step", "torch.sum().float", "torch.sum().float", "acc.item", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.sum", "torch.sum"], "function", ["home.repos.pwc.inspect_result.fanyun-sun_InfoGraph.semi-supervised.mean_teacher.train"], ["", "", "def", "logistic_classify", "(", "x", ",", "y", ")", ":", "\n", "    ", "nb_classes", "=", "np", ".", "unique", "(", "y", ")", ".", "shape", "[", "0", "]", "\n", "xent", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "hid_units", "=", "x", ".", "shape", "[", "1", "]", "\n", "\n", "accs", "=", "[", "]", "\n", "kf", "=", "StratifiedKFold", "(", "n_splits", "=", "10", ",", "shuffle", "=", "True", ",", "random_state", "=", "None", ")", "\n", "for", "train_index", ",", "test_index", "in", "kf", ".", "split", "(", "x", ",", "y", ")", ":", "\n", "        ", "train_embs", ",", "test_embs", "=", "x", "[", "train_index", "]", ",", "x", "[", "test_index", "]", "\n", "train_lbls", ",", "test_lbls", "=", "y", "[", "train_index", "]", ",", "y", "[", "test_index", "]", "\n", "\n", "train_embs", ",", "train_lbls", "=", "torch", ".", "from_numpy", "(", "train_embs", ")", ".", "cuda", "(", ")", ",", "torch", ".", "from_numpy", "(", "train_lbls", ")", ".", "cuda", "(", ")", "\n", "test_embs", ",", "test_lbls", "=", "torch", ".", "from_numpy", "(", "test_embs", ")", ".", "cuda", "(", ")", ",", "torch", ".", "from_numpy", "(", "test_lbls", ")", ".", "cuda", "(", ")", "\n", "\n", "\n", "log", "=", "LogReg", "(", "hid_units", ",", "nb_classes", ")", "\n", "log", ".", "cuda", "(", ")", "\n", "opt", "=", "torch", ".", "optim", ".", "Adam", "(", "log", ".", "parameters", "(", ")", ",", "lr", "=", "0.01", ",", "weight_decay", "=", "0.0", ")", "\n", "\n", "best_val", "=", "0", "\n", "test_acc", "=", "None", "\n", "for", "it", "in", "range", "(", "100", ")", ":", "\n", "            ", "log", ".", "train", "(", ")", "\n", "opt", ".", "zero_grad", "(", ")", "\n", "\n", "logits", "=", "log", "(", "train_embs", ")", "\n", "loss", "=", "xent", "(", "logits", ",", "train_lbls", ")", "\n", "\n", "loss", ".", "backward", "(", ")", "\n", "opt", ".", "step", "(", ")", "\n", "\n", "", "logits", "=", "log", "(", "test_embs", ")", "\n", "preds", "=", "torch", ".", "argmax", "(", "logits", ",", "dim", "=", "1", ")", "\n", "acc", "=", "torch", ".", "sum", "(", "preds", "==", "test_lbls", ")", ".", "float", "(", ")", "/", "test_lbls", ".", "shape", "[", "0", "]", "\n", "accs", ".", "append", "(", "acc", ".", "item", "(", ")", ")", "\n", "", "return", "np", ".", "mean", "(", "accs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fanyun-sun_InfoGraph.unsupervised.evaluate_embedding.svc_classify": [[92, 108], ["sklearn.model_selection.StratifiedKFold", "sklearn.model_selection.StratifiedKFold.split", "numpy.mean", "sklearn.svm.SVC.fit", "accuracies.append", "sklearn.model_selection.GridSearchCV", "sklearn.svm.SVC", "sklearn.metrics.accuracy_score", "sklearn.svm.SVC", "sklearn.svm.SVC.predict"], "function", ["None"], ["", "def", "svc_classify", "(", "x", ",", "y", ",", "search", ")", ":", "\n", "    ", "kf", "=", "StratifiedKFold", "(", "n_splits", "=", "10", ",", "shuffle", "=", "True", ",", "random_state", "=", "None", ")", "\n", "accuracies", "=", "[", "]", "\n", "for", "train_index", ",", "test_index", "in", "kf", ".", "split", "(", "x", ",", "y", ")", ":", "\n", "\n", "        ", "x_train", ",", "x_test", "=", "x", "[", "train_index", "]", ",", "x", "[", "test_index", "]", "\n", "y_train", ",", "y_test", "=", "y", "[", "train_index", "]", ",", "y", "[", "test_index", "]", "\n", "# x_train, x_val, y_train, y_val = train_test_split(x_train, y_train, test_size=0.1)", "\n", "if", "search", ":", "\n", "            ", "params", "=", "{", "'C'", ":", "[", "0.001", ",", "0.01", ",", "0.1", ",", "1", ",", "10", ",", "100", ",", "1000", "]", "}", "\n", "classifier", "=", "GridSearchCV", "(", "SVC", "(", ")", ",", "params", ",", "cv", "=", "5", ",", "scoring", "=", "'accuracy'", ",", "verbose", "=", "0", ")", "\n", "", "else", ":", "\n", "            ", "classifier", "=", "SVC", "(", "C", "=", "10", ")", "\n", "", "classifier", ".", "fit", "(", "x_train", ",", "y_train", ")", "\n", "accuracies", ".", "append", "(", "accuracy_score", "(", "y_test", ",", "classifier", ".", "predict", "(", "x_test", ")", ")", ")", "\n", "", "return", "np", ".", "mean", "(", "accuracies", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fanyun-sun_InfoGraph.unsupervised.evaluate_embedding.randomforest_classify": [[109, 125], ["sklearn.model_selection.StratifiedKFold", "sklearn.model_selection.StratifiedKFold.split", "numpy.mean", "sklearn.ensemble.RandomForestClassifier.fit", "accuracies.append", "sklearn.model_selection.GridSearchCV", "sklearn.ensemble.RandomForestClassifier", "sklearn.metrics.accuracy_score", "sklearn.ensemble.RandomForestClassifier", "sklearn.ensemble.RandomForestClassifier.predict"], "function", ["None"], ["", "def", "randomforest_classify", "(", "x", ",", "y", ",", "search", ")", ":", "\n", "    ", "kf", "=", "StratifiedKFold", "(", "n_splits", "=", "10", ",", "shuffle", "=", "True", ",", "random_state", "=", "None", ")", "\n", "accuracies", "=", "[", "]", "\n", "for", "train_index", ",", "test_index", "in", "kf", ".", "split", "(", "x", ",", "y", ")", ":", "\n", "\n", "        ", "x_train", ",", "x_test", "=", "x", "[", "train_index", "]", ",", "x", "[", "test_index", "]", "\n", "y_train", ",", "y_test", "=", "y", "[", "train_index", "]", ",", "y", "[", "test_index", "]", "\n", "if", "search", ":", "\n", "            ", "params", "=", "{", "'n_estimators'", ":", "[", "100", ",", "200", ",", "500", ",", "1000", "]", "}", "\n", "classifier", "=", "GridSearchCV", "(", "RandomForestClassifier", "(", ")", ",", "params", ",", "cv", "=", "5", ",", "scoring", "=", "'accuracy'", ",", "verbose", "=", "0", ")", "\n", "", "else", ":", "\n", "            ", "classifier", "=", "RandomForestClassifier", "(", ")", "\n", "", "classifier", ".", "fit", "(", "x_train", ",", "y_train", ")", "\n", "accuracies", ".", "append", "(", "accuracy_score", "(", "y_test", ",", "classifier", ".", "predict", "(", "x_test", ")", ")", ")", "\n", "", "ret", "=", "np", ".", "mean", "(", "accuracies", ")", "\n", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.fanyun-sun_InfoGraph.unsupervised.evaluate_embedding.linearsvc_classify": [[126, 141], ["sklearn.model_selection.StratifiedKFold", "sklearn.model_selection.StratifiedKFold.split", "numpy.mean", "sklearn.svm.LinearSVC.fit", "accuracies.append", "sklearn.model_selection.GridSearchCV", "sklearn.svm.LinearSVC", "sklearn.metrics.accuracy_score", "sklearn.svm.LinearSVC", "sklearn.svm.LinearSVC.predict"], "function", ["None"], ["", "def", "linearsvc_classify", "(", "x", ",", "y", ",", "search", ")", ":", "\n", "    ", "kf", "=", "StratifiedKFold", "(", "n_splits", "=", "10", ",", "shuffle", "=", "True", ",", "random_state", "=", "None", ")", "\n", "accuracies", "=", "[", "]", "\n", "for", "train_index", ",", "test_index", "in", "kf", ".", "split", "(", "x", ",", "y", ")", ":", "\n", "\n", "        ", "x_train", ",", "x_test", "=", "x", "[", "train_index", "]", ",", "x", "[", "test_index", "]", "\n", "y_train", ",", "y_test", "=", "y", "[", "train_index", "]", ",", "y", "[", "test_index", "]", "\n", "if", "search", ":", "\n", "            ", "params", "=", "{", "'C'", ":", "[", "0.001", ",", "0.01", ",", "0.1", ",", "1", ",", "10", ",", "100", ",", "1000", "]", "}", "\n", "classifier", "=", "GridSearchCV", "(", "LinearSVC", "(", ")", ",", "params", ",", "cv", "=", "5", ",", "scoring", "=", "'accuracy'", ",", "verbose", "=", "0", ")", "\n", "", "else", ":", "\n", "            ", "classifier", "=", "LinearSVC", "(", "C", "=", "10", ")", "\n", "", "classifier", ".", "fit", "(", "x_train", ",", "y_train", ")", "\n", "accuracies", ".", "append", "(", "accuracy_score", "(", "y_test", ",", "classifier", ".", "predict", "(", "x_test", ")", ")", ")", "\n", "", "return", "np", ".", "mean", "(", "accuracies", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fanyun-sun_InfoGraph.unsupervised.evaluate_embedding.evaluate_embedding": [[142, 164], ["sklearn.preprocessing.LabelEncoder().fit_transform", "print", "print", "print", "print", "numpy.array", "numpy.array", "evaluate_embedding.logistic_classify", "numpy.mean", "evaluate_embedding.svc_classify", "numpy.mean", "evaluate_embedding.linearsvc_classify", "numpy.mean", "evaluate_embedding.randomforest_classify", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "sklearn.preprocessing.LabelEncoder", "range", "range", "range", "range"], "function", ["home.repos.pwc.inspect_result.fanyun-sun_InfoGraph.unsupervised.evaluate_embedding.logistic_classify", "home.repos.pwc.inspect_result.fanyun-sun_InfoGraph.unsupervised.evaluate_embedding.svc_classify", "home.repos.pwc.inspect_result.fanyun-sun_InfoGraph.unsupervised.evaluate_embedding.linearsvc_classify", "home.repos.pwc.inspect_result.fanyun-sun_InfoGraph.unsupervised.evaluate_embedding.randomforest_classify"], ["", "def", "evaluate_embedding", "(", "embeddings", ",", "labels", ",", "search", "=", "True", ")", ":", "\n", "    ", "labels", "=", "preprocessing", ".", "LabelEncoder", "(", ")", ".", "fit_transform", "(", "labels", ")", "\n", "x", ",", "y", "=", "np", ".", "array", "(", "embeddings", ")", ",", "np", ".", "array", "(", "labels", ")", "\n", "# print(x.shape, y.shape)", "\n", "\n", "logreg_accuracies", "=", "[", "logistic_classify", "(", "x", ",", "y", ")", "for", "_", "in", "range", "(", "1", ")", "]", "\n", "# print(logreg_accuracies)", "\n", "print", "(", "'LogReg'", ",", "np", ".", "mean", "(", "logreg_accuracies", ")", ")", "\n", "\n", "svc_accuracies", "=", "[", "svc_classify", "(", "x", ",", "y", ",", "search", ")", "for", "_", "in", "range", "(", "1", ")", "]", "\n", "# print(svc_accuracies)", "\n", "print", "(", "'svc'", ",", "np", ".", "mean", "(", "svc_accuracies", ")", ")", "\n", "\n", "linearsvc_accuracies", "=", "[", "linearsvc_classify", "(", "x", ",", "y", ",", "search", ")", "for", "_", "in", "range", "(", "1", ")", "]", "\n", "# print(linearsvc_accuracies)", "\n", "print", "(", "'LinearSvc'", ",", "np", ".", "mean", "(", "linearsvc_accuracies", ")", ")", "\n", "\n", "randomforest_accuracies", "=", "[", "randomforest_classify", "(", "x", ",", "y", ",", "search", ")", "for", "_", "in", "range", "(", "1", ")", "]", "\n", "# print(randomforest_accuracies)", "\n", "print", "(", "'randomforest'", ",", "np", ".", "mean", "(", "randomforest_accuracies", ")", ")", "\n", "\n", "return", "np", ".", "mean", "(", "logreg_accuracies", ")", ",", "np", ".", "mean", "(", "svc_accuracies", ")", ",", "np", ".", "mean", "(", "linearsvc_accuracies", ")", ",", "np", ".", "mean", "(", "randomforest_accuracies", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fanyun-sun_InfoGraph.unsupervised.main.InfoGraph.__init__": [[27, 47], ["torch.Module.__init__", "gin.Encoder", "model.FF", "model.FF", "main.InfoGraph.init_emb", "model.PriorDiscriminator"], "methods", ["home.repos.pwc.inspect_result.fanyun-sun_InfoGraph.semi-supervised.model.Net.__init__", "home.repos.pwc.inspect_result.fanyun-sun_InfoGraph.semi-supervised.model.Net.init_emb"], ["  ", "def", "__init__", "(", "self", ",", "hidden_dim", ",", "num_gc_layers", ",", "alpha", "=", "0.5", ",", "beta", "=", "1.", ",", "gamma", "=", ".1", ")", ":", "\n", "    ", "super", "(", "InfoGraph", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "alpha", "=", "alpha", "\n", "self", ".", "beta", "=", "beta", "\n", "self", ".", "gamma", "=", "gamma", "\n", "self", ".", "prior", "=", "args", ".", "prior", "\n", "\n", "self", ".", "embedding_dim", "=", "mi_units", "=", "hidden_dim", "*", "num_gc_layers", "\n", "self", ".", "encoder", "=", "Encoder", "(", "dataset_num_features", ",", "hidden_dim", ",", "num_gc_layers", ")", "\n", "\n", "self", ".", "local_d", "=", "FF", "(", "self", ".", "embedding_dim", ")", "\n", "self", ".", "global_d", "=", "FF", "(", "self", ".", "embedding_dim", ")", "\n", "# self.local_d = MI1x1ConvNet(self.embedding_dim, mi_units)", "\n", "# self.global_d = MIFCNet(self.embedding_dim, mi_units)", "\n", "\n", "if", "self", ".", "prior", ":", "\n", "        ", "self", ".", "prior_d", "=", "PriorDiscriminator", "(", "self", ".", "embedding_dim", ")", "\n", "\n", "", "self", ".", "init_emb", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fanyun-sun_InfoGraph.unsupervised.main.InfoGraph.init_emb": [[48, 55], ["main.InfoGraph.modules", "isinstance", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "m.bias.data.fill_"], "methods", ["None"], ["", "def", "init_emb", "(", "self", ")", ":", "\n", "    ", "initrange", "=", "-", "1.5", "/", "self", ".", "embedding_dim", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "        ", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "            ", "torch", ".", "nn", ".", "init", ".", "xavier_uniform_", "(", "m", ".", "weight", ".", "data", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                ", "m", ".", "bias", ".", "data", ".", "fill_", "(", "0.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fanyun-sun_InfoGraph.unsupervised.main.InfoGraph.forward": [[56, 79], ["main.InfoGraph.encoder", "main.InfoGraph.global_d", "main.InfoGraph.local_d", "losses.local_global_loss_", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.rand_like", "torch.rand_like", "torch.rand_like", "torch.rand_like", "torch.rand_like", "torch.rand_like", "torch.rand_like", "torch.rand_like", "torch.rand_like", "torch.log().mean", "torch.log().mean", "torch.log().mean", "torch.log().mean", "torch.log().mean", "torch.log().mean", "torch.log().mean", "torch.log().mean", "torch.log().mean", "torch.log().mean", "torch.log().mean", "torch.log().mean", "torch.log().mean", "torch.log().mean", "torch.log().mean", "torch.log().mean", "torch.log().mean", "torch.log().mean", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "main.InfoGraph.prior_d", "main.InfoGraph.prior_d"], "methods", ["home.repos.pwc.inspect_result.fanyun-sun_InfoGraph.semi-supervised.infomax.local_global_loss_"], ["", "", "", "", "def", "forward", "(", "self", ",", "x", ",", "edge_index", ",", "batch", ",", "num_graphs", ")", ":", "\n", "# batch_size = data.num_graphs", "\n", "    ", "if", "x", "is", "None", ":", "\n", "        ", "x", "=", "torch", ".", "ones", "(", "batch", ".", "shape", "[", "0", "]", ")", ".", "to", "(", "device", ")", "\n", "\n", "", "y", ",", "M", "=", "self", ".", "encoder", "(", "x", ",", "edge_index", ",", "batch", ")", "\n", "\n", "g_enc", "=", "self", ".", "global_d", "(", "y", ")", "\n", "l_enc", "=", "self", ".", "local_d", "(", "M", ")", "\n", "\n", "mode", "=", "'fd'", "\n", "measure", "=", "'JSD'", "\n", "local_global_loss", "=", "local_global_loss_", "(", "l_enc", ",", "g_enc", ",", "edge_index", ",", "batch", ",", "measure", ")", "\n", "\n", "if", "self", ".", "prior", ":", "\n", "        ", "prior", "=", "torch", ".", "rand_like", "(", "y", ")", "\n", "term_a", "=", "torch", ".", "log", "(", "self", ".", "prior_d", "(", "prior", ")", ")", ".", "mean", "(", ")", "\n", "term_b", "=", "torch", ".", "log", "(", "1.0", "-", "self", ".", "prior_d", "(", "y", ")", ")", ".", "mean", "(", ")", "\n", "PRIOR", "=", "-", "(", "term_a", "+", "term_b", ")", "*", "self", ".", "gamma", "\n", "", "else", ":", "\n", "        ", "PRIOR", "=", "0", "\n", "\n", "", "return", "local_global_loss", "+", "PRIOR", "\n", "\n"]], "home.repos.pwc.inspect_result.fanyun-sun_InfoGraph.unsupervised.main.warn": [[2, 4], ["None"], "function", ["None"], ["def", "warn", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "pass", "\n", "", "import", "warnings", "\n"]], "home.repos.pwc.inspect_result.fanyun-sun_InfoGraph.unsupervised.gin.Encoder.__init__": [[21, 43], ["super().__init__", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "range", "torch_geometric.nn.GINConv", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "gin.Encoder.convs.append", "gin.Encoder.bns.append", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.Linear", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.fanyun-sun_InfoGraph.semi-supervised.model.Net.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_features", ",", "dim", ",", "num_gc_layers", ")", ":", "\n", "        ", "super", "(", "Encoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "# num_features = dataset.num_features", "\n", "# dim = 32", "\n", "self", ".", "num_gc_layers", "=", "num_gc_layers", "\n", "\n", "# self.nns = []", "\n", "self", ".", "convs", "=", "torch", ".", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "bns", "=", "torch", ".", "nn", ".", "ModuleList", "(", ")", "\n", "\n", "for", "i", "in", "range", "(", "num_gc_layers", ")", ":", "\n", "\n", "            ", "if", "i", ":", "\n", "                ", "nn", "=", "Sequential", "(", "Linear", "(", "dim", ",", "dim", ")", ",", "ReLU", "(", ")", ",", "Linear", "(", "dim", ",", "dim", ")", ")", "\n", "", "else", ":", "\n", "                ", "nn", "=", "Sequential", "(", "Linear", "(", "num_features", ",", "dim", ")", ",", "ReLU", "(", ")", ",", "Linear", "(", "dim", ",", "dim", ")", ")", "\n", "", "conv", "=", "GINConv", "(", "nn", ")", "\n", "bn", "=", "torch", ".", "nn", ".", "BatchNorm1d", "(", "dim", ")", "\n", "\n", "self", ".", "convs", ".", "append", "(", "conv", ")", "\n", "self", ".", "bns", ".", "append", "(", "bn", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fanyun-sun_InfoGraph.unsupervised.gin.Encoder.forward": [[45, 61], ["range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.relu", "torch.relu", "xs.append", "torch_geometric.nn.global_add_pool", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ",", "edge_index", ",", "batch", ")", ":", "\n", "        ", "if", "x", "is", "None", ":", "\n", "            ", "x", "=", "torch", ".", "ones", "(", "(", "batch", ".", "shape", "[", "0", "]", ",", "1", ")", ")", ".", "to", "(", "device", ")", "\n", "\n", "", "xs", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "num_gc_layers", ")", ":", "\n", "\n", "            ", "x", "=", "F", ".", "relu", "(", "self", ".", "convs", "[", "i", "]", "(", "x", ",", "edge_index", ")", ")", "\n", "x", "=", "self", ".", "bns", "[", "i", "]", "(", "x", ")", "\n", "xs", ".", "append", "(", "x", ")", "\n", "# if i == 2:", "\n", "# feature_map = x2", "\n", "\n", "", "xpool", "=", "[", "global_add_pool", "(", "x", ",", "batch", ")", "for", "x", "in", "xs", "]", "\n", "x", "=", "torch", ".", "cat", "(", "xpool", ",", "1", ")", "\n", "return", "x", ",", "torch", ".", "cat", "(", "xs", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fanyun-sun_InfoGraph.unsupervised.gin.Encoder.get_embeddings": [[62, 79], ["torch.device", "torch.device", "torch.device", "torch.device", "numpy.concatenate", "numpy.concatenate", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "data.to", "gin.Encoder.forward", "numpy.concatenate.append", "numpy.concatenate.append", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to.cpu().numpy", "torch.ones().to.cpu().numpy", "data.y.cpu().numpy", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones().to.cpu", "torch.ones().to.cpu", "data.y.cpu"], "methods", ["home.repos.pwc.inspect_result.fanyun-sun_InfoGraph.semi-supervised.model.Net.forward"], ["", "def", "get_embeddings", "(", "self", ",", "loader", ")", ":", "\n", "\n", "        ", "device", "=", "torch", ".", "device", "(", "'cuda'", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "'cpu'", ")", "\n", "ret", "=", "[", "]", "\n", "y", "=", "[", "]", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "data", "in", "loader", ":", "\n", "                ", "data", ".", "to", "(", "device", ")", "\n", "x", ",", "edge_index", ",", "batch", "=", "data", ".", "x", ",", "data", ".", "edge_index", ",", "data", ".", "batch", "\n", "if", "x", "is", "None", ":", "\n", "                    ", "x", "=", "torch", ".", "ones", "(", "(", "batch", ".", "shape", "[", "0", "]", ",", "1", ")", ")", ".", "to", "(", "device", ")", "\n", "", "x", ",", "_", "=", "self", ".", "forward", "(", "x", ",", "edge_index", ",", "batch", ")", "\n", "ret", ".", "append", "(", "x", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "y", ".", "append", "(", "data", ".", "y", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "", "", "ret", "=", "np", ".", "concatenate", "(", "ret", ",", "0", ")", "\n", "y", "=", "np", ".", "concatenate", "(", "y", ",", "0", ")", "\n", "return", "ret", ",", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.fanyun-sun_InfoGraph.unsupervised.gin.Net.__init__": [[81, 94], ["super().__init__", "gin.Encoder", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.fanyun-sun_InfoGraph.semi-supervised.model.Net.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "Net", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "try", ":", "\n", "            ", "num_features", "=", "dataset", ".", "num_features", "\n", "", "except", ":", "\n", "            ", "num_features", "=", "1", "\n", "", "dim", "=", "32", "\n", "\n", "self", ".", "encoder", "=", "Encoder", "(", "num_features", ",", "dim", ")", "\n", "\n", "self", ".", "fc1", "=", "Linear", "(", "dim", "*", "5", ",", "dim", ")", "\n", "self", ".", "fc2", "=", "Linear", "(", "dim", ",", "dataset", ".", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fanyun-sun_InfoGraph.unsupervised.gin.Net.forward": [[95, 104], ["gin.Net.encoder", "torch.relu", "torch.relu", "torch.dropout", "torch.dropout", "gin.Net.fc2", "torch.log_softmax", "torch.log_softmax", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "gin.Net.fc1", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "edge_index", ",", "batch", ")", ":", "\n", "        ", "if", "x", "is", "None", ":", "\n", "            ", "x", "=", "torch", ".", "ones", "(", "batch", ".", "shape", "[", "0", "]", ")", ".", "to", "(", "device", ")", "\n", "\n", "", "x", ",", "_", "=", "self", ".", "encoder", "(", "x", ",", "edge_index", ",", "batch", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "fc1", "(", "x", ")", ")", "\n", "x", "=", "F", ".", "dropout", "(", "x", ",", "p", "=", "0.5", ",", "training", "=", "self", ".", "training", ")", "\n", "x", "=", "self", ".", "fc2", "(", "x", ")", "\n", "return", "F", ".", "log_softmax", "(", "x", ",", "dim", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fanyun-sun_InfoGraph.unsupervised.gin.train": [[105, 129], ["model.train", "data.to.to", "optimizer.zero_grad", "model", "torch.nll_loss", "F.nll_loss.backward", "optimizer.step", "len", "F.nll_loss.item"], "function", ["home.repos.pwc.inspect_result.fanyun-sun_InfoGraph.semi-supervised.mean_teacher.train"], ["", "", "def", "train", "(", "epoch", ")", ":", "\n", "    ", "model", ".", "train", "(", ")", "\n", "\n", "if", "epoch", "==", "51", ":", "\n", "        ", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "            ", "param_group", "[", "'lr'", "]", "=", "0.5", "*", "param_group", "[", "'lr'", "]", "\n", "\n", "", "", "loss_all", "=", "0", "\n", "for", "data", "in", "train_loader", ":", "\n", "        ", "data", "=", "data", ".", "to", "(", "device", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "# print(data.x.shape)", "\n", "# [ num_nodes x num_node_labels ]", "\n", "# print(data.edge_index.shape)", "\n", "#  [2 x num_edges ]", "\n", "# print(data.batch.shape)", "\n", "# [ num_nodes ]", "\n", "output", "=", "model", "(", "data", ".", "x", ",", "data", ".", "edge_index", ",", "data", ".", "batch", ")", "\n", "loss", "=", "F", ".", "nll_loss", "(", "output", ",", "data", ".", "y", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "loss_all", "+=", "loss", ".", "item", "(", ")", "*", "data", ".", "num_graphs", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "", "return", "loss_all", "/", "len", "(", "train_dataset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fanyun-sun_InfoGraph.unsupervised.gin.test": [[130, 140], ["model.eval", "data.to.to", "model", "pred.eq().sum().item", "len", "model.max", "pred.eq().sum", "pred.eq"], "function", ["None"], ["", "def", "test", "(", "loader", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "\n", "correct", "=", "0", "\n", "for", "data", "in", "loader", ":", "\n", "        ", "data", "=", "data", ".", "to", "(", "device", ")", "\n", "output", "=", "model", "(", "data", ".", "x", ",", "data", ".", "edge_index", ",", "data", ".", "batch", ")", "\n", "pred", "=", "output", ".", "max", "(", "dim", "=", "1", ")", "[", "1", "]", "\n", "correct", "+=", "pred", ".", "eq", "(", "data", ".", "y", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "", "return", "correct", "/", "len", "(", "loader", ".", "dataset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fanyun-sun_InfoGraph.unsupervised.arguments.arg_parse": [[3, 21], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["None"], ["def", "arg_parse", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'GcnInformax Arguments.'", ")", "\n", "parser", ".", "add_argument", "(", "'--DS'", ",", "dest", "=", "'DS'", ",", "help", "=", "'Dataset'", ")", "\n", "parser", ".", "add_argument", "(", "'--local'", ",", "dest", "=", "'local'", ",", "action", "=", "'store_const'", ",", "\n", "const", "=", "True", ",", "default", "=", "False", ")", "\n", "parser", ".", "add_argument", "(", "'--glob'", ",", "dest", "=", "'glob'", ",", "action", "=", "'store_const'", ",", "\n", "const", "=", "True", ",", "default", "=", "False", ")", "\n", "parser", ".", "add_argument", "(", "'--prior'", ",", "dest", "=", "'prior'", ",", "action", "=", "'store_const'", ",", "\n", "const", "=", "True", ",", "default", "=", "False", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--lr'", ",", "dest", "=", "'lr'", ",", "type", "=", "float", ",", "\n", "help", "=", "'Learning rate.'", ")", "\n", "parser", ".", "add_argument", "(", "'--num-gc-layers'", ",", "dest", "=", "'num_gc_layers'", ",", "type", "=", "int", ",", "default", "=", "5", ",", "\n", "help", "=", "'Number of graph convolution layers before each pooling'", ")", "\n", "parser", ".", "add_argument", "(", "'--hidden-dim'", ",", "dest", "=", "'hidden_dim'", ",", "type", "=", "int", ",", "default", "=", "32", ",", "\n", "help", "=", "''", ")", "\n", "\n", "return", "parser", ".", "parse_args", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fanyun-sun_InfoGraph.unsupervised.model.GlobalDiscriminator.__init__": [[12, 19], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.fanyun-sun_InfoGraph.semi-supervised.model.Net.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "input_dim", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "l0", "=", "nn", ".", "Linear", "(", "32", ",", "32", ")", "\n", "self", ".", "l1", "=", "nn", ".", "Linear", "(", "32", ",", "32", ")", "\n", "\n", "self", ".", "l2", "=", "nn", ".", "Linear", "(", "512", ",", "1", ")", "\n", "", "def", "forward", "(", "self", ",", "y", ",", "M", ",", "data", ")", ":", "\n"]], "home.repos.pwc.inspect_result.fanyun-sun_InfoGraph.unsupervised.model.GlobalDiscriminator.forward": [[19, 32], ["torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "data[].int().numpy", "model.GlobalDiscriminator.encoder", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "model.GlobalDiscriminator.l2", "model.GlobalDiscriminator.l0", "model.GlobalDiscriminator.l1", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "data[].int", "data[].float"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "y", ",", "M", ",", "data", ")", ":", "\n", "\n", "        ", "adj", "=", "Variable", "(", "data", "[", "'adj'", "]", ".", "float", "(", ")", ",", "requires_grad", "=", "False", ")", ".", "cuda", "(", ")", "\n", "# h0 = Variable(data['feats'].float()).cuda()", "\n", "batch_num_nodes", "=", "data", "[", "'num_nodes'", "]", ".", "int", "(", ")", ".", "numpy", "(", ")", "\n", "M", ",", "_", "=", "self", ".", "encoder", "(", "M", ",", "adj", ",", "batch_num_nodes", ")", "\n", "# h = F.relu(self.c0(M))", "\n", "# h = self.c1(h)", "\n", "# h = h.view(y.shape[0], -1)", "\n", "h", "=", "torch", ".", "cat", "(", "(", "y", ",", "M", ")", ",", "dim", "=", "1", ")", "\n", "h", "=", "F", ".", "relu", "(", "self", ".", "l0", "(", "h", ")", ")", "\n", "h", "=", "F", ".", "relu", "(", "self", ".", "l1", "(", "h", ")", ")", "\n", "return", "self", ".", "l2", "(", "h", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fanyun-sun_InfoGraph.unsupervised.model.PriorDiscriminator.__init__": [[34, 39], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.fanyun-sun_InfoGraph.semi-supervised.model.Net.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_dim", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "l0", "=", "nn", ".", "Linear", "(", "input_dim", ",", "input_dim", ")", "\n", "self", ".", "l1", "=", "nn", ".", "Linear", "(", "input_dim", ",", "input_dim", ")", "\n", "self", ".", "l2", "=", "nn", ".", "Linear", "(", "input_dim", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fanyun-sun_InfoGraph.unsupervised.model.PriorDiscriminator.forward": [[40, 44], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "model.PriorDiscriminator.l0", "model.PriorDiscriminator.l1", "model.PriorDiscriminator.l2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "h", "=", "F", ".", "relu", "(", "self", ".", "l0", "(", "x", ")", ")", "\n", "h", "=", "F", ".", "relu", "(", "self", ".", "l1", "(", "h", ")", ")", "\n", "return", "torch", ".", "sigmoid", "(", "self", ".", "l2", "(", "h", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fanyun-sun_InfoGraph.unsupervised.model.FF.__init__": [[46, 60], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.fanyun-sun_InfoGraph.semi-supervised.model.Net.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_dim", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "# self.c0 = nn.Conv1d(input_dim, 512, kernel_size=1)", "\n", "# self.c1 = nn.Conv1d(512, 512, kernel_size=1)", "\n", "# self.c2 = nn.Conv1d(512, 1, kernel_size=1)", "\n", "self", ".", "block", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "input_dim", ",", "input_dim", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "input_dim", ",", "input_dim", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "input_dim", ",", "input_dim", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", "\n", ")", "\n", "self", ".", "linear_shortcut", "=", "nn", ".", "Linear", "(", "input_dim", ",", "input_dim", ")", "\n", "# self.c0 = nn.Conv1d(input_dim, 512, kernel_size=1, stride=1, padding=0)", "\n"]], "home.repos.pwc.inspect_result.fanyun-sun_InfoGraph.unsupervised.model.FF.forward": [[64, 66], ["model.FF.block", "model.FF.linear_shortcut"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "block", "(", "x", ")", "+", "self", ".", "linear_shortcut", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fanyun-sun_InfoGraph.unsupervised.losses.local_global_loss_": [[6, 33], ["torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "enumerate", "torch.mm", "torch.mm", "torch.mm", "cortex_DIM.functions.gan_losses.get_positive_expectation().sum", "cortex_DIM.functions.gan_losses.get_negative_expectation().sum", "g_enc.t", "torch.zeros", "torch.zeros", "torch.zeros", "torch.ones", "torch.ones", "torch.ones", "cortex_DIM.functions.gan_losses.get_positive_expectation", "cortex_DIM.functions.gan_losses.get_negative_expectation"], "function", ["home.repos.pwc.inspect_result.fanyun-sun_InfoGraph.semi-supervised.infomax.get_positive_expectation", "home.repos.pwc.inspect_result.fanyun-sun_InfoGraph.semi-supervised.infomax.get_negative_expectation"], ["def", "local_global_loss_", "(", "l_enc", ",", "g_enc", ",", "edge_index", ",", "batch", ",", "measure", ")", ":", "\n", "    ", "'''\n    Args:\n        l: Local feature map.\n        g: Global features.\n        measure: Type of f-divergence. For use with mode `fd`\n        mode: Loss mode. Fenchel-dual `fd`, NCE `nce`, or Donsker-Vadadhan `dv`.\n    Returns:\n        torch.Tensor: Loss.\n    '''", "\n", "num_graphs", "=", "g_enc", ".", "shape", "[", "0", "]", "\n", "num_nodes", "=", "l_enc", ".", "shape", "[", "0", "]", "\n", "\n", "pos_mask", "=", "torch", ".", "zeros", "(", "(", "num_nodes", ",", "num_graphs", ")", ")", ".", "cuda", "(", ")", "\n", "neg_mask", "=", "torch", ".", "ones", "(", "(", "num_nodes", ",", "num_graphs", ")", ")", ".", "cuda", "(", ")", "\n", "for", "nodeidx", ",", "graphidx", "in", "enumerate", "(", "batch", ")", ":", "\n", "        ", "pos_mask", "[", "nodeidx", "]", "[", "graphidx", "]", "=", "1.", "\n", "neg_mask", "[", "nodeidx", "]", "[", "graphidx", "]", "=", "0.", "\n", "\n", "", "res", "=", "torch", ".", "mm", "(", "l_enc", ",", "g_enc", ".", "t", "(", ")", ")", "\n", "\n", "E_pos", "=", "get_positive_expectation", "(", "res", "*", "pos_mask", ",", "measure", ",", "average", "=", "False", ")", ".", "sum", "(", ")", "\n", "E_pos", "=", "E_pos", "/", "num_nodes", "\n", "E_neg", "=", "get_negative_expectation", "(", "res", "*", "neg_mask", ",", "measure", ",", "average", "=", "False", ")", ".", "sum", "(", ")", "\n", "E_neg", "=", "E_neg", "/", "(", "num_nodes", "*", "(", "num_graphs", "-", "1", ")", ")", "\n", "\n", "return", "E_neg", "-", "E_pos", "\n", "\n"]], "home.repos.pwc.inspect_result.fanyun-sun_InfoGraph.unsupervised.losses.adj_loss_": [[34, 51], ["torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.eye().cuda", "torch.eye().cuda", "torch.eye().cuda", "zip", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.mm", "torch.mm", "torch.mm", "torch.BCELoss", "torch.zeros", "torch.zeros", "torch.zeros", "torch.eye", "torch.eye", "torch.eye", "l_enc.t", "node2.item", "node1.item", "node1.item", "node2.item"], "function", ["None"], ["", "def", "adj_loss_", "(", "l_enc", ",", "g_enc", ",", "edge_index", ",", "batch", ")", ":", "\n", "    ", "num_graphs", "=", "g_enc", ".", "shape", "[", "0", "]", "\n", "num_nodes", "=", "l_enc", ".", "shape", "[", "0", "]", "\n", "\n", "adj", "=", "torch", ".", "zeros", "(", "(", "num_nodes", ",", "num_nodes", ")", ")", ".", "cuda", "(", ")", "\n", "mask", "=", "torch", ".", "eye", "(", "num_nodes", ")", ".", "cuda", "(", ")", "\n", "for", "node1", ",", "node2", "in", "zip", "(", "edge_index", "[", "0", "]", ",", "edge_index", "[", "1", "]", ")", ":", "\n", "        ", "adj", "[", "node1", ".", "item", "(", ")", "]", "[", "node2", ".", "item", "(", ")", "]", "=", "1.", "\n", "adj", "[", "node2", ".", "item", "(", ")", "]", "[", "node1", ".", "item", "(", ")", "]", "=", "1.", "\n", "\n", "", "res", "=", "torch", ".", "sigmoid", "(", "(", "torch", ".", "mm", "(", "l_enc", ",", "l_enc", ".", "t", "(", ")", ")", ")", ")", "\n", "res", "=", "(", "1", "-", "mask", ")", "*", "res", "\n", "# print(res.shape, adj.shape)", "\n", "# input()", "\n", "\n", "loss", "=", "nn", ".", "BCELoss", "(", ")", "(", "res", ",", "adj", ")", "\n", "return", "loss", "\n", "", ""]], "home.repos.pwc.inspect_result.fanyun-sun_InfoGraph.functions.dim_losses.fenchel_dual_loss": [[13, 43], ["l.reshape.size", "l.reshape.permute", "l.reshape.reshape", "torch.mm", "torch.mm", "u.reshape.reshape", "torch.eye().cuda", "torch.eye().cuda", "cortex_DIM.functions.gan_losses.get_positive_expectation().mean", "cortex_DIM.functions.gan_losses.get_negative_expectation().mean", "l.reshape.t", "torch.eye().cuda.sum", "n_mask.sum", "torch.eye", "torch.eye", "cortex_DIM.functions.gan_losses.get_positive_expectation", "cortex_DIM.functions.gan_losses.get_negative_expectation"], "function", ["home.repos.pwc.inspect_result.fanyun-sun_InfoGraph.semi-supervised.infomax.get_positive_expectation", "home.repos.pwc.inspect_result.fanyun-sun_InfoGraph.semi-supervised.infomax.get_negative_expectation"], ["def", "fenchel_dual_loss", "(", "l", ",", "g", ",", "measure", "=", "None", ")", ":", "\n", "    ", "'''Computes the f-divergence distance between positive and negative joint distributions.\n\n    Divergences supported are Jensen-Shannon `JSD`, `GAN` (equivalent to JSD),\n    Squared Hellinger `H2`, Chi-squeared `X2`, `KL`, and reverse KL `RKL`.\n\n    Args:\n        l: Local feature map.\n        g: Global features.\n        measure: f-divergence measure.\n\n    Returns:\n        torch.Tensor: Loss.\n\n    '''", "\n", "N", ",", "local_units", ",", "n_locs", "=", "l", ".", "size", "(", ")", "\n", "l", "=", "l", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "l", "=", "l", ".", "reshape", "(", "-", "1", ",", "local_units", ")", "\n", "\n", "u", "=", "torch", ".", "mm", "(", "g", ",", "l", ".", "t", "(", ")", ")", "\n", "u", "=", "u", ".", "reshape", "(", "N", ",", "N", ",", "-", "1", ")", "\n", "mask", "=", "torch", ".", "eye", "(", "N", ")", ".", "cuda", "(", ")", "\n", "n_mask", "=", "1", "-", "mask", "\n", "\n", "E_pos", "=", "get_positive_expectation", "(", "u", ",", "measure", ",", "average", "=", "False", ")", ".", "mean", "(", "2", ")", "\n", "E_neg", "=", "get_negative_expectation", "(", "u", ",", "measure", ",", "average", "=", "False", ")", ".", "mean", "(", "2", ")", "\n", "E_pos", "=", "(", "E_pos", "*", "mask", ")", ".", "sum", "(", ")", "/", "mask", ".", "sum", "(", ")", "\n", "E_neg", "=", "(", "E_neg", "*", "n_mask", ")", ".", "sum", "(", ")", "/", "n_mask", ".", "sum", "(", ")", "\n", "loss", "=", "E_neg", "-", "E_pos", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.fanyun-sun_InfoGraph.functions.dim_losses.multi_fenchel_dual_loss": [[45, 85], ["l.reshape.size", "m.reshape.size", "l.reshape.view", "l.reshape.permute", "l.reshape.reshape", "m.reshape.view", "m.reshape.permute", "m.reshape.reshape", "torch.mm", "torch.mm", "u.reshape().permute.reshape().permute", "torch.eye().cuda", "torch.eye().cuda", "cortex_DIM.functions.gan_losses.get_positive_expectation().mean().mean", "cortex_DIM.functions.gan_losses.get_negative_expectation().mean().mean", "l.reshape.t", "torch.eye().cuda.sum", "n_mask.sum", "u.reshape().permute.reshape", "torch.eye", "torch.eye", "cortex_DIM.functions.gan_losses.get_positive_expectation().mean", "cortex_DIM.functions.gan_losses.get_negative_expectation().mean", "cortex_DIM.functions.gan_losses.get_positive_expectation", "cortex_DIM.functions.gan_losses.get_negative_expectation"], "function", ["home.repos.pwc.inspect_result.fanyun-sun_InfoGraph.semi-supervised.infomax.get_positive_expectation", "home.repos.pwc.inspect_result.fanyun-sun_InfoGraph.semi-supervised.infomax.get_negative_expectation"], ["", "def", "multi_fenchel_dual_loss", "(", "l", ",", "m", ",", "measure", "=", "None", ")", ":", "\n", "    ", "'''Computes the f-divergence distance between positive and negative joint distributions.\n\n    Used for multiple globals.\n\n    Divergences supported are Jensen-Shannon `JSD`, `GAN` (equivalent to JSD),\n    Squared Hellinger `H2`, Chi-squeared `X2`, `KL`, and reverse KL `RKL`.\n\n    Args:\n        l: Local feature map.\n        m: Multiple globals feature map.\n        measure: f-divergence measure.\n\n    Returns:\n        torch.Tensor: Loss.\n\n    '''", "\n", "N", ",", "units", ",", "n_locals", "=", "l", ".", "size", "(", ")", "\n", "n_multis", "=", "m", ".", "size", "(", "2", ")", "\n", "\n", "l", "=", "l", ".", "view", "(", "N", ",", "units", ",", "n_locals", ")", "\n", "l", "=", "l", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "l", "=", "l", ".", "reshape", "(", "-", "1", ",", "units", ")", "\n", "\n", "m", "=", "m", ".", "view", "(", "N", ",", "units", ",", "n_multis", ")", "\n", "m", "=", "m", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "m", "=", "m", ".", "reshape", "(", "-", "1", ",", "units", ")", "\n", "\n", "u", "=", "torch", ".", "mm", "(", "m", ",", "l", ".", "t", "(", ")", ")", "\n", "u", "=", "u", ".", "reshape", "(", "N", ",", "n_multis", ",", "N", ",", "n_locals", ")", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", "\n", "\n", "mask", "=", "torch", ".", "eye", "(", "N", ")", ".", "cuda", "(", ")", "\n", "n_mask", "=", "1", "-", "mask", "\n", "\n", "E_pos", "=", "get_positive_expectation", "(", "u", ",", "measure", ",", "average", "=", "False", ")", ".", "mean", "(", "2", ")", ".", "mean", "(", "2", ")", "\n", "E_neg", "=", "get_negative_expectation", "(", "u", ",", "measure", ",", "average", "=", "False", ")", ".", "mean", "(", "2", ")", ".", "mean", "(", "2", ")", "\n", "E_pos", "=", "(", "E_pos", "*", "mask", ")", ".", "sum", "(", ")", "/", "mask", ".", "sum", "(", ")", "\n", "E_neg", "=", "(", "E_neg", "*", "n_mask", ")", ".", "sum", "(", ")", "/", "n_mask", ".", "sum", "(", ")", "\n", "loss", "=", "E_neg", "-", "E_pos", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.fanyun-sun_InfoGraph.functions.dim_losses.nce_loss": [[87, 116], ["l.size", "l.permute", "torch.matmul", "torch.matmul", "l.permute.reshape", "torch.mm", "torch.mm", "u_n.reshape().unsqueeze().expand.reshape", "torch.eye().unsqueeze().cuda", "torch.eye().unsqueeze().cuda", "u_n.reshape().unsqueeze().expand.reshape().unsqueeze().expand", "torch.cat", "torch.cat", "torch.log_softmax", "g.unsqueeze", "l_p.reshape.t", "pred_log[].mean", "torch.eye().unsqueeze", "torch.eye().unsqueeze", "u_n.reshape().unsqueeze().expand.reshape().unsqueeze", "torch.eye", "torch.eye", "u_n.reshape().unsqueeze().expand.reshape"], "function", ["None"], ["", "def", "nce_loss", "(", "l", ",", "g", ")", ":", "\n", "    ", "'''Computes the noise contrastive estimation-based loss.\n\n    Args:\n        l: Local feature map.\n        g: Global features.\n\n    Returns:\n        torch.Tensor: Loss.\n\n    '''", "\n", "N", ",", "local_units", ",", "n_locs", "=", "l", ".", "size", "(", ")", "\n", "l_p", "=", "l", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "u_p", "=", "torch", ".", "matmul", "(", "l_p", ",", "g", ".", "unsqueeze", "(", "dim", "=", "2", ")", ")", "\n", "\n", "l_n", "=", "l_p", ".", "reshape", "(", "-", "1", ",", "local_units", ")", "\n", "u_n", "=", "torch", ".", "mm", "(", "g", ",", "l_n", ".", "t", "(", ")", ")", "\n", "u_n", "=", "u_n", ".", "reshape", "(", "N", ",", "N", ",", "n_locs", ")", "\n", "\n", "mask", "=", "torch", ".", "eye", "(", "N", ")", ".", "unsqueeze", "(", "dim", "=", "2", ")", ".", "cuda", "(", ")", "\n", "n_mask", "=", "1", "-", "mask", "\n", "\n", "u_n", "=", "(", "n_mask", "*", "u_n", ")", "-", "(", "10.", "*", "(", "1", "-", "n_mask", ")", ")", "# mask out \"self\" examples", "\n", "u_n", "=", "u_n", ".", "reshape", "(", "N", ",", "-", "1", ")", ".", "unsqueeze", "(", "dim", "=", "1", ")", ".", "expand", "(", "-", "1", ",", "n_locs", ",", "-", "1", ")", "\n", "\n", "pred_lgt", "=", "torch", ".", "cat", "(", "[", "u_p", ",", "u_n", "]", ",", "dim", "=", "2", ")", "\n", "pred_log", "=", "F", ".", "log_softmax", "(", "pred_lgt", ",", "dim", "=", "2", ")", "\n", "loss", "=", "-", "pred_log", "[", ":", ",", ":", ",", "0", "]", ".", "mean", "(", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.fanyun-sun_InfoGraph.functions.dim_losses.multi_nce_loss": [[118, 156], ["l.view.size", "m.view.size", "l.view.view", "m.view.view", "l.view.permute", "m.view.permute", "torch.matmul().unsqueeze", "torch.matmul().unsqueeze", "l.permute.reshape", "m.permute.reshape", "torch.mm", "torch.mm", "u_n.reshape().unsqueeze().expand.reshape().permute", "[].cuda", "u_n.reshape().unsqueeze().expand.reshape().unsqueeze().expand", "torch.cat", "torch.cat", "torch.log_softmax", "l_p.reshape.t", "pred_log[].mean", "torch.matmul", "torch.matmul", "u_n.reshape().unsqueeze().expand.reshape", "u_n.reshape().unsqueeze().expand.reshape().unsqueeze", "torch.eye", "torch.eye", "u_n.reshape().unsqueeze().expand.reshape"], "function", ["None"], ["", "def", "multi_nce_loss", "(", "l", ",", "m", ")", ":", "\n", "    ", "'''\n\n    Used for multiple globals.\n\n    Args:\n        l: Local feature map.\n        m: Multiple globals feature map.\n\n    Returns:\n        torch.Tensor: Loss.\n\n    '''", "\n", "N", ",", "units", ",", "n_locals", "=", "l", ".", "size", "(", ")", "\n", "_", ",", "_", ",", "n_multis", "=", "m", ".", "size", "(", ")", "\n", "\n", "l", "=", "l", ".", "view", "(", "N", ",", "units", ",", "n_locals", ")", "\n", "m", "=", "m", ".", "view", "(", "N", ",", "units", ",", "n_multis", ")", "\n", "l_p", "=", "l", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "m_p", "=", "m", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "u_p", "=", "torch", ".", "matmul", "(", "l_p", ",", "m", ")", ".", "unsqueeze", "(", "2", ")", "\n", "\n", "l_n", "=", "l_p", ".", "reshape", "(", "-", "1", ",", "units", ")", "\n", "m_n", "=", "m_p", ".", "reshape", "(", "-", "1", ",", "units", ")", "\n", "u_n", "=", "torch", ".", "mm", "(", "m_n", ",", "l_n", ".", "t", "(", ")", ")", "\n", "u_n", "=", "u_n", ".", "reshape", "(", "N", ",", "n_multis", ",", "N", ",", "n_locals", ")", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", "\n", "\n", "mask", "=", "torch", ".", "eye", "(", "N", ")", "[", ":", ",", ":", ",", "None", ",", "None", "]", ".", "cuda", "(", ")", "\n", "n_mask", "=", "1", "-", "mask", "\n", "\n", "u_n", "=", "(", "n_mask", "*", "u_n", ")", "-", "(", "10.", "*", "(", "1", "-", "n_mask", ")", ")", "# mask out \"self\" examples", "\n", "u_n", "=", "u_n", ".", "reshape", "(", "N", ",", "N", "*", "n_locals", ",", "n_multis", ")", ".", "unsqueeze", "(", "dim", "=", "1", ")", ".", "expand", "(", "-", "1", ",", "n_locals", ",", "-", "1", ",", "-", "1", ")", "\n", "\n", "pred_lgt", "=", "torch", ".", "cat", "(", "[", "u_p", ",", "u_n", "]", ",", "dim", "=", "2", ")", "\n", "pred_log", "=", "F", ".", "log_softmax", "(", "pred_lgt", ",", "dim", "=", "2", ")", "\n", "loss", "=", "-", "pred_log", "[", ":", ",", ":", ",", "0", "]", ".", "mean", "(", ")", "\n", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.fanyun-sun_InfoGraph.functions.dim_losses.donsker_varadhan_loss": [[158, 186], ["l.reshape.size", "l.reshape.permute", "l.reshape.reshape", "torch.mm", "torch.mm", "u.reshape.reshape", "torch.eye().cuda", "torch.eye().cuda", "torch.max", "torch.max", "l.reshape.t", "torch.eye().cuda.sum", "math.log", "torch.eye", "torch.eye", "torch.log", "torch.log", "n_mask.sum", "u.reshape.mean", "torch.exp", "torch.exp"], "function", ["None"], ["", "def", "donsker_varadhan_loss", "(", "l", ",", "g", ")", ":", "\n", "    ", "'''\n\n    Args:\n        l: Local feature map.\n        g: Global features.\n\n    Returns:\n        torch.Tensor: Loss.\n\n    '''", "\n", "N", ",", "local_units", ",", "n_locs", "=", "l", ".", "size", "(", ")", "\n", "l", "=", "l", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "l", "=", "l", ".", "reshape", "(", "-", "1", ",", "local_units", ")", "\n", "\n", "u", "=", "torch", ".", "mm", "(", "g", ",", "l", ".", "t", "(", ")", ")", "\n", "u", "=", "u", ".", "reshape", "(", "N", ",", "N", ",", "n_locs", ")", "\n", "\n", "mask", "=", "torch", ".", "eye", "(", "N", ")", ".", "cuda", "(", ")", "\n", "n_mask", "=", "(", "1", "-", "mask", ")", "[", ":", ",", ":", ",", "None", "]", "\n", "\n", "E_pos", "=", "(", "u", ".", "mean", "(", "2", ")", "*", "mask", ")", ".", "sum", "(", ")", "/", "mask", ".", "sum", "(", ")", "\n", "\n", "u", "-=", "100", "*", "(", "1", "-", "n_mask", ")", "\n", "u_max", "=", "torch", ".", "max", "(", "u", ")", "\n", "E_neg", "=", "torch", ".", "log", "(", "(", "n_mask", "*", "torch", ".", "exp", "(", "u", "-", "u_max", ")", ")", ".", "sum", "(", ")", "+", "1e-6", ")", "+", "u_max", "-", "math", ".", "log", "(", "n_mask", ".", "sum", "(", ")", ")", "\n", "loss", "=", "E_neg", "-", "E_pos", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.fanyun-sun_InfoGraph.functions.dim_losses.multi_donsker_varadhan_loss": [[188, 225], ["l.reshape.size", "m.reshape.size", "l.reshape.view", "l.reshape.permute", "l.reshape.reshape", "m.reshape.view", "m.reshape.permute", "m.reshape.reshape", "torch.mm", "torch.mm", "u.reshape().permute.reshape().permute", "torch.eye().cuda", "torch.eye().cuda", "torch.max", "torch.max", "l.reshape.t", "torch.eye().cuda.sum", "math.log", "u.reshape().permute.reshape", "torch.eye", "torch.eye", "torch.log", "torch.log", "n_mask.sum", "u.reshape().permute.mean", "torch.exp", "torch.exp"], "function", ["None"], ["", "def", "multi_donsker_varadhan_loss", "(", "l", ",", "m", ")", ":", "\n", "    ", "'''\n\n    Used for multiple globals.\n\n    Args:\n        l: Local feature map.\n        m: Multiple globals feature map.\n\n    Returns:\n        torch.Tensor: Loss.\n\n    '''", "\n", "N", ",", "units", ",", "n_locals", "=", "l", ".", "size", "(", ")", "\n", "n_multis", "=", "m", ".", "size", "(", "2", ")", "\n", "\n", "l", "=", "l", ".", "view", "(", "N", ",", "units", ",", "n_locals", ")", "\n", "l", "=", "l", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "l", "=", "l", ".", "reshape", "(", "-", "1", ",", "units", ")", "\n", "\n", "m", "=", "m", ".", "view", "(", "N", ",", "units", ",", "n_multis", ")", "\n", "m", "=", "m", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "m", "=", "m", ".", "reshape", "(", "-", "1", ",", "units", ")", "\n", "\n", "u", "=", "torch", ".", "mm", "(", "m", ",", "l", ".", "t", "(", ")", ")", "\n", "u", "=", "u", ".", "reshape", "(", "N", ",", "n_multis", ",", "N", ",", "n_locals", ")", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", "\n", "\n", "mask", "=", "torch", ".", "eye", "(", "N", ")", ".", "cuda", "(", ")", "\n", "n_mask", "=", "1", "-", "mask", "\n", "\n", "E_pos", "=", "(", "u", ".", "mean", "(", "2", ")", "*", "mask", ")", ".", "sum", "(", ")", "/", "mask", ".", "sum", "(", ")", "\n", "\n", "u", "-=", "100", "*", "(", "1", "-", "n_mask", ")", "\n", "u_max", "=", "torch", ".", "max", "(", "u", ")", "\n", "E_neg", "=", "torch", ".", "log", "(", "(", "n_mask", "*", "torch", ".", "exp", "(", "u", "-", "u_max", ")", ")", ".", "sum", "(", ")", "+", "1e-6", ")", "+", "u_max", "-", "math", ".", "log", "(", "n_mask", ".", "sum", "(", ")", ")", "\n", "loss", "=", "E_neg", "-", "E_pos", "\n", "return", "loss", "", "", ""]], "home.repos.pwc.inspect_result.fanyun-sun_InfoGraph.functions.gan_losses.raise_measure_error": [[13, 18], ["NotImplementedError"], "function", ["None"], ["def", "raise_measure_error", "(", "measure", ")", ":", "\n", "    ", "supported_measures", "=", "[", "'GAN'", ",", "'JSD'", ",", "'X2'", ",", "'KL'", ",", "'RKL'", ",", "'DV'", ",", "'H2'", ",", "'W1'", "]", "\n", "raise", "NotImplementedError", "(", "\n", "'Measure `{}` not supported. Supported: {}'", ".", "format", "(", "measure", ",", "\n", "supported_measures", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fanyun-sun_InfoGraph.functions.gan_losses.get_positive_expectation": [[20, 57], ["math.log", "Ep.mean", "torch.softplus", "torch.softplus", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "gan_losses.raise_measure_error"], "function", ["home.repos.pwc.inspect_result.fanyun-sun_InfoGraph.functions.gan_losses.raise_measure_error"], ["", "def", "get_positive_expectation", "(", "p_samples", ",", "measure", ",", "average", "=", "True", ")", ":", "\n", "    ", "\"\"\"Computes the positive part of a divergence / difference.\n\n    Args:\n        p_samples: Positive samples.\n        measure: Measure to compute for.\n        average: Average the result over samples.\n\n    Returns:\n        torch.Tensor\n\n    \"\"\"", "\n", "log_2", "=", "math", ".", "log", "(", "2.", ")", "\n", "\n", "if", "measure", "==", "'GAN'", ":", "\n", "        ", "Ep", "=", "-", "F", ".", "softplus", "(", "-", "p_samples", ")", "\n", "", "elif", "measure", "==", "'JSD'", ":", "\n", "        ", "Ep", "=", "log_2", "-", "F", ".", "softplus", "(", "-", "p_samples", ")", "\n", "", "elif", "measure", "==", "'X2'", ":", "\n", "        ", "Ep", "=", "p_samples", "**", "2", "\n", "", "elif", "measure", "==", "'KL'", ":", "\n", "        ", "Ep", "=", "p_samples", "+", "1.", "\n", "", "elif", "measure", "==", "'RKL'", ":", "\n", "        ", "Ep", "=", "-", "torch", ".", "exp", "(", "-", "p_samples", ")", "\n", "", "elif", "measure", "==", "'DV'", ":", "\n", "        ", "Ep", "=", "p_samples", "\n", "", "elif", "measure", "==", "'H2'", ":", "\n", "        ", "Ep", "=", "1.", "-", "torch", ".", "exp", "(", "-", "p_samples", ")", "\n", "", "elif", "measure", "==", "'W1'", ":", "\n", "        ", "Ep", "=", "p_samples", "\n", "", "else", ":", "\n", "        ", "raise_measure_error", "(", "measure", ")", "\n", "\n", "", "if", "average", ":", "\n", "        ", "return", "Ep", ".", "mean", "(", ")", "\n", "", "else", ":", "\n", "        ", "return", "Ep", "\n", "\n"]], "home.repos.pwc.inspect_result.fanyun-sun_InfoGraph.functions.gan_losses.get_negative_expectation": [[59, 96], ["math.log", "torch.exp.mean", "torch.softplus", "torch.softplus", "torch.exp", "torch.exp", "torch.sqrt", "torch.sqrt", "cortex_DIM.functions.misc.log_sum_exp", "math.log", "q_samples.size", "torch.exp", "torch.exp", "gan_losses.raise_measure_error"], "function", ["home.repos.pwc.inspect_result.fanyun-sun_InfoGraph.semi-supervised.infomax.log_sum_exp", "home.repos.pwc.inspect_result.fanyun-sun_InfoGraph.functions.gan_losses.raise_measure_error"], ["", "", "def", "get_negative_expectation", "(", "q_samples", ",", "measure", ",", "average", "=", "True", ")", ":", "\n", "    ", "\"\"\"Computes the negative part of a divergence / difference.\n\n    Args:\n        q_samples: Negative samples.\n        measure: Measure to compute for.\n        average: Average the result over samples.\n\n    Returns:\n        torch.Tensor\n\n    \"\"\"", "\n", "log_2", "=", "math", ".", "log", "(", "2.", ")", "\n", "\n", "if", "measure", "==", "'GAN'", ":", "\n", "        ", "Eq", "=", "F", ".", "softplus", "(", "-", "q_samples", ")", "+", "q_samples", "\n", "", "elif", "measure", "==", "'JSD'", ":", "\n", "        ", "Eq", "=", "F", ".", "softplus", "(", "-", "q_samples", ")", "+", "q_samples", "-", "log_2", "\n", "", "elif", "measure", "==", "'X2'", ":", "\n", "        ", "Eq", "=", "-", "0.5", "*", "(", "(", "torch", ".", "sqrt", "(", "q_samples", "**", "2", ")", "+", "1.", ")", "**", "2", ")", "\n", "", "elif", "measure", "==", "'KL'", ":", "\n", "        ", "Eq", "=", "torch", ".", "exp", "(", "q_samples", ")", "\n", "", "elif", "measure", "==", "'RKL'", ":", "\n", "        ", "Eq", "=", "q_samples", "-", "1.", "\n", "", "elif", "measure", "==", "'DV'", ":", "\n", "        ", "Eq", "=", "log_sum_exp", "(", "q_samples", ",", "0", ")", "-", "math", ".", "log", "(", "q_samples", ".", "size", "(", "0", ")", ")", "\n", "", "elif", "measure", "==", "'H2'", ":", "\n", "        ", "Eq", "=", "torch", ".", "exp", "(", "q_samples", ")", "-", "1.", "\n", "", "elif", "measure", "==", "'W1'", ":", "\n", "        ", "Eq", "=", "q_samples", "\n", "", "else", ":", "\n", "        ", "raise_measure_error", "(", "measure", ")", "\n", "\n", "", "if", "average", ":", "\n", "        ", "return", "Eq", ".", "mean", "(", ")", "\n", "", "else", ":", "\n", "        ", "return", "Eq", "", "", "", ""]], "home.repos.pwc.inspect_result.fanyun-sun_InfoGraph.functions.misc.log_sum_exp": [[8, 22], ["torch.max", "torch.log", "torch.exp().sum", "torch.exp"], "function", ["None"], ["def", "log_sum_exp", "(", "x", ",", "axis", "=", "None", ")", ":", "\n", "    ", "\"\"\"Log sum exp function\n\n    Args:\n        x: Input.\n        axis: Axis over which to perform sum.\n\n    Returns:\n        torch.Tensor: log sum exp\n\n    \"\"\"", "\n", "x_max", "=", "torch", ".", "max", "(", "x", ",", "axis", ")", "[", "0", "]", "\n", "y", "=", "torch", ".", "log", "(", "(", "torch", ".", "exp", "(", "x", "-", "x_max", ")", ")", ".", "sum", "(", "axis", ")", ")", "+", "x_max", "\n", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.fanyun-sun_InfoGraph.functions.misc.random_permute": [[24, 40], ["X[].transpose.transpose", "torch.rand().cuda", "torch.range().long", "X[].transpose", "torch.rand().cuda.sort", "torch.rand", "torch.range", "X[].transpose.size", "X[].transpose.size", "X[].transpose.size"], "function", ["None"], ["", "def", "random_permute", "(", "X", ")", ":", "\n", "    ", "\"\"\"Randomly permutes a tensor.\n\n    Args:\n        X: Input tensor.\n\n    Returns:\n        torch.Tensor\n\n    \"\"\"", "\n", "X", "=", "X", ".", "transpose", "(", "1", ",", "2", ")", "\n", "b", "=", "torch", ".", "rand", "(", "(", "X", ".", "size", "(", "0", ")", ",", "X", ".", "size", "(", "1", ")", ")", ")", ".", "cuda", "(", ")", "\n", "idx", "=", "b", ".", "sort", "(", "0", ")", "[", "1", "]", "\n", "adx", "=", "torch", ".", "range", "(", "0", ",", "X", ".", "size", "(", "1", ")", "-", "1", ")", ".", "long", "(", ")", "\n", "X", "=", "X", "[", "idx", ",", "adx", "[", "None", ",", ":", "]", "]", ".", "transpose", "(", "1", ",", "2", ")", "\n", "return", "X", "\n", "", ""]], "home.repos.pwc.inspect_result.fanyun-sun_InfoGraph.nn_modules.convnet.Convnet.__init__": [[43, 46], ["torch.Module.__init__", "convnet.Convnet.create_layers"], "methods", ["home.repos.pwc.inspect_result.fanyun-sun_InfoGraph.semi-supervised.model.Net.__init__", "home.repos.pwc.inspect_result.fanyun-sun_InfoGraph.nn_modules.resnet.FoldedResNet.create_layers"], ["def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "create_layers", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fanyun-sun_InfoGraph.nn_modules.convnet.Convnet.create_layers": [[47, 65], ["convnet.Convnet.create_conv_layers", "cortex_DIM.nn_modules.misc.View", "convnet.Convnet.create_linear_layers"], "methods", ["home.repos.pwc.inspect_result.fanyun-sun_InfoGraph.nn_modules.convnet.FoldedConvnet.create_conv_layers", "home.repos.pwc.inspect_result.fanyun-sun_InfoGraph.nn_modules.convnet.Convnet.create_linear_layers"], ["", "def", "create_layers", "(", "self", ",", "shape", ",", "conv_args", "=", "None", ",", "fc_args", "=", "None", ")", ":", "\n", "        ", "'''Creates layers\n\n        conv_args are in format (dim_h, f_size, stride, pad, batch_norm, dropout, nonlinearity, pool)\n        fc_args are in format (dim_h, batch_norm, dropout, nonlinearity)\n\n        Args:\n            shape: Shape of input.\n            conv_args: List of tuple of convolutional arguments.\n            fc_args: List of tuple of fully-connected arguments.\n        '''", "\n", "\n", "self", ".", "conv_layers", ",", "self", ".", "conv_shape", "=", "self", ".", "create_conv_layers", "(", "shape", ",", "conv_args", ")", "\n", "\n", "dim_x", ",", "dim_y", ",", "dim_out", "=", "self", ".", "conv_shape", "\n", "dim_r", "=", "dim_x", "*", "dim_y", "*", "dim_out", "\n", "self", ".", "reshape", "=", "View", "(", "-", "1", ",", "dim_r", ")", "\n", "self", ".", "fc_layers", ",", "_", "=", "self", ".", "create_linear_layers", "(", "dim_r", ",", "fc_args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fanyun-sun_InfoGraph.nn_modules.convnet.Convnet.create_conv_layers": [[66, 117], ["torch.Sequential", "torch.Sequential", "enumerate", "torch.Sequential", "torch.Sequential", "torch.Sequential.add_module", "torch.Conv2d", "torch.Conv2d", "torch.Sequential.add_module", "convnet.Convnet.next_size", "torch.Sequential.add_module", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Sequential.add_module", "get_nonlinearity", "torch.Sequential.add_module", "getattr", "torch.Sequential.add_module", "convnet.Convnet.next_size", "torch.Dropout2d", "torch.Dropout2d", "getattr."], "methods", ["home.repos.pwc.inspect_result.fanyun-sun_InfoGraph.nn_modules.convnet.Convnet.next_size", "home.repos.pwc.inspect_result.fanyun-sun_InfoGraph.nn_modules.convnet.Convnet.next_size"], ["", "def", "create_conv_layers", "(", "self", ",", "shape", ",", "conv_args", ")", ":", "\n", "        ", "'''Creates a set of convolutional layers.\n\n        Args:\n            shape: Input shape.\n            conv_args: List of tuple of convolutional arguments.\n\n        Returns:\n            nn.Sequential: a sequence of convolutional layers.\n\n        '''", "\n", "\n", "conv_layers", "=", "nn", ".", "Sequential", "(", ")", "\n", "conv_args", "=", "conv_args", "or", "[", "]", "\n", "\n", "dim_x", ",", "dim_y", ",", "dim_in", "=", "shape", "\n", "\n", "for", "i", ",", "(", "dim_out", ",", "f", ",", "s", ",", "p", ",", "batch_norm", ",", "dropout", ",", "nonlinearity", ",", "pool", ")", "in", "enumerate", "(", "conv_args", ")", ":", "\n", "            ", "name", "=", "'({}/{})_{}'", ".", "format", "(", "dim_in", ",", "dim_out", ",", "i", "+", "1", ")", "\n", "conv_block", "=", "nn", ".", "Sequential", "(", ")", "\n", "\n", "if", "dim_out", "is", "not", "None", ":", "\n", "                ", "conv", "=", "nn", ".", "Conv2d", "(", "dim_in", ",", "dim_out", ",", "kernel_size", "=", "f", ",", "stride", "=", "s", ",", "padding", "=", "p", ",", "bias", "=", "not", "(", "batch_norm", ")", ")", "\n", "conv_block", ".", "add_module", "(", "name", "+", "'conv'", ",", "conv", ")", "\n", "dim_x", ",", "dim_y", "=", "self", ".", "next_size", "(", "dim_x", ",", "dim_y", ",", "f", ",", "s", ",", "p", ")", "\n", "", "else", ":", "\n", "                ", "dim_out", "=", "dim_in", "\n", "\n", "", "if", "dropout", ":", "\n", "                ", "conv_block", ".", "add_module", "(", "name", "+", "'do'", ",", "nn", ".", "Dropout2d", "(", "p", "=", "dropout", ")", ")", "\n", "", "if", "batch_norm", ":", "\n", "                ", "bn", "=", "nn", ".", "BatchNorm2d", "(", "dim_out", ")", "\n", "conv_block", ".", "add_module", "(", "name", "+", "'bn'", ",", "bn", ")", "\n", "\n", "", "if", "nonlinearity", ":", "\n", "                ", "nonlinearity", "=", "get_nonlinearity", "(", "nonlinearity", ")", "\n", "conv_block", ".", "add_module", "(", "nonlinearity", ".", "__class__", ".", "__name__", ",", "nonlinearity", ")", "\n", "\n", "", "if", "pool", ":", "\n", "                ", "(", "pool_type", ",", "kernel", ",", "stride", ")", "=", "pool", "\n", "Pool", "=", "getattr", "(", "nn", ",", "pool_type", ")", "\n", "conv_block", ".", "add_module", "(", "name", "+", "'pool'", ",", "Pool", "(", "kernel_size", "=", "kernel", ",", "stride", "=", "stride", ")", ")", "\n", "dim_x", ",", "dim_y", "=", "self", ".", "next_size", "(", "dim_x", ",", "dim_y", ",", "kernel", ",", "stride", ",", "0", ")", "\n", "\n", "", "conv_layers", ".", "add_module", "(", "name", ",", "conv_block", ")", "\n", "\n", "dim_in", "=", "dim_out", "\n", "\n", "", "dim_out", "=", "dim_in", "\n", "\n", "return", "conv_layers", ",", "(", "dim_x", ",", "dim_y", ",", "dim_out", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fanyun-sun_InfoGraph.nn_modules.convnet.Convnet.create_linear_layers": [[118, 157], ["torch.Sequential", "torch.Sequential", "enumerate", "torch.Sequential", "torch.Sequential", "torch.Sequential.add_module", "torch.Sequential.add_module", "torch.Sequential.add_module", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.Sequential.add_module", "get_nonlinearity", "torch.Sequential.add_module", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout"], "methods", ["None"], ["", "def", "create_linear_layers", "(", "self", ",", "dim_in", ",", "fc_args", ")", ":", "\n", "        ", "'''\n\n        Args:\n            dim_in: Number of input units.\n            fc_args: List of tuple of fully-connected arguments.\n\n        Returns:\n            nn.Sequential.\n\n        '''", "\n", "\n", "fc_layers", "=", "nn", ".", "Sequential", "(", ")", "\n", "fc_args", "=", "fc_args", "or", "[", "]", "\n", "\n", "for", "i", ",", "(", "dim_out", ",", "batch_norm", ",", "dropout", ",", "nonlinearity", ")", "in", "enumerate", "(", "fc_args", ")", ":", "\n", "            ", "name", "=", "'({}/{})_{}'", ".", "format", "(", "dim_in", ",", "dim_out", ",", "i", "+", "1", ")", "\n", "fc_block", "=", "nn", ".", "Sequential", "(", ")", "\n", "\n", "if", "dim_out", "is", "not", "None", ":", "\n", "                ", "fc_block", ".", "add_module", "(", "name", "+", "'fc'", ",", "nn", ".", "Linear", "(", "dim_in", ",", "dim_out", ")", ")", "\n", "", "else", ":", "\n", "                ", "dim_out", "=", "dim_in", "\n", "\n", "", "if", "dropout", ":", "\n", "                ", "fc_block", ".", "add_module", "(", "name", "+", "'do'", ",", "nn", ".", "Dropout", "(", "p", "=", "dropout", ")", ")", "\n", "", "if", "batch_norm", ":", "\n", "                ", "bn", "=", "nn", ".", "BatchNorm1d", "(", "dim_out", ")", "\n", "fc_block", ".", "add_module", "(", "name", "+", "'bn'", ",", "bn", ")", "\n", "\n", "", "if", "nonlinearity", ":", "\n", "                ", "nonlinearity", "=", "get_nonlinearity", "(", "nonlinearity", ")", "\n", "fc_block", ".", "add_module", "(", "nonlinearity", ".", "__class__", ".", "__name__", ",", "nonlinearity", ")", "\n", "\n", "", "fc_layers", ".", "add_module", "(", "name", ",", "fc_block", ")", "\n", "\n", "dim_in", "=", "dim_out", "\n", "\n", "", "return", "fc_layers", ",", "dim_in", "\n", "\n"]], "home.repos.pwc.inspect_result.fanyun-sun_InfoGraph.nn_modules.convnet.Convnet.next_size": [[158, 188], ["isinstance", "isinstance", "isinstance", "convnet.infer_conv_size", "convnet.infer_conv_size"], "methods", ["home.repos.pwc.inspect_result.fanyun-sun_InfoGraph.nn_modules.convnet.infer_conv_size", "home.repos.pwc.inspect_result.fanyun-sun_InfoGraph.nn_modules.convnet.infer_conv_size"], ["", "def", "next_size", "(", "self", ",", "dim_x", ",", "dim_y", ",", "k", ",", "s", ",", "p", ")", ":", "\n", "        ", "'''Infers the next size of a convolutional layer.\n\n        Args:\n            dim_x: First dimension.\n            dim_y: Second dimension.\n            k: Kernel size.\n            s: Stride.\n            p: Padding.\n\n        Returns:\n            (int, int): (First output dimension, Second output dimension)\n\n        '''", "\n", "if", "isinstance", "(", "k", ",", "int", ")", ":", "\n", "            ", "kx", ",", "ky", "=", "(", "k", ",", "k", ")", "\n", "", "else", ":", "\n", "            ", "kx", ",", "ky", "=", "k", "\n", "\n", "", "if", "isinstance", "(", "s", ",", "int", ")", ":", "\n", "            ", "sx", ",", "sy", "=", "(", "s", ",", "s", ")", "\n", "", "else", ":", "\n", "            ", "sx", ",", "sy", "=", "s", "\n", "\n", "", "if", "isinstance", "(", "p", ",", "int", ")", ":", "\n", "            ", "px", ",", "py", "=", "(", "p", ",", "p", ")", "\n", "", "else", ":", "\n", "            ", "px", ",", "py", "=", "p", "\n", "", "return", "(", "infer_conv_size", "(", "dim_x", ",", "kx", ",", "sx", ",", "px", ")", ",", "\n", "infer_conv_size", "(", "dim_y", ",", "ky", ",", "sy", ",", "py", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fanyun-sun_InfoGraph.nn_modules.convnet.Convnet.forward": [[189, 220], ["convnet.Convnet.reshape", "convnet.Convnet.conv_layers", "convnet.Convnet.fc_layers", "conv_layer", "convnet.Convnet.append", "fc_layer", "convnet.Convnet.append"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ":", "torch", ".", "Tensor", ",", "return_full_list", "=", "False", ")", ":", "\n", "        ", "'''Forward pass\n\n        Args:\n            x: Input.\n            return_full_list: Optional, returns all layer outputs.\n\n        Returns:\n            torch.Tensor or list of torch.Tensor.\n\n        '''", "\n", "if", "return_full_list", ":", "\n", "            ", "conv_out", "=", "[", "]", "\n", "for", "conv_layer", "in", "self", ".", "conv_layers", ":", "\n", "                ", "x", "=", "conv_layer", "(", "x", ")", "\n", "conv_out", ".", "append", "(", "x", ")", "\n", "", "", "else", ":", "\n", "            ", "conv_out", "=", "self", ".", "conv_layers", "(", "x", ")", "\n", "x", "=", "conv_out", "\n", "\n", "", "x", "=", "self", ".", "reshape", "(", "x", ")", "\n", "\n", "if", "return_full_list", ":", "\n", "            ", "fc_out", "=", "[", "]", "\n", "for", "fc_layer", "in", "self", ".", "fc_layers", ":", "\n", "                ", "x", "=", "fc_layer", "(", "x", ")", "\n", "fc_out", ".", "append", "(", "x", ")", "\n", "", "", "else", ":", "\n", "            ", "fc_out", "=", "self", ".", "fc_layers", "(", "x", ")", "\n", "\n", "", "return", "conv_out", ",", "fc_out", "\n", "\n"]], "home.repos.pwc.inspect_result.fanyun-sun_InfoGraph.nn_modules.convnet.FoldedConvnet.create_layers": [[227, 259], ["cortex_DIM.nn_modules.misc.Unfold", "cortex_DIM.nn_modules.misc.Fold", "convnet.FoldedConvnet.create_conv_layers", "cortex_DIM.nn_modules.misc.View", "convnet.FoldedConvnet.create_linear_layers", "ValueError"], "methods", ["home.repos.pwc.inspect_result.fanyun-sun_InfoGraph.nn_modules.convnet.FoldedConvnet.create_conv_layers", "home.repos.pwc.inspect_result.fanyun-sun_InfoGraph.nn_modules.convnet.Convnet.create_linear_layers"], ["def", "create_layers", "(", "self", ",", "shape", ",", "crop_size", "=", "8", ",", "conv_args", "=", "None", ",", "fc_args", "=", "None", ")", ":", "\n", "        ", "'''Creates layers\n\n        conv_args are in format (dim_h, f_size, stride, pad, batch_norm, dropout, nonlinearity, pool)\n        fc_args are in format (dim_h, batch_norm, dropout, nonlinearity)\n\n        Args:\n            shape: Shape of input.\n            crop_size: Size of crops\n            conv_args: List of tuple of convolutional arguments.\n            fc_args: List of tuple of fully-connected arguments.\n        '''", "\n", "\n", "self", ".", "crop_size", "=", "crop_size", "\n", "\n", "dim_x", ",", "dim_y", ",", "dim_in", "=", "shape", "\n", "if", "dim_x", "!=", "dim_y", ":", "\n", "            ", "raise", "ValueError", "(", "'x and y dimensions must be the same to use Folded encoders.'", ")", "\n", "\n", "", "self", ".", "final_size", "=", "2", "*", "(", "dim_x", "//", "self", ".", "crop_size", ")", "-", "1", "\n", "\n", "self", ".", "unfold", "=", "Unfold", "(", "dim_x", ",", "self", ".", "crop_size", ")", "\n", "self", ".", "refold", "=", "Fold", "(", "dim_x", ",", "self", ".", "crop_size", ")", "\n", "\n", "shape", "=", "(", "self", ".", "crop_size", ",", "self", ".", "crop_size", ",", "dim_in", ")", "\n", "\n", "self", ".", "conv_layers", ",", "self", ".", "conv_shape", "=", "self", ".", "create_conv_layers", "(", "shape", ",", "conv_args", ")", "\n", "\n", "dim_x", ",", "dim_y", ",", "dim_out", "=", "self", ".", "conv_shape", "\n", "dim_r", "=", "dim_x", "*", "dim_y", "*", "dim_out", "\n", "self", ".", "reshape", "=", "View", "(", "-", "1", ",", "dim_r", ")", "\n", "self", ".", "fc_layers", ",", "_", "=", "self", ".", "create_linear_layers", "(", "dim_r", ",", "fc_args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fanyun-sun_InfoGraph.nn_modules.convnet.FoldedConvnet.create_conv_layers": [[260, 317], ["torch.Sequential", "torch.Sequential", "enumerate", "torch.Sequential", "torch.Sequential", "torch.Sequential.add_module", "torch.Conv2d", "torch.Conv2d", "torch.Sequential.add_module", "convnet.FoldedConvnet.next_size", "torch.Sequential.add_module", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Sequential.add_module", "get_nonlinearity", "torch.Sequential.add_module", "getattr", "torch.Sequential.add_module", "convnet.FoldedConvnet.next_size", "ValueError", "torch.Dropout2d", "torch.Dropout2d", "getattr."], "methods", ["home.repos.pwc.inspect_result.fanyun-sun_InfoGraph.nn_modules.convnet.Convnet.next_size", "home.repos.pwc.inspect_result.fanyun-sun_InfoGraph.nn_modules.convnet.Convnet.next_size"], ["", "def", "create_conv_layers", "(", "self", ",", "shape", ",", "conv_args", ")", ":", "\n", "        ", "'''Creates a set of convolutional layers.\n\n        Args:\n            shape: Input shape.\n            conv_args: List of tuple of convolutional arguments.\n\n        Returns:\n            nn.Sequential: A sequence of convolutional layers.\n\n        '''", "\n", "\n", "conv_layers", "=", "nn", ".", "Sequential", "(", ")", "\n", "conv_args", "=", "conv_args", "or", "[", "]", "\n", "dim_x", ",", "dim_y", ",", "dim_in", "=", "shape", "\n", "\n", "for", "i", ",", "(", "dim_out", ",", "f", ",", "s", ",", "p", ",", "batch_norm", ",", "dropout", ",", "nonlinearity", ",", "pool", ")", "in", "enumerate", "(", "conv_args", ")", ":", "\n", "            ", "name", "=", "'({}/{})_{}'", ".", "format", "(", "dim_in", ",", "dim_out", ",", "i", "+", "1", ")", "\n", "conv_block", "=", "nn", ".", "Sequential", "(", ")", "\n", "\n", "if", "dim_out", "is", "not", "None", ":", "\n", "                ", "conv", "=", "nn", ".", "Conv2d", "(", "dim_in", ",", "dim_out", ",", "kernel_size", "=", "f", ",", "stride", "=", "s", ",", "padding", "=", "p", ",", "bias", "=", "not", "(", "batch_norm", ")", ")", "\n", "conv_block", ".", "add_module", "(", "name", "+", "'conv'", ",", "conv", ")", "\n", "dim_x", ",", "dim_y", "=", "self", ".", "next_size", "(", "dim_x", ",", "dim_y", ",", "f", ",", "s", ",", "p", ")", "\n", "", "else", ":", "\n", "                ", "dim_out", "=", "dim_in", "\n", "\n", "", "if", "dropout", ":", "\n", "                ", "conv_block", ".", "add_module", "(", "name", "+", "'do'", ",", "nn", ".", "Dropout2d", "(", "p", "=", "dropout", ")", ")", "\n", "", "if", "batch_norm", ":", "\n", "                ", "bn", "=", "nn", ".", "BatchNorm2d", "(", "dim_out", ")", "\n", "conv_block", ".", "add_module", "(", "name", "+", "'bn'", ",", "bn", ")", "\n", "\n", "", "if", "nonlinearity", ":", "\n", "                ", "nonlinearity", "=", "get_nonlinearity", "(", "nonlinearity", ")", "\n", "conv_block", ".", "add_module", "(", "nonlinearity", ".", "__class__", ".", "__name__", ",", "nonlinearity", ")", "\n", "\n", "", "if", "pool", ":", "\n", "                ", "(", "pool_type", ",", "kernel", ",", "stride", ")", "=", "pool", "\n", "Pool", "=", "getattr", "(", "nn", ",", "pool_type", ")", "\n", "conv_block", ".", "add_module", "(", "'pool'", ",", "Pool", "(", "kernel_size", "=", "kernel", ",", "stride", "=", "stride", ")", ")", "\n", "dim_x", ",", "dim_y", "=", "self", ".", "next_size", "(", "dim_x", ",", "dim_y", ",", "kernel", ",", "stride", ",", "0", ")", "\n", "\n", "", "conv_layers", ".", "add_module", "(", "name", ",", "conv_block", ")", "\n", "\n", "dim_in", "=", "dim_out", "\n", "\n", "if", "dim_x", "!=", "dim_y", ":", "\n", "                ", "raise", "ValueError", "(", "'dim_x and dim_y do not match.'", ")", "\n", "\n", "", "if", "dim_x", "==", "1", ":", "\n", "                ", "dim_x", "=", "self", ".", "final_size", "\n", "dim_y", "=", "self", ".", "final_size", "\n", "\n", "", "", "dim_out", "=", "dim_in", "\n", "\n", "return", "conv_layers", ",", "(", "dim_x", ",", "dim_y", ",", "dim_out", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fanyun-sun_InfoGraph.nn_modules.convnet.FoldedConvnet.forward": [[318, 353], ["convnet.FoldedConvnet.unfold", "convnet.FoldedConvnet.reshape", "conv_layer", "conv_out.append", "convnet.FoldedConvnet.fc_layers", "fc_layer.size", "convnet.FoldedConvnet.refold", "fc_layer", "convnet.FoldedConvnet.append"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ":", "torch", ".", "Tensor", ",", "return_full_list", "=", "False", ")", ":", "\n", "        ", "'''Forward pass\n\n        Args:\n            x: Input.\n            return_full_list: Optional, returns all layer outputs.\n\n        Returns:\n            torch.Tensor or list of torch.Tensor.\n\n        '''", "\n", "\n", "x", "=", "self", ".", "unfold", "(", "x", ")", "\n", "\n", "conv_out", "=", "[", "]", "\n", "for", "conv_layer", "in", "self", ".", "conv_layers", ":", "\n", "            ", "x", "=", "conv_layer", "(", "x", ")", "\n", "if", "x", ".", "size", "(", "2", ")", "==", "1", ":", "\n", "                ", "x", "=", "self", ".", "refold", "(", "x", ")", "\n", "", "conv_out", ".", "append", "(", "x", ")", "\n", "\n", "", "x", "=", "self", ".", "reshape", "(", "x", ")", "\n", "\n", "if", "return_full_list", ":", "\n", "            ", "fc_out", "=", "[", "]", "\n", "for", "fc_layer", "in", "self", ".", "fc_layers", ":", "\n", "                ", "x", "=", "fc_layer", "(", "x", ")", "\n", "fc_out", ".", "append", "(", "x", ")", "\n", "", "", "else", ":", "\n", "            ", "fc_out", "=", "self", ".", "fc_layers", "(", "x", ")", "\n", "\n", "", "if", "not", "return_full_list", ":", "\n", "            ", "conv_out", "=", "conv_out", "[", "-", "1", "]", "\n", "\n", "", "return", "conv_out", ",", "fc_out", "\n", "", "", ""]], "home.repos.pwc.inspect_result.fanyun-sun_InfoGraph.nn_modules.convnet.infer_conv_size": [[13, 28], ["None"], "function", ["None"], ["def", "infer_conv_size", "(", "w", ",", "k", ",", "s", ",", "p", ")", ":", "\n", "    ", "'''Infers the next size after convolution.\n\n    Args:\n        w: Input size.\n        k: Kernel size.\n        s: Stride.\n        p: Padding.\n\n    Returns:\n        int: Output size.\n\n    '''", "\n", "x", "=", "(", "w", "-", "k", "+", "2", "*", "p", ")", "//", "s", "+", "1", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.fanyun-sun_InfoGraph.nn_modules.encoder.create_encoder": [[11, 81], ["super().__init__", "super().forward", "ValueError", "len", "len", "cortex_DIM.nn_modules.convnet.Convnet", "cortex_DIM.nn_modules.convnet.FoldedConvnet", "cortex_DIM.nn_modules.resnet.ResNet", "cortex_DIM.nn_modules.resnet.FoldedResNet"], "function", ["home.repos.pwc.inspect_result.fanyun-sun_InfoGraph.semi-supervised.model.Net.__init__", "home.repos.pwc.inspect_result.fanyun-sun_InfoGraph.semi-supervised.model.Net.forward"], ["def", "create_encoder", "(", "Module", ")", ":", "\n", "    ", "class", "Encoder", "(", "Module", ")", ":", "\n", "        ", "'''Encoder used for cortex_DIM.\n\n        '''", "\n", "\n", "def", "__init__", "(", "self", ",", "*", "args", ",", "local_idx", "=", "None", ",", "multi_idx", "=", "None", ",", "conv_idx", "=", "None", ",", "fc_idx", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "            ", "'''\n\n            Args:\n                args: Arguments for parent class.\n                local_idx: Index in list of convolutional layers for local features.\n                multi_idx: Index in list of convolutional layers for multiple globals.\n                conv_idx: Index in list of convolutional layers for intermediate features.\n                fc_idx: Index in list of fully-connected layers for intermediate features.\n                kwargs: Keyword arguments for the parent class.\n            '''", "\n", "\n", "super", "(", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n", "if", "local_idx", "is", "None", ":", "\n", "                ", "raise", "ValueError", "(", "'`local_idx` must be set'", ")", "\n", "\n", "", "conv_idx", "=", "conv_idx", "or", "local_idx", "\n", "\n", "self", ".", "local_idx", "=", "local_idx", "\n", "self", ".", "multi_idx", "=", "multi_idx", "\n", "self", ".", "conv_idx", "=", "conv_idx", "\n", "self", ".", "fc_idx", "=", "fc_idx", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ":", "torch", ".", "Tensor", ")", ":", "\n", "            ", "'''\n\n            Args:\n                x: Input tensor.\n\n            Returns:\n                local_out, multi_out, hidden_out, global_out\n\n            '''", "\n", "\n", "outs", "=", "super", "(", ")", ".", "forward", "(", "x", ",", "return_full_list", "=", "True", ")", "\n", "if", "len", "(", "outs", ")", "==", "2", ":", "\n", "                ", "conv_out", ",", "fc_out", "=", "outs", "\n", "", "else", ":", "\n", "                ", "conv_before_out", ",", "res_out", ",", "conv_after_out", ",", "fc_out", "=", "outs", "\n", "conv_out", "=", "conv_before_out", "+", "res_out", "+", "conv_after_out", "\n", "\n", "", "local_out", "=", "conv_out", "[", "self", ".", "local_idx", "]", "\n", "\n", "if", "self", ".", "multi_idx", "is", "not", "None", ":", "\n", "                ", "multi_out", "=", "conv_out", "[", "self", ".", "multi_idx", "]", "\n", "", "else", ":", "\n", "                ", "multi_out", "=", "None", "\n", "\n", "", "if", "len", "(", "fc_out", ")", ">", "0", ":", "\n", "                ", "if", "self", ".", "fc_idx", "is", "not", "None", ":", "\n", "                    ", "hidden_out", "=", "fc_out", "[", "self", ".", "fc_idx", "]", "\n", "", "else", ":", "\n", "                    ", "hidden_out", "=", "None", "\n", "", "global_out", "=", "fc_out", "[", "-", "1", "]", "\n", "", "else", ":", "\n", "                ", "hidden_out", "=", "None", "\n", "global_out", "=", "None", "\n", "\n", "", "conv_out", "=", "conv_out", "[", "self", ".", "conv_idx", "]", "\n", "\n", "return", "local_out", ",", "conv_out", ",", "multi_out", ",", "hidden_out", ",", "global_out", "\n", "\n", "", "", "return", "Encoder", "\n", "\n"]], "home.repos.pwc.inspect_result.fanyun-sun_InfoGraph.nn_modules.mi_networks.MIFCNet.__init__": [[16, 42], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Sequential", "torch.Sequential", "numpy.zeros", "range", "mi_networks.MIFCNet.linear_shortcut.weight.data.uniform_", "mi_networks.MIFCNet.linear_shortcut.weight.data.masked_fill_", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.fanyun-sun_InfoGraph.semi-supervised.model.Net.__init__"], ["def", "__init__", "(", "self", ",", "n_input", ",", "n_units", ")", ":", "\n", "        ", "\"\"\"\n\n        Args:\n            n_input: Number of input units.\n            n_units: Number of output units.\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "assert", "(", "n_units", ">=", "n_input", ")", "\n", "\n", "self", ".", "linear_shortcut", "=", "nn", ".", "Linear", "(", "n_input", ",", "n_units", ")", "\n", "self", ".", "block_nonlinear", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "n_input", ",", "n_units", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "n_units", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "n_units", ",", "n_units", ")", "\n", ")", "\n", "\n", "# initialize the initial projection to a sort of noisy copy", "\n", "eye_mask", "=", "np", ".", "zeros", "(", "(", "n_units", ",", "n_input", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "for", "i", "in", "range", "(", "n_input", ")", ":", "\n", "            ", "eye_mask", "[", "i", ",", "i", "]", "=", "1", "\n", "\n", "", "self", ".", "linear_shortcut", ".", "weight", ".", "data", ".", "uniform_", "(", "-", "0.01", ",", "0.01", ")", "\n", "self", ".", "linear_shortcut", ".", "weight", ".", "data", ".", "masked_fill_", "(", "torch", ".", "tensor", "(", "eye_mask", ")", ",", "1.", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fanyun-sun_InfoGraph.nn_modules.mi_networks.MIFCNet.forward": [[43, 55], ["mi_networks.MIFCNet.block_nonlinear", "mi_networks.MIFCNet.linear_shortcut"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"\n\n        Args:\n            x: Input tensor.\n\n        Returns:\n            torch.Tensor: network output.\n\n        \"\"\"", "\n", "h", "=", "self", ".", "block_nonlinear", "(", "x", ")", "+", "self", ".", "linear_shortcut", "(", "x", ")", "\n", "return", "h", "\n", "\n"]], "home.repos.pwc.inspect_result.fanyun-sun_InfoGraph.nn_modules.mi_networks.MI1x1ConvNet.__init__": [[61, 94], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "torch.Conv1d", "torch.Conv1d", "cortex_DIM.nn_modules.misc.Permute", "torch.LayerNorm", "torch.LayerNorm", "cortex_DIM.nn_modules.misc.Permute", "numpy.zeros", "range", "mi_networks.MI1x1ConvNet.linear_shortcut.weight.data.uniform_", "mi_networks.MI1x1ConvNet.linear_shortcut.weight.data.masked_fill_", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.fanyun-sun_InfoGraph.semi-supervised.model.Net.__init__"], ["def", "__init__", "(", "self", ",", "n_input", ",", "n_units", ")", ":", "\n", "        ", "\"\"\"\n\n        Args:\n            n_input: Number of input units.\n            n_units: Number of output units.\n        \"\"\"", "\n", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "block_nonlinear", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv1d", "(", "n_input", ",", "n_units", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "n_units", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv1d", "(", "n_units", ",", "n_units", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "True", ")", ",", "\n", ")", "\n", "\n", "self", ".", "block_ln", "=", "nn", ".", "Sequential", "(", "\n", "Permute", "(", "0", ",", "2", ",", "1", ")", ",", "\n", "nn", ".", "LayerNorm", "(", "n_units", ")", ",", "\n", "Permute", "(", "0", ",", "2", ",", "1", ")", "\n", ")", "\n", "\n", "self", ".", "linear_shortcut", "=", "nn", ".", "Conv1d", "(", "n_input", ",", "n_units", ",", "kernel_size", "=", "1", ",", "\n", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "\n", "# initialize shortcut to be like identity (if possible)", "\n", "if", "n_units", ">=", "n_input", ":", "\n", "            ", "eye_mask", "=", "np", ".", "zeros", "(", "(", "n_units", ",", "n_input", ",", "1", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "for", "i", "in", "range", "(", "n_input", ")", ":", "\n", "                ", "eye_mask", "[", "i", ",", "i", ",", "0", "]", "=", "1", "\n", "", "self", ".", "linear_shortcut", ".", "weight", ".", "data", ".", "uniform_", "(", "-", "0.01", ",", "0.01", ")", "\n", "self", ".", "linear_shortcut", ".", "weight", ".", "data", ".", "masked_fill_", "(", "torch", ".", "tensor", "(", "eye_mask", ")", ",", "1.", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fanyun-sun_InfoGraph.nn_modules.mi_networks.MI1x1ConvNet.forward": [[95, 107], ["mi_networks.MI1x1ConvNet.block_ln", "mi_networks.MI1x1ConvNet.block_nonlinear", "mi_networks.MI1x1ConvNet.linear_shortcut"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"\n\n            Args:\n                x: Input tensor.\n\n            Returns:\n                torch.Tensor: network output.\n\n        \"\"\"", "\n", "h", "=", "self", ".", "block_ln", "(", "self", ".", "block_nonlinear", "(", "x", ")", "+", "self", ".", "linear_shortcut", "(", "x", ")", ")", "\n", "return", "h", "\n", "", "", ""]], "home.repos.pwc.inspect_result.fanyun-sun_InfoGraph.nn_modules.resnet.ResBlock.create_layers": [[20, 49], ["list", "conv_args.append", "super().create_layers", "resnet.ResBlock.next_size", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.fanyun-sun_InfoGraph.nn_modules.resnet.FoldedResNet.create_layers", "home.repos.pwc.inspect_result.fanyun-sun_InfoGraph.nn_modules.convnet.Convnet.next_size"], ["def", "create_layers", "(", "self", ",", "shape", ",", "conv_args", "=", "None", ")", ":", "\n", "        ", "'''Creates layers\n\n        Args:\n            shape: Shape of input.\n            conv_args: Layer arguments for block.\n        '''", "\n", "\n", "# Move nonlinearity to a separate step for residual.", "\n", "final_nonlin", "=", "conv_args", "[", "-", "1", "]", "[", "_nonlin_idx", "]", "\n", "conv_args", "[", "-", "1", "]", "=", "list", "(", "conv_args", "[", "-", "1", "]", ")", "\n", "conv_args", "[", "-", "1", "]", "[", "_nonlin_idx", "]", "=", "None", "\n", "conv_args", ".", "append", "(", "(", "None", ",", "0", ",", "0", ",", "0", ",", "False", ",", "False", ",", "final_nonlin", ",", "None", ")", ")", "\n", "\n", "super", "(", ")", ".", "create_layers", "(", "shape", ",", "conv_args", "=", "conv_args", ")", "\n", "\n", "if", "self", ".", "conv_shape", "!=", "shape", ":", "\n", "            ", "dim_x", ",", "dim_y", ",", "dim_in", "=", "shape", "\n", "dim_x_", ",", "dim_y_", ",", "dim_out", "=", "self", ".", "conv_shape", "\n", "stride", "=", "dim_x", "//", "dim_x_", "\n", "next_x", ",", "_", "=", "self", ".", "next_size", "(", "dim_x", ",", "dim_y", ",", "1", ",", "stride", ",", "0", ")", "\n", "assert", "next_x", "==", "dim_x_", ",", "(", "self", ".", "conv_shape", ",", "shape", ")", "\n", "\n", "self", ".", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "dim_in", ",", "dim_out", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "dim_out", ")", ",", "\n", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "downsample", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.fanyun-sun_InfoGraph.nn_modules.resnet.ResBlock.forward": [[50, 69], ["resnet.ResBlock.downsample"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ":", "torch", ".", "Tensor", ")", ":", "\n", "        ", "'''Forward pass\n\n        Args:\n            x: Input.\n\n        Returns:\n            torch.Tensor or list of torch.Tensor.\n\n        '''", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "", "else", ":", "\n", "            ", "residual", "=", "x", "\n", "\n", "", "x", "=", "self", ".", "conv_layers", "[", "-", "1", "]", "(", "self", ".", "conv_layers", "[", ":", "-", "1", "]", "(", "x", ")", "+", "residual", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.fanyun-sun_InfoGraph.nn_modules.resnet.ResNet.create_layers": [[72, 94], ["resnet.ResNet.create_conv_layers", "resnet.ResNet.create_res_layers", "resnet.ResNet.create_conv_layers", "cortex_DIM.nn_modules.misc.View", "resnet.ResNet.create_linear_layers"], "methods", ["home.repos.pwc.inspect_result.fanyun-sun_InfoGraph.nn_modules.convnet.FoldedConvnet.create_conv_layers", "home.repos.pwc.inspect_result.fanyun-sun_InfoGraph.nn_modules.resnet.FoldedResNet.create_res_layers", "home.repos.pwc.inspect_result.fanyun-sun_InfoGraph.nn_modules.convnet.FoldedConvnet.create_conv_layers", "home.repos.pwc.inspect_result.fanyun-sun_InfoGraph.nn_modules.convnet.Convnet.create_linear_layers"], ["    ", "def", "create_layers", "(", "self", ",", "shape", ",", "conv_before_args", "=", "None", ",", "res_args", "=", "None", ",", "conv_after_args", "=", "None", ",", "fc_args", "=", "None", ")", ":", "\n", "        ", "'''Creates layers\n\n        Args:\n            shape: Shape of the input.\n            conv_before_args: Arguments for convolutional layers before residuals.\n            res_args: Residual args.\n            conv_after_args: Arguments for convolutional layers after residuals.\n            fc_args: Fully-connected arguments.\n\n        '''", "\n", "\n", "dim_x", ",", "dim_y", ",", "dim_in", "=", "shape", "\n", "shape", "=", "(", "dim_x", ",", "dim_y", ",", "dim_in", ")", "\n", "self", ".", "conv_before_layers", ",", "self", ".", "conv_before_shape", "=", "self", ".", "create_conv_layers", "(", "shape", ",", "conv_before_args", ")", "\n", "self", ".", "res_layers", ",", "self", ".", "res_shape", "=", "self", ".", "create_res_layers", "(", "self", ".", "conv_before_shape", ",", "res_args", ")", "\n", "self", ".", "conv_after_layers", ",", "self", ".", "conv_after_shape", "=", "self", ".", "create_conv_layers", "(", "self", ".", "res_shape", ",", "conv_after_args", ")", "\n", "\n", "dim_x", ",", "dim_y", ",", "dim_out", "=", "self", ".", "conv_after_shape", "\n", "dim_r", "=", "dim_x", "*", "dim_y", "*", "dim_out", "\n", "self", ".", "reshape", "=", "View", "(", "-", "1", ",", "dim_r", ")", "\n", "self", ".", "fc_layers", ",", "_", "=", "self", ".", "create_linear_layers", "(", "dim_r", ",", "fc_args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fanyun-sun_InfoGraph.nn_modules.resnet.ResNet.create_res_layers": [[95, 121], ["torch.Sequential", "torch.Sequential", "enumerate", "resnet.ResBlock", "torch.Sequential.add_module", "range", "resnet.ResBlock", "torch.Sequential.add_module"], "methods", ["None"], ["", "def", "create_res_layers", "(", "self", ",", "shape", ",", "block_args", "=", "None", ")", ":", "\n", "        ", "'''Creates a set of residual blocks.\n\n        Args:\n            shape: input shape.\n            block_args: Arguments for blocks.\n\n        Returns:\n            nn.Sequential: sequence of residual blocks.\n\n        '''", "\n", "\n", "res_layers", "=", "nn", ".", "Sequential", "(", ")", "\n", "block_args", "=", "block_args", "or", "[", "]", "\n", "\n", "for", "i", ",", "(", "conv_args", ",", "n_blocks", ")", "in", "enumerate", "(", "block_args", ")", ":", "\n", "            ", "block", "=", "ResBlock", "(", "shape", ",", "conv_args", "=", "conv_args", ")", "\n", "res_layers", ".", "add_module", "(", "'block_{}_0'", ".", "format", "(", "i", ")", ",", "block", ")", "\n", "\n", "for", "j", "in", "range", "(", "1", ",", "n_blocks", ")", ":", "\n", "                ", "shape", "=", "block", ".", "conv_shape", "\n", "block", "=", "ResBlock", "(", "shape", ",", "conv_args", "=", "conv_args", ")", "\n", "res_layers", ".", "add_module", "(", "'block_{}_{}'", ".", "format", "(", "i", ",", "j", ")", ",", "block", ")", "\n", "", "shape", "=", "block", ".", "conv_shape", "\n", "\n", "", "return", "res_layers", ",", "shape", "\n", "\n"]], "home.repos.pwc.inspect_result.fanyun-sun_InfoGraph.nn_modules.resnet.ResNet.forward": [[122, 172], ["resnet.ResNet.reshape", "resnet.ResNet.conv_layers", "resnet.ResNet.res_layers", "resnet.ResNet.conv_after_layers", "resnet.ResNet.fc_layers", "conv_layer", "resnet.ResNet.append", "res_layer", "resnet.ResNet.append", "conv_layer", "resnet.ResNet.append", "fc_layer", "resnet.ResNet.append"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ":", "torch", ".", "Tensor", ",", "return_full_list", "=", "False", ")", ":", "\n", "        ", "'''Forward pass\n\n        Args:\n            x: Input.\n            return_full_list: Optional, returns all layer outputs.\n\n        Returns:\n            torch.Tensor or list of torch.Tensor.\n\n        '''", "\n", "\n", "if", "return_full_list", ":", "\n", "            ", "conv_before_out", "=", "[", "]", "\n", "for", "conv_layer", "in", "self", ".", "conv_before_layers", ":", "\n", "                ", "x", "=", "conv_layer", "(", "x", ")", "\n", "conv_before_out", ".", "append", "(", "x", ")", "\n", "", "", "else", ":", "\n", "            ", "conv_before_out", "=", "self", ".", "conv_layers", "(", "x", ")", "\n", "x", "=", "conv_before_out", "\n", "\n", "", "if", "return_full_list", ":", "\n", "            ", "res_out", "=", "[", "]", "\n", "for", "res_layer", "in", "self", ".", "res_layers", ":", "\n", "                ", "x", "=", "res_layer", "(", "x", ")", "\n", "res_out", ".", "append", "(", "x", ")", "\n", "", "", "else", ":", "\n", "            ", "res_out", "=", "self", ".", "res_layers", "(", "x", ")", "\n", "x", "=", "res_out", "\n", "\n", "", "if", "return_full_list", ":", "\n", "            ", "conv_after_out", "=", "[", "]", "\n", "for", "conv_layer", "in", "self", ".", "conv_after_layers", ":", "\n", "                ", "x", "=", "conv_layer", "(", "x", ")", "\n", "conv_after_out", ".", "append", "(", "x", ")", "\n", "", "", "else", ":", "\n", "            ", "conv_after_out", "=", "self", ".", "conv_after_layers", "(", "x", ")", "\n", "x", "=", "conv_after_out", "\n", "\n", "", "x", "=", "self", ".", "reshape", "(", "x", ")", "\n", "\n", "if", "return_full_list", ":", "\n", "            ", "fc_out", "=", "[", "]", "\n", "for", "fc_layer", "in", "self", ".", "fc_layers", ":", "\n", "                ", "x", "=", "fc_layer", "(", "x", ")", "\n", "fc_out", ".", "append", "(", "x", ")", "\n", "", "", "else", ":", "\n", "            ", "fc_out", "=", "self", ".", "fc_layers", "(", "x", ")", "\n", "\n", "", "return", "conv_before_out", ",", "res_out", ",", "conv_after_out", ",", "fc_out", "\n", "\n"]], "home.repos.pwc.inspect_result.fanyun-sun_InfoGraph.nn_modules.resnet.FoldedResNet.create_layers": [[179, 211], ["cortex_DIM.nn_modules.misc.Unfold", "cortex_DIM.nn_modules.misc.Fold", "resnet.FoldedResNet.create_conv_layers", "resnet.FoldedResNet.create_res_layers", "resnet.FoldedResNet.create_conv_layers", "cortex_DIM.nn_modules.misc.View", "resnet.FoldedResNet.create_linear_layers"], "methods", ["home.repos.pwc.inspect_result.fanyun-sun_InfoGraph.nn_modules.convnet.FoldedConvnet.create_conv_layers", "home.repos.pwc.inspect_result.fanyun-sun_InfoGraph.nn_modules.resnet.FoldedResNet.create_res_layers", "home.repos.pwc.inspect_result.fanyun-sun_InfoGraph.nn_modules.convnet.FoldedConvnet.create_conv_layers", "home.repos.pwc.inspect_result.fanyun-sun_InfoGraph.nn_modules.convnet.Convnet.create_linear_layers"], ["def", "create_layers", "(", "self", ",", "shape", ",", "crop_size", "=", "8", ",", "conv_before_args", "=", "None", ",", "res_args", "=", "None", ",", "\n", "conv_after_args", "=", "None", ",", "fc_args", "=", "None", ")", ":", "\n", "        ", "'''Creates layers\n\n        Args:\n            shape: Shape of the input.\n            crop_size: Size of the crops.\n            conv_before_args: Arguments for convolutional layers before residuals.\n            res_args: Residual args.\n            conv_after_args: Arguments for convolutional layers after residuals.\n            fc_args: Fully-connected arguments.\n\n        '''", "\n", "self", ".", "crop_size", "=", "crop_size", "\n", "\n", "dim_x", ",", "dim_y", ",", "dim_in", "=", "shape", "\n", "self", ".", "final_size", "=", "2", "*", "(", "dim_x", "//", "self", ".", "crop_size", ")", "-", "1", "\n", "\n", "self", ".", "unfold", "=", "Unfold", "(", "dim_x", ",", "self", ".", "crop_size", ")", "\n", "self", ".", "refold", "=", "Fold", "(", "dim_x", ",", "self", ".", "crop_size", ")", "\n", "\n", "shape", "=", "(", "self", ".", "crop_size", ",", "self", ".", "crop_size", ",", "dim_in", ")", "\n", "self", ".", "conv_before_layers", ",", "self", ".", "conv_before_shape", "=", "self", ".", "create_conv_layers", "(", "shape", ",", "conv_before_args", ")", "\n", "\n", "self", ".", "res_layers", ",", "self", ".", "res_shape", "=", "self", ".", "create_res_layers", "(", "self", ".", "conv_before_shape", ",", "res_args", ")", "\n", "self", ".", "conv_after_layers", ",", "self", ".", "conv_after_shape", "=", "self", ".", "create_conv_layers", "(", "self", ".", "res_shape", ",", "conv_after_args", ")", "\n", "self", ".", "conv_after_shape", "=", "self", ".", "res_shape", "\n", "\n", "dim_x", ",", "dim_y", ",", "dim_out", "=", "self", ".", "conv_after_shape", "\n", "dim_r", "=", "dim_x", "*", "dim_y", "*", "dim_out", "\n", "self", ".", "reshape", "=", "View", "(", "-", "1", ",", "dim_r", ")", "\n", "self", ".", "fc_layers", ",", "_", "=", "self", ".", "create_linear_layers", "(", "dim_r", ",", "fc_args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fanyun-sun_InfoGraph.nn_modules.resnet.FoldedResNet.create_res_layers": [[212, 245], ["torch.Sequential", "torch.Sequential", "enumerate", "resnet.ResBlock", "torch.Sequential.add_module", "range", "resnet.ResBlock", "torch.Sequential.add_module", "ValueError"], "methods", ["None"], ["", "def", "create_res_layers", "(", "self", ",", "shape", ",", "block_args", "=", "None", ")", ":", "\n", "        ", "'''Creates a set of residual blocks.\n\n        Args:\n            shape: input shape.\n            block_args: Arguments for blocks.\n\n        Returns:\n            nn.Sequential: sequence of residual blocks.\n\n        '''", "\n", "\n", "res_layers", "=", "nn", ".", "Sequential", "(", ")", "\n", "block_args", "=", "block_args", "or", "[", "]", "\n", "\n", "for", "i", ",", "(", "conv_args", ",", "n_blocks", ")", "in", "enumerate", "(", "block_args", ")", ":", "\n", "            ", "block", "=", "ResBlock", "(", "shape", ",", "conv_args", "=", "conv_args", ")", "\n", "res_layers", ".", "add_module", "(", "'block_{}_0'", ".", "format", "(", "i", ")", ",", "block", ")", "\n", "\n", "for", "j", "in", "range", "(", "1", ",", "n_blocks", ")", ":", "\n", "                ", "shape", "=", "block", ".", "conv_shape", "\n", "block", "=", "ResBlock", "(", "shape", ",", "conv_args", "=", "conv_args", ")", "\n", "res_layers", ".", "add_module", "(", "'block_{}_{}'", ".", "format", "(", "i", ",", "j", ")", ",", "block", ")", "\n", "", "shape", "=", "block", ".", "conv_shape", "\n", "dim_x", ",", "dim_y", "=", "shape", "[", ":", "2", "]", "\n", "\n", "if", "dim_x", "!=", "dim_y", ":", "\n", "                ", "raise", "ValueError", "(", "'dim_x and dim_y do not match.'", ")", "\n", "\n", "", "if", "dim_x", "==", "1", ":", "\n", "                ", "shape", "=", "(", "self", ".", "final_size", ",", "self", ".", "final_size", ",", "shape", "[", "2", "]", ")", "\n", "\n", "", "", "return", "res_layers", ",", "shape", "\n", "\n"]], "home.repos.pwc.inspect_result.fanyun-sun_InfoGraph.nn_modules.resnet.FoldedResNet.forward": [[246, 298], ["resnet.FoldedResNet.unfold", "resnet.FoldedResNet.reshape", "conv_layer", "conv_before_out.append", "res_layer", "res_out.append", "fc_layer.size", "resnet.FoldedResNet.refold", "conv_layer", "conv_after_out.append", "resnet.FoldedResNet.fc_layers", "fc_layer.size", "resnet.FoldedResNet.refold", "fc_layer.size", "resnet.FoldedResNet.refold", "fc_layer", "resnet.FoldedResNet.append"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ":", "torch", ".", "Tensor", ",", "return_full_list", "=", "False", ")", ":", "\n", "        ", "'''Forward pass\n\n        Args:\n            x: Input.\n            return_full_list: Optional, returns all layer outputs.\n\n        Returns:\n            torch.Tensor or list of torch.Tensor.\n\n        '''", "\n", "x", "=", "self", ".", "unfold", "(", "x", ")", "\n", "\n", "conv_before_out", "=", "[", "]", "\n", "for", "conv_layer", "in", "self", ".", "conv_before_layers", ":", "\n", "            ", "x", "=", "conv_layer", "(", "x", ")", "\n", "if", "x", ".", "size", "(", "2", ")", "==", "1", ":", "\n", "                ", "x", "=", "self", ".", "refold", "(", "x", ")", "\n", "", "conv_before_out", ".", "append", "(", "x", ")", "\n", "\n", "", "res_out", "=", "[", "]", "\n", "for", "res_layer", "in", "self", ".", "res_layers", ":", "\n", "            ", "x", "=", "res_layer", "(", "x", ")", "\n", "res_out", ".", "append", "(", "x", ")", "\n", "\n", "", "if", "x", ".", "size", "(", "2", ")", "==", "1", ":", "\n", "            ", "x", "=", "self", ".", "refold", "(", "x", ")", "\n", "res_out", "[", "-", "1", "]", "=", "x", "\n", "\n", "", "conv_after_out", "=", "[", "]", "\n", "for", "conv_layer", "in", "self", ".", "conv_after_layers", ":", "\n", "            ", "x", "=", "conv_layer", "(", "x", ")", "\n", "if", "x", ".", "size", "(", "2", ")", "==", "1", ":", "\n", "                ", "x", "=", "self", ".", "refold", "(", "x", ")", "\n", "", "conv_after_out", ".", "append", "(", "x", ")", "\n", "\n", "", "x", "=", "self", ".", "reshape", "(", "x", ")", "\n", "\n", "if", "return_full_list", ":", "\n", "            ", "fc_out", "=", "[", "]", "\n", "for", "fc_layer", "in", "self", ".", "fc_layers", ":", "\n", "                ", "x", "=", "fc_layer", "(", "x", ")", "\n", "fc_out", ".", "append", "(", "x", ")", "\n", "", "", "else", ":", "\n", "            ", "fc_out", "=", "self", ".", "fc_layers", "(", "x", ")", "\n", "\n", "", "if", "not", "return_full_list", ":", "\n", "            ", "conv_before_out", "=", "conv_before_out", "[", "-", "1", "]", "\n", "res_out", "=", "res_out", "[", "-", "1", "]", "\n", "conv_after_out", "=", "conv_after_out", "[", "-", "1", "]", "\n", "\n", "", "return", "conv_before_out", ",", "res_out", ",", "conv_after_out", ",", "fc_out", "\n", "", "", ""]], "home.repos.pwc.inspect_result.fanyun-sun_InfoGraph.nn_modules.misc.View.__init__": [[12, 20], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.fanyun-sun_InfoGraph.semi-supervised.model.Net.__init__"], ["\n", "x_max", "=", "torch", ".", "max", "(", "x", ",", "axis", ")", "[", "0", "]", "\n", "y", "=", "torch", ".", "log", "(", "(", "torch", ".", "exp", "(", "x", "-", "x_max", ")", ")", ".", "sum", "(", "axis", ")", ")", "+", "x_max", "\n"]], "home.repos.pwc.inspect_result.fanyun-sun_InfoGraph.nn_modules.misc.View.forward": [[21, 32], ["input.view"], "methods", ["None"], ["return", "y", "\n", "\n", "\n", "", "def", "random_permute", "(", "X", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.fanyun-sun_InfoGraph.nn_modules.misc.Unfold.__init__": [[40, 55], ["super().__init__", "torch.nn.Unfold"], "methods", ["home.repos.pwc.inspect_result.fanyun-sun_InfoGraph.semi-supervised.model.Net.__init__"], ["", ""]], "home.repos.pwc.inspect_result.fanyun-sun_InfoGraph.nn_modules.misc.Unfold.forward": [[56, 71], ["misc.Unfold.size", "misc.Unfold.unfold().reshape().permute().reshape", "misc.Unfold.unfold().reshape().permute", "misc.Unfold.unfold().reshape", "misc.Unfold.unfold"], "methods", ["None"], []], "home.repos.pwc.inspect_result.fanyun-sun_InfoGraph.nn_modules.misc.Fold.__init__": [[79, 88], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.fanyun-sun_InfoGraph.semi-supervised.model.Net.__init__"], []], "home.repos.pwc.inspect_result.fanyun-sun_InfoGraph.nn_modules.misc.Fold.forward": [[89, 105], ["x.reshape().permute().reshape().contiguous.reshape().permute().reshape().contiguous.reshape", "x.reshape().permute().reshape().contiguous.reshape().permute().reshape().contiguous.reshape().permute().reshape().contiguous", "x.reshape().permute().reshape().contiguous.reshape().permute().reshape().contiguous.size", "x.reshape().permute().reshape().contiguous.reshape().permute().reshape().contiguous.reshape().permute().reshape", "x.reshape().permute().reshape().contiguous.reshape().permute().reshape().contiguous.reshape().permute", "x.reshape().permute().reshape().contiguous.reshape().permute().reshape().contiguous.reshape"], "methods", ["None"], []], "home.repos.pwc.inspect_result.fanyun-sun_InfoGraph.nn_modules.misc.Permute.__init__": [[111, 119], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.fanyun-sun_InfoGraph.semi-supervised.model.Net.__init__"], []], "home.repos.pwc.inspect_result.fanyun-sun_InfoGraph.nn_modules.misc.Permute.forward": [[120, 131], ["input.permute"], "methods", ["None"], []], "home.repos.pwc.inspect_result.fanyun-sun_InfoGraph.semi-supervised.main.MyTransform.__call__": [[17, 21], ["None"], "methods", ["None"], ["import", "json", "\n", "import", "json", "\n", "import", "numpy", "as", "np", "\n", "import", "os", ".", "path", "as", "osp", "\n", "import", "sys", "\n"]], "home.repos.pwc.inspect_result.fanyun-sun_InfoGraph.semi-supervised.main.Complete.__call__": [[23, 46], ["torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "row.view().repeat().view.view().repeat().view.view().repeat().view", "col.repeat.repeat.repeat", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "main.Complete.", "list", "data.edge_attr.new_zeros", "row.view().repeat().view.view().repeat().view.view().repeat", "data.edge_attr.size", "row.view().repeat().view.view().repeat().view.view"], "methods", ["None"], ["import", "torch", ".", "nn", "as", "nn", "\n", "import", "torch", ".", "nn", ".", "functional", "as", "F", "\n", "\n", "class", "InfoGraph", "(", "nn", ".", "Module", ")", ":", "\n", "  ", "def", "__init__", "(", "self", ",", "hidden_dim", ",", "num_gc_layers", ",", "alpha", "=", "0.5", ",", "beta", "=", "1.", ",", "gamma", "=", ".1", ")", ":", "\n", "    ", "super", "(", "InfoGraph", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "alpha", "=", "alpha", "\n", "self", ".", "beta", "=", "beta", "\n", "self", ".", "gamma", "=", "gamma", "\n", "self", ".", "prior", "=", "args", ".", "prior", "\n", "\n", "self", ".", "embedding_dim", "=", "mi_units", "=", "hidden_dim", "*", "num_gc_layers", "\n", "self", ".", "encoder", "=", "Encoder", "(", "dataset_num_features", ",", "hidden_dim", ",", "num_gc_layers", ")", "\n", "\n", "self", ".", "local_d", "=", "FF", "(", "self", ".", "embedding_dim", ")", "\n", "self", ".", "global_d", "=", "FF", "(", "self", ".", "embedding_dim", ")", "\n", "# self.local_d = MI1x1ConvNet(self.embedding_dim, mi_units)", "\n", "# self.global_d = MIFCNet(self.embedding_dim, mi_units)", "\n", "\n", "if", "self", ".", "prior", ":", "\n", "        ", "self", ".", "prior_d", "=", "PriorDiscriminator", "(", "self", ".", "embedding_dim", ")", "\n", "\n", "", "self", ".", "init_emb", "(", ")", "\n"]], "home.repos.pwc.inspect_result.fanyun-sun_InfoGraph.semi-supervised.main.train": [[47, 96], ["model.train", "zip", "data.to.to", "data2.to.to", "optimizer.zero_grad", "torch.mse_loss", "model.unsup_loss", "loss.backward", "F.mse_loss.item", "model.unsup_loss.item", "optimizer.step", "print", "print", "len", "data.to.to", "optimizer.zero_grad", "torch.mse_loss", "loss.backward", "optimizer.step", "len", "model", "model.unsup_sup_loss", "model.unsup_sup_loss.item", "loss.item", "model", "loss.item"], "function", ["home.repos.pwc.inspect_result.fanyun-sun_InfoGraph.semi-supervised.mean_teacher.train", "home.repos.pwc.inspect_result.fanyun-sun_InfoGraph.semi-supervised.model.Net.unsup_loss", "home.repos.pwc.inspect_result.fanyun-sun_InfoGraph.semi-supervised.model.Net.unsup_sup_loss"], ["\n", "", "def", "init_emb", "(", "self", ")", ":", "\n", "    ", "initrange", "=", "-", "1.5", "/", "self", ".", "embedding_dim", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "        ", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "            ", "torch", ".", "nn", ".", "init", ".", "xavier_uniform_", "(", "m", ".", "weight", ".", "data", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                ", "m", ".", "bias", ".", "data", ".", "fill_", "(", "0.0", ")", "\n", "\n", "", "", "", "", "def", "forward", "(", "self", ",", "x", ",", "edge_index", ",", "batch", ",", "num_graphs", ")", ":", "\n", "# batch_size = data.num_graphs", "\n", "    ", "if", "x", "is", "None", ":", "\n", "        ", "x", "=", "torch", ".", "ones", "(", "batch", ".", "shape", "[", "0", "]", ")", ".", "to", "(", "device", ")", "\n", "\n", "", "y", ",", "M", "=", "self", ".", "encoder", "(", "x", ",", "edge_index", ",", "batch", ")", "\n", "\n", "g_enc", "=", "self", ".", "global_d", "(", "y", ")", "\n", "l_enc", "=", "self", ".", "local_d", "(", "M", ")", "\n", "\n", "mode", "=", "'fd'", "\n", "measure", "=", "'JSD'", "\n", "local_global_loss", "=", "local_global_loss_", "(", "l_enc", ",", "g_enc", ",", "edge_index", ",", "batch", ",", "measure", ")", "\n", "\n", "if", "self", ".", "prior", ":", "\n", "        ", "prior", "=", "torch", ".", "rand_like", "(", "y", ")", "\n", "term_a", "=", "torch", ".", "log", "(", "self", ".", "prior_d", "(", "prior", ")", ")", ".", "mean", "(", ")", "\n", "term_b", "=", "torch", ".", "log", "(", "1.0", "-", "self", ".", "prior_d", "(", "y", ")", ")", ".", "mean", "(", ")", "\n", "PRIOR", "=", "-", "(", "term_a", "+", "term_b", ")", "*", "self", ".", "gamma", "\n", "", "else", ":", "\n", "        ", "PRIOR", "=", "0", "\n", "\n", "", "return", "local_global_loss", "+", "PRIOR", "\n", "\n", "", "", "if", "__name__", "==", "'__main__'", ":", "\n", "    ", "args", "=", "arg_parse", "(", ")", "\n", "accuracies", "=", "{", "'logreg'", ":", "[", "]", ",", "'svc'", ":", "[", "]", ",", "'linearsvc'", ":", "[", "]", ",", "'randomforest'", ":", "[", "]", "}", "\n", "epochs", "=", "20", "\n", "log_interval", "=", "1", "\n", "batch_size", "=", "128", "\n", "lr", "=", "args", ".", "lr", "\n", "DS", "=", "args", ".", "DS", "\n", "path", "=", "osp", ".", "join", "(", "osp", ".", "dirname", "(", "osp", ".", "realpath", "(", "__file__", ")", ")", ",", "'..'", ",", "'data'", ",", "DS", ")", "\n", "# kf = StratifiedKFold(n_splits=10, shuffle=True, random_state=None)", "\n", "\n", "dataset", "=", "TUDataset", "(", "path", ",", "name", "=", "DS", ")", ".", "shuffle", "(", ")", "\n", "dataset_num_features", "=", "max", "(", "dataset", ".", "num_features", ",", "1", ")", "\n", "dataloader", "=", "DataLoader", "(", "dataset", ",", "batch_size", "=", "batch_size", ")", "\n", "\n", "print", "(", "'================'", ")", "\n", "print", "(", "'lr: {}'", ".", "format", "(", "lr", ")", ")", "\n"]], "home.repos.pwc.inspect_result.fanyun-sun_InfoGraph.semi-supervised.main.test": [[97, 105], ["model.eval", "data.to.to", "len", "model"], "function", ["None"], ["print", "(", "'num_features: {}'", ".", "format", "(", "dataset_num_features", ")", ")", "\n", "print", "(", "'hidden_dim: {}'", ".", "format", "(", "args", ".", "hidden_dim", ")", ")", "\n", "print", "(", "'num_gc_layers: {}'", ".", "format", "(", "args", ".", "num_gc_layers", ")", ")", "\n", "print", "(", "'================'", ")", "\n", "\n", "device", "=", "torch", ".", "device", "(", "'cuda'", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "'cpu'", ")", "\n", "model", "=", "InfoGraph", "(", "args", ".", "hidden_dim", ",", "args", ".", "num_gc_layers", ")", ".", "to", "(", "device", ")", "\n", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "lr", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fanyun-sun_InfoGraph.semi-supervised.main.seed_everything": [[106, 114], ["random.seed", "torch.manual_seed", "torch.manual_seed", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "numpy.random.seed", "str"], "function", ["None"], ["model", ".", "eval", "(", ")", "\n", "emb", ",", "y", "=", "model", ".", "encoder", ".", "get_embeddings", "(", "dataloader", ")", "\n", "print", "(", "'===== Before training ====='", ")", "\n", "res", "=", "evaluate_embedding", "(", "emb", ",", "y", ")", "\n", "accuracies", "[", "'logreg'", "]", ".", "append", "(", "res", "[", "0", "]", ")", "\n", "accuracies", "[", "'svc'", "]", ".", "append", "(", "res", "[", "1", "]", ")", "\n", "accuracies", "[", "'linearsvc'", "]", ".", "append", "(", "res", "[", "2", "]", ")", "\n", "accuracies", "[", "'randomforest'", "]", ".", "append", "(", "res", "[", "3", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fanyun-sun_InfoGraph.semi-supervised.arguments.arg_parse": [[3, 25], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["None"], ["def", "arg_parse", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'GcnInformax Arguments.'", ")", "\n", "parser", ".", "add_argument", "(", "'--DS'", ",", "dest", "=", "'DS'", ",", "help", "=", "'Dataset'", ")", "\n", "parser", ".", "add_argument", "(", "'--local'", ",", "dest", "=", "'local'", ",", "action", "=", "'store_const'", ",", "\n", "const", "=", "True", ",", "default", "=", "False", ")", "\n", "parser", ".", "add_argument", "(", "'--glob'", ",", "dest", "=", "'glob'", ",", "action", "=", "'store_const'", ",", "\n", "const", "=", "True", ",", "default", "=", "False", ")", "\n", "parser", ".", "add_argument", "(", "'--prior'", ",", "dest", "=", "'prior'", ",", "action", "=", "'store_const'", ",", "\n", "const", "=", "True", ",", "default", "=", "False", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--lr'", ",", "dest", "=", "'lr'", ",", "type", "=", "float", ",", "\n", "help", "=", "'Learning rate.'", ")", "\n", "parser", ".", "add_argument", "(", "'--num-gc-layers'", ",", "dest", "=", "'num_gc_layers'", ",", "type", "=", "int", ",", "default", "=", "5", ",", "\n", "help", "=", "'Number of graph convolution layers before each pooling'", ")", "\n", "parser", ".", "add_argument", "(", "'--hidden-dim'", ",", "dest", "=", "'hidden_dim'", ",", "type", "=", "int", ",", "default", "=", "32", ",", "\n", "help", "=", "''", ")", "\n", "\n", "return", "parser", ".", "parse_args", "(", ")", "\n", "\n", "", ""]], "home.repos.pwc.inspect_result.fanyun-sun_InfoGraph.semi-supervised.model.Encoder.__init__": [[21, 30], ["super().__init__", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch_geometric.nn.NNConv", "torch.nn.GRU", "torch.nn.GRU", "torch.nn.GRU", "torch.nn.GRU", "torch.nn.GRU", "torch_geometric.nn.Set2Set", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.fanyun-sun_InfoGraph.semi-supervised.model.Net.__init__"], ["        ", "adj", "=", "Variable", "(", "data", "[", "'adj'", "]", ".", "float", "(", ")", ",", "requires_grad", "=", "False", ")", ".", "cuda", "(", ")", "\n", "# h0 = Variable(data['feats'].float()).cuda()", "\n", "batch_num_nodes", "=", "data", "[", "'num_nodes'", "]", ".", "int", "(", ")", ".", "numpy", "(", ")", "\n", "M", ",", "_", "=", "self", ".", "encoder", "(", "M", ",", "adj", ",", "batch_num_nodes", ")", "\n", "# h = F.relu(self.c0(M))", "\n", "# h = self.c1(h)", "\n", "# h = h.view(y.shape[0], -1)", "\n", "h", "=", "torch", ".", "cat", "(", "(", "y", ",", "M", ")", ",", "dim", "=", "1", ")", "\n", "h", "=", "F", ".", "relu", "(", "self", ".", "l0", "(", "h", ")", ")", "\n", "h", "=", "F", ".", "relu", "(", "self", ".", "l1", "(", "h", ")", ")", "\n"]], "home.repos.pwc.inspect_result.fanyun-sun_InfoGraph.semi-supervised.model.Encoder.forward": [[33, 47], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "out.squeeze.squeeze.unsqueeze", "range", "model.Encoder.set2set", "model.Encoder.lin0", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "model.Encoder.gru", "out.squeeze.squeeze.squeeze", "feat_map.append", "model.Encoder.conv", "torch.relu.unsqueeze"], "methods", ["None"], ["", "", "class", "PriorDiscriminator", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "input_dim", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "l0", "=", "nn", ".", "Linear", "(", "input_dim", ",", "input_dim", ")", "\n", "self", ".", "l1", "=", "nn", ".", "Linear", "(", "input_dim", ",", "input_dim", ")", "\n", "self", ".", "l2", "=", "nn", ".", "Linear", "(", "input_dim", ",", "1", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "h", "=", "F", ".", "relu", "(", "self", ".", "l0", "(", "x", ")", ")", "\n", "h", "=", "F", ".", "relu", "(", "self", ".", "l1", "(", "h", ")", ")", "\n", "return", "torch", ".", "sigmoid", "(", "self", ".", "l2", "(", "h", ")", ")", "\n", "\n", "", "", "class", "FF", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "input_dim", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n"]], "home.repos.pwc.inspect_result.fanyun-sun_InfoGraph.semi-supervised.model.FF.__init__": [[63, 74], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.fanyun-sun_InfoGraph.semi-supervised.model.Net.__init__"], ["\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "block", "(", "x", ")", "+", "self", ".", "linear_shortcut", "(", "x", ")", "\n", "\n", "", "", ""]], "home.repos.pwc.inspect_result.fanyun-sun_InfoGraph.semi-supervised.model.FF.forward": [[75, 77], ["model.FF.block", "model.FF.linear_shortcut"], "methods", ["None"], []], "home.repos.pwc.inspect_result.fanyun-sun_InfoGraph.semi-supervised.model.Net.__init__": [[79, 102], ["super().__init__", "model.Encoder", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "model.Net.init_emb", "model.Encoder", "model.FF", "model.FF", "model.FF", "model.FF"], "methods", ["home.repos.pwc.inspect_result.fanyun-sun_InfoGraph.semi-supervised.model.Net.__init__", "home.repos.pwc.inspect_result.fanyun-sun_InfoGraph.semi-supervised.model.Net.init_emb"], []], "home.repos.pwc.inspect_result.fanyun-sun_InfoGraph.semi-supervised.model.Net.init_emb": [[103, 110], ["model.Net.modules", "isinstance", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "m.bias.data.fill_"], "methods", ["None"], []], "home.repos.pwc.inspect_result.fanyun-sun_InfoGraph.semi-supervised.model.Net.forward": [[112, 118], ["model.Net.encoder", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "model.Net.fc2", "model.Net.view", "model.Net.fc1"], "methods", ["None"], []], "home.repos.pwc.inspect_result.fanyun-sun_InfoGraph.semi-supervised.model.Net.unsup_loss": [[119, 131], ["model.Net.global_d", "model.Net.local_d", "model.Net.unsup_encoder", "model.Net.encoder", "infomax.local_global_loss_"], "methods", ["home.repos.pwc.inspect_result.fanyun-sun_InfoGraph.semi-supervised.infomax.local_global_loss_"], []], "home.repos.pwc.inspect_result.fanyun-sun_InfoGraph.semi-supervised.model.Net.unsup_sup_loss": [[133, 144], ["model.Net.encoder", "model.Net.unsup_encoder", "model.Net.ff1", "model.Net.ff2", "infomax.global_global_loss_"], "methods", ["home.repos.pwc.inspect_result.fanyun-sun_InfoGraph.semi-supervised.infomax.global_global_loss_"], []], "home.repos.pwc.inspect_result.fanyun-sun_InfoGraph.semi-supervised.mean_teacher.MyTransform.__call__": [[17, 21], ["None"], "methods", ["None"], ["    ", "def", "__call__", "(", "self", ",", "data", ")", ":", "\n", "# Specify target.", "\n", "        ", "data", ".", "y", "=", "data", ".", "y", "[", ":", ",", "target", "]", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.fanyun-sun_InfoGraph.semi-supervised.mean_teacher.Complete.__call__": [[23, 46], ["torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "row.view().repeat().view.view().repeat().view.view().repeat().view", "col.repeat.repeat.repeat", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "mean_teacher.Complete.", "list", "data.edge_attr.new_zeros", "row.view().repeat().view.view().repeat().view.view().repeat", "data.edge_attr.size", "row.view().repeat().view.view().repeat().view.view"], "methods", ["None"], ["    ", "def", "__call__", "(", "self", ",", "data", ")", ":", "\n", "        ", "device", "=", "data", ".", "edge_index", ".", "device", "\n", "\n", "row", "=", "torch", ".", "arange", "(", "data", ".", "num_nodes", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "device", ")", "\n", "col", "=", "torch", ".", "arange", "(", "data", ".", "num_nodes", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "device", ")", "\n", "\n", "row", "=", "row", ".", "view", "(", "-", "1", ",", "1", ")", ".", "repeat", "(", "1", ",", "data", ".", "num_nodes", ")", ".", "view", "(", "-", "1", ")", "\n", "col", "=", "col", ".", "repeat", "(", "data", ".", "num_nodes", ")", "\n", "edge_index", "=", "torch", ".", "stack", "(", "[", "row", ",", "col", "]", ",", "dim", "=", "0", ")", "\n", "\n", "edge_attr", "=", "None", "\n", "if", "data", ".", "edge_attr", "is", "not", "None", ":", "\n", "            ", "idx", "=", "data", ".", "edge_index", "[", "0", "]", "*", "data", ".", "num_nodes", "+", "data", ".", "edge_index", "[", "1", "]", "\n", "size", "=", "list", "(", "data", ".", "edge_attr", ".", "size", "(", ")", ")", "\n", "size", "[", "0", "]", "=", "data", ".", "num_nodes", "*", "data", ".", "num_nodes", "\n", "edge_attr", "=", "data", ".", "edge_attr", ".", "new_zeros", "(", "size", ")", "\n", "edge_attr", "[", "idx", "]", "=", "data", ".", "edge_attr", "\n", "\n", "", "edge_index", ",", "edge_attr", "=", "remove_self_loops", "(", "edge_index", ",", "edge_attr", ")", "\n", "data", ".", "edge_attr", "=", "edge_attr", "\n", "data", ".", "edge_index", "=", "edge_index", "\n", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.fanyun-sun_InfoGraph.semi-supervised.mean_teacher.update_ema_variables": [[47, 52], ["min", "zip", "ema_model.parameters", "model.parameters", "ema_param.data.mul_().add_", "ema_param.data.mul_"], "function", ["None"], ["", "", "def", "update_ema_variables", "(", "model", ",", "ema_model", ",", "alpha", ",", "global_step", ")", ":", "\n", "# Use the true average until the exponential average is more correct", "\n", "    ", "alpha", "=", "min", "(", "1", "-", "1", "/", "(", "global_step", "+", "1", ")", ",", "alpha", ")", "\n", "for", "ema_param", ",", "param", "in", "zip", "(", "ema_model", ".", "parameters", "(", ")", ",", "model", ".", "parameters", "(", ")", ")", ":", "\n", "        ", "ema_param", ".", "data", ".", "mul_", "(", "alpha", ")", ".", "add_", "(", "1", "-", "alpha", ",", "param", ".", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fanyun-sun_InfoGraph.semi-supervised.mean_teacher.train": [[53, 87], ["model.train", "zip", "print", "print", "data.to.to", "unsup_data.to.to", "optimizer.zero_grad", "model", "teacher_model", "torch.mse_loss", "torch.mse_loss", "loss.backward", "optimizer.step", "mean_teacher.update_ema_variables", "len", "model", "F.mse_loss.item", "F.mse_loss.item", "loss.item", "len", "len"], "function", ["home.repos.pwc.inspect_result.fanyun-sun_InfoGraph.semi-supervised.mean_teacher.train", "home.repos.pwc.inspect_result.fanyun-sun_InfoGraph.semi-supervised.mean_teacher.update_ema_variables"], ["", "", "def", "train", "(", "epoch", ",", "use_unsup_loss", ")", ":", "\n", "    ", "global", "global_step", "\n", "model", ".", "train", "(", ")", "\n", "loss_all", "=", "0", "\n", "sup_loss_all", "=", "0", "\n", "unsup_loss_all", "=", "0", "\n", "unsup_sup_loss_all", "=", "0", "\n", "\n", "for", "data", ",", "unsup_data", "in", "zip", "(", "train_loader", ",", "unsup_loader", ")", ":", "\n", "        ", "data", "=", "data", ".", "to", "(", "device", ")", "\n", "unsup_data", "=", "unsup_data", ".", "to", "(", "device", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "pred", "=", "model", "(", "unsup_data", ")", "\n", "teacher_pred", "=", "teacher_model", "(", "unsup_data", ")", "\n", "\n", "sup_loss", "=", "F", ".", "mse_loss", "(", "model", "(", "data", ")", ",", "data", ".", "y", ")", "\n", "unsup_loss", "=", "F", ".", "mse_loss", "(", "pred", ",", "teacher_pred", ")", "\n", "\n", "loss", "=", "sup_loss", "+", "unsup_loss", "\n", "loss", ".", "backward", "(", ")", "\n", "\n", "sup_loss_all", "+=", "sup_loss", ".", "item", "(", ")", "*", "data", ".", "num_graphs", "\n", "unsup_loss_all", "+=", "unsup_loss", ".", "item", "(", ")", "*", "data", ".", "num_graphs", "\n", "loss_all", "+=", "loss", ".", "item", "(", ")", "*", "data", ".", "num_graphs", "\n", "\n", "optimizer", ".", "step", "(", ")", "\n", "global_step", "+=", "1", "\n", "update_ema_variables", "(", "model", ",", "teacher_model", ",", "ema_decay", ",", "global_step", ")", "\n", "\n", "", "print", "(", "'sup_loss_all'", ",", "sup_loss_all", "/", "len", "(", "train_loader", ".", "dataset", ")", ")", "\n", "print", "(", "'unsup_loss_all'", ",", "unsup_loss_all", "/", "len", "(", "train_loader", ".", "dataset", ")", ")", "\n", "\n", "return", "loss_all", "/", "len", "(", "train_loader", ".", "dataset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fanyun-sun_InfoGraph.semi-supervised.mean_teacher.test": [[89, 97], ["teacher_model.eval", "data.to.to", "len", "teacher_model"], "function", ["None"], ["", "def", "test", "(", "loader", ")", ":", "\n", "    ", "teacher_model", ".", "eval", "(", ")", "\n", "error", "=", "0", "\n", "\n", "for", "data", "in", "loader", ":", "\n", "        ", "data", "=", "data", ".", "to", "(", "device", ")", "\n", "error", "+=", "(", "teacher_model", "(", "data", ")", "*", "std", "-", "data", ".", "y", "*", "std", ")", ".", "abs", "(", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "# MAE", "\n", "", "return", "error", "/", "len", "(", "loader", ".", "dataset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fanyun-sun_InfoGraph.semi-supervised.mean_teacher.seed_everything": [[99, 107], ["random.seed", "torch.manual_seed", "torch.manual_seed", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "numpy.random.seed", "str"], "function", ["None"], ["", "def", "seed_everything", "(", "seed", "=", "1234", ")", ":", "\n", "    ", "random", ".", "seed", "(", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "os", ".", "environ", "[", "'PYTHONHASHSEED'", "]", "=", "str", "(", "seed", ")", "\n", "torch", ".", "backends", ".", "cudnn", ".", "deterministic", "=", "True", "\n", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.fanyun-sun_InfoGraph.semi-supervised.infomax.log_sum_exp": [[6, 20], ["torch.max", "torch.max", "torch.log", "torch.log", "torch.exp().sum", "torch.exp().sum", "torch.exp", "torch.exp"], "function", ["None"], ["def", "log_sum_exp", "(", "x", ",", "axis", "=", "None", ")", ":", "\n", "    ", "\"\"\"Log sum exp function\n\n    Args:\n        x: Input.\n        axis: Axis over which to perform sum.\n\n    Returns:\n        torch.Tensor: log sum exp\n\n    \"\"\"", "\n", "x_max", "=", "torch", ".", "max", "(", "x", ",", "axis", ")", "[", "0", "]", "\n", "y", "=", "torch", ".", "log", "(", "(", "torch", ".", "exp", "(", "x", "-", "x_max", ")", ")", ".", "sum", "(", "axis", ")", ")", "+", "x_max", "\n", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.fanyun-sun_InfoGraph.semi-supervised.infomax.random_permute": [[21, 37], ["X[].transpose.transpose", "torch.rand().cuda", "torch.rand().cuda", "torch.range().long", "torch.range().long", "X[].transpose", "torch.rand().cuda.sort", "torch.rand", "torch.rand", "torch.range", "torch.range", "X[].transpose.size", "X[].transpose.size", "X[].transpose.size"], "function", ["None"], ["", "def", "random_permute", "(", "X", ")", ":", "\n", "    ", "\"\"\"Randomly permutes a tensor.\n\n    Args:\n        X: Input tensor.\n\n    Returns:\n        torch.Tensor\n\n    \"\"\"", "\n", "X", "=", "X", ".", "transpose", "(", "1", ",", "2", ")", "\n", "b", "=", "torch", ".", "rand", "(", "(", "X", ".", "size", "(", "0", ")", ",", "X", ".", "size", "(", "1", ")", ")", ")", ".", "cuda", "(", ")", "\n", "idx", "=", "b", ".", "sort", "(", "0", ")", "[", "1", "]", "\n", "adx", "=", "torch", ".", "range", "(", "0", ",", "X", ".", "size", "(", "1", ")", "-", "1", ")", ".", "long", "(", ")", "\n", "X", "=", "X", "[", "idx", ",", "adx", "[", "None", ",", ":", "]", "]", ".", "transpose", "(", "1", ",", "2", ")", "\n", "return", "X", "\n", "\n"]], "home.repos.pwc.inspect_result.fanyun-sun_InfoGraph.semi-supervised.infomax.get_positive_expectation": [[38, 75], ["math.log", "Ep.mean", "torch.softplus", "torch.softplus", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "raise_measure_error"], "function", ["home.repos.pwc.inspect_result.fanyun-sun_InfoGraph.functions.gan_losses.raise_measure_error"], ["", "def", "get_positive_expectation", "(", "p_samples", ",", "measure", ",", "average", "=", "True", ")", ":", "\n", "    ", "\"\"\"Computes the positive part of a divergence / difference.\n\n    Args:\n        p_samples: Positive samples.\n        measure: Measure to compute for.\n        average: Average the result over samples.\n\n    Returns:\n        torch.Tensor\n\n    \"\"\"", "\n", "log_2", "=", "math", ".", "log", "(", "2.", ")", "\n", "\n", "if", "measure", "==", "'GAN'", ":", "\n", "        ", "Ep", "=", "-", "F", ".", "softplus", "(", "-", "p_samples", ")", "\n", "", "elif", "measure", "==", "'JSD'", ":", "\n", "        ", "Ep", "=", "log_2", "-", "F", ".", "softplus", "(", "-", "p_samples", ")", "\n", "", "elif", "measure", "==", "'X2'", ":", "\n", "        ", "Ep", "=", "p_samples", "**", "2", "\n", "", "elif", "measure", "==", "'KL'", ":", "\n", "        ", "Ep", "=", "p_samples", "+", "1.", "\n", "", "elif", "measure", "==", "'RKL'", ":", "\n", "        ", "Ep", "=", "-", "torch", ".", "exp", "(", "-", "p_samples", ")", "\n", "", "elif", "measure", "==", "'DV'", ":", "\n", "        ", "Ep", "=", "p_samples", "\n", "", "elif", "measure", "==", "'H2'", ":", "\n", "        ", "Ep", "=", "1.", "-", "torch", ".", "exp", "(", "-", "p_samples", ")", "\n", "", "elif", "measure", "==", "'W1'", ":", "\n", "        ", "Ep", "=", "p_samples", "\n", "", "else", ":", "\n", "        ", "raise_measure_error", "(", "measure", ")", "\n", "\n", "", "if", "average", ":", "\n", "        ", "return", "Ep", ".", "mean", "(", ")", "\n", "", "else", ":", "\n", "        ", "return", "Ep", "\n", "\n"]], "home.repos.pwc.inspect_result.fanyun-sun_InfoGraph.semi-supervised.infomax.get_negative_expectation": [[77, 114], ["math.log", "torch.exp.mean", "torch.softplus", "torch.softplus", "torch.exp", "torch.exp", "torch.sqrt", "torch.sqrt", "infomax.log_sum_exp", "math.log", "q_samples.size", "torch.exp", "torch.exp", "raise_measure_error"], "function", ["home.repos.pwc.inspect_result.fanyun-sun_InfoGraph.semi-supervised.infomax.log_sum_exp", "home.repos.pwc.inspect_result.fanyun-sun_InfoGraph.functions.gan_losses.raise_measure_error"], ["", "", "def", "get_negative_expectation", "(", "q_samples", ",", "measure", ",", "average", "=", "True", ")", ":", "\n", "    ", "\"\"\"Computes the negative part of a divergence / difference.\n\n    Args:\n        q_samples: Negative samples.\n        measure: Measure to compute for.\n        average: Average the result over samples.\n\n    Returns:\n        torch.Tensor\n\n    \"\"\"", "\n", "log_2", "=", "math", ".", "log", "(", "2.", ")", "\n", "\n", "if", "measure", "==", "'GAN'", ":", "\n", "        ", "Eq", "=", "F", ".", "softplus", "(", "-", "q_samples", ")", "+", "q_samples", "\n", "", "elif", "measure", "==", "'JSD'", ":", "\n", "        ", "Eq", "=", "F", ".", "softplus", "(", "-", "q_samples", ")", "+", "q_samples", "-", "log_2", "\n", "", "elif", "measure", "==", "'X2'", ":", "\n", "        ", "Eq", "=", "-", "0.5", "*", "(", "(", "torch", ".", "sqrt", "(", "q_samples", "**", "2", ")", "+", "1.", ")", "**", "2", ")", "\n", "", "elif", "measure", "==", "'KL'", ":", "\n", "        ", "Eq", "=", "torch", ".", "exp", "(", "q_samples", ")", "\n", "", "elif", "measure", "==", "'RKL'", ":", "\n", "        ", "Eq", "=", "q_samples", "-", "1.", "\n", "", "elif", "measure", "==", "'DV'", ":", "\n", "        ", "Eq", "=", "log_sum_exp", "(", "q_samples", ",", "0", ")", "-", "math", ".", "log", "(", "q_samples", ".", "size", "(", "0", ")", ")", "\n", "", "elif", "measure", "==", "'H2'", ":", "\n", "        ", "Eq", "=", "torch", ".", "exp", "(", "q_samples", ")", "-", "1.", "\n", "", "elif", "measure", "==", "'W1'", ":", "\n", "        ", "Eq", "=", "q_samples", "\n", "", "else", ":", "\n", "        ", "raise_measure_error", "(", "measure", ")", "\n", "\n", "", "if", "average", ":", "\n", "        ", "return", "Eq", ".", "mean", "(", ")", "\n", "", "else", ":", "\n", "        ", "return", "Eq", "\n", "\n"]], "home.repos.pwc.inspect_result.fanyun-sun_InfoGraph.semi-supervised.infomax.local_global_loss_": [[115, 142], ["torch.zeros().cuda", "torch.zeros().cuda", "torch.ones().cuda", "torch.ones().cuda", "enumerate", "torch.mm", "torch.mm", "infomax.get_positive_expectation", "infomax.get_negative_expectation", "g_enc.t", "torch.zeros().cuda.sum", "torch.ones().cuda.sum", "torch.zeros", "torch.zeros", "torch.ones", "torch.ones"], "function", ["home.repos.pwc.inspect_result.fanyun-sun_InfoGraph.semi-supervised.infomax.get_positive_expectation", "home.repos.pwc.inspect_result.fanyun-sun_InfoGraph.semi-supervised.infomax.get_negative_expectation"], ["", "", "def", "local_global_loss_", "(", "l_enc", ",", "g_enc", ",", "edge_index", ",", "batch", ",", "measure", ")", ":", "\n", "    ", "'''\n    Args:\n        l: Local feature map.\n        g: Global features.\n        measure: Type of f-divergence. For use with mode `fd`\n        mode: Loss mode. Fenchel-dual `fd`, NCE `nce`, or Donsker-Vadadhan `dv`.\n    Returns:\n        torch.Tensor: Loss.\n    '''", "\n", "num_graphs", "=", "g_enc", ".", "shape", "[", "0", "]", "\n", "num_nodes", "=", "l_enc", ".", "shape", "[", "0", "]", "\n", "\n", "pos_mask", "=", "torch", ".", "zeros", "(", "(", "num_nodes", ",", "num_graphs", ")", ")", ".", "cuda", "(", ")", "\n", "neg_mask", "=", "torch", ".", "ones", "(", "(", "num_nodes", ",", "num_graphs", ")", ")", ".", "cuda", "(", ")", "\n", "for", "nodeidx", ",", "graphidx", "in", "enumerate", "(", "batch", ")", ":", "\n", "        ", "pos_mask", "[", "nodeidx", "]", "[", "graphidx", "]", "=", "1.", "\n", "neg_mask", "[", "nodeidx", "]", "[", "graphidx", "]", "=", "0.", "\n", "\n", "", "res", "=", "torch", ".", "mm", "(", "l_enc", ",", "g_enc", ".", "t", "(", ")", ")", "\n", "\n", "E_pos", "=", "get_positive_expectation", "(", "res", "*", "pos_mask", ",", "measure", ",", "average", "=", "False", ")", "\n", "E_pos", "=", "(", "E_pos", "*", "pos_mask", ")", ".", "sum", "(", ")", "/", "pos_mask", ".", "sum", "(", ")", "\n", "E_neg", "=", "get_negative_expectation", "(", "res", "*", "neg_mask", ",", "measure", ",", "average", "=", "False", ")", "\n", "E_neg", "=", "(", "E_neg", "*", "neg_mask", ")", ".", "sum", "(", ")", "/", "neg_mask", ".", "sum", "(", ")", "\n", "\n", "return", "E_neg", "-", "E_pos", "\n", "\n"]], "home.repos.pwc.inspect_result.fanyun-sun_InfoGraph.semi-supervised.infomax.global_global_loss_": [[143, 166], ["torch.eye().cuda", "torch.eye().cuda", "torch.mm", "torch.mm", "infomax.get_positive_expectation", "infomax.get_negative_expectation", "g_enc1.t", "torch.eye().cuda.sum", "neg_mask.sum", "torch.eye", "torch.eye"], "function", ["home.repos.pwc.inspect_result.fanyun-sun_InfoGraph.semi-supervised.infomax.get_positive_expectation", "home.repos.pwc.inspect_result.fanyun-sun_InfoGraph.semi-supervised.infomax.get_negative_expectation"], ["", "def", "global_global_loss_", "(", "g_enc", ",", "g_enc1", ",", "edge_index", ",", "batch", ",", "measure", ")", ":", "\n", "    ", "'''\n    Args:\n        g: Global features\n        g1: Global features.\n        measure: Type of f-divergence. For use with mode `fd`\n        mode: Loss mode. Fenchel-dual `fd`, NCE `nce`, or Donsker-Vadadhan `dv`.\n    Returns:\n        torch.Tensor: Loss.\n    '''", "\n", "num_graphs", "=", "g_enc", ".", "shape", "[", "0", "]", "\n", "\n", "pos_mask", "=", "torch", ".", "eye", "(", "num_graphs", ")", ".", "cuda", "(", ")", "\n", "neg_mask", "=", "1", "-", "pos_mask", "\n", "\n", "res", "=", "torch", ".", "mm", "(", "g_enc", ",", "g_enc1", ".", "t", "(", ")", ")", "\n", "\n", "E_pos", "=", "get_positive_expectation", "(", "res", "*", "pos_mask", ",", "measure", ",", "average", "=", "False", ")", "\n", "E_pos", "=", "(", "E_pos", "*", "pos_mask", ")", ".", "sum", "(", ")", "/", "pos_mask", ".", "sum", "(", ")", "\n", "E_neg", "=", "get_negative_expectation", "(", "res", "*", "neg_mask", ",", "measure", ",", "average", "=", "False", ")", "\n", "E_neg", "=", "(", "E_neg", "*", "neg_mask", ")", ".", "sum", "(", ")", "/", "neg_mask", ".", "sum", "(", ")", "\n", "\n", "return", "E_neg", "-", "E_pos", "\n", "", ""]]}