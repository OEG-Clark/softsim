{"home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.None.setup.readme": [[10, 14], ["open", "f.read"], "function", ["None"], ["def", "readme", "(", ")", ":", "\n", "    ", "with", "open", "(", "'README.md'", ",", "encoding", "=", "'utf-8'", ")", "as", "f", ":", "\n", "        ", "content", "=", "f", ".", "read", "(", ")", "\n", "", "return", "content", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.None.setup.make_cuda_ext": [[16, 39], ["extension", "torch.cuda.is_available", "print", "os.getenv", "os.path.join", "module.split"], "function", ["None"], ["", "def", "make_cuda_ext", "(", "name", ",", "module", ",", "sources", ",", "sources_cuda", "=", "[", "]", ")", ":", "\n", "\n", "    ", "define_macros", "=", "[", "]", "\n", "extra_compile_args", "=", "{", "'cxx'", ":", "[", "]", "}", "\n", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "or", "os", ".", "getenv", "(", "'FORCE_CUDA'", ",", "'0'", ")", "==", "'1'", ":", "\n", "        ", "define_macros", "+=", "[", "(", "'WITH_CUDA'", ",", "None", ")", "]", "\n", "extension", "=", "CUDAExtension", "\n", "extra_compile_args", "[", "'nvcc'", "]", "=", "[", "\n", "'-D__CUDA_NO_HALF_OPERATORS__'", ",", "\n", "'-D__CUDA_NO_HALF_CONVERSIONS__'", ",", "\n", "'-D__CUDA_NO_HALF2_OPERATORS__'", ",", "\n", "]", "\n", "sources", "+=", "sources_cuda", "\n", "", "else", ":", "\n", "        ", "print", "(", "f'Compiling {name} without CUDA'", ")", "\n", "extension", "=", "CppExtension", "\n", "\n", "", "return", "extension", "(", "\n", "name", "=", "f'{module}.{name}'", ",", "\n", "sources", "=", "[", "os", ".", "path", ".", "join", "(", "*", "module", ".", "split", "(", "'.'", ")", ",", "p", ")", "for", "p", "in", "sources", "]", ",", "\n", "define_macros", "=", "define_macros", ",", "\n", "extra_compile_args", "=", "extra_compile_args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.None.setup.parse_requirements": [[41, 117], ["list", "line.strip.startswith", "exists", "setup.parse_requirements.gen_packages_items"], "function", ["None"], ["", "def", "parse_requirements", "(", "fname", "=", "'requirements.txt'", ",", "with_version", "=", "True", ")", ":", "\n", "    ", "\"\"\"Parse the package dependencies listed in a requirements file but strips\n    specific versioning information.\n\n    Args:\n        fname (str): path to requirements file\n        with_version (bool, default=False): if True include version specs\n\n    Returns:\n        List[str]: list of requirements items\n\n    CommandLine:\n        python -c \"import setup; print(setup.parse_requirements())\"\n    \"\"\"", "\n", "import", "sys", "\n", "from", "os", ".", "path", "import", "exists", "\n", "import", "re", "\n", "require_fpath", "=", "fname", "\n", "\n", "def", "parse_line", "(", "line", ")", ":", "\n", "        ", "\"\"\"Parse information from a line in a requirements text file.\"\"\"", "\n", "if", "line", ".", "startswith", "(", "'-r '", ")", ":", "\n", "# Allow specifying requirements in other files", "\n", "            ", "target", "=", "line", ".", "split", "(", "' '", ")", "[", "1", "]", "\n", "for", "info", "in", "parse_require_file", "(", "target", ")", ":", "\n", "                ", "yield", "info", "\n", "", "", "else", ":", "\n", "            ", "info", "=", "{", "'line'", ":", "line", "}", "\n", "if", "line", ".", "startswith", "(", "'-e '", ")", ":", "\n", "                ", "info", "[", "'package'", "]", "=", "line", ".", "split", "(", "'#egg='", ")", "[", "1", "]", "\n", "", "elif", "'@git+'", "in", "line", ":", "\n", "                ", "info", "[", "'package'", "]", "=", "line", "\n", "", "else", ":", "\n", "# Remove versioning from the package", "\n", "                ", "pat", "=", "'('", "+", "'|'", ".", "join", "(", "[", "'>='", ",", "'=='", ",", "'>'", "]", ")", "+", "')'", "\n", "parts", "=", "re", ".", "split", "(", "pat", ",", "line", ",", "maxsplit", "=", "1", ")", "\n", "parts", "=", "[", "p", ".", "strip", "(", ")", "for", "p", "in", "parts", "]", "\n", "\n", "info", "[", "'package'", "]", "=", "parts", "[", "0", "]", "\n", "if", "len", "(", "parts", ")", ">", "1", ":", "\n", "                    ", "op", ",", "rest", "=", "parts", "[", "1", ":", "]", "\n", "if", "';'", "in", "rest", ":", "\n", "# Handle platform specific dependencies", "\n", "# http://setuptools.readthedocs.io/en/latest/setuptools.html#declaring-platform-specific-dependencies", "\n", "                        ", "version", ",", "platform_deps", "=", "map", "(", "str", ".", "strip", ",", "\n", "rest", ".", "split", "(", "';'", ")", ")", "\n", "info", "[", "'platform_deps'", "]", "=", "platform_deps", "\n", "", "else", ":", "\n", "                        ", "version", "=", "rest", "# NOQA", "\n", "", "info", "[", "'version'", "]", "=", "(", "op", ",", "version", ")", "\n", "", "", "yield", "info", "\n", "\n", "", "", "def", "parse_require_file", "(", "fpath", ")", ":", "\n", "        ", "with", "open", "(", "fpath", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "for", "line", "in", "f", ".", "readlines", "(", ")", ":", "\n", "                ", "line", "=", "line", ".", "strip", "(", ")", "\n", "if", "line", "and", "not", "line", ".", "startswith", "(", "'#'", ")", ":", "\n", "                    ", "for", "info", "in", "parse_line", "(", "line", ")", ":", "\n", "                        ", "yield", "info", "\n", "\n", "", "", "", "", "", "def", "gen_packages_items", "(", ")", ":", "\n", "        ", "if", "exists", "(", "require_fpath", ")", ":", "\n", "            ", "for", "info", "in", "parse_require_file", "(", "require_fpath", ")", ":", "\n", "                ", "parts", "=", "[", "info", "[", "'package'", "]", "]", "\n", "if", "with_version", "and", "'version'", "in", "info", ":", "\n", "                    ", "parts", ".", "extend", "(", "info", "[", "'version'", "]", ")", "\n", "", "if", "not", "sys", ".", "version", ".", "startswith", "(", "'3.4'", ")", ":", "\n", "# apparently package_deps are broken in 3.4", "\n", "                    ", "platform_deps", "=", "info", ".", "get", "(", "'platform_deps'", ")", "\n", "if", "platform_deps", "is", "not", "None", ":", "\n", "                        ", "parts", ".", "append", "(", "';'", "+", "platform_deps", ")", "\n", "", "", "item", "=", "''", ".", "join", "(", "parts", ")", "\n", "yield", "item", "\n", "\n", "", "", "", "packages", "=", "list", "(", "gen_packages_items", "(", ")", ")", "\n", "return", "packages", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.utils.iotools.mkdir_if_missing": [[14, 21], ["os.exists", "os.makedirs", "os.makedirs"], "function", ["None"], ["def", "mkdir_if_missing", "(", "directory", ")", ":", "\n", "    ", "if", "not", "osp", ".", "exists", "(", "directory", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "os", ".", "makedirs", "(", "directory", ")", "\n", "", "except", "OSError", "as", "e", ":", "\n", "            ", "if", "e", ".", "errno", "!=", "errno", ".", "EEXIST", ":", "\n", "                ", "raise", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.utils.iotools.check_isfile": [[23, 28], ["os.isfile", "print"], "function", ["None"], ["", "", "", "", "def", "check_isfile", "(", "path", ")", ":", "\n", "    ", "isfile", "=", "osp", ".", "isfile", "(", "path", ")", "\n", "if", "not", "isfile", ":", "\n", "        ", "print", "(", "\"=> Warning: no file found at '{}' (ignored)\"", ".", "format", "(", "path", ")", ")", "\n", "", "return", "isfile", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.utils.iotools.read_json": [[30, 34], ["open", "json.load"], "function", ["None"], ["", "def", "read_json", "(", "fpath", ")", ":", "\n", "    ", "with", "open", "(", "fpath", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "obj", "=", "json", ".", "load", "(", "f", ")", "\n", "", "return", "obj", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.utils.iotools.write_json": [[36, 40], ["iotools.mkdir_if_missing", "os.dirname", "open", "json.dump"], "function", ["home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.utils.iotools.mkdir_if_missing"], ["", "def", "write_json", "(", "obj", ",", "fpath", ")", ":", "\n", "    ", "mkdir_if_missing", "(", "osp", ".", "dirname", "(", "fpath", ")", ")", "\n", "with", "open", "(", "fpath", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "json", ".", "dump", "(", "obj", ",", "f", ",", "indent", "=", "4", ",", "separators", "=", "(", "','", ",", "': '", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.utils.bbox_utils.extract_bbox_from_mask": [[6, 13], ["numpy.any", "numpy.any", "numpy.where", "numpy.where"], "function", ["None"], ["def", "extract_bbox_from_mask", "(", "input", ")", ":", "\n", "    ", "assert", "input", ".", "ndim", "==", "2", ",", "'Invalid input shape'", "\n", "rows", "=", "np", ".", "any", "(", "input", ",", "axis", "=", "1", ")", "\n", "cols", "=", "np", ".", "any", "(", "input", ",", "axis", "=", "0", ")", "\n", "ymin", ",", "ymax", "=", "np", ".", "where", "(", "rows", ")", "[", "0", "]", "[", "[", "0", ",", "-", "1", "]", "]", "\n", "xmin", ",", "xmax", "=", "np", ".", "where", "(", "cols", ")", "[", "0", "]", "[", "[", "0", ",", "-", "1", "]", "]", "\n", "return", "xmin", ",", "ymin", ",", "xmax", ",", "ymax", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.utils.bbox_utils.localize_from_map": [[15, 23], ["bbox_utils.extract_bbox_from_mask", "actmap.mean"], "function", ["home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.utils.bbox_utils.extract_bbox_from_mask"], ["", "def", "localize_from_map", "(", "actmap", ",", "threshold_ratio", "=", "0.5", ")", ":", "\n", "    ", "foreground_map", "=", "actmap", ">=", "(", "actmap", ".", "mean", "(", ")", "*", "threshold_ratio", ")", "\n", "# single object", "\n", "try", ":", "\n", "        ", "bbox", "=", "extract_bbox_from_mask", "(", "foreground_map", ")", "\n", "", "except", ":", "\n", "        ", "bbox", "=", "None", "\n", "", "return", "bbox", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.utils.bbox_utils.bbox_nms": [[25, 39], ["sorted", "len", "list.pop", "selected_bboxes.append", "list", "bbox_utils.compute_iou", "filter"], "function", ["home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.utils.bbox_utils.compute_iou"], ["", "def", "bbox_nms", "(", "bbox_list", ",", "threshold", "=", "0.5", ")", ":", "\n", "    ", "bbox_list", "=", "sorted", "(", "bbox_list", ",", "key", "=", "lambda", "x", ":", "x", "[", "-", "1", "]", ",", "reverse", "=", "True", ")", "\n", "selected_bboxes", "=", "[", "]", "\n", "while", "len", "(", "bbox_list", ")", ">", "0", ":", "\n", "        ", "obj", "=", "bbox_list", ".", "pop", "(", "0", ")", "\n", "selected_bboxes", ".", "append", "(", "obj", ")", "\n", "def", "iou_filter", "(", "x", ")", ":", "\n", "            ", "iou", "=", "compute_iou", "(", "obj", "[", "1", ":", "5", "]", ",", "x", "[", "1", ":", "5", "]", ")", "\n", "if", "(", "x", "[", "0", "]", "==", "obj", "[", "0", "]", "and", "iou", ">=", "threshold", ")", ":", "\n", "                ", "return", "None", "\n", "", "else", ":", "\n", "                ", "return", "x", "\n", "", "", "bbox_list", "=", "list", "(", "filter", "(", "iou_filter", ",", "bbox_list", ")", ")", "\n", "", "return", "selected_bboxes", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.utils.bbox_utils.compute_iou": [[41, 50], ["max", "max", "min", "min", "max", "max", "float"], "function", ["None"], ["", "def", "compute_iou", "(", "box_a", ",", "box_b", ")", ":", "\n", "    ", "x_a", "=", "max", "(", "box_a", "[", "0", "]", ",", "box_b", "[", "0", "]", ")", "\n", "y_a", "=", "max", "(", "box_a", "[", "1", "]", ",", "box_b", "[", "1", "]", ")", "\n", "x_b", "=", "min", "(", "box_a", "[", "2", "]", ",", "box_b", "[", "2", "]", ")", "\n", "y_b", "=", "min", "(", "box_a", "[", "3", "]", ",", "box_b", "[", "3", "]", ")", "\n", "inter_area", "=", "max", "(", "x_b", "-", "x_a", "+", "1", ",", "0", ")", "*", "max", "(", "y_b", "-", "y_a", "+", "1", ",", "0", ")", "\n", "box_a_area", "=", "(", "box_a", "[", "2", "]", "-", "box_a", "[", "0", "]", "+", "1", ")", "*", "(", "box_a", "[", "3", "]", "-", "box_a", "[", "1", "]", "+", "1", ")", "\n", "box_b_area", "=", "(", "box_b", "[", "2", "]", "-", "box_b", "[", "0", "]", "+", "1", ")", "*", "(", "box_b", "[", "3", "]", "-", "box_b", "[", "1", "]", "+", "1", ")", "\n", "return", "inter_area", "/", "float", "(", "box_a_area", "+", "box_b_area", "-", "inter_area", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.utils.bbox_utils.draw_bbox": [[52, 57], ["cv2.rectangle", "int", "int", "int", "int"], "function", ["None"], ["", "def", "draw_bbox", "(", "canvas", ",", "bboxes", ",", "color", "=", "[", "255", ",", "0", ",", "255", "]", ")", ":", "\n", "    ", "for", "bbox", "in", "bboxes", ":", "\n", "        ", "if", "bbox", "is", "not", "None", ":", "\n", "            ", "cv2", ".", "rectangle", "(", "canvas", ",", "(", "int", "(", "bbox", "[", "0", "]", ")", ",", "int", "(", "bbox", "[", "1", "]", ")", ")", ",", "(", "(", "int", "(", "bbox", "[", "2", "]", ")", ",", "int", "(", "bbox", "[", "3", "]", ")", ")", ")", ",", "color", "=", "color", ")", "\n", "", "", "return", "canvas", "\n", "", ""]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.utils.actmap.batch_attention_mask": [[8, 17], ["actmap.view", "actmap.view.min", "actmap.view.max", "range", "actmap.unsqueeze", "actmap.size", "actmap.size"], "function", ["None"], ["def", "batch_attention_mask", "(", "featmap", ",", "threshold", "=", "0.75", ")", ":", "\n", "    ", "actmap", "=", "(", "featmap", "**", "2", ")", ".", "sum", "(", "dim", "=", "1", ")", "# N*W*H", "\n", "val", "=", "actmap", ".", "view", "(", "actmap", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "min_val", ",", "_", "=", "val", ".", "min", "(", "dim", "=", "1", ")", "\n", "max_val", ",", "_", "=", "val", ".", "max", "(", "dim", "=", "1", ")", "\n", "thr", "=", "min_val", "+", "(", "max_val", "-", "min_val", ")", "*", "threshold", "\n", "for", "i", "in", "range", "(", "actmap", ".", "size", "(", "0", ")", ")", ":", "\n", "        ", "actmap", "[", "i", "]", "=", "actmap", "[", "i", "]", "<", "thr", "[", "i", "]", "\n", "", "return", "actmap", ".", "unsqueeze", "(", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.utils.actmap.generate_attention_mask": [[19, 26], ["numpy.min", "actmap.mean", "actmap.mean", "numpy.max", "numpy.min"], "function", ["None"], ["", "def", "generate_attention_mask", "(", "actmap", ",", "threshold", "=", "1.0", ")", ":", "\n", "    ", "actmap", "=", "(", "actmap", "-", "np", ".", "min", "(", "actmap", ")", ")", "/", "(", "\n", "np", ".", "max", "(", "actmap", ")", "-", "np", ".", "min", "(", "actmap", ")", "+", "1e-12", "\n", ")", "\n", "foreground_mask", "=", "actmap", ">=", "(", "actmap", ".", "mean", "(", ")", "*", "threshold", ")", "\n", "background_mask", "=", "actmap", "<", "(", "actmap", ".", "mean", "(", ")", "*", "threshold", ")", "\n", "return", "foreground_mask", ",", "background_mask", "\n", "", ""]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.utils.post_process.comput_distmat": [[31, 42], ["distmat.addmm_", "torch.argsort", "torch.argsort", "torch.pow().sum().expand", "torch.pow().sum().expand", "torch.pow().sum().expand().t", "torch.pow().sum().expand().t", "gf.t", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum().expand", "torch.pow().sum().expand", "torch.pow", "torch.pow", "torch.pow().sum", "torch.pow().sum", "torch.pow", "torch.pow"], "function", ["None"], ["def", "comput_distmat", "(", "qf", ",", "gf", ",", "input_type", "=", "'torch'", ")", ":", "\n", "    ", "m", ",", "n", "=", "qf", ".", "shape", "[", "0", "]", ",", "gf", ".", "shape", "[", "0", "]", "\n", "if", "input_type", "==", "'numpy'", ":", "\n", "# TODO : using numpy to compute distmat", "\n", "        ", "pass", "\n", "", "else", ":", "\n", "        ", "distmat", "=", "torch", ".", "pow", "(", "qf", ",", "2", ")", ".", "sum", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", ".", "expand", "(", "m", ",", "n", ")", "+", "torch", ".", "pow", "(", "gf", ",", "2", ")", ".", "sum", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", ".", "expand", "(", "n", ",", "m", ")", ".", "t", "(", ")", "\n", "distmat", ".", "addmm_", "(", "1", ",", "-", "2", ",", "qf", ",", "gf", ".", "t", "(", ")", ")", "\n", "indices", "=", "torch", ".", "argsort", "(", "distmat", ",", "dim", "=", "1", ")", "\n", "", "return", "distmat", ",", "indices", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.utils.post_process.database_aug": [[44, 53], ["distmat.addmm_", "numpy.argsort", "gf[].mean", "torch.pow().sum().expand", "torch.pow().sum().expand", "torch.pow().sum().expand().t", "torch.pow().sum().expand().t", "gf.t", "distmat.cpu().numpy", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum().expand", "torch.pow().sum().expand", "distmat.cpu", "torch.pow", "torch.pow", "torch.pow().sum", "torch.pow().sum", "torch.pow", "torch.pow"], "function", ["None"], ["", "def", "database_aug", "(", "gf", ",", "top_k", "=", "10", ")", ":", "\n", "# distmat, indices = comput_distmat(gf, gf)", "\n", "    ", "m", ",", "n", "=", "gf", ".", "shape", "[", "0", "]", ",", "gf", ".", "shape", "[", "0", "]", "\n", "distmat", "=", "torch", ".", "pow", "(", "gf", ",", "2", ")", ".", "sum", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", ".", "expand", "(", "m", ",", "n", ")", "+", "torch", ".", "pow", "(", "gf", ",", "2", ")", ".", "sum", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", ".", "expand", "(", "n", ",", "m", ")", ".", "t", "(", ")", "\n", "distmat", ".", "addmm_", "(", "1", ",", "-", "2", ",", "gf", ",", "gf", ".", "t", "(", ")", ")", "\n", "indices", "=", "np", ".", "argsort", "(", "distmat", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "axis", "=", "1", ")", "\n", "expanded_gf", "=", "(", "gf", "[", "indices", "[", ":", ",", ":", "top_k", "]", "]", ")", ".", "mean", "(", "dim", "=", "1", ")", "\n", "return", "expanded_gf", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.utils.post_process.average_query_expansion": [[55, 59], ["post_process.comput_distmat", "feats[].mean"], "function", ["home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.utils.post_process.comput_distmat"], ["", "def", "average_query_expansion", "(", "qf", ",", "feats", ",", "top_k", "=", "6", ")", ":", "\n", "    ", "_", ",", "indices", "=", "comput_distmat", "(", "qf", ",", "feats", ")", "\n", "expanded_qf", "=", "(", "feats", "[", "indices", "[", ":", ",", ":", "top_k", "]", "]", ")", ".", "mean", "(", "dim", "=", "1", ")", "\n", "return", "expanded_qf", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.utils.post_process.alpha_query_expansion": [[61, 72], ["post_process.comput_distmat", "feats[].mean"], "function", ["home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.utils.post_process.comput_distmat"], ["", "def", "alpha_query_expansion", "(", "qf", ",", "feats", ",", "alpha", "=", "3.0", ",", "top_k", "=", "10", ")", ":", "\n", "# qf : m x N, gf: n x N", "\n", "# distmat : m x n, indices: m x n", "\n", "# weights: m x topk", "\n", "    ", "distmat", ",", "indices", "=", "comput_distmat", "(", "qf", ",", "feats", ")", "\n", "# print(distmat.shape, indices.shape)", "\n", "# print(indices[:, :top_k].shape)", "\n", "# weights = torch.pow(distmat[indices[:, :top_k]], alpha) # m x topk", "\n", "# print(weights.shape)", "\n", "expanded_qf", "=", "(", "feats", "[", "indices", "[", ":", ",", ":", "top_k", "]", "]", ")", ".", "mean", "(", "dim", "=", "1", ")", "\n", "return", "expanded_qf", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.utils.post_process.re_ranking": [[74, 157], ["probFea.size", "numpy.transpose", "numpy.zeros_like().astype", "numpy.argsort().astype", "print", "range", "range", "numpy.zeros_like", "range", "galFea.size", "torch.cat", "torch.cat", "print", "distmat.addmm_", "distmat.cpu().numpy", "range", "numpy.unique", "numpy.exp", "numpy.zeros_like", "range", "invIndex.append", "numpy.zeros", "range", "torch.pow().sum().expand", "torch.pow().sum().expand", "torch.pow().sum().expand().t", "torch.pow().sum().expand().t", "torch.cat.t", "numpy.max", "numpy.zeros_like", "numpy.argsort", "numpy.where", "len", "numpy.sum", "numpy.mean", "numpy.where", "len", "distmat.cpu", "numpy.where", "len", "numpy.append", "numpy.where", "numpy.minimum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum().expand", "torch.pow().sum().expand", "numpy.intersect1d", "len", "torch.pow", "torch.pow", "torch.pow().sum", "torch.pow().sum", "int", "int", "numpy.around", "numpy.around", "torch.pow", "torch.pow"], "function", ["None"], ["", "def", "re_ranking", "(", "probFea", ",", "galFea", ",", "k1", ",", "k2", ",", "lambda_value", ",", "local_distmat", "=", "None", ",", "only_local", "=", "False", ",", "\n", "USE_VOC", "=", "False", ",", "cam_dist", "=", "None", ",", "ori_dist", "=", "None", ")", ":", "\n", "# if feature vector is numpy, you should use 'torch.tensor' transform it to tensor", "\n", "    ", "query_num", "=", "probFea", ".", "size", "(", "0", ")", "\n", "all_num", "=", "query_num", "+", "galFea", ".", "size", "(", "0", ")", "\n", "if", "only_local", ":", "\n", "        ", "original_dist", "=", "local_distmat", "\n", "", "else", ":", "\n", "# import ipdb; ipdb.set_trace()", "\n", "        ", "feat", "=", "torch", ".", "cat", "(", "[", "probFea", ",", "galFea", "]", ")", "\n", "print", "(", "'using GPU to compute original distance'", ")", "\n", "distmat", "=", "torch", ".", "pow", "(", "feat", ",", "2", ")", ".", "sum", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", ".", "expand", "(", "all_num", ",", "all_num", ")", "+", "torch", ".", "pow", "(", "feat", ",", "2", ")", ".", "sum", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", ".", "expand", "(", "all_num", ",", "all_num", ")", ".", "t", "(", ")", "\n", "distmat", ".", "addmm_", "(", "1", ",", "-", "2", ",", "feat", ",", "feat", ".", "t", "(", ")", ")", "\n", "# distmat=distmat.addmm(feat, feat.t(), beta=1, alpha=-2)", "\n", "\n", "original_dist", "=", "distmat", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "del", "feat", "\n", "if", "not", "local_distmat", "is", "None", ":", "\n", "            ", "original_dist", "=", "original_dist", "+", "local_distmat", "\n", "\n", "# cam_dist = np.load('./output/aicity20/0409-ensemble/ReCamID/feat_distmat.npy')", "\n", "# ori_dist = np.load('./output/aicity20/0409-ensemble/ReOriID/feat_distmat.npy')", "\n", "# import ipdb; ipdb.set_trace()", "\n", "", "", "if", "USE_VOC", ":", "\n", "        ", "original_dist", "=", "original_dist", "-", "0.1", "*", "ori_dist", "-", "0.1", "*", "cam_dist", "# - 0.04 * type_dist", "\n", "\n", "", "gallery_num", "=", "original_dist", ".", "shape", "[", "0", "]", "\n", "original_dist", "=", "np", ".", "transpose", "(", "original_dist", "/", "np", ".", "max", "(", "original_dist", ",", "axis", "=", "0", ")", ")", "\n", "V", "=", "np", ".", "zeros_like", "(", "original_dist", ")", ".", "astype", "(", "np", ".", "float16", ")", "\n", "initial_rank", "=", "np", ".", "argsort", "(", "original_dist", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "# import ipdb; ipdb.set_trace()", "\n", "print", "(", "'starting re_ranking'", ")", "\n", "for", "i", "in", "range", "(", "all_num", ")", ":", "\n", "# k-reciprocal neighbors", "\n", "        ", "forward_k_neigh_index", "=", "initial_rank", "[", "i", ",", ":", "k1", "+", "1", "]", "\n", "backward_k_neigh_index", "=", "initial_rank", "[", "forward_k_neigh_index", ",", ":", "k1", "+", "1", "]", "\n", "fi", "=", "np", ".", "where", "(", "backward_k_neigh_index", "==", "i", ")", "[", "0", "]", "\n", "k_reciprocal_index", "=", "forward_k_neigh_index", "[", "fi", "]", "\n", "k_reciprocal_expansion_index", "=", "k_reciprocal_index", "\n", "for", "j", "in", "range", "(", "len", "(", "k_reciprocal_index", ")", ")", ":", "\n", "            ", "candidate", "=", "k_reciprocal_index", "[", "j", "]", "\n", "candidate_forward_k_neigh_index", "=", "initial_rank", "[", "candidate", ",", ":", "int", "(", "np", ".", "around", "(", "k1", "/", "2", ")", ")", "+", "1", "]", "\n", "candidate_backward_k_neigh_index", "=", "initial_rank", "[", "candidate_forward_k_neigh_index", ",", "\n", ":", "int", "(", "np", ".", "around", "(", "k1", "/", "2", ")", ")", "+", "1", "]", "\n", "fi_candidate", "=", "np", ".", "where", "(", "candidate_backward_k_neigh_index", "==", "candidate", ")", "[", "0", "]", "\n", "candidate_k_reciprocal_index", "=", "candidate_forward_k_neigh_index", "[", "fi_candidate", "]", "\n", "if", "len", "(", "np", ".", "intersect1d", "(", "candidate_k_reciprocal_index", ",", "k_reciprocal_index", ")", ")", ">", "2", "/", "3", "*", "len", "(", "\n", "candidate_k_reciprocal_index", ")", ":", "\n", "                ", "k_reciprocal_expansion_index", "=", "np", ".", "append", "(", "k_reciprocal_expansion_index", ",", "candidate_k_reciprocal_index", ")", "\n", "\n", "", "", "k_reciprocal_expansion_index", "=", "np", ".", "unique", "(", "k_reciprocal_expansion_index", ")", "\n", "weight", "=", "np", ".", "exp", "(", "-", "original_dist", "[", "i", ",", "k_reciprocal_expansion_index", "]", ")", "\n", "V", "[", "i", ",", "k_reciprocal_expansion_index", "]", "=", "weight", "/", "np", ".", "sum", "(", "weight", ")", "\n", "", "original_dist", "=", "original_dist", "[", ":", "query_num", ",", "]", "\n", "if", "k2", "!=", "1", ":", "\n", "        ", "V_qe", "=", "np", ".", "zeros_like", "(", "V", ",", "dtype", "=", "np", ".", "float16", ")", "\n", "for", "i", "in", "range", "(", "all_num", ")", ":", "\n", "            ", "V_qe", "[", "i", ",", ":", "]", "=", "np", ".", "mean", "(", "V", "[", "initial_rank", "[", "i", ",", ":", "k2", "]", ",", ":", "]", ",", "axis", "=", "0", ")", "\n", "", "V", "=", "V_qe", "\n", "del", "V_qe", "\n", "", "del", "initial_rank", "\n", "invIndex", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "gallery_num", ")", ":", "\n", "        ", "invIndex", ".", "append", "(", "np", ".", "where", "(", "V", "[", ":", ",", "i", "]", "!=", "0", ")", "[", "0", "]", ")", "\n", "\n", "", "jaccard_dist", "=", "np", ".", "zeros_like", "(", "original_dist", ",", "dtype", "=", "np", ".", "float16", ")", "\n", "\n", "for", "i", "in", "range", "(", "query_num", ")", ":", "\n", "        ", "temp_min", "=", "np", ".", "zeros", "(", "shape", "=", "[", "1", ",", "gallery_num", "]", ",", "dtype", "=", "np", ".", "float16", ")", "\n", "indNonZero", "=", "np", ".", "where", "(", "V", "[", "i", ",", ":", "]", "!=", "0", ")", "[", "0", "]", "\n", "indImages", "=", "[", "invIndex", "[", "ind", "]", "for", "ind", "in", "indNonZero", "]", "\n", "for", "j", "in", "range", "(", "len", "(", "indNonZero", ")", ")", ":", "\n", "            ", "temp_min", "[", "0", ",", "indImages", "[", "j", "]", "]", "=", "temp_min", "[", "0", ",", "indImages", "[", "j", "]", "]", "+", "np", ".", "minimum", "(", "V", "[", "i", ",", "indNonZero", "[", "j", "]", "]", ",", "\n", "V", "[", "indImages", "[", "j", "]", ",", "indNonZero", "[", "j", "]", "]", ")", "\n", "", "jaccard_dist", "[", "i", "]", "=", "1", "-", "temp_min", "/", "(", "2", "-", "temp_min", ")", "\n", "\n", "", "final_dist", "=", "jaccard_dist", "*", "(", "1", "-", "lambda_value", ")", "+", "original_dist", "*", "lambda_value", "\n", "del", "original_dist", "\n", "del", "V", "\n", "del", "jaccard_dist", "\n", "final_dist", "=", "final_dist", "[", ":", "query_num", ",", "query_num", ":", "]", "\n", "return", "final_dist", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.utils.post_process.build_track_lookup": [[159, 165], ["enumerate"], "function", ["None"], ["", "def", "build_track_lookup", "(", "tracks", ")", ":", "\n", "    ", "lookup", "=", "{", "}", "# {img_name: track_id}", "\n", "for", "i", ",", "track", "in", "enumerate", "(", "tracks", ")", ":", "\n", "        ", "for", "img_name", "in", "track", ":", "\n", "            ", "lookup", "[", "img_name", "]", "=", "i", "\n", "", "", "return", "lookup", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.utils.post_process.track_aug": [[166, 198], ["print", "enumerate", "enumerate", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "len", "len", "os.path.basename", "feats[].clone", "post_process.comput_distmat", "torch.linear", "enumerate", "len", "range", "average_seq[].append", "len", "weights.t", "feats[].clone.t", "weights[].unsqueeze().expand_as", "len", "weights[].unsqueeze"], "function", ["home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.layers.triplet_loss.normalize", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.layers.triplet_loss.normalize", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.utils.post_process.comput_distmat"], ["", "def", "track_aug", "(", "feats", ",", "tracks", ",", "img_paths", ")", ":", "\n", "    ", "assert", "len", "(", "feats", ")", "==", "len", "(", "img_paths", ")", ",", "'len(feats) != len(img_paths)'", "\n", "lookup", "=", "{", "}", "# {image_name: track_id}", "\n", "print", "(", "\"track={}\"", ".", "format", "(", "len", "(", "tracks", ")", ")", ")", "\n", "img_names", "=", "[", "os", ".", "path", ".", "basename", "(", "img_path", ")", "for", "img_path", "in", "img_paths", "]", "\n", "for", "i", ",", "track", "in", "enumerate", "(", "tracks", ")", ":", "\n", "        ", "for", "img_name", "in", "track", ":", "\n", "            ", "lookup", "[", "img_name", "]", "=", "i", "\n", "\n", "", "", "average_seq", "=", "[", "[", "]", "for", "i", "in", "range", "(", "len", "(", "tracks", ")", ")", "]", "\n", "for", "idx", ",", "img_name", "in", "enumerate", "(", "img_names", ")", ":", "\n", "        ", "if", "img_name", "in", "lookup", ":", "\n", "            ", "average_seq", "[", "lookup", "[", "img_name", "]", "]", ".", "append", "(", "idx", ")", "\n", "\n", "", "", "for", "seq", "in", "average_seq", ":", "\n", "        ", "if", "len", "(", "seq", ")", "==", "0", ":", "continue", "\n", "# average", "\n", "# avg_feat = feats[seq, :].mean(dim=0)", "\n", "# #avg_feat, _ = feats[seq, :].max(dim=0)", "\n", "# feats[seq, :] = avg_feat", "\n", "\n", "# weighted average", "\n", "track_feats", "=", "feats", "[", "seq", ",", ":", "]", ".", "clone", "(", ")", "# N*DIM", "\n", "dist", ",", "indices", "=", "comput_distmat", "(", "track_feats", ",", "track_feats", ")", "# N*N", "\n", "weights", "=", "1", "/", "(", "dist", "+", "0.01", ")", "# N*N", "\n", "#weights = torch.exp(-dist) / torch.exp(-dist).sum()", "\n", "feats", "[", "seq", ",", ":", "]", "=", "F", ".", "linear", "(", "weights", ".", "t", "(", ")", ",", "track_feats", ".", "t", "(", ")", ")", "\n", "for", "i", ",", "idx", "in", "enumerate", "(", "seq", ")", ":", "\n", "            ", "weight", "=", "weights", "[", "i", "]", ".", "unsqueeze", "(", "dim", "=", "1", ")", ".", "expand_as", "(", "track_feats", ")", "\n", "feats", "[", "idx", ",", ":", "]", "=", "(", "weight", "*", "track_feats", ")", ".", "mean", "(", "dim", "=", "0", ")", "\n", "", "", "feats", "=", "torch", ".", "nn", ".", "functional", ".", "normalize", "(", "feats", ",", "dim", "=", "1", ",", "p", "=", "2", ")", "\n", "return", "feats", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.utils.post_process.rerank_indice_by_track": [[200, 230], ["post_process.build_track_lookup", "range", "os.path.basename", "len", "set", "track_indices.append", "enumerate", "set.add", "track_indice.append", "len", "idxs.append", "len"], "function", ["home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.utils.post_process.build_track_lookup"], ["", "def", "rerank_indice_by_track", "(", "indices", ",", "img_paths", ",", "tracks", ")", ":", "\n", "    ", "img_names", "=", "[", "os", ".", "path", ".", "basename", "(", "img_path", ")", "for", "img_path", "in", "img_paths", "]", "\n", "assert", "indices", ".", "shape", "[", "1", "]", "==", "len", "(", "img_names", ")", ",", "'wrong'", "\n", "name_to_trackid", "=", "build_track_lookup", "(", "tracks", ")", "# {img_name: track_id}", "\n", "name_to_idx", "=", "{", "img_name", ":", "i", "for", "i", ",", "img_name", "in", "enumerate", "(", "img_names", ")", "}", "\n", "\n", "track_indices", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "indices", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "used_track", "=", "set", "(", ")", "\n", "indice", "=", "indices", "[", "i", "]", "\n", "track_indice", "=", "[", "]", "\n", "for", "idx", "in", "indice", ":", "\n", "            ", "img_name", "=", "img_names", "[", "idx", "]", "\n", "track_id", "=", "name_to_trackid", "[", "img_name", "]", "\n", "if", "track_id", "in", "used_track", ":", "continue", "\n", "used_track", ".", "add", "(", "track_id", ")", "\n", "track_indice", ".", "append", "(", "track_id", ")", "\n", "", "track_indices", ".", "append", "(", "track_indice", ")", "\n", "# rewrite indices by track", "\n", "count", "=", "0", "\n", "for", "track_id", "in", "track_indice", ":", "\n", "            ", "names", "=", "tracks", "[", "track_id", "]", "\n", "idxs", "=", "[", "]", "\n", "for", "name", "in", "names", ":", "\n", "                ", "if", "name", "not", "in", "name_to_idx", ":", "continue", "\n", "idxs", ".", "append", "(", "name_to_idx", "[", "name", "]", ")", "\n", "#idxs = [name_to_idx[name] for name in names]", "\n", "", "indices", "[", "i", "]", "[", "count", ":", "count", "+", "len", "(", "idxs", ")", "]", "=", "idxs", "\n", "count", "+=", "len", "(", "idxs", ")", "\n", "", "", "return", "indices", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.utils.post_process.pca_whiten": [[232, 238], ["sklearn.decomposition.PCA", "sklearn.decomposition.PCA.fit_transform", "sklearn.decomposition.PCA.transform", "qf.cpu().numpy", "gf.cpu().numpy", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "qf.cpu", "gf.cpu"], "function", ["None"], ["", "def", "pca_whiten", "(", "qf", ",", "gf", ",", "dim", "=", "256", ")", ":", "\n", "    ", "qf", ",", "gf", "=", "qf", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "gf", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "pca", "=", "PCA", "(", "n_components", "=", "dim", ",", "whiten", "=", "False", ")", "\n", "gf_new", "=", "pca", ".", "fit_transform", "(", "gf", ")", "\n", "qf_new", "=", "pca", ".", "transform", "(", "qf", ")", "\n", "return", "torch", ".", "tensor", "(", "qf_new", ",", "device", "=", "'cuda'", ")", ",", "torch", ".", "tensor", "(", "gf_new", ",", "device", "=", "'cuda'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.utils.post_process.encode_gf2tf": [[240, 254], ["post_process.build_track_lookup", "torch.zeros", "torch.zeros", "enumerate", "os.path.basename", "len", "gf[].mean", "enumerate", "len", "gf.size", "idxs.append"], "function", ["home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.utils.post_process.build_track_lookup"], ["", "def", "encode_gf2tf", "(", "gf", ",", "img_paths", ",", "tracks", ")", ":", "\n", "    ", "img_names", "=", "[", "os", ".", "path", ".", "basename", "(", "img_path", ")", "for", "img_path", "in", "img_paths", "]", "\n", "assert", "gf", ".", "shape", "[", "0", "]", "==", "len", "(", "img_names", ")", ",", "'wrong'", "\n", "name_to_trackid", "=", "build_track_lookup", "(", "tracks", ")", "# {img_name: track_id}", "\n", "name_to_idx", "=", "{", "img_name", ":", "i", "for", "i", ",", "img_name", "in", "enumerate", "(", "img_names", ")", "}", "\n", "\n", "tf", "=", "torch", ".", "zeros", "(", "(", "len", "(", "tracks", ")", ",", "gf", ".", "size", "(", "1", ")", ")", ",", "device", "=", "gf", ".", "device", ")", "\n", "for", "i", ",", "track", "in", "enumerate", "(", "tracks", ")", ":", "\n", "        ", "idxs", "=", "[", "]", "\n", "for", "name", "in", "track", ":", "\n", "            ", "if", "name", "not", "in", "name_to_idx", ":", "continue", "\n", "idxs", ".", "append", "(", "name_to_idx", "[", "name", "]", ")", "\n", "", "tf", "[", "i", ",", ":", "]", ",", "_", "=", "gf", "[", "idxs", ",", ":", "]", ".", "mean", "(", "dim", "=", "0", ")", "\n", "", "return", "tf", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.utils.post_process.decode_tf2gf": [[255, 269], ["post_process.build_track_lookup", "torch.rand", "torch.rand", "range", "os.path.basename", "len", "len", "enumerate", "len", "tf.size", "idxs.append"], "function", ["home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.utils.post_process.build_track_lookup"], ["", "def", "decode_tf2gf", "(", "tf", ",", "img_paths", ",", "tracks", ")", ":", "\n", "    ", "img_names", "=", "[", "os", ".", "path", ".", "basename", "(", "img_path", ")", "for", "img_path", "in", "img_paths", "]", "\n", "assert", "tf", ".", "shape", "[", "0", "]", "==", "len", "(", "tracks", ")", ",", "'wrong'", "\n", "name_to_trackid", "=", "build_track_lookup", "(", "tracks", ")", "# {img_name: track_id}", "\n", "name_to_idx", "=", "{", "img_name", ":", "i", "for", "i", ",", "img_name", "in", "enumerate", "(", "img_names", ")", "}", "\n", "\n", "gf", "=", "torch", ".", "rand", "(", "(", "len", "(", "img_paths", ")", ",", "tf", ".", "size", "(", "1", ")", ")", ",", "device", "=", "tf", ".", "device", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "tf", ")", ")", ":", "\n", "        ", "idxs", "=", "[", "]", "\n", "for", "name", "in", "tracks", "[", "i", "]", ":", "\n", "            ", "if", "name", "not", "in", "name_to_idx", ":", "continue", "\n", "idxs", ".", "append", "(", "name_to_idx", "[", "name", "]", ")", "\n", "", "gf", "[", "idxs", ",", ":", "]", "=", "tf", "[", "i", ",", ":", "]", "\n", "", "return", "gf", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.utils.post_process.decode_trackIndice": [[271, 289], ["post_process.build_track_lookup", "numpy.zeros", "range", "np.zeros.astype", "len", "os.path.basename", "enumerate", "len", "len", "idxs.append", "len"], "function", ["home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.utils.post_process.build_track_lookup"], ["", "def", "decode_trackIndice", "(", "trackIndice", ",", "img_paths", ",", "tracks", ")", ":", "\n", "    ", "assert", "trackIndice", ".", "shape", "[", "1", "]", "==", "len", "(", "tracks", ")", ",", "'wrong'", "\n", "img_names", "=", "[", "os", ".", "path", ".", "basename", "(", "img_path", ")", "for", "img_path", "in", "img_paths", "]", "\n", "name_to_trackid", "=", "build_track_lookup", "(", "tracks", ")", "# {img_name: track_id}", "\n", "name_to_idx", "=", "{", "img_name", ":", "i", "for", "i", ",", "img_name", "in", "enumerate", "(", "img_names", ")", "}", "\n", "indices", "=", "np", ".", "zeros", "(", "(", "trackIndice", ".", "shape", "[", "0", "]", ",", "len", "(", "img_paths", ")", ")", ")", "\n", "for", "i", "in", "range", "(", "trackIndice", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "track_indice", "=", "trackIndice", "[", "i", "]", "\n", "count", "=", "0", "\n", "for", "track_id", "in", "track_indice", ":", "\n", "            ", "names", "=", "tracks", "[", "track_id", "]", "\n", "idxs", "=", "[", "]", "\n", "for", "name", "in", "names", ":", "\n", "                ", "if", "name", "not", "in", "name_to_idx", ":", "continue", "\n", "idxs", ".", "append", "(", "name_to_idx", "[", "name", "]", ")", "\n", "", "indices", "[", "i", ",", "count", ":", "count", "+", "len", "(", "idxs", ")", "]", "=", "idxs", "\n", "count", "+=", "len", "(", "idxs", ")", "\n", "", "", "return", "indices", ".", "astype", "(", "np", ".", "int", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.utils.post_process.orientation_penalize": [[291, 309], ["torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "post_process.comput_distmat", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "print", "print", "os.path.basename", "float", "float", "torch.tensor.unsqueeze", "torch.tensor.unsqueeze"], "function", ["home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.utils.post_process.comput_distmat", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.layers.triplet_loss.normalize", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.layers.triplet_loss.normalize"], ["", "def", "orientation_penalize", "(", "distmat", ",", "img_paths", ",", "dataset", ",", "weight", "=", "0.1", ")", ":", "\n", "    ", "m", ",", "n", "=", "distmat", ".", "shape", "\n", "img_names", "=", "[", "os", ".", "path", ".", "basename", "(", "img_path", ")", "for", "img_path", "in", "img_paths", "]", "\n", "query_names", "=", "img_names", "[", ":", "m", "]", "\n", "gallery_names", "=", "img_names", "[", "m", ":", "]", "\n", "\n", "query_oris", "=", "[", "float", "(", "dataset", ".", "query_orientation", "[", "name", "]", ")", "for", "name", "in", "query_names", "]", "\n", "gallery_oris", "=", "[", "float", "(", "dataset", ".", "gallery_orientation", "[", "name", "]", ")", "for", "name", "in", "gallery_names", "]", "\n", "\n", "query_oris", "=", "torch", ".", "tensor", "(", "query_oris", ",", "device", "=", "'cuda'", ")", "\n", "gallery_oris", "=", "torch", ".", "tensor", "(", "gallery_oris", ",", "device", "=", "'cuda'", ")", "\n", "\n", "oris_dist", ",", "_", "=", "comput_distmat", "(", "query_oris", ".", "unsqueeze", "(", "dim", "=", "1", ")", ",", "gallery_oris", ".", "unsqueeze", "(", "dim", "=", "1", ")", ")", "\n", "oris_dist", "=", "torch", ".", "nn", ".", "functional", ".", "normalize", "(", "oris_dist", ",", "dim", "=", "1", ",", "p", "=", "2", ")", "\n", "print", "(", "distmat", "[", ":", "10", ",", ":", "10", "]", ")", "\n", "print", "(", "oris_dist", "[", ":", "10", ",", ":", "10", "]", ")", "\n", "distmat", "+=", "weight", "*", "(", "(", "360", "-", "oris_dist", ")", "/", "360", ")", "\n", "return", "distmat", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.utils.post_process.write_results": [[310, 322], ["print", "os.path.basename", "os.path.exists", "os.makedirs", "open", "range", "os.path.join", "f.write", "gallery_names[].split", "range", "map"], "function", ["None"], ["", "def", "write_results", "(", "indices", ",", "out_dir", ",", "gallery_paths", ",", "topk", "=", "100", ")", ":", "\n", "    ", "gallery_names", "=", "[", "os", ".", "path", ".", "basename", "(", "path", ")", "for", "path", "in", "gallery_paths", "]", "\n", "indices", "=", "indices", "[", ":", ",", ":", "topk", "]", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "out_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "out_dir", ")", "\n", "", "m", ",", "n", "=", "indices", ".", "shape", "\n", "print", "(", "'m: {}  n: {}'", ".", "format", "(", "m", ",", "n", ")", ")", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "out_dir", ",", "'result.txt'", ")", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "for", "i", "in", "range", "(", "m", ")", ":", "\n", "            ", "write_line", "=", "[", "gallery_names", "[", "indices", "[", "i", ",", "j", "]", "]", ".", "split", "(", "'.'", ")", "[", "0", "]", "for", "j", "in", "range", "(", "n", ")", "]", "\n", "write_line", "=", "' '", ".", "join", "(", "map", "(", "str", ",", "write_line", ")", ")", "+", "'\\n'", "\n", "f", ".", "write", "(", "write_line", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.utils.post_process.generate_track_idxs": [[324, 334], ["track_idxs.append", "enumerate", "idxs.append"], "function", ["None"], ["", "", "", "def", "generate_track_idxs", "(", "gallery_names", ",", "tracks", ")", ":", "\n", "    ", "track_idxs", "=", "[", "]", "\n", "img_to_idx", "=", "{", "name", ":", "i", "for", "i", ",", "name", "in", "enumerate", "(", "gallery_names", ")", "}", "\n", "for", "track", "in", "tracks", ":", "\n", "        ", "idxs", "=", "[", "]", "\n", "for", "name", "in", "track", ":", "\n", "            ", "if", "name", "not", "in", "img_to_idx", ":", "continue", "\n", "idxs", ".", "append", "(", "img_to_idx", "[", "name", "]", ")", "\n", "", "track_idxs", ".", "append", "(", "idxs", ")", "\n", "", "return", "track_idxs", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.utils.post_process.generate_track_distmat": [[335, 342], ["enumerate", "numpy.hstack", "np.hstack.append", "distmat[].min"], "function", ["None"], ["", "def", "generate_track_distmat", "(", "distmat", ",", "track_idxs", ")", ":", "\n", "\n", "    ", "track_distmat", "=", "[", "]", "\n", "for", "i", ",", "track_idx", "in", "enumerate", "(", "track_idxs", ")", ":", "\n", "        ", "track_distmat", ".", "append", "(", "distmat", "[", ":", ",", "track_idx", "]", ".", "min", "(", "1", ")", "[", ":", ",", "np", ".", "newaxis", "]", ")", "\n", "", "track_distmat", "=", "np", ".", "hstack", "(", "track_distmat", ")", "\n", "return", "track_distmat", "\n", "", ""]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.utils.logger.setup_logger": [[12, 31], ["logging.getLogger", "logging.getLogger.setLevel", "logging.StreamHandler", "logging.StreamHandler.setLevel", "logging.Formatter", "logging.StreamHandler.setFormatter", "logging.getLogger.addHandler", "logging.FileHandler", "logging.FileHandler.setLevel", "logging.FileHandler.setFormatter", "logging.getLogger.addHandler", "os.path.join"], "function", ["None"], ["def", "setup_logger", "(", "name", ",", "save_dir", ",", "distributed_rank", ")", ":", "\n", "    ", "logger", "=", "logging", ".", "getLogger", "(", "name", ")", "\n", "logger", ".", "setLevel", "(", "logging", ".", "DEBUG", ")", "\n", "# don't log results for the non-master process", "\n", "if", "distributed_rank", ">", "0", ":", "\n", "        ", "return", "logger", "\n", "", "ch", "=", "logging", ".", "StreamHandler", "(", "stream", "=", "sys", ".", "stdout", ")", "\n", "ch", ".", "setLevel", "(", "logging", ".", "DEBUG", ")", "\n", "formatter", "=", "logging", ".", "Formatter", "(", "\"%(asctime)s %(name)s %(levelname)s: %(message)s\"", ")", "\n", "ch", ".", "setFormatter", "(", "formatter", ")", "\n", "logger", ".", "addHandler", "(", "ch", ")", "\n", "\n", "if", "save_dir", ":", "\n", "        ", "fh", "=", "logging", ".", "FileHandler", "(", "os", ".", "path", ".", "join", "(", "save_dir", ",", "\"log.txt\"", ")", ",", "mode", "=", "'w'", ")", "\n", "fh", ".", "setLevel", "(", "logging", ".", "DEBUG", ")", "\n", "fh", ".", "setFormatter", "(", "formatter", ")", "\n", "logger", ".", "addHandler", "(", "fh", ")", "\n", "\n", "", "return", "logger", "\n", "", ""]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.utils.reid_eval.evaluator.__init__": [[75, 92], ["object.__init__"], "methods", ["home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.solver.ranger.Ranger.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_query", ",", "dataset", ",", "cfg", ",", "max_rank", "=", "50", ")", ":", "\n", "        ", "super", "(", "evaluator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_query", "=", "num_query", "\n", "self", ".", "max_rank", "=", "max_rank", "\n", "self", ".", "feat_norm", "=", "cfg", ".", "TEST", ".", "FEAT_NORM", "\n", "self", ".", "query_expansion", "=", "cfg", ".", "TEST", ".", "QUERY_EXPANSION", "\n", "self", ".", "query_expansion_topk", "=", "6", "\n", "self", ".", "do_DBA", "=", "cfg", ".", "TEST", ".", "DO_DBA", "\n", "self", ".", "dataset", "=", "dataset", "\n", "self", ".", "do_rerank", "=", "cfg", ".", "TEST", ".", "DO_RERANK", "\n", "self", ".", "rerank_param", "=", "cfg", ".", "TEST", ".", "RERANK_PARAM", "\n", "self", ".", "cfg", "=", "cfg", "\n", "\n", "self", ".", "feats", "=", "[", "]", "\n", "self", ".", "pids", "=", "[", "]", "\n", "self", ".", "camids", "=", "[", "]", "\n", "self", ".", "img_paths", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.utils.reid_eval.evaluator.update": [[93, 99], ["reid_eval.evaluator.feats.append", "reid_eval.evaluator.pids.extend", "reid_eval.evaluator.camids.extend", "reid_eval.evaluator.img_paths.extend", "numpy.asarray", "numpy.asarray"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "output", ")", ":", "\n", "        ", "feat", ",", "pid", ",", "camid", ",", "img_path", "=", "output", "\n", "self", ".", "feats", ".", "append", "(", "feat", ")", "\n", "self", ".", "pids", ".", "extend", "(", "np", ".", "asarray", "(", "pid", ")", ")", "\n", "self", ".", "camids", ".", "extend", "(", "np", ".", "asarray", "(", "camid", ")", ")", "\n", "self", ".", "img_paths", ".", "extend", "(", "img_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.utils.reid_eval.evaluator.compute": [[100, 169], ["torch.cat", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.argsort", "reid_eval.eval_func", "print", "torch.nn.functional.normalize", "post_process.database_aug", "os.path.basename", "os.path.basename", "os.path.basename", "os.path.basename", "post_process.average_query_expansion", "post_process.track_aug", "print", "numpy.load", "numpy.load", "post_process.re_ranking", "post_process.comput_distmat", "distmat.cpu().numpy", "post_process.rerank_indice_by_track", "numpy.save", "numpy.save", "post_process.write_results", "len", "post_process.database_aug.cpu().numpy", "os.path.dirname", "os.path.dirname", "os.path.dirname", "os.path.dirname", "distmat.cpu", "os.path.dirname", "os.path.dirname", "os.path.dirname", "os.path.dirname", "os.path.dirname", "os.path.dirname", "os.path.dirname", "os.path.dirname", "post_process.database_aug.cpu"], "methods", ["home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.utils.reid_eval.eval_func", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.layers.triplet_loss.normalize", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.utils.post_process.database_aug", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.utils.post_process.average_query_expansion", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.utils.post_process.track_aug", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.utils.post_process.re_ranking", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.utils.post_process.comput_distmat", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.utils.post_process.rerank_indice_by_track", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.utils.post_process.write_results"], ["", "def", "compute", "(", "self", ")", ":", "\n", "        ", "feats", "=", "torch", ".", "cat", "(", "self", ".", "feats", ",", "dim", "=", "0", ")", "\n", "if", "self", ".", "feat_norm", "==", "'yes'", ":", "\n", "            ", "print", "(", "\"The test feature is normalized\"", ")", "\n", "feats", "=", "torch", ".", "nn", ".", "functional", ".", "normalize", "(", "feats", ",", "dim", "=", "1", ",", "p", "=", "2", ")", "\n", "\n", "", "if", "self", ".", "do_DBA", ":", "\n", "            ", "feats", "=", "database_aug", "(", "feats", ",", "top_k", "=", "6", ")", "\n", "# query", "\n", "", "qf", "=", "feats", "[", ":", "self", ".", "num_query", "]", "\n", "q_pids", "=", "np", ".", "asarray", "(", "self", ".", "pids", "[", ":", "self", ".", "num_query", "]", ")", "\n", "q_camids", "=", "np", ".", "asarray", "(", "self", ".", "camids", "[", ":", "self", ".", "num_query", "]", ")", "\n", "# gallery", "\n", "gf", "=", "feats", "[", "self", ".", "num_query", ":", "]", "\n", "g_pids", "=", "np", ".", "asarray", "(", "self", ".", "pids", "[", "self", ".", "num_query", ":", "]", ")", "\n", "g_camids", "=", "np", ".", "asarray", "(", "self", ".", "camids", "[", "self", ".", "num_query", ":", "]", ")", "\n", "g_names", "=", "[", "os", ".", "path", ".", "basename", "(", "img_path", ")", "for", "img_path", "in", "self", ".", "img_paths", "[", "self", ".", "num_query", ":", "]", "]", "\n", "\n", "if", "self", ".", "query_expansion", ":", "\n", "            ", "qf", "=", "average_query_expansion", "(", "qf", ",", "feats", ",", "top_k", "=", "6", ")", "\n", "\n", "", "if", "self", ".", "cfg", ".", "TEST", ".", "TRACK_AUG", ":", "\n", "            ", "gf", "=", "track_aug", "(", "gf", ",", "self", ".", "dataset", ".", "test_tracks", ",", "self", ".", "img_paths", "[", "self", ".", "num_query", ":", "]", ")", "\n", "\n", "#qf, gf = pca_whiten(qf, gf)", "\n", "", "if", "self", ".", "cfg", ".", "TEST", ".", "USE_VOC", ":", "\n", "            ", "print", "(", "'using VOC-ReID'", ")", "\n", "cam_dist", "=", "np", ".", "load", "(", "self", ".", "cfg", ".", "TEST", ".", "CAM_DIST_PATH", ")", "\n", "ori_dist", "=", "np", ".", "load", "(", "self", ".", "cfg", ".", "TEST", ".", "ORI_DIST_PATH", ")", "\n", "", "else", ":", "\n", "            ", "cam_dist", "=", "None", "\n", "ori_dist", "=", "None", "\n", "\n", "", "if", "self", ".", "do_rerank", ":", "\n", "            ", "distmat_np", "=", "re_ranking", "(", "qf", ",", "gf", ",", "\n", "k1", "=", "self", ".", "rerank_param", "[", "0", "]", ",", "\n", "k2", "=", "self", ".", "rerank_param", "[", "1", "]", ",", "\n", "lambda_value", "=", "self", ".", "rerank_param", "[", "2", "]", ",", "USE_VOC", "=", "self", ".", "cfg", ".", "TEST", ".", "USE_VOC", ",", "cam_dist", "=", "cam_dist", ",", "ori_dist", "=", "ori_dist", ")", "\n", "", "else", ":", "\n", "            ", "distmat", ",", "indices", "=", "comput_distmat", "(", "qf", ",", "gf", ")", "\n", "distmat_np", "=", "distmat", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "# track_idxs = generate_track_idxs(g_names, self.dataset.test_tracks)", "\n", "# distmat_track_np = generate_track_distmat(distmat_np, track_idxs)", "\n", "# np.save(os.path.dirname(self.cfg.TEST.WEIGHT) + '/distmat_track',", "\n", "#         distmat_track_np)", "\n", "\n", "# cam_distmat = np.load('./output/aicity20/experiments/ReCamID/distmat.npy')", "\n", "# ori_distmat = np.load('./output/aicity20/experiments/ReOriID/distmat.npy')", "\n", "#cam_distmat = np.load('./output/aicity20/0410-test/ReCamID/distmat.npy')", "\n", "#ori_distmat = np.load('./output/aicity20/0410-test/ReOriID/distmat.npy')", "\n", "\n", "# cam_distmat = np.load('./output/veri/0411-search/ReCamID/distmat.npy')", "\n", "#ori_distmat = np.load('./output/veri/ReOriID/distmat.npy')", "\n", "#distmat_np = distmat_np - 0.1 * ori_distmat# - 0.1 * cam_distmat", "\n", "\n", "", "indices_np", "=", "np", ".", "argsort", "(", "distmat_np", ",", "axis", "=", "1", ")", "\n", "if", "self", ".", "cfg", ".", "TEST", ".", "TRACK_RERANK", "and", "len", "(", "self", ".", "dataset", ".", "test_tracks", ")", ">", "0", ":", "\n", "            ", "rerank_indice_by_track", "(", "indices_np", ",", "self", ".", "img_paths", "[", "self", ".", "num_query", ":", "]", ",", "self", ".", "dataset", ".", "test_tracks", ")", "\n", "\n", "", "cmc", ",", "mAP", "=", "eval_func", "(", "indices_np", ",", "q_pids", ",", "g_pids", ",", "q_camids", ",", "g_camids", ")", "\n", "if", "self", ".", "cfg", ".", "TEST", ".", "WRITE_RESULT", ":", "\n", "            ", "np", ".", "save", "(", "os", ".", "path", ".", "dirname", "(", "self", ".", "cfg", ".", "TEST", ".", "WEIGHT", ")", "+", "'/distmat'", ",", "\n", "distmat_np", ")", "\n", "np", ".", "save", "(", "os", ".", "path", ".", "dirname", "(", "self", ".", "cfg", ".", "TEST", ".", "WEIGHT", ")", "+", "'/feats'", ",", "feats", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "write_results", "(", "indices_np", ",", "os", ".", "path", ".", "dirname", "(", "self", ".", "cfg", ".", "TEST", ".", "WEIGHT", ")", ",", "\n", "self", ".", "img_paths", "[", "self", ".", "num_query", ":", "]", ")", "\n", "\n", "", "return", "cmc", ",", "mAP", ",", "indices_np", "", "", "", ""]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.utils.reid_eval.eval_func": [[15, 72], ["len", "range", "numpy.asarray().astype", "numpy.mean", "print", "set", "numpy.invert", "orig_cmc.cumsum", "np.asarray().astype.append", "orig_cmc.sum", "orig_cmc.cumsum", "all_AP.append", "np.asarray().astype.sum", "numpy.any", "numpy.array", "numpy.asarray", "orig_cmc.cumsum.sum", "numpy.asarray", "numpy.arange", "len"], "function", ["None"], ["def", "eval_func", "(", "indices", ",", "q_pids", ",", "g_pids", ",", "q_camids", ",", "g_camids", ",", "max_rank", "=", "50", ")", ":", "\n", "    ", "\"\"\"Evaluation with market1501 metric\n        Key: for each query identity, its gallery images from the same camera view are discarded.\n        \"\"\"", "\n", "num_q", ",", "num_g", "=", "indices", ".", "shape", "\n", "if", "num_g", "<", "max_rank", ":", "\n", "        ", "max_rank", "=", "num_g", "\n", "print", "(", "\"Note: number of gallery samples is quite small, got {}\"", ".", "format", "(", "num_g", ")", ")", "\n", "", "matches", "=", "(", "g_pids", "[", "indices", "]", "==", "q_pids", "[", ":", ",", "np", ".", "newaxis", "]", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "\n", "# compute cmc curve for each query", "\n", "all_cmc", "=", "[", "]", "\n", "all_AP", "=", "[", "]", "\n", "total_camids", "=", "len", "(", "set", "(", "g_camids", ")", ")", "\n", "num_valid_q", "=", "0.", "# number of valid query", "\n", "for", "q_idx", "in", "range", "(", "num_q", ")", ":", "\n", "# get query pid and camid", "\n", "        ", "q_pid", "=", "q_pids", "[", "q_idx", "]", "\n", "q_camid", "=", "q_camids", "[", "q_idx", "]", "\n", "\n", "# remove gallery samples that have the same pid and camid with query", "\n", "order", "=", "indices", "[", "q_idx", "]", "\n", "if", "total_camids", "==", "1", ":", "# for NAIC", "\n", "            ", "remove", "=", "(", "g_pids", "[", "order", "]", "==", "q_pid", ")", "&", "(", "g_camids", "[", "order", "]", "!=", "q_camid", ")", "\n", "", "else", ":", "# for others like market1501", "\n", "            ", "remove", "=", "(", "g_pids", "[", "order", "]", "==", "q_pid", ")", "&", "(", "g_camids", "[", "order", "]", "==", "q_camid", ")", "\n", "", "keep", "=", "np", ".", "invert", "(", "remove", ")", "\n", "\n", "# compute cmc curve", "\n", "# binary vector, positions with value 1 are correct matches", "\n", "orig_cmc", "=", "matches", "[", "q_idx", "]", "[", "keep", "]", "\n", "if", "not", "np", ".", "any", "(", "orig_cmc", ")", ":", "\n", "# this condition is true when query identity does not appear in gallery", "\n", "            ", "continue", "\n", "\n", "", "cmc", "=", "orig_cmc", ".", "cumsum", "(", ")", "\n", "cmc", "[", "cmc", ">", "1", "]", "=", "1", "\n", "\n", "all_cmc", ".", "append", "(", "cmc", "[", ":", "max_rank", "]", ")", "\n", "num_valid_q", "+=", "1.", "\n", "\n", "# compute average precision", "\n", "# reference: https://en.wikipedia.org/wiki/Evaluation_measures_(information_retrieval)#Average_precision", "\n", "num_rel", "=", "orig_cmc", ".", "sum", "(", ")", "\n", "tmp_cmc", "=", "orig_cmc", ".", "cumsum", "(", ")", "\n", "tmp_cmc", "=", "np", ".", "array", "(", "tmp_cmc", ")", "/", "(", "np", ".", "arange", "(", "len", "(", "tmp_cmc", ")", ")", "+", "1.", ")", "\n", "tmp_cmc", "=", "np", ".", "asarray", "(", "tmp_cmc", ")", "*", "orig_cmc", "\n", "AP", "=", "tmp_cmc", ".", "sum", "(", ")", "/", "num_rel", "\n", "all_AP", ".", "append", "(", "AP", ")", "\n", "\n", "", "assert", "num_valid_q", ">", "0", ",", "\"Error: all query identities do not appear in gallery\"", "\n", "\n", "all_cmc", "=", "np", ".", "asarray", "(", "all_cmc", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "all_cmc", "=", "all_cmc", ".", "sum", "(", "0", ")", "/", "num_valid_q", "\n", "mAP", "=", "np", ".", "mean", "(", "all_AP", ")", "\n", "\n", "return", "all_cmc", ",", "mAP", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.utils.vis.concat_vis": [[5, 12], ["len", "numpy.zeros", "enumerate", "cv2.resize"], "function", ["None"], ["def", "concat_vis", "(", "imgs", ",", "size", "=", "[", "256", ",", "128", "]", ")", ":", "\n", "    ", "n", "=", "len", "(", "imgs", ")", "\n", "canvas", "=", "np", ".", "zeros", "(", "(", "size", "[", "0", "]", ",", "n", "*", "size", "[", "1", "]", ",", "3", ")", ")", "#(h*w*c)", "\n", "for", "i", ",", "img", "in", "enumerate", "(", "imgs", ")", ":", "\n", "        ", "img", "=", "cv2", ".", "resize", "(", "img", ",", "(", "size", "[", "1", "]", ",", "size", "[", "0", "]", ")", ")", "# (w*h)", "\n", "canvas", "[", ":", ",", "i", "*", "size", "[", "1", "]", ":", "(", "i", "+", "1", ")", "*", "size", "[", "1", "]", ",", ":", "]", "=", "img", "\n", "", "return", "canvas", "", "", ""]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.modeling.multiheads_baseline.FC.__init__": [[67, 72], ["torch.nn.Module.__init__", "torch.nn.Linear", "torch.nn.BatchNorm1d", "torch.nn.PReLU"], "methods", ["home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.solver.ranger.Ranger.__init__"], ["    ", "def", "__init__", "(", "self", ",", "inplanes", ",", "outplanes", ")", ":", "\n", "        ", "super", "(", "FC", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "inplanes", ",", "outplanes", ")", "\n", "self", ".", "bn", "=", "nn", ".", "BatchNorm1d", "(", "outplanes", ")", "\n", "self", ".", "act", "=", "nn", ".", "PReLU", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.modeling.multiheads_baseline.FC.forward": [[73, 76], ["multiheads_baseline.FC.fc", "multiheads_baseline.FC.act"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "return", "self", ".", "act", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.modeling.multiheads_baseline.GDN.__init__": [[79, 84], ["torch.nn.Module.__init__", "multiheads_baseline.FC", "multiheads_baseline.FC", "torch.nn.Softmax"], "methods", ["home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.solver.ranger.Ranger.__init__"], ["    ", "def", "__init__", "(", "self", ",", "inplanes", ",", "outplanes", ",", "intermediate_dim", "=", "256", ")", ":", "\n", "        ", "super", "(", "GDN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "fc1", "=", "FC", "(", "inplanes", ",", "intermediate_dim", ")", "\n", "self", ".", "fc2", "=", "FC", "(", "intermediate_dim", ",", "outplanes", ")", "\n", "self", ".", "softmax", "=", "nn", ".", "Softmax", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.modeling.multiheads_baseline.GDN.forward": [[85, 90], ["multiheads_baseline.GDN.fc1", "multiheads_baseline.GDN.fc2", "torch.softmax"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "intermediate", "=", "self", ".", "fc1", "(", "x", ")", "\n", "out", "=", "self", ".", "fc2", "(", "intermediate", ")", "\n", "# return intermediate, self.softmax(out)", "\n", "return", "intermediate", ",", "torch", ".", "softmax", "(", "out", ",", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.modeling.multiheads_baseline.MultiHeads.__init__": [[93, 102], ["torch.nn.Module.__init__", "multiheads_baseline.FC", "multiheads_baseline.GDN", "torch.nn.ModuleList", "multiheads_baseline.FC", "range"], "methods", ["home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.solver.ranger.Ranger.__init__"], ["    ", "def", "__init__", "(", "self", ",", "feature_dim", "=", "256", ",", "groups", "=", "4", ",", "mode", "=", "'S'", ",", "backbone_fc_dim", "=", "1024", ")", ":", "\n", "        ", "super", "(", "MultiHeads", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "mode", "=", "mode", "\n", "self", ".", "groups", "=", "groups", "\n", "# self.Backbone = backbone[resnet]", "\n", "self", ".", "instance_fc", "=", "FC", "(", "backbone_fc_dim", ",", "feature_dim", ")", "\n", "self", ".", "GDN", "=", "GDN", "(", "feature_dim", ",", "groups", ")", "\n", "self", ".", "group_fc", "=", "nn", ".", "ModuleList", "(", "[", "FC", "(", "backbone_fc_dim", ",", "feature_dim", ")", "for", "i", "in", "range", "(", "groups", ")", "]", ")", "\n", "self", ".", "feature_dim", "=", "feature_dim", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.modeling.multiheads_baseline.MultiHeads.forward": [[103, 131], ["multiheads_baseline.MultiHeads.instance_fc", "multiheads_baseline.MultiHeads.GDN", "group_label_p.mean", "list", "Gk", "torch.argmax", "range", "torch.stack().sum", "group_prob[].unsqueeze().expand", "list.append", "torch.mul", "torch.stack", "group_label_p.mean.unsqueeze().expand", "group_prob[].unsqueeze", "group_label_p.mean.unsqueeze"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "B", "=", "x", ".", "shape", "[", "0", "]", "\n", "# x = self.Backbone(x)  # (B,4096)", "\n", "instacne_representation", "=", "self", ".", "instance_fc", "(", "x", ")", "\n", "\n", "# GDN", "\n", "group_inter", ",", "group_prob", "=", "self", ".", "GDN", "(", "instacne_representation", ")", "\n", "# print(group_prob)", "\n", "# group aware repr", "\n", "v_G", "=", "[", "Gk", "(", "x", ")", "for", "Gk", "in", "self", ".", "group_fc", "]", "# (B,512)", "\n", "\n", "# self distributed labeling", "\n", "group_label_p", "=", "group_prob", ".", "data", "\n", "group_label_E", "=", "group_label_p", ".", "mean", "(", "dim", "=", "0", ")", "\n", "group_label_u", "=", "(", "group_label_p", "-", "group_label_E", ".", "unsqueeze", "(", "dim", "=", "-", "1", ")", ".", "expand", "(", "self", ".", "groups", ",", "B", ")", ".", "T", ")", "/", "self", ".", "groups", "+", "(", "\n", "1", "/", "self", ".", "groups", ")", "\n", "group_label", "=", "torch", ".", "argmax", "(", "group_label_u", ",", "dim", "=", "1", ")", ".", "data", "\n", "\n", "# group ensemble", "\n", "group_mul_p_vk", "=", "list", "(", ")", "\n", "if", "self", ".", "mode", "==", "'S'", ":", "\n", "            ", "for", "k", "in", "range", "(", "self", ".", "groups", ")", ":", "\n", "                ", "Pk", "=", "group_prob", "[", ":", ",", "k", "]", ".", "unsqueeze", "(", "dim", "=", "-", "1", ")", ".", "expand", "(", "B", ",", "self", ".", "feature_dim", ")", "\n", "group_mul_p_vk", ".", "append", "(", "torch", ".", "mul", "(", "v_G", "[", "k", "]", ",", "Pk", ")", ")", "\n", "", "group_ensembled", "=", "torch", ".", "stack", "(", "group_mul_p_vk", ")", ".", "sum", "(", "dim", "=", "0", ")", "\n", "# instance , group aggregation", "\n", "", "final", "=", "instacne_representation", "+", "group_ensembled", "\n", "return", "group_inter", ",", "final", ",", "group_prob", ",", "group_label", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.modeling.multiheads_baseline.Baseline.__init__": [[136, 186], ["torch.nn.Module.__init__", "backbones.build_backbone", "multiheads_baseline.MultiHeads", "torch.nn.BatchNorm1d", "multiheads_baseline.Baseline.bottleneck.bias.requires_grad_", "multiheads_baseline.Baseline.bottleneck.apply", "multiheads_baseline.Baseline.classifier.apply", "torch.nn.Sequential", "multiheads_baseline.Baseline.base.load_param", "print", "print", "lib.layers.pooling.GeM", "torch.nn.AdaptiveAvgPool2d", "print", "lib.layers.metric_learning.Arcface", "torch.nn.Conv2d", "print", "lib.layers.metric_learning.Cosface", "print", "lib.layers.metric_learning.AMSoftmax", "print", "lib.layers.metric_learning.CircleLoss", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.solver.ranger.Ranger.__init__", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.__init__.build_backbone", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.regnet.regnet.RegNet.load_param"], ["def", "__init__", "(", "self", ",", "num_classes", ",", "last_stride", ",", "model_path", ",", "neck", ",", "neck_feat", ",", "model_name", ",", "pretrain_choice", ",", "cfg", ")", ":", "\n", "        ", "super", "(", "Baseline", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "base", "=", "build_backbone", "(", "model_name", ",", "last_stride", ")", "\n", "if", "'regnet'", "in", "model_name", ":", "\n", "            ", "self", ".", "in_planes", "=", "self", ".", "base", ".", "in_planes", "\n", "\n", "", "if", "pretrain_choice", "==", "'imagenet'", "and", "model_name", "not", "in", "[", "'tf_efficientnet_l2_ns'", ",", "'seresnext50_32x4d'", ",", "'dm_nfnet_f0'", ",", "'nf_resnet50'", ",", "'dm_nfnet_f1'", "]", ":", "\n", "            ", "self", ".", "base", ".", "load_param", "(", "model_path", ")", "\n", "print", "(", "'Loading pretrained ImageNet model......'", ")", "\n", "\n", "", "if", "cfg", ".", "MODEL", ".", "POOLING_METHOD", "==", "'GeM'", ":", "\n", "            ", "print", "(", "'using GeM pooling'", ")", "\n", "self", ".", "gap", "=", "GeM", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "gap", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "\n", "", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "neck", "=", "neck", "\n", "self", ".", "neck_feat", "=", "neck_feat", "\n", "self", ".", "ID_LOSS_TYPE", "=", "cfg", ".", "MODEL", ".", "ID_LOSS_TYPE", "\n", "self", ".", "MultiHeads", "=", "MultiHeads", "(", "feature_dim", "=", "2048", ",", "groups", "=", "32", ",", "mode", "=", "'S'", ",", "backbone_fc_dim", "=", "2048", ")", "\n", "\n", "self", ".", "bottleneck", "=", "nn", ".", "BatchNorm1d", "(", "self", ".", "in_planes", ")", "\n", "self", ".", "bottleneck", ".", "bias", ".", "requires_grad_", "(", "False", ")", "# no shift", "\n", "#self.bottleneck = IBN(self.in_planes)", "\n", "\n", "if", "self", ".", "ID_LOSS_TYPE", "==", "'arcface'", ":", "\n", "            ", "print", "(", "'using {}'", ".", "format", "(", "self", ".", "ID_LOSS_TYPE", ")", ")", "\n", "self", ".", "classifier", "=", "Arcface", "(", "self", ".", "in_planes", ",", "self", ".", "num_classes", ",", "\n", "s", "=", "cfg", ".", "SOLVER", ".", "COSINE_SCALE", ",", "m", "=", "cfg", ".", "SOLVER", ".", "COSINE_MARGIN", ")", "\n", "", "elif", "self", ".", "ID_LOSS_TYPE", "==", "'cosface'", ":", "\n", "            ", "print", "(", "'using {}'", ".", "format", "(", "self", ".", "ID_LOSS_TYPE", ")", ")", "\n", "self", ".", "classifier", "=", "Cosface", "(", "self", ".", "in_planes", ",", "self", ".", "num_classes", ",", "\n", "s", "=", "cfg", ".", "SOLVER", ".", "COSINE_SCALE", ",", "m", "=", "cfg", ".", "SOLVER", ".", "COSINE_MARGIN", ")", "\n", "", "elif", "self", ".", "ID_LOSS_TYPE", "==", "'amsoftmax'", ":", "\n", "            ", "print", "(", "'using {}'", ".", "format", "(", "self", ".", "ID_LOSS_TYPE", ")", ")", "\n", "self", ".", "classifier", "=", "AMSoftmax", "(", "self", ".", "in_planes", ",", "self", ".", "num_classes", ",", "\n", "s", "=", "cfg", ".", "SOLVER", ".", "COSINE_SCALE", ",", "m", "=", "cfg", ".", "SOLVER", ".", "COSINE_MARGIN", ")", "\n", "", "elif", "self", ".", "ID_LOSS_TYPE", "==", "'circle'", ":", "\n", "            ", "print", "(", "'using {}'", ".", "format", "(", "self", ".", "ID_LOSS_TYPE", ")", ")", "\n", "self", ".", "classifier", "=", "CircleLoss", "(", "self", ".", "in_planes", ",", "self", ".", "num_classes", ",", "\n", "s", "=", "cfg", ".", "SOLVER", ".", "COSINE_SCALE", ",", "m", "=", "cfg", ".", "SOLVER", ".", "COSINE_MARGIN", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "self", ".", "in_planes", ",", "self", ".", "num_classes", ",", "bias", "=", "False", ")", "\n", "\n", "", "self", ".", "bottleneck", ".", "apply", "(", "weights_init_kaiming", ")", "\n", "self", ".", "classifier", ".", "apply", "(", "weights_init_classifier", ")", "\n", "\n", "self", ".", "reduce", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "3072", ",", "2048", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.modeling.multiheads_baseline.Baseline.forward": [[189, 216], ["multiheads_baseline.Baseline.base", "multiheads_baseline.Baseline.gap", "global_feat.flatten.flatten.flatten", "multiheads_baseline.Baseline.MultiHeads", "multiheads_baseline.Baseline.bottleneck", "multiheads_baseline.Baseline.classifier", "multiheads_baseline.Baseline.classifier"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "label", "=", "None", ",", "return_featmap", "=", "False", ")", ":", "\n", "\n", "        ", "featmap", "=", "self", ".", "base", "(", "x", ")", "# (b, 2048, 1, 1)", "\n", "\n", "if", "return_featmap", ":", "\n", "            ", "return", "featmap", "\n", "", "global_feat", "=", "self", ".", "gap", "(", "featmap", ")", "\n", "global_feat", "=", "global_feat", ".", "flatten", "(", "1", ")", "\n", "\n", "# MultiHeads", "\n", "_", ",", "global_feat", ",", "_", ",", "_", "=", "self", ".", "MultiHeads", "(", "global_feat", ")", "\n", "\n", "feat", "=", "self", ".", "bottleneck", "(", "global_feat", ")", "# normalize for angular softmax", "\n", "\n", "if", "self", ".", "training", ":", "\n", "            ", "if", "self", ".", "ID_LOSS_TYPE", "in", "(", "'arcface'", ",", "'cosface'", ",", "'amsoftmax'", ",", "'circle'", ")", ":", "\n", "                ", "cls_score", "=", "self", ".", "classifier", "(", "feat", ",", "label", ")", "\n", "", "else", ":", "\n", "                ", "cls_score", "=", "self", ".", "classifier", "(", "feat", ")", "\n", "", "return", "cls_score", ",", "feat", "#global_feat  # global feature for triplet loss", "\n", "", "else", ":", "\n", "            ", "if", "self", ".", "neck_feat", "==", "'after'", ":", "\n", "# print(\"Test with feature after BN\")", "\n", "                ", "return", "feat", "\n", "", "else", ":", "\n", "# print(\"Test with feature before BN\")", "\n", "                ", "return", "global_feat", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.modeling.multiheads_baseline.Baseline.load_param": [[217, 233], ["torch.load().state_dict", "i.replace", "[].copy_", "torch.load", "print", "torch.load", "multiheads_baseline.Baseline.state_dict", "multiheads_baseline.Baseline.state_dict", "multiheads_baseline.Baseline.state_dict"], "methods", ["home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.solver.swa.SWA.state_dict", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.solver.swa.SWA.state_dict", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.solver.swa.SWA.state_dict", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.solver.swa.SWA.state_dict"], ["", "", "", "def", "load_param", "(", "self", ",", "trained_path", ",", "skip_fc", "=", "True", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "param_dict", "=", "torch", ".", "load", "(", "trained_path", ")", ".", "state_dict", "(", ")", "\n", "", "except", ":", "\n", "            ", "param_dict", "=", "torch", ".", "load", "(", "trained_path", ")", "\n", "\n", "", "for", "i", "in", "param_dict", ":", "\n", "            ", "y", "=", "i", ".", "replace", "(", "'module'", ",", "'base'", ")", "\n", "if", "skip_fc", "and", "'classifier'", "in", "i", ":", "\n", "                ", "continue", "\n", "\n", "", "if", "self", ".", "state_dict", "(", ")", "[", "y", "]", ".", "shape", "!=", "param_dict", "[", "i", "]", ".", "shape", ":", "\n", "                ", "pass", "\n", "print", "(", "'skip {}, shape dismatch {} vs {}'", ".", "format", "(", "i", ",", "self", ".", "state_dict", "(", ")", "[", "y", "]", ".", "shape", ",", "param_dict", "[", "i", "]", ".", "shape", ")", ")", "\n", "continue", "\n", "", "self", ".", "state_dict", "(", ")", "[", "y", "]", ".", "copy_", "(", "param_dict", "[", "i", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.modeling.multiheads_baseline.Baseline_2_Head.__init__": [[236, 241], ["multiheads_baseline.Baseline.__init__", "lib.layers.pooling.GeM", "torch.nn.AdaptiveAvgPool2d"], "methods", ["home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.solver.ranger.Ranger.__init__"], ["def", "__init__", "(", "self", ",", "num_classes", ",", "last_stride", ",", "model_path", ",", "neck", ",", "neck_feat", ",", "model_name", ",", "pretrain_choice", ",", "cfg", ")", ":", "\n", "        ", "super", "(", "Baseline_2_Head", ",", "self", ")", ".", "__init__", "(", "num_classes", ",", "last_stride", ",", "model_path", ",", "neck", ",", "neck_feat", ",", "model_name", ",", "pretrain_choice", ",", "cfg", ")", "\n", "\n", "self", ".", "gap_1", "=", "GeM", "(", ")", "\n", "self", ".", "gap_2", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.modeling.multiheads_baseline.Baseline_2_Head.forward": [[242, 284], ["multiheads_baseline.Baseline_2_Head.base", "multiheads_baseline.Baseline_2_Head.gap_1", "multiheads_baseline.Baseline_2_Head.gap_2", "global_feat_low_gem.flatten.flatten.flatten", "global_feat_low_ada.flatten.flatten.flatten", "multiheads_baseline.Baseline_2_Head.gap_1", "multiheads_baseline.Baseline_2_Head.gap_2", "global_feat_gem.flatten.flatten.flatten", "global_feat_ada.flatten.flatten.flatten", "torch.cat", "multiheads_baseline.Baseline_2_Head.bottleneck", "multiheads_baseline.Baseline_2_Head.classifier", "multiheads_baseline.Baseline_2_Head.classifier"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "label", "=", "None", ",", "return_featmap", "=", "False", ")", ":", "\n", "        ", "featmap_low", ",", "featmap", "=", "self", ".", "base", "(", "x", ")", "# (b, 2048, 1, 1)", "\n", "if", "return_featmap", ":", "\n", "            ", "return", "featmap_low", ",", "featmap", "\n", "\n", "# process low-level feature", "\n", "", "global_feat_low_gem", "=", "self", ".", "gap_1", "(", "featmap_low", ")", "\n", "global_feat_low_ada", "=", "self", ".", "gap_2", "(", "featmap_low", ")", "\n", "\n", "global_feat_low_gem", "=", "global_feat_low_gem", ".", "flatten", "(", "1", ")", "\n", "global_feat_low_ada", "=", "global_feat_low_ada", ".", "flatten", "(", "1", ")", "\n", "\n", "featmap_low", "=", "global_feat_low_gem", "+", "global_feat_low_ada", "\n", "\n", "# process high-level features", "\n", "global_feat_gem", "=", "self", ".", "gap_1", "(", "featmap", ")", "\n", "global_feat_ada", "=", "self", ".", "gap_2", "(", "featmap", ")", "\n", "\n", "global_feat_gem", "=", "global_feat_gem", ".", "flatten", "(", "1", ")", "\n", "global_feat_ada", "=", "global_feat_ada", ".", "flatten", "(", "1", ")", "\n", "\n", "featmap", "=", "global_feat_gem", "+", "global_feat_ada", "\n", "\n", "# cat low-level features and high-level feature", "\n", "global_feat", "=", "torch", ".", "cat", "(", "(", "featmap", ",", "featmap_low", ")", ",", "dim", "=", "1", ")", "\n", "\n", "\n", "feat", "=", "self", ".", "bottleneck", "(", "global_feat", ")", "# normalize for angular softmax", "\n", "\n", "if", "self", ".", "training", ":", "\n", "            ", "if", "self", ".", "ID_LOSS_TYPE", "in", "(", "'arcface'", ",", "'cosface'", ",", "'amsoftmax'", ",", "'circle'", ")", ":", "\n", "                ", "cls_score", "=", "self", ".", "classifier", "(", "feat", ",", "label", ")", "\n", "", "else", ":", "\n", "                ", "cls_score", "=", "self", ".", "classifier", "(", "feat", ")", "\n", "", "return", "cls_score", ",", "feat", "#global_feat  # global feature for triplet loss", "\n", "", "else", ":", "\n", "            ", "if", "self", ".", "neck_feat", "==", "'after'", ":", "\n", "# print(\"Test with feature after BN\")", "\n", "                ", "return", "feat", "\n", "", "else", ":", "\n", "# print(\"Test with feature before BN\")", "\n", "                ", "return", "global_feat", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.modeling.multiheads_baseline.weights_init_kaiming": [[16, 30], ["classname.find", "torch.nn.init.kaiming_normal_", "torch.nn.init.constant_", "classname.find", "torch.nn.init.kaiming_normal_", "torch.nn.init.constant_", "classname.find", "torch.nn.init.normal_", "torch.nn.init.constant_"], "function", ["None"], ["def", "weights_init_kaiming", "(", "m", ")", ":", "\n", "    ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "if", "classname", ".", "find", "(", "'Linear'", ")", "!=", "-", "1", ":", "\n", "        ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "a", "=", "0", ",", "mode", "=", "'fan_out'", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0.0", ")", "\n", "", "elif", "classname", ".", "find", "(", "'Conv'", ")", "!=", "-", "1", ":", "\n", "        ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "a", "=", "0", ",", "mode", "=", "'fan_in'", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "            ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0.0", ")", "\n", "", "", "elif", "classname", ".", "find", "(", "'BatchNorm'", ")", "!=", "-", "1", ":", "\n", "        ", "if", "m", ".", "affine", ":", "\n", "#nn.init.constant_(m.weight, 1.0)", "\n", "            ", "nn", ".", "init", ".", "normal_", "(", "m", ".", "weight", ",", "std", "=", "0.001", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.modeling.multiheads_baseline.weights_init_classifier": [[32, 38], ["classname.find", "torch.nn.init.normal_", "torch.nn.init.constant_"], "function", ["None"], ["", "", "", "def", "weights_init_classifier", "(", "m", ")", ":", "\n", "    ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "if", "classname", ".", "find", "(", "'Linear'", ")", "!=", "-", "1", ":", "\n", "        ", "nn", ".", "init", ".", "normal_", "(", "m", ".", "weight", ",", "std", "=", "0.001", ")", "\n", "if", "m", ".", "bias", ":", "\n", "            ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.modeling.multiheads_baseline.build_embedding_head": [[40, 64], ["torch.nn.Linear", "torch.nn.Sequential", "torch.nn.Dropout", "torch.nn.Linear", "torch.nn.Sequential", "torch.nn.BatchNorm1d", "torch.nn.Dropout", "torch.nn.Linear", "torch.nn.Sequential", "print", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.Linear"], "function", ["None"], ["", "", "", "def", "build_embedding_head", "(", "option", ",", "input_dim", ",", "output_dim", ",", "dropout_prob", ")", ":", "\n", "    ", "reduce", "=", "None", "\n", "if", "option", "==", "'fc'", ":", "\n", "        ", "reduce", "=", "nn", ".", "Linear", "(", "input_dim", ",", "output_dim", ")", "\n", "", "elif", "option", "==", "'dropout_fc'", ":", "\n", "        ", "reduce", "=", "[", "nn", ".", "Dropout", "(", "p", "=", "dropout_prob", ")", ",", "\n", "nn", ".", "Linear", "(", "input_dim", ",", "output_dim", ")", "\n", "]", "\n", "reduce", "=", "nn", ".", "Sequential", "(", "*", "reduce", ")", "\n", "", "elif", "option", "==", "'bn_dropout_fc'", ":", "\n", "        ", "reduce", "=", "[", "nn", ".", "BatchNorm1d", "(", "input_dim", ")", ",", "\n", "nn", ".", "Dropout", "(", "p", "=", "dropout_prob", ")", ",", "\n", "nn", ".", "Linear", "(", "input_dim", ",", "output_dim", ")", "\n", "]", "\n", "reduce", "=", "nn", ".", "Sequential", "(", "*", "reduce", ")", "\n", "", "elif", "option", "==", "'mlp'", ":", "\n", "        ", "reduce", "=", "[", "nn", ".", "Linear", "(", "input_dim", ",", "output_dim", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "output_dim", ",", "output_dim", ")", ",", "\n", "]", "\n", "reduce", "=", "nn", ".", "Sequential", "(", "*", "reduce", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "'unsupported embedding head options {}'", ".", "format", "(", "option", ")", ")", "\n", "", "return", "reduce", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.modeling.__init__.build_model": [[12, 39], ["print", "baseline.Baseline_reduce", "print", "baseline.Baseline", "print", "baseline.Baseline_2_Head", "print", "multiheads_baseline.Baseline", "print"], "function", ["None"], []], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.modeling.baseline.Baseline_reduce.__init__": [[71, 120], ["torch.nn.Module.__init__", "backbones.build_backbone", "baseline.build_embedding_head", "torch.nn.BatchNorm1d", "baseline.Baseline_reduce.bottleneck.bias.requires_grad_", "baseline.Baseline_reduce.bottleneck.apply", "baseline.Baseline_reduce.classifier.apply", "baseline.Baseline_reduce.base.load_param", "print", "print", "lib.layers.pooling.GeM", "torch.nn.AdaptiveAvgPool2d", "print", "lib.layers.metric_learning.Arcface", "print", "lib.layers.metric_learning.Cosface", "print", "lib.layers.metric_learning.AMSoftmax", "print", "lib.layers.metric_learning.CircleLoss", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.solver.ranger.Ranger.__init__", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.__init__.build_backbone", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.modeling.baseline.build_embedding_head", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.regnet.regnet.RegNet.load_param"], ["def", "__init__", "(", "self", ",", "num_classes", ",", "last_stride", ",", "model_path", ",", "neck", ",", "neck_feat", ",", "model_name", ",", "pretrain_choice", ",", "cfg", ")", ":", "\n", "        ", "super", "(", "Baseline_reduce", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "base", "=", "build_backbone", "(", "model_name", ",", "last_stride", ")", "\n", "if", "'regnet'", "in", "model_name", ":", "\n", "            ", "self", ".", "in_planes", "=", "self", ".", "base", ".", "in_planes", "\n", "\n", "", "if", "pretrain_choice", "==", "'imagenet'", ":", "\n", "            ", "self", ".", "base", ".", "load_param", "(", "model_path", ")", "\n", "print", "(", "'Loading pretrained ImageNet model......'", ")", "\n", "\n", "", "if", "cfg", ".", "MODEL", ".", "POOLING_METHOD", "==", "'GeM'", ":", "\n", "            ", "print", "(", "'using GeM pooling'", ")", "\n", "self", ".", "gap", "=", "GeM", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "gap", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "\n", "", "self", ".", "num_classes", "=", "num_classes", "\n", "\n", "self", ".", "feature_dim", "=", "cfg", ".", "MODEL", ".", "EMBEDDING_DIM", "\n", "\n", "#self.reduce = nn.Linear(self.in_planes, self.feature_dim)", "\n", "self", ".", "reduce", "=", "build_embedding_head", "(", "cfg", ".", "MODEL", ".", "EMBEDDING_HEAD", ",", "\n", "self", ".", "in_planes", ",", "self", ".", "feature_dim", ",", "\n", "cfg", ".", "MODEL", ".", "DROPOUT_PROB", ")", "\n", "\n", "self", ".", "ID_LOSS_TYPE", "=", "cfg", ".", "MODEL", ".", "ID_LOSS_TYPE", "\n", "self", ".", "bottleneck", "=", "nn", ".", "BatchNorm1d", "(", "self", ".", "feature_dim", ")", "\n", "self", ".", "bottleneck", ".", "bias", ".", "requires_grad_", "(", "False", ")", "# no shift", "\n", "if", "self", ".", "ID_LOSS_TYPE", "==", "'arcface'", ":", "\n", "            ", "print", "(", "'using {}'", ".", "format", "(", "self", ".", "ID_LOSS_TYPE", ")", ")", "\n", "self", ".", "classifier", "=", "Arcface", "(", "self", ".", "feature_dim", ",", "self", ".", "num_classes", ",", "\n", "s", "=", "cfg", ".", "SOLVER", ".", "COSINE_SCALE", ",", "m", "=", "cfg", ".", "SOLVER", ".", "COSINE_MARGIN", ")", "\n", "", "elif", "self", ".", "ID_LOSS_TYPE", "==", "'cosface'", ":", "\n", "            ", "print", "(", "'using {}'", ".", "format", "(", "self", ".", "ID_LOSS_TYPE", ")", ")", "\n", "self", ".", "classifier", "=", "Cosface", "(", "self", ".", "feature_dim", ",", "self", ".", "num_classes", ",", "\n", "s", "=", "cfg", ".", "SOLVER", ".", "COSINE_SCALE", ",", "m", "=", "cfg", ".", "SOLVER", ".", "COSINE_MARGIN", ")", "\n", "", "elif", "self", ".", "ID_LOSS_TYPE", "==", "'amsoftmax'", ":", "\n", "            ", "print", "(", "'using {}'", ".", "format", "(", "self", ".", "ID_LOSS_TYPE", ")", ")", "\n", "self", ".", "classifier", "=", "AMSoftmax", "(", "self", ".", "feature_dim", ",", "self", ".", "num_classes", ",", "\n", "s", "=", "cfg", ".", "SOLVER", ".", "COSINE_SCALE", ",", "m", "=", "cfg", ".", "SOLVER", ".", "COSINE_MARGIN", ")", "\n", "", "elif", "self", ".", "ID_LOSS_TYPE", "==", "'circle'", ":", "\n", "            ", "print", "(", "'using {}'", ".", "format", "(", "self", ".", "ID_LOSS_TYPE", ")", ")", "\n", "self", ".", "classifier", "=", "CircleLoss", "(", "self", ".", "feature_dim", ",", "self", ".", "num_classes", ",", "\n", "s", "=", "cfg", ".", "SOLVER", ".", "COSINE_SCALE", ",", "m", "=", "cfg", ".", "SOLVER", ".", "COSINE_MARGIN", ")", "\n", "\n", "", "else", ":", "\n", "            ", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "self", ".", "feature_dim", ",", "self", ".", "num_classes", ",", "bias", "=", "False", ")", "\n", "", "self", ".", "bottleneck", ".", "apply", "(", "weights_init_kaiming", ")", "\n", "self", ".", "classifier", ".", "apply", "(", "weights_init_classifier", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.modeling.baseline.Baseline_reduce.forward": [[121, 139], ["baseline.Baseline_reduce.base", "baseline.Baseline_reduce.gap", "baseline.Baseline_reduce.flatten", "baseline.Baseline_reduce.reduce", "baseline.Baseline_reduce.bottleneck", "baseline.Baseline_reduce.classifier", "baseline.Baseline_reduce.classifier"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "label", "=", "None", ",", "return_featmap", "=", "False", ")", ":", "\n", "        ", "featmap", "=", "self", ".", "base", "(", "x", ")", "\n", "if", "return_featmap", ":", "\n", "            ", "return", "featmap", "\n", "", "global_feat", "=", "self", ".", "gap", "(", "featmap", ")", "\n", "global_feat", "=", "global_feat", ".", "flatten", "(", "1", ")", "\n", "global_feat", "=", "self", ".", "reduce", "(", "global_feat", ")", "\n", "\n", "feat", "=", "self", ".", "bottleneck", "(", "global_feat", ")", "# normalize for angular softmax", "\n", "\n", "if", "self", ".", "training", ":", "\n", "            ", "if", "self", ".", "ID_LOSS_TYPE", "in", "(", "'arcface'", ",", "'cosface'", ",", "'amsoftmax'", ",", "'circle'", ")", ":", "\n", "                ", "cls_score", "=", "self", ".", "classifier", "(", "feat", ",", "label", ")", "\n", "", "else", ":", "\n", "                ", "cls_score", "=", "self", ".", "classifier", "(", "feat", ")", "\n", "", "return", "cls_score", ",", "feat", "#global_feat  # global feature for triplet loss", "\n", "", "else", ":", "\n", "            ", "return", "feat", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.modeling.baseline.Baseline_reduce.load_param": [[141, 153], ["torch.load().state_dict", "[].copy_", "torch.load", "print", "torch.load", "baseline.Baseline_reduce.state_dict", "baseline.Baseline_reduce.state_dict", "baseline.Baseline_reduce.state_dict"], "methods", ["home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.solver.swa.SWA.state_dict", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.solver.swa.SWA.state_dict", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.solver.swa.SWA.state_dict", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.solver.swa.SWA.state_dict"], ["", "", "def", "load_param", "(", "self", ",", "trained_path", ",", "skip_fc", "=", "True", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "param_dict", "=", "torch", ".", "load", "(", "trained_path", ")", ".", "state_dict", "(", ")", "\n", "", "except", ":", "\n", "            ", "param_dict", "=", "torch", ".", "load", "(", "trained_path", ")", "\n", "", "for", "i", "in", "param_dict", ":", "\n", "            ", "if", "skip_fc", "and", "'classifier'", "in", "i", ":", "\n", "                ", "continue", "\n", "", "if", "self", ".", "state_dict", "(", ")", "[", "i", "]", ".", "shape", "!=", "param_dict", "[", "i", "]", ".", "shape", ":", "\n", "                ", "print", "(", "'skip {}, shape dismatch {} vs {}'", ".", "format", "(", "i", ",", "self", ".", "state_dict", "(", ")", "[", "i", "]", ".", "shape", ",", "param_dict", "[", "i", "]", ".", "shape", ")", ")", "\n", "continue", "\n", "", "self", ".", "state_dict", "(", ")", "[", "i", "]", ".", "copy_", "(", "param_dict", "[", "i", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.modeling.baseline.Baseline.__init__": [[158, 204], ["torch.nn.Module.__init__", "backbones.build_backbone", "torch.nn.BatchNorm1d", "baseline.Baseline.bottleneck.bias.requires_grad_", "baseline.Baseline.bottleneck.apply", "baseline.Baseline.classifier.apply", "baseline.Baseline.base.load_param", "print", "print", "lib.layers.pooling.GeM", "torch.nn.AdaptiveAvgPool2d", "print", "lib.layers.metric_learning.Arcface", "print", "lib.layers.metric_learning.Cosface", "print", "lib.layers.metric_learning.AMSoftmax", "print", "lib.layers.metric_learning.CircleLoss", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.solver.ranger.Ranger.__init__", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.__init__.build_backbone", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.regnet.regnet.RegNet.load_param"], ["def", "__init__", "(", "self", ",", "num_classes", ",", "last_stride", ",", "model_path", ",", "neck", ",", "neck_feat", ",", "model_name", ",", "pretrain_choice", ",", "cfg", ")", ":", "\n", "        ", "super", "(", "Baseline", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "base", "=", "build_backbone", "(", "model_name", ",", "last_stride", ")", "\n", "if", "'regnet'", "in", "model_name", ":", "\n", "            ", "self", ".", "in_planes", "=", "self", ".", "base", ".", "in_planes", "\n", "\n", "", "if", "pretrain_choice", "==", "'imagenet'", ":", "\n", "            ", "self", ".", "base", ".", "load_param", "(", "model_path", ")", "\n", "print", "(", "'Loading pretrained ImageNet model......'", ")", "\n", "\n", "", "if", "cfg", ".", "MODEL", ".", "POOLING_METHOD", "==", "'GeM'", ":", "\n", "            ", "print", "(", "'using GeM pooling'", ")", "\n", "self", ".", "gap", "=", "GeM", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "gap", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "\n", "", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "neck", "=", "neck", "\n", "self", ".", "neck_feat", "=", "neck_feat", "\n", "self", ".", "ID_LOSS_TYPE", "=", "cfg", ".", "MODEL", ".", "ID_LOSS_TYPE", "\n", "\n", "self", ".", "bottleneck", "=", "nn", ".", "BatchNorm1d", "(", "self", ".", "in_planes", ")", "\n", "self", ".", "bottleneck", ".", "bias", ".", "requires_grad_", "(", "False", ")", "# no shift", "\n", "#self.bottleneck = IBN(self.in_planes)", "\n", "\n", "if", "self", ".", "ID_LOSS_TYPE", "==", "'arcface'", ":", "\n", "            ", "print", "(", "'using {}'", ".", "format", "(", "self", ".", "ID_LOSS_TYPE", ")", ")", "\n", "self", ".", "classifier", "=", "Arcface", "(", "self", ".", "in_planes", ",", "self", ".", "num_classes", ",", "\n", "s", "=", "cfg", ".", "SOLVER", ".", "COSINE_SCALE", ",", "m", "=", "cfg", ".", "SOLVER", ".", "COSINE_MARGIN", ")", "\n", "", "elif", "self", ".", "ID_LOSS_TYPE", "==", "'cosface'", ":", "\n", "            ", "print", "(", "'using {}'", ".", "format", "(", "self", ".", "ID_LOSS_TYPE", ")", ")", "\n", "self", ".", "classifier", "=", "Cosface", "(", "self", ".", "in_planes", ",", "self", ".", "num_classes", ",", "\n", "s", "=", "cfg", ".", "SOLVER", ".", "COSINE_SCALE", ",", "m", "=", "cfg", ".", "SOLVER", ".", "COSINE_MARGIN", ")", "\n", "", "elif", "self", ".", "ID_LOSS_TYPE", "==", "'amsoftmax'", ":", "\n", "            ", "print", "(", "'using {}'", ".", "format", "(", "self", ".", "ID_LOSS_TYPE", ")", ")", "\n", "self", ".", "classifier", "=", "AMSoftmax", "(", "self", ".", "in_planes", ",", "self", ".", "num_classes", ",", "\n", "s", "=", "cfg", ".", "SOLVER", ".", "COSINE_SCALE", ",", "m", "=", "cfg", ".", "SOLVER", ".", "COSINE_MARGIN", ")", "\n", "", "elif", "self", ".", "ID_LOSS_TYPE", "==", "'circle'", ":", "\n", "            ", "print", "(", "'using {}'", ".", "format", "(", "self", ".", "ID_LOSS_TYPE", ")", ")", "\n", "self", ".", "classifier", "=", "CircleLoss", "(", "self", ".", "in_planes", ",", "self", ".", "num_classes", ",", "\n", "s", "=", "cfg", ".", "SOLVER", ".", "COSINE_SCALE", ",", "m", "=", "cfg", ".", "SOLVER", ".", "COSINE_MARGIN", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "self", ".", "in_planes", ",", "self", ".", "num_classes", ",", "bias", "=", "False", ")", "\n", "\n", "", "self", ".", "bottleneck", ".", "apply", "(", "weights_init_kaiming", ")", "\n", "self", ".", "classifier", ".", "apply", "(", "weights_init_classifier", ")", "\n", "#self.att = SpatialAttention2d(2048, 512)", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.modeling.baseline.Baseline.forward": [[206, 232], ["baseline.Baseline.base", "baseline.Baseline.gap", "global_feat.flatten.flatten.flatten", "baseline.Baseline.bottleneck", "baseline.Baseline.classifier", "baseline.Baseline.classifier"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "label", "=", "None", ",", "return_featmap", "=", "False", ")", ":", "\n", "\n", "        ", "featmap", "=", "self", ".", "base", "(", "x", ")", "# (b, 2048, 1, 1)", "\n", "#featmap = self.bottleneck(featmap)", "\n", "#featmap = self.att(featmap) * featmap", "\n", "if", "return_featmap", ":", "\n", "            ", "return", "featmap", "\n", "", "global_feat", "=", "self", ".", "gap", "(", "featmap", ")", "\n", "#global_feat = global_feat.view(global_feat.shape[0], -1)  # flatten to (bs, 2048)", "\n", "global_feat", "=", "global_feat", ".", "flatten", "(", "1", ")", "\n", "# import ipdb; ipdb.set_trace()", "\n", "feat", "=", "self", ".", "bottleneck", "(", "global_feat", ")", "# normalize for angular softmax", "\n", "\n", "if", "self", ".", "training", ":", "\n", "            ", "if", "self", ".", "ID_LOSS_TYPE", "in", "(", "'arcface'", ",", "'cosface'", ",", "'amsoftmax'", ",", "'circle'", ")", ":", "\n", "                ", "cls_score", "=", "self", ".", "classifier", "(", "feat", ",", "label", ")", "\n", "", "else", ":", "\n", "                ", "cls_score", "=", "self", ".", "classifier", "(", "feat", ")", "\n", "", "return", "cls_score", ",", "feat", "#global_feat  # global feature for triplet loss", "\n", "", "else", ":", "\n", "            ", "if", "self", ".", "neck_feat", "==", "'after'", ":", "\n", "# print(\"Test with feature after BN\")", "\n", "                ", "return", "feat", "\n", "", "else", ":", "\n", "# print(\"Test with feature before BN\")", "\n", "                ", "return", "global_feat", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.modeling.baseline.Baseline.load_param": [[233, 250], ["torch.load().state_dict", "i.replace", "[].copy_", "torch.load", "print", "torch.load", "baseline.Baseline.state_dict", "baseline.Baseline.state_dict", "baseline.Baseline.state_dict"], "methods", ["home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.solver.swa.SWA.state_dict", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.solver.swa.SWA.state_dict", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.solver.swa.SWA.state_dict", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.solver.swa.SWA.state_dict"], ["", "", "", "def", "load_param", "(", "self", ",", "trained_path", ",", "skip_fc", "=", "True", ")", ":", "\n", "# import ipdb; ipdb.set_trace()", "\n", "\n", "        ", "try", ":", "\n", "            ", "param_dict", "=", "torch", ".", "load", "(", "trained_path", ")", ".", "state_dict", "(", ")", "\n", "", "except", ":", "\n", "            ", "param_dict", "=", "torch", ".", "load", "(", "trained_path", ")", "\n", "\n", "", "for", "i", "in", "param_dict", ":", "\n", "            ", "y", "=", "i", ".", "replace", "(", "'module'", ",", "'base'", ")", "\n", "if", "skip_fc", "and", "'classifier'", "in", "i", ":", "\n", "                ", "continue", "\n", "# import ipdb; ipdb.set_trace()", "\n", "", "if", "self", ".", "state_dict", "(", ")", "[", "y", "]", ".", "shape", "!=", "param_dict", "[", "i", "]", ".", "shape", ":", "\n", "                ", "print", "(", "'skip {}, shape dismatch {} vs {}'", ".", "format", "(", "i", ",", "self", ".", "state_dict", "(", ")", "[", "y", "]", ".", "shape", ",", "param_dict", "[", "i", "]", ".", "shape", ")", ")", "\n", "continue", "\n", "", "self", ".", "state_dict", "(", ")", "[", "y", "]", ".", "copy_", "(", "param_dict", "[", "i", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.modeling.baseline.Baseline_2_Head.__init__": [[253, 258], ["baseline.Baseline.__init__", "lib.layers.pooling.GeM", "torch.nn.AdaptiveAvgPool2d"], "methods", ["home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.solver.ranger.Ranger.__init__"], ["def", "__init__", "(", "self", ",", "num_classes", ",", "last_stride", ",", "model_path", ",", "neck", ",", "neck_feat", ",", "model_name", ",", "pretrain_choice", ",", "cfg", ")", ":", "\n", "        ", "super", "(", "Baseline_2_Head", ",", "self", ")", ".", "__init__", "(", "num_classes", ",", "last_stride", ",", "model_path", ",", "neck", ",", "neck_feat", ",", "model_name", ",", "pretrain_choice", ",", "cfg", ")", "\n", "\n", "self", ".", "gap_1", "=", "GeM", "(", ")", "\n", "self", ".", "gap_2", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.modeling.baseline.Baseline_2_Head.forward": [[259, 303], ["baseline.Baseline_2_Head.base", "baseline.Baseline_2_Head.gap_1", "baseline.Baseline_2_Head.gap_2", "global_feat_low_gem.flatten.flatten.flatten", "global_feat_low_ada.flatten.flatten.flatten", "baseline.Baseline_2_Head.gap_1", "baseline.Baseline_2_Head.gap_2", "global_feat_gem.flatten.flatten.flatten", "global_feat_ada.flatten.flatten.flatten", "torch.cat", "baseline.Baseline_2_Head.bottleneck", "baseline.Baseline_2_Head.classifier", "baseline.Baseline_2_Head.classifier"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "label", "=", "None", ",", "return_featmap", "=", "False", ")", ":", "\n", "        ", "featmap_low", ",", "featmap", "=", "self", ".", "base", "(", "x", ")", "# (b, 2048, 1, 1)", "\n", "#featmap = self.bottleneck(featmap)", "\n", "#featmap = self.att(featmap) * featmap", "\n", "if", "return_featmap", ":", "\n", "            ", "return", "featmap_low", ",", "featmap", "\n", "\n", "# process low-level feature", "\n", "", "global_feat_low_gem", "=", "self", ".", "gap_1", "(", "featmap_low", ")", "\n", "global_feat_low_ada", "=", "self", ".", "gap_2", "(", "featmap_low", ")", "\n", "\n", "global_feat_low_gem", "=", "global_feat_low_gem", ".", "flatten", "(", "1", ")", "\n", "global_feat_low_ada", "=", "global_feat_low_ada", ".", "flatten", "(", "1", ")", "\n", "\n", "featmap_low", "=", "global_feat_low_gem", "+", "global_feat_low_ada", "\n", "\n", "# process high-level features", "\n", "global_feat_gem", "=", "self", ".", "gap_1", "(", "featmap", ")", "\n", "global_feat_ada", "=", "self", ".", "gap_2", "(", "featmap", ")", "\n", "\n", "global_feat_gem", "=", "global_feat_gem", ".", "flatten", "(", "1", ")", "\n", "global_feat_ada", "=", "global_feat_ada", ".", "flatten", "(", "1", ")", "\n", "\n", "featmap", "=", "global_feat_gem", "+", "global_feat_ada", "\n", "# import ipdb; ipdb.set_trace()", "\n", "# cat low-level features and high-level feature", "\n", "global_feat", "=", "torch", ".", "cat", "(", "(", "featmap", ",", "featmap_low", ")", ",", "dim", "=", "1", ")", "\n", "\n", "# import ipdb; ipdb.set_trace()", "\n", "feat", "=", "self", ".", "bottleneck", "(", "global_feat", ")", "# normalize for angular softmax", "\n", "\n", "if", "self", ".", "training", ":", "\n", "            ", "if", "self", ".", "ID_LOSS_TYPE", "in", "(", "'arcface'", ",", "'cosface'", ",", "'amsoftmax'", ",", "'circle'", ")", ":", "\n", "                ", "cls_score", "=", "self", ".", "classifier", "(", "feat", ",", "label", ")", "\n", "", "else", ":", "\n", "                ", "cls_score", "=", "self", ".", "classifier", "(", "feat", ")", "\n", "", "return", "cls_score", ",", "feat", "#global_feat  # global feature for triplet loss", "\n", "", "else", ":", "\n", "            ", "if", "self", ".", "neck_feat", "==", "'after'", ":", "\n", "# print(\"Test with feature after BN\")", "\n", "                ", "return", "feat", "\n", "", "else", ":", "\n", "# print(\"Test with feature before BN\")", "\n", "                ", "return", "global_feat", "", "", "", "", "", ""]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.modeling.baseline.weights_init_kaiming": [[16, 30], ["classname.find", "torch.nn.init.kaiming_normal_", "torch.nn.init.constant_", "classname.find", "torch.nn.init.kaiming_normal_", "torch.nn.init.constant_", "classname.find", "torch.nn.init.normal_", "torch.nn.init.constant_"], "function", ["None"], ["def", "weights_init_kaiming", "(", "m", ")", ":", "\n", "    ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "if", "classname", ".", "find", "(", "'Linear'", ")", "!=", "-", "1", ":", "\n", "        ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "a", "=", "0", ",", "mode", "=", "'fan_out'", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0.0", ")", "\n", "", "elif", "classname", ".", "find", "(", "'Conv'", ")", "!=", "-", "1", ":", "\n", "        ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "a", "=", "0", ",", "mode", "=", "'fan_in'", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "            ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0.0", ")", "\n", "", "", "elif", "classname", ".", "find", "(", "'BatchNorm'", ")", "!=", "-", "1", ":", "\n", "        ", "if", "m", ".", "affine", ":", "\n", "#nn.init.constant_(m.weight, 1.0)", "\n", "            ", "nn", ".", "init", ".", "normal_", "(", "m", ".", "weight", ",", "std", "=", "0.001", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.modeling.baseline.weights_init_classifier": [[32, 38], ["classname.find", "torch.nn.init.normal_", "torch.nn.init.constant_"], "function", ["None"], ["", "", "", "def", "weights_init_classifier", "(", "m", ")", ":", "\n", "    ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "if", "classname", ".", "find", "(", "'Linear'", ")", "!=", "-", "1", ":", "\n", "        ", "nn", ".", "init", ".", "normal_", "(", "m", ".", "weight", ",", "std", "=", "0.001", ")", "\n", "if", "m", ".", "bias", ":", "\n", "            ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.modeling.baseline.build_embedding_head": [[40, 64], ["torch.nn.Linear", "torch.nn.Sequential", "torch.nn.Dropout", "torch.nn.Linear", "torch.nn.Sequential", "torch.nn.BatchNorm1d", "torch.nn.Dropout", "torch.nn.Linear", "torch.nn.Sequential", "print", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.Linear"], "function", ["None"], ["", "", "", "def", "build_embedding_head", "(", "option", ",", "input_dim", ",", "output_dim", ",", "dropout_prob", ")", ":", "\n", "    ", "reduce", "=", "None", "\n", "if", "option", "==", "'fc'", ":", "\n", "        ", "reduce", "=", "nn", ".", "Linear", "(", "input_dim", ",", "output_dim", ")", "\n", "", "elif", "option", "==", "'dropout_fc'", ":", "\n", "        ", "reduce", "=", "[", "nn", ".", "Dropout", "(", "p", "=", "dropout_prob", ")", ",", "\n", "nn", ".", "Linear", "(", "input_dim", ",", "output_dim", ")", "\n", "]", "\n", "reduce", "=", "nn", ".", "Sequential", "(", "*", "reduce", ")", "\n", "", "elif", "option", "==", "'bn_dropout_fc'", ":", "\n", "        ", "reduce", "=", "[", "nn", ".", "BatchNorm1d", "(", "input_dim", ")", ",", "\n", "nn", ".", "Dropout", "(", "p", "=", "dropout_prob", ")", ",", "\n", "nn", ".", "Linear", "(", "input_dim", ",", "output_dim", ")", "\n", "]", "\n", "reduce", "=", "nn", ".", "Sequential", "(", "*", "reduce", ")", "\n", "", "elif", "option", "==", "'mlp'", ":", "\n", "        ", "reduce", "=", "[", "nn", ".", "Linear", "(", "input_dim", ",", "output_dim", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "output_dim", ",", "output_dim", ")", ",", "\n", "]", "\n", "reduce", "=", "nn", ".", "Sequential", "(", "*", "reduce", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "'unsupported embedding head options {}'", ".", "format", "(", "option", ")", ")", "\n", "", "return", "reduce", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.resnext_ibn_a_2_head.IBN.__init__": [[22, 29], ["torch.Module.__init__", "int", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.solver.ranger.Ranger.__init__"], ["    ", "def", "__init__", "(", "self", ",", "planes", ")", ":", "\n", "        ", "super", "(", "IBN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "half1", "=", "int", "(", "planes", "/", "2", ")", "\n", "self", ".", "half", "=", "half1", "\n", "half2", "=", "planes", "-", "half1", "\n", "self", ".", "IN", "=", "nn", ".", "InstanceNorm2d", "(", "half1", ",", "affine", "=", "True", ")", "\n", "self", ".", "BN", "=", "nn", ".", "BatchNorm2d", "(", "half2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.resnext_ibn_a_2_head.IBN.forward": [[30, 36], ["torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "resnext_ibn_a_2_head.IBN.IN", "resnext_ibn_a_2_head.IBN.BN", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "split[].contiguous", "split[].contiguous"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "split", "=", "torch", ".", "split", "(", "x", ",", "self", ".", "half", ",", "1", ")", "\n", "out1", "=", "self", ".", "IN", "(", "split", "[", "0", "]", ".", "contiguous", "(", ")", ")", "\n", "out2", "=", "self", ".", "BN", "(", "split", "[", "1", "]", ".", "contiguous", "(", ")", ")", "\n", "out", "=", "torch", ".", "cat", "(", "(", "out1", ",", "out2", ")", ",", "1", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.resnext_ibn_a_2_head.Bottleneck.__init__": [[44, 69], ["torch.Module.__init__", "int", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "math.floor", "resnext_ibn_a_2_head.IBN", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.solver.ranger.Ranger.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "baseWidth", ",", "cardinality", ",", "stride", "=", "1", ",", "downsample", "=", "None", ",", "ibn", "=", "False", ")", ":", "\n", "        ", "\"\"\" Constructor\n        Args:\n            inplanes: input channel dimensionality\n            planes: output channel dimensionality\n            baseWidth: base width.\n            cardinality: num of convolution groups.\n            stride: conv stride. Replaces pooling layer.\n        \"\"\"", "\n", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "D", "=", "int", "(", "math", ".", "floor", "(", "planes", "*", "(", "baseWidth", "/", "64", ")", ")", ")", "\n", "C", "=", "cardinality", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "D", "*", "C", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "if", "ibn", ":", "\n", "            ", "self", ".", "bn1", "=", "IBN", "(", "D", "*", "C", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "D", "*", "C", ")", "\n", "", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "D", "*", "C", ",", "D", "*", "C", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "groups", "=", "C", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "D", "*", "C", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "D", "*", "C", ",", "planes", "*", "4", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "planes", "*", "4", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n", "self", ".", "downsample", "=", "downsample", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.resnext_ibn_a_2_head.Bottleneck.forward": [[72, 93], ["resnext_ibn_a_2_head.Bottleneck.conv1", "resnext_ibn_a_2_head.Bottleneck.bn1", "resnext_ibn_a_2_head.Bottleneck.relu", "resnext_ibn_a_2_head.Bottleneck.conv2", "resnext_ibn_a_2_head.Bottleneck.bn2", "resnext_ibn_a_2_head.Bottleneck.relu", "resnext_ibn_a_2_head.Bottleneck.conv3", "resnext_ibn_a_2_head.Bottleneck.bn3", "resnext_ibn_a_2_head.Bottleneck.relu", "resnext_ibn_a_2_head.Bottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.resnext_ibn_a_2_head.ResNeXt.__init__": [[101, 143], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "resnext_ibn_a_2_head.ResNeXt._make_layer", "resnext_ibn_a_2_head.ResNeXt._make_layer", "resnext_ibn_a_2_head.ResNeXt._make_layer", "resnext_ibn_a_2_head.ResNeXt._make_layer", "resnext_ibn_a_2_head.ResNeXt.conv1.weight.data.normal_", "resnext_ibn_a_2_head.ResNeXt.modules", "mixstyle.MixStyle2", "math.sqrt", "isinstance", "m.weight.data.normal_", "isinstance", "math.sqrt", "m.weight.data.fill_", "m.bias.data.zero_", "isinstance", "m.weight.data.fill_", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.solver.ranger.Ranger.__init__", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.resnet_ibn_a.ResNet_IBN._make_layer", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.resnet_ibn_a.ResNet_IBN._make_layer", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.resnet_ibn_a.ResNet_IBN._make_layer", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.resnet_ibn_a.ResNet_IBN._make_layer"], ["def", "__init__", "(", "self", ",", "last_stride", ",", "baseWidth", ",", "cardinality", ",", "layers", ",", "num_classes", ")", ":", "\n", "        ", "\"\"\" Constructor\n        Args:\n            baseWidth: baseWidth for ResNeXt.\n            cardinality: number of convolution groups.\n            layers: config of layers, e.g., [3, 4, 6, 3]\n            num_classes: number of classes\n        \"\"\"", "\n", "super", "(", "ResNeXt", ",", "self", ")", ".", "__init__", "(", ")", "\n", "block", "=", "Bottleneck", "\n", "\n", "self", ".", "cardinality", "=", "cardinality", "\n", "self", ".", "baseWidth", "=", "baseWidth", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "inplanes", "=", "64", "\n", "self", ".", "output_size", "=", "64", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "7", ",", "2", ",", "3", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "last_stride", ")", "\n", "# self.avgpool = nn.AvgPool2d(7)", "\n", "# self.fc = nn.Linear(512 * block.expansion, num_classes)", "\n", "\n", "self", ".", "conv1", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "(", "7", "*", "7", "*", "64", ")", ")", ")", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "InstanceNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n", "# susu", "\n", "", "", "self", ".", "mixstyle", "=", "MixStyle2", "(", "p", "=", "0.5", ",", "alpha", "=", "0.1", ")", "\n", "# self.stnmod = SpatialTransformer(3, (320, 320), 3)", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.resnext_ibn_a_2_head.ResNeXt._make_layer": [[145, 172], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "block"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ")", ":", "\n", "        ", "\"\"\" Stack n bottleneck modules where n is inferred from the depth of the network.\n        Args:\n            block: block type used to construct ResNext\n            planes: number of output channels (need to multiply by block.expansion)\n            blocks: number of blocks to be built\n            stride: factor to reduce the spatial dimensionality in the first bottleneck of the block.\n        Returns: a Module consisting of n sequential bottlenecks.\n        \"\"\"", "\n", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "ibn", "=", "True", "\n", "if", "planes", "==", "512", ":", "\n", "            ", "ibn", "=", "False", "\n", "", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "self", ".", "baseWidth", ",", "self", ".", "cardinality", ",", "stride", ",", "downsample", ",", "ibn", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "self", ".", "baseWidth", ",", "self", ".", "cardinality", ",", "1", ",", "None", ",", "ibn", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.resnext_ibn_a_2_head.ResNeXt.forward": [[173, 197], ["resnext_ibn_a_2_head.ResNeXt.conv1", "resnext_ibn_a_2_head.ResNeXt.bn1", "resnext_ibn_a_2_head.ResNeXt.relu", "resnext_ibn_a_2_head.ResNeXt.maxpool", "resnext_ibn_a_2_head.ResNeXt.layer1", "resnext_ibn_a_2_head.ResNeXt.mixstyle", "resnext_ibn_a_2_head.ResNeXt.layer2", "resnext_ibn_a_2_head.ResNeXt.mixstyle", "resnext_ibn_a_2_head.ResNeXt.layer3", "resnext_ibn_a_2_head.ResNeXt.layer4"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\n", "# susu ", "\n", "# rois, affine_grid = self.stnmod(x)", "\n", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "mixstyle", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "mixstyle", "(", "x", ")", "\n", "\n", "x_low", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x_low", ")", "\n", "# x = self.avgpool(x)", "\n", "# x = x.view(x.size(0), -1)", "\n", "# x = self.fc(x)", "\n", "\n", "return", "x_low", ",", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.resnext_ibn_a_2_head.ResNeXt.load_param": [[198, 204], ["torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "[].copy_", "resnext_ibn_a_2_head.ResNeXt.state_dict"], "methods", ["home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.solver.swa.SWA.state_dict"], ["", "def", "load_param", "(", "self", ",", "model_path", ")", ":", "\n", "        ", "param_dict", "=", "torch", ".", "load", "(", "model_path", ")", "\n", "for", "i", "in", "param_dict", "[", "'state_dict'", "]", ":", "\n", "            ", "if", "'fc'", "in", "i", "[", "7", ":", "]", ":", "\n", "                ", "continue", "\n", "", "self", ".", "state_dict", "(", ")", "[", "i", "[", "7", ":", "]", "]", ".", "copy_", "(", "param_dict", "[", "'state_dict'", "]", "[", "i", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.resnext_ibn_a_2_head.resnext101_ibn_a_2_head": [[205, 211], ["resnext_ibn_a_2_head.ResNeXt"], "function", ["None"], ["", "", "", "def", "resnext101_ibn_a_2_head", "(", "last_stride", ",", "baseWidth", "=", "4", ",", "cardinality", "=", "32", ")", ":", "\n", "    ", "\"\"\"\n    Construct ResNeXt-101.\n    \"\"\"", "\n", "model", "=", "ResNeXt", "(", "last_stride", ",", "baseWidth", ",", "cardinality", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "1000", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.resnext_ibn_a_2_head.resnext152_ibn_a": [[213, 219], ["resnext_ibn_a_2_head.ResNeXt"], "function", ["None"], ["", "def", "resnext152_ibn_a", "(", "last_stride", ",", "baseWidth", ",", "cardinality", ")", ":", "\n", "    ", "\"\"\"\n    Construct ResNeXt-152.\n    \"\"\"", "\n", "model", "=", "ResNeXt", "(", "last_stride", ",", "baseWidth", ",", "cardinality", ",", "[", "3", ",", "8", ",", "36", ",", "3", "]", ",", "1000", ")", "\n", "return", "model", "\n", "", ""]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.osnet_ain.ConvLayer.__init__": [[21, 46], ["torch.nn.Module.__init__", "torch.nn.Conv2d", "torch.nn.ReLU", "torch.nn.InstanceNorm2d", "torch.nn.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.solver.ranger.Ranger.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "kernel_size", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "0", ",", "\n", "groups", "=", "1", ",", "\n", "IN", "=", "False", "\n", ")", ":", "\n", "        ", "super", "(", "ConvLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "kernel_size", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "padding", ",", "\n", "bias", "=", "False", ",", "\n", "groups", "=", "groups", "\n", ")", "\n", "if", "IN", ":", "\n", "            ", "self", ".", "bn", "=", "nn", ".", "InstanceNorm2d", "(", "out_channels", ",", "affine", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "bn", "=", "nn", ".", "BatchNorm2d", "(", "out_channels", ")", "\n", "", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.osnet_ain.ConvLayer.forward": [[47, 51], ["osnet_ain.ConvLayer.conv", "osnet_ain.ConvLayer.bn", "osnet_ain.ConvLayer.relu"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv", "(", "x", ")", "\n", "x", "=", "self", ".", "bn", "(", "x", ")", "\n", "return", "self", ".", "relu", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.osnet_ain.Conv1x1.__init__": [[56, 69], ["torch.nn.Module.__init__", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.ReLU"], "methods", ["home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.solver.ranger.Ranger.__init__"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "stride", "=", "1", ",", "groups", "=", "1", ")", ":", "\n", "        ", "super", "(", "Conv1x1", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "1", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "0", ",", "\n", "bias", "=", "False", ",", "\n", "groups", "=", "groups", "\n", ")", "\n", "self", ".", "bn", "=", "nn", ".", "BatchNorm2d", "(", "out_channels", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.osnet_ain.Conv1x1.forward": [[70, 74], ["osnet_ain.Conv1x1.conv", "osnet_ain.Conv1x1.bn", "osnet_ain.Conv1x1.relu"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv", "(", "x", ")", "\n", "x", "=", "self", ".", "bn", "(", "x", ")", "\n", "return", "self", ".", "relu", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.osnet_ain.Conv1x1Linear.__init__": [[79, 87], ["torch.nn.Module.__init__", "torch.nn.Conv2d", "torch.nn.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.solver.ranger.Ranger.__init__"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "stride", "=", "1", ",", "bn", "=", "True", ")", ":", "\n", "        ", "super", "(", "Conv1x1Linear", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "\n", "in_channels", ",", "out_channels", ",", "1", ",", "stride", "=", "stride", ",", "padding", "=", "0", ",", "bias", "=", "False", "\n", ")", "\n", "self", ".", "bn", "=", "None", "\n", "if", "bn", ":", "\n", "            ", "self", ".", "bn", "=", "nn", ".", "BatchNorm2d", "(", "out_channels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.osnet_ain.Conv1x1Linear.forward": [[88, 93], ["osnet_ain.Conv1x1Linear.conv", "osnet_ain.Conv1x1Linear.bn"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv", "(", "x", ")", "\n", "if", "self", ".", "bn", "is", "not", "None", ":", "\n", "            ", "x", "=", "self", ".", "bn", "(", "x", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.osnet_ain.Conv3x3.__init__": [[98, 111], ["torch.nn.Module.__init__", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.ReLU"], "methods", ["home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.solver.ranger.Ranger.__init__"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "stride", "=", "1", ",", "groups", "=", "1", ")", ":", "\n", "        ", "super", "(", "Conv3x3", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "3", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "\n", "bias", "=", "False", ",", "\n", "groups", "=", "groups", "\n", ")", "\n", "self", ".", "bn", "=", "nn", ".", "BatchNorm2d", "(", "out_channels", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.osnet_ain.Conv3x3.forward": [[112, 116], ["osnet_ain.Conv3x3.conv", "osnet_ain.Conv3x3.bn", "osnet_ain.Conv3x3.relu"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv", "(", "x", ")", "\n", "x", "=", "self", ".", "bn", "(", "x", ")", "\n", "return", "self", ".", "relu", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.osnet_ain.LightConv3x3.__init__": [[123, 139], ["torch.nn.Module.__init__", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.ReLU"], "methods", ["home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.solver.ranger.Ranger.__init__"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ")", ":", "\n", "        ", "super", "(", "LightConv3x3", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "\n", "in_channels", ",", "out_channels", ",", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", "\n", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "\n", "out_channels", ",", "\n", "out_channels", ",", "\n", "3", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "1", ",", "\n", "bias", "=", "False", ",", "\n", "groups", "=", "out_channels", "\n", ")", "\n", "self", ".", "bn", "=", "nn", ".", "BatchNorm2d", "(", "out_channels", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.osnet_ain.LightConv3x3.forward": [[140, 145], ["osnet_ain.LightConv3x3.conv1", "osnet_ain.LightConv3x3.conv2", "osnet_ain.LightConv3x3.bn", "osnet_ain.LightConv3x3.relu"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "conv2", "(", "x", ")", "\n", "x", "=", "self", ".", "bn", "(", "x", ")", "\n", "return", "self", ".", "relu", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.osnet_ain.LightConvStream.__init__": [[150, 160], ["torch.nn.Module.__init__", "range", "torch.nn.Sequential", "osnet_ain.LightConv3x3", "osnet_ain.LightConv3x3"], "methods", ["home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.solver.ranger.Ranger.__init__"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "depth", ")", ":", "\n", "        ", "super", "(", "LightConvStream", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "depth", ">=", "1", ",", "'depth must be equal to or larger than 1, but got {}'", ".", "format", "(", "\n", "depth", "\n", ")", "\n", "layers", "=", "[", "]", "\n", "layers", "+=", "[", "LightConv3x3", "(", "in_channels", ",", "out_channels", ")", "]", "\n", "for", "i", "in", "range", "(", "depth", "-", "1", ")", ":", "\n", "            ", "layers", "+=", "[", "LightConv3x3", "(", "out_channels", ",", "out_channels", ")", "]", "\n", "", "self", ".", "layers", "=", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.osnet_ain.LightConvStream.forward": [[161, 163], ["osnet_ain.LightConvStream.layers"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "layers", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.osnet_ain.ChannelGate.__init__": [[171, 212], ["torch.nn.Module.__init__", "torch.nn.AdaptiveAvgPool2d", "torch.nn.Conv2d", "torch.nn.ReLU", "torch.nn.Conv2d", "torch.nn.LayerNorm", "torch.nn.Sigmoid", "torch.nn.ReLU", "RuntimeError"], "methods", ["home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.solver.ranger.Ranger.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "in_channels", ",", "\n", "num_gates", "=", "None", ",", "\n", "return_gates", "=", "False", ",", "\n", "gate_activation", "=", "'sigmoid'", ",", "\n", "reduction", "=", "16", ",", "\n", "layer_norm", "=", "False", "\n", ")", ":", "\n", "        ", "super", "(", "ChannelGate", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "num_gates", "is", "None", ":", "\n", "            ", "num_gates", "=", "in_channels", "\n", "", "self", ".", "return_gates", "=", "return_gates", "\n", "self", ".", "global_avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "self", ".", "fc1", "=", "nn", ".", "Conv2d", "(", "\n", "in_channels", ",", "\n", "in_channels", "//", "reduction", ",", "\n", "kernel_size", "=", "1", ",", "\n", "bias", "=", "True", ",", "\n", "padding", "=", "0", "\n", ")", "\n", "self", ".", "norm1", "=", "None", "\n", "if", "layer_norm", ":", "\n", "            ", "self", ".", "norm1", "=", "nn", ".", "LayerNorm", "(", "(", "in_channels", "//", "reduction", ",", "1", ",", "1", ")", ")", "\n", "", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Conv2d", "(", "\n", "in_channels", "//", "reduction", ",", "\n", "num_gates", ",", "\n", "kernel_size", "=", "1", ",", "\n", "bias", "=", "True", ",", "\n", "padding", "=", "0", "\n", ")", "\n", "if", "gate_activation", "==", "'sigmoid'", ":", "\n", "            ", "self", ".", "gate_activation", "=", "nn", ".", "Sigmoid", "(", ")", "\n", "", "elif", "gate_activation", "==", "'relu'", ":", "\n", "            ", "self", ".", "gate_activation", "=", "nn", ".", "ReLU", "(", ")", "\n", "", "elif", "gate_activation", "==", "'linear'", ":", "\n", "            ", "self", ".", "gate_activation", "=", "None", "\n", "", "else", ":", "\n", "            ", "raise", "RuntimeError", "(", "\n", "\"Unknown gate activation: {}\"", ".", "format", "(", "gate_activation", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.osnet_ain.ChannelGate.forward": [[214, 227], ["osnet_ain.ChannelGate.global_avgpool", "osnet_ain.ChannelGate.fc1", "osnet_ain.ChannelGate.relu", "osnet_ain.ChannelGate.fc2", "osnet_ain.ChannelGate.norm1", "osnet_ain.ChannelGate.gate_activation"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "input", "=", "x", "\n", "x", "=", "self", ".", "global_avgpool", "(", "x", ")", "\n", "x", "=", "self", ".", "fc1", "(", "x", ")", "\n", "if", "self", ".", "norm1", "is", "not", "None", ":", "\n", "            ", "x", "=", "self", ".", "norm1", "(", "x", ")", "\n", "", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "fc2", "(", "x", ")", "\n", "if", "self", ".", "gate_activation", "is", "not", "None", ":", "\n", "            ", "x", "=", "self", ".", "gate_activation", "(", "x", ")", "\n", "", "if", "self", ".", "return_gates", ":", "\n", "            ", "return", "x", "\n", "", "return", "input", "*", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.osnet_ain.OSBlock.__init__": [[232, 247], ["torch.nn.Module.__init__", "osnet_ain.Conv1x1", "torch.nn.ModuleList", "range", "osnet_ain.ChannelGate", "osnet_ain.Conv1x1Linear", "osnet_ain.Conv1x1Linear", "osnet_ain.LightConvStream"], "methods", ["home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.solver.ranger.Ranger.__init__"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "reduction", "=", "4", ",", "T", "=", "4", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "OSBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "T", ">=", "1", "\n", "assert", "out_channels", ">=", "reduction", "and", "out_channels", "%", "reduction", "==", "0", "\n", "mid_channels", "=", "out_channels", "//", "reduction", "\n", "\n", "self", ".", "conv1", "=", "Conv1x1", "(", "in_channels", ",", "mid_channels", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "t", "in", "range", "(", "1", ",", "T", "+", "1", ")", ":", "\n", "            ", "self", ".", "conv2", "+=", "[", "LightConvStream", "(", "mid_channels", ",", "mid_channels", ",", "t", ")", "]", "\n", "", "self", ".", "gate", "=", "ChannelGate", "(", "mid_channels", ")", "\n", "self", ".", "conv3", "=", "Conv1x1Linear", "(", "mid_channels", ",", "out_channels", ")", "\n", "self", ".", "downsample", "=", "None", "\n", "if", "in_channels", "!=", "out_channels", ":", "\n", "            ", "self", ".", "downsample", "=", "Conv1x1Linear", "(", "in_channels", ",", "out_channels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.osnet_ain.OSBlock.forward": [[248, 260], ["osnet_ain.OSBlock.conv1", "osnet_ain.OSBlock.conv3", "torch.nn.functional.relu", "conv2_t", "osnet_ain.OSBlock.downsample", "osnet_ain.OSBlock.gate"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "identity", "=", "x", "\n", "x1", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x2", "=", "0", "\n", "for", "conv2_t", "in", "self", ".", "conv2", ":", "\n", "            ", "x2_t", "=", "conv2_t", "(", "x1", ")", "\n", "x2", "=", "x2", "+", "self", ".", "gate", "(", "x2_t", ")", "\n", "", "x3", "=", "self", ".", "conv3", "(", "x2", ")", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "identity", "=", "self", ".", "downsample", "(", "identity", ")", "\n", "", "out", "=", "x3", "+", "identity", "\n", "return", "F", ".", "relu", "(", "out", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.osnet_ain.OSBlockINin.__init__": [[265, 281], ["torch.nn.Module.__init__", "osnet_ain.Conv1x1", "torch.nn.ModuleList", "range", "osnet_ain.ChannelGate", "osnet_ain.Conv1x1Linear", "torch.nn.InstanceNorm2d", "osnet_ain.Conv1x1Linear", "osnet_ain.LightConvStream"], "methods", ["home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.solver.ranger.Ranger.__init__"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "reduction", "=", "4", ",", "T", "=", "4", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "OSBlockINin", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "T", ">=", "1", "\n", "assert", "out_channels", ">=", "reduction", "and", "out_channels", "%", "reduction", "==", "0", "\n", "mid_channels", "=", "out_channels", "//", "reduction", "\n", "\n", "self", ".", "conv1", "=", "Conv1x1", "(", "in_channels", ",", "mid_channels", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "t", "in", "range", "(", "1", ",", "T", "+", "1", ")", ":", "\n", "            ", "self", ".", "conv2", "+=", "[", "LightConvStream", "(", "mid_channels", ",", "mid_channels", ",", "t", ")", "]", "\n", "", "self", ".", "gate", "=", "ChannelGate", "(", "mid_channels", ")", "\n", "self", ".", "conv3", "=", "Conv1x1Linear", "(", "mid_channels", ",", "out_channels", ",", "bn", "=", "False", ")", "\n", "self", ".", "downsample", "=", "None", "\n", "if", "in_channels", "!=", "out_channels", ":", "\n", "            ", "self", ".", "downsample", "=", "Conv1x1Linear", "(", "in_channels", ",", "out_channels", ")", "\n", "", "self", ".", "IN", "=", "nn", ".", "InstanceNorm2d", "(", "out_channels", ",", "affine", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.osnet_ain.OSBlockINin.forward": [[282, 295], ["osnet_ain.OSBlockINin.conv1", "osnet_ain.OSBlockINin.conv3", "osnet_ain.OSBlockINin.IN", "torch.nn.functional.relu", "conv2_t", "osnet_ain.OSBlockINin.downsample", "osnet_ain.OSBlockINin.gate"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "identity", "=", "x", "\n", "x1", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x2", "=", "0", "\n", "for", "conv2_t", "in", "self", ".", "conv2", ":", "\n", "            ", "x2_t", "=", "conv2_t", "(", "x1", ")", "\n", "x2", "=", "x2", "+", "self", ".", "gate", "(", "x2_t", ")", "\n", "", "x3", "=", "self", ".", "conv3", "(", "x2", ")", "\n", "x3", "=", "self", ".", "IN", "(", "x3", ")", "# IN inside residual", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "identity", "=", "self", ".", "downsample", "(", "identity", ")", "\n", "", "out", "=", "x3", "+", "identity", "\n", "return", "F", ".", "relu", "(", "out", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.osnet_ain.OSNet.__init__": [[309, 355], ["torch.nn.Module.__init__", "len", "osnet_ain.ConvLayer", "torch.nn.MaxPool2d", "osnet_ain.OSNet._make_layer", "torch.nn.Sequential", "osnet_ain.OSNet._make_layer", "torch.nn.Sequential", "osnet_ain.OSNet._make_layer", "osnet_ain.Conv1x1", "torch.nn.AdaptiveAvgPool2d", "osnet_ain.OSNet._construct_fc_layer", "osnet_ain.OSNet._init_params", "len", "osnet_ain.Conv1x1", "torch.nn.AvgPool2d", "osnet_ain.Conv1x1", "torch.nn.AvgPool2d", "len"], "methods", ["home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.solver.ranger.Ranger.__init__", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.resnet_ibn_a.ResNet_IBN._make_layer", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.resnet_ibn_a.ResNet_IBN._make_layer", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.resnet_ibn_a.ResNet_IBN._make_layer", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.osnet.OSNet._construct_fc_layer", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.osnet.OSNet._init_params"], ["def", "__init__", "(", "\n", "self", ",", "\n", "last_stride", ",", "\n", "blocks", ",", "\n", "layers", ",", "\n", "channels", ",", "\n", "feature_dim", "=", "512", ",", "\n", "conv1_IN", "=", "False", ",", "\n", "**", "kwargs", "\n", ")", ":", "\n", "        ", "super", "(", "OSNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "num_blocks", "=", "len", "(", "blocks", ")", "\n", "assert", "num_blocks", "==", "len", "(", "layers", ")", "\n", "assert", "num_blocks", "==", "len", "(", "channels", ")", "-", "1", "\n", "self", ".", "feature_dim", "=", "feature_dim", "\n", "\n", "# convolutional backbone", "\n", "self", ".", "conv1", "=", "ConvLayer", "(", "\n", "3", ",", "channels", "[", "0", "]", ",", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "IN", "=", "conv1_IN", "\n", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv2", "=", "self", ".", "_make_layer", "(", "\n", "blocks", "[", "0", "]", ",", "layers", "[", "0", "]", ",", "channels", "[", "0", "]", ",", "channels", "[", "1", "]", "\n", ")", "\n", "self", ".", "pool2", "=", "nn", ".", "Sequential", "(", "\n", "Conv1x1", "(", "channels", "[", "1", "]", ",", "channels", "[", "1", "]", ")", ",", "nn", ".", "AvgPool2d", "(", "2", ",", "stride", "=", "2", ")", "\n", ")", "\n", "self", ".", "conv3", "=", "self", ".", "_make_layer", "(", "\n", "blocks", "[", "1", "]", ",", "layers", "[", "1", "]", ",", "channels", "[", "1", "]", ",", "channels", "[", "2", "]", "\n", ")", "\n", "self", ".", "pool3", "=", "nn", ".", "Sequential", "(", "\n", "Conv1x1", "(", "channels", "[", "2", "]", ",", "channels", "[", "2", "]", ")", ",", "nn", ".", "AvgPool2d", "(", "2", ",", "stride", "=", "2", ")", "\n", ")", "\n", "self", ".", "conv4", "=", "self", ".", "_make_layer", "(", "\n", "blocks", "[", "2", "]", ",", "layers", "[", "2", "]", ",", "channels", "[", "2", "]", ",", "channels", "[", "3", "]", "\n", ")", "\n", "self", ".", "conv5", "=", "Conv1x1", "(", "channels", "[", "3", "]", ",", "channels", "[", "3", "]", ")", "\n", "self", ".", "global_avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "# fully connected layer", "\n", "self", ".", "fc", "=", "self", ".", "_construct_fc_layer", "(", "\n", "self", ".", "feature_dim", ",", "channels", "[", "3", "]", ",", "dropout_p", "=", "None", "\n", ")", "\n", "# identity classification layer", "\n", "#self.classifier = nn.Linear(self.feature_dim, num_classes)", "\n", "\n", "self", ".", "_init_params", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.osnet_ain.OSNet._make_layer": [[356, 362], ["range", "torch.nn.Sequential", "len"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ",", "blocks", ",", "layer", ",", "in_channels", ",", "out_channels", ")", ":", "\n", "        ", "layers", "=", "[", "]", "\n", "layers", "+=", "[", "blocks", "[", "0", "]", "(", "in_channels", ",", "out_channels", ")", "]", "\n", "for", "i", "in", "range", "(", "1", ",", "len", "(", "blocks", ")", ")", ":", "\n", "            ", "layers", "+=", "[", "blocks", "[", "i", "]", "(", "out_channels", ",", "out_channels", ")", "]", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.osnet_ain.OSNet._construct_fc_layer": [[363, 383], ["isinstance", "torch.nn.Sequential", "layers.append", "layers.append", "layers.append", "torch.nn.Linear", "torch.nn.BatchNorm1d", "torch.nn.ReLU", "layers.append", "torch.nn.Dropout"], "methods", ["None"], ["", "def", "_construct_fc_layer", "(", "self", ",", "fc_dims", ",", "input_dim", ",", "dropout_p", "=", "None", ")", ":", "\n", "        ", "if", "fc_dims", "is", "None", "or", "fc_dims", "<", "0", ":", "\n", "            ", "self", ".", "feature_dim", "=", "input_dim", "\n", "return", "None", "\n", "\n", "", "if", "isinstance", "(", "fc_dims", ",", "int", ")", ":", "\n", "            ", "fc_dims", "=", "[", "fc_dims", "]", "\n", "\n", "", "layers", "=", "[", "]", "\n", "for", "dim", "in", "fc_dims", ":", "\n", "            ", "layers", ".", "append", "(", "nn", ".", "Linear", "(", "input_dim", ",", "dim", ")", ")", "\n", "layers", ".", "append", "(", "nn", ".", "BatchNorm1d", "(", "dim", ")", ")", "\n", "layers", ".", "append", "(", "nn", ".", "ReLU", "(", ")", ")", "\n", "if", "dropout_p", "is", "not", "None", ":", "\n", "                ", "layers", ".", "append", "(", "nn", ".", "Dropout", "(", "p", "=", "dropout_p", ")", ")", "\n", "", "input_dim", "=", "dim", "\n", "\n", "", "self", ".", "feature_dim", "=", "fc_dims", "[", "-", "1", "]", "\n", "\n", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.osnet_ain.OSNet._init_params": [[384, 409], ["osnet_ain.OSNet.modules", "isinstance", "torch.nn.init.kaiming_normal_", "isinstance", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_", "isinstance", "torch.nn.init.constant_", "torch.nn.init.constant_", "isinstance", "torch.nn.init.constant_", "torch.nn.init.constant_", "isinstance", "torch.nn.init.normal_", "torch.nn.init.constant_"], "methods", ["None"], ["", "def", "_init_params", "(", "self", ")", ":", "\n", "        ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "\n", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ",", "nonlinearity", "=", "'relu'", "\n", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm1d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "InstanceNorm2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "                ", "nn", ".", "init", ".", "normal_", "(", "m", ".", "weight", ",", "0", ",", "0.01", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.osnet_ain.OSNet.featuremaps": [[410, 420], ["osnet_ain.OSNet.conv1", "osnet_ain.OSNet.maxpool", "osnet_ain.OSNet.conv2", "osnet_ain.OSNet.pool2", "osnet_ain.OSNet.conv3", "osnet_ain.OSNet.pool3", "osnet_ain.OSNet.conv4", "osnet_ain.OSNet.conv5"], "methods", ["None"], ["", "", "", "", "def", "featuremaps", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "x", "=", "self", ".", "conv2", "(", "x", ")", "\n", "x", "=", "self", ".", "pool2", "(", "x", ")", "\n", "x", "=", "self", ".", "conv3", "(", "x", ")", "\n", "x", "=", "self", ".", "pool3", "(", "x", ")", "\n", "x", "=", "self", ".", "conv4", "(", "x", ")", "\n", "x", "=", "self", ".", "conv5", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.osnet_ain.OSNet.forward": [[421, 424], ["osnet_ain.OSNet.featuremaps"], "methods", ["home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.osnet.OSNet.featuremaps"], ["", "def", "forward", "(", "self", ",", "x", ",", "label", "=", "None", ")", ":", "\n", "        ", "x", "=", "self", ".", "featuremaps", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.osnet_ain.OSNet.load_param": [[425, 431], ["torch.load", "[].copy_", "osnet_ain.OSNet.state_dict"], "methods", ["home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.solver.swa.SWA.state_dict"], ["", "def", "load_param", "(", "self", ",", "trained_path", ")", ":", "\n", "        ", "param_dict", "=", "torch", ".", "load", "(", "trained_path", ")", "\n", "for", "i", "in", "param_dict", ":", "\n", "            ", "if", "'classifier'", "in", "i", ":", "\n", "                ", "continue", "\n", "", "self", ".", "state_dict", "(", ")", "[", "i", "if", "'module.'", "not", "in", "i", "else", "i", "[", "7", ":", "]", "]", ".", "copy_", "(", "param_dict", "[", "i", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.osnet_ain.osnet_ain_x1_0": [[435, 451], ["osnet_ain.OSNet"], "function", ["None"], ["", "", "", "def", "osnet_ain_x1_0", "(", "\n", "last_stride", ",", "**", "kwargs", "\n", ")", ":", "\n", "    ", "model", "=", "OSNet", "(", "\n", "last_stride", ",", "\n", "blocks", "=", "[", "\n", "[", "OSBlockINin", ",", "OSBlockINin", "]", ",", "[", "OSBlock", ",", "OSBlockINin", "]", ",", "\n", "[", "OSBlockINin", ",", "OSBlock", "]", "\n", "]", ",", "\n", "layers", "=", "[", "2", ",", "2", ",", "2", "]", ",", "\n", "channels", "=", "[", "64", ",", "256", ",", "384", ",", "512", "]", ",", "\n", "conv1_IN", "=", "True", ",", "\n", "**", "kwargs", "\n", ")", "\n", "\n", "return", "model", "", "", ""]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.res2net.Bottle2neck.__init__": [[18, 57], ["torch.Module.__init__", "int", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "range", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "math.floor", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "convs.append", "bns.append", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.solver.ranger.Ranger.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ",", "baseWidth", "=", "26", ",", "scale", "=", "4", ",", "stype", "=", "'normal'", ")", ":", "\n", "        ", "\"\"\" Constructor\n        Args:\n            inplanes: input channel dimensionality\n            planes: output channel dimensionality\n            stride: conv stride. Replaces pooling layer.\n            downsample: None when stride = 1\n            baseWidth: basic width of conv3x3\n            scale: number of scale.\n            type: 'normal': normal set. 'stage': first block of a new stage.\n        \"\"\"", "\n", "super", "(", "Bottle2neck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "width", "=", "int", "(", "math", ".", "floor", "(", "planes", "*", "(", "baseWidth", "/", "64.0", ")", ")", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "width", "*", "scale", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "width", "*", "scale", ")", "\n", "\n", "if", "scale", "==", "1", ":", "\n", "            ", "self", ".", "nums", "=", "1", "\n", "", "else", ":", "\n", "            ", "self", ".", "nums", "=", "scale", "-", "1", "\n", "", "if", "stype", "==", "'stage'", ":", "\n", "            ", "self", ".", "pool", "=", "nn", ".", "AvgPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ")", "\n", "", "convs", "=", "[", "]", "\n", "bns", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "nums", ")", ":", "\n", "            ", "convs", ".", "append", "(", "nn", ".", "Conv2d", "(", "width", ",", "width", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ")", "\n", "bns", ".", "append", "(", "nn", ".", "BatchNorm2d", "(", "width", ")", ")", "\n", "", "self", ".", "convs", "=", "nn", ".", "ModuleList", "(", "convs", ")", "\n", "self", ".", "bns", "=", "nn", ".", "ModuleList", "(", "bns", ")", "\n", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "width", "*", "scale", ",", "planes", "*", "self", ".", "expansion", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "planes", "*", "self", ".", "expansion", ")", "\n", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stype", "=", "stype", "\n", "self", ".", "scale", "=", "scale", "\n", "self", ".", "width", "=", "width", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.res2net.Bottle2neck.forward": [[58, 92], ["res2net.Bottle2neck.conv1", "res2net.Bottle2neck.bn1", "res2net.Bottle2neck.relu", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "range", "res2net.Bottle2neck.conv3", "res2net.Bottle2neck.bn3", "res2net.Bottle2neck.relu", "res2net.Bottle2neck.relu", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "res2net.Bottle2neck.downsample", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "res2net.Bottle2neck.pool"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "spx", "=", "torch", ".", "split", "(", "out", ",", "self", ".", "width", ",", "1", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "nums", ")", ":", "\n", "            ", "if", "i", "==", "0", "or", "self", ".", "stype", "==", "'stage'", ":", "\n", "                ", "sp", "=", "spx", "[", "i", "]", "\n", "", "else", ":", "\n", "                ", "sp", "=", "sp", "+", "spx", "[", "i", "]", "\n", "", "sp", "=", "self", ".", "convs", "[", "i", "]", "(", "sp", ")", "\n", "sp", "=", "self", ".", "relu", "(", "self", ".", "bns", "[", "i", "]", "(", "sp", ")", ")", "\n", "if", "i", "==", "0", ":", "\n", "                ", "out", "=", "sp", "\n", "", "else", ":", "\n", "                ", "out", "=", "torch", ".", "cat", "(", "(", "out", ",", "sp", ")", ",", "1", ")", "\n", "", "", "if", "self", ".", "scale", "!=", "1", "and", "self", ".", "stype", "==", "'normal'", ":", "\n", "            ", "out", "=", "torch", ".", "cat", "(", "(", "out", ",", "spx", "[", "self", ".", "nums", "]", ")", ",", "1", ")", "\n", "", "elif", "self", ".", "scale", "!=", "1", "and", "self", ".", "stype", "==", "'stage'", ":", "\n", "            ", "out", "=", "torch", ".", "cat", "(", "(", "out", ",", "self", ".", "pool", "(", "spx", "[", "self", ".", "nums", "]", ")", ")", ",", "1", ")", "\n", "\n", "", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.res2net.Res2Net.__init__": [[96, 126], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "res2net.Res2Net._make_layer", "res2net.Res2Net._make_layer", "res2net.Res2Net._make_layer", "res2net.Res2Net._make_layer", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "res2net.Res2Net.modules", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "isinstance", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.solver.ranger.Ranger.__init__", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.resnet_ibn_a.ResNet_IBN._make_layer", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.resnet_ibn_a.ResNet_IBN._make_layer", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.resnet_ibn_a.ResNet_IBN._make_layer", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.resnet_ibn_a.ResNet_IBN._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "last_stride", ",", "block", ",", "layers", ",", "baseWidth", "=", "26", ",", "scale", "=", "4", ",", "num_classes", "=", "1000", ")", ":", "\n", "        ", "self", ".", "inplanes", "=", "64", "\n", "super", "(", "Res2Net", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "baseWidth", "=", "baseWidth", "\n", "self", ".", "scale", "=", "scale", "\n", "self", ".", "conv1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "3", ",", "32", ",", "3", ",", "2", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "32", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "32", ",", "32", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "32", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "32", ",", "64", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "False", ")", "\n", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "last_stride", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "512", "*", "block", ".", "expansion", ",", "num_classes", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ",", "nonlinearity", "=", "'relu'", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.res2net.Res2Net._make_layer": [[127, 146], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "block"], "methods", ["None"], ["", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "AvgPool2d", "(", "kernel_size", "=", "stride", ",", "stride", "=", "stride", ",", "\n", "ceil_mode", "=", "True", ",", "count_include_pad", "=", "False", ")", ",", "\n", "nn", ".", "Conv2d", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", "=", "downsample", ",", "\n", "stype", "=", "'stage'", ",", "baseWidth", "=", "self", ".", "baseWidth", ",", "scale", "=", "self", ".", "scale", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "baseWidth", "=", "self", ".", "baseWidth", ",", "scale", "=", "self", ".", "scale", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.res2net.Res2Net.forward": [[147, 163], ["res2net.Res2Net.conv1", "res2net.Res2Net.bn1", "res2net.Res2Net.relu", "res2net.Res2Net.maxpool", "res2net.Res2Net.layer1", "res2net.Res2Net.layer2", "res2net.Res2Net.layer3", "res2net.Res2Net.layer4"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "\n", "# x = self.avgpool(x)", "\n", "# x = x.view(x.size(0), -1)", "\n", "# x = self.fc(x)", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.res2net.Res2Net.load_param": [[164, 170], ["torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "[].copy_", "res2net.Res2Net.state_dict"], "methods", ["home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.solver.swa.SWA.state_dict"], ["", "def", "load_param", "(", "self", ",", "model_path", ")", ":", "\n", "        ", "param_dict", "=", "torch", ".", "load", "(", "model_path", ")", "\n", "for", "i", "in", "param_dict", ":", "\n", "            ", "if", "'fc'", "in", "i", ":", "\n", "                ", "continue", "\n", "", "self", ".", "state_dict", "(", ")", "[", "i", "]", ".", "copy_", "(", "param_dict", "[", "i", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.res2net.res2net50_v1b": [[171, 181], ["res2net.Res2Net", "Res2Net.load_state_dict", "torch.load_url"], "function", ["home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.solver.swa.SWA.load_state_dict"], ["", "", "", "def", "res2net50_v1b", "(", "last_stride", ",", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a Res2Net-50_v1b model.\n    Res2Net-50 refers to the Res2Net-50_v1b_26w_4s.\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "Res2Net", "(", "last_stride", ",", "Bottle2neck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "baseWidth", "=", "26", ",", "scale", "=", "4", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'res2net50_v1b_26w_4s'", "]", ")", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.res2net.res2net101_v1b": [[183, 192], ["res2net.Res2Net", "Res2Net.load_state_dict", "torch.load_url"], "function", ["home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.solver.swa.SWA.load_state_dict"], ["", "def", "res2net101_v1b", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a Res2Net-50_v1b_26w_4s model.\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "Res2Net", "(", "Bottle2neck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "baseWidth", "=", "26", ",", "scale", "=", "4", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'res2net101_v1b_26w_4s'", "]", ")", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.res2net.res2net50_v1b_26w_4s": [[194, 203], ["res2net.Res2Net", "Res2Net.load_state_dict", "torch.load_url"], "function", ["home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.solver.swa.SWA.load_state_dict"], ["", "def", "res2net50_v1b_26w_4s", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a Res2Net-50_v1b_26w_4s model.\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "Res2Net", "(", "Bottle2neck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "baseWidth", "=", "26", ",", "scale", "=", "4", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'res2net50_v1b_26w_4s'", "]", ")", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.res2net.res2net101_v1b_26w_4s": [[205, 214], ["res2net.Res2Net", "Res2Net.load_state_dict", "torch.load_url"], "function", ["home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.solver.swa.SWA.load_state_dict"], ["", "def", "res2net101_v1b_26w_4s", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a Res2Net-50_v1b_26w_4s model.\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "Res2Net", "(", "Bottle2neck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "baseWidth", "=", "26", ",", "scale", "=", "4", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'res2net101_v1b_26w_4s'", "]", ")", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.res2net.res2net152_v1b_26w_4s": [[216, 225], ["res2net.Res2Net", "Res2Net.load_state_dict", "torch.load_url"], "function", ["home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.solver.swa.SWA.load_state_dict"], ["", "def", "res2net152_v1b_26w_4s", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a Res2Net-50_v1b_26w_4s model.\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "Res2Net", "(", "Bottle2neck", ",", "[", "3", ",", "8", ",", "36", ",", "3", "]", ",", "baseWidth", "=", "26", ",", "scale", "=", "4", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'res2net152_v1b_26w_4s'", "]", ")", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.resnest.IBN.__init__": [[13, 20], ["torch.nn.Module.__init__", "int", "torch.nn.InstanceNorm2d", "torch.nn.InstanceNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.solver.ranger.Ranger.__init__"], ["    ", "def", "__init__", "(", "self", ",", "planes", ")", ":", "\n", "        ", "super", "(", "IBN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "half1", "=", "int", "(", "planes", "/", "2", ")", "\n", "self", ".", "half", "=", "half1", "\n", "half2", "=", "planes", "-", "half1", "\n", "self", ".", "IN", "=", "nn", ".", "InstanceNorm2d", "(", "half1", ",", "affine", "=", "True", ")", "\n", "self", ".", "BN", "=", "nn", ".", "BatchNorm2d", "(", "half2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.resnest.IBN.forward": [[21, 27], ["torch.split", "torch.split", "torch.split", "torch.split", "resnest.IBN.IN", "resnest.IBN.BN", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "split[].contiguous", "split[].contiguous"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "split", "=", "torch", ".", "split", "(", "x", ",", "self", ".", "half", ",", "1", ")", "\n", "out1", "=", "self", ".", "IN", "(", "split", "[", "0", "]", ".", "contiguous", "(", ")", ")", "\n", "out2", "=", "self", ".", "BN", "(", "split", "[", "1", "]", ".", "contiguous", "(", ")", ")", "\n", "out", "=", "torch", ".", "cat", "(", "(", "out1", ",", "out2", ")", ",", "1", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.resnest.DropBlock2D.__init__": [[103, 105], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.resnest.SplAtConv2d.__init__": [[37, 66], ["torch.nn.Module.__init__", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "max", "norm_layer", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.Conv2d", "torch.nn.Conv2d", "norm_layer", "torch.nn.Conv2d", "torch.nn.Conv2d", "RFConv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "resnest.DropBlock2D"], "methods", ["home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.solver.ranger.Ranger.__init__"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "channels", ",", "kernel_size", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "padding", "=", "(", "0", ",", "0", ")", ",", "\n", "dilation", "=", "(", "1", ",", "1", ")", ",", "groups", "=", "1", ",", "bias", "=", "True", ",", "\n", "radix", "=", "2", ",", "reduction_factor", "=", "4", ",", "\n", "rectify", "=", "False", ",", "rectify_avg", "=", "False", ",", "norm_layer", "=", "None", ",", "\n", "dropblock_prob", "=", "0.0", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "SplAtConv2d", ",", "self", ")", ".", "__init__", "(", ")", "\n", "padding", "=", "_pair", "(", "padding", ")", "\n", "self", ".", "rectify", "=", "rectify", "and", "(", "padding", "[", "0", "]", ">", "0", "or", "padding", "[", "1", "]", ">", "0", ")", "\n", "self", ".", "rectify_avg", "=", "rectify_avg", "\n", "inter_channels", "=", "max", "(", "in_channels", "*", "radix", "//", "reduction_factor", ",", "32", ")", "\n", "self", ".", "radix", "=", "radix", "\n", "self", ".", "cardinality", "=", "groups", "\n", "self", ".", "channels", "=", "channels", "\n", "self", ".", "dropblock_prob", "=", "dropblock_prob", "\n", "if", "self", ".", "rectify", ":", "\n", "            ", "from", "rfconv", "import", "RFConv2d", "\n", "self", ".", "conv", "=", "RFConv2d", "(", "in_channels", ",", "channels", "*", "radix", ",", "kernel_size", ",", "stride", ",", "padding", ",", "dilation", ",", "\n", "groups", "=", "groups", "*", "radix", ",", "bias", "=", "bias", ",", "average_mode", "=", "rectify_avg", ",", "**", "kwargs", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "conv", "=", "Conv2d", "(", "in_channels", ",", "channels", "*", "radix", ",", "kernel_size", ",", "stride", ",", "padding", ",", "dilation", ",", "\n", "groups", "=", "groups", "*", "radix", ",", "bias", "=", "bias", ",", "**", "kwargs", ")", "\n", "", "self", ".", "use_bn", "=", "norm_layer", "is", "not", "None", "\n", "self", ".", "bn0", "=", "norm_layer", "(", "channels", "*", "radix", ")", "\n", "self", ".", "relu", "=", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "fc1", "=", "Conv2d", "(", "channels", ",", "inter_channels", ",", "1", ",", "groups", "=", "self", ".", "cardinality", ")", "\n", "self", ".", "bn1", "=", "norm_layer", "(", "inter_channels", ")", "\n", "self", ".", "fc2", "=", "Conv2d", "(", "inter_channels", ",", "channels", "*", "radix", ",", "1", ",", "groups", "=", "self", ".", "cardinality", ")", "\n", "if", "dropblock_prob", ">", "0.0", ":", "\n", "            ", "self", ".", "dropblock", "=", "DropBlock2D", "(", "dropblock_prob", ",", "3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.resnest.SplAtConv2d.forward": [[67, 100], ["resnest.SplAtConv2d.conv", "resnest.SplAtConv2d.relu", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d", "resnest.SplAtConv2d.fc1", "resnest.SplAtConv2d.relu", "resnest.SplAtConv2d.fc2().view", "sum.contiguous", "resnest.SplAtConv2d.bn0", "resnest.SplAtConv2d.dropblock", "torch.split", "torch.split", "torch.split", "torch.split", "sum", "resnest.SplAtConv2d.bn1", "torch.softmax().view", "torch.softmax().view", "torch.sigmoid().view", "torch.sigmoid().view", "torch.split", "torch.split", "torch.split", "torch.split", "sum", "resnest.SplAtConv2d.fc2", "torch.softmax", "torch.softmax", "torch.sigmoid", "torch.sigmoid", "zip"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv", "(", "x", ")", "\n", "if", "self", ".", "use_bn", ":", "\n", "            ", "x", "=", "self", ".", "bn0", "(", "x", ")", "\n", "", "if", "self", ".", "dropblock_prob", ">", "0.0", ":", "\n", "            ", "x", "=", "self", ".", "dropblock", "(", "x", ")", "\n", "", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "\n", "batch", ",", "channel", "=", "x", ".", "shape", "[", ":", "2", "]", "\n", "if", "self", ".", "radix", ">", "1", ":", "\n", "            ", "splited", "=", "torch", ".", "split", "(", "x", ",", "channel", "//", "self", ".", "radix", ",", "dim", "=", "1", ")", "\n", "gap", "=", "sum", "(", "splited", ")", "\n", "", "else", ":", "\n", "            ", "gap", "=", "x", "\n", "", "gap", "=", "F", ".", "adaptive_avg_pool2d", "(", "gap", ",", "1", ")", "\n", "gap", "=", "self", ".", "fc1", "(", "gap", ")", "\n", "\n", "if", "self", ".", "use_bn", ":", "\n", "            ", "gap", "=", "self", ".", "bn1", "(", "gap", ")", "\n", "", "gap", "=", "self", ".", "relu", "(", "gap", ")", "\n", "\n", "atten", "=", "self", ".", "fc2", "(", "gap", ")", ".", "view", "(", "(", "batch", ",", "self", ".", "radix", ",", "self", ".", "channels", ")", ")", "\n", "if", "self", ".", "radix", ">", "1", ":", "\n", "            ", "atten", "=", "F", ".", "softmax", "(", "atten", ",", "dim", "=", "1", ")", ".", "view", "(", "batch", ",", "-", "1", ",", "1", ",", "1", ")", "\n", "", "else", ":", "\n", "            ", "atten", "=", "F", ".", "sigmoid", "(", "atten", ",", "dim", "=", "1", ")", ".", "view", "(", "batch", ",", "-", "1", ",", "1", ",", "1", ")", "\n", "\n", "", "if", "self", ".", "radix", ">", "1", ":", "\n", "            ", "atten", "=", "torch", ".", "split", "(", "atten", ",", "channel", "//", "self", ".", "radix", ",", "dim", "=", "1", ")", "\n", "out", "=", "sum", "(", "[", "att", "*", "split", "for", "(", "att", ",", "split", ")", "in", "zip", "(", "atten", ",", "splited", ")", "]", ")", "\n", "", "else", ":", "\n", "            ", "out", "=", "atten", "*", "x", "\n", "", "return", "out", ".", "contiguous", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.resnest.GlobalAvgPool2d.__init__": [[107, 110], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.solver.ranger.Ranger.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "\"\"\"Global average pooling over the input's spatial dimensions\"\"\"", "\n", "super", "(", "GlobalAvgPool2d", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.resnest.GlobalAvgPool2d.forward": [[111, 113], ["torch.nn.functional.adaptive_avg_pool2d().view", "torch.nn.functional.adaptive_avg_pool2d().view", "inputs.size", "torch.nn.functional.adaptive_avg_pool2d", "torch.nn.functional.adaptive_avg_pool2d"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "return", "nn", ".", "functional", ".", "adaptive_avg_pool2d", "(", "inputs", ",", "1", ")", ".", "view", "(", "inputs", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.resnest.Bottleneck.__init__": [[119, 181], ["torch.nn.Module.__init__", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "norm_layer", "torch.nn.ReLU", "torch.nn.ReLU", "int", "resnest.IBN", "norm_layer", "torch.nn.AvgPool2d", "torch.nn.AvgPool2d", "resnest.DropBlock2D", "resnest.DropBlock2D", "resnest.SplAtConv2d", "zeros_", "resnest.DropBlock2D", "RFConv2d", "norm_layer", "torch.nn.Conv2d", "torch.nn.Conv2d", "norm_layer"], "methods", ["home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.solver.ranger.Ranger.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ",", "\n", "radix", "=", "1", ",", "cardinality", "=", "1", ",", "bottleneck_width", "=", "64", ",", "\n", "avd", "=", "False", ",", "avd_first", "=", "False", ",", "dilation", "=", "1", ",", "is_first", "=", "False", ",", "\n", "rectified_conv", "=", "False", ",", "rectify_avg", "=", "False", ",", "\n", "norm_layer", "=", "None", ",", "dropblock_prob", "=", "0.0", ",", "last_gamma", "=", "False", ",", "ibn", "=", "False", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "group_width", "=", "int", "(", "planes", "*", "(", "bottleneck_width", "/", "64.", ")", ")", "*", "cardinality", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "group_width", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "if", "ibn", ":", "\n", "            ", "self", ".", "bn1", "=", "IBN", "(", "group_width", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "bn1", "=", "norm_layer", "(", "group_width", ")", "\n", "", "self", ".", "dropblock_prob", "=", "dropblock_prob", "\n", "self", ".", "radix", "=", "radix", "\n", "self", ".", "avd", "=", "avd", "and", "(", "stride", ">", "1", "or", "is_first", ")", "\n", "self", ".", "avd_first", "=", "avd_first", "\n", "\n", "if", "self", ".", "avd", ":", "\n", "            ", "self", ".", "avd_layer", "=", "nn", ".", "AvgPool2d", "(", "3", ",", "stride", ",", "padding", "=", "1", ")", "\n", "stride", "=", "1", "\n", "\n", "", "if", "dropblock_prob", ">", "0.0", ":", "\n", "            ", "self", ".", "dropblock1", "=", "DropBlock2D", "(", "dropblock_prob", ",", "3", ")", "\n", "if", "radix", "==", "1", ":", "\n", "                ", "self", ".", "dropblock2", "=", "DropBlock2D", "(", "dropblock_prob", ",", "3", ")", "\n", "", "self", ".", "dropblock3", "=", "DropBlock2D", "(", "dropblock_prob", ",", "3", ")", "\n", "\n", "", "if", "radix", ">", "1", ":", "\n", "            ", "self", ".", "conv2", "=", "SplAtConv2d", "(", "\n", "group_width", ",", "group_width", ",", "kernel_size", "=", "3", ",", "\n", "stride", "=", "stride", ",", "padding", "=", "dilation", ",", "\n", "dilation", "=", "dilation", ",", "groups", "=", "cardinality", ",", "bias", "=", "False", ",", "\n", "radix", "=", "radix", ",", "rectify", "=", "rectified_conv", ",", "\n", "rectify_avg", "=", "rectify_avg", ",", "\n", "norm_layer", "=", "norm_layer", ",", "\n", "dropblock_prob", "=", "dropblock_prob", ")", "\n", "", "elif", "rectified_conv", ":", "\n", "            ", "from", "rfconv", "import", "RFConv2d", "\n", "self", ".", "conv2", "=", "RFConv2d", "(", "\n", "group_width", ",", "group_width", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "dilation", ",", "dilation", "=", "dilation", ",", "\n", "groups", "=", "cardinality", ",", "bias", "=", "False", ",", "\n", "average_mode", "=", "rectify_avg", ")", "\n", "self", ".", "bn2", "=", "norm_layer", "(", "group_width", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "\n", "group_width", ",", "group_width", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "dilation", ",", "dilation", "=", "dilation", ",", "\n", "groups", "=", "cardinality", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "norm_layer", "(", "group_width", ")", "\n", "\n", "", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "\n", "group_width", ",", "planes", "*", "4", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "norm_layer", "(", "planes", "*", "4", ")", "\n", "\n", "if", "last_gamma", ":", "\n", "            ", "from", "torch", ".", "nn", ".", "init", "import", "zeros_", "\n", "zeros_", "(", "self", ".", "bn3", ".", "weight", ")", "\n", "", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "dilation", "=", "dilation", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.resnest.Bottleneck.forward": [[182, 216], ["resnest.Bottleneck.conv1", "resnest.Bottleneck.bn1", "resnest.Bottleneck.relu", "resnest.Bottleneck.conv2", "resnest.Bottleneck.conv3", "resnest.Bottleneck.bn3", "resnest.Bottleneck.relu", "resnest.Bottleneck.dropblock1", "resnest.Bottleneck.avd_layer", "resnest.Bottleneck.bn2", "resnest.Bottleneck.relu", "resnest.Bottleneck.avd_layer", "resnest.Bottleneck.dropblock3", "resnest.Bottleneck.downsample", "resnest.Bottleneck.dropblock2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "if", "self", ".", "dropblock_prob", ">", "0.0", ":", "\n", "            ", "out", "=", "self", ".", "dropblock1", "(", "out", ")", "\n", "", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "if", "self", ".", "avd", "and", "self", ".", "avd_first", ":", "\n", "            ", "out", "=", "self", ".", "avd_layer", "(", "out", ")", "\n", "\n", "", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "if", "self", ".", "radix", "==", "1", ":", "\n", "            ", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "if", "self", ".", "dropblock_prob", ">", "0.0", ":", "\n", "                ", "out", "=", "self", ".", "dropblock2", "(", "out", ")", "\n", "", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "", "if", "self", ".", "avd", "and", "not", "self", ".", "avd_first", ":", "\n", "            ", "out", "=", "self", ".", "avd_layer", "(", "out", ")", "\n", "\n", "", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "if", "self", ".", "dropblock_prob", ">", "0.0", ":", "\n", "            ", "out", "=", "self", ".", "dropblock3", "(", "out", ")", "\n", "\n", "", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.resnest.ResNet.__init__": [[242, 319], ["torch.nn.Module.__init__", "norm_layer", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.MaxPool2d", "torch.nn.MaxPool2d", "resnest.ResNet._make_layer", "resnest.ResNet._make_layer", "resnest.GlobalAvgPool2d", "torch.nn.Linear", "torch.nn.Linear", "resnest.ResNet.modules", "torch.nn.Sequential", "torch.nn.Sequential", "conv_layer", "resnest.ResNet._make_layer", "resnest.ResNet._make_layer", "torch.nn.Dropout", "torch.nn.Dropout", "isinstance", "conv_layer", "norm_layer", "torch.nn.ReLU", "torch.nn.ReLU", "conv_layer", "norm_layer", "torch.nn.ReLU", "torch.nn.ReLU", "conv_layer", "resnest.ResNet._make_layer", "resnest.ResNet._make_layer", "resnest.ResNet._make_layer", "resnest.ResNet._make_layer", "m.weight.data.normal_", "isinstance", "math.sqrt", "m.weight.data.fill_", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.solver.ranger.Ranger.__init__", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.resnet_ibn_a.ResNet_IBN._make_layer", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.resnet_ibn_a.ResNet_IBN._make_layer", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.resnet_ibn_a.ResNet_IBN._make_layer", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.resnet_ibn_a.ResNet_IBN._make_layer", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.resnet_ibn_a.ResNet_IBN._make_layer", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.resnet_ibn_a.ResNet_IBN._make_layer", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.resnet_ibn_a.ResNet_IBN._make_layer", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.resnet_ibn_a.ResNet_IBN._make_layer"], ["def", "__init__", "(", "self", ",", "last_stride", ",", "block", ",", "layers", ",", "radix", "=", "1", ",", "groups", "=", "1", ",", "bottleneck_width", "=", "64", ",", "\n", "num_classes", "=", "1000", ",", "dilated", "=", "False", ",", "dilation", "=", "1", ",", "\n", "deep_stem", "=", "False", ",", "stem_width", "=", "64", ",", "avg_down", "=", "False", ",", "\n", "rectified_conv", "=", "False", ",", "rectify_avg", "=", "False", ",", "\n", "avd", "=", "False", ",", "avd_first", "=", "False", ",", "\n", "final_drop", "=", "0.0", ",", "dropblock_prob", "=", "0", ",", "\n", "last_gamma", "=", "False", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ")", ":", "\n", "        ", "self", ".", "cardinality", "=", "groups", "\n", "self", ".", "bottleneck_width", "=", "bottleneck_width", "\n", "# ResNet-D params", "\n", "self", ".", "inplanes", "=", "stem_width", "*", "2", "if", "deep_stem", "else", "64", "\n", "self", ".", "avg_down", "=", "avg_down", "\n", "self", ".", "last_gamma", "=", "last_gamma", "\n", "# ResNeSt params", "\n", "self", ".", "radix", "=", "radix", "\n", "self", ".", "avd", "=", "avd", "\n", "self", ".", "avd_first", "=", "avd_first", "\n", "\n", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "rectified_conv", "=", "rectified_conv", "\n", "self", ".", "rectify_avg", "=", "rectify_avg", "\n", "if", "rectified_conv", ":", "\n", "            ", "from", "rfconv", "import", "RFConv2d", "\n", "conv_layer", "=", "RFConv2d", "\n", "", "else", ":", "\n", "            ", "conv_layer", "=", "nn", ".", "Conv2d", "\n", "", "conv_kwargs", "=", "{", "'average_mode'", ":", "rectify_avg", "}", "if", "rectified_conv", "else", "{", "}", "\n", "if", "deep_stem", ":", "\n", "            ", "self", ".", "conv1", "=", "nn", ".", "Sequential", "(", "\n", "conv_layer", "(", "3", ",", "stem_width", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "False", ",", "**", "conv_kwargs", ")", ",", "\n", "norm_layer", "(", "stem_width", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "conv_layer", "(", "stem_width", ",", "stem_width", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ",", "**", "conv_kwargs", ")", ",", "\n", "norm_layer", "(", "stem_width", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "conv_layer", "(", "stem_width", ",", "stem_width", "*", "2", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ",", "**", "conv_kwargs", ")", ",", "\n", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "conv1", "=", "conv_layer", "(", "3", ",", "64", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "\n", "bias", "=", "False", ",", "**", "conv_kwargs", ")", "\n", "", "self", ".", "bn1", "=", "norm_layer", "(", "self", ".", "inplanes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ",", "norm_layer", "=", "norm_layer", ",", "is_first", "=", "False", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ",", "norm_layer", "=", "norm_layer", ")", "\n", "if", "dilated", "or", "dilation", "==", "4", ":", "\n", "            ", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "1", ",", "\n", "dilation", "=", "2", ",", "norm_layer", "=", "norm_layer", ",", "\n", "dropblock_prob", "=", "dropblock_prob", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "1", ",", "\n", "dilation", "=", "4", ",", "norm_layer", "=", "norm_layer", ",", "\n", "dropblock_prob", "=", "dropblock_prob", ")", "\n", "", "elif", "dilation", "==", "2", ":", "\n", "            ", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ",", "\n", "dilation", "=", "1", ",", "norm_layer", "=", "norm_layer", ",", "\n", "dropblock_prob", "=", "dropblock_prob", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "1", ",", "\n", "dilation", "=", "2", ",", "norm_layer", "=", "norm_layer", ",", "\n", "dropblock_prob", "=", "dropblock_prob", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ",", "\n", "norm_layer", "=", "norm_layer", ",", "\n", "dropblock_prob", "=", "dropblock_prob", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "last_stride", ",", "\n", "norm_layer", "=", "norm_layer", ",", "\n", "dropblock_prob", "=", "dropblock_prob", ")", "\n", "", "self", ".", "avgpool", "=", "GlobalAvgPool2d", "(", ")", "\n", "self", ".", "drop", "=", "nn", ".", "Dropout", "(", "final_drop", ")", "if", "final_drop", ">", "0.0", "else", "None", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "512", "*", "block", ".", "expansion", ",", "num_classes", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "norm_layer", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.resnest.ResNet._make_layer": [[320, 374], ["range", "torch.nn.Sequential", "torch.nn.Sequential", "down_layers.append", "torch.nn.Sequential", "torch.nn.Sequential", "layers.append", "layers.append", "down_layers.append", "down_layers.append", "norm_layer", "block", "layers.append", "RuntimeError", "block", "down_layers.append", "down_layers.append", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "block", "torch.nn.AvgPool2d", "torch.nn.AvgPool2d", "torch.nn.AvgPool2d", "torch.nn.AvgPool2d"], "methods", ["None"], ["", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ",", "dilation", "=", "1", ",", "norm_layer", "=", "None", ",", "\n", "dropblock_prob", "=", "0.0", ",", "is_first", "=", "True", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "down_layers", "=", "[", "]", "\n", "if", "self", ".", "avg_down", ":", "\n", "                ", "if", "dilation", "==", "1", ":", "\n", "                    ", "down_layers", ".", "append", "(", "nn", ".", "AvgPool2d", "(", "kernel_size", "=", "stride", ",", "stride", "=", "stride", ",", "\n", "ceil_mode", "=", "True", ",", "count_include_pad", "=", "False", ")", ")", "\n", "", "else", ":", "\n", "                    ", "down_layers", ".", "append", "(", "nn", ".", "AvgPool2d", "(", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "\n", "ceil_mode", "=", "True", ",", "count_include_pad", "=", "False", ")", ")", "\n", "", "down_layers", ".", "append", "(", "nn", ".", "Conv2d", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "bias", "=", "False", ")", ")", "\n", "", "else", ":", "\n", "                ", "down_layers", ".", "append", "(", "nn", ".", "Conv2d", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ")", "\n", "", "down_layers", ".", "append", "(", "norm_layer", "(", "planes", "*", "block", ".", "expansion", ")", ")", "\n", "downsample", "=", "nn", ".", "Sequential", "(", "*", "down_layers", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "if", "dilation", "==", "1", "or", "dilation", "==", "2", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", "=", "downsample", ",", "\n", "radix", "=", "self", ".", "radix", ",", "cardinality", "=", "self", ".", "cardinality", ",", "\n", "bottleneck_width", "=", "self", ".", "bottleneck_width", ",", "\n", "avd", "=", "self", ".", "avd", ",", "avd_first", "=", "self", ".", "avd_first", ",", "\n", "dilation", "=", "1", ",", "is_first", "=", "is_first", ",", "rectified_conv", "=", "self", ".", "rectified_conv", ",", "\n", "rectify_avg", "=", "self", ".", "rectify_avg", ",", "\n", "norm_layer", "=", "norm_layer", ",", "dropblock_prob", "=", "dropblock_prob", ",", "\n", "last_gamma", "=", "self", ".", "last_gamma", ")", ")", "\n", "", "elif", "dilation", "==", "4", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", "=", "downsample", ",", "\n", "radix", "=", "self", ".", "radix", ",", "cardinality", "=", "self", ".", "cardinality", ",", "\n", "bottleneck_width", "=", "self", ".", "bottleneck_width", ",", "\n", "avd", "=", "self", ".", "avd", ",", "avd_first", "=", "self", ".", "avd_first", ",", "\n", "dilation", "=", "2", ",", "is_first", "=", "is_first", ",", "rectified_conv", "=", "self", ".", "rectified_conv", ",", "\n", "rectify_avg", "=", "self", ".", "rectify_avg", ",", "\n", "norm_layer", "=", "norm_layer", ",", "dropblock_prob", "=", "dropblock_prob", ",", "\n", "last_gamma", "=", "self", ".", "last_gamma", ")", ")", "\n", "", "else", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"=> unknown dilation size: {}\"", ".", "format", "(", "dilation", ")", ")", "\n", "\n", "", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "\n", "radix", "=", "self", ".", "radix", ",", "cardinality", "=", "self", ".", "cardinality", ",", "\n", "bottleneck_width", "=", "self", ".", "bottleneck_width", ",", "\n", "avd", "=", "self", ".", "avd", ",", "avd_first", "=", "self", ".", "avd_first", ",", "\n", "dilation", "=", "dilation", ",", "rectified_conv", "=", "self", ".", "rectified_conv", ",", "\n", "rectify_avg", "=", "self", ".", "rectify_avg", ",", "\n", "norm_layer", "=", "norm_layer", ",", "dropblock_prob", "=", "dropblock_prob", ",", "\n", "last_gamma", "=", "self", ".", "last_gamma", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.resnest.ResNet.forward": [[375, 394], ["resnest.ResNet.conv1", "resnest.ResNet.bn1", "resnest.ResNet.relu", "resnest.ResNet.maxpool", "resnest.ResNet.layer1", "resnest.ResNet.layer2", "resnest.ResNet.layer3", "resnest.ResNet.layer4"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "\n", "# x = self.avgpool(x)", "\n", "# #x = x.view(x.size(0), -1)", "\n", "# x = torch.flatten(x, 1)", "\n", "# if self.drop:", "\n", "#     x = self.drop(x)", "\n", "# x = self.fc(x)", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.resnest.ResNet.load_param": [[395, 405], ["torch.load", "torch.load", "torch.load", "torch.load", "[].copy_", "resnest.ResNet.state_dict().keys", "print", "print", "resnest.ResNet.state_dict", "resnest.ResNet.state_dict", "resnest.ResNet.state_dict", "resnest.ResNet.state_dict"], "methods", ["home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.solver.swa.SWA.state_dict", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.solver.swa.SWA.state_dict", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.solver.swa.SWA.state_dict", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.solver.swa.SWA.state_dict"], ["", "def", "load_param", "(", "self", ",", "model_path", ")", ":", "\n", "        ", "param_dict", "=", "torch", ".", "load", "(", "model_path", ")", "\n", "for", "i", "in", "param_dict", ":", "\n", "            ", "if", "i", "not", "in", "self", ".", "state_dict", "(", ")", ".", "keys", "(", ")", ":", "\n", "                ", "print", "(", "'skip {} in state_dict'", ".", "format", "(", "i", ")", ")", "\n", "continue", "\n", "", "elif", "self", ".", "state_dict", "(", ")", "[", "i", "]", ".", "shape", "!=", "param_dict", "[", "i", "]", ".", "shape", ":", "\n", "                ", "print", "(", "'skip {}, shape dismatch {} vs {}'", ".", "format", "(", "i", ",", "self", ".", "state_dict", "(", ")", "[", "i", "]", ".", "shape", ",", "param_dict", "[", "i", "]", ".", "shape", ")", ")", "\n", "continue", "\n", "", "self", ".", "state_dict", "(", ")", "[", "i", "]", ".", "copy_", "(", "param_dict", "[", "i", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.resnest.resnest50": [[407, 413], ["resnest.ResNet"], "function", ["None"], ["", "", "", "def", "resnest50", "(", "last_stride", ",", "**", "kwargs", ")", ":", "\n", "    ", "model", "=", "ResNet", "(", "last_stride", ",", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "\n", "radix", "=", "2", ",", "groups", "=", "1", ",", "bottleneck_width", "=", "64", ",", "\n", "deep_stem", "=", "True", ",", "stem_width", "=", "32", ",", "avg_down", "=", "True", ",", "\n", "avd", "=", "True", ",", "avd_first", "=", "False", ",", "**", "kwargs", ")", "\n", "return", "model", "", "", ""]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.resnet_ibn_b.BasicBlock.__init__": [[25, 34], ["torch.Module.__init__", "resnet_ibn_b.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "resnet_ibn_b.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.solver.ranger.Ranger.__init__", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.resnet.conv3x3", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.resnet.conv3x3"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.resnet_ibn_b.BasicBlock.forward": [[35, 52], ["resnet_ibn_b.BasicBlock.conv1", "resnet_ibn_b.BasicBlock.bn1", "resnet_ibn_b.BasicBlock.relu", "resnet_ibn_b.BasicBlock.conv2", "resnet_ibn_b.BasicBlock.bn2", "resnet_ibn_b.BasicBlock.relu", "resnet_ibn_b.BasicBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.resnet_ibn_b.Bottleneck.__init__": [[57, 72], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d"], "methods", ["home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.solver.ranger.Ranger.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ",", "IN", "=", "False", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", "*", "self", ".", "expansion", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "planes", "*", "self", ".", "expansion", ")", "\n", "self", ".", "IN", "=", "None", "\n", "if", "IN", ":", "\n", "            ", "self", ".", "IN", "=", "nn", ".", "InstanceNorm2d", "(", "planes", "*", "4", ",", "affine", "=", "True", ")", "\n", "", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.resnet_ibn_b.Bottleneck.forward": [[73, 96], ["resnet_ibn_b.Bottleneck.conv1", "resnet_ibn_b.Bottleneck.bn1", "resnet_ibn_b.Bottleneck.relu", "resnet_ibn_b.Bottleneck.conv2", "resnet_ibn_b.Bottleneck.bn2", "resnet_ibn_b.Bottleneck.relu", "resnet_ibn_b.Bottleneck.conv3", "resnet_ibn_b.Bottleneck.bn3", "resnet_ibn_b.Bottleneck.relu", "resnet_ibn_b.Bottleneck.downsample", "resnet_ibn_b.Bottleneck.IN"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "if", "self", ".", "IN", "is", "not", "None", ":", "\n", "            ", "out", "=", "self", ".", "IN", "(", "out", ")", "\n", "", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.resnet_ibn_b.ResNet.__init__": [[100, 126], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "resnet_ibn_b.ResNet._make_layer", "resnet_ibn_b.ResNet._make_layer", "resnet_ibn_b.ResNet._make_layer", "resnet_ibn_b.ResNet._make_layer", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.Linear", "torch.Linear", "torch.Linear", "resnet_ibn_b.ResNet.modules", "isinstance", "m.weight.data.normal_", "isinstance", "math.sqrt", "m.weight.data.fill_", "m.bias.data.zero_", "isinstance", "m.weight.data.fill_", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.solver.ranger.Ranger.__init__", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.resnet_ibn_a.ResNet_IBN._make_layer", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.resnet_ibn_a.ResNet_IBN._make_layer", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.resnet_ibn_a.ResNet_IBN._make_layer", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.resnet_ibn_a.ResNet_IBN._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "last_stride", ",", "block", ",", "layers", ",", "num_classes", "=", "1000", ")", ":", "\n", "        ", "scale", "=", "64", "\n", "self", ".", "inplanes", "=", "scale", "\n", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "scale", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "InstanceNorm2d", "(", "scale", ",", "affine", "=", "True", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "scale", ",", "layers", "[", "0", "]", ",", "stride", "=", "1", ",", "IN", "=", "True", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "scale", "*", "2", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ",", "IN", "=", "True", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "scale", "*", "4", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "scale", "*", "8", ",", "layers", "[", "3", "]", ",", "stride", "=", "last_stride", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AvgPool2d", "(", "7", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "scale", "*", "8", "*", "block", ".", "expansion", ",", "num_classes", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "InstanceNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.resnet_ibn_b.ResNet._make_layer": [[127, 144], ["layers.append", "range", "layers.append", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "block", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "block"], "methods", ["None"], ["", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ",", "IN", "=", "False", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", "-", "1", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ")", ")", "\n", "", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "IN", "=", "IN", ")", ")", "\n", "\n", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.resnet_ibn_b.ResNet.forward": [[145, 161], ["resnet_ibn_b.ResNet.conv1", "resnet_ibn_b.ResNet.bn1", "resnet_ibn_b.ResNet.relu", "resnet_ibn_b.ResNet.maxpool", "resnet_ibn_b.ResNet.layer1", "resnet_ibn_b.ResNet.layer2", "resnet_ibn_b.ResNet.layer3", "resnet_ibn_b.ResNet.layer4"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "\n", "# x = self.avgpool(x)", "\n", "# x = x.view(x.size(0), -1)", "\n", "# x = self.fc(x)", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.resnet_ibn_b.ResNet.load_param": [[162, 168], ["torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "[].copy_", "resnet_ibn_b.ResNet.state_dict"], "methods", ["home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.solver.swa.SWA.state_dict"], ["", "def", "load_param", "(", "self", ",", "model_path", ")", ":", "\n", "        ", "param_dict", "=", "torch", ".", "load", "(", "model_path", ")", "\n", "for", "i", "in", "param_dict", ":", "\n", "            ", "if", "'fc'", "in", "i", ":", "\n", "                ", "continue", "\n", "", "self", ".", "state_dict", "(", ")", "[", "i", "]", ".", "copy_", "(", "param_dict", "[", "i", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.resnet_ibn_b.conv3x3": [[16, 20], ["torch.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"3x3 convolution with padding\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.resnet_ibn_b.resnet50_ibn_b": [[170, 179], ["resnet_ibn_b.ResNet", "ResNet.load_state_dict", "torch.load_url"], "function", ["home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.solver.swa.SWA.load_state_dict"], ["", "", "", "def", "resnet50_ibn_b", "(", "last_stride", ",", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-50 model.\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "last_stride", ",", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet50'", "]", ")", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.resnet_ibn_b.resnet101_ibn_b": [[181, 190], ["resnet_ibn_b.ResNet", "ResNet.load_state_dict", "torch.load_url"], "function", ["home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.solver.swa.SWA.load_state_dict"], ["", "def", "resnet101_ibn_b", "(", "last_stride", ",", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-101 model.\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "last_stride", ",", "Bottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet101'", "]", ")", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.resnet_ibn_b.resnet152_ibn_b": [[192, 201], ["resnet_ibn_b.ResNet", "ResNet.load_state_dict", "torch.load_url"], "function", ["home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.solver.swa.SWA.load_state_dict"], ["", "def", "resnet152_ibn_b", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-152 model.\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "8", ",", "36", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet152'", "]", ")", ")", "\n", "", "return", "model", "", "", ""]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.resnext_ibn_a.IBN.__init__": [[22, 29], ["torch.Module.__init__", "int", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.solver.ranger.Ranger.__init__"], ["    ", "def", "__init__", "(", "self", ",", "planes", ")", ":", "\n", "        ", "super", "(", "IBN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "half1", "=", "int", "(", "planes", "/", "2", ")", "\n", "self", ".", "half", "=", "half1", "\n", "half2", "=", "planes", "-", "half1", "\n", "self", ".", "IN", "=", "nn", ".", "InstanceNorm2d", "(", "half1", ",", "affine", "=", "True", ")", "\n", "self", ".", "BN", "=", "nn", ".", "BatchNorm2d", "(", "half2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.resnext_ibn_a.IBN.forward": [[30, 36], ["torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "resnext_ibn_a.IBN.IN", "resnext_ibn_a.IBN.BN", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "split[].contiguous", "split[].contiguous"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "split", "=", "torch", ".", "split", "(", "x", ",", "self", ".", "half", ",", "1", ")", "\n", "out1", "=", "self", ".", "IN", "(", "split", "[", "0", "]", ".", "contiguous", "(", ")", ")", "\n", "out2", "=", "self", ".", "BN", "(", "split", "[", "1", "]", ".", "contiguous", "(", ")", ")", "\n", "out", "=", "torch", ".", "cat", "(", "(", "out1", ",", "out2", ")", ",", "1", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.resnext_ibn_a.Bottleneck.__init__": [[44, 69], ["torch.Module.__init__", "int", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "math.floor", "resnext_ibn_a.IBN", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.solver.ranger.Ranger.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "baseWidth", ",", "cardinality", ",", "stride", "=", "1", ",", "downsample", "=", "None", ",", "ibn", "=", "False", ")", ":", "\n", "        ", "\"\"\" Constructor\n        Args:\n            inplanes: input channel dimensionality\n            planes: output channel dimensionality\n            baseWidth: base width.\n            cardinality: num of convolution groups.\n            stride: conv stride. Replaces pooling layer.\n        \"\"\"", "\n", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "D", "=", "int", "(", "math", ".", "floor", "(", "planes", "*", "(", "baseWidth", "/", "64", ")", ")", ")", "\n", "C", "=", "cardinality", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "D", "*", "C", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "if", "ibn", ":", "\n", "            ", "self", ".", "bn1", "=", "IBN", "(", "D", "*", "C", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "D", "*", "C", ")", "\n", "", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "D", "*", "C", ",", "D", "*", "C", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "groups", "=", "C", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "D", "*", "C", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "D", "*", "C", ",", "planes", "*", "4", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "planes", "*", "4", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n", "self", ".", "downsample", "=", "downsample", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.resnext_ibn_a.Bottleneck.forward": [[72, 93], ["resnext_ibn_a.Bottleneck.conv1", "resnext_ibn_a.Bottleneck.bn1", "resnext_ibn_a.Bottleneck.relu", "resnext_ibn_a.Bottleneck.conv2", "resnext_ibn_a.Bottleneck.bn2", "resnext_ibn_a.Bottleneck.relu", "resnext_ibn_a.Bottleneck.conv3", "resnext_ibn_a.Bottleneck.bn3", "resnext_ibn_a.Bottleneck.relu", "resnext_ibn_a.Bottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.resnext_ibn_a.ResNeXt.__init__": [[101, 143], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "resnext_ibn_a.ResNeXt._make_layer", "resnext_ibn_a.ResNeXt._make_layer", "resnext_ibn_a.ResNeXt._make_layer", "resnext_ibn_a.ResNeXt._make_layer", "resnext_ibn_a.ResNeXt.conv1.weight.data.normal_", "resnext_ibn_a.ResNeXt.modules", "mixstyle.MixStyle2", "math.sqrt", "isinstance", "m.weight.data.normal_", "isinstance", "math.sqrt", "m.weight.data.fill_", "m.bias.data.zero_", "isinstance", "m.weight.data.fill_", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.solver.ranger.Ranger.__init__", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.resnet_ibn_a.ResNet_IBN._make_layer", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.resnet_ibn_a.ResNet_IBN._make_layer", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.resnet_ibn_a.ResNet_IBN._make_layer", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.resnet_ibn_a.ResNet_IBN._make_layer"], ["def", "__init__", "(", "self", ",", "last_stride", ",", "baseWidth", ",", "cardinality", ",", "layers", ",", "num_classes", ")", ":", "\n", "        ", "\"\"\" Constructor\n        Args:\n            baseWidth: baseWidth for ResNeXt.\n            cardinality: number of convolution groups.\n            layers: config of layers, e.g., [3, 4, 6, 3]\n            num_classes: number of classes\n        \"\"\"", "\n", "super", "(", "ResNeXt", ",", "self", ")", ".", "__init__", "(", ")", "\n", "block", "=", "Bottleneck", "\n", "\n", "self", ".", "cardinality", "=", "cardinality", "\n", "self", ".", "baseWidth", "=", "baseWidth", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "inplanes", "=", "64", "\n", "self", ".", "output_size", "=", "64", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "7", ",", "2", ",", "3", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "last_stride", ")", "\n", "# self.avgpool = nn.AvgPool2d(7)", "\n", "# self.fc = nn.Linear(512 * block.expansion, num_classes)", "\n", "\n", "self", ".", "conv1", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "(", "7", "*", "7", "*", "64", ")", ")", ")", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "InstanceNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n", "# susu", "\n", "", "", "self", ".", "mixstyle", "=", "MixStyle2", "(", "p", "=", "0.5", ",", "alpha", "=", "0.1", ")", "\n", "# self.stnmod = SpatialTransformer(3, (320, 320), 3)", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.resnext_ibn_a.ResNeXt._make_layer": [[145, 172], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "block"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ")", ":", "\n", "        ", "\"\"\" Stack n bottleneck modules where n is inferred from the depth of the network.\n        Args:\n            block: block type used to construct ResNext\n            planes: number of output channels (need to multiply by block.expansion)\n            blocks: number of blocks to be built\n            stride: factor to reduce the spatial dimensionality in the first bottleneck of the block.\n        Returns: a Module consisting of n sequential bottlenecks.\n        \"\"\"", "\n", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "ibn", "=", "True", "\n", "if", "planes", "==", "512", ":", "\n", "            ", "ibn", "=", "False", "\n", "", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "self", ".", "baseWidth", ",", "self", ".", "cardinality", ",", "stride", ",", "downsample", ",", "ibn", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "self", ".", "baseWidth", ",", "self", ".", "cardinality", ",", "1", ",", "None", ",", "ibn", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.resnext_ibn_a.ResNeXt.forward": [[173, 197], ["resnext_ibn_a.ResNeXt.conv1", "resnext_ibn_a.ResNeXt.bn1", "resnext_ibn_a.ResNeXt.relu", "resnext_ibn_a.ResNeXt.maxpool", "resnext_ibn_a.ResNeXt.layer1", "resnext_ibn_a.ResNeXt.mixstyle", "resnext_ibn_a.ResNeXt.layer2", "resnext_ibn_a.ResNeXt.mixstyle", "resnext_ibn_a.ResNeXt.layer3", "resnext_ibn_a.ResNeXt.layer4"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\n", "# susu ", "\n", "# rois, affine_grid = self.stnmod(x)", "\n", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "mixstyle", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "mixstyle", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "# x = self.avgpool(x)", "\n", "# x = x.view(x.size(0), -1)", "\n", "# x = self.fc(x)", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.resnext_ibn_a.ResNeXt.load_param": [[198, 204], ["torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "[].copy_", "resnext_ibn_a.ResNeXt.state_dict"], "methods", ["home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.solver.swa.SWA.state_dict"], ["", "def", "load_param", "(", "self", ",", "model_path", ")", ":", "\n", "        ", "param_dict", "=", "torch", ".", "load", "(", "model_path", ")", "\n", "for", "i", "in", "param_dict", "[", "'state_dict'", "]", ":", "\n", "            ", "if", "'fc'", "in", "i", "[", "7", ":", "]", ":", "\n", "                ", "continue", "\n", "", "self", ".", "state_dict", "(", ")", "[", "i", "[", "7", ":", "]", "]", ".", "copy_", "(", "param_dict", "[", "'state_dict'", "]", "[", "i", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.resnext_ibn_a.resnext50_ibn_a": [[206, 212], ["resnext_ibn_a.ResNeXt"], "function", ["None"], ["", "", "", "def", "resnext50_ibn_a", "(", "last_stride", ",", "baseWidth", ",", "cardinality", ")", ":", "\n", "    ", "\"\"\"\n    Construct ResNeXt-50.\n    \"\"\"", "\n", "model", "=", "ResNeXt", "(", "last_stride", ",", "baseWidth", ",", "cardinality", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "1000", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.resnext_ibn_a.resnext101_ibn_a": [[214, 220], ["resnext_ibn_a.ResNeXt"], "function", ["None"], ["", "def", "resnext101_ibn_a", "(", "last_stride", ",", "baseWidth", "=", "4", ",", "cardinality", "=", "32", ")", ":", "\n", "    ", "\"\"\"\n    Construct ResNeXt-101.\n    \"\"\"", "\n", "model", "=", "ResNeXt", "(", "last_stride", ",", "baseWidth", ",", "cardinality", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "1000", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.resnext_ibn_a.resnext152_ibn_a": [[222, 228], ["resnext_ibn_a.ResNeXt"], "function", ["None"], ["", "def", "resnext152_ibn_a", "(", "last_stride", ",", "baseWidth", ",", "cardinality", ")", ":", "\n", "    ", "\"\"\"\n    Construct ResNeXt-152.\n    \"\"\"", "\n", "model", "=", "ResNeXt", "(", "last_stride", ",", "baseWidth", ",", "cardinality", ",", "[", "3", ",", "8", ",", "36", ",", "3", "]", ",", "1000", ")", "\n", "return", "model", "\n", "", ""]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.resnext_ibn_a_attention.IBN.__init__": [[22, 29], ["torch.Module.__init__", "int", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.solver.ranger.Ranger.__init__"], ["    ", "def", "__init__", "(", "self", ",", "planes", ")", ":", "\n", "        ", "super", "(", "IBN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "half1", "=", "int", "(", "planes", "/", "2", ")", "\n", "self", ".", "half", "=", "half1", "\n", "half2", "=", "planes", "-", "half1", "\n", "self", ".", "IN", "=", "nn", ".", "InstanceNorm2d", "(", "half1", ",", "affine", "=", "True", ")", "\n", "self", ".", "BN", "=", "nn", ".", "BatchNorm2d", "(", "half2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.resnext_ibn_a_attention.IBN.forward": [[30, 36], ["torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "resnext_ibn_a_attention.IBN.IN", "resnext_ibn_a_attention.IBN.BN", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "split[].contiguous", "split[].contiguous"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "split", "=", "torch", ".", "split", "(", "x", ",", "self", ".", "half", ",", "1", ")", "\n", "out1", "=", "self", ".", "IN", "(", "split", "[", "0", "]", ".", "contiguous", "(", ")", ")", "\n", "out2", "=", "self", ".", "BN", "(", "split", "[", "1", "]", ".", "contiguous", "(", ")", ")", "\n", "out", "=", "torch", ".", "cat", "(", "(", "out1", ",", "out2", ")", ",", "1", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.resnext_ibn_a_attention.Bottleneck.__init__": [[44, 69], ["torch.Module.__init__", "int", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "math.floor", "resnext_ibn_a_attention.IBN", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.solver.ranger.Ranger.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "baseWidth", ",", "cardinality", ",", "stride", "=", "1", ",", "downsample", "=", "None", ",", "ibn", "=", "False", ")", ":", "\n", "        ", "\"\"\" Constructor\n        Args:\n            inplanes: input channel dimensionality\n            planes: output channel dimensionality\n            baseWidth: base width.\n            cardinality: num of convolution groups.\n            stride: conv stride. Replaces pooling layer.\n        \"\"\"", "\n", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "D", "=", "int", "(", "math", ".", "floor", "(", "planes", "*", "(", "baseWidth", "/", "64", ")", ")", ")", "\n", "C", "=", "cardinality", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "D", "*", "C", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "if", "ibn", ":", "\n", "            ", "self", ".", "bn1", "=", "IBN", "(", "D", "*", "C", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "D", "*", "C", ")", "\n", "", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "D", "*", "C", ",", "D", "*", "C", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "groups", "=", "C", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "D", "*", "C", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "D", "*", "C", ",", "planes", "*", "4", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "planes", "*", "4", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n", "self", ".", "downsample", "=", "downsample", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.resnext_ibn_a_attention.Bottleneck.forward": [[72, 93], ["resnext_ibn_a_attention.Bottleneck.conv1", "resnext_ibn_a_attention.Bottleneck.bn1", "resnext_ibn_a_attention.Bottleneck.relu", "resnext_ibn_a_attention.Bottleneck.conv2", "resnext_ibn_a_attention.Bottleneck.bn2", "resnext_ibn_a_attention.Bottleneck.relu", "resnext_ibn_a_attention.Bottleneck.conv3", "resnext_ibn_a_attention.Bottleneck.bn3", "resnext_ibn_a_attention.Bottleneck.relu", "resnext_ibn_a_attention.Bottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.resnext_ibn_a_attention.ResNeXt.__init__": [[101, 147], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "resnext_ibn_a_attention.ResNeXt._make_layer", "resnext_ibn_a_attention.ResNeXt._make_layer", "resnext_ibn_a_attention.ResNeXt._make_layer", "resnext_ibn_a_attention.ResNeXt._make_layer", "resnext_ibn_a_attention.ResNeXt.conv1.weight.data.normal_", "resnext_ibn_a_attention.ResNeXt.modules", "mixstyle.MixStyle2", "torch.Sequential", "torch.Sequential", "torch.Sequential", "math.sqrt", "isinstance", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "m.weight.data.normal_", "isinstance", "math.sqrt", "m.weight.data.fill_", "m.bias.data.zero_", "isinstance", "m.weight.data.fill_", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.solver.ranger.Ranger.__init__", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.resnet_ibn_a.ResNet_IBN._make_layer", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.resnet_ibn_a.ResNet_IBN._make_layer", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.resnet_ibn_a.ResNet_IBN._make_layer", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.resnet_ibn_a.ResNet_IBN._make_layer"], ["def", "__init__", "(", "self", ",", "last_stride", ",", "baseWidth", ",", "cardinality", ",", "layers", ",", "num_classes", ")", ":", "\n", "        ", "\"\"\" Constructor\n        Args:\n            baseWidth: baseWidth for ResNeXt.\n            cardinality: number of convolution groups.\n            layers: config of layers, e.g., [3, 4, 6, 3]\n            num_classes: number of classes\n        \"\"\"", "\n", "super", "(", "ResNeXt", ",", "self", ")", ".", "__init__", "(", ")", "\n", "block", "=", "Bottleneck", "\n", "\n", "self", ".", "cardinality", "=", "cardinality", "\n", "self", ".", "baseWidth", "=", "baseWidth", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "inplanes", "=", "64", "\n", "self", ".", "output_size", "=", "64", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "7", ",", "2", ",", "3", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "last_stride", ")", "\n", "# self.avgpool = nn.AvgPool2d(7)", "\n", "# self.fc = nn.Linear(512 * block.expansion, num_classes)", "\n", "\n", "self", ".", "conv1", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "(", "7", "*", "7", "*", "64", ")", ")", ")", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "InstanceNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n", "# susu", "\n", "", "", "self", ".", "mixstyle", "=", "MixStyle2", "(", "p", "=", "0.5", ",", "alpha", "=", "0.1", ")", "\n", "# self.stnmod = SpatialTransformer(3, (320, 320), 3)", "\n", "self", ".", "c_attention", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "2048", ",", "2048", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "True", ")", ",", "\n", "nn", ".", "InstanceNorm2d", "(", "num_features", "=", "2048", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.3", ",", "inplace", "=", "True", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.resnext_ibn_a_attention.ResNeXt._make_layer": [[148, 175], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "block"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ")", ":", "\n", "        ", "\"\"\" Stack n bottleneck modules where n is inferred from the depth of the network.\n        Args:\n            block: block type used to construct ResNext\n            planes: number of output channels (need to multiply by block.expansion)\n            blocks: number of blocks to be built\n            stride: factor to reduce the spatial dimensionality in the first bottleneck of the block.\n        Returns: a Module consisting of n sequential bottlenecks.\n        \"\"\"", "\n", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "ibn", "=", "True", "\n", "if", "planes", "==", "512", ":", "\n", "            ", "ibn", "=", "False", "\n", "", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "self", ".", "baseWidth", ",", "self", ".", "cardinality", ",", "stride", ",", "downsample", ",", "ibn", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "self", ".", "baseWidth", ",", "self", ".", "cardinality", ",", "1", ",", "None", ",", "ibn", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.resnext_ibn_a_attention.ResNeXt.forward": [[176, 212], ["resnext_ibn_a_attention.ResNeXt.conv1", "resnext_ibn_a_attention.ResNeXt.bn1", "resnext_ibn_a_attention.ResNeXt.relu", "resnext_ibn_a_attention.ResNeXt.maxpool", "resnext_ibn_a_attention.ResNeXt.layer1", "resnext_ibn_a_attention.ResNeXt.mixstyle", "resnext_ibn_a_attention.ResNeXt.layer2", "resnext_ibn_a_attention.ResNeXt.mixstyle", "resnext_ibn_a_attention.ResNeXt.layer3", "resnext_ibn_a_attention.ResNeXt.layer4", "resnext_ibn_a_attention.ResNeXt.c_attention", "torch.matmul().contiguous().view.size", "torch.matmul().contiguous().view.size", "torch.matmul().contiguous().view.size", "torch.matmul().contiguous().view.view", "torch.matmul().contiguous().view.view", "torch.matmul().contiguous().view.view", "torch.matmul().contiguous().view.permute", "torch.matmul().contiguous().view.permute", "torch.matmul().contiguous().view.permute", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.softmax", "torch.softmax", "torch.softmax", "resnext_ibn_a_attention.ResNeXt.contiguous().view", "torch.matmul().contiguous().view", "torch.matmul().contiguous().view", "torch.matmul().contiguous().view", "torch.matmul().contiguous().view", "torch.matmul().contiguous().view", "torch.matmul().contiguous().view", "torch.matmul().contiguous().view", "torch.matmul().contiguous().view", "torch.matmul().contiguous().view", "resnext_ibn_a_attention.ResNeXt.contiguous", "torch.matmul().contiguous", "torch.matmul().contiguous", "torch.matmul().contiguous", "torch.matmul().contiguous", "torch.matmul().contiguous", "torch.matmul().contiguous", "torch.matmul().contiguous", "torch.matmul().contiguous", "torch.matmul().contiguous", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\n", "# susu ", "\n", "# rois, affine_grid = self.stnmod(x)", "\n", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "mixstyle", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "mixstyle", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "\n", "# attention adopted from cstrack", "\n", "# b, c, h, w = x.size()", "\n", "m1", "=", "self", ".", "c_attention", "(", "x", ")", "\n", "b", ",", "c", ",", "h", ",", "w", "=", "m1", ".", "size", "(", ")", "\n", "m1", "=", "m1", ".", "view", "(", "b", ",", "c", ",", "h", "*", "w", ")", "\n", "\n", "m1_T", "=", "m1", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "\n", "m1", "=", "torch", ".", "matmul", "(", "m1", ",", "m1_T", ")", "\n", "\n", "m1", "=", "F", ".", "softmax", "(", "m1", ",", "dim", "=", "-", "1", ")", "\n", "\n", "x_reshape", "=", "x", ".", "contiguous", "(", ")", ".", "view", "(", "b", ",", "c", ",", "h", "*", "w", ")", "\n", "m1", "=", "torch", ".", "matmul", "(", "m1", ",", "x_reshape", ")", ".", "contiguous", "(", ")", ".", "view", "(", "b", ",", "c", ",", "h", ",", "w", ")", "\n", "\n", "return", "x", "+", "m1", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.resnext_ibn_a_attention.ResNeXt.load_param": [[213, 219], ["torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "[].copy_", "resnext_ibn_a_attention.ResNeXt.state_dict"], "methods", ["home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.solver.swa.SWA.state_dict"], ["", "def", "load_param", "(", "self", ",", "model_path", ")", ":", "\n", "        ", "param_dict", "=", "torch", ".", "load", "(", "model_path", ")", "\n", "for", "i", "in", "param_dict", "[", "'state_dict'", "]", ":", "\n", "            ", "if", "'fc'", "in", "i", "[", "7", ":", "]", ":", "\n", "                ", "continue", "\n", "", "self", ".", "state_dict", "(", ")", "[", "i", "[", "7", ":", "]", "]", ".", "copy_", "(", "param_dict", "[", "'state_dict'", "]", "[", "i", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.resnext_ibn_a_attention.resnext101_ibn_a_attention": [[220, 226], ["resnext_ibn_a_attention.ResNeXt"], "function", ["None"], ["", "", "", "def", "resnext101_ibn_a_attention", "(", "last_stride", ",", "baseWidth", "=", "4", ",", "cardinality", "=", "32", ")", ":", "\n", "    ", "\"\"\"\n    Construct ResNeXt-101.\n    \"\"\"", "\n", "model", "=", "ResNeXt", "(", "last_stride", ",", "baseWidth", ",", "cardinality", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "1000", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.resnext_ibn_a_attention.resnext152_ibn_a": [[228, 234], ["resnext_ibn_a_attention.ResNeXt"], "function", ["None"], ["", "def", "resnext152_ibn_a", "(", "last_stride", ",", "baseWidth", ",", "cardinality", ")", ":", "\n", "    ", "\"\"\"\n    Construct ResNeXt-152.\n    \"\"\"", "\n", "model", "=", "ResNeXt", "(", "last_stride", ",", "baseWidth", ",", "cardinality", ",", "[", "3", ",", "8", ",", "36", ",", "3", "]", ",", "1000", ")", "\n", "return", "model", "\n", "", ""]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.osnet.ConvLayer.__init__": [[31, 56], ["torch.nn.Module.__init__", "torch.nn.Conv2d", "torch.nn.ReLU", "torch.nn.InstanceNorm2d", "torch.nn.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.solver.ranger.Ranger.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "kernel_size", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "0", ",", "\n", "groups", "=", "1", ",", "\n", "IN", "=", "False", "\n", ")", ":", "\n", "        ", "super", "(", "ConvLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "kernel_size", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "padding", ",", "\n", "bias", "=", "False", ",", "\n", "groups", "=", "groups", "\n", ")", "\n", "if", "IN", ":", "\n", "            ", "self", ".", "bn", "=", "nn", ".", "InstanceNorm2d", "(", "out_channels", ",", "affine", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "bn", "=", "nn", ".", "BatchNorm2d", "(", "out_channels", ")", "\n", "", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.osnet.ConvLayer.forward": [[57, 62], ["osnet.ConvLayer.conv", "osnet.ConvLayer.bn", "osnet.ConvLayer.relu"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv", "(", "x", ")", "\n", "x", "=", "self", ".", "bn", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.osnet.Conv1x1.__init__": [[67, 80], ["torch.nn.Module.__init__", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.ReLU"], "methods", ["home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.solver.ranger.Ranger.__init__"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "stride", "=", "1", ",", "groups", "=", "1", ")", ":", "\n", "        ", "super", "(", "Conv1x1", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "1", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "0", ",", "\n", "bias", "=", "False", ",", "\n", "groups", "=", "groups", "\n", ")", "\n", "self", ".", "bn", "=", "nn", ".", "BatchNorm2d", "(", "out_channels", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.osnet.Conv1x1.forward": [[81, 86], ["osnet.Conv1x1.conv", "osnet.Conv1x1.bn", "osnet.Conv1x1.relu"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv", "(", "x", ")", "\n", "x", "=", "self", ".", "bn", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.osnet.Conv1x1Linear.__init__": [[91, 97], ["torch.nn.Module.__init__", "torch.nn.Conv2d", "torch.nn.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.solver.ranger.Ranger.__init__"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "Conv1x1Linear", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "\n", "in_channels", ",", "out_channels", ",", "1", ",", "stride", "=", "stride", ",", "padding", "=", "0", ",", "bias", "=", "False", "\n", ")", "\n", "self", ".", "bn", "=", "nn", ".", "BatchNorm2d", "(", "out_channels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.osnet.Conv1x1Linear.forward": [[98, 102], ["osnet.Conv1x1Linear.conv", "osnet.Conv1x1Linear.bn"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv", "(", "x", ")", "\n", "x", "=", "self", ".", "bn", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.osnet.Conv3x3.__init__": [[107, 120], ["torch.nn.Module.__init__", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.ReLU"], "methods", ["home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.solver.ranger.Ranger.__init__"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "stride", "=", "1", ",", "groups", "=", "1", ")", ":", "\n", "        ", "super", "(", "Conv3x3", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "3", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "\n", "bias", "=", "False", ",", "\n", "groups", "=", "groups", "\n", ")", "\n", "self", ".", "bn", "=", "nn", ".", "BatchNorm2d", "(", "out_channels", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.osnet.Conv3x3.forward": [[121, 126], ["osnet.Conv3x3.conv", "osnet.Conv3x3.bn", "osnet.Conv3x3.relu"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv", "(", "x", ")", "\n", "x", "=", "self", ".", "bn", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.osnet.LightConv3x3.__init__": [[133, 149], ["torch.nn.Module.__init__", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.ReLU"], "methods", ["home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.solver.ranger.Ranger.__init__"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ")", ":", "\n", "        ", "super", "(", "LightConv3x3", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "\n", "in_channels", ",", "out_channels", ",", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", "\n", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "\n", "out_channels", ",", "\n", "out_channels", ",", "\n", "3", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "1", ",", "\n", "bias", "=", "False", ",", "\n", "groups", "=", "out_channels", "\n", ")", "\n", "self", ".", "bn", "=", "nn", ".", "BatchNorm2d", "(", "out_channels", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.osnet.LightConv3x3.forward": [[150, 156], ["osnet.LightConv3x3.conv1", "osnet.LightConv3x3.conv2", "osnet.LightConv3x3.bn", "osnet.LightConv3x3.relu"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "conv2", "(", "x", ")", "\n", "x", "=", "self", ".", "bn", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.osnet.ChannelGate.__init__": [[164, 205], ["torch.nn.Module.__init__", "torch.nn.AdaptiveAvgPool2d", "torch.nn.Conv2d", "torch.nn.ReLU", "torch.nn.Conv2d", "torch.nn.LayerNorm", "torch.nn.Sigmoid", "torch.nn.ReLU", "RuntimeError"], "methods", ["home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.solver.ranger.Ranger.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "in_channels", ",", "\n", "num_gates", "=", "None", ",", "\n", "return_gates", "=", "False", ",", "\n", "gate_activation", "=", "'sigmoid'", ",", "\n", "reduction", "=", "16", ",", "\n", "layer_norm", "=", "False", "\n", ")", ":", "\n", "        ", "super", "(", "ChannelGate", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "num_gates", "is", "None", ":", "\n", "            ", "num_gates", "=", "in_channels", "\n", "", "self", ".", "return_gates", "=", "return_gates", "\n", "self", ".", "global_avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "self", ".", "fc1", "=", "nn", ".", "Conv2d", "(", "\n", "in_channels", ",", "\n", "in_channels", "//", "reduction", ",", "\n", "kernel_size", "=", "1", ",", "\n", "bias", "=", "True", ",", "\n", "padding", "=", "0", "\n", ")", "\n", "self", ".", "norm1", "=", "None", "\n", "if", "layer_norm", ":", "\n", "            ", "self", ".", "norm1", "=", "nn", ".", "LayerNorm", "(", "(", "in_channels", "//", "reduction", ",", "1", ",", "1", ")", ")", "\n", "", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Conv2d", "(", "\n", "in_channels", "//", "reduction", ",", "\n", "num_gates", ",", "\n", "kernel_size", "=", "1", ",", "\n", "bias", "=", "True", ",", "\n", "padding", "=", "0", "\n", ")", "\n", "if", "gate_activation", "==", "'sigmoid'", ":", "\n", "            ", "self", ".", "gate_activation", "=", "nn", ".", "Sigmoid", "(", ")", "\n", "", "elif", "gate_activation", "==", "'relu'", ":", "\n", "            ", "self", ".", "gate_activation", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "", "elif", "gate_activation", "==", "'linear'", ":", "\n", "            ", "self", ".", "gate_activation", "=", "None", "\n", "", "else", ":", "\n", "            ", "raise", "RuntimeError", "(", "\n", "\"Unknown gate activation: {}\"", ".", "format", "(", "gate_activation", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.osnet.ChannelGate.forward": [[207, 220], ["osnet.ChannelGate.global_avgpool", "osnet.ChannelGate.fc1", "osnet.ChannelGate.relu", "osnet.ChannelGate.fc2", "osnet.ChannelGate.norm1", "osnet.ChannelGate.gate_activation"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "input", "=", "x", "\n", "x", "=", "self", ".", "global_avgpool", "(", "x", ")", "\n", "x", "=", "self", ".", "fc1", "(", "x", ")", "\n", "if", "self", ".", "norm1", "is", "not", "None", ":", "\n", "            ", "x", "=", "self", ".", "norm1", "(", "x", ")", "\n", "", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "fc2", "(", "x", ")", "\n", "if", "self", ".", "gate_activation", "is", "not", "None", ":", "\n", "            ", "x", "=", "self", ".", "gate_activation", "(", "x", ")", "\n", "", "if", "self", ".", "return_gates", ":", "\n", "            ", "return", "x", "\n", "", "return", "input", "*", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.osnet.OSBlock.__init__": [[225, 260], ["torch.nn.Module.__init__", "osnet.Conv1x1", "osnet.LightConv3x3", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "osnet.ChannelGate", "osnet.Conv1x1Linear", "osnet.LightConv3x3", "osnet.LightConv3x3", "osnet.LightConv3x3", "osnet.LightConv3x3", "osnet.LightConv3x3", "osnet.LightConv3x3", "osnet.LightConv3x3", "osnet.LightConv3x3", "osnet.LightConv3x3", "osnet.Conv1x1Linear", "torch.nn.InstanceNorm2d"], "methods", ["home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.solver.ranger.Ranger.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "IN", "=", "False", ",", "\n", "bottleneck_reduction", "=", "4", ",", "\n", "**", "kwargs", "\n", ")", ":", "\n", "        ", "super", "(", "OSBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "mid_channels", "=", "out_channels", "//", "bottleneck_reduction", "\n", "self", ".", "conv1", "=", "Conv1x1", "(", "in_channels", ",", "mid_channels", ")", "\n", "self", ".", "conv2a", "=", "LightConv3x3", "(", "mid_channels", ",", "mid_channels", ")", "\n", "self", ".", "conv2b", "=", "nn", ".", "Sequential", "(", "\n", "LightConv3x3", "(", "mid_channels", ",", "mid_channels", ")", ",", "\n", "LightConv3x3", "(", "mid_channels", ",", "mid_channels", ")", ",", "\n", ")", "\n", "self", ".", "conv2c", "=", "nn", ".", "Sequential", "(", "\n", "LightConv3x3", "(", "mid_channels", ",", "mid_channels", ")", ",", "\n", "LightConv3x3", "(", "mid_channels", ",", "mid_channels", ")", ",", "\n", "LightConv3x3", "(", "mid_channels", ",", "mid_channels", ")", ",", "\n", ")", "\n", "self", ".", "conv2d", "=", "nn", ".", "Sequential", "(", "\n", "LightConv3x3", "(", "mid_channels", ",", "mid_channels", ")", ",", "\n", "LightConv3x3", "(", "mid_channels", ",", "mid_channels", ")", ",", "\n", "LightConv3x3", "(", "mid_channels", ",", "mid_channels", ")", ",", "\n", "LightConv3x3", "(", "mid_channels", ",", "mid_channels", ")", ",", "\n", ")", "\n", "self", ".", "gate", "=", "ChannelGate", "(", "mid_channels", ")", "\n", "self", ".", "conv3", "=", "Conv1x1Linear", "(", "mid_channels", ",", "out_channels", ")", "\n", "self", ".", "downsample", "=", "None", "\n", "if", "in_channels", "!=", "out_channels", ":", "\n", "            ", "self", ".", "downsample", "=", "Conv1x1Linear", "(", "in_channels", ",", "out_channels", ")", "\n", "", "self", ".", "IN", "=", "None", "\n", "if", "IN", ":", "\n", "            ", "self", ".", "IN", "=", "nn", ".", "InstanceNorm2d", "(", "out_channels", ",", "affine", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.osnet.OSBlock.forward": [[261, 276], ["osnet.OSBlock.conv1", "osnet.OSBlock.conv2a", "osnet.OSBlock.conv2b", "osnet.OSBlock.conv2c", "osnet.OSBlock.conv2d", "osnet.OSBlock.conv3", "torch.nn.functional.relu", "osnet.OSBlock.gate", "osnet.OSBlock.downsample", "osnet.OSBlock.IN", "osnet.OSBlock.gate", "osnet.OSBlock.gate", "osnet.OSBlock.gate"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "identity", "=", "x", "\n", "x1", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x2a", "=", "self", ".", "conv2a", "(", "x1", ")", "\n", "x2b", "=", "self", ".", "conv2b", "(", "x1", ")", "\n", "x2c", "=", "self", ".", "conv2c", "(", "x1", ")", "\n", "x2d", "=", "self", ".", "conv2d", "(", "x1", ")", "\n", "x2", "=", "self", ".", "gate", "(", "x2a", ")", "+", "self", ".", "gate", "(", "x2b", ")", "+", "self", ".", "gate", "(", "x2c", ")", "+", "self", ".", "gate", "(", "x2d", ")", "\n", "x3", "=", "self", ".", "conv3", "(", "x2", ")", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "identity", "=", "self", ".", "downsample", "(", "identity", ")", "\n", "", "out", "=", "x3", "+", "identity", "\n", "if", "self", ".", "IN", "is", "not", "None", ":", "\n", "            ", "out", "=", "self", ".", "IN", "(", "out", ")", "\n", "", "return", "F", ".", "relu", "(", "out", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.osnet.OSNet.__init__": [[290, 340], ["torch.nn.Module.__init__", "len", "osnet.ConvLayer", "torch.nn.MaxPool2d", "osnet.OSNet._make_layer", "osnet.OSNet._make_layer", "osnet.OSNet._make_layer", "osnet.Conv1x1", "torch.nn.AdaptiveAvgPool2d", "osnet.OSNet._construct_fc_layer", "osnet.OSNet._init_params", "len", "len"], "methods", ["home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.solver.ranger.Ranger.__init__", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.resnet_ibn_a.ResNet_IBN._make_layer", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.resnet_ibn_a.ResNet_IBN._make_layer", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.resnet_ibn_a.ResNet_IBN._make_layer", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.osnet.OSNet._construct_fc_layer", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.osnet.OSNet._init_params"], ["def", "__init__", "(", "\n", "self", ",", "\n", "last_stride", ",", "\n", "blocks", ",", "\n", "layers", ",", "\n", "channels", ",", "\n", "feature_dim", "=", "512", ",", "\n", "IN", "=", "False", ",", "\n", "**", "kwargs", "\n", ")", ":", "\n", "        ", "super", "(", "OSNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "num_blocks", "=", "len", "(", "blocks", ")", "\n", "assert", "num_blocks", "==", "len", "(", "layers", ")", "\n", "assert", "num_blocks", "==", "len", "(", "channels", ")", "-", "1", "\n", "\n", "# convolutional backbone", "\n", "self", ".", "conv1", "=", "ConvLayer", "(", "3", ",", "channels", "[", "0", "]", ",", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "IN", "=", "IN", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv2", "=", "self", ".", "_make_layer", "(", "\n", "blocks", "[", "0", "]", ",", "\n", "layers", "[", "0", "]", ",", "\n", "channels", "[", "0", "]", ",", "\n", "channels", "[", "1", "]", ",", "\n", "reduce_spatial_size", "=", "True", ",", "\n", "IN", "=", "IN", "\n", ")", "\n", "self", ".", "conv3", "=", "self", ".", "_make_layer", "(", "\n", "blocks", "[", "1", "]", ",", "\n", "layers", "[", "1", "]", ",", "\n", "channels", "[", "1", "]", ",", "\n", "channels", "[", "2", "]", ",", "\n", "reduce_spatial_size", "=", "True", "\n", ")", "\n", "self", ".", "conv4", "=", "self", ".", "_make_layer", "(", "\n", "blocks", "[", "2", "]", ",", "\n", "layers", "[", "2", "]", ",", "\n", "channels", "[", "2", "]", ",", "\n", "channels", "[", "3", "]", ",", "\n", "reduce_spatial_size", "=", "False", "if", "last_stride", "==", "1", "else", "True", "\n", ")", "\n", "self", ".", "conv5", "=", "Conv1x1", "(", "channels", "[", "3", "]", ",", "channels", "[", "3", "]", ")", "\n", "self", ".", "global_avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "# fully connected layer", "\n", "self", ".", "fc", "=", "self", ".", "_construct_fc_layer", "(", "\n", "feature_dim", ",", "channels", "[", "3", "]", ",", "dropout_p", "=", "None", "\n", ")", "\n", "# identity classification layer", "\n", "#self.classifier = nn.Linear(self.feature_dim, num_classes)", "\n", "\n", "self", ".", "_init_params", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.osnet.OSNet._make_layer": [[341, 365], ["layers.append", "range", "torch.nn.Sequential", "block", "layers.append", "layers.append", "block", "torch.nn.Sequential", "osnet.Conv1x1", "torch.nn.AvgPool2d"], "methods", ["None"], ["", "def", "_make_layer", "(", "\n", "self", ",", "\n", "block", ",", "\n", "layer", ",", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "reduce_spatial_size", ",", "\n", "IN", "=", "False", "\n", ")", ":", "\n", "        ", "layers", "=", "[", "]", "\n", "\n", "layers", ".", "append", "(", "block", "(", "in_channels", ",", "out_channels", ",", "IN", "=", "IN", ")", ")", "\n", "for", "i", "in", "range", "(", "1", ",", "layer", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "out_channels", ",", "out_channels", ",", "IN", "=", "IN", ")", ")", "\n", "\n", "", "if", "reduce_spatial_size", ":", "\n", "            ", "layers", ".", "append", "(", "\n", "nn", ".", "Sequential", "(", "\n", "Conv1x1", "(", "out_channels", ",", "out_channels", ")", ",", "\n", "nn", ".", "AvgPool2d", "(", "2", ",", "stride", "=", "2", ")", "\n", ")", "\n", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.osnet.OSNet._construct_fc_layer": [[366, 386], ["isinstance", "torch.nn.Sequential", "layers.append", "layers.append", "layers.append", "torch.nn.Linear", "torch.nn.BatchNorm1d", "torch.nn.ReLU", "layers.append", "torch.nn.Dropout"], "methods", ["None"], ["", "def", "_construct_fc_layer", "(", "self", ",", "fc_dims", ",", "input_dim", ",", "dropout_p", "=", "None", ")", ":", "\n", "        ", "if", "fc_dims", "is", "None", "or", "fc_dims", "<", "0", ":", "\n", "            ", "self", ".", "feature_dim", "=", "input_dim", "\n", "return", "None", "\n", "\n", "", "if", "isinstance", "(", "fc_dims", ",", "int", ")", ":", "\n", "            ", "fc_dims", "=", "[", "fc_dims", "]", "\n", "\n", "", "layers", "=", "[", "]", "\n", "for", "dim", "in", "fc_dims", ":", "\n", "            ", "layers", ".", "append", "(", "nn", ".", "Linear", "(", "input_dim", ",", "dim", ")", ")", "\n", "layers", ".", "append", "(", "nn", ".", "BatchNorm1d", "(", "dim", ")", ")", "\n", "layers", ".", "append", "(", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "if", "dropout_p", "is", "not", "None", ":", "\n", "                ", "layers", ".", "append", "(", "nn", ".", "Dropout", "(", "p", "=", "dropout_p", ")", ")", "\n", "", "input_dim", "=", "dim", "\n", "\n", "", "self", ".", "feature_dim", "=", "fc_dims", "[", "-", "1", "]", "\n", "\n", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.osnet.OSNet._init_params": [[387, 408], ["osnet.OSNet.modules", "isinstance", "torch.nn.init.kaiming_normal_", "isinstance", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_", "isinstance", "torch.nn.init.constant_", "torch.nn.init.constant_", "isinstance", "torch.nn.init.normal_", "torch.nn.init.constant_"], "methods", ["None"], ["", "def", "_init_params", "(", "self", ")", ":", "\n", "        ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "\n", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ",", "nonlinearity", "=", "'relu'", "\n", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm1d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "                ", "nn", ".", "init", ".", "normal_", "(", "m", ".", "weight", ",", "0", ",", "0.01", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.osnet.OSNet.featuremaps": [[409, 417], ["osnet.OSNet.conv1", "osnet.OSNet.maxpool", "osnet.OSNet.conv2", "osnet.OSNet.conv3", "osnet.OSNet.conv4", "osnet.OSNet.conv5"], "methods", ["None"], ["", "", "", "", "def", "featuremaps", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "x", "=", "self", ".", "conv2", "(", "x", ")", "\n", "x", "=", "self", ".", "conv3", "(", "x", ")", "\n", "x", "=", "self", ".", "conv4", "(", "x", ")", "\n", "x", "=", "self", ".", "conv5", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.osnet.OSNet.forward": [[418, 421], ["osnet.OSNet.featuremaps"], "methods", ["home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.osnet.OSNet.featuremaps"], ["", "def", "forward", "(", "self", ",", "x", ",", "label", "=", "None", ")", ":", "\n", "        ", "x", "=", "self", ".", "featuremaps", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.osnet.OSNet.load_param": [[422, 428], ["torch.load", "[].copy_", "osnet.OSNet.state_dict"], "methods", ["home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.solver.swa.SWA.state_dict"], ["", "def", "load_param", "(", "self", ",", "trained_path", ")", ":", "\n", "        ", "param_dict", "=", "torch", ".", "load", "(", "trained_path", ")", "\n", "for", "i", "in", "param_dict", ":", "\n", "            ", "if", "'classifier'", "in", "i", ":", "\n", "                ", "continue", "\n", "", "self", ".", "state_dict", "(", ")", "[", "i", "]", ".", "copy_", "(", "param_dict", "[", "i", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.osnet.osnet_x1_0": [[433, 443], ["osnet.OSNet"], "function", ["None"], ["", "", "", "def", "osnet_x1_0", "(", "last_stride", ",", "**", "kwargs", ")", ":", "\n", "# standard size (width x1.0)", "\n", "    ", "model", "=", "OSNet", "(", "\n", "last_stride", ",", "\n", "blocks", "=", "[", "OSBlock", ",", "OSBlock", ",", "OSBlock", "]", ",", "\n", "layers", "=", "[", "2", ",", "2", ",", "2", "]", ",", "\n", "channels", "=", "[", "64", ",", "256", ",", "384", ",", "512", "]", ",", "\n", "**", "kwargs", "\n", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.osnet.osnet_ibn_x1_0": [[444, 456], ["osnet.OSNet"], "function", ["None"], ["", "def", "osnet_ibn_x1_0", "(", "last_stride", ",", "**", "kwargs", ")", ":", "\n", "# standard size (width x1.0) + IBN layer", "\n", "# Ref: Pan et al. Two at Once: Enhancing Learning and Generalization Capacities via IBN-Net. ECCV, 2018.", "\n", "    ", "model", "=", "OSNet", "(", "\n", "last_stride", ",", "\n", "blocks", "=", "[", "OSBlock", ",", "OSBlock", ",", "OSBlock", "]", ",", "\n", "layers", "=", "[", "2", ",", "2", ",", "2", "]", ",", "\n", "channels", "=", "[", "64", ",", "256", ",", "384", ",", "512", "]", ",", "\n", "IN", "=", "True", ",", "\n", "**", "kwargs", "\n", ")", "\n", "return", "model", "", "", ""]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.resnet.BasicBlock.__init__": [[22, 31], ["torch.nn.Module.__init__", "resnet.conv3x3", "torch.nn.BatchNorm2d", "torch.nn.ReLU", "resnet.conv3x3", "torch.nn.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.solver.ranger.Ranger.__init__", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.resnet.conv3x3", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.resnet.conv3x3"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.resnet.BasicBlock.forward": [[32, 49], ["resnet.BasicBlock.conv1", "resnet.BasicBlock.bn1", "resnet.BasicBlock.relu", "resnet.BasicBlock.conv2", "resnet.BasicBlock.bn2", "resnet.BasicBlock.relu", "resnet.BasicBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.resnet.Bottleneck.__init__": [[54, 66], ["torch.nn.Module.__init__", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.ReLU"], "methods", ["home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.solver.ranger.Ranger.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", "*", "4", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "planes", "*", "4", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.resnet.Bottleneck.forward": [[67, 88], ["resnet.Bottleneck.conv1", "resnet.Bottleneck.bn1", "resnet.Bottleneck.relu", "resnet.Bottleneck.conv2", "resnet.Bottleneck.bn2", "resnet.Bottleneck.relu", "resnet.Bottleneck.conv3", "resnet.Bottleneck.bn3", "resnet.Bottleneck.relu", "resnet.Bottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.resnet.ResNet.__init__": [[91, 104], ["torch.nn.Module.__init__", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.ReLU", "torch.nn.MaxPool2d", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer"], "methods", ["home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.solver.ranger.Ranger.__init__", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.resnet_ibn_a.ResNet_IBN._make_layer", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.resnet_ibn_a.ResNet_IBN._make_layer", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.resnet_ibn_a.ResNet_IBN._make_layer", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.resnet_ibn_a.ResNet_IBN._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "last_stride", "=", "2", ",", "block", "=", "Bottleneck", ",", "layers", "=", "[", "3", ",", "4", ",", "6", ",", "3", "]", ")", ":", "\n", "        ", "self", ".", "inplanes", "=", "64", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "\n", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "last_stride", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.resnet.ResNet._make_layer": [[105, 121], ["layers.append", "range", "torch.nn.Sequential", "torch.nn.Sequential", "block", "layers.append", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "block"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.resnet.ResNet.forward": [[122, 134], ["resnet.ResNet.conv1", "resnet.ResNet.bn1", "resnet.ResNet.relu", "resnet.ResNet.maxpool", "resnet.ResNet.layer1", "resnet.ResNet.layer2", "resnet.ResNet.layer3", "resnet.ResNet.layer4"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.resnet.ResNet.load_param": [[135, 141], ["torch.load", "[].copy_", "resnet.ResNet.state_dict"], "methods", ["home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.solver.swa.SWA.state_dict"], ["", "def", "load_param", "(", "self", ",", "model_path", ")", ":", "\n", "        ", "param_dict", "=", "torch", ".", "load", "(", "model_path", ")", "\n", "for", "i", "in", "param_dict", ":", "\n", "            ", "if", "'fc'", "in", "i", ":", "\n", "                ", "continue", "\n", "", "self", ".", "state_dict", "(", ")", "[", "i", "]", ".", "copy_", "(", "param_dict", "[", "i", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.resnet.ResNet.random_init": [[142, 150], ["resnet.ResNet.modules", "isinstance", "m.weight.data.normal_", "isinstance", "math.sqrt", "m.weight.data.fill_", "m.bias.data.zero_"], "methods", ["None"], ["", "", "def", "random_init", "(", "self", ")", ":", "\n", "        ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.resnet.conv3x3": [[13, 17], ["torch.nn.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"\"\"3x3 convolution with padding\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.resnet.resnet50": [[151, 153], ["resnet.ResNet"], "function", ["None"], ["", "", "", "", "def", "resnet50", "(", "last_stride", ")", ":", "\n", "    ", "return", "ResNet", "(", "last_stride", "=", "last_stride", ",", "block", "=", "Bottleneck", ",", "layers", "=", "[", "3", ",", "4", ",", "6", ",", "3", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.resnet.resnet152": [[154, 156], ["resnet.ResNet"], "function", ["None"], ["", "def", "resnet152", "(", "last_stride", ")", ":", "\n", "    ", "return", "ResNet", "(", "last_stride", "=", "last_stride", ",", "block", "=", "Bottleneck", ",", "layers", "=", "[", "3", ",", "8", ",", "36", ",", "3", "]", ")", "", "", ""]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.densenet._DenseLayer.__init__": [[20, 33], ["torch.Sequential.__init__", "densenet._DenseLayer.add_module", "densenet._DenseLayer.add_module", "densenet._DenseLayer.add_module", "densenet._DenseLayer.add_module", "densenet._DenseLayer.add_module", "densenet._DenseLayer.add_module", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.solver.ranger.Ranger.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_input_features", ",", "growth_rate", ",", "bn_size", ",", "drop_rate", ")", ":", "\n", "        ", "super", "(", "_DenseLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "add_module", "(", "'norm1'", ",", "nn", ".", "BatchNorm2d", "(", "num_input_features", ")", ")", ",", "\n", "self", ".", "add_module", "(", "'relu1'", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", ",", "\n", "self", ".", "add_module", "(", "'conv1'", ",", "nn", ".", "Conv2d", "(", "num_input_features", ",", "bn_size", "*", "\n", "growth_rate", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "\n", "bias", "=", "False", ")", ")", ",", "\n", "self", ".", "add_module", "(", "'norm2'", ",", "nn", ".", "BatchNorm2d", "(", "bn_size", "*", "growth_rate", ")", ")", ",", "\n", "self", ".", "add_module", "(", "'relu2'", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", ",", "\n", "self", ".", "add_module", "(", "'conv2'", ",", "nn", ".", "Conv2d", "(", "bn_size", "*", "growth_rate", ",", "growth_rate", ",", "\n", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "\n", "bias", "=", "False", ")", ")", ",", "\n", "self", ".", "drop_rate", "=", "drop_rate", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.densenet._DenseLayer.forward": [[34, 40], ["super().forward", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.dropout", "torch.dropout", "torch.dropout", "torch.dropout"], "methods", ["home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.layers.triplet_loss.CrossEntropyLabelSmooth.forward"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "new_features", "=", "super", "(", "_DenseLayer", ",", "self", ")", ".", "forward", "(", "x", ")", "\n", "if", "self", ".", "drop_rate", ">", "0", ":", "\n", "            ", "new_features", "=", "F", ".", "dropout", "(", "new_features", ",", "p", "=", "self", ".", "drop_rate", ",", "\n", "training", "=", "self", ".", "training", ")", "\n", "", "return", "torch", ".", "cat", "(", "[", "x", ",", "new_features", "]", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.densenet._DenseBlock.__init__": [[43, 49], ["torch.Sequential.__init__", "range", "densenet._DenseLayer", "densenet._DenseBlock.add_module"], "methods", ["home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.solver.ranger.Ranger.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_layers", ",", "num_input_features", ",", "bn_size", ",", "growth_rate", ",", "drop_rate", ")", ":", "\n", "        ", "super", "(", "_DenseBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "for", "i", "in", "range", "(", "num_layers", ")", ":", "\n", "            ", "layer", "=", "_DenseLayer", "(", "num_input_features", "+", "i", "*", "growth_rate", ",", "growth_rate", ",", "\n", "bn_size", ",", "drop_rate", ")", "\n", "self", ".", "add_module", "(", "'denselayer%d'", "%", "(", "i", "+", "1", ")", ",", "layer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.densenet._Transition.__init__": [[52, 61], ["torch.Sequential.__init__", "densenet._Transition.add_module", "densenet._Transition.add_module", "densenet._Transition.add_module", "print", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "densenet._Transition.add_module", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d"], "methods", ["home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.solver.ranger.Ranger.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_input_features", ",", "num_output_features", ",", "last_stride", "=", "2", ")", ":", "\n", "        ", "super", "(", "_Transition", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "add_module", "(", "'norm'", ",", "nn", ".", "BatchNorm2d", "(", "num_input_features", ")", ")", "\n", "self", ".", "add_module", "(", "'relu'", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "self", ".", "add_module", "(", "'conv'", ",", "nn", ".", "Conv2d", "(", "num_input_features", ",", "num_output_features", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "bias", "=", "False", ")", ")", "\n", "print", "(", "'last_stride: '", ",", "last_stride", ")", "\n", "if", "last_stride", "==", "2", ":", "\n", "            ", "self", ".", "add_module", "(", "'pool'", ",", "nn", ".", "AvgPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.densenet.DenseNet.__init__": [[76, 122], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "enumerate", "densenet.DenseNet.features.add_module", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "densenet.DenseNet.modules", "collections.OrderedDict", "densenet._DenseBlock", "densenet.DenseNet.features.add_module", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "isinstance", "densenet.DenseNet.features.add_module", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "isinstance", "len", "densenet._Transition", "densenet._Transition", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "isinstance", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.solver.ranger.Ranger.__init__"], ["def", "__init__", "(", "self", ",", "last_stride", ",", "growth_rate", "=", "32", ",", "block_config", "=", "(", "6", ",", "12", ",", "24", ",", "16", ")", ",", "\n", "num_init_features", "=", "64", ",", "bn_size", "=", "4", ",", "drop_rate", "=", "0", ",", "num_classes", "=", "1000", ")", ":", "\n", "\n", "        ", "super", "(", "DenseNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "features", "=", "nn", ".", "Sequential", "(", "OrderedDict", "(", "[", "\n", "(", "'conv0'", ",", "nn", ".", "Conv2d", "(", "3", ",", "num_init_features", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "\n", "padding", "=", "3", ",", "bias", "=", "False", ")", ")", ",", "\n", "(", "'norm0'", ",", "nn", ".", "BatchNorm2d", "(", "num_init_features", ")", ")", ",", "\n", "(", "'relu0'", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", ",", "\n", "(", "'pool0'", ",", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ")", ",", "\n", "]", ")", ")", "\n", "\n", "# Each denseblock", "\n", "num_features", "=", "num_init_features", "\n", "for", "i", ",", "num_layers", "in", "enumerate", "(", "block_config", ")", ":", "\n", "            ", "block", "=", "_DenseBlock", "(", "num_layers", "=", "num_layers", ",", "num_input_features", "=", "num_features", ",", "\n", "bn_size", "=", "bn_size", ",", "growth_rate", "=", "growth_rate", ",", "\n", "drop_rate", "=", "drop_rate", ")", "\n", "self", ".", "features", ".", "add_module", "(", "'denseblock%d'", "%", "(", "i", "+", "1", ")", ",", "block", ")", "\n", "num_features", "=", "num_features", "+", "num_layers", "*", "growth_rate", "\n", "if", "i", "!=", "len", "(", "block_config", ")", "-", "1", ":", "\n", "                ", "if", "i", "==", "2", ":", "\n", "                    ", "trans", "=", "_Transition", "(", "num_input_features", "=", "num_features", ",", "\n", "num_output_features", "=", "num_features", "//", "2", ",", "last_stride", "=", "1", ")", "\n", "", "else", ":", "\n", "                    ", "trans", "=", "_Transition", "(", "num_input_features", "=", "num_features", ",", "\n", "num_output_features", "=", "num_features", "//", "2", ")", "\n", "", "self", ".", "features", ".", "add_module", "(", "'transition%d'", "%", "(", "i", "+", "1", ")", ",", "trans", ")", "\n", "num_features", "=", "num_features", "//", "2", "\n", "\n", "# Final batch norm", "\n", "", "", "self", ".", "features", ".", "add_module", "(", "'norm5'", ",", "nn", ".", "BatchNorm2d", "(", "num_features", ")", ")", "\n", "\n", "# Linear layer", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "num_features", ",", "num_classes", ")", "\n", "\n", "# Official init from torch repo.", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.densenet.DenseNet.forward": [[123, 127], ["densenet.DenseNet.features", "torch.relu", "torch.relu", "torch.relu", "torch.relu"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "features", "=", "self", ".", "features", "(", "x", ")", "\n", "out", "=", "F", ".", "relu", "(", "features", ",", "inplace", "=", "True", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.densenet.DenseNet.load_param": [[128, 139], ["re.compile", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "list", "densenet.DenseNet.load_state_dict", "torch.load.keys", "torch.load.keys", "torch.load.keys", "torch.load.keys", "re.compile.match", "re.compile.match.group", "re.compile.match.group"], "methods", ["home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.solver.swa.SWA.load_state_dict"], ["", "def", "load_param", "(", "self", ",", "model_path", ")", ":", "\n", "        ", "pattern", "=", "re", ".", "compile", "(", "r'^(.*denselayer\\d+\\.(?:norm|relu|conv))\\.((?:[12])\\.(?:weight|bias|running_mean|running_var))$'", ")", "\n", "state_dict", "=", "torch", ".", "load", "(", "model_path", ")", "\n", "\n", "for", "key", "in", "list", "(", "state_dict", ".", "keys", "(", ")", ")", ":", "\n", "            ", "res", "=", "pattern", ".", "match", "(", "key", ")", "\n", "if", "res", ":", "\n", "                ", "new_key", "=", "res", ".", "group", "(", "1", ")", "+", "res", ".", "group", "(", "2", ")", "\n", "state_dict", "[", "new_key", "]", "=", "state_dict", "[", "key", "]", "\n", "del", "state_dict", "[", "key", "]", "\n", "", "", "self", ".", "load_state_dict", "(", "state_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.densenet.densenet121": [[141, 152], ["densenet.DenseNet"], "function", ["None"], ["", "", "def", "densenet121", "(", "last_stride", ",", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"Densenet-121 model from\n    `\"Densely Connected Convolutional Networks\" <https://arxiv.org/pdf/1608.06993.pdf>`_\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n        memory_efficient (bool) - If True, uses checkpointing. Much more memory efficient,\n          but slower. Default: *False*. See `\"paper\" <https://arxiv.org/pdf/1707.06990.pdf>`_\n    \"\"\"", "\n", "return", "DenseNet", "(", "last_stride", ",", "32", ",", "(", "6", ",", "12", ",", "24", ",", "16", ")", ",", "64", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.resnet_ibn_a.IBN.__init__": [[19, 26], ["torch.Module.__init__", "int", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.solver.ranger.Ranger.__init__"], ["    ", "def", "__init__", "(", "self", ",", "planes", ")", ":", "\n", "        ", "super", "(", "IBN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "half1", "=", "int", "(", "planes", "/", "2", ")", "\n", "self", ".", "half", "=", "half1", "\n", "half2", "=", "planes", "-", "half1", "\n", "self", ".", "IN", "=", "nn", ".", "InstanceNorm2d", "(", "half1", ",", "affine", "=", "True", ")", "\n", "self", ".", "BN", "=", "nn", ".", "BatchNorm2d", "(", "half2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.resnet_ibn_a.IBN.forward": [[27, 33], ["torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "resnet_ibn_a.IBN.IN", "resnet_ibn_a.IBN.BN", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "split[].contiguous", "split[].contiguous"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "split", "=", "torch", ".", "split", "(", "x", ",", "self", ".", "half", ",", "1", ")", "\n", "out1", "=", "self", ".", "IN", "(", "split", "[", "0", "]", ".", "contiguous", "(", ")", ")", "\n", "out2", "=", "self", ".", "BN", "(", "split", "[", "1", "]", ".", "contiguous", "(", ")", ")", "\n", "out", "=", "torch", ".", "cat", "(", "(", "out1", ",", "out2", ")", ",", "1", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.resnet_ibn_a.SELayer.__init__": [[36, 44], ["torch.Module.__init__", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "int", "int"], "methods", ["home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.solver.ranger.Ranger.__init__"], ["    ", "def", "__init__", "(", "self", ",", "channel", ",", "reduction", "=", "16", ")", ":", "\n", "        ", "super", "(", "SELayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "avg_pool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "channel", ",", "int", "(", "channel", "/", "reduction", ")", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "int", "(", "channel", "/", "reduction", ")", ",", "channel", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "Sigmoid", "(", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.resnet_ibn_a.SELayer.forward": [[46, 51], ["x.size", "resnet_ibn_a.SELayer.avg_pool().view", "resnet_ibn_a.SELayer.fc().view", "resnet_ibn_a.SELayer.expand_as", "resnet_ibn_a.SELayer.avg_pool", "resnet_ibn_a.SELayer.fc"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "b", ",", "c", ",", "_", ",", "_", "=", "x", ".", "size", "(", ")", "\n", "y", "=", "self", ".", "avg_pool", "(", "x", ")", ".", "view", "(", "b", ",", "c", ")", "\n", "y", "=", "self", ".", "fc", "(", "y", ")", ".", "view", "(", "b", ",", "c", ",", "1", ",", "1", ")", "\n", "return", "x", "*", "y", ".", "expand_as", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.resnet_ibn_a.SEBottleneck.__init__": [[56, 72], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "resnet_ibn_a.SELayer", "resnet_ibn_a.IBN", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.solver.ranger.Ranger.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "ibn", "=", "False", ",", "stride", "=", "1", ",", "downsample", "=", "None", ",", "reduction", "=", "16", ")", ":", "\n", "        ", "super", "(", "SEBottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "if", "ibn", ":", "\n", "            ", "self", ".", "bn1", "=", "IBN", "(", "planes", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", "*", "4", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "planes", "*", "4", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "se", "=", "SELayer", "(", "planes", "*", "4", ",", "reduction", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.resnet_ibn_a.SEBottleneck.forward": [[73, 95], ["resnet_ibn_a.SEBottleneck.conv1", "resnet_ibn_a.SEBottleneck.bn1", "resnet_ibn_a.SEBottleneck.relu", "resnet_ibn_a.SEBottleneck.conv2", "resnet_ibn_a.SEBottleneck.bn2", "resnet_ibn_a.SEBottleneck.relu", "resnet_ibn_a.SEBottleneck.conv3", "resnet_ibn_a.SEBottleneck.bn3", "resnet_ibn_a.SEBottleneck.se", "resnet_ibn_a.SEBottleneck.relu", "resnet_ibn_a.SEBottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "out", "=", "self", ".", "se", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.resnet_ibn_a.Bottleneck_IBN.__init__": [[100, 115], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "resnet_ibn_a.IBN", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.solver.ranger.Ranger.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "ibn", "=", "False", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "Bottleneck_IBN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "if", "ibn", ":", "\n", "            ", "self", ".", "bn1", "=", "IBN", "(", "planes", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", "*", "self", ".", "expansion", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "planes", "*", "self", ".", "expansion", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.resnet_ibn_a.Bottleneck_IBN.forward": [[116, 137], ["resnet_ibn_a.Bottleneck_IBN.conv1", "resnet_ibn_a.Bottleneck_IBN.bn1", "resnet_ibn_a.Bottleneck_IBN.relu", "resnet_ibn_a.Bottleneck_IBN.conv2", "resnet_ibn_a.Bottleneck_IBN.bn2", "resnet_ibn_a.Bottleneck_IBN.relu", "resnet_ibn_a.Bottleneck_IBN.conv3", "resnet_ibn_a.Bottleneck_IBN.bn3", "resnet_ibn_a.Bottleneck_IBN.relu", "resnet_ibn_a.Bottleneck_IBN.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.resnet_ibn_a.ResNet_IBN.__init__": [[141, 167], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "resnet_ibn_a.ResNet_IBN._make_layer", "resnet_ibn_a.ResNet_IBN._make_layer", "resnet_ibn_a.ResNet_IBN._make_layer", "resnet_ibn_a.ResNet_IBN._make_layer", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.Linear", "torch.Linear", "torch.Linear", "resnet_ibn_a.ResNet_IBN.modules", "isinstance", "m.weight.data.normal_", "isinstance", "math.sqrt", "m.weight.data.fill_", "m.bias.data.zero_", "isinstance", "m.weight.data.fill_", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.solver.ranger.Ranger.__init__", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.resnet_ibn_a.ResNet_IBN._make_layer", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.resnet_ibn_a.ResNet_IBN._make_layer", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.resnet_ibn_a.ResNet_IBN._make_layer", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.resnet_ibn_a.ResNet_IBN._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "last_stride", ",", "block", ",", "layers", ",", "num_classes", "=", "1000", ")", ":", "\n", "        ", "scale", "=", "64", "\n", "self", ".", "inplanes", "=", "scale", "\n", "super", "(", "ResNet_IBN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "scale", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "scale", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "scale", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "scale", "*", "2", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "scale", "*", "4", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "scale", "*", "8", ",", "layers", "[", "3", "]", ",", "stride", "=", "last_stride", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AvgPool2d", "(", "7", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "scale", "*", "8", "*", "block", ".", "expansion", ",", "num_classes", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "InstanceNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.resnet_ibn_a.ResNet_IBN._make_layer": [[168, 187], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "block"], "methods", ["None"], ["", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "ibn", "=", "True", "\n", "if", "planes", "==", "512", ":", "\n", "            ", "ibn", "=", "False", "\n", "", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "ibn", ",", "stride", ",", "downsample", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "ibn", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.resnet_ibn_a.ResNet_IBN.forward": [[188, 204], ["resnet_ibn_a.ResNet_IBN.conv1", "resnet_ibn_a.ResNet_IBN.bn1", "resnet_ibn_a.ResNet_IBN.relu", "resnet_ibn_a.ResNet_IBN.maxpool", "resnet_ibn_a.ResNet_IBN.layer1", "resnet_ibn_a.ResNet_IBN.layer2", "resnet_ibn_a.ResNet_IBN.layer3", "resnet_ibn_a.ResNet_IBN.layer4"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "\n", "# x = self.avgpool(x)", "\n", "# x = x.view(x.size(0), -1)", "\n", "# x = self.fc(x)", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.resnet_ibn_a.ResNet_IBN.load_param": [[205, 211], ["torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "[].copy_", "resnet_ibn_a.ResNet_IBN.state_dict"], "methods", ["home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.solver.swa.SWA.state_dict"], ["", "def", "load_param", "(", "self", ",", "model_path", ")", ":", "\n", "        ", "param_dict", "=", "torch", ".", "load", "(", "model_path", ")", "\n", "for", "i", "in", "param_dict", "[", "'state_dict'", "]", ":", "\n", "            ", "if", "'fc'", "in", "i", "[", "7", ":", "]", ":", "\n", "                ", "continue", "\n", "", "self", ".", "state_dict", "(", ")", "[", "i", "[", "7", ":", "]", "]", ".", "copy_", "(", "param_dict", "[", "'state_dict'", "]", "[", "i", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.resnet_ibn_a.resnet50_ibn_a": [[213, 222], ["resnet_ibn_a.ResNet_IBN", "ResNet_IBN.load_state_dict", "torch.load_url"], "function", ["home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.solver.swa.SWA.load_state_dict"], ["", "", "", "def", "resnet50_ibn_a", "(", "last_stride", ",", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-50 model.\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet_IBN", "(", "last_stride", ",", "Bottleneck_IBN", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet50'", "]", ")", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.resnet_ibn_a.resnet101_ibn_a": [[224, 233], ["resnet_ibn_a.ResNet_IBN", "ResNet_IBN.load_state_dict", "torch.load_url"], "function", ["home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.solver.swa.SWA.load_state_dict"], ["", "def", "resnet101_ibn_a", "(", "last_stride", ",", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-101 model.\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet_IBN", "(", "last_stride", ",", "Bottleneck_IBN", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet101'", "]", ")", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.resnet_ibn_a.se_resnet101_ibn_a": [[234, 241], ["resnet_ibn_a.ResNet_IBN"], "function", ["None"], ["", "def", "se_resnet101_ibn_a", "(", "last_stride", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-101 model.\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet_IBN", "(", "last_stride", ",", "SEBottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.resnet_ibn_a.resnet152_ibn_a": [[243, 252], ["resnet_ibn_a.ResNet_IBN", "ResNet_IBN.load_state_dict", "torch.load_url"], "function", ["home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.solver.swa.SWA.load_state_dict"], ["", "def", "resnet152_ibn_a", "(", "last_stride", ",", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-152 model.\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet_IBN", "(", "last_stride", ",", "Bottleneck_IBN", ",", "[", "3", ",", "8", ",", "36", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet152'", "]", ")", ")", "\n", "", "return", "model", "", "", ""]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.STNModule.SpatialTransformer.__init__": [[25, 41], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.solver.ranger.Ranger.__init__"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "spatial_dims", ",", "kernel_size", ",", "use_dropout", "=", "True", ")", ":", "\n", "        ", "super", "(", "SpatialTransformer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_h", ",", "self", ".", "_w", "=", "spatial_dims", "\n", "self", ".", "_in_ch", "=", "in_channels", "\n", "self", ".", "_ksize", "=", "kernel_size", "\n", "self", ".", "dropout", "=", "use_dropout", "\n", "\n", "# localization net ", "\n", "self", ".", "conv1_stn", "=", "nn", ".", "Conv2d", "(", "in_channels", ",", "32", ",", "kernel_size", "=", "self", ".", "_ksize", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "# size : [1x3x32x32]", "\n", "self", ".", "conv2_stn", "=", "nn", ".", "Conv2d", "(", "32", ",", "32", ",", "kernel_size", "=", "self", ".", "_ksize", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv3_stn", "=", "nn", ".", "Conv2d", "(", "32", ",", "32", ",", "kernel_size", "=", "self", ".", "_ksize", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv4_stn", "=", "nn", ".", "Conv2d", "(", "32", ",", "32", ",", "kernel_size", "=", "self", ".", "_ksize", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv5_stn", "=", "nn", ".", "Conv2d", "(", "32", ",", "32", ",", "kernel_size", "=", "self", ".", "_ksize", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n", "self", ".", "fc1_stn", "=", "nn", ".", "Linear", "(", "32", "*", "20", "*", "20", ",", "512", ")", "\n", "self", ".", "fc2_stn", "=", "nn", ".", "Linear", "(", "512", ",", "6", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.STNModule.SpatialTransformer.forward": [[43, 74], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.relu", "torch.relu", "torch.relu", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.relu", "torch.relu", "torch.relu", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.relu", "torch.relu", "torch.relu", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "STNModule.SpatialTransformer.view", "STNModule.SpatialTransformer.view", "torch.affine_grid", "torch.affine_grid", "torch.affine_grid", "torch.grid_sample", "torch.grid_sample", "torch.grid_sample", "STNModule.SpatialTransformer.conv1_stn", "STNModule.SpatialTransformer.conv2_stn", "STNModule.SpatialTransformer.conv3_stn", "STNModule.SpatialTransformer.conv4_stn", "STNModule.SpatialTransformer.conv5_stn", "torch.dropout", "torch.dropout", "torch.dropout", "STNModule.SpatialTransformer.fc2_stn", "STNModule.SpatialTransformer.fc1_stn", "STNModule.SpatialTransformer.fc2_stn", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.affine_grid.size", "batch_images.size", "STNModule.SpatialTransformer.detach", "STNModule.SpatialTransformer.fc1_stn", "STNModule.SpatialTransformer.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"\n        Forward pass of the STN module. \n        x -> input feature map \n        \"\"\"", "\n", "batch_images", "=", "x", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "conv1_stn", "(", "x", ".", "detach", "(", ")", ")", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "conv2_stn", "(", "x", ")", ")", "\n", "x", "=", "F", ".", "max_pool2d", "(", "x", ",", "2", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "conv3_stn", "(", "x", ")", ")", "\n", "x", "=", "F", ".", "max_pool2d", "(", "x", ",", "2", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "conv4_stn", "(", "x", ")", ")", "\n", "x", "=", "F", ".", "max_pool2d", "(", "x", ",", "2", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "conv5_stn", "(", "x", ")", ")", "\n", "x", "=", "F", ".", "max_pool2d", "(", "x", ",", "2", ")", "\n", "# print(\"Pre view size:{}\".format(x.size()))", "\n", "x", "=", "x", ".", "view", "(", "-", "1", ",", "32", "*", "20", "*", "20", ")", "\n", "if", "self", ".", "dropout", ":", "\n", "            ", "x", "=", "F", ".", "dropout", "(", "self", ".", "fc1_stn", "(", "x", ")", ",", "p", "=", "0.3", ")", "\n", "x", "=", "self", ".", "fc2_stn", "(", "x", ")", "\n", "", "else", ":", "\n", "            ", "x", "=", "self", ".", "fc1_stn", "(", "x", ")", "\n", "x", "=", "self", ".", "fc2_stn", "(", "x", ")", "# params [Nx6]", "\n", "# import ipdb; ipdb.set_trace()", "\n", "", "x", "=", "x", ".", "view", "(", "-", "1", ",", "2", ",", "3", ")", "# change it to the 2x3 matrix ", "\n", "# print(x.size())", "\n", "affine_grid_points", "=", "F", ".", "affine_grid", "(", "x", ",", "torch", ".", "Size", "(", "(", "x", ".", "size", "(", "0", ")", ",", "self", ".", "_in_ch", ",", "self", ".", "_h", ",", "self", ".", "_w", ")", ")", ")", "\n", "assert", "(", "affine_grid_points", ".", "size", "(", "0", ")", "==", "batch_images", ".", "size", "(", "0", ")", ")", ",", "\"The batch sizes of the input images must be same as the generated grid.\"", "\n", "rois", "=", "F", ".", "grid_sample", "(", "batch_images", ",", "affine_grid_points", ")", "\n", "# print(\"rois found to be of size:{}\".format(rois.size()))", "\n", "return", "rois", ",", "affine_grid_points", "", "", "", ""]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.mixstyle.MixStyle.__init__": [[12, 28], ["torch.Module.__init__", "torch.distributions.Beta", "torch.distributions.Beta", "torch.distributions.Beta", "torch.distributions.Beta", "print", "print", "print"], "methods", ["home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.solver.ranger.Ranger.__init__"], ["def", "__init__", "(", "self", ",", "p", "=", "0.5", ",", "alpha", "=", "0.3", ",", "eps", "=", "1e-6", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n          p (float): probability of using MixStyle.\n          alpha (float): parameter of the Beta distribution.\n          eps (float): scaling parameter to avoid numerical issues.\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "p", "=", "p", "\n", "self", ".", "beta", "=", "torch", ".", "distributions", ".", "Beta", "(", "alpha", ",", "alpha", ")", "\n", "self", ".", "eps", "=", "eps", "\n", "self", ".", "alpha", "=", "alpha", "\n", "\n", "print", "(", "'* MixStyle params'", ")", "\n", "print", "(", "f'- p: {p}'", ")", "\n", "print", "(", "f'- alpha: {alpha}'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.mixstyle.MixStyle.__repr__": [[29, 31], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "f'MixStyle(p={self.p}, alpha={self.alpha}, eps={self.eps})'", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.mixstyle.MixStyle.forward": [[32, 56], ["x.size", "x.mean", "x.var", "mixstyle.MixStyle.beta.sample", "lmda.to.to.to", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "random.random", "x.mean.detach", "sig.detach"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "not", "self", ".", "training", ":", "\n", "            ", "return", "x", "\n", "\n", "", "if", "random", ".", "random", "(", ")", ">", "self", ".", "p", ":", "\n", "            ", "return", "x", "\n", "\n", "", "B", "=", "x", ".", "size", "(", "0", ")", "\n", "\n", "mu", "=", "x", ".", "mean", "(", "dim", "=", "[", "2", ",", "3", "]", ",", "keepdim", "=", "True", ")", "\n", "var", "=", "x", ".", "var", "(", "dim", "=", "[", "2", ",", "3", "]", ",", "keepdim", "=", "True", ")", "\n", "sig", "=", "(", "var", "+", "self", ".", "eps", ")", ".", "sqrt", "(", ")", "\n", "mu", ",", "sig", "=", "mu", ".", "detach", "(", ")", ",", "sig", ".", "detach", "(", ")", "\n", "x_normed", "=", "(", "x", "-", "mu", ")", "/", "sig", "\n", "\n", "lmda", "=", "self", ".", "beta", ".", "sample", "(", "(", "B", ",", "1", ",", "1", ",", "1", ")", ")", "\n", "lmda", "=", "lmda", ".", "to", "(", "x", ".", "device", ")", "\n", "\n", "perm", "=", "torch", ".", "randperm", "(", "B", ")", "\n", "mu2", ",", "sig2", "=", "mu", "[", "perm", "]", ",", "sig", "[", "perm", "]", "\n", "mu_mix", "=", "mu", "*", "lmda", "+", "mu2", "*", "(", "1", "-", "lmda", ")", "\n", "sig_mix", "=", "sig", "*", "lmda", "+", "sig2", "*", "(", "1", "-", "lmda", ")", "\n", "\n", "return", "x_normed", "*", "sig_mix", "+", "mu_mix", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.mixstyle.MixStyle2.__init__": [[65, 81], ["torch.Module.__init__", "torch.distributions.Beta", "torch.distributions.Beta", "torch.distributions.Beta", "torch.distributions.Beta", "print", "print", "print"], "methods", ["home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.solver.ranger.Ranger.__init__"], ["def", "__init__", "(", "self", ",", "p", "=", "0.5", ",", "alpha", "=", "0.3", ",", "eps", "=", "1e-6", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n          p (float): probability of using MixStyle.\n          alpha (float): parameter of the Beta distribution.\n          eps (float): scaling parameter to avoid numerical issues.\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "p", "=", "p", "\n", "self", ".", "beta", "=", "torch", ".", "distributions", ".", "Beta", "(", "alpha", ",", "alpha", ")", "\n", "self", ".", "eps", "=", "eps", "\n", "self", ".", "alpha", "=", "alpha", "\n", "\n", "print", "(", "'* MixStyle params'", ")", "\n", "print", "(", "f'- p: {p}'", ")", "\n", "print", "(", "f'- alpha: {alpha}'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.mixstyle.MixStyle2.__repr__": [[82, 84], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "f'MixStyle(p={self.p}, alpha={self.alpha}, eps={self.eps})'", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.mixstyle.MixStyle2.forward": [[85, 118], ["x.size", "x.mean", "x.var", "mixstyle.MixStyle2.beta.sample", "lmda.to.to.to", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.cat.chunk", "torch.cat.chunk", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "random.random", "x.mean.detach", "sig.detach", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"\n        For the input x, the first half comes from one domain,\n        while the second half comes from the other domain.\n        \"\"\"", "\n", "if", "not", "self", ".", "training", ":", "\n", "            ", "return", "x", "\n", "\n", "", "if", "random", ".", "random", "(", ")", ">", "self", ".", "p", ":", "\n", "            ", "return", "x", "\n", "\n", "", "B", "=", "x", ".", "size", "(", "0", ")", "\n", "\n", "mu", "=", "x", ".", "mean", "(", "dim", "=", "[", "2", ",", "3", "]", ",", "keepdim", "=", "True", ")", "\n", "var", "=", "x", ".", "var", "(", "dim", "=", "[", "2", ",", "3", "]", ",", "keepdim", "=", "True", ")", "\n", "sig", "=", "(", "var", "+", "self", ".", "eps", ")", ".", "sqrt", "(", ")", "\n", "mu", ",", "sig", "=", "mu", ".", "detach", "(", ")", ",", "sig", ".", "detach", "(", ")", "\n", "x_normed", "=", "(", "x", "-", "mu", ")", "/", "sig", "\n", "\n", "lmda", "=", "self", ".", "beta", ".", "sample", "(", "(", "B", ",", "1", ",", "1", ",", "1", ")", ")", "\n", "lmda", "=", "lmda", ".", "to", "(", "x", ".", "device", ")", "\n", "\n", "perm", "=", "torch", ".", "arange", "(", "B", "-", "1", ",", "-", "1", ",", "-", "1", ")", "# inverse index", "\n", "perm_b", ",", "perm_a", "=", "perm", ".", "chunk", "(", "2", ")", "\n", "perm_b", "=", "perm_b", "[", "torch", ".", "randperm", "(", "B", "//", "2", ")", "]", "\n", "perm_a", "=", "perm_a", "[", "torch", ".", "randperm", "(", "B", "//", "2", ")", "]", "\n", "perm", "=", "torch", ".", "cat", "(", "[", "perm_b", ",", "perm_a", "]", ",", "0", ")", "\n", "\n", "mu2", ",", "sig2", "=", "mu", "[", "perm", "]", ",", "sig", "[", "perm", "]", "\n", "mu_mix", "=", "mu", "*", "lmda", "+", "mu2", "*", "(", "1", "-", "lmda", ")", "\n", "sig_mix", "=", "sig", "*", "lmda", "+", "sig2", "*", "(", "1", "-", "lmda", ")", "\n", "\n", "return", "x_normed", "*", "sig_mix", "+", "mu_mix", "", "", "", ""]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.__init__.build_backbone": [[25, 29], ["factory.keys", "KeyError"], "function", ["None"], []], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.nfnet.GammaAct.__init__": [[273, 278], ["torch.Module.__init__", "timm.models.layers.get_act_fn"], "methods", ["home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.solver.ranger.Ranger.__init__"], ["    ", "def", "__init__", "(", "self", ",", "act_type", "=", "'relu'", ",", "gamma", ":", "float", "=", "1.0", ",", "inplace", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "act_fn", "=", "get_act_fn", "(", "act_type", ")", "\n", "self", ".", "gamma", "=", "gamma", "\n", "self", ".", "inplace", "=", "inplace", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.nfnet.GammaAct.forward": [[279, 281], ["nfnet.GammaAct.act_fn().mul_", "nfnet.GammaAct.act_fn"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "act_fn", "(", "x", ",", "inplace", "=", "self", ".", "inplace", ")", ".", "mul_", "(", "self", ".", "gamma", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.nfnet.DownsampleAvg.__init__": [[290, 301], ["torch.Module.__init__", "conv_layer", "avg_pool_fn", "torch.Identity", "torch.Identity"], "methods", ["home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.solver.ranger.Ranger.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "in_chs", ",", "out_chs", ",", "stride", "=", "1", ",", "dilation", "=", "1", ",", "first_dilation", "=", "None", ",", "conv_layer", "=", "ScaledStdConv2d", ")", ":", "\n", "        ", "\"\"\" AvgPool Downsampling as in 'D' ResNet variants. Support for dilation.\"\"\"", "\n", "super", "(", "DownsampleAvg", ",", "self", ")", ".", "__init__", "(", ")", "\n", "avg_stride", "=", "stride", "if", "dilation", "==", "1", "else", "1", "\n", "if", "stride", ">", "1", "or", "dilation", ">", "1", ":", "\n", "            ", "avg_pool_fn", "=", "AvgPool2dSame", "if", "avg_stride", "==", "1", "and", "dilation", ">", "1", "else", "nn", ".", "AvgPool2d", "\n", "self", ".", "pool", "=", "avg_pool_fn", "(", "2", ",", "avg_stride", ",", "ceil_mode", "=", "True", ",", "count_include_pad", "=", "False", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "pool", "=", "nn", ".", "Identity", "(", ")", "\n", "", "self", ".", "conv", "=", "conv_layer", "(", "in_chs", ",", "out_chs", ",", "1", ",", "stride", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.nfnet.DownsampleAvg.forward": [[302, 304], ["nfnet.DownsampleAvg.conv", "nfnet.DownsampleAvg.pool"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "conv", "(", "self", ".", "pool", "(", "x", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.nfnet.NormFreeBlock.__init__": [[310, 354], ["torch.Module.__init__", "timm.models.layers.make_divisible", "act_layer", "conv_layer", "act_layer", "conv_layer", "act_layer", "conv_layer", "nfnet.DownsampleAvg", "act_layer", "conv_layer", "attn_layer", "attn_layer", "timm.models.layers.DropPath", "torch.Identity", "torch.Identity", "torch.Parameter", "torch.Parameter", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.solver.ranger.Ranger.__init__"], ["def", "__init__", "(", "\n", "self", ",", "in_chs", ",", "out_chs", "=", "None", ",", "stride", "=", "1", ",", "dilation", "=", "1", ",", "first_dilation", "=", "None", ",", "\n", "alpha", "=", "1.0", ",", "beta", "=", "1.0", ",", "bottle_ratio", "=", "0.25", ",", "group_size", "=", "None", ",", "ch_div", "=", "1", ",", "reg", "=", "True", ",", "extra_conv", "=", "False", ",", "\n", "skipinit", "=", "False", ",", "attn_layer", "=", "None", ",", "attn_gain", "=", "2.0", ",", "act_layer", "=", "None", ",", "conv_layer", "=", "None", ",", "drop_path_rate", "=", "0.", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "first_dilation", "=", "first_dilation", "or", "dilation", "\n", "out_chs", "=", "out_chs", "or", "in_chs", "\n", "# RegNet variants scale bottleneck from in_chs, otherwise scale from out_chs like ResNet", "\n", "mid_chs", "=", "make_divisible", "(", "in_chs", "*", "bottle_ratio", "if", "reg", "else", "out_chs", "*", "bottle_ratio", ",", "ch_div", ")", "\n", "groups", "=", "1", "if", "not", "group_size", "else", "mid_chs", "//", "group_size", "\n", "if", "group_size", "and", "group_size", "%", "ch_div", "==", "0", ":", "\n", "            ", "mid_chs", "=", "group_size", "*", "groups", "# correct mid_chs if group_size divisible by ch_div, otherwise error", "\n", "", "self", ".", "alpha", "=", "alpha", "\n", "self", ".", "beta", "=", "beta", "\n", "self", ".", "attn_gain", "=", "attn_gain", "\n", "\n", "if", "in_chs", "!=", "out_chs", "or", "stride", "!=", "1", "or", "dilation", "!=", "first_dilation", ":", "\n", "            ", "self", ".", "downsample", "=", "DownsampleAvg", "(", "\n", "in_chs", ",", "out_chs", ",", "stride", "=", "stride", ",", "dilation", "=", "dilation", ",", "first_dilation", "=", "first_dilation", ",", "conv_layer", "=", "conv_layer", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "downsample", "=", "None", "\n", "\n", "", "self", ".", "act1", "=", "act_layer", "(", ")", "\n", "self", ".", "conv1", "=", "conv_layer", "(", "in_chs", ",", "mid_chs", ",", "1", ")", "\n", "self", ".", "act2", "=", "act_layer", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "conv_layer", "(", "mid_chs", ",", "mid_chs", ",", "3", ",", "stride", "=", "stride", ",", "dilation", "=", "first_dilation", ",", "groups", "=", "groups", ")", "\n", "if", "extra_conv", ":", "\n", "            ", "self", ".", "act2b", "=", "act_layer", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2b", "=", "conv_layer", "(", "mid_chs", ",", "mid_chs", ",", "3", ",", "stride", "=", "1", ",", "dilation", "=", "dilation", ",", "groups", "=", "groups", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "act2b", "=", "None", "\n", "self", ".", "conv2b", "=", "None", "\n", "", "if", "reg", "and", "attn_layer", "is", "not", "None", ":", "\n", "            ", "self", ".", "attn", "=", "attn_layer", "(", "mid_chs", ")", "# RegNet blocks apply attn btw conv2 & 3", "\n", "", "else", ":", "\n", "            ", "self", ".", "attn", "=", "None", "\n", "", "self", ".", "act3", "=", "act_layer", "(", ")", "\n", "self", ".", "conv3", "=", "conv_layer", "(", "mid_chs", ",", "out_chs", ",", "1", ")", "\n", "if", "not", "reg", "and", "attn_layer", "is", "not", "None", ":", "\n", "            ", "self", ".", "attn_last", "=", "attn_layer", "(", "out_chs", ")", "# ResNet blocks apply attn after conv3", "\n", "", "else", ":", "\n", "            ", "self", ".", "attn_last", "=", "None", "\n", "", "self", ".", "drop_path", "=", "DropPath", "(", "drop_path_rate", ")", "if", "drop_path_rate", ">", "0", "else", "nn", ".", "Identity", "(", ")", "\n", "self", ".", "skipinit_gain", "=", "nn", ".", "Parameter", "(", "torch", ".", "tensor", "(", "0.", ")", ")", "if", "skipinit", "else", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.nfnet.NormFreeBlock.forward": [[355, 379], ["nfnet.NormFreeBlock.conv1", "nfnet.NormFreeBlock.conv2", "nfnet.NormFreeBlock.conv3", "nfnet.NormFreeBlock.drop_path", "nfnet.NormFreeBlock.act1", "nfnet.NormFreeBlock.downsample", "nfnet.NormFreeBlock.act2", "nfnet.NormFreeBlock.conv2b", "nfnet.NormFreeBlock.act3", "nfnet.NormFreeBlock.mul_", "nfnet.NormFreeBlock.act2b", "nfnet.NormFreeBlock.attn", "nfnet.NormFreeBlock.attn_last"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "act1", "(", "x", ")", "*", "self", ".", "beta", "\n", "\n", "# shortcut branch", "\n", "shortcut", "=", "x", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "shortcut", "=", "self", ".", "downsample", "(", "out", ")", "\n", "\n", "# residual branch", "\n", "", "out", "=", "self", ".", "conv1", "(", "out", ")", "\n", "out", "=", "self", ".", "conv2", "(", "self", ".", "act2", "(", "out", ")", ")", "\n", "if", "self", ".", "conv2b", "is", "not", "None", ":", "\n", "            ", "out", "=", "self", ".", "conv2b", "(", "self", ".", "act2b", "(", "out", ")", ")", "\n", "", "if", "self", ".", "attn", "is", "not", "None", ":", "\n", "            ", "out", "=", "self", ".", "attn_gain", "*", "self", ".", "attn", "(", "out", ")", "\n", "", "out", "=", "self", ".", "conv3", "(", "self", ".", "act3", "(", "out", ")", ")", "\n", "if", "self", ".", "attn_last", "is", "not", "None", ":", "\n", "            ", "out", "=", "self", ".", "attn_gain", "*", "self", ".", "attn_last", "(", "out", ")", "\n", "", "out", "=", "self", ".", "drop_path", "(", "out", ")", "\n", "\n", "if", "self", ".", "skipinit_gain", "is", "not", "None", ":", "\n", "            ", "out", ".", "mul_", "(", "self", ".", "skipinit_gain", ")", "# this slows things down more than expected, TBD", "\n", "", "out", "=", "out", "*", "self", ".", "alpha", "+", "shortcut", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.nfnet.NormFreeNet.__init__": [[463, 553], ["torch.Module.__init__", "timm.models.layers.make_divisible", "nfnet.create_stem", "enumerate", "torch.Sequential", "torch.Sequential", "timm.models.layers.get_act_layer.", "timm.models.layers.ClassifierHead", "nfnet.NormFreeNet.named_modules", "nfnet.act_with_gamma", "functools.partial", "timm.models.layers.get_act_layer", "functools.partial", "functools.partial", "x.tolist", "range", "timm.models.layers.make_divisible", "functools.partial.", "dict", "torch.Identity", "torch.Identity", "timm.models.layers.get_attn", "torch.linspace().split", "torch.linspace().split", "torch.linspace().split", "torch.linspace().split", "timm.models.layers.make_divisible", "dict", "torch.Sequential", "torch.Sequential", "isinstance", "isinstance", "nfnet.NormFreeBlock", "torch.init.zeros_", "torch.init.zeros_", "torch.init.normal_", "torch.init.normal_", "torch.init.zeros_", "torch.init.zeros_", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.init.zeros_", "torch.init.zeros_", "sum"], "methods", ["home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.solver.ranger.Ranger.__init__", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.nfnet.create_stem", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.nfnet.act_with_gamma"], ["def", "__init__", "(", "self", ",", "cfg", ":", "NfCfg", ",", "num_classes", "=", "1000", ",", "in_chans", "=", "3", ",", "global_pool", "=", "'avg'", ",", "output_stride", "=", "32", ",", "\n", "drop_rate", "=", "0.", ",", "drop_path_rate", "=", "0.", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "drop_rate", "=", "drop_rate", "\n", "assert", "cfg", ".", "act_layer", "in", "_nonlin_gamma", ",", "f\"Please add non-linearity constants for activation ({cfg.act_layer}).\"", "\n", "conv_layer", "=", "ScaledStdConv2dSame", "if", "cfg", ".", "same_padding", "else", "ScaledStdConv2d", "\n", "if", "cfg", ".", "gamma_in_act", ":", "\n", "            ", "act_layer", "=", "act_with_gamma", "(", "cfg", ".", "act_layer", ",", "gamma", "=", "_nonlin_gamma", "[", "cfg", ".", "act_layer", "]", ")", "\n", "conv_layer", "=", "partial", "(", "conv_layer", ",", "eps", "=", "1e-4", ")", "# DM weights better with higher eps", "\n", "", "else", ":", "\n", "            ", "act_layer", "=", "get_act_layer", "(", "cfg", ".", "act_layer", ")", "\n", "conv_layer", "=", "partial", "(", "conv_layer", ",", "gamma", "=", "_nonlin_gamma", "[", "cfg", ".", "act_layer", "]", ")", "\n", "", "attn_layer", "=", "partial", "(", "get_attn", "(", "cfg", ".", "attn_layer", ")", ",", "**", "cfg", ".", "attn_kwargs", ")", "if", "cfg", ".", "attn_layer", "else", "None", "\n", "\n", "stem_chs", "=", "make_divisible", "(", "(", "cfg", ".", "stem_chs", "or", "cfg", ".", "channels", "[", "0", "]", ")", "*", "cfg", ".", "width_factor", ",", "cfg", ".", "ch_div", ")", "\n", "self", ".", "stem", ",", "stem_stride", ",", "stem_feat", "=", "create_stem", "(", "\n", "in_chans", ",", "stem_chs", ",", "cfg", ".", "stem_type", ",", "conv_layer", "=", "conv_layer", ",", "act_layer", "=", "act_layer", ")", "\n", "\n", "self", ".", "feature_info", "=", "[", "stem_feat", "]", "\n", "drop_path_rates", "=", "[", "x", ".", "tolist", "(", ")", "for", "x", "in", "torch", ".", "linspace", "(", "0", ",", "drop_path_rate", ",", "sum", "(", "cfg", ".", "depths", ")", ")", ".", "split", "(", "cfg", ".", "depths", ")", "]", "\n", "prev_chs", "=", "stem_chs", "\n", "net_stride", "=", "stem_stride", "\n", "dilation", "=", "1", "\n", "expected_var", "=", "1.0", "\n", "stages", "=", "[", "]", "\n", "for", "stage_idx", ",", "stage_depth", "in", "enumerate", "(", "cfg", ".", "depths", ")", ":", "\n", "            ", "stride", "=", "1", "if", "stage_idx", "==", "0", "and", "stem_stride", ">", "2", "else", "2", "\n", "if", "net_stride", ">=", "output_stride", "and", "stride", ">", "1", ":", "\n", "                ", "dilation", "*=", "stride", "\n", "stride", "=", "1", "\n", "", "net_stride", "*=", "stride", "\n", "first_dilation", "=", "1", "if", "dilation", "in", "(", "1", ",", "2", ")", "else", "2", "\n", "\n", "blocks", "=", "[", "]", "\n", "for", "block_idx", "in", "range", "(", "cfg", ".", "depths", "[", "stage_idx", "]", ")", ":", "\n", "                ", "first_block", "=", "block_idx", "==", "0", "and", "stage_idx", "==", "0", "\n", "out_chs", "=", "make_divisible", "(", "cfg", ".", "channels", "[", "stage_idx", "]", "*", "cfg", ".", "width_factor", ",", "cfg", ".", "ch_div", ")", "\n", "blocks", "+=", "[", "NormFreeBlock", "(", "\n", "in_chs", "=", "prev_chs", ",", "out_chs", "=", "out_chs", ",", "\n", "alpha", "=", "cfg", ".", "alpha", ",", "\n", "beta", "=", "1.", "/", "expected_var", "**", "0.5", ",", "\n", "stride", "=", "stride", "if", "block_idx", "==", "0", "else", "1", ",", "\n", "dilation", "=", "dilation", ",", "\n", "first_dilation", "=", "first_dilation", ",", "\n", "group_size", "=", "cfg", ".", "group_size", ",", "\n", "bottle_ratio", "=", "1.", "if", "cfg", ".", "reg", "and", "first_block", "else", "cfg", ".", "bottle_ratio", ",", "\n", "ch_div", "=", "cfg", ".", "ch_div", ",", "\n", "reg", "=", "cfg", ".", "reg", ",", "\n", "extra_conv", "=", "cfg", ".", "extra_conv", ",", "\n", "skipinit", "=", "cfg", ".", "skipinit", ",", "\n", "attn_layer", "=", "attn_layer", ",", "\n", "attn_gain", "=", "cfg", ".", "attn_gain", ",", "\n", "act_layer", "=", "act_layer", ",", "\n", "conv_layer", "=", "conv_layer", ",", "\n", "drop_path_rate", "=", "drop_path_rates", "[", "stage_idx", "]", "[", "block_idx", "]", ",", "\n", ")", "]", "\n", "if", "block_idx", "==", "0", ":", "\n", "                    ", "expected_var", "=", "1.", "# expected var is reset after first block of each stage", "\n", "", "expected_var", "+=", "cfg", ".", "alpha", "**", "2", "# Even if reset occurs, increment expected variance", "\n", "first_dilation", "=", "dilation", "\n", "prev_chs", "=", "out_chs", "\n", "", "self", ".", "feature_info", "+=", "[", "dict", "(", "num_chs", "=", "prev_chs", ",", "reduction", "=", "net_stride", ",", "module", "=", "f'stages.{stage_idx}'", ")", "]", "\n", "stages", "+=", "[", "nn", ".", "Sequential", "(", "*", "blocks", ")", "]", "\n", "", "self", ".", "stages", "=", "nn", ".", "Sequential", "(", "*", "stages", ")", "\n", "\n", "if", "cfg", ".", "num_features", ":", "\n", "# The paper NFRegNet models have an EfficientNet-like final head convolution.", "\n", "            ", "self", ".", "num_features", "=", "make_divisible", "(", "cfg", ".", "width_factor", "*", "cfg", ".", "num_features", ",", "cfg", ".", "ch_div", ")", "\n", "self", ".", "final_conv", "=", "conv_layer", "(", "prev_chs", ",", "self", ".", "num_features", ",", "1", ")", "\n", "self", ".", "feature_info", "[", "-", "1", "]", "=", "dict", "(", "num_chs", "=", "self", ".", "num_features", ",", "reduction", "=", "net_stride", ",", "module", "=", "f'final_conv'", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "num_features", "=", "prev_chs", "\n", "self", ".", "final_conv", "=", "nn", ".", "Identity", "(", ")", "\n", "", "self", ".", "final_act", "=", "act_layer", "(", "inplace", "=", "cfg", ".", "num_features", ">", "0", ")", "\n", "\n", "self", ".", "head", "=", "ClassifierHead", "(", "self", ".", "num_features", ",", "num_classes", ",", "pool_type", "=", "global_pool", ",", "drop_rate", "=", "self", ".", "drop_rate", ")", "\n", "\n", "for", "n", ",", "m", "in", "self", ".", "named_modules", "(", ")", ":", "\n", "            ", "if", "'fc'", "in", "n", "and", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "                ", "if", "cfg", ".", "zero_init_fc", ":", "\n", "                    ", "nn", ".", "init", ".", "zeros_", "(", "m", ".", "weight", ")", "\n", "", "else", ":", "\n", "                    ", "nn", ".", "init", ".", "normal_", "(", "m", ".", "weight", ",", "0.", ",", ".01", ")", "\n", "", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "nn", ".", "init", ".", "zeros_", "(", "m", ".", "bias", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "mode", "=", "'fan_in'", ",", "nonlinearity", "=", "'linear'", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "nn", ".", "init", ".", "zeros_", "(", "m", ".", "bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.nfnet.NormFreeNet.get_classifier": [[554, 556], ["None"], "methods", ["None"], ["", "", "", "", "def", "get_classifier", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "head", ".", "fc", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.nfnet.NormFreeNet.reset_classifier": [[557, 559], ["timm.models.layers.ClassifierHead"], "methods", ["None"], ["", "def", "reset_classifier", "(", "self", ",", "num_classes", ",", "global_pool", "=", "'avg'", ")", ":", "\n", "        ", "self", ".", "head", "=", "ClassifierHead", "(", "self", ".", "num_features", ",", "num_classes", ",", "pool_type", "=", "global_pool", ",", "drop_rate", "=", "self", ".", "drop_rate", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.nfnet.NormFreeNet.forward_features": [[560, 566], ["nfnet.NormFreeNet.stem", "nfnet.NormFreeNet.stages", "nfnet.NormFreeNet.final_conv", "nfnet.NormFreeNet.final_act"], "methods", ["None"], ["", "def", "forward_features", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "stem", "(", "x", ")", "\n", "x", "=", "self", ".", "stages", "(", "x", ")", "\n", "x", "=", "self", ".", "final_conv", "(", "x", ")", "\n", "x", "=", "self", ".", "final_act", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.nfnet.NormFreeNet.forward": [[567, 571], ["nfnet.NormFreeNet.forward_features"], "methods", ["home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.nfnet.NormFreeNet.forward_features"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "forward_features", "(", "x", ")", "\n", "# x = self.head(x)", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.nfnet._dcfg": [[35, 43], ["None"], "function", ["None"], ["def", "_dcfg", "(", "url", "=", "''", ",", "**", "kwargs", ")", ":", "\n", "    ", "return", "{", "\n", "'url'", ":", "url", ",", "\n", "'num_classes'", ":", "1000", ",", "'input_size'", ":", "(", "3", ",", "224", ",", "224", ")", ",", "'pool_size'", ":", "(", "7", ",", "7", ")", ",", "\n", "'crop_pct'", ":", "0.9", ",", "'interpolation'", ":", "'bicubic'", ",", "\n", "'mean'", ":", "IMAGENET_DEFAULT_MEAN", ",", "'std'", ":", "IMAGENET_DEFAULT_STD", ",", "\n", "'first_conv'", ":", "'stem.conv1'", ",", "'classifier'", ":", "'head.fc'", ",", "\n", "**", "kwargs", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.nfnet._nfres_cfg": [[166, 173], ["nfnet.NfCfg"], "function", ["None"], ["", "def", "_nfres_cfg", "(", "\n", "depths", ",", "channels", "=", "(", "256", ",", "512", ",", "1024", ",", "2048", ")", ",", "group_size", "=", "None", ",", "act_layer", "=", "'relu'", ",", "attn_layer", "=", "None", ",", "attn_kwargs", "=", "None", ")", ":", "\n", "    ", "attn_kwargs", "=", "attn_kwargs", "or", "{", "}", "\n", "cfg", "=", "NfCfg", "(", "\n", "depths", "=", "depths", ",", "channels", "=", "channels", ",", "stem_type", "=", "'7x7_pool'", ",", "stem_chs", "=", "64", ",", "bottle_ratio", "=", "0.25", ",", "\n", "group_size", "=", "group_size", ",", "act_layer", "=", "act_layer", ",", "attn_layer", "=", "attn_layer", ",", "attn_kwargs", "=", "attn_kwargs", ")", "\n", "return", "cfg", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.nfnet._nfreg_cfg": [[175, 182], ["dict", "nfnet.NfCfg"], "function", ["None"], ["", "def", "_nfreg_cfg", "(", "depths", ",", "channels", "=", "(", "48", ",", "104", ",", "208", ",", "440", ")", ")", ":", "\n", "    ", "num_features", "=", "1280", "*", "channels", "[", "-", "1", "]", "//", "440", "\n", "attn_kwargs", "=", "dict", "(", "reduction_ratio", "=", "0.5", ",", "divisor", "=", "8", ")", "\n", "cfg", "=", "NfCfg", "(", "\n", "depths", "=", "depths", ",", "channels", "=", "channels", ",", "stem_type", "=", "'3x3'", ",", "group_size", "=", "8", ",", "width_factor", "=", "0.75", ",", "bottle_ratio", "=", "2.25", ",", "\n", "num_features", "=", "num_features", ",", "reg", "=", "True", ",", "attn_layer", "=", "'se'", ",", "attn_kwargs", "=", "attn_kwargs", ")", "\n", "return", "cfg", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.nfnet._nfnet_cfg": [[184, 194], ["int", "nfnet.NfCfg", "dict"], "function", ["None"], ["", "def", "_nfnet_cfg", "(", "\n", "depths", ",", "channels", "=", "(", "256", ",", "512", ",", "1536", ",", "1536", ")", ",", "group_size", "=", "128", ",", "bottle_ratio", "=", "0.5", ",", "feat_mult", "=", "2.", ",", "\n", "act_layer", "=", "'gelu'", ",", "attn_layer", "=", "'se'", ",", "attn_kwargs", "=", "None", ")", ":", "\n", "    ", "num_features", "=", "int", "(", "channels", "[", "-", "1", "]", "*", "feat_mult", ")", "\n", "attn_kwargs", "=", "attn_kwargs", "if", "attn_kwargs", "is", "not", "None", "else", "dict", "(", "reduction_ratio", "=", "0.5", ",", "divisor", "=", "8", ")", "\n", "cfg", "=", "NfCfg", "(", "\n", "depths", "=", "depths", ",", "channels", "=", "channels", ",", "stem_type", "=", "'deep_quad'", ",", "stem_chs", "=", "128", ",", "group_size", "=", "group_size", ",", "\n", "bottle_ratio", "=", "bottle_ratio", ",", "extra_conv", "=", "True", ",", "num_features", "=", "num_features", ",", "act_layer", "=", "act_layer", ",", "\n", "attn_layer", "=", "attn_layer", ",", "attn_kwargs", "=", "attn_kwargs", ")", "\n", "return", "cfg", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.nfnet._dm_nfnet_cfg": [[196, 203], ["dict", "nfnet.NfCfg", "int"], "function", ["None"], ["", "def", "_dm_nfnet_cfg", "(", "depths", ",", "channels", "=", "(", "256", ",", "512", ",", "1536", ",", "1536", ")", ",", "act_layer", "=", "'gelu'", ",", "skipinit", "=", "True", ")", ":", "\n", "    ", "attn_kwargs", "=", "dict", "(", "reduction_ratio", "=", "0.5", ",", "divisor", "=", "8", ")", "\n", "cfg", "=", "NfCfg", "(", "\n", "depths", "=", "depths", ",", "channels", "=", "channels", ",", "stem_type", "=", "'deep_quad'", ",", "stem_chs", "=", "128", ",", "group_size", "=", "128", ",", "\n", "bottle_ratio", "=", "0.5", ",", "extra_conv", "=", "True", ",", "gamma_in_act", "=", "True", ",", "same_padding", "=", "True", ",", "skipinit", "=", "skipinit", ",", "\n", "num_features", "=", "int", "(", "channels", "[", "-", "1", "]", "*", "2.0", ")", ",", "act_layer", "=", "act_layer", ",", "attn_layer", "=", "'se'", ",", "attn_kwargs", "=", "attn_kwargs", ")", "\n", "return", "cfg", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.nfnet.act_with_gamma": [[283, 287], ["nfnet.GammaAct"], "function", ["None"], ["", "", "def", "act_with_gamma", "(", "act_type", ",", "gamma", ":", "float", "=", "1.", ")", ":", "\n", "    ", "def", "_create", "(", "inplace", "=", "False", ")", ":", "\n", "        ", "return", "GammaAct", "(", "act_type", ",", "gamma", "=", "gamma", ",", "inplace", "=", "inplace", ")", "\n", "", "return", "_create", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.nfnet.create_stem": [[381, 419], ["dict", "collections.OrderedDict", "enumerate", "torch.MaxPool2d", "torch.Sequential", "dict", "dict", "len", "zip", "conv_layer", "conv_layer", "conv_layer", "act_layer"], "function", ["None"], ["", "", "def", "create_stem", "(", "in_chs", ",", "out_chs", ",", "stem_type", "=", "''", ",", "conv_layer", "=", "None", ",", "act_layer", "=", "None", ",", "preact_feature", "=", "True", ")", ":", "\n", "    ", "stem_stride", "=", "2", "\n", "stem_feature", "=", "dict", "(", "num_chs", "=", "out_chs", ",", "reduction", "=", "2", ",", "module", "=", "'stem.conv'", ")", "\n", "stem", "=", "OrderedDict", "(", ")", "\n", "assert", "stem_type", "in", "(", "''", ",", "'deep'", ",", "'deep_tiered'", ",", "'deep_quad'", ",", "'3x3'", ",", "'7x7'", ",", "'deep_pool'", ",", "'3x3_pool'", ",", "'7x7_pool'", ")", "\n", "if", "'deep'", "in", "stem_type", ":", "\n", "        ", "if", "'quad'", "in", "stem_type", ":", "\n", "# 4 deep conv stack as in NFNet-F models", "\n", "            ", "assert", "not", "'pool'", "in", "stem_type", "\n", "stem_chs", "=", "(", "out_chs", "//", "8", ",", "out_chs", "//", "4", ",", "out_chs", "//", "2", ",", "out_chs", ")", "\n", "strides", "=", "(", "2", ",", "1", ",", "1", ",", "2", ")", "\n", "stem_stride", "=", "4", "\n", "stem_feature", "=", "dict", "(", "num_chs", "=", "out_chs", "//", "2", ",", "reduction", "=", "2", ",", "module", "=", "'stem.conv3'", ")", "\n", "", "else", ":", "\n", "            ", "if", "'tiered'", "in", "stem_type", ":", "\n", "                ", "stem_chs", "=", "(", "3", "*", "out_chs", "//", "8", ",", "out_chs", "//", "2", ",", "out_chs", ")", "# 'T' resnets in resnet.py", "\n", "", "else", ":", "\n", "                ", "stem_chs", "=", "(", "out_chs", "//", "2", ",", "out_chs", "//", "2", ",", "out_chs", ")", "# 'D' ResNets", "\n", "", "strides", "=", "(", "2", ",", "1", ",", "1", ")", "\n", "stem_feature", "=", "dict", "(", "num_chs", "=", "out_chs", "//", "2", ",", "reduction", "=", "2", ",", "module", "=", "'stem.conv2'", ")", "\n", "", "last_idx", "=", "len", "(", "stem_chs", ")", "-", "1", "\n", "for", "i", ",", "(", "c", ",", "s", ")", "in", "enumerate", "(", "zip", "(", "stem_chs", ",", "strides", ")", ")", ":", "\n", "            ", "stem", "[", "f'conv{i + 1}'", "]", "=", "conv_layer", "(", "in_chs", ",", "c", ",", "kernel_size", "=", "3", ",", "stride", "=", "s", ")", "\n", "if", "i", "!=", "last_idx", ":", "\n", "                ", "stem", "[", "f'act{i + 2}'", "]", "=", "act_layer", "(", "inplace", "=", "True", ")", "\n", "", "in_chs", "=", "c", "\n", "", "", "elif", "'3x3'", "in", "stem_type", ":", "\n", "# 3x3 stem conv as in RegNet", "\n", "        ", "stem", "[", "'conv'", "]", "=", "conv_layer", "(", "in_chs", ",", "out_chs", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ")", "\n", "", "else", ":", "\n", "# 7x7 stem conv as in ResNet", "\n", "        ", "stem", "[", "'conv'", "]", "=", "conv_layer", "(", "in_chs", ",", "out_chs", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ")", "\n", "\n", "", "if", "'pool'", "in", "stem_type", ":", "\n", "        ", "stem", "[", "'pool'", "]", "=", "nn", ".", "MaxPool2d", "(", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "stem_stride", "=", "4", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "stem", ")", ",", "stem_stride", ",", "stem_feature", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.nfnet._create_normfreenet": [[573, 583], ["print", "dict", "timm.models.helpers.build_model_with_cfg", "str"], "function", ["None"], ["", "", "def", "_create_normfreenet", "(", "variant", ",", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "print", "(", "'create nf net with pretraiend='", "+", "str", "(", "pretrained", ")", ")", "\n", "model_cfg", "=", "model_cfgs", "[", "variant", "]", "\n", "feature_cfg", "=", "dict", "(", "flatten_sequential", "=", "True", ")", "\n", "return", "build_model_with_cfg", "(", "\n", "NormFreeNet", ",", "variant", ",", "pretrained", ",", "\n", "default_cfg", "=", "default_cfgs", "[", "variant", "]", ",", "\n", "model_cfg", "=", "model_cfg", ",", "\n", "feature_cfg", "=", "feature_cfg", ",", "\n", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.nfnet.dm_nfnet_f0": [[585, 592], ["nfnet._create_normfreenet"], "function", ["home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.nfnet._create_normfreenet"], ["", "@", "register_model", "\n", "def", "dm_nfnet_f0", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\" NFNet-F0 (DeepMind weight compatible)\n    `High-Performance Large-Scale Image Recognition Without Normalization`\n        - https://arxiv.org/abs/2102.06171\n    \"\"\"", "\n", "return", "_create_normfreenet", "(", "'dm_nfnet_f0'", ",", "pretrained", "=", "pretrained", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.nfnet.dm_nfnet_f1": [[594, 601], ["nfnet._create_normfreenet"], "function", ["home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.nfnet._create_normfreenet"], ["", "@", "register_model", "\n", "def", "dm_nfnet_f1", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\" NFNet-F1 (DeepMind weight compatible)\n    `High-Performance Large-Scale Image Recognition Without Normalization`\n        - https://arxiv.org/abs/2102.06171\n    \"\"\"", "\n", "return", "_create_normfreenet", "(", "'dm_nfnet_f1'", ",", "pretrained", "=", "pretrained", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.nfnet.dm_nfnet_f2": [[603, 610], ["nfnet._create_normfreenet"], "function", ["home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.nfnet._create_normfreenet"], ["", "@", "register_model", "\n", "def", "dm_nfnet_f2", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\" NFNet-F2 (DeepMind weight compatible)\n    `High-Performance Large-Scale Image Recognition Without Normalization`\n        - https://arxiv.org/abs/2102.06171\n    \"\"\"", "\n", "return", "_create_normfreenet", "(", "'dm_nfnet_f2'", ",", "pretrained", "=", "pretrained", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.nfnet.dm_nfnet_f3": [[612, 620], ["print", "nfnet._create_normfreenet"], "function", ["home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.nfnet._create_normfreenet"], ["", "@", "register_model", "\n", "def", "dm_nfnet_f3", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\" NFNet-F3 (DeepMind weight compatible)\n    `High-Performance Large-Scale Image Recognition Without Normalization`\n        - https://arxiv.org/abs/2102.06171\n    \"\"\"", "\n", "print", "(", "'loading model dm_nfnet_f3, pretrained='", ",", "+", "pretrained", ")", "\n", "return", "_create_normfreenet", "(", "'dm_nfnet_f3'", ",", "pretrained", "=", "pretrained", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.nfnet.dm_nfnet_f4": [[622, 629], ["nfnet._create_normfreenet"], "function", ["home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.nfnet._create_normfreenet"], ["", "@", "register_model", "\n", "def", "dm_nfnet_f4", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\" NFNet-F4 (DeepMind weight compatible)\n    `High-Performance Large-Scale Image Recognition Without Normalization`\n        - https://arxiv.org/abs/2102.06171\n    \"\"\"", "\n", "return", "_create_normfreenet", "(", "'dm_nfnet_f4'", ",", "pretrained", "=", "pretrained", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.nfnet.dm_nfnet_f5": [[631, 638], ["nfnet._create_normfreenet"], "function", ["home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.nfnet._create_normfreenet"], ["", "@", "register_model", "\n", "def", "dm_nfnet_f5", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\" NFNet-F5 (DeepMind weight compatible)\n    `High-Performance Large-Scale Image Recognition Without Normalization`\n        - https://arxiv.org/abs/2102.06171\n    \"\"\"", "\n", "return", "_create_normfreenet", "(", "'dm_nfnet_f5'", ",", "pretrained", "=", "pretrained", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.nfnet.dm_nfnet_f6": [[640, 647], ["nfnet._create_normfreenet"], "function", ["home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.nfnet._create_normfreenet"], ["", "@", "register_model", "\n", "def", "dm_nfnet_f6", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\" NFNet-F6 (DeepMind weight compatible)\n    `High-Performance Large-Scale Image Recognition Without Normalization`\n        - https://arxiv.org/abs/2102.06171\n    \"\"\"", "\n", "return", "_create_normfreenet", "(", "'dm_nfnet_f6'", ",", "pretrained", "=", "pretrained", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.nfnet.nfnet_f0": [[649, 656], ["nfnet._create_normfreenet"], "function", ["home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.nfnet._create_normfreenet"], ["", "@", "register_model", "\n", "def", "nfnet_f0", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\" NFNet-F0\n    `High-Performance Large-Scale Image Recognition Without Normalization`\n        - https://arxiv.org/abs/2102.06171\n    \"\"\"", "\n", "return", "_create_normfreenet", "(", "'nfnet_f0'", ",", "pretrained", "=", "pretrained", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.nfnet.nfnet_f1": [[658, 665], ["nfnet._create_normfreenet"], "function", ["home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.nfnet._create_normfreenet"], ["", "@", "register_model", "\n", "def", "nfnet_f1", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\" NFNet-F1\n    `High-Performance Large-Scale Image Recognition Without Normalization`\n        - https://arxiv.org/abs/2102.06171\n    \"\"\"", "\n", "return", "_create_normfreenet", "(", "'nfnet_f1'", ",", "pretrained", "=", "pretrained", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.nfnet.nfnet_f2": [[667, 674], ["nfnet._create_normfreenet"], "function", ["home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.nfnet._create_normfreenet"], ["", "@", "register_model", "\n", "def", "nfnet_f2", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\" NFNet-F2\n    `High-Performance Large-Scale Image Recognition Without Normalization`\n        - https://arxiv.org/abs/2102.06171\n    \"\"\"", "\n", "return", "_create_normfreenet", "(", "'nfnet_f2'", ",", "pretrained", "=", "pretrained", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.nfnet.nfnet_f3": [[676, 683], ["nfnet._create_normfreenet"], "function", ["home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.nfnet._create_normfreenet"], ["", "@", "register_model", "\n", "def", "nfnet_f3", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\" NFNet-F3\n    `High-Performance Large-Scale Image Recognition Without Normalization`\n        - https://arxiv.org/abs/2102.06171\n    \"\"\"", "\n", "return", "_create_normfreenet", "(", "'nfnet_f3'", ",", "pretrained", "=", "pretrained", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.nfnet.nfnet_f4": [[685, 692], ["nfnet._create_normfreenet"], "function", ["home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.nfnet._create_normfreenet"], ["", "@", "register_model", "\n", "def", "nfnet_f4", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\" NFNet-F4\n    `High-Performance Large-Scale Image Recognition Without Normalization`\n        - https://arxiv.org/abs/2102.06171\n    \"\"\"", "\n", "return", "_create_normfreenet", "(", "'nfnet_f4'", ",", "pretrained", "=", "pretrained", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.nfnet.nfnet_f5": [[694, 701], ["nfnet._create_normfreenet"], "function", ["home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.nfnet._create_normfreenet"], ["", "@", "register_model", "\n", "def", "nfnet_f5", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\" NFNet-F5\n    `High-Performance Large-Scale Image Recognition Without Normalization`\n        - https://arxiv.org/abs/2102.06171\n    \"\"\"", "\n", "return", "_create_normfreenet", "(", "'nfnet_f5'", ",", "pretrained", "=", "pretrained", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.nfnet.nfnet_f6": [[703, 710], ["nfnet._create_normfreenet"], "function", ["home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.nfnet._create_normfreenet"], ["", "@", "register_model", "\n", "def", "nfnet_f6", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\" NFNet-F6\n    `High-Performance Large-Scale Image Recognition Without Normalization`\n        - https://arxiv.org/abs/2102.06171\n    \"\"\"", "\n", "return", "_create_normfreenet", "(", "'nfnet_f6'", ",", "pretrained", "=", "pretrained", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.nfnet.nfnet_f7": [[712, 719], ["nfnet._create_normfreenet"], "function", ["home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.nfnet._create_normfreenet"], ["", "@", "register_model", "\n", "def", "nfnet_f7", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\" NFNet-F7\n    `High-Performance Large-Scale Image Recognition Without Normalization`\n        - https://arxiv.org/abs/2102.06171\n    \"\"\"", "\n", "return", "_create_normfreenet", "(", "'nfnet_f7'", ",", "pretrained", "=", "pretrained", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.nfnet.nfnet_f0s": [[721, 728], ["nfnet._create_normfreenet"], "function", ["home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.nfnet._create_normfreenet"], ["", "@", "register_model", "\n", "def", "nfnet_f0s", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\" NFNet-F0 w/ SiLU\n    `High-Performance Large-Scale Image Recognition Without Normalization`\n        - https://arxiv.org/abs/2102.06171\n    \"\"\"", "\n", "return", "_create_normfreenet", "(", "'nfnet_f0s'", ",", "pretrained", "=", "pretrained", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.nfnet.nfnet_f1s": [[730, 737], ["nfnet._create_normfreenet"], "function", ["home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.nfnet._create_normfreenet"], ["", "@", "register_model", "\n", "def", "nfnet_f1s", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\" NFNet-F1 w/ SiLU\n    `High-Performance Large-Scale Image Recognition Without Normalization`\n        - https://arxiv.org/abs/2102.06171\n    \"\"\"", "\n", "return", "_create_normfreenet", "(", "'nfnet_f1s'", ",", "pretrained", "=", "pretrained", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.nfnet.nfnet_f2s": [[739, 746], ["nfnet._create_normfreenet"], "function", ["home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.nfnet._create_normfreenet"], ["", "@", "register_model", "\n", "def", "nfnet_f2s", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\" NFNet-F2 w/ SiLU\n    `High-Performance Large-Scale Image Recognition Without Normalization`\n        - https://arxiv.org/abs/2102.06171\n    \"\"\"", "\n", "return", "_create_normfreenet", "(", "'nfnet_f2s'", ",", "pretrained", "=", "pretrained", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.nfnet.nfnet_f3s": [[748, 755], ["nfnet._create_normfreenet"], "function", ["home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.nfnet._create_normfreenet"], ["", "@", "register_model", "\n", "def", "nfnet_f3s", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\" NFNet-F3 w/ SiLU\n    `High-Performance Large-Scale Image Recognition Without Normalization`\n        - https://arxiv.org/abs/2102.06171\n    \"\"\"", "\n", "return", "_create_normfreenet", "(", "'nfnet_f3s'", ",", "pretrained", "=", "pretrained", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.nfnet.nfnet_f4s": [[757, 764], ["nfnet._create_normfreenet"], "function", ["home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.nfnet._create_normfreenet"], ["", "@", "register_model", "\n", "def", "nfnet_f4s", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\" NFNet-F4 w/ SiLU\n    `High-Performance Large-Scale Image Recognition Without Normalization`\n        - https://arxiv.org/abs/2102.06171\n    \"\"\"", "\n", "return", "_create_normfreenet", "(", "'nfnet_f4s'", ",", "pretrained", "=", "pretrained", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.nfnet.nfnet_f5s": [[766, 773], ["nfnet._create_normfreenet"], "function", ["home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.nfnet._create_normfreenet"], ["", "@", "register_model", "\n", "def", "nfnet_f5s", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\" NFNet-F5 w/ SiLU\n    `High-Performance Large-Scale Image Recognition Without Normalization`\n        - https://arxiv.org/abs/2102.06171\n    \"\"\"", "\n", "return", "_create_normfreenet", "(", "'nfnet_f5s'", ",", "pretrained", "=", "pretrained", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.nfnet.nfnet_f6s": [[775, 782], ["nfnet._create_normfreenet"], "function", ["home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.nfnet._create_normfreenet"], ["", "@", "register_model", "\n", "def", "nfnet_f6s", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\" NFNet-F6 w/ SiLU\n    `High-Performance Large-Scale Image Recognition Without Normalization`\n        - https://arxiv.org/abs/2102.06171\n    \"\"\"", "\n", "return", "_create_normfreenet", "(", "'nfnet_f6s'", ",", "pretrained", "=", "pretrained", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.nfnet.nfnet_f7s": [[784, 791], ["nfnet._create_normfreenet"], "function", ["home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.nfnet._create_normfreenet"], ["", "@", "register_model", "\n", "def", "nfnet_f7s", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\" NFNet-F7 w/ SiLU\n    `High-Performance Large-Scale Image Recognition Without Normalization`\n        - https://arxiv.org/abs/2102.06171\n    \"\"\"", "\n", "return", "_create_normfreenet", "(", "'nfnet_f7s'", ",", "pretrained", "=", "pretrained", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.nfnet.nfnet_l0a": [[793, 799], ["nfnet._create_normfreenet"], "function", ["home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.nfnet._create_normfreenet"], ["", "@", "register_model", "\n", "def", "nfnet_l0a", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\" NFNet-L0a w/ SiLU\n    My experimental 'light' model w/ 1280 width stage 3, 1.5x final_conv mult, 64 group_size, .25 bottleneck & SE ratio\n    \"\"\"", "\n", "return", "_create_normfreenet", "(", "'nfnet_l0a'", ",", "pretrained", "=", "pretrained", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.nfnet.nfnet_l0b": [[801, 807], ["nfnet._create_normfreenet"], "function", ["home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.nfnet._create_normfreenet"], ["", "@", "register_model", "\n", "def", "nfnet_l0b", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\" NFNet-L0b w/ SiLU\n    My experimental 'light' model w/ 1.5x final_conv mult, 64 group_size, .25 bottleneck & SE ratio\n    \"\"\"", "\n", "return", "_create_normfreenet", "(", "'nfnet_l0b'", ",", "pretrained", "=", "pretrained", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.nfnet.eca_nfnet_l0": [[809, 815], ["nfnet._create_normfreenet"], "function", ["home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.nfnet._create_normfreenet"], ["", "@", "register_model", "\n", "def", "eca_nfnet_l0", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\" ECA-NFNet-L0 w/ SiLU\n    My experimental 'light' model w/ 1.5x final_conv mult, 64 group_size, .25 bottleneck & ECA attn\n    \"\"\"", "\n", "return", "_create_normfreenet", "(", "'eca_nfnet_l0'", ",", "pretrained", "=", "pretrained", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.nfnet.nf_regnet_b0": [[817, 824], ["nfnet._create_normfreenet"], "function", ["home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.nfnet._create_normfreenet"], ["", "@", "register_model", "\n", "def", "nf_regnet_b0", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\" Normalization-Free RegNet-B0\n    `Characterizing signal propagation to close the performance gap in unnormalized ResNets`\n        - https://arxiv.org/abs/2101.08692\n    \"\"\"", "\n", "return", "_create_normfreenet", "(", "'nf_regnet_b0'", ",", "pretrained", "=", "pretrained", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.nfnet.nf_regnet_b1": [[826, 833], ["nfnet._create_normfreenet"], "function", ["home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.nfnet._create_normfreenet"], ["", "@", "register_model", "\n", "def", "nf_regnet_b1", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\" Normalization-Free RegNet-B1\n    `Characterizing signal propagation to close the performance gap in unnormalized ResNets`\n        - https://arxiv.org/abs/2101.08692\n    \"\"\"", "\n", "return", "_create_normfreenet", "(", "'nf_regnet_b1'", ",", "pretrained", "=", "pretrained", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.nfnet.nf_regnet_b2": [[835, 842], ["nfnet._create_normfreenet"], "function", ["home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.nfnet._create_normfreenet"], ["", "@", "register_model", "\n", "def", "nf_regnet_b2", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\" Normalization-Free RegNet-B2\n    `Characterizing signal propagation to close the performance gap in unnormalized ResNets`\n        - https://arxiv.org/abs/2101.08692\n    \"\"\"", "\n", "return", "_create_normfreenet", "(", "'nf_regnet_b2'", ",", "pretrained", "=", "pretrained", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.nfnet.nf_regnet_b3": [[844, 851], ["nfnet._create_normfreenet"], "function", ["home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.nfnet._create_normfreenet"], ["", "@", "register_model", "\n", "def", "nf_regnet_b3", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\" Normalization-Free RegNet-B3\n    `Characterizing signal propagation to close the performance gap in unnormalized ResNets`\n        - https://arxiv.org/abs/2101.08692\n    \"\"\"", "\n", "return", "_create_normfreenet", "(", "'nf_regnet_b3'", ",", "pretrained", "=", "pretrained", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.nfnet.nf_regnet_b4": [[853, 860], ["nfnet._create_normfreenet"], "function", ["home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.nfnet._create_normfreenet"], ["", "@", "register_model", "\n", "def", "nf_regnet_b4", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\" Normalization-Free RegNet-B4\n    `Characterizing signal propagation to close the performance gap in unnormalized ResNets`\n        - https://arxiv.org/abs/2101.08692\n    \"\"\"", "\n", "return", "_create_normfreenet", "(", "'nf_regnet_b4'", ",", "pretrained", "=", "pretrained", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.nfnet.nf_regnet_b5": [[862, 869], ["nfnet._create_normfreenet"], "function", ["home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.nfnet._create_normfreenet"], ["", "@", "register_model", "\n", "def", "nf_regnet_b5", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\" Normalization-Free RegNet-B5\n    `Characterizing signal propagation to close the performance gap in unnormalized ResNets`\n        - https://arxiv.org/abs/2101.08692\n    \"\"\"", "\n", "return", "_create_normfreenet", "(", "'nf_regnet_b5'", ",", "pretrained", "=", "pretrained", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.nfnet.nf_resnet26": [[871, 878], ["nfnet._create_normfreenet"], "function", ["home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.nfnet._create_normfreenet"], ["", "@", "register_model", "\n", "def", "nf_resnet26", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\" Normalization-Free ResNet-26\n    `Characterizing signal propagation to close the performance gap in unnormalized ResNets`\n        - https://arxiv.org/abs/2101.08692\n    \"\"\"", "\n", "return", "_create_normfreenet", "(", "'nf_resnet26'", ",", "pretrained", "=", "pretrained", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.nfnet.nf_resnet50": [[880, 887], ["nfnet._create_normfreenet"], "function", ["home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.nfnet._create_normfreenet"], ["", "@", "register_model", "\n", "def", "nf_resnet50", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\" Normalization-Free ResNet-50\n    `Characterizing signal propagation to close the performance gap in unnormalized ResNets`\n        - https://arxiv.org/abs/2101.08692\n    \"\"\"", "\n", "return", "_create_normfreenet", "(", "'nf_resnet50'", ",", "pretrained", "=", "pretrained", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.nfnet.nf_resnet101": [[889, 896], ["nfnet._create_normfreenet"], "function", ["home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.nfnet._create_normfreenet"], ["", "@", "register_model", "\n", "def", "nf_resnet101", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\" Normalization-Free ResNet-101\n    `Characterizing signal propagation to close the performance gap in unnormalized ResNets`\n        - https://arxiv.org/abs/2101.08692\n    \"\"\"", "\n", "return", "_create_normfreenet", "(", "'nf_resnet101'", ",", "pretrained", "=", "pretrained", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.nfnet.nf_seresnet26": [[898, 903], ["nfnet._create_normfreenet"], "function", ["home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.nfnet._create_normfreenet"], ["", "@", "register_model", "\n", "def", "nf_seresnet26", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\" Normalization-Free SE-ResNet26\n    \"\"\"", "\n", "return", "_create_normfreenet", "(", "'nf_seresnet26'", ",", "pretrained", "=", "pretrained", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.nfnet.nf_seresnet50": [[905, 910], ["nfnet._create_normfreenet"], "function", ["home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.nfnet._create_normfreenet"], ["", "@", "register_model", "\n", "def", "nf_seresnet50", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\" Normalization-Free SE-ResNet50\n    \"\"\"", "\n", "return", "_create_normfreenet", "(", "'nf_seresnet50'", ",", "pretrained", "=", "pretrained", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.nfnet.nf_seresnet101": [[912, 917], ["nfnet._create_normfreenet"], "function", ["home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.nfnet._create_normfreenet"], ["", "@", "register_model", "\n", "def", "nf_seresnet101", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\" Normalization-Free SE-ResNet101\n    \"\"\"", "\n", "return", "_create_normfreenet", "(", "'nf_seresnet101'", ",", "pretrained", "=", "pretrained", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.nfnet.nf_ecaresnet26": [[919, 924], ["nfnet._create_normfreenet"], "function", ["home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.nfnet._create_normfreenet"], ["", "@", "register_model", "\n", "def", "nf_ecaresnet26", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\" Normalization-Free ECA-ResNet26\n    \"\"\"", "\n", "return", "_create_normfreenet", "(", "'nf_ecaresnet26'", ",", "pretrained", "=", "pretrained", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.nfnet.nf_ecaresnet50": [[926, 931], ["nfnet._create_normfreenet"], "function", ["home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.nfnet._create_normfreenet"], ["", "@", "register_model", "\n", "def", "nf_ecaresnet50", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\" Normalization-Free ECA-ResNet50\n    \"\"\"", "\n", "return", "_create_normfreenet", "(", "'nf_ecaresnet50'", ",", "pretrained", "=", "pretrained", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.nfnet.nf_ecaresnet101": [[933, 938], ["nfnet._create_normfreenet"], "function", ["home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.backbones.nfnet._create_normfreenet"], ["", "@", "register_model", "\n", "def", "nf_ecaresnet101", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\" Normalization-Free ECA-ResNet101\n    \"\"\"", "\n", "return", "_create_normfreenet", "(", "'nf_ecaresnet101'", ",", "pretrained", "=", "pretrained", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.regnet.config.assert_and_infer_cfg": [[346, 377], ["None"], "function", ["None"], ["def", "assert_and_infer_cfg", "(", "cache_urls", "=", "True", ")", ":", "\n", "    ", "\"\"\"Checks config values invariants.\"\"\"", "\n", "assert", "(", "\n", "not", "_C", ".", "OPTIM", ".", "STEPS", "or", "_C", ".", "OPTIM", ".", "STEPS", "[", "0", "]", "==", "0", "\n", ")", ",", "\"The first lr step must start at 0\"", "\n", "assert", "_C", ".", "TRAIN", ".", "SPLIT", "in", "[", "\n", "\"train\"", ",", "\n", "\"val\"", ",", "\n", "\"test\"", ",", "\n", "]", ",", "\"Train split '{}' not supported\"", ".", "format", "(", "_C", ".", "TRAIN", ".", "SPLIT", ")", "\n", "assert", "(", "\n", "_C", ".", "TRAIN", ".", "BATCH_SIZE", "%", "_C", ".", "NUM_GPUS", "==", "0", "\n", ")", ",", "\"Train mini-batch size should be a multiple of NUM_GPUS.\"", "\n", "assert", "_C", ".", "TEST", ".", "SPLIT", "in", "[", "\n", "\"train\"", ",", "\n", "\"val\"", ",", "\n", "\"test\"", ",", "\n", "]", ",", "\"Test split '{}' not supported\"", ".", "format", "(", "_C", ".", "TEST", ".", "SPLIT", ")", "\n", "assert", "(", "\n", "_C", ".", "TEST", ".", "BATCH_SIZE", "%", "_C", ".", "NUM_GPUS", "==", "0", "\n", ")", ",", "\"Test mini-batch size should be a multiple of NUM_GPUS.\"", "\n", "assert", "(", "\n", "not", "_C", ".", "BN", ".", "USE_PRECISE_STATS", "or", "_C", ".", "NUM_GPUS", "==", "1", "\n", ")", ",", "\"Precise BN stats computation not verified for > 1 GPU\"", "\n", "assert", "_C", ".", "LOG_DEST", "in", "[", "\n", "\"stdout\"", ",", "\n", "\"file\"", ",", "\n", "]", ",", "\"Log destination '{}' not supported\"", ".", "format", "(", "_C", ".", "LOG_DEST", ")", "\n", "assert", "(", "\n", "not", "_C", ".", "PREC_TIME", ".", "ENABLED", "or", "_C", ".", "NUM_GPUS", "==", "1", "\n", ")", ",", "\"Precise iter time computation not verified for > 1 GPU\"", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.regnet.config.dump_cfg": [[379, 384], ["os.path.join", "open", "_C.dump"], "function", ["None"], ["", "def", "dump_cfg", "(", ")", ":", "\n", "    ", "\"\"\"Dumps the config to the output directory.\"\"\"", "\n", "cfg_file", "=", "os", ".", "path", ".", "join", "(", "_C", ".", "OUT_DIR", ",", "_C", ".", "CFG_DEST", ")", "\n", "with", "open", "(", "cfg_file", ",", "\"w\"", ")", "as", "f", ":", "\n", "        ", "_C", ".", "dump", "(", "stream", "=", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.regnet.config.load_cfg": [[386, 390], ["os.path.join", "_C.merge_from_file"], "function", ["None"], ["", "", "def", "load_cfg", "(", "out_dir", ",", "cfg_dest", "=", "\"config.yaml\"", ")", ":", "\n", "    ", "\"\"\"Loads config from specified output directory.\"\"\"", "\n", "cfg_file", "=", "os", ".", "path", ".", "join", "(", "out_dir", ",", "cfg_dest", ")", "\n", "_C", ".", "merge_from_file", "(", "cfg_file", ")", "", "", ""]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.regnet.regnet.AnyHead.__init__": [[53, 57], ["torch.Module.__init__", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.solver.ranger.Ranger.__init__"], ["def", "__init__", "(", "self", ",", "w_in", ",", "nc", ")", ":", "\n", "        ", "super", "(", "AnyHead", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "avg_pool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "w_in", ",", "nc", ",", "bias", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.regnet.regnet.AnyHead.forward": [[58, 63], ["regnet.AnyHead.avg_pool", "regnet.AnyHead.view", "regnet.AnyHead.fc", "regnet.AnyHead.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "avg_pool", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.regnet.regnet.VanillaBlock.__init__": [[68, 74], ["torch.Module.__init__", "regnet.VanillaBlock.construct"], "methods", ["home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.solver.ranger.Ranger.__init__", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.regnet.regnet.AnyNet.construct"], ["def", "__init__", "(", "self", ",", "w_in", ",", "w_out", ",", "stride", ",", "bm", "=", "None", ",", "gw", "=", "None", ",", "se_r", "=", "None", ")", ":", "\n", "        ", "assert", "(", "\n", "bm", "is", "None", "and", "gw", "is", "None", "and", "se_r", "is", "None", "\n", ")", ",", "\"Vanilla block does not support bm, gw, and se_r options\"", "\n", "super", "(", "VanillaBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "construct", "(", "w_in", ",", "w_out", ",", "stride", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.regnet.regnet.VanillaBlock.construct": [[75, 86], ["torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU"], "methods", ["None"], ["", "def", "construct", "(", "self", ",", "w_in", ",", "w_out", ",", "stride", ")", ":", "\n", "# 3x3, BN, ReLU", "\n", "        ", "self", ".", "a", "=", "nn", ".", "Conv2d", "(", "\n", "w_in", ",", "w_out", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", "\n", ")", "\n", "self", ".", "a_bn", "=", "nn", ".", "BatchNorm2d", "(", "w_out", ",", "eps", "=", "regnet_cfg", ".", "BN", ".", "EPS", ",", "momentum", "=", "regnet_cfg", ".", "BN", ".", "MOM", ")", "\n", "self", ".", "a_relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "regnet_cfg", ".", "MEM", ".", "RELU_INPLACE", ")", "\n", "# 3x3, BN, ReLU", "\n", "self", ".", "b", "=", "nn", ".", "Conv2d", "(", "w_out", ",", "w_out", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "b_bn", "=", "nn", ".", "BatchNorm2d", "(", "w_out", ",", "eps", "=", "regnet_cfg", ".", "BN", ".", "EPS", ",", "momentum", "=", "regnet_cfg", ".", "BN", ".", "MOM", ")", "\n", "self", ".", "b_relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "regnet_cfg", ".", "MEM", ".", "RELU_INPLACE", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.regnet.regnet.VanillaBlock.forward": [[87, 91], ["regnet.VanillaBlock.children", "layer"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "for", "layer", "in", "self", ".", "children", "(", ")", ":", "\n", "            ", "x", "=", "layer", "(", "x", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.regnet.regnet.BasicTransform.__init__": [[96, 99], ["torch.Module.__init__", "regnet.BasicTransform.construct"], "methods", ["home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.solver.ranger.Ranger.__init__", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.regnet.regnet.AnyNet.construct"], ["def", "__init__", "(", "self", ",", "w_in", ",", "w_out", ",", "stride", ")", ":", "\n", "        ", "super", "(", "BasicTransform", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "construct", "(", "w_in", ",", "w_out", ",", "stride", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.regnet.regnet.BasicTransform.construct": [[100, 111], ["torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["None"], ["", "def", "construct", "(", "self", ",", "w_in", ",", "w_out", ",", "stride", ")", ":", "\n", "# 3x3, BN, ReLU", "\n", "        ", "self", ".", "a", "=", "nn", ".", "Conv2d", "(", "\n", "w_in", ",", "w_out", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", "\n", ")", "\n", "self", ".", "a_bn", "=", "nn", ".", "BatchNorm2d", "(", "w_out", ",", "eps", "=", "regnet_cfg", ".", "BN", ".", "EPS", ",", "momentum", "=", "regnet_cfg", ".", "BN", ".", "MOM", ")", "\n", "self", ".", "a_relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "regnet_cfg", ".", "MEM", ".", "RELU_INPLACE", ")", "\n", "# 3x3, BN", "\n", "self", ".", "b", "=", "nn", ".", "Conv2d", "(", "w_out", ",", "w_out", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "b_bn", "=", "nn", ".", "BatchNorm2d", "(", "w_out", ",", "eps", "=", "regnet_cfg", ".", "BN", ".", "EPS", ",", "momentum", "=", "regnet_cfg", ".", "BN", ".", "MOM", ")", "\n", "self", ".", "b_bn", ".", "final_bn", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.regnet.regnet.BasicTransform.forward": [[112, 116], ["regnet.BasicTransform.children", "layer"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "for", "layer", "in", "self", ".", "children", "(", ")", ":", "\n", "            ", "x", "=", "layer", "(", "x", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.regnet.regnet.ResBasicBlock.__init__": [[121, 127], ["torch.Module.__init__", "regnet.ResBasicBlock.construct"], "methods", ["home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.solver.ranger.Ranger.__init__", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.regnet.regnet.AnyNet.construct"], ["def", "__init__", "(", "self", ",", "w_in", ",", "w_out", ",", "stride", ",", "bm", "=", "None", ",", "gw", "=", "None", ",", "se_r", "=", "None", ")", ":", "\n", "        ", "assert", "(", "\n", "bm", "is", "None", "and", "gw", "is", "None", "and", "se_r", "is", "None", "\n", ")", ",", "\"Basic transform does not support bm, gw, and se_r options\"", "\n", "super", "(", "ResBasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "construct", "(", "w_in", ",", "w_out", ",", "stride", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.regnet.regnet.ResBasicBlock._add_skip_proj": [[128, 133], ["torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["None"], ["", "def", "_add_skip_proj", "(", "self", ",", "w_in", ",", "w_out", ",", "stride", ")", ":", "\n", "        ", "self", ".", "proj", "=", "nn", ".", "Conv2d", "(", "\n", "w_in", ",", "w_out", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "padding", "=", "0", ",", "bias", "=", "False", "\n", ")", "\n", "self", ".", "bn", "=", "nn", ".", "BatchNorm2d", "(", "w_out", ",", "eps", "=", "regnet_cfg", ".", "BN", ".", "EPS", ",", "momentum", "=", "regnet_cfg", ".", "BN", ".", "MOM", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.regnet.regnet.ResBasicBlock.construct": [[134, 141], ["regnet.BasicTransform", "torch.ReLU", "torch.ReLU", "regnet.ResBasicBlock._add_skip_proj"], "methods", ["home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.regnet.regnet.ResBottleneckBlock._add_skip_proj"], ["", "def", "construct", "(", "self", ",", "w_in", ",", "w_out", ",", "stride", ")", ":", "\n", "# Use skip connection with projection if shape changes", "\n", "        ", "self", ".", "proj_block", "=", "(", "w_in", "!=", "w_out", ")", "or", "(", "stride", "!=", "1", ")", "\n", "if", "self", ".", "proj_block", ":", "\n", "            ", "self", ".", "_add_skip_proj", "(", "w_in", ",", "w_out", ",", "stride", ")", "\n", "", "self", ".", "f", "=", "BasicTransform", "(", "w_in", ",", "w_out", ",", "stride", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "regnet_cfg", ".", "MEM", ".", "RELU_INPLACE", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.regnet.regnet.ResBasicBlock.forward": [[142, 149], ["regnet.ResBasicBlock.relu", "regnet.ResBasicBlock.bn", "regnet.ResBasicBlock.f", "regnet.ResBasicBlock.f", "regnet.ResBasicBlock.proj"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "proj_block", ":", "\n", "            ", "x", "=", "self", ".", "bn", "(", "self", ".", "proj", "(", "x", ")", ")", "+", "self", ".", "f", "(", "x", ")", "\n", "", "else", ":", "\n", "            ", "x", "=", "x", "+", "self", ".", "f", "(", "x", ")", "\n", "", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.regnet.regnet.SE.__init__": [[154, 157], ["torch.Module.__init__", "regnet.SE.construct"], "methods", ["home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.solver.ranger.Ranger.__init__", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.regnet.regnet.AnyNet.construct"], ["def", "__init__", "(", "self", ",", "w_in", ",", "w_se", ")", ":", "\n", "        ", "super", "(", "SE", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "construct", "(", "w_in", ",", "w_se", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.regnet.regnet.SE.construct": [[158, 167], ["torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Sigmoid", "torch.Sigmoid"], "methods", ["None"], ["", "def", "construct", "(", "self", ",", "w_in", ",", "w_se", ")", ":", "\n", "# AvgPool", "\n", "        ", "self", ".", "avg_pool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "1", ",", "1", ")", ")", "\n", "# FC, Activation, FC, Sigmoid", "\n", "self", ".", "f_ex", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "w_in", ",", "w_se", ",", "kernel_size", "=", "1", ",", "bias", "=", "True", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "regnet_cfg", ".", "MEM", ".", "RELU_INPLACE", ")", ",", "\n", "nn", ".", "Conv2d", "(", "w_se", ",", "w_in", ",", "kernel_size", "=", "1", ",", "bias", "=", "True", ")", ",", "\n", "nn", ".", "Sigmoid", "(", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.regnet.regnet.SE.forward": [[169, 171], ["regnet.SE.f_ex", "regnet.SE.avg_pool"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "x", "*", "self", ".", "f_ex", "(", "self", ".", "avg_pool", "(", "x", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.regnet.regnet.BottleneckTransform.__init__": [[176, 179], ["torch.Module.__init__", "regnet.BottleneckTransform.construct"], "methods", ["home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.solver.ranger.Ranger.__init__", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.regnet.regnet.AnyNet.construct"], ["def", "__init__", "(", "self", ",", "w_in", ",", "w_out", ",", "stride", ",", "bm", ",", "gw", ",", "se_r", ")", ":", "\n", "        ", "super", "(", "BottleneckTransform", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "construct", "(", "w_in", ",", "w_out", ",", "stride", ",", "bm", ",", "gw", ",", "se_r", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.regnet.regnet.BottleneckTransform.construct": [[180, 203], ["int", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "round", "int", "regnet.SE", "round"], "methods", ["None"], ["", "def", "construct", "(", "self", ",", "w_in", ",", "w_out", ",", "stride", ",", "bm", ",", "gw", ",", "se_r", ")", ":", "\n", "# Compute the bottleneck width", "\n", "        ", "w_b", "=", "int", "(", "round", "(", "w_out", "*", "bm", ")", ")", "\n", "# Compute the number of groups", "\n", "num_gs", "=", "w_b", "//", "gw", "\n", "# 1x1, BN, ReLU", "\n", "self", ".", "a", "=", "nn", ".", "Conv2d", "(", "w_in", ",", "w_b", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "a_bn", "=", "nn", ".", "BatchNorm2d", "(", "w_b", ",", "eps", "=", "regnet_cfg", ".", "BN", ".", "EPS", ",", "momentum", "=", "regnet_cfg", ".", "BN", ".", "MOM", ")", "\n", "self", ".", "a_relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "regnet_cfg", ".", "MEM", ".", "RELU_INPLACE", ")", "\n", "# 3x3, BN, ReLU", "\n", "self", ".", "b", "=", "nn", ".", "Conv2d", "(", "\n", "w_b", ",", "w_b", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "groups", "=", "num_gs", ",", "bias", "=", "False", "\n", ")", "\n", "self", ".", "b_bn", "=", "nn", ".", "BatchNorm2d", "(", "w_b", ",", "eps", "=", "regnet_cfg", ".", "BN", ".", "EPS", ",", "momentum", "=", "regnet_cfg", ".", "BN", ".", "MOM", ")", "\n", "self", ".", "b_relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "regnet_cfg", ".", "MEM", ".", "RELU_INPLACE", ")", "\n", "# Squeeze-and-Excitation (SE)", "\n", "if", "se_r", ":", "\n", "            ", "w_se", "=", "int", "(", "round", "(", "w_in", "*", "se_r", ")", ")", "\n", "self", ".", "se", "=", "SE", "(", "w_b", ",", "w_se", ")", "\n", "# 1x1, BN", "\n", "", "self", ".", "c", "=", "nn", ".", "Conv2d", "(", "w_b", ",", "w_out", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "c_bn", "=", "nn", ".", "BatchNorm2d", "(", "w_out", ",", "eps", "=", "regnet_cfg", ".", "BN", ".", "EPS", ",", "momentum", "=", "regnet_cfg", ".", "BN", ".", "MOM", ")", "\n", "self", ".", "c_bn", ".", "final_bn", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.regnet.regnet.BottleneckTransform.forward": [[204, 208], ["regnet.BottleneckTransform.children", "layer"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "for", "layer", "in", "self", ".", "children", "(", ")", ":", "\n", "            ", "x", "=", "layer", "(", "x", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.regnet.regnet.ResBottleneckBlock.__init__": [[213, 216], ["torch.Module.__init__", "regnet.ResBottleneckBlock.construct"], "methods", ["home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.solver.ranger.Ranger.__init__", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.regnet.regnet.AnyNet.construct"], ["def", "__init__", "(", "self", ",", "w_in", ",", "w_out", ",", "stride", ",", "bm", "=", "1.0", ",", "gw", "=", "1", ",", "se_r", "=", "None", ")", ":", "\n", "        ", "super", "(", "ResBottleneckBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "construct", "(", "w_in", ",", "w_out", ",", "stride", ",", "bm", ",", "gw", ",", "se_r", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.regnet.regnet.ResBottleneckBlock._add_skip_proj": [[217, 222], ["torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["None"], ["", "def", "_add_skip_proj", "(", "self", ",", "w_in", ",", "w_out", ",", "stride", ")", ":", "\n", "        ", "self", ".", "proj", "=", "nn", ".", "Conv2d", "(", "\n", "w_in", ",", "w_out", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "padding", "=", "0", ",", "bias", "=", "False", "\n", ")", "\n", "self", ".", "bn", "=", "nn", ".", "BatchNorm2d", "(", "w_out", ",", "eps", "=", "regnet_cfg", ".", "BN", ".", "EPS", ",", "momentum", "=", "regnet_cfg", ".", "BN", ".", "MOM", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.regnet.regnet.ResBottleneckBlock.construct": [[223, 230], ["regnet.BottleneckTransform", "torch.ReLU", "torch.ReLU", "regnet.ResBottleneckBlock._add_skip_proj"], "methods", ["home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.regnet.regnet.ResBottleneckBlock._add_skip_proj"], ["", "def", "construct", "(", "self", ",", "w_in", ",", "w_out", ",", "stride", ",", "bm", ",", "gw", ",", "se_r", ")", ":", "\n", "# Use skip connection with projection if shape changes", "\n", "        ", "self", ".", "proj_block", "=", "(", "w_in", "!=", "w_out", ")", "or", "(", "stride", "!=", "1", ")", "\n", "if", "self", ".", "proj_block", ":", "\n", "            ", "self", ".", "_add_skip_proj", "(", "w_in", ",", "w_out", ",", "stride", ")", "\n", "", "self", ".", "f", "=", "BottleneckTransform", "(", "w_in", ",", "w_out", ",", "stride", ",", "bm", ",", "gw", ",", "se_r", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "regnet_cfg", ".", "MEM", ".", "RELU_INPLACE", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.regnet.regnet.ResBottleneckBlock.forward": [[231, 238], ["regnet.ResBottleneckBlock.relu", "regnet.ResBottleneckBlock.bn", "regnet.ResBottleneckBlock.f", "regnet.ResBottleneckBlock.f", "regnet.ResBottleneckBlock.proj"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "proj_block", ":", "\n", "            ", "x", "=", "self", ".", "bn", "(", "self", ".", "proj", "(", "x", ")", ")", "+", "self", ".", "f", "(", "x", ")", "\n", "", "else", ":", "\n", "            ", "x", "=", "x", "+", "self", ".", "f", "(", "x", ")", "\n", "", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.regnet.regnet.ResStemCifar.__init__": [[243, 246], ["torch.Module.__init__", "regnet.ResStemCifar.construct"], "methods", ["home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.solver.ranger.Ranger.__init__", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.regnet.regnet.AnyNet.construct"], ["def", "__init__", "(", "self", ",", "w_in", ",", "w_out", ")", ":", "\n", "        ", "super", "(", "ResStemCifar", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "construct", "(", "w_in", ",", "w_out", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.regnet.regnet.ResStemCifar.construct": [[247, 254], ["torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU"], "methods", ["None"], ["", "def", "construct", "(", "self", ",", "w_in", ",", "w_out", ")", ":", "\n", "# 3x3, BN, ReLU", "\n", "        ", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "\n", "w_in", ",", "w_out", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", "\n", ")", "\n", "self", ".", "bn", "=", "nn", ".", "BatchNorm2d", "(", "w_out", ",", "eps", "=", "regnet_cfg", ".", "BN", ".", "EPS", ",", "momentum", "=", "regnet_cfg", ".", "BN", ".", "MOM", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "regnet_cfg", ".", "MEM", ".", "RELU_INPLACE", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.regnet.regnet.ResStemCifar.forward": [[255, 259], ["regnet.ResStemCifar.children", "layer"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "for", "layer", "in", "self", ".", "children", "(", ")", ":", "\n", "            ", "x", "=", "layer", "(", "x", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.regnet.regnet.ResStemIN.__init__": [[264, 267], ["torch.Module.__init__", "regnet.ResStemIN.construct"], "methods", ["home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.solver.ranger.Ranger.__init__", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.regnet.regnet.AnyNet.construct"], ["def", "__init__", "(", "self", ",", "w_in", ",", "w_out", ")", ":", "\n", "        ", "super", "(", "ResStemIN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "construct", "(", "w_in", ",", "w_out", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.regnet.regnet.ResStemIN.construct": [[268, 276], ["torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d"], "methods", ["None"], ["", "def", "construct", "(", "self", ",", "w_in", ",", "w_out", ")", ":", "\n", "# 7x7, BN, ReLU, maxpool", "\n", "        ", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "\n", "w_in", ",", "w_out", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "bias", "=", "False", "\n", ")", "\n", "self", ".", "bn", "=", "nn", ".", "BatchNorm2d", "(", "w_out", ",", "eps", "=", "regnet_cfg", ".", "BN", ".", "EPS", ",", "momentum", "=", "regnet_cfg", ".", "BN", ".", "MOM", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "regnet_cfg", ".", "MEM", ".", "RELU_INPLACE", ")", "\n", "self", ".", "pool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.regnet.regnet.ResStemIN.forward": [[277, 281], ["regnet.ResStemIN.children", "layer"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "for", "layer", "in", "self", ".", "children", "(", ")", ":", "\n", "            ", "x", "=", "layer", "(", "x", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.regnet.regnet.SimpleStemIN.__init__": [[286, 289], ["torch.Module.__init__", "regnet.SimpleStemIN.construct"], "methods", ["home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.solver.ranger.Ranger.__init__", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.regnet.regnet.AnyNet.construct"], ["def", "__init__", "(", "self", ",", "in_w", ",", "out_w", ")", ":", "\n", "        ", "super", "(", "SimpleStemIN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "construct", "(", "in_w", ",", "out_w", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.regnet.regnet.SimpleStemIN.construct": [[290, 297], ["torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU"], "methods", ["None"], ["", "def", "construct", "(", "self", ",", "in_w", ",", "out_w", ")", ":", "\n", "# 3x3, BN, ReLU", "\n", "        ", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "\n", "in_w", ",", "out_w", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "False", "\n", ")", "\n", "self", ".", "bn", "=", "nn", ".", "BatchNorm2d", "(", "out_w", ",", "eps", "=", "regnet_cfg", ".", "BN", ".", "EPS", ",", "momentum", "=", "regnet_cfg", ".", "BN", ".", "MOM", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "regnet_cfg", ".", "MEM", ".", "RELU_INPLACE", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.regnet.regnet.SimpleStemIN.forward": [[298, 302], ["regnet.SimpleStemIN.children", "layer"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "for", "layer", "in", "self", ".", "children", "(", ")", ":", "\n", "            ", "x", "=", "layer", "(", "x", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.regnet.regnet.AnyStage.__init__": [[307, 310], ["torch.Module.__init__", "regnet.AnyStage.construct"], "methods", ["home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.solver.ranger.Ranger.__init__", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.regnet.regnet.AnyNet.construct"], ["def", "__init__", "(", "self", ",", "w_in", ",", "w_out", ",", "stride", ",", "d", ",", "block_fun", ",", "bm", ",", "gw", ",", "se_r", ")", ":", "\n", "        ", "super", "(", "AnyStage", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "construct", "(", "w_in", ",", "w_out", ",", "stride", ",", "d", ",", "block_fun", ",", "bm", ",", "gw", ",", "se_r", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.regnet.regnet.AnyStage.construct": [[311, 320], ["range", "regnet.AnyStage.add_module", "block_fun"], "methods", ["None"], ["", "def", "construct", "(", "self", ",", "w_in", ",", "w_out", ",", "stride", ",", "d", ",", "block_fun", ",", "bm", ",", "gw", ",", "se_r", ")", ":", "\n", "# Construct the blocks", "\n", "        ", "for", "i", "in", "range", "(", "d", ")", ":", "\n", "# Stride and w_in apply to the first block of the stage", "\n", "            ", "b_stride", "=", "stride", "if", "i", "==", "0", "else", "1", "\n", "b_w_in", "=", "w_in", "if", "i", "==", "0", "else", "w_out", "\n", "# Construct the block", "\n", "self", ".", "add_module", "(", "\n", "\"b{}\"", ".", "format", "(", "i", "+", "1", ")", ",", "block_fun", "(", "b_w_in", ",", "w_out", ",", "b_stride", ",", "bm", ",", "gw", ",", "se_r", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.regnet.regnet.AnyStage.forward": [[322, 326], ["regnet.AnyStage.children", "block"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "for", "block", "in", "self", ".", "children", "(", ")", ":", "\n", "            ", "x", "=", "block", "(", "x", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.regnet.regnet.AnyNet.__init__": [[331, 360], ["torch.Module.__init__", "regnet.AnyNet.apply", "regnet.AnyNet.construct", "regnet.AnyNet.construct"], "methods", ["home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.solver.ranger.Ranger.__init__", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.regnet.regnet.AnyNet.construct", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.regnet.regnet.AnyNet.construct"], ["def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "AnyNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "kwargs", ":", "\n", "            ", "self", ".", "construct", "(", "\n", "stem_type", "=", "kwargs", "[", "\"stem_type\"", "]", ",", "\n", "stem_w", "=", "kwargs", "[", "\"stem_w\"", "]", ",", "\n", "block_type", "=", "kwargs", "[", "\"block_type\"", "]", ",", "\n", "ds", "=", "kwargs", "[", "\"ds\"", "]", ",", "\n", "ws", "=", "kwargs", "[", "\"ws\"", "]", ",", "\n", "ss", "=", "kwargs", "[", "\"ss\"", "]", ",", "\n", "bms", "=", "kwargs", "[", "\"bms\"", "]", ",", "\n", "gws", "=", "kwargs", "[", "\"gws\"", "]", ",", "\n", "se_r", "=", "kwargs", "[", "\"se_r\"", "]", ",", "\n", "nc", "=", "kwargs", "[", "\"nc\"", "]", ",", "\n", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "construct", "(", "\n", "stem_type", "=", "regnet_cfg", ".", "ANYNET", ".", "STEM_TYPE", ",", "\n", "stem_w", "=", "regnet_cfg", ".", "ANYNET", ".", "STEM_W", ",", "\n", "block_type", "=", "regnet_cfg", ".", "ANYNET", ".", "BLOCK_TYPE", ",", "\n", "ds", "=", "regnet_cfg", ".", "ANYNET", ".", "DEPTHS", ",", "\n", "ws", "=", "regnet_cfg", ".", "ANYNET", ".", "WIDTHS", ",", "\n", "ss", "=", "regnet_cfg", ".", "ANYNET", ".", "STRIDES", ",", "\n", "bms", "=", "regnet_cfg", ".", "ANYNET", ".", "BOT_MULS", ",", "\n", "gws", "=", "regnet_cfg", ".", "ANYNET", ".", "GROUP_WS", ",", "\n", "se_r", "=", "regnet_cfg", ".", "ANYNET", ".", "SE_R", "if", "regnet_cfg", ".", "ANYNET", ".", "SE_ON", "else", "None", ",", "\n", "nc", "=", "regnet_cfg", ".", "MODEL", ".", "NUM_CLASSES", ",", "\n", ")", "\n", "", "self", ".", "apply", "(", "init_weights", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.regnet.regnet.AnyNet.construct": [[361, 380], ["list", "regnet.get_stem_fun", "get_stem_fun.", "regnet.get_block_fun", "enumerate", "zip", "regnet.AnyNet.add_module", "regnet.AnyStage"], "methods", ["home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.regnet.regnet.get_stem_fun", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.regnet.regnet.get_block_fun"], ["", "def", "construct", "(", "self", ",", "stem_type", ",", "stem_w", ",", "block_type", ",", "ds", ",", "ws", ",", "ss", ",", "bms", ",", "gws", ",", "se_r", ",", "nc", ")", ":", "\n", "# Generate dummy bot muls and gs for models that do not use them", "\n", "        ", "bms", "=", "bms", "if", "bms", "else", "[", "1.0", "for", "_d", "in", "ds", "]", "\n", "gws", "=", "gws", "if", "gws", "else", "[", "1", "for", "_d", "in", "ds", "]", "\n", "# Group params by stage", "\n", "stage_params", "=", "list", "(", "zip", "(", "ds", ",", "ws", ",", "ss", ",", "bms", ",", "gws", ")", ")", "\n", "# Construct the stem", "\n", "stem_fun", "=", "get_stem_fun", "(", "stem_type", ")", "\n", "self", ".", "stem", "=", "stem_fun", "(", "3", ",", "stem_w", ")", "\n", "# Construct the stages", "\n", "block_fun", "=", "get_block_fun", "(", "block_type", ")", "\n", "prev_w", "=", "stem_w", "\n", "for", "i", ",", "(", "d", ",", "w", ",", "s", ",", "bm", ",", "gw", ")", "in", "enumerate", "(", "stage_params", ")", ":", "\n", "            ", "self", ".", "add_module", "(", "\n", "\"s{}\"", ".", "format", "(", "i", "+", "1", ")", ",", "AnyStage", "(", "prev_w", ",", "w", ",", "s", ",", "d", ",", "block_fun", ",", "bm", ",", "gw", ",", "se_r", ")", "\n", ")", "\n", "prev_w", "=", "w", "\n", "# Construct the head", "\n", "", "self", ".", "in_planes", "=", "prev_w", "\n", "#self.head = AnyHead(w_in=prev_w, nc=nc)", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.regnet.regnet.AnyNet.forward": [[382, 386], ["regnet.AnyNet.children", "module"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "for", "module", "in", "self", ".", "children", "(", ")", ":", "\n", "            ", "x", "=", "module", "(", "x", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.regnet.regnet.RegNet.__init__": [[426, 457], ["regnet.generate_regnet", "regnet.get_stages_from_blocks", "regnet.adjust_ws_gs_comp", "regnet.AnyNet.__init__", "range", "range", "range"], "methods", ["home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.regnet.regnet.generate_regnet", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.regnet.regnet.get_stages_from_blocks", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.regnet.regnet.adjust_ws_gs_comp", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.solver.ranger.Ranger.__init__"], ["def", "__init__", "(", "self", ",", "last_stride", ")", ":", "\n", "# Generate RegNet ws per block", "\n", "        ", "b_ws", ",", "num_s", ",", "_", ",", "_", "=", "generate_regnet", "(", "\n", "regnet_cfg", ".", "REGNET", ".", "WA", ",", "regnet_cfg", ".", "REGNET", ".", "W0", ",", "regnet_cfg", ".", "REGNET", ".", "WM", ",", "regnet_cfg", ".", "REGNET", ".", "DEPTH", "\n", ")", "\n", "# Convert to per stage format", "\n", "ws", ",", "ds", "=", "get_stages_from_blocks", "(", "b_ws", ",", "b_ws", ")", "\n", "# Generate group widths and bot muls", "\n", "gws", "=", "[", "regnet_cfg", ".", "REGNET", ".", "GROUP_W", "for", "_", "in", "range", "(", "num_s", ")", "]", "\n", "bms", "=", "[", "regnet_cfg", ".", "REGNET", ".", "BOT_MUL", "for", "_", "in", "range", "(", "num_s", ")", "]", "\n", "# Adjust the compatibility of ws and gws", "\n", "ws", ",", "gws", "=", "adjust_ws_gs_comp", "(", "ws", ",", "bms", ",", "gws", ")", "\n", "# Use the same stride for each stage", "\n", "ss", "=", "[", "regnet_cfg", ".", "REGNET", ".", "STRIDE", "for", "_", "in", "range", "(", "num_s", ")", "]", "\n", "ss", "[", "-", "1", "]", "=", "last_stride", "\n", "# Use SE for RegNetY", "\n", "se_r", "=", "regnet_cfg", ".", "REGNET", ".", "SE_R", "if", "regnet_cfg", ".", "REGNET", ".", "SE_ON", "else", "None", "\n", "# Construct the model", "\n", "kwargs", "=", "{", "\n", "\"stem_type\"", ":", "regnet_cfg", ".", "REGNET", ".", "STEM_TYPE", ",", "\n", "\"stem_w\"", ":", "regnet_cfg", ".", "REGNET", ".", "STEM_W", ",", "\n", "\"block_type\"", ":", "regnet_cfg", ".", "REGNET", ".", "BLOCK_TYPE", ",", "\n", "\"ss\"", ":", "ss", ",", "\n", "\"ds\"", ":", "ds", ",", "\n", "\"ws\"", ":", "ws", ",", "\n", "\"bms\"", ":", "bms", ",", "\n", "\"gws\"", ":", "gws", ",", "\n", "\"se_r\"", ":", "se_r", ",", "\n", "\"nc\"", ":", "regnet_cfg", ".", "MODEL", ".", "NUM_CLASSES", ",", "\n", "}", "\n", "super", "(", "RegNet", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.regnet.regnet.RegNet.load_param": [[458, 464], ["torch.load", "torch.load", "torch.load", "torch.load", "[].copy_", "regnet.RegNet.state_dict"], "methods", ["home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.solver.swa.SWA.state_dict"], ["", "def", "load_param", "(", "self", ",", "model_path", ")", ":", "\n", "        ", "param_dict", "=", "torch", ".", "load", "(", "model_path", ")", "[", "'model_state'", "]", "\n", "for", "i", "in", "param_dict", ":", "\n", "            ", "if", "'head.fc'", "in", "i", ":", "\n", "                ", "continue", "\n", "", "self", ".", "state_dict", "(", ")", "[", "i", "]", ".", "copy_", "(", "param_dict", "[", "i", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.regnet.regnet.init_weights": [[7, 22], ["isinstance", "m.weight.data.normal_", "isinstance", "m.weight.data.fill_", "m.bias.data.zero_", "isinstance", "math.sqrt", "hasattr", "m.weight.data.normal_", "m.bias.data.zero_"], "function", ["None"], ["def", "init_weights", "(", "m", ")", ":", "\n", "    ", "\"\"\"Performs ResNet-style weight initialization.\"\"\"", "\n", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "# Note that there is no bias due to BN", "\n", "        ", "fan_out", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "mean", "=", "0.0", ",", "std", "=", "math", ".", "sqrt", "(", "2.0", "/", "fan_out", ")", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "        ", "zero_init_gamma", "=", "(", "\n", "hasattr", "(", "m", ",", "\"final_bn\"", ")", "and", "m", ".", "final_bn", "and", "regnet_cfg", ".", "BN", ".", "ZERO_INIT_FINAL_GAMMA", "\n", ")", "\n", "m", ".", "weight", ".", "data", ".", "fill_", "(", "0.0", "if", "zero_init_gamma", "else", "1.0", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "        ", "m", ".", "weight", ".", "data", ".", "normal_", "(", "mean", "=", "0.0", ",", "std", "=", "0.01", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.regnet.regnet.get_stem_fun": [[24, 35], ["stem_funs.keys"], "function", ["None"], ["", "", "def", "get_stem_fun", "(", "stem_type", ")", ":", "\n", "    ", "\"\"\"Retrives the stem function by name.\"\"\"", "\n", "stem_funs", "=", "{", "\n", "\"res_stem_cifar\"", ":", "ResStemCifar", ",", "\n", "\"res_stem_in\"", ":", "ResStemIN", ",", "\n", "\"simple_stem_in\"", ":", "SimpleStemIN", ",", "\n", "}", "\n", "assert", "stem_type", "in", "stem_funs", ".", "keys", "(", ")", ",", "\"Stem type '{}' not supported\"", ".", "format", "(", "\n", "stem_type", "\n", ")", "\n", "return", "stem_funs", "[", "stem_type", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.regnet.regnet.get_block_fun": [[37, 48], ["block_funs.keys"], "function", ["None"], ["", "def", "get_block_fun", "(", "block_type", ")", ":", "\n", "    ", "\"\"\"Retrieves the block function by name.\"\"\"", "\n", "block_funs", "=", "{", "\n", "\"vanilla_block\"", ":", "VanillaBlock", ",", "\n", "\"res_basic_block\"", ":", "ResBasicBlock", ",", "\n", "\"res_bottleneck_block\"", ":", "ResBottleneckBlock", ",", "\n", "}", "\n", "assert", "block_type", "in", "block_funs", ".", "keys", "(", ")", ",", "\"Block type '{}' not supported\"", ".", "format", "(", "\n", "block_type", "\n", ")", "\n", "return", "block_funs", "[", "block_type", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.regnet.regnet.quantize_float": [[388, 391], ["int", "round"], "function", ["None"], ["", "", "def", "quantize_float", "(", "f", ",", "q", ")", ":", "\n", "    ", "\"\"\"Converts a float to closest non-zero int divisible by q.\"\"\"", "\n", "return", "int", "(", "round", "(", "f", "/", "q", ")", "*", "q", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.regnet.regnet.adjust_ws_gs_comp": [[393, 400], ["int", "min", "regnet.quantize_float", "int", "zip", "zip", "zip", "zip"], "function", ["home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.regnet.regnet.quantize_float"], ["", "def", "adjust_ws_gs_comp", "(", "ws", ",", "bms", ",", "gs", ")", ":", "\n", "    ", "\"\"\"Adjusts the compatibility of widths and groups.\"\"\"", "\n", "ws_bot", "=", "[", "int", "(", "w", "*", "b", ")", "for", "w", ",", "b", "in", "zip", "(", "ws", ",", "bms", ")", "]", "\n", "gs", "=", "[", "min", "(", "g", ",", "w_bot", ")", "for", "g", ",", "w_bot", "in", "zip", "(", "gs", ",", "ws_bot", ")", "]", "\n", "ws_bot", "=", "[", "quantize_float", "(", "w_bot", ",", "g", ")", "for", "w_bot", ",", "g", "in", "zip", "(", "ws_bot", ",", "gs", ")", "]", "\n", "ws", "=", "[", "int", "(", "w_bot", "/", "b", ")", "for", "w_bot", ",", "b", "in", "zip", "(", "ws_bot", ",", "bms", ")", "]", "\n", "return", "ws", ",", "gs", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.regnet.regnet.get_stages_from_blocks": [[402, 409], ["zip", "numpy.diff().tolist", "zip", "numpy.diff", "zip", "range", "len"], "function", ["None"], ["", "def", "get_stages_from_blocks", "(", "ws", ",", "rs", ")", ":", "\n", "    ", "\"\"\"Gets ws/ds of network at each stage from per block values.\"\"\"", "\n", "ts_temp", "=", "zip", "(", "ws", "+", "[", "0", "]", ",", "[", "0", "]", "+", "ws", ",", "rs", "+", "[", "0", "]", ",", "[", "0", "]", "+", "rs", ")", "\n", "ts", "=", "[", "w", "!=", "wp", "or", "r", "!=", "rp", "for", "w", ",", "wp", ",", "r", ",", "rp", "in", "ts_temp", "]", "\n", "s_ws", "=", "[", "w", "for", "w", ",", "t", "in", "zip", "(", "ws", ",", "ts", "[", ":", "-", "1", "]", ")", "if", "t", "]", "\n", "s_ds", "=", "np", ".", "diff", "(", "[", "d", "for", "d", ",", "t", "in", "zip", "(", "range", "(", "len", "(", "ts", ")", ")", ",", "ts", ")", "if", "t", "]", ")", ".", "tolist", "(", ")", "\n", "return", "s_ws", ",", "s_ds", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.regnet.regnet.generate_regnet": [[411, 421], ["numpy.round", "numpy.power", "numpy.round", "len", "ws.astype().tolist", "ws_cont.tolist", "numpy.arange", "numpy.log", "numpy.log", "numpy.divide", "numpy.unique", "np.round.max", "ws.astype", "config.regnet_cfg.REGNET.WA", "config.regnet_cfg.REGNET.W0", "config.regnet_cfg.REGNET.WM", "config.regnet_cfg.REGNET.DEPTH"], "function", ["None"], ["", "def", "generate_regnet", "(", "w_a", ",", "w_0", ",", "w_m", ",", "d", ",", "q", "=", "8", ")", ":", "\n", "    ", "\"\"\"Generates per block ws from RegNet parameters.\"\"\"", "\n", "assert", "w_a", ">=", "0", "and", "w_0", ">", "0", "and", "w_m", ">", "1", "and", "w_0", "%", "q", "==", "0", "\n", "ws_cont", "=", "np", ".", "arange", "(", "d", ")", "*", "w_a", "+", "w_0", "\n", "ks", "=", "np", ".", "round", "(", "np", ".", "log", "(", "ws_cont", "/", "w_0", ")", "/", "np", ".", "log", "(", "w_m", ")", ")", "\n", "ws", "=", "w_0", "*", "np", ".", "power", "(", "w_m", ",", "ks", ")", "\n", "ws", "=", "np", ".", "round", "(", "np", ".", "divide", "(", "ws", ",", "q", ")", ")", "*", "q", "\n", "num_stages", ",", "max_stage", "=", "len", "(", "np", ".", "unique", "(", "ws", ")", ")", ",", "ks", ".", "max", "(", ")", "+", "1", "\n", "ws", ",", "ws_cont", "=", "ws", ".", "astype", "(", "int", ")", ".", "tolist", "(", ")", ",", "ws_cont", ".", "tolist", "(", ")", "\n", "return", "ws", ",", "num_stages", ",", "max_stage", ",", "ws_cont", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.regnet.regnet.regnety_800mf": [[466, 469], ["config.regnet_cfg.merge_from_file", "regnet.RegNet"], "function", ["None"], ["", "", "", "def", "regnety_800mf", "(", "last_stride", ",", "**", "kwargs", ")", ":", "\n", "    ", "regnet_cfg", ".", "merge_from_file", "(", "'./lib/modeling/backbones/regnet/RegNetY-800MF_dds_8gpu.yaml'", ")", "\n", "return", "RegNet", "(", "last_stride", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.regnet.regnet.regnety_1600mf": [[471, 474], ["config.regnet_cfg.merge_from_file", "regnet.RegNet"], "function", ["None"], ["", "def", "regnety_1600mf", "(", "last_stride", ",", "**", "kwargs", ")", ":", "\n", "    ", "regnet_cfg", ".", "merge_from_file", "(", "'./lib/modeling/backbones/regnet/RegNetY-1.6GF_dds_8gpu.yaml'", ")", "\n", "return", "RegNet", "(", "last_stride", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.regnet.regnet.regnety_3200mf": [[476, 479], ["config.regnet_cfg.merge_from_file", "regnet.RegNet"], "function", ["None"], ["", "def", "regnety_3200mf", "(", "last_stride", ",", "**", "kwargs", ")", ":", "\n", "    ", "regnet_cfg", ".", "merge_from_file", "(", "'./lib/modeling/backbones/regnet/RegNetY-3.2GF_dds_8gpu.yaml'", ")", "\n", "return", "RegNet", "(", "last_stride", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.layers.metric_learning.SupConLoss.__init__": [[11, 19], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.solver.ranger.Ranger.__init__"], ["def", "__init__", "(", "self", ",", "num_ids", "=", "4", ",", "views", "=", "16", ",", "temperature", "=", "0.07", ",", "contrast_mode", "=", "'all'", ",", "\n", "base_temperature", "=", "0.07", ")", ":", "\n", "        ", "super", "(", "SupConLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "temperature", "=", "temperature", "\n", "self", ".", "contrast_mode", "=", "contrast_mode", "\n", "self", ".", "base_temperature", "=", "base_temperature", "\n", "self", ".", "num_ids", "=", "num_ids", "\n", "self", ".", "views", "=", "views", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.layers.metric_learning.SupConLoss.forward": [[20, 101], ["features.view.view.view", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "mask.float().to.float().to.repeat", "torch.scatter", "torch.scatter", "torch.scatter", "torch.scatter", "torch.scatter", "torch.scatter", "torch.scatter", "torch.scatter", "torch.scatter", "torch.scatter", "torch.scatter", "torch.scatter", "torch.scatter", "torch.scatter", "torch.scatter", "torch.scatter", "loss.view().mean.view().mean.view().mean", "labels.contiguous().view.contiguous().view.view", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "len", "ValueError", "len", "features.view.view.view", "ValueError", "torch.unbind", "torch.unbind", "torch.unbind", "torch.unbind", "torch.unbind", "torch.unbind", "torch.unbind", "torch.unbind", "torch.unbind", "torch.unbind", "torch.unbind", "torch.unbind", "torch.unbind", "torch.unbind", "torch.unbind", "torch.unbind", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "logits_max.detach", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.arange().view().to", "torch.arange().view().to", "torch.arange().view().to", "torch.arange().view().to", "torch.arange().view().to", "torch.arange().view().to", "torch.arange().view().to", "torch.arange().view().to", "torch.arange().view().to", "torch.arange().view().to", "torch.arange().view().to", "torch.arange().view().to", "torch.arange().view().to", "torch.arange().view().to", "torch.arange().view().to", "torch.arange().view().to", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "mask.float().to.float().to.sum", "torch.eye().to", "torch.eye().to", "torch.eye().to", "torch.eye().to", "torch.eye().to", "torch.eye().to", "torch.eye().to", "torch.eye().to", "torch.eye().to", "torch.eye().to", "torch.eye().to", "torch.eye().to", "torch.eye().to", "torch.eye().to", "torch.eye().to", "torch.eye().to", "ValueError", "exp_logits.sum", "loss.view().mean.view().mean.view", "labels.contiguous().view.contiguous().view.contiguous().view", "torch.eq().float().to", "torch.eq().float().to", "torch.eq().float().to", "torch.eq().float().to", "torch.eq().float().to", "torch.eq().float().to", "torch.eq().float().to", "torch.eq().float().to", "torch.eq().float().to", "torch.eq().float().to", "torch.eq().float().to", "torch.eq().float().to", "torch.eq().float().to", "torch.eq().float().to", "torch.eq().float().to", "torch.eq().float().to", "mask.float().to.float().to.float().to", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "ValueError", "labels.contiguous().view.contiguous().view.contiguous", "torch.eq().float", "torch.eq().float", "torch.eq().float", "torch.eq().float", "torch.eq().float", "torch.eq().float", "torch.eq().float", "torch.eq().float", "torch.eq().float", "torch.eq().float", "torch.eq().float", "torch.eq().float", "torch.eq().float", "torch.eq().float", "torch.eq().float", "torch.eq().float", "mask.float().to.float().to.float", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "features", ",", "labels", ",", "mask", "=", "None", ")", ":", "\n", "        ", "\"\"\"Compute loss for model. If both `labels` and `mask` are None,\n        it degenerates to SimCLR unsupervised loss:\n        https://arxiv.org/pdf/2002.05709.pdf\n        Args:\n            features: hidden vector of shape [bsz, n_views, ...].\n            labels: ground truth of shape [bsz].\n            mask: contrastive mask of shape [bsz, bsz], mask_{i,j}=1 if sample j\n                has the same class as sample i. Can be asymmetric.\n        Returns:\n            A loss scalar.\n        \"\"\"", "\n", "# susu", "\n", "features", "=", "features", ".", "view", "(", "self", ".", "num_ids", ",", "self", ".", "views", ",", "-", "1", ")", "\n", "labels", "=", "labels", ".", "view", "(", "self", ".", "num_ids", ",", "self", ".", "views", ")", "[", ":", ",", "0", "]", "\n", "\n", "device", "=", "(", "torch", ".", "device", "(", "'cuda'", ")", "\n", "if", "features", ".", "is_cuda", "\n", "else", "torch", ".", "device", "(", "'cpu'", ")", ")", "\n", "# import ipdb; ipdb.set_trace()", "\n", "if", "len", "(", "features", ".", "shape", ")", "<", "3", ":", "\n", "            ", "raise", "ValueError", "(", "'`features` needs to be [bsz, n_views, ...],'", "\n", "'at least 3 dimensions are required'", ")", "\n", "", "if", "len", "(", "features", ".", "shape", ")", ">", "3", ":", "\n", "            ", "features", "=", "features", ".", "view", "(", "features", ".", "shape", "[", "0", "]", ",", "features", ".", "shape", "[", "1", "]", ",", "-", "1", ")", "\n", "\n", "", "batch_size", "=", "features", ".", "shape", "[", "0", "]", "\n", "if", "labels", "is", "not", "None", "and", "mask", "is", "not", "None", ":", "\n", "            ", "raise", "ValueError", "(", "'Cannot define both `labels` and `mask`'", ")", "\n", "", "elif", "labels", "is", "None", "and", "mask", "is", "None", ":", "\n", "            ", "mask", "=", "torch", ".", "eye", "(", "batch_size", ",", "dtype", "=", "torch", ".", "float32", ")", ".", "to", "(", "device", ")", "\n", "", "elif", "labels", "is", "not", "None", ":", "\n", "            ", "labels", "=", "labels", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "if", "labels", ".", "shape", "[", "0", "]", "!=", "batch_size", ":", "\n", "                ", "raise", "ValueError", "(", "'Num of labels does not match num of features'", ")", "\n", "", "mask", "=", "torch", ".", "eq", "(", "labels", ",", "labels", ".", "T", ")", ".", "float", "(", ")", ".", "to", "(", "device", ")", "\n", "", "else", ":", "\n", "            ", "mask", "=", "mask", ".", "float", "(", ")", ".", "to", "(", "device", ")", "\n", "\n", "", "contrast_count", "=", "features", ".", "shape", "[", "1", "]", "\n", "contrast_feature", "=", "torch", ".", "cat", "(", "torch", ".", "unbind", "(", "features", ",", "dim", "=", "1", ")", ",", "dim", "=", "0", ")", "\n", "if", "self", ".", "contrast_mode", "==", "'one'", ":", "\n", "            ", "anchor_feature", "=", "features", "[", ":", ",", "0", "]", "\n", "anchor_count", "=", "1", "\n", "", "elif", "self", ".", "contrast_mode", "==", "'all'", ":", "\n", "            ", "anchor_feature", "=", "contrast_feature", "\n", "anchor_count", "=", "contrast_count", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'Unknown mode: {}'", ".", "format", "(", "self", ".", "contrast_mode", ")", ")", "\n", "\n", "# compute logits", "\n", "", "anchor_dot_contrast", "=", "torch", ".", "div", "(", "\n", "torch", ".", "matmul", "(", "anchor_feature", ",", "contrast_feature", ".", "T", ")", ",", "\n", "self", ".", "temperature", ")", "\n", "# for numerical stability", "\n", "logits_max", ",", "_", "=", "torch", ".", "max", "(", "anchor_dot_contrast", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "logits", "=", "anchor_dot_contrast", "-", "logits_max", ".", "detach", "(", ")", "\n", "\n", "# tile mask", "\n", "mask", "=", "mask", ".", "repeat", "(", "anchor_count", ",", "contrast_count", ")", "\n", "# mask-out self-contrast cases", "\n", "logits_mask", "=", "torch", ".", "scatter", "(", "\n", "torch", ".", "ones_like", "(", "mask", ")", ",", "\n", "1", ",", "\n", "torch", ".", "arange", "(", "batch_size", "*", "anchor_count", ")", ".", "view", "(", "-", "1", ",", "1", ")", ".", "to", "(", "device", ")", ",", "\n", "0", "\n", ")", "\n", "mask", "=", "mask", "*", "logits_mask", "\n", "\n", "# compute log_prob", "\n", "exp_logits", "=", "torch", ".", "exp", "(", "logits", ")", "*", "logits_mask", "\n", "log_prob", "=", "logits", "-", "torch", ".", "log", "(", "exp_logits", ".", "sum", "(", "1", ",", "keepdim", "=", "True", ")", ")", "\n", "\n", "# compute mean of log-likelihood over positive", "\n", "mean_log_prob_pos", "=", "(", "mask", "*", "log_prob", ")", ".", "sum", "(", "1", ")", "/", "mask", ".", "sum", "(", "1", ")", "\n", "\n", "# loss", "\n", "loss", "=", "-", "(", "self", ".", "temperature", "/", "self", ".", "base_temperature", ")", "*", "mean_log_prob_pos", "\n", "loss", "=", "loss", ".", "view", "(", "anchor_count", ",", "batch_size", ")", ".", "mean", "(", ")", "\n", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.layers.metric_learning.ContrastiveLoss.__init__": [[103, 106], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.solver.ranger.Ranger.__init__"], ["    ", "def", "__init__", "(", "self", ",", "margin", "=", "0.3", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "ContrastiveLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "margin", "=", "margin", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.layers.metric_learning.ContrastiveLoss.forward": [[107, 136], ["inputs.size", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "list", "range", "inputs.t", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "list.append", "sum", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "len", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "targets", ")", ":", "\n", "        ", "n", "=", "inputs", ".", "size", "(", "0", ")", "\n", "# Compute similarity matrix", "\n", "sim_mat", "=", "torch", ".", "matmul", "(", "inputs", ",", "inputs", ".", "t", "(", ")", ")", "\n", "targets", "=", "targets", "\n", "loss", "=", "list", "(", ")", "\n", "c", "=", "0", "\n", "\n", "for", "i", "in", "range", "(", "n", ")", ":", "\n", "            ", "pos_pair_", "=", "torch", ".", "masked_select", "(", "sim_mat", "[", "i", "]", ",", "targets", "==", "targets", "[", "i", "]", ")", "\n", "\n", "#  move itself", "\n", "pos_pair_", "=", "torch", ".", "masked_select", "(", "pos_pair_", ",", "pos_pair_", "<", "1", ")", "\n", "neg_pair_", "=", "torch", ".", "masked_select", "(", "sim_mat", "[", "i", "]", ",", "targets", "!=", "targets", "[", "i", "]", ")", "\n", "\n", "pos_pair_", "=", "torch", ".", "sort", "(", "pos_pair_", ")", "[", "0", "]", "\n", "neg_pair_", "=", "torch", ".", "sort", "(", "neg_pair_", ")", "[", "0", "]", "\n", "\n", "neg_pair", "=", "torch", ".", "masked_select", "(", "neg_pair_", ",", "neg_pair_", ">", "self", ".", "margin", ")", "\n", "\n", "neg_loss", "=", "0", "\n", "\n", "pos_loss", "=", "torch", ".", "sum", "(", "-", "pos_pair_", "+", "1", ")", "\n", "if", "len", "(", "neg_pair", ")", ">", "0", ":", "\n", "                ", "neg_loss", "=", "torch", ".", "sum", "(", "neg_pair", ")", "\n", "", "loss", ".", "append", "(", "pos_loss", "+", "neg_loss", ")", "\n", "\n", "", "loss", "=", "sum", "(", "loss", ")", "/", "n", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.layers.metric_learning.CircleLoss.__init__": [[139, 145], ["torch.Module.__init__", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "metric_learning.CircleLoss.reset_parameters", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.solver.ranger.Ranger.__init__", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.layers.metric_learning.CircleLoss.reset_parameters"], ["    ", "def", "__init__", "(", "self", ",", "in_features", ",", "out_features", ",", "s", "=", "256", ",", "m", "=", "0.25", ")", ":", "\n", "        ", "super", "(", "CircleLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "weight", "=", "Parameter", "(", "torch", ".", "Tensor", "(", "out_features", ",", "in_features", ")", ")", "\n", "self", ".", "_s", "=", "s", "\n", "self", ".", "_m", "=", "m", "\n", "self", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.layers.metric_learning.CircleLoss.reset_parameters": [[146, 148], ["torch.init.kaiming_uniform_", "torch.init.kaiming_uniform_", "torch.init.kaiming_uniform_", "torch.init.kaiming_uniform_", "math.sqrt"], "methods", ["None"], ["", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "nn", ".", "init", ".", "kaiming_uniform_", "(", "self", ".", "weight", ",", "a", "=", "math", ".", "sqrt", "(", "5", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.layers.metric_learning.CircleLoss.__call__": [[149, 166], ["torch.linear", "torch.linear", "torch.linear", "torch.linear", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros.scatter_", "torch.zeros.scatter_", "torch.zeros.scatter_", "torch.zeros.scatter_", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.linear.size", "targets.view().long", "torch.linear.detach", "targets.view", "torch.linear.detach"], "methods", ["home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.layers.triplet_loss.normalize", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.layers.triplet_loss.normalize", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.layers.triplet_loss.normalize", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.layers.triplet_loss.normalize", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.layers.triplet_loss.normalize", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.layers.triplet_loss.normalize", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.layers.triplet_loss.normalize", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.layers.triplet_loss.normalize"], ["", "def", "__call__", "(", "self", ",", "bn_feat", ",", "targets", ")", ":", "\n", "\n", "        ", "sim_mat", "=", "F", ".", "linear", "(", "F", ".", "normalize", "(", "bn_feat", ")", ",", "F", ".", "normalize", "(", "self", ".", "weight", ")", ")", "\n", "alpha_p", "=", "F", ".", "relu", "(", "-", "sim_mat", ".", "detach", "(", ")", "+", "1", "+", "self", ".", "_m", ")", "\n", "alpha_n", "=", "F", ".", "relu", "(", "sim_mat", ".", "detach", "(", ")", "+", "self", ".", "_m", ")", "\n", "delta_p", "=", "1", "-", "self", ".", "_m", "\n", "delta_n", "=", "self", ".", "_m", "\n", "\n", "s_p", "=", "self", ".", "_s", "*", "alpha_p", "*", "(", "sim_mat", "-", "delta_p", ")", "\n", "s_n", "=", "self", ".", "_s", "*", "alpha_n", "*", "(", "sim_mat", "-", "delta_n", ")", "\n", "\n", "one_hot", "=", "torch", ".", "zeros", "(", "sim_mat", ".", "size", "(", ")", ",", "device", "=", "targets", ".", "device", ")", "\n", "one_hot", ".", "scatter_", "(", "1", ",", "targets", ".", "view", "(", "-", "1", ",", "1", ")", ".", "long", "(", ")", ",", "1", ")", "\n", "\n", "pred_class_logits", "=", "one_hot", "*", "s_p", "+", "(", "1.0", "-", "one_hot", ")", "*", "s_n", "\n", "\n", "return", "pred_class_logits", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.layers.metric_learning.Arcface.__init__": [[177, 192], ["torch.Module.__init__", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "math.cos", "math.sin", "math.cos", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "math.sin"], "methods", ["home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.solver.ranger.Ranger.__init__"], ["def", "__init__", "(", "self", ",", "in_features", ",", "out_features", ",", "s", "=", "30.0", ",", "m", "=", "0.30", ",", "easy_margin", "=", "False", ",", "ls_eps", "=", "0.0", ")", ":", "\n", "        ", "super", "(", "Arcface", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_features", "=", "in_features", "\n", "self", ".", "out_features", "=", "out_features", "\n", "self", ".", "s", "=", "s", "\n", "self", ".", "m", "=", "m", "\n", "self", ".", "ls_eps", "=", "ls_eps", "# label smoothing", "\n", "self", ".", "weight", "=", "Parameter", "(", "torch", ".", "FloatTensor", "(", "out_features", ",", "in_features", ")", ")", "\n", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "weight", ")", "\n", "\n", "self", ".", "easy_margin", "=", "easy_margin", "\n", "self", ".", "cos_m", "=", "math", ".", "cos", "(", "m", ")", "\n", "self", ".", "sin_m", "=", "math", ".", "sin", "(", "m", ")", "\n", "self", ".", "th", "=", "math", ".", "cos", "(", "math", ".", "pi", "-", "m", ")", "\n", "self", ".", "mm", "=", "math", ".", "sin", "(", "math", ".", "pi", "-", "m", ")", "*", "m", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.layers.metric_learning.Arcface.forward": [[193, 214], ["torch.linear", "torch.linear", "torch.linear", "torch.linear", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.where.type_as", "torch.where.type_as", "torch.where.type_as", "torch.where.type_as", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros.scatter_", "torch.zeros.scatter_", "torch.zeros.scatter_", "torch.zeros.scatter_", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.linear.size", "label.view().long", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "label.view"], "methods", ["home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.layers.triplet_loss.normalize", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.layers.triplet_loss.normalize", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.layers.triplet_loss.normalize", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.layers.triplet_loss.normalize", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.layers.triplet_loss.normalize", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.layers.triplet_loss.normalize", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.layers.triplet_loss.normalize", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.layers.triplet_loss.normalize"], ["", "def", "forward", "(", "self", ",", "input", ",", "label", ")", ":", "\n", "# --------------------------- cos(theta) & phi(theta) ---------------------------", "\n", "        ", "cosine", "=", "F", ".", "linear", "(", "F", ".", "normalize", "(", "input", ")", ",", "F", ".", "normalize", "(", "self", ".", "weight", ")", ")", "\n", "sine", "=", "torch", ".", "sqrt", "(", "1.0", "-", "torch", ".", "pow", "(", "cosine", ",", "2", ")", ")", "\n", "phi", "=", "cosine", "*", "self", ".", "cos_m", "-", "sine", "*", "self", ".", "sin_m", "\n", "phi", "=", "phi", ".", "type_as", "(", "cosine", ")", "\n", "if", "self", ".", "easy_margin", ":", "\n", "            ", "phi", "=", "torch", ".", "where", "(", "cosine", ">", "0", ",", "phi", ",", "cosine", ")", "\n", "", "else", ":", "\n", "            ", "phi", "=", "torch", ".", "where", "(", "cosine", ">", "self", ".", "th", ",", "phi", ",", "cosine", "-", "self", ".", "mm", ")", "\n", "# --------------------------- convert label to one-hot ---------------------------", "\n", "# one_hot = torch.zeros(cosine.size(), requires_grad=True, device='cuda')", "\n", "", "one_hot", "=", "torch", ".", "zeros", "(", "cosine", ".", "size", "(", ")", ",", "device", "=", "'cuda'", ")", "\n", "one_hot", ".", "scatter_", "(", "1", ",", "label", ".", "view", "(", "-", "1", ",", "1", ")", ".", "long", "(", ")", ",", "1", ")", "\n", "if", "self", ".", "ls_eps", ">", "0", ":", "\n", "            ", "one_hot", "=", "(", "1", "-", "self", ".", "ls_eps", ")", "*", "one_hot", "+", "self", ".", "ls_eps", "/", "self", ".", "out_features", "\n", "# -------------torch.where(out_i = {x_i if condition_i else y_i) -------------", "\n", "", "output", "=", "(", "one_hot", "*", "phi", ")", "+", "(", "(", "1.0", "-", "one_hot", ")", "*", "cosine", ")", "\n", "output", "*=", "self", ".", "s", "\n", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.layers.metric_learning.Cosface.__init__": [[226, 234], ["torch.Module.__init__", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor"], "methods", ["home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.solver.ranger.Ranger.__init__"], ["def", "__init__", "(", "self", ",", "in_features", ",", "out_features", ",", "s", "=", "30.0", ",", "m", "=", "0.30", ")", ":", "\n", "        ", "super", "(", "Cosface", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_features", "=", "in_features", "\n", "self", ".", "out_features", "=", "out_features", "\n", "self", ".", "s", "=", "s", "\n", "self", ".", "m", "=", "m", "\n", "self", ".", "weight", "=", "Parameter", "(", "torch", ".", "FloatTensor", "(", "out_features", ",", "in_features", ")", ")", "\n", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "weight", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.layers.metric_learning.Cosface.forward": [[235, 249], ["torch.linear", "torch.linear", "torch.linear", "torch.linear", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros.scatter_", "torch.zeros.scatter_", "torch.zeros.scatter_", "torch.zeros.scatter_", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.linear.size", "label.view().long", "label.view"], "methods", ["home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.layers.triplet_loss.normalize", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.layers.triplet_loss.normalize", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.layers.triplet_loss.normalize", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.layers.triplet_loss.normalize", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.layers.triplet_loss.normalize", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.layers.triplet_loss.normalize", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.layers.triplet_loss.normalize", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.layers.triplet_loss.normalize"], ["", "def", "forward", "(", "self", ",", "input", ",", "label", ")", ":", "\n", "# --------------------------- cos(theta) & phi(theta) ---------------------------", "\n", "        ", "cosine", "=", "F", ".", "linear", "(", "F", ".", "normalize", "(", "input", ")", ",", "F", ".", "normalize", "(", "self", ".", "weight", ")", ")", "\n", "phi", "=", "cosine", "-", "self", ".", "m", "\n", "# --------------------------- convert label to one-hot ---------------------------", "\n", "one_hot", "=", "torch", ".", "zeros", "(", "cosine", ".", "size", "(", ")", ",", "device", "=", "'cuda'", ")", "\n", "# one_hot = one_hot.cuda() if cosine.is_cuda else one_hot", "\n", "one_hot", ".", "scatter_", "(", "1", ",", "label", ".", "view", "(", "-", "1", ",", "1", ")", ".", "long", "(", ")", ",", "1", ")", "\n", "# -------------torch.where(out_i = {x_i if condition_i else y_i) -------------", "\n", "output", "=", "(", "one_hot", "*", "phi", ")", "+", "(", "(", "1.0", "-", "one_hot", ")", "*", "cosine", ")", "# you can use torch.where if your torch.__version__ is 0.4", "\n", "output", "*=", "self", ".", "s", "\n", "# print(output)", "\n", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.layers.metric_learning.Cosface.__repr__": [[250, 256], ["str", "str", "str", "str"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__class__", ".", "__name__", "+", "'('", "+", "'in_features='", "+", "str", "(", "self", ".", "in_features", ")", "+", "', out_features='", "+", "str", "(", "self", ".", "out_features", ")", "+", "', s='", "+", "str", "(", "self", ".", "s", ")", "+", "', m='", "+", "str", "(", "self", ".", "m", ")", "+", "')'", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.layers.metric_learning.AMSoftmax.__init__": [[259, 267], ["torch.Module.__init__", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.init.xavier_normal_", "torch.init.xavier_normal_", "torch.init.xavier_normal_", "torch.init.xavier_normal_", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn"], "methods", ["home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.solver.ranger.Ranger.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_features", ",", "out_features", ",", "s", "=", "30.0", ",", "m", "=", "0.30", ")", ":", "\n", "        ", "super", "(", "AMSoftmax", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "m", "=", "m", "\n", "self", ".", "s", "=", "s", "\n", "self", ".", "in_feats", "=", "in_features", "\n", "self", ".", "W", "=", "torch", ".", "nn", ".", "Parameter", "(", "torch", ".", "randn", "(", "in_features", ",", "out_features", ")", ",", "requires_grad", "=", "True", ")", "\n", "self", ".", "ce", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "nn", ".", "init", ".", "xavier_normal_", "(", "self", ".", "W", ",", "gain", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.layers.metric_learning.AMSoftmax.forward": [[268, 282], ["torch.norm().clamp", "torch.norm().clamp", "torch.norm().clamp", "torch.norm().clamp", "torch.norm().clamp", "torch.norm().clamp", "torch.norm().clamp", "torch.norm().clamp", "torch.norm().clamp", "torch.norm().clamp", "torch.norm().clamp", "torch.norm().clamp", "torch.norm().clamp", "torch.norm().clamp", "torch.norm().clamp", "torch.norm().clamp", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.norm().clamp", "torch.norm().clamp", "torch.norm().clamp", "torch.norm().clamp", "torch.norm().clamp", "torch.norm().clamp", "torch.norm().clamp", "torch.norm().clamp", "torch.norm().clamp", "torch.norm().clamp", "torch.norm().clamp", "torch.norm().clamp", "torch.norm().clamp", "torch.norm().clamp", "torch.norm().clamp", "torch.norm().clamp", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "lb.view", "torch.zeros().scatter_", "torch.zeros().scatter_", "torch.zeros().scatter_", "torch.zeros().scatter_", "torch.zeros().scatter_", "torch.zeros().scatter_", "torch.zeros().scatter_", "torch.zeros().scatter_", "torch.zeros().scatter_", "torch.zeros().scatter_", "torch.zeros().scatter_", "torch.zeros().scatter_", "torch.zeros().scatter_", "torch.zeros().scatter_", "torch.zeros().scatter_", "torch.zeros().scatter_", "x.size", "lb.size", "x.size", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.mm.size", "torch.mm.size", "torch.mm.size", "torch.mm.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "lb", ")", ":", "\n", "        ", "assert", "x", ".", "size", "(", ")", "[", "0", "]", "==", "lb", ".", "size", "(", ")", "[", "0", "]", "\n", "assert", "x", ".", "size", "(", ")", "[", "1", "]", "==", "self", ".", "in_feats", "\n", "x_norm", "=", "torch", ".", "norm", "(", "x", ",", "p", "=", "2", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", ".", "clamp", "(", "min", "=", "1e-12", ")", "\n", "x_norm", "=", "torch", ".", "div", "(", "x", ",", "x_norm", ")", "\n", "w_norm", "=", "torch", ".", "norm", "(", "self", ".", "W", ",", "p", "=", "2", ",", "dim", "=", "0", ",", "keepdim", "=", "True", ")", ".", "clamp", "(", "min", "=", "1e-12", ")", "\n", "w_norm", "=", "torch", ".", "div", "(", "self", ".", "W", ",", "w_norm", ")", "\n", "costh", "=", "torch", ".", "mm", "(", "x_norm", ",", "w_norm", ")", "\n", "# print(x_norm.shape, w_norm.shape, costh.shape)", "\n", "lb_view", "=", "lb", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "delt_costh", "=", "torch", ".", "zeros", "(", "costh", ".", "size", "(", ")", ",", "device", "=", "'cuda'", ")", ".", "scatter_", "(", "1", ",", "lb_view", ",", "self", ".", "m", ")", "\n", "costh_m", "=", "costh", "-", "delt_costh", "\n", "costh_m_s", "=", "self", ".", "s", "*", "costh_m", "\n", "return", "costh_m_s", "", "", "", ""]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.layers.build.make_loss": [[16, 72], ["triplet_loss.TripletLoss", "triplet_loss.CrossEntropyLabelSmooth", "print", "triplet_loss.CrossEntropyLabelSmooth.", "metric_learning.SupConLoss."], "function", ["None"], ["def", "make_loss", "(", "cfg", ",", "num_classes", ")", ":", "# modified by gu", "\n", "    ", "make_loss", ".", "update_iter_interval", "=", "500", "\n", "make_loss", ".", "id_loss_history", "=", "[", "]", "\n", "make_loss", ".", "metric_loss_history", "=", "[", "]", "\n", "make_loss", ".", "ID_LOSS_WEIGHT", "=", "cfg", ".", "MODEL", ".", "ID_LOSS_WEIGHT", "\n", "make_loss", ".", "TRIPLET_LOSS_WEIGHT", "=", "cfg", ".", "MODEL", ".", "TRIPLET_LOSS_WEIGHT", "\n", "\n", "if", "cfg", ".", "MODEL", ".", "METRIC_LOSS_TYPE", "==", "'triplet'", ":", "\n", "        ", "metric_loss_func", "=", "TripletLoss", "(", "cfg", ".", "SOLVER", ".", "MARGIN", ",", "cfg", ".", "SOLVER", ".", "HARD_EXAMPLE_MINING_METHOD", ")", "# triplet loss", "\n", "", "elif", "cfg", ".", "MODEL", ".", "METRIC_LOSS_TYPE", "==", "'contrastive'", ":", "\n", "        ", "metric_loss_func", "=", "ContrastiveLoss", "(", "cfg", ".", "SOLVER", ".", "MARGIN", ")", "\n", "", "elif", "cfg", ".", "MODEL", ".", "METRIC_LOSS_TYPE", "==", "'supconloss'", ":", "\n", "        ", "metric_loss_func", "=", "SupConLoss", "(", "num_ids", "=", "int", "(", "cfg", ".", "SOLVER", ".", "IMS_PER_BATCH", "/", "cfg", ".", "DATALOADER", ".", "NUM_INSTANCE", ")", ",", "views", "=", "cfg", ".", "DATALOADER", ".", "NUM_INSTANCE", ")", "\n", "", "elif", "cfg", ".", "MODEL", ".", "METRIC_LOSS_TYPE", "==", "'none'", ":", "\n", "        ", "def", "metric_loss_func", "(", "feat", ",", "target", ")", ":", "\n", "            ", "return", "0", "\n", "", "", "else", ":", "\n", "        ", "print", "(", "'got unsupported metric loss type {}'", ".", "format", "(", "\n", "cfg", ".", "MODEL", ".", "METRIC_LOSS_TYPE", ")", ")", "\n", "\n", "", "if", "cfg", ".", "MODEL", ".", "IF_LABELSMOOTH", "==", "'on'", ":", "\n", "        ", "id_loss_func", "=", "CrossEntropyLabelSmooth", "(", "num_classes", "=", "num_classes", ")", "# new add by luo", "\n", "print", "(", "\"label smooth on, numclasses:\"", ",", "num_classes", ")", "\n", "", "else", ":", "\n", "        ", "id_loss_func", "=", "F", ".", "cross_entropy", "\n", "\n", "", "def", "loss_func", "(", "score", ",", "feat", ",", "target", ")", ":", "\n", "        ", "_id_loss", "=", "id_loss_func", "(", "score", ",", "target", ")", "\n", "_metric_loss", "=", "metric_loss_func", "(", "feat", ",", "target", ")", "\n", "make_loss", ".", "id_loss_history", ".", "append", "(", "_id_loss", ".", "item", "(", ")", ")", "\n", "make_loss", ".", "metric_loss_history", ".", "append", "(", "_metric_loss", ".", "item", "(", ")", ")", "\n", "if", "len", "(", "make_loss", ".", "id_loss_history", ")", "==", "0", ":", "\n", "            ", "pass", "\n", "", "elif", "(", "len", "(", "make_loss", ".", "id_loss_history", ")", "%", "make_loss", ".", "update_iter_interval", "==", "0", ")", ":", "\n", "\n", "            ", "_id_history", "=", "np", ".", "array", "(", "make_loss", ".", "id_loss_history", ")", "\n", "id_mean", "=", "_id_history", ".", "mean", "(", ")", "\n", "id_std", "=", "_id_history", ".", "std", "(", ")", "\n", "\n", "_metric_history", "=", "np", ".", "array", "(", "make_loss", ".", "metric_loss_history", ")", "\n", "metric_mean", "=", "_metric_history", ".", "mean", "(", ")", "\n", "metric_std", "=", "_metric_history", ".", "std", "(", ")", "\n", "\n", "id_weighted", "=", "id_std", "\n", "metric_weighted", "=", "metric_std", "\n", "if", "id_weighted", ">", "metric_weighted", ":", "\n", "                ", "new_weight", "=", "1", "-", "(", "id_weighted", "-", "metric_weighted", ")", "/", "id_weighted", "\n", "make_loss", ".", "ID_LOSS_WEIGHT", "=", "make_loss", ".", "ID_LOSS_WEIGHT", "*", "0.9", "+", "new_weight", "*", "0.1", "\n", "\n", "", "make_loss", ".", "id_loss_history", "=", "[", "]", "\n", "make_loss", ".", "metric_loss_history", "=", "[", "]", "\n", "print", "(", "f\"update weighted loss ID_LOSS_WEIGHT={round(make_loss.ID_LOSS_WEIGHT,3)},TRIPLET_LOSS_WEIGHT={make_loss.TRIPLET_LOSS_WEIGHT}\"", ")", "\n", "", "else", ":", "\n", "            ", "pass", "\n", "", "return", "make_loss", ".", "ID_LOSS_WEIGHT", "*", "_id_loss", ",", "make_loss", ".", "TRIPLET_LOSS_WEIGHT", "*", "_metric_loss", "\n", "", "return", "loss_func", "", "", ""]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.layers.pooling.GeM.__init__": [[13, 17], ["torch.Module.__init__", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.solver.ranger.Ranger.__init__"], ["    ", "def", "__init__", "(", "self", ",", "p", "=", "3.0", ",", "eps", "=", "1e-6", ",", "freeze_p", "=", "True", ")", ":", "\n", "        ", "super", "(", "GeM", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "p", "=", "p", "if", "freeze_p", "else", "Parameter", "(", "torch", ".", "ones", "(", "1", ")", "*", "p", ")", "\n", "self", ".", "eps", "=", "eps", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.layers.pooling.GeM.forward": [[18, 21], ["torch.adaptive_avg_pool2d().pow", "torch.adaptive_avg_pool2d().pow", "torch.adaptive_avg_pool2d().pow", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d", "x.clamp().pow", "x.clamp"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "F", ".", "adaptive_avg_pool2d", "(", "x", ".", "clamp", "(", "min", "=", "self", ".", "eps", ")", ".", "pow", "(", "self", ".", "p", ")", ",", "\n", "(", "1", ",", "1", ")", ")", ".", "pow", "(", "1.", "/", "self", ".", "p", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.layers.pooling.GeM.__repr__": [[22, 30], ["isinstance", "pooling.GeM.p.data.tolist", "str"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "if", "isinstance", "(", "self", ".", "p", ",", "float", ")", ":", "\n", "            ", "p", "=", "self", ".", "p", "\n", "", "else", ":", "\n", "            ", "p", "=", "self", ".", "p", ".", "data", ".", "tolist", "(", ")", "[", "0", "]", "\n", "", "return", "self", ".", "__class__", ".", "__name__", "+", "'('", "+", "'p='", "+", "'{:.4f}'", ".", "format", "(", "p", ")", "+", "', '", "+", "'eps='", "+", "str", "(", "self", ".", "eps", ")", "+", "')'", "\n", "", "", ""]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.layers.triplet_loss.TripletLoss.__init__": [[129, 136], ["torch.nn.MarginRankingLoss", "torch.nn.MarginRankingLoss", "torch.nn.SoftMarginLoss", "torch.nn.SoftMarginLoss"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "margin", "=", "None", ",", "mining_method", "=", "'batch_hard'", ")", ":", "\n", "        ", "self", ".", "margin", "=", "margin", "\n", "self", ".", "mining_method", "=", "mining_method", "\n", "if", "margin", ">", "0", ":", "\n", "            ", "self", ".", "ranking_loss", "=", "nn", ".", "MarginRankingLoss", "(", "margin", "=", "margin", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "ranking_loss", "=", "nn", ".", "SoftMarginLoss", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.layers.triplet_loss.TripletLoss.__call__": [[137, 152], ["triplet_loss.euclidean_dist", "triplet_loss.hard_example_mining", "dist_an.new().resize_as_().fill_", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "triplet_loss.TripletLoss.ranking_loss", "triplet_loss.TripletLoss.ranking_loss", "dist_an.new().resize_as_", "dist_an.new"], "methods", ["home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.layers.triplet_loss.euclidean_dist", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.layers.triplet_loss.hard_example_mining", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.layers.triplet_loss.normalize", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.layers.triplet_loss.normalize", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.layers.triplet_loss.normalize", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.layers.triplet_loss.normalize"], ["", "", "def", "__call__", "(", "self", ",", "global_feat", ",", "labels", ",", "normalize_feature", "=", "False", ")", ":", "\n", "        ", "if", "normalize_feature", ":", "\n", "# global_feat = normalize(global_feat, axis=-1)", "\n", "            ", "global_feat", "=", "torch", ".", "nn", ".", "functional", ".", "normalize", "(", "global_feat", ",", "dim", "=", "1", ",", "p", "=", "2", ")", "\n", "", "dist_mat", "=", "euclidean_dist", "(", "global_feat", ",", "global_feat", ")", "\n", "dist_ap", ",", "dist_an", "=", "hard_example_mining", "(", "\n", "dist_mat", ",", "labels", ",", "self", ".", "mining_method", ")", "\n", "\n", "y", "=", "dist_an", ".", "new", "(", ")", ".", "resize_as_", "(", "dist_an", ")", ".", "fill_", "(", "1", ")", "\n", "if", "self", ".", "margin", ">", "0", ":", "\n", "            ", "loss", "=", "self", ".", "ranking_loss", "(", "dist_an", ",", "dist_ap", ",", "y", ")", "\n", "", "else", ":", "\n", "            ", "loss", "=", "self", ".", "ranking_loss", "(", "dist_an", "-", "dist_ap", ",", "y", ")", "\n", "# loss += 0.2*(dist_ap.mean(0)/dist_an.mean(0))", "\n", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.layers.triplet_loss.CenterTripletLoss.__init__": [[155, 161], ["torch.nn.MarginRankingLoss", "torch.nn.MarginRankingLoss", "torch.nn.SoftMarginLoss", "torch.nn.SoftMarginLoss"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "margin", "=", "None", ")", ":", "\n", "        ", "self", ".", "margin", "=", "margin", "\n", "if", "margin", ">", "0", ":", "\n", "            ", "self", ".", "ranking_loss", "=", "nn", ".", "MarginRankingLoss", "(", "margin", "=", "margin", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "ranking_loss", "=", "nn", ".", "SoftMarginLoss", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.layers.triplet_loss.CenterTripletLoss.__call__": [[162, 184], ["feats.size", "labels.expand().eq", "range", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "triplet_loss.euclidean_dist", "torch.eye().bool", "torch.eye().bool", "torch.eye().bool", "torch.eye().bool", "torch.max", "torch.max", "torch.max", "torch.max", "torch.min", "torch.min", "torch.min", "torch.min", "dist_an.new().resize_as_().fill_", "labels.expand().t", "feats[].mean", "torch.stack.append", "torch.stack.append", "dist_mat[].contiguous().view", "dist_mat[].contiguous().view", "triplet_loss.CenterTripletLoss.ranking_loss", "triplet_loss.CenterTripletLoss.ranking_loss", "labels.expand", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "dist_an.new().resize_as_", "labels.expand", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "dist_mat[].contiguous", "dist_mat[].contiguous", "dist_an.new"], "methods", ["home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.layers.triplet_loss.euclidean_dist"], ["", "", "def", "__call__", "(", "self", ",", "feats", ",", "labels", ")", ":", "\n", "        ", "N", "=", "feats", ".", "size", "(", "0", ")", "\n", "is_pos", "=", "labels", ".", "expand", "(", "N", ",", "N", ")", ".", "eq", "(", "labels", ".", "expand", "(", "N", ",", "N", ")", ".", "t", "(", ")", ")", "\n", "avg_feats", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "N", ")", ":", "\n", "            ", "avg_feat", "=", "feats", "[", "is_pos", "[", "i", "]", ",", ":", "]", ".", "mean", "(", "dim", "=", "0", ")", "\n", "avg_feats", ".", "append", "(", "avg_feat", ")", "\n", "", "avg_feats", "=", "torch", ".", "stack", "(", "avg_feats", ",", "dim", "=", "0", ")", "\n", "dist_mat", "=", "euclidean_dist", "(", "feats", ",", "avg_feats", ")", "\n", "is_pos", "=", "torch", ".", "eye", "(", "N", ",", "device", "=", "feats", ".", "device", ")", ".", "bool", "(", ")", "\n", "is_neg", "=", "(", "1", "-", "torch", ".", "eye", "(", "N", ",", "device", "=", "feats", ".", "device", ")", ")", ".", "bool", "(", ")", "\n", "dist_ap", ",", "relative_p_inds", "=", "torch", ".", "max", "(", "\n", "dist_mat", "[", "is_pos", "]", ".", "contiguous", "(", ")", ".", "view", "(", "N", ",", "-", "1", ")", ",", "1", ")", "\n", "dist_an", ",", "relative_n_inds", "=", "torch", ".", "min", "(", "\n", "dist_mat", "[", "is_neg", "]", ".", "contiguous", "(", ")", ".", "view", "(", "N", ",", "-", "1", ")", ",", "1", ")", "\n", "\n", "y", "=", "dist_an", ".", "new", "(", ")", ".", "resize_as_", "(", "dist_an", ")", ".", "fill_", "(", "1", ")", "\n", "if", "self", ".", "margin", ">", "0", ":", "\n", "            ", "loss", "=", "self", ".", "ranking_loss", "(", "dist_an", ",", "dist_ap", ",", "y", ")", "\n", "", "else", ":", "\n", "            ", "loss", "=", "self", ".", "ranking_loss", "(", "dist_an", "-", "dist_ap", ",", "y", ")", "\n", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.layers.triplet_loss.CrossEntropyLabelSmooth.__init__": [[197, 203], ["torch.nn.Module.__init__", "torch.nn.LogSoftmax", "torch.nn.LogSoftmax"], "methods", ["home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.solver.ranger.Ranger.__init__"], ["def", "__init__", "(", "self", ",", "num_classes", ",", "epsilon", "=", "0.1", ",", "use_gpu", "=", "True", ")", ":", "\n", "        ", "super", "(", "CrossEntropyLabelSmooth", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "epsilon", "=", "epsilon", "\n", "self", ".", "use_gpu", "=", "use_gpu", "\n", "self", ".", "logsoftmax", "=", "nn", ".", "LogSoftmax", "(", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.layers.triplet_loss.CrossEntropyLabelSmooth.forward": [[204, 215], ["triplet_loss.CrossEntropyLabelSmooth.logsoftmax", "torch.zeros().scatter_", "torch.zeros().scatter_", "torch.zeros().scatter_", "torch.zeros().scatter_", "torch.zeros().scatter_.unsqueeze", "torch.zeros().scatter_.unsqueeze", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "triplet_loss.CrossEntropyLabelSmooth.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "targets", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            inputs: prediction matrix (before softmax) with shape (batch_size, num_classes)\n            targets: ground truth labels with shape (num_classes)\n        \"\"\"", "\n", "log_probs", "=", "self", ".", "logsoftmax", "(", "inputs", ")", "\n", "targets", "=", "torch", ".", "zeros", "(", "log_probs", ".", "size", "(", ")", ",", "device", "=", "log_probs", ".", "device", ")", ".", "scatter_", "(", "1", ",", "targets", ".", "unsqueeze", "(", "1", ")", ",", "1", ")", "\n", "targets", "=", "(", "1", "-", "self", ".", "epsilon", ")", "*", "targets", "+", "self", ".", "epsilon", "/", "self", ".", "num_classes", "\n", "loss", "=", "(", "-", "targets", "*", "log_probs", ")", ".", "mean", "(", "0", ")", ".", "sum", "(", ")", "\n", "return", "loss", "", "", "", ""]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.layers.triplet_loss.normalize": [[11, 20], ["torch.norm().expand_as", "torch.norm().expand_as", "torch.norm", "torch.norm"], "function", ["None"], ["def", "normalize", "(", "x", ",", "axis", "=", "-", "1", ")", ":", "\n", "    ", "\"\"\"Normalizing to unit length along the specified dimension.\n    Args:\n      x: pytorch Variable\n    Returns:\n      x: pytorch Variable, same shape as input\n    \"\"\"", "\n", "x", "=", "1.", "*", "x", "/", "(", "torch", ".", "norm", "(", "x", ",", "2", ",", "axis", ",", "keepdim", "=", "True", ")", ".", "expand_as", "(", "x", ")", "+", "1e-12", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.layers.triplet_loss.euclidean_dist": [[22, 37], ["torch.pow().sum().expand", "torch.pow().sum().expand", "torch.pow().sum().expand().t", "torch.pow().sum().expand().t", "dist.clamp().sqrt.addmm_", "dist.clamp().sqrt.clamp().sqrt", "x.size", "y.size", "y.t", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum().expand", "torch.pow().sum().expand", "dist.clamp().sqrt.clamp", "torch.pow", "torch.pow", "torch.pow().sum", "torch.pow().sum", "torch.pow", "torch.pow"], "function", ["None"], ["", "def", "euclidean_dist", "(", "x", ",", "y", ")", ":", "\n", "    ", "\"\"\"\n    Args:\n      x: pytorch Variable, with shape [m, d]\n      y: pytorch Variable, with shape [n, d]\n    Returns:\n      dist: pytorch Variable, with shape [m, n]\n    \"\"\"", "\n", "m", ",", "n", "=", "x", ".", "size", "(", "0", ")", ",", "y", ".", "size", "(", "0", ")", "\n", "xx", "=", "torch", ".", "pow", "(", "x", ",", "2", ")", ".", "sum", "(", "1", ",", "keepdim", "=", "True", ")", ".", "expand", "(", "m", ",", "n", ")", "\n", "yy", "=", "torch", ".", "pow", "(", "y", ",", "2", ")", ".", "sum", "(", "1", ",", "keepdim", "=", "True", ")", ".", "expand", "(", "n", ",", "m", ")", ".", "t", "(", ")", "\n", "dist", "=", "xx", "+", "yy", "\n", "dist", ".", "addmm_", "(", "1", ",", "-", "2", ",", "x", ",", "y", ".", "t", "(", ")", ")", "\n", "dist", "=", "dist", ".", "clamp", "(", "min", "=", "1e-12", ")", ".", "sqrt", "(", ")", "# for numerical stability", "\n", "return", "dist", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.layers.triplet_loss.hard_example_mining": [[39, 122], ["dist_mat.size", "labels.expand().eq", "labels.expand().ne", "torch.gather.squeeze", "torch.gather.squeeze", "len", "dist_mat.size", "dist_mat.size", "labels.expand().t", "labels.expand().t", "torch.max", "torch.max", "torch.min", "torch.min", "labels.new().resize_as_().copy_().unsqueeze().expand", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "p_inds.squeeze.squeeze", "n_inds.squeeze.squeeze", "dist_mat.size", "labels.expand", "labels.expand", "dist_mat[].contiguous().view", "dist_mat[].contiguous().view", "dist_mat[].contiguous().view", "torch.multinomial", "torch.multinomial", "torch.gather", "torch.gather", "dist_mat[].contiguous().view", "torch.multinomial", "torch.multinomial", "torch.gather", "torch.gather", "ind[].contiguous().view", "ind[].contiguous().view", "labels.expand", "labels.expand", "torch.softmax", "torch.softmin", "dist_mat[].contiguous().view", "dist_mat[].contiguous().view", "print", "labels.new().resize_as_().copy_().unsqueeze", "dist_mat[].contiguous", "dist_mat[].contiguous", "dist_mat[].contiguous", "dist_mat[].contiguous", "torch.exp", "torch.exp", "torch.exp().sum", "torch.exp().sum", "torch.exp", "torch.exp", "torch.exp().sum", "torch.exp().sum", "ind[].contiguous", "ind[].contiguous", "dist_mat[].contiguous", "dist_mat[].contiguous", "labels.new().resize_as_().copy_", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.arange().long", "torch.arange().long", "labels.new().resize_as_", "torch.arange", "torch.arange", "labels.new"], "function", ["None"], ["", "def", "hard_example_mining", "(", "dist_mat", ",", "labels", ",", "mining_method", "=", "'batch_hard'", ",", "return_inds", "=", "False", ")", ":", "\n", "    ", "\"\"\"For each anchor, find the hardest positive and negative sample.\n    Args:\n      dist_mat: pytorch Variable, pair wise distance between samples, shape [N, N]\n      labels: pytorch LongTensor, with shape [N]\n      return_inds: whether to return the indices. Save time if `False`(?)\n    Returns:\n      dist_ap: pytorch Variable, distance(anchor, positive); shape [N]\n      dist_an: pytorch Variable, distance(anchor, negative); shape [N]\n      p_inds: pytorch LongTensor, with shape [N];\n        indices of selected hard positive samples; 0 <= p_inds[i] <= N - 1\n      n_inds: pytorch LongTensor, with shape [N];\n        indices of selected hard negative samples; 0 <= n_inds[i] <= N - 1\n    NOTE: Only consider the case in which all labels have same num of samples,\n      thus we can cope with all anchors in parallel.\n    \"\"\"", "\n", "\n", "assert", "len", "(", "dist_mat", ".", "size", "(", ")", ")", "==", "2", "\n", "assert", "dist_mat", ".", "size", "(", "0", ")", "==", "dist_mat", ".", "size", "(", "1", ")", "\n", "N", "=", "dist_mat", ".", "size", "(", "0", ")", "\n", "\n", "# shape [N, N]", "\n", "is_pos", "=", "labels", ".", "expand", "(", "N", ",", "N", ")", ".", "eq", "(", "labels", ".", "expand", "(", "N", ",", "N", ")", ".", "t", "(", ")", ")", "\n", "is_neg", "=", "labels", ".", "expand", "(", "N", ",", "N", ")", ".", "ne", "(", "labels", ".", "expand", "(", "N", ",", "N", ")", ".", "t", "(", ")", ")", "\n", "\n", "if", "mining_method", "==", "'batch_hard'", ":", "\n", "# dist_ap, dist_an = [], []", "\n", "# for i in range(N):", "\n", "#     dist_ap.append(dist_mat[i][is_pos[i]].max().unsqueeze(0))", "\n", "#     dist_an.append(dist_mat[i][is_neg[i]].min().unsqueeze(0))", "\n", "# dist_ap = torch.cat(dist_ap).unsqueeze(dim=1)", "\n", "# dist_an = torch.cat(dist_an).unsqueeze(dim=1)", "\n", "\n", "# Batch Hard", "\n", "# `dist_ap` means distance(anchor, positive)", "\n", "# both `dist_ap` and `relative_p_inds` with shape [N, 1]", "\n", "        ", "dist_ap", ",", "relative_p_inds", "=", "torch", ".", "max", "(", "\n", "dist_mat", "[", "is_pos", "]", ".", "contiguous", "(", ")", ".", "view", "(", "N", ",", "-", "1", ")", ",", "1", ",", "keepdim", "=", "True", ")", "\n", "# `dist_an` means distance(anchor, negative)", "\n", "# both `dist_an` and `relative_n_inds` with shape [N, 1]", "\n", "dist_an", ",", "relative_n_inds", "=", "torch", ".", "min", "(", "\n", "dist_mat", "[", "is_neg", "]", ".", "contiguous", "(", ")", ".", "view", "(", "N", ",", "-", "1", ")", ",", "1", ",", "keepdim", "=", "True", ")", "\n", "# shape [N]", "\n", "", "elif", "mining_method", "==", "'batch_sample'", ":", "\n", "        ", "dist_mat_ap", "=", "dist_mat", "[", "is_pos", "]", ".", "contiguous", "(", ")", ".", "view", "(", "N", ",", "-", "1", ")", "\n", "relative_p_inds", "=", "torch", ".", "multinomial", "(", "\n", "F", ".", "softmax", "(", "dist_mat_ap", ",", "dim", "=", "1", ")", ",", "num_samples", "=", "1", ")", "\n", "dist_ap", "=", "torch", ".", "gather", "(", "dist_mat_ap", ",", "1", ",", "relative_p_inds", ")", "\n", "\n", "dist_mat_an", "=", "dist_mat", "[", "is_neg", "]", ".", "contiguous", "(", ")", ".", "view", "(", "N", ",", "-", "1", ")", "\n", "relative_n_inds", "=", "torch", ".", "multinomial", "(", "\n", "F", ".", "softmin", "(", "dist_mat_an", ",", "dim", "=", "1", ")", ",", "num_samples", "=", "1", ")", "\n", "dist_an", "=", "torch", ".", "gather", "(", "dist_mat_an", ",", "1", ",", "relative_n_inds", ")", "\n", "", "elif", "mining_method", "==", "'batch_soft'", ":", "\n", "        ", "dist_mat_ap", "=", "dist_mat", "[", "is_pos", "]", ".", "contiguous", "(", ")", ".", "view", "(", "N", ",", "-", "1", ")", "\n", "dist_mat_an", "=", "dist_mat", "[", "is_neg", "]", ".", "contiguous", "(", ")", ".", "view", "(", "N", ",", "-", "1", ")", "\n", "weight_ap", "=", "torch", ".", "exp", "(", "dist_mat_ap", ")", "/", "torch", ".", "exp", "(", "dist_mat_ap", ")", ".", "sum", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "weight_an", "=", "torch", ".", "exp", "(", "-", "dist_mat_an", ")", "/", "torch", ".", "exp", "(", "-", "dist_mat_an", ")", ".", "sum", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "\n", "dist_ap", "=", "(", "weight_ap", "*", "dist_mat_ap", ")", ".", "sum", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "dist_an", "=", "(", "weight_an", "*", "dist_mat_an", ")", ".", "sum", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "\"error, unsupported mining method {}\"", ".", "format", "(", "mining_method", ")", ")", "\n", "\n", "", "dist_ap", "=", "dist_ap", ".", "squeeze", "(", "1", ")", "\n", "dist_an", "=", "dist_an", ".", "squeeze", "(", "1", ")", "\n", "\n", "if", "return_inds", ":", "\n", "# shape [N, N]", "\n", "        ", "ind", "=", "(", "labels", ".", "new", "(", ")", ".", "resize_as_", "(", "labels", ")", "\n", ".", "copy_", "(", "torch", ".", "arange", "(", "0", ",", "N", ")", ".", "long", "(", ")", ")", "\n", ".", "unsqueeze", "(", "0", ")", ".", "expand", "(", "N", ",", "N", ")", ")", "\n", "# shape [N, 1]", "\n", "p_inds", "=", "torch", ".", "gather", "(", "\n", "ind", "[", "is_pos", "]", ".", "contiguous", "(", ")", ".", "view", "(", "N", ",", "-", "1", ")", ",", "1", ",", "relative_p_inds", ".", "data", ")", "\n", "n_inds", "=", "torch", ".", "gather", "(", "\n", "ind", "[", "is_neg", "]", ".", "contiguous", "(", ")", ".", "view", "(", "N", ",", "-", "1", ")", ",", "1", ",", "relative_n_inds", ".", "data", ")", "\n", "# shape [N]", "\n", "p_inds", "=", "p_inds", ".", "squeeze", "(", "1", ")", "\n", "n_inds", "=", "n_inds", ".", "squeeze", "(", "1", ")", "\n", "return", "dist_ap", ",", "dist_an", ",", "p_inds", ",", "n_inds", "\n", "\n", "", "return", "dist_ap", ",", "dist_an", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.engine.inference.inference": [[12, 46], ["model.to", "logging.getLogger", "logging.getLogger.info", "lib.utils.reid_eval.evaluator", "model.eval", "time.time", "time.time", "logging.getLogger.info", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "lib.utils.reid_eval.evaluator.compute", "logging.getLogger.info", "logging.getLogger.info", "torch.no_grad", "torch.no_grad", "logging.getLogger.info", "data.cuda.cuda", "model", "lib.utils.reid_eval.evaluator.update", "data.cuda.flip", "model"], "function", ["home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.utils.reid_eval.evaluator.compute", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.engine.train_net.AverageMeter.update"], ["def", "inference", "(", "\n", "cfg", ",", "\n", "model", ",", "\n", "val_loader", ",", "\n", "num_query", ",", "\n", "dataset", "\n", ")", ":", "\n", "    ", "device", "=", "cfg", ".", "MODEL", ".", "DEVICE", "\n", "model", ".", "to", "(", "device", ")", "\n", "logger", "=", "logging", ".", "getLogger", "(", "\"reid_baseline.inference\"", ")", "\n", "logger", ".", "info", "(", "\"Enter inferencing\"", ")", "\n", "metric", "=", "evaluator", "(", "num_query", ",", "dataset", ",", "cfg", ",", "max_rank", "=", "50", ")", "\n", "model", ".", "eval", "(", ")", "\n", "start", "=", "time", ".", "time", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "batch", "in", "val_loader", ":", "\n", "            ", "data", ",", "pid", ",", "camid", ",", "img_path", "=", "batch", "\n", "data", "=", "data", ".", "cuda", "(", ")", "\n", "feats", "=", "model", "(", "data", ")", "\n", "if", "cfg", ".", "TEST", ".", "FLIP_TEST", ":", "\n", "                ", "data_flip", "=", "data", ".", "flip", "(", "dims", "=", "[", "3", "]", ")", "# NCHW", "\n", "feats_flip", "=", "model", "(", "data_flip", ")", "\n", "feats", "=", "(", "feats", "+", "feats_flip", ")", "/", "2", "\n", "", "output", "=", "[", "feats", ",", "pid", ",", "camid", ",", "img_path", "]", "\n", "metric", ".", "update", "(", "output", ")", "\n", "", "", "end", "=", "time", ".", "time", "(", ")", "\n", "logger", ".", "info", "(", "\"inference takes {:.3f}s\"", ".", "format", "(", "(", "end", "-", "start", ")", ")", ")", "\n", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "cmc", ",", "mAP", ",", "indices_np", "=", "metric", ".", "compute", "(", ")", "\n", "logger", ".", "info", "(", "'Validation Results'", ")", "\n", "logger", ".", "info", "(", "\"mAP: {:.1%}\"", ".", "format", "(", "mAP", ")", ")", "\n", "for", "r", "in", "[", "1", ",", "5", ",", "10", "]", ":", "\n", "        ", "logger", ".", "info", "(", "\"CMC curve, Rank-{:<3}:{:.1%}\"", ".", "format", "(", "r", ",", "cmc", "[", "r", "-", "1", "]", ")", ")", "\n", "", "return", "indices_np", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.engine.inference.select_topk": [[47, 53], ["range", "results.append"], "function", ["None"], ["", "def", "select_topk", "(", "indices", ",", "query", ",", "gallery", ",", "topk", "=", "10", ")", ":", "\n", "    ", "results", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "indices", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "ids", "=", "indices", "[", "i", "]", "[", ":", "topk", "]", "\n", "results", ".", "append", "(", "[", "query", "[", "i", "]", "[", "0", "]", "]", "+", "[", "gallery", "[", "id", "]", "[", "0", "]", "for", "id", "in", "ids", "]", ")", "\n", "", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.engine.inference.extract_features": [[55, 69], ["model.to", "model.eval", "torch.cat", "torch.cat", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.no_grad", "torch.no_grad", "enumerate", "data.cuda.cuda", "model", "torch.nn.functional.normalize.append"], "function", ["home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.layers.triplet_loss.normalize", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.layers.triplet_loss.normalize"], ["", "def", "extract_features", "(", "cfg", ",", "model", ",", "loader", ")", ":", "\n", "    ", "device", "=", "cfg", ".", "MODEL", ".", "DEVICE", "\n", "model", ".", "to", "(", "device", ")", "\n", "model", ".", "eval", "(", ")", "\n", "feats", "=", "[", "]", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "i", ",", "batch", "in", "enumerate", "(", "loader", ")", ":", "\n", "            ", "data", ",", "pid", ",", "camid", ",", "img_path", "=", "batch", "\n", "data", "=", "data", ".", "cuda", "(", ")", "\n", "feat", "=", "model", "(", "data", ")", "\n", "feats", ".", "append", "(", "feat", ")", "\n", "", "", "feats", "=", "torch", ".", "cat", "(", "feats", ",", "dim", "=", "0", ")", "\n", "feats", "=", "torch", ".", "nn", ".", "functional", ".", "normalize", "(", "feats", ",", "dim", "=", "1", ",", "p", "=", "2", ")", "\n", "return", "feats", "", "", ""]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.engine.train_net.AverageMeter.__init__": [[161, 163], ["train_net.AverageMeter.reset"], "methods", ["home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.engine.train_net.AverageMeter.reset"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.engine.train_net.AverageMeter.reset": [[164, 169], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "val", "=", "0", "\n", "self", ".", "avg", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.engine.train_net.AverageMeter.update": [[170, 175], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "        ", "self", ".", "val", "=", "val", "\n", "self", ".", "sum", "+=", "val", "*", "n", "\n", "self", ".", "count", "+=", "n", "\n", "self", ".", "avg", "=", "self", ".", "sum", "/", "self", ".", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.engine.train_net.do_train": [[32, 89], ["logging.getLogger", "logging.getLogger.info", "range", "logging.getLogger.info", "torch.save", "torch.save", "torch.save", "os.remove", "model.cuda", "logging.getLogger.info", "train_net.train", "scheduler.step", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.save", "torch.save", "torch.save", "model.state_dict", "os.path.join", "os.path.join", "logging.getLogger", "amp.initialize", "train_net.validate", "os.path.join", "logging.getLogger.info", "train_net.frozen_feature_layers", "torch.save", "torch.save", "torch.save", "model.state_dict", "optimizer.state_dict", "scheduler.get_lr", "logging.getLogger.info", "train_net.open_all_layers", "model.state_dict", "os.path.join"], "function", ["home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.tools.train.train", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.solver.ranger.Ranger.step", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.solver.swa.SWA.state_dict", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.engine.train_net.validate", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.engine.train_net.frozen_feature_layers", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.solver.swa.SWA.state_dict", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.solver.swa.SWA.state_dict", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.solver.lr_scheduler.CyclicCosineLR.get_lr", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.engine.train_net.open_all_layers", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.solver.swa.SWA.state_dict"], ["", "def", "do_train", "(", "\n", "cfg", ",", "\n", "model", ",", "\n", "dataset", ",", "\n", "train_loader", ",", "\n", "val_loader", ",", "\n", "optimizer", ",", "\n", "scheduler", ",", "\n", "loss_fn", ",", "\n", "num_query", ",", "\n", "start_epoch", "\n", ")", ":", "\n", "    ", "output_dir", "=", "cfg", ".", "OUTPUT_DIR", "\n", "device", "=", "cfg", ".", "MODEL", ".", "DEVICE", "\n", "\n", "if", "device", ":", "\n", "#model.to(device)", "\n", "        ", "model", ".", "cuda", "(", ")", "\n", "# Apex FP16 training", "\n", "if", "cfg", ".", "SOLVER", ".", "FP16", ":", "\n", "            ", "logging", ".", "getLogger", "(", "\"Using Mix Precision training\"", ")", "\n", "model", ",", "optimizer", "=", "amp", ".", "initialize", "(", "model", ",", "optimizer", ",", "opt_level", "=", "'O1'", ")", "\n", "\n", "", "", "logger", "=", "logging", ".", "getLogger", "(", "\"reid_baseline.train\"", ")", "\n", "logger", ".", "info", "(", "\"Start training\"", ")", "\n", "\n", "best_mAP", "=", "0", "\n", "\n", "for", "epoch", "in", "range", "(", "start_epoch", "+", "1", ",", "cfg", ".", "SOLVER", ".", "MAX_EPOCHS", "+", "1", ")", ":", "\n", "        ", "logger", ".", "info", "(", "\"Epoch[{}] lr={:.2e}\"", "\n", ".", "format", "(", "epoch", ",", "scheduler", ".", "get_lr", "(", ")", "[", "0", "]", ")", ")", "\n", "\n", "# freeze feature layer at warmup stage", "\n", "if", "cfg", ".", "SOLVER", ".", "FREEZE_BASE_EPOCHS", "!=", "0", ":", "\n", "            ", "if", "epoch", "<", "cfg", ".", "SOLVER", ".", "FREEZE_BASE_EPOCHS", ":", "\n", "                ", "logger", ".", "info", "(", "\"freeze base layers\"", ")", "\n", "frozen_feature_layers", "(", "model", ")", "\n", "", "elif", "epoch", "==", "cfg", ".", "SOLVER", ".", "FREEZE_BASE_EPOCHS", ":", "\n", "                ", "logger", ".", "info", "(", "\"open all layers\"", ")", "\n", "open_all_layers", "(", "model", ")", "\n", "", "", "train", "(", "model", ",", "dataset", ",", "train_loader", ",", "optimizer", ",", "loss_fn", ",", "epoch", ",", "cfg", ",", "logger", ")", "\n", "\n", "if", "epoch", "%", "cfg", ".", "SOLVER", ".", "EVAL_PERIOD", "==", "0", "or", "epoch", "==", "cfg", ".", "SOLVER", ".", "MAX_EPOCHS", ":", "\n", "            ", "mAP", ",", "cmc", "=", "validate", "(", "model", ",", "dataset", ",", "val_loader", ",", "num_query", ",", "epoch", ",", "cfg", ",", "logger", ")", "\n", "ap_rank_1", "=", "cmc", "[", "0", "]", "\n", "if", "mAP", ">=", "best_mAP", ":", "\n", "                ", "best_mAP", "=", "mAP", "\n", "torch", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "os", ".", "path", ".", "join", "(", "output_dir", ",", "'best.pth'", ")", ")", "\n", "\n", "", "", "scheduler", ".", "step", "(", ")", "\n", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "# release cache", "\n", "torch", ".", "save", "(", "{", "'state_dict'", ":", "model", ".", "state_dict", "(", ")", ",", "'epoch'", ":", "epoch", ",", "'optimizer'", ":", "optimizer", ".", "state_dict", "(", ")", "}", ",", "\n", "os", ".", "path", ".", "join", "(", "output_dir", ",", "'resume.pth.tar'", ")", ")", "\n", "\n", "", "logger", ".", "info", "(", "\"best mAP: {:.1%}\"", ".", "format", "(", "best_mAP", ")", ")", "\n", "torch", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "os", ".", "path", ".", "join", "(", "output_dir", ",", "'final.pth'", ")", ")", "\n", "os", ".", "remove", "(", "os", ".", "path", ".", "join", "(", "output_dir", ",", "'resume.pth.tar'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.engine.train_net.train": [[91, 138], ["train_net.AverageMeter", "train_net.AverageMeter", "train_net.AverageMeter", "time.time", "model.train", "time.time", "time.time", "logger.info", "train_net.AverageMeter.update", "input.cuda.cuda", "target.cuda.cuda", "time.time", "optimizer.zero_grad", "model", "loss_fn", "optimizer.step", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "train_net.AverageMeter.update", "train_net.AverageMeter.update", "time.time", "loss.backward", "to_python_float", "input.cuda.size", "logger.info", "WRITER.add_scalar", "WRITER.add_scalar", "WRITER.add_scalar", "time.time", "amp.scale_loss", "scaled_loss.backward", "time.time", "id_loss.item", "metric_loss.item", "len", "id_loss.item", "metric_loss.item"], "function", ["home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.tools.train.train", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.engine.train_net.AverageMeter.update", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.solver.ranger.Ranger.step", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.engine.train_net.AverageMeter.update", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.engine.train_net.AverageMeter.update"], ["", "def", "train", "(", "model", ",", "dataset", ",", "train_loader", ",", "optimizer", ",", "loss_fn", ",", "epoch", ",", "cfg", ",", "logger", ")", ":", "\n", "    ", "losses", "=", "AverageMeter", "(", ")", "\n", "data_time", "=", "AverageMeter", "(", ")", "\n", "model_time", "=", "AverageMeter", "(", ")", "\n", "\n", "start", "=", "time", ".", "time", "(", ")", "\n", "model", ".", "train", "(", ")", "\n", "ITER", "=", "0", "\n", "log_period", "=", "cfg", ".", "SOLVER", ".", "LOG_PERIOD", "\n", "data_start", "=", "time", ".", "time", "(", ")", "\n", "# import ipdb; ipdb.set_trace()", "\n", "for", "batch", "in", "train_loader", ":", "\n", "        ", "data_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "data_start", ")", "\n", "input", ",", "target", ",", "_", ",", "_", ",", "_", "=", "batch", "\n", "input", "=", "input", ".", "cuda", "(", ")", "\n", "target", "=", "target", ".", "cuda", "(", ")", "\n", "model_start", "=", "time", ".", "time", "(", ")", "\n", "ITER", "+=", "1", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "score", ",", "feat", "=", "model", "(", "input", ",", "target", ")", "\n", "id_loss", ",", "metric_loss", "=", "loss_fn", "(", "score", ",", "feat", ",", "target", ")", "\n", "loss", "=", "id_loss", "+", "metric_loss", "\n", "if", "cfg", ".", "SOLVER", ".", "FP16", ":", "\n", "            ", "with", "amp", ".", "scale_loss", "(", "loss", ",", "optimizer", ")", "as", "scaled_loss", ":", "\n", "                ", "scaled_loss", ".", "backward", "(", ")", "\n", "", "", "else", ":", "\n", "            ", "loss", ".", "backward", "(", ")", "\n", "", "optimizer", ".", "step", "(", ")", "\n", "\n", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "\n", "model_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "model_start", ")", "\n", "losses", ".", "update", "(", "to_python_float", "(", "loss", ".", "data", ")", ",", "input", ".", "size", "(", "0", ")", ")", "\n", "\n", "if", "ITER", "%", "log_period", "==", "0", ":", "\n", "            ", "logger", ".", "info", "(", "\"Epoch[{}] Iteration[{}/{}] id_loss: {:.3f}, metric_loss: {:.5f}, total_loss: {:.3f}, data time: {:.3f}s, model time: {:.3f}s\"", "\n", ".", "format", "(", "epoch", ",", "ITER", ",", "len", "(", "train_loader", ")", ",", "\n", "id_loss", ".", "item", "(", ")", ",", "metric_loss", ".", "item", "(", ")", ",", "losses", ".", "val", ",", "data_time", ".", "val", ",", "model_time", ".", "val", ")", ")", "\n", "global", "ITER_LOG", "\n", "WRITER", ".", "add_scalar", "(", "f'Loss_Train_id_loss'", ",", "id_loss", ".", "item", "(", ")", ",", "ITER_LOG", ")", "\n", "WRITER", ".", "add_scalar", "(", "f'Loss_Train_metric_loss'", ",", "metric_loss", ".", "item", "(", ")", ",", "ITER_LOG", ")", "\n", "WRITER", ".", "add_scalar", "(", "f'Loss_Train_totals'", ",", "losses", ".", "val", ",", "ITER_LOG", ")", "\n", "ITER_LOG", "+=", "1", "\n", "", "data_start", "=", "time", ".", "time", "(", ")", "\n", "", "end", "=", "time", ".", "time", "(", ")", "\n", "logger", ".", "info", "(", "\"epoch takes {:.3f}s\"", ".", "format", "(", "(", "end", "-", "start", ")", ")", ")", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.engine.train_net.validate": [[140, 157], ["lib.utils.reid_eval.evaluator", "model.eval", "lib.utils.reid_eval.evaluator.compute", "logger.info", "logger.info", "torch.no_grad", "torch.no_grad", "torch.no_grad", "logger.info", "data.cuda.cuda", "model", "lib.utils.reid_eval.evaluator.update"], "function", ["home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.utils.reid_eval.evaluator.compute", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.engine.train_net.AverageMeter.update"], ["", "def", "validate", "(", "model", ",", "dataset", ",", "val_loader", ",", "num_query", ",", "epoch", ",", "cfg", ",", "logger", ")", ":", "\n", "    ", "metric", "=", "evaluator", "(", "num_query", ",", "dataset", ",", "cfg", ",", "max_rank", "=", "50", ")", "\n", "# import ipdb; ipdb.set_trace()", "\n", "model", ".", "eval", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "batch", "in", "val_loader", ":", "\n", "            ", "data", ",", "pid", ",", "camid", ",", "img_path", "=", "batch", "\n", "data", "=", "data", ".", "cuda", "(", ")", "\n", "feats", "=", "model", "(", "data", ")", "\n", "output", "=", "[", "feats", ",", "pid", ",", "camid", ",", "img_path", "]", "\n", "metric", ".", "update", "(", "output", ")", "\n", "", "", "cmc", ",", "mAP", ",", "_", "=", "metric", ".", "compute", "(", ")", "\n", "logger", ".", "info", "(", "\"Validation Results - Epoch: {}\"", ".", "format", "(", "epoch", ")", ")", "\n", "logger", ".", "info", "(", "\"mAP: {:.1%}\"", ".", "format", "(", "mAP", ")", ")", "\n", "for", "r", "in", "[", "1", ",", "5", ",", "10", "]", ":", "\n", "        ", "logger", ".", "info", "(", "\"CMC curve, Rank-{:<3}:{:.1%}\"", ".", "format", "(", "r", ",", "cmc", "[", "r", "-", "1", "]", ")", ")", "\n", "", "return", "mAP", ",", "cmc", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.engine.train_net.frozen_feature_layers": [[177, 191], ["model.named_children", "module.eval", "module.parameters"], "function", ["None"], ["", "", "def", "frozen_feature_layers", "(", "model", ")", ":", "\n", "    ", "for", "name", ",", "module", "in", "model", ".", "named_children", "(", ")", ":", "\n", "# if 'classifier' in name:", "\n", "#     module.train()", "\n", "#     for p in module.parameters():", "\n", "#         p.requires_grad = True", "\n", "# else:", "\n", "#     module.eval()", "\n", "#     for p in module.parameters():", "\n", "#         p.requires_grad = False", "\n", "        ", "if", "'base'", "in", "name", ":", "\n", "            ", "module", ".", "eval", "(", ")", "\n", "for", "p", "in", "module", ".", "parameters", "(", ")", ":", "\n", "                ", "p", ".", "requires_grad", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.engine.train_net.open_all_layers": [[193, 198], ["model.named_children", "module.train", "module.parameters"], "function", ["home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.tools.train.train"], ["", "", "", "", "def", "open_all_layers", "(", "model", ")", ":", "\n", "    ", "for", "name", ",", "module", "in", "model", ".", "named_children", "(", ")", ":", "\n", "        ", "module", ".", "train", "(", ")", "\n", "for", "p", "in", "module", ".", "parameters", "(", ")", ":", "\n", "            ", "p", ".", "requires_grad", "=", "True", "", "", "", "", ""]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.data.build.make_data_loader": [[15, 95], ["transforms.build_transforms", "transforms.build_transforms", "datasets.BaseImageDataset", "print", "isinstance", "isinstance", "datasets.BaseImageDataset.print_dataset_statistics", "datasets.BaseImageDataset.get_imagedata_info", "datasets.ImageDataset", "datasets.ImageDataset", "torch.utils.data.DataLoader", "datasets.init_dataset", "enumerate", "datasets.BaseImageDataset.relabel", "Cybercoreess", "datasets.init_dataset", "enumerate", "torch.utils.data.DataLoader", "len", "datasets.init_dataset", "datasets.BaseImageDataset.get_id_range", "datasets.BaseImageDataset.train.extend", "datasets.init_dataset", "datasets.BaseImageDataset.query.extend", "datasets.BaseImageDataset.gallery.extend", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "datasets.apply_id_bias", "datasets.BaseImageDataset.get_id_range", "datasets.BaseImageDataset.relabel", "datasets.BaseImageDataset.train.extend", "datasets.apply_id_bias", "datasets.apply_id_bias", "datasets.apply_id_bias", "samplers.MPerClassSampler", "samplers.RandomIdentitySampler"], "function", ["home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.transforms.build.build_transforms", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.transforms.build.build_transforms", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.datasets.bases.BaseVideoDataset.print_dataset_statistics", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.datasets.bases.BaseDataset.get_imagedata_info", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.datasets.__init__.init_dataset", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.datasets.bases.BaseImageDataset.relabel", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.datasets.__init__.init_dataset", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.datasets.__init__.init_dataset", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.datasets.bases.BaseImageDataset.get_id_range", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.datasets.__init__.init_dataset", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.datasets.bases.apply_id_bias", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.datasets.bases.BaseImageDataset.get_id_range", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.datasets.bases.BaseImageDataset.relabel", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.datasets.bases.apply_id_bias", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.datasets.bases.apply_id_bias", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.datasets.bases.apply_id_bias"], ["\n", "def", "make_loss", "(", "cfg", ",", "num_classes", ")", ":", "# modified by gu", "\n", "    ", "make_loss", ".", "update_iter_interval", "=", "500", "\n", "make_loss", ".", "id_loss_history", "=", "[", "]", "\n", "make_loss", ".", "metric_loss_history", "=", "[", "]", "\n", "make_loss", ".", "ID_LOSS_WEIGHT", "=", "cfg", ".", "MODEL", ".", "ID_LOSS_WEIGHT", "\n", "make_loss", ".", "TRIPLET_LOSS_WEIGHT", "=", "cfg", ".", "MODEL", ".", "TRIPLET_LOSS_WEIGHT", "\n", "\n", "if", "cfg", ".", "MODEL", ".", "METRIC_LOSS_TYPE", "==", "'triplet'", ":", "\n", "        ", "metric_loss_func", "=", "TripletLoss", "(", "cfg", ".", "SOLVER", ".", "MARGIN", ",", "cfg", ".", "SOLVER", ".", "HARD_EXAMPLE_MINING_METHOD", ")", "# triplet loss", "\n", "", "elif", "cfg", ".", "MODEL", ".", "METRIC_LOSS_TYPE", "==", "'contrastive'", ":", "\n", "        ", "metric_loss_func", "=", "ContrastiveLoss", "(", "cfg", ".", "SOLVER", ".", "MARGIN", ")", "\n", "", "elif", "cfg", ".", "MODEL", ".", "METRIC_LOSS_TYPE", "==", "'supconloss'", ":", "\n", "        ", "metric_loss_func", "=", "SupConLoss", "(", "num_ids", "=", "int", "(", "cfg", ".", "SOLVER", ".", "IMS_PER_BATCH", "/", "cfg", ".", "DATALOADER", ".", "NUM_INSTANCE", ")", ",", "views", "=", "cfg", ".", "DATALOADER", ".", "NUM_INSTANCE", ")", "\n", "", "elif", "cfg", ".", "MODEL", ".", "METRIC_LOSS_TYPE", "==", "'none'", ":", "\n", "        ", "def", "metric_loss_func", "(", "feat", ",", "target", ")", ":", "\n", "            ", "return", "0", "\n", "", "", "else", ":", "\n", "        ", "print", "(", "'got unsupported metric loss type {}'", ".", "format", "(", "\n", "cfg", ".", "MODEL", ".", "METRIC_LOSS_TYPE", ")", ")", "\n", "\n", "", "if", "cfg", ".", "MODEL", ".", "IF_LABELSMOOTH", "==", "'on'", ":", "\n", "        ", "id_loss_func", "=", "CrossEntropyLabelSmooth", "(", "num_classes", "=", "num_classes", ")", "# new add by luo", "\n", "print", "(", "\"label smooth on, numclasses:\"", ",", "num_classes", ")", "\n", "", "else", ":", "\n", "        ", "id_loss_func", "=", "F", ".", "cross_entropy", "\n", "\n", "", "def", "loss_func", "(", "score", ",", "feat", ",", "target", ")", ":", "\n", "        ", "_id_loss", "=", "id_loss_func", "(", "score", ",", "target", ")", "\n", "_metric_loss", "=", "metric_loss_func", "(", "feat", ",", "target", ")", "\n", "make_loss", ".", "id_loss_history", ".", "append", "(", "_id_loss", ".", "item", "(", ")", ")", "\n", "make_loss", ".", "metric_loss_history", ".", "append", "(", "_metric_loss", ".", "item", "(", ")", ")", "\n", "if", "len", "(", "make_loss", ".", "id_loss_history", ")", "==", "0", ":", "\n", "            ", "pass", "\n", "", "elif", "(", "len", "(", "make_loss", ".", "id_loss_history", ")", "%", "make_loss", ".", "update_iter_interval", "==", "0", ")", ":", "\n", "\n", "            ", "_id_history", "=", "np", ".", "array", "(", "make_loss", ".", "id_loss_history", ")", "\n", "id_mean", "=", "_id_history", ".", "mean", "(", ")", "\n", "id_std", "=", "_id_history", ".", "std", "(", ")", "\n", "\n", "_metric_history", "=", "np", ".", "array", "(", "make_loss", ".", "metric_loss_history", ")", "\n", "metric_mean", "=", "_metric_history", ".", "mean", "(", ")", "\n", "metric_std", "=", "_metric_history", ".", "std", "(", ")", "\n", "\n", "id_weighted", "=", "id_std", "\n", "metric_weighted", "=", "metric_std", "\n", "if", "id_weighted", ">", "metric_weighted", ":", "\n", "                ", "new_weight", "=", "1", "-", "(", "id_weighted", "-", "metric_weighted", ")", "/", "id_weighted", "\n", "make_loss", ".", "ID_LOSS_WEIGHT", "=", "make_loss", ".", "ID_LOSS_WEIGHT", "*", "0.9", "+", "new_weight", "*", "0.1", "\n", "\n", "", "make_loss", ".", "id_loss_history", "=", "[", "]", "\n", "make_loss", ".", "metric_loss_history", "=", "[", "]", "\n", "print", "(", "f\"update weighted loss ID_LOSS_WEIGHT={round(make_loss.ID_LOSS_WEIGHT,3)},TRIPLET_LOSS_WEIGHT={make_loss.TRIPLET_LOSS_WEIGHT}\"", ")", "\n", "", "else", ":", "\n", "            ", "pass", "\n", "", "return", "make_loss", ".", "ID_LOSS_WEIGHT", "*", "_id_loss", ",", "make_loss", ".", "TRIPLET_LOSS_WEIGHT", "*", "_metric_loss", "\n", "", "return", "loss_func", "", "", ""]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.data.collate_batch.train_collate_fn": [[10, 14], ["zip", "torch.tensor", "torch.stack"], "function", ["None"], ["def", "train_collate_fn", "(", "batch", ")", ":", "\n", "    ", "imgs", ",", "pids", ",", "camids", ",", "domain", ",", "img_paths", "=", "zip", "(", "*", "batch", ")", "\n", "pids", "=", "torch", ".", "tensor", "(", "pids", ",", "dtype", "=", "torch", ".", "int64", ")", "\n", "return", "torch", ".", "stack", "(", "imgs", ",", "dim", "=", "0", ")", ",", "pids", ",", "camids", ",", "domain", ",", "img_paths", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.data.collate_batch.val_collate_fn": [[16, 19], ["zip", "torch.stack"], "function", ["None"], ["", "def", "val_collate_fn", "(", "batch", ")", ":", "\n", "    ", "imgs", ",", "pids", ",", "camids", ",", "domain", ",", "img_paths", "=", "zip", "(", "*", "batch", ")", "\n", "return", "torch", ".", "stack", "(", "imgs", ",", "dim", "=", "0", ")", ",", "pids", ",", "camids", ",", "img_paths", "\n", "", ""]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.datasets.aicity20.AICity20.__init__": [[26, 66], ["bases.BaseImageDataset.__init__", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "aicity20.AICity20._check_before_run", "aicity20.AICity20._process_dir", "aicity20.AICity20._process_dir", "aicity20.AICity20._process_dir", "aicity20.AICity20.relabel", "aicity20.AICity20._read_tracks", "aicity20.AICity20._read_tracks", "aicity20.AICity20.get_imagedata_info", "aicity20.AICity20.get_imagedata_info", "aicity20.AICity20.get_imagedata_info", "print", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.solver.ranger.Ranger.__init__", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.datasets.aicity20_ReCam.AICity20ReCam._check_before_run", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.datasets.aicity20_ReType.AICity20ReType._process_dir", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.datasets.aicity20_ReType.AICity20ReType._process_dir", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.datasets.aicity20_ReType.AICity20ReType._process_dir", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.datasets.bases.BaseImageDataset.relabel", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.datasets.bases.BaseImageDataset._read_tracks", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.datasets.bases.BaseImageDataset._read_tracks", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.datasets.bases.BaseDataset.get_imagedata_info", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.datasets.bases.BaseDataset.get_imagedata_info", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.datasets.bases.BaseDataset.get_imagedata_info"], ["def", "__init__", "(", "self", ",", "root", "=", "''", ",", "verbose", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "AICity20", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# import ipdb; ipdb.set_trace()", "\n", "self", ".", "dataset_dir", "=", "osp", ".", "join", "(", "root", ",", "self", ".", "dataset_dir", ")", "\n", "# self.dataset_aug_dir = osp.join(root, self.dataset_aug_dir)", "\n", "\n", "self", ".", "train_dir", "=", "osp", ".", "join", "(", "self", ".", "dataset_dir", ",", "'image_train'", ")", "\n", "self", ".", "query_dir", "=", "osp", ".", "join", "(", "self", ".", "dataset_dir", ",", "'image_query'", ")", "\n", "self", ".", "gallery_dir", "=", "osp", ".", "join", "(", "self", ".", "dataset_dir", ",", "'image_test'", ")", "\n", "# self.train_aug_dir = osp.join(self.dataset_aug_dir, 'image_train')", "\n", "\n", "self", ".", "list_train_path", "=", "osp", ".", "join", "(", "self", ".", "dataset_dir", ",", "'name_train.txt'", ")", "\n", "self", ".", "list_query_path", "=", "osp", ".", "join", "(", "self", ".", "dataset_dir", ",", "'name_query.txt'", ")", "\n", "self", ".", "list_gallery_path", "=", "osp", ".", "join", "(", "self", ".", "dataset_dir", ",", "'name_test.txt'", ")", "\n", "\n", "self", ".", "train_label_path", "=", "osp", ".", "join", "(", "self", ".", "dataset_dir", ",", "'train_label.xml'", ")", "\n", "\n", "\n", "self", ".", "_check_before_run", "(", ")", "\n", "\n", "train", "=", "self", ".", "_process_dir", "(", "self", ".", "train_dir", ",", "self", ".", "list_train_path", ",", "self", ".", "train_label_path", ",", "relabel", "=", "False", ")", "\n", "query", "=", "self", ".", "_process_dir", "(", "self", ".", "query_dir", ",", "self", ".", "list_query_path", ",", "None", ")", "\n", "gallery", "=", "self", ".", "_process_dir", "(", "self", ".", "gallery_dir", ",", "self", ".", "list_gallery_path", ",", "None", ")", "\n", "# import ipdb; ipdb.set_trace()", "\n", "# train += self._process_dir(self.train_aug_dir, self.list_train_path, self.train_label_path, relabel=False)", "\n", "train", "=", "self", ".", "relabel", "(", "train", ")", "\n", "if", "verbose", ":", "\n", "            ", "print", "(", "\"=> AI CITY 2021 data loaded\"", ")", "\n", "#self.print_dataset_statistics(train, query, gallery)", "\n", "\n", "", "self", ".", "train", "=", "train", "\n", "self", ".", "query", "=", "query", "\n", "self", ".", "gallery", "=", "gallery", "\n", "\n", "self", ".", "train_tracks", "=", "self", ".", "_read_tracks", "(", "os", ".", "path", ".", "join", "(", "self", ".", "dataset_dir", ",", "'train_track.txt'", ")", ")", "\n", "self", ".", "test_tracks", "=", "self", ".", "_read_tracks", "(", "os", ".", "path", ".", "join", "(", "self", ".", "dataset_dir", ",", "'test_track.txt'", ")", ")", "\n", "\n", "self", ".", "num_train_pids", ",", "self", ".", "num_train_imgs", ",", "self", ".", "num_train_cams", "=", "self", ".", "get_imagedata_info", "(", "self", ".", "train", ")", "\n", "self", ".", "num_query_pids", ",", "self", ".", "num_query_imgs", ",", "self", ".", "num_query_cams", "=", "self", ".", "get_imagedata_info", "(", "self", ".", "query", ")", "\n", "self", ".", "num_gallery_pids", ",", "self", ".", "num_gallery_imgs", ",", "self", ".", "num_gallery_cams", "=", "self", ".", "get_imagedata_info", "(", "self", ".", "gallery", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.datasets.aicity20.AICity20._check_before_run": [[68, 74], ["os.exists", "os.exists", "RuntimeError", "os.exists", "os.exists", "RuntimeError"], "methods", ["None"], ["", "def", "_check_before_run", "(", "self", ")", ":", "\n", "        ", "\"\"\"Check if all files are available before going deeper\"\"\"", "\n", "if", "not", "osp", ".", "exists", "(", "self", ".", "dataset_dir", ")", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"'{}' is not available\"", ".", "format", "(", "self", ".", "dataset_dir", ")", ")", "\n", "", "if", "not", "osp", ".", "exists", "(", "self", ".", "train_dir", ")", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"'{}' is not available\"", ".", "format", "(", "self", ".", "train_dir", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.datasets.aicity20.AICity20._process_dir": [[75, 98], ["xml.parse", "xml.parse.find", "os.join", "os.join", "int", "int", "aicity20.AICity20.append", "aicity20.AICity20.relabel", "open", "f.readlines", "xml.XMLParser", "line.strip.strip.strip", "os.join", "os.join", "aicity20.AICity20.append"], "methods", ["home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.datasets.bases.BaseImageDataset.relabel"], ["", "", "def", "_process_dir", "(", "self", ",", "img_dir", ",", "list_path", ",", "label_path", ",", "relabel", "=", "False", ",", "domain", "=", "'real'", ")", ":", "\n", "        ", "dataset", "=", "[", "]", "\n", "if", "label_path", ":", "\n", "            ", "tree", "=", "ET", ".", "parse", "(", "label_path", ",", "parser", "=", "ET", ".", "XMLParser", "(", "encoding", "=", "'utf-8'", ")", ")", "\n", "objs", "=", "tree", ".", "find", "(", "'Items'", ")", "\n", "for", "obj", "in", "objs", ":", "\n", "                ", "image_name", "=", "obj", ".", "attrib", "[", "'imageName'", "]", "\n", "img_path", "=", "osp", ".", "join", "(", "img_dir", ",", "image_name", ")", "\n", "pid", "=", "int", "(", "obj", ".", "attrib", "[", "'vehicleID'", "]", ")", "\n", "camid", "=", "int", "(", "obj", ".", "attrib", "[", "'cameraID'", "]", "[", "1", ":", "]", ")", "\n", "dataset", ".", "append", "(", "(", "img_path", ",", "pid", ",", "camid", ",", "domain", ")", ")", "\n", "#dataset.append((img_path, camid, pid))", "\n", "", "if", "relabel", ":", "dataset", "=", "self", ".", "relabel", "(", "dataset", ")", "\n", "", "else", ":", "\n", "            ", "with", "open", "(", "list_path", ",", "'r'", ")", "as", "f", ":", "\n", "                ", "lines", "=", "f", ".", "readlines", "(", ")", "\n", "for", "line", "in", "lines", ":", "\n", "                    ", "line", "=", "line", ".", "strip", "(", ")", "\n", "img_path", "=", "osp", ".", "join", "(", "img_dir", ",", "line", ")", "\n", "pid", "=", "0", "\n", "camid", "=", "0", "\n", "dataset", ".", "append", "(", "(", "img_path", ",", "pid", ",", "camid", ",", "domain", ")", ")", "\n", "", "", "", "return", "dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.datasets.cuhk03.CUHK03.__init__": [[34, 64], ["bases.BaseImageDataset.__init__", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "cuhk03.CUHK03._check_before_run", "os.join", "os.join", "cuhk03.CUHK03.process_dir", "cuhk03.CUHK03.get_imagedata_info", "cuhk03.CUHK03.get_imagedata_info", "cuhk03.CUHK03.get_imagedata_info", "print"], "methods", ["home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.solver.ranger.Ranger.__init__", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.datasets.aicity20_ReCam.AICity20ReCam._check_before_run", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.datasets.cuhk03.CUHK03.process_dir", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.datasets.bases.BaseDataset.get_imagedata_info", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.datasets.bases.BaseDataset.get_imagedata_info", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.datasets.bases.BaseDataset.get_imagedata_info"], ["def", "__init__", "(", "self", ",", "root", "=", "''", ",", "cuhk03_labeled", "=", "False", ",", "verbose", "=", "True", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "CUHK03", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dataset_dir", "=", "osp", ".", "join", "(", "root", ",", "self", ".", "dataset_dir", ")", "\n", "\n", "self", ".", "imgs_detected_dir", "=", "osp", ".", "join", "(", "self", ".", "dataset_dir", ",", "'images_detected'", ")", "\n", "self", ".", "imgs_labeled_dir", "=", "osp", ".", "join", "(", "self", ".", "dataset_dir", ",", "'images_labeled'", ")", "\n", "self", ".", "_check_before_run", "(", ")", "\n", "\n", "if", "cuhk03_labeled", ":", "\n", "            ", "image_type", "=", "'cuhk03_labeled'", "\n", "", "else", ":", "\n", "            ", "image_type", "=", "'cuhk03_detected'", "\n", "", "self", ".", "dataset_dir", "=", "osp", ".", "join", "(", "self", ".", "dataset_dir", ",", "image_type", ")", "\n", "\n", "train", "=", "self", ".", "process_dir", "(", "self", ".", "dataset_dir", ",", "relabel", "=", "True", ")", "\n", "query", "=", "[", "]", "\n", "gallery", "=", "[", "]", "\n", "\n", "if", "verbose", ":", "\n", "            ", "print", "(", "\"=> CUHK03 ({}) loaded\"", ".", "format", "(", "image_type", ")", ")", "\n", "# self.print_dataset_statistics(train, query, gallery)", "\n", "\n", "", "self", ".", "train", "=", "train", "\n", "self", ".", "query", "=", "query", "\n", "self", ".", "gallery", "=", "gallery", "\n", "\n", "self", ".", "num_train_pids", ",", "self", ".", "num_train_imgs", ",", "self", ".", "num_train_cams", "=", "self", ".", "get_imagedata_info", "(", "self", ".", "train", ")", "\n", "self", ".", "num_query_pids", ",", "self", ".", "num_query_imgs", ",", "self", ".", "num_query_cams", "=", "self", ".", "get_imagedata_info", "(", "self", ".", "query", ")", "\n", "self", ".", "num_gallery_pids", ",", "self", ".", "num_gallery_imgs", ",", "self", ".", "num_gallery_cams", "=", "self", ".", "get_imagedata_info", "(", "self", ".", "gallery", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.datasets.cuhk03.CUHK03._check_before_run": [[65, 69], ["os.exists", "os.exists", "RuntimeError"], "methods", ["None"], ["", "def", "_check_before_run", "(", "self", ")", ":", "\n", "        ", "\"\"\"Check if all files are available before going deeper\"\"\"", "\n", "if", "not", "osp", ".", "exists", "(", "self", ".", "dataset_dir", ")", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"'{}' is not available\"", ".", "format", "(", "self", ".", "dataset_dir", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.datasets.cuhk03.CUHK03.process_dir": [[70, 91], ["glob.glob", "set", "os.join", "os.join", "os.path.basename", "os.path.basename", "os.path.basename", "os.path.basename", "os.path.basename.split", "os.path.basename.split", "set.add", "os.path.basename", "os.path.basename", "os.path.basename", "os.path.basename", "os.path.basename.split", "os.path.basename.split", "dataset.append", "int", "int", "int", "enumerate", "int", "int", "int"], "methods", ["None"], ["", "", "def", "process_dir", "(", "self", ",", "dir_path", ",", "relabel", "=", "True", ")", ":", "\n", "        ", "img_paths", "=", "glob", ".", "glob", "(", "osp", ".", "join", "(", "dir_path", ",", "'*.png'", ")", ")", "\n", "pid_container", "=", "set", "(", ")", "\n", "for", "img_path", "in", "img_paths", ":", "\n", "            ", "img_name", "=", "os", ".", "path", ".", "basename", "(", "img_path", ")", "\n", "video", ",", "pid", ",", "camid", ",", "_", "=", "img_name", ".", "split", "(", "'_'", ")", "\n", "video", ",", "pid", ",", "camid", "=", "int", "(", "video", ")", ",", "int", "(", "pid", ")", ",", "int", "(", "camid", ")", "\n", "pid", "=", "(", "video", "-", "1", ")", "*", "1000", "+", "pid", "\n", "pid_container", ".", "add", "(", "pid", ")", "\n", "", "pid2label", "=", "{", "pid", ":", "label", "for", "label", ",", "pid", "in", "enumerate", "(", "pid_container", ")", "}", "\n", "\n", "dataset", "=", "[", "]", "\n", "for", "img_path", "in", "img_paths", ":", "\n", "            ", "img_name", "=", "os", ".", "path", ".", "basename", "(", "img_path", ")", "\n", "video", ",", "pid", ",", "camid", ",", "_", "=", "img_name", ".", "split", "(", "'_'", ")", "\n", "video", ",", "pid", ",", "camid", "=", "int", "(", "video", ")", ",", "int", "(", "pid", ")", ",", "int", "(", "camid", ")", "\n", "pid", "=", "(", "video", "-", "1", ")", "*", "1000", "+", "pid", "\n", "if", "relabel", ":", "pid", "=", "pid2label", "[", "pid", "]", "\n", "dataset", ".", "append", "(", "(", "img_path", ",", "pid", ",", "camid", ")", ")", "\n", "\n", "", "return", "dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.datasets.aicity20_ReColor.AICity20ReColor.__init__": [[21, 51], ["aicity20.AICity20.__init__", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "aicity20_ReColor.AICity20ReColor._check_before_run", "aicity20_ReColor.AICity20ReColor._process_dir", "aicity20_ReColor.AICity20ReColor.get_imagedata_info", "aicity20_ReColor.AICity20ReColor.get_imagedata_info", "aicity20_ReColor.AICity20ReColor.get_imagedata_info", "print"], "methods", ["home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.solver.ranger.Ranger.__init__", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.datasets.aicity20_ReCam.AICity20ReCam._check_before_run", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.datasets.aicity20_ReType.AICity20ReType._process_dir", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.datasets.bases.BaseDataset.get_imagedata_info", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.datasets.bases.BaseDataset.get_imagedata_info", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.datasets.bases.BaseDataset.get_imagedata_info"], ["def", "__init__", "(", "self", ",", "root", "=", "''", ",", "verbose", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "AICity20", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dataset_dir", "=", "osp", ".", "join", "(", "root", ",", "self", ".", "dataset_dir", ")", "\n", "\n", "self", ".", "train_dir", "=", "osp", ".", "join", "(", "self", ".", "dataset_dir", ",", "'image_train'", ")", "\n", "self", ".", "list_train_path", "=", "osp", ".", "join", "(", "self", ".", "dataset_dir", ",", "'name_train.txt'", ")", "\n", "self", ".", "train_label_path", "=", "osp", ".", "join", "(", "self", ".", "dataset_dir", ",", "'train_label.xml'", ")", "\n", "self", ".", "_check_before_run", "(", ")", "\n", "\n", "train", "=", "self", ".", "_process_dir", "(", "self", ".", "train_dir", ",", "self", ".", "list_train_path", ",", "self", ".", "train_label_path", ",", "relabel", "=", "False", ")", "\n", "\n", "train_num", "=", "180000", "\n", "#train_num = 100000", "\n", "#train_num = 50000", "\n", "query_num", "=", "500", "\n", "gallery_num", "=", "5000", "\n", "query", "=", "train", "[", "train_num", ":", "train_num", "+", "query_num", "]", "\n", "gallery", "=", "train", "[", "train_num", "+", "query_num", ":", "train_num", "+", "query_num", "+", "gallery_num", "]", "\n", "train", "=", "train", "[", ":", "train_num", "]", "\n", "\n", "if", "verbose", ":", "\n", "            ", "print", "(", "\"=> AI CITY 2020 sim data loaded\"", ")", "\n", "\n", "", "self", ".", "train", "=", "train", "\n", "self", ".", "query", "=", "query", "\n", "self", ".", "gallery", "=", "gallery", "\n", "\n", "self", ".", "num_train_pids", ",", "self", ".", "num_train_imgs", ",", "self", ".", "num_train_cams", "=", "self", ".", "get_imagedata_info", "(", "self", ".", "train", ")", "\n", "self", ".", "num_query_pids", ",", "self", ".", "num_query_imgs", ",", "self", ".", "num_query_cams", "=", "self", ".", "get_imagedata_info", "(", "self", ".", "query", ")", "\n", "self", ".", "num_gallery_pids", ",", "self", ".", "num_gallery_imgs", ",", "self", ".", "num_gallery_cams", "=", "self", ".", "get_imagedata_info", "(", "self", ".", "gallery", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.datasets.aicity20_ReColor.AICity20ReColor._process_dir": [[52, 74], ["xml.parse", "xml.parse.find", "os.join", "os.join", "int", "int", "aicity20_ReColor.AICity20ReColor.append", "aicity20_ReColor.AICity20ReColor.relabel", "open", "f.readlines", "xml.XMLParser", "line.strip.strip.strip", "os.join", "os.join", "aicity20_ReColor.AICity20ReColor.append"], "methods", ["home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.datasets.bases.BaseImageDataset.relabel"], ["", "def", "_process_dir", "(", "self", ",", "img_dir", ",", "list_path", ",", "label_path", ",", "relabel", "=", "False", ")", ":", "\n", "        ", "dataset", "=", "[", "]", "\n", "if", "label_path", ":", "\n", "            ", "tree", "=", "ET", ".", "parse", "(", "label_path", ",", "parser", "=", "ET", ".", "XMLParser", "(", "encoding", "=", "'utf-8'", ")", ")", "\n", "objs", "=", "tree", ".", "find", "(", "'Items'", ")", "\n", "for", "obj", "in", "objs", ":", "\n", "                ", "image_name", "=", "obj", ".", "attrib", "[", "'imageName'", "]", "\n", "img_path", "=", "osp", ".", "join", "(", "img_dir", ",", "image_name", ")", "\n", "pid", "=", "int", "(", "obj", ".", "attrib", "[", "'colorID'", "]", ")", "\n", "camid", "=", "int", "(", "obj", ".", "attrib", "[", "'cameraID'", "]", "[", "1", ":", "]", ")", "\n", "dataset", ".", "append", "(", "(", "img_path", ",", "pid", ",", "camid", ")", ")", "\n", "", "if", "relabel", ":", "dataset", "=", "self", ".", "relabel", "(", "dataset", ")", "\n", "", "else", ":", "\n", "            ", "with", "open", "(", "list_path", ",", "'r'", ")", "as", "f", ":", "\n", "                ", "lines", "=", "f", ".", "readlines", "(", ")", "\n", "for", "line", "in", "lines", ":", "\n", "                    ", "line", "=", "line", ".", "strip", "(", ")", "\n", "img_path", "=", "osp", ".", "join", "(", "img_dir", ",", "line", ")", "\n", "pid", "=", "0", "\n", "camid", "=", "0", "\n", "dataset", ".", "append", "(", "(", "img_path", ",", "pid", ",", "camid", ")", ")", "\n", "", "", "", "return", "dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.datasets.dukemtmcreid.DukeMTMCreID.__init__": [[32, 58], ["bases.BaseImageDataset.__init__", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "dukemtmcreid.DukeMTMCreID._download_data", "dukemtmcreid.DukeMTMCreID._check_before_run", "dukemtmcreid.DukeMTMCreID._process_dir", "dukemtmcreid.DukeMTMCreID._process_dir", "dukemtmcreid.DukeMTMCreID._process_dir", "dukemtmcreid.DukeMTMCreID.get_imagedata_info", "dukemtmcreid.DukeMTMCreID.get_imagedata_info", "dukemtmcreid.DukeMTMCreID.get_imagedata_info", "print"], "methods", ["home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.solver.ranger.Ranger.__init__", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.datasets.dukemtmcreid.DukeMTMCreID._download_data", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.datasets.aicity20_ReCam.AICity20ReCam._check_before_run", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.datasets.aicity20_ReType.AICity20ReType._process_dir", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.datasets.aicity20_ReType.AICity20ReType._process_dir", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.datasets.aicity20_ReType.AICity20ReType._process_dir", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.datasets.bases.BaseDataset.get_imagedata_info", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.datasets.bases.BaseDataset.get_imagedata_info", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.datasets.bases.BaseDataset.get_imagedata_info"], ["def", "__init__", "(", "self", ",", "root", "=", "''", ",", "verbose", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "DukeMTMCreID", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dataset_dir", "=", "osp", ".", "join", "(", "root", ",", "self", ".", "dataset_dir", ")", "\n", "self", ".", "dataset_url", "=", "'http://vision.cs.duke.edu/DukeMTMC/data/misc/DukeMTMC-reID.zip'", "\n", "self", ".", "train_dir", "=", "osp", ".", "join", "(", "self", ".", "dataset_dir", ",", "'bounding_box_train'", ")", "\n", "self", ".", "query_dir", "=", "osp", ".", "join", "(", "self", ".", "dataset_dir", ",", "'query'", ")", "\n", "self", ".", "gallery_dir", "=", "osp", ".", "join", "(", "self", ".", "dataset_dir", ",", "'bounding_box_test'", ")", "\n", "\n", "self", ".", "_download_data", "(", ")", "\n", "self", ".", "_check_before_run", "(", ")", "\n", "\n", "train", "=", "self", ".", "_process_dir", "(", "self", ".", "train_dir", ",", "relabel", "=", "True", ")", "\n", "query", "=", "self", ".", "_process_dir", "(", "self", ".", "query_dir", ",", "relabel", "=", "False", ")", "\n", "gallery", "=", "self", ".", "_process_dir", "(", "self", ".", "gallery_dir", ",", "relabel", "=", "False", ")", "\n", "\n", "if", "verbose", ":", "\n", "            ", "print", "(", "\"=> DukeMTMC-reID loaded\"", ")", "\n", "#self.print_dataset_statistics(train, query, gallery)", "\n", "\n", "", "self", ".", "train", "=", "train", "\n", "self", ".", "query", "=", "query", "\n", "self", ".", "gallery", "=", "gallery", "\n", "\n", "self", ".", "num_train_pids", ",", "self", ".", "num_train_imgs", ",", "self", ".", "num_train_cams", "=", "self", ".", "get_imagedata_info", "(", "self", ".", "train", ")", "\n", "self", ".", "num_query_pids", ",", "self", ".", "num_query_imgs", ",", "self", ".", "num_query_cams", "=", "self", ".", "get_imagedata_info", "(", "self", ".", "query", ")", "\n", "self", ".", "num_gallery_pids", ",", "self", ".", "num_gallery_imgs", ",", "self", ".", "num_gallery_cams", "=", "self", ".", "get_imagedata_info", "(", "self", ".", "gallery", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.datasets.dukemtmcreid.DukeMTMCreID._download_data": [[59, 75], ["os.exists", "os.exists", "print", "os.mkdir", "os.mkdir", "os.mkdir", "os.mkdir", "os.join", "os.join", "print", "urllib.request.urlretrieve", "print", "zipfile.ZipFile", "zipfile.ZipFile.extractall", "zipfile.ZipFile.close", "print", "os.basename", "os.basename"], "methods", ["None"], ["", "def", "_download_data", "(", "self", ")", ":", "\n", "        ", "if", "osp", ".", "exists", "(", "self", ".", "dataset_dir", ")", ":", "\n", "            ", "print", "(", "\"This dataset has been downloaded.\"", ")", "\n", "return", "\n", "\n", "", "print", "(", "\"Creating directory {}\"", ".", "format", "(", "self", ".", "dataset_dir", ")", ")", "\n", "os", ".", "mkdir", "(", "self", ".", "dataset_dir", ")", "\n", "fpath", "=", "osp", ".", "join", "(", "self", ".", "dataset_dir", ",", "osp", ".", "basename", "(", "self", ".", "dataset_url", ")", ")", "\n", "\n", "print", "(", "\"Downloading DukeMTMC-reID dataset\"", ")", "\n", "urllib", ".", "request", ".", "urlretrieve", "(", "self", ".", "dataset_url", ",", "fpath", ")", "\n", "\n", "print", "(", "\"Extracting files\"", ")", "\n", "zip_ref", "=", "zipfile", ".", "ZipFile", "(", "fpath", ",", "'r'", ")", "\n", "zip_ref", ".", "extractall", "(", "self", ".", "dataset_dir", ")", "\n", "zip_ref", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.datasets.dukemtmcreid.DukeMTMCreID._check_before_run": [[76, 86], ["os.exists", "os.exists", "RuntimeError", "os.exists", "os.exists", "RuntimeError", "os.exists", "os.exists", "RuntimeError", "os.exists", "os.exists", "RuntimeError"], "methods", ["None"], ["", "def", "_check_before_run", "(", "self", ")", ":", "\n", "        ", "\"\"\"Check if all files are available before going deeper\"\"\"", "\n", "if", "not", "osp", ".", "exists", "(", "self", ".", "dataset_dir", ")", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"'{}' is not available\"", ".", "format", "(", "self", ".", "dataset_dir", ")", ")", "\n", "", "if", "not", "osp", ".", "exists", "(", "self", ".", "train_dir", ")", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"'{}' is not available\"", ".", "format", "(", "self", ".", "train_dir", ")", ")", "\n", "", "if", "not", "osp", ".", "exists", "(", "self", ".", "query_dir", ")", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"'{}' is not available\"", ".", "format", "(", "self", ".", "query_dir", ")", ")", "\n", "", "if", "not", "osp", ".", "exists", "(", "self", ".", "gallery_dir", ")", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"'{}' is not available\"", ".", "format", "(", "self", ".", "gallery_dir", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.datasets.dukemtmcreid.DukeMTMCreID._process_dir": [[87, 106], ["glob.glob", "re.compile", "set", "os.join", "os.join", "map", "set.add", "map", "dataset.append", "re.compile.search().groups", "enumerate", "re.compile.search().groups", "re.compile.search", "re.compile.search"], "methods", ["None"], ["", "", "def", "_process_dir", "(", "self", ",", "dir_path", ",", "relabel", "=", "False", ")", ":", "\n", "        ", "img_paths", "=", "glob", ".", "glob", "(", "osp", ".", "join", "(", "dir_path", ",", "'*.jpg'", ")", ")", "\n", "pattern", "=", "re", ".", "compile", "(", "r'([-\\d]+)_c(\\d)'", ")", "\n", "\n", "pid_container", "=", "set", "(", ")", "\n", "for", "img_path", "in", "img_paths", ":", "\n", "            ", "pid", ",", "_", "=", "map", "(", "int", ",", "pattern", ".", "search", "(", "img_path", ")", ".", "groups", "(", ")", ")", "\n", "pid_container", ".", "add", "(", "pid", ")", "\n", "", "pid2label", "=", "{", "pid", ":", "label", "for", "label", ",", "pid", "in", "enumerate", "(", "pid_container", ")", "}", "\n", "\n", "dataset", "=", "[", "]", "\n", "for", "img_path", "in", "img_paths", ":", "\n", "            ", "pid", ",", "camid", "=", "map", "(", "int", ",", "pattern", ".", "search", "(", "img_path", ")", ".", "groups", "(", ")", ")", "\n", "assert", "1", "<=", "camid", "<=", "8", "\n", "camid", "-=", "1", "# index starts from 0", "\n", "if", "relabel", ":", "pid", "=", "pid2label", "[", "pid", "]", "\n", "dataset", ".", "append", "(", "(", "img_path", ",", "pid", ",", "camid", ")", ")", "\n", "\n", "", "return", "dataset", "\n", "", "", ""]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.datasets.aicity20_sim.AICity20Sim.__init__": [[20, 42], ["aicity20.AICity20.__init__", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "aicity20_sim.AICity20Sim._check_before_run", "aicity20_sim.AICity20Sim._process_dir", "aicity20_sim.AICity20Sim.get_imagedata_info", "aicity20_sim.AICity20Sim.get_imagedata_info", "aicity20_sim.AICity20Sim.get_imagedata_info", "print"], "methods", ["home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.solver.ranger.Ranger.__init__", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.datasets.aicity20_ReCam.AICity20ReCam._check_before_run", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.datasets.aicity20_ReType.AICity20ReType._process_dir", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.datasets.bases.BaseDataset.get_imagedata_info", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.datasets.bases.BaseDataset.get_imagedata_info", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.datasets.bases.BaseDataset.get_imagedata_info"], ["def", "__init__", "(", "self", ",", "root", "=", "''", ",", "verbose", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "AICity20", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dataset_dir", "=", "osp", ".", "join", "(", "root", ",", "self", ".", "dataset_dir", ")", "\n", "\n", "self", ".", "train_dir", "=", "osp", ".", "join", "(", "self", ".", "dataset_dir", ",", "'output_UNIT'", ")", "\n", "self", ".", "list_train_path", "=", "osp", ".", "join", "(", "self", ".", "dataset_dir", ",", "'name_train.txt'", ")", "\n", "self", ".", "train_label_path", "=", "osp", ".", "join", "(", "self", ".", "dataset_dir", ",", "'train_label.xml'", ")", "\n", "self", ".", "_check_before_run", "(", ")", "\n", "\n", "train", "=", "self", ".", "_process_dir", "(", "self", ".", "train_dir", ",", "self", ".", "list_train_path", ",", "self", ".", "train_label_path", ",", "relabel", "=", "True", ",", "domain", "=", "'syn'", ")", "\n", "\n", "if", "verbose", ":", "\n", "            ", "print", "(", "\"=> AI CITY 2021 sim data loaded\"", ")", "\n", "#self.print_dataset_statistics(train, query, gallery)", "\n", "\n", "", "self", ".", "train", "=", "train", "\n", "self", ".", "query", "=", "[", "]", "\n", "self", ".", "gallery", "=", "[", "]", "\n", "\n", "self", ".", "num_train_pids", ",", "self", ".", "num_train_imgs", ",", "self", ".", "num_train_cams", "=", "self", ".", "get_imagedata_info", "(", "self", ".", "train", ")", "\n", "self", ".", "num_query_pids", ",", "self", ".", "num_query_imgs", ",", "self", ".", "num_query_cams", "=", "self", ".", "get_imagedata_info", "(", "self", ".", "query", ")", "\n", "self", ".", "num_gallery_pids", ",", "self", ".", "num_gallery_imgs", ",", "self", ".", "num_gallery_cams", "=", "self", ".", "get_imagedata_info", "(", "self", ".", "gallery", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.datasets.market1501.Market1501.__init__": [[28, 52], ["bases.BaseImageDataset.__init__", "os.join", "os.join", "os.join", "os.join", "market1501.Market1501._check_before_run", "market1501.Market1501._process_dir", "market1501.Market1501._process_dir", "market1501.Market1501._process_dir", "market1501.Market1501.get_imagedata_info", "market1501.Market1501.get_imagedata_info", "market1501.Market1501.get_imagedata_info", "print"], "methods", ["home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.solver.ranger.Ranger.__init__", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.datasets.aicity20_ReCam.AICity20ReCam._check_before_run", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.datasets.aicity20_ReType.AICity20ReType._process_dir", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.datasets.aicity20_ReType.AICity20ReType._process_dir", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.datasets.aicity20_ReType.AICity20ReType._process_dir", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.datasets.bases.BaseDataset.get_imagedata_info", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.datasets.bases.BaseDataset.get_imagedata_info", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.datasets.bases.BaseDataset.get_imagedata_info"], ["def", "__init__", "(", "self", ",", "root", "=", "''", ",", "verbose", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "Market1501", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dataset_dir", "=", "osp", ".", "join", "(", "root", ",", "self", ".", "dataset_dir", ")", "\n", "self", ".", "train_dir", "=", "osp", ".", "join", "(", "self", ".", "dataset_dir", ",", "'bounding_box_train'", ")", "\n", "self", ".", "query_dir", "=", "osp", ".", "join", "(", "self", ".", "dataset_dir", ",", "'query'", ")", "\n", "self", ".", "gallery_dir", "=", "osp", ".", "join", "(", "self", ".", "dataset_dir", ",", "'bounding_box_test'", ")", "\n", "\n", "self", ".", "_check_before_run", "(", ")", "\n", "\n", "train", "=", "self", ".", "_process_dir", "(", "self", ".", "train_dir", ",", "relabel", "=", "True", ")", "\n", "query", "=", "self", ".", "_process_dir", "(", "self", ".", "query_dir", ",", "relabel", "=", "False", ")", "\n", "gallery", "=", "self", ".", "_process_dir", "(", "self", ".", "gallery_dir", ",", "relabel", "=", "False", ")", "\n", "\n", "if", "verbose", ":", "\n", "            ", "print", "(", "\"=> Market1501 loaded\"", ")", "\n", "#self.print_dataset_statistics(train, query, gallery)", "\n", "\n", "", "self", ".", "train", "=", "train", "\n", "self", ".", "query", "=", "query", "\n", "self", ".", "gallery", "=", "gallery", "\n", "\n", "self", ".", "num_train_pids", ",", "self", ".", "num_train_imgs", ",", "self", ".", "num_train_cams", "=", "self", ".", "get_imagedata_info", "(", "self", ".", "train", ")", "\n", "self", ".", "num_query_pids", ",", "self", ".", "num_query_imgs", ",", "self", ".", "num_query_cams", "=", "self", ".", "get_imagedata_info", "(", "self", ".", "query", ")", "\n", "self", ".", "num_gallery_pids", ",", "self", ".", "num_gallery_imgs", ",", "self", ".", "num_gallery_cams", "=", "self", ".", "get_imagedata_info", "(", "self", ".", "gallery", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.datasets.market1501.Market1501._check_before_run": [[53, 63], ["os.exists", "RuntimeError", "os.exists", "RuntimeError", "os.exists", "RuntimeError", "os.exists", "RuntimeError"], "methods", ["None"], ["", "def", "_check_before_run", "(", "self", ")", ":", "\n", "        ", "\"\"\"Check if all files are available before going deeper\"\"\"", "\n", "if", "not", "osp", ".", "exists", "(", "self", ".", "dataset_dir", ")", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"'{}' is not available\"", ".", "format", "(", "self", ".", "dataset_dir", ")", ")", "\n", "", "if", "not", "osp", ".", "exists", "(", "self", ".", "train_dir", ")", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"'{}' is not available\"", ".", "format", "(", "self", ".", "train_dir", ")", ")", "\n", "", "if", "not", "osp", ".", "exists", "(", "self", ".", "query_dir", ")", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"'{}' is not available\"", ".", "format", "(", "self", ".", "query_dir", ")", ")", "\n", "", "if", "not", "osp", ".", "exists", "(", "self", ".", "gallery_dir", ")", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"'{}' is not available\"", ".", "format", "(", "self", ".", "gallery_dir", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.datasets.market1501.Market1501._process_dir": [[64, 86], ["glob.glob", "re.compile", "set", "os.join", "map", "set.add", "map", "dataset.append", "re.compile.search().groups", "enumerate", "re.compile.search().groups", "re.compile.search", "re.compile.search"], "methods", ["None"], ["", "", "def", "_process_dir", "(", "self", ",", "dir_path", ",", "relabel", "=", "False", ")", ":", "\n", "        ", "img_paths", "=", "glob", ".", "glob", "(", "osp", ".", "join", "(", "dir_path", ",", "'*.jpg'", ")", ")", "\n", "pattern", "=", "re", ".", "compile", "(", "r'([-\\d]+)_c(\\d)'", ")", "\n", "\n", "pid_container", "=", "set", "(", ")", "\n", "for", "img_path", "in", "img_paths", ":", "\n", "            ", "pid", ",", "_", "=", "map", "(", "int", ",", "pattern", ".", "search", "(", "img_path", ")", ".", "groups", "(", ")", ")", "\n", "if", "pid", "==", "-", "1", ":", "continue", "# junk images are just ignored", "\n", "pid_container", ".", "add", "(", "pid", ")", "\n", "", "pid2label", "=", "{", "pid", ":", "label", "for", "label", ",", "pid", "in", "enumerate", "(", "pid_container", ")", "}", "\n", "\n", "dataset", "=", "[", "]", "\n", "for", "img_path", "in", "img_paths", ":", "\n", "            ", "pid", ",", "camid", "=", "map", "(", "int", ",", "pattern", ".", "search", "(", "img_path", ")", ".", "groups", "(", ")", ")", "\n", "if", "pid", "==", "-", "1", ":", "continue", "# junk images are just ignored", "\n", "assert", "0", "<=", "pid", "<=", "1501", "# pid == 0 means background", "\n", "assert", "1", "<=", "camid", "<=", "6", "\n", "camid", "-=", "1", "# index starts from 0", "\n", "if", "relabel", ":", "pid", "=", "pid2label", "[", "pid", "]", "\n", "dataset", ".", "append", "(", "(", "img_path", ",", "pid", ",", "camid", ")", ")", "\n", "\n", "", "return", "dataset", "\n", "", "", ""]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.datasets.bases.BaseDataset.get_imagedata_info": [[15, 26], ["set", "set", "len", "len", "len"], "methods", ["None"], ["def", "get_imagedata_info", "(", "self", ",", "data", ")", ":", "\n", "        ", "pids", ",", "cams", "=", "[", "]", ",", "[", "]", "\n", "for", "_", ",", "pid", ",", "camid", ",", "_", "in", "data", ":", "\n", "            ", "pids", "+=", "[", "pid", "]", "\n", "cams", "+=", "[", "camid", "]", "\n", "", "pids", "=", "set", "(", "pids", ")", "\n", "cams", "=", "set", "(", "cams", ")", "\n", "num_pids", "=", "len", "(", "pids", ")", "\n", "num_cams", "=", "len", "(", "cams", ")", "\n", "num_imgs", "=", "len", "(", "data", ")", "\n", "return", "num_pids", ",", "num_imgs", ",", "num_cams", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.datasets.bases.BaseDataset.get_videodata_info": [[27, 41], ["set", "set", "len", "len", "len", "len"], "methods", ["None"], ["", "def", "get_videodata_info", "(", "self", ",", "data", ",", "return_tracklet_stats", "=", "False", ")", ":", "\n", "        ", "pids", ",", "cams", ",", "tracklet_stats", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "img_paths", ",", "pid", ",", "camid", "in", "data", ":", "\n", "            ", "pids", "+=", "[", "pid", "]", "\n", "cams", "+=", "[", "camid", "]", "\n", "tracklet_stats", "+=", "[", "len", "(", "img_paths", ")", "]", "\n", "", "pids", "=", "set", "(", "pids", ")", "\n", "cams", "=", "set", "(", "cams", ")", "\n", "num_pids", "=", "len", "(", "pids", ")", "\n", "num_cams", "=", "len", "(", "cams", ")", "\n", "num_tracklets", "=", "len", "(", "data", ")", "\n", "if", "return_tracklet_stats", ":", "\n", "            ", "return", "num_pids", ",", "num_tracklets", ",", "num_cams", ",", "tracklet_stats", "\n", "", "return", "num_pids", ",", "num_tracklets", ",", "num_cams", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.datasets.bases.BaseDataset.print_dataset_statistics": [[42, 44], ["None"], "methods", ["None"], ["", "def", "print_dataset_statistics", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.datasets.bases.BaseImageDataset.__init__": [[50, 58], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "train", "=", "[", "]", "\n", "self", ".", "query", "=", "[", "]", "\n", "self", ".", "gallery", "=", "[", "]", "\n", "self", ".", "train_tracks", "=", "[", "]", "# track information", "\n", "self", ".", "test_tracks", "=", "[", "]", "\n", "self", ".", "query_orientation", "=", "None", "\n", "self", ".", "gallery_orientation", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.datasets.bases.BaseImageDataset.longtail_data_process": [[59, 87], ["labels.items", "bases.BaseImageDataset.relabel", "bases.BaseImageDataset.extend", "labels[].append", "len", "remove_data.extend"], "methods", ["home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.datasets.bases.BaseImageDataset.relabel"], ["", "def", "longtail_data_process", "(", "self", ",", "data", ",", "NUM_INSTANCE_PER_CLS", "=", "2", ")", ":", "\n", "        ", "labels", "=", "{", "}", "\n", "for", "img_path", ",", "pid", ",", "camid", "in", "data", ":", "\n", "            ", "if", "pid", "in", "labels", ":", "\n", "                ", "labels", "[", "pid", "]", ".", "append", "(", "[", "img_path", ",", "pid", ",", "camid", "]", ")", "\n", "", "else", ":", "\n", "                ", "labels", "[", "pid", "]", "=", "[", "[", "img_path", ",", "pid", ",", "camid", "]", "]", "\n", "\n", "# cut-off long-tail data", "\n", "", "", "keep_data", "=", "[", "]", "\n", "remove_data", "=", "[", "]", "\n", "for", "key", ",", "value", "in", "labels", ".", "items", "(", ")", ":", "\n", "            ", "if", "len", "(", "value", ")", "<", "NUM_INSTANCE_PER_CLS", ":", "\n", "                ", "remove_data", ".", "extend", "(", "value", ")", "\n", "continue", "\n", "", "keep_data", ".", "extend", "(", "value", ")", "\n", "", "keep_data", "=", "self", ".", "relabel", "(", "keep_data", ")", "\n", "\n", "# import shutil", "\n", "# import os", "\n", "# dst_dir = './longtailed-N3'", "\n", "# for img_path, pid, camid in remove_data:", "\n", "#     dst_path = os.path.join(dst_dir, str(pid).zfill(5))", "\n", "#     if not os.path.exists(dst_path):", "\n", "#         os.makedirs(dst_path)", "\n", "#     shutil.copyfile(img_path, os.path.join(dst_path, os.path.basename(img_path)))", "\n", "\n", "return", "keep_data", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.datasets.bases.BaseImageDataset.combine_all": [[88, 99], ["bases.BaseImageDataset.get_imagedata_info", "bases.BaseImageDataset.relabel", "bases.BaseImageDataset.train.append"], "methods", ["home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.datasets.bases.BaseDataset.get_imagedata_info", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.datasets.bases.BaseImageDataset.relabel"], ["", "def", "combine_all", "(", "self", ")", ":", "\n", "# combine train, query, gallery", "\n", "        ", "num_train_pids", ",", "num_train_imgs", ",", "num_train_cams", "=", "self", ".", "get_imagedata_info", "(", "self", ".", "train", ")", "\n", "new_train", "=", "self", ".", "query", "+", "self", ".", "gallery", "\n", "#new_train = self.relabel(new_train)", "\n", "\n", "for", "img_path", ",", "pid", ",", "camid", "in", "new_train", ":", "\n", "            ", "self", ".", "train", ".", "append", "(", "[", "img_path", ",", "pid", "+", "num_train_pids", ",", "camid", "]", ")", "\n", "", "self", ".", "train", "=", "self", ".", "relabel", "(", "self", ".", "train", ")", "\n", "self", ".", "query", "=", "[", "]", "\n", "self", ".", "gallery", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.datasets.bases.BaseImageDataset.get_id_range": [[100, 110], ["set", "set.add", "len", "min", "max"], "methods", ["None"], ["", "def", "get_id_range", "(", "self", ",", "lists", ")", ":", "\n", "        ", "pid_container", "=", "set", "(", ")", "\n", "for", "img_path", ",", "pid", ",", "camid", ",", "domain", "in", "lists", ":", "\n", "            ", "pid_container", ".", "add", "(", "pid", ")", "\n", "\n", "", "if", "len", "(", "pid_container", ")", "==", "0", ":", "\n", "            ", "min_id", ",", "max_id", "=", "0", ",", "0", "\n", "", "else", ":", "\n", "            ", "min_id", ",", "max_id", "=", "min", "(", "pid_container", ")", ",", "max", "(", "pid_container", ")", "\n", "", "return", "min_id", ",", "max_id", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.datasets.bases.BaseImageDataset.relabel": [[111, 121], ["set", "set.add", "relabeled.append", "enumerate"], "methods", ["None"], ["", "def", "relabel", "(", "self", ",", "lists", ")", ":", "\n", "        ", "relabeled", "=", "[", "]", "\n", "pid_container", "=", "set", "(", ")", "\n", "for", "img_path", ",", "pid", ",", "camid", ",", "domain", "in", "lists", ":", "\n", "            ", "pid_container", ".", "add", "(", "pid", ")", "\n", "", "pid2label", "=", "{", "pid", ":", "label", "for", "label", ",", "pid", "in", "enumerate", "(", "pid_container", ")", "}", "\n", "for", "img_path", ",", "pid", ",", "camid", ",", "domain", "in", "lists", ":", "\n", "            ", "pid", "=", "pid2label", "[", "pid", "]", "\n", "relabeled", ".", "append", "(", "[", "img_path", ",", "pid", ",", "camid", ",", "domain", "]", ")", "\n", "", "return", "relabeled", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.datasets.bases.BaseImageDataset._read_tracks": [[122, 131], ["open", "f.readlines", "line.strip.strip.strip", "line.strip.strip.split", "tracks.append"], "methods", ["None"], ["", "def", "_read_tracks", "(", "self", ",", "path", ")", ":", "\n", "        ", "tracks", "=", "[", "]", "\n", "with", "open", "(", "path", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "lines", "=", "f", ".", "readlines", "(", ")", "\n", "for", "line", "in", "lines", ":", "\n", "                ", "line", "=", "line", ".", "strip", "(", ")", "\n", "track", "=", "line", ".", "split", "(", "' '", ")", "\n", "tracks", ".", "append", "(", "track", ")", "\n", "", "", "return", "tracks", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.datasets.bases.BaseImageDataset.print_dataset_statistics": [[132, 145], ["bases.BaseImageDataset.get_imagedata_info", "bases.BaseImageDataset.get_imagedata_info", "bases.BaseImageDataset.get_imagedata_info", "print", "print", "print", "print", "print", "print", "print", "print"], "methods", ["home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.datasets.bases.BaseDataset.get_imagedata_info", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.datasets.bases.BaseDataset.get_imagedata_info", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.datasets.bases.BaseDataset.get_imagedata_info"], ["", "def", "print_dataset_statistics", "(", "self", ",", "train", ",", "query", ",", "gallery", ")", ":", "\n", "        ", "num_train_pids", ",", "num_train_imgs", ",", "num_train_cams", "=", "self", ".", "get_imagedata_info", "(", "train", ")", "\n", "num_query_pids", ",", "num_query_imgs", ",", "num_query_cams", "=", "self", ".", "get_imagedata_info", "(", "query", ")", "\n", "num_gallery_pids", ",", "num_gallery_imgs", ",", "num_gallery_cams", "=", "self", ".", "get_imagedata_info", "(", "gallery", ")", "\n", "\n", "print", "(", "\"Dataset statistics:\"", ")", "\n", "print", "(", "\"  ----------------------------------------\"", ")", "\n", "print", "(", "\"  subset   | # ids | # images | # cameras\"", ")", "\n", "print", "(", "\"  ----------------------------------------\"", ")", "\n", "print", "(", "\"  train    | {:5d} | {:8d} | {:9d}\"", ".", "format", "(", "num_train_pids", ",", "num_train_imgs", ",", "num_train_cams", ")", ")", "\n", "print", "(", "\"  query    | {:5d} | {:8d} | {:9d}\"", ".", "format", "(", "num_query_pids", ",", "num_query_imgs", ",", "num_query_cams", ")", ")", "\n", "print", "(", "\"  gallery  | {:5d} | {:8d} | {:9d}\"", ".", "format", "(", "num_gallery_pids", ",", "num_gallery_imgs", ",", "num_gallery_cams", ")", ")", "\n", "print", "(", "\"  ----------------------------------------\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.datasets.bases.BaseVideoDataset.print_dataset_statistics": [[152, 177], ["bases.BaseVideoDataset.get_videodata_info", "bases.BaseVideoDataset.get_videodata_info", "bases.BaseVideoDataset.get_videodata_info", "numpy.min", "numpy.max", "numpy.mean", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print"], "methods", ["home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.datasets.bases.BaseDataset.get_videodata_info", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.datasets.bases.BaseDataset.get_videodata_info", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.datasets.bases.BaseDataset.get_videodata_info"], ["def", "print_dataset_statistics", "(", "self", ",", "train", ",", "query", ",", "gallery", ")", ":", "\n", "        ", "num_train_pids", ",", "num_train_tracklets", ",", "num_train_cams", ",", "train_tracklet_stats", "=", "self", ".", "get_videodata_info", "(", "train", ",", "return_tracklet_stats", "=", "True", ")", "\n", "\n", "num_query_pids", ",", "num_query_tracklets", ",", "num_query_cams", ",", "query_tracklet_stats", "=", "self", ".", "get_videodata_info", "(", "query", ",", "return_tracklet_stats", "=", "True", ")", "\n", "\n", "num_gallery_pids", ",", "num_gallery_tracklets", ",", "num_gallery_cams", ",", "gallery_tracklet_stats", "=", "self", ".", "get_videodata_info", "(", "gallery", ",", "return_tracklet_stats", "=", "True", ")", "\n", "\n", "tracklet_stats", "=", "train_tracklet_stats", "+", "query_tracklet_stats", "+", "gallery_tracklet_stats", "\n", "min_num", "=", "np", ".", "min", "(", "tracklet_stats", ")", "\n", "max_num", "=", "np", ".", "max", "(", "tracklet_stats", ")", "\n", "avg_num", "=", "np", ".", "mean", "(", "tracklet_stats", ")", "\n", "\n", "print", "(", "\"Dataset statistics:\"", ")", "\n", "print", "(", "\"  -------------------------------------------\"", ")", "\n", "print", "(", "\"  subset   | # ids | # tracklets | # cameras\"", ")", "\n", "print", "(", "\"  -------------------------------------------\"", ")", "\n", "print", "(", "\"  train    | {:5d} | {:11d} | {:9d}\"", ".", "format", "(", "num_train_pids", ",", "num_train_tracklets", ",", "num_train_cams", ")", ")", "\n", "print", "(", "\"  query    | {:5d} | {:11d} | {:9d}\"", ".", "format", "(", "num_query_pids", ",", "num_query_tracklets", ",", "num_query_cams", ")", ")", "\n", "print", "(", "\"  gallery  | {:5d} | {:11d} | {:9d}\"", ".", "format", "(", "num_gallery_pids", ",", "num_gallery_tracklets", ",", "num_gallery_cams", ")", ")", "\n", "print", "(", "\"  -------------------------------------------\"", ")", "\n", "print", "(", "\"  number of images per tracklet: {} ~ {}, average {:.2f}\"", ".", "format", "(", "min_num", ",", "max_num", ",", "avg_num", ")", ")", "\n", "print", "(", "\"  -------------------------------------------\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.datasets.bases.apply_id_bias": [[179, 185], ["id_biased_train.append"], "function", ["None"], ["", "", "def", "apply_id_bias", "(", "train", ",", "id_bias", "=", "0", ")", ":", "\n", "# add id bias", "\n", "    ", "id_biased_train", "=", "[", "]", "\n", "for", "img_path", ",", "pid", ",", "camid", ",", "domain", "in", "train", ":", "\n", "        ", "id_biased_train", ".", "append", "(", "[", "img_path", ",", "pid", "+", "id_bias", ",", "camid", ",", "domain", "]", ")", "\n", "", "return", "id_biased_train", "\n", "", ""]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.datasets.aicity20_split.AICity20_Split.__init__": [[26, 67], ["bases.BaseImageDataset.__init__", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "aicity20_split.AICity20_Split._check_before_run", "aicity20_split.AICity20_Split._process_dir", "aicity20_split.AICity20_Split._process_dir", "aicity20_split.AICity20_Split._process_dir", "aicity20_split.AICity20_Split.relabel", "aicity20_split.AICity20_Split._read_tracks", "aicity20_split.AICity20_Split._read_tracks", "aicity20_split.AICity20_Split.get_imagedata_info", "aicity20_split.AICity20_Split.get_imagedata_info", "aicity20_split.AICity20_Split.get_imagedata_info", "print", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.solver.ranger.Ranger.__init__", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.datasets.aicity20_ReCam.AICity20ReCam._check_before_run", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.datasets.aicity20_ReType.AICity20ReType._process_dir", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.datasets.aicity20_ReType.AICity20ReType._process_dir", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.datasets.aicity20_ReType.AICity20ReType._process_dir", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.datasets.bases.BaseImageDataset.relabel", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.datasets.bases.BaseImageDataset._read_tracks", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.datasets.bases.BaseImageDataset._read_tracks", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.datasets.bases.BaseDataset.get_imagedata_info", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.datasets.bases.BaseDataset.get_imagedata_info", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.datasets.bases.BaseDataset.get_imagedata_info"], ["def", "__init__", "(", "self", ",", "root", "=", "''", ",", "verbose", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "AICity20_Split", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# import ipdb; ipdb.set_trace()", "\n", "self", ".", "dataset_dir", "=", "osp", ".", "join", "(", "root", ",", "self", ".", "dataset_dir", ")", "\n", "# self.dataset_aug_dir = osp.join(root, self.dataset_aug_dir)", "\n", "\n", "self", ".", "train_dir", "=", "osp", ".", "join", "(", "self", ".", "dataset_dir", ",", "'image_train'", ")", "\n", "self", ".", "query_dir", "=", "osp", ".", "join", "(", "self", ".", "dataset_dir", ",", "'image_train'", ")", "\n", "self", ".", "gallery_dir", "=", "osp", ".", "join", "(", "self", ".", "dataset_dir", ",", "'image_train'", ")", "\n", "# self.train_aug_dir = osp.join(self.dataset_aug_dir, 'image_train')", "\n", "\n", "# self.list_train_path = osp.join(self.dataset_dir, 'name_train.txt')", "\n", "# self.list_query_path = osp.join(self.dataset_dir, 'name_query.txt')", "\n", "# self.list_gallery_path = osp.join(self.dataset_dir, 'name_test.txt')", "\n", "\n", "self", ".", "train_label_path", "=", "osp", ".", "join", "(", "self", ".", "dataset_dir", ",", "'train_split.xml'", ")", "\n", "self", ".", "test_label_path", "=", "osp", ".", "join", "(", "self", ".", "dataset_dir", ",", "'test_split.xml'", ")", "\n", "self", ".", "query_label_path", "=", "osp", ".", "join", "(", "self", ".", "dataset_dir", ",", "'query_split.xml'", ")", "\n", "\n", "self", ".", "_check_before_run", "(", ")", "\n", "\n", "train", "=", "self", ".", "_process_dir", "(", "self", ".", "train_dir", ",", "self", ".", "train_label_path", ",", "relabel", "=", "False", ")", "\n", "query", "=", "self", ".", "_process_dir", "(", "self", ".", "query_dir", ",", "self", ".", "query_label_path", ",", "relabel", "=", "False", ")", "\n", "gallery", "=", "self", ".", "_process_dir", "(", "self", ".", "gallery_dir", ",", "self", ".", "test_label_path", ",", "relabel", "=", "False", ")", "\n", "# import ipdb; ipdb.set_trace()", "\n", "# train += self._process_dir(self.train_aug_dir, self.list_train_path, self.train_label_path, relabel=False)", "\n", "train", "=", "self", ".", "relabel", "(", "train", ")", "\n", "if", "verbose", ":", "\n", "            ", "print", "(", "\"=> AI CITY SPLIT 2021 data loaded\"", ")", "\n", "#self.print_dataset_statistics(train, query, gallery)", "\n", "\n", "", "self", ".", "train", "=", "train", "\n", "self", ".", "query", "=", "query", "\n", "self", ".", "gallery", "=", "gallery", "\n", "\n", "self", ".", "train_tracks", "=", "self", ".", "_read_tracks", "(", "os", ".", "path", ".", "join", "(", "self", ".", "dataset_dir", ",", "'train_track.txt'", ")", ")", "\n", "self", ".", "test_tracks", "=", "self", ".", "_read_tracks", "(", "os", ".", "path", ".", "join", "(", "self", ".", "dataset_dir", ",", "'test_track.txt'", ")", ")", "\n", "\n", "self", ".", "num_train_pids", ",", "self", ".", "num_train_imgs", ",", "self", ".", "num_train_cams", "=", "self", ".", "get_imagedata_info", "(", "self", ".", "train", ")", "\n", "self", ".", "num_query_pids", ",", "self", ".", "num_query_imgs", ",", "self", ".", "num_query_cams", "=", "self", ".", "get_imagedata_info", "(", "self", ".", "query", ")", "\n", "self", ".", "num_gallery_pids", ",", "self", ".", "num_gallery_imgs", ",", "self", ".", "num_gallery_cams", "=", "self", ".", "get_imagedata_info", "(", "self", ".", "gallery", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.datasets.aicity20_split.AICity20_Split._check_before_run": [[69, 75], ["os.exists", "os.exists", "RuntimeError", "os.exists", "os.exists", "RuntimeError"], "methods", ["None"], ["", "def", "_check_before_run", "(", "self", ")", ":", "\n", "        ", "\"\"\"Check if all files are available before going deeper\"\"\"", "\n", "if", "not", "osp", ".", "exists", "(", "self", ".", "dataset_dir", ")", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"'{}' is not available\"", ".", "format", "(", "self", ".", "dataset_dir", ")", ")", "\n", "", "if", "not", "osp", ".", "exists", "(", "self", ".", "train_dir", ")", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"'{}' is not available\"", ".", "format", "(", "self", ".", "train_dir", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.datasets.aicity20_split.AICity20_Split._process_dir": [[76, 99], ["xml.parse", "xml.parse.find", "os.join", "os.join", "int", "int", "aicity20_split.AICity20_Split.append", "aicity20_split.AICity20_Split.relabel", "open", "f.readlines", "xml.XMLParser", "line.strip.strip.strip", "os.join", "os.join", "aicity20_split.AICity20_Split.append"], "methods", ["home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.datasets.bases.BaseImageDataset.relabel"], ["", "", "def", "_process_dir", "(", "self", ",", "img_dir", ",", "label_path", ",", "relabel", "=", "False", ",", "domain", "=", "'real'", ")", ":", "\n", "        ", "dataset", "=", "[", "]", "\n", "if", "label_path", ":", "\n", "            ", "tree", "=", "ET", ".", "parse", "(", "label_path", ",", "parser", "=", "ET", ".", "XMLParser", "(", "encoding", "=", "'utf-8'", ")", ")", "\n", "objs", "=", "tree", ".", "find", "(", "'Items'", ")", "\n", "for", "obj", "in", "objs", ":", "\n", "                ", "image_name", "=", "obj", ".", "attrib", "[", "'imageName'", "]", "\n", "img_path", "=", "osp", ".", "join", "(", "img_dir", ",", "image_name", ")", "\n", "pid", "=", "int", "(", "obj", ".", "attrib", "[", "'vehicleID'", "]", ")", "\n", "camid", "=", "int", "(", "obj", ".", "attrib", "[", "'cameraID'", "]", "[", "1", ":", "]", ")", "\n", "dataset", ".", "append", "(", "(", "img_path", ",", "pid", ",", "camid", ",", "domain", ")", ")", "\n", "#dataset.append((img_path, camid, pid))", "\n", "", "if", "relabel", ":", "dataset", "=", "self", ".", "relabel", "(", "dataset", ")", "\n", "", "else", ":", "\n", "            ", "with", "open", "(", "list_path", ",", "'r'", ")", "as", "f", ":", "\n", "                ", "lines", "=", "f", ".", "readlines", "(", ")", "\n", "for", "line", "in", "lines", ":", "\n", "                    ", "line", "=", "line", ".", "strip", "(", ")", "\n", "img_path", "=", "osp", ".", "join", "(", "img_dir", ",", "line", ")", "\n", "pid", "=", "0", "\n", "camid", "=", "0", "\n", "dataset", ".", "append", "(", "(", "img_path", ",", "pid", ",", "camid", ",", "domain", ")", ")", "\n", "", "", "", "return", "dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.datasets.veri.VeRi.__init__": [[25, 51], ["bases.BaseImageDataset.__init__", "os.join", "os.join", "os.join", "os.join", "veri.VeRi._check_before_run", "veri.VeRi._process_dir", "veri.VeRi._process_dir", "veri.VeRi._process_dir", "veri.VeRi.get_imagedata_info", "veri.VeRi.get_imagedata_info", "veri.VeRi.get_imagedata_info", "veri.VeRi._read_tracks", "print", "os.join"], "methods", ["home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.solver.ranger.Ranger.__init__", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.datasets.aicity20_ReCam.AICity20ReCam._check_before_run", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.datasets.aicity20_ReType.AICity20ReType._process_dir", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.datasets.aicity20_ReType.AICity20ReType._process_dir", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.datasets.aicity20_ReType.AICity20ReType._process_dir", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.datasets.bases.BaseDataset.get_imagedata_info", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.datasets.bases.BaseDataset.get_imagedata_info", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.datasets.bases.BaseDataset.get_imagedata_info", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.datasets.bases.BaseImageDataset._read_tracks"], ["def", "__init__", "(", "self", ",", "root", "=", "'../'", ",", "verbose", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "VeRi", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dataset_dir", "=", "osp", ".", "join", "(", "root", ",", "self", ".", "dataset_dir", ")", "\n", "self", ".", "train_dir", "=", "osp", ".", "join", "(", "self", ".", "dataset_dir", ",", "'image_train'", ")", "\n", "self", ".", "query_dir", "=", "osp", ".", "join", "(", "self", ".", "dataset_dir", ",", "'image_query'", ")", "\n", "self", ".", "gallery_dir", "=", "osp", ".", "join", "(", "self", ".", "dataset_dir", ",", "'image_test'", ")", "\n", "\n", "self", ".", "_check_before_run", "(", ")", "\n", "\n", "train", "=", "self", ".", "_process_dir", "(", "self", ".", "train_dir", ",", "relabel", "=", "True", ")", "\n", "query", "=", "self", ".", "_process_dir", "(", "self", ".", "query_dir", ",", "relabel", "=", "False", ")", "\n", "gallery", "=", "self", ".", "_process_dir", "(", "self", ".", "gallery_dir", ",", "relabel", "=", "False", ")", "\n", "\n", "if", "verbose", ":", "\n", "            ", "print", "(", "\"=> VeRi-776 loaded\"", ")", "\n", "#self.print_dataset_statistics(train, query, gallery)", "\n", "\n", "", "self", ".", "train", "=", "train", "\n", "self", ".", "query", "=", "query", "\n", "self", ".", "gallery", "=", "gallery", "\n", "\n", "self", ".", "num_train_pids", ",", "self", ".", "num_train_imgs", ",", "self", ".", "num_train_cams", "=", "self", ".", "get_imagedata_info", "(", "self", ".", "train", ")", "\n", "self", ".", "num_query_pids", ",", "self", ".", "num_query_imgs", ",", "self", ".", "num_query_cams", "=", "self", ".", "get_imagedata_info", "(", "self", ".", "query", ")", "\n", "self", ".", "num_gallery_pids", ",", "self", ".", "num_gallery_imgs", ",", "self", ".", "num_gallery_cams", "=", "self", ".", "get_imagedata_info", "(", "self", ".", "gallery", ")", "\n", "\n", "self", ".", "test_tracks", "=", "self", ".", "_read_tracks", "(", "osp", ".", "join", "(", "self", ".", "dataset_dir", ",", "'test_track.txt'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.datasets.veri.VeRi._check_before_run": [[53, 63], ["os.exists", "RuntimeError", "os.exists", "RuntimeError", "os.exists", "RuntimeError", "os.exists", "RuntimeError"], "methods", ["None"], ["", "def", "_check_before_run", "(", "self", ")", ":", "\n", "        ", "\"\"\"Check if all files are available before going deeper\"\"\"", "\n", "if", "not", "osp", ".", "exists", "(", "self", ".", "dataset_dir", ")", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"'{}' is not available\"", ".", "format", "(", "self", ".", "dataset_dir", ")", ")", "\n", "", "if", "not", "osp", ".", "exists", "(", "self", ".", "train_dir", ")", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"'{}' is not available\"", ".", "format", "(", "self", ".", "train_dir", ")", ")", "\n", "", "if", "not", "osp", ".", "exists", "(", "self", ".", "query_dir", ")", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"'{}' is not available\"", ".", "format", "(", "self", ".", "query_dir", ")", ")", "\n", "", "if", "not", "osp", ".", "exists", "(", "self", ".", "gallery_dir", ")", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"'{}' is not available\"", ".", "format", "(", "self", ".", "gallery_dir", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.datasets.veri.VeRi._process_dir": [[64, 86], ["glob.glob", "re.compile", "set", "os.join", "map", "set.add", "map", "dataset.append", "re.compile.search().groups", "enumerate", "re.compile.search().groups", "re.compile.search", "re.compile.search"], "methods", ["None"], ["", "", "def", "_process_dir", "(", "self", ",", "dir_path", ",", "relabel", "=", "False", ",", "domain", "=", "'real'", ")", ":", "\n", "        ", "img_paths", "=", "glob", ".", "glob", "(", "osp", ".", "join", "(", "dir_path", ",", "'*.jpg'", ")", ")", "\n", "pattern", "=", "re", ".", "compile", "(", "r'([-\\d]+)_c(\\d+)'", ")", "\n", "\n", "pid_container", "=", "set", "(", ")", "\n", "for", "img_path", "in", "img_paths", ":", "\n", "            ", "pid", ",", "_", "=", "map", "(", "int", ",", "pattern", ".", "search", "(", "img_path", ")", ".", "groups", "(", ")", ")", "\n", "if", "pid", "==", "-", "1", ":", "continue", "# junk images are just ignored", "\n", "pid_container", ".", "add", "(", "pid", ")", "\n", "", "pid2label", "=", "{", "pid", ":", "label", "for", "label", ",", "pid", "in", "enumerate", "(", "pid_container", ")", "}", "\n", "\n", "dataset", "=", "[", "]", "\n", "for", "img_path", "in", "img_paths", ":", "\n", "            ", "pid", ",", "camid", "=", "map", "(", "int", ",", "pattern", ".", "search", "(", "img_path", ")", ".", "groups", "(", ")", ")", "\n", "if", "pid", "==", "-", "1", ":", "continue", "# junk images are just ignored", "\n", "assert", "0", "<=", "pid", "<=", "776", "# pid == 0 means background", "\n", "assert", "1", "<=", "camid", "<=", "20", "\n", "camid", "-=", "1", "# index starts from 0", "\n", "if", "relabel", ":", "pid", "=", "pid2label", "[", "pid", "]", "\n", "dataset", ".", "append", "(", "(", "img_path", ",", "pid", ",", "camid", ",", "domain", ")", ")", "\n", "#dataset.append((img_path, camid, pid))", "\n", "", "return", "dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.datasets.aicity20_trainval.AICity20Trainval.__init__": [[22, 61], ["bases.BaseImageDataset.__init__", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "aicity20_trainval.AICity20Trainval._check_before_run", "aicity20_trainval.AICity20Trainval._process_dir", "aicity20_trainval.AICity20Trainval._process_dir", "aicity20_trainval.AICity20Trainval._process_dir", "aicity20_trainval.AICity20Trainval.relabel", "aicity20_trainval.AICity20Trainval.get_imagedata_info", "aicity20_trainval.AICity20Trainval.get_imagedata_info", "aicity20_trainval.AICity20Trainval.get_imagedata_info", "aicity20_trainval.AICity20Trainval._read_tracks", "aicity20_trainval.AICity20Trainval._read_tracks", "print", "os.join", "os.join", "os.join", "os.join"], "methods", ["home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.solver.ranger.Ranger.__init__", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.datasets.aicity20_ReCam.AICity20ReCam._check_before_run", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.datasets.aicity20_ReType.AICity20ReType._process_dir", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.datasets.aicity20_ReType.AICity20ReType._process_dir", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.datasets.aicity20_ReType.AICity20ReType._process_dir", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.datasets.bases.BaseImageDataset.relabel", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.datasets.bases.BaseDataset.get_imagedata_info", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.datasets.bases.BaseDataset.get_imagedata_info", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.datasets.bases.BaseDataset.get_imagedata_info", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.datasets.bases.BaseImageDataset._read_tracks", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.datasets.bases.BaseImageDataset._read_tracks"], ["def", "__init__", "(", "self", ",", "root", "=", "''", ",", "verbose", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "AICity20Trainval", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dataset_dir", "=", "osp", ".", "join", "(", "root", ",", "self", ".", "dataset_dir", ")", "\n", "self", ".", "dataset_aug_dir", "=", "osp", ".", "join", "(", "root", ",", "self", ".", "dataset_aug_dir", ")", "\n", "self", ".", "train_dir", "=", "osp", ".", "join", "(", "self", ".", "dataset_dir", ",", "'image_train'", ")", "\n", "self", ".", "query_dir", "=", "osp", ".", "join", "(", "self", ".", "dataset_aug_dir", ",", "'image_train'", ")", "\n", "self", ".", "gallery_dir", "=", "osp", ".", "join", "(", "self", ".", "dataset_aug_dir", ",", "'image_train'", ")", "\n", "self", ".", "train_aug_dir", "=", "osp", ".", "join", "(", "self", ".", "dataset_aug_dir", ",", "'image_train'", ")", "\n", "\n", "train_list_path", "=", "osp", ".", "join", "(", "self", ".", "dataset_dir", ",", "'trainval_partial'", ",", "'train.txt'", ")", "\n", "query_list_path", "=", "osp", ".", "join", "(", "self", ".", "dataset_dir", ",", "'trainval_partial'", ",", "'query.txt'", ")", "\n", "gallery_list_path", "=", "osp", ".", "join", "(", "self", ".", "dataset_dir", ",", "'trainval_partial'", ",", "'test.txt'", ")", "\n", "#train_aug_list_path = osp.join(self.dataset_dir, 'trainval_partial', 'train.txt')", "\n", "\n", "self", ".", "_check_before_run", "(", ")", "\n", "\n", "train", "=", "self", ".", "_process_dir", "(", "self", ".", "train_dir", ",", "train_list_path", ",", "relabel", "=", "False", ")", "\n", "query", "=", "self", ".", "_process_dir", "(", "self", ".", "query_dir", ",", "query_list_path", ",", "relabel", "=", "False", ")", "\n", "gallery", "=", "self", ".", "_process_dir", "(", "self", ".", "gallery_dir", ",", "gallery_list_path", ",", "relabel", "=", "False", ")", "\n", "# train += self._process_dir(self.train_aug_dir, train_list_path, relabel=False)", "\n", "# train += self._process_dir(os.path.join(root, self.dataset_blend_dir, 'image_train')", "\n", "#                            , train_list_path, relabel=False)", "\n", "\n", "\n", "train", "=", "self", ".", "relabel", "(", "train", ")", "\n", "if", "verbose", ":", "\n", "            ", "print", "(", "\"=> aicity trainval loaded\"", ")", "\n", "# self.print_dataset_statistics(train, query, gallery)", "\n", "\n", "", "self", ".", "train", "=", "train", "\n", "self", ".", "query", "=", "query", "\n", "self", ".", "gallery", "=", "gallery", "\n", "\n", "self", ".", "num_train_pids", ",", "self", ".", "num_train_imgs", ",", "self", ".", "num_train_cams", "=", "self", ".", "get_imagedata_info", "(", "self", ".", "train", ")", "\n", "self", ".", "num_query_pids", ",", "self", ".", "num_query_imgs", ",", "self", ".", "num_query_cams", "=", "self", ".", "get_imagedata_info", "(", "self", ".", "query", ")", "\n", "self", ".", "num_gallery_pids", ",", "self", ".", "num_gallery_imgs", ",", "self", ".", "num_gallery_cams", "=", "self", ".", "get_imagedata_info", "(", "self", ".", "gallery", ")", "\n", "\n", "self", ".", "train_tracks", "=", "self", ".", "_read_tracks", "(", "osp", ".", "join", "(", "self", ".", "dataset_dir", ",", "'train_track.txt'", ")", ")", "\n", "self", ".", "test_tracks", "=", "self", ".", "_read_tracks", "(", "osp", ".", "join", "(", "self", ".", "dataset_dir", ",", "'trainval_partial'", ",", "'test_track.txt'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.datasets.aicity20_trainval.AICity20Trainval._check_before_run": [[62, 72], ["os.exists", "os.exists", "RuntimeError", "os.exists", "os.exists", "RuntimeError", "os.exists", "os.exists", "RuntimeError", "os.exists", "os.exists", "RuntimeError"], "methods", ["None"], ["", "def", "_check_before_run", "(", "self", ")", ":", "\n", "        ", "\"\"\"Check if all files are available before going deeper\"\"\"", "\n", "if", "not", "osp", ".", "exists", "(", "self", ".", "dataset_dir", ")", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"'{}' is not available\"", ".", "format", "(", "self", ".", "dataset_dir", ")", ")", "\n", "", "if", "not", "osp", ".", "exists", "(", "self", ".", "train_dir", ")", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"'{}' is not available\"", ".", "format", "(", "self", ".", "train_dir", ")", ")", "\n", "", "if", "not", "osp", ".", "exists", "(", "self", ".", "query_dir", ")", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"'{}' is not available\"", ".", "format", "(", "self", ".", "query_dir", ")", ")", "\n", "", "if", "not", "osp", ".", "exists", "(", "self", ".", "gallery_dir", ")", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"'{}' is not available\"", ".", "format", "(", "self", ".", "gallery_dir", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.datasets.aicity20_trainval.AICity20Trainval._process_dir": [[73, 89], ["open", "f.readlines", "line.strip.strip.strip", "line.strip.strip.split", "int", "int", "os.join", "os.join", "aicity20_trainval.AICity20Trainval.append", "aicity20_trainval.AICity20Trainval.relabel"], "methods", ["home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.datasets.bases.BaseImageDataset.relabel"], ["", "", "def", "_process_dir", "(", "self", ",", "dir_path", ",", "list_path", ",", "relabel", "=", "False", ")", ":", "\n", "        ", "dataset", "=", "[", "]", "\n", "with", "open", "(", "list_path", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "lines", "=", "f", ".", "readlines", "(", ")", "\n", "\n", "", "for", "line", "in", "lines", ":", "\n", "            ", "line", "=", "line", ".", "strip", "(", ")", "\n", "pid", ",", "camid", ",", "trackid", ",", "image_name", "=", "line", ".", "split", "(", "'_'", ")", "\n", "pid", "=", "int", "(", "pid", ")", "\n", "camid", "=", "int", "(", "camid", "[", "1", ":", "]", ")", "\n", "img_path", "=", "osp", ".", "join", "(", "dir_path", ",", "image_name", ")", "\n", "dataset", ".", "append", "(", "(", "img_path", ",", "pid", ",", "camid", ")", ")", "\n", "#dataset.append((img_path, camid, pid))", "\n", "", "if", "relabel", ":", "dataset", "=", "self", ".", "relabel", "(", "dataset", ")", "\n", "\n", "return", "dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.datasets.dataset_loader.ImageDataset.__init__": [[38, 48], ["len", "glob.glob.glob"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "dataset", ",", "transform", "=", "None", ",", "change_background", "=", "False", ")", ":", "\n", "        ", "self", ".", "dataset", "=", "dataset", "\n", "self", ".", "transform", "=", "transform", "\n", "self", ".", "change_background", "=", "change_background", "\n", "if", "self", ".", "change_background", ":", "\n", "            ", "self", ".", "mask_list", "=", "glob", "(", "'/media/data/ai-city/Track2/AIC21_Track2_ReID/AIC21_Track2_ReID/track2_segmented/mask/*.npy'", ")", "\n", "\n", "", "self", ".", "path", "=", "'/media/data/ai-city/Track2/AIC21_Track2_ReID/AIC21_Track2_ReID/track2_segmented/'", "\n", "self", ".", "_ori_len", "=", "len", "(", "self", ".", "dataset", ")", "\n", "self", ".", "times", "=", "1", "\n", "# print(\"I'm ngocnt\")", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.datasets.dataset_loader.ImageDataset.__len__": [[50, 52], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "dataset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.datasets.dataset_loader.ImageDataset.__getitem__": [[53, 81], ["dataset_loader.read_image", "dataset_loader.ImageDataset.transform", "random.randint", "img_path.split", "dataset_loader.read_image", "numpy.load", "random.choice", "dataset_loader.read_image", "background.resize.resize.resize", "PIL.Image.fromarray", "dataset_loader.read_image", "glob.glob.glob", "img_name.split", "numpy.stack", "img_name.split"], "methods", ["home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.datasets.dataset_loader.read_image", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.datasets.dataset_loader.read_image", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.datasets.dataset_loader.read_image", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.datasets.dataset_loader.read_image"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "img_path", ",", "pid", ",", "camid", ",", "domain", "=", "self", ".", "dataset", "[", "index", "]", "\n", "if", "self", ".", "change_background", "==", "True", ":", "\n", "            ", "prob", "=", "randint", "(", "1", ",", "10", ")", "/", "10", "\n", "img_name", "=", "img_path", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "\n", "mask_path", "=", "self", ".", "path", "+", "'mask/'", "+", "img_name", ".", "split", "(", "'.'", ")", "[", "0", "]", "+", "'.npy'", "\n", "if", "(", "prob", ">=", "0.5", ")", "and", "(", "mask_path", "in", "self", ".", "mask_list", ")", ":", "\n", "# import ipdb; ipdb.set_trace()", "\n", "                ", "foreground", "=", "read_image", "(", "self", ".", "path", "+", "'foreground/'", "+", "img_name", ".", "split", "(", "'.'", ")", "[", "0", "]", "+", "'.jpg'", ")", "\n", "mask", "=", "np", ".", "load", "(", "mask_path", ")", "\n", "width", ",", "height", "=", "foreground", ".", "size", "\n", "\n", "# select background", "\n", "background_path", "=", "random", ".", "choice", "(", "glob", "(", "self", ".", "path", "+", "'background_painted/*.jpg'", ")", ")", "\n", "background", "=", "read_image", "(", "background_path", ")", "\n", "background", "=", "background", ".", "resize", "(", "(", "width", ",", "height", ")", ")", "\n", "# merge", "\n", "merge", "=", "background", "*", "(", "1", "-", "np", ".", "stack", "(", "[", "mask", ",", "mask", ",", "mask", "]", ",", "axis", "=", "2", ")", ")", "+", "foreground", "\n", "img", "=", "Image", ".", "fromarray", "(", "merge", ")", "\n", "\n", "", "else", ":", "\n", "                ", "img", "=", "read_image", "(", "img_path", ")", "\n", "", "", "else", ":", "\n", "            ", "img", "=", "read_image", "(", "img_path", ")", "\n", "\n", "", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "", "return", "img", ",", "pid", ",", "camid", ",", "domain", ",", "img_path", "\n", "", "", ""]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.datasets.dataset_loader.read_image": [[17, 33], ["os.exists", "IOError", "PIL.Image.open().convert", "print", "PIL.Image.open"], "function", ["None"], ["def", "read_image", "(", "img_path", ")", ":", "\n", "    ", "\"\"\"Keep reading image until succeed.\n    This can avoid IOError incurred by heavy IO process.\"\"\"", "\n", "got_img", "=", "False", "\n", "if", "not", "osp", ".", "exists", "(", "img_path", ")", ":", "\n", "        ", "raise", "IOError", "(", "\"{} does not exist\"", ".", "format", "(", "img_path", ")", ")", "\n", "", "while", "not", "got_img", ":", "\n", "        ", "try", ":", "\n", "            ", "img", "=", "Image", ".", "open", "(", "img_path", ")", ".", "convert", "(", "'RGB'", ")", "\n", "# img = cv2.imread(img_path, 1) #BGR", "\n", "# img = Image.fromarray(img)", "\n", "got_img", "=", "True", "\n", "", "except", "IOError", ":", "\n", "            ", "print", "(", "\"IOError incurred when reading '{}'. Will redo. Don't worry. Just chill.\"", ".", "format", "(", "img_path", ")", ")", "\n", "pass", "\n", "", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.datasets.__init__.get_names": [[35, 37], ["__factory.keys"], "function", ["None"], []], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.datasets.__init__.init_dataset": [[39, 43], ["__factory.keys", "KeyError"], "function", ["None"], []], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.datasets.aicity20_ReOri.AICity20ReOri.__init__": [[21, 51], ["aicity20.AICity20.__init__", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "aicity20_ReOri.AICity20ReOri._check_before_run", "aicity20_ReOri.AICity20ReOri._process_dir", "aicity20_ReOri.AICity20ReOri.get_imagedata_info", "aicity20_ReOri.AICity20ReOri.get_imagedata_info", "aicity20_ReOri.AICity20ReOri.get_imagedata_info", "print"], "methods", ["home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.solver.ranger.Ranger.__init__", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.datasets.aicity20_ReCam.AICity20ReCam._check_before_run", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.datasets.aicity20_ReType.AICity20ReType._process_dir", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.datasets.bases.BaseDataset.get_imagedata_info", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.datasets.bases.BaseDataset.get_imagedata_info", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.datasets.bases.BaseDataset.get_imagedata_info"], ["def", "__init__", "(", "self", ",", "root", "=", "''", ",", "verbose", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "AICity20", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dataset_dir", "=", "osp", ".", "join", "(", "root", ",", "self", ".", "dataset_dir", ")", "\n", "\n", "self", ".", "train_dir", "=", "osp", ".", "join", "(", "self", ".", "dataset_dir", ",", "'image_train'", ")", "\n", "self", ".", "list_train_path", "=", "osp", ".", "join", "(", "self", ".", "dataset_dir", ",", "'name_train.txt'", ")", "\n", "self", ".", "train_label_path", "=", "osp", ".", "join", "(", "self", ".", "dataset_dir", ",", "'train_label.xml'", ")", "\n", "self", ".", "_check_before_run", "(", ")", "\n", "\n", "train", "=", "self", ".", "_process_dir", "(", "self", ".", "train_dir", ",", "self", ".", "list_train_path", ",", "self", ".", "train_label_path", ",", "relabel", "=", "False", ")", "\n", "\n", "#train_num = 190000", "\n", "train_num", "=", "100000", "\n", "#train_num = 50000", "\n", "query_num", "=", "500", "\n", "gallery_num", "=", "5000", "\n", "query", "=", "train", "[", "train_num", ":", "train_num", "+", "query_num", "]", "\n", "gallery", "=", "train", "[", "train_num", "+", "query_num", ":", "train_num", "+", "query_num", "+", "gallery_num", "]", "\n", "train", "=", "train", "[", ":", "train_num", "]", "\n", "\n", "if", "verbose", ":", "\n", "            ", "print", "(", "\"=> AI CITY 2020 sim data loaded\"", ")", "\n", "\n", "", "self", ".", "train", "=", "train", "\n", "self", ".", "query", "=", "query", "\n", "self", ".", "gallery", "=", "gallery", "\n", "\n", "self", ".", "num_train_pids", ",", "self", ".", "num_train_imgs", ",", "self", ".", "num_train_cams", "=", "self", ".", "get_imagedata_info", "(", "self", ".", "train", ")", "\n", "self", ".", "num_query_pids", ",", "self", ".", "num_query_imgs", ",", "self", ".", "num_query_cams", "=", "self", ".", "get_imagedata_info", "(", "self", ".", "query", ")", "\n", "self", ".", "num_gallery_pids", ",", "self", ".", "num_gallery_imgs", ",", "self", ".", "num_gallery_cams", "=", "self", ".", "get_imagedata_info", "(", "self", ".", "gallery", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.datasets.aicity20_ReOri.AICity20ReOri._process_dir": [[52, 74], ["xml.parse", "xml.parse.find", "os.join", "os.join", "int", "int", "aicity20_ReOri.AICity20ReOri.append", "aicity20_ReOri.AICity20ReOri.relabel", "open", "f.readlines", "xml.XMLParser", "line.strip.strip.strip", "os.join", "os.join", "aicity20_ReOri.AICity20ReOri.append", "float"], "methods", ["home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.datasets.bases.BaseImageDataset.relabel"], ["", "def", "_process_dir", "(", "self", ",", "img_dir", ",", "list_path", ",", "label_path", ",", "relabel", "=", "False", ")", ":", "\n", "        ", "dataset", "=", "[", "]", "\n", "if", "label_path", ":", "\n", "            ", "tree", "=", "ET", ".", "parse", "(", "label_path", ",", "parser", "=", "ET", ".", "XMLParser", "(", "encoding", "=", "'utf-8'", ")", ")", "\n", "objs", "=", "tree", ".", "find", "(", "'Items'", ")", "\n", "for", "obj", "in", "objs", ":", "\n", "                ", "image_name", "=", "obj", ".", "attrib", "[", "'imageName'", "]", "\n", "img_path", "=", "osp", ".", "join", "(", "img_dir", ",", "image_name", ")", "\n", "pid", "=", "int", "(", "float", "(", "obj", ".", "attrib", "[", "'orientation'", "]", ")", "/", "10", ")", "\n", "camid", "=", "int", "(", "obj", ".", "attrib", "[", "'cameraID'", "]", "[", "1", ":", "]", ")", "\n", "dataset", ".", "append", "(", "(", "img_path", ",", "pid", ",", "camid", ")", ")", "\n", "", "if", "relabel", ":", "dataset", "=", "self", ".", "relabel", "(", "dataset", ")", "\n", "", "else", ":", "\n", "            ", "with", "open", "(", "list_path", ",", "'r'", ")", "as", "f", ":", "\n", "                ", "lines", "=", "f", ".", "readlines", "(", ")", "\n", "for", "line", "in", "lines", ":", "\n", "                    ", "line", "=", "line", ".", "strip", "(", ")", "\n", "img_path", "=", "osp", ".", "join", "(", "img_dir", ",", "line", ")", "\n", "pid", "=", "0", "\n", "camid", "=", "0", "\n", "dataset", ".", "append", "(", "(", "img_path", ",", "pid", ",", "camid", ")", ")", "\n", "", "", "", "return", "dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.datasets.msmt17.MSMT17.__init__": [[31, 57], ["bases.BaseImageDataset.__init__", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "msmt17.MSMT17._check_before_run", "msmt17.MSMT17._process_dir", "msmt17.MSMT17._process_dir", "msmt17.MSMT17._process_dir", "msmt17.MSMT17.get_imagedata_info", "msmt17.MSMT17.get_imagedata_info", "msmt17.MSMT17.get_imagedata_info", "print"], "methods", ["home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.solver.ranger.Ranger.__init__", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.datasets.aicity20_ReCam.AICity20ReCam._check_before_run", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.datasets.aicity20_ReType.AICity20ReType._process_dir", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.datasets.aicity20_ReType.AICity20ReType._process_dir", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.datasets.aicity20_ReType.AICity20ReType._process_dir", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.datasets.bases.BaseDataset.get_imagedata_info", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.datasets.bases.BaseDataset.get_imagedata_info", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.datasets.bases.BaseDataset.get_imagedata_info"], ["def", "__init__", "(", "self", ",", "root", "=", "''", ",", "verbose", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "MSMT17", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dataset_dir", "=", "osp", ".", "join", "(", "root", ",", "self", ".", "dataset_dir", ")", "\n", "self", ".", "train_dir", "=", "osp", ".", "join", "(", "self", ".", "dataset_dir", ",", "'MSMT17_V2/mask_train_v2'", ")", "\n", "self", ".", "test_dir", "=", "osp", ".", "join", "(", "self", ".", "dataset_dir", ",", "'MSMT17_V2/mask_test_v2'", ")", "\n", "self", ".", "list_train_path", "=", "osp", ".", "join", "(", "self", ".", "dataset_dir", ",", "'MSMT17_V2/list_train.txt'", ")", "\n", "self", ".", "list_val_path", "=", "osp", ".", "join", "(", "self", ".", "dataset_dir", ",", "'MSMT17_V2/list_val.txt'", ")", "\n", "self", ".", "list_query_path", "=", "osp", ".", "join", "(", "self", ".", "dataset_dir", ",", "'MSMT17_V2/list_query.txt'", ")", "\n", "self", ".", "list_gallery_path", "=", "osp", ".", "join", "(", "self", ".", "dataset_dir", ",", "'MSMT17_V2/list_gallery.txt'", ")", "\n", "\n", "self", ".", "_check_before_run", "(", ")", "\n", "train", "=", "self", ".", "_process_dir", "(", "self", ".", "train_dir", ",", "self", ".", "list_train_path", ")", "\n", "#val, num_val_pids, num_val_imgs = self._process_dir(self.train_dir, self.list_val_path)", "\n", "query", "=", "self", ".", "_process_dir", "(", "self", ".", "test_dir", ",", "self", ".", "list_query_path", ")", "\n", "gallery", "=", "self", ".", "_process_dir", "(", "self", ".", "test_dir", ",", "self", ".", "list_gallery_path", ")", "\n", "if", "verbose", ":", "\n", "            ", "print", "(", "\"=> MSMT17 loaded\"", ")", "\n", "#self.print_dataset_statistics(train, query, gallery)", "\n", "\n", "", "self", ".", "train", "=", "train", "\n", "self", ".", "query", "=", "query", "\n", "self", ".", "gallery", "=", "gallery", "\n", "\n", "self", ".", "num_train_pids", ",", "self", ".", "num_train_imgs", ",", "self", ".", "num_train_cams", "=", "self", ".", "get_imagedata_info", "(", "self", ".", "train", ")", "\n", "self", ".", "num_query_pids", ",", "self", ".", "num_query_imgs", ",", "self", ".", "num_query_cams", "=", "self", ".", "get_imagedata_info", "(", "self", ".", "query", ")", "\n", "self", ".", "num_gallery_pids", ",", "self", ".", "num_gallery_imgs", ",", "self", ".", "num_gallery_cams", "=", "self", ".", "get_imagedata_info", "(", "self", ".", "gallery", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.datasets.msmt17.MSMT17._check_before_run": [[58, 66], ["os.exists", "RuntimeError", "os.exists", "RuntimeError", "os.exists", "RuntimeError"], "methods", ["None"], ["", "def", "_check_before_run", "(", "self", ")", ":", "\n", "        ", "\"\"\"Check if all files are available before going deeper\"\"\"", "\n", "if", "not", "osp", ".", "exists", "(", "self", ".", "dataset_dir", ")", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"'{}' is not available\"", ".", "format", "(", "self", ".", "dataset_dir", ")", ")", "\n", "", "if", "not", "osp", ".", "exists", "(", "self", ".", "train_dir", ")", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"'{}' is not available\"", ".", "format", "(", "self", ".", "train_dir", ")", ")", "\n", "", "if", "not", "osp", ".", "exists", "(", "self", ".", "test_dir", ")", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"'{}' is not available\"", ".", "format", "(", "self", ".", "test_dir", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.datasets.msmt17.MSMT17._process_dir": [[67, 84], ["set", "enumerate", "enumerate", "open", "txt.readlines", "img_info.split", "int", "int", "os.join", "dataset.append", "set.add", "os.join.split"], "methods", ["None"], ["", "", "def", "_process_dir", "(", "self", ",", "dir_path", ",", "list_path", ")", ":", "\n", "        ", "with", "open", "(", "list_path", ",", "'r'", ")", "as", "txt", ":", "\n", "            ", "lines", "=", "txt", ".", "readlines", "(", ")", "\n", "", "dataset", "=", "[", "]", "\n", "pid_container", "=", "set", "(", ")", "\n", "for", "img_idx", ",", "img_info", "in", "enumerate", "(", "lines", ")", ":", "\n", "            ", "img_path", ",", "pid", "=", "img_info", ".", "split", "(", "' '", ")", "\n", "pid", "=", "int", "(", "pid", ")", "# no need to relabel", "\n", "camid", "=", "int", "(", "img_path", ".", "split", "(", "'_'", ")", "[", "2", "]", ")", "\n", "img_path", "=", "osp", ".", "join", "(", "dir_path", ",", "img_path", ")", "\n", "dataset", ".", "append", "(", "(", "img_path", ",", "pid", ",", "camid", ")", ")", "\n", "pid_container", ".", "add", "(", "pid", ")", "\n", "\n", "# check if pid starts from 0 and increments with 1", "\n", "", "for", "idx", ",", "pid", "in", "enumerate", "(", "pid_container", ")", ":", "\n", "            ", "assert", "idx", "==", "pid", ",", "\"See code comment for explanation\"", "\n", "", "return", "dataset", "", "", "", ""]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.datasets.aicity20_ReCam.AICity20ReCam.__init__": [[22, 64], ["bases.BaseImageDataset.__init__", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "aicity20_ReCam.AICity20ReCam._check_before_run", "aicity20_ReCam.AICity20ReCam._process_dir", "aicity20_ReCam.AICity20ReCam._process_dir", "aicity20_ReCam.AICity20ReCam._process_dir", "aicity20_ReCam.AICity20ReCam.relabel", "aicity20_ReCam.AICity20ReCam.get_imagedata_info", "aicity20_ReCam.AICity20ReCam.get_imagedata_info", "aicity20_ReCam.AICity20ReCam.get_imagedata_info", "aicity20_ReCam.AICity20ReCam._read_tracks", "aicity20_ReCam.AICity20ReCam._read_tracks", "print", "os.join", "os.join", "os.join", "os.join"], "methods", ["home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.solver.ranger.Ranger.__init__", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.datasets.aicity20_ReCam.AICity20ReCam._check_before_run", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.datasets.aicity20_ReType.AICity20ReType._process_dir", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.datasets.aicity20_ReType.AICity20ReType._process_dir", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.datasets.aicity20_ReType.AICity20ReType._process_dir", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.datasets.bases.BaseImageDataset.relabel", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.datasets.bases.BaseDataset.get_imagedata_info", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.datasets.bases.BaseDataset.get_imagedata_info", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.datasets.bases.BaseDataset.get_imagedata_info", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.datasets.bases.BaseImageDataset._read_tracks", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.datasets.bases.BaseImageDataset._read_tracks"], ["def", "__init__", "(", "self", ",", "root", "=", "''", ",", "verbose", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "AICity20ReCam", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dataset_dir", "=", "osp", ".", "join", "(", "root", ",", "self", ".", "dataset_dir", ")", "\n", "\n", "self", ".", "train_dir", "=", "osp", ".", "join", "(", "self", ".", "dataset_dir", ",", "'image_train'", ")", "\n", "self", ".", "query_dir", "=", "osp", ".", "join", "(", "self", ".", "dataset_dir", ",", "'image_query'", ")", "\n", "self", ".", "gallery_dir", "=", "osp", ".", "join", "(", "self", ".", "dataset_dir", ",", "'image_test'", ")", "\n", "\n", "train_list_path", "=", "osp", ".", "join", "(", "self", ".", "dataset_dir", ",", "'name_train.txt'", ")", "\n", "query_list_path", "=", "osp", ".", "join", "(", "self", ".", "dataset_dir", ",", "'name_query.txt'", ")", "\n", "gallery_list_path", "=", "osp", ".", "join", "(", "self", ".", "dataset_dir", ",", "'name_test.txt'", ")", "\n", "\n", "self", ".", "train_label_path", "=", "osp", ".", "join", "(", "self", ".", "dataset_dir", ",", "'train_label.xml'", ")", "\n", "self", ".", "query_label_path", "=", "osp", ".", "join", "(", "self", ".", "dataset_dir", ",", "'query_label.xml'", ")", "\n", "self", ".", "gallery_label_path", "=", "osp", ".", "join", "(", "self", ".", "dataset_dir", ",", "'test_label.xml'", ")", "\n", "\n", "self", ".", "_check_before_run", "(", ")", "\n", "\n", "train", "=", "self", ".", "_process_dir", "(", "self", ".", "train_dir", ",", "train_list_path", ",", "self", ".", "train_label_path", ",", "relabel", "=", "False", ")", "\n", "query", "=", "self", ".", "_process_dir", "(", "self", ".", "query_dir", ",", "query_list_path", ",", "None", ")", "\n", "gallery", "=", "self", ".", "_process_dir", "(", "self", ".", "gallery_dir", ",", "gallery_list_path", ",", "None", ")", "\n", "# train += self._process_dir(self.train_aug_dir, train_list_path, relabel=False)", "\n", "# train += self._process_dir(os.path.join(root, self.dataset_blend_dir, 'image_train')", "\n", "#                            , train_list_path, relabel=False)", "\n", "\n", "train", "=", "train", "+", "query", "+", "gallery", "\n", "\n", "train", "=", "self", ".", "relabel", "(", "train", ")", "\n", "if", "verbose", ":", "\n", "            ", "print", "(", "\"=> aicity trainval for ReCamID loaded\"", ")", "\n", "# self.print_dataset_statistics(train, query, gallery)", "\n", "\n", "", "self", ".", "train", "=", "train", "\n", "self", ".", "query", "=", "query", "\n", "self", ".", "gallery", "=", "gallery", "\n", "\n", "self", ".", "num_train_pids", ",", "self", ".", "num_train_imgs", ",", "self", ".", "num_train_cams", "=", "self", ".", "get_imagedata_info", "(", "self", ".", "train", ")", "\n", "self", ".", "num_query_pids", ",", "self", ".", "num_query_imgs", ",", "self", ".", "num_query_cams", "=", "self", ".", "get_imagedata_info", "(", "self", ".", "query", ")", "\n", "self", ".", "num_gallery_pids", ",", "self", ".", "num_gallery_imgs", ",", "self", ".", "num_gallery_cams", "=", "self", ".", "get_imagedata_info", "(", "self", ".", "gallery", ")", "\n", "\n", "self", ".", "train_tracks", "=", "self", ".", "_read_tracks", "(", "osp", ".", "join", "(", "self", ".", "dataset_dir", ",", "'train_track.txt'", ")", ")", "\n", "self", ".", "test_tracks", "=", "self", ".", "_read_tracks", "(", "osp", ".", "join", "(", "self", ".", "dataset_dir", ",", "'test_track.txt'", ")", ")", "\n", "# import ipdb; ipdb.set_trace()", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.datasets.aicity20_ReCam.AICity20ReCam._check_before_run": [[65, 75], ["os.exists", "os.exists", "RuntimeError", "os.exists", "os.exists", "RuntimeError", "os.exists", "os.exists", "RuntimeError", "os.exists", "os.exists", "RuntimeError"], "methods", ["None"], ["", "def", "_check_before_run", "(", "self", ")", ":", "\n", "        ", "\"\"\"Check if all files are available before going deeper\"\"\"", "\n", "if", "not", "osp", ".", "exists", "(", "self", ".", "dataset_dir", ")", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"'{}' is not available\"", ".", "format", "(", "self", ".", "dataset_dir", ")", ")", "\n", "", "if", "not", "osp", ".", "exists", "(", "self", ".", "train_dir", ")", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"'{}' is not available\"", ".", "format", "(", "self", ".", "train_dir", ")", ")", "\n", "", "if", "not", "osp", ".", "exists", "(", "self", ".", "query_dir", ")", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"'{}' is not available\"", ".", "format", "(", "self", ".", "query_dir", ")", ")", "\n", "", "if", "not", "osp", ".", "exists", "(", "self", ".", "gallery_dir", ")", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"'{}' is not available\"", ".", "format", "(", "self", ".", "gallery_dir", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.datasets.aicity20_ReCam.AICity20ReCam._process_dir": [[76, 100], ["xml.parse", "xml.parse.find", "os.join", "os.join", "int", "int", "aicity20_ReCam.AICity20ReCam.append", "aicity20_ReCam.AICity20ReCam.relabel", "open", "f.readlines", "xml.XMLParser", "line.strip.strip.strip", "os.join", "os.join", "aicity20_ReCam.AICity20ReCam.append"], "methods", ["home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.datasets.bases.BaseImageDataset.relabel"], ["", "", "def", "_process_dir", "(", "self", ",", "img_dir", ",", "list_path", ",", "label_path", ",", "relabel", "=", "False", ")", ":", "\n", "        ", "dataset", "=", "[", "]", "\n", "if", "label_path", ":", "\n", "            ", "tree", "=", "ET", ".", "parse", "(", "label_path", ",", "parser", "=", "ET", ".", "XMLParser", "(", "encoding", "=", "'utf-8'", ")", ")", "\n", "objs", "=", "tree", ".", "find", "(", "'Items'", ")", "\n", "for", "obj", "in", "objs", ":", "\n", "                ", "image_name", "=", "obj", ".", "attrib", "[", "'imageName'", "]", "\n", "img_path", "=", "osp", ".", "join", "(", "img_dir", ",", "image_name", ")", "\n", "pid", "=", "int", "(", "obj", ".", "attrib", "[", "'cameraID'", "]", "[", "1", ":", "]", ")", "\n", "camid", "=", "int", "(", "obj", ".", "attrib", "[", "'cameraID'", "]", "[", "1", ":", "]", ")", "\n", "domain", "=", "0", "\n", "dataset", ".", "append", "(", "(", "img_path", ",", "pid", ",", "camid", ",", "domain", ")", ")", "\n", "", "if", "relabel", ":", "dataset", "=", "self", ".", "relabel", "(", "dataset", ")", "\n", "", "else", ":", "\n", "            ", "with", "open", "(", "list_path", ",", "'r'", ")", "as", "f", ":", "\n", "                ", "lines", "=", "f", ".", "readlines", "(", ")", "\n", "for", "line", "in", "lines", ":", "\n", "                    ", "line", "=", "line", ".", "strip", "(", ")", "\n", "img_path", "=", "osp", ".", "join", "(", "img_dir", ",", "line", ")", "\n", "pid", "=", "0", "\n", "camid", "=", "0", "\n", "domain", "=", "0", "\n", "dataset", ".", "append", "(", "(", "img_path", ",", "pid", ",", "camid", ",", "domain", ")", ")", "\n", "", "", "", "return", "dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.datasets.track3_h5.Track3.__init__": [[25, 50], ["bases.BaseImageDataset.__init__", "os.join", "os.join", "track3_h5.Track3.relabel", "track3_h5.Track3._read_tracks", "track3_h5.Track3._read_tracks", "track3_h5.Track3.get_imagedata_info", "track3_h5.Track3.get_imagedata_info", "track3_h5.Track3.get_imagedata_info", "os.join", "os.join", "track3_h5.Track3._process_dir", "track3_h5.Track3.append", "print", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.solver.ranger.Ranger.__init__", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.datasets.bases.BaseImageDataset.relabel", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.datasets.bases.BaseImageDataset._read_tracks", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.datasets.bases.BaseImageDataset._read_tracks", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.datasets.bases.BaseDataset.get_imagedata_info", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.datasets.bases.BaseDataset.get_imagedata_info", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.datasets.bases.BaseDataset.get_imagedata_info", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.datasets.aicity20_ReType.AICity20ReType._process_dir"], ["def", "__init__", "(", "self", ",", "root", "=", "''", ",", "verbose", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "Track3", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# import ipdb; ipdb.set_trace()", "\n", "self", ".", "img_dir", "=", "osp", ".", "join", "(", "self", ".", "dataset_dir", ",", "'JPEGImages'", ")", "\n", "train", "=", "[", "]", "\n", "for", "h5_file_name", "in", "h5_files", ":", "\n", "            ", "self", ".", "data_file", "=", "osp", ".", "join", "(", "self", ".", "dataset_dir", ",", "h5_file_name", ")", "\n", "data_", "=", "self", ".", "_process_dir", "(", "self", ".", "img_dir", ",", "self", ".", "data_file", ")", "\n", "train", ".", "append", "(", "data_", ")", "\n", "\n", "", "train", "=", "self", ".", "relabel", "(", "train", ")", "\n", "if", "verbose", ":", "\n", "            ", "print", "(", "\"=> AI CITY 2020 data loaded\"", ")", "\n", "#self.print_dataset_statistics(train, query, gallery)", "\n", "\n", "", "self", ".", "train", "=", "train", "\n", "# self.query = query", "\n", "# self.gallery = gallery", "\n", "\n", "self", ".", "train_tracks", "=", "self", ".", "_read_tracks", "(", "os", ".", "path", ".", "join", "(", "self", ".", "dataset_dir", ",", "'train_track.txt'", ")", ")", "\n", "self", ".", "test_tracks", "=", "self", ".", "_read_tracks", "(", "os", ".", "path", ".", "join", "(", "self", ".", "dataset_dir", ",", "'test_track.txt'", ")", ")", "\n", "\n", "self", ".", "num_train_pids", ",", "self", ".", "num_train_imgs", ",", "self", ".", "num_train_cams", "=", "self", ".", "get_imagedata_info", "(", "self", ".", "train", ")", "\n", "self", ".", "num_query_pids", ",", "self", ".", "num_query_imgs", ",", "self", ".", "num_query_cams", "=", "self", ".", "get_imagedata_info", "(", "self", ".", "query", ")", "\n", "self", ".", "num_gallery_pids", ",", "self", ".", "num_gallery_imgs", ",", "self", ".", "num_gallery_cams", "=", "self", ".", "get_imagedata_info", "(", "self", ".", "gallery", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.datasets.track3_h5.Track3._process_dir": [[51, 78], ["xml.parse", "xml.parse.find", "os.join", "os.join", "int", "int", "track3_h5.Track3.append", "track3_h5.Track3.relabel", "open", "f.readlines", "xml.XMLParser", "line.strip.strip.strip", "os.join", "os.join", "track3_h5.Track3.append"], "methods", ["home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.datasets.bases.BaseImageDataset.relabel"], ["", "def", "_process_dir", "(", "self", ",", "img_dir", ",", "data_file", ",", "relabel", "=", "False", ")", ":", "\n", "        ", "dataset", "=", "[", "]", "\n", "\n", "\n", "\n", "\n", "if", "label_path", ":", "\n", "            ", "tree", "=", "ET", ".", "parse", "(", "label_path", ",", "parser", "=", "ET", ".", "XMLParser", "(", "encoding", "=", "'utf-8'", ")", ")", "\n", "objs", "=", "tree", ".", "find", "(", "'Items'", ")", "\n", "for", "obj", "in", "objs", ":", "\n", "                ", "image_name", "=", "obj", ".", "attrib", "[", "'imageName'", "]", "\n", "img_path", "=", "osp", ".", "join", "(", "img_dir", ",", "image_name", ")", "\n", "pid", "=", "int", "(", "obj", ".", "attrib", "[", "'vehicleID'", "]", ")", "\n", "camid", "=", "int", "(", "obj", ".", "attrib", "[", "'cameraID'", "]", "[", "1", ":", "]", ")", "\n", "dataset", ".", "append", "(", "(", "img_path", ",", "pid", ",", "camid", ")", ")", "\n", "#dataset.append((img_path, camid, pid))", "\n", "", "if", "relabel", ":", "dataset", "=", "self", ".", "relabel", "(", "dataset", ")", "\n", "", "else", ":", "\n", "            ", "with", "open", "(", "list_path", ",", "'r'", ")", "as", "f", ":", "\n", "                ", "lines", "=", "f", ".", "readlines", "(", ")", "\n", "for", "line", "in", "lines", ":", "\n", "                    ", "line", "=", "line", ".", "strip", "(", ")", "\n", "img_path", "=", "osp", ".", "join", "(", "img_dir", ",", "line", ")", "\n", "pid", "=", "0", "\n", "camid", "=", "0", "\n", "dataset", ".", "append", "(", "(", "img_path", ",", "pid", ",", "camid", ")", ")", "\n", "", "", "", "return", "dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.datasets.aicity20_ReType.AICity20ReType.__init__": [[21, 51], ["aicity20.AICity20.__init__", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "aicity20_ReType.AICity20ReType._check_before_run", "aicity20_ReType.AICity20ReType._process_dir", "aicity20_ReType.AICity20ReType.get_imagedata_info", "aicity20_ReType.AICity20ReType.get_imagedata_info", "aicity20_ReType.AICity20ReType.get_imagedata_info", "print"], "methods", ["home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.solver.ranger.Ranger.__init__", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.datasets.aicity20_ReCam.AICity20ReCam._check_before_run", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.datasets.aicity20_ReType.AICity20ReType._process_dir", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.datasets.bases.BaseDataset.get_imagedata_info", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.datasets.bases.BaseDataset.get_imagedata_info", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.datasets.bases.BaseDataset.get_imagedata_info"], ["def", "__init__", "(", "self", ",", "root", "=", "''", ",", "verbose", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "AICity20", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dataset_dir", "=", "osp", ".", "join", "(", "root", ",", "self", ".", "dataset_dir", ")", "\n", "\n", "self", ".", "train_dir", "=", "osp", ".", "join", "(", "self", ".", "dataset_dir", ",", "'image_train'", ")", "\n", "self", ".", "list_train_path", "=", "osp", ".", "join", "(", "self", ".", "dataset_dir", ",", "'name_train.txt'", ")", "\n", "self", ".", "train_label_path", "=", "osp", ".", "join", "(", "self", ".", "dataset_dir", ",", "'train_label.xml'", ")", "\n", "self", ".", "_check_before_run", "(", ")", "\n", "\n", "train", "=", "self", ".", "_process_dir", "(", "self", ".", "train_dir", ",", "self", ".", "list_train_path", ",", "self", ".", "train_label_path", ",", "relabel", "=", "False", ")", "\n", "\n", "train_num", "=", "180000", "\n", "#train_num = 100000", "\n", "#train_num = 50000", "\n", "query_num", "=", "500", "\n", "gallery_num", "=", "5000", "\n", "query", "=", "train", "[", "train_num", ":", "train_num", "+", "query_num", "]", "\n", "gallery", "=", "train", "[", "train_num", "+", "query_num", ":", "train_num", "+", "query_num", "+", "gallery_num", "]", "\n", "train", "=", "train", "[", ":", "train_num", "]", "\n", "\n", "if", "verbose", ":", "\n", "            ", "print", "(", "\"=> AI CITY 2020 sim data loaded\"", ")", "\n", "\n", "", "self", ".", "train", "=", "train", "\n", "self", ".", "query", "=", "query", "\n", "self", ".", "gallery", "=", "gallery", "\n", "\n", "self", ".", "num_train_pids", ",", "self", ".", "num_train_imgs", ",", "self", ".", "num_train_cams", "=", "self", ".", "get_imagedata_info", "(", "self", ".", "train", ")", "\n", "self", ".", "num_query_pids", ",", "self", ".", "num_query_imgs", ",", "self", ".", "num_query_cams", "=", "self", ".", "get_imagedata_info", "(", "self", ".", "query", ")", "\n", "self", ".", "num_gallery_pids", ",", "self", ".", "num_gallery_imgs", ",", "self", ".", "num_gallery_cams", "=", "self", ".", "get_imagedata_info", "(", "self", ".", "gallery", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.datasets.aicity20_ReType.AICity20ReType._process_dir": [[52, 74], ["xml.parse", "xml.parse.find", "os.join", "os.join", "int", "int", "aicity20_ReType.AICity20ReType.append", "aicity20_ReType.AICity20ReType.relabel", "open", "f.readlines", "xml.XMLParser", "line.strip.strip.strip", "os.join", "os.join", "aicity20_ReType.AICity20ReType.append"], "methods", ["home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.datasets.bases.BaseImageDataset.relabel"], ["", "def", "_process_dir", "(", "self", ",", "img_dir", ",", "list_path", ",", "label_path", ",", "relabel", "=", "False", ")", ":", "\n", "        ", "dataset", "=", "[", "]", "\n", "if", "label_path", ":", "\n", "            ", "tree", "=", "ET", ".", "parse", "(", "label_path", ",", "parser", "=", "ET", ".", "XMLParser", "(", "encoding", "=", "'utf-8'", ")", ")", "\n", "objs", "=", "tree", ".", "find", "(", "'Items'", ")", "\n", "for", "obj", "in", "objs", ":", "\n", "                ", "image_name", "=", "obj", ".", "attrib", "[", "'imageName'", "]", "\n", "img_path", "=", "osp", ".", "join", "(", "img_dir", ",", "image_name", ")", "\n", "pid", "=", "int", "(", "obj", ".", "attrib", "[", "'typeID'", "]", ")", "\n", "camid", "=", "int", "(", "obj", ".", "attrib", "[", "'cameraID'", "]", "[", "1", ":", "]", ")", "\n", "dataset", ".", "append", "(", "(", "img_path", ",", "pid", ",", "camid", ")", ")", "\n", "", "if", "relabel", ":", "dataset", "=", "self", ".", "relabel", "(", "dataset", ")", "\n", "", "else", ":", "\n", "            ", "with", "open", "(", "list_path", ",", "'r'", ")", "as", "f", ":", "\n", "                ", "lines", "=", "f", ".", "readlines", "(", ")", "\n", "for", "line", "in", "lines", ":", "\n", "                    ", "line", "=", "line", ".", "strip", "(", ")", "\n", "img_path", "=", "osp", ".", "join", "(", "img_dir", ",", "line", ")", "\n", "pid", "=", "0", "\n", "camid", "=", "0", "\n", "dataset", ".", "append", "(", "(", "img_path", ",", "pid", ",", "camid", ")", ")", "\n", "", "", "", "return", "dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.samplers.triplet_sampler.MPerClassSampler.__init__": [[26, 35], ["collections.defaultdict", "enumerate", "list", "triplet_sampler.MPerClassSampler.index_dic[].append", "triplet_sampler.MPerClassSampler.index_dic.keys"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "data_source", ",", "batch_size", ",", "num_instances", ")", ":", "\n", "        ", "self", ".", "data_source", "=", "data_source", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "num_instances", "=", "num_instances", "\n", "self", ".", "num_pids_per_batch", "=", "self", ".", "batch_size", "//", "self", ".", "num_instances", "\n", "self", ".", "index_dic", "=", "defaultdict", "(", "list", ")", "\n", "for", "index", ",", "(", "_", ",", "pid", ",", "_", ")", "in", "enumerate", "(", "self", ".", "data_source", ")", ":", "\n", "            ", "self", ".", "index_dic", "[", "pid", "]", ".", "append", "(", "index", ")", "\n", "", "self", ".", "pids", "=", "list", "(", "self", ".", "index_dic", ".", "keys", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.samplers.triplet_sampler.MPerClassSampler.__iter__": [[36, 66], ["collections.defaultdict", "copy.deepcopy", "len", "iter", "copy.deepcopy", "random.shuffle", "len", "random.sample", "len", "numpy.random.choice", "numpy.random.choice", "batch_idxs_dict[].pop.append", "batch_idxs_dict[].pop", "final_idxs.extend", "len", "batch_idxs_dict[].append", "len", "copy.deepcopy.remove"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "batch_idxs_dict", "=", "defaultdict", "(", "list", ")", "\n", "\n", "for", "pid", "in", "self", ".", "pids", ":", "\n", "            ", "idxs", "=", "copy", ".", "deepcopy", "(", "self", ".", "index_dic", "[", "pid", "]", ")", "\n", "if", "len", "(", "idxs", ")", "<", "self", ".", "num_instances", ":", "\n", "                ", "idxs", "=", "np", ".", "random", ".", "choice", "(", "idxs", ",", "size", "=", "self", ".", "num_instances", ",", "replace", "=", "True", ")", "\n", "", "else", ":", "\n", "                ", "idxs", "=", "np", ".", "random", ".", "choice", "(", "idxs", ",", "size", "=", "self", ".", "num_instances", ",", "replace", "=", "False", ")", "\n", "", "random", ".", "shuffle", "(", "idxs", ")", "\n", "batch_idxs", "=", "[", "]", "\n", "for", "idx", "in", "idxs", ":", "\n", "                ", "batch_idxs", ".", "append", "(", "idx", ")", "\n", "if", "len", "(", "batch_idxs", ")", "==", "self", ".", "num_instances", ":", "\n", "                    ", "batch_idxs_dict", "[", "pid", "]", ".", "append", "(", "batch_idxs", ")", "\n", "batch_idxs", "=", "[", "]", "\n", "\n", "", "", "", "avai_pids", "=", "copy", ".", "deepcopy", "(", "self", ".", "pids", ")", "\n", "final_idxs", "=", "[", "]", "\n", "\n", "while", "len", "(", "avai_pids", ")", ">=", "self", ".", "num_pids_per_batch", ":", "\n", "            ", "selected_pids", "=", "random", ".", "sample", "(", "avai_pids", ",", "self", ".", "num_pids_per_batch", ")", "\n", "for", "pid", "in", "selected_pids", ":", "\n", "                ", "batch_idxs", "=", "batch_idxs_dict", "[", "pid", "]", ".", "pop", "(", "0", ")", "\n", "final_idxs", ".", "extend", "(", "batch_idxs", ")", "\n", "if", "len", "(", "batch_idxs_dict", "[", "pid", "]", ")", "==", "0", ":", "\n", "                    ", "avai_pids", ".", "remove", "(", "pid", ")", "\n", "\n", "", "", "", "self", ".", "length", "=", "len", "(", "final_idxs", ")", "\n", "return", "iter", "(", "final_idxs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.samplers.triplet_sampler.MPerClassSampler.__len__": [[67, 69], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "length", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.samplers.triplet_sampler.RandomIdentitySampler.__init__": [[81, 99], ["collections.defaultdict", "enumerate", "list", "triplet_sampler.RandomIdentitySampler.index_dic[].append", "triplet_sampler.RandomIdentitySampler.index_dic.keys", "len"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "data_source", ",", "batch_size", ",", "num_instances", ")", ":", "\n", "        ", "self", ".", "data_source", "=", "data_source", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "num_instances", "=", "num_instances", "\n", "self", ".", "num_pids_per_batch", "=", "self", ".", "batch_size", "//", "self", ".", "num_instances", "\n", "self", ".", "index_dic", "=", "defaultdict", "(", "list", ")", "\n", "for", "index", ",", "(", "_", ",", "pid", ",", "_", ",", "_", ")", "in", "enumerate", "(", "self", ".", "data_source", ")", ":", "\n", "            ", "self", ".", "index_dic", "[", "pid", "]", ".", "append", "(", "index", ")", "\n", "", "self", ".", "pids", "=", "list", "(", "self", ".", "index_dic", ".", "keys", "(", ")", ")", "\n", "\n", "# estimate number of examples in an epoch", "\n", "self", ".", "length", "=", "0", "\n", "for", "pid", "in", "self", ".", "pids", ":", "\n", "            ", "idxs", "=", "self", ".", "index_dic", "[", "pid", "]", "\n", "num", "=", "len", "(", "idxs", ")", "\n", "if", "num", "<", "self", ".", "num_instances", ":", "\n", "                ", "num", "=", "self", ".", "num_instances", "\n", "", "self", ".", "length", "+=", "num", "-", "num", "%", "self", ".", "num_instances", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.samplers.triplet_sampler.RandomIdentitySampler.__iter__": [[100, 129], ["collections.defaultdict", "copy.deepcopy", "len", "iter", "copy.deepcopy", "random.shuffle", "len", "random.sample", "len", "numpy.random.choice", "batch_idxs_dict[].pop.append", "batch_idxs_dict[].pop", "final_idxs.extend", "len", "batch_idxs_dict[].append", "len", "copy.deepcopy.remove"], "methods", ["None"], ["", "", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "batch_idxs_dict", "=", "defaultdict", "(", "list", ")", "\n", "\n", "for", "pid", "in", "self", ".", "pids", ":", "\n", "            ", "idxs", "=", "copy", ".", "deepcopy", "(", "self", ".", "index_dic", "[", "pid", "]", ")", "\n", "if", "len", "(", "idxs", ")", "<", "self", ".", "num_instances", ":", "\n", "                ", "idxs", "=", "np", ".", "random", ".", "choice", "(", "idxs", ",", "size", "=", "self", ".", "num_instances", ",", "replace", "=", "True", ")", "\n", "", "random", ".", "shuffle", "(", "idxs", ")", "\n", "batch_idxs", "=", "[", "]", "\n", "for", "idx", "in", "idxs", ":", "\n", "                ", "batch_idxs", ".", "append", "(", "idx", ")", "\n", "if", "len", "(", "batch_idxs", ")", "==", "self", ".", "num_instances", ":", "\n", "                    ", "batch_idxs_dict", "[", "pid", "]", ".", "append", "(", "batch_idxs", ")", "\n", "batch_idxs", "=", "[", "]", "\n", "\n", "", "", "", "avai_pids", "=", "copy", ".", "deepcopy", "(", "self", ".", "pids", ")", "\n", "final_idxs", "=", "[", "]", "\n", "\n", "while", "len", "(", "avai_pids", ")", ">=", "self", ".", "num_pids_per_batch", ":", "\n", "            ", "selected_pids", "=", "random", ".", "sample", "(", "avai_pids", ",", "self", ".", "num_pids_per_batch", ")", "\n", "for", "pid", "in", "selected_pids", ":", "\n", "                ", "batch_idxs", "=", "batch_idxs_dict", "[", "pid", "]", ".", "pop", "(", "0", ")", "\n", "final_idxs", ".", "extend", "(", "batch_idxs", ")", "\n", "if", "len", "(", "batch_idxs_dict", "[", "pid", "]", ")", "==", "0", ":", "\n", "                    ", "avai_pids", ".", "remove", "(", "pid", ")", "\n", "\n", "", "", "", "self", ".", "length", "=", "len", "(", "final_idxs", ")", "\n", "# print('final_idxs: ', final_idxs)", "\n", "return", "iter", "(", "final_idxs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.samplers.triplet_sampler.RandomIdentitySampler.__len__": [[130, 132], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "length", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.samplers.triplet_sampler.RandomIdentityCrossDomainSampler.__init__": [[145, 173], ["collections.defaultdict", "collections.defaultdict", "enumerate", "list", "list", "triplet_sampler.RandomIdentityCrossDomainSampler.index_dic_real.keys", "triplet_sampler.RandomIdentityCrossDomainSampler.index_dic_syn.keys", "len", "triplet_sampler.RandomIdentityCrossDomainSampler.index_dic_real[].append", "triplet_sampler.RandomIdentityCrossDomainSampler.index_dic_syn[].append"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "data_source", ",", "batch_size", ",", "num_instances", ")", ":", "\n", "        ", "self", ".", "data_source", "=", "data_source", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "num_instances", "=", "num_instances", "\n", "self", ".", "num_pids_per_batch", "=", "self", ".", "batch_size", "//", "self", ".", "num_instances", "\n", "\n", "self", ".", "index_dic_real", "=", "defaultdict", "(", "list", ")", "\n", "self", ".", "index_dic_syn", "=", "defaultdict", "(", "list", ")", "\n", "\n", "for", "index", ",", "(", "_", ",", "pid", ",", "_", ",", "domain", ")", "in", "enumerate", "(", "self", ".", "data_source", ")", ":", "\n", "            ", "if", "domain", "==", "'real'", ":", "\n", "                ", "self", ".", "index_dic_real", "[", "pid", "]", ".", "append", "(", "index", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "index_dic_syn", "[", "pid", "]", ".", "append", "(", "index", ")", "\n", "\n", "# list contain ids of real and synthetic data", "\n", "", "", "self", ".", "pids_real", "=", "list", "(", "self", ".", "index_dic_real", ".", "keys", "(", ")", ")", "\n", "self", ".", "pids_syn", "=", "list", "(", "self", ".", "index_dic_syn", ".", "keys", "(", ")", ")", "\n", "self", ".", "pids", "=", "self", ".", "pids_real", "+", "self", ".", "pids_syn", "\n", "\n", "# estimate number of examples in an epoch", "\n", "self", ".", "length", "=", "0", "\n", "for", "pid", "in", "self", ".", "pids_real", ":", "\n", "            ", "idxs", "=", "self", ".", "index_dic_real", "[", "pid", "]", "\n", "num", "=", "len", "(", "idxs", ")", "\n", "if", "num", "<", "self", ".", "num_instances", ":", "\n", "                ", "num", "=", "self", ".", "num_instances", "\n", "", "self", ".", "length", "+=", "num", "-", "num", "%", "self", ".", "num_instances", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.samplers.triplet_sampler.RandomIdentityCrossDomainSampler.__iter__": [[174, 227], ["collections.defaultdict", "collections.defaultdict", "copy.deepcopy", "copy.deepcopy", "len", "iter", "copy.deepcopy", "random.shuffle", "copy.deepcopy", "random.shuffle", "len", "random.sample", "random.sample", "zip", "len", "numpy.random.choice", "batch_idxs.append", "len", "numpy.random.choice", "batch_idxs.append", "batch_idxs_dict_real[].pop", "final_idxs.extend", "final_idxs.extend", "len", "batch_idxs_dict_real[].append", "len", "batch_idxs_dict_syn[].append", "len", "copy.deepcopy.remove", "random.randint", "len"], "methods", ["None"], ["", "", "def", "__iter__", "(", "self", ")", ":", "\n", "\n", "# get batch index for real data", "\n", "        ", "batch_idxs_dict_real", "=", "defaultdict", "(", "list", ")", "\n", "for", "pid", "in", "self", ".", "pids_real", ":", "\n", "            ", "idxs", "=", "copy", ".", "deepcopy", "(", "self", ".", "index_dic_real", "[", "pid", "]", ")", "\n", "if", "len", "(", "idxs", ")", "<", "self", ".", "num_instances", ":", "\n", "                ", "idxs", "=", "np", ".", "random", ".", "choice", "(", "idxs", ",", "size", "=", "self", ".", "num_instances", ",", "replace", "=", "True", ")", "\n", "", "random", ".", "shuffle", "(", "idxs", ")", "\n", "batch_idxs", "=", "[", "]", "\n", "for", "idx", "in", "idxs", ":", "\n", "                ", "batch_idxs", ".", "append", "(", "idx", ")", "\n", "if", "len", "(", "batch_idxs", ")", "==", "self", ".", "num_instances", ":", "\n", "                    ", "batch_idxs_dict_real", "[", "pid", "]", ".", "append", "(", "batch_idxs", ")", "\n", "batch_idxs", "=", "[", "]", "\n", "\n", "# get batch index for syn data", "\n", "", "", "", "batch_idxs_dict_syn", "=", "defaultdict", "(", "list", ")", "\n", "for", "pid", "in", "self", ".", "pids_syn", ":", "\n", "            ", "idxs", "=", "copy", ".", "deepcopy", "(", "self", ".", "index_dic_syn", "[", "pid", "]", ")", "\n", "if", "len", "(", "idxs", ")", "<", "self", ".", "num_instances", ":", "\n", "                ", "idxs", "=", "np", ".", "random", ".", "choice", "(", "idxs", ",", "size", "=", "self", ".", "num_instances", ",", "replace", "=", "True", ")", "\n", "", "random", ".", "shuffle", "(", "idxs", ")", "\n", "batch_idxs", "=", "[", "]", "\n", "for", "idx", "in", "idxs", ":", "\n", "                ", "batch_idxs", ".", "append", "(", "idx", ")", "\n", "if", "len", "(", "batch_idxs", ")", "==", "self", ".", "num_instances", ":", "\n", "                    ", "batch_idxs_dict_syn", "[", "pid", "]", ".", "append", "(", "batch_idxs", ")", "\n", "batch_idxs", "=", "[", "]", "\n", "\n", "#", "\n", "", "", "", "avai_pids_real", "=", "copy", ".", "deepcopy", "(", "self", ".", "pids_real", ")", "\n", "avai_pids_syn", "=", "copy", ".", "deepcopy", "(", "self", ".", "pids_syn", ")", "\n", "\n", "final_idxs", "=", "[", "]", "\n", "\n", "while", "len", "(", "avai_pids_real", ")", ">=", "self", ".", "num_pids_per_batch", "//", "2", ":", "\n", "            ", "selected_pids_real", "=", "random", ".", "sample", "(", "avai_pids_real", ",", "self", ".", "num_pids_per_batch", "//", "2", ")", "\n", "selected_pids_syn", "=", "random", ".", "sample", "(", "avai_pids_syn", ",", "self", ".", "num_pids_per_batch", "//", "2", ")", "\n", "\n", "for", "pid_real", ",", "pid_syn", "in", "zip", "(", "selected_pids_real", ",", "selected_pids_syn", ")", ":", "\n", "                ", "batch_idxs_real", "=", "batch_idxs_dict_real", "[", "pid_real", "]", ".", "pop", "(", "0", ")", "\n", "final_idxs", ".", "extend", "(", "batch_idxs_real", ")", "\n", "\n", "batch_idxs_syn", "=", "batch_idxs_dict_syn", "[", "pid_syn", "]", "[", "random", ".", "randint", "(", "0", ",", "len", "(", "batch_idxs_dict_syn", "[", "pid_syn", "]", ")", "-", "1", ")", "]", "\n", "final_idxs", ".", "extend", "(", "batch_idxs_syn", ")", "\n", "\n", "if", "len", "(", "batch_idxs_dict_real", "[", "pid_real", "]", ")", "==", "0", ":", "\n", "                    ", "avai_pids_real", ".", "remove", "(", "pid_real", ")", "\n", "\n", "", "", "", "self", ".", "length", "=", "len", "(", "final_idxs", ")", "\n", "# print('final_idxs: ', final_idxs)", "\n", "return", "iter", "(", "final_idxs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.samplers.triplet_sampler.RandomIdentityCrossDomainSampler.__len__": [[228, 230], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "length", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.samplers.triplet_sampler.RandomIdentitySampler_alignedreid.__init__": [[244, 252], ["collections.defaultdict", "enumerate", "list", "len", "triplet_sampler.RandomIdentitySampler_alignedreid.index_dic[].append", "triplet_sampler.RandomIdentitySampler_alignedreid.index_dic.keys"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "data_source", ",", "num_instances", ")", ":", "\n", "        ", "self", ".", "data_source", "=", "data_source", "\n", "self", ".", "num_instances", "=", "num_instances", "\n", "self", ".", "index_dic", "=", "defaultdict", "(", "list", ")", "\n", "for", "index", ",", "(", "_", ",", "pid", ",", "_", ")", "in", "enumerate", "(", "data_source", ")", ":", "\n", "            ", "self", ".", "index_dic", "[", "pid", "]", ".", "append", "(", "index", ")", "\n", "", "self", ".", "pids", "=", "list", "(", "self", ".", "index_dic", ".", "keys", "(", ")", ")", "\n", "self", ".", "num_identities", "=", "len", "(", "self", ".", "pids", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.samplers.triplet_sampler.RandomIdentitySampler_alignedreid.__iter__": [[253, 263], ["torch.randperm", "iter", "numpy.random.choice", "ret.extend", "len"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "indices", "=", "torch", ".", "randperm", "(", "self", ".", "num_identities", ")", "\n", "ret", "=", "[", "]", "\n", "for", "i", "in", "indices", ":", "\n", "            ", "pid", "=", "self", ".", "pids", "[", "i", "]", "\n", "t", "=", "self", ".", "index_dic", "[", "pid", "]", "\n", "replace", "=", "False", "if", "len", "(", "t", ")", ">=", "self", ".", "num_instances", "else", "True", "\n", "t", "=", "np", ".", "random", ".", "choice", "(", "t", ",", "size", "=", "self", ".", "num_instances", ",", "replace", "=", "replace", ")", "\n", "ret", ".", "extend", "(", "t", ")", "\n", "", "return", "iter", "(", "ret", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.samplers.triplet_sampler.RandomIdentitySampler_alignedreid.__len__": [[264, 266], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "num_identities", "*", "self", ".", "num_instances", "\n", "", "", ""]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.transforms.transforms.RandomErasing.__init__": [[27, 33], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "probability", "=", "0.5", ",", "sl", "=", "0.02", ",", "sh", "=", "0.4", ",", "r1", "=", "0.3", ",", "mean", "=", "(", "0.4914", ",", "0.4822", ",", "0.4465", ")", ")", ":", "\n", "        ", "self", ".", "probability", "=", "probability", "\n", "self", ".", "mean", "=", "mean", "\n", "self", ".", "sl", "=", "sl", "\n", "self", ".", "sh", "=", "sh", "\n", "self", ".", "r1", "=", "r1", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.transforms.transforms.RandomErasing.__call__": [[34, 60], ["range", "random.uniform", "random.uniform", "int", "int", "random.uniform", "round", "round", "random.randint", "random.randint", "img.size", "img.size", "math.sqrt", "math.sqrt", "img.size", "img.size", "img.size", "img.size", "img.size"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "\n", "        ", "if", "random", ".", "uniform", "(", "0", ",", "1", ")", ">=", "self", ".", "probability", ":", "\n", "            ", "return", "img", "\n", "\n", "", "for", "attempt", "in", "range", "(", "100", ")", ":", "\n", "            ", "area", "=", "img", ".", "size", "(", ")", "[", "1", "]", "*", "img", ".", "size", "(", ")", "[", "2", "]", "\n", "\n", "target_area", "=", "random", ".", "uniform", "(", "self", ".", "sl", ",", "self", ".", "sh", ")", "*", "area", "\n", "aspect_ratio", "=", "random", ".", "uniform", "(", "self", ".", "r1", ",", "1", "/", "self", ".", "r1", ")", "\n", "\n", "h", "=", "int", "(", "round", "(", "math", ".", "sqrt", "(", "target_area", "*", "aspect_ratio", ")", ")", ")", "\n", "w", "=", "int", "(", "round", "(", "math", ".", "sqrt", "(", "target_area", "/", "aspect_ratio", ")", ")", ")", "\n", "\n", "if", "w", "<", "img", ".", "size", "(", ")", "[", "2", "]", "and", "h", "<", "img", ".", "size", "(", ")", "[", "1", "]", ":", "\n", "                ", "x1", "=", "random", ".", "randint", "(", "0", ",", "img", ".", "size", "(", ")", "[", "1", "]", "-", "h", ")", "\n", "y1", "=", "random", ".", "randint", "(", "0", ",", "img", ".", "size", "(", ")", "[", "2", "]", "-", "w", ")", "\n", "if", "img", ".", "size", "(", ")", "[", "0", "]", "==", "3", ":", "\n", "                    ", "img", "[", "0", ",", "x1", ":", "x1", "+", "h", ",", "y1", ":", "y1", "+", "w", "]", "=", "self", ".", "mean", "[", "0", "]", "\n", "img", "[", "1", ",", "x1", ":", "x1", "+", "h", ",", "y1", ":", "y1", "+", "w", "]", "=", "self", ".", "mean", "[", "1", "]", "\n", "img", "[", "2", ",", "x1", ":", "x1", "+", "h", ",", "y1", ":", "y1", "+", "w", "]", "=", "self", ".", "mean", "[", "2", "]", "\n", "", "else", ":", "\n", "                    ", "img", "[", "0", ",", "x1", ":", "x1", "+", "h", ",", "y1", ":", "y1", "+", "w", "]", "=", "self", ".", "mean", "[", "0", "]", "\n", "", "return", "img", "\n", "\n", "", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.transforms.transforms.ColorSpaceConvert.__init__": [[74, 77], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "color_space", "=", "'rgb'", ",", "phase", "=", "'train'", ")", ":", "\n", "        ", "self", ".", "color_space", "=", "color_space", "\n", "self", ".", "phase", "=", "phase", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.transforms.transforms.ColorSpaceConvert.__call__": [[78, 86], ["numpy.asarray().astype", "cv2.merge().astype", "PIL.Image.fromarray", "numpy.asarray", "cv2.merge"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "if", "self", ".", "color_space", "==", "'rgb'", ":", "\n", "            ", "img", "=", "img", "\n", "", "elif", "self", ".", "color_space", "==", "'define'", ":", "\n", "            ", "img", "=", "np", ".", "asarray", "(", "img", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "new_img", "=", "cv2", ".", "merge", "(", "[", "255", "-", "img", "[", ":", ",", ":", ",", "0", "]", ",", "255", "-", "img", "[", ":", ",", ":", ",", "1", "]", ",", "img", "[", ":", ",", ":", ",", "2", "]", "]", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "img", "=", "Image", ".", "fromarray", "(", "new_img", ")", "\n", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.transforms.transforms.RandomPatch.__init__": [[102, 124], ["collections.deque"], "methods", ["None"], ["def", "__init__", "(", "\n", "self", ",", "\n", "prob_happen", "=", "0.5", ",", "\n", "pool_capacity", "=", "50000", ",", "\n", "min_sample_size", "=", "100", ",", "\n", "patch_min_area", "=", "0.01", ",", "\n", "patch_max_area", "=", "0.5", ",", "\n", "patch_min_ratio", "=", "0.1", ",", "\n", "prob_rotate", "=", "0.5", ",", "\n", "prob_flip_leftright", "=", "0.5", ",", "\n", ")", ":", "\n", "        ", "self", ".", "prob_happen", "=", "prob_happen", "\n", "\n", "self", ".", "patch_min_area", "=", "patch_min_area", "\n", "self", ".", "patch_max_area", "=", "patch_max_area", "\n", "self", ".", "patch_min_ratio", "=", "patch_min_ratio", "\n", "\n", "self", ".", "prob_rotate", "=", "prob_rotate", "\n", "self", ".", "prob_flip_leftright", "=", "prob_flip_leftright", "\n", "\n", "self", ".", "patchpool", "=", "deque", "(", "maxlen", "=", "pool_capacity", ")", "\n", "self", ".", "min_sample_size", "=", "min_sample_size", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.transforms.transforms.RandomPatch.generate_wh": [[125, 139], ["range", "random.uniform", "int", "int", "random.uniform", "round", "round", "math.sqrt", "math.sqrt"], "methods", ["None"], ["", "def", "generate_wh", "(", "self", ",", "W", ",", "H", ")", ":", "\n", "        ", "area", "=", "W", "*", "H", "\n", "for", "attempt", "in", "range", "(", "100", ")", ":", "\n", "            ", "target_area", "=", "random", ".", "uniform", "(", "\n", "self", ".", "patch_min_area", ",", "self", ".", "patch_max_area", "\n", ")", "*", "area", "\n", "aspect_ratio", "=", "random", ".", "uniform", "(", "\n", "self", ".", "patch_min_ratio", ",", "1.", "/", "self", ".", "patch_min_ratio", "\n", ")", "\n", "h", "=", "int", "(", "round", "(", "math", ".", "sqrt", "(", "target_area", "*", "aspect_ratio", ")", ")", ")", "\n", "w", "=", "int", "(", "round", "(", "math", ".", "sqrt", "(", "target_area", "/", "aspect_ratio", ")", ")", ")", "\n", "if", "w", "<", "W", "and", "h", "<", "H", ":", "\n", "                ", "return", "w", ",", "h", "\n", "", "", "return", "None", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.transforms.transforms.RandomPatch.transform_patch": [[140, 146], ["random.uniform", "patch.rotate.rotate.transpose", "random.uniform", "patch.rotate.rotate.rotate", "random.randint"], "methods", ["home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.transforms.augmix.rotate"], ["", "def", "transform_patch", "(", "self", ",", "patch", ")", ":", "\n", "        ", "if", "random", ".", "uniform", "(", "0", ",", "1", ")", ">", "self", ".", "prob_flip_leftright", ":", "\n", "            ", "patch", "=", "patch", ".", "transpose", "(", "Image", ".", "FLIP_LEFT_RIGHT", ")", "\n", "", "if", "random", ".", "uniform", "(", "0", ",", "1", ")", ">", "self", ".", "prob_rotate", ":", "\n", "            ", "patch", "=", "patch", ".", "rotate", "(", "random", ".", "randint", "(", "-", "10", ",", "10", ")", ")", "\n", "", "return", "patch", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.transforms.transforms.RandomPatch.__call__": [[147, 173], ["transforms.RandomPatch.generate_wh", "random.randint", "random.randint", "transforms.RandomPatch.transform_patch", "img.paste", "random.randint", "random.randint", "img.crop", "transforms.RandomPatch.patchpool.append", "len", "random.uniform", "random.sample"], "methods", ["home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.transforms.transforms.RandomPatch.generate_wh", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.transforms.transforms.RandomPatch.transform_patch"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "W", ",", "H", "=", "img", ".", "size", "# original image size", "\n", "\n", "# collect new patch", "\n", "w", ",", "h", "=", "self", ".", "generate_wh", "(", "W", ",", "H", ")", "\n", "if", "w", "is", "not", "None", "and", "h", "is", "not", "None", ":", "\n", "            ", "x1", "=", "random", ".", "randint", "(", "0", ",", "W", "-", "w", ")", "\n", "y1", "=", "random", ".", "randint", "(", "0", ",", "H", "-", "h", ")", "\n", "new_patch", "=", "img", ".", "crop", "(", "(", "x1", ",", "y1", ",", "x1", "+", "w", ",", "y1", "+", "h", ")", ")", "\n", "self", ".", "patchpool", ".", "append", "(", "new_patch", ")", "\n", "\n", "", "if", "len", "(", "self", ".", "patchpool", ")", "<", "self", ".", "min_sample_size", ":", "\n", "            ", "return", "img", "\n", "\n", "", "if", "random", ".", "uniform", "(", "0", ",", "1", ")", ">", "self", ".", "prob_happen", ":", "\n", "            ", "return", "img", "\n", "\n", "# paste a randomly selected patch on a random position", "\n", "", "patch", "=", "random", ".", "sample", "(", "self", ".", "patchpool", ",", "1", ")", "[", "0", "]", "\n", "patchW", ",", "patchH", "=", "patch", ".", "size", "\n", "x1", "=", "random", ".", "randint", "(", "0", ",", "W", "-", "patchW", ")", "\n", "y1", "=", "random", ".", "randint", "(", "0", ",", "H", "-", "patchH", ")", "\n", "patch", "=", "self", ".", "transform_patch", "(", "patch", ")", "\n", "img", ".", "paste", "(", "patch", ",", "(", "x1", ",", "y1", ")", ")", "\n", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.transforms.transforms.ColorAugmentation.__init__": [[184, 194], ["torch.Tensor", "torch.Tensor"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "p", "=", "0.5", ")", ":", "\n", "        ", "self", ".", "p", "=", "p", "\n", "self", ".", "eig_vec", "=", "torch", ".", "Tensor", "(", "\n", "[", "\n", "[", "0.4009", ",", "0.7192", ",", "-", "0.5675", "]", ",", "\n", "[", "-", "0.8140", ",", "-", "0.0045", ",", "-", "0.5808", "]", ",", "\n", "[", "0.4203", ",", "-", "0.6948", ",", "-", "0.5836", "]", ",", "\n", "]", "\n", ")", "\n", "self", ".", "eig_val", "=", "torch", ".", "Tensor", "(", "[", "[", "0.2175", ",", "0.0188", ",", "0.0045", "]", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.transforms.transforms.ColorAugmentation._check_input": [[195, 197], ["tensor.dim", "tensor.size"], "methods", ["None"], ["", "def", "_check_input", "(", "self", ",", "tensor", ")", ":", "\n", "        ", "assert", "tensor", ".", "dim", "(", ")", "==", "3", "and", "tensor", ".", "size", "(", "0", ")", "==", "3", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.transforms.transforms.ColorAugmentation.__call__": [[198, 205], ["torch.mm", "random.uniform", "torch.normal", "torch.mm.view", "torch.zeros_like"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "tensor", ")", ":", "\n", "        ", "if", "random", ".", "uniform", "(", "0", ",", "1", ")", ">", "self", ".", "p", ":", "\n", "            ", "return", "tensor", "\n", "", "alpha", "=", "torch", ".", "normal", "(", "mean", "=", "torch", ".", "zeros_like", "(", "self", ".", "eig_val", ")", ")", "*", "0.1", "\n", "quatity", "=", "torch", ".", "mm", "(", "self", ".", "eig_val", "*", "alpha", ",", "self", ".", "eig_vec", ")", "\n", "tensor", "=", "tensor", "+", "quatity", ".", "view", "(", "3", ",", "1", ",", "1", ")", "\n", "return", "tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.transforms.transforms.GaussianBlur.__init__": [[210, 213], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "p", "=", "0.5", ",", "sigma", "=", "[", ".1", ",", "1.", "]", ")", ":", "\n", "        ", "self", ".", "p", "=", "p", "\n", "self", ".", "sigma", "=", "sigma", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.transforms.transforms.GaussianBlur.__call__": [[214, 220], ["random.uniform", "image.filter.filter.filter", "random.uniform", "PIL.ImageFilter.GaussianBlur"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "image", ")", ":", "\n", "        ", "if", "random", ".", "uniform", "(", "0", ",", "1", ")", ">", "self", ".", "p", ":", "\n", "            ", "return", "image", "\n", "", "sigma", "=", "random", ".", "uniform", "(", "self", ".", "sigma", "[", "0", "]", ",", "self", ".", "sigma", "[", "1", "]", ")", "\n", "image", "=", "image", ".", "filter", "(", "ImageFilter", ".", "GaussianBlur", "(", "radius", "=", "sigma", ")", ")", "\n", "return", "image", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.transforms.transforms.RandomBlur.__init__": [[224, 227], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "p", "=", "0.5", ",", "sigma", "=", "1.3", ")", ":", "\n", "        ", "self", ".", "p", "=", "p", "\n", "self", ".", "sigma", "=", "sigma", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.transforms.transforms.RandomBlur.__call__": [[228, 232], ["cv2.GaussianBlur", "random.uniform"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "image", ")", ":", "# image : numpy , [height, width, channel]", "\n", "        ", "if", "random", ".", "uniform", "(", "0", ",", "1", ")", ">", "self", ".", "p", ":", "\n", "            ", "return", "image", "\n", "", "return", "cv2", ".", "GaussianBlur", "(", "image", ",", "(", "5", ",", "5", ")", ",", "self", ".", "sigma", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.transforms.augmix.AugMix.__init__": [[168, 177], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "prob", "=", "0.5", ",", "aug_prob_coeff", "=", "0.1", ",", "\n", "mixture_width", "=", "3", ",", "\n", "mixture_depth", "=", "1", ",", "\n", "aug_severity", "=", "1", ")", ":", "\n", "        ", "self", ".", "prob", "=", "prob", "\n", "self", ".", "aug_prob_coeff", "=", "aug_prob_coeff", "\n", "self", ".", "mixture_width", "=", "mixture_width", "\n", "self", ".", "mixture_depth", "=", "mixture_depth", "\n", "self", ".", "aug_severity", "=", "aug_severity", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.transforms.augmix.AugMix.__call__": [[178, 198], ["numpy.float32", "numpy.float32", "numpy.zeros", "range", "mixed.astype", "random.random", "numpy.asarray", "numpy.random.dirichlet", "numpy.random.beta", "img.copy", "range", "numpy.random.randint", "numpy.random.choice", "numpy.random.choice.", "numpy.asarray", "numpy.asarray"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "if", "random", ".", "random", "(", ")", ">", "self", ".", "prob", ":", "\n", "            ", "return", "np", ".", "asarray", "(", "img", ")", "\n", "", "ws", "=", "np", ".", "float32", "(", "\n", "np", ".", "random", ".", "dirichlet", "(", "[", "self", ".", "aug_prob_coeff", "]", "*", "self", ".", "mixture_width", ")", ")", "\n", "m", "=", "np", ".", "float32", "(", "np", ".", "random", ".", "beta", "(", "self", ".", "aug_prob_coeff", ",", "self", ".", "aug_prob_coeff", ")", ")", "\n", "\n", "mix", "=", "np", ".", "zeros", "(", "[", "img", ".", "size", "[", "1", "]", ",", "img", ".", "size", "[", "0", "]", ",", "3", "]", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "mixture_width", ")", ":", "\n", "            ", "image_aug", "=", "img", ".", "copy", "(", ")", "\n", "depth", "=", "self", ".", "mixture_depth", "if", "self", ".", "mixture_depth", ">", "0", "else", "np", ".", "random", ".", "randint", "(", "\n", "1", ",", "4", ")", "\n", "for", "_", "in", "range", "(", "depth", ")", ":", "\n", "                ", "op", "=", "np", ".", "random", ".", "choice", "(", "augmentations", ")", "\n", "image_aug", "=", "op", "(", "image_aug", ",", "self", ".", "aug_severity", ")", "\n", "# Preprocessing commutes since all coefficients are convex", "\n", "", "mix", "+=", "ws", "[", "i", "]", "*", "np", ".", "asarray", "(", "image_aug", ")", "\n", "\n", "", "mixed", "=", "(", "1", "-", "m", ")", "*", "np", ".", "asarray", "(", "img", ")", "+", "m", "*", "mix", "\n", "return", "mixed", ".", "astype", "(", "np", ".", "uint8", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.transforms.augmix.int_parameter": [[28, 40], ["int"], "function", ["None"], ["def", "int_parameter", "(", "level", ",", "maxval", ")", ":", "\n", "  ", "\"\"\"Helper function to scale `val` between 0 and maxval .\n\n  Args:\n    level: Level of the operation that will be between [0, `PARAMETER_MAX`].\n    maxval: Maximum value that the operation can have. This will be scaled to\n      level/PARAMETER_MAX.\n\n  Returns:\n    An int that results from scaling `maxval` according to `level`.\n  \"\"\"", "\n", "return", "int", "(", "level", "*", "maxval", "/", "10", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.transforms.augmix.float_parameter": [[42, 54], ["float"], "function", ["None"], ["", "def", "float_parameter", "(", "level", ",", "maxval", ")", ":", "\n", "  ", "\"\"\"Helper function to scale `val` between 0 and maxval.\n\n  Args:\n    level: Level of the operation that will be between [0, `PARAMETER_MAX`].\n    maxval: Maximum value that the operation can have. This will be scaled to\n      level/PARAMETER_MAX.\n\n  Returns:\n    A float that results from scaling `maxval` according to `level`.\n  \"\"\"", "\n", "return", "float", "(", "level", ")", "*", "maxval", "/", "10.", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.transforms.augmix.sample_level": [[56, 58], ["numpy.random.uniform"], "function", ["None"], ["", "def", "sample_level", "(", "n", ")", ":", "\n", "  ", "return", "np", ".", "random", ".", "uniform", "(", "low", "=", "0.1", ",", "high", "=", "n", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.transforms.augmix.autocontrast": [[60, 62], ["PIL.ImageOps.autocontrast"], "function", ["home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.transforms.augmix.autocontrast"], ["", "def", "autocontrast", "(", "pil_img", ",", "_", ")", ":", "\n", "  ", "return", "ImageOps", ".", "autocontrast", "(", "pil_img", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.transforms.augmix.equalize": [[64, 66], ["PIL.ImageOps.equalize"], "function", ["home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.transforms.augmix.equalize"], ["", "def", "equalize", "(", "pil_img", ",", "_", ")", ":", "\n", "  ", "return", "ImageOps", ".", "equalize", "(", "pil_img", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.transforms.augmix.posterize": [[68, 72], ["augmix.int_parameter", "PIL.ImageOps.posterize", "augmix.sample_level"], "function", ["home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.transforms.augmix.int_parameter", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.transforms.augmix.posterize", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.transforms.augmix.sample_level"], ["", "def", "posterize", "(", "pil_img", ",", "level", ")", ":", "\n", "  ", "level", "=", "int_parameter", "(", "sample_level", "(", "level", ")", ",", "4", ")", "\n", "ret", "=", "ImageOps", ".", "posterize", "(", "pil_img", ",", "4", "-", "level", ")", "\n", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.transforms.augmix.rotate": [[73, 79], ["augmix.int_parameter", "pil_img.rotate", "augmix.sample_level", "numpy.random.uniform"], "function", ["home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.transforms.augmix.int_parameter", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.transforms.augmix.rotate", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.transforms.augmix.sample_level"], ["", "def", "rotate", "(", "pil_img", ",", "level", ")", ":", "\n", "  ", "degrees", "=", "int_parameter", "(", "sample_level", "(", "level", ")", ",", "30", ")", "\n", "if", "np", ".", "random", ".", "uniform", "(", ")", ">", "0.5", ":", "\n", "    ", "degrees", "=", "-", "degrees", "\n", "", "ret", "=", "pil_img", ".", "rotate", "(", "degrees", ",", "resample", "=", "Image", ".", "BILINEAR", ")", "\n", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.transforms.augmix.solarize": [[80, 84], ["augmix.int_parameter", "PIL.ImageOps.solarize", "augmix.sample_level"], "function", ["home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.transforms.augmix.int_parameter", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.transforms.augmix.solarize", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.transforms.augmix.sample_level"], ["", "def", "solarize", "(", "pil_img", ",", "level", ")", ":", "\n", "  ", "level", "=", "int_parameter", "(", "sample_level", "(", "level", ")", ",", "256", ")", "\n", "ret", "=", "ImageOps", ".", "solarize", "(", "pil_img", ",", "256", "-", "level", ")", "\n", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.transforms.augmix.shear_x": [[85, 93], ["augmix.float_parameter", "pil_img.transform", "augmix.sample_level", "numpy.random.uniform"], "function", ["home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.transforms.augmix.float_parameter", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.transforms.augmix.sample_level"], ["", "def", "shear_x", "(", "pil_img", ",", "level", ")", ":", "\n", "  ", "level", "=", "float_parameter", "(", "sample_level", "(", "level", ")", ",", "0.3", ")", "\n", "if", "np", ".", "random", ".", "uniform", "(", ")", ">", "0.5", ":", "\n", "    ", "level", "=", "-", "level", "\n", "", "ret", "=", "pil_img", ".", "transform", "(", "pil_img", ".", "size", ",", "\n", "Image", ".", "AFFINE", ",", "(", "1", ",", "level", ",", "0", ",", "0", ",", "1", ",", "0", ")", ",", "\n", "resample", "=", "Image", ".", "BILINEAR", ")", "\n", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.transforms.augmix.shear_y": [[94, 102], ["augmix.float_parameter", "pil_img.transform", "augmix.sample_level", "numpy.random.uniform"], "function", ["home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.transforms.augmix.float_parameter", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.transforms.augmix.sample_level"], ["", "def", "shear_y", "(", "pil_img", ",", "level", ")", ":", "\n", "  ", "level", "=", "float_parameter", "(", "sample_level", "(", "level", ")", ",", "0.3", ")", "\n", "if", "np", ".", "random", ".", "uniform", "(", ")", ">", "0.5", ":", "\n", "    ", "level", "=", "-", "level", "\n", "", "ret", "=", "pil_img", ".", "transform", "(", "pil_img", ".", "size", ",", "\n", "Image", ".", "AFFINE", ",", "(", "1", ",", "0", ",", "0", ",", "level", ",", "1", ",", "0", ")", ",", "\n", "resample", "=", "Image", ".", "BILINEAR", ")", "\n", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.transforms.augmix.translate_x": [[103, 111], ["augmix.int_parameter", "pil_img.transform", "augmix.sample_level", "numpy.random.random"], "function", ["home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.transforms.augmix.int_parameter", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.transforms.augmix.sample_level"], ["", "def", "translate_x", "(", "pil_img", ",", "level", ")", ":", "\n", "  ", "level", "=", "int_parameter", "(", "sample_level", "(", "level", ")", ",", "pil_img", ".", "size", "[", "1", "]", "/", "3", ")", "\n", "if", "np", ".", "random", ".", "random", "(", ")", ">", "0.5", ":", "\n", "    ", "level", "=", "-", "level", "\n", "", "ret", "=", "pil_img", ".", "transform", "(", "pil_img", ".", "size", ",", "\n", "Image", ".", "AFFINE", ",", "(", "1", ",", "0", ",", "level", ",", "0", ",", "1", ",", "0", ")", ",", "\n", "resample", "=", "Image", ".", "BILINEAR", ")", "\n", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.transforms.augmix.translate_y": [[112, 120], ["augmix.int_parameter", "pil_img.transform", "augmix.sample_level", "numpy.random.random"], "function", ["home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.transforms.augmix.int_parameter", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.transforms.augmix.sample_level"], ["", "def", "translate_y", "(", "pil_img", ",", "level", ")", ":", "\n", "  ", "level", "=", "int_parameter", "(", "sample_level", "(", "level", ")", ",", "pil_img", ".", "size", "[", "1", "]", "/", "3", ")", "\n", "if", "np", ".", "random", ".", "random", "(", ")", ">", "0.5", ":", "\n", "    ", "level", "=", "-", "level", "\n", "", "ret", "=", "pil_img", ".", "transform", "(", "pil_img", ".", "size", ",", "\n", "Image", ".", "AFFINE", ",", "(", "1", ",", "0", ",", "0", ",", "0", ",", "1", ",", "level", ")", ",", "\n", "resample", "=", "Image", ".", "BILINEAR", ")", "\n", "return", "ret", "\n", "", "augmentations", "=", "[", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.transforms.build.build_transforms": [[12, 37], ["torchvision.Normalize", "torchvision.Compose", "torchvision.Compose", "torchvision.Resize", "torchvision.RandomHorizontalFlip", "torchvision.Pad", "torchvision.RandomCrop", "transforms.RandomPatch", "torchvision.RandomApply", "augmix.AugMix", "transforms.RandomBlur", "torchvision.ToTensor", "transforms.RandomErasing", "torchvision.Resize", "torchvision.ToTensor", "torchvision.ColorJitter"], "function", ["None"], ["from", ".", "metric_learning", "import", "ContrastiveLoss", "\n", "from", ".", "metric_learning", "import", "ContrastiveLoss", ",", "SupConLoss", "\n", "from", "torch", ".", "utils", ".", "tensorboard", "import", "SummaryWriter", "\n", "\n", "def", "make_loss", "(", "cfg", ",", "num_classes", ")", ":", "# modified by gu", "\n", "    ", "make_loss", ".", "update_iter_interval", "=", "500", "\n", "make_loss", ".", "id_loss_history", "=", "[", "]", "\n", "make_loss", ".", "metric_loss_history", "=", "[", "]", "\n", "make_loss", ".", "ID_LOSS_WEIGHT", "=", "cfg", ".", "MODEL", ".", "ID_LOSS_WEIGHT", "\n", "make_loss", ".", "TRIPLET_LOSS_WEIGHT", "=", "cfg", ".", "MODEL", ".", "TRIPLET_LOSS_WEIGHT", "\n", "\n", "if", "cfg", ".", "MODEL", ".", "METRIC_LOSS_TYPE", "==", "'triplet'", ":", "\n", "        ", "metric_loss_func", "=", "TripletLoss", "(", "cfg", ".", "SOLVER", ".", "MARGIN", ",", "cfg", ".", "SOLVER", ".", "HARD_EXAMPLE_MINING_METHOD", ")", "# triplet loss", "\n", "", "elif", "cfg", ".", "MODEL", ".", "METRIC_LOSS_TYPE", "==", "'contrastive'", ":", "\n", "        ", "metric_loss_func", "=", "ContrastiveLoss", "(", "cfg", ".", "SOLVER", ".", "MARGIN", ")", "\n", "", "elif", "cfg", ".", "MODEL", ".", "METRIC_LOSS_TYPE", "==", "'supconloss'", ":", "\n", "        ", "metric_loss_func", "=", "SupConLoss", "(", "num_ids", "=", "int", "(", "cfg", ".", "SOLVER", ".", "IMS_PER_BATCH", "/", "cfg", ".", "DATALOADER", ".", "NUM_INSTANCE", ")", ",", "views", "=", "cfg", ".", "DATALOADER", ".", "NUM_INSTANCE", ")", "\n", "", "elif", "cfg", ".", "MODEL", ".", "METRIC_LOSS_TYPE", "==", "'none'", ":", "\n", "        ", "def", "metric_loss_func", "(", "feat", ",", "target", ")", ":", "\n", "            ", "return", "0", "\n", "", "", "else", ":", "\n", "        ", "print", "(", "'got unsupported metric loss type {}'", ".", "format", "(", "\n", "cfg", ".", "MODEL", ".", "METRIC_LOSS_TYPE", ")", ")", "\n", "\n", "", "if", "cfg", ".", "MODEL", ".", "IF_LABELSMOOTH", "==", "'on'", ":", "\n", "        ", "id_loss_func", "=", "CrossEntropyLabelSmooth", "(", "num_classes", "=", "num_classes", ")", "# new add by luo", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.transforms.fmix.FMixBase.__init__": [[170, 179], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.solver.ranger.Ranger.__init__"], ["def", "__init__", "(", "self", ",", "decay_power", "=", "3", ",", "alpha", "=", "1", ",", "size", "=", "(", "32", ",", "32", ")", ",", "max_soft", "=", "0.0", ",", "reformulate", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "decay_power", "=", "decay_power", "\n", "self", ".", "reformulate", "=", "reformulate", "\n", "self", ".", "size", "=", "size", "\n", "self", ".", "alpha", "=", "alpha", "\n", "self", ".", "max_soft", "=", "max_soft", "\n", "self", ".", "index", "=", "None", "\n", "self", ".", "lam", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.transforms.fmix.FMixBase.__call__": [[180, 182], ["None"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "x", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.transforms.fmix.FMixBase.loss": [[183, 185], ["None"], "methods", ["None"], ["", "def", "loss", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.transforms.fmix.FMix.__init__": [[228, 230], ["fmix.FMixBase.__init__"], "methods", ["home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.solver.ranger.Ranger.__init__"], ["def", "__init__", "(", "self", ",", "decay_power", "=", "3", ",", "alpha", "=", "1", ",", "size", "=", "(", "256", ",", "128", ")", ",", "max_soft", "=", "0.0", ",", "reformulate", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "decay_power", ",", "alpha", ",", "size", ",", "max_soft", ",", "reformulate", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.transforms.fmix.FMix.__call__": [[231, 243], ["fmix.sample_mask", "torch.randperm().to", "torch.randperm().to", "torch.randperm().to", "torch.randperm().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "x.size", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "methods", ["home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.transforms.fmix.sample_mask"], ["", "def", "__call__", "(", "self", ",", "x", ")", ":", "\n", "# Sample mask and generate random permutation", "\n", "        ", "lam", ",", "mask", "=", "sample_mask", "(", "self", ".", "alpha", ",", "self", ".", "decay_power", ",", "self", ".", "size", ",", "self", ".", "max_soft", ",", "self", ".", "reformulate", ")", "\n", "index", "=", "torch", ".", "randperm", "(", "x", ".", "size", "(", "0", ")", ")", ".", "to", "(", "x", ".", "device", ")", "\n", "mask", "=", "torch", ".", "from_numpy", "(", "mask", ")", ".", "float", "(", ")", ".", "to", "(", "x", ".", "device", ")", "\n", "\n", "# Mix the images", "\n", "x1", "=", "mask", "*", "x", "\n", "x2", "=", "(", "1", "-", "mask", ")", "*", "x", "[", "index", "]", "\n", "self", ".", "index", "=", "index", "\n", "self", ".", "lam", "=", "lam", "\n", "return", "x1", "+", "x2", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.transforms.fmix.FMix.loss": [[244, 246], ["fmix.fmix_loss"], "methods", ["home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.transforms.fmix.fmix_loss"], ["", "def", "loss", "(", "self", ",", "y_pred", ",", "y", ",", "train", "=", "True", ")", ":", "\n", "        ", "return", "fmix_loss", "(", "y_pred", ",", "y", ",", "self", ".", "index", ",", "self", ".", "lam", ",", "train", ",", "self", ".", "reformulate", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.transforms.fmix.fftfreqnd": [[10, 35], ["numpy.fft.fftfreq", "numpy.sqrt", "numpy.expand_dims", "numpy.expand_dims", "numpy.fft.fftfreq", "numpy.fft.fftfreq", "numpy.fft.fftfreq", "numpy.fft.fftfreq"], "function", ["None"], ["def", "fftfreqnd", "(", "h", ",", "w", "=", "None", ",", "z", "=", "None", ")", ":", "\n", "    ", "\"\"\" Get bin values for discrete fourier transform of size (h, w, z)\n    :param h: Required, first dimension size\n    :param w: Optional, second dimension size\n    :param z: Optional, third dimension size\n    \"\"\"", "\n", "fz", "=", "fx", "=", "0", "\n", "fy", "=", "np", ".", "fft", ".", "fftfreq", "(", "h", ")", "\n", "\n", "if", "w", "is", "not", "None", ":", "\n", "        ", "fy", "=", "np", ".", "expand_dims", "(", "fy", ",", "-", "1", ")", "\n", "\n", "if", "w", "%", "2", "==", "1", ":", "\n", "            ", "fx", "=", "np", ".", "fft", ".", "fftfreq", "(", "w", ")", "[", ":", "w", "//", "2", "+", "2", "]", "\n", "", "else", ":", "\n", "            ", "fx", "=", "np", ".", "fft", ".", "fftfreq", "(", "w", ")", "[", ":", "w", "//", "2", "+", "1", "]", "\n", "\n", "", "", "if", "z", "is", "not", "None", ":", "\n", "        ", "fy", "=", "np", ".", "expand_dims", "(", "fy", ",", "-", "1", ")", "\n", "if", "z", "%", "2", "==", "1", ":", "\n", "            ", "fz", "=", "np", ".", "fft", ".", "fftfreq", "(", "z", ")", "[", ":", ",", "None", "]", "\n", "", "else", ":", "\n", "            ", "fz", "=", "np", ".", "fft", ".", "fftfreq", "(", "z", ")", "[", ":", ",", "None", "]", "\n", "\n", "", "", "return", "np", ".", "sqrt", "(", "fx", "*", "fx", "+", "fy", "*", "fy", "+", "fz", "*", "fz", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.transforms.fmix.get_spectrum": [[37, 54], ["numpy.random.randn", "numpy.ones", "numpy.expand_dims", "numpy.maximum", "list", "numpy.array", "max"], "function", ["None"], ["", "def", "get_spectrum", "(", "freqs", ",", "decay_power", ",", "ch", ",", "h", ",", "w", "=", "0", ",", "z", "=", "0", ")", ":", "\n", "    ", "\"\"\" Samples a fourier image with given size and frequencies decayed by decay power\n    :param freqs: Bin values for the discrete fourier transform\n    :param decay_power: Decay power for frequency decay prop 1/f**d\n    :param ch: Number of channels for the resulting mask\n    :param h: Required, first dimension size\n    :param w: Optional, second dimension size\n    :param z: Optional, third dimension size\n    \"\"\"", "\n", "scale", "=", "np", ".", "ones", "(", "1", ")", "/", "(", "np", ".", "maximum", "(", "freqs", ",", "np", ".", "array", "(", "[", "1.", "/", "max", "(", "w", ",", "h", ",", "z", ")", "]", ")", ")", "**", "decay_power", ")", "\n", "\n", "param_size", "=", "[", "ch", "]", "+", "list", "(", "freqs", ".", "shape", ")", "+", "[", "2", "]", "\n", "param", "=", "np", ".", "random", ".", "randn", "(", "*", "param_size", ")", "\n", "\n", "scale", "=", "np", ".", "expand_dims", "(", "scale", ",", "-", "1", ")", "[", "None", ",", ":", "]", "\n", "\n", "return", "scale", "*", "param", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.transforms.fmix.make_low_freq_image": [[56, 78], ["fmix.fftfreqnd", "fmix.get_spectrum", "numpy.real", "numpy.fft.irfftn", "len", "len", "len", "np.real.min", "np.real.max"], "function", ["home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.transforms.fmix.fftfreqnd", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.transforms.fmix.get_spectrum"], ["", "def", "make_low_freq_image", "(", "decay", ",", "shape", ",", "ch", "=", "1", ")", ":", "\n", "    ", "\"\"\" Sample a low frequency image from fourier space\n    :param decay_power: Decay power for frequency decay prop 1/f**d\n    :param shape: Shape of desired mask, list up to 3 dims\n    :param ch: Number of channels for desired mask\n    \"\"\"", "\n", "freqs", "=", "fftfreqnd", "(", "*", "shape", ")", "\n", "spectrum", "=", "get_spectrum", "(", "freqs", ",", "decay", ",", "ch", ",", "*", "shape", ")", "#.reshape((1, *shape[:-1], -1))", "\n", "spectrum", "=", "spectrum", "[", ":", ",", "0", "]", "+", "1j", "*", "spectrum", "[", ":", ",", "1", "]", "\n", "mask", "=", "np", ".", "real", "(", "np", ".", "fft", ".", "irfftn", "(", "spectrum", ",", "shape", ")", ")", "\n", "\n", "if", "len", "(", "shape", ")", "==", "1", ":", "\n", "        ", "mask", "=", "mask", "[", ":", "1", ",", ":", "shape", "[", "0", "]", "]", "\n", "", "if", "len", "(", "shape", ")", "==", "2", ":", "\n", "        ", "mask", "=", "mask", "[", ":", "1", ",", ":", "shape", "[", "0", "]", ",", ":", "shape", "[", "1", "]", "]", "\n", "", "if", "len", "(", "shape", ")", "==", "3", ":", "\n", "        ", "mask", "=", "mask", "[", ":", "1", ",", ":", "shape", "[", "0", "]", ",", ":", "shape", "[", "1", "]", ",", ":", "shape", "[", "2", "]", "]", "\n", "\n", "", "mask", "=", "mask", "\n", "mask", "=", "(", "mask", "-", "mask", ".", "min", "(", ")", ")", "\n", "mask", "=", "mask", "/", "mask", ".", "max", "(", ")", "\n", "return", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.transforms.fmix.sample_lam": [[80, 91], ["scipy.stats.beta.rvs", "scipy.stats.beta.rvs"], "function", ["None"], ["", "def", "sample_lam", "(", "alpha", ",", "reformulate", "=", "False", ")", ":", "\n", "    ", "\"\"\" Sample a lambda from symmetric beta distribution with given alpha\n    :param alpha: Alpha value for beta distribution\n    :param reformulate: If True, uses the reformulation of [1].\n    \"\"\"", "\n", "if", "reformulate", ":", "\n", "        ", "lam", "=", "beta", ".", "rvs", "(", "alpha", "+", "1", ",", "alpha", ")", "\n", "", "else", ":", "\n", "        ", "lam", "=", "beta", ".", "rvs", "(", "alpha", ",", "alpha", ")", "\n", "\n", "", "return", "lam", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.transforms.fmix.binarise_mask": [[93, 119], ["mask.reshape.reshape", "int", "numpy.linspace", "mask.reshape.reshape", "mask.reshape.reshape().argsort", "math.ceil", "math.floor", "min", "random.random", "mask.reshape.reshape"], "function", ["None"], ["", "def", "binarise_mask", "(", "mask", ",", "lam", ",", "in_shape", ",", "max_soft", "=", "0.0", ")", ":", "\n", "    ", "\"\"\" Binarises a given low frequency image such that it has mean lambda.\n    :param mask: Low frequency image, usually the result of `make_low_freq_image`\n    :param lam: Mean value of final mask\n    :param in_shape: Shape of inputs\n    :param max_soft: Softening value between 0 and 0.5 which smooths hard edges in the mask.\n    :return:\n    \"\"\"", "\n", "idx", "=", "mask", ".", "reshape", "(", "-", "1", ")", ".", "argsort", "(", ")", "[", ":", ":", "-", "1", "]", "\n", "mask", "=", "mask", ".", "reshape", "(", "-", "1", ")", "\n", "num", "=", "math", ".", "ceil", "(", "lam", "*", "mask", ".", "size", ")", "if", "random", ".", "random", "(", ")", ">", "0.5", "else", "math", ".", "floor", "(", "lam", "*", "mask", ".", "size", ")", "\n", "\n", "eff_soft", "=", "max_soft", "\n", "if", "max_soft", ">", "lam", "or", "max_soft", ">", "(", "1", "-", "lam", ")", ":", "\n", "        ", "eff_soft", "=", "min", "(", "lam", ",", "1", "-", "lam", ")", "\n", "\n", "", "soft", "=", "int", "(", "mask", ".", "size", "*", "eff_soft", ")", "\n", "num_low", "=", "num", "-", "soft", "\n", "num_high", "=", "num", "+", "soft", "\n", "\n", "mask", "[", "idx", "[", ":", "num_high", "]", "]", "=", "1", "\n", "mask", "[", "idx", "[", "num_low", ":", "]", "]", "=", "0", "\n", "mask", "[", "idx", "[", "num_low", ":", "num_high", "]", "]", "=", "np", ".", "linspace", "(", "1", ",", "0", ",", "(", "num_high", "-", "num_low", ")", ")", "\n", "\n", "mask", "=", "mask", ".", "reshape", "(", "(", "1", ",", "*", "in_shape", ")", ")", "\n", "return", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.transforms.fmix.sample_mask": [[121, 141], ["isinstance", "fmix.sample_lam", "fmix.make_low_freq_image", "fmix.binarise_mask"], "function", ["home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.transforms.fmix.sample_lam", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.transforms.fmix.make_low_freq_image", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.transforms.fmix.binarise_mask"], ["", "def", "sample_mask", "(", "alpha", ",", "decay_power", ",", "shape", ",", "max_soft", "=", "0.0", ",", "reformulate", "=", "False", ")", ":", "\n", "    ", "\"\"\" Samples a mean lambda from beta distribution parametrised by alpha, creates a low frequency image and binarises\n    it based on this lambda\n    :param alpha: Alpha value for beta distribution from which to sample mean of mask\n    :param decay_power: Decay power for frequency decay prop 1/f**d\n    :param shape: Shape of desired mask, list up to 3 dims\n    :param max_soft: Softening value between 0 and 0.5 which smooths hard edges in the mask.\n    :param reformulate: If True, uses the reformulation of [1].\n    \"\"\"", "\n", "if", "isinstance", "(", "shape", ",", "int", ")", ":", "\n", "        ", "shape", "=", "(", "shape", ",", ")", "\n", "\n", "# Choose lambda", "\n", "", "lam", "=", "sample_lam", "(", "alpha", ",", "reformulate", ")", "\n", "\n", "# Make mask, get mean / std", "\n", "mask", "=", "make_low_freq_image", "(", "decay_power", ",", "shape", ")", "\n", "mask", "=", "binarise_mask", "(", "mask", ",", "lam", ",", "shape", ",", "max_soft", ")", "\n", "\n", "return", "lam", ",", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.transforms.fmix.sample_and_apply": [[143, 158], ["fmix.sample_mask", "numpy.random.permutation"], "function", ["home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.transforms.fmix.sample_mask"], ["", "def", "sample_and_apply", "(", "x", ",", "alpha", ",", "decay_power", ",", "shape", ",", "max_soft", "=", "0.0", ",", "reformulate", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    :param x: Image batch on which to apply fmix of shape [b, c, shape*]\n    :param alpha: Alpha value for beta distribution from which to sample mean of mask\n    :param decay_power: Decay power for frequency decay prop 1/f**d\n    :param shape: Shape of desired mask, list up to 3 dims\n    :param max_soft: Softening value between 0 and 0.5 which smooths hard edges in the mask.\n    :param reformulate: If True, uses the reformulation of [1].\n    :return: mixed input, permutation indices, lambda value of mix,\n    \"\"\"", "\n", "lam", ",", "mask", "=", "sample_mask", "(", "alpha", ",", "decay_power", ",", "shape", ",", "max_soft", ",", "reformulate", ")", "\n", "index", "=", "np", ".", "random", ".", "permutation", "(", "x", ".", "shape", "[", "0", "]", ")", "\n", "\n", "x1", ",", "x2", "=", "x", "*", "mask", ",", "x", "[", "index", "]", "*", "(", "1", "-", "mask", ")", "\n", "return", "x1", "+", "x2", ",", "index", ",", "lam", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.transforms.fmix.fmix_loss": [[187, 202], ["torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy"], "function", ["None"], ["", "", "def", "fmix_loss", "(", "input", ",", "y1", ",", "index", ",", "lam", ",", "train", "=", "True", ",", "reformulate", "=", "False", ")", ":", "\n", "    ", "r\"\"\"Criterion for fmix\n    Args:\n        input: If train, mixed input. If not train, standard input\n        y1: Targets for first image\n        index: Permutation for mixing\n        lam: Lambda value of mixing\n        train: If true, sum cross entropy of input with y1 and y2, weighted by lam/(1-lam). If false, cross entropy loss with y1\n    \"\"\"", "\n", "\n", "if", "train", "and", "not", "reformulate", ":", "\n", "        ", "y2", "=", "y1", "[", "index", "]", "\n", "return", "F", ".", "cross_entropy", "(", "input", ",", "y1", ")", "*", "lam", "+", "F", ".", "cross_entropy", "(", "input", ",", "y2", ")", "*", "(", "1", "-", "lam", ")", "\n", "", "else", ":", "\n", "        ", "return", "F", ".", "cross_entropy", "(", "input", ",", "y1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.solver.build.make_optimizer": [[14, 38], ["model.named_parameters", "getattr", "ranger.Ranger", "print", "torch.optim.SGD", "torch.optim.SGD", "swa.SWA", "getattr"], "function", ["None"], ["from", "torch", ".", "utils", ".", "tensorboard", "import", "SummaryWriter", "\n", "\n", "def", "make_loss", "(", "cfg", ",", "num_classes", ")", ":", "# modified by gu", "\n", "    ", "make_loss", ".", "update_iter_interval", "=", "500", "\n", "make_loss", ".", "id_loss_history", "=", "[", "]", "\n", "make_loss", ".", "metric_loss_history", "=", "[", "]", "\n", "make_loss", ".", "ID_LOSS_WEIGHT", "=", "cfg", ".", "MODEL", ".", "ID_LOSS_WEIGHT", "\n", "make_loss", ".", "TRIPLET_LOSS_WEIGHT", "=", "cfg", ".", "MODEL", ".", "TRIPLET_LOSS_WEIGHT", "\n", "\n", "if", "cfg", ".", "MODEL", ".", "METRIC_LOSS_TYPE", "==", "'triplet'", ":", "\n", "        ", "metric_loss_func", "=", "TripletLoss", "(", "cfg", ".", "SOLVER", ".", "MARGIN", ",", "cfg", ".", "SOLVER", ".", "HARD_EXAMPLE_MINING_METHOD", ")", "# triplet loss", "\n", "", "elif", "cfg", ".", "MODEL", ".", "METRIC_LOSS_TYPE", "==", "'contrastive'", ":", "\n", "        ", "metric_loss_func", "=", "ContrastiveLoss", "(", "cfg", ".", "SOLVER", ".", "MARGIN", ")", "\n", "", "elif", "cfg", ".", "MODEL", ".", "METRIC_LOSS_TYPE", "==", "'supconloss'", ":", "\n", "        ", "metric_loss_func", "=", "SupConLoss", "(", "num_ids", "=", "int", "(", "cfg", ".", "SOLVER", ".", "IMS_PER_BATCH", "/", "cfg", ".", "DATALOADER", ".", "NUM_INSTANCE", ")", ",", "views", "=", "cfg", ".", "DATALOADER", ".", "NUM_INSTANCE", ")", "\n", "", "elif", "cfg", ".", "MODEL", ".", "METRIC_LOSS_TYPE", "==", "'none'", ":", "\n", "        ", "def", "metric_loss_func", "(", "feat", ",", "target", ")", ":", "\n", "            ", "return", "0", "\n", "", "", "else", ":", "\n", "        ", "print", "(", "'got unsupported metric loss type {}'", ".", "format", "(", "\n", "cfg", ".", "MODEL", ".", "METRIC_LOSS_TYPE", ")", ")", "\n", "\n", "", "if", "cfg", ".", "MODEL", ".", "IF_LABELSMOOTH", "==", "'on'", ":", "\n", "        ", "id_loss_func", "=", "CrossEntropyLabelSmooth", "(", "num_classes", "=", "num_classes", ")", "# new add by luo", "\n", "print", "(", "\"label smooth on, numclasses:\"", ",", "num_classes", ")", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.solver.lr_scheduler.WarmupMultiStepLR.__init__": [[16, 43], ["super().__init__", "ValueError", "ValueError", "list", "sorted"], "methods", ["home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.solver.ranger.Ranger.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "optimizer", ",", "\n", "milestones", ",", "\n", "gamma", "=", "0.1", ",", "\n", "warmup_factor", "=", "1.0", "/", "3", ",", "\n", "warmup_iters", "=", "10", ",", "\n", "warmup_method", "=", "\"linear\"", ",", "\n", "last_epoch", "=", "-", "1", ",", "\n", ")", ":", "\n", "        ", "if", "not", "list", "(", "milestones", ")", "==", "sorted", "(", "milestones", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"Milestones should be a list of\"", "\" increasing integers. Got {}\"", ",", "\n", "milestones", ",", "\n", ")", "\n", "\n", "", "if", "warmup_method", "not", "in", "(", "\"constant\"", ",", "\"linear\"", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"Only 'constant' or 'linear' warmup_method accepted\"", "\n", "\"got {}\"", ".", "format", "(", "warmup_method", ")", "\n", ")", "\n", "", "self", ".", "milestones", "=", "milestones", "\n", "self", ".", "gamma", "=", "gamma", "\n", "self", ".", "warmup_factor", "=", "warmup_factor", "\n", "self", ".", "warmup_iters", "=", "warmup_iters", "\n", "self", ".", "warmup_method", "=", "warmup_method", "\n", "super", "(", "WarmupMultiStepLR", ",", "self", ")", ".", "__init__", "(", "optimizer", ",", "last_epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.solver.lr_scheduler.WarmupMultiStepLR.get_lr": [[44, 57], ["bisect.bisect_right"], "methods", ["None"], ["", "def", "get_lr", "(", "self", ")", ":", "\n", "        ", "warmup_factor", "=", "1", "\n", "if", "self", ".", "last_epoch", "<", "self", ".", "warmup_iters", ":", "\n", "            ", "if", "self", ".", "warmup_method", "==", "\"constant\"", ":", "\n", "                ", "warmup_factor", "=", "self", ".", "warmup_factor", "\n", "", "elif", "self", ".", "warmup_method", "==", "\"linear\"", ":", "\n", "                ", "alpha", "=", "self", ".", "last_epoch", "/", "self", ".", "warmup_iters", "\n", "warmup_factor", "=", "self", ".", "warmup_factor", "*", "(", "1", "-", "alpha", ")", "+", "alpha", "\n", "", "", "return", "[", "\n", "base_lr", "\n", "*", "warmup_factor", "\n", "*", "self", ".", "gamma", "**", "bisect_right", "(", "self", ".", "milestones", ",", "self", ".", "last_epoch", ")", "\n", "for", "base_lr", "in", "self", ".", "base_lrs", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.solver.lr_scheduler.WarmupCosineLR.__init__": [[64, 76], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.solver.ranger.Ranger.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "optimizer", ",", "\n", "max_epochs", ",", "\n", "warmup_epochs", "=", "10", ",", "\n", "eta_min", "=", "1e-7", ",", "\n", "last_epoch", "=", "-", "1", ",", "\n", ")", ":", "\n", "        ", "self", ".", "max_epochs", "=", "max_epochs", "-", "1", "\n", "self", ".", "eta_min", "=", "eta_min", "\n", "self", ".", "warmup_epochs", "=", "warmup_epochs", "\n", "super", "(", "WarmupCosineLR", ",", "self", ")", ".", "__init__", "(", "optimizer", ",", "last_epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.solver.lr_scheduler.WarmupCosineLR.get_lr": [[78, 86], ["math.cos"], "methods", ["None"], ["", "def", "get_lr", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "last_epoch", "<", "self", ".", "warmup_epochs", ":", "\n", "            ", "lr", "=", "[", "base_lr", "*", "(", "self", ".", "last_epoch", "+", "1", ")", "/", "(", "self", ".", "warmup_epochs", "+", "1e-32", ")", "for", "base_lr", "in", "self", ".", "base_lrs", "]", "\n", "", "else", ":", "\n", "            ", "lr", "=", "[", "self", ".", "eta_min", "+", "(", "base_lr", "-", "self", ".", "eta_min", ")", "*", "\n", "(", "1", "+", "math", ".", "cos", "(", "math", ".", "pi", "*", "(", "self", ".", "last_epoch", "-", "self", ".", "warmup_epochs", ")", "/", "(", "self", ".", "max_epochs", "-", "self", ".", "warmup_epochs", ")", ")", ")", "/", "2", "\n", "for", "base_lr", "in", "self", ".", "base_lrs", "]", "\n", "", "return", "lr", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.solver.lr_scheduler.CosineStepLR.__init__": [[89, 104], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.solver.ranger.Ranger.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "optimizer", ",", "\n", "max_epochs", ",", "\n", "step_epochs", "=", "2", ",", "\n", "gamma", "=", "0.3", ",", "\n", "eta_min", "=", "0", ",", "\n", "last_epoch", "=", "-", "1", ",", "\n", ")", ":", "\n", "        ", "self", ".", "max_epochs", "=", "max_epochs", "\n", "self", ".", "eta_min", "=", "eta_min", "\n", "self", ".", "step_epochs", "=", "step_epochs", "\n", "self", ".", "gamma", "=", "gamma", "\n", "self", ".", "last_cosine_lr", "=", "0", "\n", "super", "(", "CosineStepLR", ",", "self", ")", ".", "__init__", "(", "optimizer", ",", "last_epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.solver.lr_scheduler.CosineStepLR.get_lr": [[106, 116], ["math.cos"], "methods", ["None"], ["", "def", "get_lr", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "last_epoch", "<", "self", ".", "max_epochs", "-", "self", ".", "step_epochs", ":", "\n", "            ", "lr", "=", "[", "self", ".", "eta_min", "+", "(", "base_lr", "-", "self", ".", "eta_min", ")", "*", "\n", "(", "1", "+", "math", ".", "cos", "(", "math", ".", "pi", "*", "(", "self", ".", "last_epoch", ")", "/", "(", "self", ".", "max_epochs", "-", "self", ".", "step_epochs", ")", ")", ")", "/", "2", "\n", "for", "base_lr", "in", "self", ".", "base_lrs", "]", "\n", "self", ".", "last_cosine_lr", "=", "lr", "\n", "", "else", ":", "\n", "            ", "lr", "=", "[", "self", ".", "gamma", "**", "(", "self", ".", "step_epochs", "-", "self", ".", "max_epochs", "+", "self", ".", "last_epoch", "+", "1", ")", "*", "base_lr", "for", "base_lr", "in", "self", ".", "last_cosine_lr", "]", "\n", "\n", "", "return", "lr", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.solver.lr_scheduler.CyclicCosineLR.__init__": [[119, 128], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.solver.ranger.Ranger.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "optimizer", ",", "\n", "cycle_epoch", ",", "\n", "cycle_decay", "=", "0.7", ",", "\n", "last_epoch", "=", "-", "1", ")", ":", "\n", "        ", "self", ".", "cycle_decay", "=", "cycle_decay", "\n", "self", ".", "cycle_epoch", "=", "cycle_epoch", "\n", "self", ".", "cur_count", "=", "0", "\n", "super", "(", "CyclicCosineLR", ",", "self", ")", ".", "__init__", "(", "optimizer", ",", "last_epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.solver.lr_scheduler.CyclicCosineLR.get_lr": [[129, 135], ["math.cos"], "methods", ["None"], ["", "def", "get_lr", "(", "self", ")", ":", "\n", "        ", "self", ".", "cur_count", "=", "(", "self", ".", "last_epoch", "+", "1", ")", "//", "self", ".", "cycle_epoch", "\n", "decay", "=", "self", ".", "cycle_decay", "**", "self", ".", "cur_count", "\n", "return", "[", "base_lr", "*", "decay", "*", "\n", "(", "1", "+", "math", ".", "cos", "(", "math", ".", "pi", "*", "(", "self", ".", "last_epoch", "%", "self", ".", "cycle_epoch", ")", "/", "self", ".", "cycle_epoch", ")", ")", "/", "2", "\n", "for", "base_lr", "in", "self", ".", "base_lrs", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.solver.lr_scheduler.build_lr_scheduler": [[138, 157], ["lr_scheduler.WarmupMultiStepLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "float", "lr_scheduler.WarmupCosineLR", "lr_scheduler.CyclicCosineLR", "float", "lr_scheduler.CosineStepLR", "torch.optim.lr_scheduler.MultiStepLR", "float"], "function", ["None"], ["", "", "def", "build_lr_scheduler", "(", "optimizer", ",", "lr_scheduler", ",", "cfg", ",", "last_epoch", ")", ":", "\n", "    ", "if", "lr_scheduler", "==", "'warmup_multi_step'", ":", "\n", "        ", "scheduler", "=", "WarmupMultiStepLR", "(", "optimizer", ",", "cfg", ".", "SOLVER", ".", "STEPS", ",", "cfg", ".", "SOLVER", ".", "GAMMA", ",", "cfg", ".", "SOLVER", ".", "WARMUP_FACTOR", ",", "\n", "cfg", ".", "SOLVER", ".", "WARMUP_ITERS", ",", "cfg", ".", "SOLVER", ".", "WARMUP_METHOD", ",", "last_epoch", "=", "last_epoch", ")", "\n", "", "elif", "lr_scheduler", "==", "'cosine'", ":", "\n", "        ", "scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "CosineAnnealingLR", "(", "\n", "optimizer", ",", "float", "(", "cfg", ".", "SOLVER", ".", "MAX_EPOCHS", ")", ",", "last_epoch", "=", "last_epoch", ")", "\n", "", "elif", "lr_scheduler", "==", "'warmup_cosine'", ":", "\n", "        ", "scheduler", "=", "WarmupCosineLR", "(", "optimizer", ",", "max_epochs", "=", "float", "(", "cfg", ".", "SOLVER", ".", "MAX_EPOCHS", ")", ",", "\n", "warmup_epochs", "=", "cfg", ".", "SOLVER", ".", "WARMUP_ITERS", ",", "last_epoch", "=", "last_epoch", ")", "\n", "", "elif", "lr_scheduler", "==", "'cyclic_cosine'", ":", "\n", "        ", "scheduler", "=", "CyclicCosineLR", "(", "optimizer", ",", "cfg", ".", "SOLVER", ".", "CYCLE_EPOCH", ")", "\n", "", "elif", "lr_scheduler", "==", "'cosine_step'", ":", "\n", "        ", "scheduler", "=", "CosineStepLR", "(", "optimizer", ",", "max_epochs", "=", "float", "(", "cfg", ".", "SOLVER", ".", "MAX_EPOCHS", ")", ",", "last_epoch", "=", "last_epoch", ")", "\n", "", "else", ":", "# multi-steps as default", "\n", "        ", "scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "MultiStepLR", "(", "\n", "optimizer", ",", "milestones", "=", "cfg", ".", "SOLVER", ".", "STEPS", ",", "gamma", "=", "cfg", ".", "SOLVER", ".", "GAMMA", ",", "last_epoch", "=", "last_epoch", ")", "\n", "\n", "", "return", "scheduler", "\n", "", ""]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.solver.swa.SWA.__init__": [[9, 116], ["swa.SWA._check_params", "collections.defaultdict", "ValueError", "ValueError", "ValueError", "warnings.warn"], "methods", ["home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.solver.swa.SWA._check_params"], ["    ", "def", "__init__", "(", "self", ",", "optimizer", ",", "swa_start", "=", "None", ",", "swa_freq", "=", "None", ",", "swa_lr", "=", "None", ")", ":", "\n", "        ", "r\"\"\"Implements Stochastic Weight Averaging (SWA).\n        Stochastic Weight Averaging was proposed in `Averaging Weights Leads to\n        Wider Optima and Better Generalization`_ by Pavel Izmailov, Dmitrii\n        Podoprikhin, Timur Garipov, Dmitry Vetrov and Andrew Gordon Wilson\n        (UAI 2018).\n        SWA is implemented as a wrapper class taking optimizer instance as input\n        and applying SWA on top of that optimizer.\n        SWA can be used in two modes: automatic and manual. In the automatic\n        mode SWA running averages are automatically updated every\n        :attr:`swa_freq` steps after :attr:`swa_start` steps of optimization. If\n        :attr:`swa_lr` is provided, the learning rate of the optimizer is reset\n        to :attr:`swa_lr` at every step starting from :attr:`swa_start`. To use\n        SWA in automatic mode provide values for both :attr:`swa_start` and\n        :attr:`swa_freq` arguments.\n        Alternatively, in the manual mode, use :meth:`update_swa` or\n        :meth:`update_swa_group` methods to update the SWA running averages.\n        In the end of training use `swap_swa_sgd` method to set the optimized\n        variables to the computed averages.\n        Args:\n            optimizer (torch.optim.Optimizer): optimizer to use with SWA\n            swa_start (int): number of steps before starting to apply SWA in\n                automatic mode; if None, manual mode is selected (default: None)\n            swa_freq (int): number of steps between subsequent updates of\n                SWA running averages in automatic mode; if None, manual mode is\n                selected (default: None)\n            swa_lr (float): learning rate to use starting from step swa_start\n                in automatic mode; if None, learning rate is not changed\n                (default: None)\n        Examples:\n            # >>> # automatic mode\n            # >>> base_opt = torch.optim.SGD(model.parameters(), lr=0.1)\n            # >>> opt = torchcontrib.optim.SWA(\n            # >>>                 base_opt, swa_start=10, swa_freq=5, swa_lr=0.05)\n            # >>> for _ in range(100):\n            # >>>     opt.zero_grad()\n            # >>>     loss_fn(model(input), target).backward()\n            # >>>     opt.step()\n            # >>> opt.swap_swa_sgd()\n            # >>> # manual mode\n            # >>> opt = torchcontrib.optim.SWA(base_opt)\n            # >>> for i in range(100):\n            # >>>     opt.zero_grad()\n            # >>>     loss_fn(model(input), target).backward()\n            # >>>     opt.step()\n            # >>>     if i > 10 and i % 5 == 0:\n            # >>>         opt.update_swa()\n            # >>> opt.swap_swa_sgd()\n        .. note::\n            SWA does not support parameter-specific values of :attr:`swa_start`,\n            :attr:`swa_freq` or :attr:`swa_lr`. In automatic mode SWA uses the\n            same :attr:`swa_start`, :attr:`swa_freq` and :attr:`swa_lr` for all\n            parameter groups. If needed, use manual mode with\n            :meth:`update_swa_group` to use different update schedules for\n            different parameter groups.\n        .. note::\n            Call :meth:`swap_swa_sgd` in the end of training to use the computed\n            running averages.\n        .. note::\n            If you are using SWA to optimize the parameters of a Neural Network\n            containing Batch Normalization layers, you need to update the\n            :attr:`running_mean` and :attr:`running_var` statistics of the\n            Batch Normalization module. You can do so by using\n            `torchcontrib.optim.swa.bn_update` utility.\n        .. note::\n            See the blogpost\n            https://pytorch.org/blog/stochastic-weight-averaging-in-pytorch/\n            for an extended description of this SWA implementation.\n        .. note::\n            The repo https://github.com/izmailovpavel/contrib_swa_examples\n            contains examples of using this SWA implementation.\n        .. _Averaging Weights Leads to Wider Optima and Better Generalization:\n            https://arxiv.org/abs/1803.05407\n        .. _Improving Consistency-Based Semi-Supervised Learning with Weight\n            Averaging:\n            https://arxiv.org/abs/1806.05594\n        \"\"\"", "\n", "self", ".", "_auto_mode", ",", "(", "self", ".", "swa_start", ",", "self", ".", "swa_freq", ")", "=", "self", ".", "_check_params", "(", "self", ",", "swa_start", ",", "swa_freq", ")", "\n", "self", ".", "swa_lr", "=", "swa_lr", "\n", "\n", "if", "self", ".", "_auto_mode", ":", "\n", "            ", "if", "swa_start", "<", "0", ":", "\n", "                ", "raise", "ValueError", "(", "\"Invalid swa_start: {}\"", ".", "format", "(", "swa_start", ")", ")", "\n", "", "if", "swa_freq", "<", "1", ":", "\n", "                ", "raise", "ValueError", "(", "\"Invalid swa_freq: {}\"", ".", "format", "(", "swa_freq", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "if", "self", ".", "swa_lr", "is", "not", "None", ":", "\n", "                ", "warnings", ".", "warn", "(", "\n", "\"Some of swa_start, swa_freq is None, ignoring swa_lr\"", ")", "\n", "# If not in auto mode make all swa parameters None", "\n", "", "self", ".", "swa_lr", "=", "None", "\n", "self", ".", "swa_start", "=", "None", "\n", "self", ".", "swa_freq", "=", "None", "\n", "\n", "", "if", "self", ".", "swa_lr", "is", "not", "None", "and", "self", ".", "swa_lr", "<", "0", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid SWA learning rate: {}\"", ".", "format", "(", "swa_lr", ")", ")", "\n", "\n", "", "self", ".", "optimizer", "=", "optimizer", "\n", "\n", "self", ".", "defaults", "=", "self", ".", "optimizer", ".", "defaults", "\n", "self", ".", "param_groups", "=", "self", ".", "optimizer", ".", "param_groups", "\n", "self", ".", "state", "=", "defaultdict", "(", "dict", ")", "\n", "self", ".", "opt_state", "=", "self", ".", "optimizer", ".", "state", "\n", "for", "group", "in", "self", ".", "param_groups", ":", "\n", "            ", "group", "[", "'n_avg'", "]", "=", "0", "\n", "group", "[", "'step_counter'", "]", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.solver.swa.SWA._check_params": [[117, 129], ["enumerate", "any", "warnings.warn", "all", "int", "warnings.warn", "any", "isinstance"], "methods", ["None"], ["", "", "@", "staticmethod", "\n", "def", "_check_params", "(", "self", ",", "swa_start", ",", "swa_freq", ")", ":", "\n", "        ", "params", "=", "[", "swa_start", ",", "swa_freq", "]", "\n", "params_none", "=", "[", "param", "is", "None", "for", "param", "in", "params", "]", "\n", "if", "not", "all", "(", "params_none", ")", "and", "any", "(", "params_none", ")", ":", "\n", "            ", "warnings", ".", "warn", "(", "\n", "\"Some of swa_start, swa_freq is None, ignoring other\"", ")", "\n", "", "for", "i", ",", "param", "in", "enumerate", "(", "params", ")", ":", "\n", "            ", "if", "param", "is", "not", "None", "and", "not", "isinstance", "(", "param", ",", "int", ")", ":", "\n", "                ", "params", "[", "i", "]", "=", "int", "(", "param", ")", "\n", "warnings", ".", "warn", "(", "\"Casting swa_start, swa_freq to int\"", ")", "\n", "", "", "return", "not", "any", "(", "params_none", ")", ",", "params", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.solver.swa.SWA._reset_lr_to_swa": [[130, 136], ["None"], "methods", ["None"], ["", "def", "_reset_lr_to_swa", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "swa_lr", "is", "None", ":", "\n", "            ", "return", "\n", "", "for", "param_group", "in", "self", ".", "param_groups", ":", "\n", "            ", "if", "param_group", "[", "'step_counter'", "]", ">=", "self", ".", "swa_start", ":", "\n", "                ", "param_group", "[", "'lr'", "]", "=", "self", ".", "swa_lr", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.solver.swa.SWA.update_swa_group": [[137, 165], ["buf.add_", "torch.zeros_like", "float"], "methods", ["None"], ["", "", "", "def", "update_swa_group", "(", "self", ",", "group", ")", ":", "\n", "        ", "r\"\"\"Updates the SWA running averages for the given parameter group.\n        Arguments:\n            param_group (dict): Specifies for what parameter group SWA running\n                averages should be updated\n        Examples:\n            # >>> # automatic mode\n            # >>> base_opt = torch.optim.SGD([{'params': [x]},\n            # >>>             {'params': [y], 'lr': 1e-3}], lr=1e-2, momentum=0.9)\n            # >>> opt = torchcontrib.optim.SWA(base_opt)\n            # >>> for i in range(100):\n            # >>>     opt.zero_grad()\n            # >>>     loss_fn(model(input), target).backward()\n            # >>>     opt.step()\n            # >>>     if i > 10 and i % 5 == 0:\n            # >>>         # Update SWA for the second parameter group\n            # >>>         opt.update_swa_group(opt.param_groups[1])\n            # >>> opt.swap_swa_sgd()\n        \"\"\"", "\n", "for", "p", "in", "group", "[", "'params'", "]", ":", "\n", "            ", "param_state", "=", "self", ".", "state", "[", "p", "]", "\n", "if", "'swa_buffer'", "not", "in", "param_state", ":", "\n", "                ", "param_state", "[", "'swa_buffer'", "]", "=", "torch", ".", "zeros_like", "(", "p", ".", "data", ")", "\n", "", "buf", "=", "param_state", "[", "'swa_buffer'", "]", "\n", "virtual_decay", "=", "1", "/", "float", "(", "group", "[", "\"n_avg\"", "]", "+", "1", ")", "\n", "diff", "=", "(", "p", ".", "data", "-", "buf", ")", "*", "virtual_decay", "\n", "buf", ".", "add_", "(", "diff", ")", "\n", "", "group", "[", "\"n_avg\"", "]", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.solver.swa.SWA.update_swa": [[166, 171], ["swa.SWA.update_swa_group"], "methods", ["home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.solver.swa.SWA.update_swa_group"], ["", "def", "update_swa", "(", "self", ")", ":", "\n", "        ", "r\"\"\"Updates the SWA running averages of all optimized parameters.\n        \"\"\"", "\n", "for", "group", "in", "self", ".", "param_groups", ":", "\n", "            ", "self", ".", "update_swa_group", "(", "group", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.solver.swa.SWA.swap_swa_sgd": [[172, 192], ["torch.empty_like", "torch.empty_like.copy_", "p.data.copy_", "buf.copy_", "warnings.warn"], "methods", ["None"], ["", "", "def", "swap_swa_sgd", "(", "self", ")", ":", "\n", "        ", "r\"\"\"Swaps the values of the optimized variables and swa buffers.\n        It's meant to be called in the end of training to use the collected\n        swa running averages. It can also be used to evaluate the running\n        averages during training; to continue training `swap_swa_sgd`\n        should be called again.\n        \"\"\"", "\n", "for", "group", "in", "self", ".", "param_groups", ":", "\n", "            ", "for", "p", "in", "group", "[", "'params'", "]", ":", "\n", "                ", "param_state", "=", "self", ".", "state", "[", "p", "]", "\n", "if", "'swa_buffer'", "not", "in", "param_state", ":", "\n", "# If swa wasn't applied we don't swap params", "\n", "                    ", "warnings", ".", "warn", "(", "\n", "\"SWA wasn't applied to param {}; skipping it\"", ".", "format", "(", "p", ")", ")", "\n", "continue", "\n", "", "buf", "=", "param_state", "[", "'swa_buffer'", "]", "\n", "tmp", "=", "torch", ".", "empty_like", "(", "p", ".", "data", ")", "\n", "tmp", ".", "copy_", "(", "p", ".", "data", ")", "\n", "p", ".", "data", ".", "copy_", "(", "buf", ")", "\n", "buf", ".", "copy_", "(", "tmp", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.solver.swa.SWA.step": [[193, 206], ["swa.SWA._reset_lr_to_swa", "swa.SWA.optimizer.step", "swa.SWA.update_swa_group"], "methods", ["home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.solver.swa.SWA._reset_lr_to_swa", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.solver.ranger.Ranger.step", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.solver.swa.SWA.update_swa_group"], ["", "", "", "def", "step", "(", "self", ",", "closure", "=", "None", ")", ":", "\n", "        ", "r\"\"\"Performs a single optimization step.\n        In automatic mode also updates SWA running averages.\n        \"\"\"", "\n", "self", ".", "_reset_lr_to_swa", "(", ")", "\n", "loss", "=", "self", ".", "optimizer", ".", "step", "(", "closure", ")", "\n", "for", "group", "in", "self", ".", "param_groups", ":", "\n", "            ", "group", "[", "\"step_counter\"", "]", "+=", "1", "\n", "steps", "=", "group", "[", "\"step_counter\"", "]", "\n", "if", "self", ".", "_auto_mode", ":", "\n", "                ", "if", "steps", ">", "self", ".", "swa_start", "and", "steps", "%", "self", ".", "swa_freq", "==", "0", ":", "\n", "                    ", "self", ".", "update_swa_group", "(", "group", ")", "\n", "", "", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.solver.swa.SWA.state_dict": [[207, 224], ["swa.SWA.optimizer.state_dict", "isinstance", "id", "swa.SWA.state.items"], "methods", ["home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.solver.swa.SWA.state_dict"], ["", "def", "state_dict", "(", "self", ")", ":", "\n", "        ", "r\"\"\"Returns the state of SWA as a :class:`dict`.\n        It contains three entries:\n            * opt_state - a dict holding current optimization state of the base\n                optimizer. Its content differs between optimizer classes.\n            * swa_state - a dict containing current state of SWA. For each\n                optimized variable it contains swa_buffer keeping the running\n                average of the variable\n            * param_groups - a dict containing all parameter groups\n        \"\"\"", "\n", "opt_state_dict", "=", "self", ".", "optimizer", ".", "state_dict", "(", ")", "\n", "swa_state", "=", "{", "(", "id", "(", "k", ")", "if", "isinstance", "(", "k", ",", "torch", ".", "Tensor", ")", "else", "k", ")", ":", "v", "\n", "for", "k", ",", "v", "in", "self", ".", "state", ".", "items", "(", ")", "}", "\n", "opt_state", "=", "opt_state_dict", "[", "\"state\"", "]", "\n", "param_groups", "=", "opt_state_dict", "[", "\"param_groups\"", "]", "\n", "return", "{", "\"opt_state\"", ":", "opt_state", ",", "\"swa_state\"", ":", "swa_state", ",", "\n", "\"param_groups\"", ":", "param_groups", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.solver.swa.SWA.load_state_dict": [[225, 238], ["super().load_state_dict", "swa.SWA.optimizer.load_state_dict"], "methods", ["home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.solver.swa.SWA.load_state_dict", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.solver.swa.SWA.load_state_dict"], ["", "def", "load_state_dict", "(", "self", ",", "state_dict", ")", ":", "\n", "        ", "r\"\"\"Loads the optimizer state.\n        Args:\n            state_dict (dict): SWA optimizer state. Should be an object returned\n                from a call to `state_dict`.\n        \"\"\"", "\n", "swa_state_dict", "=", "{", "\"state\"", ":", "state_dict", "[", "\"swa_state\"", "]", ",", "\n", "\"param_groups\"", ":", "state_dict", "[", "\"param_groups\"", "]", "}", "\n", "opt_state_dict", "=", "{", "\"state\"", ":", "state_dict", "[", "\"opt_state\"", "]", ",", "\n", "\"param_groups\"", ":", "state_dict", "[", "\"param_groups\"", "]", "}", "\n", "super", "(", "SWA", ",", "self", ")", ".", "load_state_dict", "(", "swa_state_dict", ")", "\n", "self", ".", "optimizer", ".", "load_state_dict", "(", "opt_state_dict", ")", "\n", "self", ".", "opt_state", "=", "self", ".", "optimizer", ".", "state", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.solver.swa.SWA.add_param_group": [[239, 251], ["swa.SWA.optimizer.add_param_group"], "methods", ["home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.solver.swa.SWA.add_param_group"], ["", "def", "add_param_group", "(", "self", ",", "param_group", ")", ":", "\n", "        ", "r\"\"\"Add a param group to the :class:`Optimizer` s `param_groups`.\n        This can be useful when fine tuning a pre-trained network as frozen\n        layers can be made trainable and added to the :class:`Optimizer` as\n        training progresses.\n        Args:\n            param_group (dict): Specifies what Tensors should be optimized along\n            with group specific optimization options.\n        \"\"\"", "\n", "param_group", "[", "'n_avg'", "]", "=", "0", "\n", "param_group", "[", "'step_counter'", "]", "=", "0", "\n", "self", ".", "optimizer", ".", "add_param_group", "(", "param_group", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.solver.swa.SWA.bn_update": [[252, 292], ["model.train", "model.apply", "model.apply", "model.apply", "model.train", "swa._check_bn", "isinstance", "input.to.to.size", "momenta.keys", "model", "swa._get_momenta", "float", "input.to.to.to", "swa._set_momenta"], "methods", ["home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.tools.train.train", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.tools.train.train", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.solver.swa._check_bn", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.solver.swa._get_momenta", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.solver.swa._set_momenta"], ["", "@", "staticmethod", "\n", "def", "bn_update", "(", "loader", ",", "model", ",", "device", "=", "None", ")", ":", "\n", "        ", "r\"\"\"Updates BatchNorm running_mean, running_var buffers in the model.\n        It performs one pass over data in `loader` to estimate the activation\n        statistics for BatchNorm layers in the model.\n        Args:\n            loader (torch.utils.data.DataLoader): dataset loader to compute the\n                activation statistics on. Each data batch should be either a\n                tensor, or a list/tuple whose first element is a tensor\n                containing data.\n            model (torch.nn.Module): model for which we seek to update BatchNorm\n                statistics.\n            device (torch.device, optional): If set, data will be trasferred to\n                :attr:`device` before being passed into :attr:`model`.\n        \"\"\"", "\n", "if", "not", "_check_bn", "(", "model", ")", ":", "\n", "            ", "return", "\n", "", "was_training", "=", "model", ".", "training", "\n", "model", ".", "train", "(", ")", "\n", "momenta", "=", "{", "}", "\n", "model", ".", "apply", "(", "_reset_bn", ")", "\n", "model", ".", "apply", "(", "lambda", "module", ":", "_get_momenta", "(", "module", ",", "momenta", ")", ")", "\n", "n", "=", "0", "\n", "for", "input", "in", "loader", ":", "\n", "            ", "if", "isinstance", "(", "input", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "                ", "input", "=", "input", "[", "0", "]", "\n", "", "b", "=", "input", ".", "size", "(", "0", ")", "\n", "\n", "momentum", "=", "b", "/", "float", "(", "n", "+", "b", ")", "\n", "for", "module", "in", "momenta", ".", "keys", "(", ")", ":", "\n", "                ", "module", ".", "momentum", "=", "momentum", "\n", "\n", "", "if", "device", "is", "not", "None", ":", "\n", "                ", "input", "=", "input", ".", "to", "(", "device", ")", "\n", "\n", "", "model", "(", "input", ")", "\n", "n", "+=", "b", "\n", "\n", "", "model", ".", "apply", "(", "lambda", "module", ":", "_set_momenta", "(", "module", ",", "momenta", ")", ")", "\n", "model", ".", "train", "(", "was_training", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.solver.swa._check_bn_apply": [[295, 298], ["issubclass"], "function", ["None"], ["", "", "def", "_check_bn_apply", "(", "module", ",", "flag", ")", ":", "\n", "    ", "if", "issubclass", "(", "module", ".", "__class__", ",", "torch", ".", "nn", ".", "modules", ".", "batchnorm", ".", "_BatchNorm", ")", ":", "\n", "        ", "flag", "[", "0", "]", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.solver.swa._check_bn": [[300, 304], ["model.apply", "swa._check_bn_apply"], "function", ["home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.solver.swa._check_bn_apply"], ["", "", "def", "_check_bn", "(", "model", ")", ":", "\n", "    ", "flag", "=", "[", "False", "]", "\n", "model", ".", "apply", "(", "lambda", "module", ":", "_check_bn_apply", "(", "module", ",", "flag", ")", ")", "\n", "return", "flag", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.solver.swa._reset_bn": [[306, 310], ["issubclass", "torch.zeros_like", "torch.ones_like"], "function", ["None"], ["", "def", "_reset_bn", "(", "module", ")", ":", "\n", "    ", "if", "issubclass", "(", "module", ".", "__class__", ",", "torch", ".", "nn", ".", "modules", ".", "batchnorm", ".", "_BatchNorm", ")", ":", "\n", "        ", "module", ".", "running_mean", "=", "torch", ".", "zeros_like", "(", "module", ".", "running_mean", ")", "\n", "module", ".", "running_var", "=", "torch", ".", "ones_like", "(", "module", ".", "running_var", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.solver.swa._get_momenta": [[312, 315], ["issubclass"], "function", ["None"], ["", "", "def", "_get_momenta", "(", "module", ",", "momenta", ")", ":", "\n", "    ", "if", "issubclass", "(", "module", ".", "__class__", ",", "torch", ".", "nn", ".", "modules", ".", "batchnorm", ".", "_BatchNorm", ")", ":", "\n", "        ", "momenta", "[", "module", "]", "=", "module", ".", "momentum", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.solver.swa._set_momenta": [[317, 320], ["issubclass"], "function", ["None"], ["", "", "def", "_set_momenta", "(", "module", ",", "momenta", ")", ":", "\n", "    ", "if", "issubclass", "(", "module", ".", "__class__", ",", "torch", ".", "nn", ".", "modules", ".", "batchnorm", ".", "_BatchNorm", ")", ":", "\n", "        ", "module", ".", "momentum", "=", "momenta", "[", "module", "]", "", "", "", ""]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.solver.ranger.Ranger.__init__": [[28, 63], ["dict", "torch.optim.optimizer.Optimizer.__init__", "ValueError", "ValueError", "ValueError", "ValueError", "range"], "methods", ["home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.solver.ranger.Ranger.__init__"], ["    ", "def", "__init__", "(", "self", ",", "params", ",", "lr", "=", "1e-3", ",", "alpha", "=", "0.5", ",", "k", "=", "6", ",", "N_sma_threshhold", "=", "5", ",", "betas", "=", "(", ".95", ",", "0.999", ")", ",", "eps", "=", "1e-5", ",", "weight_decay", "=", "0", ")", ":", "\n", "#parameter checks", "\n", "        ", "if", "not", "0.0", "<=", "alpha", "<=", "1.0", ":", "\n", "            ", "raise", "ValueError", "(", "f'Invalid slow update rate: {alpha}'", ")", "\n", "", "if", "not", "1", "<=", "k", ":", "\n", "            ", "raise", "ValueError", "(", "f'Invalid lookahead steps: {k}'", ")", "\n", "", "if", "not", "lr", ">", "0", ":", "\n", "            ", "raise", "ValueError", "(", "f'Invalid Learning Rate: {lr}'", ")", "\n", "", "if", "not", "eps", ">", "0", ":", "\n", "            ", "raise", "ValueError", "(", "f'Invalid eps: {eps}'", ")", "\n", "\n", "#parameter comments:", "\n", "# beta1 (momentum) of .95 seems to work better than .90...", "\n", "#N_sma_threshold of 5 seems better in testing than 4.", "\n", "#In both cases, worth testing on your dataset (.90 vs .95, 4 vs 5) to make sure which works best for you.", "\n", "\n", "#prep defaults and init torch.optim base", "\n", "", "defaults", "=", "dict", "(", "lr", "=", "lr", ",", "alpha", "=", "alpha", ",", "k", "=", "k", ",", "step_counter", "=", "0", ",", "betas", "=", "betas", ",", "N_sma_threshhold", "=", "N_sma_threshhold", ",", "eps", "=", "eps", ",", "weight_decay", "=", "weight_decay", ")", "\n", "super", "(", ")", ".", "__init__", "(", "params", ",", "defaults", ")", "\n", "\n", "#adjustable threshold", "\n", "self", ".", "N_sma_threshhold", "=", "N_sma_threshhold", "\n", "\n", "#now we can get to work...", "\n", "#removed as we now use step from RAdam...no need for duplicate step counting", "\n", "#for group in self.param_groups:", "\n", "#    group[\"step_counter\"] = 0", "\n", "#print(\"group step counter init\")", "\n", "\n", "#look ahead params", "\n", "self", ".", "alpha", "=", "alpha", "\n", "self", ".", "k", "=", "k", "\n", "\n", "#radam buffer for state", "\n", "self", ".", "radam_buffer", "=", "[", "[", "None", ",", "None", ",", "None", "]", "for", "ind", "in", "range", "(", "10", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.solver.ranger.Ranger.__setstate__": [[77, 80], ["print", "super().__setstate__"], "methods", ["home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.solver.ranger.Ranger.__setstate__"], ["", "def", "__setstate__", "(", "self", ",", "state", ")", ":", "\n", "        ", "print", "(", "\"set state called\"", ")", "\n", "super", "(", "Ranger", ",", "self", ")", ".", "__setstate__", "(", "state", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.solver.ranger.Ranger.step": [[82, 166], ["p.grad.data.float", "p.data.float", "exp_avg_sq.mul_().addcmul_", "exp_avg.mul_().add_", "p.data.copy_", "RuntimeError", "len", "torch.zeros_like", "torch.zeros_like", "torch.empty_like", "state[].copy_", "state[].type_as", "state[].type_as", "p.data.float.add_", "exp_avg_sq.sqrt().add_", "p.data.float.addcdiv_", "p.data.float.add_", "slow_p.add_", "p.data.copy_", "exp_avg_sq.mul_", "exp_avg.mul_", "int", "math.sqrt", "exp_avg_sq.sqrt"], "methods", ["None"], ["", "def", "step", "(", "self", ",", "closure", "=", "None", ")", ":", "\n", "        ", "loss", "=", "None", "\n", "#note - below is commented out b/c I have other work that passes back the loss as a float, and thus not a callable closure.", "\n", "#Uncomment if you need to use the actual closure...", "\n", "\n", "#if closure is not None:", "\n", "#loss = closure()", "\n", "\n", "#Evaluate averages and grad, update param tensors", "\n", "for", "group", "in", "self", ".", "param_groups", ":", "\n", "\n", "            ", "for", "p", "in", "group", "[", "'params'", "]", ":", "\n", "                ", "if", "p", ".", "grad", "is", "None", ":", "\n", "                    ", "continue", "\n", "", "grad", "=", "p", ".", "grad", ".", "data", ".", "float", "(", ")", "\n", "if", "grad", ".", "is_sparse", ":", "\n", "                    ", "raise", "RuntimeError", "(", "'Ranger optimizer does not support sparse gradients'", ")", "\n", "\n", "", "p_data_fp32", "=", "p", ".", "data", ".", "float", "(", ")", "\n", "\n", "state", "=", "self", ".", "state", "[", "p", "]", "#get state dict for this param", "\n", "\n", "if", "len", "(", "state", ")", "==", "0", ":", "#if first time to run...init dictionary with our desired entries", "\n", "#if self.first_run_check==0:", "\n", "#self.first_run_check=1", "\n", "#print(\"Initializing slow buffer...should not see this at load from saved model!\")", "\n", "                    ", "state", "[", "'step'", "]", "=", "0", "\n", "state", "[", "'exp_avg'", "]", "=", "torch", ".", "zeros_like", "(", "p_data_fp32", ")", "\n", "state", "[", "'exp_avg_sq'", "]", "=", "torch", ".", "zeros_like", "(", "p_data_fp32", ")", "\n", "\n", "#look ahead weight storage now in state dict", "\n", "state", "[", "'slow_buffer'", "]", "=", "torch", ".", "empty_like", "(", "p", ".", "data", ")", "\n", "state", "[", "'slow_buffer'", "]", ".", "copy_", "(", "p", ".", "data", ")", "\n", "\n", "", "else", ":", "\n", "                    ", "state", "[", "'exp_avg'", "]", "=", "state", "[", "'exp_avg'", "]", ".", "type_as", "(", "p_data_fp32", ")", "\n", "state", "[", "'exp_avg_sq'", "]", "=", "state", "[", "'exp_avg_sq'", "]", ".", "type_as", "(", "p_data_fp32", ")", "\n", "\n", "#begin computations", "\n", "", "exp_avg", ",", "exp_avg_sq", "=", "state", "[", "'exp_avg'", "]", ",", "state", "[", "'exp_avg_sq'", "]", "\n", "beta1", ",", "beta2", "=", "group", "[", "'betas'", "]", "\n", "\n", "#compute variance mov avg", "\n", "exp_avg_sq", ".", "mul_", "(", "beta2", ")", ".", "addcmul_", "(", "1", "-", "beta2", ",", "grad", ",", "grad", ")", "\n", "#compute mean moving avg", "\n", "exp_avg", ".", "mul_", "(", "beta1", ")", ".", "add_", "(", "1", "-", "beta1", ",", "grad", ")", "\n", "\n", "state", "[", "'step'", "]", "+=", "1", "\n", "\n", "\n", "buffered", "=", "self", ".", "radam_buffer", "[", "int", "(", "state", "[", "'step'", "]", "%", "10", ")", "]", "\n", "if", "state", "[", "'step'", "]", "==", "buffered", "[", "0", "]", ":", "\n", "                    ", "N_sma", ",", "step_size", "=", "buffered", "[", "1", "]", ",", "buffered", "[", "2", "]", "\n", "", "else", ":", "\n", "                    ", "buffered", "[", "0", "]", "=", "state", "[", "'step'", "]", "\n", "beta2_t", "=", "beta2", "**", "state", "[", "'step'", "]", "\n", "N_sma_max", "=", "2", "/", "(", "1", "-", "beta2", ")", "-", "1", "\n", "N_sma", "=", "N_sma_max", "-", "2", "*", "state", "[", "'step'", "]", "*", "beta2_t", "/", "(", "1", "-", "beta2_t", ")", "\n", "buffered", "[", "1", "]", "=", "N_sma", "\n", "if", "N_sma", ">", "self", ".", "N_sma_threshhold", ":", "\n", "                        ", "step_size", "=", "math", ".", "sqrt", "(", "(", "1", "-", "beta2_t", ")", "*", "(", "N_sma", "-", "4", ")", "/", "(", "N_sma_max", "-", "4", ")", "*", "(", "N_sma", "-", "2", ")", "/", "N_sma", "*", "N_sma_max", "/", "(", "N_sma_max", "-", "2", ")", ")", "/", "(", "1", "-", "beta1", "**", "state", "[", "'step'", "]", ")", "\n", "", "else", ":", "\n", "                        ", "step_size", "=", "1.0", "/", "(", "1", "-", "beta1", "**", "state", "[", "'step'", "]", ")", "\n", "", "buffered", "[", "2", "]", "=", "step_size", "\n", "\n", "", "if", "group", "[", "'weight_decay'", "]", "!=", "0", ":", "\n", "                    ", "p_data_fp32", ".", "add_", "(", "-", "group", "[", "'weight_decay'", "]", "*", "group", "[", "'lr'", "]", ",", "p_data_fp32", ")", "\n", "\n", "", "if", "N_sma", ">", "self", ".", "N_sma_threshhold", ":", "\n", "                    ", "denom", "=", "exp_avg_sq", ".", "sqrt", "(", ")", ".", "add_", "(", "group", "[", "'eps'", "]", ")", "\n", "p_data_fp32", ".", "addcdiv_", "(", "-", "step_size", "*", "group", "[", "'lr'", "]", ",", "exp_avg", ",", "denom", ")", "\n", "", "else", ":", "\n", "                    ", "p_data_fp32", ".", "add_", "(", "-", "step_size", "*", "group", "[", "'lr'", "]", ",", "exp_avg", ")", "\n", "\n", "", "p", ".", "data", ".", "copy_", "(", "p_data_fp32", ")", "\n", "\n", "#integrated look ahead...", "\n", "#we do it at the param level instead of group level", "\n", "if", "state", "[", "'step'", "]", "%", "group", "[", "'k'", "]", "==", "0", ":", "\n", "                    ", "slow_p", "=", "state", "[", "'slow_buffer'", "]", "#get access to slow param tensor", "\n", "slow_p", ".", "add_", "(", "self", ".", "alpha", ",", "p", ".", "data", "-", "slow_p", ")", "#(fast weights - slow weights) * alpha", "\n", "p", ".", "data", ".", "copy_", "(", "slow_p", ")", "#copy interpolated weights to RAdam param tensor", "\n", "\n", "", "", "", "return", "loss", "", "", "", ""]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.tools.train.train": [[25, 71], ["lib.data.make_data_loader", "lib.modeling.build_model", "lib.solver.make_optimizer", "lib.layers.make_loss", "lib.solver.build_lr_scheduler", "lib.engine.train_net.do_train", "lib.modeling.build_model.load_param", "torch.load", "lib.modeling.build_model.load_state_dict", "lib.modeling.build_model.cuda", "lib.solver.make_optimizer.load_state_dict", "print", "print", "lib.config.cfg"], "function", ["home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.data.build.make_data_loader", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.modeling.__init__.build_model", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.solver.build.make_optimizer", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.layers.build.make_loss", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.solver.lr_scheduler.build_lr_scheduler", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.engine.train_net.do_train", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.regnet.regnet.RegNet.load_param", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.solver.swa.SWA.load_state_dict", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.solver.swa.SWA.load_state_dict"], ["def", "train", "(", "cfg", ")", ":", "\n", "# prepare dataset", "\n", "    ", "train_loader", ",", "val_loader", ",", "num_query", ",", "num_classes", ",", "dataset", "=", "make_data_loader", "(", "cfg", ")", "\n", "\n", "# prepare model", "\n", "model", "=", "build_model", "(", "cfg", ",", "num_classes", ")", "\n", "optimizer", "=", "make_optimizer", "(", "cfg", ",", "model", ")", "\n", "\n", "# scheduler = WarmupMultiStepLR(optimizer, cfg.SOLVER.STEPS, cfg.SOLVER.GAMMA, cfg.SOLVER.WARMUP_FACTOR,", "\n", "#                               cfg.SOLVER.WARMUP_ITERS, cfg.SOLVER.WARMUP_METHOD)", "\n", "\n", "loss_func", "=", "make_loss", "(", "cfg", ",", "num_classes", ")", "# modified by gu", "\n", "\n", "# Add for using self trained model", "\n", "if", "cfg", ".", "MODEL", ".", "PRETRAIN_CHOICE", "==", "'imagenet'", ":", "\n", "        ", "start_epoch", "=", "0", "\n", "last_epoch", "=", "-", "1", "\n", "", "elif", "cfg", ".", "MODEL", ".", "PRETRAIN_CHOICE", "==", "'finetune'", ":", "\n", "        ", "start_epoch", "=", "0", "\n", "last_epoch", "=", "-", "1", "\n", "model", ".", "load_param", "(", "cfg", ".", "MODEL", ".", "PRETRAIN_PATH", ",", "skip_fc", "=", "False", ")", "\n", "", "elif", "cfg", ".", "MODEL", ".", "PRETRAIN_CHOICE", "==", "'resume'", ":", "\n", "        ", "checkpoint", "=", "torch", ".", "load", "(", "cfg", ".", "MODEL", ".", "PRETRAIN_PATH", ",", "map_location", "=", "'cuda'", ")", "\n", "start_epoch", "=", "checkpoint", "[", "'epoch'", "]", "\n", "last_epoch", "=", "start_epoch", "\n", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'state_dict'", "]", ")", "\n", "model", ".", "cuda", "(", ")", "\n", "#optimizer = make_optimizer(cfg, model)", "\n", "optimizer", ".", "load_state_dict", "(", "checkpoint", "[", "'optimizer'", "]", ")", "\n", "print", "(", "'resume from {}'", ".", "format", "(", "cfg", ".", "MODEL", ".", "PRETRAIN_PATH", ")", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "'Only support pretrain_choice for imagenet and self, but got {}'", ".", "format", "(", "cfg", ".", "MODEL", ".", "PRETRAIN_CHOICE", ")", ")", "\n", "\n", "", "scheduler", "=", "build_lr_scheduler", "(", "optimizer", ",", "cfg", ".", "SOLVER", ".", "LR_SCHEDULER", ",", "cfg", ",", "last_epoch", ")", "\n", "\n", "do_train", "(", "\n", "cfg", ",", "\n", "model", ",", "\n", "dataset", ",", "\n", "train_loader", ",", "\n", "val_loader", ",", "\n", "optimizer", ",", "\n", "scheduler", ",", "# modify for using self trained model", "\n", "loss_func", ",", "\n", "num_query", ",", "\n", "start_epoch", "# add for using self trained model", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.tools.train.main": [[74, 109], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "lib.config.cfg.merge_from_list", "lib.config.cfg.freeze", "lib.utils.logger.setup_logger", "lib.utils.logger.setup_logger.info", "lib.utils.logger.setup_logger.info", "lib.utils.logger.setup_logger.info", "train.train", "int", "lib.config.cfg.merge_from_file", "os.makedirs", "lib.utils.logger.setup_logger.info", "os.path.exists"], "function", ["home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.utils.logger.setup_logger", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.tools.train.train"], ["", "def", "main", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "\"ReID Baseline Training\"", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--config_file\"", ",", "default", "=", "\"./configs/debug.yml\"", ",", "help", "=", "\"path to config file\"", ",", "type", "=", "str", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\"opts\"", ",", "help", "=", "\"Modify config options using the command-line\"", ",", "default", "=", "None", ",", "\n", "nargs", "=", "argparse", ".", "REMAINDER", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "num_gpus", "=", "int", "(", "os", ".", "environ", "[", "\"WORLD_SIZE\"", "]", ")", "if", "\"WORLD_SIZE\"", "in", "os", ".", "environ", "else", "1", "\n", "\n", "if", "args", ".", "config_file", "!=", "\"\"", ":", "\n", "        ", "cfg", ".", "merge_from_file", "(", "args", ".", "config_file", ")", "\n", "", "cfg", ".", "merge_from_list", "(", "args", ".", "opts", ")", "\n", "cfg", ".", "freeze", "(", ")", "\n", "\n", "output_dir", "=", "cfg", ".", "OUTPUT_DIR", "\n", "if", "output_dir", "and", "not", "os", ".", "path", ".", "exists", "(", "output_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "output_dir", ")", "\n", "\n", "", "logger", "=", "setup_logger", "(", "\"reid_baseline\"", ",", "output_dir", ",", "0", ")", "\n", "logger", ".", "info", "(", "\"Using {} GPUS\"", ".", "format", "(", "num_gpus", ")", ")", "\n", "logger", ".", "info", "(", "args", ")", "\n", "\n", "if", "args", ".", "config_file", "!=", "\"\"", ":", "\n", "        ", "logger", ".", "info", "(", "\"Loaded configuration file {}\"", ".", "format", "(", "args", ".", "config_file", ")", ")", "\n", "# with open(args.config_file, 'r') as cf:", "\n", "#     config_str = \"\\n\" + cf.read()", "\n", "#     logger.info(config_str)", "\n", "", "logger", ".", "info", "(", "\"Running with config:\\n{}\"", ".", "format", "(", "cfg", ")", ")", "\n", "\n", "if", "cfg", ".", "MODEL", ".", "DEVICE", "==", "\"cuda\"", ":", "\n", "        ", "os", ".", "environ", "[", "'CUDA_VISIBLE_DEVICES'", "]", "=", "cfg", ".", "MODEL", ".", "DEVICE_ID", "# new add by gu", "\n", "", "cudnn", ".", "benchmark", "=", "True", "\n", "train", "(", "cfg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.tools.test.main": [[23, 64], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "lib.config.cfg.merge_from_list", "lib.config.cfg.freeze", "lib.utils.logger.setup_logger", "lib.utils.logger.setup_logger.info", "lib.utils.logger.setup_logger.info", "lib.utils.logger.setup_logger.info", "lib.data.make_data_loader", "lib.modeling.build_model", "lib.modeling.build_model.load_param", "lib.engine.inference.inference", "int", "lib.config.cfg.merge_from_file", "os.mkdir", "lib.utils.logger.setup_logger.info", "os.path.exists"], "function", ["home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.utils.logger.setup_logger", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.data.build.make_data_loader", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.modeling.__init__.build_model", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.regnet.regnet.RegNet.load_param", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.engine.inference.inference"], ["def", "main", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "\"ReID Baseline Inference\"", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--config_file\"", ",", "default", "=", "\"./configs/debug.yml\"", ",", "help", "=", "\"path to config file\"", ",", "type", "=", "str", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\"opts\"", ",", "help", "=", "\"Modify config options using the command-line\"", ",", "default", "=", "None", ",", "\n", "nargs", "=", "argparse", ".", "REMAINDER", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "num_gpus", "=", "int", "(", "os", ".", "environ", "[", "\"WORLD_SIZE\"", "]", ")", "if", "\"WORLD_SIZE\"", "in", "os", ".", "environ", "else", "1", "\n", "\n", "if", "args", ".", "config_file", "!=", "\"\"", ":", "\n", "        ", "cfg", ".", "merge_from_file", "(", "args", ".", "config_file", ")", "\n", "", "cfg", ".", "merge_from_list", "(", "args", ".", "opts", ")", "\n", "cfg", ".", "freeze", "(", ")", "\n", "\n", "output_dir", "=", "cfg", ".", "OUTPUT_DIR", "\n", "if", "output_dir", "and", "not", "os", ".", "path", ".", "exists", "(", "output_dir", ")", ":", "\n", "        ", "mkdir", "(", "output_dir", ")", "\n", "\n", "", "logger", "=", "setup_logger", "(", "\"reid_baseline\"", ",", "output_dir", ",", "0", ")", "\n", "logger", ".", "info", "(", "\"Using {} GPUS\"", ".", "format", "(", "num_gpus", ")", ")", "\n", "logger", ".", "info", "(", "args", ")", "\n", "\n", "if", "args", ".", "config_file", "!=", "\"\"", ":", "\n", "        ", "logger", ".", "info", "(", "\"Loaded configuration file {}\"", ".", "format", "(", "args", ".", "config_file", ")", ")", "\n", "# with open(args.config_file, 'r') as cf:", "\n", "#     config_str = \"\\n\" + cf.read()", "\n", "#     logger.info(config_str)", "\n", "", "logger", ".", "info", "(", "\"Running with config:\\n{}\"", ".", "format", "(", "cfg", ")", ")", "\n", "\n", "if", "cfg", ".", "MODEL", ".", "DEVICE", "==", "\"cuda\"", ":", "\n", "        ", "os", ".", "environ", "[", "'CUDA_VISIBLE_DEVICES'", "]", "=", "cfg", ".", "MODEL", ".", "DEVICE_ID", "\n", "", "cudnn", ".", "benchmark", "=", "True", "\n", "\n", "train_loader", ",", "val_loader", ",", "num_query", ",", "num_classes", ",", "dataset", "=", "make_data_loader", "(", "cfg", ")", "\n", "model", "=", "build_model", "(", "cfg", ",", "num_classes", ")", "\n", "model", ".", "load_param", "(", "cfg", ".", "TEST", ".", "WEIGHT", ")", "\n", "\n", "inference", "(", "cfg", ",", "model", ",", "val_loader", ",", "num_query", ",", "dataset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.tools.vis_actmap.vis_actmap": [[19, 64], ["model.to", "model.eval", "os.path.join", "os.path.exists", "os.mkdir", "torch.no_grad", "enumerate", "data.cuda.cuda", "model", "range", "numpy.concatenate", "cv2.imwrite", "model.size", "featmap[].detach().cpu().numpy", "cv2.resize", "lib.utils.bbox_utils.localize_from_map", "numpy.uint8", "cv2.applyColorMap", "cv2.imread", "cv2.resize", "lib.utils.bbox_utils.draw_bbox", "overlapped.astype.astype", "np.concatenate.append", "os.path.join", "numpy.floor", "featmap[].detach().cpu", "numpy.min", "numpy.max", "numpy.min", "featmap[].detach", "lib.config.cfg"], "function", ["home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.utils.bbox_utils.localize_from_map", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.utils.bbox_utils.draw_bbox"], ["def", "vis_actmap", "(", "model", ",", "cfg", ",", "val_loader", ",", "max_num", "=", "100", ")", ":", "\n", "    ", "device", "=", "cfg", ".", "MODEL", ".", "DEVICE", "\n", "model", ".", "to", "(", "device", ")", "\n", "model", ".", "eval", "(", ")", "\n", "out_dir", "=", "os", ".", "path", ".", "join", "(", "cfg", ".", "OUTPUT_DIR", ",", "'actmap'", ")", "\n", "\n", "img_size", "=", "cfg", ".", "INPUT", ".", "SIZE_TEST", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "out_dir", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "out_dir", ")", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "i", ",", "batch", "in", "enumerate", "(", "val_loader", ")", ":", "\n", "            ", "if", "i", ">=", "max_num", ":", "\n", "                ", "break", "\n", "", "data", ",", "pid", ",", "camid", ",", "img_path", "=", "batch", "\n", "data", "=", "data", ".", "cuda", "(", ")", "\n", "featmap", "=", "model", "(", "data", ",", "return_featmap", "=", "True", ")", "# N*2048*7*7", "\n", "featmap", "=", "(", "featmap", "**", "2", ")", ".", "sum", "(", "1", ")", "# N*1*7*7", "\n", "canvas", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "featmap", ".", "size", "(", "0", ")", ")", ":", "\n", "                ", "fm", "=", "featmap", "[", "j", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "# something is not right!", "\n", "fm", "[", "0", ":", "3", ",", "0", ":", "3", "]", "=", "0", "\n", "fm", "[", "0", ",", "15", "]", "=", "0", "\n", "fm", "[", "15", ",", "0", "]", "=", "0", "\n", "fm", "[", "15", ",", "15", "]", "=", "0", "\n", "\n", "fm", "=", "cv2", ".", "resize", "(", "fm", ",", "(", "img_size", "[", "1", "]", ",", "img_size", "[", "0", "]", ")", ")", "\n", "fm", "=", "255", "*", "(", "fm", "-", "np", ".", "min", "(", "fm", ")", ")", "/", "(", "\n", "np", ".", "max", "(", "fm", ")", "-", "np", ".", "min", "(", "fm", ")", "+", "1e-12", "\n", ")", "\n", "bbox", "=", "localize_from_map", "(", "fm", ",", "threshold_ratio", "=", "1.0", ")", "\n", "fm", "=", "np", ".", "uint8", "(", "np", ".", "floor", "(", "fm", ")", ")", "\n", "fm", "=", "cv2", ".", "applyColorMap", "(", "fm", ",", "cv2", ".", "COLORMAP_JET", ")", "\n", "\n", "img", "=", "cv2", ".", "imread", "(", "img_path", "[", "j", "]", ")", "\n", "img", "=", "cv2", ".", "resize", "(", "img", ",", "(", "img_size", "[", "1", "]", ",", "img_size", "[", "0", "]", ")", ")", "\n", "\n", "overlapped", "=", "img", "*", "0.3", "+", "fm", "*", "0.7", "\n", "overlapped", "=", "draw_bbox", "(", "overlapped", ",", "[", "bbox", "]", ")", "\n", "\n", "overlapped", "=", "overlapped", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "canvas", ".", "append", "(", "overlapped", ")", "\n", "", "canvas", "=", "np", ".", "concatenate", "(", "canvas", "[", ":", "4", "]", ",", "axis", "=", "1", ")", "#.reshape([-1, 2048, 3])", "\n", "cv2", ".", "imwrite", "(", "os", ".", "path", ".", "join", "(", "out_dir", ",", "'{}.jpg'", ".", "format", "(", "i", ")", ")", ",", "canvas", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.tools.vis_actmap.main": [[67, 108], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "lib.config.cfg.merge_from_list", "lib.config.cfg.freeze", "lib.utils.logger.setup_logger", "lib.utils.logger.setup_logger.info", "lib.utils.logger.setup_logger.info", "lib.utils.logger.setup_logger.info", "lib.data.make_data_loader", "lib.modeling.build_model", "lib.modeling.build_model.load_param", "vis_actmap.vis_actmap", "int", "lib.config.cfg.merge_from_file", "os.mkdir", "lib.utils.logger.setup_logger.info", "os.path.exists"], "function", ["home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.utils.logger.setup_logger", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.data.build.make_data_loader", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.modeling.__init__.build_model", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.regnet.regnet.RegNet.load_param", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.aicity20.weakly_supervised_crop_aug.vis_actmap"], ["", "", "", "def", "main", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "\"ReID Baseline Inference\"", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--config_file\"", ",", "default", "=", "\"./configs/debug.yml\"", ",", "help", "=", "\"path to config file\"", ",", "type", "=", "str", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\"opts\"", ",", "help", "=", "\"Modify config options using the command-line\"", ",", "default", "=", "None", ",", "\n", "nargs", "=", "argparse", ".", "REMAINDER", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "num_gpus", "=", "int", "(", "os", ".", "environ", "[", "\"WORLD_SIZE\"", "]", ")", "if", "\"WORLD_SIZE\"", "in", "os", ".", "environ", "else", "1", "\n", "\n", "if", "args", ".", "config_file", "!=", "\"\"", ":", "\n", "        ", "cfg", ".", "merge_from_file", "(", "args", ".", "config_file", ")", "\n", "", "cfg", ".", "merge_from_list", "(", "args", ".", "opts", ")", "\n", "cfg", ".", "freeze", "(", ")", "\n", "\n", "output_dir", "=", "cfg", ".", "OUTPUT_DIR", "\n", "if", "output_dir", "and", "not", "os", ".", "path", ".", "exists", "(", "output_dir", ")", ":", "\n", "        ", "mkdir", "(", "output_dir", ")", "\n", "\n", "", "logger", "=", "setup_logger", "(", "\"reid_baseline\"", ",", "output_dir", ",", "0", ")", "\n", "logger", ".", "info", "(", "\"Using {} GPUS\"", ".", "format", "(", "num_gpus", ")", ")", "\n", "logger", ".", "info", "(", "args", ")", "\n", "\n", "if", "args", ".", "config_file", "!=", "\"\"", ":", "\n", "        ", "logger", ".", "info", "(", "\"Loaded configuration file {}\"", ".", "format", "(", "args", ".", "config_file", ")", ")", "\n", "# with open(args.config_file, 'r') as cf:", "\n", "#     config_str = \"\\n\" + cf.read()", "\n", "#     logger.info(config_str)", "\n", "", "logger", ".", "info", "(", "\"Running with config:\\n{}\"", ".", "format", "(", "cfg", ")", ")", "\n", "\n", "if", "cfg", ".", "MODEL", ".", "DEVICE", "==", "\"cuda\"", ":", "\n", "        ", "os", ".", "environ", "[", "'CUDA_VISIBLE_DEVICES'", "]", "=", "cfg", ".", "MODEL", ".", "DEVICE_ID", "\n", "", "cudnn", ".", "benchmark", "=", "True", "\n", "\n", "train_loader", ",", "val_loader", ",", "num_query", ",", "num_classes", ",", "dataset", "=", "make_data_loader", "(", "cfg", ")", "\n", "model", "=", "build_model", "(", "cfg", ",", "num_classes", ")", "\n", "model", ".", "load_param", "(", "cfg", ".", "TEST", ".", "WEIGHT", ")", "\n", "\n", "vis_actmap", "(", "model", ",", "cfg", ",", "val_loader", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.aicity20.vis_result.visualize_submit": [[9, 50], ["enumerate", "os.path.exists", "os.makedirs", "open", "f.readlines", "os.path.basename", "os.path.join", "imgs.append", "range", "numpy.concatenate", "cv2.imwrite", "line.strip.strip", "results.append", "os.path.basename", "gallery_paths.append", "cv2.resize", "cv2.resize", "imgs.append", "os.path.join", "line.strip.split", "os.path.join", "cv2.imread", "cv2.imread", "cv2.rectangle", "os.path.basename"], "function", ["None"], ["def", "visualize_submit", "(", "dataset", ",", "out_dir", ",", "submit_txt_path", ",", "topk", "=", "5", ")", ":", "\n", "    ", "query_dir", "=", "dataset", ".", "query_dir", "\n", "gallery_dir", "=", "dataset", ".", "gallery_dir", "\n", "\n", "vis_size", "=", "(", "256", ",", "256", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "out_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "out_dir", ")", "\n", "", "results", "=", "[", "]", "\n", "with", "open", "(", "submit_txt_path", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "lines", "=", "f", ".", "readlines", "(", ")", "\n", "for", "line", "in", "lines", ":", "\n", "            ", "line", "=", "line", ".", "strip", "(", ")", "\n", "results", ".", "append", "(", "line", ".", "split", "(", "' '", ")", ")", "\n", "\n", "", "", "query_pids", "=", "[", "pid", "for", "_", ",", "pid", ",", "_", "in", "dataset", ".", "query", "]", "\n", "img_to_pid", "=", "{", "}", "\n", "for", "img_path", ",", "pid", ",", "_", "in", "dataset", ".", "gallery", ":", "\n", "        ", "name", "=", "os", ".", "path", ".", "basename", "(", "img_path", ")", "\n", "img_to_pid", "[", "name", "]", "=", "pid", "\n", "\n", "", "for", "i", ",", "result", "in", "enumerate", "(", "results", ")", ":", "\n", "        ", "is_False", "=", "False", "\n", "# query_path = os.path.join(query_dir, str(i+1).zfill(6)+'.jpg')", "\n", "query_path", "=", "os", ".", "path", ".", "join", "(", "query_dir", ",", "os", ".", "path", ".", "basename", "(", "dataset", ".", "query", "[", "i", "]", "[", "0", "]", ")", ")", "\n", "gallery_paths", "=", "[", "]", "\n", "for", "name", "in", "result", ":", "\n", "# gallery_paths.append(os.path.join(gallery_dir, index.zfill(6)+'.jpg'))", "\n", "            ", "gallery_paths", ".", "append", "(", "os", ".", "path", ".", "join", "(", "gallery_dir", ",", "name", ")", ")", "\n", "\n", "", "imgs", "=", "[", "]", "\n", "imgs", ".", "append", "(", "cv2", ".", "resize", "(", "cv2", ".", "imread", "(", "query_path", ")", ",", "vis_size", ")", ")", "\n", "for", "n", "in", "range", "(", "topk", ")", ":", "\n", "            ", "img", "=", "cv2", ".", "resize", "(", "cv2", ".", "imread", "(", "gallery_paths", "[", "n", "]", ")", ",", "vis_size", ")", "\n", "if", "query_pids", "[", "i", "]", "!=", "img_to_pid", "[", "result", "[", "n", "]", "]", ":", "\n", "                ", "img", "=", "cv2", ".", "rectangle", "(", "img", ",", "(", "0", ",", "0", ")", ",", "vis_size", ",", "(", "0", ",", "0", ",", "255", ")", ",", "2", ")", "\n", "is_False", "=", "True", "\n", "", "imgs", ".", "append", "(", "img", ")", "\n", "\n", "", "canvas", "=", "np", ".", "concatenate", "(", "imgs", ",", "axis", "=", "1", ")", "\n", "#if is_False:", "\n", "cv2", ".", "imwrite", "(", "os", ".", "path", ".", "join", "(", "out_dir", ",", "os", ".", "path", ".", "basename", "(", "query_path", ")", ")", ",", "canvas", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.aicity20.weakly_supervised_crop_aug.vis_actmap": [[25, 98], ["model.to", "model.eval", "os.path.exists", "os.mkdir", "os.path.exists", "os.mkdir", "os.path.exists", "os.mkdir", "os.path.exists", "os.mkdir", "torch.no_grad", "enumerate", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "data.cuda.cuda", "model", "range", "model.size", "featmap[].detach().cpu().numpy", "cv2.resize", "lib.utils.bbox_utils.localize_from_map", "numpy.uint8", "cv2.applyColorMap", "cv2.imread", "numpy.array", "numpy.array", "results.append", "cv2.imwrite", "numpy.floor", "os.path.join", "featmap[].detach().cpu", "np.array.tolist", "numpy.min", "numpy.max", "numpy.min", "featmap[].detach", "img_path[].split", "img_path[].split", "lib.config.cfg", "lib.config.cfg"], "function", ["home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.utils.bbox_utils.localize_from_map"], ["def", "vis_actmap", "(", "model", ",", "cfg", ",", "loader", ",", "out_dir", ")", ":", "\n", "    ", "device", "=", "cfg", ".", "MODEL", ".", "DEVICE", "\n", "model", ".", "to", "(", "device", ")", "\n", "model", ".", "eval", "(", ")", "\n", "\n", "img_size", "=", "cfg", ".", "INPUT", ".", "SIZE_TEST", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "out_dir", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "out_dir", ")", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "out_dir", ",", "'image_train'", ")", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "os", ".", "path", ".", "join", "(", "out_dir", ",", "'image_train'", ")", ")", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "out_dir", ",", "'image_query'", ")", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "os", ".", "path", ".", "join", "(", "out_dir", ",", "'image_query'", ")", ")", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "out_dir", ",", "'image_test'", ")", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "os", ".", "path", ".", "join", "(", "out_dir", ",", "'image_test'", ")", ")", "\n", "\n", "", "results", "=", "[", "]", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "i", ",", "batch", "in", "enumerate", "(", "loader", ")", ":", "\n", "            ", "data", ",", "pid", ",", "camid", ",", "img_path", "=", "batch", "\n", "data", "=", "data", ".", "cuda", "(", ")", "\n", "featmap", "=", "model", "(", "data", ",", "return_featmap", "=", "True", ")", "# N*2048*7*7", "\n", "featmap", "=", "(", "featmap", "**", "2", ")", ".", "sum", "(", "1", ")", "# N*1*7*7", "\n", "canvas", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "featmap", ".", "size", "(", "0", ")", ")", ":", "\n", "                ", "fm", "=", "featmap", "[", "j", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "# something is not right!", "\n", "# fm[0:3, 0:3] = 0", "\n", "# fm[0:3, 12:15] = 0", "\n", "# fm[12:15, 0:3] = 0", "\n", "# fm[12:15, 12:15] = 0", "\n", "\n", "fm", "[", "0", ":", "4", ",", ":", "]", "=", "0", "\n", "fm", "[", "12", ":", "16", ",", ":", "]", "=", "0", "\n", "fm", "[", ":", ",", "0", ":", "4", "]", "=", "0", "\n", "fm", "[", ":", ",", "12", ":", "16", "]", "=", "0", "\n", "\n", "fm", "=", "cv2", ".", "resize", "(", "fm", ",", "(", "img_size", "[", "1", "]", ",", "img_size", "[", "0", "]", ")", ")", "\n", "fm", "=", "255", "*", "(", "fm", "-", "np", ".", "min", "(", "fm", ")", ")", "/", "(", "\n", "np", ".", "max", "(", "fm", ")", "-", "np", ".", "min", "(", "fm", ")", "+", "1e-12", "\n", ")", "\n", "bbox", "=", "localize_from_map", "(", "fm", ",", "threshold_ratio", "=", "1.0", ")", "\n", "fm", "=", "np", ".", "uint8", "(", "np", ".", "floor", "(", "fm", ")", ")", "\n", "fm", "=", "cv2", ".", "applyColorMap", "(", "fm", ",", "cv2", ".", "COLORMAP_JET", ")", "\n", "\n", "img", "=", "cv2", ".", "imread", "(", "img_path", "[", "j", "]", ")", "\n", "height", ",", "width", ",", "_", "=", "img", ".", "shape", "\n", "#img = cv2.resize(img, (img_size[1], img_size[0]))", "\n", "bbox", "=", "np", ".", "array", "(", "bbox", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "bbox", "[", "0", ":", ":", "2", "]", "*=", "width", "/", "img_size", "[", "1", "]", "\n", "bbox", "[", "1", ":", ":", "2", "]", "*=", "height", "/", "img_size", "[", "0", "]", "\n", "\n", "bbox", "[", ":", "2", "]", "*=", "0.7", "\n", "bbox", "[", "2", ":", "]", "*=", "1.2", "\n", "\n", "bbox", "=", "np", ".", "array", "(", "bbox", ",", "dtype", "=", "np", ".", "int", ")", "\n", "\n", "results", ".", "append", "(", "{", "'img_path'", ":", "'/'", ".", "join", "(", "img_path", "[", "j", "]", ".", "split", "(", "'/'", ")", "[", "-", "2", ":", "]", ")", ",", "'bbox'", ":", "bbox", ".", "tolist", "(", ")", "}", ")", "\n", "\n", "crop", "=", "img", "[", "bbox", "[", "1", "]", ":", "bbox", "[", "3", "]", ",", "bbox", "[", "0", "]", ":", "bbox", "[", "2", "]", ",", ":", "]", "\n", "\n", "#crop = cv2.resize(crop, (img_size[1], img_size[0]))", "\n", "cv2", ".", "imwrite", "(", "os", ".", "path", ".", "join", "(", "out_dir", ",", "'/'", ".", "join", "(", "img_path", "[", "j", "]", ".", "split", "(", "'/'", ")", "[", "-", "2", ":", "]", ")", ")", ",", "crop", ")", "\n", "\n", "#overlapped = img * 0.3 + fm * 0.7", "\n", "#overlapped = draw_bbox(overlapped, [bbox])", "\n", "\n", "#overlapped = overlapped.astype(np.uint8)", "\n", "#canvas.append(cv2.resize(overlapped, (img_size[1], img_size[0])))", "\n", "#canvas = np.concatenate(canvas[:8], axis=1)  # .reshape([-1, 2048, 3])", "\n", "#cv2.imwrite(os.path.join(out_dir, '{}.jpg'.format(i)), canvas)", "\n", "", "", "", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.aicity20.weakly_supervised_crop_aug.main": [[101, 145], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "lib.config.cfg.merge_from_list", "lib.config.cfg.freeze", "lib.utils.logger.setup_logger", "lib.utils.logger.setup_logger.info", "lib.utils.logger.setup_logger.info", "lib.utils.logger.setup_logger.info", "lib.data.make_data_loader", "lib.modeling.build_model", "lib.modeling.build_model.load_param", "os.path.dirname", "weakly_supervised_crop_aug.vis_actmap", "weakly_supervised_crop_aug.vis_actmap", "int", "lib.config.cfg.merge_from_file", "os.mkdir", "lib.utils.logger.setup_logger.info", "open", "json.dump", "os.path.exists", "os.path.join"], "function", ["home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.utils.logger.setup_logger", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.data.build.make_data_loader", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.modeling.__init__.build_model", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.regnet.regnet.RegNet.load_param", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.aicity20.weakly_supervised_crop_aug.vis_actmap", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.aicity20.weakly_supervised_crop_aug.vis_actmap"], ["", "def", "main", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "\"ReID Baseline Inference\"", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--config_file\"", ",", "default", "=", "\"./configs/debug.yml\"", ",", "help", "=", "\"path to config file\"", ",", "type", "=", "str", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\"opts\"", ",", "help", "=", "\"Modify config options using the command-line\"", ",", "default", "=", "None", ",", "\n", "nargs", "=", "argparse", ".", "REMAINDER", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "num_gpus", "=", "int", "(", "os", ".", "environ", "[", "\"WORLD_SIZE\"", "]", ")", "if", "\"WORLD_SIZE\"", "in", "os", ".", "environ", "else", "1", "\n", "\n", "if", "args", ".", "config_file", "!=", "\"\"", ":", "\n", "        ", "cfg", ".", "merge_from_file", "(", "args", ".", "config_file", ")", "\n", "", "cfg", ".", "merge_from_list", "(", "args", ".", "opts", ")", "\n", "cfg", ".", "freeze", "(", ")", "\n", "\n", "output_dir", "=", "cfg", ".", "OUTPUT_DIR", "\n", "if", "output_dir", "and", "not", "os", ".", "path", ".", "exists", "(", "output_dir", ")", ":", "\n", "        ", "mkdir", "(", "output_dir", ")", "\n", "\n", "", "logger", "=", "setup_logger", "(", "\"reid_baseline\"", ",", "output_dir", ",", "0", ")", "\n", "logger", ".", "info", "(", "\"Using {} GPUS\"", ".", "format", "(", "num_gpus", ")", ")", "\n", "logger", ".", "info", "(", "args", ")", "\n", "\n", "if", "args", ".", "config_file", "!=", "\"\"", ":", "\n", "        ", "logger", ".", "info", "(", "\"Loaded configuration file {}\"", ".", "format", "(", "args", ".", "config_file", ")", ")", "\n", "", "logger", ".", "info", "(", "\"Running with config:\\n{}\"", ".", "format", "(", "cfg", ")", ")", "\n", "\n", "if", "cfg", ".", "MODEL", ".", "DEVICE", "==", "\"cuda\"", ":", "\n", "        ", "os", ".", "environ", "[", "'CUDA_VISIBLE_DEVICES'", "]", "=", "cfg", ".", "MODEL", ".", "DEVICE_ID", "\n", "", "cudnn", ".", "benchmark", "=", "True", "\n", "\n", "train_loader", ",", "val_loader", ",", "num_query", ",", "num_classes", ",", "dataset", "=", "make_data_loader", "(", "cfg", ")", "\n", "model", "=", "build_model", "(", "cfg", ",", "num_classes", ")", "\n", "model", ".", "load_param", "(", "cfg", ".", "TEST", ".", "WEIGHT", ")", "\n", "\n", "results", "=", "[", "]", "\n", "out_dir", "=", "os", ".", "path", ".", "dirname", "(", "cfg", ".", "TEST", ".", "WEIGHT", ")", "\n", "results", "+=", "vis_actmap", "(", "model", ",", "cfg", ",", "train_loader", ",", "out_dir", ")", "\n", "results", "+=", "vis_actmap", "(", "model", ",", "cfg", ",", "val_loader", ",", "out_dir", ")", "\n", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "out_dir", ",", "'detection.json'", ")", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "json", ".", "dump", "(", "results", ",", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.aicity20.submit.write_result": [[23, 34], ["print", "os.path.exists", "os.makedirs", "open", "range", "os.path.join", "f.write", "map", "write_line.tolist"], "function", ["None"], ["def", "write_result", "(", "indices", ",", "dst_dir", ",", "topk", "=", "100", ")", ":", "\n", "    ", "indices", "=", "indices", "[", ":", ",", ":", "topk", "]", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "dst_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "dst_dir", ")", "\n", "", "m", ",", "n", "=", "indices", ".", "shape", "\n", "print", "(", "'m: {}  n: {}'", ".", "format", "(", "m", ",", "n", ")", ")", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "dst_dir", ",", "'track2.txt'", ")", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "for", "i", "in", "range", "(", "m", ")", ":", "\n", "            ", "write_line", "=", "indices", "[", "i", "]", "+", "1", "\n", "write_line", "=", "' '", ".", "join", "(", "map", "(", "str", ",", "write_line", ".", "tolist", "(", ")", ")", ")", "+", "'\\n'", "\n", "f", ".", "write", "(", "write_line", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.aicity20.submit.write_result_with_track": [[38, 73], ["print", "range", "enumerate", "range", "os.path.exists", "os.makedirs", "results.append", "set", "range", "reranked_results.append", "open", "range", "set.add", "reranked_result.extend", "os.path.join", "f.write", "len", "int", "map", "img_name.split"], "function", ["None"], ["def", "write_result_with_track", "(", "indices", ",", "dst_dir", ",", "tracks", ",", "topk", "=", "100", ")", ":", "\n", "    ", "indices", "=", "indices", "[", ":", ",", ":", "topk", "]", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "dst_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "dst_dir", ")", "\n", "", "m", ",", "n", "=", "indices", ".", "shape", "\n", "print", "(", "'m: {}  n: {}'", ".", "format", "(", "m", ",", "n", ")", ")", "\n", "\n", "results", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "m", ")", ":", "\n", "        ", "results", ".", "append", "(", "(", "indices", "[", "i", "]", "+", "1", ")", ".", "tolist", "(", ")", ")", "\n", "\n", "# rerank results according to tracks", "\n", "", "lookup_map", "=", "{", "}", "\n", "for", "i", ",", "track", "in", "enumerate", "(", "tracks", ")", ":", "\n", "# for img_id in track:", "\n", "#     lookup_map[int(img_id)] = i", "\n", "        ", "for", "img_name", "in", "track", ":", "\n", "            ", "lookup_map", "[", "int", "(", "img_name", ".", "split", "(", "'.'", ")", "[", "0", "]", ")", "]", "=", "i", "\n", "", "", "reranked_results", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "m", ")", ":", "\n", "        ", "used_track_id", "=", "set", "(", ")", "\n", "reranked_result", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "topk", ")", ":", "\n", "            ", "track_id", "=", "lookup_map", "[", "results", "[", "i", "]", "[", "j", "]", "]", "\n", "if", "track_id", "in", "used_track_id", ":", "\n", "                ", "continue", "\n", "", "used_track_id", ".", "add", "(", "track_id", ")", "\n", "reranked_result", ".", "extend", "(", "tracks", "[", "track_id", "]", ")", "\n", "if", "len", "(", "reranked_result", ")", ">=", "topk", ":", "break", "\n", "", "reranked_results", ".", "append", "(", "reranked_result", "[", ":", "topk", "]", ")", "\n", "\n", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "dst_dir", ",", "'track2.txt'", ")", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "for", "i", "in", "range", "(", "m", ")", ":", "\n", "            ", "write_line", "=", "' '", ".", "join", "(", "map", "(", "str", ",", "reranked_results", "[", "i", "]", ")", ")", "+", "'\\n'", "\n", "f", ".", "write", "(", "write_line", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.aicity20.submit.main": [[75, 120], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "lib.config.cfg.merge_from_list", "lib.config.cfg.freeze", "lib.utils.logger.setup_logger", "lib.utils.logger.setup_logger.info", "lib.utils.logger.setup_logger.info", "lib.utils.logger.setup_logger.info", "lib.data.make_data_loader", "lib.modeling.build_model", "lib.modeling.build_model.load_param", "lib.engine.inference.inference", "lib.data.datasets.aicity20.AICity20", "submit.write_result_with_track", "int", "lib.config.cfg.merge_from_file", "os.mkdir", "lib.utils.logger.setup_logger.info", "os.path.dirname", "os.path.exists", "open", "lib.utils.logger.setup_logger.info", "cf.read"], "function", ["home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.utils.logger.setup_logger", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.data.build.make_data_loader", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.modeling.__init__.build_model", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.regnet.regnet.RegNet.load_param", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.engine.inference.inference", "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.aicity20.submit.write_result_with_track"], ["", "", "", "def", "main", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "\"ReID Baseline Inference\"", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--config_file\"", ",", "default", "=", "\"./configs/debug.yml\"", ",", "help", "=", "\"path to config file\"", ",", "type", "=", "str", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\"opts\"", ",", "help", "=", "\"Modify config options using the command-line\"", ",", "default", "=", "None", ",", "\n", "nargs", "=", "argparse", ".", "REMAINDER", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "num_gpus", "=", "int", "(", "os", ".", "environ", "[", "\"WORLD_SIZE\"", "]", ")", "if", "\"WORLD_SIZE\"", "in", "os", ".", "environ", "else", "1", "\n", "\n", "if", "args", ".", "config_file", "!=", "\"\"", ":", "\n", "        ", "cfg", ".", "merge_from_file", "(", "args", ".", "config_file", ")", "\n", "", "cfg", ".", "merge_from_list", "(", "args", ".", "opts", ")", "\n", "cfg", ".", "freeze", "(", ")", "\n", "\n", "output_dir", "=", "cfg", ".", "OUTPUT_DIR", "\n", "if", "output_dir", "and", "not", "os", ".", "path", ".", "exists", "(", "output_dir", ")", ":", "\n", "        ", "mkdir", "(", "output_dir", ")", "\n", "\n", "", "logger", "=", "setup_logger", "(", "\"reid_baseline\"", ",", "output_dir", ",", "0", ")", "\n", "logger", ".", "info", "(", "\"Using {} GPUS\"", ".", "format", "(", "num_gpus", ")", ")", "\n", "logger", ".", "info", "(", "args", ")", "\n", "\n", "if", "args", ".", "config_file", "!=", "\"\"", ":", "\n", "        ", "logger", ".", "info", "(", "\"Loaded configuration file {}\"", ".", "format", "(", "args", ".", "config_file", ")", ")", "\n", "with", "open", "(", "args", ".", "config_file", ",", "'r'", ")", "as", "cf", ":", "\n", "            ", "config_str", "=", "\"\\n\"", "+", "cf", ".", "read", "(", ")", "\n", "logger", ".", "info", "(", "config_str", ")", "\n", "", "", "logger", ".", "info", "(", "\"Running with config:\\n{}\"", ".", "format", "(", "cfg", ")", ")", "\n", "\n", "if", "cfg", ".", "MODEL", ".", "DEVICE", "==", "\"cuda\"", ":", "\n", "        ", "os", ".", "environ", "[", "'CUDA_VISIBLE_DEVICES'", "]", "=", "cfg", ".", "MODEL", ".", "DEVICE_ID", "\n", "", "cudnn", ".", "benchmark", "=", "True", "\n", "\n", "train_loader", ",", "val_loader", ",", "num_query", ",", "num_classes", ",", "dataset", "=", "make_data_loader", "(", "cfg", ")", "\n", "model", "=", "build_model", "(", "cfg", ",", "num_classes", ")", "\n", "model", ".", "load_param", "(", "cfg", ".", "TEST", ".", "WEIGHT", ")", "\n", "\n", "indices_np", "=", "inference", "(", "cfg", ",", "model", ",", "val_loader", ",", "num_query", ",", "dataset", ")", "\n", "## read meta information", "\n", "dataset", "=", "AICity20", "(", "cfg", ".", "DATASETS", ".", "ROOT_DIR", ")", "\n", "#write_result(indices_np, os.path.dirname(cfg.TEST.WEIGHT), topk=100)", "\n", "write_result_with_track", "(", "indices_np", ",", "os", ".", "path", ".", "dirname", "(", "cfg", ".", "TEST", ".", "WEIGHT", ")", ",", "dataset", ".", "test_tracks", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.aicity20.eval_by_distmat.generate_track_results": [[12, 23], ["numpy.argsort", "range", "results.append", "result.extend"], "function", ["None"], ["def", "generate_track_results", "(", "distmat", ",", "tracks", ",", "topk", "=", "100", ")", ":", "\n", "    ", "indice", "=", "np", ".", "argsort", "(", "distmat", ",", "axis", "=", "1", ")", "\n", "results", "=", "[", "]", "\n", "m", ",", "n", "=", "distmat", ".", "shape", "\n", "for", "i", "in", "range", "(", "m", ")", ":", "\n", "        ", "result", "=", "[", "]", "\n", "track_idxs", "=", "indice", "[", "i", "]", "\n", "for", "idx", "in", "track_idxs", ":", "\n", "            ", "result", ".", "extend", "(", "tracks", "[", "idx", "]", ")", "\n", "", "results", ".", "append", "(", "result", "[", ":", "topk", "]", ")", "\n", "", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.aicity20.eval_by_distmat.results_to_pid": [[25, 34], ["result_pids.append", "result_pid.append"], "function", ["None"], ["", "def", "results_to_pid", "(", "results", ",", "img_to_pid", ")", ":", "\n", "\n", "    ", "result_pids", "=", "[", "]", "\n", "for", "line", "in", "results", ":", "\n", "        ", "result_pid", "=", "[", "]", "\n", "for", "name", "in", "line", ":", "\n", "            ", "result_pid", ".", "append", "(", "img_to_pid", "[", "name", "]", ")", "\n", "", "result_pids", ".", "append", "(", "result_pid", ")", "\n", "", "return", "result_pids", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.aicity20.eval_by_distmat.eval_results": [[36, 65], ["numpy.array", "numpy.array", "numpy.array", "range", "numpy.mean", "print", "len", "gt_match[].sum", "match.cumsum", "all_cmc.append", "match.cumsum", "all_AP.append", "numpy.array().sum", "print", "numpy.any", "numpy.array", "numpy.asarray", "match.cumsum.sum", "numpy.arange", "numpy.array", "len"], "function", ["None"], ["", "def", "eval_results", "(", "query_pids", ",", "gallery_pids", ",", "result_pids", ")", ":", "\n", "    ", "query_pids", "=", "np", ".", "array", "(", "query_pids", ")", "\n", "gallery_pids", "=", "np", ".", "array", "(", "gallery_pids", ")", "\n", "result_pids", "=", "np", ".", "array", "(", "result_pids", ")", "\n", "gt_match", "=", "gallery_pids", "==", "query_pids", "[", ":", ",", "np", ".", "newaxis", "]", "\n", "\n", "all_cmc", "=", "[", "]", "\n", "all_AP", "=", "[", "]", "\n", "num_valid_q", "=", "0", "\n", "for", "i", "in", "range", "(", "len", "(", "query_pids", ")", ")", ":", "\n", "        ", "if", "not", "np", ".", "any", "(", "gt_match", "[", "i", "]", ")", ":", "\n", "            ", "continue", "\n", "", "num_valid_q", "+=", "1", "\n", "num_rel", "=", "gt_match", "[", "i", "]", ".", "sum", "(", ")", "\n", "match", "=", "query_pids", "[", "i", "]", "==", "result_pids", "[", "i", "]", "\n", "cmc", "=", "match", ".", "cumsum", "(", ")", "\n", "cmc", "[", "cmc", ">", "1", "]", "=", "1", "\n", "all_cmc", ".", "append", "(", "cmc", ")", "\n", "tmp_cmc", "=", "match", ".", "cumsum", "(", ")", "\n", "tmp_cmc", "=", "np", ".", "array", "(", "tmp_cmc", ")", "/", "(", "np", ".", "arange", "(", "len", "(", "tmp_cmc", ")", ")", "+", "1.", ")", "\n", "tmp_cmc", "=", "np", ".", "asarray", "(", "tmp_cmc", ")", "*", "match", "\n", "AP", "=", "tmp_cmc", ".", "sum", "(", ")", "/", "num_rel", "\n", "all_AP", ".", "append", "(", "AP", ")", "\n", "\n", "", "all_cmc", "=", "np", ".", "array", "(", "all_cmc", ")", ".", "sum", "(", "0", ")", "/", "num_valid_q", "\n", "mAP", "=", "np", ".", "mean", "(", "all_AP", ")", "\n", "print", "(", "\"mAP: {:.1%}\"", ".", "format", "(", "mAP", ")", ")", "\n", "for", "r", "in", "[", "1", ",", "5", ",", "10", "]", ":", "\n", "        ", "print", "(", "\"CMC curve, Rank-{:<3}:{:.1%}\"", ".", "format", "(", "r", ",", "all_cmc", "[", "r", "-", "1", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.aicity20.eval_by_distmat.generate_results": [[67, 80], ["numpy.argsort", "range", "len", "os.path.basename", "range", "results.append", "result.append"], "function", ["None"], ["", "", "def", "generate_results", "(", "distmat", ",", "gallery", ",", "topk", "=", "100", ")", ":", "\n", "    ", "assert", "distmat", ".", "shape", "[", "1", "]", "==", "len", "(", "gallery", ")", "\n", "names", "=", "[", "os", ".", "path", ".", "basename", "(", "img_path", ")", "for", "img_path", ",", "pid", ",", "camid", "in", "gallery", "]", "\n", "indice", "=", "np", ".", "argsort", "(", "distmat", ",", "axis", "=", "1", ")", "\n", "indice", "=", "indice", "[", ":", ",", ":", "topk", "]", "\n", "results", "=", "[", "]", "\n", "m", ",", "n", "=", "indice", ".", "shape", "\n", "for", "i", "in", "range", "(", "m", ")", ":", "\n", "        ", "result", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "n", ")", ":", "\n", "            ", "result", ".", "append", "(", "names", "[", "indice", "[", "i", ",", "j", "]", "]", ")", "\n", "", "results", ".", "append", "(", "result", ")", "\n", "", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.cybercore-co-ltd_track2_aicity_2021.aicity20.eval_by_distmat.results_to_track": [[82, 100], ["enumerate", "range", "len", "len", "set", "range", "reranked_results.append", "set.add", "reranked_result.extend"], "function", ["None"], ["", "def", "results_to_track", "(", "results", ",", "tracks", ",", "topk", "=", "100", ")", ":", "\n", "    ", "m", ",", "n", "=", "len", "(", "results", ")", ",", "len", "(", "results", "[", "0", "]", ")", "\n", "lookup_map", "=", "{", "}", "\n", "for", "i", ",", "track", "in", "enumerate", "(", "tracks", ")", ":", "\n", "        ", "for", "img_id", "in", "track", ":", "\n", "            ", "lookup_map", "[", "img_id", "]", "=", "i", "\n", "", "", "reranked_results", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "m", ")", ":", "\n", "        ", "used_track_id", "=", "set", "(", ")", "\n", "reranked_result", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "n", ")", ":", "\n", "            ", "track_id", "=", "lookup_map", "[", "results", "[", "i", "]", "[", "j", "]", "]", "\n", "if", "track_id", "in", "used_track_id", ":", "\n", "                ", "continue", "\n", "", "used_track_id", ".", "add", "(", "track_id", ")", "\n", "reranked_result", ".", "extend", "(", "tracks", "[", "track_id", "]", ")", "\n", "", "reranked_results", ".", "append", "(", "reranked_result", "[", ":", "topk", "]", ")", "\n", "", "return", "reranked_results", "\n", "\n"]]}